{"files":[{"patch":"@@ -897,1 +897,6 @@\n-        return checkBase(t, tree, env, classExpected, interfaceExpected, checkExtensible);\n+        try {\n+            return checkBase(t, tree, env, classExpected, interfaceExpected, checkExtensible);\n+        } catch (CompletionFailure ex) {\n+            chk.completionError(tree.pos(), ex);\n+            return t;\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -8,1 +8,1 @@\n- * @compile\/fail\/ref=MissingSuperRecovery.out --diags=layout=%b:%l:%_%m MissingSuperRecovery.java\n+ * @compile\/fail\/ref=MissingSuperRecovery.out -XDrawDiagnostics MissingSuperRecovery.java\n","filename":"test\/langtools\/tools\/javac\/missingSuperRecovery\/MissingSuperRecovery.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,4 +1,1 @@\n-MissingSuperRecovery.java:15: cannot access base\n-public class MissingSuperRecovery extends impl {\n-       ^\n-  class file for base not found\n+MissingSuperRecovery.java:15:43: compiler.err.cant.access: base, (compiler.misc.class.file.not.found: base)\n","filename":"test\/langtools\/tools\/javac\/missingSuperRecovery\/MissingSuperRecovery.out","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8284283\n+ * @summary Verify javac's error recovery can handle multiple missing transitive supertypes\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.compiler\/com.sun.tools.javac.api\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run main MissingTransitiveSuperTypes\n+ *\/\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.Arrays;\n+\n+import toolbox.ToolBox;\n+import toolbox.TestRunner;\n+import toolbox.JavacTask;\n+import toolbox.Task;\n+\n+public class MissingTransitiveSuperTypes extends TestRunner {\n+    ToolBox tb;\n+\n+    public MissingTransitiveSuperTypes() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        new MissingTransitiveSuperTypes().runTests(m -> new Object[] {Paths.get(m.getName())});\n+    }\n+\n+    @Test\n+    public void testMultipleTransitiveSuperTypesMissing(Path base) throws Exception {\n+        Path libClasses = base.resolve(\"libclasses\");\n+        Files.createDirectories(libClasses);\n+        new JavacTask(tb)\n+            .outdir(libClasses)\n+            .sources(\"\"\"\n+                     package lib;\n+                     public class Lib implements A, B {}\n+                     \"\"\",\n+                     \"\"\"\n+                     package lib;\n+                     public interface A {}\n+                     \"\"\",\n+                     \"\"\"\n+                     package lib;\n+                     public interface B {}\n+                     \"\"\")\n+            .options()\n+            .run()\n+            .writeAll();\n+        Files.delete(libClasses.resolve(\"lib\").resolve(\"A.class\"));\n+        Files.delete(libClasses.resolve(\"lib\").resolve(\"B.class\"));\n+        String code = \"\"\"\n+                      public class Test<E> extends lib.Lib {}\n+                      \"\"\";\n+        List<String> output = new JavacTask(tb)\n+                .classpath(libClasses)\n+                .sources(code)\n+                .options(\"-XDrawDiagnostics\", \"-XDdev\")\n+                .run(Task.Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+        List<String> expected = Arrays.asList(\n+                \"Test.java:1:33: compiler.err.cant.access: lib.A, (compiler.misc.class.file.not.found: lib.A)\",\n+                \"Test.java:1:8: compiler.err.cant.access: lib.B, (compiler.misc.class.file.not.found: lib.B)\",\n+                \"2 errors\");\n+        tb.checkEqual(expected, output);\n+    }\n+\n+}\n","filename":"test\/langtools\/tools\/javac\/recovery\/MissingTransitiveSuperTypes.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"}]}