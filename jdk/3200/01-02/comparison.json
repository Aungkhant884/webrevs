{"files":[{"patch":"@@ -351,31 +351,3 @@\n-\/\/ Take the case: A extends B extends A\n-\/\/\n-\/\/ Single Threaded:\n-\/\/   1. forName\/ConstantPool reference for A: calls resolve_or_fail for A\n-\/\/      Bootstrap and non-parallelCapable create placeholder for LOAD_INSTANCE T1 A\n-\/\/      loadClass A (parallelCapable loader locks A)\n-\/\/   2. defineClass A -> calls resolve_from_stream -> calls resolve_super_or_fail for B\n-\/\/      resolve_super_or_fail creates placeholder for LOAD_SUPER T1 A, superclass B\n-\/\/   3. resolve_or_fail for B\n-\/\/      Bootstrap and non-parallelCapable create placeholder LOAD_INSTANCE T1 B\n-\/\/      loadClass B (parallelCapable loader locks B)\n-\/\/   4. defineClass B -> calls resolve_from_stream -> calls resolve_super_or_fail for A\n-\/\/      resolve_super_or_fail creates placeholder for LOAD_SUPER T1 B, superclass A\n-\/\/   5. resolve_or_fail for A\n-\/\/      if Bootstrap and non-parallelCapable class loader:\n-\/\/         Finds placeholder for LOAD_INSTANCE T1 A -> throws ClassCircularityError\n-\/\/      else\n-\/\/         loadClass A\n-\/\/   6. defineClass A -> calls resolve_from_stream -> calls resolve_super_or_fail for B\n-\/\/      Finds placeholder LOAD_SUPER T1 A superclass B -> throws ClassCircularityError\n-\/\/\n-\/\/ Class circularity checking for cases where classloading is delegated to\n-\/\/ different threads and the classloader lock is released, is described below:\n-\/\/\n-\/\/ Step 3: If loadClass B above stalls due to ClassLoader.wait() call, or bootstrap class\n-\/\/ loading losing the race to acquire the SystemDictionary_lock, the second thread will attempt\n-\/\/ to load B to detect CCE, then waits until the first thread completes loading 4-6 and then\n-\/\/ resumes steps 4-6.\n-\/\/\n-\/\/ For ParallelCapable class loaders, will call handle_parallel_super_load to attempt to load\n-\/\/ the super class directly, then resume steps 4-6.\n+\/\/ resolve_super_or_fail adds a LOAD_SUPER placeholder to the placeholder table before calling\n+\/\/ resolve_instance_class_or_null. ClassCircularityError is detected when a LOAD_SUPER or LOAD_INSTANCE\n+\/\/ placeholder for the same thread, class, classloader is found.\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":3,"deletions":31,"binary":false,"changes":34,"status":"modified"}]}