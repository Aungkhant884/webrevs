{"files":[{"patch":"@@ -3371,1 +3371,1 @@\n-        __ movoop(dst_reg, (jobject)con, \/*immediate*\/true);\n+        __ movoop(dst_reg, (jobject)con);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -334,1 +334,1 @@\n-    __ movoop(reg, o, \/*immediate*\/true);\n+    __ movoop(reg, o);\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRAssembler_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -75,0 +75,6 @@\n+  virtual bool supports_instruction_patching() {\n+    NMethodPatchingType patching_type = nmethod_patching_type();\n+    return patching_type == NMethodPatchingType::conc_instruction_and_data_patch ||\n+            patching_type == NMethodPatchingType::stw_instruction_and_data_patch;\n+  }\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shared\/barrierSetAssembler_aarch64.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4443,5 +4443,2 @@\n-\/\/ Move an oop into a register.  immediate is true if we want\n-\/\/ immediate instructions and nmethod entry barriers are not enabled.\n-\/\/ i.e. we are not going to patch this instruction while the code is being\n-\/\/ executed by another thread.\n-void MacroAssembler::movoop(Register dst, jobject obj, bool immediate) {\n+\/\/ Move an oop into a register.\n+void MacroAssembler::movoop(Register dst, jobject obj) {\n@@ -4462,5 +4459,3 @@\n-  \/\/ nmethod entry barrier necessitate using the constant pool. They have to be\n-  \/\/ ordered with respected to oop accesses.\n-  \/\/ Using immediate literals would necessitate ISBs.\n-  BarrierSet* bs = BarrierSet::barrier_set();\n-  if ((bs->barrier_set_nmethod() != NULL && bs->barrier_set_assembler()->nmethod_patching_type() == NMethodPatchingType::conc_data_patch) || !immediate) {\n+  if (BarrierSet::barrier_set()->barrier_set_assembler()->supports_instruction_patching()) {\n+    mov(dst, Address((address)obj, rspec));\n+  } else {\n@@ -4469,2 +4464,1 @@\n-  } else\n-    mov(dst, Address((address)obj, rspec));\n+  }\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1226,1 +1226,1 @@\n-  void movoop(Register dst, jobject obj, bool immediate = false);\n+  void movoop(Register dst, jobject obj);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1557,2 +1557,1 @@\n-              JNIHandles::make_local(method->method_holder()->java_mirror()),\n-              \/*immediate*\/true);\n+              JNIHandles::make_local(method->method_holder()->java_mirror()));\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -294,1 +294,1 @@\n-    __ movoop(reg, o, \/* immediate *\/ true);\n+    __ movoop(reg, o);\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -77,0 +77,6 @@\n+  virtual bool supports_instruction_patching() {\n+    NMethodPatchingType patching_type = nmethod_patching_type();\n+    return patching_type == NMethodPatchingType::conc_instruction_and_data_patch ||\n+            patching_type == NMethodPatchingType::stw_instruction_and_data_patch;\n+  }\n+\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shared\/barrierSetAssembler_riscv.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1651,5 +1651,2 @@\n-\/\/ Move an oop into a register. immediate is true if we want\n-\/\/ immediate instructions and nmethod entry barriers are not enabled.\n-\/\/ i.e. we are not going to patch this instruction while the code is being\n-\/\/ executed by another thread.\n-void MacroAssembler::movoop(Register dst, jobject obj, bool immediate) {\n+\/\/ Move an oop into a register.\n+void MacroAssembler::movoop(Register dst, jobject obj) {\n@@ -1670,5 +1667,3 @@\n-  \/\/ nmethod entry barrier necessitate using the constant pool. They have to be\n-  \/\/ ordered with respected to oop access.\n-  \/\/ Using immediate literals would necessitate fence.i.\n-  BarrierSet* bs = BarrierSet::barrier_set();\n-  if ((bs->barrier_set_nmethod() != NULL && bs->barrier_set_assembler()->nmethod_patching_type() == NMethodPatchingType::conc_data_patch) || !immediate) {\n+  if (BarrierSet::barrier_set()->barrier_set_assembler()->supports_instruction_patching()) {\n+    mv(dst, Address((address)obj, rspec));\n+  } else {\n@@ -1677,2 +1672,1 @@\n-  } else\n-    mv(dst, Address((address)obj, rspec));\n+  }\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -178,1 +178,1 @@\n-  void movoop(Register dst, jobject obj, bool immediate = false);\n+  void movoop(Register dst, jobject obj);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-      \/\/ in movoop when BarrierSet::barrier_set()->barrier_set_nmethod() != NULL || !immediate\n+      \/\/ in movoop when BarrierSet::barrier_set()->barrier_set_nmethod() != NULL\n","filename":"src\/hotspot\/cpu\/riscv\/relocInfo_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2117,1 +2117,1 @@\n-        __ movoop(dst_reg, (jobject)con, \/*immediate*\/true);\n+        __ movoop(dst_reg, (jobject)con);\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1458,2 +1458,1 @@\n-              JNIHandles::make_local(method->method_holder()->java_mirror()),\n-              \/*immediate*\/true);\n+              JNIHandles::make_local(method->method_holder()->java_mirror()));\n","filename":"src\/hotspot\/cpu\/riscv\/sharedRuntime_riscv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}