{"files":[{"patch":"@@ -490,1 +490,1 @@\n-        return checked_cast<u2>(index);\n+        return static_cast<u2>(index);\n@@ -688,1 +688,1 @@\n-        int utf8_length = checked_cast<int>(stream->get_u2_fast());\n+        int utf8_length = static_cast<int>(stream->get_u2_fast());\n@@ -733,1 +733,1 @@\n-      stream->skip_u1_fast(checked_cast<int>(stream->get_u4_fast()));\n+      stream->skip_u1_fast(static_cast<int>(stream->get_u4_fast()));\n@@ -770,1 +770,1 @@\n-      stream->skip_u1_fast(checked_cast<int>(stream->get_u4_fast()));\n+      stream->skip_u1_fast(static_cast<int>(stream->get_u4_fast()));\n@@ -916,1 +916,1 @@\n-  u4 stack_map_attrib_len = checked_cast<u4>(writer.current_offset() - stack_map_attrib_len_offset);\n+  u4 stack_map_attrib_len = static_cast<u4>(writer.current_offset() - stack_map_attrib_len_offset);\n@@ -945,1 +945,1 @@\n-  u4 lnt_table_attributes_len = checked_cast<u4>(writer.current_offset() - lnt_attributes_length_offset);\n+  u4 lnt_table_attributes_len = static_cast<u4>(writer.current_offset() - lnt_attributes_length_offset);\n@@ -978,1 +978,1 @@\n-  u4 lvt_table_attributes_len = checked_cast<u4>(writer.current_offset() - lvt_attributes_length_offset);\n+  u4 lvt_table_attributes_len = static_cast<u4>(writer.current_offset() - lvt_attributes_length_offset);\n@@ -1008,1 +1008,1 @@\n-  u4 lvtt_table_attributes_len = checked_cast<u4>(writer.current_offset() - lvtt_attributes_length_offset);\n+  u4 lvtt_table_attributes_len = static_cast<u4>(writer.current_offset() - lvtt_attributes_length_offset);\n@@ -1118,1 +1118,1 @@\n-  u4 code_attribute_len = checked_cast<u4>(writer.current_offset() - code_attribute_length_offset);\n+  u4 code_attribute_len = static_cast<u4>(writer.current_offset() - code_attribute_length_offset);\n@@ -1326,1 +1326,1 @@\n-      \" bytes failed in JfrEventClassTransformer::on_klass_creation\", checked_cast<size_t>(new_buffer_size));\n+      \" bytes failed in JfrEventClassTransformer::on_klass_creation\", static_cast<size_t>(new_buffer_size));\n@@ -1492,1 +1492,1 @@\n-    const jclass super = checked_cast<jclass>(JfrJavaSupport::local_jni_handle(ik->super()->java_mirror(), THREAD));\n+    const jclass super = static_cast<jclass>(JfrJavaSupport::local_jni_handle(ik->super()->java_mirror(), THREAD));\n@@ -1535,1 +1535,1 @@\n-  const jclass clazz = checked_cast<jclass>(JfrJavaSupport::local_jni_handle(existing_klass->java_mirror(), THREAD));\n+  const jclass clazz = static_cast<jclass>(JfrJavaSupport::local_jni_handle(existing_klass->java_mirror(), THREAD));\n@@ -1567,1 +1567,1 @@\n-      checked_cast<size_t>(offset_of(JvmtiCachedClassFileData, data) + stream_len));\n+      static_cast<size_t>(offset_of(JvmtiCachedClassFileData, data) + stream_len));\n","filename":"src\/hotspot\/share\/jfr\/instrumentation\/jfrEventClassTransformer.cpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -341,1 +341,1 @@\n-    while (flag->name() != nullptr) {                                \\\n+    while (flag->name() != nullptr) {                             \\\n@@ -347,1 +347,1 @@\n-          event.set_origin(checked_cast<u8>(flag->get_origin()));  \\\n+          event.set_origin(static_cast<u8>(flag->get_origin()));  \\\n@@ -419,1 +419,1 @@\n-  event.set_gcTimeRatio(checked_cast<unsigned int>(conf.gc_time_ratio()));\n+  event.set_gcTimeRatio(static_cast<unsigned int>(conf.gc_time_ratio()));\n@@ -436,2 +436,2 @@\n-  event.set_maxTenuringThreshold(checked_cast<u1>(conf.max_tenuring_threshold()));\n-  event.set_initialTenuringThreshold(checked_cast<u1>(conf.initial_tenuring_threshold()));\n+  event.set_maxTenuringThreshold(static_cast<u1>(conf.max_tenuring_threshold()));\n+  event.set_initialTenuringThreshold(static_cast<u1>(conf.initial_tenuring_threshold()));\n@@ -450,1 +450,1 @@\n-  event.set_heapAddressBits(checked_cast<u1>(conf.heap_address_size_in_bits()));\n+  event.set_heapAddressBits(static_cast<u1>(conf.heap_address_size_in_bits()));\n@@ -460,1 +460,1 @@\n-  event.set_newRatio(checked_cast<unsigned int>(conf.new_ratio()));\n+  event.set_newRatio(static_cast<unsigned int>(conf.new_ratio()));\n@@ -663,1 +663,1 @@\n-  event.set_threadCount(checked_cast<s4>(CICompilerCount));\n+  event.set_threadCount(static_cast<s4>(CICompilerCount));\n@@ -671,2 +671,2 @@\n-  for (int bt_index = 0; bt_index < checked_cast<int>(CodeBlobType::NumTypes); ++bt_index) {\n-    const CodeBlobType bt = checked_cast<CodeBlobType>(bt_index);\n+  for (int bt_index = 0; bt_index < static_cast<int>(CodeBlobType::NumTypes); ++bt_index) {\n+    const CodeBlobType bt = static_cast<CodeBlobType>(bt_index);\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrPeriodic.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-  const float total_available_time = checked_cast<float>(wallclock_time * processor_count);\n+  const float total_available_time = static_cast<float>(wallclock_time * processor_count);\n@@ -100,2 +100,2 @@\n-  event.set_user(total_available_time > 0 ? checked_cast<float>(user_time) \/ total_available_time : 0);\n-  event.set_system(total_available_time > 0 ? checked_cast<float>(system_time) \/ total_available_time : 0);\n+  event.set_user(total_available_time > 0 ? static_cast<float>(user_time) \/ total_available_time : 0);\n+  event.set_system(total_available_time > 0 ? static_cast<float>(system_time) \/ total_available_time : 0);\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrThreadCPULoadEvent.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -207,1 +207,1 @@\n-  const u4 checkpoint_size = checked_cast<u4>(current_offset() - event_size_offset);\n+  const u4 checkpoint_size = static_cast<u4>(current_offset() - event_size_offset);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/repository\/jfrChunkWriter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -230,1 +230,1 @@\n-  return lookback_count <= 1 ? 1 : checked_cast<double>(1) \/ checked_cast<double>(lookback_count);\n+  return lookback_count <= 1 ? 1 : static_cast<double>(1) \/ static_cast<double>(lookback_count);\n@@ -250,1 +250,1 @@\n-    *sample_size_ewma = exponentially_weighted_moving_average(checked_cast<double>(expired->sample_size()), compute_ewma_alpha_coefficient(expired->params().window_lookback_count), *sample_size_ewma);\n+    *sample_size_ewma = exponentially_weighted_moving_average(static_cast<double>(expired->sample_size()), compute_ewma_alpha_coefficient(expired->params().window_lookback_count), *sample_size_ewma);\n@@ -253,1 +253,1 @@\n-      expired->population_size() == 0 ? 0 : checked_cast<double>(expired->sample_size()) \/ checked_cast<double>(expired->population_size()),\n+      expired->population_size() == 0 ? 0 : static_cast<double>(expired->sample_size()) \/ static_cast<double>(expired->population_size()),\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrEventThrottler.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-  const size_t ordinal = Atomic::add(&_measured_population_size, checked_cast<size_t>(1));\n+  const size_t ordinal = Atomic::add(&_measured_population_size, static_cast<size_t>(1));\n@@ -174,1 +174,1 @@\n-  return lookback_count <= 1 ? 1 : checked_cast<double>(1) \/ checked_cast<double>(lookback_count);\n+  return lookback_count <= 1 ? 1 : static_cast<double>(1) \/ static_cast<double>(lookback_count);\n@@ -200,1 +200,1 @@\n-    Atomic::store(&_end_ticks, checked_cast<int64_t>(0));\n+    Atomic::store(&_end_ticks, static_cast<int64_t>(0));\n@@ -203,1 +203,1 @@\n-  Atomic::store(&_measured_population_size, checked_cast<size_t>(0));\n+  Atomic::store(&_measured_population_size, static_cast<size_t>(0));\n@@ -225,1 +225,1 @@\n-  next->_sampling_interval = derive_sampling_interval(checked_cast<double>(sample_size), expired);\n+  next->_sampling_interval = derive_sampling_interval(static_cast<double>(sample_size), expired);\n@@ -286,1 +286,1 @@\n-  return _projected_population_size == 0 ? 0 : checked_cast<intptr_t>(_params.sample_points_per_window - max_sample_size()) + debt();\n+  return _projected_population_size == 0 ? 0 : static_cast<intptr_t>(_params.sample_points_per_window - max_sample_size()) + debt();\n@@ -290,1 +290,1 @@\n-  return _projected_population_size == 0 ? 0 : checked_cast<intptr_t>(sample_size() - _params.sample_points_per_window);\n+  return _projected_population_size == 0 ? 0 : static_cast<intptr_t>(sample_size() - _params.sample_points_per_window);\n@@ -313,1 +313,1 @@\n-  return checked_cast<size_t>(ceil(log(1.0 - u) \/ log(1.0 - p)));\n+  return static_cast<size_t>(ceil(log(1.0 - u) \/ log(1.0 - p)));\n@@ -330,1 +330,1 @@\n-  _avg_population_size = exponentially_weighted_moving_average(checked_cast<double>(expired->population_size()), _ewma_population_size_alpha, _avg_population_size);\n+  _avg_population_size = exponentially_weighted_moving_average(static_cast<double>(expired->population_size()), _ewma_population_size_alpha, _avg_population_size);\n@@ -365,1 +365,1 @@\n-    *sample_size_ewma = exponentially_weighted_moving_average(checked_cast<double>(expired->sample_size()), compute_ewma_alpha_coefficient(expired->params().window_lookback_count), *sample_size_ewma);\n+    *sample_size_ewma = exponentially_weighted_moving_average(static_cast<double>(expired->sample_size()), compute_ewma_alpha_coefficient(expired->params().window_lookback_count), *sample_size_ewma);\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrAdaptiveSampler.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-      return checked_cast<R>(read_bytes<u1>(location));\n+      return static_cast<R>(read_bytes<u1>(location));\n@@ -92,1 +92,1 @@\n-      return checked_cast<R>(read_bytes<u2>(location));\n+      return static_cast<R>(read_bytes<u2>(location));\n@@ -94,1 +94,1 @@\n-      return checked_cast<R>(read_bytes<u4>(location));\n+      return static_cast<R>(read_bytes<u4>(location));\n@@ -96,1 +96,1 @@\n-      return checked_cast<R>(read_bytes<u8>(location));\n+      return static_cast<R>(read_bytes<u8>(location));\n@@ -119,1 +119,1 @@\n-    return checked_cast<R>(*(u1*)location);\n+    return static_cast<R>(*(u1*)location);\n@@ -125,1 +125,1 @@\n-        return checked_cast<R>(*(u1*)location);\n+        return static_cast<R>(*(u1*)location);\n@@ -127,1 +127,1 @@\n-        return checked_cast<R>(bigendian_16(*(u2*)location));\n+        return static_cast<R>(bigendian_16(*(u2*)location));\n@@ -129,1 +129,1 @@\n-        return checked_cast<R>(bigendian_32(*(u4*)location));\n+        return static_cast<R>(bigendian_32(*(u4*)location));\n@@ -131,1 +131,1 @@\n-        return checked_cast<R>(bigendian_64(*(u8*)location));\n+        return static_cast<R>(bigendian_64(*(u8*)location));\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrBigEndian.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"}]}