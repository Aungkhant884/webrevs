{"files":[{"patch":"@@ -490,1 +490,1 @@\n-        return static_cast<u2>(index);\n+        return checked_cast<u2>(index);\n@@ -688,1 +688,1 @@\n-        int utf8_length = static_cast<int>(stream->get_u2_fast());\n+        int utf8_length = checked_cast<int>(stream->get_u2_fast());\n@@ -733,1 +733,1 @@\n-      stream->skip_u1_fast(static_cast<int>(stream->get_u4_fast()));\n+      stream->skip_u1_fast(checked_cast<int>(stream->get_u4_fast()));\n@@ -761,1 +761,1 @@\n-  orig_method_len_offset += static_cast<u4>(2);\n+  orig_method_len_offset += 2;\n@@ -770,1 +770,1 @@\n-      stream->skip_u1_fast(static_cast<int>(stream->get_u4_fast()));\n+      stream->skip_u1_fast(checked_cast<int>(stream->get_u4_fast()));\n@@ -916,1 +916,1 @@\n-  u4 stack_map_attrib_len = static_cast<u4>(writer.current_offset() - stack_map_attrib_len_offset);\n+  u4 stack_map_attrib_len = checked_cast<u4>(writer.current_offset() - stack_map_attrib_len_offset);\n@@ -918,1 +918,1 @@\n-  stack_map_attrib_len -= static_cast<u4>(4);\n+  stack_map_attrib_len -= 4;\n@@ -945,1 +945,1 @@\n-  u4 lnt_table_attributes_len = static_cast<u4>(writer.current_offset() - lnt_attributes_length_offset);\n+  u4 lnt_table_attributes_len = checked_cast<u4>(writer.current_offset() - lnt_attributes_length_offset);\n@@ -947,1 +947,1 @@\n-  lnt_table_attributes_len -= static_cast<u4>(4);\n+  lnt_table_attributes_len -= 4;\n@@ -978,1 +978,1 @@\n-  u4 lvt_table_attributes_len = static_cast<u4>(writer.current_offset() - lvt_attributes_length_offset);\n+  u4 lvt_table_attributes_len = checked_cast<u4>(writer.current_offset() - lvt_attributes_length_offset);\n@@ -980,1 +980,1 @@\n-  lvt_table_attributes_len -= static_cast<u4>(4);\n+  lvt_table_attributes_len -= 4;\n@@ -1008,1 +1008,1 @@\n-  u4 lvtt_table_attributes_len = static_cast<u4>(writer.current_offset() - lvtt_attributes_length_offset);\n+  u4 lvtt_table_attributes_len = checked_cast<u4>(writer.current_offset() - lvtt_attributes_length_offset);\n@@ -1010,1 +1010,1 @@\n-  lvtt_table_attributes_len -= static_cast<u4>(4);\n+  lvtt_table_attributes_len -= 4;\n@@ -1118,1 +1118,1 @@\n-  u4 code_attribute_len = static_cast<u4>(writer.current_offset() - code_attribute_length_offset);\n+  u4 code_attribute_len = checked_cast<u4>(writer.current_offset() - code_attribute_length_offset);\n@@ -1120,1 +1120,1 @@\n-  code_attribute_len -= static_cast<u4>(4);\n+  code_attribute_len -= 4;\n@@ -1326,1 +1326,1 @@\n-      \" bytes failed in JfrEventClassTransformer::on_klass_creation\", static_cast<size_t>(new_buffer_size));\n+      \" bytes failed in JfrEventClassTransformer::on_klass_creation\", checked_cast<size_t>(new_buffer_size));\n@@ -1492,1 +1492,1 @@\n-    const jclass super = static_cast<jclass>(JfrJavaSupport::local_jni_handle(ik->super()->java_mirror(), THREAD));\n+    const jclass super = checked_cast<jclass>(JfrJavaSupport::local_jni_handle(ik->super()->java_mirror(), THREAD));\n@@ -1535,1 +1535,1 @@\n-  const jclass clazz = static_cast<jclass>(JfrJavaSupport::local_jni_handle(existing_klass->java_mirror(), THREAD));\n+  const jclass clazz = checked_cast<jclass>(JfrJavaSupport::local_jni_handle(existing_klass->java_mirror(), THREAD));\n@@ -1567,1 +1567,1 @@\n-      static_cast<size_t>(offset_of(JvmtiCachedClassFileData, data) + stream_len));\n+      checked_cast<size_t>(offset_of(JvmtiCachedClassFileData, data) + stream_len));\n","filename":"src\/hotspot\/share\/jfr\/instrumentation\/jfrEventClassTransformer.cpp","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -347,1 +347,1 @@\n-          event.set_origin(static_cast<u8>(flag->get_origin()));  \\\n+          event.set_origin(checked_cast<u8>(flag->get_origin()));  \\\n@@ -419,1 +419,1 @@\n-  event.set_gcTimeRatio(static_cast<unsigned int>(conf.gc_time_ratio()));\n+  event.set_gcTimeRatio(checked_cast<unsigned int>(conf.gc_time_ratio()));\n@@ -436,2 +436,2 @@\n-  event.set_maxTenuringThreshold(static_cast<u1>(conf.max_tenuring_threshold()));\n-  event.set_initialTenuringThreshold(static_cast<u1>(conf.initial_tenuring_threshold()));\n+  event.set_maxTenuringThreshold(checked_cast<u1>(conf.max_tenuring_threshold()));\n+  event.set_initialTenuringThreshold(checked_cast<u1>(conf.initial_tenuring_threshold()));\n@@ -450,1 +450,1 @@\n-  event.set_heapAddressBits(static_cast<u1>(conf.heap_address_size_in_bits()));\n+  event.set_heapAddressBits(checked_cast<u1>(conf.heap_address_size_in_bits()));\n@@ -460,1 +460,1 @@\n-  event.set_newRatio(static_cast<unsigned int>(conf.new_ratio()));\n+  event.set_newRatio(checked_cast<unsigned int>(conf.new_ratio()));\n@@ -663,1 +663,1 @@\n-  event.set_threadCount(static_cast<s4>(CICompilerCount));\n+  event.set_threadCount(checked_cast<s4>(CICompilerCount));\n@@ -671,2 +671,2 @@\n-  for (int bt_index = 0; bt_index < static_cast<int>(CodeBlobType::NumTypes); ++bt_index) {\n-    const CodeBlobType bt = static_cast<CodeBlobType>(bt_index);\n+  for (int bt_index = 0; bt_index < checked_cast<int>(CodeBlobType::NumTypes); ++bt_index) {\n+    const CodeBlobType bt = checked_cast<CodeBlobType>(bt_index);\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrPeriodic.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-  const float total_available_time = static_cast<float>(wallclock_time * processor_count);\n+  const float total_available_time = checked_cast<float>(wallclock_time * processor_count);\n@@ -100,2 +100,2 @@\n-  event.set_user(total_available_time > 0 ? static_cast<float>(user_time) \/ total_available_time : 0);\n-  event.set_system(total_available_time > 0 ? static_cast<float>(system_time) \/ total_available_time : 0);\n+  event.set_user(total_available_time > 0 ? checked_cast<float>(user_time) \/ total_available_time : 0);\n+  event.set_system(total_available_time > 0 ? checked_cast<float>(system_time) \/ total_available_time : 0);\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrThreadCPULoadEvent.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -207,1 +207,1 @@\n-  const u4 checkpoint_size = static_cast<u4>(current_offset() - event_size_offset);\n+  const u4 checkpoint_size = checked_cast<u4>(current_offset() - event_size_offset);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/repository\/jfrChunkWriter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -230,1 +230,1 @@\n-  return lookback_count <= 1 ? 1 : static_cast<double>(1) \/ static_cast<double>(lookback_count);\n+  return lookback_count <= 1 ? 1 : checked_cast<double>(1) \/ checked_cast<double>(lookback_count);\n@@ -250,1 +250,1 @@\n-    *sample_size_ewma = exponentially_weighted_moving_average(static_cast<double>(expired->sample_size()), compute_ewma_alpha_coefficient(expired->params().window_lookback_count), *sample_size_ewma);\n+    *sample_size_ewma = exponentially_weighted_moving_average(checked_cast<double>(expired->sample_size()), compute_ewma_alpha_coefficient(expired->params().window_lookback_count), *sample_size_ewma);\n@@ -253,1 +253,1 @@\n-      expired->population_size() == 0 ? 0 : (double)expired->sample_size() \/ (double)expired->population_size(),\n+      expired->population_size() == 0 ? 0 : checked_cast<double>(expired->sample_size()) \/ checked_cast<double>(expired->population_size()),\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrEventThrottler.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-  const size_t ordinal = Atomic::add(&_measured_population_size, static_cast<size_t>(1));\n+  const size_t ordinal = Atomic::add(&_measured_population_size, checked_cast<size_t>(1));\n@@ -174,1 +174,1 @@\n-  return lookback_count <= 1 ? 1 : static_cast<double>(1) \/ static_cast<double>(lookback_count);\n+  return lookback_count <= 1 ? 1 : checked_cast<double>(1) \/ checked_cast<double>(lookback_count);\n@@ -200,1 +200,1 @@\n-    Atomic::store(&_end_ticks, static_cast<int64_t>(0));\n+    Atomic::store(&_end_ticks, checked_cast<int64_t>(0));\n@@ -203,1 +203,1 @@\n-  Atomic::store(&_measured_population_size, static_cast<size_t>(0));\n+  Atomic::store(&_measured_population_size, checked_cast<size_t>(0));\n@@ -225,1 +225,1 @@\n-  next->_sampling_interval = derive_sampling_interval(static_cast<double>(sample_size), expired);\n+  next->_sampling_interval = derive_sampling_interval(checked_cast<double>(sample_size), expired);\n@@ -286,1 +286,1 @@\n-  return _projected_population_size == 0 ? 0 : static_cast<intptr_t>(_params.sample_points_per_window - max_sample_size()) + debt();\n+  return _projected_population_size == 0 ? 0 : checked_cast<intptr_t>(_params.sample_points_per_window - max_sample_size()) + debt();\n@@ -290,1 +290,1 @@\n-  return _projected_population_size == 0 ? 0 : static_cast<intptr_t>(sample_size() - _params.sample_points_per_window);\n+  return _projected_population_size == 0 ? 0 : checked_cast<intptr_t>(sample_size() - _params.sample_points_per_window);\n@@ -313,1 +313,1 @@\n-  return static_cast<size_t>(ceil(log(1.0 - u) \/ log(1.0 - p)));\n+  return checked_cast<size_t>(ceil(log(1.0 - u) \/ log(1.0 - p)));\n@@ -330,1 +330,1 @@\n-  _avg_population_size = exponentially_weighted_moving_average(static_cast<double>(expired->population_size()), _ewma_population_size_alpha, _avg_population_size);\n+  _avg_population_size = exponentially_weighted_moving_average(checked_cast<double>(expired->population_size()), _ewma_population_size_alpha, _avg_population_size);\n@@ -365,1 +365,1 @@\n-    *sample_size_ewma = exponentially_weighted_moving_average(static_cast<double>(expired->sample_size()), compute_ewma_alpha_coefficient(expired->params().window_lookback_count), *sample_size_ewma);\n+    *sample_size_ewma = exponentially_weighted_moving_average(checked_cast<double>(expired->sample_size()), compute_ewma_alpha_coefficient(expired->params().window_lookback_count), *sample_size_ewma);\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrAdaptiveSampler.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-      return static_cast<R>(read_bytes<u1>(location));\n+      return checked_cast<R>(read_bytes<u1>(location));\n@@ -92,1 +92,1 @@\n-      return static_cast<R>(read_bytes<u2>(location));\n+      return checked_cast<R>(read_bytes<u2>(location));\n@@ -94,1 +94,1 @@\n-      return static_cast<R>(read_bytes<u4>(location));\n+      return checked_cast<R>(read_bytes<u4>(location));\n@@ -96,1 +96,1 @@\n-      return static_cast<R>(read_bytes<u8>(location));\n+      return checked_cast<R>(read_bytes<u8>(location));\n@@ -119,1 +119,1 @@\n-    return static_cast<R>(*(u1*)location);\n+    return checked_cast<R>(*(u1*)location);\n@@ -125,1 +125,1 @@\n-        return static_cast<R>(*(u1*)location);\n+        return checked_cast<R>(*(u1*)location);\n@@ -127,1 +127,1 @@\n-        return static_cast<R>(bigendian_16(*(u2*)location));\n+        return checked_cast<R>(bigendian_16(*(u2*)location));\n@@ -129,1 +129,1 @@\n-        return static_cast<R>(bigendian_32(*(u4*)location));\n+        return checked_cast<R>(bigendian_32(*(u4*)location));\n@@ -131,1 +131,1 @@\n-        return static_cast<R>(bigendian_64(*(u8*)location));\n+        return checked_cast<R>(bigendian_64(*(u8*)location));\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrBigEndian.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-       Bytes::put_Java_u2(dest, static_cast<u2>(value));\n+       Bytes::put_Java_u2(dest, checked_cast<u2>(value));\n@@ -84,1 +84,1 @@\n-       Bytes::put_Java_u4(dest, static_cast<u4>(value));\n+       Bytes::put_Java_u4(dest, checked_cast<u4>(value));\n@@ -88,1 +88,1 @@\n-       Bytes::put_Java_u8(dest, static_cast<u8>(value));\n+       Bytes::put_Java_u8(dest, checked_cast<u8>(value));\n@@ -186,1 +186,1 @@\n-     return static_cast<u8>(static_cast<u1>(value) & static_cast<u1>(0xff));\n+     return checked_cast<u8>(checked_cast<u1>(value) & checked_cast<u1>(0xff));\n@@ -188,1 +188,1 @@\n-      return static_cast<u8>(static_cast<u2>(value) & static_cast<u2>(0xffff));\n+      return checked_cast<u8>(checked_cast<u2>(value) & checked_cast<u2>(0xffff));\n@@ -190,1 +190,1 @@\n-      return static_cast<u8>(static_cast<u4>(value) & static_cast<u4>(0xffffffff));\n+      return checked_cast<u8>(checked_cast<u4>(value) & checked_cast<u4>(0xffffffff));\n@@ -192,1 +192,1 @@\n-      return static_cast<u8>(value);\n+      return checked_cast<u8>(value);\n@@ -210,1 +210,1 @@\n-    *dest = static_cast<u1>(v); \/\/ set bit 0-6, no extension\n+    *dest = checked_cast<u1>(v); \/\/ set bit 0-6, no extension\n@@ -213,1 +213,1 @@\n-  *dest = static_cast<u1>(v | ext_bit); \/\/ set bit 0-6, with extension\n+  *dest = checked_cast<u1>(v | ext_bit); \/\/ set bit 0-6, with extension\n@@ -215,1 +215,1 @@\n-    *(dest + 1) = static_cast<u1>(v >> 7); \/\/ set bit 7-13, no extension\n+    *(dest + 1) = checked_cast<u1>(v >> 7); \/\/ set bit 7-13, no extension\n@@ -218,1 +218,1 @@\n-  *(dest + 1) = static_cast<u1>((v >> 7) | ext_bit); \/\/ set bit 7-13, with extension\n+  *(dest + 1) = checked_cast<u1>((v >> 7) | ext_bit); \/\/ set bit 7-13, with extension\n@@ -220,1 +220,1 @@\n-    *(dest + 2) = static_cast<u1>(v >> 14); \/\/ set bit 14-20, no extension\n+    *(dest + 2) = checked_cast<u1>(v >> 14); \/\/ set bit 14-20, no extension\n@@ -223,1 +223,1 @@\n-  *(dest + 2) = static_cast<u1>((v >> 14) | ext_bit); \/\/ set bit 14-20, with extension\n+  *(dest + 2) = checked_cast<u1>((v >> 14) | ext_bit); \/\/ set bit 14-20, with extension\n@@ -225,1 +225,1 @@\n-    *(dest + 3) = static_cast<u1>(v >> 21); \/\/ set bit 21-27, no extension\n+    *(dest + 3) = checked_cast<u1>(v >> 21); \/\/ set bit 21-27, no extension\n@@ -228,1 +228,1 @@\n-  *(dest + 3) = static_cast<u1>((v >> 21) | ext_bit); \/\/ set bit 21-27, with extension\n+  *(dest + 3) = checked_cast<u1>((v >> 21) | ext_bit); \/\/ set bit 21-27, with extension\n@@ -230,1 +230,1 @@\n-    *(dest + 4) = static_cast<u1>(v >> 28); \/\/ set bit 28-34, no extension\n+    *(dest + 4) = checked_cast<u1>(v >> 28); \/\/ set bit 28-34, no extension\n@@ -233,1 +233,1 @@\n-  *(dest + 4) = static_cast<u1>((v >> 28) | ext_bit); \/\/ set bit 28-34, with extension\n+  *(dest + 4) = checked_cast<u1>((v >> 28) | ext_bit); \/\/ set bit 28-34, with extension\n@@ -235,1 +235,1 @@\n-    *(dest + 5) = static_cast<u1>(v >> 35); \/\/ set bit 35-41, no extension\n+    *(dest + 5) = checked_cast<u1>(v >> 35); \/\/ set bit 35-41, no extension\n@@ -238,1 +238,1 @@\n-  *(dest + 5) = static_cast<u1>((v >> 35) | ext_bit); \/\/ set bit 35-41, with extension\n+  *(dest + 5) = checked_cast<u1>((v >> 35) | ext_bit); \/\/ set bit 35-41, with extension\n@@ -240,1 +240,1 @@\n-    *(dest + 6) = static_cast<u1>(v >> 42); \/\/ set bit 42-48, no extension\n+    *(dest + 6) = checked_cast<u1>(v >> 42); \/\/ set bit 42-48, no extension\n@@ -243,1 +243,1 @@\n-  *(dest + 6) = static_cast<u1>((v >> 42) | ext_bit); \/\/ set bit 42-48, with extension\n+  *(dest + 6) = checked_cast<u1>((v >> 42) | ext_bit); \/\/ set bit 42-48, with extension\n@@ -245,1 +245,1 @@\n-    *(dest + 7) = static_cast<u1>(v >> 49); \/\/ set bit 49-55, no extension\n+    *(dest + 7) = checked_cast<u1>(v >> 49); \/\/ set bit 49-55, no extension\n@@ -248,1 +248,1 @@\n-  *(dest + 7) = static_cast<u1>((v >> 49) | ext_bit); \/\/ set bit 49-55, with extension\n+  *(dest + 7) = checked_cast<u1>((v >> 49) | ext_bit); \/\/ set bit 49-55, with extension\n@@ -250,1 +250,1 @@\n-  *(dest + 8) = static_cast<u1>(v >> 56);  \/\/ set bit 56-63\n+  *(dest + 8) = checked_cast<u1>(v >> 56);  \/\/ set bit 56-63\n@@ -273,1 +273,1 @@\n-      dest[0] = static_cast<u1>(v);\n+      dest[0] = checked_cast<u1>(v);\n@@ -276,2 +276,2 @@\n-      dest[0] = static_cast<u1>(v | 0x80);\n-      dest[1] = static_cast<u1>(v >> 7);\n+      dest[0] = checked_cast<u1>(v | 0x80);\n+      dest[1] = checked_cast<u1>(v >> 7);\n@@ -280,4 +280,4 @@\n-      dest[0] = static_cast<u1>(v | 0x80);\n-      dest[1] = static_cast<u1>(v >> 7 | 0x80);\n-      dest[2] = static_cast<u1>(v >> 14 | 0x80);\n-      dest[3] = static_cast<u1>(v >> 21);\n+      dest[0] = checked_cast<u1>(v | 0x80);\n+      dest[1] = checked_cast<u1>(v >> 7 | 0x80);\n+      dest[2] = checked_cast<u1>(v >> 14 | 0x80);\n+      dest[3] = checked_cast<u1>(v >> 21);\n@@ -286,8 +286,8 @@\n-      dest[0] = static_cast<u1>(v | 0x80);\n-      dest[1] = static_cast<u1>(v >> 7 | 0x80);\n-      dest[2] = static_cast<u1>(v >> 14 | 0x80);\n-      dest[3] = static_cast<u1>(v >> 21 | 0x80);\n-      dest[4] = static_cast<u1>(v >> 28 | 0x80);\n-      dest[5] = static_cast<u1>(v >> 35 | 0x80);\n-      dest[6] = static_cast<u1>(v >> 42 | 0x80);\n-      dest[7] = static_cast<u1>(v >> 49);\n+      dest[0] = checked_cast<u1>(v | 0x80);\n+      dest[1] = checked_cast<u1>(v >> 7 | 0x80);\n+      dest[2] = checked_cast<u1>(v >> 14 | 0x80);\n+      dest[3] = checked_cast<u1>(v >> 21 | 0x80);\n+      dest[4] = checked_cast<u1>(v >> 28 | 0x80);\n+      dest[5] = checked_cast<u1>(v >> 35 | 0x80);\n+      dest[6] = checked_cast<u1>(v >> 42 | 0x80);\n+      dest[7] = checked_cast<u1>(v >> 49);\n","filename":"src\/hotspot\/share\/jfr\/writers\/jfrEncoders.hpp","additions":39,"deletions":39,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -103,1 +103,1 @@\n-    event.set_iterations(static_cast<u4>(iterations));\n+    event.set_iterations(checked_cast<u4>(iterations));\n","filename":"src\/hotspot\/share\/runtime\/safepoint.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-      return c * static_cast<jlong>(NANOS_PER_MILLISEC);\n+      return c * (jlong)NANOS_PER_MILLISEC;\n","filename":"test\/hotspot\/gtest\/jfr\/test_adaptiveSampler.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}