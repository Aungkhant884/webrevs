{"files":[{"patch":"@@ -36,1 +36,1 @@\n-static uint compute_task_fannout(uint task_limit) {\n+static uint compute_task_fanout(uint task_limit) {\n@@ -39,1 +39,1 @@\n-  \/\/ number of enqueued tasks.  A constant fannout may be too slow when\n+  \/\/ number of enqueued tasks.  A constant fanout may be too slow when\n@@ -52,1 +52,1 @@\n-  _task_fannout(compute_task_fannout(_task_limit))\n+  _task_fanout(compute_task_fanout(_task_limit))\n","filename":"src\/hotspot\/share\/gc\/shared\/partialArrayTaskStepper.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-  uint _task_fannout;\n+  uint _task_fanout;\n","filename":"src\/hotspot\/share\/gc\/shared\/partialArrayTaskStepper.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-  \/\/ of tasks is a function of task_num (N) and _task_fannout (F).\n+  \/\/ of tasks is a function of task_num (N) and _task_fanout (F).\n@@ -96,2 +96,2 @@\n-  assert(_task_fannout > 0, \"precondition\");\n-  uint max_pending = (_task_fannout - 1) * task_num + 1;\n+  assert(_task_fanout > 0, \"precondition\");\n+  uint max_pending = (_task_fanout - 1) * task_num + 1;\n@@ -107,1 +107,1 @@\n-  uint ncreate = MIN2(_task_fannout, MIN2(remaining_tasks, _task_limit + 1) - pending);\n+  uint ncreate = MIN2(_task_fanout, MIN2(remaining_tasks, _task_limit + 1) - pending);\n","filename":"src\/hotspot\/share\/gc\/shared\/partialArrayTaskStepper.inline.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -53,3 +53,3 @@\n-                     int length,\n-                     int* to_length_addr,\n-                     uint chunk_size) {\n+                    int length,\n+                    int* to_length_addr,\n+                    uint chunk_size) {\n","filename":"test\/hotspot\/gtest\/gc\/shared\/test_partialArrayTaskStepper.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}