{"files":[{"patch":"@@ -56,0 +56,1 @@\n+  $(call info-file-item, \"LIBC\", \"$(RELEASE_FILE_LIBC)\")\n","filename":"make\/ReleaseFile.gmk","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,11 @@\n+# Detect C library.\n+# Use '-gnu'  suffix on systems that use glibc.\n+# Use '-musl' suffix on systems that use the musl libc.\n+echo $OUT | grep -- -linux- > \/dev\/null 2> \/dev\/null\n+if test $? = 0; then\n+  libc_vendor=`ldd --version 2>&1 | sed -n '1s\/.*\\(musl\\).*\/\\1\/p'`\n+  if [ x\"${libc_vendor}\" = x\"musl\" ]; then\n+    OUT=`echo $OUT | sed 's\/-gnu\/-musl\/'`\n+  fi\n+fi\n+\n","filename":"make\/autoconf\/build-aux\/config.guess","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -32,0 +32,5 @@\n+if echo $* | grep linux-musl >\/dev\/null ; then\n+    echo $*\n+    exit\n+fi\n+\n","filename":"make\/autoconf\/build-aux\/config.sub","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+OPENJDK_BUILD_LIBC := @OPENJDK_BUILD_LIBC@\n@@ -62,0 +63,1 @@\n+OPENJDK_TARGET_LIBC := @OPENJDK_BUILD_LIBC@\n@@ -69,0 +71,1 @@\n+HOTSPOT_TARGET_LIBC := @HOTSPOT_BUILD_LIBC@\n","filename":"make\/autoconf\/buildjdk-spec.gmk.in","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -561,0 +561,5 @@\n+  OS_CFLAGS=\"$OS_CFLAGS -DLIBC=$OPENJDK_TARGET_LIBC\"\n+  if test \"x$OPENJDK_TARGET_LIBC\" = xmusl; then\n+    OS_CFLAGS=\"$OS_CFLAGS -DMUSL_LIBC\"\n+  fi\n+\n","filename":"make\/autoconf\/flags-cflags.m4","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -223,0 +223,18 @@\n+# Support macro for PLATFORM_EXTRACT_TARGET_AND_BUILD.\n+# Converts autoconf style OS name to OpenJDK style, into\n+# VAR_LIBC.\n+AC_DEFUN([PLATFORM_EXTRACT_VARS_FROM_LIBC],\n+[\n+  case \"$1\" in\n+    *linux*-musl)\n+      VAR_LIBC=musl\n+      ;;\n+    *linux*-gnu)\n+      VAR_LIBC=gnu\n+      ;;\n+    *)\n+      VAR_LIBC=default\n+      ;;\n+  esac\n+])\n+\n@@ -240,1 +258,1 @@\n-  # Convert the autoconf OS\/CPU value to our own data, into the VAR_OS\/CPU variables.\n+  # Convert the autoconf OS\/CPU value to our own data, into the VAR_OS\/CPU\/LIBC variables.\n@@ -243,0 +261,1 @@\n+  PLATFORM_EXTRACT_VARS_FROM_LIBC($build_os)\n@@ -259,0 +278,1 @@\n+  OPENJDK_BUILD_LIBC=\"$VAR_LIBC\"\n@@ -266,0 +286,1 @@\n+  AC_SUBST(OPENJDK_BUILD_LIBC)\n@@ -270,1 +291,6 @@\n-  # Convert the autoconf OS\/CPU value to our own data, into the VAR_OS\/CPU variables.\n+  if test \"x$OPENJDK_BUILD_OS\" = \"xlinux\"; then\n+    AC_MSG_CHECKING([openjdk-build C library])\n+    AC_MSG_RESULT([$OPENJDK_BUILD_LIBC])\n+  fi\n+\n+  # Convert the autoconf OS\/CPU value to our own data, into the VAR_OS\/CPU\/LIBC variables.\n@@ -273,0 +299,1 @@\n+  PLATFORM_EXTRACT_VARS_FROM_LIBC($host_os)\n@@ -290,0 +317,1 @@\n+  OPENJDK_TARGET_LIBC=\"$VAR_LIBC\"\n@@ -299,0 +327,1 @@\n+  AC_SUBST(OPENJDK_TARGET_LIBC)\n@@ -302,0 +331,5 @@\n+\n+  if test \"x$OPENJDK_TARGET_OS\" = \"xlinux\"; then\n+    AC_MSG_CHECKING([openjdk-target C library])\n+    AC_MSG_RESULT([$OPENJDK_TARGET_LIBC])\n+  fi\n@@ -423,1 +457,7 @@\n-  OPENJDK_$1_BUNDLE_PLATFORM=\"${OPENJDK_$1_OS_BUNDLE}-${OPENJDK_$1_CPU_BUNDLE}\"\n+\n+  OPENJDK_$1_LIBC_BUNDLE=\"\"\n+  if test \"x$OPENJDK_$1_LIBC\" = \"xmusl\"; then\n+    OPENJDK_$1_LIBC_BUNDLE=\"-$OPENJDK_$1_LIBC\"\n+  fi\n+\n+  OPENJDK_$1_BUNDLE_PLATFORM=\"${OPENJDK_$1_OS_BUNDLE}-${OPENJDK_$1_CPU_BUNDLE}${OPENJDK_$1_LIBC_BUNDLE}\"\n@@ -496,0 +536,3 @@\n+  HOTSPOT_$1_LIBC=$OPENJDK_$1_LIBC\n+  AC_SUBST(HOTSPOT_$1_LIBC)\n+\n@@ -521,0 +564,1 @@\n+  RELEASE_FILE_LIBC=${OPENJDK_TARGET_LIBC}\n@@ -524,0 +568,1 @@\n+  AC_SUBST(RELEASE_FILE_LIBC)\n","filename":"make\/autoconf\/platform.m4","additions":48,"deletions":3,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -83,0 +83,2 @@\n+OPENJDK_TARGET_LIBC:=@OPENJDK_TARGET_LIBC@\n+\n@@ -98,0 +100,2 @@\n+HOTSPOT_TARGET_LIBC := @HOTSPOT_TARGET_LIBC@\n+\n@@ -112,0 +116,2 @@\n+OPENJDK_BUILD_LIBC:=@OPENJDK_BUILD_LIBC@\n+\n@@ -120,0 +126,1 @@\n+RELEASE_FILE_LIBC:=@RELEASE_FILE_LIBC@\n","filename":"make\/autoconf\/spec.gmk.in","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -107,1 +107,0 @@\n-# include <gnu\/libc-version.h>\n@@ -140,0 +139,11 @@\n+#ifdef MUSL_LIBC\n+\/\/ dlvsym is not a part of POSIX\n+\/\/ and musl libc doesn't implement it.\n+static void *dlvsym(void *handle,\n+                    const char *symbol,\n+                    const char *version) {\n+   \/\/ load the latest version of symbol\n+   return dlsym(handle, symbol);\n+}\n+#endif\n+\n@@ -159,1 +169,1 @@\n-const char * os::Linux::_glibc_version = NULL;\n+const char * os::Linux::_libc_version = NULL;\n@@ -513,0 +523,6 @@\n+#ifdef MUSL_LIBC\n+  \/\/ confstr() from musl libc returns EINVAL for\n+  \/\/ _CS_GNU_LIBC_VERSION and _CS_GNU_LIBPTHREAD_VERSION\n+  os::Linux::set_libc_version(\"musl - unknown\");\n+  os::Linux::set_libpthread_version(\"musl - unknown\");\n+#else\n@@ -517,1 +533,1 @@\n-  os::Linux::set_glibc_version(str);\n+  os::Linux::set_libc_version(str);\n@@ -524,0 +540,1 @@\n+#endif\n@@ -2212,1 +2229,1 @@\n-  st->print(\"%s \", os::Linux::glibc_version());\n+  st->print(\"%s \", os::Linux::libc_version());\n@@ -3071,0 +3088,2 @@\n+      set_numa_node_to_cpus_v2(CAST_TO_FN_PTR(numa_node_to_cpus_v2_func_t,\n+                                              libnuma_v2_dlsym(handle, \"numa_node_to_cpus\")));\n@@ -3209,0 +3228,20 @@\n+int os::Linux::numa_node_to_cpus(int node, unsigned long *buffer, int bufferlen) {\n+  \/\/ use the latest version of numa_node_to_cpus if available\n+  if (_numa_node_to_cpus_v2 != NULL) {\n+\n+    \/\/ libnuma bitmask struct\n+    struct bitmask {\n+      unsigned long size; \/* number of bits in the map *\/\n+      unsigned long *maskp;\n+    };\n+\n+    struct bitmask mask;\n+    mask.maskp = (unsigned long *)buffer;\n+    mask.size = bufferlen * 8;\n+    return _numa_node_to_cpus_v2(node, &mask);\n+  } else if (_numa_node_to_cpus != NULL) {\n+    return _numa_node_to_cpus(node, buffer, bufferlen);\n+  }\n+  return -1;\n+}\n+\n@@ -3220,0 +3259,1 @@\n+os::Linux::numa_node_to_cpus_v2_func_t os::Linux::_numa_node_to_cpus_v2;\n@@ -4322,0 +4362,34 @@\n+\/\/ Some linux distributions (notably: Alpine Linux) include the\n+\/\/ grsecurity in the kernel. Of particular interest from a JVM perspective\n+\/\/ is PaX (https:\/\/pax.grsecurity.net\/), which adds some security features\n+\/\/ related to page attributes. Specifically, the MPROTECT PaX functionality\n+\/\/ (https:\/\/pax.grsecurity.net\/docs\/mprotect.txt) prevents dynamic\n+\/\/ code generation by disallowing a (previously) writable page to be\n+\/\/ marked as executable. This is, of course, exactly what HotSpot does\n+\/\/ for both JIT compiled method, as well as for stubs, adapters, etc.\n+\/\/\n+\/\/ Instead of crashing \"lazily\" when trying to make a page executable,\n+\/\/ this code probes for the presence of PaX and reports the failure\n+\/\/ eagerly.\n+static void check_pax(void) {\n+  \/\/ Zero doesn't generate code dynamically, so no need to perform the PaX check\n+#ifndef ZERO\n+  size_t size = os::Linux::page_size();\n+\n+  void* p = ::mmap(NULL, size, PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0);\n+  if (p == MAP_FAILED) {\n+    log_debug(os)(\"os_linux.cpp: check_pax: mmap failed (%s)\" , os::strerror(errno));\n+    vm_exit_out_of_memory(size, OOM_MMAP_ERROR, \"failed to allocate memory for PaX check.\");\n+  }\n+\n+  int res = ::mprotect(p, size, PROT_WRITE|PROT_EXEC);\n+  if (res == -1) {\n+    log_debug(os)(\"os_linux.cpp: check_pax: mprotect failed (%s)\" , os::strerror(errno));\n+    vm_exit_during_initialization(\n+      \"Failed to mark memory page as executable - check if grsecurity\/PaX is enabled\");\n+  }\n+\n+  ::munmap(p, size);\n+#endif\n+}\n+\n@@ -4355,0 +4429,2 @@\n+  check_pax();\n+\n@@ -4494,1 +4570,1 @@\n-               Linux::glibc_version(), Linux::libpthread_version());\n+               Linux::libc_version(), Linux::libpthread_version());\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":81,"deletions":5,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-  static const char *_glibc_version;\n+  static const char *_libc_version;\n@@ -72,1 +72,1 @@\n-  static void set_glibc_version(const char *s)      { _glibc_version = s; }\n+  static void set_libc_version(const char *s)       { _libc_version = s; }\n@@ -145,1 +145,1 @@\n-  static const char *glibc_version()          { return _glibc_version; }\n+  static const char *libc_version()           { return _libc_version; }\n@@ -186,0 +186,1 @@\n+  typedef int (*numa_node_to_cpus_v2_func_t)(int node, void *mask);\n@@ -202,0 +203,1 @@\n+  static numa_node_to_cpus_v2_func_t _numa_node_to_cpus_v2;\n@@ -223,0 +225,1 @@\n+  static void set_numa_node_to_cpus_v2(numa_node_to_cpus_v2_func_t func) { _numa_node_to_cpus_v2 = func; }\n@@ -252,3 +255,1 @@\n-  static int numa_node_to_cpus(int node, unsigned long *buffer, int bufferlen) {\n-    return _numa_node_to_cpus != NULL ? _numa_node_to_cpus(node, buffer, bufferlen) : -1;\n-  }\n+  static int numa_node_to_cpus(int node, unsigned long *buffer, int bufferlen);\n","filename":"src\/hotspot\/os\/linux\/os_linux.hpp","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -78,1 +78,0 @@\n-# include <fpu_control.h>\n","filename":"src\/hotspot\/os_cpu\/linux_aarch64\/os_linux_aarch64.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2296,0 +2296,7 @@\n+WB_ENTRY(jstring, WB_GetLibcName(JNIEnv* env, jobject o))\n+  ThreadToNativeFromVM ttn(thread);\n+  jstring info_string = env->NewStringUTF(XSTR(LIBC));\n+  CHECK_JNI_EXCEPTION_(env, NULL);\n+  return info_string;\n+WB_END\n+\n@@ -2548,0 +2555,1 @@\n+  {CC\"getLibcName\",     CC\"()Ljava\/lang\/String;\",     (void*)&WB_GetLibcName},\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -260,0 +260,6 @@\n+  #ifdef MUSL_LIBC\n+    #define LIBC_STR \"-\" XSTR(LIBC)\n+  #else\n+    #define LIBC_STR \"\"\n+  #endif\n+\n@@ -265,1 +271,1 @@\n-         \" for \" OS \"-\" CPU FLOAT_ARCH_STR \\\n+         \" for \" OS \"-\" CPU FLOAT_ARCH_STR LIBC_STR \\\n","filename":"src\/hotspot\/share\/runtime\/abstract_vm_version.cpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -233,0 +233,8 @@\n+#ifdef MUSL_LIBC\n+    \/*\n+     * The musl library loader requires LD_LIBRARY_PATH to be set in order\n+     * to correctly resolve the dependency libjava.so has on libjvm.so.\n+     *\/\n+    return JNI_TRUE;\n+#endif\n+\n","filename":"src\/java.base\/unix\/native\/libjli\/java_md.c","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -282,0 +282,4 @@\n+\n+    \/\/ strerror_r() API function is not compatible in different implementations:\n+    \/\/ GNU-specific:  char *strerror_r(int errnum, char *buf, size_t buflen);\n+    \/\/ XSI-compliant: int   strerror_r(int errnum, char *buf, size_t buflen);\n@@ -283,0 +287,1 @@\n+#if defined(__GLIBC__) && defined(_GNU_SOURCE)\n@@ -284,0 +289,4 @@\n+#else\n+    int rc = strerror_r(errno, buf, sizeof(buf));\n+    char* msg = (rc == 0) ? (char*)buf : \"Unknown\";\n+#endif\n","filename":"src\/jdk.hotspot.agent\/linux\/native\/libsaproc\/ps_proc.c","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -35,0 +35,6 @@\n+#ifdef LINUX\n+\/\/ Note. On Alpine Linux pthread.h includes calloc\/malloc functions declaration.\n+\/\/ We need to include pthread.h before the following stdlib names poisoning.\n+#include <pthread.h>\n+#endif\n+\n","filename":"src\/jdk.jdwp.agent\/share\/native\/libjdwp\/util.h","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -76,0 +76,1 @@\n+    vm.musl \\\n","filename":"test\/hotspot\/jtreg\/TEST.ROOT","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import jdk.test.lib.Platform;\n@@ -196,0 +197,5 @@\n+        String pid = Long.toString(ProcessHandle.current().pid());\n+        String[] command = lsofCommand().orElseThrow(() ->\n+                new RuntimeException(\"lsof like command not found\"));\n+        String lsof = command[0];\n+        boolean isBusybox = Platform.isBusybox(lsof);\n@@ -197,0 +203,2 @@\n+            \/\/ lsof from busybox does not support \"-p\" option\n+            .filter(fileName -> !isBusybox || fileName.contains(pid))\n","filename":"test\/hotspot\/jtreg\/runtime\/8176717\/TestInheritFD.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+#include <jvm.h>\n@@ -94,0 +95,15 @@\n+size_t get_java_stacksize () {\n+  pthread_attr_t attr;\n+  JDK1_1InitArgs jdk_args;\n+\n+  memset(&jdk_args, 0, (sizeof jdk_args));\n+\n+  jdk_args.version = JNI_VERSION_1_1;\n+  JNI_GetDefaultJavaVMInitArgs(&jdk_args);\n+  if (jdk_args.javaStackSize <= 0) {\n+    fprintf(stderr, \"Test ERROR. Can't get a valid value for the default stacksize.\\n\");\n+    exit(7);\n+  }\n+  return jdk_args.javaStackSize;\n+}\n+\n@@ -261,0 +277,1 @@\n+  size_t stack_size = get_java_stacksize();\n@@ -262,0 +279,4 @@\n+  pthread_attr_t thread_attr;\n+\n+  pthread_attr_init(&thread_attr);\n+  pthread_attr_setstacksize(&thread_attr, stack_size);\n@@ -267,2 +288,3 @@\n-    pthread_create (&thr, NULL, run_java_overflow, NULL);\n-    pthread_join (thr, NULL);\n+\n+    pthread_create(&thr, &thread_attr, run_java_overflow, NULL);\n+    pthread_join(thr, NULL);\n@@ -280,2 +302,2 @@\n-    pthread_create (&thr, NULL, run_native_overflow, NULL);\n-    pthread_join (thr, NULL);\n+    pthread_create(&thr, &thread_attr, run_native_overflow, NULL);\n+    pthread_join(thr, NULL);\n","filename":"test\/hotspot\/jtreg\/runtime\/StackGuardPages\/exeinvoke.c","additions":26,"deletions":4,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+\n+#ifdef __GLIBC__\n@@ -30,0 +32,1 @@\n+#endif\n@@ -57,0 +60,1 @@\n+#ifdef __GLIBC__\n@@ -69,0 +73,5 @@\n+#else\n+int glibc_has_pthread_get_minstack() {\n+  return 0;\n+}\n+#endif\n","filename":"test\/hotspot\/jtreg\/runtime\/TLS\/exestack-tls.c","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -29,0 +29,3 @@\n+ * @comment Calling pthread_getcpuclockid() with invalid pid leads to undefined\n+ * behavior in musl libc (see 8240187).\n+ * @requires !vm.musl\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/terminatedThread\/TestTerminatedThread.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+    vm.musl \\\n","filename":"test\/jdk\/TEST.ROOT","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,3 @@\n+ * @comment Under musl, dlclose is a no-op. The static variable 'count' in libnative.c\n+ * keeps its value across a GC and the check in Test.java fails.\n+ * @requires !vm.musl\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/nativeLibrary\/NativeLibraryTest.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+ * @library \/test\/lib\n@@ -43,0 +44,1 @@\n+ * @library \/test\/lib\n@@ -66,0 +68,2 @@\n+import jdk.test.lib.Platform;\n+\n@@ -403,2 +407,2 @@\n-                check(new File(\"\/bin\/true\").exists());\n-                check(new File(\"\/bin\/false\").exists());\n+                check(new File(TrueExe.path()).exists());\n+                check(new File(FalseExe.path()).exists());\n@@ -445,1 +449,1 @@\n-                        copy(\"\/bin\/true\", \"dir2\/prog\");\n+                        copy(TrueExe.path(), \"dir2\/prog\");\n@@ -451,1 +455,1 @@\n-                        copy(\"\/bin\/true\", \"dir1\/prog\");\n+                        copy(TrueExe.path(), \"dir1\/prog\");\n@@ -467,1 +471,1 @@\n-                            copy(\"\/bin\/true\", \".\/prog\");\n+                            copy(TrueExe.path(), \".\/prog\");\n@@ -470,1 +474,1 @@\n-                            copy(\"\/bin\/false\", \".\/prog\");\n+                            copy(FalseExe.path(), \".\/prog\");\n@@ -525,2 +529,2 @@\n-                        copy(\"\/bin\/true\", \"dir1\/prog\");\n-                        copy(\"\/bin\/false\", \"dir3\/prog\");\n+                        copy(TrueExe.path(), \"dir1\/prog\");\n+                        copy(FalseExe.path(), \"dir3\/prog\");\n@@ -529,2 +533,2 @@\n-                        copy(\"\/bin\/true\", \"dir3\/prog\");\n-                        copy(\"\/bin\/false\", \"dir1\/prog\");\n+                        copy(TrueExe.path(), \"dir3\/prog\");\n+                        copy(FalseExe.path(), \"dir1\/prog\");\n@@ -665,0 +669,37 @@\n+    \/\/ On Alpine Linux, \/bin\/true and \/bin\/false are just links to \/bin\/busybox.\n+    \/\/ Some tests copy \/bin\/true and \/bin\/false to files with a different filename.\n+    \/\/ However, copying the busbox executable into a file with a different name\n+    \/\/ won't result in the expected return codes. As workaround, we create\n+    \/\/ executable files that can be copied and produce the expected return\n+    \/\/ values.\n+\n+    private static class TrueExe {\n+        public static String path() { return path; }\n+        private static final String path = path0();\n+        private static String path0(){\n+            if (!Platform.isBusybox(\"\/bin\/true\")) {\n+                return \"\/bin\/true\";\n+            } else {\n+                File trueExe = new File(\"true\");\n+                setFileContents(trueExe, \"#!\/bin\/true\\n\");\n+                trueExe.setExecutable(true);\n+                return trueExe.getAbsolutePath();\n+            }\n+        }\n+    }\n+\n+    private static class FalseExe {\n+        public static String path() { return path; }\n+        private static final String path = path0();\n+        private static String path0(){\n+            if (!Platform.isBusybox(\"\/bin\/false\")) {\n+                return \"\/bin\/false\";\n+            } else {\n+                File falseExe = new File(\"false\");\n+                setFileContents(falseExe, \"#!\/bin\/false\\n\");\n+                falseExe.setExecutable(true);\n+                return falseExe.getAbsolutePath();\n+            }\n+        }\n+    }\n+\n@@ -1968,1 +2009,1 @@\n-                copy(\"\/bin\/true\", \"suBdiR\/unliKely\");\n+                copy(TrueExe.path(), \"suBdiR\/unliKely\");\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/Basic.java","additions":52,"deletions":11,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @requires (os.family == \"windows\")\n@@ -41,5 +42,0 @@\n-        \/\/ windows only\n-        if (!Basic.Windows.is()) {\n-            return;\n-        }\n-\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/RedirectWithLongFilename.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -301,1 +301,8 @@\n-                    String expected = Platform.isWindows() ? \"sleep.exe\" : \"sleep\";\n+                    String expected = \"sleep\";\n+                    if (Platform.isWindows()) {\n+                        expected = \"sleep.exe\";\n+                    } else if (Platform.isBusybox(\"\/bin\/sleep\")) {\n+                        \/\/ With busybox sleep is just a sym link to busybox.\n+                        \/\/ The busbox executable is seen as ProcessHandle.Info command.\n+                        expected = \"busybox\";\n+                    }\n","filename":"test\/jdk\/java\/lang\/ProcessHandle\/InfoTest.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @requires os.family != \"windows\" & !vm.musl & os.family != \"aix\"\n@@ -32,1 +33,13 @@\n- * @run main\/othervm ExecutionEnvironment\n+ * @run main\/othervm -DexpandedLdLibraryPath=false ExecutionEnvironment\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4780570 4731671 6354700 6367077 6670965 4882974\n+ * @summary Checks for LD_LIBRARY_PATH and execution  on *nixes\n+ * @requires os.family == \"aix\" | vm.musl\n+ * @library \/test\/lib\n+ * @modules jdk.compiler\n+ *          jdk.zipfs\n+ * @compile -XDignore.symbol.file ExecutionEnvironment.java\n+ * @run main\/othervm -DexpandedLdLibraryPath=true ExecutionEnvironment\n@@ -86,0 +99,3 @@\n+    static final boolean IS_EXPANDED_LD_LIBRARY_PATH =\n+            Boolean.getBoolean(\"expandedLdLibraryPath\");\n+\n@@ -140,1 +156,1 @@\n-                if (TestHelper.isAIX && x.startsWith(LD_LIBRARY_PATH)) {\n+                if (IS_EXPANDED_LD_LIBRARY_PATH && x.startsWith(LD_LIBRARY_PATH)) {\n@@ -143,1 +159,3 @@\n-                    String aixLibPath = LD_LIBRARY_PATH + \"=\" +\n+                    \/\/ The musl library loader requires LD_LIBRARY_PATH to be set in\n+                    \/\/ order to correctly resolve the dependency libjava.so has on libjvm.so.\n+                    String libPath = LD_LIBRARY_PATH + \"=\" +\n@@ -146,2 +164,2 @@\n-                    if (!tr.matches(aixLibPath)) {\n-                        flagError(tr, \"FAIL: did not get <\" + aixLibPath + \">\");\n+                    if (!tr.matches(libPath)) {\n+                        flagError(tr, \"FAIL: did not get <\" + libPath + \">\");\n@@ -263,4 +281,0 @@\n-        if (isWindows) {\n-            System.err.println(\"Warning: test not applicable to windows\");\n-            return;\n-        }\n","filename":"test\/jdk\/tools\/launcher\/ExecutionEnvironment.java","additions":23,"deletions":9,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @requires os.family != \"windows\" & os.family != \"mac\" & !vm.musl & os.family != \"aix\"\n@@ -31,1 +32,12 @@\n- * @run main Test7029048\n+ * @run main\/othervm -DexpandedLdLibraryPath=false Test7029048\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 7029048 8217340 8217216\n+ * @summary Ensure that the launcher defends against user settings of the\n+ *          LD_LIBRARY_PATH environment variable on Unixes\n+ * @requires os.family == \"aix\" | vm.musl\n+ * @library \/test\/lib\n+ * @compile -XDignore.symbol.file ExecutionEnvironment.java Test7029048.java\n+ * @run main\/othervm -DexpandedLdLibraryPath=true Test7029048\n@@ -62,0 +74,3 @@\n+    static final boolean IS_EXPANDED_LD_LIBRARY_PATH =\n+            Boolean.getBoolean(\"expandedLdLibraryPath\");\n+\n@@ -158,1 +173,1 @@\n-                    if (TestHelper.isAIX) {\n+                    if (IS_EXPANDED_LD_LIBRARY_PATH) {\n@@ -168,1 +183,1 @@\n-                    if (TestHelper.isAIX) {\n+                    if (IS_EXPANDED_LD_LIBRARY_PATH) {\n@@ -196,2 +211,2 @@\n-        System.out.printf(\"Skipping test case '%s' because the Aix launcher\" +\n-                          \" adds the paths in any case.%n\", description);\n+        System.out.printf(\"Skipping test case '%s' because the Aix and musl launchers\" +\n+                          \" add the paths in any case.%n\", description);\n@@ -201,4 +216,0 @@\n-        if (TestHelper.isWindows || TestHelper.isMacOSX) {\n-            System.out.println(\"Note: applicable on neither Windows nor MacOSX\");\n-            return;\n-        }\n","filename":"test\/jdk\/tools\/launcher\/Test7029048.java","additions":20,"deletions":9,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -118,0 +118,1 @@\n+        map.put(\"vm.musl\", this::isMusl);\n@@ -517,0 +518,9 @@\n+    \/**\n+     * Checks musl libc.\n+     *\n+     * @return true if musl libc is used.\n+     *\/\n+    protected String isMusl() {\n+        return Boolean.toString(WB.getLibcName().contains(\"musl\"));\n+    }\n+\n","filename":"test\/jtreg-ext\/requires\/VMProps.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -112,0 +112,12 @@\n+    public static boolean isBusybox(String tool) {\n+        try {\n+            Path toolpath = Paths.get(tool);\n+            return !isWindows()\n+                    && Files.isSymbolicLink(toolpath)\n+                    && Paths.get(\"\/bin\/busybox\")\n+                        .equals(Files.readSymbolicLink(toolpath));\n+        } catch (IOException ignore) {\n+            return false;\n+        }\n+    }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/Platform.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -619,0 +619,3 @@\n+  \/\/ libc name\n+  public native String getLibcName();\n+\n","filename":"test\/lib\/sun\/hotspot\/WhiteBox.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}