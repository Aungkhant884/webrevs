{"files":[{"patch":"@@ -138,1 +138,1 @@\n-        if (initAppImageLaunchers && launchers.isEmpty() &&\n+        if (launchers.isEmpty() &&\n@@ -140,1 +140,0 @@\n-            initAppImageLaunchers = false;\n@@ -152,1 +151,1 @@\n-                    FILE_ASSOCIATIONS.getID());\n+                    FILE_ASSOCIATIONS.getID(), PREDEFINED_APP_IMAGE.getID());\n@@ -549,1 +548,0 @@\n-    private static boolean initAppImageLaunchers = true;\n","filename":"src\/jdk.incubator.jpackage\/linux\/classes\/jdk\/incubator\/jpackage\/internal\/DesktopIntegration.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -214,1 +214,1 @@\n-    public void verify(JPackageCommand cmd) throws IOException {\n+    private void verify(JPackageCommand cmd) throws IOException {\n@@ -236,38 +236,0 @@\n-    public void verifyPackageInstalled(JPackageCommand cmd) {\n-        final String formatString;\n-        if (cmd.isPackageUnpacked()) {\n-            formatString = \"Verify unpacked: %s\";\n-        } else {\n-            formatString = \"Verify installed: %s\";\n-        }\n-        TKit.trace(String.format(formatString, cmd.getPrintableCommandLine()));\n-\n-        if (!cmd.isRuntime()) {\n-            if (PackageType.WINDOWS.contains(cmd.packageType())\n-                    && !cmd.isPackageUnpacked(\n-                            \"Not verifying desktop integration\")) {\n-                new WindowsHelper.DesktopIntegrationVerifier(cmd, name);\n-            }\n-        }\n-    }\n-\n-    public void verifyPackageUninstalled(JPackageCommand cmd) {\n-        TKit.trace(String.format(\"Verify uninstalled: %s\",\n-                cmd.getPrintableCommandLine()));\n-        if (!cmd.isRuntime()) {\n-            TKit.assertPathExists(cmd.appLauncherPath(), false);\n-\n-            if (PackageType.WINDOWS.contains(cmd.packageType())) {\n-                new WindowsHelper.DesktopIntegrationVerifier(cmd, name);\n-            }\n-        }\n-\n-        Path appInstallDir = cmd.appInstallationDirectory();\n-        if (TKit.isLinux() && Path.of(\"\/\").equals(appInstallDir)) {\n-            ApplicationLayout appLayout = cmd.appLayout();\n-            TKit.assertPathExists(appLayout.runtimeDirectory(), false);\n-        } else {\n-            TKit.assertPathExists(appInstallDir, false);\n-        }\n-    }\n-\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/AdditionalLauncher.java","additions":1,"deletions":39,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -320,0 +320,5 @@\n+    public PackageTest addLauncherName(String name) {\n+        launchersName.add(name);\n+        return this;\n+    }\n+\n@@ -559,0 +564,1 @@\n+                    \/\/ Check main launcher\n@@ -560,0 +566,4 @@\n+                    \/\/ Check additional launchers\n+                    launchersName.forEach(name -> {\n+                        new WindowsHelper.DesktopIntegrationVerifier(cmd, name);\n+                    });\n@@ -574,0 +584,1 @@\n+                    \/\/ Check main launcher\n@@ -575,0 +586,4 @@\n+                    \/\/ Check additional launchers\n+                    launchersName.forEach(name -> {\n+                        new WindowsHelper.DesktopIntegrationVerifier(cmd, name);\n+                    });\n@@ -621,0 +636,1 @@\n+    private final List<String> launchersName = new ArrayList();\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/PackageTest.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -140,1 +140,1 @@\n-            this.name = name;\n+            this.name = (name == null ? cmd.name() : name);\n@@ -163,1 +163,1 @@\n-            return Path.of((name == null ? cmd.name() : name) + \".lnk\");\n+            return Path.of(name + \".lnk\");\n@@ -204,2 +204,1 @@\n-                    () -> \"Unknown\"), (name == null ? cmd.name() : name)\n-                            + \".lnk\");\n+                    () -> \"Unknown\"), name + \".lnk\");\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/WindowsHelper.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import java.io.IOException;\n@@ -29,0 +30,1 @@\n+import jdk.jpackage.test.Annotations.Test;\n@@ -49,1 +51,3 @@\n- * @run main\/othervm\/timeout=360 -Xmx512m MultiLauncherTwoPhaseTest\n+ * @compile MultiLauncherTwoPhaseTest.java\n+ * @run main\/othervm\/timeout=360 -Xmx512m jdk.jpackage.test.Main\n+ *  --jpt-run=MultiLauncherTwoPhaseTest\n@@ -54,3 +58,3 @@\n-    public static void main(String[] args) throws Exception {\n-        TKit.run(args, () -> {\n-            Path appimageOutput = TKit.workDir().resolve(\"appimage\");\n+    @Test\n+    public static void test() throws IOException {\n+        Path appimageOutput = TKit.createTempDirectory(\"appimage\");\n@@ -58,2 +62,2 @@\n-            JPackageCommand appImageCmd = JPackageCommand.helloAppImage()\n-                    .setArgumentValue(\"--dest\", appimageOutput);\n+        JPackageCommand appImageCmd = JPackageCommand.helloAppImage()\n+                .setArgumentValue(\"--dest\", appimageOutput);\n@@ -61,2 +65,2 @@\n-            AdditionalLauncher launcher1 = new AdditionalLauncher(\"bar\");\n-            launcher1.setDefaultArguments().applyTo(appImageCmd);\n+        AdditionalLauncher launcher1 = new AdditionalLauncher(\"bar\");\n+        launcher1.setDefaultArguments().applyTo(appImageCmd);\n@@ -64,2 +68,2 @@\n-            AdditionalLauncher launcher2 = new AdditionalLauncher(\"foo\");\n-            launcher2.applyTo(appImageCmd);\n+        AdditionalLauncher launcher2 = new AdditionalLauncher(\"foo\");\n+        launcher2.applyTo(appImageCmd);\n@@ -67,28 +71,18 @@\n-            PackageTest packageTest = new PackageTest()\n-                    .addRunOnceInitializer(() -> appImageCmd.execute())\n-                    .addBundleDesktopIntegrationVerifier(true)\n-                    .addInitializer(cmd -> {\n-                        cmd.addArguments(\"--app-image\", appImageCmd.outputBundle());\n-                        cmd.removeArgumentWithValue(\"--input\");\n-                    })\n-                    .forTypes(PackageType.WINDOWS)\n-                    .addInitializer(cmd -> {\n-                        cmd.addArguments(\"--win-shortcut\", \"--win-menu\",\n-                                \"--win-menu-group\", \"MultiLauncherTwoPhaseTest\");\n-                    })\n-                    .addInstallVerifier(cmd -> {\n-                        launcher1.verify(cmd);\n-                        launcher1.verifyPackageInstalled(cmd);\n-                        launcher2.verify(cmd);\n-                        launcher2.verifyPackageInstalled(cmd);\n-                    })\n-                    .forTypes(PackageType.LINUX)\n-                    .addInitializer(cmd -> {\n-                        cmd.addArguments(\"--linux-shortcut\");\n-                    })\n-                    .addInstallVerifier(cmd -> {\n-                        launcher1.verify(cmd);\n-                        launcher1.verifyPackageInstalled(cmd);\n-                        launcher2.verify(cmd);\n-                        launcher2.verifyPackageInstalled(cmd);\n-                    });\n+        PackageTest packageTest = new PackageTest()\n+                .addLauncherName(\"bar\") \/\/ Add launchers name for verification\n+                .addLauncherName(\"foo\")\n+                .addRunOnceInitializer(() -> appImageCmd.execute())\n+                .addBundleDesktopIntegrationVerifier(true)\n+                .addInitializer(cmd -> {\n+                    cmd.addArguments(\"--app-image\", appImageCmd.outputBundle());\n+                    cmd.removeArgumentWithValue(\"--input\");\n+                })\n+                .forTypes(PackageType.WINDOWS)\n+                .addInitializer(cmd -> {\n+                    cmd.addArguments(\"--win-shortcut\", \"--win-menu\",\n+                            \"--win-menu-group\", \"MultiLauncherTwoPhaseTest\");\n+                })\n+                .forTypes(PackageType.LINUX)\n+                .addInitializer(cmd -> {\n+                    cmd.addArguments(\"--linux-shortcut\");\n+                });\n@@ -96,2 +90,1 @@\n-            packageTest.run();\n-        });\n+        packageTest.run();\n","filename":"test\/jdk\/tools\/jpackage\/share\/MultiLauncherTwoPhaseTest.java","additions":33,"deletions":40,"binary":false,"changes":73,"status":"modified"}]}