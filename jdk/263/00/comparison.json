{"files":[{"patch":"@@ -49,0 +49,1 @@\n+import jdk.incubator.jpackage.internal.Arguments.CLIOptions;\n@@ -57,0 +58,1 @@\n+import static jdk.incubator.jpackage.internal.StandardBundlerParam.PREDEFINED_APP_IMAGE;\n@@ -135,0 +137,20 @@\n+        \/\/ Read launchers information from predefine app image\n+        if (initAppImageLaunchers && launchers.isEmpty() &&\n+                PREDEFINED_APP_IMAGE.fetchFrom(params) != null) {\n+            initAppImageLaunchers = false;\n+            List<String> launcherPaths = AppImageFile.getLauncherNames(\n+                    PREDEFINED_APP_IMAGE.fetchFrom(params), params);\n+            if (!launcherPaths.isEmpty()) {\n+                launcherPaths.remove(0); \/\/ Remove main launcher\n+            }\n+            for (var launcherPath : launcherPaths) {\n+                Map<String, ? super Object> launcherParams = new HashMap<>();\n+                Arguments.putUnlessNull(launcherParams, CLIOptions.NAME.getId(),\n+                        launcherPath);\n+                launcherParams = AddLauncherArguments.merge(params, launcherParams,\n+                    ICON.getID(), ICON_PNG.getID(), ADD_LAUNCHERS.getID(),\n+                    FILE_ASSOCIATIONS.getID());\n+                launchers.add(launcherParams);\n+            }\n+        }\n+\n@@ -527,0 +549,1 @@\n+    private static boolean initAppImageLaunchers = true;\n","filename":"src\/jdk.incubator.jpackage\/linux\/classes\/jdk\/incubator\/jpackage\/internal\/DesktopIntegration.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import jdk.incubator.jpackage.internal.ApplicationLayout;\n@@ -213,1 +214,1 @@\n-    private void verify(JPackageCommand cmd) throws IOException {\n+    public void verify(JPackageCommand cmd) throws IOException {\n@@ -235,0 +236,38 @@\n+    public void verifyPackageInstalled(JPackageCommand cmd) {\n+        final String formatString;\n+        if (cmd.isPackageUnpacked()) {\n+            formatString = \"Verify unpacked: %s\";\n+        } else {\n+            formatString = \"Verify installed: %s\";\n+        }\n+        TKit.trace(String.format(formatString, cmd.getPrintableCommandLine()));\n+\n+        if (!cmd.isRuntime()) {\n+            if (PackageType.WINDOWS.contains(cmd.packageType())\n+                    && !cmd.isPackageUnpacked(\n+                            \"Not verifying desktop integration\")) {\n+                new WindowsHelper.DesktopIntegrationVerifier(cmd, name);\n+            }\n+        }\n+    }\n+\n+    public void verifyPackageUninstalled(JPackageCommand cmd) {\n+        TKit.trace(String.format(\"Verify uninstalled: %s\",\n+                cmd.getPrintableCommandLine()));\n+        if (!cmd.isRuntime()) {\n+            TKit.assertPathExists(cmd.appLauncherPath(), false);\n+\n+            if (PackageType.WINDOWS.contains(cmd.packageType())) {\n+                new WindowsHelper.DesktopIntegrationVerifier(cmd, name);\n+            }\n+        }\n+\n+        Path appInstallDir = cmd.appInstallationDirectory();\n+        if (TKit.isLinux() && Path.of(\"\/\").equals(appInstallDir)) {\n+            ApplicationLayout appLayout = cmd.appLayout();\n+            TKit.assertPathExists(appLayout.runtimeDirectory(), false);\n+        } else {\n+            TKit.assertPathExists(appInstallDir, false);\n+        }\n+    }\n+\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/AdditionalLauncher.java","additions":40,"deletions":1,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -559,1 +559,1 @@\n-                    new WindowsHelper.DesktopIntegrationVerifier(cmd);\n+                    new WindowsHelper.DesktopIntegrationVerifier(cmd, null);\n@@ -574,1 +574,1 @@\n-                    new WindowsHelper.DesktopIntegrationVerifier(cmd);\n+                    new WindowsHelper.DesktopIntegrationVerifier(cmd, null);\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/PackageTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -137,1 +137,1 @@\n-        DesktopIntegrationVerifier(JPackageCommand cmd) {\n+        DesktopIntegrationVerifier(JPackageCommand cmd, String name) {\n@@ -140,0 +140,1 @@\n+            this.name = name;\n@@ -146,1 +147,1 @@\n-            boolean appInstalled = cmd.appLauncherPath().toFile().exists();\n+            boolean appInstalled = cmd.appLauncherPath(name).toFile().exists();\n@@ -162,1 +163,1 @@\n-            return Path.of(cmd.name() + \".lnk\");\n+            return Path.of((name == null ? cmd.name() : name) + \".lnk\");\n@@ -186,1 +187,1 @@\n-            boolean appInstalled = cmd.appLauncherPath().toFile().exists();\n+            boolean appInstalled = cmd.appLauncherPath(name).toFile().exists();\n@@ -203,1 +204,2 @@\n-                    () -> \"Unknown\"), cmd.name() + \".lnk\");\n+                    () -> \"Unknown\"), (name == null ? cmd.name() : name)\n+                            + \".lnk\");\n@@ -231,1 +233,1 @@\n-            boolean appInstalled = cmd.appLauncherPath().toFile().exists();\n+            boolean appInstalled = cmd.appLauncherPath(name).toFile().exists();\n@@ -282,0 +284,1 @@\n+        private final String name;\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/WindowsHelper.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.nio.file.Path;\n+import jdk.jpackage.test.AdditionalLauncher;\n+import jdk.jpackage.test.PackageTest;\n+import jdk.jpackage.test.PackageType;\n+import jdk.jpackage.test.TKit;\n+import jdk.jpackage.test.JPackageCommand;\n+\n+\/**\n+ * Test multiple launchers in two phases. First test creates app image and then\n+ * creates installer from this image. Output of the test should be\n+ * MultiLauncherTwoPhaseTest*.* installer. The output installer should be basic\n+ * installer with 3 launcher MultiLauncherTwoPhaseTest, bar and foo. On Windows\n+ * we should have start menu integration under MultiLauncherTwoPhaseTest and\n+ * desktop shortcuts for all 3 launchers. Linux should also create shortcuts for\n+ * all launchers.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Multiple launchers in two phases\n+ * @library ..\/helpers\n+ * @library \/test\/lib\n+ * @key jpackagePlatformPackage\n+ * @build jdk.jpackage.test.*\n+ * @modules jdk.incubator.jpackage\/jdk.incubator.jpackage.internal\n+ * @run main\/othervm\/timeout=360 -Xmx512m MultiLauncherTwoPhaseTest\n+ *\/\n+\n+public class MultiLauncherTwoPhaseTest {\n+\n+    public static void main(String[] args) throws Exception {\n+        TKit.run(args, () -> {\n+            Path appimageOutput = TKit.workDir().resolve(\"appimage\");\n+\n+            JPackageCommand appImageCmd = JPackageCommand.helloAppImage()\n+                    .setArgumentValue(\"--dest\", appimageOutput);\n+\n+            AdditionalLauncher launcher1 = new AdditionalLauncher(\"bar\");\n+            launcher1.setDefaultArguments().applyTo(appImageCmd);\n+\n+            AdditionalLauncher launcher2 = new AdditionalLauncher(\"foo\");\n+            launcher2.applyTo(appImageCmd);\n+\n+            PackageTest packageTest = new PackageTest()\n+                    .addRunOnceInitializer(() -> appImageCmd.execute())\n+                    .addBundleDesktopIntegrationVerifier(true)\n+                    .addInitializer(cmd -> {\n+                        cmd.addArguments(\"--app-image\", appImageCmd.outputBundle());\n+                        cmd.removeArgumentWithValue(\"--input\");\n+                    })\n+                    .forTypes(PackageType.WINDOWS)\n+                    .addInitializer(cmd -> {\n+                        cmd.addArguments(\"--win-shortcut\", \"--win-menu\",\n+                                \"--win-menu-group\", \"MultiLauncherTwoPhaseTest\");\n+                    })\n+                    .addInstallVerifier(cmd -> {\n+                        launcher1.verify(cmd);\n+                        launcher1.verifyPackageInstalled(cmd);\n+                        launcher2.verify(cmd);\n+                        launcher2.verifyPackageInstalled(cmd);\n+                    })\n+                    .forTypes(PackageType.LINUX)\n+                    .addInitializer(cmd -> {\n+                        cmd.addArguments(\"--linux-shortcut\");\n+                    })\n+                    .addInstallVerifier(cmd -> {\n+                        launcher1.verify(cmd);\n+                        launcher1.verifyPackageInstalled(cmd);\n+                        launcher2.verify(cmd);\n+                        launcher2.verifyPackageInstalled(cmd);\n+                    });\n+\n+            packageTest.run();\n+        });\n+    }\n+}\n","filename":"test\/jdk\/tools\/jpackage\/share\/MultiLauncherTwoPhaseTest.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"}]}