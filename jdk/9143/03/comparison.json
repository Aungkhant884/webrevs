{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import java.lang.annotation.*;\n+import java.lang.annotation.Annotation;\n@@ -33,1 +33,0 @@\n-import java.util.stream.Stream;\n@@ -37,0 +36,1 @@\n+import jdk.internal.vm.annotation.Stable;\n@@ -410,12 +410,2 @@\n-        \/\/ Use tmp to avoid multiple writes to a volatile.\n-        Parameter[] tmp = parameters;\n-\n-        if (tmp == null) {\n-\n-            \/\/ Otherwise, go to the JVM to get them\n-            try {\n-                tmp = getParameters0();\n-            } catch(IllegalArgumentException e) {\n-                \/\/ Rethrow ClassFormatErrors\n-                throw new MalformedParametersException(\"Invalid constant pool index\");\n-            }\n+        return parameterData().parameters;\n+    }\n@@ -423,8 +413,3 @@\n-            \/\/ If we get back nothing, then synthesize parameters\n-            if (tmp == null) {\n-                hasRealParameterData = false;\n-                tmp = synthesizeAllParams();\n-            } else {\n-                hasRealParameterData = true;\n-                verifyParameters(tmp);\n-            }\n+    boolean hasRealParameterData() {\n+        return parameterData().isReal;\n+    }\n@@ -432,1 +417,4 @@\n-            parameters = tmp;\n+    private ParameterData parameterData() {\n+        ParameterData parameterData = this.parameterData;\n+        if (parameterData != null){\n+            return parameterData;\n@@ -435,2 +423,8 @@\n-        return tmp;\n-    }\n+        Parameter[] tmp;\n+        \/\/ Go to the JVM to get them\n+        try {\n+            tmp = getParameters0();\n+        } catch (IllegalArgumentException e) {\n+            \/\/ Rethrow ClassFormatErrors\n+            throw new MalformedParametersException(\"Invalid constant pool index\");\n+        }\n@@ -438,5 +432,7 @@\n-    boolean hasRealParameterData() {\n-        \/\/ If this somehow gets called before parameters gets\n-        \/\/ initialized, force it into existence.\n-        if (parameters == null) {\n-            privateGetParameters();\n+        \/\/ If we get back nothing, then synthesize parameters\n+        if (tmp == null) {\n+            tmp = synthesizeAllParams();\n+            parameterData = new ParameterData(tmp, false);\n+        } else {\n+            verifyParameters(tmp);\n+            parameterData = new ParameterData(tmp, true);\n@@ -444,1 +440,1 @@\n-        return hasRealParameterData;\n+        return this.parameterData = parameterData;\n@@ -447,2 +443,1 @@\n-    private transient volatile boolean hasRealParameterData;\n-    private transient volatile Parameter[] parameters;\n+    private transient @Stable ParameterData parameterData;\n@@ -781,0 +776,3 @@\n+\n+    record ParameterData(@Stable Parameter[] parameters, boolean isReal) {}\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Executable.java","additions":32,"deletions":34,"binary":false,"changes":66,"status":"modified"}]}