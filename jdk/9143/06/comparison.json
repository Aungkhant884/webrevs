{"files":[{"patch":"@@ -28,1 +28,1 @@\n-import java.lang.annotation.*;\n+import java.lang.annotation.Annotation;\n@@ -34,1 +34,0 @@\n-import java.util.stream.Stream;\n@@ -38,0 +37,1 @@\n+import jdk.internal.vm.annotation.Stable;\n@@ -385,1 +385,1 @@\n-        return privateGetParameters().clone();\n+        return parameterData().parameters.clone();\n@@ -424,3 +424,0 @@\n-    private Parameter[] privateGetParameters() {\n-        \/\/ Use tmp to avoid multiple writes to a volatile.\n-        Parameter[] tmp = parameters;\n@@ -428,18 +425,3 @@\n-        if (tmp == null) {\n-\n-            \/\/ Otherwise, go to the JVM to get them\n-            try {\n-                tmp = getParameters0();\n-            } catch(IllegalArgumentException e) {\n-                \/\/ Rethrow ClassFormatErrors\n-                throw new MalformedParametersException(\"Invalid constant pool index\");\n-            }\n-\n-            \/\/ If we get back nothing, then synthesize parameters\n-            if (tmp == null) {\n-                hasRealParameterData = false;\n-                tmp = synthesizeAllParams();\n-            } else {\n-                hasRealParameterData = true;\n-                verifyParameters(tmp);\n-            }\n+    boolean hasRealParameterData() {\n+        return parameterData().isReal;\n+    }\n@@ -447,1 +429,4 @@\n-            parameters = tmp;\n+    private ParameterData parameterData() {\n+        ParameterData parameterData = this.parameterData;\n+        if (parameterData != null) {\n+            return parameterData;\n@@ -450,2 +435,8 @@\n-        return tmp;\n-    }\n+        Parameter[] tmp;\n+        \/\/ Go to the JVM to get them\n+        try {\n+            tmp = getParameters0();\n+        } catch (IllegalArgumentException e) {\n+            \/\/ Rethrow ClassFormatErrors\n+            throw new MalformedParametersException(\"Invalid constant pool index\");\n+        }\n@@ -453,5 +444,7 @@\n-    boolean hasRealParameterData() {\n-        \/\/ If this somehow gets called before parameters gets\n-        \/\/ initialized, force it into existence.\n-        if (parameters == null) {\n-            privateGetParameters();\n+        \/\/ If we get back nothing, then synthesize parameters\n+        if (tmp == null) {\n+            tmp = synthesizeAllParams();\n+            parameterData = new ParameterData(tmp, false);\n+        } else {\n+            verifyParameters(tmp);\n+            parameterData = new ParameterData(tmp, true);\n@@ -459,1 +452,1 @@\n-        return hasRealParameterData;\n+        return this.parameterData = parameterData;\n@@ -462,2 +455,3 @@\n-    private transient volatile boolean hasRealParameterData;\n-    private transient volatile Parameter[] parameters;\n+    private transient @Stable ParameterData parameterData;\n+\n+    record ParameterData(@Stable Parameter[] parameters, boolean isReal) {}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Executable.java","additions":29,"deletions":35,"binary":false,"changes":64,"status":"modified"}]}