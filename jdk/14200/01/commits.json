[{"commit":{"message":"Bug fix\n\nChange-Id: Ib223c4048b29875a62a27d6081ad36a125dec144"},"files":[{"filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/VectorExtractBenchmark.java"}],"sha":"ebb07165e2df853f41a06a7885a09c7b121c4920"},{"commit":{"message":"8306136: [vectorapi] Intrinsics of VectorMask.laneIsSet()\n\nVectorMask.laneIsSet() [1] is implemented based on VectorMask.toLong()\n[2], and it's performance highly depends on the intrinsification of\ntoLong(). However, if `toLong()` is failed to intrinsify, on some\narchitectures or unsupported species, it's much more expensive than pure\ngetBits(). Besides, some CPUs (e.g. with Arm Neon) may not have\nefficient instructions to implementation toLong(), so we propose to\nintrinsify VectorMask.laneIsSet separately.\n\nThis patch optimize laneIsSet() by calling the existing intrinsic method\nVectorSupport.extract(), which actually does not introduce new intrinsic\nmethod. The C2 compiler intrinsification logic to support _VectorExtract\nhas also been extended to better support laneIsSet(). It tries to\nextract the mask's lane value with an ExtractUB node if the hardware\nbackend supports it. While on hardware without ExtractUB backend support\n, c2 will still try to generate toLong() related nodes, which behaves\nthe same as before the patch.\n\nKey changes in this patch:\n\n1. Reuse intrinsic `VectorSupport.extract()` in Java side. No new\n   intrinsic method is introduced.\n2. In compiler, `ExtractUBNode` is generated if backend support is. If\n   not, the original \"toLong\" pattern is generated if it's implemented.\n   Otherwise, it uses the default Java `getBits[i]` rather than the\n   expensive and complicated toLong() based implementation.\n3. Enable `ExtractUBNode` on AArch64 to extract the lane value for a\n   vector mask in compiler, together with changing its bottom type to\n   TypeInt::BOOL. This helps optimize the conditional selection\n   generated by\n\n   ```\n\n       public boolean laneIsSet(int i) {\n           return VectorSupport.extract(..., defaultImpl) == 1L;\n       }\n\n   ```\n\n[Test]\nhotspot:compiler\/vectorapi and jdk\/incubator\/vector passed.\n\n[Performance]\n\nBelow shows the performance gain on 128-bit vector size Neon machine.\nFor 64 and 128 SPECIES, the improvment caused by this intrinsics.\nFor other SPECIES which can not be intrinfied, performance gain comes\nfrom the default Java implementation changes, i.e. getBits[i] vs.\ntoLong().\n\nBenchmark                               Gain (after\/before)\nmicroMaskLaneIsSetByte128_con           2.47\nmicroMaskLaneIsSetByte128_var           1.82\nmicroMaskLaneIsSetByte256_con           3.01\nmicroMaskLaneIsSetByte256_var           3.04\nmicroMaskLaneIsSetByte512_con           4.83\nmicroMaskLaneIsSetByte512_var           4.86\nmicroMaskLaneIsSetByte64_con            1.57\nmicroMaskLaneIsSetByte64_var            1.18\nmicroMaskLaneIsSetDouble128_con         1.19\nmicroMaskLaneIsSetDouble128_var         1.13\nmicroMaskLaneIsSetDouble256_con         1.33\nmicroMaskLaneIsSetDouble256_var         1.40\nmicroMaskLaneIsSetDouble512_con         1.62\nmicroMaskLaneIsSetDouble512_var         1.70\nmicroMaskLaneIsSetDouble64_con          1.18\nmicroMaskLaneIsSetDouble64_var          1.21\nmicroMaskLaneIsSetFloat128_con          1.56\nmicroMaskLaneIsSetFloat128_var          1.25\nmicroMaskLaneIsSetFloat256_con          1.63\nmicroMaskLaneIsSetFloat256_var          1.68\nmicroMaskLaneIsSetFloat512_con          2.13\nmicroMaskLaneIsSetFloat512_var          2.18\nmicroMaskLaneIsSetFloat64_con           1.21\nmicroMaskLaneIsSetFloat64_var           1.11\nmicroMaskLaneIsSetInt128_con            1.54\nmicroMaskLaneIsSetInt128_var            1.24\nmicroMaskLaneIsSetInt256_con            1.63\nmicroMaskLaneIsSetInt256_var            1.72\nmicroMaskLaneIsSetInt512_con            2.09\nmicroMaskLaneIsSetInt512_var            2.19\nmicroMaskLaneIsSetInt64_con             1.22\nmicroMaskLaneIsSetInt64_var             1.13\nmicroMaskLaneIsSetLong128_con           1.21\nmicroMaskLaneIsSetLong128_var           1.08\nmicroMaskLaneIsSetLong256_con           1.29\nmicroMaskLaneIsSetLong256_var           1.41\nmicroMaskLaneIsSetLong512_con           1.62\nmicroMaskLaneIsSetLong512_var           1.67\nmicroMaskLaneIsSetLong64_con            1.18\nmicroMaskLaneIsSetLong64_var            1.21\nmicroMaskLaneIsSetShort128_con          1.57\nmicroMaskLaneIsSetShort128_var          1.19\nmicroMaskLaneIsSetShort256_con          2.09\nmicroMaskLaneIsSetShort256_var          2.17\nmicroMaskLaneIsSetShort512_con          3.00\nmicroMaskLaneIsSetShort512_var          3.08\nmicroMaskLaneIsSetShort64_con           1.56\nmicroMaskLaneIsSetShort64_var           1.25\n\nNo regression on x86.\n\n[1] https:\/\/github.com\/openjdk\/jdk\/blob\/3d3eaed9133dbe728ca8e00a626d33f7e35ba9ff\/src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/AbstractMask.java#L72\n[2] https:\/\/github.com\/openjdk\/jdk\/blob\/3d3eaed9133dbe728ca8e00a626d33f7e35ba9ff\/src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int128Vector.java#L726\n[3] https:\/\/github.com\/openjdk\/jdk\/blob\/3d3eaed9133dbe728ca8e00a626d33f7e35ba9ff\/src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/AbstractMask.java#L195\n\nChange-Id: I3463624a04f29ba3f22356414e13ee9d13db7988"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4"},{"filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp"},{"filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp"},{"filename":"src\/hotspot\/share\/opto\/vectornode.cpp"},{"filename":"src\/hotspot\/share\/opto\/vectornode.hpp"},{"filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/vector\/VectorSupport.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/AbstractMask.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte128Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte256Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte512Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte64Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteMaxVector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double128Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double256Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double512Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double64Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleMaxVector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float128Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float256Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float512Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float64Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatMaxVector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int128Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int256Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int512Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int64Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntMaxVector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long128Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long256Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long512Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long64Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongMaxVector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short128Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short256Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short512Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short64Vector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortMaxVector.java"},{"filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-VectorBits.java.template"},{"filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/VectorExtractBenchmark.java"}],"sha":"da5a7e72858e6cddaf3e68c656ffa75268c339ce"}]