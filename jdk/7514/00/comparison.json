{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -490,1 +490,1 @@\n-  NMethodSweeper::report_allocation(code_blob_type);\n+  NMethodSweeper::report_allocation();\n@@ -515,1 +515,1 @@\n-        \/\/ and force stack scanning if less than 10% of the code heap are free.\n+        \/\/ and force stack scanning if less than 10% of the entire code cache are free.\n@@ -892,9 +892,0 @@\n-\/**\n- * Returns the reverse free ratio. E.g., if 25% (1\/4) of the code heap\n- * is free, reverse_free_ratio() returns 4.\n- *\/\n-double CodeCache::reverse_free_ratio(int code_blob_type) {\n-  CodeHeap* heap = get_code_heap(code_blob_type);\n-  if (heap == NULL) {\n-    return 0;\n-  }\n@@ -902,4 +893,10 @@\n-  double unallocated_capacity = MAX2((double)heap->unallocated_capacity(), 1.0); \/\/ Avoid division by 0;\n-  double max_capacity = (double)heap->max_capacity();\n-  double result = max_capacity \/ unallocated_capacity;\n-  assert (max_capacity >= unallocated_capacity, \"Must be\");\n+\/\/ Returns the reverse free ratio. E.g., if 25% (1\/4) of the code heap\n+\/\/ is free, reverse_free_ratio() returns 4.\n+\/\/ Since code heap for each type of code blobs falls forward to the next\n+\/\/ type of code heap, return the reverse free ratio for the entire\n+\/\/ code heap.\n+double CodeCache::reverse_free_ratio() {\n+  double unallocated = MAX2((double)unallocated_capacity(), 1.0); \/\/ Avoid division by 0;\n+  double max = (double)max_capacity();\n+  double result = max \/ unallocated;\n+  assert (max >= unallocated, \"Must be\");\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":13,"deletions":16,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -214,1 +214,1 @@\n-  static double reverse_free_ratio(int code_blob_type);\n+  static double reverse_free_ratio();\n","filename":"src\/hotspot\/share\/code\/codeCache.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -318,1 +318,1 @@\n-      double current_reverse_free_ratio = CodeCache::reverse_free_ratio(CodeCache::get_code_blob_type(level));\n+      double current_reverse_free_ratio = CodeCache::reverse_free_ratio();\n","filename":"src\/hotspot\/share\/compiler\/compilationPolicy.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -232,2 +232,2 @@\n-void NMethodSweeper::report_allocation(int code_blob_type) {\n-  if (should_start_aggressive_sweep(code_blob_type)) {\n+void NMethodSweeper::report_allocation() {\n+  if (should_start_aggressive_sweep()) {\n@@ -240,1 +240,1 @@\n-bool NMethodSweeper::should_start_aggressive_sweep(int code_blob_type) {\n+bool NMethodSweeper::should_start_aggressive_sweep() {\n@@ -244,1 +244,1 @@\n-  return (CodeCache::reverse_free_ratio(code_blob_type) >= aggressive_sweep_threshold);\n+  return (CodeCache::reverse_free_ratio() >= aggressive_sweep_threshold);\n@@ -549,2 +549,1 @@\n-      int code_blob_type = CodeCache::get_code_blob_type(nm);\n-      double threshold = -reset_val + (CodeCache::reverse_free_ratio(code_blob_type) * NmethodSweepActivity);\n+      double threshold = -reset_val + (CodeCache::reverse_free_ratio() * NmethodSweepActivity);\n","filename":"src\/hotspot\/share\/runtime\/sweeper.cpp","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -116,1 +116,1 @@\n-  static bool should_start_aggressive_sweep(int code_blob_type);\n+  static bool should_start_aggressive_sweep();\n@@ -120,1 +120,1 @@\n-  static void report_allocation(int code_blob_type);  \/\/ Possibly start the sweeper thread.\n+  static void report_allocation();  \/\/ Possibly start the sweeper thread.\n","filename":"src\/hotspot\/share\/runtime\/sweeper.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}