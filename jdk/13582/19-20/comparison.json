{"files":[{"patch":"@@ -79,1 +79,0 @@\n-#include \"gc\/shared\/gcForwarding.hpp\"\n@@ -91,0 +90,1 @@\n+#include \"gc\/shared\/slidingForwarding.hpp\"\n@@ -1528,1 +1528,1 @@\n-  GCForwarding::initialize(heap_rs.region(), HeapRegion::GrainWords);\n+  SlidingForwarding::initialize(heap_rs.region(), HeapRegion::GrainWords);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-#include \"gc\/shared\/gcForwarding.hpp\"\n@@ -46,0 +45,1 @@\n+#include \"gc\/shared\/slidingForwarding.hpp\"\n@@ -214,1 +214,1 @@\n-  GCForwarding::begin();\n+  SlidingForwarding::begin();\n@@ -228,1 +228,1 @@\n-  GCForwarding::end();\n+  SlidingForwarding::end();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#include \"gc\/shared\/gcForwarding.inline.hpp\"\n@@ -34,0 +33,1 @@\n+#include \"gc\/shared\/slidingForwarding.inline.hpp\"\n@@ -45,1 +45,1 @@\n-  if (GCForwarding::is_forwarded(obj)) {\n+  if (SlidingForwarding::is_forwarded(obj)) {\n@@ -56,2 +56,2 @@\n-  assert(GCForwarding::is_forwarded(obj), \"Sanity!\");\n-  assert(GCForwarding::forwardee(obj) != obj, \"Object must have a new location\");\n+  assert(SlidingForwarding::is_forwarded(obj), \"Sanity!\");\n+  assert(SlidingForwarding::forwardee(obj) != obj, \"Object must have a new location\");\n@@ -62,1 +62,1 @@\n-  HeapWord* destination = cast_from_oop<HeapWord*>(GCForwarding::forwardee(obj));\n+  HeapWord* destination = cast_from_oop<HeapWord*>(SlidingForwarding::forwardee(obj));\n@@ -125,1 +125,1 @@\n-  HeapWord* destination = cast_from_oop<HeapWord*>(GCForwarding::forwardee(obj));\n+  HeapWord* destination = cast_from_oop<HeapWord*>(SlidingForwarding::forwardee(obj));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactTask.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"gc\/shared\/gcForwarding.inline.hpp\"\n@@ -31,0 +30,1 @@\n+#include \"gc\/shared\/slidingForwarding.inline.hpp\"\n@@ -106,2 +106,2 @@\n-    GCForwarding::forward_to(object, cast_to_oop(_compaction_top));\n-    assert(GCForwarding::is_forwarded(object), \"must be forwarded\");\n+    SlidingForwarding::forward_to(object, cast_to_oop(_compaction_top));\n+    assert(SlidingForwarding::is_forwarded(object), \"must be forwarded\");\n@@ -109,1 +109,1 @@\n-    assert(GCForwarding::is_not_forwarded(object), \"must not be forwarded\");\n+    assert(SlidingForwarding::is_not_forwarded(object), \"must not be forwarded\");\n@@ -172,2 +172,2 @@\n-  GCForwarding::forward_to(obj, cast_to_oop(dest_hr->bottom()));\n-  assert(GCForwarding::is_forwarded(obj), \"Object must be forwarded!\");\n+  SlidingForwarding::forward_to(obj, cast_to_oop(dest_hr->bottom()));\n+  assert(SlidingForwarding::is_forwarded(obj), \"Object must be forwarded!\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactionPoint.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-#include \"gc\/shared\/gcForwarding.inline.hpp\"\n+#include \"gc\/shared\/slidingForwarding.inline.hpp\"\n@@ -69,2 +69,2 @@\n-  if (GCForwarding::is_forwarded(obj)) {\n-    oop forwardee = GCForwarding::forwardee(obj);\n+  if (SlidingForwarding::is_forwarded(obj)) {\n+    oop forwardee = SlidingForwarding::forwardee(obj);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCOopClosures.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-#include \"gc\/shared\/gcForwarding.inline.hpp\"\n+#include \"gc\/shared\/slidingForwarding.inline.hpp\"\n@@ -106,1 +106,1 @@\n-  if (GCForwarding::is_forwarded(obj)) {\n+  if (SlidingForwarding::is_forwarded(obj)) {\n@@ -109,1 +109,1 @@\n-    if (cast_from_oop<HeapWord*>(GCForwarding::forwardee(obj)) < _dense_prefix_top) {\n+    if (cast_from_oop<HeapWord*>(SlidingForwarding::forwardee(obj)) < _dense_prefix_top) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCPrepareTask.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-#include \"gc\/shared\/gcForwarding.hpp\"\n@@ -49,0 +48,1 @@\n+#include \"gc\/shared\/slidingForwarding.hpp\"\n@@ -91,1 +91,1 @@\n-  GCForwarding::begin();\n+  SlidingForwarding::begin();\n@@ -111,1 +111,1 @@\n-  GCForwarding::end();\n+  SlidingForwarding::end();\n","filename":"src\/hotspot\/share\/gc\/serial\/genMarkSweep.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-#include \"gc\/shared\/gcForwarding.inline.hpp\"\n@@ -35,0 +34,1 @@\n+#include \"gc\/shared\/slidingForwarding.inline.hpp\"\n@@ -49,2 +49,2 @@\n-    if (GCForwarding::is_forwarded(obj)) {\n-      oop new_obj = GCForwarding::forwardee(obj);\n+    if (SlidingForwarding::is_forwarded(obj)) {\n+      oop new_obj = SlidingForwarding::forwardee(obj);\n","filename":"src\/hotspot\/share\/gc\/serial\/markSweep.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,57 +0,0 @@\n-\/*\n- * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#include \"precompiled.hpp\"\n-#include \"gc\/shared\/gcForwarding.hpp\"\n-#include \"gc\/shared\/gc_globals.hpp\"\n-#include \"gc\/shared\/slidingForwarding.hpp\"\n-\n-SlidingForwarding* GCForwarding::_sliding_forwarding = nullptr;\n-\n-void GCForwarding::initialize(MemRegion heap, size_t region_size_words) {\n-#ifdef _LP64\n-  if (UseAltGCForwarding) {\n-    assert(_sliding_forwarding == nullptr, \"only call this once\");\n-    _sliding_forwarding = new SlidingForwarding(heap, region_size_words);\n-  }\n-#endif\n-}\n-\n-void GCForwarding::begin() {\n-#ifdef _LP64\n-  if (UseAltGCForwarding) {\n-    assert(_sliding_forwarding != nullptr, \"expect sliding forwarding initialized\");\n-    _sliding_forwarding->begin();\n-  }\n-#endif\n-}\n-\n-void GCForwarding::end() {\n-#ifdef _LP64\n-  if (UseAltGCForwarding) {\n-    assert(_sliding_forwarding != nullptr, \"expect sliding forwarding initialized\");\n-    _sliding_forwarding->end();\n-  }\n-#endif\n-}\n","filename":"src\/hotspot\/share\/gc\/shared\/gcForwarding.cpp","additions":0,"deletions":57,"binary":false,"changes":57,"status":"deleted"},{"patch":"@@ -1,49 +0,0 @@\n-\/*\n- * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_GC_SHARED_GCFORWARDING_HPP\n-#define SHARE_GC_SHARED_GCFORWARDING_HPP\n-\n-#include \"memory\/allStatic.hpp\"\n-#include \"memory\/memRegion.hpp\"\n-#include \"oops\/oopsHierarchy.hpp\"\n-\n-class SlidingForwarding;\n-\n-class GCForwarding : public AllStatic {\n-private:\n-  static SlidingForwarding* _sliding_forwarding;\n-\n-public:\n-  static void initialize(MemRegion heap, size_t region_size_words);\n-  static void begin();\n-  static void end();\n-\n-  static inline bool is_forwarded(oop obj);\n-  static inline bool is_not_forwarded(oop obj);\n-  static inline oop forwardee(oop obj);\n-  static inline void forward_to(oop obj, oop fwd);\n-};\n-\n-#endif \/\/ SHARE_GC_SHARED_GCFORWARDING_HPP\n","filename":"src\/hotspot\/share\/gc\/shared\/gcForwarding.hpp","additions":0,"deletions":49,"binary":false,"changes":49,"status":"deleted"},{"patch":"@@ -1,66 +0,0 @@\n-\/*\n- * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_GC_SHARED_GCFORWARDING_INLINE_HPP\n-#define SHARE_GC_SHARED_GCFORWARDING_INLINE_HPP\n-\n-#include \"gc\/shared\/gcForwarding.hpp\"\n-#include \"gc\/shared\/gc_globals.hpp\"\n-#include \"gc\/shared\/slidingForwarding.inline.hpp\"\n-#include \"oops\/oop.inline.hpp\"\n-\n-inline bool GCForwarding::is_forwarded(oop obj) {\n-  return obj->is_forwarded();\n-}\n-\n-inline bool GCForwarding::is_not_forwarded(oop obj) {\n-  return !obj->is_forwarded();\n-}\n-\n-inline oop GCForwarding::forwardee(oop obj) {\n-#ifdef _LP64\n-  if (UseAltGCForwarding) {\n-    assert(_sliding_forwarding != nullptr, \"expect sliding forwarding initialized\");\n-    return _sliding_forwarding->forwardee(obj);\n-  } else\n-#endif\n-  {\n-    return obj->forwardee();\n-  }\n-}\n-\n-inline void GCForwarding::forward_to(oop obj, oop fwd) {\n-#ifdef _LP64\n-  if (UseAltGCForwarding) {\n-    assert(_sliding_forwarding != nullptr, \"expect sliding forwarding initialized\");\n-    _sliding_forwarding->forward_to(obj, fwd);\n-    assert(forwardee(obj) == fwd, \"must be forwarded to correct forwardee\");\n-  } else\n-#endif\n-  {\n-    obj->forward_to(fwd);\n-  }\n-}\n-\n-#endif \/\/ SHARE_GC_SHARED_GCFORWARDING_INLINE_HPP\n","filename":"src\/hotspot\/share\/gc\/shared\/gcForwarding.inline.hpp","additions":0,"deletions":66,"binary":false,"changes":66,"status":"deleted"},{"patch":"@@ -42,1 +42,0 @@\n-#include \"gc\/shared\/gcForwarding.hpp\"\n@@ -58,0 +57,1 @@\n+#include \"gc\/shared\/slidingForwarding.hpp\"\n@@ -136,1 +136,1 @@\n-  GCForwarding::initialize(_reserved, SpaceAlignment \/ HeapWordSize);\n+  SlidingForwarding::initialize(_reserved, SpaceAlignment \/ HeapWordSize);\n","filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"gc\/shared\/gcForwarding.inline.hpp\"\n@@ -28,0 +27,1 @@\n+#include \"gc\/shared\/slidingForwarding.inline.hpp\"\n@@ -50,2 +50,2 @@\n-    if (GCForwarding::is_forwarded(obj)) {\n-      elem->set_oop(GCForwarding::forwardee(obj));\n+    if (SlidingForwarding::is_forwarded(obj)) {\n+      elem->set_oop(SlidingForwarding::forwardee(obj));\n","filename":"src\/hotspot\/share\/gc\/shared\/preservedMarks.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -38,0 +38,2 @@\n+SlidingForwarding* SlidingForwarding::_sliding_forwarding = nullptr;\n+\n@@ -65,1 +67,10 @@\n-void SlidingForwarding::begin() {\n+void SlidingForwarding::initialize(MemRegion heap, size_t region_size_words) {\n+#ifdef _LP64\n+  if (UseAltGCForwarding) {\n+    assert(_sliding_forwarding == nullptr, \"only call this once\");\n+    _sliding_forwarding = new SlidingForwarding(heap, region_size_words);\n+  }\n+#endif\n+}\n+\n+void SlidingForwarding::begin_impl() {\n@@ -74,1 +85,10 @@\n-void SlidingForwarding::end() {\n+void SlidingForwarding::begin() {\n+#ifdef _LP64\n+  if (UseAltGCForwarding) {\n+    assert(_sliding_forwarding != nullptr, \"expect sliding forwarding initialized\");\n+    _sliding_forwarding->begin_impl();\n+  }\n+#endif\n+}\n+\n+void SlidingForwarding::end_impl() {\n@@ -83,0 +103,9 @@\n+void SlidingForwarding::end() {\n+#ifdef _LP64\n+  if (UseAltGCForwarding) {\n+    assert(_sliding_forwarding != nullptr, \"expect sliding forwarding initialized\");\n+    _sliding_forwarding->end_impl();\n+  }\n+#endif\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/slidingForwarding.cpp","additions":31,"deletions":2,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -117,0 +117,3 @@\n+  \/\/ The singleton instance.\n+  static SlidingForwarding* _sliding_forwarding;\n+\n@@ -133,1 +136,0 @@\n-public:\n@@ -136,0 +138,10 @@\n+  void begin_impl();\n+  void end_impl();\n+  inline void forward_to_impl(oop from, oop to);\n+  inline oop forwardee_impl(oop from) const;\n+public:\n+\n+  static void initialize(MemRegion heap, size_t region_size_words);\n+\n+  static void begin();\n+  static void end();\n@@ -137,2 +149,2 @@\n-  void begin();\n-  void end();\n+  static inline bool is_forwarded(oop obj);\n+  static inline bool is_not_forwarded(oop obj);\n@@ -140,2 +152,2 @@\n-  inline void forward_to(oop from, oop to);\n-  inline oop forwardee(oop from) const;\n+  static inline void forward_to(oop from, oop to);\n+  static inline oop forwardee(oop from);\n","filename":"src\/hotspot\/share\/gc\/shared\/slidingForwarding.hpp","additions":17,"deletions":5,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -35,0 +35,8 @@\n+inline bool SlidingForwarding::is_forwarded(oop obj) {\n+  return obj->is_forwarded();\n+}\n+\n+inline bool SlidingForwarding::is_not_forwarded(oop obj) {\n+  return !obj->is_forwarded();\n+}\n+\n@@ -102,1 +110,1 @@\n-void SlidingForwarding::forward_to(oop from, oop to) {\n+inline void SlidingForwarding::forward_to_impl(oop from, oop to) {\n@@ -121,1 +129,14 @@\n-oop SlidingForwarding::forwardee(oop from) const {\n+inline void SlidingForwarding::forward_to(oop obj, oop fwd) {\n+#ifdef _LP64\n+  if (UseAltGCForwarding) {\n+    assert(_sliding_forwarding != nullptr, \"expect sliding forwarding initialized\");\n+    _sliding_forwarding->forward_to(obj, fwd);\n+    assert(forwardee(obj) == fwd, \"must be forwarded to correct forwardee\");\n+  } else\n+#endif\n+  {\n+    obj->forward_to(fwd);\n+  }\n+}\n+\n+inline oop SlidingForwarding::forwardee_impl(oop from) const {\n@@ -135,0 +156,13 @@\n+inline oop SlidingForwarding::forwardee(oop obj) {\n+#ifdef _LP64\n+  if (UseAltGCForwarding) {\n+    assert(_sliding_forwarding != nullptr, \"expect sliding forwarding initialized\");\n+    return _sliding_forwarding->forwardee(obj);\n+  } else\n+#endif\n+  {\n+    return obj->forwardee();\n+  }\n+}\n+\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/slidingForwarding.inline.hpp","additions":36,"deletions":2,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"gc\/shared\/gcForwarding.inline.hpp\"\n@@ -31,0 +30,1 @@\n+#include \"gc\/shared\/slidingForwarding.inline.hpp\"\n@@ -273,1 +273,1 @@\n-    GCForwarding::forward_to(q, cast_to_oop(compact_top));\n+    SlidingForwarding::forward_to(q, cast_to_oop(compact_top));\n@@ -279,1 +279,1 @@\n-    assert(GCForwarding::is_not_forwarded(q), \"should not be forwarded\");\n+    assert(SlidingForwarding::is_not_forwarded(q), \"should not be forwarded\");\n@@ -439,1 +439,1 @@\n-    if (GCForwarding::is_not_forwarded(cast_to_oop(cur_obj))) {\n+    if (SlidingForwarding::is_not_forwarded(cast_to_oop(cur_obj))) {\n@@ -450,1 +450,1 @@\n-      HeapWord* compaction_top = cast_from_oop<HeapWord*>(GCForwarding::forwardee(cast_to_oop(cur_obj)));\n+      HeapWord* compaction_top = cast_from_oop<HeapWord*>(SlidingForwarding::forwardee(cast_to_oop(cur_obj)));\n","filename":"src\/hotspot\/share\/gc\/shared\/space.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"gc\/shared\/gcForwarding.inline.hpp\"\n@@ -32,0 +31,1 @@\n+#include \"gc\/shared\/slidingForwarding.inline.hpp\"\n@@ -225,1 +225,1 @@\n-    GCForwarding::begin();\n+    SlidingForwarding::begin();\n@@ -240,1 +240,1 @@\n-    GCForwarding::end();\n+    SlidingForwarding::end();\n@@ -370,1 +370,1 @@\n-    GCForwarding::forward_to(p, cast_to_oop(_compact_point));\n+    SlidingForwarding::forward_to(p, cast_to_oop(_compact_point));\n@@ -478,1 +478,1 @@\n-        GCForwarding::forward_to(old_obj, cast_to_oop(heap->get_region(start)->bottom()));\n+        SlidingForwarding::forward_to(old_obj, cast_to_oop(heap->get_region(start)->bottom()));\n@@ -738,2 +738,2 @@\n-      if (GCForwarding::is_forwarded(obj)) {\n-        oop forw = GCForwarding::forwardee(obj);\n+      if (SlidingForwarding::is_forwarded(obj)) {\n+        oop forw = SlidingForwarding::forwardee(obj);\n@@ -849,1 +849,1 @@\n-    if (GCForwarding::is_forwarded(p)) {\n+    if (SlidingForwarding::is_forwarded(p)) {\n@@ -851,1 +851,1 @@\n-      HeapWord* compact_to = cast_from_oop<HeapWord*>(GCForwarding::forwardee(p));\n+      HeapWord* compact_to = cast_from_oop<HeapWord*>(SlidingForwarding::forwardee(p));\n@@ -953,1 +953,1 @@\n-      if (GCForwarding::is_not_forwarded(old_obj)) {\n+      if (SlidingForwarding::is_not_forwarded(old_obj)) {\n@@ -962,1 +962,1 @@\n-      size_t new_start = heap->heap_region_index_containing(GCForwarding::forwardee(old_obj));\n+      size_t new_start = heap->heap_region_index_containing(SlidingForwarding::forwardee(old_obj));\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-#include \"gc\/shared\/gcForwarding.hpp\"\n@@ -37,0 +36,1 @@\n+#include \"gc\/shared\/slidingForwarding.hpp\"\n@@ -408,1 +408,1 @@\n-  GCForwarding::initialize(_heap_region, ShenandoahHeapRegion::region_size_words());\n+  SlidingForwarding::initialize(_heap_region, ShenandoahHeapRegion::region_size_words());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-  SlidingForwarding sf(MemRegion(&heap[0], &heap[16]), 8);\n+  SlidingForwarding::initialize(MemRegion(&heap[0], &heap[16]), 8);\n@@ -48,1 +48,1 @@\n-  sf.begin();\n+  SlidingForwarding::begin();\n@@ -50,1 +50,1 @@\n-  sf.forward_to(obj1, obj2);\n+  SlidingForwarding::forward_to(obj1, obj2);\n@@ -52,1 +52,1 @@\n-  ASSERT_EQ(sf.forwardee(obj1), obj2);\n+  ASSERT_EQ(SlidingForwarding::forwardee(obj1), obj2);\n@@ -54,1 +54,1 @@\n-  sf.end();\n+  SlidingForwarding::end();\n@@ -63,1 +63,1 @@\n-  SlidingForwarding sf(MemRegion(&heap[0], &heap[16]), 8);\n+  SlidingForwarding::initialize(MemRegion(&heap[0], &heap[16]), 8);\n@@ -65,1 +65,1 @@\n-  sf.begin();\n+  SlidingForwarding::begin();\n@@ -67,1 +67,1 @@\n-  sf.forward_to(obj1, obj2);\n+  SlidingForwarding::forward_to(obj1, obj2);\n@@ -69,1 +69,1 @@\n-  ASSERT_EQ(sf.forwardee(obj1), obj2);\n+  ASSERT_EQ(SlidingForwarding::forwardee(obj1), obj2);\n@@ -71,1 +71,1 @@\n-  sf.forward_to(obj1, obj3);\n+  SlidingForwarding::forward_to(obj1, obj3);\n@@ -73,1 +73,1 @@\n-  ASSERT_EQ(sf.forwardee(obj1), obj3);\n+  ASSERT_EQ(SlidingForwarding::forwardee(obj1), obj3);\n@@ -75,1 +75,1 @@\n-  sf.end();\n+  SlidingForwarding::end();\n@@ -86,1 +86,1 @@\n-  SlidingForwarding sf(MemRegion(&heap[0], &heap[16]), 4);\n+  SlidingForwarding::initialize(MemRegion(&heap[0], &heap[16]), 4);\n@@ -88,1 +88,1 @@\n-  sf.begin();\n+  SlidingForwarding::begin();\n@@ -90,1 +90,1 @@\n-  sf.forward_to(obj1, obj2);\n+  SlidingForwarding::forward_to(obj1, obj2);\n@@ -92,1 +92,1 @@\n-  ASSERT_EQ(sf.forwardee(obj1), obj2);\n+  ASSERT_EQ(SlidingForwarding::forwardee(obj1), obj2);\n@@ -94,1 +94,1 @@\n-  sf.forward_to(obj1, obj3);\n+  SlidingForwarding::forward_to(obj1, obj3);\n@@ -96,1 +96,1 @@\n-  ASSERT_EQ(sf.forwardee(obj1), obj3);\n+  ASSERT_EQ(SlidingForwarding::forwardee(obj1), obj3);\n@@ -98,1 +98,1 @@\n-  sf.forward_to(obj1, obj4);\n+  SlidingForwarding::forward_to(obj1, obj4);\n@@ -100,1 +100,1 @@\n-  ASSERT_EQ(sf.forwardee(obj1), obj4);\n+  ASSERT_EQ(SlidingForwarding::forwardee(obj1), obj4);\n@@ -102,1 +102,1 @@\n-  sf.forward_to(obj1, obj5);\n+  SlidingForwarding::forward_to(obj1, obj5);\n@@ -104,1 +104,1 @@\n-  ASSERT_EQ(sf.forwardee(obj1), obj5);\n+  ASSERT_EQ(SlidingForwarding::forwardee(obj1), obj5);\n@@ -106,1 +106,1 @@\n-  sf.end();\n+  SlidingForwarding::end();\n","filename":"test\/hotspot\/gtest\/gc\/shared\/test_slidingForwarding.cpp","additions":23,"deletions":23,"binary":false,"changes":46,"status":"modified"}]}