{"files":[{"patch":"@@ -36,30 +36,8 @@\n-SlidingForwarding* SlidingForwarding::_sliding_forwarding = nullptr;\n-\n-SlidingForwarding::SlidingForwarding(MemRegion heap, size_t region_size_words)\n-  : _heap_start(heap.start()),\n-    _num_regions(align_up(pointer_delta(heap.end(), heap.start()), region_size_words) \/ region_size_words),\n-    _region_size_words(region_size_words),\n-    _region_size_words_shift(log2i_exact(region_size_words)),\n-  _bases_table(nullptr),\n-  _fallback_table(nullptr) {\n-  assert(_region_size_words >= 1, \"regions must be at least a word large\");\n-  assert(_region_size_words <= pointer_delta(heap.end(), heap.start()), \"\");\n-  assert(_region_size_words_shift <= NUM_OFFSET_BITS, \"regions must not be larger than maximum addressing bits allow\");\n-  size_t heap_size_words = heap.end() - heap.start();\n-  if (UseSerialGC && heap_size_words <= (1 << NUM_OFFSET_BITS)) {\n-    \/\/ In this case we can treat the whole heap as a single region and\n-    \/\/ make the encoding very simple.\n-    _num_regions = 1;\n-    _region_size_words = round_up_power_of_2(heap_size_words);\n-    _region_size_words_shift = log2i_exact(_region_size_words);\n-  }\n-}\n-\n-SlidingForwarding::~SlidingForwarding() {\n-  FREE_C_HEAP_ARRAY(region_bases, _bases_table);\n-  _bases_table = nullptr;\n-  delete _fallback_table;\n-  _fallback_table = nullptr;\n-}\n-\n-void SlidingForwarding::initialize(MemRegion heap, size_t region_size_words) {\n+HeapWord* SlidingForwarding::_heap_start = nullptr;\n+uint SlidingForwarding::_num_regions = 0;\n+uint SlidingForwarding::_region_size_words = 0;\n+uint SlidingForwarding::_region_size_words_shift = 0;\n+HeapWord** SlidingForwarding::_bases_table = nullptr;\n+FallbackTable* SlidingForwarding::_fallback_table = nullptr;\n+\n+void SlidingForwarding::initialize(MemRegion heap, uint region_size_words) {\n@@ -68,5 +46,11 @@\n-    assert(_sliding_forwarding == nullptr, \"only call this once\");\n-    _sliding_forwarding = new SlidingForwarding(heap, region_size_words);\n-  }\n-#endif\n-}\n+    _heap_start = heap.start();\n+    _num_regions = align_up(pointer_delta(heap.end(), heap.start()), region_size_words) \/ region_size_words;\n+    _region_size_words = region_size_words;\n+    _region_size_words_shift = log2i_exact(region_size_words);\n+    if (UseSerialGC && heap.word_size() <= (1 << NUM_OFFSET_BITS)) {\n+      \/\/ In this case we can treat the whole heap as a single region and\n+      \/\/ make the encoding very simple.\n+      _num_regions = 1;\n+      _region_size_words = round_up_power_of_2(heap.word_size());\n+      _region_size_words_shift = log2i_exact(_region_size_words);\n+    }\n@@ -74,6 +58,4 @@\n-void SlidingForwarding::begin_impl() {\n-  assert(_bases_table == nullptr, \"Should be uninitialized\");\n-  size_t max = _num_regions * NUM_TARGET_REGIONS;\n-  _bases_table = NEW_C_HEAP_ARRAY(HeapWord*, max, mtGC);\n-  for (size_t i = 0; i < max; i++) {\n-    _bases_table[i] = UNUSED_BASE;\n+    assert(_region_size_words >= 1, \"regions must be at least a word large\");\n+    assert(_region_size_words_shift <= NUM_OFFSET_BITS, \"regions must not be larger than maximum addressing bits allow\");\n+    assert(_bases_table == nullptr, \"should not be initialized yet\");\n+    assert(_fallback_table == nullptr, \"should not be initialized yet\");\n@@ -81,0 +63,1 @@\n+#endif\n@@ -86,2 +69,8 @@\n-    assert(_sliding_forwarding != nullptr, \"expect sliding forwarding initialized\");\n-    _sliding_forwarding->begin_impl();\n+    assert(_bases_table == nullptr, \"should not be initialized yet\");\n+    assert(_fallback_table == nullptr, \"should not be initialized yet\");\n+\n+    uint max = _num_regions * NUM_TARGET_REGIONS;\n+    _bases_table = NEW_C_HEAP_ARRAY(HeapWord*, max, mtGC);\n+    for (uint i = 0; i < max; i++) {\n+      _bases_table[i] = UNUSED_BASE;\n+    }\n@@ -92,9 +81,0 @@\n-void SlidingForwarding::end_impl() {\n-  assert(_bases_table != nullptr, \"Should be initialized\");\n-  FREE_C_HEAP_ARRAY(HeapWord*, _bases_table);\n-  _bases_table = nullptr;\n-\n-  delete _fallback_table;\n-  _fallback_table = nullptr;\n-}\n-\n@@ -104,2 +84,5 @@\n-    assert(_sliding_forwarding != nullptr, \"expect sliding forwarding initialized\");\n-    _sliding_forwarding->end_impl();\n+    assert(_bases_table != nullptr, \"should be initialized\");\n+    FREE_C_HEAP_ARRAY(HeapWord*, _bases_table);\n+    _bases_table = nullptr;\n+    delete _fallback_table;\n+    _fallback_table = nullptr;\n@@ -117,1 +100,1 @@\n-HeapWord* SlidingForwarding::fallback_forwardee(HeapWord* from) const {\n+HeapWord* SlidingForwarding::fallback_forwardee(HeapWord* from) {\n@@ -123,1 +106,1 @@\n-  for (size_t i = 0; i < TABLE_SIZE; i++) {\n+  for (uint i = 0; i < TABLE_SIZE; i++) {\n@@ -131,1 +114,1 @@\n-  for (size_t i = 0; i < TABLE_SIZE; i++) {\n+  for (uint i = 0; i < TABLE_SIZE; i++) {\n@@ -164,1 +147,1 @@\n-    if (entry->_from == from) {\n+    if (entry->_from == from || entry->_from == nullptr) {\n","filename":"src\/hotspot\/share\/gc\/shared\/slidingForwarding.cpp","additions":41,"deletions":58,"binary":false,"changes":99,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-class SlidingForwarding : public CHeapObj<mtGC> {\n+class SlidingForwarding : public AllStatic {\n@@ -115,2 +115,4 @@\n-  \/\/ The singleton instance.\n-  static SlidingForwarding* _sliding_forwarding;\n+  static HeapWord*      _heap_start;\n+  static uint           _num_regions;\n+  static uint           _region_size_words;\n+  static uint           _region_size_words_shift;\n@@ -118,5 +120,2 @@\n-  HeapWord*  const _heap_start;\n-  size_t           _num_regions;\n-  size_t           _region_size_words;\n-  size_t           _region_size_words_shift;\n-  HeapWord**       _bases_table;\n+  static HeapWord**     _bases_table;\n+  static FallbackTable* _fallback_table;\n@@ -124,1 +123,1 @@\n-  FallbackTable*   _fallback_table;\n+  static inline uint region_index_containing(HeapWord* addr);\n@@ -126,1 +125,2 @@\n-  inline size_t region_index_containing(HeapWord* addr) const;\n+  static inline uintptr_t encode_forwarding(HeapWord* from, HeapWord* to);\n+  static inline HeapWord* decode_forwarding(HeapWord* from, uintptr_t encoded);\n@@ -128,2 +128,2 @@\n-  inline uintptr_t encode_forwarding(HeapWord* from, HeapWord* to);\n-  inline HeapWord* decode_forwarding(HeapWord* from, uintptr_t encoded) const;\n+  static void fallback_forward_to(HeapWord* from, HeapWord* to);\n+  static HeapWord* fallback_forwardee(HeapWord* from);\n@@ -131,9 +131,2 @@\n-  void fallback_forward_to(HeapWord* from, HeapWord* to);\n-  HeapWord* fallback_forwardee(HeapWord* from) const;\n-\n-  SlidingForwarding(MemRegion heap, size_t region_size_words);\n-  ~SlidingForwarding();\n-  void begin_impl();\n-  void end_impl();\n-  inline void forward_to_impl(oop from, oop to);\n-  inline oop forwardee_impl(oop from) const;\n+  static inline void forward_to_impl(oop from, oop to);\n+  static inline oop forwardee_impl(oop from);\n@@ -142,1 +135,1 @@\n-  static void initialize(MemRegion heap, size_t region_size_words);\n+  static void initialize(MemRegion heap, uint region_size_words);\n","filename":"src\/hotspot\/share\/gc\/shared\/slidingForwarding.hpp","additions":15,"deletions":22,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -42,2 +42,2 @@\n-size_t SlidingForwarding::region_index_containing(HeapWord* addr) const {\n-  size_t index = pointer_delta(addr, _heap_start) >> _region_size_words_shift;\n+uint SlidingForwarding::region_index_containing(HeapWord* addr) {\n+  uint index = static_cast<uint>(pointer_delta(addr, _heap_start) >> _region_size_words_shift);\n@@ -49,2 +49,2 @@\n-  size_t from_reg_idx = region_index_containing(from);\n-  size_t to_reg_idx = region_index_containing(to);\n+  uint from_reg_idx = region_index_containing(from);\n+  uint to_reg_idx = region_index_containing(to);\n@@ -53,1 +53,1 @@\n-  size_t base_idx = from_reg_idx * NUM_TARGET_REGIONS;\n+  uint base_idx = from_reg_idx * NUM_TARGET_REGIONS;\n@@ -62,1 +62,1 @@\n-    size_t base_idx_alt = base_idx + 1;\n+    uint base_idx_alt = base_idx + 1;\n@@ -76,1 +76,1 @@\n-  size_t offset = pointer_delta(to, to_region_base);\n+  uint offset = pointer_delta(to, to_region_base);\n@@ -78,1 +78,1 @@\n-         \", to: \" PTR_FORMAT \", to_region_base: \" PTR_FORMAT \", offset: \" SIZE_FORMAT,\n+         \", to: \" PTR_FORMAT \", to_region_base: \" PTR_FORMAT \", offset: %u\",\n@@ -89,1 +89,1 @@\n-HeapWord* SlidingForwarding::decode_forwarding(HeapWord* from, uintptr_t encoded) const {\n+HeapWord* SlidingForwarding::decode_forwarding(HeapWord* from, uintptr_t encoded) {\n@@ -92,1 +92,1 @@\n-  size_t alt_region = (encoded >> ALT_REGION_SHIFT) & right_n_bits(ALT_REGION_BITS);\n+  uint alt_region = static_cast<uint>((encoded >> ALT_REGION_SHIFT) & right_n_bits(ALT_REGION_BITS));\n@@ -96,2 +96,2 @@\n-  size_t from_idx = region_index_containing(from) * NUM_TARGET_REGIONS;\n-  size_t base_idx = from_idx + alt_region;\n+  uint from_idx = region_index_containing(from) * NUM_TARGET_REGIONS;\n+  uint base_idx = from_idx + alt_region;\n@@ -103,1 +103,1 @@\n-         \"Address must be above heap start. encoded: \" INTPTR_FORMAT \", alt_region: \" SIZE_FORMAT \", base: \" PTR_FORMAT,\n+         \"Address must be above heap start. encoded: \" INTPTR_FORMAT \", alt_region: %u, base: \" PTR_FORMAT,\n@@ -131,2 +131,2 @@\n-    assert(_sliding_forwarding != nullptr, \"expect sliding forwarding initialized\");\n-    _sliding_forwarding->forward_to_impl(obj, fwd);\n+    assert(_bases_table != nullptr, \"expect sliding forwarding initialized\");\n+    forward_to_impl(obj, fwd);\n@@ -141,1 +141,1 @@\n-inline oop SlidingForwarding::forwardee_impl(oop from) const {\n+inline oop SlidingForwarding::forwardee_impl(oop from) {\n@@ -158,2 +158,2 @@\n-    assert(_sliding_forwarding != nullptr, \"expect sliding forwarding initialized\");\n-    return _sliding_forwarding->forwardee_impl(obj);\n+    assert(_bases_table != nullptr, \"expect sliding forwarding initialized\");\n+    return forwardee_impl(obj);\n","filename":"src\/hotspot\/share\/gc\/shared\/slidingForwarding.inline.hpp","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"}]}