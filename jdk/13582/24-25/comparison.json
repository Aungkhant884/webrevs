{"files":[{"patch":"@@ -698,1 +698,1 @@\n-  product(bool, UseAltGCForwarding, false, EXPERIMENTAL,                    \\\n+  develop(bool, UseAltGCForwarding, false,                                  \\\n","filename":"src\/hotspot\/share\/gc\/shared\/gc_globals.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,2 +37,2 @@\n-uint SlidingForwarding::_num_regions = 0;\n-uint SlidingForwarding::_region_size_words = 0;\n+size_t SlidingForwarding::_num_regions = 0;\n+size_t SlidingForwarding::_region_size_words = 0;\n@@ -43,1 +43,1 @@\n-void SlidingForwarding::initialize(MemRegion heap, uint region_size_words) {\n+void SlidingForwarding::initialize(MemRegion heap, size_t region_size_words) {\n@@ -72,1 +72,1 @@\n-    uint max = _num_regions * NUM_TARGET_REGIONS;\n+    size_t max = _num_regions * NUM_TARGET_REGIONS;\n@@ -74,1 +74,1 @@\n-    for (uint i = 0; i < max; i++) {\n+    for (size_t i = 0; i < max; i++) {\n@@ -124,1 +124,1 @@\n-uint FallbackTable::home_index(HeapWord* from) {\n+size_t FallbackTable::home_index(HeapWord* from) {\n@@ -135,2 +135,2 @@\n-  uint idx = static_cast<uint>(val);\n-  assert(idx < TABLE_SIZE, \"must fit in table: idx: %u, table-size: %u, table-size-bits: %d\",\n+  size_t idx = static_cast<size_t>(val);\n+  assert(idx < TABLE_SIZE, \"must fit in table: idx: \" SIZE_FORMAT \", table-size: %u, table-size-bits: %d\",\n@@ -142,1 +142,1 @@\n-  uint idx = home_index(from);\n+  size_t idx = home_index(from);\n@@ -165,1 +165,1 @@\n-  uint idx = home_index(from);\n+  size_t idx = home_index(from);\n","filename":"src\/hotspot\/share\/gc\/shared\/slidingForwarding.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -116,2 +116,2 @@\n-  static uint           _num_regions;\n-  static uint           _region_size_words;\n+  static size_t         _num_regions;\n+  static size_t         _region_size_words;\n@@ -123,1 +123,1 @@\n-  static inline uint region_index_containing(HeapWord* addr);\n+  static inline size_t region_index_containing(HeapWord* addr);\n@@ -135,1 +135,1 @@\n-  static void initialize(MemRegion heap, uint region_size_words);\n+  static void initialize(MemRegion heap, size_t region_size_words);\n@@ -170,1 +170,1 @@\n-  static uint home_index(HeapWord* from);\n+  static size_t home_index(HeapWord* from);\n","filename":"src\/hotspot\/share\/gc\/shared\/slidingForwarding.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -42,2 +42,2 @@\n-uint SlidingForwarding::region_index_containing(HeapWord* addr) {\n-  uint index = static_cast<uint>(pointer_delta(addr, _heap_start) >> _region_size_words_shift);\n+size_t SlidingForwarding::region_index_containing(HeapWord* addr) {\n+  size_t index = pointer_delta(addr, _heap_start) >> _region_size_words_shift;\n@@ -49,2 +49,2 @@\n-  uint from_reg_idx = region_index_containing(from);\n-  uint to_reg_idx = region_index_containing(to);\n+  size_t from_reg_idx = region_index_containing(from);\n+  size_t to_reg_idx = region_index_containing(to);\n@@ -53,1 +53,1 @@\n-  uint base_idx = from_reg_idx * NUM_TARGET_REGIONS;\n+  size_t base_idx = from_reg_idx * NUM_TARGET_REGIONS;\n@@ -55,2 +55,4 @@\n-  bool alt_region = false;\n-  if (_bases_table[base_idx] == UNUSED_BASE) {\n+  uintptr_t alt_region = 0;\n+  if (_bases_table[base_idx] == to_region_base) {\n+    \/\/ Primary is good\n+  } else if (_bases_table[base_idx] == UNUSED_BASE) {\n@@ -59,2 +61,0 @@\n-  } else if (_bases_table[base_idx] == to_region_base) {\n-    \/\/ Primary is good\n@@ -62,2 +62,4 @@\n-    uint base_idx_alt = base_idx + 1;\n-    if (_bases_table[base_idx_alt] == UNUSED_BASE) {\n+    size_t base_idx_alt = base_idx + 1;\n+    if (_bases_table[base_idx_alt] == to_region_base) {\n+      \/\/ Alternate is good\n+    } else if (_bases_table[base_idx_alt] == UNUSED_BASE) {\n@@ -66,2 +68,0 @@\n-    } else if (_bases_table[base_idx_alt] == to_region_base) {\n-      \/\/ Alternate is good\n@@ -73,1 +73,1 @@\n-    alt_region = true;\n+    alt_region = 1;\n@@ -76,1 +76,1 @@\n-  uint offset = static_cast<uint>(pointer_delta(to, to_region_base));\n+  size_t offset = pointer_delta(to, to_region_base);\n@@ -78,1 +78,1 @@\n-         \", to: \" PTR_FORMAT \", to_region_base: \" PTR_FORMAT \", offset: %u\",\n+         \", to: \" PTR_FORMAT \", to_region_base: \" PTR_FORMAT \", offset: \" SIZE_FORMAT,\n@@ -92,1 +92,1 @@\n-  uint alt_region = static_cast<uint>((encoded >> ALT_REGION_SHIFT) & right_n_bits(ALT_REGION_BITS));\n+  size_t alt_region = (encoded >> ALT_REGION_SHIFT) & right_n_bits(ALT_REGION_BITS);\n@@ -96,2 +96,2 @@\n-  uint from_idx = region_index_containing(from) * NUM_TARGET_REGIONS;\n-  uint base_idx = from_idx + alt_region;\n+  size_t from_idx = region_index_containing(from) * NUM_TARGET_REGIONS;\n+  size_t base_idx = from_idx + alt_region;\n@@ -103,1 +103,1 @@\n-         \"Address must be above heap start. encoded: \" INTPTR_FORMAT \", alt_region: %u, base: \" PTR_FORMAT,\n+         \"Address must be above heap start. encoded: \" INTPTR_FORMAT \", alt_region: \" SIZE_FORMAT \", base: \" PTR_FORMAT,\n","filename":"src\/hotspot\/share\/gc\/shared\/slidingForwarding.inline.hpp","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"}]}