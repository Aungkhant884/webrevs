{"files":[{"patch":"@@ -35,1 +35,1 @@\n-#include \"gc\/shared\/gcForwarding.hpp\"\n+#include \"gc\/shared\/gcForwarding.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCPrepareTask.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+  {\n@@ -49,0 +50,1 @@\n+  }\n@@ -59,0 +61,1 @@\n+  {\n@@ -60,0 +63,1 @@\n+  }\n","filename":"src\/hotspot\/share\/gc\/shared\/gcForwarding.inline.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -698,1 +698,1 @@\n-  product(bool, UseAltGCForwarding, false, EXPERIMENTAL,                \\\n+  product(bool, UseAltGCForwarding, false, EXPERIMENTAL,                    \\\n","filename":"src\/hotspot\/share\/gc\/shared\/gc_globals.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,0 +55,1 @@\n+    _target_base_table = nullptr;\n@@ -58,0 +59,1 @@\n+    _fallback_table = nullptr;\n@@ -63,1 +65,0 @@\n-  _target_base_table = NEW_C_HEAP_ARRAY(HeapWord*, _num_regions * NUM_TARGET_REGIONS, mtGC);\n@@ -65,0 +66,1 @@\n+  _target_base_table = NEW_C_HEAP_ARRAY(HeapWord*, max, mtGC);\n@@ -89,5 +91,2 @@\n-  if (_fallback_table == nullptr) {\n-    return nullptr;\n-  } else {\n-    return _fallback_table->forwardee(from);\n-  }\n+  assert(_fallback_table != nullptr, \"fallback table must be present\");\n+  return _fallback_table->forwardee(from);\n@@ -117,0 +116,2 @@\n+  \/\/ This is the mxm mixer (a variant of split mixer) from:\n+  \/\/ https:\/\/jonkagstrom.com\/bit-mixer-construction\/\n@@ -120,0 +121,2 @@\n+  \/\/ Finally put this through a 'fibonacci hash' to clamp to width.\n+  \/\/ https:\/\/probablydance.com\/2018\/06\/16\/fibonacci-hashing-the-optimization-that-the-world-forgot-or-a-better-alternative-to-integer-modulo\/\n@@ -121,1 +124,2 @@\n-  assert(val < TABLE_SIZE, \"must fit in table: val: \" UINT64_FORMAT \", table-size: \" UINTX_FORMAT \", table-size-bits: %d\", val, TABLE_SIZE, log2i_exact(TABLE_SIZE));\n+  assert(val < TABLE_SIZE, \"must fit in table: val: \" UINT64_FORMAT \", table-size: \" UINTX_FORMAT \", table-size-bits: %d\",\n+         val, TABLE_SIZE, log2i_exact(TABLE_SIZE));\n@@ -133,0 +137,2 @@\n+  } else {\n+    assert(_table[idx]._next == nullptr, \"next-link should be null here\");\n","filename":"src\/hotspot\/share\/gc\/shared\/slidingForwarding.cpp","additions":13,"deletions":7,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-  FallbackTable* _fallback_table;\n+  FallbackTable*   _fallback_table;\n@@ -135,1 +135,1 @@\n- * This is used in the case of G1 serial compactio, which violates the\n+ * This is used in the case of G1 serial compaction, which violates the\n","filename":"src\/hotspot\/share\/gc\/shared\/slidingForwarding.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,2 +36,1 @@\n-  assert(addr >= _heap_start, \"sanity: addr: \" PTR_FORMAT \" heap base: \" PTR_FORMAT, p2i(addr), p2i(_heap_start));\n-  size_t index = ((size_t) (addr - _heap_start)) >> _region_size_words_shift;\n+  size_t index = pointer_delta(addr, _heap_start) >> _region_size_words_shift;\n@@ -43,1 +42,1 @@\n-  return uintptr_t(addr - region_base) < (1ull << _region_size_words_shift);\n+  return pointer_delta(addr, region_base) < (1ull << _region_size_words_shift);\n@@ -46,1 +45,0 @@\n-\n@@ -56,1 +54,2 @@\n-      encode_base = _heap_start + target_idx * (1ull << _region_size_words_shift);\n+      size_t region_size = 1ull << _region_size_words_shift;\n+      encode_base = _heap_start + target_idx * region_size;\n@@ -64,1 +63,1 @@\n-    assert(G1GC_ONLY(UseG1GC) NOT_G1GC(false), \"Only happens with G1 serial compaction\");\n+    assert(UseG1GC, \"Only happens with G1 serial compaction\");\n@@ -68,1 +67,2 @@\n-  assert(target >= encode_base, \"target must be above encode base, target:\" PTR_FORMAT \", encoded_base: \" PTR_FORMAT \",  target_idx: \" SIZE_FORMAT \", heap start: \" PTR_FORMAT \", region_idx: \" INTPTR_FORMAT,\n+  assert(target >= encode_base, \"target must be above encode base, target:\" PTR_FORMAT \", encoded_base: \" PTR_FORMAT\n+         \",  target_idx: \" SIZE_FORMAT \", heap start: \" PTR_FORMAT \", region_idx: \" INTPTR_FORMAT,\n@@ -70,2 +70,4 @@\n-  assert(region_contains(encode_base, target), \"region must contain target: original: \" PTR_FORMAT \", target: \" PTR_FORMAT \", encode_base: \" PTR_FORMAT \", region_idx: \" INTPTR_FORMAT, p2i(original), p2i(target), p2i(encode_base), region_idx);\n-  uintptr_t encoded = (((uintptr_t)(target - encode_base)) << COMPRESSED_BITS_SHIFT) |\n+  assert(region_contains(encode_base, target), \"region must contain target: original: \" PTR_FORMAT\n+         \", target: \" PTR_FORMAT \", encode_base: \" PTR_FORMAT \", region_idx: \" INTPTR_FORMAT,\n+         p2i(original), p2i(target), p2i(encode_base), region_idx);\n+  uintptr_t encoded = (pointer_delta(target, encode_base) << COMPRESSED_BITS_SHIFT) |\n@@ -83,1 +85,2 @@\n-  assert(decoded >= _heap_start, \"must be above heap start, encoded: \" INTPTR_FORMAT \", region_idx: \" SIZE_FORMAT \", base: \" PTR_FORMAT, encoded, region_idx, p2i(_target_base_table[base_table_idx]));\n+  assert(decoded >= _heap_start, \"must be above heap start, encoded: \" INTPTR_FORMAT \", region_idx: \" SIZE_FORMAT \", base: \" PTR_FORMAT,\n+         encoded, region_idx, p2i(_target_base_table[base_table_idx]));\n@@ -100,1 +103,0 @@\n-    return;\n@@ -107,0 +109,1 @@\n+  HeapWord* from = cast_from_oop<HeapWord*>(original);\n@@ -108,1 +111,0 @@\n-    HeapWord* from = cast_from_oop<HeapWord*>(original);\n@@ -113,1 +115,1 @@\n-  HeapWord* forwardee = decode_forwarding(cast_from_oop<HeapWord*>(original), encoded);\n+  HeapWord* forwardee = decode_forwarding(from, encoded);\n","filename":"src\/hotspot\/share\/gc\/shared\/slidingForwarding.inline.hpp","additions":15,"deletions":13,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"gc\/shared\/genCollectedHeap.hpp\"\n@@ -31,0 +30,1 @@\n+#include \"gc\/shared\/genCollectedHeap.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/space.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,0 +33,8 @@\n+static uintptr_t make_mark(uintptr_t target_region, uintptr_t offset) {\n+  return (target_region) << 3 | (offset << 4) | 3 \/* forwarded *\/;\n+}\n+\n+static uintptr_t make_fallback() {\n+  return ((uintptr_t(1) << 2) \/* fallback *\/ | 3 \/* forwarded *\/);\n+}\n+\n@@ -43,1 +51,1 @@\n-  ASSERT_EQ(obj1->mark().value(), uintptr_t(3));\n+  ASSERT_EQ(obj1->mark().value(), make_mark(0 \/* target_region *\/, 0 \/* offset *\/));\n@@ -60,1 +68,1 @@\n-  ASSERT_EQ(obj1->mark().value(), uintptr_t((2 << 4) | 3));\n+  ASSERT_EQ(obj1->mark().value(), make_mark(0 \/* target_region *\/, 2 \/* offset *\/));\n@@ -64,1 +72,1 @@\n-  ASSERT_EQ(obj1->mark().value(), uintptr_t((2 << 4) | (1 << 3) | 3));\n+  ASSERT_EQ(obj1->mark().value(), make_mark(1 \/* target_region *\/, 2 \/* offset *\/));\n@@ -83,1 +91,1 @@\n-  ASSERT_EQ(obj1->mark().value(), uintptr_t((2 << 4) | 3));\n+  ASSERT_EQ(obj1->mark().value(), make_mark(0 \/* target_region *\/, 2 \/* offset *\/));\n@@ -87,1 +95,1 @@\n-  ASSERT_EQ(obj1->mark().value(), uintptr_t((1 << 3) | 3));\n+  ASSERT_EQ(obj1->mark().value(), make_mark(1 \/* target_region *\/, 0 \/* offset *\/));\n@@ -91,1 +99,1 @@\n-  ASSERT_EQ(obj1->mark().value(), uintptr_t((1 << 2) | 3));\n+  ASSERT_EQ(obj1->mark().value(), make_fallback());\n@@ -95,1 +103,1 @@\n-  ASSERT_EQ(obj1->mark().value(), uintptr_t((1 << 2) | 3));\n+  ASSERT_EQ(obj1->mark().value(), make_fallback());\n","filename":"test\/hotspot\/gtest\/gc\/shared\/test_slidingForwarding.cpp","additions":15,"deletions":7,"binary":false,"changes":22,"status":"modified"}]}