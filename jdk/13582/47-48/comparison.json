{"files":[{"patch":"@@ -33,1 +33,0 @@\n-#include \"gc\/g1\/g1FullGCCompactionPoint.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n@@ -59,0 +59,13 @@\n+ public:\n+  G1AdjustRegionClosure(G1FullCollector* collector, uint worker_id) :\n+    _collector(collector),\n+    _bitmap(collector->mark_bitmap()),\n+    _worker_id(worker_id) { }\n+\n+  bool do_heap_region(HeapRegion* r) {\n+    if (UseAltGCForwarding) {\n+      return do_heap_region_impl<true>(r);\n+    } else {\n+      return do_heap_region_impl<false>(r);\n+    }\n+  }\n@@ -60,1 +73,2 @@\n-  template<bool ALT_FWD>\n+private:\n+  template <bool ALT_FWD>\n@@ -75,14 +89,0 @@\n-\n- public:\n-  G1AdjustRegionClosure(G1FullCollector* collector, uint worker_id) :\n-    _collector(collector),\n-    _bitmap(collector->mark_bitmap()),\n-    _worker_id(worker_id) { }\n-\n-  bool do_heap_region(HeapRegion* r) {\n-    if (UseAltGCForwarding) {\n-      return do_heap_region_impl<true>(r);\n-    } else {\n-      return do_heap_region_impl<false>(r);\n-    }\n-  }\n@@ -99,1 +99,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCAdjustTask.cpp","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-  template<bool ALT_FWD>\n+  template <bool ALT_FWD>\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCAdjustTask.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n@@ -44,1 +44,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n@@ -57,1 +57,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n@@ -116,1 +116,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n@@ -133,1 +133,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactTask.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-  template<bool ALT_FWD>\n+  template <bool ALT_FWD>\n@@ -48,1 +48,1 @@\n-  template<bool ALT_FWD>\n+  template <bool ALT_FWD>\n@@ -51,1 +51,1 @@\n-  template<bool ALT_FWD>\n+  template <bool ALT_FWD>\n@@ -65,1 +65,1 @@\n-  template<bool ALT_FWD>\n+  template <bool ALT_FWD>\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactTask.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"gc\/shared\/slidingForwarding.inline.hpp\"\n@@ -95,0 +96,25 @@\n+template<bool ALT_FWD>\n+void G1FullGCCompactionPoint::forward(oop object, size_t size) {\n+  assert(_current_region != nullptr, \"Must have been initialized\");\n+\n+  \/\/ Ensure the object fit in the current region.\n+  while (!object_will_fit(size)) {\n+    switch_region();\n+  }\n+\n+  \/\/ Store a forwarding pointer if the object should be moved.\n+  if (cast_from_oop<HeapWord*>(object) != _compaction_top) {\n+    SlidingForwarding::forward_to<ALT_FWD>(object, cast_to_oop(_compaction_top));\n+    assert(SlidingForwarding::is_forwarded(object), \"must be forwarded\");\n+  } else {\n+    assert(SlidingForwarding::is_not_forwarded(object), \"must not be forwarded\");\n+  }\n+\n+  \/\/ Update compaction values.\n+  _compaction_top += size;\n+  _current_region->update_bot_for_block(_compaction_top - size, _compaction_top);\n+}\n+\n+template void G1FullGCCompactionPoint::forward<true>(oop object, size_t size);\n+template void G1FullGCCompactionPoint::forward<false>(oop object, size_t size);\n+\n@@ -127,0 +153,39 @@\n+template<bool ALT_FWD>\n+uint G1FullGCCompactionPoint::forward_humongous(HeapRegion* hr) {\n+  assert(hr->is_starts_humongous(), \"Sanity!\");\n+\n+  oop obj = cast_to_oop(hr->bottom());\n+  size_t obj_size = obj->size();\n+  uint num_regions = (uint)G1CollectedHeap::humongous_obj_size_in_regions(obj_size);\n+\n+  if (!has_regions()) {\n+    return num_regions;\n+  }\n+\n+  \/\/ Find contiguous compaction target regions for the humongous object.\n+  uint range_begin = find_contiguous_before(hr, num_regions);\n+\n+  if (range_begin == UINT_MAX) {\n+    \/\/ No contiguous compaction target regions found, so the object cannot be moved.\n+    return num_regions;\n+  }\n+\n+  \/\/ Preserve the mark for the humongous object as the region was initially not compacting.\n+  _collector->marker(0)->preserved_stack()->push_if_necessary(obj, obj->mark());\n+\n+  HeapRegion* dest_hr = _compaction_regions->at(range_begin);\n+  SlidingForwarding::forward_to<ALT_FWD>(obj, cast_to_oop(dest_hr->bottom()));\n+  assert(SlidingForwarding::is_forwarded(obj), \"Object must be forwarded!\");\n+\n+  \/\/ Add the humongous object regions to the compaction point.\n+  add_humongous(hr);\n+\n+  \/\/ Remove covered regions from compaction target candidates.\n+  _compaction_regions->remove_range(range_begin, (range_begin + num_regions));\n+\n+  return num_regions;\n+}\n+\n+template uint G1FullGCCompactionPoint::forward_humongous<true>(HeapRegion* hr);\n+template uint G1FullGCCompactionPoint::forward_humongous<false>(HeapRegion* hr);\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactionPoint.cpp","additions":65,"deletions":0,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -57,4 +57,4 @@\n-  template<bool ALT_FWD>\n-  inline void forward(oop object, size_t size);\n-  template<bool ALT_FWD>\n-  inline uint forward_humongous(HeapRegion* hr);\n+  template <bool ALT_FWD>\n+  void forward(oop object, size_t size);\n+  template <bool ALT_FWD>\n+  uint forward_humongous(HeapRegion* hr);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactionPoint.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1,91 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_GC_G1_G1FULLGCCOMPACTIONPOINT_INLINE_HPP\n-#define SHARE_GC_G1_G1FULLGCCOMPACTIONPOINT_INLINE_HPP\n-\n-#include \"gc\/g1\/g1FullGCCompactionPoint.hpp\"\n-#include \"gc\/g1\/heapRegion.hpp\"\n-#include \"gc\/shared\/slidingForwarding.inline.hpp\"\n-#include \"oops\/oop.inline.hpp\"\n-\n-template<bool ALT_FWD>\n-void G1FullGCCompactionPoint::forward(oop object, size_t size) {\n-  assert(_current_region != nullptr, \"Must have been initialized\");\n-\n-  \/\/ Ensure the object fit in the current region.\n-  while (!object_will_fit(size)) {\n-    switch_region();\n-  }\n-\n-  \/\/ Store a forwarding pointer if the object should be moved.\n-  if (cast_from_oop<HeapWord*>(object) != _compaction_top) {\n-    SlidingForwarding::forward_to<ALT_FWD>(object, cast_to_oop(_compaction_top));\n-    assert(SlidingForwarding::is_forwarded(object), \"must be forwarded\");\n-  } else {\n-    assert(SlidingForwarding::is_not_forwarded(object), \"must not be forwarded\");\n-  }\n-\n-  \/\/ Update compaction values.\n-  _compaction_top += size;\n-  _current_region->update_bot_for_block(_compaction_top - size, _compaction_top);\n-}\n-\n-template<bool ALT_FWD>\n-uint G1FullGCCompactionPoint::forward_humongous(HeapRegion* hr) {\n-  assert(hr->is_starts_humongous(), \"Sanity!\");\n-\n-  oop obj = cast_to_oop(hr->bottom());\n-  size_t obj_size = obj->size();\n-  uint num_regions = (uint)G1CollectedHeap::humongous_obj_size_in_regions(obj_size);\n-\n-  if (!has_regions()) {\n-    return num_regions;\n-  }\n-\n-  \/\/ Find contiguous compaction target regions for the humongous object.\n-  uint range_begin = find_contiguous_before(hr, num_regions);\n-\n-  if (range_begin == UINT_MAX) {\n-    \/\/ No contiguous compaction target regions found, so the object cannot be moved.\n-    return num_regions;\n-  }\n-\n-  \/\/ Preserve the mark for the humongous object as the region was initially not compacting.\n-  _collector->marker(0)->preserved_stack()->push_if_necessary(obj, obj->mark());\n-\n-  HeapRegion* dest_hr = _compaction_regions->at(range_begin);\n-  SlidingForwarding::forward_to<ALT_FWD>(obj, cast_to_oop(dest_hr->bottom()));\n-  assert(SlidingForwarding::is_forwarded(obj), \"Object must be forwarded!\");\n-\n-  \/\/ Add the humongous object regions to the compaction point.\n-  add_humongous(hr);\n-\n-  \/\/ Remove covered regions from compaction target candidates.\n-  _compaction_regions->remove_range(range_begin, (range_begin + num_regions));\n-\n-  return num_regions;\n-}\n-\n-#endif \/\/ SHARE_GC_G1_G1FULLGCCOMPACTIONPOINT_INLINE_HPP\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactionPoint.inline.hpp","additions":0,"deletions":91,"binary":false,"changes":91,"status":"deleted"},{"patch":"@@ -76,1 +76,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCOopClosures.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n@@ -79,1 +79,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n@@ -81,1 +81,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCOopClosures.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"gc\/g1\/g1FullGCCompactionPoint.inline.hpp\"\n+#include \"gc\/g1\/g1FullGCCompactionPoint.hpp\"\n@@ -107,1 +107,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n@@ -111,1 +111,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCPrepareTask.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-  template<bool ALT_FWD>\n+  template <bool ALT_FWD>\n@@ -104,1 +104,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCPrepareTask.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -194,1 +194,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n","filename":"src\/hotspot\/share\/gc\/serial\/markSweep.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -141,2 +141,2 @@\n-  template<bool ALT_FWD>\n-  static inline size_t adjust_pointers(oop obj);\n+  template <bool ALT_FWD>\n+  static size_t adjust_pointers(oop obj);\n@@ -147,1 +147,1 @@\n-  static inline void adjust_pointer(T* p);\n+  static void adjust_pointer(T* p);\n@@ -152,1 +152,1 @@\n-private:\n+ private:\n@@ -183,1 +183,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n","filename":"src\/hotspot\/share\/gc\/serial\/markSweep.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n","filename":"src\/hotspot\/share\/gc\/shared\/preservedMarks.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-  template<bool ALT_FWD>\n+  template <bool ALT_FWD>\n@@ -71,1 +71,1 @@\n-  template<bool ALT_FWD>\n+  template <bool ALT_FWD>\n","filename":"src\/hotspot\/share\/gc\/shared\/preservedMarks.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -175,1 +175,1 @@\n-  template<bool ALT_FWD>\n+  template <bool ALT_FWD>\n@@ -177,1 +177,1 @@\n-  template<bool ALT_FWD>\n+  template <bool ALT_FWD>\n","filename":"src\/hotspot\/share\/gc\/shared\/slidingForwarding.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -130,1 +130,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n@@ -158,1 +158,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n","filename":"src\/hotspot\/share\/gc\/shared\/slidingForwarding.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -248,1 +248,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n@@ -293,1 +293,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n@@ -382,1 +382,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n@@ -428,1 +428,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n","filename":"src\/hotspot\/share\/gc\/shared\/space.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -315,1 +315,1 @@\n-  template<bool ALT_FWD>\n+  template <bool ALT_FWD>\n@@ -318,1 +318,1 @@\n-  template<bool ALT_FWD>\n+  template <bool ALT_FWD>\n@@ -321,1 +321,1 @@\n-  template<bool ALT_FWD>\n+  template <bool ALT_FWD>\n@@ -412,1 +412,1 @@\n-  template<bool ALT_FWD>\n+  template <bool ALT_FWD>\n","filename":"src\/hotspot\/share\/gc\/shared\/space.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -302,1 +302,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n@@ -382,1 +382,29 @@\n-  template<bool ALT_FWD>\n+public:\n+  ShenandoahPrepareForCompactionTask(PreservedMarksSet *preserved_marks, ShenandoahHeapRegionSet **worker_slices) :\n+    WorkerTask(\"Shenandoah Prepare For Compaction\"),\n+    _preserved_marks(preserved_marks),\n+    _heap(ShenandoahHeap::heap()), _worker_slices(worker_slices) {\n+  }\n+\n+  static bool is_candidate_region(ShenandoahHeapRegion* r) {\n+    \/\/ Empty region: get it into the slice to defragment the slice itself.\n+    \/\/ We could have skipped this without violating correctness, but we really\n+    \/\/ want to compact all live regions to the start of the heap, which sometimes\n+    \/\/ means moving them into the fully empty regions.\n+    if (r->is_empty()) return true;\n+\n+    \/\/ Can move the region, and this is not the humongous region. Humongous\n+    \/\/ moves are special cased here, because their moves are handled separately.\n+    return r->is_stw_move_allowed() && !r->is_humongous();\n+  }\n+\n+  void work(uint worker_id) {\n+    if (UseAltGCForwarding) {\n+      work_impl<true>(worker_id);\n+    } else {\n+      work_impl<false>(worker_id);\n+    }\n+  }\n+\n+private:\n+  template <bool ALT_FWD>\n@@ -423,27 +451,0 @@\n-\n-public:\n-  ShenandoahPrepareForCompactionTask(PreservedMarksSet *preserved_marks, ShenandoahHeapRegionSet **worker_slices) :\n-    WorkerTask(\"Shenandoah Prepare For Compaction\"),\n-    _preserved_marks(preserved_marks),\n-    _heap(ShenandoahHeap::heap()), _worker_slices(worker_slices) {\n-  }\n-\n-  static bool is_candidate_region(ShenandoahHeapRegion* r) {\n-    \/\/ Empty region: get it into the slice to defragment the slice itself.\n-    \/\/ We could have skipped this without violating correctness, but we really\n-    \/\/ want to compact all live regions to the start of the heap, which sometimes\n-    \/\/ means moving them into the fully empty regions.\n-    if (r->is_empty()) return true;\n-\n-    \/\/ Can move the region, and this is not the humongous region. Humongous\n-    \/\/ moves are special cased here, because their moves are handled separately.\n-    return r->is_stw_move_allowed() && !r->is_humongous();\n-  }\n-\n-  void work(uint worker_id) {\n-    if (UseAltGCForwarding) {\n-      work_impl<true>(worker_id);\n-    } else {\n-      work_impl<false>(worker_id);\n-    }\n-  }\n@@ -452,1 +453,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n@@ -746,1 +747,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n@@ -776,1 +777,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n@@ -797,1 +798,8 @@\n-  template<bool ALT_FWD>\n+public:\n+  ShenandoahAdjustPointersTask() :\n+    WorkerTask(\"Shenandoah Adjust Pointers\"),\n+    _heap(ShenandoahHeap::heap()) {\n+  }\n+\n+private:\n+  template <bool ALT_FWD>\n@@ -809,5 +817,0 @@\n-public:\n-  ShenandoahAdjustPointersTask() :\n-    WorkerTask(\"Shenandoah Adjust Pointers\"),\n-    _heap(ShenandoahHeap::heap()) {\n-  }\n@@ -815,0 +818,1 @@\n+public:\n@@ -829,1 +833,8 @@\n-  template<bool ALT_FWD>\n+public:\n+  ShenandoahAdjustRootPointersTask(ShenandoahRootAdjuster* rp, PreservedMarksSet* preserved_marks) :\n+    WorkerTask(\"Shenandoah Adjust Root Pointers\"),\n+    _rp(rp),\n+    _preserved_marks(preserved_marks) {}\n+\n+private:\n+  template <bool ALT_FWD>\n@@ -838,5 +849,0 @@\n-  ShenandoahAdjustRootPointersTask(ShenandoahRootAdjuster* rp, PreservedMarksSet* preserved_marks) :\n-    WorkerTask(\"Shenandoah Adjust Root Pointers\"),\n-    _rp(rp),\n-    _preserved_marks(preserved_marks) {}\n-\n@@ -876,1 +882,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n@@ -906,1 +912,9 @@\n-  template<bool ALT_FWD>\n+public:\n+  ShenandoahCompactObjectsTask(ShenandoahHeapRegionSet** worker_slices) :\n+    WorkerTask(\"Shenandoah Compact Objects\"),\n+    _heap(ShenandoahHeap::heap()),\n+    _worker_slices(worker_slices) {\n+  }\n+\n+private:\n+  template <bool ALT_FWD>\n@@ -924,6 +938,0 @@\n-  ShenandoahCompactObjectsTask(ShenandoahHeapRegionSet** worker_slices) :\n-    WorkerTask(\"Shenandoah Compact Objects\"),\n-    _heap(ShenandoahHeap::heap()),\n-    _worker_slices(worker_slices) {\n-  }\n-\n@@ -989,1 +997,1 @@\n-template<bool ALT_FWD>\n+template <bool ALT_FWD>\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp","additions":61,"deletions":53,"binary":false,"changes":114,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-  template<bool ALT_FWD>\n+  template <bool ALT_FWD>\n@@ -87,1 +87,1 @@\n-  template<bool ALT_FWD>\n+  template <bool ALT_FWD>\n@@ -90,1 +90,1 @@\n-  template<bool ALT_FWD>\n+  template <bool ALT_FWD>\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}