{"files":[{"patch":"@@ -33,0 +33,1 @@\n+#include \"gc\/g1\/g1FullGCCompactionPoint.inline.hpp\"\n@@ -402,1 +403,2 @@\n-void G1FullCollector::phase2c_prepare_serial_compaction() {\n+template<bool ALT_FWD>\n+void G1FullCollector::phase2c_prepare_serial_compaction_impl() {\n@@ -427,1 +429,1 @@\n-  G1SerialRePrepareClosure re_prepare(serial_cp, dense_prefix_top);\n+  G1SerialRePrepareClosure<ALT_FWD> re_prepare(serial_cp, dense_prefix_top);\n@@ -440,1 +442,10 @@\n-void G1FullCollector::phase2d_prepare_humongous_compaction() {\n+void G1FullCollector::phase2c_prepare_serial_compaction() {\n+  if (UseAltGCForwarding) {\n+    phase2c_prepare_serial_compaction_impl<true>();\n+  } else {\n+    phase2c_prepare_serial_compaction_impl<false>();\n+  }\n+}\n+\n+template<bool ALT_FWD>\n+void G1FullCollector::phase2d_prepare_humongous_compaction_impl() {\n@@ -458,1 +469,1 @@\n-      uint num_regions = humongous_cp->forward_humongous(hr);\n+      uint num_regions = humongous_cp->forward_humongous<ALT_FWD>(hr);\n@@ -469,0 +480,8 @@\n+void G1FullCollector::phase2d_prepare_humongous_compaction() {\n+  if (UseAltGCForwarding) {\n+    phase2d_prepare_humongous_compaction_impl<true>();\n+  } else {\n+    phase2d_prepare_humongous_compaction_impl<false>();\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.cpp","additions":23,"deletions":4,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -161,0 +161,2 @@\n+  template<bool ALT_FWD>\n+  void phase2c_prepare_serial_compaction_impl();\n@@ -162,0 +164,2 @@\n+  template<bool ALT_FWD>\n+  void phase2d_prepare_humongous_compaction_impl();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+template<bool ALT_FWD>\n@@ -44,1 +45,1 @@\n-  G1AdjustClosure* _adjust_closure;\n+  G1AdjustClosure<ALT_FWD>* _adjust_closure;\n@@ -46,1 +47,1 @@\n-  G1AdjustLiveClosure(G1AdjustClosure* cl) :\n+  G1AdjustLiveClosure(G1AdjustClosure<ALT_FWD>* cl) :\n@@ -58,5 +59,0 @@\n- public:\n-  G1AdjustRegionClosure(G1FullCollector* collector, uint worker_id) :\n-    _collector(collector),\n-    _bitmap(collector->mark_bitmap()),\n-    _worker_id(worker_id) { }\n@@ -64,2 +60,3 @@\n-  bool do_heap_region(HeapRegion* r) {\n-    G1AdjustClosure cl(_collector);\n+  template<bool ALT_FWD>\n+  bool do_heap_region_impl(HeapRegion* r) {\n+    G1AdjustClosure<ALT_FWD> cl(_collector);\n@@ -73,1 +70,1 @@\n-      G1AdjustLiveClosure adjust(&cl);\n+      G1AdjustLiveClosure<ALT_FWD> adjust(&cl);\n@@ -78,0 +75,14 @@\n+\n+ public:\n+  G1AdjustRegionClosure(G1FullCollector* collector, uint worker_id) :\n+    _collector(collector),\n+    _bitmap(collector->mark_bitmap()),\n+    _worker_id(worker_id) { }\n+\n+  bool do_heap_region(HeapRegion* r) {\n+    if (UseAltGCForwarding) {\n+      return do_heap_region_impl<true>(r);\n+    } else {\n+      return do_heap_region_impl<false>(r);\n+    }\n+  }\n@@ -84,2 +95,1 @@\n-    _hrclaimer(collector->workers()),\n-    _adjust(collector) {\n+    _hrclaimer(collector->workers()) {\n@@ -89,1 +99,2 @@\n-void G1FullGCAdjustTask::work(uint worker_id) {\n+template<bool ALT_FWD>\n+void G1FullGCAdjustTask::work_impl(uint worker_id) {\n@@ -97,0 +108,1 @@\n+  G1AdjustClosure<ALT_FWD> adjust(collector());\n@@ -100,1 +112,1 @@\n-    _weak_proc_task.work(worker_id, &always_alive, &_adjust);\n+    _weak_proc_task.work(worker_id, &always_alive, &adjust);\n@@ -103,3 +115,3 @@\n-  CLDToOopClosure adjust_cld(&_adjust, ClassLoaderData::_claim_stw_fullgc_adjust);\n-  CodeBlobToOopClosure adjust_code(&_adjust, CodeBlobToOopClosure::FixRelocations);\n-  _root_processor.process_all_roots(&_adjust, &adjust_cld, &adjust_code);\n+  CLDToOopClosure adjust_cld(&adjust, ClassLoaderData::_claim_stw_fullgc_adjust);\n+  CodeBlobToOopClosure adjust_code(&adjust, CodeBlobToOopClosure::FixRelocations);\n+  _root_processor.process_all_roots(&adjust, &adjust_cld, &adjust_code);\n@@ -112,0 +124,8 @@\n+\n+void G1FullGCAdjustTask::work(uint worker_id) {\n+  if (UseAltGCForwarding) {\n+    work_impl<true>(worker_id);\n+  } else {\n+    work_impl<false>(worker_id);\n+  }\n+}\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCAdjustTask.cpp","additions":37,"deletions":17,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-  G1AdjustClosure          _adjust;\n@@ -43,0 +42,2 @@\n+  template<bool ALT_FWD>\n+  void work_impl(uint worker_id);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCAdjustTask.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -38,1 +38,2 @@\n-void G1FullGCCompactTask::G1CompactRegionClosure::clear_in_bitmap(oop obj) {\n+template<bool ALT_FWD>\n+void G1FullGCCompactTask::G1CompactRegionClosure<ALT_FWD>::clear_in_bitmap(oop obj) {\n@@ -43,1 +44,2 @@\n-size_t G1FullGCCompactTask::G1CompactRegionClosure::apply(oop obj) {\n+template<bool ALT_FWD>\n+size_t G1FullGCCompactTask::G1CompactRegionClosure<ALT_FWD>::apply(oop obj) {\n@@ -46,1 +48,1 @@\n-    G1FullGCCompactTask::copy_object_to_new_location(obj);\n+    G1FullGCCompactTask::copy_object_to_new_location<ALT_FWD>(obj);\n@@ -55,0 +57,1 @@\n+template<bool ALT_FWD>\n@@ -57,1 +60,1 @@\n-  assert(SlidingForwarding::forwardee(obj) != obj, \"Object must have a new location\");\n+  assert(SlidingForwarding::forwardee<ALT_FWD>(obj) != obj, \"Object must have a new location\");\n@@ -62,1 +65,1 @@\n-  HeapWord* destination = cast_from_oop<HeapWord*>(SlidingForwarding::forwardee(obj));\n+  HeapWord* destination = cast_from_oop<HeapWord*>(SlidingForwarding::forwardee<ALT_FWD>(obj));\n@@ -81,2 +84,7 @@\n-    G1CompactRegionClosure compact(collector()->mark_bitmap());\n-    hr->apply_to_marked_objects(collector()->mark_bitmap(), &compact);\n+    if (UseAltGCForwarding) {\n+      G1CompactRegionClosure<true> compact(collector()->mark_bitmap());\n+      hr->apply_to_marked_objects(collector()->mark_bitmap(), &compact);\n+    } else {\n+      G1CompactRegionClosure<false> compact(collector()->mark_bitmap());\n+      hr->apply_to_marked_objects(collector()->mark_bitmap(), &compact);\n+    }\n@@ -108,3 +116,2 @@\n-void G1FullGCCompactTask::humongous_compaction() {\n-  GCTraceTime(Debug, gc, phases) tm(\"Phase 4: Humonguous Compaction\", collector()->scope()->timer());\n-\n+template<bool ALT_FWD>\n+void G1FullGCCompactTask::humongous_compaction_impl() {\n@@ -113,1 +120,10 @@\n-    compact_humongous_obj(hr);\n+    compact_humongous_obj<ALT_FWD>(hr);\n+  }\n+}\n+\n+void G1FullGCCompactTask::humongous_compaction() {\n+  GCTraceTime(Debug, gc, phases) tm(\"Phase 4: Humonguous Compaction\", collector()->scope()->timer());\n+  if (UseAltGCForwarding) {\n+    humongous_compaction_impl<true>();\n+  } else {\n+    humongous_compaction_impl<false>();\n@@ -117,0 +133,1 @@\n+template<bool ALT_FWD>\n@@ -124,1 +141,1 @@\n-  HeapWord* destination = cast_from_oop<HeapWord*>(SlidingForwarding::forwardee(obj));\n+  HeapWord* destination = cast_from_oop<HeapWord*>(SlidingForwarding::forwardee<ALT_FWD>(obj));\n@@ -129,1 +146,1 @@\n-  copy_object_to_new_location(obj);\n+  copy_object_to_new_location<ALT_FWD>(obj);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactTask.cpp","additions":30,"deletions":13,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+  template<bool ALT_FWD>\n@@ -47,0 +48,1 @@\n+  template<bool ALT_FWD>\n@@ -49,0 +51,3 @@\n+  template<bool ALT_FWD>\n+  void humongous_compaction_impl();\n+\n@@ -60,0 +65,1 @@\n+  template<bool ALT_FWD>\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactTask.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"gc\/shared\/slidingForwarding.inline.hpp\"\n@@ -96,21 +95,0 @@\n-void G1FullGCCompactionPoint::forward(oop object, size_t size) {\n-  assert(_current_region != nullptr, \"Must have been initialized\");\n-\n-  \/\/ Ensure the object fit in the current region.\n-  while (!object_will_fit(size)) {\n-    switch_region();\n-  }\n-\n-  \/\/ Store a forwarding pointer if the object should be moved.\n-  if (cast_from_oop<HeapWord*>(object) != _compaction_top) {\n-    SlidingForwarding::forward_to(object, cast_to_oop(_compaction_top));\n-    assert(SlidingForwarding::is_forwarded(object), \"must be forwarded\");\n-  } else {\n-    assert(SlidingForwarding::is_not_forwarded(object), \"must not be forwarded\");\n-  }\n-\n-  \/\/ Update compaction values.\n-  _compaction_top += size;\n-  _current_region->update_bot_for_block(_compaction_top - size, _compaction_top);\n-}\n-\n@@ -149,35 +127,0 @@\n-uint G1FullGCCompactionPoint::forward_humongous(HeapRegion* hr) {\n-  assert(hr->is_starts_humongous(), \"Sanity!\");\n-\n-  oop obj = cast_to_oop(hr->bottom());\n-  size_t obj_size = obj->size();\n-  uint num_regions = (uint)G1CollectedHeap::humongous_obj_size_in_regions(obj_size);\n-\n-  if (!has_regions()) {\n-    return num_regions;\n-  }\n-\n-  \/\/ Find contiguous compaction target regions for the humongous object.\n-  uint range_begin = find_contiguous_before(hr, num_regions);\n-\n-  if (range_begin == UINT_MAX) {\n-    \/\/ No contiguous compaction target regions found, so the object cannot be moved.\n-    return num_regions;\n-  }\n-\n-  \/\/ Preserve the mark for the humongous object as the region was initially not compacting.\n-  _collector->marker(0)->preserved_stack()->push_if_necessary(obj, obj->mark());\n-\n-  HeapRegion* dest_hr = _compaction_regions->at(range_begin);\n-  SlidingForwarding::forward_to(obj, cast_to_oop(dest_hr->bottom()));\n-  assert(SlidingForwarding::is_forwarded(obj), \"Object must be forwarded!\");\n-\n-  \/\/ Add the humongous object regions to the compaction point.\n-  add_humongous(hr);\n-\n-  \/\/ Remove covered regions from compaction target candidates.\n-  _compaction_regions->remove_range(range_begin, (range_begin + num_regions));\n-\n-  return num_regions;\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactionPoint.cpp","additions":0,"deletions":57,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -57,2 +57,4 @@\n-  void forward(oop object, size_t size);\n-  uint forward_humongous(HeapRegion* hr);\n+  template<bool ALT_FWD>\n+  inline void forward(oop object, size_t size);\n+  template<bool ALT_FWD>\n+  inline uint forward_humongous(HeapRegion* hr);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactionPoint.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_GC_G1_G1FULLGCCOMPACTIONPOINT_INLINE_HPP\n+#define SHARE_GC_G1_G1FULLGCCOMPACTIONPOINT_INLINE_HPP\n+\n+#include \"gc\/g1\/g1FullGCCompactionPoint.hpp\"\n+#include \"gc\/g1\/heapRegion.hpp\"\n+#include \"gc\/shared\/slidingForwarding.inline.hpp\"\n+#include \"oops\/oop.inline.hpp\"\n+\n+template<bool ALT_FWD>\n+void G1FullGCCompactionPoint::forward(oop object, size_t size) {\n+  assert(_current_region != nullptr, \"Must have been initialized\");\n+\n+  \/\/ Ensure the object fit in the current region.\n+  while (!object_will_fit(size)) {\n+    switch_region();\n+  }\n+\n+  \/\/ Store a forwarding pointer if the object should be moved.\n+  if (cast_from_oop<HeapWord*>(object) != _compaction_top) {\n+    SlidingForwarding::forward_to<ALT_FWD>(object, cast_to_oop(_compaction_top));\n+    assert(SlidingForwarding::is_forwarded(object), \"must be forwarded\");\n+  } else {\n+    assert(SlidingForwarding::is_not_forwarded(object), \"must not be forwarded\");\n+  }\n+\n+  \/\/ Update compaction values.\n+  _compaction_top += size;\n+  _current_region->update_bot_for_block(_compaction_top - size, _compaction_top);\n+}\n+\n+template<bool ALT_FWD>\n+uint G1FullGCCompactionPoint::forward_humongous(HeapRegion* hr) {\n+  assert(hr->is_starts_humongous(), \"Sanity!\");\n+\n+  oop obj = cast_to_oop(hr->bottom());\n+  size_t obj_size = obj->size();\n+  uint num_regions = (uint)G1CollectedHeap::humongous_obj_size_in_regions(obj_size);\n+\n+  if (!has_regions()) {\n+    return num_regions;\n+  }\n+\n+  \/\/ Find contiguous compaction target regions for the humongous object.\n+  uint range_begin = find_contiguous_before(hr, num_regions);\n+\n+  if (range_begin == UINT_MAX) {\n+    \/\/ No contiguous compaction target regions found, so the object cannot be moved.\n+    return num_regions;\n+  }\n+\n+  \/\/ Preserve the mark for the humongous object as the region was initially not compacting.\n+  _collector->marker(0)->preserved_stack()->push_if_necessary(obj, obj->mark());\n+\n+  HeapRegion* dest_hr = _compaction_regions->at(range_begin);\n+  SlidingForwarding::forward_to<ALT_FWD>(obj, cast_to_oop(dest_hr->bottom()));\n+  assert(SlidingForwarding::is_forwarded(obj), \"Object must be forwarded!\");\n+\n+  \/\/ Add the humongous object regions to the compaction point.\n+  add_humongous(hr);\n+\n+  \/\/ Remove covered regions from compaction target candidates.\n+  _compaction_regions->remove_range(range_begin, (range_begin + num_regions));\n+\n+  return num_regions;\n+}\n+\n+#endif \/\/ SHARE_GC_G1_G1FULLGCCOMPACTIONPOINT_INLINE_HPP\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactionPoint.inline.hpp","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"},{"patch":"@@ -76,0 +76,1 @@\n+template<bool ALT_FWD>\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCOopClosures.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -55,1 +55,2 @@\n-template <class T> inline void G1AdjustClosure::adjust_pointer(T* p) {\n+template<bool ALT_FWD>\n+template <class T> inline void G1AdjustClosure<ALT_FWD>::adjust_pointer(T* p) {\n@@ -70,1 +71,1 @@\n-    oop forwardee = SlidingForwarding::forwardee(obj);\n+    oop forwardee = SlidingForwarding::forwardee<ALT_FWD>(obj);\n@@ -78,2 +79,4 @@\n-inline void G1AdjustClosure::do_oop(oop* p)       { do_oop_work(p); }\n-inline void G1AdjustClosure::do_oop(narrowOop* p) { do_oop_work(p); }\n+template<bool ALT_FWD>\n+inline void G1AdjustClosure<ALT_FWD>::do_oop(oop* p)       { do_oop_work(p); }\n+template<bool ALT_FWD>\n+inline void G1AdjustClosure<ALT_FWD>::do_oop(narrowOop* p) { do_oop_work(p); }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCOopClosures.inline.hpp","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"gc\/g1\/g1FullGCCompactionPoint.hpp\"\n+#include \"gc\/g1\/g1FullGCCompactionPoint.inline.hpp\"\n@@ -107,1 +107,2 @@\n-G1FullGCPrepareTask::G1PrepareCompactLiveClosure::G1PrepareCompactLiveClosure(G1FullGCCompactionPoint* cp) :\n+template<bool ALT_FWD>\n+G1FullGCPrepareTask::G1PrepareCompactLiveClosure<ALT_FWD>::G1PrepareCompactLiveClosure(G1FullGCCompactionPoint* cp) :\n@@ -110,1 +111,2 @@\n-size_t G1FullGCPrepareTask::G1PrepareCompactLiveClosure::apply(oop object) {\n+template<bool ALT_FWD>\n+size_t G1FullGCPrepareTask::G1PrepareCompactLiveClosure<ALT_FWD>::apply(oop object) {\n@@ -112,1 +114,1 @@\n-  _cp->forward(object, size);\n+  _cp->forward<ALT_FWD>(object, size);\n@@ -118,2 +120,7 @@\n-    G1PrepareCompactLiveClosure prepare_compact(_cp);\n-    hr->apply_to_marked_objects(_bitmap, &prepare_compact);\n+    if (UseAltGCForwarding) {\n+      G1PrepareCompactLiveClosure<true> prepare_compact(_cp);\n+      hr->apply_to_marked_objects(_bitmap, &prepare_compact);\n+    } else {\n+      G1PrepareCompactLiveClosure<false> prepare_compact(_cp);\n+      hr->apply_to_marked_objects(_bitmap, &prepare_compact);\n+    }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCPrepareTask.cpp","additions":13,"deletions":6,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -92,0 +92,1 @@\n+  template<bool ALT_FWD>\n@@ -103,0 +104,1 @@\n+template<bool ALT_FWD>\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCPrepareTask.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -105,1 +105,2 @@\n-inline size_t G1SerialRePrepareClosure::apply(oop obj) {\n+template<bool ALT_FWD>\n+inline size_t G1SerialRePrepareClosure<ALT_FWD>::apply(oop obj) {\n@@ -109,1 +110,1 @@\n-    if (cast_from_oop<HeapWord*>(SlidingForwarding::forwardee(obj)) < _dense_prefix_top) {\n+    if (cast_from_oop<HeapWord*>(SlidingForwarding::forwardee<ALT_FWD>(obj)) < _dense_prefix_top) {\n@@ -116,1 +117,1 @@\n-  _cp->forward(obj, size);\n+  _cp->forward<ALT_FWD>(obj, size);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCPrepareTask.inline.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -247,9 +247,21 @@\n-  CodeBlobToOopClosure code_closure(&adjust_pointer_closure, CodeBlobToOopClosure::FixRelocations);\n-  gch->process_roots(GenCollectedHeap::SO_AllCodeCache,\n-                     &adjust_pointer_closure,\n-                     &adjust_cld_closure,\n-                     &adjust_cld_closure,\n-                     &code_closure);\n-\n-  gch->gen_process_weak_roots(&adjust_pointer_closure);\n-\n+  if (UseAltGCForwarding) {\n+    AdjustPointerClosure<true> adjust_pointer_closure;\n+    CLDToOopClosure adjust_cld_closure(&adjust_pointer_closure, ClassLoaderData::_claim_stw_fullgc_adjust);\n+    CodeBlobToOopClosure code_closure(&adjust_pointer_closure, CodeBlobToOopClosure::FixRelocations);\n+    gch->process_roots(GenCollectedHeap::SO_AllCodeCache,\n+                       &adjust_pointer_closure,\n+                       &adjust_cld_closure,\n+                       &adjust_cld_closure,\n+                       &code_closure);\n+    gch->gen_process_weak_roots(&adjust_pointer_closure);\n+  } else {\n+    AdjustPointerClosure<false> adjust_pointer_closure;\n+    CLDToOopClosure adjust_cld_closure(&adjust_pointer_closure, ClassLoaderData::_claim_stw_fullgc_adjust);\n+    CodeBlobToOopClosure code_closure(&adjust_pointer_closure, CodeBlobToOopClosure::FixRelocations);\n+    gch->process_roots(GenCollectedHeap::SO_AllCodeCache,\n+                       &adjust_pointer_closure,\n+                       &adjust_cld_closure,\n+                       &adjust_cld_closure,\n+                       &code_closure);\n+    gch->gen_process_weak_roots(&adjust_pointer_closure);\n+  }\n","filename":"src\/hotspot\/share\/gc\/serial\/genMarkSweep.cpp","additions":21,"deletions":9,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -63,1 +63,0 @@\n-CLDToOopClosure    MarkSweep::adjust_cld_closure(&adjust_pointer_closure, ClassLoaderData::_claim_stw_fullgc_adjust);\n@@ -145,0 +144,1 @@\n+template<bool ALT_FWD>\n@@ -146,1 +146,1 @@\n-  MarkSweep::adjust_pointer(&_obj);\n+  MarkSweep::adjust_pointer<ALT_FWD>(&_obj);\n@@ -203,2 +203,1 @@\n-AdjustPointerClosure MarkSweep::adjust_pointer_closure;\n-\n+template<bool ALT_FWD>\n@@ -208,1 +207,1 @@\n-    _preserved_marks[i].adjust_pointer();\n+    _preserved_marks[i].adjust_pointer<ALT_FWD>();\n@@ -215,1 +214,9 @@\n-    p->adjust_pointer();\n+    p->adjust_pointer<ALT_FWD>();\n+  }\n+}\n+\n+void MarkSweep::adjust_marks() {\n+  if (UseAltGCForwarding) {\n+    adjust_marks<true>();\n+  } else {\n+    adjust_marks<false>();\n","filename":"src\/hotspot\/share\/gc\/serial\/markSweep.cpp","additions":13,"deletions":6,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -53,1 +53,0 @@\n-class AdjustPointerClosure;\n@@ -87,1 +86,0 @@\n-  friend class AdjustPointerClosure;\n@@ -127,2 +125,0 @@\n-  static AdjustPointerClosure adjust_pointer_closure;\n-  static CLDToOopClosure      adjust_cld_closure;\n@@ -148,1 +144,2 @@\n-  template <class T> static inline void adjust_pointer(T* p);\n+  template <bool ALT_FWD, class T>\n+  static inline void adjust_pointer(T* p);\n@@ -153,1 +150,4 @@\n- private:\n+  template <bool ALT_FWD>\n+  static void adjust_marks();\n+\n+private:\n@@ -181,0 +181,1 @@\n+template<bool ALT_FWD>\n@@ -196,0 +197,1 @@\n+  template<bool ALT_FWD>\n","filename":"src\/hotspot\/share\/gc\/serial\/markSweep.hpp","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -43,1 +43,2 @@\n-template <class T> inline void MarkSweep::adjust_pointer(T* p) {\n+template <bool ALT_FWD, class T>\n+inline void MarkSweep::adjust_pointer(T* p) {\n@@ -50,1 +51,1 @@\n-      oop new_obj = SlidingForwarding::forwardee(obj);\n+      oop new_obj = SlidingForwarding::forwardee<ALT_FWD>(obj);\n@@ -57,0 +58,1 @@\n+template <bool ALT_FWD>\n@@ -58,3 +60,7 @@\n-void AdjustPointerClosure::do_oop_work(T* p)           { MarkSweep::adjust_pointer(p); }\n-inline void AdjustPointerClosure::do_oop(oop* p)       { do_oop_work(p); }\n-inline void AdjustPointerClosure::do_oop(narrowOop* p) { do_oop_work(p); }\n+void AdjustPointerClosure<ALT_FWD>::do_oop_work(T* p)           { MarkSweep::adjust_pointer<ALT_FWD>(p); }\n+\n+template <bool ALT_FWD>\n+inline void AdjustPointerClosure<ALT_FWD>::do_oop(oop* p)       { do_oop_work(p); }\n+\n+template <bool ALT_FWD>\n+inline void AdjustPointerClosure<ALT_FWD>::do_oop(narrowOop* p) { do_oop_work(p); }\n@@ -63,1 +69,7 @@\n-  return obj->oop_iterate_size(&MarkSweep::adjust_pointer_closure);\n+  if (UseAltGCForwarding) {\n+    AdjustPointerClosure<true> adjust_pointer_closure;\n+    return obj->oop_iterate_size(&adjust_pointer_closure);\n+  } else {\n+    AdjustPointerClosure<false> adjust_pointer_closure;\n+    return obj->oop_iterate_size(&adjust_pointer_closure);\n+  }\n","filename":"src\/hotspot\/share\/gc\/serial\/markSweep.inline.hpp","additions":18,"deletions":6,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -44,1 +44,2 @@\n-void PreservedMarks::adjust_during_full_gc() {\n+template<bool ALT_FWD>\n+void PreservedMarks::adjust_during_full_gc_impl() {\n@@ -51,1 +52,1 @@\n-      elem->set_oop(SlidingForwarding::forwardee(obj));\n+      elem->set_oop(SlidingForwarding::forwardee<ALT_FWD>(obj));\n@@ -56,0 +57,8 @@\n+void PreservedMarks::adjust_during_full_gc() {\n+  if (UseAltGCForwarding) {\n+    adjust_during_full_gc_impl<true>();\n+  } else {\n+    adjust_during_full_gc_impl<false>();\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/preservedMarks.cpp","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -57,0 +57,3 @@\n+  template<bool ALT_FWD>\n+  void adjust_during_full_gc_impl();\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/preservedMarks.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -175,0 +175,1 @@\n+  template<bool ALT_FWD>\n@@ -176,0 +177,1 @@\n+  template<bool ALT_FWD>\n","filename":"src\/hotspot\/share\/gc\/shared\/slidingForwarding.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -130,0 +130,1 @@\n+template<bool ALT_FWD>\n@@ -132,1 +133,1 @@\n-  if (UseAltGCForwarding) {\n+  if (ALT_FWD) {\n@@ -135,1 +136,1 @@\n-    assert(forwardee(obj) == fwd, \"must be forwarded to correct forwardee\");\n+    assert(forwardee<ALT_FWD>(obj) == fwd, \"must be forwarded to correct forwardee\");\n@@ -157,0 +158,1 @@\n+template<bool ALT_FWD>\n@@ -159,1 +161,1 @@\n-  if (UseAltGCForwarding) {\n+  if (ALT_FWD) {\n","filename":"src\/hotspot\/share\/gc\/shared\/slidingForwarding.inline.hpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -248,1 +248,1 @@\n-\n+template<bool ALT_FWD>\n@@ -273,1 +273,1 @@\n-    SlidingForwarding::forward_to(q, cast_to_oop(compact_top));\n+    SlidingForwarding::forward_to<ALT_FWD>(q, cast_to_oop(compact_top));\n@@ -293,1 +293,2 @@\n-void ContiguousSpace::prepare_for_compaction(CompactPoint* cp) {\n+template<bool ALT_FWD>\n+void ContiguousSpace::prepare_for_compaction_impl(CompactPoint* cp) {\n@@ -326,1 +327,1 @@\n-      compact_top = cp->space->forward(cast_to_oop(cur_obj), size, cp, compact_top);\n+      compact_top = cp->space->forward<ALT_FWD>(cast_to_oop(cur_obj), size, cp, compact_top);\n@@ -342,1 +343,1 @@\n-        compact_top = cp->space->forward(obj, obj->size(), cp, compact_top);\n+        compact_top = cp->space->forward<ALT_FWD>(obj, obj->size(), cp, compact_top);\n@@ -373,0 +374,8 @@\n+void ContiguousSpace::prepare_for_compaction(CompactPoint* cp) {\n+  if (UseAltGCForwarding) {\n+    prepare_for_compaction_impl<true>(cp);\n+  } else {\n+    prepare_for_compaction_impl<false>(cp);\n+  }\n+}\n+\n@@ -410,1 +419,2 @@\n-void ContiguousSpace::compact() {\n+template<bool ALT_FWD>\n+void ContiguousSpace::compact_impl() {\n@@ -450,1 +460,1 @@\n-      HeapWord* compaction_top = cast_from_oop<HeapWord*>(SlidingForwarding::forwardee(cast_to_oop(cur_obj)));\n+      HeapWord* compaction_top = cast_from_oop<HeapWord*>(SlidingForwarding::forwardee<ALT_FWD>(cast_to_oop(cur_obj)));\n@@ -473,0 +483,8 @@\n+void ContiguousSpace::compact() {\n+  if (UseAltGCForwarding) {\n+    compact_impl<true>();\n+  } else {\n+    compact_impl<false>();\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/space.cpp","additions":25,"deletions":7,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -314,1 +314,7 @@\n- protected:\n+  template<bool ALT_FWD>\n+  void prepare_for_compaction_impl(CompactPoint* cp);\n+\n+  template<bool ALT_FWD>\n+  void compact_impl();\n+\n+protected:\n@@ -401,1 +407,2 @@\n-  virtual HeapWord* forward(oop q, size_t size, CompactPoint* cp,\n+  template<bool ALT_FWD>\n+  HeapWord* forward(oop q, size_t size, CompactPoint* cp,\n","filename":"src\/hotspot\/share\/gc\/shared\/space.hpp","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -186,1 +186,0 @@\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/space.inline.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -302,0 +302,1 @@\n+template<bool ALT_FWD>\n@@ -370,1 +371,1 @@\n-    SlidingForwarding::forward_to(p, cast_to_oop(_compact_point));\n+    SlidingForwarding::forward_to<ALT_FWD>(p, cast_to_oop(_compact_point));\n@@ -381,20 +382,2 @@\n-public:\n-  ShenandoahPrepareForCompactionTask(PreservedMarksSet *preserved_marks, ShenandoahHeapRegionSet **worker_slices) :\n-    WorkerTask(\"Shenandoah Prepare For Compaction\"),\n-    _preserved_marks(preserved_marks),\n-    _heap(ShenandoahHeap::heap()), _worker_slices(worker_slices) {\n-  }\n-\n-  static bool is_candidate_region(ShenandoahHeapRegion* r) {\n-    \/\/ Empty region: get it into the slice to defragment the slice itself.\n-    \/\/ We could have skipped this without violating correctness, but we really\n-    \/\/ want to compact all live regions to the start of the heap, which sometimes\n-    \/\/ means moving them into the fully empty regions.\n-    if (r->is_empty()) return true;\n-\n-    \/\/ Can move the region, and this is not the humongous region. Humongous\n-    \/\/ moves are special cased here, because their moves are handled separately.\n-    return r->is_stw_move_allowed() && !r->is_humongous();\n-  }\n-\n-  void work(uint worker_id) {\n+  template<bool ALT_FWD>\n+  void work_impl(uint worker_id) {\n@@ -416,1 +399,1 @@\n-    ShenandoahPrepareForCompactionObjectClosure cl(_preserved_marks->get(worker_id), empty_regions, from_region);\n+    ShenandoahPrepareForCompactionObjectClosure<ALT_FWD> cl(_preserved_marks->get(worker_id), empty_regions, from_region);\n@@ -440,0 +423,27 @@\n+\n+public:\n+  ShenandoahPrepareForCompactionTask(PreservedMarksSet *preserved_marks, ShenandoahHeapRegionSet **worker_slices) :\n+    WorkerTask(\"Shenandoah Prepare For Compaction\"),\n+    _preserved_marks(preserved_marks),\n+    _heap(ShenandoahHeap::heap()), _worker_slices(worker_slices) {\n+  }\n+\n+  static bool is_candidate_region(ShenandoahHeapRegion* r) {\n+    \/\/ Empty region: get it into the slice to defragment the slice itself.\n+    \/\/ We could have skipped this without violating correctness, but we really\n+    \/\/ want to compact all live regions to the start of the heap, which sometimes\n+    \/\/ means moving them into the fully empty regions.\n+    if (r->is_empty()) return true;\n+\n+    \/\/ Can move the region, and this is not the humongous region. Humongous\n+    \/\/ moves are special cased here, because their moves are handled separately.\n+    return r->is_stw_move_allowed() && !r->is_humongous();\n+  }\n+\n+  void work(uint worker_id) {\n+    if (UseAltGCForwarding) {\n+      work_impl<true>(worker_id);\n+    } else {\n+      work_impl<false>(worker_id);\n+    }\n+  }\n@@ -442,1 +452,2 @@\n-void ShenandoahFullGC::calculate_target_humongous_objects() {\n+template<bool ALT_FWD>\n+void ShenandoahFullGC::calculate_target_humongous_objects_impl() {\n@@ -478,1 +489,1 @@\n-        SlidingForwarding::forward_to(old_obj, cast_to_oop(heap->get_region(start)->bottom()));\n+        SlidingForwarding::forward_to<ALT_FWD>(old_obj, cast_to_oop(heap->get_region(start)->bottom()));\n@@ -490,0 +501,8 @@\n+void ShenandoahFullGC::calculate_target_humongous_objects() {\n+  if (UseAltGCForwarding) {\n+    calculate_target_humongous_objects_impl<true>();\n+  } else {\n+    calculate_target_humongous_objects_impl<false>();\n+  }\n+}\n+\n@@ -727,0 +746,1 @@\n+template<bool ALT_FWD>\n@@ -739,1 +759,1 @@\n-        oop forw = SlidingForwarding::forwardee(obj);\n+        oop forw = SlidingForwarding::forwardee<ALT_FWD>(obj);\n@@ -756,0 +776,1 @@\n+template<bool ALT_FWD>\n@@ -759,1 +780,1 @@\n-  ShenandoahAdjustPointersClosure _cl;\n+  ShenandoahAdjustPointersClosure<ALT_FWD> _cl;\n@@ -776,7 +797,2 @@\n-public:\n-  ShenandoahAdjustPointersTask() :\n-    WorkerTask(\"Shenandoah Adjust Pointers\"),\n-    _heap(ShenandoahHeap::heap()) {\n-  }\n-\n-  void work(uint worker_id) {\n+  template<bool ALT_FWD>\n+  void work_impl(uint worker_id) {\n@@ -784,1 +800,1 @@\n-    ShenandoahAdjustPointersObjectClosure obj_cl;\n+    ShenandoahAdjustPointersObjectClosure<ALT_FWD> obj_cl;\n@@ -793,0 +809,13 @@\n+public:\n+  ShenandoahAdjustPointersTask() :\n+    WorkerTask(\"Shenandoah Adjust Pointers\"),\n+    _heap(ShenandoahHeap::heap()) {\n+  }\n+\n+  void work(uint worker_id) {\n+    if (UseAltGCForwarding) {\n+      work_impl<true>(worker_id);\n+    } else {\n+      work_impl<false>(worker_id);\n+    }\n+  }\n@@ -799,0 +828,9 @@\n+\n+  template<bool ALT_FWD>\n+  void work_impl(uint worker_id) {\n+    ShenandoahParallelWorkerSession worker_session(worker_id);\n+    ShenandoahAdjustPointersClosure<ALT_FWD> cl;\n+    _rp->roots_do(worker_id, &cl);\n+    _preserved_marks->get(worker_id)->adjust_during_full_gc();\n+  }\n+\n@@ -806,4 +844,5 @@\n-    ShenandoahParallelWorkerSession worker_session(worker_id);\n-    ShenandoahAdjustPointersClosure cl;\n-    _rp->roots_do(worker_id, &cl);\n-    _preserved_marks->get(worker_id)->adjust_during_full_gc();\n+    if (UseAltGCForwarding) {\n+      work_impl<true>(worker_id);\n+    } else {\n+      work_impl<false>(worker_id);\n+    }\n@@ -837,0 +876,1 @@\n+template<bool ALT_FWD>\n@@ -851,1 +891,1 @@\n-      HeapWord* compact_to = cast_from_oop<HeapWord*>(SlidingForwarding::forwardee(p));\n+      HeapWord* compact_to = cast_from_oop<HeapWord*>(SlidingForwarding::forwardee<ALT_FWD>(p));\n@@ -866,8 +906,2 @@\n-public:\n-  ShenandoahCompactObjectsTask(ShenandoahHeapRegionSet** worker_slices) :\n-    WorkerTask(\"Shenandoah Compact Objects\"),\n-    _heap(ShenandoahHeap::heap()),\n-    _worker_slices(worker_slices) {\n-  }\n-\n-  void work(uint worker_id) {\n+  template<bool ALT_FWD>\n+  void work_impl(uint worker_id) {\n@@ -877,1 +911,1 @@\n-    ShenandoahCompactObjectsClosure cl(worker_id);\n+    ShenandoahCompactObjectsClosure<ALT_FWD> cl(worker_id);\n@@ -888,0 +922,15 @@\n+\n+public:\n+  ShenandoahCompactObjectsTask(ShenandoahHeapRegionSet** worker_slices) :\n+    WorkerTask(\"Shenandoah Compact Objects\"),\n+    _heap(ShenandoahHeap::heap()),\n+    _worker_slices(worker_slices) {\n+  }\n+\n+  void work(uint worker_id) {\n+    if (UseAltGCForwarding) {\n+      work_impl<true>(worker_id);\n+    } else {\n+      work_impl<false>(worker_id);\n+    }\n+  }\n@@ -940,1 +989,2 @@\n-void ShenandoahFullGC::compact_humongous_objects() {\n+template<bool ALT_FWD>\n+void ShenandoahFullGC::compact_humongous_objects_impl() {\n@@ -962,1 +1012,1 @@\n-      size_t new_start = heap->heap_region_index_containing(SlidingForwarding::forwardee(old_obj));\n+      size_t new_start = heap->heap_region_index_containing(SlidingForwarding::forwardee<ALT_FWD>(old_obj));\n@@ -1003,0 +1053,8 @@\n+void ShenandoahFullGC::compact_humongous_objects() {\n+  if (UseAltGCForwarding) {\n+    compact_humongous_objects_impl<true>();\n+  } else {\n+    compact_humongous_objects_impl<false>();\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp","additions":108,"deletions":50,"binary":false,"changes":158,"status":"modified"},{"patch":"@@ -58,0 +58,1 @@\n+  template<bool ALT_FWD>\n@@ -86,0 +87,2 @@\n+  template<bool ALT_FWD>\n+  void calculate_target_humongous_objects_impl();\n@@ -87,0 +90,2 @@\n+  template<bool ALT_FWD>\n+  void compact_humongous_objects_impl();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-  SlidingForwarding::forward_to(obj1, obj2);\n+  SlidingForwarding::forward_to<true>(obj1, obj2);\n@@ -61,1 +61,1 @@\n-  ASSERT_EQ(SlidingForwarding::forwardee(obj1), obj2);\n+  ASSERT_EQ(SlidingForwarding::forwardee<true>(obj1), obj2);\n@@ -83,1 +83,1 @@\n-  SlidingForwarding::forward_to(obj1, obj2);\n+  SlidingForwarding::forward_to<true>(obj1, obj2);\n@@ -85,1 +85,1 @@\n-  ASSERT_EQ(SlidingForwarding::forwardee(obj1), obj2);\n+  ASSERT_EQ(SlidingForwarding::forwardee<true>(obj1), obj2);\n@@ -87,1 +87,1 @@\n-  SlidingForwarding::forward_to(obj1, obj3);\n+  SlidingForwarding::forward_to<true>(obj1, obj3);\n@@ -89,1 +89,1 @@\n-  ASSERT_EQ(SlidingForwarding::forwardee(obj1), obj3);\n+  ASSERT_EQ(SlidingForwarding::forwardee<true>(obj1), obj3);\n@@ -119,1 +119,1 @@\n-  SlidingForwarding::forward_to(s_obj1, t_obj1);\n+  SlidingForwarding::forward_to<true>(s_obj1, t_obj1);\n@@ -121,1 +121,1 @@\n-  ASSERT_EQ(SlidingForwarding::forwardee(s_obj1), t_obj1);\n+  ASSERT_EQ(SlidingForwarding::forwardee<true>(s_obj1), t_obj1);\n@@ -123,1 +123,1 @@\n-  SlidingForwarding::forward_to(s_obj2, t_obj2);\n+  SlidingForwarding::forward_to<true>(s_obj2, t_obj2);\n@@ -125,1 +125,1 @@\n-  ASSERT_EQ(SlidingForwarding::forwardee(s_obj2), t_obj2);\n+  ASSERT_EQ(SlidingForwarding::forwardee<true>(s_obj2), t_obj2);\n@@ -127,1 +127,1 @@\n-  SlidingForwarding::forward_to(s_obj3, t_obj3);\n+  SlidingForwarding::forward_to<true>(s_obj3, t_obj3);\n@@ -129,1 +129,1 @@\n-  ASSERT_EQ(SlidingForwarding::forwardee(s_obj3), t_obj3);\n+  ASSERT_EQ(SlidingForwarding::forwardee<true>(s_obj3), t_obj3);\n@@ -131,1 +131,1 @@\n-  SlidingForwarding::forward_to(s_obj4, t_obj4);\n+  SlidingForwarding::forward_to<true>(s_obj4, t_obj4);\n@@ -133,1 +133,1 @@\n-  ASSERT_EQ(SlidingForwarding::forwardee(s_obj4), t_obj4);\n+  ASSERT_EQ(SlidingForwarding::forwardee<true>(s_obj4), t_obj4);\n","filename":"test\/hotspot\/gtest\/gc\/shared\/test_slidingForwarding.cpp","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"}]}