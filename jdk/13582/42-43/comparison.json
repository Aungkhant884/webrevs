{"files":[{"patch":"@@ -29,1 +29,0 @@\n-#include \"utilities\/fastHash.hpp\"\n@@ -111,1 +110,1 @@\n-    _fallback_table = new FallbackTable();\n+    _fallback_table = new (mtGC) FallbackTable();\n@@ -113,1 +112,1 @@\n-  _fallback_table->forward_to(from, to);\n+  _fallback_table->put_when_absent(from, to);\n@@ -118,53 +117,5 @@\n-  return _fallback_table->forwardee(from);\n-}\n-\n-SlidingForwarding::FallbackTable::FallbackTable() {\n-  for (uint i = 0; i < TABLE_SIZE; i++) {\n-    _table[i]._next = nullptr;\n-    _table[i]._from = nullptr;\n-    _table[i]._to   = nullptr;\n-  }\n-}\n-\n-SlidingForwarding::FallbackTable::~FallbackTable() {\n-  for (uint i = 0; i < TABLE_SIZE; i++) {\n-    FallbackTableEntry* entry = _table[i]._next;\n-    while (entry != nullptr) {\n-      FallbackTableEntry* next = entry->_next;\n-      FREE_C_HEAP_OBJ(entry);\n-      entry = next;\n-    }\n-  }\n-}\n-\n-size_t SlidingForwarding::FallbackTable::home_index(HeapWord* from) {\n-  uint64_t val = reinterpret_cast<uint64_t>(from);\n-  uint64_t hash = FastHash::get_hash64(val, UCONST64(0xAAAAAAAAAAAAAAAA));\n-  return hash >> (64 - log2i_exact(TABLE_SIZE));\n-}\n-\n-void SlidingForwarding::FallbackTable::forward_to(HeapWord* from, HeapWord* to) {\n-  size_t idx = home_index(from);\n-  FallbackTableEntry* head = &_table[idx];\n-#ifdef ASSERT\n-  \/\/ Search existing entry in chain starting at idx.\n-  for (FallbackTableEntry* entry = head; entry != nullptr; entry = entry->_next) {\n-    assert(entry->_from != from, \"Don't re-forward entries into the fallback-table\");\n-  }\n-#endif\n-  \/\/ No entry found, create new one and insert after head.\n-  FallbackTableEntry* new_entry = NEW_C_HEAP_OBJ(FallbackTableEntry, mtGC);\n-  *new_entry = *head;\n-  head->_next = new_entry;\n-  head->_from = from;\n-  head->_to   = to;\n-}\n-\n-HeapWord* SlidingForwarding::FallbackTable::forwardee(HeapWord* from) const {\n-  size_t idx = home_index(from);\n-  const FallbackTableEntry* entry = &_table[idx];\n-  while (entry != nullptr) {\n-    if (entry->_from == from) {\n-      return entry->_to;\n-    }\n-    entry = entry->_next;\n+  HeapWord** found = _fallback_table->get(from);\n+  if (found != nullptr) {\n+    return *found;\n+  } else {\n+    return nullptr;\n@@ -172,1 +123,0 @@\n-  return nullptr;\n","filename":"src\/hotspot\/share\/gc\/shared\/slidingForwarding.cpp","additions":7,"deletions":57,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -33,0 +33,2 @@\n+#include \"utilities\/fastHash.hpp\"\n+#include \"utilities\/resourceHash.hpp\"\n@@ -103,20 +105,11 @@\n-  class FallbackTable : public CHeapObj<mtGC>{\n-  private:\n-    struct FallbackTableEntry {\n-      FallbackTableEntry* _next;\n-      HeapWord* _from;\n-      HeapWord* _to;\n-    };\n-\n-    static const uint TABLE_SIZE = 1024;\n-    FallbackTableEntry _table[TABLE_SIZE];\n-\n-    static size_t home_index(HeapWord* from);\n-\n-  public:\n-    FallbackTable();\n-    ~FallbackTable();\n-\n-    void forward_to(HeapWord* from, HeapWord* to);\n-    HeapWord* forwardee(HeapWord* from) const;\n-  };\n+  inline static unsigned hash(HeapWord* const& from) {\n+    uint64_t val = reinterpret_cast<uint64_t>(from);\n+    uint64_t hash = FastHash::get_hash64(val, UCONST64(0xAAAAAAAAAAAAAAAA));\n+    return checked_cast<unsigned>(hash >> 32);\n+  }\n+  inline static bool equals(HeapWord* const& lhs, HeapWord* const& rhs) {\n+    return lhs == rhs;\n+  }\n+  typedef ResourceHashtable<HeapWord* \/* key-type *\/, HeapWord* \/* value-type *\/,\n+                            1024 \/* size *\/, AnyObj::C_HEAP \/* alloc-type *\/, mtGC,\n+                            SlidingForwarding::hash, SlidingForwarding::equals> FallbackTable;\n","filename":"src\/hotspot\/share\/gc\/shared\/slidingForwarding.hpp","additions":13,"deletions":20,"binary":false,"changes":33,"status":"modified"}]}