{"files":[{"patch":"@@ -33,0 +33,2 @@\n+#include \"logging\/log.hpp\"\n+\n@@ -38,1 +40,0 @@\n-size_t SlidingForwarding::_num_regions = 0;\n@@ -40,1 +41,5 @@\n-uint SlidingForwarding::_region_size_words_shift = 0;\n+size_t SlidingForwarding::_heap_start_region_bias = 0;\n+size_t SlidingForwarding::_num_regions = 0;\n+uint SlidingForwarding::_region_size_bytes_shift = 0;\n+uintptr_t SlidingForwarding::_region_mask = 0;\n+HeapWord** SlidingForwarding::_biased_bases[SlidingForwarding::NUM_TARGET_REGIONS] = { nullptr, nullptr };\n@@ -48,3 +53,1 @@\n-    _num_regions = align_up(pointer_delta(heap.end(), heap.start()), region_size_words) \/ region_size_words;\n-    _region_size_words = region_size_words;\n-    _region_size_words_shift = log2i_exact(region_size_words);\n+\n@@ -55,2 +58,6 @@\n-      _region_size_words = round_up_power_of_2(heap.word_size());\n-      _region_size_words_shift = log2i_exact(_region_size_words);\n+      _region_size_words = heap.word_size();\n+      _region_size_bytes_shift = log2i_exact(round_up_power_of_2(_region_size_words)) + LogHeapWordSize;\n+  } else {\n+      _num_regions = align_up(pointer_delta(heap.end(), heap.start()), region_size_words) \/ region_size_words;\n+      _region_size_words = region_size_words;\n+      _region_size_bytes_shift = log2i_exact(_region_size_words) + LogHeapWordSize;\n@@ -58,0 +65,4 @@\n+    _heap_start_region_bias = (uintptr_t)_heap_start >> _region_size_bytes_shift;\n+    _region_mask = ~((uintptr_t(1) << _region_size_bytes_shift) - 1);\n+\n+    guarantee((_heap_start_region_bias << _region_size_bytes_shift) == (uintptr_t)_heap_start, \"must be aligned\");\n@@ -60,1 +71,0 @@\n-    assert(_region_size_words_shift <= NUM_OFFSET_BITS, \"regions must not be larger than maximum addressing bits allow\");\n@@ -75,0 +85,2 @@\n+    _biased_bases[0] = _bases_table - _heap_start_region_bias;\n+    _biased_bases[1] = _bases_table + _num_regions - _heap_start_region_bias;\n","filename":"src\/hotspot\/share\/gc\/shared\/slidingForwarding.cpp","additions":20,"deletions":8,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -124,1 +124,0 @@\n-\n@@ -149,1 +148,0 @@\n-  static size_t         _num_regions;\n@@ -151,1 +149,0 @@\n-  static uint           _region_size_words_shift;\n@@ -153,0 +150,6 @@\n+  static size_t         _heap_start_region_bias;\n+  static size_t         _num_regions;\n+  static uint           _region_size_bytes_shift;\n+  static uintptr_t      _region_mask;\n+\n+  \/\/ The target base table memory.\n@@ -154,0 +157,3 @@\n+  \/\/ Entries into the target base tables, biased to the start of the heap.\n+  static HeapWord**     _biased_bases[NUM_TARGET_REGIONS];\n+\n@@ -156,1 +162,1 @@\n-  static inline size_t region_index_containing(HeapWord* addr);\n+  static inline size_t biased_region_index_containing(HeapWord* addr);\n","filename":"src\/hotspot\/share\/gc\/shared\/slidingForwarding.hpp","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -42,4 +42,2 @@\n-size_t SlidingForwarding::region_index_containing(HeapWord* addr) {\n-  size_t index = pointer_delta(addr, _heap_start) >> _region_size_words_shift;\n-  assert(index < _num_regions, \"Region index is in bounds: \" PTR_FORMAT, p2i(addr));\n-  return index;\n+size_t SlidingForwarding::biased_region_index_containing(HeapWord* addr) {\n+  return (uintptr_t)addr >> _region_size_bytes_shift;\n@@ -49,2 +47,1 @@\n-  size_t from_reg_idx = region_index_containing(from);\n-  size_t to_reg_idx = region_index_containing(to);\n+  static_assert(NUM_TARGET_REGIONS == 2, \"Only implemented for this amount\");\n@@ -52,2 +49,2 @@\n-  HeapWord* to_region_base = _heap_start + to_reg_idx * _region_size_words;\n-  size_t base_idx = from_reg_idx * NUM_TARGET_REGIONS;\n+  size_t from_reg_idx = biased_region_index_containing(from);\n+  HeapWord* to_region_base = (HeapWord*)((uintptr_t)to & _region_mask);\n@@ -55,2 +52,3 @@\n-  uintptr_t alt_region = 0;\n-  if (_bases_table[base_idx] == to_region_base) {\n+  HeapWord** base = &_biased_bases[0][from_reg_idx];\n+  uintptr_t alternate = 0;\n+  if (*base == to_region_base) {\n@@ -58,1 +56,1 @@\n-  } else if (_bases_table[base_idx] == UNUSED_BASE) {\n+  } else if (*base == UNUSED_BASE) {\n@@ -60,1 +58,1 @@\n-    _bases_table[base_idx] = to_region_base;\n+    *base = to_region_base;\n@@ -62,2 +60,2 @@\n-    size_t base_idx_alt = base_idx + 1;\n-    if (_bases_table[base_idx_alt] == to_region_base) {\n+    base = &_biased_bases[1][from_reg_idx];\n+    if (*base == to_region_base) {\n@@ -65,1 +63,1 @@\n-    } else if (_bases_table[base_idx_alt] == UNUSED_BASE) {\n+    } else if (*base == UNUSED_BASE) {\n@@ -67,1 +65,1 @@\n-      _bases_table[base_idx_alt] = to_region_base;\n+      *base = to_region_base;\n@@ -73,1 +71,1 @@\n-    alt_region = 1;\n+    alternate = 1;\n@@ -82,1 +80,1 @@\n-                      (alt_region << ALT_REGION_SHIFT) |\n+                      (alternate << ALT_REGION_SHIFT) |\n@@ -94,2 +92,2 @@\n-  size_t alt_region = (encoded >> ALT_REGION_SHIFT) & right_n_bits(ALT_REGION_BITS);\n-  assert(alt_region < NUM_TARGET_REGIONS, \"Sanity\");\n+  size_t alternate = (encoded >> ALT_REGION_SHIFT) & right_n_bits(ALT_REGION_BITS);\n+  assert(alternate < NUM_TARGET_REGIONS, \"Sanity\");\n@@ -98,4 +96,2 @@\n-  size_t from_idx = region_index_containing(from) * NUM_TARGET_REGIONS;\n-  size_t base_idx = from_idx + alt_region;\n-\n-  HeapWord* base = _bases_table[base_idx];\n+  size_t from_idx = biased_region_index_containing(from);\n+  HeapWord* base = _biased_bases[alternate][from_idx];\n@@ -106,1 +102,1 @@\n-         encoded, alt_region, p2i(base));\n+         encoded, alternate, p2i(base));\n","filename":"src\/hotspot\/share\/gc\/shared\/slidingForwarding.inline.hpp","additions":21,"deletions":25,"binary":false,"changes":46,"status":"modified"}]}