{"files":[{"patch":"@@ -45,1 +45,1 @@\n- * We divide the heap into number of logical regions. Each region spans maximum of 2^NUM_BITS words.\n+ * We divide the heap into number of logical regions. Each region spans maximum of 2^NUM_COMPRESSED_BITS words.\n@@ -48,1 +48,2 @@\n- * into. We also currently require the two lowest header bits to indicate that the object is forwarded.\n+ * into. We also currently require the two lowest header bits to indicate that the object is forwarded. In addition to that,\n+ * we use 1 more bit to indicate that we should use a fallback-lookup-table instead of using the sliding encoding.\n@@ -55,2 +56,3 @@\n- * - Look-up first target base of region of orig. If not yet used,\n- *   establish it to be the base of region of target address. Use that base in step 3.\n+ * - Look-up first target base of region of orig. If it is already established and the region\n+ *   that 'target' is in, then use it in step 3. If not yet used, establish it to be the base of region of target\n+     address. Use that base in step 3.\n@@ -60,3 +62,3 @@\n- * - Now we found a base address. Encode the target address with that base into lowest NUM_BITS bits, and shift\n- *   that up by 3 bits. Set the 3rd bit if we used the secondary target base, otherwise leave it at 0. Set the\n- *   lowest two bits to indicate that the object has been forwarded. Store that in the lowest NUM_BITS+3 bits of the\n+ * - Now we found a base address. Encode the target address with that base into lowest NUM_COMPRESSED_BITS bits, and shift\n+ *   that up by 4 bits. Set the 3rd bit if we used the secondary target base, otherwise leave it at 0. Set the\n+ *   lowest two bits to indicate that the object has been forwarded. Store that in the lowest 32 bits of the\n@@ -66,1 +68,1 @@\n- * - Load lowest NUM_BITS + 3 from original object header. Extract target region bit and compressed address bits.\n+ * - Load lowest 32 from original object header. Extract target region bit and compressed address bits.\n@@ -70,0 +72,7 @@\n+ *\n+ * One complication is that G1 serial compaction breaks the assumption that we only forward\n+ * to two target regions. When that happens, we initialize a fallback-hashtable for storing those extra\n+ * forwardings, and set the 4th bit in the header to indicate that the forwardee is not encoded but\n+ * should be looked-up in the hashtable. G1 serial compaction is not very common -  it is the last-last-ditch\n+ * GC that is used when the JVM is scrambling to squeeze more space out of the heap, and at that\n+ * point, ultimate performance is no longer the main concern.\n@@ -75,1 +84,3 @@\n-  \/\/ We need the lowest three bits to indicate a forwarded object and self-forwarding.\n+  \/\/ We need the lowest two bits to indicate a forwarded object.\n+  \/\/ The 3rd bit (fallback-bit) indicates that the forwardee should be\n+  \/\/ looked-up in a fallback-table.\n@@ -79,0 +90,1 @@\n+  \/\/ The 4th bit selects the target region.\n@@ -85,2 +97,1 @@\n-  \/\/ How many bits we use for the compressed pointer (we are going to need one more bit to indicate target region, and\n-  \/\/ two lowest bits to mark objects as forwarded)\n+  \/\/ How many bits we use for the compressed pointer\n","filename":"src\/hotspot\/share\/gc\/shared\/slidingForwarding.hpp","additions":22,"deletions":11,"binary":false,"changes":33,"status":"modified"}]}