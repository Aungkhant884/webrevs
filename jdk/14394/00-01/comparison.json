{"files":[{"patch":"@@ -66,1 +66,6 @@\n-import java.util.*;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Locale;\n@@ -68,0 +73,5 @@\n+import java.util.Optional;\n+import java.util.Properties;\n+import java.util.ResourceBundle;\n+import java.util.Set;\n+import java.util.TreeSet;\n@@ -117,0 +127,1 @@\n+    private static final String PROV_INFO_STRING = \"Provider information: \";\n@@ -189,1 +200,1 @@\n-                printSecuritySettings(\"all\");\n+                printSecuritySummarySettings();\n@@ -327,1 +338,1 @@\n-        ostream.print(\"\\n\");\n+        ostream.println();\n@@ -331,10 +342,12 @@\n-        if (arg.toLowerCase(Locale.ROOT).equals(\"properties\")) {\n-            printSecurityProperties();\n-        } else if(arg.toLowerCase(Locale.ROOT).equals(\"providers\")) {\n-            printSecurityProviderConfig();\n-        } else if(arg.toLowerCase(Locale.ROOT).equals(\"tls\")) {\n-            printSecurityTLSConfig();\n-        } else {\n-            printSecurityProperties();\n-            printSecurityProviderConfig();\n-            printSecurityTLSConfig();\n+        switch (arg.toLowerCase(Locale.ROOT)) {\n+            case \"properties\" -> printSecurityProperties();\n+            case \"providers\"  -> printSecurityProviderConfig(true);\n+            case \"tls\"        -> printSecurityTLSConfig(true);\n+            case \"all\"        -> printAllSecurityConfig();\n+            default           -> {\n+                ostream.println(\"Unrecognized security sub-option. Valid values are \" +\n+                        \"\\\"all\\\", \\\"properties\\\", \\\"providers\\\", \\\"tls\\\". See \\\"java -X\\\"\");\n+                ostream.println(\"Printing all security settings\\n\");\n+                printAllSecurityConfig();\n+            }\n+\n@@ -344,0 +357,15 @@\n+    \/\/ A non-verbose description of some core security configuration settings\n+    private static void printSecuritySummarySettings() {\n+        ostream.println(\"Security settings summary: \" + \"\\n\" +\n+                INDENT + \"Use \\\"-XshowSettings:security\\\" for verbose details\\n\");\n+        printSecurityProviderConfig(false);\n+        printSecurityTLSConfig(false);\n+    }\n+\n+    private static void printAllSecurityConfig() {\n+        ostream.println(\"Security settings:\\n\");\n+        printSecurityProperties();\n+        printSecurityProviderConfig(true);\n+        printSecurityTLSConfig(true);\n+    }\n+\n@@ -352,1 +380,2 @@\n-                List.of(val.split(\",\")).forEach(s -> ostream.println(THREEINDENT + s.trim()));\n+                List.of(val.split(\",\")).forEach(\n+                        s -> ostream.println(THREEINDENT + s.trim() + \",\"));\n@@ -357,1 +386,1 @@\n-        ostream.print(\"\\n\");\n+        ostream.println();\n@@ -360,1 +389,1 @@\n-    private static void printSecurityTLSConfig() {\n+    private static void printSecurityTLSConfig(boolean verbose) {\n@@ -366,1 +395,1 @@\n-            throw new RuntimeException(e);\n+            throw new InternalError(\"Failed to create SSL socket\");\n@@ -375,3 +404,5 @@\n-        System.out.println(\"\\n\" + TWOINDENT + \"Enabled Cipher Suites:\");\n-        for (String s : ssls.getEnabledCipherSuites()) {\n-            System.out.println(THREEINDENT + s);\n+        if (verbose) {\n+            System.out.println(\"\\n\" + TWOINDENT + \"Enabled Cipher Suites:\");\n+            for (String s : ssls.getEnabledCipherSuites()) {\n+                System.out.println(THREEINDENT + s);\n+            }\n@@ -379,1 +410,1 @@\n-        ostream.print(\"\\n\");\n+        ostream.println();\n@@ -382,1 +413,1 @@\n-    private static void printSecurityProviderConfig() {\n+    private static void printSecurityProviderConfig(boolean verbose) {\n@@ -385,0 +416,4 @@\n+            if (verbose) {\n+                \/\/ separate the views out\n+                ostream.println(TWOINDENT + \"-\".repeat(40));\n+            }\n@@ -386,5 +421,12 @@\n-            ostream.println(TWOINDENT + \"Provider information: \" + wrappedString(p.getInfo(), 80));\n-            ostream.println(TWOINDENT + \"Provider services: (type : algorithm)\");\n-            for (Provider.Service ps : p.getServices().stream()\n-                    .sorted(Comparator.comparing(Provider.Service::getType)).toList()) {\n-                ostream.println(THREEINDENT + ps.getType() + \" : \" + ps.getAlgorithm());\n+            if (verbose) {\n+                ostream.println(TWOINDENT + PROV_INFO_STRING + wrappedString(p.getInfo(), 80));\n+                ostream.println(TWOINDENT + \"Provider services: (type : algorithm)\");\n+                Set<Provider.Service> services = p.getServices();\n+               if (!services.isEmpty()) {\n+                   services.stream()\n+                           .sorted(Comparator.comparing(Provider.Service::getType))\n+                           .forEach(ps -> ostream.println(THREEINDENT +\n+                                   ps.getType() + \" : \" + ps.getAlgorithm()));\n+               } else {\n+                   ostream.println(THREEINDENT + \"<none>\");\n+               }\n@@ -393,1 +435,1 @@\n-        ostream.print(\"\\n\");\n+        ostream.println();\n@@ -396,1 +438,1 @@\n-    \/\/ return a string split across multiple lines which aims to limit max width\n+    \/\/ return a string split across multiple lines which aims to limit max length\n@@ -402,1 +444,0 @@\n-        StringTokenizer st = new StringTokenizer(orig, \" \");\n@@ -404,8 +445,10 @@\n-        int count = 0;\n-        while (st.hasMoreElements()) {\n-            String s = st.nextToken();\n-            sb.append(s);\n-            if (st.hasMoreElements()) {\n-                if (count + s.length() > limit) {\n-                    sb.append(\"\\n\" + THREEINDENT);\n-                    count = 0;\n+        int widthCount = 0;\n+        for (String s : orig.split(\" \")) {\n+            if (widthCount == 0) {\n+                \/\/ first iteration only\n+                sb.append(s);\n+                widthCount = PROV_INFO_STRING.length() + s.length();\n+            } else {\n+                if (widthCount + s.length() > limit) {\n+                    sb.append(\"\\n\" + THREEINDENT + s);\n+                    widthCount = s.length();\n@@ -413,2 +456,2 @@\n-                    sb.append(\" \");\n-                    count += s.length() + 1;\n+                    sb.append(\" \" + s);\n+                    widthCount += s.length() + 1;\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/LauncherHelper.java","additions":83,"deletions":40,"binary":false,"changes":123,"status":"modified"},{"patch":"@@ -173,0 +173,2 @@\n+\\    -XshowSettings:security:all\\n\\\n+\\                      show all security settings and continue\\n\\\n@@ -178,1 +180,1 @@\n-\\                      show TLS related settings and continue\\n\\\n+\\                      show TLS related security settings and continue\\n\\\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/resources\/launcher.properties","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -71,0 +71,2 @@\n+    private static final String SEC_SUMMARY_PROPS_SETTINGS =\n+                \"Security settings summary:\";\n@@ -72,1 +74,1 @@\n-                            \"Security provider static configuration:\";\n+                \"Security provider static configuration:\";\n@@ -74,0 +76,1 @@\n+    private static final String BAD_SEC_OPTION_MSG = \"Unrecognized security sub-option.\";\n@@ -82,1 +85,3 @@\n-        checkContains(tr, SEC_PROPS_SETTINGS);\n+        \/\/ no verbose security settings unless \"security\" used\n+        checkNotContains(tr, SEC_PROPS_SETTINGS);\n+        checkContains(tr, SEC_SUMMARY_PROPS_SETTINGS);\n@@ -190,0 +195,11 @@\n+    \/\/ ensure error message is printed when unrecognized option used\n+    static void runTestOptionBadSecurityOption() throws IOException {\n+        TestResult tr = doExec(javaCmd, \"-XshowSettings:security:bad\");\n+        checkContains(tr, BAD_SEC_OPTION_MSG);\n+        \/\/ we print all security settings in such scenario\n+        checkContains(tr, SEC_PROPS_SETTINGS);\n+        checkContains(tr, SEC_PROVIDER_SETTINGS);\n+        checkContains(tr, SEC_TLS_SETTINGS);\n+        \/\/ test a well known TLS config for sanity\n+        checkContains(tr, \"TLSv1.2\");\n+    }\n@@ -231,0 +247,1 @@\n+        runTestOptionBadSecurityOption();\n","filename":"test\/jdk\/tools\/launcher\/Settings.java","additions":19,"deletions":2,"binary":false,"changes":21,"status":"modified"}]}