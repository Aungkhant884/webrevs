{"files":[{"patch":"@@ -50,1 +50,0 @@\n-import java.lang.reflect.InvocationTargetException;\n@@ -52,0 +51,1 @@\n+import java.lang.reflect.InvocationTargetException;\n@@ -61,3 +61,0 @@\n-import java.security.NoSuchAlgorithmException;\n-import java.security.Provider;\n-import java.security.Security;\n@@ -83,2 +80,0 @@\n-import javax.net.ssl.SSLContext;\n-import javax.net.ssl.SSLSocket;\n@@ -86,2 +81,0 @@\n-import jdk.internal.access.SharedSecrets;\n-import jdk.internal.util.OperatingSystem;\n@@ -95,0 +88,1 @@\n+import jdk.internal.util.OperatingSystem;\n@@ -121,3 +115,2 @@\n-    private static final String INDENT = \"    \";\n-    private static final String TWOINDENT = INDENT + INDENT;\n-    private static final String THREEINDENT = TWOINDENT + INDENT;\n+    static final String INDENT = \"    \";\n+    static final String TWOINDENT = INDENT + INDENT;\n@@ -127,1 +120,0 @@\n-    private static final String PROV_INFO_STRING = \"Provider information: \";\n@@ -140,1 +132,1 @@\n-    private static PrintStream ostream;\n+    static PrintStream ostream;\n@@ -186,1 +178,1 @@\n-                printSecuritySettings(opt);\n+                SecuritySettings.printSecuritySettings(opt);\n@@ -197,1 +189,1 @@\n-                printSecuritySummarySettings();\n+                SecuritySettings.printSecuritySummarySettings();\n@@ -338,123 +330,0 @@\n-    private static void printSecuritySettings(String arg) {\n-        switch (arg) {\n-            case \"properties\" -> printSecurityProperties();\n-            case \"providers\"  -> printSecurityProviderConfig(true);\n-            case \"tls\"        -> printSecurityTLSConfig(true);\n-            case \"all\"        -> printAllSecurityConfig();\n-            default           -> {\n-                ostream.println(\"Unrecognized security sub-option. Valid values are \" +\n-                        \"\\\"all\\\", \\\"properties\\\", \\\"providers\\\", \\\"tls\\\". See \\\"java -X\\\"\");\n-                ostream.println(\"Printing all security settings\\n\");\n-                printAllSecurityConfig();\n-            }\n-\n-        }\n-    }\n-\n-    \/\/ A non-verbose description of some core security configuration settings\n-    private static void printSecuritySummarySettings() {\n-        ostream.println(\"Security settings summary: \" + \"\\n\" +\n-                INDENT + \"Use \\\"-XshowSettings:security\\\" for verbose details\\n\");\n-        printSecurityProviderConfig(false);\n-        printSecurityTLSConfig(false);\n-    }\n-\n-    private static void printAllSecurityConfig() {\n-        ostream.println(\"Security settings:\\n\");\n-        printSecurityProperties();\n-        printSecurityProviderConfig(true);\n-        printSecurityTLSConfig(true);\n-    }\n-\n-    private static void printSecurityProperties() {\n-        ostream.println(INDENT + \"Security properties:\");\n-        Properties p = SharedSecrets.getJavaSecurityPropertiesAccess().getInitialProperties();\n-        for (String key : p.stringPropertyNames().stream().sorted().toList()) {\n-            String val = p.getProperty(key);\n-            if (val.contains(\",\") && val.length() > 60) {\n-                \/\/ split lines longer than 60 chars which have multiple values\n-                ostream.println(TWOINDENT + key + \"=\");\n-                List.of(val.split(\",\")).forEach(\n-                        s -> ostream.println(THREEINDENT + s.trim() + \",\"));\n-            } else {\n-                ostream.println(TWOINDENT + key + \"=\" + val);\n-            }\n-        }\n-        ostream.println();\n-    }\n-\n-    private static void printSecurityTLSConfig(boolean verbose) {\n-        SSLSocket ssls;\n-        try {\n-            ssls = (SSLSocket)\n-                    SSLContext.getDefault().getSocketFactory().createSocket();\n-        } catch (IOException | NoSuchAlgorithmException e) {\n-            throw new InternalError(\"Failed to create SSL socket\");\n-        }\n-\n-        ostream.println(INDENT + \"Security TLS configuration:\");\n-        ostream.println(TWOINDENT + \"Enabled Protocols:\");\n-        for (String s : ssls.getEnabledProtocols()) {\n-            ostream.println(THREEINDENT + s);\n-        }\n-\n-        if (verbose) {\n-            ostream.println(\"\\n\" + TWOINDENT + \"Enabled Cipher Suites:\");\n-            for (String s : ssls.getEnabledCipherSuites()) {\n-                ostream.println(THREEINDENT + s);\n-            }\n-        }\n-        ostream.println();\n-    }\n-\n-    private static void printSecurityProviderConfig(boolean verbose) {\n-        ostream.println(INDENT + \"Security provider static configuration: (in order of preference)\");\n-        for (Provider p : Security.getProviders()) {\n-            if (verbose) {\n-                \/\/ separate the views out\n-                ostream.println(TWOINDENT + \"-\".repeat(40));\n-            }\n-            ostream.println(TWOINDENT + \"Provider name: \" + p.getName());\n-            if (verbose) {\n-                ostream.println(wrappedString(PROV_INFO_STRING + p.getInfo(), 80));\n-                ostream.println(TWOINDENT + \"Provider services: (type : algorithm)\");\n-                Set<Provider.Service> services = p.getServices();\n-               if (!services.isEmpty()) {\n-                   services.stream()\n-                           .sorted(Comparator.comparing(Provider.Service::getType))\n-                           .forEach(ps -> ostream.println(THREEINDENT +\n-                                   ps.getType() + \" : \" + ps.getAlgorithm()));\n-               } else {\n-                   ostream.println(THREEINDENT + \"<none>\");\n-               }\n-            }\n-        }\n-        ostream.println();\n-    }\n-\n-    \/\/ return a string split across multiple lines which aims to limit max length\n-    private static String wrappedString(String orig, int limit) {\n-        if (orig == null || orig.isEmpty() || limit <= 0) {\n-            \/\/ bad input\n-            return orig;\n-        }\n-        StringBuilder sb = new StringBuilder();\n-        int widthCount = 0;\n-        for (String s : orig.split(\" \")) {\n-            if (widthCount == 0) {\n-                \/\/ first iteration only\n-                sb.append(TWOINDENT + s);\n-                widthCount = s.length() + TWOINDENT.length();\n-            } else {\n-                if (widthCount + s.length() > limit) {\n-                    sb.append(\"\\n\" + THREEINDENT + s);\n-                    widthCount = s.length() + THREEINDENT.length();\n-                } else {\n-                    sb.append(\" \" + s);\n-                    widthCount += s.length() + 1;\n-                }\n-            }\n-        }\n-        return sb.toString();\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/LauncherHelper.java","additions":7,"deletions":138,"binary":false,"changes":145,"status":"modified"},{"patch":"@@ -0,0 +1,206 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package sun.launcher;\n+\n+import jdk.internal.access.SharedSecrets;\n+\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLSocket;\n+import java.io.IOException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.Provider;\n+import java.security.Security;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import static sun.launcher.LauncherHelper.INDENT;\n+import static sun.launcher.LauncherHelper.TWOINDENT;\n+import static sun.launcher.LauncherHelper.ostream;\n+\n+\n+\/**\n+ * A utility class for security libs functionality\n+ * in the -XshowSettings:security output\n+ *\/\n+public final class SecuritySettings {\n+\n+    private static final String THREEINDENT = TWOINDENT + INDENT;\n+    private static final String PROV_INFO_STRING = \"Provider information: \";\n+\n+    static void printSecuritySettings(String arg) {\n+        switch (arg) {\n+            case \"properties\" -> printSecurityProperties();\n+            case \"providers\"  -> printSecurityProviderConfig(true);\n+            case \"tls\"        -> printSecurityTLSConfig(true);\n+            case \"all\"        -> printAllSecurityConfig();\n+            default           -> {\n+                ostream.println(\"Unrecognized security subcommand. See \\\"java -X\\\" for help\");\n+                ostream.println(\"Printing all security settings\");\n+                printAllSecurityConfig();\n+            }\n+\n+        }\n+    }\n+\n+    \/\/ A non-verbose description of some core security configuration settings\n+    static void printSecuritySummarySettings() {\n+        ostream.println(\"Security settings summary: \" + \"\\n\" +\n+                INDENT + \"See \\\"java -X\\\" for verbose security settings options\");\n+        printSecurityProviderConfig(false);\n+        printSecurityTLSConfig(false);\n+    }\n+\n+    static void printAllSecurityConfig() {\n+        ostream.println(\"Security settings:\\n\");\n+        printSecurityProperties();\n+        printSecurityProviderConfig(true);\n+        printSecurityTLSConfig(true);\n+    }\n+\n+    private static void printSecurityProperties() {\n+        ostream.println(INDENT + \"Security properties:\");\n+        Properties p = SharedSecrets.getJavaSecurityPropertiesAccess().getInitialProperties();\n+        for (String key : p.stringPropertyNames().stream().sorted().toList()) {\n+            String val = p.getProperty(key);\n+            if (val.contains(\",\") && val.length() > 60) {\n+                \/\/ split lines longer than 60 chars which have multiple values\n+                ostream.println(TWOINDENT + key + \"=\");\n+                String[] values = val.split(\",\");\n+                String lastValue = values[values.length -1].trim();\n+                List.of(values).forEach(\n+                        s -> ostream.println(THREEINDENT + s.trim() +\n+                                (s.trim().equals(lastValue) ? \"\" : \",\")));\n+            } else {\n+                ostream.println(TWOINDENT + key + \"=\" + val);\n+            }\n+        }\n+        ostream.println();\n+    }\n+\n+    private static void printSecurityTLSConfig(boolean verbose) {\n+        SSLSocket ssls;\n+        try {\n+            ssls = (SSLSocket)\n+                    SSLContext.getDefault().getSocketFactory().createSocket();\n+        } catch (IOException | NoSuchAlgorithmException e) {\n+            throw new InternalError(\"Failed to create SSL socket\");\n+        }\n+\n+        ostream.println(INDENT + \"Security TLS configuration:\");\n+        ostream.println(TWOINDENT + \"Enabled Protocols:\");\n+        for (String s : ssls.getEnabledProtocols()) {\n+            ostream.println(THREEINDENT + s);\n+        }\n+\n+        if (verbose) {\n+            ostream.println(\"\\n\" + TWOINDENT + \"Enabled Cipher Suites:\");\n+            for (String s : ssls.getEnabledCipherSuites()) {\n+                ostream.println(THREEINDENT + s);\n+            }\n+        }\n+        ostream.println();\n+    }\n+\n+    private static void printSecurityProviderConfig(boolean verbose) {\n+        ostream.println(INDENT + \"Security provider static configuration: (in order of preference)\");\n+        for (Provider p : Security.getProviders()) {\n+            if (verbose) {\n+                \/\/ separate the views out\n+                ostream.println(TWOINDENT + \"-\".repeat(40));\n+            }\n+            ostream.println(TWOINDENT + \"Provider name: \" + p.getName());\n+            if (verbose) {\n+                ostream.println(wrappedString(PROV_INFO_STRING + p.getInfo(), 80,\n+                        TWOINDENT, THREEINDENT));\n+                ostream.println(TWOINDENT + \"Provider services: (type : algorithm)\");\n+                Set<Provider.Service> services = p.getServices();\n+                Set<String> keys = Collections.list(p.keys())\n+                        .stream()\n+                        .map(String.class::cast)\n+                        .filter(s -> s.startsWith(\"Alg.Alias.\"))\n+                        .collect(Collectors.toSet());\n+                if (!services.isEmpty()) {\n+                    services.stream()\n+                            .sorted(Comparator.comparing(Provider.Service::getType)\n+                                    .thenComparing(Provider.Service::getAlgorithm))\n+                            .forEach(ps -> {\n+                                ostream.println(THREEINDENT +\n+                                        ps.getType() + \".\" + ps.getAlgorithm());\n+                                List<String> aliases = keys\n+                                        .stream()\n+                                        .filter(s -> s.startsWith(\"Alg.Alias.\" + ps.getType()))\n+                                        .filter(s -> p.getProperty(s).equals(ps.getAlgorithm()))\n+                                        .map(s -> s.substring((\"Alg.Alias.\" + ps.getType() + \".\").length()))\n+                                        .toList();\n+\n+                                if (!aliases.isEmpty()) {\n+                                    ostream.println(wrappedString(\n+                                            aliases.stream()\n+                                                    .collect(Collectors.joining(\", \", INDENT + \" aliases: [\", \"]\")),\n+                                            80, \" \" + TWOINDENT, INDENT + THREEINDENT));\n+                                }\n+                            });\n+                } else {\n+                    ostream.println(THREEINDENT + \"<none>\");\n+                }\n+            }\n+        }\n+        if (verbose) {\n+            ostream.println();\n+        }\n+    }\n+\n+    \/\/ return a string split across multiple lines which aims to limit max length\n+    private static String wrappedString(String orig, int limit,\n+                                        String initIndent, String successiveIndent) {\n+        if (orig == null || orig.isEmpty() || limit <= 0) {\n+            \/\/ bad input\n+            return orig;\n+        }\n+        StringBuilder sb = new StringBuilder();\n+        int widthCount = 0;\n+        for (String s : orig.split(\" \")) {\n+            if (widthCount == 0) {\n+                \/\/ first iteration only\n+                sb.append(initIndent + s);\n+                widthCount = s.length() + initIndent.length();\n+            } else {\n+                if (widthCount + s.length() > limit) {\n+                    sb.append(\"\\n\" + successiveIndent + s);\n+                    widthCount = s.length() + successiveIndent.length();\n+                } else {\n+                    sb.append(\" \" + s);\n+                    widthCount += s.length() + 1;\n+                }\n+            }\n+        }\n+        return sb.toString();\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/SecuritySettings.java","additions":206,"deletions":0,"binary":false,"changes":206,"status":"added"},{"patch":"@@ -76,1 +76,1 @@\n-    private static final String BAD_SEC_OPTION_MSG = \"Unrecognized security sub-option.\";\n+    private static final String BAD_SEC_OPTION_MSG = \"Unrecognized security subcommand\";\n@@ -184,0 +184,3 @@\n+        \/\/ test for a well known alias (SunJCE: AlgorithmParameterGenerator.DiffieHellman)\n+        checkContains(tr, \"aliases: [1.2.840.113549.1.3.1, \" +\n+                \"DH, OID.1.2.840.113549.1.3.1]\");\n","filename":"test\/jdk\/tools\/launcher\/Settings.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}