{"files":[{"patch":"@@ -61,0 +61,3 @@\n+import java.security.NoSuchAlgorithmException;\n+import java.security.Provider;\n+import java.security.Security;\n@@ -80,0 +83,2 @@\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLSocket;\n@@ -81,0 +86,1 @@\n+import jdk.internal.access.SharedSecrets;\n@@ -116,0 +122,2 @@\n+    private static final String TWOINDENT = INDENT + INDENT;\n+    private static final String THREEINDENT = TWOINDENT + INDENT;\n@@ -119,0 +127,1 @@\n+    private static final String PROV_INFO_STRING = \"Provider information: \";\n@@ -175,0 +184,4 @@\n+            case \"security\":\n+                var opt = opts.length > 2 ? opts[2].trim() : \"all\";\n+                printSecuritySettings(opt);\n+                break;\n@@ -184,0 +197,1 @@\n+                printSecuritySummarySettings();\n@@ -270,1 +284,1 @@\n-                ostream.println(INDENT + INDENT + s);\n+                ostream.println(TWOINDENT + s);\n@@ -318,1 +332,124 @@\n-                ostream.print(INDENT + INDENT);\n+                ostream.print(TWOINDENT);\n+            }\n+        }\n+        ostream.println();\n+    }\n+\n+    private static void printSecuritySettings(String arg) {\n+        switch (arg) {\n+            case \"properties\" -> printSecurityProperties();\n+            case \"providers\"  -> printSecurityProviderConfig(true);\n+            case \"tls\"        -> printSecurityTLSConfig(true);\n+            case \"all\"        -> printAllSecurityConfig();\n+            default           -> {\n+                ostream.println(\"Unrecognized security sub-option. Valid values are \" +\n+                        \"\\\"all\\\", \\\"properties\\\", \\\"providers\\\", \\\"tls\\\". See \\\"java -X\\\"\");\n+                ostream.println(\"Printing all security settings\\n\");\n+                printAllSecurityConfig();\n+            }\n+\n+        }\n+    }\n+\n+    \/\/ A non-verbose description of some core security configuration settings\n+    private static void printSecuritySummarySettings() {\n+        ostream.println(\"Security settings summary: \" + \"\\n\" +\n+                INDENT + \"Use \\\"-XshowSettings:security\\\" for verbose details\\n\");\n+        printSecurityProviderConfig(false);\n+        printSecurityTLSConfig(false);\n+    }\n+\n+    private static void printAllSecurityConfig() {\n+        ostream.println(\"Security settings:\\n\");\n+        printSecurityProperties();\n+        printSecurityProviderConfig(true);\n+        printSecurityTLSConfig(true);\n+    }\n+\n+    private static void printSecurityProperties() {\n+        ostream.println(INDENT + \"Security properties:\");\n+        Properties p = SharedSecrets.getJavaSecurityPropertiesAccess().getInitialProperties();\n+        for (String key : p.stringPropertyNames().stream().sorted().toList()) {\n+            String val = p.getProperty(key);\n+            if (val.contains(\",\") && val.length() > 60) {\n+                \/\/ split lines longer than 60 chars which have multiple values\n+                ostream.println(TWOINDENT + key + \"=\");\n+                List.of(val.split(\",\")).forEach(\n+                        s -> ostream.println(THREEINDENT + s.trim() + \",\"));\n+            } else {\n+                ostream.println(TWOINDENT + key + \"=\" + val);\n+            }\n+        }\n+        ostream.println();\n+    }\n+\n+    private static void printSecurityTLSConfig(boolean verbose) {\n+        SSLSocket ssls;\n+        try {\n+            ssls = (SSLSocket)\n+                    SSLContext.getDefault().getSocketFactory().createSocket();\n+        } catch (IOException | NoSuchAlgorithmException e) {\n+            throw new InternalError(\"Failed to create SSL socket\");\n+        }\n+\n+        ostream.println(INDENT + \"Security TLS configuration:\");\n+        ostream.println(TWOINDENT + \"Enabled Protocols:\");\n+        for (String s : ssls.getEnabledProtocols()) {\n+            ostream.println(THREEINDENT + s);\n+        }\n+\n+        if (verbose) {\n+            ostream.println(\"\\n\" + TWOINDENT + \"Enabled Cipher Suites:\");\n+            for (String s : ssls.getEnabledCipherSuites()) {\n+                ostream.println(THREEINDENT + s);\n+            }\n+        }\n+        ostream.println();\n+    }\n+\n+    private static void printSecurityProviderConfig(boolean verbose) {\n+        ostream.println(INDENT + \"Security provider static configuration: (in order of preference)\");\n+        for (Provider p : Security.getProviders()) {\n+            if (verbose) {\n+                \/\/ separate the views out\n+                ostream.println(TWOINDENT + \"-\".repeat(40));\n+            }\n+            ostream.println(TWOINDENT + \"Provider name: \" + p.getName());\n+            if (verbose) {\n+                ostream.println(wrappedString(PROV_INFO_STRING + p.getInfo(), 80));\n+                ostream.println(TWOINDENT + \"Provider services: (type : algorithm)\");\n+                Set<Provider.Service> services = p.getServices();\n+               if (!services.isEmpty()) {\n+                   services.stream()\n+                           .sorted(Comparator.comparing(Provider.Service::getType))\n+                           .forEach(ps -> ostream.println(THREEINDENT +\n+                                   ps.getType() + \" : \" + ps.getAlgorithm()));\n+               } else {\n+                   ostream.println(THREEINDENT + \"<none>\");\n+               }\n+            }\n+        }\n+        ostream.println();\n+    }\n+\n+    \/\/ return a string split across multiple lines which aims to limit max length\n+    private static String wrappedString(String orig, int limit) {\n+        if (orig == null || orig.isEmpty() || limit <= 0) {\n+            \/\/ bad input\n+            return orig;\n+        }\n+        StringBuilder sb = new StringBuilder();\n+        int widthCount = 0;\n+        for (String s : orig.split(\" \")) {\n+            if (widthCount == 0) {\n+                \/\/ first iteration only\n+                sb.append(TWOINDENT + s);\n+                widthCount = s.length() + TWOINDENT.length();\n+            } else {\n+                if (widthCount + s.length() > limit) {\n+                    sb.append(\"\\n\" + THREEINDENT + s);\n+                    widthCount = s.length() + THREEINDENT.length();\n+                } else {\n+                    sb.append(\" \" + s);\n+                    widthCount += s.length() + 1;\n+                }\n@@ -321,0 +458,1 @@\n+        return sb.toString();\n@@ -323,1 +461,1 @@\n-    public static void printSystemMetrics() {\n+    private static void printSystemMetrics() {\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/LauncherHelper.java","additions":141,"deletions":3,"binary":false,"changes":144,"status":"modified"},{"patch":"@@ -171,0 +171,10 @@\n+\\    -XshowSettings:security\\n\\\n+\\                      show all security settings and continue\\n\\\n+\\    -XshowSettings:security:all\\n\\\n+\\                      show all security settings and continue\\n\\\n+\\    -XshowSettings:security:properties\\n\\\n+\\                      show security properties and continue\\n\\\n+\\    -XshowSettings:security:providers\\n\\\n+\\                      show static security provider settings and continue\\n\\\n+\\    -XshowSettings:security:tls\\n\\\n+\\                      show TLS related security settings and continue\\n\\\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/resources\/launcher.properties","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n- * @bug 8155246 8292297 8292177\n+ * @bug 8155246 8292297 8292177 8281658\n@@ -74,0 +74,4 @@\n+            \/\/ sanity test -XshowSettings:security option\n+            exerciseShowSettingsSecurity(copiedJava.toString(), \"-cp\", System.getProperty(\"test.classes\"),\n+                    \"-Djava.security.debug=all\", \"-XshowSettings:security\", \"ConfigFileTest\", \"runner\");\n+\n@@ -139,0 +143,10 @@\n+    \/\/ exercise the -XshowSettings:security launcher\n+    private static void exerciseShowSettingsSecurity(String... args) throws Exception {\n+        ProcessBuilder process = new ProcessBuilder(args);\n+        OutputAnalyzer oa = ProcessTools.executeProcess(process);\n+        oa.shouldHaveExitValue(0)\n+                .shouldContain(\"Security properties:\")\n+                .shouldContain(\"Security provider static configuration:\")\n+                .shouldContain(\"Security TLS configuration:\");\n+    }\n+\n","filename":"test\/jdk\/java\/security\/Security\/ConfigFileTest.java","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @bug 6994753 7123582 8305950\n+ * @bug 6994753 7123582 8305950 8281658\n@@ -70,0 +70,7 @@\n+    private static final String SEC_PROPS_SETTINGS = \"Security properties:\";\n+    private static final String SEC_SUMMARY_PROPS_SETTINGS =\n+                \"Security settings summary:\";\n+    private static final String SEC_PROVIDER_SETTINGS =\n+                \"Security provider static configuration:\";\n+    private static final String SEC_TLS_SETTINGS = \"Security TLS configuration:\";\n+    private static final String BAD_SEC_OPTION_MSG = \"Unrecognized security sub-option.\";\n@@ -78,0 +85,5 @@\n+        \/\/ no verbose security settings unless \"security\" used\n+        checkNotContains(tr, SEC_PROPS_SETTINGS);\n+        checkContains(tr, SEC_SUMMARY_PROPS_SETTINGS);\n+        checkContains(tr, SEC_PROVIDER_SETTINGS);\n+        checkContains(tr, SEC_TLS_SETTINGS);\n@@ -147,0 +159,47 @@\n+    static void runTestOptionSecurity() throws IOException {\n+        TestResult tr = doExec(javaCmd, \"-XshowSettings:security\");\n+        checkNotContains(tr, VM_SETTINGS);\n+        checkNotContains(tr, PROP_SETTINGS);\n+        checkContains(tr, SEC_PROPS_SETTINGS);\n+        checkContains(tr, SEC_PROVIDER_SETTINGS);\n+        checkContains(tr, SEC_TLS_SETTINGS);\n+    }\n+\n+    static void runTestOptionSecurityProps() throws IOException {\n+        TestResult tr = doExec(javaCmd, \"-XshowSettings:security:properties\");\n+        checkContains(tr, SEC_PROPS_SETTINGS);\n+        checkNotContains(tr, SEC_PROVIDER_SETTINGS);\n+        checkNotContains(tr, SEC_TLS_SETTINGS);\n+        \/\/ test a well known property for sanity\n+        checkContains(tr, \"keystore.type=pkcs12\");\n+    }\n+\n+    static void runTestOptionSecurityProv() throws IOException {\n+        TestResult tr = doExec(javaCmd, \"-XshowSettings:security:providers\");\n+        checkNotContains(tr, SEC_PROPS_SETTINGS);\n+        checkContains(tr, SEC_PROVIDER_SETTINGS);\n+        checkNotContains(tr, SEC_TLS_SETTINGS);\n+        \/\/ test a well known Provider for sanity\n+        checkContains(tr, \"Provider name: SUN\");\n+    }\n+\n+    static void runTestOptionSecurityTLS() throws IOException {\n+        TestResult tr = doExec(javaCmd, \"-XshowSettings:security:tls\");\n+        checkNotContains(tr, SEC_PROPS_SETTINGS);\n+        checkNotContains(tr, SEC_PROVIDER_SETTINGS);\n+        checkContains(tr, SEC_TLS_SETTINGS);\n+        \/\/ test a well known TLS config for sanity\n+        checkContains(tr, \"TLSv1.2\");\n+    }\n+\n+    \/\/ ensure error message is printed when unrecognized option used\n+    static void runTestOptionBadSecurityOption() throws IOException {\n+        TestResult tr = doExec(javaCmd, \"-XshowSettings:security:bad\");\n+        checkContains(tr, BAD_SEC_OPTION_MSG);\n+        \/\/ we print all security settings in such scenario\n+        checkContains(tr, SEC_PROPS_SETTINGS);\n+        checkContains(tr, SEC_PROVIDER_SETTINGS);\n+        checkContains(tr, SEC_TLS_SETTINGS);\n+        \/\/ test a well known TLS config for sanity\n+        checkContains(tr, \"TLSv1.2\");\n+    }\n@@ -184,0 +243,5 @@\n+        runTestOptionSecurity();\n+        runTestOptionSecurityProps();\n+        runTestOptionSecurityProv();\n+        runTestOptionSecurityTLS();\n+        runTestOptionBadSecurityOption();\n","filename":"test\/jdk\/tools\/launcher\/Settings.java","additions":65,"deletions":1,"binary":false,"changes":66,"status":"modified"}]}