{"files":[{"patch":"@@ -1637,19 +1637,33 @@\n-            if (tos_type == atos) {\n-              VERIFY_OOP(obj->obj_field_acquire(field_offset));\n-              SET_STACK_OBJECT(obj->obj_field_acquire(field_offset), -1);\n-            } else if (tos_type == itos) {\n-              SET_STACK_INT(obj->int_field_acquire(field_offset), -1);\n-            } else if (tos_type == ltos) {\n-              SET_STACK_LONG(obj->long_field_acquire(field_offset), 0);\n-              MORE_STACK(1);\n-            } else if (tos_type == btos || tos_type == ztos) {\n-              SET_STACK_INT(obj->byte_field_acquire(field_offset), -1);\n-            } else if (tos_type == ctos) {\n-              SET_STACK_INT(obj->char_field_acquire(field_offset), -1);\n-            } else if (tos_type == stos) {\n-              SET_STACK_INT(obj->short_field_acquire(field_offset), -1);\n-            } else if (tos_type == ftos) {\n-              SET_STACK_FLOAT(obj->float_field_acquire(field_offset), -1);\n-            } else {\n-              SET_STACK_DOUBLE(obj->double_field_acquire(field_offset), 0);\n-              MORE_STACK(1);\n+            switch(tos_type) {\n+              case btos:\n+              case ztos:\n+                SET_STACK_INT(obj->byte_field_acquire(field_offset), -1);\n+                break;\n+              case ctos:\n+                SET_STACK_INT(obj->char_field_acquire(field_offset), -1);\n+                break;\n+              case stos:\n+                SET_STACK_INT(obj->short_field_acquire(field_offset), -1);\n+                break;\n+              case itos:\n+                SET_STACK_INT(obj->int_field_acquire(field_offset), -1);\n+                break;\n+              case ftos:\n+                SET_STACK_FLOAT(obj->float_field_acquire(field_offset), -1);\n+                break;\n+              case ltos:\n+                SET_STACK_LONG(obj->long_field_acquire(field_offset), 0);\n+                MORE_STACK(1);\n+                break;\n+              case dtos:\n+                SET_STACK_DOUBLE(obj->double_field_acquire(field_offset), 0);\n+                MORE_STACK(1);\n+                break;\n+              case atos: {\n+                oop val = obj->obj_field_acquire(field_offset);\n+                VERIFY_OOP(val);\n+                SET_STACK_OBJECT(val, -1);\n+                break;\n+              }\n+              default:\n+                ShouldNotReachHere();\n@@ -1658,19 +1672,33 @@\n-            if (tos_type == atos) {\n-              VERIFY_OOP(obj->obj_field(field_offset));\n-              SET_STACK_OBJECT(obj->obj_field(field_offset), -1);\n-            } else if (tos_type == itos) {\n-              SET_STACK_INT(obj->int_field(field_offset), -1);\n-            } else if (tos_type == ltos) {\n-              SET_STACK_LONG(obj->long_field(field_offset), 0);\n-              MORE_STACK(1);\n-            } else if (tos_type == btos || tos_type == ztos) {\n-              SET_STACK_INT(obj->byte_field(field_offset), -1);\n-            } else if (tos_type == ctos) {\n-              SET_STACK_INT(obj->char_field(field_offset), -1);\n-            } else if (tos_type == stos) {\n-              SET_STACK_INT(obj->short_field(field_offset), -1);\n-            } else if (tos_type == ftos) {\n-              SET_STACK_FLOAT(obj->float_field(field_offset), -1);\n-            } else {\n-              SET_STACK_DOUBLE(obj->double_field(field_offset), 0);\n-              MORE_STACK(1);\n+            switch (tos_type) {\n+              case btos:\n+              case ztos:\n+                SET_STACK_INT(obj->byte_field(field_offset), -1);\n+                break;\n+              case ctos:\n+                SET_STACK_INT(obj->char_field(field_offset), -1);\n+                break;\n+              case stos:\n+                SET_STACK_INT(obj->short_field(field_offset), -1);\n+                break;\n+              case itos:\n+                SET_STACK_INT(obj->int_field(field_offset), -1);\n+                break;\n+              case ftos:\n+                SET_STACK_FLOAT(obj->float_field(field_offset), -1);\n+                break;\n+              case ltos:\n+                SET_STACK_LONG(obj->long_field(field_offset), 0);\n+                MORE_STACK(1);\n+                break;\n+              case dtos:\n+                SET_STACK_DOUBLE(obj->double_field(field_offset), 0);\n+                MORE_STACK(1);\n+                break;\n+              case atos: {\n+                oop val = obj->obj_field(field_offset);\n+                VERIFY_OOP(val);\n+                SET_STACK_OBJECT(val, -1);\n+                break;\n+              }\n+              default:\n+                ShouldNotReachHere();\n@@ -1746,20 +1774,33 @@\n-            if (tos_type == itos) {\n-              obj->release_int_field_put(field_offset, STACK_INT(-1));\n-            } else if (tos_type == atos) {\n-              VERIFY_OOP(STACK_OBJECT(-1));\n-              obj->release_obj_field_put(field_offset, STACK_OBJECT(-1));\n-            } else if (tos_type == btos) {\n-              obj->release_byte_field_put(field_offset, STACK_INT(-1));\n-            } else if (tos_type == ztos) {\n-              int bool_field = STACK_INT(-1);  \/\/ only store LSB\n-              obj->release_byte_field_put(field_offset, (bool_field & 1));\n-            } else if (tos_type == ltos) {\n-              obj->release_long_field_put(field_offset, STACK_LONG(-1));\n-            } else if (tos_type == ctos) {\n-              obj->release_char_field_put(field_offset, STACK_INT(-1));\n-            } else if (tos_type == stos) {\n-              obj->release_short_field_put(field_offset, STACK_INT(-1));\n-            } else if (tos_type == ftos) {\n-              obj->release_float_field_put(field_offset, STACK_FLOAT(-1));\n-            } else {\n-              obj->release_double_field_put(field_offset, STACK_DOUBLE(-1));\n+            switch(tos_type) {\n+              case ztos:\n+                obj->release_byte_field_put(field_offset, (STACK_INT(-1) & 1)); \/\/ only store LSB\n+                break;\n+              case btos:\n+                obj->release_byte_field_put(field_offset, STACK_INT(-1));\n+                break;\n+              case ctos:\n+                obj->release_char_field_put(field_offset, STACK_INT(-1));\n+                break;\n+              case stos:\n+                obj->release_short_field_put(field_offset, STACK_INT(-1));\n+                break;\n+              case itos:\n+                obj->release_int_field_put(field_offset, STACK_INT(-1));\n+                break;\n+              case ftos:\n+                obj->release_float_field_put(field_offset, STACK_FLOAT(-1));\n+                break;\n+              case ltos:\n+                obj->release_long_field_put(field_offset, STACK_LONG(-1));\n+                break;\n+              case dtos:\n+                obj->release_double_field_put(field_offset, STACK_DOUBLE(-1));\n+                break;\n+              case atos: {\n+                oop val = STACK_OBJECT(-1);\n+                VERIFY_OOP(val);\n+                obj->release_obj_field_put(field_offset, val);\n+                break;\n+              }\n+              default:\n+                ShouldNotReachHere();\n@@ -1769,20 +1810,33 @@\n-            if (tos_type == itos) {\n-              obj->int_field_put(field_offset, STACK_INT(-1));\n-            } else if (tos_type == atos) {\n-              VERIFY_OOP(STACK_OBJECT(-1));\n-              obj->obj_field_put(field_offset, STACK_OBJECT(-1));\n-            } else if (tos_type == btos) {\n-              obj->byte_field_put(field_offset, STACK_INT(-1));\n-            } else if (tos_type == ztos) {\n-              int bool_field = STACK_INT(-1);  \/\/ only store LSB\n-              obj->byte_field_put(field_offset, (bool_field & 1));\n-            } else if (tos_type == ltos) {\n-              obj->long_field_put(field_offset, STACK_LONG(-1));\n-            } else if (tos_type == ctos) {\n-              obj->char_field_put(field_offset, STACK_INT(-1));\n-            } else if (tos_type == stos) {\n-              obj->short_field_put(field_offset, STACK_INT(-1));\n-            } else if (tos_type == ftos) {\n-              obj->float_field_put(field_offset, STACK_FLOAT(-1));\n-            } else {\n-              obj->double_field_put(field_offset, STACK_DOUBLE(-1));\n+            switch(tos_type) {\n+              case ztos:\n+                obj->byte_field_put(field_offset, (STACK_INT(-1) & 1)); \/\/ only store LSB\n+                break;\n+              case btos:\n+                obj->byte_field_put(field_offset, STACK_INT(-1));\n+                break;\n+              case ctos:\n+                obj->char_field_put(field_offset, STACK_INT(-1));\n+                break;\n+              case stos:\n+                obj->short_field_put(field_offset, STACK_INT(-1));\n+                break;\n+              case itos:\n+                obj->int_field_put(field_offset, STACK_INT(-1));\n+                break;\n+              case ftos:\n+                obj->float_field_put(field_offset, STACK_FLOAT(-1));\n+                break;\n+              case ltos:\n+                obj->long_field_put(field_offset, STACK_LONG(-1));\n+                break;\n+              case dtos:\n+                obj->double_field_put(field_offset, STACK_DOUBLE(-1));\n+                break;\n+              case atos: {\n+                oop val = STACK_OBJECT(-1);\n+                VERIFY_OOP(val);\n+                obj->obj_field_put(field_offset, val);\n+                break;\n+              }\n+              default:\n+                ShouldNotReachHere();\n","filename":"src\/hotspot\/share\/interpreter\/zero\/bytecodeInterpreter.cpp","additions":132,"deletions":78,"binary":false,"changes":210,"status":"modified"}]}