{"files":[{"patch":"@@ -719,1 +719,6 @@\n-                        throw new InternalError(\"only nmethods should have a null compilation, here's a \" + ble.getClass());\n+                        if (ble instanceof MakeNotEntrantEvent && ((MakeNotEntrantEvent) ble).getCompileKind().equals(\"c2n\")) {\n+                            \/\/ this is ok for c2n\n+                            assert ((MakeNotEntrantEvent) ble).getLevel().equals(\"0\") : \"Should be level 0\";\n+                        } else {\n+                            throw new InternalError(\"only nmethods should have a null compilation, here's a \" + ble.getClass());\n+                        }\n@@ -1074,1 +1079,1 @@\n-            LogEvent e = new MakeNotEntrantEvent(Double.parseDouble(search(atts, \"stamp\")), id,\n+            MakeNotEntrantEvent e = new MakeNotEntrantEvent(Double.parseDouble(search(atts, \"stamp\")), id,\n@@ -1076,0 +1081,4 @@\n+            String compileKind = atts.getValue(\"compile_kind\");\n+            e.setCompileKind(compileKind);\n+            String level = atts.getValue(\"level\");\n+            e.setLevel(level);\n","filename":"src\/utils\/LogCompilation\/src\/main\/java\/com\/sun\/hotspot\/tools\/compiler\/LogParser.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -45,0 +45,10 @@\n+    \/**\n+     * The compilation level.\n+     *\/\n+    private String level;\n+\n+    \/**\n+     * The compile kind.\n+     *\/\n+    private String compileKind;\n+\n@@ -66,0 +76,33 @@\n+\n+  \/**\n+   * @return the level\n+   *\/\n+  public String getLevel() {\n+      return level;\n+  }\n+\n+  \/**\n+   * @param level the level to set\n+   *\/\n+  public void setLevel(String level) {\n+      this.level = level;\n+  }\n+\n+    \/**\n+   * @return the compileKind\n+   *\/\n+  public String getCompileKind() {\n+      return compileKind;\n+  }\n+\n+  \/**\n+   * @param compileKind the compileKind to set\n+   *\/\n+  public void setCompileKind(String compileKind) {\n+      this.compileKind = compileKind;\n+  }\n+\n+  public String toString() {\n+      return \"MakeNotEntrantEvent zombie:\" + isZombie() + \", id:\" + getId() + \", kind:\" + getCompileKind();\n+  }\n+\n","filename":"src\/utils\/LogCompilation\/src\/main\/java\/com\/sun\/hotspot\/tools\/compiler\/MakeNotEntrantEvent.java","additions":43,"deletions":0,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -79,0 +79,9 @@\n+    static final String setupArgsJFR[] = {\n+        \"java\",\n+        \"-XX:+IgnoreUnrecognizedVMOptions\",\n+        \"-XX:+UnlockDiagnosticVMOptions\",\n+        \"-XX:+LogCompilation\",\n+        \"-XX:LogFile=target\/jfr.log\",\n+        \"-XX:StartFlightRecording=dumponexit=true,filename=rwrecording.jfr\"\n+    };\n+\n@@ -84,1 +93,2 @@\n-        setupArgsNoTieredBatch\n+        setupArgsNoTieredBatch,\n+        setupArgsJFR\n@@ -95,1 +105,2 @@\n-            {\".\/target\/no_tiered_short_batch.log\"}\n+            {\".\/target\/no_tiered_short_batch.log\"},\n+            {\".\/target\/jfr.log\"},\n","filename":"src\/utils\/LogCompilation\/src\/test\/java\/com\/sun\/hotspot\/tools\/compiler\/TestLogCompilation.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"}]}