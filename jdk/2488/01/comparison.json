{"files":[{"patch":"@@ -3567,0 +3567,22 @@\n+bool os::Linux::shm_hugetlbfs_sanity_check(bool warn, size_t page_size) {\n+  \/\/ Try to create a large shared memory segment.\n+  int shmid = shmget(IPC_PRIVATE, page_size, SHM_HUGETLB|IPC_CREAT|SHM_R|SHM_W);\n+  if (shmid == -1) {\n+    \/\/ Possible reasons for shmget failure:\n+    \/\/ 1. shmmax is too small for the request.\n+    \/\/    > check shmmax value: cat \/proc\/sys\/kernel\/shmmax\n+    \/\/    > increase shmmax value: echo \"0xffffffff\" > \/proc\/sys\/kernel\/shmmax\n+    \/\/ 2. not enough large page memory.\n+    \/\/    > check available large pages: cat \/proc\/meminfo\n+    \/\/    > increase amount of large pages:\n+    \/\/          echo new_value > \/proc\/sys\/vm\/nr_hugepages\n+    if (warn) {\n+      warning(\"Large pages using UseSHM are not configured on this system.\");\n+    }\n+    return false;\n+  }\n+  \/\/ Managed to create a segment, now delete it.\n+  shmctl(shmid, IPC_RMID, NULL);\n+  return true;\n+}\n+\n@@ -3751,1 +3773,10 @@\n-  return UseSHM;\n+  if (UseSHM) {\n+    bool warn_on_failure = !FLAG_IS_DEFAULT(UseSHM);\n+    if (shm_hugetlbfs_sanity_check(warn_on_failure, page_size)) {\n+      return true;\n+    }\n+    UseSHM = false;\n+  }\n+\n+  log_warning(pagesize)(\"UseLargePages disabled, no large pages configured and available on the system.\");\n+  return false;\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":32,"deletions":1,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -88,0 +88,1 @@\n+  static bool shm_hugetlbfs_sanity_check(bool warn, size_t page_size);\n","filename":"src\/hotspot\/os\/linux\/os_linux.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -67,0 +67,5 @@\n+    static boolean checkLargePagesEnabled(OutputAnalyzer output) {\n+        String lp = output.firstMatch(\"Large Page Support: (\\\\w*)\", 1);\n+        return lp != null && lp.equals(\"Enabled\");\n+    }\n+\n@@ -85,1 +90,1 @@\n-                                                   \"-Xlog:pagesize\",\n+                                                   \"-Xlog:gc+init,pagesize\",\n@@ -92,2 +97,8 @@\n-        checkSmallTables(output, (cardsShouldUseLargePages ? largePageSize : smallPageSize));\n-        checkBitmaps(output, (bitmapShouldUseLargePages ? largePageSize : smallPageSize));\n+        \/\/ Make sure large pages are really enabled.\n+        if (checkLargePagesEnabled(output)) {\n+            checkSmallTables(output, (cardsShouldUseLargePages ? largePageSize : smallPageSize));\n+            checkBitmaps(output, (bitmapShouldUseLargePages ? largePageSize : smallPageSize));\n+        } else {\n+            checkSmallTables(output, smallPageSize);\n+            checkBitmaps(output, smallPageSize);\n+        }\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestLargePageUseForAuxMemory.java","additions":14,"deletions":3,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -64,0 +64,5 @@\n+        String lp = output.firstMatch(\"Large Page Support: (\\\\w*)\", 1);\n+        \/\/ Make sure large pages really are enabled.\n+        if (lp == null || lp.equals(\"Disabled\")) {\n+            return false;\n+        }\n@@ -87,1 +92,1 @@\n-                                                   \"-Xlog:pagesize,gc+heap+coops=debug\",\n+                                                   \"-Xlog:gc+init,pagesize,gc+heap+coops=debug\",\n@@ -100,1 +105,1 @@\n-                                                   \"-Xlog:pagesize,gc+heap+coops=debug\",\n+                                                   \"-Xlog:gc+init,pagesize,gc+heap+coops=debug\",\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestLargePageUseForHeap.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"}]}