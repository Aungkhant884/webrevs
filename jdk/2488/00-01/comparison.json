{"files":[{"patch":"@@ -3567,20 +3567,0 @@\n-\/\/ The capability needed to lock memory CAP_IPC_LOCK\n-#define CAP_IPC_LOCK      14\n-#define CAP_IPC_LOCK_BIT  (1 << CAP_IPC_LOCK)\n-\n-static bool can_lock_memory() {\n-  bool can_lock = false;\n-  FILE* f = ::fopen(\"\/proc\/self\/status\", \"r\");\n-  char buf[256];\n-  while (::fgets(buf, sizeof(buf), f) != NULL) {\n-    size_t cap;\n-    \/\/ Check effective capabilities.\n-    if (sscanf(buf, \"CapEff: %\" PRIxPTR, &cap) == 1) {\n-      can_lock = (cap & CAP_IPC_LOCK_BIT) == CAP_IPC_LOCK_BIT;\n-      break;\n-    }\n-  }\n-  ::fclose(f);\n-  return can_lock;\n-}\n-\n@@ -3604,18 +3584,0 @@\n-\n-  \/\/ Check if process is privileged and can lock memory or if there will be a limit\n-  \/\/ on how much memory can be locked by SHM.\n-  if (!can_lock_memory()) {\n-    struct rlimit64 lock_limit;\n-    getrlimit64(RLIMIT_MEMLOCK, &lock_limit);\n-\n-    if (warn) {\n-      warning(\"UseSHM large pages limit due to missing CAP_IPC_LOCK capability: \" SIZE_FORMAT \"%s\",\n-              byte_size_in_exact_unit(lock_limit.rlim_max),\n-              exact_unit_for_byte_size(lock_limit.rlim_max));\n-    } else {\n-      log_debug(pagesize)(\"UseSHM large pages limit due to missing CAP_IPC_LOCK capability: \" SIZE_FORMAT \"%s\",\n-                          byte_size_in_exact_unit(lock_limit.rlim_max),\n-                          exact_unit_for_byte_size(lock_limit.rlim_max));\n-    }\n-  }\n-\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":0,"deletions":38,"binary":false,"changes":38,"status":"modified"}]}