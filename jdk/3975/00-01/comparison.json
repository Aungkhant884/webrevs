{"files":[{"patch":"@@ -24,2 +24,2 @@\n-#ifndef CPU_AARCH64_GC_G1_G1GLOBALS_ARM_HPP\n-#define CPU_AARCH64_GC_G1_G1GLOBALS_ARM_HPP\n+#ifndef CPU_ARM_GC_G1_G1GLOBALS_ARM_HPP\n+#define CPU_ARM_GC_G1_G1GLOBALS_ARM_HPP\n@@ -29,1 +29,1 @@\n-#endif \/\/ CPU_AARCH64_GC_G1_G1GLOBALS_ARM_HPP\n+#endif \/\/ CPU_ARM_GC_G1_G1GLOBALS_ARM_HPP\n","filename":"src\/hotspot\/cpu\/arm\/gc\/g1\/g1Globals_arm.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -24,2 +24,2 @@\n-#ifndef CPU_AARCH64_GC_G1_G1GLOBALS_PPC_HPP\n-#define CPU_AARCH64_GC_G1_G1GLOBALS_PPC_HPP\n+#ifndef CPU_PPC_GC_G1_G1GLOBALS_PPC_HPP\n+#define CPU_PPC_GC_G1_G1GLOBALS_PPC_HPP\n@@ -29,1 +29,1 @@\n-#endif \/\/ CPU_AARCH64_GC_G1_G1GLOBALS_PPC_HPP\n+#endif \/\/ CPU_PPC_GC_G1_G1GLOBALS_PPC_HPP\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/g1\/g1Globals_ppc.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -24,2 +24,2 @@\n-#ifndef CPU_AARCH64_GC_G1_G1GLOBALS_S390_HPP\n-#define CPU_AARCH64_GC_G1_G1GLOBALS_S390_HPP\n+#ifndef CPU_S390_GC_G1_G1GLOBALS_S390_HPP\n+#define CPU_S390_GC_G1_G1GLOBALS_S390_HPP\n@@ -29,1 +29,1 @@\n-#endif \/\/ CPU_AARCH64_GC_G1_G1GLOBALS_S390_HPP\n+#endif \/\/ CPU_S390_GC_G1_G1GLOBALS_S390_HPP\n","filename":"src\/hotspot\/cpu\/s390\/gc\/g1\/g1Globals_s390.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -24,2 +24,2 @@\n-#ifndef CPU_AARCH64_GC_G1_G1GLOBALS_X86_HPP\n-#define CPU_AARCH64_GC_G1_G1GLOBALS_X86_HPP\n+#ifndef CPU_X86_GC_G1_G1GLOBALS_X86_HPP\n+#define CPU_X86_GC_G1_G1GLOBALS_X86_HPP\n@@ -29,1 +29,1 @@\n-#endif \/\/ CPU_AARCH64_GC_G1_G1GLOBALS_X86_HPP\n+#endif \/\/ CPU_X86_GC_G1_G1GLOBALS_X86_HPP\n","filename":"src\/hotspot\/cpu\/x86\/gc\/g1\/g1Globals_x86.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -24,2 +24,2 @@\n-#ifndef CPU_AARCH64_GC_G1_G1GLOBALS_ZERO_HPP\n-#define CPU_AARCH64_GC_G1_G1GLOBALS_ZERO_HPP\n+#ifndef CPU_ZERO_GC_G1_G1GLOBALS_ZERO_HPP\n+#define CPU_ZERO_GC_G1_G1GLOBALS_ZERO_HPP\n@@ -29,1 +29,1 @@\n-#endif \/\/ CPU_AARCH64_GC_G1_G1GLOBALS_ZERO_HPP\n+#endif \/\/ CPU_ZERO_GC_G1_G1GLOBALS_ZERO_HPP\n","filename":"src\/hotspot\/cpu\/zero\/gc\/g1\/g1Globals_zero.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -96,2 +96,2 @@\n-  \/\/ Mark the given card as Dirty if it is Clean. Returns whether the card has\n-  \/\/ been Clean before this operation. This result may be inaccurate as it does not\n+  \/\/ Mark the given card as Dirty if it is Clean. Returns whether the card was\n+  \/\/ Clean before this operation. This result may be inaccurate as it does not\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardTable.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1071,1 +1071,1 @@\n-  STATIC_ASSERT(is_power_of_2(CacheSize));\n+  static_assert(is_power_of_2(CacheSize), \"Cache size must be power of 2\");\n@@ -1081,2 +1081,2 @@\n-  \/\/ Initial content of all elements in the cache. It's value be \"neutral\", i.e.\n-  \/\/ no work done on it.\n+  \/\/ Initial content of all elements in the cache. It's value should be\n+  \/\/ \"neutral\", i.e. no work done on it when processing it.\n@@ -1085,0 +1085,2 @@\n+  ~G1MergeHeapRootsPrefetchCache() { }\n+\n@@ -1137,1 +1139,1 @@\n-        \/\/ Initially set dummy card value to dirty to avoid any actual mark work if we\n+        \/\/ Initially set dummy card value to Dirty to avoid any actual mark work if we\n@@ -1330,1 +1332,1 @@\n-        \/\/ Initially set dummy card value to clean to avoid any actual work if we\n+        \/\/ Initially set dummy card value to Clean to avoid any actual work if we\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.cpp","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"}]}