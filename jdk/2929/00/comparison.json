{"files":[{"patch":"@@ -582,1 +582,1 @@\n-                              THREAD); \/\/ <-- failure is handled below\n+                              CHECK_NULL);\n@@ -589,21 +589,2 @@\n-    if (!HAS_PENDING_EXCEPTION && (obj != NULL)) {\n-      klass = java_lang_Class::as_Klass(obj);\n-    } else { \/\/ load classes in bootclasspath\/a\n-      if (HAS_PENDING_EXCEPTION) {\n-        ArchiveUtils::check_for_oom(PENDING_EXCEPTION); \/\/ exit on OOM\n-        CLEAR_PENDING_EXCEPTION;\n-      }\n-\n-      if (non_array) {\n-        Klass* k = SystemDictionary::resolve_or_null(class_name_symbol, CHECK_NULL);\n-        if (k != NULL) {\n-          klass = k;\n-        } else {\n-          if (!HAS_PENDING_EXCEPTION) {\n-            THROW_NULL(vmSymbols::java_lang_ClassNotFoundException());\n-          } else {\n-            ArchiveUtils::check_for_oom(PENDING_EXCEPTION); \/\/ exit on OOM\n-          }\n-        }\n-      }\n-    }\n+    assert(obj != NULL, \"jdk.internal.loader.BuiltinClassLoader::loadClass never returns null\");\n+    klass = java_lang_Class::as_Klass(obj);\n","filename":"src\/hotspot\/share\/classfile\/classListParser.cpp","additions":3,"deletions":22,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -697,4 +697,7 @@\n-      if (klass == NULL &&\n-          (PENDING_EXCEPTION->klass()->name() == vmSymbols::java_lang_ClassNotFoundException())) {\n-        \/\/ print a warning only when the pending exception is class not found\n-        log_warning(cds)(\"Preload Warning: Cannot find %s\", parser.current_class_name());\n+      if (klass == NULL) {\n+        Symbol* exception_klass_name = PENDING_EXCEPTION->klass()->name();\n+        if (exception_klass_name == vmSymbols::java_lang_ClassNotFoundException() ||\n+            exception_klass_name == vmSymbols::java_lang_UnsupportedClassVersionError()) {\n+          \/\/ print a warning only when the pending exception is class not found\n+          log_warning(cds)(\"Preload Warning: Cannot find %s\", parser.current_class_name());\n+        }\n","filename":"src\/hotspot\/share\/memory\/metaspaceShared.cpp","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,2 +51,2 @@\n-    private static final String APP_MODULE_CLASS = \"com\/sun\/tools\/javac\/MyMain\";\n-    private static final String BOOT_APPEND_MODULE_CLASS = \"sun\/nio\/cs\/ext\/MyClass\";\n+    private static final String APP_MODULE_CLASS = \"com\/sun\/tools\/javac\/MyMain\";     \/\/ in module jdk.compiler (app loader)\n+    private static final String BOOT_APPEND_MODULE_CLASS = \"sun\/nio\/cs\/ext\/MyClass\"; \/\/ in module jdk.charsets (platform loader)\n@@ -107,1 +107,3 @@\n-        if (!TestCommon.isUnableToMap(output1)) {\n+        if (!TestCommon.isUnableToMap(output1) &&\n+            !CDSTestUtils.DYNAMIC_DUMP \/\/ these messages aren't available in dynamic dump model\n+            ) {\n@@ -110,1 +112,10 @@\n-                output1.shouldNotContain(\"Preload Warning: Cannot find \" + archiveClass);\n+                String msg = \"Preload Warning: Cannot find \" + archiveClass;\n+                if (archiveClass.equals(BOOT_APPEND_CLASS)) {\n+                    \/\/ This class is in a package (sun\/nio\/cs\/ext1) that doesn't belong to any\n+                    \/\/ of the built-in modules. We can load it from -Xbootclasspath\/a:\n+                    output1.shouldNotContain(msg);\n+                } else {\n+                    \/\/ This class belongs a package that belongs to a built-in module.\n+                    \/\/ We shouldn't load it from -Xbootclasspath\/a:\n+                    output1.shouldContain(msg);\n+                }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/classpathtests\/BootAppendTests.java","additions":16,"deletions":5,"binary":false,"changes":21,"status":"modified"}]}