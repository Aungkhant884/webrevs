{"files":[{"patch":"@@ -6199,1 +6199,1 @@\n-  predicate(Matcher::vector_length(n) <= 8 && VectorNode::is_vshift_cnt(n->in(2)));\n+  predicate(Matcher::vector_length(n) <= 8 && !n->as_ShiftV()->is_var_shift());\n@@ -6219,1 +6219,1 @@\n-  predicate(Matcher::vector_length(n) == 16 && VectorNode::is_vshift_cnt(n->in(2)) &&\n+  predicate(Matcher::vector_length(n) == 16 && !n->as_ShiftV()->is_var_shift() &&\n@@ -6244,1 +6244,1 @@\n-  predicate(Matcher::vector_length(n) == 16 && VectorNode::is_vshift_cnt(n->in(2)) &&\n+  predicate(Matcher::vector_length(n) == 16 && !n->as_ShiftV()->is_var_shift() &&\n@@ -6265,1 +6265,1 @@\n-  predicate(Matcher::vector_length(n) == 32 && VectorNode::is_vshift_cnt(n->in(2)));\n+  predicate(Matcher::vector_length(n) == 32 && !n->as_ShiftV()->is_var_shift());\n@@ -6290,1 +6290,1 @@\n-  predicate(Matcher::vector_length(n) == 64 && VectorNode::is_vshift_cnt(n->in(2)));\n+  predicate(Matcher::vector_length(n) == 64 && !n->as_ShiftV()->is_var_shift());\n@@ -6323,1 +6323,1 @@\n-  predicate(VectorNode::is_vshift_cnt(n->in(2)));\n+  predicate(!n->as_ShiftV()->is_var_shift());\n@@ -6354,1 +6354,1 @@\n-  predicate(VectorNode::is_vshift_cnt(n->in(2)));\n+  predicate(!n->as_ShiftV()->is_var_shift());\n@@ -6408,1 +6408,1 @@\n-  predicate(VectorNode::is_vshift_cnt(n->in(2)));\n+  predicate(!n->as_ShiftV()->is_var_shift());\n@@ -6449,1 +6449,1 @@\n-  predicate(VectorNode::is_vshift_cnt(n->in(2)) && UseAVX <= 2);\n+  predicate(!n->as_ShiftV()->is_var_shift() && UseAVX <= 2);\n@@ -6478,1 +6478,1 @@\n-  predicate(VectorNode::is_vshift_cnt(n->in(2)) && UseAVX > 2);\n+  predicate(!n->as_ShiftV()->is_var_shift() && UseAVX > 2);\n@@ -6492,1 +6492,1 @@\n-            !VectorNode::is_vshift_cnt(n->in(2)) &&\n+            n->as_ShiftV()->is_var_shift() &&\n@@ -6512,1 +6512,1 @@\n-            !VectorNode::is_vshift_cnt(n->in(2)) &&\n+            n->as_ShiftV()->is_var_shift() &&\n@@ -6540,1 +6540,1 @@\n-            !VectorNode::is_vshift_cnt(n->in(2)) &&\n+            n->as_ShiftV()->is_var_shift() &&\n@@ -6576,1 +6576,1 @@\n-            !VectorNode::is_vshift_cnt(n->in(2)) &&\n+            n->as_ShiftV()->is_var_shift() &&\n@@ -6595,1 +6595,1 @@\n-            !VectorNode::is_vshift_cnt(n->in(2)) &&\n+            n->as_ShiftV()->is_var_shift() &&\n@@ -6619,1 +6619,1 @@\n-            !VectorNode::is_vshift_cnt(n->in(2)) &&\n+            n->as_ShiftV()->is_var_shift() &&\n@@ -6644,1 +6644,1 @@\n-            !VectorNode::is_vshift_cnt(n->in(2)) &&\n+            n->as_ShiftV()->is_var_shift() &&\n@@ -6679,1 +6679,1 @@\n-  predicate(!VectorNode::is_vshift_cnt(n->in(2)) &&\n+  predicate(n->as_ShiftV()->is_var_shift() &&\n@@ -6700,1 +6700,1 @@\n-  predicate(!VectorNode::is_vshift_cnt(n->in(2)));\n+  predicate(n->as_ShiftV()->is_var_shift());\n@@ -6717,1 +6717,1 @@\n-  predicate(!VectorNode::is_vshift_cnt(n->in(2)));\n+  predicate(n->as_ShiftV()->is_var_shift());\n@@ -6734,1 +6734,1 @@\n-            !VectorNode::is_vshift_cnt(n->in(2)) &&\n+            n->as_ShiftV()->is_var_shift() &&\n@@ -6749,1 +6749,1 @@\n-  predicate(!VectorNode::is_vshift_cnt(n->in(2)) &&\n+  predicate(n->as_ShiftV()->is_var_shift() &&\n@@ -9036,0 +9036,1 @@\n+  predicate(!n->as_ShiftV()->is_var_shift());\n@@ -9044,1 +9045,0 @@\n-    bool is_varshift = !VectorNode::is_vshift_cnt_opcode(in(2)->isa_Mach()->ideal_Opcode());\n@@ -9046,1 +9046,17 @@\n-                   $dst$$XMMRegister, $src2$$XMMRegister, true, vlen_enc, is_varshift);\n+                   $dst$$XMMRegister, $src2$$XMMRegister, true, vlen_enc, false);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+instruct vlshiftv_reg_masked(vec dst, vec src2, kReg mask) %{\n+  predicate(n->as_ShiftV()->is_var_shift());\n+  match(Set dst (LShiftVS (Binary dst src2) mask));\n+  match(Set dst (LShiftVI (Binary dst src2) mask));\n+  match(Set dst (LShiftVL (Binary dst src2) mask));\n+  format %{ \"vplshiftv_masked $dst, $dst, $src2, $mask\\t! lshift masked operation\" %}\n+  ins_encode %{\n+    int vlen_enc = vector_length_encoding(this);\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    int opc = this->ideal_Opcode();\n+    __ evmasked_op(opc, bt, $mask$$KRegister, $dst$$XMMRegister,\n+                   $dst$$XMMRegister, $src2$$XMMRegister, true, vlen_enc, true);\n@@ -9082,0 +9098,1 @@\n+  predicate(!n->as_ShiftV()->is_var_shift());\n@@ -9090,1 +9107,0 @@\n-    bool is_varshift = !VectorNode::is_vshift_cnt_opcode(in(2)->isa_Mach()->ideal_Opcode());\n@@ -9092,1 +9108,17 @@\n-                   $dst$$XMMRegister, $src2$$XMMRegister, true, vlen_enc, is_varshift);\n+                   $dst$$XMMRegister, $src2$$XMMRegister, true, vlen_enc, false);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+instruct vrshiftv_reg_masked(vec dst, vec src2, kReg mask) %{\n+  predicate(n->as_ShiftV()->is_var_shift());\n+  match(Set dst (RShiftVS (Binary dst src2) mask));\n+  match(Set dst (RShiftVI (Binary dst src2) mask));\n+  match(Set dst (RShiftVL (Binary dst src2) mask));\n+  format %{ \"vprshiftv_masked $dst, $dst, $src2, $mask\\t! rshift masked operation\" %}\n+  ins_encode %{\n+    int vlen_enc = vector_length_encoding(this);\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    int opc = this->ideal_Opcode();\n+    __ evmasked_op(opc, bt, $mask$$KRegister, $dst$$XMMRegister,\n+                   $dst$$XMMRegister, $src2$$XMMRegister, true, vlen_enc, true);\n@@ -9128,0 +9160,1 @@\n+  predicate(!n->as_ShiftV()->is_var_shift());\n@@ -9136,1 +9169,0 @@\n-    bool is_varshift = !VectorNode::is_vshift_cnt_opcode(in(2)->isa_Mach()->ideal_Opcode());\n@@ -9138,1 +9170,17 @@\n-                   $dst$$XMMRegister, $src2$$XMMRegister, true, vlen_enc, is_varshift);\n+                   $dst$$XMMRegister, $src2$$XMMRegister, true, vlen_enc, false);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+instruct vurshiftv_reg_masked(vec dst, vec src2, kReg mask) %{\n+  predicate(n->as_ShiftV()->is_var_shift());\n+  match(Set dst (URShiftVS (Binary dst src2) mask));\n+  match(Set dst (URShiftVI (Binary dst src2) mask));\n+  match(Set dst (URShiftVL (Binary dst src2) mask));\n+  format %{ \"vpurshiftv_masked $dst, $dst, $src2, $mask\\t! urshift masked operation\" %}\n+  ins_encode %{\n+    int vlen_enc = vector_length_encoding(this);\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    int opc = this->ideal_Opcode();\n+    __ evmasked_op(opc, bt, $mask$$KRegister, $dst$$XMMRegister,\n+                   $dst$$XMMRegister, $src2$$XMMRegister, true, vlen_enc, true);\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":76,"deletions":28,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -178,0 +178,1 @@\n+class ShiftVNode;\n@@ -714,0 +715,1 @@\n+        DEFINE_CLASS_ID(ShiftV, Vector, 3)\n@@ -948,0 +950,1 @@\n+  DEFINE_CLASS_QUERY(ShiftV)\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -526,0 +526,1 @@\n+    bool is_var_shift = VectorNode::is_shift_opcode(opc);\n@@ -529,1 +530,1 @@\n-        operation = VectorNode::make(sopc, opd1, opd2, vt, is_vector_mask(vbox_klass));\n+        operation = VectorNode::make(sopc, opd1, opd2, vt, is_vector_mask(vbox_klass), is_var_shift);\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -475,1 +475,1 @@\n-VectorNode* VectorNode::make(int vopc, Node* n1, Node* n2, const TypeVect* vt, bool is_mask) {\n+VectorNode* VectorNode::make(int vopc, Node* n1, Node* n2, const TypeVect* vt, bool is_mask, bool is_var_shift) {\n@@ -529,4 +529,4 @@\n-  case Op_LShiftVB: return new LShiftVBNode(n1, n2, vt);\n-  case Op_LShiftVS: return new LShiftVSNode(n1, n2, vt);\n-  case Op_LShiftVI: return new LShiftVINode(n1, n2, vt);\n-  case Op_LShiftVL: return new LShiftVLNode(n1, n2, vt);\n+  case Op_LShiftVB: return new LShiftVBNode(n1, n2, vt, is_var_shift);\n+  case Op_LShiftVS: return new LShiftVSNode(n1, n2, vt, is_var_shift);\n+  case Op_LShiftVI: return new LShiftVINode(n1, n2, vt, is_var_shift);\n+  case Op_LShiftVL: return new LShiftVLNode(n1, n2, vt, is_var_shift);\n@@ -534,4 +534,4 @@\n-  case Op_RShiftVB: return new RShiftVBNode(n1, n2, vt);\n-  case Op_RShiftVS: return new RShiftVSNode(n1, n2, vt);\n-  case Op_RShiftVI: return new RShiftVINode(n1, n2, vt);\n-  case Op_RShiftVL: return new RShiftVLNode(n1, n2, vt);\n+  case Op_RShiftVB: return new RShiftVBNode(n1, n2, vt, is_var_shift);\n+  case Op_RShiftVS: return new RShiftVSNode(n1, n2, vt, is_var_shift);\n+  case Op_RShiftVI: return new RShiftVINode(n1, n2, vt, is_var_shift);\n+  case Op_RShiftVL: return new RShiftVLNode(n1, n2, vt, is_var_shift);\n@@ -539,4 +539,4 @@\n-  case Op_URShiftVB: return new URShiftVBNode(n1, n2, vt);\n-  case Op_URShiftVS: return new URShiftVSNode(n1, n2, vt);\n-  case Op_URShiftVI: return new URShiftVINode(n1, n2, vt);\n-  case Op_URShiftVL: return new URShiftVLNode(n1, n2, vt);\n+  case Op_URShiftVB: return new URShiftVBNode(n1, n2, vt, is_var_shift);\n+  case Op_URShiftVS: return new URShiftVSNode(n1, n2, vt, is_var_shift);\n+  case Op_URShiftVI: return new URShiftVINode(n1, n2, vt, is_var_shift);\n+  case Op_URShiftVL: return new URShiftVLNode(n1, n2, vt, is_var_shift);\n@@ -558,1 +558,1 @@\n-VectorNode* VectorNode::make(int opc, Node* n1, Node* n2, uint vlen, BasicType bt) {\n+VectorNode* VectorNode::make(int opc, Node* n1, Node* n2, uint vlen, BasicType bt, bool is_var_shift) {\n@@ -563,1 +563,1 @@\n-  return make(vopc, n1, n2, vt);\n+  return make(vopc, n1, n2, vt, false, is_var_shift);\n@@ -1292,2 +1292,2 @@\n-  return new OrVNode(phase->transform(VectorNode::make(shiftLOpc, src, shiftLCnt, vlen, bt)),\n-                     phase->transform(VectorNode::make(shiftROpc, src, shiftRCnt, vlen, bt)),\n+  return new OrVNode(phase->transform(VectorNode::make(shiftLOpc, src, shiftLCnt, vlen, bt, is_binary_vector_op)),\n+                     phase->transform(VectorNode::make(shiftROpc, src, shiftRCnt, vlen, bt, is_binary_vector_op)),\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -75,2 +75,2 @@\n-  static VectorNode* make(int opc, Node* n1, Node* n2, uint vlen, BasicType bt);\n-  static VectorNode* make(int vopc, Node* n1, Node* n2, const TypeVect* vt, bool is_mask = false);\n+  static VectorNode* make(int opc, Node* n1, Node* n2, uint vlen, BasicType bt, bool is_var_shift = false);\n+  static VectorNode* make(int vopc, Node* n1, Node* n2, const TypeVect* vt, bool is_mask = false, bool is_var_shift = false);\n@@ -534,0 +534,1 @@\n+ bool _is_var_shift;\n@@ -535,1 +536,4 @@\n-  ShiftVNode(Node* in1, Node* in2, const TypeVect* vt) : VectorNode(in1,in2,vt) {}\n+  ShiftVNode(Node* in1, Node* in2, const TypeVect* vt, bool is_var_shift) :\n+    VectorNode(in1,in2,vt), _is_var_shift(is_var_shift) {\n+    init_class_id(Class_ShiftV);\n+  }\n@@ -538,0 +542,2 @@\n+  bool is_var_shift() { return _is_var_shift;}\n+  virtual  uint  size_of() const { return sizeof(ShiftVNode); }\n@@ -544,1 +550,2 @@\n-  LShiftVBNode(Node* in1, Node* in2, const TypeVect* vt) : ShiftVNode(in1,in2,vt) {}\n+  LShiftVBNode(Node* in1, Node* in2, const TypeVect* vt, bool is_var_shift=false) :\n+    ShiftVNode(in1,in2,vt,is_var_shift) {}\n@@ -552,1 +559,2 @@\n-  LShiftVSNode(Node* in1, Node* in2, const TypeVect* vt) : ShiftVNode(in1,in2,vt) {}\n+  LShiftVSNode(Node* in1, Node* in2, const TypeVect* vt, bool is_var_shift=false) :\n+    ShiftVNode(in1,in2,vt,is_var_shift) {}\n@@ -560,1 +568,2 @@\n-  LShiftVINode(Node* in1, Node* in2, const TypeVect* vt) : ShiftVNode(in1,in2,vt) {}\n+  LShiftVINode(Node* in1, Node* in2, const TypeVect* vt, bool is_var_shift=false) :\n+    ShiftVNode(in1,in2,vt,is_var_shift) {}\n@@ -568,1 +577,2 @@\n-  LShiftVLNode(Node* in1, Node* in2, const TypeVect* vt) : ShiftVNode(in1,in2,vt) {}\n+  LShiftVLNode(Node* in1, Node* in2, const TypeVect* vt, bool is_var_shift=false) :\n+    ShiftVNode(in1,in2,vt,is_var_shift) {}\n@@ -576,1 +586,2 @@\n-  RShiftVBNode(Node* in1, Node* in2, const TypeVect* vt) : ShiftVNode(in1,in2,vt) {}\n+  RShiftVBNode(Node* in1, Node* in2, const TypeVect* vt, bool is_var_shift=false) :\n+    ShiftVNode(in1,in2,vt,is_var_shift) {}\n@@ -584,1 +595,2 @@\n-  RShiftVSNode(Node* in1, Node* in2, const TypeVect* vt) : ShiftVNode(in1,in2,vt) {}\n+  RShiftVSNode(Node* in1, Node* in2, const TypeVect* vt, bool is_var_shift=false) :\n+    ShiftVNode(in1,in2,vt,is_var_shift) {}\n@@ -592,1 +604,2 @@\n-  RShiftVINode(Node* in1, Node* in2, const TypeVect* vt) : ShiftVNode(in1,in2,vt) {}\n+  RShiftVINode(Node* in1, Node* in2, const TypeVect* vt, bool is_var_shift=false) :\n+    ShiftVNode(in1,in2,vt,is_var_shift) {}\n@@ -600,1 +613,2 @@\n-  RShiftVLNode(Node* in1, Node* in2, const TypeVect* vt) : ShiftVNode(in1,in2,vt) {}\n+  RShiftVLNode(Node* in1, Node* in2, const TypeVect* vt, bool is_var_shift=false) :\n+    ShiftVNode(in1,in2,vt,is_var_shift) {}\n@@ -608,1 +622,2 @@\n-  URShiftVBNode(Node* in1, Node* in2, const TypeVect* vt) : ShiftVNode(in1,in2,vt) {}\n+  URShiftVBNode(Node* in1, Node* in2, const TypeVect* vt, bool is_var_shift=false) :\n+    ShiftVNode(in1,in2,vt,is_var_shift) {}\n@@ -616,1 +631,2 @@\n-  URShiftVSNode(Node* in1, Node* in2, const TypeVect* vt) : ShiftVNode(in1,in2,vt) {}\n+  URShiftVSNode(Node* in1, Node* in2, const TypeVect* vt, bool is_var_shift=false) :\n+    ShiftVNode(in1,in2,vt,is_var_shift) {}\n@@ -624,1 +640,2 @@\n-  URShiftVINode(Node* in1, Node* in2, const TypeVect* vt) : ShiftVNode(in1,in2,vt) {}\n+  URShiftVINode(Node* in1, Node* in2, const TypeVect* vt, bool is_var_shift=false) :\n+    ShiftVNode(in1,in2,vt,is_var_shift) {}\n@@ -632,1 +649,2 @@\n-  URShiftVLNode(Node* in1, Node* in2, const TypeVect* vt) : ShiftVNode(in1,in2,vt) {}\n+  URShiftVLNode(Node* in1, Node* in2, const TypeVect* vt, bool is_var_shift=false) :\n+     ShiftVNode(in1,in2,vt,is_var_shift) {}\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":33,"deletions":15,"binary":false,"changes":48,"status":"modified"}]}