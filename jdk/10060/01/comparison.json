{"files":[{"patch":"@@ -442,0 +442,5 @@\n+    private record HashCheck(ModuleHashes hashes,\n+                             String dn,\n+                             ModuleReferenceImpl mref,\n+                             ModuleDescriptor descriptor) {}\n+\n@@ -447,0 +452,2 @@\n+        \/\/ Do initial checks, collect modules for hashing.\n+        List<HashCheck> hashChecks = new ArrayList<>();\n@@ -448,1 +455,0 @@\n-\n@@ -474,10 +480,1 @@\n-                    byte[] recordedHash = hashes.hashFor(dn);\n-                    byte[] actualHash = other.computeHash(algorithm);\n-                    if (actualHash == null)\n-                        findFail(\"Unable to compute the hash of module %s\", dn);\n-                    if (!Arrays.equals(recordedHash, actualHash)) {\n-                        HexFormat hex = HexFormat.of();\n-                        findFail(\"Hash of %s (%s) differs to expected hash (%s)\" +\n-                                 \" recorded in %s\", dn, hex.formatHex(actualHash),\n-                                hex.formatHex(recordedHash), descriptor.name());\n-                    }\n+                    hashChecks.add(new HashCheck(hashes, dn, other, descriptor));\n@@ -486,0 +483,1 @@\n+        }\n@@ -487,0 +485,15 @@\n+        \/\/ Parallel hash computation, populating the cache in ModuleReferenceImpl-s\n+        hashChecks.stream().parallel().forEach(hc -> hc.mref().computeHash(hc.hashes().algorithm()));\n+\n+        \/\/ Check the hashing results\n+        for (HashCheck hc : hashChecks) {\n+            byte[] recordedHash = hc.hashes().hashFor(hc.dn());\n+            byte[] actualHash = hc.mref().computeHash(hc.hashes().algorithm());\n+            if (actualHash == null)\n+                findFail(\"Unable to compute the hash of module %s\", hc.dn());\n+            if (!Arrays.equals(recordedHash, actualHash)) {\n+                HexFormat hex = HexFormat.of();\n+                findFail(\"Hash of %s (%s) differs to expected hash (%s)\" +\n+                         \" recorded in %s\", hc.dn(), hex.formatHex(actualHash),\n+                         hex.formatHex(recordedHash), hc.descriptor().name());\n+            }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/module\/Resolver.java","additions":24,"deletions":11,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,1 @@\n+import java.util.concurrent.ConcurrentHashMap;\n@@ -46,0 +47,2 @@\n+import jdk.internal.module.ModuleReferenceImpl;\n+\n@@ -165,7 +168,7 @@\n-        Map<String, byte[]> nameToHash = new TreeMap<>();\n-        for (ModuleReference mref : mrefs) {\n-            try (ModuleReader reader = mref.open()) {\n-                byte[] hash = computeHash(reader, algorithm);\n-                nameToHash.put(mref.descriptor().name(), hash);\n-            } catch (IOException ioe) {\n-                throw new UncheckedIOException(ioe);\n+        Map<String, byte[]> nameToHash = new ConcurrentHashMap<>();\n+        mrefs.stream().parallel().forEach(mref -> {\n+            byte[] hash = null;\n+\n+            \/\/ Try to ask the internal cache first\n+            if (mref instanceof ModuleReferenceImpl mri) {\n+                hash = mri.computeHash(algorithm);\n@@ -173,2 +176,14 @@\n-        }\n-        return new ModuleHashes(algorithm, nameToHash);\n+\n+            \/\/ Compute the hash directly otherwise\n+            if (hash == null) {\n+                try (ModuleReader reader = mref.open()) {\n+                    hash = computeHash(reader, algorithm);\n+                } catch (IOException ioe) {\n+                    throw new UncheckedIOException(ioe);\n+                }\n+            }\n+\n+            nameToHash.put(mref.descriptor().name(), hash);\n+        });\n+        \/\/ nameToHash needs to be sorted by name for reproducibility\n+        return new ModuleHashes(algorithm, new TreeMap<>(nameToHash));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModuleHashes.java","additions":25,"deletions":10,"binary":false,"changes":35,"status":"modified"}]}