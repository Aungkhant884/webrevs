{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,1 +69,1 @@\n- * operates over into sets called <i>equivalence classes<\/i>. All the\n+ * operates over into sets called <i>equivalence classes<\/i>.  All the\n@@ -71,10 +71,9 @@\n- * relation. At least for some purposes, all the members of the\n- * equivalence classes are substitutable for each other.  In\n- * particular, in a numeric expression equivalent values can be\n- * <em>substituted<\/em> for one another without changing the result of\n- * the expression, meaning changing the equivalence class of the result\n- * of the expression.\n- * \n- * <p>Notably, the\n- * built-in {@code ==} operation on floating-point values does\n- * <em>not<\/em> implement an equivalence relation. Despite not\n+ * relation. An equivalence class may contain only a single member. At\n+ * least for some purposes, all the members of an equivalence class\n+ * are substitutable for each other.  In particular, in a numeric\n+ * expression equivalent values can be <em>substituted<\/em> for one\n+ * another without changing the result of the expression, meaning\n+ * changing the equivalence class of the result of the expression.\n+ *\n+ * <p>Notably, the built-in {@code ==} operation on floating-point\n+ * values is <em>not<\/em> an equivalence relation. Despite not\n@@ -84,1 +83,1 @@\n- * properties of an equivalence relations are not satisfied by {@code\n+ * properties of an equivalence relation are not satisfied by {@code\n@@ -115,4 +114,4 @@\n- * \n- * <p>To provide the appropriate semantics for {@code equals} and {@code\n- * compareTo} methods, those methods cannot simply to wrappers around\n- * {@code ==} or ordered comparison operations. Instead, {@link\n+ *\n+ * <p>To provide the appropriate semantics for {@code equals} and\n+ * {@code compareTo} methods, those methods cannot simply be wrappers\n+ * around {@code ==} or ordered comparison operations. Instead, {@link\n@@ -134,1 +133,1 @@\n- * \n+ *\n@@ -1060,1 +1059,1 @@\n-\n+     *\n@@ -1065,1 +1064,1 @@\n-\n+     *\n@@ -1078,1 +1077,1 @@\n-     \n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Double.java","additions":20,"deletions":21,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,0 +54,8 @@\n+ * <h2><a id=equivalenceRelation>Floating-point Equality, Equivalence,\n+ * and Comparison<\/a><\/h2>\n+ *\n+ * The class {@code java.lang.Double} has a {a\n+ * href=\"Double.html#equivalenceRelation\">discussion of equality,\n+ * equivalence, and comparison of floating-point values} that is\n+ * equality applicable to {@code float} values.\n+ *\n@@ -714,22 +722,9 @@\n-     * <p>Note that in most cases, for two instances of class\n-     * {@code Float}, {@code f1} and {@code f2}, the value\n-     * of {@code f1.equals(f2)} is {@code true} if and only if\n-     *\n-     * <blockquote><pre>\n-     *   f1.floatValue() == f2.floatValue()\n-     * <\/pre><\/blockquote>\n-     *\n-     * <p>also has the value {@code true}. However, there are two exceptions:\n-     * <ul>\n-     * <li>If {@code f1} and {@code f2} both represent\n-     *     {@code Float.NaN}, then the {@code equals} method returns\n-     *     {@code true}, even though {@code Float.NaN==Float.NaN}\n-     *     has the value {@code false}.\n-     * <li>If {@code f1} represents {@code +0.0f} while\n-     *     {@code f2} represents {@code -0.0f}, or vice\n-     *     versa, the {@code equal} test has the value\n-     *     {@code false}, even though {@code 0.0f==-0.0f}\n-     *     has the value {@code true}.\n-     * <\/ul>\n-     *\n-     * This definition allows hash tables to operate properly.\n+     * @apiNote\n+     * This method is defined in terms of {@link\n+     * #floatToIntBits(float)} rather than the {@code ==} operator on\n+     * {@code float} values since the {@code ==} operator does\n+     * <em>not<\/em> define an equivalence relation and to satisfy the\n+     * {@linkplain Object#equals equals contract} an equivalence\n+     * relation must be implemented; see <a\n+     * href=\"Double.html#equivalenceRelation\">this discussion<\/a> for\n+     * details of floating-point equality and equivalence.\n@@ -741,0 +736,1 @@\n+     * @jls 15.21.1 Numerical Equality Operators == and !=\n@@ -887,14 +883,18 @@\n-     * Compares two {@code Float} objects numerically.  There are\n-     * two ways in which comparisons performed by this method differ\n-     * from those performed by the Java language numerical comparison\n-     * operators ({@code <, <=, ==, >=, >}) when\n-     * applied to primitive {@code float} values:\n-     *\n-     * <ul><li>\n-     *          {@code Float.NaN} is considered by this method to\n-     *          be equal to itself and greater than all other\n-     *          {@code float} values\n-     *          (including {@code Float.POSITIVE_INFINITY}).\n-     * <li>\n-     *          {@code 0.0f} is considered by this method to be greater\n-     *          than {@code -0.0f}.\n+     * Compares two {@code Float} objects numerically.\n+     *\n+     * This method imposes a total order on {@code Float} objects\n+     * with two differences compared to the incomplete order defined the\n+     * by Java language numerical comparison operators ({@code <, <=,\n+     * ==, >=, >}) on {@code float} values.\n+     *\n+     * <ul><li> A NaN is <em>unordered<\/em> with respect to other\n+     *          values and unequal to itself under the comparison\n+     *          operators.  This method chooses to define {@code\n+     *          Float.NaN} to be equal to itself and greater than all\n+     *          other {@code double} values (including {@code\n+     *          Float.POSITIVE_INFINITY}).\n+     *\n+     *      <li> Positive zero and negative zero compare equal\n+     *      numerically, but are distinct and distinguishable values.\n+     *      This method chooses to define positive zero ({@code +0.0f}),\n+     *      to be greater than negative zero ({@code -0.0f}).\n@@ -904,1 +904,5 @@\n-     * objects imposed by this method is <i>consistent with equals<\/i>.\n+     * objects imposed by this method is <i>consistent with\n+     * equals<\/i>; see <a href=\"Double.html#equivalenceRelation\">this\n+     * discussion<\/a> for details of floating-point comparison and\n+     * ordering.\n+     *\n@@ -915,0 +919,1 @@\n+     * @jls 15.20.1 Numerical Comparison Operators {@code <}, {@code <=}, {@code >}, and {@code >=}\n@@ -916,1 +921,0 @@\n-     * @see Comparable#compareTo(Object)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Float.java","additions":43,"deletions":39,"binary":false,"changes":82,"status":"modified"}]}