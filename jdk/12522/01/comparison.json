{"files":[{"patch":"@@ -53,1 +53,0 @@\n-import com.sun.tools.javac.code.TypeMetadata.Entry.Kind;\n@@ -451,1 +450,1 @@\n-                return rewriteArrayType((ArrayType)type, annotations, pos);\n+                return rewriteArrayType(typetree, (ArrayType)type, annotations, onlyTypeAnnotations, pos);\n@@ -560,43 +559,3 @@\n-        private Type rewriteArrayType(ArrayType type, List<TypeCompound> annotations, TypeAnnotationPosition pos) {\n-            ArrayType tomodify = new ArrayType(type);\n-            if (type.isVarargs()) {\n-                tomodify = tomodify.makeVarargs();\n-            }\n-            ArrayType res = tomodify;\n-\n-            List<TypePathEntry> loc = List.nil();\n-\n-            \/\/ peel one and update loc\n-            Type tmpType = type.elemtype;\n-            loc = loc.prepend(TypePathEntry.ARRAY);\n-\n-            while (tmpType.hasTag(TypeTag.ARRAY)) {\n-                ArrayType arr = (ArrayType)tmpType;\n-\n-                \/\/ Update last type with new element type\n-                ArrayType tmp = new ArrayType(arr);\n-                tomodify.elemtype = tmp;\n-                tomodify = tmp;\n-\n-                tmpType = arr.elemtype;\n-                loc = loc.prepend(TypePathEntry.ARRAY);\n-            }\n-\n-            \/\/ Fix innermost element type\n-            Type elemType;\n-            if (tmpType.getMetadata() != null) {\n-                List<TypeCompound> tcs;\n-                if (tmpType.getAnnotationMirrors().isEmpty()) {\n-                    tcs = annotations;\n-                } else {\n-                    \/\/ Special case, lets prepend\n-                    tcs =  annotations.appendList(tmpType.getAnnotationMirrors());\n-                }\n-                elemType = tmpType.cloneWithMetadata(tmpType\n-                        .getMetadata()\n-                        .without(Kind.ANNOTATIONS)\n-                        .combine(new TypeMetadata.Annotations(tcs)));\n-            } else {\n-                elemType = tmpType.cloneWithMetadata(new TypeMetadata(new TypeMetadata.Annotations(annotations)));\n-            }\n-            tomodify.elemtype = elemType;\n+        private Type rewriteArrayType(JCTree typetree, ArrayType type, List<TypeCompound> annotations,\n+                                      List<Attribute.TypeCompound> onlyTypeAnnotations, TypeAnnotationPosition pos) {\n+            ArrayType res = new ArrayType(type);\n@@ -605,1 +564,1 @@\n-            pos.location = loc;\n+            pos.location = pos.location.append(TypePathEntry.ARRAY);\n@@ -607,0 +566,1 @@\n+            res.elemtype = typeWithAnnotations(arrayElemTypeTree(typetree), type.elemtype, annotations, onlyTypeAnnotations, pos);\n@@ -610,0 +570,7 @@\n+        private JCTree arrayElemTypeTree(JCTree typetree) {\n+            if (typetree.getKind() == JCTree.Kind.ANNOTATED_TYPE) {\n+                typetree = ((JCAnnotatedType) typetree).underlyingType;\n+            }\n+            return ((JCArrayTypeTree) typetree).elemtype;\n+        }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/TypeAnnotations.java","additions":13,"deletions":46,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -238,1 +238,1 @@\n-        if (isSnippet)\n+        if (isSnippet) {\n@@ -240,0 +240,2 @@\n+            sb.append(\"class Nested {}\\n\");\n+        }\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/Driver.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,2 +24,0 @@\n-import static com.sun.tools.classfile.TypeAnnotation.TargetType.*;\n-\n@@ -28,1 +26,1 @@\n- * @bug 8042451\n+ * @bug 8042451 8208470\n@@ -34,0 +32,3 @@\n+\n+import static com.sun.tools.classfile.TypeAnnotation.TargetType.*;\n+\n@@ -66,0 +67,20 @@\n+    @TADescription(annotation = \"TA\", type = FIELD)\n+    @TADescription(annotation = \"TB\", type = FIELD,\n+            genericLocation = { 0, 0 })\n+    @TADescription(annotation = \"TC\", type = FIELD,\n+            genericLocation = { 0, 0, 0, 0, 1, 0})\n+    public String fieldAsNestedArray1() {\n+        return \"@TC Nested @TA [] @TB [] test;\";\n+    }\n+\n+    @TADescription(annotation = \"TA\", type = FIELD)\n+    @TADescription(annotation = \"TB\", type = FIELD,\n+            genericLocation = { 0, 0 })\n+    @TADescription(annotation = \"TC\", type = FIELD,\n+            genericLocation = { 0, 0, 0, 0, 1, 0})\n+    @TADescription(annotation = \"TD\", type = FIELD,\n+            genericLocation = { 0, 0, 0, 0 })\n+    public String fieldAsNestedArray2() {\n+        return \"@TD %TEST_CLASS_NAME%. @TC Nested @TA [] @TB [] test;\";\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/referenceinfos\/Fields.java","additions":25,"deletions":4,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -10,1 +10,1 @@\n-T6747671.java:36:9: compiler.warn.raw.class.use: T6747671.B, T6747671.B<X>\n+T6747671.java:36:9: compiler.warn.raw.class.use: @T6747671.TA T6747671.B, T6747671.B<X>\n","filename":"test\/langtools\/tools\/javac\/warnings\/6747671\/T6747671.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}