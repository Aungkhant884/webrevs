{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1362,0 +1362,87 @@\n+\n+\/***** debugging *****\/\n+\n+#ifdef DEBUG\n+\n+void\n+eventFilter_dumpHandlerFilters(HandlerNode *node)\n+{\n+    int i;\n+    Filter *filter = FILTERS_ARRAY(node);\n+\n+    for (i = 0; i < FILTER_COUNT(node); ++i, ++filter) {\n+        switch (filter->modifier) {\n+            case JDWP_REQUEST_MODIFIER(ThreadOnly):\n+                tty_message(\"ThreadOnly: thread(%p)\",\n+                            filter->u.ThreadOnly.thread);\n+                break;\n+            case JDWP_REQUEST_MODIFIER(ClassOnly): {\n+                char *class_name;\n+                classSignature(filter->u.ClassOnly.clazz, &class_name, NULL);\n+                tty_message(\"ClassOnly: clazz(%s)\",\n+                            class_name);\n+                break;\n+            }\n+            case JDWP_REQUEST_MODIFIER(LocationOnly): {\n+                char *method_name;\n+                char *class_name;\n+                methodSignature(filter->u.LocationOnly.method, &method_name, NULL, NULL);\n+                classSignature(filter->u.LocationOnly.clazz, &class_name, NULL);\n+                tty_message(\"LocationOnly: clazz(%s), method(%s) location(%d)\",\n+                            class_name,\n+                            method_name,\n+                            filter->u.LocationOnly.location);\n+                break;\n+            }\n+            case JDWP_REQUEST_MODIFIER(FieldOnly): {\n+                char *class_name;\n+                classSignature(filter->u.FieldOnly.clazz, &class_name, NULL);\n+                tty_message(\"FieldOnly: clazz(%p), field(%d)\",\n+                            class_name,\n+                            filter->u.FieldOnly.field);\n+                break;\n+            }\n+            case JDWP_REQUEST_MODIFIER(ExceptionOnly):\n+                tty_message(\"ExceptionOnly: clazz(%p), caught(%d) uncaught(%d)\",\n+                            filter->u.ExceptionOnly.exception,\n+                            filter->u.ExceptionOnly.caught,\n+                            filter->u.ExceptionOnly.uncaught);\n+                break;\n+            case JDWP_REQUEST_MODIFIER(InstanceOnly):\n+                tty_message(\"InstanceOnly: instance(%p)\",\n+                            filter->u.InstanceOnly.instance);\n+                break;\n+            case JDWP_REQUEST_MODIFIER(Count):\n+                tty_message(\"Count: count(%d)\",\n+                            filter->u.Count.count);\n+                break;\n+            case JDWP_REQUEST_MODIFIER(Conditional):\n+                tty_message(\"Conditional: exprID(%d)\",\n+                            filter->u.Conditional.exprID);\n+                break;\n+            case JDWP_REQUEST_MODIFIER(ClassMatch):\n+                tty_message(\"ClassMatch: classPattern(%s)\",\n+                            filter->u.ClassMatch.classPattern);\n+                break;\n+            case JDWP_REQUEST_MODIFIER(ClassExclude):\n+                tty_message(\"ClassExclude: classPattern(%s)\",\n+                            filter->u.ClassExclude.classPattern);\n+                break;\n+            case JDWP_REQUEST_MODIFIER(Step):\n+                tty_message(\"Step: size(%d) depth(%d) thread(%p)\",\n+                            filter->u.Step.size,\n+                            filter->u.Step.depth,\n+                            filter->u.Step.thread);\n+                break;\n+            case JDWP_REQUEST_MODIFIER(SourceNameMatch):\n+                tty_message(\"SourceNameMatch: sourceNamePattern(%s)\",\n+                            filter->u.SourceNameOnly.sourceNamePattern);\n+                break;\n+            default:\n+                EXIT_ERROR(AGENT_ERROR_ILLEGAL_ARGUMENT, \"Invalid filter modifier\");\n+                return;\n+        }\n+    }\n+}\n+\n+#endif \/* DEBUG *\/\n","filename":"src\/jdk.jdwp.agent\/share\/native\/libjdwp\/eventFilter.c","additions":88,"deletions":1,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2005, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,0 +78,6 @@\n+\/***** debugging *****\/\n+\n+#ifdef DEBUG\n+void eventFilter_dumpHandlerFilters(HandlerNode *node);\n+#endif\n+\n","filename":"src\/jdk.jdwp.agent\/share\/native\/libjdwp\/eventFilter.h","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1716,0 +1716,44 @@\n+\n+\/***** debugging *****\/\n+\n+#ifdef DEBUG\n+\n+void\n+eventHandler_dumpAllHandlers(jboolean dumpPermanent)\n+{\n+    int ei;\n+    for (ei = EI_min; ei <= EI_max; ++ei) {\n+        eventHandler_dumpHandlers(ei, dumpPermanent);\n+    }\n+}\n+\n+void\n+eventHandler_dumpHandlers(EventIndex ei, jboolean dumpPermanent)\n+{\n+  HandlerNode *nextNode;\n+  nextNode = getHandlerChain(ei)->first;\n+  if (nextNode != NULL) {\n+      tty_message(\"\\nHandlers for %s(%d)\", eventIndex2EventName(ei), ei);\n+      while (nextNode != NULL) {\n+          HandlerNode *node = nextNode;\n+          nextNode = NEXT(node);\n+\n+          if (node->permanent && !dumpPermanent) {\n+              continue; \/\/ ignore permanent handlers\n+          }\n+\n+          tty_message(\"node(%p) handlerID(%d) suspendPolicy(%d) permanent(%d)\",\n+                      node, node->handlerID, node->suspendPolicy, node->permanent);\n+          eventFilter_dumpHandlerFilters(node);\n+      }\n+  }\n+}\n+\n+void\n+eventHandler_dumpHandler(HandlerNode *node)\n+{\n+    tty_message(\"Handler for %s(%d)\\n\", eventIndex2EventName(node->ei), node->ei);\n+    eventFilter_dumpHandlerFilters(node);\n+}\n+\n+#endif \/* DEBUG *\/\n","filename":"src\/jdk.jdwp.agent\/share\/native\/libjdwp\/eventHandler.c","additions":45,"deletions":1,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2006, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -82,0 +82,8 @@\n+\/***** debugging *****\/\n+\n+#ifdef DEBUG\n+void eventHandler_dumpAllHandlers(jboolean dumpPermanent);\n+void eventHandler_dumpHandlers(EventIndex ei, jboolean dumpPermanent);\n+void eventHandler_dumpHandler(HandlerNode *node);\n+#endif\n+\n","filename":"src\/jdk.jdwp.agent\/share\/native\/libjdwp\/eventHandler.h","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -143,0 +143,5 @@\n+#ifdef DEBUG\n+static void dumpThreadList(ThreadList *list);\n+static void dumpThread(ThreadNode *node);\n+#endif\n+\n@@ -2516,0 +2521,37 @@\n+\n+\/***** debugging *****\/\n+\n+#ifdef DEBUG\n+\n+void\n+threadControl_dumpAllThreads()\n+{\n+    tty_message(\"Dumping runningThreads:\\n\");\n+    dumpThreadList(&runningThreads);\n+    tty_message(\"Dumping otherThreads:\\n\");\n+    dumpThreadList(&otherThreads);\n+}\n+\n+static void\n+dumpThreadList(ThreadList *list)\n+{\n+    ThreadNode *node;\n+    for (node = list->first; node != NULL; node = node->next) {\n+        if (!node->isDebugThread) {\n+            dumpThread(node);\n+        }\n+    }\n+}\n+\n+static void\n+dumpThread(ThreadNode *node) {\n+    tty_message(\"  Thread: node = %p, jthread = %p\", node, node->thread);\n+#ifdef DEBUG_THREADNAME\n+    tty_message(\"\\tname: %s\", node->name);\n+#endif\n+    \/\/ More fields can be printed here when needed. The amount of output is intentionlly\n+    \/\/ kept small so it doesn't generate too much output.\n+    tty_message(\"\\tsuspendCount: %d\", node->suspendCount);\n+}\n+\n+#endif \/* DEBUG *\/\n","filename":"src\/jdk.jdwp.agent\/share\/native\/libjdwp\/threadControl.c","additions":43,"deletions":1,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2005, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,0 +78,6 @@\n+\/***** debugging *****\/\n+\n+#ifdef DEBUG\n+void threadControl_dumpAllThreads();\n+#endif\n+\n","filename":"src\/jdk.jdwp.agent\/share\/native\/libjdwp\/threadControl.h","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1985,0 +1985,54 @@\n+#ifdef DEBUG\n+\n+char*\n+eventIndex2EventName(EventIndex ei)\n+{\n+    switch ( ei ) {\n+        case EI_SINGLE_STEP:\n+            return \"EI_SINGLE_STEP\";\n+        case EI_BREAKPOINT:\n+            return \"EI_BREAKPOINT\";\n+        case EI_FRAME_POP:\n+            return \"EI_FRAME_POP\";\n+        case EI_EXCEPTION:\n+            return \"EI_EXCEPTION\";\n+        case EI_THREAD_START:\n+            return \"EI_THREAD_START\";\n+        case EI_THREAD_END:\n+            return \"EI_THREAD_END\";\n+        case EI_CLASS_PREPARE:\n+            return \"EI_CLASS_PREPARE\";\n+        case EI_GC_FINISH:\n+            return \"EI_GC_FINISH\";\n+        case EI_CLASS_LOAD:\n+            return \"EI_CLASS_LOAD\";\n+        case EI_FIELD_ACCESS:\n+            return \"EI_FIELD_ACCESS\";\n+        case EI_FIELD_MODIFICATION:\n+            return \"EI_FIELD_MODIFICATION\";\n+        case EI_EXCEPTION_CATCH:\n+            return \"EI_EXCEPTION_CATCH\";\n+        case EI_METHOD_ENTRY:\n+            return \"EI_METHOD_ENTRY\";\n+        case EI_METHOD_EXIT:\n+            return \"EI_METHOD_EXIT\";\n+        case EI_MONITOR_CONTENDED_ENTER:\n+            return \"EI_MONITOR_CONTENDED_ENTER\";\n+        case EI_MONITOR_CONTENDED_ENTERED:\n+            return \"EI_MONITOR_CONTENDED_ENTERED\";\n+        case EI_MONITOR_WAIT:\n+            return \"EI_MONITOR_WAIT\";\n+        case EI_MONITOR_WAITED:\n+            return \"EI_MONITOR_WAITED\";\n+        case EI_VM_INIT:\n+            return \"EI_VM_INIT\";\n+        case EI_VM_DEATH:\n+            return \"EI_VM_DEATH\";\n+        default:\n+            JDI_ASSERT(JNI_FALSE);\n+            return \"Bad EI\";\n+    }\n+}\n+\n+#endif\n+\n","filename":"src\/jdk.jdwp.agent\/share\/native\/libjdwp\/util.c","additions":55,"deletions":1,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -382,0 +382,3 @@\n+#ifdef DEBUG\n+char*            eventIndex2EventName(EventIndex ei);\n+#endif\n","filename":"src\/jdk.jdwp.agent\/share\/native\/libjdwp\/util.h","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}