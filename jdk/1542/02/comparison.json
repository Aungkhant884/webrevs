{"files":[{"patch":"@@ -1687,2 +1687,1 @@\n-                                                                         InstanceKlass* caller_ik,\n-                                                                         bool initialize, TRAPS) {\n+                                                                         InstanceKlass* caller_ik, TRAPS) {\n@@ -1729,3 +1728,1 @@\n-  if (initialize) {\n-    loaded_lambda->initialize(CHECK_NULL);\n-  }\n+  loaded_lambda->initialize(CHECK_NULL);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -307,2 +307,1 @@\n-                                                          InstanceKlass* caller_ik,\n-                                                          bool initialize, TRAPS) NOT_CDS_RETURN_(NULL);\n+                                                          InstanceKlass* caller_ik, TRAPS) NOT_CDS_RETURN_(NULL);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -197,2 +197,1 @@\n-                                      jobject instantiatedMethodType,\n-                                      jboolean initialize);\n+                                      jobject instantiatedMethodType);\n","filename":"src\/hotspot\/share\/include\/jvm.h","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3828,2 +3828,1 @@\n-                                                        jobject instantiatedMethodType,\n-                                                        jboolean initialize))\n+                                                        jobject instantiatedMethodType))\n@@ -3863,1 +3862,1 @@\n-    InstanceKlass* loaded_lambda = SystemDictionaryShared::prepare_shared_lambda_proxy_class(lambda_ik, caller_ik, initialize, THREAD);\n+    InstanceKlass* loaded_lambda = SystemDictionaryShared::prepare_shared_lambda_proxy_class(lambda_ik, caller_ik, THREAD);\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -266,15 +266,17 @@\n-        \/\/ include lambda proxy class in CDS archive at dump time\n-        if (CDS.isDumpingArchive()) {\n-            Class<?> innerClass = generateInnerClass();\n-            LambdaProxyClassArchive.register(targetClass,\n-                                             samMethodName,\n-                                             invokedType,\n-                                             samMethodType,\n-                                             implMethod,\n-                                             instantiatedMethodType,\n-                                             isSerializable,\n-                                             markerInterfaces,\n-                                             additionalBridges,\n-                                             innerClass);\n-            return innerClass;\n-        }\n+        \/\/ CDS does not handle disableEagerInitialization.\n+        if (!disableEagerInitialization) {\n+            \/\/ include lambda proxy class in CDS archive at dump time\n+            if (CDS.isDumpingArchive()) {\n+                Class<?> innerClass = generateInnerClass();\n+                LambdaProxyClassArchive.register(targetClass,\n+                                                 samMethodName,\n+                                                 invokedType,\n+                                                 samMethodType,\n+                                                 implMethod,\n+                                                 instantiatedMethodType,\n+                                                 isSerializable,\n+                                                 markerInterfaces,\n+                                                 additionalBridges,\n+                                                 innerClass);\n+                return innerClass;\n+            }\n@@ -282,13 +284,11 @@\n-        \/\/ load from CDS archive if present\n-        Class<?> innerClass = LambdaProxyClassArchive.find(targetClass,\n-                                                           samMethodName,\n-                                                           invokedType,\n-                                                           samMethodType,\n-                                                           implMethod,\n-                                                           instantiatedMethodType,\n-                                                           isSerializable,\n-                                                           markerInterfaces,\n-                                                           additionalBridges,\n-                                                           !disableEagerInitialization);\n-        if (innerClass == null) {\n-            innerClass = generateInnerClass();\n+            \/\/ load from CDS archive if present\n+            Class<?> innerClass = LambdaProxyClassArchive.find(targetClass,\n+                                                               samMethodName,\n+                                                               invokedType,\n+                                                               samMethodType,\n+                                                               implMethod,\n+                                                               instantiatedMethodType,\n+                                                               isSerializable,\n+                                                               markerInterfaces,\n+                                                               additionalBridges);\n+            if (innerClass != null) return innerClass;\n@@ -296,1 +296,1 @@\n-        return innerClass;\n+        return generateInnerClass();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java","additions":29,"deletions":29,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -53,2 +53,1 @@\n-                                                   MethodType instantiatedMethodType,\n-                                                   boolean initialize);\n+                                                   MethodType instantiatedMethodType);\n@@ -104,2 +103,1 @@\n-                         MethodType[] additionalBridges,\n-                         boolean initialize) {\n+                         MethodType[] additionalBridges) {\n@@ -109,1 +107,1 @@\n-        if (!loadedByBuiltinLoader(caller) || !initialize ||\n+        if (!loadedByBuiltinLoader(caller) ||\n@@ -114,1 +112,1 @@\n-                               implMethod.internalMemberName(), instantiatedMethodType, initialize);\n+                               implMethod.internalMemberName(), instantiatedMethodType);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/LambdaProxyClassArchive.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -54,2 +54,1 @@\n-                                                            jobject instantiatedMethodType,\n-                                                            jboolean initialize) {\n+                                                            jobject instantiatedMethodType) {\n@@ -58,1 +57,1 @@\n-                                                 instantiatedMethodType, initialize);\n+                                                 instantiatedMethodType);\n","filename":"src\/java.base\/share\/native\/libjava\/LambdaProxyClassArchive.c","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8257241\n+ * @summary Run the LambdaEagerInitTest.java test in static CDS archive mode.\n+ *          Create a base archive with the -Djdk.internal.lambda.disableEagerInitialization=true property.\n+ *          Run with the archive with and without specifying the property.\n+ *          With the disableEagerInit set to true, lambda proxy classes will not\n+ *          be archived. During runtime, lambda proxy classes will not be loaded\n+ *          from the archive.\n+ * @requires vm.cds\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds test-classes\n+ * @run main\/othervm LambdaEagerInit\n+ *\/\n+\n+import java.io.File;\n+\n+import jdk.test.lib.cds.CDSOptions;\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class LambdaEagerInit {\n+    public static void main(String[] args) throws Exception {\n+        createArchiveWithEagerInitializationEnabled();\n+        testWithEagerInitializationEnabled();\n+        testWithEagerInitializationDisabled();\n+    }\n+\n+    private static final String classDir = System.getProperty(\"test.classes\");\n+    private static final String mainClass = LambdaEagerInitTest.class.getName();\n+    private static final String testProperty = \"-Djdk.internal.lambda.disableEagerInitialization=true\";\n+    private static final String lambdaNotLoadedFromArchive =\n+        \".class.load. java.util.stream.Collectors[$][$]Lambda[$].*\/0x.*source:.*java.*util.*stream.*Collectors\";\n+    private static final String cdsLoadedLambdaProxy = \".cds.*Loaded.*lambda.*proxy\";\n+    private static final String archiveName = mainClass + \".jsa\";\n+    private static String appJar;\n+\n+    static void createArchiveWithEagerInitializationEnabled() throws Exception {\n+        appJar = JarBuilder.build(\"lambda_eager\", new File(classDir), null);\n+\n+        \/\/ create base archive with the -Djdk.internal.lambda.disableEagerInitialization=true property\n+        CDSOptions opts = (new CDSOptions())\n+            .addPrefix(testProperty,\n+                       \"-Xlog:class+load,cds\")\n+            .setArchiveName(archiveName);\n+        CDSTestUtils.createArchiveAndCheck(opts);\n+    }\n+\n+    static void testWithEagerInitializationEnabled() throws Exception {\n+        \/\/ run with archive with the -Djdk.internal.lambda.disableEagerInitialization=true property\n+        CDSOptions runOpts = (new CDSOptions())\n+            .addPrefix(\"-cp\", appJar, testProperty,  \"-Xlog:class+load,cds=debug\")\n+            .setArchiveName(archiveName)\n+            .setUseVersion(false)\n+            .addSuffix(mainClass);\n+        OutputAnalyzer output = CDSTestUtils.runWithArchive(runOpts);\n+        output.shouldMatch(lambdaNotLoadedFromArchive)\n+              .shouldNotMatch(cdsLoadedLambdaProxy)\n+              .shouldHaveExitValue(0);\n+    }\n+\n+    static void testWithEagerInitializationDisabled() throws Exception {\n+        \/\/ run with archive without the -Djdk.internal.lambda.disableEagerInitialization=true property\n+        CDSOptions runOpts = (new CDSOptions())\n+            .addPrefix(\"-cp\", appJar, \"-Xlog:class+load,cds=debug\")\n+            .setArchiveName(archiveName)\n+            .setUseVersion(false)\n+            .addSuffix(mainClass);\n+        OutputAnalyzer output = CDSTestUtils.runWithArchive(runOpts);\n+        output.shouldMatch(lambdaNotLoadedFromArchive)\n+              .shouldNotMatch(cdsLoadedLambdaProxy)\n+              .shouldHaveExitValue(0);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/LambdaEagerInit.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"},{"patch":"","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/LambdaEagerInitTest.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/java\/lang\/invoke\/lambda\/LambdaEagerInitTest.java","status":"copied"}]}