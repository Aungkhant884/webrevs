{"files":[{"patch":"@@ -29,4 +29,4 @@\n- *          Create a base archive with the -Djdk.internal.lambda.disableEagerInitialization=true property.\n- *          Run with the archive with and without specifying the property.\n- *          With the disableEagerInit set to true, lambda proxy classes will not\n- *          be archived. During runtime, lambda proxy classes will not be loaded\n+ *          Create a custom base archive with the -Djdk.internal.lambda.disableEagerInitialization=true property.\n+ *          Run with the custom base archive with and without specifying the property.\n+ *          With the disableEagerInit set to true during dump time, lambda proxy classes\n+ *          will not be archived. During runtime, lambda proxy classes will not be loaded\n@@ -34,0 +34,2 @@\n+ *          Run with the default CDS archive, lambda proxy classes will be loaded\n+ *          from the archive if the property is not set.\n@@ -50,0 +52,2 @@\n+        testDefaultArchiveWithEagerInitializationEnabled();\n+        testDefaultArchiveWithEagerInitializationDisabled();\n@@ -57,0 +61,2 @@\n+    private static final String lambdaLoadedFromArchive =\n+        \".class.load. java.util.stream.Collectors[$][$]Lambda[$].*\/0x.*source:.*shared.*objects.*file\";\n@@ -73,1 +79,1 @@\n-        \/\/ run with archive with the -Djdk.internal.lambda.disableEagerInitialization=true property\n+        \/\/ run with custom base archive with the -Djdk.internal.lambda.disableEagerInitialization=true property\n@@ -86,1 +92,1 @@\n-        \/\/ run with archive without the -Djdk.internal.lambda.disableEagerInitialization=true property\n+        \/\/ run with custom base archive without the -Djdk.internal.lambda.disableEagerInitialization=true property\n@@ -97,0 +103,26 @@\n+\n+    static void testDefaultArchiveWithEagerInitializationEnabled() throws Exception {\n+        \/\/ run with default CDS archive with the -Djdk.internal.lambda.disableEagerInitialization=true property\n+        CDSOptions runOpts = (new CDSOptions())\n+            .addPrefix(\"-cp\", appJar, testProperty,  \"-Xlog:class+load,cds=debug\")\n+            .setUseSystemArchive(true)\n+            .setUseVersion(false)\n+            .addSuffix(mainClass);\n+        OutputAnalyzer output = CDSTestUtils.runWithArchive(runOpts);\n+        output.shouldMatch(lambdaNotLoadedFromArchive)\n+              .shouldNotMatch(cdsLoadedLambdaProxy)\n+              .shouldHaveExitValue(0);\n+    }\n+\n+    static void testDefaultArchiveWithEagerInitializationDisabled() throws Exception {\n+        \/\/ run with default CDS archive without the -Djdk.internal.lambda.disableEagerInitialization=true property\n+        CDSOptions runOpts = (new CDSOptions())\n+            .addPrefix(\"-cp\", appJar, \"-Xlog:class+load,cds=debug\")\n+            .setUseSystemArchive(true)\n+            .setUseVersion(false)\n+            .addSuffix(mainClass);\n+        OutputAnalyzer output = CDSTestUtils.runWithArchive(runOpts);\n+        output.shouldMatch(lambdaLoadedFromArchive)\n+              .shouldMatch(cdsLoadedLambdaProxy)\n+              .shouldHaveExitValue(0);\n+    }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/LambdaEagerInit.java","additions":38,"deletions":6,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -24,8 +24,3 @@\n-\/**\n- * @test\n- * @bug 8242451\n- * @library \/test\/lib\n- * @summary Test that the LAMBDA_INSTANCE$ field is present depending\n- *          on disableEagerInitialization\n- * @run main LambdaEagerInitTest\n- * @run main\/othervm -Djdk.internal.lambda.disableEagerInitialization=true LambdaEagerInitTest\n+\/*\n+ * This file is copied from open\/test\/jdk\/java\/lang\/invoke\/lambda.\n+ * It is being used as the main class for the appcds\/LambdaEagerInit.java test.\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/LambdaEagerInitTest.java","additions":3,"deletions":8,"binary":false,"changes":11,"status":"modified"}]}