{"files":[{"patch":"@@ -408,1 +408,1 @@\n-HeapWord* G1BlockOffsetTablePart::initialize_threshold() {\n+void G1BlockOffsetTablePart::initialize_threshold() {\n@@ -410,1 +410,0 @@\n-  return _next_offset_threshold;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BlockOffsetTable.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -196,1 +196,1 @@\n-  HeapWord* initialize_threshold();\n+  void initialize_threshold();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BlockOffsetTable.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -157,1 +157,1 @@\n-      _hr->cross_threshold(obj_addr, obj_end);\n+      _hr->alloc_block_in_bot(obj_addr, obj_end);\n@@ -174,1 +174,1 @@\n-      _hr->cross_threshold(start, end_first_obj);\n+      _hr->alloc_block_in_bot(start, end_first_obj);\n@@ -180,1 +180,1 @@\n-        _hr->cross_threshold(end_first_obj, end);\n+        _hr->alloc_block_in_bot(end_first_obj, end);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailure.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-    _threshold(NULL),\n@@ -52,1 +51,1 @@\n-    _threshold = _current_region->initialize_threshold();\n+    _current_region->initialize_bot_threshold();\n@@ -126,3 +125,1 @@\n-  if (_compaction_top > _threshold) {\n-    _threshold = _current_region->cross_threshold(_compaction_top - size, _compaction_top);\n-  }\n+  _current_region->alloc_block_in_bot(_compaction_top - size, _compaction_top);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactionPoint.cpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-  HeapWord*   _threshold;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactionPoint.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -802,2 +802,2 @@\n-HeapWord* HeapRegion::initialize_threshold() {\n-  return _bot_part.initialize_threshold();\n+void HeapRegion::initialize_bot_threshold() {\n+  _bot_part.initialize_threshold();\n@@ -806,1 +806,1 @@\n-HeapWord* HeapRegion::cross_threshold(HeapWord* start, HeapWord* end) {\n+void HeapRegion::alloc_block_in_bot(HeapWord* start, HeapWord* end) {\n@@ -808,1 +808,0 @@\n-  return _bot_part.threshold();\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -170,2 +170,2 @@\n-  HeapWord* initialize_threshold();\n-  HeapWord* cross_threshold(HeapWord* start, HeapWord* end);\n+  void initialize_bot_threshold();\n+  void alloc_block_in_bot(HeapWord* start, HeapWord* end);\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -477,1 +477,1 @@\n-HeapWord* BlockOffsetArrayContigSpace::initialize_threshold() {\n+void BlockOffsetArrayContigSpace::initialize_threshold() {\n@@ -482,1 +482,0 @@\n-  return _next_offset_threshold;\n","filename":"src\/hotspot\/share\/gc\/shared\/blockOffsetTable.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -409,1 +409,1 @@\n-  HeapWord* initialize_threshold();\n+  void initialize_threshold();\n@@ -411,1 +411,1 @@\n-  void      zero_bottom_entry();\n+  void zero_bottom_entry();\n","filename":"src\/hotspot\/share\/gc\/shared\/blockOffsetTable.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -367,1 +367,1 @@\n-    cp->threshold = cp->space->initialize_threshold();\n+    cp->space->initialize_threshold();\n@@ -384,1 +384,1 @@\n-  \/\/ we need to update the offset table so that the beginnings of objects can be\n+  \/\/ We need to update the offset table so that the beginnings of objects can be\n@@ -387,3 +387,1 @@\n-  if (compact_top > cp->threshold)\n-    cp->threshold =\n-      cp->space->cross_threshold(compact_top - size, compact_top);\n+  cp->space->alloc_block(compact_top - size, compact_top);\n@@ -405,1 +403,0 @@\n-    assert(cp->threshold == NULL, \"just checking\");\n@@ -408,1 +405,1 @@\n-    cp->threshold = cp->space->initialize_threshold();\n+    cp->space->initialize_threshold();\n@@ -768,2 +765,2 @@\n-HeapWord* OffsetTableContigSpace::initialize_threshold() {\n-  return _offsets.initialize_threshold();\n+void OffsetTableContigSpace::initialize_threshold() {\n+  _offsets.initialize_threshold();\n@@ -772,1 +769,1 @@\n-HeapWord* OffsetTableContigSpace::cross_threshold(HeapWord* start, HeapWord* end) {\n+void OffsetTableContigSpace::alloc_block(HeapWord* start, HeapWord* end) {\n@@ -774,1 +771,0 @@\n-  return _offsets.threshold();\n","filename":"src\/hotspot\/share\/gc\/shared\/space.cpp","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -301,1 +301,0 @@\n-  HeapWord* threshold;\n@@ -304,1 +303,1 @@\n-    gen(g), space(NULL), threshold(0) {}\n+    gen(g), space(NULL) {}\n@@ -380,4 +379,2 @@\n-  \/\/ returns the first such boundary.\n-  \/\/ (The default implementation returns the end of the space, so the\n-  \/\/ boundary is never crossed.)\n-  virtual HeapWord* initialize_threshold() { return end(); }\n+  \/\/ initializes these data structures for further updates.\n+  virtual void initialize_threshold() { }\n@@ -394,3 +391,2 @@\n-  \/\/ If the forwarding crosses \"cp->threshold\", invokes the \"cross_threshold\"\n-  \/\/ function of the then-current compaction space, and updates \"cp->threshold\n-  \/\/ accordingly\".\n+  \/\/ Invokes the \"alloc_block\" function of the then-current compaction\n+  \/\/ space.\n@@ -411,6 +407,3 @@\n-  \/\/ This the function is invoked when an allocation of an object covering\n-  \/\/ \"start\" to \"end occurs crosses the threshold; returns the next\n-  \/\/ threshold.  (The default implementation does nothing.)\n-  virtual HeapWord* cross_threshold(HeapWord* start, HeapWord* the_end) {\n-    return end();\n-  }\n+  \/\/ This the function to invoke when an allocation of an object covering\n+  \/\/ \"start\" to \"end\" occurs to update other internal data structures.\n+  virtual void alloc_block(HeapWord* start, HeapWord* the_end) { }\n@@ -636,2 +629,2 @@\n-  virtual HeapWord* initialize_threshold();\n-  virtual HeapWord* cross_threshold(HeapWord* start, HeapWord* end);\n+  virtual void initialize_threshold();\n+  virtual void alloc_block(HeapWord* start, HeapWord* end);\n","filename":"src\/hotspot\/share\/gc\/shared\/space.hpp","additions":10,"deletions":17,"binary":false,"changes":27,"status":"modified"}]}