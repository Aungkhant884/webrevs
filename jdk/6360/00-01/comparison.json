{"files":[{"patch":"@@ -141,3 +141,2 @@\n-        \/\/ preparing two temporary files which will be compared at the end of the test\n-        Path sourceFile = Files.createTempFile(null, null);\n-        Path targetFile = Files.createTempFile(null, null);\n+        Path sourceFile = null;\n+        Path targetFile = null;\n@@ -145,10 +144,25 @@\n-            \/\/ writing 3 GB of random bytes into source file\n-            for (int i = 0; i < NUM_WRITES; i++)\n-                Files.write(sourceFile, createRandomBytes(BYTES_PER_WRITE, 0), StandardOpenOption.APPEND);\n-\n-            \/\/ performing actual transfer, effectively by multiple invocations of Filechannel.transferTo(FileChannel)\n-            long count;\n-            try (InputStream inputStream = Channels.newInputStream(FileChannel.open(sourceFile));\n-                 OutputStream outputStream = Channels\n-                         .newOutputStream(FileChannel.open(targetFile, StandardOpenOption.WRITE))) {\n-                count = inputStream.transferTo(outputStream);\n+            \/\/ preparing two temporary files which will be compared at the end of the test\n+             sourceFile = Files.createTempFile(\"test2GBSource\", null);\n+             try {\n+             targetFile = Files.createTempFile(\"test2GBtarget\", null);\n+\n+                \/\/ writing 3 GB of random bytes into source file\n+                for (int i = 0; i < NUM_WRITES; i++)\n+                    Files.write(sourceFile, createRandomBytes(BYTES_PER_WRITE, 0), StandardOpenOption.APPEND);\n+\n+                \/\/ performing actual transfer, effectively by multiple invocations of Filechannel.transferTo(FileChannel)\n+                long count;\n+                try (InputStream inputStream = Channels.newInputStream(FileChannel.open(sourceFile));\n+                     OutputStream outputStream = Channels\n+                             .newOutputStream(FileChannel.open(targetFile, StandardOpenOption.WRITE))) {\n+                    count = inputStream.transferTo(outputStream);\n+                }\n+\n+                \/\/ comparing reported transferred bytes, must be 3 GB\n+                assertEquals(count, BYTES_WRITTEN);\n+\n+                \/\/ comparing content of both files, failing in case of any difference\n+                assertEquals(Files.mismatch(sourceFile, targetFile), -1);\n+\n+            } finally {\n+                 Files.delete(targetFile);\n@@ -156,6 +170,0 @@\n-\n-            \/\/ comparing reported transferred bytes, must be 3 GB\n-            assertEquals(count, BYTES_WRITTEN);\n-\n-            \/\/ comparing content of both files, failing in case of any difference\n-            assertEquals(Files.mismatch(sourceFile, targetFile), -1);\n@@ -163,3 +171,1 @@\n-            System.out.printf(\"Cleaning up: %s, %s%n\", sourceFile, targetFile);\n-            Files.deleteIfExists(sourceFile);\n-            Files.deleteIfExists(targetFile);\n+            Files.delete(sourceFile);\n","filename":"test\/jdk\/java\/nio\/channels\/Channels\/TransferTo.java","additions":28,"deletions":22,"binary":false,"changes":50,"status":"modified"}]}