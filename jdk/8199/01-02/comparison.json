{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/HandshakeContext.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,1 +60,1 @@\n-                        new SSLAlgorithmConstraints(null);\n+                        new SSLAlgorithmConstraints(null, true);\n@@ -64,1 +64,1 @@\n-                        new SSLAlgorithmConstraints((SSLSocket)null, false);\n+                        new SSLAlgorithmConstraints(null, false);\n@@ -66,1 +66,2 @@\n-    private SSLAlgorithmConstraints(AlgorithmConstraints userSpecifiedConstraints) {\n+    private SSLAlgorithmConstraints(AlgorithmConstraints userSpecifiedConstraints,\n+                                    boolean enabledX509DisabledAlgConstraints) {\n@@ -69,1 +70,1 @@\n-        this.enabledX509DisabledAlgConstraints = true;\n+        this.enabledX509DisabledAlgConstraints = enabledX509DisabledAlgConstraints;\n@@ -72,0 +73,7 @@\n+    \/**\n+     * Returns a SSLAlgorithmConstraints instance that checks the provided\n+     * {@code userSpecifiedConstraints} in addition to standard checks.\n+     * Returns a singleton instance if parameter is null or DEFAULT.\n+     * @param userSpecifiedConstraints additional constraints to check\n+     * @return a SSLAlgorithmConstraints instance\n+     *\/\n@@ -73,1 +81,1 @@\n-        if (userSpecifiedConstraints == DEFAULT) {\n+        if (userSpecifiedConstraints == DEFAULT || userSpecifiedConstraints == null) {\n@@ -76,1 +84,1 @@\n-        return new SSLAlgorithmConstraints(userSpecifiedConstraints);\n+        return new SSLAlgorithmConstraints(userSpecifiedConstraints, true);\n@@ -79,3 +87,10 @@\n-    SSLAlgorithmConstraints(SSLSocket socket,\n-            boolean withDefaultCertPathConstraints) {\n-        this.userSpecifiedConstraints =\n+    \/**\n+     * Returns a SSLAlgorithmConstraints instance that checks the constraints\n+     * configured for the given {@code socket} in addition to standard checks.\n+     * Returns a singleton instance if the constraints are null or DEFAULT.\n+     * @param socket socket with configured constraints\n+     * @return a SSLAlgorithmConstraints instance\n+     *\/\n+    static AlgorithmConstraints forSocket(SSLSocket socket,\n+                                             boolean withDefaultCertPathConstraints) {\n+        AlgorithmConstraints userSpecifiedConstraints =\n@@ -83,2 +98,5 @@\n-        this.peerSpecifiedConstraints = null;\n-        this.enabledX509DisabledAlgConstraints = withDefaultCertPathConstraints;\n+        if (userSpecifiedConstraints == null) {\n+            return withDefaultCertPathConstraints ? DEFAULT : DEFAULT_SSL_ONLY;\n+        }\n+        return new SSLAlgorithmConstraints(userSpecifiedConstraints,\n+                withDefaultCertPathConstraints);\n@@ -87,3 +105,10 @@\n-    SSLAlgorithmConstraints(SSLEngine engine,\n-            boolean withDefaultCertPathConstraints) {\n-        this.userSpecifiedConstraints =\n+    \/**\n+     * Returns a SSLAlgorithmConstraints instance that checks the constraints\n+     * configured for the given {@code engine} in addition to standard checks.\n+     * Returns a singleton instance if the constraints are null or DEFAULT.\n+     * @param engine engine with configured constraints\n+     * @return a SSLAlgorithmConstraints instance\n+     *\/\n+    static AlgorithmConstraints forEngine(SSLEngine engine,\n+                                             boolean withDefaultCertPathConstraints) {\n+        AlgorithmConstraints userSpecifiedConstraints =\n@@ -91,2 +116,5 @@\n-        this.peerSpecifiedConstraints = null;\n-        this.enabledX509DisabledAlgConstraints = withDefaultCertPathConstraints;\n+        if (userSpecifiedConstraints == null) {\n+            return withDefaultCertPathConstraints ? DEFAULT : DEFAULT_SSL_ONLY;\n+        }\n+        return new SSLAlgorithmConstraints(userSpecifiedConstraints,\n+                withDefaultCertPathConstraints);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLAlgorithmConstraints.java","additions":45,"deletions":17,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1492,1 +1492,1 @@\n-                            new SSLAlgorithmConstraints(sslSocket, true);\n+                            SSLAlgorithmConstraints.forSocket(sslSocket, true);\n@@ -1495,1 +1495,1 @@\n-                constraints = new SSLAlgorithmConstraints(sslSocket, true);\n+                constraints = SSLAlgorithmConstraints.forSocket(sslSocket, true);\n@@ -1532,1 +1532,1 @@\n-                            new SSLAlgorithmConstraints(engine, true);\n+                            SSLAlgorithmConstraints.forEngine(engine, true);\n@@ -1535,1 +1535,1 @@\n-                constraints = new SSLAlgorithmConstraints(engine, true);\n+                constraints = SSLAlgorithmConstraints.forEngine(engine, true);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLContextImpl.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -207,1 +207,1 @@\n-            return new SSLAlgorithmConstraints(sslSocket, true);\n+            return SSLAlgorithmConstraints.forSocket(sslSocket, true);\n@@ -210,1 +210,1 @@\n-        return new SSLAlgorithmConstraints((SSLSocket)null, true);\n+        return SSLAlgorithmConstraints.DEFAULT;\n@@ -234,1 +234,1 @@\n-        return new SSLAlgorithmConstraints(engine, true);\n+        return SSLAlgorithmConstraints.forEngine(engine, true);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/X509KeyManagerImpl.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -222,1 +222,1 @@\n-                constraints = new SSLAlgorithmConstraints(sslSocket, false);\n+                constraints = SSLAlgorithmConstraints.forSocket(sslSocket, false);\n@@ -276,1 +276,1 @@\n-                constraints = new SSLAlgorithmConstraints(engine, false);\n+                constraints = SSLAlgorithmConstraints.forEngine(engine, false);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/X509TrustManagerImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import org.openjdk.jmh.annotations.Measurement;\n@@ -37,0 +38,1 @@\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -40,1 +42,0 @@\n-import java.util.Enumeration;\n@@ -48,1 +49,0 @@\n-import javax.net.ssl.SSLSessionContext;\n@@ -112,0 +112,3 @@\n+    @Warmup(iterations = 5, time = 5, timeUnit = TimeUnit.SECONDS)\n+    @Measurement(iterations = 5, time = 5, timeUnit = TimeUnit.SECONDS)\n+    @Fork(3)\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/security\/SSLHandshake.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"}]}