{"files":[{"patch":"@@ -68,0 +68,2 @@\n+import static sun.java2d.pipe.Region.clipRound;\n+\n@@ -249,13 +251,0 @@\n-        \/**\n-         * Rounds a double to the nearest integer. It rounds 0.5 down,\n-         * for example 1.5 is rounded to 1.0.\n-         *\n-         * @param d number to be rounded\n-         * @return the rounded value\n-         *\/\n-        private static int roundHalfDown(double d) {\n-            double decP = (Math.ceil(d) - d);\n-            return (int)((decP == 0.5) ?  Math.floor(d) :  Math.round(d));\n-        }\n-\n-\n@@ -264,13 +253,20 @@\n-            Color background;\n-            Color highlight;\n-            Color shadow;\n-\n-            if (c instanceof JInternalFrame && ((JInternalFrame)c).isSelected()) {\n-                background = MetalLookAndFeel.getPrimaryControlDarkShadow();\n-                highlight = MetalLookAndFeel.getPrimaryControlShadow();\n-                shadow = MetalLookAndFeel.getPrimaryControlInfo();\n-            } else {\n-                background = MetalLookAndFeel.getControlDarkShadow();\n-                highlight = MetalLookAndFeel.getControlShadow();\n-                shadow = MetalLookAndFeel.getControlInfo();\n-            }\n+            if (g instanceof Graphics2D) {\n+                Graphics2D g2d = (Graphics2D) g;\n+                AffineTransform at = g2d.getTransform();\n+                Stroke oldStk = g2d.getStroke();\n+                Color oldColor = g2d.getColor();\n+                int stkWidth = 1;\n+\n+                Color background;\n+                Color highlight;\n+                Color shadow;\n+\n+                if (c instanceof JInternalFrame && ((JInternalFrame)c).isSelected()) {\n+                    background = MetalLookAndFeel.getPrimaryControlDarkShadow();\n+                    highlight = MetalLookAndFeel.getPrimaryControlShadow();\n+                    shadow = MetalLookAndFeel.getPrimaryControlInfo();\n+                } else {\n+                    background = MetalLookAndFeel.getControlDarkShadow();\n+                    highlight = MetalLookAndFeel.getControlShadow();\n+                    shadow = MetalLookAndFeel.getControlInfo();\n+                }\n@@ -278,32 +274,26 @@\n-            Graphics2D g2d = (Graphics2D) g;\n-            AffineTransform at = g2d.getTransform();\n-            Stroke oldStk = g2d.getStroke();\n-            Color oldColor = g2d.getColor();\n-            int stkWidth = 1;\n-\n-            \/\/ if m01 or m10 is non-zero, then there is a rotation or shear\n-            \/\/ skip resetting the transform\n-            boolean resetTransform = ((at.getShearX() == 0) && (at.getShearY() == 0));\n-\n-            int xtranslation;\n-            int ytranslation;\n-            int width;\n-            int height;\n-\n-            if (resetTransform) {\n-                g2d.setTransform(new AffineTransform());\n-                stkWidth = roundHalfDown(Math.min(at.getScaleX(), at.getScaleY()));\n-\n-                double xx = at.getScaleX() * x + at.getTranslateX();\n-                double yy = at.getScaleY() * y + at.getTranslateY();\n-                xtranslation = roundHalfDown(xx);\n-                ytranslation = roundHalfDown(yy);\n-                width = roundHalfDown(at.getScaleX() * w + xx) - xtranslation;\n-                height = roundHalfDown(at.getScaleY() * h + yy) - ytranslation;\n-            } else {\n-                width = w;\n-                height = h;\n-                xtranslation = x;\n-                ytranslation = y;\n-            }\n-            g2d.translate(xtranslation, ytranslation);\n+                \/\/ if m01 or m10 is non-zero, then there is a rotation or shear\n+                \/\/ skip resetting the transform\n+                boolean resetTransform = ((at.getShearX() == 0) && (at.getShearY() == 0));\n+\n+                int xtranslation;\n+                int ytranslation;\n+                int width;\n+                int height;\n+\n+                if (resetTransform) {\n+                    g2d.setTransform(new AffineTransform());\n+                    stkWidth = clipRound(Math.min(at.getScaleX(), at.getScaleY()));\n+\n+                    double xx = at.getScaleX() * x + at.getTranslateX();\n+                    double yy = at.getScaleY() * y + at.getTranslateY();\n+                    xtranslation = clipRound(xx);\n+                    ytranslation = clipRound(yy);\n+                    width = clipRound(at.getScaleX() * w + xx) - xtranslation;\n+                    height = clipRound(at.getScaleY() * h + yy) - ytranslation;\n+                } else {\n+                    width = w;\n+                    height = h;\n+                    xtranslation = x;\n+                    ytranslation = y;\n+                }\n+                g2d.translate(xtranslation, ytranslation);\n@@ -311,2 +301,2 @@\n-            \/\/ scaled border\n-            int thickness = (int) Math.ceil(4 * at.getScaleX());\n+                \/\/ scaled border\n+                int thickness = (int) Math.ceil(4 * at.getScaleX());\n@@ -314,5 +304,5 @@\n-            g.setColor(background);\n-            \/\/ Draw the bulk of the border\n-            for (int i = 0; i <= thickness; i++) {\n-                g.drawRect(i, i, width - (i * 2), height - (i * 2));\n-            }\n+                g2d.setColor(background);\n+                \/\/ Draw the bulk of the border\n+                for (int i = 0; i <= thickness; i++) {\n+                    g2d.drawRect(i, i, width - (i * 2), height - (i * 2));\n+                }\n@@ -320,31 +310,31 @@\n-            if (c instanceof JInternalFrame && ((JInternalFrame)c).isResizable()) {\n-                \/\/ set new stroke to draw shadow and highlight lines\n-                g2d.setStroke(new BasicStroke((float) stkWidth));\n-\n-                \/\/ midpoint at which highlight & shadow lines\n-                \/\/ are positioned on the border\n-                int midPoint = thickness \/ 2;\n-                int offset = ((at.getScaleX() - stkWidth) >= 0 && stkWidth % 2 != 0) ? 1 : 0;\n-                int loc1 = thickness % 2 == 0 ? midPoint + stkWidth \/ 2 - stkWidth : midPoint;\n-                int loc2 = thickness % 2 == 0 ? midPoint + stkWidth \/ 2 : midPoint + stkWidth;\n-                \/\/ scaled corner\n-                int corner = (int) Math.round(CORNER * at.getScaleX());\n-\n-                \/\/ Draw the Long highlight lines\n-                g.setColor(highlight);\n-                g.drawLine(corner + 1, loc2, width - corner, loc2); \/\/top\n-                g.drawLine(loc2, corner + 1, loc2, height - corner); \/\/left\n-                g.drawLine((width - offset) - loc1, corner + 1,\n-                        (width - offset) - loc1, height - corner); \/\/right\n-                g.drawLine(corner + 1, (height - offset) - loc1,\n-                        width - corner, (height - offset) - loc1); \/\/bottom\n-\n-                \/\/ Draw the Long shadow lines\n-                g.setColor(shadow);\n-                g.drawLine(corner, loc1, width - corner - 1, loc1);\n-                g.drawLine(loc1, corner, loc1, height - corner - 1);\n-                g.drawLine((width - offset) - loc2, corner,\n-                        (width - offset) - loc2, height - corner - 1);\n-                g.drawLine(corner, (height - offset) - loc2,\n-                        width - corner - 1, (height - offset) - loc2);\n-            }\n+                if (c instanceof JInternalFrame && ((JInternalFrame)c).isResizable()) {\n+                    \/\/ set new stroke to draw shadow and highlight lines\n+                    g2d.setStroke(new BasicStroke((float) stkWidth));\n+\n+                    \/\/ midpoint at which highlight & shadow lines\n+                    \/\/ are positioned on the border\n+                    int midPoint = thickness \/ 2;\n+                    int offset = ((at.getScaleX() - stkWidth) >= 0 && stkWidth % 2 != 0) ? 1 : 0;\n+                    int loc1 = thickness % 2 == 0 ? midPoint + stkWidth \/ 2 - stkWidth : midPoint;\n+                    int loc2 = thickness % 2 == 0 ? midPoint + stkWidth \/ 2 : midPoint + stkWidth;\n+                    \/\/ scaled corner\n+                    int corner = (int) Math.round(CORNER * at.getScaleX());\n+\n+                    \/\/ Draw the Long highlight lines\n+                    g2d.setColor(highlight);\n+                    g2d.drawLine(corner + 1, loc2, width - corner, loc2); \/\/top\n+                    g2d.drawLine(loc2, corner + 1, loc2, height - corner); \/\/left\n+                    g2d.drawLine((width - offset) - loc1, corner + 1,\n+                            (width - offset) - loc1, height - corner); \/\/right\n+                    g2d.drawLine(corner + 1, (height - offset) - loc1,\n+                            width - corner, (height - offset) - loc1); \/\/bottom\n+\n+                    \/\/ Draw the Long shadow lines\n+                    g2d.setColor(shadow);\n+                    g2d.drawLine(corner, loc1, width - corner - 1, loc1);\n+                    g2d.drawLine(loc1, corner, loc1, height - corner - 1);\n+                    g2d.drawLine((width - offset) - loc2, corner,\n+                            (width - offset) - loc2, height - corner - 1);\n+                    g2d.drawLine(corner, (height - offset) - loc2,\n+                            width - corner - 1, (height - offset) - loc2);\n+                }\n@@ -352,6 +342,7 @@\n-            \/\/ restore previous transform\n-            g2d.translate(-xtranslation, -ytranslation);\n-            if (resetTransform) {\n-                g2d.setColor(oldColor);\n-                g2d.setTransform(at);\n-                g2d.setStroke(oldStk);\n+                \/\/ restore previous transform\n+                g2d.translate(-xtranslation, -ytranslation);\n+                if (resetTransform) {\n+                    g2d.setColor(oldColor);\n+                    g2d.setTransform(at);\n+                    g2d.setStroke(oldStk);\n+                }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/metal\/MetalBorders.java","additions":93,"deletions":102,"binary":false,"changes":195,"status":"modified"}]}