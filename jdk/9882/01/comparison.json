{"files":[{"patch":"@@ -877,1 +877,1 @@\n-  BUILD_HOTSPOT_JTREG_EXCLUDE += exesigtest.c libterminatedThread.c libTestJNI.c libCompleteExit.c libTestPsig.c\n+  BUILD_HOTSPOT_JTREG_EXCLUDE += exesigtest.c libterminatedThread.c libTestJNI.c libCompleteExit.c\n","filename":"make\/test\/JtregNativeHotspot.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -893,1 +893,1 @@\n-void os::run_periodic_checks() {\n+void os::run_periodic_checks(outputStream* st) {\n@@ -927,2 +927,2 @@\n-    os::print_signal_handlers(tty, buf, O_BUFLEN);\n-    tty->print_cr(\"Consider using jsig library.\");\n+    os::print_signal_handlers(st, buf, O_BUFLEN);\n+    st->print_cr(\"Consider using jsig library.\");\n","filename":"src\/hotspot\/os\/posix\/signals_posix.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -272,1 +272,1 @@\n-\/\/ This method is  a periodic task to check for misbehaving JNI applications\n+\/\/ This method is a periodic task to check for misbehaving JNI applications\n@@ -275,1 +275,1 @@\n-void os::run_periodic_checks() {\n+void os::run_periodic_checks(outputStream* st) {\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-     void task() { os::run_periodic_checks(); }\n+     void task() { os::run_periodic_checks(tty); }\n","filename":"src\/hotspot\/share\/runtime\/jniPeriodicChecker.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -260,1 +260,1 @@\n-  static void   run_periodic_checks();\n+  static void   run_periodic_checks(outputStream* st);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#ifndef _WIN32\n+#include \"memory\/allocation.hpp\"\n+#include \"memory\/resourceArea.hpp\"\n+#include \"runtime\/os.hpp\"\n+#include \"utilities\/defaultStream.hpp\"\n+#include \"unittest.hpp\"\n+\n+#include <signal.h>\n+#include <stdio.h>\n+#include <sys\/ucontext.h>\n+#include <string.h>\n+\n+extern \"C\" {\n+  static void sig_handler(int sig, siginfo_t *info, ucontext_t *context) {\n+    printf( \" HANDLER (1) \" );\n+  }\n+}\n+\n+class PosixSignalTest : public ::testing::Test {\n+  public:\n+\n+  static void check_handlers() {\n+    ResourceMark rm;\n+    struct sigaction act, old_SIGFPE_act, old_SIGILL_act;\n+    act.sa_handler = (void (*)(int))sig_handler;\n+    sigemptyset(&act.sa_mask);\n+    act.sa_flags = 0;\n+    ASSERT_NE(sigaction(SIGFPE, &act, &old_SIGFPE_act), -1) << \"Setting SIGFPE handler failed\";\n+    ASSERT_NE(sigaction(SIGILL, &act, &old_SIGILL_act), -1) << \"Setting SIGILL handler failed\";\n+\n+    \/\/ Use local stringStream to capture output from run_periodic_checks() calls to\n+    \/\/ print_signal_handlers().\n+    stringStream st;\n+    os::run_periodic_checks(&st);\n+    char* res = st.as_string();\n+\n+    \/\/ Restore signal handlers.\n+    ASSERT_NE(sigaction(SIGFPE, &act, &old_SIGFPE_act), -1) << \"Restoring SIGFPE handler failed\";\n+    ASSERT_NE(sigaction(SIGILL, &act, &old_SIGILL_act), -1) << \"Restoring SIGILL handler failed\";\n+\n+    \/\/ Check that \"Handler was modified\" occurs exactly twice in the tty output.\n+    char* modified = strstr(res, \"Handler was modified!\");\n+    ASSERT_NE(modified, nullptr) << \"No message found\";\n+\n+    modified = strstr(modified + 1, \"Handler was modified!\");\n+    ASSERT_NE(modified, nullptr) << \"Only one message found\";\n+    ASSERT_EQ(strstr(modified + 1, \"Handler was modified!\"), nullptr) << \"Too many messages found\";\n+  }\n+};\n+\n+\/\/ This tests the fix for JDK-8285792.\n+TEST_VM(PosixSignalTest, check_handlers) {\n+  PosixSignalTest::check_handlers();\n+}\n+\n+#endif\n","filename":"test\/hotspot\/gtest\/runtime\/test_signals.cpp","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"},{"patch":"@@ -1,76 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test TestPosixSig.java\n- * @bug 8285792\n- * @summary fix issues with signal handler modification checks\n- * @requires os.family != \"windows\"\n- * @library \/test\/lib\n- * @run driver TestPosixSig\n- *\/\n-\n-import jdk.test.lib.process.ProcessTools;\n-import jdk.test.lib.process.OutputAnalyzer;\n-\n-public class TestPosixSig {\n-\n-    \/\/ Check that a substring occurs exactly once.\n-    public static boolean occursOnce(String source, String substring) {\n-        int index = source.indexOf(substring);\n-        if (index == -1) return false;\n-        return (source.indexOf(substring, index + 1) == -1);\n-    }\n-\n-    private static native void changeSigActionFor(int val);\n-\n-    public static void main(String[] args) throws Throwable {\n-        \/\/ Get the library path property.\n-        String libpath = System.getProperty(\"java.library.path\");\n-\n-        if (args.length == 0) {\n-\n-            \/\/ Create a new java process for the TestPsig Java\/JNI test\n-            ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n-                \"-XX:+CheckJNICalls\",\n-                \"-Djava.library.path=\" + libpath + \":.\",\n-                \"TestPosixSig\", \"dummy\");\n-\n-            \/\/ Start the process and check the output\n-            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n-            String outputString = output.getOutput();\n-            if (!occursOnce(outputString, \"SIGFPE: sig_handler in \") ||\n-                !occursOnce(outputString, \"SIGILL: sig_handler in \")) {\n-                System.out.println(\"output: \" + outputString);\n-                throw new RuntimeException(\"Test failed, bad output.\");\n-            }\n-            output.shouldHaveExitValue(0);\n-\n-        } else {\n-            System.loadLibrary(\"TestPsig\");\n-            TestPosixSig.changeSigActionFor(8); \/\/ SIGFPE\n-            TestPosixSig.changeSigActionFor(4); \/\/ SIGILL\n-            Thread.sleep(600);\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/posixSig\/TestPosixSig.java","additions":0,"deletions":76,"binary":false,"changes":76,"status":"deleted"},{"patch":"@@ -1,54 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#include <stdio.h>\n-#include <jni.h>\n-#include <signal.h>\n-#include <sys\/ucontext.h>\n-#include <errno.h>\n-#include <string.h>\n-\n-#ifdef __cplusplus\n-extern \"C\" {\n-#endif\n-\n-void sig_handler(int sig, siginfo_t *info, ucontext_t *context) {\n-\n-    printf( \" HANDLER (1) \" );\n-}\n-\n-JNIEXPORT void JNICALL Java_TestPosixSig_changeSigActionFor(JNIEnv *env, jclass klass, jint val) {\n-    struct sigaction act;\n-    act.sa_handler = (void (*)())sig_handler;\n-    sigemptyset(&act.sa_mask);\n-    act.sa_flags = 0;\n-    int retval = sigaction(val, &act, 0);\n-    if (retval != 0) {\n-        printf(\"ERROR: failed to set %d signal handler error=%s\\n\", val, strerror(errno));\n-    }\n-}\n-\n-#ifdef __cplusplus\n-}\n-#endif\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/posixSig\/libTestPsig.c","additions":0,"deletions":54,"binary":false,"changes":54,"status":"deleted"}]}