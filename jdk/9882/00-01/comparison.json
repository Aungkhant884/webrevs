{"files":[{"patch":"@@ -877,1 +877,1 @@\n-  BUILD_HOTSPOT_JTREG_EXCLUDE += exesigtest.c libterminatedThread.c libTestJNI.c libCompleteExit.c libTestPsig.c\n+  BUILD_HOTSPOT_JTREG_EXCLUDE += exesigtest.c libterminatedThread.c libTestJNI.c libCompleteExit.c\n","filename":"make\/test\/JtregNativeHotspot.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -893,1 +893,1 @@\n-void os::run_periodic_checks() {\n+void os::run_periodic_checks(outputStream* st) {\n@@ -927,2 +927,2 @@\n-    os::print_signal_handlers(tty, buf, O_BUFLEN);\n-    tty->print_cr(\"Consider using jsig library.\");\n+    os::print_signal_handlers(st, buf, O_BUFLEN);\n+    st->print_cr(\"Consider using jsig library.\");\n","filename":"src\/hotspot\/os\/posix\/signals_posix.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -272,1 +272,1 @@\n-\/\/ This method is  a periodic task to check for misbehaving JNI applications\n+\/\/ This method is a periodic task to check for misbehaving JNI applications\n@@ -275,1 +275,1 @@\n-void os::run_periodic_checks() {\n+void os::run_periodic_checks(outputStream* st) {\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-     void task() { os::run_periodic_checks(); }\n+     void task() { os::run_periodic_checks(tty); }\n","filename":"src\/hotspot\/share\/runtime\/jniPeriodicChecker.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -260,1 +260,1 @@\n-  static void   run_periodic_checks();\n+  static void   run_periodic_checks(outputStream* st);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-  static const char* check_handlers() {\n+  static void check_handlers() {\n@@ -52,8 +52,2 @@\n-    if (sigaction(SIGFPE, &act, &old_SIGFPE_act) == -1) {\n-      perror(\"SIGFPE: \");\n-      return \"sigaction(SIGFPE) failed\";\n-    }\n-    if (sigaction(SIGILL, &act, &old_SIGILL_act) == -1) {\n-      perror(\"SIGILL: \");\n-      return \"sigaction(SIGILL) failed\";\n-    }\n+    ASSERT_NE(sigaction(SIGFPE, &act, &old_SIGFPE_act), -1) << \"Setting SIGFPE handler failed\";\n+    ASSERT_NE(sigaction(SIGILL, &act, &old_SIGILL_act), -1) << \"Setting SIGILL handler failed\";\n@@ -61,0 +55,2 @@\n+    \/\/ Use local stringStream to capture output from run_periodic_checks() calls to\n+    \/\/ print_signal_handlers().\n@@ -62,6 +58,1 @@\n-    outputStream* otty = tty; \/\/ Save tty so it can be restored.\n-\n-    \/\/ Set tty to local stringStream to capture output from run_periodic_checks()\n-    \/\/ calls to print_signal_handlers().\n-    tty = &st;\n-    os::run_periodic_checks();\n+    os::run_periodic_checks(&st);\n@@ -70,10 +61,3 @@\n-    \/\/ Restore tty and signal handlers.\n-    tty = otty; \/\/ Restore tty.\n-    if (sigaction(SIGFPE, &old_SIGFPE_act, 0) == -1) {\n-      perror(\"SIGFPE: \");\n-      return \"restoring SIGFPE handler failed\";\n-    }\n-    if (sigaction(SIGILL, &old_SIGILL_act, 0)) {\n-      perror(\"SIGILL: \");\n-      return \"restoring SIGILL handler failed\";\n-    }\n+    \/\/ Restore signal handlers.\n+    ASSERT_NE(sigaction(SIGFPE, &act, &old_SIGFPE_act), -1) << \"Restoring SIGFPE handler failed\";\n+    ASSERT_NE(sigaction(SIGILL, &act, &old_SIGILL_act), -1) << \"Restoring SIGILL handler failed\";\n@@ -83,1 +67,2 @@\n-    if (modified == NULL) return \"No message found\";\n+    ASSERT_NE(modified, nullptr) << \"No message found\";\n+\n@@ -85,5 +70,2 @@\n-    if (modified == NULL) return \"Only one message found\";\n-    if (strstr(modified + 1, \"Handler was modified!\") != NULL) {\n-      return \"Too many messages found\";\n-    }\n-    return \"Success\";\n+    ASSERT_NE(modified, nullptr) << \"Only one message found\";\n+    ASSERT_EQ(strstr(modified + 1, \"Handler was modified!\"), nullptr) << \"Too many messages found\";\n@@ -95,1 +77,1 @@\n-  ASSERT_STREQ(PosixSignalTest::check_handlers(), \"Success\");\n+  PosixSignalTest::check_handlers();\n","filename":"test\/hotspot\/gtest\/runtime\/test_signals.cpp","additions":14,"deletions":32,"binary":false,"changes":46,"status":"modified"}]}