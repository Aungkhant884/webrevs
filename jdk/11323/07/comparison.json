{"files":[{"patch":"@@ -1181,0 +1181,6 @@\n+         * @implNote The read method of the default implementation returned\n+         * by this method will throw an IOException with the thread interrupt\n+         * status set if the thread is interrupted while blocking on read.\n+         * In that case, the request will also be cancelled and the\n+         * input stream will be closed.\n+         *\n","filename":"src\/java.net.http\/share\/classes\/java\/net\/http\/HttpResponse.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.io.InterruptedIOException;\n@@ -484,1 +485,6 @@\n-                    \/\/ continue\n+                    try {\n+                        close();\n+                    } catch (IOException ignored) {\n+                    }\n+                    Thread.currentThread().interrupt();\n+                    throw new IOException(ex);\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/ResponseSubscribers.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,178 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8294047\n+ * @library \/test\/lib\n+ * @run junit HttpResponseInputStreamInterruptTest\n+ *\/\n+\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n+import jdk.test.lib.net.URIBuilder;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.util.concurrent.CountDownLatch;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+public class HttpResponseInputStreamInterruptTest {\n+\n+    HttpServer server;\n+    int port;\n+    private final CountDownLatch interruptReadyLatch = new CountDownLatch(2);\n+    private final CountDownLatch interruptDoneLatch = new CountDownLatch(1);\n+    static final String FIRST_MESSAGE = \"Should be received\";\n+    static final String SECOND_MESSAGE = \"Shouldn't be received\";\n+\n+    @BeforeAll\n+    void before() throws Exception {\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        InetSocketAddress addr = new InetSocketAddress(loopback, 0);\n+        server = HttpServer.create(addr, 0);\n+        port = server.getAddress().getPort();\n+        Handler handler = new Handler(interruptReadyLatch, interruptDoneLatch);\n+        server.createContext(\"\/HttpResponseInputStreamInterruptTest\/\", handler);\n+        server.start();\n+    }\n+\n+    @AfterAll\n+    void after() throws Exception {\n+        server.stop(0);\n+    }\n+\n+    @Test\n+    public void test() {\n+        try {\n+            \/\/ create client and interrupter threads\n+            Thread clientThread = createClientThread(interruptReadyLatch, port);\n+            Thread interrupterThread = new Thread(() -> {\n+                try {\n+                    \/\/ wait until the clientThread is just about to read the second message sent by the server\n+                    \/\/ then interrupt the thread to cause an error to be thrown\n+                    interruptReadyLatch.await();\n+                    clientThread.interrupt();\n+                    interruptDoneLatch.countDown();\n+                } catch (InterruptedException e) {\n+                    System.out.println(\"interrupterThread failed\");\n+                    throw new RuntimeException(e);\n+                }\n+            });\n+\n+            \/\/ Start the threads then wait until clientThread completes\n+            clientThread.start();\n+            interrupterThread.start();\n+            clientThread.join();\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    static class Handler implements HttpHandler {\n+\n+        CountDownLatch interruptReadyLatch;\n+        CountDownLatch interruptDoneLatch;\n+\n+        public Handler(CountDownLatch interruptReadyLatch, CountDownLatch interruptDoneLatch) {\n+            this.interruptReadyLatch = interruptReadyLatch;\n+            this.interruptDoneLatch = interruptDoneLatch;\n+        }\n+\n+        @Override\n+        public void handle(HttpExchange exchange) throws IOException {\n+            try (OutputStream os = exchange.getResponseBody()) {\n+                byte[] workingResponse = FIRST_MESSAGE.getBytes();\n+                byte[] errorResponse = SECOND_MESSAGE.getBytes();\n+                exchange.sendResponseHeaders(200, workingResponse.length + errorResponse.length);\n+\n+                \/\/ write and flush the first message which is expected to be received successfully\n+                os.write(workingResponse);\n+                os.flush();\n+\n+                \/\/ await the interrupt threads completion, then write the second message\n+                interruptReadyLatch.countDown();\n+                interruptDoneLatch.await();\n+                os.write(errorResponse);\n+            } catch (InterruptedException e) {\n+                System.out.println(\"interruptDoneLatch await failed\");\n+                throw new RuntimeException(e);\n+            }\n+        }\n+    }\n+\n+    static Thread createClientThread(CountDownLatch interruptReadyLatch, int port) {\n+        return new Thread(() -> {\n+            try {\n+                HttpClient client = HttpClient\n+                        .newBuilder()\n+                        .proxy(HttpClient.Builder.NO_PROXY)\n+                        .build();\n+\n+                URI uri = URIBuilder.newBuilder()\n+                        .scheme(\"http\")\n+                        .loopback()\n+                        .port(port)\n+                        .path(\"\/HttpResponseInputStreamInterruptTest\/\")\n+                        .build();\n+\n+                HttpRequest request = HttpRequest\n+                        .newBuilder(uri)\n+                        .GET()\n+                        .build();\n+\n+                \/\/ Send a httpRequest and assert the first response is received as expected\n+                HttpResponse<InputStream> response = client.send(request, HttpResponse.BodyHandlers.ofInputStream());\n+                String firstOutput = new String(response.body().readNBytes(FIRST_MESSAGE.getBytes().length));\n+                assertEquals(firstOutput, FIRST_MESSAGE);\n+\n+                \/\/ countdown on latch, and assert that an IOException is throw due to the interrupt\n+                \/\/ and assert that the cause is a InterruptedException\n+                interruptReadyLatch.countDown();\n+                var thrown = assertThrows(IOException.class, () -> response.body().readAllBytes(), \"expected IOException\");\n+                var cause = thrown.getCause();\n+                assertTrue(cause instanceof InterruptedException, cause + \" is not an InterruptedException\");\n+            } catch (Throwable t) {\n+                t.printStackTrace();\n+                fail();\n+            }\n+        });\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/httpclient\/HttpResponseInputStreamInterruptTest.java","additions":178,"deletions":0,"binary":false,"changes":178,"status":"added"}]}