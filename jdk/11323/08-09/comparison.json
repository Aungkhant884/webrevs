{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1181,5 +1181,6 @@\n-         * @implNote The read method of the default implementation returned\n-         * by this method will throw an IOException with the thread interrupt\n-         * status set if the thread is interrupted while blocking on read.\n-         * In that case, the request will also be cancelled and the\n-         * input stream will be closed.\n+         * @implNote The {@code read} method of the {@code InputStream}\n+         * returned by the default implementation of this method will\n+         * throw an {@code IOException} with the {@linkplain Thread#isInterrupted()\n+         * thread interrupt status set} if the thread is interrupted\n+         * while blocking on read. In that case, the request will also be\n+         * cancelled and the {@code InputStream} will be closed.\n","filename":"src\/java.net.http\/share\/classes\/java\/net\/http\/HttpResponse.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import java.io.InterruptedIOException;\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/ResponseSubscribers.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -83,16 +83,15 @@\n-    public void test() {\n-        try {\n-            \/\/ create client and interrupter threads\n-            Thread clientThread = createClientThread(interruptReadyLatch, port);\n-            Thread interrupterThread = new Thread(() -> {\n-                try {\n-                    \/\/ wait until the clientThread is just about to read the second message sent by the server\n-                    \/\/ then interrupt the thread to cause an error to be thrown\n-                    interruptReadyLatch.await();\n-                    clientThread.interrupt();\n-                    interruptDoneLatch.countDown();\n-                } catch (InterruptedException e) {\n-                    System.out.println(\"interrupterThread failed\");\n-                    throw new RuntimeException(e);\n-                }\n-            });\n+    public void test() throws Exception {\n+        \/\/ create client and interrupter threads\n+        Thread clientThread = createClientThread(interruptReadyLatch, port);\n+        Thread interrupterThread = new Thread(() -> {\n+            try {\n+                \/\/ wait until the clientThread is just about to read the second message sent by the server\n+                \/\/ then interrupt the thread to cause an error to be thrown\n+                interruptReadyLatch.await();\n+                clientThread.interrupt();\n+                interruptDoneLatch.countDown();\n+            } catch (InterruptedException e) {\n+                System.out.println(\"interrupterThread failed\");\n+                throw new RuntimeException(e);\n+            }\n+        });\n@@ -100,7 +99,4 @@\n-            \/\/ Start the threads then wait until clientThread completes\n-            clientThread.start();\n-            interrupterThread.start();\n-            clientThread.join();\n-        } catch (Exception e) {\n-            throw new RuntimeException(e);\n-        }\n+        \/\/ Start the threads then wait until clientThread completes\n+        clientThread.start();\n+        interrupterThread.start();\n+        clientThread.join();\n","filename":"test\/jdk\/java\/net\/httpclient\/HttpResponseInputStreamInterruptTest.java","additions":19,"deletions":23,"binary":false,"changes":42,"status":"modified"}]}