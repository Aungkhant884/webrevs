{"files":[{"patch":"@@ -32,0 +32,1 @@\n+import java.io.InterruptedIOException;\n@@ -484,2 +485,5 @@\n-                    close();\n-                    throw new IOException(\"interrupted\", ex);\n+                    try {\n+                        close();\n+                    } catch (IOException ignored) {\n+                    }\n+                    throw new InterruptedIOException();\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/ResponseSubscribers.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+import java.io.InterruptedIOException;\n@@ -59,2 +60,2 @@\n-    private CountDownLatch countDownLatch = new CountDownLatch(2);\n-    private CountDownLatch interruptLatch = new CountDownLatch(1);\n+    private CountDownLatch interruptReadyLatch = new CountDownLatch(2);\n+    private CountDownLatch interruptDoneLatch = new CountDownLatch(1);\n@@ -70,2 +71,2 @@\n-        Handler handler = new Handler(countDownLatch, interruptLatch);\n-        server.createContext(\"\/\", handler);\n+        Handler handler = new Handler(interruptReadyLatch, interruptDoneLatch);\n+        server.createContext(\"\/HttpResponseInputStreamInterruptTest\/\", handler);\n@@ -83,2 +84,2 @@\n-            \/\/create client and interrupter threads\n-            Thread clientThread = createClientThread(countDownLatch, port);\n+            \/\/ create client and interrupter threads\n+            Thread clientThread = createClientThread(interruptReadyLatch, port);\n@@ -87,1 +88,3 @@\n-                    countDownLatch.await();\n+                    \/\/ wait until the clientThread is just about to read the second message sent by the server\n+                    \/\/ then interrupt the thread to cause an error to be thrown\n+                    interruptReadyLatch.await();\n@@ -89,1 +92,1 @@\n-                    interruptLatch.countDown();\n+                    interruptDoneLatch.countDown();\n@@ -107,2 +110,2 @@\n-        CountDownLatch countDownLatch;\n-        CountDownLatch interruptLatch;\n+        CountDownLatch interruptReadyLatch;\n+        CountDownLatch interruptDoneLatch;\n@@ -110,3 +113,3 @@\n-        public Handler(CountDownLatch countDownLatch, CountDownLatch interruptLatch) {\n-            this.countDownLatch = countDownLatch;\n-            this.interruptLatch = interruptLatch;\n+        public Handler(CountDownLatch interruptReadyLatch, CountDownLatch interruptDoneLatch) {\n+            this.interruptReadyLatch = interruptReadyLatch;\n+            this.interruptDoneLatch = interruptDoneLatch;\n@@ -127,2 +130,2 @@\n-                countDownLatch.countDown();\n-                interruptLatch.await();\n+                interruptReadyLatch.countDown();\n+                interruptDoneLatch.await();\n@@ -131,1 +134,1 @@\n-                System.out.println(\"interruptLatch await failed\");\n+                System.out.println(\"interruptDoneLatch await failed\");\n@@ -137,1 +140,1 @@\n-    static Thread createClientThread(CountDownLatch countDownLatch, int port) {\n+    static Thread createClientThread(CountDownLatch interruptReadyLatch, int port) {\n@@ -149,1 +152,1 @@\n-                        .path(\"\/\")\n+                        .path(\"\/HttpResponseInputStreamInterruptTest\/\")\n@@ -163,2 +166,2 @@\n-                countDownLatch.countDown();\n-                assertThrows(IOException.class, () -> response.body().readAllBytes(), \"excepted IOException\");\n+                interruptReadyLatch.countDown();\n+                assertThrows(InterruptedIOException.class, () -> response.body().readAllBytes(), \"excepted IOException\");\n@@ -171,1 +174,0 @@\n-\n","filename":"test\/jdk\/java\/net\/httpclient\/HttpResponseInputStreamInterruptTest.java","additions":23,"deletions":21,"binary":false,"changes":44,"status":"modified"}]}