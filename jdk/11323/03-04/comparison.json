{"files":[{"patch":"@@ -1181,0 +1181,6 @@\n+         * @implNote The read method of the default implementation returned\n+         * by this method will throw an IOException with the thread interrupt\n+         * status set if the thread is interrupted while blocking on read.\n+         * In that case, the request will also be cancelled and the\n+         * input stream will be closed.\n+         *\n","filename":"src\/java.net.http\/share\/classes\/java\/net\/http\/HttpResponse.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -489,3 +489,1 @@\n-                    \/\/ Throw InterruptedIOException where the initCause is\n-                    \/\/ set to the caught InterruptedException\n-                    throw Utils.toInterruptedIOException(ex);\n+                    throw new IOException(ex);\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/ResponseSubscribers.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1137,5 +1137,0 @@\n-    public static InterruptedIOException toInterruptedIOException(InterruptedException ex){\n-        InterruptedIOException interruptedIOException = new InterruptedIOException();\n-        interruptedIOException.initCause(ex);\n-        return interruptedIOException;\n-    }\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/common\/Utils.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-import java.io.InterruptedIOException;\n@@ -167,1 +166,1 @@\n-                assertThrows(InterruptedIOException.class, () -> response.body().readAllBytes(), \"expected InterruptedIoException\");\n+                assertThrows(IOException.class, () -> response.body().readAllBytes(), \"expected IOException\");\n","filename":"test\/jdk\/java\/net\/httpclient\/HttpResponseInputStreamInterruptTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}