{"files":[{"patch":"@@ -8719,0 +8719,236 @@\n+\n+    \/**\n+     * Checks that the specified array reference itself and all\n+     * elements in the array are not null.\n+     * This method is designed primarily for doing parameter\n+     * validation in methods and constructors, as demonstrated below:\n+     * {@snippet :\n+     * public Foo(Bar[] bar) {\n+     *      this.bar = Arrays.requireNoNulls(bar);\n+     *  }\n+     * }\n+     *\n+     * @param array the array reference to check for nullity\n+     * @return {@code array} if the array itself and all elements in the array are not {@code null}.\n+     * @throws NullPointerException if {@code array == null} or any element in the {@code array}\n+     *      is null.\n+     * @param <E> The component type of the array.\n+     * @since TBA\n+     *\/\n+    \/\/ @ForceInline\n+    public static <E> E[] requireNoNulls(E[] array) {\n+        Objects.requireNonNull(array);\n+        int len = array.length;\n+        for (int i = 0; i < len; i++) {\n+            if (array[i] == null) {\n+                throw new NullPointerException();\n+            }\n+        }\n+        return array;\n+    }\n+\n+    \/**\n+     * Checks that the specified array reference itself and all\n+     * elements in the array are not null and throws a customized {@link NullPointerException} if it is.\n+     *\n+     * @param array the array reference to check for nullity\n+     * @param message detail message to be used in the event that a {@code NullPointerException} is thrown\n+     * @return {@code array} if the array itself and all elements in the array are not {@code null}.\n+     * @throws NullPointerException if {@code array == null} or any element in the {@code array}\n+     *      is null.\n+     * @param <E> The component type of the array.\n+     * @since TBA\n+     *\/\n+    \/\/ @ForceInline\n+    public static <E> E[] requireNoNulls(E[] array, String message) {\n+        Objects.requireNonNull(array, message);\n+        int len = array.length;\n+        for (int i = 0; i < len; i++) {\n+            if (array[i] == null) {\n+                throw new NullPointerException(message);\n+            }\n+        }\n+        return array;\n+    }\n+\n+    \/**\n+     * Checks that the specified array reference itself and all\n+     * elements in the array are not null and throws a customized {@link NullPointerException} if it is.\n+     * <p>\n+     * The message generator {@code messageGenerator} accepts an {@code int} argument\n+     * and returns a {@code String}.  The argument of the function is the index of the first {@code null}\n+     * element or {@code -1} if the {@code array} itself is null.\n+     * <p>\n+     * Unlike the method {@link #requireNoNulls(Object[], String)},\n+     * this method allows creation of the message to be deferred\n+     * until after the null check is made. While this may confer\n+     * a performance advantage in the non-null case, when deciding\n+     * to call this method care should be taken that the costs of\n+     * creating the message supplier are less than the cost of\n+     * just creating the string message directly.\n+     *\n+     * @param array the array reference to check for nullity\n+     * @param messageGenerator generator of the detail message to be used in the\n+     *                         event that a NullPointerException is thrown\n+     * @return {@code array} if the array itself and all elements in the array are not {@code null}.\n+     * @throws NullPointerException if {@code array == null} or any element in the {@code array}\n+     *      is null\n+     * @param <E> The component type of the array.\n+     * @since TBA\n+     *\/\n+    \/\/ @ForceInline\n+    public static <E> E[] requireNoNulls(E[] array, IntFunction<String> messageGenerator) {\n+        if (array == null) {\n+            throw new NullPointerException(messageGenerator.apply(-1));\n+        }\n+        int len = array.length;\n+        for (int i = 0; i < len; i++) {\n+            if (array[i] == null) {\n+                throw new NullPointerException(messageGenerator.apply(i));\n+            }\n+        }\n+        return array;\n+    }\n+\n+    \/**\n+     * Finds and replaces all null elements in an array with a non-null object.\n+     * <p>\n+     * The replace function accepts the index of the null element as the argument,\n+     * and returns a non-null object used to replace the null element.  This method\n+     * invokes the replace function for every null slot.\n+     *\n+     * @param array a non-null array reference\n+     * @param replaceFunction a function to be used to replace {@code null} elements\n+     * @return the reference to the {@code array}\n+     * @throws NullPointerException if {@code array == null} or {@code replaceFunction == null}\n+     *      or {@code replaceFunction.apply} returns {@code null}.\n+     * @throws ArrayStoreException if {@code replaceFunction.apply} returns an object that cannot\n+     *      be stored into the array\n+     * @param <E> the component type of the array\n+     * @since TBA\n+     *\/\n+    public static <E> E[] requireNoNullsElseReplace(E[] array, IntFunction<? extends E> replaceFunction) {\n+        Objects.requireNonNull(array, \"array == null\");\n+        Objects.requireNonNull(replaceFunction, \"replaceFunction == null\");\n+        int len = array.length;\n+        for (int i = 0; i < len; i++) {\n+            if (array[i] == null) {\n+                array[i] = Objects.requireNonNull(replaceFunction.apply(i), \"replaceFunction returns null\");\n+            }\n+        }\n+        return array;\n+    }\n+\n+    \/**\n+     * Copies the specified array and checks that the specified array reference\n+     * itself and all elements in the array are not null.\n+     * If the method returns without throwing an exception, it is guaranteed that\n+     * the returned array does not contain any null element.\n+     *\n+     * @param array the array reference to be copied\n+     * @return a copy of the {@code array} if the array itself and all elements in the\n+     *      array are not {@code null}.\n+     * @throws NullPointerException if {@code array == null} or any element in the {@code array}\n+     *      is null.\n+     * @param <E> The component type of the array.\n+     * @since TBA\n+     *\/\n+    public static <E> E[] requireNoNullsCopied(E[] array) {\n+        return requireNoNullsCopied(array, (i) -> null);\n+    }\n+\n+    \/**\n+     * Copies the specified array and checks that the specified array reference\n+     * itself and all elements in the array are not null and throws a customized\n+     * {@link NullPointerException} if it is.\n+     * <p>\n+     * The message generator {@code messageGenerator} accepts an {@code int} argument\n+     * and returns a {@code String}.  The argument of the function is the index of the first {@code null}\n+     * element or {@code -1} if the {@code array} itself is null.\n+     * <p>\n+     * If the method returns without throwing an exception, it is guaranteed that\n+     * the returned array does not contain any null element.\n+     *\n+     * @param array the array reference to check for nullity\n+     * @param messageGenerator generator of the detail message to be used in the\n+     *                         event that a NullPointerException is thrown\n+     * @return a copy of the {@code array} if the array itself and all elements in the array are not {@code null}.\n+     * @throws NullPointerException if {@code array == null} or any element in the {@code array}\n+     *      is null\n+     * @param <E> The component type of the array.\n+     * @since TBA\n+     *\/\n+    public static <E> E[] requireNoNullsCopied(E[] array, IntFunction<String> messageGenerator) {\n+        if (array == null) {\n+            throw new NullPointerException(messageGenerator.apply(-1));\n+        }\n+        int len = array.length;\n+        @SuppressWarnings(\"unchecked\")\n+        E[] result = (E[])Array.newInstance(array.getClass().getComponentType(), len); \/\/ or use array.clone?\n+        for (int i = 0; i < len; i++) {\n+            E element;\n+            if ((element = array[i]) == null) {\n+                throw new NullPointerException(messageGenerator.apply(i));\n+            }\n+            result[i] = element;\n+        }\n+        return result;\n+    }\n+\n+    \/**\n+     * Copies the specified array and checks that the specified array reference\n+     * itself and all elements in the array are not null and throws a customized\n+     * {@link NullPointerException} if it is.\n+     * <p>\n+     * If the method returns without throwing an exception, it is guaranteed that\n+     * the returned array does not contain any null element.\n+     *\n+     * @param array the array reference to check for nullity\n+     * @param message detail message to be used in the event that a {@code NullPointerException} is thrown\n+     * @return a copy of the {@code array} if the array itself and all elements in the array are not {@code null}.\n+     * @throws NullPointerException if {@code array == null} or any element in the {@code array}\n+     *      is null.\n+     * @param <E> The component type of the array.\n+     * @since TBA\n+     *\/\n+    public static <E> E[] requireNoNullsCopied(E[] array, String message) {\n+        return requireNoNullsCopied(array, (i) -> message);\n+    }\n+\n+    \/**\n+     * Returns a copy of an array replaced all null elements in the array with a non-null object.\n+     * The original array is not modified.\n+     * <p>\n+     * The replace function accepts the index of the null element as the argument,\n+     * and returns a non-null object used to replace the null element in the result array.\n+     * This method invokes the replace function for every null slot.\n+     * <p>\n+     * If the method returns without throwing an exception, it is guaranteed that\n+     * the returned array does not contain any null element.\n+     *\n+     * @param array a non-null array reference\n+     * @param replaceFunction a function to be used to replace {@code null} elements\n+     * @return a modified copy of the {@code array}\n+     * @throws NullPointerException if {@code array == null} or {@code replaceFunction == null}\n+     *      or {@code replaceFunction.apply} returns {@code null}.\n+     * @throws ArrayStoreException if {@code replaceFunction.apply} returns an object that cannot\n+     *      be stored into the array\n+     * @param <E> the component type of the array\n+     * @since TBA\n+     *\/\n+    public static <E> E[] requireNoNullsCopiedElseReplace(E[] array, IntFunction<? extends E> replaceFunction) {\n+        Objects.requireNonNull(array, \"array == null\");\n+        Objects.requireNonNull(replaceFunction, \"replaceFunction == null\");\n+        int len = array.length;\n+        @SuppressWarnings(\"unchecked\")\n+        E[] result = (E[])Array.newInstance(array.getClass().getComponentType(), len); \/\/ or use array.clone?\n+        for (int i = 0; i < len; i++) {\n+            E element;\n+            if ((element = array[i]) == null) {\n+                array[i] = Objects.requireNonNull(replaceFunction.apply(i), \"replaceFunction returns null\");\n+            } else {\n+                array[i] = element;\n+            }\n+        }\n+        return array;\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/util\/Arrays.java","additions":236,"deletions":0,"binary":false,"changes":236,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import java.util.function.Supplier;\n@@ -5818,0 +5819,241 @@\n+\n+    \/**\n+     * Checks that the specified iterable reference itself and all\n+     * elements in the iterable are not null.\n+     * This method is designed primarily fo doing parameter\n+     * validation in methods and constructors, as demonstrated below:\n+     * {@snippet :\n+     * public Foo(List<Bar> bar) {\n+     *      this.bar = Collections.requireNoNulls(bar);\n+     *  }\n+     * }\n+     *\n+     * @param collection the iterable reference to check for nullity\n+     * @return {@code collection} if the iterable itself and all elements in the iterable are not {@code null}.\n+     * @throws NullPointerException if {@code collection == null} or any element in the {@code collection}\n+     *      is null.\n+     * @param <C> The type of the iterable.\n+     * @since TBA\n+     *\/\n+    public static <C extends Iterable<?>> C requireNoNulls(C collection) {\n+        if (collection == null) {\n+            throw new NullPointerException();\n+        }\n+        for (Object o : collection) {\n+            if (o == null) {\n+                throw new NullPointerException();\n+            }\n+        }\n+        return collection;\n+    }\n+\n+    \/**\n+     * Checks that the specified map reference itself and all\n+     * keys and values in the map are not null.\n+     * This method is designed primarily fo doing parameter\n+     * validation in methods and constructors, as demonstrated below:\n+     * {@snippet :\n+     * public Foo(Map<Bar, Baz> bar) {\n+     *      this.bar = Collections.requireNoNulls(bar);\n+     *  }\n+     * }\n+     *\n+     * @param map the map reference to check for nullity\n+     * @return {@code map} if the map itself and all keys and values in the map are not {@code null}.\n+     * @throws NullPointerException if {@code map == null} or any element in the {@code map}\n+     *      is null.\n+     * @param <M> The type of the map.\n+     * @since TBA\n+     *\/\n+    public static <M extends Map<?, ?>> M requireNoNulls(M map) {\n+        if (map == null) {\n+            throw new NullPointerException();\n+        }\n+        for (Map.Entry<?, ?> e : map.entrySet()) {\n+            if (e.getKey() == null || e.getValue() == null) {\n+                throw new NullPointerException();\n+            }\n+        }\n+        return map;\n+    }\n+\n+    \/**\n+     * Checks that the specified iterable reference itself and all\n+     * elements in the iterable are not null and throws a customized {@link NullPointerException} if it is.\n+     *\n+     * @param collection the iterable reference to check for nullity\n+     * @param message detail message to be used in the event that a {@code NullPointerException} is thrown\n+     * @return {@code collection} if the iterable itself and all elements in the iterable are not {@code null}.\n+     * @throws NullPointerException if {@code collection == null} or any element in the {@code collection}\n+     *      is null.\n+     * @param <C> The type of the iterable.\n+     * @since TBA\n+     *\/\n+    public static <C extends Iterable<?>> C requireNoNulls(C collection, String message) {\n+        if (collection == null) {\n+            throw new NullPointerException(message);\n+        }\n+        for (Object o : collection) {\n+            if (o == null) {\n+                throw new NullPointerException(message);\n+            }\n+        }\n+        return collection;\n+    }\n+\n+    \/**\n+     * Checks that the specified map reference itself and all\n+     * keys and values in the map are not null and throws a customized {@link NullPointerException} if it is.\n+     *\n+     * @param map the map reference to check for nullity\n+     * @param message detail message to be used in the event that a {@code NullPointerException} is thrown\n+     * @return {@code map} if the map itself and all keys and values in the map are not {@code null}.\n+     * @throws NullPointerException if {@code map == null} or any element in the {@code map}\n+     *      is null.\n+     * @param <M> The type of the map.\n+     * @since TBA\n+     *\/\n+    public static <M extends Map<?, ?>> M requireNoNulls(M map, String message) {\n+        if (map == null) {\n+            throw new NullPointerException(message);\n+        }\n+        for (Map.Entry<?, ?> e : map.entrySet()) {\n+            if (e.getKey() == null || e.getValue() == null) {\n+                throw new NullPointerException(message);\n+            }\n+        }\n+        return map;\n+    }\n+\n+    \/**\n+     * Checks that the specified iterable reference itself and all\n+     * elements in the iterable are not null and throws a customized {@link NullPointerException} if it is.\n+     * <p>\n+     * Unlike the method {@link #requireNoNulls(Iterable, String)}, this method allows creation\n+     * of the message to be deferred until after the null check is made. While this may confer\n+     * a performance advantage in the non-null case, when deciding to call this method care\n+     * should be taken that the costs of creating the message supplier are less than the cost\n+     * of just creating the string message directly.\n+     *\n+     * @param collection the iterable reference to check for nullity\n+     * @param messageSupplier supplier of the detail message to be used in the event that a\n+     *                       NullPointerException is thrown\n+     * @return {@code collection} if the iterable itself and all elements in the iterable are not {@code null}.\n+     * @throws NullPointerException if {@code collection == null} or any element in the {@code collection}\n+     *      is null.\n+     * @param <C> The type of the iterable.\n+     * @since TBA\n+     *\/\n+    public static <C extends Iterable<?>> C requireNoNulls(C collection, Supplier<String> messageSupplier) {\n+        if (collection == null) {\n+            throw new NullPointerException(messageSupplier.get());\n+        }\n+        for (Object o : collection) {\n+            if (o == null) {\n+                throw new NullPointerException(messageSupplier.get());\n+            }\n+        }\n+        return collection;\n+    }\n+\n+    \/**\n+     * Checks that the specified map reference itself and all\n+     * keys and values in the map are not null and throws a customized {@link NullPointerException} if it is.\n+     * <p>\n+     * Unlike the method {@link #requireNoNulls(Map, String)}, this method allows creation\n+     * of the message to be deferred until after the null check is made. While this may confer\n+     * a performance advantage in the non-null case, when deciding to call this method care\n+     * should be taken that the costs of creating the message supplier are less than the cost\n+     * of just creating the string message directly.\n+     * @param map the map reference to check for nullity\n+     * @param messageSupplier supplier of the detail message to be used in the event that a\n+     *          NullPointerException is thrown\n+     * @return {@code map} if the map itself and all keys and values in the map are not {@code null}.\n+     * @throws NullPointerException if {@code map == null} or any element in the {@code map}\n+     *      is null.\n+     * @param <M> The type of the map.\n+     * @since TBA\n+     *\/\n+    public static <M extends Map<?, ?>> M requireNoNulls(M map, Supplier<String> messageSupplier) {\n+        if (map == null) {\n+            throw new NullPointerException(messageSupplier.get());\n+        }\n+        for (Map.Entry<?, ?> e : map.entrySet()) {\n+            if (e.getKey() == null || e.getValue() == null) {\n+                throw new NullPointerException(messageSupplier.get());\n+            }\n+        }\n+        return map;\n+    }\n+\n+    \/**\n+     * Checks that the specified list reference itself and all\n+     * elements in the array are not null and throws a customized {@link NullPointerException} if it is.\n+     * <p>\n+     * The message generator {@code messageGenerator} accepts an {@code int} argument\n+     * and returns a {@code String}.  The argument of the function is the index of the first {@code null}\n+     * element or {@code -1} if the {@code list} itself is null.\n+     * <p>\n+     * Unlike the method {@link #requireNoNulls(Iterable, String)},\n+     * this method allows creation of the message to be deferred\n+     * until after the null check is made. While this may confer\n+     * a performance advantage in the non-null case, when deciding\n+     * to call this method care should be taken that the costs of\n+     * creating the message supplier are less than the cost of\n+     * just creating the string message directly.\n+     *\n+     * @param list the list reference to check for nullity\n+     * @param messageGenerator generator of the detail message to be used in the\n+     *                         event that a NullPointerException is thrown\n+     * @return {@code list} if the list itself and all elements in the list are not {@code null}.\n+     * @throws NullPointerException if {@code array == null} or any element in the {@code array}\n+     *      is null\n+     * @param <L> The type of the list.\n+     * @since TBA\n+     *\/\n+    public static <L extends List<?>> L requireNoNulls(L list, IntFunction<String> messageGenerator) {\n+        if (list == null) {\n+            throw new NullPointerException(messageGenerator.apply(-1));\n+        }\n+        ListIterator<?> li = list.listIterator();\n+        while (li.hasNext()) {\n+            if (li.next() == null) {\n+                throw new NullPointerException(messageGenerator.apply(li.nextIndex() - 1));\n+            }\n+        }\n+        return list;\n+    }\n+\n+    \/**\n+     * Finds and replaces all null elements in a list with a non-null object.\n+     * <p>\n+     * The replace function accepts the index of the null element as the argument,\n+     * and returns a non-null object used to replace the null element.  This method\n+     * invokes the replace function for every null slot.\n+     *\n+     * @param list a non-null array reference\n+     * @param replaceFunction a function to be used to replace {@code null} elements\n+     * @return the reference to the {@code list}\n+     * @throws NullPointerException if {@code list == null} or {@code replaceFunction == null}\n+     *      or {@code replaceFunction.apply} returns {@code null}.\n+     * @throws ClassCastException if the {@code list} prevents an element from being set into the\n+     *      list because the element has a wrong type.\n+     * @throws UnsupportedOperationException if the {@linkplain List#listIterator() list iterator} of\n+     *      the {@code list} does not support the set operation.\n+     * @param <E> the element type of the list\n+     * @param <L> the type of the list\n+     * @since TBA\n+     *\/\n+    public static <E, L extends List<? super E>>\n+    L requireNoNullsElseReplace(L list, IntFunction<? extends E> replaceFunction) {\n+        Objects.requireNonNull(list, \"list == null\");\n+        Objects.requireNonNull(replaceFunction, \"replaceFunction == null\");\n+        ListIterator<? super E> li = list.listIterator();\n+        while (li.hasNext()) {\n+            if (li.next() == null) {\n+                li.set(Objects.requireNonNull(replaceFunction.apply(li.nextIndex() - 1),\n+                        \"replaceFunction returns null\"));\n+            }\n+        }\n+        return list;\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/util\/Collections.java","additions":242,"deletions":0,"binary":false,"changes":242,"status":"modified"}]}