{"files":[{"patch":"@@ -6026,0 +6026,34 @@\n+\n+    \/**\n+     * Finds and replaces all null elements in a list with a non-null object.\n+     * <p>\n+     * The replace function accepts the index of the null element as the argument,\n+     * and returns a non-null object used to replace the null element.  This method\n+     * invokes the replace function for every null slot.\n+     *\n+     * @param list a non-null array reference\n+     * @param replaceFunction a function to be used to replace {@code null} elements\n+     * @return the reference to the {@code list}\n+     * @throws NullPointerException if {@code list == null} or {@code replaceFunction == null}\n+     *      or {@code replaceFunction.apply} returns {@code null}.\n+     * @throws ClassCastException if the {@code list} prevents an element from being set into the\n+     *      list because the element has a wrong type.\n+     * @throws UnsupportedOperationException if the {@linkplain List#listIterator() list iterator} of\n+     *      the {@code list} does not support the set operation.\n+     * @param <E> the element type of the list\n+     * @param <L> the type of the list\n+     * @since TBA\n+     *\/\n+    public static <E, L extends List<? super E>>\n+    L requireNoNullsElseReplace(L list, IntFunction<? extends E> replaceFunction) {\n+        Objects.requireNonNull(list, \"list == null\");\n+        Objects.requireNonNull(replaceFunction, \"replaceFunction == null\");\n+        ListIterator<? super E> li = list.listIterator();\n+        while (li.hasNext()) {\n+            if (li.next() == null) {\n+                li.set(Objects.requireNonNull(replaceFunction.apply(li.nextIndex() - 1),\n+                        \"replaceFunction returns null\"));\n+            }\n+        }\n+        return list;\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/util\/Collections.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"modified"}]}