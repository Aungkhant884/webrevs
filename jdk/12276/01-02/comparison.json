{"files":[{"patch":"@@ -8813,0 +8813,29 @@\n+    \/**\n+     * Finds and replaces all null elements in an array with a non-null object.\n+     * <p>\n+     * The replace function accepts the index of the null element as the argument,\n+     * and returns a non-null object used to replace the null element.  This method\n+     * invokes the replace function for every null slot.\n+     *\n+     * @param array a non-null array reference\n+     * @param replaceFunction a function to be used to replace {@code null} elements\n+     * @return the reference to the {@code array}\n+     * @throws NullPointerException if {@code array == null} or {@code replaceFunction == null}\n+     *      or {@code replaceFunction.apply} returns {@code null}.\n+     * @throws ArrayStoreException if {@code replaceFunction.apply} returns an object that cannot\n+     *      be stored into the array\n+     * @param <E> the component type of the array\n+     * @since TBA\n+     *\/\n+    public static <E> E[] requireNoNullsElseReplace(E[] array, IntFunction<? extends E> replaceFunction) {\n+        Objects.requireNonNull(array, \"array == null\");\n+        Objects.requireNonNull(replaceFunction, \"replaceFunction == null\");\n+        int len = array.length;\n+        for (int i = 0; i < len; i++) {\n+            if (array[i] == null) {\n+                array[i] = Objects.requireNonNull(replaceFunction.apply(i), \"replaceFunction returns null\");\n+            }\n+        }\n+        return array;\n+    }\n+\n@@ -8888,0 +8917,38 @@\n+\n+    \/**\n+     * Returns a copy of an array replaced all null elements in the array with a non-null object.\n+     * The original array is not modified.\n+     * <p>\n+     * The replace function accepts the index of the null element as the argument,\n+     * and returns a non-null object used to replace the null element in the result array.\n+     * This method invokes the replace function for every null slot.\n+     * <p>\n+     * If the method returns without throwing an exception, it is guaranteed that\n+     * the returned array does not contain any null element.\n+     *\n+     * @param array a non-null array reference\n+     * @param replaceFunction a function to be used to replace {@code null} elements\n+     * @return a modified copy of the {@code array}\n+     * @throws NullPointerException if {@code array == null} or {@code replaceFunction == null}\n+     *      or {@code replaceFunction.apply} returns {@code null}.\n+     * @throws ArrayStoreException if {@code replaceFunction.apply} returns an object that cannot\n+     *      be stored into the array\n+     * @param <E> the component type of the array\n+     * @since TBA\n+     *\/\n+    public static <E> E[] requireNoNullsCopiedElseReplace(E[] array, IntFunction<? extends E> replaceFunction) {\n+        Objects.requireNonNull(array, \"array == null\");\n+        Objects.requireNonNull(replaceFunction, \"replaceFunction == null\");\n+        int len = array.length;\n+        @SuppressWarnings(\"unchecked\")\n+        E[] result = (E[])Array.newInstance(array.getClass().getComponentType(), len); \/\/ or use array.clone?\n+        for (int i = 0; i < len; i++) {\n+            E element;\n+            if ((element = array[i]) == null) {\n+                array[i] = Objects.requireNonNull(replaceFunction.apply(i), \"replaceFunction returns null\");\n+            } else {\n+                array[i] = element;\n+            }\n+        }\n+        return array;\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/util\/Arrays.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"modified"}]}