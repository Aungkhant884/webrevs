{"files":[{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2019, 2020, NTT DATA.\n+ * Copyright (c) 2019, 2021, NTT DATA.\n@@ -193,1 +193,1 @@\n-     uintptr_t base;\n+     uintptr_t base, memsz;\n@@ -199,1 +199,1 @@\n-     base = get_lib_base(ph, i);\n+     get_lib_addr_range(ph, i, &base, &memsz);\n@@ -204,1 +204,1 @@\n-     loadObject = env->CallObjectMethod(this_obj, createLoadObject_ID, str, (jlong)0, (jlong)base);\n+     loadObject = env->CallObjectMethod(this_obj, createLoadObject_ID, str, (jlong)memsz, (jlong)base);\n","filename":"src\/jdk.hotspot.agent\/linux\/native\/libsaproc\/LinuxDebuggerLocal.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -100,0 +100,3 @@\n+\/\/ get address range of lib\n+void get_lib_addr_range(struct ps_prochandle* ph, int index, uintptr_t* base, uintptr_t* memsz);\n+\n","filename":"src\/jdk.hotspot.agent\/linux\/native\/libsaproc\/libproc.h","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -162,1 +162,9 @@\n-static bool fill_instr_info(lib_info* lib) {\n+static inline uintptr_t align_down(uintptr_t ptr, size_t page_size) {\n+  return (ptr & ~(page_size - 1));\n+}\n+\n+static inline uintptr_t align_up(uintptr_t ptr, size_t page_size) {\n+  return ((ptr + page_size - 1) & ~(page_size - 1));\n+}\n+\n+static bool fill_addr_info(lib_info* lib) {\n@@ -168,1 +176,0 @@\n-  long align = sysconf(_SC_PAGE_SIZE);\n@@ -178,0 +185,1 @@\n+  lib->end = (uintptr_t)-1L;\n@@ -181,4 +189,5 @@\n-    if ((ph->p_type == PT_LOAD) && (ph->p_flags & PF_X)) {\n-      print_debug(\"[%d] vaddr = 0x%lx, memsz = 0x%lx, filesz = 0x%lx\\n\", cnt, ph->p_vaddr, ph->p_memsz, ph->p_filesz);\n-      if ((lib->exec_start == -1L) || (lib->exec_start > ph->p_vaddr)) {\n-        lib->exec_start = ph->p_vaddr;\n+    if (ph->p_type == PT_LOAD) {\n+      uintptr_t aligned_start = align_down(lib->base + ph->p_vaddr, ph->p_align);\n+      uintptr_t aligned_end = align_up(aligned_start + ph->p_filesz, ph->p_align);\n+      if ((lib->end == (uintptr_t)-1L) || (lib->end < aligned_end)) {\n+        lib->end = aligned_end;\n@@ -186,2 +195,11 @@\n-      if ((lib->exec_end == (uintptr_t)-1L) || (lib->exec_end < (ph->p_vaddr + ph->p_memsz))) {\n-        lib->exec_end = ph->p_vaddr + ph->p_memsz;\n+      print_debug(\"%s [%d] 0x%lx-0x%lx: base = 0x%lx, \"\n+                  \"vaddr = 0x%lx, memsz = 0x%lx, filesz = 0x%lx\\n\",\n+                  lib->name, cnt, aligned_start, aligned_end, lib->base,\n+                  ph->p_vaddr, ph->p_memsz, ph->p_filesz);\n+      if (ph->p_flags & PF_X) {\n+        if ((lib->exec_start == -1L) || (lib->exec_start > aligned_start)) {\n+          lib->exec_start = aligned_start;\n+        }\n+        if ((lib->exec_end == (uintptr_t)-1L) || (lib->exec_end < aligned_end)) {\n+          lib->exec_end = aligned_end;\n+        }\n@@ -189,1 +207,0 @@\n-      align = ph->p_align;\n@@ -196,8 +213,1 @@\n-  if ((lib->exec_start == -1L) || (lib->exec_end == -1L)) {\n-    return false;\n-  } else {\n-    lib->exec_start = (lib->exec_start + lib->base) & ~(align - 1);\n-    lib->exec_end = (lib->exec_end + lib->base + align) & ~(align - 1);\n-    return true;\n-  }\n-\n+  return (lib->end != -1L) && (lib->exec_start != -1L) && (lib->exec_end != -1L);\n@@ -278,1 +288,1 @@\n-   if (fill_instr_info(newlib)) {\n+   if (fill_addr_info(newlib)) {\n@@ -434,0 +444,15 @@\n+\/\/ get address range of lib\n+void get_lib_addr_range(struct ps_prochandle* ph, int index, uintptr_t* base, uintptr_t* memsz) {\n+   int count = 0;\n+   lib_info* lib = ph->libs;\n+   while (lib) {\n+      if (count == index) {\n+         *base = lib->base;\n+         *memsz = lib->end - lib->base;\n+         return;\n+      }\n+      count++;\n+      lib = lib->next;\n+   }\n+}\n+\n","filename":"src\/jdk.hotspot.agent\/linux\/native\/libsaproc\/libproc_impl.c","additions":44,"deletions":19,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+  uintptr_t        end;\n","filename":"src\/jdk.hotspot.agent\/linux\/native\/libsaproc\/libproc_impl.h","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -976,1 +976,1 @@\n-     uintptr_t base;\n+     uintptr_t base, memsz;\n@@ -981,1 +981,1 @@\n-     base = get_lib_base(ph, i);\n+     get_lib_addr_range(ph, i, &base, &memsz);\n@@ -986,1 +986,1 @@\n-                                            nameString, (jlong)0, (jlong)base);\n+                                            nameString, (jlong)memsz, (jlong)base);\n","filename":"src\/jdk.hotspot.agent\/macosx\/native\/libsaproc\/MacosxDebuggerLocal.m","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -135,0 +135,3 @@\n+\/\/ get address range of lib\n+void get_lib_addr_range(struct ps_prochandle* ph, int index, uintptr_t* base, uintptr_t* memsz);\n+\n","filename":"src\/jdk.hotspot.agent\/macosx\/native\/libsaproc\/libproc.h","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -489,0 +489,15 @@\n+\/\/ get address range of lib\n+void get_lib_addr_range(struct ps_prochandle* ph, int index, uintptr_t* base, uintptr_t* memsz) {\n+  int count = 0;\n+  lib_info* lib = ph->libs;\n+  while (lib) {\n+    if (count == index) {\n+      *base = lib->base;\n+      *memsz = lib->memsz;\n+      return;\n+    }\n+    count++;\n+    lib = lib->next;\n+  }\n+}\n+\n","filename":"src\/jdk.hotspot.agent\/macosx\/native\/libsaproc\/libproc_impl.c","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-import java.io.File;\n@@ -88,1 +87,1 @@\n-    private LoadObject createLoadObject(String fileName, long textsize,\n+    private LoadObject createLoadObject(String fileName, long size,\n@@ -90,1 +89,0 @@\n-       File f = new File(fileName);\n@@ -92,1 +90,1 @@\n-       return new SharedObject(this, fileName, f.length(), baseAddr);\n+       return new SharedObject(this, fileName, size, baseAddr);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/bsd\/BsdDebuggerLocal.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-import java.io.File;\n@@ -94,1 +93,1 @@\n-    private LoadObject createLoadObject(String fileName, long textsize,\n+    private LoadObject createLoadObject(String fileName, long size,\n@@ -96,1 +95,0 @@\n-       File f = new File(fileName);\n@@ -98,1 +96,1 @@\n-       return new SharedObject(this, fileName, f.length(), baseAddr);\n+       return new SharedObject(this, fileName, size, baseAddr);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/linux\/LinuxDebuggerLocal.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"}]}