{"files":[{"patch":"@@ -467,1 +467,1 @@\n-  bool added = SystemDictionaryShared::add_unregistered_class(k, CHECK_NULL);\n+  bool added = SystemDictionaryShared::add_unregistered_class(THREAD, k);\n","filename":"src\/hotspot\/share\/classfile\/classListParser.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -240,1 +240,1 @@\n-ClassFileStream* ClassPathDirEntry::open_stream(const char* name, TRAPS) {\n+ClassFileStream* ClassPathDirEntry::open_stream(Thread* current, const char* name) {\n@@ -244,1 +244,1 @@\n-  char* path = NEW_RESOURCE_ARRAY_IN_THREAD(THREAD, char, path_len);\n+  char* path = NEW_RESOURCE_ARRAY_IN_THREAD(current, char, path_len);\n@@ -288,1 +288,1 @@\n-u1* ClassPathZipEntry::open_entry(const char* name, jint* filesize, bool nul_terminate, TRAPS) {\n+u1* ClassPathZipEntry::open_entry(Thread* current, const char* name, jint* filesize, bool nul_terminate) {\n@@ -290,1 +290,1 @@\n-  JavaThread* thread = THREAD->as_Java_thread();\n+  JavaThread* thread = current->as_Java_thread();\n@@ -317,1 +317,1 @@\n-ClassFileStream* ClassPathZipEntry::open_stream(const char* name, TRAPS) {\n+ClassFileStream* ClassPathZipEntry::open_stream(Thread* current, const char* name) {\n@@ -319,1 +319,1 @@\n-  u1* buffer = open_entry(name, &filesize, false, CHECK_NULL);\n+  u1* buffer = open_entry(current, name, &filesize, false);\n@@ -377,2 +377,2 @@\n-ClassFileStream* ClassPathImageEntry::open_stream(const char* name, TRAPS) {\n-  return open_stream_for_loader(name, ClassLoaderData::the_null_class_loader_data(), THREAD);\n+ClassFileStream* ClassPathImageEntry::open_stream(Thread* current, const char* name) {\n+  return open_stream_for_loader(current, name, ClassLoaderData::the_null_class_loader_data());\n@@ -388,1 +388,1 @@\n-ClassFileStream* ClassPathImageEntry::open_stream_for_loader(const char* name, ClassLoaderData* loader_data, TRAPS) {\n+ClassFileStream* ClassPathImageEntry::open_stream_for_loader(Thread* current, const char* name, ClassLoaderData* loader_data) {\n@@ -402,1 +402,1 @@\n-          ResourceMark rm(THREAD);\n+          ResourceMark rm(current);\n@@ -1159,1 +1159,1 @@\n-    stream = e->open_stream(file_name, CHECK_NULL);\n+    stream = e->open_stream(THREAD, file_name);\n@@ -1230,1 +1230,1 @@\n-      stream = _jrt_entry->open_stream(file_name, CHECK_NULL);\n+      stream = _jrt_entry->open_stream(THREAD, file_name);\n@@ -1248,1 +1248,1 @@\n-      stream = e->open_stream(file_name, CHECK_NULL);\n+      stream = e->open_stream(THREAD, file_name);\n@@ -1298,1 +1298,1 @@\n-void ClassLoader::record_result(InstanceKlass* ik, const ClassFileStream* stream, TRAPS) {\n+void ClassLoader::record_result(Thread* current, InstanceKlass* ik, const ClassFileStream* stream) {\n@@ -1320,1 +1320,1 @@\n-  ResourceMark rm(THREAD);\n+  ResourceMark rm(current);\n@@ -1404,1 +1404,1 @@\n-  ClassLoaderExt::record_result(classpath_index, ik, CHECK);\n+  ClassLoaderExt::record_result(classpath_index, ik);\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-  virtual ClassFileStream* open_stream(const char* name, TRAPS) = 0;\n+  virtual ClassFileStream* open_stream(Thread* current, const char* name) = 0;\n@@ -70,2 +70,2 @@\n-  virtual ClassFileStream* open_stream_for_loader(const char* name, ClassLoaderData* loader_data, TRAPS) {\n-    return open_stream(name, THREAD);\n+  virtual ClassFileStream* open_stream_for_loader(Thread* current, const char* name, ClassLoaderData* loader_data) {\n+    return open_stream(current, name);\n@@ -84,1 +84,1 @@\n-  ClassFileStream* open_stream(const char* name, TRAPS);\n+  ClassFileStream* open_stream(Thread* current, const char* name);\n@@ -111,2 +111,2 @@\n-  u1* open_entry(const char* name, jint* filesize, bool nul_terminate, TRAPS);\n-  ClassFileStream* open_stream(const char* name, TRAPS);\n+  u1* open_entry(Thread* current, const char* name, jint* filesize, bool nul_terminate);\n+  ClassFileStream* open_stream(Thread* current, const char* name);\n@@ -131,2 +131,2 @@\n-  ClassFileStream* open_stream(const char* name, TRAPS);\n-  ClassFileStream* open_stream_for_loader(const char* name, ClassLoaderData* loader_data, TRAPS);\n+  ClassFileStream* open_stream(Thread* current, const char* name);\n+  ClassFileStream* open_stream_for_loader(Thread* current, const char* name, ClassLoaderData* loader_data);\n@@ -368,1 +368,1 @@\n-  static void  record_result(InstanceKlass* ik, const ClassFileStream* stream, TRAPS);\n+  static void  record_result(Thread* current, InstanceKlass* ik, const ClassFileStream* stream);\n","filename":"src\/hotspot\/share\/classfile\/classLoader.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-char* ClassLoaderExt::read_manifest(ClassPathEntry* entry, jint *manifest_size, bool clean_text, TRAPS) {\n+char* ClassLoaderExt::read_manifest(Thread* current, ClassPathEntry* entry, jint *manifest_size, bool clean_text) {\n@@ -112,1 +112,1 @@\n-  manifest = (char*) ((ClassPathZipEntry*)entry )->open_entry(name, &size, true, CHECK_NULL);\n+  manifest = (char*) ((ClassPathZipEntry*)entry )->open_entry(current, name, &size, true);\n@@ -170,1 +170,1 @@\n-  char* manifest = read_manifest(entry, &manifest_size, CHECK);\n+  char* manifest = read_manifest(THREAD, entry, &manifest_size);\n@@ -233,3 +233,1 @@\n-void ClassLoaderExt::record_result(const s2 classpath_index,\n-                                   InstanceKlass* result,\n-                                   TRAPS) {\n+void ClassLoaderExt::record_result(const s2 classpath_index, InstanceKlass* result) {\n@@ -278,1 +276,1 @@\n-    stream = e->open_stream(file_name, CHECK_NULL);\n+    stream = e->open_stream(THREAD, file_name);\n","filename":"src\/hotspot\/share\/classfile\/classLoaderExt.cpp","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-  static char* read_manifest(ClassPathEntry* entry, jint *manifest_size, bool clean_text, TRAPS);\n+  static char* read_manifest(Thread* current, ClassPathEntry* entry, jint *manifest_size, bool clean_text);\n@@ -72,1 +72,1 @@\n-  static char* read_manifest(ClassPathEntry* entry, jint *manifest_size, TRAPS) {\n+  static char* read_manifest(Thread* current, ClassPathEntry* entry, jint *manifest_size) {\n@@ -76,1 +76,1 @@\n-    return read_manifest(entry, manifest_size, true, THREAD);\n+    return read_manifest(current, entry, manifest_size, true);\n@@ -78,1 +78,1 @@\n-  static char* read_raw_manifest(ClassPathEntry* entry, jint *manifest_size, TRAPS) {\n+  static char* read_raw_manifest(Thread* current, ClassPathEntry* entry, jint *manifest_size) {\n@@ -81,1 +81,1 @@\n-    return read_manifest(entry, manifest_size, false, THREAD);\n+    return read_manifest(current, entry, manifest_size, false);\n@@ -110,2 +110,1 @@\n-  static void record_result(const s2 classpath_index,\n-                            InstanceKlass* result, TRAPS);\n+  static void record_result(const s2 classpath_index, InstanceKlass* result);\n","filename":"src\/hotspot\/share\/classfile\/classLoaderExt.hpp","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -176,2 +176,3 @@\n-  ResourceMark rm(THREAD);\n-  HandleMark hm(THREAD);\n+  JavaThread* current = THREAD->as_Java_thread();\n+  ResourceMark rm(current);\n+  HandleMark hm(current);\n@@ -184,1 +185,1 @@\n-  THREAD->statistical_info().incr_define_class_count();\n+  current->statistical_info().incr_define_class_count();\n@@ -219,1 +220,1 @@\n-    ClassLoader::record_result(result, stream, THREAD);\n+    ClassLoader::record_result(current, result, stream);\n","filename":"src\/hotspot\/share\/classfile\/klassFactory.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -739,1 +739,1 @@\n-    manifest = create_jar_manifest(src, size, THREAD);\n+    manifest = create_jar_manifest(src, size, CHECK_NH);\n@@ -899,1 +899,1 @@\n-      pd = get_shared_protection_domain(class_loader, mod_entry, THREAD);\n+      pd = get_shared_protection_domain(class_loader, mod_entry, CHECK_(pd));\n@@ -1183,1 +1183,1 @@\n-bool SystemDictionaryShared::add_unregistered_class(InstanceKlass* k, TRAPS) {\n+bool SystemDictionaryShared::add_unregistered_class(Thread* current, InstanceKlass* k) {\n@@ -1193,1 +1193,1 @@\n-    MutexLocker mu_r(THREAD, Compile_lock); \/\/ add_to_hierarchy asserts this.\n+    MutexLocker mu_r(current, Compile_lock); \/\/ add_to_hierarchy asserts this.\n@@ -1605,1 +1605,2 @@\n-  InstanceKlass* nest_host = caller_ik->nest_host(THREAD);\n+  InstanceKlass* nest_host = caller_ik->nest_host(CHECK);\n+  assert(nest_host != NULL, \"unexpected NULL nest_host\");\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -249,1 +249,1 @@\n-  static bool add_unregistered_class(InstanceKlass* k, TRAPS);\n+  static bool add_unregistered_class(Thread* current, InstanceKlass* k);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1773,1 +1773,1 @@\n-  ArchiveUtils::log_to_classlist(&bootstrap_specifier, THREAD);\n+  ArchiveUtils::log_to_classlist(&bootstrap_specifier, CHECK);\n","filename":"src\/hotspot\/share\/interpreter\/linkResolver.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -342,1 +342,1 @@\n-      ClassListParser::populate_cds_indy_info(pool, pool_index, &cii, THREAD);\n+      ClassListParser::populate_cds_indy_info(pool, pool_index, &cii, CHECK);\n","filename":"src\/hotspot\/share\/memory\/archiveUtils.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -660,1 +660,1 @@\n-  char* manifest = ClassLoaderExt::read_manifest(cpe, &manifest_size, CHECK);\n+  char* manifest = ClassLoaderExt::read_manifest(THREAD, cpe, &manifest_size);\n@@ -668,1 +668,1 @@\n-      manifest = ClassLoaderExt::read_raw_manifest(cpe, &manifest_size, CHECK);\n+      manifest = ClassLoaderExt::read_raw_manifest(THREAD, cpe, &manifest_size);\n@@ -2373,3 +2373,2 @@\n-  ClassFileStream* cfs = cpe->open_stream_for_loader(file_name, loader_data, THREAD);\n-  assert(!HAS_PENDING_EXCEPTION &&\n-         cfs != NULL, \"must be able to read the classfile data of shared classes for built-in loaders.\");\n+  ClassFileStream* cfs = cpe->open_stream_for_loader(THREAD, file_name, loader_data);\n+  assert(cfs != NULL, \"must be able to read the classfile data of shared classes for built-in loaders.\");\n","filename":"src\/hotspot\/share\/memory\/filemap.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -703,1 +703,2 @@\n- const ArchivedKlassSubGraphInfoRecord* record =\n+  ExceptionMark em(THREAD);\n+  const ArchivedKlassSubGraphInfoRecord* record =\n@@ -705,1 +706,1 @@\n- if (HAS_PENDING_EXCEPTION) {\n+  if (HAS_PENDING_EXCEPTION) {\n@@ -707,2 +708,2 @@\n- }\n- if (record == NULL) {\n+  }\n+  if (record == NULL) {\n@@ -710,1 +711,1 @@\n- }\n+  }\n@@ -718,0 +719,1 @@\n+  ExceptionMark em(THREAD);\n@@ -749,1 +751,1 @@\n-        ResourceMark rm;\n+        ResourceMark rm(THREAD);\n@@ -758,1 +760,1 @@\n-        ResourceMark rm;\n+        ResourceMark rm(THREAD);\n","filename":"src\/hotspot\/share\/memory\/heapShared.cpp","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -221,1 +221,1 @@\n-      SystemDictionaryShared::allocate_shared_data_arrays(size, THREAD);\n+      SystemDictionaryShared::allocate_shared_data_arrays(size, CHECK);\n@@ -561,1 +561,1 @@\n-    ik->constants()->resolve_class_constants(CHECK_0); \/\/ may throw OOM when interning strings.\n+    ik->constants()->resolve_class_constants(CHECK_(false)); \/\/ may throw OOM when interning strings.\n@@ -712,3 +712,7 @@\n-  if (use_full_module_graph()) {\n-    HeapShared::reset_archived_object_states(CHECK);\n-  }\n+    if (use_full_module_graph()) {\n+      HeapShared::reset_archived_object_states(THREAD);\n+      if (HAS_PENDING_EXCEPTION) {\n+        java_lang_Throwable::print(PENDING_EXCEPTION, tty);\n+        vm_exit_during_initialization(\"HeapShared::reset_archived_object_states() failed unexpectedly\");\n+      }\n+    }\n","filename":"src\/hotspot\/share\/memory\/metaspaceShared.cpp","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"}]}