{"files":[{"patch":"@@ -65,1 +65,0 @@\n-import sun.java2d.pipe.Region;\n@@ -250,0 +249,13 @@\n+        \/**\n+         * Rounds a double to the nearest integer. It rounds 0.5 down,\n+         * for example 1.5 is rounded to 1.0.\n+         *\n+         * @param d number to be rounded\n+         * @return the rounded value\n+         *\/\n+        private static int roundHalfDown(double d) {\n+            double decP = (Math.ceil(d) - d);\n+            return (int)((decP == 0.5) ?  Math.floor(d) :  Math.round(d));\n+        }\n+\n+\n@@ -270,1 +282,0 @@\n-            boolean resetTransform;\n@@ -275,7 +286,1 @@\n-            resetTransform = (at.getShearX() == 0) && (at.getShearY() == 0);\n-\n-            if (resetTransform) {\n-                g2d.setTransform(new AffineTransform());\n-                stkWidth = Region.clipRound(Math.min(at.getScaleX(), at.getScaleY()));\n-                g2d.setStroke(new BasicStroke((float) stkWidth));\n-            }\n+            boolean resetTransform = ((at.getShearX() == 0) && (at.getShearY() == 0));\n@@ -289,4 +294,6 @@\n-                width = Region.clipRound(at.getScaleX() * w);\n-                height = Region.clipRound(at.getScaleY() * h);\n-                xtranslation = Region.clipRound(at.getScaleX() * x + at.getTranslateX());\n-                ytranslation = Region.clipRound(at.getScaleY() * y + at.getTranslateY());\n+                g2d.setTransform(new AffineTransform());\n+                stkWidth = roundHalfDown(Math.min(at.getScaleX(), at.getScaleY()));\n+                width = roundHalfDown(at.getScaleX() * w);\n+                height = roundHalfDown(at.getScaleY() * h);\n+                xtranslation = roundHalfDown(at.getScaleX() * x + at.getTranslateX());\n+                ytranslation = roundHalfDown(at.getScaleY() * y + at.getTranslateY());\n@@ -301,0 +308,3 @@\n+            \/\/ scaled border\n+            int thickness = (int) Math.ceil(4 * at.getScaleX());\n+\n@@ -302,2 +312,0 @@\n-            \/\/ loop constraint for bulk of the border\n-            int loopCount = (int) Math.ceil(5 * at.getScaleX());\n@@ -305,2 +313,2 @@\n-            for (int i = 0; i <= loopCount; i++) {\n-                g.drawRect(x + i,y + i,width - (i * 2), height - (i * 2));\n+            for (int i = 0; i <= thickness; i++) {\n+                g.drawRect(i, i, width - (i * 2), height - (i * 2));\n@@ -310,2 +318,3 @@\n-                \/\/ border and corner scaling\n-                int corner = (int) Math.round(CORNER * at.getScaleX());\n+                \/\/ set new stroke to draw shadow and highlight lines\n+                g2d.setStroke(new BasicStroke((float) stkWidth));\n+\n@@ -314,1 +323,6 @@\n-                int midPoint = loopCount \/ 2;\n+                int midPoint = thickness \/ 2;\n+                int offset = ((at.getScaleX() - stkWidth) >= 0 && stkWidth % 2 != 0) ? 1 : 0;\n+                int loc1 = thickness % 2 == 0 ? midPoint + stkWidth \/ 2 - stkWidth : midPoint;\n+                int loc2 = thickness % 2 == 0 ? midPoint + stkWidth \/ 2 : midPoint + stkWidth;\n+                \/\/ scaled corner\n+                int corner = (int) Math.round(CORNER * at.getScaleX());\n@@ -318,8 +332,6 @@\n-                g.drawLine(corner + 1, midPoint + stkWidth,\n-                        width - corner, midPoint + stkWidth); \/\/top\n-                g.drawLine(midPoint + stkWidth, corner + 1,\n-                        midPoint + stkWidth, height - corner); \/\/left\n-                g.drawLine(width - midPoint, corner + 1,\n-                        width - midPoint, height - corner); \/\/right\n-                g.drawLine(corner + 1, height - midPoint,\n-                        width - corner, height - midPoint); \/\/bottom\n+                g.drawLine(corner + 1, loc2, width - corner, loc2); \/\/top\n+                g.drawLine(loc2, corner + 1, loc2, height - corner); \/\/left\n+                g.drawLine((width - offset) - loc1, corner + 1,\n+                        (width - offset) - loc1, height - corner); \/\/right\n+                g.drawLine(corner + 1, (height - offset) - loc1,\n+                        width - corner, (height - offset) - loc1); \/\/bottom\n@@ -329,6 +341,6 @@\n-                g.drawLine(corner, midPoint, width - corner - 1, midPoint);\n-                g.drawLine(midPoint, corner, midPoint, height - corner - 1);\n-                g.drawLine(width - (midPoint + stkWidth), corner,\n-                        width - (midPoint + stkWidth), height - corner - 1);\n-                g.drawLine(corner, height - (midPoint + stkWidth),\n-                        width - corner - 1, height - (midPoint + stkWidth));\n+                g.drawLine(corner, loc1, width - corner - 1, loc1);\n+                g.drawLine(loc1, corner, loc1, height - corner - 1);\n+                g.drawLine((width - offset) - loc2, corner,\n+                        (width - offset) - loc2, height - corner - 1);\n+                g.drawLine(corner, (height - offset) - loc2,\n+                        width - corner - 1, (height - offset) - loc2);\n@@ -337,1 +349,1 @@\n-            \/\/ Undo the resetTransform setting from before\n+            \/\/ restore previous transform\n@@ -347,1 +359,1 @@\n-            newInsets.set(5, 5, 5, 5);\n+            newInsets.set(4, 4, 4, 4);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/metal\/MetalBorders.java","additions":48,"deletions":36,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-    private static final int BORDER_THICKNESS = 5;\n+    private static final int BORDER_THICKNESS = 4;\n@@ -252,1 +252,0 @@\n-\n","filename":"test\/jdk\/javax\/swing\/JInternalFrame\/InternalFrameBorderTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}