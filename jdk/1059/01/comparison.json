{"files":[{"patch":"@@ -306,0 +306,42 @@\n+    \/**\n+     * Creates a {@code Builder} seeded from a {@code HttpRequest}.\n+     *\n+     * <p> This method can be used to build a new request equivalent to the\n+     * given request, but with some parts of its state altered.\n+     *\n+     * @param request the request\n+     * @return a new request builder\n+     * @throws IllegalArgumentException if a new builder cannot be seeded from\n+     *         the given request (for instance, if the request contains illegal\n+     *         parameters)\n+     * @since TBD\n+     *\/\n+    public static Builder newBuilder(HttpRequest request) {\n+        Objects.requireNonNull(request);\n+        try {\n+            final HttpRequest.Builder builder = HttpRequest.newBuilder();\n+            builder.uri(request.uri());\n+            builder.expectContinue(request.expectContinue());\n+            request.headers().map().forEach((name, values) -> values.forEach(value -> builder.header(name, value)));\n+\n+            request.version().ifPresent(builder::version);\n+            request.timeout().ifPresent(builder::timeout);\n+            var method = request.method();\n+            request.bodyPublisher().ifPresentOrElse(\n+                    bodyPublisher -> builder.method(method, bodyPublisher),\n+                    () -> {\n+                        switch (method) {\n+                            case \"GET\" -> builder.GET();\n+                            case \"DELETE\" -> builder.DELETE();\n+                            default -> builder.method(method, HttpRequest.BodyPublishers.noBody());\n+                        }\n+                    }\n+            );\n+            return builder;\n+        } catch (SecurityException | IllegalArgumentException ex) {\n+            throw ex;\n+        } catch (RuntimeException r) {\n+            throw new IllegalArgumentException(\"Illegal request parameters\", r);\n+        }\n+    }\n+\n","filename":"src\/java.net.http\/share\/classes\/java\/net\/http\/HttpRequest.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -0,0 +1,272 @@\n+\/*\n+* Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+*\n+* This code is free software; you can redistribute it and\/or modify it\n+* under the terms of the GNU General Public License version 2 only, as\n+* published by the Free Software Foundation.\n+*\n+* This code is distributed in the hope that it will be useful, but WITHOUT\n+* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+* version 2 for more details (a copy is included in the LICENSE file that\n+* accompanied this code).\n+*\n+* You should have received a copy of the GNU General Public License version\n+* 2 along with this work; if not, write to the Free Software Foundation,\n+* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+*\n+* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+* or visit www.oracle.com if you need additional information or have any\n+* questions.\n+*\/\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.http.HttpClient.Version;\n+import java.net.http.HttpHeaders;\n+import java.net.http.HttpRequest;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.BiConsumer;\n+import static java.net.http.HttpClient.Version.HTTP_2;\n+import static java.net.http.HttpClient.Version.HTTP_1_1;\n+\n+import org.testng.annotations.Test;\n+import org.testng.annotations.DataProvider;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertThrows;\n+import static org.testng.Assert.assertTrue;\n+\n+\/**\n+* @test\n+* @bug 8252304\n+* @summary HttpRequest.NewBuilder(HttpRequest) API and behaviour checks\n+* @compile --enable-preview -source ${jdk.version} HttpRequestNewBuilderTest.java\n+* @run testng\/othervm --enable-preview HttpRequestNewBuilderTest\n+*\/\n+public class HttpRequestNewBuilderTest {\n+   static final Class<NullPointerException> NPE = NullPointerException.class;\n+   static final Class<IllegalArgumentException> IAE = IllegalArgumentException.class;\n+\n+   record NamedAssertion (String name, BiConsumer<HttpRequest,HttpRequest> test) { }\n+   List<NamedAssertion> REQUEST_ASSERTIONS = List.of(\n+           new NamedAssertion(\"uri\",            (r1,r2) -> assertEquals(r1.uri(), r2.uri())),\n+           new NamedAssertion(\"method\",         (r1,r2) -> assertEquals(r1.method(), r2.method())),\n+           new NamedAssertion(\"timeout\",        (r1,r2) -> assertEquals(r1.timeout(), r2.timeout())),\n+           new NamedAssertion(\"version\",        (r1,r2) -> assertEquals(r1.version(), r2.version())),\n+           new NamedAssertion(\"headers\",        (r1,r2) -> assertEquals(r1.headers(), r2.headers())),\n+           new NamedAssertion(\"expectContinue\", (r1,r2) -> assertEquals(r1.expectContinue(), r2.expectContinue()))\n+   );\n+\n+   @DataProvider(name = \"testRequests\")\n+   public Object[][] variants() {\n+       return new Object[][]{\n+               { HttpRequest.newBuilder(URI.create(\"https:\/\/a\/\")).build() },\n+               { HttpRequest.newBuilder(URI.create(\"https:\/\/b\/\")).version(HTTP_1_1).build() },\n+               { HttpRequest.newBuilder(URI.create(\"https:\/\/c\/\")).version(HTTP_2).build() },\n+\n+               { HttpRequest.newBuilder(URI.create(\"https:\/\/d\/\")).timeout(Duration.ofSeconds(30)).build() },\n+               { HttpRequest.newBuilder(URI.create(\"https:\/\/e\/\")).header(\"testName\", \"testValue\").build() },\n+               \/\/ dedicated method\n+               { HttpRequest.newBuilder(URI.create(\"https:\/\/f\/\")).GET().build() },\n+               { HttpRequest.newBuilder(URI.create(\"https:\/\/g\/\")).DELETE().build() },\n+               { HttpRequest.newBuilder(URI.create(\"https:\/\/h\/\")).POST(HttpRequest.BodyPublishers.ofString(\"testData\")).build() },\n+               { HttpRequest.newBuilder(URI.create(\"https:\/\/i\/\")).PUT(HttpRequest.BodyPublishers.ofString(\"testData\")).build() },\n+               \/\/ method w\/body\n+               { HttpRequest.newBuilder(URI.create(\"https:\/\/j\/\")).method(\"GET\", HttpRequest.BodyPublishers.ofString(\"testData\")).build() },\n+               { HttpRequest.newBuilder(URI.create(\"https:\/\/k\/\")).method(\"DELETE\", HttpRequest.BodyPublishers.ofString(\"testData\")).build() },\n+               { HttpRequest.newBuilder(URI.create(\"https:\/\/l\/\")).method(\"POST\", HttpRequest.BodyPublishers.ofString(\"testData\")).build() },\n+               { HttpRequest.newBuilder(URI.create(\"https:\/\/m\/\")).method(\"PUT\", HttpRequest.BodyPublishers.ofString(\"testData\")).build() },\n+               \/\/ method w\/o body\n+               { HttpRequest.newBuilder(URI.create(\"https:\/\/n\/\")).method(\"GET\", HttpRequest.BodyPublishers.noBody()).build() },\n+               { HttpRequest.newBuilder(URI.create(\"https:\/\/o\/\")).method(\"DELETE\", HttpRequest.BodyPublishers.noBody()).build() },\n+               { HttpRequest.newBuilder(URI.create(\"https:\/\/p\/\")).method(\"POST\", HttpRequest.BodyPublishers.noBody()).build() },\n+               { HttpRequest.newBuilder(URI.create(\"https:\/\/q\/\")).method(\"PUT\", HttpRequest.BodyPublishers.noBody()).build() },\n+               \/\/ user defined methods w\/ & w\/o body\n+               { HttpRequest.newBuilder(URI.create(\"https:\/\/r\/\")).method(\"TEST\", HttpRequest.BodyPublishers.noBody()).build() },\n+               { HttpRequest.newBuilder(URI.create(\"https:\/\/s\/\")).method(\"TEST\", HttpRequest.BodyPublishers.ofString(\"testData\")).build() },\n+\n+               { HttpRequest.newBuilder(URI.create(\"https:\/\/z\/\")).GET().expectContinue(true).version(HTTP_2)\n+                       .timeout(Duration.ofSeconds(1)).header(\"testName\", \"testValue\").build() },\n+       };\n+   }\n+\n+   void assertAllOtherElementsEqual(HttpRequest r1, HttpRequest r2, String... except) {\n+       var ignoreList = Arrays.asList(except);\n+       REQUEST_ASSERTIONS.stream()\n+               .filter(a -> !ignoreList.contains(a.name()))\n+               .forEach(testCaseAssertion -> testCaseAssertion.test().accept(r1, r2));\n+   }\n+\n+   void testBodyPublisher(String methodName, HttpRequest request) {\n+       \/\/ method w\/body\n+       var r = HttpRequest.newBuilder(request)\n+               .method(methodName, HttpRequest.BodyPublishers.ofString(\"testData\"))\n+               .build();\n+       assertEquals(r.method(), methodName);\n+       assertTrue(r.bodyPublisher().isPresent());\n+       assertEquals(r.bodyPublisher().get().contentLength(), 8);\n+       assertAllOtherElementsEqual(r, request, \"method\");\n+\n+       \/\/ method w\/o body\n+       var noBodyPublisher = HttpRequest.BodyPublishers.noBody();\n+       var r1 = HttpRequest.newBuilder(request)\n+               .method(methodName, noBodyPublisher)\n+               .build();\n+       assertEquals(r1.method(), methodName);\n+       assertTrue(r1.bodyPublisher().isPresent());\n+       assertEquals(r1.bodyPublisher().get(), noBodyPublisher);\n+       assertAllOtherElementsEqual(r1, request, \"method\");\n+   }\n+\n+   @Test\n+   public void testNull() {\n+       HttpRequest request = null;\n+       assertThrows(NPE, () -> HttpRequest.newBuilder(request).build());\n+   }\n+\n+   @Test(dataProvider = \"testRequests\")\n+   void testBuilder(HttpRequest request) {\n+       var r = HttpRequest.newBuilder(request).build();\n+       assertEquals(r, request);\n+       assertAllOtherElementsEqual(r, request);\n+   }\n+\n+   @Test(dataProvider = \"testRequests\")\n+   public void testURI(HttpRequest request) {\n+       URI newURI = URI.create(\"http:\/\/www.newURI.com\/\");\n+       var r = HttpRequest.newBuilder(request).uri(newURI).build();\n+\n+       assertEquals(r.uri(), newURI);\n+       assertAllOtherElementsEqual(r, request, \"uri\");\n+   }\n+\n+   @Test(dataProvider = \"testRequests\")\n+   public void testHeaders(HttpRequest request) {\n+       var r = HttpRequest.newBuilder(request).headers(\"newName\", \"newValue\").build();\n+\n+       assertEquals(r.headers().firstValue(\"newName\").get(), \"newValue\");\n+       assertEquals(r.headers().allValues(\"newName\").size(), 1);\n+       assertAllOtherElementsEqual(r, request, \"headers\");\n+   }\n+\n+   @Test(dataProvider = \"testRequests\")\n+   public void testTimeout(HttpRequest request) {\n+       var r = HttpRequest.newBuilder(request).timeout(Duration.ofSeconds(2)).build();\n+\n+       assertEquals(r.timeout().get().getSeconds(), 2);\n+       assertAllOtherElementsEqual(r, request, \"timeout\");\n+   }\n+\n+   @Test(dataProvider = \"testRequests\")\n+   public void testVersion(HttpRequest request) {\n+       var r = HttpRequest.newBuilder(request).version(HTTP_1_1).build();\n+\n+       assertEquals(r.version().get(), HTTP_1_1);\n+       assertAllOtherElementsEqual(r, request, \"version\");\n+   }\n+\n+   @Test(dataProvider = \"testRequests\")\n+   public void testGET(HttpRequest request) {\n+       var r = HttpRequest.newBuilder(request)\n+               .GET()\n+               .build();\n+       assertEquals(r.method(), \"GET\");\n+       assertTrue(r.bodyPublisher().isEmpty());\n+       assertAllOtherElementsEqual(r, request, \"method\");\n+\n+       testBodyPublisher(\"GET\", request);\n+   }\n+\n+   @Test(dataProvider = \"testRequests\")\n+   public void testDELETE(HttpRequest request) {\n+       var r = HttpRequest.newBuilder(request)\n+               .DELETE()\n+               .build();\n+       assertEquals(r.method(), \"DELETE\");\n+       assertTrue(r.bodyPublisher().isEmpty());\n+       assertAllOtherElementsEqual(r, request, \"method\");\n+\n+       testBodyPublisher(\"DELETE\", request);\n+   }\n+\n+   @Test(dataProvider = \"testRequests\")\n+   public void testPOST(HttpRequest request) {\n+       var r = HttpRequest.newBuilder(request)\n+               .POST(HttpRequest.BodyPublishers.ofString(\"testData\"))\n+               .build();\n+       assertEquals(r.method(), \"POST\");\n+       assertTrue(r.bodyPublisher().isPresent());\n+       assertEquals(r.bodyPublisher().get().contentLength(), 8);\n+       assertAllOtherElementsEqual(r, request, \"method\");\n+\n+       testBodyPublisher(\"POST\", request);\n+   }\n+\n+   @Test(dataProvider = \"testRequests\")\n+   public void testPUT(HttpRequest request) {\n+       var r = HttpRequest.newBuilder(request)\n+               .PUT(HttpRequest.BodyPublishers.ofString(\"testData\"))\n+               .build();\n+       assertEquals(r.method(), \"PUT\");\n+       assertTrue(r.bodyPublisher().isPresent());\n+       assertEquals(r.bodyPublisher().get().contentLength(), 8);\n+       assertAllOtherElementsEqual(r, request, \"method\");\n+\n+       testBodyPublisher(\"PUT\", request);\n+   }\n+\n+   @Test(dataProvider = \"testRequests\")\n+   public void testUserDefinedMethod(HttpRequest request) {\n+       testBodyPublisher(\"TEST\", request);\n+   }\n+\n+   @Test\n+   public void testInvalidMethod() throws URISyntaxException {\n+       URI testURI = new URI(\"http:\/\/www.foo.com\/\");\n+       var r = new HttpRequest() {\n+           @Override\n+           public Optional<BodyPublisher> bodyPublisher() { return Optional.empty(); }\n+           @Override\n+           public String method() { return \"CONNECT\"; }\n+           @Override\n+           public Optional<Duration> timeout() { return Optional.empty(); }\n+           @Override\n+           public boolean expectContinue() { return false; }\n+           @Override\n+           public URI uri() { return testURI; }\n+           @Override\n+           public Optional<Version> version() { return Optional.empty(); }\n+           @Override\n+           public HttpHeaders headers() { return HttpHeaders.of(Map.of(), (x,y) -> true); }\n+       };\n+       assertThrows(IAE, () -> HttpRequest.newBuilder(r).build());\n+   }\n+\n+   @Test\n+   public void testInvalidURI() throws URISyntaxException {\n+       \/\/ invalid URI scheme\n+       URI badURI = new URI(\"ftp:\/\/foo.com\/somefile\");\n+       var r = new HttpRequest() {\n+           @Override\n+           public Optional<BodyPublisher> bodyPublisher() { return Optional.empty(); }\n+           @Override\n+           public String method() { return \"GET\"; }\n+           @Override\n+           public Optional<Duration> timeout() { return Optional.empty(); }\n+           @Override\n+           public boolean expectContinue() { return false; }\n+           @Override\n+           public URI uri() { return badURI; }\n+           @Override\n+           public Optional<Version> version() { return Optional.empty(); }\n+           @Override\n+           public HttpHeaders headers() { return HttpHeaders.of(Map.of(), (x,y) -> true); }\n+       };\n+       assertThrows(IAE, () -> HttpRequest.newBuilder(r).build());\n+   }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/net\/httpclient\/HttpRequestNewBuilderTest.java","additions":272,"deletions":0,"binary":false,"changes":272,"status":"added"}]}