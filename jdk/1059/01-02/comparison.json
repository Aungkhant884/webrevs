{"files":[{"patch":"@@ -307,1 +307,1 @@\n-     * Creates a {@code Builder} seeded from a {@code HttpRequest}.\n+     * Creates a {@code Builder} seeded from an {@code HttpRequest}.\n@@ -317,1 +317,1 @@\n-     * @since TBD\n+     * @since 16\n@@ -321,5 +321,0 @@\n-        try {\n-            final HttpRequest.Builder builder = HttpRequest.newBuilder();\n-            builder.uri(request.uri());\n-            builder.expectContinue(request.expectContinue());\n-            request.headers().map().forEach((name, values) -> values.forEach(value -> builder.header(name, value)));\n@@ -327,11 +322,18 @@\n-            request.version().ifPresent(builder::version);\n-            request.timeout().ifPresent(builder::timeout);\n-            var method = request.method();\n-            request.bodyPublisher().ifPresentOrElse(\n-                    bodyPublisher -> builder.method(method, bodyPublisher),\n-                    () -> {\n-                        switch (method) {\n-                            case \"GET\" -> builder.GET();\n-                            case \"DELETE\" -> builder.DELETE();\n-                            default -> builder.method(method, HttpRequest.BodyPublishers.noBody());\n-                        }\n+        final HttpRequest.Builder builder = HttpRequest.newBuilder();\n+        builder.uri(request.uri());\n+        builder.expectContinue(request.expectContinue());\n+        request.headers().map().forEach((name, values) -> values.forEach(value -> builder.header(name, value)));\n+\n+        request.version().ifPresent(builder::version);\n+        request.timeout().ifPresent(builder::timeout);\n+        var method = request.method();\n+        request.bodyPublisher().ifPresentOrElse(\n+                \/\/ if body is present, set it\n+                bodyPublisher -> builder.method(method, bodyPublisher),\n+                \/\/ otherwise, the body is absent, special case for GET\/DELETE,\n+                \/\/ or else use empty body\n+                () -> {\n+                    switch (method) {\n+                        case \"GET\" -> builder.GET();\n+                        case \"DELETE\" -> builder.DELETE();\n+                        default -> builder.method(method, HttpRequest.BodyPublishers.noBody());\n@@ -339,7 +341,3 @@\n-            );\n-            return builder;\n-        } catch (SecurityException | IllegalArgumentException ex) {\n-            throw ex;\n-        } catch (RuntimeException r) {\n-            throw new IllegalArgumentException(\"Illegal request parameters\", r);\n-        }\n+                }\n+        );\n+        return builder;\n","filename":"src\/java.net.http\/share\/classes\/java\/net\/http\/HttpRequest.java","additions":23,"deletions":25,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -29,0 +29,4 @@\n+import java.net.http.HttpResponse;\n+import java.net.http.HttpResponse.BodySubscriber;\n+import java.net.http.HttpResponse.BodySubscribers;\n+import java.nio.ByteBuffer;\n@@ -34,0 +38,1 @@\n+import java.util.concurrent.Flow;\n@@ -40,0 +45,2 @@\n+\n+import static java.nio.charset.StandardCharsets.UTF_8;\n@@ -41,0 +48,1 @@\n+import static org.testng.Assert.assertFalse;\n@@ -43,0 +51,1 @@\n+import static org.testng.Assert.fail;\n@@ -47,3 +56,2 @@\n-* @summary HttpRequest.NewBuilder(HttpRequest) API and behaviour checks\n-* @compile --enable-preview -source ${jdk.version} HttpRequestNewBuilderTest.java\n-* @run testng\/othervm --enable-preview HttpRequestNewBuilderTest\n+* @summary HttpRequest.newBuilder(HttpRequest) API and behaviour checks\n+* @run testng\/othervm HttpRequestNewBuilderTest\n@@ -58,1 +66,0 @@\n-           new NamedAssertion(\"method\",         (r1,r2) -> assertEquals(r1.method(), r2.method())),\n@@ -62,1 +69,5 @@\n-           new NamedAssertion(\"expectContinue\", (r1,r2) -> assertEquals(r1.expectContinue(), r2.expectContinue()))\n+           new NamedAssertion(\"expectContinue\", (r1,r2) -> assertEquals(r1.expectContinue(), r2.expectContinue())),\n+           new NamedAssertion(\"method\",  (r1,r2) -> {\n+               assertEquals(r1.method(), r2.method());\n+               assertBodyPublisherEqual(r1, r2);\n+           })\n@@ -98,0 +109,35 @@\n+    void assertBodyPublisherEqual(HttpRequest r1, HttpRequest r2) {\n+        if (r1.bodyPublisher().isPresent()) {\n+            assertTrue(r2.bodyPublisher().isPresent());\n+            var bp1 = r1.bodyPublisher().get();\n+            var bp2 = r2.bodyPublisher().get();\n+\n+            assertTrue(bp1.getClass()      == bp2.getClass());\n+            assertTrue(bp1.contentLength() == bp2.contentLength());\n+\n+            final class TestSubscriber implements Flow.Subscriber<ByteBuffer> {\n+                final BodySubscriber<String> s;\n+                TestSubscriber(BodySubscriber<String> s) { this.s = s; }\n+                @Override\n+                public void onSubscribe(Flow.Subscription subscription) { s.onSubscribe(subscription); }\n+                @Override\n+                public void onNext(ByteBuffer item) { s.onNext(List.of(item)); }\n+                @Override\n+                public void onError(Throwable throwable) { fail(\"TestSubscriber failed\"); }\n+                @Override\n+                public void onComplete() { s.onComplete(); }\n+            }\n+            var bs1 = BodySubscribers.ofString(UTF_8);\n+            bp1.subscribe(new TestSubscriber(bs1));\n+            var x1 = bs1.getBody().toCompletableFuture().join().getBytes();\n+\n+            var bs2 = BodySubscribers.ofString(UTF_8);\n+            bp2.subscribe(new TestSubscriber(bs2));\n+            var x2 = bs2.getBody().toCompletableFuture().join().getBytes();\n+\n+            assertEquals(x1, x2);\n+        } else {\n+            assertFalse(r2.bodyPublisher().isPresent());\n+        }\n+    }\n+\n@@ -272,1 +318,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/jdk\/java\/net\/httpclient\/HttpRequestNewBuilderTest.java","additions":52,"deletions":6,"binary":false,"changes":58,"status":"modified"}]}