{"files":[{"patch":"@@ -334,1 +334,1 @@\n-     *  <pre>{@code HttpRequest.newBuilder(request, (name, value) -> name.equalsIgnoreCase(\"Foo-Bar\"))}<\/pre>\n+     *  <pre>{@code HttpRequest.newBuilder(request, (name, value) -> !name.equalsIgnoreCase(\"Foo-Bar\"))}<\/pre>\n","filename":"src\/java.net.http\/share\/classes\/java\/net\/http\/HttpRequest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import java.util.Iterator;\n@@ -41,1 +40,0 @@\n-\n@@ -48,1 +46,0 @@\n-\n@@ -95,1 +92,1 @@\n-                { HttpRequest.newBuilder(URI.create(\"https:\/\/header-multiValue-1\/\"))\n+                { HttpRequest.newBuilder(URI.create(\"https:\/\/header-6\/\"))\n@@ -102,1 +99,1 @@\n-                { HttpRequest.newBuilder(URI.create(\"https:\/\/header-multiValue-2\/\"))\n+                { HttpRequest.newBuilder(URI.create(\"https:\/\/header-7\/\"))\n@@ -110,1 +107,1 @@\n-                { HttpRequest.newBuilder(URI.create(\"https:\/\/header-multiValue-3\/\"))\n+                { HttpRequest.newBuilder(URI.create(\"https:\/\/header-8\/\"))\n@@ -117,1 +114,1 @@\n-                { HttpRequest.newBuilder(URI.create(\"https:\/\/header-multiValue-4\/\"))\n+                { HttpRequest.newBuilder(URI.create(\"https:\/\/header-9\/\"))\n@@ -145,1 +142,1 @@\n-                        .timeout(Duration.ofSeconds(1)).header(\"testName\", \"testValue\").build() },\n+                        .timeout(Duration.ofSeconds(1)).header(\"testName1\", \"testValue1\").build() },\n@@ -320,0 +317,3 @@\n+        if(!request.headers().map().isEmpty()) {\n+            assertTrue(request.headers().map().containsKey(\"testName1\"));\n+        }\n@@ -329,0 +329,3 @@\n+        if(!request.headers().map().isEmpty()) {\n+            assertTrue(request.headers().allValues(\"testName1\").contains(\"testValue1\"));\n+        }\n@@ -330,1 +333,1 @@\n-                n.equalsIgnoreCase(\"testName1\") && !v.equalsIgnoreCase(\"testValue1\");\n+                !(n.equalsIgnoreCase(\"testName1\") && v.equals(\"testValue1\"));\n@@ -339,3 +342,5 @@\n-        BiPredicate<String, String> filter = (n, v) ->\n-                !(((n.equalsIgnoreCase(\"testName1\") && v.equalsIgnoreCase(\"testValue1\")))\n-                || ((n.equalsIgnoreCase(\"testName2\") && v.equalsIgnoreCase(\"testValue2\"))));\n+        BiPredicate<String, String> isTestName1Value1 = (n ,v) ->\n+                n.equalsIgnoreCase(\"testName1\") && v.equals(\"testValue1\");\n+        BiPredicate<String, String> isTestName2Value2 = (n ,v) ->\n+                n.equalsIgnoreCase(\"testName2\") && v.equals(\"testValue2\");\n+        var filter = (isTestName1Value1.or(isTestName2Value2)).negate();\n@@ -347,2 +352,1 @@\n-                !(n.equalsIgnoreCase(\"testName1\") &&\n-                 (v.equalsIgnoreCase(\"firstValue1\") || v.equalsIgnoreCase(\"lastValue2\")));\n+                !(n.equalsIgnoreCase(\"testName1\") && (v.equals(\"testValue1\") || v.equals(\"testValue2\")));\n@@ -376,0 +380,11 @@\n+    @Test\n+    public void testHeaderExample() {\n+        var request = HttpRequest.newBuilder(URI.create(\"https:\/\/example\/\"))\n+                .header(\"Foo-Bar\", \"baz\").build();\n+\n+        BiPredicate<String, String> filter = (n, v) -> !n.equalsIgnoreCase(\"Foo-Bar\");\n+        var r = HttpRequest.newBuilder(request, filter).build();\n+        assertFalse(r.headers().map().containsKey(\"Foo-Bar\"));\n+        assertEquals(r.headers().map(), HttpHeaders.of(request.headers().map(), filter).map());\n+    }\n+\n","filename":"test\/jdk\/java\/net\/httpclient\/HttpRequestNewBuilderTest.java","additions":29,"deletions":14,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -133,1 +133,1 @@\n-                name.equalsIgnoreCase(\"Foo-Bar\"));\n+                !name.equalsIgnoreCase(\"Foo-Bar\"));\n","filename":"test\/jdk\/java\/net\/httpclient\/examples\/JavadocExamples.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}