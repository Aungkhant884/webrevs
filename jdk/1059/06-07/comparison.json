{"files":[{"patch":"@@ -86,1 +86,1 @@\n-                { HttpRequest.newBuilder(URI.create(\"https:\/\/header-1\/\")).header(\"testName\", \"testValue\").build() },\n+                { HttpRequest.newBuilder(URI.create(\"https:\/\/header-1\/\")).header(\"testName1\", \"testValue1\").build() },\n@@ -88,1 +88,1 @@\n-                        .headers(\"testName\", \"testValue\", \"a\", \"1\", \"b\", \"2\").build() },\n+                        .headers(\"testName1\", \"testValue1\", \"a\", \"1\", \"b\", \"2\", \"c\", \"3\", \"d\", \"4\").build() },\n@@ -90,4 +90,35 @@\n-                        .setHeader(\"testName\", \"testValue\")\n-                        .setHeader(\"testName\", \"x\")\n-                        .setHeader(\"testName\", \"y\")\n-                        .setHeader(\"testName\", \"z\").build() },\n+                        .headers(\"testName1\", \"testValue1\", \"a\", \"1\", \"b\", \"2\", \"c\", \"3\", \"d\", \"4\", \"testName2\", \"testValue2\").build() },\n+                { HttpRequest.newBuilder(URI.create(\"https:\/\/header-4\/\"))\n+                        .headers(\"a\", \"1\", \"b\", \"2\", \"c\", \"3\", \"d\", \"4\", \"testName1\", \"testValue1\").build() },\n+                { HttpRequest.newBuilder(URI.create(\"https:\/\/header-5\/\"))\n+                        .headers( \"a\", \"1\", \"b\", \"2\", \"testName1\", \"testValue1\", \"testName2\", \"testValue2\", \"c\", \"3\", \"d\", \"4\").build() },\n+                { HttpRequest.newBuilder(URI.create(\"https:\/\/header-multiValue-1\/\"))\n+                        .headers(\"testName1\", \"testValue1\")\n+                        .headers(\"testName1\", \"v\")\n+                        .headers(\"testName1\", \"w\")\n+                        .headers(\"testName1\", \"x\")\n+                        .headers(\"testName1\", \"y\")\n+                        .headers(\"testName1\", \"z\").build() },\n+                { HttpRequest.newBuilder(URI.create(\"https:\/\/header-multiValue-2\/\"))\n+                        .headers(\"testName1\", \"testValue1\")\n+                        .headers(\"testName1\", \"v\")\n+                        .headers(\"testName1\", \"w\")\n+                        .headers(\"testName1\", \"x\")\n+                        .headers(\"testName1\", \"y\")\n+                        .headers(\"testName1\", \"z\")\n+                        .headers(\"testName1\", \"testValue2\").build() },\n+                { HttpRequest.newBuilder(URI.create(\"https:\/\/header-multiValue-3\/\"))\n+                        .headers(\"testName1\", \"v\")\n+                        .headers(\"testName1\", \"w\")\n+                        .headers(\"testName1\", \"x\")\n+                        .headers(\"testName1\", \"y\")\n+                        .headers(\"testName1\", \"z\")\n+                        .headers(\"testName1\", \"testValue1\").build() },\n+                { HttpRequest.newBuilder(URI.create(\"https:\/\/header-multiValue-4\/\"))\n+                        .headers(\"testName1\", \"v\")\n+                        .headers(\"testName1\", \"w\")\n+                        .headers(\"testName1\", \"testValue1\")\n+                        .headers(\"testName1\", \"testValue2\")\n+                        .headers(\"testName1\", \"x\")\n+                        .headers(\"testName1\", \"y\")\n+                        .headers(\"testName1\", \"z\").build() },\n@@ -125,2 +156,2 @@\n-            assertTrue(bp1.getClass()      == bp2.getClass());\n-            assertTrue(bp1.contentLength() == bp2.contentLength());\n+            assertEquals(bp1.getClass(), bp2.getClass());\n+            assertEquals(bp1.contentLength(), bp2.contentLength());\n@@ -154,19 +185,0 @@\n-    void assertHeadersEquals(HttpRequest r1, HttpRequest r2, BiPredicate<String, String> filter) {\n-        var s1 = r1.headers().map().entrySet().stream();\n-        var s2 = r2.headers()\n-                .map()\n-                .entrySet()\n-                .stream()\n-                .filter(e -> {\n-                    var n = e.getKey();\n-                    for (var v : e.getValue()) {\n-                        if (filter.test(n, v))\n-                            return true;\n-                    }\n-                    return false;\n-                });\n-        Iterator<?> iter1 = s1.iterator(), iter2 = s2.iterator();\n-        while (iter1.hasNext() && iter2.hasNext())\n-            assertEquals(iter1.next(), iter2.next());\n-    }\n-\n@@ -297,1 +309,1 @@\n-    public void testHeaders(HttpRequest request) {\n+    public void testAddHeader(HttpRequest request) {\n@@ -299,1 +311,0 @@\n-        var r = HttpRequest.newBuilder(request, filter).headers(\"newName\", \"newValue\").build();\n@@ -301,0 +312,1 @@\n+        var r = HttpRequest.newBuilder(request, filter).headers(\"newName\", \"newValue\").build();\n@@ -308,1 +320,1 @@\n-        BiPredicate<String, String> filter = (n, v) -> !n.equalsIgnoreCase(\"testName\");\n+        BiPredicate<String, String> filter = (n, v) -> !n.equalsIgnoreCase(\"testName1\");\n@@ -311,2 +323,2 @@\n-        assertFalse(r.headers().map().containsKey(\"testName\"));\n-        assertHeadersEquals(r, request, filter);\n+        assertFalse(r.headers().map().containsKey(\"testName1\"));\n+        assertEquals(r.headers().map(), HttpHeaders.of(request.headers().map(), filter).map());\n@@ -318,1 +330,12 @@\n-                n.equalsIgnoreCase(\"testName\") && !v.equalsIgnoreCase(\"testValue\");\n+                n.equalsIgnoreCase(\"testName1\") && !v.equalsIgnoreCase(\"testValue1\");\n+\n+        var r = HttpRequest.newBuilder(request, filter).build();\n+        assertFalse(r.headers().map().containsValue(\"testValue1\"));\n+        assertEquals(r.headers().map(), HttpHeaders.of(request.headers().map(), filter).map());\n+    }\n+\n+    @Test(dataProvider = \"testRequests\")\n+    public void testRemoveMultipleHeaders(HttpRequest request) {\n+        BiPredicate<String, String> filter = (n, v) ->\n+                !(((n.equalsIgnoreCase(\"testName1\") && v.equalsIgnoreCase(\"testValue1\")))\n+                || ((n.equalsIgnoreCase(\"testName2\") && v.equalsIgnoreCase(\"testValue2\"))));\n@@ -321,2 +344,8 @@\n-        assertFalse(r.headers().map().containsValue(\"testValue\"));\n-        assertHeadersEquals(r, request, filter);\n+        assertEquals(r.headers().map(), HttpHeaders.of(request.headers().map(), filter).map());\n+\n+        BiPredicate<String, String> filter1 = (n, v) ->\n+                !(n.equalsIgnoreCase(\"testName1\") &&\n+                 (v.equalsIgnoreCase(\"firstValue1\") || v.equalsIgnoreCase(\"lastValue2\")));\n+\n+        var r1 = HttpRequest.newBuilder(request, filter1).build();\n+        assertEquals(r1.headers().map(), HttpHeaders.of(request.headers().map(), filter1).map());\n@@ -329,1 +358,0 @@\n-            var r = HttpRequest.newBuilder(request, filter).build();\n@@ -331,0 +359,1 @@\n+            var r = HttpRequest.newBuilder(request, filter).build();\n@@ -332,1 +361,1 @@\n-            assertHeadersEquals(r, request, filter);\n+            assertEquals(r.headers().map(), HttpHeaders.of(request.headers().map(), filter).map());\n@@ -340,1 +369,0 @@\n-            var r = HttpRequest.newBuilder(request, filter).build();\n@@ -342,0 +370,1 @@\n+            var r = HttpRequest.newBuilder(request, filter).build();\n@@ -343,1 +372,1 @@\n-            assertHeadersEquals(r, request, filter);\n+            assertEquals(r.headers().map(), HttpHeaders.of(request.headers().map(), filter).map());\n","filename":"test\/jdk\/java\/net\/httpclient\/HttpRequestNewBuilderTest.java","additions":68,"deletions":39,"binary":false,"changes":107,"status":"modified"}]}