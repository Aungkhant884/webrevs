{"files":[{"patch":"@@ -42,0 +42,1 @@\n+import java.util.function.BiPredicate;\n@@ -93,2 +94,3 @@\n-     * <p> Instances of {@code HttpRequest.Builder} are created by calling {@link\n-     * HttpRequest#newBuilder(URI)} or {@link HttpRequest#newBuilder()}.\n+     * <p> Instances of {@code HttpRequest.Builder} are created by calling\n+     * {@link HttpRequest#newBuilder()}, {@link HttpRequest#newBuilder(URI)},\n+     * or {@link HttpRequest#newBuilder(HttpRequest, BiPredicate)}.\n@@ -306,0 +308,69 @@\n+    \/**\n+     * Creates a {@code Builder} seeded from an {@code HttpRequest}.\n+     *\n+     * This method returns a {@code Builder} whose state is copied from the\n+     * given request, subject to the given filter. This builder can be used to\n+     * build an {@code HttpRequest}, equivalent to the original, while allowing\n+     * amendment of the request state prior to construction - for example,\n+     * adding additional headers.\n+     *\n+     * <p> The {@code filter} is applied to each header name value pair as they\n+     * are copied from the given request. When completed, only headers that\n+     * satisfy the condition as laid out by the {@code filter} will be present\n+     * in the {@code Builder} returned from this method.\n+     *\n+     * @apiNote\n+     * The following scenarios demonstrate typical use-cases of the filter.\n+     * Given an {@code HttpRequest} <em>request<\/em>:\n+     * <br><br>\n+     * <ul>\n+     *  <li> Retain all headers:\n+     *  <pre>{@code HttpRequest.newBuilder(request, (n, v) -> true)}<\/pre>\n+     *\n+     *  <li> Remove all headers:\n+     *  <pre>{@code HttpRequest.newBuilder(request, (n, v) -> false)}<\/pre>\n+     *\n+     *  <li> Remove a particular header (e.g. Foo-Bar):\n+     *  <pre>{@code HttpRequest.newBuilder(request, (name, value) -> name.equalsIgnoreCase(\"Foo-Bar\"))}<\/pre>\n+     * <\/ul>\n+     *\n+     * @param request the original request\n+     * @param filter a header filter\n+     * @return a new request builder\n+     * @throws IllegalArgumentException if a new builder cannot be seeded from\n+     *         the given request (for instance, if the request contains illegal\n+     *         parameters)\n+     * @since 16\n+     *\/\n+    public static Builder newBuilder(HttpRequest request, BiPredicate<String, String> filter) {\n+        Objects.requireNonNull(request);\n+        Objects.requireNonNull(filter);\n+\n+        final HttpRequest.Builder builder = HttpRequest.newBuilder();\n+        builder.uri(request.uri());\n+        builder.expectContinue(request.expectContinue());\n+\n+        \/\/ Filter unwanted headers\n+        HttpHeaders headers = HttpHeaders.of(request.headers().map(), filter);\n+        headers.map().forEach((name, values) ->\n+                values.forEach(value -> builder.header(name, value)));\n+\n+        request.version().ifPresent(builder::version);\n+        request.timeout().ifPresent(builder::timeout);\n+        var method = request.method();\n+        request.bodyPublisher().ifPresentOrElse(\n+                \/\/ if body is present, set it\n+                bodyPublisher -> builder.method(method, bodyPublisher),\n+                \/\/ otherwise, the body is absent, special case for GET\/DELETE,\n+                \/\/ or else use empty body\n+                () -> {\n+                    switch (method) {\n+                        case \"GET\" -> builder.GET();\n+                        case \"DELETE\" -> builder.DELETE();\n+                        default -> builder.method(method, HttpRequest.BodyPublishers.noBody());\n+                    }\n+                }\n+        );\n+        return builder;\n+    }\n+\n","filename":"src\/java.net.http\/share\/classes\/java\/net\/http\/HttpRequest.java","additions":73,"deletions":2,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -0,0 +1,390 @@\n+\/*\n+* Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+*\n+* This code is free software; you can redistribute it and\/or modify it\n+* under the terms of the GNU General Public License version 2 only, as\n+* published by the Free Software Foundation.\n+*\n+* This code is distributed in the hope that it will be useful, but WITHOUT\n+* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+* version 2 for more details (a copy is included in the LICENSE file that\n+* accompanied this code).\n+*\n+* You should have received a copy of the GNU General Public License version\n+* 2 along with this work; if not, write to the Free Software Foundation,\n+* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+*\n+* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+* or visit www.oracle.com if you need additional information or have any\n+* questions.\n+*\/\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.http.HttpClient.Version;\n+import java.net.http.HttpHeaders;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse.BodySubscriber;\n+import java.net.http.HttpResponse.BodySubscribers;\n+import java.nio.ByteBuffer;\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.Flow;\n+import java.util.function.BiConsumer;\n+import java.util.function.BiPredicate;\n+\n+import static java.net.http.HttpClient.Version.HTTP_2;\n+import static java.net.http.HttpClient.Version.HTTP_1_1;\n+import static java.nio.charset.StandardCharsets.UTF_8;\n+\n+import org.testng.annotations.Test;\n+import org.testng.annotations.DataProvider;\n+\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertThrows;\n+import static org.testng.Assert.assertTrue;\n+import static org.testng.Assert.fail;\n+\n+\/**\n+* @test\n+* @bug 8252304\n+* @summary HttpRequest.newBuilder(HttpRequest) API and behaviour checks\n+* @run testng\/othervm HttpRequestNewBuilderTest\n+*\/\n+public class HttpRequestNewBuilderTest {\n+    static final Class<NullPointerException> NPE = NullPointerException.class;\n+    static final Class<IllegalArgumentException> IAE = IllegalArgumentException.class;\n+\n+    record NamedAssertion(String name, BiConsumer<HttpRequest, HttpRequest> test) { }\n+\n+    List<NamedAssertion> REQUEST_ASSERTIONS = List.of(\n+            new NamedAssertion(\"uri\", (r1, r2) -> assertEquals(r1.uri(), r2.uri())),\n+            new NamedAssertion(\"timeout\", (r1, r2) -> assertEquals(r1.timeout(), r2.timeout())),\n+            new NamedAssertion(\"version\", (r1, r2) -> assertEquals(r1.version(), r2.version())),\n+            new NamedAssertion(\"headers\", (r1, r2) -> assertEquals(r1.headers(), r2.headers())),\n+            new NamedAssertion(\"expectContinue\", (r1, r2) -> assertEquals(r1.expectContinue(), r2.expectContinue())),\n+            new NamedAssertion(\"method\", (r1, r2) -> {\n+                assertEquals(r1.method(), r2.method());\n+                assertBodyPublisherEqual(r1, r2);\n+            })\n+    );\n+\n+    @DataProvider(name = \"testRequests\")\n+    public Object[][] variants() {\n+        return new Object[][]{\n+                { HttpRequest.newBuilder(URI.create(\"https:\/\/uri-1\/\")).build() },\n+                { HttpRequest.newBuilder(URI.create(\"https:\/\/version-1\/\")).version(HTTP_1_1).build() },\n+                { HttpRequest.newBuilder(URI.create(\"https:\/\/version-2\/\")).version(HTTP_2).build() },\n+                { HttpRequest.newBuilder(URI.create(\"https:\/\/timeout-1\/\")).timeout(Duration.ofSeconds(30)).build() },\n+                { HttpRequest.newBuilder(URI.create(\"https:\/\/header-1\/\")).header(\"testName\", \"testValue\").build() },\n+                { HttpRequest.newBuilder(URI.create(\"https:\/\/header-2\/\"))\n+                        .headers(\"testName\", \"testValue\", \"a\", \"1\", \"b\", \"2\").build() },\n+                { HttpRequest.newBuilder(URI.create(\"https:\/\/header-3\/\"))\n+                        .setHeader(\"testName\", \"testValue\")\n+                        .setHeader(\"testName\", \"x\")\n+                        .setHeader(\"testName\", \"y\")\n+                        .setHeader(\"testName\", \"z\").build() },\n+                \/\/ dedicated method\n+                { HttpRequest.newBuilder(URI.create(\"https:\/\/method-1\/\")).GET().build() },\n+                { HttpRequest.newBuilder(URI.create(\"https:\/\/method-2\/\")).DELETE().build() },\n+                { HttpRequest.newBuilder(URI.create(\"https:\/\/method-3\/\")).POST(HttpRequest.BodyPublishers.ofString(\"testData\")).build() },\n+                { HttpRequest.newBuilder(URI.create(\"https:\/\/method-4\/\")).PUT(HttpRequest.BodyPublishers.ofString(\"testData\")).build() },\n+                \/\/ method w\/body\n+                { HttpRequest.newBuilder(URI.create(\"https:\/\/method-5\/\")).method(\"GET\", HttpRequest.BodyPublishers.ofString(\"testData\")).build() },\n+                { HttpRequest.newBuilder(URI.create(\"https:\/\/method-6\/\")).method(\"DELETE\", HttpRequest.BodyPublishers.ofString(\"testData\")).build() },\n+                { HttpRequest.newBuilder(URI.create(\"https:\/\/method-7\/\")).method(\"POST\", HttpRequest.BodyPublishers.ofString(\"testData\")).build() },\n+                { HttpRequest.newBuilder(URI.create(\"https:\/\/method-8\/\")).method(\"PUT\", HttpRequest.BodyPublishers.ofString(\"testData\")).build() },\n+                \/\/ method w\/o body\n+                { HttpRequest.newBuilder(URI.create(\"https:\/\/method-9\/\")).method(\"GET\", HttpRequest.BodyPublishers.noBody()).build() },\n+                { HttpRequest.newBuilder(URI.create(\"https:\/\/method-10\/\")).method(\"DELETE\", HttpRequest.BodyPublishers.noBody()).build() },\n+                { HttpRequest.newBuilder(URI.create(\"https:\/\/method-11\/\")).method(\"POST\", HttpRequest.BodyPublishers.noBody()).build() },\n+                { HttpRequest.newBuilder(URI.create(\"https:\/\/method-12\/\")).method(\"PUT\", HttpRequest.BodyPublishers.noBody()).build() },\n+                \/\/ user defined methods w\/ & w\/o body\n+                { HttpRequest.newBuilder(URI.create(\"https:\/\/method-13\/\")).method(\"TEST\", HttpRequest.BodyPublishers.noBody()).build() },\n+                { HttpRequest.newBuilder(URI.create(\"https:\/\/method-14\/\")).method(\"TEST\", HttpRequest.BodyPublishers.ofString(\"testData\")).build() },\n+\n+                { HttpRequest.newBuilder(URI.create(\"https:\/\/all-fields-1\/\")).GET().expectContinue(true).version(HTTP_2)\n+                        .timeout(Duration.ofSeconds(1)).header(\"testName\", \"testValue\").build() },\n+        };\n+    }\n+\n+    \/\/ test methods\n+    void assertBodyPublisherEqual(HttpRequest r1, HttpRequest r2) {\n+        if (r1.bodyPublisher().isPresent()) {\n+            assertTrue(r2.bodyPublisher().isPresent());\n+            var bp1 = r1.bodyPublisher().get();\n+            var bp2 = r2.bodyPublisher().get();\n+\n+            assertTrue(bp1.getClass()      == bp2.getClass());\n+            assertTrue(bp1.contentLength() == bp2.contentLength());\n+\n+            final class TestSubscriber implements Flow.Subscriber<ByteBuffer> {\n+                final BodySubscriber<String> s;\n+                TestSubscriber(BodySubscriber<String> s) { this.s = s; }\n+                @Override\n+                public void onSubscribe(Flow.Subscription subscription) { s.onSubscribe(subscription); }\n+                @Override\n+                public void onNext(ByteBuffer item) { s.onNext(List.of(item)); }\n+                @Override\n+                public void onError(Throwable throwable) { fail(\"TestSubscriber failed\"); }\n+                @Override\n+                public void onComplete() { s.onComplete(); }\n+            }\n+            var bs1 = BodySubscribers.ofString(UTF_8);\n+            bp1.subscribe(new TestSubscriber(bs1));\n+            var b1 = bs1.getBody().toCompletableFuture().join().getBytes();\n+\n+            var bs2 = BodySubscribers.ofString(UTF_8);\n+            bp2.subscribe(new TestSubscriber(bs2));\n+            var b2 = bs2.getBody().toCompletableFuture().join().getBytes();\n+\n+            assertEquals(b1, b2);\n+        } else {\n+            assertFalse(r2.bodyPublisher().isPresent());\n+        }\n+    }\n+\n+    void assertHeadersEquals(HttpRequest r1, HttpRequest r2, BiPredicate<String, String> filter) {\n+        var s1 = r1.headers().map().entrySet().stream();\n+        var s2 = r2.headers()\n+                .map()\n+                .entrySet()\n+                .stream()\n+                .filter(e -> {\n+                    var n = e.getKey();\n+                    for (var v : e.getValue()) {\n+                        if (filter.test(n, v))\n+                            return true;\n+                    }\n+                    return false;\n+                });\n+        Iterator<?> iter1 = s1.iterator(), iter2 = s2.iterator();\n+        while (iter1.hasNext() && iter2.hasNext())\n+            assertEquals(iter1.next(), iter2.next());\n+    }\n+\n+    void assertAllOtherElementsEqual(HttpRequest r1, HttpRequest r2, String... except) {\n+        var ignoreList = Arrays.asList(except);\n+        REQUEST_ASSERTIONS.stream()\n+                .filter(a -> !ignoreList.contains(a.name()))\n+                .forEach(testCaseAssertion -> testCaseAssertion.test().accept(r1, r2));\n+    }\n+\n+    void testBodyPublisher(String methodName, HttpRequest request) {\n+        \/\/ method w\/body\n+        var r = HttpRequest.newBuilder(request, (n, v) -> true)\n+                .method(methodName, HttpRequest.BodyPublishers.ofString(\"testData\"))\n+                .build();\n+        assertEquals(r.method(), methodName);\n+        assertTrue(r.bodyPublisher().isPresent());\n+        assertEquals(r.bodyPublisher().get().contentLength(), 8);\n+        assertAllOtherElementsEqual(r, request, \"method\");\n+\n+        \/\/ method w\/o body\n+        var noBodyPublisher = HttpRequest.BodyPublishers.noBody();\n+        var r1 = HttpRequest.newBuilder(request, (n, v) -> true)\n+                .method(methodName, noBodyPublisher)\n+                .build();\n+        assertEquals(r1.method(), methodName);\n+        assertTrue(r1.bodyPublisher().isPresent());\n+        assertEquals(r1.bodyPublisher().get(), noBodyPublisher);\n+        assertAllOtherElementsEqual(r1, request, \"method\");\n+    }\n+\n+    @Test\n+    public void testNull() {\n+        var r = HttpRequest.newBuilder(URI.create(\"https:\/\/foobar\/\")).build();\n+        assertThrows(NPE, () -> HttpRequest.newBuilder(r, null));\n+        assertThrows(NPE, () -> HttpRequest.newBuilder(null, (n, v) -> true));\n+        assertThrows(NPE, () -> HttpRequest.newBuilder(null, null));\n+    }\n+\n+    @Test(dataProvider = \"testRequests\")\n+    void testBuilder(HttpRequest request) {\n+        var r = HttpRequest.newBuilder(request, (n, v) -> true).build();\n+        assertEquals(r, request);\n+        assertAllOtherElementsEqual(r, request);\n+    }\n+\n+    @Test(dataProvider = \"testRequests\")\n+    public void testURI(HttpRequest request) {\n+        URI newURI = URI.create(\"http:\/\/www.newURI.com\/\");\n+        var r = HttpRequest.newBuilder(request, (n, v) -> true).uri(newURI).build();\n+\n+        assertEquals(r.uri(), newURI);\n+        assertAllOtherElementsEqual(r, request, \"uri\");\n+    }\n+\n+    @Test(dataProvider = \"testRequests\")\n+    public void testTimeout(HttpRequest request) {\n+        var r = HttpRequest.newBuilder(request, (n, v) -> true).timeout(Duration.ofSeconds(2)).build();\n+\n+        assertEquals(r.timeout().get().getSeconds(), 2);\n+        assertAllOtherElementsEqual(r, request, \"timeout\");\n+    }\n+\n+    @Test(dataProvider = \"testRequests\")\n+    public void testVersion(HttpRequest request) {\n+        var r = HttpRequest.newBuilder(request, (n, v) -> true).version(HTTP_1_1).build();\n+\n+        assertEquals(r.version().get(), HTTP_1_1);\n+        assertAllOtherElementsEqual(r, request, \"version\");\n+    }\n+\n+    @Test(dataProvider = \"testRequests\")\n+    public void testGET(HttpRequest request) {\n+        var r = HttpRequest.newBuilder(request, (n, v) -> true)\n+                .GET()\n+                .build();\n+        assertEquals(r.method(), \"GET\");\n+        assertTrue(r.bodyPublisher().isEmpty());\n+        assertAllOtherElementsEqual(r, request, \"method\");\n+\n+        testBodyPublisher(\"GET\", request);\n+    }\n+\n+    @Test(dataProvider = \"testRequests\")\n+    public void testDELETE(HttpRequest request) {\n+        var r = HttpRequest.newBuilder(request, (n, v) -> true)\n+                .DELETE()\n+                .build();\n+        assertEquals(r.method(), \"DELETE\");\n+        assertTrue(r.bodyPublisher().isEmpty());\n+        assertAllOtherElementsEqual(r, request, \"method\");\n+\n+        testBodyPublisher(\"DELETE\", request);\n+    }\n+\n+    @Test(dataProvider = \"testRequests\")\n+    public void testPOST(HttpRequest request) {\n+        var r = HttpRequest.newBuilder(request, (n, v) -> true)\n+                .POST(HttpRequest.BodyPublishers.ofString(\"testData\"))\n+                .build();\n+        assertEquals(r.method(), \"POST\");\n+        assertTrue(r.bodyPublisher().isPresent());\n+        assertEquals(r.bodyPublisher().get().contentLength(), 8);\n+        assertAllOtherElementsEqual(r, request, \"method\");\n+\n+        testBodyPublisher(\"POST\", request);\n+    }\n+\n+    @Test(dataProvider = \"testRequests\")\n+    public void testPUT(HttpRequest request) {\n+        var r = HttpRequest.newBuilder(request, (n, v) -> true)\n+                .PUT(HttpRequest.BodyPublishers.ofString(\"testData\"))\n+                .build();\n+        assertEquals(r.method(), \"PUT\");\n+        assertTrue(r.bodyPublisher().isPresent());\n+        assertEquals(r.bodyPublisher().get().contentLength(), 8);\n+        assertAllOtherElementsEqual(r, request, \"method\");\n+\n+        testBodyPublisher(\"PUT\", request);\n+    }\n+\n+    @Test(dataProvider = \"testRequests\")\n+    public void testUserDefinedMethod(HttpRequest request) {\n+        testBodyPublisher(\"TEST\", request);\n+    }\n+\n+    @Test(dataProvider = \"testRequests\")\n+    public void testHeaders(HttpRequest request) {\n+        BiPredicate<String, String> filter = (n, v) -> true;\n+        var r = HttpRequest.newBuilder(request, filter).headers(\"newName\", \"newValue\").build();\n+\n+        assertEquals(r.headers().firstValue(\"newName\").get(), \"newValue\");\n+        assertEquals(r.headers().allValues(\"newName\").size(), 1);\n+        assertAllOtherElementsEqual(r, request, \"headers\");\n+    }\n+\n+    @Test(dataProvider = \"testRequests\")\n+    public void testRemoveHeader(HttpRequest request) {\n+        BiPredicate<String, String> filter = (n, v) -> !n.equalsIgnoreCase(\"testName\");\n+\n+        var r = HttpRequest.newBuilder(request, filter).build();\n+        assertFalse(r.headers().map().containsKey(\"testName\"));\n+        assertHeadersEquals(r, request, filter);\n+    }\n+\n+    @Test(dataProvider = \"testRequests\")\n+    public void testRemoveSingleHeaderValue(HttpRequest request) {\n+        BiPredicate<String, String> filter = (n, v) ->\n+                n.equalsIgnoreCase(\"testName\") && !v.equalsIgnoreCase(\"testValue\");\n+\n+        var r = HttpRequest.newBuilder(request, filter).build();\n+        assertFalse(r.headers().map().containsValue(\"testValue\"));\n+        assertHeadersEquals(r, request, filter);\n+    }\n+\n+    @Test(dataProvider = \"testRequests\")\n+    public void testRemoveAllHeaders(HttpRequest request) {\n+        if (!request.headers().map().isEmpty()) {\n+            BiPredicate<String, String> filter = (n, v) -> false;\n+            var r = HttpRequest.newBuilder(request, filter).build();\n+\n+            assertTrue(r.headers().map().isEmpty());\n+            assertHeadersEquals(r, request, filter);\n+        }\n+    }\n+\n+    @Test(dataProvider = \"testRequests\")\n+    public void testRetainAllHeaders(HttpRequest request) {\n+        if (!request.headers().map().isEmpty()) {\n+            BiPredicate<String, String> filter = (n, v) -> true;\n+            var r = HttpRequest.newBuilder(request, filter).build();\n+\n+            assertFalse(r.headers().map().isEmpty());\n+            assertHeadersEquals(r, request, filter);\n+        }\n+    }\n+\n+    @Test\n+    public void testInvalidMethod() throws URISyntaxException {\n+        URI testURI = new URI(\"http:\/\/www.foo.com\/\");\n+        var r = new HttpRequest() {\n+            @Override\n+            public Optional<BodyPublisher> bodyPublisher() { return Optional.empty(); }\n+            @Override\n+            public String method() { return \"CONNECT\"; }\n+            @Override\n+            public Optional<Duration> timeout() { return Optional.empty(); }\n+            @Override\n+            public boolean expectContinue() { return false; }\n+            @Override\n+            public URI uri() { return testURI; }\n+            @Override\n+            public Optional<Version> version() { return Optional.empty(); }\n+            @Override\n+            public HttpHeaders headers() { return HttpHeaders.of(Map.of(), (n, v) -> true); }\n+        };\n+        assertThrows(IAE, () -> HttpRequest.newBuilder(r, (n, v) -> true).build());\n+    }\n+\n+    @Test\n+    public void testInvalidURIScheme() throws URISyntaxException {\n+        URI badURI = new URI(\"ftp:\/\/foo.com\/somefile\");\n+        var r = new HttpRequest() {\n+            @Override\n+            public Optional<BodyPublisher> bodyPublisher() { return Optional.empty(); }\n+            @Override\n+            public String method() { return \"GET\"; }\n+            @Override\n+            public Optional<Duration> timeout() { return Optional.empty(); }\n+            @Override\n+            public boolean expectContinue() { return false; }\n+            @Override\n+            public URI uri() { return badURI; }\n+            @Override\n+            public Optional<Version> version() { return Optional.empty(); }\n+            @Override\n+            public HttpHeaders headers() { return HttpHeaders.of(Map.of(), (n, v) -> true); }\n+        };\n+        assertThrows(IAE, () -> HttpRequest.newBuilder(r, (n, v) -> true).build());\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/httpclient\/HttpRequestNewBuilderTest.java","additions":390,"deletions":0,"binary":false,"changes":390,"status":"added"},{"patch":"@@ -122,0 +122,12 @@\n+\n+        \/\/ HttpRequest.Builder\n+        \/\/ API note - newBuilder(HttpRequest, BiPredicate<String, String>)\n+        \/\/ Retain all headers:\n+        HttpRequest.newBuilder(request, (n, v) -> true);\n+\n+        \/\/Remove all headers:\n+        HttpRequest.newBuilder(request, (n, v) -> false);\n+\n+        \/\/ Remove a particular header (e.g. Foo-Bar):\n+        HttpRequest.newBuilder(request, (name, value) ->\n+                name.equalsIgnoreCase(\"Foo-Bar\"));\n","filename":"test\/jdk\/java\/net\/httpclient\/examples\/JavadocExamples.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"}]}