{"files":[{"patch":"@@ -36,3 +36,4 @@\n- * DataInputStream is not necessarily safe for multithreaded access.\n- * Thread safety is optional and is the responsibility of users of\n- * methods in this class.\n+ * A DataInputStream is not safe for use by multiple concurrent\n+ * threads. If a DataOutputStream is to be used by more than one\n+ * thread then access to the data output stream should be controlled\n+ * by appropriate synchronization.\n","filename":"src\/java.base\/share\/classes\/java\/io\/DataInputStream.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -32,0 +32,5 @@\n+ * <p>\n+ * A DataOutputStream is not safe for use by multiple concurrent\n+ * threads. If a DataOutputStream is to be used by more than one\n+ * thread then access to the data output stream should be controlled\n+ * by appropriate synchronization.\n@@ -166,2 +171,3 @@\n-        out.write((v >>> 8) & 0xFF);\n-        out.write((v >>> 0) & 0xFF);\n+        writeBuffer[0] = (byte)(v >>> 8);\n+        writeBuffer[1] = (byte)(v >>> 0);\n+        out.write(writeBuffer, 0, 2);\n@@ -181,2 +187,3 @@\n-        out.write((v >>> 8) & 0xFF);\n-        out.write((v >>> 0) & 0xFF);\n+        writeBuffer[0] = (byte)(v >>> 8);\n+        writeBuffer[1] = (byte)(v >>> 0);\n+        out.write(writeBuffer, 0, 2);\n@@ -196,4 +203,5 @@\n-        out.write((v >>> 24) & 0xFF);\n-        out.write((v >>> 16) & 0xFF);\n-        out.write((v >>>  8) & 0xFF);\n-        out.write((v >>>  0) & 0xFF);\n+        writeBuffer[0] = (byte)(v >>> 24);\n+        writeBuffer[1] = (byte)(v >>> 16);\n+        writeBuffer[2] = (byte)(v >>>  8);\n+        writeBuffer[3] = (byte)(v >>>  0);\n+        out.write(writeBuffer, 0, 4);\n","filename":"src\/java.base\/share\/classes\/java\/io\/DataOutputStream.java","additions":16,"deletions":8,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -0,0 +1,129 @@\n+\/*\n+ * Copyright (c) 2020, Red Hat Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.java.io;\n+\n+import org.openjdk.jmh.annotations.*;\n+\n+import java.io.*;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.MICROSECONDS)\n+@Fork(value = 1, warmups = 0)\n+@Measurement(iterations = 6, time = 1)\n+@Warmup(iterations=2, time = 2)\n+@State(Scope.Benchmark)\n+public class DataOutputStreamTest {\n+\n+    public enum BasicType {CHAR, SHORT, INT, STRING}\n+    @Param({\"CHAR\", \"SHORT\", \"INT\", \/* \"STRING\"*\/}) BasicType basicType;\n+\n+    @Param({\"4096\"}) int size;\n+    final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(size);\n+    final File f = new File(\"DataOutputStreamTest.tmp\");\n+    String outputString;\n+    FileOutputStream fileOutputStream;\n+    DataOutput bufferedFileStream, rawFileStream, byteArrayStream;\n+\n+    @Setup(Level.Trial)\n+    public void setup() {\n+        try {\n+            fileOutputStream = new FileOutputStream(f);\n+            byteArrayStream = new DataOutputStream(byteArrayOutputStream);\n+            rawFileStream = new DataOutputStream(fileOutputStream);\n+            bufferedFileStream = new DataOutputStream(new BufferedOutputStream(fileOutputStream));\n+            outputString = new String(new byte[size]);\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public void writeChars(DataOutput dataOutput)\n+            throws Exception {\n+        for (int i = 0; i < size; i += 2) {\n+            dataOutput.writeChar(i);\n+        }\n+    }\n+\n+    public void writeShorts(DataOutput dataOutput)\n+            throws Exception {\n+        for (int i = 0; i < size; i += 2) {\n+            dataOutput.writeShort(i);\n+        }\n+    }\n+\n+    public void writeInts(DataOutput dataOutput)\n+            throws Exception {\n+        for (int i = 0; i < size; i += 4) {\n+            dataOutput.writeInt(i);\n+        }\n+    }\n+\n+    public void writeString(DataOutput dataOutput)\n+            throws Exception {\n+        dataOutput.writeChars(outputString);\n+    }\n+\n+    public void write(DataOutput dataOutput)\n+            throws Exception {\n+        switch (basicType) {\n+            case CHAR:\n+                writeChars(dataOutput);\n+                break;\n+            case SHORT:\n+                writeShorts(dataOutput);\n+                break;\n+            case INT:\n+                writeInts(dataOutput);\n+                break;\n+            case STRING:\n+                writeString(dataOutput);\n+                break;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void dataOutputStreamOverByteArray()\n+            throws Exception {\n+        byteArrayOutputStream.reset();\n+        write(byteArrayStream);\n+        byteArrayOutputStream.flush();\n+    }\n+\n+    @Benchmark\n+    public void dataOutputStreamOverRawFileStream()\n+            throws Exception {\n+        fileOutputStream.getChannel().position(0);\n+        write(rawFileStream);\n+        fileOutputStream.flush();\n+    }\n+\n+    @Benchmark\n+    public void dataOutputStreamOverBufferedFileStream()\n+            throws Exception{\n+        fileOutputStream.getChannel().position(0);\n+        write(bufferedFileStream);\n+        fileOutputStream.flush();\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/io\/DataOutputStreamTest.java","additions":129,"deletions":0,"binary":false,"changes":129,"status":"added"}]}