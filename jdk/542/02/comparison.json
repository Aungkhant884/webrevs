{"files":[{"patch":"@@ -36,3 +36,4 @@\n- * DataInputStream is not necessarily safe for multithreaded access.\n- * Thread safety is optional and is the responsibility of users of\n- * methods in this class.\n+ * A DataOutputStream is not safe for use by multiple concurrent\n+ * threads. If a DataOutputStream is to be used by more than one\n+ * thread then access to the data output stream should be controlled\n+ * by appropriate synchronization.\n","filename":"src\/java.base\/share\/classes\/java\/io\/DataInputStream.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -32,0 +32,5 @@\n+ * <p>\n+ * A DataOutputStream is not safe for use by multiple concurrent\n+ * threads. If a DataOutputStream is to be used by more than one\n+ * thread then access to the data output stream should be controlled\n+ * by appropriate synchronization.\n@@ -166,2 +171,3 @@\n-        out.write((v >>> 8) & 0xFF);\n-        out.write((v >>> 0) & 0xFF);\n+        writeBuffer[0] = (byte)(v >>> 8);\n+        writeBuffer[1] = (byte)(v >>> 0);\n+        out.write(writeBuffer, 0, 2);\n@@ -181,2 +187,3 @@\n-        out.write((v >>> 8) & 0xFF);\n-        out.write((v >>> 0) & 0xFF);\n+        writeBuffer[0] = (byte)(v >>> 8);\n+        writeBuffer[1] = (byte)(v >>> 0);\n+        out.write(writeBuffer, 0, 2);\n@@ -196,4 +203,5 @@\n-        out.write((v >>> 24) & 0xFF);\n-        out.write((v >>> 16) & 0xFF);\n-        out.write((v >>>  8) & 0xFF);\n-        out.write((v >>>  0) & 0xFF);\n+        writeBuffer[0] = (byte)(v >>> 24);\n+        writeBuffer[1] = (byte)(v >>> 16);\n+        writeBuffer[2] = (byte)(v >>>  8);\n+        writeBuffer[3] = (byte)(v >>>  0);\n+        out.write(writeBuffer, 0, 4);\n","filename":"src\/java.base\/share\/classes\/java\/io\/DataOutputStream.java","additions":16,"deletions":8,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -0,0 +1,141 @@\n+\/*\n+ * Copyright (c) 2020, Red Hat Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.java.io;\n+\n+import org.openjdk.jmh.annotations.*;\n+\n+import java.io.*;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.MICROSECONDS)\n+@Fork(value = 1, warmups = 0)\n+@Measurement(iterations = 6, time = 1)\n+@Warmup(iterations=2, time = 2)\n+public class DataOutputStreamTest {\n+\n+    enum BasicType { CHAR, SHORT, INT, STRING }\n+\n+    @State(Scope.Benchmark)\n+    public static class BenchmarkState {\n+        @Param({\"4096\"}) int SIZE;\n+        @Param({\"char\", \"short\", \"int\", \/*\"string\"*\/}) String BASIC_TYPE;\n+        final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(SIZE);\n+        final File f = new File(\"DataOutputStreamTest.tmp\");\n+        String outputString;\n+        FileOutputStream fileOutputStream;\n+        DataOutput bufferedFileStream, rawFileStream, byteArrayStream;\n+        BasicType basicType;\n+\n+        @Setup(Level.Trial)\n+        public void setup() {\n+            try {\n+                fileOutputStream = new FileOutputStream(f);\n+                byteArrayStream = new DataOutputStream(byteArrayOutputStream);\n+                rawFileStream = new DataOutputStream(fileOutputStream);\n+                bufferedFileStream = new DataOutputStream(new BufferedOutputStream(fileOutputStream));\n+                switch (BASIC_TYPE.toLowerCase()) {\n+                    case \"char\": basicType = BasicType.CHAR; break;\n+                    case \"short\": basicType =  BasicType.SHORT; break;\n+                    case \"int\": basicType = BasicType.INT; break;\n+                    case \"string\": basicType = BasicType.STRING; break;\n+                    default: throw new RuntimeException(\"Unhandled basic type:\" + BASIC_TYPE);\n+                };\n+                outputString = new String(new byte[SIZE]);\n+            } catch (Exception e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+    }\n+\n+    public void writeChars(BenchmarkState state, DataOutput dataOutput) {\n+        try {\n+            for (int i = 0; i < state.SIZE; i += 2) {\n+                dataOutput.writeChar(i);\n+            }\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public void writeShorts(BenchmarkState state, DataOutput dataOutput) {\n+        try {\n+            for (int i = 0; i < state.SIZE; i += 2) {\n+                dataOutput.writeShort(i);\n+            }\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public void writeInts(BenchmarkState state, DataOutput dataOutput) {\n+        try {\n+            for (int i = 0; i < state.SIZE; i += 4) {\n+                dataOutput.writeInt(i);\n+            }\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public void writeString(BenchmarkState state, DataOutput dataOutput) {\n+        try {\n+            dataOutput.writeChars(state.outputString);\n+        } catch (Exception e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public void write(BenchmarkState state, DataOutput dataOutput) {\n+        switch (state.basicType) {\n+            case CHAR: writeChars(state, dataOutput); break;\n+            case SHORT: writeShorts(state, dataOutput); break;\n+            case INT: writeInts(state, dataOutput); break;\n+            case STRING: writeString(state, dataOutput); break;\n+        }\n+    }\n+    @Benchmark\n+    public void dataOutputStreamOverByteArray(BenchmarkState state)\n+            throws IOException {\n+        state.byteArrayOutputStream.reset();\n+        write(state, state.byteArrayStream);\n+        state.byteArrayOutputStream.flush();\n+    }\n+\n+    @Benchmark\n+    public void dataOutputStreamOverRawFileStream(BenchmarkState state)\n+            throws IOException {\n+        state.fileOutputStream.getChannel().position(0);\n+        write(state, state.rawFileStream);\n+        state.fileOutputStream.flush();\n+    }\n+\n+    @Benchmark\n+    public void dataOutputStreamOverBufferedFileStream(BenchmarkState state)\n+            throws IOException{\n+        state.fileOutputStream.getChannel().position(0);\n+        write(state, state.bufferedFileStream);\n+        state.fileOutputStream.flush();\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/io\/DataOutputStreamTest.java","additions":141,"deletions":0,"binary":false,"changes":141,"status":"added"}]}