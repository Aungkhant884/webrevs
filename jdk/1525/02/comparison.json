{"files":[{"patch":"@@ -135,2 +135,0 @@\n-  \/\/NOT_PRODUCT({ FlagSetting fs(TraceMethodHandles, true); trace_method_handle(_masm, \"LZMH\"); });\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/methodHandles_aarch64.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -171,2 +171,0 @@\n-  \/\/NOT_PRODUCT({ FlagSetting fs(TraceMethodHandles, true); trace_method_handle(_masm, \"LZMH\"); });\n-\n","filename":"src\/hotspot\/cpu\/x86\/methodHandles_x86.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1013,1 +1013,1 @@\n-  void print_name(outputStream* st = tty); \/\/ prints as \"virtual void foo(int)\"; exposed for TraceRedefineClasses\n+  void print_name(outputStream* st = tty); \/\/ prints as \"virtual void foo(int)\"; exposed for -Xlog:redefine+class\n","filename":"src\/hotspot\/share\/oops\/method.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -560,0 +560,16 @@\n+  { \"PrintSharedSpaces\",             JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n+  { \"TraceBiasedLocking\",            JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n+  { \"TraceClassLoading\",             JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n+  { \"TraceClassLoadingPreorder\",     JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n+  { \"TraceClassPaths\",               JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n+  { \"TraceClassResolution\",          JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n+  { \"TraceClassUnloading\",           JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n+  { \"TraceExceptions\",               JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n+  { \"TraceInvokeDynamic\",            JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n+  { \"TraceLoaderConstraints\",        JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n+  { \"TraceMethodHandles\",            JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n+  { \"TraceMonitorInflation\",         JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n+  { \"TraceSafepointCleanupTime\",     JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n+  { \"TraceJVMTIObjectTagging\",       JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n+  { \"TraceRedefineClasses\",          JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n+  { \"PrintJNIResolving\",             JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n@@ -587,38 +603,0 @@\n-\/\/ NOTE: A compatibility request will be necessary for each alias to be removed.\n-static AliasedLoggingFlag const aliased_logging_flags[] = {\n-  { \"PrintSharedSpaces\",         LogLevel::Info,  true,  LOG_TAGS(cds) },\n-  { \"TraceBiasedLocking\",        LogLevel::Info,  true,  LOG_TAGS(biasedlocking) },\n-  { \"TraceClassLoading\",         LogLevel::Info,  true,  LOG_TAGS(class, load) },\n-  { \"TraceClassLoadingPreorder\", LogLevel::Debug, true,  LOG_TAGS(class, preorder) },\n-  { \"TraceClassPaths\",           LogLevel::Info,  true,  LOG_TAGS(class, path) },\n-  { \"TraceClassResolution\",      LogLevel::Debug, true,  LOG_TAGS(class, resolve) },\n-  { \"TraceClassUnloading\",       LogLevel::Info,  true,  LOG_TAGS(class, unload) },\n-  { \"TraceExceptions\",           LogLevel::Info,  true,  LOG_TAGS(exceptions) },\n-  { \"TraceInvokeDynamic\",        LogLevel::Debug, true,  LOG_TAGS(methodhandles, indy) },\n-  { \"TraceLoaderConstraints\",    LogLevel::Info,  true,  LOG_TAGS(class, loader, constraints) },\n-  { \"TraceMethodHandles\",        LogLevel::Info,  true,  LOG_TAGS(methodhandles) },\n-  { \"TraceMonitorInflation\",     LogLevel::Trace, true,  LOG_TAGS(monitorinflation) },\n-  { \"TraceSafepointCleanupTime\", LogLevel::Info,  true,  LOG_TAGS(safepoint, cleanup) },\n-  { \"TraceJVMTIObjectTagging\",   LogLevel::Debug, true,  LOG_TAGS(jvmti, objecttagging) },\n-  { \"TraceRedefineClasses\",      LogLevel::Info,  false, LOG_TAGS(redefine, class) },\n-  { \"PrintJNIResolving\",         LogLevel::Debug, true,  LOG_TAGS(jni, resolve) },\n-  { NULL,                        LogLevel::Off,   false, LOG_TAGS(_NO_TAG) }\n-};\n-\n-#ifndef PRODUCT\n-\/\/ These options are removed in jdk9. Remove this code for jdk10.\n-static AliasedFlag const removed_develop_logging_flags[] = {\n-  { \"TraceClassInitialization\",   \"-Xlog:class+init\" },\n-  { \"TraceClassLoaderData\",       \"-Xlog:class+loader+data\" },\n-  { \"TraceDefaultMethods\",        \"-Xlog:defaultmethods=debug\" },\n-  { \"TraceItables\",               \"-Xlog:itables=debug\" },\n-  { \"TraceMonitorMismatch\",       \"-Xlog:monitormismatch=info\" },\n-  { \"TraceSafepoint\",             \"-Xlog:safepoint=debug\" },\n-  { \"TraceStartupTime\",           \"-Xlog:startuptime\" },\n-  { \"TraceVMOperation\",           \"-Xlog:vmoperation=debug\" },\n-  { \"PrintVtables\",               \"-Xlog:vtables=debug\" },\n-  { \"VerboseVerification\",        \"-Xlog:verification\" },\n-  { NULL, NULL }\n-};\n-#endif \/\/PRODUCT\n-\n@@ -688,12 +666,0 @@\n-#ifndef PRODUCT\n-const char* Arguments::removed_develop_logging_flag_name(const char* name){\n-  for (size_t i = 0; removed_develop_logging_flags[i].alias_name != NULL; i++) {\n-    const AliasedFlag& flag = removed_develop_logging_flags[i];\n-    if (strcmp(flag.alias_name, name) == 0) {\n-      return flag.real_name;\n-    }\n-  }\n-  return NULL;\n-}\n-#endif \/\/ PRODUCT\n-\n@@ -1017,38 +983,0 @@\n-void log_deprecated_flag(const char* name, bool on, AliasedLoggingFlag alf) {\n-  LogTagType tagSet[] = {alf.tag0, alf.tag1, alf.tag2, alf.tag3, alf.tag4, alf.tag5};\n-  \/\/ Set tagset string buffer at max size of 256, large enough for any alias tagset\n-  const int max_tagset_size = 256;\n-  int max_tagset_len = max_tagset_size - 1;\n-  char tagset_buffer[max_tagset_size];\n-  tagset_buffer[0] = '\\0';\n-\n-  \/\/ Write tag-set for aliased logging option, in string list form\n-  int max_tags = sizeof(tagSet)\/sizeof(tagSet[0]);\n-  for (int i = 0; i < max_tags && tagSet[i] != LogTag::__NO_TAG; i++) {\n-    if (i > 0) {\n-      strncat(tagset_buffer, \"+\", max_tagset_len - strlen(tagset_buffer));\n-    }\n-    strncat(tagset_buffer, LogTag::name(tagSet[i]), max_tagset_len - strlen(tagset_buffer));\n-  }\n-  if (!alf.exactMatch) {\n-      strncat(tagset_buffer, \"*\", max_tagset_len - strlen(tagset_buffer));\n-  }\n-  log_warning(arguments)(\"-XX:%s%s is deprecated. Will use -Xlog:%s=%s instead.\",\n-                         (on) ? \"+\" : \"-\",\n-                         name,\n-                         tagset_buffer,\n-                         (on) ? LogLevel::name(alf.level) : \"off\");\n-}\n-\n-AliasedLoggingFlag Arguments::catch_logging_aliases(const char* name, bool on){\n-  for (size_t i = 0; aliased_logging_flags[i].alias_name != NULL; i++) {\n-    const AliasedLoggingFlag& alf = aliased_logging_flags[i];\n-    if (strcmp(alf.alias_name, name) == 0) {\n-      log_deprecated_flag(name, on, alf);\n-      return alf;\n-    }\n-  }\n-  AliasedLoggingFlag a = {NULL, LogLevel::Off, false, LOG_TAGS(_NO_TAG)};\n-  return a;\n-}\n-\n@@ -1066,5 +994,0 @@\n-    AliasedLoggingFlag alf = catch_logging_aliases(name, false);\n-    if (alf.alias_name != NULL){\n-      LogConfiguration::configure_stdout(LogLevel::Off, alf.exactMatch, alf.tag0, alf.tag1, alf.tag2, alf.tag3, alf.tag4, alf.tag5);\n-      return true;\n-    }\n@@ -1079,5 +1002,0 @@\n-    AliasedLoggingFlag alf = catch_logging_aliases(name, true);\n-    if (alf.alias_name != NULL){\n-      LogConfiguration::configure_stdout(alf.level, alf.exactMatch, alf.tag0, alf.tag1, alf.tag2, alf.tag3, alf.tag4, alf.tag5);\n-      return true;\n-    }\n@@ -1097,5 +1015,0 @@\n-    AliasedLoggingFlag alf = catch_logging_aliases(name, true);\n-    if (alf.alias_name != NULL) {\n-      LogConfiguration::configure_stdout(alf.level, alf.exactMatch, alf.tag0, alf.tag1, alf.tag2, alf.tag3, alf.tag4, alf.tag5);\n-      return true;\n-    }\n@@ -1300,11 +1213,0 @@\n-#ifndef PRODUCT\n-    else {\n-      const char* replacement;\n-      if ((replacement = removed_develop_logging_flag_name(stripped_argname)) != NULL){\n-        log_warning(arguments)(\"%s has been removed. Please use %s instead.\",\n-                               stripped_argname,\n-                               replacement);\n-        return false;\n-      }\n-    }\n-#endif \/\/PRODUCT\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":16,"deletions":114,"binary":false,"changes":130,"status":"modified"},{"patch":"@@ -229,13 +229,0 @@\n-\/\/ Most logging functions require 5 tags. Some of them may be _NO_TAG.\n-typedef struct {\n-  const char* alias_name;\n-  LogLevelType level;\n-  bool exactMatch;\n-  LogTagType tag0;\n-  LogTagType tag1;\n-  LogTagType tag2;\n-  LogTagType tag3;\n-  LogTagType tag4;\n-  LogTagType tag5;\n-} AliasedLoggingFlag;\n-\n@@ -463,4 +450,0 @@\n-#ifndef PRODUCT\n-  static const char* removed_develop_logging_flag_name(const char* name);\n-#endif \/\/ PRODUCT\n-\n@@ -480,1 +463,0 @@\n-  static AliasedLoggingFlag catch_logging_aliases(const char* name, bool on);\n","filename":"src\/hotspot\/share\/runtime\/arguments.hpp","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -958,3 +958,0 @@\n-  product(bool, TraceJVMTIObjectTagging, false, DIAGNOSTIC,                 \\\n-          \"Trace JVMTI object tagging calls\")                               \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @summary TraceExceptions output should have the exception message - useful for ClassNotFoundExceptions especially\n+ * @summary -Xlog:exceptions=info output should have the exception message - useful for ClassNotFoundExceptions especially\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/TraceExceptionsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -88,10 +88,0 @@\n-\n-      \/\/  Make sure aliased TraceClassPaths still works\n-      TestCommon.run(\n-          \"-XX:+TraceClassPaths\",\n-          \"-cp\", cp,\n-          \"CpAttr1\")\n-        .assertNormalExit(output -> {\n-            output.shouldMatch(\"checking shared classpath entry: .*cpattr2.jar\");\n-            output.shouldMatch(\"checking shared classpath entry: .*cpattr3.jar\");\n-          });\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/ClassPathAttr.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,1 @@\n-                        \"-XX:+TraceClassPaths\", \"-XX:+IgnoreEmptyClassPaths\");\n+                        \"-Xlog:class+path=info\", \"-XX:+IgnoreEmptyClassPaths\");\n@@ -55,1 +55,1 @@\n-        \"-XX:+TraceClassPaths\",\n+        \"-Xlog:class+path=info\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/IgnoreEmptyClassPaths.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-                \"-XX:+PrintSharedSpaces\",\n+                \"-Xlog:cds=info\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/javaldr\/GCDuringDump.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -115,1 +115,1 @@\n-                \"-XX:+PrintSharedSpaces\",\n+                \"-Xlog:cds=info\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/javaldr\/GCSharedStringsDuringDump.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-                \"-XX:+PrintSharedSpaces\",\n+                \"-Xlog:cds=info\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/javaldr\/HumongousDuringDump.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -192,1 +192,1 @@\n-            \"-XX:+TraceClassLoading\",\n+            \"-Xlog:class+load=info\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/classpathtests\/BootAppendTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,6 +57,0 @@\n-        pb = ProcessTools.createJavaProcessBuilder(\"-XX:+UseBiasedLocking\",\n-                                                   \"-XX:+TraceBiasedLocking\",\n-                                                   \"-XX:BiasedLockingStartupDelay=0\",\n-                                                   InnerClass.class.getName());\n-        analyzeOutputOn(pb);\n-\n@@ -68,6 +62,0 @@\n-\n-        pb = ProcessTools.createJavaProcessBuilder(\"-XX:+UseBiasedLocking\",\n-                                                   \"-XX:-TraceBiasedLocking\",\n-                                                   \"-XX:BiasedLockingStartupDelay=0\",\n-                                                   InnerClass.class.getName());\n-        analyzeOutputOff(pb);\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/BiasedLockingTest.java","additions":1,"deletions":13,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -93,8 +93,0 @@\n-        \/\/  -XX:+TraceClassUnloading\n-        pb = exec(\"-XX:+TraceClassUnloading\");\n-        checkFor(\"[class,unload]\", \"unloading class\");\n-\n-        \/\/  -XX:-TraceClassUnloading\n-        pb = exec(\"-XX:-TraceClassUnloading\");\n-        checkAbsent(\"[class,unload]\");\n-\n@@ -113,8 +105,0 @@\n-        \/\/  -XX:+TraceClassLoading\n-        pb = exec(\"-XX:+TraceClassLoading\");\n-        checkFor(\"[class,load]\", \"java.lang.Object\", \"source:\");\n-\n-        \/\/  -XX:-TraceClassLoading\n-        pb = exec(\"-XX:-TraceClassLoading\");\n-        checkAbsent(\"[class,load]\");\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/ClassLoadUnloadTest.java","additions":1,"deletions":17,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,14 +74,0 @@\n-\n-        \/\/ (3) TraceClassResolution should turn on.\n-        pb = ProcessTools.createJavaProcessBuilder(\"-XX:+TraceClassResolution\",\n-                                                   ClassResolutionTestMain.class.getName());\n-        o = new OutputAnalyzer(pb.start());\n-        o.shouldContain(\"[class,resolve] ClassResolutionTest$ClassResolutionTestMain$Thing1Handler ClassResolutionTest$ClassResolutionTestMain$Thing1\");\n-\n-        \/\/ (4) TraceClassResolution should turn off.\n-        pb = ProcessTools.createJavaProcessBuilder(\"-Xlog:class+resolve=debug\",\n-                                                   \"-XX:-TraceClassResolution\",\n-                                                   ClassResolutionTestMain.class.getName());\n-        o = new OutputAnalyzer(pb.start());\n-        o.shouldNotContain(\"[class,resolve]\");\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/ClassResolutionTest.java","additions":1,"deletions":15,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,4 +63,0 @@\n-        pb = ProcessTools.createJavaProcessBuilder(\"-XX:+TraceExceptions\",\n-                                                   InternalClass.class.getName());\n-        analyzeOutputOn(pb);\n-\n@@ -71,4 +67,0 @@\n-        pb = ProcessTools.createJavaProcessBuilder(\"-XX:-TraceExceptions\",\n-                                                   InternalClass.class.getName());\n-        analyzeOutputOff(pb);\n-\n@@ -76,1 +68,1 @@\n-        updateEnvironment(pb, \"_JAVA_OPTIONS\", \"-XX:+TraceExceptions\");\n+        updateEnvironment(pb, \"_JAVA_OPTIONS\", \"-Xlog:exceptions=info\");\n@@ -80,1 +72,1 @@\n-        updateEnvironment(pb, \"JAVA_TOOL_OPTIONS\", \"-Xlog:exceptions=info -XX:-TraceExceptions\");\n+        updateEnvironment(pb, \"JAVA_TOOL_OPTIONS\", \"-Xlog:exceptions=info -Xlog:exceptions=off\");\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/ExceptionsTest.java","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n--XX:+TraceExceptions\n+-Xlog:exceptions=info\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/ExceptionsTest_options_file","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,6 +66,0 @@\n-        \/\/ -XX:+TraceLoaderConstraints\n-        pb = exec(\"-XX:+TraceLoaderConstraints\");\n-        out = new OutputAnalyzer(pb.start());\n-        out.getOutput();\n-        out.shouldContain(\"[class,loader,constraints] adding new constraint for name: java\/lang\/Class, loader[0]: 'app', loader[1]: 'bootstrap'\");\n-\n@@ -77,5 +71,0 @@\n-        \/\/ -XX:-TraceLoaderConstraints\n-        pb = exec(\"-XX:-TraceLoaderConstraints\");\n-        out = new OutputAnalyzer(pb.start());\n-        out.shouldNotContain(\"[class,loaderconstraints]\");\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/LoaderConstraintsTest.java","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,4 +57,0 @@\n-        pb = ProcessTools.createJavaProcessBuilder(\"-XX:+TraceMonitorInflation\",\n-                                                   InnerClass.class.getName());\n-        analyzeOutputOn(pb);\n-\n@@ -64,4 +60,0 @@\n-\n-        pb = ProcessTools.createJavaProcessBuilder(\"-XX:-TraceMonitorInflation\",\n-                                                   InnerClass.class.getName());\n-        analyzeOutputOff(pb);\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/MonitorInflationTest.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1,63 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-\/*\n- * @test RemovedDevelopFlagsTest\n- * @bug 8146632\n- * @modules java.base\/jdk.internal.misc\n- * @requires vm.debug\n- * @library \/test\/lib\n- * @run driver RemovedDevelopFlagsTest\n- *\/\n-import jdk.test.lib.process.ProcessTools;\n-import jdk.test.lib.process.OutputAnalyzer;\n-\n-public class RemovedDevelopFlagsTest {\n-    public static ProcessBuilder pb;\n-\n-    public static class RemovedDevelopFlagsTestMain {\n-        public static void main(String... args) {\n-            System.out.print(\"Hello!\");\n-        }\n-    }\n-\n-    public static void exec(String flag, String value) throws Exception {\n-        pb = ProcessTools.createJavaProcessBuilder(\"-XX:+\"+flag, RemovedDevelopFlagsTestMain.class.getName());\n-        OutputAnalyzer o = new OutputAnalyzer(pb.start());\n-        o.shouldContain(flag+\" has been removed. Please use \"+value+\" instead.\");\n-        o.shouldHaveExitValue(1);\n-    }\n-\n-    public static void main(String... args) throws Exception {\n-        exec(\"TraceClassInitialization\", \"-Xlog:class+init\");\n-        exec(\"TraceClassLoaderData\", \"-Xlog:class+loader+data\");\n-        exec(\"TraceDefaultMethods\", \"-Xlog:defaultmethods=debug\");\n-        exec(\"TraceItables\", \"-Xlog:itables=debug\");\n-        exec(\"TraceSafepoint\", \"-Xlog:safepoint=debug\");\n-        exec(\"TraceStartupTime\", \"-Xlog:startuptime\");\n-        exec(\"TraceVMOperation\", \"-Xlog:vmoperation=debug\");\n-        exec(\"PrintVtables\", \"-Xlog:vtables=debug\");\n-        exec(\"VerboseVerification\", \"-Xlog:verification\");\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/RemovedDevelopFlagsTest.java","additions":0,"deletions":63,"binary":false,"changes":63,"status":"deleted"},{"patch":"@@ -58,4 +58,0 @@\n-        pb = ProcessTools.createJavaProcessBuilder(\"-XX:+TraceSafepointCleanupTime\",\n-                                                   InnerClass.class.getName());\n-        analyzeOutputOn(pb);\n-\n@@ -65,4 +61,0 @@\n-\n-        pb = ProcessTools.createJavaProcessBuilder(\"-XX:-TraceSafepointCleanupTime\",\n-                                                   InnerClass.class.getName());\n-        analyzeOutputOff(pb);\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/SafepointCleanupTest.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,1 +64,1 @@\n-            \"-XX:+TraceClassPaths\",\n+            \"-Xlog:class+path=info\",\n","filename":"test\/jdk\/com\/sun\/jdi\/cds\/CDSJDITest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}