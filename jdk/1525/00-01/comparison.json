{"files":[{"patch":"@@ -560,0 +560,13 @@\n+  { \"PrintSharedSpaces\",             JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n+  { \"TraceBiasedLocking\",            JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n+  { \"TraceClassLoadingPreorder\",     JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n+  { \"TraceClassPaths\",               JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n+  { \"TraceClassResolution\",          JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n+  { \"TraceInvokeDynamic\",            JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n+  { \"TraceLoaderConstraints\",        JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n+  { \"TraceMethodHandles\",            JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n+  { \"TraceMonitorInflation\",         JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n+  { \"TraceSafepointCleanupTime\",     JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n+  { \"TraceJVMTIObjectTagging\",       JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n+  { \"TraceRedefineClasses\",          JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n+  { \"PrintJNIResolving\",            JDK_Version::undefined(), JDK_Version::jdk(16), JDK_Version::jdk(17) },\n@@ -587,8 +600,1 @@\n-\/\/ NOTE: A compatibility request will be necessary for each alias to be removed.\n-\/\/ Use this to deprecate old tracing flags and provide logging aliases.  Sample entry:\n-\/\/     { \"TraceClassPaths\",           LogLevel::Info,  true,  LOG_TAGS(class, path) },\n-static AliasedLoggingFlag const aliased_logging_flags[] = {\n-  { NULL,                        LogLevel::Off,   false, LOG_TAGS(_NO_TAG) }\n-};\n-\n-\/\/ Use this to obsolete old tracing flags and suggest logging alternative.\n+\/\/ Use this for popular obsolete tracing flags to suggest logging alternatives.\n@@ -596,2 +602,0 @@\n-  { \"PrintSharedSpaces\",         \"-Xlog:cds=\",                 \"info\",  \"16.0\" },\n-  { \"TraceBiasedLocking\",        \"-Xlog:biasedlocking=\",       \"info\",  \"16.0\" },\n@@ -599,3 +603,0 @@\n-  { \"TraceClassLoadingPreorder\", \"-Xlog:class+preorder=\",      \"debug\", \"16.0\" },\n-  { \"TraceClassPaths\",           \"-Xlog:class+path=\",          \"info\",  \"16.0\" },\n-  { \"TraceClassResolution\",      \"-Xlog:class+resolve=\",       \"debug\", \"16.0\" },\n@@ -604,8 +605,0 @@\n-  { \"TraceInvokeDynamic\",        \"-Xlog:methodhandles+indy=\",  \"debug\", \"16.0\" },\n-  { \"TraceLoaderConstraints\",    \"-Xlog:loader+constraints=\",  \"info\",  \"16.0\" },\n-  { \"TraceMethodHandles\",        \"-Xlog:methodhandles=\",       \"info\",  \"16.0\" },\n-  { \"TraceMonitorInflation\",     \"-Xlog:monitorinflation=\",    \"trace\", \"16.0\" },\n-  { \"TraceSafepointCleanupTime\", \"-Xlog:safepoint+cleanup=\",   \"info\",  \"16.0\" },\n-  { \"TraceJVMTIObjectTagging\",   \"-Xlog:jvmti+objecttagging=\", \"debug\", \"16.0\" },\n-  { \"TraceRedefineClasses\",      \"-Xlog:redefine+class=\",      \"info\",  \"16.0\" },\n-  { \"PrintJNIResolving\",         \"-Xlog:jni+resolve=\",         \"debug\", \"16.0\" },\n@@ -615,17 +608,0 @@\n-#ifndef PRODUCT\n-\/\/ These options are removed in jdk9. Remove this code for jdk10.\n-static AliasedFlag const removed_develop_logging_flags[] = {\n-  { \"TraceClassInitialization\",   \"-Xlog:class+init\" },\n-  { \"TraceClassLoaderData\",       \"-Xlog:class+loader+data\" },\n-  { \"TraceDefaultMethods\",        \"-Xlog:defaultmethods=debug\" },\n-  { \"TraceItables\",               \"-Xlog:itables=debug\" },\n-  { \"TraceMonitorMismatch\",       \"-Xlog:monitormismatch=info\" },\n-  { \"TraceSafepoint\",             \"-Xlog:safepoint=debug\" },\n-  { \"TraceStartupTime\",           \"-Xlog:startuptime\" },\n-  { \"TraceVMOperation\",           \"-Xlog:vmoperation=debug\" },\n-  { \"PrintVtables\",               \"-Xlog:vtables=debug\" },\n-  { \"VerboseVerification\",        \"-Xlog:verification\" },\n-  { NULL, NULL }\n-};\n-#endif \/\/PRODUCT\n-\n@@ -695,12 +671,0 @@\n-#ifndef PRODUCT\n-const char* Arguments::removed_develop_logging_flag_name(const char* name){\n-  for (size_t i = 0; removed_develop_logging_flags[i].alias_name != NULL; i++) {\n-    const AliasedFlag& flag = removed_develop_logging_flags[i];\n-    if (strcmp(flag.alias_name, name) == 0) {\n-      return flag.real_name;\n-    }\n-  }\n-  return NULL;\n-}\n-#endif \/\/ PRODUCT\n-\n@@ -1034,38 +998,0 @@\n-void log_deprecated_flag(const char* name, bool on, AliasedLoggingFlag alf) {\n-  LogTagType tagSet[] = {alf.tag0, alf.tag1, alf.tag2, alf.tag3, alf.tag4, alf.tag5};\n-  \/\/ Set tagset string buffer at max size of 256, large enough for any alias tagset\n-  const int max_tagset_size = 256;\n-  int max_tagset_len = max_tagset_size - 1;\n-  char tagset_buffer[max_tagset_size];\n-  tagset_buffer[0] = '\\0';\n-\n-  \/\/ Write tag-set for aliased logging option, in string list form\n-  int max_tags = sizeof(tagSet)\/sizeof(tagSet[0]);\n-  for (int i = 0; i < max_tags && tagSet[i] != LogTag::__NO_TAG; i++) {\n-    if (i > 0) {\n-      strncat(tagset_buffer, \"+\", max_tagset_len - strlen(tagset_buffer));\n-    }\n-    strncat(tagset_buffer, LogTag::name(tagSet[i]), max_tagset_len - strlen(tagset_buffer));\n-  }\n-  if (!alf.exactMatch) {\n-      strncat(tagset_buffer, \"*\", max_tagset_len - strlen(tagset_buffer));\n-  }\n-  log_warning(arguments)(\"-XX:%s%s is deprecated. Will use -Xlog:%s=%s instead.\",\n-                         (on) ? \"+\" : \"-\",\n-                         name,\n-                         tagset_buffer,\n-                         (on) ? LogLevel::name(alf.level) : \"off\");\n-}\n-\n-AliasedLoggingFlag Arguments::catch_logging_aliases(const char* name, bool on){\n-  for (size_t i = 0; aliased_logging_flags[i].alias_name != NULL; i++) {\n-    const AliasedLoggingFlag& alf = aliased_logging_flags[i];\n-    if (strcmp(alf.alias_name, name) == 0) {\n-      log_deprecated_flag(name, on, alf);\n-      return alf;\n-    }\n-  }\n-  AliasedLoggingFlag a = {NULL, LogLevel::Off, false, LOG_TAGS(_NO_TAG)};\n-  return a;\n-}\n-\n@@ -1083,5 +1009,0 @@\n-    AliasedLoggingFlag alf = catch_logging_aliases(name, false);\n-    if (alf.alias_name != NULL){\n-      LogConfiguration::configure_stdout(LogLevel::Off, alf.exactMatch, alf.tag0, alf.tag1, alf.tag2, alf.tag3, alf.tag4, alf.tag5);\n-      return true;\n-    }\n@@ -1096,5 +1017,0 @@\n-    AliasedLoggingFlag alf = catch_logging_aliases(name, true);\n-    if (alf.alias_name != NULL){\n-      LogConfiguration::configure_stdout(alf.level, alf.exactMatch, alf.tag0, alf.tag1, alf.tag2, alf.tag3, alf.tag4, alf.tag5);\n-      return true;\n-    }\n@@ -1114,5 +1030,0 @@\n-    AliasedLoggingFlag alf = catch_logging_aliases(name, true);\n-    if (alf.alias_name != NULL) {\n-      LogConfiguration::configure_stdout(alf.level, alf.exactMatch, alf.tag0, alf.tag1, alf.tag2, alf.tag3, alf.tag4, alf.tag5);\n-      return true;\n-    }\n@@ -1326,9 +1237,0 @@\n-#ifndef PRODUCT\n-    const char* replacement;\n-    if ((replacement = removed_develop_logging_flag_name(stripped_argname)) != NULL) {\n-      log_warning(arguments)(\"%s has been removed. Please use %s instead.\",\n-                             stripped_argname,\n-                             replacement);\n-      return false;\n-    }\n-#endif \/\/PRODUCT\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":14,"deletions":112,"binary":false,"changes":126,"status":"modified"},{"patch":"@@ -229,13 +229,0 @@\n-\/\/ Most logging functions require 5 tags. Some of them may be _NO_TAG.\n-typedef struct {\n-  const char* alias_name;\n-  LogLevelType level;\n-  bool exactMatch;\n-  LogTagType tag0;\n-  LogTagType tag1;\n-  LogTagType tag2;\n-  LogTagType tag3;\n-  LogTagType tag4;\n-  LogTagType tag5;\n-} AliasedLoggingFlag;\n-\n@@ -470,4 +457,0 @@\n-#ifndef PRODUCT\n-  static const char* removed_develop_logging_flag_name(const char* name);\n-#endif \/\/ PRODUCT\n-\n@@ -489,1 +472,0 @@\n-  static AliasedLoggingFlag catch_logging_aliases(const char* name, bool on);\n","filename":"src\/hotspot\/share\/runtime\/arguments.hpp","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1,63 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-\/*\n- * @test RemovedDevelopFlagsTest\n- * @bug 8146632\n- * @modules java.base\/jdk.internal.misc\n- * @requires vm.debug\n- * @library \/test\/lib\n- * @run driver RemovedDevelopFlagsTest\n- *\/\n-import jdk.test.lib.process.ProcessTools;\n-import jdk.test.lib.process.OutputAnalyzer;\n-\n-public class RemovedDevelopFlagsTest {\n-    public static ProcessBuilder pb;\n-\n-    public static class RemovedDevelopFlagsTestMain {\n-        public static void main(String... args) {\n-            System.out.print(\"Hello!\");\n-        }\n-    }\n-\n-    public static void exec(String flag, String value) throws Exception {\n-        pb = ProcessTools.createJavaProcessBuilder(\"-XX:+\"+flag, RemovedDevelopFlagsTestMain.class.getName());\n-        OutputAnalyzer o = new OutputAnalyzer(pb.start());\n-        o.shouldContain(flag+\" has been removed. Please use \"+value+\" instead.\");\n-        o.shouldHaveExitValue(1);\n-    }\n-\n-    public static void main(String... args) throws Exception {\n-        exec(\"TraceClassInitialization\", \"-Xlog:class+init\");\n-        exec(\"TraceClassLoaderData\", \"-Xlog:class+loader+data\");\n-        exec(\"TraceDefaultMethods\", \"-Xlog:defaultmethods=debug\");\n-        exec(\"TraceItables\", \"-Xlog:itables=debug\");\n-        exec(\"TraceSafepoint\", \"-Xlog:safepoint=debug\");\n-        exec(\"TraceStartupTime\", \"-Xlog:startuptime\");\n-        exec(\"TraceVMOperation\", \"-Xlog:vmoperation=debug\");\n-        exec(\"PrintVtables\", \"-Xlog:vtables=debug\");\n-        exec(\"VerboseVerification\", \"-Xlog:verification\");\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/RemovedDevelopFlagsTest.java","additions":0,"deletions":63,"binary":false,"changes":63,"status":"deleted"}]}