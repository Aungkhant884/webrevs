{"files":[{"patch":"@@ -135,2 +135,0 @@\n-  \/\/NOT_PRODUCT({ FlagSetting fs(TraceMethodHandles, true); trace_method_handle(_masm, \"LZMH\"); });\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/methodHandles_aarch64.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -171,2 +171,0 @@\n-  \/\/NOT_PRODUCT({ FlagSetting fs(TraceMethodHandles, true); trace_method_handle(_masm, \"LZMH\"); });\n-\n","filename":"src\/hotspot\/cpu\/x86\/methodHandles_x86.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1013,1 +1013,1 @@\n-  void print_name(outputStream* st = tty); \/\/ prints as \"virtual void foo(int)\"; exposed for TraceRedefineClasses\n+  void print_name(outputStream* st = tty); \/\/ prints as \"virtual void foo(int)\"; exposed for -Xlog:redefine+class\n","filename":"src\/hotspot\/share\/oops\/method.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -588,0 +588,2 @@\n+\/\/ Use this to deprecate old tracing flags and provide logging aliases.  Sample entry:\n+\/\/     { \"TraceClassPaths\",           LogLevel::Info,  true,  LOG_TAGS(class, path) },\n@@ -589,16 +591,0 @@\n-  { \"PrintSharedSpaces\",         LogLevel::Info,  true,  LOG_TAGS(cds) },\n-  { \"TraceBiasedLocking\",        LogLevel::Info,  true,  LOG_TAGS(biasedlocking) },\n-  { \"TraceClassLoading\",         LogLevel::Info,  true,  LOG_TAGS(class, load) },\n-  { \"TraceClassLoadingPreorder\", LogLevel::Debug, true,  LOG_TAGS(class, preorder) },\n-  { \"TraceClassPaths\",           LogLevel::Info,  true,  LOG_TAGS(class, path) },\n-  { \"TraceClassResolution\",      LogLevel::Debug, true,  LOG_TAGS(class, resolve) },\n-  { \"TraceClassUnloading\",       LogLevel::Info,  true,  LOG_TAGS(class, unload) },\n-  { \"TraceExceptions\",           LogLevel::Info,  true,  LOG_TAGS(exceptions) },\n-  { \"TraceInvokeDynamic\",        LogLevel::Debug, true,  LOG_TAGS(methodhandles, indy) },\n-  { \"TraceLoaderConstraints\",    LogLevel::Info,  true,  LOG_TAGS(class, loader, constraints) },\n-  { \"TraceMethodHandles\",        LogLevel::Info,  true,  LOG_TAGS(methodhandles) },\n-  { \"TraceMonitorInflation\",     LogLevel::Trace, true,  LOG_TAGS(monitorinflation) },\n-  { \"TraceSafepointCleanupTime\", LogLevel::Info,  true,  LOG_TAGS(safepoint, cleanup) },\n-  { \"TraceJVMTIObjectTagging\",   LogLevel::Debug, true,  LOG_TAGS(jvmti, objecttagging) },\n-  { \"TraceRedefineClasses\",      LogLevel::Info,  false, LOG_TAGS(redefine, class) },\n-  { \"PrintJNIResolving\",         LogLevel::Debug, true,  LOG_TAGS(jni, resolve) },\n@@ -608,0 +594,21 @@\n+\/\/ Use this to obsolete old tracing flags and suggest logging alternative.\n+static AliasedObsoleteLoggingFlag const removed_product_logging_flags[] = {\n+  { \"PrintSharedSpaces\",         \"-Xlog:cds=\",                 \"info\",  \"16.0\" },\n+  { \"TraceBiasedLocking\",        \"-Xlog:biasedlocking=\",       \"info\",  \"16.0\" },\n+  { \"TraceClassLoading\",         \"-Xlog:class+load=\",          \"info\",  \"16.0\" },\n+  { \"TraceClassLoadingPreorder\", \"-Xlog:class+preorder=\",      \"debug\", \"16.0\" },\n+  { \"TraceClassPaths\",           \"-Xlog:class+path=\",          \"info\",  \"16.0\" },\n+  { \"TraceClassResolution\",      \"-Xlog:class+resolve=\",       \"debug\", \"16.0\" },\n+  { \"TraceClassUnloading\",       \"-Xlog:class+unload=\",        \"info\",  \"16.0\" },\n+  { \"TraceExceptions\",           \"-Xlog:exceptions=\",          \"info\",  \"16.0\" },\n+  { \"TraceInvokeDynamic\",        \"-Xlog:methodhandles+indy=\",  \"debug\", \"16.0\" },\n+  { \"TraceLoaderConstraints\",    \"-Xlog:loader+constraints=\",  \"info\",  \"16.0\" },\n+  { \"TraceMethodHandles\",        \"-Xlog:methodhandles=\",       \"info\",  \"16.0\" },\n+  { \"TraceMonitorInflation\",     \"-Xlog:monitorinflation=\",    \"trace\", \"16.0\" },\n+  { \"TraceSafepointCleanupTime\", \"-Xlog:safepoint+cleanup=\",   \"info\",  \"16.0\" },\n+  { \"TraceJVMTIObjectTagging\",   \"-Xlog:jvmti+objecttagging=\", \"debug\", \"16.0\" },\n+  { \"TraceRedefineClasses\",      \"-Xlog:redefine+class=\",      \"info\",  \"16.0\" },\n+  { \"PrintJNIResolving\",         \"-Xlog:jni+resolve=\",         \"debug\", \"16.0\" },\n+  { NULL, NULL, NULL, NULL }\n+};\n+\n@@ -700,0 +707,10 @@\n+const AliasedObsoleteLoggingFlag* Arguments::removed_product_logging_flag_name(const char* name){\n+  for (size_t i = 0; removed_product_logging_flags[i].obs_name != NULL; i++) {\n+    const AliasedObsoleteLoggingFlag* flag = &removed_product_logging_flags[i];\n+    if (strcmp(flag->obs_name, name) == 0) {\n+      return flag;\n+    }\n+  }\n+  return NULL;\n+}\n+\n@@ -1300,0 +1317,9 @@\n+    const AliasedObsoleteLoggingFlag* obs_replacement;\n+    if (has_plus_minus && (obs_replacement = removed_product_logging_flag_name(stripped_argname)) != NULL) {\n+      warning(\"Ignoring option %s; support was removed in %s.  Please use %s%s instead.\",\n+              stripped_argname,\n+              obs_replacement->version,\n+              obs_replacement->log_name,\n+              *arg == '+' ? obs_replacement->tag_name : \"off\");\n+      return true;\n+    }\n@@ -1301,8 +1327,6 @@\n-    else {\n-      const char* replacement;\n-      if ((replacement = removed_develop_logging_flag_name(stripped_argname)) != NULL){\n-        log_warning(arguments)(\"%s has been removed. Please use %s instead.\",\n-                               stripped_argname,\n-                               replacement);\n-        return false;\n-      }\n+    const char* replacement;\n+    if ((replacement = removed_develop_logging_flag_name(stripped_argname)) != NULL) {\n+      log_warning(arguments)(\"%s has been removed. Please use %s instead.\",\n+                             stripped_argname,\n+                             replacement);\n+      return false;\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":48,"deletions":24,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -242,0 +242,7 @@\n+typedef struct {\n+  const char* obs_name;\n+  const char* log_name;\n+  const char* tag_name;\n+  const char* version;\n+} AliasedObsoleteLoggingFlag;\n+\n@@ -467,0 +474,2 @@\n+  static const AliasedObsoleteLoggingFlag* removed_product_logging_flag_name(const char* name);\n+\n","filename":"src\/hotspot\/share\/runtime\/arguments.hpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -958,3 +958,0 @@\n-  product(bool, TraceJVMTIObjectTagging, false, DIAGNOSTIC,                 \\\n-          \"Trace JVMTI object tagging calls\")                               \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @summary TraceExceptions output should have the exception message - useful for ClassNotFoundExceptions especially\n+ * @summary -Xlog:exceptions=info output should have the exception message - useful for ClassNotFoundExceptions especially\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/TraceExceptionsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -88,10 +88,0 @@\n-\n-      \/\/  Make sure aliased TraceClassPaths still works\n-      TestCommon.run(\n-          \"-XX:+TraceClassPaths\",\n-          \"-cp\", cp,\n-          \"CpAttr1\")\n-        .assertNormalExit(output -> {\n-            output.shouldMatch(\"checking shared classpath entry: .*cpattr2.jar\");\n-            output.shouldMatch(\"checking shared classpath entry: .*cpattr3.jar\");\n-          });\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/ClassPathAttr.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,1 @@\n-                        \"-XX:+TraceClassPaths\", \"-XX:+IgnoreEmptyClassPaths\");\n+                        \"-Xlog:class+path=info\", \"-XX:+IgnoreEmptyClassPaths\");\n@@ -55,1 +55,1 @@\n-        \"-XX:+TraceClassPaths\",\n+        \"-Xlog:class+path=info\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/IgnoreEmptyClassPaths.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-                \"-XX:+PrintSharedSpaces\",\n+                \"-Xlog:cds=info\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/javaldr\/GCDuringDump.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -115,1 +115,1 @@\n-                \"-XX:+PrintSharedSpaces\",\n+                \"-Xlog:cds=info\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/javaldr\/GCSharedStringsDuringDump.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-                \"-XX:+PrintSharedSpaces\",\n+                \"-Xlog:cds=info\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/javaldr\/HumongousDuringDump.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -192,1 +192,1 @@\n-            \"-XX:+TraceClassLoading\",\n+            \"-Xlog:class+load=info\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jigsaw\/classpathtests\/BootAppendTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,6 +57,0 @@\n-        pb = ProcessTools.createJavaProcessBuilder(\"-XX:+UseBiasedLocking\",\n-                                                   \"-XX:+TraceBiasedLocking\",\n-                                                   \"-XX:BiasedLockingStartupDelay=0\",\n-                                                   InnerClass.class.getName());\n-        analyzeOutputOn(pb);\n-\n@@ -68,6 +62,0 @@\n-\n-        pb = ProcessTools.createJavaProcessBuilder(\"-XX:+UseBiasedLocking\",\n-                                                   \"-XX:-TraceBiasedLocking\",\n-                                                   \"-XX:BiasedLockingStartupDelay=0\",\n-                                                   InnerClass.class.getName());\n-        analyzeOutputOff(pb);\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/BiasedLockingTest.java","additions":1,"deletions":13,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -93,8 +93,0 @@\n-        \/\/  -XX:+TraceClassUnloading\n-        pb = exec(\"-XX:+TraceClassUnloading\");\n-        checkFor(\"[class,unload]\", \"unloading class\");\n-\n-        \/\/  -XX:-TraceClassUnloading\n-        pb = exec(\"-XX:-TraceClassUnloading\");\n-        checkAbsent(\"[class,unload]\");\n-\n@@ -113,8 +105,0 @@\n-        \/\/  -XX:+TraceClassLoading\n-        pb = exec(\"-XX:+TraceClassLoading\");\n-        checkFor(\"[class,load]\", \"java.lang.Object\", \"source:\");\n-\n-        \/\/  -XX:-TraceClassLoading\n-        pb = exec(\"-XX:-TraceClassLoading\");\n-        checkAbsent(\"[class,load]\");\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/ClassLoadUnloadTest.java","additions":1,"deletions":17,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,14 +74,0 @@\n-\n-        \/\/ (3) TraceClassResolution should turn on.\n-        pb = ProcessTools.createJavaProcessBuilder(\"-XX:+TraceClassResolution\",\n-                                                   ClassResolutionTestMain.class.getName());\n-        o = new OutputAnalyzer(pb.start());\n-        o.shouldContain(\"[class,resolve] ClassResolutionTest$ClassResolutionTestMain$Thing1Handler ClassResolutionTest$ClassResolutionTestMain$Thing1\");\n-\n-        \/\/ (4) TraceClassResolution should turn off.\n-        pb = ProcessTools.createJavaProcessBuilder(\"-Xlog:class+resolve=debug\",\n-                                                   \"-XX:-TraceClassResolution\",\n-                                                   ClassResolutionTestMain.class.getName());\n-        o = new OutputAnalyzer(pb.start());\n-        o.shouldNotContain(\"[class,resolve]\");\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/ClassResolutionTest.java","additions":1,"deletions":15,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,4 +63,0 @@\n-        pb = ProcessTools.createJavaProcessBuilder(\"-XX:+TraceExceptions\",\n-                                                   InternalClass.class.getName());\n-        analyzeOutputOn(pb);\n-\n@@ -71,4 +67,0 @@\n-        pb = ProcessTools.createJavaProcessBuilder(\"-XX:-TraceExceptions\",\n-                                                   InternalClass.class.getName());\n-        analyzeOutputOff(pb);\n-\n@@ -76,1 +68,1 @@\n-        updateEnvironment(pb, \"_JAVA_OPTIONS\", \"-XX:+TraceExceptions\");\n+        updateEnvironment(pb, \"_JAVA_OPTIONS\", \"-Xlog:exceptions=info\");\n@@ -80,1 +72,1 @@\n-        updateEnvironment(pb, \"JAVA_TOOL_OPTIONS\", \"-Xlog:exceptions=info -XX:-TraceExceptions\");\n+        updateEnvironment(pb, \"JAVA_TOOL_OPTIONS\", \"-Xlog:exceptions=info -Xlog:exceptions=off\");\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/ExceptionsTest.java","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n--XX:+TraceExceptions\n+-Xlog:exceptions=info\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/ExceptionsTest_options_file","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,6 +66,0 @@\n-        \/\/ -XX:+TraceLoaderConstraints\n-        pb = exec(\"-XX:+TraceLoaderConstraints\");\n-        out = new OutputAnalyzer(pb.start());\n-        out.getOutput();\n-        out.shouldContain(\"[class,loader,constraints] adding new constraint for name: java\/lang\/Class, loader[0]: 'app', loader[1]: 'bootstrap'\");\n-\n@@ -77,5 +71,0 @@\n-        \/\/ -XX:-TraceLoaderConstraints\n-        pb = exec(\"-XX:-TraceLoaderConstraints\");\n-        out = new OutputAnalyzer(pb.start());\n-        out.shouldNotContain(\"[class,loaderconstraints]\");\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/LoaderConstraintsTest.java","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,4 +57,0 @@\n-        pb = ProcessTools.createJavaProcessBuilder(\"-XX:+TraceMonitorInflation\",\n-                                                   InnerClass.class.getName());\n-        analyzeOutputOn(pb);\n-\n@@ -64,4 +60,0 @@\n-\n-        pb = ProcessTools.createJavaProcessBuilder(\"-XX:-TraceMonitorInflation\",\n-                                                   InnerClass.class.getName());\n-        analyzeOutputOff(pb);\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/MonitorInflationTest.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -58,4 +58,0 @@\n-        pb = ProcessTools.createJavaProcessBuilder(\"-XX:+TraceSafepointCleanupTime\",\n-                                                   InnerClass.class.getName());\n-        analyzeOutputOn(pb);\n-\n@@ -65,4 +61,0 @@\n-\n-        pb = ProcessTools.createJavaProcessBuilder(\"-XX:-TraceSafepointCleanupTime\",\n-                                                   InnerClass.class.getName());\n-        analyzeOutputOff(pb);\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/SafepointCleanupTest.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,1 +64,1 @@\n-            \"-XX:+TraceClassPaths\",\n+            \"-Xlog:class+path=info\",\n","filename":"test\/jdk\/com\/sun\/jdi\/cds\/CDSJDITest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}