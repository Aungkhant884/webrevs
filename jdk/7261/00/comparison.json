{"files":[{"patch":"@@ -38,1 +38,2 @@\n-  template(None)                                  \\\n+  template(Halt)                                  \\\n+  template(SafepointALot)                         \\\n@@ -45,1 +46,0 @@\n-  template(ForceAsyncSafepoint)                   \\\n@@ -51,1 +51,0 @@\n-  template(DeoptimizeTheWorld)                    \\\n@@ -67,1 +66,0 @@\n-  template(HandshakeOneThread)                    \\\n@@ -69,1 +67,0 @@\n-  template(HandshakeFallback)                     \\\n@@ -92,1 +89,0 @@\n-  template(RotateGCLog)                           \\\n@@ -102,2 +98,0 @@\n-  template(ThreadSuspend)                         \\\n-  template(ThreadsSuspendJVMTI)                   \\\n@@ -105,1 +99,0 @@\n-  template(ScavengeMonitors)                      \\\n@@ -108,0 +101,1 @@\n+  template(GTestStopSafepoint)                    \\\n","filename":"src\/hotspot\/share\/runtime\/vmOperation.hpp","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -35,15 +35,6 @@\n-class VM_None: public VM_Operation {\n-  const char* _reason;\n- public:\n-  VM_None(const char* reason) : _reason(reason) {}\n-  const char* name() const { return _reason; }\n-  VMOp_Type type() const { return VMOp_None; }\n-  void doit() {};\n-};\n-\n-class VM_Cleanup: public VM_Operation {\n- public:\n-  VMOp_Type type() const { return VMOp_Cleanup; }\n-  void doit() {};\n-  virtual bool skip_thread_oop_barriers() const {\n-    \/\/ None of the safepoint cleanup tasks read oops in the Java threads.\n+class VM_EmptyOperation : public VM_Operation {\n+public:\n+  virtual void doit() final {}\n+  virtual bool skip_thread_oop_barriers() const final {\n+    \/\/ Neither the doit function nor the the safepoint\n+    \/\/ cleanup tasks read oops in the Java threads.\n@@ -54,3 +45,1 @@\n-class VM_ClearICs: public VM_Operation {\n- private:\n-  bool _preserve_static_stubs;\n+class VM_Halt: public VM_EmptyOperation {\n@@ -58,3 +47,1 @@\n-  VM_ClearICs(bool preserve_static_stubs) { _preserve_static_stubs = preserve_static_stubs; }\n-  void doit();\n-  VMOp_Type type() const { return VMOp_ClearICs; }\n+  VMOp_Type type() const { return VMOp_Halt; }\n@@ -63,2 +50,1 @@\n-\/\/ empty vm op, evaluated just to force a safepoint\n-class VM_ForceSafepoint: public VM_Operation {\n+class VM_SafepointALot: public VM_EmptyOperation {\n@@ -66,2 +52,1 @@\n-  void doit()         {}\n-  VMOp_Type type() const { return VMOp_ForceSafepoint; }\n+  VMOp_Type type() const { return VMOp_SafepointALot; }\n@@ -70,2 +55,1 @@\n-\/\/ empty vm op, when forcing a safepoint to suspend a thread\n-class VM_ThreadSuspend: public VM_ForceSafepoint {\n+class VM_Cleanup: public VM_EmptyOperation {\n@@ -73,1 +57,1 @@\n-  VMOp_Type type() const { return VMOp_ThreadSuspend; }\n+  VMOp_Type type() const { return VMOp_Cleanup; }\n@@ -76,2 +60,2 @@\n-\/\/ empty vm op, when forcing a safepoint to suspend threads from jvmti\n-class VM_ThreadsSuspendJVMTI: public VM_ForceSafepoint {\n+\/\/ empty vm op, evaluated just to force a safepoint\n+class VM_ForceSafepoint: public VM_EmptyOperation {\n@@ -79,1 +63,1 @@\n-  VMOp_Type type() const { return VMOp_ThreadsSuspendJVMTI; }\n+  VMOp_Type type() const { return VMOp_ForceSafepoint; }\n@@ -83,1 +67,1 @@\n-class VM_ICBufferFull: public VM_ForceSafepoint {\n+class VM_ICBufferFull: public VM_EmptyOperation {\n@@ -86,1 +70,9 @@\n-  virtual bool skip_thread_oop_barriers() const { return true; }\n+};\n+\n+class VM_ClearICs: public VM_Operation {\n+ private:\n+  bool _preserve_static_stubs;\n+ public:\n+  VM_ClearICs(bool preserve_static_stubs) { _preserve_static_stubs = preserve_static_stubs; }\n+  void doit();\n+  VMOp_Type type() const { return VMOp_ClearICs; }\n","filename":"src\/hotspot\/share\/runtime\/vmOperations.hpp","additions":25,"deletions":33,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -99,2 +99,2 @@\n-static VM_None    safepointALot_op(\"SafepointALot\");\n-static VM_Cleanup cleanup_op;\n+static VM_SafepointALot safepointALot_op;\n+static VM_Cleanup       cleanup_op;\n@@ -150,1 +150,1 @@\n-static VM_None halt_op(\"Halt\");\n+static VM_Halt halt_op;\n","filename":"src\/hotspot\/share\/runtime\/vmThread.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-class VM_StopSafepoint : public VM_Operation {\n+class VM_GTestStopSafepoint : public VM_Operation {\n@@ -56,1 +56,1 @@\n-  VM_StopSafepoint(Semaphore* running, Semaphore* wait_for) :\n+  VM_GTestStopSafepoint(Semaphore* running, Semaphore* wait_for) :\n@@ -58,1 +58,1 @@\n-  VMOp_Type type() const          { return VMOp_None; }\n+  VMOp_Type type() const          { return VMOp_GTestStopSafepoint; }\n@@ -70,1 +70,1 @@\n-    VM_StopSafepoint ss(&t->_ready, &t->_unblock);\n+    VM_GTestStopSafepoint ss(&t->_ready, &t->_unblock);\n","filename":"test\/hotspot\/gtest\/threadHelper.inline.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}