{"files":[{"patch":"@@ -1115,1 +1115,1 @@\n-  bool inc_counter  = UseCompiler || CountCompiledCalls || LogTouchedMethods;\n+  bool inc_counter  = UseCompiler || CountCompiledCalls;\n@@ -1539,1 +1539,1 @@\n-  bool inc_counter  = UseCompiler || CountCompiledCalls || LogTouchedMethods;\n+  bool inc_counter  = UseCompiler || CountCompiledCalls;\n","filename":"src\/hotspot\/cpu\/aarch64\/templateInterpreterGenerator_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -799,1 +799,1 @@\n-  bool inc_counter  = UseCompiler || CountCompiledCalls || LogTouchedMethods;\n+  bool inc_counter  = UseCompiler || CountCompiledCalls;\n@@ -1131,1 +1131,1 @@\n-  bool inc_counter  = UseCompiler || CountCompiledCalls || LogTouchedMethods;\n+  bool inc_counter  = UseCompiler || CountCompiledCalls;\n","filename":"src\/hotspot\/cpu\/arm\/templateInterpreterGenerator_arm.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2213,1 +2213,1 @@\n-  assert(UseCompiler || LogTouchedMethods, \"incrementing must be useful\");\n+  assert(UseCompiler, \"incrementing must be useful\");\n","filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1193,1 +1193,1 @@\n-  const bool inc_counter = UseCompiler || CountCompiledCalls || LogTouchedMethods;\n+  const bool inc_counter = UseCompiler || CountCompiledCalls;\n@@ -1617,1 +1617,1 @@\n-  bool inc_counter = UseCompiler || CountCompiledCalls || LogTouchedMethods;\n+  bool inc_counter = UseCompiler || CountCompiledCalls;\n","filename":"src\/hotspot\/cpu\/ppc\/templateInterpreterGenerator_ppc.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -935,1 +935,1 @@\n-  bool inc_counter = UseCompiler || CountCompiledCalls || LogTouchedMethods;\n+  bool inc_counter = UseCompiler || CountCompiledCalls;\n@@ -1329,1 +1329,1 @@\n-  const bool inc_counter  = UseCompiler || CountCompiledCalls || LogTouchedMethods;\n+  const bool inc_counter  = UseCompiler || CountCompiledCalls;\n","filename":"src\/hotspot\/cpu\/riscv\/templateInterpreterGenerator_riscv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1923,1 +1923,1 @@\n-  assert(UseCompiler || LogTouchedMethods, \"incrementing must be useful\");\n+  assert(UseCompiler, \"incrementing must be useful\");\n","filename":"src\/hotspot\/cpu\/s390\/interp_masm_s390.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1304,1 +1304,1 @@\n-  bool inc_counter = UseCompiler || CountCompiledCalls || LogTouchedMethods;\n+  bool inc_counter = UseCompiler || CountCompiledCalls;\n@@ -1661,1 +1661,1 @@\n-  bool inc_counter = UseCompiler || CountCompiledCalls || LogTouchedMethods;\n+  bool inc_counter = UseCompiler || CountCompiledCalls;\n","filename":"src\/hotspot\/cpu\/s390\/templateInterpreterGenerator_s390.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -793,1 +793,1 @@\n-  bool inc_counter  = UseCompiler || CountCompiledCalls || LogTouchedMethods;\n+  bool inc_counter  = UseCompiler || CountCompiledCalls;\n@@ -1330,1 +1330,1 @@\n-  bool inc_counter  = UseCompiler || CountCompiledCalls || LogTouchedMethods;\n+  bool inc_counter  = UseCompiler || CountCompiledCalls;\n","filename":"src\/hotspot\/cpu\/x86\/templateInterpreterGenerator_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -76,3 +76,0 @@\n-  if (LogTouchedMethods) {\n-    h_m->log_touched(Thread::current());\n-  }\n","filename":"src\/hotspot\/share\/ci\/ciMethod.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -642,4 +642,0 @@\n-  if (LogTouchedMethods) {\n-    mh->log_touched(current);\n-  }\n-\n@@ -2451,79 +2447,0 @@\n-\/\/ LogTouchedMethods and PrintTouchedMethods\n-\n-\/\/ TouchedMethodRecord -- we can't use a HashtableEntry<Method*> because\n-\/\/ the Method may be garbage collected. Let's roll our own hash table.\n-class TouchedMethodRecord : CHeapObj<mtTracing> {\n-public:\n-  \/\/ It's OK to store Symbols here because they will NOT be GC'ed if\n-  \/\/ LogTouchedMethods is enabled.\n-  TouchedMethodRecord* _next;\n-  Symbol* _class_name;\n-  Symbol* _method_name;\n-  Symbol* _method_signature;\n-};\n-\n-static const int TOUCHED_METHOD_TABLE_SIZE = 20011;\n-static TouchedMethodRecord** _touched_method_table = NULL;\n-\n-void Method::log_touched(Thread* current) {\n-\n-  const int table_size = TOUCHED_METHOD_TABLE_SIZE;\n-  Symbol* my_class = klass_name();\n-  Symbol* my_name  = name();\n-  Symbol* my_sig   = signature();\n-\n-  unsigned int hash = my_class->identity_hash() +\n-                      my_name->identity_hash() +\n-                      my_sig->identity_hash();\n-  juint index = juint(hash) % table_size;\n-\n-  MutexLocker ml(current, TouchedMethodLog_lock);\n-  if (_touched_method_table == NULL) {\n-    _touched_method_table = NEW_C_HEAP_ARRAY2(TouchedMethodRecord*, table_size,\n-                                              mtTracing, CURRENT_PC);\n-    memset(_touched_method_table, 0, sizeof(TouchedMethodRecord*)*table_size);\n-  }\n-\n-  TouchedMethodRecord* ptr = _touched_method_table[index];\n-  while (ptr) {\n-    if (ptr->_class_name       == my_class &&\n-        ptr->_method_name      == my_name &&\n-        ptr->_method_signature == my_sig) {\n-      return;\n-    }\n-    if (ptr->_next == NULL) break;\n-    ptr = ptr->_next;\n-  }\n-  TouchedMethodRecord* nptr = NEW_C_HEAP_OBJ(TouchedMethodRecord, mtTracing);\n-  my_class->increment_refcount();\n-  my_name->increment_refcount();\n-  my_sig->increment_refcount();\n-  nptr->_class_name         = my_class;\n-  nptr->_method_name        = my_name;\n-  nptr->_method_signature   = my_sig;\n-  nptr->_next               = NULL;\n-\n-  if (ptr == NULL) {\n-    \/\/ first\n-    _touched_method_table[index] = nptr;\n-  } else {\n-    ptr->_next = nptr;\n-  }\n-}\n-\n-void Method::print_touched_methods(outputStream* out) {\n-  MutexLocker ml(Thread::current()->is_VM_thread() ? NULL : TouchedMethodLog_lock);\n-  out->print_cr(\"# Method::print_touched_methods version 1\");\n-  if (_touched_method_table) {\n-    for (int i = 0; i < TOUCHED_METHOD_TABLE_SIZE; i++) {\n-      TouchedMethodRecord* ptr = _touched_method_table[i];\n-      while(ptr) {\n-        ptr->_class_name->print_symbol_on(out);       out->print(\".\");\n-        ptr->_method_name->print_symbol_on(out);      out->print(\":\");\n-        ptr->_method_signature->print_symbol_on(out); out->cr();\n-        ptr = ptr->_next;\n-      }\n-    }\n-  }\n-}\n-\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":0,"deletions":83,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -4149,5 +4149,0 @@\n-\n-  if (LogTouchedMethods) {\n-    warning(\"LogTouchedMethods is not supported for Zero\");\n-    FLAG_SET_DEFAULT(LogTouchedMethods, false);\n-  }\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -980,6 +980,0 @@\n-  product(bool, LogTouchedMethods, false, DIAGNOSTIC,                       \\\n-          \"Log methods which have been ever touched in runtime\")            \\\n-                                                                            \\\n-  product(bool, PrintTouchedMethodsAtExit, false, DIAGNOSTIC,               \\\n-          \"Print all methods that have been ever touched in runtime\")       \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -327,4 +327,0 @@\n-  if (LogTouchedMethods && PrintTouchedMethodsAtExit) {\n-    Method::print_touched_methods(tty);\n-  }\n-\n@@ -391,4 +387,0 @@\n-  if (LogTouchedMethods && PrintTouchedMethodsAtExit) {\n-    Method::print_touched_methods(tty);\n-  }\n-\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -99,1 +99,0 @@\n-  template(DumpTouchedMethods)                    \\\n","filename":"src\/hotspot\/share\/runtime\/vmOperation.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -129,1 +129,0 @@\n-  DCmdFactory::register_DCmdFactory(new DCmdFactoryImpl<TouchedMethodsDCmd>(full_export, true, false));\n@@ -936,24 +935,0 @@\n-class VM_DumpTouchedMethods : public VM_Operation {\n-private:\n-  outputStream* _out;\n-public:\n-  VM_DumpTouchedMethods(outputStream* out) {\n-    _out = out;\n-  }\n-\n-  virtual VMOp_Type type() const { return VMOp_DumpTouchedMethods; }\n-\n-  virtual void doit() {\n-    Method::print_touched_methods(_out);\n-  }\n-};\n-\n-void TouchedMethodsDCmd::execute(DCmdSource source, TRAPS) {\n-  if (!LogTouchedMethods) {\n-    output()->print_cr(\"VM.print_touched_methods command requires -XX:+LogTouchedMethods\");\n-    return;\n-  }\n-  VM_DumpTouchedMethods dumper(output());\n-  VMThread::execute(&dumper);\n-}\n-\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":0,"deletions":25,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -389,15 +389,0 @@\n-class TouchedMethodsDCmd : public DCmd {\n-public:\n-  TouchedMethodsDCmd(outputStream* output, bool heap) : DCmd(output, heap) {}\n-  static const char* name() {\n-    return \"VM.print_touched_methods\";\n-  }\n-  static const char* description() {\n-    return \"Print all methods that have ever been touched during the lifetime of this JVM.\";\n-  }\n-  static const char* impact() {\n-    return \"Medium: Depends on Java content.\";\n-  }\n-  virtual void execute(DCmdSource source, TRAPS);\n-};\n-\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.hpp","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1,126 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8025692 8273333\n- * @requires vm.flavor != \"zero\"\n- * @modules java.base\/jdk.internal.misc\n- *          java.management\n- * @library \/test\/lib\n- * @run driver PrintTouchedMethods\n- *\/\n-\n-import java.io.File;\n-import java.util.List;\n-import jdk.test.lib.process.ProcessTools;\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.JDKToolFinder;\n-\n-public class PrintTouchedMethods {\n-\n-    public static void main(String args[]) throws Exception {\n-      ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n-          \"-XX:-UnlockDiagnosticVMOptions\",\n-          \"-XX:+LogTouchedMethods\",\n-          \"-XX:+PrintTouchedMethodsAtExit\",\n-          TestLogTouchedMethods.class.getName());\n-\n-      \/\/ UnlockDiagnostic turned off, should fail\n-      OutputAnalyzer output = new OutputAnalyzer(pb.start());\n-      output.shouldNotHaveExitValue(0);\n-      output.shouldContain(\"Error: VM option 'LogTouchedMethods' is diagnostic and must be enabled via -XX:+UnlockDiagnosticVMOptions.\");\n-      output.shouldContain(\"Error: Could not create the Java Virtual Machine.\");\n-\n-      pb = ProcessTools.createJavaProcessBuilder(\n-          \"-XX:+UnlockDiagnosticVMOptions\",\n-          \"-XX:+LogTouchedMethods\",\n-          \"-XX:+PrintTouchedMethodsAtExit\",\n-          TestLogTouchedMethods.class.getName());\n-      output = new OutputAnalyzer(pb.start());\n-      \/\/ check order:\n-      \/\/ 1 \"# Method::print_touched_methods version 1\" is the first in first line\n-      \/\/ 2 should contain TestLogMethods.methodA:()V\n-      \/\/ 3 should not contain TestLogMethods.methodB:()V\n-      \/\/ Repeat above for another run with -Xint\n-      List<String> lines = output.asLines();\n-\n-      if (lines.size() < 1) {\n-        throw new Exception(\"Empty output\");\n-      }\n-\n-      String first = lines.get(0);\n-      if (!first.equals(\"# Method::print_touched_methods version 1\")) {\n-        throw new Exception(\"First line mismatch\");\n-      }\n-\n-      output.shouldContain(\"TestLogTouchedMethods.methodA:()V\");\n-      output.shouldNotContain(\"TestLogTouchedMethods.methodB:()V\");\n-      output.shouldHaveExitValue(0);\n-\n-      pb = ProcessTools.createJavaProcessBuilder(\n-          \"-XX:+UnlockDiagnosticVMOptions\",\n-          \"-Xint\",\n-          \"-XX:+LogTouchedMethods\",\n-          \"-XX:+PrintTouchedMethodsAtExit\",\n-          TestLogTouchedMethods.class.getName());\n-      output = new OutputAnalyzer(pb.start());\n-      lines = output.asLines();\n-\n-      if (lines.size() < 1) {\n-        throw new Exception(\"Empty output\");\n-      }\n-\n-      first = lines.get(0);\n-      if (!first.equals(\"# Method::print_touched_methods version 1\")) {\n-        throw new Exception(\"First line mismatch\");\n-      }\n-\n-      output.shouldContain(\"TestLogTouchedMethods.methodA:()V\");\n-      output.shouldNotContain(\"TestLogTouchedMethods.methodB:()V\");\n-      output.shouldHaveExitValue(0);\n-\n-      pb = ProcessTools.createJavaProcessBuilder(\n-          \"-XX:+UnlockDiagnosticVMOptions\",\n-          \"-Xint\",\n-          \"-XX:+LogTouchedMethods\",\n-          \"-XX:+PrintTouchedMethodsAtExit\",\n-          \"-XX:-TieredCompilation\",\n-          TestLogTouchedMethods.class.getName());\n-      output = new OutputAnalyzer(pb.start());\n-      lines = output.asLines();\n-\n-      if (lines.size() < 1) {\n-        throw new Exception(\"Empty output\");\n-      }\n-\n-      first = lines.get(0);\n-      if (!first.equals(\"# Method::print_touched_methods version 1\")) {\n-        throw new Exception(\"First line mismatch\");\n-      }\n-\n-      output.shouldContain(\"TestLogTouchedMethods.methodA:()V\");\n-      output.shouldNotContain(\"TestLogTouchedMethods.methodB:()V\");\n-      output.shouldHaveExitValue(0);\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/PrintTouchedMethods.java","additions":0,"deletions":126,"binary":false,"changes":126,"status":"deleted"},{"patch":"@@ -1,46 +0,0 @@\n-\/*\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8025692\n- * @summary Test jcmd PrintTouchedMethods VM.print_touched_methods\n- * @modules java.base\/jdk.internal.misc\n- *          java.management\n- * @library \/test\/lib\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+LogTouchedMethods PrintTouchedMethodsJcmd\n- *\/\n-\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.JDKToolFinder;\n-\n-public class PrintTouchedMethodsJcmd {\n-\n-    public static void main(String args[]) throws Exception {\n-      var pid = Long.toString(ProcessHandle.current().pid());\n-      var pb = new ProcessBuilder();\n-      pb.command(new String[] {JDKToolFinder.getJDKTool(\"jcmd\"), pid, \"VM.print_touched_methods\"});\n-      var output = new OutputAnalyzer(pb.start());\n-      output.shouldContain(\"PrintTouchedMethodsJcmd.main:([Ljava\/lang\/String;)V\");\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/PrintTouchedMethodsJcmd.java","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -1,32 +0,0 @@\n-\/*\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* used by PrintTouchedMethods.java *\/\n-public class TestLogTouchedMethods {\n-  public static void main(String[] args) {\n-    new TestLogTouchedMethods().methodA();\n-  }\n-\n-  public void methodA() {} \/\/ called\n-  public void methodB() {} \/\/ this should not be called\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/TestLogTouchedMethods.java","additions":0,"deletions":32,"binary":false,"changes":32,"status":"deleted"}]}