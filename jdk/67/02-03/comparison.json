{"files":[{"patch":"@@ -1314,1 +1314,0 @@\n-  \/\/ root marking\n@@ -1316,1 +1315,1 @@\n-\n+  \/\/ Seed the stack with root scan\n@@ -1319,1 +1318,1 @@\n-  \/\/ Work through the oop stack to traverse heap.\n+  \/\/ Work through the oop stack to traverse heap\n@@ -1333,6 +1332,1 @@\n-    assert(SafepointSynchronize::is_at_safepoint(), \"safe iteration is only available during safepoints\");\n-\n-    if (!_aux_bitmap_region_special && !os::commit_memory((char*)_aux_bitmap_region.start(), _aux_bitmap_region.byte_size(), false)) {\n-      log_warning(gc)(\"Could not commit native memory for auxiliary marking bitmap for heap iteration\");\n-      return false;\n-    }\n+  assert(SafepointSynchronize::is_at_safepoint(), \"safe iteration is only available during safepoints\");\n@@ -1340,3 +1334,7 @@\n-    \/\/ Reset bitmap\n-    _aux_bit_map.clear();\n-    return true;\n+  if (!_aux_bitmap_region_special && !os::commit_memory((char*)_aux_bitmap_region.start(), _aux_bitmap_region.byte_size(), false)) {\n+    log_warning(gc)(\"Could not commit native memory for auxiliary marking bitmap for heap iteration\");\n+    return false;\n+  }\n+  \/\/ Reset bitmap\n+  _aux_bit_map.clear();\n+  return true;\n@@ -1346,6 +1344,6 @@\n-    \/\/ Process GC roots according to current GC cycle.\n-    \/\/ This populates the work stack with initial objects.\n-    \/\/ It is important to relinquish the associated locks before diving\n-    \/\/ into heap dumper.\n-    ShenandoahHeapIterationRootScanner rp;\n-    rp.roots_do(oops);\n+  \/\/ Process GC roots according to current GC cycle\n+  \/\/ This populates the work stack with initial objects\n+  \/\/ It is important to relinquish the associated locks before diving\n+  \/\/ into heap dumper\n+  ShenandoahHeapIterationRootScanner rp;\n+  rp.roots_do(oops);\n@@ -1355,3 +1353,3 @@\n-    if (!_aux_bitmap_region_special && !os::uncommit_memory((char*)_aux_bitmap_region.start(), _aux_bitmap_region.byte_size())) {\n-      log_warning(gc)(\"Could not uncommit native memory for auxiliary marking bitmap for heap iteration\");\n-    }\n+  if (!_aux_bitmap_region_special && !os::uncommit_memory((char*)_aux_bitmap_region.start(), _aux_bitmap_region.byte_size())) {\n+    log_warning(gc)(\"Could not uncommit native memory for auxiliary marking bitmap for heap iteration\");\n+  }\n@@ -1360,1 +1358,1 @@\n-\/\/ Closure for parallelly iterate objects.\n+\/\/ Closure for parallelly iterate objects\n@@ -1379,2 +1377,1 @@\n-      assert(oopDesc::is_oop(obj), \"must be a valid oop\");\n-      \/\/ parallel mark\n+      assert(oopDesc::is_oop(obj), \"Must be a valid oop\");\n@@ -1418,1 +1415,1 @@\n-    \/\/ root marking\n+\n@@ -1420,1 +1417,0 @@\n-    \/\/ Procssing roots\n@@ -1422,1 +1418,1 @@\n-    \/\/ prepare worker stacks\n+\n@@ -1450,1 +1446,1 @@\n-  \/\/ divide global root_stack into worker queues.\n+  \/\/ Divide global root_stack into worker queues\n@@ -1453,1 +1449,1 @@\n-    \/\/ initialize queue for every workers\n+    \/\/ Initialize queues for every workers\n@@ -1459,1 +1455,3 @@\n-    \/\/ divide roots to every worker\n+    \/\/ Divide roots among the workers. Assume that object referencing distribution\n+    \/\/ is related with root kind, use round-robin to make every worker have same chance\n+    \/\/ to process every kind of roots\n@@ -1462,1 +1460,1 @@\n-      \/\/ no work to do.\n+      \/\/ No work to do\n@@ -1465,3 +1463,1 @@\n-    \/\/ assume that object referencing distribution is related with\n-    \/\/ root kind, use round-robin to make every worker have same chance\n-    \/\/ to process every kind of roots\n+\n@@ -1484,1 +1480,1 @@\n-    \/\/ Task in queue\n+\n@@ -1489,1 +1485,1 @@\n-    \/\/ steal when there is no task in queue.\n+    \/\/ Steal when there is no task in queue.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":32,"deletions":36,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-\n@@ -560,1 +559,1 @@\n-  \/\/ parallel heap iteration support\n+  \/\/ Parallel heap iteration support\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}