{"files":[{"patch":"@@ -289,0 +289,5 @@\n+  if (option == CompileCommand::Blackhole && !UnlockDiagnosticVMOptions) {\n+    warning(\"Blackhole compile option is diagnostic and must be enabled via -XX:+UnlockDiagnosticVMOptions\");\n+    return;\n+  }\n+\n@@ -413,7 +418,2 @@\n-  if (check_predicate(CompileCommand::Blackhole, method)) {\n-    if (method->result_type() == T_VOID) {\n-      return true;\n-    } else {\n-      warning(\"blackhole compile command only works for methods with void type: %s\",\n-              method->name_and_sig_as_C_string());\n-    }\n+  if (!check_predicate(CompileCommand::Blackhole, method)) {\n+    return false;\n@@ -421,1 +421,7 @@\n-  return false;\n+  guarantee(UnlockDiagnosticVMOptions, \"Checked during initial parsing\");\n+  if (method->result_type() != T_VOID) {\n+    warning(\"Blackhole compile option only works for methods with void type: %s\",\n+            method->name_and_sig_as_C_string());\n+    return false;\n+  }\n+  return true;\n","filename":"src\/hotspot\/share\/compiler\/compilerOracle.cpp","additions":14,"deletions":8,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -0,0 +1,109 @@\n+\/*\n+ * Copyright (c) 2020, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @library \/test\/lib\n+ * @build compiler.blackhole.BlackholeTarget\n+ * @run driver compiler.blackhole.BlackholeDiagnosticUnlockTest\n+ *\/\n+\n+package compiler.blackhole;\n+\n+import java.io.IOException;\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class BlackholeDiagnosticUnlockTest {\n+\n+    private static final int CYCLES = 1_000_000;\n+    private static final int TRIES = 10;\n+\n+    public static void main(String[] args) throws IOException {\n+        if (args.length == 0) {\n+            driver();\n+        } else {\n+            runner();\n+        }\n+    }\n+\n+    public static void driver() throws IOException {\n+       final String msg = \"Blackhole compile option is diagnostic and must be enabled via -XX:+UnlockDiagnosticVMOptions\";\n+\n+       if (!Platform.isDebugBuild()) { \/\/ UnlockDiagnosticVMOptions is true in debug\n+           ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+               \"-Xmx128m\",\n+               \"-Xbatch\",\n+               \"-XX:CompileCommand=quiet\",\n+               \"-XX:CompileCommand=option,compiler\/blackhole\/BlackholeTarget.bh_*,Blackhole\",\n+               \"compiler.blackhole.BlackholeDiagnosticUnlockTest\",\n+               \"run\"\n+           );\n+           OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+           output.shouldHaveExitValue(0);\n+           output.shouldContain(msg);\n+       }\n+\n+       {\n+           ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+               \"-Xmx128m\",\n+               \"-XX:-PrintWarnings\",\n+               \"-XX:CompileCommand=quiet\",\n+               \"-XX:CompileCommand=option,compiler\/blackhole\/BlackholeTarget.bh_*,Blackhole\",\n+               \"compiler.blackhole.BlackholeDiagnosticUnlockTest\",\n+               \"run\"\n+           );\n+           OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+           output.shouldHaveExitValue(0);\n+           output.shouldNotContain(msg);\n+       }\n+\n+       {\n+           ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+               \"-Xmx128m\",\n+               \"-XX:+UnlockDiagnosticVMOptions\",\n+               \"-XX:CompileCommand=quiet\",\n+               \"-XX:CompileCommand=option,compiler\/blackhole\/BlackholeTarget.bh_*,Blackhole\",\n+               \"compiler.blackhole.BlackholeDiagnosticUnlockTest\",\n+               \"run\"\n+           );\n+           OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+           output.shouldHaveExitValue(0);\n+           output.shouldNotContain(msg);\n+       }\n+    }\n+\n+    public static void runner() {\n+        for (int t = 0; t < TRIES; t++) {\n+            run();\n+        }\n+    }\n+\n+    public static void run() {\n+        for (int c = 0; c < CYCLES; c++) {\n+            BlackholeTarget.bh_s_int_1(c);\n+        }\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/blackhole\/BlackholeDiagnosticUnlockTest.java","additions":109,"deletions":0,"binary":false,"changes":109,"status":"added"},{"patch":"@@ -1,96 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Red Hat, Inc. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @library \/test\/lib\n- * @build compiler.blackhole.BlackholeTarget\n- * @run driver compiler.blackhole.BlackholeNonVoidWarning\n- *\/\n-\n-package compiler.blackhole;\n-\n-import java.io.IOException;\n-import jdk.test.lib.process.ProcessTools;\n-import jdk.test.lib.process.OutputAnalyzer;\n-\n-public class BlackholeNonVoidWarning {\n-\n-    private static final int CYCLES = 1_000_000;\n-    private static final int TRIES = 10;\n-\n-    public static void main(String[] args) throws IOException {\n-        if (args.length == 0) {\n-            driver();\n-        } else {\n-            runner();\n-        }\n-    }\n-\n-    public static void driver() throws IOException {\n-       final String msg = \"blackhole compile command only works for methods with void type: compiler.blackhole.BlackholeTarget.bh_sr_int(I)I\";\n-\n-       {\n-           ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n-               \"-Xmx128m\",\n-               \"-Xbatch\",\n-               \"-XX:CompileCommand=quiet\",\n-               \"-XX:CompileCommand=blackhole,compiler\/blackhole\/BlackholeTarget.bh_*\",\n-               \"compiler.blackhole.BlackholeNonVoidWarning\",\n-               \"run\"\n-           );\n-           OutputAnalyzer output = new OutputAnalyzer(pb.start());\n-           output.shouldHaveExitValue(0);\n-           output.shouldContain(msg);\n-       }\n-\n-       {\n-           ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n-               \"-Xmx128m\",\n-               \"-XX:-PrintWarnings\",\n-               \"-XX:CompileCommand=quiet\",\n-               \"-XX:CompileCommand=blackhole,compiler\/blackhole\/BlackholeTarget.bh_*\",\n-               \"compiler.blackhole.BlackholeNonVoidWarning\",\n-               \"run\"\n-           );\n-           OutputAnalyzer output = new OutputAnalyzer(pb.start());\n-           output.shouldHaveExitValue(0);\n-           output.shouldNotContain(msg);\n-       }\n-    }\n-\n-    public static void runner() {\n-        for (int t = 0; t < TRIES; t++) {\n-            run();\n-        }\n-    }\n-\n-    public static void run() {\n-        for (int c = 0; c < CYCLES; c++) {\n-            if (BlackholeTarget.bh_sr_int(c) != 0) {\n-                throw new AssertionError(\"Return value error\");\n-            }\n-        }\n-    }\n-\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/blackhole\/BlackholeNonVoidWarning.java","additions":0,"deletions":96,"binary":false,"changes":96,"status":"deleted"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2020, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @library \/test\/lib\n+ * @build compiler.blackhole.BlackholeTarget\n+ * @run driver compiler.blackhole.BlackholeNonVoidWarningTest\n+ *\/\n+\n+package compiler.blackhole;\n+\n+import java.io.IOException;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class BlackholeNonVoidWarningTest {\n+\n+    private static final int CYCLES = 1_000_000;\n+    private static final int TRIES = 10;\n+\n+    public static void main(String[] args) throws IOException {\n+        if (args.length == 0) {\n+            driver();\n+        } else {\n+            runner();\n+        }\n+    }\n+\n+    public static void driver() throws IOException {\n+       final String msg = \"Blackhole compile option only works for methods with void type: compiler.blackhole.BlackholeTarget.bh_sr_int(I)I\";\n+\n+       {\n+           ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+               \"-Xmx128m\",\n+               \"-Xbatch\",\n+               \"-XX:+UnlockDiagnosticVMOptions\",\n+               \"-XX:CompileCommand=quiet\",\n+               \"-XX:CompileCommand=blackhole,compiler\/blackhole\/BlackholeTarget.bh_*\",\n+               \"compiler.blackhole.BlackholeNonVoidWarningTest\",\n+               \"run\"\n+           );\n+           OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+           output.shouldHaveExitValue(0);\n+           output.shouldContain(msg);\n+       }\n+\n+       {\n+           ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+               \"-Xmx128m\",\n+               \"-XX:-PrintWarnings\",\n+               \"-XX:+UnlockDiagnosticVMOptions\",\n+               \"-XX:CompileCommand=quiet\",\n+               \"-XX:CompileCommand=blackhole,compiler\/blackhole\/BlackholeTarget.bh_*\",\n+               \"compiler.blackhole.BlackholeNonVoidWarningTest\",\n+               \"run\"\n+           );\n+           OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+           output.shouldHaveExitValue(0);\n+           output.shouldNotContain(msg);\n+       }\n+    }\n+\n+    public static void runner() {\n+        for (int t = 0; t < TRIES; t++) {\n+            run();\n+        }\n+    }\n+\n+    public static void run() {\n+        for (int c = 0; c < CYCLES; c++) {\n+            if (BlackholeTarget.bh_sr_int(c) != 0) {\n+                throw new AssertionError(\"Return value error\");\n+            }\n+        }\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/blackhole\/BlackholeNonVoidWarningTest.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"}]}