{"files":[{"patch":"@@ -79,0 +79,1 @@\n+#define CDS_MAX_PATH (2*K)\n@@ -210,4 +211,4 @@\n-     if (!validate_archive ()) {\n-       _full_path = Arguments::get_default_shared_archive_path();\n-       DynamicDumpSharedSpaces = true;\n-     }\n+    if (!_is_static && !validate_archive()) {\n+      \/\/ regenerate shared archive at exit\n+      DynamicDumpSharedSpaces = true;\n+    }\n@@ -1080,2 +1081,1 @@\n-      log_info(cds)(\"Not a base shared archive: %s\", archive_name);\n-      \/\/ vm_exit_during_initialization(\"Not a base shared archive\", archive_name);\n+      log_info(cds)(\"Not a valid base shared archive: %s\", archive_name);\n@@ -1088,2 +1088,1 @@\n-      log_info(cds)(\"Not a top shared archive: %s\", archive_name);\n-      \/\/ vm_exit_during_initialization(\"Not a top shared archive\", archive_name);\n+      log_info(cds)(\"Not a valid top shared archive: %s\", archive_name);\n@@ -1114,0 +1113,1 @@\n+\n@@ -1120,2 +1120,4 @@\n-  } else if (magic == CDS_DYNAMIC_ARCHIVE_MAGIC) {\n-    \/\/ read the base archive name\n+  } else {\n+    if (magic != CDS_DYNAMIC_ARCHIVE_MAGIC) {\n+      fail_continue(\"The shared archive file has a bad magic number.\");\n+    }\n@@ -1123,2 +1125,3 @@\n-    if (name_size == 0) {\n-      fail_continue(\"Base archive name size is 0.\");\n+    \/\/ read the base archive name\n+    if (name_size <=  0 || name_size > CDS_MAX_PATH) {\n+      fail_continue(\"Base archive name size is wrong.\");\n@@ -1132,0 +1135,1 @@\n+      *size = 0;\n@@ -1135,4 +1139,9 @@\n-  } else {\n-    \/\/ not a valid shared archive or the archive is damaged for testing purpose\n-    fail_continue(\"The shared archive file has a bad magic number.\");\n-    return false;\n+    sz = sizeof(FileMapHeader);\n+    FileMapHeader* static_header = (FileMapHeader*) os::malloc(sz, mtInternal);\n+    int fdh = os::open(*base_archive_name, O_RDONLY | O_BINARY, 0);\n+    ReleaseFileHeader rl((void*)static_header, fdh);\n+    if (fdh < 0) {\n+      fail_continue(\"Unable to open base archive.\");\n+      return false;\n+    }\n+    return true;\n@@ -1140,1 +1149,0 @@\n-  return true;\n@@ -1154,1 +1162,1 @@\n-    FileMapInfo::fail_continue(\"The shared archive file cannot be used with an exploded module build.\");\n+    fail_continue(\"The shared archive file cannot be used with an exploded module build.\");\n@@ -1162,1 +1170,1 @@\n-    FileMapInfo::fail_continue(\"The shared archive file has a bad magic number.\");\n+    fail_continue(\"The shared archive file has a bad magic number.\");\n@@ -1176,1 +1184,1 @@\n-    FileMapInfo::fail_continue(\"The shared archive file has an incorrect header size.\");\n+    fail_continue(\"The shared archive file has an incorrect header size.\");\n@@ -1183,1 +1191,1 @@\n-    FileMapInfo::fail_continue(\"JVM version identifier is corrupted.\");\n+    fail_continue(\"JVM version identifier is corrupted.\");\n@@ -1192,1 +1200,1 @@\n-    FileMapInfo::fail_continue(\"The shared archive file was created by a different\"\n+    fail_continue(\"The shared archive file was created by a different\"\n@@ -1202,1 +1210,1 @@\n-      FileMapInfo::fail_continue(\"Header checksum verification failed.\");\n+      fail_continue(\"Header checksum verification failed.\");\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":31,"deletions":23,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -3545,0 +3545,6 @@\n+          if (!RequireSharedSpaces && AutoCreateSharedArchive) {\n+              \/\/ -Xshare:auto -XX:+AutoCreateSharedArchive -XX:SharedArchiveFile=<file>\n+              \/\/ Will generate dynamic archive based on default shared archive, classes.jsa\n+              SharedArchivePath = get_default_shared_archive_path();\n+              SharedDynamicArchivePath = temp_archive_path;\n+          }\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -149,1 +149,3 @@\n-        opts.addSuffix(cmdLineSuffix);\n+        if (cmdLineSuffix != null) {\n+            opts.addSuffix(cmdLineSuffix);\n+        }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/TestCommon.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -97,0 +97,13 @@\n+    \/**\n+     * Excute a JVM to dump a base archive by\n+     *  -Xshare:dump -XX:SharedArchiveFile=baseArchiveName\n+     *\/\n+    public static Result dumpBaseArchive(String baseArchiveName, String... cmdLineSuffix)\n+        throws Exception\n+    {\n+        OutputAnalyzer output = TestCommon.dumpBaseArchive(baseArchiveName, cmdLineSuffix);\n+        CDSOptions opts = new CDSOptions();\n+        opts.setXShareMode(\"dump\");\n+        return new Result(opts, output);\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/DynamicArchiveTestBase.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -108,1 +108,1 @@\n-                    output.shouldMatch(\"Not a base shared archive:.*top.*.jsa\");\n+                    output.shouldMatch(\"Not a valid base shared archive:.*top.*.jsa\");\n@@ -117,1 +117,1 @@\n-                    output.shouldMatch(\"Not a top shared archive:.*base.*.jsa\");\n+                    output.shouldMatch(\"Not a valid top shared archive:.*base.*.jsa\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/SharedArchiveFileOption.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,1 +46,3 @@\n-    private static final String ARCHIVE_NAME = CDSTestUtils.getOutputFileName(\"top.jsa\");\n+    private static final String BASE_NAME = CDSTestUtils.getOutputFileName(\"base.jsa\");\n+    private static final String TOP_NAME  = CDSTestUtils.getOutputFileName(\"top.jsa\");\n+    private static final String mainAppClass = \"Hello\";\n@@ -66,0 +68,4 @@\n+    public static void print(String message) {\n+        System.out.println(message);\n+    }\n+\n@@ -68,1 +74,0 @@\n-        String mainAppClass = \"Hello\";\n@@ -70,1 +75,1 @@\n-        File archiveFile = new File(ARCHIVE_NAME);\n+        File archiveFile = new File(TOP_NAME);\n@@ -76,2 +81,2 @@\n-        System.out.println(\"1. run with non-existing archive should automatically create dynamic archive\");\n-        run(ARCHIVE_NAME,\n+        print(\"1. run with non-existing archive should automatically create dynamic archive\");\n+        run(TOP_NAME,\n@@ -84,1 +89,3 @@\n-                output.shouldHaveExitValue(0);\n+                output.shouldHaveExitValue(0)\n+                      .shouldContain(\"Dumping shared data to file:\")\n+                      .shouldContain(TOP_NAME);\n@@ -86,1 +93,1 @@\n-        checkFileExists(ARCHIVE_NAME);\n+        checkFileExists(TOP_NAME);\n@@ -89,2 +96,2 @@\n-        System.out.println(\"2. run with the created dynamic archive should pass\");\n-        run(ARCHIVE_NAME,\n+        print(\"2. run with the created dynamic archive should pass\");\n+        run(TOP_NAME,\n@@ -101,2 +108,2 @@\n-        System.out.println(\"3. run with the created dynamic archive with -XX:+AutoCreateSharedArchive should pass\");\n-        run(ARCHIVE_NAME,\n+        print(\"3. run with the created dynamic archive with -XX:+AutoCreateSharedArchive should pass\");\n+        run(TOP_NAME,\n@@ -115,2 +122,2 @@\n-        System.out.println(\"4. run with a bad versioned archive should create dynamic archive\");\n-        archiveFile = new File(ARCHIVE_NAME);\n+        print(\"4. run with a bad versioned archive should create dynamic archive\");\n+        archiveFile = new File(TOP_NAME);\n@@ -134,1 +141,1 @@\n-        System.out.println(\"5. run with the new created archive should pass\");\n+        print(\"5. run with the new created archive should pass\");\n@@ -144,0 +151,72 @@\n+\n+         \/\/ 6. dump base archive and top archive\n+         print(\"6. dump base archive \" + BASE_NAME);\n+         dumpBaseArchive(BASE_NAME, null)\n+             .assertNormalExit(output -> {\n+                output.shouldHaveExitValue(0);\n+             });\n+         checkFileExists(BASE_NAME);\n+\n+         \/\/ 7. dump top based on base\n+         print(\"7. dump top based on base\");\n+         dump2(BASE_NAME, TOP_NAME,\n+               \"-Xlog:cds\",\n+               \"-cp\", appJar, mainAppClass)\n+             .assertNormalExit(output -> {\n+                 output.shouldHaveExitValue(0)\n+                       .shouldContain(\"Dumping shared data to file:\")\n+                       .shouldContain(TOP_NAME);\n+             });\n+\n+         \/\/ 8. run with base and top\"\n+         print(\"8. run with base and top\");\n+         run2(BASE_NAME, TOP_NAME,\n+              \"-Xlog:cds\",\n+              \"-Xlog:cds+dynamic=info\",\n+              \"-Xlog:class+load\",\n+              \"-cp\", appJar,\n+              mainAppClass)\n+             .assertNormalExit(output -> {\n+                 output.shouldHaveExitValue(0)\n+                       .shouldContain(HELLO_SOURCE);\n+             });\n+\n+\n+         File topFile = new File(TOP_NAME);\n+         \/\/ 9. damaged top, regenerate top\n+         print(\"9. damaged top, regenerate top\");\n+         String modHeader = startNewArchive(\"modify-header\");\n+         copiedJsa = CDSArchiveUtils.copyArchiveFile(topFile, modHeader);\n+         CDSArchiveUtils.modifyHeaderIntField(copiedJsa, CDSArchiveUtils.offsetMagic, 0xffffffff);\n+         run2(BASE_NAME, modHeader,\n+              \"-Xshare:auto\",\n+              \"-XX:+AutoCreateSharedArchive\",\n+              \"-Xlog:cds\",\n+              \"-Xlog:cds+dynamic=info\",\n+              \"-cp\", appJar,\n+              mainAppClass)\n+              .assertNormalExit(output -> {\n+                  output.shouldHaveExitValue(0)\n+                        .shouldContain(\"Dumping shared data to file:\")\n+                        .shouldContain(modHeader)\n+                        .shouldContain(\"Regenerate MethodHandle Holder classes\");\n+              });\n+         File baseFile = new File(BASE_NAME);\n+         \/\/ 10. screw up base archive\n+         print(\"10. screw up base archive\");\n+         String modBase = startNewArchive(\"modify-base\");\n+         copiedJsa = CDSArchiveUtils.copyArchiveFile(topFile, modBase);\n+         CDSArchiveUtils.modifyHeaderIntField(copiedJsa, CDSArchiveUtils.offsetMagic, 0x0);\n+         run2(modBase, TOP_NAME,\n+              \"-Xshare:auto\",\n+              \"-XX:+AutoCreateSharedArchive\",\n+              \"-Xlog:cds\",\n+              \"-Xlog:cds+dynamic=info\",\n+              \"-cp\", appJar,\n+              mainAppClass)\n+              .assertNormalExit(output -> {\n+                  output.shouldContain(\"Unable to map shared spaces\")\n+                        .shouldContain(\"Read static archive failed\")\n+                        .shouldContain(\"Hello World\")\n+                        .shouldNotContain(\"Dumping shared data to file:\");\n+              });\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/TestAutoCreateSharedArchive.java","additions":93,"deletions":14,"binary":false,"changes":107,"status":"modified"}]}