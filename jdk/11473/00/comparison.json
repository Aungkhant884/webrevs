{"files":[{"patch":"@@ -4183,2 +4183,2 @@\n-\/\/ Goes over all children of the root of the loop tree, collects all controls for the loop and its inner loops then\n-\/\/ checks whether any control is a branch out of the loop and if it is, whether it's not a NeverBranch.\n+\/\/ Goes over all children of the root of the loop tree. Check if any of them have a path\n+\/\/ down to Root, that does not go via a NeverBranch exit.\n@@ -4186,0 +4186,3 @@\n+  ResourceMark rm;\n+  Unique_Node_List worklist;\n+  \/\/ start traversal at all loop heads of first-level loops\n@@ -4187,1 +4190,0 @@\n-    Unique_Node_List wq;\n@@ -4190,28 +4192,20 @@\n-    for (uint i = 1; i < head->req(); ++i) {\n-      Node* in = head->in(i);\n-      if (get_loop(in) != _ltree_root) {\n-        wq.push(in);\n-      }\n-    }\n-    for (uint i = 0; i < wq.size(); ++i) {\n-      Node* c = wq.at(i);\n-      if (c == head) {\n-        continue;\n-      } else if (c->is_Region()) {\n-        for (uint j = 1; j < c->req(); ++j) {\n-          wq.push(c->in(j));\n-        }\n-      } else {\n-        wq.push(c->in(0));\n-      }\n-    }\n-    assert(wq.member(head), \"\");\n-    for (uint i = 0; i < wq.size(); ++i) {\n-      Node* c = wq.at(i);\n-      if (c->is_MultiBranch()) {\n-        for (DUIterator_Fast jmax, j = c->fast_outs(jmax); j < jmax; j++) {\n-          Node* u = c->fast_out(j);\n-          assert(u->is_CFG(), \"\");\n-          if (!wq.member(u) && c->Opcode() != Op_NeverBranch) {\n-            return false;\n-          }\n+    worklist.push(head);\n+  }\n+  \/\/ BFS traversal down the CFG, except through NeverBranch exits\n+  for (uint i = 0; i < worklist.size(); ++i) {\n+    Node* n = worklist.at(i);\n+    assert(n->is_CFG(), \"only traverse CFG\");\n+    if (n->is_Root()) {\n+      \/\/ Found root -> there was an exit!\n+      return false;\n+    } else if (n->Opcode() == Op_NeverBranch) {\n+      \/\/ Only follow the loop-internal projection, not the NeverBranch exit\n+      ProjNode* proj = n->as_Multi()->proj_out_or_null(0);\n+      assert(proj != nullptr, \"must find loop-internal projection of NeverBranch\");\n+      worklist.push(proj);\n+    } else {\n+      \/\/ Traverse all CFG outputs\n+      for (DUIterator_Fast imax, i = n->fast_outs(imax); i < imax; i++) {\n+        Node* use = n->fast_out(i);\n+        if (use->is_CFG()) {\n+          worklist.push(use);\n@@ -4222,0 +4216,1 @@\n+  \/\/ No exit found for any loop -> all are infinite\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":26,"deletions":31,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+super public class TestOnlyInfiniteLoops\n+{\n+    public Method \"<init>\":\"()V\"\n+    stack 2 locals 1\n+    {\n+        aload_0;\n+        invokespecial  Method java\/lang\/Object.\"<init>\":\"()V\";\n+        return;\n+    }\n+\n+    static Method test_simple:\"(III)I\"\n+    stack 200 locals 10\n+    {\n+    \/\/ Nested infinite loop, where inner loop eventually\n+    \/\/ looses exit to outer loop. Then, the inner loop\n+    \/\/ floats outside the inner loop. The entry from\n+    \/\/ outer to inner loop now becomes an exit for the\n+    \/\/ outer loop, where it now enters the next loop, that\n+    \/\/ used to be the inner loop.\n+        iconst_0;\n+        istore     9;\n+\n+        iload      0;\n+        ifeq LEND; \/\/ skip\n+\n+    LOOP1:\n+        iload      1;\n+        ifeq LOOP1; \/\/ dominates\n+    LOOP2:\n+        \/\/ SKIP: prevent loop-exit from becoming zero-trip guard\n+        iload      2;\n+        ifeq SKIP;\n+        iinc       9, 1;\n+    SKIP:\n+        iload      1;\n+        ifeq LOOP1; \/\/ is dominated\n+        goto LOOP2;\n+\n+    LEND:\n+        iload      9;\n+        ireturn;\n+    }\n+    static Method test_irreducible:\"(IIII)V\"\n+    stack 200 locals 200\n+    {\n+        iload_0;\n+        ifeq LEND; \/\/ skip\n+\n+    L1:\n+        iload      1;\n+        ifgt MERGE;\n+    L2:\n+        iload      2;\n+        ifge MERGE;\n+        goto L1;\n+\n+    MERGE:\n+        nop;\n+    LOOP:\n+        iload      3;\n+        ifle L2;\n+        iconst_0; \/\/ always true\n+        ifeq LOOP;\n+        iconst_0; \/\/ always true\n+        ifeq LOOP;\n+    INFTY:\n+        goto INFTY; \/\/ infinite loop\n+\n+    LEND:\n+        return;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestOnlyInfiniteLoops.jasm","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8297642\n+ * @compile TestOnlyInfiniteLoops.jasm\n+ * @summary Nested irreducible loops, where the inner loop floats out of the outer\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions\n+ *      -XX:CompileCommand=compileonly,TestOnlyInfiniteLoops::test*\n+ *      -XX:-TieredCompilation -Xbatch -Xcomp\n+ *      TestOnlyInfiniteLoopsMain\n+ *\n+ * @test\n+ * @bug 8297642\n+ * @compile TestOnlyInfiniteLoops.jasm\n+ * @summary Nested irreducible loops, where the inner loop floats out of the outer\n+ * @run main\/othervm -XX:+UnlockExperimentalVMOptions\n+ *      -XX:CompileCommand=compileonly,TestOnlyInfiniteLoops::test*\n+ *      -XX:-TieredCompilation -Xbatch -Xcomp\n+ *      -XX:PerMethodTrapLimit=0\n+ *      TestOnlyInfiniteLoopsMain\n+*\/\n+\n+public class TestOnlyInfiniteLoopsMain {\n+    public static void main(String[] args) {\n+        TestOnlyInfiniteLoops t = new TestOnlyInfiniteLoops();\n+        System.out.println(\"test_simple\");\n+        t.test_simple(0, 0, 0);\n+        System.out.println(\"test_irreducible\");\n+        t.test_irreducible(0, 0, 0, 0);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestOnlyInfiniteLoopsMain.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"}]}