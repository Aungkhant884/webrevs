{"files":[{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -462,1 +462,1 @@\n-        maybe-uninitialized class-memaccess unused-result extra\n+        maybe-uninitialized class-memaccess unused-result extra use-after-free\n","filename":"make\/modules\/java.desktop\/lib\/Awt2dLibraries.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,0 +66,3 @@\n+\n+PRAGMA_DIAG_PUSH\n+PRAGMA_STRINGOP_OVERFLOW_IGNORED\n@@ -92,0 +95,2 @@\n+PRAGMA_DIAG_POP\n+\n","filename":"src\/hotspot\/share\/classfile\/bytecodeAssembler.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -5966,0 +5966,3 @@\n+\n+PRAGMA_DIAG_PUSH\n+PRAGMA_STRINGOP_OVERFLOW_IGNORED\n@@ -5967,0 +5970,1 @@\n+PRAGMA_DIAG_POP\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -472,0 +472,3 @@\n+\n+PRAGMA_DIAG_PUSH\n+PRAGMA_STRINGOP_OVERFLOW_IGNORED\n@@ -473,0 +476,1 @@\n+PRAGMA_DIAG_POP\n","filename":"src\/hotspot\/share\/classfile\/symbolTable.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -99,0 +99,3 @@\n+\n+PRAGMA_DIAG_PUSH\n+PRAGMA_STRINGOP_OVERFLOW_IGNORED\n@@ -100,0 +103,2 @@\n+PRAGMA_DIAG_POP\n+\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/traceid\/jfrTraceIdBits.inline.hpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1406,0 +1406,1 @@\n+\n@@ -1407,0 +1408,2 @@\n+PRAGMA_DIAG_PUSH\n+PRAGMA_FORMAT_OVERFLOW_IGNORED\n@@ -1410,0 +1413,1 @@\n+PRAGMA_DIAG_POP\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4297,0 +4297,2 @@\n+PRAGMA_DIAG_PUSH\n+PRAGMA_FORMAT_OVERFLOW_IGNORED\n@@ -4298,0 +4300,1 @@\n+PRAGMA_DIAG_POP\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,0 +64,3 @@\n+#ifndef PRAGMA_FORMAT_OVERFLOW_IGNORED\n+#define PRAGMA_FORMAT_OVERFLOW_IGNORED\n+#endif\n@@ -69,0 +72,4 @@\n+#ifndef PRAGMA_STRINGOP_OVERFLOW_IGNORED\n+#define PRAGMA_STRINGOP_OVERFLOW_IGNORED\n+#endif\n+\n","filename":"src\/hotspot\/share\/utilities\/compilerWarnings.hpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,0 +47,6 @@\n+#define PRAGMA_FORMAT_OVERFLOW_IGNORED \\\n+  PRAGMA_DISABLE_GCC_WARNING(\"-Wformat-overflow\")\n+\n+#define PRAGMA_STRINGOP_OVERFLOW_IGNORED \\\n+  PRAGMA_DISABLE_GCC_WARNING(\"-Wstringop-overflow\")\n+\n","filename":"src\/hotspot\/share\/utilities\/compilerWarnings_gcc.hpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1629,1 +1629,1 @@\n-            *nargv++ = ((arg + 2) == NULL) ? NULL : JLI_StringDup(arg + 2);\n+            *nargv++ = (arg[2] == '\\0') ? NULL : JLI_StringDup(arg + 2);\n","filename":"src\/java.base\/share\/native\/libjli\/java.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -291,1 +291,0 @@\n-            free(buffer);\n@@ -293,0 +292,1 @@\n+            free(buffer);\n","filename":"src\/java.base\/share\/native\/libjli\/parse_manifest.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -131,1 +131,3 @@\n-    if ((JLI_StrLen(indir) + JLI_StrLen(cmd) + 1)  > PATH_MAX) return 0;\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wformat-truncation\"\n+    if ((JLI_StrLen(indir) + JLI_StrLen(cmd) + 2) > sizeof(name)) return 0;\n@@ -133,0 +135,2 @@\n+#pragma GCC diagnostic pop\n+\n","filename":"src\/java.base\/unix\/native\/libjli\/java_md_common.c","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -180,0 +180,10 @@\n+            \/*\n+             * We can ignore -Wuse-after-free for strBufBegin because we use it\n+             * as a numerical value.\n+             * This option has been introduced in GCC 12\n+             *   https:\/\/gcc.gnu.org\/bugzilla\/show_bug.cgi?id=104075\n+             *\/\n+#if defined(__GNUC__) && __GNUC__ >= 12\n+#pragma GCC diagnostic push\n+#pragma GCC diagnostic ignored \"-Wuse-after-free\"\n+#endif\n@@ -181,0 +191,4 @@\n+#if defined(__GNUC__) && __GNUC__ >= 12\n+#pragma GCC diagnostic pop\n+#endif\n+\n","filename":"src\/jdk.jpackage\/linux\/native\/applauncher\/LinuxPackage.c","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"}]}