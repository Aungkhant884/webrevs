{"files":[{"patch":"@@ -462,1 +462,1 @@\n-        maybe-uninitialized class-memaccess unused-result extra\n+        maybe-uninitialized class-memaccess unused-result extra use-after-free\n","filename":"make\/modules\/java.desktop\/lib\/Awt2dLibraries.gmk","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,0 +66,3 @@\n+\n+PRAGMA_DIAG_PUSH\n+PRAGMA_STRINGOP_OVERFLOW_IGNORED\n@@ -92,0 +95,2 @@\n+PRAGMA_DIAG_POP\n+\n","filename":"src\/hotspot\/share\/classfile\/bytecodeAssembler.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -5966,0 +5966,3 @@\n+\n+PRAGMA_DIAG_PUSH\n+PRAGMA_STRINGOP_OVERFLOW_IGNORED\n@@ -5967,0 +5970,1 @@\n+PRAGMA_DIAG_POP\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -472,0 +472,3 @@\n+\n+PRAGMA_DIAG_PUSH\n+PRAGMA_STRINGOP_OVERFLOW_IGNORED\n@@ -473,0 +476,1 @@\n+PRAGMA_DIAG_POP\n","filename":"src\/hotspot\/share\/classfile\/symbolTable.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -99,0 +99,3 @@\n+\n+PRAGMA_DIAG_PUSH\n+PRAGMA_STRINGOP_OVERFLOW_IGNORED\n@@ -100,0 +103,2 @@\n+PRAGMA_DIAG_POP\n+\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/traceid\/jfrTraceIdBits.inline.hpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1408,0 +1408,1 @@\n+\n@@ -1409,0 +1410,2 @@\n+PRAGMA_DIAG_PUSH\n+PRAGMA_FORMAT_OVERFLOW_IGNORED\n@@ -1412,0 +1415,1 @@\n+PRAGMA_DIAG_POP\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4384,0 +4384,2 @@\n+PRAGMA_DIAG_PUSH\n+PRAGMA_FORMAT_OVERFLOW_IGNORED\n@@ -4385,0 +4387,1 @@\n+PRAGMA_DIAG_POP\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,0 +64,3 @@\n+#ifndef PRAGMA_FORMAT_OVERFLOW_IGNORED\n+#define PRAGMA_FORMAT_OVERFLOW_IGNORED\n+#endif\n@@ -69,0 +72,4 @@\n+#ifndef PRAGMA_STRINGOP_OVERFLOW_IGNORED\n+#define PRAGMA_STRINGOP_OVERFLOW_IGNORED\n+#endif\n+\n","filename":"src\/hotspot\/share\/utilities\/compilerWarnings.hpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,0 +47,6 @@\n+#define PRAGMA_FORMAT_OVERFLOW_IGNORED \\\n+  PRAGMA_DISABLE_GCC_WARNING(\"-Wformat-overflow\")\n+\n+#define PRAGMA_STRINGOP_OVERFLOW_IGNORED \\\n+  PRAGMA_DISABLE_GCC_WARNING(\"-Wstringop-overflow\")\n+\n","filename":"src\/hotspot\/share\/utilities\/compilerWarnings_gcc.hpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -731,2 +731,1 @@\n-extern const char* type2name_tab[T_CONFLICT+1];     \/\/ Map a BasicType to a jchar\n-inline const char* type2name(BasicType t) { return (uint)t < T_CONFLICT+1 ? type2name_tab[t] : NULL; }\n+extern const char* type2name_tab[T_CONFLICT+1];     \/\/ Map a BasicType to a char*\n@@ -735,0 +734,5 @@\n+inline const char* type2name(BasicType t) {\n+  assert((uint)t < T_CONFLICT + 1, \"invalid type\");\n+  return type2name_tab[t];\n+}\n+\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -129,1 +129,2 @@\n-    char name[PATH_MAX + 2], *real;\n+    char name[PATH_MAX + 1], *real;\n+    int snprintf_result;\n@@ -131,2 +132,4 @@\n-    if ((JLI_StrLen(indir) + JLI_StrLen(cmd) + 1)  > PATH_MAX) return 0;\n-    JLI_Snprintf(name, sizeof(name), \"%s%c%s\", indir, FILE_SEPARATOR, cmd);\n+    snprintf_result = JLI_Snprintf(name, sizeof(name), \"%s%c%s\", indir, FILE_SEPARATOR, cmd);\n+    if ((snprintf_result < 0) && (snprintf_result >= (int)sizeof(name))) {\n+      return 0;\n+    }\n","filename":"src\/java.base\/unix\/native\/libjli\/java_md_common.c","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"}]}