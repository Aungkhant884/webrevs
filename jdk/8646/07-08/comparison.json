{"files":[{"patch":"@@ -99,3 +99,0 @@\n-\n-PRAGMA_DIAG_PUSH\n-PRAGMA_STRINGOP_OVERFLOW_IGNORED\n@@ -103,2 +100,0 @@\n-PRAGMA_DIAG_POP\n-\n@@ -140,0 +135,7 @@\n+  \/\/ gcc12 warns \"writing 1 byte into a region of size 0\" when T == Klass.\n+  \/\/ The warning seems to be a false positive.  And there is no warning for\n+  \/\/ other types that use the same mechanisms.  The warning also sometimes\n+  \/\/ goes away with minor code perturbations, such as replacing function calls\n+  \/\/ with equivalent code directly inlined.\n+  PRAGMA_DIAG_PUSH\n+  PRAGMA_DISABLE_GCC_WARNING(\"-Wstringop-overflow\")\n@@ -141,0 +143,1 @@\n+  PRAGMA_DIAG_POP\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/traceid\/jfrTraceIdBits.inline.hpp","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -102,1 +102,11 @@\n-  T* data() const                     { return reinterpret_cast<T*>(reinterpret_cast<uintptr_t>(this) + base_offset_in_bytes()); }\n+\n+  T* data() {\n+    return reinterpret_cast<T*>(\n+      reinterpret_cast<char*>(this) + base_offset_in_bytes());\n+  }\n+\n+  const T* data() const {\n+    return reinterpret_cast<const T*>(\n+      reinterpret_cast<const char*>(this) + base_offset_in_bytes());\n+  }\n+\n","filename":"src\/hotspot\/share\/oops\/array.hpp","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,3 +64,0 @@\n-#ifndef PRAGMA_FORMAT_OVERFLOW_IGNORED\n-#define PRAGMA_FORMAT_OVERFLOW_IGNORED\n-#endif\n@@ -72,4 +69,0 @@\n-#ifndef PRAGMA_STRINGOP_OVERFLOW_IGNORED\n-#define PRAGMA_STRINGOP_OVERFLOW_IGNORED\n-#endif\n-\n","filename":"src\/hotspot\/share\/utilities\/compilerWarnings.hpp","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,6 +47,0 @@\n-#define PRAGMA_FORMAT_OVERFLOW_IGNORED \\\n-  PRAGMA_DISABLE_GCC_WARNING(\"-Wformat-overflow\")\n-\n-#define PRAGMA_STRINGOP_OVERFLOW_IGNORED \\\n-  PRAGMA_DISABLE_GCC_WARNING(\"-Wstringop-overflow\")\n-\n","filename":"src\/hotspot\/share\/utilities\/compilerWarnings_gcc.hpp","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"}]}