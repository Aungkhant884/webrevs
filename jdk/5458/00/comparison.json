{"files":[{"patch":"@@ -123,0 +123,7 @@\n+      ResourceMark rm(THREAD);\n+      char* ex_msg = (char*)\"\";\n+      oop message = java_lang_Throwable::message(PENDING_EXCEPTION);\n+      if (message != NULL) {\n+        ex_msg = java_lang_String::as_utf8_string(message);\n+      }\n+      log_warning(cds)(\"%s: %s\", PENDING_EXCEPTION->klass()->external_name(), ex_msg);\n@@ -469,0 +476,4 @@\n+  \/\/ This tells JVM_FindLoadedClass to not find this class.\n+  ClassLoaderExt::record_result(UNREGISTERED_INDEX, k);\n+  k->clear_shared_class_loader_type();\n+\n@@ -475,4 +486,0 @@\n-  \/\/ This tells JVM_FindLoadedClass to not find this class.\n-  k->set_shared_classpath_index(UNREGISTERED_INDEX);\n-  k->clear_shared_class_loader_type();\n-\n","filename":"src\/hotspot\/share\/cds\/classListParser.cpp","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"classfile\/javaClasses.inline.hpp\"\n@@ -35,0 +36,1 @@\n+#include \"classfile\/symbolTable.hpp\"\n@@ -42,0 +44,1 @@\n+#include \"memory\/oopFactory.hpp\"\n@@ -287,8 +290,80 @@\n-  ClassLoaderData* loader_data = ClassLoaderData::the_null_class_loader_data();\n-  Handle protection_domain;\n-  ClassLoadInfo cl_info(protection_domain);\n-  InstanceKlass* k = KlassFactory::create_from_stream(stream,\n-                                                      name,\n-                                                      loader_data,\n-                                                      cl_info,\n-                                                      CHECK_NULL);\n+  InstanceKlass* k = load_class_impl(name, path, CHECK_NULL);\n+\n+  SystemDictionaryShared::set_shared_class_misc_info(k, (ClassFileStream*)stream);\n+\n+  return k;\n+}\n+\n+class URLClassLoaderTable : public ResourceHashtable<\n+  Symbol*, Handle,\n+  7, \/\/ prime number\n+  ResourceObj::C_HEAP> {};\n+\n+static URLClassLoaderTable* _url_classloader_table = NULL;\n+\n+Handle ClassLoaderExt::create_url_classloader(Symbol* path, TRAPS) {\n+  ResourceMark rm(THREAD);\n+  JavaValue result(T_OBJECT);\n+  Handle path_string = java_lang_String::create_from_str(path->as_C_string(), CHECK_NH);\n+  JavaCalls::call_static(&result,\n+                         vmClasses::jdk_internal_loader_ClassLoaders_klass(),\n+                         vmSymbols::toFileURL_name(),\n+                         vmSymbols::toFileURL_signature(),\n+                         path_string, CHECK_NH);\n+  assert(result.get_type() == T_OBJECT, \"just checking\");\n+  oop url_h = result.get_oop();\n+  objArrayHandle urls = oopFactory::new_objArray_handle(vmClasses::URL_klass(), 1, CHECK_NH);\n+  urls->obj_at_put(0, url_h);\n+\n+  Handle url_classloader = JavaCalls::construct_new_instance(\n+                             vmClasses::URLClassLoader_klass(),\n+                             vmSymbols::url_array_classloader_void_signature(),\n+                             urls, Handle(), CHECK_NH);\n+  return url_classloader;\n+}\n+\n+Handle ClassLoaderExt::create_and_add_url_classloader(Symbol* path, TRAPS) {\n+  Handle url_classloader = create_url_classloader(path, CHECK_NH);\n+  bool added = _url_classloader_table->put(path, url_classloader);\n+  path->increment_refcount();\n+  return url_classloader;\n+}\n+\n+Handle ClassLoaderExt::get_url_classloader(Symbol* path, TRAPS) {\n+  if (_url_classloader_table == NULL) {\n+    _url_classloader_table = new (ResourceObj::C_HEAP, mtClass)URLClassLoaderTable();\n+    Handle url_classloader = create_and_add_url_classloader(path, CHECK_NH);\n+    return url_classloader;\n+  }\n+  Handle* url_classloader_ptr = _url_classloader_table->get(path);\n+  if (url_classloader_ptr != NULL) {\n+    return *url_classloader_ptr;\n+  } else {\n+    Handle url_classloader = create_and_add_url_classloader(path, CHECK_NH);\n+    return url_classloader;\n+  }\n+}\n+\n+InstanceKlass* ClassLoaderExt::load_class_impl(Symbol* name, const char* path, TRAPS) {\n+  assert(name != NULL, \"invariant\");\n+  assert(DumpSharedSpaces, \"this function is only used with -Xshare:dump\");\n+\n+  Symbol* path_symbol = SymbolTable::new_symbol(path);\n+  Handle url_classloader = get_url_classloader(path_symbol, CHECK_NULL);\n+  Handle ext_class_name = java_lang_String::externalize_classname(name, CHECK_NULL);\n+\n+  JavaValue result(T_OBJECT);\n+  JavaCallArguments args(2);\n+  args.set_receiver(url_classloader);\n+  args.push_oop(ext_class_name);\n+  args.push_int(JNI_FALSE);\n+  JavaCalls::call_virtual(&result,\n+                          vmClasses::URLClassLoader_klass(),\n+                          vmSymbols::loadClass_name(),\n+                          vmSymbols::string_boolean_class_signature(),\n+                          &args,\n+                          CHECK_NULL);\n+  assert(result.get_type() == T_OBJECT, \"just checking\");\n+  oop obj = result.get_oop();\n+  InstanceKlass* k = InstanceKlass::cast(java_lang_Class::as_Klass(obj));\n+\n","filename":"src\/hotspot\/share\/classfile\/classLoaderExt.cpp","additions":83,"deletions":8,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -117,0 +117,4 @@\n+  static InstanceKlass* load_class_impl(Symbol* h_name, const char* path, TRAPS);\n+  static Handle create_url_classloader(Symbol* path, TRAPS);\n+  static Handle create_and_add_url_classloader(Symbol* path, TRAPS);\n+  static Handle get_url_classloader(Symbol* path, TRAPS);\n","filename":"src\/hotspot\/share\/classfile\/classLoaderExt.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -454,7 +454,1 @@\n-  if (add_unregistered_class(current, k)) {\n-    MutexLocker mu_r(current, Compile_lock); \/\/ add_to_hierarchy asserts this.\n-    SystemDictionary::add_to_hierarchy(k);\n-    return true;\n-  } else {\n-    return false;\n-  }\n+  return add_unregistered_class(current, k);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -138,0 +138,1 @@\n+  do_klass(URLClassLoader_klass,                        java_net_URLClassLoader                               ) \\\n","filename":"src\/hotspot\/share\/classfile\/vmClassMacros.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -119,0 +119,1 @@\n+  template(java_net_URLClassLoader,                   \"java\/net\/URLClassLoader\")                  \\\n@@ -554,0 +555,1 @@\n+  template(string_boolean_class_signature,            \"(Ljava\/lang\/String;Z)Ljava\/lang\/Class;\")                   \\\n@@ -712,0 +714,1 @@\n+  template(url_array_classloader_void_signature,            \"([Ljava\/net\/URL;Ljava\/lang\/ClassLoader;)V\")          \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3915,2 +3915,2 @@\n-  bool good_state = is_shared() ? (_init_state <= state)\n-                                               : (_init_state < state);\n+  bool good_state = (is_shared() || shared_classpath_index() == UNREGISTERED_INDEX) ?\n+                      (_init_state <= state) : (_init_state < state);\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}