{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -2407,0 +2407,1 @@\n+                    attribExpr(((JCFieldAccess) tree.meth).selected, localEnv, site);\n@@ -2432,0 +2433,2 @@\n+            } else if (site.hasTag(ERROR) && tree.meth.hasTag(SELECT)) {\n+                attribExpr(((JCFieldAccess) tree.meth).selected, localEnv, site);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,100 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8259359\n+ * @summary javac does not attribute unexpected super constructor invocation qualifier, and may crash\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.compiler\/com.sun.tools.javac.api\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run main T8259359\n+ *\/\n+\n+import java.util.List;\n+import java.util.Arrays;\n+\n+import toolbox.ToolBox;\n+import toolbox.TestRunner;\n+import toolbox.JavacTask;\n+import toolbox.Task;\n+\n+public class T8259359 extends TestRunner {\n+    ToolBox tb;\n+\n+    public T8259359() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        new T8259359().runTests();\n+    }\n+\n+    @Test\n+    public void testSuperConstructorCallInErrorClass() throws Exception {\n+        String code = \"\"\"\n+                public class SuperConstructorCallInErrorClass extends Undefined1 {\n+                     public SuperConstructorCallInErrorClass(int i) {\n+                         new Undefined2() { public void test(int i) { Undefined3 u; } }.super();\n+                     }\n+                }\"\"\";\n+        List<String> output = new JavacTask(tb)\n+                .sources(code)\n+                .options(\"-XDshould-stop.at=FLOW\", \"-XDdev\", \"-XDrawDiagnostics\")\n+                .run(Task.Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+        List<String> expected = Arrays.asList(\n+                \"SuperConstructorCallInErrorClass.java:1:55: compiler.err.cant.resolve: kindname.class, Undefined1, , \",\n+                \"SuperConstructorCallInErrorClass.java:3:14: compiler.err.cant.resolve.location: kindname.class, \" +\n+                        \"Undefined2, , , (compiler.misc.location: kindname.class, SuperConstructorCallInErrorClass, null)\",\n+                \"SuperConstructorCallInErrorClass.java:3:55: compiler.err.cant.resolve: kindname.class, Undefined3, , \",\n+                \"3 errors\");\n+        tb.checkEqual(expected, output);\n+    }\n+\n+    @Test\n+    public void testSuperConstructorCallInNormalClass() throws Exception {\n+        String code = \"\"\"\n+                public class SuperConstructorCallInNormalClass {\n+                     public SuperConstructorCallInNormalClass(int i) {\n+                         new Undefined2() { public void test(int i) { Undefined3 u; } }.super();\n+                     }\n+                }\"\"\";\n+        List<String> output = new JavacTask(tb)\n+                .sources(code)\n+                .options(\"-XDshould-stop.at=FLOW\", \"-XDdev\", \"-XDrawDiagnostics\")\n+                .run(Task.Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+        List<String> expected = Arrays.asList(\n+                \"SuperConstructorCallInNormalClass.java:3:72: compiler.err.illegal.qual.not.icls: java.lang.Object\",\n+                \"SuperConstructorCallInNormalClass.java:3:14: compiler.err.cant.resolve.location: kindname.class, \" +\n+                    \"Undefined2, , , (compiler.misc.location: kindname.class, SuperConstructorCallInNormalClass, null)\",\n+                \"SuperConstructorCallInNormalClass.java:3:55: compiler.err.cant.resolve: kindname.class, Undefined3, , \",\n+                \"3 errors\");\n+        tb.checkEqual(expected, output);\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/recovery\/T8259359.java","additions":100,"deletions":0,"binary":false,"changes":100,"status":"added"}]}