{"files":[{"patch":"@@ -91,1 +91,0 @@\n-        CKR_COPY_PROHIBITED(0x0000001AL),\n@@ -175,3 +174,1 @@\n-        CKR_VENDOR_DEFINED(0x80000000L),\n-        CKR_NETSCAPE_CERTDB_FAILED(0xCE534351L),\n-        CKR_NETSCAPE_KEYDB_FAILED(0xCE534352L);\n+        CKR_VENDOR_DEFINED(0x80000000L);\n@@ -186,0 +183,12 @@\n+    public static enum RV_VENDOR {\n+        \/\/ NSS\n+        CKR_NSS_CERTDB_FAILED(0xCE534351L),\n+        CKR_NSS_KEYDB_FAILED(0xCE534352L);\n+\n+        private final long value;\n+\n+        RV_VENDOR(long value) {\n+            this.value = value;\n+        }\n+    };\n+\n@@ -192,2 +201,14 @@\n-        \/\/ for unknown PKCS11 return values, just use hex as its string\n-        return \"unknown PKCS11 error code 0x\" + Functions.toFullHexString((int)errorCode);\n+        \/\/ for unknown PKCS11 return values, use hex as its string\n+        String res = \"0x\" + Functions.toFullHexString((int)errorCode);\n+        \/\/ for vendor-defined values, check the enum for vendors and include\n+        \/\/ potential matches\n+        if ((errorCode & 0x80000000L) != 0) {\n+            \/\/ for unknown PKCS11 return values, just use hex as its string\n+            for (RV_VENDOR r : RV_VENDOR.values()) {\n+                if (r.value == errorCode) {\n+                    res += (\"(\" + r.name() + \")\");\n+                    break;\n+                }\n+            }\n+        }\n+        return res;\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/wrapper\/PKCS11Exception.java","additions":27,"deletions":6,"binary":false,"changes":33,"status":"modified"}]}