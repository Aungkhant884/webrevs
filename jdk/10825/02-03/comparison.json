{"files":[{"patch":"@@ -24,3 +24,1 @@\n-import jdk.test.lib.UIBuilder;\n-\n-import javax.swing.*;\n+import java.rmi.AccessException;\n@@ -31,1 +29,1 @@\n-                    + \". Login or ssh to a different host, install the latest JDK \"\n+                    + \". Login or ssh to a different host, install the JDK under test, \"\n@@ -39,16 +37,0 @@\n-    private volatile boolean abort = false;\n-\n-    protected String readHostInput() {\n-        String host = \"\";\n-        Thread currentThread = Thread.currentThread();\n-        UIBuilder.DialogBuilder db = new UIBuilder.DialogBuilder()\n-                .setTitle(\"NonLocalRegistrTest\")\n-                .setInstruction(instructions)\n-                .setMessage(message)\n-                .setSubmitAction(e -> currentThread.interrupt())\n-                .setCloseAction(() -> {\n-                    abort = true;\n-                    currentThread.interrupt();\n-                });\n-        JTextArea input = db.getMessageText();\n-        JDialog dialog = db.build();\n@@ -56,17 +38,20 @@\n-        SwingUtilities.invokeLater(() -> {\n-            try {\n-                dialog.setVisible(true);\n-            } catch (Exception e) {\n-                throw new RuntimeException(e);\n-            }\n-        });\n-\n-        try {\n-            Thread.sleep(TIMEOUT_MS);\n-            \/\/Timed out, so fail the test\n-            throw new RuntimeException(\n-                    \"Timed out after \" + TIMEOUT_MS \/ 1000 + \" seconds\");\n-        } catch (InterruptedException e) {\n-        } finally {\n-            if (abort) {\n-                throw new RuntimeException(\"TEST ABORTED\");\n+    \/**\n+     * Check the exception chain for the expected AccessException and message.\n+     * @param ex the exception from the remote invocation.\n+     *\/\n+     static void assertIsAccessException(Throwable ex) {\n+        Throwable t = ex;\n+        while (!(t instanceof AccessException) && t.getCause() != null) {\n+            t = t.getCause();\n+        }\n+        if (t instanceof AccessException) {\n+            String msg = t.getMessage();\n+            int asIndex = msg.indexOf(\"Registry\");\n+            int rrIndex = msg.indexOf(\"Registry.Registry\");     \/\/ Obsolete error text\n+            int disallowIndex = msg.indexOf(\"disallowed\");\n+            int nonLocalHostIndex = msg.indexOf(\"non-local host\");\n+            if (asIndex < 0 ||\n+                    rrIndex != -1 ||\n+                    disallowIndex < 0 ||\n+                    nonLocalHostIndex < 0 ) {\n+                throw new RuntimeException(\"exception message is malformed\", t);\n@@ -74,2 +59,3 @@\n-            host = input.getText().replaceAll(message, \"\").strip().trim();\n-            dialog.dispose();\n+            System.out.printf(\"Found expected AccessException: %s%n%n\", t);\n+        } else {\n+            throw new RuntimeException(\"AccessException did not occur when expected\", ex);\n@@ -77,1 +63,0 @@\n-        return host;\n","filename":"test\/jdk\/java\/rmi\/registry\/nonLocalRegistry\/NonLocalRegistryBase.java","additions":25,"deletions":40,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -23,0 +23,1 @@\n+import jdk.test.lib.Utils;\n@@ -61,1 +62,6 @@\n-            host = test.readHostInput();\n+            host = Utils.readHostInput(\n+                    \"NonLocalSkeletonTest\",\n+                    instructions,\n+                    message,\n+                    TIMEOUT_MS\n+            );\n@@ -102,27 +108,0 @@\n-\n-    \/**\n-     * Check the exception chain for the expected AccessException and message.\n-     * @param ex the exception from the remote invocation.\n-     *\/\n-    private static void assertIsAccessException(Throwable ex) {\n-        Throwable t = ex;\n-        while (!(t instanceof AccessException) && t.getCause() != null) {\n-            t = t.getCause();\n-        }\n-        if (t instanceof AccessException) {\n-            String msg = t.getMessage();\n-            int asIndex = msg.indexOf(\"Registry\");\n-            int rrIndex = msg.indexOf(\"Registry.Registry\");     \/\/ Obsolete error text\n-            int disallowIndex = msg.indexOf(\"disallowed\");\n-            int nonLocalHostIndex = msg.indexOf(\"non-local host\");\n-            if (asIndex < 0 ||\n-                    rrIndex != -1 ||\n-                    disallowIndex < 0 ||\n-                    nonLocalHostIndex < 0 ) {\n-                throw new RuntimeException(\"exception message is malformed\", t);\n-            }\n-            System.out.printf(\"Found expected AccessException: %s%n%n\", t);\n-        } else {\n-            throw new RuntimeException(\"AccessException did not occur when expected\", ex);\n-        }\n-    }\n","filename":"test\/jdk\/java\/rmi\/registry\/nonLocalRegistry\/NonLocalRegistryTest.java","additions":7,"deletions":28,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -23,0 +23,1 @@\n+import jdk.test.lib.Utils;\n@@ -51,1 +52,1 @@\n- *\n+ * @library \/test\/lib\n@@ -62,1 +63,1 @@\n- *\n+ * @library \/test\/lib\n@@ -87,1 +88,6 @@\n-            host = test.readHostInput();\n+            host = Utils.readHostInput(\n+                    \"NonLocalSkeletonTest\",\n+                    instructions,\n+                    message,\n+                    TIMEOUT_MS\n+            );\n@@ -152,27 +158,0 @@\n-\n-    \/**\n-     * Check the exception chain for the expected AccessException and message.\n-     * @param ex the exception from the remote invocation.\n-     *\/\n-    private static void assertIsAccessException(Throwable ex) {\n-        Throwable t = ex;\n-        while (!(t instanceof AccessException) && t.getCause() != null) {\n-            t = t.getCause();\n-        }\n-        if (t instanceof AccessException) {\n-            String msg = t.getMessage();\n-            int asIndex = msg.indexOf(\"Registry\");\n-            int rrIndex = msg.indexOf(\"Registry.Registry\");     \/\/ Obsolete error text\n-            int disallowIndex = msg.indexOf(\"disallowed\");\n-            int nonLocalHostIndex = msg.indexOf(\"non-local host\");\n-            if (asIndex < 0 ||\n-                    rrIndex != -1 ||\n-                    disallowIndex < 0 ||\n-                    nonLocalHostIndex < 0 ) {\n-                throw new RuntimeException(\"exception message is malformed\", t);\n-            }\n-            System.out.printf(\"Found expected AccessException: %s%n%n\", t);\n-        } else {\n-            throw new RuntimeException(\"AccessException did not occur when expected\", ex);\n-        }\n-    }\n","filename":"test\/jdk\/java\/rmi\/registry\/nonLocalRegistry\/NonLocalSkeletonTest.java","additions":9,"deletions":30,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-import jdk.test.lib.UIBuilder;\n+import jdk.test.lib.Utils;\n@@ -26,1 +26,0 @@\n-import javax.swing.*;\n@@ -97,1 +96,1 @@\n-                    + \". Login or ssh to a different host, install the latest JDK \"\n+                    + \". Login or ssh to a different host, install the JDK under test, \"\n@@ -109,1 +108,1 @@\n-                    + \". Login or ssh to a different host, install the latest JDK \"\n+                    + \". Login or ssh to a different host, install the JDK under test, \"\n@@ -139,1 +138,6 @@\n-            String input = test.readHostInput(testId);\n+            String input = Utils.readHostInput(\n+                    \"NonLocalJMXRemoteTest\",\n+                    instructions[testId],\n+                    message,\n+                    TIMEOUT_MS\n+            );\n@@ -225,39 +229,0 @@\n-\n-    private String readHostInput(int index) {\n-        String host = \"\";\n-        Thread currentThread = Thread.currentThread();\n-        UIBuilder.DialogBuilder db = new UIBuilder.DialogBuilder()\n-                .setTitle(\"NonLocalRegistrTest\")\n-                .setInstruction(instructions[index])\n-                .setMessage(message)\n-                .setSubmitAction(e -> currentThread.interrupt())\n-                .setCloseAction(() -> {\n-                    abort = true;\n-                    currentThread.interrupt();\n-                });\n-        JTextArea input = db.getMessageText();\n-        JDialog dialog = db.build();\n-\n-        SwingUtilities.invokeLater(() -> {\n-            try {\n-                dialog.setVisible(true);\n-            } catch (Exception e) {\n-                throw new RuntimeException(e);\n-            }\n-        });\n-\n-        try {\n-            Thread.sleep(TIMEOUT_MS);\n-            \/\/Timed out, so fail the test\n-            throw new RuntimeException(\n-                    \"Timed out after \" + TIMEOUT_MS \/ 1000 + \" seconds\");\n-        } catch (InterruptedException e) {\n-        } finally {\n-            if (abort) {\n-                throw new RuntimeException(\"TEST ABORTED\");\n-            }\n-            host = input.getText().replaceAll(message, \"\").strip().trim();\n-            dialog.dispose();\n-        }\n-        return host;\n-    }\n","filename":"test\/jdk\/javax\/management\/remote\/nonLocalAccess\/NonLocalJMXRemoteTest.java","additions":9,"deletions":44,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+import java.util.concurrent.atomic.AtomicBoolean;\n@@ -67,0 +68,2 @@\n+import javax.swing.*;\n+\n@@ -821,0 +824,51 @@\n+\n+    \/**\n+     * Display instruction message with GUI and prompt user input into a text field.\n+     *\n+     * @param title title string\n+     * @param instruction instruction string\n+     * @param message prompt message string\n+     * @param waitTimeMs GUI alive time in milliseconds\n+     *\n+     * @return user input string\n+     *\/\n+    public static String readHostInput(String title, String instruction,\n+            String message, int waitTimeMs) {\n+        String host = \"\";\n+        Thread currentThread = Thread.currentThread();\n+        AtomicBoolean abort = new AtomicBoolean(false);\n+        UIBuilder.DialogBuilder db = new UIBuilder.DialogBuilder()\n+                .setTitle(title)\n+                .setInstruction(instruction)\n+                .setMessage(message)\n+                .setSubmitAction(e -> currentThread.interrupt())\n+                .setCloseAction(() -> {\n+                    abort.set(true);\n+                    currentThread.interrupt();\n+                });\n+        JTextArea input = db.getMessageText();\n+        JDialog dialog = db.build();\n+\n+        SwingUtilities.invokeLater(() -> {\n+            try {\n+                dialog.setVisible(true);\n+            } catch (Exception e) {\n+                throw new RuntimeException(e);\n+            }\n+        });\n+\n+        try {\n+            Thread.sleep(waitTimeMs);\n+            \/\/Timed out, so fail the test\n+            throw new RuntimeException(\n+                    \"Timed out after \" + waitTimeMs \/ 1000 + \" seconds\");\n+        } catch (InterruptedException e) {\n+        } finally {\n+            if (abort.get()) {\n+                throw new RuntimeException(\"TEST ABORTED\");\n+            }\n+            host = input.getText().replaceAll(message, \"\").strip().trim();\n+            dialog.dispose();\n+        }\n+        return host;\n+    }\n","filename":"test\/lib\/jdk\/test\/lib\/Utils.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"modified"}]}