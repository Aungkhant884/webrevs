{"files":[{"patch":"@@ -608,1 +608,0 @@\n-    java\/rmi\/registry\/nonLocalRegistry\/NonLocalRegistryTest.java \\\n@@ -645,2 +644,4 @@\n-    sun\/security\/tools\/keytool\/i18n.java\n-\n+    sun\/security\/tools\/keytool\/i18n.java \\\n+    java\/rmi\/registry\/nonLocalRegistry\/NonLocalRegistryTest.java \\\n+    java\/rmi\/registry\/nonLocalRegistry\/NonLocalSkeletonTest.java \\\n+    javax\/management\/remote\/nonLocalAccess\/NonLocalJMXRemoteTest.java\n","filename":"test\/jdk\/TEST.groups","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.rmi.AccessException;\n+\n+public class NonLocalRegistryBase {\n+    static final String instructions =\n+            \"This is a manual test that requires rmiregistry run on a different host\"\n+                    + \". Login or ssh to a different host, install the JDK under test, \"\n+                    + \"build and invoke:\\n\\n\"\n+                    + \"$JDK_HOME\/bin\/rmiregistry\"\n+                    + \"\\n\\nRegistry service is run in the background without any \"\n+                    + \"output. Enter the hostname or IP address of the different \"\n+                    + \"host below and continue the test.\";\n+    static final String message = \"Enter the hostname or IP address here and submit:\";\n+    static final int TIMEOUT_MS = 1200000;\n+\n+    \/**\n+     * Check the exception chain for the expected AccessException and message.\n+     * @param ex the exception from the remote invocation.\n+     *\/\n+     static void assertIsAccessException(Throwable ex) {\n+        Throwable t = ex;\n+        while (!(t instanceof AccessException) && t.getCause() != null) {\n+            t = t.getCause();\n+        }\n+        if (t instanceof AccessException) {\n+            String msg = t.getMessage();\n+            int asIndex = msg.indexOf(\"Registry\");\n+            int rrIndex = msg.indexOf(\"Registry.Registry\");     \/\/ Obsolete error text\n+            int disallowIndex = msg.indexOf(\"disallowed\");\n+            int nonLocalHostIndex = msg.indexOf(\"non-local host\");\n+            if (asIndex < 0 ||\n+                    rrIndex != -1 ||\n+                    disallowIndex < 0 ||\n+                    nonLocalHostIndex < 0 ) {\n+                throw new RuntimeException(\"exception message is malformed\", t);\n+            }\n+            System.out.printf(\"Found expected AccessException: %s%n%n\", t);\n+        } else {\n+            throw new RuntimeException(\"AccessException did not occur when expected\", ex);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/rmi\/registry\/nonLocalRegistry\/NonLocalRegistryBase.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -23,0 +23,1 @@\n+import jdk.test.lib.Utils;\n@@ -25,1 +26,0 @@\n-import java.rmi.AccessException;\n@@ -28,0 +28,1 @@\n+import java.util.Arrays;\n@@ -34,1 +35,2 @@\n- * @run main\/othervm\/manual -Dregistry.host=rmi-registry-host NonLocalRegistryTest\n+ * @library \/test\/lib\n+ * @run main\/manual NonLocalRegistryTest\n@@ -49,2 +51,3 @@\n- * On the first host modify the @run command above to replace \"rmi-registry-host\"\n- * with the hostname or IP address of the different host and run the test with jtreg.\n+ * On the first host, run the test and provide the hostname or IP address of the\n+ * different host when prompted in the console, or run jtreg command with system\n+ * property -Dregistry.host set to the hostname or IP address of the different host.\n@@ -52,1 +55,1 @@\n-public class NonLocalRegistryTest {\n+public class NonLocalRegistryTest extends NonLocalRegistryBase {\n@@ -55,1 +58,0 @@\n-\n@@ -58,1 +60,11 @@\n-            throw new RuntimeException(\"Specify host with system property: -Dregistry.host=<host>\");\n+            NonLocalRegistryBase test = new NonLocalRegistryTest();\n+            host = Utils.readHostInput(\n+                    \"NonLocalSkeletonTest\",\n+                    instructions,\n+                    message,\n+                    TIMEOUT_MS\n+            );\n+            if (host == null || host.isEmpty()) {\n+                throw new RuntimeException(\n+                        \"supply a remote host with -Dregistry.host=hostname\");\n+            }\n@@ -63,2 +75,5 @@\n-        Set<InetAddress> myAddrs = Set.of(InetAddress.getAllByName(myHostName));\n-        Set<InetAddress> hostAddrs = Set.of(InetAddress.getAllByName(host));\n+        \/\/ Eliminate duplicate IP address and save result into an unmodifiable set.\n+        Set<InetAddress> myAddrs =\n+                Set.copyOf(Arrays.asList(InetAddress.getAllByName(myHostName)));\n+        Set<InetAddress> hostAddrs =\n+                Set.copyOf(Arrays.asList(InetAddress.getAllByName(host)));\n@@ -93,27 +108,0 @@\n-\n-    \/**\n-     * Check the exception chain for the expected AccessException and message.\n-     * @param ex the exception from the remote invocation.\n-     *\/\n-    private static void assertIsAccessException(Throwable ex) {\n-        Throwable t = ex;\n-        while (!(t instanceof AccessException) && t.getCause() != null) {\n-            t = t.getCause();\n-        }\n-        if (t instanceof AccessException) {\n-            String msg = t.getMessage();\n-            int asIndex = msg.indexOf(\"Registry\");\n-            int rrIndex = msg.indexOf(\"Registry.Registry\");     \/\/ Obsolete error text\n-            int disallowIndex = msg.indexOf(\"disallowed\");\n-            int nonLocalHostIndex = msg.indexOf(\"non-local host\");\n-            if (asIndex < 0 ||\n-                    rrIndex != -1 ||\n-                    disallowIndex < 0 ||\n-                    nonLocalHostIndex < 0 ) {\n-                throw new RuntimeException(\"exception message is malformed\", t);\n-            }\n-            System.out.printf(\"Found expected AccessException: %s%n%n\", t);\n-        } else {\n-            throw new RuntimeException(\"AccessException did not occur when expected\", ex);\n-        }\n-    }\n","filename":"test\/jdk\/java\/rmi\/registry\/nonLocalRegistry\/NonLocalRegistryTest.java","additions":25,"deletions":37,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -23,0 +23,1 @@\n+import jdk.test.lib.Utils;\n@@ -32,1 +33,0 @@\n-import java.rmi.AccessException;\n@@ -46,1 +46,1 @@\n- * @library ..\/..\/testlibrary\n+ * @library ..\/..\/testlibrary \/test\/lib\n@@ -51,0 +51,1 @@\n+ * @library \/test\/lib\n@@ -56,1 +57,1 @@\n- * @library ..\/..\/testlibrary\n+ * @library ..\/..\/testlibrary \/test\/lib\n@@ -61,1 +62,2 @@\n- * @run main\/othervm\/manual -Dregistry.host=rmi-registry-host NonLocalSkeletonTest\n+ * @library \/test\/lib\n+ * @run main\/othervm\/manual NonLocalSkeletonTest\n@@ -79,1 +81,1 @@\n-public class NonLocalSkeletonTest {\n+public class NonLocalSkeletonTest extends NonLocalRegistryBase {\n@@ -84,1 +86,11 @@\n-            throw new RuntimeException(\"supply a remote host with -Dregistry.host=hostname\");\n+            NonLocalRegistryBase test = new NonLocalSkeletonTest();\n+            host = Utils.readHostInput(\n+                    \"NonLocalSkeletonTest\",\n+                    instructions,\n+                    message,\n+                    TIMEOUT_MS\n+            );\n+            if (host == null || host.isEmpty()) {\n+                throw new RuntimeException(\n+                        \"supply a remote host with -Dregistry.host=hostname\");\n+            }\n@@ -89,2 +101,5 @@\n-        Set<InetAddress> myAddrs = Set.copyOf(Arrays.asList(InetAddress.getAllByName(myHostName)));\n-        Set<InetAddress> hostAddrs = Set.copyOf(Arrays.asList(InetAddress.getAllByName(host)));\n+        \/\/ Eliminate duplicate IP address and save result into an unmodifiable set.\n+        Set<InetAddress> myAddrs =\n+                Set.copyOf(Arrays.asList(InetAddress.getAllByName(myHostName)));\n+        Set<InetAddress> hostAddrs =\n+                Set.copyOf(Arrays.asList(InetAddress.getAllByName(host)));\n@@ -145,27 +160,0 @@\n-\n-    \/**\n-     * Check the exception chain for the expected AccessException and message.\n-     * @param ex the exception from the remote invocation.\n-     *\/\n-    private static void assertIsAccessException(Throwable ex) {\n-        Throwable t = ex;\n-        while (!(t instanceof AccessException) && t.getCause() != null) {\n-            t = t.getCause();\n-        }\n-        if (t instanceof AccessException) {\n-            String msg = t.getMessage();\n-            int asIndex = msg.indexOf(\"Registry\");\n-            int rrIndex = msg.indexOf(\"Registry.Registry\");     \/\/ Obsolete error text\n-            int disallowIndex = msg.indexOf(\"disallowed\");\n-            int nonLocalHostIndex = msg.indexOf(\"non-local host\");\n-            if (asIndex < 0 ||\n-                    rrIndex != -1 ||\n-                    disallowIndex < 0 ||\n-                    nonLocalHostIndex < 0 ) {\n-                throw new RuntimeException(\"exception message is malformed\", t);\n-            }\n-            System.out.printf(\"Found expected AccessException: %s%n%n\", t);\n-        } else {\n-            throw new RuntimeException(\"AccessException did not occur when expected\", ex);\n-        }\n-    }\n","filename":"test\/jdk\/java\/rmi\/registry\/nonLocalRegistry\/NonLocalSkeletonTest.java","additions":24,"deletions":36,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022 Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,2 @@\n+import jdk.test.lib.Utils;\n+\n@@ -29,0 +31,1 @@\n+import java.util.Arrays;\n@@ -35,1 +38,10 @@\n- * @run main\/othervm\/manual -Djmx-registry.host=jmx-registry-host -Djmx-registry.port=jmx-registry-port NonLocalJMXRemoteTest\n+ * @library \/test\/lib\n+ * @run main\/othervm\/manual NonLocalJMXRemoteTest 0\n+ *\/\n+\n+\/* @test\n+ * @bug 8174770\n+ * @summary Verify that JMX Registry rejects non-local access for bind, unbind, rebind.\n+ *    The test is manual because the (non-local) host and port running JMX must be supplied as properties.\n+ * @library \/test\/lib\n+ * @run main\/othervm\/manual NonLocalJMXRemoteTest 1\n@@ -66,1 +78,1 @@\n- * replace \"jmx-registry-host\" with the hostname or IP address of the remote host\n+ * replace \"registry-host\" with the hostname or IP address of the remote host\n@@ -74,1 +86,1 @@\n- *         -J-Dcom.sun.management.jmxremote.host=\"jmx-registry-host\"\n+ *         -J-Dcom.sun.management.jmxremote.host=\"registry-host\"\n@@ -82,0 +94,33 @@\n+    static final String[] instructions = new String[]{\n+            \"This is a manual test that requires rmiregistry run on a different host\"\n+                    + \". Login or ssh to a different host, install the JDK under test, \"\n+                    + \"build and invoke:\\n\\n\"\n+                    + \"$JDK_HOME\/bin\/rmiregistry \\\\\\n\"\n+                    + \"-J-Dcom.sun.management.jmxremote.port=8888 \\\\\\n\"\n+                    + \"-J-Dcom.sun.management.jmxremote.local.only=false \\\\\\n\"\n+                    + \"-J-Dcom.sun.management.jmxremote.ssl=false \\\\\\n\"\n+                    + \"-J-Dcom.sun.management.jmxremote.authenticate=false\"\n+                    + \"\\n\\nRegistry service is run in the background without any \"\n+                    + \"output. Enter the hostname or IP address of the different \"\n+                    + \"host and the port separated by a semicolon below and continue \"\n+                    + \"the test.\",\n+            \"This is a manual test that requires rmiregistry run on a different host\"\n+                    + \". Login or ssh to a different host, install the JDK under test, \"\n+                    + \"build and invoke :\\n\"\n+                    + \"(Stop the current running rmi server by typing Ctrl-C)\\n\\n\"\n+                    + \"$JDK_HOME\/bin\/rmiregistry \\\\\\n\"\n+                    + \"-J-Dcom.sun.management.jmxremote.port=8888 \\\\\\n\"\n+                    + \"-J-Dcom.sun.management.jmxremote.local.only=false \\\\\\n\"\n+                    + \"-J-Dcom.sun.management.jmxremote.ssl=false \\\\\\n\"\n+                    + \"-J-Dcom.sun.management.jmxremote.authenticate=false \\\\\\n\"\n+                    + \"-J-Dcom.sun.management.jmxremote.host=<registry-host>\"\n+                    + \"\\n\\nRegistry service is run in the background without any \"\n+                    + \"output. Enter the hostname or IP address of the different \"\n+                    + \"host and the port separated by a semicolon below and continue \"\n+                    + \"the test.\"\n+                    + \"\\n\\n\",\n+    };\n+    static final String message = \"Enter <registry.host>:<port> and submit:\";\n+    static final int TIMEOUT_MS = 3600000;\n+    private volatile boolean abort = false;\n+\n@@ -84,7 +129,31 @@\n-        String host = System.getProperty(\"jmx-registry.host\");\n-        if (host == null || host.isEmpty()) {\n-            throw new RuntimeException(\"Specify host with system property: -Djmx-registry.host=<host>\");\n-        }\n-        int port = Integer.getInteger(\"jmx-registry.port\", -1);\n-        if (port <= 0) {\n-            throw new RuntimeException(\"Specify port with system property: -Djmx-registry.port=<port>\");\n+        String host = System.getProperty(\"registry.host\");\n+        int port = Integer.getInteger(\"registry.port\", -1);\n+        if (host == null || host.isEmpty() || port <= 0) {\n+            NonLocalJMXRemoteTest test = new NonLocalJMXRemoteTest();\n+\n+            int testId = 0;\n+            if (args.length > 0) {\n+                testId = Integer.valueOf(args[0]);\n+            }\n+            String input = Utils.readHostInput(\n+                    \"NonLocalJMXRemoteTest\",\n+                    instructions[testId],\n+                    message,\n+                    TIMEOUT_MS\n+            );\n+            String[] hostAndPort = input.split(\":\");\n+\n+            if (hostAndPort.length >= 1) {\n+                host = hostAndPort[0];\n+                port = 8888;\n+            }\n+\n+            if (hostAndPort.length == 2) {\n+                port = Integer.valueOf(hostAndPort[1]);\n+            }\n+\n+            if (host == null || host.isEmpty() || port <= 0) {\n+                throw new RuntimeException(\n+                        \"Specify host with system property: -Dregistry\"\n+                                + \".host=<host> and -Dregistry.port=<port>\");\n+            }\n@@ -95,2 +164,5 @@\n-        Set<InetAddress> myAddrs = Set.of(InetAddress.getAllByName(myHostName));\n-        Set<InetAddress> hostAddrs = Set.of(InetAddress.getAllByName(host));\n+        \/\/ Eliminate duplicate IP address and save result into an unmodifiable set.\n+        Set<InetAddress> myAddrs =\n+                Set.copyOf(Arrays.asList(InetAddress.getAllByName(myHostName)));\n+        Set<InetAddress> hostAddrs =\n+                Set.copyOf(Arrays.asList(InetAddress.getAllByName(host)));\n@@ -99,1 +171,2 @@\n-            throw new RuntimeException(\"Error: property 'jmx-registry.host' must not be the local host%n\");\n+            throw new RuntimeException(\n+                    \"Error: property 'jmx-registry.host' must not be the local host%n\");\n","filename":"test\/jdk\/javax\/management\/remote\/nonLocalAccess\/NonLocalJMXRemoteTest.java","additions":87,"deletions":14,"binary":false,"changes":101,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+        private JButton submit;\n@@ -58,1 +59,1 @@\n-            instructionsText = new JTextArea(\"\", 5, 100);\n+            instructionsText = new JTextArea(\"\", 12, 100);\n@@ -72,0 +73,1 @@\n+            pass.setVisible(false);\n@@ -76,1 +78,7 @@\n-            buttons.add(\"West\", fail);\n+            fail.setVisible(false);\n+            buttons.add(\"Center\", fail);\n+\n+            submit = new JButton(\"submit\");\n+            submit.setActionCommand(\"submit\");\n+            submit.setVisible(false);\n+            buttons.add(\"West\", submit);\n@@ -120,0 +128,1 @@\n+            pass.setVisible(true);\n@@ -131,0 +140,13 @@\n+            fail.setVisible(true);\n+            return this;\n+        }\n+\n+        \/**\n+         * Returns this {@code DialogBuilder} setting submit button action to\n+         * {@link java.awt.event.ActionListener}.\n+         * @param action an action to perform on button click\n+         * @returns this DialogBuilder\n+         *\/\n+        public DialogBuilder setSubmitAction(ActionListener action) {\n+            submit.addActionListener(action);\n+            submit.setVisible(true);\n@@ -137,1 +159,1 @@\n-         * @param action a runnerable action to perform on window close\n+         * @param action a runnable action to perform on window close\n@@ -159,0 +181,8 @@\n+\n+        \/**\n+         * Returns the message {@link javax.swing.JTextArea} .\n+         * @returns a JTextArea\n+         *\/\n+        public JTextArea getMessageText() {\n+            return messageText;\n+        }\n","filename":"test\/lib\/jdk\/test\/lib\/UIBuilder.java","additions":33,"deletions":3,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-import java.util.Set;\n+import java.util.concurrent.atomic.AtomicBoolean;\n@@ -72,0 +72,1 @@\n+import java.util.Set;\n@@ -78,0 +79,2 @@\n+import javax.swing.*;\n+\n@@ -838,0 +841,51 @@\n+    \/**\n+     * Display instruction message with GUI and prompt user input into a text field.\n+     *\n+     * @param title title string\n+     * @param instruction instruction string\n+     * @param message prompt message string\n+     * @param waitTimeMs GUI alive time in milliseconds\n+     *\n+     * @return user input string\n+     *\/\n+    public static String readHostInput(String title, String instruction,\n+            String message, int waitTimeMs) {\n+        String host = \"\";\n+        Thread currentThread = Thread.currentThread();\n+        AtomicBoolean abort = new AtomicBoolean(false);\n+        UIBuilder.DialogBuilder db = new UIBuilder.DialogBuilder()\n+                .setTitle(title)\n+                .setInstruction(instruction)\n+                .setMessage(message)\n+                .setSubmitAction(e -> currentThread.interrupt())\n+                .setCloseAction(() -> {\n+                    abort.set(true);\n+                    currentThread.interrupt();\n+                });\n+        JTextArea input = db.getMessageText();\n+        JDialog dialog = db.build();\n+\n+        SwingUtilities.invokeLater(() -> {\n+            try {\n+                dialog.setVisible(true);\n+            } catch (Exception e) {\n+                throw new RuntimeException(e);\n+            }\n+        });\n+\n+        try {\n+            Thread.sleep(waitTimeMs);\n+            \/\/Timed out, so fail the test\n+            throw new RuntimeException(\n+                    \"Timed out after \" + waitTimeMs \/ 1000 + \" seconds\");\n+        } catch (InterruptedException e) {\n+        } finally {\n+            if (abort.get()) {\n+                throw new RuntimeException(\"TEST ABORTED\");\n+            }\n+            host = input.getText().replaceAll(message, \"\").strip().trim();\n+            dialog.dispose();\n+        }\n+        return host;\n+    }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/Utils.java","additions":55,"deletions":1,"binary":false,"changes":56,"status":"modified"}]}