{"files":[{"patch":"@@ -33,1 +33,0 @@\n-import sun.invoke.util.VerifyType;\n@@ -632,1 +631,1 @@\n-        if (ftype.isPrimitive())\n+        if (ftype.isPrimitive()) {\n@@ -634,1 +633,2 @@\n-        else if (VerifyType.isNullReferenceConversion(Object.class, ftype))\n+        } else if (ftype.isInterface() || ftype.isAssignableFrom(Object.class)) {\n+            \/\/ retyping can be done without a cast\n@@ -636,1 +636,1 @@\n-        else\n+        } else {\n@@ -638,0 +638,1 @@\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -88,13 +88,0 @@\n-    \/**\n-     * Specialization of isNullConversion to reference types.\n-     * @param src the type of a stacked value\n-     * @param dst the reference type by which we'd like to treat it\n-     * @return whether the retyping can be done without a cast\n-     *\/\n-    public static boolean isNullReferenceConversion(Class<?> src, Class<?> dst) {\n-        assert(!dst.isPrimitive());\n-        if (dst.isInterface())  return true;   \/\/ verifier allows this\n-        if (isNullType(src))    return true;\n-        return dst.isAssignableFrom(src);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/invoke\/util\/VerifyType.java","additions":0,"deletions":13,"binary":false,"changes":13,"status":"modified"}]}