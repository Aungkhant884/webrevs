{"files":[{"patch":"@@ -98,1 +98,1 @@\n-    private static final char paddingCharacter = 'a';\n+    private static final char paddingCharacter = '#';\n@@ -264,16 +264,0 @@\n-    private String stableLambdaNameHash(String name) {\n-        StringBuilder[] hashFragments = new StringBuilder[]{new StringBuilder(), new StringBuilder()};\n-        int n = name.length();\n-\n-        for (int i = 0; i < n; i++) {\n-            hashFragments[i % hashFragments.length].append(name.charAt(i));\n-        }\n-\n-        StringBuilder stableNameHash = new StringBuilder();\n-        for (StringBuilder sb : hashFragments) {\n-            stableNameHash.append(fixedSizeStringHash(sb.toString()));\n-        }\n-\n-        return stableNameHash.toString();\n-    }\n-\n@@ -306,1 +290,1 @@\n-        name += stableLambdaNameHash(hashData.toString());\n+        name += fixedSizeStringHash(hashData.toString());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java","additions":2,"deletions":18,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -249,0 +249,9 @@\n+    private static void createMethodReferencesLambdas(Set<String> lambdaNames) {\n+        Runnable lambda = TestStableLambdaName::foo;\n+        lambdaNames.add(removeHashFromLambdaName(lambda.getClass().getName()));\n+    }\n+\n+    private static void foo() {\n+        System.out.println(\"Hello world!\");\n+    }\n+\n@@ -273,0 +282,3 @@\n+\n+        \/\/ Method reference lambdas\n+        createMethodReferencesLambdas(lambdaNames);\n","filename":"test\/jdk\/java\/lang\/invoke\/lambda\/TestStableLambdaName.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"}]}