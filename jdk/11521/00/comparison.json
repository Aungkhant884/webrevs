{"files":[{"patch":"@@ -101,1 +101,1 @@\n-                iconSwap(resourceLock, icon.toString());\n+                iconSwapWrapper(resourceLock, icon.toString());\n@@ -211,4 +211,2 @@\n-        if (versionSwap(resourceLock, propList.toArray(String[]::new)) != 0) {\n-            throw new RuntimeException(MessageFormat.format(\n-                    I18N.getString(\"error.version-swap\"), target));\n-        }\n+        versionSwapWrapper(resourceLock, propList.toArray(String[]::new),\n+                target.toString());\n@@ -231,0 +229,16 @@\n+    private static void iconSwapWrapper(long resourceLock,\n+            String iconTarget) {\n+        if (iconSwap(resourceLock, iconTarget) != 0) {\n+            throw new RuntimeException(MessageFormat.format(I18N.getString(\n+                    \"error.icon-swap\"), iconTarget));\n+        }\n+    }\n+\n+    private static void versionSwapWrapper(long resourceLock,\n+            String[] executableProperties, String target) {\n+        if (versionSwap(resourceLock, executableProperties) != 0) {\n+            throw new RuntimeException(MessageFormat.format(I18N.getString(\n+                    \"error.version-swap\"), target));\n+        }\n+    }\n+\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/ExecutableRebrander.java","additions":19,"deletions":5,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+error.icon-swap=Failed to update icon for {0}\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/resources\/WinResources.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+error.icon-swap=Failed to update icon for {0}\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/resources\/WinResources_de.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+error.icon-swap=Failed to update icon for {0}\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/resources\/WinResources_ja.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+error.icon-swap=Failed to update icon for {0}\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/resources\/WinResources_zh_CN.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -172,3 +172,3 @@\n-                iconSwap = executableRebranderClass.getDeclaredMethod(\"iconSwap\",\n-                        long.class, String.class);\n-                iconSwap.setAccessible(true);\n+                iconSwapWrapper = executableRebranderClass.getDeclaredMethod(\n+                        \"iconSwapWrapper\", long.class, String.class);\n+                iconSwapWrapper.setAccessible(true);\n@@ -183,0 +183,11 @@\n+            \/\/ Run .NET code to extract icon from the given executable.\n+            \/\/ ExtractAssociatedIcon() will succeed even if the target file\n+            \/\/ is locked (by an antivirus). It will output a default icon\n+            \/\/ in case of error. To prevent this \"fail safe\" behavior we try\n+            \/\/ lock the target file with Open() call. If the attempt\n+            \/\/ fails ExtractAssociatedIcon() is not called and the script exits\n+            \/\/ with the exit code that will be trapped\n+            \/\/ inside of Executor.executeAndRepeatUntilExitCode() method that\n+            \/\/ will keep running the script until it succeeds or the number of\n+            \/\/ allowed attempts is exceeded.\n+\n@@ -185,0 +196,3 @@\n+                    String.format(\n+                            \"try { [System.io.File]::Open('%s', 'Open', 'Read', 'None') } catch { exit 100 }\",\n+                            executable.toAbsolutePath().normalize()),\n@@ -192,1 +206,1 @@\n-                    script).execute();\n+                    script).executeAndRepeatUntilExitCode(0, 5, 10);\n@@ -233,1 +247,1 @@\n-                        iconSwap.invoke(null, new Object[]{lock,\n+                        iconSwapWrapper.invoke(null, new Object[]{lock,\n@@ -253,1 +267,1 @@\n-        private final Method iconSwap;\n+        private final Method iconSwapWrapper;\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/LauncherIconVerifier.java","additions":20,"deletions":6,"binary":false,"changes":26,"status":"modified"}]}