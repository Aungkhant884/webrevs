{"files":[{"patch":"@@ -0,0 +1,186 @@\n+\/*\n+ * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Dimension;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+import javax.swing.JEditorPane;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UIManager.LookAndFeelInfo;\n+import javax.swing.UnsupportedLookAndFeelException;\n+\n+\n+import static javax.swing.UIManager.getInstalledLookAndFeels;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4666101\n+ * @summary Verifies that in a JEditorPane, the down arrow is honoured after you\n+            add text on a line preceding a blank line.\n+ * @run main JEditorPaneNavigationTest\n+ *\/\n+public class JEditorPaneNavigationTest {\n+\n+    private static volatile int caretPos;\n+    private static JEditorPane jep;\n+    private static JFrame frame;\n+    private static Robot robot;\n+\n+\n+    public static void main(String[] args) throws Exception {\n+        runTest();\n+    }\n+\n+    private static void runTest() throws Exception {\n+        robot = new Robot();\n+        robot.setAutoWaitForIdle(true);\n+        robot.setAutoDelay(100);\n+\n+        List<String> lafs = Arrays.stream(getInstalledLookAndFeels())\n+                                  .map(LookAndFeelInfo::getClassName)\n+                                  .collect(Collectors.toList());\n+        for (final String laf : lafs) {\n+            try {\n+                AtomicBoolean lafSetSuccess = new AtomicBoolean(false);\n+                SwingUtilities.invokeAndWait(() -> {\n+                    lafSetSuccess.set(setLookAndFeel(laf));\n+                    if (lafSetSuccess.get()) {\n+                        createUI();\n+                    }\n+                });\n+                if (!lafSetSuccess.get()) {\n+                    continue;\n+                }\n+                robot.waitForIdle();\n+\n+                AtomicReference<Point> pt = new AtomicReference<>();\n+                SwingUtilities.invokeAndWait(() -> pt.set(jep.getLocationOnScreen()));\n+                caretPos = 0;\n+                final Point jEditorLoc = pt.get();\n+\n+                \/\/ Click on JEditorPane\n+                robot.mouseMove((int) jEditorLoc.getX() + 50, (int) jEditorLoc.getY() + 50);\n+                robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+                robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+                keyType(KeyEvent.VK_ENTER);\n+                keyType(KeyEvent.VK_ENTER);\n+\n+                typeSomeText();\n+\n+                keyType(KeyEvent.VK_UP);\n+                keyType(KeyEvent.VK_UP);\n+\n+                typeSomeText();\n+\n+                keyType(KeyEvent.VK_DOWN);\n+\n+                System.out.println(\" test1 caret pos = \" + caretPos);\n+\n+                \/\/ Check whether the caret position is at the expected value 5\n+                if (caretPos != 5) {\n+                    throw new RuntimeException(\"Test Failed in \" + laf\n+                            + \" expected initial caret position is 5, but actual is \" + caretPos);\n+                }\n+\n+                keyType(KeyEvent.VK_DOWN);\n+\n+                System.out.println(\" test2 caret pos = \" + caretPos);\n+\n+                \/\/ Check whether the caret position is at the expected value 10\n+                if (caretPos != 10) {\n+                    throw new RuntimeException(\"Test Failed in \" + laf\n+                            + \" expected final caret position is 10, but actual is \" + caretPos);\n+                }\n+\n+                System.out.println(\"Test Passed in \" + laf);\n+\n+            } finally {\n+                SwingUtilities.invokeAndWait(JEditorPaneNavigationTest::disposeFrame);\n+            }\n+        }\n+    }\n+\n+    private static void typeSomeText() {\n+        keyType(KeyEvent.VK_T);\n+        keyType(KeyEvent.VK_E);\n+        keyType(KeyEvent.VK_X);\n+        keyType(KeyEvent.VK_T);\n+\n+    }\n+\n+    private static void keyType(int keyCode) {\n+        robot.keyPress(keyCode);\n+        robot.keyRelease(keyCode);\n+    }\n+\n+\n+    private static void createUI() {\n+        frame = new JFrame();\n+        jep = new JEditorPane();\n+        jep.setPreferredSize(new Dimension(100, 100));\n+        jep.addCaretListener(e -> caretPos = jep.getCaretPosition());\n+        jep.setEditable(true);\n+        JPanel panel = new JPanel();\n+        panel.add(jep);\n+        frame.add(panel);\n+        frame.setLocationRelativeTo(null);\n+        frame.setAlwaysOnTop(true);\n+        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n+        frame.pack();\n+        frame.setVisible(true);\n+\n+    }\n+\n+    private static boolean setLookAndFeel(String lafName) {\n+        try {\n+            UIManager.setLookAndFeel(lafName);\n+        } catch (UnsupportedLookAndFeelException ignored) {\n+            System.out.println(\"Ignoring Unsupported laf : \" + lafName);\n+            return false;\n+        } catch (ClassNotFoundException | InstantiationException\n+                | IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return true;\n+    }\n+\n+    private static void disposeFrame() {\n+        if (frame != null) {\n+            frame.dispose();\n+            frame = null;\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/javax\/swing\/JEditorPane\/4666101\/JEditorPaneNavigationTest.java","additions":186,"deletions":0,"binary":false,"changes":186,"status":"added"}]}