{"files":[{"patch":"@@ -111,2 +111,2 @@\n-                                                      bool if_cont_is_true_proj, bool unswitch_is_slow_loop,\n-                                                      Node_List* old_new) {\n+                                                      bool if_cont_is_true_proj, Node_List* old_new,\n+                                                      UnswitchingAction unswitching_action) {\n@@ -192,1 +192,0 @@\n-  bool unswitch_clone_for_fast_loop = old_new != NULL && uncommon_proj->outcnt() > 1;\n@@ -199,1 +198,2 @@\n-      if (unswitch_clone_for_fast_loop && !phi_input->is_CFG() && !phi_input->is_Phi() && get_ctrl(phi_input) == uncommon_proj) {\n+      if (unswitching_action == UnswitchingAction::FastLoopCloning\n+          && !phi_input->is_CFG() && !phi_input->is_Phi() && get_ctrl(phi_input) == uncommon_proj) {\n@@ -205,1 +205,1 @@\n-        assert(LoopUnswitching && !unswitch_is_slow_loop, \"not slow loop\");\n+        assert(LoopUnswitching, \"sanity check\");\n@@ -207,1 +207,1 @@\n-      } else if (unswitch_is_slow_loop) {\n+      } else if (unswitching_action == UnswitchingAction::SlowLoopRewiring) {\n@@ -210,1 +210,1 @@\n-        assert(LoopUnswitching && !unswitch_clone_for_fast_loop, \"not fast loop\");\n+        assert(LoopUnswitching, \"sanity check\");\n@@ -218,1 +218,1 @@\n-  if (unswitch_is_slow_loop) {\n+  if (unswitching_action == UnswitchingAction::SlowLoopRewiring) {\n@@ -296,5 +296,6 @@\n-  bool is_slow_loop = false;\n-  if (old_new == NULL && predicate_proj->other_if_proj()->outcnt() > 1) {\n-    \/\/ Only set this flag if we already cloned some nodes for the fast loop before and now need to rewire\n-    \/\/ data nodes for the slow loop.\n-    is_slow_loop = true;\n+  UnswitchingAction unswitching_action;\n+  if (predicate_proj->other_if_proj()->outcnt() > 1) {\n+    \/\/ There are some data dependencies that need to be taken care of when cloning a predicate.\n+    unswitching_action = old_new == NULL ? UnswitchingAction::SlowLoopRewiring : UnswitchingAction::FastLoopCloning;\n+  } else {\n+    unswitching_action = UnswitchingAction::None;\n@@ -304,1 +305,1 @@\n-                                                             true, is_slow_loop, old_new);\n+                                                             true, old_new, unswitching_action);\n","filename":"src\/hotspot\/share\/opto\/loopPredicate.cpp","additions":15,"deletions":14,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -1278,0 +1278,7 @@\n+  \/\/ Enum to determine the action to be performed in create_new_if_for_predicate() when processing phis of UCT regions.\n+  enum class UnswitchingAction {\n+    None,            \/\/ No special action.\n+    FastLoopCloning, \/\/ Need to clone nodes for the fast loop.\n+    SlowLoopRewiring \/\/ Need to rewire nodes for the slow loop.\n+  };\n+\n@@ -1280,2 +1287,2 @@\n-                                        int opcode, bool if_cont_is_true_proj = true, bool unswitch_is_slow_loop = false,\n-                                        Node_List* old_new = NULL);\n+                                        int opcode, bool if_cont_is_true_proj = true, Node_List* old_new = NULL,\n+                                        UnswitchingAction unswitching_action = UnswitchingAction::None);\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"}]}