{"files":[{"patch":"@@ -1322,1 +1322,0 @@\n-            boolean enforceTimeOut = false;\n@@ -1324,1 +1323,4 @@\n-            if (oldTimeout <= 0) {\n+            if (oldTimeout <= 0 || oldTimeout > 5000) {\n+                if (logger.isLoggable(PlatformLogger.Level.FINE)) {\n+                    logger.fine(\"Timeout currently set to \" + oldTimeout +\" temporarily setting it to 5 seconds\");\n+                }\n@@ -1328,1 +1330,0 @@\n-                enforceTimeOut = true;\n@@ -1334,2 +1335,2 @@\n-                if (!enforceTimeOut) {\n-                    throw se;\n+                if (logger.isLoggable(PlatformLogger.Level.FINE)) {\n+                    logger.fine(\"SocketTimeoutException caught, will attempt to send body regardless\");\n@@ -1353,0 +1354,3 @@\n+                        if (logger.isLoggable(PlatformLogger.Level.FINE)) {\n+                            logger.fine(\"response code received \" + responseCode);\n+                        }\n@@ -1357,0 +1361,1 @@\n+                    \/\/ responseCode will be returned to caller\n@@ -1361,0 +1366,5 @@\n+            if (logger.isLoggable(PlatformLogger.Level.FINE)) {\n+                logger.fine(\"Restoring original timeout : \" + oldTimeout);\n+            }\n+\n+            http.setIgnoreContinue(true);\n@@ -1443,0 +1453,1 @@\n+                http.setIgnoreContinue(false);\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/http\/HttpURLConnection.java","additions":16,"deletions":5,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -0,0 +1,398 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8054022\n+ * @summary Verify that expect 100-continue doesn't hang\n+ * @library \/test\/lib\n+ * @run junit\/othervm HttpURLConnectionExpectContinueTest\n+ *\/\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStream;\n+import java.net.*;\n+import java.nio.charset.StandardCharsets;\n+import java.util.Arrays;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+public class HttpURLConnectionExpectContinueTest {\n+\n+    class Control {\n+        ServerSocket serverSocket = null;\n+        boolean stop = false;\n+        boolean respondWith100Continue = false;\n+        boolean write100ContinueTwice = false;\n+        String response = null;\n+    }\n+\n+    private Thread serverThread = null;\n+    private volatile Control control = null;\n+    static final Logger logger;\n+\n+    static {\n+        logger = Logger.getLogger(\"sun.net.www.protocol.http.HttpURLConnection\");\n+        logger.setLevel(Level.ALL);\n+        Logger.getLogger(\"\").getHandlers()[0].setLevel(Level.ALL);\n+    }\n+\n+    @BeforeAll\n+    public void startServerSocket() throws Exception {\n+        control = new Control();\n+\n+        control.serverSocket = new ServerSocket();\n+        control.serverSocket.setReuseAddress(true);\n+        control.serverSocket.bind(new InetSocketAddress(\"127.0.0.1\", 54321));\n+        Runnable runnable = () -> {\n+            while (!control.stop) {\n+                try {\n+                    Socket socket = control.serverSocket.accept();\n+                    InputStream inputStream = socket.getInputStream();\n+                    InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n+\n+                    StringBuilder stringBuilder = new StringBuilder();\n+\n+                    byte b;\n+                    while (true) {\n+                        b = (byte) inputStreamReader.read();\n+                        stringBuilder.append((char) b);\n+\n+                        if (stringBuilder.length() >= 4) {\n+                            char[] lastBytes = new char[4];\n+                            stringBuilder.getChars(\n+                                    stringBuilder.length() - 4,\n+                                    stringBuilder.length(), lastBytes, 0);\n+                            if (Arrays.equals(lastBytes, new char[]{'\\r', '\\n', '\\r', '\\n'})) {\n+                                break;\n+                            }\n+                        }\n+                    }\n+\n+                    OutputStream outputStream = socket.getOutputStream();\n+\n+                    String header = stringBuilder.toString();\n+                    System.err.println(header);\n+                    String contentLengthString = \"Content-Length:\";\n+                    int idx = header.indexOf(contentLengthString);\n+                    if (idx >= 0) {\n+                        String substr = header.substring(idx + contentLengthString.length());\n+                        idx = substr.indexOf('\\r');\n+                        substr = substr.substring(0, idx);\n+                        int contentLength = Integer.parseInt(substr.trim());\n+\n+                        if (control.respondWith100Continue) {\n+                            outputStream.write(\"HTTP\/1.1 100 Continue\\r\\n\\r\\n\".getBytes());\n+                            outputStream.flush();\n+                            if (control.write100ContinueTwice) {\n+                                outputStream.write(\"HTTP\/1.1 100 Continue\\r\\n\\r\\n\".getBytes());\n+                                outputStream.flush();\n+                            }\n+                        }\n+\n+                        char[] body = new char[contentLength];\n+                    } else {\n+\n+                        if (control.respondWith100Continue) {\n+                            outputStream.write(\"HTTP\/1.1 100 Continue\\r\\n\\r\\n\".getBytes());\n+                            outputStream.flush();\n+                            if (control.write100ContinueTwice) {\n+                                outputStream.write(\"HTTP\/1.1 100 Continue\\r\\n\\r\\n\".getBytes());\n+                                outputStream.flush();\n+                            }\n+                        }\n+\n+                        StringBuilder contentLengthBuilder = new StringBuilder();\n+                        while (true) {\n+                            b = (byte) inputStreamReader.read();\n+                            contentLengthBuilder.append((char) b);\n+\n+                            if (contentLengthBuilder.length() >= 2) {\n+                                char[] lastBytes = new char[2];\n+                                contentLengthBuilder.getChars(\n+                                        contentLengthBuilder.length() - 2,\n+                                        contentLengthBuilder.length(), lastBytes, 0);\n+                                if (Arrays.equals(lastBytes, new char[]{'\\r', '\\n'})) {\n+                                    String lengthInHex =\n+                                            contentLengthBuilder.substring(0, contentLengthBuilder.length() - 2);\n+\n+                                    int contentLength = Integer.parseInt(lengthInHex, 16);\n+                                    char[] body = new char[contentLength];\n+                                    inputStreamReader.read(body);\n+                                    break;\n+                                    \/\/normally we have to parse more data,\n+                                    \/\/but for simplicity we expect no more chunks...\n+                                }\n+                            }\n+                        }\n+                    }\n+                    outputStream.write(control.response.getBytes());\n+                    outputStream.flush();\n+                } catch (SocketException e) {\n+                    \/\/ignore\n+                } catch (IOException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+        };\n+        serverThread = new Thread(runnable);\n+        serverThread.start();\n+    }\n+\n+    @AfterAll\n+    public void stopServerSocket() throws Exception {\n+        control.stop = true;\n+        control.serverSocket.close();\n+        serverThread.join();\n+    }\n+\n+    @Test\n+    public void testNonChunkedRequestWithExpect100ContinueResponse() throws Exception {\n+        URL url = new URL(\"http:\/\/localhost:\" + control.serverSocket.getLocalPort());\n+\n+        String body = \"testNonChunkedRequestWithExpect100ContinueResponse\";\n+        control.response = \"HTTP\/1.1 200 OK\\r\\n\" +\n+                \"Connection: close\\r\\n\" +\n+                \"Content-Length: \" + body.length() + \"\\r\\n\" +\n+                \"\\r\\n\" +\n+                body + \"\\r\\n\";\n+\n+        control.respondWith100Continue = true;\n+        control.write100ContinueTwice = false;\n+\n+        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n+        connection.setDoOutput(true);\n+        connection.setConnectTimeout(1000);\n+        connection.setReadTimeout(5000);\n+        connection.setUseCaches(false);\n+        connection.setInstanceFollowRedirects(false);\n+        connection.setRequestMethod(\"POST\");\n+        connection.setRequestProperty(\"Connection\", \"Close\");\n+        connection.setRequestProperty(\"Expect\", \"100-Continue\");\n+        OutputStream outputStream = connection.getOutputStream();\n+        outputStream.write(body.getBytes());\n+        outputStream.close();\n+\n+        int responseCode = connection.getResponseCode();\n+        String responseBody = new String(connection.getInputStream().readAllBytes(), StandardCharsets.UTF_8).strip();\n+        System.err.println(\"response body: \" + responseBody);\n+        assertTrue(responseCode == 200,\n+                String.format(\"Expected 200 response, instead received %s\", responseCode));\n+        assertTrue(body.equals(responseBody),\n+                String.format(\"Expected response %s, instead received %s\", body, responseBody));\n+    }\n+\n+    @Test\n+    public void testNonChunkedRequestAndNoExpect100ContinueResponse() throws Exception {\n+        URL url = new URL(\"http:\/\/localhost:\" + control.serverSocket.getLocalPort());\n+\n+        String body = \"testNonChunkedRequestAndNoExpect100ContinueResponse\";\n+        control.response = \"HTTP\/1.1 200 OK\\r\\n\" +\n+                \"Connection: close\\r\\n\" +\n+                \"Content-Length: \" + body.length() + \"\\r\\n\" +\n+                \"\\r\\n\" +\n+                body + \"\\r\\n\";\n+\n+        control.respondWith100Continue = false;\n+        control.write100ContinueTwice = false;\n+\n+        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n+        connection.setDoOutput(true);\n+        connection.setConnectTimeout(1000);\n+        connection.setReadTimeout(5000);\n+        connection.setUseCaches(false);\n+        connection.setInstanceFollowRedirects(false);\n+        connection.setRequestMethod(\"POST\");\n+        connection.setRequestProperty(\"Connection\", \"Close\");\n+        connection.setRequestProperty(\"Expect\", \"100-Continue\");\n+        OutputStream outputStream = connection.getOutputStream();\n+        outputStream.write(body.getBytes());\n+        outputStream.close();\n+\n+        int responseCode = connection.getResponseCode();\n+        String responseBody = new String(connection.getInputStream().readAllBytes(), StandardCharsets.UTF_8).strip();\n+        System.err.println(\"response body: \" + responseBody);\n+        assertTrue(responseCode == 200,\n+                String.format(\"Expected 200 response, instead received %s\", responseCode));\n+        assertTrue(body.equals(responseBody),\n+                String.format(\"Expected response %s, instead received %s\", body, responseBody));\n+\n+    }\n+\n+    @Test\n+    public void testChunkedRequestWithExpect100ContinueResponse() throws Exception {\n+        URL url = new URL(\"http:\/\/localhost:\" + control.serverSocket.getLocalPort());\n+\n+        String body = \"testChunkedRequestWithExpect100ContinueResponse\";\n+        control.response = \"HTTP\/1.1 200 OK\\r\\n\" +\n+                \"Connection: close\\r\\n\" +\n+                \"Content-Length: \" + body.length() + \"\\r\\n\" +\n+                \"\\r\\n\" +\n+                body + \"\\r\\n\";\n+\n+        control.respondWith100Continue = true;\n+        control.write100ContinueTwice = false;\n+\n+        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n+        connection.setDoOutput(true);\n+        connection.setConnectTimeout(1000);\n+        connection.setReadTimeout(5000);\n+        connection.setUseCaches(false);\n+        connection.setInstanceFollowRedirects(false);\n+        connection.setRequestMethod(\"POST\");\n+        connection.setChunkedStreamingMode(-1);\n+        connection.setRequestProperty(\"Connection\", \"Close\");\n+        connection.setRequestProperty(\"Expect\", \"100-Continue\");\n+        OutputStream outputStream = connection.getOutputStream();\n+        outputStream.write(body.getBytes());\n+        outputStream.close();\n+\n+        int responseCode = connection.getResponseCode();\n+        String responseBody = new String(connection.getInputStream().readAllBytes(), StandardCharsets.UTF_8).strip();\n+        System.err.println(\"response body: \" + responseBody);\n+        assertTrue(responseCode == 200,\n+                String.format(\"Expected 200 response, instead received %s\", responseCode));\n+        assertTrue(body.equals(responseBody),\n+                String.format(\"Expected response %s, instead received %s\", body, responseBody));\n+    }\n+\n+    @Test\n+    public void testChunkedRequestWithDoubleExpect100ContinueResponse() throws Exception {\n+        URL url = new URL(\"http:\/\/localhost:\" + control.serverSocket.getLocalPort());\n+\n+        String body = \"testChunkedRequestWithDoubleExpect100ContinueResponse\";\n+        control.response = \"HTTP\/1.1 200 OK\\r\\n\" +\n+                \"Connection: close\\r\\n\" +\n+                \"Content-Length: \" + body.length() + \"\\r\\n\" +\n+                \"\\r\\n\" +\n+                body + \"\\r\\n\";\n+\n+        control.respondWith100Continue = true;\n+        control.write100ContinueTwice = true;\n+\n+        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n+        connection.setDoOutput(true);\n+        connection.setConnectTimeout(1000);\n+        connection.setReadTimeout(5000);\n+        connection.setUseCaches(false);\n+        connection.setInstanceFollowRedirects(false);\n+        connection.setRequestMethod(\"POST\");\n+        connection.setChunkedStreamingMode(-1);\n+        connection.setRequestProperty(\"Connection\", \"Close\");\n+        connection.setRequestProperty(\"Expect\", \"100-Continue\");\n+        OutputStream outputStream = connection.getOutputStream();\n+        outputStream.write(body.getBytes());\n+        outputStream.close();\n+\n+        int responseCode = connection.getResponseCode();\n+        String responseBody = new String(connection.getInputStream().readAllBytes(), StandardCharsets.UTF_8).strip();\n+        System.err.println(\"response body: \" + responseBody);\n+        assertTrue(responseCode == 200,\n+                String.format(\"Expected 200 response, instead received %s\", responseCode));\n+        assertTrue(body.equals(responseBody),\n+                String.format(\"Expected response %s, instead received %s\", body, responseBody));\n+    }\n+\n+    @Test\n+    public void testChunkedRequestAndNoExpect100ContinueResponse() throws Exception {\n+        URL url = new URL(\"http:\/\/localhost:\" + control.serverSocket.getLocalPort());\n+\n+        String body = \"testChunkedRequestAndNoExpect100ContinueResponse\";\n+        control.response = \"HTTP\/1.1 200 OK\\r\\n\" +\n+                \"Connection: close\\r\\n\" +\n+                \"Content-Length: \" + body.length() + \"\\r\\n\" +\n+                \"\\r\\n\" +\n+                body + \"\\r\\n\";\n+\n+        control.respondWith100Continue = false;\n+        control.write100ContinueTwice = false;\n+\n+        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n+        connection.setDoOutput(true);\n+        connection.setConnectTimeout(1000);\n+        connection.setReadTimeout(5000);\n+        connection.setUseCaches(false);\n+        connection.setInstanceFollowRedirects(false);\n+        connection.setRequestMethod(\"POST\");\n+        connection.setChunkedStreamingMode(-1);\n+        connection.setRequestProperty(\"Connection\", \"Close\");\n+        connection.setRequestProperty(\"Expect\", \"100-Continue\");\n+        OutputStream outputStream = connection.getOutputStream();\n+        outputStream.write(body.getBytes());\n+        outputStream.close();\n+\n+        int responseCode = connection.getResponseCode();\n+        String responseBody = new String(connection.getInputStream().readAllBytes(), StandardCharsets.UTF_8).strip();\n+        System.err.println(\"response body: \" + responseBody);\n+        assertTrue(responseCode == 200,\n+                String.format(\"Expected 200 response, instead received %s\", responseCode));\n+        assertTrue(body.equals(responseBody),\n+                String.format(\"Expected response %s, instead received %s\", body, responseBody));\n+    }\n+\n+    @Test\n+    public void testNonChunkedRequestWithDoubleExpect100ContinueResponse() throws Exception {\n+        URL url = new URL(\"http:\/\/localhost:\" + control.serverSocket.getLocalPort());\n+\n+        String body = \"testNonChunkedRequestWithDoubleExpect100ContinueResponse\";\n+        control.response = \"HTTP\/1.1 200 OK\\r\\n\" +\n+                \"Connection: close\\r\\n\" +\n+                \"Content-Length: \" + body.length() + \"\\r\\n\" +\n+                \"\\r\\n\" +\n+                body + \"\\r\\n\";\n+\n+        control.respondWith100Continue = true;\n+        control.write100ContinueTwice = true;\n+\n+        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n+        connection.setDoOutput(true);\n+        connection.setConnectTimeout(1000);\n+        connection.setReadTimeout(5000);\n+        connection.setUseCaches(false);\n+        connection.setInstanceFollowRedirects(false);\n+        connection.setRequestMethod(\"POST\");\n+        connection.setRequestProperty(\"Connection\", \"Close\");\n+        connection.setRequestProperty(\"Expect\", \"100-Continue\");\n+        OutputStream outputStream = connection.getOutputStream();\n+        outputStream.write(body.getBytes());\n+        outputStream.close();\n+\n+        int responseCode = connection.getResponseCode();\n+        String responseBody = new String(connection.getInputStream().readAllBytes(), StandardCharsets.UTF_8).strip();\n+        System.err.println(\"response body: \" + responseBody);\n+        assertTrue(responseCode == 200,\n+                String.format(\"Expected 200 response, instead received %s\", responseCode));\n+        assertTrue(body.equals(responseBody),\n+                String.format(\"Expected response %s, instead received %s\", body, responseBody));\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/HttpURLConnection\/HttpURLConnectionExpectContinueTest.java","additions":398,"deletions":0,"binary":false,"changes":398,"status":"added"}]}