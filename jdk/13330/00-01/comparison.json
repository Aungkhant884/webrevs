{"files":[{"patch":"@@ -1319,11 +1319,9 @@\n-            \/\/ Expect: 100-Continue was set, so check the return code for\n-            \/\/ Acceptance\n-            int oldTimeout = http.getReadTimeout();\n-            boolean timedOut = false;\n-            if (oldTimeout <= 0 || oldTimeout > 5000) {\n-                if (logger.isLoggable(PlatformLogger.Level.FINE)) {\n-                    logger.fine(\"Timeout currently set to \" + oldTimeout +\" temporarily setting it to 5 seconds\");\n-                }\n-                \/\/ 5s read timeout in case the server doesn't understand\n-                \/\/ Expect: 100-Continue\n-                http.setReadTimeout(5000);\n+        \/\/ Expect: 100-Continue was set, so check the return code for\n+        \/\/ Acceptance\n+        int oldTimeout = http.getReadTimeout();\n+        boolean timedOut = false;\n+        boolean tempTimeOutSet = false;\n+        if (oldTimeout <= 0 || oldTimeout > 5000) {\n+            if (logger.isLoggable(PlatformLogger.Level.FINE)) {\n+                logger.fine(\"Timeout currently set to \" +\n+                        oldTimeout + \" temporarily setting it to 5 seconds\");\n@@ -1331,0 +1329,5 @@\n+            \/\/ 5s read timeout in case the server doesn't understand\n+            \/\/ Expect: 100-Continue\n+            http.setReadTimeout(5000);\n+            tempTimeOutSet = true;\n+        }\n@@ -1332,8 +1335,6 @@\n-            try {\n-                http.parseHTTP(responses, this);\n-            } catch (SocketTimeoutException se) {\n-                if (logger.isLoggable(PlatformLogger.Level.FINE)) {\n-                    logger.fine(\"SocketTimeoutException caught, will attempt to send body regardless\");\n-                }\n-                timedOut = true;\n-                http.setIgnoreContinue(true);\n+        try {\n+            http.parseHTTP(responses, this);\n+        } catch (SocketTimeoutException se) {\n+            if (logger.isLoggable(PlatformLogger.Level.FINE)) {\n+                logger.fine(\"SocketTimeoutException caught,\" +\n+                        \" will attempt to send body regardless\");\n@@ -1341,17 +1342,18 @@\n-            if (!timedOut) {\n-                \/\/ Can't use getResponseCode() yet\n-                String resp = responses.getValue(0);\n-                \/\/ Parse the response which is of the form:\n-                \/\/ HTTP\/1.1 417 Expectation Failed\n-                \/\/ HTTP\/1.1 100 Continue\n-                if (resp != null && resp.startsWith(\"HTTP\/\")) {\n-                    String[] sa = resp.split(\"\\\\s+\");\n-                    responseCode = -1;\n-                    try {\n-                        \/\/ Response code is 2nd token on the line\n-                        if (sa.length > 1)\n-                            responseCode = Integer.parseInt(sa[1]);\n-                        if (logger.isLoggable(PlatformLogger.Level.FINE)) {\n-                            logger.fine(\"response code received \" + responseCode);\n-                        }\n-                    } catch (NumberFormatException numberFormatException) {\n+            timedOut = true;\n+        }\n+\n+        if (!timedOut) {\n+            \/\/ Can't use getResponseCode() yet\n+            String resp = responses.getValue(0);\n+            \/\/ Parse the response which is of the form:\n+            \/\/ HTTP\/1.1 417 Expectation Failed\n+            \/\/ HTTP\/1.1 100 Continue\n+            if (resp != null && resp.startsWith(\"HTTP\/\")) {\n+                String[] sa = resp.split(\"\\\\s+\");\n+                responseCode = -1;\n+                try {\n+                    \/\/ Response code is 2nd token on the line\n+                    if (sa.length > 1)\n+                        responseCode = Integer.parseInt(sa[1]);\n+                    if (logger.isLoggable(PlatformLogger.Level.FINE)) {\n+                        logger.fine(\"response code received \" + responseCode);\n@@ -1359,0 +1361,1 @@\n+                } catch (NumberFormatException numberFormatException) {\n@@ -1360,4 +1363,0 @@\n-                if (responseCode != 100) {\n-                    \/\/ responseCode will be returned to caller\n-                    throw new ProtocolException(\"Server rejected operation\");\n-                }\n@@ -1365,0 +1364,5 @@\n+            if (responseCode != 100) {\n+                \/\/ responseCode will be returned to caller\n+                throw new ProtocolException(\"Server rejected operation\");\n+            }\n+        }\n@@ -1366,0 +1370,2 @@\n+        \/\/ If timeout was changed, restore to original value\n+        if (tempTimeOutSet) {\n@@ -1369,2 +1375,0 @@\n-\n-            http.setIgnoreContinue(true);\n@@ -1372,0 +1376,1 @@\n+        }\n@@ -1373,3 +1378,9 @@\n-            responseCode = -1;\n-            responses.reset();\n-            \/\/ Proceed\n+        \/\/ Ignore any future 100 continue messages\n+        http.setIgnoreContinue(true);\n+        if (logger.isLoggable(PlatformLogger.Level.FINE)) {\n+            logger.fine(\"Set Ignore Continue to true\");\n+        }\n+\n+        responseCode = -1;\n+        responses.reset();\n+        \/\/ Proceed\n@@ -1444,1 +1455,0 @@\n-                http.setIgnoreContinue(false);\n@@ -1492,0 +1502,1 @@\n+    \/\/ Streaming returns true if there is a request body to send\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/protocol\/http\/HttpURLConnection.java","additions":57,"deletions":46,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -86,0 +86,1 @@\n+                    \/\/ Read initial request\n@@ -105,1 +106,0 @@\n-                    System.err.println(header);\n@@ -107,0 +107,12 @@\n+\n+                    \/\/ send 100 continue responses if set by test\n+                    if (control.respondWith100Continue) {\n+                        outputStream.write(\"HTTP\/1.1 100 Continue\\r\\n\\r\\n\".getBytes());\n+                        outputStream.flush();\n+                        if (control.write100ContinueTwice) {\n+                            outputStream.write(\"HTTP\/1.1 100 Continue\\r\\n\\r\\n\".getBytes());\n+                            outputStream.flush();\n+                        }\n+                    }\n+\n+                    \/\/ expect main request to be received\n@@ -108,0 +120,1 @@\n+\n@@ -114,7 +127,4 @@\n-                        if (control.respondWith100Continue) {\n-                            outputStream.write(\"HTTP\/1.1 100 Continue\\r\\n\\r\\n\".getBytes());\n-                            outputStream.flush();\n-                            if (control.write100ContinueTwice) {\n-                                outputStream.write(\"HTTP\/1.1 100 Continue\\r\\n\\r\\n\".getBytes());\n-                                outputStream.flush();\n-                            }\n+                        StringBuilder contentLengthBuilder = new StringBuilder();\n+                        for (int i = 0; i < contentLength; i++) {\n+                            b = (byte) inputStreamReader.read();\n+                            contentLengthBuilder.append((char) b);\n@@ -123,1 +133,0 @@\n-                        char[] body = new char[contentLength];\n@@ -125,10 +134,0 @@\n-\n-                        if (control.respondWith100Continue) {\n-                            outputStream.write(\"HTTP\/1.1 100 Continue\\r\\n\\r\\n\".getBytes());\n-                            outputStream.flush();\n-                            if (control.write100ContinueTwice) {\n-                                outputStream.write(\"HTTP\/1.1 100 Continue\\r\\n\\r\\n\".getBytes());\n-                                outputStream.flush();\n-                            }\n-                        }\n-\n@@ -153,2 +152,2 @@\n-                                    \/\/normally we have to parse more data,\n-                                    \/\/but for simplicity we expect no more chunks...\n+                                    \/\/ normally we have to parse more data,\n+                                    \/\/ but for simplicity we expect no more chunks...\n@@ -159,0 +158,2 @@\n+\n+                    \/\/ send response\n@@ -162,1 +163,1 @@\n-                    \/\/ignore\n+                    \/\/ ignore\n@@ -180,2 +181,14 @@\n-    public void testNonChunkedRequestWithExpect100ContinueResponse() throws Exception {\n-        URL url = new URL(\"http:\/\/localhost:\" + control.serverSocket.getLocalPort());\n+    public void testNonChunkedRequestAndNoExpect100ContinueResponse() throws Exception {\n+        String body = \"testNonChunkedRequestAndNoExpect100ContinueResponse\";\n+        control.response = \"HTTP\/1.1 200 OK\\r\\n\" +\n+                \"Connection: close\\r\\n\" +\n+                \"Content-Length: \" + body.length() + \"\\r\\n\" +\n+                \"\\r\\n\" +\n+                body + \"\\r\\n\";\n+        control.respondWith100Continue = false;\n+        control.write100ContinueTwice = false;\n+\n+        HttpURLConnection connection = createConnection();\n+        OutputStream outputStream = connection.getOutputStream();\n+        outputStream.write(body.getBytes());\n+        outputStream.close();\n@@ -183,0 +196,11 @@\n+        int responseCode = connection.getResponseCode();\n+        String responseBody = new String(connection.getInputStream().readAllBytes(), StandardCharsets.UTF_8).strip();\n+        System.err.println(\"response body: \" + responseBody);\n+        assertTrue(responseCode == 200,\n+                String.format(\"Expected 200 response, instead received %s\", responseCode));\n+        assertTrue(body.equals(responseBody),\n+                String.format(\"Expected response %s, instead received %s\", body, responseBody));\n+    }\n+\n+    @Test\n+    public void testNonChunkedRequestWithExpect100ContinueResponse() throws Exception {\n@@ -189,1 +213,0 @@\n-\n@@ -193,9 +216,1 @@\n-        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n-        connection.setDoOutput(true);\n-        connection.setConnectTimeout(1000);\n-        connection.setReadTimeout(5000);\n-        connection.setUseCaches(false);\n-        connection.setInstanceFollowRedirects(false);\n-        connection.setRequestMethod(\"POST\");\n-        connection.setRequestProperty(\"Connection\", \"Close\");\n-        connection.setRequestProperty(\"Expect\", \"100-Continue\");\n+        HttpURLConnection connection = createConnection();\n@@ -216,4 +231,2 @@\n-    public void testNonChunkedRequestAndNoExpect100ContinueResponse() throws Exception {\n-        URL url = new URL(\"http:\/\/localhost:\" + control.serverSocket.getLocalPort());\n-\n-        String body = \"testNonChunkedRequestAndNoExpect100ContinueResponse\";\n+    public void testNonChunkedRequestWithDoubleExpect100ContinueResponse() throws Exception {\n+        String body = \"testNonChunkedRequestWithDoubleExpect100ContinueResponse\";\n@@ -225,0 +238,2 @@\n+        control.respondWith100Continue = true;\n+        control.write100ContinueTwice = true;\n@@ -226,0 +241,22 @@\n+        HttpURLConnection connection = createConnection();\n+        OutputStream outputStream = connection.getOutputStream();\n+        outputStream.write(body.getBytes());\n+        outputStream.close();\n+\n+        int responseCode = connection.getResponseCode();\n+        String responseBody = new String(connection.getInputStream().readAllBytes(), StandardCharsets.UTF_8).strip();\n+        System.err.println(\"response body: \" + responseBody);\n+        assertTrue(responseCode == 200,\n+                String.format(\"Expected 200 response, instead received %s\", responseCode));\n+        assertTrue(body.equals(responseBody),\n+                String.format(\"Expected response %s, instead received %s\", body, responseBody));\n+    }\n+\n+    @Test\n+    public void testChunkedRequestAndNoExpect100ContinueResponse() throws Exception {\n+        String body = \"testChunkedRequestAndNoExpect100ContinueResponse\";\n+        control.response = \"HTTP\/1.1 200 OK\\r\\n\" +\n+                \"Connection: close\\r\\n\" +\n+                \"Content-Length: \" + body.length() + \"\\r\\n\" +\n+                \"\\r\\n\" +\n+                body + \"\\r\\n\";\n@@ -229,9 +266,2 @@\n-        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n-        connection.setDoOutput(true);\n-        connection.setConnectTimeout(1000);\n-        connection.setReadTimeout(5000);\n-        connection.setUseCaches(false);\n-        connection.setInstanceFollowRedirects(false);\n-        connection.setRequestMethod(\"POST\");\n-        connection.setRequestProperty(\"Connection\", \"Close\");\n-        connection.setRequestProperty(\"Expect\", \"100-Continue\");\n+        HttpURLConnection connection = createConnection();\n+        connection.setChunkedStreamingMode(body.length() \/ 2);\n@@ -249,1 +279,0 @@\n-\n@@ -254,2 +283,0 @@\n-        URL url = new URL(\"http:\/\/localhost:\" + control.serverSocket.getLocalPort());\n-\n@@ -262,1 +289,0 @@\n-\n@@ -266,10 +292,2 @@\n-        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n-        connection.setDoOutput(true);\n-        connection.setConnectTimeout(1000);\n-        connection.setReadTimeout(5000);\n-        connection.setUseCaches(false);\n-        connection.setInstanceFollowRedirects(false);\n-        connection.setRequestMethod(\"POST\");\n-        connection.setChunkedStreamingMode(-1);\n-        connection.setRequestProperty(\"Connection\", \"Close\");\n-        connection.setRequestProperty(\"Expect\", \"100-Continue\");\n+        HttpURLConnection connection = createConnection();\n+        connection.setChunkedStreamingMode(body.length() \/ 2);\n@@ -291,2 +309,0 @@\n-        URL url = new URL(\"http:\/\/localhost:\" + control.serverSocket.getLocalPort());\n-\n@@ -299,1 +315,0 @@\n-\n@@ -303,10 +318,2 @@\n-        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n-        connection.setDoOutput(true);\n-        connection.setConnectTimeout(1000);\n-        connection.setReadTimeout(5000);\n-        connection.setUseCaches(false);\n-        connection.setInstanceFollowRedirects(false);\n-        connection.setRequestMethod(\"POST\");\n-        connection.setChunkedStreamingMode(-1);\n-        connection.setRequestProperty(\"Connection\", \"Close\");\n-        connection.setRequestProperty(\"Expect\", \"100-Continue\");\n+        HttpURLConnection connection = createConnection();\n+        connection.setChunkedStreamingMode(body.length() \/ 2);\n@@ -327,4 +334,2 @@\n-    public void testChunkedRequestAndNoExpect100ContinueResponse() throws Exception {\n-        URL url = new URL(\"http:\/\/localhost:\" + control.serverSocket.getLocalPort());\n-\n-        String body = \"testChunkedRequestAndNoExpect100ContinueResponse\";\n+    public void testFixedLengthRequestAndNoExpect100ContinueResponse() throws Exception {\n+        String body = \"testFixedLengthRequestAndNoExpect100ContinueResponse\";\n@@ -336,1 +341,0 @@\n-\n@@ -340,10 +344,2 @@\n-        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n-        connection.setDoOutput(true);\n-        connection.setConnectTimeout(1000);\n-        connection.setReadTimeout(5000);\n-        connection.setUseCaches(false);\n-        connection.setInstanceFollowRedirects(false);\n-        connection.setRequestMethod(\"POST\");\n-        connection.setChunkedStreamingMode(-1);\n-        connection.setRequestProperty(\"Connection\", \"Close\");\n-        connection.setRequestProperty(\"Expect\", \"100-Continue\");\n+        HttpURLConnection connection = createConnection();\n+        connection.setFixedLengthStreamingMode(body.length());\n@@ -364,4 +360,2 @@\n-    public void testNonChunkedRequestWithDoubleExpect100ContinueResponse() throws Exception {\n-        URL url = new URL(\"http:\/\/localhost:\" + control.serverSocket.getLocalPort());\n-\n-        String body = \"testNonChunkedRequestWithDoubleExpect100ContinueResponse\";\n+    public void testFixedLengthRequestWithExpect100ContinueResponse() throws Exception {\n+        String body = \"testFixedLengthRequestWithExpect100ContinueResponse\";\n@@ -373,0 +367,8 @@\n+        control.respondWith100Continue = true;\n+        control.write100ContinueTwice = false;\n+\n+        HttpURLConnection connection = createConnection();\n+        connection.setFixedLengthStreamingMode(body.getBytes().length);\n+        OutputStream outputStream = connection.getOutputStream();\n+        outputStream.write(body.getBytes());\n+        outputStream.close();\n@@ -374,0 +376,17 @@\n+        int responseCode = connection.getResponseCode();\n+        String responseBody = new String(connection.getInputStream().readAllBytes(), StandardCharsets.UTF_8).strip();\n+        System.err.println(\"response body: \" + responseBody);\n+        assertTrue(responseCode == 200,\n+                String.format(\"Expected 200 response, instead received %s\", responseCode));\n+        assertTrue(body.equals(responseBody),\n+                String.format(\"Expected response %s, instead received %s\", body, responseBody));\n+    }\n+\n+    @Test\n+    public void testFixedLengthRequestWithDoubleExpect100ContinueResponse() throws Exception {\n+        String body = \"testFixedLengthRequestWithDoubleExpect100ContinueResponse\";\n+        control.response = \"HTTP\/1.1 200 OK\\r\\n\" +\n+                \"Connection: close\\r\\n\" +\n+                \"Content-Length: \" + body.length() + \"\\r\\n\" +\n+                \"\\r\\n\" +\n+                body + \"\\r\\n\";\n@@ -377,9 +396,2 @@\n-        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n-        connection.setDoOutput(true);\n-        connection.setConnectTimeout(1000);\n-        connection.setReadTimeout(5000);\n-        connection.setUseCaches(false);\n-        connection.setInstanceFollowRedirects(false);\n-        connection.setRequestMethod(\"POST\");\n-        connection.setRequestProperty(\"Connection\", \"Close\");\n-        connection.setRequestProperty(\"Expect\", \"100-Continue\");\n+        HttpURLConnection connection = createConnection();\n+        connection.setFixedLengthStreamingMode(body.getBytes().length);\n@@ -398,0 +410,17 @@\n+\n+    \/\/ Creates a connection with all the common settings used in each test\n+    private HttpURLConnection createConnection() throws IOException {\n+        URL url = new URL(\"http:\/\/localhost:\" + control.serverSocket.getLocalPort());\n+\n+        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n+        connection.setDoOutput(true);\n+        connection.setConnectTimeout(1000);\n+        connection.setReadTimeout(5000);\n+        connection.setUseCaches(false);\n+        connection.setInstanceFollowRedirects(false);\n+        connection.setRequestMethod(\"POST\");\n+        connection.setRequestProperty(\"Connection\", \"Close\");\n+        connection.setRequestProperty(\"Expect\", \"100-Continue\");\n+\n+        return connection;\n+    }\n","filename":"test\/jdk\/java\/net\/HttpURLConnection\/HttpURLConnectionExpectContinueTest.java","additions":131,"deletions":102,"binary":false,"changes":233,"status":"modified"}]}