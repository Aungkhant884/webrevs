{"files":[{"patch":"@@ -27,1 +27,1 @@\n- * @run main InvokeSpecialMethodTest\n+ * @run testng InvokeSpecialMethodTest\n@@ -32,0 +32,4 @@\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n@@ -37,0 +41,1 @@\n+\n@@ -40,1 +45,1 @@\n-    static class Test {\n+    static class MethodTest {\n@@ -46,0 +51,1 @@\n+\n@@ -49,0 +55,1 @@\n+\n@@ -53,1 +60,2 @@\n-        public static class SubClass extends Test {\n+        public static class SubClass extends MethodTest {\n+            @Override\n@@ -57,0 +65,2 @@\n+\n+            @Override\n@@ -60,0 +70,1 @@\n+\n@@ -71,1 +82,1 @@\n-                return LOOKUP.findSpecial(Test.class, name, methodType(String.class), Test.class);\n+                return LOOKUP.findSpecial(MethodTest.class, name, methodType(String.class), MethodTest.class);\n@@ -76,0 +87,1 @@\n+\n@@ -80,0 +92,2 @@\n+\n+    @FunctionalInterface\n@@ -84,4 +98,7 @@\n-    public static void main(String... args) throws Throwable {\n-        test(Test.M_PUBLIC, \"test_public\");\n-        test(Test.M_PROTECTED, \"test_protected\");\n-        test(Test.M_PRIVATE, \"test_private\");\n+    @DataProvider\n+    public Object[][] methodProvider() {\n+        return new Object[][]{\n+                {MethodTest.M_PUBLIC, \"test_public\"},\n+                {MethodTest.M_PROTECTED, \"test_protected\"},\n+                {MethodTest.M_PRIVATE, \"test_private\"}\n+        };\n@@ -90,1 +107,2 @@\n-    static void test(MethodHandle implMethod, String expected) throws Throwable {\n+    @Test(dataProvider = \"methodProvider\")\n+    void test(MethodHandle implMethod, String expected) throws Throwable {\n@@ -96,2 +114,2 @@\n-        CallSite cs = LambdaMetafactory.metafactory(Test.LOOKUP, \"get\",\n-                                                    methodType(StringFactory.class, Test.class),\n+        CallSite cs = LambdaMetafactory.metafactory(MethodTest.LOOKUP, \"get\",\n+                                                    methodType(StringFactory.class, MethodTest.class),\n@@ -99,1 +117,1 @@\n-        Test o = new Test.SubClass();\n+        MethodTest o = new MethodTest.SubClass();\n@@ -102,1 +120,1 @@\n-        if (!expected.equals(actual)) throw new AssertionError(\"Unexpected result: \" + actual);\n+        Assert.assertEquals(actual, expected);\n@@ -106,2 +124,2 @@\n-        CallSite cs = LambdaMetafactory.altMetafactory(Test.LOOKUP, \"get\",\n-                                                       methodType(StringFactory.class, Test.class),\n+        CallSite cs = LambdaMetafactory.altMetafactory(MethodTest.LOOKUP, \"get\",\n+                                                       methodType(StringFactory.class, MethodTest.class),\n@@ -110,1 +128,1 @@\n-        Test o = new Test.SubClass();\n+        MethodTest o = new MethodTest.SubClass();\n@@ -113,1 +131,1 @@\n-        if (!expected.equals(actual)) throw new AssertionError(\"Unexpected result: \" + actual);\n+        Assert.assertEquals(actual, expected);\n","filename":"test\/jdk\/java\/lang\/invoke\/lambda\/invokeSpecial\/InvokeSpecialMethodTest.java","additions":35,"deletions":17,"binary":false,"changes":52,"status":"modified"}]}