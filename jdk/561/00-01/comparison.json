{"files":[{"patch":"@@ -93,12 +93,0 @@\n-    private static int getPrimitiveSignature(Class<?> cl) {\n-        if (cl == Integer.TYPE) return 'I';\n-        else if (cl == Byte.TYPE) return 'B';\n-        else if (cl == Long.TYPE) return 'J';\n-        else if (cl == Float.TYPE) return 'F';\n-        else if (cl == Double.TYPE) return 'D';\n-        else if (cl == Short.TYPE) return 'S';\n-        else if (cl == Character.TYPE) return 'C';\n-        else if (cl == Boolean.TYPE) return 'Z';\n-        else throw new InternalError();\n-    }\n-\n@@ -106,2 +94,3 @@\n-        int utflen = str.length(); \/\/ assume ASCII\n-        assert utflen <= 0xFFFF;\n+        assert str.codePoints().noneMatch(cp -> cp > 127); \/\/ only ASCII for now\n+        int utflen = str.length();\n+        assert utflen <= 0xFFFF;  \/\/ only small strings for now\n@@ -114,2 +103,4 @@\n-            assert entry.getKey().type() != void.class;\n-            out.writeByte(getPrimitiveSignature(entry.getKey().type())); \/\/ prim_typecode\n+            Class<?> primClass = entry.getKey().type();\n+            assert primClass.isPrimitive();\n+            assert primClass != void.class;\n+            out.writeByte(primClass.descriptorString().getBytes()[0]);   \/\/ prim_typecode\n@@ -148,3 +139,1 @@\n-            writeUTF(out,\n-                    (cl.isArray() ? cl.getName() : \"L\" + cl.getName() + \";\")\n-                            .replace('.', '\/'));\n+            writeUTF(out, cl.descriptorString());\n","filename":"test\/lib\/jdk\/test\/lib\/serial\/SerialObjectBuilder.java","additions":8,"deletions":19,"binary":false,"changes":27,"status":"modified"}]}