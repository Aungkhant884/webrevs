{"files":[{"patch":"@@ -901,4 +901,0 @@\n-C2V_VMENTRY_0(jint, getMetadata, (JNIEnv *env, jobject, jobject target, jobject compiled_code, jobject metadata))\n-  JVMCI_THROW_MSG_0(InternalError, \"unimplemented\");\n-C2V_END\n-\n@@ -1607,4 +1603,0 @@\n-C2V_VMENTRY_0(jlong, getFingerprint, (JNIEnv* env, jobject, jlong metaspace_klass))\n-  JVMCI_THROW_MSG_0(InternalError, \"unimplemented\");\n-C2V_END\n-\n@@ -2747,1 +2739,0 @@\n-  {CC \"getMetadata\",                                  CC \"(\" TARGET_DESCRIPTION HS_COMPILED_CODE HS_METADATA \")I\",                          FN_PTR(getMetadata)},\n@@ -2769,1 +2760,0 @@\n-  {CC \"getFingerprint\",                               CC \"(J)J\",                                                                            FN_PTR(getFingerprint)},\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -382,16 +382,0 @@\n-    \/**\n-     * Generates the VM metadata for some compiled code and copies them into {@code metaData}. This\n-     * method does not install anything into the code cache.\n-     *\n-     * @param target the target where this code would be installed\n-     * @param compiledCode the result of a compilation\n-     * @param metaData the metadata is written to this object\n-     * @return the outcome of the installation which will be one of\n-     *         {@link HotSpotVMConfig#codeInstallResultOk},\n-     *         {@link HotSpotVMConfig#codeInstallResultCacheFull},\n-     *         {@link HotSpotVMConfig#codeInstallResultCodeTooLarge} or\n-     *         {@link HotSpotVMConfig#codeInstallResultDependenciesFailed}.\n-     * @throws JVMCIError if there is something wrong with the compiled code or the metadata\n-     *\/\n-    native int getMetadata(TargetDescription target, HotSpotCompiledCode compiledCode, HotSpotMetaData metaData);\n-\n@@ -691,8 +675,0 @@\n-    \/**\n-     * Gets the fingerprint for a given Klass*.\n-     *\n-     * @param metaspaceKlass\n-     * @return the value of the fingerprint (zero for arrays and synthetic classes).\n-     *\/\n-    native long getFingerprint(long metaspaceKlass);\n-\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot\/src\/jdk\/vm\/ci\/hotspot\/CompilerToVM.java","additions":0,"deletions":24,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -1,77 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2017, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.vm.ci.hotspot;\n-\n-import static jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.runtime;\n-\n-import jdk.vm.ci.code.TargetDescription;\n-\n-public class HotSpotMetaData {\n-    private byte[] pcDescBytes;\n-    private byte[] scopesDescBytes;\n-    private byte[] relocBytes;\n-    private byte[] exceptionBytes;\n-    private byte[] implicitExceptionBytes;\n-    private byte[] oopMaps;\n-    private Object[] metadata;\n-\n-    public HotSpotMetaData(TargetDescription target, HotSpotCompiledCode compiledMethod) {\n-        \/\/ Assign the fields default values...\n-        pcDescBytes = new byte[0];\n-        scopesDescBytes = new byte[0];\n-        relocBytes = new byte[0];\n-        exceptionBytes = new byte[0];\n-        oopMaps = new byte[0];\n-        metadata = new String[0];\n-        \/\/ ...some of them will be overwritten by the VM:\n-        runtime().getCompilerToVM().getMetadata(target, compiledMethod, this);\n-    }\n-\n-    public byte[] pcDescBytes() {\n-        return pcDescBytes;\n-    }\n-\n-    public byte[] scopesDescBytes() {\n-        return scopesDescBytes;\n-    }\n-\n-    public byte[] relocBytes() {\n-        return relocBytes;\n-    }\n-\n-    public byte[] exceptionBytes() {\n-        return exceptionBytes;\n-    }\n-\n-    public byte[] implicitExceptionBytes() {\n-        return implicitExceptionBytes;\n-    }\n-\n-    public byte[] oopMaps() {\n-        return oopMaps;\n-    }\n-\n-    public Object[] metadataEntries() {\n-        return metadata;\n-    }\n-}\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot\/src\/jdk\/vm\/ci\/hotspot\/HotSpotMetaData.java","additions":0,"deletions":77,"binary":false,"changes":77,"status":"deleted"},{"patch":"@@ -110,8 +110,0 @@\n-\n-    \/**\n-     * Gets the fingerprint for this type.\n-     *\n-     * @return the value of the fingerprint ({@code 0} for arrays and synthetic classes or if the VM\n-     *         does not support fingerprints)\n-     *\/\n-    long getFingerprint();\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot\/src\/jdk\/vm\/ci\/hotspot\/HotSpotResolvedObjectType.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -528,5 +528,0 @@\n-    @Override\n-    public long getFingerprint() {\n-        return compilerToVM().getFingerprint(getMetaspaceKlass());\n-    }\n-\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot\/src\/jdk\/vm\/ci\/hotspot\/HotSpotResolvedObjectTypeImpl.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -177,5 +177,0 @@\n-\n-    public static int getMetadata(TargetDescription target,\n-            HotSpotCompiledCode compiledCode, HotSpotMetaData metaData) {\n-        return CTVM.getMetadata(target, compiledCode, metaData);\n-    }\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/common\/patches\/jdk.internal.vm.ci\/jdk\/vm\/ci\/hotspot\/CompilerToVMHelper.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"}]}