{"files":[{"patch":"@@ -143,20 +143,24 @@\n-                        int exitValue = waitForProcessExit0(pid, shouldReap);\n-                        if (exitValue == NOT_A_CHILD) {\n-                            \/\/ pid not alive or not a child of this process\n-                            \/\/ If it is alive wait for it to terminate\n-                            long sleep = 300;     \/\/ initial milliseconds to sleep\n-                            int incr = 30;        \/\/ increment to the sleep time\n-\n-                            long startTime = isAlive0(pid);\n-                            long origStart = startTime;\n-                            while (startTime >= 0) {\n-                                try {\n-                                    Thread.sleep(Math.min(sleep, 5000L)); \/\/ no more than 5 sec\n-                                    sleep += incr;\n-                                } catch (InterruptedException ie) {\n-                                    \/\/ ignore and retry\n-                                }\n-                                startTime = isAlive0(pid);  \/\/ recheck if it is alive\n-                                if (startTime > 0 && origStart > 0 && startTime != origStart) {\n-                                    \/\/ start time changed (and is not zero), pid is not the same process\n-                                    break;\n+                        String threadName = Thread.currentThread().getName();\n+                        Thread.currentThread().setName(\"process reaper (pid \" + pid + \")\");\n+                        try {\n+                            int exitValue = waitForProcessExit0(pid, shouldReap);\n+                            if (exitValue == NOT_A_CHILD) {\n+                                \/\/ pid not alive or not a child of this process\n+                                \/\/ If it is alive wait for it to terminate\n+                                long sleep = 300;     \/\/ initial milliseconds to sleep\n+                                int incr = 30;        \/\/ increment to the sleep time\n+\n+                                long startTime = isAlive0(pid);\n+                                long origStart = startTime;\n+                                while (startTime >= 0) {\n+                                    try {\n+                                        Thread.sleep(Math.min(sleep, 5000L)); \/\/ no more than 5 sec\n+                                        sleep += incr;\n+                                    } catch (InterruptedException ie) {\n+                                        \/\/ ignore and retry\n+                                    }\n+                                    startTime = isAlive0(pid);  \/\/ recheck if it is alive\n+                                    if (startTime > 0 && origStart > 0 && startTime != origStart) {\n+                                        \/\/ start time changed (and is not zero), pid is not the same process\n+                                        break;\n+                                    }\n@@ -164,0 +168,1 @@\n+                                exitValue = 0;\n@@ -165,1 +170,6 @@\n-                            exitValue = 0;\n+                            newCompletion.complete(exitValue);\n+                            \/\/ remove from cache afterwards\n+                            completions.remove(pid, newCompletion);\n+                        } finally {\n+                            \/\/ Restore thread name\n+                            Thread.currentThread().setName(threadName);\n@@ -167,3 +177,0 @@\n-                        newCompletion.complete(exitValue);\n-                        \/\/ remove from cache afterwards\n-                        completions.remove(pid, newCompletion);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ProcessHandleImpl.java","additions":31,"deletions":24,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-            if (\"process reaper\".equals(th.getName())) {\n+            if (th.getName().startsWith(\"process reaper\")) {\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/ProcessReaperCCL.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -443,1 +443,1 @@\n-            if (\"process reaper\".equals(name))\n+            if (name.startsWith(\"process reaper\"))\n","filename":"test\/jdk\/java\/util\/concurrent\/Phaser\/Basic.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}