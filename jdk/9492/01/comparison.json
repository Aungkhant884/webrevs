{"files":[{"patch":"@@ -655,1 +655,1 @@\n-  char *result = get_user_name_slow(vmid, *nspid, THREAD);\n+  char *result = get_user_name_slow(vmid, *nspid, CHECK_NULL);\n@@ -661,1 +661,1 @@\n-    result = get_user_name_slow(vmid, vmid, THREAD);\n+    result = get_user_name_slow(vmid, vmid, CHECK_NULL);\n","filename":"src\/hotspot\/os\/posix\/perfMemory_posix.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -176,0 +176,2 @@\n+#define CHECK_NT CHECK_(VerificationType::bogus_type())\n+\n@@ -177,1 +179,1 @@\n-  u1 tag = _stream->get_u1(THREAD);\n+  u1 tag = _stream->get_u1(CHECK_NT);\n@@ -182,1 +184,1 @@\n-    u2 class_index = _stream->get_u2(THREAD);\n+    u2 class_index = _stream->get_u2(CHECK_NT);\n@@ -199,1 +201,1 @@\n-    u2 offset = _stream->get_u2(THREAD);\n+    u2 offset = _stream->get_u2(CHECK_NT);\n@@ -217,1 +219,1 @@\n-  u1 frame_type = _stream->get_u1(THREAD);\n+  u1 frame_type = _stream->get_u1(CHECK_NULL);\n@@ -271,1 +273,1 @@\n-  u2 offset_delta = _stream->get_u2(THREAD);\n+  u2 offset_delta = _stream->get_u2(CHECK_NULL);\n@@ -363,1 +365,1 @@\n-      locals[real_length] = parse_verification_type(&flags, THREAD);\n+      locals[real_length] = parse_verification_type(&flags, CHECK_NULL);\n@@ -385,1 +387,1 @@\n-    u2 locals_size = _stream->get_u2(THREAD);\n+    u2 locals_size = _stream->get_u2(CHECK_NULL);\n@@ -393,1 +395,1 @@\n-      locals[real_locals_size] = parse_verification_type(&flags, THREAD);\n+      locals[real_locals_size] = parse_verification_type(&flags, CHECK_NULL);\n@@ -403,1 +405,1 @@\n-    u2 stack_size = _stream->get_u2(THREAD);\n+    u2 stack_size = _stream->get_u2(CHECK_NULL);\n@@ -411,1 +413,1 @@\n-      stack[real_stack_size] = parse_verification_type(NULL, THREAD);\n+      stack[real_stack_size] = parse_verification_type(NULL, CHECK_NULL);\n","filename":"src\/hotspot\/share\/classfile\/stackMapTable.cpp","additions":13,"deletions":11,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -419,1 +419,1 @@\n-  entry = lookup_entry(method, THREAD);\n+  entry = lookup_entry(method, CHECK_NULL);\n@@ -424,1 +424,1 @@\n-  entry = lookup_entry_prefixed(method, THREAD);\n+  entry = lookup_entry_prefixed(method, CHECK_NULL);\n","filename":"src\/hotspot\/share\/prims\/nativeLookup.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -354,8 +354,3 @@\n-    \/\/ We want to allocate storage, but we can't do that if there's\n-    \/\/ a pending exception, so we preserve any pending exception\n-    \/\/ around the allocation.\n-    \/\/ If we get an exception from the allocation, prefer that to\n-    \/\/ the exception we are trying to build, or the pending exception.\n-    \/\/ This is sort of like what PreserveExceptionMark does, except\n-    \/\/ for the preferencing and the early returns.\n-    Handle incoming_exception(thread, NULL);\n+    \/\/ There should be no pending exception. The caller is responsible for not calling\n+    \/\/ this with a pending exception.\n+    Handle incoming_exception;\n@@ -365,0 +360,3 @@\n+      incoming_exception->print();\n+      ResourceMark rm;\n+      assert(false, \"Pending exception while throwing %s %s\", name->as_C_string(), message);\n@@ -374,0 +372,2 @@\n+    \/\/ If we get an exception from the allocation, prefer that to\n+    \/\/ the exception we are trying to build, or the pending exception (in product mode)\n","filename":"src\/hotspot\/share\/utilities\/exceptions.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"}]}