{"files":[{"patch":"@@ -47,0 +47,1 @@\n+import javax.lang.model.element.QualifiedNameable;\n@@ -110,0 +111,9 @@\n+    \/**\n+     * Exception used to report that a doc comment could not be found.\n+     *\/\n+    public static class DocCommentNotFoundException extends Exception {\n+        public DocCommentNotFoundException(String message) {\n+            super(message);\n+        }\n+    }\n+\n@@ -235,1 +245,5 @@\n-        return requireNonNull(new SnippetFinder().scan(tree, id), () -> new SnippetNotFoundException(id));\n+        SnippetTree result = new SnippetFinder().scan(tree, id);\n+        if (result == null) {\n+            throw new SnippetNotFoundException(id);\n+        }\n+        return result;\n@@ -244,0 +258,1 @@\n+     * @throws DocCommentNotFoundException if the doc comment for the element cannot be found\n@@ -246,18 +261,6 @@\n-    public SnippetTree getSnippetById(Element element, String id) throws SnippetNotFoundException {\n-        DocCommentTree tree = getDocCommentTree(element);\n-        return requireNonNull(new SnippetFinder().scan(tree, id), () -> new SnippetNotFoundException(id));\n-    }\n-\n-    \/**\n-     * {@return an item if it is not {@code null}, or else throw an exception}\n-     *\n-     * @param t the item\n-     * @param e a supplier for the exception that will be thrown if the item is null\n-     * @param <T> the type of the item\n-     * @param <E> the type of the exception that may be thrown\n-     *\n-     * @throws E if the item is {@code null}\n-     *\/\n-    private <T, E extends Exception> T requireNonNull(T t, Supplier<E> e) throws E {\n-        if (t == null) {\n-            throw e.get();\n+    public SnippetTree getSnippetById(Element element, String id)\n+            throws DocCommentNotFoundException, SnippetNotFoundException {\n+        DocCommentTree docCommentTree = getDocCommentTree(element);\n+        if (docCommentTree == null) {\n+            var name = (element instanceof QualifiedNameable q) ? q.getQualifiedName() : element.getSimpleName();\n+            throw new DocCommentNotFoundException(element.getKind() + \" \" + name);\n@@ -265,1 +268,1 @@\n-        return t;\n+        return getSnippetById(docCommentTree, id);\n","filename":"test\/langtools\/tools\/lib\/snippets\/SnippetUtils.java","additions":23,"deletions":20,"binary":false,"changes":43,"status":"modified"}]}