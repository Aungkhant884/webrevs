{"files":[{"patch":"@@ -70,3 +70,0 @@\n-        if (entryPointSnippet == null) {\n-            throw new Error(\"Cannot find snippet \\\"entry-point\\\"\");\n-        }\n@@ -97,3 +94,0 @@\n-        if (exampleSnippet == null) {\n-            throw new Error(\"Cannot find snippet \\\"Example.java\\\"\");\n-        }\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testDocletExample\/TestDocletExample.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import java.util.function.Supplier;\n@@ -100,0 +101,9 @@\n+    \/**\n+     * Exception used to report that a snippet could not be found.\n+     *\/\n+    public static class SnippetNotFoundException extends Exception {\n+        public SnippetNotFoundException(String message) {\n+            super(message);\n+        }\n+    }\n+\n@@ -221,0 +231,2 @@\n+     *\n+     * @throws SnippetNotFoundException if the snippet cannot be found\n@@ -222,2 +234,2 @@\n-    public SnippetTree getSnippetById(DocCommentTree tree, String id) {\n-        return new SnippetFinder().scan(tree, id);\n+    public SnippetTree getSnippetById(DocCommentTree tree, String id) throws SnippetNotFoundException {\n+        return requireNonNull(new SnippetFinder().scan(tree, id), () -> new SnippetNotFoundException(id));\n@@ -231,0 +243,2 @@\n+     *\n+     * @throws SnippetNotFoundException if the snippet cannot be found\n@@ -232,1 +246,1 @@\n-    public SnippetTree getSnippetById(Element element, String id) {\n+    public SnippetTree getSnippetById(Element element, String id) throws SnippetNotFoundException {\n@@ -234,1 +248,18 @@\n-        return new SnippetFinder().scan(tree, id);\n+        return requireNonNull(new SnippetFinder().scan(tree, id), () -> new SnippetNotFoundException(id));\n+    }\n+\n+    \/**\n+     * {@return an item if it is not {@code null}, or else throw an exception}\n+     *\n+     * @param t the item\n+     * @param e a supplier for the exception that will be thrown if the item is null\n+     * @param <T> the type of the item\n+     * @param <E> the type of the exception that may be thrown\n+     *\n+     * @throws E if the item is {@code null}\n+     *\/\n+    private <T, E extends Exception> T requireNonNull(T t, Supplier<E> e) throws E {\n+        if (t == null) {\n+            throw e.get();\n+        }\n+        return t;\n","filename":"test\/langtools\/tools\/lib\/snippets\/SnippetUtils.java","additions":35,"deletions":4,"binary":false,"changes":39,"status":"modified"}]}