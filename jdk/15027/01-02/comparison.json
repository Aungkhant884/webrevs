{"files":[{"patch":"@@ -945,1 +945,1 @@\n-                                           int index, int cache_index,\n+                                           int cp_index, int cache_index,\n@@ -954,2 +954,2 @@\n-    assert(index > 0, \"valid index\");\n-    cache_index = this_cp->cp_to_object_index(index);\n+    assert(cp_index > 0, \"valid constant pool index\");\n+    cache_index = this_cp->cp_to_object_index(cp_index);\n@@ -958,1 +958,1 @@\n-  assert(index == _no_index_sentinel || index >= 0, \"\");\n+  assert(cp_index == _no_index_sentinel || cp_index >= 0, \"\");\n@@ -964,1 +964,1 @@\n-        DEBUG_ONLY(int temp_index = (index >= 0 ? index : this_cp->object_to_cp_index(cache_index)));\n+        DEBUG_ONLY(int temp_index = (cp_index >= 0 ? cp_index : this_cp->object_to_cp_index(cache_index)));\n@@ -972,1 +972,1 @@\n-    index = this_cp->object_to_cp_index(cache_index);\n+    cp_index = this_cp->object_to_cp_index(cache_index);\n@@ -977,1 +977,1 @@\n-  constantTag tag = this_cp->tag_at(index);\n+  constantTag tag = this_cp->tag_at(cp_index);\n@@ -984,1 +984,1 @@\n-      CPKlassSlot kslot = this_cp->klass_slot_at(index);\n+      CPKlassSlot kslot = this_cp->klass_slot_at(cp_index);\n@@ -1014,1 +1014,1 @@\n-      Klass* resolved = klass_at_impl(this_cp, index, CHECK_NULL);\n+      Klass* resolved = klass_at_impl(this_cp, cp_index, CHECK_NULL);\n@@ -1023,1 +1023,1 @@\n-      BootstrapInfo bootstrap_specifier(this_cp, index);\n+      BootstrapInfo bootstrap_specifier(this_cp, cp_index);\n@@ -1041,1 +1041,1 @@\n-        save_and_throw_exception(this_cp, index, tag, CHECK_NULL);\n+        save_and_throw_exception(this_cp, cp_index, tag, CHECK_NULL);\n@@ -1075,1 +1075,1 @@\n-    result_oop = string_at_impl(this_cp, index, cache_index, CHECK_NULL);\n+    result_oop = string_at_impl(this_cp, cp_index, cache_index, CHECK_NULL);\n@@ -1080,5 +1080,5 @@\n-      int ref_kind                 = this_cp->method_handle_ref_kind_at(index);\n-      int callee_index             = this_cp->method_handle_klass_index_at(index);\n-      Symbol*  name =      this_cp->method_handle_name_ref_at(index);\n-      Symbol*  signature = this_cp->method_handle_signature_ref_at(index);\n-      constantTag m_tag  = this_cp->tag_at(this_cp->method_handle_index_at(index));\n+      int ref_kind                 = this_cp->method_handle_ref_kind_at(cp_index);\n+      int callee_index             = this_cp->method_handle_klass_index_at(cp_index);\n+      Symbol*  name =      this_cp->method_handle_name_ref_at(cp_index);\n+      Symbol*  signature = this_cp->method_handle_signature_ref_at(cp_index);\n+      constantTag m_tag  = this_cp->tag_at(this_cp->method_handle_index_at(cp_index));\n@@ -1087,1 +1087,1 @@\n-                              ref_kind, index, this_cp->method_handle_index_at(index),\n+                              ref_kind, cp_index, this_cp->method_handle_index_at(cp_index),\n@@ -1093,1 +1093,1 @@\n-        save_and_throw_exception(this_cp, index, tag, CHECK_NULL);\n+        save_and_throw_exception(this_cp, cp_index, tag, CHECK_NULL);\n@@ -1107,1 +1107,1 @@\n-                 index,\n+                 cp_index,\n@@ -1111,1 +1111,1 @@\n-        save_and_throw_exception(this_cp, index, tag, CHECK_NULL);\n+        save_and_throw_exception(this_cp, cp_index, tag, CHECK_NULL);\n@@ -1120,1 +1120,1 @@\n-        save_and_throw_exception(this_cp, index, tag, CHECK_NULL);\n+        save_and_throw_exception(this_cp, cp_index, tag, CHECK_NULL);\n@@ -1128,1 +1128,1 @@\n-      Symbol*  signature = this_cp->method_type_signature_at(index);\n+      Symbol*  signature = this_cp->method_type_signature_at(cp_index);\n@@ -1131,1 +1131,1 @@\n-                              index, this_cp->method_type_index_at(index),\n+                              cp_index, this_cp->method_type_index_at(cp_index),\n@@ -1139,1 +1139,1 @@\n-        save_and_throw_exception(this_cp, index, tag, CHECK_NULL);\n+        save_and_throw_exception(this_cp, cp_index, tag, CHECK_NULL);\n@@ -1146,1 +1146,1 @@\n-    prim_value.i = this_cp->int_at(index);\n+    prim_value.i = this_cp->int_at(cp_index);\n@@ -1152,1 +1152,1 @@\n-    prim_value.f = this_cp->float_at(index);\n+    prim_value.f = this_cp->float_at(cp_index);\n@@ -1158,1 +1158,1 @@\n-    prim_value.j = this_cp->long_at(index);\n+    prim_value.j = this_cp->long_at(cp_index);\n@@ -1164,1 +1164,1 @@\n-    prim_value.d = this_cp->double_at(index);\n+    prim_value.d = this_cp->double_at(cp_index);\n@@ -1172,1 +1172,1 @@\n-    throw_resolution_error(this_cp, index, CHECK_NULL);\n+    throw_resolution_error(this_cp, cp_index, CHECK_NULL);\n@@ -1176,1 +1176,1 @@\n-    fatal(\"unexpected constant tag at CP %p[%d\/%d] = %d\", this_cp(), index, cache_index, tag.value());\n+    fatal(\"unexpected constant tag at CP %p[%d\/%d] = %d\", this_cp(), cp_index, cache_index, tag.value());\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":31,"deletions":31,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -709,1 +709,1 @@\n-  oop resolve_constant_at(int index, TRAPS) {\n+  oop resolve_constant_at(int cp_index, TRAPS) {\n@@ -711,1 +711,1 @@\n-    return resolve_constant_at_impl(h_this, index, _no_index_sentinel, nullptr, THREAD);\n+    return resolve_constant_at_impl(h_this, cp_index, _no_index_sentinel, nullptr, THREAD);\n@@ -839,1 +839,1 @@\n-  static oop resolve_constant_at_impl(const constantPoolHandle& this_cp, int index, int cache_index,\n+  static oop resolve_constant_at_impl(const constantPoolHandle& this_cp, int cp_index, int cache_index,\n","filename":"src\/hotspot\/share\/oops\/constantPool.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}