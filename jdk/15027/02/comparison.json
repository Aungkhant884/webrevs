{"files":[{"patch":"@@ -1001,2 +1001,2 @@\n-      int index = stream()->get_constant_pool_index();\n-      BasicType type = stream()->get_basic_type_for_constant_at(index);\n+      int cp_index = stream()->get_constant_pool_index();\n+      BasicType type = stream()->get_basic_type_for_constant_at(cp_index);\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -270,1 +270,1 @@\n-constantTag ciBytecodeStream::get_constant_pool_tag(int index) const {\n+constantTag ciBytecodeStream::get_constant_pool_tag(int cp_index) const {\n@@ -272,1 +272,1 @@\n-  return _method->get_Method()->constants()->constant_tag_at(index);\n+  return _method->get_Method()->constants()->constant_tag_at(cp_index);\n@@ -286,1 +286,1 @@\n-BasicType ciBytecodeStream::get_basic_type_for_constant_at(int index) const {\n+BasicType ciBytecodeStream::get_basic_type_for_constant_at(int cp_index) const {\n@@ -288,1 +288,1 @@\n-  return _method->get_Method()->constants()->basic_type_for_constant_at(index);\n+  return _method->get_Method()->constants()->basic_type_for_constant_at(cp_index);\n","filename":"src\/hotspot\/share\/ci\/ciStreams.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -232,1 +232,1 @@\n-  BasicType   get_basic_type_for_constant_at(int index) const;\n+  BasicType   get_basic_type_for_constant_at(int cp_index) const;\n","filename":"src\/hotspot\/share\/ci\/ciStreams.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -730,2 +730,2 @@\n-    int index = str->get_constant_pool_index();\n-    BasicType basic_type = str->get_basic_type_for_constant_at(index);\n+    int cp_index = str->get_constant_pool_index();\n+    BasicType basic_type = str->get_basic_type_for_constant_at(cp_index);\n","filename":"src\/hotspot\/share\/ci\/ciTypeFlow.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -218,2 +218,2 @@\n-  int index = pool_index();\n-  return _method->constants()->basic_type_for_constant_at(index);\n+  int cp_index = pool_index();\n+  return _method->constants()->basic_type_for_constant_at(cp_index);\n","filename":"src\/hotspot\/share\/interpreter\/bytecode.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -154,2 +154,2 @@\n-  int index = wide ? last_frame.get_index_u2(Bytecodes::_ldc_w) : last_frame.get_index_u1(Bytecodes::_ldc);\n-  constantTag tag = pool->tag_at(index);\n+  int cp_index = wide ? last_frame.get_index_u2(Bytecodes::_ldc_w) : last_frame.get_index_u1(Bytecodes::_ldc);\n+  constantTag tag = pool->tag_at(cp_index);\n@@ -158,1 +158,1 @@\n-  Klass* klass = pool->klass_at(index, CHECK);\n+  Klass* klass = pool->klass_at(cp_index, CHECK);\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -385,2 +385,2 @@\n-  for (int index = 1; index < length(); index++) { \/\/ Index 0 is unused\n-    switch (tag_at(index).value()) {\n+  for (int cp_index = 1; cp_index < length(); cp_index++) { \/\/ cp_index 0 is unused\n+    switch (tag_at(cp_index).value()) {\n@@ -388,1 +388,1 @@\n-      tag_at_put(index, JVM_CONSTANT_UnresolvedClass);\n+      tag_at_put(cp_index, JVM_CONSTANT_UnresolvedClass);\n@@ -391,1 +391,1 @@\n-      tag_at_put(index, JVM_CONSTANT_MethodHandle);\n+      tag_at_put(cp_index, JVM_CONSTANT_MethodHandle);\n@@ -394,1 +394,1 @@\n-      tag_at_put(index, JVM_CONSTANT_MethodType);\n+      tag_at_put(cp_index, JVM_CONSTANT_MethodType);\n@@ -397,1 +397,1 @@\n-      tag_at_put(index, JVM_CONSTANT_Dynamic);\n+      tag_at_put(cp_index, JVM_CONSTANT_Dynamic);\n@@ -400,1 +400,1 @@\n-      archived = maybe_archive_resolved_klass_at(index);\n+      archived = maybe_archive_resolved_klass_at(cp_index);\n@@ -456,1 +456,1 @@\n-void ConstantPool::string_at_put(int which, int obj_index, oop str) {\n+void ConstantPool::string_at_put(int obj_index, oop str) {\n@@ -490,1 +490,1 @@\n-Klass* ConstantPool::klass_at_impl(const constantPoolHandle& this_cp, int which,\n+Klass* ConstantPool::klass_at_impl(const constantPoolHandle& this_cp, int cp_index,\n@@ -497,1 +497,1 @@\n-  CPKlassSlot kslot = this_cp->klass_slot_at(which);\n+  CPKlassSlot kslot = this_cp->klass_slot_at(cp_index);\n@@ -504,1 +504,1 @@\n-  if (this_cp->tag_at(which).is_klass()) {\n+  if (this_cp->tag_at(cp_index).is_klass()) {\n@@ -512,1 +512,1 @@\n-  if (this_cp->tag_at(which).is_unresolved_klass_in_error()) {\n+  if (this_cp->tag_at(cp_index).is_unresolved_klass_in_error()) {\n@@ -521,1 +521,1 @@\n-    throw_resolution_error(this_cp, which, CHECK_NULL);\n+    throw_resolution_error(this_cp, cp_index, CHECK_NULL);\n@@ -548,1 +548,1 @@\n-    save_and_throw_exception(this_cp, which, constantTag(JVM_CONSTANT_UnresolvedClass), CHECK_NULL);\n+    save_and_throw_exception(this_cp, cp_index, constantTag(JVM_CONSTANT_UnresolvedClass), CHECK_NULL);\n@@ -569,1 +569,1 @@\n-  jbyte old_tag = Atomic::cmpxchg((jbyte*)this_cp->tag_addr_at(which),\n+  jbyte old_tag = Atomic::cmpxchg((jbyte*)this_cp->tag_addr_at(cp_index),\n@@ -577,1 +577,1 @@\n-    throw_resolution_error(this_cp, which, CHECK_NULL);\n+    throw_resolution_error(this_cp, cp_index, CHECK_NULL);\n@@ -759,2 +759,2 @@\n-u2 ConstantPool::name_ref_index_at(int which_nt) {\n-  jint ref_index = name_and_type_at(which_nt);\n+u2 ConstantPool::name_ref_index_at(int cp_index) {\n+  jint ref_index = name_and_type_at(cp_index);\n@@ -765,2 +765,2 @@\n-u2 ConstantPool::signature_ref_index_at(int which_nt) {\n-  jint ref_index = name_and_type_at(which_nt);\n+u2 ConstantPool::signature_ref_index_at(int cp_index) {\n+  jint ref_index = name_and_type_at(cp_index);\n@@ -775,2 +775,2 @@\n-Symbol* ConstantPool::klass_name_at(int which) const {\n-  return symbol_at(klass_slot_at(which).name_index());\n+Symbol* ConstantPool::klass_name_at(int cp_index) const {\n+  return symbol_at(klass_slot_at(cp_index).name_index());\n@@ -784,2 +784,2 @@\n-Symbol* ConstantPool::uncached_klass_ref_at_noresolve(int which) {\n-  jint ref_index = uncached_klass_ref_index_at(which);\n+Symbol* ConstantPool::uncached_klass_ref_at_noresolve(int cp_index) {\n+  jint ref_index = uncached_klass_ref_index_at(cp_index);\n@@ -789,2 +789,2 @@\n-char* ConstantPool::string_at_noresolve(int which) {\n-  return unresolved_string_at(which)->as_C_string();\n+char* ConstantPool::string_at_noresolve(int cp_index) {\n+  return unresolved_string_at(cp_index)->as_C_string();\n@@ -793,2 +793,2 @@\n-BasicType ConstantPool::basic_type_for_signature_at(int which) const {\n-  return Signature::basic_type(symbol_at(which));\n+BasicType ConstantPool::basic_type_for_signature_at(int cp_index) const {\n+  return Signature::basic_type(symbol_at(cp_index));\n@@ -887,1 +887,1 @@\n-void ConstantPool::save_and_throw_exception(const constantPoolHandle& this_cp, int which,\n+void ConstantPool::save_and_throw_exception(const constantPoolHandle& this_cp, int cp_index,\n@@ -898,2 +898,2 @@\n-  } else if (this_cp->tag_at(which).value() != error_tag) {\n-    add_resolution_error(this_cp, which, tag, PENDING_EXCEPTION);\n+  } else if (this_cp->tag_at(cp_index).value() != error_tag) {\n+    add_resolution_error(this_cp, cp_index, tag, PENDING_EXCEPTION);\n@@ -906,1 +906,1 @@\n-    jbyte old_tag = Atomic::cmpxchg((jbyte*)this_cp->tag_addr_at(which),\n+    jbyte old_tag = Atomic::cmpxchg((jbyte*)this_cp->tag_addr_at(cp_index),\n@@ -911,1 +911,1 @@\n-      assert(this_cp->tag_at(which).is_klass(), \"Wrong tag value\");\n+      assert(this_cp->tag_at(cp_index).is_klass(), \"Wrong tag value\");\n@@ -917,1 +917,1 @@\n-    throw_resolution_error(this_cp, which, CHECK);\n+    throw_resolution_error(this_cp, cp_index, CHECK);\n@@ -921,2 +921,2 @@\n-constantTag ConstantPool::constant_tag_at(int which) {\n-  constantTag tag = tag_at(which);\n+constantTag ConstantPool::constant_tag_at(int cp_index) {\n+  constantTag tag = tag_at(cp_index);\n@@ -924,1 +924,1 @@\n-    BasicType bt = basic_type_for_constant_at(which);\n+    BasicType bt = basic_type_for_constant_at(cp_index);\n@@ -930,2 +930,2 @@\n-BasicType ConstantPool::basic_type_for_constant_at(int which) {\n-  constantTag tag = tag_at(which);\n+BasicType ConstantPool::basic_type_for_constant_at(int cp_index) {\n+  constantTag tag = tag_at(cp_index);\n@@ -935,1 +935,1 @@\n-    Symbol* constant_type = uncached_signature_ref_at(which);\n+    Symbol* constant_type = uncached_signature_ref_at(cp_index);\n@@ -945,1 +945,1 @@\n-                                           int index, int cache_index,\n+                                           int cp_index, int cache_index,\n@@ -954,2 +954,2 @@\n-    assert(index > 0, \"valid index\");\n-    cache_index = this_cp->cp_to_object_index(index);\n+    assert(cp_index > 0, \"valid constant pool index\");\n+    cache_index = this_cp->cp_to_object_index(cp_index);\n@@ -958,1 +958,1 @@\n-  assert(index == _no_index_sentinel || index >= 0, \"\");\n+  assert(cp_index == _no_index_sentinel || cp_index >= 0, \"\");\n@@ -964,1 +964,1 @@\n-        DEBUG_ONLY(int temp_index = (index >= 0 ? index : this_cp->object_to_cp_index(cache_index)));\n+        DEBUG_ONLY(int temp_index = (cp_index >= 0 ? cp_index : this_cp->object_to_cp_index(cache_index)));\n@@ -972,1 +972,1 @@\n-    index = this_cp->object_to_cp_index(cache_index);\n+    cp_index = this_cp->object_to_cp_index(cache_index);\n@@ -977,1 +977,1 @@\n-  constantTag tag = this_cp->tag_at(index);\n+  constantTag tag = this_cp->tag_at(cp_index);\n@@ -984,1 +984,1 @@\n-      CPKlassSlot kslot = this_cp->klass_slot_at(index);\n+      CPKlassSlot kslot = this_cp->klass_slot_at(cp_index);\n@@ -1014,1 +1014,1 @@\n-      Klass* resolved = klass_at_impl(this_cp, index, CHECK_NULL);\n+      Klass* resolved = klass_at_impl(this_cp, cp_index, CHECK_NULL);\n@@ -1023,1 +1023,1 @@\n-      BootstrapInfo bootstrap_specifier(this_cp, index);\n+      BootstrapInfo bootstrap_specifier(this_cp, cp_index);\n@@ -1041,1 +1041,1 @@\n-        save_and_throw_exception(this_cp, index, tag, CHECK_NULL);\n+        save_and_throw_exception(this_cp, cp_index, tag, CHECK_NULL);\n@@ -1075,1 +1075,1 @@\n-    result_oop = string_at_impl(this_cp, index, cache_index, CHECK_NULL);\n+    result_oop = string_at_impl(this_cp, cp_index, cache_index, CHECK_NULL);\n@@ -1080,5 +1080,5 @@\n-      int ref_kind                 = this_cp->method_handle_ref_kind_at(index);\n-      int callee_index             = this_cp->method_handle_klass_index_at(index);\n-      Symbol*  name =      this_cp->method_handle_name_ref_at(index);\n-      Symbol*  signature = this_cp->method_handle_signature_ref_at(index);\n-      constantTag m_tag  = this_cp->tag_at(this_cp->method_handle_index_at(index));\n+      int ref_kind                 = this_cp->method_handle_ref_kind_at(cp_index);\n+      int callee_index             = this_cp->method_handle_klass_index_at(cp_index);\n+      Symbol*  name =      this_cp->method_handle_name_ref_at(cp_index);\n+      Symbol*  signature = this_cp->method_handle_signature_ref_at(cp_index);\n+      constantTag m_tag  = this_cp->tag_at(this_cp->method_handle_index_at(cp_index));\n@@ -1087,1 +1087,1 @@\n-                              ref_kind, index, this_cp->method_handle_index_at(index),\n+                              ref_kind, cp_index, this_cp->method_handle_index_at(cp_index),\n@@ -1093,1 +1093,1 @@\n-        save_and_throw_exception(this_cp, index, tag, CHECK_NULL);\n+        save_and_throw_exception(this_cp, cp_index, tag, CHECK_NULL);\n@@ -1107,1 +1107,1 @@\n-                 index,\n+                 cp_index,\n@@ -1111,1 +1111,1 @@\n-        save_and_throw_exception(this_cp, index, tag, CHECK_NULL);\n+        save_and_throw_exception(this_cp, cp_index, tag, CHECK_NULL);\n@@ -1120,1 +1120,1 @@\n-        save_and_throw_exception(this_cp, index, tag, CHECK_NULL);\n+        save_and_throw_exception(this_cp, cp_index, tag, CHECK_NULL);\n@@ -1128,1 +1128,1 @@\n-      Symbol*  signature = this_cp->method_type_signature_at(index);\n+      Symbol*  signature = this_cp->method_type_signature_at(cp_index);\n@@ -1131,1 +1131,1 @@\n-                              index, this_cp->method_type_index_at(index),\n+                              cp_index, this_cp->method_type_index_at(cp_index),\n@@ -1139,1 +1139,1 @@\n-        save_and_throw_exception(this_cp, index, tag, CHECK_NULL);\n+        save_and_throw_exception(this_cp, cp_index, tag, CHECK_NULL);\n@@ -1146,1 +1146,1 @@\n-    prim_value.i = this_cp->int_at(index);\n+    prim_value.i = this_cp->int_at(cp_index);\n@@ -1152,1 +1152,1 @@\n-    prim_value.f = this_cp->float_at(index);\n+    prim_value.f = this_cp->float_at(cp_index);\n@@ -1158,1 +1158,1 @@\n-    prim_value.j = this_cp->long_at(index);\n+    prim_value.j = this_cp->long_at(cp_index);\n@@ -1164,1 +1164,1 @@\n-    prim_value.d = this_cp->double_at(index);\n+    prim_value.d = this_cp->double_at(cp_index);\n@@ -1172,1 +1172,1 @@\n-    throw_resolution_error(this_cp, index, CHECK_NULL);\n+    throw_resolution_error(this_cp, cp_index, CHECK_NULL);\n@@ -1176,1 +1176,1 @@\n-    fatal(\"unexpected constant tag at CP %p[%d\/%d] = %d\", this_cp(), index, cache_index, tag.value());\n+    fatal(\"unexpected constant tag at CP %p[%d\/%d] = %d\", this_cp(), cp_index, cache_index, tag.value());\n@@ -1202,2 +1202,2 @@\n-oop ConstantPool::uncached_string_at(int which, TRAPS) {\n-  Symbol* sym = unresolved_string_at(which);\n+oop ConstantPool::uncached_string_at(int cp_index, TRAPS) {\n+  Symbol* sym = unresolved_string_at(cp_index);\n@@ -1209,1 +1209,1 @@\n-void ConstantPool::copy_bootstrap_arguments_at_impl(const constantPoolHandle& this_cp, int index,\n+void ConstantPool::copy_bootstrap_arguments_at_impl(const constantPoolHandle& this_cp, int cp_index,\n@@ -1215,2 +1215,2 @@\n-  \/\/ checks: index in range [0..this_cp->length),\n-  \/\/ tag at index, start..end in range [0..this_cp->bootstrap_argument_count],\n+  \/\/ checks: cp_index in range [0..this_cp->length),\n+  \/\/ tag at cp_index, start..end in range [0..this_cp->bootstrap_argument_count],\n@@ -1218,3 +1218,3 @@\n-  if ((0 >= index    || index >= this_cp->length())  ||\n-      !(this_cp->tag_at(index).is_invoke_dynamic()    ||\n-        this_cp->tag_at(index).is_dynamic_constant()) ||\n+  if ((0 >= cp_index    || cp_index >= this_cp->length())  ||\n+      !(this_cp->tag_at(cp_index).is_invoke_dynamic()    ||\n+        this_cp->tag_at(cp_index).is_dynamic_constant()) ||\n@@ -1222,1 +1222,1 @@\n-      (end_arg > this_cp->bootstrap_argument_count_at(index)) ||\n+      (end_arg > this_cp->bootstrap_argument_count_at(cp_index)) ||\n@@ -1233,1 +1233,1 @@\n-    int arg_index = this_cp->bootstrap_argument_index_at(index, i);\n+    int arg_index = this_cp->bootstrap_argument_index_at(cp_index, i);\n@@ -1246,1 +1246,1 @@\n-oop ConstantPool::string_at_impl(const constantPoolHandle& this_cp, int which, int obj_index, TRAPS) {\n+oop ConstantPool::string_at_impl(const constantPoolHandle& this_cp, int cp_index, int obj_index, TRAPS) {\n@@ -1251,1 +1251,1 @@\n-  Symbol* sym = this_cp->unresolved_string_at(which);\n+  Symbol* sym = this_cp->unresolved_string_at(cp_index);\n@@ -1253,1 +1253,1 @@\n-  this_cp->string_at_put(which, obj_index, str);\n+  this_cp->string_at_put(obj_index, str);\n@@ -1259,1 +1259,1 @@\n-bool ConstantPool::klass_name_at_matches(const InstanceKlass* k, int which) {\n+bool ConstantPool::klass_name_at_matches(const InstanceKlass* k, int cp_index) {\n@@ -1261,1 +1261,1 @@\n-  Symbol* cp_name = klass_name_at(which);\n+  Symbol* cp_name = klass_name_at(cp_index);\n@@ -1619,1 +1619,1 @@\n-  int dest_i = to_i;  \/\/ leave original alone for debug purposes\n+  int dest_cpi = to_i;  \/\/ leave original alone for debug purposes\n@@ -1621,2 +1621,2 @@\n-  for (int src_i = start_i; src_i <= end_i; \/* see loop bottom *\/ ) {\n-    copy_entry_to(from_cp, src_i, to_cp, dest_i);\n+  for (int src_cpi = start_i; src_cpi <= end_i; \/* see loop bottom *\/ ) {\n+    copy_entry_to(from_cp, src_cpi, to_cp, dest_cpi);\n@@ -1624,1 +1624,1 @@\n-    switch (from_cp->tag_at(src_i).value()) {\n+    switch (from_cp->tag_at(src_cpi).value()) {\n@@ -1628,2 +1628,2 @@\n-      src_i += 2;\n-      dest_i += 2;\n+      src_cpi += 2;\n+      dest_cpi += 2;\n@@ -1634,2 +1634,2 @@\n-      src_i++;\n-      dest_i++;\n+      src_cpi++;\n+      dest_cpi++;\n@@ -1847,1 +1847,1 @@\n-const char* ConstantPool::printable_name_at(int which) {\n+const char* ConstantPool::printable_name_at(int cp_index) {\n@@ -1849,1 +1849,1 @@\n-  constantTag tag = tag_at(which);\n+  constantTag tag = tag_at(cp_index);\n@@ -1852,1 +1852,1 @@\n-    return string_at_noresolve(which);\n+    return string_at_noresolve(cp_index);\n@@ -1854,1 +1854,1 @@\n-    return klass_name_at(which)->as_C_string();\n+    return klass_name_at(cp_index)->as_C_string();\n@@ -1856,1 +1856,1 @@\n-    return symbol_at(which)->as_C_string();\n+    return symbol_at(cp_index)->as_C_string();\n@@ -2325,1 +2325,1 @@\n-void ConstantPool::print_entry_on(const int index, outputStream* st) {\n+void ConstantPool::print_entry_on(const int cp_index, outputStream* st) {\n@@ -2327,2 +2327,2 @@\n-  st->print(\" - %3d : \", index);\n-  tag_at(index).print_on(st);\n+  st->print(\" - %3d : \", cp_index);\n+  tag_at(cp_index).print_on(st);\n@@ -2330,1 +2330,1 @@\n-  switch (tag_at(index).value()) {\n+  switch (tag_at(cp_index).value()) {\n@@ -2332,1 +2332,1 @@\n-      { Klass* k = klass_at(index, CATCH);\n+      { Klass* k = klass_at(cp_index, CATCH);\n@@ -2341,2 +2341,2 @@\n-      st->print(\"klass_index=%d\", uncached_klass_ref_index_at(index));\n-      st->print(\" name_and_type_index=%d\", uncached_name_and_type_ref_index_at(index));\n+      st->print(\"klass_index=%d\", uncached_klass_ref_index_at(cp_index));\n+      st->print(\" name_and_type_index=%d\", uncached_name_and_type_ref_index_at(cp_index));\n@@ -2345,1 +2345,1 @@\n-      unresolved_string_at(index)->print_value_on(st);\n+      unresolved_string_at(cp_index)->print_value_on(st);\n@@ -2348,1 +2348,1 @@\n-      st->print(\"%d\", int_at(index));\n+      st->print(\"%d\", int_at(cp_index));\n@@ -2351,1 +2351,1 @@\n-      st->print(\"%f\", float_at(index));\n+      st->print(\"%f\", float_at(cp_index));\n@@ -2354,1 +2354,1 @@\n-      st->print_jlong(long_at(index));\n+      st->print_jlong(long_at(cp_index));\n@@ -2357,1 +2357,1 @@\n-      st->print(\"%lf\", double_at(index));\n+      st->print(\"%lf\", double_at(cp_index));\n@@ -2360,2 +2360,2 @@\n-      st->print(\"name_index=%d\", name_ref_index_at(index));\n-      st->print(\" signature_index=%d\", signature_ref_index_at(index));\n+      st->print(\"name_index=%d\", name_ref_index_at(cp_index));\n+      st->print(\" signature_index=%d\", signature_ref_index_at(cp_index));\n@@ -2364,1 +2364,1 @@\n-      symbol_at(index)->print_value_on(st);\n+      symbol_at(cp_index)->print_value_on(st);\n@@ -2367,1 +2367,1 @@\n-        int name_index = *int_at_addr(index);\n+        int name_index = *int_at_addr(cp_index);\n@@ -2374,1 +2374,1 @@\n-        CPKlassSlot kslot = klass_slot_at(index);\n+        CPKlassSlot kslot = klass_slot_at(cp_index);\n@@ -2383,2 +2383,2 @@\n-      st->print(\"ref_kind=%d\", method_handle_ref_kind_at(index));\n-      st->print(\" ref_index=%d\", method_handle_index_at(index));\n+      st->print(\"ref_kind=%d\", method_handle_ref_kind_at(cp_index));\n+      st->print(\" ref_index=%d\", method_handle_index_at(cp_index));\n@@ -2388,1 +2388,1 @@\n-      st->print(\"signature_index=%d\", method_type_index_at(index));\n+      st->print(\"signature_index=%d\", method_type_index_at(cp_index));\n@@ -2393,3 +2393,3 @@\n-        st->print(\"bootstrap_method_index=%d\", bootstrap_method_ref_index_at(index));\n-        st->print(\" type_index=%d\", bootstrap_name_and_type_ref_index_at(index));\n-        int argc = bootstrap_argument_count_at(index);\n+        st->print(\"bootstrap_method_index=%d\", bootstrap_method_ref_index_at(cp_index));\n+        st->print(\" type_index=%d\", bootstrap_name_and_type_ref_index_at(cp_index));\n+        int argc = bootstrap_argument_count_at(cp_index);\n@@ -2398,1 +2398,1 @@\n-            int arg = bootstrap_argument_index_at(index, arg_i);\n+            int arg = bootstrap_argument_index_at(cp_index, arg_i);\n@@ -2407,3 +2407,3 @@\n-        st->print(\"bootstrap_method_index=%d\", bootstrap_method_ref_index_at(index));\n-        st->print(\" name_and_type_index=%d\", bootstrap_name_and_type_ref_index_at(index));\n-        int argc = bootstrap_argument_count_at(index);\n+        st->print(\"bootstrap_method_index=%d\", bootstrap_method_ref_index_at(cp_index));\n+        st->print(\" name_and_type_index=%d\", bootstrap_name_and_type_ref_index_at(cp_index));\n+        int argc = bootstrap_argument_count_at(cp_index);\n@@ -2412,1 +2412,1 @@\n-            int arg = bootstrap_argument_index_at(index, arg_i);\n+            int arg = bootstrap_argument_index_at(cp_index, arg_i);\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":127,"deletions":127,"binary":false,"changes":254,"status":"modified"},{"patch":"@@ -125,3 +125,3 @@\n-  void set_tags(Array<u1>* tags)               { _tags = tags; }\n-  void tag_at_put(int which, jbyte t)          { tags()->at_put(which, t); }\n-  void release_tag_at_put(int which, jbyte t)  { tags()->release_at_put(which, t); }\n+  void set_tags(Array<u1>* tags)                 { _tags = tags; }\n+  void tag_at_put(int cp_index, jbyte t)         { tags()->at_put(cp_index, t); }\n+  void release_tag_at_put(int cp_index, jbyte t) { tags()->release_at_put(cp_index, t); }\n@@ -129,1 +129,1 @@\n-  u1* tag_addr_at(int which) const             { return tags()->adr_at(which); }\n+  u1* tag_addr_at(int cp_index) const            { return tags()->adr_at(cp_index); }\n@@ -139,3 +139,3 @@\n-  intptr_t* obj_at_addr(int which) const {\n-    assert(is_within_bounds(which), \"index out of bounds\");\n-    return (intptr_t*) &base()[which];\n+  intptr_t* obj_at_addr(int cp_index) const {\n+    assert(is_within_bounds(cp_index), \"index out of bounds\");\n+    return (intptr_t*) &base()[cp_index];\n@@ -144,3 +144,3 @@\n-  jint* int_at_addr(int which) const {\n-    assert(is_within_bounds(which), \"index out of bounds\");\n-    return (jint*) &base()[which];\n+  jint* int_at_addr(int cp_index) const {\n+    assert(is_within_bounds(cp_index), \"index out of bounds\");\n+    return (jint*) &base()[cp_index];\n@@ -149,3 +149,3 @@\n-  jlong* long_at_addr(int which) const {\n-    assert(is_within_bounds(which), \"index out of bounds\");\n-    return (jlong*) &base()[which];\n+  jlong* long_at_addr(int cp_index) const {\n+    assert(is_within_bounds(cp_index), \"index out of bounds\");\n+    return (jlong*) &base()[cp_index];\n@@ -154,3 +154,3 @@\n-  jfloat* float_at_addr(int which) const {\n-    assert(is_within_bounds(which), \"index out of bounds\");\n-    return (jfloat*) &base()[which];\n+  jfloat* float_at_addr(int cp_index) const {\n+    assert(is_within_bounds(cp_index), \"index out of bounds\");\n+    return (jfloat*) &base()[cp_index];\n@@ -159,3 +159,3 @@\n-  jdouble* double_at_addr(int which) const {\n-    assert(is_within_bounds(which), \"index out of bounds\");\n-    return (jdouble*) &base()[which];\n+  jdouble* double_at_addr(int cp_index) const {\n+    assert(is_within_bounds(cp_index), \"index out of bounds\");\n+    return (jdouble*) &base()[cp_index];\n@@ -273,3 +273,3 @@\n-  void klass_index_at_put(int which, int name_index) {\n-    tag_at_put(which, JVM_CONSTANT_ClassIndex);\n-    *int_at_addr(which) = name_index;\n+  void klass_index_at_put(int cp_index, int name_index) {\n+    tag_at_put(cp_index, JVM_CONSTANT_ClassIndex);\n+    *int_at_addr(cp_index) = name_index;\n@@ -281,2 +281,2 @@\n-  void unresolved_klass_at_put(int which, int name_index, int resolved_klass_index) {\n-    release_tag_at_put(which, JVM_CONSTANT_UnresolvedClass);\n+  void unresolved_klass_at_put(int cp_index, int name_index, int resolved_klass_index) {\n+    release_tag_at_put(cp_index, JVM_CONSTANT_UnresolvedClass);\n@@ -286,1 +286,1 @@\n-    *int_at_addr(which) =\n+    *int_at_addr(cp_index) =\n@@ -290,3 +290,3 @@\n-  void method_handle_index_at_put(int which, int ref_kind, int ref_index) {\n-    tag_at_put(which, JVM_CONSTANT_MethodHandle);\n-    *int_at_addr(which) = ((jint) ref_index<<16) | ref_kind;\n+  void method_handle_index_at_put(int cp_index, int ref_kind, int ref_index) {\n+    tag_at_put(cp_index, JVM_CONSTANT_MethodHandle);\n+    *int_at_addr(cp_index) = ((jint) ref_index<<16) | ref_kind;\n@@ -295,3 +295,3 @@\n-  void method_type_index_at_put(int which, int ref_index) {\n-    tag_at_put(which, JVM_CONSTANT_MethodType);\n-    *int_at_addr(which) = ref_index;\n+  void method_type_index_at_put(int cp_index, int ref_index) {\n+    tag_at_put(cp_index, JVM_CONSTANT_MethodType);\n+    *int_at_addr(cp_index) = ref_index;\n@@ -300,3 +300,3 @@\n-  void dynamic_constant_at_put(int which, int bsms_attribute_index, int name_and_type_index) {\n-    tag_at_put(which, JVM_CONSTANT_Dynamic);\n-    *int_at_addr(which) = ((jint) name_and_type_index<<16) | bsms_attribute_index;\n+  void dynamic_constant_at_put(int cp_index, int bsms_attribute_index, int name_and_type_index) {\n+    tag_at_put(cp_index, JVM_CONSTANT_Dynamic);\n+    *int_at_addr(cp_index) = ((jint) name_and_type_index<<16) | bsms_attribute_index;\n@@ -305,3 +305,3 @@\n-  void invoke_dynamic_at_put(int which, int bsms_attribute_index, int name_and_type_index) {\n-    tag_at_put(which, JVM_CONSTANT_InvokeDynamic);\n-    *int_at_addr(which) = ((jint) name_and_type_index<<16) | bsms_attribute_index;\n+  void invoke_dynamic_at_put(int cp_index, int bsms_attribute_index, int name_and_type_index) {\n+    tag_at_put(cp_index, JVM_CONSTANT_InvokeDynamic);\n+    *int_at_addr(cp_index) = ((jint) name_and_type_index<<16) | bsms_attribute_index;\n@@ -310,1 +310,1 @@\n-  void unresolved_string_at_put(int which, Symbol* s) {\n+  void unresolved_string_at_put(int cp_index, Symbol* s) {\n@@ -315,2 +315,2 @@\n-    tag_at_put(which, JVM_CONSTANT_String);\n-    *symbol_at_addr(which) = s;\n+    tag_at_put(cp_index, JVM_CONSTANT_String);\n+    *symbol_at_addr(cp_index) = s;\n@@ -319,3 +319,3 @@\n-  void int_at_put(int which, jint i) {\n-    tag_at_put(which, JVM_CONSTANT_Integer);\n-    *int_at_addr(which) = i;\n+  void int_at_put(int cp_index, jint i) {\n+    tag_at_put(cp_index, JVM_CONSTANT_Integer);\n+    *int_at_addr(cp_index) = i;\n@@ -324,2 +324,2 @@\n-  void long_at_put(int which, jlong l) {\n-    tag_at_put(which, JVM_CONSTANT_Long);\n+  void long_at_put(int cp_index, jlong l) {\n+    tag_at_put(cp_index, JVM_CONSTANT_Long);\n@@ -327,1 +327,1 @@\n-    Bytes::put_native_u8((address)long_at_addr(which), *((u8*) &l));\n+    Bytes::put_native_u8((address)long_at_addr(cp_index), *((u8*) &l));\n@@ -330,3 +330,3 @@\n-  void float_at_put(int which, jfloat f) {\n-    tag_at_put(which, JVM_CONSTANT_Float);\n-    *float_at_addr(which) = f;\n+  void float_at_put(int cp_index, jfloat f) {\n+    tag_at_put(cp_index, JVM_CONSTANT_Float);\n+    *float_at_addr(cp_index) = f;\n@@ -335,2 +335,2 @@\n-  void double_at_put(int which, jdouble d) {\n-    tag_at_put(which, JVM_CONSTANT_Double);\n+  void double_at_put(int cp_index, jdouble d) {\n+    tag_at_put(cp_index, JVM_CONSTANT_Double);\n@@ -339,1 +339,1 @@\n-    Bytes::put_native_u8((address) double_at_addr(which), *((u8*) &d));\n+    Bytes::put_native_u8((address) double_at_addr(cp_index), *((u8*) &d));\n@@ -342,3 +342,3 @@\n-  Symbol** symbol_at_addr(int which) const {\n-    assert(is_within_bounds(which), \"index out of bounds\");\n-    return (Symbol**) &base()[which];\n+  Symbol** symbol_at_addr(int cp_index) const {\n+    assert(is_within_bounds(cp_index), \"index out of bounds\");\n+    return (Symbol**) &base()[cp_index];\n@@ -347,1 +347,1 @@\n-  void symbol_at_put(int which, Symbol* s) {\n+  void symbol_at_put(int cp_index, Symbol* s) {\n@@ -349,2 +349,2 @@\n-    tag_at_put(which, JVM_CONSTANT_Utf8);\n-    *symbol_at_addr(which) = s;\n+    tag_at_put(cp_index, JVM_CONSTANT_Utf8);\n+    *symbol_at_addr(cp_index) = s;\n@@ -353,1 +353,1 @@\n-  void string_at_put(int which, int obj_index, oop str);\n+  void string_at_put(int obj_index, oop str);\n@@ -356,3 +356,3 @@\n-  void string_index_at_put(int which, int string_index) {\n-    tag_at_put(which, JVM_CONSTANT_StringIndex);\n-    *int_at_addr(which) = string_index;\n+  void string_index_at_put(int cp_index, int string_index) {\n+    tag_at_put(cp_index, JVM_CONSTANT_StringIndex);\n+    *int_at_addr(cp_index) = string_index;\n@@ -361,3 +361,3 @@\n-  void field_at_put(int which, int class_index, int name_and_type_index) {\n-    tag_at_put(which, JVM_CONSTANT_Fieldref);\n-    *int_at_addr(which) = ((jint) name_and_type_index<<16) | class_index;\n+  void field_at_put(int cp_index, int class_index, int name_and_type_index) {\n+    tag_at_put(cp_index, JVM_CONSTANT_Fieldref);\n+    *int_at_addr(cp_index) = ((jint) name_and_type_index<<16) | class_index;\n@@ -366,3 +366,3 @@\n-  void method_at_put(int which, int class_index, int name_and_type_index) {\n-    tag_at_put(which, JVM_CONSTANT_Methodref);\n-    *int_at_addr(which) = ((jint) name_and_type_index<<16) | class_index;\n+  void method_at_put(int cp_index, int class_index, int name_and_type_index) {\n+    tag_at_put(cp_index, JVM_CONSTANT_Methodref);\n+    *int_at_addr(cp_index) = ((jint) name_and_type_index<<16) | class_index;\n@@ -371,3 +371,3 @@\n-  void interface_method_at_put(int which, int class_index, int name_and_type_index) {\n-    tag_at_put(which, JVM_CONSTANT_InterfaceMethodref);\n-    *int_at_addr(which) = ((jint) name_and_type_index<<16) | class_index;  \/\/ Not so nice\n+  void interface_method_at_put(int cp_index, int class_index, int name_and_type_index) {\n+    tag_at_put(cp_index, JVM_CONSTANT_InterfaceMethodref);\n+    *int_at_addr(cp_index) = ((jint) name_and_type_index<<16) | class_index;  \/\/ Not so nice\n@@ -376,3 +376,3 @@\n-  void name_and_type_at_put(int which, int name_index, int signature_index) {\n-    tag_at_put(which, JVM_CONSTANT_NameAndType);\n-    *int_at_addr(which) = ((jint) signature_index<<16) | name_index;  \/\/ Not so nice\n+  void name_and_type_at_put(int cp_index, int name_index, int signature_index) {\n+    tag_at_put(cp_index, JVM_CONSTANT_NameAndType);\n+    *int_at_addr(cp_index) = ((jint) signature_index<<16) | name_index;  \/\/ Not so nice\n@@ -383,1 +383,1 @@\n-  constantTag tag_at(int which) const { return (constantTag)tags()->at_acquire(which); }\n+  constantTag tag_at(int cp_index) const { return (constantTag)tags()->at_acquire(cp_index); }\n@@ -387,1 +387,1 @@\n-  Klass* klass_at(int which, TRAPS) {\n+  Klass* klass_at(int cp_index, TRAPS) {\n@@ -389,1 +389,1 @@\n-    return klass_at_impl(h_this, which, THREAD);\n+    return klass_at_impl(h_this, cp_index, THREAD);\n@@ -392,2 +392,2 @@\n-  CPKlassSlot klass_slot_at(int which) const {\n-    assert(tag_at(which).is_unresolved_klass() || tag_at(which).is_klass(),\n+  CPKlassSlot klass_slot_at(int cp_index) const {\n+    assert(tag_at(cp_index).is_unresolved_klass() || tag_at(cp_index).is_klass(),\n@@ -395,1 +395,1 @@\n-    int value = *int_at_addr(which);\n+    int value = *int_at_addr(cp_index);\n@@ -401,3 +401,3 @@\n-  Symbol* klass_name_at(int which) const;  \/\/ Returns the name, w\/o resolving.\n-  int klass_name_index_at(int which) const {\n-    return klass_slot_at(which).name_index();\n+  Symbol* klass_name_at(int cp_index) const;  \/\/ Returns the name, w\/o resolving.\n+  int klass_name_index_at(int cp_index) const {\n+    return klass_slot_at(cp_index).name_index();\n@@ -406,1 +406,1 @@\n-  Klass* resolved_klass_at(int which) const;  \/\/ Used by Compiler\n+  Klass* resolved_klass_at(int cp_index) const;  \/\/ Used by Compiler\n@@ -409,2 +409,2 @@\n-  Symbol* klass_at_noresolve(int which) { return klass_name_at(which); }\n-  void temp_unresolved_klass_at_put(int which, int name_index) {\n+  Symbol* klass_at_noresolve(int cp_index) { return klass_name_at(cp_index); }\n+  void temp_unresolved_klass_at_put(int cp_index, int name_index) {\n@@ -413,1 +413,1 @@\n-    unresolved_klass_at_put(which, name_index, CPKlassSlot::_temp_resolved_klass_index);\n+    unresolved_klass_at_put(cp_index, name_index, CPKlassSlot::_temp_resolved_klass_index);\n@@ -416,3 +416,3 @@\n-  jint int_at(int which) {\n-    assert(tag_at(which).is_int(), \"Corrupted constant pool\");\n-    return *int_at_addr(which);\n+  jint int_at(int cp_index) {\n+    assert(tag_at(cp_index).is_int(), \"Corrupted constant pool\");\n+    return *int_at_addr(cp_index);\n@@ -421,4 +421,4 @@\n-  jlong long_at(int which) {\n-    assert(tag_at(which).is_long(), \"Corrupted constant pool\");\n-    \/\/ return *long_at_addr(which);\n-    u8 tmp = Bytes::get_native_u8((address)&base()[which]);\n+  jlong long_at(int cp_index) {\n+    assert(tag_at(cp_index).is_long(), \"Corrupted constant pool\");\n+    \/\/ return *long_at_addr(cp_index);\n+    u8 tmp = Bytes::get_native_u8((address)&base()[cp_index]);\n@@ -428,3 +428,3 @@\n-  jfloat float_at(int which) {\n-    assert(tag_at(which).is_float(), \"Corrupted constant pool\");\n-    return *float_at_addr(which);\n+  jfloat float_at(int cp_index) {\n+    assert(tag_at(cp_index).is_float(), \"Corrupted constant pool\");\n+    return *float_at_addr(cp_index);\n@@ -433,3 +433,3 @@\n-  jdouble double_at(int which) {\n-    assert(tag_at(which).is_double(), \"Corrupted constant pool\");\n-    u8 tmp = Bytes::get_native_u8((address)&base()[which]);\n+  jdouble double_at(int cp_index) {\n+    assert(tag_at(cp_index).is_double(), \"Corrupted constant pool\");\n+    u8 tmp = Bytes::get_native_u8((address)&base()[cp_index]);\n@@ -439,3 +439,3 @@\n-  Symbol* symbol_at(int which) const {\n-    assert(tag_at(which).is_utf8(), \"Corrupted constant pool\");\n-    return *symbol_at_addr(which);\n+  Symbol* symbol_at(int cp_index) const {\n+    assert(tag_at(cp_index).is_utf8(), \"Corrupted constant pool\");\n+    return *symbol_at_addr(cp_index);\n@@ -444,1 +444,1 @@\n-  oop string_at(int which, int obj_index, TRAPS) {\n+  oop string_at(int cp_index, int obj_index, TRAPS) {\n@@ -446,1 +446,1 @@\n-    return string_at_impl(h_this, which, obj_index, THREAD);\n+    return string_at_impl(h_this, cp_index, obj_index, THREAD);\n@@ -448,3 +448,3 @@\n-  oop string_at(int which, TRAPS) {\n-    int obj_index = cp_to_object_index(which);\n-    return string_at(which, obj_index, THREAD);\n+  oop string_at(int cp_index, TRAPS) {\n+    int obj_index = cp_to_object_index(cp_index);\n+    return string_at(cp_index, obj_index, THREAD);\n@@ -454,1 +454,1 @@\n-  oop uncached_string_at(int which, TRAPS);\n+  oop uncached_string_at(int cp_index, TRAPS);\n@@ -458,2 +458,2 @@\n-  oop resolved_string_at(int which) {\n-    assert(tag_at(which).is_string(), \"Corrupted constant pool\");\n+  oop resolved_string_at(int cp_index) {\n+    assert(tag_at(cp_index).is_string(), \"Corrupted constant pool\");\n@@ -463,1 +463,1 @@\n-    int obj_index = cp_to_object_index(which);\n+    int obj_index = cp_to_object_index(cp_index);\n@@ -467,3 +467,3 @@\n-  Symbol* unresolved_string_at(int which) {\n-    assert(tag_at(which).is_string(), \"Corrupted constant pool\");\n-    return *symbol_at_addr(which);\n+  Symbol* unresolved_string_at(int cp_index) {\n+    assert(tag_at(cp_index).is_string(), \"Corrupted constant pool\");\n+    return *symbol_at_addr(cp_index);\n@@ -476,1 +476,1 @@\n-  char* string_at_noresolve(int which);\n+  char* string_at_noresolve(int cp_index);\n@@ -478,3 +478,3 @@\n-  jint name_and_type_at(int which) {\n-    assert(tag_at(which).is_name_and_type(), \"Corrupted constant pool\");\n-    return *int_at_addr(which);\n+  jint name_and_type_at(int cp_index) {\n+    assert(tag_at(cp_index).is_name_and_type(), \"Corrupted constant pool\");\n+    return *int_at_addr(cp_index);\n@@ -483,4 +483,4 @@\n-  int method_handle_ref_kind_at(int which) {\n-    assert(tag_at(which).is_method_handle() ||\n-           tag_at(which).is_method_handle_in_error(), \"Corrupted constant pool\");\n-    return extract_low_short_from_int(*int_at_addr(which));  \/\/ mask out unwanted ref_index bits\n+  int method_handle_ref_kind_at(int cp_index) {\n+    assert(tag_at(cp_index).is_method_handle() ||\n+           tag_at(cp_index).is_method_handle_in_error(), \"Corrupted constant pool\");\n+    return extract_low_short_from_int(*int_at_addr(cp_index));  \/\/ mask out unwanted ref_index bits\n@@ -488,4 +488,4 @@\n-  int method_handle_index_at(int which) {\n-    assert(tag_at(which).is_method_handle() ||\n-           tag_at(which).is_method_handle_in_error(), \"Corrupted constant pool\");\n-    return extract_high_short_from_int(*int_at_addr(which));  \/\/ shift out unwanted ref_kind bits\n+  int method_handle_index_at(int cp_index) {\n+    assert(tag_at(cp_index).is_method_handle() ||\n+           tag_at(cp_index).is_method_handle_in_error(), \"Corrupted constant pool\");\n+    return extract_high_short_from_int(*int_at_addr(cp_index));  \/\/ shift out unwanted ref_kind bits\n@@ -493,4 +493,4 @@\n-  int method_type_index_at(int which) {\n-    assert(tag_at(which).is_method_type() ||\n-           tag_at(which).is_method_type_in_error(), \"Corrupted constant pool\");\n-    return *int_at_addr(which);\n+  int method_type_index_at(int cp_index) {\n+    assert(tag_at(cp_index).is_method_type() ||\n+           tag_at(cp_index).is_method_type_in_error(), \"Corrupted constant pool\");\n+    return *int_at_addr(cp_index);\n@@ -500,2 +500,2 @@\n-  Symbol* method_handle_name_ref_at(int which) {\n-    int member = method_handle_index_at(which);\n+  Symbol* method_handle_name_ref_at(int cp_index) {\n+    int member = method_handle_index_at(cp_index);\n@@ -504,2 +504,2 @@\n-  Symbol* method_handle_signature_ref_at(int which) {\n-    int member = method_handle_index_at(which);\n+  Symbol* method_handle_signature_ref_at(int cp_index) {\n+    int member = method_handle_index_at(cp_index);\n@@ -508,2 +508,2 @@\n-  u2 method_handle_klass_index_at(int which) {\n-    int member = method_handle_index_at(which);\n+  u2 method_handle_klass_index_at(int cp_index) {\n+    int member = method_handle_index_at(cp_index);\n@@ -512,2 +512,2 @@\n-  Symbol* method_type_signature_at(int which) {\n-    int sym = method_type_index_at(which);\n+  Symbol* method_type_signature_at(int cp_index) {\n+    int sym = method_type_index_at(cp_index);\n@@ -517,3 +517,3 @@\n-  u2 bootstrap_name_and_type_ref_index_at(int which) {\n-    assert(tag_at(which).has_bootstrap(), \"Corrupted constant pool\");\n-    return extract_high_short_from_int(*int_at_addr(which));\n+  u2 bootstrap_name_and_type_ref_index_at(int cp_index) {\n+    assert(tag_at(cp_index).has_bootstrap(), \"Corrupted constant pool\");\n+    return extract_high_short_from_int(*int_at_addr(cp_index));\n@@ -521,3 +521,3 @@\n-  u2 bootstrap_methods_attribute_index(int which) {\n-    assert(tag_at(which).has_bootstrap(), \"Corrupted constant pool\");\n-    return extract_low_short_from_int(*int_at_addr(which));\n+  u2 bootstrap_methods_attribute_index(int cp_index) {\n+    assert(tag_at(cp_index).has_bootstrap(), \"Corrupted constant pool\");\n+    return extract_low_short_from_int(*int_at_addr(cp_index));\n@@ -525,2 +525,2 @@\n-  int bootstrap_operand_base(int which) {\n-    int bsms_attribute_index = bootstrap_methods_attribute_index(which);\n+  int bootstrap_operand_base(int cp_index) {\n+    int bsms_attribute_index = bootstrap_methods_attribute_index(cp_index);\n@@ -566,2 +566,2 @@\n-  int bootstrap_operand_limit(int which) {\n-    int bsms_attribute_index = bootstrap_methods_attribute_index(which);\n+  int bootstrap_operand_limit(int cp_index) {\n+    int bsms_attribute_index = bootstrap_methods_attribute_index(cp_index);\n@@ -621,3 +621,3 @@\n-  u2 bootstrap_method_ref_index_at(int which) {\n-    assert(tag_at(which).has_bootstrap(), \"Corrupted constant pool\");\n-    int op_base = bootstrap_operand_base(which);\n+  u2 bootstrap_method_ref_index_at(int cp_index) {\n+    assert(tag_at(cp_index).has_bootstrap(), \"Corrupted constant pool\");\n+    int op_base = bootstrap_operand_base(cp_index);\n@@ -626,3 +626,3 @@\n-  u2 bootstrap_argument_count_at(int which) {\n-    assert(tag_at(which).has_bootstrap(), \"Corrupted constant pool\");\n-    int op_base = bootstrap_operand_base(which);\n+  u2 bootstrap_argument_count_at(int cp_index) {\n+    assert(tag_at(cp_index).has_bootstrap(), \"Corrupted constant pool\");\n+    int op_base = bootstrap_operand_base(cp_index);\n@@ -631,1 +631,1 @@\n-               int next_offset = bootstrap_operand_limit(which));\n+               int next_offset = bootstrap_operand_limit(cp_index));\n@@ -635,2 +635,2 @@\n-  u2 bootstrap_argument_index_at(int which, int j) {\n-    int op_base = bootstrap_operand_base(which);\n+  u2 bootstrap_argument_index_at(int cp_index, int j) {\n+    int op_base = bootstrap_operand_base(cp_index);\n@@ -679,2 +679,2 @@\n-  u2 name_ref_index_at(int which_nt);            \/\/ ==  low-order jshort of name_and_type_at(which_nt)\n-  u2 signature_ref_index_at(int which_nt);       \/\/ == high-order jshort of name_and_type_at(which_nt)\n+  u2 name_ref_index_at(int cp_index);            \/\/ ==  low-order jshort of name_and_type_at(cp_index)\n+  u2 signature_ref_index_at(int cp_index);       \/\/ == high-order jshort of name_and_type_at(cp_index)\n@@ -682,1 +682,1 @@\n-  BasicType basic_type_for_signature_at(int which) const;\n+  BasicType basic_type_for_signature_at(int cp_index) const;\n@@ -704,1 +704,1 @@\n-  constantTag constant_tag_at(int which);\n+  constantTag constant_tag_at(int cp_index);\n@@ -706,1 +706,1 @@\n-  BasicType basic_type_for_constant_at(int which);\n+  BasicType basic_type_for_constant_at(int cp_index);\n@@ -709,1 +709,1 @@\n-  oop resolve_constant_at(int index, TRAPS) {\n+  oop resolve_constant_at(int cp_index, TRAPS) {\n@@ -711,1 +711,1 @@\n-    return resolve_constant_at_impl(h_this, index, _no_index_sentinel, nullptr, THREAD);\n+    return resolve_constant_at_impl(h_this, cp_index, _no_index_sentinel, nullptr, THREAD);\n@@ -719,1 +719,1 @@\n-  oop resolve_possibly_cached_constant_at(int pool_index, TRAPS) {\n+  oop resolve_possibly_cached_constant_at(int cp_index, TRAPS) {\n@@ -721,1 +721,1 @@\n-    return resolve_constant_at_impl(h_this, pool_index, _possible_index_sentinel, nullptr, THREAD);\n+    return resolve_constant_at_impl(h_this, cp_index, _possible_index_sentinel, nullptr, THREAD);\n@@ -724,1 +724,1 @@\n-  oop find_cached_constant_at(int pool_index, bool& found_it, TRAPS) {\n+  oop find_cached_constant_at(int cp_index, bool& found_it, TRAPS) {\n@@ -726,1 +726,1 @@\n-    return resolve_constant_at_impl(h_this, pool_index, _possible_index_sentinel, &found_it, THREAD);\n+    return resolve_constant_at_impl(h_this, cp_index, _possible_index_sentinel, &found_it, THREAD);\n@@ -729,1 +729,1 @@\n-  void copy_bootstrap_arguments_at(int index,\n+  void copy_bootstrap_arguments_at(int cp_index,\n@@ -734,1 +734,1 @@\n-    copy_bootstrap_arguments_at_impl(h_this, index, start_arg, end_arg,\n+    copy_bootstrap_arguments_at_impl(h_this, cp_index, start_arg, end_arg,\n@@ -739,1 +739,1 @@\n-  bool klass_name_at_matches(const InstanceKlass* k, int which);\n+  bool klass_name_at_matches(const InstanceKlass* k, int cp_index);\n@@ -794,1 +794,1 @@\n-  const char* printable_name_at(int which) PRODUCT_RETURN0;\n+  const char* printable_name_at(int cp_index) PRODUCT_RETURN0;\n@@ -816,3 +816,3 @@\n-  jint klass_index_at(int which) {\n-    assert(tag_at(which).is_klass_index(), \"Corrupted constant pool\");\n-    return *int_at_addr(which);\n+  jint klass_index_at(int cp_index) {\n+    assert(tag_at(cp_index).is_klass_index(), \"Corrupted constant pool\");\n+    return *int_at_addr(cp_index);\n@@ -821,3 +821,3 @@\n-  jint string_index_at(int which) {\n-    assert(tag_at(which).is_string_index(), \"Corrupted constant pool\");\n-    return *int_at_addr(which);\n+  jint string_index_at(int cp_index) {\n+    assert(tag_at(cp_index).is_string_index(), \"Corrupted constant pool\");\n+    return *int_at_addr(cp_index);\n@@ -831,2 +831,2 @@\n-  static Klass* klass_at_impl(const constantPoolHandle& this_cp, int which, TRAPS);\n-  static oop string_at_impl(const constantPoolHandle& this_cp, int which, int obj_index, TRAPS);\n+  static Klass* klass_at_impl(const constantPoolHandle& this_cp, int cp_index, TRAPS);\n+  static oop string_at_impl(const constantPoolHandle& this_cp, int cp_index, int obj_index, TRAPS);\n@@ -839,1 +839,1 @@\n-  static oop resolve_constant_at_impl(const constantPoolHandle& this_cp, int index, int cache_index,\n+  static oop resolve_constant_at_impl(const constantPoolHandle& this_cp, int cp_index, int cache_index,\n@@ -841,1 +841,1 @@\n-  static void copy_bootstrap_arguments_at_impl(const constantPoolHandle& this_cp, int index,\n+  static void copy_bootstrap_arguments_at_impl(const constantPoolHandle& this_cp, int cp_index,\n@@ -847,1 +847,1 @@\n-  static void save_and_throw_exception(const constantPoolHandle& this_cp, int which, constantTag tag, TRAPS);\n+  static void save_and_throw_exception(const constantPoolHandle& this_cp, int cp_index, constantTag tag, TRAPS);\n@@ -855,1 +855,1 @@\n-  void copy_cp_to(int start_i, int end_i, const constantPoolHandle& to_cp, int to_i, TRAPS) {\n+  void copy_cp_to(int start_cpi, int end_cpi, const constantPoolHandle& to_cp, int to_cpi, TRAPS) {\n@@ -857,1 +857,1 @@\n-    copy_cp_to_impl(h_this, start_i, end_i, to_cp, to_i, THREAD);\n+    copy_cp_to_impl(h_this, start_cpi, end_cpi, to_cp, to_cpi, THREAD);\n@@ -859,2 +859,2 @@\n-  static void copy_cp_to_impl(const constantPoolHandle& from_cp, int start_i, int end_i, const constantPoolHandle& to_cp, int to_i, TRAPS);\n-  static void copy_entry_to(const constantPoolHandle& from_cp, int from_i, const constantPoolHandle& to_cp, int to_i);\n+  static void copy_cp_to_impl(const constantPoolHandle& from_cp, int start_cpi, int end_cpi, const constantPoolHandle& to_cp, int to_cpi, TRAPS);\n+  static void copy_entry_to(const constantPoolHandle& from_cp, int from_cpi, const constantPoolHandle& to_cp, int to_cpi);\n","filename":"src\/hotspot\/share\/oops\/constantPool.hpp","additions":188,"deletions":188,"binary":false,"changes":376,"status":"modified"}]}