{"files":[{"patch":"@@ -237,2 +237,2 @@\n-  for (int cp_index = 1; cp_index <len; cp_index++) {\n-    switch (tag_at(cp_index).value()) {\n+  for (int i = 1; i <len; i++) {\n+    switch (tag_at(i).value()) {\n@@ -241,2 +241,2 @@\n-        const int class_index = klass_index_at(cp_index);\n-        unresolved_klass_at_put(cp_index, class_index, num_klasses++);\n+        const int class_index = klass_index_at(i);\n+        unresolved_klass_at_put(i, class_index, num_klasses++);\n@@ -945,1 +945,1 @@\n-                                           int cp_index, int cache_index,\n+                                           int index, int cache_index,\n@@ -954,2 +954,2 @@\n-    assert(cp_index > 0, \"valid index\");\n-    cache_index = this_cp->cp_to_object_index(cp_index);\n+    assert(index > 0, \"valid index\");\n+    cache_index = this_cp->cp_to_object_index(index);\n@@ -958,1 +958,1 @@\n-  assert(cp_index == _no_index_sentinel || cp_index >= 0, \"\");\n+  assert(index == _no_index_sentinel || index >= 0, \"\");\n@@ -964,1 +964,1 @@\n-        DEBUG_ONLY(int temp_index = (cp_index >= 0 ? cp_index : this_cp->object_to_cp_index(cache_index)));\n+        DEBUG_ONLY(int temp_index = (index >= 0 ? index : this_cp->object_to_cp_index(cache_index)));\n@@ -972,1 +972,1 @@\n-    cp_index = this_cp->object_to_cp_index(cache_index);\n+    index = this_cp->object_to_cp_index(cache_index);\n@@ -977,1 +977,1 @@\n-  constantTag tag = this_cp->tag_at(cp_index);\n+  constantTag tag = this_cp->tag_at(index);\n@@ -984,1 +984,1 @@\n-      CPKlassSlot kslot = this_cp->klass_slot_at(cp_index);\n+      CPKlassSlot kslot = this_cp->klass_slot_at(index);\n@@ -1014,1 +1014,1 @@\n-      Klass* resolved = klass_at_impl(this_cp, cp_index, CHECK_NULL);\n+      Klass* resolved = klass_at_impl(this_cp, index, CHECK_NULL);\n@@ -1023,1 +1023,1 @@\n-      BootstrapInfo bootstrap_specifier(this_cp, cp_index);\n+      BootstrapInfo bootstrap_specifier(this_cp, index);\n@@ -1041,1 +1041,1 @@\n-        save_and_throw_exception(this_cp, cp_index, tag, CHECK_NULL);\n+        save_and_throw_exception(this_cp, index, tag, CHECK_NULL);\n@@ -1075,1 +1075,1 @@\n-    result_oop = string_at_impl(this_cp, cp_index, cache_index, CHECK_NULL);\n+    result_oop = string_at_impl(this_cp, index, cache_index, CHECK_NULL);\n@@ -1080,5 +1080,5 @@\n-      int ref_kind                 = this_cp->method_handle_ref_kind_at(cp_index);\n-      int callee_index             = this_cp->method_handle_klass_index_at(cp_index);\n-      Symbol*  name =      this_cp->method_handle_name_ref_at(cp_index);\n-      Symbol*  signature = this_cp->method_handle_signature_ref_at(cp_index);\n-      constantTag m_tag  = this_cp->tag_at(this_cp->method_handle_index_at(cp_index));\n+      int ref_kind                 = this_cp->method_handle_ref_kind_at(index);\n+      int callee_index             = this_cp->method_handle_klass_index_at(index);\n+      Symbol*  name =      this_cp->method_handle_name_ref_at(index);\n+      Symbol*  signature = this_cp->method_handle_signature_ref_at(index);\n+      constantTag m_tag  = this_cp->tag_at(this_cp->method_handle_index_at(index));\n@@ -1087,1 +1087,1 @@\n-                              ref_kind, cp_index, this_cp->method_handle_index_at(cp_index),\n+                              ref_kind, index, this_cp->method_handle_index_at(index),\n@@ -1093,1 +1093,1 @@\n-        save_and_throw_exception(this_cp, cp_index, tag, CHECK_NULL);\n+        save_and_throw_exception(this_cp, index, tag, CHECK_NULL);\n@@ -1107,1 +1107,1 @@\n-                 cp_index,\n+                 index,\n@@ -1111,1 +1111,1 @@\n-        save_and_throw_exception(this_cp, cp_index, tag, CHECK_NULL);\n+        save_and_throw_exception(this_cp, index, tag, CHECK_NULL);\n@@ -1120,1 +1120,1 @@\n-        save_and_throw_exception(this_cp, cp_index, tag, CHECK_NULL);\n+        save_and_throw_exception(this_cp, index, tag, CHECK_NULL);\n@@ -1128,1 +1128,1 @@\n-      Symbol*  signature = this_cp->method_type_signature_at(cp_index);\n+      Symbol*  signature = this_cp->method_type_signature_at(index);\n@@ -1131,1 +1131,1 @@\n-                              cp_index, this_cp->method_type_index_at(cp_index),\n+                              index, this_cp->method_type_index_at(index),\n@@ -1139,1 +1139,1 @@\n-        save_and_throw_exception(this_cp, cp_index, tag, CHECK_NULL);\n+        save_and_throw_exception(this_cp, index, tag, CHECK_NULL);\n@@ -1146,1 +1146,1 @@\n-    prim_value.i = this_cp->int_at(cp_index);\n+    prim_value.i = this_cp->int_at(index);\n@@ -1152,1 +1152,1 @@\n-    prim_value.f = this_cp->float_at(cp_index);\n+    prim_value.f = this_cp->float_at(index);\n@@ -1158,1 +1158,1 @@\n-    prim_value.j = this_cp->long_at(cp_index);\n+    prim_value.j = this_cp->long_at(index);\n@@ -1164,1 +1164,1 @@\n-    prim_value.d = this_cp->double_at(cp_index);\n+    prim_value.d = this_cp->double_at(index);\n@@ -1172,1 +1172,1 @@\n-    throw_resolution_error(this_cp, cp_index, CHECK_NULL);\n+    throw_resolution_error(this_cp, index, CHECK_NULL);\n@@ -1176,1 +1176,1 @@\n-    fatal(\"unexpected constant tag at CP %p[%d\/%d] = %d\", this_cp(), cp_index, cache_index, tag.value());\n+    fatal(\"unexpected constant tag at CP %p[%d\/%d] = %d\", this_cp(), index, cache_index, tag.value());\n@@ -1615,2 +1615,2 @@\n-void ConstantPool::copy_cp_to_impl(const constantPoolHandle& from_cp, int start_cpi, int end_cpi,\n-       const constantPoolHandle& to_cp, int to_cpi, TRAPS) {\n+void ConstantPool::copy_cp_to_impl(const constantPoolHandle& from_cp, int start_i, int end_i,\n+       const constantPoolHandle& to_cp, int to_i, TRAPS) {\n@@ -1619,1 +1619,1 @@\n-  int dest_cpi = to_cpi;  \/\/ leave original alone for debug purposes\n+  int dest_cpi = to_i;  \/\/ leave original alone for debug purposes\n@@ -1621,1 +1621,1 @@\n-  for (int src_cpi = start_cpi; src_cpi <= end_cpi; \/* see loop bottom *\/ ) {\n+  for (int src_cpi = start_i; src_cpi <= end_i; \/* see loop bottom *\/ ) {\n@@ -1646,2 +1646,2 @@\n-void ConstantPool::copy_entry_to(const constantPoolHandle& from_cp, int from_cpi,\n-                                        const constantPoolHandle& to_cp, int to_cpi) {\n+void ConstantPool::copy_entry_to(const constantPoolHandle& from_cp, int from_i,\n+                                        const constantPoolHandle& to_cp, int to_i) {\n@@ -1649,1 +1649,1 @@\n-  int tag = from_cp->tag_at(from_cpi).value();\n+  int tag = from_cp->tag_at(from_i).value();\n@@ -1653,2 +1653,2 @@\n-    jint ki = from_cp->klass_index_at(from_cpi);\n-    to_cp->klass_index_at_put(to_cpi, ki);\n+    jint ki = from_cp->klass_index_at(from_i);\n+    to_cp->klass_index_at_put(to_i, ki);\n@@ -1659,2 +1659,2 @@\n-    jdouble d = from_cp->double_at(from_cpi);\n-    to_cp->double_at_put(to_cpi, d);\n+    jdouble d = from_cp->double_at(from_i);\n+    to_cp->double_at_put(to_i, d);\n@@ -1662,1 +1662,1 @@\n-    to_cp->tag_at_put(to_cpi + 1, JVM_CONSTANT_Invalid);\n+    to_cp->tag_at_put(to_i + 1, JVM_CONSTANT_Invalid);\n@@ -1667,3 +1667,3 @@\n-    int class_index = from_cp->uncached_klass_ref_index_at(from_cpi);\n-    int name_and_type_index = from_cp->uncached_name_and_type_ref_index_at(from_cpi);\n-    to_cp->field_at_put(to_cpi, class_index, name_and_type_index);\n+    int class_index = from_cp->uncached_klass_ref_index_at(from_i);\n+    int name_and_type_index = from_cp->uncached_name_and_type_ref_index_at(from_i);\n+    to_cp->field_at_put(to_i, class_index, name_and_type_index);\n@@ -1674,2 +1674,2 @@\n-    jfloat f = from_cp->float_at(from_cpi);\n-    to_cp->float_at_put(to_cpi, f);\n+    jfloat f = from_cp->float_at(from_i);\n+    to_cp->float_at_put(to_i, f);\n@@ -1680,2 +1680,2 @@\n-    jint i = from_cp->int_at(from_cpi);\n-    to_cp->int_at_put(to_cpi, i);\n+    jint i = from_cp->int_at(from_i);\n+    to_cp->int_at_put(to_i, i);\n@@ -1686,3 +1686,3 @@\n-    int class_index = from_cp->uncached_klass_ref_index_at(from_cpi);\n-    int name_and_type_index = from_cp->uncached_name_and_type_ref_index_at(from_cpi);\n-    to_cp->interface_method_at_put(to_cpi, class_index, name_and_type_index);\n+    int class_index = from_cp->uncached_klass_ref_index_at(from_i);\n+    int name_and_type_index = from_cp->uncached_name_and_type_ref_index_at(from_i);\n+    to_cp->interface_method_at_put(to_i, class_index, name_and_type_index);\n@@ -1693,2 +1693,2 @@\n-    jlong l = from_cp->long_at(from_cpi);\n-    to_cp->long_at_put(to_cpi, l);\n+    jlong l = from_cp->long_at(from_i);\n+    to_cp->long_at_put(to_i, l);\n@@ -1696,1 +1696,1 @@\n-    to_cp->tag_at_put(to_cpi + 1, JVM_CONSTANT_Invalid);\n+    to_cp->tag_at_put(to_i + 1, JVM_CONSTANT_Invalid);\n@@ -1701,3 +1701,3 @@\n-    int class_index = from_cp->uncached_klass_ref_index_at(from_cpi);\n-    int name_and_type_index = from_cp->uncached_name_and_type_ref_index_at(from_cpi);\n-    to_cp->method_at_put(to_cpi, class_index, name_and_type_index);\n+    int class_index = from_cp->uncached_klass_ref_index_at(from_i);\n+    int name_and_type_index = from_cp->uncached_name_and_type_ref_index_at(from_i);\n+    to_cp->method_at_put(to_i, class_index, name_and_type_index);\n@@ -1708,3 +1708,3 @@\n-    int name_ref_index = from_cp->name_ref_index_at(from_cpi);\n-    int signature_ref_index = from_cp->signature_ref_index_at(from_cpi);\n-    to_cp->name_and_type_at_put(to_cpi, name_ref_index, signature_ref_index);\n+    int name_ref_index = from_cp->name_ref_index_at(from_i);\n+    int signature_ref_index = from_cp->signature_ref_index_at(from_i);\n+    to_cp->name_and_type_at_put(to_i, name_ref_index, signature_ref_index);\n@@ -1715,2 +1715,2 @@\n-    jint si = from_cp->string_index_at(from_cpi);\n-    to_cp->string_index_at_put(to_cpi, si);\n+    jint si = from_cp->string_index_at(from_i);\n+    to_cp->string_index_at_put(to_i, si);\n@@ -1724,1 +1724,1 @@\n-    int name_index = from_cp->klass_slot_at(from_cpi).name_index();\n+    int name_index = from_cp->klass_slot_at(from_i).name_index();\n@@ -1726,1 +1726,1 @@\n-    to_cp->klass_index_at_put(to_cpi, name_index);\n+    to_cp->klass_index_at_put(to_i, name_index);\n@@ -1731,2 +1731,2 @@\n-    Symbol* s = from_cp->unresolved_string_at(from_cpi);\n-    to_cp->unresolved_string_at_put(to_cpi, s);\n+    Symbol* s = from_cp->unresolved_string_at(from_i);\n+    to_cp->unresolved_string_at_put(to_i, s);\n@@ -1737,1 +1737,1 @@\n-    Symbol* s = from_cp->symbol_at(from_cpi);\n+    Symbol* s = from_cp->symbol_at(from_i);\n@@ -1740,1 +1740,1 @@\n-    to_cp->symbol_at_put(to_cpi, s);\n+    to_cp->symbol_at_put(to_i, s);\n@@ -1746,2 +1746,2 @@\n-    jint k = from_cp->method_type_index_at(from_cpi);\n-    to_cp->method_type_index_at_put(to_cpi, k);\n+    jint k = from_cp->method_type_index_at(from_i);\n+    to_cp->method_type_index_at_put(to_i, k);\n@@ -1753,3 +1753,3 @@\n-    int k1 = from_cp->method_handle_ref_kind_at(from_cpi);\n-    int k2 = from_cp->method_handle_index_at(from_cpi);\n-    to_cp->method_handle_index_at_put(to_cpi, k1, k2);\n+    int k1 = from_cp->method_handle_ref_kind_at(from_i);\n+    int k2 = from_cp->method_handle_index_at(from_i);\n+    to_cp->method_handle_index_at_put(to_i, k1, k2);\n@@ -1761,2 +1761,2 @@\n-    int k1 = from_cp->bootstrap_methods_attribute_index(from_cpi);\n-    int k2 = from_cp->bootstrap_name_and_type_ref_index_at(from_cpi);\n+    int k1 = from_cp->bootstrap_methods_attribute_index(from_i);\n+    int k2 = from_cp->bootstrap_name_and_type_ref_index_at(from_i);\n@@ -1764,1 +1764,1 @@\n-    to_cp->dynamic_constant_at_put(to_cpi, k1, k2);\n+    to_cp->dynamic_constant_at_put(to_i, k1, k2);\n@@ -1769,2 +1769,2 @@\n-    int k1 = from_cp->bootstrap_methods_attribute_index(from_cpi);\n-    int k2 = from_cp->bootstrap_name_and_type_ref_index_at(from_cpi);\n+    int k1 = from_cp->bootstrap_methods_attribute_index(from_i);\n+    int k2 = from_cp->bootstrap_name_and_type_ref_index_at(from_i);\n@@ -1772,1 +1772,1 @@\n-    to_cp->invoke_dynamic_at_put(to_cpi, k1, k2);\n+    to_cp->invoke_dynamic_at_put(to_i, k1, k2);\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":85,"deletions":85,"binary":false,"changes":170,"status":"modified"},{"patch":"@@ -709,1 +709,1 @@\n-  oop resolve_constant_at(int cp_index, TRAPS) {\n+  oop resolve_constant_at(int index, TRAPS) {\n@@ -711,1 +711,1 @@\n-    return resolve_constant_at_impl(h_this, cp_index, _no_index_sentinel, nullptr, THREAD);\n+    return resolve_constant_at_impl(h_this, index, _no_index_sentinel, nullptr, THREAD);\n@@ -839,1 +839,1 @@\n-  static oop resolve_constant_at_impl(const constantPoolHandle& this_cp, int cp_index, int cache_index,\n+  static oop resolve_constant_at_impl(const constantPoolHandle& this_cp, int index, int cache_index,\n","filename":"src\/hotspot\/share\/oops\/constantPool.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}