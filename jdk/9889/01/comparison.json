{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,9 @@\n-    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 10);\n+\n+    \/\/ More resilience for Weak* tests. These operations may spuriously\n+    \/\/ fail, and so we do several attemps with linear backoff on failure.\n+    \/\/ Because the backoff grows linearly, and the delays might be granular\n+    \/\/ to OS limits, the worst-case total time on test would be at least:\n+    \/\/    Tfail = delay * attempts * (attempts + 1) \/ 2 [ms]\n+    \/\/\n+    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 50);\n+    static final int WEAK_BASE_DELAY_MS = Integer.getInteger(\"weakBaseDelay\", 10);\n@@ -89,0 +97,8 @@\n+    static void weakDelay(int multiplier) {\n+        try {\n+            Thread.sleep(WEAK_BASE_DELAY_MS * Math.max(1, multiplier));\n+        } catch (InterruptedException ie) {\n+            \/\/ Do nothing.\n+        }\n+    }\n+\n@@ -214,0 +230,1 @@\n+                if (!success) weakDelay(c);\n@@ -224,0 +241,1 @@\n+                if (!success) weakDelay(c);\n@@ -234,0 +252,1 @@\n+                if (!success) weakDelay(c);\n@@ -244,0 +263,1 @@\n+                if (!success) weakDelay(c);\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/JdkInternalMiscUnsafeAccessTestBoolean.java","additions":22,"deletions":2,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,9 @@\n-    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 10);\n+\n+    \/\/ More resilience for Weak* tests. These operations may spuriously\n+    \/\/ fail, and so we do several attemps with linear backoff on failure.\n+    \/\/ Because the backoff grows linearly, and the delays might be granular\n+    \/\/ to OS limits, the worst-case total time on test would be at least:\n+    \/\/    Tfail = delay * attempts * (attempts + 1) \/ 2 [ms]\n+    \/\/\n+    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 50);\n+    static final int WEAK_BASE_DELAY_MS = Integer.getInteger(\"weakBaseDelay\", 10);\n@@ -89,0 +97,8 @@\n+    static void weakDelay(int multiplier) {\n+        try {\n+            Thread.sleep(WEAK_BASE_DELAY_MS * Math.max(1, multiplier));\n+        } catch (InterruptedException ie) {\n+            \/\/ Do nothing.\n+        }\n+    }\n+\n@@ -243,0 +259,1 @@\n+                if (!success) weakDelay(c);\n@@ -253,0 +270,1 @@\n+                if (!success) weakDelay(c);\n@@ -263,0 +281,1 @@\n+                if (!success) weakDelay(c);\n@@ -273,0 +292,1 @@\n+                if (!success) weakDelay(c);\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/JdkInternalMiscUnsafeAccessTestByte.java","additions":22,"deletions":2,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,9 @@\n-    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 10);\n+\n+    \/\/ More resilience for Weak* tests. These operations may spuriously\n+    \/\/ fail, and so we do several attemps with linear backoff on failure.\n+    \/\/ Because the backoff grows linearly, and the delays might be granular\n+    \/\/ to OS limits, the worst-case total time on test would be at least:\n+    \/\/    Tfail = delay * attempts * (attempts + 1) \/ 2 [ms]\n+    \/\/\n+    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 50);\n+    static final int WEAK_BASE_DELAY_MS = Integer.getInteger(\"weakBaseDelay\", 10);\n@@ -89,0 +97,8 @@\n+    static void weakDelay(int multiplier) {\n+        try {\n+            Thread.sleep(WEAK_BASE_DELAY_MS * Math.max(1, multiplier));\n+        } catch (InterruptedException ie) {\n+            \/\/ Do nothing.\n+        }\n+    }\n+\n@@ -261,0 +277,1 @@\n+                if (!success) weakDelay(c);\n@@ -271,0 +288,1 @@\n+                if (!success) weakDelay(c);\n@@ -281,0 +299,1 @@\n+                if (!success) weakDelay(c);\n@@ -291,0 +310,1 @@\n+                if (!success) weakDelay(c);\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/JdkInternalMiscUnsafeAccessTestChar.java","additions":22,"deletions":2,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,9 @@\n-    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 10);\n+\n+    \/\/ More resilience for Weak* tests. These operations may spuriously\n+    \/\/ fail, and so we do several attemps with linear backoff on failure.\n+    \/\/ Because the backoff grows linearly, and the delays might be granular\n+    \/\/ to OS limits, the worst-case total time on test would be at least:\n+    \/\/    Tfail = delay * attempts * (attempts + 1) \/ 2 [ms]\n+    \/\/\n+    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 50);\n+    static final int WEAK_BASE_DELAY_MS = Integer.getInteger(\"weakBaseDelay\", 10);\n@@ -89,0 +97,8 @@\n+    static void weakDelay(int multiplier) {\n+        try {\n+            Thread.sleep(WEAK_BASE_DELAY_MS * Math.max(1, multiplier));\n+        } catch (InterruptedException ie) {\n+            \/\/ Do nothing.\n+        }\n+    }\n+\n@@ -243,0 +259,1 @@\n+                if (!success) weakDelay(c);\n@@ -253,0 +270,1 @@\n+                if (!success) weakDelay(c);\n@@ -263,0 +281,1 @@\n+                if (!success) weakDelay(c);\n@@ -273,0 +292,1 @@\n+                if (!success) weakDelay(c);\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/JdkInternalMiscUnsafeAccessTestDouble.java","additions":22,"deletions":2,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,9 @@\n-    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 10);\n+\n+    \/\/ More resilience for Weak* tests. These operations may spuriously\n+    \/\/ fail, and so we do several attemps with linear backoff on failure.\n+    \/\/ Because the backoff grows linearly, and the delays might be granular\n+    \/\/ to OS limits, the worst-case total time on test would be at least:\n+    \/\/    Tfail = delay * attempts * (attempts + 1) \/ 2 [ms]\n+    \/\/\n+    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 50);\n+    static final int WEAK_BASE_DELAY_MS = Integer.getInteger(\"weakBaseDelay\", 10);\n@@ -89,0 +97,8 @@\n+    static void weakDelay(int multiplier) {\n+        try {\n+            Thread.sleep(WEAK_BASE_DELAY_MS * Math.max(1, multiplier));\n+        } catch (InterruptedException ie) {\n+            \/\/ Do nothing.\n+        }\n+    }\n+\n@@ -243,0 +259,1 @@\n+                if (!success) weakDelay(c);\n@@ -253,0 +270,1 @@\n+                if (!success) weakDelay(c);\n@@ -263,0 +281,1 @@\n+                if (!success) weakDelay(c);\n@@ -273,0 +292,1 @@\n+                if (!success) weakDelay(c);\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/JdkInternalMiscUnsafeAccessTestFloat.java","additions":22,"deletions":2,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,9 @@\n-    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 10);\n+\n+    \/\/ More resilience for Weak* tests. These operations may spuriously\n+    \/\/ fail, and so we do several attemps with linear backoff on failure.\n+    \/\/ Because the backoff grows linearly, and the delays might be granular\n+    \/\/ to OS limits, the worst-case total time on test would be at least:\n+    \/\/    Tfail = delay * attempts * (attempts + 1) \/ 2 [ms]\n+    \/\/\n+    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 50);\n+    static final int WEAK_BASE_DELAY_MS = Integer.getInteger(\"weakBaseDelay\", 10);\n@@ -89,0 +97,8 @@\n+    static void weakDelay(int multiplier) {\n+        try {\n+            Thread.sleep(WEAK_BASE_DELAY_MS * Math.max(1, multiplier));\n+        } catch (InterruptedException ie) {\n+            \/\/ Do nothing.\n+        }\n+    }\n+\n@@ -261,0 +277,1 @@\n+                if (!success) weakDelay(c);\n@@ -271,0 +288,1 @@\n+                if (!success) weakDelay(c);\n@@ -281,0 +299,1 @@\n+                if (!success) weakDelay(c);\n@@ -291,0 +310,1 @@\n+                if (!success) weakDelay(c);\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/JdkInternalMiscUnsafeAccessTestInt.java","additions":22,"deletions":2,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,9 @@\n-    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 10);\n+\n+    \/\/ More resilience for Weak* tests. These operations may spuriously\n+    \/\/ fail, and so we do several attemps with linear backoff on failure.\n+    \/\/ Because the backoff grows linearly, and the delays might be granular\n+    \/\/ to OS limits, the worst-case total time on test would be at least:\n+    \/\/    Tfail = delay * attempts * (attempts + 1) \/ 2 [ms]\n+    \/\/\n+    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 50);\n+    static final int WEAK_BASE_DELAY_MS = Integer.getInteger(\"weakBaseDelay\", 10);\n@@ -89,0 +97,8 @@\n+    static void weakDelay(int multiplier) {\n+        try {\n+            Thread.sleep(WEAK_BASE_DELAY_MS * Math.max(1, multiplier));\n+        } catch (InterruptedException ie) {\n+            \/\/ Do nothing.\n+        }\n+    }\n+\n@@ -261,0 +277,1 @@\n+                if (!success) weakDelay(c);\n@@ -271,0 +288,1 @@\n+                if (!success) weakDelay(c);\n@@ -281,0 +299,1 @@\n+                if (!success) weakDelay(c);\n@@ -291,0 +310,1 @@\n+                if (!success) weakDelay(c);\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/JdkInternalMiscUnsafeAccessTestLong.java","additions":22,"deletions":2,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,9 @@\n-    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 10);\n+\n+    \/\/ More resilience for Weak* tests. These operations may spuriously\n+    \/\/ fail, and so we do several attemps with linear backoff on failure.\n+    \/\/ Because the backoff grows linearly, and the delays might be granular\n+    \/\/ to OS limits, the worst-case total time on test would be at least:\n+    \/\/    Tfail = delay * attempts * (attempts + 1) \/ 2 [ms]\n+    \/\/\n+    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 50);\n+    static final int WEAK_BASE_DELAY_MS = Integer.getInteger(\"weakBaseDelay\", 10);\n@@ -89,0 +97,8 @@\n+    static void weakDelay(int multiplier) {\n+        try {\n+            Thread.sleep(WEAK_BASE_DELAY_MS * Math.max(1, multiplier));\n+        } catch (InterruptedException ie) {\n+            \/\/ Do nothing.\n+        }\n+    }\n+\n@@ -214,0 +230,1 @@\n+                if (!success) weakDelay(c);\n@@ -224,0 +241,1 @@\n+                if (!success) weakDelay(c);\n@@ -234,0 +252,1 @@\n+                if (!success) weakDelay(c);\n@@ -244,0 +263,1 @@\n+                if (!success) weakDelay(c);\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/JdkInternalMiscUnsafeAccessTestObject.java","additions":22,"deletions":2,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,9 @@\n-    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 10);\n+\n+    \/\/ More resilience for Weak* tests. These operations may spuriously\n+    \/\/ fail, and so we do several attemps with linear backoff on failure.\n+    \/\/ Because the backoff grows linearly, and the delays might be granular\n+    \/\/ to OS limits, the worst-case total time on test would be at least:\n+    \/\/    Tfail = delay * attempts * (attempts + 1) \/ 2 [ms]\n+    \/\/\n+    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 50);\n+    static final int WEAK_BASE_DELAY_MS = Integer.getInteger(\"weakBaseDelay\", 10);\n@@ -89,0 +97,8 @@\n+    static void weakDelay(int multiplier) {\n+        try {\n+            Thread.sleep(WEAK_BASE_DELAY_MS * Math.max(1, multiplier));\n+        } catch (InterruptedException ie) {\n+            \/\/ Do nothing.\n+        }\n+    }\n+\n@@ -261,0 +277,1 @@\n+                if (!success) weakDelay(c);\n@@ -271,0 +288,1 @@\n+                if (!success) weakDelay(c);\n@@ -281,0 +299,1 @@\n+                if (!success) weakDelay(c);\n@@ -291,0 +310,1 @@\n+                if (!success) weakDelay(c);\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/JdkInternalMiscUnsafeAccessTestShort.java","additions":22,"deletions":2,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,9 @@\n-    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 10);\n+\n+    \/\/ More resilience for Weak* tests. These operations may spuriously\n+    \/\/ fail, and so we do several attemps with linear backoff on failure.\n+    \/\/ Because the backoff grows linearly, and the delays might be granular\n+    \/\/ to OS limits, the worst-case total time on test would be at least:\n+    \/\/    Tfail = delay * attempts * (attempts + 1) \/ 2 [ms]\n+    \/\/\n+    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 50);\n+    static final int WEAK_BASE_DELAY_MS = Integer.getInteger(\"weakBaseDelay\", 10);\n@@ -89,0 +97,8 @@\n+    static void weakDelay(int multiplier) {\n+        try {\n+            Thread.sleep(WEAK_BASE_DELAY_MS * Math.max(1, multiplier));\n+        } catch (InterruptedException ie) {\n+            \/\/ Do nothing.\n+        }\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/SunMiscUnsafeAccessTestBoolean.java","additions":18,"deletions":2,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,9 @@\n-    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 10);\n+\n+    \/\/ More resilience for Weak* tests. These operations may spuriously\n+    \/\/ fail, and so we do several attemps with linear backoff on failure.\n+    \/\/ Because the backoff grows linearly, and the delays might be granular\n+    \/\/ to OS limits, the worst-case total time on test would be at least:\n+    \/\/    Tfail = delay * attempts * (attempts + 1) \/ 2 [ms]\n+    \/\/\n+    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 50);\n+    static final int WEAK_BASE_DELAY_MS = Integer.getInteger(\"weakBaseDelay\", 10);\n@@ -89,0 +97,8 @@\n+    static void weakDelay(int multiplier) {\n+        try {\n+            Thread.sleep(WEAK_BASE_DELAY_MS * Math.max(1, multiplier));\n+        } catch (InterruptedException ie) {\n+            \/\/ Do nothing.\n+        }\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/SunMiscUnsafeAccessTestByte.java","additions":18,"deletions":2,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,9 @@\n-    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 10);\n+\n+    \/\/ More resilience for Weak* tests. These operations may spuriously\n+    \/\/ fail, and so we do several attemps with linear backoff on failure.\n+    \/\/ Because the backoff grows linearly, and the delays might be granular\n+    \/\/ to OS limits, the worst-case total time on test would be at least:\n+    \/\/    Tfail = delay * attempts * (attempts + 1) \/ 2 [ms]\n+    \/\/\n+    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 50);\n+    static final int WEAK_BASE_DELAY_MS = Integer.getInteger(\"weakBaseDelay\", 10);\n@@ -89,0 +97,8 @@\n+    static void weakDelay(int multiplier) {\n+        try {\n+            Thread.sleep(WEAK_BASE_DELAY_MS * Math.max(1, multiplier));\n+        } catch (InterruptedException ie) {\n+            \/\/ Do nothing.\n+        }\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/SunMiscUnsafeAccessTestChar.java","additions":18,"deletions":2,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,9 @@\n-    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 10);\n+\n+    \/\/ More resilience for Weak* tests. These operations may spuriously\n+    \/\/ fail, and so we do several attemps with linear backoff on failure.\n+    \/\/ Because the backoff grows linearly, and the delays might be granular\n+    \/\/ to OS limits, the worst-case total time on test would be at least:\n+    \/\/    Tfail = delay * attempts * (attempts + 1) \/ 2 [ms]\n+    \/\/\n+    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 50);\n+    static final int WEAK_BASE_DELAY_MS = Integer.getInteger(\"weakBaseDelay\", 10);\n@@ -89,0 +97,8 @@\n+    static void weakDelay(int multiplier) {\n+        try {\n+            Thread.sleep(WEAK_BASE_DELAY_MS * Math.max(1, multiplier));\n+        } catch (InterruptedException ie) {\n+            \/\/ Do nothing.\n+        }\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/SunMiscUnsafeAccessTestDouble.java","additions":18,"deletions":2,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,9 @@\n-    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 10);\n+\n+    \/\/ More resilience for Weak* tests. These operations may spuriously\n+    \/\/ fail, and so we do several attemps with linear backoff on failure.\n+    \/\/ Because the backoff grows linearly, and the delays might be granular\n+    \/\/ to OS limits, the worst-case total time on test would be at least:\n+    \/\/    Tfail = delay * attempts * (attempts + 1) \/ 2 [ms]\n+    \/\/\n+    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 50);\n+    static final int WEAK_BASE_DELAY_MS = Integer.getInteger(\"weakBaseDelay\", 10);\n@@ -89,0 +97,8 @@\n+    static void weakDelay(int multiplier) {\n+        try {\n+            Thread.sleep(WEAK_BASE_DELAY_MS * Math.max(1, multiplier));\n+        } catch (InterruptedException ie) {\n+            \/\/ Do nothing.\n+        }\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/SunMiscUnsafeAccessTestFloat.java","additions":18,"deletions":2,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,9 @@\n-    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 10);\n+\n+    \/\/ More resilience for Weak* tests. These operations may spuriously\n+    \/\/ fail, and so we do several attemps with linear backoff on failure.\n+    \/\/ Because the backoff grows linearly, and the delays might be granular\n+    \/\/ to OS limits, the worst-case total time on test would be at least:\n+    \/\/    Tfail = delay * attempts * (attempts + 1) \/ 2 [ms]\n+    \/\/\n+    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 50);\n+    static final int WEAK_BASE_DELAY_MS = Integer.getInteger(\"weakBaseDelay\", 10);\n@@ -89,0 +97,8 @@\n+    static void weakDelay(int multiplier) {\n+        try {\n+            Thread.sleep(WEAK_BASE_DELAY_MS * Math.max(1, multiplier));\n+        } catch (InterruptedException ie) {\n+            \/\/ Do nothing.\n+        }\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/SunMiscUnsafeAccessTestInt.java","additions":18,"deletions":2,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,9 @@\n-    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 10);\n+\n+    \/\/ More resilience for Weak* tests. These operations may spuriously\n+    \/\/ fail, and so we do several attemps with linear backoff on failure.\n+    \/\/ Because the backoff grows linearly, and the delays might be granular\n+    \/\/ to OS limits, the worst-case total time on test would be at least:\n+    \/\/    Tfail = delay * attempts * (attempts + 1) \/ 2 [ms]\n+    \/\/\n+    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 50);\n+    static final int WEAK_BASE_DELAY_MS = Integer.getInteger(\"weakBaseDelay\", 10);\n@@ -89,0 +97,8 @@\n+    static void weakDelay(int multiplier) {\n+        try {\n+            Thread.sleep(WEAK_BASE_DELAY_MS * Math.max(1, multiplier));\n+        } catch (InterruptedException ie) {\n+            \/\/ Do nothing.\n+        }\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/SunMiscUnsafeAccessTestLong.java","additions":18,"deletions":2,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,9 @@\n-    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 10);\n+\n+    \/\/ More resilience for Weak* tests. These operations may spuriously\n+    \/\/ fail, and so we do several attemps with linear backoff on failure.\n+    \/\/ Because the backoff grows linearly, and the delays might be granular\n+    \/\/ to OS limits, the worst-case total time on test would be at least:\n+    \/\/    Tfail = delay * attempts * (attempts + 1) \/ 2 [ms]\n+    \/\/\n+    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 50);\n+    static final int WEAK_BASE_DELAY_MS = Integer.getInteger(\"weakBaseDelay\", 10);\n@@ -89,0 +97,8 @@\n+    static void weakDelay(int multiplier) {\n+        try {\n+            Thread.sleep(WEAK_BASE_DELAY_MS * Math.max(1, multiplier));\n+        } catch (InterruptedException ie) {\n+            \/\/ Do nothing.\n+        }\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/SunMiscUnsafeAccessTestObject.java","additions":18,"deletions":2,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,9 @@\n-    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 10);\n+\n+    \/\/ More resilience for Weak* tests. These operations may spuriously\n+    \/\/ fail, and so we do several attemps with linear backoff on failure.\n+    \/\/ Because the backoff grows linearly, and the delays might be granular\n+    \/\/ to OS limits, the worst-case total time on test would be at least:\n+    \/\/    Tfail = delay * attempts * (attempts + 1) \/ 2 [ms]\n+    \/\/\n+    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 50);\n+    static final int WEAK_BASE_DELAY_MS = Integer.getInteger(\"weakBaseDelay\", 10);\n@@ -89,0 +97,8 @@\n+    static void weakDelay(int multiplier) {\n+        try {\n+            Thread.sleep(WEAK_BASE_DELAY_MS * Math.max(1, multiplier));\n+        } catch (InterruptedException ie) {\n+            \/\/ Do nothing.\n+        }\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/SunMiscUnsafeAccessTestShort.java","additions":18,"deletions":2,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,9 @@\n-    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 10);\n+\n+    \/\/ More resilience for Weak* tests. These operations may spuriously\n+    \/\/ fail, and so we do several attemps with linear backoff on failure.\n+    \/\/ Because the backoff grows linearly, and the delays might be granular\n+    \/\/ to OS limits, the worst-case total time on test would be at least:\n+    \/\/    Tfail = delay * attempts * (attempts + 1) \/ 2 [ms]\n+    \/\/\n+    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 50);\n+    static final int WEAK_BASE_DELAY_MS = Integer.getInteger(\"weakBaseDelay\", 10);\n@@ -93,0 +101,8 @@\n+    static void weakDelay(int multiplier) {\n+        try {\n+            Thread.sleep(WEAK_BASE_DELAY_MS * Math.max(1, multiplier));\n+        } catch (InterruptedException ie) {\n+            \/\/ Do nothing.\n+        }\n+    }\n+\n@@ -305,0 +321,1 @@\n+                if (!success) weakDelay(c);\n@@ -315,0 +332,1 @@\n+                if (!success) weakDelay(c);\n@@ -325,0 +343,1 @@\n+                if (!success) weakDelay(c);\n@@ -335,0 +354,1 @@\n+                if (!success) weakDelay(c);\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/X-UnsafeAccessTest.java.template","additions":22,"deletions":2,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,9 @@\n-    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 10);\n+\n+    \/\/ More resilience for Weak* tests. These operations may spuriously\n+    \/\/ fail, and so we do several attemps with linear backoff on failure.\n+    \/\/ Because the backoff grows linearly, and the delays might be granular\n+    \/\/ to OS limits, the worst-case total time on test would be at least:\n+    \/\/    Tfail = delay * attempts * (attempts + 1) \/ 2 [ms]\n+    \/\/\n+    static final int WEAK_ATTEMPTS = Integer.getInteger(\"weakAttempts\", 50);\n+    static final int WEAK_BASE_DELAY_MS = Integer.getInteger(\"weakBaseDelay\", 10);\n@@ -501,0 +509,8 @@\n+\n+    static void weakDelay(int multiplier) {\n+        try {\n+            Thread.sleep(WEAK_BASE_DELAY_MS * Math.max(1, multiplier));\n+        } catch (InterruptedException ie) {\n+            \/\/ Do nothing.\n+        }\n+    }\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleBaseTest.java","additions":18,"deletions":2,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -508,0 +508,1 @@\n+                if (!success) weakDelay(c);\n@@ -518,0 +519,1 @@\n+                if (!success) weakDelay(c);\n@@ -528,0 +530,1 @@\n+                if (!success) weakDelay(c);\n@@ -538,0 +541,1 @@\n+                if (!success) weakDelay(c);\n@@ -768,0 +772,1 @@\n+                if (!success) weakDelay(c);\n@@ -778,0 +783,1 @@\n+                if (!success) weakDelay(c);\n@@ -788,0 +794,1 @@\n+                if (!success) weakDelay(c);\n@@ -798,0 +805,1 @@\n+                if (!success) weakDelay(c);\n@@ -1031,0 +1039,1 @@\n+                    if (!success) weakDelay(c);\n@@ -1041,0 +1050,1 @@\n+                    if (!success) weakDelay(c);\n@@ -1051,0 +1061,1 @@\n+                    if (!success) weakDelay(c);\n@@ -1061,0 +1072,1 @@\n+                    if (!success) weakDelay(c);\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessBoolean.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -486,0 +486,1 @@\n+                if (!success) weakDelay(c);\n@@ -496,0 +497,1 @@\n+                if (!success) weakDelay(c);\n@@ -506,0 +508,1 @@\n+                if (!success) weakDelay(c);\n@@ -516,0 +519,1 @@\n+                if (!success) weakDelay(c);\n@@ -762,0 +766,1 @@\n+                if (!success) weakDelay(c);\n@@ -772,0 +777,1 @@\n+                if (!success) weakDelay(c);\n@@ -782,0 +788,1 @@\n+                if (!success) weakDelay(c);\n@@ -792,0 +799,1 @@\n+                if (!success) weakDelay(c);\n@@ -1041,0 +1049,1 @@\n+                    if (!success) weakDelay(c);\n@@ -1051,0 +1060,1 @@\n+                    if (!success) weakDelay(c);\n@@ -1061,0 +1071,1 @@\n+                    if (!success) weakDelay(c);\n@@ -1071,0 +1082,1 @@\n+                    if (!success) weakDelay(c);\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessByte.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -486,0 +486,1 @@\n+                if (!success) weakDelay(c);\n@@ -496,0 +497,1 @@\n+                if (!success) weakDelay(c);\n@@ -506,0 +508,1 @@\n+                if (!success) weakDelay(c);\n@@ -516,0 +519,1 @@\n+                if (!success) weakDelay(c);\n@@ -762,0 +766,1 @@\n+                if (!success) weakDelay(c);\n@@ -772,0 +777,1 @@\n+                if (!success) weakDelay(c);\n@@ -782,0 +788,1 @@\n+                if (!success) weakDelay(c);\n@@ -792,0 +799,1 @@\n+                if (!success) weakDelay(c);\n@@ -1041,0 +1049,1 @@\n+                    if (!success) weakDelay(c);\n@@ -1051,0 +1060,1 @@\n+                    if (!success) weakDelay(c);\n@@ -1061,0 +1071,1 @@\n+                    if (!success) weakDelay(c);\n@@ -1071,0 +1082,1 @@\n+                    if (!success) weakDelay(c);\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessChar.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -556,0 +556,1 @@\n+                if (!success) weakDelay(c);\n@@ -566,0 +567,1 @@\n+                if (!success) weakDelay(c);\n@@ -576,0 +578,1 @@\n+                if (!success) weakDelay(c);\n@@ -586,0 +589,1 @@\n+                if (!success) weakDelay(c);\n@@ -784,0 +788,1 @@\n+                if (!success) weakDelay(c);\n@@ -794,0 +799,1 @@\n+                if (!success) weakDelay(c);\n@@ -804,0 +810,1 @@\n+                if (!success) weakDelay(c);\n@@ -814,0 +821,1 @@\n+                if (!success) weakDelay(c);\n@@ -1015,0 +1023,1 @@\n+                    if (!success) weakDelay(c);\n@@ -1025,0 +1034,1 @@\n+                    if (!success) weakDelay(c);\n@@ -1035,0 +1045,1 @@\n+                    if (!success) weakDelay(c);\n@@ -1045,0 +1056,1 @@\n+                    if (!success) weakDelay(c);\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessDouble.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -556,0 +556,1 @@\n+                if (!success) weakDelay(c);\n@@ -566,0 +567,1 @@\n+                if (!success) weakDelay(c);\n@@ -576,0 +578,1 @@\n+                if (!success) weakDelay(c);\n@@ -586,0 +589,1 @@\n+                if (!success) weakDelay(c);\n@@ -784,0 +788,1 @@\n+                if (!success) weakDelay(c);\n@@ -794,0 +799,1 @@\n+                if (!success) weakDelay(c);\n@@ -804,0 +810,1 @@\n+                if (!success) weakDelay(c);\n@@ -814,0 +821,1 @@\n+                if (!success) weakDelay(c);\n@@ -1015,0 +1023,1 @@\n+                    if (!success) weakDelay(c);\n@@ -1025,0 +1034,1 @@\n+                    if (!success) weakDelay(c);\n@@ -1035,0 +1045,1 @@\n+                    if (!success) weakDelay(c);\n@@ -1045,0 +1056,1 @@\n+                    if (!success) weakDelay(c);\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessFloat.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -486,0 +486,1 @@\n+                if (!success) weakDelay(c);\n@@ -496,0 +497,1 @@\n+                if (!success) weakDelay(c);\n@@ -506,0 +508,1 @@\n+                if (!success) weakDelay(c);\n@@ -516,0 +519,1 @@\n+                if (!success) weakDelay(c);\n@@ -762,0 +766,1 @@\n+                if (!success) weakDelay(c);\n@@ -772,0 +777,1 @@\n+                if (!success) weakDelay(c);\n@@ -782,0 +788,1 @@\n+                if (!success) weakDelay(c);\n@@ -792,0 +799,1 @@\n+                if (!success) weakDelay(c);\n@@ -1041,0 +1049,1 @@\n+                    if (!success) weakDelay(c);\n@@ -1051,0 +1060,1 @@\n+                    if (!success) weakDelay(c);\n@@ -1061,0 +1071,1 @@\n+                    if (!success) weakDelay(c);\n@@ -1071,0 +1082,1 @@\n+                    if (!success) weakDelay(c);\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessInt.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -486,0 +486,1 @@\n+                if (!success) weakDelay(c);\n@@ -496,0 +497,1 @@\n+                if (!success) weakDelay(c);\n@@ -506,0 +508,1 @@\n+                if (!success) weakDelay(c);\n@@ -516,0 +519,1 @@\n+                if (!success) weakDelay(c);\n@@ -762,0 +766,1 @@\n+                if (!success) weakDelay(c);\n@@ -772,0 +777,1 @@\n+                if (!success) weakDelay(c);\n@@ -782,0 +788,1 @@\n+                if (!success) weakDelay(c);\n@@ -792,0 +799,1 @@\n+                if (!success) weakDelay(c);\n@@ -1041,0 +1049,1 @@\n+                    if (!success) weakDelay(c);\n@@ -1051,0 +1060,1 @@\n+                    if (!success) weakDelay(c);\n@@ -1061,0 +1071,1 @@\n+                    if (!success) weakDelay(c);\n@@ -1071,0 +1082,1 @@\n+                    if (!success) weakDelay(c);\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessLong.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -486,0 +486,1 @@\n+                if (!success) weakDelay(c);\n@@ -496,0 +497,1 @@\n+                if (!success) weakDelay(c);\n@@ -506,0 +508,1 @@\n+                if (!success) weakDelay(c);\n@@ -516,0 +519,1 @@\n+                if (!success) weakDelay(c);\n@@ -762,0 +766,1 @@\n+                if (!success) weakDelay(c);\n@@ -772,0 +777,1 @@\n+                if (!success) weakDelay(c);\n@@ -782,0 +788,1 @@\n+                if (!success) weakDelay(c);\n@@ -792,0 +799,1 @@\n+                if (!success) weakDelay(c);\n@@ -1041,0 +1049,1 @@\n+                    if (!success) weakDelay(c);\n@@ -1051,0 +1060,1 @@\n+                    if (!success) weakDelay(c);\n@@ -1061,0 +1071,1 @@\n+                    if (!success) weakDelay(c);\n@@ -1071,0 +1082,1 @@\n+                    if (!success) weakDelay(c);\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessShort.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -585,0 +585,1 @@\n+                if (!success) weakDelay(c);\n@@ -595,0 +596,1 @@\n+                if (!success) weakDelay(c);\n@@ -605,0 +607,1 @@\n+                if (!success) weakDelay(c);\n@@ -615,0 +618,1 @@\n+                if (!success) weakDelay(c);\n@@ -797,0 +801,1 @@\n+                if (!success) weakDelay(c);\n@@ -807,0 +812,1 @@\n+                if (!success) weakDelay(c);\n@@ -817,0 +823,1 @@\n+                if (!success) weakDelay(c);\n@@ -827,0 +834,1 @@\n+                if (!success) weakDelay(c);\n@@ -1012,0 +1020,1 @@\n+                    if (!success) weakDelay(c);\n@@ -1022,0 +1031,1 @@\n+                    if (!success) weakDelay(c);\n@@ -1032,0 +1042,1 @@\n+                    if (!success) weakDelay(c);\n@@ -1042,0 +1053,1 @@\n+                    if (!success) weakDelay(c);\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestAccessString.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestByteArrayAsChar.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1084,0 +1084,1 @@\n+                        if (!success) weakDelay(c);\n@@ -1094,0 +1095,1 @@\n+                        if (!success) weakDelay(c);\n@@ -1104,0 +1106,1 @@\n+                        if (!success) weakDelay(c);\n@@ -1114,0 +1117,1 @@\n+                        if (!success) weakDelay(c);\n@@ -1257,0 +1261,1 @@\n+                        if (!success) weakDelay(c);\n@@ -1267,0 +1272,1 @@\n+                        if (!success) weakDelay(c);\n@@ -1277,0 +1283,1 @@\n+                        if (!success) weakDelay(c);\n@@ -1287,0 +1294,1 @@\n+                        if (!success) weakDelay(c);\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestByteArrayAsDouble.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1084,0 +1084,1 @@\n+                        if (!success) weakDelay(c);\n@@ -1094,0 +1095,1 @@\n+                        if (!success) weakDelay(c);\n@@ -1104,0 +1106,1 @@\n+                        if (!success) weakDelay(c);\n@@ -1114,0 +1117,1 @@\n+                        if (!success) weakDelay(c);\n@@ -1257,0 +1261,1 @@\n+                        if (!success) weakDelay(c);\n@@ -1267,0 +1272,1 @@\n+                        if (!success) weakDelay(c);\n@@ -1277,0 +1283,1 @@\n+                        if (!success) weakDelay(c);\n@@ -1287,0 +1294,1 @@\n+                        if (!success) weakDelay(c);\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestByteArrayAsFloat.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1268,0 +1268,1 @@\n+                        if (!success) weakDelay(c);\n@@ -1278,0 +1279,1 @@\n+                        if (!success) weakDelay(c);\n@@ -1288,0 +1290,1 @@\n+                        if (!success) weakDelay(c);\n@@ -1298,0 +1301,1 @@\n+                        if (!success) weakDelay(c);\n@@ -1551,0 +1555,1 @@\n+                        if (!success) weakDelay(c);\n@@ -1561,0 +1566,1 @@\n+                        if (!success) weakDelay(c);\n@@ -1571,0 +1577,1 @@\n+                        if (!success) weakDelay(c);\n@@ -1581,0 +1588,1 @@\n+                        if (!success) weakDelay(c);\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestByteArrayAsInt.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1268,0 +1268,1 @@\n+                        if (!success) weakDelay(c);\n@@ -1278,0 +1279,1 @@\n+                        if (!success) weakDelay(c);\n@@ -1288,0 +1290,1 @@\n+                        if (!success) weakDelay(c);\n@@ -1298,0 +1301,1 @@\n+                        if (!success) weakDelay(c);\n@@ -1551,0 +1555,1 @@\n+                        if (!success) weakDelay(c);\n@@ -1561,0 +1566,1 @@\n+                        if (!success) weakDelay(c);\n@@ -1571,0 +1577,1 @@\n+                        if (!success) weakDelay(c);\n@@ -1581,0 +1588,1 @@\n+                        if (!success) weakDelay(c);\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestByteArrayAsLong.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestByteArrayAsShort.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -214,0 +214,1 @@\n+                if (!success) weakDelay(c);\n@@ -224,0 +225,1 @@\n+                if (!success) weakDelay(c);\n@@ -234,0 +236,1 @@\n+                if (!success) weakDelay(c);\n@@ -244,0 +247,1 @@\n+                if (!success) weakDelay(c);\n@@ -448,0 +452,1 @@\n+                if (!success) weakDelay(c);\n@@ -458,0 +463,1 @@\n+                if (!success) weakDelay(c);\n@@ -468,0 +474,1 @@\n+                if (!success) weakDelay(c);\n@@ -478,0 +485,1 @@\n+                if (!success) weakDelay(c);\n@@ -707,0 +715,1 @@\n+                    if (!success) weakDelay(c);\n@@ -717,0 +726,1 @@\n+                    if (!success) weakDelay(c);\n@@ -727,0 +737,1 @@\n+                    if (!success) weakDelay(c);\n@@ -737,0 +748,1 @@\n+                    if (!success) weakDelay(c);\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessBoolean.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -214,0 +214,1 @@\n+                if (!success) weakDelay(c);\n@@ -224,0 +225,1 @@\n+                if (!success) weakDelay(c);\n@@ -234,0 +236,1 @@\n+                if (!success) weakDelay(c);\n@@ -244,0 +247,1 @@\n+                if (!success) weakDelay(c);\n@@ -470,0 +474,1 @@\n+                if (!success) weakDelay(c);\n@@ -480,0 +485,1 @@\n+                if (!success) weakDelay(c);\n@@ -490,0 +496,1 @@\n+                if (!success) weakDelay(c);\n@@ -500,0 +507,1 @@\n+                if (!success) weakDelay(c);\n@@ -751,0 +759,1 @@\n+                    if (!success) weakDelay(c);\n@@ -761,0 +770,1 @@\n+                    if (!success) weakDelay(c);\n@@ -771,0 +781,1 @@\n+                    if (!success) weakDelay(c);\n@@ -781,0 +792,1 @@\n+                    if (!success) weakDelay(c);\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessByte.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -214,0 +214,1 @@\n+                if (!success) weakDelay(c);\n@@ -224,0 +225,1 @@\n+                if (!success) weakDelay(c);\n@@ -234,0 +236,1 @@\n+                if (!success) weakDelay(c);\n@@ -244,0 +247,1 @@\n+                if (!success) weakDelay(c);\n@@ -470,0 +474,1 @@\n+                if (!success) weakDelay(c);\n@@ -480,0 +485,1 @@\n+                if (!success) weakDelay(c);\n@@ -490,0 +496,1 @@\n+                if (!success) weakDelay(c);\n@@ -500,0 +507,1 @@\n+                if (!success) weakDelay(c);\n@@ -751,0 +759,1 @@\n+                    if (!success) weakDelay(c);\n@@ -761,0 +770,1 @@\n+                    if (!success) weakDelay(c);\n@@ -771,0 +781,1 @@\n+                    if (!success) weakDelay(c);\n@@ -781,0 +792,1 @@\n+                    if (!success) weakDelay(c);\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessChar.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -214,0 +214,1 @@\n+                if (!success) weakDelay(c);\n@@ -224,0 +225,1 @@\n+                if (!success) weakDelay(c);\n@@ -234,0 +236,1 @@\n+                if (!success) weakDelay(c);\n@@ -244,0 +247,1 @@\n+                if (!success) weakDelay(c);\n@@ -392,0 +396,1 @@\n+                if (!success) weakDelay(c);\n@@ -402,0 +407,1 @@\n+                if (!success) weakDelay(c);\n@@ -412,0 +418,1 @@\n+                if (!success) weakDelay(c);\n@@ -422,0 +429,1 @@\n+                if (!success) weakDelay(c);\n@@ -595,0 +603,1 @@\n+                    if (!success) weakDelay(c);\n@@ -605,0 +614,1 @@\n+                    if (!success) weakDelay(c);\n@@ -615,0 +625,1 @@\n+                    if (!success) weakDelay(c);\n@@ -625,0 +636,1 @@\n+                    if (!success) weakDelay(c);\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessDouble.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -214,0 +214,1 @@\n+                if (!success) weakDelay(c);\n@@ -224,0 +225,1 @@\n+                if (!success) weakDelay(c);\n@@ -234,0 +236,1 @@\n+                if (!success) weakDelay(c);\n@@ -244,0 +247,1 @@\n+                if (!success) weakDelay(c);\n@@ -392,0 +396,1 @@\n+                if (!success) weakDelay(c);\n@@ -402,0 +407,1 @@\n+                if (!success) weakDelay(c);\n@@ -412,0 +418,1 @@\n+                if (!success) weakDelay(c);\n@@ -422,0 +429,1 @@\n+                if (!success) weakDelay(c);\n@@ -595,0 +603,1 @@\n+                    if (!success) weakDelay(c);\n@@ -605,0 +614,1 @@\n+                    if (!success) weakDelay(c);\n@@ -615,0 +625,1 @@\n+                    if (!success) weakDelay(c);\n@@ -625,0 +636,1 @@\n+                    if (!success) weakDelay(c);\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessFloat.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -214,0 +214,1 @@\n+                if (!success) weakDelay(c);\n@@ -224,0 +225,1 @@\n+                if (!success) weakDelay(c);\n@@ -234,0 +236,1 @@\n+                if (!success) weakDelay(c);\n@@ -244,0 +247,1 @@\n+                if (!success) weakDelay(c);\n@@ -470,0 +474,1 @@\n+                if (!success) weakDelay(c);\n@@ -480,0 +485,1 @@\n+                if (!success) weakDelay(c);\n@@ -490,0 +496,1 @@\n+                if (!success) weakDelay(c);\n@@ -500,0 +507,1 @@\n+                if (!success) weakDelay(c);\n@@ -751,0 +759,1 @@\n+                    if (!success) weakDelay(c);\n@@ -761,0 +770,1 @@\n+                    if (!success) weakDelay(c);\n@@ -771,0 +781,1 @@\n+                    if (!success) weakDelay(c);\n@@ -781,0 +792,1 @@\n+                    if (!success) weakDelay(c);\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessInt.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -214,0 +214,1 @@\n+                if (!success) weakDelay(c);\n@@ -224,0 +225,1 @@\n+                if (!success) weakDelay(c);\n@@ -234,0 +236,1 @@\n+                if (!success) weakDelay(c);\n@@ -244,0 +247,1 @@\n+                if (!success) weakDelay(c);\n@@ -470,0 +474,1 @@\n+                if (!success) weakDelay(c);\n@@ -480,0 +485,1 @@\n+                if (!success) weakDelay(c);\n@@ -490,0 +496,1 @@\n+                if (!success) weakDelay(c);\n@@ -500,0 +507,1 @@\n+                if (!success) weakDelay(c);\n@@ -751,0 +759,1 @@\n+                    if (!success) weakDelay(c);\n@@ -761,0 +770,1 @@\n+                    if (!success) weakDelay(c);\n@@ -771,0 +781,1 @@\n+                    if (!success) weakDelay(c);\n@@ -781,0 +792,1 @@\n+                    if (!success) weakDelay(c);\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessLong.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -214,0 +214,1 @@\n+                if (!success) weakDelay(c);\n@@ -224,0 +225,1 @@\n+                if (!success) weakDelay(c);\n@@ -234,0 +236,1 @@\n+                if (!success) weakDelay(c);\n@@ -244,0 +247,1 @@\n+                if (!success) weakDelay(c);\n@@ -470,0 +474,1 @@\n+                if (!success) weakDelay(c);\n@@ -480,0 +485,1 @@\n+                if (!success) weakDelay(c);\n@@ -490,0 +496,1 @@\n+                if (!success) weakDelay(c);\n@@ -500,0 +507,1 @@\n+                if (!success) weakDelay(c);\n@@ -751,0 +759,1 @@\n+                    if (!success) weakDelay(c);\n@@ -761,0 +770,1 @@\n+                    if (!success) weakDelay(c);\n@@ -771,0 +781,1 @@\n+                    if (!success) weakDelay(c);\n@@ -781,0 +792,1 @@\n+                    if (!success) weakDelay(c);\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessShort.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -214,0 +214,1 @@\n+                if (!success) weakDelay(c);\n@@ -224,0 +225,1 @@\n+                if (!success) weakDelay(c);\n@@ -234,0 +236,1 @@\n+                if (!success) weakDelay(c);\n@@ -244,0 +247,1 @@\n+                if (!success) weakDelay(c);\n@@ -370,0 +374,1 @@\n+                if (!success) weakDelay(c);\n@@ -380,0 +385,1 @@\n+                if (!success) weakDelay(c);\n@@ -390,0 +396,1 @@\n+                if (!success) weakDelay(c);\n@@ -400,0 +407,1 @@\n+                if (!success) weakDelay(c);\n@@ -551,0 +559,1 @@\n+                    if (!success) weakDelay(c);\n@@ -561,0 +570,1 @@\n+                    if (!success) weakDelay(c);\n@@ -571,0 +581,1 @@\n+                    if (!success) weakDelay(c);\n@@ -581,0 +592,1 @@\n+                    if (!success) weakDelay(c);\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestMethodHandleAccessString.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -728,0 +728,1 @@\n+                if (!success) weakDelay(c);\n@@ -738,0 +739,1 @@\n+                if (!success) weakDelay(c);\n@@ -748,0 +750,1 @@\n+                if (!success) weakDelay(c);\n@@ -758,0 +761,1 @@\n+                if (!success) weakDelay(c);\n@@ -1105,0 +1109,1 @@\n+                if (!success) weakDelay(c);\n@@ -1115,0 +1120,1 @@\n+                if (!success) weakDelay(c);\n@@ -1125,0 +1131,1 @@\n+                if (!success) weakDelay(c);\n@@ -1135,0 +1142,1 @@\n+                if (!success) weakDelay(c);\n@@ -1485,0 +1493,1 @@\n+                    if (!success) weakDelay(c);\n@@ -1495,0 +1504,1 @@\n+                    if (!success) weakDelay(c);\n@@ -1505,0 +1515,1 @@\n+                    if (!success) weakDelay(c);\n@@ -1515,0 +1526,1 @@\n+                    if (!success) weakDelay(c);\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/X-VarHandleTestAccess.java.template","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1629,0 +1629,1 @@\n+                        if (!success) weakDelay(c);\n@@ -1639,0 +1640,1 @@\n+                        if (!success) weakDelay(c);\n@@ -1649,0 +1651,1 @@\n+                        if (!success) weakDelay(c);\n@@ -1659,0 +1662,1 @@\n+                        if (!success) weakDelay(c);\n@@ -1918,0 +1922,1 @@\n+                        if (!success) weakDelay(c);\n@@ -1928,0 +1933,1 @@\n+                        if (!success) weakDelay(c);\n@@ -1938,0 +1944,1 @@\n+                        if (!success) weakDelay(c);\n@@ -1948,0 +1955,1 @@\n+                        if (!success) weakDelay(c);\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/X-VarHandleTestByteArrayView.java.template","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -215,0 +215,1 @@\n+                if (!success) weakDelay(c);\n@@ -225,0 +226,1 @@\n+                if (!success) weakDelay(c);\n@@ -235,0 +237,1 @@\n+                if (!success) weakDelay(c);\n@@ -245,0 +248,1 @@\n+                if (!success) weakDelay(c);\n@@ -510,0 +514,1 @@\n+                if (!success) weakDelay(c);\n@@ -520,0 +525,1 @@\n+                if (!success) weakDelay(c);\n@@ -530,0 +536,1 @@\n+                if (!success) weakDelay(c);\n@@ -540,0 +547,1 @@\n+                if (!success) weakDelay(c);\n@@ -830,0 +838,1 @@\n+                    if (!success) weakDelay(c);\n@@ -840,0 +849,1 @@\n+                    if (!success) weakDelay(c);\n@@ -850,0 +860,1 @@\n+                    if (!success) weakDelay(c);\n@@ -860,0 +871,1 @@\n+                    if (!success) weakDelay(c);\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/X-VarHandleTestMethodHandleAccess.java.template","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"}]}