{"files":[{"patch":"@@ -60,1 +60,0 @@\n-#include \"runtime\/arguments.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -80,0 +80,4 @@\n+import java.nio.file.attribute.FileTime;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+\n@@ -98,1 +102,1 @@\n-             throw new IOException(\"Archive \" + file.getName() + \" is not autamatically created!\");\n+             throw new IOException(\"Archive \" + fileName + \" is not automatically created\");\n@@ -150,0 +154,2 @@\n+        \/\/ remember the FileTime\n+        FileTime ft1 = Files.getLastModifiedTime(Paths.get(TOP_NAME));\n@@ -165,0 +171,4 @@\n+        FileTime ft2 = Files.getLastModifiedTime(Paths.get(TOP_NAME));\n+        if (!ft2.equals(ft1)) {\n+            throw new RuntimeException(\"Archive file \" + TOP_NAME + \"  should not be updated\");\n+        }\n@@ -166,0 +176,8 @@\n+        \/\/ 11 run with damaged magic should not regenerate dynamic archive\n+        \/\/    The bad magic will make the archive be opened as static archive\n+        \/\/    and failed, no shared for base archive either.\n+        print(\"11 run with damaged magic should not regenerate dynamic archive\");\n+        String modMagic = startNewArchive(\"modify-magic\");\n+        File copiedJsa = CDSArchiveUtils.copyArchiveFile(archiveFile, modMagic);\n+        CDSArchiveUtils.modifyHeaderIntField(copiedJsa, CDSArchiveUtils.offsetMagic(), 0x1234);\n+        ft1 = Files.getLastModifiedTime(Paths.get(modMagic));\n@@ -167,9 +185,1 @@\n-         \/\/ 11 run with damaged magic should not regenerate dynamic archive\n-         \/\/    The bad magic will make the archive be opened as static archive\n-         \/\/    and failed, no shared for base archive either.\n-         print(\"11 run with damaged magic should not regenerate dynamic archive\");\n-         String modMagic = startNewArchive(\"modify-magic\");\n-         File copiedJsa = CDSArchiveUtils.copyArchiveFile(archiveFile, modMagic);\n-         CDSArchiveUtils.modifyHeaderIntField(copiedJsa, CDSArchiveUtils.offsetMagic(), 0x1234);\n-\n-         run(modMagic,\n+        run(modMagic,\n@@ -186,0 +196,4 @@\n+        ft2 = Files.getLastModifiedTime(Paths.get(modMagic));\n+        if (!ft1.equals(ft2)) {\n+            throw new RuntimeException(\"Shared archive \" + modMagic + \" should not automatically be generated\");\n+        }\n@@ -189,1 +203,0 @@\n-        archiveFile = new File(TOP_NAME);\n@@ -193,0 +206,1 @@\n+        ft1 = Files.getLastModifiedTime(Paths.get(modVersion));\n@@ -204,1 +218,4 @@\n-        checkFileExists(modVersion);\n+        ft2 = Files.getLastModifiedTime(Paths.get(modVersion));\n+        if (ft1.equals(ft2)) {\n+            throw new RuntimeException(\"Shared archive \" + modVersion + \" should automatically be generated\");\n+        }\n@@ -208,1 +225,0 @@\n-        archiveFile = new File(TOP_NAME);\n@@ -212,0 +228,1 @@\n+        ft1 = Files.getLastModifiedTime(Paths.get(modJvmIdent));\n@@ -223,1 +240,4 @@\n-        checkFileExists(modJvmIdent);\n+        ft2 = Files.getLastModifiedTime(Paths.get(modJvmIdent));\n+        if (ft1.equals(ft2)) {\n+            throw new RuntimeException(\"Shared archive \" + modJvmIdent + \" should automatically be generated\");\n+        }\n@@ -225,16 +245,16 @@\n-         \/\/ 14 read base archive from top archive failed\n-         \/\/    the failure will cause the archive be opened as static\n-         \/\/    so no shared both for base and top\n-         print(\"14 read base archive from top archive failed\");\n-         String modBaseName = startNewArchive(\"modify-basename\");\n-         copiedJsa = CDSArchiveUtils.copyArchiveFile(archiveFile, modBaseName);\n-         int nameSize = CDSArchiveUtils.baseArchiveNameSize(copiedJsa);\n-         int offset = CDSArchiveUtils.baseArchivePathOffset(copiedJsa);\n-         StringBuilder sb = new StringBuilder();\n-         for (int i = 0; i < nameSize - 4; i++) {\n-             sb.append('Z');\n-         }\n-         sb.append(\".jsa\");\n-         sb.append('\\0');\n-         String newName = sb.toString();\n-         CDSArchiveUtils.writeData(copiedJsa, offset, newName.getBytes());\n+        \/\/ 14 read base archive from top archive failed\n+        \/\/    the failure will cause the archive be opened as static\n+        \/\/    so no shared both for base and top\n+        print(\"14 read base archive from top archive failed\");\n+        String modBaseName = startNewArchive(\"modify-basename\");\n+        copiedJsa = CDSArchiveUtils.copyArchiveFile(archiveFile, modBaseName);\n+        int nameSize = CDSArchiveUtils.baseArchiveNameSize(copiedJsa);\n+        int offset = CDSArchiveUtils.baseArchivePathOffset(copiedJsa);\n+        StringBuilder sb = new StringBuilder();\n+        for (int i = 0; i < nameSize - 4; i++) {\n+            sb.append('Z');\n+        }\n+        sb.append(\".jsa\");\n+        sb.append('\\0');\n+        String newName = sb.toString();\n+        CDSArchiveUtils.writeData(copiedJsa, offset, newName.getBytes());\n@@ -242,1 +262,2 @@\n-         run(modBaseName,\n+        ft1 = Files.getLastModifiedTime(Paths.get(modBaseName));\n+        run(modBaseName,\n@@ -253,0 +274,4 @@\n+        ft2 = Files.getLastModifiedTime(Paths.get(modBaseName));\n+        if (!ft1.equals(ft2)) {\n+            throw new RuntimeException(\"Shared archive \" + modBaseName + \" should not automatically be generated\");\n+        }\n@@ -254,6 +279,15 @@\n-         \/\/ 20 Testing with -XX:SharedArchiveFile=top:base\n-         print(\"20 Testing with -XX:SharedArchiveFile=top:base\");\n-         \/\/ 20.1 dump base archive and top archive\n-         print(\"20.1 dump base archive \" + BASE_NAME);\n-         dumpBaseArchive(BASE_NAME, \"-Xlog:cds\")\n-             .assertNormalExit(output -> {\n+        \/\/ delete top archive\n+        if (archiveFile.exists()) {\n+            archiveFile.delete();\n+        }\n+        \/\/ delete base archive\n+        File baseFile = new File(BASE_NAME);\n+        if (baseFile.exists()) {\n+            baseFile.delete();\n+        }\n+        \/\/ 20 Testing with -XX:SharedArchiveFile=base:top\n+        print(\"20 Testing with -XX:SharedArchiveFile=base:top\");\n+        \/\/ 20.1 dump base archive and top archive\n+        print(\"20.1 dump base archive \" + BASE_NAME);\n+        dumpBaseArchive(BASE_NAME, \"-Xlog:cds\")\n+            .assertNormalExit(output -> {\n@@ -261,2 +295,2 @@\n-             });\n-         checkFileExists(BASE_NAME);\n+            });\n+        checkFileExists(BASE_NAME);\n@@ -264,5 +298,40 @@\n-         \/\/ 20.2 dump top based on base\n-         print(\"20.2 dump top based on base\");\n-         dump2(BASE_NAME, TOP_NAME,\n-               \"-Xlog:cds\",\n-               \"-cp\", appJar, mainAppClass)\n+        \/\/ 20.2 dump top based on base\n+        print(\"20.2 dump top based on base\");\n+        dump2(BASE_NAME, TOP_NAME,\n+              \"-Xlog:cds\",\n+              \"-cp\", appJar, mainAppClass)\n+              .assertNormalExit(output -> {\n+                  output.shouldHaveExitValue(0)\n+                      .shouldContain(\"Dumping shared data to file:\")\n+                      .shouldContain(TOP_NAME);\n+              });\n+        checkFileExists(TOP_NAME);\n+\n+        \/\/ 20.3 run with base and top\n+        print(\"20.3 run with base and top\");\n+        run2(BASE_NAME, TOP_NAME,\n+             \"-Xlog:cds\",\n+             \"-Xlog:cds+dynamic=info\",\n+             \"-Xlog:class+load\",\n+             \"-cp\", appJar,\n+             mainAppClass)\n+            .assertNormalExit(output -> {\n+                output.shouldHaveExitValue(0)\n+                      .shouldContain(HELLO_SOURCE);\n+            });\n+\n+        \/\/ 21 top version is not correct, regenerate top\n+        print(\"21 top version is not correct, regenerate top\");\n+        String modHeader = startNewArchive(\"modify-header\");\n+        File topFile = new File(TOP_NAME);\n+        copiedJsa = CDSArchiveUtils.copyArchiveFile(topFile, modHeader);\n+        CDSArchiveUtils.modifyHeaderIntField(copiedJsa, CDSArchiveUtils.offsetVersion(), 0xff);\n+        ft1 = Files.getLastModifiedTime(Paths.get(modHeader));\n+\n+        run2(BASE_NAME, modHeader,\n+             \"-Xshare:auto\",\n+             \"-XX:+AutoCreateSharedArchive\",\n+             \"-Xlog:cds\",\n+             \"-Xlog:cds+dynamic=info\",\n+             \"-cp\", appJar,\n+             mainAppClass)\n@@ -272,1 +341,2 @@\n-                       .shouldContain(TOP_NAME);\n+                       .shouldContain(modHeader)\n+                       .shouldContain(\"Regenerate MethodHandle Holder classes\");\n@@ -274,0 +344,4 @@\n+        ft2 = Files.getLastModifiedTime(Paths.get(modHeader));\n+        if (ft1.equals(ft2)) {\n+            throw new RuntimeException(\"Shared archive \" + modBaseName + \" should automatically be generated\");\n+        }\n@@ -275,8 +349,15 @@\n-         \/\/ 20.3 run with base and top\n-         print(\"20.3 run with base and top\");\n-         run2(BASE_NAME, TOP_NAME,\n-              \"-Xlog:cds\",\n-              \"-Xlog:cds+dynamic=info\",\n-              \"-Xlog:class+load\",\n-              \"-cp\", appJar,\n-              mainAppClass)\n+        \/\/ 22 screw up base archive, will not generate top\n+        print(\"22 screw up base archive, will not generate top\");\n+        baseFile = new File(BASE_NAME);\n+        String modBase = startNewArchive(\"modify-base\");\n+        copiedJsa = CDSArchiveUtils.copyArchiveFile(baseFile, modBase);\n+        CDSArchiveUtils.modifyHeaderIntField(copiedJsa, CDSArchiveUtils.offsetVersion(), 0xff);\n+        ft1 = Files.getLastModifiedTime(Paths.get(TOP_NAME));\n+\n+        run2(modBase, TOP_NAME,\n+             \"-Xshare:auto\",\n+             \"-XX:+AutoCreateSharedArchive\",\n+             \"-Xlog:cds\",\n+             \"-Xlog:cds+dynamic=info\",\n+             \"-cp\", appJar,\n+             mainAppClass)\n@@ -284,2 +365,5 @@\n-                 output.shouldHaveExitValue(0)\n-                       .shouldContain(HELLO_SOURCE);\n+                 output.shouldContain(\"The shared archive file has the wrong version\")\n+                       .shouldContain(\"Initialize static archive failed\")\n+                       .shouldContain(\"Unable to map shared spaces\")\n+                       .shouldContain(\"Hello World\")\n+                       .shouldNotContain(\"Dumping shared data to file:\");\n@@ -287,41 +371,4 @@\n-\n-\n-         File topFile = new File(TOP_NAME);\n-         \/\/ 21 top version is not correct, regenerate top\n-         print(\"21 top version is not correct, regenerate top\");\n-         String modHeader = startNewArchive(\"modify-header\");\n-         copiedJsa = CDSArchiveUtils.copyArchiveFile(topFile, modHeader);\n-         CDSArchiveUtils.modifyHeaderIntField(copiedJsa, CDSArchiveUtils.offsetVersion(), 0xff);\n-         run2(BASE_NAME, modHeader,\n-              \"-Xshare:auto\",\n-              \"-XX:+AutoCreateSharedArchive\",\n-              \"-Xlog:cds\",\n-              \"-Xlog:cds+dynamic=info\",\n-              \"-cp\", appJar,\n-              mainAppClass)\n-              .assertNormalExit(output -> {\n-                  output.shouldHaveExitValue(0)\n-                        .shouldContain(\"Dumping shared data to file:\")\n-                        .shouldContain(modHeader)\n-                        .shouldContain(\"Regenerate MethodHandle Holder classes\");\n-              });\n-         \/\/ 22 screw up base archive, will not generate top\n-         print(\"22 screw up base archive, will not generate top\");\n-         File baseFile = new File(BASE_NAME);\n-         String modBase = startNewArchive(\"modify-base\");\n-         copiedJsa = CDSArchiveUtils.copyArchiveFile(baseFile, modBase);\n-         CDSArchiveUtils.modifyHeaderIntField(copiedJsa, CDSArchiveUtils.offsetVersion(), 0xff);\n-         run2(modBase, TOP_NAME,\n-              \"-Xshare:auto\",\n-              \"-XX:+AutoCreateSharedArchive\",\n-              \"-Xlog:cds\",\n-              \"-Xlog:cds+dynamic=info\",\n-              \"-cp\", appJar,\n-              mainAppClass)\n-              .assertNormalExit(output -> {\n-                  output.shouldContain(\"The shared archive file has the wrong version\")\n-                        .shouldContain(\"Initialize static archive failed\")\n-                        .shouldContain(\"Unable to map shared spaces\")\n-                        .shouldContain(\"Hello World\")\n-                        .shouldNotContain(\"Dumping shared data to file:\");\n-              });\n+        ft2 = Files.getLastModifiedTime(Paths.get(TOP_NAME));\n+        if (!ft1.equals(ft2)) {\n+            throw new RuntimeException(\"Shared archive \" + TOP_NAME + \" should not be created at exit\");\n+        }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/TestAutoCreateSharedArchive.java","additions":143,"deletions":96,"binary":false,"changes":239,"status":"modified"}]}