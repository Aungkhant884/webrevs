{"files":[{"patch":"@@ -279,0 +279,22 @@\n+        \/\/ 15 Create an archive with only dynamic magic (size of 4)\n+        print(\"15 Create an archive with only dynamic magic (size of 4)\");\n+        String magicOnly = startNewArchive(\"magic-only\");\n+        copiedJsa = CDSArchiveUtils.createMagicOnlyFile(magicOnly, false\/*dynamic*\/);\n+        ft1 = Files.getLastModifiedTime(Paths.get(magicOnly));\n+        run(magicOnly,\n+            \"-Xshare:auto\",\n+            \"-XX:+AutoCreateSharedArchive\",\n+            \"-Xlog:cds\",\n+            \"-Xlog:cds+dynamic=info\",\n+            \"-cp\", appJar,\n+            mainAppClass)\n+            .assertAbnormalExit(output -> {\n+                output.shouldHaveExitValue(1);\n+                output.shouldContain(\"Unable to read generic CDS file map header from shared archive\");\n+                output.shouldNotContain(\"Dumping shared data to file:\");\n+                });\n+        ft2 = Files.getLastModifiedTime(Paths.get(magicOnly));\n+        if (!ft1.equals(ft2)) {\n+            throw new RuntimeException(\"Shared archive \" + modBaseName + \" should not automatically be generated\");\n+        }\n+\n@@ -375,0 +397,20 @@\n+\n+        \/\/ 23 create an archive like in 15\n+        print(\"23 create an archive with dynamic magic number only\");\n+        copiedJsa = CDSArchiveUtils.createMagicOnlyFile(magicOnly, false \/*dynamic*\/);\n+        ft1 = Files.getLastModifiedTime(Paths.get(magicOnly));\n+        run2(BASE_NAME, magicOnly,\n+             \"-Xshare:auto\",\n+             \"-XX:+AutoCreateSharedArchive\",\n+             \"-Xlog:cds\",\n+             \"-Xlog:cds+dynamic=info\",\n+             \"-cp\", appJar,\n+             mainAppClass)\n+             .assertAbnormalExit(output -> {\n+                 output.shouldContain(\"Unable to read generic CDS file map header from shared archive\")\n+                       .shouldNotContain(\"Dumping shared data to file:\");\n+             });\n+        ft2 = Files.getLastModifiedTime(Paths.get(magicOnly));\n+        if (!ft1.equals(ft2)) {\n+            throw new RuntimeException(\"Shared archive \" + magicOnly + \" should not be created at exit\");\n+        }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/TestAutoCreateSharedArchive.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -334,0 +334,12 @@\n+    public static File createMagicOnlyFile(String fileName, boolean createStatic) throws Exception {\n+        File file = new File(fileName);\n+        if (file.exists()) {\n+            file.delete();\n+        }\n+        try (FileOutputStream out = new FileOutputStream(file)) {\n+            ByteBuffer buffer = ByteBuffer.allocate(4).putInt(createStatic ? staticMagic: dynamicMagic);\n+            out.write(buffer.array(), 0, 4);\n+        }\n+        return file;\n+    }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/cds\/CDSArchiveUtils.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"}]}