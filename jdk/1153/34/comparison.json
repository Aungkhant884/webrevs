{"files":[{"patch":"@@ -2349,0 +2349,3 @@\n+  st->print(\"Page Sizes: \");\n+  _page_sizes.print_on(st);\n+  st->cr();\n@@ -3507,0 +3510,19 @@\n+  } else {\n+      log_info(pagesize)(\"Large page size (\" SIZE_FORMAT \"%s) failed sanity check \"\n+                         \"checking if smaller large page sizes are usable\",\n+                         byte_size_in_exact_unit(page_size),\n+                         exact_unit_for_byte_size(page_size);\n+      for (size_t page_size_ = _page_sizes.next_smaller(page_size);\n+          page_size_ != (size_t)os::vm_page_size();\n+          page_size_ = _page_sizes.next_smaller(page_size_)) {\n+        int flags = MAP_ANONYMOUS | MAP_PRIVATE | MAP_HUGETLB | hugetlbfs_page_size_flag(page_size_);\n+        void *p = mmap(NULL, page_size_, PROT_READ|PROT_WRITE, flags, -1, 0);\n+        if (p != MAP_FAILED) {\n+          \/\/ Mapping succeeded, sanity check passed.\n+          munmap(p, page_size_);\n+          log_info(pagesize)(\"Large page size (\" SIZE_FORMAT \"%s) passed sanity check\",\n+                             byte_size_in_exact_unit(page_size_),\n+                             exact_unit_for_byte_size(page_size_);\n+          return true;\n+        }\n+      }\n@@ -3581,5 +3603,2 @@\n-size_t os::Linux::find_default_large_page_size() {\n-  if (_default_large_page_size != 0) {\n-    return _default_large_page_size;\n-  }\n-  size_t large_page_size = 0;\n+static size_t scan_default_large_page_size() {\n+  size_t default_large_page_size = 0;\n@@ -3590,1 +3609,1 @@\n-  \/\/ page as large as 256M.\n+  \/\/ page as large as 1G.\n@@ -3597,13 +3616,1 @@\n-  \/\/ format has been changed), we'll use the largest page size supported by\n-  \/\/ the processor.\n-\n-#ifndef ZERO\n-  large_page_size =\n-    AARCH64_ONLY(2 * M)\n-    AMD64_ONLY(2 * M)\n-    ARM32_ONLY(2 * M)\n-    IA32_ONLY(4 * M)\n-    IA64_ONLY(256 * M)\n-    PPC_ONLY(4 * M)\n-    S390_ONLY(1 * M);\n-#endif \/\/ ZERO\n+  \/\/ format has been changed), we'll set largest page size to 0\n@@ -3618,1 +3625,1 @@\n-          large_page_size = x * K;\n+          default_large_page_size = x * K;\n@@ -3631,1 +3638,2 @@\n-  return large_page_size;\n+\n+  return default_large_page_size;\n@@ -3634,5 +3642,2 @@\n-size_t os::Linux::find_large_page_size(size_t large_page_size) {\n-  if (_default_large_page_size == 0) {\n-    _default_large_page_size = Linux::find_default_large_page_size();\n-  }\n-  \/\/ We need to scan \/sys\/kernel\/mm\/hugepages\n+static os::PageSizes scan_multiple_page_support() {\n+  \/\/ Scan \/sys\/kernel\/mm\/hugepages\n@@ -3641,0 +3646,1 @@\n+  os::PageSizes page_sizes;\n@@ -3643,3 +3649,0 @@\n-  if (dir == NULL) {\n-    return _default_large_page_size;\n-  }\n@@ -3653,4 +3656,2 @@\n-      if (large_page_size == page_size * K) {\n-        closedir(dir);\n-        return large_page_size;\n-      }\n+      \/\/ Add each found Large Page Size to page_sizes\n+      page_sizes.add(page_size * K);\n@@ -3660,24 +3661,1 @@\n-  return _default_large_page_size;\n-}\n-\n-size_t os::Linux::setup_large_page_size() {\n-  _default_large_page_size = Linux::find_default_large_page_size();\n-\n-  if (!FLAG_IS_DEFAULT(LargePageSizeInBytes) && LargePageSizeInBytes != _default_large_page_size ) {\n-    _large_page_size = find_large_page_size(LargePageSizeInBytes);\n-    if (_large_page_size == _default_large_page_size) {\n-      warning(\"Setting LargePageSizeInBytes=\" SIZE_FORMAT \" has no effect on this OS. Using the default large page size \"\n-              SIZE_FORMAT \"%s.\",\n-              LargePageSizeInBytes,\n-              byte_size_in_proper_unit(_large_page_size), proper_unit_for_byte_size(_large_page_size));\n-    }\n-  } else {\n-    _large_page_size = _default_large_page_size;\n-  }\n-\n-  const size_t default_page_size = (size_t)Linux::page_size();\n-  if (_large_page_size > default_page_size) {\n-    _page_sizes.add(_large_page_size);\n-  }\n-\n-  return _large_page_size;\n+  return page_sizes;\n@@ -3739,0 +3717,2 @@\n+  \/\/ 1) Handle the case where we do not want to use huge pages and hence\n+  \/\/    there is no need to scan the OS for related info\n@@ -3756,2 +3736,67 @@\n-  size_t large_page_size = Linux::setup_large_page_size();\n-  UseLargePages          = Linux::setup_large_page_type(large_page_size);\n+  \/\/ 2) Scan OS info\n+  size_t default_large_page_size = scan_default_large_page_size();\n+  os::Linux::_default_large_page_size = default_large_page_size;\n+  if (default_large_page_size == 0) {\n+    \/\/ No large pages configured, return.\n+    UseTransparentHugePages = false;\n+    UseHugeTLBFS = false;\n+    UseSHM = false;\n+    return;\n+  }\n+  os::PageSizes all_large_pages = scan_multiple_page_support();\n+\n+  \/\/ 3) Consistency check and post-processing\n+\n+  \/\/ It is unclear if \/sys\/kernel\/mm\/hugepages\/ and \/proc\/meminfo could disagree. Manually\n+  \/\/ re-add the default page size to the list of page sizes to be sure.\n+  all_large_pages.add(default_large_page_size);\n+\n+  \/\/ Check LargePageSizeInBytes matches an available page size and if so set _large_page_size\n+  \/\/ using LargePageSizeInBytes as the maximum allowed large page size. If LargePageSizeInBytes\n+  \/\/ doesn't match an available page size set _large_page_size to default_large_page_size\n+  \/\/ and use it as the maximum.\n+ if (FLAG_IS_DEFAULT(LargePageSizeInBytes) ||\n+      LargePageSizeInBytes == 0 ||\n+      LargePageSizeInBytes == default_large_page_size) {\n+    _large_page_size = default_large_page_size;\n+    log_info(pagesize)(\"Using the default large page size: \" SIZE_FORMAT \"%s\",\n+                       byte_size_in_exact_unit(_large_page_size),\n+                       exact_unit_for_byte_size(_large_page_size));\n+  } else {\n+    if (all_large_pages.contains(LargePageSizeInBytes)) {\n+      _large_page_size = LargePageSizeInBytes;\n+      log_info(pagesize)(\"Overriding default large page size (\" SIZE_FORMAT \"%s) \"\n+                         \"using LargePageSizeInBytes: \" SIZE_FORMAT \"%s\",\n+                         byte_size_in_exact_unit(default_large_page_size),\n+                         exact_unit_for_byte_size(default_large_page_size),\n+                         byte_size_in_exact_unit(_large_page_size),\n+                         exact_unit_for_byte_size(_large_page_size));\n+    } else {\n+      _large_page_size = default_large_page_size;\n+      log_info(pagesize)(\"LargePageSizeInBytes is not a valid large page size (\" SIZE_FORMAT \"%s) \"\n+                         \"using the default large page size: \" SIZE_FORMAT \"%s\",\n+                         byte_size_in_exact_unit(LargePageSizeInBytes),\n+                         exact_unit_for_byte_size(LargePageSizeInBytes),\n+                         byte_size_in_exact_unit(_large_page_size),\n+                         exact_unit_for_byte_size(_large_page_size));\n+    }\n+  }\n+\n+  \/\/ Populate _page_sizes with large page sizes less than or equal to\n+  \/\/ _large_page_size.\n+  for (size_t page_size = _large_page_size; page_size != 0;\n+         page_size = all_large_pages.next_smaller(page_size)) {\n+    _page_sizes.add(page_size);\n+  }\n+\n+  LogTarget(Info, pagesize) lt;\n+  if (lt.is_enabled()) {\n+    LogStream ls(lt);\n+    ls.print(\"Usable page sizes: \");\n+    _page_sizes.print_on(&ls);\n+    ls.print(\"All large Page sizes: \");\n+    all_large_pages.print_on(&ls);\n+  }\n+\n+  \/\/ Now determine the type of large pages to use:\n+  UseLargePages = os::Linux::setup_large_page_type(_large_page_size);\n@@ -3968,0 +4013,1 @@\n+  assert(page_size > (size_t)os::vm_page_size(), \"Must be a large page size\");\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":105,"deletions":59,"binary":false,"changes":164,"status":"modified"},{"patch":"@@ -81,3 +81,2 @@\n-  static size_t find_default_large_page_size();\n-  static size_t find_large_page_size(size_t page_size);\n-  static size_t setup_large_page_size();\n+  static size_t scan_default_large_page_size();\n+  static os::PageSizes scan_multiple_page_support();\n","filename":"src\/hotspot\/os\/linux\/os_linux.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"}]}