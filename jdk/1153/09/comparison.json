{"files":[{"patch":"@@ -3726,5 +3726,2 @@\n-size_t os::Linux::find_large_page_size(size_t large_page_size) {\n-  if (_default_large_page_size == 0) {\n-    _default_large_page_size = Linux::find_default_large_page_size();\n-  }\n-  \/\/ We need to scan \/sys\/kernel\/mm\/hugepages\n+void os::Linux::register_large_page_sizes() {\n+  \/\/ Scan \/sys\/kernel\/mm\/hugepages\n@@ -3736,1 +3733,3 @@\n-    return _default_large_page_size;\n+    \/\/ If we can't open \/sys\/kernel\/mm\/hugepages\n+    \/\/ Add _default_large_page_size to _page_sizes\n+    _page_sizes.add(_default_large_page_size);\n@@ -3745,3 +3744,3 @@\n-      if (large_page_size == page_size * K) {\n-        closedir(dir);\n-        return large_page_size;\n+      if (page_size * K > (size_t)Linux::page_size()) {\n+          \/\/ Add each found Large Page Size to _page_sizes\n+          _page_sizes.add(page_size * K);\n@@ -3752,1 +3751,0 @@\n-  return _default_large_page_size;\n@@ -3757,4 +3755,13 @@\n-\n-  if (!FLAG_IS_DEFAULT(LargePageSizeInBytes) && LargePageSizeInBytes != _default_large_page_size ) {\n-    _large_page_size = find_large_page_size(LargePageSizeInBytes);\n-    if (_large_page_size == _default_large_page_size) {\n+  \/\/ Scan '\/sys\/kernel\/mm\/hugepages' to setup large page sizes\n+  \/\/ using Linux::register_large_page_sizes()\n+  \/\/ put an entry in _page_sizes per large_page_sizes entry\n+  Linux::register_large_page_sizes();\n+\n+  if (!FLAG_IS_DEFAULT(LargePageSizeInBytes) && LargePageSizeInBytes != _default_large_page_size) {\n+    \/\/ Check that LargePageSizeInBytes was found in\n+    \/\/ '\/sys\/kernel\/mm\/hugepages' and is present in _page_sizes\n+    \/\/ Return LargePageSizeInBytes in positive case\n+    \/\/ and return _default_large_page_size in negative case\n+    if (os::page_sizes().contains(LargePageSizeInBytes)) {\n+      return LargePageSizeInBytes;\n+    } else {\n@@ -3766,7 +3773,0 @@\n-  } else {\n-    _large_page_size = _default_large_page_size;\n-  }\n-\n-  const size_t default_page_size = (size_t)Linux::page_size();\n-  if (_large_page_size > default_page_size) {\n-    _page_sizes.add(_large_page_size);\n@@ -3774,2 +3774,1 @@\n-\n-  return _large_page_size;\n+  return _default_large_page_size;\n@@ -3986,1 +3985,1 @@\n-                                        int error) {\n+                                        size_t large_page_sz, int error) {\n@@ -3996,2 +3995,2 @@\n-    jio_snprintf(msg, sizeof(msg), \"Failed to reserve large pages memory req_addr: \"\n-                 PTR_FORMAT \" bytes: \" SIZE_FORMAT \" (errno = %d).\", req_addr, bytes, error);\n+    jio_snprintf(msg, sizeof(msg), \"Failed to reserve memory with large_page_size: \" SIZE_FORMAT \"' req_addr: \"\n+                 PTR_FORMAT \" bytes: \" SIZE_FORMAT \" (errno = %d).\", large_page_sz, req_addr, bytes, error);\n@@ -4005,0 +4004,4 @@\n+  \/\/ Select large_page_size from _page_sizes\n+  \/\/ that is smaller than size_t bytes\n+  size_t large_page_size = os::page_size_for_region_aligned(bytes, 1);\n+\n@@ -4006,2 +4009,2 @@\n-  assert(is_aligned(bytes, os::large_page_size()), \"Unaligned size\");\n-  assert(is_aligned(req_addr, os::large_page_size()), \"Unaligned address\");\n+  assert(is_aligned(bytes, large_page_size), \"Unaligned size\");\n+  assert(is_aligned(req_addr, large_page_size), \"Unaligned address\");\n@@ -4012,2 +4015,2 @@\n-  if (os::large_page_size() != default_large_page_size()) {\n-    flags |= (exact_log2(os::large_page_size()) << MAP_HUGE_SHIFT);\n+  if (large_page_size != default_large_page_size()) {\n+    flags |= (exact_log2(large_page_size) << MAP_HUGE_SHIFT);\n@@ -4018,1 +4021,1 @@\n-    warn_on_large_pages_failure(req_addr, bytes, errno);\n+    warn_on_large_pages_failure(req_addr, bytes, large_page_size, errno);\n@@ -4022,1 +4025,1 @@\n-  assert(is_aligned(addr, os::large_page_size()), \"Must be\");\n+  assert(is_aligned(addr, large_page_size), \"Must be\");\n@@ -4038,1 +4041,4 @@\n-  size_t large_page_size = os::large_page_size();\n+  \/\/ Select large_page_size from _page_sizes\n+  \/\/ that is smaller than size_t bytes\n+  size_t large_page_size = os::page_size_for_region_aligned(bytes, 1);\n+\n@@ -4086,2 +4092,2 @@\n-  if (os::large_page_size() != default_large_page_size()) {\n-    flags |= (exact_log2(os::large_page_size()) << MAP_HUGE_SHIFT);\n+  if (large_page_size != default_large_page_size()) {\n+    flags |= (exact_log2(large_page_size) << MAP_HUGE_SHIFT);\n@@ -4092,1 +4098,1 @@\n-    warn_on_large_pages_failure(lp_start, lp_bytes, errno);\n+    warn_on_large_pages_failure(lp_start, lp_bytes, large_page_size, errno);\n@@ -4123,0 +4129,4 @@\n+  \/\/ Select large_page_size from _page_sizes\n+  \/\/ that is smaller than size_t bytes\n+  size_t large_page_size = os::page_size_for_region_aligned(bytes, 1);\n+\n@@ -4126,2 +4136,2 @@\n-  assert(is_power_of_2(os::large_page_size()), \"Must be\");\n-  assert(bytes >= os::large_page_size(), \"Shouldn't allocate large pages for small sizes\");\n+  assert(is_power_of_2(large_page_size), \"Must be\");\n+  assert(bytes >= large_page_size, \"Shouldn't allocate large pages for small sizes\");\n@@ -4129,1 +4139,1 @@\n-  if (is_aligned(bytes, os::large_page_size()) && alignment <= os::large_page_size()) {\n+  if (is_aligned(bytes, large_page_size) && alignment <= large_page_size) {\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":49,"deletions":39,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-  static size_t find_large_page_size(size_t page_size);\n+  static void register_large_page_sizes();\n","filename":"src\/hotspot\/os\/linux\/os_linux.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}