{"files":[{"patch":"@@ -2389,0 +2389,6 @@\n+\n+  st->print(\"%dk default large page\", os::large_page_size()>>10);\n+  st->cr();\n+  st->print(\"Page Sizes: \");\n+  _page_sizes.print_on(st);\n+  st->cr();\n@@ -3639,5 +3645,2 @@\n-size_t os::Linux::find_default_large_page_size() {\n-  if (_default_large_page_size != 0) {\n-    return _default_large_page_size;\n-  }\n-  size_t large_page_size = 0;\n+static size_t scan_default_large_page_size() {\n+  size_t default_large_page_size = 0;\n@@ -3648,1 +3651,1 @@\n-  \/\/ page as large as 256M.\n+  \/\/ page as large as 1G.\n@@ -3655,13 +3658,1 @@\n-  \/\/ format has been changed), we'll use the largest page size supported by\n-  \/\/ the processor.\n-\n-#ifndef ZERO\n-  large_page_size =\n-    AARCH64_ONLY(2 * M)\n-    AMD64_ONLY(2 * M)\n-    ARM32_ONLY(2 * M)\n-    IA32_ONLY(4 * M)\n-    IA64_ONLY(256 * M)\n-    PPC_ONLY(4 * M)\n-    S390_ONLY(1 * M);\n-#endif \/\/ ZERO\n+  \/\/ format has been changed), we'll set largest page size to 0\n@@ -3676,2 +3667,2 @@\n-          large_page_size = x * K;\n-          break;\n+          default_large_page_size = x * K;\n+          return default_large_page_size;\n@@ -3689,1 +3680,2 @@\n-  return large_page_size;\n+\n+  return default_large_page_size;\n@@ -3692,5 +3684,2 @@\n-size_t os::Linux::find_large_page_size(size_t large_page_size) {\n-  if (_default_large_page_size == 0) {\n-    _default_large_page_size = Linux::find_default_large_page_size();\n-  }\n-  \/\/ We need to scan \/sys\/kernel\/mm\/hugepages\n+static os::PageSizes scan_multiple_page_support() {\n+  \/\/ Scan \/sys\/kernel\/mm\/hugepages\n@@ -3699,0 +3688,1 @@\n+  static os::PageSizes page_sizes;\n@@ -3701,3 +3691,0 @@\n-  if (dir == NULL) {\n-    return _default_large_page_size;\n-  }\n@@ -3711,4 +3698,2 @@\n-      if (large_page_size == page_size * K) {\n-        closedir(dir);\n-        return large_page_size;\n-      }\n+      \/\/ Add each found Large Page Size to page_sizes\n+      page_sizes.add(page_size * K);\n@@ -3718,24 +3703,1 @@\n-  return _default_large_page_size;\n-}\n-\n-size_t os::Linux::setup_large_page_size() {\n-  _default_large_page_size = Linux::find_default_large_page_size();\n-\n-  if (!FLAG_IS_DEFAULT(LargePageSizeInBytes) && LargePageSizeInBytes != _default_large_page_size ) {\n-    _large_page_size = find_large_page_size(LargePageSizeInBytes);\n-    if (_large_page_size == _default_large_page_size) {\n-      warning(\"Setting LargePageSizeInBytes=\" SIZE_FORMAT \" has no effect on this OS. Using the default large page size \"\n-              SIZE_FORMAT \"%s.\",\n-              LargePageSizeInBytes,\n-              byte_size_in_proper_unit(_large_page_size), proper_unit_for_byte_size(_large_page_size));\n-    }\n-  } else {\n-    _large_page_size = _default_large_page_size;\n-  }\n-\n-  const size_t default_page_size = (size_t)Linux::page_size();\n-  if (_large_page_size > default_page_size) {\n-    _page_sizes.add(_large_page_size);\n-  }\n-\n-  return _large_page_size;\n+  return page_sizes;\n@@ -3797,0 +3759,5 @@\n+  size_t default_large_page_size = scan_default_large_page_size();\n+  os::Linux::_default_large_page_size = default_large_page_size;\n+\n+  \/\/ 1) Handle the case where we do not want to use huge pages and hence\n+  \/\/    there is no need to scan the OS for related info\n@@ -3814,2 +3781,50 @@\n-  size_t large_page_size = Linux::setup_large_page_size();\n-  UseLargePages          = Linux::setup_large_page_type(large_page_size);\n+  \/\/ 2) Scan OS info\n+  if (default_large_page_size == 0) {\n+    \/\/ No large pages configured, return.\n+    UseTransparentHugePages = false;\n+    UseHugeTLBFS = false;\n+    UseSHM = false;\n+    return;\n+  }\n+  os::PageSizes all_large_pages = scan_multiple_page_support();\n+\n+  \/\/ 3) Consistency check and post-processing\n+\n+  \/\/ It is unclear if \/sys\/kernel\/mm\/hugepages\/ and \/proc\/meminfo could disagree. Manually\n+  \/\/ re-add the default page size to the list of page sizes to be sure.\n+  all_large_pages.add(default_large_page_size);\n+\n+  for (size_t page_size = all_large_pages.largest(); page_size != 0;\n+         page_size = all_large_pages.next_smaller(page_size)) {\n+    _page_sizes.add(page_size);\n+  }\n+\n+  LogTarget(Info, pagesize) lt;\n+  if (lt.is_enabled()) {\n+    LogStream ls(lt);\n+    ls.print(\"Available page sizes: \");\n+    _page_sizes.print_on(&ls);\n+    ls.print(\"\\n\");\n+    ls.print(\"Available large page sizes: \");\n+    all_large_pages.print_on(&ls);\n+  }\n+\n+  \/\/ Handle LargePageSizeInBytes\n+  if (!FLAG_IS_DEFAULT(LargePageSizeInBytes) && LargePageSizeInBytes != default_large_page_size) {\n+    if (all_large_pages.contains(LargePageSizeInBytes)) {\n+      _large_page_size = LargePageSizeInBytes;\n+      log_info(os)(\"Overriding default large page size using LargePageSizeInBytes\");\n+    } else {\n+      _large_page_size = default_large_page_size;\n+      warning(\"Setting LargePageSizeInBytes=\" SIZE_FORMAT \" has no effect on this OS. Using the default large page size \"\n+              SIZE_FORMAT \"%s.\",\n+              LargePageSizeInBytes,\n+              byte_size_in_proper_unit(_large_page_size), proper_unit_for_byte_size(_large_page_size));\n+\n+    }\n+  } else {\n+      _large_page_size = default_large_page_size;\n+  }\n+\n+  \/\/ Now determine the type of large pages to use:\n+  UseLargePages = os::Linux::setup_large_page_type(_large_page_size);\n@@ -3965,1 +3980,1 @@\n-                                        int error) {\n+                                        size_t large_page_sz, int error) {\n@@ -3975,2 +3990,2 @@\n-    jio_snprintf(msg, sizeof(msg), \"Failed to reserve large pages memory req_addr: \"\n-                 PTR_FORMAT \" bytes: \" SIZE_FORMAT \" (errno = %d).\", req_addr, bytes, error);\n+    jio_snprintf(msg, sizeof(msg), \"Failed to reserve memory with large_page_size: \" SIZE_FORMAT \" req_addr: \"\n+                 PTR_FORMAT \" bytes: \" SIZE_FORMAT \" (errno = %d).\", large_page_sz, req_addr, bytes, error);\n@@ -3984,0 +3999,7 @@\n+  \/\/ Select large_page_size from _page_sizes\n+  \/\/ that is smaller than size_t bytes\n+  size_t large_page_size = os::page_size_for_region_aligned(bytes, 1);\n+\n+  LogTarget(Info, pagesize) lt;\n+\n+  assert(large_page_size > (size_t)os::vm_page_size(), \"large page size: %d not larger than small page size: %d\", large_page_size, (size_t)os::vm_page_size());\n@@ -3985,2 +4007,2 @@\n-  assert(is_aligned(bytes, os::large_page_size()), \"Unaligned size\");\n-  assert(is_aligned(req_addr, os::large_page_size()), \"Unaligned address\");\n+  assert(is_aligned(bytes, large_page_size), \"Unaligned size\");\n+  assert(is_aligned(req_addr, large_page_size), \"Unaligned address\");\n@@ -3991,1 +4013,1 @@\n-  flags |= hugetlbfs_page_size_flag(os::large_page_size());\n+  flags |= hugetlbfs_page_size_flag(large_page_size);\n@@ -3996,1 +4018,1 @@\n-    warn_on_large_pages_failure(req_addr, bytes, errno);\n+    warn_on_large_pages_failure(req_addr, bytes, large_page_size, errno);\n@@ -4000,1 +4022,1 @@\n-  assert(is_aligned(addr, os::large_page_size()), \"Must be\");\n+  assert(is_aligned(addr, large_page_size), \"Must be\");\n@@ -4016,1 +4038,6 @@\n-  size_t large_page_size = os::large_page_size();\n+  \/\/ Select large_page_size from _page_sizes\n+  \/\/ that is smaller than size_t bytes\n+  size_t large_page_size = os::page_size_for_region_unaligned(bytes, 1);\n+  LogTarget(Info, pagesize) lt;\n+\n+  assert(large_page_size > (size_t)os::vm_page_size(), \"large page size: %d not larger than small page size: %d\", large_page_size, (size_t)os::vm_page_size());\n@@ -4062,1 +4089,1 @@\n-  flags |= MAP_HUGETLB | hugetlbfs_page_size_flag(os::large_page_size());\n+  flags |= MAP_HUGETLB | hugetlbfs_page_size_flag(large_page_size);\n@@ -4066,1 +4093,1 @@\n-    warn_on_large_pages_failure(lp_start, lp_bytes, errno);\n+    warn_on_large_pages_failure(lp_start, lp_bytes, large_page_size, errno);\n@@ -4097,0 +4124,4 @@\n+  \/\/ Select large_page_size from _page_sizes\n+  \/\/ that is smaller than size_t bytes\n+  size_t large_page_size = os::page_size_for_region_unaligned(bytes, 1);\n+\n@@ -4100,2 +4131,2 @@\n-  assert(is_power_of_2(os::large_page_size()), \"Must be\");\n-  assert(bytes >= os::large_page_size(), \"Shouldn't allocate large pages for small sizes\");\n+  assert(is_power_of_2(large_page_size), \"Must be\");\n+  assert(bytes >= large_page_size, \"Shouldn't allocate large pages for small sizes\");\n@@ -4103,1 +4134,1 @@\n-  if (is_aligned(bytes, os::large_page_size()) && alignment <= os::large_page_size()) {\n+  if (is_aligned(bytes, large_page_size) && alignment <= large_page_size) {\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":105,"deletions":74,"binary":false,"changes":179,"status":"modified"},{"patch":"@@ -81,3 +81,2 @@\n-  static size_t find_default_large_page_size();\n-  static size_t find_large_page_size(size_t page_size);\n-  static size_t setup_large_page_size();\n+  static size_t scan_default_large_page_size();\n+  static os::PageSizes scan_multiple_page_support();\n","filename":"src\/hotspot\/os\/linux\/os_linux.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1476,1 +1476,1 @@\n-      if (page_size <= max_page_size) {\n+      if (page_size <= max_page_size && page_size > (size_t)vm_page_size()) {\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}