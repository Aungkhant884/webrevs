{"files":[{"patch":"@@ -3727,1 +3727,1 @@\n-  \/\/ We need to scan \/sys\/kernel\/mm\/hugepages\n+  \/\/ Scan \/sys\/kernel\/mm\/hugepages\n@@ -3733,0 +3733,2 @@\n+    \/\/ If we can't open \/sys\/kernel\/mm\/hugepages\n+    \/\/ Add _default_large_page_size to _page_sizes\n@@ -3743,0 +3745,1 @@\n+          \/\/ Add each found Large Page Size to _page_sizes\n@@ -3750,29 +3753,0 @@\n-size_t os::Linux::find_large_page_size(size_t large_page_size) {\n-  if (_default_large_page_size == 0) {\n-    _default_large_page_size = Linux::find_default_large_page_size();\n-  }\n-  \/\/ We need to scan \/sys\/kernel\/mm\/hugepages\n-  \/\/ to discover the available page sizes\n-  const char* sys_hugepages = \"\/sys\/kernel\/mm\/hugepages\";\n-\n-  DIR *dir = opendir(sys_hugepages);\n-  if (dir == NULL) {\n-    return _default_large_page_size;\n-  }\n-\n-  struct dirent *entry;\n-  size_t page_size;\n-  while ((entry = readdir(dir)) != NULL) {\n-    if (entry->d_type == DT_DIR &&\n-        sscanf(entry->d_name, \"hugepages-%zukB\", &page_size) == 1) {\n-      \/\/ The kernel is using kB, hotspot uses bytes\n-      if (large_page_size == page_size * K) {\n-        closedir(dir);\n-        return large_page_size;\n-      }\n-    }\n-  }\n-  closedir(dir);\n-  return _default_large_page_size;\n-}\n-\n@@ -3781,4 +3755,13 @@\n-\n-  if (!FLAG_IS_DEFAULT(LargePageSizeInBytes) && LargePageSizeInBytes != _default_large_page_size ) {\n-    _large_page_size = find_large_page_size(LargePageSizeInBytes);\n-    if (_large_page_size == _default_large_page_size) {\n+  \/\/ Scan '\/sys\/kernel\/mm\/hugepages' to setup large page sizes\n+  \/\/ using Linux::register_large_page_sizes()\n+  \/\/ put an entry in _page_sizes per large_page_sizes entry\n+  Linux::register_large_page_sizes();\n+\n+  if (!FLAG_IS_DEFAULT(LargePageSizeInBytes) && LargePageSizeInBytes != _default_large_page_size) {\n+    \/\/ Check that LargePageSizeInBytes was found in\n+    \/\/ '\/sys\/kernel\/mm\/hugepages' and is present in _page_sizes\n+    \/\/ Return LargePageSizeInBytes in positive case\n+    \/\/ and return _default_large_page_size in negative case\n+    if (os::page_sizes().contains(LargePageSizeInBytes)) {\n+      return LargePageSizeInBytes;\n+    } else {\n@@ -3790,2 +3773,0 @@\n-  } else {\n-    _large_page_size = _default_large_page_size;\n@@ -3793,10 +3774,1 @@\n-\n-  const size_t default_page_size = (size_t)Linux::page_size();\n-  if (_large_page_size > default_page_size) {\n-    \/\/ Scan '\/sys\/kernel\/mm\/hugepages' to setup large page sizes\n-    \/\/ using Linux::register_large_page_sizes()\n-    \/\/ put an entry in _page_sizes per large_page_sizes entry\n-    Linux::register_large_page_sizes();\n-  }\n-\n-  return _large_page_size;\n+  return _default_large_page_size;\n@@ -4034,1 +4006,1 @@\n-  size_t large_page_size = Linux::select_large_page_size(bytes);\n+  size_t large_page_size = os::page_size_for_region_aligned(bytes, 1);\n@@ -4071,1 +4043,1 @@\n-  size_t large_page_size = Linux::select_large_page_size(bytes);\n+  size_t large_page_size = os::page_size_for_region_aligned(bytes, 1);\n@@ -4159,1 +4131,1 @@\n-  size_t large_page_size = Linux::select_large_page_size(bytes);\n+  size_t large_page_size = os::page_size_for_region_aligned(bytes, 1);\n@@ -4221,9 +4193,0 @@\n-size_t os::Linux::select_large_page_size(size_t bytes) {\n-  for (size_t page_size = os::page_sizes().largest(); page_size != 0; page_size = os::page_sizes().next_smaller(page_size)) {\n-    if (page_size <= bytes) {\n-      return page_size;\n-    }\n-  }\n-  return (size_t)Linux::page_size();\n-}\n-\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":21,"deletions":58,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -83,1 +83,0 @@\n-  static size_t find_large_page_size(size_t page_size);\n@@ -85,1 +84,0 @@\n-  static size_t select_large_page_size(size_t bytes);\n","filename":"src\/hotspot\/os\/linux\/os_linux.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}