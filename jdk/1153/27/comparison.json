{"files":[{"patch":"@@ -2344,0 +2344,3 @@\n+  st->print(\"Page Sizes: \");\n+  _page_sizes.print_on(st);\n+  st->cr();\n@@ -3576,5 +3579,2 @@\n-size_t os::Linux::find_default_large_page_size() {\n-  if (_default_large_page_size != 0) {\n-    return _default_large_page_size;\n-  }\n-  size_t large_page_size = 0;\n+static size_t scan_default_large_page_size() {\n+  size_t default_large_page_size = 0;\n@@ -3585,1 +3585,1 @@\n-  \/\/ page as large as 256M.\n+  \/\/ page as large as 1G.\n@@ -3592,13 +3592,1 @@\n-  \/\/ format has been changed), we'll use the largest page size supported by\n-  \/\/ the processor.\n-\n-#ifndef ZERO\n-  large_page_size =\n-    AARCH64_ONLY(2 * M)\n-    AMD64_ONLY(2 * M)\n-    ARM32_ONLY(2 * M)\n-    IA32_ONLY(4 * M)\n-    IA64_ONLY(256 * M)\n-    PPC_ONLY(4 * M)\n-    S390_ONLY(1 * M);\n-#endif \/\/ ZERO\n+  \/\/ format has been changed), we'll set largest page size to 0\n@@ -3613,2 +3601,2 @@\n-          large_page_size = x * K;\n-          break;\n+          default_large_page_size = x * K;\n+          return default_large_page_size;\n@@ -3626,1 +3614,2 @@\n-  return large_page_size;\n+\n+  return default_large_page_size;\n@@ -3629,5 +3618,2 @@\n-size_t os::Linux::find_large_page_size(size_t large_page_size) {\n-  if (_default_large_page_size == 0) {\n-    _default_large_page_size = Linux::find_default_large_page_size();\n-  }\n-  \/\/ We need to scan \/sys\/kernel\/mm\/hugepages\n+static os::PageSizes scan_multiple_page_support() {\n+  \/\/ Scan \/sys\/kernel\/mm\/hugepages\n@@ -3636,0 +3622,1 @@\n+  static os::PageSizes page_sizes;\n@@ -3638,3 +3625,0 @@\n-  if (dir == NULL) {\n-    return _default_large_page_size;\n-  }\n@@ -3648,4 +3632,2 @@\n-      if (large_page_size == page_size * K) {\n-        closedir(dir);\n-        return large_page_size;\n-      }\n+      \/\/ Add each found Large Page Size to page_sizes\n+      page_sizes.add(page_size * K);\n@@ -3655,24 +3637,1 @@\n-  return _default_large_page_size;\n-}\n-\n-size_t os::Linux::setup_large_page_size() {\n-  _default_large_page_size = Linux::find_default_large_page_size();\n-\n-  if (!FLAG_IS_DEFAULT(LargePageSizeInBytes) && LargePageSizeInBytes != _default_large_page_size ) {\n-    _large_page_size = find_large_page_size(LargePageSizeInBytes);\n-    if (_large_page_size == _default_large_page_size) {\n-      warning(\"Setting LargePageSizeInBytes=\" SIZE_FORMAT \" has no effect on this OS. Using the default large page size \"\n-              SIZE_FORMAT \"%s.\",\n-              LargePageSizeInBytes,\n-              byte_size_in_proper_unit(_large_page_size), proper_unit_for_byte_size(_large_page_size));\n-    }\n-  } else {\n-    _large_page_size = _default_large_page_size;\n-  }\n-\n-  const size_t default_page_size = (size_t)Linux::page_size();\n-  if (_large_page_size > default_page_size) {\n-    _page_sizes.add(_large_page_size);\n-  }\n-\n-  return _large_page_size;\n+  return page_sizes;\n@@ -3734,0 +3693,2 @@\n+  \/\/ 1) Handle the case where we do not want to use huge pages and hence\n+  \/\/    there is no need to scan the OS for related info\n@@ -3751,2 +3712,50 @@\n-  size_t large_page_size = Linux::setup_large_page_size();\n-  UseLargePages          = Linux::setup_large_page_type(large_page_size);\n+  \/\/ 2) Scan OS info\n+  size_t default_large_page_size = scan_default_large_page_size();\n+  os::Linux::_default_large_page_size = default_large_page_size;\n+  if (default_large_page_size == 0) {\n+    \/\/ No large pages configured, return.\n+    UseTransparentHugePages = false;\n+    UseHugeTLBFS = false;\n+    UseSHM = false;\n+    return;\n+  }\n+  os::PageSizes all_large_pages = scan_multiple_page_support();\n+\n+  \/\/ 3) Consistency check and post-processing\n+\n+  \/\/ It is unclear if \/sys\/kernel\/mm\/hugepages\/ and \/proc\/meminfo could disagree. Manually\n+  \/\/ re-add the default page size to the list of page sizes to be sure.\n+  all_large_pages.add(default_large_page_size);\n+\n+  \/\/ Populate large page sizes to _page_sizes\n+  for (size_t page_size = all_large_pages.largest(); page_size != 0;\n+         page_size = all_large_pages.next_smaller(page_size)) {\n+    _page_sizes.add(page_size);\n+  }\n+\n+  LogTarget(Info, pagesize) lt;\n+  if (lt.is_enabled()) {\n+    LogStream ls(lt);\n+    ls.print(\"Available page sizes: \");\n+    _page_sizes.print_on(&ls);\n+  }\n+\n+  \/\/ Handle LargePageSizeInBytes\n+  if (!FLAG_IS_DEFAULT(LargePageSizeInBytes) && LargePageSizeInBytes != default_large_page_size) {\n+    if (all_large_pages.contains(LargePageSizeInBytes)) {\n+      _large_page_size = LargePageSizeInBytes;\n+      log_info(os)(\"Overriding default large page size using LargePageSizeInBytes\");\n+    } else {\n+      _large_page_size = default_large_page_size;\n+      warning(\"Setting LargePageSizeInBytes=\" SIZE_FORMAT \" has no effect on this OS. Using the default large page size \"\n+              SIZE_FORMAT \"%s.\",\n+              LargePageSizeInBytes,\n+              byte_size_in_proper_unit(_large_page_size), proper_unit_for_byte_size(_large_page_size));\n+\n+    }\n+  } else {\n+      _large_page_size = default_large_page_size;\n+  }\n+\n+  \/\/ Now determine the type of large pages to use:\n+  UseLargePages = os::Linux::setup_large_page_type(_large_page_size);\n@@ -3957,0 +3966,9 @@\n+  \/\/ Select large_page_size from _page_sizes\n+  \/\/ that is smaller than size_t bytes\n+  size_t large_page_size = os::page_size_for_region_aligned(bytes, 1);\n+\n+  assert(large_page_size > (size_t)os::vm_page_size(), \"large page size: \"\n+                                                        SIZE_FORMAT \" not larger than small page size: \"\n+                                                        SIZE_FORMAT,\n+                                                        large_page_size,\n+                                                        (size_t)os::vm_page_size());\n@@ -3959,1 +3977,1 @@\n-  assert(is_aligned(req_addr, os::large_page_size()), \"Must be\");\n+  assert(is_aligned(req_addr, large_page_size), \"Must be\");\n@@ -3961,2 +3979,2 @@\n-  assert(is_power_of_2(os::large_page_size()), \"Must be\");\n-  assert(bytes >= os::large_page_size(), \"Shouldn't allocate large pages for small sizes\");\n+  assert(is_power_of_2(large_page_size), \"Must be\");\n+  assert(bytes >= large_page_size, \"Shouldn't allocate large pages for small sizes\");\n@@ -3972,1 +3990,1 @@\n-  size_t required_alignment = MAX(os::large_page_size(), alignment);\n+  size_t required_alignment = MAX(large_page_size, alignment);\n@@ -3979,2 +3997,2 @@\n-  size_t large_bytes = align_down(bytes, os::large_page_size());\n-  bool large_committed = commit_memory_special(large_bytes, os::large_page_size(), aligned_start, exec);\n+  size_t large_bytes = align_down(bytes, large_page_size);\n+  bool large_committed = commit_memory_special(large_bytes, large_page_size, aligned_start, exec);\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":84,"deletions":66,"binary":false,"changes":150,"status":"modified"},{"patch":"@@ -81,3 +81,2 @@\n-  static size_t find_default_large_page_size();\n-  static size_t find_large_page_size(size_t page_size);\n-  static size_t setup_large_page_size();\n+  static size_t scan_default_large_page_size();\n+  static os::PageSizes scan_multiple_page_support();\n","filename":"src\/hotspot\/os\/linux\/os_linux.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1481,1 +1481,1 @@\n-      if (page_size <= max_page_size) {\n+      if (page_size <= max_page_size && page_size > (size_t)vm_page_size()) {\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}