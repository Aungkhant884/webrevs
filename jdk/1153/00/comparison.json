{"files":[{"patch":"@@ -3788,0 +3788,1 @@\n+  const size_t exec_large_page_size = (size_t)os::exec_large_page_size();\n@@ -3790,2 +3791,3 @@\n-    _page_sizes[1] = default_page_size;\n-    _page_sizes[2] = 0;\n+    _page_sizes[1] = exec_large_page_size < _large_page_size ? exec_large_page_size : default_page_size;\n+    _page_sizes[2] = exec_large_page_size < _large_page_size ? default_page_size : 0;\n+    _page_sizes[3] = 0;\n@@ -3884,0 +3886,7 @@\n+#define shm_warning_format_with_errno(format, msg, ...) \\\n+  do {                                                  \\\n+    int err = errno;                                    \\\n+    shm_warning_format(format \" (error = %d)\", msg,     \\\n+    err);                                               \\\n+  } while (0)\n+\n@@ -3960,0 +3969,3 @@\n+  size_t large_page_size;\n+  large_page_size = os::select_large_page_size(bytes, exec);\n+\n@@ -3963,1 +3975,1 @@\n-  assert(is_aligned(req_addr, os::large_page_size()), \"Unaligned address\");\n+  assert(is_aligned(req_addr, large_page_size), \"Unaligned address\");\n@@ -3966,1 +3978,1 @@\n-  if (!is_aligned(bytes, os::large_page_size())) {\n+  if (!is_aligned(bytes, large_page_size)) {\n@@ -3988,1 +4000,3 @@\n-    shm_warning_with_errno(\"Failed to reserve shared memory.\");\n+    char msg[128];\n+    jio_snprintf(msg, sizeof(msg), \"Failed to reserve shared memory with large_page_size: \" SIZE_FORMAT \".\", large_page_size);\n+    shm_warning_format_with_errno(\"%s\", msg);\n@@ -4005,1 +4019,1 @@\n-                                        int error) {\n+                                        size_t large_page_sz, int error) {\n@@ -4015,2 +4029,2 @@\n-    jio_snprintf(msg, sizeof(msg), \"Failed to reserve large pages memory req_addr: \"\n-                 PTR_FORMAT \" bytes: \" SIZE_FORMAT \" (errno = %d).\", req_addr, bytes, error);\n+    jio_snprintf(msg, sizeof(msg), \"Failed to reserve memory with large_page_size: \" SIZE_FORMAT \"' req_addr: \"\n+                 PTR_FORMAT \" bytes: \" SIZE_FORMAT \" (errno = %d).\", large_page_sz, req_addr, bytes, error);\n@@ -4024,0 +4038,3 @@\n+  size_t large_page_size;\n+  large_page_size = os::select_large_page_size(bytes, exec);\n+\n@@ -4025,2 +4042,2 @@\n-  assert(is_aligned(bytes, os::large_page_size()), \"Unaligned size\");\n-  assert(is_aligned(req_addr, os::large_page_size()), \"Unaligned address\");\n+  assert(is_aligned(bytes, large_page_size), \"Unaligned size\");\n+  assert(is_aligned(req_addr, large_page_size), \"Unaligned address\");\n@@ -4031,2 +4048,2 @@\n-  if (os::large_page_size() != default_large_page_size()) {\n-    flags |= (exact_log2(os::large_page_size()) << MAP_HUGE_SHIFT);\n+  if (large_page_size != default_large_page_size()) {\n+    flags |= (exact_log2(large_page_size) << MAP_HUGE_SHIFT);\n@@ -4037,1 +4054,1 @@\n-    warn_on_large_pages_failure(req_addr, bytes, errno);\n+    warn_on_large_pages_failure(req_addr, bytes, large_page_size, errno);\n@@ -4041,1 +4058,1 @@\n-  assert(is_aligned(addr, os::large_page_size()), \"Must be\");\n+  assert(is_aligned(addr, large_page_size), \"Must be\");\n@@ -4057,1 +4074,3 @@\n-  size_t large_page_size = os::large_page_size();\n+  size_t large_page_size;\n+  large_page_size = os::select_large_page_size(bytes, exec);\n+\n@@ -4105,2 +4124,2 @@\n-  if (os::large_page_size() != default_large_page_size()) {\n-    flags |= (exact_log2(os::large_page_size()) << MAP_HUGE_SHIFT);\n+  if (large_page_size != default_large_page_size()) {\n+    flags |= (exact_log2(large_page_size) << MAP_HUGE_SHIFT);\n@@ -4111,1 +4130,1 @@\n-    warn_on_large_pages_failure(lp_start, lp_bytes, errno);\n+    warn_on_large_pages_failure(lp_start, lp_bytes, large_page_size, errno);\n@@ -4142,0 +4161,3 @@\n+  size_t large_page_size;\n+  large_page_size = os::select_large_page_size(bytes, exec);\n+\n@@ -4145,2 +4167,2 @@\n-  assert(is_power_of_2(os::large_page_size()), \"Must be\");\n-  assert(bytes >= os::large_page_size(), \"Shouldn't allocate large pages for small sizes\");\n+  assert(is_power_of_2(large_page_size), \"Must be\");\n+  assert(bytes >= large_page_size, \"Shouldn't allocate large pages for small sizes\");\n@@ -4148,1 +4170,1 @@\n-  if (is_aligned(bytes, os::large_page_size()) && alignment <= os::large_page_size()) {\n+  if (is_aligned(bytes, large_page_size) && alignment <= large_page_size) {\n@@ -4202,0 +4224,19 @@\n+size_t os::exec_large_page_size() {\n+  size_t exec_large_page_size = 2 * M;\n+  return exec_large_page_size;\n+}\n+\n+size_t os::select_large_page_size(size_t bytes, bool exec) {\n+  if (exec){\n+    return os::exec_large_page_size();\n+  } else {\n+    for (size_t i = 0; _page_sizes[i] != 0; ++i) {\n+      const size_t page_size = _page_sizes[i];\n+      if (page_size <= bytes) {\n+        return page_size;\n+      }\n+    }\n+  return (size_t)Linux::page_size();\n+  }\n+}\n+\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":62,"deletions":21,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -412,0 +412,2 @@\n+  static size_t exec_large_page_size();\n+  static size_t select_large_page_size(size_t bytes, bool exec);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,0 +39,2 @@\n+import java.io.File;\n+import java.util.Scanner;\n@@ -49,0 +51,1 @@\n+    static long largePageExecSize;\n@@ -77,1 +80,1 @@\n-    static void testVM(String what, long heapsize, boolean cardsShouldUseLargePages, boolean bitmapShouldUseLargePages) throws Exception {\n+    static void testVM(String what, long heapsize, boolean cardsShouldUseLargePages, boolean bitmapShouldUseLargePages, boolean largePages2m) throws Exception {\n@@ -92,2 +95,2 @@\n-        checkSmallTables(output, (cardsShouldUseLargePages ? largePageSize : smallPageSize));\n-        checkBitmaps(output, (bitmapShouldUseLargePages ? largePageSize : smallPageSize));\n+        checkSmallTables(output, (cardsShouldUseLargePages ? largePageSize : (largePages2m ? largePageExecSize : smallPageSize)));\n+        checkBitmaps(output, (bitmapShouldUseLargePages ? largePageSize : (largePages2m ? largePageExecSize : smallPageSize)));\n@@ -131,0 +134,1 @@\n+        largePageExecSize = 2097152;\n@@ -133,0 +137,1 @@\n+        boolean largePages2m = false;\n@@ -142,0 +147,11 @@\n+\n+        if (Platform.isLinux() && largePageSize != largePageExecSize) {\n+            try {\n+                Scanner scan_hugepages = new Scanner(new File(\"\/sys\/kernel\/mm\/hugepages\/hugepages-2048kB\/nr_hugepages\"));\n+\n+                if (scan_hugepages.nextLine() != \"0\") { largePages2m = true; }\n+            } catch (Exception exc) {\n+                \/\/ Ignore\n+            }\n+        }\n+\n@@ -151,3 +167,7 @@\n-            testVM(\"case1: card table and bitmap use large pages (barely)\", heapSizeForCardTableUsingLargePages, true, true);\n-            testVM(\"case2: card table and bitmap use large pages (extra slack)\", heapSizeForCardTableUsingLargePages + heapSizeDiffForCardTable, true, true);\n-            testVM(\"case3: only bitmap uses large pages (barely not)\", heapSizeForCardTableUsingLargePages - heapSizeDiffForCardTable, false, true);\n+            testVM(\"case1: card table and bitmap use large pages (barely)\", heapSizeForCardTableUsingLargePages, true, true, largePages2m);\n+            testVM(\"case2: card table and bitmap use large pages (extra slack)\", heapSizeForCardTableUsingLargePages + heapSizeDiffForCardTable, true, true, largePages2m);\n+            if (largePages2m) {\n+                testVM(\"case3: card table and bitmap use large pages\", heapSizeForCardTableUsingLargePages - heapSizeDiffForCardTable, false, true, largePages2m);\n+            } else {\n+                testVM(\"case3: only bitmap uses large pages (barely not)\", heapSizeForCardTableUsingLargePages - heapSizeDiffForCardTable, false, true, largePages2m);\n+            }\n@@ -166,3 +186,9 @@\n-        testVM(\"case4: only bitmap uses large pages (barely)\", heapSizeForBitmapUsingLargePages, false, true);\n-        testVM(\"case5: only bitmap uses large pages (extra slack)\", heapSizeForBitmapUsingLargePages + heapSizeDiffForBitmap, false, true);\n-        testVM(\"case6: nothing uses large pages (barely not)\", heapSizeForBitmapUsingLargePages - heapSizeDiffForBitmap, false, false);\n+        if (largePages2m) {\n+            testVM(\"case4: card table and bitmap use large pages 2m\", heapSizeForBitmapUsingLargePages, false, true, largePages2m);\n+            testVM(\"case5: card table and bitmap use large pages 2m\", heapSizeForBitmapUsingLargePages + heapSizeDiffForBitmap, false, true, largePages2m);\n+            testVM(\"case6: nothing uses large pages (barely not)\", heapSizeForBitmapUsingLargePages - heapSizeDiffForBitmap, false, false, largePages2m);\n+        } else {\n+            testVM(\"case4: card table and bitmap use large pages (barely)\", heapSizeForBitmapUsingLargePages, false, true, largePages2m);\n+            testVM(\"case5: card table and bitmap use large pages (extra slack)\", heapSizeForBitmapUsingLargePages + heapSizeDiffForBitmap, false, true, largePages2m);\n+            testVM(\"case6: nothing uses large pages (barely not)\", heapSizeForBitmapUsingLargePages - heapSizeDiffForBitmap, false, false, largePages2m);\n+        }\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestLargePageUseForAuxMemory.java","additions":35,"deletions":9,"binary":false,"changes":44,"status":"modified"}]}