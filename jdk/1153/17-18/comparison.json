{"files":[{"patch":"@@ -2389,0 +2389,6 @@\n+\n+  st->print(\"%ldk default large page\", os::large_page_size()>>10);\n+  st->cr();\n+  st->print(\"Page Sizes: \");\n+  _page_sizes.print_on(st);\n+  st->cr();\n@@ -3640,1 +3646,1 @@\n-  size_t large_page_size = 0;\n+  size_t default_large_page_size = 0;\n@@ -3645,1 +3651,1 @@\n-  \/\/ page as large as 256M.\n+  \/\/ page as large as 1G.\n@@ -3652,2 +3658,1 @@\n-  \/\/ format has been changed), we'll use the largest page size supported by\n-  \/\/ the processor.\n+  \/\/ format has been changed), we'll set largest page size to 0\n@@ -3662,2 +3667,2 @@\n-          large_page_size = x * K;\n-          break;\n+          default_large_page_size = x * K;\n+          return default_large_page_size;\n@@ -3675,1 +3680,2 @@\n-  return large_page_size;\n+\n+  return default_large_page_size;\n@@ -3753,1 +3759,0 @@\n-  size_t large_page_size = 0;\n@@ -3784,1 +3789,12 @@\n-  os::PageSizes all_pages = scan_multiple_page_support();\n+  os::PageSizes all_large_pages = scan_multiple_page_support();\n+\n+  \/\/ 3) Consistency check and post-processing\n+\n+  \/\/ It is unclear if \/sys\/kernel\/mm\/hugepages\/ and \/proc\/meminfo could disagree. Manually\n+  \/\/ re-add the default page size to the list of page sizes to be sure.\n+  all_large_pages.add(default_large_page_size);\n+\n+  for (size_t page_size = all_large_pages.largest(); page_size != 0;\n+         page_size = all_large_pages.next_smaller(page_size)) {\n+    _page_sizes.add(page_size);\n+  }\n@@ -3790,1 +3806,4 @@\n-    all_pages.print_on(&ls);\n+    _page_sizes.print_on(&ls);\n+    ls.print(\"\\n\");\n+    ls.print(\"Available large page sizes: \");\n+    all_large_pages.print_on(&ls);\n@@ -3793,6 +3812,0 @@\n-  \/\/ 3) Consistency check and post-processing\n-\n-  \/\/ It is unclear if \/sys\/kernel\/mm\/hugepages\/ and \/proc\/meminfo could disagree. Manually\n-  \/\/ re-add the default page size to the list of page sizes to be sure.\n-  all_pages.add(default_large_page_size);\n-\n@@ -3801,2 +3814,2 @@\n-    if (all_pages.contains(LargePageSizeInBytes)) {\n-      large_page_size = LargePageSizeInBytes;\n+    if (all_large_pages.contains(LargePageSizeInBytes)) {\n+      _large_page_size = LargePageSizeInBytes;\n@@ -3805,1 +3818,1 @@\n-      large_page_size = default_large_page_size;\n+      _large_page_size = default_large_page_size;\n@@ -3809,1 +3822,1 @@\n-              byte_size_in_proper_unit(large_page_size), proper_unit_for_byte_size(large_page_size));\n+              byte_size_in_proper_unit(_large_page_size), proper_unit_for_byte_size(_large_page_size));\n@@ -3813,1 +3826,1 @@\n-      large_page_size = default_large_page_size;\n+      _large_page_size = default_large_page_size;\n@@ -3817,1 +3830,1 @@\n-  UseLargePages = os::Linux::setup_large_page_type(large_page_size);\n+  UseLargePages = os::Linux::setup_large_page_type(_large_page_size);\n@@ -3990,1 +4003,11 @@\n-  assert(large_page_size > (size_t)os::vm_page_size, \"large page size not larger than small page size\");\n+  LogTarget(Info, pagesize) lt;\n+  if (lt.is_enabled()) {\n+    LogStream ls(lt);\n+    ls.print(\"Large page size returned from os::page_size_for_region_aligned: %ld, for bytes: %ld\", large_page_size, bytes);\n+    ls.print(\"\\n\");\n+    ls.print(\"Page size returned from (size_t)os::vm_page_size(): %ld\", (size_t)os::vm_page_size());\n+    ls.print(\"\\n\");\n+    os::print_memory_info(&ls);\n+  }\n+\n+  assert(large_page_size > (size_t)os::vm_page_size(), \"large page size: %ld not larger than small page size: %ld\", large_page_size, (size_t)os::vm_page_size());\n@@ -4025,1 +4048,10 @@\n-  size_t large_page_size = os::page_size_for_region_unaligned(bytes, 1);\n+  size_t large_page_size = os::page_size_for_region_aligned(bytes, 1);\n+  LogTarget(Info, pagesize) lt;\n+  if (lt.is_enabled()) {\n+    LogStream ls(lt);\n+    ls.print(\"Large page size returned from os::page_size_for_region_aligned: %ld, for bytes: %ld\", large_page_size, bytes);\n+    ls.print(\"\\n\");\n+    ls.print(\"Page size returned from (size_t)os::vm_page_size(): %ld\", (size_t)os::vm_page_size());\n+    ls.print(\"\\n\");\n+    os::print_memory_info(&ls);\n+  }\n@@ -4027,1 +4059,1 @@\n-  assert(large_page_size > (size_t)os::vm_page_size, \"large page size not larger than small page size\");\n+  assert(large_page_size > (size_t)os::vm_page_size(), \"large page size: %ld not larger than small page size: %ld\", large_page_size, (size_t)os::vm_page_size());\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":57,"deletions":25,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -1476,1 +1476,1 @@\n-      if (page_size <= max_page_size) {\n+      if (page_size <= max_page_size && page_size > (size_t)vm_page_size()) {\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}