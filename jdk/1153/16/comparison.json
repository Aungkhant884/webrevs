{"files":[{"patch":"@@ -3661,5 +3661,2 @@\n-size_t os::Linux::find_large_page_size(size_t large_page_size) {\n-  if (_default_large_page_size == 0) {\n-    _default_large_page_size = Linux::find_default_large_page_size();\n-  }\n-  \/\/ We need to scan \/sys\/kernel\/mm\/hugepages\n+void os::Linux::register_large_page_sizes() {\n+  \/\/ Scan \/sys\/kernel\/mm\/hugepages\n@@ -3671,1 +3668,3 @@\n-    return _default_large_page_size;\n+    \/\/ If we can't open \/sys\/kernel\/mm\/hugepages\n+    \/\/ Add _default_large_page_size to _page_sizes\n+    _page_sizes.add(_default_large_page_size);\n@@ -3680,3 +3679,3 @@\n-      if (large_page_size == page_size * K) {\n-        closedir(dir);\n-        return large_page_size;\n+      if (page_size * K > (size_t)Linux::page_size()) {\n+          \/\/ Add each found Large Page Size to _page_sizes\n+          _page_sizes.add(page_size * K);\n@@ -3687,1 +3686,7 @@\n-  return _default_large_page_size;\n+\n+  LogTarget(Info, pagesize) lt;\n+  if (lt.is_enabled()) {\n+    LogStream ls(lt);\n+    ls.print(\"Available page sizes: \");\n+    _page_sizes.print_on(&ls);\n+  }\n@@ -3692,4 +3697,15 @@\n-\n-  if (!FLAG_IS_DEFAULT(LargePageSizeInBytes) && LargePageSizeInBytes != _default_large_page_size ) {\n-    _large_page_size = find_large_page_size(LargePageSizeInBytes);\n-    if (_large_page_size == _default_large_page_size) {\n+  _large_page_size = _default_large_page_size;\n+  \/\/ Scan '\/sys\/kernel\/mm\/hugepages' to setup large page sizes\n+  \/\/ using Linux::register_large_page_sizes()\n+  \/\/ put an entry in _page_sizes per large_page_sizes entry\n+  Linux::register_large_page_sizes();\n+\n+  if (!FLAG_IS_DEFAULT(LargePageSizeInBytes) && LargePageSizeInBytes != _default_large_page_size) {\n+    \/\/ Check that LargePageSizeInBytes was found in\n+    \/\/ '\/sys\/kernel\/mm\/hugepages' and is present in _page_sizes\n+    \/\/ Return LargePageSizeInBytes in positive case\n+    \/\/ and return _default_large_page_size in negative case\n+    if (os::page_sizes().contains(LargePageSizeInBytes)) {\n+      _large_page_size = LargePageSizeInBytes;\n+      return _large_page_size;\n+    } else {\n@@ -3700,4 +3716,0 @@\n-    }\n-  } else {\n-    _large_page_size = _default_large_page_size;\n-  }\n@@ -3705,3 +3717,1 @@\n-  const size_t default_page_size = (size_t)Linux::page_size();\n-  if (_large_page_size > default_page_size) {\n-    _page_sizes.add(_large_page_size);\n+    }\n@@ -3709,1 +3719,0 @@\n-\n@@ -3921,1 +3930,1 @@\n-                                        int error) {\n+                                        size_t large_page_sz, int error) {\n@@ -3931,2 +3940,2 @@\n-    jio_snprintf(msg, sizeof(msg), \"Failed to reserve large pages memory req_addr: \"\n-                 PTR_FORMAT \" bytes: \" SIZE_FORMAT \" (errno = %d).\", req_addr, bytes, error);\n+    jio_snprintf(msg, sizeof(msg), \"Failed to reserve memory with large_page_size: \" SIZE_FORMAT \" req_addr: \"\n+                 PTR_FORMAT \" bytes: \" SIZE_FORMAT \" (errno = %d).\", large_page_sz, req_addr, bytes, error);\n@@ -3940,0 +3949,5 @@\n+  \/\/ Select large_page_size from _page_sizes\n+  \/\/ that is smaller than size_t bytes\n+  size_t large_page_size = os::page_size_for_region_aligned(bytes, 1);\n+\n+  assert(large_page_size > (size_t)os::vm_page_size, \"large page size not larger than small page size\");\n@@ -3941,2 +3955,2 @@\n-  assert(is_aligned(bytes, os::large_page_size()), \"Unaligned size\");\n-  assert(is_aligned(req_addr, os::large_page_size()), \"Unaligned address\");\n+  assert(is_aligned(bytes, large_page_size), \"Unaligned size\");\n+  assert(is_aligned(req_addr, large_page_size), \"Unaligned address\");\n@@ -3947,2 +3961,2 @@\n-  if (os::large_page_size() != default_large_page_size()) {\n-    flags |= (exact_log2(os::large_page_size()) << MAP_HUGE_SHIFT);\n+  if (large_page_size != default_large_page_size()) {\n+    flags |= (exact_log2(large_page_size) << MAP_HUGE_SHIFT);\n@@ -3953,1 +3967,1 @@\n-    warn_on_large_pages_failure(req_addr, bytes, errno);\n+    warn_on_large_pages_failure(req_addr, bytes, large_page_size, errno);\n@@ -3957,1 +3971,1 @@\n-  assert(is_aligned(addr, os::large_page_size()), \"Must be\");\n+  assert(is_aligned(addr, large_page_size), \"Must be\");\n@@ -3973,1 +3987,5 @@\n-  size_t large_page_size = os::large_page_size();\n+  \/\/ Select large_page_size from _page_sizes\n+  \/\/ that is smaller than size_t bytes\n+  size_t large_page_size = os::page_size_for_region_unaligned(bytes, 1);\n+\n+  assert(large_page_size > (size_t)os::vm_page_size, \"large page size not larger than small page size\");\n@@ -4021,2 +4039,2 @@\n-  if (os::large_page_size() != default_large_page_size()) {\n-    flags |= (exact_log2(os::large_page_size()) << MAP_HUGE_SHIFT);\n+  if (large_page_size != default_large_page_size()) {\n+    flags |= (exact_log2(large_page_size) << MAP_HUGE_SHIFT);\n@@ -4027,1 +4045,1 @@\n-    warn_on_large_pages_failure(lp_start, lp_bytes, errno);\n+    warn_on_large_pages_failure(lp_start, lp_bytes, large_page_size, errno);\n@@ -4058,0 +4076,4 @@\n+  \/\/ Select large_page_size from _page_sizes\n+  \/\/ that is smaller than size_t bytes\n+  size_t large_page_size = os::page_size_for_region_unaligned(bytes, 1);\n+\n@@ -4061,2 +4083,2 @@\n-  assert(is_power_of_2(os::large_page_size()), \"Must be\");\n-  assert(bytes >= os::large_page_size(), \"Shouldn't allocate large pages for small sizes\");\n+  assert(is_power_of_2(large_page_size), \"Must be\");\n+  assert(bytes >= large_page_size, \"Shouldn't allocate large pages for small sizes\");\n@@ -4064,1 +4086,1 @@\n-  if (is_aligned(bytes, os::large_page_size()) && alignment <= os::large_page_size()) {\n+  if (is_aligned(bytes, large_page_size) && alignment <= large_page_size) {\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":60,"deletions":38,"binary":false,"changes":98,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-  static size_t find_large_page_size(size_t page_size);\n+  static void register_large_page_sizes();\n","filename":"src\/hotspot\/os\/linux\/os_linux.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}