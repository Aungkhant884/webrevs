{"files":[{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.event.profiling;\n+\n+import java.time.Duration;\n+\n+import jdk.jfr.Recording;\n+import jdk.jfr.consumer.RecordingStream;\n+import jdk.jfr.internal.JVM;\n+import jdk.test.lib.jfr.EventNames;\n+\n+\/*\n+ * @test\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib\n+ * @modules jdk.jfr\/jdk.jfr.internal\n+ * @run main jdk.jfr.event.profiling.TestNative\n+ *\/\n+public class TestNative {\n+\n+    final static String NATIVE_EVENT = EventNames.NativeMethodSample;\n+\n+    static volatile boolean alive = true;\n+\n+    public static void main(String[] args) throws Exception {\n+        try (RecordingStream rs = new RecordingStream()) {\n+            rs.enable(NATIVE_EVENT).withPeriod(Duration.ofMillis(1));\n+            rs.onEvent(NATIVE_EVENT, e -> {\n+                alive = false;\n+                rs.close();\n+            });\n+            Thread t = new Thread(TestNative::nativeMethod);\n+            t.setDaemon(true);\n+            t.start();\n+            rs.start();\n+        }\n+\n+    }\n+\n+    public static void nativeMethod() {\n+        while (alive) {\n+            JVM.getJVM().getPid();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/event\/profiling\/TestNative.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.event.profiling;\n+\n+import java.time.Duration;\n+\n+import jdk.jfr.consumer.RecordingStream;\n+import jdk.test.lib.jfr.EventNames;\n+import jdk.test.lib.jfr.RecurseThread;\n+\n+\/*\n+ * @test\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib\n+ * @modules jdk.jfr\/jdk.jfr.internal\n+ * @run main jdk.jfr.event.profiling.TestSamplingLongPeriod\n+ *\/\n+public class TestSamplingLongPeriod {\n+\n+    final static String SAMPLE_EVENT = EventNames.ExecutionSample;\n+\n+    \/\/ The period is set to 1100 ms to provoke the 1000 ms\n+    \/\/ threshold in the JVM for os::naked_short_sleep().\n+    public static void main(String[] args) throws Exception {\n+        RecurseThread t = new RecurseThread(50);\n+        t.setDaemon(true);\n+        try (RecordingStream rs = new RecordingStream()) {\n+            rs.enable(SAMPLE_EVENT).withPeriod(Duration.ofMillis(1100));\n+            rs.onEvent(SAMPLE_EVENT, e -> {\n+                t.quit();\n+                rs.close();\n+            });\n+            t.start();\n+            rs.start();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/event\/profiling\/TestSamplingLongPeriod.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -1,74 +0,0 @@\n-\/*\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.jfr.event.sampling;\n-\n-import java.time.Duration;\n-import java.util.List;\n-import java.util.concurrent.Semaphore;\n-import java.util.concurrent.atomic.AtomicInteger;\n-\n-import jdk.jfr.Recording;\n-import jdk.jfr.consumer.RecordedFrame;\n-import jdk.jfr.consumer.RecordingStream;\n-import jdk.jfr.internal.JVM;\n-import jdk.test.lib.jfr.EventNames;\n-\n-\/*\n- * @test\n- * @key jfr\n- * @requires vm.hasJFR\n- * @library \/test\/lib\n- * @modules jdk.jfr\/jdk.jfr.internal\n- * @run main jdk.jfr.event.sampling.TestNative\n- *\/\n-public class TestNative {\n-\n-    final static String NATIVE_EVENT = EventNames.NativeMethodSample;\n-\n-    static volatile boolean alive = true;\n-\n-    \/\/ Please resist the temptation to speed up the test by decreasing\n-    \/\/ the period. It is explicity set to 1100 ms to provoke the 1000 ms\n-    \/\/ threshold in the JVM for os::naked_short_sleep().\n-    public static void main(String[] args) throws Exception {\n-        try (RecordingStream rs = new RecordingStream()) {\n-            rs.enable(NATIVE_EVENT).withPeriod(Duration.ofMillis(1100));\n-            rs.onEvent(NATIVE_EVENT, e -> {\n-                alive = false;\n-                rs.close();\n-            });\n-            Thread t = new Thread(TestNative::nativeMethod);\n-            t.setDaemon(true);\n-            t.start();\n-            rs.start();\n-        }\n-\n-    }\n-\n-    public static void nativeMethod() {\n-        while (alive) {\n-            JVM.getJVM().getPid();\n-        }\n-    }\n-}\n","filename":"test\/jdk\/jdk\/jfr\/event\/sampling\/TestNative.java","additions":0,"deletions":74,"binary":false,"changes":74,"status":"deleted"}]}