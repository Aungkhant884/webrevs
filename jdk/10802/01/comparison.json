{"files":[{"patch":"@@ -24,10 +24,4 @@\n-\/*\n- * @test\n- * @bug 8288882\n- * @library \/java\/awt\/regtesthelpers\n- * @build PassFailJFrame\n- * @requires (os.family == \"linux\")\n- * @summary To test if the 1-Empty-File size shows 0.0 KB and other files show correct size.\n- * @run main\/manual FileSizeCheck\n- *\/\n-\n+import java.awt.AWTException;\n+import java.awt.Component;\n+import java.awt.Container;\n+import java.awt.Robot;\n@@ -40,0 +34,4 @@\n+import java.util.Arrays;\n+import java.util.Locale;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Predicate;\n@@ -41,0 +39,1 @@\n+import javax.swing.AbstractButton;\n@@ -43,0 +42,3 @@\n+import javax.swing.JLabel;\n+import javax.swing.JTable;\n+import javax.swing.JToggleButton;\n@@ -46,0 +48,9 @@\n+\/*\n+ * @test\n+ * @bug 8288882\n+ * @key headful\n+ * @requires (os.family == \"linux\")\n+ * @summary Verifies if the size of an empty file is shown as 0.0 KB\n+ *          as well as checks the displayed file sizes are rounded up\n+ * @run main FileSizeCheck\n+ *\/\n@@ -47,23 +58,3 @@\n-    private static Path[] tempFilePaths;\n-    private static final String INSTRUCTIONS =\n-            \"Click on the \\\"Details\\\" button in right-top corner.\\n\\n\" +\n-                    \"Scroll Down if required. \\n\\n\" +\n-                    \"Test 1: If the size of 1st-Empty-File shows 0.0 KB\\n\" +\n-                    \"Test 2: If the size of 2nd-File-1-Byte shows 0.1 KB\\n\" +\n-                    \"Test 3: If the size of 3rd-File-160-Byte shows 0.2 KB\\n\" +\n-                    \"Test 3: If the size of 4th-File-299-Byte shows 0.3 KB\\n\" +\n-                    \"Test 4: If the size of 5th-File-900-Byte shows 0.9 KB\\n\" +\n-                    \"Test 6: If the size of 6th-File-901-Byte shows 1.0 KB\\n\" +\n-                    \"Test 7: If the size of 7th-File-999-KB shows 999.0 KB\\n\" +\n-                    \"Test 8: If the size of 8th-File-1000-KB shows 1.0 MB\\n\" +\n-                    \"Test 9: If the size of 9th-File-2.8-MB shows 2.8 MB\\n\\n\" +\n-                           \"press PASS.\\n\\n\";\n-\n-    public static void test() {\n-        JFrame frame = new JFrame(\"JFileChooser File Size test\");\n-        JFileChooser fc = new JFileChooser();\n-        fc.setControlButtonsAreShown(false);\n-        Path dir = Paths.get(\".\");\n-        String[] tempFilesName = {\"1st-Empty-File\", \"2nd-File-1-Byte\", \"3rd-File-160-Byte\",\n-                \"4th-File-299-Byte\", \"5th-File-900-Byte\", \"6th-File-901-Byte\",\n-                \"7th-File-999-KB\", \"8th-File-1000-KB\", \"9th-File-2.8-MB\"};\n+    private enum FileSize {\n+        F0(    0, \"0.0 KB\"),\n+        F1(    1, \"0.1 KB\"),\n@@ -71,1 +62,8 @@\n-        int[] tempFilesSize = {0, 1, 160, 299, 900, 901, 999_000, 1_000_000, 2_800_000};\n+        F99(  99, \"0.1 KB\"),\n+        F100(100, \"0.1 KB\"),\n+        F101(101, \"0.2 KB\"),\n+        F149(149, \"0.2 KB\"),\n+        F150(150, \"0.2 KB\"),\n+        F151(151, \"0.2 KB\"),\n+        F900(900, \"0.9 KB\"),\n+        F901(901, \"1.0 KB\"),\n@@ -73,3 +71,4 @@\n-        tempFilePaths = new Path[tempFilesName.length];\n-        PassFailJFrame.addTestWindow(frame);\n-        PassFailJFrame.positionTestWindow(frame, PassFailJFrame.Position.HORIZONTAL);\n+        F999_000(999_000, \"999.0 KB\"),\n+        F999_001(999_001, \"999.1 KB\"),\n+        F999_900(999_900, \"999.9 KB\"),\n+        F999_901(999_901,   \"1.0 MB\"),\n@@ -77,8 +76,32 @@\n-        \/\/ Create temp files\n-        try {\n-            for (int i = 0; i < tempFilePaths.length; i++) {\n-                tempFilePaths[i] = dir.resolve(tempFilesName[i]);\n-                if (!Files.exists(tempFilePaths[i])){\n-                    RandomAccessFile f = new RandomAccessFile(tempFilePaths[i].toFile(), \"rw\");\n-                    f.setLength(tempFilesSize[i]);\n-                    f.close();\n+        F1_000_000(1_000_000, \"1.0 MB\"),\n+        F1_000_001(1_000_001, \"1.1 MB\"),\n+        F1_000_900(1_000_900, \"1.1 MB\"),\n+        F1_001_000(1_001_000, \"1.1 MB\"),\n+        F1_100_000(1_100_000, \"1.1 MB\"),\n+        F1_100_001(1_100_001, \"1.2 MB\"),\n+\n+        F2_800_000(2_800_000, \"2.8 MB\"),\n+\n+\/\/        F1_000_000_000(1_000_000_000, \"1.0 GB\"),\n+\/\/        F1_000_000_001(1_000_000_001, \"1.1 GB\"),\n+        ;\n+\n+        public final String name;\n+        public final long size;\n+        public final String renderedSize;\n+\n+        private Path path;\n+\n+        FileSize(long size, String renderedSize) {\n+            this.name = String.format(\"%03d-%010d.test\", ordinal(), size);\n+            this.size = size;\n+            this.renderedSize = renderedSize;\n+        }\n+\n+        public void create(final Path parent) {\n+            path = parent.resolve(name);\n+            if (!Files.exists(path)) {\n+                try (var f = new RandomAccessFile(path.toFile(), \"rw\")) {\n+                    f.setLength(size);\n+                } catch (IOException e) {\n+                    throw new RuntimeException(e);\n@@ -87,3 +110,0 @@\n-            fc.setCurrentDirectory(dir.toFile());\n-        } catch (IOException ex) {\n-            throw new RuntimeException(ex);\n@@ -91,0 +111,28 @@\n+\n+        public void delete() {\n+            try {\n+                Files.deleteIfExists(path);\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+                \/\/ Don't propagate\n+            }\n+        }\n+    }\n+\n+    private static JFrame frame;\n+    private static JFileChooser fc;\n+\n+    private static final AtomicReference<String> error = new AtomicReference<>();\n+\n+    private static void createUI() {\n+        \/\/ Create temp files\n+        Path dir = Paths.get(\".\");\n+        Arrays.stream(FileSize.values())\n+              .forEach(f -> f.create(dir));\n+\n+        fc = new JFileChooser();\n+        fc.setControlButtonsAreShown(false);\n+        fc.setCurrentDirectory(dir.toFile());\n+\n+        frame = new JFrame(\"JFileChooser File Size test\");\n+        frame.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);\n@@ -93,0 +141,1 @@\n+        frame.setLocationRelativeTo(null);\n@@ -94,1 +143,6 @@\n-        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n+    }\n+\n+    private static void disposeUI() {\n+        if (frame != null) {\n+            frame.dispose();\n+        }\n@@ -98,3 +152,2 @@\n-            InvocationTargetException {\n-        PassFailJFrame passFailJFrame = new PassFailJFrame(\"JFileChooser Test Instructions\",\n-                INSTRUCTIONS, 5, 19, 35);\n+            InvocationTargetException, AWTException {\n+        Locale.setDefault(Locale.US);\n@@ -102,2 +155,14 @@\n-            SwingUtilities.invokeAndWait(FileSizeCheck::test);\n-            passFailJFrame.awaitAndCheck();\n+            final Robot robot = new Robot();\n+            SwingUtilities.invokeAndWait(FileSizeCheck::createUI);\n+\n+            robot.waitForIdle();\n+            robot.delay(500);\n+            SwingUtilities.invokeAndWait(FileSizeCheck::clickDetails);\n+\n+            robot.waitForIdle();\n+            robot.delay(500);\n+            SwingUtilities.invokeAndWait(FileSizeCheck::checkFileSizes);\n+\n+            if (error.get() != null) {\n+                throw new Error(error.get());\n+            }\n@@ -105,3 +170,22 @@\n-            try {\n-                for (int i = 0; i < tempFilePaths.length; ++i) {\n-                    Files.deleteIfExists(tempFilePaths[i]);\n+            Arrays.stream(FileSize.values())\n+                  .forEach(FileSize::delete);\n+\n+            SwingUtilities.invokeAndWait(FileSizeCheck::disposeUI);\n+        }\n+    }\n+\n+    private static void checkFileSizes() {\n+        final JTable table = findTable(fc);\n+        if (table == null) {\n+            throw new Error(\"Didn't find JTable in JFileChooser\");\n+        }\n+\n+        String firstError = null;\n+        int row = findFirstFileRow(table);\n+        for (FileSize f : FileSize.values()) {\n+            String fcSize = getCellRenderedText(table, row++, 1);\n+            if (!f.renderedSize.equals(fcSize)) {\n+                String errMsg = \"Wrong rendered size for \" + f + \": \"\n+                                + fcSize + \" vs. \" + f.renderedSize;\n+                if (firstError == null) {\n+                    firstError = errMsg;\n@@ -109,2 +193,1 @@\n-            } catch (IOException ex) {\n-                ex.printStackTrace();\n+                System.err.println(errMsg);\n@@ -113,0 +196,3 @@\n+        if (firstError != null) {\n+            error.set(firstError);\n+        }\n@@ -114,1 +200,0 @@\n-}\n@@ -116,0 +201,58 @@\n+    private static int findFirstFileRow(final JTable table) {\n+        for (int i = 0; i < table.getRowCount(); i++) {\n+            if (FileSize.F0.name.equals(getCellRenderedText(table, i, 0))) {\n+                return i;\n+            }\n+        }\n+        throw new Error(\"Didn't find the first file name in the table\");\n+    }\n+\n+    private static String getCellRenderedText(final JTable table,\n+                                              final int row,\n+                                              final int column) {\n+        Component renderer =\n+                table.getCellRenderer(row, column)\n+                     .getTableCellRendererComponent(table,\n+                                                    table.getValueAt(row, column),\n+                                                    false, false,\n+                                                    row, column);\n+        return ((JLabel) renderer).getText();\n+    }\n+\n+    private static void clickDetails() {\n+        AbstractButton details = findDetailsButton(fc);\n+        if (details == null) {\n+            throw new Error(\"Didn't find 'Details' button in JFileChooser\");\n+        }\n+        details.doClick();\n+    }\n+\n+    private static AbstractButton findDetailsButton(final Container container) {\n+        Component result = findComponent(container,\n+                c -> c instanceof JToggleButton button\n+                     && \"Details\".equals(button.getToolTipText()));\n+        return (AbstractButton) result;\n+    }\n+\n+    private static JTable findTable(final Container container) {\n+        Component result = findComponent(container,\n+                                         c -> c instanceof JTable);\n+        return (JTable) result;\n+    }\n+\n+    private static Component findComponent(final Container container,\n+                                           final Predicate<Component> predicate) {\n+        for (Component child : container.getComponents()) {\n+            if (predicate.test(child)) {\n+                return child;\n+            }\n+            if (child instanceof Container cont && cont.getComponentCount() > 0) {\n+                Component result = findComponent(cont, predicate);\n+                if (result != null) {\n+                    return result;\n+                }\n+            }\n+        }\n+        return null;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/FileSizeCheck.java","additions":203,"deletions":60,"binary":false,"changes":263,"status":"modified"}]}