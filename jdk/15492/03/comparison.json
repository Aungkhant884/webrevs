{"files":[{"patch":"@@ -141,0 +141,1 @@\n+  bool _vthread;\n@@ -143,1 +144,0 @@\n-  bool _vthread;\n@@ -168,2 +168,3 @@\n-    _cont_entry(JfrThreadLocal::is_vthread(jt) ? jt->last_continuation() : nullptr),\n-    _async_mode(async_mode), _vthread(JfrThreadLocal::is_vthread(jt)) {\n+    _vthread(JfrThreadLocal::is_vthread(jt)),\n+    _cont_entry(_vthread ? jt->last_continuation() : nullptr),\n+    _async_mode(async_mode) {\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stacktrace\/jfrStackTrace.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -398,1 +398,1 @@\n-  if (!t->is_Java_thread() || !Atomic::load_acquire(&tl->_vthread)) {\n+  if (!t->is_Java_thread()) {\n@@ -401,1 +401,0 @@\n-  \/\/ virtual thread\n@@ -403,0 +402,4 @@\n+  if (!is_vthread(jt)) {\n+    return jvm_thread_id(t, tl);\n+  }\n+  \/\/ virtual thread\n@@ -459,1 +462,1 @@\n-  return Atomic::load_acquire(&jt->jfr_thread_local()->_vthread);\n+  return Atomic::load_acquire(&jt->jfr_thread_local()->_vthread) && jt->last_continuation() != nullptr;\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrThreadLocal.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -197,1 +197,3 @@\n-     * Runs or continues execution of the continuation on the current thread.\n+     * Runs or continues execution on the current thread. The virtual thread is mounted\n+     * on the current thread before the task runs or continues. It unmounts when the\n+     * task completes or yields.\n@@ -199,0 +201,1 @@\n+    @ChangesCurrentThread\n@@ -220,0 +223,1 @@\n+        mount();\n@@ -223,0 +227,1 @@\n+            unmount();\n@@ -224,1 +229,1 @@\n-                afterTerminate();\n+                afterDone();\n@@ -288,3 +293,1 @@\n-     * Runs a task in the context of this virtual thread. The virtual thread is\n-     * mounted on the current (carrier) thread before the task runs. It unmounts\n-     * from its carrier thread when the task completes.\n+     * Runs a task in the context of this virtual thread.\n@@ -294,1 +297,1 @@\n-        assert state == RUNNING;\n+        assert Thread.currentThread() == this && state == RUNNING;\n@@ -296,2 +299,1 @@\n-        \/\/ first mount\n-        mount();\n+        \/\/ notify JVMTI, may post VirtualThreadStart event\n@@ -325,1 +327,1 @@\n-                \/\/ last unmount\n+                \/\/ notify JVMTI, may post VirtualThreadEnd event\n@@ -327,4 +329,0 @@\n-                unmount();\n-\n-                \/\/ final state\n-                setState(TERMINATED);\n@@ -420,3 +418,2 @@\n-     * Unmounts this virtual thread, invokes Continuation.yield, and re-mounts the\n-     * thread when continued. When enabled, JVMTI must be notified from this method.\n-     * @return true if the yield was successful\n+     * Invokes Continuation.yield, notifying JVMTI (if enabled) to hide frames until\n+     * the continuation continues.\n@@ -425,1 +422,0 @@\n-    @ChangesCurrentThread\n@@ -427,1 +423,0 @@\n-        \/\/ unmount\n@@ -429,1 +424,0 @@\n-        unmount();\n@@ -433,2 +427,0 @@\n-            \/\/ re-mount\n-            mount();\n@@ -480,2 +472,1 @@\n-     * Invoked after the thread terminates execution. It notifies anyone\n-     * waiting for the thread to terminate.\n+     * Invoked after the continuation completes.\n@@ -483,2 +474,2 @@\n-    private void afterTerminate() {\n-        afterTerminate(true, true);\n+    private void afterDone() {\n+        afterDone(true, true);\n@@ -488,2 +479,2 @@\n-     * Invoked after the thread terminates (or start failed). This method\n-     * notifies anyone waiting for the thread to terminate.\n+     * Invoked after the continuation completes (or start failed). Sets the thread\n+     * state to TERMINATED and notifies anyone waiting for the thread to terminate.\n@@ -494,2 +485,3 @@\n-    private void afterTerminate(boolean notifyContainer, boolean executed) {\n-        assert (state() == TERMINATED) && (carrierThread == null);\n+    private void afterDone(boolean notifyContainer, boolean executed) {\n+        assert carrierThread == null;\n+        setState(TERMINATED);\n@@ -549,2 +541,1 @@\n-                setState(TERMINATED);\n-                afterTerminate(addedToContainer, \/*executed*\/false);\n+                afterDone(addedToContainer, \/*executed*\/false);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/VirtualThread.java","additions":22,"deletions":31,"binary":false,"changes":53,"status":"modified"}]}