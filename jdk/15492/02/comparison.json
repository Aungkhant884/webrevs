{"files":[{"patch":"@@ -102,0 +102,4 @@\n+static bool is_vthread_in_transition(JavaThread* thread) {\n+  return JfrThreadLocal::is_vthread(thread) && (thread->last_continuation() == nullptr);\n+}\n+\n@@ -187,1 +191,1 @@\n-  if (!thread_state_in_java(jt)) {\n+  if (!thread_state_in_java(jt) || is_vthread_in_transition(jt)) {\n@@ -411,1 +415,1 @@\n-    if (thread_state_in_native(thread)) {\n+    if (thread_state_in_native(thread) && !is_vthread_in_transition(thread)) {\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrThreadSampler.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -170,1 +170,4 @@\n-  assert(!_vthread || _cont_entry != nullptr, \"invariant\");\n+  if (_vthread && _cont_entry == nullptr) {\n+    _mode = at_end_mode;\n+    return;\n+  }\n","filename":"src\/hotspot\/share\/jfr\/recorder\/stacktrace\/jfrStackTrace.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -197,1 +197,3 @@\n-     * Runs or continues execution of the continuation on the current thread.\n+     * Runs or continues execution on the current thread. The virtual thread is mounted\n+     * on the current thread before the task runs or continues. It unmounts when the\n+     * task completes or yields.\n@@ -199,0 +201,1 @@\n+    @ChangesCurrentThread\n@@ -220,0 +223,1 @@\n+        mount();\n@@ -223,0 +227,1 @@\n+            unmount();\n@@ -224,1 +229,1 @@\n-                afterTerminate();\n+                afterDone();\n@@ -288,3 +293,1 @@\n-     * Runs a task in the context of this virtual thread. The virtual thread is\n-     * mounted on the current (carrier) thread before the task runs. It unmounts\n-     * from its carrier thread when the task completes.\n+     * Runs a task in the context of this virtual thread.\n@@ -292,1 +295,0 @@\n-    @ChangesCurrentThread\n@@ -294,1 +296,1 @@\n-        assert state == RUNNING;\n+        assert Thread.currentThread() == this && state == RUNNING;\n@@ -296,2 +298,1 @@\n-        \/\/ first mount\n-        mount();\n+        \/\/ notify JVMTI, may post VirtualThreadStart event\n@@ -325,1 +326,1 @@\n-                \/\/ last unmount\n+                \/\/ notify JVMTI, may post VirtualThreadEnd event\n@@ -327,4 +328,0 @@\n-                unmount();\n-\n-                \/\/ final state\n-                setState(TERMINATED);\n@@ -420,3 +417,2 @@\n-     * Unmounts this virtual thread, invokes Continuation.yield, and re-mounts the\n-     * thread when continued. When enabled, JVMTI must be notified from this method.\n-     * @return true if the yield was successful\n+     * Invokes Continuation.yield, notifying JVMTI (if enabled) to hide frames until\n+     * the continuation continues.\n@@ -425,1 +421,0 @@\n-    @ChangesCurrentThread\n@@ -427,1 +422,0 @@\n-        \/\/ unmount\n@@ -429,1 +423,0 @@\n-        unmount();\n@@ -433,2 +426,0 @@\n-            \/\/ re-mount\n-            mount();\n@@ -480,2 +471,1 @@\n-     * Invoked after the thread terminates execution. It notifies anyone\n-     * waiting for the thread to terminate.\n+     * Invoked after the continuation completes.\n@@ -483,2 +473,2 @@\n-    private void afterTerminate() {\n-        afterTerminate(true, true);\n+    private void afterDone() {\n+        afterDone(true, true);\n@@ -488,2 +478,2 @@\n-     * Invoked after the thread terminates (or start failed). This method\n-     * notifies anyone waiting for the thread to terminate.\n+     * Invoked after the continuation completes (or start failed). Sets the thread\n+     * state to TERMINATED and notifies anyone waiting for the thread to terminate.\n@@ -494,2 +484,3 @@\n-    private void afterTerminate(boolean notifyContainer, boolean executed) {\n-        assert (state() == TERMINATED) && (carrierThread == null);\n+    private void afterDone(boolean notifyContainer, boolean executed) {\n+        assert carrierThread == null;\n+        setState(TERMINATED);\n@@ -549,2 +540,1 @@\n-                setState(TERMINATED);\n-                afterTerminate(addedToContainer, \/*executed*\/false);\n+                afterDone(addedToContainer, \/*executed*\/false);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/VirtualThread.java","additions":22,"deletions":32,"binary":false,"changes":54,"status":"modified"}]}