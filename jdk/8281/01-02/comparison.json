{"files":[{"patch":"@@ -498,1 +498,1 @@\n-        private record ProxyContext(Module module, String pkg, boolean packagePrivate) {}\n+        private record ProxyClassContext(Module module, String pkg, int accessFlags) { }\n@@ -500,1 +500,1 @@\n-        private static Class<?> defineProxyClass(ProxyContext context, List<Class<?>> interfaces) {\n+        private static Class<?> defineProxyClass(ProxyClassContext context, List<Class<?>> interfaces) {\n@@ -502,0 +502,1 @@\n+            int accessFlags = context.accessFlags;\n@@ -504,1 +505,1 @@\n-            if (!context.packagePrivate) {\n+            if (Modifier.isPublic(accessFlags)) {\n@@ -533,1 +534,1 @@\n-            int accessFlags = (context.packagePrivate ? 0 : Modifier.PUBLIC) | Modifier.FINAL;\n+            accessFlags |= Modifier.FINAL;\n@@ -554,1 +555,1 @@\n-         * {@link #defineProxyClass(ProxyContext, List)}\n+         * {@link #defineProxyClass(ProxyClassContext, List)}\n@@ -610,1 +611,1 @@\n-        private final ProxyContext context;\n+        private final ProxyClassContext context;\n@@ -627,1 +628,1 @@\n-            this.context = setupContext(loader, interfaces, refTypes);\n+            this.context = proxyClassContext(loader, interfaces, refTypes);\n@@ -766,3 +767,3 @@\n-        private static ProxyContext setupContext(ClassLoader loader,\n-                                                 List<Class<?>> interfaces,\n-                                                 Set<Class<?>> refTypes) {\n+        private static ProxyClassContext proxyClassContext(ClassLoader loader,\n+                                                           List<Class<?>> interfaces,\n+                                                           Set<Class<?>> refTypes) {\n@@ -826,1 +827,1 @@\n-                return new ProxyContext(targetModule, targetPackageName, true);\n+                return new ProxyClassContext(targetModule, targetPackageName, 0);\n@@ -831,2 +832,1 @@\n-            var context = getDynamicModuleContext(loader, nonExported);\n-            Module targetModule = context.module;\n+            Module targetModule = getDynamicModule(loader);\n@@ -841,1 +841,4 @@\n-            return context;\n+\n+            var pkgName = nonExported ? PROXY_PACKAGE_PREFIX + '.' + targetModule.getName()\n+                                      : targetModule.getName();\n+            return new ProxyClassContext(targetModule, pkgName, Modifier.PUBLIC);\n@@ -893,2 +896,2 @@\n-        private static ProxyContext getDynamicModuleContext(ClassLoader loader, boolean nonExported) {\n-            var module = dynProxyModules.computeIfAbsent(loader, (ld, clv) -> {\n+        private static Module getDynamicModule(ClassLoader loader) {\n+            return dynProxyModules.computeIfAbsent(loader, (ld, clv) -> {\n@@ -911,3 +914,0 @@\n-            return new ProxyContext(module, nonExported\n-                    ? PROXY_PACKAGE_PREFIX + '.' + module.getName()\n-                    : module.getName(), false);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Proxy.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"}]}