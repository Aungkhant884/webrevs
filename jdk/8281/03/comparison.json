{"files":[{"patch":"@@ -498,4 +498,1 @@\n-        private static Class<?> defineProxyClass(Module m, List<Class<?>> interfaces) {\n-            String proxyPkg = null;     \/\/ package to define proxy class in\n-            int accessFlags = Modifier.PUBLIC | Modifier.FINAL;\n-            boolean nonExported = false;\n+        private record ProxyClassContext(Module module, String pkg, int accessFlags) { }\n@@ -503,23 +500,4 @@\n-            \/*\n-             * Record the package of a non-public proxy interface so that the\n-             * proxy class will be defined in the same package.  Verify that\n-             * all non-public proxy interfaces are in the same package.\n-             *\/\n-            for (Class<?> intf : interfaces) {\n-                int flags = intf.getModifiers();\n-                if (!Modifier.isPublic(flags)) {\n-                    accessFlags = Modifier.FINAL;  \/\/ non-public, final\n-                    String pkg = intf.getPackageName();\n-                    if (proxyPkg == null) {\n-                        proxyPkg = pkg;\n-                    } else if (!pkg.equals(proxyPkg)) {\n-                        throw new IllegalArgumentException(\n-                                \"non-public interfaces from different packages\");\n-                    }\n-                } else {\n-                    if (!intf.getModule().isExported(intf.getPackageName())) {\n-                        \/\/ module-private types\n-                        nonExported = true;\n-                    }\n-                }\n-            }\n+        private static Class<?> defineProxyClass(ProxyClassContext context, List<Class<?>> interfaces) {\n+            String proxyPkg = context.pkg;\n+            int accessFlags = context.accessFlags;\n+            Module m = context.module;\n@@ -527,2 +505,2 @@\n-            if (proxyPkg == null) {\n-                \/\/ all proxy interfaces are public and exported\n+            if (Modifier.isPublic(accessFlags)) {\n+                \/\/ all proxy interfaces are public\n@@ -531,3 +509,6 @@\n-                proxyPkg = nonExported ? PROXY_PACKAGE_PREFIX + \".\" + m.getName()\n-                                       : m.getName();\n-            } else if (proxyPkg.isEmpty() && m.isNamed()) {\n+            }\n+\n+            if (proxyPkg.isEmpty() && m.isNamed()) {\n+                \/\/ Per JLS 7.4.2, unnamed package can only exist in unnamed modules.\n+                \/\/ This means a package-private superinterface exist in the unnamed\n+                \/\/ package of a named module.\n@@ -558,1 +539,2 @@\n-            byte[] proxyClassFile = ProxyGenerator.generateProxyClass(loader, proxyName, interfaces, accessFlags);\n+            byte[] proxyClassFile = ProxyGenerator.generateProxyClass(loader, proxyName, interfaces,\n+                                                                      accessFlags | Modifier.FINAL);\n@@ -578,1 +560,1 @@\n-         * {@link #defineProxyClass(Module, List)}\n+         * {@link #defineProxyClass(ProxyClassContext, List)}\n@@ -634,1 +616,1 @@\n-        private final Module module;\n+        private final ProxyClassContext context;\n@@ -651,2 +633,2 @@\n-            this.module = mapToModule(loader, interfaces, refTypes);\n-            assert getLoader(module) == loader;\n+            this.context = proxyClassContext(loader, interfaces, refTypes);\n+            assert getLoader(context.module) == loader;\n@@ -670,1 +652,2 @@\n-            Class<?> proxyClass = defineProxyClass(module, interfaces);\n+            Class<?> proxyClass = defineProxyClass(context, interfaces);\n+            Module module = context.module;\n@@ -771,1 +754,2 @@\n-         * Returns the module that the generated proxy class belongs to.\n+         * Returns the context for the generated proxy class, including the\n+         * module and the package it belongs to and whether it is package-private.\n@@ -774,1 +758,1 @@\n-         * is in the same module of the package-private interface.\n+         * is in the same package and module as the package-private interface.\n@@ -788,3 +772,3 @@\n-        private static Module mapToModule(ClassLoader loader,\n-                                          List<Class<?>> interfaces,\n-                                          Set<Class<?>> refTypes) {\n+        private static ProxyClassContext proxyClassContext(ClassLoader loader,\n+                                                           List<Class<?>> interfaces,\n+                                                           Set<Class<?>> refTypes) {\n@@ -792,0 +776,2 @@\n+            boolean nonExported = false;\n+\n@@ -796,0 +782,5 @@\n+                } else {\n+                    if (!intf.getModule().isExported(intf.getPackageName())) {\n+                        \/\/ module-private types\n+                        nonExported = true;\n+                    }\n@@ -841,1 +832,1 @@\n-                return targetModule;\n+                return new ProxyClassContext(targetModule, targetPackageName, 0);\n@@ -855,1 +846,4 @@\n-            return targetModule;\n+\n+            var pkgName = nonExported ? PROXY_PACKAGE_PREFIX + '.' + targetModule.getName()\n+                                      : targetModule.getName();\n+            return new ProxyClassContext(targetModule, pkgName, Modifier.PUBLIC);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Proxy.java","additions":39,"deletions":45,"binary":false,"changes":84,"status":"modified"}]}