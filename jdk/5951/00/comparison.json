{"files":[{"patch":"@@ -481,1 +481,1 @@\n-        return findReadWriteObjectForSerialization(cl, \"readObjectNoData\", ObjectInputStream.class);\n+        return findReadWriteObjectForSerialization(cl, \"readObjectNoData\", null);\n@@ -496,1 +496,2 @@\n-            Method meth = cl.getDeclaredMethod(methodName, streamClass);\n+            Method meth = streamClass == null ? cl.getDeclaredMethod(methodName)\n+                    : cl.getDeclaredMethod(methodName, streamClass);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/ReflectionFactory.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -147,3 +147,3 @@\n-     * The first argument of {@link MethodHandle#invoke} is the serializable\n-     * object and the second argument is the {@code ObjectInputStream} passed to\n-     * {@code readObjectNoData}.\n+     * The only argument of {@link MethodHandle#invoke} is the serializable\n+     * object, which {@code readObjectNoData} is called on. No arguments are\n+     * passed to the {@code readObjectNoData} method.\n","filename":"src\/jdk.unsupported\/share\/classes\/sun\/reflect\/ReflectionFactory.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import java.io.ObjectStreamException;\n@@ -48,3 +49,1 @@\n- * @bug 8137058 8164908 8168980\n- * @run testng ReflectionFactoryTest\n- * @run testng\/othervm\/policy=security.policy ReflectionFactoryTest\n+ * @bug 8137058 8164908 8168980 8275137\n@@ -53,0 +52,2 @@\n+ * @run testng ReflectionFactoryTest\n+ * @run testng\/othervm\/policy=security.policy ReflectionFactoryTest\n@@ -84,2 +85,1 @@\n-        throws NoSuchMethodException, InstantiationException,\n-            IllegalAccessException, InvocationTargetException\n+            throws InstantiationException, IllegalAccessException, InvocationTargetException\n@@ -134,2 +134,2 @@\n-        if (o instanceof Baz) {\n-            Assert.assertEquals(((Baz)o).baz(), expectedBaz);\n+        if (o instanceof Baz b) {\n+            Assert.assertEquals(b.baz(), expectedBaz);\n@@ -181,1 +181,1 @@\n-     * Test newConstructorForExternalization returns the constructor and it can be called.\n+     * Tests that newConstructorForExternalization returns the constructor and it can be called.\n@@ -189,2 +189,1 @@\n-            throws NoSuchMethodException, InstantiationException,\n-            IllegalAccessException, InvocationTargetException {\n+            throws InstantiationException, IllegalAccessException, InvocationTargetException {\n@@ -254,1 +253,1 @@\n-            readObjectNoDataMethod.invoke(ser2, ois);\n+            readObjectNoDataMethod.invoke(ser2);\n@@ -286,1 +285,1 @@\n-        private void readObject(ObjectInputStream ois) throws IOException {\n+        private void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException {\n@@ -291,1 +290,1 @@\n-        private void readObjectNoData(ObjectInputStream ois) throws IOException {\n+        private void readObjectNoData() throws ObjectStreamException {\n@@ -302,1 +301,1 @@\n-        private Object writeReplace() {\n+        private Object writeReplace() throws ObjectStreamException {\n@@ -308,1 +307,1 @@\n-        private Object readResolve() {\n+        private Object readResolve() throws ObjectStreamException {\n@@ -316,1 +315,1 @@\n-     * Test the constructor of OptionalDataExceptions.\n+     * Tests the constructor of OptionalDataExceptions.\n@@ -327,2 +326,0 @@\n-\n-\n","filename":"test\/jdk\/sun\/reflect\/ReflectionFactory\/ReflectionFactoryTest.java","additions":16,"deletions":19,"binary":false,"changes":35,"status":"modified"}]}