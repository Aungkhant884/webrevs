{"files":[{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8274205\n+ * @summary Handle KDC_ERR_SVC_UNAVAILABLE error code from KDC\n+ * @library \/test\/lib\n+ * @compile -XDignore.symbol.file Unavailable.java\n+ * @run main jdk.test.lib.FileInstaller TestHosts TestHosts\n+ * @run main\/othervm -Djdk.net.hosts.file=TestHosts Unavailable\n+ *\/\n+\n+import sun.security.krb5.Config;\n+import sun.security.krb5.PrincipalName;\n+import sun.security.krb5.internal.KRBError;\n+import sun.security.krb5.internal.KerberosTime;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Locale;\n+\n+public class Unavailable {\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        \/\/ Good KDC\n+        KDC kdc1 = KDC.create(OneKDC.REALM);\n+        kdc1.addPrincipal(OneKDC.USER, OneKDC.PASS);\n+        kdc1.addPrincipalRandKey(\"krbtgt\/\" + OneKDC.REALM);\n+\n+        \/\/ The \"not available\" KDC\n+        KDC kdc2 = new KDC(OneKDC.REALM, \"kdc.\" + OneKDC.REALM.toLowerCase(Locale.US), 0, true) {\n+            @Override\n+            protected byte[] processAsReq(byte[] in) throws Exception {\n+                KRBError err = new KRBError(null, null, null,\n+                        KerberosTime.now(), 0,\n+                        29, \/\/ KDC_ERR_SVC_UNAVAILABLE\n+                        null, new PrincipalName(\"krbtgt\/\" + OneKDC.REALM),\n+                        null, null);\n+                return err.asn1Encode();\n+            }\n+        };\n+\n+        Files.write(Path.of(OneKDC.KRB5_CONF), String.format(\"\"\"\n+                [libdefaults]\n+                default_realm = RABBIT.HOLE\n+\n+                [realms]\n+                RABBIT.HOLE = {\n+                    kdc = kdc.rabbit.hole:%d\n+                    kdc = kdc.rabbit.hole:%d\n+                }\n+                \"\"\", kdc2.getPort(), kdc1.getPort()).getBytes());\n+        System.setProperty(\"java.security.krb5.conf\", OneKDC.KRB5_CONF);\n+        Config.refresh();\n+\n+        Context.fromUserPass(OneKDC.USER, OneKDC.PASS, false);\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/krb5\/auto\/Unavailable.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"}]}