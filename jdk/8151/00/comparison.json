{"files":[{"patch":"@@ -214,0 +214,17 @@\n+\n+  \/\/ Clean up jdk.internal.loader.ClassLoaders::bootLoader(), which is not\n+  \/\/ directly used for class loading, but rather is used by the core library\n+  \/\/ to keep track of resources, etc, loaded by the null class loader.\n+  \/\/\n+  \/\/ Note, this object is non-null, and is not the same as\n+  \/\/ ClassLoaderData::the_null_class_loader_data()->class_loader(),\n+  \/\/ which is null.\n+  log_debug(cds)(\"Resetting boot loader\");\n+  JavaValue result(T_OBJECT);\n+  JavaCalls::call_static(&result,\n+                         vmClasses::jdk_internal_loader_ClassLoaders_klass(),\n+                         vmSymbols::bootLoader_name(),\n+                         vmSymbols::void_BuiltinClassLoader_signature(),\n+                         CHECK);\n+  Handle boot_loader(THREAD, result.get_oop());\n+  reset_states(boot_loader(), CHECK);\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -4994,1 +4994,4 @@\n-      klass == vmClasses::Context_klass()) {\n+      klass == vmClasses::Context_klass() ||\n+      \/\/ It's problematic to archive Reference objects. One of the reasons is that\n+      \/\/ Reference::discovered may pull in unwanted objects (see JDK-8284336)\n+      klass->is_subclass_of(vmClasses::Reference_klass())) {\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -406,0 +406,1 @@\n+  template(bootLoader_name,                           \"bootLoader\")                               \\\n@@ -564,0 +565,1 @@\n+  template(void_BuiltinClassLoader_signature,         \"()Ljdk\/internal\/loader\/BuiltinClassLoader;\")               \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2719,1 +2719,3 @@\n-        parallelLockMap.clear();\n+        if (parallelLockMap != null) {\n+            parallelLockMap.clear();\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ClassLoader.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1086,0 +1086,1 @@\n+        resourceCache = null;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/loader\/BuiltinClassLoader.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}