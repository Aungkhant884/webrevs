{"files":[{"patch":"@@ -54,1 +54,0 @@\n-  assert(_entry_size % HeapWordSize == 0, \"\");\n@@ -61,9 +60,1 @@\n-                                      HashtableEntry<T, F>(hashValue);\n-\n-  if (DumpSharedSpaces) {\n-    \/\/ Avoid random bits in structure padding so we can have deterministic content in CDS archive\n-    memset((void*)entry, 0, this->entry_size());\n-  }\n-  entry->set_hash(hashValue);\n-  entry->set_literal(obj);\n-  entry->set_next(NULL);\n+                                      HashtableEntry<T, F>(hashValue, obj);\n","filename":"src\/hotspot\/share\/utilities\/hashtable.cpp","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -33,9 +33,2 @@\n-\/\/ This is a generic hashtable, designed to be used for the symbol\n-\/\/ and string tables.\n-\/\/\n-\/\/ It is implemented as an open hash table with a fixed number of buckets.\n-\/\/\n-\/\/ %note:\n-\/\/  - TableEntrys are allocated in blocks to reduce the space overhead.\n-\n-\n+\/\/ This is a generic hashtable which is implemented as an open hash table with\n+\/\/ a fixed number of buckets.\n@@ -82,1 +75,1 @@\n-  HashtableEntry(unsigned int hashValue) : BasicHashtableEntry<F>(hashValue) {}\n+  HashtableEntry(unsigned int hashValue, T value) : BasicHashtableEntry<F>(hashValue), _literal(value) {}\n","filename":"src\/hotspot\/share\/utilities\/hashtable.hpp","additions":3,"deletions":10,"binary":false,"changes":13,"status":"modified"}]}