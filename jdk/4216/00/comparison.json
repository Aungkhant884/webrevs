{"files":[{"patch":"@@ -28,0 +28,2 @@\n+import java.io.PrintWriter;\n+import java.util.Locale;\n@@ -30,0 +32,1 @@\n+import javax.tools.FileObject;\n@@ -34,1 +37,24 @@\n- * This interface provides error, warning and notice reporting.\n+ * Interface for reporting diagnostics and other messages.\n+ *\n+ * <p>Diagnostics consist of a {@link Diagnostic.Kind diagnostic kind} and a message,\n+ * and may additionally be associated with an {@link Element element},\n+ * a {@link DocTreePath tree node} in a documentation comment,\n+ * or at an arbitrary position in a given {@link FileObject file}.\n+ * Other messages may be written directly to one of two streams that are informally\n+ * for use by \"standard output\" and \"diagnostic output\", where \"standard output\"\n+ * means the output that is the expected result of executing some operation,\n+ * such as the command-line help that is generated when using a {@code --help} option,\n+ * and \"diagnostic output\" refers to any errors, warnings and other output that is\n+ * a side-effect of executing the operation.\n+ *\n+ * <p>The exact manner in which diagnostics are output is unspecified and depends\n+ * on the enclosing context. For example:\n+ * <ul>\n+ * <li>The {@link javax.tools.DocumentationTool} API allows a client to specify a\n+ * {@link javax.tools.DiagnosticListener} to which diagnostics will be\n+ * {@link javax.tools.DiagnosticListener#report reported}. If no listener is specified,\n+ * diagnostics will be written to a given stream, or to {@code System.err} if no such\n+ * stream is provided.\n+ * <li>The {@link java.util.spi.ToolProvider} API allows a client to specify\n+ * the streams to be used for reporting standard and diagnostic output.\n+ * <\/ul>\n@@ -41,1 +67,1 @@\n-     * Print error message and increment error count.\n+     * Prints a diagnostic message.\n@@ -43,2 +69,2 @@\n-     * @param kind specify the diagnostic kind\n-     * @param msg message to print\n+     * @param kind    the kind of diagnostic\n+     * @param message the message to be printed\n@@ -46,1 +72,1 @@\n-    void print(Diagnostic.Kind kind, String msg);\n+    void print(Diagnostic.Kind kind, String message);\n@@ -49,1 +75,1 @@\n-     * Print an error message and increment error count.\n+     * Prints a diagnostic message related to a tree node in a documentation comment.\n@@ -51,3 +77,3 @@\n-     * @param kind specify the diagnostic kind\n-     * @param path the DocTreePath of item where the error occurs\n-     * @param msg message to print\n+     * @param kind    the kind of diagnostic\n+     * @param path    the path for the tree node\n+     * @param message the message to be printed\n@@ -55,1 +81,1 @@\n-    void print(Diagnostic.Kind kind, DocTreePath path, String msg);\n+    void print(Diagnostic.Kind kind, DocTreePath path, String message);\n@@ -58,1 +84,1 @@\n-     * Print an error message and increment error count.\n+     * Prints a diagnostic message related to an element.\n@@ -60,3 +86,3 @@\n-     * @param kind specify the diagnostic kind\n-     * @param e the Element for which  the error occurs\n-     * @param msg message to print\n+     * @param kind    the kind of diagnostic\n+     * @param element the element\n+     * @param message the message to be printed\n@@ -64,1 +90,59 @@\n-    void print(Diagnostic.Kind kind, Element e, String msg);\n+    void print(Diagnostic.Kind kind, Element element, String message);\n+\n+    \/**\n+     * Prints a diagnostic message related to a position within a range of characters in a file.\n+     * The positions are all 0-based character offsets from the beginning of content of the file.\n+     * The positions should satisfy the relation {@code start <= pos <= end}.\n+     *\n+     * @param kind    the kind of diagnostic\n+     * @param file    the file\n+     * @param start   the beginning of the enclosing range\n+     * @param pos     the position\n+     * @param end     the end of the enclosing range\n+     * @param message the message to be printed\n+     *\n+     * @since 17\n+     *\/\n+    void print(Diagnostic.Kind kind, FileObject file, int start, int pos, int end, String message);\n+\n+\n+    \/**\n+     * Returns a writer that can be used to write non-diagnostic output,\n+     * or {@code null} if no such writer is available.\n+     *\n+     * @apiNote\n+     * The value may or may not be the same as that returned by {@link #getDiagnosticWriter()}.\n+     *\n+     * @implSpec\n+     * This implementation returns {@code null}.\n+     * The implementation provided by the {@code javadoc} tool to\n+     * {@link Doclet#init(Locale, Reporter) initialize} a doclet\n+     * always returns a non-{@code null} value.\n+     *\n+     * @return the writer\n+     * @since 17\n+     *\/\n+    default PrintWriter getStandardWriter() {\n+        return null;\n+    }\n+\n+    \/**\n+     * Returns a writer that can be used to write diagnostic output,\n+     * or {@code null} if no such writer is available.\n+     *\n+     * @apiNote\n+     * The value may or may not be the same as that returned by {@link #getStandardWriter()}.\n+     *\n+     * @implSpec\n+     * This implementation returns {@code null}.\n+     * The implementation provided by the {@code javadoc} tool to\n+     * {@link Doclet#init(Locale, Reporter) initialize} a doclet\n+     * always returns a non-{@code null} value.\n+     *\n+     * @return the writer\n+     * @since 17\n+     *\/\n+    default PrintWriter getDiagnosticWriter() {\n+        return null;\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/doclet\/Reporter.java","additions":99,"deletions":15,"binary":false,"changes":114,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import javax.tools.FileObject;\n@@ -79,2 +80,2 @@\n-     * @param key the name of a resource containing the message to be printed\n-     * @param args optional arguments to be replaced in the message.\n+     * @param key  the name of a resource containing the message to be printed\n+     * @param args optional arguments to be replaced in the message\n@@ -89,4 +90,3 @@\n-     * @param path a path identifying the position to be included with\n-     *  the message\n-     * @param key the name of a resource containing the message to be printed\n-     * @param args optional arguments to be replaced in the message.\n+     * @param path a path identifying the position to be included with the message\n+     * @param key  the name of a resource containing the message to be printed\n+     * @param args optional arguments to be replaced in the message\n@@ -98,0 +98,14 @@\n+    \/**\n+     * Reports an error message to the doclet's reporter.\n+     *\n+     * @param fo    the file object to be associated with the message\n+     * @param start the start of a range of characters to be associated with the message\n+     * @param pos   the position to be associated with the message\n+     * @param end   the end of a range of characters to be associated with the message\n+     * @param key   the name of a resource containing the message to be printed\n+     * @param args  optional arguments to be replaced in the message\n+     *\/\n+    public void error(FileObject fo, int start, int pos, int end, String key, Object... args) {\n+        report(ERROR, fo, start, pos, end, resources.getText(key, args));\n+    }\n+\n@@ -103,2 +117,2 @@\n-     * @param key the name of a resource containing the message to be printed\n-     * @param args optional arguments to be replaced in the message.\n+     * @param key  the name of a resource containing the message to be printed\n+     * @param args optional arguments to be replaced in the message\n@@ -113,4 +127,3 @@\n-     * @param path a path identifying the position to be included with\n-     *  the message\n-     * @param key the name of a resource containing the message to be printed\n-     * @param args optional arguments to be replaced in the message.\n+     * @param path a path identifying the position to be included with the message\n+     * @param key  the name of a resource containing the message to be printed\n+     * @param args optional arguments to be replaced in the message\n@@ -127,4 +140,4 @@\n-     * @param e an element identifying the declaration whose position should\n-     *  to be included with the message\n-     * @param key the name of a resource containing the message to be printed\n-     * @param args optional arguments to be replaced in the message.\n+     * @param e    an element identifying the declaration whose position should\n+     *             be included with the message\n+     * @param key  the name of a resource containing the message to be printed\n+     * @param args optional arguments to be replaced in the message\n@@ -138,0 +151,14 @@\n+    \/**\n+     * Reports a warning message to the doclet's reporter.\n+     *\n+     * @param fo    the file object to be associated with the message\n+     * @param start the start of a range of characters to be associated with the message\n+     * @param pos   the position to be associated with the message\n+     * @param end   the end of a range of characters to be associated with the message\n+     * @param key   the name of a resource containing the message to be printed\n+     * @param args  optional arguments to be replaced in the message\n+     *\/\n+    public void warning(FileObject fo, int start, int pos, int end, String key, Object... args) {\n+        report(WARNING, fo, start, pos, end, resources.getText(key, args));\n+    }\n+\n@@ -142,0 +169,1 @@\n+     * The message is written directly to the reporter's diagnostic stream.\n@@ -143,2 +171,2 @@\n-     * @param key the name of a resource containing the message to be printed\n-     * @param args optional arguments to be replaced in the message.\n+     * @param key  the name of a resource containing the message to be printed\n+     * @param args optional arguments to be replaced in the message\n@@ -148,1 +176,2 @@\n-            report(NOTE, resources.getText(key, args));\n+            \/\/ Note: we do not use report(NOTE, ...) which would prefix the output with \"Note:\"\n+            reporter.getDiagnosticWriter().println(resources.getText(key, args));\n@@ -165,0 +194,4 @@\n+\n+    private void report(Diagnostic.Kind k, FileObject fo, int start, int pos, int end, String msg) {\n+        reporter.print(k, fo, start, pos, end, msg);\n+    }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/Messages.java","additions":52,"deletions":19,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.io.PrintStream;\n@@ -39,0 +40,2 @@\n+import javax.lang.model.element.Modifier;\n+import javax.lang.model.element.NestingKind;\n@@ -41,0 +44,2 @@\n+import javax.tools.FileObject;\n+import javax.tools.ForwardingFileObject;\n@@ -160,4 +165,9 @@\n-    \/** The default writer for notes. *\/\n-    private static final PrintWriter defaultOutWriter = new PrintWriter(System.out);\n-    \/** The default writer for errors and warnings. *\/\n-    private static final PrintWriter defaultErrWriter = new PrintWriter(System.err);\n+    private static PrintWriter createPrintWriter(PrintStream ps, boolean autoflush) {\n+        return new PrintWriter(ps, autoflush) {\n+            \/\/ avoid closing system streams\n+            @Override\n+            public void close() {\n+                super.flush();\n+            }\n+        };\n+    }\n@@ -170,1 +180,4 @@\n-        this(context, programName, defaultOutWriter, defaultErrWriter);\n+        \/\/ use the current values of System.out, System.err, in case they have been redirected\n+        this(context, programName,\n+                createPrintWriter(System.out, false),\n+                createPrintWriter(System.err, true));\n@@ -179,1 +192,0 @@\n-    @SuppressWarnings(\"deprecation\")\n@@ -181,1 +193,1 @@\n-        super(context, errWriter, errWriter, outWriter);\n+        super(context, outWriter, errWriter);\n@@ -200,0 +212,10 @@\n+    @Override \/\/ Reporter\n+    public PrintWriter getStandardWriter() {\n+        return getWriter(Log.WriterKind.STDOUT);\n+    }\n+\n+    @Override \/\/ Reporter\n+    public PrintWriter getDiagnosticWriter() {\n+        return getWriter(Log.WriterKind.STDERR);\n+    }\n+\n@@ -237,0 +259,45 @@\n+    @Override \/\/ Reporter\n+    public void print(Kind kind, FileObject file, int start, int pos, int end, String message) throws IllegalArgumentException {\n+        DiagnosticType dt = getDiagnosticType(kind);\n+        Set<DiagnosticFlag> flags = getDiagnosticFlags(kind);\n+        \/\/ Although not required to do so, it is the case that any file object returned from the\n+        \/\/ javac impl of JavaFileManager will return an object that implements JavaFileObject.\n+        \/\/ See PathFileObject, which provides the primary impls of (Java)FileObject.\n+        JavaFileObject fo = file instanceof JavaFileObject _fo ? _fo : new WrappingJavaFileObject(file);\n+        DiagnosticSource ds = new DiagnosticSource(fo, this);\n+        DiagnosticPosition dp = createDiagnosticPosition(null, start, pos, end);\n+        report(dt, flags, ds, dp, message);\n+    }\n+\n+    private class WrappingJavaFileObject\n+            extends ForwardingFileObject<FileObject> implements JavaFileObject {\n+\n+        WrappingJavaFileObject(FileObject fo) {\n+            super(fo);\n+            assert !(fo instanceof JavaFileObject);\n+        }\n+\n+        @Override\n+        public Kind getKind() {\n+            String name = fileObject.getName();\n+            return name.endsWith(Kind.HTML.extension)\n+                    ? JavaFileObject.Kind.HTML\n+                    : JavaFileObject.Kind.OTHER;\n+        }\n+\n+        @Override\n+        public boolean isNameCompatible(String simpleName, Kind kind) {\n+            return false;\n+        }\n+\n+        @Override\n+        public NestingKind getNestingKind() {\n+            return null;\n+        }\n+\n+        @Override\n+        public Modifier getAccessLevel() {\n+            return null;\n+        }\n+    }\n+\n@@ -335,1 +402,1 @@\n-     * Prints a \"notice\" message.\n+     * Prints a \"notice\" message to the standard writer.\n@@ -337,1 +404,2 @@\n-     * @param message the message\n+     * @param key  the resource key for the message\n+     * @param args the arguments for the message\n@@ -339,2 +407,2 @@\n-    public void printNotice(String message) {\n-        report(DiagnosticType.NOTE, null, null, message);\n+    public void noticeUsingKey(String key, Object... args) {\n+        getStandardWriter().println(getText(key, args));\n@@ -344,1 +412,1 @@\n-     * Prints a \"notice\" message for a given documentation tree node.\n+     * Prints a \"notice\" message to the standard writer.\n@@ -346,1 +414,0 @@\n-     * @param path    the path for the documentation tree node\n@@ -349,26 +416,2 @@\n-    public void printNotice(DocTreePath path, String message) {\n-        DiagnosticSource ds = getDiagnosticSource(path);\n-        DiagnosticPosition dp = getDiagnosticPosition(path);\n-        report(DiagnosticType.NOTE, EnumSet.noneOf(DiagnosticFlag.class), ds, dp, message);\n-    }\n-\n-    \/**\n-     * Prints a \"notice\" message for a given element.\n-     *\n-     * @param element the element\n-     * @param message the message\n-     *\/\n-    public void printNotice(Element element, String message) {\n-        DiagnosticSource ds = getDiagnosticSource(element);\n-        DiagnosticPosition dp = getDiagnosticPosition(element);\n-        report(DiagnosticType.NOTE, EnumSet.noneOf(DiagnosticFlag.class), ds, dp, message);\n-    }\n-\n-    \/**\n-     * Prints a \"notice\" message.\n-     *\n-     * @param key  the resource key for the message\n-     * @param args the arguments for the message\n-     *\/\n-    public void notice(String key, Object... args) {\n-        printNotice(getText(key, args));\n+    public void notice(String message) {\n+        getStandardWriter().println(message);\n@@ -392,1 +435,1 @@\n-     * Prints the error and warning counts, if any.\n+     * Prints the error and warning counts, if any, to the diagnostic writer.\n@@ -395,7 +438,12 @@\n-        if (nerrors > 0) {\n-            notice((nerrors > 1) ? \"main.errors\" : \"main.error\",\n-                   \"\" + nerrors);\n-        }\n-        if (nwarnings > 0) {\n-            notice((nwarnings > 1) ?  \"main.warnings\" : \"main.warning\",\n-                   \"\" + nwarnings);\n+        printCount(nerrors, \"main.error\", \"main.errors\");\n+        printCount(nwarnings, \"main.warning\", \"main.warnings\");\n+    }\n+\n+    private void printCount(int count, String singleKey, String pluralKey) {\n+        if (count > 0) {\n+            String message = getText(count > 1 ? pluralKey : singleKey, count);\n+            if (diagListener != null) {\n+                report(DiagnosticType.NOTE, null, null, message);\n+            } else {\n+                getDiagnosticWriter().println(message);\n+            }\n@@ -449,3 +497,4 @@\n-     * such as  \"Generating class ...\".  Therefore, for now, we detect and report those\n-     * messages directly. (A better solution would be to expose access to the output\n-     * and error streams via {@code Reporter}).\n+     * such as  \"Generating class ...\".  They can be written directly to the diagnostic\n+     * writer, but that bypasses low-level checks about whether to suppress notes,\n+     * and bypasses the diagnostic listener for API clients.\n+     * Overall, it's an over-constrained problem with no obvious good solution.\n@@ -462,6 +511,1 @@\n-        if (dt == DiagnosticType.NOTE && ds == null && !hasDiagnosticListener()) {\n-            printRawLines(WriterKind.STDOUT, message);\n-            getWriter(WriterKind.STDOUT).flush();\n-        } else {\n-            report(javadocDiags.create(dt, null, flags, ds, dp, \"message\", message));\n-        }\n+        report(javadocDiags.create(dt, null, flags, ds, dp, \"message\", message));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/tool\/Messager.java","additions":100,"deletions":56,"binary":false,"changes":156,"status":"modified"},{"patch":"@@ -198,1 +198,1 @@\n-        messager.notice(headerKey);\n+        messager.noticeUsingKey(headerKey);\n@@ -208,1 +208,1 @@\n-            messager.notice(footerKey);\n+            messager.noticeUsingKey(footerKey);\n@@ -212,1 +212,1 @@\n-        messager.notice(labelKey, messager.programName, value);\n+        messager.noticeUsingKey(labelKey, messager.programName, value);\n@@ -255,1 +255,1 @@\n-        messager.notice(\"main.doclet.usage.header\", name);\n+        messager.noticeUsingKey(\"main.doclet.usage.header\", name);\n@@ -310,1 +310,1 @@\n-            messager.printNotice(String.format(COMPACT_FORMAT, synopses, description));\n+            messager.notice(String.format(COMPACT_FORMAT, synopses, description));\n@@ -317,1 +317,1 @@\n-            messager.printNotice(SMALL_INDENT + synopses);\n+            messager.notice(SMALL_INDENT + synopses);\n@@ -320,1 +320,1 @@\n-                messager.printNotice(SMALL_INDENT + name + parameters);\n+                messager.notice(SMALL_INDENT + name + parameters);\n@@ -325,1 +325,1 @@\n-        messager.printNotice(LARGE_INDENT + description.replace(\"\\n\", \"\\n\" + LARGE_INDENT));\n+        messager.notice(LARGE_INDENT + description.replace(\"\\n\", \"\\n\" + LARGE_INDENT));\n@@ -563,1 +563,1 @@\n-            messager.notice(\"main.done_in\", Long.toString(elapsedMillis));\n+            messager.noticeUsingKey(\"main.done_in\", Long.toString(elapsedMillis));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/tool\/Start.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -202,1 +202,1 @@\n-        messager.notice(key);\n+        messager.noticeUsingKey(key);\n@@ -215,1 +215,1 @@\n-        messager.notice(key, a1);\n+        messager.noticeUsingKey(key, a1);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/tool\/ToolEnvironment.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-                    This is a note\n+                    Note: This is a note\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testDiagsLineCaret\/TestDiagsLineCaret.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,220 @@\n+\/*\n+  * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+  * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+  *\n+  * This code is free software; you can redistribute it and\/or modify it\n+  * under the terms of the GNU General Public License version 2 only, as\n+  * published by the Free Software Foundation.\n+  *\n+  * This code is distributed in the hope that it will be useful, but WITHOUT\n+  * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+  * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+  * version 2 for more details (a copy is included in the LICENSE file that\n+  * accompanied this code).\n+  *\n+  * You should have received a copy of the GNU General Public License version\n+  * 2 along with this work; if not, write to the Free Software Foundation,\n+  * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+  *\n+  * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+  * or visit www.oracle.com if you need additional information or have any\n+  * questions.\n+  *\/\n+\n+ \/*\n+  * @test\n+  * @bug      8267204\n+  * @summary  Expose access to underlying streams in Reporter\n+  * @library  \/tools\/lib ..\/..\/lib\n+  * @modules  jdk.javadoc\/jdk.javadoc.internal.tool\n+  * @build    toolbox.ToolBox javadoc.tester.*\n+  * @run main TestReporterStreams\n+  *\/\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.Set;\n+\n+import javax.lang.model.SourceVersion;\n+import javax.lang.model.element.Element;\n+import javax.tools.Diagnostic;\n+import javax.tools.JavaFileObject;\n+\n+import com.sun.source.doctree.DocCommentTree;\n+import com.sun.source.doctree.SinceTree;\n+import com.sun.source.tree.CompilationUnitTree;\n+import com.sun.source.util.DocSourcePositions;\n+import com.sun.source.util.DocTreePath;\n+import com.sun.source.util.DocTrees;\n+import com.sun.source.util.TreePath;\n+import javadoc.tester.JavadocTester;\n+import jdk.javadoc.doclet.Doclet;\n+import jdk.javadoc.doclet.DocletEnvironment;\n+import jdk.javadoc.doclet.Reporter;\n+import toolbox.ToolBox;\n+\n+public class TestReporterStreams extends JavadocTester {\n+\n+    public static void main(String... args) throws Exception {\n+        TestReporterStreams tester = new TestReporterStreams();\n+        tester.runTests(m -> new Object[]{Path.of(m.getName())});\n+    }\n+\n+    ToolBox tb = new ToolBox();\n+\n+    TestReporterStreams() throws IOException {\n+        tb.writeJavaFiles(Path.of(\".\"), \"\"\"\n+                    \/**\n+                     * Comment.\n+                     * @since 0\n+                     *\/\n+                    public class C { }\"\"\");\n+    }\n+\n+    \/**\n+     * Tests the entry point used by the DocumentationTool API and JavadocTester, in which\n+     * all output is written to a single specified writer.\n+     *\/\n+    @Test\n+    public void testSingleStream(Path base) throws IOException {\n+        test(base, false, Output.OUT, Output.OUT);\n+    }\n+\n+    \/**\n+     * Tests the entry point used by the launcher, in which output is written to\n+     * writers that wrap {@code System.out} and {@code System.err}.\n+     *\/\n+    @Test\n+    public void testStandardStreams(Path base) throws IOException {\n+        test(base, true, Output.STDOUT, Output.STDERR);\n+    }\n+\n+    void test(Path base, boolean useStdStreams, Output stdOut, Output stdErr) throws IOException {\n+        String testClasses = System.getProperty(\"test.classes\");\n+\n+        setOutputDirectoryCheck(DirectoryCheck.NONE);\n+        setUseStandardStreams(useStdStreams);\n+        javadoc(\"-docletpath\", testClasses,\n+                \"-doclet\", MyDoclet.class.getName(),\n+                \"C.java\" \/\/ avoid using a directory, to avoid path separator issues in expected output\n+        );\n+        checkExit(Exit.ERROR);\n+        checkOutput(stdOut, true,\n+                \"Writing to the standard writer\");\n+        checkOutput(stdErr, true,\n+                \"Writing to the diagnostic writer\");\n+        checkOutput(stdErr, true,\n+                \"\"\"\n+                    error: This is a ERROR with no position\n+                    C.java:5: error: This is a ERROR for an element\n+                    public class C { }\n+                           ^\n+                    C.java:2: error: This is a ERROR for a doc tree path\n+                     * Comment.\n+                       ^\n+                    C.java:3: error: This is a ERROR for a file position\n+                     * @since 0\n+                              ^\n+                    warning: This is a WARNING with no position\n+                    C.java:5: warning: This is a WARNING for an element\n+                    public class C { }\n+                           ^\n+                    C.java:2: warning: This is a WARNING for a doc tree path\n+                     * Comment.\n+                       ^\n+                    C.java:3: warning: This is a WARNING for a file position\n+                     * @since 0\n+                              ^\n+                    warning: This is a MANDATORY_WARNING with no position\n+                    C.java:5: warning: This is a MANDATORY_WARNING for an element\n+                    public class C { }\n+                           ^\n+                    C.java:2: warning: This is a MANDATORY_WARNING for a doc tree path\n+                     * Comment.\n+                       ^\n+                    C.java:3: warning: This is a MANDATORY_WARNING for a file position\n+                     * @since 0\n+                              ^\n+                    Note: This is a NOTE with no position\n+                    C.java:5: Note: This is a NOTE for an element\n+                    public class C { }\n+                           ^\n+                    C.java:2: Note: This is a NOTE for a doc tree path\n+                     * Comment.\n+                       ^\n+                    C.java:3: Note: This is a NOTE for a file position\n+                     * @since 0\n+                              ^\n+                    \"\"\");\n+    }\n+\n+    public static class MyDoclet implements Doclet {\n+        private Locale locale;\n+        private Reporter reporter;\n+\n+        @Override\n+        public void init(Locale locale, Reporter reporter) {\n+            this.locale = locale;\n+            this.reporter = reporter;\n+        }\n+\n+        @Override\n+        public String getName() {\n+            return \"MyDoclet\";\n+        }\n+\n+        @Override\n+        public Set<? extends Option> getSupportedOptions() {\n+            return Collections.emptySet();\n+        }\n+\n+        @Override\n+        public SourceVersion getSupportedSourceVersion() {\n+            return SourceVersion.latestSupported();\n+        }\n+\n+        @Override\n+        public boolean run(DocletEnvironment environment) {\n+            \/\/ Write directly to the given streams\n+            reporter.getStandardWriter().println(\"Writing to the standard writer\");\n+            reporter.getDiagnosticWriter().println(\"Writing to the diagnostic writer\");\n+\n+            \/\/ the following is little more than a null check for the locale\n+            reporter.print(Diagnostic.Kind.NOTE, \"The locale is \" + locale.getDisplayName());\n+\n+            \/\/ Write different kinds of diagnostics using the different overloads\n+            \/\/ for printing diagnostics\n+            Set<? extends Element> specElems = environment.getSpecifiedElements();\n+            Element e = specElems.iterator().next();\n+\n+            DocTrees trees = environment.getDocTrees();\n+            TreePath tp = trees.getPath(e);\n+            DocCommentTree dct = trees.getDocCommentTree(e);\n+            DocTreePath dtp = new DocTreePath(tp, dct);\n+\n+            CompilationUnitTree cut = tp.getCompilationUnit();\n+            JavaFileObject fo = cut.getSourceFile();\n+            SinceTree st = (SinceTree) dct.getBlockTags().get(0);\n+            DocSourcePositions sp = trees.getSourcePositions();\n+            int start = (int) sp.getStartPosition(cut, dct, st);\n+            int pos = (int) sp.getStartPosition(cut, dct, st.getBody().get(0));\n+            int end = (int) sp.getEndPosition(cut, dct, st);\n+\n+            for (Diagnostic.Kind k : Diagnostic.Kind.values()) {\n+                if (k == Diagnostic.Kind.OTHER) {\n+                    continue;\n+                }\n+\n+                reporter.print(k, \"This is a \" + k + \" with no position\");\n+                reporter.print(k, e, \"This is a \" + k + \" for an element\");\n+                reporter.print(k, dtp, \"This is a \" + k + \" for a doc tree path\");\n+                reporter.print(k, fo, start, pos, end, \"This is a \" + k + \" for a file position\");\n+            }\n+\n+            return true;\n+        }\n+    }\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testReporterStreams\/TestReporterStreams.java","additions":220,"deletions":0,"binary":false,"changes":220,"status":"added"},{"patch":"@@ -239,0 +239,1 @@\n+    private boolean useStandardStreams = false;\n@@ -341,1 +342,1 @@\n-           cs = docencodingArg;\n+            cs = docencodingArg;\n@@ -354,1 +355,1 @@\n-        \/\/ This is the sole stream used by javadoc\n+        \/\/ This is the sole stream normally used by javadoc\n@@ -363,1 +364,3 @@\n-            exitCode = jdk.javadoc.internal.tool.Main.execute(args, outOut.pw);\n+            exitCode = useStandardStreams\n+                    ? jdk.javadoc.internal.tool.Main.execute(args)              \/\/ use sysOut, sysErr\n+                    : jdk.javadoc.internal.tool.Main.execute(args, outOut.pw);  \/\/ default\n@@ -421,0 +424,10 @@\n+    \/**\n+     * Sets whether to use standard output streams (stdout and stderr)\n+     * instead of a single temporary stream.\n+     * Tests using standard streams should generally take care to avoid\n+     * conflicting use of stdout and stderr.\n+     *\/\n+    public void setUseStandardStreams(boolean b) {\n+        useStandardStreams = b;\n+    }\n+\n@@ -1108,1 +1121,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/jdk\/javadoc\/lib\/javadoc\/tester\/JavadocTester.java","additions":17,"deletions":4,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -112,2 +112,2 @@\n-        List<String> out = tr.getOutputLines(Task.OutputKind.STDOUT);\n-        checkOutput(testName, out, NEW_HEADER);\n+        List<String> err = tr.getOutputLines(Task.OutputKind.STDERR);\n+        checkOutput(testName, err, NEW_HEADER);\n@@ -131,2 +131,2 @@\n-        checkOutput(testName, out, NEW_HEADER);\n-        checkOutput(testName, out, NEW_TAGLET_MARKER);\n+        checkOutput(testName, err, NEW_HEADER);\n+        checkOutput(testName, err, NEW_TAGLET_MARKER);\n","filename":"test\/langtools\/jdk\/javadoc\/tool\/EnsureNewOldDoclet.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -57,3 +57,2 @@\n-     * because the DocErrorReporter API works in terms of localized strings\n-     * and file:line positions. Therefore, messages reported via DocErrorReporter\n-     * and simply wrapped and passed through.\n+     * because the Reporter API works in terms of localized strings.\n+     * Therefore, messages reported via Reporter are simply wrapped and passed through.\n@@ -80,1 +79,0 @@\n-                        \"javadoc.note.message\",     \/\/ Loading source file\n","filename":"test\/langtools\/jdk\/javadoc\/tool\/api\/basic\/GetTask_DiagListenerTest.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"}]}