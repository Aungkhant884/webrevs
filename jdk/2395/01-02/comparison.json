{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n- * {@code StrictMath}, all implementations of the equivalent\n+ * {@link java.lang.StrictMath StrictMath}, all implementations of the equivalent\n@@ -237,1 +237,1 @@\n-     * <li>If the argument is {@code 1.0}, the result is {@code +0.0}.\n+     * <li>If the argument is {@code 1.0}, the result is positive zero.\n@@ -334,1 +334,2 @@\n-     * zero.<\/ul>\n+     * zero.\n+     * <\/ul>\n@@ -716,1 +717,1 @@\n-     * even integer) and therefore specifies {@code 1.0} be returned.\n+     * even integers) and therefore specifies {@code 1.0} be returned.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Math.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -80,3 +80,3 @@\n- * The {@code Math} class discusses how the shared quality of\n- * implementation criteria for selected {@code Math} and {@code\n- * StrictMath} methods <a\n+ * The {@link java.lang.Math Math} class discusses how the shared\n+ * quality of implementation criteria for selected {@code Math} and\n+ * {@code StrictMath} methods <a\n@@ -138,1 +138,3 @@\n-     * result is NaN.<\/ul>\n+     * result is NaN.\n+     * <li>If the argument is zero, then the result is {@code 1.0}.\n+     * <\/ul>\n@@ -174,1 +176,3 @@\n-     * than 1, then the result is NaN.<\/ul>\n+     * than 1, then the result is NaN.\n+     * <li>If the argument is {@code 1.0}, the result is positive zero.\n+     * <\/ul>\n@@ -186,1 +190,5 @@\n-     * same sign as the argument.<\/ul>\n+     * same sign as the argument.\n+     * <li>If the argument is {@linkplain Double#isInfinite infinite},\n+     * then the result is the closest value to <i>pi<\/i>\/2 with the\n+     * same sign as the input.\n+     * <\/ul>\n@@ -232,1 +240,3 @@\n-     * positive zero.<\/ul>\n+     * positive zero.\n+     * <li>If the argument is zero, then the result is {@code 1.0}.\n+     * <\/ul>\n@@ -250,1 +260,4 @@\n-     * result is negative infinity.<\/ul>\n+     * result is negative infinity.\n+     * <li>If the argument is {@code 1.0}, then the result is positive\n+     * zero.\n+     * <\/ul>\n@@ -268,2 +281,4 @@\n-     * <li> If the argument is equal to 10<sup><i>n<\/i><\/sup> for\n-     * integer <i>n<\/i>, then the result is <i>n<\/i>.\n+     * <li>If the argument is equal to 10<sup><i>n<\/i><\/sup> for\n+     * integer <i>n<\/i>, then the result is <i>n<\/i>. In particular,\n+     * if the argument is {@code 1.0} (10<sup>0<\/sup>), then the\n+     * result is positive zero.\n@@ -529,0 +544,9 @@\n+     * @apiNote\n+     * For <i>y<\/i> with a positive sign and finite nonzero\n+     * <i>x<\/i>, the exact mathematical value of {@code atan2} is\n+     * equal to:\n+     * <ul>\n+     * <li>If <i>x<\/i> {@literal >} 0, atan(abs(<i>y<\/i>\/<i>x<\/i>))\n+     * <li>If <i>x<\/i> {@literal <} 0, &pi; - atan(abs(<i>y<\/i>\/<i>x<\/i>))\n+     * <\/ul>\n+     *\n@@ -654,0 +678,10 @@\n+     * @apiNote\n+     * The special cases definitions of this method differ from the\n+     * special case definitions of the IEEE 754 recommended {@code\n+     * pow} operation for &plusmn;{@code 1.0} raised to an infinite\n+     * power. This method treats such cases as indeterminate and\n+     * specifies a NaN is returned. The IEEE 754 specification treats\n+     * the infinite power as a large integer (large-magnitude\n+     * floating-point numbers are numerically integers, specifically\n+     * even integers) and therefore specifies {@code 1.0} be returned.\n+     *\n@@ -1693,0 +1727,1 @@\n+     * <li> If both arguments are zero, the result is positive zero.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StrictMath.java","additions":46,"deletions":11,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/java\/lang\/Math\/Ieee754SpecialCaseTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}