{"files":[{"patch":"@@ -168,0 +168,1 @@\n+  bool _does_not_return;\n@@ -170,1 +171,1 @@\n-  StubFrame(StubAssembler* sasm, const char* name, bool must_gc_arguments);\n+  StubFrame(StubAssembler* sasm, const char* name, bool must_gc_arguments, bool does_not_return=false);\n@@ -188,1 +189,1 @@\n-StubFrame::StubFrame(StubAssembler* sasm, const char* name, bool must_gc_arguments) {\n+StubFrame::StubFrame(StubAssembler* sasm, const char* name, bool must_gc_arguments, bool does_not_return) {\n@@ -190,0 +191,1 @@\n+  _does_not_return = does_not_return;\n@@ -199,1 +201,0 @@\n-\n@@ -201,1 +202,5 @@\n-  __ epilogue();\n+  if (_does_not_return) {\n+    __ should_not_reach_here();\n+  } else {\n+    __ epilogue();\n+  }\n@@ -348,2 +353,0 @@\n-\n-  __ should_not_reach_here();\n@@ -398,3 +401,1 @@\n-  default:\n-    __ should_not_reach_here();\n-    break;\n+  default: ShouldNotReachHere();\n@@ -440,0 +441,2 @@\n+  \/\/      Move it out of the way to the return register.\n+  __ mov(lr, r0);\n@@ -441,5 +444,2 @@\n-  \/\/ only r0 is valid at this time, all other registers have been destroyed by the runtime call\n-  __ invalidate_registers(false, true, true, true, true, true);\n-\n-  \/\/ patch the return address, this stub will directly return to the exception handler\n-  __ str(r0, Address(rfp, 1*BytesPerWord));\n+  \/\/ All registers have been destroyed by the runtime call\n+  __ invalidate_registers(true, true, true, true, true, true);\n@@ -455,3 +455,0 @@\n-    \/\/ Pop the return address.\n-    __ leave();\n-    __ ret(lr);  \/\/ jump to exception handler\n@@ -462,0 +459,5 @@\n+  \/\/ leave() the current frame, without changing the lr\n+  __ mov(sp, rfp);\n+  __ ldr(rfp, Address(__ post(sp, 2 * wordSize)));\n+\n+  __ ret(lr);\n@@ -605,0 +607,1 @@\n+  const bool does_not_return = true;\n@@ -615,1 +618,0 @@\n-      {\n@@ -617,3 +619,0 @@\n-        __ leave();\n-        __ ret(lr);\n-      }\n@@ -623,1 +622,1 @@\n-      { StubFrame f(sasm, \"throw_div0_exception\", dont_gc_arguments);\n+      { StubFrame f(sasm, \"throw_div0_exception\", dont_gc_arguments, does_not_return);\n@@ -629,1 +628,1 @@\n-      { StubFrame f(sasm, \"throw_null_pointer_exception\", dont_gc_arguments);\n+      { StubFrame f(sasm, \"throw_null_pointer_exception\", dont_gc_arguments, does_not_return);\n@@ -884,1 +883,1 @@\n-      { StubFrame f(sasm, \"throw_class_cast_exception\", dont_gc_arguments);\n+      { StubFrame f(sasm, \"throw_class_cast_exception\", dont_gc_arguments, does_not_return);\n@@ -890,1 +889,1 @@\n-      { StubFrame f(sasm, \"throw_incompatible_class_cast_exception\", dont_gc_arguments);\n+      { StubFrame f(sasm, \"throw_incompatible_class_cast_exception\", dont_gc_arguments, does_not_return);\n@@ -984,1 +983,1 @@\n-        StubFrame f(sasm, \"deoptimize\", dont_gc_arguments);\n+        StubFrame f(sasm, \"deoptimize\", dont_gc_arguments, does_not_return);\n@@ -1000,1 +999,1 @@\n-      { StubFrame f(sasm, \"range_check_failed\", dont_gc_arguments);\n+      { StubFrame f(sasm, \"range_check_failed\", dont_gc_arguments, does_not_return);\n@@ -1014,1 +1013,1 @@\n-      { StubFrame f(sasm, \"access_field_patching\", dont_gc_arguments);\n+      { StubFrame f(sasm, \"access_field_patching\", dont_gc_arguments, does_not_return);\n@@ -1021,1 +1020,1 @@\n-      { StubFrame f(sasm, \"load_klass_patching\", dont_gc_arguments);\n+      { StubFrame f(sasm, \"load_klass_patching\", dont_gc_arguments, does_not_return);\n@@ -1028,1 +1027,1 @@\n-      { StubFrame f(sasm, \"load_mirror_patching\", dont_gc_arguments);\n+      { StubFrame f(sasm, \"load_mirror_patching\", dont_gc_arguments, does_not_return);\n@@ -1035,1 +1034,1 @@\n-      { StubFrame f(sasm, \"load_appendix_patching\", dont_gc_arguments);\n+      { StubFrame f(sasm, \"load_appendix_patching\", dont_gc_arguments, does_not_return);\n@@ -1043,1 +1042,1 @@\n-      { StubFrame f(sasm, \"handle_exception\", dont_gc_arguments);\n+      { StubFrame f(sasm, \"handle_exception\", dont_gc_arguments, does_not_return);\n@@ -1049,1 +1048,1 @@\n-      { StubFrame f(sasm, \"handle_exception_from_callee\", dont_gc_arguments);\n+      { StubFrame f(sasm, \"handle_exception_from_callee\", dont_gc_arguments, does_not_return);\n@@ -1055,1 +1054,1 @@\n-      { StubFrame f(sasm, \"index_range_check_failed\", dont_gc_arguments);\n+      { StubFrame f(sasm, \"index_range_check_failed\", dont_gc_arguments, does_not_return);\n@@ -1061,1 +1060,1 @@\n-      { StubFrame f(sasm, \"throw_array_store_exception\", dont_gc_arguments);\n+      { StubFrame f(sasm, \"throw_array_store_exception\", dont_gc_arguments, does_not_return);\n@@ -1070,1 +1069,1 @@\n-        StubFrame f(sasm, \"predicate_failed_trap\", dont_gc_arguments);\n+        StubFrame f(sasm, \"predicate_failed_trap\", dont_gc_arguments, does_not_return);\n@@ -1098,1 +1097,1 @@\n-      { StubFrame f(sasm, \"unimplemented entry\", dont_gc_arguments);\n+      { StubFrame f(sasm, \"unimplemented entry\", dont_gc_arguments, does_not_return);\n@@ -1101,1 +1100,0 @@\n-        __ should_not_reach_here();\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_Runtime1_aarch64.cpp","additions":36,"deletions":38,"binary":false,"changes":74,"status":"modified"}]}