{"files":[{"patch":"@@ -526,1 +526,1 @@\n-  do_intrinsic(_poly1305_processBlocks, com_sun_crypto_provider_Poly1305, processMultipleBlocks_name, polyBlock_signature, F_S) \\\n+  do_intrinsic(_poly1305_processBlocks, com_sun_crypto_provider_Poly1305, processMultipleBlocks_name, putCharStringU_signature, F_R) \\\n@@ -528,1 +528,0 @@\n-   do_signature(polyBlock_signature, \"([BII[B[B)V\")                                                                     \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -6974,1 +6974,1 @@\n-  assert(callee()->signature()->size() == 5, \"poly1305_processBlocks has 5 parameters\");\n+  assert(callee()->signature()->size() == 3, \"poly1305_processBlocks has %d parameters\", callee()->signature()->size());\n@@ -6979,5 +6979,25 @@\n-  Node* input = argument(0);\n-  Node* input_offset = argument(1);\n-  Node* len = argument(2);\n-  Node* acc = argument(3);\n-  Node* r = argument(4);\n+  Node* polyObj = argument(0);\n+  Node* input = argument(1);\n+  Node* input_offset = argument(2);\n+  Node* len = argument(3);\n+  \/\/ Node* acc = argument(3);\n+  \/\/ Node* r = argument(4);\n+  Node* accFace = load_field_from_object(polyObj, \"a\", \"Lsun\/security\/util\/math\/MutableIntegerModuloP;\");\n+  Node* rFace = load_field_from_object(polyObj, \"r\", \"Lsun\/security\/util\/math\/IntegerModuloP;\");\n+  \n+  const TypeInstPtr* tinst = _gvn.type(polyObj)->isa_instptr();\n+  assert(tinst != NULL, \"Poly1305 obj is null\");\n+  assert(tinst->is_loaded(), \"Poly1305 obj is not loaded\");\n+  ciKlass* klass_PolyElement = tinst->instance_klass()->find_klass(ciSymbol::make(\"sun\/security\/util\/math\/intpoly\/IntegerPolynomial$Element\"));\n+  assert(klass_PolyElement->is_loaded(), \"predicate checks that this class is loaded\");\n+  ciInstanceKlass* instklass_PolyElement = klass_PolyElement->as_instance_klass();\n+\n+  const TypeKlassPtr* aklass = TypeKlassPtr::make(instklass_PolyElement);\n+  const TypeOopPtr* xtype = aklass->as_instance_type()->cast_to_ptr_type(TypePtr::NotNull);\n+  Node* accObj = new CheckCastPPNode(control(), accFace, xtype);\n+  accObj = _gvn.transform(accObj);\n+  Node* alimbs = load_field_from_object(accObj, \"limbs\", \"[J\");\n+\n+  Node* rObj = new CheckCastPPNode(control(), rFace, xtype);\n+  rObj = _gvn.transform(rObj);\n+  Node* rlimbs = load_field_from_object(rObj, \"limbs\", \"[J\");\n@@ -6986,2 +7006,2 @@\n-  acc = must_be_not_null(acc, true);\n-  r = must_be_not_null(r, true);\n+  alimbs = must_be_not_null(alimbs, true);\n+  rlimbs = must_be_not_null(rlimbs, true);\n@@ -6991,1 +7011,1 @@\n-  Node* acc_start = array_element_address(acc, intcon(0), T_BYTE);\n+  Node* acc_start = array_element_address(alimbs, intcon(0), T_LONG);\n@@ -6993,1 +7013,1 @@\n-  Node* r_start = array_element_address(r, intcon(0), T_BYTE);\n+  Node* r_start = array_element_address(rlimbs, intcon(0), T_LONG);\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":30,"deletions":10,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.lang.reflect.Field;\n@@ -171,1 +172,8 @@\n-        if (len >= 1024) {\n+        \/\/ System.out.println(\"VP was here>>>>>>>>>>>>>>>>>> \" + a.getClass());\n+        \/\/ for (Class<?> cls = a.getClass(); cls != null; cls = cls.getSuperclass()) {\n+        \/\/     for (Field f : cls.getDeclaredFields()) {\n+        \/\/         System.out.print(cls.getName() +\": \" + f.getName() + \"+\" + f.getType() + \"\\n\");\n+        \/\/     }\n+        \/\/ }\n+        \/\/ long[] limbs = a.getClass().getSuperclass().getDeclaredField(\"limbs\");\n+        \/\/ if (len >= 0) { \/\/1024) {\n@@ -176,2 +184,2 @@\n-            byte[] aBytes = this.a.asByteArray(BLOCK_LENGTH+1);\n-            byte[] rBytes = this.r.asByteArray(BLOCK_LENGTH);\n+            \/\/ byte[] aBytes = this.a.asByteArray(BLOCK_LENGTH+1);\n+            \/\/ byte[] rBytes = this.r.asByteArray(BLOCK_LENGTH);\n@@ -179,3 +187,3 @@\n-            processMultipleBlocksCheck(input, offset, blockMultipleLength, aBytes, rBytes);\n-            processMultipleBlocks(input, offset, blockMultipleLength, aBytes, rBytes);\n-            this.a.setValue(aBytes, 0, aBytes.length, (byte) 0);\n+            \/\/ processMultipleBlocksCheck(input, offset, blockMultipleLength, aBytes, rBytes);\n+            processMultipleBlocks(input, offset, blockMultipleLength);\n+            \/\/ this.a.setValue(aBytes, 0, aBytes.length, (byte) 0);\n@@ -184,7 +192,7 @@\n-        } else {\n-            while (len >= BLOCK_LENGTH) {\n-                processBlock(input, offset, BLOCK_LENGTH);\n-                offset += BLOCK_LENGTH;\n-                len -= BLOCK_LENGTH;\n-            }\n-        }\n+        \/\/ } else {\n+        \/\/     while (len >= BLOCK_LENGTH) {\n+        \/\/         processBlock(input, offset, BLOCK_LENGTH);\n+        \/\/         offset += BLOCK_LENGTH;\n+        \/\/         len -= BLOCK_LENGTH;\n+        \/\/     }\n+        \/\/ }\n@@ -260,4 +268,4 @@\n-    private static void processMultipleBlocks(byte[] input, int offset, int length, byte[] aBytes, byte[] rBytes) {\n-        MutableIntegerModuloP A = ipl1305.getElement(aBytes).mutable();\n-        MutableIntegerModuloP R = ipl1305.getElement(rBytes).mutable();\n-        MutableIntegerModuloP temp = ipl1305.get0().mutable();\n+    private void processMultipleBlocks(byte[] input, int offset, int length) { \/\/, MutableIntegerModuloP A, IntegerModuloP R) {\n+        \/\/ MutableIntegerModuloP A = ipl1305.getElement(aBytes).mutable();\n+        \/\/ MutableIntegerModuloP R = ipl1305.getElement(rBytes).mutable();\n+        \/\/ MutableIntegerModuloP temp = ipl1305.get0().mutable();\n@@ -265,3 +273,3 @@\n-            temp.setValue(input, offset, BLOCK_LENGTH, (byte)0x01);\n-            A.setSum(temp);                    \/\/ A += (temp | 0x01)\n-            A.setProduct(R);                   \/\/ A =  (A * R) % p\n+            n.setValue(input, offset, BLOCK_LENGTH, (byte)0x01);\n+            a.setSum(n);                    \/\/ A += (temp | 0x01)\n+            a.setProduct(r);                   \/\/ A =  (A * R) % p\n@@ -272,1 +280,1 @@\n-        A.asByteArray(aBytes);\n+        \/\/ A.asByteArray(aBytes);\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/Poly1305.java","additions":29,"deletions":21,"binary":false,"changes":50,"status":"modified"}]}