{"files":[{"patch":"@@ -599,1 +599,1 @@\n-  __ subq(rsp, 512\/8*6); \/\/ Make room to store 6 zmm registers (powers of R)\n+  __ subq(rsp, (512\/8)*6); \/\/ Make room to store 6 zmm registers (powers of R)\n@@ -784,1 +784,1 @@\n-                            R0, R1, R2, R1P, R2P); \/\/R^16..R^16, 4*5*R^16\n+                            R0, R1, R2, R1P, R2P); \/\/ R^16..R^16, 4*5*R^16\n@@ -786,1 +786,1 @@\n-                            R0, R1, R2, R1P, R2P); \/\/R^16..R^16, 4*5*R^16\n+                            R0, R1, R2, R1P, R2P); \/\/ R^16..R^16, 4*5*R^16\n@@ -790,1 +790,1 @@\n-  __ vpaddq(A2, A2, B2, Assembler::AVX_512bit); \/\/Add highest bits from new blocks to accumulator\n+  __ vpaddq(A2, A2, B2, Assembler::AVX_512bit); \/\/ Add highest bits from new blocks to accumulator\n@@ -828,3 +828,3 @@\n-                              B0, B1, B2, B3, B4); \/\/ R^16-R^9, R1P, R2P\n-  poly1305_multiply8_avx512(A3, A4, A5,              \/\/ MSG\/ACC 16 blocks\n-                              R0, R1, R2, R1P, R2P); \/\/ R^8-R, R1P, R2P\n+                            B0, B1, B2, B3, B4);   \/\/ R^16-R^9, R1P, R2P\n+  poly1305_multiply8_avx512(A3, A4, A5,            \/\/ MSG\/ACC 16 blocks\n+                            R0, R1, R2, R1P, R2P); \/\/ R^8-R, R1P, R2P\n@@ -885,2 +885,0 @@\n-  __ orq(a0, t1);\n-\n@@ -888,0 +886,1 @@\n+\n@@ -891,1 +890,0 @@\n-  __ orq(a1, t0);\n@@ -894,0 +892,4 @@\n+  __ addq(a0, t1);\n+  __ adcq(a1, t0);\n+  __ adcq(a2, 0);\n+\n@@ -956,0 +958,4 @@\n+  \/\/ c_rarg0 - rcx\n+  \/\/ c_rarg1 - rdx\n+  \/\/ c_rarg2 - r8\n+  \/\/ c_rarg3 - r9\n@@ -960,1 +966,6 @@\n-  #else  \/\/ input already in correct position for linux; dont clobber R, args copied out-of-order\n+  #else\n+  \/\/ c_rarg0 - rdi\n+  \/\/ c_rarg1 - rsi\n+  \/\/ c_rarg2 - rdx\n+  \/\/ c_rarg3 - rcx\n+  \/\/ dont clobber R, args copied out-of-order\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_poly.cpp","additions":22,"deletions":11,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+ * @key randomness\n@@ -48,0 +49,1 @@\n+ * @key randomness\n@@ -49,1 +51,0 @@\n- * @run main java.base\/com.sun.crypto.provider.Poly1305IntrinsicFuzzTest\n@@ -51,1 +52,1 @@\n- * @run main\/othervm -Xcomp -XX:-TieredCompilation com.sun.crypto.provider.Cipher.ChaCha20.Poly1305UnitTestDriver\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation java.base\/com.sun.crypto.provider.Poly1305IntrinsicFuzzTest\n@@ -57,1 +58,0 @@\n- * @run main java.base\/com.sun.crypto.provider.Poly1305KAT\n@@ -59,1 +59,1 @@\n- * @run main\/othervm -Xcomp -XX:-TieredCompilation com.sun.crypto.provider.Cipher.ChaCha20.Poly1305UnitTestDriver\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation java.base\/com.sun.crypto.provider.Poly1305KAT\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/ChaCha20\/unittest\/Poly1305UnitTestDriver.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+                System.out.println(\"Fuzz Success\");\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/ChaCha20\/unittest\/java.base\/com\/sun\/crypto\/provider\/Poly1305IntrinsicFuzzTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}