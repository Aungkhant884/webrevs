{"files":[{"patch":"@@ -8306,1 +8306,1 @@\n-  InstructionAttr attributes(vector_len, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ false, \/* uses_vl *\/ true);\n+  InstructionAttr attributes(vector_len, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ true);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -801,6 +801,6 @@\n-  evmovdquq(A0, Address(rsp, 64*3), Assembler::AVX_512bit);\n-  evmovdquq(A0, Address(rsp, 64*4), Assembler::AVX_512bit);\n-  evmovdquq(A0, Address(rsp, 64*5), Assembler::AVX_512bit);\n-  evmovdquq(A0, Address(rsp, 64*0), Assembler::AVX_512bit);\n-  evmovdquq(A0, Address(rsp, 64*1), Assembler::AVX_512bit);\n-  evmovdquq(A0, Address(rsp, 64*2), Assembler::AVX_512bit);\n+  evmovdquq(Address(rsp, 64*3), A0, Assembler::AVX_512bit);\n+  evmovdquq(Address(rsp, 64*4), A0, Assembler::AVX_512bit);\n+  evmovdquq(Address(rsp, 64*5), A0, Assembler::AVX_512bit);\n+  evmovdquq(Address(rsp, 64*0), A0, Assembler::AVX_512bit);\n+  evmovdquq(Address(rsp, 64*1), A0, Assembler::AVX_512bit);\n+  evmovdquq(Address(rsp, 64*2), A0, Assembler::AVX_512bit);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86_poly.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2003,1 +2003,1 @@\n-  __ align64();\n+  __ align(CodeEntryAlignment);\n@@ -2040,1 +2040,1 @@\n-  __ align64();\n+  __ align(CodeEntryAlignment);\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/cpu\/x86\/stubRoutines_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -957,0 +957,1 @@\n+      _features &= ~CPU_AVX512_IFMA;\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -175,1 +175,1 @@\n-            int blockMultipleLength = (len\/BLOCK_LENGTH) * BLOCK_LENGTH;\n+            int blockMultipleLength = len & (~(BLOCK_LENGTH-1));\n@@ -286,1 +286,1 @@\n-    private void setRSVals() { \/\/throws InvalidKeyException {\n+    private void setRSVals() throws InvalidKeyException {\n@@ -296,16 +296,15 @@\n-        \/\/ This should be enabled, but Poly1305KAT would fail\n-        \/\/ byte keyIsZero = 0;\n-        \/\/ for (int i = 0; i < RS_LENGTH; i++) {\n-        \/\/     keyIsZero |= keyBytes[i];\n-        \/\/ }\n-        \/\/ if (keyIsZero == 0) {\n-        \/\/     throw new InvalidKeyException(\"R is set to zero\");\n-        \/\/ }\n-\n-        \/\/ keyIsZero = 0;\n-        \/\/ for (int i = RS_LENGTH; i < 2*RS_LENGTH; i++) {\n-        \/\/     keyIsZero |= keyBytes[i];\n-        \/\/ }\n-        \/\/ if (keyIsZero == 0) {\n-        \/\/     throw new InvalidKeyException(\"S is set to zero\");\n-        \/\/ }\n+        byte keyIsZero = 0;\n+        for (int i = 0; i < RS_LENGTH; i++) {\n+            keyIsZero |= keyBytes[i];\n+        }\n+        if (keyIsZero == 0 && !katTesting) {\n+            throw new InvalidKeyException(\"R is set to zero\");\n+        }\n+\n+        keyIsZero = 0;\n+        for (int i = RS_LENGTH; i < 2*RS_LENGTH; i++) {\n+            keyIsZero |= keyBytes[i];\n+        }\n+        if (keyIsZero == 0 && !katTesting) {\n+            throw new InvalidKeyException(\"S is set to zero\");\n+        }\n@@ -317,0 +316,3 @@\n+\n+    \/\/ KAT testing expects R and\/or S to be set to 0 for some tests\n+    static boolean katTesting = false;\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/Poly1305.java","additions":20,"deletions":18,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -147,0 +147,1 @@\n+        authenticator.katTesting = true;\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/ChaCha20\/unittest\/java.base\/com\/sun\/crypto\/provider\/Poly1305KAT.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}