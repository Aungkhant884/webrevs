{"files":[{"patch":"@@ -40,1 +40,0 @@\n-import java.nio.file.Files;\n@@ -712,2 +711,1 @@\n-                                || (!fsv.isFileSystem(((File)objects[0]))\n-                                    && !Files.isSymbolicLink(((File)objects[0]).toPath())))) {\n+                                || (!fsv.isFileSystem((File)objects[0])))) {\n@@ -723,1 +721,1 @@\n-                                        && (fsv.isFileSystem(f) || Files.isSymbolicLink(f.toPath()))\n+                                        && fsv.isFileSystem(f)\n@@ -744,0 +742,1 @@\n+\n@@ -745,5 +744,1 @@\n-                            if (Files.isSymbolicLink(file.toPath())) {\n-                                chooser.setSelectedFile(file);\n-                            } else {\n-                                chooser.setSelectedFile(null);\n-                            }\n+                            chooser.setSelectedFile(null);\n@@ -1250,1 +1245,0 @@\n-\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/basic\/BasicFileChooserUI.java","additions":4,"deletions":10,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -860,0 +860,3 @@\n+    \/\/Checks only if it's .lnk shortcut link. Other two links\n+    \/\/namely Symbolic and Junctions returns false, so that the\n+    \/\/absolute path can be resolved.\n@@ -862,1 +865,3 @@\n-            cachedIsLink = hasAttribute(ATTRIB_LINK);\n+            cachedIsLink = hasAttribute(ATTRIB_LINK)\n+                    && (!isFileSystem()\n+                    || getPath().toLowerCase().endsWith(\".lnk\"));\n@@ -864,1 +869,0 @@\n-\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/shell\/Win32ShellFolder2.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,85 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JFileChooser;\n+import javax.swing.SwingUtilities;\n+import javax.swing.WindowConstants;\n+\n+import java.lang.reflect.InvocationTargetException;\n+\n+\/*\n+ * @test\n+ * @bug 8307105\n+ * @key headful\n+ * @requires (os.family == \"windows\")\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @summary Test to check if the certain windows like \"This PC\",\n+ * \"Library\", \"Network\" does not throw Invalid Path Exception on selection.\n+ * @run main\/manual FileChooserInvalidPathExceptionTest\n+ *\/\n+\n+public class FileChooserInvalidPathExceptionTest {\n+    static JFrame frame;\n+    static JFileChooser jfc;\n+    static PassFailJFrame passFailJFrame;\n+\n+    public static void main(String[] args) throws Exception {\n+        SwingUtilities.invokeAndWait(() -> {\n+            try {\n+                initialize();\n+            } catch (Exception e) {\n+                throw new RuntimeException(e);\n+            }\n+        });\n+        passFailJFrame.awaitAndCheck();\n+    }\n+\n+    static void initialize() throws Exception {\n+        \/\/Initialize the components\n+        final String INSTRUCTIONS = \"\"\"\n+                Instructions to Test:\n+                1. Navigate to any windows specific folders like My PC\/Libraries\/\n+                Network.\n+                2. Select and traverse through those folders.\n+                3. On click of the mentioned folder if InvalidPathException\n+                occurs does not occur then test is PASS.\n+                \"\"\";\n+        frame = new JFrame(\"JFileChooser IPE test\");\n+        jfc = new JFileChooser();\n+        passFailJFrame = new PassFailJFrame(\"Test Instructions\", INSTRUCTIONS, 5L, 8, 40);\n+\n+        PassFailJFrame.addTestWindow(frame);\n+        PassFailJFrame.positionTestWindow(frame, PassFailJFrame.Position.HORIZONTAL);\n+        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n+        jfc.setControlButtonsAreShown(false);\n+        jfc.setDialogType(JFileChooser.CUSTOM_DIALOG);\n+\n+        frame.add(jfc, BorderLayout.CENTER);\n+        frame.pack();\n+        frame.setVisible(true);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/FileChooserInvalidPathExceptionTest.java","additions":85,"deletions":0,"binary":false,"changes":85,"status":"added"}]}