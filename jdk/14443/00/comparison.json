{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+import javax.net.ssl.SNIServerName;\n@@ -64,1 +65,0 @@\n-    protected final String serverName;\n@@ -66,0 +66,1 @@\n+    private final List<SNIServerName> sniServerNames;\n@@ -76,1 +77,1 @@\n-        this.serverName = serverName.getName();\n+        this.sniServerNames = formSNIServerNames(serverName);\n@@ -78,1 +79,1 @@\n-        sslParameters = createSSLParameters(client, serverName, alpn);\n+        sslParameters = createSSLParameters(client, this.sniServerNames, alpn);\n@@ -80,1 +81,1 @@\n-        engine = createEngine(context, serverName.getName(), port, sslParameters);\n+        engine = createEngine(context, serverName.name(), port, sslParameters);\n@@ -91,0 +92,5 @@\n+    @Override\n+    public final List<SNIServerName> getSNIServerNames() {\n+        return this.sniServerNames;\n+    }\n+\n@@ -99,1 +105,1 @@\n-                                                     ServerName serverName,\n+                                                     List<SNIServerName> sniServerNames,\n@@ -119,1 +125,1 @@\n-                       Arrays.toString(alpn));\n+                    Arrays.toString(alpn));\n@@ -124,0 +130,8 @@\n+        sslParameters.setServerNames(sniServerNames);\n+        return sslParameters;\n+    }\n+\n+    private static List<SNIServerName> formSNIServerNames(final ServerName serverName) {\n+        if (serverName == null) {\n+            return List.of();\n+        }\n@@ -125,1 +139,1 @@\n-            String name = serverName.getName();\n+            String name = serverName.name();\n@@ -127,1 +141,1 @@\n-                sslParameters.setServerNames(List.of(new SNIHostName(name)));\n+                return List.of(new SNIHostName(name));\n@@ -130,1 +144,1 @@\n-        return sslParameters;\n+        return List.of();\n@@ -133,1 +147,0 @@\n-\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/AbstractAsyncSSLConnection.java","additions":24,"deletions":11,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -47,0 +47,3 @@\n+\n+import javax.net.ssl.SNIServerName;\n+\n@@ -427,0 +430,11 @@\n+    \/**\n+     * Returns an unmodifiable list of {@link SNIServerName}s that were used during TLS handshake\n+     * of this connection. If this connection doesn't represent a TLS based connection or if no SNI\n+     * server names were used during the handshake, then this method returns an empty list.\n+     *\n+     * @return the SNI server names\n+     *\/\n+    public List<SNIServerName> getSNIServerNames() {\n+        return List.of();\n+    }\n+\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/HttpConnection.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -480,16 +480,1 @@\n-    public static class ServerName {\n-        ServerName(String name, boolean isLiteral) {\n-            this.name = name;\n-            this.isLiteral = isLiteral;\n-        }\n-\n-        final String name;\n-        final boolean isLiteral;\n-\n-        public String getName() {\n-            return name;\n-        }\n-\n-        public boolean isLiteral() {\n-            return isLiteral;\n-        }\n+    public record ServerName (String name, boolean isLiteral) {\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/common\/Utils.java","additions":1,"deletions":16,"binary":false,"changes":17,"status":"modified"}]}