{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,1 @@\n+import java.util.Objects;\n@@ -42,1 +43,1 @@\n-class ZipFileStore extends FileStore {\n+final class ZipFileStore extends FileStore {\n@@ -67,0 +68,1 @@\n+        Objects.requireNonNull(type);\n@@ -75,0 +77,1 @@\n+        Objects.requireNonNull(name);\n@@ -81,2 +84,1 @@\n-        if (type == null)\n-            throw new NullPointerException();\n+        Objects.requireNonNull(type);\n@@ -103,0 +105,1 @@\n+        Objects.requireNonNull(attribute);\n@@ -109,1 +112,1 @@\n-         throw new UnsupportedOperationException(\"does not support the given attribute\");\n+        throw new UnsupportedOperationException(\"does not support the given attribute: \" + attribute);\n@@ -112,1 +115,1 @@\n-    private static class ZipFileStoreAttributes {\n+    private static final class ZipFileStoreAttributes {\n","filename":"src\/jdk.zipfs\/share\/classes\/jdk\/nio\/zipfs\/ZipFileStore.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+import java.nio.file.FileStore;\n@@ -48,0 +49,1 @@\n+import java.nio.file.attribute.FileAttributeView;\n@@ -76,1 +78,1 @@\n- *      8131067 8034802 8210899 8273961 8271079\n+ *      8131067 8034802 8210899 8273961 8271079 8299864\n@@ -95,1 +97,2 @@\n-            test2(fs);   \/\/ more tests\n+            test2(fs);\n+            testFileStoreNullArgs(fs); \/\/ more tests\n@@ -103,1 +106,1 @@\n-    private static Random rdm = new Random();\n+    private static final Random RDM = new Random();\n@@ -134,1 +137,1 @@\n-            rdm.nextBytes(bits);\n+            RDM.nextBytes(bits);\n@@ -185,2 +188,2 @@\n-            Path dst2 = getPathWithParents(fs, \"\/xyz\" + rdm.nextInt(100) +\n-                                           \"\/efg\" + rdm.nextInt(100) + \"\/foo.class\");\n+            Path dst2 = getPathWithParents(fs, \"\/xyz\" + RDM.nextInt(100) +\n+                                           \"\/efg\" + RDM.nextInt(100) + \"\/foo.class\");\n@@ -363,1 +366,1 @@\n-                        } catch (FileAlreadyExistsException x){\n+                        } catch (FileAlreadyExistsException x) {\n@@ -422,1 +425,1 @@\n-        Object[][] entries = new Object[10 + rdm.nextInt(20)][3];\n+        Object[][] entries = new Object[10 + RDM.nextInt(20)][3];\n@@ -433,4 +436,4 @@\n-            entries[i][1] = rdm.nextInt(10) % 2 == 0 ?\n-                METHOD_STORED : METHOD_DEFLATED;\n-            entries[i][2] = new byte[rdm.nextInt(8192)];\n-            rdm.nextBytes((byte[])entries[i][2]);\n+            entries[i][1] = RDM.nextInt(10) % 2 == 0 ?\n+                    METHOD_STORED : METHOD_DEFLATED;\n+            entries[i][2] = new byte[RDM.nextInt(8192)];\n+            RDM.nextBytes((byte[]) entries[i][2]);\n@@ -497,2 +500,2 @@\n-                    pos = rdm.nextInt((int) sbc.size());\n-                    len = rdm.nextInt(Math.min(buf.length, expected.length - pos));\n+                    pos = RDM.nextInt((int) sbc.size());\n+                    len = RDM.nextInt(Math.min(buf.length, expected.length - pos));\n@@ -935,2 +938,2 @@\n-                int pos = rdm.nextInt((int)chSrc.size());\n-                int limit = rdm.nextInt(1024);\n+                int pos = RDM.nextInt((int) chSrc.size());\n+                int limit = RDM.nextInt(1024);\n@@ -1082,0 +1085,31 @@\n+\n+    static void testFileStoreNullArgs(FileSystem fs)  {\n+        FileStore store = fs.getFileStores().iterator().next();\n+\n+        \/\/ Make sure we are testing the right thing\n+        if (!\"jdk.nio.zipfs.ZipFileStore\".equals(store.getClass().getName()))\n+            throw new AssertionError(store.getClass().getName());\n+\n+        assertThrowsNPE(() -> store.supportsFileAttributeView((String) null));\n+        assertThrowsNPE(() -> store.supportsFileAttributeView((Class<? extends FileAttributeView>) null));\n+        assertThrowsNPE(() -> store.getAttribute(null));\n+        assertThrowsNPE(() -> store.getFileStoreAttributeView(null));\n+    }\n+\n+    @FunctionalInterface\n+    private interface ThrowingRunnable {\n+        void run() throws Exception;\n+    }\n+\n+    static void assertThrowsNPE(ThrowingRunnable r) {\n+        try {\n+            r.run();\n+            \/\/ Didn't throw an exception\n+            throw new AssertionError();\n+        } catch (NullPointerException expected) {\n+            \/\/ happy path\n+        } catch (Exception e) {\n+            throw new AssertionError(e);\n+        }\n+    }\n+\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/ZipFSTester.java","additions":51,"deletions":17,"binary":false,"changes":68,"status":"modified"}]}