{"files":[{"patch":"@@ -28,2 +28,0 @@\n-import java.util.concurrent.atomic.AtomicLong;\n-\n@@ -41,1 +39,1 @@\n-    long numAllocationFailures = 0;\n+    volatile long numAllocationFailures = 0;\n","filename":"test\/hotspot\/jtreg\/runtime\/Metaspace\/elastic\/MetaspaceTestArena.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2020 SAP SE. All rights reserved.\n+ * Copyright (c) 2021 SAP SE. All rights reserved.\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,1 +66,1 @@\n-                if (t.allocator.arena.numAllocationFailures > 0) {\n+                if (t.allocator.arena.numAllocationFailures > 1000) {\n","filename":"test\/hotspot\/jtreg\/runtime\/Metaspace\/elastic\/MetaspaceTestManyArenasManyThreads.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2020 SAP SE. All rights reserved.\n+ * Copyright (c) 2021 SAP SE. All rights reserved.\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,0 @@\n-import java.util.Set;\n-\n@@ -56,0 +54,2 @@\n+        }\n+        for (Thread t: threads) {\n","filename":"test\/hotspot\/jtreg\/runtime\/Metaspace\/elastic\/MetaspaceTestWithThreads.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2020 SAP SE. All rights reserved.\n+ * Copyright (c) 2021 SAP SE. All rights reserved.\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,5 @@\n-    boolean allocationError = false;\n+\n+    \/\/ Allocate (breathe in) until arena is full, then - to test the arena deallocator - deallocate some allocations\n+    \/\/ and breathe in again until full.\n+    boolean breatheIn = true;\n+    int breatheOutTicks = 0;\n@@ -60,1 +64,0 @@\n-        allocationError = false;\n@@ -68,1 +71,3 @@\n-            allocationError = true;\n+            \/\/ On allocation error, breathe out a bit\n+            breatheIn = false;\n+            breatheOutTicks = 0;\n@@ -83,2 +88,2 @@\n-\n-        if (!allocationError) {\n+        if (breatheIn) {\n+            \/\/ allocate until we hit the ceiling\n@@ -86,1 +91,1 @@\n-            if(rollDice(profile.randomDeallocProbability)) {\n+            if (rollDice(profile.randomDeallocProbability)) {\n@@ -90,2 +95,5 @@\n-            deallocateRandomly();\n-            allocationError = false;\n+            if (++breatheOutTicks < 100) {\n+                deallocateRandomly();\n+            } else {\n+                breatheIn = true;\n+            }\n@@ -93,1 +101,0 @@\n-\n@@ -95,1 +102,0 @@\n-\n@@ -105,0 +111,4 @@\n+    long numAllocationFailures() {\n+        return arena.numAllocationFailures;\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/Metaspace\/elastic\/RandomAllocator.java","additions":22,"deletions":12,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2020 SAP SE. All rights reserved.\n+ * Copyright (c) 2021 SAP SE. All rights reserved.\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-import java.util.Random;\n@@ -58,3 +57,1 @@\n-            for (int i = 0; i < 1000; i++) {\n-                allocator.tick();\n-            }\n+            allocator.tick();\n","filename":"test\/hotspot\/jtreg\/runtime\/Metaspace\/elastic\/RandomAllocatorThread.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n- * @test id=debug-default\n+ * @test id=debugdefault\n@@ -61,1 +61,1 @@\n- * @test id=debug-none\n+ * @test id=debugnone\n@@ -79,1 +79,1 @@\n- * @test id=debug-aggressive\n+ * @test id=debugaggressive\n@@ -97,1 +97,1 @@\n- * @test id=debug-guard\n+ * @test id=debugguard\n@@ -115,1 +115,1 @@\n- * @test id=ndebug-default\n+ * @test id=ndebugdefault\n@@ -131,1 +131,1 @@\n- * @test id=ndebug-none\n+ * @test id=ndebugnone\n@@ -148,1 +148,1 @@\n- * @test id=ndebug-aggressive\n+ * @test id=ndebugaggressive\n","filename":"test\/hotspot\/jtreg\/runtime\/Metaspace\/elastic\/TestMetaspaceAllocationMT2.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}