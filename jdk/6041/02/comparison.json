{"files":[{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2020 SAP SE. All rights reserved.\n+ * Copyright (c) 2021 SAP SE. All rights reserved.\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,1 +66,1 @@\n-                if (t.allocator.arena.numAllocationFailures > 0) {\n+                if (t.allocator.arena.numAllocationFailures > 1000) {\n","filename":"test\/hotspot\/jtreg\/runtime\/Metaspace\/elastic\/MetaspaceTestManyArenasManyThreads.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2020 SAP SE. All rights reserved.\n+ * Copyright (c) 2021 SAP SE. All rights reserved.\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,0 @@\n-import java.util.Set;\n-\n@@ -56,0 +54,2 @@\n+        }\n+        for (Thread t: threads) {\n","filename":"test\/hotspot\/jtreg\/runtime\/Metaspace\/elastic\/MetaspaceTestWithThreads.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2020 SAP SE. All rights reserved.\n+ * Copyright (c) 2021 SAP SE. All rights reserved.\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,3 @@\n-    boolean allocationError = false;\n+\n+    boolean breatheIn = true;\n+    int breatheTicks = 0;\n@@ -60,1 +62,1 @@\n-        allocationError = false;\n+        breatheTicks++;\n@@ -68,1 +70,3 @@\n-            allocationError = true;\n+            \/\/ On allocation error, breathe out a bit\n+            breatheIn = false;\n+            breatheTicks = 0;\n@@ -74,0 +78,1 @@\n+        breatheTicks++;\n@@ -84,1 +89,1 @@\n-        if (!allocationError) {\n+        if (breatheIn) {\n@@ -86,1 +91,1 @@\n-            if(rollDice(profile.randomDeallocProbability)) {\n+            if (rollDice(profile.randomDeallocProbability)) {\n@@ -91,1 +96,6 @@\n-            allocationError = false;\n+            if (breatheTicks > 100) {\n+                \/\/ After allocation error, breathe out a bit. Stop after 100 deallocations\n+                \/\/ to breathe in again (should cause us to float just below the ceiling).\n+                breatheIn = true;\n+                breatheTicks = 0;\n+            }\n@@ -105,0 +115,4 @@\n+    long numAllocationFailures() {\n+        return arena.numAllocationFailures;\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/Metaspace\/elastic\/RandomAllocator.java","additions":22,"deletions":8,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2020 SAP SE. All rights reserved.\n+ * Copyright (c) 2021 SAP SE. All rights reserved.\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-import java.util.Random;\n@@ -58,3 +57,1 @@\n-            for (int i = 0; i < 1000; i++) {\n-                allocator.tick();\n-            }\n+            allocator.tick();\n","filename":"test\/hotspot\/jtreg\/runtime\/Metaspace\/elastic\/RandomAllocatorThread.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"}]}