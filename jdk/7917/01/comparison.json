{"files":[{"patch":"@@ -155,8 +155,2 @@\n-  static int get_num_caller_save_xmms(void) {\n-    int num_caller_save_xmm_regs = nof_caller_save_xmm_regs;\n-#ifdef _LP64\n-    if (UseAVX < 3) {\n-      num_caller_save_xmm_regs = num_caller_save_xmm_regs \/ 2;\n-    }\n-#endif\n-    return num_caller_save_xmm_regs;\n+  static int get_num_caller_save_xmms() {\n+    return XMMRegisterImpl::available_xmm_registers();\n","filename":"src\/hotspot\/cpu\/x86\/c1_FrameMap_x86.hpp","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -104,6 +104,1 @@\n-  int last_xmm_reg = pd_last_xmm_reg;\n-#ifdef _LP64\n-  if (UseAVX < 3) {\n-    last_xmm_reg = pd_first_xmm_reg + (pd_nof_xmm_regs_frame_map \/ 2) - 1;\n-  }\n-#endif\n+  int last_xmm_reg = pd_first_xmm_reg + XMMRegisterImpl::available_xmm_registers() - 1;\n","filename":"src\/hotspot\/cpu\/x86\/c1_LinearScan_x86.hpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"c1\/c1_FrameMap.hpp\"\n@@ -372,6 +373,1 @@\n-  int xmm_bypass_limit = FrameMap::nof_xmm_regs;\n-#ifdef _LP64\n-  if (UseAVX < 3) {\n-    xmm_bypass_limit = xmm_bypass_limit \/ 2;\n-  }\n-#endif\n+  int xmm_bypass_limit = FrameMap::get_num_caller_save_xmms();\n@@ -490,1 +486,1 @@\n-      int xmm_bypass_limit = FrameMap::nof_xmm_regs;\n+      int xmm_bypass_limit = FrameMap::get_num_caller_save_xmms();\n@@ -492,5 +488,0 @@\n-#ifdef _LP64\n-      if (UseAVX < 3) {\n-        xmm_bypass_limit = xmm_bypass_limit \/ 2;\n-      }\n-#endif\n@@ -516,4 +507,1 @@\n-    int xmm_bypass_limit = FrameMap::nof_xmm_regs;\n-    if (UseAVX < 3) {\n-      xmm_bypass_limit = xmm_bypass_limit \/ 2;\n-    }\n+    int xmm_bypass_limit = FrameMap::get_num_caller_save_xmms();\n","filename":"src\/hotspot\/cpu\/x86\/c1_Runtime1_x86.cpp","additions":4,"deletions":16,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"c1\/c1_FrameMap.hpp\"\n@@ -3597,0 +3596,1 @@\n+  int num_xmm_registers = XMMRegisterImpl::available_xmm_registers();\n@@ -3599,2 +3599,2 @@\n-  if (FrameMap::get_num_caller_save_xmms() > 16) {\n-     result += XMMRegSet::range(xmm16, as_XMMRegister(FrameMap::get_num_caller_save_xmms() - 1));\n+  if (num_xmm_registers > 16) {\n+     result += XMMRegSet::range(xmm16, as_XMMRegister(num_xmm_registers - 1));\n@@ -3604,1 +3604,1 @@\n-  return XMMRegSet::range(xmm0, as_XMMRegister(FrameMap::get_num_caller_save_xmms() - 1));\n+  return XMMRegSet::range(xmm0, as_XMMRegister(num_xmm_registers - 1));\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+\n","filename":"src\/hotspot\/cpu\/x86\/register_x86.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"runtime\/globals.hpp\"\n@@ -166,0 +167,12 @@\n+\n+  \/\/ Actually available XMM registers for use, depending on actual CPU capabilities\n+  \/\/ and flags.\n+  static int available_xmm_registers() {\n+    int num_xmm_regs = XMMRegisterImpl::number_of_registers;\n+#ifdef _LP64\n+    if (UseAVX < 3) {\n+      num_xmm_regs \/= 2;\n+    }\n+#endif\n+    return num_xmm_regs;\n+  }\n","filename":"src\/hotspot\/cpu\/x86\/register_x86.hpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -177,4 +177,1 @@\n-  int num_xmm_regs = XMMRegisterImpl::number_of_registers;\n-  if (UseAVX < 3) {\n-    num_xmm_regs = num_xmm_regs\/2;\n-  }\n+  int num_xmm_regs = XMMRegisterImpl::available_xmm_registers();\n@@ -370,4 +367,1 @@\n-  int num_xmm_regs = XMMRegisterImpl::number_of_registers;\n-  if (UseAVX < 3) {\n-    num_xmm_regs = num_xmm_regs\/2;\n-  }\n+  int num_xmm_regs = XMMRegisterImpl::available_xmm_registers();\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-\n+#include \"register_x86.hpp\"\n@@ -39,8 +39,2 @@\n-  int uarch_max_xmm = ConcreteRegisterImpl::max_xmm;\n-\n-#ifdef _LP64\n-  if (UseAVX < 3) {\n-    int half_xmm = (XMMRegisterImpl::max_slots_per_register * XMMRegisterImpl::number_of_registers) \/ 2;\n-    uarch_max_xmm -= half_xmm;\n-  }\n-#endif\n+  int uarch_max_xmm = ConcreteRegisterImpl::max_fpr +\n+    (XMMRegisterImpl::max_slots_per_register * XMMRegisterImpl::available_xmm_registers());\n","filename":"src\/hotspot\/cpu\/x86\/vmreg_x86.hpp","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"}]}