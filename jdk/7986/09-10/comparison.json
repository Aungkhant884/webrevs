{"files":[{"patch":"@@ -200,3 +200,1 @@\n-     * {@code b[b.length-1]} unaffected. Sublasses of {@code InputStream} are\n-     * free to relax this requirement and overwrite the elements\n-     * {@code b[}<i>k<\/i>{@code ]} through {@code b[b.length-1]}.\n+     * {@code b[b.length-1]} unaffected.\n@@ -243,3 +241,1 @@\n-     * {@code b[off+len-1]} unaffected. Subclasses of {@code InputStream} are\n-     * free to relax this requirement and overwrite the elements\n-     * {@code b[}<i>k<\/i>{@code ]} through {@code b[b.length-1]}.\n+     * {@code b[off+len-1]} unaffected.\n","filename":"src\/java.base\/share\/classes\/java\/io\/InputStream.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -843,0 +843,7 @@\n+     * @apiNote The {@code InputStream} returned by this method can wrap\n+     * an {@link java.util.zip.InflaterInputStream InflaterInputStream}\n+     * which leaves the contents of the output buffer beyond the\n+     * last inflated byte undefined after a read operation (see {@link\n+     * java.util.zip.InflaterInputStream#read(byte[], int, int)\n+     * InflaterInputStream.read(byte[], int, int)}).\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/net\/URLConnection.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -825,0 +825,7 @@\n+     *\n+     * @apiNote This method can return an {@link java.util.zip.InflaterInputStream\n+     * InflaterInputStream} which leaves the contents of the output buffer beyond\n+     * the last inflated byte undefined after a read operation (see {@link\n+     * java.util.zip.InflaterInputStream#read(byte[], int, int)\n+     * InflaterInputStream.read(byte[], int, int)}).\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/util\/jar\/JarFile.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -170,4 +170,12 @@\n-     * Reads from the current JAR file entry into an array of bytes.\n-     * If {@code len} is not zero, the method\n-     * blocks until some input is available; otherwise, no\n-     * bytes are read and {@code 0} is returned.\n+     * Reads from the current ZIP entry into an array of bytes, returning the number of\n+     * inflated bytes. If {@code len} is not zero, the method blocks until some input is\n+     * available; otherwise, no bytes are read and {@code 0} is returned.\n+     * <p>\n+     * If the current entry is compressed and <i>n<\/i> denotes a nonzero number of inflated\n+     * bytes to return, then {@code b[off]} trough {@code b[off+}<i>n<\/i>{@code -1]} will\n+     * contain the uncompressed data. The elements {@code b[off+}<i>n<\/i>{@code ]} through\n+     * {@code b[off+}<i>len<\/i>{@code -1]} are undefined (an implementation is free to\n+     * change them during the inflate operation). If the return value is -1 or an exception\n+     * is thrown, then the content of {@code b[off]} to {@code b[off+}<i>len<\/i>{@code -1]}\n+     * is undefined.\n+     * <p>\n","filename":"src\/java.base\/share\/classes\/java\/util\/jar\/JarInputStream.java","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -346,0 +346,6 @@\n+     * @apiNote This method can return an {@link java.util.zip.InflaterInputStream\n+     * InflaterInputStream} which leaves the contents of the output buffer beyond\n+     * the last inflated byte undefined after a read operation (see {@link\n+     * java.util.zip.InflaterInputStream#read(byte[], int, int)\n+     * InflaterInputStream.read(byte[], int, int)}).\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipFile.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -183,1 +183,1 @@\n-     * @return the actual number of inflated bytes, or -1 if the end of the\n+     * @return the actual number of bytes read, or -1 if the end of the\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipInputStream.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}