{"files":[{"patch":"@@ -843,0 +843,6 @@\n+     * @apiNote The {@code InputStream} returned by this method can wrap an\n+     * {@link java.util.zip.InflaterInputStream InflaterInputStream}, whose\n+     * {@link java.util.zip.InflaterInputStream#read(byte[], int, int)\n+     * read(byte[], int, int)} method can modify any element of the output\n+     * buffer.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/net\/URLConnection.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -825,0 +825,7 @@\n+     *\n+     * @apiNote The {@code InputStream} returned by this method can wrap an\n+     * {@link java.util.zip.InflaterInputStream InflaterInputStream}, whose\n+     * {@link java.util.zip.InflaterInputStream#read(byte[], int, int)\n+     * read(byte[], int, int)} method can modify any element of the output\n+     * buffer.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/util\/jar\/JarFile.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -170,4 +170,15 @@\n-     * Reads from the current JAR file entry into an array of bytes.\n-     * If {@code len} is not zero, the method\n-     * blocks until some input is available; otherwise, no\n-     * bytes are read and {@code 0} is returned.\n+     * Reads from the current JAR entry into an array of bytes, returning the number of\n+     * inflated bytes. If {@code len} is not zero, the method blocks until some input is\n+     * available; otherwise, no bytes are read and {@code 0} is returned.\n+     * <p>\n+     * If the current entry is compressed and this method returns a nonzero\n+     * integer <i>n<\/i> then {@code buf[off]}\n+     * through {@code buf[off+}<i>n<\/i>{@code -1]} contain the uncompressed\n+     * data.  The content of elements {@code buf[off+}<i>n<\/i>{@code ]} through\n+     * {@code buf[off+}<i>len<\/i>{@code -1]} is undefined, contrary to the\n+     * specification of the {@link java.io.InputStream InputStream} superclass,\n+     * so an implementation is free to modify these elements during the inflate\n+     * operation. If this method returns {@code -1} or throws an exception then\n+     * the content of {@code buf[off]} through {@code buf[off+}<i>len<\/i>{@code\n+     * -1]} is undefined.\n+     * <p>\n","filename":"src\/java.base\/share\/classes\/java\/util\/jar\/JarInputStream.java","additions":15,"deletions":4,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -95,3 +95,14 @@\n-     * Reads uncompressed data into an array of bytes. If {@code len} is not\n-     * zero, the method will block until some input can be decompressed; otherwise,\n-     * no bytes are read and {@code 0} is returned.\n+     * Reads uncompressed data into an array of bytes, returning the number of inflated\n+     * bytes. If {@code len} is not zero, the method will block until some input can be\n+     * decompressed; otherwise, no bytes are read and {@code 0} is returned.\n+     * <p>\n+     * If this method returns a nonzero integer <i>n<\/i> then {@code buf[off]}\n+     * through {@code buf[off+}<i>n<\/i>{@code -1]} contain the uncompressed\n+     * data.  The content of elements {@code buf[off+}<i>n<\/i>{@code ]} through\n+     * {@code buf[off+}<i>len<\/i>{@code -1]} is undefined, contrary to the\n+     * specification of the {@link java.io.InputStream InputStream} superclass,\n+     * so an implementation is free to modify these elements during the inflate\n+     * operation. If this method returns {@code -1} or throws an exception then\n+     * the content of {@code buf[off]} through {@code buf[off+}<i>len<\/i>{@code\n+     * -1]} is undefined.\n+     *\n@@ -99,1 +110,1 @@\n-     * @param off the start offset in the destination array {@code b}\n+     * @param off the start offset in the destination array {@code buf}\n@@ -101,1 +112,1 @@\n-     * @return  the actual number of bytes read, or -1 if the end of the\n+     * @return  the actual number of bytes inflated, or -1 if the end of the\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/GZIPInputStream.java","additions":17,"deletions":6,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -127,3 +127,14 @@\n-     * Reads uncompressed data into an array of bytes. If {@code len} is not\n-     * zero, the method will block until some input can be decompressed; otherwise,\n-     * no bytes are read and {@code 0} is returned.\n+     * Reads uncompressed data into an array of bytes, returning the number of inflated\n+     * bytes. If {@code len} is not zero, the method will block until some input can be\n+     * decompressed; otherwise, no bytes are read and {@code 0} is returned.\n+     * <p>\n+     * If this method returns a nonzero integer <i>n<\/i> then {@code buf[off]}\n+     * through {@code buf[off+}<i>n<\/i>{@code -1]} contain the uncompressed\n+     * data.  The content of elements {@code buf[off+}<i>n<\/i>{@code ]} through\n+     * {@code buf[off+}<i>len<\/i>{@code -1]} is undefined, contrary to the\n+     * specification of the {@link java.io.InputStream InputStream} superclass,\n+     * so an implementation is free to modify these elements during the inflate\n+     * operation. If this method returns {@code -1} or throws an exception then\n+     * the content of {@code buf[off]} through {@code buf[off+}<i>len<\/i>{@code\n+     * -1]} is undefined.\n+     *\n@@ -133,1 +144,1 @@\n-     * @return the actual number of bytes read, or -1 if the end of the\n+     * @return the actual number of bytes inflated, or -1 if the end of the\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/InflaterInputStream.java","additions":15,"deletions":4,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -346,0 +346,6 @@\n+     * @apiNote The {@code InputStream} returned by this method can wrap an\n+     * {@link java.util.zip.InflaterInputStream InflaterInputStream}, whose\n+     * {@link java.util.zip.InflaterInputStream#read(byte[], int, int)\n+     * read(byte[], int, int)} method can modify any element of the output\n+     * buffer.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipFile.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -168,4 +168,15 @@\n-     * Reads from the current ZIP entry into an array of bytes.\n-     * If {@code len} is not zero, the method\n-     * blocks until some input is available; otherwise, no\n-     * bytes are read and {@code 0} is returned.\n+     * Reads from the current ZIP entry into an array of bytes, returning the number of\n+     * inflated bytes. If {@code len} is not zero, the method blocks until some input is\n+     * available; otherwise, no bytes are read and {@code 0} is returned.\n+     * <p>\n+     * If the current entry is compressed and this method returns a nonzero\n+     * integer <i>n<\/i> then {@code buf[off]}\n+     * through {@code buf[off+}<i>n<\/i>{@code -1]} contain the uncompressed\n+     * data.  The content of elements {@code buf[off+}<i>n<\/i>{@code ]} through\n+     * {@code buf[off+}<i>len<\/i>{@code -1]} is undefined, contrary to the\n+     * specification of the {@link java.io.InputStream InputStream} superclass,\n+     * so an implementation is free to modify these elements during the inflate\n+     * operation. If this method returns {@code -1} or throws an exception then\n+     * the content of {@code buf[off]} through {@code buf[off+}<i>len<\/i>{@code\n+     * -1]} is undefined.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipInputStream.java","additions":16,"deletions":5,"binary":false,"changes":21,"status":"modified"}]}