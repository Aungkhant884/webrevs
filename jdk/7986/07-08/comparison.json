{"files":[{"patch":"@@ -202,1 +202,1 @@\n-     * {@code b[b.length-1]} unaffected.\n+     * {@code b[b.length-1]} undefined.\n@@ -242,1 +242,1 @@\n-     * {@code b[off+len-1]} unaffected.\n+     * {@code b[off+len-1]} undefined.\n","filename":"src\/java.base\/share\/classes\/java\/io\/InputStream.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -95,11 +95,3 @@\n-     * Reads uncompressed data into an array of bytes, returning the number of inflated\n-     * bytes. If {@code len} is not zero, the method will block until some input can be\n-     * decompressed; otherwise, no bytes are read and {@code 0} is returned.\n-     * <p>\n-     * If <i>n<\/i> denotes a nonzero number of inflated bytes to return, then {@code buf[off]}\n-     * through {@code buf[off+}<i>n<\/i>{@code -1]} will contain the uncompressed data. The\n-     * elements {@code buf[off+}<i>n<\/i>{@code ]} through {@code buf[off+}<i>len<\/i>{@code -1]}\n-     * are undefined (an implementation is free to change them during the inflate\n-     * operation). If the return value is -1 or an exception is thrown, then the content of\n-     * {@code buf[off]} to {@code buf[off+}<i>len<\/i>{@code -1]} is undefined.\n-     *\n+     * Reads uncompressed data into an array of bytes. If {@code len} is not\n+     * zero, the method will block until some input can be decompressed; otherwise,\n+     * no bytes are read and {@code 0} is returned.\n@@ -107,1 +99,1 @@\n-     * @param off the start offset in the destination array {@code buf}\n+     * @param off the start offset in the destination array {@code b}\n@@ -109,1 +101,1 @@\n-     * @return  the actual number of inflated bytes, or -1 if the end of the\n+     * @return  the actual number of bytes read, or -1 if the end of the\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/GZIPInputStream.java","additions":6,"deletions":14,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -127,11 +127,3 @@\n-     * Reads uncompressed data into an array of bytes, returning the number of inflated\n-     * bytes. If {@code len} is not zero, the method will block until some input can be\n-     * decompressed; otherwise, no bytes are read and {@code 0} is returned.\n-     * <p>\n-     * If <i>n<\/i> denotes a nonzero number of inflated bytes to return, then {@code b[off]}\n-     * through {@code b[off+}<i>n<\/i>{@code -1]} will contain the uncompressed data. The\n-     * elements {@code b[off+}<i>n<\/i>{@code ]} through {@code b[off+}<i>len<\/i>{@code -1]}\n-     * are undefined (an implementation is free to change them during the inflate\n-     * operation). If the return value is -1 or an exception is thrown, then the content of\n-     * {@code b[off]} to {@code b[off+}<i>len<\/i>{@code -1]} is undefined.\n-     *\n+     * Reads uncompressed data into an array of bytes. If {@code len} is not\n+     * zero, the method will block until some input can be decompressed; otherwise,\n+     * no bytes are read and {@code 0} is returned.\n@@ -141,1 +133,1 @@\n-     * @return the actual number of inflated bytes, or -1 if the end of the\n+     * @return the actual number of bytes read, or -1 if the end of the\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/InflaterInputStream.java","additions":4,"deletions":12,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -168,12 +168,4 @@\n-     * Reads from the current ZIP entry into an array of bytes, returning the number of\n-     * inflated bytes. If {@code len} is not zero, the method blocks until some input is\n-     * available; otherwise, no bytes are read and {@code 0} is returned.\n-     * <p>\n-     * If the current entry is compressed and <i>n<\/i> denotes a nonzero number of inflated\n-     * bytes to return, then {@code b[off]} trough {@code b[off+}<i>n<\/i>{@code -1]} will\n-     * contain the uncompressed data. The elements {@code b[off+}<i>n<\/i>{@code ]} through\n-     * {@code b[off+}<i>len<\/i>{@code -1]} are undefined (an implementation is free to\n-     * change them during the inflate operation). If the return value is -1 or an exception\n-     * is thrown, then the content of {@code b[off]} to {@code b[off+}<i>len<\/i>{@code -1]}\n-     * is undefined.\n-     *\n+     * Reads from the current ZIP entry into an array of bytes.\n+     * If {@code len} is not zero, the method\n+     * blocks until some input is available; otherwise, no\n+     * bytes are read and {@code 0} is returned.\n@@ -183,1 +175,1 @@\n-     * @return the actual number of inflated bytes, or -1 if the end of the\n+     * @return the actual number of bytes read, or -1 if the end of the\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipInputStream.java","additions":6,"deletions":14,"binary":false,"changes":20,"status":"modified"}]}