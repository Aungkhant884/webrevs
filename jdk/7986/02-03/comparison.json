{"files":[{"patch":"@@ -98,0 +98,8 @@\n+     * <p>\n+     * If <i>n<\/i> denotes the returned number of inflated bytes then {@code buf[off]}\n+     * trough {@code buf[off+}<i>n<\/i>{@code -1]} will contain the uncompressed data. The\n+     * elements {@code buf[off+}<i>n<\/i>{@code ]} through {@code buf[off+}<i>len<\/i>{@code -1]}\n+     * are undefined and an implementation is free to change them during the inflate\n+     * operation. If the return value is -1 or an exception is thrown the whole\n+     * content of {@code buf} is undefined.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/GZIPInputStream.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -130,9 +130,7 @@\n-     *\n-     * <p>Unlike the {@link InputStream#read(byte[],int,int) overridden method}\n-     * of {@code InputStream}, this method might write some additional bytes beyond the\n-     * last uncompressed byte. If <i>n<\/i> denotes the returned number of inflated bytes\n-     * than {@code b[off]} trough {@code b[off+}<i>n<\/i>{@code -1]} will contain the\n-     * uncompressed data while the elements {@code b[off+}<i>n<\/i>{@code ]} through\n-     * {@code b[off+}<i>len<\/i>{@code -1]} are undefined and their value may or may not have\n-     * been changed by the inflate operation. If the return value <i>n<\/i> is -1 the whole\n-     * content of {@code b[off]} to {@code b[off+len-1]} will be undefined.\n+     * <p>\n+     * If <i>n<\/i> denotes the returned number of inflated bytes then {@code b[off]}\n+     * trough {@code b[off+}<i>n<\/i>{@code -1]} will contain the uncompressed data. The\n+     * elements {@code b[off+}<i>n<\/i>{@code ]} through {@code b[off+}<i>len<\/i>{@code -1]}\n+     * are undefined and an implementation is free to change them during the inflate\n+     * operation. If the return value is -1 or an exception is thrown the whole\n+     * content of {@code b} is undefined.\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/InflaterInputStream.java","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -346,0 +346,3 @@\n+     * @implNote In the JDK implementation this method returns an\n+     * {@link java.util.zip.InflaterInputStream}.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipFile.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -172,0 +172,8 @@\n+     * <p>\n+     * If <i>n<\/i> denotes the returned number of inflated bytes then {@code b[off]}\n+     * trough {@code b[off+}<i>n<\/i>{@code -1]} will contain the uncompressed data. The\n+     * elements {@code b[off+}<i>n<\/i>{@code ]} through {@code b[off+}<i>len<\/i>{@code -1]}\n+     * are undefined and an implementation is free to change them during the inflate\n+     * operation. If the return value is -1 or an exception is thrown the whole\n+     * content of {@code b} is undefined.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipInputStream.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"}]}