{"files":[{"patch":"@@ -843,6 +843,5 @@\n-     * @apiNote The {@code InputStream} returned by this method can wrap\n-     * an {@link java.util.zip.InflaterInputStream InflaterInputStream}\n-     * which leaves the contents of the output buffer beyond the\n-     * last inflated byte undefined after a read operation (see {@link\n-     * java.util.zip.InflaterInputStream#read(byte[], int, int)\n-     * InflaterInputStream.read(byte[], int, int)}).\n+     * @apiNote The {@code InputStream} returned by this method can wrap an\n+     * {@link java.util.zip.InflaterInputStream InflaterInputStream}, whose\n+     * {@link java.util.zip.InflaterInputStream#read(byte[], int, int)\n+     * read(byte[], int, int)} method can modify any element of the output\n+     * buffer.\n","filename":"src\/java.base\/share\/classes\/java\/net\/URLConnection.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -826,5 +826,5 @@\n-     * @apiNote This method can return an {@link java.util.zip.InflaterInputStream\n-     * InflaterInputStream} which leaves the contents of the output buffer beyond\n-     * the last inflated byte undefined after a read operation (see {@link\n-     * java.util.zip.InflaterInputStream#read(byte[], int, int)\n-     * InflaterInputStream.read(byte[], int, int)}).\n+     * @apiNote The {@code InputStream} returned by this method can wrap an\n+     * {@link java.util.zip.InflaterInputStream InflaterInputStream}, whose\n+     * {@link java.util.zip.InflaterInputStream#read(byte[], int, int)\n+     * read(byte[], int, int)} method can modify any element of the output\n+     * buffer.\n","filename":"src\/java.base\/share\/classes\/java\/util\/jar\/JarFile.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -174,7 +174,10 @@\n-     * If the current entry is compressed and <i>n<\/i> denotes a nonzero number of inflated\n-     * bytes to return, then {@code b[off]} trough {@code b[off+}<i>n<\/i>{@code -1]} will\n-     * contain the uncompressed data. The elements {@code b[off+}<i>n<\/i>{@code ]} through\n-     * {@code b[off+}<i>len<\/i>{@code -1]} are undefined (an implementation is free to\n-     * change them during the inflate operation). If the return value is -1 or an exception\n-     * is thrown, then the content of {@code b[off]} to {@code b[off+}<i>len<\/i>{@code -1]}\n-     * is undefined.\n+     * If the current entry is compressed and this method returns a nonzero\n+     * integer <i>n<\/i> then {@code buf[off]}\n+     * through {@code buf[off+}<i>n<\/i>{@code -1]} contain the uncompressed\n+     * data.  The content of elements {@code buf[off+}<i>n<\/i>{@code ]} through\n+     * {@code buf[off+}<i>len<\/i>{@code -1]} is undefined, contrary to the\n+     * specification of the {@link java.io.InputStream InputStream} superclass,\n+     * so an implementation is free to modify these elements during the inflate\n+     * operation. If this method returns {@code -1} or throws an exception then\n+     * the content of {@code buf[off]} through {@code buf[off+}<i>len<\/i>{@code\n+     * -1]} is undefined.\n","filename":"src\/java.base\/share\/classes\/java\/util\/jar\/JarInputStream.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -99,6 +99,9 @@\n-     * If <i>n<\/i> denotes a nonzero number of inflated bytes to return, then {@code buf[off]}\n-     * through {@code buf[off+}<i>n<\/i>{@code -1]} will contain the uncompressed data. The\n-     * elements {@code buf[off+}<i>n<\/i>{@code ]} through {@code buf[off+}<i>len<\/i>{@code -1]}\n-     * are undefined (an implementation is free to change them during the inflate\n-     * operation). If the return value is -1 or an exception is thrown, then the content of\n-     * {@code buf[off]} to {@code buf[off+}<i>len<\/i>{@code -1]} is undefined.\n+     * If this method returns a nonzero integer <i>n<\/i> then {@code buf[off]}\n+     * through {@code buf[off+}<i>n<\/i>{@code -1]} contain the uncompressed\n+     * data.  The content of elements {@code buf[off+}<i>n<\/i>{@code ]} through\n+     * {@code buf[off+}<i>len<\/i>{@code -1]} is undefined, contrary to the\n+     * specification of the {@link java.io.InputStream InputStream} superclass,\n+     * so an implementation is free to modify these elements during the inflate\n+     * operation. If this method returns {@code -1} or throws an exception then\n+     * the content of {@code buf[off]} through {@code buf[off+}<i>len<\/i>{@code\n+     * -1]} is undefined.\n@@ -109,1 +112,1 @@\n-     * @return  the actual number of inflated bytes, or -1 if the end of the\n+     * @return  the actual number of bytes inflated, or -1 if the end of the\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/GZIPInputStream.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -131,6 +131,9 @@\n-     * If <i>n<\/i> denotes a nonzero number of inflated bytes to return, then {@code b[off]}\n-     * through {@code b[off+}<i>n<\/i>{@code -1]} will contain the uncompressed data. The\n-     * elements {@code b[off+}<i>n<\/i>{@code ]} through {@code b[off+}<i>len<\/i>{@code -1]}\n-     * are undefined (an implementation is free to change them during the inflate\n-     * operation). If the return value is -1 or an exception is thrown, then the content of\n-     * {@code b[off]} to {@code b[off+}<i>len<\/i>{@code -1]} is undefined.\n+     * If this method returns a nonzero integer <i>n<\/i> then {@code buf[off]}\n+     * through {@code buf[off+}<i>n<\/i>{@code -1]} contain the uncompressed\n+     * data.  The content of elements {@code buf[off+}<i>n<\/i>{@code ]} through\n+     * {@code buf[off+}<i>len<\/i>{@code -1]} is undefined, contrary to the\n+     * specification of the {@link java.io.InputStream InputStream} superclass,\n+     * so an implementation is free to modify these elements during the inflate\n+     * operation. If this method returns {@code -1} or throws an exception then\n+     * the content of {@code buf[off]} through {@code buf[off+}<i>len<\/i>{@code\n+     * -1]} is undefined.\n@@ -141,1 +144,1 @@\n-     * @return the actual number of inflated bytes, or -1 if the end of the\n+     * @return the actual number of bytes inflated, or -1 if the end of the\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/InflaterInputStream.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -346,5 +346,5 @@\n-     * @apiNote This method can return an {@link java.util.zip.InflaterInputStream\n-     * InflaterInputStream} which leaves the contents of the output buffer beyond\n-     * the last inflated byte undefined after a read operation (see {@link\n-     * java.util.zip.InflaterInputStream#read(byte[], int, int)\n-     * InflaterInputStream.read(byte[], int, int)}).\n+     * @apiNote The {@code InputStream} returned by this method can wrap an\n+     * {@link java.util.zip.InflaterInputStream InflaterInputStream}, whose\n+     * {@link java.util.zip.InflaterInputStream#read(byte[], int, int)\n+     * read(byte[], int, int)} method can modify any element of the output\n+     * buffer.\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipFile.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -172,7 +172,10 @@\n-     * If the current entry is compressed and <i>n<\/i> denotes a nonzero number of inflated\n-     * bytes to return, then {@code b[off]} trough {@code b[off+}<i>n<\/i>{@code -1]} will\n-     * contain the uncompressed data. The elements {@code b[off+}<i>n<\/i>{@code ]} through\n-     * {@code b[off+}<i>len<\/i>{@code -1]} are undefined (an implementation is free to\n-     * change them during the inflate operation). If the return value is -1 or an exception\n-     * is thrown, then the content of {@code b[off]} to {@code b[off+}<i>len<\/i>{@code -1]}\n-     * is undefined.\n+     * If the current entry is compressed and this method returns a nonzero\n+     * integer <i>n<\/i> then {@code buf[off]}\n+     * through {@code buf[off+}<i>n<\/i>{@code -1]} contain the uncompressed\n+     * data.  The content of elements {@code buf[off+}<i>n<\/i>{@code ]} through\n+     * {@code buf[off+}<i>len<\/i>{@code -1]} is undefined, contrary to the\n+     * specification of the {@link java.io.InputStream InputStream} superclass,\n+     * so an implementation is free to modify these elements during the inflate\n+     * operation. If this method returns {@code -1} or throws an exception then\n+     * the content of {@code buf[off]} through {@code buf[off+}<i>len<\/i>{@code\n+     * -1]} is undefined.\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipInputStream.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"}]}