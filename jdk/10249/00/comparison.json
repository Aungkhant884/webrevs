{"files":[{"patch":"@@ -163,1 +163,1 @@\n-  nonstatic_field(InstanceKlass,               _misc_flags,                                   u2)                                    \\\n+  nonstatic_field(InstanceKlass,               _misc_status._flags,                           u2)                                    \\\n@@ -654,2 +654,2 @@\n-  declare_constant(InstanceKlass::_misc_has_nonstatic_concrete_methods)   \\\n-  declare_constant(InstanceKlass::_misc_declares_nonstatic_concrete_methods) \\\n+  declare_constant(InstanceKlassMiscStatus::_misc_has_nonstatic_concrete_methods)   \\\n+  declare_constant(InstanceKlassMiscStatus::_misc_declares_nonstatic_concrete_methods) \\\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2624,30 +2624,0 @@\n-\n-void InstanceKlass::set_shared_class_loader_type(s2 loader_type) {\n-  switch (loader_type) {\n-  case ClassLoader::BOOT_LOADER:\n-    _misc_flags |= _misc_is_shared_boot_class;\n-    break;\n-  case ClassLoader::PLATFORM_LOADER:\n-    _misc_flags |= _misc_is_shared_platform_class;\n-    break;\n-  case ClassLoader::APP_LOADER:\n-    _misc_flags |= _misc_is_shared_app_class;\n-    break;\n-  default:\n-    ShouldNotReachHere();\n-    break;\n-  }\n-}\n-\n-void InstanceKlass::assign_class_loader_type() {\n-  ClassLoaderData *cld = class_loader_data();\n-  if (cld->is_boot_class_loader_data()) {\n-    set_shared_class_loader_type(ClassLoader::BOOT_LOADER);\n-  }\n-  else if (cld->is_platform_class_loader_data()) {\n-    set_shared_class_loader_type(ClassLoader::PLATFORM_LOADER);\n-  }\n-  else if (cld->is_system_class_loader_data()) {\n-    set_shared_class_loader_type(ClassLoader::APP_LOADER);\n-  }\n-}\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":0,"deletions":30,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"oops\/instanceKlassMiscStatus.hpp\"\n@@ -225,1 +226,1 @@\n-  \/\/ _misc_flags.\n+  \/\/ _misc_status right now.\n@@ -232,20 +233,2 @@\n-  enum {\n-    _misc_rewritten                           = 1 << 0,  \/\/ methods rewritten.\n-    _misc_has_nonstatic_fields                = 1 << 1,  \/\/ for sizing with UseCompressedOops\n-    _misc_should_verify_class                 = 1 << 2,  \/\/ allow caching of preverification\n-    _misc_unused                              = 1 << 3,  \/\/ not currently used\n-    _misc_is_contended                        = 1 << 4,  \/\/ marked with contended annotation\n-    _misc_has_nonstatic_concrete_methods      = 1 << 5,  \/\/ class\/superclass\/implemented interfaces has non-static, concrete methods\n-    _misc_declares_nonstatic_concrete_methods = 1 << 6,  \/\/ directly declares non-static, concrete methods\n-    _misc_has_been_redefined                  = 1 << 7,  \/\/ class has been redefined\n-    _misc_shared_loading_failed               = 1 << 8,  \/\/ class has been loaded from shared archive\n-    _misc_is_scratch_class                    = 1 << 9,  \/\/ class is the redefined scratch class\n-    _misc_is_shared_boot_class                = 1 << 10, \/\/ defining class loader is boot class loader\n-    _misc_is_shared_platform_class            = 1 << 11, \/\/ defining class loader is platform class loader\n-    _misc_is_shared_app_class                 = 1 << 12, \/\/ defining class loader is app class loader\n-    _misc_has_contended_annotations           = 1 << 13  \/\/ has @Contended annotation\n-  };\n-  u2 shared_loader_type_bits() const {\n-    return _misc_is_shared_boot_class|_misc_is_shared_platform_class|_misc_is_shared_app_class;\n-  }\n-  u2              _misc_flags;           \/\/ There is more space in access_flags for more flags.\n+  \/\/ State is set while executing, eventually atomically to not disturb other state\n+  InstanceKlassMiscStatus _misc_status;\n@@ -335,9 +318,3 @@\n-  bool is_shared_boot_class() const {\n-    return (_misc_flags & _misc_is_shared_boot_class) != 0;\n-  }\n-  bool is_shared_platform_class() const {\n-    return (_misc_flags & _misc_is_shared_platform_class) != 0;\n-  }\n-  bool is_shared_app_class() const {\n-    return (_misc_flags & _misc_is_shared_app_class) != 0;\n-  }\n+  bool is_shared_boot_class() const { return _misc_status.is_shared_boot_class(); }\n+  bool is_shared_platform_class() const { return _misc_status.is_shared_platform_class(); }\n+  bool is_shared_app_class() const {  return _misc_status.is_shared_app_class(); }\n@@ -345,3 +322,1 @@\n-  bool is_shared_unregistered_class() const {\n-    return (_misc_flags & shared_loader_type_bits()) == 0;\n-  }\n+  bool is_shared_unregistered_class() const { return _misc_status.is_shared_unregistered_class(); }\n@@ -352,7 +327,1 @@\n-  bool shared_loading_failed() const {\n-    return (_misc_flags & _misc_shared_loading_failed) != 0;\n-  }\n-\n-  void set_shared_loading_failed() {\n-    _misc_flags |= _misc_shared_loading_failed;\n-  }\n+  bool shared_loading_failed() const { return _misc_status.shared_loading_failed(); }\n@@ -360,1 +329,1 @@\n-  void set_shared_class_loader_type(s2 loader_type);\n+  void set_shared_loading_failed() { _misc_status.set_shared_loading_failed(true); }\n@@ -362,1 +331,4 @@\n-  void assign_class_loader_type();\n+#if INCLUDE_CDS\n+  void set_shared_class_loader_type(s2 loader_type) { _misc_status.set_shared_class_loader_type(loader_type); }\n+  void assign_class_loader_type() { _misc_status.assign_class_loader_type(_class_loader_data); }\n+#endif\n@@ -364,9 +336,2 @@\n-  bool has_nonstatic_fields() const        {\n-    return (_misc_flags & _misc_has_nonstatic_fields) != 0;\n-  }\n-  void set_has_nonstatic_fields(bool b)    {\n-    assert(!has_nonstatic_fields(), \"set once\");\n-    if (b) {\n-      _misc_flags |= _misc_has_nonstatic_fields;\n-    }\n-  }\n+  bool has_nonstatic_fields() const        { return _misc_status.has_nonstatic_fields(); }\n+  void set_has_nonstatic_fields(bool b)    { _misc_status.set_has_nonstatic_fields(b); }\n@@ -549,1 +514,1 @@\n-  bool is_rewritten() const                { return (_misc_flags & _misc_rewritten) != 0; }\n+  bool is_rewritten() const                { return _misc_status.rewritten(); }\n@@ -570,9 +535,2 @@\n-  bool should_verify_class() const         {\n-    return (_misc_flags & _misc_should_verify_class) != 0;\n-  }\n-  void set_should_verify_class(bool value) {\n-    assert(!should_verify_class(), \"set once\");\n-    if (value) {\n-      _misc_flags |= _misc_should_verify_class;\n-    }\n-  }\n+  bool should_verify_class() const         { return _misc_status.should_verify_class(); }\n+  void set_should_verify_class(bool value) { _misc_status.set_should_verify_class(value); }\n@@ -694,9 +652,2 @@\n-  bool is_contended() const                {\n-    return (_misc_flags & _misc_is_contended) != 0;\n-  }\n-  void set_is_contended(bool value)        {\n-    assert(!is_contended(), \"set once\");\n-    if (value) {\n-      _misc_flags |= _misc_is_contended;\n-    }\n-  }\n+  bool is_contended() const                { return _misc_status.is_contended(); }\n+  void set_is_contended(bool value)        { _misc_status.set_is_contended(value); }\n@@ -731,9 +682,2 @@\n-  bool has_contended_annotations() const {\n-    return ((_misc_flags & _misc_has_contended_annotations) != 0);\n-  }\n-  void set_has_contended_annotations(bool value)  {\n-    assert(!has_contended_annotations(), \"set once\");\n-    if (value) {\n-      _misc_flags |= _misc_has_contended_annotations;\n-    }\n-  }\n+  bool has_contended_annotations() const { return _misc_status.has_contended_annotations(); }\n+  void set_has_contended_annotations(bool value)  { _misc_status.set_has_contended_annotations(value); }\n@@ -774,10 +718,2 @@\n-  bool has_been_redefined() const {\n-    return (_misc_flags & _misc_has_been_redefined) != 0;\n-  }\n-  void set_has_been_redefined() {\n-    _misc_flags |= _misc_has_been_redefined;\n-  }\n-\n-  bool is_scratch_class() const {\n-    return (_misc_flags & _misc_is_scratch_class) != 0;\n-  }\n+  bool has_been_redefined() const { return _misc_status.has_been_redefined(); }\n+  void set_has_been_redefined() { _misc_status.set_has_been_redefined(true); }\n@@ -785,3 +721,2 @@\n-  void set_is_scratch_class() {\n-    _misc_flags |= _misc_is_scratch_class;\n-  }\n+  bool is_scratch_class() const { return _misc_status.is_scratch_class(); }\n+  void set_is_scratch_class() { _misc_status.set_is_scratch_class(true); }\n@@ -843,9 +778,2 @@\n-  bool has_nonstatic_concrete_methods() const {\n-    return (_misc_flags & _misc_has_nonstatic_concrete_methods) != 0;\n-  }\n-  void set_has_nonstatic_concrete_methods(bool b) {\n-    assert(!has_nonstatic_concrete_methods(), \"set once\");\n-    if (b) {\n-      _misc_flags |= _misc_has_nonstatic_concrete_methods;\n-    }\n-  }\n+  bool has_nonstatic_concrete_methods() const { return _misc_status.has_nonstatic_concrete_methods(); }\n+  void set_has_nonstatic_concrete_methods(bool b) { _misc_status.set_has_nonstatic_concrete_methods(b); }\n@@ -853,9 +781,2 @@\n-  bool declares_nonstatic_concrete_methods() const {\n-    return (_misc_flags & _misc_declares_nonstatic_concrete_methods) != 0;\n-  }\n-  void set_declares_nonstatic_concrete_methods(bool b) {\n-    assert(!declares_nonstatic_concrete_methods(), \"set once\");\n-    if (b) {\n-      _misc_flags |= _misc_declares_nonstatic_concrete_methods;\n-    }\n-  }\n+  bool declares_nonstatic_concrete_methods() const { return _misc_status.declares_nonstatic_concrete_methods(); }\n+  void set_declares_nonstatic_concrete_methods(bool b) { _misc_status.set_declares_nonstatic_concrete_methods(b); }\n@@ -1155,1 +1076,1 @@\n-  void set_rewritten()                  { _misc_flags |= _misc_rewritten; }\n+  void set_rewritten()                  { _misc_status.set_rewritten(true); }\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":32,"deletions":111,"binary":false,"changes":143,"status":"modified"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"classfile\/classLoader.hpp\"\n+#include \"classfile\/classLoaderData.inline.hpp\"\n+#include \"oops\/instanceKlassMiscStatus.hpp\"\n+#include \"utilities\/macros.hpp\"\n+\n+#if INCLUDE_CDS\n+void InstanceKlassMiscStatus::set_shared_class_loader_type(s2 loader_type) {\n+  switch (loader_type) {\n+  case ClassLoader::BOOT_LOADER:\n+    _flags |= _misc_is_shared_boot_class;\n+    break;\n+  case ClassLoader::PLATFORM_LOADER:\n+    _flags |= _misc_is_shared_platform_class;\n+    break;\n+  case ClassLoader::APP_LOADER:\n+    _flags |= _misc_is_shared_app_class;\n+    break;\n+  default:\n+    ShouldNotReachHere();\n+    break;\n+  }\n+}\n+\n+void InstanceKlassMiscStatus::assign_class_loader_type(const ClassLoaderData* cld) {\n+  if (cld->is_boot_class_loader_data()) {\n+    set_shared_class_loader_type(ClassLoader::BOOT_LOADER);\n+  }\n+  else if (cld->is_platform_class_loader_data()) {\n+    set_shared_class_loader_type(ClassLoader::PLATFORM_LOADER);\n+  }\n+  else if (cld->is_system_class_loader_data()) {\n+    set_shared_class_loader_type(ClassLoader::APP_LOADER);\n+  }\n+}\n+#endif \/\/ INCLUDE_CDS\n","filename":"src\/hotspot\/share\/oops\/instanceKlassMiscStatus.cpp","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_OOPS_INSTANCEKLASSMISCSTATUS_HPP\n+#define SHARE_OOPS_INSTANCEKLASSMISCSTATUS_HPP\n+\n+class ClassLoaderData;\n+\n+class InstanceKlassMiscStatus {\n+  friend class VMStructs;\n+  friend class JVMCIVMStructs;\n+\n+#define IK_FLAGS_DO(flag)  \\\n+    flag(rewritten                          , 1 << 0) \/* methods rewritten. *\/ \\\n+    flag(has_nonstatic_fields               , 1 << 1) \/* for sizing with UseCompressedOops *\/ \\\n+    flag(should_verify_class                , 1 << 2) \/* allow caching of preverification *\/ \\\n+    flag(unused                             , 1 << 3) \/* not currently used *\/ \\\n+    flag(is_contended                       , 1 << 4) \/* marked with contended annotation *\/ \\\n+    flag(has_nonstatic_concrete_methods     , 1 << 5) \/* class\/superclass\/implemented interfaces has non-static, concrete methods *\/ \\\n+    flag(declares_nonstatic_concrete_methods, 1 << 6) \/* directly declares non-static, concrete methods *\/ \\\n+    flag(has_been_redefined                 , 1 << 7) \/* class has been redefined *\/ \\\n+    flag(shared_loading_failed              , 1 << 8) \/* class has been loaded from shared archive *\/ \\\n+    flag(is_scratch_class                   , 1 << 9) \/* class is the redefined scratch class *\/ \\\n+    flag(is_shared_boot_class               , 1 << 10) \/* defining class loader is boot class loader *\/ \\\n+    flag(is_shared_platform_class           , 1 << 11) \/* defining class loader is platform class loader *\/ \\\n+    flag(is_shared_app_class                , 1 << 12) \/* defining class loader is app class loader *\/ \\\n+    flag(has_contended_annotations          , 1 << 13) \/* has @Contended annotation *\/\n+\n+#define IK_FLAGS_ENUM_NAME(name, value)    _misc_##name = value,\n+  enum {\n+    IK_FLAGS_DO(IK_FLAGS_ENUM_NAME)\n+  };\n+#undef IK_FLAGS_ENUM_NAME\n+\n+  u2 shared_loader_type_bits() const {\n+    return _misc_is_shared_boot_class|_misc_is_shared_platform_class|_misc_is_shared_app_class;\n+  }\n+\n+  \/\/ These flags are write-once before the class is published and then read-only so don't require atomic updates.\n+  u2 _flags;\n+\n+ public:\n+\n+  InstanceKlassMiscStatus() : _flags(0) {}\n+\n+  \/\/ Create getters and setters for the flag values.\n+#define IK_FLAGS_GET(name, ignore)          \\\n+  bool name() const { return (_flags & _misc_##name) != 0; }\n+  IK_FLAGS_DO(IK_FLAGS_GET)\n+#undef IK_FLAGS_GET\n+\n+#define IK_FLAGS_SET(name, ignore)   \\\n+  void set_##name(bool b) {         \\\n+    assert(!name(), \"set once\");    \\\n+    if (b) _flags |= _misc_##name; \\\n+  }\n+  IK_FLAGS_DO(IK_FLAGS_SET)\n+#undef IK_FLAGS_SET\n+\n+  bool is_shared_unregistered_class() const {\n+    return (_flags & shared_loader_type_bits()) == 0;\n+  }\n+\n+  void set_shared_class_loader_type(s2 loader_type);\n+\n+  void assign_class_loader_type(const ClassLoaderData* cld);\n+};\n+\n+#endif \/\/ SHARE_OOPS_INSTANCEKLASSMISCSTATUS_HPP\n","filename":"src\/hotspot\/share\/oops\/instanceKlassMiscStatus.hpp","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"},{"patch":"@@ -4406,1 +4406,3 @@\n-  the_class->set_has_been_redefined();\n+  if (!the_class->has_been_redefined()) {\n+    the_class->set_has_been_redefined();\n+  }\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -239,1 +239,0 @@\n-  nonstatic_field(InstanceKlass,               _misc_flags,                                   u2)                                    \\\n@@ -2287,16 +2286,0 @@\n-  \/***************************************\/                               \\\n-  \/* InstanceKlass enums for _misc_flags *\/                               \\\n-  \/***************************************\/                               \\\n-                                                                          \\\n-  declare_constant(InstanceKlass::_misc_rewritten)                        \\\n-  declare_constant(InstanceKlass::_misc_has_nonstatic_fields)             \\\n-  declare_constant(InstanceKlass::_misc_should_verify_class)              \\\n-  declare_constant(InstanceKlass::_misc_is_contended)                     \\\n-  declare_constant(InstanceKlass::_misc_has_nonstatic_concrete_methods)   \\\n-  declare_constant(InstanceKlass::_misc_declares_nonstatic_concrete_methods)\\\n-  declare_constant(InstanceKlass::_misc_has_been_redefined)               \\\n-  declare_constant(InstanceKlass::_misc_is_scratch_class)                 \\\n-  declare_constant(InstanceKlass::_misc_is_shared_boot_class)             \\\n-  declare_constant(InstanceKlass::_misc_is_shared_platform_class)         \\\n-  declare_constant(InstanceKlass::_misc_is_shared_app_class)              \\\n-                                                                          \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -69,12 +69,0 @@\n-  \/\/ _misc_flags constants\n-  private static int MISC_REWRITTEN;\n-  private static int MISC_HAS_NONSTATIC_FIELDS;\n-  private static int MISC_SHOULD_VERIFY_CLASS;\n-  private static int MISC_IS_CONTENDED;\n-  private static int MISC_HAS_NONSTATIC_CONCRETE_METHODS;\n-  private static int MISC_DECLARES_NONSTATIC_CONCRETE_METHODS;\n-  private static int MISC_HAS_BEEN_REDEFINED;\n-  private static int MISC_IS_SCRATCH_CLASS;\n-  private static int MISC_IS_SHARED_BOOT_CLASS;\n-  private static int MISC_IS_SHARED_PLATFORM_CLASS;\n-  private static int MISC_IS_SHARED_APP_CLASS;\n@@ -105,1 +93,0 @@\n-    miscFlags            = new CIntField(type.getCIntegerField(\"_misc_flags\"), 0);\n@@ -127,12 +114,0 @@\n-\n-    MISC_REWRITTEN                    = db.lookupIntConstant(\"InstanceKlass::_misc_rewritten\").intValue();\n-    MISC_HAS_NONSTATIC_FIELDS         = db.lookupIntConstant(\"InstanceKlass::_misc_has_nonstatic_fields\").intValue();\n-    MISC_SHOULD_VERIFY_CLASS          = db.lookupIntConstant(\"InstanceKlass::_misc_should_verify_class\").intValue();\n-    MISC_IS_CONTENDED                 = db.lookupIntConstant(\"InstanceKlass::_misc_is_contended\").intValue();\n-    MISC_HAS_NONSTATIC_CONCRETE_METHODS      = db.lookupIntConstant(\"InstanceKlass::_misc_has_nonstatic_concrete_methods\").intValue();\n-    MISC_DECLARES_NONSTATIC_CONCRETE_METHODS = db.lookupIntConstant(\"InstanceKlass::_misc_declares_nonstatic_concrete_methods\").intValue();\n-    MISC_HAS_BEEN_REDEFINED           = db.lookupIntConstant(\"InstanceKlass::_misc_has_been_redefined\").intValue();\n-    MISC_IS_SCRATCH_CLASS             = db.lookupIntConstant(\"InstanceKlass::_misc_is_scratch_class\").intValue();\n-    MISC_IS_SHARED_BOOT_CLASS         = db.lookupIntConstant(\"InstanceKlass::_misc_is_shared_boot_class\").intValue();\n-    MISC_IS_SHARED_PLATFORM_CLASS     = db.lookupIntConstant(\"InstanceKlass::_misc_is_shared_platform_class\").intValue();\n-    MISC_IS_SHARED_APP_CLASS          = db.lookupIntConstant(\"InstanceKlass::_misc_is_shared_app_class\").intValue();\n@@ -183,1 +158,0 @@\n-  private static CIntField miscFlags;\n@@ -291,4 +265,0 @@\n-  private int getMiscFlags() {\n-    return (int) miscFlags.getValue(this);\n-  }\n-\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/InstanceKlass.java","additions":0,"deletions":30,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -104,1 +104,1 @@\n-    final int instanceKlassMiscFlagsOffset = getFieldOffset(\"InstanceKlass::_misc_flags\", Integer.class, \"u2\");\n+    final int instanceKlassMiscFlagsOffset = getFieldOffset(\"InstanceKlass::_misc_status._flags\", Integer.class, \"u2\");\n@@ -142,2 +142,2 @@\n-    final int jvmMiscFlagsHasDefaultMethods = getConstant(\"InstanceKlass::_misc_has_nonstatic_concrete_methods\", Integer.class);\n-    final int jvmMiscFlagsDeclaresDefaultMethods = getConstant(\"InstanceKlass::_misc_declares_nonstatic_concrete_methods\", Integer.class);\n+    final int jvmMiscFlagsHasDefaultMethods = getConstant(\"InstanceKlassMiscStatus::_misc_has_nonstatic_concrete_methods\", Integer.class);\n+    final int jvmMiscFlagsDeclaresDefaultMethods = getConstant(\"InstanceKlassMiscStatus::_misc_declares_nonstatic_concrete_methods\", Integer.class);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot\/src\/jdk\/vm\/ci\/hotspot\/HotSpotVMConfig.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}