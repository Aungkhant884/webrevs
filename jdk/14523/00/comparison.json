{"files":[{"patch":"@@ -283,0 +283,1 @@\n+#ifndef _WIN64\n@@ -285,0 +286,1 @@\n+#endif\n@@ -286,1 +288,1 @@\n-LONG WINAPI Handle_FLT_Exception(struct _EXCEPTION_POINTERS* exceptionInfo);\n+LONG WINAPI Uncaugh_Exception_Handler(struct _EXCEPTION_POINTERS* exceptionInfo);\n@@ -400,1 +402,1 @@\n-  prev_uef_handler = SetUnhandledExceptionFilter(Handle_FLT_Exception);\n+  prev_uef_handler = SetUnhandledExceptionFilter(Uncaugh_Exception_Handler);\n@@ -2491,3 +2493,1 @@\n-LONG WINAPI Handle_FLT_Exception(struct _EXCEPTION_POINTERS* exceptionInfo) {\n-  PCONTEXT ctx = exceptionInfo->ContextRecord;\n-#ifndef  _WIN64\n+bool handle_FLT_exception(struct _EXCEPTION_POINTERS* exceptionInfo) {\n@@ -2504,1 +2504,3 @@\n-  case EXCEPTION_FLT_UNDERFLOW:\n+  case EXCEPTION_FLT_UNDERFLOW: {\n+    PCONTEXT ctx = exceptionInfo->ContextRecord;\n+#ifndef  _WIN64\n@@ -2511,1 +2513,1 @@\n-      return EXCEPTION_CONTINUE_EXECUTION;\n+      return true;\n@@ -2513,0 +2515,13 @@\n+#else \/\/ !_WIN64\n+    \/\/ On Windows, the mxcsr control bits are non-volatile across calls\n+    \/\/ See also CR 6192333\n+    \/\/\n+    jint MxCsr = INITIAL_MXCSR;\n+    \/\/ we can't use StubRoutines::x86::addr_mxcsr_std()\n+    \/\/ because in Win64 mxcsr is not saved there\n+    if (MxCsr != ctx->MxCsr) {\n+      ctx->MxCsr = MxCsr;\n+      return true;\n+    }\n+#endif \/\/ !_WIN64\n+  }\n@@ -2515,0 +2530,11 @@\n+  return false;\n+}\n+#endif\n+\n+#ifndef _WIN64\n+LONG WINAPI Uncaugh_Exception_Handler(struct _EXCEPTION_POINTERS* exceptionInfo) {\n+  if (handle_FLT_exception(exceptionInfo)) {\n+    return EXCEPTION_CONTINUE_EXECUTION;\n+  }\n+\n+  \/\/ we only override this on 32 bits, so only check it there\n@@ -2520,12 +2546,0 @@\n-#else \/\/ !_WIN64\n-  \/\/ On Windows, the mxcsr control bits are non-volatile across calls\n-  \/\/ See also CR 6192333\n-  \/\/\n-  jint MxCsr = INITIAL_MXCSR;\n-  \/\/ we can't use StubRoutines::x86::addr_mxcsr_std()\n-  \/\/ because in Win64 mxcsr is not saved there\n-  if (MxCsr != ctx->MxCsr) {\n-    ctx->MxCsr = MxCsr;\n-    return EXCEPTION_CONTINUE_EXECUTION;\n-  }\n-#endif \/\/ !_WIN64\n@@ -2788,3 +2802,2 @@\n-    if ((in_java || in_native) && exception_code != EXCEPTION_UNCAUGHT_CXX_EXCEPTION) {\n-      LONG result=Handle_FLT_Exception(exceptionInfo);\n-      if (result==EXCEPTION_CONTINUE_EXECUTION) return result;\n+    if ((in_java || in_native) && handle_FLT_exception(exceptionInfo)) {\n+      return EXCEPTION_CONTINUE_EXECUTION;\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":35,"deletions":22,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test id\n+ * @enablePreview\n+ * @requires os.family == \"windows\"\n+ * @library \/test\/lib\n+ * @run testng UncaughtNativeExceptionTest\n+ *\/\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.Linker;\n+import java.lang.foreign.SymbolLookup;\n+import java.lang.invoke.MethodHandle;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.regex.Pattern;\n+\n+import static org.testng.Assert.assertTrue;\n+\n+public class UncaughtNativeExceptionTest {\n+    private static class Crasher {\n+        public static void main(String[] args) throws Throwable {\n+            System.loadLibrary(\"NativeException\");\n+            MethodHandle mh = Linker.nativeLinker().downcallHandle(\n+                    SymbolLookup.loaderLookup().find(\"throw_exception\").orElseThrow(),\n+                    FunctionDescriptor.ofVoid());\n+\n+            mh.invokeExact(); \/\/ throws native exception\n+        }\n+    }\n+\n+    \/\/ check that we actually report the native exception,\n+    \/\/ and don't terminate abruptly due to stack overflow error\n+    @Test\n+    public void testNativeExceptionReporting() throws Exception {\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+                \"--enable-preview\",\n+                \"--enable-native-access=ALL-UNNAMED\",\n+                \"-Djava.library.path=\" + System.getProperty(\"java.library.path\"),\n+                Crasher.class.getName());\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+\n+        File hsErrFile = HsErrFileUtils.openHsErrFileFromOutput(output);\n+        Path hsErrPath = hsErrFile.toPath();\n+        assertTrue(Files.exists(hsErrPath));\n+\n+        Pattern[] positivePatterns = {\n+            Pattern.compile(\".*Internal Error \\\\(0x2a\\\\).*\")\n+        };\n+        HsErrFileUtils.checkHsErrFileContent(hsErrFile, positivePatterns, null, true \/* check end marker *\/, false \/* verbose *\/);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/UncaughtNativeExceptionTest.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#ifdef _WIN64\n+\/\/ Windows only\n+\n+#include <Windows.h>\n+\n+const DWORD EX_CODE = 42;\n+\n+__declspec(dllexport) void throw_exception() {\n+    RaiseException(EX_CODE, EXCEPTION_NONCONTINUABLE, 0, NULL);\n+}\n+\n+#endif\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/libNativeException.c","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"}]}