{"files":[{"patch":"@@ -0,0 +1,105 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8295278\n+ * @summary Call unlocked version loadClass directly, with another thread calling forName\n+ *          One class goes through the ClassLoader path and the other goes through JVM path\n+ * @library \/test\/lib\n+ * @compile test-classes\/A.java ..\/share\/ThreadPrint.java\n+ * @run main\/othervm CallLoadClassTest\n+ *\/\n+\n+import jdk.test.lib.classloader.ClassUnloadCommon;\n+import java.util.concurrent.Semaphore;\n+\n+public class CallLoadClassTest {\n+\n+    private static Semaphore mainSync = null;\n+\n+    private static class MyLoader extends ClassLoader {\n+\n+        ClassLoader parent;\n+        int count;\n+\n+        MyLoader(ClassLoader parent) {\n+            this.parent = parent;\n+            this.count = 0;\n+        }\n+\n+        public synchronized Class<?> loadClass(String name) throws ClassNotFoundException {\n+            Class<?> loadedClass = findLoadedClass(name);\n+            if (name.equals(\"A\") && loadedClass == null) {\n+                ThreadPrint.println(\"Loading A\");\n+                if (count == 0) {\n+                    count++;\n+                    ThreadPrint.println(\"Waiting for A\");\n+                    try {\n+                        mainSync.release(); \/\/ Let t2 start\n+                        wait();  \/\/ let the other thread load A instead.\n+                    } catch (InterruptedException ie) {\n+                    }\n+                } else {\n+                    notify(); \/\/ notify any waiting threads.\n+                }\n+                byte[] classfile = ClassUnloadCommon.getClassData(\"A\");\n+                return defineClass(name, classfile, 0, classfile.length);\n+            } else {\n+                return parent.loadClass(name);\n+            }\n+        }\n+    }\n+\n+    private static ClassLoadingThread[] threads = new ClassLoadingThread[2];\n+    private static boolean success = true;\n+\n+    private static boolean report_success() {\n+        for (int i = 0; i < 2; i++) {\n+          try {\n+            threads[i].join();\n+            if (!threads[i].report_success()) success = false;\n+          } catch (InterruptedException e) {}\n+        }\n+        return success;\n+    }\n+\n+    public static void main(java.lang.String[] unused) {\n+        mainSync = new Semaphore(0);\n+\n+        \/\/ t1 does loadClass directly, t2 does class.ForName()\n+        ClassLoader appLoader = CallLoadClassTest.class.getClassLoader();\n+        MyLoader ldr = new MyLoader(appLoader);\n+        for (int i = 0; i < 2; i++) {\n+            threads[i] = new ClassLoadingThread(ldr, i, mainSync);\n+            threads[i].setName(\"Loading Thread #\" + (i + 1));\n+            threads[i].start();\n+            System.out.println(\"Thread \" + (i + 1) + \" was started...\");\n+        }\n+        if (report_success()) {\n+           System.out.println(\"PASSED\");\n+        } else {\n+            throw new RuntimeException(\"FAILED\");\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/ParallelLoad\/CallLoadClass\/CallLoadClassTest.java","additions":105,"deletions":0,"binary":false,"changes":105,"status":"added"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.concurrent.Semaphore;\n+\n+class ClassLoadingThread extends Thread {\n+\n+    private ClassLoader ldr = null;\n+    private int which;\n+    private Semaphore syncOrder;\n+\n+    public ClassLoadingThread(ClassLoader loader, int i, Semaphore sem) {\n+        ldr = loader;\n+        which = i;\n+        syncOrder = sem;\n+    }\n+\n+    private boolean success = true;\n+    public boolean report_success() { return success; }\n+\n+    public void callForName() {\n+        try {\n+            ThreadPrint.println(\"Starting forName thread ...\");\n+            \/\/ Initiate class loading using specified type\n+            Class<?> a = Class.forName(\"A\", true, ldr);\n+            Object obj = a.getConstructor().newInstance();\n+        } catch (Throwable e) {\n+            ThreadPrint.println(\"Exception is caught: \" + e);\n+            e.printStackTrace();\n+            success = false;\n+        }\n+    }\n+\n+    public void callLoadClass() {\n+        try {\n+            ThreadPrint.println(\"Starting loadClass thread ...\");\n+            Class<?> a = ldr.loadClass(\"A\");\n+            Object obj = a.getConstructor().newInstance();\n+            success = false; \/\/ Should have thrown LinkageError\n+        } catch (Throwable e) {\n+            \/\/ If you call loadClass directly, this will result in LinkageError\n+            ThreadPrint.println(\"Exception is caught: \" + e);\n+            e.printStackTrace();\n+            success = (e instanceof LinkageError);\n+        }\n+    }\n+\n+    public void run() {\n+       if (which == 0) {\n+           callLoadClass();\n+       } else {\n+           try {\n+               syncOrder.acquire();  \/\/ wait until loadClass is waiting.\n+           } catch (InterruptedException idc) {}\n+           callForName();\n+       }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/ParallelLoad\/CallLoadClass\/ClassLoadingThread.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ This doesn't have to do anything\n+public class A {\n+  static { System.out.println(\"A called\"); }\n+  public A() { System.out.println(\"A.<init> called\"); }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/ParallelLoad\/CallLoadClass\/test-classes\/A.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -0,0 +1,116 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4699981 8295278\n+ * @summary This is a testcase for JDK-4699981. When 2 threads are loading the same class with\n+ *           the same classloader, and somehow one of the 2 threads releases the\n+ *           synchronization lock on the classloader, the JVM code\n+ *           throws ClassCircularityError, mistakenly.\n+ * @library \/test\/lib\n+ * @compile test-classes\/Base.java test-classes\/Derived.java test-classes\/Support.java\n+ * @run main\/othervm ParallelCircularityTest\n+ *\/\n+\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+\n+public class ParallelCircularityTest {\n+\n+    private Object lock = new Object();\n+\n+    private void test() throws Exception {\n+       URL location = getClass().getProtectionDomain().getCodeSource().getLocation();\n+       URLLoader loader = new URLLoader(new URL[] {location}, getClass().getClassLoader().getParent());\n+\n+       Class cls = loader.loadClass(\"Support\");\n+\n+       Thread t1 = new Thread(new Run1(cls));\n+       t1.start();\n+\n+       Thread.sleep(1000);\n+\n+       \/\/ Load Derived, will trigger a loadClassInternal for Base\n+       loader.loadClass(\"Derived\");\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        ParallelCircularityTest pct = new ParallelCircularityTest();\n+        pct.test();\n+    }\n+\n+    public class URLLoader extends URLClassLoader {\n+       private boolean m_firstTime = true;\n+\n+       public URLLoader(URL[] urls, ClassLoader parent) {\n+          super(urls, parent);\n+       }\n+\n+       public Class loadClass(String name) throws ClassNotFoundException {\n+          if (name.equals(\"Base\")) {\n+             if (m_firstTime) {\n+                m_firstTime = false;\n+\n+                \/\/ Notify the other thread\n+                synchronized (lock) {\n+                   lock.notifyAll();\n+                }\n+\n+                \/\/ Wait on the classloader to have the JVM throw ClassCircularityError\n+                try {\n+                   synchronized (this) {\n+                      wait(5000);\n+                   }\n+                }\n+                catch (InterruptedException ignored) { }\n+             }\n+          }\n+          return super.loadClass(name);\n+       }\n+    }\n+\n+    public class Run1 implements Runnable {\n+       private Class cls;\n+\n+       public Run1(Class cls) {\n+          this.cls = cls;\n+       }\n+\n+       public void run() {\n+          synchronized (lock) {\n+             try {\n+                lock.wait();\n+             }\n+             catch (InterruptedException ignored) {}\n+          }\n+\n+          \/\/ Trigger loadClassInternal for Base\n+          try {\n+             cls.newInstance();\n+          } catch (Throwable x) {\n+             x.printStackTrace();\n+          }\n+       }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/ParallelLoad\/ParallelCircularity\/ParallelCircularityTest.java","additions":116,"deletions":0,"binary":false,"changes":116,"status":"added"},{"patch":"@@ -0,0 +1,24 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+public class Base {}\n","filename":"test\/hotspot\/jtreg\/runtime\/ParallelLoad\/ParallelCircularity\/test-classes\/Base.java","additions":24,"deletions":0,"binary":false,"changes":24,"status":"added"},{"patch":"@@ -0,0 +1,24 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+public class Derived extends Base {}\n","filename":"test\/hotspot\/jtreg\/runtime\/ParallelLoad\/ParallelCircularity\/test-classes\/Derived.java","additions":24,"deletions":0,"binary":false,"changes":24,"status":"added"},{"patch":"@@ -0,0 +1,26 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+public class Support {\n+  private Base base = new Base();\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/ParallelLoad\/ParallelCircularity\/test-classes\/Support.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"added"},{"patch":"","filename":"test\/hotspot\/jtreg\/runtime\/ParallelLoad\/ParallelSuper\/AsmClasses.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/hotspot\/jtreg\/runtime\/ParallelLoad\/AsmClasses.java","status":"renamed"},{"patch":"","filename":"test\/hotspot\/jtreg\/runtime\/ParallelLoad\/ParallelSuper\/ClassLoadingThread.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/hotspot\/jtreg\/runtime\/ParallelLoad\/ClassLoadingThread.java","status":"renamed"},{"patch":"","filename":"test\/hotspot\/jtreg\/runtime\/ParallelLoad\/ParallelSuper\/MyLoader.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/hotspot\/jtreg\/runtime\/ParallelLoad\/MyLoader.java","status":"renamed"},{"patch":"","filename":"test\/hotspot\/jtreg\/runtime\/ParallelLoad\/ParallelSuper\/MyNonParallelLoader.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/hotspot\/jtreg\/runtime\/ParallelLoad\/MyNonParallelLoader.java","status":"renamed"},{"patch":"@@ -32,1 +32,1 @@\n- * @compile test-classes\/ClassInLoader.java test-classes\/A.java test-classes\/B.java\n+ * @compile test-classes\/ClassInLoader.java test-classes\/A.java test-classes\/B.java ..\/share\/ThreadPrint.java\n","filename":"test\/hotspot\/jtreg\/runtime\/ParallelLoad\/ParallelSuper\/ParallelSuperTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/hotspot\/jtreg\/runtime\/ParallelLoad\/ParallelSuperTest.java","status":"renamed"},{"patch":"","filename":"test\/hotspot\/jtreg\/runtime\/ParallelLoad\/ParallelSuper\/test-classes\/A.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/hotspot\/jtreg\/runtime\/ParallelLoad\/test-classes\/A.java","status":"renamed"},{"patch":"","filename":"test\/hotspot\/jtreg\/runtime\/ParallelLoad\/ParallelSuper\/test-classes\/B.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/hotspot\/jtreg\/runtime\/ParallelLoad\/test-classes\/B.java","status":"renamed"},{"patch":"","filename":"test\/hotspot\/jtreg\/runtime\/ParallelLoad\/ParallelSuper\/test-classes\/ClassInLoader.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/hotspot\/jtreg\/runtime\/ParallelLoad\/test-classes\/ClassInLoader.java","status":"renamed"},{"patch":"","filename":"test\/hotspot\/jtreg\/runtime\/ParallelLoad\/SaveResolutionError\/SaveResolutionErrorTest.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/hotspot\/jtreg\/runtime\/ParallelLoad\/SaveResolutionErrorTest.java","status":"renamed"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+class ClassLoadingThread extends Thread {\n+\n+    private ClassLoader ldr1;\n+    private ClassLoader ldr2;\n+    private int which;\n+\n+    public ClassLoadingThread(ClassLoader loader1, ClassLoader loader2, int i) {\n+        ldr1 = loader1;\n+        ldr2 = loader2;\n+        which = i;\n+    }\n+\n+    private boolean success = true;\n+    public boolean report_success() { return success; }\n+\n+    public void callForName(String cls, ClassLoader ldr) {\n+        try {\n+            ThreadPrint.println(\"Starting forName thread ...\");\n+            \/\/ Initiate class loading using specified type\n+            Class<?> a = Class.forName(cls, true, ldr);\n+            Object obj = a.getConstructor().newInstance();\n+        } catch (Throwable e) {\n+            ThreadPrint.println(\"Exception is caught: \" + e);\n+            e.printStackTrace();\n+            success = false;\n+        }\n+    }\n+\n+    public void run() {\n+       if (which == 0) {\n+           callForName(\"A\",ldr1);\n+       } else {\n+           callForName(\"C\", ldr2);\n+       }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/ParallelLoad\/SuperWait\/ClassLoadingThread.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -0,0 +1,154 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4670071 8295278\n+ * @summary Duplicate class loader deadlock referenced in https:\/\/openjdk.org\/groups\/core-libs\/ClassLoaderProposal.html\n+ *          One thread loads (A, CL1) extends (B, CL2), while the second loads (C, CL2) extends (D, CL1)\n+ * @library \/test\/lib\n+ * @compile test-classes\/A.java test-classes\/B.java test-classes\/C.java test-classes\/D.java ..\/share\/ThreadPrint.java\n+ * @run main\/othervm SuperWaitTest\n+ *\/\n+\n+import jdk.test.lib.classloader.ClassUnloadCommon;\n+import java.util.concurrent.Semaphore;\n+\n+public class SuperWaitTest {\n+\n+    private static Semaphore mainSync = null;\n+\n+    \/\/ Loads classes A and D, delegates for A's super class B\n+    private static class MyLoaderOne extends ClassLoader {\n+\n+        ClassLoader parent;\n+        ClassLoader baseLoader;\n+        int count;\n+\n+        MyLoaderOne(ClassLoader parent) {\n+            this.parent = parent;\n+            this.baseLoader = null;\n+            this.count = 0;\n+        }\n+\n+        public void setBaseLoader(ClassLoader ldr) {\n+            this.baseLoader = ldr;\n+        }\n+\n+        public synchronized Class<?> loadClass(String name) throws ClassNotFoundException {\n+            Class<?> loadedClass = findLoadedClass(name);\n+            if (loadedClass != null) return loadedClass;\n+            if (name.equals(\"A\") || name.equals(\"D\")) {\n+                ThreadPrint.println(\"Loading \" + name);\n+                if (name.equals(\"A\")) {\n+                    try {\n+                        ThreadPrint.println(\"Waiting for \" + name);\n+                        mainSync.acquire(); \/\/ wait until other thread gets here\n+                        wait(); \/\/ let the other thread have this lock.\n+                    } catch (InterruptedException ie) {}\n+                } else {\n+                    notify(); \/\/ reacquire lock when superclass loading is done\n+                }\n+                byte[] classfile = ClassUnloadCommon.getClassData(name);\n+                return defineClass(name, classfile, 0, classfile.length);\n+            } else if (name.equals(\"B\")) {\n+                return baseLoader.loadClass(name);\n+            } else {\n+                assert (!name.equals(\"C\"));\n+                return parent.loadClass(name);\n+            }\n+        }\n+    }\n+\n+    \/\/ Loads classes C and B, delegates for C's super class D\n+    private static class MyLoaderTwo extends ClassLoader {\n+\n+        ClassLoader parent;\n+        ClassLoader baseLoader;\n+        int count;\n+\n+        MyLoaderTwo(ClassLoader parent) {\n+            this.parent = parent;\n+            this.baseLoader = null;\n+            this.count = 0;\n+        }\n+\n+        public void setBaseLoader(ClassLoader ldr) {\n+            this.baseLoader = ldr;\n+        }\n+\n+        public synchronized Class<?> loadClass(String name) throws ClassNotFoundException {\n+            Class<?> loadedClass = findLoadedClass(name);\n+            if (loadedClass != null) return loadedClass;\n+            if (name.equals(\"C\") || name.equals(\"B\")) {\n+                ThreadPrint.println(\"Loading \" + name);\n+                if (name.equals(\"C\")) {\n+                    mainSync.release();\n+                }\n+                byte[] classfile = ClassUnloadCommon.getClassData(name);\n+                return defineClass(name, classfile, 0, classfile.length);\n+            } else if (name.equals(\"D\")) {\n+                return baseLoader.loadClass(name);\n+            } else {\n+                assert (!name.equals(\"A\"));\n+                return parent.loadClass(name);\n+            }\n+        }\n+    }\n+\n+    private static ClassLoadingThread[] threads = new ClassLoadingThread[2];\n+    private static boolean success = true;\n+\n+    private static boolean report_success() {\n+        for (int i = 0; i < 2; i++) {\n+          try {\n+            threads[i].join();\n+            if (!threads[i].report_success()) success = false;\n+          } catch (InterruptedException e) {}\n+        }\n+        return success;\n+    }\n+\n+    public static void main(java.lang.String[] unused) {\n+        \/\/ t1 loads (A,CL1) extends (B,CL2); t2 loads (C,CL2) extends (D,CL1)\n+        mainSync = new Semaphore(0);\n+\n+        ClassLoader appLoader = SuperWaitTest.class.getClassLoader();\n+        MyLoaderOne ldr1 = new MyLoaderOne(appLoader);\n+        MyLoaderTwo ldr2 = new MyLoaderTwo(appLoader);\n+        ldr1.setBaseLoader(ldr2);\n+        ldr2.setBaseLoader(ldr1);\n+\n+        for (int i = 0; i < 2; i++) {\n+            threads[i] = new ClassLoadingThread(ldr1, ldr2, i);\n+            threads[i].setName(\"Loading Thread #\" + (i + 1));\n+            threads[i].start();\n+            System.out.println(\"Thread \" + (i + 1) + \" was started...\");\n+        }\n+        if (report_success()) {\n+           System.out.println(\"PASSED\");\n+        } else {\n+            throw new RuntimeException(\"FAILED\");\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/ParallelLoad\/SuperWait\/SuperWaitTest.java","additions":154,"deletions":0,"binary":false,"changes":154,"status":"added"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ A extends B in other Class loader.\n+public class A  extends B {\n+  static { System.out.println(\"A called\"); }\n+  public A() { System.out.println(\"A.<init> called\"); }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/ParallelLoad\/SuperWait\/test-classes\/A.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ This doesn't have to do anything\n+public class B {\n+  static { System.out.println(\"B called\"); }\n+  public B() { System.out.println(\"B.<init> called\"); }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/ParallelLoad\/SuperWait\/test-classes\/B.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ C extends D in first class loader\n+public class C extends D {\n+  static { System.out.println(\"C called\"); }\n+  public C() { System.out.println(\"C.<init> called\"); }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/ParallelLoad\/SuperWait\/test-classes\/C.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ This doesn't have to do anything\n+public class D {\n+  static { System.out.println(\"D called\"); }\n+  public D() { System.out.println(\"D.<init> called\"); }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/ParallelLoad\/SuperWait\/test-classes\/D.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/ParallelLoad\/share\/ThreadPrint.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/hotspot\/jtreg\/runtime\/ParallelLoad\/ThreadPrint.java","status":"renamed"}]}