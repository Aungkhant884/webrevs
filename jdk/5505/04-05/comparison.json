{"files":[{"patch":"@@ -55,1 +55,2 @@\n- *    -b, --bind-address    - Address to bind to. Default: 0.0.0.0 (all interfaces).\n+ *    -b, --bind-address    - Address to bind to. Default: 127.0.0.1 (loopback).\n+ *                            For 0.0.0.0 (all interfaces) use -b 0.0.0.0 or -b ::0.\n","filename":"src\/jdk.httpserver\/share\/classes\/module-info.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -314,1 +314,1 @@\n-            paths.filter(p -> !isHiddenOrSymLink(p))\n+            paths.filter(p -> Files.isReadable(p) && !isHiddenOrSymLink(p))\n@@ -324,4 +324,0 @@\n-    \/\/ HTTP-Date as per (rfc5322). Example: Sun, 06 Nov 1994 08:49:37 GMT\n-    private static final DateTimeFormatter HTTP_DATE_FORMATTER =\n-            DateTimeFormatter.ofPattern(\"EEE, dd MMM yyyy HH:mm:ss v\");\n-\n@@ -330,1 +326,2 @@\n-        return fileTime.toInstant().atZone(ZoneId.of(\"GMT\")).format(HTTP_DATE_FORMATTER);\n+        return fileTime.toInstant().atZone(ZoneId.of(\"GMT\"))\n+                .format(DateTimeFormatter.RFC_1123_DATE_TIME);\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/simpleserver\/FileServerHandler.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.text.MessageFormat;\n@@ -32,3 +31,0 @@\n-import java.util.Locale;\n-import java.util.MissingResourceException;\n-import java.util.ResourceBundle;\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/simpleserver\/OutputFilter.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import com.sun.net.httpserver.HttpServer;\n@@ -34,1 +35,0 @@\n-import java.text.MessageFormat;\n@@ -38,1 +38,0 @@\n-import java.util.MissingResourceException;\n@@ -41,2 +40,0 @@\n-import java.util.ResourceBundle;\n-import java.util.concurrent.Executors;\n@@ -55,1 +52,1 @@\n- * <li>bind address: wildcard address (all interfaces)<\/li>\n+ * <li>bind address: 127.0.0.1 (loopback)<\/li>\n@@ -64,1 +61,1 @@\n-    private static final InetAddress DEFAULT_ADDR = null;\n+    private static final InetAddress DEFAULT_ADDR = InetAddress.getLoopbackAddress();\n@@ -135,1 +132,0 @@\n-            server.setExecutor(Executors.newSingleThreadExecutor());\n@@ -137,1 +133,1 @@\n-            out.printStartMessage(root, server.getAddress().getAddress(), server.getAddress().getPort());\n+            out.printStartMessage(root, server);\n@@ -155,2 +151,5 @@\n-        void printStartMessage(Path root, InetAddress inetAddr, int port)\n-                throws UnknownHostException {\n+        void printStartMessage(Path root, HttpServer server)\n+                throws UnknownHostException\n+        {\n+            var port = server.getAddress().getPort();\n+            var inetAddr = server.getAddress().getAddress();\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/simpleserver\/SimpleFileServerImpl.java","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -32,1 +32,2 @@\n--b, --bind-address    - Address to bind to. Default: 0.0.0.0 (all interfaces).\\n\\\n+-b, --bind-address    - Address to bind to. Default: 127.0.0.1 (loopback).\\n\\\n+\\                        For 0.0.0.0 (all interfaces) use -b 0.0.0.0 or -b ::0.\\n\\\n@@ -40,1 +41,2 @@\n-\\-b, --bind-address    - Address to bind to. Default: 0.0.0.0 (all interfaces).\n+\\-b, --bind-address    - Address to bind to. Default: 127.0.0.1 (loopback).\\n\\\n+\\                         For 0.0.0.0 (all interfaces) use -b 0.0.0.0 or -b ::0.\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/simpleserver\/resources\/simpleserver.properties","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -327,1 +327,1 @@\n-            var request = HttpRequest.newBuilder(uri(server, \"\")).build();\n+            var request = HttpRequest.newBuilder(uri(server, \"foo\/bar\")).build();\n@@ -330,1 +330,1 @@\n-            assertEquals(inspectedURI.get(), URI.create(\"\/\"));\n+            assertEquals(inspectedURI.get(), URI.create(\"\/foo\/bar\"));\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/FilterTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import java.net.UnknownHostException;\n@@ -56,9 +55,1 @@\n-    static final String LOCALHOST_ADDR;\n-\n-    static {\n-        try {\n-            LOCALHOST_ADDR = InetAddress.getLocalHost().getHostAddress();\n-        } catch (UnknownHostException e) {\n-            throw new RuntimeException(\"Cannot determine local host address\");\n-        }\n-    }\n+    static final String LOOPBACK_ADDR = InetAddress.getLoopbackAddress().getHostAddress();\n@@ -95,2 +86,2 @@\n-                .shouldContain(\"Serving \" + TEST_DIR_STR + \" and subdirectories on 0.0.0.0 (all interfaces) port\")\n-                .shouldContain(\"URL http:\/\/\" + LOCALHOST_ADDR);\n+                .shouldContain(\"Serving \" + TEST_DIR_STR + \" and subdirectories on\\n\" +\n+                        \"URL http:\/\/\" + LOOPBACK_ADDR);\n@@ -107,2 +98,2 @@\n-                .shouldContain(\"Serving \" + TEST_DIR_STR + \" and subdirectories on 0.0.0.0 (all interfaces) port\")\n-                .shouldContain(\"URL http:\/\/\" + LOCALHOST_ADDR);\n+                .shouldContain(\"Serving \" + TEST_DIR_STR + \" and subdirectories on\\n\" +\n+                        \"URL http:\/\/\" + LOOPBACK_ADDR);\n@@ -120,1 +111,2 @@\n-            -b, --bind-address    - Address to bind to. Default: 0.0.0.0 (all interfaces).\n+            -b, --bind-address    - Address to bind to. Default: 127.0.0.1 (loopback).\n+                                    For 0.0.0.0 (all interfaces) use -b 0.0.0.0 or -b ::0.\n@@ -141,0 +133,13 @@\n+    @Test(dataProvider = \"bindOptions\")\n+    public void testBindAllInterfaces(String opt) throws Throwable {\n+        out.println(\"\\n--- testPort, opt=\\\"%s\\\" \".formatted(opt));\n+        simpleserver(JAVA, \"-m\", \"jdk.httpserver\", opt, \"0.0.0.0\")\n+                .shouldHaveExitValue(NORMAL_EXIT_CODE)\n+                .shouldContain(\"Serving \" + TEST_DIR_STR + \" and subdirectories on 0.0.0.0 (all interfaces) port\")\n+                .shouldContain(\"URL http:\/\/\" + InetAddress.getLocalHost().getHostAddress());\n+        simpleserver(JAVA, \"-m\", \"jdk.httpserver\", opt, \"::0\")\n+                .shouldHaveExitValue(NORMAL_EXIT_CODE)\n+                .shouldContain(\"Serving \" + TEST_DIR_STR + \" and subdirectories on 0.0.0.0 (all interfaces) port\")\n+                .shouldContain(\"URL http:\/\/\" + InetAddress.getLocalHost().getHostAddress());\n+    }\n+\n@@ -144,1 +149,1 @@\n-        simpleserver(JAVA, \"-m\", \"jdk.httpserver\", \"-p\", \"0\", opt, \"123.4.5.6\", opt, LOCALHOST_ADDR)\n+        simpleserver(JAVA, \"-m\", \"jdk.httpserver\", \"-p\", \"0\", opt, \"123.4.5.6\", opt, LOOPBACK_ADDR)\n@@ -147,1 +152,1 @@\n-                        \"URL http:\/\/\" + LOCALHOST_ADDR);\n+                        \"URL http:\/\/\" + LOOPBACK_ADDR);\n@@ -156,2 +161,2 @@\n-                .shouldContain(\"Serving \" + TEST_DIR_STR + \" and subdirectories on 0.0.0.0 (all interfaces) port\")\n-                .shouldContain(\"URL http:\/\/\" + LOCALHOST_ADDR);\n+                .shouldContain(\"Serving \" + TEST_DIR_STR + \" and subdirectories on\\n\" +\n+                        \"URL http:\/\/\" + LOOPBACK_ADDR);\n@@ -168,2 +173,2 @@\n-                .shouldContain(\"Serving \" + TEST_DIR_STR + \" and subdirectories on 0.0.0.0 (all interfaces) port\")\n-                .shouldContain(\"URL http:\/\/\" + LOCALHOST_ADDR);\n+                .shouldContain(\"Serving \" + TEST_DIR_STR + \" and subdirectories on\\n\" +\n+                        \"URL http:\/\/\" + LOOPBACK_ADDR);\n@@ -177,2 +182,2 @@\n-                .shouldContain(\"Serving \" + TEST_DIR_STR + \" and subdirectories on 0.0.0.0 (all interfaces) port\")\n-                .shouldContain(\"URL http:\/\/\" + LOCALHOST_ADDR);\n+                .shouldContain(\"Serving \" + TEST_DIR_STR + \" and subdirectories on\\n\" +\n+                        \"URL http:\/\/\" + LOOPBACK_ADDR);\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/CommandLinePositiveTest.java","additions":28,"deletions":23,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -629,3 +629,0 @@\n-    static final DateTimeFormatter HTTP_DATE_FORMATTER =\n-            DateTimeFormatter.ofPattern(\"EEE, dd MMM yyyy HH:mm:ss v\");\n-\n@@ -634,1 +631,1 @@\n-                .format(HTTP_DATE_FORMATTER);\n+                .format(DateTimeFormatter.RFC_1123_DATE_TIME);\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/CustomFileSystemTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-    static final InetAddress LOOPBACK_ADDR = InetAddress.getLoopbackAddress();\n+    static final InetSocketAddress LOOPBACK_ADDR = new InetSocketAddress(InetAddress.getLoopbackAddress(), 0);\n@@ -98,2 +98,2 @@\n-        s1.bind(new InetSocketAddress(LOOPBACK_ADDR, 0), 0);\n-        assertEquals(s1.getAddress().getAddress(), LOOPBACK_ADDR);\n+        s1.bind((LOOPBACK_ADDR), 0);\n+        assertEquals(s1.getAddress().getAddress(), LOOPBACK_ADDR.getAddress());\n@@ -103,2 +103,2 @@\n-        s2.bind(new InetSocketAddress(LOOPBACK_ADDR, 0), 0);\n-        assertEquals(s2.getAddress().getAddress(), LOOPBACK_ADDR);\n+        s2.bind(LOOPBACK_ADDR, 0);\n+        assertEquals(s2.getAddress().getAddress(), LOOPBACK_ADDR.getAddress());\n@@ -111,2 +111,1 @@\n-        var server = HttpsServer.create(\n-                new InetSocketAddress(LOOPBACK_ADDR, 0), 0, \"\/test\", new Handler(), filter);\n+        var server = HttpsServer.create(LOOPBACK_ADDR, 0, \"\/test\", new Handler(), filter);\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/HttpsServerTest.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -355,3 +355,0 @@\n-    static final DateTimeFormatter HTTP_DATE_FORMATTER =\n-            DateTimeFormatter.ofPattern(\"EEE, dd MMM yyyy HH:mm:ss v\");\n-\n@@ -360,1 +357,1 @@\n-                .format(HTTP_DATE_FORMATTER);\n+                .format(DateTimeFormatter.RFC_1123_DATE_TIME);\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/MapToPathTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-    static final InetAddress LOOPBACK_ADDR = InetAddress.getLoopbackAddress();\n+    static final InetSocketAddress LOOPBACK_ADDR = new InetSocketAddress(InetAddress.getLoopbackAddress(), 0);\n@@ -117,1 +117,1 @@\n-        var server = HttpServer.create(new InetSocketAddress(LOOPBACK_ADDR,0), 10, \"\/\", handler, filter);\n+        var server = HttpServer.create(LOOPBACK_ADDR, 10, \"\/\", handler, filter);\n@@ -169,1 +169,1 @@\n-        var server = HttpServer.create(new InetSocketAddress(LOOPBACK_ADDR,0), 10, \"\/\", handler, filter);\n+        var server = HttpServer.create(LOOPBACK_ADDR, 10, \"\/\", handler, filter);\n@@ -233,1 +233,1 @@\n-            server = HttpServer.create(new InetSocketAddress(LOOPBACK_ADDR, 0), 10, \"\/\", handler);\n+            server = HttpServer.create(LOOPBACK_ADDR, 10, \"\/\", handler);\n@@ -236,1 +236,1 @@\n-            server = HttpServer.create(new InetSocketAddress(LOOPBACK_ADDR, 0), 10, \"\/\", handler, filter);\n+            server = HttpServer.create(LOOPBACK_ADDR, 10, \"\/\", handler, filter);\n@@ -261,1 +261,1 @@\n-        var server = HttpServer.create(new InetSocketAddress(LOOPBACK_ADDR,0), 0, \"\/\", handler, filter);\n+        var server = HttpServer.create(LOOPBACK_ADDR, 0, \"\/\", handler, filter);\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/OutputFilterTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -197,3 +197,0 @@\n-    static final DateTimeFormatter HTTP_DATE_FORMATTER =\n-            DateTimeFormatter.ofPattern(\"EEE, dd MMM yyyy HH:mm:ss v\");\n-\n@@ -202,1 +199,1 @@\n-                .format(HTTP_DATE_FORMATTER);\n+                .format(DateTimeFormatter.RFC_1123_DATE_TIME);\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/SecurityManagerTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -699,3 +699,0 @@\n-    static final DateTimeFormatter HTTP_DATE_FORMATTER =\n-            DateTimeFormatter.ofPattern(\"EEE, dd MMM yyyy HH:mm:ss v\");\n-\n@@ -704,1 +701,1 @@\n-                .format(HTTP_DATE_FORMATTER);\n+                .format(DateTimeFormatter.RFC_1123_DATE_TIME);\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/SimpleFileServerTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -409,3 +409,0 @@\n-    static final DateTimeFormatter HTTP_DATE_FORMATTER =\n-            DateTimeFormatter.ofPattern(\"EEE, dd MMM yyyy HH:mm:ss v\");\n-\n@@ -414,1 +411,1 @@\n-                .format(HTTP_DATE_FORMATTER);\n+                .format(DateTimeFormatter.RFC_1123_DATE_TIME);\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/ZipFileSystemTest.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"}]}