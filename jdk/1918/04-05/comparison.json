{"files":[{"patch":"@@ -104,2 +104,2 @@\n-        private Map<Class<?>, T> forward;\n-        private Map<Class<?>, T> reverse;\n+        private Map<Class<?>, T> forward = Map.of();\n+        private Map<Class<?>, T> reverse = Map.of();\n@@ -108,1 +108,1 @@\n-            return get(forward, c);\n+            return forward.get(c);\n@@ -112,5 +112,1 @@\n-            return get(reverse, c);\n-        }\n-\n-        private T get(final Map<Class<?>, T> m, final Class<?> c) {\n-            return m == null ? null : m.get(c);\n+            return reverse.get(c);\n@@ -124,1 +120,1 @@\n-            while ((value = get(map, c)) == null) {\n+            while ((value = map.get(c)) == null) {\n@@ -131,9 +127,4 @@\n-                final Map<Class<?>, T> newMap;\n-                if (map == null) {\n-                    newMap = Map.of(c, newValue);\n-                } else {\n-                    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n-                    final Map.Entry<Class<?>, T>[] entries = map.entrySet().toArray(new Map.Entry[map.size() + 1]);\n-                    entries[map.size()] = Map.entry(c, newValue);\n-                    newMap = Map.ofEntries(entries);\n-                }\n+                @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+                final Map.Entry<Class<?>, T>[] entries = map.entrySet().toArray(new Map.Entry[map.size() + 1]);\n+                entries[map.size()] = Map.entry(c, newValue);\n+                final var newMap = Map.ofEntries(entries);\n","filename":"src\/jdk.dynalink\/share\/classes\/jdk\/dynalink\/BiClassValue.java","additions":9,"deletions":18,"binary":false,"changes":27,"status":"modified"}]}