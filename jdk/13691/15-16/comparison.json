{"files":[{"patch":"@@ -36,2 +36,2 @@\n-\/*\n- * This class implements the Hierarchical Signature System using the\n+\/**\n+ * Implementation of the Hierarchical Signature System using the\n@@ -39,1 +39,1 @@\n- *  NIST Special publication 800-208.\n+ * NIST Special publication 800-208.\n@@ -191,6 +191,6 @@\n-        final static int LMS_RESERVED = 0;\n-        final static int LMS_SHA256_M32_H5 = 5;\n-        final static int LMS_SHA256_M32_H10 = 6;\n-        final static int LMS_SHA256_M32_H15 = 7;\n-        final static int LMS_SHA256_M32_H20 = 8;\n-        final static int LMS_SHA256_M32_H25 = 9;\n+        static final int LMS_RESERVED = 0;\n+        static final int LMS_SHA256_M32_H5 = 5;\n+        static final int LMS_SHA256_M32_H10 = 6;\n+        static final int LMS_SHA256_M32_H15 = 7;\n+        static final int LMS_SHA256_M32_H20 = 8;\n+        static final int LMS_SHA256_M32_H25 = 9;\n@@ -212,5 +212,5 @@\n-        final static int LMOTS_RESERVED = 0;\n-        final static int LMOTS_SHA256_N32_W1 = 1;\n-        final static int LMOTS_SHA256_N32_W2 = 2;\n-        final static int LMOTS_SHA256_N32_W4 = 3;\n-        final static int LMOTS_SHA256_N32_W8 = 4;\n+        static final int LMOTS_RESERVED = 0;\n+        static final int LMOTS_SHA256_N32_W1 = 1;\n+        static final int LMOTS_SHA256_N32_W2 = 2;\n+        static final int LMOTS_SHA256_N32_W4 = 3;\n+        static final int LMOTS_SHA256_N32_W8 = 4;\n@@ -410,1 +410,1 @@\n-        final private byte[] qArr;\n+        private final byte[] qArr;\n@@ -415,1 +415,1 @@\n-        final int m; \/\/ output length of the hash fubction used in the Merkle tree\n+        final int m; \/\/ output length of the hash function used in the Merkle tree\n@@ -417,2 +417,1 @@\n-        final byte[][] path;\n-        final byte[] sigArr;\n+        private final byte[][] path;\n@@ -428,3 +427,3 @@\n-                q = LMSUtils.fourBytesToInt(sigArray, offset);\n-                qArr = Arrays.copyOfRange(sigArray, offset, offset + 4);\n-                sigOtsType = LMSUtils.fourBytesToInt(sigArray, offset + 4);\n+            q = LMSUtils.fourBytesToInt(sigArray, offset);\n+            qArr = Arrays.copyOfRange(sigArray, offset, offset + 4);\n+            sigOtsType = LMSUtils.fourBytesToInt(sigArray, offset + 4);\n@@ -446,1 +445,1 @@\n-                            sigArray, offset + 4, offset + 4 + otsSigLen);\n+                    sigArray, offset + 4, offset + 4 + otsSigLen);\n@@ -468,2 +467,0 @@\n-            sigArr = Arrays.copyOfRange(sigArray, offset, offset + sigArrLen);\n-\n@@ -512,1 +509,1 @@\n-        private final static byte[] hashbufSha256_32 = {\n+        private static final byte[] hashbufSha256_32 = {\n@@ -711,1 +708,1 @@\n-                throw  new InvalidKeyException(\"key cannot be null\");\n+                throw new InvalidKeyException(\"key cannot be null\");\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/HSS.java","additions":23,"deletions":26,"binary":false,"changes":49,"status":"modified"}]}