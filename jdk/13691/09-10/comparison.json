{"files":[{"patch":"@@ -39,1 +39,1 @@\n- * Leighton-Micali Signatures (LMS) as described in RFC 8554 and NIST Special publication 800-208\n+ * Leighton-Micali Signatures (LMS) as described in RFC 8554 and NIST Special publication 800-208.\n@@ -436,1 +436,1 @@\n-                throw new InvalidParameterException(\"LMS signature length is incorrect\");\n+                throw new SignatureException(\"LMS signature length is incorrect\");\n@@ -620,4 +620,3 @@\n-                    var val = new DerValue(new ByteArrayInputStream(x.getEncoded()));\n-                    val.data.getDerValue();\n-                    return new HSSPublicKey(new DerValue(val.data.getBitString()).getOctetString());\n-                } catch (IOException | InvalidKeyException e) {\n+                    X509EncodedKeySpec x509Spec = (X509EncodedKeySpec)keySpec;\n+                    return new HSSPublicKey(x509Spec.getEncoded(), true);\n+                } catch (InvalidKeyException e) {\n@@ -628,1 +627,1 @@\n-                    return new HSSPublicKey(x.getKeyArr());\n+                    return new HSSPublicKey(x.getKeyArr(), false);\n@@ -678,1 +677,1 @@\n-    static class HSSPublicKey extends X509Key implements Serializable, Length {\n+    static class HSSPublicKey extends X509Key implements Serializable {\n@@ -681,1 +680,1 @@\n-        private int L;\n+        private transient int L;\n@@ -684,4 +683,13 @@\n-        HSSPublicKey(byte[] keyArray) throws InvalidKeyException {\n-            int inLen = keyArray.length;\n-            if (inLen < 4) {\n-                throw new InvalidKeyException(\"HSS public key too short\");\n+        HSSPublicKey(byte[] keyArray, boolean x509Encoded) throws InvalidKeyException {\n+            if (x509Encoded) {\n+                decode(keyArray);\n+            } else {\n+                int inLen = keyArray.length;\n+                if (inLen < 4) {\n+                    throw new InvalidKeyException(\"HSS public key too short\");\n+                }\n+                L = LMSUtils.fourBytesToInt(keyArray, 0);\n+                lmsPublicKey = new LMSPublicKey(Arrays.copyOfRange(keyArray, 4, keyArray.length), 0, true);\n+                algid = new AlgorithmId(ObjectIdentifier.of(KnownOIDs.HSSLMS));\n+                byte[] derEncodedKeyarray = new DerOutputStream().putOctetString(keyArray).toByteArray();\n+                this.setKey(new BitArray(8 * derEncodedKeyarray.length, derEncodedKeyarray));\n@@ -689,5 +697,0 @@\n-            L = LMSUtils.fourBytesToInt(keyArray, 0);\n-            lmsPublicKey = new LMSPublicKey(Arrays.copyOfRange(keyArray, 4, keyArray.length), 0, true);\n-            algid = new AlgorithmId(ObjectIdentifier.of(KnownOIDs.HSSLMS));\n-            byte[] derEncodedKeyarray = new DerOutputStream().putOctetString(keyArray).toByteArray();\n-            this.setKey(new BitArray(8 * derEncodedKeyarray.length, derEncodedKeyarray));\n@@ -698,1 +701,1 @@\n-            HexDumpEncoder  encoder = new HexDumpEncoder();\n+            HexDumpEncoder encoder = new HexDumpEncoder();\n@@ -713,2 +716,2 @@\n-            L = LMSUtils.fourBytesToInt(keyArray, 0);\n-            lmsPublicKey = new LMSPublicKey(keyArray, 0, true);\n+            L = LMSUtils.fourBytesToInt(keyArray, 2);\n+            lmsPublicKey = new LMSPublicKey(keyArray, 6, true);\n@@ -717,1 +720,0 @@\n-\n@@ -725,5 +727,0 @@\n-\n-        @Override\n-        public int length() {\n-            return getKey().length();\n-        }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/HSS.java","additions":24,"deletions":27,"binary":false,"changes":51,"status":"modified"}]}