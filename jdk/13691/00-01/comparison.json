{"files":[{"patch":"@@ -32,4 +32,1 @@\n-import java.io.ByteArrayInputStream;\n-import java.io.IOException;\n-import java.io.Serial;\n-import java.io.Serializable;\n+import java.io.*;\n@@ -43,1 +40,1 @@\n-    private byte[] message;\n+    private ByteArrayOutputStream messageStream;\n@@ -55,2 +52,2 @@\n-    protected void engineInitSign(PrivateKey publicKey) {\n-        throw new UnsupportedOperationException();\n+    protected void engineInitSign(PrivateKey privateKey) throws InvalidKeyException {\n+        throw new InvalidKeyException(\"Signing is not supported\");\n@@ -68,1 +65,1 @@\n-        message = new byte[0];\n+        messageStream = new ByteArrayOutputStream();\n@@ -72,5 +69,1 @@\n-        int mLen = message.length;\n-        byte[] newMessage = new byte[mLen + 1];\n-        System.arraycopy(message, 0, newMessage, 0, mLen);\n-        newMessage[mLen] = data;\n-        message = newMessage;\n+        messageStream.write(data);\n@@ -80,5 +73,1 @@\n-        int mLen = message.length;\n-        byte[] newMessage = new byte[mLen + len];\n-        System.arraycopy(message, 0, newMessage, 0, mLen);\n-        System.arraycopy(data, 0, newMessage, mLen, len);\n-        message = newMessage;\n+        messageStream.write(data, off, len);\n@@ -89,1 +78,1 @@\n-            HSSSignature sig = new HSSSignature(signature, pubKey.L);\n+            HSSSignature sig = new HSSSignature(signature, pubKey.L, pubKey.getDigestAlgorithm());\n@@ -97,1 +86,1 @@\n-            return result & lmsVerify(lmsPubKey, sig.siglist[sig.Nspk], message);\n+            return result & lmsVerify(lmsPubKey, sig.siglist[sig.Nspk], messageStream.toByteArray());\n@@ -179,1 +168,0 @@\n-            \/\/ ??? do these have to have the same hash alg ???\n@@ -184,1 +172,2 @@\n-            if ((inLen < (24 + m)) || (checkExactLength && (inLen != (24 + m)))) {\n+            if ((inLen < (24 + m)) || (checkExactLength && (inLen != (24 + m))) ||\n+                    !LMOTSParams.of(otsType).hashAlgName.equals(lmParams.hashAlgStr)) {\n@@ -741,1 +730,1 @@\n-            throw new InvalidKeySpecException();\n+            throw new InvalidKeySpecException(\"Private key generation is not supported\");\n@@ -796,1 +785,1 @@\n-        HSSSignature(byte[] sigArr, int pubKeyL) throws SignatureException {\n+        HSSSignature(byte[] sigArr, int pubKeyL, String pubKeyHashAlg) throws SignatureException {\n@@ -812,0 +801,3 @@\n+                    if (!pubList[i].getDigestAlgorithm().equals(pubKeyHashAlg)) {\n+                        throw new SignatureException(\"Bad HSS signature\");\n+                    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/HSS.java","additions":16,"deletions":24,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -189,2 +189,3 @@\n-        add(p, \"Signature\", \"HSS\/LMS\", \"sun.security.provider.HSS\");\n-        add(p, \"KeyFactory\", \"HSS\/LMS\", \"sun.security.provider.HSS$KeyFactoryImpl\");\n+        attrs.clear();\n+        attrs.put(\"ImplementedIn\", \"Software\");\n+        addWithAlias(p, \"Signature\", \"HSS\/LMS\", \"sun.security.provider.HSS\", attrs);\n@@ -220,0 +221,1 @@\n+        addWithAlias(p, \"KeyFactory\", \"HSS\/LMS\", \"sun.security.provider.HSS$KeyFactoryImpl\", attrs);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/SunEntries.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -274,0 +274,2 @@\n+        store(\"HSS\/LMS\", KnownOIDs.HSSLMS, KnownOIDs.HSSLMS.value());\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/SecurityProviderConstants.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}