{"files":[{"patch":"@@ -33,0 +33,1 @@\n+import java.security.SecureRandom;\n@@ -63,0 +64,6 @@\n+    @Override\n+    protected void engineInitSign(PrivateKey prk, SecureRandom sr)\n+            throws InvalidKeyException {\n+        throw new InvalidKeyException(\"HSS\/LMS signing is not supported\");\n+    }\n+\n@@ -156,1 +163,1 @@\n-                throw new InvalidKeyException(\"Wrong LMS public Key length\");\n+                throw new InvalidKeyException(\"Wrong LMS public key length\");\n@@ -664,1 +671,1 @@\n-            if (keySpec instanceof X509EncodedKeySpec) {\n+            if (keySpec instanceof X509EncodedKeySpec x509Spec) {\n@@ -666,1 +673,0 @@\n-                    X509EncodedKeySpec x509Spec = (X509EncodedKeySpec)keySpec;\n@@ -672,1 +678,1 @@\n-            } else if (keySpec instanceof RawKeySpec x) {\n+            } else if (keySpec instanceof RawKeySpec rawSpec) {\n@@ -674,1 +680,1 @@\n-                    return new HSSPublicKey(x.getKeyArr(), false);\n+                    return new HSSPublicKey(rawSpec.getKeyArr(), false);\n@@ -700,1 +706,2 @@\n-                throw new InvalidKeySpecException(\"keySpec is not an X509 one\");\n+                throw new InvalidKeySpecException(\n+                        \"keySpec is not an X509EncodedKeySpec\");\n@@ -787,1 +794,1 @@\n-        protected Object writeReplace() throws java.io.ObjectStreamException {\n+        private Object writeReplace() throws java.io.ObjectStreamException {\n@@ -793,0 +800,7 @@\n+\n+        @java.io.Serial\n+        private void readObject(java.io.ObjectInputStream s)\n+                throws java.io.ObjectStreamException {\n+            throw new InvalidObjectException(\n+                    \"HSS public keys are not directly deserializable\");\n+        }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/HSS.java","additions":21,"deletions":7,"binary":false,"changes":28,"status":"modified"}]}