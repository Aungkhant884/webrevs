{"files":[{"patch":"@@ -86,1 +86,4 @@\n-            return result & lmsVerify(lmsPubKey, sig.siglist[sig.Nspk], messageStream.toByteArray());\n+\n+            result &= lmsVerify(lmsPubKey, sig.siglist[sig.Nspk], messageStream.toByteArray());\n+            messageStream.reset();\n+            return result;\n@@ -88,0 +91,1 @@\n+            messageStream.reset();\n@@ -168,0 +172,1 @@\n+            LMOTSParams lmotsParams;\n@@ -169,1 +174,6 @@\n-            lmParams = new LMParams(type);\n+            try {\n+                lmParams = new LMParams(type);\n+                lmotsParams = LMOTSParams.of(otsType);\n+            } catch (IllegalArgumentException e) {\n+                throw new InvalidKeyException(e.getMessage());\n+            }\n@@ -173,1 +183,2 @@\n-                    !LMOTSParams.of(otsType).hashAlgName.equals(lmParams.hashAlgStr)) {\n+                    !lmotsParams.hashAlgName.equals(lmParams.hashAlgStr) ||\n+                    (lmParams.m != lmotsParams.n)) {\n@@ -367,1 +378,0 @@\n- *\/\n@@ -394,1 +404,1 @@\n-\/*\n+\n@@ -444,4 +454,0 @@\n-        public static LMSignature of(byte[] sigArray) throws InvalidParameterException {\n-            return new LMSignature(sigArray, 0, true);\n-        }\n-\n@@ -735,1 +741,1 @@\n-            if (key instanceof HSSPublicKey p) {\n+            if (key.getFormat().equals(\"X.509\") && key.getAlgorithm().equals(\"HSS\/LMS\")) {\n@@ -737,1 +743,1 @@\n-                    return keySpec.cast(new X509EncodedKeySpec(p.getEncoded()));\n+                    return keySpec.cast(new X509EncodedKeySpec(key.getEncoded()));\n@@ -745,2 +751,13 @@\n-            if (key instanceof HSSPublicKey) {\n-                return key;\n+            PublicKey pKey;\n+            try {\n+                \/\/ Check if key originates from this factory\n+                if (key instanceof HSSPublicKey) {\n+                    return key;\n+                }\n+                \/\/ Convert key to spec\n+                X509EncodedKeySpec x509EncodedKeySpec\n+                        = engineGetKeySpec(key, X509EncodedKeySpec.class);\n+                \/\/ Create key from spec, and return it\n+                pKey = engineGeneratePublic(x509EncodedKeySpec);\n+            } catch (Exception e) {\n+                throw new InvalidKeyException();\n@@ -748,1 +765,1 @@\n-            throw new InvalidKeyException();\n+            return pKey;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/HSS.java","additions":31,"deletions":14,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -274,2 +274,0 @@\n-        store(\"HSS\/LMS\", KnownOIDs.HSSLMS, KnownOIDs.HSSLMS.value());\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/SecurityProviderConstants.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -650,2 +650,2 @@\n-    public static final ObjectIdentifier hsslms_oid =\n-            ObjectIdentifier.of(KnownOIDs.HSSLMS);\n+\/\/    public static final ObjectIdentifier hsslms_oid =\n+\/\/            ObjectIdentifier.of(KnownOIDs.HSSLMS);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/AlgorithmId.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}