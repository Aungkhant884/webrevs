{"files":[{"patch":"@@ -32,4 +32,2 @@\n-\/\/ The NonblockingQueue template provides a non-blocking FIFO. It provides a\n-\/\/ try_pop() function for the client to implement pop() according to its\n-\/\/ need (e.g., whether or not to retry or prevent ABA problem). It has inner\n-\/\/ padding of one cache line between its two internal pointer fields.\n+\/\/ The NonblockingQueue template provides a non-blocking FIFO.\n+\/\/ It has inner padding of one cache line between its two internal pointers.\n","filename":"src\/hotspot\/share\/utilities\/nonblockingQueue.hpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -88,4 +88,2 @@\n-\/\/ appended; it is an invariant that the old tail's \"next\" value is NULL.\n-\/\/ But if the old tail is NULL then the queue was empty.  In this case the\n-\/\/ head of the list being appended is instead stored in the queue head; it is\n-\/\/ an invariant that the queue head is NULL in this case.\n+\/\/ appended. If the old tail is NULL then the queue was empty, then the head\n+\/\/ of the list being appended is instead stored in the queue head.\n@@ -108,1 +106,2 @@\n-  if ((old_tail == NULL) ||\n+  bool is_old_tail_null = (old_tail == NULL);\n+  if (is_old_tail_null ||\n@@ -114,0 +113,10 @@\n+    \/\/ Note that multiple concurrent push\/append operations cannot modify\n+    \/\/ _head simultaneously, because the Atomic::xchg() above orders these\n+    \/\/ push\/append operations so they perform Atomic::cmpxchg() on different\n+    \/\/ old_tail. Thus, the cmpxchg can only fail because of a concurrent try_pop.\n+    DEBUG_ONLY(T* old_head = Atomic::load(&_head);)\n+    \/\/ If old_tail is NULL, old_head could be NULL, or an unseen object\n+    \/\/ that is being popped.  Otherwise, old_head must be either NULL\n+    \/\/ or the same as old_tail.\n+    assert(is_old_tail_null ||\n+           old_head == NULL || old_head == old_tail, \"invariant\");\n@@ -182,0 +191,4 @@\n+  \/\/ Typically try_pop() will succeed without retrying many times, thus we\n+  \/\/ omit SpinPause in the loop body.  SpinPause or yield may be worthwhile\n+  \/\/ in rare, highly contended cases, and client code could implement such\n+  \/\/ with try_pop().\n@@ -186,1 +199,0 @@\n-\n","filename":"src\/hotspot\/share\/utilities\/nonblockingQueue.inline.hpp","additions":18,"deletions":6,"binary":false,"changes":24,"status":"modified"}]}