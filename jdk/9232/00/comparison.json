{"files":[{"patch":"@@ -35,0 +35,1 @@\n+import java.net.InetSocketAddress;\n@@ -41,2 +42,0 @@\n-import java.util.concurrent.TimeUnit;\n-import java.util.concurrent.atomic.AtomicInteger;\n@@ -47,2 +46,1 @@\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.net.JWebServerLauncher;\n@@ -73,2 +71,0 @@\n-    static final Path JAVA_HOME = Path.of(System.getProperty(\"java.home\"));\n-    static final String JWEBSERVER = getJwebserver(JAVA_HOME);\n@@ -78,1 +74,0 @@\n-    static final AtomicInteger PORT = new AtomicInteger();\n@@ -96,2 +91,2 @@\n-        final var sb = new StringBuffer();  \/\/ stdout & stderr\n-        final var p = startProcess(\"jwebserver\", sb);\n+        final JWebServerLauncher.JWebServerProcess server = JWebServerLauncher.launch(TEST_DIR);\n+        final int serverPort = server.serverAddr().getPort();\n@@ -99,4 +94,4 @@\n-            sendHTTPSRequest();  \/\/ server expected to terminate connection\n-            sendHTTPRequest();   \/\/ server expected to respond successfully\n-            sendHTTPSRequest();  \/\/ server expected to terminate connection\n-            sendHTTPRequest();   \/\/ server expected to respond successfully\n+            sendHTTPSRequest(serverPort);  \/\/ server expected to terminate connection\n+            sendHTTPRequest(serverPort);   \/\/ server expected to respond successfully\n+            sendHTTPSRequest(serverPort);  \/\/ server expected to terminate connection\n+            sendHTTPRequest(serverPort);   \/\/ server expected to respond successfully\n@@ -104,3 +99,6 @@\n-            p.destroy();\n-            int exitCode = p.waitFor();\n-            checkOutput(sb, exitCode);\n+            server.process().destroy();\n+            int exitCode = server.process().waitFor();\n+            if (exitCode != NORMAL_EXIT_CODE) {\n+                throw new RuntimeException(\"jwebserver process returned unexpected exit code \" + exitCode);\n+            }\n+            checkOutput(server);\n@@ -124,1 +122,1 @@\n-    void sendHTTPRequest() throws IOException, InterruptedException {\n+    void sendHTTPRequest(final int serverPort) throws IOException, InterruptedException {\n@@ -129,1 +127,1 @@\n-        var request = HttpRequest.newBuilder(URI.create(\"http:\/\/localhost:\" + PORT.get() + \"\/\")).build();\n+        var request = HttpRequest.newBuilder(URI.create(\"http:\/\/localhost:\" + serverPort + \"\/\")).build();\n@@ -134,1 +132,1 @@\n-    void sendHTTPSRequest() throws IOException, InterruptedException {\n+    void sendHTTPSRequest(final int serverPort) throws IOException, InterruptedException {\n@@ -140,1 +138,1 @@\n-        var request = HttpRequest.newBuilder(URI.create(\"https:\/\/localhost:\" + PORT.get() + \"\/\")).build();\n+        var request = HttpRequest.newBuilder(URI.create(\"https:\/\/localhost:\" + serverPort + \"\/\")).build();\n@@ -156,31 +154,0 @@\n-    \/\/ --- infra ---\n-\n-    static String getJwebserver(Path image) {\n-        boolean isWindows = System.getProperty(\"os.name\").startsWith(\"Windows\");\n-        Path jwebserver = image.resolve(\"bin\").resolve(isWindows ? \"jwebserver.exe\" : \"jwebserver\");\n-        if (Files.notExists(jwebserver))\n-            throw new RuntimeException(jwebserver + \" not found\");\n-        return jwebserver.toAbsolutePath().toString();\n-    }\n-\n-    \/\/ The stdout\/stderr output line to wait for when starting the jwebserver\n-    static final String REGULAR_STARTUP_LINE_STRING_1 = \"URL http:\/\/\";\n-    static final String REGULAR_STARTUP_LINE_STRING_2 = \"Serving \";\n-\n-    static void parseAndSetPort(String line) {\n-        PORT.set(Integer.parseInt(line.split(\" port \")[1]));\n-    }\n-\n-    static Process startProcess(String name, StringBuffer sb) throws Throwable {\n-        \/\/ starts the process, parses the port and awaits startup line before sending requests\n-        return ProcessTools.startProcess(name,\n-                new ProcessBuilder(JWEBSERVER, \"-p\", \"0\").directory(TEST_DIR.toFile()),\n-                line -> {\n-                    if (line.startsWith(REGULAR_STARTUP_LINE_STRING_2)) { parseAndSetPort(line); }\n-                    sb.append(line + \"\\n\");\n-                },\n-                line -> line.startsWith(REGULAR_STARTUP_LINE_STRING_1),\n-                30,  \/\/ suitably high default timeout, not expected to timeout\n-                TimeUnit.SECONDS);\n-    }\n-\n@@ -199,7 +166,6 @@\n-    static void checkOutput(StringBuffer sb, int exitCode) {\n-        out.println(\"\\n--- server output: \\n\" + sb);\n-        var outputAnalyser = new OutputAnalyzer(sb.toString(), \"\", exitCode);\n-            outputAnalyser.shouldHaveExitValue(NORMAL_EXIT_CODE)\n-                          .shouldContain(\"Binding to loopback by default. For all interfaces use \\\"-b 0.0.0.0\\\" or \\\"-b ::\\\".\")\n-                          .shouldContain(\"Serving \" + TEST_DIR + \" and subdirectories on \" + LOOPBACK_ADDR + \" port \" + PORT)\n-                          .shouldContain(\"URL http:\/\/\" + LOOPBACK_ADDR);\n+    static void checkOutput(JWebServerLauncher.JWebServerProcess server) {\n+        out.println(\"\\n--- server output: \\n\" + server.processOutput());\n+        final InetSocketAddress serverAddr = server.serverAddr();\n+        server.assertOutputContainsLine(\"Binding to loopback by default. For all interfaces use \\\"-b 0.0.0.0\\\" or \\\"-b ::\\\".\");\n+        server.assertOutputContainsLine(\"Serving \" + TEST_DIR + \" and subdirectories on \" + LOOPBACK_ADDR + \" port \" + serverAddr.getPort());\n+        server.assertOutputHasLineStartingWith(\"URL http:\/\/\" + LOOPBACK_ADDR);\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/simpleserver\/jwebserver\/MaxRequestTimeTest.java","additions":24,"deletions":58,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -0,0 +1,166 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.test.lib.net;\n+\n+import jdk.test.lib.JDKToolFinder;\n+import jdk.test.lib.process.ProcessTools;\n+\n+import java.io.IOException;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+\/**\n+ * Utility to launch the {@code jwebserver}. This does the necessary work of finding the tool\n+ * location and launching the process and waiting for the server to be ready to serve requests.\n+ *\/\n+public class JWebServerLauncher {\n+\n+    private static final Path JWEBSERVER_TOOL = Path.of(JDKToolFinder.getJDKTool(\"jwebserver\"));\n+    private static final String EXPECTED_SERVER_STARTUP_LINE = \"URL \";\n+\n+    \/**\n+     * Represents a launched jwebserver\n+     *\n+     * @param process       The jwebserver process\n+     * @param serverAddr    The address on which the server is listening\n+     * @param processOutput The server's stdout and stderr output\n+     *\/\n+    public record JWebServerProcess(Process process, InetSocketAddress serverAddr,\n+                                    List<String> processOutput) {\n+\n+        \/**\n+         * Throws an {@link AssertionError} if the server's output (stdout and stderr)\n+         * doesn't contain the passed {@code line}\n+         *\n+         * @param line The expected line\n+         *\/\n+        public void assertOutputContainsLine(final String line) {\n+            if (!processOutput.contains(line)) {\n+                throw new AssertionError(\"'\" + line + \"' missing from\" +\n+                        \" stdout\/stderr of jwebserver\");\n+            }\n+        }\n+\n+        \/**\n+         * Throws an {@link AssertionError} if the server's output (stdout and stderr)\n+         * doesn't contain any line which starts with the passed {@code lineStart}\n+         *\n+         * @param lineStart The expected start of a line\n+         *\/\n+        public void assertOutputHasLineStartingWith(final String lineStart) {\n+            for (final String line : processOutput) {\n+                if (line.startsWith(lineStart)) {\n+                    return;\n+                }\n+            }\n+            throw new AssertionError(\"No line in jwebserver's stdout\/stderr \" +\n+                    \"starts with '\" + lineStart + \"'\");\n+        }\n+    }\n+\n+    private static InetSocketAddress parseServerAddr(final String urlText) {\n+        \/\/ the line is of the form:\n+        \/\/ URL http:\/\/127.0.0.1:8000\/\n+        if (!urlText.startsWith(EXPECTED_SERVER_STARTUP_LINE) ||\n+                urlText.length() == EXPECTED_SERVER_STARTUP_LINE.length()) {\n+            \/\/ unexpected line\n+            System.err.println(\"Unexpected startup line: \" + urlText);\n+            return null;\n+        }\n+        final URI serverURL;\n+        try {\n+            serverURL = new URI(urlText.substring(EXPECTED_SERVER_STARTUP_LINE.length()));\n+        } catch (URISyntaxException e) {\n+            System.err.println(\"Failed to parse server address from startup line: \" + urlText);\n+            return null;\n+        }\n+        return new InetSocketAddress(serverURL.getHost(), serverURL.getPort());\n+    }\n+\n+    \/**\n+     * Launches the jwebserver which will serve the current directory contents\n+     *\n+     * @return The {@link JWebServerProcess} representing the launched server\n+     * @throws IOException\n+     *\/\n+    public static JWebServerProcess launch() throws IOException {\n+        return launch(null);\n+    }\n+\n+    \/**\n+     * Launches the jwebserver which will serve the passed {@code dirToServe} directory's content.\n+     *\n+     * @param dirToServe The directory to serve. Can be null in which case the current directory's\n+     *                   content will be served.\n+     * @return The {@link JWebServerProcess} representing the launched server\n+     * @throws IOException\n+     *\/\n+    public static JWebServerProcess launch(final Path dirToServe) throws IOException {\n+        if (Files.notExists(JWEBSERVER_TOOL)) {\n+            throw new IOException(\"jwebserver tool is missing\");\n+        }\n+        final Process process;\n+        \/\/ array of one element just to bypass effective final restriction in lambda usage\n+        final String[] starupLine = new String[1];\n+        final List<String> processOutput = new ArrayList<>();\n+        \/\/ starts the process, parses the port and awaits startup line before sending requests\n+        try {\n+            process = ProcessTools.startProcess(\"jwebserver\",\n+                    new ProcessBuilder(JWEBSERVER_TOOL.toString(), \"-p\", \"0\")\n+                            .directory(dirToServe == null ? null : dirToServe.toFile()),\n+                    line -> {\n+                        processOutput.add(line);\n+                    },\n+                    line -> {\n+                        if (line.startsWith(EXPECTED_SERVER_STARTUP_LINE)) {\n+                            starupLine[0] = line;\n+                            return true;\n+                        }\n+                        return false;\n+                    },\n+                    30,  \/\/ suitably high default timeout, not expected to timeout\n+                    TimeUnit.SECONDS);\n+        } catch (InterruptedException | TimeoutException e) {\n+            throw new IOException(e);\n+        }\n+        if (starupLine[0] == null) {\n+            \/\/ kill the launched process\n+            process.destroy();\n+            throw new IOException(\"Could not determine server address for jwebserver\");\n+        }\n+        final InetSocketAddress serverAddr = parseServerAddr(starupLine[0]);\n+        if (serverAddr == null) {\n+            process.destroy();\n+            throw new IOException(\"Could not parse server address of launched jwebserver\");\n+        }\n+        System.out.println(\"Launched jwebserver process pid=\" + process.pid() + \", address= \" + serverAddr);\n+        return new JWebServerProcess(process, serverAddr, processOutput);\n+    }\n+}\n","filename":"test\/lib\/jdk\/test\/lib\/net\/JWebServerLauncher.java","additions":166,"deletions":0,"binary":false,"changes":166,"status":"added"}]}