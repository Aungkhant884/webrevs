{"files":[{"patch":"@@ -2950,10 +2950,2 @@\n-\/\/ Get the current stack base from the OS (actually, the pthread library).\n-\/\/ Note: usually not page aligned.\n-address os::current_stack_base() {\n-  AixMisc::stackbounds_t bounds;\n-  bool rc = AixMisc::query_stack_bounds_for_current_thread(&bounds);\n-  guarantee(rc, \"Unable to retrieve stack bounds.\");\n-  return bounds.base;\n-}\n-\n-\/\/ Get the current stack size from the OS (actually, the pthread library).\n+\/\/ Get the current stack base and size from the OS (actually, the pthread library).\n+\/\/ Note: base usually not page aligned.\n@@ -2961,1 +2953,1 @@\n-size_t os::current_stack_size() {\n+void os::current_stack_base_and_size(address* stack_base, size_t* stack_size) {\n@@ -2965,1 +2957,3 @@\n-  \/\/ Align the returned stack size such that the stack low address\n+  *stack_base = bounds.base;\n+\n+  \/\/ Align the reported stack size such that the stack low address\n@@ -2971,2 +2965,1 @@\n-  size_t s = bounds.base - low_aligned;\n-  return s;\n+  *stack_size = bounds.base - low_aligned;\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":7,"deletions":14,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -749,0 +749,4 @@\n+void os::current_stack_base_and_size(address* stack_base, size_t* stack_size) {\n+  os::Bsd::current_stack_region(stack_base, stack_size);\n+}\n+\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -58,0 +58,1 @@\n+  static void current_stack_region(address* base, size_t* size);\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -5370,1 +5370,1 @@\n-\/\/ ** P1 (aka bottom) and size (P2 = P1 - size) are the address and stack size\n+\/\/ ** P1 (aka bottom) and size are the address and stack size\n@@ -5372,0 +5372,1 @@\n+\/\/ ** P2 (aka stack top or base) = P1 - size)\n@@ -5377,1 +5378,2 @@\n-static void current_stack_region(address * bottom, size_t * size) {\n+void os::Linux::current_stack_region(address* base, size_t* size) {\n+  address bottom;\n@@ -5381,2 +5383,3 @@\n-    *bottom = os::Linux::initial_thread_stack_bottom();\n-    *size   = os::Linux::initial_thread_stack_size();\n+    bottom = os::Linux::initial_thread_stack_bottom();\n+    *size = os::Linux::initial_thread_stack_size();\n+    *base = bottom + *size;\n@@ -5397,1 +5400,1 @@\n-    if (pthread_attr_getstack(&attr, (void **)bottom, size) != 0) {\n+    if (pthread_attr_getstack(&attr, (void **)&bottom, size) != 0) {\n@@ -5401,0 +5404,2 @@\n+    *base = bottom + *size;\n+\n@@ -5407,2 +5412,2 @@\n-      *bottom += guard_size;\n-      *size   -= guard_size;\n+      bottom += guard_size;\n+      *size  -= guard_size;\n@@ -5412,1 +5417,0 @@\n-\n@@ -5414,2 +5418,2 @@\n-  assert(os::current_stack_pointer() >= *bottom &&\n-         os::current_stack_pointer() < *bottom + *size, \"just checking\");\n+  assert(os::current_stack_pointer() >= bottom &&\n+         os::current_stack_pointer() < *base, \"just checking\");\n@@ -5418,6 +5422,1 @@\n-address os::current_stack_base() {\n-  address bottom;\n-  size_t size;\n-  current_stack_region(&bottom, &size);\n-  return (bottom + size);\n-}\n+#endif\n@@ -5425,7 +5424,2 @@\n-size_t os::current_stack_size() {\n-  \/\/ This stack size includes the usable stack and HotSpot guard pages\n-  \/\/ (for the threads that have Hotspot guard pages).\n-  address bottom;\n-  size_t size;\n-  current_stack_region(&bottom, &size);\n-  return size;\n+void os::current_stack_base_and_size(address* stack_base, size_t* stack_size) {\n+  os::Linux::current_stack_region(stack_base, stack_size);\n@@ -5433,1 +5427,2 @@\n-#endif\n+\n+\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":19,"deletions":24,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -102,0 +102,2 @@\n+  static void current_stack_region(address* base, size_t* size);\n+\n","filename":"src\/hotspot\/os\/linux\/os_linux.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -428,2 +428,0 @@\n-\/\/ os::current_stack_base()\n-\/\/\n@@ -434,1 +432,1 @@\n-address os::current_stack_base() {\n+void os::current_stack_base_and_size(address* stack_base, size_t* stack_size) {\n@@ -437,1 +435,1 @@\n-  size_t stack_size;\n+  size_t size;\n@@ -440,2 +438,2 @@\n-  stack_bottom =  (address)minfo.AllocationBase;\n-  stack_size = minfo.RegionSize;\n+  stack_bottom = (address)minfo.AllocationBase;\n+  size = minfo.RegionSize;\n@@ -446,1 +444,1 @@\n-    VirtualQuery(stack_bottom+stack_size, &minfo, sizeof(minfo));\n+    VirtualQuery(stack_bottom+size, &minfo, sizeof(minfo));\n@@ -448,1 +446,1 @@\n-      stack_size += minfo.RegionSize;\n+      size += minfo.RegionSize;\n@@ -453,9 +451,2 @@\n-  return stack_bottom + stack_size;\n-}\n-\n-size_t os::current_stack_size() {\n-  size_t sz;\n-  MEMORY_BASIC_INFORMATION minfo;\n-  VirtualQuery(&minfo, &minfo, sizeof(minfo));\n-  sz = (size_t)os::current_stack_base() - (size_t)minfo.AllocationBase;\n-  return sz;\n+  *stack_base = stack_bottom + size;\n+  *stack_size = size;\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":8,"deletions":17,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -358,1 +358,2 @@\n-static void current_stack_region(address * bottom, size_t * size) {\n+void os::Bsd::current_stack_region(address* base, size_t* size) {\n+  address bottom;\n@@ -361,1 +362,1 @@\n-  void *stacktop = pthread_get_stackaddr_np(self);\n+  *base = (address) pthread_get_stackaddr_np(self);\n@@ -363,1 +364,1 @@\n-  *bottom = (address) stacktop - *size;\n+  bottom = *base - *size;\n@@ -371,2 +372,3 @@\n-  *bottom = (address)((char *)ss.ss_sp - ss.ss_size);\n-  *size   = ss.ss_size;\n+  *base = (address) ss.ss_sp;\n+  *size = ss.ss_size;\n+  bottom = *base - *size;\n@@ -387,2 +389,2 @@\n-  if (pthread_attr_getstackaddr(&attr, (void **)bottom) != 0 ||\n-    pthread_attr_getstacksize(&attr, size) != 0) {\n+  if (pthread_attr_getstackaddr(&attr, (void **)&bottom) != 0 ||\n+      pthread_attr_getstacksize(&attr, size) != 0) {\n@@ -392,0 +394,2 @@\n+  *base = bottom + *size;\n+\n@@ -394,17 +398,2 @@\n-  assert(os::current_stack_pointer() >= *bottom &&\n-         os::current_stack_pointer() < *bottom + *size, \"just checking\");\n-}\n-\n-address os::current_stack_base() {\n-  address bottom;\n-  size_t size;\n-  current_stack_region(&bottom, &size);\n-  return (bottom + size);\n-}\n-\n-size_t os::current_stack_size() {\n-  \/\/ stack size includes normal stack and HotSpot guard pages\n-  address bottom;\n-  size_t size;\n-  current_stack_region(&bottom, &size);\n-  return size;\n+  assert(os::current_stack_pointer() >= bottom &&\n+         os::current_stack_pointer() < *base, \"just checking\");\n","filename":"src\/hotspot\/os_cpu\/bsd_aarch64\/os_bsd_aarch64.cpp","additions":13,"deletions":24,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -712,2 +712,3 @@\n-\/\/ ** P1 (aka bottom) and size ( P2 = P1 - size) are the address and stack size returned from\n-\/\/    pthread_attr_getstack()\n+\/\/ ** P1 (aka bottom) and size are the address and stack size\n+\/\/    returned from pthread_attr_getstack().\n+\/\/ ** P2 (aka stack top or base) = P1 - size)\n@@ -715,1 +716,2 @@\n-static void current_stack_region(address * bottom, size_t * size) {\n+void os::Bsd::current_stack_region(address* base, size_t* size) {\n+  address bottom;\n@@ -718,1 +720,1 @@\n-  void *stacktop = pthread_get_stackaddr_np(self);\n+  *base = (address) pthread_get_stackaddr_np(self);\n@@ -741,1 +743,1 @@\n-  *bottom = (address) stacktop - *size;\n+  bottom = *base - *size;\n@@ -749,2 +751,3 @@\n-  *bottom = (address)((char *)ss.ss_sp - ss.ss_size);\n-  *size   = ss.ss_size;\n+  *base = (address) ss.ss_sp;\n+  *size = ss.ss_size;\n+  bottom = *base - *size;\n@@ -765,2 +768,2 @@\n-  if (pthread_attr_getstackaddr(&attr, (void **)bottom) != 0 ||\n-    pthread_attr_getstacksize(&attr, size) != 0) {\n+  if (pthread_attr_getstackaddr(&attr, (void **)&bottom) != 0 ||\n+      pthread_attr_getstacksize(&attr, size) != 0) {\n@@ -770,0 +773,2 @@\n+  *base = bottom + *size;\n+\n@@ -772,17 +777,2 @@\n-  assert(os::current_stack_pointer() >= *bottom &&\n-         os::current_stack_pointer() < *bottom + *size, \"just checking\");\n-}\n-\n-address os::current_stack_base() {\n-  address bottom;\n-  size_t size;\n-  current_stack_region(&bottom, &size);\n-  return (bottom + size);\n-}\n-\n-size_t os::current_stack_size() {\n-  \/\/ stack size includes normal stack and HotSpot guard pages\n-  address bottom;\n-  size_t size;\n-  current_stack_region(&bottom, &size);\n-  return size;\n+  assert(os::current_stack_pointer() >= bottom &&\n+         os::current_stack_pointer() < *base, \"just checking\");\n","filename":"src\/hotspot\/os_cpu\/bsd_x86\/os_bsd_x86.cpp","additions":16,"deletions":26,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -179,4 +179,2 @@\n-static void current_stack_region(address *bottom, size_t *size) {\n-  address stack_bottom;\n-  address stack_top;\n-  size_t stack_bytes;\n+void os::Bsd::current_stack_region(address* base, size_t* size) {\n+  address bottom;\n@@ -186,3 +184,3 @@\n-  stack_top = (address) pthread_get_stackaddr_np(self);\n-  stack_bytes = pthread_get_stacksize_np(self);\n-  stack_bottom = stack_top - stack_bytes;\n+  *base = (address) pthread_get_stackaddr_np(self);\n+  *size = pthread_get_stacksize_np(self);\n+  bottom = *base - *size;\n@@ -194,1 +192,1 @@\n-    fatal(\"pthread_stackseg_np failed with error = \" INT32_FORMAT, rslt);\n+    fatal(\"pthread_stackseg_np failed with error = %s\", rslt);\n@@ -196,3 +194,3 @@\n-  stack_top = (address) ss.ss_sp;\n-  stack_bytes  = ss.ss_size;\n-  stack_bottom = stack_top - stack_bytes;\n+  *base = (address) ss.ss_sp;\n+  *size  = ss.ss_size;\n+  bottom = *base - *size;\n@@ -206,1 +204,1 @@\n-    fatal(\"pthread_attr_init failed with error = \" INT32_FORMAT, rslt);\n+    fatal(\"pthread_attr_init failed with error = %d\", rslt);\n@@ -211,1 +209,1 @@\n-    fatal(\"pthread_attr_get_np failed with error = \" INT32_FORMAT, rslt);\n+    fatal(\"pthread_attr_get_np failed with error = %d\", rslt);\n@@ -213,2 +211,2 @@\n-  if (pthread_attr_getstackaddr(&attr, (void **) &stack_bottom) != 0 ||\n-      pthread_attr_getstacksize(&attr, &stack_bytes) != 0) {\n+  if (pthread_attr_getstackaddr(&attr, (void **) &bottom) != 0 ||\n+      pthread_attr_getstacksize(&attr, size) != 0) {\n@@ -218,0 +216,2 @@\n+  *base = bottom + *size;\n+\n@@ -220,1 +220,0 @@\n-  stack_top = stack_bottom + stack_bytes;\n@@ -222,21 +221,2 @@\n-\n-  assert(os::current_stack_pointer() >= stack_bottom, \"should do\");\n-  assert(os::current_stack_pointer() < stack_top, \"should do\");\n-\n-  *bottom = stack_bottom;\n-  *size = stack_top - stack_bottom;\n-}\n-\n-address os::current_stack_base() {\n-  address bottom;\n-  size_t size;\n-  current_stack_region(&bottom, &size);\n-  return bottom + size;\n-}\n-\n-size_t os::current_stack_size() {\n-  \/\/ stack size includes normal stack and HotSpot guard pages\n-  address bottom;\n-  size_t size;\n-  current_stack_region(&bottom, &size);\n-  return size;\n+  assert(os::current_stack_pointer() >= bottom &&\n+         os::current_stack_pointer() < *base, \"just checking\");\n","filename":"src\/hotspot\/os_cpu\/bsd_zero\/os_bsd_zero.cpp","additions":17,"deletions":37,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -309,1 +309,2 @@\n-static void current_stack_region(address *bottom, size_t *size) {\n+void os::Linux::current_stack_region(address* base, size_t* size) {\n+  address bottom;\n@@ -313,2 +314,4 @@\n-    address stack_bottom = os::Linux::initial_thread_stack_bottom();\n-    size_t stack_bytes  = os::Linux::initial_thread_stack_size();\n+    bottom = os::Linux::initial_thread_stack_bottom();\n+    *size = os::Linux::initial_thread_stack_size();\n+    *base = bottom + *size;\n+  } else {\n@@ -316,2 +319,1 @@\n-    assert(os::current_stack_pointer() >= stack_bottom, \"should do\");\n-    assert(os::current_stack_pointer() < stack_bottom + stack_bytes, \"should do\");\n+    pthread_attr_t attr;\n@@ -319,4 +321,1 @@\n-    *bottom = stack_bottom;\n-    *size = stack_bytes;\n-    return;\n-  }\n+    int rslt = pthread_getattr_np(pthread_self(), &attr);\n@@ -324,5 +323,7 @@\n-  pthread_attr_t attr;\n-  int res = pthread_getattr_np(pthread_self(), &attr);\n-  if (res != 0) {\n-    if (res == ENOMEM) {\n-      vm_exit_out_of_memory(0, OOM_MMAP_ERROR, \"pthread_getattr_np\");\n+    \/\/ JVM needs to know exact stack location, abort if it fails\n+    if (rslt != 0) {\n+      if (rslt == ENOMEM) {\n+        vm_exit_out_of_memory(0, OOM_MMAP_ERROR, \"pthread_getattr_np\");\n+      } else {\n+        fatal(\"pthread_getattr_np failed with error = %d\", rslt);\n+      }\n@@ -330,2 +331,3 @@\n-    else {\n-      fatal(\"pthread_getattr_np failed with error = %d\", res);\n+\n+    if (pthread_attr_getstack(&attr, (void **)&bottom, size) != 0) {\n+      fatal(\"Cannot locate current stack attributes!\");\n@@ -333,1 +335,0 @@\n-  }\n@@ -335,7 +336,1 @@\n-  address stack_bottom;\n-  size_t stack_bytes;\n-  res = pthread_attr_getstack(&attr, (void **) &stack_bottom, &stack_bytes);\n-  if (res != 0) {\n-    fatal(\"pthread_attr_getstack failed with error = %d\", res);\n-  }\n-  address stack_top = stack_bottom + stack_bytes;\n+    *base = bottom + *size;\n@@ -343,4 +338,4 @@\n-  \/\/ The block of memory returned by pthread_attr_getstack() includes\n-  \/\/ guard pages where present.  We need to trim these off.\n-  size_t page_bytes = os::vm_page_size();\n-  assert(((intptr_t) stack_bottom & (page_bytes - 1)) == 0, \"unaligned stack\");\n+    \/\/ The block of memory returned by pthread_attr_getstack() includes\n+    \/\/ guard pages where present.  We need to trim these off.\n+    size_t page_bytes = os::vm_page_size();\n+    assert(((intptr_t) bottom & (page_bytes - 1)) == 0, \"unaligned stack\");\n@@ -348,7 +343,7 @@\n-  size_t guard_bytes;\n-  res = pthread_attr_getguardsize(&attr, &guard_bytes);\n-  if (res != 0) {\n-    fatal(\"pthread_attr_getguardsize failed with errno = %d\", res);\n-  }\n-  int guard_pages = align_up(guard_bytes, page_bytes) \/ page_bytes;\n-  assert(guard_bytes == guard_pages * page_bytes, \"unaligned guard\");\n+    size_t guard_bytes;\n+    rslt = pthread_attr_getguardsize(&attr, &guard_bytes);\n+    if (rslt != 0) {\n+      fatal(\"pthread_attr_getguardsize failed with errno = %d\", rslt);\n+    }\n+    int guard_pages = align_up(guard_bytes, page_bytes) \/ page_bytes;\n+    assert(guard_bytes == guard_pages * page_bytes, \"unaligned guard\");\n@@ -357,9 +352,9 @@\n-  \/\/ IA64 has two stacks sharing the same area of memory, a normal\n-  \/\/ stack growing downwards and a register stack growing upwards.\n-  \/\/ Guard pages, if present, are in the centre.  This code splits\n-  \/\/ the stack in two even without guard pages, though in theory\n-  \/\/ there's nothing to stop us allocating more to the normal stack\n-  \/\/ or more to the register stack if one or the other were found\n-  \/\/ to grow faster.\n-  int total_pages = align_down(stack_bytes, page_bytes) \/ page_bytes;\n-  stack_bottom += (total_pages - guard_pages) \/ 2 * page_bytes;\n+    \/\/ IA64 has two stacks sharing the same area of memory, a normal\n+    \/\/ stack growing downwards and a register stack growing upwards.\n+    \/\/ Guard pages, if present, are in the centre.  This code splits\n+    \/\/ the stack in two even without guard pages, though in theory\n+    \/\/ there's nothing to stop us allocating more to the normal stack\n+    \/\/ or more to the register stack if one or the other were found\n+    \/\/ to grow faster.\n+    int total_pages = align_down(stack_bytes, page_bytes) \/ page_bytes;\n+    bottom += (total_pages - guard_pages) \/ 2 * page_bytes;\n@@ -368,1 +363,2 @@\n-  stack_bottom += guard_bytes;\n+    bottom += guard_bytes;\n+    *size = *base - bottom;\n@@ -370,15 +366,2 @@\n-  pthread_attr_destroy(&attr);\n-\n-  assert(os::current_stack_pointer() >= stack_bottom, \"should do\");\n-  assert(os::current_stack_pointer() < stack_top, \"should do\");\n-\n-  *bottom = stack_bottom;\n-  *size = stack_top - stack_bottom;\n-}\n-\n-address os::current_stack_base() {\n-  address bottom;\n-  size_t size;\n-  current_stack_region(&bottom, &size);\n-  return bottom + size;\n-}\n+    pthread_attr_destroy(&attr);\n+  }\n@@ -386,6 +369,2 @@\n-size_t os::current_stack_size() {\n-  \/\/ stack size includes normal stack and HotSpot guard pages\n-  address bottom;\n-  size_t size;\n-  current_stack_region(&bottom, &size);\n-  return size;\n+  assert(os::current_stack_pointer() >= bottom &&\n+         os::current_stack_pointer() < *base, \"just checking\");\n","filename":"src\/hotspot\/os_cpu\/linux_zero\/os_linux_zero.cpp","additions":45,"deletions":66,"binary":false,"changes":111,"status":"modified"},{"patch":"@@ -599,2 +599,1 @@\n-  static address current_stack_base();\n-  static size_t current_stack_size();\n+  static void current_stack_base_and_size(address* base, size_t* size);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -172,2 +172,5 @@\n-  set_stack_base(os::current_stack_base());\n-  set_stack_size(os::current_stack_size());\n+  address base;\n+  size_t size;\n+  os::current_stack_base_and_size(&base, &size);\n+  set_stack_base(base);\n+  set_stack_size(size);\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -181,1 +181,4 @@\n-  const size_t stack_size = os::current_stack_size();\n+  size_t stack_size = 0;\n+  address stack_base = nullptr;\n+  os::current_stack_base_and_size(&stack_base, &stack_size);\n+\n@@ -189,1 +192,0 @@\n-  const address stack_base          = os::current_stack_base();\n@@ -202,1 +204,4 @@\n-    const size_t stack_size     = os::current_stack_size();\n+    size_t stack_size = 0;\n+    address stack_base = nullptr;\n+    os::current_stack_base_and_size(&stack_base, &stack_size);\n+\n@@ -204,1 +209,0 @@\n-    const address stack_base    = os::current_stack_base();\n@@ -978,2 +982,1 @@\n-      stack_top = os::current_stack_base();\n-      stack_size = os::current_stack_size();\n+      os::current_stack_base_and_size(&stack_top, &stack_size);\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"}]}