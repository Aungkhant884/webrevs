{"files":[{"patch":"@@ -515,1 +515,2 @@\n-    bool allow_NonNMethod_space = method->is_method_handle_intrinsic();\n+    \/\/ IsUnloadingBehaviour::is_unloading needs to handle them separately.\n+    bool allow_NonNMethod_space = method->can_be_allocated_in_NonNMethod_space();\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"classfile\/classLoaderData.hpp\"\n@@ -34,1 +33,1 @@\n-  if (cm->method()->method_holder()->class_loader_data()->is_permanent_class_loader_data()) {\n+  if (cm->method()->can_be_allocated_in_NonNMethod_space()) {\n@@ -36,1 +35,1 @@\n-    \/\/ We only allow this for permenent methods which never get unloaded.\n+    \/\/ However, we only allow this for special methods which never get unloaded.\n","filename":"src\/hotspot\/share\/gc\/shared\/gcBehaviours.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -725,1 +725,2 @@\n-\n+  \/\/ Some special methods don't need to be findable by nmethod iterators and are permanent.\n+  bool can_be_allocated_in_NonNMethod_space() const { return is_method_handle_intrinsic(); }\n","filename":"src\/hotspot\/share\/oops\/method.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}