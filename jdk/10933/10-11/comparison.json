{"files":[{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022 SAP SE. All rights reserved.ights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test MHIntrinsicAllocFailureTest\n+ * @bug 8295724\n+ * @requires vm.compMode == \"Xmixed\"\n+ * @summary test allocation failure of method handle intrinsic in profiled\/non-profiled space\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ *\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -XX:CompileCommand=compileonly,null::*\n+ *                   -XX:ReservedCodeCacheSize=16m -XX:+SegmentedCodeCache\n+ *                   compiler.codecache.MHIntrinsicAllocFailureTest\n+ *\/\n+\n+package compiler.codecache;\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.whitebox.WhiteBox;\n+import jdk.test.whitebox.code.BlobType;\n+\n+import java.lang.management.MemoryPoolMXBean;\n+\n+public class MHIntrinsicAllocFailureTest {\n+    private static final WhiteBox WHITE_BOX = WhiteBox.getWhiteBox();\n+\n+    private interface TestInterface {\n+        int testMethod(int a, int b, Object c);\n+    }\n+\n+    private static void fillCodeCacheSegment(BlobType type) {\n+        \/\/ Fill with large blobs.\n+        MemoryPoolMXBean bean = type.getMemoryPool();\n+        int size = (int) (bean.getUsage().getMax() >> 7);\n+        while (WHITE_BOX.allocateCodeBlob(size, type.id) != 0) {}\n+        \/\/ Fill rest with minimal blobs.\n+        while (WHITE_BOX.allocateCodeBlob(1, type.id) != 0) {}\n+    }\n+\n+    public static void main(String[] args) {\n+        \/\/ Lock compilation to be able to better control code cache space\n+        WHITE_BOX.lockCompilation();\n+        fillCodeCacheSegment(BlobType.MethodNonProfiled);\n+        fillCodeCacheSegment(BlobType.MethodProfiled);\n+        \/\/ JIT compilers should be off, now.\n+        Asserts.assertNotEquals(WHITE_BOX.getCompilationActivityMode(), 1);\n+        System.out.println(\"Code cache segments for non-profiled and profiled nmethods are full.\");\n+        \/\/ Generate and use a MH itrinsic. Should not trigger one of the following:\n+        \/\/ - VirtualMachineError: Out of space in CodeCache for method handle intrinsic\n+        \/\/ - InternalError: java.lang.NoSuchMethodException: no such method:\n+        \/\/   java.lang.invoke.MethodHandle.linkToStatic(int,int,Object,MemberName)int\/invokeStatic\n+        TestInterface add2ints = (a, b, c) -> a + b;\n+        System.out.println(\"Result of lambda expression: \" + add2ints.testMethod(1, 2, null));\n+        \/\/ Let GC check the code cache.\n+        WHITE_BOX.unlockCompilation();\n+        WHITE_BOX.fullGC();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/codecache\/MHIntrinsicAllocFailureTest.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"}]}