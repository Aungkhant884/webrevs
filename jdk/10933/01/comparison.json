{"files":[{"patch":"@@ -477,1 +477,2 @@\n-    nm = new (native_nmethod_size, CompLevel_none)\n+\n+    nm = new (native_nmethod_size, method->is_method_handle_intrinsic())\n@@ -484,0 +485,15 @@\n+#ifdef ASSERT\n+    \/\/ Method handle instrinsics may get allocated in NonNMethod space.\n+    \/\/ GC may not look for Oops, there.\n+    if (method->is_method_handle_intrinsic()) {\n+      assert(oop_maps == nullptr, \"expectation\");\n+      assert(nm->oops_size() == 0, \"must not contain oop constants\");\n+\n+      if (relocInfo::mustIterateImmediateOopsInCode()) {\n+        RelocIterator iter(nm, nm->oops_reloc_begin());\n+        while (iter.next()) {\n+          assert(iter.type() != relocInfo::oop_type, \"must not contain oops in code\");\n+        }\n+      }\n+    }\n+#endif\n@@ -719,0 +735,8 @@\n+void* nmethod::operator new(size_t size, int nmethod_size, bool allow_NonNMethod_space) throw () {\n+  \/\/ Try MethodNonProfiled and MethodProfiled.\n+  void* return_value = CodeCache::allocate(nmethod_size, CodeBlobType::MethodNonProfiled);\n+  if (return_value != nullptr || !allow_NonNMethod_space) return return_value;\n+  \/\/ Try NonNMethod or give up.\n+  return CodeCache::allocate(nmethod_size, CodeBlobType::NonNMethod);\n+}\n+\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":25,"deletions":1,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -301,0 +301,2 @@\n+  \/\/ For method handle intrinsics: Try MethodNonProfiled, MethodProfiled and NonNMethod.\n+  void* operator new(size_t size, int nmethod_size, bool allow_NonNMethod_space) throw();\n","filename":"src\/hotspot\/share\/code\/nmethod.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}