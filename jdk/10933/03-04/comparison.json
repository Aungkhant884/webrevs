{"files":[{"patch":"@@ -454,0 +454,14 @@\n+class CheckForOopsClosure : public OopClosure {\n+  bool _found_oop = false;\n+ public:\n+  virtual void do_oop(oop* o) { _found_oop = true; }\n+  virtual void do_oop(narrowOop* o) { _found_oop = true; }\n+  bool found_oop() { return _found_oop; }\n+};\n+class CheckForMetadataClosure : public MetadataClosure {\n+  bool _found_metadata = false;\n+ public:\n+  virtual void do_metadata(Metadata* md) { _found_metadata = true; }\n+  bool found_metadata() { return _found_metadata; }\n+};\n+\n@@ -493,2 +507,6 @@\n-      assert(!nm->contains_oops(), \"no oops allowed\");\n-      assert(nm->metadata_size() == 0, \"metadata usage not expected\");\n+      CheckForOopsClosure cfo;\n+      nm->oops_do(&cfo);\n+      assert(!cfo.found_oop(), \"no oops allowed\");\n+      CheckForMetadataClosure cfm;\n+      nm->metadata_do(&cfm);\n+      assert(!cfm.found_metadata(), \"no metadata allowed\");\n@@ -1737,13 +1755,0 @@\n-bool nmethod::contains_oops() {\n-  if (oops_size() > 0) return true;\n-\n-  if (relocInfo::mustIterateImmediateOopsInCode()) {\n-    RelocIterator iter(this, oops_reloc_begin());\n-    while (iter.next()) {\n-      if (iter.type() == relocInfo::oop_type) return true;\n-    }\n-  }\n-\n-  return false;\n-}\n-\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":20,"deletions":15,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -551,2 +551,0 @@\n-  bool contains_oops();\n-\n","filename":"src\/hotspot\/share\/code\/nmethod.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}