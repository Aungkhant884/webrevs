{"files":[{"patch":"@@ -454,0 +454,36 @@\n+#ifdef ASSERT\n+class CheckForOopsClosure : public OopClosure {\n+  bool _found_oop = false;\n+ public:\n+  virtual void do_oop(oop* o) { _found_oop = true; }\n+  virtual void do_oop(narrowOop* o) { _found_oop = true; }\n+  bool found_oop() { return _found_oop; }\n+};\n+class CheckForMetadataClosure : public MetadataClosure {\n+  bool _found_metadata = false;\n+  Metadata* _ignore = nullptr;\n+ public:\n+  CheckForMetadataClosure(Metadata* ignore) : _ignore(ignore) {}\n+  virtual void do_metadata(Metadata* md) { if (md != _ignore) _found_metadata = true; }\n+  bool found_metadata() { return _found_metadata; }\n+};\n+\n+static void assert_no_oops_or_metadata(nmethod* nm) {\n+  if (nm == nullptr) return;\n+  assert(nm->oop_maps() == nullptr, \"expectation\");\n+\n+  CheckForOopsClosure cfo;\n+  nm->oops_do(&cfo);\n+  assert(!cfo.found_oop(), \"no oops allowed\");\n+\n+  \/\/ We allow an exception for the own Method, but require its class to be permanent.\n+  Method* own_method = nm->method();\n+  CheckForMetadataClosure cfm(\/* ignore reference to own Method *\/ own_method);\n+  nm->metadata_do(&cfm);\n+  assert(!cfm.found_metadata(), \"no metadata allowed\");\n+\n+  assert(own_method->method_holder()->class_loader_data()->is_permanent_class_loader_data(),\n+         \"Method's class needs to be permanent\");\n+}\n+#endif\n+\n@@ -477,1 +513,5 @@\n-    nm = new (native_nmethod_size, CompLevel_none)\n+\n+    \/\/ MH intrinsics are dispatch stubs which are compatible with NonNMethod space.\n+    \/\/ IsUnloadingBehaviour::is_unloading needs to handle them separately.\n+    bool allow_NonNMethod_space = method->can_be_allocated_in_NonNMethod_space();\n+    nm = new (native_nmethod_size, allow_NonNMethod_space)\n@@ -484,1 +524,2 @@\n-    NOT_PRODUCT(if (nm != NULL)  native_nmethod_stats.note_native_nmethod(nm));\n+    DEBUG_ONLY( if (allow_NonNMethod_space) assert_no_oops_or_metadata(nm); )\n+    NOT_PRODUCT(if (nm != NULL) native_nmethod_stats.note_native_nmethod(nm));\n@@ -719,0 +760,8 @@\n+void* nmethod::operator new(size_t size, int nmethod_size, bool allow_NonNMethod_space) throw () {\n+  \/\/ Try MethodNonProfiled and MethodProfiled.\n+  void* return_value = CodeCache::allocate(nmethod_size, CodeBlobType::MethodNonProfiled);\n+  if (return_value != nullptr || !allow_NonNMethod_space) return return_value;\n+  \/\/ Try NonNMethod or give up.\n+  return CodeCache::allocate(nmethod_size, CodeBlobType::NonNMethod);\n+}\n+\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":51,"deletions":2,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -301,0 +301,4 @@\n+  \/\/ For method handle intrinsics: Try MethodNonProfiled, MethodProfiled and NonNMethod.\n+  \/\/ Attention: Only allow NonNMethod space for special nmethods which don't need to be\n+  \/\/ findable by nmethod iterators! In particular, they must not contain oops!\n+  void* operator new(size_t size, int nmethod_size, bool allow_NonNMethod_space) throw();\n","filename":"src\/hotspot\/share\/code\/nmethod.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,0 +33,5 @@\n+  if (cm->method()->can_be_allocated_in_NonNMethod_space()) {\n+    \/\/ When the nmethod is in NonNMethod space, we may reach here without IsUnloadingBehaviour.\n+    \/\/ However, we only allow this for special methods which never get unloaded.\n+    return false;\n+  }\n","filename":"src\/hotspot\/share\/gc\/shared\/gcBehaviours.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -725,1 +725,2 @@\n-\n+  \/\/ Some special methods don't need to be findable by nmethod iterators and are permanent.\n+  bool can_be_allocated_in_NonNMethod_space() const { return is_method_handle_intrinsic(); }\n","filename":"src\/hotspot\/share\/oops\/method.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,85 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022 SAP SE. All rights reserved.ights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test MHIntrinsicAllocFailureTest\n+ * @bug 8295724\n+ * @requires vm.compMode == \"Xmixed\"\n+ * @requires vm.opt.TieredCompilation == null | vm.opt.TieredCompilation == true\n+ * @summary test allocation failure of method handle intrinsic in profiled\/non-profiled space\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ *\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -XX:CompileCommand=compileonly,null::*\n+ *                   -XX:ReservedCodeCacheSize=16m -XX:+SegmentedCodeCache\n+ *                   compiler.codecache.MHIntrinsicAllocFailureTest\n+ *\/\n+\n+package compiler.codecache;\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.whitebox.WhiteBox;\n+import jdk.test.whitebox.code.BlobType;\n+\n+import java.lang.management.MemoryPoolMXBean;\n+\n+public class MHIntrinsicAllocFailureTest {\n+    private static final WhiteBox WHITE_BOX = WhiteBox.getWhiteBox();\n+\n+    private interface TestInterface {\n+        int testMethod(int a, int b, Object c);\n+    }\n+\n+    private static void fillCodeCacheSegment(BlobType type) {\n+        \/\/ Fill with large blobs.\n+        MemoryPoolMXBean bean = type.getMemoryPool();\n+        int size = (int) (bean.getUsage().getMax() >> 7);\n+        while (WHITE_BOX.allocateCodeBlob(size, type.id) != 0) {}\n+        \/\/ Fill rest with minimal blobs.\n+        while (WHITE_BOX.allocateCodeBlob(1, type.id) != 0) {}\n+    }\n+\n+    public static void main(String[] args) {\n+        \/\/ Lock compilation to be able to better control code cache space\n+        WHITE_BOX.lockCompilation();\n+        fillCodeCacheSegment(BlobType.MethodNonProfiled);\n+        fillCodeCacheSegment(BlobType.MethodProfiled);\n+        \/\/ JIT compilers should be off, now.\n+        Asserts.assertNotEquals(WHITE_BOX.getCompilationActivityMode(), 1);\n+        System.out.println(\"Code cache segments for non-profiled and profiled nmethods are full.\");\n+        \/\/ Generate and use a MH itrinsic. Should not trigger one of the following:\n+        \/\/ - VirtualMachineError: Out of space in CodeCache for method handle intrinsic\n+        \/\/ - InternalError: java.lang.NoSuchMethodException: no such method:\n+        \/\/   java.lang.invoke.MethodHandle.linkToStatic(int,int,Object,MemberName)int\/invokeStatic\n+        TestInterface add2ints = (a, b, c) -> a + b;\n+        System.out.println(\"Result of lambda expression: \" + add2ints.testMethod(1, 2, null));\n+        \/\/ Let GC check the code cache.\n+        WHITE_BOX.unlockCompilation();\n+        WHITE_BOX.fullGC();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/codecache\/MHIntrinsicAllocFailureTest.java","additions":85,"deletions":0,"binary":false,"changes":85,"status":"added"}]}