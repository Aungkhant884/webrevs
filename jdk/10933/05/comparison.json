{"files":[{"patch":"@@ -454,0 +454,16 @@\n+class CheckForOopsClosure : public OopClosure {\n+  bool _found_oop = false;\n+ public:\n+  virtual void do_oop(oop* o) { _found_oop = true; }\n+  virtual void do_oop(narrowOop* o) { _found_oop = true; }\n+  bool found_oop() { return _found_oop; }\n+};\n+class CheckForMetadataClosure : public MetadataClosure {\n+  bool _found_metadata = false;\n+  Metadata* _ignore = nullptr;\n+ public:\n+  CheckForMetadataClosure(Metadata* ignore) : _ignore(ignore) {}\n+  virtual void do_metadata(Metadata* md) { if (md != _ignore) _found_metadata = true; }\n+  bool found_metadata() { return _found_metadata; }\n+};\n+\n@@ -477,1 +493,4 @@\n-    nm = new (native_nmethod_size, CompLevel_none)\n+\n+    \/\/ MH intrinsics are dispatch stubs which are compatible with NonNMethod space.\n+    bool allow_NonNMethod_space = method->is_method_handle_intrinsic();\n+    nm = new (native_nmethod_size, allow_NonNMethod_space)\n@@ -484,0 +503,14 @@\n+#ifdef ASSERT\n+    \/\/ Allocating in NonNMethod space is only for special nmethods which don't\n+    \/\/ need to be findable by nmethod iterators.\n+    \/\/ GC may not look for Oops, there.\n+    if (allow_NonNMethod_space) {\n+      assert(oop_maps == nullptr, \"expectation\");\n+      CheckForOopsClosure cfo;\n+      nm->oops_do(&cfo);\n+      assert(!cfo.found_oop(), \"no oops allowed\");\n+      CheckForMetadataClosure cfm(\/* ignore reference to own Method *\/ nm->method());\n+      nm->metadata_do(&cfm);\n+      assert(!cfm.found_metadata(), \"no metadata allowed\");\n+    }\n+#endif\n@@ -719,0 +752,8 @@\n+void* nmethod::operator new(size_t size, int nmethod_size, bool allow_NonNMethod_space) throw () {\n+  \/\/ Try MethodNonProfiled and MethodProfiled.\n+  void* return_value = CodeCache::allocate(nmethod_size, CodeBlobType::MethodNonProfiled);\n+  if (return_value != nullptr || !allow_NonNMethod_space) return return_value;\n+  \/\/ Try NonNMethod or give up.\n+  return CodeCache::allocate(nmethod_size, CodeBlobType::NonNMethod);\n+}\n+\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":42,"deletions":1,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -301,0 +301,4 @@\n+  \/\/ For method handle intrinsics: Try MethodNonProfiled, MethodProfiled and NonNMethod.\n+  \/\/ Attention: Only allow NonNMethod space for special nmethods which don't need to be\n+  \/\/ findable by nmethod iterators! In particular, they must not contain oops!\n+  void* operator new(size_t size, int nmethod_size, bool allow_NonNMethod_space) throw();\n","filename":"src\/hotspot\/share\/code\/nmethod.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}