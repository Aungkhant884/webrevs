{"files":[{"patch":"@@ -143,0 +143,1 @@\n+volatile jint CompileBroker::_native_compilation_id = 0;\n@@ -1591,1 +1592,1 @@\n-    return Atomic::add(&_compilation_id, 1);\n+    return Atomic::add(CICountNative ? &_native_compilation_id : &_compilation_id, 1);\n@@ -2477,0 +2478,2 @@\n+  } else if (CICountNative && method->is_native()) {\n+    last_compile_type = native_compile;\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -177,0 +177,1 @@\n+  static volatile jint _native_compilation_id;\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -75,0 +75,4 @@\n+  develop(bool, CICountNative, false,                                       \\\n+          \"use a separate counter when assigning ids to native \"            \\\n+          \"compilations\")                                                   \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/compiler\/compiler_globals.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -71,2 +71,2 @@\n-        \"-XX:CICrashAt=1\", \"-XX:+DumpReplayDataOnError\",\n-        \"-XX:+PreferInterpreterNativeStubs\", REPLAY_FILE_OPTION};\n+        \"-XX:+CICountNative\", \"-XX:CICrashAt=1\", \"-XX:+DumpReplayDataOnError\",\n+        REPLAY_FILE_OPTION};\n@@ -79,0 +79,4 @@\n+    static interface Lambda {\n+        int value();\n+    }\n+\n@@ -81,1 +85,3 @@\n-            for (int i = 0; i < 20_000; i++) {\n+            Lambda start = () -> 0;\n+\n+            for (int i = start.value(); i < 20_000; i++) {\n","filename":"test\/hotspot\/jtreg\/compiler\/ciReplay\/CiReplayBase.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"}]}