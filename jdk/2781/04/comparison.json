{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -309,4 +309,5 @@\n-            String value = params.getOrDefault(paramName, \"\").toString();\n-        return List.of(value.split(File.pathSeparator)).stream()\n-                .map(Path::of)\n-                .collect(Collectors.toUnmodifiableList());\n+            String value = (String) params.get(paramName);\n+            return (value == null) ? List.of() :\n+                    List.of(value.split(File.pathSeparator)).stream()\n+                    .map(Path::of)\n+                    .collect(Collectors.toUnmodifiableList());\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/LauncherData.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,136 @@\n+\/*\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jpackage.tests;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.Collection;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Stream;\n+import java.nio.file.Path;\n+import jdk.jpackage.test.Annotations.Parameters;\n+import jdk.jpackage.test.Annotations.Test;\n+import jdk.jpackage.test.Executor;\n+import jdk.jpackage.test.JPackageCommand;\n+import jdk.jpackage.test.JavaAppDesc;\n+import jdk.jpackage.test.JavaTool;\n+import jdk.jpackage.test.TKit;\n+import jdk.jpackage.test.HelloApp;\n+\n+\n+\/*\n+ * @test\n+ * @summary test '--runtime-image' option of jpackage\n+ * @library ..\/..\/..\/..\/helpers\n+ * @build jdk.jpackage.test.*\n+ * @modules jdk.jpackage\/jdk.jpackage.internal\n+ * @compile NoMPathRuntimeTest.java\n+ * @run main\/othervm\/timeout=360 -Xmx512m jdk.jpackage.test.Main\n+ *  --jpt-run=jdk.jpackage.tests.NoMPathRuntimeTest\n+ *\/\n+\n+public final class NoMPathRuntimeTest {\n+\n+    public NoMPathRuntimeTest(String jlinkOutputSubdir, String runtimeSubdir) {\n+        this.jlinkOutputSubdir = Path.of(jlinkOutputSubdir);\n+        this.runtimeSubdir = Path.of(runtimeSubdir);\n+    }\n+\n+    @Test\n+    public void test() throws IOException {\n+        JavaAppDesc appDesc = JavaAppDesc.parse(\"com.foo\/com.foo.main.Aloha\");\n+\n+        JPackageCommand cmd = JPackageCommand.helloAppImage(appDesc);\n+\n+        \/\/ Build module jar.\n+        cmd.executePrerequisiteActions();\n+\n+        final Path workDir = TKit.createTempDirectory(\"runtime\").resolve(\"data\");\n+        final Path jlinkOutputDir = workDir.resolve(jlinkOutputSubdir);\n+        Files.createDirectories(jlinkOutputDir.getParent());\n+\n+        \/\/ List of modules required for test app.\n+        final var modules = new String[] {\n+            \"java.base\",\n+            \"java.desktop\"\n+        };\n+\n+        Executor jlink = new Executor()\n+        .setToolProvider(JavaTool.JLINK)\n+        .dumpOutput()\n+        .addArguments(\n+                \"--add-modules\", String.join(\",\", modules),\n+                \"--output\", jlinkOutputDir.toString(),\n+                \"--strip-debug\",\n+                \"--no-header-files\",\n+                \"--no-man-pages\");\n+\n+        jlink.addArguments(\"--add-modules\", appDesc.moduleName(),\n+               \"--module-path\", Path.of(cmd.getArgumentValue(\"--module-path\"))\n+               .resolve(\"hello.jar\").toString());\n+\n+        jlink.execute();\n+\n+        \/\/ non-modular jar in current dir caused error whe no module-path given\n+        cmd.removeArgumentWithValue(\"--module-path\");\n+\n+        cmd.setArgumentValue(\"--runtime-image\", workDir.resolve(runtimeSubdir));\n+        Path junkJar = null;\n+        try {\n+            \/\/ create a non-modular jar in the current directory\n+            junkJar = HelloApp.createBundle(\n+                    JavaAppDesc.parse(\"junk.jar:Hello\"), Path.of(\".\"));\n+\n+            cmd.executeAndAssertHelloAppImageCreated();\n+        } finally {\n+            if (junkJar != null) {\n+                TKit.deleteIfExists(junkJar);\n+            }\n+        }\n+            \n+    }\n+\n+    @Parameters\n+    public static Collection data() {\n+\n+        final List<String[]> paths = new ArrayList<>();\n+        paths.add(new String[] { \"\", \"\" });\n+        if (TKit.isOSX()) {\n+            \/\/ On OSX jpackage should accept both runtime root and runtime home\n+            \/\/ directories.\n+            paths.add(new String[] { \"Contents\/Home\", \"\" });\n+        }\n+\n+        List<Object[]> data = new ArrayList<>();\n+        for (var pathCfg : paths) {\n+            data.add(new Object[] { pathCfg[0], pathCfg[1] });\n+        }\n+\n+        return data;\n+    }\n+\n+    private final Path jlinkOutputSubdir;\n+    private final Path runtimeSubdir;\n+}\n","filename":"test\/jdk\/tools\/jpackage\/share\/jdk\/jpackage\/tests\/NoMPathRuntimeTest.java","additions":136,"deletions":0,"binary":false,"changes":136,"status":"added"}]}