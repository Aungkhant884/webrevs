{"files":[{"patch":"@@ -2690,1 +2690,1 @@\n-    assert(!isSHR || (isSHR && (shift != 0)), \"Zero right shift\");      \\\n+    guarantee(!isSHR || (isSHR && (shift != 0)), \"impossible encoding\");\\\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -530,26 +530,0 @@\n-  \/\/ AdvSIMD shift by immediate.\n-  \/\/ These are \"user friendly\" variants which allow a shift count of 0.\n-#define WRAP(INSN)                                                                \\\n-  void INSN(FloatRegister Vd, SIMD_Arrangement T, FloatRegister Vn, int shift) {  \\\n-    if (shift == 0) {                                                             \\\n-      SIMD_Arrangement arrange = (T & 1) == 0 ? T8B : T16B;                       \\\n-      Assembler::orr(Vd, arrange, Vn, Vn);                                        \\\n-    } else {                                                                      \\\n-      Assembler::INSN(Vd, T, Vn, shift);                                          \\\n-    }                                                                             \\\n-  }                                                                               \\\n-\n-  WRAP(shl) WRAP(sshr) WRAP(ushr)\n-#undef WRAP\n-\n-#define WRAP(INSN)                                                                \\\n-  void INSN(FloatRegister Vd, SIMD_Arrangement T, FloatRegister Vn, int shift) {  \\\n-    if (shift == 0) {                                                             \\\n-      Assembler::addv(Vd, T, Vd, Vn);                                             \\\n-    } else {                                                                      \\\n-      Assembler::INSN(Vd, T, Vn, shift);                                          \\\n-    }                                                                             \\\n-  }                                                                               \\\n-\n-  WRAP(usra) WRAP(ssra)\n-#undef WRAP\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":0,"deletions":26,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -1281,0 +1281,9 @@\n+Node* ShiftVNode::Identity(PhaseGVN* phase) {\n+  Node* in2 = in(2);\n+  \/\/ Shift by ZERO does nothing\n+  if (is_vshift_cnt(in2) && phase->find_int_type(in2->in(1)) == TypeInt::ZERO) {\n+    return in(1);\n+  }\n+  return this;\n+}\n+\n@@ -1285,0 +1294,1 @@\n+\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -517,0 +517,10 @@\n+\/\/------------------------------ShiftVNode-----------------------------------\n+\/\/ Class ShiftV functionality.  This covers the common behaviors for all kinds\n+\/\/ of vector shifts.\n+class ShiftVNode : public VectorNode {\n+ public:\n+  ShiftVNode(Node* in1, Node* in2, const TypeVect* vt) : VectorNode(in1,in2,vt) {}\n+  virtual Node* Identity(PhaseGVN* phase);\n+  virtual int Opcode() const = 0;\n+};\n+\n@@ -519,1 +529,1 @@\n-class LShiftVBNode : public VectorNode {\n+class LShiftVBNode : public ShiftVNode {\n@@ -521,1 +531,1 @@\n-  LShiftVBNode(Node* in1, Node* in2, const TypeVect* vt) : VectorNode(in1,in2,vt) {}\n+  LShiftVBNode(Node* in1, Node* in2, const TypeVect* vt) : ShiftVNode(in1,in2,vt) {}\n@@ -527,1 +537,1 @@\n-class LShiftVSNode : public VectorNode {\n+class LShiftVSNode : public ShiftVNode {\n@@ -529,1 +539,1 @@\n-  LShiftVSNode(Node* in1, Node* in2, const TypeVect* vt) : VectorNode(in1,in2,vt) {}\n+  LShiftVSNode(Node* in1, Node* in2, const TypeVect* vt) : ShiftVNode(in1,in2,vt) {}\n@@ -535,1 +545,1 @@\n-class LShiftVINode : public VectorNode {\n+class LShiftVINode : public ShiftVNode {\n@@ -537,1 +547,1 @@\n-  LShiftVINode(Node* in1, Node* in2, const TypeVect* vt) : VectorNode(in1,in2,vt) {}\n+  LShiftVINode(Node* in1, Node* in2, const TypeVect* vt) : ShiftVNode(in1,in2,vt) {}\n@@ -543,1 +553,1 @@\n-class LShiftVLNode : public VectorNode {\n+class LShiftVLNode : public ShiftVNode {\n@@ -545,1 +555,1 @@\n-  LShiftVLNode(Node* in1, Node* in2, const TypeVect* vt) : VectorNode(in1,in2,vt) {}\n+  LShiftVLNode(Node* in1, Node* in2, const TypeVect* vt) : ShiftVNode(in1,in2,vt) {}\n@@ -551,1 +561,1 @@\n-class RShiftVBNode : public VectorNode {\n+class RShiftVBNode : public ShiftVNode {\n@@ -553,1 +563,1 @@\n-  RShiftVBNode(Node* in1, Node* in2, const TypeVect* vt) : VectorNode(in1,in2,vt) {}\n+  RShiftVBNode(Node* in1, Node* in2, const TypeVect* vt) : ShiftVNode(in1,in2,vt) {}\n@@ -559,1 +569,1 @@\n-class RShiftVSNode : public VectorNode {\n+class RShiftVSNode : public ShiftVNode {\n@@ -561,1 +571,1 @@\n-  RShiftVSNode(Node* in1, Node* in2, const TypeVect* vt) : VectorNode(in1,in2,vt) {}\n+  RShiftVSNode(Node* in1, Node* in2, const TypeVect* vt) : ShiftVNode(in1,in2,vt) {}\n@@ -567,1 +577,1 @@\n-class RShiftVINode : public VectorNode {\n+class RShiftVINode : public ShiftVNode {\n@@ -569,1 +579,1 @@\n-  RShiftVINode(Node* in1, Node* in2, const TypeVect* vt) : VectorNode(in1,in2,vt) {}\n+  RShiftVINode(Node* in1, Node* in2, const TypeVect* vt) : ShiftVNode(in1,in2,vt) {}\n@@ -575,1 +585,1 @@\n-class RShiftVLNode : public VectorNode {\n+class RShiftVLNode : public ShiftVNode {\n@@ -577,1 +587,1 @@\n-  RShiftVLNode(Node* in1, Node* in2, const TypeVect* vt) : VectorNode(in1,in2,vt) {}\n+  RShiftVLNode(Node* in1, Node* in2, const TypeVect* vt) : ShiftVNode(in1,in2,vt) {}\n@@ -583,1 +593,1 @@\n-class URShiftVBNode : public VectorNode {\n+class URShiftVBNode : public ShiftVNode {\n@@ -585,1 +595,1 @@\n-  URShiftVBNode(Node* in1, Node* in2, const TypeVect* vt) : VectorNode(in1,in2,vt) {}\n+  URShiftVBNode(Node* in1, Node* in2, const TypeVect* vt) : ShiftVNode(in1,in2,vt) {}\n@@ -591,1 +601,1 @@\n-class URShiftVSNode : public VectorNode {\n+class URShiftVSNode : public ShiftVNode {\n@@ -593,1 +603,1 @@\n-  URShiftVSNode(Node* in1, Node* in2, const TypeVect* vt) : VectorNode(in1,in2,vt) {}\n+  URShiftVSNode(Node* in1, Node* in2, const TypeVect* vt) : ShiftVNode(in1,in2,vt) {}\n@@ -599,1 +609,1 @@\n-class URShiftVINode : public VectorNode {\n+class URShiftVINode : public ShiftVNode {\n@@ -601,1 +611,1 @@\n-  URShiftVINode(Node* in1, Node* in2, const TypeVect* vt) : VectorNode(in1,in2,vt) {}\n+  URShiftVINode(Node* in1, Node* in2, const TypeVect* vt) : ShiftVNode(in1,in2,vt) {}\n@@ -607,1 +617,1 @@\n-class URShiftVLNode : public VectorNode {\n+class URShiftVLNode : public ShiftVNode {\n@@ -609,1 +619,1 @@\n-  URShiftVLNode(Node* in1, Node* in2, const TypeVect* vt) : VectorNode(in1,in2,vt) {}\n+  URShiftVLNode(Node* in1, Node* in2, const TypeVect* vt) : ShiftVNode(in1,in2,vt) {}\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":35,"deletions":25,"binary":false,"changes":60,"status":"modified"}]}