{"files":[{"patch":"@@ -0,0 +1,165 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @key headful\n+ * @bug 8258788\n+ * @summary [macosx] full window content option rendering test\n+ * @author Alexey Ushakov\n+ * @run main FullWindowContentRenderTest\n+ * @requires (os.family == \"mac\")\n+ *\/\n+\n+import java.awt.*;\n+import java.awt.image.BufferedImage;\n+import java.lang.reflect.InvocationTargetException;\n+import javax.swing.*;\n+\n+public class FullWindowContentRenderTest\n+{\n+    private static final int TD = 10;\n+    static FullWindowContentRenderTest theTest;\n+    private Robot robot;\n+    private JFrame frame;\n+    private JRootPane rootPane;\n+\n+    private int DELAY = 1000;\n+\n+    public FullWindowContentRenderTest() {\n+        try {\n+            robot = new Robot();\n+        } catch (AWTException ex) {\n+            throw new RuntimeException(ex);\n+        }\n+    }\n+\n+    public void performTest() {\n+\n+        runSwing(() -> {\n+            frame = new JFrame(\"Test\");\n+            frame.setBounds(100, 100, 100, 150);\n+            rootPane = frame.getRootPane();\n+            JComponent contentPane = (JComponent) frame.getContentPane();\n+            JPanel comp = new JPanel() {\n+                @Override\n+                protected void paintComponent(Graphics g) {\n+                    super.paintComponent(g);\n+                    g.setColor(Color.BLUE);\n+                    g.fillRect(35, 30, 30, 30);\n+                    g.setColor(Color.GREEN);\n+                    g.fillRect(35, 60, 30, 30);\n+                }\n+            };\n+            contentPane.add(comp);\n+            comp.setBackground(Color.RED);\n+            frame.setVisible(true);\n+        });\n+\n+        robot.delay(DELAY);\n+        final int topInset = frame.getInsets().top;\n+        final int px = 50, py = topInset + 40;\n+\n+        Color c = getTestPixel(px, py);\n+        if (!validateColor(c, Color.BLUE)) {\n+            throw new RuntimeException(\"Test failed. Incorrect color \" + c +\n+                                       \"at (\" + px + \",\" + py + \")\");\n+        }\n+\n+        runSwing(() -> rootPane.putClientProperty(\"apple.awt.fullWindowContent\", true));\n+\n+        robot.delay(DELAY);\n+\n+        c = getTestPixel(50, topInset + 40);\n+        if (!validateColor(c, Color.GREEN)) {\n+            throw new RuntimeException(\"Test failed. Incorrect color \" + c +\n+                    \" at (\" + px + \",\" + py + \")\");\n+        }\n+\n+        runSwing(() -> rootPane.putClientProperty(\"apple.awt.fullWindowContent\", false));\n+\n+        robot.delay(DELAY);\n+\n+        c = getTestPixel(50, topInset + 40);\n+        if (!validateColor(c, Color.BLUE)) {\n+            throw new RuntimeException(\"Test failed. Incorrect color \" + c +\n+                    \"at (\" + px + \",\" + py + \")\");\n+        }\n+\n+        runSwing(() -> frame.dispose());\n+\n+        frame = null;\n+        rootPane = null;\n+    }\n+\n+    private Color getTestPixel(int x, int y) {\n+        Rectangle bounds = frame.getBounds();\n+        BufferedImage screenImage = robot.createScreenCapture(bounds);\n+        int rgb = screenImage.getRGB(x, y);\n+        int red = (rgb >> 16) & 0xFF;\n+        int green = (rgb >> 8) & 0xFF;\n+        int blue = rgb & 0xFF;\n+        Color c = new Color(red, green, blue);\n+        return c;\n+    }\n+\n+    private boolean validateColor(Color c, Color expected) {\n+        return Math.abs(c.getRed() - expected.getRed()) <= TD &&\n+            Math.abs(c.getGreen() - expected.getGreen()) <= TD &&\n+            Math.abs(c.getBlue() - expected.getBlue()) <= TD;\n+    }\n+\n+    public void dispose() {\n+        if (frame != null) {\n+            frame.dispose();\n+            frame = null;\n+        }\n+    }\n+\n+    private static void runSwing(Runnable r) {\n+        try {\n+            SwingUtilities.invokeAndWait(r);\n+        } catch (InterruptedException e) {\n+        } catch (InvocationTargetException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        if (!System.getProperty(\"os.name\").contains(\"OS X\")) {\n+            System.out.println(\"This test is for MacOS only. Automatically passed on other platforms.\");\n+            return;\n+        }\n+\n+        try {\n+            runSwing(() -> theTest = new FullWindowContentRenderTest());\n+            theTest.performTest();\n+        } finally {\n+            if (theTest != null) {\n+                runSwing(() -> theTest.dispose());\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Window\/FullWindowContentTest\/FullWindowContentRenderTest.java","additions":165,"deletions":0,"binary":false,"changes":165,"status":"added"}]}