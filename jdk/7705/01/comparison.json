{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1356,3 +1356,1 @@\n-        SocketException se = new SocketException(e.getMessage());\n-        se.initCause(e);\n-        return se;\n+        return new SocketException(e.getMessage(), e);\n","filename":"src\/java.base\/share\/classes\/java\/net\/DatagramSocket.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,0 +55,23 @@\n+\n+    \/**\n+     * Constructs a new {@code SocketException} with the\n+     * specified detail message and cause.\n+     *\n+     * @param msg the detail message.\n+     * @param cause the cause\n+     * @since 19\n+     *\/\n+    public SocketException(String msg, Throwable cause) {\n+        super(msg, cause);\n+    }\n+\n+    \/**\n+     * Constructs a new {@code SocketException} with the\n+     * specified cause.\n+     *\n+     * @param cause the cause\n+     * @since 19\n+     *\/\n+    public SocketException(Throwable cause) {\n+        super(cause);\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/net\/SocketException.java","additions":24,"deletions":1,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -123,6 +123,2 @@\n-        UnsupportedOperationException uop = new\n-                UnsupportedOperationException();\n-        SocketException se =  new SocketException(\n-                \"Unconnected sockets not implemented\");\n-        se.initCause(uop);\n-        throw se;\n+        throw new SocketException(\"Unconnected sockets not implemented\",\n+                                  new UnsupportedOperationException());\n","filename":"src\/java.base\/share\/classes\/javax\/net\/SocketFactory.java","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -176,2 +176,1 @@\n-        throw (SocketException)\n-            new SocketException(reason.toString()).initCause(reason);\n+        throw new SocketException(reason.toString(), reason);\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ssl\/SSLServerSocketFactory.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -266,2 +266,1 @@\n-        throw (SocketException)\n-            new SocketException(reason.toString()).initCause(reason);\n+        throw new SocketException(reason.toString(), reason);\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ssl\/SSLSocketFactory.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -222,3 +222,1 @@\n-                var exc = new SocketException(\"Socket closed\");\n-                exc.initCause(e);\n-                throw exc;\n+                throw new SocketException(\"Socket closed\", e);\n@@ -252,3 +250,1 @@\n-            var exc = new SocketException(\"Socket closed\");\n-            exc.initCause(e);\n-            throw exc;\n+            throw new SocketException(\"Socket closed\", e);\n@@ -484,1 +480,1 @@\n-            throw (SocketException) new SocketException(\"joinGroup failed\").initCause(iae);\n+            throw new SocketException(\"joinGroup failed\", iae);\n@@ -496,1 +492,1 @@\n-            throw (SocketException) new SocketException(\"leaveGroup failed\").initCause(iae);\n+            throw new SocketException(\"leaveGroup failed\", iae);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/DatagramSocketAdaptor.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8282686\n+ * @summary Verify cause handling of SocketException\n+ *\/\n+import java.net.SocketException;\n+\n+public class TestSocketExceptionCtor {\n+    public static void main(String... args) {\n+        String reason = \"reason\";\n+        Throwable cause = new RuntimeException();\n+\n+        testException(new SocketException(cause), cause);\n+    }\n+\n+    private static void testException(SocketException se,\n+                                      Throwable expectedCause) {\n+        var cause = se.getCause();\n+        if (cause != expectedCause) {\n+            throw new RuntimeException(\"Unexpected cause\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/SocketException\/TestSocketExceptionCtor.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"}]}