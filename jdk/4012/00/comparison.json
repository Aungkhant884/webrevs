{"files":[{"patch":"@@ -1356,1 +1356,1 @@\n-                        tree.sym.owner.kind == MTH &&\n+                        (tree.sym.owner.kind == MTH || tree.sym.owner.kind == VAR) &&\n@@ -1569,1 +1569,1 @@\n-                if (tree.sym.owner.kind == MTH) {\n+                if (tree.sym.owner.kind == MTH || tree.sym.owner.kind == VAR) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/LambdaToMethod.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,123 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8267041\n+ * @summary Verify local variables are captured properly for switch expressions used in field initializers\n+ * @compile ExpressionSwitchLambdaCapture.java\n+ * @run main ExpressionSwitchLambdaCapture\n+ *\/\n+public class ExpressionSwitchLambdaCapture {\n+\n+    private static final Func<Object> func1 = switch (0) {\n+        case 0 -> {\n+            Object o = null;\n+            yield () -> o;\n+        }\n+        case 1 -> {\n+            Object o = null;\n+            yield new Func<>() {\n+                @Override\n+                public Object func() {\n+                    return o;\n+                }\n+            };\n+        }\n+        default -> null;\n+    };\n+    private final Func<Object> func2 = switch (0) {\n+        case 0 -> {\n+            Object o = null;\n+            yield () -> o;\n+        }\n+        case 1 -> {\n+            Object o = null;\n+            yield new Func<>() {\n+                @Override\n+                public Object func() {\n+                    return o;\n+                }\n+            };\n+        }\n+        default -> null;\n+    };\n+    private static final Func<Func<Object>> func3 = () -> switch (0) {\n+        case 0 -> {\n+            Object o = null;\n+            yield () -> o;\n+        }\n+        case 1 -> {\n+            Object o = null;\n+            yield new Func<>() {\n+                @Override\n+                public Object func() {\n+                    return o;\n+                }\n+            };\n+        }\n+        default -> null;\n+    };\n+    private final Func<Func<Object>> func4 = () -> switch (0) {\n+        case 0 -> {\n+            Object o = null;\n+            yield () -> o;\n+        }\n+        case 1 -> {\n+            Object o = null;\n+            yield new Func<>() {\n+                @Override\n+                public Object func() {\n+                    return o;\n+                }\n+            };\n+        }\n+        default -> null;\n+    };\n+\n+    private final Func<Object> func5 = switch (0) {\n+        case 0 -> {\n+            Object o = null;\n+            Func f = () -> o;\n+            yield f;\n+        }\n+        case 1 -> {\n+            Object o = null;\n+            yield new Func<>() {\n+                @Override\n+                public Object func() {\n+                    return o;\n+                }\n+            };\n+        }\n+        default -> null;\n+    };\n+\n+    public static void main(String... args) {\n+        new ExpressionSwitchLambdaCapture();\n+    }\n+}\n+\n+interface Func<T> {\n+    T func();\n+}\n","filename":"test\/langtools\/tools\/javac\/switchexpr\/ExpressionSwitchLambdaCapture.java","additions":123,"deletions":0,"binary":false,"changes":123,"status":"added"}]}