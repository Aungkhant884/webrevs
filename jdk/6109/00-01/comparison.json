{"files":[{"patch":"@@ -1942,0 +1942,4 @@\n+  bool aligned = (displacement % basic_type_elemsize) == 0;\n+  if (!aligned) {\n+    JVMCI_THROW_MSG_NULL(IllegalArgumentException, \"read is unaligned\");\n+  }\n@@ -1980,1 +1984,1 @@\n-  \/\/ Treat all aligned reads as volatile for simplicity as this function can be used\n+  \/\/ Treat all reads as volatile for simplicity as this function can be used\n@@ -1984,2 +1988,0 @@\n-  bool aligned = (displacement % basic_type_elemsize) == 0;\n-\n@@ -1987,4 +1989,4 @@\n-    case T_BOOLEAN: value = aligned ? obj->bool_field_acquire(displacement)   : obj->bool_field(displacement);  break;\n-    case T_BYTE:    value = aligned ? obj->byte_field_acquire(displacement)   : obj->byte_field(displacement);  break;\n-    case T_SHORT:   value = aligned ? obj->short_field_acquire(displacement)  : obj->short_field(displacement); break;\n-    case T_CHAR:    value = aligned ? obj->char_field_acquire(displacement)   : obj->char_field(displacement);  break;\n+    case T_BOOLEAN: value = obj->bool_field_acquire(displacement);  break;\n+    case T_BYTE:    value = obj->byte_field_acquire(displacement);  break;\n+    case T_SHORT:   value = obj->short_field_acquire(displacement); break;\n+    case T_CHAR:    value = obj->char_field_acquire(displacement);  break;\n@@ -1992,1 +1994,1 @@\n-    case T_INT:     value = aligned ? obj->int_field_acquire(displacement)    : obj->int_field(displacement);   break;\n+    case T_INT:     value = obj->int_field_acquire(displacement);   break;\n@@ -1994,1 +1996,1 @@\n-    case T_LONG:    value = aligned ? obj->long_field_acquire(displacement)   : obj->long_field(displacement);  break;\n+    case T_LONG:    value = obj->long_field_acquire(displacement);  break;\n@@ -2004,1 +2006,1 @@\n-      oop value = aligned ? obj->obj_field_acquire(displacement) : obj->obj_field(displacement);\n+      oop value = obj->obj_field_acquire(displacement);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -786,1 +786,1 @@\n-     * object is exptected to be a subtype of {@code expectedType} and extra sanity checking is\n+     * object is expected to be a subtype of {@code expectedType} and extra sanity checking is\n@@ -788,0 +788,2 @@\n+     *\n+     * @throws IllegalArgumentException if any of the sanity checks fail\n@@ -793,1 +795,1 @@\n-     * object is exptected to be a subtype of {@code expectedType} and extra sanity checking is\n+     * object is expected to be a subtype of {@code expectedType} and extra sanity checking is\n@@ -795,0 +797,2 @@\n+     *\n+     * @throws IllegalArgumentException if any of the sanity checks fail\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot\/src\/jdk\/vm\/ci\/hotspot\/CompilerToVM.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-     *             kind or {@code bits} is not 8, 16, 32 or 64\n+     *             kind or {@code bits} is not 8, 16, 32 or 64 or the read is unaligned\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.meta\/src\/jdk\/vm\/ci\/meta\/MemoryAccessProvider.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -80,0 +80,7 @@\n+        }\n+        return result.toArray(new Object[result.size()][]);\n+    }\n+    @DataProvider(name = \"unalignedPrimitive\")\n+    public static Object[][] getUnalingedPrimitiveJavaKinds() {\n+        List<Object[]> result = new ArrayList<>();\n+        for (KindData k : PRIMITIVE_KIND_DATA) {\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.hotspot.test\/src\/jdk\/vm\/ci\/hotspot\/test\/MemoryAccessProviderData.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -67,0 +67,5 @@\n+    @Test(dataProvider = \"unalignedPrimitive\", dataProviderClass = MemoryAccessProviderData.class, expectedExceptions = {IllegalArgumentException.class})\n+    public void testReadUnalignedConstantConstant(JavaKind kind, Constant base, Long offset, Object expected, int bitsCount) {\n+        PROVIDER.readPrimitiveConstant(kind, null, offset, bitsCount);\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.hotspot.test\/src\/jdk\/vm\/ci\/hotspot\/test\/MemoryAccessProviderTest.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}