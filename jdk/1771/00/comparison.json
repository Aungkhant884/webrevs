{"files":[{"patch":"@@ -135,1 +135,1 @@\n-        } else { \/\/ language, extlang, grandfathered, and redundant\n+        } else { \/\/ language, extlang, legacy, and redundant\n","filename":"make\/jdk\/src\/classes\/build\/tools\/generatelsrequivmaps\/EquivMapsGenerator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,1 +67,1 @@\n- * of the scope of the filter. If the purpose of the filter is to black-list classes\n+ * of the scope of the filter. If the purpose of the filter is to reject classes\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectInputFilter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1648,1 +1648,2 @@\n-     * so supports grandfathered (regular and irregular) as well as\n+     * so supports legacy (regular and irregular, referred to as\n+     * {@code Type: grandfathered} in BCP47) as well as\n@@ -1651,1 +1652,1 @@\n-     * and grandfathered tags are converted to their canonical replacements\n+     * and legacy tags are converted to their canonical replacements\n@@ -1654,1 +1655,1 @@\n-     * <p>Grandfathered tags with canonical replacements are as follows:\n+     * <p>Legacy tags with canonical replacements are as follows:\n@@ -1657,1 +1658,1 @@\n-     * <caption style=\"display:none\">Grandfathered tags with canonical replacements<\/caption>\n+     * <caption style=\"display:none\">Legacy tags with canonical replacements<\/caption>\n@@ -1659,1 +1660,1 @@\n-     * <tr><th scope=\"col\" style=\"padding: 0 2px\">grandfathered tag<\/th><th scope=\"col\" style=\"padding: 0 2px\">modern replacement<\/th><\/tr>\n+     * <tr><th scope=\"col\" style=\"padding: 0 2px\">legacy tag<\/th><th scope=\"col\" style=\"padding: 0 2px\">modern replacement<\/th><\/tr>\n@@ -1685,1 +1686,1 @@\n-     * <p>Grandfathered tags with no modern replacement will be\n+     * <p>Legacy tags with no modern replacement will be\n@@ -1689,1 +1690,1 @@\n-     * <caption style=\"display:none\">Grandfathered tags with no modern replacement<\/caption>\n+     * <caption style=\"display:none\">Legacy tags with no modern replacement<\/caption>\n@@ -1691,1 +1692,1 @@\n-     * <tr><th scope=\"col\" style=\"padding: 0 2px\">grandfathered tag<\/th><th scope=\"col\" style=\"padding: 0 2px\">converts to<\/th><\/tr>\n+     * <tr><th scope=\"col\" style=\"padding: 0 2px\">legacy tag<\/th><th scope=\"col\" style=\"padding: 0 2px\">converts to<\/th><\/tr>\n@@ -1703,1 +1704,1 @@\n-     * <p>For a list of all grandfathered tags, see the\n+     * <p>For a list of all legacy tags, see the\n@@ -2589,1 +2590,1 @@\n-         * #clear}.  Grandfathered tags (see {@link\n+         * #clear}.  Legacy tags (see {@link\n@@ -2841,1 +2842,1 @@\n-         * when constructing a Locale. (Grandfathered tags are handled in\n+         * when constructing a Locale. (Legacy tags are handled in\n","filename":"src\/java.base\/share\/classes\/java\/util\/Locale.java","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -850,1 +850,1 @@\n-    \/\/ A bit of black magic. We try to find out the nature of the logging\n+    \/\/ A bit of magic. We try to find out the nature of the logging\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/logger\/BootstrapLogger.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,1 +63,1 @@\n-    \/\/ Map contains grandfathered tags and its preferred mappings from\n+    \/\/ Map contains legacy language tags and its preferred mappings from\n@@ -66,1 +66,1 @@\n-    private static final Map<String, String[]> GRANDFATHERED = new HashMap<>();\n+    private static final Map<String, String[]> LEGACY = new HashMap<>();\n@@ -130,1 +130,1 @@\n-            GRANDFATHERED.put(LocaleUtils.toLowerString(e[0]), e);\n+            LEGACY.put(LocaleUtils.toLowerString(e[0]), e);\n@@ -191,2 +191,2 @@\n-        \/\/ Check if the tag is grandfathered\n-        String[] gfmap = GRANDFATHERED.get(LocaleUtils.toLowerString(languageTag));\n+        \/\/ Check if the tag is a legacy language tag\n+        String[] gfmap = LEGACY.get(LocaleUtils.toLowerString(languageTag));\n","filename":"src\/java.base\/share\/classes\/sun\/util\/locale\/LanguageTag.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -135,1 +135,1 @@\n-     * It may define a white list of permitted classes, a black list of\n+     * It may define an accept-list of permitted classes, a reject-list of\n@@ -152,1 +152,1 @@\n-     * a white list too restrictive or a too wide a black list may\n+     * an accept-list too restrictive or a too-wide reject-list may\n","filename":"src\/java.management.rmi\/share\/classes\/javax\/management\/remote\/rmi\/RMIConnectorServer.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -444,1 +444,1 @@\n-                \/\/ The Registry filter can override the built-in white-list\n+                \/\/ The Registry filter can override the built-in allow-list\n","filename":"src\/java.rmi\/share\/classes\/sun\/rmi\/registry\/RegistryImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -385,1 +385,1 @@\n-                \/\/ The DGC filter can override the built-in white-list\n+                \/\/ The DGC filter can override the built-in allow-list\n","filename":"src\/java.rmi\/share\/classes\/sun\/rmi\/transport\/DGCImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,1 +65,1 @@\n-        if (args.length == 0) { \/\/ This is master version\n+        if (args.length == 0) { \/\/ This is  the coordinator version\n@@ -95,1 +95,1 @@\n-                        System.out.println(\"from slave:\"+outString);\n+                        System.out.println(\"from BufferedReader:\"+outString);\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/Assert.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -122,1 +122,1 @@\n-    Slave slave = new Slave();\n+    Worker worker = new Worker();\n@@ -124,1 +124,1 @@\n-class Slave {}\n+class Worker {}\n","filename":"test\/jdk\/java\/lang\/management\/ClassLoadingMXBean\/LoadCounts.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,1 @@\n-        if (args.length > 0 && args[0].equals(\"-lockslave\")) {\n+        if (args.length > 0 && args[0].equals(\"-lockworker\")) {\n@@ -50,1 +50,1 @@\n-            runLockSlave(port);\n+            runLockWorker(port);\n@@ -54,1 +54,1 @@\n-        LockSlaveMirror slave = startLockSlave();\n+        LockWorkerMirror worker = startLockWorker();\n@@ -62,2 +62,2 @@\n-            testLockProtocol(blah, slave);\n-            testAsyncClose(blah, slave);\n+            testLockProtocol(blah, worker);\n+            testAsyncClose(blah, worker);\n@@ -69,1 +69,1 @@\n-            slave.shutdown();\n+            worker.shutdown();\n@@ -74,1 +74,1 @@\n-    static void testLockProtocol(File file, LockSlaveMirror slave)\n+    static void testLockProtocol(File file, LockWorkerMirror worker)\n@@ -79,2 +79,2 @@\n-        \/\/ slave VM opens file and acquires exclusive lock\n-        slave.open(file.getPath()).lock();\n+        \/\/ worker VM opens file and acquires exclusive lock\n+        worker.open(file.getPath()).lock();\n@@ -86,1 +86,1 @@\n-        \/\/ (lock should not be acquire until released by slave VM)\n+        \/\/ (lock should not be acquire until released by worker VM)\n@@ -94,2 +94,2 @@\n-        \/\/ slave VM releases lock\n-        slave.unlock();\n+        \/\/ worker VM releases lock\n+        worker.unlock();\n@@ -101,2 +101,2 @@\n-        \/\/ slave VM acquires lock on range\n-        slave.lock(0, 10, false);\n+        \/\/ worker VM acquires lock on range\n+        worker.lock(0, 10, false);\n@@ -110,1 +110,1 @@\n-        slave.close();\n+        worker.close();\n@@ -114,3 +114,3 @@\n-    static void testAsyncClose(File file, LockSlaveMirror slave) throws Exception {\n-        \/\/ slave VM opens file and acquires exclusive lock\n-        slave.open(file.getPath()).lock();\n+    static void testAsyncClose(File file, LockWorkerMirror worker) throws Exception {\n+        \/\/ worker VM opens file and acquires exclusive lock\n+        worker.open(file.getPath()).lock();\n@@ -122,1 +122,1 @@\n-            \/\/ try to lock file (should not complete because file is locked by slave)\n+            \/\/ try to lock file (should not complete because file is locked by worker)\n@@ -145,1 +145,1 @@\n-        slave.close();\n+        worker.close();\n@@ -148,3 +148,3 @@\n-    \/\/ starts a \"lock slave\" in another process, returning a mirror object to\n-    \/\/ control the slave\n-    static LockSlaveMirror startLockSlave() throws Exception {\n+    \/\/ starts a \"lock worker\" in another process, returning a mirror object to\n+    \/\/ control the worker\n+    static LockWorkerMirror startLockWorker() throws Exception {\n@@ -162,1 +162,1 @@\n-        command += \" Lock -lockslave \" + port;\n+        command += \" Lock -lockworker \" + port;\n@@ -168,1 +168,1 @@\n-        \/\/ wait for slave to connect\n+        \/\/ wait for worker to connect\n@@ -170,1 +170,1 @@\n-        return new LockSlaveMirror(sc);\n+        return new LockWorkerMirror(sc);\n@@ -173,1 +173,1 @@\n-    \/\/ commands that the slave understands\n+    \/\/ commands that the worker understands\n@@ -180,2 +180,2 @@\n-    \/\/ provides a proxy to a \"lock slave\"\n-    static class LockSlaveMirror {\n+    \/\/ provides a proxy to a \"lock worker\"\n+    static class LockWorkerMirror {\n@@ -184,1 +184,1 @@\n-        LockSlaveMirror(SocketChannel sc) {\n+        LockWorkerMirror(SocketChannel sc) {\n@@ -210,1 +210,1 @@\n-        LockSlaveMirror open(String file) throws IOException {\n+        LockWorkerMirror open(String file) throws IOException {\n@@ -219,1 +219,1 @@\n-        LockSlaveMirror lock() throws IOException {\n+        LockWorkerMirror lock() throws IOException {\n@@ -225,1 +225,1 @@\n-        LockSlaveMirror lock(long position, long size, boolean shared)\n+        LockWorkerMirror lock(long position, long size, boolean shared)\n@@ -232,1 +232,1 @@\n-        LockSlaveMirror unlock() throws IOException {\n+        LockWorkerMirror unlock() throws IOException {\n@@ -271,2 +271,2 @@\n-    \/\/ slave process that responds to simple commands a socket connection\n-    static void runLockSlave(int port) throws Exception {\n+    \/\/ worker process that responds to simple commands a socket connection\n+    static void runLockWorker(int port) throws Exception {\n","filename":"test\/jdk\/java\/nio\/channels\/AsynchronousFileChannel\/Lock.java","additions":37,"deletions":37,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,2 +45,2 @@\n-        SocketChannel slave = server.accept ();\n-        slave.configureBlocking (true);\n+        SocketChannel channel = server.accept ();\n+        channel.configureBlocking (true);\n@@ -56,1 +56,1 @@\n-        int nb = slave.read (ByteBuffer.allocate (1024));\n+        int nb = channel.read (ByteBuffer.allocate (1024));\n","filename":"test\/jdk\/java\/nio\/channels\/SocketChannel\/CloseRegisteredChannel.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -154,1 +154,1 @@\n-        } else { \/\/ language, extlang, grandfathered, and redundant\n+        } else { \/\/ language, extlang, legacy, and redundant\n","filename":"test\/jdk\/java\/util\/Locale\/LSRDataTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -507,1 +507,1 @@\n-        \/\/ BCP47, so it handles private use and grandfathered tags,\n+        \/\/ BCP47, so it handles private use and legacy language tags,\n@@ -517,1 +517,1 @@\n-            \/\/ grandfathered tags with preferred mappings\n+            \/\/ legacy language tags with preferred mappings\n@@ -539,1 +539,1 @@\n-            \/\/ grandfathered irregular tags, no preferred mappings, drop illegal fields\n+            \/\/ irregular legacy language tags, no preferred mappings, drop illegal fields\n@@ -551,1 +551,1 @@\n-            assertEquals(\"grandfathered case \" + i, test[1], locale.toLanguageTag());\n+            assertEquals(\"legacy language tag case \" + i, test[1], locale.toLanguageTag());\n","filename":"test\/jdk\/java\/util\/Locale\/LocaleEnhanceTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -241,1 +241,1 @@\n-                \/\/ blacklist String\n+                \/\/ filter DefaultAgentFilterTest$MyTestObject\n@@ -267,1 +267,1 @@\n-                \/\/ blacklist non-existent class\n+                \/\/ filter non-existent class\n","filename":"test\/jdk\/javax\/management\/remote\/mandatory\/connection\/DefaultAgentFilterTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}