{"files":[{"patch":"@@ -1158,1 +1158,0 @@\n-  assert(_protected_thread->is_JfrSampler_thread(), \"should be JFRSampler\");\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -110,2 +110,2 @@\n- * Crash protection for the JfrSampler thread. Wrap the callback\n- * with a sigsetjmp and in case of a SIGSEGV\/SIGBUS we siglongjmp\n+ * Crash protection for the JfrSampler thread (but also used for AsyncGetCallTrace).\n+ * Wrap the callback with a sigsetjmp and in case of a SIGSEGV\/SIGBUS we siglongjmp\n","filename":"src\/hotspot\/os\/posix\/os_posix.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -5314,1 +5314,0 @@\n-  assert(_protected_thread->is_JfrSampler_thread(), \"should be JFRSampler\");\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -145,2 +145,3 @@\n- * Crash protection for the JfrSampler thread. Wrap the callback\n- * with a __try { call() }\n+ * Crash protection for the JfrSampler thread (but also used for AsyncGetCallTrace).\n+ * Wrap the callback with a sigsetjmp and in case of a SIGSEGV\/SIGBUS we siglongjmp\n+ * back.\n","filename":"src\/hotspot\/os\/windows\/os_windows.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -355,1 +355,0 @@\n-  bool is_JfrSampler_thread() const { return true; }\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrThreadSampler.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -338,1 +338,0 @@\n-  virtual bool is_JfrSampler_thread() const          { return false; }\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}