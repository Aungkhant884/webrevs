{"files":[{"patch":"@@ -31,1 +31,0 @@\n-import javax.imageio.spi.IIORegistry;\n@@ -36,0 +35,1 @@\n+import com.sun.imageio.plugins.common.ReaderUtil;\n@@ -84,1 +84,1 @@\n-        stream.readFully(b);\n+        boolean full = ReaderUtil.tryReadFully(stream, b);\n@@ -87,1 +87,1 @@\n-        return (b[0] == 0x42) && (b[1] == 0x4d);\n+        return full && (b[0] == 0x42) && (b[1] == 0x4d);\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/bmp\/BMPImageReaderSpi.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -261,0 +261,24 @@\n+\n+    \/**\n+     * Tries to read {@code b.length} bytes from the stream,\n+     * and stores them into {@code b} starting at index 0.\n+     * If the end of the stream is reached, a {@code false}\n+     * will be returned.\n+     *\n+     * @param  iis  the stream to read.\n+     * @param  b    an array where to store the {@code byte}s.\n+     * @return {@code true} on success, or {@code false} on EOF.\n+     *\/\n+    public static boolean tryReadFully(ImageInputStream iis, byte[] b)\n+        throws IOException\n+    {\n+        int offset = 0;\n+        do {\n+            int n = iis.read(b, offset, b.length - offset);\n+            if (n < 0) {\n+                return false;       \/\/ EOF\n+            }\n+            offset += n;\n+        } while (offset < b.length);\n+        return true;\n+    }\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/common\/ReaderUtil.java","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.util.Iterator;\n@@ -32,2 +31,0 @@\n-import javax.imageio.metadata.IIOMetadataFormat;\n-import javax.imageio.metadata.IIOMetadataFormatImpl;\n@@ -36,0 +33,1 @@\n+import com.sun.imageio.plugins.common.ReaderUtil;\n@@ -88,1 +86,1 @@\n-        stream.readFully(b);\n+        boolean full = ReaderUtil.tryReadFully(stream, b);\n@@ -91,1 +89,2 @@\n-        return b[0] == 'G' && b[1] == 'I' && b[2] == 'F' && b[3] == '8' &&\n+        return full &&\n+            b[0] == 'G' && b[1] == 'I' && b[2] == 'F' && b[3] == '8' &&\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/gif\/GIFImageReaderSpi.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.util.Iterator;\n@@ -33,2 +32,0 @@\n-import javax.imageio.metadata.IIOMetadataFormat;\n-import javax.imageio.metadata.IIOMetadataFormatImpl;\n@@ -36,0 +33,1 @@\n+import com.sun.imageio.plugins.common.ReaderUtil;\n@@ -87,1 +85,1 @@\n-        stream.readFully(b);\n+        boolean full = ReaderUtil.tryReadFully(stream, b);\n@@ -90,1 +88,2 @@\n-        return (b[0] == (byte)137 &&\n+        return full &&\n+               (b[0] == (byte)137 &&\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/png\/PNGImageReaderSpi.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import com.sun.imageio.plugins.common.ReaderUtil;\n@@ -70,1 +71,1 @@\n-        stream.readFully(b);\n+        boolean full = ReaderUtil.tryReadFully(stream, b);\n@@ -73,1 +74,2 @@\n-        return ((b[0] == (byte)0x49 && b[1] == (byte)0x49 &&\n+        return full &&\n+               ((b[0] == (byte)0x49 && b[1] == (byte)0x49 &&\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/tiff\/TIFFImageReaderSpi.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import javax.imageio.spi.IIORegistry;\n@@ -36,1 +35,0 @@\n-import com.sun.imageio.plugins.common.ReaderUtil;\n@@ -89,2 +87,2 @@\n-            int type = stream.readByte();   \/\/ TypeField\n-            int fixHeaderField = stream.readByte();\n+            int type = stream.read();   \/\/ TypeField, or -1 if EOF\n+            int fixHeaderField = stream.read();\n@@ -97,2 +95,2 @@\n-            int width = ReaderUtil.readMultiByteInteger(stream);\n-            int height = ReaderUtil.readMultiByteInteger(stream);\n+            int width = tryReadMultiByteInteger(stream);\n+            int height = tryReadMultiByteInteger(stream);\n@@ -126,0 +124,28 @@\n+    \/**\n+     * Reads a positive integer value encoded on a variable number of bytes,\n+     * but stops the reading on end-of-file (EOF) or on integer overflow.\n+     *\n+     * @param  stream  the image input stream to read.\n+     * @return the integer value, or -1 if EOF or integer overflow.\n+     *\/\n+    private static int tryReadMultiByteInteger(ImageInputStream stream)\n+        throws IOException {\n+        int value = stream.read();\n+        if (value < 0) {\n+            return -1;          \/\/ EOF\n+        }\n+        int result = value & 0x7f;\n+        while ((value & 0x80) == 0x80) {\n+            if ((result & 0xfe000000) != 0) {\n+                return -1;      \/\/ 7 highest bits already used\n+            }\n+            result <<= 7;\n+            value = stream.read();\n+            if (value < 0) {\n+                return -1;      \/\/ EOF\n+            }\n+            result |= (value & 0x7f);\n+        }\n+        return result;\n+    }\n+\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/imageio\/plugins\/wbmp\/WBMPImageReaderSpi.java","additions":32,"deletions":6,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Verifies that canDecode does not throw EOFException\n+ *          if the file has too few bytes.\n+ * @run     main CanDecodeTest\n+ *\/\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import javax.imageio.ImageIO;\n+import javax.imageio.ImageReader;\n+import javax.imageio.spi.ImageReaderSpi;\n+import javax.imageio.stream.ImageInputStream;\n+\n+public class CanDecodeTest {\n+\n+    private static final String[] FORMATS = {\n+        \"WBMP\", \"BMP\", \"GIF\", \"PNG\", \"TIFF\", \"JPEG\"\n+    };\n+\n+    public static void main(String[] args) {\n+        for (String format : FORMATS) {\n+            ImageReader reader =\n+                    ImageIO.getImageReadersByFormatName(format).next();\n+            ImageReaderSpi spi = reader.getOriginatingProvider();\n+\n+            for (int n=0; n<8; n++) {\n+                InputStream dataStream =\n+                        new ByteArrayInputStream(new byte[n]);\n+                try {\n+                    ImageInputStream iis =\n+                            ImageIO.createImageInputStream(dataStream);\n+\n+                    if (spi.canDecodeInput(iis)) {\n+                        throw new RuntimeException(\"Test failed for \" +\n+                                format + \" format: shall not decode.\");\n+                    }\n+                } catch (IOException e) {\n+                    throw new RuntimeException(\"Test failed for \" +\n+                            format + \" format: \" + e, e);\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/imageio\/plugins\/shared\/CanDecodeTest.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -69,0 +69,1 @@\n+        v.add(new TestCase(\"empty\", new byte[0], 0, false));\n","filename":"test\/jdk\/javax\/imageio\/plugins\/wbmp\/CanDecodeTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}