{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+\n@@ -40,0 +41,1 @@\n+        System.out.println(\"LoadLibraryDeadlock test started\");\n@@ -71,1 +73,2 @@\n-        } catch (InterruptedException ignore) {\n+        } catch (InterruptedException ex) {\n+            throw new RuntimeException(ex);\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/loadLibraryDeadlock\/LoadLibraryDeadlock.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+import jdk.test.lib.Utils;\n@@ -41,1 +42,0 @@\n-import java.lang.Process;\n@@ -45,1 +45,0 @@\n-import java.util.concurrent.*;\n@@ -111,1 +110,1 @@\n-    private static Process runJavaCommand(String... command) throws Throwable {\n+    private static OutputAnalyzer runJavaCommand(String... command) throws Throwable {\n@@ -115,0 +114,1 @@\n+        Collections.addAll(commands, Utils.getTestJavaOpts());\n@@ -116,40 +116,1 @@\n-        System.out.println(\"COMMAND: \" + String.join(\" \", commands));\n-        return new ProcessBuilder(commands.toArray(new String[0]))\n-                .redirectErrorStream(true)\n-                .directory(new File(testClassPath))\n-                .start();\n-    }\n-\n-    private static OutputAnalyzer jcmd(long pid, String command) throws Throwable {\n-        String jcmd = JDKToolFinder.getJDKTool(\"jcmd\");\n-        return runCommandInTestClassPath(jcmd,\n-                String.valueOf(pid),\n-                command\n-        );\n-    }\n-\n-    private static String readAvailable(final InputStream is) throws Throwable {\n-        final List<String> list = Collections.synchronizedList(new ArrayList<String>());\n-        ExecutorService executor = Executors.newFixedThreadPool(2);\n-        Future<String> future = executor.submit(new Callable<String>() {\n-            public String call() {\n-                String result = new String();\n-                BufferedReader reader = new BufferedReader(new InputStreamReader(is));\n-                try {\n-                    while(true) {\n-                        String s = reader.readLine();\n-                        if (s.length() > 0) {\n-                            list.add(s);\n-                            result += s + \"\\n\";\n-                        }\n-                    }\n-                } catch (IOException ignore) {}\n-                return result;\n-            }\n-        });\n-        try {\n-            return future.get(1000, TimeUnit.MILLISECONDS);\n-        } catch (Exception ignoreAll) {\n-            future.cancel(true);\n-            return String.join(\"\\n\", list);\n-        }\n+        return runCommand(new File(testClassPath), commands.toArray(new String[0]));\n@@ -197,1 +158,1 @@\n-        Process process = runJavaCommand(\"-cp\",\n+        OutputAnalyzer outputAnalyzer = runJavaCommand(\"-cp\",\n@@ -203,4 +164,0 @@\n-\n-        \/\/ wait for a while to grab some output\n-        process.waitFor(5, TimeUnit.SECONDS);\n-\n@@ -208,2 +165,0 @@\n-        String output = readAvailable(process.getInputStream());\n-        OutputAnalyzer outputAnalyzer = new OutputAnalyzer(output);\n@@ -212,3 +167,1 @@\n-        \/\/ if the process is still running, get the thread dump\n-        OutputAnalyzer outputAnalyzerJcmd = jcmd(process.pid(), \"Thread.print\");\n-        dump(outputAnalyzerJcmd);\n+        outputAnalyzer.shouldHaveExitValue(0);\n@@ -240,8 +193,0 @@\n-\n-        if (!process.waitFor(5, TimeUnit.SECONDS)) {\n-            \/\/ if the process is still frozen, fail the test even though\n-            \/\/ the \"deadlock\" text hasn't been found\n-            process.destroyForcibly();\n-            Asserts.assertTrue(process.waitFor() == 0,\n-                    \"Process frozen.\");\n-        }\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/loadLibraryDeadlock\/TestLoadLibraryDeadlock.java","additions":7,"deletions":62,"binary":false,"changes":69,"status":"modified"}]}