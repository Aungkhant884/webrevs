{"files":[{"patch":"@@ -35,1 +35,0 @@\n-\n@@ -48,0 +47,1 @@\n+                    System.out.println(\"Class1 loaded from \" + getLocation(c1));\n@@ -61,1 +61,1 @@\n-                    System.out.println(\"Signed jar loaded.\");\n+                    System.out.println(\"Class2 loaded from \" + getLocation(c2));\n@@ -77,0 +77,6 @@\n+\n+    private static String getLocation(Class<?> c) {\n+        var pd = c.getProtectionDomain();\n+        var cs = pd != null ? pd.getCodeSource() : null;\n+        return cs != null ? cs.getLocation().getPath() : null;\n+    }\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/loadLibraryDeadlock\/LoadLibraryDeadlock.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import jdk.test.lib.Utils;\n@@ -42,0 +41,1 @@\n+import java.nio.file.Path;\n@@ -47,0 +47,2 @@\n+import static jdk.test.lib.process.ProcessTools.*;\n+\n@@ -110,9 +112,0 @@\n-    private static OutputAnalyzer runJavaCommand(String... command) throws Throwable {\n-        String java = JDKToolFinder.getJDKTool(\"java\");\n-        List<String> commands = new ArrayList<>();\n-        Collections.addAll(commands, java);\n-        Collections.addAll(commands, Utils.getTestJavaOpts());\n-        Collections.addAll(commands, command);\n-        return runCommand(new File(testClassPath), commands.toArray(new String[0]));\n-    }\n-\n@@ -126,6 +119,0 @@\n-    private final static void dump(OutputAnalyzer output) {\n-        output.asLines()\n-              .stream()\n-              .forEach(s -> System.out.println(s));\n-    }\n-\n@@ -136,6 +123,7 @@\n-        FileUtils.deleteFileIfExistsWithRetry(\n-                Paths.get(testClassPath, \"a.jar\"));\n-        FileUtils.deleteFileIfExistsWithRetry(\n-                Paths.get(testClassPath, \"b.jar\"));\n-        FileUtils.deleteFileIfExistsWithRetry(\n-                Paths.get(testClassPath, \"c.jar\"));\n+        Path aJar = Path.of(testClassPath, \"a.jar\");\n+        Path bJar = Path.of(testClassPath, \"b.jar\");\n+        Path cJar = Path.of(testClassPath, \"c.jar\");\n+\n+        FileUtils.deleteFileIfExistsWithRetry(aJar);\n+        FileUtils.deleteFileIfExistsWithRetry(bJar);\n+        FileUtils.deleteFileIfExistsWithRetry(cJar);\n@@ -158,4 +146,4 @@\n-        OutputAnalyzer outputAnalyzer = runJavaCommand(\"-cp\",\n-                \"a.jar\" + classPathSeparator +\n-                \"b.jar\" + classPathSeparator +\n-                \"c.jar\",\n+        OutputAnalyzer outputAnalyzer = executeCommand(createTestJavaProcessBuilder(\"-cp\",\n+                aJar.toString() + classPathSeparator +\n+                bJar.toString() + classPathSeparator +\n+                cJar.toString(),\n@@ -163,4 +151,1 @@\n-                \"LoadLibraryDeadlock\");\n-        \/\/ dump available output\n-        dump(outputAnalyzer);\n-\n+                \"LoadLibraryDeadlock\"));\n@@ -187,2 +172,6 @@\n-                countLines(outputAnalyzer, \"Signed jar loaded.\") > 0,\n-                \"Unable to load signed jar.\");\n+                countLines(outputAnalyzer, \"Class1 loaded from \" + bJar) > 0,\n+                \"Unable to load b.jar.\");\n+\n+        Asserts.assertTrue(\n+                countLines(outputAnalyzer, \"Class2 loaded from \" + cJar) > 0,\n+                \"Unable to load signed c.jar.\");\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/loadLibraryDeadlock\/TestLoadLibraryDeadlock.java","additions":21,"deletions":32,"binary":false,"changes":53,"status":"modified"}]}