{"files":[{"patch":"@@ -327,1 +327,1 @@\n-        SystemProperties res = new SystemProperties(sanitizeOSArch(props));\n+        SystemProperties res = new SystemProperties(unsafe, sanitizeOSArch(props));\n@@ -331,1 +331,1 @@\n-                System.out.println(e);\n+                System.out.printf(\"%s=%s%n\", e.getKey(), e.getValue());\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/services\/Services.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,2 +25,0 @@\n-import java.util.AbstractCollection;\n-import java.util.AbstractSet;\n@@ -28,1 +26,0 @@\n-import java.util.Iterator;\n@@ -30,1 +27,0 @@\n-import java.util.Objects;\n@@ -32,1 +28,1 @@\n-import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n@@ -42,3 +38,4 @@\n-    final Map<String, Value> entries;\n-    EntrySet entrySet;\n-    Values values;\n+    private final Unsafe unsafe;\n+    private final Map<String, Value> entries;\n+    private Set<Entry<String, String>> entrySet;\n+    private Collection<String> values;\n@@ -46,1 +43,2 @@\n-    SystemProperties(Map<String, Value> entries) {\n+    SystemProperties(Unsafe unsafe, Map<String, Value> entries) {\n+        this.unsafe = unsafe;\n@@ -68,1 +66,1 @@\n-            if (v.getString().equals(value)) {\n+            if (v.getString(unsafe).equals(value)) {\n@@ -79,1 +77,1 @@\n-            return v.getString();\n+            return v.getString(unsafe);\n@@ -111,2 +109,4 @@\n-        Values vs;\n-        return (vs = values) == null ? (values = new Values(this)) : vs;\n+        if (values == null) {\n+            values = entries.values().stream().map(v -> v.getString(unsafe)).collect(Collectors.toUnmodifiableList());\n+        }\n+        return values;\n@@ -115,0 +115,27 @@\n+    static class Property implements Map.Entry<String, String> {\n+        private final Unsafe unsafe;\n+        private final String key;\n+        private final Value value;\n+\n+        Property(Unsafe unsafe, Map.Entry<String, Value> e) {\n+            this.unsafe = unsafe;\n+            this.key = e.getKey();\n+            this.value = e.getValue();\n+        }\n+\n+        @Override\n+        public String getKey() {\n+            return key;\n+        }\n+\n+        @Override\n+        public String getValue() {\n+            return value.getString(unsafe);\n+        }\n+\n+        @Override\n+        public String setValue(String value) {\n+            throw new UnsupportedOperationException();\n+        }\n+    };\n+\n@@ -117,2 +144,4 @@\n-        EntrySet es;\n-        return (es = entrySet) == null ? (entrySet = new EntrySet(this)) : es;\n+        if (entrySet == null) {\n+            entrySet = entries.entrySet().stream().map(e -> new Property(unsafe, e)).collect(Collectors.toUnmodifiableSet());\n+        }\n+        return entrySet;\n@@ -125,1 +154,0 @@\n-        private final Unsafe unsafe;\n@@ -133,1 +161,0 @@\n-            this.unsafe = unsafe;\n@@ -141,1 +168,0 @@\n-            this.unsafe = null;\n@@ -146,1 +172,1 @@\n-        String getString() {\n+        String getString(Unsafe unsafe) {\n@@ -154,153 +180,0 @@\n-\n-    static final class EntrySet extends AbstractSet<Entry<String, String>> {\n-\n-        final SystemProperties sp;\n-\n-        EntrySet(SystemProperties sp) {\n-            this.sp = sp;\n-        }\n-\n-        public final int size() {\n-            return sp.size();\n-        }\n-\n-        public final void clear() {\n-            throw new UnsupportedOperationException();\n-        }\n-\n-        public final Iterator<Entry<String, String>> iterator() {\n-            return new Iterator<Entry<String, String>>() {\n-                Iterator<Entry<String, Value>> entriesIter = sp.entries.entrySet().iterator();\n-\n-                @Override\n-                public boolean hasNext() {\n-                    return entriesIter.hasNext();\n-                }\n-\n-                @Override\n-                public Entry<String, String> next() {\n-                    Entry<String, Value> next = entriesIter.next();\n-                    return new Node(next.getKey(), next.getValue());\n-                }\n-            };\n-        }\n-\n-        public final boolean contains(Object o) {\n-            return sp.entries.entrySet().contains(o);\n-        }\n-\n-        public final boolean remove(Object o) {\n-            throw new UnsupportedOperationException();\n-        }\n-\n-        public final void forEach(Consumer<? super Entry<String, String>> action) {\n-            for (Entry<String, String> e : this) {\n-                action.accept(e);\n-            }\n-        }\n-    }\n-\n-    static class Node implements Map.Entry<String, String> {\n-        final String key;\n-        final Value value;\n-\n-        Node(String key, Value value) {\n-            this.key = key;\n-            this.value = value;\n-        }\n-\n-\n-        public final String getKey() {\n-            return key;\n-        }\n-\n-        public final String getValue() {\n-            return value.getString();\n-        }\n-\n-        public final String toString() {\n-            return key + \"=\" + getValue();\n-        }\n-\n-        public final int hashCode() {\n-            return Objects.hashCode(key) ^ Long.hashCode(value.cstring);\n-        }\n-\n-        public final String setValue(String newValue) {\n-            throw new UnsupportedOperationException();\n-        }\n-\n-        public final boolean equals(Object o) {\n-            if (o == this) {\n-                return true;\n-            }\n-            return o instanceof Node e\n-                    && Objects.equals(key, e.getKey())\n-                    && Objects.equals(value.getString(), e.value.getString());\n-        }\n-    }\n-\n-    static final class Values extends AbstractCollection<String> {\n-        final SystemProperties sp;\n-\n-        Values(SystemProperties sp) {\n-            this.sp = sp;\n-        }\n-\n-        @Override\n-        public int size() {\n-            return sp.size();\n-        }\n-\n-        @Override\n-        public boolean isEmpty() {\n-            return sp.isEmpty();\n-        }\n-\n-        @Override\n-        public boolean contains(Object o) {\n-            return sp.containsValue(o);\n-        }\n-\n-        @Override\n-        public Iterator<String> iterator() {\n-            Iterator<Entry<String, Value>> entriesIter = sp.entries.entrySet().iterator();\n-            return new Iterator<String>() {\n-                @Override\n-                public boolean hasNext() {\n-                    return entriesIter.hasNext();\n-                }\n-\n-                @Override\n-                public String next() {\n-                    Entry<String, Value> next = entriesIter.next();\n-                    return next.getValue().getString();\n-                }\n-            };\n-        }\n-\n-        @Override\n-        public boolean remove(Object o) {\n-            throw new UnsupportedOperationException();\n-        }\n-\n-        @Override\n-        public boolean addAll(Collection<? extends String> c) {\n-            throw new UnsupportedOperationException();\n-        }\n-\n-        @Override\n-        public boolean removeAll(Collection<?> c) {\n-            throw new UnsupportedOperationException();\n-        }\n-\n-        @Override\n-        public boolean retainAll(Collection<?> c) {\n-            throw new UnsupportedOperationException();\n-        }\n-\n-        @Override\n-        public void clear() {\n-            throw new UnsupportedOperationException();\n-        }\n-    }\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/services\/SystemProperties.java","additions":45,"deletions":172,"binary":false,"changes":217,"status":"modified"}]}