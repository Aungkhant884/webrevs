{"files":[{"patch":"@@ -166,0 +166,4 @@\n+\n+private:\n+  typedef void (*CldDo)(CLDClosure*);\n+  void cld_do_impl(CldDo f, CLDClosure* clds, uint worker_id);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRootProcessor.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-#include \"runtime\/mutexLocker.hpp\"\n@@ -88,0 +87,4 @@\n+\n+  \/\/ Non-concurrent mode only runs at safepoints by VM thread\n+  assert(CONCURRENT || SafepointSynchronize::is_at_safepoint(), \"Must be at a safepoint\");\n+  assert(CONCURRENT || Thread::current()->is_VM_thread(), \"Can only be done by VM thread\");\n@@ -98,13 +101,8 @@\n-void ShenandoahClassLoaderDataRoots<CONCURRENT, SINGLE_THREADED>::always_strong_cld_do(CLDClosure* clds, uint worker_id) {\n-  if (SINGLE_THREADED) {\n-    if (CONCURRENT) {\n-      if (_semaphore.try_acquire()) {\n-        ShenandoahWorkerTimingsTracker timer(_phase, ShenandoahPhaseTimings::CLDGRoots, worker_id);\n-        MutexLocker locker(ClassLoaderDataGraph_lock, Mutex::_no_safepoint_check_flag);\n-        ClassLoaderDataGraph::always_strong_cld_do(clds);\n-        _semaphore.claim_all();\n-      }\n-    } else {\n-      assert(SafepointSynchronize::is_at_safepoint(), \"Must be at a safepoint\");\n-      assert(Thread::current()->is_VM_thread(), \"Can only be done by VM thread\");\n-      ClassLoaderDataGraph::always_strong_cld_do(clds);\n+void ShenandoahClassLoaderDataRoots<CONCURRENT, SINGLE_THREADED>::cld_do_impl(CldDo f, CLDClosure* clds, uint worker_id) {\n+  if (CONCURRENT) {\n+    if (_semaphore.try_acquire()) {\n+      ShenandoahWorkerTimingsTracker timer(_phase, ShenandoahPhaseTimings::CLDGRoots, worker_id);\n+      if (SINGLE_THREADED) ClassLoaderDataGraph_lock->lock();\n+      f(clds);\n+      if (SINGLE_THREADED) ClassLoaderDataGraph_lock->unlock();\n+      _semaphore.claim_all();\n@@ -112,4 +110,2 @@\n-  } else if (_semaphore.try_acquire()) {\n-    ShenandoahWorkerTimingsTracker timer(_phase, ShenandoahPhaseTimings::CLDGRoots, worker_id);\n-    ClassLoaderDataGraph::always_strong_cld_do(clds);\n-    _semaphore.claim_all();\n+  } else {\n+    f(clds);\n@@ -119,0 +115,6 @@\n+\n+template <bool CONCURRENT, bool SINGLE_THREADED>\n+void ShenandoahClassLoaderDataRoots<CONCURRENT, SINGLE_THREADED>::always_strong_cld_do(CLDClosure* clds, uint worker_id) {\n+  cld_do_impl(&ClassLoaderDataGraph::always_strong_cld_do, clds, worker_id);\n+}\n+\n@@ -121,18 +123,1 @@\n-  if (SINGLE_THREADED) {\n-    if (CONCURRENT) {\n-      if (_semaphore.try_acquire()) {\n-        ShenandoahWorkerTimingsTracker timer(_phase, ShenandoahPhaseTimings::CLDGRoots, worker_id);\n-        MutexLocker locker(ClassLoaderDataGraph_lock, Mutex::_no_safepoint_check_flag);\n-        ClassLoaderDataGraph::cld_do(clds);\n-        _semaphore.claim_all();\n-      }\n-    } else {\n-      assert(SafepointSynchronize::is_at_safepoint(), \"Must be at a safepoint\");\n-      assert(Thread::current()->is_VM_thread(), \"Can only be done by VM thread\");\n-      ClassLoaderDataGraph::cld_do(clds);\n-    }\n-  } else if (_semaphore.try_acquire()) {\n-    ShenandoahWorkerTimingsTracker timer(_phase, ShenandoahPhaseTimings::CLDGRoots, worker_id);\n-    ClassLoaderDataGraph::cld_do(clds);\n-    _semaphore.claim_all();\n-  }\n+  cld_do_impl(&ClassLoaderDataGraph::cld_do, clds, worker_id);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRootProcessor.inline.hpp","additions":21,"deletions":36,"binary":false,"changes":57,"status":"modified"}]}