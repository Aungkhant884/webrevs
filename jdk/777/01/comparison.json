{"files":[{"patch":"@@ -1944,1 +1944,1 @@\n-  ShenandoahClassLoaderDataRoots<true \/* concurrent *\/, false \/* single thread*\/>\n+  ShenandoahClassLoaderDataRoots<true \/* concurrent *\/, true \/* single thread*\/>\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -152,0 +152,2 @@\n+    if (SINGLE_THREADED) return 1u;\n+\n@@ -164,0 +166,4 @@\n+\n+private:\n+  typedef void (*CldDo)(CLDClosure*);\n+  void cld_do_impl(CldDo f, CLDClosure* clds, uint worker_id);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRootProcessor.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-  if (CONCURRENT) {\n+  if (CONCURRENT && !SINGLE_THREADED) {\n@@ -87,0 +87,4 @@\n+\n+  \/\/ Non-concurrent mode only runs at safepoints by VM thread\n+  assert(CONCURRENT || SafepointSynchronize::is_at_safepoint(), \"Must be at a safepoint\");\n+  assert(CONCURRENT || Thread::current()->is_VM_thread(), \"Can only be done by VM thread\");\n@@ -91,1 +95,1 @@\n-  if (CONCURRENT) {\n+  if (CONCURRENT && !SINGLE_THREADED) {\n@@ -96,0 +100,15 @@\n+template <bool CONCURRENT, bool SINGLE_THREADED>\n+void ShenandoahClassLoaderDataRoots<CONCURRENT, SINGLE_THREADED>::cld_do_impl(CldDo f, CLDClosure* clds, uint worker_id) {\n+  if (CONCURRENT) {\n+    if (_semaphore.try_acquire()) {\n+      ShenandoahWorkerTimingsTracker timer(_phase, ShenandoahPhaseTimings::CLDGRoots, worker_id);\n+      if (SINGLE_THREADED) ClassLoaderDataGraph_lock->lock();\n+      f(clds);\n+      if (SINGLE_THREADED) ClassLoaderDataGraph_lock->unlock();\n+      _semaphore.claim_all();\n+    }\n+  } else {\n+    f(clds);\n+  }\n+}\n+\n@@ -99,9 +118,1 @@\n-  if (SINGLE_THREADED) {\n-    assert(SafepointSynchronize::is_at_safepoint(), \"Must be at a safepoint\");\n-    assert(Thread::current()->is_VM_thread(), \"Single threaded CLDG iteration can only be done by VM thread\");\n-    ClassLoaderDataGraph::always_strong_cld_do(clds);\n-  } else if (_semaphore.try_acquire()) {\n-    ShenandoahWorkerTimingsTracker timer(_phase, ShenandoahPhaseTimings::CLDGRoots, worker_id);\n-    ClassLoaderDataGraph::always_strong_cld_do(clds);\n-    _semaphore.claim_all();\n-  }\n+  cld_do_impl(&ClassLoaderDataGraph::always_strong_cld_do, clds, worker_id);\n@@ -112,9 +123,1 @@\n-  if (SINGLE_THREADED) {\n-    assert(SafepointSynchronize::is_at_safepoint(), \"Must be at a safepoint\");\n-    assert(Thread::current()->is_VM_thread(), \"Single threaded CLDG iteration can only be done by VM thread\");\n-    ClassLoaderDataGraph::cld_do(clds);\n-  } else if (_semaphore.try_acquire()) {\n-    ShenandoahWorkerTimingsTracker timer(_phase, ShenandoahPhaseTimings::CLDGRoots, worker_id);\n-    ClassLoaderDataGraph::cld_do(clds);\n-    _semaphore.claim_all();\n-  }\n+  cld_do_impl(&ClassLoaderDataGraph::cld_do, clds, worker_id);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRootProcessor.inline.hpp","additions":23,"deletions":20,"binary":false,"changes":43,"status":"modified"}]}