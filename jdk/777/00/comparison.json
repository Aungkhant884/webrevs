{"files":[{"patch":"@@ -1944,1 +1944,1 @@\n-  ShenandoahClassLoaderDataRoots<true \/* concurrent *\/, false \/* single thread*\/>\n+  ShenandoahClassLoaderDataRoots<true \/* concurrent *\/, true \/* single thread*\/>\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -152,0 +152,2 @@\n+    if (SINGLE_THREADED) return 1u;\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRootProcessor.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#include \"runtime\/mutexLocker.hpp\"\n@@ -84,1 +85,1 @@\n-  if (CONCURRENT) {\n+  if (CONCURRENT && !SINGLE_THREADED) {\n@@ -91,1 +92,1 @@\n-  if (CONCURRENT) {\n+  if (CONCURRENT && !SINGLE_THREADED) {\n@@ -96,1 +97,0 @@\n-\n@@ -100,3 +100,12 @@\n-    assert(SafepointSynchronize::is_at_safepoint(), \"Must be at a safepoint\");\n-    assert(Thread::current()->is_VM_thread(), \"Single threaded CLDG iteration can only be done by VM thread\");\n-    ClassLoaderDataGraph::always_strong_cld_do(clds);\n+    if (CONCURRENT) {\n+      if (_semaphore.try_acquire()) {\n+        ShenandoahWorkerTimingsTracker timer(_phase, ShenandoahPhaseTimings::CLDGRoots, worker_id);\n+        MutexLocker locker(ClassLoaderDataGraph_lock, Mutex::_no_safepoint_check_flag);\n+        ClassLoaderDataGraph::always_strong_cld_do(clds);\n+        _semaphore.claim_all();\n+      }\n+    } else {\n+      assert(SafepointSynchronize::is_at_safepoint(), \"Must be at a safepoint\");\n+      assert(Thread::current()->is_VM_thread(), \"Can only be done by VM thread\");\n+      ClassLoaderDataGraph::always_strong_cld_do(clds);\n+    }\n@@ -113,3 +122,12 @@\n-    assert(SafepointSynchronize::is_at_safepoint(), \"Must be at a safepoint\");\n-    assert(Thread::current()->is_VM_thread(), \"Single threaded CLDG iteration can only be done by VM thread\");\n-    ClassLoaderDataGraph::cld_do(clds);\n+    if (CONCURRENT) {\n+      if (_semaphore.try_acquire()) {\n+        ShenandoahWorkerTimingsTracker timer(_phase, ShenandoahPhaseTimings::CLDGRoots, worker_id);\n+        MutexLocker locker(ClassLoaderDataGraph_lock, Mutex::_no_safepoint_check_flag);\n+        ClassLoaderDataGraph::cld_do(clds);\n+        _semaphore.claim_all();\n+      }\n+    } else {\n+      assert(SafepointSynchronize::is_at_safepoint(), \"Must be at a safepoint\");\n+      assert(Thread::current()->is_VM_thread(), \"Can only be done by VM thread\");\n+      ClassLoaderDataGraph::cld_do(clds);\n+    }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRootProcessor.inline.hpp","additions":27,"deletions":9,"binary":false,"changes":36,"status":"modified"}]}