{"files":[{"patch":"@@ -28,0 +28,11 @@\n+import java.awt.event.KeyEvent;\n+import java.awt.FontMetrics;\n+\n+import javax.swing.AbstractButton;\n+import javax.swing.JComponent;\n+import javax.swing.JToolTip;\n+import javax.swing.KeyStroke;\n+import javax.swing.UIManager;\n+\n+import sun.swing.SwingUtilities2;\n+\n@@ -34,0 +45,11 @@\n+\n+    \/**\n+     * Delimiter for Accelerator String.\n+     *\/\n+    private String acceleratorDelimiter;\n+\n+    \/**\n+     * The space between strings.\n+     *\/\n+    public static final int padSpaceBetweenStrings = 12;\n+\n@@ -38,0 +60,63 @@\n+\n+    \/**\n+     * If the accelerator is hidden, the method returns {@code true},\n+     * otherwise, returns {@code false}.\n+     *\n+     * @return {@code true} if the accelerator is hidden.\n+     *\/\n+    protected boolean isAcceleratorHidden() {\n+        Boolean b = (Boolean)UIManager.get(\"ToolTip.hideAccelerator\");\n+        return b != null && b.booleanValue();\n+    }\n+\n+    \/**\n+     * Returns the accelerator string.\n+     *\n+     * @param tip ToolTip.\n+     * @return the accelerator string.\n+     *\/\n+\n+    public String getAcceleratorString(JToolTip tip) {\n+\n+        if (tip == null || isAcceleratorHidden()) {\n+            return \"\";\n+        }\n+        JComponent comp = tip.getComponent();\n+        if (!(comp instanceof AbstractButton)) {\n+            return \"\";\n+        }\n+\n+        KeyStroke[] keys = comp.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).keys();\n+        if (keys == null) {\n+            return \"\";\n+        }\n+\n+        String controlKeyStr = \"\";\n+\n+        acceleratorDelimiter = UIManager.getString( \"MenuItem.acceleratorDelimiter\" );\n+        if ( acceleratorDelimiter == null ) { acceleratorDelimiter = \"-\"; }\n+\n+        for (int i = 0; i < keys.length; i++) {\n+            int mod = keys[i].getModifiers();\n+            controlKeyStr = KeyEvent.getModifiersExText(mod) +\n+                    acceleratorDelimiter +\n+                    KeyEvent.getKeyText(keys[i].getKeyCode());\n+            break;\n+        }\n+\n+        return controlKeyStr;\n+    }\n+\n+    \/**\n+     * Calculates the Accelerator Spacing Value.\n+     * @param c JComponent\n+     * @param fm FontMetrics\n+     * @param accel String\n+     * @return Accelerator Spacing.\n+     *\/\n+    protected int calcAcceleratorSpacing(JComponent c, FontMetrics fm, String accel) {\n+        return accel.isEmpty()\n+                ? 0\n+                : padSpaceBetweenStrings +\n+                SwingUtilities2.stringWidth(c, fm, accel);\n+    }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/ToolTipUI.java","additions":85,"deletions":0,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.awt.event.KeyEvent;\n@@ -50,0 +51,7 @@\n+    private JToolTip tip;\n+\n+    \/**\n+     * The space between strings.\n+     *\/\n+    public static final int padSpaceBetweenStrings = 12;\n+\n@@ -79,0 +87,3 @@\n+\n+        tip = (JToolTip)c;\n+\n@@ -86,0 +97,1 @@\n+        tip = null;\n@@ -155,0 +167,1 @@\n+        JToolTip tip = (JToolTip)c;\n@@ -157,0 +170,1 @@\n+        int accelBL;\n@@ -165,1 +179,5 @@\n-        Insets insets = c.getInsets();\n+        String accelString = getAcceleratorString(tip);\n+        FontMetrics accelMetrics = SwingUtilities2.getFontMetrics(c, g, font);\n+        int accelSpacing = calcAcceleratorSpacing(c, accelMetrics, accelString);\n+\n+        Insets insets = ((JToolTip)c).getInsets();\n@@ -167,4 +185,9 @@\n-            insets.left + 3,\n-            insets.top,\n-            size.width - (insets.left + insets.right) - 6,\n-            size.height - (insets.top + insets.bottom));\n+                insets.left + 3,\n+                insets.top,\n+                size.width - (insets.left + insets.right) - 6 - accelSpacing,\n+                size.height - (insets.top + insets.bottom));\n+\n+        if (paintTextR.width <= 0 || paintTextR.height <= 0) {\n+            return;\n+        }\n+\n@@ -174,0 +197,2 @@\n+            accelBL = BasicHTML.getHTMLBaseline(v, paintTextR.width,\n+                    paintTextR.height);\n@@ -177,1 +202,12 @@\n-                                  paintTextR.y + metrics.getAscent());\n+                    paintTextR.y + metrics.getAscent());\n+            accelBL = metrics.getAscent();\n+        }\n+\n+        if (!accelString.isEmpty()) {\n+            g.setFont(font);\n+            SwingUtilities2.drawString(tip, g, accelString,\n+                    tip.getWidth() - 1 - insets.right\n+                            - accelSpacing\n+                            + padSpaceBetweenStrings\n+                            - 3,\n+                    paintTextR.y + accelBL);\n@@ -187,1 +223,1 @@\n-                                           insets.top+insets.bottom);\n+                insets.top+insets.bottom);\n@@ -203,0 +239,6 @@\n+\n+        String key = getAcceleratorString((JToolTip)c);\n+        if (!key.isEmpty()) {\n+            prefSize.width += calcAcceleratorSpacing(c, c.getFontMetrics(font), key);\n+        }\n+\n@@ -206,0 +248,25 @@\n+    \/**\n+     * get Accelerator String\n+     * @param tip JToolTip Object\n+     * @return Accelerator String\n+     *\/\n+    public String getAcceleratorString(JToolTip tip) {\n+        this.tip = tip;\n+\n+        String retValue = super.getAcceleratorString(tip);\n+\n+        this.tip = null;\n+        return retValue;\n+    }\n+\n+    \/**\n+     * get Accelerator String\n+     * @return Accelerator String\n+     *\/\n+    public String getAcceleratorString() {\n+\n+        String retValue = super.getAcceleratorString(this.tip);\n+\n+        return retValue;\n+    }\n+\n@@ -245,1 +312,1 @@\n-                                          \"ToolTip.foregroundInactive\");\n+                        \"ToolTip.foregroundInactive\");\n@@ -249,1 +316,1 @@\n-                                          \"ToolTip.foreground\");\n+                        \"ToolTip.foreground\");\n@@ -254,1 +321,1 @@\n-                                      \"ToolTip.foreground\");\n+                    \"ToolTip.foreground\");\n@@ -260,1 +327,1 @@\n-                                 PropertyChangeListener {\n+            PropertyChangeListener {\n@@ -264,1 +331,1 @@\n-                || \"font\".equals(name) || SwingUtilities2.isScaleChanged(e)) {\n+                    || \"font\".equals(name) || SwingUtilities2.isScaleChanged(e)) {\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/basic\/BasicToolTipUI.java","additions":79,"deletions":12,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -64,1 +64,0 @@\n-    private String acceleratorDelimiter;\n@@ -88,2 +87,0 @@\n-        acceleratorDelimiter = UIManager.getString( \"MenuItem.acceleratorDelimiter\" );\n-        if ( acceleratorDelimiter == null ) { acceleratorDelimiter = \"-\"; }\n@@ -113,1 +110,1 @@\n-        int accelSpacing = calcAccelSpacing(c, accelMetrics, accelString);\n+        int accelSpacing = calcAcceleratorSpacing(c, accelMetrics, accelString);\n@@ -150,7 +147,0 @@\n-    private int calcAccelSpacing(JComponent c, FontMetrics fm, String accel) {\n-        return accel.isEmpty()\n-               ? 0\n-               : padSpaceBetweenStrings +\n-                 SwingUtilities2.stringWidth(c, fm, accel);\n-    }\n-\n@@ -159,5 +149,0 @@\n-\n-        String key = getAcceleratorString((JToolTip)c);\n-        if (!key.isEmpty()) {\n-            d.width += calcAccelSpacing(c, c.getFontMetrics(smallFont), key);\n-        }\n@@ -166,60 +151,0 @@\n-\n-    \/**\n-     * If the accelerator is hidden, the method returns {@code true},\n-     * otherwise, returns {@code false}.\n-     *\n-     * @return {@code true} if the accelerator is hidden.\n-     *\/\n-    protected boolean isAcceleratorHidden() {\n-        Boolean b = (Boolean)UIManager.get(\"ToolTip.hideAccelerator\");\n-        return b != null && b.booleanValue();\n-    }\n-\n-    private String getAcceleratorString(JToolTip tip) {\n-        this.tip = tip;\n-\n-        String retValue = getAcceleratorString();\n-\n-        this.tip = null;\n-        return retValue;\n-    }\n-\n-    \/**\n-     * Returns the accelerator string.\n-     *\n-     * @return the accelerator string.\n-     *\/\n-    \/\/ NOTE: This requires the tip field to be set before this is invoked.\n-    \/\/ As MetalToolTipUI is shared between all JToolTips the tip field is\n-    \/\/ set appropriately before this is invoked. Unfortunately this means\n-    \/\/ that subclasses that randomly invoke this method will see varying\n-    \/\/ results. If this becomes an issue, MetalToolTipUI should no longer be\n-    \/\/ shared.\n-    @SuppressWarnings(\"deprecation\")\n-    public String getAcceleratorString() {\n-        if (tip == null || isAcceleratorHidden()) {\n-            return \"\";\n-        }\n-        JComponent comp = tip.getComponent();\n-        if (!(comp instanceof AbstractButton)) {\n-            return \"\";\n-        }\n-\n-        KeyStroke[] keys = comp.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).keys();\n-        if (keys == null) {\n-            return \"\";\n-        }\n-\n-        String controlKeyStr = \"\";\n-\n-        for (int i = 0; i < keys.length; i++) {\n-            int mod = keys[i].getModifiers();\n-            controlKeyStr = KeyEvent.getKeyModifiersText(mod) +\n-                            acceleratorDelimiter +\n-                            KeyEvent.getKeyText(keys[i].getKeyCode());\n-            break;\n-        }\n-\n-        return controlKeyStr;\n-    }\n-\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/metal\/MetalToolTipUI.java","additions":1,"deletions":76,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -0,0 +1,227 @@\n+\/* @test\n+   @bug 5047379\n+   @summary Checks that tooltips are rendered properly\n+   @author Shannon Hickey\n+   @library ..\/..\/regtesthelpers\n+   @build Util\n+   @run main bug5047379\n+*\/\n+\n+import javax.swing.JButton;\n+import javax.swing.JComponent;\n+import javax.swing.JFrame;\n+import javax.swing.JLayeredPane;\n+import javax.swing.JPanel;\n+import javax.swing.JTextArea;\n+import javax.swing.JToolTip;\n+import javax.swing.KeyStroke;\n+import javax.swing.plaf.basic.BasicToolTipUI;\n+import javax.swing.plaf.metal.MetalToolTipUI;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+\n+\n+import java.awt.BorderLayout;\n+import java.awt.Dimension;\n+import java.awt.event.ContainerAdapter;\n+import java.awt.event.ContainerEvent;\n+import java.awt.event.KeyEvent;\n+import java.awt.FlowLayout;\n+import java.awt.GridLayout;\n+import java.awt.Point;\n+import java.awt.Robot;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+\n+public class bug5047379 {\n+    private static final long TIMEOUT =  20 * 1000;\n+    static Robot testRobot;\n+    static toolTipTest testObj;\n+    static Map<String, String> lookAndFeelMaps = new HashMap<String, String>();\n+\n+    public static void main(String[] args) throws Exception {\n+        initMap();\n+\n+        testObj = new toolTipTest();\n+        testRobot = new Robot();\n+        SwingUtilities.invokeLater(new Runnable() {\n+\n+            public void run() {\n+                try {\n+                    testObj.runTest();\n+                } catch (Exception e) {\n+                    e.printStackTrace();\n+                }\n+            }\n+        });\n+\n+        for (Map.Entry<String, String> value : lookAndFeelMaps.entrySet()) {\n+\n+            if (value.getKey().equals(\"Nimbus\")) {\n+                continue;\n+            }\n+\n+            testRobot.setAutoDelay(50);\n+            testRobot.waitForIdle();\n+            Point movePoint = testObj.getButtonPoint(testObj.b);\n+            testRobot.mouseMove(movePoint.x, movePoint.y);\n+            testRobot.waitForIdle();\n+\n+            long timeout = System.currentTimeMillis() + 9000;\n+            while (!testObj.isTooltipAdded && (System.currentTimeMillis() < timeout)) {\n+                try {\n+                    Thread.sleep(500);\n+                } catch (Exception e) {\n+                }\n+            }\n+            testObj.handleToolTip(value.getKey(),value.getValue());\n+\n+            Thread.sleep(1000);\n+\n+        }\n+    }\n+\n+    public static void initMap() {\n+        String sLnF;\n+        String sMapKey;\n+        UIManager.LookAndFeelInfo[] lookAndFeel = UIManager.getInstalledLookAndFeels();\n+        for (UIManager.LookAndFeelInfo look : lookAndFeel) {\n+\n+            sLnF = look.getClassName();\n+            sMapKey = sLnF.substring(sLnF.lastIndexOf(\".\")+1);\n+            sMapKey = sMapKey.replaceAll(\"LookAndFeel\",\"\");\n+            sMapKey = sMapKey.trim();\n+\n+            lookAndFeelMaps.put(sMapKey, sLnF);\n+        }\n+    }\n+};\n+\n+class toolTipTest{\n+    volatile boolean isTooltipAdded;\n+    JFrame frame;\n+    JButton a;\n+    JButton b;\n+    JButton c;\n+    JButton d;\n+\n+    void handleToolTip(String key, String Value) throws Exception {\n+        UIManager.setLookAndFeel(Value);\n+        SwingUtilities.updateComponentTreeUI(frame);\n+\n+        SwingUtilities.invokeAndWait(new Runnable() {\n+            @Override\n+            public void run() {\n+                try {\n+                    JToolTip tooltip = (JToolTip) Util.findSubComponent(\n+                            JFrame.getFrames()[0], \"JToolTip\");\n+\n+                    BasicToolTipUI toolTipObj = null;\n+\n+                    switch (key) {\n+                        case \"Metal\":\n+                            toolTipObj = (MetalToolTipUI) MetalToolTipUI.createUI(tooltip);\n+                            break;\n+                        case \"WindowsClassic\":\n+                        case \"Windows\":\n+                        case \"Motif\":\n+                            toolTipObj = (BasicToolTipUI) BasicToolTipUI.createUI(tooltip);\n+                            break;\n+                        default:\n+                            return;\n+                    }\n+\n+                    if (tooltip == null) {\n+                        throw new RuntimeException(\"Tooltip has not been found for : \"+key);\n+                    }\n+                    checkAcclString(toolTipObj,tooltip,key);\n+\n+                }catch (Exception e) {\n+                    e.printStackTrace();\n+                }\n+            }\n+        });\n+    }\n+\n+    void checkAcclString(BasicToolTipUI toolTipObj, JToolTip tooltip,String key) {\n+        toolTipObj.installUI(tooltip);\n+\n+        if ((!\"Ctrl+B\".equals(toolTipObj.getAcceleratorString())) &&\n+                (!\"Ctrl-B\".equals(toolTipObj.getAcceleratorString()))) {\n+            throw new RuntimeException(\"Tooltip acceleration is not properly set, Key : \"+key);\n+        }\n+    }\n+\n+    Point getButtonPoint(JButton button) throws Exception {\n+        final Point[] result = new Point[1];\n+\n+        SwingUtilities.invokeAndWait(new Runnable() {\n+\n+            @Override\n+            public void run() {\n+                Point p = button.getLocationOnScreen();\n+                Dimension size = button.getSize();\n+                result[0] = new Point(p.x + size.width \/ 2, p.y + size.height \/ 2);\n+            }\n+        });\n+        return result[0];\n+    }\n+\n+    void runTest() throws Exception {\n+        frame = new JFrame();\n+        JTextArea area = new JTextArea();\n+        JPanel p = new JPanel();\n+        JPanel resPanel = new JPanel(new FlowLayout());\n+\n+        String text  = \"Mouse is hover over button B for the \\t\\t\\n\";\n+        text+= \"ToolTip to appear. Here is what should show\\t\\t\\n\";\n+        text+= \"The word \\\\\\\"TEXT\\\\\\\" and then \\\\\\\"CTRL B\\\\\\\"\\\\n\\\"\\t\\t\";\n+        text+= \"\\n\";\n+\n+        area.setText(text);\n+        area.setEditable(false);\n+        area.setFocusable(false);\n+\n+        frame.add(area, BorderLayout.CENTER);\n+\n+        p.setLayout(new GridLayout(1, 5));\n+\n+        a = new JButton(\"A\");\n+        a.setMnemonic(KeyEvent.VK_A);\n+        a.setToolTipText(\"TEXT\");\n+        p.add(a);\n+\n+        b = new JButton(\"B\");\n+        b.setMnemonic(KeyEvent.VK_B);\n+        b.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(\"ctrl B\"), \"foo\");\n+        b.setToolTipText(\"TEXT\");\n+        p.add(b);\n+\n+        c = new JButton(\"C\");\n+        c.setMnemonic(KeyEvent.VK_C);\n+        c.setToolTipText(\"<html>TEXT\");\n+        p.add(c);\n+\n+        d = new JButton(\"D\");\n+        d.setMnemonic(KeyEvent.VK_D);\n+        d.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(\"ctrl D\"), \"foo\");\n+        d.setToolTipText(\"<html>TEXT\");\n+        p.add(d);\n+        frame.add(p, BorderLayout.NORTH);\n+\n+        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+        frame.pack();\n+\n+        JLayeredPane layeredPane = (JLayeredPane) Util.findSubComponent(\n+                frame, \"JLayeredPane\");\n+        layeredPane.addContainerListener(new ContainerAdapter() {\n+            @Override\n+            public void componentAdded(ContainerEvent e) {\n+                isTooltipAdded = true;\n+            }\n+        });\n+        frame.setVisible(true);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JToolTip\/5047379\/bug5047379.java","additions":227,"deletions":0,"binary":false,"changes":227,"status":"added"}]}