{"files":[{"patch":"@@ -0,0 +1,227 @@\n+\/* @test\n+   @bug 5047379\n+   @summary Checks that tooltips are rendered properly\n+   @author Shannon Hickey\n+   @library ..\/..\/regtesthelpers\n+   @build Util\n+   @run main bug5047379\n+*\/\n+\n+import javax.swing.JButton;\n+import javax.swing.JComponent;\n+import javax.swing.JFrame;\n+import javax.swing.JLayeredPane;\n+import javax.swing.JPanel;\n+import javax.swing.JTextArea;\n+import javax.swing.JToolTip;\n+import javax.swing.KeyStroke;\n+import javax.swing.plaf.basic.BasicToolTipUI;\n+import javax.swing.plaf.metal.MetalToolTipUI;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+\n+\n+import java.awt.BorderLayout;\n+import java.awt.Dimension;\n+import java.awt.event.ContainerAdapter;\n+import java.awt.event.ContainerEvent;\n+import java.awt.event.KeyEvent;\n+import java.awt.FlowLayout;\n+import java.awt.GridLayout;\n+import java.awt.Point;\n+import java.awt.Robot;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+\n+public class bug5047379 {\n+    private static final long TIMEOUT =  20 * 1000;\n+    static Robot testRobot;\n+    static toolTipTest testObj;\n+    static Map<String, String> lookAndFeelMaps = new HashMap<String, String>();\n+\n+    public static void main(String[] args) throws Exception {\n+        initMap();\n+\n+        testObj = new toolTipTest();\n+        testRobot = new Robot();\n+        SwingUtilities.invokeLater(new Runnable() {\n+\n+            public void run() {\n+                try {\n+                    testObj.runTest();\n+                } catch (Exception e) {\n+                    e.printStackTrace();\n+                }\n+            }\n+        });\n+\n+        for (Map.Entry<String, String> value : lookAndFeelMaps.entrySet()) {\n+\n+            if (value.getKey().equals(\"Nimbus\")) {\n+                continue;\n+            }\n+\n+            testRobot.setAutoDelay(50);\n+            testRobot.waitForIdle();\n+            Point movePoint = testObj.getButtonPoint(testObj.b);\n+            testRobot.mouseMove(movePoint.x, movePoint.y);\n+            testRobot.waitForIdle();\n+\n+            long timeout = System.currentTimeMillis() + 9000;\n+            while (!testObj.isTooltipAdded && (System.currentTimeMillis() < timeout)) {\n+                try {\n+                    Thread.sleep(500);\n+                } catch (Exception e) {\n+                }\n+            }\n+            testObj.handleToolTip(value.getKey(),value.getValue());\n+\n+            Thread.sleep(1000);\n+\n+        }\n+    }\n+\n+    public static void initMap() {\n+        String sLnF;\n+        String sMapKey;\n+        UIManager.LookAndFeelInfo[] lookAndFeel = UIManager.getInstalledLookAndFeels();\n+        for (UIManager.LookAndFeelInfo look : lookAndFeel) {\n+\n+            sLnF = look.getClassName();\n+            sMapKey = sLnF.substring(sLnF.lastIndexOf(\".\")+1);\n+            sMapKey = sMapKey.replaceAll(\"LookAndFeel\",\"\");\n+            sMapKey = sMapKey.trim();\n+\n+            lookAndFeelMaps.put(sMapKey, sLnF);\n+        }\n+    }\n+};\n+\n+class toolTipTest{\n+    volatile boolean isTooltipAdded;\n+    JFrame frame;\n+    JButton a;\n+    JButton b;\n+    JButton c;\n+    JButton d;\n+\n+    void handleToolTip(String key, String Value) throws Exception {\n+        UIManager.setLookAndFeel(Value);\n+        SwingUtilities.updateComponentTreeUI(frame);\n+\n+        SwingUtilities.invokeAndWait(new Runnable() {\n+            @Override\n+            public void run() {\n+                try {\n+                    JToolTip tooltip = (JToolTip) Util.findSubComponent(\n+                            JFrame.getFrames()[0], \"JToolTip\");\n+\n+                    BasicToolTipUI toolTipObj = null;\n+\n+                    switch (key) {\n+                        case \"Metal\":\n+                            toolTipObj = (MetalToolTipUI) MetalToolTipUI.createUI(tooltip);\n+                            break;\n+                        case \"WindowsClassic\":\n+                        case \"Windows\":\n+                        case \"Motif\":\n+                            toolTipObj = (BasicToolTipUI) BasicToolTipUI.createUI(tooltip);\n+                            break;\n+                        default:\n+                            return;\n+                    }\n+\n+                    if (tooltip == null) {\n+                        throw new RuntimeException(\"Tooltip has not been found for : \"+key);\n+                    }\n+                    checkAcclString(toolTipObj,tooltip,key);\n+\n+                }catch (Exception e) {\n+                    e.printStackTrace();\n+                }\n+            }\n+        });\n+    }\n+\n+    void checkAcclString(BasicToolTipUI toolTipObj, JToolTip tooltip,String key) {\n+        toolTipObj.installUI(tooltip);\n+\n+        if ((!\"Ctrl+B\".equals(toolTipObj.getAcceleratorString())) &&\n+                (!\"Ctrl-B\".equals(toolTipObj.getAcceleratorString()))) {\n+            throw new RuntimeException(\"Tooltip acceleration is not properly set, Key : \"+key);\n+        }\n+    }\n+\n+    Point getButtonPoint(JButton button) throws Exception {\n+        final Point[] result = new Point[1];\n+\n+        SwingUtilities.invokeAndWait(new Runnable() {\n+\n+            @Override\n+            public void run() {\n+                Point p = button.getLocationOnScreen();\n+                Dimension size = button.getSize();\n+                result[0] = new Point(p.x + size.width \/ 2, p.y + size.height \/ 2);\n+            }\n+        });\n+        return result[0];\n+    }\n+\n+    void runTest() throws Exception {\n+        frame = new JFrame();\n+        JTextArea area = new JTextArea();\n+        JPanel p = new JPanel();\n+        JPanel resPanel = new JPanel(new FlowLayout());\n+\n+        String text  = \"Mouse is hover over button B for the \\t\\t\\n\";\n+        text+= \"ToolTip to appear. Here is what should show\\t\\t\\n\";\n+        text+= \"The word \\\\\\\"TEXT\\\\\\\" and then \\\\\\\"CTRL B\\\\\\\"\\\\n\\\"\\t\\t\";\n+        text+= \"\\n\";\n+\n+        area.setText(text);\n+        area.setEditable(false);\n+        area.setFocusable(false);\n+\n+        frame.add(area, BorderLayout.CENTER);\n+\n+        p.setLayout(new GridLayout(1, 5));\n+\n+        a = new JButton(\"A\");\n+        a.setMnemonic(KeyEvent.VK_A);\n+        a.setToolTipText(\"TEXT\");\n+        p.add(a);\n+\n+        b = new JButton(\"B\");\n+        b.setMnemonic(KeyEvent.VK_B);\n+        b.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(\"ctrl B\"), \"foo\");\n+        b.setToolTipText(\"TEXT\");\n+        p.add(b);\n+\n+        c = new JButton(\"C\");\n+        c.setMnemonic(KeyEvent.VK_C);\n+        c.setToolTipText(\"<html>TEXT\");\n+        p.add(c);\n+\n+        d = new JButton(\"D\");\n+        d.setMnemonic(KeyEvent.VK_D);\n+        d.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(KeyStroke.getKeyStroke(\"ctrl D\"), \"foo\");\n+        d.setToolTipText(\"<html>TEXT\");\n+        p.add(d);\n+        frame.add(p, BorderLayout.NORTH);\n+\n+        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+        frame.pack();\n+\n+        JLayeredPane layeredPane = (JLayeredPane) Util.findSubComponent(\n+                frame, \"JLayeredPane\");\n+        layeredPane.addContainerListener(new ContainerAdapter() {\n+            @Override\n+            public void componentAdded(ContainerEvent e) {\n+                isTooltipAdded = true;\n+            }\n+        });\n+        frame.setVisible(true);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JToolTip\/5047379\/bug5047379.java","additions":227,"deletions":0,"binary":false,"changes":227,"status":"added"}]}