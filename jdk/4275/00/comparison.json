{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -170,1 +170,1 @@\n-            SequentialScheduler.synchronizedScheduler(this::flush);\n+            SequentialScheduler.lockingScheduler(this::flush);\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Http1AsyncReceiver.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -631,1 +631,1 @@\n-                SequentialScheduler.synchronizedScheduler(new WriteTask());\n+                SequentialScheduler.lockingScheduler(new WriteTask());\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Http1Exchange.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1295,1 +1295,1 @@\n-                SequentialScheduler.synchronizedScheduler(this::processQueue);\n+                SequentialScheduler.lockingScheduler(this::processQueue);\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Http2Connection.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -168,1 +168,1 @@\n-            scheduler = SequentialScheduler.synchronizedScheduler(this::loop);\n+            scheduler = SequentialScheduler.lockingScheduler(this::loop);\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/LineSubscriberAdapter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -586,1 +586,1 @@\n-            this.scheduler = SequentialScheduler.synchronizedScheduler(this::run);\n+            this.scheduler = SequentialScheduler.lockingScheduler(this::run);\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/RequestPublishers.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,2 @@\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n@@ -166,1 +168,1 @@\n-        private final Object monitor = new Object();\n+        private final Lock lock = new ReentrantLock();\n@@ -174,1 +176,2 @@\n-                synchronized(monitor) {\n+                lock.lock();\n+                try {\n@@ -176,0 +179,2 @@\n+                } finally {\n+                    lock.unlock();\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/SocketTube.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-            SequentialScheduler.synchronizedScheduler(this::schedule);\n+            SequentialScheduler.lockingScheduler(this::schedule);\n@@ -843,1 +843,1 @@\n-                    SequentialScheduler.synchronizedScheduler(this::trySend);\n+                    SequentialScheduler.lockingScheduler(this::trySend);\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Stream.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -274,1 +274,1 @@\n-            scheduler = SequentialScheduler.synchronizedScheduler(\n+            scheduler = SequentialScheduler.lockingScheduler(\n@@ -780,1 +780,1 @@\n-                                + Utils.remaining(writeList) + \", hsTriggered:\"\n+                                + Utils.synchronizedRemaining(writeList) + \", hsTriggered:\"\n@@ -783,1 +783,1 @@\n-                while (Utils.remaining(writeList) > 0 || hsTriggered() || needWrap()) {\n+                while (Utils.synchronizedRemaining(writeList) > 0 || hsTriggered() || needWrap()) {\n@@ -826,1 +826,1 @@\n-                if (completing && Utils.remaining(writeList) == 0) {\n+                if (completing && Utils.synchronizedRemaining(writeList) == 0) {\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/common\/SSLFlowDelegate.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,2 @@\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n@@ -180,0 +182,30 @@\n+    \/**\n+     * A task that runs its main loop within a  block protected by a lock to provide\n+     * memory visibility between runs. Since the main loop can't run concurrently,\n+     * the lock shouldn't be contended and no deadlock should ever be possible.\n+     *\/\n+    public static final class LockingRestartableTask\n+            extends CompleteRestartableTask {\n+\n+        private final Runnable mainLoop;\n+        private final Lock lock = new ReentrantLock();\n+\n+        public LockingRestartableTask(Runnable mainLoop) {\n+            this.mainLoop = mainLoop;\n+        }\n+\n+        @Override\n+        protected void run() {\n+            \/\/ The logics of the sequential scheduler should ensure that\n+            \/\/ the restartable task is running in only one thread at\n+            \/\/ a given time: there should never be contention.\n+            boolean locked = lock.tryLock();\n+            assert locked : \"contention detected in SequentialScheduler\";\n+            try {\n+                mainLoop.run();\n+            } finally {\n+                if (locked) lock.unlock();\n+            }\n+        }\n+    }\n+\n@@ -362,0 +394,16 @@\n+\n+    \/**\n+     * Returns a new {@code SequentialScheduler} that executes the provided\n+     * {@code mainLoop} from within a {@link LockingRestartableTask}.\n+     *\n+     * @apiNote This is equivalent to calling\n+     * {@code new SequentialScheduler(new LockingRestartableTask(mainLoop))}\n+     * The main loop must not perform any blocking operation.\n+     *\n+     * @param mainLoop The main loop of the new sequential scheduler\n+     * @return a new {@code SequentialScheduler} that executes the provided\n+     * {@code mainLoop} from within a {@link LockingRestartableTask}.\n+     *\/\n+    public static SequentialScheduler lockingScheduler(Runnable mainLoop) {\n+        return new SequentialScheduler(new LockingRestartableTask(mainLoop));\n+    }\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/common\/SequentialScheduler.java","additions":49,"deletions":1,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -99,1 +99,1 @@\n-                SequentialScheduler.synchronizedScheduler(new DownstreamPusher());\n+                SequentialScheduler.lockingScheduler(new DownstreamPusher());\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/common\/SubscriberWrapper.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -658,5 +658,3 @@\n-        synchronized (bufs) {\n-            for (ByteBuffer buf : bufs) {\n-                if (buf.hasRemaining())\n-                    return true;\n-            }\n+        for (ByteBuffer buf : bufs) {\n+            if (buf.hasRemaining())\n+                return true;\n@@ -669,4 +667,2 @@\n-        synchronized (bufs) {\n-            for (ByteBuffer buf : bufs) {\n-                remain += buf.remaining();\n-            }\n+        for (ByteBuffer buf : bufs) {\n+            remain += buf.remaining();\n@@ -677,0 +673,6 @@\n+    public static long synchronizedRemaining(List<ByteBuffer> bufs) {\n+        synchronized (bufs) {\n+            return remaining(bufs);\n+        }\n+    }\n+\n@@ -679,6 +681,4 @@\n-        synchronized (bufs) {\n-            for (ByteBuffer buf : bufs) {\n-                remain += buf.remaining();\n-                if (remain > max) {\n-                    throw new IllegalArgumentException(\"too many bytes\");\n-                }\n+        for (ByteBuffer buf : bufs) {\n+            remain += buf.remaining();\n+            if (remain > max) {\n+                throw new IllegalArgumentException(\"too many bytes\");\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/common\/Utils.java","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n- * @run testng\/othervm LineBodyHandlerTest\n+ * @run testng\/othervm -XX:+UnlockDiagnosticVMOptions -XX:DiagnoseSyncOnValueBasedClasses=1 LineBodyHandlerTest\n","filename":"test\/jdk\/java\/net\/httpclient\/LineBodyHandlerTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -164,1 +164,1 @@\n-        SequentialScheduler scheduler = SequentialScheduler.synchronizedScheduler(this::loop);\n+        SequentialScheduler scheduler = SequentialScheduler.lockingScheduler(this::loop);\n","filename":"test\/jdk\/java\/net\/httpclient\/whitebox\/java.net.http\/jdk\/internal\/net\/http\/SSLEchoTubeTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}