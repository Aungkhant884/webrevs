{"files":[{"patch":"@@ -2922,1 +2922,1 @@\n-        _nindex_to_node = new (ResourceObj::C_HEAP, mtInternal) GrowableArray<int>(0, mtInternal);\n+        _nindex_to_node = new (mtInternal) GrowableArray<int>(0, mtInternal);\n@@ -2925,1 +2925,1 @@\n-        _cpu_to_node = new (ResourceObj::C_HEAP, mtInternal) GrowableArray<int>(0, mtInternal);\n+        _cpu_to_node = new (mtInternal) GrowableArray<int>(0, mtInternal);\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2022,1 +2022,1 @@\n-  fprintf(fp,\"class State : public ResourceObj {\\n\");\n+  fprintf(fp,\"class State : public ArenaObj {\\n\");\n","filename":"src\/hotspot\/share\/adlc\/output_h.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -142,2 +142,0 @@\n-\n-  assert(_default_oop_recorder.allocated_on_stack_or_embedded(), \"should be embedded object\");\n","filename":"src\/hotspot\/share\/asm\/codeBuffer.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -387,1 +387,1 @@\n-  void* operator new(size_t size) throw() { return ResourceObj::operator new(size); }\n+  void* operator new(size_t size) throw() { return resource_allocate_bytes(size); }\n","filename":"src\/hotspot\/share\/asm\/codeBuffer.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-  _output = new(mtCompiler) fileStream(file_name, \"at\");\n+  _output = new (mtCompiler) fileStream(file_name, \"at\");\n","filename":"src\/hotspot\/share\/c1\/c1_CFGPrinter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2514,6 +2514,6 @@\n-ConstantOopWriteValue* LinearScan::_oop_null_scope_value = new (ResourceObj::C_HEAP, mtCompiler) ConstantOopWriteValue(NULL);\n-ConstantIntValue*      LinearScan::_int_m1_scope_value = new (ResourceObj::C_HEAP, mtCompiler) ConstantIntValue(-1);\n-ConstantIntValue*      LinearScan::_int_0_scope_value =  new (ResourceObj::C_HEAP, mtCompiler) ConstantIntValue((jint)0);\n-ConstantIntValue*      LinearScan::_int_1_scope_value =  new (ResourceObj::C_HEAP, mtCompiler) ConstantIntValue(1);\n-ConstantIntValue*      LinearScan::_int_2_scope_value =  new (ResourceObj::C_HEAP, mtCompiler) ConstantIntValue(2);\n-LocationValue*         _illegal_value = new (ResourceObj::C_HEAP, mtCompiler) LocationValue(Location());\n+ConstantOopWriteValue* LinearScan::_oop_null_scope_value = new (mtCompiler) ConstantOopWriteValue(NULL);\n+ConstantIntValue*      LinearScan::_int_m1_scope_value = new (mtCompiler) ConstantIntValue(-1);\n+ConstantIntValue*      LinearScan::_int_0_scope_value =  new (mtCompiler) ConstantIntValue((jint)0);\n+ConstantIntValue*      LinearScan::_int_1_scope_value =  new (mtCompiler) ConstantIntValue(1);\n+ConstantIntValue*      LinearScan::_int_2_scope_value =  new (mtCompiler) ConstantIntValue(2);\n+LocationValue*         _illegal_value = new (mtCompiler) LocationValue(Location());\n","filename":"src\/hotspot\/share\/c1\/c1_LinearScan.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-  _objs = new (ResourceObj::C_HEAP, mtClassShared) GrowableArray<SourceObjInfo*>(128 * K, mtClassShared);\n+  _objs = new (mtClassShared) GrowableArray<SourceObjInfo*>(128 * K, mtClassShared);\n@@ -167,3 +167,3 @@\n-  _klasses = new (ResourceObj::C_HEAP, mtClassShared) GrowableArray<Klass*>(4 * K, mtClassShared);\n-  _symbols = new (ResourceObj::C_HEAP, mtClassShared) GrowableArray<Symbol*>(256 * K, mtClassShared);\n-  _special_refs = new (ResourceObj::C_HEAP, mtClassShared) GrowableArray<SpecialRefInfo>(24 * K, mtClassShared);\n+  _klasses = new (mtClassShared) GrowableArray<Klass*>(4 * K, mtClassShared);\n+  _symbols = new (mtClassShared) GrowableArray<Symbol*>(256 * K, mtClassShared);\n+  _special_refs = new (mtClassShared) GrowableArray<SpecialRefInfo>(24 * K, mtClassShared);\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -229,2 +229,2 @@\n-  ResizeableResourceHashtable<address, SourceObjInfo, ResourceObj::C_HEAP, mtClassShared> _src_obj_table;\n-  ResizeableResourceHashtable<address, address, ResourceObj::C_HEAP, mtClassShared> _buffered_to_src_table;\n+  ResizeableResourceHashtable<address, SourceObjInfo, AnyObj::C_HEAP, mtClassShared> _src_obj_table;\n+  ResizeableResourceHashtable<address, address, AnyObj::C_HEAP, mtClassShared> _buffered_to_src_table;\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-      ResourceObj::C_HEAP,\n+      AnyObj::C_HEAP,\n","filename":"src\/hotspot\/share\/cds\/cdsHeapVerifier.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -76,2 +76,2 @@\n-  _interfaces = new (ResourceObj::C_HEAP, mtClass) GrowableArray<int>(10, mtClass);\n-  _indy_items = new (ResourceObj::C_HEAP, mtClass) GrowableArray<const char*>(9, mtClass);\n+  _interfaces = new (mtClass) GrowableArray<int>(10, mtClass);\n+  _indy_items = new (mtClass) GrowableArray<const char*>(9, mtClass);\n","filename":"src\/hotspot\/share\/cds\/classListParser.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-                                      ResourceObj::C_HEAP, mtClassShared> ID2KlassTable;\n+                                      AnyObj::C_HEAP, mtClassShared> ID2KlassTable;\n","filename":"src\/hotspot\/share\/cds\/classListParser.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-  ResourceObj::C_HEAP> {};\n+  AnyObj::C_HEAP> {};\n@@ -78,1 +78,1 @@\n-    _id_table = new (ResourceObj::C_HEAP, mtClass)IDTable();\n+    _id_table = new (mtClass)IDTable();\n","filename":"src\/hotspot\/share\/cds\/classListWriter.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -59,2 +59,2 @@\n-      _verifier_constraints = new (ResourceObj::C_HEAP, mtClass) GrowableArray<DTVerifierConstraint>(n, mtClass);\n-      _verifier_constraint_flags = new (ResourceObj::C_HEAP, mtClass) GrowableArray<char>(n, mtClass);\n+      _verifier_constraints = new (mtClass) GrowableArray<DTVerifierConstraint>(n, mtClass);\n+      _verifier_constraint_flags = new (mtClass) GrowableArray<char>(n, mtClass);\n@@ -71,1 +71,1 @@\n-      _loader_constraints = new (ResourceObj::C_HEAP, mtClass) GrowableArray<DTLoaderConstraint>(n, mtClass);\n+      _loader_constraints = new (mtClass) GrowableArray<DTLoaderConstraint>(n, mtClass);\n@@ -99,1 +99,1 @@\n-    _verifier_constraints = new (ResourceObj::C_HEAP, mtClass) GrowableArray<DTVerifierConstraint>(4, mtClass);\n+    _verifier_constraints = new (mtClass) GrowableArray<DTVerifierConstraint>(4, mtClass);\n@@ -102,1 +102,1 @@\n-    _verifier_constraint_flags = new (ResourceObj::C_HEAP, mtClass) GrowableArray<char>(4, mtClass);\n+    _verifier_constraint_flags = new (mtClass) GrowableArray<char>(4, mtClass);\n@@ -144,1 +144,1 @@\n-    _loader_constraints = new (ResourceObj::C_HEAP, mtClass) GrowableArray<DTLoaderConstraint>(4, mtClass);\n+    _loader_constraints = new (mtClass) GrowableArray<DTLoaderConstraint>(4, mtClass);\n@@ -176,1 +176,1 @@\n-    _enum_klass_static_fields = new (ResourceObj::C_HEAP, mtClass) GrowableArray<int>(20, mtClass);\n+    _enum_klass_static_fields = new (mtClass) GrowableArray<int>(20, mtClass);\n","filename":"src\/hotspot\/share\/cds\/dumpTimeClassInfo.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -236,1 +236,1 @@\n-  ResourceObj::C_HEAP,\n+  AnyObj::C_HEAP,\n","filename":"src\/hotspot\/share\/cds\/dumpTimeClassInfo.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -638,1 +638,1 @@\n-    _non_existent_class_paths = new (ResourceObj::C_HEAP, mtClass)GrowableArray<const char*>(10, mtClass);\n+    _non_existent_class_paths = new (mtClass) GrowableArray<const char*>(10, mtClass);\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -596,1 +596,1 @@\n-      new(ResourceObj::C_HEAP, mtClass) GrowableArray<int>(10, mtClass);\n+      new (mtClass) GrowableArray<int>(10, mtClass);\n@@ -610,1 +610,1 @@\n-      new(ResourceObj::C_HEAP, mtClass) GrowableArray<Klass*>(50, mtClass);\n+      new (mtClass) GrowableArray<Klass*>(50, mtClass);\n@@ -1562,1 +1562,1 @@\n-  _dump_time_subgraph_info_table = new (ResourceObj::C_HEAP, mtClass)DumpTimeKlassSubGraphInfoTable();\n+  _dump_time_subgraph_info_table = new (mtClass)DumpTimeKlassSubGraphInfoTable();\n@@ -1634,1 +1634,1 @@\n-    _dumped_interned_strings = new (ResourceObj::C_HEAP, mtClass)DumpedInternedStrings();\n+    _dumped_interned_strings = new (mtClass)DumpedInternedStrings();\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -185,1 +185,1 @@\n-      ResourceObj::C_HEAP,\n+      AnyObj::C_HEAP,\n@@ -192,1 +192,1 @@\n-      ResourceObj::C_HEAP,\n+      AnyObj::C_HEAP,\n@@ -200,1 +200,1 @@\n-                               ResourceObj::C_HEAP,\n+                               AnyObj::C_HEAP,\n@@ -256,1 +256,1 @@\n-      ResourceObj::C_HEAP,\n+      AnyObj::C_HEAP,\n@@ -267,1 +267,1 @@\n-    _seen_objects_table = new (ResourceObj::C_HEAP, mtClass)SeenObjectsTable();\n+    _seen_objects_table = new (mtClass)SeenObjectsTable();\n@@ -318,1 +318,1 @@\n-      new (ResourceObj::C_HEAP, mtClass)ArchivedObjectCache();\n+      new (mtClass)ArchivedObjectCache();\n@@ -321,1 +321,1 @@\n-        new (ResourceObj::C_HEAP, mtClass)OriginalObjectTable();\n+        new (mtClass)OriginalObjectTable();\n@@ -425,1 +425,1 @@\n-                           ResourceObj::C_HEAP,\n+                           AnyObj::C_HEAP,\n","filename":"src\/hotspot\/share\/cds\/heapShared.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-    _proxy_klasses = new (ResourceObj::C_HEAP, mtClassShared) GrowableArray<InstanceKlass*>(n, mtClassShared);\n+    _proxy_klasses = new (mtClassShared) GrowableArray<InstanceKlass*>(n, mtClassShared);\n","filename":"src\/hotspot\/share\/cds\/lambdaProxyClassDictionary.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -117,1 +117,1 @@\n-      _proxy_klasses = new (ResourceObj::C_HEAP, mtClassShared) GrowableArray<InstanceKlass*>(5, mtClassShared);\n+      _proxy_klasses = new (mtClassShared) GrowableArray<InstanceKlass*>(5, mtClassShared);\n@@ -163,1 +163,1 @@\n-                             ResourceObj::C_HEAP,\n+                             AnyObj::C_HEAP,\n","filename":"src\/hotspot\/share\/cds\/lambdaProxyClassDictionary.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -158,1 +158,1 @@\n-                              ResourceObj::C_HEAP, mtClassShared> _dumped_classes;\n+                              AnyObj::C_HEAP, mtClassShared> _dumped_classes;\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-  ResourceObj::C_HEAP> {};\n+  AnyObj::C_HEAP> {};\n@@ -105,1 +105,1 @@\n-    _url_classloader_table = new (ResourceObj::C_HEAP, mtClass)URLClassLoaderTable();\n+    _url_classloader_table = new (mtClass)URLClassLoaderTable();\n","filename":"src\/hotspot\/share\/cds\/unregisteredClasses.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-class BCEscapeAnalyzer : public ResourceObj {\n+class BCEscapeAnalyzer : public ArenaObj {\n","filename":"src\/hotspot\/share\/ci\/bcEscapeAnalyzer.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-class ciBaseObject : public ResourceObj {\n+class ciBaseObject : public ArenaObj {\n","filename":"src\/hotspot\/share\/ci\/ciBaseObject.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-class ciConstantPoolCache : public ResourceObj {\n+class ciConstantPoolCache : public ArenaObj {\n","filename":"src\/hotspot\/share\/ci\/ciConstantPoolCache.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-class ciExceptionHandler : public ResourceObj {\n+class ciExceptionHandler : public AnyObj {\n","filename":"src\/hotspot\/share\/ci\/ciExceptionHandler.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-class ciField : public ResourceObj {\n+class ciField : public ArenaObj {\n","filename":"src\/hotspot\/share\/ci\/ciField.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-class ciMethodBlocks : public ResourceObj {\n+class ciMethodBlocks : public ArenaObj {\n@@ -63,1 +63,1 @@\n-class ciBlock : public ResourceObj {\n+class ciBlock : public ArenaObj {\n","filename":"src\/hotspot\/share\/ci\/ciMethodBlocks.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-class ciObjectFactory : public ResourceObj {\n+class ciObjectFactory : public ArenaObj {\n@@ -59,1 +59,1 @@\n-  struct NonPermObject : public ResourceObj {\n+  struct NonPermObject : public ArenaObj {\n","filename":"src\/hotspot\/share\/ci\/ciObjectFactory.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-class ciSignature : public ResourceObj {\n+class ciSignature : public ArenaObj {\n","filename":"src\/hotspot\/share\/ci\/ciSignature.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3115,0 +3115,2 @@\n+void ciTypeFlow::print() const       { print_on(tty); }\n+\n","filename":"src\/hotspot\/share\/ci\/ciTypeFlow.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-class ciTypeFlow : public ResourceObj {\n+class ciTypeFlow : public ArenaObj {\n@@ -69,1 +69,1 @@\n-  class JsrRecord : public ResourceObj {\n+  class JsrRecord : public ArenaObj {\n@@ -100,1 +100,1 @@\n-  class JsrSet : public ResourceObj {\n+  class JsrSet : public AnyObj {\n@@ -156,1 +156,1 @@\n-  class StateVector : public ResourceObj {\n+  class StateVector : public AnyObj {\n@@ -516,1 +516,1 @@\n-  class Block : public ResourceObj {\n+  class Block : public ArenaObj {\n@@ -710,1 +710,1 @@\n-  class Loop : public ResourceObj {\n+  class Loop : public ArenaObj {\n@@ -929,0 +929,1 @@\n+  void print() const PRODUCT_RETURN;\n","filename":"src\/hotspot\/share\/ci\/ciTypeFlow.hpp","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -128,1 +128,1 @@\n-      256, ResourceObj::RESOURCE_AREA, mtInternal,\n+      256, AnyObj::RESOURCE_AREA, mtInternal,\n","filename":"src\/hotspot\/share\/classfile\/bytecodeAssembler.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -168,1 +168,0 @@\n-  assert(cfs->allocated_on_stack_or_embedded(), \"should be local\");\n@@ -2140,1 +2139,1 @@\n-                            256, ResourceObj::RESOURCE_AREA, mtInternal,\n+                            256, AnyObj::RESOURCE_AREA, mtInternal,\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -570,1 +570,1 @@\n-  _patch_mod_entries = new (ResourceObj::C_HEAP, mtModule) GrowableArray<ModuleClassPathList*>(num_of_entries, mtModule);\n+  _patch_mod_entries = new (mtModule) GrowableArray<ModuleClassPathList*>(num_of_entries, mtModule);\n@@ -1510,1 +1510,1 @@\n-    _exploded_entries = new (ResourceObj::C_HEAP, mtModule)\n+    _exploded_entries = new (mtModule)\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -831,1 +831,1 @@\n-      _deallocate_list = new (ResourceObj::C_HEAP, mtClass) GrowableArray<Metadata*>(100, mtClass);\n+      _deallocate_list = new (mtClass) GrowableArray<Metadata*>(100, mtClass);\n","filename":"src\/hotspot\/share\/classfile\/classLoaderData.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -115,1 +115,1 @@\n-                            256, ResourceObj::RESOURCE_AREA, mtInternal,\n+                            256, AnyObj::RESOURCE_AREA, mtInternal,\n","filename":"src\/hotspot\/share\/classfile\/classLoaderStats.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-    _buckets[i] = new (ResourceObj::C_HEAP, mtSymbol) GrowableArray<Entry>(0, mtSymbol);\n+    _buckets[i] = new (mtSymbol) GrowableArray<Entry>(0, mtSymbol);\n","filename":"src\/hotspot\/share\/classfile\/compactHashtable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-    _primitive_fields = new(ResourceObj::RESOURCE_AREA, mtInternal) GrowableArray<LayoutRawBlock*>(INITIAL_LIST_SIZE);\n+    _primitive_fields = new GrowableArray<LayoutRawBlock*>(INITIAL_LIST_SIZE);\n@@ -96,1 +96,1 @@\n-    _oop_fields = new(ResourceObj::RESOURCE_AREA, mtInternal) GrowableArray<LayoutRawBlock*>(INITIAL_LIST_SIZE);\n+    _oop_fields = new GrowableArray<LayoutRawBlock*>(INITIAL_LIST_SIZE);\n","filename":"src\/hotspot\/share\/classfile\/fieldLayoutBuilder.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -968,1 +968,1 @@\n-    new (ResourceObj::C_HEAP, mtClass) GrowableArray<Klass*>(40, mtClass);\n+    new (mtClass) GrowableArray<Klass*>(40, mtClass);\n@@ -972,1 +972,1 @@\n-    new (ResourceObj::C_HEAP, mtModule) GrowableArray<Klass*>(500, mtModule);\n+    new (mtModule) GrowableArray<Klass*>(500, mtModule);\n@@ -1981,2 +1981,2 @@\n-      _methods = new (ResourceObj::C_HEAP, mtInternal) GrowableArray<Method*>(init_length, mtInternal);\n-      _bcis = new (ResourceObj::C_HEAP, mtInternal) GrowableArray<int>(init_length, mtInternal);\n+      _methods = new (mtInternal) GrowableArray<Method*>(init_length, mtInternal);\n+      _bcis = new (mtInternal) GrowableArray<int>(init_length, mtInternal);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-    _loaders = new (ResourceObj::C_HEAP, mtClass) GrowableArray<ClassLoaderData*>(10, mtClass);\n+    _loaders = new (mtClass) GrowableArray<ClassLoaderData*>(10, mtClass);\n@@ -92,1 +92,1 @@\n-    _constraints = new (ResourceObj::C_HEAP, mtClass) GrowableArray<LoaderConstraint*>(5, mtClass);\n+    _constraints = new (mtClass) GrowableArray<LoaderConstraint*>(5, mtClass);\n@@ -114,1 +114,1 @@\n-ResourceHashtable<SymbolHandle, ConstraintSet, 107, ResourceObj::C_HEAP, mtClass, SymbolHandle::compute_hash> _loader_constraint_table;\n+ResourceHashtable<SymbolHandle, ConstraintSet, 107, AnyObj::C_HEAP, mtClass, SymbolHandle::compute_hash> _loader_constraint_table;\n","filename":"src\/hotspot\/share\/classfile\/loaderConstraints.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -166,1 +166,1 @@\n-      _reads = new (ResourceObj::C_HEAP, mtModule) GrowableArray<ModuleEntry*>(MODULE_READS_SIZE, mtModule);\n+      _reads = new (mtModule) GrowableArray<ModuleEntry*>(MODULE_READS_SIZE, mtModule);\n@@ -386,1 +386,1 @@\n-  ResourceObj::C_HEAP> ArchivedModuleEntries;\n+  AnyObj::C_HEAP> ArchivedModuleEntries;\n@@ -395,1 +395,1 @@\n-    _archive_modules_entries = new (ResourceObj::C_HEAP, mtClass)ArchivedModuleEntries();\n+    _archive_modules_entries = new (mtClass)ArchivedModuleEntries();\n@@ -431,1 +431,1 @@\n-    array = new (ResourceObj::C_HEAP, mtModule)GrowableArray<ModuleEntry*>(length, mtModule);\n+    array = new (mtModule) GrowableArray<ModuleEntry*>(length, mtModule);\n","filename":"src\/hotspot\/share\/classfile\/moduleEntry.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -209,1 +209,1 @@\n-  ResourceHashtable<SymbolHandle, ModuleEntry*, 109, ResourceObj::C_HEAP, mtModule,\n+  ResourceHashtable<SymbolHandle, ModuleEntry*, 109, AnyObj::C_HEAP, mtModule,\n","filename":"src\/hotspot\/share\/classfile\/moduleEntry.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-    _qualified_exports = new (ResourceObj::C_HEAP, mtModule) GrowableArray<ModuleEntry*>(QUAL_EXP_SIZE, mtModule);\n+    _qualified_exports = new (mtModule) GrowableArray<ModuleEntry*>(QUAL_EXP_SIZE, mtModule);\n@@ -218,1 +218,1 @@\n-  ResourceObj::C_HEAP> ArchivedPackageEntries;\n+  AnyObj::C_HEAP> ArchivedPackageEntries;\n@@ -227,1 +227,1 @@\n-    _archived_packages_entries = new (ResourceObj::C_HEAP, mtClass)ArchivedPackageEntries();\n+    _archived_packages_entries = new (mtClass)ArchivedPackageEntries();\n","filename":"src\/hotspot\/share\/classfile\/packageEntry.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -240,1 +240,1 @@\n-  ResourceHashtable<SymbolHandle, PackageEntry*, 109, ResourceObj::C_HEAP, mtModule,\n+  ResourceHashtable<SymbolHandle, PackageEntry*, 109, AnyObj::C_HEAP, mtModule,\n","filename":"src\/hotspot\/share\/classfile\/packageEntry.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-ResourceHashtable<PlaceholderKey, PlaceholderEntry, _placeholder_table_size, ResourceObj::C_HEAP, mtClass,\n+ResourceHashtable<PlaceholderKey, PlaceholderEntry, _placeholder_table_size, AnyObj::C_HEAP, mtClass,\n","filename":"src\/hotspot\/share\/classfile\/placeholders.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-ResourceHashtable<WeakHandle, WeakHandle, 1009, ResourceObj::C_HEAP, mtClass,\n+ResourceHashtable<WeakHandle, WeakHandle, 1009, AnyObj::C_HEAP, mtClass,\n@@ -119,1 +119,1 @@\n-    _delete_list = new (ResourceObj::C_HEAP, mtClass)\n+    _delete_list = new (mtClass)\n","filename":"src\/hotspot\/share\/classfile\/protectionDomainCache.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-ResourceHashtable<uintptr_t, ResolutionErrorEntry*, 107, ResourceObj::C_HEAP, mtClass> _resolution_error_table;\n+ResourceHashtable<uintptr_t, ResolutionErrorEntry*, 107, AnyObj::C_HEAP, mtClass> _resolution_error_table;\n@@ -165,1 +165,0 @@\n-\n","filename":"src\/hotspot\/share\/classfile\/resolutionErrors.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -620,1 +620,1 @@\n-                              ResourceObj::C_HEAP, mtInternal,\n+                              AnyObj::C_HEAP, mtInternal,\n","filename":"src\/hotspot\/share\/classfile\/stringTable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -116,1 +116,1 @@\n-ResourceHashtable<InvokeMethodKey, Method*, 139, ResourceObj::C_HEAP, mtClass,\n+ResourceHashtable<InvokeMethodKey, Method*, 139, AnyObj::C_HEAP, mtClass,\n@@ -118,1 +118,1 @@\n-ResourceHashtable<SymbolHandle, OopHandle, 139, ResourceObj::C_HEAP, mtClass, SymbolHandle::compute_hash> _invoke_method_type_table;\n+ResourceHashtable<SymbolHandle, OopHandle, 139, AnyObj::C_HEAP, mtClass, SymbolHandle::compute_hash> _invoke_method_type_table;\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -431,1 +431,1 @@\n-  ResourceObj::C_HEAP> {};\n+  AnyObj::C_HEAP> {};\n@@ -444,1 +444,1 @@\n-    _unregistered_classes_table = new (ResourceObj::C_HEAP, mtClass)UnregisteredClassesTable();\n+    _unregistered_classes_table = new (mtClass)UnregisteredClassesTable();\n@@ -503,1 +503,1 @@\n-    _dumptime_table = new (ResourceObj::C_HEAP, mtClass) DumpTimeSharedClassTable;\n+    _dumptime_table = new (mtClass) DumpTimeSharedClassTable;\n@@ -505,1 +505,1 @@\n-                      new (ResourceObj::C_HEAP, mtClass) DumpTimeLambdaProxyClassDictionary;\n+                      new (mtClass) DumpTimeLambdaProxyClassDictionary;\n@@ -1500,1 +1500,1 @@\n-  _cloned_dumptime_table = new (ResourceObj::C_HEAP, mtClass) DumpTimeSharedClassTable;\n+  _cloned_dumptime_table = new (mtClass) DumpTimeSharedClassTable;\n@@ -1508,1 +1508,1 @@\n-                                        new (ResourceObj::C_HEAP, mtClass) DumpTimeLambdaProxyClassDictionary;\n+                                        new (mtClass) DumpTimeLambdaProxyClassDictionary;\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -174,4 +174,4 @@\n-GrowableArray<CodeHeap*>* CodeCache::_heaps = new(ResourceObj::C_HEAP, mtCode) GrowableArray<CodeHeap*> (static_cast<int>(CodeBlobType::All), mtCode);\n-GrowableArray<CodeHeap*>* CodeCache::_compiled_heaps = new(ResourceObj::C_HEAP, mtCode) GrowableArray<CodeHeap*> (static_cast<int>(CodeBlobType::All), mtCode);\n-GrowableArray<CodeHeap*>* CodeCache::_nmethod_heaps = new(ResourceObj::C_HEAP, mtCode) GrowableArray<CodeHeap*> (static_cast<int>(CodeBlobType::All), mtCode);\n-GrowableArray<CodeHeap*>* CodeCache::_allocable_heaps = new(ResourceObj::C_HEAP, mtCode) GrowableArray<CodeHeap*> (static_cast<int>(CodeBlobType::All), mtCode);\n+GrowableArray<CodeHeap*>* CodeCache::_heaps = new(mtCode) GrowableArray<CodeHeap*> (static_cast<int>(CodeBlobType::All), mtCode);\n+GrowableArray<CodeHeap*>* CodeCache::_compiled_heaps = new(mtCode) GrowableArray<CodeHeap*> (static_cast<int>(CodeBlobType::All), mtCode);\n+GrowableArray<CodeHeap*>* CodeCache::_nmethod_heaps = new(mtCode) GrowableArray<CodeHeap*> (static_cast<int>(CodeBlobType::All), mtCode);\n+GrowableArray<CodeHeap*>* CodeCache::_allocable_heaps = new(mtCode) GrowableArray<CodeHeap*> (static_cast<int>(CodeBlobType::All), mtCode);\n@@ -1280,1 +1280,1 @@\n-    old_compiled_method_table = new (ResourceObj::C_HEAP, mtCode) GrowableArray<CompiledMethod*>(100, mtCode);\n+    old_compiled_method_table = new (mtCode) GrowableArray<CompiledMethod*>(100, mtCode);\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-class ScopeValue: public ResourceObj {\n+class ScopeValue: public AnyObj {\n","filename":"src\/hotspot\/share\/code\/debugInfo.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2085,1 +2085,1 @@\n-                            ResourceObj::RESOURCE_AREA, mtInternal,\n+                            AnyObj::RESOURCE_AREA, mtInternal,\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-  template <class X> class IndexCache : public ResourceObj {\n+  template <class X> class IndexCache : public ArenaObj {\n","filename":"src\/hotspot\/share\/code\/oopRecorder.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-      phase_names = new (ResourceObj::C_HEAP, mtInternal) GrowableArray<const char*>(100, mtCompiler);\n+      phase_names = new (mtInternal) GrowableArray<const char*>(100, mtCompiler);\n","filename":"src\/hotspot\/share\/compiler\/compilerEvent.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -195,1 +195,1 @@\n-      ResourceObj::C_HEAP> SourceFileInfoTable;\n+      AnyObj::C_HEAP> SourceFileInfoTable;\n@@ -203,1 +203,1 @@\n-      _src_table = new (ResourceObj::C_HEAP, mtCode)SourceFileInfoTable();\n+      _src_table = new (mtCode)SourceFileInfoTable();\n@@ -268,1 +268,1 @@\n-          _cached_src_lines = new (ResourceObj::C_HEAP, mtCode)GrowableArray<const char*>(0, mtCode);\n+          _cached_src_lines = new (mtCode) GrowableArray<const char*>(0, mtCode);\n","filename":"src\/hotspot\/share\/compiler\/disassembler.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-class MethodLiveness : public ResourceObj {\n+class MethodLiveness : public ArenaObj {\n@@ -56,1 +56,1 @@\n-  class BasicBlock : public ResourceObj {\n+  class BasicBlock : public ArenaObj {\n","filename":"src\/hotspot\/share\/compiler\/methodLiveness.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -252,1 +252,1 @@\n-  GrowableArray<HeapRegion*> _allocated_regions;\n+  GrowableArrayCHeap<HeapRegion*, mtGC> _allocated_regions;\n@@ -268,3 +268,1 @@\n-    _allocated_regions((ResourceObj::set_allocation_type((address) &_allocated_regions,\n-                                                         ResourceObj::C_HEAP),\n-                        2), mtGC),\n+    _allocated_regions(2),\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Allocator.hpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1461,2 +1461,2 @@\n-  _gc_timer_stw(new (ResourceObj::C_HEAP, mtGC) STWGCTimer()),\n-  _gc_tracer_stw(new (ResourceObj::C_HEAP, mtGC) G1NewTracer()),\n+  _gc_timer_stw(new STWGCTimer()),\n+  _gc_tracer_stw(new G1NewTracer()),\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -394,2 +394,2 @@\n-  _gc_timer_cm(new (ResourceObj::C_HEAP, mtGC) ConcurrentGCTimer()),\n-  _gc_tracer_cm(new (ResourceObj::C_HEAP, mtGC) G1OldTracer()),\n+  _gc_timer_cm(new ConcurrentGCTimer()),\n+  _gc_tracer_cm(new G1OldTracer()),\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-  _compaction_regions = new (ResourceObj::C_HEAP, mtGC) GrowableArray<HeapRegion*>(32, mtGC);\n+  _compaction_regions = new (mtGC) GrowableArray<HeapRegion*>(32, mtGC);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactionPoint.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-  _regions(new (ResourceObj::C_HEAP, mtGC) GrowableArray<HeapRegion*>(8, mtGC)),\n+  _regions(new (mtGC) GrowableArray<HeapRegion*>(8, mtGC)),\n","filename":"src\/hotspot\/share\/gc\/g1\/g1SurvivorRegions.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-class G1NewTracer : public YoungGCTracer {\n+class G1NewTracer : public YoungGCTracer, public CHeapObj<mtGC> {\n@@ -89,1 +89,1 @@\n-class G1OldTracer : public OldGCTracer {\n+class G1OldTracer : public OldGCTracer, public CHeapObj<mtGC> {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Trace.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-  _lgrp_spaces = new (ResourceObj::C_HEAP, mtGC) GrowableArray<LGRPSpace*>(0, mtGC);\n+  _lgrp_spaces = new (mtGC) GrowableArray<LGRPSpace*>(0, mtGC);\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableNUMASpace.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-  _deferred_obj_array = new (ResourceObj::C_HEAP, mtGC) GrowableArray<HeapWord*>(10, mtGC);\n+  _deferred_obj_array = new (mtGC) GrowableArray<HeapWord*>(10, mtGC);\n@@ -92,1 +92,1 @@\n-  _shadow_region_array = new (ResourceObj::C_HEAP, mtGC) GrowableArray<size_t >(10, mtGC);\n+  _shadow_region_array = new (mtGC) GrowableArray<size_t >(10, mtGC);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psCompactionManager.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -188,1 +188,1 @@\n-  _gc_timer = new (ResourceObj::C_HEAP, mtGC) STWGCTimer();\n+  _gc_timer = new STWGCTimer();\n@@ -190,1 +190,1 @@\n-  _gc_tracer = new (ResourceObj::C_HEAP, mtGC) DefNewTracer();\n+  _gc_tracer = new DefNewTracer();\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -217,2 +217,2 @@\n-  MarkSweep::_gc_timer = new (ResourceObj::C_HEAP, mtGC) STWGCTimer();\n-  MarkSweep::_gc_tracer = new (ResourceObj::C_HEAP, mtGC) SerialOldTracer();\n+  MarkSweep::_gc_timer = new STWGCTimer();\n+  MarkSweep::_gc_tracer = new SerialOldTracer();\n","filename":"src\/hotspot\/share\/gc\/serial\/markSweep.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -117,1 +117,1 @@\n-  _phases = new (ResourceObj::C_HEAP, mtGC) GrowableArray<GCPhase>(INITIAL_CAPACITY, mtGC);\n+  _phases = new (mtGC) GrowableArray<GCPhase>(INITIAL_CAPACITY, mtGC);\n","filename":"src\/hotspot\/share\/gc\/shared\/gcTimer.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -139,1 +139,1 @@\n-class GCTimer : public ResourceObj {\n+class GCTimer {\n@@ -162,1 +162,1 @@\n-class STWGCTimer : public GCTimer {\n+class STWGCTimer : public GCTimer, public CHeapObj<mtGC> {\n@@ -168,1 +168,1 @@\n-class ConcurrentGCTimer : public GCTimer {\n+class ConcurrentGCTimer : public GCTimer, public CHeapObj<mtGC> {\n","filename":"src\/hotspot\/share\/gc\/shared\/gcTimer.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-class GCTracer : public ResourceObj {\n+class GCTracer {\n@@ -199,1 +199,1 @@\n-class SerialOldTracer : public OldGCTracer {\n+class SerialOldTracer : public OldGCTracer, public CHeapObj<mtGC> {\n@@ -209,1 +209,1 @@\n-class DefNewTracer : public YoungGCTracer {\n+class DefNewTracer : public YoungGCTracer, public CHeapObj<mtGC> {\n","filename":"src\/hotspot\/share\/gc\/shared\/gcTrace.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-class ShenandoahBarrierSetC2State : public ResourceObj {\n+class ShenandoahBarrierSetC2State : public ArenaObj {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahBarrierSetC2.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-  _tracer = new (ResourceObj::C_HEAP, mtGC) ShenandoahTracer();\n+  _tracer = new ShenandoahTracer();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectorPolicy.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-class ShenandoahTracer : public GCTracer {\n+class ShenandoahTracer : public GCTracer, public CHeapObj<mtGC> {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectorPolicy.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -482,1 +482,1 @@\n-  _gc_timer(new (ResourceObj::C_HEAP, mtGC) ConcurrentGCTimer()),\n+  _gc_timer(new ConcurrentGCTimer()),\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-class ZBarrierSetC2State : public ResourceObj {\n+class ZBarrierSetC2State : public ArenaObj {\n","filename":"src\/hotspot\/share\/gc\/z\/c2\/zBarrierSetC2.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-class ZLoadBarrierStubC2 : public ResourceObj {\n+class ZLoadBarrierStubC2 : public ArenaObj {\n","filename":"src\/hotspot\/share\/gc\/z\/c2\/zBarrierSetC2.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-  _tracer = new (ResourceObj::C_HEAP, mtGC) ZTracer();\n+  _tracer = new ZTracer();\n","filename":"src\/hotspot\/share\/gc\/z\/zTracer.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-class ZTracer : public GCTracer {\n+class ZTracer : public GCTracer, public CHeapObj<mtGC> {\n","filename":"src\/hotspot\/share\/gc\/z\/zTracer.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1281,2 +1281,2 @@\n-  _fingerprints = new(ResourceObj::C_HEAP, mtCode)GrowableArray<uint64_t>(32, mtCode);\n-  _handlers     = new(ResourceObj::C_HEAP, mtCode)GrowableArray<address>(32, mtCode);\n+  _fingerprints = new (mtCode) GrowableArray<uint64_t>(32, mtCode);\n+  _handlers     = new (mtCode) GrowableArray<address>(32, mtCode);\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -287,1 +287,1 @@\n-    _leak_context_edges = new (ResourceObj::C_HEAP, mtTracing)GrowableArray<const StoredEdge*>(initial_size, mtTracing);\n+    _leak_context_edges = new (mtTracing) GrowableArray<const StoredEdge*>(initial_size, mtTracing);\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/chains\/edgeStore.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-  return new (ResourceObj::C_HEAP, mtTracing) GrowableArray<T>(size, mtTracing);\n+  return new (mtTracing) GrowableArray<T>(size, mtTracing);\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/checkpoint\/objectSampleCheckpoint.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -272,1 +272,1 @@\n-  GrowableArray<jvmtiDeferredLocalVariableSet*>* const list = JvmtiDeferredUpdates::deferred_locals(jt);\n+  GrowableArrayView<jvmtiDeferredLocalVariableSet*>* const list = JvmtiDeferredUpdates::deferred_locals(jt);\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/checkpoint\/rootResolver.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-    _interfaces = new(ResourceObj::C_HEAP, mtTracing) GrowableArray<InterfaceEntry>(10, mtTracing);\n+    _interfaces = new (mtTracing) GrowableArray<InterfaceEntry>(10, mtTracing);\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrNetworkUtilization.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -266,1 +266,1 @@\n-  _list(new (ResourceObj::C_HEAP, mtTracing) GrowableArray<JfrThreadGroupEntry*>(initial_array_size, mtTracing)) {}\n+  _list(new (mtTracing) GrowableArray<JfrThreadGroupEntry*>(initial_array_size, mtTracing)) {}\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrThreadGroup.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -137,1 +137,1 @@\n-  dcmd_recordings_array = new (ResourceObj::C_HEAP, mtTracing)GrowableArray<JfrStartFlightRecordingDCmd*>(length, mtTracing);\n+  dcmd_recordings_array = new (mtTracing) GrowableArray<JfrStartFlightRecordingDCmd*>(length, mtTracing);\n@@ -140,1 +140,1 @@\n-    JfrStartFlightRecordingDCmd* const dcmd_recording = new(ResourceObj::C_HEAP, mtTracing) JfrStartFlightRecordingDCmd(tty, true);\n+    JfrStartFlightRecordingDCmd* const dcmd_recording = new (mtTracing) JfrStartFlightRecordingDCmd(tty, true);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/jfrRecorder.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -331,1 +331,1 @@\n-    _file_names = new (ResourceObj::C_HEAP, mtTracing) GrowableArray<const char*>(10, mtTracing);\n+    _file_names = new (mtTracing) GrowableArray<const char*>(10, mtTracing);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/repository\/jfrEmergencyDump.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -772,1 +772,1 @@\n-    start_flight_recording_options_array = new (ResourceObj::C_HEAP, mtTracing) GrowableArray<const char*>(8, mtTracing);\n+    start_flight_recording_options_array = new (mtTracing) GrowableArray<const char*>(8, mtTracing);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrOptionSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-    NodePtr node = new (ResourceObj::C_HEAP, mtTracing) Node();\n+    NodePtr node = new Node();\n@@ -86,1 +86,1 @@\n-  return node != NULL ? node : new (ResourceObj::C_HEAP, mtTracing) Node();\n+  return node != NULL ? node : new Node();\n","filename":"src\/hotspot\/share\/jfr\/recorder\/storage\/jfrFullStorage.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-  return new (ResourceObj::C_HEAP, mtTracing) GrowableArray<T>(size, mtTracing);\n+  return new (mtTracing) GrowableArray<T>(size, mtTracing);\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrJdkJfrEvent.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-  return new (ResourceObj::C_HEAP, mtTracing) GrowableArray<T>(size, mtTracing);\n+  return new (mtTracing) GrowableArray<T>(size, mtTracing);\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrKlassUnloading.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-class JfrLinkedNode : public ResourceObj {\n+class JfrLinkedNode {\n@@ -89,1 +89,1 @@\n-class JfrValueNode : public JfrLinkedNode<JfrValueNode<V> > {\n+class JfrValueNode : public JfrLinkedNode<JfrValueNode<V> >, public CHeapObj<mtTracing> {\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrNode.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -48,7 +48,7 @@\n-ConstantOopWriteValue* CodeInstaller::_oop_null_scope_value = new (ResourceObj::C_HEAP, mtJVMCI) ConstantOopWriteValue(NULL);\n-ConstantIntValue*      CodeInstaller::_int_m1_scope_value = new (ResourceObj::C_HEAP, mtJVMCI) ConstantIntValue(-1);\n-ConstantIntValue*      CodeInstaller::_int_0_scope_value =  new (ResourceObj::C_HEAP, mtJVMCI) ConstantIntValue((jint)0);\n-ConstantIntValue*      CodeInstaller::_int_1_scope_value =  new (ResourceObj::C_HEAP, mtJVMCI) ConstantIntValue(1);\n-ConstantIntValue*      CodeInstaller::_int_2_scope_value =  new (ResourceObj::C_HEAP, mtJVMCI) ConstantIntValue(2);\n-LocationValue*         CodeInstaller::_illegal_value = new (ResourceObj::C_HEAP, mtJVMCI) LocationValue(Location());\n-MarkerValue*           CodeInstaller::_virtual_byte_array_marker = new (ResourceObj::C_HEAP, mtJVMCI) MarkerValue();\n+ConstantOopWriteValue* CodeInstaller::_oop_null_scope_value = new (mtJVMCI) ConstantOopWriteValue(NULL);\n+ConstantIntValue*      CodeInstaller::_int_m1_scope_value = new (mtJVMCI) ConstantIntValue(-1);\n+ConstantIntValue*      CodeInstaller::_int_0_scope_value =  new (mtJVMCI) ConstantIntValue((jint)0);\n+ConstantIntValue*      CodeInstaller::_int_1_scope_value =  new (mtJVMCI) ConstantIntValue(1);\n+ConstantIntValue*      CodeInstaller::_int_2_scope_value =  new (mtJVMCI) ConstantIntValue(2);\n+LocationValue*         CodeInstaller::_illegal_value = new (mtJVMCI) LocationValue(Location());\n+MarkerValue*           CodeInstaller::_virtual_byte_array_marker = new (mtJVMCI) MarkerValue();\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCodeInstaller.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -294,1 +294,1 @@\n-                    256, ResourceObj::RESOURCE_AREA, mtInternal,\n+                    256, AnyObj::RESOURCE_AREA, mtInternal,\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVMInit.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-class Dict : public ResourceObj { \/\/ Dictionary structure\n+class Dict : public AnyObj { \/\/ Dictionary structure\n","filename":"src\/hotspot\/share\/libadt\/dict.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-class VectorSet : public ResourceObj {\n+class VectorSet : public AnyObj {\n","filename":"src\/hotspot\/share\/libadt\/vectset.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n-  AsyncLogMap<ResourceObj::RESOURCE_AREA> snapshot;\n+  AsyncLogMap<AnyObj::RESOURCE_AREA> snapshot;\n","filename":"src\/hotspot\/share\/logging\/logAsyncWriter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+\n@@ -63,1 +64,1 @@\n-  template <ResourceObj::allocation_type ALLOC_TYPE>\n+  template <AnyObj::allocation_type ALLOC_TYPE>\n@@ -158,1 +159,1 @@\n-  AsyncLogMap<ResourceObj::C_HEAP> _stats;\n+  AsyncLogMap<AnyObj::C_HEAP> _stats;\n","filename":"src\/hotspot\/share\/logging\/logAsyncWriter.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -107,1 +107,13 @@\n-void* ResourceObj::operator new(size_t size, Arena *arena) throw() {\n+\/\/\n+\/\/ ArenaObj\n+\/\/\n+\n+void* ArenaObj::operator new(size_t size, Arena *arena) throw() {\n+  return arena->Amalloc(size);\n+}\n+\n+\/\/\n+\/\/ AnyObj\n+\/\/\n+\n+void* AnyObj::operator new(size_t size, Arena *arena) throw() {\n@@ -113,14 +125,3 @@\n-void* ResourceObj::operator new(size_t size, allocation_type type, MEMFLAGS flags) throw() {\n-  address res = NULL;\n-  switch (type) {\n-   case C_HEAP:\n-    res = (address)AllocateHeap(size, flags, CALLER_PC);\n-    DEBUG_ONLY(set_allocation_type(res, C_HEAP);)\n-    break;\n-   case RESOURCE_AREA:\n-    \/\/ new(size) sets allocation type RESOURCE_AREA.\n-    res = (address)operator new(size);\n-    break;\n-   default:\n-    ShouldNotReachHere();\n-  }\n+void* AnyObj::operator new(size_t size, MEMFLAGS flags) throw() {\n+  address res = (address)AllocateHeap(size, flags, CALLER_PC);\n+  DEBUG_ONLY(set_allocation_type(res, C_HEAP);)\n@@ -130,2 +131,2 @@\n-void* ResourceObj::operator new(size_t size, const std::nothrow_t&  nothrow_constant,\n-    allocation_type type, MEMFLAGS flags) throw() {\n+void* AnyObj::operator new(size_t size, const std::nothrow_t&  nothrow_constant,\n+    MEMFLAGS flags) throw() {\n@@ -133,4 +134,1 @@\n-  address res = NULL;\n-  switch (type) {\n-   case C_HEAP:\n-    res = (address)AllocateHeap(size, flags, CALLER_PC, AllocFailStrategy::RETURN_NULL);\n+    address res = (address)AllocateHeap(size, flags, CALLER_PC, AllocFailStrategy::RETURN_NULL);\n@@ -138,8 +136,0 @@\n-    break;\n-   case RESOURCE_AREA:\n-    \/\/ new(size) sets allocation type RESOURCE_AREA.\n-    res = (address)operator new(size, std::nothrow);\n-    break;\n-   default:\n-    ShouldNotReachHere();\n-  }\n@@ -149,1 +139,1 @@\n-void ResourceObj::operator delete(void* p) {\n+void AnyObj::operator delete(void* p) {\n@@ -153,1 +143,1 @@\n-  assert(((ResourceObj *)p)->allocated_on_C_heap(),\n+  assert(((AnyObj *)p)->allocated_on_C_heap(),\n@@ -155,1 +145,1 @@\n-  DEBUG_ONLY(((ResourceObj *)p)->_allocation_t[0] = (uintptr_t)badHeapOopVal;)\n+  DEBUG_ONLY(((AnyObj *)p)->_allocation_t[0] = (uintptr_t)badHeapOopVal;)\n@@ -160,1 +150,1 @@\n-void ResourceObj::set_allocation_type(address res, allocation_type type) {\n+void AnyObj::set_allocation_type(address res, allocation_type type) {\n@@ -165,1 +155,1 @@\n-  ResourceObj* resobj = (ResourceObj *)res;\n+  AnyObj* resobj = (AnyObj *)res;\n@@ -173,1 +163,1 @@\n-ResourceObj::allocation_type ResourceObj::get_allocation_type() const {\n+AnyObj::allocation_type AnyObj::get_allocation_type() const {\n@@ -178,1 +168,1 @@\n-bool ResourceObj::is_type_set() const {\n+bool AnyObj::is_type_set() const {\n@@ -184,2 +174,2 @@\n-\/\/ This whole business of passing information from ResourceObj::operator new\n-\/\/ to the ResourceObj constructor via fields in the \"object\" is technically UB.\n+\/\/ This whole business of passing information from AnyObj::operator new\n+\/\/ to the AnyObj constructor via fields in the \"object\" is technically UB.\n@@ -188,2 +178,2 @@\n-\/\/ And it gives some possibly useful checking for misuse of ResourceObj.\n-void ResourceObj::initialize_allocation_info() {\n+\/\/ And it gives some possibly useful checking for misuse of AnyObj.\n+void AnyObj::initialize_allocation_info() {\n@@ -213,1 +203,1 @@\n-ResourceObj::ResourceObj() {\n+AnyObj::AnyObj() {\n@@ -217,1 +207,1 @@\n-ResourceObj::ResourceObj(const ResourceObj&) {\n+AnyObj::AnyObj(const AnyObj&) {\n@@ -222,1 +212,1 @@\n-ResourceObj& ResourceObj::operator=(const ResourceObj& r) {\n+AnyObj& AnyObj::operator=(const AnyObj& r) {\n@@ -230,1 +220,1 @@\n-ResourceObj::~ResourceObj() {\n+AnyObj::~AnyObj() {\n@@ -232,1 +222,1 @@\n-  if (!allocated_on_C_heap()) { \/\/ ResourceObj::delete() will zap _allocation for C_heap.\n+  if (!allocated_on_C_heap()) { \/\/ AnyObj::delete() will zap _allocation for C_heap.\n@@ -242,1 +232,1 @@\n-void ResourceObj::print() const       { print_on(tty); }\n+void AnyObj::print() const       { print_on(tty); }\n@@ -244,2 +234,2 @@\n-void ResourceObj::print_on(outputStream* st) const {\n-  st->print_cr(\"ResourceObj(\" PTR_FORMAT \")\", p2i(this));\n+void AnyObj::print_on(outputStream* st) const {\n+  st->print_cr(\"AnyObj(\" PTR_FORMAT \")\", p2i(this));\n","filename":"src\/hotspot\/share\/memory\/allocation.cpp","additions":38,"deletions":48,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -428,0 +428,31 @@\n+\/\/----------------------------------------------------------------------\n+\/\/ Base class for objects allocated in the resource area.\n+class ResourceObj {\n+ public:\n+  void* operator new(size_t size) throw() {\n+    return resource_allocate_bytes(size);\n+  }\n+\n+  void* operator new(size_t size, const std::nothrow_t& nothrow_constant) throw() {\n+    return resource_allocate_bytes(size, AllocFailStrategy::RETURN_NULL);\n+  }\n+\n+  void* operator new [](size_t size) throw() = delete;\n+  void* operator new [](size_t size, const std::nothrow_t& nothrow_constant) throw() = delete;\n+\n+  void  operator delete(void* p) = delete;\n+  void  operator delete [](void* p) = delete;\n+};\n+\n+class ArenaObj {\n+ public:\n+  void* operator new(size_t size, Arena *arena) throw();\n+  void* operator new [](size_t size, Arena *arena) throw() = delete;\n+\n+  void* operator new [](size_t size) throw() = delete;\n+  void* operator new [](size_t size, const std::nothrow_t& nothrow_constant) throw() = delete;\n+\n+  void  operator delete(void* p) = delete;\n+  void  operator delete [](void* p) = delete;\n+};\n+\n@@ -431,2 +462,2 @@\n-\/\/ new(ResourceObj::C_HEAP) Foo(...) or in an Arena with new (&arena)\n-\/\/ ResourceObj's can be allocated within other objects, but don't use\n+\/\/ new (AnyObj::C_HEAP) Foo(...) or in an Arena with new (&arena).\n+\/\/ AnyObj's can be allocated within other objects, but don't use\n@@ -435,1 +466,1 @@\n-class ResourceObj {\n+class AnyObj {\n@@ -455,4 +486,4 @@\n-  ResourceObj(); \/\/ default constructor\n-  ResourceObj(const ResourceObj& r); \/\/ default copy constructor\n-  ResourceObj& operator=(const ResourceObj& r); \/\/ default copy assignment\n-  ~ResourceObj();\n+  AnyObj(); \/\/ default constructor\n+  AnyObj(const AnyObj& r); \/\/ default copy constructor\n+  AnyObj& operator=(const AnyObj& r); \/\/ default copy assignment\n+  ~AnyObj();\n@@ -462,6 +493,7 @@\n-  void* operator new(size_t size, allocation_type type, MEMFLAGS flags) throw();\n-  void* operator new [](size_t size, allocation_type type, MEMFLAGS flags) throw() = delete;\n-  void* operator new(size_t size, const std::nothrow_t&  nothrow_constant,\n-      allocation_type type, MEMFLAGS flags) throw();\n-  void* operator new [](size_t size, const std::nothrow_t&  nothrow_constant,\n-      allocation_type type, MEMFLAGS flags) throw() = delete;\n+  \/\/ CHeap allocations\n+  void* operator new(size_t size, MEMFLAGS flags) throw();\n+  void* operator new [](size_t size, MEMFLAGS flags) throw() = delete;\n+  void* operator new(size_t size, const std::nothrow_t&  nothrow_constant, MEMFLAGS flags) throw();\n+  void* operator new [](size_t size, const std::nothrow_t&  nothrow_constant, MEMFLAGS flags) throw() = delete;\n+\n+  \/\/ Arena allocations\n@@ -471,0 +503,1 @@\n+  \/\/ Resource allocations\n@@ -472,3 +505,3 @@\n-      address res = (address)resource_allocate_bytes(size);\n-      DEBUG_ONLY(set_allocation_type(res, RESOURCE_AREA);)\n-      return res;\n+    address res = (address)resource_allocate_bytes(size);\n+    DEBUG_ONLY(set_allocation_type(res, RESOURCE_AREA);)\n+    return res;\n@@ -476,1 +509,0 @@\n-\n@@ -478,3 +510,3 @@\n-      address res = (address)resource_allocate_bytes(size, AllocFailStrategy::RETURN_NULL);\n-      DEBUG_ONLY(if (res != NULL) set_allocation_type(res, RESOURCE_AREA);)\n-      return res;\n+    address res = (address)resource_allocate_bytes(size, AllocFailStrategy::RETURN_NULL);\n+    DEBUG_ONLY(if (res != NULL) set_allocation_type(res, RESOURCE_AREA);)\n+    return res;\n","filename":"src\/hotspot\/share\/memory\/allocation.hpp","additions":52,"deletions":20,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-    _subclasses = new  (ResourceObj::C_HEAP, mtServiceability) GrowableArray<KlassInfoEntry*>(4, mtServiceability);\n+    _subclasses = new (mtServiceability) GrowableArray<KlassInfoEntry*>(4, mtServiceability);\n@@ -282,1 +282,1 @@\n-  _elements = new (ResourceObj::C_HEAP, mtServiceability) GrowableArray<KlassInfoEntry*>(_histo_initial_size, mtServiceability);\n+  _elements = new (mtServiceability) GrowableArray<KlassInfoEntry*>(_histo_initial_size, mtServiceability);\n","filename":"src\/hotspot\/share\/memory\/heapInspection.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -112,6 +112,0 @@\n-  void* operator new(size_t size, ResourceObj::allocation_type type, MEMFLAGS flags) throw() {\n-        return ResourceObj::operator new(size, type, flags);\n-  }\n-  void* operator new(size_t size, Arena *arena) throw() {\n-        return ResourceObj::operator new(size, arena);\n-  }\n@@ -119,1 +113,1 @@\n-        return ResourceObj::operator new(size);\n+    return resource_allocate_bytes(size);\n","filename":"src\/hotspot\/share\/memory\/memRegion.hpp","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -388,1 +388,1 @@\n-  ResizeableResourceHashtable<address, bool, ResourceObj::C_HEAP,\n+  ResizeableResourceHashtable<address, bool, AnyObj::C_HEAP,\n","filename":"src\/hotspot\/share\/memory\/metaspaceClosure.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -890,1 +890,1 @@\n-    ResourceHashtable<const Symbol*, u2, 256, ResourceObj::C_HEAP, mtSymbol, Symbol::compute_hash> _table;\n+    ResourceHashtable<const Symbol*, u2, 256, AnyObj::C_HEAP, mtSymbol, Symbol::compute_hash> _table;\n","filename":"src\/hotspot\/share\/oops\/constantPool.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -967,1 +967,1 @@\n-ResourceHashtable<const InstanceKlass*, OopHandle, 107, ResourceObj::C_HEAP, mtClass>\n+ResourceHashtable<const InstanceKlass*, OopHandle, 107, AnyObj::C_HEAP, mtClass>\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-class Block_Array : public ResourceObj {\n+class Block_Array : public ArenaObj {\n@@ -92,1 +92,1 @@\n-class CFGElement : public ResourceObj {\n+class CFGElement : public AnyObj {\n","filename":"src\/hotspot\/share\/opto\/block.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-struct OopFlow : public ResourceObj {\n+struct OopFlow : public ArenaObj {\n","filename":"src\/hotspot\/share\/opto\/buildOopMap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-class CallGenerator : public ResourceObj {\n+class CallGenerator : public ArenaObj {\n@@ -97,1 +97,1 @@\n-    return ResourceObj::operator new(size, C->comp_arena());\n+    return ArenaObj::operator new(size, C->comp_arena());\n","filename":"src\/hotspot\/share\/opto\/callGenerator.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -131,1 +131,1 @@\n-class PointsToNode : public ResourceObj {\n+class PointsToNode : public ArenaObj {\n@@ -320,1 +320,1 @@\n-class ConnectionGraph: public ResourceObj {\n+class ConnectionGraph: public ArenaObj {\n","filename":"src\/hotspot\/share\/opto\/escape.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1519,1 +1519,1 @@\n-class Node_Array : public ResourceObj {\n+class Node_Array : public AnyObj {\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-  struct C2SafepointPollStub: public ResourceObj {\n+  struct C2SafepointPollStub: public ArenaObj {\n@@ -118,1 +118,1 @@\n-class C2EntryBarrierStub: public ResourceObj {\n+class C2EntryBarrierStub: public ArenaObj {\n","filename":"src\/hotspot\/share\/opto\/output.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-class InlineTree : public ResourceObj {\n+class InlineTree : public AnyObj {\n@@ -271,1 +271,1 @@\n-  class BytecodeParseHistogram : public ResourceObj {\n+  class BytecodeParseHistogram : public ArenaObj {\n","filename":"src\/hotspot\/share\/opto\/parse.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-class DepEdge : public ResourceObj {\n+class DepEdge : public ArenaObj {\n@@ -95,1 +95,1 @@\n-class DepMem : public ResourceObj {\n+class DepMem : public ArenaObj {\n@@ -631,1 +631,1 @@\n-class SWPointer : public ResourceObj {\n+class SWPointer : public ArenaObj {\n","filename":"src\/hotspot\/share\/opto\/superword.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -176,1 +176,1 @@\n-  _global_code_blobs = new (ResourceObj::C_HEAP, mtServiceability) GrowableArray<JvmtiCodeBlobDesc*>(50, mtServiceability);\n+  _global_code_blobs = new (mtServiceability) GrowableArray<JvmtiCodeBlobDesc*>(50, mtServiceability);\n","filename":"src\/hotspot\/share\/prims\/jvmtiCodeBlobEvents.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -135,2 +135,2 @@\n-    _deferred_locals_updates((ResourceObj::set_allocation_type((address) &_deferred_locals_updates,\n-                              ResourceObj::C_HEAP), 1), mtCompiler) { }\n+    _deferred_locals_updates((AnyObj::set_allocation_type((address) &_deferred_locals_updates,\n+                             AnyObj::C_HEAP), 1), mtCompiler) { }\n","filename":"src\/hotspot\/share\/prims\/jvmtiDeferredUpdates.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1361,1 +1361,1 @@\n-      new (ResourceObj::C_HEAP, mtServiceability) GrowableArray<jvmtiMonitorStackDepthInfo*>(1, mtServiceability);\n+      new (mtServiceability) GrowableArray<jvmtiMonitorStackDepthInfo*>(1, mtServiceability);\n@@ -1434,1 +1434,1 @@\n-         new (ResourceObj::C_HEAP, mtServiceability) GrowableArray<jvmtiMonitorStackDepthInfo*>(1, mtServiceability);\n+         new (mtServiceability) GrowableArray<jvmtiMonitorStackDepthInfo*>(1, mtServiceability);\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnv.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1682,1 +1682,1 @@\n-  _allocations = new (ResourceObj::C_HEAP, mtServiceability) GrowableArray<unsigned char*>(20, mtServiceability);\n+  _allocations = new (mtServiceability) GrowableArray<unsigned char*>(20, mtServiceability);\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvBase.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -98,1 +98,1 @@\n-  _pops = new (ResourceObj::C_HEAP, mtServiceability) GrowableArray<int> (2, mtServiceability);\n+  _pops = new (mtServiceability) GrowableArray<int> (2, mtServiceability);\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvThreadState.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3125,1 +3125,1 @@\n-   _code_blobs = new (ResourceObj::C_HEAP, mtServiceability) GrowableArray<JvmtiCodeBlobDesc*>(1, mtServiceability);\n+   _code_blobs = new (mtServiceability) GrowableArray<JvmtiCodeBlobDesc*>(1, mtServiceability);\n@@ -3154,1 +3154,1 @@\n-    _allocated = new (ResourceObj::C_HEAP, mtServiceability) GrowableArray<OopHandle>(1, mtServiceability);\n+    _allocated = new (mtServiceability) GrowableArray<OopHandle>(1, mtServiceability);\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -173,2 +173,2 @@\n-  _ext_functions = new (ResourceObj::C_HEAP, mtServiceability) GrowableArray<jvmtiExtensionFunctionInfo*>(1, mtServiceability);\n-  _ext_events = new (ResourceObj::C_HEAP, mtServiceability) GrowableArray<jvmtiExtensionEventInfo*>(1, mtServiceability);\n+  _ext_functions = new (mtServiceability) GrowableArray<jvmtiExtensionFunctionInfo*>(1, mtServiceability);\n+  _ext_events = new (mtServiceability) GrowableArray<jvmtiExtensionEventInfo*>(1, mtServiceability);\n","filename":"src\/hotspot\/share\/prims\/jvmtiExtensions.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -150,1 +150,1 @@\n-  _elements       = new (ResourceObj::C_HEAP, mtServiceability) GrowableArray<GrowableElement*>(5, mtServiceability);\n+  _elements       = new (mtServiceability) GrowableArray<GrowableElement*>(5, mtServiceability);\n","filename":"src\/hotspot\/share\/prims\/jvmtiImpl.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-  new (ResourceObj::C_HEAP, mtServiceability) GrowableArray<JvmtiRawMonitor*>(1, mtServiceability);\n+  new (mtServiceability) GrowableArray<JvmtiRawMonitor*>(1, mtServiceability);\n","filename":"src\/hotspot\/share\/prims\/jvmtiRawMonitor.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-    redef_classes = new(ResourceObj::C_HEAP, mtClass) GrowableArray<Klass*>(1, mtClass);\n+    redef_classes = new (mtClass) GrowableArray<Klass*>(1, mtClass);\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -451,1 +451,1 @@\n-  _fields = new (ResourceObj::C_HEAP, mtServiceability)\n+  _fields = new (mtServiceability)\n@@ -586,1 +586,1 @@\n-    _class_list = new (ResourceObj::C_HEAP, mtServiceability)\n+    _class_list = new (mtServiceability)\n@@ -1266,2 +1266,2 @@\n-    _object_results(new (ResourceObj::C_HEAP, mtServiceability) GrowableArray<jobject>(1, mtServiceability)),\n-    _tag_results(new (ResourceObj::C_HEAP, mtServiceability) GrowableArray<uint64_t>(1, mtServiceability)) { }\n+    _object_results(new (mtServiceability) GrowableArray<jobject>(1, mtServiceability)),\n+    _tag_results(new (mtServiceability) GrowableArray<uint64_t>(1, mtServiceability)) { }\n@@ -2284,1 +2284,1 @@\n-    return new (ResourceObj::C_HEAP, mtServiceability) GrowableArray<oop>(initial_visit_stack_size, mtServiceability);\n+    return new (mtServiceability) GrowableArray<oop>(initial_visit_stack_size, mtServiceability);\n","filename":"src\/hotspot\/share\/prims\/jvmtiTagMap.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2946,1 +2946,1 @@\n-    _patch_mod_prefix = new (ResourceObj::C_HEAP, mtArguments) GrowableArray<ModulePatchPath*>(10, mtArguments);\n+    _patch_mod_prefix = new (mtArguments) GrowableArray<ModulePatchPath*>(10, mtArguments);\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-  GrowableArray<jvmtiDeferredLocalVariableSet*>* list = JvmtiDeferredUpdates::deferred_locals(thread);\n+  GrowableArrayView<jvmtiDeferredLocalVariableSet*>* list = JvmtiDeferredUpdates::deferred_locals(thread);\n@@ -306,1 +306,1 @@\n-  GrowableArray<jvmtiDeferredLocalVariableSet*>* list =\n+  GrowableArrayView<jvmtiDeferredLocalVariableSet*>* list =\n","filename":"src\/hotspot\/share\/runtime\/escapeBarrier.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1256,4 +1256,4 @@\n-    _oops = new (ResourceObj::C_HEAP, mtThread) GrowableArray<oop*>(100, mtThread);\n-    _narrow_oops = new (ResourceObj::C_HEAP, mtThread) GrowableArray<narrowOop*>(100, mtThread);\n-    _base = new (ResourceObj::C_HEAP, mtThread) GrowableArray<oop*>(100, mtThread);\n-    _derived = new (ResourceObj::C_HEAP, mtThread) GrowableArray<derived_pointer*>(100, mtThread);\n+    _oops = new (mtThread) GrowableArray<oop*>(100, mtThread);\n+    _narrow_oops = new (mtThread) GrowableArray<narrowOop*>(100, mtThread);\n+    _base = new (mtThread) GrowableArray<oop*>(100, mtThread);\n+    _derived = new (mtThread) GrowableArray<derived_pointer*>(100, mtThread);\n","filename":"src\/hotspot\/share\/runtime\/frame.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -204,1 +204,0 @@\n-    assert(allocated_on_res_area(), \"invariant\");\n","filename":"src\/hotspot\/share\/runtime\/os_perf.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -567,1 +567,1 @@\n-  _set = new(ResourceObj::C_HEAP, mtInternal) PerfDataArray(length, mtInternal);\n+  _set = new (mtInternal) PerfDataArray(length, mtInternal);\n@@ -572,1 +572,1 @@\n-  _set = new(ResourceObj::C_HEAP, mtInternal) PerfDataArray(p->length(), mtInternal);\n+  _set = new (mtInternal) PerfDataArray(p->length(), mtInternal);\n","filename":"src\/hotspot\/share\/runtime\/perfData.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-  new (ResourceObj::C_HEAP, mtServiceability) GrowableArray<FilteredField*>(3, mtServiceability);\n+  new (mtServiceability) GrowableArray<FilteredField*>(3, mtServiceability);\n","filename":"src\/hotspot\/share\/runtime\/reflectionUtils.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2681,1 +2681,1 @@\n-                  ResourceObj::C_HEAP, mtCode,\n+                  AnyObj::C_HEAP, mtCode,\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-                        ResourceObj::C_HEAP, mtThread,\n+                        AnyObj::C_HEAP, mtThread,\n@@ -87,1 +87,1 @@\n-    list = new (ResourceObj::C_HEAP, mtThread) ObjectMonitorsHashtable::PtrList;\n+    list = new (mtThread) ObjectMonitorsHashtable::PtrList;\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-  typedef ResourceHashtable<void*, PtrList*, 1031, ResourceObj::C_HEAP, mtThread,\n+  typedef ResourceHashtable<void*, PtrList*, 1031, AnyObj::C_HEAP, mtThread,\n@@ -66,1 +66,1 @@\n-  ObjectMonitorsHashtable() : _ptrs(new (ResourceObj::C_HEAP, mtThread) PtrTable), _key_count(0), _om_count(0) {}\n+  ObjectMonitorsHashtable() : _ptrs(new (mtThread) PtrTable), _key_count(0), _om_count(0) {}\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-  set_metadata_handles(new (ResourceObj::C_HEAP, mtClass) GrowableArray<Metadata*>(30, mtClass));\n+  set_metadata_handles(new (mtClass) GrowableArray<Metadata*>(30, mtClass));\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -198,1 +198,1 @@\n-                            ResourceObj::C_HEAP, mtThread,\n+                            AnyObj::C_HEAP, mtThread,\n@@ -206,1 +206,1 @@\n-  ThreadScanHashtable() : _ptrs(new (ResourceObj::C_HEAP, mtThread) PtrTable()) {}\n+  ThreadScanHashtable() : _ptrs(new (mtThread) PtrTable()) {}\n","filename":"src\/hotspot\/share\/runtime\/threadSMR.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-  _oop_list = new (ResourceObj::C_HEAP, mtThread)\n+  _oop_list = new (mtThread)\n","filename":"src\/hotspot\/share\/runtime\/unhandledOops.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -287,1 +287,1 @@\n-  GrowableArray<jvmtiDeferredLocalVariableSet*>* list = JvmtiDeferredUpdates::deferred_locals(thread());\n+  GrowableArrayView<jvmtiDeferredLocalVariableSet*>* list = JvmtiDeferredUpdates::deferred_locals(thread());\n@@ -416,1 +416,1 @@\n-  _locals = new(ResourceObj::C_HEAP, mtCompiler) GrowableArray<jvmtiDeferredLocalVariable*> (1, mtCompiler);\n+  _locals = new(mtCompiler) GrowableArray<jvmtiDeferredLocalVariable*> (1, mtCompiler);\n","filename":"src\/hotspot\/share\/runtime\/vframe_hp.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-  _array = new (ResourceObj::C_HEAP, mtServiceability) GrowableArray<char *>(32, mtServiceability);\n+  _array = new (mtServiceability) GrowableArray<char *>(32, mtServiceability);\n","filename":"src\/hotspot\/share\/services\/diagnosticArgument.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -239,1 +239,1 @@\n-class DCmd : public ResourceObj {\n+class DCmd : public AnyObj {\n","filename":"src\/hotspot\/share\/services\/diagnosticFramework.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-  GCStatInfo* stat = new(ResourceObj::C_HEAP, mtGC) GCStatInfo(num_pools);\n+  GCStatInfo* stat = new GCStatInfo(num_pools);\n","filename":"src\/hotspot\/share\/services\/gcNotifier.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1924,1 +1924,1 @@\n-    _klass_map = new (ResourceObj::C_HEAP, mtServiceability) GrowableArray<Klass*>(INITIAL_CLASS_COUNT, mtServiceability);\n+    _klass_map = new (mtServiceability) GrowableArray<Klass*>(INITIAL_CLASS_COUNT, mtServiceability);\n","filename":"src\/hotspot\/share\/services\/heapDumper.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -206,2 +206,2 @@\n-  _last_gc_stat = new(ResourceObj::C_HEAP, mtGC) GCStatInfo(MemoryService::num_memory_pools());\n-  _current_gc_stat = new(ResourceObj::C_HEAP, mtGC) GCStatInfo(MemoryService::num_memory_pools());\n+  _last_gc_stat = new GCStatInfo(MemoryService::num_memory_pools());\n+  _current_gc_stat = new GCStatInfo(MemoryService::num_memory_pools());\n","filename":"src\/hotspot\/share\/services\/memoryManager.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-class GCStatInfo : public ResourceObj {\n+class GCStatInfo : public CHeapObj<mtGC> {\n","filename":"src\/hotspot\/share\/services\/memoryManager.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-  new (ResourceObj::C_HEAP, mtServiceability) GrowableArray<MemoryPool*>(init_pools_list_size, mtServiceability);\n+  new (mtServiceability) GrowableArray<MemoryPool*>(init_pools_list_size, mtServiceability);\n@@ -49,1 +49,1 @@\n-  new (ResourceObj::C_HEAP, mtServiceability) GrowableArray<MemoryManager*>(init_managers_list_size, mtServiceability);\n+  new (mtServiceability) GrowableArray<MemoryManager*>(init_managers_list_size, mtServiceability);\n@@ -53,1 +53,1 @@\n-    new (ResourceObj::C_HEAP, mtServiceability) GrowableArray<MemoryPool*>(init_code_heap_pools_size, mtServiceability);\n+    new (mtServiceability) GrowableArray<MemoryPool*>(init_code_heap_pools_size, mtServiceability);\n","filename":"src\/hotspot\/share\/services\/memoryService.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -607,1 +607,1 @@\n-      _locked_monitors = new (ResourceObj::C_HEAP, mtServiceability) GrowableArray<OopHandle>(length, mtServiceability);\n+      _locked_monitors = new (mtServiceability) GrowableArray<OopHandle>(length, mtServiceability);\n@@ -659,1 +659,1 @@\n-  _frames = new (ResourceObj::C_HEAP, mtServiceability) GrowableArray<StackFrameInfo*>(INITIAL_ARRAY_SIZE, mtServiceability);\n+  _frames = new (mtServiceability) GrowableArray<StackFrameInfo*>(INITIAL_ARRAY_SIZE, mtServiceability);\n@@ -663,1 +663,1 @@\n-    _jni_locked_monitors = new (ResourceObj::C_HEAP, mtServiceability) GrowableArray<OopHandle>(INITIAL_ARRAY_SIZE, mtServiceability);\n+    _jni_locked_monitors = new (mtServiceability) GrowableArray<OopHandle>(INITIAL_ARRAY_SIZE, mtServiceability);\n@@ -804,1 +804,1 @@\n-  GrowableArray<oop>* aos_objects = new (ResourceObj::C_HEAP, mtServiceability) GrowableArray<oop>(INITIAL_ARRAY_SIZE, mtServiceability);\n+  GrowableArray<oop>* aos_objects = new (mtServiceability) GrowableArray<oop>(INITIAL_ARRAY_SIZE, mtServiceability);\n@@ -878,1 +878,1 @@\n-  _owned_locks = new (ResourceObj::C_HEAP, mtServiceability) GrowableArray<OopHandle>(INITIAL_ARRAY_SIZE, mtServiceability);\n+  _owned_locks = new (mtServiceability) GrowableArray<OopHandle>(INITIAL_ARRAY_SIZE, mtServiceability);\n@@ -1001,1 +1001,1 @@\n-  _threads = new (ResourceObj::C_HEAP, mtServiceability) GrowableArray<JavaThread*>(INITIAL_ARRAY_SIZE, mtServiceability);\n+  _threads = new (mtServiceability) GrowableArray<JavaThread*>(INITIAL_ARRAY_SIZE, mtServiceability);\n","filename":"src\/hotspot\/share\/services\/threadService.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-    _simple_thread_stacks = new (std::nothrow, ResourceObj::C_HEAP, mtNMT)\n+    _simple_thread_stacks = new (std::nothrow, mtNMT)\n","filename":"src\/hotspot\/share\/services\/threadStackTracker.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -326,1 +326,1 @@\n-    _reserved_regions = new (std::nothrow, ResourceObj::C_HEAP, mtNMT)\n+    _reserved_regions = new (std::nothrow, mtNMT)\n","filename":"src\/hotspot\/share\/services\/virtualMemoryTracker.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-class GrowableArrayBase : public ResourceObj {\n+class GrowableArrayBase : public AnyObj {\n@@ -754,1 +754,1 @@\n-    return ResourceObj::operator new(size, ResourceObj::C_HEAP, F);\n+    return AnyObj::operator new(size, F);\n@@ -758,1 +758,1 @@\n-    return ResourceObj::operator new(size, nothrow_constant, ResourceObj::C_HEAP, F);\n+    return AnyObj::operator new(size, nothrow_constant, F);\n","filename":"src\/hotspot\/share\/utilities\/growableArray.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-template <class E> class LinkedListNode : public ResourceObj {\n+template <class E> class LinkedListNode : public AnyObj {\n@@ -82,1 +82,1 @@\n-template <class E> class LinkedList : public ResourceObj {\n+template <class E> class LinkedList : public AnyObj {\n@@ -135,1 +135,1 @@\n-  DEBUG_ONLY(virtual ResourceObj::allocation_type storage_type() = 0;)\n+  DEBUG_ONLY(virtual AnyObj::allocation_type storage_type() = 0;)\n@@ -140,1 +140,1 @@\n-template <class E, ResourceObj::allocation_type T = ResourceObj::C_HEAP,\n+template <class E, AnyObj::allocation_type T = AnyObj::C_HEAP,\n@@ -328,1 +328,1 @@\n-  DEBUG_ONLY(ResourceObj::allocation_type storage_type() { return T; })\n+  DEBUG_ONLY(AnyObj::allocation_type storage_type() { return T; })\n@@ -333,1 +333,1 @@\n-       case ResourceObj::ARENA: {\n+       case AnyObj::ARENA: {\n@@ -337,2 +337,1 @@\n-       case ResourceObj::RESOURCE_AREA:\n-       case ResourceObj::C_HEAP: {\n+       case AnyObj::RESOURCE_AREA:\n@@ -340,1 +339,1 @@\n-           return new(std::nothrow, T, F) LinkedListNode<E>(e);\n+           return new(std::nothrow) LinkedListNode<E>(e);\n@@ -342,1 +341,7 @@\n-           return new(T, F) LinkedListNode<E>(e);\n+           return new LinkedListNode<E>(e);\n+         }\n+       case AnyObj::C_HEAP: {\n+         if (alloc_failmode == AllocFailStrategy::RETURN_NULL) {\n+           return new(std::nothrow, F) LinkedListNode<E>(e);\n+         } else {\n+           return new(F) LinkedListNode<E>(e);\n@@ -353,1 +358,1 @@\n-    if (T == ResourceObj::C_HEAP) {\n+    if (T == AnyObj::C_HEAP) {\n@@ -362,1 +367,1 @@\n-  ResourceObj::allocation_type T = ResourceObj::C_HEAP,\n+  AnyObj::allocation_type T = AnyObj::C_HEAP,\n","filename":"src\/hotspot\/share\/utilities\/linkedlist.hpp","additions":17,"deletions":12,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-  typedef ResizeableResourceHashtable<uintptr_t, CHeapBitMap*, ResourceObj::C_HEAP, F,\n+  typedef ResizeableResourceHashtable<uintptr_t, CHeapBitMap*, AnyObj::C_HEAP, F,\n","filename":"src\/hotspot\/share\/utilities\/objectBitSet.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-    ResourceObj::allocation_type ALLOC_TYPE,\n+    AnyObj::allocation_type ALLOC_TYPE,\n@@ -34,1 +34,1 @@\n-class ResizeableResourceHashtableStorage : public ResourceObj {\n+class ResizeableResourceHashtableStorage : public AnyObj {\n@@ -74,1 +74,1 @@\n-    ResourceObj::allocation_type ALLOC_TYPE = ResourceObj::RESOURCE_AREA,\n+    AnyObj::allocation_type ALLOC_TYPE = AnyObj::RESOURCE_AREA,\n@@ -128,1 +128,1 @@\n-    if (ALLOC_TYPE == ResourceObj::C_HEAP) {\n+    if (ALLOC_TYPE == AnyObj::C_HEAP) {\n","filename":"src\/hotspot\/share\/utilities\/resizeableResourceHash.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-class ResourceHashtableNode : public ResourceObj {\n+class ResourceHashtableNode : public AnyObj {\n@@ -52,1 +52,1 @@\n-    ResourceObj::allocation_type ALLOC_TYPE,\n+    AnyObj::allocation_type ALLOC_TYPE,\n@@ -100,1 +100,1 @@\n-    if (ALLOC_TYPE == ResourceObj::C_HEAP) {\n+    if (ALLOC_TYPE == AnyObj::C_HEAP) {\n@@ -145,1 +145,5 @@\n-      *ptr = new (ALLOC_TYPE, MEM_TYPE) Node(hv, key, value);\n+      if (ALLOC_TYPE == AnyObj::C_HEAP) {\n+        *ptr = new (MEM_TYPE) Node(hv, key, value);\n+      } else {\n+        *ptr = new Node(hv, key, value);\n+      }\n@@ -160,1 +164,5 @@\n-      *ptr = new (ALLOC_TYPE, MEM_TYPE) Node(hv, key);\n+      if (ALLOC_TYPE == AnyObj::C_HEAP) {\n+        *ptr = new (MEM_TYPE) Node(hv, key);\n+      } else {\n+        *ptr = new Node(hv, key);\n+      }\n@@ -178,1 +186,5 @@\n-      *ptr = new (ALLOC_TYPE, MEM_TYPE) Node(hv, key, value);\n+      if (ALLOC_TYPE == AnyObj::C_HEAP) {\n+        *ptr = new (MEM_TYPE) Node(hv, key, value);\n+      } else {\n+        *ptr = new Node(hv, key, value);\n+      }\n@@ -195,1 +207,1 @@\n-      if (ALLOC_TYPE == ResourceObj::C_HEAP) {\n+      if (ALLOC_TYPE == AnyObj::C_HEAP) {\n@@ -254,1 +266,1 @@\n-          if (ALLOC_TYPE == ResourceObj::C_HEAP) {\n+          if (ALLOC_TYPE == AnyObj::C_HEAP) {\n@@ -288,1 +300,1 @@\n-class FixedResourceHashtableStorage : public ResourceObj {\n+class FixedResourceHashtableStorage : public AnyObj {\n@@ -308,1 +320,1 @@\n-    ResourceObj::allocation_type ALLOC_TYPE = ResourceObj::RESOURCE_AREA,\n+    AnyObj::allocation_type ALLOC_TYPE = AnyObj::RESOURCE_AREA,\n","filename":"src\/hotspot\/share\/utilities\/resourceHash.hpp","additions":22,"deletions":10,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -346,1 +346,1 @@\n-      GrowableArray<int>* a = new (ResourceObj::C_HEAP, mtTest) GrowableArray<int>(max, mtTest);\n+      GrowableArray<int>* a = new (mtTest) GrowableArray<int>(max, mtTest);\n@@ -442,1 +442,1 @@\n-    GrowableArray<int>* a = new (ResourceObj::C_HEAP, mtTest) GrowableArray<int>(0, mtTest);\n+    GrowableArray<int>* a = new (mtTest) GrowableArray<int>(0, mtTest);\n","filename":"test\/hotspot\/gtest\/utilities\/test_growableArray.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-  LinkedListImpl<Integer, ResourceObj::C_HEAP, mtTest> ll;\n+  LinkedListImpl<Integer, AnyObj::C_HEAP, mtTest> ll;\n@@ -105,2 +105,2 @@\n-  typedef LinkedListImpl<Integer, ResourceObj::C_HEAP, mtTest> list_t;\n-  LinkedList<Integer>* list = new(ResourceObj::C_HEAP, mtTest) list_t();\n+  typedef LinkedListImpl<Integer, AnyObj::C_HEAP, mtTest> list_t;\n+  LinkedList<Integer>* list = new (mtTest) list_t();\n@@ -152,1 +152,1 @@\n-  LinkedListImpl<Integer, ResourceObj::C_HEAP, mtTest> ll;\n+  LinkedListImpl<Integer, AnyObj::C_HEAP, mtTest> ll;\n@@ -166,1 +166,1 @@\n-  LinkedListImpl<Integer, ResourceObj::C_HEAP, mtTest> ll;\n+  LinkedListImpl<Integer, AnyObj::C_HEAP, mtTest> ll;\n@@ -174,1 +174,1 @@\n-  SortedLinkedList<Integer, Integer::compare, ResourceObj::C_HEAP, mtTest> sl;\n+  SortedLinkedList<Integer, Integer::compare, AnyObj::C_HEAP, mtTest> sl;\n","filename":"test\/hotspot\/gtest\/utilities\/test_linkedlist.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-  ResourceObj::allocation_type ALLOC_TYPE = ResourceObj::RESOURCE_AREA\n+  AnyObj::allocation_type ALLOC_TYPE = AnyObj::RESOURCE_AREA\n@@ -191,1 +191,1 @@\n-  Runner<primitive_hash<K>, primitive_equals<K>, 512, ResourceObj::C_HEAP>::test(0x1);\n+  Runner<primitive_hash<K>, primitive_equals<K>, 512, AnyObj::C_HEAP>::test(0x1);\n@@ -195,1 +195,1 @@\n-  Runner<primitive_hash<K>, primitive_equals<K>, 512, ResourceObj::C_HEAP>::test(0x10);\n+  Runner<primitive_hash<K>, primitive_equals<K>, 512, AnyObj::C_HEAP>::test(0x10);\n@@ -199,1 +199,1 @@\n-  Runner<bad_hash, primitive_equals<K>, 512, ResourceObj::C_HEAP>::test(0x1);\n+  Runner<bad_hash, primitive_equals<K>, 512, AnyObj::C_HEAP>::test(0x1);\n@@ -203,1 +203,1 @@\n-  Runner<bad_hash, primitive_equals<K>, 512, ResourceObj::C_HEAP>::test(0x10);\n+  Runner<bad_hash, primitive_equals<K>, 512, AnyObj::C_HEAP>::test(0x10);\n@@ -207,1 +207,1 @@\n-  Runner<identity_hash, primitive_equals<K>, 1, ResourceObj::C_HEAP>::test(0x1);\n+  Runner<identity_hash, primitive_equals<K>, 1, AnyObj::C_HEAP>::test(0x1);\n@@ -211,1 +211,1 @@\n-  Runner<identity_hash, primitive_equals<K>, 1, ResourceObj::C_HEAP>::test(0x10);\n+  Runner<identity_hash, primitive_equals<K>, 1, AnyObj::C_HEAP>::test(0x10);\n@@ -221,1 +221,1 @@\n-  ResourceObj::allocation_type ALLOC_TYPE = ResourceObj::RESOURCE_AREA\n+  AnyObj::allocation_type ALLOC_TYPE = AnyObj::RESOURCE_AREA\n@@ -282,1 +282,1 @@\n-  Runner<primitive_hash<K>, primitive_equals<K>, 512, ResourceObj::C_HEAP>::test();\n+  Runner<primitive_hash<K>, primitive_equals<K>, 512, AnyObj::C_HEAP>::test();\n@@ -286,1 +286,1 @@\n-  Runner<bad_hash, primitive_equals<K>, 512, ResourceObj::C_HEAP>::test();\n+  Runner<bad_hash, primitive_equals<K>, 512, AnyObj::C_HEAP>::test();\n@@ -290,1 +290,1 @@\n-  Runner<identity_hash, primitive_equals<K>, 1, ResourceObj::C_HEAP>::test(512);\n+  Runner<identity_hash, primitive_equals<K>, 1, AnyObj::C_HEAP>::test(512);\n@@ -298,1 +298,1 @@\n-    ResourceHashtable<SymbolHandle, int, 107, ResourceObj::C_HEAP, mtTest, SymbolHandle::compute_hash> _simple_test_table;\n+    ResourceHashtable<SymbolHandle, int, 107, AnyObj::C_HEAP, mtTest, SymbolHandle::compute_hash> _simple_test_table;\n@@ -352,1 +352,1 @@\n-    ResourceHashtable<Symbol*, TestValue, 107, ResourceObj::C_HEAP, mtTest> _test_table;\n+    ResourceHashtable<Symbol*, TestValue, 107, AnyObj::C_HEAP, mtTest> _test_table;\n@@ -366,1 +366,1 @@\n-    ResourceHashtable<Symbol*, TestValue*, 107, ResourceObj::C_HEAP, mtTest> _ptr_test_table;\n+    ResourceHashtable<Symbol*, TestValue*, 107, AnyObj::C_HEAP, mtTest> _ptr_test_table;\n@@ -444,1 +444,1 @@\n-    ResourceHashtable<int, TestValue*, 30, ResourceObj::C_HEAP, mtTest> _test_table;\n+    ResourceHashtable<int, TestValue*, 30, AnyObj::C_HEAP, mtTest> _test_table;\n","filename":"test\/hotspot\/gtest\/utilities\/test_resourceHash.cpp","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"}]}