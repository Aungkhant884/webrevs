{"files":[{"patch":"@@ -392,14 +392,1 @@\n-  CardValue val = *p;\n-\n-  if (card_is_dirty(val))\n-    return true;\n-\n-  if (card_is_newgen(val))\n-    return true;\n-\n-  if (card_is_clean(val))\n-    return false;\n-\n-  assert(false, \"Found unhandled card mark type\");\n-\n-  return false;\n+  return is_dirty(p);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psCardTable.cpp","additions":1,"deletions":14,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -66,5 +66,0 @@\n-  enum ExtendedCardValue {\n-    youngergen_card   = CT_MR_BS_last_reserved + 1,\n-    verify_card       = CT_MR_BS_last_reserved + 5\n-  };\n-\n@@ -80,3 +75,0 @@\n-  static CardValue youngergen_card_val() { return youngergen_card; }\n-  static CardValue verify_card_val()     { return verify_card; }\n-\n@@ -95,8 +87,0 @@\n-  void set_card_newgen(void* addr)   { CardValue* p = byte_for(addr); *p = verify_card; }\n-\n-  \/\/ Testers for entries\n-  static bool card_is_dirty(int value)      { return value == dirty_card; }\n-  static bool card_is_newgen(int value)     { return value == youngergen_card; }\n-  static bool card_is_clean(int value)      { return value == clean_card; }\n-  static bool card_is_verify(int value)     { return value == verify_card; }\n-\n@@ -106,1 +90,1 @@\n-    *byte = youngergen_card;\n+    *byte = dirty_card_val();\n@@ -112,6 +96,0 @@\n-#ifdef ASSERT\n-  bool is_valid_card_address(CardValue* addr) {\n-    return (addr >= _byte_map) && (addr < _byte_map + _byte_map_size);\n-  }\n-#endif \/\/ ASSERT\n-\n","filename":"src\/hotspot\/share\/gc\/parallel\/psCardTable.hpp","additions":1,"deletions":23,"binary":false,"changes":24,"status":"modified"}]}