{"files":[{"patch":"@@ -28,1 +28,1 @@\n-#include \"memory\/allStatic.hpp\"\n+#include <type_traits>\n@@ -33,9 +33,2 @@\n-template <bool condition, typename TrueType, typename FalseType>\n-struct Conditional: AllStatic {\n-  typedef TrueType type;\n-};\n-\n-template <typename TrueType, typename FalseType>\n-struct Conditional<false, TrueType, FalseType>: AllStatic {\n-  typedef FalseType type;\n-};\n+template <bool Condition, typename TrueType, typename FalseType>\n+using Conditional = std::conditional<Condition, TrueType, FalseType>;\n","filename":"src\/hotspot\/share\/metaprogramming\/conditional.hpp","additions":3,"deletions":10,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -28,3 +28,1 @@\n-#include \"memory\/allStatic.hpp\"\n-#include \"metaprogramming\/removeCV.hpp\"\n-#include \"metaprogramming\/removeReference.hpp\"\n+#include <type_traits>\n@@ -33,3 +31,0 @@\n-\/\/ This trait provides a subset of the functionality of std::decay;\n-\/\/ array types and function types are not supported here.\n-\n@@ -37,3 +32,1 @@\n-struct Decay: AllStatic {\n-  typedef typename RemoveCV<typename RemoveReference<T>::type>::type type;\n-};\n+using Decay = std::decay<T>;\n","filename":"src\/hotspot\/share\/metaprogramming\/decay.hpp","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"metaprogramming\/logical.hpp\"\n@@ -34,2 +33,2 @@\n-template<bool cond, typename T = void>\n-using EnableIf = std::enable_if<cond, T>;\n+template <bool Condition, typename T = void>\n+using EnableIf = std::enable_if<Condition, T>;\n","filename":"src\/hotspot\/share\/metaprogramming\/enableIf.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include <type_traits>\n@@ -45,7 +46,2 @@\n-template<typename T, T v>\n-struct IntegralConstant {\n-  typedef T value_type;\n-  static const value_type value = v;\n-  typedef IntegralConstant<T, v> type;\n-  operator value_type() { return value; }\n-};\n+template<typename T, T V>\n+using IntegralConstant = std::integral_constant<T, V>;\n@@ -54,1 +50,1 @@\n-typedef IntegralConstant<bool, true> TrueType;\n+using TrueType = std::true_type;\n@@ -57,1 +53,1 @@\n-typedef IntegralConstant<bool, false> FalseType;\n+using FalseType = std::false_type;\n","filename":"src\/hotspot\/share\/metaprogramming\/integralConstant.hpp","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-template <typename T> struct IsArray: public FalseType {};\n+#include <type_traits>\n@@ -32,2 +32,2 @@\n-template <typename T> struct IsArray<T[]>: public TrueType {};\n-template <typename T, size_t S> struct IsArray<T[S]>: public TrueType {};\n+template <typename T>\n+using IsArray = std::is_array<T>;\n","filename":"src\/hotspot\/share\/metaprogramming\/isArray.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,2 +30,4 @@\n-template <typename T> struct IsConst: public FalseType {};\n-template <typename T> struct IsConst<const T>: public TrueType {};\n+#include <type_traits>\n+\n+template <typename T>\n+using IsConst = std::is_const<T>;\n","filename":"src\/hotspot\/share\/metaprogramming\/isConst.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+#include <type_traits>\n+\n@@ -33,16 +35,2 @@\n-template <typename T> struct IsFloatingPoint: public FalseType {};\n-\n-template <> struct IsFloatingPoint<float>: public TrueType {};\n-template <> struct IsFloatingPoint<const float>: public TrueType {};\n-template <> struct IsFloatingPoint<volatile float>: public TrueType {};\n-template <> struct IsFloatingPoint<const volatile float>: public TrueType {};\n-\n-template <> struct IsFloatingPoint<double>: public TrueType {};\n-template <> struct IsFloatingPoint<const double>: public TrueType {};\n-template <> struct IsFloatingPoint<volatile double>: public TrueType {};\n-template <> struct IsFloatingPoint<const volatile double>: public TrueType {};\n-\n-template <> struct IsFloatingPoint<long double>: public TrueType {};\n-template <> struct IsFloatingPoint<const long double>: public TrueType {};\n-template <> struct IsFloatingPoint<volatile long double>: public TrueType {};\n-template <> struct IsFloatingPoint<const volatile long double>: public TrueType {};\n+template <typename T>\n+using IsFloatingPoint = std::is_floating_point<T>;\n","filename":"src\/hotspot\/share\/metaprogramming\/isFloatingPoint.hpp","additions":4,"deletions":16,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -31,2 +31,2 @@\n-#include \"metaprogramming\/removeCV.hpp\"\n-#include <limits>\n+\n+#include <type_traits>\n@@ -38,3 +38,1 @@\n-struct IsIntegral\n-  : public IntegralConstant<bool, std::numeric_limits<typename RemoveCV<T>::type>::is_integer>\n-{};\n+using IsIntegral = std::is_integral<T>;\n","filename":"src\/hotspot\/share\/metaprogramming\/isIntegral.hpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+#include <type_traits>\n+\n@@ -33,6 +35,2 @@\n-template <typename T> class IsPointer: public FalseType {};\n-\n-template <typename T> class IsPointer<T*>: public TrueType {};\n-template <typename T> class IsPointer<T* const>: public TrueType {};\n-template <typename T> class IsPointer<T* volatile>: public TrueType {};\n-template <typename T> class IsPointer<T* const volatile>: public TrueType {};\n+template <typename T>\n+using IsPointer = std::is_pointer<T>;\n","filename":"src\/hotspot\/share\/metaprogramming\/isPointer.hpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+#include <type_traits>\n+\n@@ -33,4 +35,1 @@\n-struct IsSame: public FalseType {};\n-\n-template <typename X>\n-struct IsSame<X, X>: public TrueType {};\n+using IsSame = std::is_same<X, Y>;\n","filename":"src\/hotspot\/share\/metaprogramming\/isSame.hpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n-#include \"metaprogramming\/removeCV.hpp\"\n-#include <limits>\n+\n+#include <type_traits>\n@@ -33,3 +33,1 @@\n-struct IsSigned\n-  : public IntegralConstant<bool, std::numeric_limits<typename RemoveCV<T>::type>::is_signed>\n-{};\n+using IsSigned = std::is_signed<T>;\n","filename":"src\/hotspot\/share\/metaprogramming\/isSigned.hpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -30,2 +30,4 @@\n-template <typename T> struct IsVolatile: public FalseType {};\n-template <typename T> struct IsVolatile<volatile T>: public TrueType {};\n+#include <type_traits>\n+\n+template <typename T>\n+using IsVolatile = std::is_volatile<T>;\n","filename":"src\/hotspot\/share\/metaprogramming\/isVolatile.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-#include \"memory\/allStatic.hpp\"\n+#include <type_traits>\n@@ -31,18 +31,1 @@\n-struct RemoveCV: AllStatic {\n-  typedef T type;\n-};\n-\n-template <typename T>\n-struct RemoveCV<const T>: AllStatic {\n-  typedef T type;\n-};\n-\n-template <typename T>\n-struct RemoveCV<volatile T>: AllStatic {\n-  typedef T type;\n-};\n-\n-template <typename T>\n-struct RemoveCV<const volatile T>: AllStatic {\n-  typedef T type;\n-};\n+using RemoveCV = std::remove_cv<T>;\n","filename":"src\/hotspot\/share\/metaprogramming\/removeCV.hpp","additions":2,"deletions":19,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-#include \"memory\/allStatic.hpp\"\n+#include <type_traits>\n@@ -30,4 +30,2 @@\n-template <typename T> struct RemoveExtent: AllStatic { typedef T type; };\n-\n-template <typename T> struct RemoveExtent<T[]>: AllStatic { typedef T type; };\n-template <typename T, size_t S> struct RemoveExtent<T[S]>: AllStatic { typedef T type; };\n+template <typename T>\n+using RemoveExtent = std::remove_extent<T>;\n","filename":"src\/hotspot\/share\/metaprogramming\/removeExtent.hpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-#include \"memory\/allStatic.hpp\"\n+#include <type_traits>\n@@ -34,6 +34,2 @@\n-template <typename T> struct RemovePointer: AllStatic { typedef T type; };\n-\n-template <typename T> struct RemovePointer<T*>: AllStatic { typedef T type; };\n-template <typename T> struct RemovePointer<T* const>: AllStatic { typedef T type; };\n-template <typename T> struct RemovePointer<T* volatile>: AllStatic { typedef T type; };\n-template <typename T> struct RemovePointer<T* const volatile>: AllStatic { typedef T type; };\n+template <typename T>\n+using RemovePointer = std::remove_pointer<T>;\n","filename":"src\/hotspot\/share\/metaprogramming\/removePointer.hpp","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-#include \"memory\/allStatic.hpp\"\n+#include <type_traits>\n@@ -34,3 +34,2 @@\n-template <typename T> struct RemoveReference: AllStatic { typedef T type; };\n-\n-template <typename T> struct RemoveReference<T&>: AllStatic { typedef T type; };\n+template <typename T>\n+using RemoveReference = std::remove_reference<T>;\n","filename":"src\/hotspot\/share\/metaprogramming\/removeReference.hpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"}]}