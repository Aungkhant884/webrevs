{"files":[{"patch":"@@ -84,0 +84,1 @@\n+JVM_GetClassFileVersion\n","filename":"make\/data\/hotspot-symbols\/symbols-unix","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1162,0 +1162,6 @@\n+\/*\n+ * Core reflection support.\n+ *\/\n+JNIEXPORT jint JNICALL\n+JVM_GetClassFileVersion(JNIEnv *env, jclass current);\n+\n","filename":"src\/hotspot\/share\/include\/jvm.h","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4047,0 +4047,19 @@\n+\n+\/*\n+ * Return the current class's class file version.  The low order 16 bits of the\n+ * returned jint contain the class's major version.  The high order 16 bits\n+ * contain the class's minor version.\n+ *\/\n+JVM_ENTRY(jint, JVM_GetClassFileVersion(JNIEnv* env, jclass current))\n+  oop mirror = JNIHandles::resolve_non_null(current);\n+  if (java_lang_Class::is_primitive(mirror)) {\n+    \/\/ return latest major version and minor version of 0.\n+    return JVM_CLASSFILE_MAJOR_VERSION;\n+  }\n+  assert(!java_lang_Class::as_Klass(mirror)->is_array_klass(), \"unexpected array class\");\n+\n+  Klass* c = java_lang_Class::as_Klass(mirror);\n+  assert(c->is_instance_klass(), \"must be\");\n+  InstanceKlass* ik = InstanceKlass::cast(c);\n+  return (ik->minor_version() << 16) | ik->major_version();\n+JVM_END\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -4671,0 +4671,30 @@\n+\n+    \/*\n+     * Return the class's major and minor class file version packed into an int.\n+     * The high order 16 bits contain the class's minor version.  The low order\n+     * 16 bits contain the class's major version.\n+     *\n+     * If the class is an array type then the class file version of its element\n+     * type is returned.  If the class is a primitive type then the latest class\n+     * file major version is returned and zero is returned for the minor version.\n+     *\/\n+    private int getClassFileVersion() {\n+        Class<?> c = isArray() ? elementType() : this;\n+        return c.getClassFileVersion0();\n+    }\n+\n+    private native int getClassFileVersion0();\n+\n+    \/*\n+     * Return the access flags as they were in the class's bytecode, including\n+     * the original setting of ACC_SUPER.\n+     *\n+     * If the class is an array type then the access flags of the element type is\n+     * returned.  If the class is a primitive then ACC_ABSTRACT | ACC_FINAL | ACC_PUBLIC.\n+     *\/\n+    private int getClassAccessFlagsRaw() {\n+        Class<?> c = isArray() ? elementType() : this;\n+        return c.getClassAccessFlagsRaw0();\n+    }\n+\n+    private native int getClassAccessFlagsRaw0();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1994, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1994, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -85,0 +85,2 @@\n+    {\"getClassFileVersion0\", \"()I\",         (void *)&JVM_GetClassFileVersion},\n+    {\"getClassAccessFlagsRaw0\", \"()I\",      (void *)&JVM_GetClassAccessFlags},\n","filename":"src\/java.base\/share\/native\/libjava\/Class.c","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8291360\n+ * @summary Test getting a class's raw access flags using java.lang.Class API\n+ * @modules java.base\/java.lang:open\n+ * @compile classAccessFlagsRaw.jcod\n+ * @run main\/othervm ClassAccessFlagsRawTest\n+ *\/\n+\n+import java.lang.reflect.*;\n+\n+public class ClassAccessFlagsRawTest {\n+\n+    static Method m;\n+\n+    public static void testIt(String className, int expectedResult) throws Exception {\n+        Class<?> testClass = Class.forName(className);\n+        int flags = (int)m.invoke(testClass);\n+        if (flags != expectedResult) {\n+            throw new RuntimeException(\n+                \"expected 0x\" + Integer.toHexString(expectedResult) + \", got 0x\" + Integer.toHexString(flags) + \" for class \" + className);\n+        }\n+    }\n+\n+    public static void main(String argv[]) throws Throwable {\n+        Class<?> cl = java.lang.Class.class;\n+        m = cl.getDeclaredMethod(\"getClassAccessFlagsRaw\", new Class[0]);\n+        m.setAccessible(true);\n+\n+        testIt(\"SUPERset\", 0x21);  \/\/ ACC_SUPER 0x20 + ACC_PUBLIC 0x1\n+        testIt(\"SUPERnotset\", Modifier.PUBLIC);\n+\n+        \/\/ test primitive array.  should return ACC_ABSTRACT | ACC_FINAL | ACC_PUBLIC.\n+        int flags = (int)m.invoke((new int[3]).getClass());\n+        if (flags != (Modifier.ABSTRACT | Modifier.FINAL | Modifier.PUBLIC)) {\n+            throw new RuntimeException(\n+                \"expected 0x411, got 0x\" + Integer.toHexString(flags) + \" for primitive array\");\n+        }\n+\n+        \/\/ test object array.  should return flags of component.\n+        flags = (int)m.invoke((new SUPERnotset[2]).getClass());\n+        if (flags != Modifier.PUBLIC) {\n+            throw new RuntimeException(\n+                \"expected 0x1, got 0x\" + Integer.toHexString(flags) + \" for object array\");\n+        }\n+\n+        \/\/ test multi-dimensional object array.  should return flags of component.\n+        flags = (int)m.invoke((new SUPERnotset[4][2]).getClass());\n+        if (flags != Modifier.PUBLIC) {\n+            throw new RuntimeException(\n+                \"expected 0x1, got 0x\" + Integer.toHexString(flags) + \" for object array\");\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassFile\/ClassAccessFlagsRawTest.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"},{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8291360\n+ * @summary Test getting the class file version for java.lang.Class API\n+ * @modules java.base\/java.lang:open\n+ * @compile classFileVersions.jcod\n+ * @run main\/othervm --enable-preview ClassFileVersionTest\n+ *\/\n+\n+import java.lang.reflect.*;\n+\n+public class ClassFileVersionTest {\n+\n+    static Method m;\n+\n+    public static void testIt(String className, int expectedResult) throws Exception {\n+        Class<?> testClass = Class.forName(className);\n+        int ver = (int)m.invoke(testClass);\n+        if (ver != expectedResult) {\n+            int exp_minor = (expectedResult >> 16) & 0x0000FFFF;\n+            int exp_major = expectedResult & 0x0000FFFF;\n+            int got_minor = (ver >> 16) & 0x0000FFFF;\n+            int got_major = ver & 0x0000FFFF;\n+            throw new RuntimeException(\n+                \"Expected \" + exp_major + \":\" + exp_minor + \" but got \" + got_major + \":\" + got_minor);\n+        }\n+    }\n+\n+    public static void main(String argv[]) throws Throwable {\n+        Class<?> cl = java.lang.Class.class;\n+        m = cl.getDeclaredMethod(\"getClassFileVersion\", new Class[0]);\n+        m.setAccessible(true);\n+\n+        testIt(\"Version64\", 64);\n+        testIt(\"Version59\", 59);\n+        testIt(\"Version45_3\", 0x3002D);  \/\/ 45.3\n+        \/\/ test minor version of 65535.\n+        testIt(\"Version64_65535\", 0xFFFF0040);  \/\/ 0xFFFF0040 = 64.65535\n+\n+        \/\/ test primitive array.  should return latest version.\n+        int ver = (int)m.invoke((new int[3]).getClass());\n+        if (ver != 64) {\n+            int got_minor = (ver >> 16) & 0x0000FFFF;\n+            int got_major = ver & 0x0000FFFF;\n+            throw new RuntimeException(\n+                \"Expected 64:0, but got \" + got_major + \":\" + got_minor + \" for primitive array\");\n+        }\n+\n+        \/\/ test object array.  should return class file version of component.\n+        ver = (int)m.invoke((new Version59[2]).getClass());\n+        if (ver != 59) {\n+            int got_minor = (ver >> 16) & 0x0000FFFF;\n+            int got_major = ver & 0x0000FFFF;\n+            throw new RuntimeException(\n+                \"Expected 59:0, but got \" + got_major + \":\" + got_minor + \" for object array\");\n+        }\n+\n+        \/\/ test multi-dimensional object array.  should return class file version of component.\n+        ver = (int)m.invoke((new Version59[3][2]).getClass());\n+        if (ver != 59) {\n+            int got_minor = (ver >> 16) & 0x0000FFFF;\n+            int got_major = ver & 0x0000FFFF;\n+            throw new RuntimeException(\n+                \"Expected 59:0, but got \" + got_major + \":\" + got_minor + \" for object array\");\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassFile\/ClassFileVersionTest.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"},{"patch":"@@ -0,0 +1,202 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/\/ Class with ACC_SUPER set\n+class SUPERset {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  64; \/\/ version\n+  [14] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1     at 0x0A\n+    class #4; \/\/ #2     at 0x0F\n+    NameAndType #5 #6; \/\/ #3     at 0x12\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4     at 0x17\n+    Utf8 \"<init>\"; \/\/ #5     at 0x2A\n+    Utf8 \"()V\"; \/\/ #6     at 0x33\n+    class #8; \/\/ #7     at 0x39\n+    Utf8 \"SUPERset\"; \/\/ #8     at 0x3C\n+    Utf8 \"Code\"; \/\/ #9     at 0x48\n+    Utf8 \"LineNumberTable\"; \/\/ #10     at 0x4F\n+    Utf8 \"hi\"; \/\/ #11     at 0x61\n+    Utf8 \"SourceFile\"; \/\/ #12     at 0x66\n+    Utf8 \"SUPERset.java\"; \/\/ #13     at 0x73\n+  } \/\/ Constant Pool\n+\n+  0x0021; \/\/ access [ ACC_PUBLIC ACC_SUPER ]\n+  #7;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [0] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [0] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [2] { \/\/ Methods\n+    {  \/\/ method at 0x90\n+      0x0001; \/\/ access\n+      #5; \/\/ name_index       : <init>\n+      #6; \/\/ descriptor_index : ()V\n+      [1] { \/\/ Attributes\n+        Attr(#9, 29) { \/\/ Code at 0x98\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[5]{\n+            0x2AB70001B1;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#10, 6) { \/\/ LineNumberTable at 0xAF\n+              [1] { \/\/ line_number_table\n+                0  1; \/\/  at 0xBB\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method at 0xBB\n+      0x0009; \/\/ access\n+      #11; \/\/ name_index       : hi\n+      #6; \/\/ descriptor_index : ()V\n+      [1] { \/\/ Attributes\n+        Attr(#9, 25) { \/\/ Code at 0xC3\n+          0; \/\/ max_stack\n+          0; \/\/ max_locals\n+          Bytes[1]{\n+            0xB1;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#10, 6) { \/\/ LineNumberTable at 0xD6\n+              [1] { \/\/ line_number_table\n+                0  2; \/\/  at 0xE2\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [1] { \/\/ Attributes\n+    Attr(#12, 2) { \/\/ SourceFile at 0xE4\n+      #13;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class SUPERset\n+\n+\n+\/\/ Class with ACC_SUPER not set\n+class SUPERnotset {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  64; \/\/ version\n+  [14] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1     at 0x0A\n+    class #4; \/\/ #2     at 0x0F\n+    NameAndType #5 #6; \/\/ #3     at 0x12\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4     at 0x17\n+    Utf8 \"<init>\"; \/\/ #5     at 0x2A\n+    Utf8 \"()V\"; \/\/ #6     at 0x33\n+    class #8; \/\/ #7     at 0x39\n+    Utf8 \"SUPERnotset\"; \/\/ #8     at 0x3C\n+    Utf8 \"Code\"; \/\/ #9     at 0x48\n+    Utf8 \"LineNumberTable\"; \/\/ #10     at 0x4F\n+    Utf8 \"hi\"; \/\/ #11     at 0x61\n+    Utf8 \"SourceFile\"; \/\/ #12     at 0x66\n+    Utf8 \"SUPERnotset.java\"; \/\/ #13     at 0x73\n+  } \/\/ Constant Pool\n+\n+  0x0001; \/\/ access [ ACC_PUBLIC ]\n+  #7;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [0] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [0] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [2] { \/\/ Methods\n+    {  \/\/ method at 0x90\n+      0x0001; \/\/ access\n+      #5; \/\/ name_index       : <init>\n+      #6; \/\/ descriptor_index : ()V\n+      [1] { \/\/ Attributes\n+        Attr(#9, 29) { \/\/ Code at 0x98\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[5]{\n+            0x2AB70001B1;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#10, 6) { \/\/ LineNumberTable at 0xAF\n+              [1] { \/\/ line_number_table\n+                0  1; \/\/  at 0xBB\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method at 0xBB\n+      0x0009; \/\/ access\n+      #11; \/\/ name_index       : hi\n+      #6; \/\/ descriptor_index : ()V\n+      [1] { \/\/ Attributes\n+        Attr(#9, 25) { \/\/ Code at 0xC3\n+          0; \/\/ max_stack\n+          0; \/\/ max_locals\n+          Bytes[1]{\n+            0xB1;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#10, 6) { \/\/ LineNumberTable at 0xD6\n+              [1] { \/\/ line_number_table\n+                0  2; \/\/  at 0xE2\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [1] { \/\/ Attributes\n+    Attr(#12, 2) { \/\/ SourceFile at 0xE4\n+      #13;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class SUPERnotset\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassFile\/classAccessFlagsRaw.jcod","additions":202,"deletions":0,"binary":false,"changes":202,"status":"added"},{"patch":"@@ -0,0 +1,382 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/\/ Class with major version 64 and minor version 0\n+class Version64 {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  64; \/\/ version\n+  [14] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1     at 0x0A\n+    class #4; \/\/ #2     at 0x0F\n+    NameAndType #5 #6; \/\/ #3     at 0x12\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4     at 0x17\n+    Utf8 \"<init>\"; \/\/ #5     at 0x2A\n+    Utf8 \"()V\"; \/\/ #6     at 0x33\n+    class #8; \/\/ #7     at 0x39\n+    Utf8 \"Version64\"; \/\/ #8     at 0x3C\n+    Utf8 \"Code\"; \/\/ #9     at 0x48\n+    Utf8 \"LineNumberTable\"; \/\/ #10     at 0x4F\n+    Utf8 \"hi\"; \/\/ #11     at 0x61\n+    Utf8 \"SourceFile\"; \/\/ #12     at 0x66\n+    Utf8 \"Version64.java\"; \/\/ #13     at 0x73\n+  } \/\/ Constant Pool\n+\n+  0x0021; \/\/ access [ ACC_PUBLIC ACC_SUPER ]\n+  #7;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [0] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [0] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [2] { \/\/ Methods\n+    {  \/\/ method at 0x90\n+      0x0001; \/\/ access\n+      #5; \/\/ name_index       : <init>\n+      #6; \/\/ descriptor_index : ()V\n+      [1] { \/\/ Attributes\n+        Attr(#9, 29) { \/\/ Code at 0x98\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[5]{\n+            0x2AB70001B1;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#10, 6) { \/\/ LineNumberTable at 0xAF\n+              [1] { \/\/ line_number_table\n+                0  1; \/\/  at 0xBB\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method at 0xBB\n+      0x0009; \/\/ access\n+      #11; \/\/ name_index       : hi\n+      #6; \/\/ descriptor_index : ()V\n+      [1] { \/\/ Attributes\n+        Attr(#9, 25) { \/\/ Code at 0xC3\n+          0; \/\/ max_stack\n+          0; \/\/ max_locals\n+          Bytes[1]{\n+            0xB1;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#10, 6) { \/\/ LineNumberTable at 0xD6\n+              [1] { \/\/ line_number_table\n+                0  2; \/\/  at 0xE2\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [1] { \/\/ Attributes\n+    Attr(#12, 2) { \/\/ SourceFile at 0xE4\n+      #13;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class Version64\n+\n+\n+\/\/ Class with major version 59 and minor version 0\n+class Version59 {\n+  0xCAFEBABE;\n+  0; \/\/ minor version\n+  59; \/\/ version\n+  [14] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1     at 0x0A\n+    class #4; \/\/ #2     at 0x0F\n+    NameAndType #5 #6; \/\/ #3     at 0x12\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4     at 0x17\n+    Utf8 \"<init>\"; \/\/ #5     at 0x2A\n+    Utf8 \"()V\"; \/\/ #6     at 0x33\n+    class #8; \/\/ #7     at 0x39\n+    Utf8 \"Version59\"; \/\/ #8     at 0x3C\n+    Utf8 \"Code\"; \/\/ #9     at 0x48\n+    Utf8 \"LineNumberTable\"; \/\/ #10     at 0x4F\n+    Utf8 \"hi\"; \/\/ #11     at 0x61\n+    Utf8 \"SourceFile\"; \/\/ #12     at 0x66\n+    Utf8 \"Version59.java\"; \/\/ #13     at 0x73\n+  } \/\/ Constant Pool\n+\n+  0x0021; \/\/ access [ ACC_PUBLIC ACC_SUPER ]\n+  #7;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [0] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [0] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [2] { \/\/ Methods\n+    {  \/\/ method at 0x90\n+      0x0001; \/\/ access\n+      #5; \/\/ name_index       : <init>\n+      #6; \/\/ descriptor_index : ()V\n+      [1] { \/\/ Attributes\n+        Attr(#9, 29) { \/\/ Code at 0x98\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[5]{\n+            0x2AB70001B1;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#10, 6) { \/\/ LineNumberTable at 0xAF\n+              [1] { \/\/ line_number_table\n+                0  1; \/\/  at 0xBB\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method at 0xBB\n+      0x0009; \/\/ access\n+      #11; \/\/ name_index       : hi\n+      #6; \/\/ descriptor_index : ()V\n+      [1] { \/\/ Attributes\n+        Attr(#9, 25) { \/\/ Code at 0xC3\n+          0; \/\/ max_stack\n+          0; \/\/ max_locals\n+          Bytes[1]{\n+            0xB1;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#10, 6) { \/\/ LineNumberTable at 0xD6\n+              [1] { \/\/ line_number_table\n+                0  2; \/\/  at 0xE2\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [1] { \/\/ Attributes\n+    Attr(#12, 2) { \/\/ SourceFile at 0xE4\n+      #13;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class Version59\n+\n+\n+\/\/ Class with major version 64 and minor version 65535\n+class Version64_65535 {\n+  0xCAFEBABE;\n+  65535; \/\/ minor version\n+  64; \/\/ version\n+  [14] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1     at 0x0A\n+    class #4; \/\/ #2     at 0x0F\n+    NameAndType #5 #6; \/\/ #3     at 0x12\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4     at 0x17\n+    Utf8 \"<init>\"; \/\/ #5     at 0x2A\n+    Utf8 \"()V\"; \/\/ #6     at 0x33\n+    class #8; \/\/ #7     at 0x39\n+    Utf8 \"Version64_65535\"; \/\/ #8     at 0x3C\n+    Utf8 \"Code\"; \/\/ #9     at 0x48\n+    Utf8 \"LineNumberTable\"; \/\/ #10     at 0x4F\n+    Utf8 \"hi\"; \/\/ #11     at 0x61\n+    Utf8 \"SourceFile\"; \/\/ #12     at 0x66\n+    Utf8 \"Version64_65535.java\"; \/\/ #13     at 0x73\n+  } \/\/ Constant Pool\n+\n+  0x0021; \/\/ access [ ACC_PUBLIC ACC_SUPER ]\n+  #7;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [0] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [0] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [2] { \/\/ Methods\n+    {  \/\/ method at 0x90\n+      0x0001; \/\/ access\n+      #5; \/\/ name_index       : <init>\n+      #6; \/\/ descriptor_index : ()V\n+      [1] { \/\/ Attributes\n+        Attr(#9, 29) { \/\/ Code at 0x98\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[5]{\n+            0x2AB70001B1;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#10, 6) { \/\/ LineNumberTable at 0xAF\n+              [1] { \/\/ line_number_table\n+                0  1; \/\/  at 0xBB\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method at 0xBB\n+      0x0009; \/\/ access\n+      #11; \/\/ name_index       : hi\n+      #6; \/\/ descriptor_index : ()V\n+      [1] { \/\/ Attributes\n+        Attr(#9, 25) { \/\/ Code at 0xC3\n+          0; \/\/ max_stack\n+          0; \/\/ max_locals\n+          Bytes[1]{\n+            0xB1;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#10, 6) { \/\/ LineNumberTable at 0xD6\n+              [1] { \/\/ line_number_table\n+                0  2; \/\/  at 0xE2\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [1] { \/\/ Attributes\n+    Attr(#12, 2) { \/\/ SourceFile at 0xE4\n+      #13;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class Version64_65535\n+\n+\n+\/\/ Class with major version 45 and minor version 3\n+class Version45_3 {\n+  0xCAFEBABE;\n+  3; \/\/ minor version\n+  45; \/\/ version\n+  [14] { \/\/ Constant Pool\n+    ; \/\/ first element is empty\n+    Method #2 #3; \/\/ #1     at 0x0A\n+    class #4; \/\/ #2     at 0x0F\n+    NameAndType #5 #6; \/\/ #3     at 0x12\n+    Utf8 \"java\/lang\/Object\"; \/\/ #4     at 0x17\n+    Utf8 \"<init>\"; \/\/ #5     at 0x2A\n+    Utf8 \"()V\"; \/\/ #6     at 0x33\n+    class #8; \/\/ #7     at 0x39\n+    Utf8 \"Version45_3\"; \/\/ #8     at 0x3C\n+    Utf8 \"Code\"; \/\/ #9     at 0x48\n+    Utf8 \"LineNumberTable\"; \/\/ #10     at 0x4F\n+    Utf8 \"hi\"; \/\/ #11     at 0x61\n+    Utf8 \"SourceFile\"; \/\/ #12     at 0x66\n+    Utf8 \"Version45_3.java\"; \/\/ #13     at 0x73\n+  } \/\/ Constant Pool\n+\n+  0x0021; \/\/ access [ ACC_PUBLIC ACC_SUPER ]\n+  #7;\/\/ this_cpx\n+  #2;\/\/ super_cpx\n+\n+  [0] { \/\/ Interfaces\n+  } \/\/ Interfaces\n+\n+  [0] { \/\/ Fields\n+  } \/\/ Fields\n+\n+  [2] { \/\/ Methods\n+    {  \/\/ method at 0x90\n+      0x0001; \/\/ access\n+      #5; \/\/ name_index       : <init>\n+      #6; \/\/ descriptor_index : ()V\n+      [1] { \/\/ Attributes\n+        Attr(#9, 29) { \/\/ Code at 0x98\n+          1; \/\/ max_stack\n+          1; \/\/ max_locals\n+          Bytes[5]{\n+            0x2AB70001B1;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#10, 6) { \/\/ LineNumberTable at 0xAF\n+              [1] { \/\/ line_number_table\n+                0  1; \/\/  at 0xBB\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+    ;\n+    {  \/\/ method at 0xBB\n+      0x0009; \/\/ access\n+      #11; \/\/ name_index       : hi\n+      #6; \/\/ descriptor_index : ()V\n+      [1] { \/\/ Attributes\n+        Attr(#9, 25) { \/\/ Code at 0xC3\n+          0; \/\/ max_stack\n+          0; \/\/ max_locals\n+          Bytes[1]{\n+            0xB1;\n+          }\n+          [0] { \/\/ Traps\n+          } \/\/ end Traps\n+          [1] { \/\/ Attributes\n+            Attr(#10, 6) { \/\/ LineNumberTable at 0xD6\n+              [1] { \/\/ line_number_table\n+                0  2; \/\/  at 0xE2\n+              }\n+            } \/\/ end LineNumberTable\n+          } \/\/ Attributes\n+        } \/\/ end Code\n+      } \/\/ Attributes\n+    }\n+  } \/\/ Methods\n+\n+  [1] { \/\/ Attributes\n+    Attr(#12, 2) { \/\/ SourceFile at 0xE4\n+      #13;\n+    } \/\/ end SourceFile\n+  } \/\/ Attributes\n+} \/\/ end class Version45_3\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassFile\/classFileVersions.jcod","additions":382,"deletions":0,"binary":false,"changes":382,"status":"added"}]}