{"files":[{"patch":"@@ -1163,1 +1163,1 @@\n- * Value types support.\n+ * Core reflection support.\n","filename":"src\/hotspot\/share\/include\/jvm.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4050,2 +4050,2 @@\n- * the returned jint contains the class's major version.  The high order 16 bits\n- * contains the class's minor version.\n+ * returned jint contain the class's major version.  The high order 16 bits\n+ * contain the class's minor version.\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4677,1 +4677,1 @@\n-     * If the class is an array type then the class file version of its component\n+     * If the class is an array type then the class file version of its element\n@@ -4682,6 +4682,1 @@\n-        Class<?> component = this;\n-        if (isArray()) {\n-            do {\n-                component = component.getComponentType();\n-            } while (component.isArray());\n-        }\n+        Class<?> component = isArray() ? elementType() : this;\n@@ -4697,1 +4692,1 @@\n-     * If the class is an array type then the access flags of the component type is\n+     * If the class is an array type then the access flags of the element type is\n@@ -4701,6 +4696,1 @@\n-        Class<?> component = this;\n-        if (isArray()) {\n-            do {\n-                component = component.getComponentType();\n-            } while (component.isArray());\n-        }\n+        Class<?> component = isArray() ? elementType() : this;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":4,"deletions":14,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-                \"expected \" + expectedResult + \", got \" + flags + \" for class \" + className);\n+                \"expected 0x\" + Integer.toHexString(expectedResult) + \", got 0x\" + Integer.toHexString(flags) + \" for class \" + className);\n@@ -54,2 +54,2 @@\n-        testIt(\"SUPERset\", 33);    \/\/ ACC_SUPER 0x20 + ACC_PUBLIC 0x1\n-        testIt(\"SUPERnotset\", 1);  \/\/ ACC_PUBLIC 01\n+        testIt(\"SUPERset\", 0x21);  \/\/ ACC_SUPER 0x20 + ACC_PUBLIC 0x1\n+        testIt(\"SUPERnotset\", Modifier.PUBLIC);\n@@ -59,2 +59,3 @@\n-        if (flags != 1041) {\n-            throw new RuntimeException(\"expected 1041, got \" + flags + \" for primitive array\");\n+        if (flags != (Modifier.ABSTRACT | Modifier.FINAL | Modifier.PUBLIC)) {\n+            throw new RuntimeException(\n+                \"expected 0x411, got 0x\" + Integer.toHexString(flags) + \" for primitive array\");\n@@ -65,2 +66,3 @@\n-        if (flags != 1) {\n-            throw new RuntimeException(\"expected 1, got \" + flags + \" for object array\");\n+        if (flags != Modifier.PUBLIC) {\n+            throw new RuntimeException(\n+                \"expected 0x1, got 0x\" + Integer.toHexString(flags) + \" for object array\");\n@@ -69,0 +71,6 @@\n+        \/\/ test multi-dimensional object array.  should return flags of component.\n+        flags = (int)m.invoke((new SUPERnotset[4][2]).getClass());\n+        if (flags != Modifier.PUBLIC) {\n+            throw new RuntimeException(\n+                \"expected 0x1, got 0x\" + Integer.toHexString(flags) + \" for object array\");\n+        }\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassFile\/ClassAccessFlagsRawTest.java","additions":15,"deletions":7,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -44,0 +44,4 @@\n+            int exp_minor = (expectedResult >> 16) & 0x0000FFFF;\n+            int exp_major = expectedResult & 0x0000FFFF;\n+            int got_minor = (ver >> 16) & 0x0000FFFF;\n+            int got_major = ver & 0x0000FFFF;\n@@ -45,1 +49,1 @@\n-                \"expected \" + expectedResult + \", got \" + ver + \" for class \" + className);\n+                \"Expected \" + exp_major + \":\" + exp_minor + \" but got \" + got_major + \":\" + got_minor);\n@@ -57,1 +61,1 @@\n-        testIt(\"Version64_65535\", -65472);  \/\/ -65472 = 0xFFFF0040\n+        testIt(\"Version64_65535\", 0xFFFF0040);  \/\/ 0xFFFF0040 = 64.65535\n@@ -62,1 +66,4 @@\n-            throw new RuntimeException(\"expected 64, got \" + ver + \" for primitive array\");\n+            int got_minor = (ver >> 16) & 0x0000FFFF;\n+            int got_major = ver & 0x0000FFFF;\n+            throw new RuntimeException(\n+                \"Expected 64:0, but got \" + got_major + \":\" + got_minor + \" for primitive array\");\n@@ -68,1 +75,13 @@\n-            throw new RuntimeException(\"expected 59, got \" + ver + \" for object array\");\n+            int got_minor = (ver >> 16) & 0x0000FFFF;\n+            int got_major = ver & 0x0000FFFF;\n+            throw new RuntimeException(\n+                \"Expected 59:0, but got \" + got_major + \":\" + got_minor + \" for object array\");\n+        }\n+\n+        \/\/ test multi-dimensional object array.  should return class file version of component.\n+        ver = (int)m.invoke((new Version59[3][2]).getClass());\n+        if (ver != 59) {\n+            int got_minor = (ver >> 16) & 0x0000FFFF;\n+            int got_major = ver & 0x0000FFFF;\n+            throw new RuntimeException(\n+                \"Expected 59:0, but got \" + got_major + \":\" + got_minor + \" for object array\");\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassFile\/ClassFileVersionTest.java","additions":23,"deletions":4,"binary":false,"changes":27,"status":"modified"}]}