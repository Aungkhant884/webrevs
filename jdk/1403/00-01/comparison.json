{"files":[{"patch":"@@ -538,0 +538,3 @@\n+  \/\/ emit JFR event\n+  JFR_ONLY(Exceptions::emit_throw_event(exception());)\n+\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -498,0 +498,2 @@\n+    \/\/ emit JFR event\n+    JFR_ONLY(Exceptions::emit_throw_event(h_exception());)\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2445,0 +2445,2 @@\n+    \/\/ emit JFR event\n+    JFR_ONLY(Exceptions::emit_throw_event(except_oop());)\n","filename":"src\/hotspot\/share\/interpreter\/zero\/bytecodeInterpreter.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -190,0 +190,4 @@\n+\n+NO_TRANSITION(jint, jfr_num_throwables(JNIEnv * env, jobject jvm))\n+  return Exceptions::num_throwables();\n+NO_TRANSITION_END\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethod.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -153,0 +153,2 @@\n+jint JNICALL jfr_num_throwables(JNIEnv* env, jobject jvm);\n+\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethod.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -92,1 +92,2 @@\n-      (char*)\"getTypeId\", (char*)\"(Ljava\/lang\/String;)J\", (void*)jfr_get_type_id_from_string\n+      (char*)\"getTypeId\", (char*)\"(Ljava\/lang\/String;)J\", (void*)jfr_get_type_id_from_string,\n+      (char*)\"numThrowables\", (char*)\"()I\", (void*)jfr_num_throwables\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethodRegistration.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n- Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -430,4 +430,0 @@\n-  <Event name=\"OutOfMemory\" category=\"Java Virtual Machine, Runtime\" label=\"Out of Memory\" startTime=\"false\" stackTrace=\"true\">\n-    <Field type=\"string\" name=\"message\" label=\"Exception message\" \/>\n-  <\/Event>\n-\n@@ -813,0 +809,10 @@\n+  <Event name=\"JavaExceptionThrow\" category=\"Java Application\" label=\"Java Exception\" stackTrace=\"true\" thread=\"true\" description=\"An object derived from java.lang.Exception has been thrown\">\n+    <Field type=\"string\" name=\"message\" label=\"Message\" \/>\n+    <Field type=\"Class\" name=\"thrownClass\" label=\"Class\" \/>\n+  <\/Event>\n+\n+  <Event name=\"JavaErrorThrow\" category=\"Java Application\" label=\"Java Error\" stackTrace=\"true\" thread=\"true\" description=\"An object derived from java.lang.Error has been thrown.\">\n+    <Field type=\"string\" name=\"message\" label=\"Message\" \/>\n+    <Field type=\"Class\" name=\"thrownClass\" label=\"Class\" \/>\n+  <\/Event>\n+\n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xml","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -266,0 +266,3 @@\n+  \/\/ emit JFR event\n+  JFR_ONLY(Exceptions::emit_throw_event(ex);)\n+\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -170,8 +170,0 @@\n-#if INCLUDE_JFR\n-    EventOutOfMemory event;\n-    if (event.should_commit()) {\n-      oop msg = java_lang_Throwable::message(h_exception());\n-      event.set_message(java_lang_String::as_utf8_string(msg));\n-      event.commit();\n-    }\n-#endif\n@@ -476,0 +468,2 @@\n+JFR_ONLY(volatile int Exceptions::_num_throwables = 0;)\n+\n@@ -582,0 +576,28 @@\n+\n+#if INCLUDE_JFR\n+void Exceptions::emit_throw_event(oop exception) {\n+  ResourceMark rm;\n+\n+  oop msg = java_lang_Throwable::message(exception);\n+  const char *message = msg == NULL ? NULL : java_lang_String::as_utf8_string(msg);\n+  if (exception->is_a(SystemDictionary::Error_klass())) {\n+    EventJavaErrorThrow err_event;\n+    if (err_event.should_commit()) {\n+      err_event.set_message(message);\n+      err_event.set_thrownClass(exception->klass());\n+      err_event.commit();\n+    }\n+  }\n+  EventJavaExceptionThrow exc_event;\n+  if (exc_event.should_commit()) {\n+    exc_event.set_message(message);\n+    exc_event.set_thrownClass(exception->klass());\n+    exc_event.commit();\n+  }\n+  Atomic::inc(&_num_throwables);\n+}\n+\n+int Exceptions::num_throwables() {\n+  return Atomic::load(&_num_throwables);\n+}\n+#endif\n","filename":"src\/hotspot\/share\/utilities\/exceptions.cpp","additions":31,"deletions":9,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -118,0 +118,6 @@\n+\n+#if INCLUDE_JFR\n+  \/\/ Count number of thrown exceptions \/ errors\n+  static volatile int _num_throwables;\n+#endif\n+\n@@ -195,0 +201,5 @@\n+\n+#if INCLUDE_JFR\n+  static int num_throwables();\n+  static void emit_throw_event(oop exception);\n+#endif\n","filename":"src\/hotspot\/share\/utilities\/exceptions.hpp","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1,47 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.jfr.events;\n-\n-import jdk.jfr.Category;\n-import jdk.jfr.Description;\n-import jdk.jfr.Label;\n-import jdk.jfr.Name;\n-import jdk.jfr.internal.Type;\n-\n-@Name(Type.EVENT_NAME_PREFIX + \"JavaErrorThrow\")\n-@Label(\"Java Error\")\n-@Category(\"Java Application\")\n-@Description(\"An object derived from java.lang.Error has been created. OutOfMemoryErrors are ignored\")\n-public final class ErrorThrownEvent extends AbstractJDKEvent {\n-\n-    \/\/ The order of these fields must be the same as the parameters in\n-    \/\/ EventHandler::write(..., String, Class)\n-\n-    @Label(\"Message\")\n-    public String message;\n-\n-    @Label(\"Class\")\n-    public Class<?> thrownClass;\n-}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/ErrorThrownEvent.java","additions":0,"deletions":47,"binary":false,"changes":47,"status":"deleted"},{"patch":"@@ -1,48 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.jfr.events;\n-\n-import jdk.jfr.Category;\n-import jdk.jfr.Description;\n-import jdk.jfr.Label;\n-import jdk.jfr.Name;\n-import jdk.jfr.internal.Type;\n-\n-@Name(Type.EVENT_NAME_PREFIX + \"JavaExceptionThrow\")\n-@Label(\"Java Exception\")\n-@Category(\"Java Application\")\n-@Description(\"An object derived from java.lang.Exception has been created\")\n-public final class ExceptionThrownEvent extends AbstractJDKEvent {\n-\n-    \/\/ The order of these fields must be the same as the parameters in\n-    \/\/ EventHandler::write(..., String, Class)\n-\n-    @Label(\"Message\")\n-    public String message;\n-\n-    @Label(\"Class\")\n-    public Class<?> thrownClass;\n-}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/ExceptionThrownEvent.java","additions":0,"deletions":48,"binary":false,"changes":48,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,2 +36,0 @@\n-    public final static EventHandler ERROR_THROWN = Utils.getHandler(ErrorThrownEvent.class);\n-    public final static EventHandler EXCEPTION_THROWN = Utils.getHandler(ExceptionThrownEvent.class);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/Handlers.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -592,0 +592,7 @@\n+\n+    \/**\n+     * Returns number of thrown exceptions \/ errors.\n+     *\n+     * @return number of thrown exceptions \/ errors.\n+     *\/\n+    public native int numThrowables();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/JVM.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -138,4 +138,0 @@\n-    public void write(long start, long duration, String path, Class<?> exceptionClass)  {\n-        throwError(\"ExceptionThrownEvent or ErrorThrownEvent\");\n-    }\n-\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/handlers\/EventHandler.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,86 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.jfr.internal.instrument;\n-\n-import java.io.ByteArrayInputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-\n-import jdk.internal.org.objectweb.asm.ClassReader;\n-import jdk.internal.org.objectweb.asm.ClassVisitor;\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.Type;\n-\n-final class ConstructorTracerWriter extends ClassVisitor {\n-\n-    private ConstructorWriter useInputParameter, noUseInputParameter;\n-\n-    static byte[] generateBytes(Class<?> clz, byte[] oldBytes) throws IOException {\n-        InputStream in = new ByteArrayInputStream(oldBytes);\n-        ClassReader cr = new ClassReader(in);\n-        ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS);\n-        ConstructorTracerWriter ctw = new ConstructorTracerWriter(cw, clz);\n-        cr.accept(ctw, 0);\n-        return cw.toByteArray();\n-    }\n-\n-    private ConstructorTracerWriter(ClassVisitor cv, Class<?> classToChange) {\n-        super(Opcodes.ASM7, cv);\n-        useInputParameter = new ConstructorWriter(classToChange, true);\n-        noUseInputParameter = new ConstructorWriter(classToChange, false);\n-    }\n-\n-    private boolean isConstructor(String name) {\n-        return name.equals(\"<init>\");\n-    }\n-\n-    private boolean takesStringParameter(String desc) {\n-        Type[] types = Type.getArgumentTypes(desc);\n-        if (types.length > 0 && types[0].getClassName().equals(String.class.getName())) {\n-            return true;\n-        }\n-        return false;\n-    }\n-\n-    @Override\n-    public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {\n-\n-        MethodVisitor mv = super.visitMethod(access, name, desc, signature, exceptions);\n-\n-        \/\/ Get a hold of the constructors that takes a String as a parameter\n-        if (isConstructor(name)) {\n-            if (takesStringParameter(desc)) {\n-                useInputParameter.setMethodVisitor(mv);\n-                return useInputParameter;\n-            }\n-            noUseInputParameter.setMethodVisitor(mv);\n-            return noUseInputParameter;\n-        }\n-        return mv;\n-    }\n-}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/instrument\/ConstructorTracerWriter.java","additions":0,"deletions":86,"binary":false,"changes":86,"status":"deleted"},{"patch":"@@ -1,89 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.jfr.internal.instrument;\n-\n-import static jdk.internal.org.objectweb.asm.Opcodes.ACONST_NULL;\n-import static jdk.internal.org.objectweb.asm.Opcodes.ALOAD;\n-import static jdk.internal.org.objectweb.asm.Opcodes.INVOKESTATIC;\n-import static jdk.internal.org.objectweb.asm.Opcodes.RETURN;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-\n-final class ConstructorWriter extends MethodVisitor {\n-\n-    private boolean useInputParameter;\n-    private String shortClassName;\n-    private String fullClassName;\n-\n-    ConstructorWriter(Class<?> classToChange, boolean useInputParameter) {\n-        super(Opcodes.ASM7);\n-        this.useInputParameter = useInputParameter;\n-        shortClassName = classToChange.getSimpleName();\n-        fullClassName = classToChange.getName().replace('.', '\/');\n-    }\n-\n-    @Override\n-    public void visitInsn(int opcode)\n-    {\n-        if (opcode == RETURN) {\n-            if (useInputParameter) {\n-                useInput();\n-            } else {\n-                noInput();\n-            }\n-        }\n-        mv.visitInsn(opcode);\n-    }\n-    @SuppressWarnings(\"deprecation\")\n-    private void useInput()\n-    {\n-        \/\/Load 'this' from local variable 0\n-        \/\/Load first input parameter\n-        \/\/Invoke ThrowableTracer.traceCLASS(this, parameter) for current class\n-        mv.visitVarInsn(ALOAD, 0);\n-        mv.visitVarInsn(ALOAD, 1);\n-        mv.visitMethodInsn(INVOKESTATIC, \"jdk\/jfr\/internal\/instrument\/ThrowableTracer\",\n-                \"trace\" + shortClassName, \"(L\" + fullClassName +\n-                \";Ljava\/lang\/String;)V\");\n-    }\n-\n-    @SuppressWarnings(\"deprecation\")\n-    private void noInput()\n-    {\n-        \/\/Load 'this' from local variable 0\n-        \/\/Load \"\"\n-        \/\/Invoke ThrowableTracer.traceCLASS(this, \"\") for current class\n-        mv.visitVarInsn(ALOAD, 0);\n-        mv.visitInsn(ACONST_NULL);\n-        mv.visitMethodInsn(INVOKESTATIC, \"jdk\/jfr\/internal\/instrument\/ThrowableTracer\",\n-                \"trace\" + shortClassName, \"(L\" + fullClassName +\n-                \";Ljava\/lang\/String;)V\");\n-    }\n-\n-    public void setMethodVisitor(MethodVisitor mv) {\n-        this.mv = mv;\n-    }\n-}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/instrument\/ConstructorWriter.java","additions":0,"deletions":89,"binary":false,"changes":89,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import jdk.jfr.events.ErrorThrownEvent;\n@@ -37,1 +36,0 @@\n-import jdk.jfr.events.ExceptionThrownEvent;\n@@ -71,1 +69,0 @@\n-        ExceptionThrownEvent.class,\n@@ -73,1 +70,0 @@\n-        ErrorThrownEvent.class,\n@@ -142,1 +138,1 @@\n-        t.throwables = ThrowableTracer.numThrowables();\n+        t.throwables = jvm.numThrowables();\n@@ -148,10 +144,0 @@\n-        if (java.lang.Throwable.class == klass) {\n-            Logger.log(LogTag.JFR_SYSTEM, LogLevel.TRACE, \"Instrumenting java.lang.Throwable\");\n-            return ConstructorTracerWriter.generateBytes(java.lang.Throwable.class, oldBytes);\n-        }\n-\n-        if (java.lang.Error.class == klass) {\n-            Logger.log(LogTag.JFR_SYSTEM, LogLevel.TRACE, \"Instrumenting java.lang.Error\");\n-            return ConstructorTracerWriter.generateBytes(java.lang.Error.class, oldBytes);\n-        }\n-\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/instrument\/JDKEvents.java","additions":2,"deletions":16,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1,66 +0,0 @@\n-\/*\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.jfr.internal.instrument;\n-\n-import java.util.concurrent.atomic.AtomicLong;\n-\n-import jdk.jfr.events.Handlers;\n-import jdk.jfr.internal.handlers.EventHandler;\n-\n-public final class ThrowableTracer {\n-\n-    private static final AtomicLong numThrowables = new AtomicLong();\n-\n-    public static void traceError(Error e, String message) {\n-        if (e instanceof OutOfMemoryError) {\n-            return;\n-        }\n-        long timestamp = EventHandler.timestamp();\n-\n-        EventHandler h1 = Handlers.ERROR_THROWN;\n-        if (h1.isEnabled()) {\n-            h1.write(timestamp, 0L, message, e.getClass());\n-        }\n-        EventHandler h2 = Handlers.EXCEPTION_THROWN;\n-        if (h2.isEnabled()) {\n-            h2.write(timestamp, 0L, message, e.getClass());\n-        }\n-        numThrowables.incrementAndGet();\n-    }\n-\n-    public static void traceThrowable(Throwable t, String message) {\n-        EventHandler h = Handlers.EXCEPTION_THROWN;\n-        if (h.isEnabled()) {\n-            long timestamp = EventHandler.timestamp();\n-            h.write(timestamp, 0L, message, t.getClass());\n-        }\n-        numThrowables.incrementAndGet();\n-    }\n-\n-    public static long numThrowables() {\n-        return numThrowables.get();\n-    }\n-}\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/instrument\/ThrowableTracer.java","additions":0,"deletions":66,"binary":false,"changes":66,"status":"deleted"},{"patch":"@@ -457,5 +457,0 @@\n-    <event name=\"jdk.OutOfMemory\">\n-      <setting name=\"enabled\">true<\/setting>\n-      <setting name=\"stackTrace\">true<\/setting>\n-    <\/event>\n-\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/default.jfc","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -457,5 +457,0 @@\n-    <event name=\"jdk.OutOfMemory\">\n-      <setting name=\"enabled\">true<\/setting>\n-      <setting name=\"stackTrace\">true<\/setting>\n-    <\/event>\n-\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/profile.jfc","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -109,2 +109,2 @@\n-                if (!topFrame.getMethod().getName().equals(\"<init>\")) {\n-                    throw new Exception(\"Expected name of top frame to be <init>\");\n+                if (!topFrame.getMethod().getName().equals(\"checkExceptionStackTrace\")) {\n+                    throw new Exception(\"Expected name of top frame to be checkExceptionStackTrace\");\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestExceptionEvents.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,69 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2020, NTT DATA.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @summary Test jdk.OutOfMemory event\n- * @requires vm.hasJFR\n- * @library \/test\/lib\n- * @modules java.base\/jdk.internal.misc java.compiler\n- * @run main\/othervm -Xmx200m -XX:StartFlightRecording\n- *      jdk.jfr.event.runtime.TestOutOfMemory\n- *\/\n-package jdk.jfr.event.runtime;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.concurrent.CountDownLatch;\n-import jdk.jfr.consumer.RecordingStream;\n-\n-public class TestOutOfMemory implements Runnable {\n-\n-    public void run() {\n-        List<byte[]> list = new ArrayList<>();\n-        try {\n-            while (true) {\n-                list.add(new byte[10 * 1024 * 1024]);\n-            }\n-        } catch (OutOfMemoryError e) {\n-            \/\/ expected\n-            System.out.println(\"OutOfMemoryError was thrown in consumer thread\");\n-        }\n-    }\n-\n-    public static void main(String... args) throws Exception {\n-        CountDownLatch eventArrived = new CountDownLatch(1);\n-\n-        try (RecordingStream r = new RecordingStream()) {\n-            r.onEvent(\"jdk.OutOfMemory\", e -> eventArrived.countDown());\n-            r.startAsync();\n-\n-            Thread heapConsumer = new Thread(new TestOutOfMemory(), \"Java heap consumer\");\n-            heapConsumer.start();\n-\n-            eventArrived.await();\n-            heapConsumer.join();\n-        }\n-    }\n-}\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestOutOfMemory.java","additions":0,"deletions":69,"binary":false,"changes":69,"status":"deleted"}]}