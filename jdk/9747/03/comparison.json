{"files":[{"patch":"@@ -50,0 +50,3 @@\n+ * @implNote If the properties file fails to load, the JDK implementation will\n+ * throw an unspecified error when initializing the {@code Security} class.\n+ *\n@@ -186,5 +189,1 @@\n-            initializeStatic();\n-            if (sdebug != null) {\n-                sdebug.println(\"unable to load security properties \" +\n-                        \"-- using defaults\");\n-            }\n+            throw new InternalError(\"java.security file missing\");\n@@ -195,13 +194,0 @@\n-    \/*\n-     * Initialize to default values, if <java.home>\/lib\/java.security\n-     * is not found.\n-     *\/\n-    private static void initializeStatic() {\n-        props.put(\"security.provider.1\", \"sun.security.provider.Sun\");\n-        props.put(\"security.provider.2\", \"sun.security.rsa.SunRsaSign\");\n-        props.put(\"security.provider.3\", \"sun.security.ssl.SunJSSE\");\n-        props.put(\"security.provider.4\", \"com.sun.crypto.provider.SunJCE\");\n-        props.put(\"security.provider.5\", \"sun.security.jgss.SunProvider\");\n-        props.put(\"security.provider.6\", \"com.sun.security.sasl.Provider\");\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/security\/Security.java","additions":4,"deletions":18,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -25,0 +25,3 @@\n+#\n+# If this properties file fails to load, the JDK implementation will throw\n+# an unspecified error when initializing the java.security.Security class.\n","filename":"src\/java.base\/share\/conf\/security\/java.security","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.*;\n+\n+import java.security.Security;\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+\/*\n+ * @test\n+ * @summary Throw error if default java.security file is missing\n+ * @bug 8155246\n+ * @library \/test\/lib\n+ * @run main ConfigFileTest\n+ *\/\n+public class ConfigFileTest {\n+\n+    public static void main(String[] args) throws Exception {\n+        Path copyJdkDir = Path.of(\".\/jdk-8155246-tmpdir\");\n+        Path copiedJava = Optional.of(\n+                        Path.of(copyJdkDir.toString(), \"bin\", \"java\"))\n+                .orElseThrow(() -> new RuntimeException(\"Unable to locate new JDK\")\n+                );\n+\n+        if (args.length == 1) {\n+            \/\/ set up is complete. Run code to exercise loading of java.security\n+            System.out.println(Arrays.toString(Security.getProviders()));\n+        } else {\n+            Files.createDirectory(copyJdkDir);\n+            Path jdkTestDir = Path.of(Optional.of(System.getProperty(\"test.jdk\"))\n+                            .orElseThrow(() -> new RuntimeException(\"Couldn't load JDK Test Dir\"))\n+            );\n+\n+            copyJDKMinusJavaSecurity(jdkTestDir, copyJdkDir);\n+            String extraPropsFile = Path.of(System.getProperty(\"test.src\"), \"override.props\").toString();\n+\n+            \/\/ exercise some debug flags while we're here\n+            \/\/ launch JDK without java.security file being present or specified\n+            exerciseSecurity(copiedJava.toString(), \"-cp\", System.getProperty(\"test.classes\"),\n+                    \"-Djava.security.debug=all\", \"-Djavax.net.debug=all\", \"ConfigFileTest\", \"runner\");\n+\n+            \/\/ test the override functionality also. Should not be allowed since\n+            \/\/ \"security.overridePropertiesFile=true\" Security property is missing.\n+            exerciseSecurity(copiedJava.toString(), \"-cp\", System.getProperty(\"test.classes\"),\n+                    \"-Djava.security.debug=all\", \"-Djavax.net.debug=all\",\n+                    \"-Djava.security.properties==file:\/\/\" + extraPropsFile, \"ConfigFileTest\", \"runner\");\n+        }\n+    }\n+\n+    private static void exerciseSecurity(String... args) throws Exception {\n+        ProcessBuilder process = new ProcessBuilder(args);\n+        OutputAnalyzer oa = ProcessTools.executeProcess(process);\n+        oa.shouldHaveExitValue(1).shouldContain(\"java.security file missing\");\n+    }\n+\n+    private static void copyJDKMinusJavaSecurity(Path src, Path dst) throws Exception {\n+        Files.walk(src)\n+            .skip(1)\n+            .filter(p -> !p.toString().endsWith(\"java.security\"))\n+            .forEach(file -> {\n+                try {\n+                    Files.copy(file, dst.resolve(src.relativize(file)), StandardCopyOption.COPY_ATTRIBUTES);\n+                } catch (IOException ioe) {\n+                    throw new UncheckedIOException(ioe);\n+                }\n+            });\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/security\/Security\/ConfigFileTest.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"},{"patch":"@@ -0,0 +1,7 @@\n+security.provider.1=sun.security.provider.Sun\n+security.provider.2=sun.security.rsa.SunRsaSign\n+security.provider.3=sun.security.ssl.SunJSSE\n+security.provider.4=com.sun.crypto.provider.SunJCE\n+security.provider.5=sun.security.jgss.SunProvider\n+security.provider.6=com.sun.security.sasl.Provider\n+\n","filename":"test\/jdk\/java\/security\/Security\/override.props","additions":7,"deletions":0,"binary":false,"changes":7,"status":"added"}]}