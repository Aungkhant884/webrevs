{"files":[{"patch":"@@ -113,6 +113,0 @@\n-void* ResourceObj::operator new [](size_t size, Arena *arena) throw() {\n-  address res = (address)arena->Amalloc(size);\n-  DEBUG_ONLY(set_allocation_type(res, ARENA);)\n-  return res;\n-}\n-\n@@ -162,4 +156,0 @@\n-void ResourceObj::operator delete [](void* p) {\n-  operator delete(p);\n-}\n-\n","filename":"src\/hotspot\/share\/memory\/allocation.cpp","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -429,1 +429,0 @@\n-\n@@ -431,2 +430,1 @@\n-\n-  void* operator new [](size_t size, Arena *arena) throw();\n+  void* operator new [](size_t size, Arena *arena) throw() = delete;\n@@ -446,12 +444,2 @@\n-  void* operator new [](size_t size) throw() {\n-      address res = (address)resource_allocate_bytes(size);\n-      DEBUG_ONLY(set_allocation_type(res, RESOURCE_AREA);)\n-      return res;\n-  }\n-\n-  void* operator new [](size_t size, const std::nothrow_t& nothrow_constant) throw() {\n-      address res = (address)resource_allocate_bytes(size, AllocFailStrategy::RETURN_NULL);\n-      DEBUG_ONLY(if (res != NULL) set_allocation_type(res, RESOURCE_AREA);)\n-      return res;\n-  }\n-\n+  void* operator new [](size_t size) throw() = delete;\n+  void* operator new [](size_t size, const std::nothrow_t& nothrow_constant) throw() = delete;\n@@ -459,1 +447,1 @@\n-  void  operator delete [](void* p);\n+  void  operator delete [](void* p) = delete;\n","filename":"src\/hotspot\/share\/memory\/allocation.hpp","additions":4,"deletions":16,"binary":false,"changes":20,"status":"modified"}]}