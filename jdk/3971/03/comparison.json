{"files":[{"patch":"@@ -61,1 +61,1 @@\n-                    if (tool.iflag || tool.tflag || tool.uflag || tool.xflag || tool.dflag)\n+                    if (tool.iflag || tool.tflag || tool.uflag || tool.xflag || tool.dflag || tool.validate)\n@@ -68,1 +68,1 @@\n-                    if (tool.cflag || tool.tflag || tool.uflag || tool.xflag || tool.dflag)\n+                    if (tool.cflag || tool.tflag || tool.uflag || tool.xflag || tool.dflag || tool.validate)\n@@ -76,1 +76,1 @@\n-                    if (tool.cflag || tool.iflag || tool.uflag || tool.xflag || tool.dflag)\n+                    if (tool.cflag || tool.iflag || tool.uflag || tool.xflag || tool.dflag || tool.validate)\n@@ -83,1 +83,1 @@\n-                    if (tool.cflag || tool.iflag || tool.tflag || tool.xflag || tool.dflag)\n+                    if (tool.cflag || tool.iflag || tool.tflag || tool.xflag || tool.dflag || tool.validate)\n@@ -90,1 +90,1 @@\n-                    if (tool.cflag || tool.iflag  || tool.tflag || tool.uflag || tool.dflag)\n+                    if (tool.cflag || tool.iflag  || tool.tflag || tool.uflag || tool.dflag || tool.validate)\n@@ -97,1 +97,1 @@\n-                    if (tool.cflag || tool.iflag  || tool.tflag || tool.uflag || tool.xflag)\n+                    if (tool.cflag || tool.iflag  || tool.tflag || tool.uflag || tool.xflag || tool.validate)\n@@ -102,0 +102,7 @@\n+            new Option(false, OptionType.MAIN_OPERATION, \"--validate\") {\n+                void process(Main tool, String opt, String arg) throws BadArgs {\n+                    if (tool.cflag || tool.iflag  || tool.tflag || tool.uflag || tool.xflag || tool.dflag)\n+                        throw new BadArgs(\"error.multiple.main.operations\").showUsage(true);\n+                    tool.validate = true;\n+                }\n+            },\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/GNUStyleOptions.java","additions":13,"deletions":6,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -153,1 +153,1 @@\n-    boolean cflag, uflag, xflag, tflag, vflag, flag0, Mflag, iflag, pflag, dflag;\n+    boolean cflag, uflag, xflag, tflag, vflag, flag0, Mflag, iflag, pflag, dflag, validate;\n@@ -196,1 +196,1 @@\n-            throw new Error(\"Error in message file\");\n+            throw new Error(\"Error in message file\", e);\n@@ -404,0 +404,11 @@\n+            } else if (validate) {\n+                File file;\n+                if (fname != null) {\n+                    file = new File(fname);\n+                } else {\n+                    file = createTemporaryFile(\"tmpJar\", \".jar\");\n+                    try (InputStream in = new FileInputStream(FileDescriptor.in)) {\n+                        Files.copy(in, file.toPath());\n+                    }\n+                }\n+                ok = validateJar(file);\n@@ -423,0 +434,9 @@\n+    private boolean validateJar(File file) throws IOException {\n+        try (ZipFile zf = new ZipFile(file)) {\n+            return Validator.validate(this, zf);\n+        } catch (IOException e) {\n+            error(formatMsg2(\"error.validator.jarfile.exception\", fname, e.getMessage()));\n+            return true;\n+        }\n+    }\n+\n@@ -425,7 +445,3 @@\n-            try (ZipFile zf = new ZipFile(tmpfile)) {\n-                ok = Validator.validate(this, zf);\n-                if (!ok) {\n-                    error(formatMsg(\"error.validator.jarfile.invalid\", fname));\n-                }\n-            } catch (IOException e) {\n-                error(formatMsg2(\"error.validator.jarfile.exception\", fname, e.getMessage()));\n+            ok = validateJar(tmpfile);\n+            if (!ok) {\n+                error(formatMsg(\"error.validator.jarfile.invalid\", fname));\n@@ -579,1 +595,1 @@\n-        if (!cflag && !tflag && !xflag && !uflag && !iflag && !dflag) {\n+        if (!cflag && !tflag && !xflag && !uflag && !iflag && !dflag && !validate) {\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/Main.java","additions":26,"deletions":10,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-        One of options -{ctxuid} must be specified.\n+        One of options -{ctxuid} or --validate must be specified.\n@@ -238,0 +238,5 @@\n+main.help.opt.main.validate=\\\n+\\      --validate             Validate the contents of the jar archive. This option\\n\\\n+\\                             will validate that the API exported by a multi-release\\n\\\n+\\                             jar archive is consistent across all different release\\n\\\n+\\                             versions.\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/resources\/jar.properties","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+import java.io.IOException;\n@@ -48,0 +49,2 @@\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n@@ -51,0 +54,1 @@\n+import java.util.Map;\n@@ -53,0 +57,1 @@\n+import java.util.stream.Stream;\n@@ -88,7 +93,13 @@\n-        if (isAcceptable) {\n-            result.shouldHaveExitValue(SUCCESS)\n-                  .shouldBeEmptyIgnoreVMWarnings();\n-        } else {\n-            result.shouldNotHaveExitValue(SUCCESS)\n-                    .shouldContain(\"contains a class with different api from earlier version\");\n-        }\n+\n+        String failureMessage = \"contains a class with different api from earlier version\";\n+        checkResult(result, isAcceptable, failureMessage);\n+        if (isAcceptable) result.shouldBeEmptyIgnoreVMWarnings();\n+\n+\n+        Path malformed = root.resolve(\"zip\").resolve(\"test.jar\");\n+        zip(malformed,\n+            Map.entry(\"\", classes.resolve(\"base\")),\n+            Map.entry(\"META-INF\/versions\/10\", classes.resolve(\"v10\")));\n+\n+        result = validateJar(malformed.toString(), isAcceptable, failureMessage);\n+        if (isAcceptable) result.shouldBeEmptyIgnoreVMWarnings();\n@@ -130,0 +141,2 @@\n+        String failureMessage = \"contains a class with different api from earlier version\";\n+\n@@ -134,1 +147,8 @@\n-                .shouldContain(\"contains a class with different api from earlier version\");\n+                .shouldContain(failureMessage);\n+\n+        Path malformed = root.resolve(\"zip\").resolve(\"test.jar\");\n+        zip(malformed,\n+            Map.entry(\"\", classes.resolve(\"base\")),\n+            Map.entry(\"META-INF\/versions\/10\", classes.resolve(\"v10\")));\n+\n+        validateJar(malformed.toString(), false, failureMessage);\n@@ -166,0 +186,1 @@\n+        validateJar(jarfile);\n@@ -170,0 +191,1 @@\n+        validateJar(jarfile);\n@@ -174,0 +196,1 @@\n+        validateJar(jarfile);\n@@ -204,0 +227,2 @@\n+        String failureMessage = \"incorrect name\";\n+\n@@ -208,1 +233,8 @@\n-                .shouldContain(\"incorrect name\");\n+                .shouldContain(failureMessage);\n+\n+        Path malformed = root.resolve(\"zip\").resolve(\"test.jar\");\n+        zip(malformed,\n+            Map.entry(\"\", classes.resolve(\"base\")),\n+            Map.entry(\"META-INF\/versions\/10\", classes.resolve(\"v10\")));\n+\n+        validateJar(malformed.toString(), false, failureMessage);\n@@ -214,0 +246,2 @@\n+        validateJar(jarfile);\n+\n@@ -217,1 +251,1 @@\n-                .shouldContain(\"incorrect name\");\n+                .shouldContain(failureMessage);\n@@ -236,0 +270,1 @@\n+        validateJar(jarfile);\n@@ -381,6 +416,8 @@\n-        if (expectSuccess) {\n-            output.shouldHaveExitValue(SUCCESS);\n-        } else {\n-            output.shouldNotHaveExitValue(SUCCESS)\n-                    .shouldContain(expectedMessage);\n-        }\n+        checkResult(output, expectSuccess, expectedMessage);\n+\n+        Path malformed = root.resolve(\"zip\").resolve(\"test.jar\");\n+        zip(malformed,\n+            Map.entry(\"\", classes.resolve(\"base\")),\n+            Map.entry(\"META-INF\/versions\/10\", classes.resolve(\"v10\")));\n+\n+        validateJar(malformed.toString(), expectSuccess, expectedMessage);\n@@ -420,0 +457,48 @@\n+\n+    @SafeVarargs\n+    private void zip(Path file, Map.Entry<String, Path>... copies) throws IOException {\n+        Files.createDirectories(file.getParent());\n+        Files.deleteIfExists(file);\n+        try (FileSystem zipfs = FileSystems.newFileSystem(file, Map.of(\"create\", \"true\"))) {\n+            for (var entry : copies) {\n+                Path dstDir = zipfs.getPath(entry.getKey());\n+                Path srcDir = entry.getValue();\n+\n+                Files.createDirectories(dstDir);\n+\n+                try (Stream<Path> stream = Files.walk(srcDir)) {\n+                    stream.filter(Files::isRegularFile).forEach(srcFile -> {\n+                        try {\n+                            Path relativePath = srcDir.relativize(srcFile);\n+                            Path dst = dstDir.resolve(relativePath.toString());\n+                            Path dstParent = dst.getParent();\n+                            if (dstParent != null)\n+                                Files.createDirectories(dstParent);\n+                            Files.copy(srcFile, dst);\n+                        } catch (IOException e) {\n+                            throw new RuntimeException(e);\n+                        }\n+                    });\n+                }\n+            }\n+        }\n+    }\n+\n+    private static OutputAnalyzer checkResult(OutputAnalyzer result, boolean isAcceptable, String failureMessage) {\n+        if (isAcceptable) {\n+            result.shouldHaveExitValue(SUCCESS);\n+        } else {\n+            result.shouldNotHaveExitValue(SUCCESS)\n+                    .shouldContain(failureMessage);\n+        }\n+\n+        return result;\n+    }\n+\n+    private OutputAnalyzer validateJar(String jarFile) throws Throwable {\n+        return validateJar(jarFile, true, \"\");\n+    }\n+\n+    private OutputAnalyzer validateJar(String jarFile, boolean shouldSucceed, String failureMessage) throws Throwable {\n+        return checkResult(jar(\"--validate\", \"--file\", jarFile), shouldSucceed, failureMessage);\n+    }\n","filename":"test\/jdk\/tools\/jar\/multiRelease\/ApiValidatorTest.java","additions":101,"deletions":16,"binary":false,"changes":117,"status":"modified"}]}