{"files":[{"patch":"@@ -537,1 +537,0 @@\n-    Node* ld_offs = ld_addp->in(AddPNode::Offset);\n@@ -541,1 +540,5 @@\n-    if (ary_t != NULL) {\n+    \/\/ This is a load from a cloned array. The corresponding arraycopy ac must\n+    \/\/ have set the value for the load and we can return ac but only if the load\n+    \/\/ is known to be within bounds. This is checked below.\n+    if (ary_t != NULL && ld_addp->is_AddP()) {\n+      Node* ld_offs = ld_addp->in(AddPNode::Offset);\n@@ -550,0 +553,1 @@\n+        \/\/ The load is known to be within bounds. It receives its value from ac.\n@@ -552,0 +556,1 @@\n+      \/\/ The load is known to be out-of-bounds.\n@@ -553,0 +558,2 @@\n+    \/\/ The load could be out-of-bounds. It must not be hoisted but must remain\n+    \/\/ dependent on the runtime range check. This is achieved by returning NULL.\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @requires vm.gc.Serial\n","filename":"test\/hotspot\/jtreg\/compiler\/arraycopy\/TestOutOfBoundsArrayLoad.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}