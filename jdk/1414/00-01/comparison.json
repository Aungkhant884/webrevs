{"files":[{"patch":"@@ -41,0 +41,4 @@\n+     * <p>Note that in some cases, the returned array can be empty. This can occur\n+     * if this annotated type represents a non-parameterized type nested within\n+     * a parameterized type.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AnnotatedParameterizedType.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,4 +29,1 @@\n-import java.lang.reflect.AnnotatedType;\n-import java.lang.reflect.Executable;\n-import java.lang.reflect.ParameterizedType;\n-import java.lang.reflect.Type;\n+import java.lang.reflect.*;\n@@ -160,1 +157,1 @@\n-        checkTypeOfGetType(instance4.getClass().getConstructors()[0], false,\n+        checkAnnotatedReceiverType(instance4.getClass().getConstructors()[0], false,\n@@ -162,1 +159,1 @@\n-        checkTypeOfGetType(instance5.getClass().getConstructors()[0], true,\n+        checkAnnotatedReceiverType(instance5.getClass().getConstructors()[0], true,\n@@ -164,1 +161,1 @@\n-        checkTypeOfGetType(instance6.getClass().getConstructors()[0], true,\n+        checkAnnotatedReceiverType(instance6.getClass().getConstructors()[0], true,\n@@ -166,1 +163,1 @@\n-        checkTypeOfGetType(outer.getClass().getMethod(\"method0\"), false,\n+        checkAnnotatedReceiverType(outer.getClass().getMethod(\"method0\"), false,\n@@ -168,1 +165,1 @@\n-        checkTypeOfGetType(instance4.getClass().getMethod(\"innerMethod4\"), true,\n+        checkAnnotatedReceiverType(instance4.getClass().getMethod(\"innerMethod4\"), true,\n@@ -170,1 +167,1 @@\n-        checkTypeOfGetType(instance5.getClass().getMethod(\"innerMethod5\"), true,\n+        checkAnnotatedReceiverType(instance5.getClass().getMethod(\"innerMethod5\"), true,\n@@ -172,1 +169,1 @@\n-        checkTypeOfGetType(instance2.getClass().getMethod(\"innerMethod2\"), false,\n+        checkAnnotatedReceiverType(instance2.getClass().getMethod(\"innerMethod2\"), false,\n@@ -174,1 +171,1 @@\n-        checkTypeOfGetType(instance3.getClass().getMethod(\"innerMethod3\"), false,\n+        checkAnnotatedReceiverType(instance3.getClass().getMethod(\"innerMethod3\"), false,\n@@ -178,1 +175,1 @@\n-        checkTypeOfGetType(instance7.getClass().getMethod(\"innerMethod7\"), true,\n+        checkAnnotatedReceiverType(instance7.getClass().getMethod(\"innerMethod7\"), true,\n@@ -206,1 +203,1 @@\n-    private static void checkTypeOfGetType(Executable e, boolean shouldBeParameterized, String msg) {\n+    private static void checkAnnotatedReceiverType(Executable e, boolean shouldBeParameterized, String msg) {\n@@ -212,0 +209,16 @@\n+\n+        \/\/ Test we can get the potentially empty annotated actual type arguments array\n+        if (shouldBeParameterized) {\n+            try {\n+                ParameterizedType t1 = (ParameterizedType)t;\n+                AnnotatedParameterizedType at1 = (AnnotatedParameterizedType)e.getAnnotatedReceiverType();\n+\n+                if (t1.getActualTypeArguments().length != at1.getAnnotatedActualTypeArguments().length) {\n+                    System.err.println(t1 + \"'s actual type arguments can't match \" + at1);\n+                    failures++;\n+                }\n+            } catch (ClassCastException cce) {\n+                System.err.println(\"Couldn't get potentially empty actual type arguments: \" + cce.getMessage());\n+                failures++;\n+            }\n+        }\n","filename":"test\/jdk\/java\/lang\/annotation\/typeAnnotations\/GetAnnotatedReceiverType.java","additions":27,"deletions":14,"binary":false,"changes":41,"status":"modified"}]}