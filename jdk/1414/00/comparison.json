{"files":[{"patch":"@@ -665,1 +665,1 @@\n-                resolveToOwnerType(enclosingClass),\n+                parameterize(enclosingClass),\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Constructor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -702,1 +702,1 @@\n-                resolveToOwnerType(getDeclaringClass()),\n+                parameterize(getDeclaringClass()),\n@@ -706,0 +706,19 @@\n+    Type parameterize(Class<?> c) {\n+        Class<?> ownerClass = c.getDeclaringClass();\n+        TypeVariable<?>[] typeVars = c.getTypeParameters();\n+\n+        if (ownerClass == null) { \/\/ base case\n+            if (typeVars.length == 0)\n+                return c;\n+            else\n+                return ParameterizedTypeImpl.make(c, typeVars, null);\n+        }\n+\n+        \/\/ Resolve owner\n+        Type ownerType = parameterize(ownerClass);\n+        if (ownerType instanceof Class<?> && typeVars.length == 0) \/\/ We have yet to encounter type parameters\n+            return c;\n+        else\n+            return ParameterizedTypeImpl.make(c, typeVars, ownerType);\n+    }\n+\n@@ -756,20 +775,0 @@\n-\n-    static Type resolveToOwnerType(Class<?> c) {\n-        TypeVariable<?>[] v = c.getTypeParameters();\n-        Type o = resolveOwner(c);\n-        Type t;\n-        if (o != null || v.length > 0) {\n-            t = ParameterizedTypeImpl.make(c, v, o);\n-        } else {\n-            t = c;\n-        }\n-        return t;\n-    }\n-\n-    private static Type resolveOwner(Class<?> t) {\n-        if (Modifier.isStatic(t.getModifiers()) || !(t.isLocalClass() || t.isMemberClass() || t.isAnonymousClass())) {\n-            return null;\n-        }\n-        Class<?> d = t.getDeclaringClass();\n-        return ParameterizedTypeImpl.make(d, d.getTypeParameters(), resolveOwner(d));\n-    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Executable.java","additions":20,"deletions":21,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8024915 8044629\n+ * @bug 8024915 8044629 8256693\n@@ -31,1 +31,2 @@\n-import java.util.Arrays;\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n@@ -65,0 +66,1 @@\n+        public void innerMethod2(GetAnnotatedReceiverType.Inner2 this) {}\n@@ -68,0 +70,5 @@\n+            public void innerMethod3(GetAnnotatedReceiverType.Inner2.Inner3 this) {}\n+\n+            public class Inner7<T> {\n+                public void innerMethod7(GetAnnotatedReceiverType.Inner2.Inner3.Inner7<T> this) {}\n+            }\n@@ -89,0 +96,14 @@\n+    public class Inner4<T> {\n+        public Inner4(GetAnnotatedReceiverType GetAnnotatedReceiverType.this) {}\n+        public void innerMethod4(GetAnnotatedReceiverType.Inner4<T> this) {}\n+\n+        public class Inner5 {\n+            public Inner5(GetAnnotatedReceiverType.Inner4<T> GetAnnotatedReceiverType.Inner4.this) {}\n+            public void innerMethod5(GetAnnotatedReceiverType.Inner4<T>.Inner5 this) {}\n+\n+            public class Inner6 {\n+                public Inner6(GetAnnotatedReceiverType.Inner4<T>.Inner5 GetAnnotatedReceiverType.Inner4.Inner5.this) {}\n+            }\n+        }\n+    }\n+\n@@ -135,0 +156,26 @@\n+        Inner4<?> instance4 = outer.new Inner4<String>();\n+        Inner4<?>.Inner5 instance5 = instance4.new Inner5();\n+        Inner4<?>.Inner5.Inner6 instance6 = instance5.new Inner6();\n+\n+        checkTypeOfGetType(instance4.getClass().getConstructors()[0], false,\n+                \"The type of .getAnnotatedReceiverType().getType() for this constructor should be\");\n+        checkTypeOfGetType(instance5.getClass().getConstructors()[0], true,\n+                \"The type of .getAnnotatedReceiverType().getType() for this constructor should be\");\n+        checkTypeOfGetType(instance6.getClass().getConstructors()[0], true,\n+                \"The type of .getAnnotatedReceiverType().getType() for this constructor should be\");\n+        checkTypeOfGetType(outer.getClass().getMethod(\"method0\"), false,\n+                \"The type of .getAnnotatedReceiverType().getType() for this method should be\");\n+        checkTypeOfGetType(instance4.getClass().getMethod(\"innerMethod4\"), true,\n+                \"The type of .getAnnotatedReceiverType().getType() for this method should be\");\n+        checkTypeOfGetType(instance5.getClass().getMethod(\"innerMethod5\"), true,\n+                \"The type of .getAnnotatedReceiverType().getType() for this method should be\");\n+        checkTypeOfGetType(instance2.getClass().getMethod(\"innerMethod2\"), false,\n+                \"The type of .getAnnotatedReceiverType().getType() for this method should be\");\n+        checkTypeOfGetType(instance3.getClass().getMethod(\"innerMethod3\"), false,\n+                \"The type of .getAnnotatedReceiverType().getType() for this method should be\");\n+\n+        Inner2.Inner3.Inner7<?> instance7 = instance3.new Inner7<String>();\n+        checkTypeOfGetType(instance7.getClass().getMethod(\"innerMethod7\"), true,\n+                \"The type of .getAnnotatedReceiverType().getType() for this method should be\");\n+        recursiveCheckAnnotatedOwnerTypes(instance7.getClass().getMethod(\"innerMethod7\").getAnnotatedReceiverType());\n+\n@@ -137,1 +184,1 @@\n-        else if (tests != 15)\n+        else if (tests != 25)\n@@ -158,0 +205,21 @@\n+\n+    private static void checkTypeOfGetType(Executable e, boolean shouldBeParameterized, String msg) {\n+        Type t = e.getAnnotatedReceiverType().getType();\n+        if (shouldBeParameterized != (t instanceof ParameterizedType)) {\n+            failures++;\n+            System.err.println(e + \", \" + msg + \" \" + (shouldBeParameterized ? \"ParameterizedType\" : \"Class\") + \", found: \" + t.getClass().getSimpleName());\n+        }\n+        tests++;\n+    }\n+\n+    private static void recursiveCheckAnnotatedOwnerTypes(AnnotatedType t) {\n+        AnnotatedType check = t.getAnnotatedOwnerType();\n+        do {\n+            if (!(check.getType() instanceof Class<?>)) {\n+                failures++;\n+                System.err.println(\"Expecting only instances of Class returned for .getType() found \" + check.getType().getClass().getSimpleName());\n+            }\n+            check = check.getAnnotatedOwnerType();\n+        } while (check != null);\n+        tests++;\n+    }\n","filename":"test\/jdk\/java\/lang\/annotation\/typeAnnotations\/GetAnnotatedReceiverType.java","additions":71,"deletions":3,"binary":false,"changes":74,"status":"modified"}]}