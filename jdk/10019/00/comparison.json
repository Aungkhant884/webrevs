{"files":[{"patch":"@@ -284,1 +284,1 @@\n-                                         Address dst, Register val, Register tmp1, Register tmp2) {\n+                                         Address dst, Register val, Register tmp1, Register tmp2, Register tmp3) {\n@@ -287,2 +287,2 @@\n-    if (dst.base() != r3) {\n-      __ mov(r3, dst.base());\n+    if (dst.base() != tmp3) {\n+      __ mov(tmp3, dst.base());\n@@ -291,1 +291,1 @@\n-    __ lea(r3, dst);\n+    __ lea(tmp3, dst);\n@@ -295,1 +295,1 @@\n-                       r3 \/* obj *\/,\n+                       tmp3 \/* obj *\/,\n@@ -303,1 +303,1 @@\n-    BarrierSetAssembler::store_at(masm, decorators, type, Address(r3, 0), noreg, noreg, noreg);\n+    BarrierSetAssembler::store_at(masm, decorators, type, Address(tmp3, 0), noreg, noreg, noreg, noreg);\n@@ -311,1 +311,1 @@\n-    BarrierSetAssembler::store_at(masm, decorators, type, Address(r3, 0), val, noreg, noreg);\n+    BarrierSetAssembler::store_at(masm, decorators, type, Address(tmp3, 0), val, noreg, noreg, noreg);\n@@ -313,1 +313,1 @@\n-                          r3 \/* store_adr *\/,\n+                          tmp3 \/* store_adr *\/,\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/g1\/g1BarrierSetAssembler_aarch64.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-                            Address dst, Register val, Register tmp1, Register tmp2);\n+                            Address dst, Register val, Register tmp1, Register tmp2, Register tmp3);\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/g1\/g1BarrierSetAssembler_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-                                   Address dst, Register val, Register tmp1, Register tmp2) {\n+                                   Address dst, Register val, Register tmp1, Register tmp2, Register tmp3) {\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shared\/barrierSetAssembler_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-                        Address dst, Register val, Register tmp1, Register tmp2);\n+                        Address dst, Register val, Register tmp1, Register tmp2, Register tmp3);\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shared\/barrierSetAssembler_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-                                                Address dst, Register val, Register tmp1, Register tmp2) {\n+                                                Address dst, Register val, Register tmp1, Register tmp2, Register tmp3) {\n@@ -88,1 +88,1 @@\n-  BarrierSetAssembler::store_at(masm, decorators, type, dst, val, noreg, noreg);\n+  BarrierSetAssembler::store_at(masm, decorators, type, dst, val, noreg, noreg, noreg);\n@@ -94,2 +94,2 @@\n-      __ lea(r3, dst);\n-      store_check(masm, r3, dst);\n+      __ lea(tmp3, dst);\n+      store_check(masm, tmp3, dst);\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shared\/cardTableBarrierSetAssembler_aarch64.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-                            Address dst, Register val, Register tmp1, Register tmp2);\n+                            Address dst, Register val, Register tmp1, Register tmp2, Register tmp3);\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shared\/cardTableBarrierSetAssembler_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-                                         Address dst, Register val, Register tmp1, Register tmp2) {\n+                                         Address dst, Register val, Register tmp1, Register tmp2, Register tmp3) {\n@@ -50,1 +50,1 @@\n-    oop_store_at(masm, decorators, type, dst, val, tmp1, tmp2);\n+    oop_store_at(masm, decorators, type, dst, val, tmp1, tmp2, tmp3);\n@@ -52,1 +52,1 @@\n-    BarrierSetAssembler::store_at(masm, decorators, type, dst, val, tmp1, tmp2);\n+    BarrierSetAssembler::store_at(masm, decorators, type, dst, val, tmp1, tmp2, tmp3);\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shared\/modRefBarrierSetAssembler_aarch64.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-                            Address dst, Register val, Register tmp1, Register tmp2) = 0;\n+                            Address dst, Register val, Register tmp1, Register tmp2, Register tmp3) = 0;\n@@ -51,1 +51,1 @@\n-                        Address dst, Register val, Register tmp1, Register tmp2);\n+                        Address dst, Register val, Register tmp1, Register tmp2, Register tmp3);\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shared\/modRefBarrierSetAssembler_aarch64.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -377,1 +377,1 @@\n-                                             Address dst, Register val, Register tmp1, Register tmp2) {\n+                                             Address dst, Register val, Register tmp1, Register tmp2, Register tmp3) {\n@@ -380,1 +380,1 @@\n-    BarrierSetAssembler::store_at(masm, decorators, type, dst, val, tmp1, tmp2);\n+    BarrierSetAssembler::store_at(masm, decorators, type, dst, val, tmp1, tmp2, tmp3);\n@@ -386,2 +386,2 @@\n-    if (dst.base() != r3) {\n-      __ mov(r3, dst.base());\n+    if (dst.base() != tmp3) {\n+      __ mov(tmp3, dst.base());\n@@ -390,1 +390,1 @@\n-    __ lea(r3, dst);\n+    __ lea(tmp3, dst);\n@@ -394,1 +394,1 @@\n-                               r3 \/* obj *\/,\n+                               tmp3 \/* obj *\/,\n@@ -402,1 +402,1 @@\n-    BarrierSetAssembler::store_at(masm, decorators, type, Address(r3, 0), noreg, noreg, noreg);\n+    BarrierSetAssembler::store_at(masm, decorators, type, Address(tmp3, 0), noreg, noreg, noreg, noreg);\n@@ -411,1 +411,1 @@\n-    BarrierSetAssembler::store_at(masm, decorators, type, Address(r3, 0), val, noreg, noreg);\n+    BarrierSetAssembler::store_at(masm, decorators, type, Address(tmp3, 0), val, noreg, noreg, noreg);\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/shenandoahBarrierSetAssembler_aarch64.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-                        Address dst, Register val, Register tmp1, Register tmp2);\n+                        Address dst, Register val, Register tmp1, Register tmp2, Register tmp3);\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/shenandoahBarrierSetAssembler_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -111,1 +111,2 @@\n-                                        Register tmp2) {\n+                                        Register tmp2,\n+                                        Register tmp3) {\n@@ -119,1 +120,1 @@\n-      \/\/ tmp1 and tmp2 are often set to noreg.\n+      \/\/ tmp1, tmp2 and tmp3 are often set to noreg.\n@@ -134,1 +135,1 @@\n-  BarrierSetAssembler::store_at(masm, decorators, type, dst, val, tmp1, tmp2);\n+  BarrierSetAssembler::store_at(masm, decorators, type, dst, val, tmp1, tmp2, noreg);\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/z\/zBarrierSetAssembler_aarch64.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -62,1 +62,2 @@\n-                        Register tmp2);\n+                        Register tmp2,\n+                        Register tmp3);\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/z\/zBarrierSetAssembler_aarch64.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -4405,1 +4405,1 @@\n-                                     Register tmp1, Register thread_tmp) {\n+                                     Register tmp1, Register tmp2, Register tmp3) {\n@@ -4410,1 +4410,1 @@\n-    bs->BarrierSetAssembler::store_at(this, decorators, type, dst, src, tmp1, thread_tmp);\n+    bs->BarrierSetAssembler::store_at(this, decorators, type, dst, src, tmp1, tmp2, tmp3);\n@@ -4412,1 +4412,1 @@\n-    bs->store_at(this, decorators, type, dst, src, tmp1, thread_tmp);\n+    bs->store_at(this, decorators, type, dst, src, tmp1, tmp2, tmp3);\n@@ -4427,2 +4427,2 @@\n-                                    Register thread_tmp, DecoratorSet decorators) {\n-  access_store_at(T_OBJECT, IN_HEAP | decorators, dst, src, tmp1, thread_tmp);\n+                                    Register tmp2, Register tmp3, DecoratorSet decorators) {\n+  access_store_at(T_OBJECT, IN_HEAP | decorators, dst, src, tmp1, tmp2, tmp3);\n@@ -4433,1 +4433,1 @@\n-  access_store_at(T_OBJECT, IN_HEAP, dst, noreg, noreg, noreg);\n+  access_store_at(T_OBJECT, IN_HEAP, dst, noreg, noreg, noreg, noreg);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -854,1 +854,1 @@\n-                       Register tmp1, Register tmp_thread);\n+                       Register tmp1, Register tmp2, Register tmp3);\n@@ -862,1 +862,1 @@\n-                      Register tmp_thread = noreg, DecoratorSet decorators = 0);\n+                      Register tmp2 = noreg, Register tmp3 = noreg, DecoratorSet decorators = 0);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1856,1 +1856,1 @@\n-    __ store_heap_oop(__ post(to, UseCompressedOops ? 4 : 8), copied_oop, noreg, noreg, AS_RAW);  \/\/ store the oop\n+    __ store_heap_oop(__ post(to, UseCompressedOops ? 4 : 8), copied_oop, noreg, noreg, noreg, AS_RAW);  \/\/ store the oop\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -149,1 +149,1 @@\n-  __ store_heap_oop(dst, val, r10, r1, decorators);\n+  __ store_heap_oop(dst, val, r10, r1, r3, decorators);\n@@ -1062,1 +1062,1 @@\n-  __ access_store_at(T_INT, IN_HEAP | IS_ARRAY, Address(r3, r1, Address::uxtw(2)), r0, noreg, noreg);\n+  __ access_store_at(T_INT, IN_HEAP | IS_ARRAY, Address(r3, r1, Address::uxtw(2)), r0, noreg, noreg, noreg);\n@@ -1074,1 +1074,1 @@\n-  __ access_store_at(T_LONG, IN_HEAP | IS_ARRAY, Address(r3, r1, Address::uxtw(3)), r0, noreg, noreg);\n+  __ access_store_at(T_LONG, IN_HEAP | IS_ARRAY, Address(r3, r1, Address::uxtw(3)), r0, noreg, noreg, noreg);\n@@ -1086,1 +1086,1 @@\n-  __ access_store_at(T_FLOAT, IN_HEAP | IS_ARRAY, Address(r3, r1, Address::uxtw(2)), noreg \/* ftos *\/, noreg, noreg);\n+  __ access_store_at(T_FLOAT, IN_HEAP | IS_ARRAY, Address(r3, r1, Address::uxtw(2)), noreg \/* ftos *\/, noreg, noreg, noreg);\n@@ -1098,1 +1098,1 @@\n-  __ access_store_at(T_DOUBLE, IN_HEAP | IS_ARRAY, Address(r3, r1, Address::uxtw(3)), noreg \/* dtos *\/, noreg, noreg);\n+  __ access_store_at(T_DOUBLE, IN_HEAP | IS_ARRAY, Address(r3, r1, Address::uxtw(3)), noreg \/* dtos *\/, noreg, noreg, noreg);\n@@ -1175,1 +1175,1 @@\n-  __ access_store_at(T_BYTE, IN_HEAP | IS_ARRAY, Address(r3, r1, Address::uxtw(0)), r0, noreg, noreg);\n+  __ access_store_at(T_BYTE, IN_HEAP | IS_ARRAY, Address(r3, r1, Address::uxtw(0)), r0, noreg, noreg, noreg);\n@@ -1188,1 +1188,1 @@\n-  __ access_store_at(T_CHAR, IN_HEAP | IS_ARRAY, Address(r3, r1, Address::uxtw(1)), r0, noreg, noreg);\n+  __ access_store_at(T_CHAR, IN_HEAP | IS_ARRAY, Address(r3, r1, Address::uxtw(1)), r0, noreg, noreg, noreg);\n@@ -2690,1 +2690,1 @@\n-    __ access_store_at(T_BYTE, IN_HEAP, field, r0, noreg, noreg);\n+    __ access_store_at(T_BYTE, IN_HEAP, field, r0, noreg, noreg, noreg);\n@@ -2705,1 +2705,1 @@\n-    __ access_store_at(T_BOOLEAN, IN_HEAP, field, r0, noreg, noreg);\n+    __ access_store_at(T_BOOLEAN, IN_HEAP, field, r0, noreg, noreg, noreg);\n@@ -2736,1 +2736,1 @@\n-    __ access_store_at(T_INT, IN_HEAP, field, r0, noreg, noreg);\n+    __ access_store_at(T_INT, IN_HEAP, field, r0, noreg, noreg, noreg);\n@@ -2751,1 +2751,1 @@\n-    __ access_store_at(T_CHAR, IN_HEAP, field, r0, noreg, noreg);\n+    __ access_store_at(T_CHAR, IN_HEAP, field, r0, noreg, noreg, noreg);\n@@ -2766,1 +2766,1 @@\n-    __ access_store_at(T_SHORT, IN_HEAP, field, r0, noreg, noreg);\n+    __ access_store_at(T_SHORT, IN_HEAP, field, r0, noreg, noreg, noreg);\n@@ -2781,1 +2781,1 @@\n-    __ access_store_at(T_LONG, IN_HEAP, field, r0, noreg, noreg);\n+    __ access_store_at(T_LONG, IN_HEAP, field, r0, noreg, noreg, noreg);\n@@ -2796,1 +2796,1 @@\n-    __ access_store_at(T_FLOAT, IN_HEAP, field, noreg \/* ftos *\/, noreg, noreg);\n+    __ access_store_at(T_FLOAT, IN_HEAP, field, noreg \/* ftos *\/, noreg, noreg, noreg);\n@@ -2813,1 +2813,1 @@\n-    __ access_store_at(T_DOUBLE, IN_HEAP, field, noreg \/* dtos *\/, noreg, noreg);\n+    __ access_store_at(T_DOUBLE, IN_HEAP, field, noreg \/* dtos *\/, noreg, noreg, noreg);\n@@ -2948,1 +2948,1 @@\n-    __ access_store_at(T_LONG, IN_HEAP, field, r0, noreg, noreg);\n+    __ access_store_at(T_LONG, IN_HEAP, field, r0, noreg, noreg, noreg);\n@@ -2951,1 +2951,1 @@\n-    __ access_store_at(T_INT, IN_HEAP, field, r0, noreg, noreg);\n+    __ access_store_at(T_INT, IN_HEAP, field, r0, noreg, noreg, noreg);\n@@ -2954,1 +2954,1 @@\n-    __ access_store_at(T_BOOLEAN, IN_HEAP, field, r0, noreg, noreg);\n+    __ access_store_at(T_BOOLEAN, IN_HEAP, field, r0, noreg, noreg, noreg);\n@@ -2957,1 +2957,1 @@\n-    __ access_store_at(T_BYTE, IN_HEAP, field, r0, noreg, noreg);\n+    __ access_store_at(T_BYTE, IN_HEAP, field, r0, noreg, noreg, noreg);\n@@ -2960,1 +2960,1 @@\n-    __ access_store_at(T_SHORT, IN_HEAP, field, r0, noreg, noreg);\n+    __ access_store_at(T_SHORT, IN_HEAP, field, r0, noreg, noreg, noreg);\n@@ -2963,1 +2963,1 @@\n-    __ access_store_at(T_CHAR, IN_HEAP, field, r0, noreg, noreg);\n+    __ access_store_at(T_CHAR, IN_HEAP, field, r0, noreg, noreg, noreg);\n@@ -2966,1 +2966,1 @@\n-    __ access_store_at(T_FLOAT, IN_HEAP, field, noreg \/* ftos *\/, noreg, noreg);\n+    __ access_store_at(T_FLOAT, IN_HEAP, field, noreg \/* ftos *\/, noreg, noreg, noreg);\n@@ -2969,1 +2969,1 @@\n-    __ access_store_at(T_DOUBLE, IN_HEAP, field, noreg \/* dtos *\/, noreg, noreg);\n+    __ access_store_at(T_DOUBLE, IN_HEAP, field, noreg \/* dtos *\/, noreg, noreg, noreg);\n","filename":"src\/hotspot\/cpu\/aarch64\/templateTable_aarch64.cpp","additions":23,"deletions":23,"binary":false,"changes":46,"status":"modified"}]}