{"files":[{"patch":"@@ -3005,0 +3005,6 @@\n+\n+#if INCLUDE_JFR\n+\n+void os::jfr_report_memory_info() {}\n+\n+#endif \/\/ INCLUDE_JFR\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -72,0 +72,3 @@\n+#if INCLUDE_JFR\n+#include \"jfr\/jfrEvents.hpp\"\n+#endif\n@@ -104,0 +107,1 @@\n+  #include <mach\/task_info.h>\n@@ -2456,0 +2460,28 @@\n+\n+#if INCLUDE_JFR\n+\n+void os::jfr_report_memory_info() {\n+#ifdef __APPLE__\n+  mach_task_basic_info info;\n+  mach_msg_type_number_t count = MACH_TASK_BASIC_INFO_COUNT;\n+\n+  kern_return_t ret = task_info(mach_task_self(), MACH_TASK_BASIC_INFO, (task_info_t)&info, &count);\n+  if (ret == KERN_SUCCESS) {\n+    \/\/ Send the RSS JFR event\n+    EventResidentSetSize event;\n+    event.set_size(info.resident_size);\n+    event.set_peak(info.resident_size_max);\n+    event.commit();\n+  } else {\n+    \/\/ Log a warning\n+    static bool first_warning = true;\n+    if (first_warning) {\n+      log_warning(jfr)(\"Error fetching RSS values: task_info failed\");\n+      first_warning = false;\n+    }\n+  }\n+\n+#endif \/\/ __APPLE__\n+}\n+\n+#endif \/\/ INCLUDE_JFR\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -80,0 +80,3 @@\n+#if INCLUDE_JFR\n+#include \"jfr\/jfrEvents.hpp\"\n+#endif\n@@ -2464,0 +2467,22 @@\n+#if INCLUDE_JFR\n+\n+void os::jfr_report_memory_info() {\n+  os::Linux::meminfo_t info;\n+  if (os::Linux::query_process_memory_info(&info)) {\n+    \/\/ Send the RSS JFR event\n+    EventResidentSetSize event;\n+    event.set_size(info.vmrss * K);\n+    event.set_peak(info.vmhwm * K);\n+    event.commit();\n+  } else {\n+    \/\/ Log a warning\n+    static bool first_warning = true;\n+    if (first_warning) {\n+      log_warning(jfr)(\"Error fetching RSS values: query_process_memory_info failed\");\n+      first_warning = false;\n+    }\n+  }\n+}\n+\n+#endif \/\/ INCLUDE_JFR\n+\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -81,0 +81,3 @@\n+#if INCLUDE_JFR\n+#include \"jfr\/jfrEvents.hpp\"\n+#endif\n@@ -6025,0 +6028,27 @@\n+#if INCLUDE_JFR\n+\n+void os::jfr_report_memory_info() {\n+  PROCESS_MEMORY_COUNTERS_EX pmex;\n+  ZeroMemory(&pmex, sizeof(PROCESS_MEMORY_COUNTERS_EX));\n+  pmex.cb = sizeof(pmex);\n+\n+  BOOL ret = GetProcessMemoryInfo(GetCurrentProcess(), (PROCESS_MEMORY_COUNTERS*) &pmex, sizeof(pmex));\n+  if (ret != 0) {\n+    \/\/ Send the RSS JFR event\n+    EventResidentSetSize event;\n+    event.set_size(pmex.WorkingSetSize);\n+    event.set_peak(pmex.PeakWorkingSetSize);\n+    event.commit();\n+  } else {\n+    \/\/ Log a warning\n+    static bool first_warning = true;\n+    if (first_warning) {\n+      log_warning(jfr)(\"Error fetching RSS values: GetProcessMemoryInfo failed\");\n+      first_warning = false;\n+    }\n+  }\n+}\n+\n+#endif \/\/ INCLUDE_JFR\n+\n+\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":30,"deletions":0,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -76,0 +76,5 @@\n+  <Event name=\"ResidentSetSize\" category=\"Java Virtual Machine, Memory\" label=\"Resident Set Size\" description=\"Resident set size of the process\" thread=\"false\" period=\"everyChunk\">\n+    <Field type=\"ulong\" contentType=\"bytes\" name=\"size\" label=\"Resident Set Size\" description=\"Resident set size of the process\" \/>\n+    <Field type=\"ulong\" contentType=\"bytes\" name=\"peak\" label=\"Resident Set Size Peak Value\" description=\"Resident set size peak value of the process\" \/>\n+  <\/Event>\n+\n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xml","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -98,0 +98,4 @@\n+TRACE_REQUEST_FUNC(ResidentSetSize) {\n+  os::jfr_report_memory_info();\n+}\n+\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrPeriodic.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -794,0 +794,3 @@\n+  \/\/ Send JFR memory info event\n+  static void jfr_report_memory_info() NOT_JFR_RETURN();\n+\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -10,0 +10,5 @@\n+    <event name=\"jdk.ResidentSetSize\">\n+      <setting name=\"enabled\">true<\/setting>\n+      <setting name=\"period\">1000 ms<\/setting>\n+    <\/event>\n+\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/default.jfc","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -10,0 +10,5 @@\n+    <event name=\"jdk.ResidentSetSize\">\n+      <setting name=\"enabled\">true<\/setting>\n+      <setting name=\"period\">1000 ms<\/setting>\n+    <\/event>\n+\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/profile.jfc","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.event.runtime;\n+\n+import static jdk.test.lib.Asserts.assertGreaterThan;\n+import static jdk.test.lib.Asserts.assertLessThanOrEqual;\n+import static jdk.test.lib.Asserts.assertTrue;\n+import static jdk.test.lib.Asserts.assertEquals;\n+\n+import java.time.Instant;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import jdk.jfr.Recording;\n+import jdk.jfr.consumer.RecordedEvent;\n+import jdk.test.lib.jfr.EventNames;\n+import jdk.test.lib.jfr.Events;\n+\n+\/**\n+ * @test\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib\n+ * @modules jdk.jfr\n+ *          jdk.management\n+ * @run main\/othervm -Xms16m -Xmx128m -Xlog:gc jdk.jfr.event.runtime.TestResidentSetSizeEvent true\n+ *\/\n+public class TestResidentSetSizeEvent {\n+    private final static String ResidentSetSizeEvent = EventNames.ResidentSetSize;\n+\n+    private final static int Period = 1000;\n+    private final static int K = 1024;\n+\n+  private static ArrayList<byte[]> data = new ArrayList<byte[]>();\n+\n+    private static void generateHeapContents() {\n+        for (int i = 0 ; i < 64; i++) {\n+            for (int j = 0; j < K; j++) {\n+                data.add(new byte[K]);\n+            }\n+        }\n+    }\n+\n+    private static void generateEvents(Recording recording) throws Exception {\n+        recording.enable(ResidentSetSizeEvent).with(\"period\", \"everyChunk\");\n+\n+        recording.start();\n+\n+        \/\/ Generate data to force heap to grow.\n+        generateHeapContents();\n+\n+        recording.stop();\n+    }\n+\n+    private static void verifyExpectedEventTypes(List<RecordedEvent> events) throws Exception {\n+        List<RecordedEvent> filteredEvents = events.stream().filter(e -> e.getEventType().getName().equals(ResidentSetSizeEvent)).toList();\n+\n+        assertGreaterThan(filteredEvents.size(), 0, \"Should exist events of type: \" + ResidentSetSizeEvent);\n+\n+        for (RecordedEvent event : filteredEvents) {\n+            long size = event.getLong(\"size\");\n+            long peak = event.getLong(\"peak\");\n+            assertGreaterThan(size, 0L, \"Should be non-zero\");\n+            assertGreaterThan(peak, 0L, \"Should be non-zero\");\n+            assertLessThanOrEqual(size, peak, \"The size should be less than or equal to peak\");\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        try (Recording recording = new Recording()) {\n+            generateEvents(recording);\n+\n+            var events = Events.fromRecording(recording);\n+            verifyExpectedEventTypes(events);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestResidentSetSizeEvent.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"},{"patch":"@@ -189,0 +189,1 @@\n+    public static final String ResidentSetSize = PREFIX + \"ResidentSetSize\";\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/EventNames.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}