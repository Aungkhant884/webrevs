{"files":[{"patch":"@@ -980,1 +980,1 @@\n-\/\/ Clobbers: rscratch1 if hardware doesn't support FEAT_BITPERM.\n+\/\/ Clobbers: rscratch1, if UseSVE=1 or the hardware doesn't support FEAT_BITPERM.\n@@ -998,14 +998,1 @@\n-  if (UseSVE > 0 && !VM_Version::supports_svebitperm()) {\n-    \/\/ Compress the lowest 8 bytes.\n-    fmovd(dst, vtmp1);\n-    bytemask_compress(dst);\n-    if (lane_cnt <= 8) return;\n-\n-    \/\/ Repeat on higher bytes and join the results.\n-    \/\/ Compress 8 bytes in each iteration.\n-    for (int idx = 1; idx < (lane_cnt \/ 8); idx++) {\n-      sve_extract_integral(rscratch1, T_LONG, vtmp1, idx, vtmp2);\n-      bytemask_compress(rscratch1);\n-      orr(dst, dst, rscratch1, Assembler::LSL, idx << 3);\n-    }\n-  } else if (UseSVE == 2 && VM_Version::supports_svebitperm()) {\n+  if (UseSVE > 1 && VM_Version::supports_svebitperm()) {\n@@ -1045,0 +1032,13 @@\n+  } else if (UseSVE > 0) {\n+    \/\/ Compress the lowest 8 bytes.\n+    fmovd(dst, vtmp1);\n+    bytemask_compress(dst);\n+    if (lane_cnt <= 8) return;\n+\n+    \/\/ Repeat on higher bytes and join the results.\n+    \/\/ Compress 8 bytes in each iteration.\n+    for (int idx = 1; idx < (lane_cnt \/ 8); idx++) {\n+      sve_extract_integral(rscratch1, T_LONG, vtmp1, idx, vtmp2);\n+      bytemask_compress(rscratch1);\n+      orr(dst, dst, rscratch1, Assembler::LSL, idx << 3);\n+    }\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"}]}