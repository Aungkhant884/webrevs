{"files":[{"patch":"@@ -334,1 +334,1 @@\n-                            default -> c;\n+                            default  -> c;\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/internal\/jshell\/tool\/ArgTokenizer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -214,24 +214,22 @@\n-            switch (unitTree.getKind()) {\n-                case IMPORT:\n-                    return processImport(userSource, compileSourceInt);\n-                case VARIABLE:\n-                    return processVariables(userSource, units, compileSourceInt, pt);\n-                case EXPRESSION_STATEMENT:\n-                    return processExpression(userSource, unitTree, compileSourceInt, pt);\n-                case CLASS:\n-                    return processClass(userSource, unitTree, compileSourceInt, SubKind.CLASS_SUBKIND, pt);\n-                case ENUM:\n-                    return processClass(userSource, unitTree, compileSourceInt, SubKind.ENUM_SUBKIND, pt);\n-                case ANNOTATION_TYPE:\n-                    return processClass(userSource, unitTree, compileSourceInt, SubKind.ANNOTATION_TYPE_SUBKIND, pt);\n-                case INTERFACE:\n-                    return processClass(userSource, unitTree, compileSourceInt, SubKind.INTERFACE_SUBKIND, pt);\n-                case RECORD:\n-                    @SuppressWarnings(\"preview\")\n-                    List<Snippet> snippets = processClass(userSource, unitTree, compileSourceInt, SubKind.RECORD_SUBKIND, pt);\n-                    return snippets;\n-                case METHOD:\n-                    return processMethod(userSource, unitTree, compileSourceInt, pt);\n-                default:\n-                    return processStatement(userSource, compileSourceInt);\n-            }\n+            return switch (unitTree.getKind()) {\n+                case IMPORT\n+                    -> processImport(userSource, compileSourceInt);\n+                case VARIABLE\n+                    -> processVariables(userSource, units, compileSourceInt, pt);\n+                case EXPRESSION_STATEMENT\n+                    -> processExpression(userSource, unitTree, compileSourceInt, pt);\n+                case CLASS\n+                    -> processClass(userSource, unitTree, compileSourceInt, SubKind.CLASS_SUBKIND, pt);\n+                case ENUM\n+                    -> processClass(userSource, unitTree, compileSourceInt, SubKind.ENUM_SUBKIND, pt);\n+                case ANNOTATION_TYPE\n+                    -> processClass(userSource, unitTree, compileSourceInt, SubKind.ANNOTATION_TYPE_SUBKIND, pt);\n+                case INTERFACE\n+                    -> processClass(userSource, unitTree, compileSourceInt, SubKind.INTERFACE_SUBKIND, pt);\n+                case RECORD\n+                    -> processClass(userSource, unitTree, compileSourceInt, SubKind.RECORD_SUBKIND, pt);\n+                case METHOD\n+                    -> processMethod(userSource, unitTree, compileSourceInt, pt);\n+                default\n+                    -> processStatement(userSource, compileSourceInt);\n+            };\n@@ -373,4 +371,6 @@\n-                    case \"byte\", \"short\", \"int\" -> \"0\";\n-                    case \"long\" -> \"0L\";\n-                    case \"float\" -> \"0.0f\";\n-                    case \"double\" -> \"0.0d\";\n+                    case \"byte\",\n+                         \"short\",\n+                         \"int\"     -> \"0\";\n+                    case \"long\"    -> \"0L\";\n+                    case \"float\"   -> \"0.0f\";\n+                    case \"double\"  -> \"0.0d\";\n@@ -378,2 +378,2 @@\n-                    case \"char\" -> \"'\\\\u0000'\";\n-                    default -> \"null\";\n+                    case \"char\"    -> \"'\\\\u0000'\";\n+                    default        -> \"null\";\n@@ -848,1 +848,1 @@\n-            case IMPORT -> state.outerMap.wrapImport(Wrap.simpleWrap(compileSource), snip);\n+            case IMPORT     -> state.outerMap.wrapImport(Wrap.simpleWrap(compileSource), snip);\n@@ -850,2 +850,4 @@\n-            case VAR, TYPE_DECL, METHOD -> state.outerMap.wrapInTrialClass(Wrap.classMemberWrap(compileSource));\n-            default -> state.outerMap.wrapInTrialClass(Wrap.methodWrap(compileSource));\n+            case VAR,\n+                 TYPE_DECL,\n+                 METHOD     -> state.outerMap.wrapInTrialClass(Wrap.classMemberWrap(compileSource));\n+            default         -> state.outerMap.wrapInTrialClass(Wrap.methodWrap(compileSource));\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/Eval.java","additions":35,"deletions":33,"binary":false,"changes":68,"status":"modified"}]}