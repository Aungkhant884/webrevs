{"files":[{"patch":"@@ -76,0 +76,6 @@\n+    private final static int NETSCAPE_SLOT_ID = 0x1;\n+\n+    private final static int PRIVATE_KEY_SLOT_ID = 0x2;\n+\n+    private final static int FIPS_SLOT_ID = 0x3;\n+\n@@ -395,1 +401,1 @@\n-                boolean fips, int slot) {\n+                int slotIndex, int slotId) {\n@@ -401,3 +407,5 @@\n-                if (fips == false) {\n-                    type = (slot == 0) ? ModuleType.CRYPTO : ModuleType.KEYSTORE;\n-                } else {\n+                if (slotId == NETSCAPE_SLOT_ID) {\n+                    type = ModuleType.CRYPTO;\n+                } else if (slotId == PRIVATE_KEY_SLOT_ID) {\n+                    type = ModuleType.KEYSTORE;\n+                } else if (slotId == FIPS_SLOT_ID) {\n@@ -405,4 +413,3 @@\n-                    if (slot != 0) {\n-                        throw new RuntimeException\n-                            (\"Slot index should be 0 for FIPS slot\");\n-                    }\n+                } else {\n+                    throw new RuntimeException(\"Unexpected slot ID in the\" +\n+                            \" NSS Internal Module\");\n@@ -429,1 +436,1 @@\n-            this.slot = slot;\n+            this.slot = slotIndex;\n","filename":"src\/jdk.crypto.cryptoki\/share\/classes\/sun\/security\/pkcs11\/Secmod.java","additions":16,"deletions":9,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -173,2 +173,1 @@\n-    jboolean jFIPS;\n-    jint i;\n+    jint i, jSlotID;\n@@ -207,1 +206,1 @@\n-        \"(Ljava\/lang\/String;Ljava\/lang\/String;Ljava\/lang\/String;ZI)V\");\n+        \"(Ljava\/lang\/String;Ljava\/lang\/String;Ljava\/lang\/String;II)V\");\n@@ -233,1 +232,0 @@\n-        jFIPS = module->isFIPS;\n@@ -235,0 +233,6 @@\n+            jSlotID = module->slots[i]->slotID;\n+            if (jDllName == NULL && jSlotID != NETSCAPE_SLOT_ID &&\n+                    jSlotID != PRIVATE_KEY_SLOT_ID && jSlotID != FIPS_SLOT_ID) {\n+                \/\/ Ignore unknown slot IDs in the NSS Internal Module. See JDK-8265462.\n+                continue;\n+            }\n@@ -236,1 +240,1 @@\n-                jLibDir, jDllName, jCommonName, jFIPS, i);\n+                    jLibDir, jDllName, jCommonName, i, jSlotID);\n","filename":"src\/jdk.crypto.cryptoki\/share\/native\/libj2pkcs11\/j2secmod.c","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -54,0 +54,10 @@\n+typedef unsigned short PRUint16;\n+typedef short PRInt16;\n+typedef unsigned int PRUint32;\n+typedef int PRInt32;\n+typedef long long PRInt64;\n+\n+typedef PRUint32 PRIntervalTime;\n+typedef PRInt64 PRTime;\n+\n+typedef struct PK11SlotInfoStr PK11SlotInfo;\n@@ -58,0 +68,98 @@\n+\/* PKCS #11 disable reasons *\/\n+typedef enum {\n+    PK11_DIS_NONE = 0,\n+    PK11_DIS_USER_SELECTED = 1,\n+    PK11_DIS_COULD_NOT_INIT_TOKEN = 2,\n+    PK11_DIS_TOKEN_VERIFY_FAILED = 3,\n+    PK11_DIS_TOKEN_NOT_PRESENT = 4\n+} PK11DisableReasons;\n+\n+\/* represent a pkcs#11 slot reference counted. *\/\n+struct PK11SlotInfoStr {\n+    \/* the PKCS11 function list for this slot *\/\n+    void *functionList;\n+    SECMODModule *module; \/* our parent module *\/\n+    \/* Boolean to indicate the current state of this slot *\/\n+    PRBool needTest;           \/* Has this slot been tested for Export complience *\/\n+    PRBool isPerm;             \/* is this slot a permanment device *\/\n+    PRBool isHW;               \/* is this slot a hardware device *\/\n+    PRBool isInternal;         \/* is this slot one of our internal PKCS #11 devices *\/\n+    PRBool disabled;           \/* is this slot disabled... *\/\n+    PK11DisableReasons reason; \/* Why this slot is disabled *\/\n+    PRBool readOnly;           \/* is the token in this slot read-only *\/\n+    PRBool needLogin;          \/* does the token of the type that needs\n+                                * authentication (still true even if token is logged\n+                                * in) *\/\n+    PRBool hasRandom;          \/* can this token generated random numbers *\/\n+    PRBool defRWSession;       \/* is the default session RW (we open our default\n+                                * session rw if the token can only handle one session\n+                                * at a time. *\/\n+    PRBool isThreadSafe;       \/* copied from the module *\/\n+    \/* The actual flags (many of which are distilled into the above PRBools) *\/\n+    CK_FLAGS flags; \/* flags from PKCS #11 token Info *\/\n+    \/* a default session handle to do quick and dirty functions *\/\n+    CK_SESSION_HANDLE session;\n+    void *sessionLock; \/* lock for this session *\/\n+    \/* our ID *\/\n+    CK_SLOT_ID slotID;\n+    \/* persistant flags saved from startup to startup *\/\n+    unsigned long defaultFlags;\n+    \/* keep track of who is using us so we don't accidently get freed while\n+     * still in use *\/\n+    PRInt32 refCount; \/* to be in\/decremented by atomic calls ONLY! *\/\n+    void *freeListLock;\n+    void *freeSymKeysWithSessionHead;\n+    void *freeSymKeysHead;\n+    int keyCount;\n+    int maxKeyCount;\n+    \/* Password control functions for this slot. many of these are only\n+     * active if the appropriate flag is on in defaultFlags *\/\n+    int askpw;           \/* what our password options are *\/\n+    int timeout;         \/* If we're ask_timeout, what is our timeout time is\n+                          * seconds *\/\n+    int authTransact;    \/* allow multiple authentications off one password if\n+                          * they are all part of the same transaction *\/\n+    PRTime authTime;     \/* when were we last authenticated *\/\n+    int minPassword;     \/* smallest legal password *\/\n+    int maxPassword;     \/* largest legal password *\/\n+    PRUint16 series;     \/* break up the slot info into various groups of\n+                          * inserted tokens so that keys and certs can be\n+                          * invalidated *\/\n+    PRUint16 flagSeries; \/* record the last series for the last event\n+                          * returned for this slot *\/\n+    PRBool flagState;    \/* record the state of the last event returned for this\n+                          * slot. *\/\n+    PRUint16 wrapKey;    \/* current wrapping key for SSL master secrets *\/\n+    CK_MECHANISM_TYPE wrapMechanism;\n+    \/* current wrapping mechanism for current wrapKey *\/\n+    CK_OBJECT_HANDLE refKeys[1];      \/* array of existing wrapping keys for *\/\n+    CK_MECHANISM_TYPE *mechanismList; \/* list of mechanism supported by this\n+                                       * token *\/\n+    int mechanismCount;\n+    \/* cache the certificates stored on the token of this slot *\/\n+    void **cert_array;\n+    int array_size;\n+    int cert_count;\n+    char serial[16];\n+    \/* since these are odd sizes, keep them last. They are odd sizes to\n+     * allow them to become null terminated strings *\/\n+    char slot_name[65];\n+    char token_name[33];\n+    PRBool hasRootCerts;\n+    PRBool hasRootTrust;\n+    PRBool hasRSAInfo;\n+    CK_FLAGS RSAInfoFlags;\n+    PRBool protectedAuthPath;\n+    PRBool isActiveCard;\n+    PRIntervalTime lastLoginCheck;\n+    unsigned int lastState;\n+    \/* for Stan *\/\n+    void *nssToken;\n+    \/* the tokeninfo struct *\/\n+    CK_TOKEN_INFO tokenInfo;\n+    \/* fast mechanism lookup *\/\n+    char mechanismBits[256];\n+    CK_PROFILE_ID *profileList;\n+    int profileCount;\n+};\n+\n@@ -59,18 +167,18 @@\n-    void        *v1;\n-    PRBool      internal;       \/* true of internally linked modules, false\n-                                 * for the loaded modules *\/\n-    PRBool      loaded;         \/* Set to true if module has been loaded *\/\n-    PRBool      isFIPS;         \/* Set to true if module is finst internal *\/\n-    char        *dllName;       \/* name of the shared library which implements\n-                                 * this module *\/\n-    char        *commonName;    \/* name of the module to display to the user *\/\n-    void        *library;       \/* pointer to the library. opaque. used only by\n-                                 * pk11load.c *\/\n-\n-    void        *functionList; \/* The PKCS #11 function table *\/\n-    void        *refLock;       \/* only used pk11db.c *\/\n-    int         refCount;       \/* Module reference count *\/\n-    void        **slots;        \/* array of slot points attached to this mod*\/\n-    int         slotCount;      \/* count of slot in above array *\/\n-    void        *slotInfo;      \/* special info about slots default settings *\/\n-    int         slotInfoCount;  \/* count *\/\n+    void         *v1;\n+    PRBool       internal;       \/* true of internally linked modules, false\n+                                  * for the loaded modules *\/\n+    PRBool       loaded;         \/* Set to true if module has been loaded *\/\n+    PRBool       isFIPS;         \/* Set to true if module is finst internal *\/\n+    char         *dllName;       \/* name of the shared library which implements\n+                                  * this module *\/\n+    char         *commonName;    \/* name of the module to display to the user *\/\n+    void         *library;       \/* pointer to the library. opaque. used only by\n+                                  * pk11load.c *\/\n+\n+    void         *functionList; \/* The PKCS #11 function table *\/\n+    void         *refLock;       \/* only used pk11db.c *\/\n+    int          refCount;       \/* Module reference count *\/\n+    PK11SlotInfo **slots;        \/* array of slot points attached to this mod*\/\n+    int          slotCount;      \/* count of slot in above array *\/\n+    void         *slotInfo;      \/* special info about slots default settings *\/\n+    int          slotInfoCount;  \/* count *\/\n","filename":"src\/jdk.crypto.cryptoki\/share\/native\/libj2pkcs11\/j2secmod.h","additions":126,"deletions":18,"binary":false,"changes":144,"status":"modified"},{"patch":"@@ -105,0 +105,2 @@\n+typedef CK_ULONG CK_PROFILE_ID;\n+\n@@ -108,0 +110,3 @@\n+#define NETSCAPE_SLOT_ID 1\n+#define PRIVATE_KEY_SLOT_ID 2\n+#define FIPS_SLOT_ID 3\n","filename":"src\/jdk.crypto.cryptoki\/share\/native\/libj2pkcs11\/pkcs11t.h","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}