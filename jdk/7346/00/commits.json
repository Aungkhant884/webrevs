[{"commit":{"message":"Fix handling of hidden classes in MetaUtil\n\n7cc137105928ec109a29d9315565f7f49af3cf2b introduced hidden classes with\ninternal names like com\/example\/Foo.1234 that get changed to\ncom.example.Foo\/1234 by Class.getName() which are not properly handled\nby MetaUtil's toInternalName and internalNameToJava"},"files":[{"filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.meta\/src\/jdk\/vm\/ci\/meta\/MetaUtil.java"}],"sha":"909347237638f0ce91911c3caa3e5763258a20a9"},{"commit":{"message":"Test MetaUtil methods toInternalName & internalNameToJava\n\nRemoves the previous test that was comparing the internal name's suffix\nthat returned by toJavaName().\n\nAs of 7cc137105928ec109a29d9315565f7f49af3cf2b\nInnerClassLambdaMetafactory is generating hidden classes instead of\nanonymous ones for lambdas and in hidden classes the internal name's\nsuffix needs to be converted. E.g. Foo$$Lambda$217.0x0000000800d40df0 in\ncom\/example\/Foo$$Lambda$217.0x0000000800d40df0 needs to become\nFoo$$Lambda$217\/0x0000000800d40df0, while previously it was already\nFoo$$Lambda$217\/0x0000000800d40df0"},"files":[{"filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.runtime.test\/src\/jdk\/vm\/ci\/runtime\/test\/TestResolvedJavaType.java"}],"sha":"7a53ddab71ec6632f123f20601bd3a82e81ca832"}]