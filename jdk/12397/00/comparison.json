{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -152,0 +152,31 @@\n+    private static String getCallerTotalSpace(String name) throws IOException {\n+        String root = name.substring(0, name.indexOf(':') + 1) + \"\\\\\";\n+        String cmd = \"fsutil volume diskFree \" + root;\n+        Process p = Runtime.getRuntime().exec(cmd);\n+        try (BufferedReader in = p.inputReader()) {\n+            String line;\n+            while ((line = in.readLine()) != null) {\n+                \/\/\n+                \/\/ The line of the diskFree output which contains the total\n+                \/\/ number of bytes may be formatted as one of the following:\n+                \/\/\n+                \/\/ Total # of bytes             : 161051996160\n+                \/\/ Total # of bytes             : 161051996160 (149.99GB)\n+                \/\/ Total bytes                     : 322,122,547,200 (300.0 GB)\n+                \/\/\n+                if (line.startsWith(\"Total # of bytes\") ||\n+                    line.startsWith(\"Total bytes\")) {\n+                    int colon = line.indexOf(':');\n+                    int paren = line.indexOf('(', colon);\n+                    String s = paren == -1\n+                        ? line.substring(colon + 1)\n+                        : line.substring(colon + 1, paren);\n+                    s = s.trim();\n+                    s = s.replace(\",\", \"\");\n+                    return s;\n+                }\n+            }\n+            throw new RuntimeException(\"Total number of bytes not found\");\n+        }\n+    }\n+\n@@ -180,1 +211,7 @@\n-                    al.add(new Space(name, m.group(2), m.group(3), m.group(4)));\n+                    \/\/ cygwin's df provides the actual total disk space not\n+                    \/\/ accounting for quotas, so use the total size from\n+                    \/\/ diskFree which does account for quotas\n+                    String callerTotalSpace = Platform.isWindows()\n+                        ? getCallerTotalSpace(name)\n+                        : m.group(2);\n+                    al.add(new Space(name, callerTotalSpace, m.group(3), m.group(4)));\n@@ -266,5 +303,4 @@\n-                    \/\/ In Cygwin, 'df' has been observed to account for quotas\n-                    \/\/ when reporting the total disk size, but the total size\n-                    \/\/ reported by GetDiskFreeSpaceExW() has been observed not\n-                    \/\/ to account for the quota in which case the latter value\n-                    \/\/ should be larger.\n+                    \/\/ In Cygwin, 'df' reports the actual total disk size, but\n+                    \/\/ the total size reported by GetDiskFreeSpaceExW accounts\n+                    \/\/ for user quotas, thus the latter value should not exceed\n+                    \/\/ the former.\n@@ -272,2 +308,2 @@\n-                    if (s.total() > ts) {\n-                        fail(s.name() + \" total space\", s.total(), \">\", ts);\n+                    if (ts > s.total()) {\n+                        fail(s.name() + \" total space\", ts, \">\", s.total());\n@@ -276,1 +312,1 @@\n-                    fail(s.name() + \" total space\", s.total(), \"!=\", ts);\n+                    fail(s.name() + \" total space\", ts, \"!=\", s.total());\n@@ -292,1 +328,1 @@\n-            fail(s.name(), s.total(), \">\", fs);\n+            fail(s.name() + \" free space\", fs, \">\", s.total());\n@@ -298,1 +334,1 @@\n-            fail(s.name(), s.total(), \">\", us);\n+            fail(s.name() + \" usable space\", us, \">\", s.total());\n@@ -355,1 +391,1 @@\n-              return;\n+                return;\n@@ -362,1 +398,1 @@\n-              return;\n+                return;\n@@ -404,1 +440,1 @@\n-                fail + pass, fail, first);\n+                       fail + pass, fail, first);\n@@ -452,1 +488,1 @@\n-                fail + pass, fail, first);\n+                       fail + pass, fail, first);\n","filename":"test\/jdk\/java\/io\/File\/GetXSpace.java","additions":52,"deletions":16,"binary":false,"changes":68,"status":"modified"}]}