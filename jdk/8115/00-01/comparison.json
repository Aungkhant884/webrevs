{"files":[{"patch":"@@ -1775,1 +1775,1 @@\n-     * For each one-bit value of the mask, {@code mb} say, from least\n+     * For each one-bit value {@code mb} of the mask, from least\n@@ -1822,1 +1822,1 @@\n-     * For each one-bit value of the mask, {@code mb} say, from least\n+     * For each one-bit value {@code mb} of the mask, from least\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Integer.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1914,1 +1914,1 @@\n-     * For each one-bit value of the mask, {@code mb} say, from least\n+     * For each one-bit value {@code mb} of the mask, from least\n@@ -1962,1 +1962,1 @@\n-     * For each one-bit value of the mask, {@code mb} say, from least\n+     * For each one-bit value {@code mb} of the mask, from least\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Long.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -141,1 +141,1 @@\n-        int size = 32 * (32 + 1) \/ 2; \/\/ 528\n+        int size = 32 * (32 + 1) \/ 2 + 1; \/\/ 528 + 1\n@@ -145,2 +145,3 @@\n-        for (int len = 0; len < 32; len++) {\n-            for (int pos = 0; pos < 32 - len; pos++) {\n+        masks[i++] = 0;\n+        for (int len = 1; len < 32; len++) {\n+            for (int pos = 0; pos <= 32 - len; pos++) {\n@@ -150,0 +151,1 @@\n+        masks[i++] = -1;\n@@ -156,1 +158,1 @@\n-        int size = 64 * (64 + 1) \/ 2; \/\/ 2080\n+        int size = 64 * (64 + 1) \/ 2 + 1; \/\/ 2080 + 1\n@@ -161,2 +163,3 @@\n-        for (int len = 0; len < 64; len++) {\n-            for (int pos = 0; pos < 64 - len; pos++) {\n+        masks[i++] = 0L;\n+        for (int len = 1; len < 64; len++) {\n+            for (int pos = 0; pos <= 64 - len; pos++) {\n@@ -166,0 +169,1 @@\n+        masks[i++] = -1L;\n@@ -247,0 +251,1 @@\n+            assertContiguousMask(i, 0, 0L);\n@@ -251,2 +256,1 @@\n-                    Assert.assertEquals(actualCompress(i, mask), (i & mask) >>> pos);\n-                    Assert.assertEquals(actualExpand(i, mask), (i << pos) & mask);\n+                    assertContiguousMask(i, pos, mask);\n@@ -255,0 +259,1 @@\n+            assertContiguousMask(i, 0, -1L);\n@@ -258,0 +263,4 @@\n+    void assertContiguousMask(int i, int pos, int mask) {\n+        Assert.assertEquals(actualCompress(i, mask), (i & mask) >>> pos);\n+        Assert.assertEquals(actualExpand(i, mask), (i << pos) & mask);\n+    }\n@@ -334,2 +343,3 @@\n-            for (int len = 0; len < 64; len++) {\n-                for (int pos = 0; pos < 64 - len; pos++) {\n+            assertContiguousMask(i, 0, 0L);\n+            for (int len = 1; len < 64; len++) {\n+                for (int pos = 0; pos <= 64 - len; pos++) {\n@@ -338,2 +348,1 @@\n-                    Assert.assertEquals(actualCompress(i, mask), (i & mask) >>> pos);\n-                    Assert.assertEquals(actualExpand(i, mask), (i << pos) & mask);\n+                    assertContiguousMask(i, pos, mask);\n@@ -342,0 +351,1 @@\n+            assertContiguousMask(i, 0, -1L);\n@@ -345,0 +355,5 @@\n+    void assertContiguousMask(long i, int pos, long mask) {\n+        Assert.assertEquals(actualCompress(i, mask), (i & mask) >>> pos);\n+        Assert.assertEquals(actualExpand(i, mask), (i << pos) & mask);\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/AbstractCompressExpandTest.java","additions":27,"deletions":12,"binary":false,"changes":39,"status":"modified"}]}