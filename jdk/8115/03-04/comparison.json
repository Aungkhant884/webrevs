{"files":[{"patch":"@@ -1790,4 +1790,5 @@\n-     * The mask {@code 0xFF00FFF0} selects the 1'st, 2'nd, 3'rd, 6'th and\n-     * 7'th digits of {@code 0xCAFEBABE}. The selected digits occur in the\n-     * resulting compressed value contiguously from the 0'th digit in the\n-     * same order.\n+     * Starting from the least significant digit at position 0 from the\n+     * right, the mask {@code 0xFF00FFF0} selects digits at positions 1, 2,\n+     * 3, 6 and 7 of {@code 0xCAFEBABE}. The selected digits occur in the\n+     * resulting compressed value contiguously from digit position 0 in\n+     * the same order.\n@@ -1798,1 +1799,1 @@\n-     * \/\/ Returns 1 if the n'th bit is set\n+     * \/\/ Returns 1 if the bit at position n is one\n@@ -1818,0 +1819,3 @@\n+     *     \/\/ This implementation follows the description in Hacker's Delight which\n+     *     \/\/ is informative. A more optimal implementation is:\n+     *     \/\/   Integer.compress(i, mask) << -Integer.bitCount(m)\n@@ -1878,1 +1882,2 @@\n-     * The mask {@code 0xFF00FFF0} selects the first five digits of\n+     * Starting from the least significant digit at position 0 from the\n+     * right, the mask {@code 0xFF00FFF0} selects the first five digits of\n@@ -1880,2 +1885,1 @@\n-     * expanded value in order at the 1'st, 2'nd, 3'rd, 6'th and 7'th\n-     * positions.\n+     * expanded value in order at positions 1, 2, 3, 6, and 7.\n@@ -1886,1 +1890,1 @@\n-     * \/\/ Logically shift right the first bit\n+     * \/\/ Logically shift right the bit at position 0\n@@ -1902,2 +1906,2 @@\n-     * The select operation for determining the position of the {@code n}'th\n-     * one-bit in an {@code int} value can be implemented as follows:\n+     * The select operation for determining the position of the one-bit with\n+     * index {@code n} in a {@code int} value can be implemented as follows:\n@@ -1906,1 +1910,1 @@\n-     *     \/\/ the n'th one-bit in i (the mask)\n+     *     \/\/ the one-bit in i (the mask) with index n\n@@ -1908,1 +1912,1 @@\n-     *     \/\/ the position of the n'th one-bit in i\n+     *     \/\/ the bit position of the one-bit with index n\n@@ -1912,1 +1916,1 @@\n-     * \/\/ The 0'th one-bit is at the 1'st bit position\n+     * \/\/ The one-bit with index 0 is at bit position 1\n@@ -1914,1 +1918,1 @@\n-     * \/\/ The 3'rd one-bit is at the 7'th bit position\n+     * \/\/ The one-bit with index 3 is at bit position 7\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Integer.java","additions":19,"deletions":15,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -1929,4 +1929,5 @@\n-     * The mask {@code 0xFF00FFF0} selects the 1'st, 2'nd, 3'rd, 6'th and\n-     * 7'th digits of {@code 0xCAFEBABE}. The selected digits occur in the\n-     * resulting compressed value contiguously from the 0'th digit in the\n-     * same order.\n+     * Starting from the least significant digit at position 0 from the\n+     * right, the mask {@code 0xFF00FFF0} selects digits at positions 1, 2,\n+     * 3, 6 and 7 of {@code 0xCAFEBABE}. The selected digits occur in the\n+     * resulting compressed value contiguously from digit position 0 in\n+     * the same order.\n@@ -1937,1 +1938,1 @@\n-     * \/\/ Returns 1 if the n'th bit is set\n+     * \/\/ Returns 1 if the bit at position n is one\n@@ -1957,0 +1958,3 @@\n+     *     \/\/ This implementation follows the description in Hacker's Delight which\n+     *     \/\/ is informative. A more optimal implementation is:\n+     *     \/\/   Long.compress(i, mask) << -Long.bitCount(m)\n@@ -2017,1 +2021,2 @@\n-     * The mask {@code 0xFF00FFF0} selects the first five digits of\n+     * Starting from the least significant digit at position 0 from the\n+     * right, the mask {@code 0xFF00FFF0} selects the first five digits of\n@@ -2019,2 +2024,1 @@\n-     * expanded value in order at the 1'st, 2'nd, 3'rd, 6'th and 7'th\n-     * positions.\n+     * expanded value in order at positions 1, 2, 3, 6, and 7.\n@@ -2025,1 +2029,1 @@\n-     * \/\/ Logically shift right the first bit\n+     * \/\/ Logically shift right the bit at position 0\n@@ -2041,2 +2045,2 @@\n-     * The select operation for determining the position of the {@code n}'th\n-     * one-bit in a {@code long} value can be implemented as follows:\n+     * The select operation for determining the position of the one-bit with\n+     * index {@code n} in a {@code long} value can be implemented as follows:\n@@ -2045,1 +2049,1 @@\n-     *     \/\/ the n'th one-bit in i (the mask)\n+     *     \/\/ the one-bit in i (the mask) with index n\n@@ -2047,1 +2051,1 @@\n-     *     \/\/ the position of the n'th one-bit in i\n+     *     \/\/ the bit position of the one-bit with index n\n@@ -2051,1 +2055,1 @@\n-     * \/\/ The 0'th one-bit is at the 1'st bit position\n+     * \/\/ The one-bit with index 0 is at bit position 1\n@@ -2053,1 +2057,1 @@\n-     * \/\/ The 3'rd one-bit is at the 7'th bit position\n+     * \/\/ The one-bit with index 3 is at bit position 7\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Long.java","additions":19,"deletions":15,"binary":false,"changes":34,"status":"modified"}]}