{"files":[{"patch":"@@ -30,0 +30,1 @@\n+import jdk.internal.vm.annotation.ForceInline;\n@@ -1798,5 +1799,1 @@\n-            int maskPrefix = maskCount  ^ (maskCount  << 1);\n-            maskPrefix = maskPrefix ^ (maskPrefix << 2);\n-            maskPrefix = maskPrefix ^ (maskPrefix << 4);\n-            maskPrefix = maskPrefix ^ (maskPrefix << 8);\n-            maskPrefix = maskPrefix ^ (maskPrefix << 16);\n+            int maskPrefix = parallelSuffix(maskCount);\n@@ -1836,1 +1833,0 @@\n-        int[] array = new int[5];\n@@ -1841,20 +1837,42 @@\n-        for (int j = 0; j < 5; j++) {\n-            \/\/ Parallel suffix\n-            int maskPrefix = maskCount ^ (maskCount << 1);\n-            maskPrefix = maskPrefix ^ (maskPrefix << 2);\n-            maskPrefix = maskPrefix ^ (maskPrefix << 4);\n-            maskPrefix = maskPrefix ^ (maskPrefix << 8);\n-            maskPrefix = maskPrefix ^ (maskPrefix << 16);\n-            \/\/ Bits to move\n-            int maskMove = maskPrefix & mask;\n-            array[j] = maskMove;\n-            \/\/ Compress mask\n-            mask = (mask ^ maskMove) | (maskMove >>> (1 << j));\n-            maskCount = maskCount & ~maskPrefix;\n-        }\n-\n-        for (int j = 4; j >= 0; j--) {\n-            int maskMove = array[j];\n-            int t = i << (1 << j);\n-            i = (i & ~maskMove) | (t & maskMove);\n-        }\n+        int maskPrefix = parallelSuffix(maskCount);\n+        \/\/ Bits to move\n+        int maskMove1 = maskPrefix & mask;\n+        \/\/ Compress mask\n+        mask = (mask ^ maskMove1) | (maskMove1 >>> (1 << 0));\n+        maskCount = maskCount & ~maskPrefix;\n+\n+        maskPrefix = parallelSuffix(maskCount);\n+        \/\/ Bits to move\n+        int maskMove2 = maskPrefix & mask;\n+        \/\/ Compress mask\n+        mask = (mask ^ maskMove2) | (maskMove2 >>> (1 << 1));\n+        maskCount = maskCount & ~maskPrefix;\n+\n+        maskPrefix = parallelSuffix(maskCount);\n+        \/\/ Bits to move\n+        int maskMove3 = maskPrefix & mask;\n+        \/\/ Compress mask\n+        mask = (mask ^ maskMove3) | (maskMove3 >>> (1 << 2));\n+        maskCount = maskCount & ~maskPrefix;\n+\n+        maskPrefix = parallelSuffix(maskCount);\n+        \/\/ Bits to move\n+        int maskMove4 = maskPrefix & mask;\n+        \/\/ Compress mask\n+        mask = (mask ^ maskMove4) | (maskMove4 >>> (1 << 3));\n+        maskCount = maskCount & ~maskPrefix;\n+\n+        maskPrefix = parallelSuffix(maskCount);\n+        \/\/ Bits to move\n+        int maskMove5 = maskPrefix & mask;\n+\n+        int t = i << (1 << 4);\n+        i = (i & ~maskMove5) | (t & maskMove5);\n+        t = i << (1 << 3);\n+        i = (i & ~maskMove4) | (t & maskMove4);\n+        t = i << (1 << 2);\n+        i = (i & ~maskMove3) | (t & maskMove3);\n+        t = i << (1 << 1);\n+        i = (i & ~maskMove2) | (t & maskMove2);\n+        t = i << (1 << 0);\n+        i = (i & ~maskMove1) | (t & maskMove1);\n@@ -1866,0 +1884,10 @@\n+    @ForceInline\n+    private static int parallelSuffix(int maskCount) {\n+        int maskPrefix = maskCount ^ (maskCount << 1);\n+        maskPrefix = maskPrefix ^ (maskPrefix << 2);\n+        maskPrefix = maskPrefix ^ (maskPrefix << 4);\n+        maskPrefix = maskPrefix ^ (maskPrefix << 8);\n+        maskPrefix = maskPrefix ^ (maskPrefix << 16);\n+        return maskPrefix;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Integer.java","additions":54,"deletions":26,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import jdk.internal.vm.annotation.ForceInline;\n@@ -1937,6 +1938,1 @@\n-            long maskPrefix = maskCount  ^ (maskCount  << 1);\n-            maskPrefix = maskPrefix ^ (maskPrefix << 2);\n-            maskPrefix = maskPrefix ^ (maskPrefix << 4);\n-            maskPrefix = maskPrefix ^ (maskPrefix << 8);\n-            maskPrefix = maskPrefix ^ (maskPrefix << 16);\n-            maskPrefix = maskPrefix ^ (maskPrefix << 32);\n+            long maskPrefix = parallelSuffix(maskCount);\n@@ -1976,1 +1972,0 @@\n-        long[] array = new long[6];\n@@ -1981,21 +1976,51 @@\n-        for (int j = 0; j < 6; j++) {\n-            \/\/ Parallel suffix\n-            long maskPrefix = maskCount ^ (maskCount << 1);\n-            maskPrefix = maskPrefix ^ (maskPrefix << 2);\n-            maskPrefix = maskPrefix ^ (maskPrefix << 4);\n-            maskPrefix = maskPrefix ^ (maskPrefix << 8);\n-            maskPrefix = maskPrefix ^ (maskPrefix << 16);\n-            maskPrefix = maskPrefix ^ (maskPrefix << 32);\n-            \/\/ Bits to move\n-            long maskMove = maskPrefix & mask;\n-            array[j] = maskMove;\n-            \/\/ Compress mask\n-            mask = (mask ^ maskMove) | (maskMove >>> (1 << j));\n-            maskCount = maskCount & ~maskPrefix;\n-        }\n-\n-        for (int j = 5; j >= 0; j--) {\n-            long maskMove = array[j];\n-            long t = i << (1 << j);\n-            i = (i & ~maskMove) | (t & maskMove);\n-        }\n+        long maskPrefix = parallelSuffix(maskCount);\n+        \/\/ Bits to move\n+        long maskMove1 = maskPrefix & mask;\n+        \/\/ Compress mask\n+        mask = (mask ^ maskMove1) | (maskMove1 >>> (1 << 0));\n+        maskCount = maskCount & ~maskPrefix;\n+\n+        maskPrefix = parallelSuffix(maskCount);\n+        \/\/ Bits to move\n+        long maskMove2 = maskPrefix & mask;\n+        \/\/ Compress mask\n+        mask = (mask ^ maskMove2) | (maskMove2 >>> (1 << 1));\n+        maskCount = maskCount & ~maskPrefix;\n+\n+        maskPrefix = parallelSuffix(maskCount);\n+        \/\/ Bits to move\n+        long maskMove3 = maskPrefix & mask;\n+        \/\/ Compress mask\n+        mask = (mask ^ maskMove3) | (maskMove3 >>> (1 << 2));\n+        maskCount = maskCount & ~maskPrefix;\n+\n+        maskPrefix = parallelSuffix(maskCount);\n+        \/\/ Bits to move\n+        long maskMove4 = maskPrefix & mask;\n+        \/\/ Compress mask\n+        mask = (mask ^ maskMove4) | (maskMove4 >>> (1 << 3));\n+        maskCount = maskCount & ~maskPrefix;\n+\n+        maskPrefix = parallelSuffix(maskCount);\n+        \/\/ Bits to move\n+        long maskMove5 = maskPrefix & mask;\n+        \/\/ Compress mask\n+        mask = (mask ^ maskMove5) | (maskMove5 >>> (1 << 4));\n+        maskCount = maskCount & ~maskPrefix;\n+\n+        maskPrefix = parallelSuffix(maskCount);\n+        \/\/ Bits to move\n+        long maskMove6 = maskPrefix & mask;\n+\n+        long t = i << (1 << 5);\n+        i = (i & ~maskMove6) | (t & maskMove6);\n+        t = i << (1 << 4);\n+        i = (i & ~maskMove5) | (t & maskMove5);\n+        t = i << (1 << 3);\n+        i = (i & ~maskMove4) | (t & maskMove4);\n+        t = i << (1 << 2);\n+        i = (i & ~maskMove3) | (t & maskMove3);\n+        t = i << (1 << 1);\n+        i = (i & ~maskMove2) | (t & maskMove2);\n+        t = i << (1 << 0);\n+        i = (i & ~maskMove1) | (t & maskMove1);\n@@ -2007,0 +2032,11 @@\n+    @ForceInline\n+    private static long parallelSuffix(long maskCount) {\n+        long maskPrefix = maskCount ^ (maskCount << 1);\n+        maskPrefix = maskPrefix ^ (maskPrefix << 2);\n+        maskPrefix = maskPrefix ^ (maskPrefix << 4);\n+        maskPrefix = maskPrefix ^ (maskPrefix << 8);\n+        maskPrefix = maskPrefix ^ (maskPrefix << 16);\n+        maskPrefix = maskPrefix ^ (maskPrefix << 32);\n+        return maskPrefix;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Long.java","additions":64,"deletions":28,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -252,2 +252,2 @@\n-            for (int len = 0; len < 32; len++) {\n-                for (int pos = 0; pos < 32 - len; pos++) {\n+            for (int len = 1; len < 32; len++) {\n+                for (int pos = 0; pos <= 32 - len; pos++) {\n","filename":"test\/jdk\/java\/lang\/AbstractCompressExpandTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -112,0 +112,16 @@\n+\n+    \/** Performs expand on small values *\/\n+    @Benchmark\n+    public void expand(Blackhole bh) {\n+        for (int i : intsSmall) {\n+            bh.consume(Integer.expand(i, 0xFF00F0F0));\n+        }\n+    }\n+\n+    \/** Performs compress on large values *\/\n+    @Benchmark\n+    public void compress(Blackhole bh) {\n+        for (int i : intsBig) {\n+            bh.consume(Integer.compress(i, 0x000F0F1F));\n+        }\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/Integers.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -92,0 +92,16 @@\n+    \/** Performs expand on small values *\/\n+    @Benchmark\n+    public void expand(Blackhole bh) {\n+        for (long i : longArraySmall) {\n+            bh.consume(Long.expand(i, 0xFF00F0F0F0000000L));\n+        }\n+    }\n+\n+    \/** Performs compress on large values *\/\n+    @Benchmark\n+    public void compress(Blackhole bh) {\n+        for (long i : longArrayBig) {\n+            bh.consume(Long.compress(i, 0x000000000F0F0F1FL));\n+        }\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/Longs.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"}]}