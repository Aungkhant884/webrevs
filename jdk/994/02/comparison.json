{"files":[{"patch":"@@ -2361,1 +2361,1 @@\n-    n->destruct();\n+    n->destruct(&_phase->igvn());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahSupport.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -186,1 +186,1 @@\n-  MergeMemNode* mem = MergeMemNode::make(in_mem);\n+  MergeMemNode* mem = phase->transform(MergeMemNode::make(in_mem))->as_MergeMem();\n@@ -370,1 +370,1 @@\n-                                        MergeMemNode* mm,\n+                                        Node* mem,\n@@ -382,1 +382,1 @@\n-    mm = mm->clone()->as_MergeMem();\n+    MergeMemNode* mm = MergeMemNode::make(mem);\n@@ -395,1 +395,1 @@\n-    } else if(can_reshape) {\n+    } else if (can_reshape) {\n@@ -408,1 +408,1 @@\n-                                         MergeMemNode* mm,\n+                                         Node* mem,\n@@ -420,1 +420,1 @@\n-    mm = mm->clone()->as_MergeMem();\n+    MergeMemNode* mm = MergeMemNode::make(mem);\n@@ -435,1 +435,1 @@\n-    } else if(can_reshape) {\n+    } else if (can_reshape) {\n@@ -567,5 +567,1 @@\n-\n-  Node *in_mem = in(TypeFunc::Memory);\n-  if (!in_mem->is_MergeMem()) {\n-    in_mem = MergeMemNode::make(in_mem);\n-  }\n+  Node* in_mem = in(TypeFunc::Memory);\n@@ -583,1 +579,1 @@\n-                                         in_mem->as_MergeMem(),\n+                                         in_mem,\n@@ -589,1 +585,1 @@\n-                                           in_mem->as_MergeMem(),\n+                                           in_mem,\n","filename":"src\/hotspot\/share\/opto\/arraycopynode.cpp","additions":10,"deletions":14,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -103,1 +103,1 @@\n-                           MergeMemNode* mm,\n+                           Node* mem,\n@@ -108,1 +108,1 @@\n-                            MergeMemNode* mm,\n+                            Node* mem,\n","filename":"src\/hotspot\/share\/opto\/arraycopynode.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2305,6 +2305,1 @@\n-        if (igvn) { \/\/ Unhook.\n-          igvn->hash_delete(hook);\n-          for (uint i = 1; i < hook->req(); i++) {\n-            hook->set_req(i, NULL);\n-          }\n-        }\n+        hook->destruct(igvn);\n","filename":"src\/hotspot\/share\/opto\/cfgnode.cpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1131,2 +1131,1 @@\n-  if (_modified_nodes != NULL && !_inlining_incrementally &&\n-      n->outcnt() != 0 && !n->is_Con()) {\n+  if (_modified_nodes != NULL && !_inlining_incrementally && !n->is_Con()) {\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -406,2 +406,1 @@\n-    hook->del_req(0);  \/\/ Just yank bogus edge\n-    hook->destruct();\n+    hook->destruct(phase);\n","filename":"src\/hotspot\/share\/opto\/convertnode.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -329,8 +329,1 @@\n-  PhaseIterGVN* igvn = phase->is_IterGVN();\n-  if (igvn != NULL) {\n-    igvn->remove_dead_node(hook);\n-  } else {\n-    for (int i = 0; i < 4; i++) {\n-      hook->set_req(i, NULL);\n-    }\n-  }\n+  hook->destruct(phase);\n@@ -915,5 +908,1 @@\n-      if (can_reshape) {\n-        phase->is_IterGVN()->remove_dead_node(hook);\n-      } else {\n-        hook->set_req(0, NULL);   \/\/ Just yank bogus edge during Parse phase\n-      }\n+      hook->destruct(phase);\n@@ -971,5 +960,1 @@\n-  if (can_reshape) {\n-    phase->is_IterGVN()->remove_dead_node(hook);\n-  } else {\n-    hook->set_req(0, NULL);       \/\/ Just yank bogus edge during Parse phase\n-  }\n+  hook->destruct(phase);\n@@ -1088,5 +1073,1 @@\n-      if (can_reshape) {\n-        phase->is_IterGVN()->remove_dead_node(hook);\n-      } else {\n-        hook->set_req(0, NULL);   \/\/ Just yank bogus edge during Parse phase\n-      }\n+      hook->destruct(phase);\n@@ -1144,5 +1125,1 @@\n-  if (can_reshape) {\n-    phase->is_IterGVN()->remove_dead_node(hook);\n-  } else {\n-    hook->set_req(0, NULL);       \/\/ Just yank bogus edge during Parse phase\n-  }\n+  hook->destruct(phase);\n","filename":"src\/hotspot\/share\/opto\/divnode.cpp","additions":5,"deletions":28,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -1002,2 +1002,1 @@\n-    hook->del_req(0); \/\/ Just yank bogus edge\n-    hook->destruct();\n+    hook->destruct(igvn);\n","filename":"src\/hotspot\/share\/opto\/ifnode.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -433,1 +433,1 @@\n-    tmp->destruct();\n+    tmp->destruct(NULL);\n","filename":"src\/hotspot\/share\/opto\/lcm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -730,1 +730,1 @@\n-      mul->destruct();\n+      mul->destruct(&_igvn);\n","filename":"src\/hotspot\/share\/opto\/loopPredicate.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1403,2 +1403,0 @@\n-  Node *hook = new Node(6);\n-\n@@ -1694,3 +1692,0 @@\n-  \/\/ Free up intermediate goo\n-  _igvn.remove_dead_node(hook);\n-\n@@ -2659,1 +2654,1 @@\n-        p->destruct();          \/\/ Recover useless new node\n+        p->destruct(&igvn);     \/\/ Recover useless new node\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -332,1 +332,1 @@\n-    MergeMemNode* mergemen = MergeMemNode::make(mem);\n+    MergeMemNode* mergemen = _igvn.transform(MergeMemNode::make(mem))->as_MergeMem();\n@@ -372,1 +372,1 @@\n-      MergeMemNode* mergemen = MergeMemNode::make(mem);\n+      MergeMemNode* mergemen = _igvn.transform(MergeMemNode::make(mem))->as_MergeMem();\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -584,2 +584,5 @@\n-void Node::destruct() {\n-  Compile* compile = Compile::current();\n+void Node::destruct(PhaseValues* phase) {\n+  Compile* compile = (phase != NULL) ? phase->C : Compile::current();\n+  if (phase != NULL && phase->is_IterGVN()) {\n+    phase->is_IterGVN()->_worklist.remove(this);\n+  }\n@@ -1402,1 +1405,0 @@\n-      igvn->C->remove_modified_node(dead);\n@@ -1438,0 +1440,1 @@\n+      igvn->C->remove_modified_node(dead);\n","filename":"src\/hotspot\/share\/opto\/node.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -239,1 +239,1 @@\n-  void destruct();\n+  void destruct(PhaseValues* phase);\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -752,1 +752,1 @@\n-    x->destruct();              \/\/ Hit, destroy duplicate constant\n+    x->destruct(this);          \/\/ Hit, destroy duplicate constant\n@@ -1072,1 +1072,1 @@\n-    if (n->outcnt() != 0 && !n->is_Con() && !_worklist.member(n)) {\n+    if (!n->is_Con() && !_worklist.member(n)) {\n@@ -1074,1 +1074,1 @@\n-      assert(false, \"modified node is not on IGVN._worklist\");\n+      fatal(\"modified node is not on IGVN._worklist\");\n@@ -1086,1 +1086,1 @@\n-    if (n->outcnt() != 0 && !n->is_Con()) { \/\/ skip dead and Con nodes\n+    if (!n->is_Con()) { \/\/ skip Con nodes\n@@ -1088,1 +1088,1 @@\n-      assert(false, \"modified node was not processed by IGVN.transform_old()\");\n+      fatal(\"modified node was not processed by IGVN.transform_old()\");\n@@ -1475,2 +1475,1 @@\n-  _worklist.remove(temp);   \/\/ this can be necessary\n-  temp->destruct();         \/\/ reuse the _idx of this little guy\n+  temp->destruct(this);     \/\/ reuse the _idx of this little guy\n","filename":"src\/hotspot\/share\/opto\/phaseX.cpp","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -340,1 +340,1 @@\n-        phi_post->destruct();\n+        phi_post->destruct(&_igvn);\n","filename":"src\/hotspot\/share\/opto\/split_if.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}