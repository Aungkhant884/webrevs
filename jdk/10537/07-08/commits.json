[{"commit":{"message":"Add pattern for for memory operands\n\nAdds new patterns to match a memory address and a constant, which are\nemitted as two loads. C2 expects that constants INTs will always be\nmanifested by immediate loads. However, as these intrinsics are avoiding\nloading into GPRs and moving them into the vector registers, there is an\naddition to allow integers to be loaded as a constant.\n\nThere isn't a pattern to match two LoadI nodes - C2 doesn't handle nodes\nwith two memory nodes for calculating anti-dependencies.\n\nBenchmark                  Result  Units  % against non-SVE2\nIntegers.compress          2.009   µs\/op\nIntegers.compress-SVE      1.435   µs\/op  71.43%\nIntegers.compress-SVE+mem  1.263   µs\/op  62.87%\nIntegers.expand            2.129   µs\/op\nIntegers.expand-SVE        1.433   µs\/op  67.31%\nIntegers.expand-SVE+mem    1.32    µs\/op  62.00%\nLongs.compress             2.504   µs\/op\nLongs.compress-SVE         1.445   µs\/op  57.71%\nLongs.compress-SVE+mem     1.269   µs\/op  50.68%\nLongs.expand               2.614   µs\/op\nLongs.expand-SVE           1.489   µs\/op  56.96%\nLongs.expand-SVE+mem       1.272   µs\/op  48.66%\n\nChange-Id: I6b78d2fcc11cd00fb6d14e9f9456c0cce55dd9d4\nCustomizedGitHooks: yes"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/share\/opto\/constantTable.cpp"},{"filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/TestBitShuffleOpers.java"}],"sha":"05cffeaf170d86dcfd034c744e8f6a21d926f37c"}]