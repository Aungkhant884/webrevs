{"files":[{"patch":"@@ -17071,1 +17071,1 @@\n-            \"bext   $tdst, $tsrc, $tmask\\t# parallel bit extract\\n\\t\"\n+            \"bext   $tdst, $tsrc, $tmask\\n\\t\"\n@@ -17083,0 +17083,19 @@\n+instruct compressBitsI_memcon(iRegINoSp dst, memory4 mem, immI mask,\n+                           vRegF tdst, vRegF tsrc, vRegF tmask) %{\n+  match(Set dst (CompressBits (LoadI mem) mask));\n+  effect(TEMP tdst, TEMP tsrc, TEMP tmask);\n+  format %{ \"ldrs   $tsrc, $mem\\n\\t\"\n+            \"ldrs   $tmask, $mask\\n\\t\"\n+            \"bext   $tdst, $tsrc, $tmask\\n\\t\"\n+            \"mov    $dst, $tdst\"\n+          %}\n+  ins_encode %{\n+    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrs, $tsrc$$FloatRegister, $mem->opcode(),\n+              as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp, 4);\n+    __ ldrs($tmask$$FloatRegister, $constantaddress($mask));\n+    __ sve_bext($tdst$$FloatRegister, __ S, $tsrc$$FloatRegister, $tmask$$FloatRegister);\n+    __ mov($dst$$Register, $tdst$$FloatRegister, __ S, 0);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n@@ -17089,1 +17108,1 @@\n-            \"bext   $tdst, $tsrc, $tmask\\t# parallel bit extract\\n\\t\"\n+            \"bext   $tdst, $tsrc, $tmask\\n\\t\"\n@@ -17096,2 +17115,21 @@\n-    __ mov($dst$$Register, $tdst$$FloatRegister, __ D, 0); \n-    %}\n+    __ mov($dst$$Register, $tdst$$FloatRegister, __ D, 0);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct compressBitsL_memcon(iRegLNoSp dst, memory8 mem, immL mask,\n+                           vRegF tdst, vRegF tsrc, vRegF tmask) %{\n+  match(Set dst (CompressBits (LoadL mem) mask));\n+  effect(TEMP tdst, TEMP tsrc, TEMP tmask);\n+  format %{ \"ldrd   $tsrc, $mem\\n\\t\"\n+            \"ldrd   $tmask, $mask\\n\\t\"\n+            \"bext   $tdst, $tsrc, $tmask\\n\\t\"\n+            \"mov    $dst, $tdst\"\n+          %}\n+  ins_encode %{\n+    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrd, $tsrc$$FloatRegister, $mem->opcode(),\n+              as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp, 8);\n+    __ ldrd($tmask$$FloatRegister, $constantaddress($mask));\n+    __ sve_bext($tdst$$FloatRegister, __ D, $tsrc$$FloatRegister, $tmask$$FloatRegister);\n+    __ mov($dst$$Register, $tdst$$FloatRegister, __ D, 0);\n+  %}\n@@ -17107,1 +17145,1 @@\n-            \"bdep   $tdst, $tsrc, $tmask\\t# parallel bit deposit\\n\\t\"\n+            \"bdep   $tdst, $tsrc, $tmask\\n\\t\"\n@@ -17115,1 +17153,20 @@\n-    %}\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct expandBitsI_memcon(iRegINoSp dst, memory4 mem, immI mask,\n+                         vRegF tdst, vRegF tsrc, vRegF tmask) %{\n+  match(Set dst (ExpandBits (LoadI mem) mask));\n+  effect(TEMP tdst, TEMP tsrc, TEMP tmask);\n+  format %{ \"ldrs   $tsrc, $mem\\n\\t\"\n+            \"ldrs   $tmask, $mask\\n\\t\"\n+            \"bdep   $tdst, $tsrc, $tmask\\n\\t\"\n+            \"mov    $dst, $tdst\"\n+          %}\n+  ins_encode %{\n+    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrs, $tsrc$$FloatRegister, $mem->opcode(),\n+              as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp, 4);\n+    __ ldrs($tmask$$FloatRegister, $constantaddress($mask));\n+    __ sve_bdep($tdst$$FloatRegister, __ S, $tsrc$$FloatRegister, $tmask$$FloatRegister);\n+    __ mov($dst$$Register, $tdst$$FloatRegister, __ S, 0);\n+  %}\n@@ -17125,1 +17182,1 @@\n-            \"bdep   $tdst, $tsrc, $tmask\\t# parallel bit deposit\\n\\t\"\n+            \"bdep   $tdst, $tsrc, $tmask\\n\\t\"\n@@ -17137,0 +17194,20 @@\n+\n+instruct expandBitsL_memcon(iRegINoSp dst, memory8 mem, immL mask,\n+                         vRegF tdst, vRegF tsrc, vRegF tmask) %{\n+  match(Set dst (ExpandBits (LoadL mem) mask));\n+  effect(TEMP tdst, TEMP tsrc, TEMP tmask);\n+  format %{ \"ldrd   $tsrc, $mem\\n\\t\"\n+            \"ldrd   $tmask, $mask\\n\\t\"\n+            \"bdep   $tdst, $tsrc, $tmask\\n\\t\"\n+            \"mov    $dst, $tdst\"\n+          %}\n+  ins_encode %{\n+    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrd, $tsrc$$FloatRegister, $mem->opcode(),\n+              as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp, 8);\n+    __ ldrd($tmask$$FloatRegister, $constantaddress($mask));\n+    __ sve_bdep($tdst$$FloatRegister, __ D, $tsrc$$FloatRegister, $tmask$$FloatRegister);\n+    __ mov($dst$$Register, $tdst$$FloatRegister, __ D, 0);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":84,"deletions":7,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -272,0 +272,1 @@\n+  case T_INT:     value.i = oper->constant();  break;\n","filename":"src\/hotspot\/share\/opto\/constantTable.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/TestBitShuffleOpers.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}