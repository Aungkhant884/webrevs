{"files":[{"patch":"@@ -2304,0 +2304,6 @@\n+    case Op_ExpandBits:\n+    case Op_CompressBits:\n+      if (!(UseSVE > 1 && VM_Version::supports_svebitperm())) {\n+        ret_value = false;\n+      }\n+      break;\n@@ -17057,0 +17063,151 @@\n+\/\/----------------------------- CompressBits\/ExpandBits ------------------------\n+\n+instruct compressBitsI_reg(iRegINoSp dst, iRegIorL2I src, iRegIorL2I mask,\n+                           vRegF tdst, vRegF tsrc, vRegF tmask) %{\n+  match(Set dst (CompressBits src mask));\n+  effect(TEMP tdst, TEMP tsrc, TEMP tmask);\n+  format %{ \"mov    $tsrc, $src\\n\\t\"\n+            \"mov    $tmask, $mask\\n\\t\"\n+            \"bext   $tdst, $tsrc, $tmask\\n\\t\"\n+            \"mov    $dst, $tdst\"\n+          %}\n+  ins_encode %{\n+    __ mov($tsrc$$FloatRegister, __ S, 0, $src$$Register);\n+    __ mov($tmask$$FloatRegister, __ S, 0, $mask$$Register);\n+    __ sve_bext($tdst$$FloatRegister, __ S, $tsrc$$FloatRegister, $tmask$$FloatRegister);\n+    __ mov($dst$$Register, $tdst$$FloatRegister, __ S, 0);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct compressBitsI_memcon(iRegINoSp dst, memory4 mem, immI mask,\n+                           vRegF tdst, vRegF tsrc, vRegF tmask) %{\n+  match(Set dst (CompressBits (LoadI mem) mask));\n+  effect(TEMP tdst, TEMP tsrc, TEMP tmask);\n+  format %{ \"ldrs   $tsrc, $mem\\n\\t\"\n+            \"ldrs   $tmask, $mask\\n\\t\"\n+            \"bext   $tdst, $tsrc, $tmask\\n\\t\"\n+            \"mov    $dst, $tdst\"\n+          %}\n+  ins_encode %{\n+    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrs, $tsrc$$FloatRegister, $mem->opcode(),\n+              as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp, 4);\n+    __ ldrs($tmask$$FloatRegister, $constantaddress($mask));\n+    __ sve_bext($tdst$$FloatRegister, __ S, $tsrc$$FloatRegister, $tmask$$FloatRegister);\n+    __ mov($dst$$Register, $tdst$$FloatRegister, __ S, 0);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct compressBitsL_reg(iRegLNoSp dst, iRegL src, iRegL mask,\n+                           vRegD tdst, vRegD tsrc, vRegD tmask) %{\n+  match(Set dst (CompressBits src mask));\n+  effect(TEMP tdst, TEMP tsrc, TEMP tmask);\n+  format %{ \"mov    $tsrc, $src\\n\\t\"\n+            \"mov    $tmask, $mask\\n\\t\"\n+            \"bext   $tdst, $tsrc, $tmask\\n\\t\"\n+            \"mov    $dst, $tdst\"\n+          %}\n+  ins_encode %{\n+    __ mov($tsrc$$FloatRegister, __ D, 0, $src$$Register);\n+    __ mov($tmask$$FloatRegister, __ D, 0, $mask$$Register);\n+    __ sve_bext($tdst$$FloatRegister, __ D, $tsrc$$FloatRegister, $tmask$$FloatRegister);\n+    __ mov($dst$$Register, $tdst$$FloatRegister, __ D, 0);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct compressBitsL_memcon(iRegLNoSp dst, memory8 mem, immL mask,\n+                           vRegF tdst, vRegF tsrc, vRegF tmask) %{\n+  match(Set dst (CompressBits (LoadL mem) mask));\n+  effect(TEMP tdst, TEMP tsrc, TEMP tmask);\n+  format %{ \"ldrd   $tsrc, $mem\\n\\t\"\n+            \"ldrd   $tmask, $mask\\n\\t\"\n+            \"bext   $tdst, $tsrc, $tmask\\n\\t\"\n+            \"mov    $dst, $tdst\"\n+          %}\n+  ins_encode %{\n+    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrd, $tsrc$$FloatRegister, $mem->opcode(),\n+              as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp, 8);\n+    __ ldrd($tmask$$FloatRegister, $constantaddress($mask));\n+    __ sve_bext($tdst$$FloatRegister, __ D, $tsrc$$FloatRegister, $tmask$$FloatRegister);\n+    __ mov($dst$$Register, $tdst$$FloatRegister, __ D, 0);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct expandBitsI_reg(iRegINoSp dst, iRegIorL2I src, iRegIorL2I mask,\n+                         vRegF tdst, vRegF tsrc, vRegF tmask) %{\n+  match(Set dst (ExpandBits src mask));\n+  effect(TEMP tdst, TEMP tsrc, TEMP tmask);\n+  format %{ \"mov    $tsrc, $src\\n\\t\"\n+            \"mov    $tmask, $mask\\n\\t\"\n+            \"bdep   $tdst, $tsrc, $tmask\\n\\t\"\n+            \"mov    $dst, $tdst\"\n+          %}\n+  ins_encode %{\n+    __ mov($tsrc$$FloatRegister, __ S, 0, $src$$Register);\n+    __ mov($tmask$$FloatRegister, __ S, 0, $mask$$Register);\n+    __ sve_bdep($tdst$$FloatRegister, __ S, $tsrc$$FloatRegister, $tmask$$FloatRegister);\n+    __ mov($dst$$Register, $tdst$$FloatRegister, __ S, 0);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct expandBitsI_memcon(iRegINoSp dst, memory4 mem, immI mask,\n+                         vRegF tdst, vRegF tsrc, vRegF tmask) %{\n+  match(Set dst (ExpandBits (LoadI mem) mask));\n+  effect(TEMP tdst, TEMP tsrc, TEMP tmask);\n+  format %{ \"ldrs   $tsrc, $mem\\n\\t\"\n+            \"ldrs   $tmask, $mask\\n\\t\"\n+            \"bdep   $tdst, $tsrc, $tmask\\n\\t\"\n+            \"mov    $dst, $tdst\"\n+          %}\n+  ins_encode %{\n+    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrs, $tsrc$$FloatRegister, $mem->opcode(),\n+              as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp, 4);\n+    __ ldrs($tmask$$FloatRegister, $constantaddress($mask));\n+    __ sve_bdep($tdst$$FloatRegister, __ S, $tsrc$$FloatRegister, $tmask$$FloatRegister);\n+    __ mov($dst$$Register, $tdst$$FloatRegister, __ S, 0);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct expandBitsL_reg(iRegLNoSp dst, iRegL src, iRegL mask,\n+                         vRegD tdst, vRegD tsrc, vRegD tmask) %{\n+  match(Set dst (ExpandBits src mask));\n+  effect(TEMP tdst, TEMP tsrc, TEMP tmask);\n+  format %{ \"mov    $tsrc, $src\\n\\t\"\n+            \"mov    $tmask, $mask\\n\\t\"\n+            \"bdep   $tdst, $tsrc, $tmask\\n\\t\"\n+            \"mov    $dst, $tdst\"\n+          %}\n+  ins_encode %{\n+    __ mov($tsrc$$FloatRegister, __ D, 0, $src$$Register);\n+    __ mov($tmask$$FloatRegister, __ D, 0, $mask$$Register);\n+    __ sve_bdep($tdst$$FloatRegister, __ D, $tsrc$$FloatRegister, $tmask$$FloatRegister);\n+    __ mov($dst$$Register, $tdst$$FloatRegister, __ D, 0);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\n+instruct expandBitsL_memcon(iRegINoSp dst, memory8 mem, immL mask,\n+                         vRegF tdst, vRegF tsrc, vRegF tmask) %{\n+  match(Set dst (ExpandBits (LoadL mem) mask));\n+  effect(TEMP tdst, TEMP tsrc, TEMP tmask);\n+  format %{ \"ldrd   $tsrc, $mem\\n\\t\"\n+            \"ldrd   $tmask, $mask\\n\\t\"\n+            \"bdep   $tdst, $tsrc, $tmask\\n\\t\"\n+            \"mov    $dst, $tdst\"\n+          %}\n+  ins_encode %{\n+    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrd, $tsrc$$FloatRegister, $mem->opcode(),\n+              as_Register($mem$$base), $mem$$index, $mem$$scale, $mem$$disp, 8);\n+    __ ldrd($tmask$$FloatRegister, $constantaddress($mask));\n+    __ sve_bdep($tdst$$FloatRegister, __ D, $tsrc$$FloatRegister, $tmask$$FloatRegister);\n+    __ mov($dst$$Register, $tdst$$FloatRegister, __ D, 0);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":157,"deletions":0,"binary":false,"changes":157,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -272,0 +272,1 @@\n+  case T_INT:     value.i = oper->constant();  break;\n","filename":"src\/hotspot\/share\/opto\/constantTable.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,3 +30,5 @@\n- * @requires vm.cpu.features ~= \".*bmi2.*\"\n- * @requires vm.cpu.features ~= \".*bmi1.*\"\n- * @requires vm.cpu.features ~= \".*sse2.*\"\n+ * @requires (((os.arch==\"x86\" | os.arch==\"amd64\" | os.arch==\"x86_64\") &\n+ *            (vm.cpu.features ~= \".*bmi2.*\" & vm.cpu.features ~= \".*bmi1.*\" &\n+ *             vm.cpu.features ~= \".*sse2.*\")) |\n+ *            ((vm.opt.UseSVE == \"null\" | vm.opt.UseSVE > 1) &\n+ *             os.arch==\"aarch64\" & vm.cpu.features ~= \".*svebitperm.*\"))\n@@ -36,1 +38,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/TestBitShuffleOpers.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"}]}