{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run main\/othervm\/timeout=3600 -Xmx8g TestTooManyEntries\n+ * @run testng\/manual\/othervm -Xmx8g TestTooManyEntries\n@@ -31,0 +31,3 @@\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.Test;\n+\n@@ -40,0 +43,2 @@\n+import static org.testng.Assert.assertThrows;\n+\n@@ -41,3 +46,8 @@\n-    public static void main(String[] args) throws Exception {\n-        boolean passed = false;\n-        File hugeZipFile = File.createTempFile(\"hugeZip\", \".zip\", new File(\".\"));\n+    private static final int DIR_COUNT = 25000;\n+    private static final int ENTRIES_IN_DIR = 1000;\n+\n+    private File hugeZipFile;\n+\n+    @BeforeTest\n+    public void setup() throws Exception {\n+        hugeZipFile = File.createTempFile(\"hugeZip\", \".zip\", new File(\".\"));\n@@ -47,1 +57,0 @@\n-            int dirCount = 25_000;\n@@ -49,1 +58,1 @@\n-            for (int dirN = 0; dirN < dirCount; dirN++) {\n+            for (int dirN = 0; dirN < DIR_COUNT; dirN++) {\n@@ -51,1 +60,1 @@\n-                for (int fileN = 0; fileN < 1_000; fileN++) {\n+                for (int fileN = 0; fileN < ENTRIES_IN_DIR; fileN++) {\n@@ -56,4 +65,3 @@\n-                if (System.currentTimeMillis() >= nextLog) {\n-                    nextLog = 30_000 + System.currentTimeMillis();\n-                    System.out.printf(\"Processed %s%% directories (%s), file size is %sMb (%ss)%n\",\n-                            dirN * 100 \/ dirCount, dirN, hugeZipFile.length() \/ 1024 \/ 1024,\n+                if ((dirN + 1) % 1000 == 0) {\n+                    System.out.printf(\"%s \/ %s of entries written, file size is %sMb (%ss)%n\",\n+                            (dirN + 1) * ENTRIES_IN_DIR, DIR_COUNT * ENTRIES_IN_DIR, hugeZipFile.length() \/ 1024 \/ 1024,\n@@ -64,8 +72,1 @@\n-        System.out.printf(\"File generated in %ss, file size is %sMb%n\",\n-                (System.currentTimeMillis() - startTime) \/ 1000, hugeZipFile.length() \/ 1024 \/ 1024);\n-\n-        try {\n-            ZipFile zip = new ZipFile(hugeZipFile);\n-        } catch (ZipException ze) {\n-            passed = true;\n-        }\n+    }\n@@ -73,3 +74,3 @@\n-        if (!passed) {\n-            throw new RuntimeException(\"Failed.\");\n-        }\n+    @Test\n+    public void test() {\n+        assertThrows(ZipException.class, () -> new ZipFile(hugeZipFile));\n","filename":"test\/jdk\/java\/util\/zip\/ZipFile\/TestTooManyEntries.java","additions":24,"deletions":23,"binary":false,"changes":47,"status":"modified"}]}