{"files":[{"patch":"@@ -316,1 +316,1 @@\n-                                                       fg);\n+                                                       fg, fg.getAlpha(), false);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/basic\/BasicEditorPaneUI.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,0 +64,16 @@\n+        int beginIndex = html.indexOf(\"rgba(\");\n+        Color col = c.getForeground();\n+        int alpha = col.getAlpha();\n+        boolean hasAlpha = false;\n+        if (beginIndex != -1) {\n+            int endIndex = html.indexOf(\")\");\n+            String[] color = html.substring(beginIndex + \"rgba(\".length(),\n+                                               endIndex).split(\",\");\n+            for (int i = 0; i < color.length; i++) {\n+                color[i] = color[i].strip();\n+            }\n+            col = new Color(Integer.parseInt(color[0]), Integer.parseInt(color[1]),\n+                            Integer.parseInt(color[2]), (int)(Float.parseFloat(color[3])*255));\n+            alpha = (int)(Float.parseFloat(color[3])*255);\n+            hasAlpha = true;\n+        }\n@@ -65,1 +81,1 @@\n-                                                 c.getForeground());\n+                                                 col, alpha, hasAlpha);\n@@ -353,1 +369,2 @@\n-                                              Color foreground) {\n+                                              Color foreground, int alpha,\n+                                              boolean hasAlpha) {\n@@ -357,1 +374,2 @@\n-            BasicDocument doc = new BasicDocument(ss, defaultFont, foreground);\n+            BasicDocument doc = new BasicDocument(ss, defaultFont, foreground,\n+                                                      alpha, hasAlpha);\n@@ -399,1 +417,2 @@\n-        BasicDocument(StyleSheet s, Font defaultFont, Color foreground) {\n+        BasicDocument(StyleSheet s, Font defaultFont, Color foreground,\n+                       int alpha, boolean hasAlpha) {\n@@ -402,1 +421,1 @@\n-            setFontAndColor(defaultFont, foreground);\n+            setFontAndColor(defaultFont, foreground, alpha, hasAlpha);\n@@ -411,1 +430,1 @@\n-        private void setFontAndColor(Font font, Color fg) {\n+        private void setFontAndColor(Font font, Color fg, int alpha, boolean hasAlpha) {\n@@ -413,1 +432,1 @@\n-                                    displayPropertiesToCSS(font,fg));\n+                                    displayPropertiesToCSS(font,fg,alpha, hasAlpha));\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/basic\/BasicHTML.java","additions":26,"deletions":7,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -1402,0 +1402,2 @@\n+      } else if (str.startsWith(\"rgba(\")) {\n+          color = parseRGBA(str);\n@@ -1455,3 +1457,3 @@\n-        int red = getColorComponent(string, index);\n-        int green = getColorComponent(string, index);\n-        int blue = getColorComponent(string, index);\n+        int red = (int)getColorComponent(string, index);\n+        int green = (int)getColorComponent(string, index);\n+        int blue = (int)getColorComponent(string, index);\n@@ -1462,0 +1464,13 @@\n+    private static Color parseRGBA(String string) {\n+        \/\/ Find the next numeric char\n+        int[] index = new int[1];\n+\n+        index[0] = 4;\n+        float red = getColorComponent(string, index)\/255f;\n+        float green = getColorComponent(string, index)\/255f;\n+        float blue = getColorComponent(string, index)\/255f;\n+        float alpha = getColorComponent(string, index);\n+\n+        return new Color(red, green, blue, alpha);\n+    }\n+\n@@ -1468,1 +1483,1 @@\n-    private static int getColorComponent(String string, int[] index) {\n+    private static float getColorComponent(String string, int[] index) {\n@@ -1504,1 +1519,1 @@\n-                return Math.min(255, Math.max(0, (int)value));\n+                return Math.min(255f, Math.max(0, value));\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/html\/CSS.java","additions":20,"deletions":5,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -1626,1 +1626,2 @@\n-    public static String displayPropertiesToCSS(Font font, Color fg) {\n+    public static String displayPropertiesToCSS(Font font, Color fg,\n+                                                int alpha, boolean hasAlpha) {\n@@ -1643,11 +1644,25 @@\n-            rule.append(\" color: #\");\n-            if (fg.getRed() < 16) {\n-                rule.append('0');\n-            }\n-            rule.append(Integer.toHexString(fg.getRed()));\n-            if (fg.getGreen() < 16) {\n-                rule.append('0');\n-            }\n-            rule.append(Integer.toHexString(fg.getGreen()));\n-            if (fg.getBlue() < 16) {\n-                rule.append('0');\n+            if (hasAlpha) {\n+                rule.append(\" color: rgba(\");\n+                rule.append(fg.getRed());\n+                rule.append(',');\n+                rule.append(fg.getBlue());\n+                rule.append(',');\n+                rule.append(fg.getGreen());\n+                rule.append(',');\n+                rule.append((float) (alpha \/ 255.0));\n+                rule.append(\")\");\n+            } else {\n+                rule.append(\" color: #\");\n+                if (fg.getRed() < 16) {\n+                    rule.append('0');\n+                }\n+                rule.append(Integer.toHexString(fg.getRed()));\n+                if (fg.getGreen() < 16) {\n+                    rule.append('0');\n+                }\n+                rule.append(Integer.toHexString(fg.getGreen()));\n+                if (fg.getBlue() < 16) {\n+                    rule.append('0');\n+                }\n+                rule.append(Integer.toHexString(fg.getBlue()));\n+                rule.append(\" ; \");\n@@ -1655,2 +1670,0 @@\n-            rule.append(Integer.toHexString(fg.getBlue()));\n-            rule.append(\" ; \");\n","filename":"src\/java.desktop\/share\/classes\/sun\/swing\/SwingUtilities2.java","additions":27,"deletions":14,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -0,0 +1,175 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ * @test\n+ * @bug 8256019\n+ * @summary Verifies if JLabel HTML text support translucent text colors\n+ * @run main\/manual TestTranslucentLabelText\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Font;\n+import java.awt.FlowLayout;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.util.concurrent.CountDownLatch;\n+import javax.imageio.ImageIO;\n+import javax.swing.JFrame;\n+import javax.swing.JDialog;\n+import javax.swing.JTextArea;\n+import javax.swing.JButton;\n+import javax.swing.JPanel;\n+import javax.swing.JLabel;\n+import javax.swing.SwingUtilities;\n+\n+public class TestTranslucentLabelText {\n+    private static Color background = new Color(0, 150, 0);\n+    private static Color foreground = new Color(255, 255, 255, 120);\n+    private static Font font = new Font(\"Sans Serif\", Font.PLAIN, 24);\n+    private static JFrame frame;\n+    static boolean testResult;\n+    static CountDownLatch latch;\n+    private static Thread mainThread;\n+    private static boolean testPassed;\n+    private static boolean testGeneratedInterrupt;\n+\n+    private static void doTest(Runnable action) {\n+        String description\n+                = \" A frame with 2 labels will be shown in middle of screen.\\n\"\n+                + \" Left side label text should be opaque.\\n \"\n+                + \" Right side label text should be translucent.\\n\"\n+                + \" If Right side label text is translucent, press PASS else press FAIL\";\n+\n+        final JDialog dialog = new JDialog();\n+        dialog.setTitle(\"JLabelTranslucentTest\");\n+        JTextArea textArea = new JTextArea(description);\n+        textArea.setEditable(false);\n+        final JButton testButton = new JButton(\"Start Test\");\n+        final JButton passButton = new JButton(\"PASS\");\n+        passButton.setEnabled(false);\n+        passButton.addActionListener((e) -> {\n+            dialog.dispose();\n+            frame.dispose();\n+            pass();\n+        });\n+        final JButton failButton = new JButton(\"FAIL\");\n+        failButton.setEnabled(false);\n+        failButton.addActionListener((e) -> {\n+            dialog.dispose();\n+            frame.dispose();\n+            fail();\n+        });\n+        testButton.addActionListener((e) -> {\n+            testButton.setEnabled(false);\n+            action.run();\n+            passButton.setEnabled(true);\n+            failButton.setEnabled(true);\n+        });\n+        JPanel mainPanel = new JPanel(new BorderLayout());\n+        mainPanel.add(textArea, BorderLayout.CENTER);\n+        JPanel buttonPanel = new JPanel(new FlowLayout());\n+        buttonPanel.add(testButton);\n+        buttonPanel.add(passButton);\n+        buttonPanel.add(failButton);\n+        mainPanel.add(buttonPanel, BorderLayout.SOUTH);\n+        dialog.add(mainPanel);\n+        dialog.pack();\n+        dialog.setVisible(true);\n+        dialog.addWindowListener(new WindowAdapter() {\n+            @Override\n+            public void windowClosing(WindowEvent e) {\n+                System.out.println(\"main dialog closing\");\n+                testGeneratedInterrupt = false;\n+                frame.dispose();\n+                mainThread.interrupt();\n+            }\n+        });\n+    }\n+\n+    public static synchronized void pass() {\n+        testPassed = true;\n+        testGeneratedInterrupt = true;\n+        mainThread.interrupt();\n+    }\n+\n+    public static synchronized void fail() {\n+        testPassed = false;\n+        testGeneratedInterrupt = true;\n+        mainThread.interrupt();\n+    }\n+\n+\n+    private static JLabel create(String text)\n+    {\n+        JLabel label = new JLabel(text);\n+        label.setOpaque(true);\n+        label.setBackground(background);\n+        label.setForeground(foreground);\n+        label.setFont(font);\n+        label.setPreferredSize(new Dimension(200, 40));\n+        frame.add(label);\n+\n+        return label;\n+    }\n+\n+    private static void runTest() {\n+        frame = new JFrame();\n+        frame.setUndecorated(true);\n+        frame.setLayout(new FlowLayout());\n+\n+        \/\/JLabel l1 = create(\"Test1\");\n+        \/\/JLabel opqLabel = create(\"<html>Test2<\/html>\");\n+        JLabel opqLabel = create(\"<html><p style=\\\"color:rgba(255, 0, 0, 1.00)\\\">TestLabel<\/p><\/html>\");\n+        JLabel tranLabel = create(\"<html><p style=\\\"color:rgba(255, 0, 0, 0.5)\\\">TestLabel<\/p><\/html>\");\n+\n+        frame.pack();\n+\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+        frame.toFront();\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        SwingUtilities.invokeAndWait(() -> {\n+            doTest(TestTranslucentLabelText::runTest);\n+        });\n+        mainThread = Thread.currentThread();\n+        try {\n+            Thread.sleep(180000);\n+        } catch (InterruptedException e) {\n+            if (!testPassed && testGeneratedInterrupt) {\n+                throw new RuntimeException(\"\" +\n+                   \"Label HTML text does not support translucent text colors\");\n+            }\n+        }\n+        if (!testGeneratedInterrupt) {\n+            throw new RuntimeException(\"user has not executed the test\");\n+        }\n+\n+    }\n+\n+\n+}\n+\n","filename":"test\/jdk\/javax\/swing\/JLabel\/TestTranslucentLabelText.java","additions":175,"deletions":0,"binary":false,"changes":175,"status":"added"}]}