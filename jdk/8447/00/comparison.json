{"files":[{"patch":"@@ -1762,0 +1762,4 @@\n+  shift = shift->uncast();\n+  if (shift == NULL) {\n+    return false;\n+  }\n@@ -1774,0 +1778,4 @@\n+    val = val->uncast();\n+    if (val == NULL) {\n+      return false;\n+    }\n","filename":"src\/hotspot\/share\/opto\/mulnode.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.util.Objects;\n@@ -32,1 +33,1 @@\n- * @bug 8277850 8278949\n+ * @bug 8277850 8278949 8285793\n@@ -277,1 +278,1 @@\n-    @IR(failOn = { IRNode.AND_L, IRNode.LSHIFT_I })\n+    @IR(failOn = { IRNode.AND_L, IRNode.LSHIFT_I, IRNode.CONV_I2L })\n@@ -291,1 +292,1 @@\n-    @IR(failOn = { IRNode.AND_L, IRNode.LSHIFT_L })\n+    @IR(failOn = { IRNode.AND_L, IRNode.LSHIFT_I, IRNode.CONV_I2L })\n@@ -329,1 +330,1 @@\n-    @IR(failOn = { IRNode.AND_L, IRNode.ADD_L, IRNode.LSHIFT_L })\n+    @IR(failOn = { IRNode.AND_L, IRNode.ADD_L, IRNode.LSHIFT_I, IRNode.CONV_I2L })\n@@ -340,0 +341,145 @@\n+\n+    @Test\n+    @IR(failOn = { IRNode.AND_I })\n+    public static int shiftMaskIntCheckIndex(int i, int length) {\n+        return Objects.checkIndex(i << 2, length) & 3; \/\/ transformed to: return 0;\n+    }\n+\n+    @Run(test = \"shiftMaskIntCheckIndex\")\n+    public static void shiftMaskIntCheckIndex_runner() {\n+        int i = RANDOM.nextInt((Integer.MAX_VALUE - 1) >> 2);\n+        int res = shiftMaskIntCheckIndex(i, (i << 2) + 1);\n+        if (res != 0) {\n+            throw new RuntimeException(\"incorrect result: \" + res);\n+        }\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.AND_L })\n+    public static long shiftMaskLongCheckIndex(long i, long length) {\n+        return Objects.checkIndex(i << 2, length) & 3; \/\/ transformed to: return 0;\n+    }\n+\n+    @Run(test = \"shiftMaskLongCheckIndex\")\n+    public static void shiftMaskLongCheckIndex_runner() {\n+        long i = RANDOM.nextInt((Integer.MAX_VALUE - 1) >> 2);\n+        long res = shiftMaskLongCheckIndex(i, (i << 2) + 1);\n+        if (res != 0) {\n+            throw new RuntimeException(\"incorrect result: \" + res);\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.AND_I, \"1\" })\n+    @IR(failOn = { IRNode.ADD_I })\n+    public static int addShiftMaskIntCheckIndex(int i, int j, int length) {\n+        return (j + Objects.checkIndex(i << 2, length)) & 3; \/\/ transformed to: return j & 3;\n+    }\n+\n+    @Run(test = \"addShiftMaskIntCheckIndex\")\n+    public static void addShiftMaskIntCheckIndex_runner() {\n+        int i = RANDOM.nextInt((Integer.MAX_VALUE - 1) >> 2);\n+        int j = RANDOM.nextInt();\n+        int res = addShiftMaskIntCheckIndex(i, j, (i << 2) + 1);\n+        if (res != (j & 3)) {\n+            throw new RuntimeException(\"incorrect result: \" + res);\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.AND_L, \"1\" })\n+    @IR(failOn = { IRNode.ADD_L })\n+    public static long addShiftMaskLongCheckIndex(long i, long j, long length) {\n+        return (j + Objects.checkIndex(i << 2, length)) & 3; \/\/ transformed to: return j & 3;\n+    }\n+\n+    @Run(test = \"addShiftMaskLongCheckIndex\")\n+    public static void addShiftMaskLongCheckIndex_runner() {\n+        long i = RANDOM.nextInt((Integer.MAX_VALUE - 1) >> 2);\n+        long j = RANDOM.nextLong();\n+        long res = addShiftMaskLongCheckIndex(i, j, (i << 2) + 1);\n+        if (res != (j & 3)) {\n+            throw new RuntimeException(\"incorrect result: \" + res);\n+        }\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.AND_I, IRNode.ADD_I })\n+    public static int addShiftMaskIntCheckIndex2(int i, int j, int length) {\n+        return (Objects.checkIndex(j << 2, length) + Objects.checkIndex(i << 2, length)) & 3; \/\/ transformed to: return 0;\n+    }\n+\n+\n+    @Run(test = \"addShiftMaskIntCheckIndex2\")\n+    public static void addShiftMaskIntCheckIndex2_runner() {\n+        int i = RANDOM.nextInt((Integer.MAX_VALUE - 1) >> 2);\n+        int j = RANDOM.nextInt((Integer.MAX_VALUE - 1) >> 2);\n+        int res = addShiftMaskIntCheckIndex2(i, j, (Integer.max(i, j) << 2) + 1);\n+        if (res != 0) {\n+            throw new RuntimeException(\"incorrect result: \" + res);\n+        }\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.AND_L, IRNode.ADD_L })\n+    public static long addShiftMaskLongCheckIndex2(long i, long j, long length) {\n+        return (Objects.checkIndex(j << 2, length) + Objects.checkIndex(i << 2, length)) & 3; \/\/ transformed to: return 0;\n+    }\n+\n+    @Run(test = \"addShiftMaskLongCheckIndex2\")\n+    public static void addShiftMaskLongCheckIndex2_runner() {\n+        long i = RANDOM.nextInt((Integer.MAX_VALUE - 1) >> 2);\n+        long j = RANDOM.nextInt((Integer.MAX_VALUE - 1) >> 2);\n+        long res = addShiftMaskLongCheckIndex2(i, j, (Long.max(i, j) << 2) + 1);\n+        if (res != 0) {\n+            throw new RuntimeException(\"incorrect result: \" + res);\n+        }\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.AND_L, IRNode.CONV_I2L })\n+    public static long shiftConvMaskCheckIndex(int i, int length) {\n+        return ((long)Objects.checkIndex(i << 2, length)) & 3; \/\/ transformed to: return 0;\n+    }\n+\n+    @Run(test = \"shiftConvMaskCheckIndex\")\n+    public static void shiftConvMaskCheckIndex_runner() {\n+        int i = RANDOM.nextInt((Integer.MAX_VALUE - 1) >> 2);\n+        long res = shiftConvMaskCheckIndex(i, (i << 2) + 1);\n+        if (res != 0) {\n+            throw new RuntimeException(\"incorrect result: \" + res);\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.AND_L, \"1\" })\n+    @IR(failOn = { IRNode.ADD_L, IRNode.CONV_I2L })\n+    public static long addShiftConvMaskCheckIndex(int i, long j, int length) {\n+        return (j + Objects.checkIndex(i << 2, length)) & 3; \/\/ transformed to: return j & 3;\n+    }\n+\n+    @Run(test = \"addShiftConvMaskCheckIndex\")\n+    public static void addShiftConvMaskCheckIndex_runner() {\n+        int i = RANDOM.nextInt((Integer.MAX_VALUE - 1) >> 2);\n+        long j = RANDOM.nextLong();\n+        long res = addShiftConvMaskCheckIndex(i, j, (i << 2) + 1);\n+        if (res != (j & 3)) {\n+            throw new RuntimeException(\"incorrect result: \" + res);\n+        }\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.AND_L, IRNode.ADD_L })\n+    public static long addShiftConvMaskCheckIndex2(int i, int j, int length) {\n+        return (((long)Objects.checkIndex(j << 2, length)) + ((long)Objects.checkIndex(i << 2, length))) & 3; \/\/ transformed to: return 0;\n+    }\n+\n+    @Run(test = \"addShiftConvMaskCheckIndex2\")\n+    public static void addShiftConvMaskCheckIndex2_runner() {\n+        int i = RANDOM.nextInt((Integer.MAX_VALUE - 1) >> 2);\n+        int j = RANDOM.nextInt((Integer.MAX_VALUE - 1) >> 2);\n+        long res = addShiftConvMaskCheckIndex2(i, j, (Integer.max(i, j) << 2) + 1);\n+        if (res != 0) {\n+            throw new RuntimeException(\"incorrect result: \" + res);\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestShiftAndMask.java","additions":150,"deletions":4,"binary":false,"changes":154,"status":"modified"}]}