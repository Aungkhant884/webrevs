{"files":[{"patch":"@@ -42,1 +42,1 @@\n-    \n+\n@@ -69,1 +69,1 @@\n-                new MemoryAccessVarHandle$Type$Helper(skipAlignmentMaskCheck, be, length, alignmentMask, true);\n+                new MemoryAccessVarHandle$Type$Helper(skipAlignmentMaskCheck, be, length, alignmentMask, false);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandleMemoryAccess.java.template","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,0 +41,2 @@\n+import static sun.security.action.GetPropertyAction.*;\n+\n@@ -46,0 +48,4 @@\n+    \/\/ used when testing invoke exact behavior of memory access handles\n+    private static final boolean SHOULD_ADAPT_HANDLES\n+        = Boolean.parseBoolean(privilegedGetProperty(\"jdk.internal.foreign.SHOULD_ADAPT_HANDLES\", \"true\"));\n+\n@@ -75,1 +81,3 @@\n-        return MemoryHandles.filterCoordinates(handle, 0, SEGMENT_FILTER);\n+        return SHOULD_ADAPT_HANDLES\n+            ? MemoryHandles.filterCoordinates(handle, 0, SEGMENT_FILTER)\n+            : handle;\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/Utils.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ *          java.base\/jdk.internal.access.foreign\n@@ -28,4 +29,18 @@\n- * @run testng\/othervm -Xverify:all VarHandleTestExact\n- * @run testng\/othervm -Xverify:all -Djava.lang.invoke.VarHandle.VAR_HANDLE_GUARDS=true -Djava.lang.invoke.VarHandle.VAR_HANDLE_IDENTITY_ADAPT=true VarHandleTestExact\n- * @run testng\/othervm -Xverify:all -Djava.lang.invoke.VarHandle.VAR_HANDLE_GUARDS=false -Djava.lang.invoke.VarHandle.VAR_HANDLE_IDENTITY_ADAPT=false VarHandleTestExact\n- * @run testng\/othervm -Xverify:all -Djava.lang.invoke.VarHandle.VAR_HANDLE_GUARDS=false -Djava.lang.invoke.VarHandle.VAR_HANDLE_IDENTITY_ADAPT=true VarHandleTestExact\n+ * @run testng\/othervm -Xverify:all\n+ *   -Djdk.internal.foreign.SHOULD_ADAPT_HANDLES=false\n+ *   VarHandleTestExact\n+ * @run testng\/othervm -Xverify:all\n+ *   -Djdk.internal.foreign.SHOULD_ADAPT_HANDLES=false\n+ *   -Djava.lang.invoke.VarHandle.VAR_HANDLE_GUARDS=true\n+ *   -Djava.lang.invoke.VarHandle.VAR_HANDLE_IDENTITY_ADAPT=true\n+ *   VarHandleTestExact\n+ * @run testng\/othervm -Xverify:all\n+ *   -Djdk.internal.foreign.SHOULD_ADAPT_HANDLES=false\n+ *   -Djava.lang.invoke.VarHandle.VAR_HANDLE_GUARDS=false\n+ *   -Djava.lang.invoke.VarHandle.VAR_HANDLE_IDENTITY_ADAPT=false\n+ *   VarHandleTestExact\n+ * @run testng\/othervm -Xverify:all\n+ *   -Djdk.internal.foreign.SHOULD_ADAPT_HANDLES=false\n+ *   -Djava.lang.invoke.VarHandle.VAR_HANDLE_GUARDS=false\n+ *   -Djava.lang.invoke.VarHandle.VAR_HANDLE_IDENTITY_ADAPT=true\n+ *   VarHandleTestExact\n@@ -34,1 +49,0 @@\n-import jdk.incubator.foreign.MemoryAddress;\n@@ -37,0 +51,1 @@\n+import jdk.internal.access.foreign.MemorySegmentProxy;\n@@ -49,0 +64,1 @@\n+import java.util.function.Consumer;\n@@ -83,1 +99,0 @@\n-        assertFalse(vh.hasInvokeExactBehavior());\n@@ -86,15 +101,4 @@\n-        try {\n-            vh.set(w, testValue);\n-            vh.withInvokeBehavior().set(w, testValue);\n-        } catch (WrongMethodTypeException wmte) {\n-            fail(\"Unexpected exception\", wmte);\n-        }\n-\n-        vh = vh.withInvokeExactBehavior();\n-        assertTrue(vh.hasInvokeExactBehavior());\n-        try {\n-            setter.set(vh, w, testValue); \/\/ should throw\n-            fail(\"Exception expected\");\n-        } catch (WrongMethodTypeException wmte) {\n-            assertMatches(wmte.getMessage(),\".*\\\\Qexpected (Widget,\" + fieldType.getSimpleName() + \")void \\\\E.*\");\n-        }\n+        doTest(vh,\n+            tvh -> tvh.set(w, testValue),\n+            tvh -> setter.set(tvh, w, testValue),\n+            \".*\\\\Qexpected (Widget,\" + fieldType.getSimpleName() + \")void \\\\E.*\");\n@@ -109,1 +113,0 @@\n-        assertFalse(vh.hasInvokeExactBehavior());\n@@ -112,15 +115,4 @@\n-        try {\n-            Object o = vh.get(w);\n-            Object o2 = vh.withInvokeBehavior().get(w);\n-        } catch (WrongMethodTypeException wmte) {\n-            fail(\"Unexpected exception\", wmte);\n-        }\n-\n-        vh = vh.withInvokeExactBehavior();\n-        assertTrue(vh.hasInvokeExactBehavior());\n-        try {\n-            getter.get(vh, w); \/\/ should throw\n-            fail(\"Exception expected\");\n-        } catch (WrongMethodTypeException wmte) {\n-            assertMatches(wmte.getMessage(),\".*\\\\Qexpected (Widget)\" + fieldType.getSimpleName() + \" \\\\E.*\");\n-        }\n+        doTest(vh,\n+            tvh -> tvh.get(w),\n+            tvh -> getter.get(tvh, w),\n+            \".*\\\\Qexpected (Widget)\" + fieldType.getSimpleName() + \" \\\\E.*\");\n@@ -136,8 +128,0 @@\n-        assertFalse(vh.hasInvokeExactBehavior());\n-\n-        try {\n-            vh.set(testValue);\n-            vh.withInvokeBehavior().set(testValue);\n-        } catch (WrongMethodTypeException wmte) {\n-            fail(\"Unexpected exception\", wmte);\n-        }\n@@ -145,8 +129,4 @@\n-        vh = vh.withInvokeExactBehavior();\n-        assertTrue(vh.hasInvokeExactBehavior());\n-        try {\n-            staticSetter.set(vh, testValue); \/\/ should throw\n-            fail(\"Exception expected\");\n-        } catch (WrongMethodTypeException wmte) {\n-            assertMatches(wmte.getMessage(),\".*\\\\Qexpected (\" + fieldType.getSimpleName() + \")void \\\\E.*\");\n-        }\n+        doTest(vh,\n+            tvh -> tvh.set(testValue),\n+            tvh -> staticSetter.set(tvh, testValue),\n+            \".*\\\\Qexpected (\" + fieldType.getSimpleName() + \")void \\\\E.*\");\n@@ -161,8 +141,0 @@\n-        assertFalse(vh.hasInvokeExactBehavior());\n-\n-        try {\n-            Object o = vh.get();\n-            Object o2 = vh.withInvokeBehavior().get();\n-        } catch (WrongMethodTypeException wmte) {\n-            fail(\"Unexpected exception\", wmte);\n-        }\n@@ -170,8 +142,4 @@\n-        vh = vh.withInvokeExactBehavior();\n-        assertTrue(vh.hasInvokeExactBehavior());\n-        try {\n-            staticGetter.get(vh); \/\/ should throw\n-            fail(\"Exception expected\");\n-        } catch (WrongMethodTypeException wmte) {\n-            assertMatches(wmte.getMessage(),\".*\\\\Qexpected ()\" + fieldType.getSimpleName() + \" \\\\E.*\");\n-        }\n+        doTest(vh,\n+            tvh -> tvh.get(),\n+            tvh -> staticGetter.get(tvh),\n+            \".*\\\\Qexpected ()\" + fieldType.getSimpleName() + \" \\\\E.*\");\n@@ -184,8 +152,0 @@\n-        assertFalse(vh.hasInvokeExactBehavior());\n-\n-        try {\n-            vh.set(arr, 0, testValue);\n-            vh.withInvokeBehavior().set(arr, 0, testValue);\n-        } catch (WrongMethodTypeException wmte) {\n-            fail(\"Unexpected exception\", wmte);\n-        }\n@@ -193,9 +153,4 @@\n-        vh = vh.withInvokeExactBehavior();\n-        assertTrue(vh.hasInvokeExactBehavior());\n-        try {\n-            setter.set(vh, arr, testValue); \/\/ should throw\n-            fail(\"Exception expected\");\n-        } catch (WrongMethodTypeException wmte) {\n-            assertMatches(wmte.getMessage(),\n-                \".*\\\\Qexpected (\" + arrayClass.getSimpleName() + \",int,\" + arrayClass.componentType().getSimpleName() + \")void \\\\E.*\");\n-        }\n+        doTest(vh,\n+            tvh -> tvh.set(arr, 0, testValue),\n+            tvh -> setter.set(tvh, arr, testValue),\n+            \".*\\\\Qexpected (\" + arrayClass.getSimpleName() + \",int,\" + arrayClass.componentType().getSimpleName() + \")void \\\\E.*\");\n@@ -207,1 +162,0 @@\n-        assertFalse(vh.hasInvokeExactBehavior());\n@@ -210,0 +164,22 @@\n+        doTest(vh,\n+            tvh -> tvh.set(buff, 0, testValue),\n+            tvh -> setter.set(tvh, buff, testValue),\n+            \".*\\\\Qexpected (ByteBuffer,int,\" + arrayClass.componentType().getSimpleName() + \")void \\\\E.*\");\n+    }\n+\n+    @Test(dataProvider = \"dataSetMemorySegment\")\n+    public void testExactSegmentSet(Class<?> carrier, Object testValue, SetSegmentX setter) {\n+        VarHandle vh = MemoryHandles.varHandle(carrier, ByteOrder.nativeOrder());\n+        try (MemorySegment seg = MemorySegment.allocateNative(8)) {\n+\n+            doTest(vh,\n+                tvh -> tvh.set(seg, 0L, testValue),\n+                tvh -> setter.set(tvh, seg, 0L, testValue),\n+                \".*\\\\Qexpected (MemorySegmentProxy,long,\" + carrier.getSimpleName() + \")void \\\\E.*\");\n+        }\n+    }\n+\n+    private static void doTest(VarHandle invokeHandle, Consumer<VarHandle> invokeTest,\n+                               Consumer<VarHandle> invokeExactTest, String expectedMessage) {\n+        assertFalse(invokeHandle.hasInvokeExactBehavior());\n+        assertSame(invokeHandle, invokeHandle.withInvokeBehavior());\n@@ -211,2 +187,1 @@\n-            vh.set(buff, 0, testValue);\n-            vh.withInvokeBehavior().set(buff, 0, testValue);\n+            invokeTest.accept(invokeHandle);\n@@ -217,2 +192,3 @@\n-        vh = vh.withInvokeExactBehavior();\n-        assertTrue(vh.hasInvokeExactBehavior());\n+        VarHandle invokeExactHandle = invokeHandle.withInvokeExactBehavior();\n+        assertTrue(invokeExactHandle.hasInvokeExactBehavior());\n+        assertSame(invokeExactHandle, invokeExactHandle.withInvokeExactBehavior());\n@@ -220,1 +196,1 @@\n-            setter.set(vh, buff, testValue); \/\/ should throw\n+            invokeExactTest.accept(invokeExactHandle); \/\/ should throw\n@@ -223,2 +199,1 @@\n-            assertMatches(wmte.getMessage(),\n-                \".*\\\\Qexpected (ByteBuffer,int,\" + arrayClass.componentType().getSimpleName() + \")void \\\\E.*\");\n+            assertMatches(wmte.getMessage(), expectedMessage);\n@@ -226,1 +201,0 @@\n-    }\n@@ -228,21 +202,7 @@\n-    @Test(dataProvider = \"dataSetMemorySegment\")\n-    public void testExactSegmentSet(Class<?> carrier, Object testValue, SetSegmentX setter) {\n-        VarHandle vh = MemoryHandles.varHandle(carrier, ByteOrder.nativeOrder());\n-        assertFalse(vh.hasInvokeExactBehavior());\n-        try (MemorySegment seg = MemorySegment.allocateNative(8)) {\n-            try {\n-                vh.set(seg, 0L, testValue);\n-                vh.withInvokeBehavior().set(seg, 0L, testValue);\n-            } catch (WrongMethodTypeException wmte) {\n-                fail(\"Unexpected exception\", wmte);\n-            }\n-\n-            vh = vh.withInvokeExactBehavior();\n-            assertTrue(vh.hasInvokeExactBehavior());\n-            try {\n-                setter.set(vh, seg, 0L, testValue); \/\/ should throw\n-                fail(\"Exception expected\");\n-            } catch (WrongMethodTypeException wmte) {\n-                assertMatches(wmte.getMessage(),\n-                    \".*\\\\Qexpected (MemorySegment,long,\" + carrier.getSimpleName() + \")void \\\\E.*\");\n-            }\n+        \/\/ try going back\n+        VarHandle invokeHandle2 = invokeExactHandle.withInvokeBehavior();\n+        assertFalse(invokeHandle2.hasInvokeExactBehavior());\n+        try {\n+            invokeTest.accept(invokeHandle2);\n+        } catch (WrongMethodTypeException wmte) {\n+            fail(\"Unexpected exception\", wmte);\n@@ -283,1 +243,1 @@\n-        void set(VarHandle vh, MemorySegment segment, long offser, Object testValue);\n+        void set(VarHandle vh, MemorySegment segment, long offset, Object testValue);\n@@ -420,5 +380,5 @@\n-        testCaseSegmentSet(cases, long.class, 1234,         (vh, seg, off, tv) -> vh.set(seg, off, (int) tv));\n-        testCaseSegmentSet(cases, long.class, (char) 1234,  (vh, seg, off, tv) -> vh.set(seg, off, (char) tv));\n-        testCaseSegmentSet(cases, long.class, (short) 1234, (vh, seg, off, tv) -> vh.set(seg, off, (short) tv));\n-        testCaseSegmentSet(cases, long.class, (byte) 1234,  (vh, seg, off, tv) -> vh.set(seg, off, (byte) tv));\n-        testCaseSegmentSet(cases, double.class, 1234F,      (vh, seg, off, tv) -> vh.set(seg, off, (float) tv));\n+        testCaseSegmentSet(cases, long.class, 1234,         (vh, seg, off, tv) -> vh.set((MemorySegmentProxy) seg, off, (int) tv));\n+        testCaseSegmentSet(cases, long.class, (char) 1234,  (vh, seg, off, tv) -> vh.set((MemorySegmentProxy) seg, off, (char) tv));\n+        testCaseSegmentSet(cases, long.class, (short) 1234, (vh, seg, off, tv) -> vh.set((MemorySegmentProxy) seg, off, (short) tv));\n+        testCaseSegmentSet(cases, long.class, (byte) 1234,  (vh, seg, off, tv) -> vh.set((MemorySegmentProxy) seg, off, (byte) tv));\n+        testCaseSegmentSet(cases, double.class, 1234F,      (vh, seg, off, tv) -> vh.set((MemorySegmentProxy) seg, off, (float) tv));\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/VarHandleTestExact.java","additions":82,"deletions":122,"binary":false,"changes":204,"status":"modified"}]}