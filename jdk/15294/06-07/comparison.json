{"files":[{"patch":"@@ -307,1 +307,1 @@\n-            connectTimeout = 0; \/\/ the value of zero means never time out\n+            connectTimeout = 0; \/\/ the value of zero means never time out or network timed out\n@@ -330,1 +330,1 @@\n-            connectTimeout = 0; \/\/ the value of zero means never time out\n+            connectTimeout = 0; \/\/ the value of zero means never time out or network timeout\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/Connection.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -69,1 +69,0 @@\n-    private static String SOCKET_NOT_CLOSED_MSG = \"The socket was not closed.\";\n@@ -75,3 +74,2 @@\n-        \/\/ start the test server first.\n-        boolean serverSlowDown = false;\n-        if(args.length ==2 ) {\n+        boolean serverSlowDown = Boolean.valueOf(args[0]);\n+        if (args.length == 2) {\n@@ -79,17 +77,0 @@\n-        } else {\n-            if(args.length ==1 ) {\n-                serverSlowDown = Boolean.valueOf(args[0]);\n-            }\n-        }\n-        TestServer server = new TestServer( serverSlowDown );\n-        server.start();\n-        Hashtable<String, Object> env = new Hashtable<>();\n-        env.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n-        env.put(Context.PROVIDER_URL, URIBuilder.newBuilder()\n-                .scheme(\"ldaps\")\n-                .loopback()\n-                .port(server.getPortNumber())\n-                .buildUnchecked().toString());\n-        if (args.length == 2 &&\n-                args[0].contains(\"LdapSSLHandshakeFailureTest\")) {\n-            env.put(\"java.naming.ldap.factory.socket\", args[0]);\n@@ -97,3 +78,17 @@\n-        env.put(\"java.naming.ldap.version\", \"3\");\n-        if (args.length == 2 ) {\n-            if( args[0].contains(\"LdapSSLHandshakeFailureTest\")) {\n+\n+        boolean hasCustomSocketFactory = args[0]\n+                .equals(\"LdapSSLHandshakeFailureTest$CustomSocketFactory\");\n+        \/\/ start the test server first.\n+        try (TestServer server = new TestServer(serverSlowDown)) {\n+            server.start();\n+            Hashtable<String, Object> env = new Hashtable<>();\n+            env.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n+            env.put(\"java.naming.ldap.version\", \"3\");\n+            env.put(Context.PROVIDER_URL, URIBuilder.newBuilder()\n+                    .scheme(\"ldaps\")\n+                    .loopback()\n+                    .port(server.getPortNumber())\n+                    .buildUnchecked().toString());\n+\n+            if (hasCustomSocketFactory) {\n+                env.put(\"java.naming.ldap.factory.socket\", args[0]);\n@@ -101,1 +96,3 @@\n-            } else {\n+            }\n+\n+            if (args.length == 2 && !hasCustomSocketFactory) {\n@@ -104,1 +101,0 @@\n-        }\n@@ -106,14 +102,18 @@\n-        env.put(Context.SECURITY_PROTOCOL,\"ssl\");\n-        env.put(Context.SECURITY_AUTHENTICATION, \"Simple\");\n-        env.put(Context.SECURITY_PRINCIPAL, \"cn=principal\");\n-        env.put(Context.SECURITY_CREDENTIALS, \"123456\");\n-        LdapContext ctx = null;\n-        try {\n-            ctx  = new InitialLdapContext(env, null);\n-        } catch (Exception e) {\n-            if (CustomSocketFactory.customSocket.closeMethodCalledCount() > 0\n-                    && args[0].equals(\"LdapSSLHandshakeFailureTest$CustomSocketFactory\")\n-                    && Boolean.valueOf(args[1])) {\n-                System.out.println(SOCKET_CLOSED_MSG);\n-            } else {\n-                throw e;\n+            env.put(Context.SECURITY_PROTOCOL, \"ssl\");\n+            env.put(Context.SECURITY_AUTHENTICATION, \"Simple\");\n+            env.put(Context.SECURITY_PRINCIPAL, \"cn=principal\");\n+            env.put(Context.SECURITY_CREDENTIALS, \"123456\");\n+            LdapContext ctx = null;\n+            try {\n+                ctx = new InitialLdapContext(env, null);\n+            } catch (Exception e) {\n+                if (CustomSocketFactory.customSocket.closeMethodCalledCount() > 0\n+                        && hasCustomSocketFactory\n+                        && Boolean.valueOf(args[1])) {\n+                    System.out.println(SOCKET_CLOSED_MSG);\n+                } else {\n+                    throw e;\n+                }\n+            } finally {\n+                if (ctx != null)\n+                    ctx.close();\n@@ -121,3 +121,0 @@\n-        } finally {\n-            if(ctx != null)\n-                ctx.close();\n@@ -178,1 +175,1 @@\n-    private static void setKeyStore() throws Exception {\n+    private static void setKeyStore() {\n@@ -211,1 +208,2 @@\n-            try (Socket socket = serverSocket.accept(); InputStream in = socket.getInputStream();\n+            try (Socket socket = serverSocket.accept();\n+                 InputStream in = socket.getInputStream();\n@@ -216,1 +214,2 @@\n-                byte[] bindResponse = {0x30, 0x0C, 0x02, 0x01, 0x01, 0x61, 0x07, 0x0A, 0x01, 0x00, 0x04, 0x00, 0x04, 0x00};\n+                byte[] bindResponse = {0x30, 0x0C, 0x02, 0x01, 0x01, 0x61, 0x07, 0x0A,\n+                        0x01, 0x00, 0x04, 0x00, 0x04, 0x00};\n","filename":"test\/jdk\/com\/sun\/jndi\/ldap\/LdapSSLHandshakeFailureTest.java","additions":45,"deletions":46,"binary":false,"changes":91,"status":"modified"}]}