{"files":[{"patch":"@@ -62,58 +62,58 @@\n- * A thread that creates a connection to an LDAP server.\n- * After the connection, the thread reads from the connection.\n- * A caller can invoke methods on the instance to read LDAP responses\n- * and to send LDAP requests.\n- * <p>\n- * There is a one-to-one correspondence between an LdapClient and\n- * a Connection. Access to Connection and its methods is only via\n- * LdapClient with two exceptions: SASL authentication and StartTLS.\n- * SASL needs to access Connection's socket IO streams (in order to do encryption\n- * of the security layer). StartTLS needs to do replace IO streams\n- * and close the IO  streams on nonfatal close. The code for SASL\n- * authentication can be treated as being the same as from LdapClient\n- * because the SASL code is only ever called from LdapClient, from\n- * inside LdapClient's synchronized authenticate() method. StartTLS is called\n- * directly by the application but should only occur when the underlying\n- * connection is quiet.\n- * <p>\n- * In terms of synchronization, worry about data structures\n- * used by the Connection thread because that usage might contend\n- * with calls by the main threads (i.e., those that call LdapClient).\n- * Main threads need to worry about contention with each other.\n- * Fields that Connection thread uses:\n- *     inStream - synced access and update; initialized in constructor;\n- *           referenced outside class unsync'ed (by LdapSasl) only\n- *           when connection is quiet\n- *     traceFile, traceTagIn, traceTagOut - no sync; debugging only\n- *     parent - no sync; initialized in constructor; no updates\n- *     pendingRequests - sync\n- *     pauseLock - per-instance lock;\n- *     paused - sync via pauseLock (pauseReader())\n- * Members used by main threads (LdapClient):\n- *     host, port - unsync; read-only access for StartTLS and debug messages\n- *     setBound(), setV3() - no sync; called only by LdapClient.authenticate(),\n- *             which is a sync method called only when connection is \"quiet\"\n- *     getMsgId() - sync\n- *     writeRequest(), removeRequest(),findRequest(), abandonOutstandingReqs() -\n- *             access to shared pendingRequests is sync\n- *     writeRequest(),  abandonRequest(), ldapUnbind() - access to outStream sync\n- *     cleanup() - sync\n- *     readReply() - access to sock sync\n- *     unpauseReader() - (indirectly via writeRequest) sync on pauseLock\n- * Members used by SASL auth (main thread):\n- *     inStream, outStream - no sync; used to construct new stream; accessed\n- *             only when conn is \"quiet\" and not shared\n- *     replaceStreams() - sync method\n- * Members used by StartTLS:\n- *     inStream, outStream - no sync; used to record the existing streams;\n- *             accessed only when conn is \"quiet\" and not shared\n- *     replaceStreams() - sync method\n- * <p>\n- * Handles anonymous, simple, and SASL bind for v3; anonymous and simple\n- * for v2.\n- * %%% made public for access by LdapSasl %%%\n- *\n- * @author Vincent Ryan\n- * @author Rosanna Lee\n- * @author Jagane Sundar\n- *\/\n+  * A thread that creates a connection to an LDAP server.\n+  * After the connection, the thread reads from the connection.\n+  * A caller can invoke methods on the instance to read LDAP responses\n+  * and to send LDAP requests.\n+  * <p>\n+  * There is a one-to-one correspondence between an LdapClient and\n+  * a Connection. Access to Connection and its methods is only via\n+  * LdapClient with two exceptions: SASL authentication and StartTLS.\n+  * SASL needs to access Connection's socket IO streams (in order to do encryption\n+  * of the security layer). StartTLS needs to do replace IO streams\n+  * and close the IO  streams on nonfatal close. The code for SASL\n+  * authentication can be treated as being the same as from LdapClient\n+  * because the SASL code is only ever called from LdapClient, from\n+  * inside LdapClient's synchronized authenticate() method. StartTLS is called\n+  * directly by the application but should only occur when the underlying\n+  * connection is quiet.\n+  * <p>\n+  * In terms of synchronization, worry about data structures\n+  * used by the Connection thread because that usage might contend\n+  * with calls by the main threads (i.e., those that call LdapClient).\n+  * Main threads need to worry about contention with each other.\n+  * Fields that Connection thread uses:\n+  *     inStream - synced access and update; initialized in constructor;\n+  *           referenced outside class unsync'ed (by LdapSasl) only\n+  *           when connection is quiet\n+  *     traceFile, traceTagIn, traceTagOut - no sync; debugging only\n+  *     parent - no sync; initialized in constructor; no updates\n+  *     pendingRequests - sync\n+  *     pauseLock - per-instance lock;\n+  *     paused - sync via pauseLock (pauseReader())\n+  * Members used by main threads (LdapClient):\n+  *     host, port - unsync; read-only access for StartTLS and debug messages\n+  *     setBound(), setV3() - no sync; called only by LdapClient.authenticate(),\n+  *             which is a sync method called only when connection is \"quiet\"\n+  *     getMsgId() - sync\n+  *     writeRequest(), removeRequest(),findRequest(), abandonOutstandingReqs() -\n+  *             access to shared pendingRequests is sync\n+  *     writeRequest(),  abandonRequest(), ldapUnbind() - access to outStream sync\n+  *     cleanup() - sync\n+  *     readReply() - access to sock sync\n+  *     unpauseReader() - (indirectly via writeRequest) sync on pauseLock\n+  * Members used by SASL auth (main thread):\n+  *     inStream, outStream - no sync; used to construct new stream; accessed\n+  *             only when conn is \"quiet\" and not shared\n+  *     replaceStreams() - sync method\n+  * Members used by StartTLS:\n+  *     inStream, outStream - no sync; used to record the existing streams;\n+  *             accessed only when conn is \"quiet\" and not shared\n+  *     replaceStreams() - sync method\n+  * <p>\n+  * Handles anonymous, simple, and SASL bind for v3; anonymous and simple\n+  * for v2.\n+  * %%% made public for access by LdapSasl %%%\n+  *\n+  * @author Vincent Ryan\n+  * @author Rosanna Lee\n+  * @author Jagane Sundar\n+  *\/\n@@ -131,1 +131,1 @@\n-    \/\/ used by StartTlsResponse when creating an SSL socket\n+                         \/\/ used by StartTlsResponse when creating an SSL socket\n@@ -133,1 +133,1 @@\n-    \/\/ used by StartTlsResponse when creating an SSL socket\n+                         \/\/ used by StartTlsResponse when creating an SSL socket\n@@ -214,1 +214,1 @@\n-               int connectTimeout, int readTimeout, OutputStream trace) throws NamingException {\n+        int connectTimeout, int readTimeout, OutputStream trace) throws NamingException {\n@@ -246,1 +246,1 @@\n-                    new CommunicationException(host + \":\" + port);\n+                new CommunicationException(host + \":\" + port);\n@@ -254,1 +254,1 @@\n-                    new CommunicationException(host + \":\" + port);\n+                new CommunicationException(host + \":\" + port);\n@@ -268,1 +268,1 @@\n-        return new InetSocketAddress(host, port);\n+            return new InetSocketAddress(host, port);\n@@ -281,1 +281,1 @@\n-                                int connectTimeout) throws Exception {\n+            int connectTimeout) throws Exception {\n@@ -386,1 +386,1 @@\n-                             boolean pauseAfterReceipt) throws IOException {\n+        boolean pauseAfterReceipt) throws IOException {\n@@ -391,1 +391,1 @@\n-                             boolean pauseAfterReceipt, int replyQueueCapacity) throws IOException {\n+        boolean pauseAfterReceipt, int replyQueueCapacity) throws IOException {\n@@ -394,1 +394,1 @@\n-                new LdapRequest(msgId, pauseAfterReceipt, replyQueueCapacity);\n+            new LdapRequest(msgId, pauseAfterReceipt, replyQueueCapacity);\n@@ -434,1 +434,1 @@\n-                        \"; socket closed\");\n+                    \"; socket closed\");\n@@ -446,1 +446,1 @@\n-                    \"Interrupted during LDAP operation\");\n+                \"Interrupted during LDAP operation\");\n@@ -537,2 +537,2 @@\n-            ber.encodeInt(abandonMsgId);\n-            ber.encodeInt(ldr.msgId, LdapClient.LDAP_REQ_ABANDON);\n+                ber.encodeInt(abandonMsgId);\n+                ber.encodeInt(ldr.msgId, LdapClient.LDAP_REQ_ABANDON);\n@@ -540,3 +540,3 @@\n-            if (v3) {\n-                LdapClient.encodeControls(ber, reqCtls);\n-            }\n+                if (v3) {\n+                    LdapClient.encodeControls(ber, reqCtls);\n+                }\n@@ -547,1 +547,1 @@\n-                        ber.getDataLen());\n+                    ber.getDataLen());\n@@ -590,4 +590,4 @@\n-            ber.encodeInt(unbindMsgId);\n-            \/\/ IMPLICIT TAGS\n-            ber.encodeByte(LdapClient.LDAP_REQ_UNBIND);\n-            ber.encodeByte(0);\n+                ber.encodeInt(unbindMsgId);\n+                \/\/ IMPLICIT TAGS\n+                ber.encodeByte(LdapClient.LDAP_REQ_UNBIND);\n+                ber.encodeByte(0);\n@@ -595,3 +595,3 @@\n-            if (v3) {\n-                LdapClient.encodeControls(ber, reqCtls);\n-            }\n+                if (v3) {\n+                    LdapClient.encodeControls(ber, reqCtls);\n+                }\n@@ -602,1 +602,1 @@\n-                        0, ber.getDataLen());\n+                    0, ber.getDataLen());\n@@ -675,1 +675,2 @@\n-                    ldr = ldr.next;\n+                        ldr = ldr.next;\n+                    }\n@@ -678,1 +679,0 @@\n-        }\n@@ -832,1 +832,1 @@\n-                            inStream);\n+                                        inStream);\n@@ -840,1 +840,1 @@\n-    \/*\n+     \/*\n@@ -848,1 +848,1 @@\n-                    inStream);\n+                                inStream);\n@@ -930,1 +930,1 @@\n-                                    seqlenlen-bytesread);\n+                                seqlenlen-bytesread);\n@@ -1029,1 +1029,1 @@\n-                        + in);\n+                    + in);\n@@ -1045,1 +1045,1 @@\n-            throws IOException\n+        throws IOException\n@@ -1090,1 +1090,1 @@\n-            throws SaslException {\n+        throws SaslException {\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/Connection.java","additions":93,"deletions":93,"binary":false,"changes":186,"status":"modified"}]}