{"files":[{"patch":"@@ -285,3 +285,0 @@\n-            InetSocketAddress endpoint =\n-                    createInetSocketAddress(host, port);\n-\n@@ -290,2 +287,2 @@\n-                socket = createConnectionSocket(endpoint, socketFactory, connectTimeout);\n-            } else { \/\/ NO SocketFactory\n+                socket = createConnectionSocket(host, port, socketFactory, connectTimeout);\n+            } else {\n@@ -293,1 +290,1 @@\n-                createConnectionSocket(endpoint, connectTimeout);\n+                socket = createConnectionSocket(host, port, connectTimeout);\n@@ -307,1 +304,5 @@\n-    private Socket createConnectionSocket(InetSocketAddress endpoint,  int connectTimeout)throws Exception {\n+    private Socket createConnectionSocket(String host, int port,  int connectTimeout)throws Exception {\n+\n+        if (connectTimeout <= 0) {\n+            connectTimeout = 0; \/\/ the value of zero means never time out\n+        }\n@@ -309,11 +310,4 @@\n-        if (connectTimeout > 0) {\n-            if (debug) {\n-                System.err.println(\"Connection.createSocket: creating socket with \" +\n-                        \"a timeout\");\n-            }\n-            socket.connect(endpoint, connectTimeout);\n-        } else {\n-            if (debug) {\n-                System.err.println(\"Connection.createSocket: creating socket\");\n-            }\n-            socket.connect(endpoint);\n+        socket.connect(createInetSocketAddress(host, port), connectTimeout);\n+        if (debug) {\n+            System.err.println(\"Connection.createSocket: creating socket with \" +\n+                    \"a timeout\");\n@@ -325,1 +319,1 @@\n-    private Socket createConnectionSocket(InetSocketAddress endpoint, String socketFactory,\n+    private Socket createConnectionSocket(String host, int port, String socketFactory,\n@@ -333,0 +327,1 @@\n+        Socket socket = null;\n@@ -334,0 +329,3 @@\n+        if (connectTimeout <= 0) {\n+            connectTimeout = 0; \/\/ the value of zero means never time out\n+        }\n@@ -335,1 +333,2 @@\n-        Socket socket = factory.createSocket();\n+        socket = factory.createSocket();\n+        socket.connect(createInetSocketAddress(host, port), connectTimeout);\n@@ -337,14 +336,3 @@\n-        if (connectTimeout > 0) {\n-            if (debug) {\n-                System.err.println(\"Connection.createSocket: creating socket with \" +\n-                        \"a timeout using supplied socket factory\");\n-            }\n-            \/\/ connect socket\n-            socket.connect(endpoint, connectTimeout);\n-        } else {\n-            if (debug) {\n-                System.err.println(\"Connection.createSocket: creating socket using \" +\n-                        \"supplied socket factory\");\n-            }\n-            \/\/ connect socket\n-            socket.connect(endpoint);\n+        if (debug) {\n+            System.err.println(\"Connection.createSocket: creating socket with \" +\n+                    \"a timeout using supplied socket factory\");\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/Connection.java","additions":22,"deletions":34,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -24,1 +24,6 @@\n-import java.io.*;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n@@ -33,0 +38,1 @@\n+import java.net.SocketException;\n@@ -51,1 +57,8 @@\n- * @run main\/othervm LdapSSLHandshakeFailureTest\n+ * @run main\/othervm LdapSSLHandshakeFailureTest LdapSSLHandshakeFailureTest$CustomSocketFactory true\n+ * @run main\/othervm LdapSSLHandshakeFailureTest -1000 true\n+ * @run main\/othervm LdapSSLHandshakeFailureTest -1000 false\n+ * @run main\/othervm LdapSSLHandshakeFailureTest 2000 false\n+ * @run main\/othervm LdapSSLHandshakeFailureTest 0 true\n+ * @run main\/othervm LdapSSLHandshakeFailureTest 0 false\n+ * @run main\/othervm LdapSSLHandshakeFailureTest true\n+ * @run main\/othervm LdapSSLHandshakeFailureTest false\n@@ -59,0 +72,1 @@\n+\n@@ -62,1 +76,9 @@\n-        TestServer server = new TestServer();\n+        boolean serverSlowDown = false;\n+        if(args.length ==2 ) {\n+            serverSlowDown = Boolean.valueOf(args[1]);\n+        } else {\n+            if(args.length ==1 ) {\n+                serverSlowDown = Boolean.valueOf(args[0]);\n+            }\n+        }\n+        TestServer server = new TestServer( serverSlowDown );\n@@ -71,1 +93,4 @@\n-        env.put(\"java.naming.ldap.factory.socket\", CustomSocketFactory.class.getName());\n+        if (args.length == 2 &&\n+                args[0].contains(\"LdapSSLHandshakeFailureTest\")) {\n+            env.put(\"java.naming.ldap.factory.socket\", args[0]);\n+        }\n@@ -73,1 +98,9 @@\n-        env.put(\"com.sun.jndi.ldap.connect.timeout\", \"1000\");\n+        if (args.length == 2 ) {\n+            if( args[0].contains(\"LdapSSLHandshakeFailureTest\")) {\n+                env.put(\"com.sun.jndi.ldap.connect.timeout\", \"1000\");\n+            } else {\n+                env.put(\"com.sun.jndi.ldap.connect.timeout\", args[0]);\n+            }\n+        }\n+\n+        env.put(Context.SECURITY_PROTOCOL,\"ssl\");\n@@ -76,1 +109,1 @@\n-        env.put(Context.SECURITY_CREDENTIALS, \"justpassword\");\n+        env.put(Context.SECURITY_CREDENTIALS, \"123456\");\n@@ -81,1 +114,3 @@\n-            if (CustomSocketFactory.customSocket.closeMethodCalledCount() > 0) {\n+            if (CustomSocketFactory.customSocket.closeMethodCalledCount() > 0\n+                    && args[0].equals(\"LdapSSLHandshakeFailureTest$CustomSocketFactory\")\n+                    && Boolean.valueOf(args[1])) {\n@@ -84,1 +119,0 @@\n-                System.out.println(SOCKET_NOT_CLOSED_MSG);\n@@ -93,1 +127,1 @@\n-        public static CustomSocket customSocket = new CustomSocket();\n+        private static CustomSocket customSocket;\n@@ -100,1 +134,2 @@\n-        public Socket createSocket() {\n+        public Socket createSocket() throws SocketException {\n+            customSocket = new CustomSocket();\n@@ -129,1 +164,3 @@\n-\n+        public CustomSocket () {\n+            closeMethodCalled = 0;\n+        }\n@@ -135,1 +172,1 @@\n-        public void close() throws IOException {\n+        public void close() throws java.io.IOException {\n@@ -142,6 +179,0 @@\n-        String filePath = getKeystoreFilePath();\n-        System.setProperty(\"javax.net.ssl.keyStore\", filePath);\n-        System.setProperty(\"javax.net.ssl.keyStorePassword\", \"123456\");\n-        System.setProperty(\"javax.net.ssl.trustStore\", filePath);\n-        System.setProperty(\"javax.net.ssl.trustStorePassword\", \"123456\");\n-    }\n@@ -149,13 +180,6 @@\n-    private static String getKeystoreFilePath() throws Exception {\n-        String dir = System.getProperty(\"test.src\", \".\") + File.separator;\n-        File file = new File(dir+\"myKeyStore\");\n-        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n-        if (file.exists()) {\n-            \/\/ if exists, load\n-            keyStore.load(new FileInputStream(file), \"123456\".toCharArray());\n-        } else {\n-            \/\/ if not exists, create\n-            keyStore.load(null, null);\n-            keyStore.store(new FileOutputStream(file), \"123456\".toCharArray());\n-        }\n-        return file.getPath();\n+        String fileName = \"ksWithSAN\", dir = System.getProperty(\"test.src\", \".\") + File.separator;\n+\n+        System.setProperty(\"javax.net.ssl.keyStore\", dir + fileName);\n+        System.setProperty(\"javax.net.ssl.keyStorePassword\", \"welcome1\");\n+        System.setProperty(\"javax.net.ssl.trustStore\", dir + fileName);\n+        System.setProperty(\"javax.net.ssl.trustStorePassword\", \"welcome1\");\n@@ -165,1 +189,1 @@\n-\n+        private boolean isForceToSleep = false;\n@@ -169,1 +193,2 @@\n-        TestServer() {\n+        TestServer(boolean isForceToSleep) {\n+            this.isForceToSleep = isForceToSleep;\n@@ -186,2 +211,1 @@\n-            try (Socket socket = serverSocket.accept();\n-                 InputStream in = socket.getInputStream();\n+            try (Socket socket = serverSocket.accept(); InputStream in = socket.getInputStream();\n@@ -189,4 +213,4 @@\n-\n-                Thread.sleep(10000);\n-                byte[] bindResponse = {0x30, 0x0C, 0x02, 0x01, 0x01, 0x61, 0x07, 0x0A, 0x01, 0x00,\n-                        0x04, 0x00, 0x04, 0x00};\n+                if (isForceToSleep) {\n+                    Thread.sleep(5000);\n+                }\n+                byte[] bindResponse = {0x30, 0x0C, 0x02, 0x01, 0x01, 0x61, 0x07, 0x0A, 0x01, 0x00, 0x04, 0x00, 0x04, 0x00};\n","filename":"test\/jdk\/com\/sun\/jndi\/ldap\/LdapSSLHandshakeFailureTest.java","additions":63,"deletions":39,"binary":false,"changes":102,"status":"modified"},{"filename":"test\/jdk\/com\/sun\/jndi\/ldap\/ksWithSAN","binary":true,"status":"added"}]}