{"files":[{"patch":"@@ -281,1 +281,1 @@\n-            int connectTimeout) throws Exception {\n+                                int connectTimeout) throws Exception {\n@@ -284,29 +284,10 @@\n-\n-        if (socketFactory != null) {\n-\n-            \/\/ create the factory\n-\n-            @SuppressWarnings(\"unchecked\")\n-            Class<? extends SocketFactory> socketFactoryClass =\n-                (Class<? extends SocketFactory>)Obj.helper.loadClass(socketFactory);\n-            Method getDefault =\n-                socketFactoryClass.getMethod(\"getDefault\", new Class<?>[]{});\n-            SocketFactory factory = (SocketFactory) getDefault.invoke(null, new Object[]{});\n-\n-            \/\/ create the socket\n-\n-            if (connectTimeout > 0) {\n-\n-                InetSocketAddress endpoint =\n-                        createInetSocketAddress(host, port);\n-\n-                \/\/ unconnected socket\n-                socket = factory.createSocket();\n-\n-                if (debug) {\n-                    System.err.println(\"Connection: creating socket with \" +\n-                            \"a timeout using supplied socket factory\");\n-                }\n-\n-                \/\/ connected socket\n-                socket.connect(endpoint, connectTimeout);\n+        try {\n+            InetSocketAddress endpoint =\n+                    createInetSocketAddress(host, port);\n+\n+            if (socketFactory != null) {\n+                \/\/ create a connected socket with factory\n+                socket = createConnectionSocket(endpoint, socketFactory, connectTimeout);\n+            } else { \/\/ NO SocketFactory\n+                \/\/ create a connected socket without factory\n+                createConnectionSocket(endpoint, connectTimeout);\n@@ -314,0 +295,10 @@\n+            \/\/the handshake for SSL connection with server and reset timeout for the socket\n+            initialSSLHandshake(socket, connectTimeout);\n+        } catch (Exception e) {\n+            \/\/ 8314063 the socket is not closed after the failure of handshake\n+            \/\/ close the socket while the error happened\n+            closeSocket(socket);\n+            throw e;\n+        }\n+        return socket;\n+    }\n@@ -315,8 +306,7 @@\n-            \/\/ continue (but ignore connectTimeout)\n-            if (socket == null) {\n-                if (debug) {\n-                    System.err.println(\"Connection: creating socket using \" +\n-                        \"supplied socket factory\");\n-                }\n-                \/\/ connected socket\n-                socket = factory.createSocket(host, port);\n+    \/\/ create a connected socket without factory\n+    private Socket createConnectionSocket(InetSocketAddress endpoint,  int connectTimeout)throws Exception {\n+        Socket socket = new Socket();\n+        if (connectTimeout > 0) {\n+            if (debug) {\n+                System.err.println(\"Connection.createSocket: creating socket with \" +\n+                        \"a timeout\");\n@@ -324,0 +314,1 @@\n+            socket.connect(endpoint, connectTimeout);\n@@ -325,0 +316,7 @@\n+            if (debug) {\n+                System.err.println(\"Connection.createSocket: creating socket\");\n+            }\n+            socket.connect(endpoint);\n+        }\n+        return socket;\n+    }\n@@ -326,3 +324,9 @@\n-            if (connectTimeout > 0) {\n-\n-                    InetSocketAddress endpoint = createInetSocketAddress(host, port);\n+    \/\/ create a connected socket with factory\n+    private Socket createConnectionSocket(InetSocketAddress endpoint, String socketFactory,\n+                                          int connectTimeout) throws Exception {\n+        @SuppressWarnings(\"unchecked\")\n+        Class<? extends SocketFactory> socketFactoryClass =\n+                (Class<? extends SocketFactory>) Obj.helper.loadClass(socketFactory);\n+        Method getDefault =\n+                socketFactoryClass.getMethod(\"getDefault\", new Class<?>[]{});\n+        SocketFactory factory = (SocketFactory) getDefault.invoke(null, new Object[]{});\n@@ -330,1 +334,2 @@\n-                    socket = new Socket();\n+        \/\/ create unconnected socket\n+        Socket socket = factory.createSocket();\n@@ -332,5 +337,4 @@\n-                    if (debug) {\n-                        System.err.println(\"Connection: creating socket with \" +\n-                            \"a timeout\");\n-                    }\n-                    socket.connect(endpoint, connectTimeout);\n+        if (connectTimeout > 0) {\n+            if (debug) {\n+                System.err.println(\"Connection.createSocket: creating socket with \" +\n+                        \"a timeout using supplied socket factory\");\n@@ -338,9 +342,6 @@\n-\n-            \/\/ continue (but ignore connectTimeout)\n-\n-            if (socket == null) {\n-                if (debug) {\n-                    System.err.println(\"Connection: creating socket\");\n-                }\n-                \/\/ connected socket\n-                socket = new Socket(host, port);\n+            \/\/ connect socket\n+            socket.connect(endpoint, connectTimeout);\n+        } else {\n+            if (debug) {\n+                System.err.println(\"Connection.createSocket: creating socket using \" +\n+                        \"supplied socket factory\");\n@@ -348,0 +349,2 @@\n+            \/\/ connect socket\n+            socket.connect(endpoint);\n@@ -349,0 +352,8 @@\n+        return socket;\n+    }\n+\n+    \/\/ For LDAP connect timeouts on LDAP over SSL connections must treat\n+    \/\/ the SSL handshake following socket connection as part of the timeout.\n+    \/\/ So explicitly set a socket read timeout, trigger the SSL handshake,\n+    \/\/ then reset the timeout.\n+    private void initialSSLHandshake(Socket socket , int connectTimeout) throws Exception {\n@@ -350,4 +361,0 @@\n-        \/\/ For LDAP connect timeouts on LDAP over SSL connections must treat\n-        \/\/ the SSL handshake following socket connection as part of the timeout.\n-        \/\/ So explicitly set a socket read timeout, trigger the SSL handshake,\n-        \/\/ then reset the timeout.\n@@ -369,1 +376,13 @@\n-        return socket;\n+    }\n+\n+    \/\/ close the socket when the error happens\n+    private void closeSocket (Socket socket) {\n+        if (socket != null && !socket.isClosed()) {\n+            try {\n+                socket.close();\n+            } catch (IOException ioe) {\n+                if (debug) {\n+                    System.err.println(\"Connection: createSocket failed with \" + ioe);\n+                }\n+            }\n+        }\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/Connection.java","additions":80,"deletions":61,"binary":false,"changes":141,"status":"modified"},{"patch":"@@ -0,0 +1,218 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.*;\n+import java.net.InetAddress;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import javax.net.SocketFactory;\n+import javax.net.ssl.SSLServerSocketFactory;\n+import javax.naming.ldap.InitialLdapContext;\n+import javax.naming.ldap.LdapContext;\n+import javax.naming.Context;\n+import java.security.KeyStore;\n+import java.util.Hashtable;\n+\n+import jdk.test.lib.net.URIBuilder;\n+\n+\/*\n+ * @test\n+ * @bug 8314063\n+ * @library \/test\/lib\n+ * @summary For LDAPs connection, if the value of com.sun.jndi.ldap.connect.timeout is\n+ * set too small or not an optimal value for the system, after the socket is created and\n+ * connected to the server, but the handshake between the client and server fails due to\n+ * socket time out, the opened socket is not closed properly. In this test case, the server\n+ * is forced to sleep ten seconds and connection time out for client is one second. This\n+ * will allow the socket opened and connected, and give the chance for the handshake to be\n+ * timed out. Before this fix, the socket is kept opened. Right now the exception will be\n+ * caught and the socket will be closed.\n+ *\n+ * @run main\/othervm LdapSSLHandshakeFailureTest\n+ *\/\n+\n+public class LdapSSLHandshakeFailureTest {\n+    private static String SOCKET_CLOSED_MSG = \"The socket has been closed.\";\n+    private static String SOCKET_NOT_CLOSED_MSG = \"The socket was not closed.\";\n+\n+    public static void main(String args[]) throws Exception {\n+        \/\/ Set the keystores\n+        setKeyStore();\n+        \/\/ start the test server first.\n+        TestServer server = new TestServer();\n+        server.start();\n+        Hashtable<String, Object> env = new Hashtable<>();\n+        env.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\n+        env.put(Context.PROVIDER_URL, URIBuilder.newBuilder()\n+                .scheme(\"ldaps\")\n+                .loopback()\n+                .port(server.getPortNumber())\n+                .buildUnchecked().toString());\n+        env.put(\"java.naming.ldap.factory.socket\", CustomSocketFactory.class.getName());\n+        env.put(\"java.naming.ldap.version\", \"3\");\n+        env.put(\"com.sun.jndi.ldap.connect.timeout\", \"1000\");\n+        env.put(Context.SECURITY_AUTHENTICATION, \"Simple\");\n+        env.put(Context.SECURITY_PRINCIPAL, \"cn=principal\");\n+        env.put(Context.SECURITY_CREDENTIALS, \"justpassword\");\n+        LdapContext ctx = null;\n+        try {\n+            ctx  = new InitialLdapContext(env, null);\n+        } catch (Exception e) {\n+            if (CustomSocketFactory.customSocket.closeMethodCalledCount() > 0) {\n+                System.out.println(SOCKET_CLOSED_MSG);\n+            } else {\n+                System.out.println(SOCKET_NOT_CLOSED_MSG);\n+                throw e;\n+            }\n+        } finally {\n+            if(ctx != null)\n+                ctx.close();\n+        }\n+    }\n+    public static class CustomSocketFactory extends SocketFactory {\n+        public static CustomSocket customSocket = new CustomSocket();\n+\n+        public static CustomSocketFactory getDefault() {\n+            return new CustomSocketFactory();\n+        }\n+\n+        @Override\n+        public Socket createSocket() {\n+            return customSocket;\n+        }\n+\n+        @Override\n+        public Socket createSocket(String s, int timeout) {\n+            return customSocket;\n+        }\n+\n+        @Override\n+        public Socket createSocket(String host, int port, InetAddress localHost,\n+                                   int localPort) {\n+            return customSocket;\n+        }\n+\n+        @Override\n+        public Socket createSocket(InetAddress host, int port) {\n+            return customSocket;\n+        }\n+\n+        @Override\n+        public Socket createSocket(InetAddress address, int port,\n+                                   InetAddress localAddress, int localPort) {\n+            return customSocket;\n+        }\n+    }\n+\n+    private static class CustomSocket extends Socket {\n+        private int closeMethodCalled = 0;\n+\n+        public int closeMethodCalledCount() {\n+            return closeMethodCalled;\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+            closeMethodCalled++;\n+            super.close();\n+        }\n+    }\n+\n+    private static void setKeyStore() throws Exception {\n+        String filePath = getKeystoreFilePath();\n+        System.setProperty(\"javax.net.ssl.keyStore\", filePath);\n+        System.setProperty(\"javax.net.ssl.keyStorePassword\", \"123456\");\n+        System.setProperty(\"javax.net.ssl.trustStore\", filePath);\n+        System.setProperty(\"javax.net.ssl.trustStorePassword\", \"123456\");\n+    }\n+\n+    private static String getKeystoreFilePath() throws Exception {\n+        String dir = System.getProperty(\"test.src\", \".\") + File.separator;\n+        File file = new File(dir+\"myKeyStore\");\n+        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n+        if (file.exists()) {\n+            \/\/ if exists, load\n+            keyStore.load(new FileInputStream(file), \"123456\".toCharArray());\n+        } else {\n+            \/\/ if not exists, create\n+            keyStore.load(null, null);\n+            keyStore.store(new FileOutputStream(file), \"123456\".toCharArray());\n+        }\n+        return file.getPath();\n+    }\n+\n+    static class TestServer extends Thread implements AutoCloseable {\n+\n+        private final ServerSocket serverSocket;\n+        private final int PORT;\n+\n+        TestServer() {\n+            try {\n+                SSLServerSocketFactory socketFactory = (SSLServerSocketFactory) SSLServerSocketFactory.getDefault();\n+                serverSocket = socketFactory.createServerSocket(0, 0, InetAddress.getLoopbackAddress());\n+                PORT = serverSocket.getLocalPort();\n+            } catch (IOException ex) {\n+                throw new RuntimeException(ex);\n+            }\n+            setDaemon(true);\n+        }\n+\n+        public int getPortNumber() {\n+            return PORT;\n+        }\n+\n+        @Override\n+        public void run() {\n+            try (Socket socket = serverSocket.accept();\n+                 InputStream in = socket.getInputStream();\n+                 OutputStream out = socket.getOutputStream()) {\n+\n+                Thread.sleep(10000);\n+                byte[] bindResponse = {0x30, 0x0C, 0x02, 0x01, 0x01, 0x61, 0x07, 0x0A, 0x01, 0x00,\n+                        0x04, 0x00, 0x04, 0x00};\n+                \/\/ read the bindRequest\n+                while (in.read() != -1) {\n+                    in.skip(in.available());\n+                    break;\n+                }\n+                out.write(bindResponse);\n+                out.flush();\n+                \/\/ ignore the further requests\n+                while (in.read() != -1) {\n+                    in.skip(in.available());\n+                }\n+            } catch (Exception e) {\n+                e.printStackTrace();\n+            }\n+        }\n+\n+        @Override\n+        public void close() throws Exception {\n+            if (serverSocket != null) {\n+                serverSocket.close();\n+            }\n+        }\n+    }\n+}\n+\n+\n","filename":"test\/jdk\/com\/sun\/jndi\/ldap\/LdapSSLHandshakeFailureTest.java","additions":218,"deletions":0,"binary":false,"changes":218,"status":"added"}]}