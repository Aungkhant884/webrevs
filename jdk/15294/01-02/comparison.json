{"files":[{"patch":"@@ -285,0 +285,1 @@\n+            \/\/ create the socket with factory\n@@ -286,38 +287,1 @@\n-\n-                \/\/ create the factory\n-\n-                @SuppressWarnings(\"unchecked\")\n-                Class<? extends SocketFactory> socketFactoryClass =\n-                        (Class<? extends SocketFactory>) Obj.helper.loadClass(socketFactory);\n-                Method getDefault =\n-                        socketFactoryClass.getMethod(\"getDefault\", new Class<?>[]{});\n-                SocketFactory factory = (SocketFactory) getDefault.invoke(null, new Object[]{});\n-\n-                \/\/ create the socket\n-\n-                if (connectTimeout > 0) {\n-\n-                    InetSocketAddress endpoint =\n-                            createInetSocketAddress(host, port);\n-\n-                    \/\/ unconnected socket\n-                    socket = factory.createSocket();\n-\n-                    if (debug) {\n-                        System.err.println(\"Connection: creating socket with \" +\n-                                \"a timeout using supplied socket factory\");\n-                    }\n-\n-                    \/\/ connected socket\n-                    socket.connect(endpoint, connectTimeout);\n-                }\n-\n-                \/\/ continue (but ignore connectTimeout)\n-                if (socket == null) {\n-                    if (debug) {\n-                        System.err.println(\"Connection: creating socket using \" +\n-                                \"supplied socket factory\");\n-                    }\n-                    \/\/ connected socket\n-                    socket = factory.createSocket(host, port);\n-                }\n+                socket = createSocketWithFactory (host, port, socketFactory, connectTimeout) ;\n@@ -325,0 +289,13 @@\n+                \/\/ create the socket without factory\n+                socket = createSocketWithoutFactory(host, port, connectTimeout);\n+            }\n+            \/\/the handshake with server and reset timeout for the socket\n+            initialSSLHandshake (socket, connectTimeout);\n+        } catch (Exception e) {\n+            \/\/ 8314063 the socket is not closed after the failure of handshake\n+            \/\/ close the socket while the error happened\n+            closeSocket (socket);\n+            throw e;\n+        }\n+        return socket;\n+    }\n@@ -326,3 +303,12 @@\n-                if (connectTimeout > 0) {\n-\n-                    InetSocketAddress endpoint = createInetSocketAddress(host, port);\n+    \/\/ close the socket when the error happens\n+    private void closeSocket (Socket socket) {\n+        if (socket != null && !socket.isClosed()) {\n+            try {\n+                socket.close();\n+            } catch (IOException ioe) {\n+                if (debug) {\n+                    System.err.println(\"Connection: createSocket failed with \" + ioe);\n+                }\n+            }\n+        }\n+    }\n@@ -330,1 +316,22 @@\n-                    socket = new Socket();\n+    \/\/ For LDAP connect timeouts on LDAP over SSL connections must treat\n+    \/\/ the SSL handshake following socket connection as part of the timeout.\n+    \/\/ So explicitly set a socket read timeout, trigger the SSL handshake,\n+    \/\/ then reset the timeout.\n+    private void initialSSLHandshake(Socket socket , int connectTimeout) throws Exception {\n+\n+        if (socket instanceof SSLSocket) {\n+            SSLSocket sslSocket = (SSLSocket) socket;\n+            if (!IS_HOSTNAME_VERIFICATION_DISABLED) {\n+                SSLParameters param = sslSocket.getSSLParameters();\n+                param.setEndpointIdentificationAlgorithm(\"LDAPS\");\n+                sslSocket.setSSLParameters(param);\n+            }\n+            setHandshakeCompletedListener(sslSocket);\n+            if (connectTimeout > 0) {\n+                int socketTimeout = sslSocket.getSoTimeout();\n+                sslSocket.setSoTimeout(connectTimeout); \/\/ reuse full timeout value\n+                sslSocket.startHandshake();\n+                sslSocket.setSoTimeout(socketTimeout);\n+            }\n+        }\n+    }\n@@ -332,6 +339,3 @@\n-                    if (debug) {\n-                        System.err.println(\"Connection: creating socket with \" +\n-                                \"a timeout\");\n-                    }\n-                    socket.connect(endpoint, connectTimeout);\n-                }\n+    \/\/ create the socket without the factory\n+    private Socket createSocketWithoutFactory (String host, int port, int connectTimeout) throws Exception {\n+        Socket socket = null;\n@@ -339,1 +343,9 @@\n-                \/\/ continue (but ignore connectTimeout)\n+        if (connectTimeout > 0) {\n+            InetSocketAddress endpoint = createInetSocketAddress(host, port);\n+            socket = new Socket();\n+            if (debug) {\n+                System.err.println(\"Connection: creating socket with \" +\n+                        \"a timeout\");\n+            }\n+            socket.connect(endpoint, connectTimeout);\n+        }\n@@ -341,7 +353,4 @@\n-                if (socket == null) {\n-                    if (debug) {\n-                        System.err.println(\"Connection: creating socket\");\n-                    }\n-                    \/\/ connected socket\n-                    socket = new Socket(host, port);\n-                }\n+        \/\/ continue (but ignore connectTimeout)\n+        if (socket == null) {\n+            if (debug) {\n+                System.err.println(\"Connection: creating socket\");\n@@ -349,0 +358,5 @@\n+            \/\/ connected socket\n+            socket = new Socket(host, port);\n+        }\n+        return socket;\n+    }\n@@ -350,18 +364,21 @@\n-            \/\/ For LDAP connect timeouts on LDAP over SSL connections must treat\n-            \/\/ the SSL handshake following socket connection as part of the timeout.\n-            \/\/ So explicitly set a socket read timeout, trigger the SSL handshake,\n-            \/\/ then reset the timeout.\n-            if (socket instanceof SSLSocket) {\n-                SSLSocket sslSocket = (SSLSocket) socket;\n-                if (!IS_HOSTNAME_VERIFICATION_DISABLED) {\n-                    SSLParameters param = sslSocket.getSSLParameters();\n-                    param.setEndpointIdentificationAlgorithm(\"LDAPS\");\n-                    sslSocket.setSSLParameters(param);\n-                }\n-                setHandshakeCompletedListener(sslSocket);\n-                if (connectTimeout > 0) {\n-                    int socketTimeout = sslSocket.getSoTimeout();\n-                    sslSocket.setSoTimeout(connectTimeout); \/\/ reuse full timeout value\n-                    sslSocket.startHandshake();\n-                    sslSocket.setSoTimeout(socketTimeout);\n-                }\n+    \/\/ create the socket with the provided factory\n+    private Socket createSocketWithFactory(String host, int port, String socketFactory,\n+                                           int connectTimeout) throws Exception {\n+        Socket socket = null;\n+        @SuppressWarnings(\"unchecked\")\n+        Class<? extends SocketFactory> socketFactoryClass = (Class<? extends SocketFactory>)\n+                Obj.helper.loadClass(socketFactory);\n+        Method getDefault =\n+                socketFactoryClass.getMethod(\"getDefault\", new Class<?>[]{});\n+        SocketFactory factory = (SocketFactory) getDefault.invoke(null, new Object[]{});\n+\n+        \/\/ create the socket\n+        if (connectTimeout > 0) {\n+\n+            InetSocketAddress endpoint =\n+                    createInetSocketAddress(host, port);\n+            \/\/ unconnected socket\n+            socket = factory.createSocket();\n+            if (debug) {\n+                System.err.println(\"Connection: creating socket with \" +\n+                        \"a timeout using supplied socket factory\");\n@@ -369,4 +386,9 @@\n-        } catch (Exception e) {\n-            \/\/ 8314063 the socket is not closed after the failure of handshake\n-            if (socket != null && !socket.isClosed()) {\n-                socket.close();\n+            \/\/ connected socket\n+            socket.connect(endpoint, connectTimeout);\n+        }\n+\n+        \/\/ continue (but ignore connectTimeout)\n+        if (socket == null) {\n+            if (debug) {\n+                System.err.println(\"Connection: creating socket using \" +\n+                        \"supplied socket factory\");\n@@ -374,1 +396,2 @@\n-            throw e;\n+            \/\/ connected socket\n+            socket = factory.createSocket(host, port);\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/Connection.java","additions":102,"deletions":79,"binary":false,"changes":181,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import javax.net.ssl.SSLHandshakeException;\n@@ -39,0 +38,2 @@\n+import jdk.test.lib.net.URIBuilder;\n+\n@@ -56,1 +57,0 @@\n-    private static String url;\n@@ -66,1 +66,0 @@\n-        url = \"ldaps:\/\/localhost:\" + server.getPortNumber();\n@@ -69,1 +68,5 @@\n-        env.put(Context.PROVIDER_URL, url);\n+        env.put(Context.PROVIDER_URL, URIBuilder.newBuilder()\n+                .scheme(\"ldaps\")\n+                .loopback()\n+                .port(server.getPortNumber())\n+                .buildUnchecked().toString());\n@@ -76,0 +79,1 @@\n+        LdapContext ctx = null;\n@@ -77,2 +81,1 @@\n-            LdapContext ctx = new InitialLdapContext(env, null);\n-            ctx.close();\n+            ctx  = new InitialLdapContext(env, null);\n@@ -86,0 +89,3 @@\n+        } finally {\n+            if(ctx != null)\n+                ctx.close();\n@@ -149,1 +155,0 @@\n-        private volatile boolean exceptionThrown;\n@@ -151,1 +156,1 @@\n-        TestServer() throws IOException {\n+        TestServer() {\n@@ -154,1 +159,1 @@\n-                serverSocket = socketFactory.createServerSocket(0);\n+                serverSocket = socketFactory.createServerSocket(0, 0, InetAddress.getLoopbackAddress());\n@@ -166,4 +171,0 @@\n-        public boolean isExceptionThrown() {\n-            return exceptionThrown;\n-        }\n-\n@@ -172,1 +173,4 @@\n-            try (Socket socket = serverSocket.accept()) {\n+            try (Socket socket = serverSocket.accept();\n+                 InputStream in = socket.getInputStream();\n+                 OutputStream out = socket.getOutputStream()) {\n+\n@@ -174,16 +178,6 @@\n-                try (InputStream in = socket.getInputStream()) {\n-                    try (OutputStream out = socket.getOutputStream()) {\n-\n-                        byte[] bindResponse = {0x30, 0x0C, 0x02, 0x01, 0x01, 0x61, 0x07, 0x0A, 0x01, 0x00, 0x04, 0x00, 0x04, 0x00};\n-                        \/\/ read the bindRequest\n-                        while (in.read() != -1) {\n-                            in.skip(in.available());\n-                            break;\n-                        }\n-                        out.write(bindResponse);\n-                        out.flush();\n-                        \/\/ ignore the further requests\n-                        while (in.read() != -1) {\n-                            in.skip(in.available());\n-                        }\n-                    }\n+                byte[] bindResponse = {0x30, 0x0C, 0x02, 0x01, 0x01, 0x61, 0x07, 0x0A, 0x01, 0x00,\n+                        0x04, 0x00, 0x04, 0x00};\n+                \/\/ read the bindRequest\n+                while (in.read() != -1) {\n+                    in.skip(in.available());\n+                    break;\n@@ -191,3 +185,5 @@\n-            } catch (Exception expectedException) {\n-                if (expectedException instanceof SSLHandshakeException) {\n-                    exceptionThrown = Boolean.TRUE;\n+                out.write(bindResponse);\n+                out.flush();\n+                \/\/ ignore the further requests\n+                while (in.read() != -1) {\n+                    in.skip(in.available());\n@@ -195,0 +191,2 @@\n+            } catch (Exception e) {\n+                e.printStackTrace();\n","filename":"test\/jdk\/com\/sun\/jndi\/ldap\/LdapSSLHandshakeFailureTest.java","additions":31,"deletions":33,"binary":false,"changes":64,"status":"modified"}]}