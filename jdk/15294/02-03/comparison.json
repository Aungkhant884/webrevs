{"files":[{"patch":"@@ -285,8 +285,7 @@\n-            \/\/ create the socket with factory\n-            if (socketFactory != null) {\n-                socket = createSocketWithFactory (host, port, socketFactory, connectTimeout) ;\n-            } else {\n-                \/\/ create the socket without factory\n-                socket = createSocketWithoutFactory(host, port, connectTimeout);\n-            }\n-            \/\/the handshake with server and reset timeout for the socket\n+            \/\/ create socket with or without socket factory\n+            socket = newCreateSocket (socketFactory);\n+\n+            \/\/ connect the socket with or without timeout\n+            connectSocket (socket, host, port, connectTimeout);\n+\n+            \/\/the handshake for SSL connection with server and reset timeout for the socket\n@@ -303,9 +302,39 @@\n-    \/\/ close the socket when the error happens\n-    private void closeSocket (Socket socket) {\n-        if (socket != null && !socket.isClosed()) {\n-            try {\n-                socket.close();\n-            } catch (IOException ioe) {\n-                if (debug) {\n-                    System.err.println(\"Connection: createSocket failed with \" + ioe);\n-                }\n+    \/\/ create the socket with or without factory\n+    private Socket newCreateSocket(String socketFactory) throws Exception {\n+\n+        Socket socket;\n+        if (socketFactory != null) {\n+            @SuppressWarnings(\"unchecked\")\n+            Class<? extends SocketFactory> socketFactoryClass = (Class<? extends SocketFactory>)\n+                    Obj.helper.loadClass(socketFactory);\n+            Method getDefault =\n+                    socketFactoryClass.getMethod(\"getDefault\", new Class<?>[]{});\n+            SocketFactory factory = (SocketFactory) getDefault.invoke(null, new Object[]{});\n+            socket = factory.createSocket();\n+            if (debug) {\n+                System.err.println(\"Socket Created by the Factory\");\n+            }\n+        } else {\n+            socket = new Socket();\n+            if (debug) {\n+                System.err.println(\"New Socket Created\");\n+            }\n+        }\n+        return socket;\n+    }\n+\n+    \/\/ connect the socket with setting of timeout\n+    private void connectSocket( Socket socket, String host, int port, int connectTimeout)\n+            throws IOException {\n+        InetSocketAddress endpoint =\n+                createInetSocketAddress(host, port);\n+\n+        if (connectTimeout <= 0) {\n+            connectTimeout = 0;\n+        }\n+        socket.connect(endpoint, connectTimeout);\n+        if (debug) {\n+            if( connectTimeout > 0 ) {\n+                System.err.println(\"Socket connected with timeout \" + connectTimeout);\n+            } else {\n+                System.err.println(\"Socket connected without timeout \");\n@@ -339,56 +368,9 @@\n-    \/\/ create the socket without the factory\n-    private Socket createSocketWithoutFactory (String host, int port, int connectTimeout) throws Exception {\n-        Socket socket = null;\n-\n-        if (connectTimeout > 0) {\n-            InetSocketAddress endpoint = createInetSocketAddress(host, port);\n-            socket = new Socket();\n-            if (debug) {\n-                System.err.println(\"Connection: creating socket with \" +\n-                        \"a timeout\");\n-            }\n-            socket.connect(endpoint, connectTimeout);\n-        }\n-\n-        \/\/ continue (but ignore connectTimeout)\n-        if (socket == null) {\n-            if (debug) {\n-                System.err.println(\"Connection: creating socket\");\n-            }\n-            \/\/ connected socket\n-            socket = new Socket(host, port);\n-        }\n-        return socket;\n-    }\n-\n-    \/\/ create the socket with the provided factory\n-    private Socket createSocketWithFactory(String host, int port, String socketFactory,\n-                                           int connectTimeout) throws Exception {\n-        Socket socket = null;\n-        @SuppressWarnings(\"unchecked\")\n-        Class<? extends SocketFactory> socketFactoryClass = (Class<? extends SocketFactory>)\n-                Obj.helper.loadClass(socketFactory);\n-        Method getDefault =\n-                socketFactoryClass.getMethod(\"getDefault\", new Class<?>[]{});\n-        SocketFactory factory = (SocketFactory) getDefault.invoke(null, new Object[]{});\n-\n-        \/\/ create the socket\n-        if (connectTimeout > 0) {\n-\n-            InetSocketAddress endpoint =\n-                    createInetSocketAddress(host, port);\n-            \/\/ unconnected socket\n-            socket = factory.createSocket();\n-            if (debug) {\n-                System.err.println(\"Connection: creating socket with \" +\n-                        \"a timeout using supplied socket factory\");\n-            }\n-            \/\/ connected socket\n-            socket.connect(endpoint, connectTimeout);\n-        }\n-\n-        \/\/ continue (but ignore connectTimeout)\n-        if (socket == null) {\n-            if (debug) {\n-                System.err.println(\"Connection: creating socket using \" +\n-                        \"supplied socket factory\");\n+    \/\/ close the socket when the error happens\n+    private void closeSocket (Socket socket) {\n+        if (socket != null && !socket.isClosed()) {\n+            try {\n+                socket.close();\n+            } catch (IOException ioe) {\n+                if (debug) {\n+                    System.err.println(\"Connection: createSocket failed with \" + ioe);\n+                }\n@@ -396,2 +378,0 @@\n-            \/\/ connected socket\n-            socket = factory.createSocket(host, port);\n@@ -399,1 +379,0 @@\n-        return socket;\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/Connection.java","additions":55,"deletions":76,"binary":false,"changes":131,"status":"modified"},{"patch":"@@ -24,4 +24,1 @@\n-import java.io.File;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.OutputStream;\n+import java.io.*;\n@@ -36,0 +33,1 @@\n+import java.security.KeyStore;\n@@ -143,1 +141,9 @@\n-    private static void setKeyStore() {\n+    private static void setKeyStore() throws Exception {\n+        String filePath = getKeystoreFilePath();\n+        System.setProperty(\"javax.net.ssl.keyStore\", filePath);\n+        System.setProperty(\"javax.net.ssl.keyStorePassword\", \"123456\");\n+        System.setProperty(\"javax.net.ssl.trustStore\", filePath);\n+        System.setProperty(\"javax.net.ssl.trustStorePassword\", \"123456\");\n+    }\n+\n+    private static String getKeystoreFilePath() throws Exception {\n@@ -145,4 +151,11 @@\n-        System.setProperty(\"javax.net.ssl.keyStore\", dir + \"ksWithSAN\");\n-        System.setProperty(\"javax.net.ssl.keyStorePassword\", \"welcome1\");\n-        System.setProperty(\"javax.net.ssl.trustStore\", dir + \"ksWithSAN\");\n-        System.setProperty(\"javax.net.ssl.trustStorePassword\", \"welcome1\");\n+        File file = new File(dir+\"myKeyStore\");\n+        KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());\n+        if (file.exists()) {\n+            \/\/ if exists, load\n+            keyStore.load(new FileInputStream(file), \"123456\".toCharArray());\n+        } else {\n+            \/\/ if not exists, create\n+            keyStore.load(null, null);\n+            keyStore.store(new FileOutputStream(file), \"123456\".toCharArray());\n+        }\n+        return file.getPath();\n","filename":"test\/jdk\/com\/sun\/jndi\/ldap\/LdapSSLHandshakeFailureTest.java","additions":22,"deletions":9,"binary":false,"changes":31,"status":"modified"},{"filename":"test\/jdk\/com\/sun\/jndi\/ldap\/ksWithSAN","binary":true,"status":"deleted"}]}