{"files":[{"patch":"@@ -28,12 +28,0 @@\n-import javax.naming.CommunicationException;\n-import javax.naming.InterruptedNamingException;\n-import javax.naming.NamingException;\n-import javax.naming.ServiceUnavailableException;\n-import javax.naming.ldap.Control;\n-import javax.net.SocketFactory;\n-import javax.net.ssl.HandshakeCompletedEvent;\n-import javax.net.ssl.HandshakeCompletedListener;\n-import javax.net.ssl.SSLParameters;\n-import javax.net.ssl.SSLPeerUnverifiedException;\n-import javax.net.ssl.SSLSocket;\n-import javax.security.sasl.SaslException;\n@@ -42,2 +30,0 @@\n-import java.io.IOException;\n-import java.io.InputStream;\n@@ -45,0 +31,1 @@\n+import java.io.IOException;\n@@ -46,2 +33,1 @@\n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;\n+import java.io.InputStream;\n@@ -50,0 +36,11 @@\n+import javax.net.ssl.SSLSocket;\n+\n+import javax.naming.CommunicationException;\n+import javax.naming.ServiceUnavailableException;\n+import javax.naming.NamingException;\n+import javax.naming.InterruptedNamingException;\n+\n+import javax.naming.ldap.Control;\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.InvocationTargetException;\n@@ -57,0 +54,6 @@\n+import javax.net.SocketFactory;\n+import javax.net.ssl.SSLParameters;\n+import javax.net.ssl.HandshakeCompletedEvent;\n+import javax.net.ssl.HandshakeCompletedListener;\n+import javax.net.ssl.SSLPeerUnverifiedException;\n+import javax.security.sasl.SaslException;\n@@ -81,8 +84,8 @@\n- * inStream - synced access and update; initialized in constructor;\n- * referenced outside class unsync'ed (by LdapSasl) only\n- * when connection is quiet\n- * traceFile, traceTagIn, traceTagOut - no sync; debugging only\n- * parent - no sync; initialized in constructor; no updates\n- * pendingRequests - sync\n- * pauseLock - per-instance lock;\n- * paused - sync via pauseLock (pauseReader())\n+ *     inStream - synced access and update; initialized in constructor;\n+ *           referenced outside class unsync'ed (by LdapSasl) only\n+ *           when connection is quiet\n+ *     traceFile, traceTagIn, traceTagOut - no sync; debugging only\n+ *     parent - no sync; initialized in constructor; no updates\n+ *     pendingRequests - sync\n+ *     pauseLock - per-instance lock;\n+ *     paused - sync via pauseLock (pauseReader())\n@@ -90,10 +93,10 @@\n- * host, port - unsync; read-only access for StartTLS and debug messages\n- * setBound(), setV3() - no sync; called only by LdapClient.authenticate(),\n- * which is a sync method called only when connection is \"quiet\"\n- * getMsgId() - sync\n- * writeRequest(), removeRequest(),findRequest(), abandonOutstandingReqs() -\n- * access to shared pendingRequests is sync\n- * writeRequest(),  abandonRequest(), ldapUnbind() - access to outStream sync\n- * cleanup() - sync\n- * readReply() - access to sock sync\n- * unpauseReader() - (indirectly via writeRequest) sync on pauseLock\n+ *     host, port - unsync; read-only access for StartTLS and debug messages\n+ *     setBound(), setV3() - no sync; called only by LdapClient.authenticate(),\n+ *             which is a sync method called only when connection is \"quiet\"\n+ *     getMsgId() - sync\n+ *     writeRequest(), removeRequest(),findRequest(), abandonOutstandingReqs() -\n+ *             access to shared pendingRequests is sync\n+ *     writeRequest(),  abandonRequest(), ldapUnbind() - access to outStream sync\n+ *     cleanup() - sync\n+ *     readReply() - access to sock sync\n+ *     unpauseReader() - (indirectly via writeRequest) sync on pauseLock\n@@ -101,3 +104,3 @@\n- * inStream, outStream - no sync; used to construct new stream; accessed\n- * only when conn is \"quiet\" and not shared\n- * replaceStreams() - sync method\n+ *     inStream, outStream - no sync; used to construct new stream; accessed\n+ *             only when conn is \"quiet\" and not shared\n+ *     replaceStreams() - sync method\n@@ -105,3 +108,3 @@\n- * inStream, outStream - no sync; used to record the existing streams;\n- * accessed only when conn is \"quiet\" and not shared\n- * replaceStreams() - sync method\n+ *     inStream, outStream - no sync; used to record the existing streams;\n+ *             accessed only when conn is \"quiet\" and not shared\n+ *     replaceStreams() - sync method\n@@ -189,1 +192,0 @@\n-\n@@ -283,1 +285,0 @@\n-        \/\/create the socket with default socket factory or custom factory\n@@ -287,7 +288,10 @@\n-        try {\n-            initialSSLHandshake(socket, connectTimeout);\n-        } catch (Exception e) {\n-            \/\/ 8314063 the socket is not closed after the failure of handshake\n-            \/\/ close the socket while the error happened\n-            closeOpenedSocket(socket);\n-            throw e;\n+        if (socket instanceof SSLSocket) {\n+            SSLSocket sslSocket = (SSLSocket) socket;\n+            try {\n+                initialSSLHandshake(sslSocket, connectTimeout);\n+            } catch (Exception e) {\n+                \/\/ 8314063 the socket is not closed after the failure of handshake\n+                \/\/ close the socket while the error happened\n+                closeOpenedSocket(socket);\n+                throw e;\n+            }\n@@ -298,1 +302,0 @@\n-    \/\/ get the socket factory, either default or custom\n@@ -352,1 +355,1 @@\n-    private void initialSSLHandshake(Socket socket, int connectTimeout) throws Exception {\n+    private void initialSSLHandshake(SSLSocket sslSocket , int connectTimeout) throws Exception {\n@@ -354,2 +357,0 @@\n-        if (socket instanceof SSLSocket) {\n-            SSLSocket sslSocket = (SSLSocket) socket;\n@@ -368,1 +369,0 @@\n-        }\n@@ -618,2 +618,2 @@\n-     * @param reqCtls      Possibly null request controls that accompanies the\n-     *                     abandon and unbind LDAP request.\n+     * @param reqCtls Possibly null request controls that accompanies the\n+     *    abandon and unbind LDAP request.\n@@ -621,5 +621,5 @@\n-     *                     it that the connection has been closed; false means not to notify\n-     *                     parent. If LdapClient invokes cleanup(), notifyParent should be set to\n-     *                     false because LdapClient already knows that it is closing\n-     *                     the connection. If Connection invokes cleanup(), notifyParent should be\n-     *                     set to true because LdapClient needs to know about the closure.\n+     *    it that the connection has been closed; false means not to notify\n+     *    parent. If LdapClient invokes cleanup(), notifyParent should be set to\n+     *    false because LdapClient already knows that it is closing\n+     *    the connection. If Connection invokes cleanup(), notifyParent should be\n+     *    set to true because LdapClient needs to know about the closure.\n@@ -929,2 +929,2 @@\n-                            br = in.read(inbuf, offset + bytesread,\n-                                    seqlenlen - bytesread);\n+                            br = in.read(inbuf, offset+bytesread,\n+                                    seqlenlen-bytesread);\n@@ -944,2 +944,2 @@\n-                        for (int i = 0; i < seqlenlen; i++) {\n-                            seqlen = (seqlen << 8) + (inbuf[offset + i] & 0xff);\n+                        for( int i = 0; i < seqlenlen; i++) {\n+                            seqlen = (seqlen << 8) + (inbuf[offset+i] & 0xff);\n@@ -1045,1 +1045,2 @@\n-            throws IOException {\n+            throws IOException\n+    {\n@@ -1105,1 +1106,0 @@\n-\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/Connection.java","additions":67,"deletions":67,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -54,6 +54,6 @@\n- * @run main\/othervm LdapSSLHandshakeFailureTest LdapSSLHandshakeFailureTest$CustomSocketFactory true\n- * @run main\/othervm LdapSSLHandshakeFailureTest -1000 true\n- * @run main\/othervm LdapSSLHandshakeFailureTest -1000 false\n- * @run main\/othervm LdapSSLHandshakeFailureTest 2000 false\n- * @run main\/othervm LdapSSLHandshakeFailureTest 0 true\n- * @run main\/othervm LdapSSLHandshakeFailureTest 0 false\n+ * @run main\/othervm LdapSSLHandshakeFailureTest LdapSSLHandshakeFailureTest$CustomSocketFactory true 6000\n+ * @run main\/othervm LdapSSLHandshakeFailureTest -1000 true 6000\n+ * @run main\/othervm LdapSSLHandshakeFailureTest -1000 false 6000\n+ * @run main\/othervm LdapSSLHandshakeFailureTest 2000 false 6000\n+ * @run main\/othervm LdapSSLHandshakeFailureTest 0 true 6000\n+ * @run main\/othervm LdapSSLHandshakeFailureTest 0 false 6000\n@@ -67,0 +67,2 @@\n+    private static int serverSleepingTime = 5000;\n+\n@@ -76,0 +78,4 @@\n+        if (args.length == 3) {\n+            serverSleepingTime = Integer.valueOf(args[2]);\n+        }\n+\n@@ -79,1 +85,1 @@\n-        try (TestServer server = new TestServer(serverSlowDown)) {\n+        try (TestServer server = new TestServer(serverSlowDown, serverSleepingTime)) {\n@@ -187,0 +193,1 @@\n+        private int sleepingTime;\n@@ -190,1 +197,1 @@\n-        TestServer(boolean isForceToSleep) {\n+        private TestServer(boolean isForceToSleep, int sleepingTime) {\n@@ -192,0 +199,1 @@\n+            this.sleepingTime = sleepingTime;\n@@ -212,1 +220,1 @@\n-                    Thread.sleep(5000);\n+                    Thread.sleep(sleepingTime);\n","filename":"test\/jdk\/com\/sun\/jndi\/ldap\/LdapSSLHandshakeFailureTest.java","additions":17,"deletions":9,"binary":false,"changes":26,"status":"modified"}]}