{"files":[{"patch":"@@ -33,0 +33,1 @@\n+import java.util.Map;\n@@ -166,1 +167,1 @@\n-     * then {@link OutputStream#write()} will throw an {@code IOException}.\n+     * then the write method of {@link OutputStream} will throw an {@code IOException}.\n@@ -210,1 +211,1 @@\n-     *\n+     * @throws IOException   if the response headers have already been sent or an I\/O error occurs\n@@ -246,1 +247,1 @@\n-     * {@Link Filter} modules may store arbitrary objects with {@code HttpExchange}\n+     * {@link Filter} modules may store arbitrary objects with {@code HttpExchange}\n","filename":"src\/jdk.httpserver\/share\/classes\/com\/sun\/net\/httpserver\/HttpExchange.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,122 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8253005\n+ * @library \/test\/lib\n+ * @summary Check that sendResponseHeaders throws an IOException when headers\n+ *  have already been sent\n+ * @run testng\/othervm SendResponseHeadersTest\n+ *\/\n+\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n+import jdk.test.lib.net.URIBuilder;\n+import org.testng.annotations.AfterTest;\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.net.http.HttpResponse.BodyHandlers;\n+import java.nio.charset.StandardCharsets;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+import static java.net.http.HttpClient.Builder.NO_PROXY;\n+import static org.testng.Assert.expectThrows;\n+import static org.testng.Assert.fail;\n+\n+public class SendResponseHeadersTest {\n+    URI uri;\n+    HttpServer server;\n+    ExecutorService executor;\n+\n+    @BeforeTest\n+    public void setUp() throws IOException, URISyntaxException {\n+        var loopback = InetAddress.getLoopbackAddress();\n+        var addr = new InetSocketAddress(loopback, 0);\n+        server = HttpServer.create(addr, 0);\n+        server.createContext(\"\/test\", new TestHandler());\n+        executor = Executors.newCachedThreadPool();\n+        server.setExecutor(executor);\n+        server.start();\n+\n+        uri = URIBuilder.newBuilder()\n+                .scheme(\"http\")\n+                .host(loopback)\n+                .port(server.getAddress().getPort())\n+                .path(\"\/test\/foo.html\")\n+                .build();\n+    }\n+\n+    @Test\n+    public void testSend() throws Exception {\n+        HttpClient client = HttpClient.newBuilder()\n+                .proxy(NO_PROXY)\n+                .build();\n+        HttpRequest request = HttpRequest.newBuilder(uri)\n+                .GET()\n+                .build();\n+        HttpResponse<String> response = client.send(request, BodyHandlers.ofString());\n+        \/\/ verify empty response received, otherwise an error has occurred\n+        if (!response.body().isEmpty())\n+            fail(response.body());\n+    }\n+\n+    @AfterTest\n+    public void tearDown() {\n+        server.stop(0);\n+        executor.shutdown();\n+    }\n+\n+    static class TestHandler implements HttpHandler {\n+        public void handle(HttpExchange exchange) throws IOException {\n+            try (InputStream is = exchange.getRequestBody();\n+                 OutputStream os = exchange.getResponseBody()) {\n+\n+                is.readAllBytes();\n+                exchange.sendResponseHeaders(200, 0);\n+                try {\n+                    IOException io = expectThrows(IOException.class,\n+                            () -> exchange.sendResponseHeaders(200, 0));\n+                    System.out.println(\"Got expected exception: \" + io);\n+                } catch (Throwable t) {\n+                    \/\/ expectThrows triggered an assertion, return error message to the client\n+                    t.printStackTrace();\n+                    os.write((\"Unexpected error: \" + t).getBytes(StandardCharsets.UTF_8));\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/httpclient\/SendResponseHeadersTest.java","additions":122,"deletions":0,"binary":false,"changes":122,"status":"added"}]}