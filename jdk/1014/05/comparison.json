{"files":[{"patch":"@@ -33,0 +33,1 @@\n+import java.util.Map;\n@@ -166,1 +167,1 @@\n-     * then {@link OutputStream#write()} will throw an {@code IOException}.\n+     * then the write method of {@link OutputStream} will throw an {@code IOException}.\n@@ -210,1 +211,1 @@\n-     *\n+     * @throws IOException   if the response headers have already been sent or an I\/O error occurs\n@@ -246,1 +247,1 @@\n-     * {@Link Filter} modules may store arbitrary objects with {@code HttpExchange}\n+     * {@link Filter} modules may store arbitrary objects with {@code HttpExchange}\n","filename":"src\/jdk.httpserver\/share\/classes\/com\/sun\/net\/httpserver\/HttpExchange.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,102 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8253005\n+ * @summary Check that sendResponseHeaders throws an IOException when headers\n+ *  have already been sent\n+ * @run testng\/othervm SendResponseHeadersTest\n+ *\/\n+\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.URI;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+\n+import static org.testng.Assert.expectThrows;\n+import static org.testng.Assert.fail;\n+\n+\n+public class SendResponseHeadersTest {\n+\n+    @Test\n+    public void testSend() throws Exception {\n+        var addr = new InetSocketAddress(InetAddress.getLoopbackAddress(), 0);\n+        var server = HttpServer.create(addr, 0);\n+        var path = \"\/test\/foo.html\";\n+        server.createContext(\"\/test\", new TestHandler());\n+        ExecutorService executor = Executors.newCachedThreadPool();\n+        server.setExecutor (executor);\n+        server.start();\n+\n+        URI uri = new URI(\"http\", null,\n+                server.getAddress().getHostString(),\n+                server.getAddress().getPort(),\n+                path, null, null);\n+\n+        try {\n+            HttpClient client = HttpClient.newHttpClient();\n+            HttpRequest request = HttpRequest.newBuilder(uri)\n+                    .GET()\n+                    .build();\n+            HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());\n+            \/\/ verify empty response received, otherwise an error has occurred\n+            if (!response.body().isEmpty())\n+                fail(response.body());\n+        } finally {\n+            server.stop(2);\n+            executor.shutdown();\n+        }\n+    }\n+\n+    static class TestHandler implements HttpHandler {\n+        public void handle(HttpExchange exchange) throws IOException {\n+            exchange.sendResponseHeaders(200, 0);\n+\n+            OutputStream os = exchange.getResponseBody();\n+            try {\n+                IOException io = expectThrows(IOException.class,\n+                        () -> exchange.sendResponseHeaders(200, \"failMsg\".getBytes().length));\n+                System.out.println(\"Got expected exception: \" + io);\n+            } catch (Throwable t) {\n+                \/\/ unexpected exception thrown, return error to client\n+                t.printStackTrace();\n+                os.write((\"Unexpected error: \" + t).getBytes());\n+            } finally {\n+                os.close();\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/httpclient\/SendResponseHeadersTest.java","additions":102,"deletions":0,"binary":false,"changes":102,"status":"added"}]}