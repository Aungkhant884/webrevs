{"files":[{"patch":"@@ -35,0 +35,2 @@\n+import org.testng.annotations.AfterTest;\n+import org.testng.annotations.BeforeTest;\n@@ -43,0 +45,1 @@\n+import java.net.URISyntaxException;\n@@ -46,0 +49,2 @@\n+import java.net.http.HttpResponse.BodyHandlers;\n+import java.nio.charset.StandardCharsets;\n@@ -52,1 +57,0 @@\n-\n@@ -54,0 +58,3 @@\n+    URI uri;\n+    HttpServer server;\n+    ExecutorService executor;\n@@ -55,4 +62,4 @@\n-    @Test\n-    public void testSend() throws Exception {\n-        var addr = new InetSocketAddress(InetAddress.getLoopbackAddress(), 0);\n-        var server = HttpServer.create(addr, 0);\n+    @BeforeTest\n+    public void setUp() throws IOException, URISyntaxException {\n+        var loopback = InetAddress.getLoopbackAddress();\n+        var addr = new InetSocketAddress(loopback, 0);\n@@ -60,0 +67,1 @@\n+        server = HttpServer.create(addr, 0);\n@@ -61,2 +69,2 @@\n-        ExecutorService executor = Executors.newCachedThreadPool();\n-        server.setExecutor (executor);\n+        executor = Executors.newCachedThreadPool();\n+        server.setExecutor(executor);\n@@ -65,2 +73,2 @@\n-        URI uri = new URI(\"http\", null,\n-                server.getAddress().getHostString(),\n+        uri = new URI(\"http\", null,\n+                loopback.getHostName(),\n@@ -69,0 +77,1 @@\n+    }\n@@ -70,13 +79,16 @@\n-        try {\n-            HttpClient client = HttpClient.newHttpClient();\n-            HttpRequest request = HttpRequest.newBuilder(uri)\n-                    .GET()\n-                    .build();\n-            HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());\n-            \/\/ verify empty response received, otherwise an error has occurred\n-            if (!response.body().isEmpty())\n-                fail(response.body());\n-        } finally {\n-            server.stop(2);\n-            executor.shutdown();\n-        }\n+    @Test\n+    public void testSend() throws Exception {\n+        HttpClient client = HttpClient.newHttpClient();\n+        HttpRequest request = HttpRequest.newBuilder(uri)\n+                .GET()\n+                .build();\n+        HttpResponse<String> response = client.send(request, BodyHandlers.ofString());\n+        \/\/ verify empty response received, otherwise an error has occurred\n+        if (!response.body().isEmpty())\n+            fail(response.body());\n+    }\n+\n+    @AfterTest\n+    public void tearDown() {\n+        server.stop(2);\n+        executor.shutdown();\n@@ -94,1 +106,1 @@\n-                            () -> exchange.sendResponseHeaders(200, \"failMsg\".getBytes().length));\n+                            () -> exchange.sendResponseHeaders(200, 0));\n@@ -97,1 +109,1 @@\n-                    \/\/ unexpected exception thrown, return error to client\n+                    \/\/ expectThrows triggered an assertion, return error message to the client\n@@ -99,1 +111,1 @@\n-                    os.write((\"Unexpected error: \" + t).getBytes());\n+                    os.write((\"Unexpected error: \" + t).getBytes(StandardCharsets.UTF_8));\n","filename":"test\/jdk\/java\/net\/httpclient\/SendResponseHeadersTest.java","additions":37,"deletions":25,"binary":false,"changes":62,"status":"modified"}]}