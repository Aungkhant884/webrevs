{"files":[{"patch":"@@ -205,2 +205,2 @@\n-  } else if (VectorNode::is_integer_negate(sopc)) {\n-    if (!VectorNode::is_vector_negate_supported(sopc, num_elem, type, false)) {\n+  } else if (VectorNode::is_vector_integral_negate(sopc)) {\n+    if (!VectorNode::is_vector_integral_negate_supported(sopc, num_elem, type, false)) {\n@@ -209,1 +209,1 @@\n-        tty->print_cr(\"  ** Rejected vector op (%s,%s,%d) because architecture does not support variable vector negate\",\n+        tty->print_cr(\"  ** Rejected vector op (%s,%s,%d) because architecture does not support integral vector negate\",\n@@ -290,2 +290,7 @@\n-    if (!Matcher::has_predicated_vectors()) {\n-      return false;\n+    bool is_supported = false;\n+    if (Matcher::has_predicated_vectors()) {\n+      if (VectorNode::is_vector_integral_negate(sopc)) {\n+        is_supported = VectorNode::is_vector_integral_negate_supported(sopc, num_elem, type, true);\n+      } else {\n+        is_supported = Matcher::match_rule_supported_vector_masked(sopc, num_elem, type);\n+      }\n@@ -294,2 +299,1 @@\n-    if ((VectorNode::is_integer_negate(sopc) && !VectorNode::is_vector_negate_supported(sopc, num_elem, type, true)) ||\n-        (!VectorNode::is_integer_negate(sopc) && !Matcher::match_rule_supported_vector_masked(sopc, num_elem, type))) {\n+    if (!is_supported) {\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -285,2 +285,2 @@\n-    if (VectorNode::is_integer_negate(vopc)) {\n-      return is_vector_negate_supported(vopc, vlen, bt, false);\n+    if (VectorNode::is_vector_integral_negate(vopc)) {\n+      return is_vector_integral_negate_supported(vopc, vlen, bt, false);\n@@ -365,1 +365,1 @@\n-bool VectorNode::is_vector_negate_supported(int opc, uint vlen, BasicType bt, bool use_predicate) {\n+bool VectorNode::is_vector_integral_negate_supported(int opc, uint vlen, BasicType bt, bool use_predicate) {\n@@ -713,1 +713,1 @@\n-bool VectorNode::is_integer_negate(int opc) {\n+bool VectorNode::is_vector_integral_negate(int opc) {\n@@ -1592,1 +1592,1 @@\n-Node* VectorNode::degenerate_vector_negate(Node* n, int vlen, BasicType bt, PhaseGVN* phase, bool is_predicated) {\n+Node* VectorNode::degenerate_vector_integral_negate(Node* n, int vlen, BasicType bt, PhaseGVN* phase, bool is_predicated) {\n@@ -1635,1 +1635,1 @@\n-Node* NegVINode::Ideal(PhaseGVN* phase, bool can_reshape) {\n+Node* NegVNode::Ideal(PhaseGVN* phase, bool can_reshape) {\n@@ -1638,16 +1638,8 @@\n-  if (is_predicated_vector()) {\n-    if (!Matcher::match_rule_supported_vector_masked(Op_NegVI, vlen, bt)) {\n-      return degenerate_vector_negate(this, vlen, bt, phase, true);\n-    }\n-  } else if (!Matcher::match_rule_supported_vector(Op_NegVI, vlen, bt)) {\n-    return degenerate_vector_negate(this, vlen, bt, phase, false);\n-  }\n-  return NULL;\n-}\n-\n-Node* NegVLNode::Ideal(PhaseGVN* phase, bool can_reshape) {\n-  BasicType bt = vect_type()->element_basic_type();\n-  uint vlen = length();\n-  if (is_predicated_vector()) {\n-    if (!Matcher::match_rule_supported_vector_masked(Op_NegVL, vlen, bt)) {\n-      return degenerate_vector_negate(this, vlen, bt, phase, true);\n+  int opc = Opcode();\n+  if (is_vector_integral_negate(opc)) {\n+    if (is_predicated_vector()) {\n+      if (!Matcher::match_rule_supported_vector_masked(opc, vlen, bt)) {\n+        return degenerate_vector_integral_negate(this, vlen, bt, phase, true);\n+      }\n+    } else if (!Matcher::match_rule_supported_vector(opc, vlen, bt)) {\n+      return degenerate_vector_integral_negate(this, vlen, bt, phase, false);\n@@ -1655,2 +1647,0 @@\n-  } else if (!Matcher::match_rule_supported_vector(Op_NegVL, vlen, bt)) {\n-    return degenerate_vector_negate(this, vlen, bt, phase, false);\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":14,"deletions":24,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-  static bool is_vector_negate_supported(int opc, uint vlen, BasicType bt, bool use_predicate);\n+  static bool is_vector_integral_negate_supported(int opc, uint vlen, BasicType bt, bool use_predicate);\n@@ -106,1 +106,1 @@\n-  static Node* degenerate_vector_negate(Node* n, int vlen, BasicType bt, PhaseGVN* phase, bool is_predicated);\n+  static Node* degenerate_vector_integral_negate(Node* n, int vlen, BasicType bt, PhaseGVN* phase, bool is_predicated);\n@@ -114,1 +114,1 @@\n-  static bool is_integer_negate(int opc);\n+  static bool is_vector_integral_negate(int opc);\n@@ -480,0 +480,9 @@\n+\/\/------------------------------NegVNode---------------------------------------\n+\/\/ Vector Neg parent class (not for code generation).\n+class NegVNode : public VectorNode {\n+ public:\n+  NegVNode(Node* in, const TypeVect* vt) : VectorNode(in, vt) {}\n+  virtual int Opcode() const = 0;\n+  virtual Node* Ideal(PhaseGVN* phase, bool can_reshape);\n+};\n+\n@@ -482,1 +491,1 @@\n-class NegVINode : public VectorNode {\n+class NegVINode : public NegVNode {\n@@ -484,1 +493,1 @@\n-  NegVINode(Node* in, const TypeVect* vt) : VectorNode(in, vt) {}\n+  NegVINode(Node* in, const TypeVect* vt) : NegVNode(in, vt) {}\n@@ -486,1 +495,0 @@\n-  Node* Ideal(PhaseGVN* phase, bool can_reshape);\n@@ -489,0 +497,1 @@\n+\/\/------------------------------NegVLNode--------------------------------------\n@@ -490,1 +499,1 @@\n-class NegVLNode : public VectorNode {\n+class NegVLNode : public NegVNode {\n@@ -492,1 +501,1 @@\n-  NegVLNode(Node* in, const TypeVect* vt) : VectorNode(in, vt) {}\n+  NegVLNode(Node* in, const TypeVect* vt) : NegVNode(in, vt) {}\n@@ -494,1 +503,0 @@\n-  Node* Ideal(PhaseGVN* phasse, bool can_reshape);\n@@ -499,1 +507,1 @@\n-class NegVFNode : public VectorNode {\n+class NegVFNode : public NegVNode {\n@@ -501,1 +509,1 @@\n-  NegVFNode(Node* in, const TypeVect* vt) : VectorNode(in,vt) {}\n+  NegVFNode(Node* in, const TypeVect* vt) : NegVNode(in, vt) {}\n@@ -507,1 +515,1 @@\n-class NegVDNode : public VectorNode {\n+class NegVDNode : public NegVNode {\n@@ -509,1 +517,1 @@\n-  NegVDNode(Node* in, const TypeVect* vt) : VectorNode(in,vt) {}\n+  NegVDNode(Node* in, const TypeVect* vt) : NegVNode(in, vt) {}\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":21,"deletions":13,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -1760,4 +1760,5 @@\n-  declare_c2_type(NegVINode, VectorNode)                                  \\\n-  declare_c2_type(NegVLNode, VectorNode)                                  \\\n-  declare_c2_type(NegVFNode, VectorNode)                                  \\\n-  declare_c2_type(NegVDNode, VectorNode)                                  \\\n+  declare_c2_type(NegVNode, VectorNode)                                   \\\n+  declare_c2_type(NegVINode, NegVNode)                                    \\\n+  declare_c2_type(NegVLNode, NegVNode)                                    \\\n+  declare_c2_type(NegVFNode, NegVNode)                                    \\\n+  declare_c2_type(NegVDNode, NegVNode)                                    \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"}]}