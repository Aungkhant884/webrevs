{"files":[{"patch":"@@ -39,1 +39,1 @@\n- * 8216332 8214245 8237599 8241055 8247546 8258259\n+ * 8216332 8214245 8237599 8241055 8247546 8258259 8037397\n@@ -74,0 +74,1 @@\n+import java.util.stream.IntStream;\n@@ -199,0 +200,2 @@\n+        droppedClassesWithIntersection();\n+\n@@ -5259,0 +5262,31 @@\n+\n+    \/\/This test is for 8037397\n+    private static void droppedClassesWithIntersection() {\n+        String rx = \"[A-Z&&[A-Z]0-9]\";\n+        String ry = \"[A-Z&&[A-F][G-Z]0-9]\";\n+\n+        Stream<Character> letterChars = IntStream.range('A', 'Z').mapToObj((i) -> (char) i);\n+        Stream<Character> digitChars = IntStream.range('0', '9').mapToObj((i) -> (char) i);\n+\n+        boolean letterCharsMatch = letterChars.allMatch((ch) -> {\n+            String chString = ch.toString();\n+            return chString.matches(rx) && chString.matches(ry);\n+        });\n+\n+        boolean digitCharsDontMatch = digitChars.noneMatch((ch) -> {\n+            String chString = ch.toString();\n+            return chString.matches(rx) && chString.matches(ry);\n+        });\n+\n+\n+        if (!letterCharsMatch) {\n+            failCount++;\n+            System.out.println(\"Compiling intersection pattern is dropping a character class in its matcher\");\n+        }\n+\n+        if (!digitCharsDontMatch) {\n+            failCount++;\n+            System.out.println(\"Compiling intersection pattern is matching digits where it should not\");\n+        }\n+\n+    }\n","filename":"test\/jdk\/java\/util\/regex\/RegExTest.java","additions":35,"deletions":1,"binary":false,"changes":36,"status":"modified"}]}