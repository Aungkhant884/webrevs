{"files":[{"patch":"@@ -16600,2424 +16600,0 @@\n-\/\/ ====================VECTOR INSTRUCTIONS=====================================\n-\n-\/\/ Load vector (32 bits)\n-instruct loadV4(vecD dst, vmem4 mem)\n-%{\n-  predicate(n->as_LoadVector()->memory_size() == 4);\n-  match(Set dst (LoadVector mem));\n-  ins_cost(4 * INSN_COST);\n-  format %{ \"ldrs   $dst,$mem\\t# vector (32 bits)\" %}\n-  ins_encode( aarch64_enc_ldrvS(dst, mem) );\n-  ins_pipe(vload_reg_mem64);\n-%}\n-\n-\/\/ Load vector (64 bits)\n-instruct loadV8(vecD dst, vmem8 mem)\n-%{\n-  predicate(n->as_LoadVector()->memory_size() == 8);\n-  match(Set dst (LoadVector mem));\n-  ins_cost(4 * INSN_COST);\n-  format %{ \"ldrd   $dst,$mem\\t# vector (64 bits)\" %}\n-  ins_encode( aarch64_enc_ldrvD(dst, mem) );\n-  ins_pipe(vload_reg_mem64);\n-%}\n-\n-\/\/ Load Vector (128 bits)\n-instruct loadV16(vecX dst, vmem16 mem)\n-%{\n-  predicate(UseSVE == 0 && n->as_LoadVector()->memory_size() == 16);\n-  match(Set dst (LoadVector mem));\n-  ins_cost(4 * INSN_COST);\n-  format %{ \"ldrq   $dst,$mem\\t# vector (128 bits)\" %}\n-  ins_encode( aarch64_enc_ldrvQ(dst, mem) );\n-  ins_pipe(vload_reg_mem128);\n-%}\n-\n-\/\/ Store Vector (32 bits)\n-instruct storeV4(vecD src, vmem4 mem)\n-%{\n-  predicate(n->as_StoreVector()->memory_size() == 4);\n-  match(Set mem (StoreVector mem src));\n-  ins_cost(4 * INSN_COST);\n-  format %{ \"strs   $mem,$src\\t# vector (32 bits)\" %}\n-  ins_encode( aarch64_enc_strvS(src, mem) );\n-  ins_pipe(vstore_reg_mem64);\n-%}\n-\n-\/\/ Store Vector (64 bits)\n-instruct storeV8(vecD src, vmem8 mem)\n-%{\n-  predicate(n->as_StoreVector()->memory_size() == 8);\n-  match(Set mem (StoreVector mem src));\n-  ins_cost(4 * INSN_COST);\n-  format %{ \"strd   $mem,$src\\t# vector (64 bits)\" %}\n-  ins_encode( aarch64_enc_strvD(src, mem) );\n-  ins_pipe(vstore_reg_mem64);\n-%}\n-\n-\/\/ Store Vector (128 bits)\n-instruct storeV16(vecX src, vmem16 mem)\n-%{\n-  predicate(n->as_StoreVector()->memory_size() == 16);\n-  match(Set mem (StoreVector mem src));\n-  ins_cost(4 * INSN_COST);\n-  format %{ \"strq   $mem,$src\\t# vector (128 bits)\" %}\n-  ins_encode( aarch64_enc_strvQ(src, mem) );\n-  ins_pipe(vstore_reg_mem128);\n-%}\n-\n-instruct replicate8B(vecD dst, iRegIorL2I src)\n-%{\n-  predicate(n->as_Vector()->length() == 4 ||\n-            n->as_Vector()->length() == 8);\n-  match(Set dst (ReplicateB src));\n-  ins_cost(INSN_COST);\n-  format %{ \"dup  $dst, $src\\t# vector (8B)\" %}\n-  ins_encode %{\n-    __ dup(as_FloatRegister($dst$$reg), __ T8B, as_Register($src$$reg));\n-  %}\n-  ins_pipe(vdup_reg_reg64);\n-%}\n-\n-instruct replicate16B(vecX dst, iRegIorL2I src)\n-%{\n-  predicate(UseSVE == 0 && n->as_Vector()->length() == 16);\n-  match(Set dst (ReplicateB src));\n-  ins_cost(INSN_COST);\n-  format %{ \"dup  $dst, $src\\t# vector (16B)\" %}\n-  ins_encode %{\n-    __ dup(as_FloatRegister($dst$$reg), __ T16B, as_Register($src$$reg));\n-  %}\n-  ins_pipe(vdup_reg_reg128);\n-%}\n-\n-instruct replicate8B_imm(vecD dst, immI con)\n-%{\n-  predicate(n->as_Vector()->length() == 4 ||\n-            n->as_Vector()->length() == 8);\n-  match(Set dst (ReplicateB con));\n-  ins_cost(INSN_COST);\n-  format %{ \"movi  $dst, $con\\t# vector(8B)\" %}\n-  ins_encode %{\n-    __ mov(as_FloatRegister($dst$$reg), __ T8B, $con$$constant & 0xff);\n-  %}\n-  ins_pipe(vmovi_reg_imm64);\n-%}\n-\n-instruct replicate16B_imm(vecX dst, immI con)\n-%{\n-  predicate(UseSVE == 0 && n->as_Vector()->length() == 16);\n-  match(Set dst (ReplicateB con));\n-  ins_cost(INSN_COST);\n-  format %{ \"movi  $dst, $con\\t# vector(16B)\" %}\n-  ins_encode %{\n-    __ mov(as_FloatRegister($dst$$reg), __ T16B, $con$$constant & 0xff);\n-  %}\n-  ins_pipe(vmovi_reg_imm128);\n-%}\n-\n-instruct replicate4S(vecD dst, iRegIorL2I src)\n-%{\n-  predicate(n->as_Vector()->length() == 2 ||\n-            n->as_Vector()->length() == 4);\n-  match(Set dst (ReplicateS src));\n-  ins_cost(INSN_COST);\n-  format %{ \"dup  $dst, $src\\t# vector (4S)\" %}\n-  ins_encode %{\n-    __ dup(as_FloatRegister($dst$$reg), __ T4H, as_Register($src$$reg));\n-  %}\n-  ins_pipe(vdup_reg_reg64);\n-%}\n-\n-instruct replicate8S(vecX dst, iRegIorL2I src)\n-%{\n-  predicate(UseSVE == 0 && n->as_Vector()->length() == 8);\n-  match(Set dst (ReplicateS src));\n-  ins_cost(INSN_COST);\n-  format %{ \"dup  $dst, $src\\t# vector (8S)\" %}\n-  ins_encode %{\n-    __ dup(as_FloatRegister($dst$$reg), __ T8H, as_Register($src$$reg));\n-  %}\n-  ins_pipe(vdup_reg_reg128);\n-%}\n-\n-instruct replicate4S_imm(vecD dst, immI con)\n-%{\n-  predicate(n->as_Vector()->length() == 2 ||\n-            n->as_Vector()->length() == 4);\n-  match(Set dst (ReplicateS con));\n-  ins_cost(INSN_COST);\n-  format %{ \"movi  $dst, $con\\t# vector(4H)\" %}\n-  ins_encode %{\n-    __ mov(as_FloatRegister($dst$$reg), __ T4H, $con$$constant & 0xffff);\n-  %}\n-  ins_pipe(vmovi_reg_imm64);\n-%}\n-\n-instruct replicate8S_imm(vecX dst, immI con)\n-%{\n-  predicate(UseSVE == 0 && n->as_Vector()->length() == 8);\n-  match(Set dst (ReplicateS con));\n-  ins_cost(INSN_COST);\n-  format %{ \"movi  $dst, $con\\t# vector(8H)\" %}\n-  ins_encode %{\n-    __ mov(as_FloatRegister($dst$$reg), __ T8H, $con$$constant & 0xffff);\n-  %}\n-  ins_pipe(vmovi_reg_imm128);\n-%}\n-\n-instruct replicate2I(vecD dst, iRegIorL2I src)\n-%{\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (ReplicateI src));\n-  ins_cost(INSN_COST);\n-  format %{ \"dup  $dst, $src\\t# vector (2I)\" %}\n-  ins_encode %{\n-    __ dup(as_FloatRegister($dst$$reg), __ T2S, as_Register($src$$reg));\n-  %}\n-  ins_pipe(vdup_reg_reg64);\n-%}\n-\n-instruct replicate4I(vecX dst, iRegIorL2I src)\n-%{\n-  predicate(UseSVE == 0 && n->as_Vector()->length() == 4);\n-  match(Set dst (ReplicateI src));\n-  ins_cost(INSN_COST);\n-  format %{ \"dup  $dst, $src\\t# vector (4I)\" %}\n-  ins_encode %{\n-    __ dup(as_FloatRegister($dst$$reg), __ T4S, as_Register($src$$reg));\n-  %}\n-  ins_pipe(vdup_reg_reg128);\n-%}\n-\n-instruct replicate2I_imm(vecD dst, immI con)\n-%{\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (ReplicateI con));\n-  ins_cost(INSN_COST);\n-  format %{ \"movi  $dst, $con\\t# vector(2I)\" %}\n-  ins_encode %{\n-    __ mov(as_FloatRegister($dst$$reg), __ T2S, $con$$constant);\n-  %}\n-  ins_pipe(vmovi_reg_imm64);\n-%}\n-\n-instruct replicate4I_imm(vecX dst, immI con)\n-%{\n-  predicate(UseSVE == 0 && n->as_Vector()->length() == 4);\n-  match(Set dst (ReplicateI con));\n-  ins_cost(INSN_COST);\n-  format %{ \"movi  $dst, $con\\t# vector(4I)\" %}\n-  ins_encode %{\n-    __ mov(as_FloatRegister($dst$$reg), __ T4S, $con$$constant);\n-  %}\n-  ins_pipe(vmovi_reg_imm128);\n-%}\n-\n-instruct replicate2L(vecX dst, iRegL src)\n-%{\n-  predicate(UseSVE == 0 && n->as_Vector()->length() == 2);\n-  match(Set dst (ReplicateL src));\n-  ins_cost(INSN_COST);\n-  format %{ \"dup  $dst, $src\\t# vector (2L)\" %}\n-  ins_encode %{\n-    __ dup(as_FloatRegister($dst$$reg), __ T2D, as_Register($src$$reg));\n-  %}\n-  ins_pipe(vdup_reg_reg128);\n-%}\n-\n-instruct replicate2L_zero(vecX dst, immI0 zero)\n-%{\n-  predicate(UseSVE == 0 && n->as_Vector()->length() == 2);\n-  match(Set dst (ReplicateI zero));\n-  ins_cost(INSN_COST);\n-  format %{ \"movi  $dst, $zero\\t# vector(4I)\" %}\n-  ins_encode %{\n-    __ eor(as_FloatRegister($dst$$reg), __ T16B,\n-           as_FloatRegister($dst$$reg),\n-           as_FloatRegister($dst$$reg));\n-  %}\n-  ins_pipe(vmovi_reg_imm128);\n-%}\n-\n-instruct replicate2F(vecD dst, vRegF src)\n-%{\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (ReplicateF src));\n-  ins_cost(INSN_COST);\n-  format %{ \"dup  $dst, $src\\t# vector (2F)\" %}\n-  ins_encode %{\n-    __ dup(as_FloatRegister($dst$$reg), __ T2S,\n-           as_FloatRegister($src$$reg));\n-  %}\n-  ins_pipe(vdup_reg_freg64);\n-%}\n-\n-instruct replicate4F(vecX dst, vRegF src)\n-%{\n-  predicate(UseSVE == 0 && n->as_Vector()->length() == 4);\n-  match(Set dst (ReplicateF src));\n-  ins_cost(INSN_COST);\n-  format %{ \"dup  $dst, $src\\t# vector (4F)\" %}\n-  ins_encode %{\n-    __ dup(as_FloatRegister($dst$$reg), __ T4S,\n-           as_FloatRegister($src$$reg));\n-  %}\n-  ins_pipe(vdup_reg_freg128);\n-%}\n-\n-instruct replicate2D(vecX dst, vRegD src)\n-%{\n-  predicate(UseSVE == 0 && n->as_Vector()->length() == 2);\n-  match(Set dst (ReplicateD src));\n-  ins_cost(INSN_COST);\n-  format %{ \"dup  $dst, $src\\t# vector (2D)\" %}\n-  ins_encode %{\n-    __ dup(as_FloatRegister($dst$$reg), __ T2D,\n-           as_FloatRegister($src$$reg));\n-  %}\n-  ins_pipe(vdup_reg_dreg128);\n-%}\n-\n-\/\/ ====================REDUCTION ARITHMETIC====================================\n-\n-instruct reduce_add2I(iRegINoSp dst, iRegIorL2I isrc, vecD vsrc, iRegINoSp tmp, iRegINoSp tmp2)\n-%{\n-  predicate(n->in(2)->bottom_type()->is_vect()->element_basic_type() == T_INT);\n-  match(Set dst (AddReductionVI isrc vsrc));\n-  ins_cost(INSN_COST);\n-  effect(TEMP tmp, TEMP tmp2);\n-  format %{ \"umov  $tmp, $vsrc, S, 0\\n\\t\"\n-            \"umov  $tmp2, $vsrc, S, 1\\n\\t\"\n-            \"addw  $tmp, $isrc, $tmp\\n\\t\"\n-            \"addw  $dst, $tmp, $tmp2\\t# add reduction2I\"\n-  %}\n-  ins_encode %{\n-    __ umov($tmp$$Register, as_FloatRegister($vsrc$$reg), __ S, 0);\n-    __ umov($tmp2$$Register, as_FloatRegister($vsrc$$reg), __ S, 1);\n-    __ addw($tmp$$Register, $isrc$$Register, $tmp$$Register);\n-    __ addw($dst$$Register, $tmp$$Register, $tmp2$$Register);\n-  %}\n-  ins_pipe(pipe_class_default);\n-%}\n-\n-instruct reduce_add4I(iRegINoSp dst, iRegIorL2I isrc, vecX vsrc, vecX vtmp, iRegINoSp itmp)\n-%{\n-  predicate(n->in(2)->bottom_type()->is_vect()->element_basic_type() == T_INT);\n-  match(Set dst (AddReductionVI isrc vsrc));\n-  ins_cost(INSN_COST);\n-  effect(TEMP vtmp, TEMP itmp);\n-  format %{ \"addv  $vtmp, T4S, $vsrc\\n\\t\"\n-            \"umov  $itmp, $vtmp, S, 0\\n\\t\"\n-            \"addw  $dst, $itmp, $isrc\\t# add reduction4I\"\n-  %}\n-  ins_encode %{\n-    __ addv(as_FloatRegister($vtmp$$reg), __ T4S,\n-            as_FloatRegister($vsrc$$reg));\n-    __ umov($itmp$$Register, as_FloatRegister($vtmp$$reg), __ S, 0);\n-    __ addw($dst$$Register, $itmp$$Register, $isrc$$Register);\n-  %}\n-  ins_pipe(pipe_class_default);\n-%}\n-\n-instruct reduce_mul2I(iRegINoSp dst, iRegIorL2I isrc, vecD vsrc, iRegINoSp tmp)\n-%{\n-  predicate(n->in(2)->bottom_type()->is_vect()->element_basic_type() == T_INT);\n-  match(Set dst (MulReductionVI isrc vsrc));\n-  ins_cost(INSN_COST);\n-  effect(TEMP tmp, TEMP dst);\n-  format %{ \"umov  $tmp, $vsrc, S, 0\\n\\t\"\n-            \"mul   $dst, $tmp, $isrc\\n\\t\"\n-            \"umov  $tmp, $vsrc, S, 1\\n\\t\"\n-            \"mul   $dst, $tmp, $dst\\t# mul reduction2I\"\n-  %}\n-  ins_encode %{\n-    __ umov($tmp$$Register, as_FloatRegister($vsrc$$reg), __ S, 0);\n-    __ mul($dst$$Register, $tmp$$Register, $isrc$$Register);\n-    __ umov($tmp$$Register, as_FloatRegister($vsrc$$reg), __ S, 1);\n-    __ mul($dst$$Register, $tmp$$Register, $dst$$Register);\n-  %}\n-  ins_pipe(pipe_class_default);\n-%}\n-\n-instruct reduce_mul4I(iRegINoSp dst, iRegIorL2I isrc, vecX vsrc, vecX vtmp, iRegINoSp itmp)\n-%{\n-  predicate(n->in(2)->bottom_type()->is_vect()->element_basic_type() == T_INT);\n-  match(Set dst (MulReductionVI isrc vsrc));\n-  ins_cost(INSN_COST);\n-  effect(TEMP vtmp, TEMP itmp, TEMP dst);\n-  format %{ \"ins   $vtmp, D, $vsrc, 0, 1\\n\\t\"\n-            \"mulv  $vtmp, T2S, $vtmp, $vsrc\\n\\t\"\n-            \"umov  $itmp, $vtmp, S, 0\\n\\t\"\n-            \"mul   $dst, $itmp, $isrc\\n\\t\"\n-            \"umov  $itmp, $vtmp, S, 1\\n\\t\"\n-            \"mul   $dst, $itmp, $dst\\t# mul reduction4I\"\n-  %}\n-  ins_encode %{\n-    __ ins(as_FloatRegister($vtmp$$reg), __ D,\n-           as_FloatRegister($vsrc$$reg), 0, 1);\n-    __ mulv(as_FloatRegister($vtmp$$reg), __ T2S,\n-            as_FloatRegister($vtmp$$reg), as_FloatRegister($vsrc$$reg));\n-    __ umov($itmp$$Register, as_FloatRegister($vtmp$$reg), __ S, 0);\n-    __ mul($dst$$Register, $itmp$$Register, $isrc$$Register);\n-    __ umov($itmp$$Register, as_FloatRegister($vtmp$$reg), __ S, 1);\n-    __ mul($dst$$Register, $itmp$$Register, $dst$$Register);\n-  %}\n-  ins_pipe(pipe_class_default);\n-%}\n-\n-instruct reduce_add2F(vRegF dst, vRegF fsrc, vecD vsrc, vecD tmp)\n-%{\n-  match(Set dst (AddReductionVF fsrc vsrc));\n-  ins_cost(INSN_COST);\n-  effect(TEMP tmp, TEMP dst);\n-  format %{ \"fadds $dst, $fsrc, $vsrc\\n\\t\"\n-            \"ins   $tmp, S, $vsrc, 0, 1\\n\\t\"\n-            \"fadds $dst, $dst, $tmp\\t# add reduction2F\"\n-  %}\n-  ins_encode %{\n-    __ fadds(as_FloatRegister($dst$$reg),\n-             as_FloatRegister($fsrc$$reg), as_FloatRegister($vsrc$$reg));\n-    __ ins(as_FloatRegister($tmp$$reg), __ S,\n-           as_FloatRegister($vsrc$$reg), 0, 1);\n-    __ fadds(as_FloatRegister($dst$$reg),\n-             as_FloatRegister($dst$$reg), as_FloatRegister($tmp$$reg));\n-  %}\n-  ins_pipe(pipe_class_default);\n-%}\n-\n-instruct reduce_add4F(vRegF dst, vRegF fsrc, vecX vsrc, vecX tmp)\n-%{\n-  match(Set dst (AddReductionVF fsrc vsrc));\n-  ins_cost(INSN_COST);\n-  effect(TEMP tmp, TEMP dst);\n-  format %{ \"fadds $dst, $fsrc, $vsrc\\n\\t\"\n-            \"ins   $tmp, S, $vsrc, 0, 1\\n\\t\"\n-            \"fadds $dst, $dst, $tmp\\n\\t\"\n-            \"ins   $tmp, S, $vsrc, 0, 2\\n\\t\"\n-            \"fadds $dst, $dst, $tmp\\n\\t\"\n-            \"ins   $tmp, S, $vsrc, 0, 3\\n\\t\"\n-            \"fadds $dst, $dst, $tmp\\t# add reduction4F\"\n-  %}\n-  ins_encode %{\n-    __ fadds(as_FloatRegister($dst$$reg),\n-             as_FloatRegister($fsrc$$reg), as_FloatRegister($vsrc$$reg));\n-    __ ins(as_FloatRegister($tmp$$reg), __ S,\n-           as_FloatRegister($vsrc$$reg), 0, 1);\n-    __ fadds(as_FloatRegister($dst$$reg),\n-             as_FloatRegister($dst$$reg), as_FloatRegister($tmp$$reg));\n-    __ ins(as_FloatRegister($tmp$$reg), __ S,\n-           as_FloatRegister($vsrc$$reg), 0, 2);\n-    __ fadds(as_FloatRegister($dst$$reg),\n-             as_FloatRegister($dst$$reg), as_FloatRegister($tmp$$reg));\n-    __ ins(as_FloatRegister($tmp$$reg), __ S,\n-           as_FloatRegister($vsrc$$reg), 0, 3);\n-    __ fadds(as_FloatRegister($dst$$reg),\n-             as_FloatRegister($dst$$reg), as_FloatRegister($tmp$$reg));\n-  %}\n-  ins_pipe(pipe_class_default);\n-%}\n-\n-instruct reduce_mul2F(vRegF dst, vRegF fsrc, vecD vsrc, vecD tmp)\n-%{\n-  match(Set dst (MulReductionVF fsrc vsrc));\n-  ins_cost(INSN_COST);\n-  effect(TEMP tmp, TEMP dst);\n-  format %{ \"fmuls $dst, $fsrc, $vsrc\\n\\t\"\n-            \"ins   $tmp, S, $vsrc, 0, 1\\n\\t\"\n-            \"fmuls $dst, $dst, $tmp\\t# mul reduction2F\"\n-  %}\n-  ins_encode %{\n-    __ fmuls(as_FloatRegister($dst$$reg),\n-             as_FloatRegister($fsrc$$reg), as_FloatRegister($vsrc$$reg));\n-    __ ins(as_FloatRegister($tmp$$reg), __ S,\n-           as_FloatRegister($vsrc$$reg), 0, 1);\n-    __ fmuls(as_FloatRegister($dst$$reg),\n-             as_FloatRegister($dst$$reg), as_FloatRegister($tmp$$reg));\n-  %}\n-  ins_pipe(pipe_class_default);\n-%}\n-\n-instruct reduce_mul4F(vRegF dst, vRegF fsrc, vecX vsrc, vecX tmp)\n-%{\n-  match(Set dst (MulReductionVF fsrc vsrc));\n-  ins_cost(INSN_COST);\n-  effect(TEMP tmp, TEMP dst);\n-  format %{ \"fmuls $dst, $fsrc, $vsrc\\n\\t\"\n-            \"ins   $tmp, S, $vsrc, 0, 1\\n\\t\"\n-            \"fmuls $dst, $dst, $tmp\\n\\t\"\n-            \"ins   $tmp, S, $vsrc, 0, 2\\n\\t\"\n-            \"fmuls $dst, $dst, $tmp\\n\\t\"\n-            \"ins   $tmp, S, $vsrc, 0, 3\\n\\t\"\n-            \"fmuls $dst, $dst, $tmp\\t# mul reduction4F\"\n-  %}\n-  ins_encode %{\n-    __ fmuls(as_FloatRegister($dst$$reg),\n-             as_FloatRegister($fsrc$$reg), as_FloatRegister($vsrc$$reg));\n-    __ ins(as_FloatRegister($tmp$$reg), __ S,\n-           as_FloatRegister($vsrc$$reg), 0, 1);\n-    __ fmuls(as_FloatRegister($dst$$reg),\n-             as_FloatRegister($dst$$reg), as_FloatRegister($tmp$$reg));\n-    __ ins(as_FloatRegister($tmp$$reg), __ S,\n-           as_FloatRegister($vsrc$$reg), 0, 2);\n-    __ fmuls(as_FloatRegister($dst$$reg),\n-             as_FloatRegister($dst$$reg), as_FloatRegister($tmp$$reg));\n-    __ ins(as_FloatRegister($tmp$$reg), __ S,\n-           as_FloatRegister($vsrc$$reg), 0, 3);\n-    __ fmuls(as_FloatRegister($dst$$reg),\n-             as_FloatRegister($dst$$reg), as_FloatRegister($tmp$$reg));\n-  %}\n-  ins_pipe(pipe_class_default);\n-%}\n-\n-instruct reduce_add2D(vRegD dst, vRegD dsrc, vecX vsrc, vecX tmp)\n-%{\n-  match(Set dst (AddReductionVD dsrc vsrc));\n-  ins_cost(INSN_COST);\n-  effect(TEMP tmp, TEMP dst);\n-  format %{ \"faddd $dst, $dsrc, $vsrc\\n\\t\"\n-            \"ins   $tmp, D, $vsrc, 0, 1\\n\\t\"\n-            \"faddd $dst, $dst, $tmp\\t# add reduction2D\"\n-  %}\n-  ins_encode %{\n-    __ faddd(as_FloatRegister($dst$$reg),\n-             as_FloatRegister($dsrc$$reg), as_FloatRegister($vsrc$$reg));\n-    __ ins(as_FloatRegister($tmp$$reg), __ D,\n-           as_FloatRegister($vsrc$$reg), 0, 1);\n-    __ faddd(as_FloatRegister($dst$$reg),\n-             as_FloatRegister($dst$$reg), as_FloatRegister($tmp$$reg));\n-  %}\n-  ins_pipe(pipe_class_default);\n-%}\n-\n-instruct reduce_mul2D(vRegD dst, vRegD dsrc, vecX vsrc, vecX tmp)\n-%{\n-  match(Set dst (MulReductionVD dsrc vsrc));\n-  ins_cost(INSN_COST);\n-  effect(TEMP tmp, TEMP dst);\n-  format %{ \"fmuld $dst, $dsrc, $vsrc\\n\\t\"\n-            \"ins   $tmp, D, $vsrc, 0, 1\\n\\t\"\n-            \"fmuld $dst, $dst, $tmp\\t# mul reduction2D\"\n-  %}\n-  ins_encode %{\n-    __ fmuld(as_FloatRegister($dst$$reg),\n-             as_FloatRegister($dsrc$$reg), as_FloatRegister($vsrc$$reg));\n-    __ ins(as_FloatRegister($tmp$$reg), __ D,\n-           as_FloatRegister($vsrc$$reg), 0, 1);\n-    __ fmuld(as_FloatRegister($dst$$reg),\n-             as_FloatRegister($dst$$reg), as_FloatRegister($tmp$$reg));\n-  %}\n-  ins_pipe(pipe_class_default);\n-%}\n-\n-\/\/ ====================VECTOR ARITHMETIC=======================================\n-\n-\/\/ --------------------------------- ADD --------------------------------------\n-\n-instruct vadd8B(vecD dst, vecD src1, vecD src2)\n-%{\n-  predicate(n->as_Vector()->length() == 4 ||\n-            n->as_Vector()->length() == 8);\n-  match(Set dst (AddVB src1 src2));\n-  ins_cost(INSN_COST);\n-  format %{ \"addv  $dst,$src1,$src2\\t# vector (8B)\" %}\n-  ins_encode %{\n-    __ addv(as_FloatRegister($dst$$reg), __ T8B,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop64);\n-%}\n-\n-instruct vadd16B(vecX dst, vecX src1, vecX src2)\n-%{\n-  predicate(n->as_Vector()->length() == 16);\n-  match(Set dst (AddVB src1 src2));\n-  ins_cost(INSN_COST);\n-  format %{ \"addv  $dst,$src1,$src2\\t# vector (16B)\" %}\n-  ins_encode %{\n-    __ addv(as_FloatRegister($dst$$reg), __ T16B,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vadd4S(vecD dst, vecD src1, vecD src2)\n-%{\n-  predicate(n->as_Vector()->length() == 2 ||\n-            n->as_Vector()->length() == 4);\n-  match(Set dst (AddVS src1 src2));\n-  ins_cost(INSN_COST);\n-  format %{ \"addv  $dst,$src1,$src2\\t# vector (4H)\" %}\n-  ins_encode %{\n-    __ addv(as_FloatRegister($dst$$reg), __ T4H,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop64);\n-%}\n-\n-instruct vadd8S(vecX dst, vecX src1, vecX src2)\n-%{\n-  predicate(n->as_Vector()->length() == 8);\n-  match(Set dst (AddVS src1 src2));\n-  ins_cost(INSN_COST);\n-  format %{ \"addv  $dst,$src1,$src2\\t# vector (8H)\" %}\n-  ins_encode %{\n-    __ addv(as_FloatRegister($dst$$reg), __ T8H,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vadd2I(vecD dst, vecD src1, vecD src2)\n-%{\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (AddVI src1 src2));\n-  ins_cost(INSN_COST);\n-  format %{ \"addv  $dst,$src1,$src2\\t# vector (2S)\" %}\n-  ins_encode %{\n-    __ addv(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop64);\n-%}\n-\n-instruct vadd4I(vecX dst, vecX src1, vecX src2)\n-%{\n-  predicate(n->as_Vector()->length() == 4);\n-  match(Set dst (AddVI src1 src2));\n-  ins_cost(INSN_COST);\n-  format %{ \"addv  $dst,$src1,$src2\\t# vector (4S)\" %}\n-  ins_encode %{\n-    __ addv(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vadd2L(vecX dst, vecX src1, vecX src2)\n-%{\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (AddVL src1 src2));\n-  ins_cost(INSN_COST);\n-  format %{ \"addv  $dst,$src1,$src2\\t# vector (2L)\" %}\n-  ins_encode %{\n-    __ addv(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vadd2F(vecD dst, vecD src1, vecD src2)\n-%{\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (AddVF src1 src2));\n-  ins_cost(INSN_COST);\n-  format %{ \"fadd  $dst,$src1,$src2\\t# vector (2S)\" %}\n-  ins_encode %{\n-    __ fadd(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop_fp64);\n-%}\n-\n-instruct vadd4F(vecX dst, vecX src1, vecX src2)\n-%{\n-  predicate(n->as_Vector()->length() == 4);\n-  match(Set dst (AddVF src1 src2));\n-  ins_cost(INSN_COST);\n-  format %{ \"fadd  $dst,$src1,$src2\\t# vector (4S)\" %}\n-  ins_encode %{\n-    __ fadd(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop_fp128);\n-%}\n-\n-instruct vadd2D(vecX dst, vecX src1, vecX src2)\n-%{\n-  match(Set dst (AddVD src1 src2));\n-  ins_cost(INSN_COST);\n-  format %{ \"fadd  $dst,$src1,$src2\\t# vector (2D)\" %}\n-  ins_encode %{\n-    __ fadd(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop_fp128);\n-%}\n-\n-\/\/ --------------------------------- SUB --------------------------------------\n-\n-instruct vsub8B(vecD dst, vecD src1, vecD src2)\n-%{\n-  predicate(n->as_Vector()->length() == 4 ||\n-            n->as_Vector()->length() == 8);\n-  match(Set dst (SubVB src1 src2));\n-  ins_cost(INSN_COST);\n-  format %{ \"subv  $dst,$src1,$src2\\t# vector (8B)\" %}\n-  ins_encode %{\n-    __ subv(as_FloatRegister($dst$$reg), __ T8B,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop64);\n-%}\n-\n-instruct vsub16B(vecX dst, vecX src1, vecX src2)\n-%{\n-  predicate(n->as_Vector()->length() == 16);\n-  match(Set dst (SubVB src1 src2));\n-  ins_cost(INSN_COST);\n-  format %{ \"subv  $dst,$src1,$src2\\t# vector (16B)\" %}\n-  ins_encode %{\n-    __ subv(as_FloatRegister($dst$$reg), __ T16B,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vsub4S(vecD dst, vecD src1, vecD src2)\n-%{\n-  predicate(n->as_Vector()->length() == 2 ||\n-            n->as_Vector()->length() == 4);\n-  match(Set dst (SubVS src1 src2));\n-  ins_cost(INSN_COST);\n-  format %{ \"subv  $dst,$src1,$src2\\t# vector (4H)\" %}\n-  ins_encode %{\n-    __ subv(as_FloatRegister($dst$$reg), __ T4H,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop64);\n-%}\n-\n-instruct vsub8S(vecX dst, vecX src1, vecX src2)\n-%{\n-  predicate(n->as_Vector()->length() == 8);\n-  match(Set dst (SubVS src1 src2));\n-  ins_cost(INSN_COST);\n-  format %{ \"subv  $dst,$src1,$src2\\t# vector (8H)\" %}\n-  ins_encode %{\n-    __ subv(as_FloatRegister($dst$$reg), __ T8H,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vsub2I(vecD dst, vecD src1, vecD src2)\n-%{\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (SubVI src1 src2));\n-  ins_cost(INSN_COST);\n-  format %{ \"subv  $dst,$src1,$src2\\t# vector (2S)\" %}\n-  ins_encode %{\n-    __ subv(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop64);\n-%}\n-\n-instruct vsub4I(vecX dst, vecX src1, vecX src2)\n-%{\n-  predicate(n->as_Vector()->length() == 4);\n-  match(Set dst (SubVI src1 src2));\n-  ins_cost(INSN_COST);\n-  format %{ \"subv  $dst,$src1,$src2\\t# vector (4S)\" %}\n-  ins_encode %{\n-    __ subv(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vsub2L(vecX dst, vecX src1, vecX src2)\n-%{\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (SubVL src1 src2));\n-  ins_cost(INSN_COST);\n-  format %{ \"subv  $dst,$src1,$src2\\t# vector (2L)\" %}\n-  ins_encode %{\n-    __ subv(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop128);\n-%}\n-\n-instruct vsub2F(vecD dst, vecD src1, vecD src2)\n-%{\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (SubVF src1 src2));\n-  ins_cost(INSN_COST);\n-  format %{ \"fsub  $dst,$src1,$src2\\t# vector (2S)\" %}\n-  ins_encode %{\n-    __ fsub(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop_fp64);\n-%}\n-\n-instruct vsub4F(vecX dst, vecX src1, vecX src2)\n-%{\n-  predicate(n->as_Vector()->length() == 4);\n-  match(Set dst (SubVF src1 src2));\n-  ins_cost(INSN_COST);\n-  format %{ \"fsub  $dst,$src1,$src2\\t# vector (4S)\" %}\n-  ins_encode %{\n-    __ fsub(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop_fp128);\n-%}\n-\n-instruct vsub2D(vecX dst, vecX src1, vecX src2)\n-%{\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (SubVD src1 src2));\n-  ins_cost(INSN_COST);\n-  format %{ \"fsub  $dst,$src1,$src2\\t# vector (2D)\" %}\n-  ins_encode %{\n-    __ fsub(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop_fp128);\n-%}\n-\n-\/\/ --------------------------------- MUL --------------------------------------\n-\n-instruct vmul8B(vecD dst, vecD src1, vecD src2)\n-%{\n-  predicate(n->as_Vector()->length() == 4 ||\n-            n->as_Vector()->length() == 8);\n-  match(Set dst (MulVB src1 src2));\n-  ins_cost(INSN_COST);\n-  format %{ \"mulv  $dst,$src1,$src2\\t# vector (8B)\" %}\n-  ins_encode %{\n-    __ mulv(as_FloatRegister($dst$$reg), __ T8B,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vmul64);\n-%}\n-\n-instruct vmul16B(vecX dst, vecX src1, vecX src2)\n-%{\n-  predicate(n->as_Vector()->length() == 16);\n-  match(Set dst (MulVB src1 src2));\n-  ins_cost(INSN_COST);\n-  format %{ \"mulv  $dst,$src1,$src2\\t# vector (16B)\" %}\n-  ins_encode %{\n-    __ mulv(as_FloatRegister($dst$$reg), __ T16B,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vmul128);\n-%}\n-\n-instruct vmul4S(vecD dst, vecD src1, vecD src2)\n-%{\n-  predicate(n->as_Vector()->length() == 2 ||\n-            n->as_Vector()->length() == 4);\n-  match(Set dst (MulVS src1 src2));\n-  ins_cost(INSN_COST);\n-  format %{ \"mulv  $dst,$src1,$src2\\t# vector (4H)\" %}\n-  ins_encode %{\n-    __ mulv(as_FloatRegister($dst$$reg), __ T4H,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vmul64);\n-%}\n-\n-instruct vmul8S(vecX dst, vecX src1, vecX src2)\n-%{\n-  predicate(n->as_Vector()->length() == 8);\n-  match(Set dst (MulVS src1 src2));\n-  ins_cost(INSN_COST);\n-  format %{ \"mulv  $dst,$src1,$src2\\t# vector (8H)\" %}\n-  ins_encode %{\n-    __ mulv(as_FloatRegister($dst$$reg), __ T8H,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vmul128);\n-%}\n-\n-instruct vmul2I(vecD dst, vecD src1, vecD src2)\n-%{\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (MulVI src1 src2));\n-  ins_cost(INSN_COST);\n-  format %{ \"mulv  $dst,$src1,$src2\\t# vector (2S)\" %}\n-  ins_encode %{\n-    __ mulv(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vmul64);\n-%}\n-\n-instruct vmul4I(vecX dst, vecX src1, vecX src2)\n-%{\n-  predicate(n->as_Vector()->length() == 4);\n-  match(Set dst (MulVI src1 src2));\n-  ins_cost(INSN_COST);\n-  format %{ \"mulv  $dst,$src1,$src2\\t# vector (4S)\" %}\n-  ins_encode %{\n-    __ mulv(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vmul128);\n-%}\n-\n-instruct vmul2F(vecD dst, vecD src1, vecD src2)\n-%{\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (MulVF src1 src2));\n-  ins_cost(INSN_COST);\n-  format %{ \"fmul  $dst,$src1,$src2\\t# vector (2S)\" %}\n-  ins_encode %{\n-    __ fmul(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vmuldiv_fp64);\n-%}\n-\n-instruct vmul4F(vecX dst, vecX src1, vecX src2)\n-%{\n-  predicate(n->as_Vector()->length() == 4);\n-  match(Set dst (MulVF src1 src2));\n-  ins_cost(INSN_COST);\n-  format %{ \"fmul  $dst,$src1,$src2\\t# vector (4S)\" %}\n-  ins_encode %{\n-    __ fmul(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vmuldiv_fp128);\n-%}\n-\n-instruct vmul2D(vecX dst, vecX src1, vecX src2)\n-%{\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (MulVD src1 src2));\n-  ins_cost(INSN_COST);\n-  format %{ \"fmul  $dst,$src1,$src2\\t# vector (2D)\" %}\n-  ins_encode %{\n-    __ fmul(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vmuldiv_fp128);\n-%}\n-\n-\/\/ --------------------------------- MLA --------------------------------------\n-\n-instruct vmla4S(vecD dst, vecD src1, vecD src2)\n-%{\n-  predicate(n->as_Vector()->length() == 2 ||\n-            n->as_Vector()->length() == 4);\n-  match(Set dst (AddVS dst (MulVS src1 src2)));\n-  ins_cost(INSN_COST);\n-  format %{ \"mlav  $dst,$src1,$src2\\t# vector (4H)\" %}\n-  ins_encode %{\n-    __ mlav(as_FloatRegister($dst$$reg), __ T4H,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vmla64);\n-%}\n-\n-instruct vmla8S(vecX dst, vecX src1, vecX src2)\n-%{\n-  predicate(n->as_Vector()->length() == 8);\n-  match(Set dst (AddVS dst (MulVS src1 src2)));\n-  ins_cost(INSN_COST);\n-  format %{ \"mlav  $dst,$src1,$src2\\t# vector (8H)\" %}\n-  ins_encode %{\n-    __ mlav(as_FloatRegister($dst$$reg), __ T8H,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vmla128);\n-%}\n-\n-instruct vmla2I(vecD dst, vecD src1, vecD src2)\n-%{\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (AddVI dst (MulVI src1 src2)));\n-  ins_cost(INSN_COST);\n-  format %{ \"mlav  $dst,$src1,$src2\\t# vector (2S)\" %}\n-  ins_encode %{\n-    __ mlav(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vmla64);\n-%}\n-\n-instruct vmla4I(vecX dst, vecX src1, vecX src2)\n-%{\n-  predicate(n->as_Vector()->length() == 4);\n-  match(Set dst (AddVI dst (MulVI src1 src2)));\n-  ins_cost(INSN_COST);\n-  format %{ \"mlav  $dst,$src1,$src2\\t# vector (4S)\" %}\n-  ins_encode %{\n-    __ mlav(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vmla128);\n-%}\n-\n-\/\/ dst + src1 * src2\n-instruct vmla2F(vecD dst, vecD src1, vecD src2) %{\n-  predicate(UseFMA && n->as_Vector()->length() == 2);\n-  match(Set dst (FmaVF  dst (Binary src1 src2)));\n-  format %{ \"fmla  $dst,$src1,$src2\\t# vector (2S)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ fmla(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vmuldiv_fp64);\n-%}\n-\n-\/\/ dst + src1 * src2\n-instruct vmla4F(vecX dst, vecX src1, vecX src2) %{\n-  predicate(UseFMA && n->as_Vector()->length() == 4);\n-  match(Set dst (FmaVF  dst (Binary src1 src2)));\n-  format %{ \"fmla  $dst,$src1,$src2\\t# vector (4S)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ fmla(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vmuldiv_fp128);\n-%}\n-\n-\/\/ dst + src1 * src2\n-instruct vmla2D(vecX dst, vecX src1, vecX src2) %{\n-  predicate(UseFMA && n->as_Vector()->length() == 2);\n-  match(Set dst (FmaVD  dst (Binary src1 src2)));\n-  format %{ \"fmla  $dst,$src1,$src2\\t# vector (2D)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ fmla(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vmuldiv_fp128);\n-%}\n-\n-\/\/ --------------------------------- MLS --------------------------------------\n-\n-instruct vmls4S(vecD dst, vecD src1, vecD src2)\n-%{\n-  predicate(n->as_Vector()->length() == 2 ||\n-            n->as_Vector()->length() == 4);\n-  match(Set dst (SubVS dst (MulVS src1 src2)));\n-  ins_cost(INSN_COST);\n-  format %{ \"mlsv  $dst,$src1,$src2\\t# vector (4H)\" %}\n-  ins_encode %{\n-    __ mlsv(as_FloatRegister($dst$$reg), __ T4H,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vmla64);\n-%}\n-\n-instruct vmls8S(vecX dst, vecX src1, vecX src2)\n-%{\n-  predicate(n->as_Vector()->length() == 8);\n-  match(Set dst (SubVS dst (MulVS src1 src2)));\n-  ins_cost(INSN_COST);\n-  format %{ \"mlsv  $dst,$src1,$src2\\t# vector (8H)\" %}\n-  ins_encode %{\n-    __ mlsv(as_FloatRegister($dst$$reg), __ T8H,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vmla128);\n-%}\n-\n-instruct vmls2I(vecD dst, vecD src1, vecD src2)\n-%{\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (SubVI dst (MulVI src1 src2)));\n-  ins_cost(INSN_COST);\n-  format %{ \"mlsv  $dst,$src1,$src2\\t# vector (2S)\" %}\n-  ins_encode %{\n-    __ mlsv(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vmla64);\n-%}\n-\n-instruct vmls4I(vecX dst, vecX src1, vecX src2)\n-%{\n-  predicate(n->as_Vector()->length() == 4);\n-  match(Set dst (SubVI dst (MulVI src1 src2)));\n-  ins_cost(INSN_COST);\n-  format %{ \"mlsv  $dst,$src1,$src2\\t# vector (4S)\" %}\n-  ins_encode %{\n-    __ mlsv(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vmla128);\n-%}\n-\n-\/\/ dst - src1 * src2\n-instruct vmls2F(vecD dst, vecD src1, vecD src2) %{\n-  predicate(UseFMA && n->as_Vector()->length() == 2);\n-  match(Set dst (FmaVF  dst (Binary (NegVF src1) src2)));\n-  match(Set dst (FmaVF  dst (Binary src1 (NegVF src2))));\n-  format %{ \"fmls  $dst,$src1,$src2\\t# vector (2S)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ fmls(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vmuldiv_fp64);\n-%}\n-\n-\/\/ dst - src1 * src2\n-instruct vmls4F(vecX dst, vecX src1, vecX src2) %{\n-  predicate(UseFMA && n->as_Vector()->length() == 4);\n-  match(Set dst (FmaVF  dst (Binary (NegVF src1) src2)));\n-  match(Set dst (FmaVF  dst (Binary src1 (NegVF src2))));\n-  format %{ \"fmls  $dst,$src1,$src2\\t# vector (4S)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ fmls(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vmuldiv_fp128);\n-%}\n-\n-\/\/ dst - src1 * src2\n-instruct vmls2D(vecX dst, vecX src1, vecX src2) %{\n-  predicate(UseFMA && n->as_Vector()->length() == 2);\n-  match(Set dst (FmaVD  dst (Binary (NegVD src1) src2)));\n-  match(Set dst (FmaVD  dst (Binary src1 (NegVD src2))));\n-  format %{ \"fmls  $dst,$src1,$src2\\t# vector (2D)\" %}\n-  ins_cost(INSN_COST);\n-  ins_encode %{\n-    __ fmls(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vmuldiv_fp128);\n-%}\n-\n-\/\/ --------------- Vector Multiply-Add Shorts into Integer --------------------\n-\n-instruct vmuladdS2I(vecX dst, vecX src1, vecX src2, vecX tmp) %{\n-  predicate(n->in(1)->bottom_type()->is_vect()->element_basic_type() == T_SHORT);\n-  match(Set dst (MulAddVS2VI src1 src2));\n-  ins_cost(INSN_COST);\n-  effect(TEMP_DEF dst, TEMP tmp);\n-  format %{ \"smullv  $tmp, $src1, $src2\\t# vector (4H)\\n\\t\"\n-            \"smullv  $dst, $src1, $src2\\t# vector (8H)\\n\\t\"\n-            \"addpv   $dst, $tmp, $dst\\t# vector (4S)\\n\\t\" %}\n-  ins_encode %{\n-    __ smullv(as_FloatRegister($tmp$$reg), __ T4H,\n-              as_FloatRegister($src1$$reg),\n-              as_FloatRegister($src2$$reg));\n-    __ smullv(as_FloatRegister($dst$$reg), __ T8H,\n-              as_FloatRegister($src1$$reg),\n-              as_FloatRegister($src2$$reg));\n-    __ addpv(as_FloatRegister($dst$$reg), __ T4S,\n-             as_FloatRegister($tmp$$reg),\n-             as_FloatRegister($dst$$reg));\n-  %}\n-  ins_pipe(vmuldiv_fp128);\n-%}\n-\n-\/\/ --------------------------------- DIV --------------------------------------\n-\n-instruct vdiv2F(vecD dst, vecD src1, vecD src2)\n-%{\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (DivVF src1 src2));\n-  ins_cost(INSN_COST);\n-  format %{ \"fdiv  $dst,$src1,$src2\\t# vector (2S)\" %}\n-  ins_encode %{\n-    __ fdiv(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vmuldiv_fp64);\n-%}\n-\n-instruct vdiv4F(vecX dst, vecX src1, vecX src2)\n-%{\n-  predicate(n->as_Vector()->length() == 4);\n-  match(Set dst (DivVF src1 src2));\n-  ins_cost(INSN_COST);\n-  format %{ \"fdiv  $dst,$src1,$src2\\t# vector (4S)\" %}\n-  ins_encode %{\n-    __ fdiv(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vmuldiv_fp128);\n-%}\n-\n-instruct vdiv2D(vecX dst, vecX src1, vecX src2)\n-%{\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (DivVD src1 src2));\n-  ins_cost(INSN_COST);\n-  format %{ \"fdiv  $dst,$src1,$src2\\t# vector (2D)\" %}\n-  ins_encode %{\n-    __ fdiv(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vmuldiv_fp128);\n-%}\n-\n-\/\/ --------------------------------- SQRT -------------------------------------\n-\n-instruct vsqrt2F(vecD dst, vecD src)\n-%{\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (SqrtVF src));\n-  format %{ \"fsqrt  $dst, $src\\t# vector (2F)\" %}\n-  ins_encode %{\n-    __ fsqrt(as_FloatRegister($dst$$reg), __ T2S, as_FloatRegister($src$$reg));\n-  %}\n-  ins_pipe(vunop_fp64);\n-%}\n-\n-instruct vsqrt4F(vecX dst, vecX src)\n-%{\n-  predicate(n->as_Vector()->length() == 4);\n-  match(Set dst (SqrtVF src));\n-  format %{ \"fsqrt  $dst, $src\\t# vector (4F)\" %}\n-  ins_encode %{\n-    __ fsqrt(as_FloatRegister($dst$$reg), __ T4S, as_FloatRegister($src$$reg));\n-  %}\n-  ins_pipe(vsqrt_fp128);\n-%}\n-\n-instruct vsqrt2D(vecX dst, vecX src)\n-%{\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (SqrtVD src));\n-  format %{ \"fsqrt  $dst, $src\\t# vector (2D)\" %}\n-  ins_encode %{\n-    __ fsqrt(as_FloatRegister($dst$$reg), __ T2D,\n-             as_FloatRegister($src$$reg));\n-  %}\n-  ins_pipe(vsqrt_fp128);\n-%}\n-\n-\/\/ --------------------------------- NEG --------------------------------------\n-\n-instruct vneg2F(vecD dst, vecD src)\n-%{\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (NegVF src));\n-  ins_cost(INSN_COST * 3);\n-  format %{ \"fneg  $dst,$src\\t# vector (2S)\" %}\n-  ins_encode %{\n-    __ fneg(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src$$reg));\n-  %}\n-  ins_pipe(vunop_fp64);\n-%}\n-\n-instruct vneg4F(vecX dst, vecX src)\n-%{\n-  predicate(n->as_Vector()->length() == 4);\n-  match(Set dst (NegVF src));\n-  ins_cost(INSN_COST * 3);\n-  format %{ \"fneg  $dst,$src\\t# vector (4S)\" %}\n-  ins_encode %{\n-    __ fneg(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src$$reg));\n-  %}\n-  ins_pipe(vunop_fp128);\n-%}\n-\n-instruct vneg2D(vecX dst, vecX src)\n-%{\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (NegVD src));\n-  ins_cost(INSN_COST * 3);\n-  format %{ \"fneg  $dst,$src\\t# vector (2D)\" %}\n-  ins_encode %{\n-    __ fneg(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src$$reg));\n-  %}\n-  ins_pipe(vunop_fp128);\n-%}\n-\n-\/\/ --------------------------------- AND --------------------------------------\n-\n-instruct vand8B(vecD dst, vecD src1, vecD src2)\n-%{\n-  predicate(n->as_Vector()->length_in_bytes() == 4 ||\n-            n->as_Vector()->length_in_bytes() == 8);\n-  match(Set dst (AndV src1 src2));\n-  ins_cost(INSN_COST);\n-  format %{ \"and  $dst,$src1,$src2\\t# vector (8B)\" %}\n-  ins_encode %{\n-    __ andr(as_FloatRegister($dst$$reg), __ T8B,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vlogical64);\n-%}\n-\n-instruct vand16B(vecX dst, vecX src1, vecX src2)\n-%{\n-  predicate(n->as_Vector()->length_in_bytes() == 16);\n-  match(Set dst (AndV src1 src2));\n-  ins_cost(INSN_COST);\n-  format %{ \"and  $dst,$src1,$src2\\t# vector (16B)\" %}\n-  ins_encode %{\n-    __ andr(as_FloatRegister($dst$$reg), __ T16B,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vlogical128);\n-%}\n-\n-\/\/ --------------------------------- OR ---------------------------------------\n-\n-instruct vor8B(vecD dst, vecD src1, vecD src2)\n-%{\n-  predicate(n->as_Vector()->length_in_bytes() == 4 ||\n-            n->as_Vector()->length_in_bytes() == 8);\n-  match(Set dst (OrV src1 src2));\n-  ins_cost(INSN_COST);\n-  format %{ \"and  $dst,$src1,$src2\\t# vector (8B)\" %}\n-  ins_encode %{\n-    __ orr(as_FloatRegister($dst$$reg), __ T8B,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vlogical64);\n-%}\n-\n-instruct vor16B(vecX dst, vecX src1, vecX src2)\n-%{\n-  predicate(n->as_Vector()->length_in_bytes() == 16);\n-  match(Set dst (OrV src1 src2));\n-  ins_cost(INSN_COST);\n-  format %{ \"orr  $dst,$src1,$src2\\t# vector (16B)\" %}\n-  ins_encode %{\n-    __ orr(as_FloatRegister($dst$$reg), __ T16B,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vlogical128);\n-%}\n-\n-\/\/ --------------------------------- XOR --------------------------------------\n-\n-instruct vxor8B(vecD dst, vecD src1, vecD src2)\n-%{\n-  predicate(n->as_Vector()->length_in_bytes() == 4 ||\n-            n->as_Vector()->length_in_bytes() == 8);\n-  match(Set dst (XorV src1 src2));\n-  ins_cost(INSN_COST);\n-  format %{ \"xor  $dst,$src1,$src2\\t# vector (8B)\" %}\n-  ins_encode %{\n-    __ eor(as_FloatRegister($dst$$reg), __ T8B,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vlogical64);\n-%}\n-\n-instruct vxor16B(vecX dst, vecX src1, vecX src2)\n-%{\n-  predicate(n->as_Vector()->length_in_bytes() == 16);\n-  match(Set dst (XorV src1 src2));\n-  ins_cost(INSN_COST);\n-  format %{ \"xor  $dst,$src1,$src2\\t# vector (16B)\" %}\n-  ins_encode %{\n-    __ eor(as_FloatRegister($dst$$reg), __ T16B,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vlogical128);\n-%}\n-\n-\/\/ ------------------------------ Shift ---------------------------------------\n-instruct vshiftcnt8B(vecD dst, iRegIorL2I cnt) %{\n-  predicate(n->as_Vector()->length_in_bytes() == 4 ||\n-            n->as_Vector()->length_in_bytes() == 8);\n-  match(Set dst (LShiftCntV cnt));\n-  match(Set dst (RShiftCntV cnt));\n-  format %{ \"dup  $dst, $cnt\\t# shift count vector (8B)\" %}\n-  ins_encode %{\n-    __ dup(as_FloatRegister($dst$$reg), __ T8B, as_Register($cnt$$reg));\n-  %}\n-  ins_pipe(vdup_reg_reg64);\n-%}\n-\n-instruct vshiftcnt16B(vecX dst, iRegIorL2I cnt) %{\n-  predicate(n->as_Vector()->length_in_bytes() == 16);\n-  match(Set dst (LShiftCntV cnt));\n-  match(Set dst (RShiftCntV cnt));\n-  format %{ \"dup  $dst, $cnt\\t# shift count vector (16B)\" %}\n-  ins_encode %{\n-    __ dup(as_FloatRegister($dst$$reg), __ T16B, as_Register($cnt$$reg));\n-  %}\n-  ins_pipe(vdup_reg_reg128);\n-%}\n-\n-instruct vsll8B(vecD dst, vecD src, vecD shift) %{\n-  predicate(n->as_Vector()->length() == 4 ||\n-            n->as_Vector()->length() == 8);\n-  match(Set dst (LShiftVB src shift));\n-  ins_cost(INSN_COST);\n-  format %{ \"sshl  $dst,$src,$shift\\t# vector (8B)\" %}\n-  ins_encode %{\n-    __ sshl(as_FloatRegister($dst$$reg), __ T8B,\n-            as_FloatRegister($src$$reg),\n-            as_FloatRegister($shift$$reg));\n-  %}\n-  ins_pipe(vshift64);\n-%}\n-\n-instruct vsll16B(vecX dst, vecX src, vecX shift) %{\n-  predicate(n->as_Vector()->length() == 16);\n-  match(Set dst (LShiftVB src shift));\n-  ins_cost(INSN_COST);\n-  format %{ \"sshl  $dst,$src,$shift\\t# vector (16B)\" %}\n-  ins_encode %{\n-    __ sshl(as_FloatRegister($dst$$reg), __ T16B,\n-            as_FloatRegister($src$$reg),\n-            as_FloatRegister($shift$$reg));\n-  %}\n-  ins_pipe(vshift128);\n-%}\n-\n-\/\/ Right shifts with vector shift count on aarch64 SIMD are implemented\n-\/\/ as left shift by negative shift count.\n-\/\/ There are two cases for vector shift count.\n-\/\/\n-\/\/ Case 1: The vector shift count is from replication.\n-\/\/        |            |\n-\/\/    LoadVector  RShiftCntV\n-\/\/        |       \/\n-\/\/     RShiftVI\n-\/\/ Note: In inner loop, multiple neg instructions are used, which can be\n-\/\/ moved to outer loop and merge into one neg instruction.\n-\/\/\n-\/\/ Case 2: The vector shift count is from loading.\n-\/\/ This case isn't supported by middle-end now. But it's supported by\n-\/\/ panama\/vectorIntrinsics(JEP 338: Vector API).\n-\/\/        |            |\n-\/\/    LoadVector  LoadVector\n-\/\/        |       \/\n-\/\/     RShiftVI\n-\/\/\n-\n-instruct vsra8B(vecD dst, vecD src, vecD shift, vecD tmp) %{\n-  predicate(n->as_Vector()->length() == 4 ||\n-            n->as_Vector()->length() == 8);\n-  match(Set dst (RShiftVB src shift));\n-  ins_cost(INSN_COST);\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"sshl  $dst,$src,$tmp\\t# vector (8B)\" %}\n-  ins_encode %{\n-    __ negr(as_FloatRegister($tmp$$reg), __ T8B,\n-            as_FloatRegister($shift$$reg));\n-    __ sshl(as_FloatRegister($dst$$reg), __ T8B,\n-            as_FloatRegister($src$$reg),\n-            as_FloatRegister($tmp$$reg));\n-  %}\n-  ins_pipe(vshift64);\n-%}\n-\n-instruct vsra16B(vecX dst, vecX src, vecX shift, vecX tmp) %{\n-  predicate(n->as_Vector()->length() == 16);\n-  match(Set dst (RShiftVB src shift));\n-  ins_cost(INSN_COST);\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"sshl  $dst,$src,$tmp\\t# vector (16B)\" %}\n-  ins_encode %{\n-    __ negr(as_FloatRegister($tmp$$reg), __ T16B,\n-            as_FloatRegister($shift$$reg));\n-    __ sshl(as_FloatRegister($dst$$reg), __ T16B,\n-            as_FloatRegister($src$$reg),\n-            as_FloatRegister($tmp$$reg));\n-  %}\n-  ins_pipe(vshift128);\n-%}\n-\n-instruct vsrl8B(vecD dst, vecD src, vecD shift, vecD tmp) %{\n-  predicate(n->as_Vector()->length() == 4 ||\n-            n->as_Vector()->length() == 8);\n-  match(Set dst (URShiftVB src shift));\n-  ins_cost(INSN_COST);\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"ushl  $dst,$src,$tmp\\t# vector (8B)\" %}\n-  ins_encode %{\n-    __ negr(as_FloatRegister($tmp$$reg), __ T8B,\n-            as_FloatRegister($shift$$reg));\n-    __ ushl(as_FloatRegister($dst$$reg), __ T8B,\n-            as_FloatRegister($src$$reg),\n-            as_FloatRegister($tmp$$reg));\n-  %}\n-  ins_pipe(vshift64);\n-%}\n-\n-instruct vsrl16B(vecX dst, vecX src, vecX shift, vecX tmp) %{\n-  predicate(n->as_Vector()->length() == 16);\n-  match(Set dst (URShiftVB src shift));\n-  ins_cost(INSN_COST);\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"ushl  $dst,$src,$tmp\\t# vector (16B)\" %}\n-  ins_encode %{\n-    __ negr(as_FloatRegister($tmp$$reg), __ T16B,\n-            as_FloatRegister($shift$$reg));\n-    __ ushl(as_FloatRegister($dst$$reg), __ T16B,\n-            as_FloatRegister($src$$reg),\n-            as_FloatRegister($tmp$$reg));\n-  %}\n-  ins_pipe(vshift128);\n-%}\n-\n-instruct vsll8B_imm(vecD dst, vecD src, immI shift) %{\n-  predicate(n->as_Vector()->length() == 4 ||\n-            n->as_Vector()->length() == 8);\n-  match(Set dst (LShiftVB src (LShiftCntV shift)));\n-  ins_cost(INSN_COST);\n-  format %{ \"shl    $dst, $src, $shift\\t# vector (8B)\" %}\n-  ins_encode %{\n-    int sh = (int)$shift$$constant;\n-    if (sh >= 8) {\n-      __ eor(as_FloatRegister($dst$$reg), __ T8B,\n-             as_FloatRegister($src$$reg),\n-             as_FloatRegister($src$$reg));\n-    } else {\n-      __ shl(as_FloatRegister($dst$$reg), __ T8B,\n-             as_FloatRegister($src$$reg), sh);\n-    }\n-  %}\n-  ins_pipe(vshift64_imm);\n-%}\n-\n-instruct vsll16B_imm(vecX dst, vecX src, immI shift) %{\n-  predicate(n->as_Vector()->length() == 16);\n-  match(Set dst (LShiftVB src (LShiftCntV shift)));\n-  ins_cost(INSN_COST);\n-  format %{ \"shl    $dst, $src, $shift\\t# vector (16B)\" %}\n-  ins_encode %{\n-    int sh = (int)$shift$$constant;\n-    if (sh >= 8) {\n-      __ eor(as_FloatRegister($dst$$reg), __ T16B,\n-             as_FloatRegister($src$$reg),\n-             as_FloatRegister($src$$reg));\n-    } else {\n-      __ shl(as_FloatRegister($dst$$reg), __ T16B,\n-             as_FloatRegister($src$$reg), sh);\n-    }\n-  %}\n-  ins_pipe(vshift128_imm);\n-%}\n-\n-instruct vsra8B_imm(vecD dst, vecD src, immI shift) %{\n-  predicate(n->as_Vector()->length() == 4 ||\n-            n->as_Vector()->length() == 8);\n-  match(Set dst (RShiftVB src (RShiftCntV shift)));\n-  ins_cost(INSN_COST);\n-  format %{ \"sshr    $dst, $src, $shift\\t# vector (8B)\" %}\n-  ins_encode %{\n-    int sh = (int)$shift$$constant;\n-    if (sh >= 8) sh = 7;\n-    __ sshr(as_FloatRegister($dst$$reg), __ T8B,\n-           as_FloatRegister($src$$reg), sh);\n-  %}\n-  ins_pipe(vshift64_imm);\n-%}\n-\n-instruct vsra16B_imm(vecX dst, vecX src, immI shift) %{\n-  predicate(n->as_Vector()->length() == 16);\n-  match(Set dst (RShiftVB src (RShiftCntV shift)));\n-  ins_cost(INSN_COST);\n-  format %{ \"sshr    $dst, $src, $shift\\t# vector (16B)\" %}\n-  ins_encode %{\n-    int sh = (int)$shift$$constant;\n-    if (sh >= 8) sh = 7;\n-    __ sshr(as_FloatRegister($dst$$reg), __ T16B,\n-           as_FloatRegister($src$$reg), sh);\n-  %}\n-  ins_pipe(vshift128_imm);\n-%}\n-\n-instruct vsrl8B_imm(vecD dst, vecD src, immI shift) %{\n-  predicate(n->as_Vector()->length() == 4 ||\n-            n->as_Vector()->length() == 8);\n-  match(Set dst (URShiftVB src (RShiftCntV shift)));\n-  ins_cost(INSN_COST);\n-  format %{ \"ushr    $dst, $src, $shift\\t# vector (8B)\" %}\n-  ins_encode %{\n-    int sh = (int)$shift$$constant;\n-    if (sh >= 8) {\n-      __ eor(as_FloatRegister($dst$$reg), __ T8B,\n-             as_FloatRegister($src$$reg),\n-             as_FloatRegister($src$$reg));\n-    } else {\n-      __ ushr(as_FloatRegister($dst$$reg), __ T8B,\n-             as_FloatRegister($src$$reg), sh);\n-    }\n-  %}\n-  ins_pipe(vshift64_imm);\n-%}\n-\n-instruct vsrl16B_imm(vecX dst, vecX src, immI shift) %{\n-  predicate(n->as_Vector()->length() == 16);\n-  match(Set dst (URShiftVB src (RShiftCntV shift)));\n-  ins_cost(INSN_COST);\n-  format %{ \"ushr    $dst, $src, $shift\\t# vector (16B)\" %}\n-  ins_encode %{\n-    int sh = (int)$shift$$constant;\n-    if (sh >= 8) {\n-      __ eor(as_FloatRegister($dst$$reg), __ T16B,\n-             as_FloatRegister($src$$reg),\n-             as_FloatRegister($src$$reg));\n-    } else {\n-      __ ushr(as_FloatRegister($dst$$reg), __ T16B,\n-             as_FloatRegister($src$$reg), sh);\n-    }\n-  %}\n-  ins_pipe(vshift128_imm);\n-%}\n-\n-instruct vsll4S(vecD dst, vecD src, vecD shift) %{\n-  predicate(n->as_Vector()->length() == 2 ||\n-            n->as_Vector()->length() == 4);\n-  match(Set dst (LShiftVS src shift));\n-  ins_cost(INSN_COST);\n-  format %{ \"sshl  $dst,$src,$shift\\t# vector (4H)\" %}\n-  ins_encode %{\n-    __ sshl(as_FloatRegister($dst$$reg), __ T4H,\n-            as_FloatRegister($src$$reg),\n-            as_FloatRegister($shift$$reg));\n-  %}\n-  ins_pipe(vshift64);\n-%}\n-\n-instruct vsll8S(vecX dst, vecX src, vecX shift) %{\n-  predicate(n->as_Vector()->length() == 8);\n-  match(Set dst (LShiftVS src shift));\n-  ins_cost(INSN_COST);\n-  format %{ \"sshl  $dst,$src,$shift\\t# vector (8H)\" %}\n-  ins_encode %{\n-    __ sshl(as_FloatRegister($dst$$reg), __ T8H,\n-            as_FloatRegister($src$$reg),\n-            as_FloatRegister($shift$$reg));\n-  %}\n-  ins_pipe(vshift128);\n-%}\n-\n-instruct vsra4S(vecD dst, vecD src, vecD shift, vecD tmp) %{\n-  predicate(n->as_Vector()->length() == 2 ||\n-            n->as_Vector()->length() == 4);\n-  match(Set dst (RShiftVS src shift));\n-  ins_cost(INSN_COST);\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"sshl  $dst,$src,$tmp\\t# vector (4H)\" %}\n-  ins_encode %{\n-    __ negr(as_FloatRegister($tmp$$reg), __ T8B,\n-            as_FloatRegister($shift$$reg));\n-    __ sshl(as_FloatRegister($dst$$reg), __ T4H,\n-            as_FloatRegister($src$$reg),\n-            as_FloatRegister($tmp$$reg));\n-  %}\n-  ins_pipe(vshift64);\n-%}\n-\n-instruct vsra8S(vecX dst, vecX src, vecX shift, vecX tmp) %{\n-  predicate(n->as_Vector()->length() == 8);\n-  match(Set dst (RShiftVS src shift));\n-  ins_cost(INSN_COST);\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"sshl  $dst,$src,$tmp\\t# vector (8H)\" %}\n-  ins_encode %{\n-    __ negr(as_FloatRegister($tmp$$reg), __ T16B,\n-            as_FloatRegister($shift$$reg));\n-    __ sshl(as_FloatRegister($dst$$reg), __ T8H,\n-            as_FloatRegister($src$$reg),\n-            as_FloatRegister($tmp$$reg));\n-  %}\n-  ins_pipe(vshift128);\n-%}\n-\n-instruct vsrl4S(vecD dst, vecD src, vecD shift, vecD tmp) %{\n-  predicate(n->as_Vector()->length() == 2 ||\n-            n->as_Vector()->length() == 4);\n-  match(Set dst (URShiftVS src shift));\n-  ins_cost(INSN_COST);\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"ushl  $dst,$src,$tmp\\t# vector (4H)\" %}\n-  ins_encode %{\n-    __ negr(as_FloatRegister($tmp$$reg), __ T8B,\n-            as_FloatRegister($shift$$reg));\n-    __ ushl(as_FloatRegister($dst$$reg), __ T4H,\n-            as_FloatRegister($src$$reg),\n-            as_FloatRegister($tmp$$reg));\n-  %}\n-  ins_pipe(vshift64);\n-%}\n-\n-instruct vsrl8S(vecX dst, vecX src, vecX shift, vecX tmp) %{\n-  predicate(n->as_Vector()->length() == 8);\n-  match(Set dst (URShiftVS src shift));\n-  ins_cost(INSN_COST);\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"ushl  $dst,$src,$tmp\\t# vector (8H)\" %}\n-  ins_encode %{\n-    __ negr(as_FloatRegister($tmp$$reg), __ T16B,\n-            as_FloatRegister($shift$$reg));\n-    __ ushl(as_FloatRegister($dst$$reg), __ T8H,\n-            as_FloatRegister($src$$reg),\n-            as_FloatRegister($tmp$$reg));\n-  %}\n-  ins_pipe(vshift128);\n-%}\n-\n-instruct vsll4S_imm(vecD dst, vecD src, immI shift) %{\n-  predicate(n->as_Vector()->length() == 2 ||\n-            n->as_Vector()->length() == 4);\n-  match(Set dst (LShiftVS src (LShiftCntV shift)));\n-  ins_cost(INSN_COST);\n-  format %{ \"shl    $dst, $src, $shift\\t# vector (4H)\" %}\n-  ins_encode %{\n-    int sh = (int)$shift$$constant;\n-    if (sh >= 16) {\n-      __ eor(as_FloatRegister($dst$$reg), __ T8B,\n-             as_FloatRegister($src$$reg),\n-             as_FloatRegister($src$$reg));\n-    } else {\n-      __ shl(as_FloatRegister($dst$$reg), __ T4H,\n-             as_FloatRegister($src$$reg), sh);\n-    }\n-  %}\n-  ins_pipe(vshift64_imm);\n-%}\n-\n-instruct vsll8S_imm(vecX dst, vecX src, immI shift) %{\n-  predicate(n->as_Vector()->length() == 8);\n-  match(Set dst (LShiftVS src (LShiftCntV shift)));\n-  ins_cost(INSN_COST);\n-  format %{ \"shl    $dst, $src, $shift\\t# vector (8H)\" %}\n-  ins_encode %{\n-    int sh = (int)$shift$$constant;\n-    if (sh >= 16) {\n-      __ eor(as_FloatRegister($dst$$reg), __ T16B,\n-             as_FloatRegister($src$$reg),\n-             as_FloatRegister($src$$reg));\n-    } else {\n-      __ shl(as_FloatRegister($dst$$reg), __ T8H,\n-             as_FloatRegister($src$$reg), sh);\n-    }\n-  %}\n-  ins_pipe(vshift128_imm);\n-%}\n-\n-instruct vsra4S_imm(vecD dst, vecD src, immI shift) %{\n-  predicate(n->as_Vector()->length() == 2 ||\n-            n->as_Vector()->length() == 4);\n-  match(Set dst (RShiftVS src (RShiftCntV shift)));\n-  ins_cost(INSN_COST);\n-  format %{ \"sshr    $dst, $src, $shift\\t# vector (4H)\" %}\n-  ins_encode %{\n-    int sh = (int)$shift$$constant;\n-    if (sh >= 16) sh = 15;\n-    __ sshr(as_FloatRegister($dst$$reg), __ T4H,\n-           as_FloatRegister($src$$reg), sh);\n-  %}\n-  ins_pipe(vshift64_imm);\n-%}\n-\n-instruct vsra8S_imm(vecX dst, vecX src, immI shift) %{\n-  predicate(n->as_Vector()->length() == 8);\n-  match(Set dst (RShiftVS src (RShiftCntV shift)));\n-  ins_cost(INSN_COST);\n-  format %{ \"sshr    $dst, $src, $shift\\t# vector (8H)\" %}\n-  ins_encode %{\n-    int sh = (int)$shift$$constant;\n-    if (sh >= 16) sh = 15;\n-    __ sshr(as_FloatRegister($dst$$reg), __ T8H,\n-           as_FloatRegister($src$$reg), sh);\n-  %}\n-  ins_pipe(vshift128_imm);\n-%}\n-\n-instruct vsrl4S_imm(vecD dst, vecD src, immI shift) %{\n-  predicate(n->as_Vector()->length() == 2 ||\n-            n->as_Vector()->length() == 4);\n-  match(Set dst (URShiftVS src (RShiftCntV shift)));\n-  ins_cost(INSN_COST);\n-  format %{ \"ushr    $dst, $src, $shift\\t# vector (4H)\" %}\n-  ins_encode %{\n-    int sh = (int)$shift$$constant;\n-    if (sh >= 16) {\n-      __ eor(as_FloatRegister($dst$$reg), __ T8B,\n-             as_FloatRegister($src$$reg),\n-             as_FloatRegister($src$$reg));\n-    } else {\n-      __ ushr(as_FloatRegister($dst$$reg), __ T4H,\n-             as_FloatRegister($src$$reg), sh);\n-    }\n-  %}\n-  ins_pipe(vshift64_imm);\n-%}\n-\n-instruct vsrl8S_imm(vecX dst, vecX src, immI shift) %{\n-  predicate(n->as_Vector()->length() == 8);\n-  match(Set dst (URShiftVS src (RShiftCntV shift)));\n-  ins_cost(INSN_COST);\n-  format %{ \"ushr    $dst, $src, $shift\\t# vector (8H)\" %}\n-  ins_encode %{\n-    int sh = (int)$shift$$constant;\n-    if (sh >= 16) {\n-      __ eor(as_FloatRegister($dst$$reg), __ T16B,\n-             as_FloatRegister($src$$reg),\n-             as_FloatRegister($src$$reg));\n-    } else {\n-      __ ushr(as_FloatRegister($dst$$reg), __ T8H,\n-             as_FloatRegister($src$$reg), sh);\n-    }\n-  %}\n-  ins_pipe(vshift128_imm);\n-%}\n-\n-instruct vsll2I(vecD dst, vecD src, vecD shift) %{\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (LShiftVI src shift));\n-  ins_cost(INSN_COST);\n-  format %{ \"sshl  $dst,$src,$shift\\t# vector (2S)\" %}\n-  ins_encode %{\n-    __ sshl(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src$$reg),\n-            as_FloatRegister($shift$$reg));\n-  %}\n-  ins_pipe(vshift64);\n-%}\n-\n-instruct vsll4I(vecX dst, vecX src, vecX shift) %{\n-  predicate(n->as_Vector()->length() == 4);\n-  match(Set dst (LShiftVI src shift));\n-  ins_cost(INSN_COST);\n-  format %{ \"sshl  $dst,$src,$shift\\t# vector (4S)\" %}\n-  ins_encode %{\n-    __ sshl(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src$$reg),\n-            as_FloatRegister($shift$$reg));\n-  %}\n-  ins_pipe(vshift128);\n-%}\n-\n-instruct vsra2I(vecD dst, vecD src, vecD shift, vecD tmp) %{\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (RShiftVI src shift));\n-  ins_cost(INSN_COST);\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"sshl  $dst,$src,$tmp\\t# vector (2S)\" %}\n-  ins_encode %{\n-    __ negr(as_FloatRegister($tmp$$reg), __ T8B,\n-            as_FloatRegister($shift$$reg));\n-    __ sshl(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src$$reg),\n-            as_FloatRegister($tmp$$reg));\n-  %}\n-  ins_pipe(vshift64);\n-%}\n-\n-instruct vsra4I(vecX dst, vecX src, vecX shift, vecX tmp) %{\n-  predicate(n->as_Vector()->length() == 4);\n-  match(Set dst (RShiftVI src shift));\n-  ins_cost(INSN_COST);\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"sshl  $dst,$src,$tmp\\t# vector (4S)\" %}\n-  ins_encode %{\n-    __ negr(as_FloatRegister($tmp$$reg), __ T16B,\n-            as_FloatRegister($shift$$reg));\n-    __ sshl(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src$$reg),\n-            as_FloatRegister($tmp$$reg));\n-  %}\n-  ins_pipe(vshift128);\n-%}\n-\n-instruct vsrl2I(vecD dst, vecD src, vecD shift, vecD tmp) %{\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (URShiftVI src shift));\n-  ins_cost(INSN_COST);\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"ushl  $dst,$src,$tmp\\t# vector (2S)\" %}\n-  ins_encode %{\n-    __ negr(as_FloatRegister($tmp$$reg), __ T8B,\n-            as_FloatRegister($shift$$reg));\n-    __ ushl(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src$$reg),\n-            as_FloatRegister($tmp$$reg));\n-  %}\n-  ins_pipe(vshift64);\n-%}\n-\n-instruct vsrl4I(vecX dst, vecX src, vecX shift, vecX tmp) %{\n-  predicate(n->as_Vector()->length() == 4);\n-  match(Set dst (URShiftVI src shift));\n-  ins_cost(INSN_COST);\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"ushl  $dst,$src,$tmp\\t# vector (4S)\" %}\n-  ins_encode %{\n-    __ negr(as_FloatRegister($tmp$$reg), __ T16B,\n-            as_FloatRegister($shift$$reg));\n-    __ ushl(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src$$reg),\n-            as_FloatRegister($tmp$$reg));\n-  %}\n-  ins_pipe(vshift128);\n-%}\n-\n-instruct vsll2I_imm(vecD dst, vecD src, immI shift) %{\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (LShiftVI src (LShiftCntV shift)));\n-  ins_cost(INSN_COST);\n-  format %{ \"shl    $dst, $src, $shift\\t# vector (2S)\" %}\n-  ins_encode %{\n-    __ shl(as_FloatRegister($dst$$reg), __ T2S,\n-           as_FloatRegister($src$$reg),\n-           (int)$shift$$constant);\n-  %}\n-  ins_pipe(vshift64_imm);\n-%}\n-\n-instruct vsll4I_imm(vecX dst, vecX src, immI shift) %{\n-  predicate(n->as_Vector()->length() == 4);\n-  match(Set dst (LShiftVI src (LShiftCntV shift)));\n-  ins_cost(INSN_COST);\n-  format %{ \"shl    $dst, $src, $shift\\t# vector (4S)\" %}\n-  ins_encode %{\n-    __ shl(as_FloatRegister($dst$$reg), __ T4S,\n-           as_FloatRegister($src$$reg),\n-           (int)$shift$$constant);\n-  %}\n-  ins_pipe(vshift128_imm);\n-%}\n-\n-instruct vsra2I_imm(vecD dst, vecD src, immI shift) %{\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (RShiftVI src (RShiftCntV shift)));\n-  ins_cost(INSN_COST);\n-  format %{ \"sshr    $dst, $src, $shift\\t# vector (2S)\" %}\n-  ins_encode %{\n-    __ sshr(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src$$reg),\n-            (int)$shift$$constant);\n-  %}\n-  ins_pipe(vshift64_imm);\n-%}\n-\n-instruct vsra4I_imm(vecX dst, vecX src, immI shift) %{\n-  predicate(n->as_Vector()->length() == 4);\n-  match(Set dst (RShiftVI src (RShiftCntV shift)));\n-  ins_cost(INSN_COST);\n-  format %{ \"sshr    $dst, $src, $shift\\t# vector (4S)\" %}\n-  ins_encode %{\n-    __ sshr(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src$$reg),\n-            (int)$shift$$constant);\n-  %}\n-  ins_pipe(vshift128_imm);\n-%}\n-\n-instruct vsrl2I_imm(vecD dst, vecD src, immI shift) %{\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (URShiftVI src (RShiftCntV shift)));\n-  ins_cost(INSN_COST);\n-  format %{ \"ushr    $dst, $src, $shift\\t# vector (2S)\" %}\n-  ins_encode %{\n-    __ ushr(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src$$reg),\n-            (int)$shift$$constant);\n-  %}\n-  ins_pipe(vshift64_imm);\n-%}\n-\n-instruct vsrl4I_imm(vecX dst, vecX src, immI shift) %{\n-  predicate(n->as_Vector()->length() == 4);\n-  match(Set dst (URShiftVI src (RShiftCntV shift)));\n-  ins_cost(INSN_COST);\n-  format %{ \"ushr    $dst, $src, $shift\\t# vector (4S)\" %}\n-  ins_encode %{\n-    __ ushr(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src$$reg),\n-            (int)$shift$$constant);\n-  %}\n-  ins_pipe(vshift128_imm);\n-%}\n-\n-instruct vsll2L(vecX dst, vecX src, vecX shift) %{\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (LShiftVL src shift));\n-  ins_cost(INSN_COST);\n-  format %{ \"sshl  $dst,$src,$shift\\t# vector (2D)\" %}\n-  ins_encode %{\n-    __ sshl(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src$$reg),\n-            as_FloatRegister($shift$$reg));\n-  %}\n-  ins_pipe(vshift128);\n-%}\n-\n-instruct vsra2L(vecX dst, vecX src, vecX shift, vecX tmp) %{\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (RShiftVL src shift));\n-  ins_cost(INSN_COST);\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"sshl  $dst,$src,$tmp\\t# vector (2D)\" %}\n-  ins_encode %{\n-    __ negr(as_FloatRegister($tmp$$reg), __ T16B,\n-            as_FloatRegister($shift$$reg));\n-    __ sshl(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src$$reg),\n-            as_FloatRegister($tmp$$reg));\n-  %}\n-  ins_pipe(vshift128);\n-%}\n-\n-instruct vsrl2L(vecX dst, vecX src, vecX shift, vecX tmp) %{\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (URShiftVL src shift));\n-  ins_cost(INSN_COST);\n-  effect(TEMP tmp);\n-  format %{ \"negr  $tmp,$shift\\t\"\n-            \"ushl  $dst,$src,$tmp\\t# vector (2D)\" %}\n-  ins_encode %{\n-    __ negr(as_FloatRegister($tmp$$reg), __ T16B,\n-            as_FloatRegister($shift$$reg));\n-    __ ushl(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src$$reg),\n-            as_FloatRegister($tmp$$reg));\n-  %}\n-  ins_pipe(vshift128);\n-%}\n-\n-instruct vsll2L_imm(vecX dst, vecX src, immI shift) %{\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (LShiftVL src (LShiftCntV shift)));\n-  ins_cost(INSN_COST);\n-  format %{ \"shl    $dst, $src, $shift\\t# vector (2D)\" %}\n-  ins_encode %{\n-    __ shl(as_FloatRegister($dst$$reg), __ T2D,\n-           as_FloatRegister($src$$reg),\n-           (int)$shift$$constant);\n-  %}\n-  ins_pipe(vshift128_imm);\n-%}\n-\n-instruct vsra2L_imm(vecX dst, vecX src, immI shift) %{\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (RShiftVL src (RShiftCntV shift)));\n-  ins_cost(INSN_COST);\n-  format %{ \"sshr    $dst, $src, $shift\\t# vector (2D)\" %}\n-  ins_encode %{\n-    __ sshr(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src$$reg),\n-            (int)$shift$$constant);\n-  %}\n-  ins_pipe(vshift128_imm);\n-%}\n-\n-instruct vsrl2L_imm(vecX dst, vecX src, immI shift) %{\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (URShiftVL src (RShiftCntV shift)));\n-  ins_cost(INSN_COST);\n-  format %{ \"ushr    $dst, $src, $shift\\t# vector (2D)\" %}\n-  ins_encode %{\n-    __ ushr(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src$$reg),\n-            (int)$shift$$constant);\n-  %}\n-  ins_pipe(vshift128_imm);\n-%}\n-\n-instruct vsraa8B_imm(vecD dst, vecD src, immI shift) %{\n-  predicate(n->as_Vector()->length() == 8);\n-  match(Set dst (AddVB dst (RShiftVB src (RShiftCntV shift))));\n-  ins_cost(INSN_COST);\n-  format %{ \"ssra    $dst, $src, $shift\\t# vector (8B)\" %}\n-  ins_encode %{\n-    int sh = (int)$shift$$constant;\n-    if (sh >= 8) sh = 7;\n-    __ ssra(as_FloatRegister($dst$$reg), __ T8B,\n-           as_FloatRegister($src$$reg), sh);\n-  %}\n-  ins_pipe(vshift64_imm);\n-%}\n-\n-instruct vsraa16B_imm(vecX dst, vecX src, immI shift) %{\n-  predicate(n->as_Vector()->length() == 16);\n-  match(Set dst (AddVB dst (RShiftVB src (RShiftCntV shift))));\n-  ins_cost(INSN_COST);\n-  format %{ \"ssra    $dst, $src, $shift\\t# vector (16B)\" %}\n-  ins_encode %{\n-    int sh = (int)$shift$$constant;\n-    if (sh >= 8) sh = 7;\n-    __ ssra(as_FloatRegister($dst$$reg), __ T16B,\n-           as_FloatRegister($src$$reg), sh);\n-  %}\n-  ins_pipe(vshift128_imm);\n-%}\n-\n-instruct vsraa4S_imm(vecD dst, vecD src, immI shift) %{\n-  predicate(n->as_Vector()->length() == 4);\n-  match(Set dst (AddVS dst (RShiftVS src (RShiftCntV shift))));\n-  ins_cost(INSN_COST);\n-  format %{ \"ssra    $dst, $src, $shift\\t# vector (4H)\" %}\n-  ins_encode %{\n-    int sh = (int)$shift$$constant;\n-    if (sh >= 16) sh = 15;\n-    __ ssra(as_FloatRegister($dst$$reg), __ T4H,\n-           as_FloatRegister($src$$reg), sh);\n-  %}\n-  ins_pipe(vshift64_imm);\n-%}\n-\n-instruct vsraa8S_imm(vecX dst, vecX src, immI shift) %{\n-  predicate(n->as_Vector()->length() == 8);\n-  match(Set dst (AddVS dst (RShiftVS src (RShiftCntV shift))));\n-  ins_cost(INSN_COST);\n-  format %{ \"ssra    $dst, $src, $shift\\t# vector (8H)\" %}\n-  ins_encode %{\n-    int sh = (int)$shift$$constant;\n-    if (sh >= 16) sh = 15;\n-    __ ssra(as_FloatRegister($dst$$reg), __ T8H,\n-           as_FloatRegister($src$$reg), sh);\n-  %}\n-  ins_pipe(vshift128_imm);\n-%}\n-\n-instruct vsraa2I_imm(vecD dst, vecD src, immI shift) %{\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (AddVI dst (RShiftVI src (RShiftCntV shift))));\n-  ins_cost(INSN_COST);\n-  format %{ \"ssra    $dst, $src, $shift\\t# vector (2S)\" %}\n-  ins_encode %{\n-    __ ssra(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src$$reg),\n-            (int)$shift$$constant);\n-  %}\n-  ins_pipe(vshift64_imm);\n-%}\n-\n-instruct vsraa4I_imm(vecX dst, vecX src, immI shift) %{\n-  predicate(n->as_Vector()->length() == 4);\n-  match(Set dst (AddVI dst (RShiftVI src (RShiftCntV shift))));\n-  ins_cost(INSN_COST);\n-  format %{ \"ssra    $dst, $src, $shift\\t# vector (4S)\" %}\n-  ins_encode %{\n-    __ ssra(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src$$reg),\n-            (int)$shift$$constant);\n-  %}\n-  ins_pipe(vshift128_imm);\n-%}\n-\n-instruct vsraa2L_imm(vecX dst, vecX src, immI shift) %{\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (AddVL dst (RShiftVL src (RShiftCntV shift))));\n-  ins_cost(INSN_COST);\n-  format %{ \"ssra    $dst, $src, $shift\\t# vector (2D)\" %}\n-  ins_encode %{\n-    __ ssra(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src$$reg),\n-            (int)$shift$$constant);\n-  %}\n-  ins_pipe(vshift128_imm);\n-%}\n-\n-instruct vsrla8B_imm(vecD dst, vecD src, immI shift) %{\n-  predicate(n->as_Vector()->length() == 8);\n-  match(Set dst (AddVB dst (URShiftVB src (RShiftCntV shift))));\n-  ins_cost(INSN_COST);\n-  format %{ \"usra    $dst, $src, $shift\\t# vector (8B)\" %}\n-  ins_encode %{\n-    int sh = (int)$shift$$constant;\n-    if (sh < 8) {\n-      __ usra(as_FloatRegister($dst$$reg), __ T8B,\n-             as_FloatRegister($src$$reg), sh);\n-    }\n-  %}\n-  ins_pipe(vshift64_imm);\n-%}\n-\n-instruct vsrla16B_imm(vecX dst, vecX src, immI shift) %{\n-  predicate(n->as_Vector()->length() == 16);\n-  match(Set dst (AddVB dst (URShiftVB src (RShiftCntV shift))));\n-  ins_cost(INSN_COST);\n-  format %{ \"usra    $dst, $src, $shift\\t# vector (16B)\" %}\n-  ins_encode %{\n-    int sh = (int)$shift$$constant;\n-    if (sh < 8) {\n-      __ usra(as_FloatRegister($dst$$reg), __ T16B,\n-             as_FloatRegister($src$$reg), sh);\n-    }\n-  %}\n-  ins_pipe(vshift128_imm);\n-%}\n-\n-instruct vsrla4S_imm(vecD dst, vecD src, immI shift) %{\n-  predicate(n->as_Vector()->length() == 4);\n-  match(Set dst (AddVS dst (URShiftVS src (RShiftCntV shift))));\n-  ins_cost(INSN_COST);\n-  format %{ \"usra    $dst, $src, $shift\\t# vector (4H)\" %}\n-  ins_encode %{\n-    int sh = (int)$shift$$constant;\n-    if (sh < 16) {\n-      __ usra(as_FloatRegister($dst$$reg), __ T4H,\n-             as_FloatRegister($src$$reg), sh);\n-    }\n-  %}\n-  ins_pipe(vshift64_imm);\n-%}\n-\n-instruct vsrla8S_imm(vecX dst, vecX src, immI shift) %{\n-  predicate(n->as_Vector()->length() == 8);\n-  match(Set dst (AddVS dst (URShiftVS src (RShiftCntV shift))));\n-  ins_cost(INSN_COST);\n-  format %{ \"usra    $dst, $src, $shift\\t# vector (8H)\" %}\n-  ins_encode %{\n-    int sh = (int)$shift$$constant;\n-    if (sh < 16) {\n-      __ usra(as_FloatRegister($dst$$reg), __ T8H,\n-             as_FloatRegister($src$$reg), sh);\n-    }\n-  %}\n-  ins_pipe(vshift128_imm);\n-%}\n-\n-instruct vsrla2I_imm(vecD dst, vecD src, immI shift) %{\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (AddVI dst (URShiftVI src (RShiftCntV shift))));\n-  ins_cost(INSN_COST);\n-  format %{ \"usra    $dst, $src, $shift\\t# vector (2S)\" %}\n-  ins_encode %{\n-    __ usra(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src$$reg),\n-            (int)$shift$$constant);\n-  %}\n-  ins_pipe(vshift64_imm);\n-%}\n-\n-instruct vsrla4I_imm(vecX dst, vecX src, immI shift) %{\n-  predicate(n->as_Vector()->length() == 4);\n-  match(Set dst (AddVI dst (URShiftVI src (RShiftCntV shift))));\n-  ins_cost(INSN_COST);\n-  format %{ \"usra    $dst, $src, $shift\\t# vector (4S)\" %}\n-  ins_encode %{\n-    __ usra(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src$$reg),\n-            (int)$shift$$constant);\n-  %}\n-  ins_pipe(vshift128_imm);\n-%}\n-\n-instruct vsrla2L_imm(vecX dst, vecX src, immI shift) %{\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (AddVL dst (URShiftVL src (RShiftCntV shift))));\n-  ins_cost(INSN_COST);\n-  format %{ \"usra    $dst, $src, $shift\\t# vector (2D)\" %}\n-  ins_encode %{\n-    __ usra(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src$$reg),\n-            (int)$shift$$constant);\n-  %}\n-  ins_pipe(vshift128_imm);\n-%}\n-\n-instruct vmax2F(vecD dst, vecD src1, vecD src2)\n-%{\n-  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n-  match(Set dst (MaxV src1 src2));\n-  ins_cost(INSN_COST);\n-  format %{ \"fmax  $dst,$src1,$src2\\t# vector (2F)\" %}\n-  ins_encode %{\n-    __ fmax(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop_fp64);\n-%}\n-\n-instruct vmax4F(vecX dst, vecX src1, vecX src2)\n-%{\n-  predicate(n->as_Vector()->length() == 4 && n->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n-  match(Set dst (MaxV src1 src2));\n-  ins_cost(INSN_COST);\n-  format %{ \"fmax  $dst,$src1,$src2\\t# vector (4S)\" %}\n-  ins_encode %{\n-    __ fmax(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop_fp128);\n-%}\n-\n-instruct vmax2D(vecX dst, vecX src1, vecX src2)\n-%{\n-  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_DOUBLE);\n-  match(Set dst (MaxV src1 src2));\n-  ins_cost(INSN_COST);\n-  format %{ \"fmax  $dst,$src1,$src2\\t# vector (2D)\" %}\n-  ins_encode %{\n-    __ fmax(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop_fp128);\n-%}\n-\n-instruct vmin2F(vecD dst, vecD src1, vecD src2)\n-%{\n-  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n-  match(Set dst (MinV src1 src2));\n-  ins_cost(INSN_COST);\n-  format %{ \"fmin  $dst,$src1,$src2\\t# vector (2F)\" %}\n-  ins_encode %{\n-    __ fmin(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop_fp64);\n-%}\n-\n-instruct vmin4F(vecX dst, vecX src1, vecX src2)\n-%{\n-  predicate(n->as_Vector()->length() == 4 && n->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n-  match(Set dst (MinV src1 src2));\n-  ins_cost(INSN_COST);\n-  format %{ \"fmin  $dst,$src1,$src2\\t# vector (4S)\" %}\n-  ins_encode %{\n-    __ fmin(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop_fp128);\n-%}\n-\n-instruct vmin2D(vecX dst, vecX src1, vecX src2)\n-%{\n-  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_DOUBLE);\n-  match(Set dst (MinV src1 src2));\n-  ins_cost(INSN_COST);\n-  format %{ \"fmin  $dst,$src1,$src2\\t# vector (2D)\" %}\n-  ins_encode %{\n-    __ fmin(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src1$$reg),\n-            as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vdop_fp128);\n-%}\n-\n-instruct vround2D_reg(vecX dst, vecX src, immI rmode) %{\n-  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_DOUBLE);\n-  match(Set dst (RoundDoubleModeV src rmode));\n-  format %{ \"frint  $dst, $src, $rmode\" %}\n-  ins_encode %{\n-    switch ($rmode$$constant) {\n-      case RoundDoubleModeNode::rmode_rint:\n-        __ frintn(as_FloatRegister($dst$$reg), __ T2D,\n-                  as_FloatRegister($src$$reg));\n-        break;\n-      case RoundDoubleModeNode::rmode_floor:\n-        __ frintm(as_FloatRegister($dst$$reg), __ T2D,\n-                  as_FloatRegister($src$$reg));\n-        break;\n-      case RoundDoubleModeNode::rmode_ceil:\n-        __ frintp(as_FloatRegister($dst$$reg), __ T2D,\n-                  as_FloatRegister($src$$reg));\n-        break;\n-    }\n-  %}\n-  ins_pipe(vdop_fp128);\n-%}\n-\n-instruct vpopcount4I(vecX dst, vecX src) %{\n-  predicate(UsePopCountInstruction && n->as_Vector()->length() == 4);\n-  match(Set dst (PopCountVI src));\n-  format %{\n-    \"cnt     $dst, $src\\t# vector (16B)\\n\\t\"\n-    \"uaddlp  $dst, $dst\\t# vector (16B)\\n\\t\"\n-    \"uaddlp  $dst, $dst\\t# vector (8H)\"\n-  %}\n-  ins_encode %{\n-    __ cnt(as_FloatRegister($dst$$reg), __ T16B,\n-           as_FloatRegister($src$$reg));\n-    __ uaddlp(as_FloatRegister($dst$$reg), __ T16B,\n-              as_FloatRegister($dst$$reg));\n-    __ uaddlp(as_FloatRegister($dst$$reg), __ T8H,\n-              as_FloatRegister($dst$$reg));\n-  %}\n-  ins_pipe(pipe_class_default);\n-%}\n-\n-instruct vpopcount2I(vecD dst, vecD src) %{\n-  predicate(UsePopCountInstruction && n->as_Vector()->length() == 2);\n-  match(Set dst (PopCountVI src));\n-  format %{\n-    \"cnt     $dst, $src\\t# vector (8B)\\n\\t\"\n-    \"uaddlp  $dst, $dst\\t# vector (8B)\\n\\t\"\n-    \"uaddlp  $dst, $dst\\t# vector (4H)\"\n-  %}\n-  ins_encode %{\n-    __ cnt(as_FloatRegister($dst$$reg), __ T8B,\n-           as_FloatRegister($src$$reg));\n-    __ uaddlp(as_FloatRegister($dst$$reg), __ T8B,\n-              as_FloatRegister($dst$$reg));\n-    __ uaddlp(as_FloatRegister($dst$$reg), __ T4H,\n-              as_FloatRegister($dst$$reg));\n-  %}\n-  ins_pipe(pipe_class_default);\n-%}\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":0,"deletions":2424,"binary":false,"changes":2424,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-\/\/ Load vector (16 bits)\n+\/\/ Load Vector (16 bits)\n@@ -3705,0 +3705,2421 @@\n+\n+\/\/ Load Vector (32 bits)\n+instruct loadV4(vecD dst, vmem4 mem)\n+%{\n+  predicate(n->as_LoadVector()->memory_size() == 4);\n+  match(Set dst (LoadVector mem));\n+  ins_cost(4 * INSN_COST);\n+  format %{ \"ldrs   $dst,$mem\\t# vector (32 bits)\" %}\n+  ins_encode( aarch64_enc_ldrvS(dst, mem) );\n+  ins_pipe(vload_reg_mem64);\n+%}\n+\n+\/\/ Load Vector (64 bits)\n+instruct loadV8(vecD dst, vmem8 mem)\n+%{\n+  predicate(n->as_LoadVector()->memory_size() == 8);\n+  match(Set dst (LoadVector mem));\n+  ins_cost(4 * INSN_COST);\n+  format %{ \"ldrd   $dst,$mem\\t# vector (64 bits)\" %}\n+  ins_encode( aarch64_enc_ldrvD(dst, mem) );\n+  ins_pipe(vload_reg_mem64);\n+%}\n+\n+\/\/ Load Vector (128 bits)\n+instruct loadV16(vecX dst, vmem16 mem)\n+%{\n+  predicate(UseSVE == 0 && n->as_LoadVector()->memory_size() == 16);\n+  match(Set dst (LoadVector mem));\n+  ins_cost(4 * INSN_COST);\n+  format %{ \"ldrq   $dst,$mem\\t# vector (128 bits)\" %}\n+  ins_encode( aarch64_enc_ldrvQ(dst, mem) );\n+  ins_pipe(vload_reg_mem128);\n+%}\n+\n+\/\/ Store Vector (32 bits)\n+instruct storeV4(vecD src, vmem4 mem)\n+%{\n+  predicate(n->as_StoreVector()->memory_size() == 4);\n+  match(Set mem (StoreVector mem src));\n+  ins_cost(4 * INSN_COST);\n+  format %{ \"strs   $mem,$src\\t# vector (32 bits)\" %}\n+  ins_encode( aarch64_enc_strvS(src, mem) );\n+  ins_pipe(vstore_reg_mem64);\n+%}\n+\n+\/\/ Store Vector (64 bits)\n+instruct storeV8(vecD src, vmem8 mem)\n+%{\n+  predicate(n->as_StoreVector()->memory_size() == 8);\n+  match(Set mem (StoreVector mem src));\n+  ins_cost(4 * INSN_COST);\n+  format %{ \"strd   $mem,$src\\t# vector (64 bits)\" %}\n+  ins_encode( aarch64_enc_strvD(src, mem) );\n+  ins_pipe(vstore_reg_mem64);\n+%}\n+\n+\/\/ Store Vector (128 bits)\n+instruct storeV16(vecX src, vmem16 mem)\n+%{\n+  predicate(n->as_StoreVector()->memory_size() == 16);\n+  match(Set mem (StoreVector mem src));\n+  ins_cost(4 * INSN_COST);\n+  format %{ \"strq   $mem,$src\\t# vector (128 bits)\" %}\n+  ins_encode( aarch64_enc_strvQ(src, mem) );\n+  ins_pipe(vstore_reg_mem128);\n+%}\n+\n+instruct replicate8B(vecD dst, iRegIorL2I src)\n+%{\n+  predicate(n->as_Vector()->length() == 4 ||\n+            n->as_Vector()->length() == 8);\n+  match(Set dst (ReplicateB src));\n+  ins_cost(INSN_COST);\n+  format %{ \"dup  $dst, $src\\t# vector (8B)\" %}\n+  ins_encode %{\n+    __ dup(as_FloatRegister($dst$$reg), __ T8B, as_Register($src$$reg));\n+  %}\n+  ins_pipe(vdup_reg_reg64);\n+%}\n+\n+instruct replicate16B(vecX dst, iRegIorL2I src)\n+%{\n+  predicate(UseSVE == 0 && n->as_Vector()->length() == 16);\n+  match(Set dst (ReplicateB src));\n+  ins_cost(INSN_COST);\n+  format %{ \"dup  $dst, $src\\t# vector (16B)\" %}\n+  ins_encode %{\n+    __ dup(as_FloatRegister($dst$$reg), __ T16B, as_Register($src$$reg));\n+  %}\n+  ins_pipe(vdup_reg_reg128);\n+%}\n+\n+instruct replicate8B_imm(vecD dst, immI con)\n+%{\n+  predicate(n->as_Vector()->length() == 4 ||\n+            n->as_Vector()->length() == 8);\n+  match(Set dst (ReplicateB con));\n+  ins_cost(INSN_COST);\n+  format %{ \"movi  $dst, $con\\t# vector (8B)\" %}\n+  ins_encode %{\n+    __ mov(as_FloatRegister($dst$$reg), __ T8B, $con$$constant & 0xff);\n+  %}\n+  ins_pipe(vmovi_reg_imm64);\n+%}\n+\n+instruct replicate16B_imm(vecX dst, immI con)\n+%{\n+  predicate(UseSVE == 0 && n->as_Vector()->length() == 16);\n+  match(Set dst (ReplicateB con));\n+  ins_cost(INSN_COST);\n+  format %{ \"movi  $dst, $con\\t# vector (16B)\" %}\n+  ins_encode %{\n+    __ mov(as_FloatRegister($dst$$reg), __ T16B, $con$$constant & 0xff);\n+  %}\n+  ins_pipe(vmovi_reg_imm128);\n+%}\n+\n+instruct replicate4S(vecD dst, iRegIorL2I src)\n+%{\n+  predicate(n->as_Vector()->length() == 2 ||\n+            n->as_Vector()->length() == 4);\n+  match(Set dst (ReplicateS src));\n+  ins_cost(INSN_COST);\n+  format %{ \"dup  $dst, $src\\t# vector (4S)\" %}\n+  ins_encode %{\n+    __ dup(as_FloatRegister($dst$$reg), __ T4H, as_Register($src$$reg));\n+  %}\n+  ins_pipe(vdup_reg_reg64);\n+%}\n+\n+instruct replicate8S(vecX dst, iRegIorL2I src)\n+%{\n+  predicate(UseSVE == 0 && n->as_Vector()->length() == 8);\n+  match(Set dst (ReplicateS src));\n+  ins_cost(INSN_COST);\n+  format %{ \"dup  $dst, $src\\t# vector (8S)\" %}\n+  ins_encode %{\n+    __ dup(as_FloatRegister($dst$$reg), __ T8H, as_Register($src$$reg));\n+  %}\n+  ins_pipe(vdup_reg_reg128);\n+%}\n+\n+instruct replicate4S_imm(vecD dst, immI con)\n+%{\n+  predicate(n->as_Vector()->length() == 2 ||\n+            n->as_Vector()->length() == 4);\n+  match(Set dst (ReplicateS con));\n+  ins_cost(INSN_COST);\n+  format %{ \"movi  $dst, $con\\t# vector (4H)\" %}\n+  ins_encode %{\n+    __ mov(as_FloatRegister($dst$$reg), __ T4H, $con$$constant & 0xffff);\n+  %}\n+  ins_pipe(vmovi_reg_imm64);\n+%}\n+\n+instruct replicate8S_imm(vecX dst, immI con)\n+%{\n+  predicate(UseSVE == 0 && n->as_Vector()->length() == 8);\n+  match(Set dst (ReplicateS con));\n+  ins_cost(INSN_COST);\n+  format %{ \"movi  $dst, $con\\t# vector (8H)\" %}\n+  ins_encode %{\n+    __ mov(as_FloatRegister($dst$$reg), __ T8H, $con$$constant & 0xffff);\n+  %}\n+  ins_pipe(vmovi_reg_imm128);\n+%}\n+\n+instruct replicate2I(vecD dst, iRegIorL2I src)\n+%{\n+  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (ReplicateI src));\n+  ins_cost(INSN_COST);\n+  format %{ \"dup  $dst, $src\\t# vector (2I)\" %}\n+  ins_encode %{\n+    __ dup(as_FloatRegister($dst$$reg), __ T2S, as_Register($src$$reg));\n+  %}\n+  ins_pipe(vdup_reg_reg64);\n+%}\n+\n+instruct replicate4I(vecX dst, iRegIorL2I src)\n+%{\n+  predicate(UseSVE == 0 && n->as_Vector()->length() == 4);\n+  match(Set dst (ReplicateI src));\n+  ins_cost(INSN_COST);\n+  format %{ \"dup  $dst, $src\\t# vector (4I)\" %}\n+  ins_encode %{\n+    __ dup(as_FloatRegister($dst$$reg), __ T4S, as_Register($src$$reg));\n+  %}\n+  ins_pipe(vdup_reg_reg128);\n+%}\n+\n+instruct replicate2I_imm(vecD dst, immI con)\n+%{\n+  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (ReplicateI con));\n+  ins_cost(INSN_COST);\n+  format %{ \"movi  $dst, $con\\t# vector (2I)\" %}\n+  ins_encode %{\n+    __ mov(as_FloatRegister($dst$$reg), __ T2S, $con$$constant);\n+  %}\n+  ins_pipe(vmovi_reg_imm64);\n+%}\n+\n+instruct replicate4I_imm(vecX dst, immI con)\n+%{\n+  predicate(UseSVE == 0 && n->as_Vector()->length() == 4);\n+  match(Set dst (ReplicateI con));\n+  ins_cost(INSN_COST);\n+  format %{ \"movi  $dst, $con\\t# vector (4I)\" %}\n+  ins_encode %{\n+    __ mov(as_FloatRegister($dst$$reg), __ T4S, $con$$constant);\n+  %}\n+  ins_pipe(vmovi_reg_imm128);\n+%}\n+\n+instruct replicate2L(vecX dst, iRegL src)\n+%{\n+  predicate(UseSVE == 0 && n->as_Vector()->length() == 2);\n+  match(Set dst (ReplicateL src));\n+  ins_cost(INSN_COST);\n+  format %{ \"dup  $dst, $src\\t# vector (2L)\" %}\n+  ins_encode %{\n+    __ dup(as_FloatRegister($dst$$reg), __ T2D, as_Register($src$$reg));\n+  %}\n+  ins_pipe(vdup_reg_reg128);\n+%}\n+\n+instruct replicate2L_zero(vecX dst, immI0 zero)\n+%{\n+  predicate(UseSVE == 0 && n->as_Vector()->length() == 2);\n+  match(Set dst (ReplicateI zero));\n+  ins_cost(INSN_COST);\n+  format %{ \"movi  $dst, $zero\\t# vector (4I)\" %}\n+  ins_encode %{\n+    __ eor(as_FloatRegister($dst$$reg), __ T16B,\n+           as_FloatRegister($dst$$reg),\n+           as_FloatRegister($dst$$reg));\n+  %}\n+  ins_pipe(vmovi_reg_imm128);\n+%}\n+\n+instruct replicate2F(vecD dst, vRegF src)\n+%{\n+  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (ReplicateF src));\n+  ins_cost(INSN_COST);\n+  format %{ \"dup  $dst, $src\\t# vector (2F)\" %}\n+  ins_encode %{\n+    __ dup(as_FloatRegister($dst$$reg), __ T2S,\n+           as_FloatRegister($src$$reg));\n+  %}\n+  ins_pipe(vdup_reg_freg64);\n+%}\n+\n+instruct replicate4F(vecX dst, vRegF src)\n+%{\n+  predicate(UseSVE == 0 && n->as_Vector()->length() == 4);\n+  match(Set dst (ReplicateF src));\n+  ins_cost(INSN_COST);\n+  format %{ \"dup  $dst, $src\\t# vector (4F)\" %}\n+  ins_encode %{\n+    __ dup(as_FloatRegister($dst$$reg), __ T4S,\n+           as_FloatRegister($src$$reg));\n+  %}\n+  ins_pipe(vdup_reg_freg128);\n+%}\n+\n+instruct replicate2D(vecX dst, vRegD src)\n+%{\n+  predicate(UseSVE == 0 && n->as_Vector()->length() == 2);\n+  match(Set dst (ReplicateD src));\n+  ins_cost(INSN_COST);\n+  format %{ \"dup  $dst, $src\\t# vector (2D)\" %}\n+  ins_encode %{\n+    __ dup(as_FloatRegister($dst$$reg), __ T2D,\n+           as_FloatRegister($src$$reg));\n+  %}\n+  ins_pipe(vdup_reg_dreg128);\n+%}\n+\n+\/\/ ====================REDUCTION ARITHMETIC====================================\n+\n+instruct reduce_add2I(iRegINoSp dst, iRegIorL2I isrc, vecD vsrc, iRegINoSp tmp, iRegINoSp tmp2)\n+%{\n+  predicate(n->in(2)->bottom_type()->is_vect()->element_basic_type() == T_INT);\n+  match(Set dst (AddReductionVI isrc vsrc));\n+  ins_cost(INSN_COST);\n+  effect(TEMP tmp, TEMP tmp2);\n+  format %{ \"umov  $tmp, $vsrc, S, 0\\n\\t\"\n+            \"umov  $tmp2, $vsrc, S, 1\\n\\t\"\n+            \"addw  $tmp, $isrc, $tmp\\n\\t\"\n+            \"addw  $dst, $tmp, $tmp2\\t# add reduction2I\"\n+  %}\n+  ins_encode %{\n+    __ umov($tmp$$Register, as_FloatRegister($vsrc$$reg), __ S, 0);\n+    __ umov($tmp2$$Register, as_FloatRegister($vsrc$$reg), __ S, 1);\n+    __ addw($tmp$$Register, $isrc$$Register, $tmp$$Register);\n+    __ addw($dst$$Register, $tmp$$Register, $tmp2$$Register);\n+  %}\n+  ins_pipe(pipe_class_default);\n+%}\n+\n+instruct reduce_add4I(iRegINoSp dst, iRegIorL2I isrc, vecX vsrc, vecX vtmp, iRegINoSp itmp)\n+%{\n+  predicate(n->in(2)->bottom_type()->is_vect()->element_basic_type() == T_INT);\n+  match(Set dst (AddReductionVI isrc vsrc));\n+  ins_cost(INSN_COST);\n+  effect(TEMP vtmp, TEMP itmp);\n+  format %{ \"addv  $vtmp, T4S, $vsrc\\n\\t\"\n+            \"umov  $itmp, $vtmp, S, 0\\n\\t\"\n+            \"addw  $dst, $itmp, $isrc\\t# add reduction4I\"\n+  %}\n+  ins_encode %{\n+    __ addv(as_FloatRegister($vtmp$$reg), __ T4S,\n+            as_FloatRegister($vsrc$$reg));\n+    __ umov($itmp$$Register, as_FloatRegister($vtmp$$reg), __ S, 0);\n+    __ addw($dst$$Register, $itmp$$Register, $isrc$$Register);\n+  %}\n+  ins_pipe(pipe_class_default);\n+%}\n+\n+instruct reduce_mul2I(iRegINoSp dst, iRegIorL2I isrc, vecD vsrc, iRegINoSp tmp)\n+%{\n+  predicate(n->in(2)->bottom_type()->is_vect()->element_basic_type() == T_INT);\n+  match(Set dst (MulReductionVI isrc vsrc));\n+  ins_cost(INSN_COST);\n+  effect(TEMP tmp, TEMP dst);\n+  format %{ \"umov  $tmp, $vsrc, S, 0\\n\\t\"\n+            \"mul   $dst, $tmp, $isrc\\n\\t\"\n+            \"umov  $tmp, $vsrc, S, 1\\n\\t\"\n+            \"mul   $dst, $tmp, $dst\\t# mul reduction2I\"\n+  %}\n+  ins_encode %{\n+    __ umov($tmp$$Register, as_FloatRegister($vsrc$$reg), __ S, 0);\n+    __ mul($dst$$Register, $tmp$$Register, $isrc$$Register);\n+    __ umov($tmp$$Register, as_FloatRegister($vsrc$$reg), __ S, 1);\n+    __ mul($dst$$Register, $tmp$$Register, $dst$$Register);\n+  %}\n+  ins_pipe(pipe_class_default);\n+%}\n+\n+instruct reduce_mul4I(iRegINoSp dst, iRegIorL2I isrc, vecX vsrc, vecX vtmp, iRegINoSp itmp)\n+%{\n+  predicate(n->in(2)->bottom_type()->is_vect()->element_basic_type() == T_INT);\n+  match(Set dst (MulReductionVI isrc vsrc));\n+  ins_cost(INSN_COST);\n+  effect(TEMP vtmp, TEMP itmp, TEMP dst);\n+  format %{ \"ins   $vtmp, D, $vsrc, 0, 1\\n\\t\"\n+            \"mulv  $vtmp, T2S, $vtmp, $vsrc\\n\\t\"\n+            \"umov  $itmp, $vtmp, S, 0\\n\\t\"\n+            \"mul   $dst, $itmp, $isrc\\n\\t\"\n+            \"umov  $itmp, $vtmp, S, 1\\n\\t\"\n+            \"mul   $dst, $itmp, $dst\\t# mul reduction4I\"\n+  %}\n+  ins_encode %{\n+    __ ins(as_FloatRegister($vtmp$$reg), __ D,\n+           as_FloatRegister($vsrc$$reg), 0, 1);\n+    __ mulv(as_FloatRegister($vtmp$$reg), __ T2S,\n+            as_FloatRegister($vtmp$$reg), as_FloatRegister($vsrc$$reg));\n+    __ umov($itmp$$Register, as_FloatRegister($vtmp$$reg), __ S, 0);\n+    __ mul($dst$$Register, $itmp$$Register, $isrc$$Register);\n+    __ umov($itmp$$Register, as_FloatRegister($vtmp$$reg), __ S, 1);\n+    __ mul($dst$$Register, $itmp$$Register, $dst$$Register);\n+  %}\n+  ins_pipe(pipe_class_default);\n+%}\n+\n+instruct reduce_add2F(vRegF dst, vRegF fsrc, vecD vsrc, vecD tmp)\n+%{\n+  match(Set dst (AddReductionVF fsrc vsrc));\n+  ins_cost(INSN_COST);\n+  effect(TEMP tmp, TEMP dst);\n+  format %{ \"fadds $dst, $fsrc, $vsrc\\n\\t\"\n+            \"ins   $tmp, S, $vsrc, 0, 1\\n\\t\"\n+            \"fadds $dst, $dst, $tmp\\t# add reduction2F\"\n+  %}\n+  ins_encode %{\n+    __ fadds(as_FloatRegister($dst$$reg),\n+             as_FloatRegister($fsrc$$reg), as_FloatRegister($vsrc$$reg));\n+    __ ins(as_FloatRegister($tmp$$reg), __ S,\n+           as_FloatRegister($vsrc$$reg), 0, 1);\n+    __ fadds(as_FloatRegister($dst$$reg),\n+             as_FloatRegister($dst$$reg), as_FloatRegister($tmp$$reg));\n+  %}\n+  ins_pipe(pipe_class_default);\n+%}\n+\n+instruct reduce_add4F(vRegF dst, vRegF fsrc, vecX vsrc, vecX tmp)\n+%{\n+  match(Set dst (AddReductionVF fsrc vsrc));\n+  ins_cost(INSN_COST);\n+  effect(TEMP tmp, TEMP dst);\n+  format %{ \"fadds $dst, $fsrc, $vsrc\\n\\t\"\n+            \"ins   $tmp, S, $vsrc, 0, 1\\n\\t\"\n+            \"fadds $dst, $dst, $tmp\\n\\t\"\n+            \"ins   $tmp, S, $vsrc, 0, 2\\n\\t\"\n+            \"fadds $dst, $dst, $tmp\\n\\t\"\n+            \"ins   $tmp, S, $vsrc, 0, 3\\n\\t\"\n+            \"fadds $dst, $dst, $tmp\\t# add reduction4F\"\n+  %}\n+  ins_encode %{\n+    __ fadds(as_FloatRegister($dst$$reg),\n+             as_FloatRegister($fsrc$$reg), as_FloatRegister($vsrc$$reg));\n+    __ ins(as_FloatRegister($tmp$$reg), __ S,\n+           as_FloatRegister($vsrc$$reg), 0, 1);\n+    __ fadds(as_FloatRegister($dst$$reg),\n+             as_FloatRegister($dst$$reg), as_FloatRegister($tmp$$reg));\n+    __ ins(as_FloatRegister($tmp$$reg), __ S,\n+           as_FloatRegister($vsrc$$reg), 0, 2);\n+    __ fadds(as_FloatRegister($dst$$reg),\n+             as_FloatRegister($dst$$reg), as_FloatRegister($tmp$$reg));\n+    __ ins(as_FloatRegister($tmp$$reg), __ S,\n+           as_FloatRegister($vsrc$$reg), 0, 3);\n+    __ fadds(as_FloatRegister($dst$$reg),\n+             as_FloatRegister($dst$$reg), as_FloatRegister($tmp$$reg));\n+  %}\n+  ins_pipe(pipe_class_default);\n+%}\n+\n+instruct reduce_mul2F(vRegF dst, vRegF fsrc, vecD vsrc, vecD tmp)\n+%{\n+  match(Set dst (MulReductionVF fsrc vsrc));\n+  ins_cost(INSN_COST);\n+  effect(TEMP tmp, TEMP dst);\n+  format %{ \"fmuls $dst, $fsrc, $vsrc\\n\\t\"\n+            \"ins   $tmp, S, $vsrc, 0, 1\\n\\t\"\n+            \"fmuls $dst, $dst, $tmp\\t# mul reduction2F\"\n+  %}\n+  ins_encode %{\n+    __ fmuls(as_FloatRegister($dst$$reg),\n+             as_FloatRegister($fsrc$$reg), as_FloatRegister($vsrc$$reg));\n+    __ ins(as_FloatRegister($tmp$$reg), __ S,\n+           as_FloatRegister($vsrc$$reg), 0, 1);\n+    __ fmuls(as_FloatRegister($dst$$reg),\n+             as_FloatRegister($dst$$reg), as_FloatRegister($tmp$$reg));\n+  %}\n+  ins_pipe(pipe_class_default);\n+%}\n+\n+instruct reduce_mul4F(vRegF dst, vRegF fsrc, vecX vsrc, vecX tmp)\n+%{\n+  match(Set dst (MulReductionVF fsrc vsrc));\n+  ins_cost(INSN_COST);\n+  effect(TEMP tmp, TEMP dst);\n+  format %{ \"fmuls $dst, $fsrc, $vsrc\\n\\t\"\n+            \"ins   $tmp, S, $vsrc, 0, 1\\n\\t\"\n+            \"fmuls $dst, $dst, $tmp\\n\\t\"\n+            \"ins   $tmp, S, $vsrc, 0, 2\\n\\t\"\n+            \"fmuls $dst, $dst, $tmp\\n\\t\"\n+            \"ins   $tmp, S, $vsrc, 0, 3\\n\\t\"\n+            \"fmuls $dst, $dst, $tmp\\t# mul reduction4F\"\n+  %}\n+  ins_encode %{\n+    __ fmuls(as_FloatRegister($dst$$reg),\n+             as_FloatRegister($fsrc$$reg), as_FloatRegister($vsrc$$reg));\n+    __ ins(as_FloatRegister($tmp$$reg), __ S,\n+           as_FloatRegister($vsrc$$reg), 0, 1);\n+    __ fmuls(as_FloatRegister($dst$$reg),\n+             as_FloatRegister($dst$$reg), as_FloatRegister($tmp$$reg));\n+    __ ins(as_FloatRegister($tmp$$reg), __ S,\n+           as_FloatRegister($vsrc$$reg), 0, 2);\n+    __ fmuls(as_FloatRegister($dst$$reg),\n+             as_FloatRegister($dst$$reg), as_FloatRegister($tmp$$reg));\n+    __ ins(as_FloatRegister($tmp$$reg), __ S,\n+           as_FloatRegister($vsrc$$reg), 0, 3);\n+    __ fmuls(as_FloatRegister($dst$$reg),\n+             as_FloatRegister($dst$$reg), as_FloatRegister($tmp$$reg));\n+  %}\n+  ins_pipe(pipe_class_default);\n+%}\n+\n+instruct reduce_add2D(vRegD dst, vRegD dsrc, vecX vsrc, vecX tmp)\n+%{\n+  match(Set dst (AddReductionVD dsrc vsrc));\n+  ins_cost(INSN_COST);\n+  effect(TEMP tmp, TEMP dst);\n+  format %{ \"faddd $dst, $dsrc, $vsrc\\n\\t\"\n+            \"ins   $tmp, D, $vsrc, 0, 1\\n\\t\"\n+            \"faddd $dst, $dst, $tmp\\t# add reduction2D\"\n+  %}\n+  ins_encode %{\n+    __ faddd(as_FloatRegister($dst$$reg),\n+             as_FloatRegister($dsrc$$reg), as_FloatRegister($vsrc$$reg));\n+    __ ins(as_FloatRegister($tmp$$reg), __ D,\n+           as_FloatRegister($vsrc$$reg), 0, 1);\n+    __ faddd(as_FloatRegister($dst$$reg),\n+             as_FloatRegister($dst$$reg), as_FloatRegister($tmp$$reg));\n+  %}\n+  ins_pipe(pipe_class_default);\n+%}\n+\n+instruct reduce_mul2D(vRegD dst, vRegD dsrc, vecX vsrc, vecX tmp)\n+%{\n+  match(Set dst (MulReductionVD dsrc vsrc));\n+  ins_cost(INSN_COST);\n+  effect(TEMP tmp, TEMP dst);\n+  format %{ \"fmuld $dst, $dsrc, $vsrc\\n\\t\"\n+            \"ins   $tmp, D, $vsrc, 0, 1\\n\\t\"\n+            \"fmuld $dst, $dst, $tmp\\t# mul reduction2D\"\n+  %}\n+  ins_encode %{\n+    __ fmuld(as_FloatRegister($dst$$reg),\n+             as_FloatRegister($dsrc$$reg), as_FloatRegister($vsrc$$reg));\n+    __ ins(as_FloatRegister($tmp$$reg), __ D,\n+           as_FloatRegister($vsrc$$reg), 0, 1);\n+    __ fmuld(as_FloatRegister($dst$$reg),\n+             as_FloatRegister($dst$$reg), as_FloatRegister($tmp$$reg));\n+  %}\n+  ins_pipe(pipe_class_default);\n+%}\n+\n+\/\/ ====================VECTOR ARITHMETIC=======================================\n+\n+\/\/ --------------------------------- ADD --------------------------------------\n+\n+instruct vadd8B(vecD dst, vecD src1, vecD src2)\n+%{\n+  predicate(n->as_Vector()->length() == 4 ||\n+            n->as_Vector()->length() == 8);\n+  match(Set dst (AddVB src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"addv  $dst,$src1,$src2\\t# vector (8B)\" %}\n+  ins_encode %{\n+    __ addv(as_FloatRegister($dst$$reg), __ T8B,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vdop64);\n+%}\n+\n+instruct vadd16B(vecX dst, vecX src1, vecX src2)\n+%{\n+  predicate(n->as_Vector()->length() == 16);\n+  match(Set dst (AddVB src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"addv  $dst,$src1,$src2\\t# vector (16B)\" %}\n+  ins_encode %{\n+    __ addv(as_FloatRegister($dst$$reg), __ T16B,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vdop128);\n+%}\n+\n+instruct vadd4S(vecD dst, vecD src1, vecD src2)\n+%{\n+  predicate(n->as_Vector()->length() == 2 ||\n+            n->as_Vector()->length() == 4);\n+  match(Set dst (AddVS src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"addv  $dst,$src1,$src2\\t# vector (4H)\" %}\n+  ins_encode %{\n+    __ addv(as_FloatRegister($dst$$reg), __ T4H,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vdop64);\n+%}\n+\n+instruct vadd8S(vecX dst, vecX src1, vecX src2)\n+%{\n+  predicate(n->as_Vector()->length() == 8);\n+  match(Set dst (AddVS src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"addv  $dst,$src1,$src2\\t# vector (8H)\" %}\n+  ins_encode %{\n+    __ addv(as_FloatRegister($dst$$reg), __ T8H,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vdop128);\n+%}\n+\n+instruct vadd2I(vecD dst, vecD src1, vecD src2)\n+%{\n+  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (AddVI src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"addv  $dst,$src1,$src2\\t# vector (2S)\" %}\n+  ins_encode %{\n+    __ addv(as_FloatRegister($dst$$reg), __ T2S,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vdop64);\n+%}\n+\n+instruct vadd4I(vecX dst, vecX src1, vecX src2)\n+%{\n+  predicate(n->as_Vector()->length() == 4);\n+  match(Set dst (AddVI src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"addv  $dst,$src1,$src2\\t# vector (4S)\" %}\n+  ins_encode %{\n+    __ addv(as_FloatRegister($dst$$reg), __ T4S,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vdop128);\n+%}\n+\n+instruct vadd2L(vecX dst, vecX src1, vecX src2)\n+%{\n+  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (AddVL src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"addv  $dst,$src1,$src2\\t# vector (2L)\" %}\n+  ins_encode %{\n+    __ addv(as_FloatRegister($dst$$reg), __ T2D,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vdop128);\n+%}\n+\n+instruct vadd2F(vecD dst, vecD src1, vecD src2)\n+%{\n+  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (AddVF src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"fadd  $dst,$src1,$src2\\t# vector (2S)\" %}\n+  ins_encode %{\n+    __ fadd(as_FloatRegister($dst$$reg), __ T2S,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vdop_fp64);\n+%}\n+\n+instruct vadd4F(vecX dst, vecX src1, vecX src2)\n+%{\n+  predicate(n->as_Vector()->length() == 4);\n+  match(Set dst (AddVF src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"fadd  $dst,$src1,$src2\\t# vector (4S)\" %}\n+  ins_encode %{\n+    __ fadd(as_FloatRegister($dst$$reg), __ T4S,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vdop_fp128);\n+%}\n+\n+instruct vadd2D(vecX dst, vecX src1, vecX src2)\n+%{\n+  match(Set dst (AddVD src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"fadd  $dst,$src1,$src2\\t# vector (2D)\" %}\n+  ins_encode %{\n+    __ fadd(as_FloatRegister($dst$$reg), __ T2D,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vdop_fp128);\n+%}\n+\n+\/\/ --------------------------------- SUB --------------------------------------\n+\n+instruct vsub8B(vecD dst, vecD src1, vecD src2)\n+%{\n+  predicate(n->as_Vector()->length() == 4 ||\n+            n->as_Vector()->length() == 8);\n+  match(Set dst (SubVB src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"subv  $dst,$src1,$src2\\t# vector (8B)\" %}\n+  ins_encode %{\n+    __ subv(as_FloatRegister($dst$$reg), __ T8B,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vdop64);\n+%}\n+\n+instruct vsub16B(vecX dst, vecX src1, vecX src2)\n+%{\n+  predicate(n->as_Vector()->length() == 16);\n+  match(Set dst (SubVB src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"subv  $dst,$src1,$src2\\t# vector (16B)\" %}\n+  ins_encode %{\n+    __ subv(as_FloatRegister($dst$$reg), __ T16B,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vdop128);\n+%}\n+\n+instruct vsub4S(vecD dst, vecD src1, vecD src2)\n+%{\n+  predicate(n->as_Vector()->length() == 2 ||\n+            n->as_Vector()->length() == 4);\n+  match(Set dst (SubVS src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"subv  $dst,$src1,$src2\\t# vector (4H)\" %}\n+  ins_encode %{\n+    __ subv(as_FloatRegister($dst$$reg), __ T4H,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vdop64);\n+%}\n+\n+instruct vsub8S(vecX dst, vecX src1, vecX src2)\n+%{\n+  predicate(n->as_Vector()->length() == 8);\n+  match(Set dst (SubVS src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"subv  $dst,$src1,$src2\\t# vector (8H)\" %}\n+  ins_encode %{\n+    __ subv(as_FloatRegister($dst$$reg), __ T8H,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vdop128);\n+%}\n+\n+instruct vsub2I(vecD dst, vecD src1, vecD src2)\n+%{\n+  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (SubVI src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"subv  $dst,$src1,$src2\\t# vector (2S)\" %}\n+  ins_encode %{\n+    __ subv(as_FloatRegister($dst$$reg), __ T2S,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vdop64);\n+%}\n+\n+instruct vsub4I(vecX dst, vecX src1, vecX src2)\n+%{\n+  predicate(n->as_Vector()->length() == 4);\n+  match(Set dst (SubVI src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"subv  $dst,$src1,$src2\\t# vector (4S)\" %}\n+  ins_encode %{\n+    __ subv(as_FloatRegister($dst$$reg), __ T4S,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vdop128);\n+%}\n+\n+instruct vsub2L(vecX dst, vecX src1, vecX src2)\n+%{\n+  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (SubVL src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"subv  $dst,$src1,$src2\\t# vector (2L)\" %}\n+  ins_encode %{\n+    __ subv(as_FloatRegister($dst$$reg), __ T2D,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vdop128);\n+%}\n+\n+instruct vsub2F(vecD dst, vecD src1, vecD src2)\n+%{\n+  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (SubVF src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"fsub  $dst,$src1,$src2\\t# vector (2S)\" %}\n+  ins_encode %{\n+    __ fsub(as_FloatRegister($dst$$reg), __ T2S,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vdop_fp64);\n+%}\n+\n+instruct vsub4F(vecX dst, vecX src1, vecX src2)\n+%{\n+  predicate(n->as_Vector()->length() == 4);\n+  match(Set dst (SubVF src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"fsub  $dst,$src1,$src2\\t# vector (4S)\" %}\n+  ins_encode %{\n+    __ fsub(as_FloatRegister($dst$$reg), __ T4S,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vdop_fp128);\n+%}\n+\n+instruct vsub2D(vecX dst, vecX src1, vecX src2)\n+%{\n+  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (SubVD src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"fsub  $dst,$src1,$src2\\t# vector (2D)\" %}\n+  ins_encode %{\n+    __ fsub(as_FloatRegister($dst$$reg), __ T2D,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vdop_fp128);\n+%}\n+\n+\/\/ --------------------------------- MUL --------------------------------------\n+\n+instruct vmul8B(vecD dst, vecD src1, vecD src2)\n+%{\n+  predicate(n->as_Vector()->length() == 4 ||\n+            n->as_Vector()->length() == 8);\n+  match(Set dst (MulVB src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"mulv  $dst,$src1,$src2\\t# vector (8B)\" %}\n+  ins_encode %{\n+    __ mulv(as_FloatRegister($dst$$reg), __ T8B,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vmul64);\n+%}\n+\n+instruct vmul16B(vecX dst, vecX src1, vecX src2)\n+%{\n+  predicate(n->as_Vector()->length() == 16);\n+  match(Set dst (MulVB src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"mulv  $dst,$src1,$src2\\t# vector (16B)\" %}\n+  ins_encode %{\n+    __ mulv(as_FloatRegister($dst$$reg), __ T16B,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vmul128);\n+%}\n+\n+instruct vmul4S(vecD dst, vecD src1, vecD src2)\n+%{\n+  predicate(n->as_Vector()->length() == 2 ||\n+            n->as_Vector()->length() == 4);\n+  match(Set dst (MulVS src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"mulv  $dst,$src1,$src2\\t# vector (4H)\" %}\n+  ins_encode %{\n+    __ mulv(as_FloatRegister($dst$$reg), __ T4H,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vmul64);\n+%}\n+\n+instruct vmul8S(vecX dst, vecX src1, vecX src2)\n+%{\n+  predicate(n->as_Vector()->length() == 8);\n+  match(Set dst (MulVS src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"mulv  $dst,$src1,$src2\\t# vector (8H)\" %}\n+  ins_encode %{\n+    __ mulv(as_FloatRegister($dst$$reg), __ T8H,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vmul128);\n+%}\n+\n+instruct vmul2I(vecD dst, vecD src1, vecD src2)\n+%{\n+  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (MulVI src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"mulv  $dst,$src1,$src2\\t# vector (2S)\" %}\n+  ins_encode %{\n+    __ mulv(as_FloatRegister($dst$$reg), __ T2S,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vmul64);\n+%}\n+\n+instruct vmul4I(vecX dst, vecX src1, vecX src2)\n+%{\n+  predicate(n->as_Vector()->length() == 4);\n+  match(Set dst (MulVI src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"mulv  $dst,$src1,$src2\\t# vector (4S)\" %}\n+  ins_encode %{\n+    __ mulv(as_FloatRegister($dst$$reg), __ T4S,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vmul128);\n+%}\n+\n+instruct vmul2F(vecD dst, vecD src1, vecD src2)\n+%{\n+  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (MulVF src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"fmul  $dst,$src1,$src2\\t# vector (2S)\" %}\n+  ins_encode %{\n+    __ fmul(as_FloatRegister($dst$$reg), __ T2S,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vmuldiv_fp64);\n+%}\n+\n+instruct vmul4F(vecX dst, vecX src1, vecX src2)\n+%{\n+  predicate(n->as_Vector()->length() == 4);\n+  match(Set dst (MulVF src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"fmul  $dst,$src1,$src2\\t# vector (4S)\" %}\n+  ins_encode %{\n+    __ fmul(as_FloatRegister($dst$$reg), __ T4S,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vmuldiv_fp128);\n+%}\n+\n+instruct vmul2D(vecX dst, vecX src1, vecX src2)\n+%{\n+  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (MulVD src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"fmul  $dst,$src1,$src2\\t# vector (2D)\" %}\n+  ins_encode %{\n+    __ fmul(as_FloatRegister($dst$$reg), __ T2D,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vmuldiv_fp128);\n+%}\n+\n+\/\/ --------------------------------- MLA --------------------------------------\n+\n+instruct vmla4S(vecD dst, vecD src1, vecD src2)\n+%{\n+  predicate(n->as_Vector()->length() == 2 ||\n+            n->as_Vector()->length() == 4);\n+  match(Set dst (AddVS dst (MulVS src1 src2)));\n+  ins_cost(INSN_COST);\n+  format %{ \"mlav  $dst,$src1,$src2\\t# vector (4H)\" %}\n+  ins_encode %{\n+    __ mlav(as_FloatRegister($dst$$reg), __ T4H,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vmla64);\n+%}\n+\n+instruct vmla8S(vecX dst, vecX src1, vecX src2)\n+%{\n+  predicate(n->as_Vector()->length() == 8);\n+  match(Set dst (AddVS dst (MulVS src1 src2)));\n+  ins_cost(INSN_COST);\n+  format %{ \"mlav  $dst,$src1,$src2\\t# vector (8H)\" %}\n+  ins_encode %{\n+    __ mlav(as_FloatRegister($dst$$reg), __ T8H,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vmla128);\n+%}\n+\n+instruct vmla2I(vecD dst, vecD src1, vecD src2)\n+%{\n+  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (AddVI dst (MulVI src1 src2)));\n+  ins_cost(INSN_COST);\n+  format %{ \"mlav  $dst,$src1,$src2\\t# vector (2S)\" %}\n+  ins_encode %{\n+    __ mlav(as_FloatRegister($dst$$reg), __ T2S,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vmla64);\n+%}\n+\n+instruct vmla4I(vecX dst, vecX src1, vecX src2)\n+%{\n+  predicate(n->as_Vector()->length() == 4);\n+  match(Set dst (AddVI dst (MulVI src1 src2)));\n+  ins_cost(INSN_COST);\n+  format %{ \"mlav  $dst,$src1,$src2\\t# vector (4S)\" %}\n+  ins_encode %{\n+    __ mlav(as_FloatRegister($dst$$reg), __ T4S,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vmla128);\n+%}\n+\n+\/\/ dst + src1 * src2\n+instruct vmla2F(vecD dst, vecD src1, vecD src2)\n+%{\n+  predicate(UseFMA && n->as_Vector()->length() == 2);\n+  match(Set dst (FmaVF  dst (Binary src1 src2)));\n+  ins_cost(INSN_COST);\n+  format %{ \"fmla  $dst,$src1,$src2\\t# vector (2S)\" %}\n+  ins_encode %{\n+    __ fmla(as_FloatRegister($dst$$reg), __ T2S,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vmuldiv_fp64);\n+%}\n+\n+\/\/ dst + src1 * src2\n+instruct vmla4F(vecX dst, vecX src1, vecX src2)\n+%{\n+  predicate(UseFMA && n->as_Vector()->length() == 4);\n+  match(Set dst (FmaVF  dst (Binary src1 src2)));\n+  ins_cost(INSN_COST);\n+  format %{ \"fmla  $dst,$src1,$src2\\t# vector (4S)\" %}\n+  ins_encode %{\n+    __ fmla(as_FloatRegister($dst$$reg), __ T4S,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vmuldiv_fp128);\n+%}\n+\n+\/\/ dst + src1 * src2\n+instruct vmla2D(vecX dst, vecX src1, vecX src2)\n+%{\n+  predicate(UseFMA && n->as_Vector()->length() == 2);\n+  match(Set dst (FmaVD  dst (Binary src1 src2)));\n+  ins_cost(INSN_COST);\n+  format %{ \"fmla  $dst,$src1,$src2\\t# vector (2D)\" %}\n+  ins_encode %{\n+    __ fmla(as_FloatRegister($dst$$reg), __ T2D,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vmuldiv_fp128);\n+%}\n+\n+\/\/ --------------------------------- MLS --------------------------------------\n+\n+instruct vmls4S(vecD dst, vecD src1, vecD src2) %{\n+  predicate(n->as_Vector()->length() == 2 ||\n+            n->as_Vector()->length() == 4);\n+  match(Set dst (SubVS dst (MulVS src1 src2)));\n+  ins_cost(INSN_COST);\n+  format %{ \"mlsv  $dst,$src1,$src2\\t# vector (4H)\" %}\n+  ins_encode %{\n+    __ mlsv(as_FloatRegister($dst$$reg), __ T4H,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vmla64);\n+%}\n+\n+instruct vmls8S(vecX dst, vecX src1, vecX src2) %{\n+  predicate(n->as_Vector()->length() == 8);\n+  match(Set dst (SubVS dst (MulVS src1 src2)));\n+  ins_cost(INSN_COST);\n+  format %{ \"mlsv  $dst,$src1,$src2\\t# vector (8H)\" %}\n+  ins_encode %{\n+    __ mlsv(as_FloatRegister($dst$$reg), __ T8H,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vmla128);\n+%}\n+\n+instruct vmls2I(vecD dst, vecD src1, vecD src2) %{\n+  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (SubVI dst (MulVI src1 src2)));\n+  ins_cost(INSN_COST);\n+  format %{ \"mlsv  $dst,$src1,$src2\\t# vector (2S)\" %}\n+  ins_encode %{\n+    __ mlsv(as_FloatRegister($dst$$reg), __ T2S,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vmla64);\n+%}\n+\n+instruct vmls4I(vecX dst, vecX src1, vecX src2) %{\n+  predicate(n->as_Vector()->length() == 4);\n+  match(Set dst (SubVI dst (MulVI src1 src2)));\n+  ins_cost(INSN_COST);\n+  format %{ \"mlsv  $dst,$src1,$src2\\t# vector (4S)\" %}\n+  ins_encode %{\n+    __ mlsv(as_FloatRegister($dst$$reg), __ T4S,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vmla128);\n+%}\n+\n+\/\/ dst - src1 * src2\n+instruct vmls2F(vecD dst, vecD src1, vecD src2) %{\n+  predicate(UseFMA && n->as_Vector()->length() == 2);\n+  match(Set dst (FmaVF  dst (Binary (NegVF src1) src2)));\n+  match(Set dst (FmaVF  dst (Binary src1 (NegVF src2))));\n+  ins_cost(INSN_COST);\n+  format %{ \"fmls  $dst,$src1,$src2\\t# vector (2S)\" %}\n+  ins_encode %{\n+    __ fmls(as_FloatRegister($dst$$reg), __ T2S,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vmuldiv_fp64);\n+%}\n+\n+\/\/ dst - src1 * src2\n+instruct vmls4F(vecX dst, vecX src1, vecX src2) %{\n+  predicate(UseFMA && n->as_Vector()->length() == 4);\n+  match(Set dst (FmaVF  dst (Binary (NegVF src1) src2)));\n+  match(Set dst (FmaVF  dst (Binary src1 (NegVF src2))));\n+  ins_cost(INSN_COST);\n+  format %{ \"fmls  $dst,$src1,$src2\\t# vector (4S)\" %}\n+  ins_encode %{\n+    __ fmls(as_FloatRegister($dst$$reg), __ T4S,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vmuldiv_fp128);\n+%}\n+\n+\/\/ dst - src1 * src2\n+instruct vmls2D(vecX dst, vecX src1, vecX src2) %{\n+  predicate(UseFMA && n->as_Vector()->length() == 2);\n+  match(Set dst (FmaVD  dst (Binary (NegVD src1) src2)));\n+  match(Set dst (FmaVD  dst (Binary src1 (NegVD src2))));\n+  ins_cost(INSN_COST);\n+  format %{ \"fmls  $dst,$src1,$src2\\t# vector (2D)\" %}\n+  ins_encode %{\n+    __ fmls(as_FloatRegister($dst$$reg), __ T2D,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vmuldiv_fp128);\n+%}\n+\n+\/\/ --------------- Vector Multiply-Add Shorts into Integer --------------------\n+\n+instruct vmuladdS2I(vecX dst, vecX src1, vecX src2, vecX tmp) %{\n+  predicate(n->in(1)->bottom_type()->is_vect()->element_basic_type() == T_SHORT);\n+  match(Set dst (MulAddVS2VI src1 src2));\n+  ins_cost(INSN_COST);\n+  effect(TEMP_DEF dst, TEMP tmp);\n+  format %{ \"smullv  $tmp, $src1, $src2\\t# vector (4H)\\n\\t\"\n+            \"smullv  $dst, $src1, $src2\\t# vector (8H)\\n\\t\"\n+            \"addpv   $dst, $tmp, $dst\\t# vector (4S)\\n\\t\" %}\n+  ins_encode %{\n+    __ smullv(as_FloatRegister($tmp$$reg), __ T4H,\n+              as_FloatRegister($src1$$reg),\n+              as_FloatRegister($src2$$reg));\n+    __ smullv(as_FloatRegister($dst$$reg), __ T8H,\n+              as_FloatRegister($src1$$reg),\n+              as_FloatRegister($src2$$reg));\n+    __ addpv(as_FloatRegister($dst$$reg), __ T4S,\n+             as_FloatRegister($tmp$$reg),\n+             as_FloatRegister($dst$$reg));\n+  %}\n+  ins_pipe(vmuldiv_fp128);\n+%}\n+\n+\/\/ --------------------------------- DIV --------------------------------------\n+\n+instruct vdiv2F(vecD dst, vecD src1, vecD src2)\n+%{\n+  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (DivVF src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"fdiv  $dst,$src1,$src2\\t# vector (2S)\" %}\n+  ins_encode %{\n+    __ fdiv(as_FloatRegister($dst$$reg), __ T2S,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vmuldiv_fp64);\n+%}\n+\n+instruct vdiv4F(vecX dst, vecX src1, vecX src2)\n+%{\n+  predicate(n->as_Vector()->length() == 4);\n+  match(Set dst (DivVF src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"fdiv  $dst,$src1,$src2\\t# vector (4S)\" %}\n+  ins_encode %{\n+    __ fdiv(as_FloatRegister($dst$$reg), __ T4S,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vmuldiv_fp128);\n+%}\n+\n+instruct vdiv2D(vecX dst, vecX src1, vecX src2)\n+%{\n+  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (DivVD src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"fdiv  $dst,$src1,$src2\\t# vector (2D)\" %}\n+  ins_encode %{\n+    __ fdiv(as_FloatRegister($dst$$reg), __ T2D,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vmuldiv_fp128);\n+%}\n+\n+\/\/ --------------------------------- SQRT -------------------------------------\n+\n+instruct vsqrt2F(vecD dst, vecD src)\n+%{\n+  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (SqrtVF src));\n+  format %{ \"fsqrt  $dst, $src\\t# vector (2F)\" %}\n+  ins_encode %{\n+    __ fsqrt(as_FloatRegister($dst$$reg), __ T2S, as_FloatRegister($src$$reg));\n+  %}\n+  ins_pipe(vunop_fp64);\n+%}\n+\n+instruct vsqrt4F(vecX dst, vecX src)\n+%{\n+  predicate(n->as_Vector()->length() == 4);\n+  match(Set dst (SqrtVF src));\n+  format %{ \"fsqrt  $dst, $src\\t# vector (4F)\" %}\n+  ins_encode %{\n+    __ fsqrt(as_FloatRegister($dst$$reg), __ T4S, as_FloatRegister($src$$reg));\n+  %}\n+  ins_pipe(vsqrt_fp128);\n+%}\n+\n+instruct vsqrt2D(vecX dst, vecX src)\n+%{\n+  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (SqrtVD src));\n+  format %{ \"fsqrt  $dst, $src\\t# vector (2D)\" %}\n+  ins_encode %{\n+    __ fsqrt(as_FloatRegister($dst$$reg), __ T2D, as_FloatRegister($src$$reg));\n+  %}\n+  ins_pipe(vsqrt_fp128);\n+%}\n+\n+\/\/ --------------------------------- NEG --------------------------------------\n+\n+instruct vneg2F(vecD dst, vecD src)\n+%{\n+  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (NegVF src));\n+  ins_cost(INSN_COST * 3);\n+  format %{ \"fneg  $dst,$src\\t# vector (2S)\" %}\n+  ins_encode %{\n+    __ fneg(as_FloatRegister($dst$$reg), __ T2S,\n+            as_FloatRegister($src$$reg));\n+  %}\n+  ins_pipe(vunop_fp64);\n+%}\n+\n+instruct vneg4F(vecX dst, vecX src)\n+%{\n+  predicate(n->as_Vector()->length() == 4);\n+  match(Set dst (NegVF src));\n+  ins_cost(INSN_COST * 3);\n+  format %{ \"fneg  $dst,$src\\t# vector (4S)\" %}\n+  ins_encode %{\n+    __ fneg(as_FloatRegister($dst$$reg), __ T4S,\n+            as_FloatRegister($src$$reg));\n+  %}\n+  ins_pipe(vunop_fp128);\n+%}\n+\n+instruct vneg2D(vecX dst, vecX src)\n+%{\n+  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (NegVD src));\n+  ins_cost(INSN_COST * 3);\n+  format %{ \"fneg  $dst,$src\\t# vector (2D)\" %}\n+  ins_encode %{\n+    __ fneg(as_FloatRegister($dst$$reg), __ T2D,\n+            as_FloatRegister($src$$reg));\n+  %}\n+  ins_pipe(vunop_fp128);\n+%}\n+\n+\/\/ --------------------------------- AND --------------------------------------\n+\n+instruct vand8B(vecD dst, vecD src1, vecD src2)\n+%{\n+  predicate(n->as_Vector()->length_in_bytes() == 4 ||\n+            n->as_Vector()->length_in_bytes() == 8);\n+  match(Set dst (AndV src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"and  $dst,$src1,$src2\\t# vector (8B)\" %}\n+  ins_encode %{\n+    __ andr(as_FloatRegister($dst$$reg), __ T8B,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vlogical64);\n+%}\n+\n+instruct vand16B(vecX dst, vecX src1, vecX src2)\n+%{\n+  predicate(n->as_Vector()->length_in_bytes() == 16);\n+  match(Set dst (AndV src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"and  $dst,$src1,$src2\\t# vector (16B)\" %}\n+  ins_encode %{\n+    __ andr(as_FloatRegister($dst$$reg), __ T16B,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vlogical128);\n+%}\n+\n+\/\/ --------------------------------- OR ---------------------------------------\n+\n+instruct vor8B(vecD dst, vecD src1, vecD src2)\n+%{\n+  predicate(n->as_Vector()->length_in_bytes() == 4 ||\n+            n->as_Vector()->length_in_bytes() == 8);\n+  match(Set dst (OrV src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"orr  $dst,$src1,$src2\\t# vector (8B)\" %}\n+  ins_encode %{\n+    __ orr(as_FloatRegister($dst$$reg), __ T8B,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vlogical64);\n+%}\n+\n+instruct vor16B(vecX dst, vecX src1, vecX src2)\n+%{\n+  predicate(n->as_Vector()->length_in_bytes() == 16);\n+  match(Set dst (OrV src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"orr  $dst,$src1,$src2\\t# vector (16B)\" %}\n+  ins_encode %{\n+    __ orr(as_FloatRegister($dst$$reg), __ T16B,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vlogical128);\n+%}\n+\n+\/\/ --------------------------------- XOR --------------------------------------\n+\n+instruct vxor8B(vecD dst, vecD src1, vecD src2)\n+%{\n+  predicate(n->as_Vector()->length_in_bytes() == 4 ||\n+            n->as_Vector()->length_in_bytes() == 8);\n+  match(Set dst (XorV src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"xor  $dst,$src1,$src2\\t# vector (8B)\" %}\n+  ins_encode %{\n+    __ eor(as_FloatRegister($dst$$reg), __ T8B,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vlogical64);\n+%}\n+\n+instruct vxor16B(vecX dst, vecX src1, vecX src2)\n+%{\n+  predicate(n->as_Vector()->length_in_bytes() == 16);\n+  match(Set dst (XorV src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"xor  $dst,$src1,$src2\\t# vector (16B)\" %}\n+  ins_encode %{\n+    __ eor(as_FloatRegister($dst$$reg), __ T16B,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vlogical128);\n+%}\n+\n+\/\/ ------------------------------ Shift ---------------------------------------\n+\n+instruct vshiftcnt8B(vecD dst, iRegIorL2I cnt) %{\n+  predicate(n->as_Vector()->length_in_bytes() == 4 ||\n+            n->as_Vector()->length_in_bytes() == 8);\n+  match(Set dst (LShiftCntV cnt));\n+  match(Set dst (RShiftCntV cnt));\n+  format %{ \"dup  $dst, $cnt\\t# shift count vector (8B)\" %}\n+  ins_encode %{\n+    __ dup(as_FloatRegister($dst$$reg), __ T8B, as_Register($cnt$$reg));\n+  %}\n+  ins_pipe(vdup_reg_reg64);\n+%}\n+\n+instruct vshiftcnt16B(vecX dst, iRegIorL2I cnt) %{\n+  predicate(n->as_Vector()->length_in_bytes() == 16);\n+  match(Set dst (LShiftCntV cnt));\n+  match(Set dst (RShiftCntV cnt));\n+  format %{ \"dup  $dst, $cnt\\t# shift count vector (16B)\" %}\n+  ins_encode %{\n+    __ dup(as_FloatRegister($dst$$reg), __ T16B, as_Register($cnt$$reg));\n+  %}\n+  ins_pipe(vdup_reg_reg128);\n+%}\n+\n+instruct vsll8B(vecD dst, vecD src, vecD shift) %{\n+  predicate(n->as_Vector()->length() == 4 ||\n+            n->as_Vector()->length() == 8);\n+  match(Set dst (LShiftVB src shift));\n+  ins_cost(INSN_COST);\n+  format %{ \"sshl  $dst,$src,$shift\\t# vector (8B)\" %}\n+  ins_encode %{\n+    __ sshl(as_FloatRegister($dst$$reg), __ T8B,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($shift$$reg));\n+  %}\n+  ins_pipe(vshift64);\n+%}\n+\n+instruct vsll16B(vecX dst, vecX src, vecX shift) %{\n+  predicate(n->as_Vector()->length() == 16);\n+  match(Set dst (LShiftVB src shift));\n+  ins_cost(INSN_COST);\n+  format %{ \"sshl  $dst,$src,$shift\\t# vector (16B)\" %}\n+  ins_encode %{\n+    __ sshl(as_FloatRegister($dst$$reg), __ T16B,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($shift$$reg));\n+  %}\n+  ins_pipe(vshift128);\n+%}\n+\n+\/\/ Right shifts with vector shift count on aarch64 SIMD are implemented\n+\/\/ as left shift by negative shift count.\n+\/\/ There are two cases for vector shift count.\n+\/\/\n+\/\/ Case 1: The vector shift count is from replication.\n+\/\/        |            |\n+\/\/    LoadVector  RShiftCntV\n+\/\/        |       \/\n+\/\/     RShiftVI\n+\/\/ Note: In inner loop, multiple neg instructions are used, which can be\n+\/\/ moved to outer loop and merge into one neg instruction.\n+\/\/\n+\/\/ Case 2: The vector shift count is from loading.\n+\/\/ This case isn't supported by middle-end now. But it's supported by\n+\/\/ panama\/vectorIntrinsics(JEP 338: Vector API).\n+\/\/        |            |\n+\/\/    LoadVector  LoadVector\n+\/\/        |       \/\n+\/\/     RShiftVI\n+\/\/\n+\n+instruct vsra8B(vecD dst, vecD src, vecD shift, vecD tmp) %{\n+  predicate(n->as_Vector()->length() == 4 ||\n+            n->as_Vector()->length() == 8);\n+  match(Set dst (RShiftVB src shift));\n+  ins_cost(INSN_COST);\n+  effect(TEMP tmp);\n+  format %{ \"negr  $tmp,$shift\\t\"\n+            \"sshl  $dst,$src,$tmp\\t# vector (8B)\" %}\n+  ins_encode %{\n+    __ negr(as_FloatRegister($tmp$$reg), __ T8B,\n+            as_FloatRegister($shift$$reg));\n+    __ sshl(as_FloatRegister($dst$$reg), __ T8B,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($tmp$$reg));\n+  %}\n+  ins_pipe(vshift64);\n+%}\n+\n+instruct vsra16B(vecX dst, vecX src, vecX shift, vecX tmp) %{\n+  predicate(n->as_Vector()->length() == 16);\n+  match(Set dst (RShiftVB src shift));\n+  ins_cost(INSN_COST);\n+  effect(TEMP tmp);\n+  format %{ \"negr  $tmp,$shift\\t\"\n+            \"sshl  $dst,$src,$tmp\\t# vector (16B)\" %}\n+  ins_encode %{\n+    __ negr(as_FloatRegister($tmp$$reg), __ T16B,\n+            as_FloatRegister($shift$$reg));\n+    __ sshl(as_FloatRegister($dst$$reg), __ T16B,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($tmp$$reg));\n+  %}\n+  ins_pipe(vshift128);\n+%}\n+\n+instruct vsrl8B(vecD dst, vecD src, vecD shift, vecD tmp) %{\n+  predicate(n->as_Vector()->length() == 4 ||\n+            n->as_Vector()->length() == 8);\n+  match(Set dst (URShiftVB src shift));\n+  ins_cost(INSN_COST);\n+  effect(TEMP tmp);\n+  format %{ \"negr  $tmp,$shift\\t\"\n+            \"ushl  $dst,$src,$tmp\\t# vector (8B)\" %}\n+  ins_encode %{\n+    __ negr(as_FloatRegister($tmp$$reg), __ T8B,\n+            as_FloatRegister($shift$$reg));\n+    __ ushl(as_FloatRegister($dst$$reg), __ T8B,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($tmp$$reg));\n+  %}\n+  ins_pipe(vshift64);\n+%}\n+\n+instruct vsrl16B(vecX dst, vecX src, vecX shift, vecX tmp) %{\n+  predicate(n->as_Vector()->length() == 16);\n+  match(Set dst (URShiftVB src shift));\n+  ins_cost(INSN_COST);\n+  effect(TEMP tmp);\n+  format %{ \"negr  $tmp,$shift\\t\"\n+            \"ushl  $dst,$src,$tmp\\t# vector (16B)\" %}\n+  ins_encode %{\n+    __ negr(as_FloatRegister($tmp$$reg), __ T16B,\n+            as_FloatRegister($shift$$reg));\n+    __ ushl(as_FloatRegister($dst$$reg), __ T16B,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($tmp$$reg));\n+  %}\n+  ins_pipe(vshift128);\n+%}\n+\n+instruct vsll8B_imm(vecD dst, vecD src, immI shift) %{\n+  predicate(n->as_Vector()->length() == 4 ||\n+            n->as_Vector()->length() == 8);\n+  match(Set dst (LShiftVB src (LShiftCntV shift)));\n+  ins_cost(INSN_COST);\n+  format %{ \"shl    $dst, $src, $shift\\t# vector (8B)\" %}\n+  ins_encode %{\n+    int sh = (int)$shift$$constant;\n+    if (sh >= 8) {\n+      __ eor(as_FloatRegister($dst$$reg), __ T8B,\n+             as_FloatRegister($src$$reg),\n+             as_FloatRegister($src$$reg));\n+    } else {\n+      __ shl(as_FloatRegister($dst$$reg), __ T8B,\n+             as_FloatRegister($src$$reg), sh);\n+    }\n+  %}\n+  ins_pipe(vshift64_imm);\n+%}\n+\n+instruct vsll16B_imm(vecX dst, vecX src, immI shift) %{\n+  predicate(n->as_Vector()->length() == 16);\n+  match(Set dst (LShiftVB src (LShiftCntV shift)));\n+  ins_cost(INSN_COST);\n+  format %{ \"shl    $dst, $src, $shift\\t# vector (16B)\" %}\n+  ins_encode %{\n+    int sh = (int)$shift$$constant;\n+    if (sh >= 8) {\n+      __ eor(as_FloatRegister($dst$$reg), __ T16B,\n+             as_FloatRegister($src$$reg),\n+             as_FloatRegister($src$$reg));\n+    } else {\n+      __ shl(as_FloatRegister($dst$$reg), __ T16B,\n+             as_FloatRegister($src$$reg), sh);\n+    }\n+  %}\n+  ins_pipe(vshift128_imm);\n+%}\n+\n+instruct vsra8B_imm(vecD dst, vecD src, immI shift) %{\n+  predicate(n->as_Vector()->length() == 4 ||\n+            n->as_Vector()->length() == 8);\n+  match(Set dst (RShiftVB src (RShiftCntV shift)));\n+  ins_cost(INSN_COST);\n+  format %{ \"sshr    $dst, $src, $shift\\t# vector (8B)\" %}\n+  ins_encode %{\n+    int sh = (int)$shift$$constant;\n+    if (sh >= 8) sh = 7;\n+    __ sshr(as_FloatRegister($dst$$reg), __ T8B,\n+           as_FloatRegister($src$$reg), sh);\n+  %}\n+  ins_pipe(vshift64_imm);\n+%}\n+\n+instruct vsra16B_imm(vecX dst, vecX src, immI shift) %{\n+  predicate(n->as_Vector()->length() == 16);\n+  match(Set dst (RShiftVB src (RShiftCntV shift)));\n+  ins_cost(INSN_COST);\n+  format %{ \"sshr    $dst, $src, $shift\\t# vector (16B)\" %}\n+  ins_encode %{\n+    int sh = (int)$shift$$constant;\n+    if (sh >= 8) sh = 7;\n+    __ sshr(as_FloatRegister($dst$$reg), __ T16B,\n+           as_FloatRegister($src$$reg), sh);\n+  %}\n+  ins_pipe(vshift128_imm);\n+%}\n+\n+instruct vsrl8B_imm(vecD dst, vecD src, immI shift) %{\n+  predicate(n->as_Vector()->length() == 4 ||\n+            n->as_Vector()->length() == 8);\n+  match(Set dst (URShiftVB src (RShiftCntV shift)));\n+  ins_cost(INSN_COST);\n+  format %{ \"ushr    $dst, $src, $shift\\t# vector (8B)\" %}\n+  ins_encode %{\n+    int sh = (int)$shift$$constant;\n+    if (sh >= 8) {\n+      __ eor(as_FloatRegister($dst$$reg), __ T8B,\n+             as_FloatRegister($src$$reg),\n+             as_FloatRegister($src$$reg));\n+    } else {\n+      __ ushr(as_FloatRegister($dst$$reg), __ T8B,\n+             as_FloatRegister($src$$reg), sh);\n+    }\n+  %}\n+  ins_pipe(vshift64_imm);\n+%}\n+\n+instruct vsrl16B_imm(vecX dst, vecX src, immI shift) %{\n+  predicate(n->as_Vector()->length() == 16);\n+  match(Set dst (URShiftVB src (RShiftCntV shift)));\n+  ins_cost(INSN_COST);\n+  format %{ \"ushr    $dst, $src, $shift\\t# vector (16B)\" %}\n+  ins_encode %{\n+    int sh = (int)$shift$$constant;\n+    if (sh >= 8) {\n+      __ eor(as_FloatRegister($dst$$reg), __ T16B,\n+             as_FloatRegister($src$$reg),\n+             as_FloatRegister($src$$reg));\n+    } else {\n+      __ ushr(as_FloatRegister($dst$$reg), __ T16B,\n+             as_FloatRegister($src$$reg), sh);\n+    }\n+  %}\n+  ins_pipe(vshift128_imm);\n+%}\n+\n+instruct vsll4S(vecD dst, vecD src, vecD shift) %{\n+  predicate(n->as_Vector()->length() == 2 ||\n+            n->as_Vector()->length() == 4);\n+  match(Set dst (LShiftVS src shift));\n+  ins_cost(INSN_COST);\n+  format %{ \"sshl  $dst,$src,$shift\\t# vector (4H)\" %}\n+  ins_encode %{\n+    __ sshl(as_FloatRegister($dst$$reg), __ T4H,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($shift$$reg));\n+  %}\n+  ins_pipe(vshift64);\n+%}\n+\n+instruct vsll8S(vecX dst, vecX src, vecX shift) %{\n+  predicate(n->as_Vector()->length() == 8);\n+  match(Set dst (LShiftVS src shift));\n+  ins_cost(INSN_COST);\n+  format %{ \"sshl  $dst,$src,$shift\\t# vector (8H)\" %}\n+  ins_encode %{\n+    __ sshl(as_FloatRegister($dst$$reg), __ T8H,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($shift$$reg));\n+  %}\n+  ins_pipe(vshift128);\n+%}\n+\n+instruct vsra4S(vecD dst, vecD src, vecD shift, vecD tmp) %{\n+  predicate(n->as_Vector()->length() == 2 ||\n+            n->as_Vector()->length() == 4);\n+  match(Set dst (RShiftVS src shift));\n+  ins_cost(INSN_COST);\n+  effect(TEMP tmp);\n+  format %{ \"negr  $tmp,$shift\\t\"\n+            \"sshl  $dst,$src,$tmp\\t# vector (4H)\" %}\n+  ins_encode %{\n+    __ negr(as_FloatRegister($tmp$$reg), __ T8B,\n+            as_FloatRegister($shift$$reg));\n+    __ sshl(as_FloatRegister($dst$$reg), __ T4H,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($tmp$$reg));\n+  %}\n+  ins_pipe(vshift64);\n+%}\n+\n+instruct vsra8S(vecX dst, vecX src, vecX shift, vecX tmp) %{\n+  predicate(n->as_Vector()->length() == 8);\n+  match(Set dst (RShiftVS src shift));\n+  ins_cost(INSN_COST);\n+  effect(TEMP tmp);\n+  format %{ \"negr  $tmp,$shift\\t\"\n+            \"sshl  $dst,$src,$tmp\\t# vector (8H)\" %}\n+  ins_encode %{\n+    __ negr(as_FloatRegister($tmp$$reg), __ T16B,\n+            as_FloatRegister($shift$$reg));\n+    __ sshl(as_FloatRegister($dst$$reg), __ T8H,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($tmp$$reg));\n+  %}\n+  ins_pipe(vshift128);\n+%}\n+\n+instruct vsrl4S(vecD dst, vecD src, vecD shift, vecD tmp) %{\n+  predicate(n->as_Vector()->length() == 2 ||\n+            n->as_Vector()->length() == 4);\n+  match(Set dst (URShiftVS src shift));\n+  ins_cost(INSN_COST);\n+  effect(TEMP tmp);\n+  format %{ \"negr  $tmp,$shift\\t\"\n+            \"ushl  $dst,$src,$tmp\\t# vector (4H)\" %}\n+  ins_encode %{\n+    __ negr(as_FloatRegister($tmp$$reg), __ T8B,\n+            as_FloatRegister($shift$$reg));\n+    __ ushl(as_FloatRegister($dst$$reg), __ T4H,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($tmp$$reg));\n+  %}\n+  ins_pipe(vshift64);\n+%}\n+\n+instruct vsrl8S(vecX dst, vecX src, vecX shift, vecX tmp) %{\n+  predicate(n->as_Vector()->length() == 8);\n+  match(Set dst (URShiftVS src shift));\n+  ins_cost(INSN_COST);\n+  effect(TEMP tmp);\n+  format %{ \"negr  $tmp,$shift\\t\"\n+            \"ushl  $dst,$src,$tmp\\t# vector (8H)\" %}\n+  ins_encode %{\n+    __ negr(as_FloatRegister($tmp$$reg), __ T16B,\n+            as_FloatRegister($shift$$reg));\n+    __ ushl(as_FloatRegister($dst$$reg), __ T8H,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($tmp$$reg));\n+  %}\n+  ins_pipe(vshift128);\n+%}\n+\n+instruct vsll4S_imm(vecD dst, vecD src, immI shift) %{\n+  predicate(n->as_Vector()->length() == 2 ||\n+            n->as_Vector()->length() == 4);\n+  match(Set dst (LShiftVS src (LShiftCntV shift)));\n+  ins_cost(INSN_COST);\n+  format %{ \"shl    $dst, $src, $shift\\t# vector (4H)\" %}\n+  ins_encode %{\n+    int sh = (int)$shift$$constant;\n+    if (sh >= 16) {\n+      __ eor(as_FloatRegister($dst$$reg), __ T8B,\n+             as_FloatRegister($src$$reg),\n+             as_FloatRegister($src$$reg));\n+    } else {\n+      __ shl(as_FloatRegister($dst$$reg), __ T4H,\n+             as_FloatRegister($src$$reg), sh);\n+    }\n+  %}\n+  ins_pipe(vshift64_imm);\n+%}\n+\n+instruct vsll8S_imm(vecX dst, vecX src, immI shift) %{\n+  predicate(n->as_Vector()->length() == 8);\n+  match(Set dst (LShiftVS src (LShiftCntV shift)));\n+  ins_cost(INSN_COST);\n+  format %{ \"shl    $dst, $src, $shift\\t# vector (8H)\" %}\n+  ins_encode %{\n+    int sh = (int)$shift$$constant;\n+    if (sh >= 16) {\n+      __ eor(as_FloatRegister($dst$$reg), __ T16B,\n+             as_FloatRegister($src$$reg),\n+             as_FloatRegister($src$$reg));\n+    } else {\n+      __ shl(as_FloatRegister($dst$$reg), __ T8H,\n+             as_FloatRegister($src$$reg), sh);\n+    }\n+  %}\n+  ins_pipe(vshift128_imm);\n+%}\n+\n+instruct vsra4S_imm(vecD dst, vecD src, immI shift) %{\n+  predicate(n->as_Vector()->length() == 2 ||\n+            n->as_Vector()->length() == 4);\n+  match(Set dst (RShiftVS src (RShiftCntV shift)));\n+  ins_cost(INSN_COST);\n+  format %{ \"sshr    $dst, $src, $shift\\t# vector (4H)\" %}\n+  ins_encode %{\n+    int sh = (int)$shift$$constant;\n+    if (sh >= 16) sh = 15;\n+    __ sshr(as_FloatRegister($dst$$reg), __ T4H,\n+           as_FloatRegister($src$$reg), sh);\n+  %}\n+  ins_pipe(vshift64_imm);\n+%}\n+\n+instruct vsra8S_imm(vecX dst, vecX src, immI shift) %{\n+  predicate(n->as_Vector()->length() == 8);\n+  match(Set dst (RShiftVS src (RShiftCntV shift)));\n+  ins_cost(INSN_COST);\n+  format %{ \"sshr    $dst, $src, $shift\\t# vector (8H)\" %}\n+  ins_encode %{\n+    int sh = (int)$shift$$constant;\n+    if (sh >= 16) sh = 15;\n+    __ sshr(as_FloatRegister($dst$$reg), __ T8H,\n+           as_FloatRegister($src$$reg), sh);\n+  %}\n+  ins_pipe(vshift128_imm);\n+%}\n+\n+instruct vsrl4S_imm(vecD dst, vecD src, immI shift) %{\n+  predicate(n->as_Vector()->length() == 2 ||\n+            n->as_Vector()->length() == 4);\n+  match(Set dst (URShiftVS src (RShiftCntV shift)));\n+  ins_cost(INSN_COST);\n+  format %{ \"ushr    $dst, $src, $shift\\t# vector (4H)\" %}\n+  ins_encode %{\n+    int sh = (int)$shift$$constant;\n+    if (sh >= 16) {\n+      __ eor(as_FloatRegister($dst$$reg), __ T8B,\n+             as_FloatRegister($src$$reg),\n+             as_FloatRegister($src$$reg));\n+    } else {\n+      __ ushr(as_FloatRegister($dst$$reg), __ T4H,\n+             as_FloatRegister($src$$reg), sh);\n+    }\n+  %}\n+  ins_pipe(vshift64_imm);\n+%}\n+\n+instruct vsrl8S_imm(vecX dst, vecX src, immI shift) %{\n+  predicate(n->as_Vector()->length() == 8);\n+  match(Set dst (URShiftVS src (RShiftCntV shift)));\n+  ins_cost(INSN_COST);\n+  format %{ \"ushr    $dst, $src, $shift\\t# vector (8H)\" %}\n+  ins_encode %{\n+    int sh = (int)$shift$$constant;\n+    if (sh >= 16) {\n+      __ eor(as_FloatRegister($dst$$reg), __ T16B,\n+             as_FloatRegister($src$$reg),\n+             as_FloatRegister($src$$reg));\n+    } else {\n+      __ ushr(as_FloatRegister($dst$$reg), __ T8H,\n+             as_FloatRegister($src$$reg), sh);\n+    }\n+  %}\n+  ins_pipe(vshift128_imm);\n+%}\n+\n+instruct vsll2I(vecD dst, vecD src, vecD shift) %{\n+  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (LShiftVI src shift));\n+  ins_cost(INSN_COST);\n+  format %{ \"sshl  $dst,$src,$shift\\t# vector (2S)\" %}\n+  ins_encode %{\n+    __ sshl(as_FloatRegister($dst$$reg), __ T2S,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($shift$$reg));\n+  %}\n+  ins_pipe(vshift64);\n+%}\n+\n+instruct vsll4I(vecX dst, vecX src, vecX shift) %{\n+  predicate(n->as_Vector()->length() == 4);\n+  match(Set dst (LShiftVI src shift));\n+  ins_cost(INSN_COST);\n+  format %{ \"sshl  $dst,$src,$shift\\t# vector (4S)\" %}\n+  ins_encode %{\n+    __ sshl(as_FloatRegister($dst$$reg), __ T4S,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($shift$$reg));\n+  %}\n+  ins_pipe(vshift128);\n+%}\n+\n+instruct vsra2I(vecD dst, vecD src, vecD shift, vecD tmp) %{\n+  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (RShiftVI src shift));\n+  ins_cost(INSN_COST);\n+  effect(TEMP tmp);\n+  format %{ \"negr  $tmp,$shift\\t\"\n+            \"sshl  $dst,$src,$tmp\\t# vector (2S)\" %}\n+  ins_encode %{\n+    __ negr(as_FloatRegister($tmp$$reg), __ T8B,\n+            as_FloatRegister($shift$$reg));\n+    __ sshl(as_FloatRegister($dst$$reg), __ T2S,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($tmp$$reg));\n+  %}\n+  ins_pipe(vshift64);\n+%}\n+\n+instruct vsra4I(vecX dst, vecX src, vecX shift, vecX tmp) %{\n+  predicate(n->as_Vector()->length() == 4);\n+  match(Set dst (RShiftVI src shift));\n+  ins_cost(INSN_COST);\n+  effect(TEMP tmp);\n+  format %{ \"negr  $tmp,$shift\\t\"\n+            \"sshl  $dst,$src,$tmp\\t# vector (4S)\" %}\n+  ins_encode %{\n+    __ negr(as_FloatRegister($tmp$$reg), __ T16B,\n+            as_FloatRegister($shift$$reg));\n+    __ sshl(as_FloatRegister($dst$$reg), __ T4S,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($tmp$$reg));\n+  %}\n+  ins_pipe(vshift128);\n+%}\n+\n+instruct vsrl2I(vecD dst, vecD src, vecD shift, vecD tmp) %{\n+  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (URShiftVI src shift));\n+  ins_cost(INSN_COST);\n+  effect(TEMP tmp);\n+  format %{ \"negr  $tmp,$shift\\t\"\n+            \"ushl  $dst,$src,$tmp\\t# vector (2S)\" %}\n+  ins_encode %{\n+    __ negr(as_FloatRegister($tmp$$reg), __ T8B,\n+            as_FloatRegister($shift$$reg));\n+    __ ushl(as_FloatRegister($dst$$reg), __ T2S,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($tmp$$reg));\n+  %}\n+  ins_pipe(vshift64);\n+%}\n+\n+instruct vsrl4I(vecX dst, vecX src, vecX shift, vecX tmp) %{\n+  predicate(n->as_Vector()->length() == 4);\n+  match(Set dst (URShiftVI src shift));\n+  ins_cost(INSN_COST);\n+  effect(TEMP tmp);\n+  format %{ \"negr  $tmp,$shift\\t\"\n+            \"ushl  $dst,$src,$tmp\\t# vector (4S)\" %}\n+  ins_encode %{\n+    __ negr(as_FloatRegister($tmp$$reg), __ T16B,\n+            as_FloatRegister($shift$$reg));\n+    __ ushl(as_FloatRegister($dst$$reg), __ T4S,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($tmp$$reg));\n+  %}\n+  ins_pipe(vshift128);\n+%}\n+\n+instruct vsll2I_imm(vecD dst, vecD src, immI shift) %{\n+  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (LShiftVI src (LShiftCntV shift)));\n+  ins_cost(INSN_COST);\n+  format %{ \"shl    $dst, $src, $shift\\t# vector (2S)\" %}\n+  ins_encode %{\n+    __ shl(as_FloatRegister($dst$$reg), __ T2S,\n+           as_FloatRegister($src$$reg),\n+           (int)$shift$$constant);\n+  %}\n+  ins_pipe(vshift64_imm);\n+%}\n+\n+instruct vsll4I_imm(vecX dst, vecX src, immI shift) %{\n+  predicate(n->as_Vector()->length() == 4);\n+  match(Set dst (LShiftVI src (LShiftCntV shift)));\n+  ins_cost(INSN_COST);\n+  format %{ \"shl    $dst, $src, $shift\\t# vector (4S)\" %}\n+  ins_encode %{\n+    __ shl(as_FloatRegister($dst$$reg), __ T4S,\n+           as_FloatRegister($src$$reg),\n+           (int)$shift$$constant);\n+  %}\n+  ins_pipe(vshift128_imm);\n+%}\n+\n+instruct vsra2I_imm(vecD dst, vecD src, immI shift) %{\n+  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (RShiftVI src (RShiftCntV shift)));\n+  ins_cost(INSN_COST);\n+  format %{ \"sshr    $dst, $src, $shift\\t# vector (2S)\" %}\n+  ins_encode %{\n+    __ sshr(as_FloatRegister($dst$$reg), __ T2S,\n+            as_FloatRegister($src$$reg),\n+            (int)$shift$$constant);\n+  %}\n+  ins_pipe(vshift64_imm);\n+%}\n+\n+instruct vsra4I_imm(vecX dst, vecX src, immI shift) %{\n+  predicate(n->as_Vector()->length() == 4);\n+  match(Set dst (RShiftVI src (RShiftCntV shift)));\n+  ins_cost(INSN_COST);\n+  format %{ \"sshr    $dst, $src, $shift\\t# vector (4S)\" %}\n+  ins_encode %{\n+    __ sshr(as_FloatRegister($dst$$reg), __ T4S,\n+            as_FloatRegister($src$$reg),\n+            (int)$shift$$constant);\n+  %}\n+  ins_pipe(vshift128_imm);\n+%}\n+\n+instruct vsrl2I_imm(vecD dst, vecD src, immI shift) %{\n+  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (URShiftVI src (RShiftCntV shift)));\n+  ins_cost(INSN_COST);\n+  format %{ \"ushr    $dst, $src, $shift\\t# vector (2S)\" %}\n+  ins_encode %{\n+    __ ushr(as_FloatRegister($dst$$reg), __ T2S,\n+            as_FloatRegister($src$$reg),\n+            (int)$shift$$constant);\n+  %}\n+  ins_pipe(vshift64_imm);\n+%}\n+\n+instruct vsrl4I_imm(vecX dst, vecX src, immI shift) %{\n+  predicate(n->as_Vector()->length() == 4);\n+  match(Set dst (URShiftVI src (RShiftCntV shift)));\n+  ins_cost(INSN_COST);\n+  format %{ \"ushr    $dst, $src, $shift\\t# vector (4S)\" %}\n+  ins_encode %{\n+    __ ushr(as_FloatRegister($dst$$reg), __ T4S,\n+            as_FloatRegister($src$$reg),\n+            (int)$shift$$constant);\n+  %}\n+  ins_pipe(vshift128_imm);\n+%}\n+\n+instruct vsll2L(vecX dst, vecX src, vecX shift) %{\n+  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (LShiftVL src shift));\n+  ins_cost(INSN_COST);\n+  format %{ \"sshl  $dst,$src,$shift\\t# vector (2D)\" %}\n+  ins_encode %{\n+    __ sshl(as_FloatRegister($dst$$reg), __ T2D,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($shift$$reg));\n+  %}\n+  ins_pipe(vshift128);\n+%}\n+\n+instruct vsra2L(vecX dst, vecX src, vecX shift, vecX tmp) %{\n+  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (RShiftVL src shift));\n+  ins_cost(INSN_COST);\n+  effect(TEMP tmp);\n+  format %{ \"negr  $tmp,$shift\\t\"\n+            \"sshl  $dst,$src,$tmp\\t# vector (2D)\" %}\n+  ins_encode %{\n+    __ negr(as_FloatRegister($tmp$$reg), __ T16B,\n+            as_FloatRegister($shift$$reg));\n+    __ sshl(as_FloatRegister($dst$$reg), __ T2D,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($tmp$$reg));\n+  %}\n+  ins_pipe(vshift128);\n+%}\n+\n+instruct vsrl2L(vecX dst, vecX src, vecX shift, vecX tmp) %{\n+  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (URShiftVL src shift));\n+  ins_cost(INSN_COST);\n+  effect(TEMP tmp);\n+  format %{ \"negr  $tmp,$shift\\t\"\n+            \"ushl  $dst,$src,$tmp\\t# vector (2D)\" %}\n+  ins_encode %{\n+    __ negr(as_FloatRegister($tmp$$reg), __ T16B,\n+            as_FloatRegister($shift$$reg));\n+    __ ushl(as_FloatRegister($dst$$reg), __ T2D,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($tmp$$reg));\n+  %}\n+  ins_pipe(vshift128);\n+%}\n+\n+instruct vsll2L_imm(vecX dst, vecX src, immI shift) %{\n+  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (LShiftVL src (LShiftCntV shift)));\n+  ins_cost(INSN_COST);\n+  format %{ \"shl    $dst, $src, $shift\\t# vector (2D)\" %}\n+  ins_encode %{\n+    __ shl(as_FloatRegister($dst$$reg), __ T2D,\n+           as_FloatRegister($src$$reg),\n+           (int)$shift$$constant);\n+  %}\n+  ins_pipe(vshift128_imm);\n+%}\n+\n+instruct vsra2L_imm(vecX dst, vecX src, immI shift) %{\n+  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (RShiftVL src (RShiftCntV shift)));\n+  ins_cost(INSN_COST);\n+  format %{ \"sshr    $dst, $src, $shift\\t# vector (2D)\" %}\n+  ins_encode %{\n+    __ sshr(as_FloatRegister($dst$$reg), __ T2D,\n+            as_FloatRegister($src$$reg),\n+            (int)$shift$$constant);\n+  %}\n+  ins_pipe(vshift128_imm);\n+%}\n+\n+instruct vsrl2L_imm(vecX dst, vecX src, immI shift) %{\n+  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (URShiftVL src (RShiftCntV shift)));\n+  ins_cost(INSN_COST);\n+  format %{ \"ushr    $dst, $src, $shift\\t# vector (2D)\" %}\n+  ins_encode %{\n+    __ ushr(as_FloatRegister($dst$$reg), __ T2D,\n+            as_FloatRegister($src$$reg),\n+            (int)$shift$$constant);\n+  %}\n+  ins_pipe(vshift128_imm);\n+%}\n+\n+instruct vsraa8B_imm(vecD dst, vecD src, immI shift) %{\n+  predicate(n->as_Vector()->length() == 8);\n+  match(Set dst (AddVB dst (RShiftVB src (RShiftCntV shift))));\n+  ins_cost(INSN_COST);\n+  format %{ \"ssra    $dst, $src, $shift\\t# vector (8B)\" %}\n+  ins_encode %{\n+    int sh = (int)$shift$$constant;\n+    if (sh >= 8) sh = 7;\n+    __ ssra(as_FloatRegister($dst$$reg), __ T8B,\n+           as_FloatRegister($src$$reg), sh);\n+  %}\n+  ins_pipe(vshift64_imm);\n+%}\n+\n+instruct vsraa16B_imm(vecX dst, vecX src, immI shift) %{\n+  predicate(n->as_Vector()->length() == 16);\n+  match(Set dst (AddVB dst (RShiftVB src (RShiftCntV shift))));\n+  ins_cost(INSN_COST);\n+  format %{ \"ssra    $dst, $src, $shift\\t# vector (16B)\" %}\n+  ins_encode %{\n+    int sh = (int)$shift$$constant;\n+    if (sh >= 8) sh = 7;\n+    __ ssra(as_FloatRegister($dst$$reg), __ T16B,\n+           as_FloatRegister($src$$reg), sh);\n+  %}\n+  ins_pipe(vshift128_imm);\n+%}\n+\n+instruct vsraa4S_imm(vecD dst, vecD src, immI shift) %{\n+  predicate(n->as_Vector()->length() == 4);\n+  match(Set dst (AddVS dst (RShiftVS src (RShiftCntV shift))));\n+  ins_cost(INSN_COST);\n+  format %{ \"ssra    $dst, $src, $shift\\t# vector (4H)\" %}\n+  ins_encode %{\n+    int sh = (int)$shift$$constant;\n+    if (sh >= 16) sh = 15;\n+    __ ssra(as_FloatRegister($dst$$reg), __ T4H,\n+           as_FloatRegister($src$$reg), sh);\n+  %}\n+  ins_pipe(vshift64_imm);\n+%}\n+\n+instruct vsraa8S_imm(vecX dst, vecX src, immI shift) %{\n+  predicate(n->as_Vector()->length() == 8);\n+  match(Set dst (AddVS dst (RShiftVS src (RShiftCntV shift))));\n+  ins_cost(INSN_COST);\n+  format %{ \"ssra    $dst, $src, $shift\\t# vector (8H)\" %}\n+  ins_encode %{\n+    int sh = (int)$shift$$constant;\n+    if (sh >= 16) sh = 15;\n+    __ ssra(as_FloatRegister($dst$$reg), __ T8H,\n+           as_FloatRegister($src$$reg), sh);\n+  %}\n+  ins_pipe(vshift128_imm);\n+%}\n+\n+instruct vsraa2I_imm(vecD dst, vecD src, immI shift) %{\n+  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (AddVI dst (RShiftVI src (RShiftCntV shift))));\n+  ins_cost(INSN_COST);\n+  format %{ \"ssra    $dst, $src, $shift\\t# vector (2S)\" %}\n+  ins_encode %{\n+    __ ssra(as_FloatRegister($dst$$reg), __ T2S,\n+            as_FloatRegister($src$$reg),\n+            (int)$shift$$constant);\n+  %}\n+  ins_pipe(vshift64_imm);\n+%}\n+\n+instruct vsraa4I_imm(vecX dst, vecX src, immI shift) %{\n+  predicate(n->as_Vector()->length() == 4);\n+  match(Set dst (AddVI dst (RShiftVI src (RShiftCntV shift))));\n+  ins_cost(INSN_COST);\n+  format %{ \"ssra    $dst, $src, $shift\\t# vector (4S)\" %}\n+  ins_encode %{\n+    __ ssra(as_FloatRegister($dst$$reg), __ T4S,\n+            as_FloatRegister($src$$reg),\n+            (int)$shift$$constant);\n+  %}\n+  ins_pipe(vshift128_imm);\n+%}\n+\n+instruct vsraa2L_imm(vecX dst, vecX src, immI shift) %{\n+  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (AddVL dst (RShiftVL src (RShiftCntV shift))));\n+  ins_cost(INSN_COST);\n+  format %{ \"ssra    $dst, $src, $shift\\t# vector (2D)\" %}\n+  ins_encode %{\n+    __ ssra(as_FloatRegister($dst$$reg), __ T2D,\n+            as_FloatRegister($src$$reg),\n+            (int)$shift$$constant);\n+  %}\n+  ins_pipe(vshift128_imm);\n+%}\n+\n+instruct vsrla8B_imm(vecD dst, vecD src, immI shift) %{\n+  predicate(n->as_Vector()->length() == 8);\n+  match(Set dst (AddVB dst (URShiftVB src (RShiftCntV shift))));\n+  ins_cost(INSN_COST);\n+  format %{ \"usra    $dst, $src, $shift\\t# vector (8B)\" %}\n+  ins_encode %{\n+    int sh = (int)$shift$$constant;\n+    if (sh < 8) {\n+      __ usra(as_FloatRegister($dst$$reg), __ T8B,\n+             as_FloatRegister($src$$reg), sh);\n+    }\n+  %}\n+  ins_pipe(vshift64_imm);\n+%}\n+\n+instruct vsrla16B_imm(vecX dst, vecX src, immI shift) %{\n+  predicate(n->as_Vector()->length() == 16);\n+  match(Set dst (AddVB dst (URShiftVB src (RShiftCntV shift))));\n+  ins_cost(INSN_COST);\n+  format %{ \"usra    $dst, $src, $shift\\t# vector (16B)\" %}\n+  ins_encode %{\n+    int sh = (int)$shift$$constant;\n+    if (sh < 8) {\n+      __ usra(as_FloatRegister($dst$$reg), __ T16B,\n+             as_FloatRegister($src$$reg), sh);\n+    }\n+  %}\n+  ins_pipe(vshift128_imm);\n+%}\n+\n+instruct vsrla4S_imm(vecD dst, vecD src, immI shift) %{\n+  predicate(n->as_Vector()->length() == 4);\n+  match(Set dst (AddVS dst (URShiftVS src (RShiftCntV shift))));\n+  ins_cost(INSN_COST);\n+  format %{ \"usra    $dst, $src, $shift\\t# vector (4H)\" %}\n+  ins_encode %{\n+    int sh = (int)$shift$$constant;\n+    if (sh < 16) {\n+      __ usra(as_FloatRegister($dst$$reg), __ T4H,\n+             as_FloatRegister($src$$reg), sh);\n+    }\n+  %}\n+  ins_pipe(vshift64_imm);\n+%}\n+\n+instruct vsrla8S_imm(vecX dst, vecX src, immI shift) %{\n+  predicate(n->as_Vector()->length() == 8);\n+  match(Set dst (AddVS dst (URShiftVS src (RShiftCntV shift))));\n+  ins_cost(INSN_COST);\n+  format %{ \"usra    $dst, $src, $shift\\t# vector (8H)\" %}\n+  ins_encode %{\n+    int sh = (int)$shift$$constant;\n+    if (sh < 16) {\n+      __ usra(as_FloatRegister($dst$$reg), __ T8H,\n+             as_FloatRegister($src$$reg), sh);\n+    }\n+  %}\n+  ins_pipe(vshift128_imm);\n+%}\n+\n+instruct vsrla2I_imm(vecD dst, vecD src, immI shift) %{\n+  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (AddVI dst (URShiftVI src (RShiftCntV shift))));\n+  ins_cost(INSN_COST);\n+  format %{ \"usra    $dst, $src, $shift\\t# vector (2S)\" %}\n+  ins_encode %{\n+    __ usra(as_FloatRegister($dst$$reg), __ T2S,\n+            as_FloatRegister($src$$reg),\n+            (int)$shift$$constant);\n+  %}\n+  ins_pipe(vshift64_imm);\n+%}\n+\n+instruct vsrla4I_imm(vecX dst, vecX src, immI shift) %{\n+  predicate(n->as_Vector()->length() == 4);\n+  match(Set dst (AddVI dst (URShiftVI src (RShiftCntV shift))));\n+  ins_cost(INSN_COST);\n+  format %{ \"usra    $dst, $src, $shift\\t# vector (4S)\" %}\n+  ins_encode %{\n+    __ usra(as_FloatRegister($dst$$reg), __ T4S,\n+            as_FloatRegister($src$$reg),\n+            (int)$shift$$constant);\n+  %}\n+  ins_pipe(vshift128_imm);\n+%}\n+\n+instruct vsrla2L_imm(vecX dst, vecX src, immI shift) %{\n+  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (AddVL dst (URShiftVL src (RShiftCntV shift))));\n+  ins_cost(INSN_COST);\n+  format %{ \"usra    $dst, $src, $shift\\t# vector (2D)\" %}\n+  ins_encode %{\n+    __ usra(as_FloatRegister($dst$$reg), __ T2D,\n+            as_FloatRegister($src$$reg),\n+            (int)$shift$$constant);\n+  %}\n+  ins_pipe(vshift128_imm);\n+%}\n+\n+instruct vmax2F(vecD dst, vecD src1, vecD src2)\n+%{\n+  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n+  match(Set dst (MaxV src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"fmax  $dst,$src1,$src2\\t# vector (2F)\" %}\n+  ins_encode %{\n+    __ fmax(as_FloatRegister($dst$$reg), __ T2S,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vdop_fp64);\n+%}\n+\n+instruct vmax4F(vecX dst, vecX src1, vecX src2)\n+%{\n+  predicate(n->as_Vector()->length() == 4 && n->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n+  match(Set dst (MaxV src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"fmax  $dst,$src1,$src2\\t# vector (4S)\" %}\n+  ins_encode %{\n+    __ fmax(as_FloatRegister($dst$$reg), __ T4S,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vdop_fp128);\n+%}\n+\n+instruct vmax2D(vecX dst, vecX src1, vecX src2)\n+%{\n+  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_DOUBLE);\n+  match(Set dst (MaxV src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"fmax  $dst,$src1,$src2\\t# vector (2D)\" %}\n+  ins_encode %{\n+    __ fmax(as_FloatRegister($dst$$reg), __ T2D,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vdop_fp128);\n+%}\n+\n+instruct vmin2F(vecD dst, vecD src1, vecD src2)\n+%{\n+  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n+  match(Set dst (MinV src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"fmin  $dst,$src1,$src2\\t# vector (2F)\" %}\n+  ins_encode %{\n+    __ fmin(as_FloatRegister($dst$$reg), __ T2S,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vdop_fp64);\n+%}\n+\n+instruct vmin4F(vecX dst, vecX src1, vecX src2)\n+%{\n+  predicate(n->as_Vector()->length() == 4 && n->bottom_type()->is_vect()->element_basic_type() == T_FLOAT);\n+  match(Set dst (MinV src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"fmin  $dst,$src1,$src2\\t# vector (4S)\" %}\n+  ins_encode %{\n+    __ fmin(as_FloatRegister($dst$$reg), __ T4S,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vdop_fp128);\n+%}\n+\n+instruct vmin2D(vecX dst, vecX src1, vecX src2)\n+%{\n+  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_DOUBLE);\n+  match(Set dst (MinV src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"fmin  $dst,$src1,$src2\\t# vector (2D)\" %}\n+  ins_encode %{\n+    __ fmin(as_FloatRegister($dst$$reg), __ T2D,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vdop_fp128);\n+%}\n+\n+instruct vround2D_reg(vecX dst, vecX src, immI rmode) %{\n+  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_DOUBLE);\n+  match(Set dst (RoundDoubleModeV src rmode));\n+  format %{ \"frint  $dst, $src, $rmode\" %}\n+  ins_encode %{\n+    switch ($rmode$$constant) {\n+      case RoundDoubleModeNode::rmode_rint:\n+        __ frintn(as_FloatRegister($dst$$reg), __ T2D,\n+                  as_FloatRegister($src$$reg));\n+        break;\n+      case RoundDoubleModeNode::rmode_floor:\n+        __ frintm(as_FloatRegister($dst$$reg), __ T2D,\n+                  as_FloatRegister($src$$reg));\n+        break;\n+      case RoundDoubleModeNode::rmode_ceil:\n+        __ frintp(as_FloatRegister($dst$$reg), __ T2D,\n+                  as_FloatRegister($src$$reg));\n+        break;\n+    }\n+  %}\n+  ins_pipe(vdop_fp128);\n+%}\n+\n+instruct vpopcount4I(vecX dst, vecX src) %{\n+  predicate(UsePopCountInstruction && n->as_Vector()->length() == 4);\n+  match(Set dst (PopCountVI src));\n+  format %{\n+    \"cnt     $dst, $src\\t# vector (16B)\\n\\t\"\n+    \"uaddlp  $dst, $dst\\t# vector (16B)\\n\\t\"\n+    \"uaddlp  $dst, $dst\\t# vector (8H)\"\n+  %}\n+  ins_encode %{\n+    __ cnt(as_FloatRegister($dst$$reg), __ T16B,\n+           as_FloatRegister($src$$reg));\n+    __ uaddlp(as_FloatRegister($dst$$reg), __ T16B,\n+              as_FloatRegister($dst$$reg));\n+    __ uaddlp(as_FloatRegister($dst$$reg), __ T8H,\n+              as_FloatRegister($dst$$reg));\n+  %}\n+  ins_pipe(pipe_class_default);\n+%}\n+\n+instruct vpopcount2I(vecD dst, vecD src) %{\n+  predicate(UsePopCountInstruction && n->as_Vector()->length() == 2);\n+  match(Set dst (PopCountVI src));\n+  format %{\n+    \"cnt     $dst, $src\\t# vector (8B)\\n\\t\"\n+    \"uaddlp  $dst, $dst\\t# vector (8B)\\n\\t\"\n+    \"uaddlp  $dst, $dst\\t# vector (4H)\"\n+  %}\n+  ins_encode %{\n+    __ cnt(as_FloatRegister($dst$$reg), __ T8B,\n+           as_FloatRegister($src$$reg));\n+    __ uaddlp(as_FloatRegister($dst$$reg), __ T8B,\n+              as_FloatRegister($dst$$reg));\n+    __ uaddlp(as_FloatRegister($dst$$reg), __ T4H,\n+              as_FloatRegister($dst$$reg));\n+  %}\n+  ins_pipe(pipe_class_default);\n+%}\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon.ad","additions":2422,"deletions":1,"binary":false,"changes":2423,"status":"modified"},{"patch":"@@ -60,14 +60,3 @@\n-\n-\/\/ Load vector (16 bits)\n-instruct loadV2(vecD dst, memory mem)\n-%{\n-  predicate(n->as_LoadVector()->memory_size() == 2);\n-  match(Set dst (LoadVector mem));\n-  ins_cost(4 * INSN_COST);\n-  format %{ \"ldrh   $dst,$mem\\t# vector (16 bits)\" %}\n-  ins_encode( aarch64_enc_ldrvH(dst, mem) );\n-  ins_pipe(vload_reg_mem64);\n-%}\n-\n-\/\/ Store Vector (16 bits)\n-instruct storeV2(vecD src, memory mem)\n+define(`VLoadStore', `\n+\/\/ ifelse(load, $3, Load, Store) Vector ($6 bits)\n+instruct $3V$4`'(vec$5 $7, ifelse($4, 2, memory, vmem$4) mem)\n@@ -75,2 +64,2 @@\n-  predicate(n->as_StoreVector()->memory_size() == 2);\n-  match(Set mem (StoreVector mem src));\n+  predicate($8`n->as_'ifelse(load, $3, Load, Store)Vector()->memory_size() == $4);\n+  match(Set ifelse(load, $3, dst (LoadVector mem), mem (StoreVector mem src)));\n@@ -78,4 +67,7 @@\n-  format %{ \"strh   $mem,$src\\t# vector (16 bits)\" %}\n-  ins_encode( aarch64_enc_strvH(src, mem) );\n-  ins_pipe(vstore_reg_mem64);\n-%}\n+  format %{ \"$1   ifelse(load, $3, `$dst,$mem', `$mem,$src')\\t# vector ($6 bits)\" %}\n+  ins_encode( `aarch64_enc_'ifelse(load, $3, ldr, str)v$2($7, mem) );\n+  ins_pipe(v$3`_reg_mem'ifelse(eval($4 * 8), 128, 128, 64));\n+%}')dnl\n+dnl        $1    $2 $3     $4  $5 $6   $7   $8\n+VLoadStore(ldrh, H, load,  2,  D, 16,  dst, )\n+VLoadStore(strh, H, store, 2,  D, 16,  src, )\n@@ -1510,0 +1502,792 @@\n+VLoadStore(ldrs, S, load,  4,  D, 32,  dst, )\n+VLoadStore(ldrd, D, load,  8,  D, 64,  dst, )\n+VLoadStore(ldrq, Q, load, 16,  X, 128, dst, UseSVE == 0 && )\n+VLoadStore(strs, S, store, 4,  D, 32,  src, )\n+VLoadStore(strd, D, store, 8,  D, 64,  src, )\n+VLoadStore(strq, Q, store, 16, X, 128, src, )\n+dnl\n+define(`VREPLICATE', `\n+instruct replicate$3$4$5`'(vec$6 dst, $7 ifelse($7, immI0, zero, $7, immI, con, src))\n+%{\n+  predicate(ifelse($8, UseSVE == 0 && , $8,\n+                   $8, , , $8`\n+            ')n->as_Vector()->length() == $3);\n+  match(Set dst (Replicate`'ifelse($7, immI0, I, $4) ifelse($7, immI0, zero, $7, immI, con, $7, zero, I, src)));\n+  ins_cost(INSN_COST);\n+  format %{ \"$1  $dst, $ifelse($7, immI0, zero, $7, immI, con, src)`\\t# vector ('ifelse($4$7, SimmI, $3H, $2, eor, 4I, $3$4)`)\"' %}\n+  ins_encode %{\n+    __ $2(as_FloatRegister($dst$$reg), __ ifelse(\n+            $2, eor, T16B, T$3`'$9),ifelse(\n+            `$4 $7', `B immI', ` '$con$$constant & 0xff,\n+            `$4 $7', `S immI', ` '$con$$constant & 0xffff,\n+            `$4 $7', `I immI', ` '$con$$constant,\n+            `$2', eor,`\n+           as_FloatRegister($dst$$reg),\n+           as_FloatRegister($dst$$reg)',\n+            `$7', vRegF,`\n+           as_FloatRegister($src$$reg)',\n+            `$7', vRegD,`\n+           as_FloatRegister($src$$reg)',\n+           ` 'as_Register($src$$reg)));\n+  %}\n+  ins_pipe(ifelse($7, immI0, v$1_reg_imm,\n+                  $7, immI,  v$1_reg_imm,\n+                  $7, iRegIorL2I, v$1_reg_reg,\n+                  $7, zero, vmovi_reg_imm,\n+                  $7, iRegL, vdup_reg_reg,\n+                  $4, F, vdup_reg_freg, vdup_reg_dreg)`'ifelse($6, X, 128, 64));\n+%}')dnl\n+dnl        $1    $2    $3  $4 $5     $6 $7          $8                                $9\n+VREPLICATE(dup,  dup,  8,  B, ,      D, iRegIorL2I, n->as_Vector()->length() == 4 ||, B)\n+VREPLICATE(dup,  dup,  16, B, ,      X, iRegIorL2I, UseSVE == 0 && ,                  B)\n+VREPLICATE(movi, mov,  8,  B, _imm,  D, immI,       n->as_Vector()->length() == 4 ||, B)\n+VREPLICATE(movi, mov,  16, B, _imm,  X, immI,       UseSVE == 0 && ,                  B)\n+VREPLICATE(dup,  dup,  4,  S, ,      D, iRegIorL2I, n->as_Vector()->length() == 2 ||, H)\n+VREPLICATE(dup,  dup,  8,  S, ,      X, iRegIorL2I, UseSVE == 0 && ,                  H)\n+VREPLICATE(movi, mov,  4,  S, _imm,  D, immI,       n->as_Vector()->length() == 2 ||, H)\n+VREPLICATE(movi, mov,  8,  S,  _imm, X, immI,       UseSVE == 0 && ,                  H)\n+VREPLICATE(dup,  dup,  2,  I, ,      D, iRegIorL2I, ,                                 S)\n+VREPLICATE(dup,  dup,  4,  I, ,      X, iRegIorL2I, UseSVE == 0 && ,                  S)\n+VREPLICATE(movi, mov,  2,  I, _imm,  D, immI,       ,                                 S)\n+VREPLICATE(movi, mov,  4,  I,  _imm, X, immI,       UseSVE == 0 && ,                  S)\n+VREPLICATE(dup,  dup,  2,  L, ,      X, iRegL,      UseSVE == 0 && ,                  D)\n+VREPLICATE(movi, eor,  2,  L, _zero, X, immI0,      UseSVE == 0 && ,                  D)\n+VREPLICATE(dup,  dup,  2,  F, ,      D, vRegF,      ,                                 S)\n+VREPLICATE(dup,  dup,  4,  F, ,      X, vRegF,      UseSVE == 0 && ,                  S)\n+VREPLICATE(dup,  dup,  2,  D, ,      X, vRegD,      UseSVE == 0 && ,                  D)\n+dnl\n+\n+\/\/ ====================REDUCTION ARITHMETIC====================================\n+dnl\n+define(`REDUCE_ADD_INT', `\n+instruct reduce_add$1$2`'(iRegINoSp dst, iRegIorL2I isrc, vec$3 vsrc, ifelse($1, 2, iRegINoSp tmp, vecX vtmp), iRegINoSp ifelse($1, 2, tmp2, itmp))\n+%{\n+  predicate(n->in(2)->bottom_type()->is_vect()->element_basic_type() == T_INT);\n+  match(Set dst (AddReductionVI isrc vsrc));\n+  ins_cost(INSN_COST);\n+  effect(TEMP ifelse($1, 2, tmp, vtmp), TEMP ifelse($1, 2, tmp2, itmp));\n+  format %{ ifelse($1, 2, `\"umov  $tmp, $vsrc, S, 0\\n\\t\"\n+            \"umov  $tmp2, $vsrc, S, 1\\n\\t\"\n+            \"addw  $tmp, $isrc, $tmp\\n\\t\"\n+            \"addw  $dst, $tmp, $tmp2\\t# add reduction2I\"',`\"addv  $vtmp, T4S, $vsrc\\n\\t\"\n+            \"umov  $itmp, $vtmp, S, 0\\n\\t\"\n+            \"addw  $dst, $itmp, $isrc\\t# add reduction4I\"')\n+  %}\n+  ins_encode %{\n+    ifelse($1, 2, `__ umov($tmp$$Register, as_FloatRegister($vsrc$$reg), __ S, 0);\n+    __ umov($tmp2$$Register, as_FloatRegister($vsrc$$reg), __ S, 1);\n+    __ addw($tmp$$Register, $isrc$$Register, $tmp$$Register);\n+    __ addw($dst$$Register, $tmp$$Register, $tmp2$$Register);', `__ addv(as_FloatRegister($vtmp$$reg), __ T4S,\n+            as_FloatRegister($vsrc$$reg));\n+    __ umov($itmp$$Register, as_FloatRegister($vtmp$$reg), __ S, 0);\n+    __ addw($dst$$Register, $itmp$$Register, $isrc$$Register);')\n+  %}\n+  ins_pipe(pipe_class_default);\n+%}')dnl\n+dnl            $1 $2 $3\n+REDUCE_ADD_INT(2, I, D)\n+REDUCE_ADD_INT(4, I, X)\n+dnl\n+define(`REDUCE_MUL_INT', `\n+instruct reduce_mul$1$2`'(iRegINoSp dst, iRegIorL2I isrc, vec$3 vsrc, ifelse($1, 2, iRegINoSp tmp`)', vecX vtmp`,' iRegINoSp itmp`)')\n+%{\n+  predicate(n->in(2)->bottom_type()->is_vect()->element_basic_type() == T_INT);\n+  match(Set dst (MulReductionVI isrc vsrc));\n+  ins_cost(INSN_COST);\n+  effect(TEMP ifelse($1, 2, tmp, vtmp), TEMP ifelse($1, 2, dst, itmp`,' TEMP dst));\n+  format %{ ifelse($1, 2, `\"umov  $tmp, $vsrc, S, 0\\n\\t\"\n+            \"mul   $dst, $tmp, $isrc\\n\\t\"\n+            \"umov  $tmp, $vsrc, S, 1\\n\\t\"\n+            \"mul   $dst, $tmp, $dst\\t# mul reduction2I\"',`\"ins   $vtmp, D, $vsrc, 0, 1\\n\\t\"\n+            \"mulv  $vtmp, T2S, $vtmp, $vsrc\\n\\t\"\n+            \"umov  $itmp, $vtmp, S, 0\\n\\t\"\n+            \"mul   $dst, $itmp, $isrc\\n\\t\"\n+            \"umov  $itmp, $vtmp, S, 1\\n\\t\"\n+            \"mul   $dst, $itmp, $dst\\t# mul reduction4I\"')\n+  %}\n+  ins_encode %{\n+    ifelse($1, 2, `__ umov($tmp$$Register, as_FloatRegister($vsrc$$reg), __ S, 0);\n+    __ mul($dst$$Register, $tmp$$Register, $isrc$$Register);\n+    __ umov($tmp$$Register, as_FloatRegister($vsrc$$reg), __ S, 1);\n+    __ mul($dst$$Register, $tmp$$Register, $dst$$Register);', `__ ins(as_FloatRegister($vtmp$$reg), __ D,\n+           as_FloatRegister($vsrc$$reg), 0, 1);\n+    __ mulv(as_FloatRegister($vtmp$$reg), __ T2S,\n+            as_FloatRegister($vtmp$$reg), as_FloatRegister($vsrc$$reg));\n+    __ umov($itmp$$Register, as_FloatRegister($vtmp$$reg), __ S, 0);\n+    __ mul($dst$$Register, $itmp$$Register, $isrc$$Register);\n+    __ umov($itmp$$Register, as_FloatRegister($vtmp$$reg), __ S, 1);\n+    __ mul($dst$$Register, $itmp$$Register, $dst$$Register);')\n+  %}\n+  ins_pipe(pipe_class_default);\n+%}')dnl\n+dnl            $1 $2 $3\n+REDUCE_MUL_INT(2, I, D)\n+REDUCE_MUL_INT(4, I, X)\n+dnl\n+define(`REDUCE_MULORADD_FORD', `\n+instruct reduce_$6$2$3`'(vReg$3 dst, vReg$3 $4src, vec$5 vsrc, vec$5 tmp)\n+%{\n+  match(Set dst (ifelse($6, add, Add, Mul)ReductionV$3 $4src vsrc));\n+  ins_cost(INSN_COST);\n+  effect(TEMP tmp, TEMP dst);\n+  format %{ \"$1 $dst, $$4src, $vsrc\\n\\t\"\n+            \"ins   $tmp, ifelse($3, F, S, D), $vsrc, 0, 1\\n\\t\"\n+            ifelse($2, 2, `\"$1 $dst, $dst, $tmp\\t# $6 reduction$2$3\"',\n+            `\"$1 $dst, $dst, $tmp\\n\\t\"\n+            \"ins   $tmp, S, $vsrc, 0, 2\\n\\t\"\n+            \"$1 $dst, $dst, $tmp\\n\\t\"\n+            \"ins   $tmp, S, $vsrc, 0, 3\\n\\t\"\n+            \"$1 $dst, $dst, $tmp\\t# $6 reduction4F\"')\n+  %}\n+  ins_encode %{\n+    __ $1(as_FloatRegister($dst$$reg),\n+             as_FloatRegister($$4src$$reg), as_FloatRegister($vsrc$$reg));\n+    __ ins(as_FloatRegister($tmp$$reg), __ ifelse($3, F, S, D),\n+           as_FloatRegister($vsrc$$reg), 0, 1);\n+    __ $1(as_FloatRegister($dst$$reg),\n+             as_FloatRegister($dst$$reg), as_FloatRegister($tmp$$reg));ifelse($2, 4, `\n+    __ ins(as_FloatRegister($tmp$$reg), __ ifelse($3, F, S, D),\n+           as_FloatRegister($vsrc$$reg), 0, 2);\n+    __ $1(as_FloatRegister($dst$$reg),\n+             as_FloatRegister($dst$$reg), as_FloatRegister($tmp$$reg));\n+    __ ins(as_FloatRegister($tmp$$reg), __ S,\n+           as_FloatRegister($vsrc$$reg), 0, 3);\n+    __ $1(as_FloatRegister($dst$$reg),\n+             as_FloatRegister($dst$$reg), as_FloatRegister($tmp$$reg));')\n+  %}\n+  ins_pipe(pipe_class_default);\n+%}')dnl\n+dnl                  $1     $2 $3 $4 $5 $6\n+REDUCE_MULORADD_FORD(fadds, 2, F, f, D, add)\n+REDUCE_MULORADD_FORD(fadds, 4, F, f, X, add)\n+REDUCE_MULORADD_FORD(fmuls, 2, F, f, D, mul)\n+REDUCE_MULORADD_FORD(fmuls, 4, F, f, X, mul)\n+REDUCE_MULORADD_FORD(faddd, 2, D, d, X, add)\n+REDUCE_MULORADD_FORD(fmuld, 2, D, d, X, mul)\n+\n+\/\/ ====================VECTOR ARITHMETIC=======================================\n+\n+\/\/ --------------------------------- ADD --------------------------------------\n+define(`VADD', `\n+instruct vadd$2$3`'(vec$4 dst, vec$4 src1, vec$4 src2)\n+%{ifelse($2$3, 8B, `\n+  predicate(n->as_Vector()->length() == 4 ||\n+            n->as_Vector()->length() == 8);',\n+         $2$3, 4S, `\n+  predicate(n->as_Vector()->length() == 2 ||\n+            n->as_Vector()->length() == 4);',\n+         $2$5, 2D, , `\n+  predicate(n->as_Vector()->length() == $2);')\n+  match(Set dst (AddV$3 src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"$1  $dst,$src1,$src2\\t# vector ($2$5)\" %}\n+  ins_encode %{\n+    __ $1(as_FloatRegister($dst$$reg), __ T$2`'ifelse($5, L, D, $5),\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vdop`'ifelse($3, F, _fp, $3, D, _fp)`'ifelse($4, D, 64, 128));\n+%}')dnl\n+dnl  $1    $2  $3 $4 $5\n+VADD(addv, 8,  B, D, B)\n+VADD(addv, 16, B, X, B)\n+VADD(addv, 4,  S, D, H)\n+VADD(addv, 8,  S, X, H)\n+VADD(addv, 2,  I, D, S)\n+VADD(addv, 4,  I, X, S)\n+VADD(addv, 2,  L, X, L)\n+VADD(fadd, 2,  F, D, S)\n+VADD(fadd, 4,  F, X, S)\n+VADD(fadd, 2,  D, X, D)\n+\n+\/\/ --------------------------------- SUB --------------------------------------\n+define(`VSUB', `\n+instruct vsub$2$3`'(vec$4 dst, vec$4 src1, vec$4 src2)\n+%{ifelse($2$3, 8B, `\n+  predicate(n->as_Vector()->length() == 4 ||\n+            n->as_Vector()->length() == 8);',\n+         $2$3, 4S, `\n+  predicate(n->as_Vector()->length() == 2 ||\n+            n->as_Vector()->length() == 4);',`\n+  predicate(n->as_Vector()->length() == $2);')\n+  match(Set dst (SubV$3 src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"$1  $dst,$src1,$src2\\t# vector ($2$5)\" %}\n+  ins_encode %{\n+    __ $1(as_FloatRegister($dst$$reg), __ T$2`'ifelse($5, L, D, $5),\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vdop`'ifelse($3, F, _fp, $3, D, _fp)`'ifelse($4, D, 64, 128));\n+%}')dnl\n+dnl  $1    $2  $3 $4 $5\n+VSUB(subv, 8,  B, D, B)\n+VSUB(subv, 16, B, X, B)\n+VSUB(subv, 4,  S, D, H)\n+VSUB(subv, 8,  S, X, H)\n+VSUB(subv, 2,  I, D, S)\n+VSUB(subv, 4,  I, X, S)\n+VSUB(subv, 2,  L, X, L)\n+VSUB(fsub, 2,  F, D, S)\n+VSUB(fsub, 4,  F, X, S)\n+VSUB(fsub, 2,  D, X, D)\n+\n+\/\/ --------------------------------- MUL --------------------------------------\n+define(`VMUL', `\n+instruct vmul$2$3`'(vec$4 dst, vec$4 src1, vec$4 src2)\n+%{ifelse($2$3, 8B, `\n+  predicate(n->as_Vector()->length() == 4 ||\n+            n->as_Vector()->length() == 8);',\n+         $2$3, 4S, `\n+  predicate(n->as_Vector()->length() == 2 ||\n+            n->as_Vector()->length() == 4);',`\n+  predicate(n->as_Vector()->length() == $2);')\n+  match(Set dst (MulV$3 src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"$1  $dst,$src1,$src2\\t# vector ($2$5)\" %}\n+  ins_encode %{\n+    __ $1(as_FloatRegister($dst$$reg), __ T$2`'ifelse($5, L, D, $5),\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vmul`'ifelse($3, F, div_fp, $3, D, div_fp)`'ifelse($4, D, 64, 128));\n+%}')dnl\n+dnl  $1    $2  $3 $4 $5\n+VMUL(mulv, 8,  B, D, B)\n+VMUL(mulv, 16, B, X, B)\n+VMUL(mulv, 4,  S, D, H)\n+VMUL(mulv, 8,  S, X, H)\n+VMUL(mulv, 2,  I, D, S)\n+VMUL(mulv, 4,  I, X, S)\n+VMUL(fmul, 2,  F, D, S)\n+VMUL(fmul, 4,  F, X, S)\n+VMUL(fmul, 2,  D, X, D)\n+\n+\/\/ --------------------------------- MLA --------------------------------------\n+define(`VMLA', `ifelse($1, fmla, `\n+\/\/ dst + src1 * src2')\n+instruct vmla$2$3`'(vec$4 dst, vec$4 src1, vec$4 src2)\n+%{ifelse($2$3, 4S, `\n+  predicate(n->as_Vector()->length() == 2 ||\n+            n->as_Vector()->length() == 4);', $1, fmla, `\n+  predicate(UseFMA && n->as_Vector()->length() == $2);', `\n+  predicate(n->as_Vector()->length() == $2);')\n+  match(Set dst (ifelse($1, mlav, `AddV'$3` dst (MulV$3 src1 src2)', FmaV$3  `dst (Binary src1 src2)')));\n+  ins_cost(INSN_COST);\n+  format %{ \"$1  $dst,$src1,$src2\\t# vector ($2$5)\" %}\n+  ins_encode %{\n+    __ $1(as_FloatRegister($dst$$reg), __ T$2`'ifelse($5, L, D, $5),\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vm`'ifelse($3, F, uldiv_fp, $3, D, uldiv_fp, la)`'ifelse($4, D, 64, 128));\n+%}')dnl\n+dnl  $1   $2  $3 $4 $5\n+VMLA(mlav, 4,  S, D, H)\n+VMLA(mlav, 8,  S, X, H)\n+VMLA(mlav, 2,  I, D, S)\n+VMLA(mlav, 4,  I, X, S)\n+VMLA(fmla, 2,  F, D, S)\n+VMLA(fmla, 4,  F, X, S)\n+VMLA(fmla, 2,  D, X, D)\n+\n+\/\/ --------------------------------- MLS --------------------------------------\n+define(`VMLS', `ifelse($1, fmls, `\n+\/\/ dst - src1 * src2')\n+instruct vmls$2$3`'(vec$4 dst, vec$4 src1, vec$4 src2) %{ifelse($2$3, 4S, `\n+  predicate(n->as_Vector()->length() == 2 ||\n+            n->as_Vector()->length() == 4);', $1, fmls, `\n+  predicate(UseFMA && n->as_Vector()->length() == $2);', `\n+  predicate(n->as_Vector()->length() == $2);')\n+  match(Set dst (ifelse($1, mlsv, `SubV'$3` dst (MulV$3 src1 src2)', FmaV$3  `dst (Binary (NegV'$3 `src1) src2)));\n+  match(Set dst (FmaV$3  dst (Binary src1 (NegV'$3 `src2))')));\n+  ins_cost(INSN_COST);\n+  format %{ \"$1  $dst,$src1,$src2\\t# vector ($2$5)\" %}\n+  ins_encode %{\n+    __ $1(as_FloatRegister($dst$$reg), __ T$2`'ifelse($5, L, D, $5),\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vm`'ifelse($3, F, uldiv_fp, $3, D, uldiv_fp, la)`'ifelse($4, D, 64, 128));\n+%}')dnl\n+dnl  $1   $2  $3 $4 $5\n+VMLS(mlsv, 4,  S, D, H)\n+VMLS(mlsv, 8,  S, X, H)\n+VMLS(mlsv, 2,  I, D, S)\n+VMLS(mlsv, 4,  I, X, S)\n+VMLS(fmls, 2,  F, D, S)\n+VMLS(fmls, 4,  F, X, S)\n+VMLS(fmls, 2,  D, X, D)\n+\n+\/\/ --------------- Vector Multiply-Add Shorts into Integer --------------------\n+\n+instruct vmuladdS2I(vecX dst, vecX src1, vecX src2, vecX tmp) %{\n+  predicate(n->in(1)->bottom_type()->is_vect()->element_basic_type() == T_SHORT);\n+  match(Set dst (MulAddVS2VI src1 src2));\n+  ins_cost(INSN_COST);\n+  effect(TEMP_DEF dst, TEMP tmp);\n+  format %{ \"smullv  $tmp, $src1, $src2\\t# vector (4H)\\n\\t\"\n+            \"smullv  $dst, $src1, $src2\\t# vector (8H)\\n\\t\"\n+            \"addpv   $dst, $tmp, $dst\\t# vector (4S)\\n\\t\" %}\n+  ins_encode %{\n+    __ smullv(as_FloatRegister($tmp$$reg), __ T4H,\n+              as_FloatRegister($src1$$reg),\n+              as_FloatRegister($src2$$reg));\n+    __ smullv(as_FloatRegister($dst$$reg), __ T8H,\n+              as_FloatRegister($src1$$reg),\n+              as_FloatRegister($src2$$reg));\n+    __ addpv(as_FloatRegister($dst$$reg), __ T4S,\n+             as_FloatRegister($tmp$$reg),\n+             as_FloatRegister($dst$$reg));\n+  %}\n+  ins_pipe(vmuldiv_fp128);\n+%}\n+\n+\/\/ --------------------------------- DIV --------------------------------------\n+define(`VDIV', `\n+instruct vdiv$2$3`'(vec$4 dst, vec$4 src1, vec$4 src2)\n+%{\n+  predicate(n->as_Vector()->length() == $2);\n+  match(Set dst (DivV$3 src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"$1  $dst,$src1,$src2\\t# vector ($2$5)\" %}\n+  ins_encode %{\n+    __ $1(as_FloatRegister($dst$$reg), __ T$2`'ifelse($5, L, D, $5),\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vmuldiv_fp`'ifelse($4, D, 64, 128));\n+%}')dnl\n+dnl  $1    $2  $3 $4 $5\n+VDIV(fdiv, 2,  F, D, S)\n+VDIV(fdiv, 4,  F, X, S)\n+VDIV(fdiv, 2,  D, X, D)\n+\n+\/\/ --------------------------------- SQRT -------------------------------------\n+define(`VSQRT', `\n+instruct vsqrt$2$3`'(vec$4 dst, vec$4 src)\n+%{\n+  predicate(n->as_Vector()->length() == $2);\n+  match(Set dst (SqrtV$3 src));\n+  format %{ \"$1  $dst, $src\\t# vector ($2$3)\" %}\n+  ins_encode %{\n+    __ $1(as_FloatRegister($dst$$reg), __ T$2$5, as_FloatRegister($src$$reg));\n+  %}\n+  ins_pipe(v`'ifelse($2$3, 2F, unop, sqrt)_fp`'ifelse($4, D, 64, 128));\n+%}')dnl\n+dnl  $1      $2  $3 $4 $5\n+VSQRT(fsqrt, 2,  F, D, S)\n+VSQRT(fsqrt, 4,  F, X, S)\n+VSQRT(fsqrt, 2,  D, X, D)\n+\n+\/\/ --------------------------------- NEG --------------------------------------\n+define(`VNEG', `\n+instruct vneg$2$3`'(vec$4 dst, vec$4 src)\n+%{\n+  predicate(n->as_Vector()->length() == $2);\n+  match(Set dst (NegV$3 src));\n+  ins_cost(INSN_COST * 3);\n+  format %{ \"$1  $dst,$src\\t# vector ($2$5)\" %}\n+  ins_encode %{\n+    __ $1(as_FloatRegister($dst$$reg), __ T$2`'ifelse($5, L, D, $5),\n+            as_FloatRegister($src$$reg));\n+  %}\n+  ins_pipe(vunop_fp`'ifelse($4, D, 64, 128));\n+%}')dnl\n+dnl  $1    $2  $3 $4 $5\n+VNEG(fneg, 2,  F, D, S)\n+VNEG(fneg, 4,  F, X, S)\n+VNEG(fneg, 2,  D, X, D)\n+dnl\n+define(`VLOGICAL', `\n+instruct v$3$5$6`'(vec$7 dst, vec$7 src1, vec$7 src2)\n+%{\n+  predicate(ifelse($5, 8, n->as_Vector()->length_in_bytes() == 4 ||`\n+            ')n->as_Vector()->length_in_bytes() == $5);\n+  match(Set dst ($4V src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"$1  $dst,$src1,$src2\\t# vector ($5$6)\" %}\n+  ins_encode %{\n+    __ $2(as_FloatRegister($dst$$reg), __ T$5$6,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vlogical`'ifelse($7, D, 64, 128));\n+%}')dnl\n+\n+\/\/ --------------------------------- AND --------------------------------------\n+dnl     $1    $2    $3   $4   $5  $6 $7\n+VLOGICAL(and, andr, and, And, 8,  B, D)\n+VLOGICAL(and, andr, and, And, 16, B, X)\n+\n+\/\/ --------------------------------- OR ---------------------------------------\n+VLOGICAL(orr, orr,  or,  Or,  8,  B, D)\n+VLOGICAL(orr, orr,  or,  Or,  16, B, X)\n+\n+\/\/ --------------------------------- XOR --------------------------------------\n+VLOGICAL(xor, eor,  xor, Xor, 8,  B, D)\n+VLOGICAL(xor, eor,  xor, Xor, 16, B, X)\n+\n+\/\/ ------------------------------ Shift ---------------------------------------\n+dnl\n+define(`VSHIFTCNT', `\n+instruct vshiftcnt$3$4`'(vec$5 dst, iRegIorL2I cnt) %{\n+  predicate(ifelse($3, 8, n->as_Vector()->length_in_bytes() == 4 ||`\n+            ')n->as_Vector()->length_in_bytes() == $3);\n+  match(Set dst (LShiftCntV cnt));\n+  match(Set dst (RShiftCntV cnt));\n+  format %{ \"$1  $dst, $cnt\\t# shift count vector ($3$4)\" %}\n+  ins_encode %{\n+    __ $2(as_FloatRegister($dst$$reg), __ T$3$4, as_Register($cnt$$reg));\n+  %}\n+  ins_pipe(vdup_reg_reg`'ifelse($5, D, 64, 128));\n+%}')dnl\n+dnl       $1   $2   $3  $4 $5\n+VSHIFTCNT(dup, dup, 8,  B, D)\n+VSHIFTCNT(dup, dup, 16, B, X)\n+dnl\n+define(`VSLL', `\n+instruct vsll$3$4`'(vec$6 dst, vec$6 src, vec$6 shift) %{\n+  predicate(ifelse($3$4, 8B, n->as_Vector()->length() == 4 ||`\n+            ',\n+  $3$4, 4S, n->as_Vector()->length() == 2 ||`\n+            ')n->as_Vector()->length() == $3);\n+  match(Set dst (LShiftV$4 src shift));\n+  ins_cost(INSN_COST);\n+  format %{ \"$1  $dst,$src,$shift\\t# vector ($3$5)\" %}\n+  ins_encode %{\n+    __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($shift$$reg));\n+  %}\n+  ins_pipe(vshift`'ifelse($6, D, 64, 128));\n+%}')dnl\n+dnl\n+define(`VSRA', `\n+instruct vsra$3$4`'(vec$6 dst, vec$6 src, vec$6 shift, vec$6 tmp) %{\n+  predicate(ifelse($3$4, 8B, n->as_Vector()->length() == 4 ||`\n+            ',\n+  $3$4, 4S, n->as_Vector()->length() == 2 ||`\n+            ')n->as_Vector()->length() == $3);\n+  match(Set dst (RShiftV$4 src shift));\n+  ins_cost(INSN_COST);\n+  effect(TEMP tmp);\n+  format %{ \"$1  $tmp,$shift\\t\"\n+            \"$2  $dst,$src,$tmp\\t# vector ($3$5)\" %}\n+  ins_encode %{\n+    __ $1(as_FloatRegister($tmp$$reg), __ T`'ifelse($6, D, 8B, 16B),\n+            as_FloatRegister($shift$$reg));\n+    __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($tmp$$reg));\n+  %}\n+  ins_pipe(vshift`'ifelse($6, D, 64, 128));\n+%}')dnl\n+dnl\n+define(`VSRL', `\n+instruct vsrl$3$4`'(vec$6 dst, vec$6 src, vec$6 shift, vec$6 tmp) %{\n+  predicate(ifelse($3$4, 8B, n->as_Vector()->length() == 4 ||`\n+            ',\n+  $3$4, 4S, n->as_Vector()->length() == 2 ||`\n+            ')n->as_Vector()->length() == $3);\n+  match(Set dst (URShiftV$4 src shift));\n+  ins_cost(INSN_COST);\n+  effect(TEMP tmp);\n+  format %{ \"$1  $tmp,$shift\\t\"\n+            \"$2  $dst,$src,$tmp\\t# vector ($3$5)\" %}\n+  ins_encode %{\n+    __ $1(as_FloatRegister($tmp$$reg), __ T`'ifelse($6, D, 8B, 16B),\n+            as_FloatRegister($shift$$reg));\n+    __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+            as_FloatRegister($src$$reg),\n+            as_FloatRegister($tmp$$reg));\n+  %}\n+  ins_pipe(vshift`'ifelse($6, D, 64, 128));\n+%}')dnl\n+dnl\n+define(`VSLL_IMM', `\n+instruct vsll$3$4_imm`'(vec$6 dst, vec$6 src, immI shift) %{\n+  predicate(ifelse($3$4, 8B, n->as_Vector()->length() == 4 ||`\n+            ',\n+  $3$4, 4S, n->as_Vector()->length() == 2 ||`\n+            ')n->as_Vector()->length() == $3);\n+  match(Set dst (LShiftV$4 src (LShiftCntV shift)));\n+  ins_cost(INSN_COST);\n+  format %{ \"$1    $dst, $src, $shift\\t# vector ($3$5)\" %}\n+  ins_encode %{ifelse($4, B,`\n+    int sh = (int)$shift$$constant;\n+    if (sh >= 8) {\n+      __ eor(as_FloatRegister($dst$$reg), __ ifelse($6, D, T8B, T16B),\n+             as_FloatRegister($src$$reg),\n+             as_FloatRegister($src$$reg));\n+    } else {\n+      __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+             as_FloatRegister($src$$reg), sh);\n+    }', $4, S,`\n+    int sh = (int)$shift$$constant;\n+    if (sh >= 16) {\n+      __ eor(as_FloatRegister($dst$$reg), __ ifelse($6, D, T8B, T16B),\n+             as_FloatRegister($src$$reg),\n+             as_FloatRegister($src$$reg));\n+    } else {\n+      __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+             as_FloatRegister($src$$reg), sh);\n+    }', `\n+    __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+           as_FloatRegister($src$$reg),\n+           (int)$shift$$constant);')\n+  %}\n+  ins_pipe(vshift`'ifelse($6, D, 64, 128)_imm);\n+%}')dnl\n+define(`VSRA_IMM', `\n+instruct vsra$3$4_imm`'(vec$6 dst, vec$6 src, immI shift) %{\n+  predicate(ifelse($3$4, 8B, n->as_Vector()->length() == 4 ||`\n+            ',\n+  $3$4, 4S, n->as_Vector()->length() == 2 ||`\n+            ')n->as_Vector()->length() == $3);\n+  match(Set dst (RShiftV$4 src (RShiftCntV shift)));\n+  ins_cost(INSN_COST);\n+  format %{ \"$1    $dst, $src, $shift\\t# vector ($3$5)\" %}\n+  ins_encode %{ifelse($4, B,`\n+    int sh = (int)$shift$$constant;\n+    if (sh >= 8) sh = 7;\n+    __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+           as_FloatRegister($src$$reg), sh);', $4, S,`\n+    int sh = (int)$shift$$constant;\n+    if (sh >= 16) sh = 15;\n+    __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+           as_FloatRegister($src$$reg), sh);', `\n+    __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+            as_FloatRegister($src$$reg),\n+            (int)$shift$$constant);')\n+  %}\n+  ins_pipe(vshift`'ifelse($6, D, 64, 128)_imm);\n+%}')dnl\n+dnl\n+define(`VSRL_IMM', `\n+instruct vsrl$3$4_imm`'(vec$6 dst, vec$6 src, immI shift) %{\n+  predicate(ifelse($3$4, 8B, n->as_Vector()->length() == 4 ||`\n+            ',\n+  $3$4, 4S, n->as_Vector()->length() == 2 ||`\n+            ')n->as_Vector()->length() == $3);\n+  match(Set dst (URShiftV$4 src (RShiftCntV shift)));\n+  ins_cost(INSN_COST);\n+  format %{ \"$1    $dst, $src, $shift\\t# vector ($3$5)\" %}\n+  ins_encode %{ifelse($4, B,`\n+    int sh = (int)$shift$$constant;\n+    if (sh >= 8) {\n+      __ eor(as_FloatRegister($dst$$reg), __ ifelse($6, D, T8B, T16B),\n+             as_FloatRegister($src$$reg),\n+             as_FloatRegister($src$$reg));\n+    } else {\n+      __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+             as_FloatRegister($src$$reg), sh);\n+    }', $4, S,`\n+    int sh = (int)$shift$$constant;\n+    if (sh >= 16) {\n+      __ eor(as_FloatRegister($dst$$reg), __ ifelse($6, D, T8B, T16B),\n+             as_FloatRegister($src$$reg),\n+             as_FloatRegister($src$$reg));\n+    } else {\n+      __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+             as_FloatRegister($src$$reg), sh);\n+    }', `\n+    __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+            as_FloatRegister($src$$reg),\n+            (int)$shift$$constant);')\n+  %}\n+  ins_pipe(vshift`'ifelse($6, D, 64, 128)_imm);\n+%}')dnl\n+dnl\n+define(`VSRLA_IMM', `\n+instruct vsrla$3$4_imm`'(vec$6 dst, vec$6 src, immI shift) %{\n+  predicate(n->as_Vector()->length() == $3);\n+  match(Set dst (AddV$4 dst (URShiftV$4 src (RShiftCntV shift))));\n+  ins_cost(INSN_COST);\n+  format %{ \"$1    $dst, $src, $shift\\t# vector ($3$5)\" %}\n+  ins_encode %{ifelse($4, B,`\n+    int sh = (int)$shift$$constant;\n+    if (sh < 8) {\n+      __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+             as_FloatRegister($src$$reg), sh);\n+    }', $4, S,`\n+    int sh = (int)$shift$$constant;\n+    if (sh < 16) {\n+      __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+             as_FloatRegister($src$$reg), sh);\n+    }', `\n+    __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+            as_FloatRegister($src$$reg),\n+            (int)$shift$$constant);')\n+  %}\n+  ins_pipe(vshift`'ifelse($6, D, 64, 128)_imm);\n+%}')dnl\n+dnl\n+define(`VSRAA_IMM', `\n+instruct vsraa$3$4_imm`'(vec$6 dst, vec$6 src, immI shift) %{\n+  predicate(n->as_Vector()->length() == $3);\n+  match(Set dst (AddV$4 dst (RShiftV$4 src (RShiftCntV shift))));\n+  ins_cost(INSN_COST);\n+  format %{ \"$1    $dst, $src, $shift\\t# vector ($3$5)\" %}\n+  ins_encode %{ifelse($4, B,`\n+    int sh = (int)$shift$$constant;\n+    if (sh >= 8) sh = 7;\n+    __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+           as_FloatRegister($src$$reg), sh);', $4, S,`\n+    int sh = (int)$shift$$constant;\n+    if (sh >= 16) sh = 15;\n+    __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+           as_FloatRegister($src$$reg), sh);', `\n+    __ $2(as_FloatRegister($dst$$reg), __ T$3$5,\n+            as_FloatRegister($src$$reg),\n+            (int)$shift$$constant);')\n+  %}\n+  ins_pipe(vshift`'ifelse($6, D, 64, 128)_imm);\n+%}')dnl\n+dnl  $1    $2    $3  $4 $5 $6\n+VSLL(sshl, sshl, 8,  B, B, D)\n+VSLL(sshl, sshl, 16, B, B, X)\n+\n+\/\/ Right shifts with vector shift count on aarch64 SIMD are implemented\n+\/\/ as left shift by negative shift count.\n+\/\/ There are two cases for vector shift count.\n+\/\/\n+\/\/ Case 1: The vector shift count is from replication.\n+\/\/        |            |\n+\/\/    LoadVector  RShiftCntV\n+\/\/        |       \/\n+\/\/     RShiftVI\n+\/\/ Note: In inner loop, multiple neg instructions are used, which can be\n+\/\/ moved to outer loop and merge into one neg instruction.\n+\/\/\n+\/\/ Case 2: The vector shift count is from loading.\n+\/\/ This case isn't supported by middle-end now. But it's supported by\n+\/\/ panama\/vectorIntrinsics(JEP 338: Vector API).\n+\/\/        |            |\n+\/\/    LoadVector  LoadVector\n+\/\/        |       \/\n+\/\/     RShiftVI\n+\/\/\n+dnl  $1    $2    $3  $4 $5 $6\n+VSRA(negr, sshl, 8,  B, B, D)\n+VSRA(negr, sshl, 16, B, B, X)\n+VSRL(negr, ushl, 8,  B, B, D)\n+VSRL(negr, ushl, 16, B, B, X)\n+VSLL_IMM(shl, shl, 8,  B, B, D)\n+VSLL_IMM(shl, shl, 16, B, B, X)\n+VSRA_IMM(sshr, sshr, 8,  B, B, D)\n+VSRA_IMM(sshr, sshr, 16, B, B, X)\n+VSRL_IMM(ushr, ushr, 8,  B, B, D)\n+VSRL_IMM(ushr, ushr, 16, B, B, X)\n+VSLL(sshl, sshl, 4,  S, H, D)\n+VSLL(sshl, sshl, 8,  S, H, X)\n+VSRA(negr, sshl, 4,  S, H, D)\n+VSRA(negr, sshl, 8,  S, H, X)\n+VSRL(negr, ushl, 4,  S, H, D)\n+VSRL(negr, ushl, 8,  S, H, X)\n+VSLL_IMM(shl, shl, 4,  S, H, D)\n+VSLL_IMM(shl, shl, 8,  S, H, X)\n+VSRA_IMM(sshr, sshr, 4,  S, H, D)\n+VSRA_IMM(sshr, sshr, 8,  S, H, X)\n+VSRL_IMM(ushr, ushr, 4,  S, H, D)\n+VSRL_IMM(ushr, ushr, 8,  S, H, X)\n+VSLL(sshl, sshl, 2,  I, S, D)\n+VSLL(sshl, sshl, 4,  I, S, X)\n+VSRA(negr, sshl, 2,  I, S, D)\n+VSRA(negr, sshl, 4,  I, S, X)\n+VSRL(negr, ushl, 2,  I, S, D)\n+VSRL(negr, ushl, 4,  I, S, X)\n+VSLL_IMM(shl, shl, 2,  I, S, D)\n+VSLL_IMM(shl, shl, 4,  I, S, X)\n+VSRA_IMM(sshr, sshr, 2,  I, S, D)\n+VSRA_IMM(sshr, sshr, 4,  I, S, X)\n+VSRL_IMM(ushr, ushr, 2,  I, S, D)\n+VSRL_IMM(ushr, ushr, 4,  I, S, X)\n+VSLL(sshl, sshl, 2,  L, D, X)\n+VSRA(negr, sshl, 2,  L, D, X)\n+VSRL(negr, ushl, 2,  L, D, X)\n+VSLL_IMM(shl, shl, 2,  L, D, X)\n+VSRA_IMM(sshr, sshr, 2,  L, D, X)\n+VSRL_IMM(ushr, ushr, 2,  L, D, X)\n+VSRAA_IMM(ssra, ssra, 8,  B, B, D)\n+VSRAA_IMM(ssra, ssra, 16, B, B, X)\n+VSRAA_IMM(ssra, ssra, 4,  S, H, D)\n+VSRAA_IMM(ssra, ssra, 8,  S, H, X)\n+VSRAA_IMM(ssra, ssra, 2,  I, S, D)\n+VSRAA_IMM(ssra, ssra, 4,  I, S, X)\n+VSRAA_IMM(ssra, ssra, 2,  L, D, X)\n+VSRLA_IMM(usra, usra, 8,  B, B, D)\n+VSRLA_IMM(usra, usra, 16, B, B, X)\n+VSRLA_IMM(usra, usra, 4,  S, H, D)\n+VSRLA_IMM(usra, usra, 8,  S, H, X)\n+VSRLA_IMM(usra, usra, 2,  I, S, D)\n+VSRLA_IMM(usra, usra, 4,  I, S, X)\n+VSRLA_IMM(usra, usra, 2,  L, D, X)\n+dnl\n+define(`VMINMAX', `\n+instruct v$1$3`'ifelse($5, S, F, D)`'(vec$6 dst, vec$6 src1, vec$6 src2)\n+%{\n+  predicate(n->as_Vector()->length() == $3 && n->bottom_type()->is_vect()->element_basic_type() == T_`'ifelse($5, S, FLOAT, DOUBLE));\n+  match(Set dst ($2V src1 src2));\n+  ins_cost(INSN_COST);\n+  format %{ \"f$1  $dst,$src1,$src2\\t# vector ($3$4)\" %}\n+  ins_encode %{\n+    __ f$1(as_FloatRegister($dst$$reg), __ T$3$5,\n+            as_FloatRegister($src1$$reg),\n+            as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vdop_fp`'ifelse($6, D, 64, 128));\n+%}')dnl\n+dnl     $1   $2   $3 $4 $5 $6\n+VMINMAX(max, Max, 2, F, S, D)\n+VMINMAX(max, Max, 4, S, S, X)\n+VMINMAX(max, Max, 2, D, D, X)\n+VMINMAX(min, Min, 2, F, S, D)\n+VMINMAX(min, Min, 4, S, S, X)\n+VMINMAX(min, Min, 2, D, D, X)\n+\n+instruct vround2D_reg(vecX dst, vecX src, immI rmode) %{\n+  predicate(n->as_Vector()->length() == 2 && n->bottom_type()->is_vect()->element_basic_type() == T_DOUBLE);\n+  match(Set dst (RoundDoubleModeV src rmode));\n+  format %{ \"frint  $dst, $src, $rmode\" %}\n+  ins_encode %{\n+    switch ($rmode$$constant) {\n+      case RoundDoubleModeNode::rmode_rint:\n+        __ frintn(as_FloatRegister($dst$$reg), __ T2D,\n+                  as_FloatRegister($src$$reg));\n+        break;\n+      case RoundDoubleModeNode::rmode_floor:\n+        __ frintm(as_FloatRegister($dst$$reg), __ T2D,\n+                  as_FloatRegister($src$$reg));\n+        break;\n+      case RoundDoubleModeNode::rmode_ceil:\n+        __ frintp(as_FloatRegister($dst$$reg), __ T2D,\n+                  as_FloatRegister($src$$reg));\n+        break;\n+    }\n+  %}\n+  ins_pipe(vdop_fp128);\n+%}\n+dnl\n+define(`VPOPCOUNT', `\n+instruct vpopcount$1$2`'(vec$5 dst, vec$5 src) %{\n+  predicate(UsePopCountInstruction && n->as_Vector()->length() == $1);\n+  match(Set dst (PopCountVI src));\n+  format %{\n+    \"cnt     $dst, $src\\t# vector ($3B)\\n\\t\"\n+    \"uaddlp  $dst, $dst\\t# vector ($3B)\\n\\t\"\n+    \"uaddlp  $dst, $dst\\t# vector ($4H)\"\n+  %}\n+  ins_encode %{\n+    __ cnt(as_FloatRegister($dst$$reg), __ T$3B,\n+           as_FloatRegister($src$$reg));\n+    __ uaddlp(as_FloatRegister($dst$$reg), __ T$3B,\n+              as_FloatRegister($dst$$reg));\n+    __ uaddlp(as_FloatRegister($dst$$reg), __ T$4H,\n+              as_FloatRegister($dst$$reg));\n+  %}\n+  ins_pipe(pipe_class_default);\n+%}')dnl\n+dnl       $1 $2 $3  $4 $5\n+VPOPCOUNT(4, I, 16, 8, X)\n+VPOPCOUNT(2, I, 8,  4, D)\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon_ad.m4","additions":804,"deletions":20,"binary":false,"changes":824,"status":"modified"}]}