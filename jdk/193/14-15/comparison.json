{"files":[{"patch":"@@ -86,1 +86,2 @@\n-    \/\/ The exception message and stacktrace have been printed out already\n+    log_info(cds)(\"%s: %s\", THREAD->pending_exception()->klass()->external_name(),\n+                            java_lang_String::as_utf8_string(java_lang_Throwable::message(THREAD->pending_exception())));\n","filename":"src\/hotspot\/share\/classfile\/lambdaFormInvokers.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -60,2 +60,2 @@\n-                     shortenSignature(basicTypeSignature(type)) +\n-                     (resolvedMember != null ? \" (success)\" : \" (fail)\"));\n+                    shortenSignature(basicTypeSignature(type)) +\n+                    (resolvedMember != null ? \" (success)\" : \" (fail)\"));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/GenerateJLIClassesHelper.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-    static private final boolean isDumpingClassList;\n+    private static final boolean isDumpingClassList;\n@@ -155,1 +155,1 @@\n-                    throw new IllegalArgumentException(\"Incorrecct number of items in the line: \" + parts.length);\n+                    throw new IllegalArgumentException(\"Incorrect number of items in the line: \" + parts.length);\n@@ -176,1 +176,1 @@\n-    private static Object[] generateLambdaFormHolderClasses(String[] lines) throws Exception {\n+    private static Object[] generateLambdaFormHolderClasses(String[] lines) {\n@@ -178,21 +178,11 @@\n-        try {\n-            validateInputLines(lines);\n-            Stream<String> lineStream = Arrays.stream(lines).map(String::trim);\n-            Map<String, byte[]> result = SharedSecrets.getJavaLangInvokeAccess().generateHolderClasses(lineStream);\n-            int size = result.size();\n-            Object[] retArray = new Object[size * 2];\n-            int index = 0;\n-            for (Map.Entry<String, byte[]> entry : result.entrySet()) {\n-                retArray[index++] = entry.getKey();\n-                retArray[index++] = entry.getValue();\n-            };\n-            return retArray;\n-        } catch (Exception e) {\n-            \/\/ This method is only used by CDS, for debug\/trace purpose, we print out the exception message and\n-            \/\/ stack trace here since in vm we need more code to do so.\n-            \/\/ for test purpose\n-            System.out.println(\"Exception: \" + e);\n-            \/\/ for debug purpose.\n-            e.printStackTrace();\n-            throw e;\n-        }\n+        validateInputLines(lines);\n+        Stream<String> lineStream = Arrays.stream(lines).map(String::trim);\n+        Map<String, byte[]> result = SharedSecrets.getJavaLangInvokeAccess().generateHolderClasses(lineStream);\n+        int size = result.size();\n+        Object[] retArray = new Object[size * 2];\n+        int index = 0;\n+        for (Map.Entry<String, byte[]> entry : result.entrySet()) {\n+            retArray[index++] = entry.getKey();\n+            retArray[index++] = entry.getValue();\n+        };\n+        return retArray;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/CDS.java","additions":14,"deletions":24,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-                \"Incorrecct number of items in the line: 3\");\n+                \"Incorrect number of items in the line: 3\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/DumpClassListWithLF.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}