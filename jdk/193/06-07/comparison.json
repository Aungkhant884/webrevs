{"files":[{"patch":"@@ -51,10 +51,0 @@\n-\/\/ trim white spaces from front and end of string.\n-char* trim(char* s) {\n-  assert(s != NULL && strlen(s) > 0, \"Must not be NULL\");\n-  while(isspace(*s)) s++;\n-  char* i = s + strlen(s);\n-  while(isspace(*--i));\n-  *(i+1) = '\\0';\n-  return s;\n-}\n-\n@@ -81,1 +71,1 @@\n-    Handle h_line = java_lang_String::create_from_str(trim(record), CHECK);\n+    Handle h_line = java_lang_String::create_from_str(record, CHECK);\n","filename":"src\/hotspot\/share\/classfile\/lambdaFormInvokers.cpp","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-                    (resolvedMember != null ? \" (success)\" : \" (fail)\");\n+                    (TRACE_RESOLVE ? (resolvedMember != null ? \" (success)\" : \" (fail)\") : \"\");\n@@ -73,1 +73,2 @@\n-            String traceSP = SPECIES_RESOLVE + \" \" + cn + (salvage != null ? \" (salvaged)\" : \" (generated)\");\n+            String traceSP = SPECIES_RESOLVE + \" \" + cn +\n+                    (TRACE_RESOLVE ? (salvage != null ? \" (salvaged)\" : \" (generated)\") : \"\");\n@@ -94,0 +95,1 @@\n+    static final String DIRECT_HOLDER_CLASS_NAME = DIRECT_HOLDER.replace('\/', '.');\n@@ -95,0 +97,1 @@\n+    static final String DELEGATING_HOLDER_CLASS_NAME = DELEGATING_HOLDER.replace('\/', '.');\n@@ -96,0 +99,1 @@\n+    static final String BASIC_FORMS_HOLDER_CLASS_NAME = BASIC_FORMS_HOLDER.replace('\/', '.');\n@@ -324,1 +328,1 @@\n-    static Map<String, byte[]> generateHolderClasses(Stream<String> traces)  {\n+    static Map<String, byte[]> generateHolderClasses(Stream<String> traces, boolean isFromCDS)  {\n@@ -332,1 +336,5 @@\n-                            assert parts.length == 3;\n+                            if (isFromCDS) {\n+                                assert parts.length == 2;\n+                            } else {\n+                                assert parts.length == 3;\n+                            }\n@@ -366,0 +374,55 @@\n+    private static boolean isValidHolderName(String name) {\n+        return name.equals(DIRECT_HOLDER_CLASS_NAME)      ||\n+               name.equals(DELEGATING_HOLDER_CLASS_NAME)  ||\n+               name.equals(BASIC_FORMS_HOLDER_CLASS_NAME) ||\n+               name.equals(INVOKERS_HOLDER_CLASS_NAME);\n+    }\n+\n+    private static String[] END_WORDS = {\"(success)\", \"(fail)\", \"(generated)\", \"(salvaged)\"};\n+    \/\/ The line could ended with END_WORDS.\n+    private static String cdsGetString(String str) {\n+        for (String s : END_WORDS) {\n+            if (str.contains(s)) {\n+                return str.replace(s, \"\").trim();\n+            }\n+        }\n+        return str.trim();\n+    }\n+\n+    \/\/ return the valid lines, called from cdsGenerateHolderClasses which is called only from vm.\n+    \/\/ return null for invalid input\n+    private static Stream<String>  validateInputLines(String[] lines) {\n+        ArrayList<String> list = new ArrayList<String>(lines.length);\n+        for (String s: lines) {\n+            System.out.println(\"1X: \" + s);\n+            String line = cdsGetString(s);\n+            System.out.println(\"1Y: \" + line);\n+            if (!line.startsWith(\"[LF_RESOLVE]\") && !line.startsWith(\"[SPECIES_RESOLVE]\")) {\n+                System.out.println(\"Wrong prefix: \" + line);\n+                return null;\n+            }\n+\n+            String[] parts = line.split(\" \");\n+            boolean isLF = line.startsWith(\"[LF_RESOLVE]\");\n+\n+            if (isLF) {\n+                if (parts.length != 4) {\n+                    System.out.println(\"Incorrecct number of items in the line: \" + parts.length);\n+                    System.out.println(\"line: \" + line);\n+                    return null;\n+                }\n+                if (!isValidHolderName(parts[1])) {\n+                    System.out.println(\"Invalid holder class name: \" + parts[1]);\n+                    return null;\n+                }\n+            } else {\n+                if (parts.length != 2) {\n+                   System.out.println(\"Incorrect number of items in the line: \" + parts.length);\n+                   return null;\n+                }\n+           }\n+           list.add(line);\n+      }\n+      return list.stream();\n+    }\n+\n@@ -372,0 +435,1 @@\n+        Objects.requireNonNull(lines);\n@@ -373,1 +437,6 @@\n-            Map<String, byte[]> result = generateHolderClasses(Arrays.stream(lines));\n+            Stream<String> validLines = validateInputLines(lines);\n+            if (validLines == null) {\n+                \/\/ invalid input, quit regeneration of holder classes\n+                return null;\n+            }\n+            Map<String, byte[]> result = generateHolderClasses(validLines, true);\n@@ -383,0 +452,1 @@\n+            e.printStackTrace();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/GenerateJLIClassesHelper.java","additions":75,"deletions":5,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -1768,1 +1768,1 @@\n-                return GenerateJLIClassesHelper.generateHolderClasses(traces);\n+                return GenerateJLIClassesHelper.generateHolderClasses(traces, false\/*not from cds*\/);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}