{"files":[{"patch":"@@ -162,1 +162,1 @@\n-JVM_CDSTraceResolve\n+JVM_LogTraceResolve\n","filename":"make\/hotspot\/symbols\/symbols-unix","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,2 +49,0 @@\n-#include \"runtime\/os.hpp\"\n-#include \"runtime\/signature.hpp\"\n@@ -114,2 +112,1 @@\n-  Symbol* class_name = SymbolTable::probe((const char*)name, (int)strlen(name));\n-  assert(class_name != NULL, \"The class should be loaded already\");\n+  Symbol* class_name = SymbolTable::new_symbol((const char*)name);\n@@ -118,0 +115,1 @@\n+  assert(klass->is_instance_klass(), \"Should be\");\n@@ -156,6 +154,2 @@\n-  \/\/ find_class assert on SystemDictionary_lock or safepoint\n-  MutexLocker lock(SystemDictionary_lock);\n-  InstanceKlass* old = SystemDictionary::find_class(class_name, cld);\n-  assert(old != NULL, \"Should exist\");\n-  SystemDictionaryShared::set_excluded(old);\n-  log_info(cds)(\"Replace class %s, old: %p  new: %p\", name, old, result);\n+  SystemDictionaryShared::set_excluded(InstanceKlass::cast(klass));\n+  log_info(cds)(\"Replaced class %s, old: %p  new: %p\", name, klass, result);\n","filename":"src\/hotspot\/share\/classfile\/lambdaFormInvokers.cpp","additions":4,"deletions":10,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-#include \"memory\/allocation.hpp\"\n+#include \"memory\/allStatic.hpp\"\n@@ -29,1 +29,1 @@\n-#include \"utilities\/exceptions.hpp\"\n+\n","filename":"src\/hotspot\/share\/classfile\/lambdaFormInvokers.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1874,2 +1874,1 @@\n-            VerifyAfterGC       ||\n-            DumpSharedSpaces, \"too expensive\");\n+            VerifyAfterGC, \"too expensive\");\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -627,2 +627,0 @@\n-  \/\/ Find class based on name and class loader data.\n-  static InstanceKlass* find_class(Symbol* class_name, ClassLoaderData* loader_data);\n@@ -636,0 +634,1 @@\n+  static InstanceKlass* find_class(Symbol* class_name, ClassLoaderData* loader_data);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -213,1 +213,1 @@\n-JVM_CDSTraceResolve(JNIEnv* env, jclass ignored, jstring line);\n+JVM_LogTraceResolve(JNIEnv* env, jstring line);\n","filename":"src\/hotspot\/share\/include\/jvm.h","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3870,0 +3870,18 @@\n+JVM_ENTRY(jboolean, JVM_IsDumpLoadedClassListSetAndOpen(JNIEnv *env))\n+  JVMWrapper(\"JVM_IsDumpLoadedClassListSetAndOpen\");\n+  return DumpLoadedClassList != NULL && classlist_file->is_open();\n+JVM_END\n+\n+JVM_ENTRY(void, JVM_LogTraceResolve(JNIEnv *env, jstring line))\n+  JVMWrapper(\"JVM_LogTraceResolve\");\n+#if INCLUDE_CDS\n+  assert(DumpLoadedClassList != NULL && classlist_file->is_open(), \"Should be set and open\");\n+  if (line != NULL) {\n+    ResourceMark rm(THREAD);\n+    Handle h_line (THREAD, JNIHandles::resolve_non_null(line));\n+    char* c_line = java_lang_String::as_utf8_string(h_line());\n+    classlist_file->print_cr(\"%s %s\", LambdaFormInvokers::lambda_form_invoker_tag(), c_line);\n+  }\n+#endif \/\/ INCLUDE_CDS\n+JVM_END\n+\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.internal.misc.CDS;\n@@ -58,1 +59,1 @@\n-        if (TRACE_RESOLVE || VM.isDumpLoadedClassListSetAndOpen) {\n+        if (TRACE_RESOLVE || CDS.isDumpLoadedClassList()) {\n@@ -65,3 +66,1 @@\n-            if (VM.isDumpLoadedClassListSetAndOpen) {\n-                VM.cdsTraceResolve(traceLF);\n-            }\n+            CDS.logTraceResolve(traceLF);\n@@ -72,1 +71,1 @@\n-        if (TRACE_RESOLVE || VM.isDumpLoadedClassListSetAndOpen) {\n+        if (TRACE_RESOLVE || CDS.isDumpLoadedClassList()) {\n@@ -77,3 +76,1 @@\n-            if (VM.isDumpLoadedClassListSetAndOpen) {\n-                VM.cdsTraceResolve(traceSP);\n-            }\n+            CDS.logTraceResolve(traceSP);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/GenerateJLIClassesHelper.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -29,0 +29,9 @@\n+    \/\/ cache the result\n+    static private boolean isDumpLoadedClassList;\n+    static {\n+        isDumpLoadedClassList = isDumpLoadedClassListSetAndOpen();\n+    }\n+\n+    private static native boolean isDumpLoadedClassListSetAndOpen();\n+    private static native void logTraceResolve0(String line);\n+\n@@ -62,0 +71,16 @@\n+\n+    \/**\n+     * check if -XX:+DumpLoadedClassList and given file is open\n+     *\/\n+    public static boolean isDumpLoadedClassList() {\n+        return isDumpLoadedClassList;\n+    }\n+\n+    \/**\n+     * log output to DumpLoadedClassList\n+     *\/\n+    public static void logTraceResolve(String line) {\n+        if (isDumpLoadedClassList) {\n+            logTraceResolve0(line);\n+        }\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/CDS.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -457,1 +457,0 @@\n-        isDumpLoadedClassListSetAndOpen = isDumpLoadedClassListSetAndOpen0();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/VM.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -56,0 +56,10 @@\n+\n+JNIEXPORT jboolean JNICALL\n+Java_jdk_internal_misc_CDS_isDumpLoadedClassListSetAndOpen(JNIEnv *env, jclass jcls) {\n+    return JVM_IsDumpLoadedClassListSetAndOpen(env);\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_jdk_internal_misc_CDS_logTraceResolve0(JNIEnv *env, jclass jcls, jstring line) {\n+    JVM_LogTraceResolve(env, line);\n+}\n","filename":"src\/java.base\/share\/native\/libjava\/CDS.c","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -333,0 +333,1 @@\n+ -runtime\/cds\/appcds\/DumpClassListWithLF.java \\\n","filename":"test\/hotspot\/jtreg\/TEST.groups","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * Base class for ClassList, customerLoader\/ClassListFormat[A,B,C...].java\n+ * Base class for DumpClassListWithLF, customerLoader\/ClassListFormat[A,B,C...].java\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/ClassListFormatBase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-        \/\/ 2. The two lines with incorrect format of function signitures lead regeneration of holder class failed. \n+        \/\/ 2. The two lines with incorrect format of function signitures lead regeneration of holder class failed.\n@@ -63,1 +63,1 @@\n-                MESSAGE_NOT_OK); \n+                MESSAGE_NOT_OK);\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/DumpClassListWithLF.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @compile ClassListFormatBase.java ..\/test-classes\/Hello.java test-classes\/InProhibitedPkg.java\n+ * @compile ..\/ClassListFormatBase.java ..\/test-classes\/Hello.java test-classes\/InProhibitedPkg.java\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/customLoader\/ProhibitedPackageNamesTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}