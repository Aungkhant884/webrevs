{"files":[{"patch":"@@ -0,0 +1,141 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.nio;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n+import java.util.Arrays;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+\/**\n+ * Benchmark for {@code CharBuffer} implementations of the {@code Appendable}\n+ * methods which accept a {@code CharSequence} source.\n+ *\/\n+@Warmup(iterations = 5, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@State(Scope.Benchmark)\n+@Fork(1)\n+public class CharBufferAppend {\n+\n+    static final int SIZE = 8192;\n+\n+    static String str;\n+    static StringBuffer strbuf;\n+    static StringBuilder strbld;\n+    static CharBuffer hbDst;\n+    static CharBuffer hbSrc;\n+    static CharBuffer dbSrc;\n+    static CharBuffer dbDst;\n+\n+    static {\n+        char[] chars = new char[SIZE];\n+        Arrays.fill(chars, (char)27);\n+\n+        strbld = new StringBuilder(SIZE);\n+        strbld.append(chars);\n+\n+        str = strbld.toString();\n+\n+        strbuf = new StringBuffer(SIZE);\n+        strbuf.append(chars);\n+\n+        hbDst = CharBuffer.allocate(SIZE);\n+        hbSrc = CharBuffer.wrap(chars);\n+\n+        dbDst = ByteBuffer.allocateDirect(2*SIZE).asCharBuffer();\n+        dbSrc = ByteBuffer.allocateDirect(2*SIZE).asCharBuffer();\n+        dbSrc.put(chars);\n+        dbSrc.clear();\n+    };\n+\n+    @Benchmark\n+    public CharBuffer appendDirectToDirect() {\n+        dbDst.clear();\n+        dbSrc.clear();\n+        return dbDst.append(dbSrc);\n+    }\n+\n+    @Benchmark\n+    public CharBuffer appendDirectToHeap() {\n+        hbDst.clear();\n+        dbSrc.clear();\n+        return hbDst.append(dbSrc);\n+    }\n+\n+    @Benchmark\n+    public CharBuffer appendHeapToHeap() {\n+        hbDst.clear();\n+        hbSrc.clear();\n+        return hbDst.append(hbSrc);\n+    }\n+\n+    @Benchmark\n+    public CharBuffer appendHeapToDirect() {\n+        dbDst.clear();\n+        hbSrc.clear();\n+        return dbDst.append(hbSrc);\n+    }\n+\n+    @Benchmark\n+    public CharBuffer appendString() {\n+        hbDst.clear();\n+        return hbDst.append(str);\n+    }\n+\n+    @Benchmark\n+    public CharBuffer appendStringBuffer() {\n+        hbDst.clear();\n+        return hbDst.append(strbuf);\n+    }\n+\n+    @Benchmark\n+    public CharBuffer appendStringBuilder() {\n+        hbDst.clear();\n+        return hbDst.append(strbld);\n+    }\n+\n+    @Benchmark\n+    public CharBuffer appendSubString() {\n+        hbDst.clear();\n+        return hbDst.append(str, SIZE\/4, 3*SIZE\/4);\n+    }\n+\n+    @Benchmark\n+    public CharBuffer appendSubStringBuffer() {\n+        hbDst.clear();\n+        return hbDst.append(strbuf, SIZE\/4, 3*SIZE\/4);\n+    }\n+\n+    @Benchmark\n+    public CharBuffer appendSubStringBuilder() {\n+        hbDst.clear();\n+        return hbDst.append(strbld, SIZE\/4, 3*SIZE\/4);\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/nio\/CharBufferAppend.java","additions":141,"deletions":0,"binary":false,"changes":141,"status":"added"}]}