{"files":[{"patch":"@@ -283,3 +283,5 @@\n-    \/\/ This improves performance versus converting the StringBuilder to a\n-    \/\/ String and then appending the String as StringBuilder::toString\n-    \/\/ allocates memory for and copies all the contained chars\n+    \/\/ For a String or StringBuffer source this improves performance if\n+    \/\/ a proper subsequence is being appended as copying to a new intermediate\n+    \/\/ String object is avoided. For a StringBuilder where either a subsequence\n+    \/\/ or the full sequence of chars is being appended, copying the chars to\n+    \/\/ an intermedite String in StringBuilder::toString is avoided.\n@@ -287,1 +289,1 @@\n-    private $Type$Buffer append(StringBuilder sb, int start, int end) {\n+    private $Type$Buffer appendChars(CharSequence csq, int start, int end) {\n@@ -297,1 +299,8 @@\n-        sb.getChars(start, end, hb, ix(pos));\n+        if (csq instanceof StringBuilder bld) {\n+            bld.getChars(start, end, hb, ix(pos));\n+        } else if (csq instanceof String str) {\n+            str.getChars(start, end, hb, ix(pos));\n+        } else if (csq instanceof StringBuffer buf) {\n+            buf.getChars(start, end, hb, ix(pos));\n+        }\n+\n@@ -299,0 +308,1 @@\n+\n@@ -304,2 +314,2 @@\n-        if (csq instanceof StringBuilder sb)\n-            return append(sb, 0, sb.length());\n+        if (csq instanceof StringBuilder)\n+            return appendChars(csq, 0, csq.length());\n@@ -315,2 +325,6 @@\n-        if (csq instanceof StringBuilder sb)\n-            return append(sb, start, end);\n+        if (start == 0 && end == csq.length())\n+            return append(csq);\n+\n+        if (csq instanceof String || csq instanceof StringBuffer ||\n+            csq instanceof StringBuilder)\n+            return appendChars(csq, start, end);\n","filename":"src\/java.base\/share\/classes\/java\/nio\/Heap-X-Buffer.java.template","additions":23,"deletions":9,"binary":false,"changes":32,"status":"modified"}]}