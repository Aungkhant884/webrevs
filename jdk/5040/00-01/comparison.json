{"files":[{"patch":"@@ -61,2 +61,2 @@\n-  \/\/ Remove a chunk from the pool and return it; NULL if pool is empty.\n-  Chunk* remove_chunk() {\n+  \/\/ Allocate a chunk from the pool; returns NULL if pool is empty.\n+  Chunk* allocate() {\n@@ -73,1 +73,1 @@\n-  void return_chunk(Chunk* chunk) {\n+  void free(Chunk* chunk) {\n@@ -86,24 +86,22 @@\n-    {\n-      \/\/ if we have more than n chunks, free all of them\n-      ThreadCritical tc;\n-      if (_num_chunks > blocksToKeep) {\n-        \/\/ free chunks at end of queue, for better locality\n-        cur = _first;\n-        for (size_t i = 0; i < (blocksToKeep - 1) && cur != NULL; i++) {\n-          cur = cur->next();\n-        }\n-\n-        if (cur != NULL) {\n-          next = cur->next();\n-          cur->set_next(NULL);\n-          cur = next;\n-\n-          \/\/ Free all remaining chunks while in ThreadCritical lock\n-          \/\/ so NMT adjustment is stable.\n-          while(cur != NULL) {\n-            next = cur->next();\n-            os::free(cur);\n-            _num_chunks--;\n-            cur = next;\n-          }\n-        }\n+    \/\/ if we have more than n chunks, free all of them\n+    ThreadCritical tc;\n+    if (_num_chunks > blocksToKeep) {\n+      \/\/ free chunks at end of queue, for better locality\n+      cur = _first;\n+      for (size_t i = 0; i < (blocksToKeep - 1); i++) {\n+        assert(cur != NULL, \"counter out of sync?\");\n+        cur = cur->next();\n+      }\n+      assert(cur != NULL, \"counter out of sync?\");\n+\n+      next = cur->next();\n+      cur->set_next(NULL);\n+      cur = next;\n+\n+      \/\/ Free all remaining chunks while in ThreadCritical lock\n+      \/\/ so NMT adjustment is stable.\n+      while(cur != NULL) {\n+        next = cur->next();\n+        os::free(cur);\n+        _num_chunks--;\n+        cur = next;\n@@ -176,1 +174,1 @@\n-    Chunk* c = pool->remove_chunk();\n+    Chunk* c = pool->allocate();\n@@ -198,1 +196,1 @@\n-    pool->return_chunk(c);\n+    pool->free(c);\n","filename":"src\/hotspot\/share\/memory\/arena.cpp","additions":27,"deletions":29,"binary":false,"changes":56,"status":"modified"}]}