{"files":[{"patch":"@@ -169,0 +169,18 @@\n+    private static byte[] check(byte[] salt)\n+        throws InvalidAlgorithmParameterException {\n+        if (salt != null && salt.length < 8) {\n+            throw new InvalidAlgorithmParameterException(\n+                    \"Salt must be at least 8 bytes long\");\n+        }\n+        return salt;\n+    }\n+\n+    private static int check(int iCount)\n+        throws InvalidAlgorithmParameterException {\n+        if (iCount < 0) {\n+            throw new InvalidAlgorithmParameterException(\n+                    \"Iteration count must be a positive number\");\n+        }\n+        return iCount == 0? DEFAULT_COUNT : iCount;\n+    }\n+\n@@ -187,1 +205,2 @@\n-            \/\/ TBD: consolidate the salt, ic and IV parameter checks below\n+            boolean doEncrypt = ((opmode == Cipher.ENCRYPT_MODE) ||\n+                        (opmode == Cipher.WRAP_MODE));\n@@ -189,4 +208,14 @@\n-            \/\/ Extract salt and iteration count from the key, if present\n-            if (key instanceof javax.crypto.interfaces.PBEKey) {\n-                salt = ((javax.crypto.interfaces.PBEKey)key).getSalt();\n-                if (salt != null && salt.length < 8) {\n+            \/\/ Extract from the supplied PBE params, if present\n+            if (params instanceof PBEParameterSpec pbeParams) {\n+                \/\/ salt should be non-null per PBEParameterSpec\n+                salt = check(pbeParams.getSalt());\n+                iCount = check(pbeParams.getIterationCount());\n+                AlgorithmParameterSpec ivParams = pbeParams.getParameterSpec();\n+                if (ivParams instanceof IvParameterSpec iv) {\n+                    ivSpec = iv;\n+                } else if (ivParams == null && doEncrypt) {\n+                    \/\/ generate random IV\n+                    byte[] ivBytes = new byte[blkSize];\n+                    random.nextBytes(ivBytes);\n+                    ivSpec = new IvParameterSpec(ivBytes);\n+                } else {\n@@ -194,1 +223,1 @@\n-                            \"Salt must be at least 8 bytes long\");\n+                            \"Wrong parameter type: IV expected\");\n@@ -196,6 +225,5 @@\n-                iCount = ((javax.crypto.interfaces.PBEKey)key).getIterationCount();\n-                if (iCount == 0) {\n-                    iCount = DEFAULT_COUNT;\n-                } else if (iCount < 0) {\n-                    throw new InvalidAlgorithmParameterException(\n-                            \"Iteration count must be a positive number\");\n+            } else if (params == null && doEncrypt) {\n+                \/\/ Try extracting from the key, if present\n+                if (key instanceof javax.crypto.interfaces.PBEKey pbeKey) {\n+                    salt = check(pbeKey.getSalt()); \/\/ may be null\n+                    iCount = check(pbeKey.getIterationCount()); \/\/ may be 0\n@@ -203,4 +231,0 @@\n-            }\n-\n-            \/\/ Extract salt, iteration count and IV from the params, if present\n-            if (params == null) {\n@@ -208,1 +232,1 @@\n-                    \/\/ generate random salt and use default iteration count\n+                    \/\/ generate random salt\n@@ -211,0 +235,3 @@\n+                }\n+                if (iCount == 0) {\n+                    \/\/ use default iteration count\n@@ -213,2 +240,1 @@\n-                if ((opmode == Cipher.ENCRYPT_MODE) ||\n-                        (opmode == Cipher.WRAP_MODE)) {\n+                \/\/if (ivSpec == null) { \/\/ old behavior always generate\n@@ -219,1 +245,1 @@\n-                }\n+                \/\/}\n@@ -221,39 +247,2 @@\n-                if (!(params instanceof PBEParameterSpec)) {\n-                    throw new InvalidAlgorithmParameterException\n-                            (\"Wrong parameter type: PBE expected\");\n-                }\n-                \/\/ salt and iteration count from the params take precedence\n-                byte[] specSalt = ((PBEParameterSpec) params).getSalt();\n-                if (specSalt != null && specSalt.length < 8) {\n-                    throw new InvalidAlgorithmParameterException(\n-                            \"Salt must be at least 8 bytes long\");\n-                }\n-                salt = specSalt;\n-                int specICount = ((PBEParameterSpec) params).getIterationCount();\n-                if (specICount == 0) {\n-                    specICount = DEFAULT_COUNT;\n-                } else if (specICount < 0) {\n-                    throw new InvalidAlgorithmParameterException(\n-                            \"Iteration count must be a positive number\");\n-                }\n-                iCount = specICount;\n-\n-                AlgorithmParameterSpec specParams =\n-                        ((PBEParameterSpec) params).getParameterSpec();\n-                if (specParams != null) {\n-                    if (specParams instanceof IvParameterSpec) {\n-                        ivSpec = (IvParameterSpec)specParams;\n-                    } else {\n-                        throw new InvalidAlgorithmParameterException(\n-                                \"Wrong parameter type: IV expected\");\n-                    }\n-                } else if ((opmode == Cipher.ENCRYPT_MODE) ||\n-                        (opmode == Cipher.WRAP_MODE)) {\n-                    \/\/ generate random IV\n-                    byte[] ivBytes = new byte[blkSize];\n-                    random.nextBytes(ivBytes);\n-                    ivSpec = new IvParameterSpec(ivBytes);\n-                } else {\n-                    throw new InvalidAlgorithmParameterException(\n-                            \"Missing parameter type: IV expected\");\n-                }\n+                throw new InvalidAlgorithmParameterException\n+                        (\"Wrong parameter type: PBE expected\");\n@@ -261,1 +250,0 @@\n-\n@@ -267,0 +255,1 @@\n+        } finally {\n@@ -269,1 +258,0 @@\n-        } finally {\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/PBES2Core.java","additions":49,"deletions":61,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,9 +47,3 @@\n-\n-    \/\/ TBD: replace CipherCore with a CipherSpi object to simplify maintenance\n-\n-    private CipherCore cipher;\n-    private int blockSize;\n-    private int keySize;\n-    private int keyLength; \/\/ in bits\n-    private String algo = null;\n-    private String pbeAlgo = null;\n+    private final int keySize; \/\/ in bytes\n+    private final String algo;\n+    private final String pbeAlgo;\n@@ -174,1 +168,1 @@\n-    PKCS12PBECipherCore(String symmCipherAlg, int defKeySize)\n+    PKCS12PBECipherCore(String symmCipherAlg, int keySizeInBits)\n@@ -178,1 +172,0 @@\n-        keyLength = defKeySize * 8;\n@@ -180,1 +173,1 @@\n-            pbeAlgo = \"PBEWithSHA1AndRC4_\" + keyLength;\n+            pbeAlgo = \"PBEWithSHA1AndRC4_\" + keySizeInBits;\n@@ -182,1 +175,0 @@\n-            SymmetricCipher symmCipher = null;\n@@ -184,1 +176,0 @@\n-                symmCipher = new DESedeCrypt();\n@@ -186,1 +177,0 @@\n-                keyLength = 112; \/\/ effective key length\n@@ -188,2 +178,1 @@\n-                symmCipher = new RC2Crypt();\n-                pbeAlgo = \"PBEWithSHA1AndRC2_\" + keyLength;\n+                pbeAlgo = \"PBEWithSHA1AndRC2_\" + keySizeInBits;\n@@ -194,8 +183,0 @@\n-            blockSize = symmCipher.getBlockSize();\n-            cipher = new CipherCore(symmCipher, blockSize);\n-            cipher.setMode(\"CBC\");\n-            try {\n-                cipher.setPadding(\"PKCS5Padding\");\n-            } catch (NoSuchPaddingException nspe) {\n-                \/\/ should not happen\n-            }\n@@ -203,28 +184,1 @@\n-        keySize = defKeySize;\n-    }\n-\n-    void implSetMode(String mode) throws NoSuchAlgorithmException {\n-        if ((mode != null) && (!mode.equalsIgnoreCase(\"CBC\"))) {\n-            throw new NoSuchAlgorithmException(\"Invalid cipher mode: \"\n-                                               + mode);\n-        }\n-    }\n-\n-    void implSetPadding(String padding) throws NoSuchPaddingException {\n-        if ((padding != null) &&\n-            (!padding.equalsIgnoreCase(\"PKCS5Padding\"))) {\n-            throw new NoSuchPaddingException(\"Invalid padding scheme: \" +\n-                                             padding);\n-        }\n-    }\n-\n-    int implGetBlockSize() {\n-        return blockSize;\n-    }\n-\n-    int implGetOutputSize(int inLen) {\n-        return cipher.getOutputSize(inLen);\n-    }\n-\n-    byte[] implGetIV() {\n-        return cipher.getIV();\n+        keySize = keySizeInBits >> 3;\n@@ -260,9 +214,2 @@\n-                  SecureRandom random) throws InvalidKeyException,\n-        InvalidAlgorithmParameterException {\n-        implInit(opmode, key, params, random, null);\n-    }\n-\n-    void implInit(int opmode, Key key, AlgorithmParameterSpec params,\n-                  SecureRandom random, CipherSpi cipherImpl)\n-                      throws InvalidKeyException,\n-        InvalidAlgorithmParameterException {\n+                  SecureRandom random, CipherSpi cipher)\n+        throws InvalidKeyException, InvalidAlgorithmParameterException {\n@@ -354,3 +301,2 @@\n-                if (cipherImpl != null && cipherImpl instanceof ARCFOURCipher) {\n-                    ((ARCFOURCipher) cipherImpl).engineInit(opmode, cipherKey, random);\n-\n+                if (cipher instanceof ARCFOURCipher rc4) {\n+                    rc4.engineInit(opmode, cipherKey, random);\n@@ -360,1 +306,2 @@\n-                    IvParameterSpec ivSpec = new IvParameterSpec(derivedIv, 0, 8);\n+                    IvParameterSpec ivSpec = new IvParameterSpec(derivedIv, 0,\n+                            8);\n@@ -363,1 +310,8 @@\n-                    cipher.init(opmode, cipherKey, ivSpec, random);\n+                    if (cipher instanceof RC2Cipher rc2) {\n+                        rc2.engineInit(opmode, cipherKey, ivSpec, random);\n+                    } else if (cipher instanceof DESedeCipher tripleDes) {\n+                        tripleDes.engineInit(opmode, cipherKey, ivSpec, random);\n+                    } else {\n+                        throw new ProviderException(\"Unsupported cipher impl: \"\n+                                + cipher);\n+                    }\n@@ -378,7 +332,1 @@\n-                  SecureRandom random)\n-        throws InvalidKeyException, InvalidAlgorithmParameterException {\n-        implInit(opmode, key, params, random, null);\n-    }\n-\n-    void implInit(int opmode, Key key, AlgorithmParameters params,\n-                  SecureRandom random, CipherSpi cipherImpl)\n+                  SecureRandom random, CipherSpi cipher)\n@@ -395,1 +343,1 @@\n-        implInit(opmode, key, paramSpec, random, cipherImpl);\n+        implInit(opmode, key, paramSpec, random, cipher);\n@@ -398,1 +346,1 @@\n-    void implInit(int opmode, Key key, SecureRandom random)\n+    void implInit(int opmode, Key key, SecureRandom random, CipherSpi cipher)\n@@ -400,5 +348,0 @@\n-        implInit(opmode, key, random, null);\n-    }\n-\n-    void implInit(int opmode, Key key, SecureRandom random,\n-        CipherSpi cipherImpl) throws InvalidKeyException {\n@@ -407,1 +350,1 @@\n-                cipherImpl);\n+                    cipher);\n@@ -413,20 +356,0 @@\n-    byte[] implUpdate(byte[] in, int inOff, int inLen) {\n-        return cipher.update(in, inOff, inLen);\n-    }\n-\n-    int implUpdate(byte[] in, int inOff, int inLen, byte[] out, int outOff)\n-        throws ShortBufferException {\n-        return cipher.update(in, inOff, inLen, out, outOff);\n-    }\n-\n-    byte[] implDoFinal(byte[] in, int inOff, int inLen)\n-        throws IllegalBlockSizeException, BadPaddingException {\n-        return cipher.doFinal(in, inOff, inLen);\n-    }\n-\n-    int implDoFinal(byte[] in, int inOff, int inLen, byte[] out, int outOff)\n-        throws ShortBufferException, IllegalBlockSizeException,\n-               BadPaddingException {\n-        return cipher.doFinal(in, inOff, inLen, out, outOff);\n-    }\n-\n@@ -434,13 +357,1 @@\n-        return keyLength;\n-    }\n-\n-    byte[] implWrap(Key key) throws IllegalBlockSizeException,\n-        InvalidKeyException {\n-        return cipher.wrap(key);\n-    }\n-\n-    Key implUnwrap(byte[] wrappedKey, String wrappedKeyAlgorithm,\n-                   int wrappedKeyType)\n-        throws InvalidKeyException, NoSuchAlgorithmException {\n-        return cipher.unwrap(wrappedKey, wrappedKeyAlgorithm,\n-                             wrappedKeyType);\n+        return keySize << 3; \/\/ in bits\n@@ -451,147 +362,1 @@\n-        public PBEWithSHA1AndDESede() throws NoSuchAlgorithmException {\n-            core = new PKCS12PBECipherCore(\"DESede\", 24);\n-        }\n-        protected byte[] engineDoFinal(byte[] in, int inOff, int inLen)\n-            throws IllegalBlockSizeException, BadPaddingException {\n-            return core.implDoFinal(in, inOff, inLen);\n-        }\n-        protected int engineDoFinal(byte[] in, int inOff, int inLen,\n-                                    byte[] out, int outOff)\n-            throws ShortBufferException, IllegalBlockSizeException,\n-                   BadPaddingException {\n-            return core.implDoFinal(in, inOff, inLen, out, outOff);\n-        }\n-        protected int engineGetBlockSize() {\n-            return core.implGetBlockSize();\n-        }\n-        protected byte[] engineGetIV() {\n-            return core.implGetIV();\n-        }\n-        protected int engineGetKeySize(Key key) throws InvalidKeyException {\n-            return core.implGetKeySize(key);\n-        }\n-        protected int engineGetOutputSize(int inLen) {\n-            return core.implGetOutputSize(inLen);\n-        }\n-        protected AlgorithmParameters engineGetParameters() {\n-            return core.implGetParameters();\n-        }\n-        protected void engineInit(int opmode, Key key,\n-                                  AlgorithmParameterSpec params,\n-                                  SecureRandom random)\n-            throws InvalidKeyException, InvalidAlgorithmParameterException {\n-            core.implInit(opmode, key, params, random);\n-        }\n-        protected void engineInit(int opmode, Key key,\n-                                  AlgorithmParameters params,\n-                                  SecureRandom random)\n-            throws InvalidKeyException, InvalidAlgorithmParameterException {\n-            core.implInit(opmode, key, params, random);\n-        }\n-        protected void engineInit(int opmode, Key key, SecureRandom random)\n-            throws InvalidKeyException {\n-            core.implInit(opmode, key, random);\n-        }\n-        protected void engineSetMode(String mode)\n-            throws NoSuchAlgorithmException {\n-            core.implSetMode(mode);\n-        }\n-        protected void engineSetPadding(String paddingScheme)\n-            throws NoSuchPaddingException {\n-            core.implSetPadding(paddingScheme);\n-        }\n-        protected Key engineUnwrap(byte[] wrappedKey,\n-                                   String wrappedKeyAlgorithm,\n-                                   int wrappedKeyType)\n-            throws InvalidKeyException, NoSuchAlgorithmException {\n-            return core.implUnwrap(wrappedKey, wrappedKeyAlgorithm,\n-                                   wrappedKeyType);\n-        }\n-        protected byte[] engineUpdate(byte[] in, int inOff, int inLen) {\n-            return core.implUpdate(in, inOff, inLen);\n-        }\n-        protected int engineUpdate(byte[] in, int inOff, int inLen,\n-                                   byte[] out, int outOff)\n-            throws ShortBufferException {\n-            return core.implUpdate(in, inOff, inLen, out, outOff);\n-        }\n-        protected byte[] engineWrap(Key key)\n-            throws IllegalBlockSizeException, InvalidKeyException {\n-            return core.implWrap(key);\n-        }\n-    }\n-\n-    public static final class PBEWithSHA1AndRC2_40 extends CipherSpi {\n-        private final PKCS12PBECipherCore core;\n-        public PBEWithSHA1AndRC2_40() throws NoSuchAlgorithmException {\n-            core = new PKCS12PBECipherCore(\"RC2\", 5);\n-        }\n-        protected byte[] engineDoFinal(byte[] in, int inOff, int inLen)\n-            throws IllegalBlockSizeException, BadPaddingException {\n-            return core.implDoFinal(in, inOff, inLen);\n-        }\n-        protected int engineDoFinal(byte[] in, int inOff, int inLen,\n-                                    byte[] out, int outOff)\n-            throws ShortBufferException, IllegalBlockSizeException,\n-                   BadPaddingException {\n-            return core.implDoFinal(in, inOff, inLen, out, outOff);\n-        }\n-        protected int engineGetBlockSize() {\n-            return core.implGetBlockSize();\n-        }\n-        protected byte[] engineGetIV() {\n-            return core.implGetIV();\n-        }\n-        protected int engineGetKeySize(Key key) throws InvalidKeyException {\n-            return core.implGetKeySize(key);\n-        }\n-        protected int engineGetOutputSize(int inLen) {\n-            return core.implGetOutputSize(inLen);\n-        }\n-        protected AlgorithmParameters engineGetParameters() {\n-            return core.implGetParameters();\n-        }\n-        protected void engineInit(int opmode, Key key,\n-                                  AlgorithmParameterSpec params,\n-                                  SecureRandom random)\n-            throws InvalidKeyException, InvalidAlgorithmParameterException {\n-            core.implInit(opmode, key, params, random);\n-        }\n-        protected void engineInit(int opmode, Key key,\n-                                  AlgorithmParameters params,\n-                                  SecureRandom random)\n-            throws InvalidKeyException, InvalidAlgorithmParameterException {\n-            core.implInit(opmode, key, params, random);\n-        }\n-        protected void engineInit(int opmode, Key key, SecureRandom random)\n-            throws InvalidKeyException {\n-            core.implInit(opmode, key, random);\n-        }\n-        protected void engineSetMode(String mode)\n-            throws NoSuchAlgorithmException {\n-            core.implSetMode(mode);\n-        }\n-        protected void engineSetPadding(String paddingScheme)\n-            throws NoSuchPaddingException {\n-            core.implSetPadding(paddingScheme);\n-        }\n-        protected Key engineUnwrap(byte[] wrappedKey,\n-                                   String wrappedKeyAlgorithm,\n-                                   int wrappedKeyType)\n-            throws InvalidKeyException, NoSuchAlgorithmException {\n-            return core.implUnwrap(wrappedKey, wrappedKeyAlgorithm,\n-                                   wrappedKeyType);\n-        }\n-        protected byte[] engineUpdate(byte[] in, int inOff, int inLen) {\n-            return core.implUpdate(in, inOff, inLen);\n-        }\n-        protected int engineUpdate(byte[] in, int inOff, int inLen,\n-                                   byte[] out, int outOff)\n-            throws ShortBufferException {\n-            return core.implUpdate(in, inOff, inLen, out, outOff);\n-        }\n-        protected byte[] engineWrap(Key key)\n-            throws IllegalBlockSizeException, InvalidKeyException {\n-            return core.implWrap(key);\n-        }\n-    }\n+        private final DESedeCipher cipher;\n@@ -599,4 +364,9 @@\n-    public static final class PBEWithSHA1AndRC2_128 extends CipherSpi {\n-        private final PKCS12PBECipherCore core;\n-        public PBEWithSHA1AndRC2_128() throws NoSuchAlgorithmException {\n-            core = new PKCS12PBECipherCore(\"RC2\", 16);\n+        public PBEWithSHA1AndDESede() throws NoSuchAlgorithmException {\n+            cipher = new DESedeCipher();\n+            try {\n+                cipher.engineSetMode(\"CBC\");\n+                cipher.engineSetPadding(\"PKCS5Padding\");\n+            } catch (NoSuchPaddingException nspe) {\n+                \/\/ should never happen\n+            }\n+            core = new PKCS12PBECipherCore(\"DESede\", 192);\n@@ -606,1 +376,1 @@\n-            return core.implDoFinal(in, inOff, inLen);\n+            return cipher.engineDoFinal(in, inOff, inLen);\n@@ -612,1 +382,1 @@\n-            return core.implDoFinal(in, inOff, inLen, out, outOff);\n+            return cipher.engineDoFinal(in, inOff, inLen, out, outOff);\n@@ -615,1 +385,1 @@\n-            return core.implGetBlockSize();\n+            return cipher.engineGetBlockSize();\n@@ -618,1 +388,1 @@\n-            return core.implGetIV();\n+            return cipher.engineGetIV();\n@@ -621,1 +391,1 @@\n-            return core.implGetKeySize(key);\n+            return 112; \/\/ effective key size\n@@ -624,1 +394,1 @@\n-            return core.implGetOutputSize(inLen);\n+            return cipher.engineGetOutputSize(inLen);\n@@ -633,1 +403,1 @@\n-            core.implInit(opmode, key, params, random);\n+            core.implInit(opmode, key, params, random, cipher);\n@@ -639,1 +409,1 @@\n-            core.implInit(opmode, key, params, random);\n+            core.implInit(opmode, key, params, random, cipher);\n@@ -643,1 +413,1 @@\n-            core.implInit(opmode, key, random);\n+            core.implInit(opmode, key, random, cipher);\n@@ -647,1 +417,3 @@\n-            core.implSetMode(mode);\n+            if (!\"CBC\".equalsIgnoreCase(mode)) {\n+                throw new NoSuchAlgorithmException(\"Unsupported mode: \" + mode);\n+            }\n@@ -651,1 +423,4 @@\n-            core.implSetPadding(paddingScheme);\n+            if (!\"PKCS5Padding\".equalsIgnoreCase(paddingScheme)) {\n+                throw new NoSuchPaddingException(\"Unsupported padding: \" +\n+                        paddingScheme);\n+            }\n@@ -657,1 +432,1 @@\n-            return core.implUnwrap(wrappedKey, wrappedKeyAlgorithm,\n+            return cipher.engineUnwrap(wrappedKey, wrappedKeyAlgorithm,\n@@ -661,1 +436,1 @@\n-            return core.implUpdate(in, inOff, inLen);\n+            return cipher.engineUpdate(in, inOff, inLen);\n@@ -666,1 +441,1 @@\n-            return core.implUpdate(in, inOff, inLen, out, outOff);\n+            return cipher.engineUpdate(in, inOff, inLen, out, outOff);\n@@ -670,1 +445,1 @@\n-            return core.implWrap(key);\n+            return cipher.engineWrap(key);\n@@ -674,2 +449,1 @@\n-    public static final class PBEWithSHA1AndRC4_40 extends CipherSpi {\n-        private static final int RC4_KEYSIZE = 5;\n+    static class PBEWithSHA1AndRC2 extends CipherSpi {\n@@ -677,1 +451,1 @@\n-        private final ARCFOURCipher cipher;\n+        private final RC2Cipher cipher;\n@@ -679,3 +453,9 @@\n-        public PBEWithSHA1AndRC4_40() throws NoSuchAlgorithmException {\n-            core = new PKCS12PBECipherCore(\"RC4\", RC4_KEYSIZE);\n-            cipher = new ARCFOURCipher();\n+        public PBEWithSHA1AndRC2(int keysize) throws NoSuchAlgorithmException {\n+            core = new PKCS12PBECipherCore(\"RC2\", keysize);\n+            cipher = new RC2Cipher();\n+            try {\n+                cipher.engineSetMode(\"CBC\");\n+                cipher.engineSetPadding(\"PKCS5Padding\");\n+            } catch (NoSuchPaddingException nspe) {\n+                \/\/ should never happen\n+            }\n@@ -700,1 +480,1 @@\n-            return RC4_KEYSIZE;\n+            return core.implGetKeySize(key);\n@@ -713,0 +493,1 @@\n+\n@@ -726,2 +507,2 @@\n-            if (mode.equalsIgnoreCase(\"ECB\") == false) {\n-                throw new NoSuchAlgorithmException(\"Unsupported mode \" + mode);\n+            if (!\"CBC\".equalsIgnoreCase(mode)) {\n+                throw new NoSuchAlgorithmException(\"Unsupported mode: \" + mode);\n@@ -732,2 +513,3 @@\n-            if (paddingScheme.equalsIgnoreCase(\"NoPadding\") == false) {\n-                throw new NoSuchPaddingException(\"Padding must be NoPadding\");\n+            if (!\"PKCS5Padding\".equalsIgnoreCase(paddingScheme)) {\n+                throw new NoSuchPaddingException(\"Unsupported padding: \" +\n+                        paddingScheme);\n@@ -757,2 +539,13 @@\n-    public static final class PBEWithSHA1AndRC4_128 extends CipherSpi {\n-        private static final int RC4_KEYSIZE = 16;\n+    public static final class PBEWithSHA1AndRC2_40 extends PBEWithSHA1AndRC2 {\n+        public PBEWithSHA1AndRC2_40() throws NoSuchAlgorithmException {\n+            super(40);\n+        }\n+    }\n+\n+    public static final class PBEWithSHA1AndRC2_128 extends PBEWithSHA1AndRC2 {\n+        public PBEWithSHA1AndRC2_128() throws NoSuchAlgorithmException {\n+            super(128);\n+        }\n+    }\n+\n+    static class PBEWithSHA1AndRC4 extends CipherSpi {\n@@ -762,2 +555,2 @@\n-        public PBEWithSHA1AndRC4_128() throws NoSuchAlgorithmException {\n-            core = new PKCS12PBECipherCore(\"RC4\", RC4_KEYSIZE);\n+        public PBEWithSHA1AndRC4(int keysize) throws NoSuchAlgorithmException {\n+            core = new PKCS12PBECipherCore(\"RC4\", keysize);\n@@ -783,1 +576,1 @@\n-            return RC4_KEYSIZE;\n+            return core.implGetKeySize(key);\n@@ -809,2 +602,2 @@\n-            if (mode.equalsIgnoreCase(\"ECB\") == false) {\n-                throw new NoSuchAlgorithmException(\"Unsupported mode \" + mode);\n+            if (!\"ECB\".equalsIgnoreCase(mode)) {\n+                throw new NoSuchAlgorithmException(\"Unsupported mode: \" + mode);\n@@ -815,2 +608,3 @@\n-            if (paddingScheme.equalsIgnoreCase(\"NoPadding\") == false) {\n-                throw new NoSuchPaddingException(\"Padding must be NoPadding\");\n+            if (!\"NoPadding\".equalsIgnoreCase(paddingScheme)) {\n+                throw new NoSuchPaddingException(\"Unsupported padding: \" +\n+                        paddingScheme);\n@@ -839,0 +633,11 @@\n+\n+    public static final class PBEWithSHA1AndRC4_40 extends PBEWithSHA1AndRC4 {\n+        public PBEWithSHA1AndRC4_40() throws NoSuchAlgorithmException {\n+            super(40);\n+        }\n+    }\n+    public static final class PBEWithSHA1AndRC4_128 extends PBEWithSHA1AndRC4 {\n+        public PBEWithSHA1AndRC4_128() throws NoSuchAlgorithmException {\n+            super(128);\n+        }\n+    }\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/PKCS12PBECipherCore.java","additions":107,"deletions":302,"binary":false,"changes":409,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 4953553\n+ * @bug 4953553 8002277\n@@ -35,0 +35,1 @@\n+import java.security.spec.AlgorithmParameterSpec;\n@@ -41,4 +42,22 @@\n-    public static void main(String argv[]) throws Exception {\n-        String algo = \"PBEWithMD5AndDES\";\n-        Cipher cipher = Cipher.getInstance(algo, \"SunJCE\");\n-        SecretKey key = new SecretKeySpec(new byte[5], algo);\n+    private static String[] PBES1ALGOS = {\n+        \"PBEWithMD5AndDES\",\n+        \"PBEWithSHA1AndDESede\",\n+        \"PBEWithSHA1AndRC2_40\",\n+        \"PBEWithSHA1AndRC2_128\",\n+        \"PBEWithSHA1AndRC4_40\",\n+        \"PBEWithSHA1AndRC4_128\",\n+    };\n+\n+    private static String[] PBES2ALGOS = {\n+        \"PBEWithHmacSHA1AndAES_128\",\n+        \"PBEWithHmacSHA224AndAES_128\",\n+        \"PBEWithHmacSHA256AndAES_128\",\n+        \"PBEWithHmacSHA384AndAES_128\",\n+        \"PBEWithHmacSHA512AndAES_128\",\n+    };\n+\n+    \/\/ return true if Cipher.init() fails with\n+    \/\/ InvalidAlgorithmParameterException\n+    private static boolean test(Cipher c, SecretKey key,\n+        AlgorithmParameterSpec spec) throws InvalidKeyException {\n+        System.out.println(\"Testing \" + c.getAlgorithm());\n@@ -46,5 +65,71 @@\n-            cipher.init(Cipher.DECRYPT_MODE, key);\n-            throw new Exception(\"Should throw InvalidKeyException when \" +\n-                                \"decrypting without parameters\");\n-        } catch (InvalidKeyException ike) {\n-            System.out.println(\"Test Passed: InvalidKeyException thrown\");\n+            c.init(Cipher.DECRYPT_MODE, key, spec);\n+            System.out.println(\"=> failed\");\n+            return false;\n+        } catch (InvalidAlgorithmParameterException e) {\n+            System.out.println(\"=> ok, got expected IAPE \" + e);\n+            return true;\n+        }\n+    }\n+\n+    static final class MyPBEKey implements PBEKey {\n+        private String algo;\n+        private PBEKeySpec spec;\n+\n+        MyPBEKey(String algo, PBEKeySpec spec) {\n+            this.algo = algo;\n+            this.spec = spec;\n+        }\n+        public int getIterationCount() {\n+            return spec.getIterationCount();\n+        }\n+        public char[] getPassword() {\n+            return spec.getPassword();\n+        }\n+        public byte[] getSalt() {\n+            return spec.getSalt();\n+        }\n+        public void destroy() {\n+            spec.clearPassword();\n+            spec = null;\n+        }\n+        public boolean isDestroyed() {\n+            return spec == null;\n+        }\n+        public String getAlgorithm() {\n+            return algo;\n+        }\n+        public byte[] getEncoded() {\n+            return new byte[5];\n+        }\n+        public String getFormat() {\n+            \/\/ not used\n+            return \"Proprietary\";\n+        }\n+    }\n+\n+    public static void main(String argv[]) throws Exception {\n+        boolean status = true;\n+\n+        for (String algo : PBES1ALGOS) {\n+            Cipher cipher = Cipher.getInstance(algo, \"SunJCE\");\n+            SecretKey key = new SecretKeySpec(new byte[5], algo);\n+            status = status && test(cipher, key, null);\n+        }\n+\n+        byte[] salt = \"atleast8bytes\".getBytes();\n+        int iterCount = 123456;\n+        PBEParameterSpec spec = new PBEParameterSpec(salt, iterCount);\n+        for (String algo : PBES2ALGOS) {\n+            Cipher cipher = Cipher.getInstance(algo, \"SunJCE\");\n+            SecretKey key = new SecretKeySpec(new byte[5], algo);\n+            PBEKey key2 = new MyPBEKey(algo,\n+                new PBEKeySpec(\"phrase\".toCharArray(), salt, iterCount));\n+            \/\/ null param\n+            status = status && test(cipher, key, null);\n+            status = status && test(cipher, key2, null);\n+            \/\/ param has salt and iterCount but missing iv\n+            status = status && test(cipher, key, spec);\n+            status = status && test(cipher, key2, spec);\n+        }\n+        if (!status) {\n+            throw new Exception(\"One or more test failed\");\n@@ -52,0 +137,1 @@\n+        System.out.println(\"All tests passed\");\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/PBE\/DecryptWithoutParameters.java","additions":97,"deletions":11,"binary":false,"changes":108,"status":"modified"}]}