{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,2 @@\n-public final class ARCFOURCipher extends CipherSpi {\n+public sealed class ARCFOURCipher extends CipherSpi\n+        permits PKCS12PBECipherCore.PBEWithSHA1AndRC4 {\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/ARCFOURCipher.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,2 @@\n-public final class DESedeCipher extends CipherSpi {\n+public sealed class DESedeCipher extends CipherSpi\n+        permits PKCS12PBECipherCore.PBEWithSHA1AndDESede {\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/DESedeCipher.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import java.io.Closeable;\n+import java.io.IOException;\n@@ -168,0 +170,18 @@\n+    \/\/ holder for the derived key and iv\n+    private static class KeyAndIv implements Closeable {\n+        final SecretKey key;\n+        final IvParameterSpec iv;\n+        KeyAndIv(SecretKey key, IvParameterSpec iv) {\n+            this.key = key;\n+            this.iv = iv;\n+        }\n+        @Override\n+        public void close() {\n+            try {\n+                key.destroy();\n+            } catch (DestroyFailedException e) {\n+                \/\/ Ignore the failure\n+            }\n+        }\n+    }\n+\n@@ -208,2 +228,3 @@\n-    void implInit(int opmode, Key key, AlgorithmParameterSpec params,\n-                  SecureRandom random, CipherSpi cipherImpl)\n+    \/\/ returns derived Key and Iv\n+    KeyAndIv implInit(int opmode, Key key, AlgorithmParameterSpec params,\n+                  SecureRandom random)\n@@ -290,0 +311,1 @@\n+\n@@ -295,4 +317,7 @@\n-            try {\n-                if (cipherImpl instanceof ARCFOURCipher rc4) {\n-                    rc4.engineInit(opmode, cipherKey, random);\n-                } else {\n+            KeyAndIv result;\n+            switch (algo) {\n+                case \"RC4\":\n+                    result = new KeyAndIv(cipherKey, null);\n+                    break;\n+                case \"RC2\":\n+                case \"DESede\":\n@@ -301,19 +326,6 @@\n-                    IvParameterSpec ivSpec = new IvParameterSpec(derivedIv, 0,\n-                            8);\n-\n-                    \/\/ initialize the underlying cipher\n-                    if (cipherImpl instanceof RC2Cipher rc2) {\n-                        rc2.engineInit(opmode, cipherKey, ivSpec, random);\n-                    } else if (cipherImpl instanceof DESedeCipher tripleDes) {\n-                        tripleDes.engineInit(opmode, cipherKey, ivSpec, random);\n-                    } else {\n-                        throw new ProviderException(\"Unsupported cipher impl: \"\n-                                + cipherImpl);\n-                    }\n-                }\n-            } finally {\n-                try {\n-                    cipherKey.destroy();\n-                } catch (DestroyFailedException e) {\n-                    \/\/ Ignore the failure\n-                }\n+                    IvParameterSpec ivSpec = new IvParameterSpec(derivedIv);\n+                    result = new KeyAndIv(cipherKey, ivSpec);\n+                    break;\n+                default:\n+                    throw new ProviderException(\"Unsupported cipher impl: \"\n+                            + algo);\n@@ -321,0 +333,1 @@\n+            return result;\n@@ -326,11 +339,4 @@\n-    void implInit(int opmode, Key key, AlgorithmParameters params,\n-                  SecureRandom random, CipherSpi cipherImpl)\n-            throws InvalidKeyException, InvalidAlgorithmParameterException {\n-        AlgorithmParameterSpec paramSpec = null;\n-        if (params != null) {\n-            try {\n-                paramSpec = params.getParameterSpec(PBEParameterSpec.class);\n-            } catch (InvalidParameterSpecException ipse) {\n-                throw new InvalidAlgorithmParameterException(\n-                    \"requires PBE parameters\");\n-            }\n+    private static final PBEParameterSpec toParamSpec(AlgorithmParameters ap)\n+            throws InvalidAlgorithmParameterException {\n+        if (ap == null) {\n+            return null;\n@@ -338,6 +344,0 @@\n-        implInit(opmode, key, paramSpec, random, cipherImpl);\n-    }\n-\n-    void implInit(int opmode, Key key, SecureRandom random,\n-                  CipherSpi cipherImpl)\n-            throws InvalidKeyException {\n@@ -345,4 +345,4 @@\n-            implInit(opmode, key, (AlgorithmParameterSpec) null, random,\n-                    cipherImpl);\n-        } catch (InvalidAlgorithmParameterException iape) {\n-            throw new InvalidKeyException(\"requires PBE parameters\");\n+            return ap.getParameterSpec(PBEParameterSpec.class);\n+        } catch (InvalidParameterSpecException ipse) {\n+            throw new InvalidAlgorithmParameterException(\n+                    \"requires PBE parameters\");\n@@ -356,1 +356,1 @@\n-    public static final class PBEWithSHA1AndDESede extends CipherSpi {\n+    public static final class PBEWithSHA1AndDESede extends DESedeCipher {\n@@ -358,1 +358,0 @@\n-        private final DESedeCipher cipher;\n@@ -361,1 +360,0 @@\n-            cipher = new DESedeCipher();\n@@ -363,2 +361,2 @@\n-                cipher.engineSetMode(\"CBC\");\n-                cipher.engineSetPadding(\"PKCS5Padding\");\n+                super.engineSetMode(\"CBC\");\n+                super.engineSetPadding(\"PKCS5Padding\");\n@@ -370,16 +368,1 @@\n-        protected byte[] engineDoFinal(byte[] in, int inOff, int inLen)\n-                throws IllegalBlockSizeException, BadPaddingException {\n-            return cipher.engineDoFinal(in, inOff, inLen);\n-        }\n-        protected int engineDoFinal(byte[] in, int inOff, int inLen,\n-                                    byte[] out, int outOff)\n-                throws ShortBufferException, IllegalBlockSizeException,\n-                   BadPaddingException {\n-            return cipher.engineDoFinal(in, inOff, inLen, out, outOff);\n-        }\n-        protected int engineGetBlockSize() {\n-            return cipher.engineGetBlockSize();\n-        }\n-        protected byte[] engineGetIV() {\n-            return cipher.engineGetIV();\n-        }\n+        @Override\n@@ -389,3 +372,1 @@\n-        protected int engineGetOutputSize(int inLen) {\n-            return cipher.engineGetOutputSize(inLen);\n-        }\n+        @Override\n@@ -395,0 +376,1 @@\n+        @Override\n@@ -399,1 +381,3 @@\n-            core.implInit(opmode, key, params, random, cipher);\n+            try (var derived = core.implInit(opmode, key, params, random)) {\n+                super.engineInit(opmode, derived.key, derived.iv, random);\n+            }\n@@ -401,0 +385,1 @@\n+        @Override\n@@ -405,1 +390,1 @@\n-            core.implInit(opmode, key, params, random, cipher);\n+            engineInit(opmode, key, toParamSpec(params), random);\n@@ -407,0 +392,1 @@\n+        @Override\n@@ -409,1 +395,6 @@\n-            core.implInit(opmode, key, random, cipher);\n+            try {\n+                engineInit(opmode, key, (AlgorithmParameterSpec) null, random);\n+            } catch (InvalidAlgorithmParameterException iape) {\n+                \/\/ should never happen\n+            }\n+\n@@ -411,0 +402,1 @@\n+        @Override\n@@ -417,0 +409,1 @@\n+        @Override\n@@ -424,19 +417,0 @@\n-        protected Key engineUnwrap(byte[] wrappedKey,\n-                                   String wrappedKeyAlgorithm,\n-                                   int wrappedKeyType)\n-                throws InvalidKeyException, NoSuchAlgorithmException {\n-            return cipher.engineUnwrap(wrappedKey, wrappedKeyAlgorithm,\n-                                   wrappedKeyType);\n-        }\n-        protected byte[] engineUpdate(byte[] in, int inOff, int inLen) {\n-            return cipher.engineUpdate(in, inOff, inLen);\n-        }\n-        protected int engineUpdate(byte[] in, int inOff, int inLen,\n-                                   byte[] out, int outOff)\n-                throws ShortBufferException {\n-            return cipher.engineUpdate(in, inOff, inLen, out, outOff);\n-        }\n-        protected byte[] engineWrap(Key key)\n-                throws IllegalBlockSizeException, InvalidKeyException {\n-            return cipher.engineWrap(key);\n-        }\n@@ -445,1 +419,1 @@\n-    static class PBEWithSHA1AndRC2 extends CipherSpi {\n+    static sealed class PBEWithSHA1AndRC2 extends RC2Cipher {\n@@ -447,1 +421,0 @@\n-        private final RC2Cipher cipher;\n@@ -451,1 +424,0 @@\n-            cipher = new RC2Cipher();\n@@ -453,2 +425,2 @@\n-                cipher.engineSetMode(\"CBC\");\n-                cipher.engineSetPadding(\"PKCS5Padding\");\n+                super.engineSetMode(\"CBC\");\n+                super.engineSetPadding(\"PKCS5Padding\");\n@@ -459,22 +431,1 @@\n-        protected byte[] engineDoFinal(byte[] in, int inOff, int inLen)\n-                throws IllegalBlockSizeException, BadPaddingException {\n-            return cipher.engineDoFinal(in, inOff, inLen);\n-        }\n-        protected int engineDoFinal(byte[] in, int inOff, int inLen,\n-                                    byte[] out, int outOff)\n-                throws ShortBufferException, IllegalBlockSizeException,\n-                   BadPaddingException {\n-            return cipher.engineDoFinal(in, inOff, inLen, out, outOff);\n-        }\n-        protected int engineGetBlockSize() {\n-            return cipher.engineGetBlockSize();\n-        }\n-        protected byte[] engineGetIV() {\n-            return cipher.engineGetIV();\n-        }\n-        protected int engineGetKeySize(Key key) throws InvalidKeyException {\n-            return core.implGetKeySize(key);\n-        }\n-        protected int engineGetOutputSize(int inLen) {\n-            return cipher.engineGetOutputSize(inLen);\n-        }\n+        @Override\n@@ -484,0 +435,1 @@\n+        @Override\n@@ -488,2 +440,3 @@\n-            core.implInit(opmode, key, params, random, cipher);\n-\n+            try (var derived = core.implInit(opmode, key, params, random)) {\n+                super.engineInit(opmode, derived.key, derived.iv, random);\n+            }\n@@ -491,0 +444,1 @@\n+        @Override\n@@ -495,1 +449,1 @@\n-            core.implInit(opmode, key, params, random, cipher);\n+            engineInit(opmode, key, toParamSpec(params), random);\n@@ -497,0 +451,1 @@\n+        @Override\n@@ -499,1 +454,5 @@\n-            core.implInit(opmode, key, random, cipher);\n+            try {\n+                engineInit(opmode, key, (AlgorithmParameterSpec) null, random);\n+            } catch (InvalidAlgorithmParameterException iape) {\n+                \/\/ should never happen\n+            }\n@@ -501,0 +460,1 @@\n+        @Override\n@@ -507,0 +467,1 @@\n+        @Override\n@@ -514,19 +475,0 @@\n-        protected Key engineUnwrap(byte[] wrappedKey,\n-                                   String wrappedKeyAlgorithm,\n-                                   int wrappedKeyType)\n-                throws InvalidKeyException, NoSuchAlgorithmException {\n-            return cipher.engineUnwrap(wrappedKey, wrappedKeyAlgorithm,\n-                                   wrappedKeyType);\n-        }\n-        protected byte[] engineUpdate(byte[] in, int inOff, int inLen) {\n-            return cipher.engineUpdate(in, inOff, inLen);\n-        }\n-        protected int engineUpdate(byte[] in, int inOff, int inLen,\n-                                   byte[] out, int outOff)\n-                throws ShortBufferException {\n-            return cipher.engineUpdate(in, inOff, inLen, out, outOff);\n-        }\n-        protected byte[] engineWrap(Key key)\n-                throws IllegalBlockSizeException, InvalidKeyException {\n-            return cipher.engineWrap(key);\n-        }\n@@ -547,1 +489,1 @@\n-    static class PBEWithSHA1AndRC4 extends CipherSpi {\n+    static sealed class PBEWithSHA1AndRC4 extends ARCFOURCipher {\n@@ -549,1 +491,0 @@\n-        private final ARCFOURCipher cipher;\n@@ -553,17 +494,0 @@\n-            cipher = new ARCFOURCipher();\n-        }\n-        protected byte[] engineDoFinal(byte[] in, int inOff, int inLen)\n-                throws IllegalBlockSizeException, BadPaddingException {\n-            return cipher.engineDoFinal(in, inOff, inLen);\n-        }\n-        protected int engineDoFinal(byte[] in, int inOff, int inLen,\n-                                    byte[] out, int outOff)\n-                throws ShortBufferException, IllegalBlockSizeException,\n-                   BadPaddingException {\n-            return cipher.engineDoFinal(in, inOff, inLen, out, outOff);\n-        }\n-        protected int engineGetBlockSize() {\n-            return cipher.engineGetBlockSize();\n-        }\n-        protected byte[] engineGetIV() {\n-            return cipher.engineGetIV();\n@@ -571,0 +495,1 @@\n+        @Override\n@@ -574,3 +499,1 @@\n-        protected int engineGetOutputSize(int inLen) {\n-            return cipher.engineGetOutputSize(inLen);\n-        }\n+        @Override\n@@ -580,0 +503,1 @@\n+        @Override\n@@ -584,1 +508,3 @@\n-            core.implInit(opmode, key, params, random, cipher);\n+            try (var derived = core.implInit(opmode, key, params, random)) {\n+                super.engineInit(opmode, derived.key, derived.iv, random);\n+            }\n@@ -586,0 +512,1 @@\n+        @Override\n@@ -590,1 +517,1 @@\n-            core.implInit(opmode, key, params, random, cipher);\n+            engineInit(opmode, key, toParamSpec(params), random);\n@@ -592,0 +519,1 @@\n+        @Override\n@@ -594,1 +522,5 @@\n-            core.implInit(opmode, key, random, cipher);\n+            try {\n+                engineInit(opmode, key, (AlgorithmParameterSpec) null, random);\n+            } catch (InvalidAlgorithmParameterException iape) {\n+                \/\/ should never happen\n+            }\n@@ -596,0 +528,1 @@\n+        @Override\n@@ -602,0 +535,1 @@\n+        @Override\n@@ -609,19 +543,0 @@\n-        protected Key engineUnwrap(byte[] wrappedKey,\n-                                   String wrappedKeyAlgorithm,\n-                                   int wrappedKeyType)\n-                throws InvalidKeyException, NoSuchAlgorithmException {\n-            return cipher.engineUnwrap(wrappedKey, wrappedKeyAlgorithm,\n-                                   wrappedKeyType);\n-        }\n-        protected byte[] engineUpdate(byte[] in, int inOff, int inLen) {\n-            return cipher.engineUpdate(in, inOff, inLen);\n-        }\n-        protected int engineUpdate(byte[] in, int inOff, int inLen,\n-                                   byte[] out, int outOff)\n-                throws ShortBufferException {\n-            return cipher.engineUpdate(in, inOff, inLen, out, outOff);\n-        }\n-        protected byte[] engineWrap(Key key)\n-                throws IllegalBlockSizeException, InvalidKeyException {\n-            return cipher.engineWrap(key);\n-        }\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/PKCS12PBECipherCore.java","additions":101,"deletions":186,"binary":false,"changes":287,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,2 @@\n-public final class RC2Cipher extends CipherSpi {\n+public sealed class RC2Cipher extends CipherSpi\n+        permits PKCS12PBECipherCore.PBEWithSHA1AndRC2 {\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/RC2Cipher.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}