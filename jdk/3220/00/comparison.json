{"files":[{"patch":"@@ -367,5 +367,43 @@\n-                CompletionTask ordinaryCompletion =\n-                        new OrdinaryCompletionTask(suggestions,\n-                                                   anchor[0],\n-                                                   !command && !doc.isEmpty(),\n-                                                   hasBoth);\n+                CompletionTask ordinaryCompletion;\n+                List<? extends CharSequence> ordinaryCompletionToShow;\n+\n+                if (hasBoth) {\n+                    ordinaryCompletionToShow =\n+                        suggestions.stream()\n+                                   .filter(Suggestion::matchesType)\n+                                   .map(Suggestion::continuation)\n+                                   .distinct()\n+                                   .toList();\n+                } else {\n+                    ordinaryCompletionToShow =\n+                        suggestions.stream()\n+                                   .map(Suggestion::continuation)\n+                                   .distinct()\n+                                   .toList();\n+                }\n+\n+                if (ordinaryCompletionToShow.isEmpty()) {\n+                    ordinaryCompletion = new ContinueCompletionTask();\n+                } else {\n+                    Optional<String> prefixOpt =\n+                            suggestions.stream()\n+                                       .map(Suggestion::continuation)\n+                                       .reduce(ConsoleIOContext::commonPrefix);\n+\n+                    String prefix =\n+                            prefixOpt.orElse(\"\").substring(cursor - anchor[0]);\n+\n+                    if (!prefix.isEmpty() && !command) {\n+                        \/\/the completion will fill in the prefix, which will invalidate\n+                        \/\/the documentation, avoid adding documentation tasks into the\n+                        \/\/todo list:\n+                        doc = List.of();\n+                    }\n+\n+                    ordinaryCompletion =\n+                            new OrdinaryCompletionTask(ordinaryCompletionToShow,\n+                                                       prefix,\n+                                                       !command && !doc.isEmpty(),\n+                                                       hasBoth);\n+                }\n+\n@@ -570,2 +608,2 @@\n-        private final List<Suggestion> suggestions;\n-        private final int anchor;\n+        private final List<? extends CharSequence> toShow;\n+        private final String prefix;\n@@ -575,2 +613,2 @@\n-        public OrdinaryCompletionTask(List<Suggestion> suggestions,\n-                                      int anchor,\n+        public OrdinaryCompletionTask(List<? extends CharSequence> toShow,\n+                                      String prefix,\n@@ -579,2 +617,2 @@\n-            this.suggestions = suggestions;\n-            this.anchor = anchor;\n+            this.toShow = toShow;\n+            this.prefix = prefix;\n@@ -592,28 +630,1 @@\n-            List<? extends CharSequence> toShow;\n-\n-            if (showSmart) {\n-                toShow =\n-                    suggestions.stream()\n-                               .filter(Suggestion::matchesType)\n-                               .map(Suggestion::continuation)\n-                               .distinct()\n-                               .toList();\n-            } else {\n-                toShow =\n-                    suggestions.stream()\n-                               .map(Suggestion::continuation)\n-                               .distinct()\n-                               .toList();\n-            }\n-\n-            if (toShow.isEmpty()) {\n-                return Result.CONTINUE;\n-            }\n-\n-            Optional<String> prefix =\n-                    suggestions.stream()\n-                               .map(Suggestion::continuation)\n-                               .reduce(ConsoleIOContext::commonPrefix);\n-\n-            String prefixStr = prefix.orElse(\"\").substring(cursor - anchor);\n-            in.putString(prefixStr);\n+            in.putString(prefix);\n@@ -628,1 +639,1 @@\n-            if (!prefixStr.isEmpty())\n+            if (!prefix.isEmpty())\n@@ -801,0 +812,13 @@\n+    private static class ContinueCompletionTask implements ConsoleIOContext.CompletionTask {\n+\n+        @Override\n+        public String description() {\n+            throw new UnsupportedOperationException(\"Should not get here.\");\n+        }\n+\n+        @Override\n+        public CompletionTask.Result perform(String text, int cursor) throws IOException {\n+            return CompletionTask.Result.CONTINUE;\n+        }\n+    }\n+\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/internal\/jshell\/tool\/ConsoleIOContext.java","additions":64,"deletions":40,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8177076 8185426 8189595 8188072 8221759\n+ * @bug 8177076 8185426 8189595 8188072 8221759 8255273\n@@ -334,0 +334,9 @@\n+    public void testDocumentationAfterInsert() throws Exception {\n+        doRunTest((inputSink, out) -> {\n+            inputSink.write(\"import java.time.*\\n\");\n+            waitOutput(out, PROMPT);\n+\n+            inputSink.write(\"new Instant\" + TAB);\n+            waitOutput(out, PROMPT + \"new InstantiationE\");\n+        });\n+    }\n","filename":"test\/langtools\/jdk\/jshell\/ToolTabSnippetTest.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"}]}