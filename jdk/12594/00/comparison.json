{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,7 @@\n-\/**\n+import java.awt.Frame;\n+import java.awt.List;\n+import java.lang.ref.PhantomReference;\n+import java.lang.ref.Reference;\n+import java.lang.ref.ReferenceQueue;\n+\n+\/*\n@@ -29,1 +35,1 @@\n- * @run main\/othervm -Xmx100m AwtListGarbageCollectionTest\n+ * @run main\/othervm -Xmx100m -Xlog:gc=debug AwtListGarbageCollectionTest\n@@ -31,0 +37,1 @@\n+public class AwtListGarbageCollectionTest {\n@@ -32,4 +39,2 @@\n-import java.awt.*;\n-import java.awt.event.WindowAdapter;\n-import java.awt.event.WindowEvent;\n-import java.lang.ref.WeakReference;\n+    private static final long ENQUEUE_TIMEOUT = 1_000; \/\/ 1 sec, in millis\n+    private static final int MAX_ATTEMPTS = 5;\n@@ -37,2 +42,1 @@\n-public class AwtListGarbageCollectionTest {\n-    public static void main(String[] args) {\n+    public static void main(String[] args) throws InterruptedException {\n@@ -47,5 +51,15 @@\n-    private static void test(Frame frame) {\n-        WeakReference<List> weakListRef = null;\n-        try {\n-            frame.setSize(300, 200);\n-            frame.setVisible(true);\n+    private static void test(Frame frame) throws InterruptedException {\n+        frame.setSize(300, 200);\n+        frame.setVisible(true);\n+\n+        List strongListRef = new List();\n+        frame.add(strongListRef);\n+        strongListRef.setMultipleMode(true);\n+        frame.remove(strongListRef);\n+\n+        final ReferenceQueue<List> referenceQueue = new ReferenceQueue<>();\n+        final PhantomReference<List> phantomListRef =\n+                new PhantomReference<>(strongListRef, referenceQueue);\n+        System.out.println(\"phantomListRef: \" + phantomListRef);\n+\n+        strongListRef = null; \/\/ Clear the strong reference\n@@ -53,6 +67,11 @@\n-            List strongListRef = new List();\n-            frame.add(strongListRef);\n-            strongListRef.setMultipleMode(true);\n-            frame.remove(strongListRef);\n-            weakListRef = new WeakReference<List>(strongListRef);\n-            strongListRef = null;\n+        System.out.println(\"Waiting for the reference to be cleared\");\n+        int count = 1;\n+        Reference<? extends List> ref;\n+        do {\n+            System.out.println(\"Attempt \" + count);\n+            System.gc();\n+            System.out.println(\"    GC invoked\");\n+            ref = referenceQueue.remove(ENQUEUE_TIMEOUT);\n+            System.out.println(\"    ref: \" + ref);\n+        } while (++count <= MAX_ATTEMPTS\n+                 && ref != phantomListRef);\n@@ -60,11 +79,2 @@\n-            \/\/make out of memory to force gc\n-            String veryLongString = new String(new char[100]);\n-            while (true) {\n-                veryLongString += veryLongString;\n-            }\n-        } catch (OutOfMemoryError e) {\n-            if (weakListRef == null) {\n-                throw new RuntimeException(\"Weak list ref wasn't created\");\n-            } else if (weakListRef.get() != null) {\n-                throw new RuntimeException(\"List wasn't garbage collected\");\n-            }\n+        if (ref != phantomListRef) {\n+            throw new RuntimeException(\"List wasn't garbage collected\");\n","filename":"test\/jdk\/java\/awt\/List\/ListGarbageCollectionTest\/AwtListGarbageCollectionTest.java","additions":41,"deletions":31,"binary":false,"changes":72,"status":"modified"}]}