{"files":[{"patch":"@@ -58,9 +58,1 @@\n-  if (!forSignalHandler) {\n-    _cb = CodeCache::find_blob(pc);\n-  } else {\n-    _cb = CodeCache::find_blob_unsafe(pc);\n-    \/\/ if the code blob appears to be non-entrant just ignore it\n-    if (_cb != NULL && _cb->is_zombie()) {\n-      _cb = NULL;\n-    }\n-  }\n+  _cb = CodeCache::find_blob(pc, forSignalHandler);\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.inline.hpp","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -50,9 +50,1 @@\n-  if (!forSignalHandler) {\n-    _cb = CodeCache::find_blob(pc);\n-  } else {\n-    _cb = CodeCache::find_blob_unsafe(pc);\n-    \/\/ if the code blob appears to be non-entrant just ignore it\n-    if (_cb != NULL && _cb->is_zombie()) {\n-      _cb = NULL;\n-    }\n-  }\n+  _cb = CodeCache::find_blob(pc, forSignalHandler);\n","filename":"src\/hotspot\/cpu\/arm\/frame_arm.inline.hpp","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -39,9 +39,1 @@\n-  if (!forSignalHandler) {\n-    _cb = CodeCache::find_blob(pc);\n-  } else {\n-    _cb = CodeCache::find_blob_unsafe(pc);\n-    \/\/ if the code blob appears to be non-entrant just ignore it\n-    if (_cb != NULL && _cb->is_zombie()) {\n-      _cb = NULL;\n-    }\n-  }\n+  _cb = CodeCache::find_blob(pc, forSignalHandler);\n","filename":"src\/hotspot\/cpu\/ppc\/frame_ppc.inline.hpp","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -56,9 +56,1 @@\n-  if (!forSignalHandler) {\n-    _cb = CodeCache::find_blob(pc);\n-  } else {\n-    _cb = CodeCache::find_blob_unsafe(pc);\n-    \/\/ if the code blob appears to be non-entrant just ignore it\n-    if (_cb != NULL && _cb->is_zombie()) {\n-      _cb = NULL;\n-    }\n-  }\n+  _cb = CodeCache::find_blob(pc, forSignalHandler);\n","filename":"src\/hotspot\/cpu\/riscv\/frame_riscv.inline.hpp","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -38,9 +38,1 @@\n-  if (!forSignalHandler) {\n-    _cb = CodeCache::find_blob(pc);\n-  } else {\n-    _cb = CodeCache::find_blob_unsafe(pc);\n-    \/\/ if the code blob appears to be non-entrant just ignore it\n-    if (_cb != NULL && _cb->is_zombie()) {\n-      _cb = NULL;\n-    }\n-  }\n+  _cb = CodeCache::find_blob(pc, forSignalHandler);\n","filename":"src\/hotspot\/cpu\/s390\/frame_s390.inline.hpp","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -51,9 +51,1 @@\n-  if (!forSignalHandler) {\n-    _cb = CodeCache::find_blob(pc);\n-  } else {\n-    _cb = CodeCache::find_blob_unsafe(pc);\n-    \/\/ if the code blob appears to be non-entrant just ignore it\n-    if (_cb != NULL && _cb->is_zombie()) {\n-      _cb = NULL;\n-    }\n-  }\n+  _cb = CodeCache::find_blob(pc, forSignalHandler);\n","filename":"src\/hotspot\/cpu\/x86\/frame_x86.inline.hpp","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -649,0 +649,15 @@\n+\/\/ Lookup that does not fail if you lookup a zombie method and for_signal_handler is true.\n+\/\/ Be aware that the returned blob can become a zombie at any time later, though!\n+CodeBlob* CodeCache::find_blob(void* pc, bool for_signal_handler) {\n+  if (!for_signal_handler) {\n+    return find_blob(pc);\n+  } else {\n+    CodeBlob* tmp = find_blob_unsafe(pc);\n+    if (tmp != NULL && tmp->is_zombie()) {\n+      \/\/ if the code blob appears to be non-entrant just ignore it\n+      tmp = NULL;\n+    }\n+    return tmp;\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -155,0 +155,1 @@\n+  static CodeBlob* find_blob(void* start, bool for_signal_handler); \/\/ Same as find_blob but does not fail if looking up a zombie method if for_signal_handler is true\n","filename":"src\/hotspot\/share\/code\/codeCache.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}