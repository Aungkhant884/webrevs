{"files":[{"patch":"@@ -229,1 +229,1 @@\n-sun\/java2d\/SunGraphics2D\/DrawImageBilinear.java 8191406 generic-all\n+sun\/java2d\/SunGraphics2D\/DrawImageBilinear.java 8297175 linux-all\n","filename":"test\/jdk\/ProblemList.txt","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * leave artifacts at the edges.\n+ *          leave artifacts at the edges.\n@@ -31,1 +31,0 @@\n- * @author campbelc\n@@ -36,1 +35,0 @@\n-import java.awt.Component;\n@@ -38,0 +36,1 @@\n+import java.awt.EventQueue;\n@@ -54,0 +53,1 @@\n+    private static final int tolerance = 5;\n@@ -58,16 +58,3 @@\n-    private static volatile BufferedImage capture;\n-    private static void doCapture(Component test) {\n-        try {\n-            Thread.sleep(2000);\n-        } catch (InterruptedException ex) {}\n-        \/\/ Grab the screen region\n-        try {\n-            Robot robot = new Robot();\n-            Point pt1 = test.getLocationOnScreen();\n-            Rectangle rect =\n-                new Rectangle(pt1.x, pt1.y, test.getWidth(), test.getHeight());\n-            capture = robot.createScreenCapture(rect);\n-        } catch (Exception e) {\n-            e.printStackTrace();\n-        }\n-    }\n+    private static BufferedImage capture;\n+    private static DrawImageBilinear test;\n+    private static Frame frame;\n@@ -78,2 +65,0 @@\n-        \/\/g.setColor(Color.green);\n-        \/\/g.drawRect(0, 0, SIZE-1, SIZE-1);\n@@ -111,3 +96,1 @@\n-            if (!skipOglTextureTest) {\n-                g2d.drawImage(bimg2, 80, 10, 40, 40, null);\n-            }\n+            g2d.drawImage(bimg2, 80, 10, 40, 40, null);\n@@ -116,1 +99,2 @@\n-            if (vimg.validate(getGraphicsConfiguration()) != VolatileImage.IMAGE_OK) {\n+            if (vimg.validate(getGraphicsConfiguration()) !=\n+                VolatileImage.IMAGE_OK) {\n@@ -123,8 +107,0 @@\n-\n-        synchronized (this) {\n-            if (!done) {\n-                doCapture(this);\n-                done = true;\n-            }\n-            notifyAll();\n-        }\n@@ -148,1 +124,13 @@\n-                if ((actual != 0xfffe0000) && (actual != 0xffff0000)) {\n+                int expected = Color.RED.getRGB();\n+                int alpha = (actual >> 24) & 0xFF;\n+                int red = (actual >> 16) & 0xFF;\n+                int green = (actual >> 8) & 0xFF;\n+                int blue = (actual) & 0xFF;\n+                int standardAlpha = (expected >> 24) & 0xFF;\n+                int standardRed = (expected >> 16) & 0xFF;\n+                int standardGreen = (expected >> 8) & 0xFF;\n+                int standardBlue = (expected) & 0xFF;\n+                if (Math.abs(alpha - standardAlpha) > tolerance ||\n+                    Math.abs(red - standardRed) > tolerance ||\n+                    Math.abs(green - standardGreen) > tolerance ||\n+                    Math.abs(blue - standardBlue) > tolerance) {\n@@ -159,17 +147,3 @@\n-    private static boolean skipOglTextureTest = false;\n-\n-    public static void main(String[] args) {\n-        boolean show = false;\n-        for (String arg : args) {\n-            if (\"-show\".equals(arg)) {\n-                show = true;\n-            }\n-        }\n-\n-        String arch = System.getProperty(\"os.arch\");\n-        boolean isOglEnabled = Boolean.getBoolean(\"sun.java2d.opengl\");\n-        skipOglTextureTest = false;\n-        System.out.println(\"Skip OpenGL texture test: \" + skipOglTextureTest);\n-\n-        DrawImageBilinear test = new DrawImageBilinear();\n-        Frame frame = new Frame();\n+    private static void createAndShowGUI() {\n+        test = new DrawImageBilinear();\n+        frame = new Frame();\n@@ -177,0 +151,4 @@\n+        frame.setBackground(Color.WHITE);\n+        frame.setUndecorated(true);\n+        frame.setAlwaysOnTop(true);\n+        frame.setLocationRelativeTo(null);\n@@ -179,0 +157,1 @@\n+    }\n@@ -180,9 +159,5 @@\n-        \/\/ Wait until the component's been painted\n-        synchronized (test) {\n-            while (!done) {\n-                try {\n-                    test.wait();\n-                } catch (InterruptedException e) {\n-                    throw new RuntimeException(\"Failed: Interrupted\");\n-                }\n-            }\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            EventQueue.invokeAndWait(() -> createAndShowGUI());\n+        } catch (Exception ex) {\n+            ex.printStackTrace();\n@@ -190,0 +165,20 @@\n+        try {\n+            GraphicsConfiguration gc = frame.getGraphicsConfiguration();\n+            if (gc.getColorModel() instanceof IndexColorModel) {\n+                System.out.println(\"IndexColorModel detected: \" +\n+                                   \"test considered PASSED\");\n+                return;\n+            }\n+            Robot robot = new Robot();\n+            robot.setAutoDelay(100);\n+            robot.mouseMove(0,0);\n+            robot.waitForIdle();\n+            Point pt1 = frame.getLocationOnScreen();\n+            Rectangle rect =\n+                new Rectangle(pt1.x, pt1.y,\n+                    frame.getWidth(), frame.getHeight());\n+            capture = robot.createScreenCapture(rect);\n+            robot.waitForIdle();\n+            if (capture == null) {\n+                throw new RuntimeException(\"Failed: capture is null\");\n+            }\n@@ -191,7 +186,6 @@\n-        GraphicsConfiguration gc = frame.getGraphicsConfiguration();\n-        if (gc.getColorModel() instanceof IndexColorModel) {\n-            System.out.println(\"IndexColorModel detected: \" +\n-                               \"test considered PASSED\");\n-            frame.dispose();\n-            return;\n-        }\n+            \/\/ Test background color\n+            int pixel = capture.getRGB(5, 5);\n+            if (pixel != 0xffffffff) {\n+                throw new RuntimeException(\"Failed: Incorrect color for \" +\n+                                           \"background\");\n+            }\n@@ -199,1 +193,5 @@\n-        if (!show) {\n+            \/\/ Test pixels\n+            testRegion(capture, new Rectangle(10, 10, 40, 40));\n+            testRegion(capture, new Rectangle(80, 10, 40, 40));\n+            testRegion(capture, new Rectangle(150, 10, 40, 40));\n+        } finally {\n@@ -202,15 +200,0 @@\n-        if (capture == null) {\n-            throw new RuntimeException(\"Failed: capture is null\");\n-        }\n-\n-        \/\/ Test background color\n-        int pixel = capture.getRGB(5, 5);\n-        if (pixel != 0xffffffff) {\n-            throw new RuntimeException(\"Failed: Incorrect color for \" +\n-                                       \"background\");\n-        }\n-\n-        \/\/ Test pixels\n-        testRegion(capture, new Rectangle(10, 10, 40, 40));\n-        testRegion(capture, new Rectangle(80, 10, 40, 40));\n-        testRegion(capture, new Rectangle(150, 10, 40, 40));\n","filename":"test\/jdk\/sun\/java2d\/SunGraphics2D\/DrawImageBilinear.java","additions":67,"deletions":84,"binary":false,"changes":151,"status":"modified"}]}