{"files":[{"patch":"@@ -104,4 +104,0 @@\n-runtime\/Monitor\/GuaranteedAsyncDeflationIntervalTest.java#allDisabled 8306774 generic-all\n-runtime\/Monitor\/GuaranteedAsyncDeflationIntervalTest.java#guaranteedNoADI 8306774 generic-all\n-runtime\/Monitor\/GuaranteedAsyncDeflationIntervalTest.java#allEnabled 8306774 generic-all\n-runtime\/Monitor\/GuaranteedAsyncDeflationIntervalTest.java#guaranteedNoMUDT 8306774 generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-        public static final int MONITORS = 10_000;\n+        private static final int MONITORS = 10_000;\n@@ -63,1 +63,2 @@\n-        public static Object[] monitors;\n+        private static Object[] monitors;\n+        private static long sink;\n@@ -70,4 +71,5 @@\n-                    try {\n-                        o.wait(1); \/\/ Inflate!\n-                    } catch (InterruptedException ie) {\n-                    }\n+                    \/\/ Object is locked. In current Hotspot, the request for hashcode\n+                    \/\/ would inflate the monitor. While this relies on implementation\n+                    \/\/ detail, this is significantly quicker than doing wait(1), which\n+                    \/\/ might stall for tens of milliseconds.\n+                    sink += o.hashCode();\n@@ -173,1 +175,1 @@\n-            \"-XX:MonitorUsedDeflationThreshold=10\",\n+            \"-XX:MonitorUsedDeflationThreshold=1\",\n","filename":"test\/hotspot\/jtreg\/runtime\/Monitor\/GuaranteedAsyncDeflationIntervalTest.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"}]}