{"files":[{"patch":"@@ -11280,0 +11280,14 @@\n+void Assembler::pext(Register dst, Register src1, Register src2) {\n+  assert(VM_Version::supports_bmi2(), \"bit manipulation instructions not supported\");\n+  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ true, \/* legacy_mode *\/ true, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n+  int encode = vex_prefix_and_encode(dst->encoding(), src1->encoding(), src2->encoding(), VEX_SIMD_F3, VEX_OPCODE_0F_38, &attributes);\n+  emit_int16((unsigned char)0xF5, (0xC0 | encode));\n+}\n+\n+void Assembler::pdep(Register dst, Register src1, Register src2) {\n+  assert(VM_Version::supports_bmi2(), \"bit manipulation instructions not supported\");\n+  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ true, \/* legacy_mode *\/ true, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n+  int encode = vex_prefix_and_encode(dst->encoding(), src1->encoding(), src2->encoding(), VEX_SIMD_F2, VEX_OPCODE_0F_38, &attributes);\n+  emit_int16((unsigned char)0xF5, (0xC0 | encode));\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2181,0 +2181,3 @@\n+  void pdep(Register dst, Register src1, Register src2);\n+  void pext(Register dst, Register src1, Register src2);\n+\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -4063,0 +4063,39 @@\n+void C2_MacroAssembler::vector_long_to_maskvec(XMMRegister dst, Register src, Register rtmp1,\n+                                               Register rtmp2, XMMRegister xtmp, int mask_len,\n+                                               int vec_enc) {\n+  int index = 0;\n+  int vindex = 0;\n+  movq(rtmp2, src);\n+  mov64(rtmp1, 0x0101010101010101L);\n+  pdep(rtmp1, rtmp2, rtmp1);\n+  if (mask_len > 8) {\n+    vpxor(xtmp, xtmp, xtmp, vec_enc);\n+    movq(xtmp, rtmp1);\n+  }\n+  movq(dst, rtmp1);\n+\n+  mask_len -= 8;\n+  while (mask_len > 0) {\n+    assert ((mask_len & 0x7) == 0, \"mask must be multiple of 8\");\n+    index++;\n+    if ((index % 2) == 0) {\n+      pxor(xtmp, xtmp);\n+    }\n+    mov64(rtmp1, 0x0101010101010101L);\n+    shrq(rtmp2, 8);\n+    pdep(rtmp1, rtmp2, rtmp1);\n+    pinsrq(xtmp, rtmp1, index % 2);\n+    vindex = index \/ 2;\n+    if (vindex) {\n+      \/\/ Write entire 16 byte vector when both 64 bit\n+      \/\/ lanes are update to save redundant instructions.\n+      if (index % 2) {\n+        vinsertf128(dst, dst, xtmp, vindex);\n+      }\n+    } else {\n+      vmovdqu(dst, xtmp);\n+    }\n+    mask_len -= 8;\n+  }\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":39,"deletions":0,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -233,0 +233,2 @@\n+  void vector_long_to_maskvec(XMMRegister dst, Register src, Register rtmp1,\n+                              Register rtmp2, XMMRegister xtmp, int mask_len, int vec_enc);\n@@ -234,0 +236,1 @@\n+\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1602,0 +1602,8 @@\n+    case Op_VectorLongToMask:\n+      if (UseAVX < 1) {\n+        return false;\n+      }\n+      if (UseAVX < 3 && !VM_Version::supports_bmi2()) {\n+        return false;\n+      }\n+      break;\n@@ -9482,0 +9490,43 @@\n+\n+instruct long_to_maskLE8_avx(vec dst, rRegL src, rRegL rtmp1, rRegL rtmp2, vec xtmp) %{\n+  predicate(n->bottom_type()->isa_vectmask() == NULL && Matcher::vector_length(n) <= 8);\n+  match(Set dst (VectorLongToMask src));\n+  effect(TEMP dst, TEMP rtmp1, TEMP rtmp2, TEMP xtmp);\n+  format %{ \"long_to_mask_avx $dst, $src\\t! using $rtmp1, $rtmp2, $xtmp as TEMP\" %}\n+  ins_encode %{\n+    int mask_len = Matcher::vector_length(this);\n+    int vec_enc  = vector_length_encoding(mask_len*8);\n+    __ vector_long_to_maskvec($dst$$XMMRegister, $src$$Register, $rtmp1$$Register,\n+                              $rtmp2$$Register, xnoreg, mask_len, vec_enc);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+\n+instruct long_to_maskGT8_avx(vec dst, rRegL src, rRegL rtmp1, rRegL rtmp2, vec xtmp1, vec xtmp2, rFlagsReg cr) %{\n+  predicate(n->bottom_type()->isa_vectmask() == NULL && Matcher::vector_length(n) > 8);\n+  match(Set dst (VectorLongToMask src));\n+  effect(TEMP dst, TEMP rtmp1, TEMP rtmp2, TEMP xtmp1, TEMP xtmp2, KILL cr);\n+  format %{ \"long_to_mask_avx $dst, $src\\t! using $rtmp1, $rtmp2, $xtmp1, $xtmp2  as TEMP\" %}\n+  ins_encode %{\n+    int mask_len = Matcher::vector_length(this);\n+    assert(mask_len <= 32, \"invalid mask length\");\n+    int vec_enc  = vector_length_encoding(mask_len*8);\n+    __ vector_long_to_maskvec($dst$$XMMRegister, $src$$Register, $rtmp1$$Register,\n+                              $rtmp2$$Register, $xtmp1$$XMMRegister, mask_len, vec_enc);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+instruct long_to_mask_evex(kReg dst, rRegL src, rRegL rtmp) %{\n+  predicate(n->bottom_type()->isa_vectmask());\n+  match(Set dst (VectorLongToMask src));\n+  effect(TEMP rtmp);\n+  format %{ \"long_to_mask_evex $dst, $src\\t! using $rtmp as TEMP\" %}\n+  ins_encode %{\n+    int mask_len = Matcher::vector_length(this);\n+    __ movq($rtmp$$Register, $src$$Register);\n+    __ kmov($dst$$KRegister, $rtmp$$Register);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n@@ -9501,0 +9552,1 @@\n+\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":52,"deletions":0,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -4237,2 +4237,2 @@\n-    \"VectorMaskWrapper\", \"VectorMaskCmp\", \"VectorReinterpret\",\"LoadVectorMasked\",\"StoreVectorMasked\",\n-    \"FmaVD\", \"FmaVF\",\"PopCountVI\",\n+    \"VectorMaskWrapper\",\"VectorMaskCmp\",\"VectorReinterpret\",\"LoadVectorMasked\",\"StoreVectorMasked\",\n+    \"FmaVD\",\"FmaVF\",\"PopCountVI\",\"VectorLongToMask\",\n","filename":"src\/hotspot\/share\/adlc\/formssel.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -877,0 +877,1 @@\n+                                               \"I\"                                                                                             \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -431,0 +431,1 @@\n+macro(VectorLongToMask)\n","filename":"src\/hotspot\/share\/opto\/classes.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -793,1 +793,1 @@\n-\/\/                    long bits, S s,\n+\/\/                    long bits, int bitwise, S s,\n@@ -800,2 +800,11 @@\n-  if (vector_klass == NULL || elem_klass == NULL || vlen == NULL ||\n-      vector_klass->const_oop() == NULL || elem_klass->const_oop() == NULL || !vlen->is_con()) {\n+  \/\/ bitwise argument signifies that each bit of source is to be considered while\n+  \/\/ broadcasting. It is used to differentiate between VectorMask.maskAll and\n+  \/\/ VectoMask.fromLong operations, where in former case long 'bits' contains\n+  \/\/ mask value (true\/false) to be replicated across mask lanes and in later\n+  \/\/ case each bit of long argument is considered separately while setting\n+  \/\/ corresponding mask lane.\n+  const TypeInt*     bitwise      = gvn().type(argument(5))->isa_int();\n+\n+  if (vector_klass == NULL || elem_klass == NULL || vlen == NULL || bitwise == NULL ||\n+      vector_klass->const_oop() == NULL || elem_klass->const_oop() == NULL ||\n+      !vlen->is_con() || !bitwise->is_con()) {\n@@ -803,1 +812,1 @@\n-      tty->print_cr(\"  ** missing constant: vclass=%s etype=%s vlen=%s\",\n+      tty->print_cr(\"  ** missing constant: vclass=%s etype=%s vlen=%s bitwise=%s\",\n@@ -806,1 +815,2 @@\n-                    NodeClassNames[argument(2)->Opcode()]);\n+                    NodeClassNames[argument(2)->Opcode()],\n+                    NodeClassNames[argument(5)->Opcode()]);\n@@ -829,3 +839,6 @@\n-  \/\/ TODO When mask usage is supported, VecMaskNotUsed needs to be VecMaskUseLoad.\n-  if (!arch_supports_vector(VectorNode::replicate_opcode(elem_bt), num_elem, elem_bt,\n-                            (is_vector_mask(vbox_klass) ? VecMaskUseStore : VecMaskNotUsed), true \/*has_scalar_args*\/)) {\n+  bool is_mask = is_vector_mask(vbox_klass);\n+  bool is_fromlong = is_mask ? bitwise->get_con() == 1 : false;\n+  VectorMaskUseType checkFlags = (VectorMaskUseType)(is_mask ? VecMaskUseAll : VecMaskNotUsed);\n+  int opc = is_fromlong ? Op_VectorLongToMask : VectorNode::replicate_opcode(elem_bt);\n+\n+  if (!arch_supports_vector(opc, num_elem, elem_bt, checkFlags, true \/*has_scalar_args*\/)) {\n@@ -833,1 +846,1 @@\n-      tty->print_cr(\"  ** not supported: arity=0 op=broadcast vlen=%d etype=%s ismask=%d\",\n+      tty->print_cr(\"  ** not supported: arity=0 op=broadcast vlen=%d etype=%s ismask=%d isfromlong=%d\",\n@@ -835,1 +848,2 @@\n-                    is_vector_mask(vbox_klass) ? 1 : 0);\n+                    is_mask ? 1 : 0,\n+                    is_fromlong ? 1 : 0);\n@@ -840,0 +854,1 @@\n+  Node* broadcast = NULL;\n@@ -841,18 +856,10 @@\n-  Node* elem = NULL;\n-  switch (elem_bt) {\n-    case T_BOOLEAN: \/\/ fall-through\n-    case T_BYTE:    \/\/ fall-through\n-    case T_SHORT:   \/\/ fall-through\n-    case T_CHAR:    \/\/ fall-through\n-    case T_INT: {\n-      elem = gvn().transform(new ConvL2INode(bits));\n-      break;\n-    }\n-    case T_DOUBLE: {\n-      elem = gvn().transform(new MoveL2DNode(bits));\n-      break;\n-    }\n-    case T_FLOAT: {\n-      bits = gvn().transform(new ConvL2INode(bits));\n-      elem = gvn().transform(new MoveI2FNode(bits));\n-      break;\n+  Node* elem = bits;\n+\n+  if (is_fromlong) {\n+    const TypeVect* vt = TypeVect::makemask(elem_bt, num_elem);\n+    if (vt->isa_vectmask()) {\n+      broadcast = gvn().transform(new VectorLongToMaskNode(elem, vt));\n+    } else {\n+      const TypeVect* mvt = TypeVect::make(T_BOOLEAN, num_elem);\n+      broadcast = gvn().transform(new VectorLongToMaskNode(elem, mvt));\n+      broadcast = gvn().transform(new VectorLoadMaskNode(broadcast, vt));\n@@ -860,3 +867,24 @@\n-    case T_LONG: {\n-      elem = bits; \/\/ no conversion needed\n-      break;\n+  } else {\n+    switch (elem_bt) {\n+      case T_BOOLEAN: \/\/ fall-through\n+      case T_BYTE:    \/\/ fall-through\n+      case T_SHORT:   \/\/ fall-through\n+      case T_CHAR:    \/\/ fall-through\n+      case T_INT: {\n+        elem = gvn().transform(new ConvL2INode(bits));\n+        break;\n+      }\n+      case T_DOUBLE: {\n+        elem = gvn().transform(new MoveL2DNode(bits));\n+        break;\n+      }\n+      case T_FLOAT: {\n+        bits = gvn().transform(new ConvL2INode(bits));\n+        elem = gvn().transform(new MoveI2FNode(bits));\n+        break;\n+      }\n+      case T_LONG: {\n+        \/\/ no conversion needed\n+        break;\n+      }\n+      default: fatal(\"%s\", type2name(elem_bt));\n@@ -864,1 +892,2 @@\n-    default: fatal(\"%s\", type2name(elem_bt));\n+    broadcast = VectorNode::scalar2vector(elem, num_elem, Type::get_const_basic_type(elem_bt), is_mask);\n+    broadcast = gvn().transform(broadcast);\n@@ -867,3 +896,0 @@\n-  Node* broadcast = VectorNode::scalar2vector(elem, num_elem, Type::get_const_basic_type(elem_bt), is_vector_mask(vbox_klass));\n-  broadcast = gvn().transform(broadcast);\n-\n@@ -2496,15 +2522,1 @@\n-          \/\/ Special handling for casting operation involving floating point types.\n-          \/\/ Case A) F -> X :=  F -> VectorMaskCast (F->I\/L [NOP]) -> VectorCast[I\/L]2X\n-          \/\/ Case B) X -> F :=  X -> VectorCastX2[I\/L] -> VectorMaskCast ([I\/L]->F [NOP])\n-          \/\/ Case C) F -> F :=  VectorMaskCast (F->I\/L [NOP]) -> VectorCast[I\/L]2[L\/I] -> VectotMaskCast (L\/I->F [NOP])\n-          if (is_floating_point_type(elem_bt_from)) {\n-            const TypeVect* new_src_type = TypeVect::make(new_elem_bt_from, num_elem_to, is_mask);\n-            op = gvn().transform(new VectorMaskCastNode(op, new_src_type));\n-          }\n-          if (is_floating_point_type(elem_bt_to)) {\n-            new_elem_bt_to = elem_bt_to == T_FLOAT ? T_INT : T_LONG;\n-          }\n-          op = gvn().transform(VectorCastNode::make(cast_vopc, op, new_elem_bt_to, num_elem_to));\n-          if (new_elem_bt_to != elem_bt_to) {\n-            op = gvn().transform(new VectorMaskCastNode(op, dst_type));\n-          }\n+          op = VectorMaskCastNode::makeCastNode(&gvn(), op, dst_type);\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":62,"deletions":50,"binary":false,"changes":112,"status":"modified"},{"patch":"@@ -1444,0 +1444,73 @@\n+Node* VectorMaskToLongNode::Identity(PhaseGVN* phase) {\n+  if (in(1)->Opcode() == Op_VectorLongToMask) {\n+    return in(1)->in(1);\n+  }\n+  return this;\n+}\n+\n+\n+Node* VectorMaskCastNode::makeCastNode(PhaseGVN* phase, Node* src, const TypeVect* dst_type) {\n+  const TypeVect* src_type = src->bottom_type()->is_vect();\n+  assert(src_type->length() == dst_type->length(), \"\");\n+\n+  int num_elem = src_type->length();\n+  BasicType elem_bt_from = src_type->element_basic_type();\n+  BasicType elem_bt_to = dst_type->element_basic_type();\n+\n+  if (dst_type->isa_vectmask() == NULL && src_type->isa_vectmask() == NULL &&\n+      type2aelembytes(elem_bt_from) != type2aelembytes(elem_bt_to)) {\n+\n+    Node* op = src;\n+    BasicType new_elem_bt_from = elem_bt_from;\n+    BasicType new_elem_bt_to = elem_bt_to;\n+    if (is_floating_point_type(elem_bt_from)) {\n+      new_elem_bt_from =  elem_bt_from == T_FLOAT ? T_INT : T_LONG;\n+    }\n+    if (is_floating_point_type(elem_bt_to)) {\n+      new_elem_bt_to = elem_bt_to == T_FLOAT ? T_INT : T_LONG;\n+    }\n+\n+    \/\/ Special handling for casting operation involving floating point types.\n+    \/\/ Case A) F -> X :=  F -> VectorMaskCast (F->I\/L [NOP]) -> VectorCast[I\/L]2X\n+    \/\/ Case B) X -> F :=  X -> VectorCastX2[I\/L] -> VectorMaskCast ([I\/L]->F [NOP])\n+    \/\/ Case C) F -> F :=  VectorMaskCast (F->I\/L [NOP]) -> VectorCast[I\/L]2[L\/I] -> VectotMaskCast (L\/I->F [NOP])\n+\n+    if (new_elem_bt_from != elem_bt_from) {\n+      const TypeVect* new_src_type = TypeVect::makemask(new_elem_bt_from, num_elem);\n+      op = phase->transform(new VectorMaskCastNode(op, new_src_type));\n+    }\n+\n+    op = phase->transform(VectorCastNode::make(VectorCastNode::opcode(new_elem_bt_from), op, new_elem_bt_to, num_elem));\n+\n+    if (new_elem_bt_to != elem_bt_to) {\n+      op = phase->transform(new VectorMaskCastNode(op, dst_type));\n+    }\n+    return op;\n+  } else {\n+    return new VectorMaskCastNode(src, dst_type);\n+  }\n+}\n+\n+Node* VectorLongToMaskNode::Ideal(PhaseGVN* phase, bool can_reshape) {\n+  const TypeVect* dst_type = bottom_type()->is_vect();\n+  if (in(1)->Opcode() == Op_AndL &&\n+      in(1)->in(1)->Opcode() == Op_VectorMaskToLong &&\n+      in(1)->in(2)->bottom_type()->isa_long() &&\n+      in(1)->in(2)->bottom_type()->is_long()->is_con() &&\n+      in(1)->in(2)->bottom_type()->is_long()->get_con() == ((1L << dst_type->length()) - 1)) {\n+      \/\/ Different src\/dst mask length represents a re-interpretation operation,\n+      \/\/ we can however generate a mask casting operation if length matches.\n+     Node* src = in(1)->in(1)->in(1);\n+     if (src->Opcode() == Op_VectorStoreMask) {\n+       src = src->in(1);\n+     }\n+     const TypeVect* src_type = src->bottom_type()->is_vect();\n+     if (src_type->length() == dst_type->length() &&\n+         ((src_type->isa_vectmask() == NULL && dst_type->isa_vectmask() == NULL) ||\n+          (src_type->isa_vectmask() && dst_type->isa_vectmask()))) {\n+       return VectorMaskCastNode::makeCastNode(phase, src, dst_type);\n+     }\n+  }\n+  return NULL;\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":73,"deletions":0,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -984,0 +984,10 @@\n+  virtual Node* Identity(PhaseGVN* phase);\n+};\n+\n+class VectorLongToMaskNode : public VectorNode {\n+ public:\n+  VectorLongToMaskNode(Node* mask, const TypeVect* ty):\n+    VectorNode(mask, ty) {\n+  }\n+  virtual int Opcode() const;\n+  Node* Ideal(PhaseGVN* phase, bool can_reshape);\n@@ -1408,1 +1418,1 @@\n-\n+  static Node* makeCastNode(PhaseGVN* phase, Node* in1, const TypeVect * vt);\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -172,1 +172,1 @@\n-                        long bits, S s,\n+                        long bits, int bitwise, S s,\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/vector\/VectorSupport.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -761,1 +761,1 @@\n-                                                  (bit ? -1 : 0), null,\n+                                                  (bit ? -1 : 0), 0, null,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte128Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -793,1 +793,1 @@\n-                                                  (bit ? -1 : 0), null,\n+                                                  (bit ? -1 : 0), 0, null,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte256Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -857,1 +857,1 @@\n-                                                  (bit ? -1 : 0), null,\n+                                                  (bit ? -1 : 0), 0, null,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte512Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -745,1 +745,1 @@\n-                                                  (bit ? -1 : 0), null,\n+                                                  (bit ? -1 : 0), 0, null,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte64Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -731,1 +731,1 @@\n-                                                  (bit ? -1 : 0), null,\n+                                                  (bit ? -1 : 0), 0, null,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteMaxVector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -459,1 +459,1 @@\n-                                0, vsp,\n+                                0, 0, vsp,\n@@ -4154,1 +4154,1 @@\n-                    bits, this,\n+                    bits, 0, this,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -722,1 +722,1 @@\n-                                                  (bit ? -1 : 0), null,\n+                                                  (bit ? -1 : 0), 0, null,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double128Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -726,1 +726,1 @@\n-                                                  (bit ? -1 : 0), null,\n+                                                  (bit ? -1 : 0), 0, null,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double256Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -734,1 +734,1 @@\n-                                                  (bit ? -1 : 0), null,\n+                                                  (bit ? -1 : 0), 0, null,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double512Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -720,1 +720,1 @@\n-                                                  (bit ? -1 : 0), null,\n+                                                  (bit ? -1 : 0), 0, null,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double64Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -719,1 +719,1 @@\n-                                                  (bit ? -1 : 0), null,\n+                                                  (bit ? -1 : 0), 0, null,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleMaxVector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -448,1 +448,1 @@\n-                        toBits(0.0f), vsp,\n+                        toBits(0.0f), 0, vsp,\n@@ -3759,1 +3759,1 @@\n-                    bits, this,\n+                    bits, 0, this,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -726,1 +726,1 @@\n-                                                  (bit ? -1 : 0), null,\n+                                                  (bit ? -1 : 0), 0, null,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float128Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -734,1 +734,1 @@\n-                                                  (bit ? -1 : 0), null,\n+                                                  (bit ? -1 : 0), 0, null,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float256Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -750,1 +750,1 @@\n-                                                  (bit ? -1 : 0), null,\n+                                                  (bit ? -1 : 0), 0, null,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float512Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -722,1 +722,1 @@\n-                                                  (bit ? -1 : 0), null,\n+                                                  (bit ? -1 : 0), 0, null,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float64Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -719,1 +719,1 @@\n-                                                  (bit ? -1 : 0), null,\n+                                                  (bit ? -1 : 0), 0, null,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatMaxVector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -448,1 +448,1 @@\n-                        toBits(0.0f), vsp,\n+                        toBits(0.0f), 0, vsp,\n@@ -3709,1 +3709,1 @@\n-                    bits, this,\n+                    bits, 0, this,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -737,1 +737,1 @@\n-                                                  (bit ? -1 : 0), null,\n+                                                  (bit ? -1 : 0), 0, null,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int128Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -745,1 +745,1 @@\n-                                                  (bit ? -1 : 0), null,\n+                                                  (bit ? -1 : 0), 0, null,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int256Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -761,1 +761,1 @@\n-                                                  (bit ? -1 : 0), null,\n+                                                  (bit ? -1 : 0), 0, null,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int512Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -733,1 +733,1 @@\n-                                                  (bit ? -1 : 0), null,\n+                                                  (bit ? -1 : 0), 0, null,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int64Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -731,1 +731,1 @@\n-                                                  (bit ? -1 : 0), null,\n+                                                  (bit ? -1 : 0), 0, null,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntMaxVector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -459,1 +459,1 @@\n-                                0, vsp,\n+                                0, 0, vsp,\n@@ -3879,1 +3879,1 @@\n-                    bits, this,\n+                    bits, 0, this,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -723,1 +723,1 @@\n-                                                  (bit ? -1 : 0), null,\n+                                                  (bit ? -1 : 0), 0, null,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long128Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -727,1 +727,1 @@\n-                                                  (bit ? -1 : 0), null,\n+                                                  (bit ? -1 : 0), 0, null,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long256Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -735,1 +735,1 @@\n-                                                  (bit ? -1 : 0), null,\n+                                                  (bit ? -1 : 0), 0, null,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long512Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -721,1 +721,1 @@\n-                                                  (bit ? -1 : 0), null,\n+                                                  (bit ? -1 : 0), 0, null,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long64Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -721,1 +721,1 @@\n-                                                  (bit ? -1 : 0), null,\n+                                                  (bit ? -1 : 0), 0, null,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongMaxVector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -459,1 +459,1 @@\n-                                0, vsp,\n+                                0, 0, vsp,\n@@ -3814,1 +3814,1 @@\n-                    bits, this,\n+                    bits, 0, this,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -745,1 +745,1 @@\n-                                                  (bit ? -1 : 0), null,\n+                                                  (bit ? -1 : 0), 0, null,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short128Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -761,1 +761,1 @@\n-                                                  (bit ? -1 : 0), null,\n+                                                  (bit ? -1 : 0), 0, null,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short256Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -793,1 +793,1 @@\n-                                                  (bit ? -1 : 0), null,\n+                                                  (bit ? -1 : 0), 0, null,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short512Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -737,1 +737,1 @@\n-                                                  (bit ? -1 : 0), null,\n+                                                  (bit ? -1 : 0), 0, null,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short64Vector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -731,1 +731,1 @@\n-                                                  (bit ? -1 : 0), null,\n+                                                  (bit ? -1 : 0), 0, null,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortMaxVector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -459,1 +459,1 @@\n-                                0, vsp,\n+                                0, 0, vsp,\n@@ -4148,1 +4148,1 @@\n-                    bits, this,\n+                    bits, 0, this,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -240,20 +240,18 @@\n-        AbstractSpecies<E> vspecies = (AbstractSpecies<E>) species;\n-        int laneCount = vspecies.laneCount();\n-        if (laneCount < Long.SIZE) {\n-            int extraSignBits = Long.SIZE - laneCount;\n-            bits <<= extraSignBits;\n-            bits >>= extraSignBits;\n-        }\n-        if (bits == (bits >> 1)) {\n-            \/\/ Special case.\n-            assert(bits == 0 || bits == -1);\n-            return vspecies.maskAll(bits != 0);\n-        }\n-        \/\/ FIXME: Intrinsify this.\n-        long shifted = bits;\n-        boolean[] a = new boolean[laneCount];\n-        for (int i = 0; i < a.length; i++) {\n-            a[i] = ((shifted & 1) != 0);\n-            shifted >>= 1;  \/\/ replicate sign bit\n-        }\n-        return fromValues(vspecies, a);\n+        AbstractSpecies<E> vsp = (AbstractSpecies<E>) species;\n+        bits = bits & (0xFFFFFFFFFFFFFFFFL >>> (64 - vsp.laneCount()));\n+        return VectorSupport.broadcastCoerced(vsp.maskType(), vsp.elementType(), vsp.laneCount(), bits, 1, vsp,\n+                                              (m, s) -> {\n+                                                  if (m == (m >> 1)) {\n+                                                      \/\/ Special case.\n+                                                      assert(m == 0 || m == -1);\n+                                                      return s.maskAll(m != 0);\n+                                                  }\n+\n+                                                  long shifted = m;\n+                                                  boolean[] a = new boolean[s.laneCount()];\n+                                                  for (int i = 0; i < a.length; i++) {\n+                                                      a[i] = ((shifted & 1) != 0);\n+                                                      shifted >>= 1;  \/\/ replicate sign bit\n+                                                  }\n+                                                  return fromValues(s, a);\n+                                              });\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/VectorMask.java","additions":18,"deletions":20,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -474,1 +474,1 @@\n-                        toBits(0.0f), vsp,\n+                        toBits(0.0f), 0, vsp,\n@@ -478,1 +478,1 @@\n-                                0, vsp,\n+                                0, 0, vsp,\n@@ -5332,1 +5332,1 @@\n-                    bits, this,\n+                    bits, 0, this,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1004,1 +1004,1 @@\n-                                                  (bit ? -1 : 0), null,\n+                                                  (bit ? -1 : 0), 0, null,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-VectorBits.java.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5515,1 +5515,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte128VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5515,1 +5515,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte256VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5515,1 +5515,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte512VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5515,1 +5515,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte64VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4894,1 +4894,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4894,1 +4894,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4894,1 +4894,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4894,1 +4894,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4872,1 +4872,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4872,1 +4872,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4872,1 +4872,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4872,1 +4872,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5469,1 +5469,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int128VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5469,1 +5469,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int256VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5469,1 +5469,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int512VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5469,1 +5469,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int64VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5353,1 +5353,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long128VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5353,1 +5353,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long256VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5353,1 +5353,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long512VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5353,1 +5353,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long64VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5494,1 +5494,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short128VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5494,1 +5494,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short256VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5494,1 +5494,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short512VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5494,1 +5494,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short64VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -502,1 +502,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Miscellaneous.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,138 @@\n+\/\/\n+\/\/ Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+\/\/\n+\/\/ This code is free software; you can redistribute it and\/or modify it\n+\/\/ under the terms of the GNU General Public License version 2 only, as\n+\/\/ published by the Free Software Foundation.\n+\/\/\n+\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n+\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+\/\/ version 2 for more details (a copy is included in the LICENSE file that\n+\/\/ accompanied this code).\n+\/\/\n+\/\/ You should have received a copy of the GNU General Public License version\n+\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n+\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+\/\/\n+\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+\/\/ or visit www.oracle.com if you need additional information or have any\n+\/\/ questions.\n+\/\/\n+\/\/\n+package org.openjdk.bench.jdk.incubator.vector;\n+\n+import jdk.incubator.vector.*;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@State(Scope.Thread)\n+@Fork(jvmArgsPrepend = {\"--add-modules=jdk.incubator.vector\"})\n+public class MaskFromLongBenchmark {\n+    static long val = 0;\n+\n+    @Setup(Level.Invocation)\n+    public void BmSetup() {\n+        val++;\n+    }\n+\n+    @Benchmark\n+    public int microMaskFromLong_Byte64() {\n+        VectorMask mask = VectorMask.fromLong(ByteVector.SPECIES_64, val);\n+        return mask.laneIsSet(1) ? 1 : 0;\n+    }\n+\n+    @Benchmark\n+    public int microMaskFromLong_Byte128() {\n+        VectorMask mask = VectorMask.fromLong(ByteVector.SPECIES_128, val);\n+        return mask.laneIsSet(1) ? 1 : 0;\n+    }\n+\n+    @Benchmark\n+    public int microMaskFromLong_Byte256() {\n+        VectorMask mask = VectorMask.fromLong(ByteVector.SPECIES_256, val);\n+        return mask.laneIsSet(1) ? 1 : 0;\n+    }\n+\n+    @Benchmark\n+    public int microMaskFromLong_Byte512() {\n+        VectorMask mask = VectorMask.fromLong(ByteVector.SPECIES_512, val);\n+        return mask.laneIsSet(1) ? 1 : 0;\n+    }\n+\n+    @Benchmark\n+    public int microMaskFromLong_Short64() {\n+        VectorMask mask = VectorMask.fromLong(ShortVector.SPECIES_64, val);\n+        return mask.laneIsSet(1) ? 1 : 0;\n+    }\n+\n+    @Benchmark\n+    public int microMaskFromLong_Short128() {\n+        VectorMask mask = VectorMask.fromLong(ShortVector.SPECIES_128, val);\n+        return mask.laneIsSet(1) ? 1 : 0;\n+    }\n+\n+    @Benchmark\n+    public int microMaskFromLong_Short256() {\n+        VectorMask mask = VectorMask.fromLong(ShortVector.SPECIES_256, val);\n+        return mask.laneIsSet(1) ? 1 : 0;\n+    }\n+\n+    @Benchmark\n+    public int microMaskFromLong_Short512() {\n+        VectorMask mask = VectorMask.fromLong(ShortVector.SPECIES_512, val);\n+        return mask.laneIsSet(1) ? 1 : 0;\n+    }\n+\n+    @Benchmark\n+    public int microMaskFromLong_Integer64() {\n+        VectorMask mask = VectorMask.fromLong(IntVector.SPECIES_64, val);\n+        return mask.laneIsSet(1) ? 1 : 0;\n+    }\n+\n+    @Benchmark\n+    public int microMaskFromLong_Integer128() {\n+        VectorMask mask = VectorMask.fromLong(IntVector.SPECIES_128, val);\n+        return mask.laneIsSet(1) ? 1 : 0;\n+    }\n+\n+    @Benchmark\n+    public int microMaskFromLong_Integer256() {\n+        VectorMask mask = VectorMask.fromLong(IntVector.SPECIES_256, val);\n+        return mask.laneIsSet(1) ? 1 : 0;\n+    }\n+\n+    @Benchmark\n+    public int microMaskFromLong_Integer512() {\n+        VectorMask mask = VectorMask.fromLong(IntVector.SPECIES_512, val);\n+        return mask.laneIsSet(1) ? 1 : 0;\n+    }\n+\n+    @Benchmark\n+    public int microMaskFromLong_Long64() {\n+        VectorMask mask = VectorMask.fromLong(LongVector.SPECIES_64, val);\n+        return mask.laneIsSet(0) ? 1 : 0;\n+    }\n+\n+    @Benchmark\n+    public int microMaskFromLong_Long128() {\n+        VectorMask mask = VectorMask.fromLong(LongVector.SPECIES_128, val);\n+        return mask.laneIsSet(1) ? 1 : 0;\n+    }\n+\n+    @Benchmark\n+    public int microMaskFromLong_Long256() {\n+        VectorMask mask = VectorMask.fromLong(LongVector.SPECIES_256, val);\n+        return mask.laneIsSet(1) ? 1 : 0;\n+    }\n+\n+    @Benchmark\n+    public int microMaskFromLong_Long512() {\n+        VectorMask mask = VectorMask.fromLong(LongVector.SPECIES_512, val);\n+        return mask.laneIsSet(1) ? 1 : 0;\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/MaskFromLongBenchmark.java","additions":138,"deletions":0,"binary":false,"changes":138,"status":"added"}]}