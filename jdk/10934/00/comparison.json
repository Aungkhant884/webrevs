{"files":[{"patch":"@@ -179,0 +179,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/OCSPNonceExtension.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -141,0 +141,1 @@\n+    @Override\n@@ -192,13 +193,0 @@\n-    \/**\n-     * Delete the attribute value.\n-     *\/\n-    public void delete(String name) throws IOException {\n-        if (name.equalsIgnoreCase(DESCRIPTIONS)) {\n-            accessDescriptions = new ArrayList<>();\n-        } else {\n-            throw new IOException(\"Attribute name [\" + name +\n-                                \"] not recognized by \" +\n-                                \"CertAttrSet:AuthorityInfoAccessExtension.\");\n-        }\n-        encodeThis();\n-    }\n@@ -206,9 +194,0 @@\n-    \/**\n-     * Return an enumeration of names of attributes existing within this\n-     * attribute.\n-     *\/\n-    public Enumeration<String> getElements() {\n-        AttributeNameEnumeration elements = new AttributeNameEnumeration();\n-        elements.addElement(DESCRIPTIONS);\n-        return elements.elements();\n-    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/AuthorityInfoAccessExtension.java","additions":1,"deletions":22,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.util.Enumeration;\n@@ -275,26 +274,0 @@\n-    \/**\n-     * Delete the attribute value.\n-     *\/\n-    public void delete(String name) throws IOException {\n-        if (name.equalsIgnoreCase(KEY_ID)) {\n-            id = null;\n-        } else if (name.equalsIgnoreCase(AUTH_NAME)) {\n-            names = null;\n-        } else if (name.equalsIgnoreCase(SERIAL_NUMBER)) {\n-            serialNum = null;\n-        } else {\n-          throw new IOException(\"Attribute name not recognized by \" +\n-                        \"CertAttrSet:AuthorityKeyIdentifier.\");\n-        }\n-        encodeThis();\n-    }\n-\n-    \/**\n-     * Return an enumeration of names of attributes existing within this\n-     * attribute.\n-     *\/\n-    public Enumeration<String> getElements() {\n-        AttributeNameEnumeration elements = new AttributeNameEnumeration();\n-        elements.addElement(KEY_ID);\n-        elements.addElement(AUTH_NAME);\n-        elements.addElement(SERIAL_NUMBER);\n@@ -302,2 +275,0 @@\n-        return (elements.elements());\n-    }\n@@ -308,0 +279,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/AuthorityKeyIdentifierExtension.java","additions":1,"deletions":29,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.util.Enumeration;\n@@ -237,14 +236,0 @@\n-    \/**\n-     * Delete the attribute value.\n-     *\/\n-    public void delete(String name) throws IOException {\n-        if (name.equalsIgnoreCase(IS_CA)) {\n-            ca = false;\n-        } else if (name.equalsIgnoreCase(PATH_LEN)) {\n-            pathLen = -1;\n-        } else {\n-          throw new IOException(\"Attribute name not recognized by \" +\n-                                \"CertAttrSet:BasicConstraints.\");\n-        }\n-        encodeThis();\n-    }\n@@ -252,11 +237,0 @@\n-    \/**\n-     * Return an enumeration of names of attributes existing within this\n-     * attribute.\n-     *\/\n-    public Enumeration<String> getElements() {\n-        AttributeNameEnumeration elements = new AttributeNameEnumeration();\n-        elements.addElement(IS_CA);\n-        elements.addElement(PATH_LEN);\n-\n-        return (elements.elements());\n-    }\n@@ -267,0 +241,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/BasicConstraintsExtension.java","additions":1,"deletions":26,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import java.util.Collections;\n@@ -191,0 +190,1 @@\n+    @Override\n@@ -252,14 +252,0 @@\n-    \/**\n-     * Delete the attribute value.\n-     *\/\n-    public void delete(String name) throws IOException {\n-        if (name.equalsIgnoreCase(POINTS)) {\n-            distributionPoints =\n-                    Collections.emptyList();\n-        } else {\n-            throw new IOException(\"Attribute name [\" + name +\n-                                  \"] not recognized by \" +\n-                                  \"CertAttrSet:\" + extensionName + '.');\n-        }\n-        encodeThis();\n-    }\n@@ -267,9 +253,0 @@\n-    \/**\n-     * Return an enumeration of names of attributes existing within this\n-     * attribute.\n-     *\/\n-    public Enumeration<String> getElements() {\n-        AttributeNameEnumeration elements = new AttributeNameEnumeration();\n-        elements.addElement(POINTS);\n-        return elements.elements();\n-    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/CRLDistributionPointsExtension.java","additions":1,"deletions":24,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -124,2 +124,2 @@\n-            CertAttrSet<?> crlExt = (CertAttrSet<?>)cons.newInstance(passed);\n-            if (map.put(crlExt.getName(), (Extension)crlExt) != null) {\n+            Extension crlExt = (Extension)cons.newInstance(passed);\n+            if (map.put(crlExt.getName(), crlExt) != null) {\n@@ -241,1 +241,1 @@\n-        if (!(other instanceof CRLExtensions))\n+        if (!(other instanceof CRLExtensions otherCX))\n@@ -243,3 +243,0 @@\n-        Collection<Extension> otherC =\n-                        ((CRLExtensions)other).getAllExtensions();\n-        Object[] objs = otherC.toArray();\n@@ -247,2 +244,2 @@\n-        int len = objs.length;\n-        if (len != map.size())\n+        Collection<Extension> otherX = otherCX.getAllExtensions();\n+        if (otherX.size() != map.size())\n@@ -251,8 +248,4 @@\n-        Extension otherExt, thisExt;\n-        String key = null;\n-        for (int i = 0; i < len; i++) {\n-            if (objs[i] instanceof CertAttrSet)\n-                key = ((CertAttrSet)objs[i]).getName();\n-            otherExt = (Extension)objs[i];\n-            if (key == null)\n-                key = otherExt.getExtensionId().toString();\n+        Extension thisExt;\n+        String key;\n+        for (Extension otherExt : otherX) {\n+            key = otherExt.getName();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/CRLExtensions.java","additions":9,"deletions":16,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.util.Enumeration;\n@@ -166,12 +165,0 @@\n-    \/**\n-     * Delete the attribute value.\n-     *\/\n-    public void delete(String name) throws IOException {\n-        if (name.equalsIgnoreCase(NUMBER)) {\n-            crlNumber = null;\n-        } else {\n-            throw new IOException(\"Attribute name not recognized by\" +\n-                                  \" CertAttrSet:\" + extensionName + '.');\n-        }\n-        encodeThis();\n-    }\n@@ -220,9 +207,0 @@\n-    \/**\n-     * Return an enumeration of names of attributes existing within this\n-     * attribute.\n-     *\/\n-    public Enumeration<String> getElements() {\n-        AttributeNameEnumeration elements = new AttributeNameEnumeration();\n-        elements.addElement(NUMBER);\n-        return (elements.elements());\n-    }\n@@ -233,0 +211,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/CRLNumberExtension.java","additions":1,"deletions":22,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.util.Enumeration;\n@@ -134,12 +133,0 @@\n-    \/**\n-     * Delete the attribute value.\n-     *\/\n-    public void delete(String name) throws IOException {\n-        if (name.equalsIgnoreCase(REASON)) {\n-            reasonCode = 0;\n-        } else {\n-            throw new IOException\n-                (\"Name not supported by CRLReasonCodeExtension\");\n-        }\n-        encodeThis();\n-    }\n@@ -170,10 +157,0 @@\n-    \/**\n-     * Return an enumeration of names of attributes existing within this\n-     * attribute.\n-     *\/\n-    public Enumeration<String> getElements() {\n-        AttributeNameEnumeration elements = new AttributeNameEnumeration();\n-        elements.addElement(REASON);\n-\n-        return elements.elements();\n-    }\n@@ -184,0 +161,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/CRLReasonCodeExtension.java","additions":1,"deletions":23,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import java.util.Enumeration;\n@@ -50,7 +49,0 @@\n-    \/**\n-     * Returns a short string describing this certificate attribute.\n-     *\n-     * @return value of this certificate attribute in\n-     *         printable form.\n-     *\/\n-    String toString();\n@@ -92,26 +84,0 @@\n-\n-    \/**\n-     * Deletes an attribute value from this CertAttrSet.\n-     *\n-     * @param name the name of the attribute to delete.\n-     *\n-     * @exception CertificateException on attribute handling errors.\n-     * @exception IOException on other errors.\n-     *\/\n-    void delete(String name)\n-        throws CertificateException, IOException;\n-\n-    \/**\n-     * Returns an enumeration of the names of the attributes existing within\n-     * this attribute.\n-     *\n-     * @return an enumeration of the attribute names.\n-     *\/\n-    Enumeration<T> getElements();\n-\n-    \/**\n-     * Returns the name (identifier) of this CertAttrSet.\n-     *\n-     * @return the name of this CertAttrSet.\n-     *\/\n-    String getName();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/CertAttrSet.java","additions":0,"deletions":34,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.util.Enumeration;\n@@ -139,28 +138,0 @@\n-    \/**\n-     * Delete the attribute value.\n-     *\/\n-    public void delete(String name) throws IOException {\n-        if (name.equalsIgnoreCase(ALGORITHM)) {\n-            algId = null;\n-        } else {\n-            throw new IOException(\"Attribute name not recognized by \" +\n-                               \"CertAttrSet:CertificateAlgorithmId.\");\n-        }\n-    }\n-\n-    \/**\n-     * Return an enumeration of names of attributes existing within this\n-     * attribute.\n-     *\/\n-    public Enumeration<String> getElements() {\n-        AttributeNameEnumeration elements = new AttributeNameEnumeration();\n-        elements.addElement(ALGORITHM);\n-        return (elements.elements());\n-    }\n-\n-   \/**\n-    * Return the name of this attribute.\n-    *\/\n-   public String getName() {\n-      return (NAME);\n-   }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/CertificateAlgorithmId.java","additions":0,"deletions":29,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -108,2 +108,2 @@\n-            CertAttrSet<?> certExt = (CertAttrSet<?>) cons.newInstance(passed);\n-            if (map.put(certExt.getName(), (Extension)certExt) != null) {\n+            Extension certExt = (Extension) cons.newInstance(passed);\n+            if (map.put(certExt.getName(), certExt) != null) {\n@@ -236,7 +236,0 @@\n-    \/**\n-     * Return an enumeration of names of attributes existing within this\n-     * attribute.\n-     *\/\n-    public Enumeration<Extension> getElements() {\n-        return Collections.enumeration(map.values());\n-    }\n@@ -257,7 +250,0 @@\n-    \/**\n-     * Return the name of this attribute.\n-     *\/\n-    public String getName() {\n-        return NAME;\n-    }\n-\n@@ -286,1 +272,1 @@\n-        if (!(other instanceof CertificateExtensions))\n+        if (!(other instanceof CertificateExtensions otherCX))\n@@ -288,3 +274,0 @@\n-        Collection<Extension> otherC =\n-                ((CertificateExtensions)other).getAllExtensions();\n-        Object[] objs = otherC.toArray();\n@@ -292,2 +275,2 @@\n-        int len = objs.length;\n-        if (len != map.size())\n+        Collection<Extension> otherX = otherCX.getAllExtensions();\n+        if (otherX.size() != map.size())\n@@ -296,8 +279,4 @@\n-        Extension otherExt, thisExt;\n-        String key = null;\n-        for (int i = 0; i < len; i++) {\n-            if (objs[i] instanceof CertAttrSet)\n-                key = ((CertAttrSet)objs[i]).getName();\n-            otherExt = (Extension)objs[i];\n-            if (key == null)\n-                key = otherExt.getExtensionId().toString();\n+        Extension thisExt;\n+        String key;\n+        for (Extension otherExt : otherX) {\n+            key = otherExt.getName();\n@@ -311,1 +290,1 @@\n-                ((CertificateExtensions)other).getUnparseableExtensions());\n+                otherCX.getUnparseableExtensions());\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/CertificateExtensions.java","additions":10,"deletions":31,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.util.Enumeration;\n@@ -152,14 +151,0 @@\n-    \/**\n-     * Deletes the attribute value.\n-     *\n-     * @throws IOException on error\n-     *\/\n-    public void delete(String name) throws IOException {\n-        if (name.equalsIgnoreCase(ISSUER)) {\n-            names = null;\n-        } else {\n-            throw new IOException(\"Attribute name not recognized by \" +\n-                \"CertAttrSet:CertificateIssuer\");\n-        }\n-        encodeThis();\n-    }\n@@ -191,9 +176,0 @@\n-    \/**\n-     * Return an enumeration of names of attributes existing within this\n-     * attribute.\n-     *\/\n-    public Enumeration<String> getElements() {\n-        AttributeNameEnumeration elements = new AttributeNameEnumeration();\n-        elements.addElement(ISSUER);\n-        return elements.elements();\n-    }\n@@ -204,0 +180,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/CertificateIssuerExtension.java","additions":1,"deletions":24,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.util.Enumeration;\n@@ -56,1 +55,1 @@\n-    \/\/ do not allow a set() of this value, do not advertise with getElements()\n+    \/\/ do not allow a set() of this value\n@@ -147,30 +146,0 @@\n-    \/**\n-     * Delete the attribute value.\n-     *\/\n-    public void delete(String name) throws IOException {\n-        if (name.equalsIgnoreCase(DN_NAME)) {\n-            dnName = null;\n-            dnPrincipal = null;\n-        } else {\n-            throw new IOException(\"Attribute name not recognized by \" +\n-                                  \"CertAttrSet:CertificateIssuerName.\");\n-        }\n-    }\n-\n-    \/**\n-     * Return an enumeration of names of attributes existing within this\n-     * attribute.\n-     *\/\n-    public Enumeration<String> getElements() {\n-        AttributeNameEnumeration elements = new AttributeNameEnumeration();\n-        elements.addElement(DN_NAME);\n-\n-        return (elements.elements());\n-    }\n-\n-    \/**\n-     * Return the name of this attribute.\n-     *\/\n-    public String getName() {\n-        return(NAME);\n-    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/CertificateIssuerName.java","additions":1,"deletions":32,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -221,13 +221,0 @@\n-    \/**\n-     * Delete the attribute value.\n-     *\/\n-    public void delete(String name) throws IOException {\n-        if (name.equalsIgnoreCase(POLICIES)) {\n-            certPolicies = null;\n-        } else {\n-          throw new IOException(\"Attribute name [\" + name +\n-                                \"] not recognized by \" +\n-                                \"CertAttrSet:CertificatePoliciesExtension.\");\n-        }\n-        encodeThis();\n-    }\n@@ -235,10 +222,0 @@\n-    \/**\n-     * Return an enumeration of names of attributes existing within this\n-     * attribute.\n-     *\/\n-    public Enumeration<String> getElements() {\n-        AttributeNameEnumeration elements = new AttributeNameEnumeration();\n-        elements.addElement(POLICIES);\n-\n-        return (elements.elements());\n-    }\n@@ -249,0 +226,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/CertificatePoliciesExtension.java","additions":1,"deletions":23,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.util.Enumeration;\n@@ -151,30 +150,0 @@\n-    \/**\n-     * Delete the attribute value.\n-     *\/\n-    public void delete(String name) throws IOException {\n-        if (name.equalsIgnoreCase(NUMBER)) {\n-            serial = null;\n-        } else {\n-            throw new IOException(\"Attribute name not recognized by \" +\n-                                \"CertAttrSet:CertificateSerialNumber.\");\n-        }\n-    }\n-\n-    \/**\n-     * Return an enumeration of names of attributes existing within this\n-     * attribute.\n-     *\/\n-    public Enumeration<String> getElements() {\n-        AttributeNameEnumeration elements = new AttributeNameEnumeration();\n-        elements.addElement(NUMBER);\n-\n-        return (elements.elements());\n-    }\n-\n-    \/**\n-     * Return the name of this attribute.\n-     *\/\n-    public String getName() {\n-        return (NAME);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/CertificateSerialNumber.java","additions":0,"deletions":31,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.util.Enumeration;\n@@ -56,1 +55,1 @@\n-    \/\/ do not allow a set() of this value, do not advertise with getElements()\n+    \/\/ do not allow a set() of this value\n@@ -146,31 +145,0 @@\n-\n-    \/**\n-     * Delete the attribute value.\n-     *\/\n-    public void delete(String name) throws IOException {\n-        if (name.equalsIgnoreCase(DN_NAME)) {\n-            dnName = null;\n-            dnPrincipal = null;\n-        } else {\n-            throw new IOException(\"Attribute name not recognized by \" +\n-                                  \"CertAttrSet:CertificateSubjectName.\");\n-        }\n-    }\n-\n-    \/**\n-     * Return an enumeration of names of attributes existing within this\n-     * attribute.\n-     *\/\n-    public Enumeration<String> getElements() {\n-        AttributeNameEnumeration elements = new AttributeNameEnumeration();\n-        elements.addElement(DN_NAME);\n-\n-        return(elements.elements());\n-    }\n-\n-    \/**\n-     * Return the name of this attribute.\n-     *\/\n-    public String getName() {\n-        return(NAME);\n-    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/CertificateSubjectName.java","additions":1,"deletions":33,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.util.Enumeration;\n@@ -204,33 +203,0 @@\n-    \/**\n-     * Delete the attribute value.\n-     *\/\n-    public void delete(String name) throws IOException {\n-        if (name.equalsIgnoreCase(NOT_BEFORE)) {\n-            notBefore = null;\n-        } else if (name.equalsIgnoreCase(NOT_AFTER)) {\n-            notAfter = null;\n-        } else {\n-            throw new IOException(\"Attribute name not recognized by \" +\n-                            \"CertAttrSet: CertificateValidity.\");\n-        }\n-    }\n-\n-    \/**\n-     * Return an enumeration of names of attributes existing within this\n-     * attribute.\n-     *\/\n-    public Enumeration<String> getElements() {\n-        AttributeNameEnumeration elements = new AttributeNameEnumeration();\n-        elements.addElement(NOT_BEFORE);\n-        elements.addElement(NOT_AFTER);\n-\n-        return (elements.elements());\n-    }\n-\n-    \/**\n-     * Return the name of this attribute.\n-     *\/\n-    public String getName() {\n-        return (NAME);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/CertificateValidity.java","additions":0,"deletions":34,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.util.Enumeration;\n@@ -200,30 +199,0 @@\n-    \/**\n-     * Delete the attribute value.\n-     *\/\n-    public void delete(String name) throws IOException {\n-        if (name.equalsIgnoreCase(VERSION)) {\n-            version = V1;\n-        } else {\n-            throw new IOException(\"Attribute name not recognized by \" +\n-                                  \"CertAttrSet: CertificateVersion.\");\n-        }\n-    }\n-\n-    \/**\n-     * Return an enumeration of names of attributes existing within this\n-     * attribute.\n-     *\/\n-    public Enumeration<String> getElements() {\n-        AttributeNameEnumeration elements = new AttributeNameEnumeration();\n-        elements.addElement(VERSION);\n-\n-        return (elements.elements());\n-    }\n-\n-    \/**\n-     * Return the name of this attribute.\n-     *\/\n-    public String getName() {\n-        return(NAME);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/CertificateVersion.java","additions":0,"deletions":31,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import java.util.Enumeration;\n@@ -131,29 +130,0 @@\n-    \/**\n-     * Delete the attribute value.\n-     *\/\n-    public void delete(String name) throws IOException {\n-      if (name.equalsIgnoreCase(KEY)) {\n-        key = null;\n-      } else {\n-            throw new IOException(\"Attribute name not recognized by \" +\n-                                  \"CertAttrSet: CertificateX509Key.\");\n-      }\n-    }\n-\n-    \/**\n-     * Return an enumeration of names of attributes existing within this\n-     * attribute.\n-     *\/\n-    public Enumeration<String> getElements() {\n-        AttributeNameEnumeration elements = new AttributeNameEnumeration();\n-        elements.addElement(KEY);\n-\n-        return(elements.elements());\n-    }\n-\n-    \/**\n-     * Return the name of this attribute.\n-     *\/\n-    public String getName() {\n-        return(NAME);\n-    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/CertificateX509Key.java","additions":0,"deletions":30,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.util.Enumeration;\n@@ -242,13 +241,0 @@\n-    \/**\n-     * Delete the attribute value.\n-     *\/\n-    public void delete(String name) throws IOException {\n-        if (name.equalsIgnoreCase(USAGES)) {\n-            keyUsages = null;\n-        } else {\n-          throw new IOException(\"Attribute name [\" + name +\n-                                \"] not recognized by \" +\n-                                \"CertAttrSet:ExtendedKeyUsageExtension.\");\n-        }\n-        encodeThis();\n-    }\n@@ -256,10 +242,0 @@\n-    \/**\n-     * Return an enumeration of names of attributes existing within this\n-     * attribute.\n-     *\/\n-    public Enumeration<String> getElements() {\n-        AttributeNameEnumeration elements = new AttributeNameEnumeration();\n-        elements.addElement(USAGES);\n-\n-        return (elements.elements());\n-    }\n@@ -270,0 +246,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/ExtendedKeyUsageExtension.java","additions":1,"deletions":24,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -218,0 +218,9 @@\n+    \/**\n+     * Returns the extension name. The default implementation returns the\n+     * string form of the extensionId. Known extensions should override this\n+     * method to return a human readable name.\n+     *\/\n+    public String getName() {\n+        return getId();\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/Extension.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.util.Enumeration;\n@@ -213,16 +212,0 @@\n-    \/**\n-     * Delete the attribute value.\n-     *\n-     * @param name name of attribute to delete. Must be SKIP_CERTS.\n-     * @throws IOException on error.  In this case, IOException will always be\n-     *                     thrown, because the only attribute, SKIP_CERTS, is\n-     *                     required.\n-     *\/\n-    public void delete(String name) throws IOException {\n-        if (name.equalsIgnoreCase(SKIP_CERTS))\n-            throw new IOException(\"Attribute \" + SKIP_CERTS +\n-                                  \" may not be deleted.\");\n-        else\n-            throw new IOException(\"Attribute name not recognized by \" +\n-                                  \"CertAttrSet:InhibitAnyPolicy.\");\n-    }\n@@ -230,11 +213,0 @@\n-    \/**\n-     * Return an enumeration of names of attributes existing within this\n-     * attribute.\n-     *\n-     * @return enumeration of elements\n-     *\/\n-    public Enumeration<String> getElements() {\n-        AttributeNameEnumeration elements = new AttributeNameEnumeration();\n-        elements.addElement(SKIP_CERTS);\n-        return (elements.elements());\n-    }\n@@ -247,0 +219,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/InhibitAnyPolicyExtension.java","additions":1,"deletions":28,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.util.Enumeration;\n@@ -153,12 +152,0 @@\n-    \/**\n-     * Delete the attribute value.\n-     *\/\n-    public void delete(String name) throws IOException {\n-        if (name.equalsIgnoreCase(DATE)) {\n-            date = null;\n-        } else {\n-            throw new IOException\n-                (\"Name not supported by InvalidityDateExtension\");\n-        }\n-        encodeThis();\n-    }\n@@ -189,10 +176,0 @@\n-    \/**\n-     * Return an enumeration of names of attributes existing within this\n-     * attribute.\n-     *\/\n-    public Enumeration<String> getElements() {\n-        AttributeNameEnumeration elements = new AttributeNameEnumeration();\n-        elements.addElement(DATE);\n-\n-        return elements.elements();\n-    }\n@@ -203,0 +180,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/InvalidityDateExtension.java","additions":1,"deletions":23,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.util.Enumeration;\n@@ -203,12 +202,0 @@\n-    \/**\n-     * Delete the attribute value.\n-     *\/\n-    public void delete(String name) throws IOException {\n-        if (name.equalsIgnoreCase(ISSUER_NAME)) {\n-            names = null;\n-        } else {\n-          throw new IOException(\"Attribute name not recognized by \" +\n-                        \"CertAttrSet:IssuerAlternativeName.\");\n-        }\n-        encodeThis();\n-    }\n@@ -216,10 +203,0 @@\n-    \/**\n-     * Return an enumeration of names of attributes existing within this\n-     * attribute.\n-     *\/\n-    public Enumeration<String> getElements() {\n-        AttributeNameEnumeration elements = new AttributeNameEnumeration();\n-        elements.addElement(ISSUER_NAME);\n-\n-        return (elements.elements());\n-    }\n@@ -230,0 +207,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/IssuerAlternativeNameExtension.java","additions":1,"deletions":23,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n-import java.util.*;\n-\n@@ -225,0 +223,1 @@\n+    @Override\n@@ -329,21 +328,0 @@\n-    \/**\n-     * Deletes the attribute value.\n-     *\/\n-    public void delete(String name) throws IOException {\n-        if (name.equalsIgnoreCase(POINT)) {\n-            distributionPoint = null;\n-\n-        } else if (name.equalsIgnoreCase(INDIRECT_CRL)) {\n-            isIndirectCRL = false;\n-\n-        } else if (name.equalsIgnoreCase(REASONS)) {\n-            revocationReasons = null;\n-\n-        } else if (name.equalsIgnoreCase(ONLY_USER_CERTS)) {\n-            hasOnlyUserCerts = false;\n-\n-        } else if (name.equalsIgnoreCase(ONLY_CA_CERTS)) {\n-            hasOnlyCACerts = false;\n-\n-        } else if (name.equalsIgnoreCase(ONLY_ATTRIBUTE_CERTS)) {\n-            hasOnlyAttributeCerts = false;\n@@ -351,22 +329,0 @@\n-        } else {\n-            throw new IOException(\"Attribute name [\" + name +\n-                \"] not recognized by \" +\n-                \"CertAttrSet:IssuingDistributionPointExtension.\");\n-        }\n-        encodeThis();\n-    }\n-\n-    \/**\n-     * Returns an enumeration of names of attributes existing within this\n-     * attribute.\n-     *\/\n-    public Enumeration<String> getElements() {\n-        AttributeNameEnumeration elements = new AttributeNameEnumeration();\n-        elements.addElement(POINT);\n-        elements.addElement(REASONS);\n-        elements.addElement(ONLY_USER_CERTS);\n-        elements.addElement(ONLY_CA_CERTS);\n-        elements.addElement(ONLY_ATTRIBUTE_CERTS);\n-        elements.addElement(INDIRECT_CRL);\n-        return elements.elements();\n-    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/IssuingDistributionPointExtension.java","additions":1,"deletions":45,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.util.Enumeration;\n@@ -245,28 +244,0 @@\n-    \/**\n-     * Delete the attribute value.\n-     *\/\n-    public void delete(String name) throws IOException {\n-        if (name.equalsIgnoreCase(DIGITAL_SIGNATURE)) {\n-            set(0,false);\n-        } else if (name.equalsIgnoreCase(NON_REPUDIATION)) {\n-            set(1,false);\n-        } else if (name.equalsIgnoreCase(KEY_ENCIPHERMENT)) {\n-            set(2,false);\n-        } else if (name.equalsIgnoreCase(DATA_ENCIPHERMENT)) {\n-            set(3,false);\n-        } else if (name.equalsIgnoreCase(KEY_AGREEMENT)) {\n-            set(4,false);\n-        } else if (name.equalsIgnoreCase(KEY_CERTSIGN)) {\n-            set(5,false);\n-        } else if (name.equalsIgnoreCase(CRL_SIGN)) {\n-            set(6,false);\n-        } else if (name.equalsIgnoreCase(ENCIPHER_ONLY)) {\n-            set(7,false);\n-        } else if (name.equalsIgnoreCase(DECIPHER_ONLY)) {\n-            set(8,false);\n-        } else {\n-          throw new IOException(\"Attribute name not recognized by\"\n-                                + \" CertAttrSet:KeyUsage.\");\n-        }\n-        encodeThis();\n-    }\n@@ -330,18 +301,0 @@\n-    \/**\n-     * Return an enumeration of names of attributes existing within this\n-     * attribute.\n-     *\/\n-    public Enumeration<String> getElements() {\n-        AttributeNameEnumeration elements = new AttributeNameEnumeration();\n-        elements.addElement(DIGITAL_SIGNATURE);\n-        elements.addElement(NON_REPUDIATION);\n-        elements.addElement(KEY_ENCIPHERMENT);\n-        elements.addElement(DATA_ENCIPHERMENT);\n-        elements.addElement(KEY_AGREEMENT);\n-        elements.addElement(KEY_CERTSIGN);\n-        elements.addElement(CRL_SIGN);\n-        elements.addElement(ENCIPHER_ONLY);\n-        elements.addElement(DECIPHER_ONLY);\n-\n-        return (elements.elements());\n-    }\n@@ -357,0 +310,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/KeyUsageExtension.java","additions":1,"deletions":47,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import java.util.*;\n@@ -285,14 +284,0 @@\n-    \/**\n-     * Delete the attribute value.\n-     *\/\n-    public void delete(String name) throws IOException {\n-        if (name.equalsIgnoreCase(PERMITTED_SUBTREES)) {\n-            permitted = null;\n-        } else if (name.equalsIgnoreCase(EXCLUDED_SUBTREES)) {\n-            excluded = null;\n-        } else {\n-          throw new IOException(\"Attribute name not recognized by \" +\n-                        \"CertAttrSet:NameConstraintsExtension.\");\n-        }\n-        encodeThis();\n-    }\n@@ -300,11 +285,0 @@\n-    \/**\n-     * Return an enumeration of names of attributes existing within this\n-     * attribute.\n-     *\/\n-    public Enumeration<String> getElements() {\n-        AttributeNameEnumeration elements = new AttributeNameEnumeration();\n-        elements.addElement(PERMITTED_SUBTREES);\n-        elements.addElement(EXCLUDED_SUBTREES);\n-\n-        return (elements.elements());\n-    }\n@@ -315,0 +289,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/NameConstraintsExtension.java","additions":1,"deletions":26,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -218,7 +218,0 @@\n-    \/**\n-     * Delete the attribute value.\n-     *\/\n-    public void delete(String name) throws IOException {\n-        set(getPosition(name), false);\n-        encodeThis();\n-    }\n@@ -276,7 +269,0 @@\n-    \/**\n-     * Return an enumeration of names of attributes existing within this\n-     * attribute.\n-     *\/\n-    public Enumeration<String> getElements() {\n-        return mAttributeNames.elements();\n-    }\n@@ -287,0 +273,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/NetscapeCertTypeExtension.java","additions":1,"deletions":14,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.util.Enumeration;\n@@ -107,7 +106,0 @@\n-    \/**\n-     * Delete the attribute value.\n-     *\/\n-    public void delete(String name) throws IOException {\n-        throw new IOException(\"No attribute is allowed by \" +\n-                        \"CertAttrSet:OCSPNoCheckExtension.\");\n-    }\n@@ -115,7 +107,0 @@\n-    \/**\n-     * Return an enumeration of names of attributes existing within this\n-     * attribute.\n-     *\/\n-    public Enumeration<String> getElements() {\n-        return (new AttributeNameEnumeration()).elements();\n-    }\n@@ -126,0 +111,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/OCSPNoCheckExtension.java","additions":1,"deletions":15,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.util.Enumeration;\n@@ -246,14 +245,0 @@\n-    \/**\n-     * Delete the attribute value.\n-     *\/\n-    public void delete(String name) throws IOException {\n-        if (name.equalsIgnoreCase(REQUIRE)) {\n-            require = -1;\n-        } else if (name.equalsIgnoreCase(INHIBIT)) {\n-            inhibit = -1;\n-        } else {\n-          throw new IOException(\"Attribute name not recognized by \" +\n-                                \"CertAttrSet:PolicyConstraints.\");\n-        }\n-        encodeThis();\n-    }\n@@ -261,11 +246,0 @@\n-    \/**\n-     * Return an enumeration of names of attributes existing within this\n-     * attribute.\n-     *\/\n-    public Enumeration<String> getElements() {\n-        AttributeNameEnumeration elements = new AttributeNameEnumeration();\n-        elements.addElement(REQUIRE);\n-        elements.addElement(INHIBIT);\n-\n-        return (elements.elements());\n-    }\n@@ -276,0 +250,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/PolicyConstraintsExtension.java","additions":1,"deletions":26,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import java.util.Enumeration;\n@@ -218,35 +217,0 @@\n-    \/**\n-     * Delete the attribute value.\n-     *\/\n-    public void delete(String name) throws IOException {\n-        if (name.equalsIgnoreCase(QUALIFIERS)) {\n-            policyQualifiers = Collections.emptySet();\n-        } else if (name.equalsIgnoreCase(ID)) {\n-            throw new IOException(\"Attribute ID may not be deleted from \" +\n-                \"PolicyInformation.\");\n-        } else {\n-            \/\/ID may not be deleted\n-            throw new IOException(\"Attribute name [\" + name +\n-                \"] not recognized by PolicyInformation.\");\n-        }\n-    }\n-\n-    \/**\n-     * Return an enumeration of names of attributes existing within this\n-     * attribute.\n-     *\/\n-    public Enumeration<String> getElements() {\n-        AttributeNameEnumeration elements = new AttributeNameEnumeration();\n-        elements.addElement(ID);\n-        elements.addElement(QUALIFIERS);\n-\n-        return elements.elements();\n-    }\n-\n-    \/**\n-     * Return the name of this attribute.\n-     *\/\n-    public String getName() {\n-        return NAME;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/PolicyInformation.java","additions":0,"deletions":36,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -190,24 +190,0 @@\n-    \/**\n-     * Delete the attribute value.\n-     *\/\n-    public void delete(String name) throws IOException {\n-        if (name.equalsIgnoreCase(MAP)) {\n-            maps = null;\n-        } else {\n-          throw new IOException(\"Attribute name not recognized by \" +\n-                        \"CertAttrSet:PolicyMappingsExtension.\");\n-        }\n-        encodeThis();\n-    }\n-\n-    \/**\n-     * Return an enumeration of names of attributes existing within this\n-     * attribute.\n-     *\/\n-    public Enumeration<String> getElements () {\n-        AttributeNameEnumeration elements = new AttributeNameEnumeration();\n-        elements.addElement(MAP);\n-\n-        return elements.elements();\n-    }\n-\n@@ -217,0 +193,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/PolicyMappingsExtension.java","additions":1,"deletions":24,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import java.util.Enumeration;\n@@ -287,24 +286,0 @@\n-    \/**\n-     * Delete the attribute value.\n-     * @exception CertificateException on attribute handling errors.\n-     *\/\n-    public void delete(String name) throws CertificateException, IOException {\n-        if (name.equalsIgnoreCase(NOT_BEFORE)) {\n-            notBefore = null;\n-        } else if (name.equalsIgnoreCase(NOT_AFTER)) {\n-            notAfter = null;\n-        } else {\n-          throw new CertificateException(\"Attribute name not recognized by\"\n-                           + \" CertAttrSet:PrivateKeyUsage.\");\n-        }\n-        encodeThis();\n-    }\n-\n-    \/**\n-     * Return an enumeration of names of attributes existing within this\n-     * attribute.\n-     *\/\n-    public Enumeration<String> getElements() {\n-        AttributeNameEnumeration elements = new AttributeNameEnumeration();\n-        elements.addElement(NOT_BEFORE);\n-        elements.addElement(NOT_AFTER);\n@@ -312,2 +287,0 @@\n-        return(elements.elements());\n-    }\n@@ -318,0 +291,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/PrivateKeyUsageExtension.java","additions":1,"deletions":27,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.util.Enumeration;\n@@ -193,7 +192,0 @@\n-    \/**\n-     * Delete the attribute value.\n-     *\/\n-    public void delete(String name) throws IOException {\n-        set(name, Boolean.FALSE);\n-    }\n-\n@@ -247,12 +239,0 @@\n-\n-    \/**\n-     * Return an enumeration of names of attributes existing within this\n-     * attribute.\n-     *\/\n-    public Enumeration<String> getElements () {\n-        AttributeNameEnumeration elements = new AttributeNameEnumeration();\n-        for( int i=0; i<NAMES.length; i++ ) {\n-            elements.addElement(NAMES[i]);\n-        }\n-        return (elements.elements());\n-    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/ReasonFlags.java","additions":0,"deletions":20,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.util.Enumeration;\n@@ -205,12 +204,0 @@\n-    \/**\n-     * Delete the attribute value.\n-     *\/\n-    public void delete(String name) throws IOException {\n-        if (name.equalsIgnoreCase(SUBJECT_NAME)) {\n-            names = null;\n-        } else {\n-          throw new IOException(\"Attribute name not recognized by \" +\n-                        \"CertAttrSet:SubjectAlternativeName.\");\n-        }\n-        encodeThis();\n-    }\n@@ -218,10 +205,0 @@\n-    \/**\n-     * Return an enumeration of names of attributes existing within this\n-     * attribute.\n-     *\/\n-    public Enumeration<String> getElements() {\n-        AttributeNameEnumeration elements = new AttributeNameEnumeration();\n-        elements.addElement(SUBJECT_NAME);\n-\n-        return (elements.elements());\n-    }\n@@ -232,0 +209,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/SubjectAlternativeNameExtension.java","additions":1,"deletions":23,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.util.Collections;\n@@ -146,0 +145,1 @@\n+    @Override\n@@ -197,14 +197,0 @@\n-    \/**\n-     * Delete the attribute value.\n-     *\/\n-    public void delete(String name) throws IOException {\n-        if (name.equalsIgnoreCase(DESCRIPTIONS)) {\n-            accessDescriptions =\n-                Collections.emptyList();\n-        } else {\n-            throw new IOException(\"Attribute name [\" + name +\n-                                \"] not recognized by \" +\n-                                \"CertAttrSet:SubjectInfoAccessExtension.\");\n-        }\n-        encodeThis();\n-    }\n@@ -212,9 +198,0 @@\n-    \/**\n-     * Return an enumeration of names of attributes existing within this\n-     * attribute.\n-     *\/\n-    public Enumeration<String> getElements() {\n-        AttributeNameEnumeration elements = new AttributeNameEnumeration();\n-        elements.addElement(DESCRIPTIONS);\n-        return elements.elements();\n-    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/SubjectInfoAccessExtension.java","additions":1,"deletions":24,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.util.Enumeration;\n@@ -166,12 +165,0 @@\n-    \/**\n-     * Delete the attribute value.\n-     *\/\n-    public void delete(String name) throws IOException {\n-        if (name.equalsIgnoreCase(KEY_ID)) {\n-            id = null;\n-        } else {\n-          throw new IOException(\"Attribute name not recognized by \" +\n-                \"CertAttrSet:SubjectKeyIdentifierExtension.\");\n-        }\n-        encodeThis();\n-    }\n@@ -179,10 +166,0 @@\n-    \/**\n-     * Return an enumeration of names of attributes existing within this\n-     * attribute.\n-     *\/\n-    public Enumeration<String> getElements() {\n-        AttributeNameEnumeration elements = new AttributeNameEnumeration();\n-        elements.addElement(KEY_ID);\n-\n-        return (elements.elements());\n-    }\n@@ -193,0 +170,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/SubjectKeyIdentifierExtension.java","additions":1,"deletions":23,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -716,63 +716,0 @@\n-    \/**\n-     * Delete the requested attribute from the certificate.\n-     *\n-     * @param name the name of the attribute.\n-     * @exception CertificateException on invalid attribute identifier.\n-     * @exception IOException on other errors.\n-     *\/\n-    public void delete(String name)\n-    throws CertificateException, IOException {\n-        \/\/ check if immutable\n-        if (readOnly)\n-            throw new CertificateException(\"cannot over-write existing\"\n-                                           + \" certificate\");\n-\n-        X509AttributeName attr = new X509AttributeName(name);\n-        String id = attr.getPrefix();\n-        if (!(id.equalsIgnoreCase(NAME))) {\n-            throw new CertificateException(\"Invalid root of attribute name,\"\n-                                   + \" expected [\"\n-                                   + NAME + \"], received \" + id);\n-        }\n-        attr = new X509AttributeName(attr.getSuffix());\n-        id = attr.getPrefix();\n-\n-        if (id.equalsIgnoreCase(INFO)) {\n-            if (attr.getSuffix() == null) {\n-                info = null;\n-            } else {\n-                info.delete(attr.getSuffix());\n-            }\n-        } else if (id.equalsIgnoreCase(ALG_ID)) {\n-            algId = null;\n-        } else if (id.equalsIgnoreCase(SIGNATURE)) {\n-            signature = null;\n-        } else if (id.equalsIgnoreCase(SIGNED_CERT)) {\n-            signedCert = null;\n-        } else {\n-            throw new CertificateException(\"Attribute name not recognized or \" +\n-                              \"delete() not allowed for the same: \" + id);\n-        }\n-    }\n-\n-    \/**\n-     * Return an enumeration of names of attributes existing within this\n-     * attribute.\n-     *\/\n-    public Enumeration<String> getElements() {\n-        AttributeNameEnumeration elements = new AttributeNameEnumeration();\n-        elements.addElement(NAME + DOT + INFO);\n-        elements.addElement(NAME + DOT + ALG_ID);\n-        elements.addElement(NAME + DOT + SIGNATURE);\n-        elements.addElement(NAME + DOT + SIGNED_CERT);\n-\n-        return elements.elements();\n-    }\n-\n-    \/**\n-     * Return the name of this attribute.\n-     *\/\n-    public String getName() {\n-        return(NAME);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/X509CertImpl.java","additions":0,"deletions":63,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -192,27 +192,0 @@\n-    \/**\n-     * Return an enumeration of names of attributes existing within this\n-     * attribute.\n-     *\/\n-    public Enumeration<String> getElements() {\n-        AttributeNameEnumeration elements = new AttributeNameEnumeration();\n-        elements.addElement(VERSION);\n-        elements.addElement(SERIAL_NUMBER);\n-        elements.addElement(ALGORITHM_ID);\n-        elements.addElement(ISSUER);\n-        elements.addElement(VALIDITY);\n-        elements.addElement(SUBJECT);\n-        elements.addElement(KEY);\n-        elements.addElement(ISSUER_ID);\n-        elements.addElement(SUBJECT_ID);\n-        elements.addElement(EXTENSIONS);\n-\n-        return elements.elements();\n-    }\n-\n-    \/**\n-     * Return the name of this attribute.\n-     *\/\n-    public String getName() {\n-        return(NAME);\n-    }\n-\n@@ -451,78 +424,0 @@\n-    \/**\n-     * Delete the certificate attribute.\n-     *\n-     * @param name the name of the Certificate attribute.\n-     * @exception CertificateException on invalid attributes.\n-     * @exception IOException on other errors.\n-     *\/\n-    public void delete(String name)\n-    throws CertificateException, IOException {\n-        X509AttributeName attrName = new X509AttributeName(name);\n-\n-        int attr = attributeMap(attrName.getPrefix());\n-        if (attr == 0) {\n-            throw new CertificateException(\"Attribute name not recognized: \"\n-                                           + name);\n-        }\n-        \/\/ set rawCertInfo to null, so that we are forced to re-encode\n-        rawCertInfo = null;\n-        String suffix = attrName.getSuffix();\n-\n-        switch (attr) {\n-        case ATTR_VERSION:\n-            if (suffix == null) {\n-                version = null;\n-            } else {\n-                version.delete(suffix);\n-            }\n-            break;\n-        case (ATTR_SERIAL):\n-            if (suffix == null) {\n-                serialNum = null;\n-            } else {\n-                serialNum.delete(suffix);\n-            }\n-            break;\n-        case (ATTR_ALGORITHM):\n-            if (suffix == null) {\n-                algId = null;\n-            } else {\n-                algId.delete(suffix);\n-            }\n-            break;\n-        case (ATTR_ISSUER):\n-            issuer = null;\n-            break;\n-        case (ATTR_VALIDITY):\n-            if (suffix == null) {\n-                interval = null;\n-            } else {\n-                interval.delete(suffix);\n-            }\n-            break;\n-        case (ATTR_SUBJECT):\n-            subject = null;\n-            break;\n-        case (ATTR_KEY):\n-            if (suffix == null) {\n-                pubKey = null;\n-            } else {\n-                pubKey.delete(suffix);\n-            }\n-            break;\n-        case (ATTR_ISSUER_ID):\n-            issuerUniqueId = null;\n-            break;\n-        case (ATTR_SUBJECT_ID):\n-            subjectUniqueId = null;\n-            break;\n-        case (ATTR_EXTENSIONS):\n-            if (suffix == null) {\n-                extensions = null;\n-            } else {\n-                if (extensions != null)\n-                   extensions.delete(suffix);\n-            }\n-            break;\n-        }\n-    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/X509CertInfo.java","additions":0,"deletions":105,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -13,3 +13,2 @@\n-     Object get(String name)\n-     void set(String name, Object value), and\n-     void delete(String name)\n+     Object get(String name), and\n+     void set(String name, Object value)\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/certAttributes.html","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,45 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Red Hat, Inc.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8283082\n- * @modules java.base\/sun.security.x509\n- * @summary This test is to confirm that\n- * sun.security.x509.X509CertImpl.delete(\"x509.info.validity\") doesn't\n- * null out info field as reported by bug 8283082\n- *\/\n-\n-import sun.security.x509.X500Name;\n-import sun.security.x509.X509CertImpl;\n-import sun.security.x509.X509CertInfo;\n-\n-public class JDK8283082{\n-    public static void main(String[] args) throws Exception {\n-        var c = new X509CertImpl();\n-        c.set(\"x509.info\", new X509CertInfo());\n-        c.set(\"x509.info.issuer\", new X500Name(\"CN=one\"));\n-        c.delete(\"x509.info.issuer\");\n-        c.set(\"x509.info.issuer\", new X500Name(\"CN=two\"));\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/x509\/X509CertImpl\/JDK8283082.java","additions":0,"deletions":45,"binary":false,"changes":45,"status":"deleted"}]}