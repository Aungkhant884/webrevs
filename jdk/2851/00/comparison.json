{"files":[{"patch":"@@ -35,0 +35,20 @@\n+class PSAdjustWeakRootsClosure final: public OopClosure {\n+public:\n+  virtual void do_oop(narrowOop* p) { ShouldNotReachHere(); }\n+\n+  virtual void do_oop(oop* p)       {\n+    if (PSScavenge::should_scavenge(p)) {\n+      oop o = RawAccess<IS_NOT_NULL>::oop_load(p);\n+      assert(o->is_forwarded(), \"Objects are already forwarded before weak processing\");\n+      oop new_obj = o->forwardee();\n+      if (log_develop_is_enabled(Trace, gc, scavenge)) {\n+        ResourceMark rm; \/\/ required by internal_name()\n+        log_develop_trace(gc, scavenge)(\"{%s %s \" PTR_FORMAT \" -> \" PTR_FORMAT \" (%d)}\",\n+                                        \"forwarding\",\n+                                        new_obj->klass()->internal_name(), p2i((void *)o), p2i((void *)new_obj), new_obj->size());\n+      }\n+      RawAccess<IS_NOT_NULL>::oop_store(p, new_obj);\n+    }\n+  }\n+};\n+\n","filename":"src\/hotspot\/share\/gc\/parallel\/psClosure.inline.hpp","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-#include \"gc\/shared\/weakProcessor.hpp\"\n+#include \"gc\/shared\/weakProcessor.inline.hpp\"\n@@ -523,2 +523,0 @@\n-    PSScavengeRootsClosure root_closure(promotion_manager);\n-\n@@ -527,1 +525,2 @@\n-      WeakProcessor::weak_oops_do(&_is_alive_closure, &root_closure);\n+      PSAdjustWeakRootsClosure root_closure;\n+      WeakProcessor::weak_oops_do(&ParallelScavengeHeap::heap()->workers(), &_is_alive_closure, &root_closure, 1);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psScavenge.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"}]}