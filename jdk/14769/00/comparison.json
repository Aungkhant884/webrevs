{"files":[{"patch":"@@ -174,1 +174,1 @@\n-template <LogLevelType level, LogTagType T0, LogTagType T1 = LogTag::__NO_TAG, LogTagType T2 = LogTag::__NO_TAG,\n+template <LogLevelType tmpl_level, LogTagType T0, LogTagType T1 = LogTag::__NO_TAG, LogTagType T2 = LogTag::__NO_TAG,\n@@ -184,1 +184,1 @@\n-    return LogTagSetMapping<T0, T1, T2, T3, T4, GuardTag>::tagset().is_level(level);\n+    return LogTagSetMapping<T0, T1, T2, T3, T4, GuardTag>::tagset().is_level(tmpl_level);\n@@ -195,1 +195,1 @@\n-    LogTagSetMapping<T0, T1, T2, T3, T4, GuardTag>::tagset().vwrite(level, fmt, args);\n+    LogTagSetMapping<T0, T1, T2, T3, T4, GuardTag>::tagset().vwrite(tmpl_level, fmt, args);\n","filename":"src\/hotspot\/share\/logging\/log.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-protected:\n+public:\n@@ -72,1 +72,0 @@\n-public:\n","filename":"src\/hotspot\/share\/logging\/logMessage.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-private:\n+protected:\n@@ -141,1 +141,1 @@\n-  LogMessageImpl& _lm;\n+  LogMessageImpl* _lm;\n@@ -144,1 +144,1 @@\n-  LogMessageHandle(const LogLevelType level, LogMessageImpl& lm)\n+  LogMessageHandle(const LogLevelType level, LogMessageImpl* lm)\n@@ -148,1 +148,1 @@\n-    return _lm.is_level(_level);\n+    return _lm->is_level(_level);\n@@ -155,1 +155,1 @@\n-      _lm.vwrite(_level, fmt, args);\n+      _lm->vwrite(_level, fmt, args);\n@@ -159,0 +159,4 @@\n+\n+  void set_lm(LogMessageImpl* lm) {\n+    _lm = lm;\n+  }\n@@ -161,0 +165,8 @@\n+\/\/ Create log stream that doesn't interleave its output lines. This is done by buffering\n+\/\/ all lines in memory and outputting them at once, so this is more memory intensive than a LogStream.\n+\/\/ Example:\n+\/\/ LogTarget(Info, gc) lt;\n+\/\/ if (lt.is_enabled()) {\n+\/\/   NonInterleavingLogStream foo{lt};\n+\/\/   print_on(&foo);\n+\/\/ } \/\/ Everything printed here.\n@@ -162,0 +174,1 @@\n+  LogMessageImpl _lm;\n@@ -163,2 +176,5 @@\n-  NonInterleavingLogStream(LogLevelType level, LogMessageImpl& lm)\n-    : LogStreamImpl(LogMessageHandle(level, lm)) {}\n+  template <LogLevelType level, LogTagType T0, LogTagType T1, LogTagType T2, LogTagType T3, LogTagType T4, LogTagType GuardTag>\n+  NonInterleavingLogStream(const LogTargetImpl<level, T0, T1, T2, T3, T4, GuardTag>& type_carrier)\n+    : LogStreamImpl(LogMessageHandle(level, nullptr)), _lm{LogTagSetMapping<T0, T1, T2, T3, T4>::tagset()} {\n+    this->_backing_log.set_lm(&_lm);\n+  }\n","filename":"src\/hotspot\/share\/logging\/logStream.hpp","additions":23,"deletions":7,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -121,2 +121,2 @@\n-    LogMessage(gc) lm ;\n-    NonInterleavingLogStream foo{LogLevelType::Info, lm};\n+    LogTarget(Info, gc) lt;\n+    NonInterleavingLogStream foo{lt};\n","filename":"test\/hotspot\/gtest\/logging\/test_logStream.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}