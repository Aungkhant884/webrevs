{"files":[{"patch":"@@ -63,0 +63,1 @@\n+  friend class NonInterleavingLogStream;\n@@ -71,1 +72,0 @@\n-\n","filename":"src\/hotspot\/share\/logging\/logMessage.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-private:\n+protected:\n@@ -140,0 +140,1 @@\n+  friend class NonInterleavingLogStream;\n@@ -141,1 +142,6 @@\n-  LogMessageImpl& _lm;\n+  LogMessageImpl* _lm;\n+\n+protected:\n+  void set_lm(LogMessageImpl* lm) {\n+    _lm = lm;\n+  }\n@@ -144,1 +150,1 @@\n-  LogMessageHandle(const LogLevelType level, LogMessageImpl& lm)\n+  LogMessageHandle(const LogLevelType level, LogMessageImpl* lm)\n@@ -148,1 +154,1 @@\n-    return _lm.is_level(_level);\n+    return _lm->is_level(_level);\n@@ -155,1 +161,1 @@\n-      _lm.vwrite(_level, fmt, args);\n+      _lm->vwrite(_level, fmt, args);\n@@ -161,0 +167,8 @@\n+\/\/ Create log stream that doesn't interleave its output lines. This is done by buffering\n+\/\/ all lines in memory and outputting them at once, so this is more memory intensive than a LogStream.\n+\/\/ Example:\n+\/\/ LogTarget(Info, gc) lt;\n+\/\/ if (lt.is_enabled()) {\n+\/\/   NonInterleavingLogStream foo{lt};\n+\/\/   print_on(&foo);\n+\/\/ } \/\/ Everything printed here.\n@@ -162,0 +176,1 @@\n+  LogMessageImpl _lm;\n@@ -163,2 +178,5 @@\n-  NonInterleavingLogStream(LogLevelType level, LogMessageImpl& lm)\n-    : LogStreamImpl(LogMessageHandle(level, lm)) {}\n+  template <LogLevelType level, LogTagType T0, LogTagType T1, LogTagType T2, LogTagType T3, LogTagType T4, LogTagType GuardTag>\n+  NonInterleavingLogStream(const LogTargetImpl<level, T0, T1, T2, T3, T4, GuardTag>& type_carrier)\n+    : LogStreamImpl(LogMessageHandle(level, nullptr)), _lm{LogTagSetMapping<T0, T1, T2, T3, T4>::tagset()} {\n+    this->_backing_log.set_lm(&_lm);\n+  }\n","filename":"src\/hotspot\/share\/logging\/logStream.hpp","additions":25,"deletions":7,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -121,2 +121,2 @@\n-    LogMessage(gc) lm ;\n-    NonInterleavingLogStream foo{LogLevelType::Info, lm};\n+    LogTarget(Info, gc) lt;\n+    NonInterleavingLogStream foo{lt};\n","filename":"test\/hotspot\/gtest\/logging\/test_logStream.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}