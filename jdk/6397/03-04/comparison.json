{"files":[{"patch":"@@ -80,41 +80,4 @@\n-    \/\/ Without this interface regular expressions that describe comments would have to\n-    \/\/ to be standardized or needlessly complex.\n-\n-    private interface CoarseParser {\n-        boolean parse(String line);\n-        int payloadEnd();\n-        int markupStart();\n-    }\n-\n-    private final class JavaCommentCoarseParser implements CoarseParser {\n-        private final Matcher m = Pattern.compile(\"^(.*)(\/\/(\\\\s*@\\\\s*\\\\w+.+?))$\").matcher(\"\");\n-\n-        @Override\n-        public boolean parse(String line) {return m.reset(line).matches();}\n-\n-        @Override\n-        public int payloadEnd() {return m.end(1);}\n-\n-        @Override\n-        public int markupStart() {return m.start(3);}\n-    }\n-\n-    private final class PropertiesCommentCoarseParser implements CoarseParser {\n-\n-        private final Matcher m = Pattern.compile(\"^([ \\t]*[#!](.*[#!])?)(\\\\s*@\\\\s*\\\\w+.+?)$\").matcher(\"\");\n-\n-        @Override\n-        public boolean parse(String line) {\n-            return m.reset(line).matches();\n-        }\n-\n-        @Override\n-        public int payloadEnd() {\n-            return m.start(3) - 1;\n-        }\n-\n-        @Override\n-        public int markupStart() {\n-            return m.start(3);\n-        }\n-    }\n+    private static final Pattern JAVA_COMMENT = Pattern.compile(\n+            \"^(?<payload>.*)\/\/(?<markup>\\\\s*@\\\\s*\\\\w+.+?)$\");\n+    private static final Pattern PROPERTIES_COMMENT = Pattern.compile(\n+            \"^(?<payload>[ \\t]*([#!].*)?)[#!](?<markup>\\\\s*@\\\\s*\\\\w+.+?)$\");\n@@ -137,2 +100,2 @@\n-            case JAVA -> new JavaCommentCoarseParser();\n-            case PROPERTIES -> new PropertiesCommentCoarseParser();\n+            case JAVA -> JAVA_COMMENT;\n+            case PROPERTIES -> PROPERTIES_COMMENT;\n@@ -146,2 +109,2 @@\n-    private Result parse(CoarseParser parser, String source) throws ParseException {\n-        Objects.requireNonNull(parser);\n+    private Result parse(Pattern commentPattern, String source) throws ParseException {\n+        Objects.requireNonNull(commentPattern);\n@@ -150,0 +113,2 @@\n+        Matcher markedUpLine = commentPattern.matcher(\"\"); \/\/ reusable matcher\n+\n@@ -177,1 +142,2 @@\n-            if (!parser.parse(rawLine)) { \/\/ (1)\n+            markedUpLine.reset(rawLine);\n+            if (!markedUpLine.matches()) { \/\/ (1)\n@@ -180,1 +146,1 @@\n-                String maybeMarkup = rawLine.substring(parser.markupStart());\n+                String maybeMarkup = rawLine.substring(markedUpLine.start(\"markup\"));\n@@ -186,1 +152,1 @@\n-                    throw new ParseException(e::getMessage, parser.markupStart() + e.getPosition());\n+                    throw new ParseException(e::getMessage, markedUpLine.start(\"markup\") + e.getPosition());\n@@ -190,1 +156,1 @@\n-                    t.markupLineOffset = parser.markupStart();\n+                    t.markupLineOffset = markedUpLine.start(\"markup\");\n@@ -205,1 +171,1 @@\n-                    String payload = rawLine.substring(0, parser.payloadEnd());\n+                    String payload = rawLine.substring(0, markedUpLine.end(\"payload\"));\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/snippet\/Parser.java","additions":16,"deletions":50,"binary":false,"changes":66,"status":"modified"}]}