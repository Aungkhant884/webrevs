{"files":[{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8316533\n+ * @summary Oop of abstract class A with no subclass is subtype checked after null-check\n+ * @run driver compiler.types.TestSubTypeOfAbstractClass\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8316533\n+ * @summary Oop of abstract class A is subtype checked after null-check\n+ * @requires vm.compiler2.enabled\n+ * @run main\/othervm -XX:CompileCommand=compileonly,*A::test\n+ *                   -Xcomp -XX:+IgnoreUnrecognizedVMOptions -XX:+StressReflectiveCode\n+ *                   compiler.types.TestSubTypeOfAbstractClass\n+ *\/\n+\n+package compiler.types;\n+\n+public class TestSubTypeOfAbstractClass {\n+\n+    abstract class A {\n+        public static A get_null() {\n+            return null;\n+        }\n+\n+        public static boolean test() {\n+            \/\/ NullCheck -> CastPP with type A:NotNull\n+            \/\/ But A is abstract with no subclass, hence this type is impossible\n+            return get_null() instanceof A;\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 10_000; i++ ) {\n+            A.test();\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/types\/TestSubTypeOfAbstractClass.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -1,67 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8316533\n- * @summary Oop of abstract class A with no subclass is subtype checked after null-check\n- * @run driver compiler.types.TestSubTypeOfAsbtractClass\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8316533\n- * @summary Oop of abstract class A is subtype checked after null-check\n- * @requires vm.compiler2.enabled\n- * @run main\/othervm -XX:CompileCommand=printcompilation,*A::test\n- *                   -XX:CompileCommand=compileonly,*A::test\n- *                   -Xcomp -XX:+IgnoreUnrecognizedVMOptions -XX:+StressReflectiveCode\n- *                   compiler.types.TestSubTypeOfAsbtractClass\n- *\/\n-\n-package compiler.types;\n-\n-public class TestSubTypeOfAsbtractClass {\n-\n-    abstract class A {\n-        public static A get_null() {\n-            return null;\n-        }\n-\n-        public static boolean test() {\n-            \/\/ NullCheck -> CastPP with type A:NotNull\n-            \/\/ But A is abstract with no subclass, hence this type is impossible\n-            return get_null() instanceof A;\n-        }\n-    }\n-\n-    public static void main(String[] args) {\n-        for (int i = 0; i < 10_000; i++ ) {\n-            A.test();\n-        }\n-    }\n-}\n-\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/types\/TestSubTypeOfAsbtractClass.java","additions":0,"deletions":67,"binary":false,"changes":67,"status":"deleted"}]}