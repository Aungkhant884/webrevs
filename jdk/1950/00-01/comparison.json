{"files":[{"patch":"@@ -384,8 +384,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Byte128Shuffle Iota = iotaShuffle();\n-            VectorMask<Byte> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((byte)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ((Byte128Vector)v).rearrange(Iota).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Byte128Vector) super.sliceTemplate(origin, v);  \/\/ specialize\n@@ -397,8 +390,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Byte128Shuffle Iota = iotaShuffle();\n-            VectorMask<Byte> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((byte)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Byte128Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -410,9 +396,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Byte128Shuffle Iota = iotaShuffle();\n-            VectorMask<Byte> BlendMask = Iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n-                                                               (broadcast((byte)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ((Byte128Vector)w).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Byte128Vector) super.unsliceTemplate(origin, w, part);  \/\/ specialize\n@@ -433,8 +411,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Byte128Shuffle Iota = iotaShuffle();\n-            VectorMask<Byte> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((byte)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Byte128Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte128Vector.java","additions":4,"deletions":33,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -384,8 +384,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Byte256Shuffle Iota = iotaShuffle();\n-            VectorMask<Byte> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((byte)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ((Byte256Vector)v).rearrange(Iota).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Byte256Vector) super.sliceTemplate(origin, v);  \/\/ specialize\n@@ -397,8 +390,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Byte256Shuffle Iota = iotaShuffle();\n-            VectorMask<Byte> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((byte)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Byte256Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -410,9 +396,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Byte256Shuffle Iota = iotaShuffle();\n-            VectorMask<Byte> BlendMask = Iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n-                                                               (broadcast((byte)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ((Byte256Vector)w).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Byte256Vector) super.unsliceTemplate(origin, w, part);  \/\/ specialize\n@@ -433,8 +411,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Byte256Shuffle Iota = iotaShuffle();\n-            VectorMask<Byte> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((byte)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Byte256Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte256Vector.java","additions":4,"deletions":33,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -384,8 +384,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Byte512Shuffle Iota = iotaShuffle();\n-            VectorMask<Byte> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((byte)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ((Byte512Vector)v).rearrange(Iota).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Byte512Vector) super.sliceTemplate(origin, v);  \/\/ specialize\n@@ -397,8 +390,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Byte512Shuffle Iota = iotaShuffle();\n-            VectorMask<Byte> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((byte)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Byte512Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -410,9 +396,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Byte512Shuffle Iota = iotaShuffle();\n-            VectorMask<Byte> BlendMask = Iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n-                                                               (broadcast((byte)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ((Byte512Vector)w).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Byte512Vector) super.unsliceTemplate(origin, w, part);  \/\/ specialize\n@@ -433,8 +411,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Byte512Shuffle Iota = iotaShuffle();\n-            VectorMask<Byte> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((byte)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Byte512Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte512Vector.java","additions":4,"deletions":33,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -384,8 +384,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Byte64Shuffle Iota = iotaShuffle();\n-            VectorMask<Byte> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((byte)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ((Byte64Vector)v).rearrange(Iota).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Byte64Vector) super.sliceTemplate(origin, v);  \/\/ specialize\n@@ -397,8 +390,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Byte64Shuffle Iota = iotaShuffle();\n-            VectorMask<Byte> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((byte)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Byte64Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -410,9 +396,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Byte64Shuffle Iota = iotaShuffle();\n-            VectorMask<Byte> BlendMask = Iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n-                                                               (broadcast((byte)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ((Byte64Vector)w).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Byte64Vector) super.unsliceTemplate(origin, w, part);  \/\/ specialize\n@@ -433,8 +411,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Byte64Shuffle Iota = iotaShuffle();\n-            VectorMask<Byte> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((byte)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Byte64Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte64Vector.java","additions":4,"deletions":33,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -384,8 +384,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            ByteMaxShuffle Iota = iotaShuffle();\n-            VectorMask<Byte> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((byte)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ((ByteMaxVector)v).rearrange(Iota).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (ByteMaxVector) super.sliceTemplate(origin, v);  \/\/ specialize\n@@ -397,8 +390,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            ByteMaxShuffle Iota = iotaShuffle();\n-            VectorMask<Byte> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((byte)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (ByteMaxVector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -410,9 +396,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            ByteMaxShuffle Iota = iotaShuffle();\n-            VectorMask<Byte> BlendMask = Iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n-                                                               (broadcast((byte)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ((ByteMaxVector)w).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (ByteMaxVector) super.unsliceTemplate(origin, w, part);  \/\/ specialize\n@@ -433,8 +411,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            ByteMaxShuffle Iota = iotaShuffle();\n-            VectorMask<Byte> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((byte)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (ByteMaxVector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteMaxVector.java","additions":4,"deletions":33,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -1978,0 +1978,13 @@\n+    \/*package-private*\/\n+    final\n+    @ForceInline\n+    ByteVector sliceTemplate(int origin, Vector<Byte> v1) {\n+        ByteVector that = (ByteVector) v1;\n+        that.check(this);\n+        Objects.checkIndex(origin, length());\n+        VectorShuffle<Byte> Iota = iotaShuffle();\n+        VectorMask<Byte> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((byte)(length() - origin))));\n+        Iota = iotaShuffle(origin, 1, true);\n+        return ((ByteVector)v1).rearrange(Iota).blend(this.rearrange(Iota), BlendMask);\n+    }\n+\n@@ -1997,0 +2010,11 @@\n+    \/*package-private*\/\n+    final\n+    @ForceInline\n+    ByteVector sliceTemplate(int origin) {\n+        Objects.checkIndex(origin, length());\n+        VectorShuffle<Byte> Iota = iotaShuffle();\n+        VectorMask<Byte> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((byte)(length() - origin))));\n+        Iota = iotaShuffle(origin, 1, true);\n+        return vspecies().zero().blend(this.rearrange(Iota), BlendMask);\n+    }\n+\n@@ -2004,0 +2028,15 @@\n+    \/*package-private*\/\n+    final\n+    @ForceInline\n+    ByteVector\n+    unsliceTemplate(int origin, Vector<Byte> w, int part) {\n+        ByteVector that = (ByteVector) w;\n+        that.check(this);\n+        Objects.checkIndex(origin, length());\n+        VectorShuffle<Byte> Iota = iotaShuffle();\n+        VectorMask<Byte> BlendMask = Iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n+                                                                  (broadcast((byte)(origin))));\n+        Iota = iotaShuffle(-origin, 1, true);\n+        return ((ByteVector)w).blend(this.rearrange(Iota), BlendMask);\n+    }\n+\n@@ -2012,1 +2051,1 @@\n-        ByteVector slice = that.slice(origin, that);\n+        ByteVector slice = that.sliceTemplate(origin, that);\n@@ -2014,1 +2053,1 @@\n-        return slice.unslice(origin, w, part);\n+        return slice.unsliceTemplate(origin, w, part);\n@@ -2031,0 +2070,13 @@\n+    \/*package-private*\/\n+    final\n+    @ForceInline\n+    ByteVector\n+    unsliceTemplate(int origin) {\n+        Objects.checkIndex(origin, length());\n+        VectorShuffle<Byte> Iota = iotaShuffle();\n+        VectorMask<Byte> BlendMask = Iota.toVector().compare(VectorOperators.GE,\n+                                                                  (broadcast((byte)(origin))));\n+        Iota = iotaShuffle(-origin, 1, true);\n+        return vspecies().zero().blend(this.rearrange(Iota), BlendMask);\n+    }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":54,"deletions":2,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -378,8 +378,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Double128Shuffle Iota = iotaShuffle();\n-            VectorMask<Double> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((double)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ((Double128Vector)v).rearrange(Iota).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Double128Vector) super.sliceTemplate(origin, v);  \/\/ specialize\n@@ -391,8 +384,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Double128Shuffle Iota = iotaShuffle();\n-            VectorMask<Double> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((double)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Double128Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -404,9 +390,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Double128Shuffle Iota = iotaShuffle();\n-            VectorMask<Double> BlendMask = Iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n-                                                               (broadcast((double)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ((Double128Vector)w).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Double128Vector) super.unsliceTemplate(origin, w, part);  \/\/ specialize\n@@ -427,8 +405,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Double128Shuffle Iota = iotaShuffle();\n-            VectorMask<Double> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((double)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Double128Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double128Vector.java","additions":4,"deletions":33,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -378,8 +378,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Double256Shuffle Iota = iotaShuffle();\n-            VectorMask<Double> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((double)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ((Double256Vector)v).rearrange(Iota).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Double256Vector) super.sliceTemplate(origin, v);  \/\/ specialize\n@@ -391,8 +384,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Double256Shuffle Iota = iotaShuffle();\n-            VectorMask<Double> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((double)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Double256Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -404,9 +390,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Double256Shuffle Iota = iotaShuffle();\n-            VectorMask<Double> BlendMask = Iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n-                                                               (broadcast((double)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ((Double256Vector)w).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Double256Vector) super.unsliceTemplate(origin, w, part);  \/\/ specialize\n@@ -427,8 +405,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Double256Shuffle Iota = iotaShuffle();\n-            VectorMask<Double> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((double)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Double256Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double256Vector.java","additions":4,"deletions":33,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -378,8 +378,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Double512Shuffle Iota = iotaShuffle();\n-            VectorMask<Double> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((double)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ((Double512Vector)v).rearrange(Iota).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Double512Vector) super.sliceTemplate(origin, v);  \/\/ specialize\n@@ -391,8 +384,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Double512Shuffle Iota = iotaShuffle();\n-            VectorMask<Double> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((double)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Double512Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -404,9 +390,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Double512Shuffle Iota = iotaShuffle();\n-            VectorMask<Double> BlendMask = Iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n-                                                               (broadcast((double)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ((Double512Vector)w).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Double512Vector) super.unsliceTemplate(origin, w, part);  \/\/ specialize\n@@ -427,8 +405,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Double512Shuffle Iota = iotaShuffle();\n-            VectorMask<Double> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((double)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Double512Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double512Vector.java","additions":4,"deletions":33,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -378,8 +378,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Double64Shuffle Iota = iotaShuffle();\n-            VectorMask<Double> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((double)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ((Double64Vector)v).rearrange(Iota).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Double64Vector) super.sliceTemplate(origin, v);  \/\/ specialize\n@@ -391,8 +384,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Double64Shuffle Iota = iotaShuffle();\n-            VectorMask<Double> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((double)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Double64Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -404,9 +390,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Double64Shuffle Iota = iotaShuffle();\n-            VectorMask<Double> BlendMask = Iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n-                                                               (broadcast((double)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ((Double64Vector)w).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Double64Vector) super.unsliceTemplate(origin, w, part);  \/\/ specialize\n@@ -427,8 +405,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Double64Shuffle Iota = iotaShuffle();\n-            VectorMask<Double> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((double)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Double64Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double64Vector.java","additions":4,"deletions":33,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -378,8 +378,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            DoubleMaxShuffle Iota = iotaShuffle();\n-            VectorMask<Double> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((double)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ((DoubleMaxVector)v).rearrange(Iota).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (DoubleMaxVector) super.sliceTemplate(origin, v);  \/\/ specialize\n@@ -391,8 +384,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            DoubleMaxShuffle Iota = iotaShuffle();\n-            VectorMask<Double> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((double)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (DoubleMaxVector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -404,9 +390,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            DoubleMaxShuffle Iota = iotaShuffle();\n-            VectorMask<Double> BlendMask = Iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n-                                                               (broadcast((double)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ((DoubleMaxVector)w).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (DoubleMaxVector) super.unsliceTemplate(origin, w, part);  \/\/ specialize\n@@ -427,8 +405,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            DoubleMaxShuffle Iota = iotaShuffle();\n-            VectorMask<Double> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((double)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (DoubleMaxVector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleMaxVector.java","additions":4,"deletions":33,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -1891,0 +1891,13 @@\n+    \/*package-private*\/\n+    final\n+    @ForceInline\n+    DoubleVector sliceTemplate(int origin, Vector<Double> v1) {\n+        DoubleVector that = (DoubleVector) v1;\n+        that.check(this);\n+        Objects.checkIndex(origin, length());\n+        VectorShuffle<Double> Iota = iotaShuffle();\n+        VectorMask<Double> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((double)(length() - origin))));\n+        Iota = iotaShuffle(origin, 1, true);\n+        return ((DoubleVector)v1).rearrange(Iota).blend(this.rearrange(Iota), BlendMask);\n+    }\n+\n@@ -1910,0 +1923,11 @@\n+    \/*package-private*\/\n+    final\n+    @ForceInline\n+    DoubleVector sliceTemplate(int origin) {\n+        Objects.checkIndex(origin, length());\n+        VectorShuffle<Double> Iota = iotaShuffle();\n+        VectorMask<Double> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((double)(length() - origin))));\n+        Iota = iotaShuffle(origin, 1, true);\n+        return vspecies().zero().blend(this.rearrange(Iota), BlendMask);\n+    }\n+\n@@ -1917,0 +1941,15 @@\n+    \/*package-private*\/\n+    final\n+    @ForceInline\n+    DoubleVector\n+    unsliceTemplate(int origin, Vector<Double> w, int part) {\n+        DoubleVector that = (DoubleVector) w;\n+        that.check(this);\n+        Objects.checkIndex(origin, length());\n+        VectorShuffle<Double> Iota = iotaShuffle();\n+        VectorMask<Double> BlendMask = Iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n+                                                                  (broadcast((double)(origin))));\n+        Iota = iotaShuffle(-origin, 1, true);\n+        return ((DoubleVector)w).blend(this.rearrange(Iota), BlendMask);\n+    }\n+\n@@ -1925,1 +1964,1 @@\n-        DoubleVector slice = that.slice(origin, that);\n+        DoubleVector slice = that.sliceTemplate(origin, that);\n@@ -1927,1 +1966,1 @@\n-        return slice.unslice(origin, w, part);\n+        return slice.unsliceTemplate(origin, w, part);\n@@ -1944,0 +1983,13 @@\n+    \/*package-private*\/\n+    final\n+    @ForceInline\n+    DoubleVector\n+    unsliceTemplate(int origin) {\n+        Objects.checkIndex(origin, length());\n+        VectorShuffle<Double> Iota = iotaShuffle();\n+        VectorMask<Double> BlendMask = Iota.toVector().compare(VectorOperators.GE,\n+                                                                  (broadcast((double)(origin))));\n+        Iota = iotaShuffle(-origin, 1, true);\n+        return vspecies().zero().blend(this.rearrange(Iota), BlendMask);\n+    }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":54,"deletions":2,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -378,8 +378,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Float128Shuffle Iota = iotaShuffle();\n-            VectorMask<Float> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((float)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ((Float128Vector)v).rearrange(Iota).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Float128Vector) super.sliceTemplate(origin, v);  \/\/ specialize\n@@ -391,8 +384,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Float128Shuffle Iota = iotaShuffle();\n-            VectorMask<Float> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((float)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Float128Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -404,9 +390,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Float128Shuffle Iota = iotaShuffle();\n-            VectorMask<Float> BlendMask = Iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n-                                                               (broadcast((float)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ((Float128Vector)w).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Float128Vector) super.unsliceTemplate(origin, w, part);  \/\/ specialize\n@@ -427,8 +405,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Float128Shuffle Iota = iotaShuffle();\n-            VectorMask<Float> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((float)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Float128Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float128Vector.java","additions":4,"deletions":33,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -378,8 +378,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Float256Shuffle Iota = iotaShuffle();\n-            VectorMask<Float> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((float)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ((Float256Vector)v).rearrange(Iota).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Float256Vector) super.sliceTemplate(origin, v);  \/\/ specialize\n@@ -391,8 +384,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Float256Shuffle Iota = iotaShuffle();\n-            VectorMask<Float> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((float)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Float256Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -404,9 +390,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Float256Shuffle Iota = iotaShuffle();\n-            VectorMask<Float> BlendMask = Iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n-                                                               (broadcast((float)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ((Float256Vector)w).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Float256Vector) super.unsliceTemplate(origin, w, part);  \/\/ specialize\n@@ -427,8 +405,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Float256Shuffle Iota = iotaShuffle();\n-            VectorMask<Float> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((float)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Float256Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float256Vector.java","additions":4,"deletions":33,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -378,8 +378,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Float512Shuffle Iota = iotaShuffle();\n-            VectorMask<Float> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((float)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ((Float512Vector)v).rearrange(Iota).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Float512Vector) super.sliceTemplate(origin, v);  \/\/ specialize\n@@ -391,8 +384,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Float512Shuffle Iota = iotaShuffle();\n-            VectorMask<Float> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((float)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Float512Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -404,9 +390,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Float512Shuffle Iota = iotaShuffle();\n-            VectorMask<Float> BlendMask = Iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n-                                                               (broadcast((float)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ((Float512Vector)w).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Float512Vector) super.unsliceTemplate(origin, w, part);  \/\/ specialize\n@@ -427,8 +405,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Float512Shuffle Iota = iotaShuffle();\n-            VectorMask<Float> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((float)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Float512Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float512Vector.java","additions":4,"deletions":33,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -378,8 +378,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Float64Shuffle Iota = iotaShuffle();\n-            VectorMask<Float> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((float)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ((Float64Vector)v).rearrange(Iota).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Float64Vector) super.sliceTemplate(origin, v);  \/\/ specialize\n@@ -391,8 +384,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Float64Shuffle Iota = iotaShuffle();\n-            VectorMask<Float> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((float)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Float64Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -404,9 +390,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Float64Shuffle Iota = iotaShuffle();\n-            VectorMask<Float> BlendMask = Iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n-                                                               (broadcast((float)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ((Float64Vector)w).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Float64Vector) super.unsliceTemplate(origin, w, part);  \/\/ specialize\n@@ -427,8 +405,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Float64Shuffle Iota = iotaShuffle();\n-            VectorMask<Float> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((float)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Float64Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float64Vector.java","additions":4,"deletions":33,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -378,8 +378,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            FloatMaxShuffle Iota = iotaShuffle();\n-            VectorMask<Float> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((float)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ((FloatMaxVector)v).rearrange(Iota).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (FloatMaxVector) super.sliceTemplate(origin, v);  \/\/ specialize\n@@ -391,8 +384,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            FloatMaxShuffle Iota = iotaShuffle();\n-            VectorMask<Float> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((float)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (FloatMaxVector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -404,9 +390,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            FloatMaxShuffle Iota = iotaShuffle();\n-            VectorMask<Float> BlendMask = Iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n-                                                               (broadcast((float)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ((FloatMaxVector)w).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (FloatMaxVector) super.unsliceTemplate(origin, w, part);  \/\/ specialize\n@@ -427,8 +405,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            FloatMaxShuffle Iota = iotaShuffle();\n-            VectorMask<Float> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((float)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (FloatMaxVector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatMaxVector.java","additions":4,"deletions":33,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -1903,0 +1903,13 @@\n+    \/*package-private*\/\n+    final\n+    @ForceInline\n+    FloatVector sliceTemplate(int origin, Vector<Float> v1) {\n+        FloatVector that = (FloatVector) v1;\n+        that.check(this);\n+        Objects.checkIndex(origin, length());\n+        VectorShuffle<Float> Iota = iotaShuffle();\n+        VectorMask<Float> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((float)(length() - origin))));\n+        Iota = iotaShuffle(origin, 1, true);\n+        return ((FloatVector)v1).rearrange(Iota).blend(this.rearrange(Iota), BlendMask);\n+    }\n+\n@@ -1922,0 +1935,11 @@\n+    \/*package-private*\/\n+    final\n+    @ForceInline\n+    FloatVector sliceTemplate(int origin) {\n+        Objects.checkIndex(origin, length());\n+        VectorShuffle<Float> Iota = iotaShuffle();\n+        VectorMask<Float> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((float)(length() - origin))));\n+        Iota = iotaShuffle(origin, 1, true);\n+        return vspecies().zero().blend(this.rearrange(Iota), BlendMask);\n+    }\n+\n@@ -1929,0 +1953,15 @@\n+    \/*package-private*\/\n+    final\n+    @ForceInline\n+    FloatVector\n+    unsliceTemplate(int origin, Vector<Float> w, int part) {\n+        FloatVector that = (FloatVector) w;\n+        that.check(this);\n+        Objects.checkIndex(origin, length());\n+        VectorShuffle<Float> Iota = iotaShuffle();\n+        VectorMask<Float> BlendMask = Iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n+                                                                  (broadcast((float)(origin))));\n+        Iota = iotaShuffle(-origin, 1, true);\n+        return ((FloatVector)w).blend(this.rearrange(Iota), BlendMask);\n+    }\n+\n@@ -1937,1 +1976,1 @@\n-        FloatVector slice = that.slice(origin, that);\n+        FloatVector slice = that.sliceTemplate(origin, that);\n@@ -1939,1 +1978,1 @@\n-        return slice.unslice(origin, w, part);\n+        return slice.unsliceTemplate(origin, w, part);\n@@ -1956,0 +1995,13 @@\n+    \/*package-private*\/\n+    final\n+    @ForceInline\n+    FloatVector\n+    unsliceTemplate(int origin) {\n+        Objects.checkIndex(origin, length());\n+        VectorShuffle<Float> Iota = iotaShuffle();\n+        VectorMask<Float> BlendMask = Iota.toVector().compare(VectorOperators.GE,\n+                                                                  (broadcast((float)(origin))));\n+        Iota = iotaShuffle(-origin, 1, true);\n+        return vspecies().zero().blend(this.rearrange(Iota), BlendMask);\n+    }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":54,"deletions":2,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -384,8 +384,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Int128Shuffle Iota = iotaShuffle();\n-            VectorMask<Integer> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((int)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ((Int128Vector)v).rearrange(Iota).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Int128Vector) super.sliceTemplate(origin, v);  \/\/ specialize\n@@ -397,8 +390,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Int128Shuffle Iota = iotaShuffle();\n-            VectorMask<Integer> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((int)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Int128Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -410,9 +396,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Int128Shuffle Iota = iotaShuffle();\n-            VectorMask<Integer> BlendMask = Iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n-                                                               (broadcast((int)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ((Int128Vector)w).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Int128Vector) super.unsliceTemplate(origin, w, part);  \/\/ specialize\n@@ -433,8 +411,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Int128Shuffle Iota = iotaShuffle();\n-            VectorMask<Integer> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((int)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Int128Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int128Vector.java","additions":4,"deletions":33,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -384,8 +384,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Int256Shuffle Iota = iotaShuffle();\n-            VectorMask<Integer> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((int)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ((Int256Vector)v).rearrange(Iota).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Int256Vector) super.sliceTemplate(origin, v);  \/\/ specialize\n@@ -397,8 +390,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Int256Shuffle Iota = iotaShuffle();\n-            VectorMask<Integer> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((int)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Int256Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -410,9 +396,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Int256Shuffle Iota = iotaShuffle();\n-            VectorMask<Integer> BlendMask = Iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n-                                                               (broadcast((int)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ((Int256Vector)w).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Int256Vector) super.unsliceTemplate(origin, w, part);  \/\/ specialize\n@@ -433,8 +411,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Int256Shuffle Iota = iotaShuffle();\n-            VectorMask<Integer> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((int)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Int256Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int256Vector.java","additions":4,"deletions":33,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -384,8 +384,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Int512Shuffle Iota = iotaShuffle();\n-            VectorMask<Integer> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((int)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ((Int512Vector)v).rearrange(Iota).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Int512Vector) super.sliceTemplate(origin, v);  \/\/ specialize\n@@ -397,8 +390,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Int512Shuffle Iota = iotaShuffle();\n-            VectorMask<Integer> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((int)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Int512Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -410,9 +396,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Int512Shuffle Iota = iotaShuffle();\n-            VectorMask<Integer> BlendMask = Iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n-                                                               (broadcast((int)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ((Int512Vector)w).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Int512Vector) super.unsliceTemplate(origin, w, part);  \/\/ specialize\n@@ -433,8 +411,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Int512Shuffle Iota = iotaShuffle();\n-            VectorMask<Integer> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((int)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Int512Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int512Vector.java","additions":4,"deletions":33,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -384,8 +384,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Int64Shuffle Iota = iotaShuffle();\n-            VectorMask<Integer> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((int)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ((Int64Vector)v).rearrange(Iota).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Int64Vector) super.sliceTemplate(origin, v);  \/\/ specialize\n@@ -397,8 +390,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Int64Shuffle Iota = iotaShuffle();\n-            VectorMask<Integer> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((int)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Int64Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -410,9 +396,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Int64Shuffle Iota = iotaShuffle();\n-            VectorMask<Integer> BlendMask = Iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n-                                                               (broadcast((int)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ((Int64Vector)w).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Int64Vector) super.unsliceTemplate(origin, w, part);  \/\/ specialize\n@@ -433,8 +411,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Int64Shuffle Iota = iotaShuffle();\n-            VectorMask<Integer> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((int)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Int64Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int64Vector.java","additions":4,"deletions":33,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -384,8 +384,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            IntMaxShuffle Iota = iotaShuffle();\n-            VectorMask<Integer> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((int)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ((IntMaxVector)v).rearrange(Iota).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (IntMaxVector) super.sliceTemplate(origin, v);  \/\/ specialize\n@@ -397,8 +390,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            IntMaxShuffle Iota = iotaShuffle();\n-            VectorMask<Integer> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((int)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (IntMaxVector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -410,9 +396,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            IntMaxShuffle Iota = iotaShuffle();\n-            VectorMask<Integer> BlendMask = Iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n-                                                               (broadcast((int)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ((IntMaxVector)w).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (IntMaxVector) super.unsliceTemplate(origin, w, part);  \/\/ specialize\n@@ -433,8 +411,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            IntMaxShuffle Iota = iotaShuffle();\n-            VectorMask<Integer> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((int)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (IntMaxVector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntMaxVector.java","additions":4,"deletions":33,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -1977,0 +1977,13 @@\n+    \/*package-private*\/\n+    final\n+    @ForceInline\n+    IntVector sliceTemplate(int origin, Vector<Integer> v1) {\n+        IntVector that = (IntVector) v1;\n+        that.check(this);\n+        Objects.checkIndex(origin, length());\n+        VectorShuffle<Integer> Iota = iotaShuffle();\n+        VectorMask<Integer> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((int)(length() - origin))));\n+        Iota = iotaShuffle(origin, 1, true);\n+        return ((IntVector)v1).rearrange(Iota).blend(this.rearrange(Iota), BlendMask);\n+    }\n+\n@@ -1996,0 +2009,11 @@\n+    \/*package-private*\/\n+    final\n+    @ForceInline\n+    IntVector sliceTemplate(int origin) {\n+        Objects.checkIndex(origin, length());\n+        VectorShuffle<Integer> Iota = iotaShuffle();\n+        VectorMask<Integer> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((int)(length() - origin))));\n+        Iota = iotaShuffle(origin, 1, true);\n+        return vspecies().zero().blend(this.rearrange(Iota), BlendMask);\n+    }\n+\n@@ -2003,0 +2027,15 @@\n+    \/*package-private*\/\n+    final\n+    @ForceInline\n+    IntVector\n+    unsliceTemplate(int origin, Vector<Integer> w, int part) {\n+        IntVector that = (IntVector) w;\n+        that.check(this);\n+        Objects.checkIndex(origin, length());\n+        VectorShuffle<Integer> Iota = iotaShuffle();\n+        VectorMask<Integer> BlendMask = Iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n+                                                                  (broadcast((int)(origin))));\n+        Iota = iotaShuffle(-origin, 1, true);\n+        return ((IntVector)w).blend(this.rearrange(Iota), BlendMask);\n+    }\n+\n@@ -2011,1 +2050,1 @@\n-        IntVector slice = that.slice(origin, that);\n+        IntVector slice = that.sliceTemplate(origin, that);\n@@ -2013,1 +2052,1 @@\n-        return slice.unslice(origin, w, part);\n+        return slice.unsliceTemplate(origin, w, part);\n@@ -2030,0 +2069,13 @@\n+    \/*package-private*\/\n+    final\n+    @ForceInline\n+    IntVector\n+    unsliceTemplate(int origin) {\n+        Objects.checkIndex(origin, length());\n+        VectorShuffle<Integer> Iota = iotaShuffle();\n+        VectorMask<Integer> BlendMask = Iota.toVector().compare(VectorOperators.GE,\n+                                                                  (broadcast((int)(origin))));\n+        Iota = iotaShuffle(-origin, 1, true);\n+        return vspecies().zero().blend(this.rearrange(Iota), BlendMask);\n+    }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":54,"deletions":2,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -374,8 +374,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Long128Shuffle Iota = iotaShuffle();\n-            VectorMask<Long> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((long)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ((Long128Vector)v).rearrange(Iota).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Long128Vector) super.sliceTemplate(origin, v);  \/\/ specialize\n@@ -387,8 +380,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Long128Shuffle Iota = iotaShuffle();\n-            VectorMask<Long> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((long)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Long128Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -400,9 +386,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Long128Shuffle Iota = iotaShuffle();\n-            VectorMask<Long> BlendMask = Iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n-                                                               (broadcast((long)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ((Long128Vector)w).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Long128Vector) super.unsliceTemplate(origin, w, part);  \/\/ specialize\n@@ -423,8 +401,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Long128Shuffle Iota = iotaShuffle();\n-            VectorMask<Long> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((long)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Long128Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long128Vector.java","additions":4,"deletions":33,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -374,8 +374,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Long256Shuffle Iota = iotaShuffle();\n-            VectorMask<Long> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((long)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ((Long256Vector)v).rearrange(Iota).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Long256Vector) super.sliceTemplate(origin, v);  \/\/ specialize\n@@ -387,8 +380,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Long256Shuffle Iota = iotaShuffle();\n-            VectorMask<Long> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((long)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Long256Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -400,9 +386,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Long256Shuffle Iota = iotaShuffle();\n-            VectorMask<Long> BlendMask = Iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n-                                                               (broadcast((long)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ((Long256Vector)w).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Long256Vector) super.unsliceTemplate(origin, w, part);  \/\/ specialize\n@@ -423,8 +401,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Long256Shuffle Iota = iotaShuffle();\n-            VectorMask<Long> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((long)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Long256Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long256Vector.java","additions":4,"deletions":33,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -374,8 +374,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Long512Shuffle Iota = iotaShuffle();\n-            VectorMask<Long> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((long)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ((Long512Vector)v).rearrange(Iota).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Long512Vector) super.sliceTemplate(origin, v);  \/\/ specialize\n@@ -387,8 +380,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Long512Shuffle Iota = iotaShuffle();\n-            VectorMask<Long> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((long)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Long512Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -400,9 +386,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Long512Shuffle Iota = iotaShuffle();\n-            VectorMask<Long> BlendMask = Iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n-                                                               (broadcast((long)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ((Long512Vector)w).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Long512Vector) super.unsliceTemplate(origin, w, part);  \/\/ specialize\n@@ -423,8 +401,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Long512Shuffle Iota = iotaShuffle();\n-            VectorMask<Long> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((long)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Long512Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long512Vector.java","additions":4,"deletions":33,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -374,8 +374,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Long64Shuffle Iota = iotaShuffle();\n-            VectorMask<Long> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((long)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ((Long64Vector)v).rearrange(Iota).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Long64Vector) super.sliceTemplate(origin, v);  \/\/ specialize\n@@ -387,8 +380,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Long64Shuffle Iota = iotaShuffle();\n-            VectorMask<Long> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((long)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Long64Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -400,9 +386,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Long64Shuffle Iota = iotaShuffle();\n-            VectorMask<Long> BlendMask = Iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n-                                                               (broadcast((long)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ((Long64Vector)w).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Long64Vector) super.unsliceTemplate(origin, w, part);  \/\/ specialize\n@@ -423,8 +401,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Long64Shuffle Iota = iotaShuffle();\n-            VectorMask<Long> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((long)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Long64Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long64Vector.java","additions":4,"deletions":33,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -374,8 +374,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            LongMaxShuffle Iota = iotaShuffle();\n-            VectorMask<Long> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((long)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ((LongMaxVector)v).rearrange(Iota).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (LongMaxVector) super.sliceTemplate(origin, v);  \/\/ specialize\n@@ -387,8 +380,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            LongMaxShuffle Iota = iotaShuffle();\n-            VectorMask<Long> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((long)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (LongMaxVector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -400,9 +386,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            LongMaxShuffle Iota = iotaShuffle();\n-            VectorMask<Long> BlendMask = Iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n-                                                               (broadcast((long)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ((LongMaxVector)w).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (LongMaxVector) super.unsliceTemplate(origin, w, part);  \/\/ specialize\n@@ -423,8 +401,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            LongMaxShuffle Iota = iotaShuffle();\n-            VectorMask<Long> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((long)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (LongMaxVector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongMaxVector.java","additions":4,"deletions":33,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -1848,0 +1848,13 @@\n+    \/*package-private*\/\n+    final\n+    @ForceInline\n+    LongVector sliceTemplate(int origin, Vector<Long> v1) {\n+        LongVector that = (LongVector) v1;\n+        that.check(this);\n+        Objects.checkIndex(origin, length());\n+        VectorShuffle<Long> Iota = iotaShuffle();\n+        VectorMask<Long> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((long)(length() - origin))));\n+        Iota = iotaShuffle(origin, 1, true);\n+        return ((LongVector)v1).rearrange(Iota).blend(this.rearrange(Iota), BlendMask);\n+    }\n+\n@@ -1867,0 +1880,11 @@\n+    \/*package-private*\/\n+    final\n+    @ForceInline\n+    LongVector sliceTemplate(int origin) {\n+        Objects.checkIndex(origin, length());\n+        VectorShuffle<Long> Iota = iotaShuffle();\n+        VectorMask<Long> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((long)(length() - origin))));\n+        Iota = iotaShuffle(origin, 1, true);\n+        return vspecies().zero().blend(this.rearrange(Iota), BlendMask);\n+    }\n+\n@@ -1874,0 +1898,15 @@\n+    \/*package-private*\/\n+    final\n+    @ForceInline\n+    LongVector\n+    unsliceTemplate(int origin, Vector<Long> w, int part) {\n+        LongVector that = (LongVector) w;\n+        that.check(this);\n+        Objects.checkIndex(origin, length());\n+        VectorShuffle<Long> Iota = iotaShuffle();\n+        VectorMask<Long> BlendMask = Iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n+                                                                  (broadcast((long)(origin))));\n+        Iota = iotaShuffle(-origin, 1, true);\n+        return ((LongVector)w).blend(this.rearrange(Iota), BlendMask);\n+    }\n+\n@@ -1882,1 +1921,1 @@\n-        LongVector slice = that.slice(origin, that);\n+        LongVector slice = that.sliceTemplate(origin, that);\n@@ -1884,1 +1923,1 @@\n-        return slice.unslice(origin, w, part);\n+        return slice.unsliceTemplate(origin, w, part);\n@@ -1901,0 +1940,13 @@\n+    \/*package-private*\/\n+    final\n+    @ForceInline\n+    LongVector\n+    unsliceTemplate(int origin) {\n+        Objects.checkIndex(origin, length());\n+        VectorShuffle<Long> Iota = iotaShuffle();\n+        VectorMask<Long> BlendMask = Iota.toVector().compare(VectorOperators.GE,\n+                                                                  (broadcast((long)(origin))));\n+        Iota = iotaShuffle(-origin, 1, true);\n+        return vspecies().zero().blend(this.rearrange(Iota), BlendMask);\n+    }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":54,"deletions":2,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -384,8 +384,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Short128Shuffle Iota = iotaShuffle();\n-            VectorMask<Short> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((short)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ((Short128Vector)v).rearrange(Iota).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Short128Vector) super.sliceTemplate(origin, v);  \/\/ specialize\n@@ -397,8 +390,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Short128Shuffle Iota = iotaShuffle();\n-            VectorMask<Short> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((short)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Short128Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -410,9 +396,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Short128Shuffle Iota = iotaShuffle();\n-            VectorMask<Short> BlendMask = Iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n-                                                               (broadcast((short)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ((Short128Vector)w).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Short128Vector) super.unsliceTemplate(origin, w, part);  \/\/ specialize\n@@ -433,8 +411,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Short128Shuffle Iota = iotaShuffle();\n-            VectorMask<Short> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((short)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Short128Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short128Vector.java","additions":4,"deletions":33,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -384,8 +384,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Short256Shuffle Iota = iotaShuffle();\n-            VectorMask<Short> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((short)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ((Short256Vector)v).rearrange(Iota).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Short256Vector) super.sliceTemplate(origin, v);  \/\/ specialize\n@@ -397,8 +390,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Short256Shuffle Iota = iotaShuffle();\n-            VectorMask<Short> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((short)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Short256Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -410,9 +396,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Short256Shuffle Iota = iotaShuffle();\n-            VectorMask<Short> BlendMask = Iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n-                                                               (broadcast((short)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ((Short256Vector)w).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Short256Vector) super.unsliceTemplate(origin, w, part);  \/\/ specialize\n@@ -433,8 +411,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Short256Shuffle Iota = iotaShuffle();\n-            VectorMask<Short> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((short)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Short256Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short256Vector.java","additions":4,"deletions":33,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -384,8 +384,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Short512Shuffle Iota = iotaShuffle();\n-            VectorMask<Short> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((short)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ((Short512Vector)v).rearrange(Iota).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Short512Vector) super.sliceTemplate(origin, v);  \/\/ specialize\n@@ -397,8 +390,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Short512Shuffle Iota = iotaShuffle();\n-            VectorMask<Short> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((short)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Short512Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -410,9 +396,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Short512Shuffle Iota = iotaShuffle();\n-            VectorMask<Short> BlendMask = Iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n-                                                               (broadcast((short)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ((Short512Vector)w).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Short512Vector) super.unsliceTemplate(origin, w, part);  \/\/ specialize\n@@ -433,8 +411,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Short512Shuffle Iota = iotaShuffle();\n-            VectorMask<Short> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((short)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Short512Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short512Vector.java","additions":4,"deletions":33,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -384,8 +384,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Short64Shuffle Iota = iotaShuffle();\n-            VectorMask<Short> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((short)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ((Short64Vector)v).rearrange(Iota).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Short64Vector) super.sliceTemplate(origin, v);  \/\/ specialize\n@@ -397,8 +390,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Short64Shuffle Iota = iotaShuffle();\n-            VectorMask<Short> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((short)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Short64Vector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -410,9 +396,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Short64Shuffle Iota = iotaShuffle();\n-            VectorMask<Short> BlendMask = Iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n-                                                               (broadcast((short)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ((Short64Vector)w).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Short64Vector) super.unsliceTemplate(origin, w, part);  \/\/ specialize\n@@ -433,8 +411,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            Short64Shuffle Iota = iotaShuffle();\n-            VectorMask<Short> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((short)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (Short64Vector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short64Vector.java","additions":4,"deletions":33,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -384,8 +384,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            ShortMaxShuffle Iota = iotaShuffle();\n-            VectorMask<Short> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((short)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ((ShortMaxVector)v).rearrange(Iota).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (ShortMaxVector) super.sliceTemplate(origin, v);  \/\/ specialize\n@@ -397,8 +390,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            ShortMaxShuffle Iota = iotaShuffle();\n-            VectorMask<Short> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((short)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (ShortMaxVector) super.sliceTemplate(origin);  \/\/ specialize\n@@ -410,9 +396,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            ShortMaxShuffle Iota = iotaShuffle();\n-            VectorMask<Short> BlendMask = Iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n-                                                               (broadcast((short)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ((ShortMaxVector)w).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (ShortMaxVector) super.unsliceTemplate(origin, w, part);  \/\/ specialize\n@@ -433,8 +411,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            ShortMaxShuffle Iota = iotaShuffle();\n-            VectorMask<Short> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast((short)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return (ShortMaxVector) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortMaxVector.java","additions":4,"deletions":33,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -1978,0 +1978,13 @@\n+    \/*package-private*\/\n+    final\n+    @ForceInline\n+    ShortVector sliceTemplate(int origin, Vector<Short> v1) {\n+        ShortVector that = (ShortVector) v1;\n+        that.check(this);\n+        Objects.checkIndex(origin, length());\n+        VectorShuffle<Short> Iota = iotaShuffle();\n+        VectorMask<Short> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((short)(length() - origin))));\n+        Iota = iotaShuffle(origin, 1, true);\n+        return ((ShortVector)v1).rearrange(Iota).blend(this.rearrange(Iota), BlendMask);\n+    }\n+\n@@ -1997,0 +2010,11 @@\n+    \/*package-private*\/\n+    final\n+    @ForceInline\n+    ShortVector sliceTemplate(int origin) {\n+        Objects.checkIndex(origin, length());\n+        VectorShuffle<Short> Iota = iotaShuffle();\n+        VectorMask<Short> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast((short)(length() - origin))));\n+        Iota = iotaShuffle(origin, 1, true);\n+        return vspecies().zero().blend(this.rearrange(Iota), BlendMask);\n+    }\n+\n@@ -2004,0 +2028,15 @@\n+    \/*package-private*\/\n+    final\n+    @ForceInline\n+    ShortVector\n+    unsliceTemplate(int origin, Vector<Short> w, int part) {\n+        ShortVector that = (ShortVector) w;\n+        that.check(this);\n+        Objects.checkIndex(origin, length());\n+        VectorShuffle<Short> Iota = iotaShuffle();\n+        VectorMask<Short> BlendMask = Iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n+                                                                  (broadcast((short)(origin))));\n+        Iota = iotaShuffle(-origin, 1, true);\n+        return ((ShortVector)w).blend(this.rearrange(Iota), BlendMask);\n+    }\n+\n@@ -2012,1 +2051,1 @@\n-        ShortVector slice = that.slice(origin, that);\n+        ShortVector slice = that.sliceTemplate(origin, that);\n@@ -2014,1 +2053,1 @@\n-        return slice.unslice(origin, w, part);\n+        return slice.unsliceTemplate(origin, w, part);\n@@ -2031,0 +2070,13 @@\n+    \/*package-private*\/\n+    final\n+    @ForceInline\n+    ShortVector\n+    unsliceTemplate(int origin) {\n+        Objects.checkIndex(origin, length());\n+        VectorShuffle<Short> Iota = iotaShuffle();\n+        VectorMask<Short> BlendMask = Iota.toVector().compare(VectorOperators.GE,\n+                                                                  (broadcast((short)(origin))));\n+        Iota = iotaShuffle(-origin, 1, true);\n+        return vspecies().zero().blend(this.rearrange(Iota), BlendMask);\n+    }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":54,"deletions":2,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -2247,0 +2247,13 @@\n+    \/*package-private*\/\n+    final\n+    @ForceInline\n+    $abstractvectortype$ sliceTemplate(int origin, Vector<$Boxtype$> v1) {\n+        $abstractvectortype$ that = ($abstractvectortype$) v1;\n+        that.check(this);\n+        Objects.checkIndex(origin, length());\n+        VectorShuffle<$Boxtype$> Iota = iotaShuffle();\n+        VectorMask<$Boxtype$> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast(($type$)(length() - origin))));\n+        Iota = iotaShuffle(origin, 1, true);\n+        return (($abstractvectortype$)v1).rearrange(Iota).blend(this.rearrange(Iota), BlendMask);\n+    }\n+\n@@ -2266,0 +2279,11 @@\n+    \/*package-private*\/\n+    final\n+    @ForceInline\n+    $abstractvectortype$ sliceTemplate(int origin) {\n+        Objects.checkIndex(origin, length());\n+        VectorShuffle<$Boxtype$> Iota = iotaShuffle();\n+        VectorMask<$Boxtype$> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast(($type$)(length() - origin))));\n+        Iota = iotaShuffle(origin, 1, true);\n+        return vspecies().zero().blend(this.rearrange(Iota), BlendMask);\n+    }\n+\n@@ -2273,0 +2297,15 @@\n+    \/*package-private*\/\n+    final\n+    @ForceInline\n+    $abstractvectortype$\n+    unsliceTemplate(int origin, Vector<$Boxtype$> w, int part) {\n+        $abstractvectortype$ that = ($abstractvectortype$) w;\n+        that.check(this);\n+        Objects.checkIndex(origin, length());\n+        VectorShuffle<$Boxtype$> Iota = iotaShuffle();\n+        VectorMask<$Boxtype$> BlendMask = Iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n+                                                                  (broadcast(($type$)(origin))));\n+        Iota = iotaShuffle(-origin, 1, true);\n+        return (($abstractvectortype$)w).blend(this.rearrange(Iota), BlendMask);\n+    }\n+\n@@ -2281,1 +2320,1 @@\n-        $abstractvectortype$ slice = that.slice(origin, that);\n+        $abstractvectortype$ slice = that.sliceTemplate(origin, that);\n@@ -2283,1 +2322,1 @@\n-        return slice.unslice(origin, w, part);\n+        return slice.unsliceTemplate(origin, w, part);\n@@ -2300,0 +2339,13 @@\n+    \/*package-private*\/\n+    final\n+    @ForceInline\n+    $abstractvectortype$\n+    unsliceTemplate(int origin) {\n+        Objects.checkIndex(origin, length());\n+        VectorShuffle<$Boxtype$> Iota = iotaShuffle();\n+        VectorMask<$Boxtype$> BlendMask = Iota.toVector().compare(VectorOperators.GE,\n+                                                                  (broadcast(($type$)(origin))));\n+        Iota = iotaShuffle(-origin, 1, true);\n+        return vspecies().zero().blend(this.rearrange(Iota), BlendMask);\n+    }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":54,"deletions":2,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -390,8 +390,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            $shuffletype$ Iota = iotaShuffle();\n-            VectorMask<$Boxtype$> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast(($type$)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return (($vectortype$)v).rearrange(Iota).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return ($vectortype$) super.sliceTemplate(origin, v);  \/\/ specialize\n@@ -403,8 +396,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            $shuffletype$ Iota = iotaShuffle();\n-            VectorMask<$Boxtype$> BlendMask = Iota.toVector().compare(VectorOperators.LT, (broadcast(($type$)(VLENGTH - origin))));\n-            Iota = iotaShuffle(origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return ($vectortype$) super.sliceTemplate(origin);  \/\/ specialize\n@@ -416,9 +402,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            $shuffletype$ Iota = iotaShuffle();\n-            VectorMask<$Boxtype$> BlendMask = Iota.toVector().compare((part == 0) ? VectorOperators.GE : VectorOperators.LT,\n-                                                               (broadcast(($type$)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return (($vectortype$)w).blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return ($vectortype$) super.unsliceTemplate(origin, w, part);  \/\/ specialize\n@@ -439,8 +417,1 @@\n-        if ((origin < 0) || (origin >= VLENGTH)) {\n-            throw new ArrayIndexOutOfBoundsException(\"Index \" + origin + \" out of bounds for vector length \" + VLENGTH);\n-        } else {\n-            $shuffletype$ Iota = iotaShuffle();\n-            VectorMask<$Boxtype$> BlendMask = Iota.toVector().compare(VectorOperators.GE, (broadcast(($type$)(origin))));\n-            Iota = iotaShuffle(-origin, 1, true);\n-            return ZERO.blend(this.rearrange(Iota), BlendMask);\n-        }\n+        return ($vectortype$) super.unsliceTemplate(origin);  \/\/ specialize\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-VectorBits.java.template","additions":4,"deletions":33,"binary":false,"changes":37,"status":"modified"}]}