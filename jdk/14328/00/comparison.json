{"files":[{"patch":"@@ -1340,20 +1340,0 @@\n-\/\/ Set lower\n-void RangeCheckEliminator::Bound::set_lower(int value, Value v) {\n-  assert(!v || !v->as_Constant() || !v->type()->as_IntConstant(), \"Must not be constant!\");\n-  this->_lower = value;\n-  this->_lower_instr = v;\n-}\n-\n-\/\/ Set upper\n-void RangeCheckEliminator::Bound::set_upper(int value, Value v) {\n-  assert(!v || !v->as_Constant() || !v->type()->as_IntConstant(), \"Must not be constant!\");\n-  this->_upper = value;\n-  this->_upper_instr = v;\n-}\n-\n-\/\/ Add constant -> no overflow may occur\n-void RangeCheckEliminator::Bound::add_constant(int value) {\n-  this->_lower += value;\n-  this->_upper += value;\n-}\n-\n","filename":"src\/hotspot\/share\/c1\/c1_RangeCheckElimination.cpp","additions":0,"deletions":20,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -100,2 +100,0 @@\n-    void set_upper(int upper, Value upper_instr);\n-    void set_lower(int lower, Value lower_instr);\n@@ -105,1 +103,0 @@\n-    void add_constant(int value);\n","filename":"src\/hotspot\/share\/c1\/c1_RangeCheckElimination.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"}]}