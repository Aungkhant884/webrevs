{"files":[{"patch":"@@ -65,0 +65,1 @@\n+     * @throws IllegalArgumentException if one of the layouts in {@code addedLayouts} is a padding layout.\n@@ -75,0 +76,1 @@\n+     * @throws IllegalArgumentException if one of the layouts in {@code addedLayouts} is a padding layout.\n@@ -82,0 +84,1 @@\n+     * @throws IllegalArgumentException if {@code newReturn} is a padding layout.\n@@ -99,2 +102,1 @@\n-     * <li>If the layout is a {@link GroupLayout} the carrier type is {@link MemorySegment}.<\/li>\n-     * <li>If the layout is a {@link PaddingLayout}, or {@link SequenceLayout} an {@link IllegalArgumentException} is thrown.<\/li>\n+     * <li>If the layout is a {@link GroupLayout} or a {@link SequenceLayout}, the carrier type is {@link MemorySegment}.<\/li>\n@@ -103,0 +105,3 @@\n+     * @apiNote A function descriptor cannot, by construction, contain any padding layouts. As such, it is not\n+     * necessary to specify how padding layout should be mapped to carrier types.\n+     *\n@@ -113,0 +118,2 @@\n+     * @throws IllegalArgumentException if {@code resLayout} is a padding layout.\n+     * @throws IllegalArgumentException if one of the layouts in {@code argLayouts} is a padding layout.\n@@ -124,0 +131,1 @@\n+     * @throws IllegalArgumentException if one of the layouts in {@code argLayouts} is a padding layout.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/FunctionDescriptor.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+import java.lang.foreign.PaddingLayout;\n+import java.lang.foreign.SequenceLayout;\n@@ -50,0 +52,7 @@\n+        if (resLayout instanceof PaddingLayout) {\n+            throw new IllegalArgumentException(\"Unsupported padding layout return in function descriptor: \" + resLayout);\n+        }\n+        Optional<MemoryLayout> paddingLayout = argLayouts.stream().filter(l -> l instanceof PaddingLayout).findAny();\n+        if (paddingLayout.isPresent()) {\n+            throw new IllegalArgumentException(\"Unsupported padding layout argument in function descriptor: \" + paddingLayout.get());\n+        }\n@@ -123,1 +132,1 @@\n-        } else if (layout instanceof GroupLayout) {\n+        } else if (layout instanceof GroupLayout || layout instanceof SequenceLayout) {\n@@ -126,1 +135,2 @@\n-            throw new IllegalArgumentException(\"Unsupported layout: \" + layout);\n+            \/\/ Note: we should not worry about padding layouts, as they cannot be present in a function descriptor\n+            throw new AssertionError(\"Cannot get here\");\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/FunctionDescriptorImpl.java","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import jdk.internal.foreign.layout.ValueLayouts;\n@@ -119,2 +118,2 @@\n-        descriptor.returnLayout().ifPresent(this::checkLayoutsRecursive);\n-        descriptor.argumentLayouts().forEach(this::checkLayoutsRecursive);\n+        descriptor.returnLayout().ifPresent(this::checkLayout);\n+        descriptor.argumentLayouts().forEach(this::checkLayout);\n@@ -123,1 +122,10 @@\n-    private void checkLayoutsRecursive(MemoryLayout layout) {\n+    private void checkLayout(MemoryLayout layout) {\n+        \/\/ Note: we should not worry about padding layouts, as they cannot be present in a function descriptor\n+        if (layout instanceof SequenceLayout) {\n+            throw new IllegalArgumentException(\"Unsupported layout: \" + layout);\n+        } else {\n+            checkLayoutRecursive(layout);\n+        }\n+    }\n+\n+    private void checkLayoutRecursive(MemoryLayout layout) {\n@@ -134,1 +142,1 @@\n-                checkLayoutsRecursive(member);\n+                checkLayoutRecursive(member);\n@@ -145,1 +153,1 @@\n-                checkLayoutsRecursive(member);\n+                checkLayoutRecursive(member);\n@@ -152,1 +160,1 @@\n-            checkLayoutsRecursive(sl.elementLayout());\n+            checkLayoutRecursive(sl.elementLayout());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/AbstractLinker.java","additions":15,"deletions":7,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -116,1 +116,2 @@\n-                MemoryLayout.structLayout(C_INT, C_INT));\n+                MemoryLayout.structLayout(C_INT, C_INT),\n+                MemoryLayout.sequenceLayout(3, C_INT));\n@@ -118,1 +119,1 @@\n-        assertEquals(cmt, MethodType.methodType(int.class, int.class, MemorySegment.class));\n+        assertEquals(cmt, MethodType.methodType(int.class, int.class, MemorySegment.class, MemorySegment.class));\n@@ -143,0 +144,25 @@\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    public void testBadPaddingInVoidFunction() {\n+        FunctionDescriptor.ofVoid(MemoryLayout.paddingLayout(8));\n+    }\n+\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    public void testBadPaddingInNonVoidFunction() {\n+        FunctionDescriptor.of(MemoryLayout.paddingLayout(8));\n+    }\n+\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    public void testBadPaddingInAppendArgLayouts() {\n+        FunctionDescriptor.ofVoid().appendArgumentLayouts(MemoryLayout.paddingLayout(8));\n+    }\n+\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    public void testBadPaddingInInsertArgLayouts() {\n+        FunctionDescriptor.ofVoid().insertArgumentLayouts(0, MemoryLayout.paddingLayout(8));\n+    }\n+\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    public void testBadPaddingInChangeRetLayout() {\n+        FunctionDescriptor.ofVoid().changeReturnLayout(MemoryLayout.paddingLayout(8));\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/TestFunctionDescriptor.java","additions":28,"deletions":2,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -112,8 +112,0 @@\n-            {\n-                    FunctionDescriptor.of(MemoryLayout.paddingLayout(64)),\n-                    \"Unsupported layout: x64\"\n-            },\n-            {\n-                    FunctionDescriptor.ofVoid(MemoryLayout.paddingLayout(64)),\n-                    \"Unsupported layout: x64\"\n-            },\n","filename":"test\/jdk\/java\/foreign\/TestIllegalLink.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"}]}