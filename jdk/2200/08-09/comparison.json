{"files":[{"patch":"@@ -42,6 +42,0 @@\n-private:\n-\n-  static void current_thread_enable_wx_impl(WXMode mode) { }\n-\n-public:\n-\n","filename":"src\/hotspot\/os_cpu\/aix_ppc\/os_aix_ppc.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -212,0 +212,3 @@\n+  \/\/ Enable WXWrite: this function is called by the signal handler at arbitrary\n+  \/\/ point of execution.\n+  ThreadWXEnable wx(WXWrite, thread);\n@@ -247,1 +250,0 @@\n-        Thread::WXWriteFromExecSetter wx_write;\n@@ -263,1 +265,0 @@\n-      Thread::WXWriteFromExecSetter wx_write;\n@@ -664,1 +665,1 @@\n-void os::current_thread_enable_wx_impl(WXMode mode) {\n+void os::current_thread_enable_wx(WXMode mode) {\n","filename":"src\/hotspot\/os_cpu\/bsd_aarch64\/os_bsd_aarch64.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -37,6 +37,0 @@\n-private:\n-\n-  static void current_thread_enable_wx_impl(WXMode mode);\n-\n-public:\n-\n","filename":"src\/hotspot\/os_cpu\/bsd_aarch64\/os_bsd_aarch64.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -40,6 +40,0 @@\n-private:\n-\n-  static void current_thread_enable_wx_impl(WXMode mode) { }\n-\n-public:\n-\n","filename":"src\/hotspot\/os_cpu\/bsd_x86\/os_bsd_x86.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -56,6 +56,0 @@\n-private:\n-\n-  static void current_thread_enable_wx_impl(WXMode mode) { }\n-\n-public:\n-\n","filename":"src\/hotspot\/os_cpu\/bsd_zero\/os_bsd_zero.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -42,6 +42,0 @@\n-private:\n-\n-  static void current_thread_enable_wx_impl(WXMode mode) { }\n-\n-public:\n-\n","filename":"src\/hotspot\/os_cpu\/linux_aarch64\/os_linux_aarch64.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -73,6 +73,0 @@\n-private:\n-\n-  static void current_thread_enable_wx_impl(WXMode mode) { }\n-\n-public:\n-\n","filename":"src\/hotspot\/os_cpu\/linux_arm\/os_linux_arm.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -35,6 +35,0 @@\n-private:\n-\n-  static void current_thread_enable_wx_impl(WXMode mode) { }\n-\n-public:\n-\n","filename":"src\/hotspot\/os_cpu\/linux_ppc\/os_linux_ppc.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -34,6 +34,0 @@\n-private:\n-\n-  static void current_thread_enable_wx_impl(WXMode mode) { }\n-\n-public:\n-\n","filename":"src\/hotspot\/os_cpu\/linux_s390\/os_linux_s390.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -53,6 +53,0 @@\n-private:\n-\n-  static void current_thread_enable_wx_impl(WXMode mode) { }\n-\n-public:\n-\n","filename":"src\/hotspot\/os_cpu\/linux_x86\/os_linux_x86.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -93,6 +93,0 @@\n-private:\n-\n-  static void current_thread_enable_wx_impl(WXMode mode) { }\n-\n-private:\n-\n","filename":"src\/hotspot\/os_cpu\/linux_zero\/os_linux_zero.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,6 +36,0 @@\n-private:\n-\n-  static void current_thread_enable_wx_impl(WXMode mode) { }\n-\n-public:\n-\n","filename":"src\/hotspot\/os_cpu\/windows_aarch64\/os_windows_aarch64.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -46,6 +46,0 @@\n-private:\n-\n-  static void current_thread_enable_wx_impl(WXMode mode) { }\n-\n-public:\n-\n","filename":"src\/hotspot\/os_cpu\/windows_x86\/os_windows_x86.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1271,1 +1271,3 @@\n-  Thread::WXWriteFromExecSetter wx_write;\n+  \/\/ Enable WXWrite: the function is called by c1 stub as a runtime function\n+  \/\/ (see another implementation above).\n+  MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXWrite, thread));\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-  Thread::WXWriteVerifier __wx_write;       \\\n@@ -48,1 +47,0 @@\n-  Thread::WXWriteVerifier __wx_write;       \\\n","filename":"src\/hotspot\/share\/ci\/ciUtilities.inline.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -291,1 +291,0 @@\n-  Thread::WXExecFromWriteSetter wx_exec;\n@@ -338,1 +337,0 @@\n-  Thread::WXExecFromWriteSetter wx_exec;\n@@ -751,1 +749,0 @@\n-        Thread::WXExecFromWriteSetter wx_exec;\n@@ -802,1 +799,0 @@\n-          Thread::WXExecFromWriteSetter wx_exec;\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -419,1 +419,0 @@\n-    Thread::WXExecFromWriteSetter wx_exec;\n@@ -448,1 +447,0 @@\n-    Thread::WXExecFromWriteSetter wx_exec;\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -318,1 +318,0 @@\n-    Thread::WXExecFromWriteSetter wx_exec;\n","filename":"src\/hotspot\/share\/classfile\/verifier.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1788,1 +1788,0 @@\n-    Thread::WXWriteVerifier wx_write;\n@@ -2084,1 +2083,0 @@\n-    Thread::WXWriteVerifier wx_write;\n@@ -2275,1 +2273,0 @@\n-    Thread::WXWriteVerifier wx_write;\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"runtime\/threadWXSetters.hpp\"\n@@ -51,1 +52,3 @@\n-  Thread::WXWriteFromExecSetter wx_write;\n+  \/\/ Enable WXWrite: the function is called direclty from nmethod_entry_barrier\n+  \/\/ stub.\n+  MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXWrite));\n","filename":"src\/hotspot\/share\/gc\/shared\/barrierSetNMethod.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -974,0 +974,3 @@\n+  \/\/ Enable WXWrite: the function is called directly by interpreter.\n+  MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXWrite, thread));\n+\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -87,1 +87,0 @@\n-  Thread::WXWriteFromExecSetter wx_write;\n@@ -235,1 +234,0 @@\n-    Thread::WXExecFromWriteSetter wx_exec;\n@@ -247,1 +245,0 @@\n-  Thread::WXExecFromWriteSetter wx_exec;\n","filename":"src\/hotspot\/share\/jfr\/instrumentation\/jfrJvmtiAgent.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-  Thread::WXExecFromWriteSetter _wx_exec;\n@@ -44,1 +43,1 @@\n-    _ttnfv(thread), _wx_exec(), _hm(thread) {\n+    _ttnfv(thread), _hm(thread) {\n","filename":"src\/hotspot\/share\/jvmci\/jniAccessMark.inline.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -934,1 +934,0 @@\n-      Thread::WXWriteVerifier wx_write;\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCodeInstaller.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -127,5 +127,5 @@\n-#define JVMCI_VM_ENTRY_MARK                   \\\n-  Thread::WXWriteFromExecSetter __wx_write;   \\\n-  ThreadInVMfromNative __tiv(thread);         \\\n-  HandleMarkCleaner __hm(thread);             \\\n-  Thread* THREAD = thread;                    \\\n+#define JVMCI_VM_ENTRY_MARK                                       \\\n+  MACOS_AARCH64_ONLY(ThreadWXEnable __wx(WXWrite, thread));       \\\n+  ThreadInVMfromNative __tiv(thread);                             \\\n+  HandleMarkCleaner __hm(thread);                                 \\\n+  Thread* THREAD = thread;                                        \\\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -870,1 +870,0 @@\n-  Thread::WXExecFromWriteSetter wx_exec;                              \\\n@@ -1031,1 +1030,0 @@\n-    Thread::WXExecFromWriteSetter wx_exec;\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,2 @@\n-  friend class LogStreamTest;\n+  friend class LogStreamTest_TestLineBufferAllocation_vm_Test;\n+  friend class LogStreamTest_TestLineBufferAllocationCap_vm_Test;\n","filename":"src\/hotspot\/share\/logging\/logStream.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -74,0 +74,1 @@\n+#include \"runtime\/threadWXSetters.hpp\"\n@@ -1413,0 +1414,4 @@\n+\n+  \/\/ Enable WXWrite: the function called directly by compiled code.\n+  MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXWrite, thread));\n+\n@@ -1429,2 +1434,0 @@\n-  Thread::WXWriteFromExecSetter wx_write;\n-\n","filename":"src\/hotspot\/share\/opto\/runtime.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -3633,1 +3633,1 @@\n-    Thread::enable_wx_from_write(WXExec);\n+    MACOS_AARCH64_ONLY(thread->enable_wx(WXExec));\n@@ -3725,1 +3725,0 @@\n-  Thread::enable_wx_from_exec(WXWrite);\n@@ -3786,1 +3785,1 @@\n-  thread->init_wx();\n+  MACOS_AARCH64_ONLY(thread->init_wx());\n@@ -3860,1 +3859,1 @@\n-  Thread::enable_wx_from_write(WXExec);\n+  MACOS_AARCH64_ONLY(thread->enable_wx(WXExec));\n@@ -3915,1 +3914,0 @@\n-  Thread::enable_wx_from_exec(WXWrite);\n@@ -3931,1 +3929,1 @@\n-  os::current_thread_enable_wx(WXExec);\n+  MACOS_AARCH64_ONLY(os::current_thread_enable_wx(WXExec));\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -68,1 +68,0 @@\n-      Thread::WXWriteFromExecSetter __wx_write;                        \\\n@@ -108,0 +107,1 @@\n+    MACOS_AARCH64_ONLY(ThreadWXEnable __wx(WXWrite, thr));         \\\n","filename":"src\/hotspot\/share\/prims\/jniCheck.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3407,1 +3407,0 @@\n-    Thread::WXWriteVerifier wx_write;\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -436,1 +436,1 @@\n-    <xsl:text>Thread::WXWriteFromExecSetter __wx_write;<\/xsl:text>\n+    <xsl:text>MACOS_AARCH64_ONLY(ThreadWXEnable __wx(WXWrite, current_thread));<\/xsl:text>\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnter.xsl","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -179,0 +179,1 @@\n+    MACOS_AARCH64_ONLY(ThreadWXEnable __wx(WXWrite, current_thread));\n@@ -180,1 +181,0 @@\n-    Thread::WXExecVerifier __wx_exec;\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -94,1 +94,0 @@\n-  Thread::WXExecFromWriteSetter _wx_exec;\n@@ -101,1 +100,0 @@\n-    _wx_exec(),\n@@ -111,1 +109,0 @@\n-  Thread::WXExecFromWriteSetter _wx_exec;\n@@ -116,1 +113,1 @@\n-  JvmtiThreadEventTransition(Thread *thread) : _rm(), _hm(thread), _wx_exec() {\n+  JvmtiThreadEventTransition(Thread *thread) : _rm(), _hm(thread) {\n@@ -406,1 +403,0 @@\n-    Thread::WXExecVerifier __wx_exec;\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.cpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -87,1 +87,0 @@\n-    Thread::WXExecFromWriteSetter wx_exec;\n","filename":"src\/hotspot\/share\/prims\/jvmtiImpl.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -240,1 +240,0 @@\n-    Thread::WXExecVerifier wx_exec;\n@@ -428,1 +427,0 @@\n-          Thread::WXExecVerifier wx_exec;\n","filename":"src\/hotspot\/share\/prims\/jvmtiRawMonitor.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1580,1 +1580,0 @@\n-    Thread::WXExecFromWriteSetter wx_exec;\n","filename":"src\/hotspot\/share\/prims\/methodHandles.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-  Thread::WXExecFromWriteSetter wx_exec;\n","filename":"src\/hotspot\/share\/prims\/nativeEntryPoint.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -415,1 +415,0 @@\n-  Thread::WXWriteVerifier wx_write;\n","filename":"src\/hotspot\/share\/prims\/nativeLookup.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -57,2 +57,0 @@\n-  Thread::WXExecFromWriteSetter wx_exec;\n-\n@@ -96,1 +94,0 @@\n-    Thread::WXExecFromWriteSetter wx_exec;\n@@ -117,1 +114,0 @@\n-   Thread::WXExecFromWriteSetter wx_exec;\n@@ -182,1 +178,0 @@\n-    Thread::WXExecFromWriteSetter wx_exec;\n@@ -225,2 +220,0 @@\n-    Thread::WXExecFromWriteSetter wx_exec;\n-\n@@ -268,1 +261,0 @@\n-    Thread::WXExecFromWriteSetter wx_exec;\n@@ -331,1 +323,0 @@\n-    Thread::WXExecFromWriteSetter wx_exec;\n","filename":"src\/hotspot\/share\/prims\/perf.cpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -183,1 +183,0 @@\n-  Thread::WXExecFromWriteSetter wx_exec;\n","filename":"src\/hotspot\/share\/prims\/scopedMemoryAccess.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -59,1 +59,0 @@\n-  Thread::WXWriteFromExecSetter wx_write;\n","filename":"src\/hotspot\/share\/prims\/universalNativeInvoker.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -407,1 +407,0 @@\n-    Thread::WXExecFromWriteSetter wx_exec;\n@@ -409,0 +408,1 @@\n+      MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXExec, thread));\n@@ -460,0 +460,1 @@\n+  MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXExec));\n@@ -466,0 +467,1 @@\n+  MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXExec));\n@@ -721,1 +723,0 @@\n-  Thread::WXExecFromWriteSetter wx_exec;\n@@ -907,1 +908,0 @@\n-  Thread::WXExecFromWriteSetter wx_exec;\n@@ -1156,1 +1156,0 @@\n-  Thread::WXExecFromWriteSetter wx_exec;\n","filename":"src\/hotspot\/share\/prims\/unsafe.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -396,1 +396,0 @@\n-  Thread::WXExecFromWriteSetter wx_exec;\n","filename":"src\/hotspot\/share\/prims\/vectorSupport.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -762,1 +762,0 @@\n-  Thread::WXExecFromWriteSetter wx_exec;\n@@ -1138,1 +1137,0 @@\n-  Thread::WXExecFromWriteSetter wx_exec;\n@@ -1153,1 +1151,0 @@\n-  Thread::WXExecFromWriteSetter wx_exec;\n@@ -1194,1 +1191,0 @@\n-  Thread::WXExecFromWriteSetter wx_exec;\n@@ -1216,1 +1212,0 @@\n-    Thread::WXExecFromWriteSetter wx_exec;\n@@ -1226,1 +1221,0 @@\n-    Thread::WXExecFromWriteSetter wx_exec;\n@@ -1236,1 +1230,0 @@\n-    Thread::WXExecFromWriteSetter wx_exec;\n@@ -1246,1 +1239,0 @@\n-    Thread::WXExecFromWriteSetter wx_exec;\n@@ -1256,1 +1248,0 @@\n-    Thread::WXExecFromWriteSetter wx_exec;\n@@ -1266,1 +1257,0 @@\n-    Thread::WXExecFromWriteSetter wx_exec;\n@@ -1276,1 +1266,0 @@\n-    Thread::WXExecFromWriteSetter wx_exec;\n@@ -1286,1 +1275,0 @@\n-    Thread::WXExecFromWriteSetter wx_exec;\n@@ -1296,1 +1284,0 @@\n-    Thread::WXExecFromWriteSetter wx_exec;\n@@ -1346,1 +1333,0 @@\n-  Thread::WXExecFromWriteSetter wx_exec;\n@@ -1358,1 +1344,0 @@\n-    Thread::WXWriteFromExecSetter wx_write;\n@@ -1424,1 +1409,0 @@\n-  Thread::WXExecFromWriteSetter wx_exec;\n@@ -1497,1 +1481,0 @@\n-  Thread::WXExecFromWriteSetter wx_exec;\n@@ -1581,1 +1564,0 @@\n-  Thread::WXExecFromWriteSetter wx_exec;\n@@ -1612,1 +1594,0 @@\n-  Thread::WXExecFromWriteSetter wx_exec;\n@@ -1833,1 +1814,0 @@\n-  Thread::WXExecFromWriteSetter wx_exec;\n@@ -1852,1 +1832,0 @@\n-    Thread::WXExecFromWriteSetter wx_exec;\n@@ -1863,1 +1842,0 @@\n-    Thread::WXExecFromWriteSetter wx_exec;\n@@ -1874,1 +1852,0 @@\n-    Thread::WXExecFromWriteSetter wx_exec;\n@@ -1885,1 +1862,0 @@\n-    Thread::WXExecFromWriteSetter wx_exec;\n@@ -1896,1 +1872,0 @@\n-    Thread::WXExecFromWriteSetter wx_exec;\n@@ -1907,1 +1882,0 @@\n-  Thread::WXExecFromWriteSetter wx_exec;\n@@ -2120,1 +2094,0 @@\n-  Thread::WXExecFromWriteSetter wx_exec;\n@@ -2152,1 +2125,0 @@\n-  Thread::WXExecFromWriteSetter wx_exec;\n@@ -2158,1 +2130,0 @@\n-    Thread::WXExecVerifier wx_exec;\n@@ -2179,1 +2150,0 @@\n-  Thread::WXExecFromWriteSetter wx_exec;\n@@ -2201,1 +2171,0 @@\n-  Thread::WXExecFromWriteSetter wx_exec;\n@@ -2335,1 +2304,0 @@\n-  Thread::WXExecFromWriteSetter wx_exec;\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":0,"deletions":32,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -34,1 +34,2 @@\n-  ClearPendingJniExcCheck _clearCheck(env);\n+  ClearPendingJniExcCheck _clearCheck(env); \\\n+  MACOS_AARCH64_ONLY(ThreadWXEnable _wx(WXWrite, thread));\n","filename":"src\/hotspot\/share\/prims\/whitebox.inline.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -76,0 +76,1 @@\n+#include \"runtime\/threadWXSetters.hpp\"\n@@ -2458,0 +2459,3 @@\n+  \/\/ Enable WXWrite: current function is called from methods compiled by C2 directly\n+  MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXWrite, thread));\n+\n@@ -2466,1 +2470,0 @@\n-  Thread::WXWriteFromExecSetter wx_write;\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+#include \"runtime\/threadWXSetters.hpp\"\n@@ -292,1 +293,0 @@\n-  Thread::WXWriteVerifier _wx_write;\n@@ -294,1 +294,1 @@\n-  ThreadInVMfromJavaNoAsyncException(JavaThread* thread) : ThreadStateTransition(thread), _wx_write() {\n+  ThreadInVMfromJavaNoAsyncException(JavaThread* thread) : ThreadStateTransition(thread) {\n@@ -339,0 +339,1 @@\n+  MACOS_AARCH64_ONLY(ThreadWXEnable __wx(WXWrite));                  \\\n@@ -361,1 +362,1 @@\n-    Thread::WXWriteFromExecSetter __wx_write;                        \\\n+    MACOS_AARCH64_ONLY(ThreadWXEnable __wx(WXWrite, thread));        \\\n@@ -388,1 +389,1 @@\n-    Thread::WXWriteFromExecSetter __wx_write;                        \\\n+    MACOS_AARCH64_ONLY(ThreadWXEnable __wx(WXWrite, thread));        \\\n@@ -397,1 +398,1 @@\n-    Thread::WXWriteFromExecSetter __wx_write;                        \\\n+    MACOS_AARCH64_ONLY(ThreadWXEnable __wx(WXWrite, thread));        \\\n@@ -427,1 +428,1 @@\n-    Thread::WXWriteFromExecSetter __wx_write;                        \\\n+    MACOS_AARCH64_ONLY(ThreadWXEnable __wx(WXWrite, thread));        \\\n@@ -438,1 +439,0 @@\n-    Thread::WXWriteFromExecSetter __wx_write;                        \\\n@@ -453,1 +453,1 @@\n-    Thread::WXWriteFromExecSetter __wx_write;                        \\\n+    MACOS_AARCH64_ONLY(ThreadWXEnable __wx(WXWrite, thread));        \\\n@@ -463,1 +463,1 @@\n-    Thread::WXWriteFromExecSetter __wx_write;                        \\\n+    MACOS_AARCH64_ONLY(ThreadWXEnable __wx(WXWrite, thread));        \\\n@@ -473,1 +473,0 @@\n-    Thread::WXWriteFromExecSetter __wx_write;                        \\\n","filename":"src\/hotspot\/share\/runtime\/interfaceSupport.inline.hpp","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -112,1 +112,1 @@\n-  Thread::enable_wx_from_write(WXExec);\n+  MACOS_AARCH64_ONLY(_thread->enable_wx(WXExec));\n@@ -119,1 +119,1 @@\n-  Thread::enable_wx_from_exec(WXWrite);\n+  MACOS_AARCH64_ONLY(_thread->enable_wx(WXWrite));\n","filename":"src\/hotspot\/share\/runtime\/javaCalls.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -934,5 +934,4 @@\n-  \/\/ If the JVM is running in W^X mode, enable write or execute access to\n-  \/\/ writeable and executable pages. No-op otherwise.\n-  static inline void current_thread_enable_wx(WXMode mode) {\n-    current_thread_enable_wx_impl(mode);\n-  }\n+#if defined(__APPLE__) && defined(AARCH64)\n+  \/\/ Enables write or execute access to writeable and executable pages.\n+  static void current_thread_enable_wx(WXMode mode);\n+#endif \/\/ __APPLE__ && AARCH64\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -68,0 +68,1 @@\n+#include \"runtime\/threadWXSetters.hpp\"\n@@ -761,1 +762,2 @@\n-  Thread::WXWriteFromExecSetter wx_write;\n+  \/\/ Enable WXWrite: the function is called implicitly from java code.\n+  MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXWrite, thread));\n","filename":"src\/hotspot\/share\/runtime\/safepoint.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -538,1 +538,0 @@\n-  Thread::WXWriteFromExecSetter wx_write;\n@@ -1949,2 +1948,0 @@\n-  Thread::WXWriteFromExecSetter wx_write;\n-\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -289,1 +289,1 @@\n-  os::current_thread_enable_wx(WXExec);\n+  MACOS_AARCH64_ONLY(os::current_thread_enable_wx(WXExec));\n@@ -364,1 +364,1 @@\n-  os::current_thread_enable_wx(WXWrite);\n+  MACOS_AARCH64_ONLY(os::current_thread_enable_wx(WXWrite));\n","filename":"src\/hotspot\/share\/runtime\/stubRoutines.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"runtime\/threadWXSetters.hpp\"\n@@ -35,1 +36,1 @@\n-  Thread::WXExecFromWriteSetter wx_exec;\n+  MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXExec));\n@@ -40,1 +41,1 @@\n-  Thread::WXExecFromWriteSetter wx_exec;\n+  MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXExec));\n","filename":"src\/hotspot\/share\/runtime\/stubRoutines.inline.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -109,0 +109,1 @@\n+#include \"runtime\/threadWXSetters.hpp\"\n@@ -328,1 +329,1 @@\n-  DEBUG_ONLY(_wx_init = false);\n+  MACOS_AARCH64_ONLY(DEBUG_ONLY(_wx_init = false));\n@@ -392,1 +393,1 @@\n-  this->init_wx();\n+  MACOS_AARCH64_ONLY(this->init_wx());\n@@ -2513,1 +2514,2 @@\n-  Thread::WXWriteFromExecSetter wx_write;\n+  \/\/ Enable WXWrite: called directly from interpreter native wrapper.\n+  MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXWrite, thread));\n@@ -3451,1 +3453,1 @@\n-  os::current_thread_enable_wx(WXWrite);\n+  MACOS_AARCH64_ONLY(os::current_thread_enable_wx(WXWrite));\n@@ -3556,1 +3558,1 @@\n-  main_thread->init_wx();\n+  MACOS_AARCH64_ONLY(main_thread->init_wx());\n@@ -3991,1 +3993,0 @@\n-      Thread::WXExecFromWriteSetter wx_exec;\n@@ -4011,1 +4012,0 @@\n-      Thread::WXExecFromWriteSetter wx_exec;\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -841,3 +841,3 @@\n-private:\n-#ifdef ASSERT\n-  bool _wx_init;\n+#if defined(__APPLE__) && defined(AARCH64)\n+ private:\n+  DEBUG_ONLY(bool _wx_init);\n@@ -845,70 +845,4 @@\n-  static inline void verify_wx_init(WXMode state) {\n-    Thread* current = Thread::current();\n-    assert(!current->_wx_init, \"second init\");\n-    current->_wx_init = true;\n-    current->_wx_state = state;\n-  }\n-  static inline void verify_wx_transition(WXMode from, WXMode to) {\n-    Thread* current = Thread::current();\n-    assert(current->_wx_init, \"no init\");\n-    assert(current->_wx_state == from, \"wrong state\");\n-    current->_wx_init = true;\n-    current->_wx_state = to;\n-  }\n-  static inline void verify_wx_state(WXMode now) {\n-    Thread* current = Thread::current();\n-    assert(current->_wx_init, \"no init\");\n-    assert(current->_wx_state == now, \"wrong state\");\n-  }\n-#else\n-  static inline void verify_wx_init(WXMode state) { }\n-  static inline void verify_wx_transition(WXMode from, WXMode to) { }\n-  static inline void verify_wx_state(WXMode now) { }\n-#endif \/\/ ASSERT\n-public:\n-  void init_wx() {\n-    WXMode init_mode = WXWrite;\n-    verify_wx_init(init_mode);\n-    os::current_thread_enable_wx(init_mode);\n-  }\n-  static inline void enable_wx_from_write(WXMode to) {\n-    verify_wx_transition(WXWrite, to);\n-    os::current_thread_enable_wx(to);\n-  }\n-  static inline void enable_wx_from_exec(WXMode to) {\n-    verify_wx_transition(WXExec, to);\n-    os::current_thread_enable_wx(to);\n-  }\n-\n-  class WXWriteFromExecSetter {\n-  public:\n-    WXWriteFromExecSetter() {\n-      enable_wx_from_exec(WXWrite);\n-    }\n-    ~WXWriteFromExecSetter() {\n-      enable_wx_from_write(WXExec);\n-    }\n-  };\n-\n-  class WXExecFromWriteSetter {\n-  public:\n-    WXExecFromWriteSetter() {\n-      enable_wx_from_write(WXExec);\n-    }\n-    ~WXExecFromWriteSetter() {\n-      enable_wx_from_exec(WXWrite);\n-    }\n-  };\n-\n-  class WXWriteVerifier {\n-  public:\n-    WXWriteVerifier() {\n-      verify_wx_state(WXWrite);\n-    }\n-  };\n-  class WXExecVerifier {\n-  public:\n-    WXExecVerifier() {\n-      verify_wx_state(WXExec);\n-    }\n-  };\n+ public:\n+  void init_wx();\n+  WXMode enable_wx(WXMode new_state);\n+#endif \/\/ __APPLE__ && AARCH64\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":7,"deletions":73,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -97,0 +97,21 @@\n+#if defined(__APPLE__) && defined(AARCH64)\n+inline void Thread::init_wx() {\n+  assert(this == Thread::current(), \"should only be called for current thread\");\n+  assert(!_wx_init, \"second init\");\n+  _wx_state = WXWrite;\n+  os::current_thread_enable_wx(_wx_state);\n+  DEBUG_ONLY(_wx_init = true);\n+}\n+\n+inline WXMode Thread::enable_wx(WXMode new_state) {\n+  assert(this == Thread::current(), \"should only be called for current thread\");\n+  assert(_wx_init, \"should be inited\");\n+  WXMode old = _wx_state;\n+  if (_wx_state != new_state) {\n+    _wx_state = new_state;\n+    os::current_thread_enable_wx(new_state);\n+  }\n+  return old;\n+}\n+#endif \/\/ __APPLE__ && AARCH64\n+\n","filename":"src\/hotspot\/share\/runtime\/thread.inline.hpp","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_RUNTIME_THREADWXSETTERS_HPP\n+#define SHARE_RUNTIME_THREADWXSETTERS_HPP\n+\n+#include \"runtime\/thread.inline.hpp\"\n+\n+#if defined(__APPLE__) && defined(AARCH64)\n+class ThreadWXEnable  {\n+  Thread* _thread;\n+  WXMode _old_mode;\n+public:\n+  ThreadWXEnable(WXMode new_mode, Thread* thread = NULL) :\n+    _thread(thread ? thread : Thread::current()),\n+    _old_mode(_thread->enable_wx(new_mode))\n+  { }\n+  ~ThreadWXEnable() {\n+    _thread->enable_wx(_old_mode);\n+  }\n+};\n+#endif \/\/ __APPLE__ && AARCH64\n+\n+#endif \/\/ SHARE_RUNTIME_THREADWXSETTERS_HPP\n+\n","filename":"src\/hotspot\/share\/runtime\/threadWXSetters.hpp","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -1092,1 +1092,0 @@\n-  Thread::WXExecFromWriteSetter wx_exec;\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -572,0 +572,2 @@\n+#define MACOS_AARCH64_ONLY(x) MACOS_ONLY(AARCH64_ONLY(x))\n+\n","filename":"src\/hotspot\/share\/utilities\/macros.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -99,2 +99,0 @@\n-  \/\/ missing transition to vm state\n-  Thread::WXWriteFromExecSetter wx_write;\n","filename":"test\/hotspot\/gtest\/gc\/shared\/test_oopStorage_parperf.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,0 +41,2 @@\n+#include \"runtime\/thread.inline.hpp\"\n+\n@@ -94,1 +96,8 @@\n-  return JNI_CreateJavaVM(&jvm, (void**)&env, &args);\n+  int ret = JNI_CreateJavaVM(&jvm, (void**)&env, &args);\n+  if (ret == JNI_OK) {\n+    \/\/ CreateJavaVM leaves WXExec context, while gtests\n+    \/\/ calls internal functions assuming running in WXWwrite.\n+    \/\/ Switch to WXWrite once for all test cases.\n+    MACOS_AARCH64_ONLY(Thread::current()->enable_wx(WXWrite));\n+  }\n+  return ret;\n","filename":"test\/hotspot\/gtest\/gtestMain.cpp","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -35,6 +35,0 @@\n-  const char* current_line_buffer(LogStream& ls) {\n-    return ls._current_line.buffer();\n-  }\n-  void current_line_reset(LogStream& ls) {\n-    ls._current_line.reset();\n-  }\n@@ -90,1 +84,1 @@\n-      const char* const line_buffer = current_line_buffer(ls);\n+      const char* const line_buffer = ls._current_line.buffer();\n@@ -106,1 +100,1 @@\n-  const char* const line_buffer = current_line_buffer(ls);\n+  const char* const line_buffer = ls._current_line.buffer();\n@@ -109,1 +103,1 @@\n-  current_line_reset(ls);\n+  ls._current_line.reset();\n","filename":"test\/hotspot\/gtest\/logging\/test_logStream.cpp","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -30,3 +30,0 @@\n-\/\/ For Thread definition\n-#include \"runtime\/thread.hpp\"\n-\n@@ -82,12 +79,1 @@\n-#define TEST_VM(category, name)                                     \\\n-  class category ## _  ## name ## _vm : public ::testing::Test {    \\\n-  public:                                                           \\\n-    static void do_test();                                          \\\n-  };                                                                \\\n-                                                                    \\\n-  GTEST_TEST(category, CONCAT(name, _vm)) {                         \\\n-    Thread::WXWriteFromExecSetter wx_write;                         \\\n-    category ## _ ## name ## _vm::do_test();                        \\\n-  }                                                                 \\\n-                                                                    \\\n-  void category ## _ ## name ## _vm::do_test()\n+#define TEST_VM(category, name) GTEST_TEST(category, CONCAT(name, _vm))\n@@ -96,20 +82,2 @@\n-  class test_fixture ## _  ## name ## _vm_f : public test_fixture { \\\n-  public:                                                           \\\n-    void SetUp() {                                                  \\\n-      Thread::WXWriteFromExecSetter wx_write;                       \\\n-      test_fixture::SetUp();                                        \\\n-    }                                                               \\\n-  protected:                                                        \\\n-    void do_test();                                                 \\\n-  };                                                                \\\n-                                                                    \\\n-  GTEST_TEST_(test_fixture ## _ ## name,                            \\\n-      name ## _vm,                                                  \\\n-      test_fixture ## _ ## name ## _vm_f,                           \\\n-      ::testing::internal::GetTypeId<                               \\\n-        test_fixture ## _ ## name ## _vm_f>()) {                    \\\n-    Thread::WXWriteFromExecSetter wx_write;                         \\\n-    do_test();                                                      \\\n-  }                                                                 \\\n-                                                                    \\\n-  void test_fixture ## _ ## name ## _vm_f::do_test()\n+  GTEST_TEST_(test_fixture, name ## _vm, test_fixture,              \\\n+              ::testing::internal::GetTypeId<test_fixture>())\n@@ -121,1 +89,0 @@\n-    Thread::WXWriteFromExecSetter wx_write;                         \\\n@@ -141,1 +108,0 @@\n-    Thread::WXWriteFromExecSetter wx_write;                         \\\n@@ -164,1 +130,0 @@\n-    Thread::WXWriteFromExecSetter wx_write;                         \\\n","filename":"test\/hotspot\/gtest\/unittest.hpp","additions":3,"deletions":38,"binary":false,"changes":41,"status":"modified"}]}