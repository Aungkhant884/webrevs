{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-#include \"classfile\/systemDictionary.hpp\"\n@@ -195,0 +194,9 @@\n+ATTRIBUTE_PRINTF(6, 7)\n+static void report_and_die(Thread* thread, void* context, const char* filename, int lineno, const char* message,\n+                             const char* detail_fmt, ...) {\n+  va_list va;\n+  va_start(va, detail_fmt);\n+  VMError::report_and_die(thread, context, filename, lineno, message, detail_fmt, va);\n+  va_end(va);\n+}\n+\n@@ -210,5 +218,0 @@\n-    if (StubRoutines::is_safefetch_fault(pc)) {\n-      os::Posix::ucontext_set_pc(uc, StubRoutines::continuation_for_safefetch_fault(pc));\n-      return true;\n-    }\n-\n@@ -274,0 +277,5 @@\n+        \/\/ Pull a pointer to the error message out of the instruction\n+        \/\/ stream.\n+        const uint64_t *detail_msg_ptr\n+          = (uint64_t*)(pc + NativeInstruction::instruction_size);\n+        const char *detail_msg = (const char *)*detail_msg_ptr;\n@@ -279,3 +287,4 @@\n-        return false;\n-      }\n-      else\n+        \/\/ End life with a fatal error, message and detail message and the context.\n+        \/\/ Note: no need to do any post-processing here (e.g. signal chaining)\n+        report_and_die(thread, uc, NULL, 0, msg, \"%s\", detail_msg);\n+        ShouldNotReachHere();\n@@ -283,1 +292,1 @@\n-      if (sig == SIGFPE  &&\n+      } else if (sig == SIGFPE &&\n@@ -291,5 +300,0 @@\n-#ifdef __APPLE__\n-      } else if (sig == SIGFPE && info->si_code == FPE_NOOP) {\n-        Unimplemented();\n-#endif \/* __APPLE__ *\/\n-\n","filename":"src\/hotspot\/os_cpu\/bsd_aarch64\/os_bsd_aarch64.cpp","additions":20,"deletions":16,"binary":false,"changes":36,"status":"modified"}]}