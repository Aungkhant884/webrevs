{"files":[{"patch":"@@ -1694,1 +1694,1 @@\n-      if (n->in(2)->is_top()) {\n+      if (type(n->in(2)) == Type::TOP) {\n@@ -1704,1 +1704,1 @@\n-      if (n->in(2)->is_top()) {\n+      if (type(n->in(2)) == Type::TOP) {\n","filename":"src\/hotspot\/share\/opto\/phaseX.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2022, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8283451\n+ * @summary C2: assert(_base == Long) failed: Not a Long\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+StressLCM -XX:+StressGCM -XX:+StressCCP -XX:+StressIGVN\n+ *                   -Xcomp -XX:CompileOnly=TestModDivTopInput -XX:-TieredCompilation -XX:StressSeed=87628618 TestModDivTopInput\n+ *\/\n+\n+public class TestModDivTopInput {\n+\n+    public static final int N = 400;\n+\n+    public static float fFld=-2.447F;\n+    public long lFld=-189L;\n+\n+    public void mainTest(String[] strArr1) {\n+\n+        int i18, i20=-14, i21, iArr2[]=new int[N];\n+        boolean b2=true;\n+        double d2;\n+        long l;\n+\n+        init(iArr2, -13265);\n+\n+        for (i18 = 13; i18 < 315; ++i18) {\n+            if (b2) continue;\n+            for (d2 = 5; d2 < 83; d2++) {\n+            }\n+            for (i21 = 4; i21 < 83; i21++) {\n+                for (l = 1; 2 > l; l++) {\n+                }\n+                b2 = b2;\n+                lFld %= (i20 | 1);\n+                i20 = (int)fFld;\n+                i20 += (int)d2;\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] strArr) {\n+        TestModDivTopInput _instance = new TestModDivTopInput();\n+        for (int i = 0; i < 10; i++ ) {\n+            _instance.mainTest(strArr);\n+        }\n+    }\n+\n+    static void init(int[] arr, int v) {\n+        for (int i = 0; i < arr.length; i++) {\n+            arr[i] = v;\n+        }\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestModDivTopInput.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"}]}