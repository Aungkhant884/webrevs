{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -303,2 +303,2 @@\n-  float major_pause_old_slope() { return _major_pause_old_estimator->slope(); }\n-  float major_pause_young_slope() {\n+  double major_pause_old_slope() { return _major_pause_old_estimator->slope(); }\n+  double major_pause_young_slope() {\n@@ -307,1 +307,1 @@\n-  float major_collection_slope() { return _major_collection_estimator->slope();}\n+  double major_collection_slope() { return _major_collection_estimator->slope();}\n","filename":"src\/hotspot\/share\/gc\/parallel\/psAdaptiveSizePolicy.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -370,1 +370,1 @@\n-  float minor_pause_young_slope() {\n+  double minor_pause_young_slope() {\n@@ -374,2 +374,2 @@\n-  float minor_collection_slope() { return _minor_collection_estimator->slope();}\n-  float major_collection_slope() { return _major_collection_estimator->slope();}\n+  double minor_collection_slope() { return _minor_collection_estimator->slope();}\n+  double major_collection_slope() { return _major_collection_estimator->slope();}\n@@ -377,1 +377,1 @@\n-  float minor_pause_old_slope() {\n+  double minor_pause_old_slope() {\n","filename":"src\/hotspot\/share\/gc\/shared\/adaptiveSizePolicy.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -89,1 +89,1 @@\n-  float new_dev = compute_adaptive_average(fabsd(new_sample - new_avg),\n+  float new_dev = compute_adaptive_average(fabs(new_sample - new_avg),\n@@ -92,1 +92,1 @@\n-  set_padded_average(new_avg + padding() * new_dev);\n+  set_padded_average(new_avg + (float)padding() * new_dev);\n@@ -103,1 +103,1 @@\n-    float new_dev = compute_adaptive_average(fabsd(new_sample - new_avg),\n+    float new_dev = compute_adaptive_average(fabs(new_sample - new_avg),\n@@ -108,1 +108,1 @@\n-  set_padded_average(new_avg + padding() * deviation());\n+  set_padded_average(new_avg + (float)padding() * deviation());\n@@ -121,2 +121,2 @@\n-  _mean_x.sample(x);\n-  _mean_y.sample(y);\n+  _mean_x.sample((float)x);  \/\/ Used to track generation sizes so casting to float should\n+  _mean_y.sample((float)y);  \/\/ not lose precision for valid samples.\n","filename":"src\/hotspot\/share\/gc\/shared\/gcUtil.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -107,1 +107,1 @@\n-    return (100.0F - weight) * avg \/ 100.0F + weight * sample \/ 100.0F;\n+    return (100.0F - (float)weight) * avg \/ 100.0F + (float)weight * sample \/ 100.0F;\n","filename":"src\/hotspot\/share\/gc\/shared\/gcUtil.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -136,1 +136,1 @@\n-  return sum() \/ (double) contributing_threads;\n+  return (double) sum() \/ (double) contributing_threads;\n@@ -181,1 +181,1 @@\n-    double avg = sum \/ (double) contributing_threads;\n+    double avg = (double) sum \/ (double) contributing_threads;\n","filename":"src\/hotspot\/share\/gc\/shared\/workerDataArray.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}