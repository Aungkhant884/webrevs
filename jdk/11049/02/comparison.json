{"files":[{"patch":"@@ -48,1 +48,1 @@\n-                 \"test23\"})\n+                 \"test23\", \"test24\", \"test25\"})\n@@ -66,25 +66,27 @@\n-        Asserts.assertEQ(((a+a) + (a+a))  , additions(a));\n-        Asserts.assertEQ(0                , xMinusX(a));\n-        Asserts.assertEQ(a + 1 + 2        , test1(a));\n-        Asserts.assertEQ((a + 2021) + b   , test2(a, b));\n-        Asserts.assertEQ(a + (b + 2021)   , test3(a, b));\n-        Asserts.assertEQ((1 - a) + 2      , test4(a));\n-        Asserts.assertEQ((a - b) + (c - d), test5(a, b, c, d));\n-        Asserts.assertEQ((a - b) + (b + c), test6(a, b, c));\n-        Asserts.assertEQ((a - b) + (c + b), test7(a, b, c));\n-        Asserts.assertEQ((a - b) + (b - c), test8(a, b, c));\n-        Asserts.assertEQ((a - b) + (c - a), test9(a, b, c));\n-        Asserts.assertEQ(a + (0 - b)      , test10(a, b));\n-        Asserts.assertEQ((0 - b) + a      , test11(a, b));\n-        Asserts.assertEQ((a - b) + b      , test12(a, b));\n-        Asserts.assertEQ(b + (a - b)      , test13(a, b));\n-        Asserts.assertEQ(a + 0            , test14(a));\n-        Asserts.assertEQ(0 + a            , test15(a));\n-        Asserts.assertEQ(a*b + a*c        , test16(a, b, c));\n-        Asserts.assertEQ(a*b + b*c        , test17(a, b, c));\n-        Asserts.assertEQ(a*c + b*c        , test18(a, b, c));\n-        Asserts.assertEQ(a*b + c*a        , test19(a, b, c));\n-        Asserts.assertEQ((a - b) + 210    , test20(a, b));\n-        Asserts.assertEQ((a - b) + 190    , test21(a, b));\n-        Asserts.assertEQ((a - b) + 210    , test22(a, b));\n-        Asserts.assertEQ((a - b) + 190    , test23(a, b));\n+        Asserts.assertEQ(((a+a) + (a+a))                , additions(a));\n+        Asserts.assertEQ(0                              , xMinusX(a));\n+        Asserts.assertEQ(a + 1 + 2                      , test1(a));\n+        Asserts.assertEQ((a + 2021) + b                 , test2(a, b));\n+        Asserts.assertEQ(a + (b + 2021)                 , test3(a, b));\n+        Asserts.assertEQ((1 - a) + 2                    , test4(a));\n+        Asserts.assertEQ((a - b) + (c - d)              , test5(a, b, c, d));\n+        Asserts.assertEQ((a - b) + (b + c)              , test6(a, b, c));\n+        Asserts.assertEQ((a - b) + (c + b)              , test7(a, b, c));\n+        Asserts.assertEQ((a - b) + (b - c)              , test8(a, b, c));\n+        Asserts.assertEQ((a - b) + (c - a)              , test9(a, b, c));\n+        Asserts.assertEQ(a + (0 - b)                    , test10(a, b));\n+        Asserts.assertEQ((0 - b) + a                    , test11(a, b));\n+        Asserts.assertEQ((a - b) + b                    , test12(a, b));\n+        Asserts.assertEQ(b + (a - b)                    , test13(a, b));\n+        Asserts.assertEQ(a + 0                          , test14(a));\n+        Asserts.assertEQ(0 + a                          , test15(a));\n+        Asserts.assertEQ(a*b + a*c                      , test16(a, b, c));\n+        Asserts.assertEQ(a*b + b*c                      , test17(a, b, c));\n+        Asserts.assertEQ(a*c + b*c                      , test18(a, b, c));\n+        Asserts.assertEQ(a*b + c*a                      , test19(a, b, c));\n+        Asserts.assertEQ((a - b) + 210                  , test20(a, b));\n+        Asserts.assertEQ((a - b) + 190                  , test21(a, b));\n+        Asserts.assertEQ((a - b) + 210                  , test22(a, b));\n+        Asserts.assertEQ((a - b) + 190                  , test23(a, b));\n+        Asserts.assertEQ(Math.max(a, b) + Math.min(a, b), test24(a, b));\n+        Asserts.assertEQ(Math.min(a, b) + Math.max(a, b), test25(a, b));\n@@ -296,0 +298,16 @@\n+\n+    @Test\n+    @IR(failOn = { IRNode.MAX, IRNode.MIN })\n+    @IR(counts = { IRNode.ADD, \"1\" })\n+    \/\/ Checks Math.max(a, b) + Math.min(a, b) => a + b\n+    public int test24(int a, int b) {\n+        return Math.max(a, b) + Math.min(a, b);\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.MAX, IRNode.MIN })\n+    @IR(counts = { IRNode.ADD, \"1\" })\n+    \/\/ Checks Math.min(a, b) + Math.max(a, b) => a + b\n+    public int test25(int a, int b) {\n+        return Math.min(a, b) + Math.max(a, b);\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/AddINodeIdealizationTests.java","additions":44,"deletions":26,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -47,1 +47,2 @@\n-                 \"test20\", \"test21\", \"test22\"})\n+                 \"test20\", \"test21\", \"test22\",\n+                 \"test23\", \"test24\"})\n@@ -65,24 +66,26 @@\n-        Asserts.assertEQ(((a+a) + (a+a))             , additions(a));\n-        Asserts.assertEQ(0L                          , xMinusX(a));\n-        Asserts.assertEQ(a + 1 + 2                   , test1(a));\n-        Asserts.assertEQ((a + 2021) + b              , test2(a, b));\n-        Asserts.assertEQ(a + (b + 2021)              , test3(a, b));\n-        Asserts.assertEQ((1 - a) + 2                 , test4(a));\n-        Asserts.assertEQ((a - b) + (c - d)           , test5(a, b, c, d));\n-        Asserts.assertEQ((a - b) + (b + c)           , test6(a, b, c));\n-        Asserts.assertEQ((a - b) + (c + b)           , test7(a, b, c));\n-        Asserts.assertEQ((a - b) + (c - a)           , test8(a, b, c));\n-        Asserts.assertEQ(a + (0 - b)                 , test9(a, b));\n-        Asserts.assertEQ((0 - b) + a                 , test10(a, b));\n-        Asserts.assertEQ((a - b) + b                 , test11(a, b));\n-        Asserts.assertEQ(b + (a - b)                 , test12(a, b));\n-        Asserts.assertEQ(a + 0                       , test13(a));\n-        Asserts.assertEQ(0 + a                       , test14(a));\n-        Asserts.assertEQ(a*b + a*c                   , test15(a, b, c));\n-        Asserts.assertEQ(a*b + b*c                   , test16(a, b, c));\n-        Asserts.assertEQ(a*c + b*c                   , test17(a, b, c));\n-        Asserts.assertEQ(a*b + c*a                   , test18(a, b, c));\n-        Asserts.assertEQ((a - b) + 123_456_789_123L  , test19(a, b));\n-        Asserts.assertEQ((a - b) + -123_456_788_877L , test20(a, b));\n-        Asserts.assertEQ((a - b) + 123_456_789_123L  , test21(a, b));\n-        Asserts.assertEQ((a - b) + -123_456_788_877L , test22(a, b));\n+        Asserts.assertEQ(((a+a) + (a+a))                , additions(a));\n+        Asserts.assertEQ(0L                             , xMinusX(a));\n+        Asserts.assertEQ(a + 1 + 2                      , test1(a));\n+        Asserts.assertEQ((a + 2021) + b                 , test2(a, b));\n+        Asserts.assertEQ(a + (b + 2021)                 , test3(a, b));\n+        Asserts.assertEQ((1 - a) + 2                    , test4(a));\n+        Asserts.assertEQ((a - b) + (c - d)              , test5(a, b, c, d));\n+        Asserts.assertEQ((a - b) + (b + c)              , test6(a, b, c));\n+        Asserts.assertEQ((a - b) + (c + b)              , test7(a, b, c));\n+        Asserts.assertEQ((a - b) + (c - a)              , test8(a, b, c));\n+        Asserts.assertEQ(a + (0 - b)                    , test9(a, b));\n+        Asserts.assertEQ((0 - b) + a                    , test10(a, b));\n+        Asserts.assertEQ((a - b) + b                    , test11(a, b));\n+        Asserts.assertEQ(b + (a - b)                    , test12(a, b));\n+        Asserts.assertEQ(a + 0                          , test13(a));\n+        Asserts.assertEQ(0 + a                          , test14(a));\n+        Asserts.assertEQ(a*b + a*c                      , test15(a, b, c));\n+        Asserts.assertEQ(a*b + b*c                      , test16(a, b, c));\n+        Asserts.assertEQ(a*c + b*c                      , test17(a, b, c));\n+        Asserts.assertEQ(a*b + c*a                      , test18(a, b, c));\n+        Asserts.assertEQ((a - b) + 123_456_789_123L     , test19(a, b));\n+        Asserts.assertEQ((a - b) + -123_456_788_877L    , test20(a, b));\n+        Asserts.assertEQ((a - b) + 123_456_789_123L     , test21(a, b));\n+        Asserts.assertEQ((a - b) + -123_456_788_877L    , test22(a, b));\n+        Asserts.assertEQ(Math.max(a, b) + Math.min(a, b), test23(a, b));\n+        Asserts.assertEQ(Math.min(a, b) + Math.max(a, b), test24(a, b));\n@@ -290,0 +293,16 @@\n+\n+    @Test\n+    @IR(failOn = { IRNode.MAX, IRNode.MIN })\n+    @IR(counts = { IRNode.ADD, \"1\" })\n+    \/\/ Checks Math.max(a, b) + Math.min(a, b) => a + b\n+    public long test23(long a, long b) {\n+        return Math.max(a, b) + Math.min(a, b);\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.MAX, IRNode.MIN })\n+    @IR(counts = { IRNode.ADD, \"1\" })\n+    \/\/ Checks Math.min(a, b) + Math.max(a, b) => a + b\n+    public long test24(long a, long b) {\n+        return Math.min(a, b) + Math.max(a, b);\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/AddLNodeIdealizationTests.java","additions":44,"deletions":25,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package compiler.c2.irTests;\n+\n+import jdk.test.lib.Asserts;\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @bug 8297384\n+ * @summary Test that Ideal transformations of AndINode* are being performed as expected.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.AndINodeIdealizationTests\n+ *\/\n+public class AndINodeIdealizationTests {\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Run(test = { \"test1\" })\n+    public void runMethod() {\n+        int a = RunInfo.getRandom().nextInt();\n+\n+        int min = Integer.MIN_VALUE;\n+        int max = Integer.MAX_VALUE;\n+\n+        assertResult(0);\n+        assertResult(a);\n+        assertResult(min);\n+        assertResult(max);\n+    }\n+\n+    @DontCompile\n+    public void assertResult(int a) {\n+        Asserts.assertEQ((0 - a) & 1, test1(a));\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.SUB })\n+    @IR(counts = { IRNode.AND, \"1\" })\n+    \/\/ Checks (0 - x) & 1 => x & 1\n+    public int test1(int x) {\n+        return (0 - x) & 1;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/AndINodeIdealizationTests.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package compiler.c2.irTests;\n+\n+import jdk.test.lib.Asserts;\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @bug 8297384\n+ * @summary Test that Ideal transformations of LShiftINode* are being performed as expected.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.LShiftINodeIdealizationTests\n+ *\/\n+public class LShiftINodeIdealizationTests {\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Run(test = { \"test1\", \"test2\" })\n+    public void runMethod() {\n+        int a = RunInfo.getRandom().nextInt();\n+\n+        int min = Integer.MIN_VALUE;\n+        int max = Integer.MAX_VALUE;\n+\n+        assertResult(0);\n+        assertResult(a);\n+        assertResult(min);\n+        assertResult(max);\n+    }\n+\n+    @DontCompile\n+    public void assertResult(int a) {\n+        Asserts.assertEQ((a >> 2022) << 2022, test1(a));\n+        Asserts.assertEQ((a >>> 2022) << 2022, test2(a));\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.LSHIFT, IRNode.RSHIFT })\n+    @IR(counts = { IRNode.AND, \"1\" })\n+    \/\/ Checks (x >> 2022) << 2022 => x & C where C = -(1 << 6)\n+    public int test1(int x) {\n+        return (x >> 2022) << 2022;\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.LSHIFT, IRNode.URSHIFT })\n+    @IR(counts = { IRNode.AND, \"1\" })\n+    \/\/ Checks (x >>> 2022) << 2022 => x & C where C = -(1 << 6)\n+    public int test2(int x) {\n+        return (x >>> 2022) << 2022;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/LShiftINodeIdealizationTests.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -43,1 +43,2 @@\n-                 \"powerTwoAgain\", \"powerTwoPlusOne\", \"powerTwoMinusOne\"})\n+                 \"powerTwoAgain\", \"powerTwoPlusOne\", \"powerTwoMinusOne\",\n+                 \"negativeCancelledOut\", \"maxMin\"})\n@@ -59,12 +60,14 @@\n-        Asserts.assertEQ((a * 13) * 14 , combineConstants(a));\n-        Asserts.assertEQ((a * 13) * b  , moveConstants(a, b));\n-        Asserts.assertEQ(a * (b * 13)  , moveConstantsAgain(a, b));\n-        Asserts.assertEQ(0 * a         , multiplyZero(a));\n-        Asserts.assertEQ(a * 0         , multiplyZeroAgain(a));\n-        Asserts.assertEQ((13 + a) * 14 , distribute(a));\n-        Asserts.assertEQ(1 * a         , identity(a));\n-        Asserts.assertEQ(a * 1         , identityAgain(a));\n-        Asserts.assertEQ(a * 64        , powerTwo(a));\n-        Asserts.assertEQ(a * (1025 - 1), powerTwoAgain(a));\n-        Asserts.assertEQ(a * (64 + 1)  , powerTwoPlusOne(a));\n-        Asserts.assertEQ(a * (64 - 1)  , powerTwoMinusOne(a));\n+        Asserts.assertEQ((a * 13) * 14                  , combineConstants(a));\n+        Asserts.assertEQ((a * 13) * b                   , moveConstants(a, b));\n+        Asserts.assertEQ(a * (b * 13)                   , moveConstantsAgain(a, b));\n+        Asserts.assertEQ(0 * a                          , multiplyZero(a));\n+        Asserts.assertEQ(a * 0                          , multiplyZeroAgain(a));\n+        Asserts.assertEQ((13 + a) * 14                  , distribute(a));\n+        Asserts.assertEQ(1 * a                          , identity(a));\n+        Asserts.assertEQ(a * 1                          , identityAgain(a));\n+        Asserts.assertEQ(a * 64                         , powerTwo(a));\n+        Asserts.assertEQ(a * (1025 - 1)                 , powerTwoAgain(a));\n+        Asserts.assertEQ(a * (64 + 1)                   , powerTwoPlusOne(a));\n+        Asserts.assertEQ(a * (64 - 1)                   , powerTwoMinusOne(a));\n+        Asserts.assertEQ((0 - a) * (0 - b)              , negativeCancelledOut(a, b));\n+        Asserts.assertEQ(Math.max(a, b) * Math.min(a, b), maxMin(a, b));\n@@ -166,0 +169,16 @@\n+\n+    @Test\n+    @IR(failOn = { IRNode.SUB })\n+    @IR(counts = { IRNode.MUL, \"1\" })\n+    \/\/ Checks (0 - x) * (0 - y) => x * y\n+    public int negativeCancelledOut(int x, int y) {\n+        return (0 - x) * (0 - y);\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.MAX, IRNode.MIN })\n+    @IR(counts = { IRNode.MUL, \"1\" })\n+    \/\/ Checks Math.max(x, y) * Math.min(x, y) => x * y\n+    public int maxMin(int x, int y) {\n+        return Math.max(x, y) * Math.min(x, y);\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/MulINodeIdealizationTests.java","additions":32,"deletions":13,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -43,1 +43,2 @@\n-                 \"powerTwoAgain\", \"powerTwoPlusOne\", \"powerTwoMinusOne\"})\n+                 \"powerTwoAgain\", \"powerTwoPlusOne\", \"powerTwoMinusOne\",\n+                 \"negativeCancelledOut\", \"maxMin\"})\n@@ -59,12 +60,14 @@\n-        Asserts.assertEQ((a * 13) * 14 * 15, combineConstants(a));\n-        Asserts.assertEQ((a * 13) * b      , moveConstants(a, b));\n-        Asserts.assertEQ(a * (b * 13)      , moveConstantsAgain(a, b));\n-        Asserts.assertEQ(0 * a             , multiplyZero(a));\n-        Asserts.assertEQ(a * 0             , multiplyZeroAgain(a));\n-        Asserts.assertEQ((13 + a) * 14     , distribute(a));\n-        Asserts.assertEQ(1 * a             , identity(a));\n-        Asserts.assertEQ(a * 1             , identityAgain(a));\n-        Asserts.assertEQ(a * 64            , powerTwo(a));\n-        Asserts.assertEQ(a * (1025 - 1)    , powerTwoAgain(a));\n-        Asserts.assertEQ(a * (64 + 1)      , powerTwoPlusOne(a));\n-        Asserts.assertEQ(a * (64 - 1)      , powerTwoMinusOne(a));\n+        Asserts.assertEQ((a * 13) * 14 * 15             , combineConstants(a));\n+        Asserts.assertEQ((a * 13) * b                   , moveConstants(a, b));\n+        Asserts.assertEQ(a * (b * 13)                   , moveConstantsAgain(a, b));\n+        Asserts.assertEQ(0 * a                          , multiplyZero(a));\n+        Asserts.assertEQ(a * 0                          , multiplyZeroAgain(a));\n+        Asserts.assertEQ((13 + a) * 14                  , distribute(a));\n+        Asserts.assertEQ(1 * a                          , identity(a));\n+        Asserts.assertEQ(a * 1                          , identityAgain(a));\n+        Asserts.assertEQ(a * 64                         , powerTwo(a));\n+        Asserts.assertEQ(a * (1025 - 1)                 , powerTwoAgain(a));\n+        Asserts.assertEQ(a * (64 + 1)                   , powerTwoPlusOne(a));\n+        Asserts.assertEQ(a * (64 - 1)                   , powerTwoMinusOne(a));\n+        Asserts.assertEQ((0 - a) * (0 - b)              , negativeCancelledOut(a, b));\n+        Asserts.assertEQ(Math.max(a, b) * Math.min(a, b), maxMin(a, b));\n@@ -166,0 +169,16 @@\n+\n+    @Test\n+    @IR(failOn = { IRNode.SUB })\n+    @IR(counts = { IRNode.MUL, \"1\" })\n+    \/\/ Checks (0 - x) * (0 - y) => x * y\n+    public long negativeCancelledOut(long x, long y) {\n+        return (0 - x) * (0 - y);\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.MAX, IRNode.MIN })\n+    @IR(counts = { IRNode.MUL, \"1\" })\n+    \/\/ Checks Math.max(x, y) * Math.min(x, y) => x * y\n+    public long maxMin(long x, long y) {\n+        return Math.max(x, y) * Math.min(x, y);\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/MulLNodeIdealizationTests.java","additions":32,"deletions":13,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package compiler.c2.irTests;\n+\n+import jdk.test.lib.Asserts;\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @bug 8297384\n+ * @summary Test that Ideal transformations of RotateLeftNode* are being performed as expected.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.RotateLeftNodeIntIdealizationTests\n+ *\/\n+public class RotateLeftNodeIntIdealizationTests {\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Run(test = { \"test1\" })\n+    public void runMethod() {\n+        int a = RunInfo.getRandom().nextInt();\n+\n+        int min = Integer.MIN_VALUE;\n+        int max = Integer.MAX_VALUE;\n+\n+        assertResult(0);\n+        assertResult(a);\n+        assertResult(min);\n+        assertResult(max);\n+    }\n+\n+    @DontCompile\n+    public void assertResult(int a) {\n+        Asserts.assertEQ(Integer.rotateLeft(a, 2022), test1(a));\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.ROTATE_LEFT })\n+    @IR(counts = { IRNode.ROTATE_RIGHT, \"1\" })\n+    \/\/ Checks Integer.rotateLeft(x, 2022) => Integer.rotateRight(x, C) where C = 32 - (2022 & 31)\n+    public int test1(int x) {\n+        return Integer.rotateLeft(x, 2022);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/RotateLeftNodeIntIdealizationTests.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package compiler.c2.irTests;\n+\n+import jdk.test.lib.Asserts;\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @bug 8297384\n+ * @summary Test that Ideal transformations of RotateLeftNode* are being performed as expected.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.RotateLeftNodeLongIdealizationTests\n+ *\/\n+public class RotateLeftNodeLongIdealizationTests {\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Run(test = { \"test1\" })\n+    public void runMethod() {\n+        long a = RunInfo.getRandom().nextInt();\n+\n+        long min = Long.MIN_VALUE;\n+        long max = Long.MAX_VALUE;\n+\n+        assertResult(0);\n+        assertResult(a);\n+        assertResult(min);\n+        assertResult(max);\n+    }\n+\n+    @DontCompile\n+    public void assertResult(long a) {\n+        Asserts.assertEQ(Long.rotateLeft(a, 2022), test1(a));\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.ROTATE_LEFT })\n+    @IR(counts = { IRNode.ROTATE_RIGHT, \"1\" })\n+    \/\/ Checks Long.rotateLeft(x, 2022) => Long.rotateRight(x, C) where C = 64 - (2022 & 63)\n+    public long test1(long x) {\n+        return Long.rotateLeft(x, 2022);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/RotateLeftNodeLongIdealizationTests.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package compiler.c2.irTests;\n+\n+import jdk.test.lib.Asserts;\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @bug 8297384\n+ * @summary Test that Ideal transformations of URShiftINode* are being performed as expected.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.URShiftINodeIdealizationTests\n+ *\/\n+public class URShiftINodeIdealizationTests {\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Run(test = { \"test1\", \"test2\" })\n+    public void runMethod() {\n+        int a = RunInfo.getRandom().nextInt();\n+\n+        int min = Integer.MIN_VALUE;\n+        int max = Integer.MAX_VALUE;\n+\n+        assertResult(0);\n+        assertResult(a);\n+        assertResult(min);\n+        assertResult(max);\n+    }\n+\n+    @DontCompile\n+    public void assertResult(int a) {\n+        Asserts.assertEQ((a << 2022) >>> 2022, test1(a));\n+        Asserts.assertEQ((a >> 2022) >>> 31, test2(a));\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.LSHIFT, IRNode.URSHIFT })\n+    @IR(counts = { IRNode.AND, \"1\" })\n+    \/\/ Checks (x << 2022) >>> 2022 => x & C where C = ((1 << (32 - 6)) - 1)\n+    public int test1(int x) {\n+        return (x << 2022) >>> 2022;\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.RSHIFT })\n+    @IR(counts = { IRNode.URSHIFT, \"1\" })\n+    \/\/ Checks (x >> 2022) >>> 31 => x >>> 31\n+    public int test2(int x) {\n+        return (x >> 2022) >>> 31;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/URShiftINodeIdealizationTests.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package compiler.c2.irTests;\n+\n+import jdk.test.lib.Asserts;\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @bug 8297384\n+ * @summary Test that Ideal transformations of URShiftLNode* are being performed as expected.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.URShiftLNodeIdealizationTests\n+ *\/\n+public class URShiftLNodeIdealizationTests {\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Run(test = { \"test1\", \"test2\" })\n+    public void runMethod() {\n+        long a = RunInfo.getRandom().nextInt();\n+\n+        long min = Long.MIN_VALUE;\n+        long max = Long.MAX_VALUE;\n+\n+        assertResult(0);\n+        assertResult(a);\n+        assertResult(min);\n+        assertResult(max);\n+    }\n+\n+    @DontCompile\n+    public void assertResult(long a) {\n+        Asserts.assertEQ((a << 2022) >>> 2022, test1(a));\n+        Asserts.assertEQ((a >> 2022) >>> 63, test2(a));\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.LSHIFT, IRNode.URSHIFT })\n+    @IR(counts = { IRNode.AND, \"1\" })\n+    \/\/ Checks (x << 2022) >>> 2022 => x & C where C = ((1 << (64 - 38)) - 1)\n+    public long test1(long x) {\n+        return (x << 2022) >>> 2022;\n+    }\n+\n+    @Test\n+    @IR(failOn = { IRNode.RSHIFT })\n+    @IR(counts = { IRNode.URSHIFT, \"1\" })\n+    \/\/ Checks (x >> 2022) >>> 63 => x >>> 63\n+    public long test2(long x) {\n+        return (x >> 2022) >>> 63;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/URShiftLNodeIdealizationTests.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"},{"patch":"@@ -596,0 +596,5 @@\n+    public static final String MAX = PREFIX + \"MAX\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(MAX, \"Max(I|L)\");\n+    }\n+\n@@ -616,0 +621,5 @@\n+    public static final String MIN = PREFIX + \"MIN\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(MIN, \"Min(I|L)\");\n+    }\n+\n@@ -755,0 +765,10 @@\n+    public static final String ROTATE_LEFT = PREFIX + \"ROTATE_LEFT\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(ROTATE_LEFT, \"RotateLeft\");\n+    }\n+\n+    public static final String ROTATE_RIGHT = PREFIX + \"ROTATE_RIGHT\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(ROTATE_RIGHT, \"RotateRight\");\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"}]}