{"files":[{"patch":"@@ -130,1 +130,1 @@\n-      \/\/ ConvD2I and ConvL2F are not profitable to be vectorized on NEON, because no direct\n+      \/\/ These operations are not profitable to be vectorized on NEON, because no direct\n@@ -134,1 +134,4 @@\n-          (opcode == Op_VectorCastL2X && bt == T_FLOAT)) {\n+          (opcode == Op_VectorCastL2X && bt == T_FLOAT) ||\n+          opcode == Op_AddReductionVD || opcode == Op_AddReductionVF ||\n+          opcode == Op_MulReductionVD || opcode == Op_MulReductionVF ||\n+          opcode == Op_MulVL) {\n@@ -156,1 +159,0 @@\n-      case Op_MulVL:\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -120,1 +120,1 @@\n-      \/\/ ConvD2I and ConvL2F are not profitable to be vectorized on NEON, because no direct\n+      \/\/ These operations are not profitable to be vectorized on NEON, because no direct\n@@ -124,1 +124,4 @@\n-          (opcode == Op_VectorCastL2X && bt == T_FLOAT)) {\n+          (opcode == Op_VectorCastL2X && bt == T_FLOAT) ||\n+          opcode == Op_AddReductionVD || opcode == Op_AddReductionVF ||\n+          opcode == Op_MulReductionVD || opcode == Op_MulReductionVF ||\n+          opcode == Op_MulVL) {\n@@ -146,1 +149,0 @@\n-      case Op_MulVL:\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,119 @@\n+\/*\n+ * Copyright (c) 2022, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.c2.irTests;\n+\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @bug 8275275\n+ * @summary Fix performance regression after auto-vectorization on aarch64 NEON.\n+ * @requires os.arch==\"aarch64\"\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.TestDisableAutoVectOpcodes\n+ *\/\n+\n+public class TestDisableAutoVectOpcodes {\n+\n+    final private static int SIZE = 3000;\n+\n+    private static double[] doublea = new double[SIZE];\n+    private static double[] doubleb = new double[SIZE];\n+    private static long[] longa = new long[SIZE];\n+    private static long[] longb = new long[SIZE];\n+    private static int[] inta = new int[SIZE];\n+    private static float[] floata = new float[SIZE];\n+    private static float[] floatb = new float[SIZE];\n+    private static float fresult;\n+    private static double dresult;\n+\n+    public static void main(String[] args) {\n+        TestFramework.runWithFlags(\"-XX:UseSVE=0\");\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.VECTOR_CAST_D2X})\n+    private static void testConvD2I() {\n+        for(int i = 0; i < SIZE; i++) {\n+            inta[i] = (int) (doublea[i]);\n+        }\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.VECTOR_CAST_L2X})\n+    private static void testConvL2F() {\n+        for(int i = 0; i < SIZE; i++) {\n+            floata[i] = (float) (longa[i]);\n+        }\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.MUL_VL})\n+    private static void testMulVL() {\n+        for(int i = 0; i < SIZE; i++) {\n+            longa[i] = longa[i] * longb[i];\n+        }\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD_REDUCTION_VF})\n+    private static void testAddReductionVF() {\n+        float result = 1;\n+        for(int i = 0; i < SIZE; i++) {\n+            result += (floata[i] + floatb[i]);\n+        }\n+        fresult += result;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.ADD_REDUCTION_VD})\n+    private static void testAddReductionVD() {\n+        double result = 1;\n+        for(int i = 0; i < SIZE; i++) {\n+            result += (doublea[i] + doubleb[i]);\n+        }\n+        dresult += result;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.MUL_REDUCTION_VF})\n+    private static void testMulReductionVF() {\n+        float result = 1;\n+        for(int i = 0; i < SIZE; i++) {\n+            result *= (floata[i] + floatb[i]);\n+        }\n+        fresult += result;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.MUL_REDUCTION_VD})\n+    private static void testMulReductionVD() {\n+        double result = 1;\n+        for(int i = 0; i < SIZE; i++) {\n+            result *= (doublea[i] + doubleb[i]);\n+        }\n+        dresult += result;\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestDisableAutoVectOpcodes.java","additions":119,"deletions":0,"binary":false,"changes":119,"status":"added"},{"patch":"@@ -219,0 +219,6 @@\n+    public static final String MUL_VL = START + \"MulVL\" + MID + END;\n+\n+    public static final String ADD_REDUCTION_VF = START + \"AddReductionVF\" + MID + END;\n+    public static final String ADD_REDUCTION_VD = START + \"AddReductionVD\" + MID + END;\n+    public static final String MUL_REDUCTION_VF = START + \"MulReductionVF\" + MID + END;\n+    public static final String MUL_REDUCTION_VD = START + \"MulReductionVD\" + MID + END;\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}