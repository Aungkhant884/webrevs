{"files":[{"patch":"@@ -190,3 +190,2 @@\n-  \/\/ Address which is guaranteed to generate a fault on read, for test purposes,\n-  \/\/ which is not NULL and contains bits in every word.\n-  static const intptr_t segfault_address = LP64_ONLY(0xABC0000000000ABCULL) NOT_LP64(0x00000ABC);\n+  \/\/ Non-NULL address guaranteed to generate a SEGV mapping error on read, for test purposes.\n+  static constexpr intptr_t segfault_address = (1 * K) AIX_ONLY(+ (4 * K));\n","filename":"src\/hotspot\/share\/utilities\/vmError.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,81 @@\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+import java.io.*;\n+import java.util.regex.Pattern;\n+\n+public class HsErrFileUtils {\n+\n+    \/**\n+     * Given the output of a java VM that crashed, extract the name of the hs-err file from the output\n+     *\/\n+    static public String extractHsErrFileNameFromOutput(OutputAnalyzer output) {\n+        output.shouldMatch(\"# A fatal error has been detected.*\");\n+\n+        \/\/ extract hs-err file\n+        String hs_err_file = output.firstMatch(\"# *(\\\\S*hs_err_pid\\\\d+\\\\.log)\", 1);\n+        if (hs_err_file == null) {\n+            throw new RuntimeException(\"Did not find hs-err file in output.\\n\");\n+        }\n+\n+        return hs_err_file;\n+    }\n+\n+    \/**\n+     * Given the output of a java VM that crashed, extract the name of the hs-err file from the output,\n+     * open that file and return its File.\n+     * @param output\n+     * @return\n+     *\/\n+    static public File openHsErrFileFromOutput(OutputAnalyzer output) {\n+        String name = extractHsErrFileNameFromOutput(output);\n+        File f = new File(name);\n+        if (!f.exists()) {\n+            throw new RuntimeException(\"Cannot find hs-err file at \" + f.getAbsolutePath());\n+        }\n+        return f;\n+    }\n+\n+    \/**\n+     * Given an open hs-err file, read it line by line and check for pattern. Pattern\n+     * need to appear in order, but not necessarily uninterrupted.\n+     *\/\n+    static public void checkHsErrFileContent(File f, Pattern[] patterns, boolean verbose) throws IOException {\n+\n+        FileInputStream fis = new FileInputStream(f);\n+        BufferedReader br = new BufferedReader(new InputStreamReader(fis));\n+        String line = null;\n+\n+        int currentPattern = 0;\n+\n+        String lastLine = null;\n+        while ((line = br.readLine()) != null) {\n+            if (verbose) {\n+                System.out.println(line);\n+            }\n+            if (currentPattern < patterns.length) {\n+                if (patterns[currentPattern].matcher(line).matches()) {\n+                    if (!verbose) {\n+                        System.out.println(line);\n+                    }\n+                    System.out.println(\"^^^ Match \" + currentPattern + \": matches \" + patterns[currentPattern] + \"^^^\");\n+                    currentPattern ++;\n+                }\n+            }\n+            lastLine = line;\n+        }\n+        br.close();\n+\n+        if (currentPattern < patterns.length) {\n+            throw new RuntimeException(\"hs-err file incomplete (found \" + currentPattern + \" matching pattern, \" +\n+                                       \"first missing pattern: \" +  patterns[currentPattern] + \")\");\n+        }\n+\n+        if (!lastLine.equals(\"END.\")) {\n+            throw new RuntimeException(\"hs-err file incomplete (missing END marker.)\");\n+        }\n+\n+        System.out.println(\"Found all expected pattern in hs-err file at \" + f.getAbsolutePath());\n+\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/HsErrFileUtils.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"},{"patch":"@@ -0,0 +1,139 @@\n+\/*\n+ * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/*\n+ * @test segv\n+ * @summary Test that for a given crash situation we see the correct siginfo in the hs-err file\n+ * @library \/test\/lib\n+ * @requires vm.debug\n+ * @requires os.family != \"windows\"\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @run driver TestSigInfoInHsErrFile segv\n+ *\/\n+\n+\/*\n+ * @test fpe\n+ * @summary Test that for a given crash situation we see the correct siginfo in the hs-err file\n+ * @library \/test\/lib\n+ * @requires vm.debug\n+ * @requires os.family != \"windows\"\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @run driver TestSigInfoInHsErrFile fpe\n+ *\/\n+\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.regex.Pattern;\n+\n+public class TestSigInfoInHsErrFile {\n+\n+  public static void main(String[] args) throws Exception {\n+    if (args.length != 1) {\n+      throw new IllegalArgumentException(\"missing argument\");\n+    } else if (args[0].equals(\"segv\")) {\n+      testWithSEGV();\n+    } else if (args[0].equals(\"fpe\")) {\n+      testWithFPE();\n+    } else {\n+      throw new IllegalArgumentException(\"unknown argument\");\n+    }\n+  }\n+\n+  static void testWithFPE() throws Exception {\n+\n+    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+            \"-XX:+UnlockDiagnosticVMOptions\",\n+            \"-Xmx100M\",\n+            \"-XX:-CreateCoredumpOnCrash\",\n+            \"-XX:ErrorHandlerTest=15\",\n+            \"-version\");\n+\n+    OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+    output.shouldNotHaveExitValue(0);\n+\n+    \/\/ we should have crashed with a SIGFPE\n+    output.shouldMatch(\"#.+SIGFPE.*\");\n+\n+    \/\/ extract hs-err file\n+    File f = HsErrFileUtils.openHsErrFileFromOutput(output);\n+\n+    ArrayList<Pattern> patterns = new ArrayList<>();\n+    patterns.add(Pattern.compile(\"# A fatal error has been detected.*\"));\n+    patterns.add(Pattern.compile(\"# *SIGFPE.*\"));\n+    patterns.add(Pattern.compile(\"# *Problematic frame.*\"));\n+    patterns.add(Pattern.compile(\"# .*VMError::controlled_crash.*\"));\n+\n+    patterns.add(Pattern.compile(\"siginfo: si_signo: \\\\d+ \\\\(SIGFPE\\\\), si_code: \\\\d+ \\\\(FPE_INTDIV\\\\).*\"));\n+\n+    HsErrFileUtils.checkHsErrFileContent(f, patterns.toArray(new Pattern[] {}), true);\n+\n+  }\n+\n+  static void testWithSEGV() throws Exception {\n+\n+    ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+        \"-XX:+UnlockDiagnosticVMOptions\",\n+        \"-Xmx100M\",\n+        \"-XX:-CreateCoredumpOnCrash\",\n+        \"-XX:ErrorHandlerTest=14\",\n+        \"-version\");\n+\n+    OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+    output.shouldNotHaveExitValue(0);\n+\n+    \/\/ we should have crashed with a SIGFPE\n+    output.shouldMatch(\"#.+SIGSEGV.*\");\n+\n+    \/\/ extract hs-err file\n+    File f = HsErrFileUtils.openHsErrFileFromOutput(output);\n+\n+    ArrayList<Pattern> patterns = new ArrayList<>();\n+    patterns.add(Pattern.compile(\"# A fatal error has been detected.*\"));\n+    patterns.add(Pattern.compile(\"# *SIGSEGV.*\"));\n+    patterns.add(Pattern.compile(\"# *Problematic frame.*\"));\n+    patterns.add(Pattern.compile(\"# .*VMError::controlled_crash.*\"));\n+\n+    if (!Platform.isAix()) {\n+      \/\/ Crash address is, for all non-AIX platforms, at 1K (0x400). See VMError::_segfault_address\n+      patterns.add(Pattern.compile(\"siginfo: si_signo: \\\\d+ \\\\(SIGSEGV\\\\), si_code: \\\\d+ \\\\(SEGV_MAPERR\\\\), si_addr: 0x0*400\"));\n+    } else {\n+      patterns.add(Pattern.compile(\"siginfo: si_signo: \\\\d+ \\\\(SIGSEGV\\\\).*\"));\n+    }\n+\n+    HsErrFileUtils.checkHsErrFileContent(f, patterns.toArray(new Pattern[] {}), true);\n+\n+  }\n+\n+}\n+\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/TestSigInfoInHsErrFile.java","additions":139,"deletions":0,"binary":false,"changes":139,"status":"added"}]}