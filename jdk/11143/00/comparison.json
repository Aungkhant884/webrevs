{"files":[{"patch":"@@ -66,0 +66,1 @@\n+#include \"os_linux.hpp\"\n@@ -394,0 +395,10 @@\n+\n+JVM_ENTRY_NO_ENV(jlong, jfr_host_total_memory(JNIEnv* env, jobject jvm))\n+#ifdef LINUX\n+  \/\/ We want the host memory, not the container limit.\n+  \/\/ os::physical_memory() would return the container limit.\n+  return os::Linux::physical_memory();\n+#else\n+  return os::physical_memory();\n+#endif\n+JVM_END\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethod.cpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -163,0 +163,2 @@\n+jlong JNICALL jfr_host_total_memory(JNIEnv* env, jobject jvm);\n+\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethod.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -97,1 +97,2 @@\n-      (char*)\"isContainerized\", (char*)\"()Z\", (void*) jfr_is_containerized\n+      (char*)\"isContainerized\", (char*)\"()Z\", (void*) jfr_is_containerized,\n+      (char*)\"hostTotalMemory\", (char*)\"()J\", (void*) jfr_host_total_memory\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethodRegistration.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -78,0 +78,5 @@\n+\n+    @Label(\"Container Host Total Memory\")\n+    @Description(\"Total memory of the host running the container\")\n+    @DataAmount\n+    public long hostTotalMemory;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/events\/ContainerConfigurationEvent.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -638,0 +638,6 @@\n+\n+    \/**\n+     * Returns the total amount of memory of the host system whether or not this\n+     * JVM runs in a container.\n+     *\/\n+    public native long hostTotalMemory();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/JVM.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -224,0 +224,1 @@\n+            t.hostTotalMemory = JVM.getJVM().hostTotalMemory();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/instrument\/JDKEvents.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+    private static final int UNKNOWN = -100;\n@@ -85,0 +86,2 @@\n+        long hostTotalMemory = getHostTotalMemory();\n+        System.out.println(\"Debug: Host total memory is \" + hostTotalMemory);\n@@ -90,1 +93,1 @@\n-                testContainerInfo(cpus, mem);\n+                testContainerInfo(cpus, mem, hostTotalMemory);\n@@ -95,2 +98,14 @@\n-    private static void testContainerInfo(int expectedCPUs, int expectedMemoryMB) throws Exception {\n-        Common.logNewTestCase(\"ContainerInfo: --cpus = \" + expectedCPUs + \" --memory=\" + expectedMemoryMB + \"m\");\n+    private static long getHostTotalMemory() throws Exception {\n+        DockerRunOptions opts = Common.newOpts(imageName);\n+\n+        String hostMem = Common.run(opts).firstMatch(\"total physical memory: (\\\\d+)\", 1);\n+        try {\n+            return Long.parseLong(hostMem);\n+        } catch (NumberFormatException e) {\n+            System.out.println(\"Could not parse total physical memory '\" + hostMem + \"' returning \" + UNKNOWN);\n+            return UNKNOWN;\n+        }\n+    }\n+\n+    private static void testContainerInfo(int expectedCPUs, int expectedMemoryMB, long hostTotalMemory) throws Exception {\n+        Common.logNewTestCase(\"ContainerInfo: --cpus=\" + expectedCPUs + \" --memory=\" + expectedMemoryMB + \"m\");\n@@ -105,0 +120,1 @@\n+        String totalMem = \"hostTotalMemory\";\n@@ -115,1 +131,2 @@\n-            .shouldContain(memoryLimitFld + \" = \" + expectedMemoryLimit);\n+            .shouldContain(memoryLimitFld + \" = \" + expectedMemoryLimit)\n+            .shouldContain(totalMem + \" = \" + hostTotalMemory);\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestJFREvents.java","additions":21,"deletions":4,"binary":false,"changes":25,"status":"modified"}]}