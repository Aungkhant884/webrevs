{"files":[{"patch":"@@ -172,2 +172,2 @@\n-                if (docs.inlineTags != null && !docs.inlineTags.isEmpty())\n-                        method = (ExecutableElement)docs.holder;\n+                if (!docs.inlineTags.isEmpty())\n+                    method = (ExecutableElement) docs.holder;\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/builders\/MethodBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+\n@@ -31,0 +32,2 @@\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.type.TypeKind;\n@@ -39,1 +42,0 @@\n-import jdk.javadoc.internal.doclets.toolkit.util.DocFinder.Input;\n@@ -43,3 +45,3 @@\n- * An inline taglet representing the {@code {@inheritDoc}} tag. This tag should only\n- * be used with a method.  It is used to inherit documentation from overridden\n- * and implemented methods.\n+ * An inline taglet representing the {@code {@inheritDoc}} tag.\n+ * It is used to copy documentation from superclass (but not superinterface)\n+ * declarations and from overridden and implemented methods.\n@@ -52,1 +54,1 @@\n-    public InheritDocTaglet () {\n+    public InheritDocTaglet() {\n@@ -58,1 +60,1 @@\n-     * replace all occurrences of @inheritDoc with documentation from its\n+     * replace all occurrences of {@code {@inheritDoc}} with documentation from its\n@@ -63,3 +65,11 @@\n-     * @param holderTag the tag that holds the inheritDoc tag or null for type\n-     * (class) docs.\n-     * @param isFirstSentence true if we only want to inherit the first sentence.\n+     *\n+     * @param holderTag\n+     *\n+     * either the tag that holds the {@code {@inheritDoc}} tag or {@code null},\n+     * which can mean either of:\n+     * <ul>\n+     *     <li>the tag is used on a class {@link jdk.javadoc.doclet.Taglet.Location#TYPE} declaration, or\n+     *     <li>the tag is used to copy the overall doc comment\n+     * <\/ul>\n+     *\n+     * @param isFirstSentence true if we only want to inherit the first sentence\n@@ -68,1 +78,3 @@\n-            Element e, DocTree holderTag, boolean isFirstSentence) {\n+                                                   Element e,\n+                                                   DocTree holderTag,\n+                                                   boolean isFirstSentence) {\n@@ -74,1 +86,1 @@\n-        Taglet inheritableTaglet = holderTag == null\n+        Taglet taglet = holderTag == null\n@@ -77,10 +89,5 @@\n-        if (inheritableTaglet != null &&\n-            !(inheritableTaglet instanceof InheritableTaglet)) {\n-                String message = utils.getSimpleName(e) +\n-                    ((utils.isExecutableElement(e))\n-                        ? utils.flatSignature((ExecutableElement)e, writer.getCurrentPageElement())\n-                        : \"\");\n-                \/\/This tag does not support inheritance.\n-                var path = writer.configuration().utils.getCommentHelper(e).getDocTreePath(holderTag);\n-                messages.warning(path, \"doclet.inheritDocWithinInappropriateTag\", message);\n-                return replacement;\n+        if (taglet != null && !(taglet instanceof InheritableTaglet)) {\n+            \/\/ This tag does not support inheritance.\n+            var path = writer.configuration().utils.getCommentHelper(e).getDocTreePath(holderTag);\n+            messages.warning(path, \"doclet.inheritDocWithinInappropriateTag\");\n+            return replacement;\n@@ -88,3 +95,2 @@\n-        Input input = new DocFinder.Input(utils, e,\n-                (InheritableTaglet) inheritableTaglet, new DocFinder.DocTreeInfo(holderTag, e),\n-                isFirstSentence, true);\n+        var input = new DocFinder.Input(utils, e, (InheritableTaglet) taglet,\n+                new DocFinder.DocTreeInfo(holderTag, e), isFirstSentence, true);\n@@ -95,1 +101,1 @@\n-                    inheritedDoc.inlineTags, isFirstSentence);\n+                        inheritedDoc.inlineTags, isFirstSentence);\n@@ -97,1 +103,0 @@\n-\n@@ -99,1 +104,9 @@\n-            String message = utils.getSimpleName(e) +\n+            \/\/ This is to assert that we don't reach here for a class declaration.\n+            \/\/ Indeed, every class except for java.lang.Object has a superclass.\n+            \/\/ If we ever reach here, we would need a different warning; because\n+            \/\/ the below warning is about method declarations, not class declarations.\n+            \/\/ Unless @inheritDoc is used inside java.lang.Object itself,\n+            \/\/ which would clearly be an error, we shouldn't reach here.\n+            assert !(e instanceof TypeElement typeElement)\n+                    || typeElement.getSuperclass().getKind() == TypeKind.NONE;\n+            String signature = utils.getSimpleName(e) +\n@@ -101,3 +114,3 @@\n-                        ? utils.flatSignature((ExecutableElement)e, writer.getCurrentPageElement())\n-                        : \"\");\n-            messages.warning(e, \"doclet.noInheritedDoc\", message);\n+                            ? utils.flatSignature((ExecutableElement) e, writer.getCurrentPageElement())\n+                            : e.toString());\n+            messages.warning(e, \"doclet.noInheritedDoc\", signature);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/InheritDocTaglet.java","additions":43,"deletions":30,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * A taglet should implement this interface if it supports an {@code @inheritDoc}\n+ * A taglet should implement this interface if it supports an {@code {@inheritDoc}}\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/InheritableTaglet.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-    private static Map<String, String> getRankMap(Utils utils, List<? extends Element> params){\n+    private static Map<String, String> getRankMap(Utils utils, List<? extends Element> params) {\n@@ -91,2 +91,2 @@\n-            input.isTypeVariableParamTag = ((ParamTree)input.docTreeInfo.docTree).isTypeParameter();\n-            ExecutableElement ee = (ExecutableElement)input.docTreeInfo.element;\n+            input.isTypeVariableParamTag = ((ParamTree) input.docTreeInfo.docTree()).isTypeParameter();\n+            ExecutableElement ee = (ExecutableElement) input.docTreeInfo.element();\n@@ -97,2 +97,2 @@\n-            String target = ch.getParameterName(input.docTreeInfo.docTree);\n-            for (int i = 0 ; i < parameters.size(); i++) {\n+            String target = ch.getParameterName(input.docTreeInfo.docTree());\n+            for (int i = 0; i < parameters.size(); i++) {\n@@ -109,1 +109,1 @@\n-        ExecutableElement md = (ExecutableElement)input.element;\n+        ExecutableElement md = (ExecutableElement) input.element;\n@@ -135,1 +135,1 @@\n-                member.getTypeParameters(), utils.getTypeParamTrees(member));\n+                    member.getTypeParameters(), utils.getTypeParamTrees(member));\n@@ -137,1 +137,1 @@\n-                member.getParameters(), utils.getParamTrees(member)));\n+                    member.getParameters(), utils.getParamTrees(member)));\n@@ -142,1 +142,1 @@\n-                typeElement.getTypeParameters(), utils.getTypeParamTrees(typeElement));\n+                    typeElement.getTypeParameters(), utils.getTypeParamTrees(typeElement));\n@@ -160,2 +160,5 @@\n-    private Content getTagletOutput(ParamKind kind, Element holder,\n-            TagletWriter writer, List<? extends Element> formalParameters, List<? extends ParamTree> paramTags) {\n+    private Content getTagletOutput(ParamKind kind,\n+                                    Element holder,\n+                                    TagletWriter writer,\n+                                    List<? extends Element> formalParameters,\n+                                    List<? extends ParamTree> paramTags) {\n@@ -170,2 +173,5 @@\n-    private Content getInheritedTagletOutput(ParamKind kind, Element holder,\n-                                             TagletWriter writer, Element param, int rank,\n+    private Content getInheritedTagletOutput(ParamKind kind,\n+                                             Element holder,\n+                                             TagletWriter writer,\n+                                             Element param,\n+                                             int rank,\n@@ -178,1 +184,1 @@\n-        if (inheritedDoc.inlineTags != null && !inheritedDoc.inlineTags.isEmpty()) {\n+        if (!inheritedDoc.inlineTags.isEmpty()) {\n@@ -200,2 +206,5 @@\n-    private Content processParamTags(Element e, ParamKind kind, List<? extends ParamTree> paramTags,\n-                                     List<? extends Element> formalParameters, TagletWriter writer) {\n+    private Content processParamTags(Element e,\n+                                     ParamKind kind,\n+                                     List<? extends ParamTree> paramTags,\n+                                     List<? extends Element> formalParameters,\n+                                     TagletWriter writer) {\n@@ -206,1 +215,1 @@\n-            Map<String,String> rankMap = getRankMap(writer.configuration().utils, formalParameters);\n+            Map<String, String> rankMap = getRankMap(writer.configuration().utils, formalParameters);\n@@ -212,2 +221,2 @@\n-                        case PARAMETER        -> \"doclet.Parameters_warn\";\n-                        case TYPE_PARAMETER   -> \"doclet.TypeParameters_warn\";\n+                        case PARAMETER -> \"doclet.Parameters_warn\";\n+                        case TYPE_PARAMETER -> \"doclet.TypeParameters_warn\";\n@@ -272,3 +281,6 @@\n-    private Content processParamTag(Element e, ParamKind kind,\n-            TagletWriter writer, ParamTree paramTag, String name,\n-            boolean isFirstParam) {\n+    private Content processParamTag(Element e,\n+                                    ParamKind kind,\n+                                    TagletWriter writer,\n+                                    ParamTree paramTag,\n+                                    String name,\n+                                    boolean isFirstParam) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/ParamTaglet.java","additions":34,"deletions":22,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-        TypeMirror returnType = utils.getReturnType(writer.getCurrentPageElement(), (ExecutableElement)holder);\n+        TypeMirror returnType = utils.getReturnType(writer.getCurrentPageElement(), (ExecutableElement) holder);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/ReturnTaglet.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-            CommentHelper ch =  input.utils.getCommentHelper(input.element);\n+            CommentHelper ch = input.utils.getCommentHelper(input.element);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/SeeTaglet.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,2 +58,1 @@\n-public class ThrowsTaglet extends BaseTaglet\n-    implements InheritableTaglet {\n+public class ThrowsTaglet extends BaseTaglet implements InheritableTaglet {\n@@ -71,1 +70,1 @@\n-            exception = input.docTreeInfo.docTree instanceof ThrowsTree tt\n+            exception = input.docTreeInfo.docTree() instanceof ThrowsTree tt\n@@ -74,1 +73,1 @@\n-                    ? ch.getExceptionName(input.docTreeInfo.docTree).getSignature()\n+                    ? ch.getExceptionName(input.docTreeInfo.docTree()).getSignature()\n@@ -83,1 +82,1 @@\n-                 (input.tagId.equals(utils.getFullyQualifiedName(exc))))) {\n+                    (input.tagId.equals(utils.getFullyQualifiedName(exc))))) {\n@@ -90,1 +89,1 @@\n-                    utils.isSubclassOf((TypeElement)exc, (TypeElement)exception)) {\n+                    utils.isSubclassOf((TypeElement) exc, (TypeElement) exception)) {\n@@ -100,1 +99,2 @@\n-            Set<String> alreadyDocumented, TagletWriter writer) {\n+                                                         Set<String> alreadyDocumented,\n+                                                         TagletWriter writer) {\n@@ -107,2 +107,2 @@\n-                !alreadyDocumented.contains(declaredExceptionType.toString()) &&\n-                !alreadyDocumented.contains(utils.getFullyQualifiedName(te, false))) {\n+                    !alreadyDocumented.contains(declaredExceptionType.toString()) &&\n+                    !alreadyDocumented.contains(utils.getFullyQualifiedName(te, false))) {\n@@ -124,2 +124,4 @@\n-            List<? extends TypeMirror> declaredExceptionTypes, Set<String> alreadyDocumented,\n-            Map<String, TypeMirror> typeSubstitutions, TagletWriter writer) {\n+                                               List<? extends TypeMirror> declaredExceptionTypes,\n+                                               Set<String> alreadyDocumented,\n+                                               Map<String, TypeMirror> typeSubstitutions,\n+                                               TagletWriter writer) {\n@@ -160,1 +162,1 @@\n-                writer.getCurrentPageElement(), (ExecutableElement)holder);\n+                writer.getCurrentPageElement(), (ExecutableElement) holder);\n@@ -189,2 +191,4 @@\n-                                       TagletWriter writer, Set<String> alreadyDocumented,\n-                                       Map<String,TypeMirror> typeSubstitutions, boolean allowDuplicates) {\n+                                       TagletWriter writer,\n+                                       Set<String> alreadyDocumented,\n+                                       Map<String, TypeMirror> typeSubstitutions,\n+                                       boolean allowDuplicates) {\n@@ -202,3 +206,3 @@\n-                        (alreadyDocumented.contains(excName) ||\n-                        (te != null && alreadyDocumented.contains(utils.getFullyQualifiedName(te, false)))) ||\n-                        (substituteType != null && alreadyDocumented.contains(substituteType.toString()))) {\n+                            (alreadyDocumented.contains(excName) ||\n+                                    (te != null && alreadyDocumented.contains(utils.getFullyQualifiedName(te, false)))) ||\n+                            (substituteType != null && alreadyDocumented.contains(substituteType.toString()))) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/ThrowsTaglet.java","additions":21,"deletions":17,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.util.ArrayList;\n@@ -581,4 +580,3 @@\n-            List<? extends DocTree> asList(String content) {\n-                List<DocTree> out = new ArrayList<>();\n-                out.add(configuration.cmtUtils.makeTextTree(content));\n-                return out;\n+\n+            private List<DocTree> asList(String content) {\n+                return List.of(configuration.cmtUtils.makeTextTree(content));\n@@ -614,1 +612,1 @@\n-                 return node.getDescription();\n+                return node.getDescription();\n@@ -634,1 +632,1 @@\n-               return node.getDescription();\n+                return node.getDescription();\n@@ -664,1 +662,1 @@\n-                 return node.getDescription();\n+                return node.getDescription();\n@@ -674,1 +672,1 @@\n-                 return node.getDescription();\n+                return node.getDescription();\n@@ -679,1 +677,1 @@\n-               return List.of();\n+                return List.of();\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/CommentHelper.java","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -44,19 +44,1 @@\n-    public static final class DocTreeInfo {\n-        public final DocTree docTree;\n-        public final Element element;\n-\n-        public DocTreeInfo() {\n-            this.docTree = null;\n-            this.element = null;\n-        }\n-\n-        public DocTreeInfo(DocTree docTree, Element baseElement) {\n-            this.docTree = docTree;\n-            this.element = baseElement;\n-        }\n-\n-        @Override\n-        public String toString() {\n-            return \"DocTreeInfo{\" + \"docTree=\" + docTree + \", element=\" + element + '}';\n-        }\n-    }\n+    public record DocTreeInfo(DocTree docTree, Element element) { }\n@@ -68,0 +50,1 @@\n+\n@@ -72,0 +55,1 @@\n+\n@@ -76,1 +60,1 @@\n-        public InheritableTaglet taglet = null;\n+        public InheritableTaglet taglet;\n@@ -81,1 +65,1 @@\n-        public String tagId = null;\n+        public String tagId;\n@@ -85,1 +69,1 @@\n-         * inheritDoc tag.\n+         * {@code {@inheritDoc}} tag.\n@@ -92,1 +76,1 @@\n-        public boolean isFirstSentence = false;\n+        public boolean isFirstSentence;\n@@ -95,1 +79,1 @@\n-         * True if we are looking for documentation to replace the inheritDocTag.\n+         * True if we are looking for documentation to replace the {@code {@inheritDoc}} tag.\n@@ -97,1 +81,1 @@\n-        public boolean isInheritDocTag = false;\n+        public boolean isInheritDocTag;\n@@ -103,1 +87,1 @@\n-        public boolean isTypeVariableParamTag = false;\n+        public boolean isTypeVariableParamTag;\n@@ -107,11 +91,4 @@\n-        public Input(Utils utils, Element element, InheritableTaglet taglet, DocTreeInfo dtInfo,\n-                boolean isFirstSentence, boolean isInheritDocTag) {\n-            this.utils = utils;\n-            this.element = element;\n-            this.taglet = taglet;\n-            this.isFirstSentence = isFirstSentence;\n-            this.isInheritDocTag = isInheritDocTag;\n-            this.docTreeInfo = dtInfo;\n-        }\n-\n-        public Input(Utils utils, Element element, InheritableTaglet taglet, String tagId) {\n+        public Input(Utils utils,\n+                     Element element,\n+                     InheritableTaglet taglet,\n+                     String tagId) {\n@@ -123,2 +100,5 @@\n-        public Input(Utils utils, Element element, InheritableTaglet taglet, String tagId,\n-            boolean isTypeVariableParamTag) {\n+        public Input(Utils utils,\n+                     Element element,\n+                     InheritableTaglet taglet,\n+                     String tagId,\n+                     boolean isTypeVariableParamTag) {\n@@ -137,3 +117,1 @@\n-            if (element == null)\n-                throw new NullPointerException();\n-            this.element = element;\n+            this.element = Objects.requireNonNull(element);\n@@ -141,1 +119,1 @@\n-            this.docTreeInfo = new DocTreeInfo();\n+            this.docTreeInfo = new DocTreeInfo(null, null);\n@@ -144,2 +122,9 @@\n-        public Input(Utils utils, Element element, boolean isFirstSentence) {\n-            this(utils, element);\n+        public Input(Utils utils,\n+                     Element element,\n+                     InheritableTaglet taglet,\n+                     DocTreeInfo dtInfo,\n+                     boolean isFirstSentence,\n+                     boolean isInheritDocTag) {\n+            this.utils = utils;\n+            this.element = Objects.requireNonNull(element);\n+            this.taglet = taglet;\n@@ -147,0 +132,2 @@\n+            this.isInheritDocTag = isInheritDocTag;\n+            this.docTreeInfo = dtInfo;\n@@ -149,9 +136,6 @@\n-        public Input copy(Utils utils) {\n-            if (this.element == null) {\n-                throw new NullPointerException();\n-            }\n-            Input clone = new Input(utils, this.element, this.taglet, this.docTreeInfo,\n-                    this.isFirstSentence, this.isInheritDocTag);\n-            clone.tagId = this.tagId;\n-            clone.isTypeVariableParamTag = this.isTypeVariableParamTag;\n-            return clone;\n+        private Input copy() {\n+            var copy = new Input(utils, element, taglet, docTreeInfo,\n+                    isFirstSentence, isInheritDocTag);\n+            copy.tagId = tagId;\n+            copy.isTypeVariableParamTag = isTypeVariableParamTag;\n+            return copy;\n@@ -161,2 +145,1 @@\n-         * For debugging purposes\n-         * @return string representation\n+         * For debugging purposes.\n@@ -181,0 +164,1 @@\n+\n@@ -188,1 +172,1 @@\n-         * The Doc object that holds the documentation.\n+         * The element that holds the documentation.\n@@ -203,3 +187,3 @@\n-         * When automatically inheriting throws tags, you sometime must inherit\n-         * more than one tag.  For example if the element declares that it throws\n-         * IOException and the overridden element has throws tags for IOException and\n+         * When automatically inheriting throws tags, you sometimes must inherit\n+         * more than one tag.  For example, if a method declares that it throws\n+         * IOException and the overridden method has {@code @throws} tags for IOException and\n@@ -207,2 +191,1 @@\n-         * subclass of IOException.  This subclass of DocFinder.Output allows\n-         * multiple tag inheritance.\n+         * subclass of IOException.  This allows multiple tag inheritance.\n@@ -210,1 +193,1 @@\n-        public List<DocTree> tagList  = new ArrayList<>();\n+        public final List<DocTree> tagList = new ArrayList<>();\n@@ -213,2 +196,1 @@\n-         * Returns a string representation for debugging purposes\n-         * @return string\n+         * For debugging purposes.\n@@ -229,3 +211,1 @@\n-     * have comments, return documentation from the overridden element if possible.\n-     * If the overridden element does not exist or does not have documentation to\n-     * inherit, search for documentation to inherit from implemented methods.\n+     * have comments, return the inherited comments if possible.\n@@ -253,1 +233,1 @@\n-        if (output.inlineTags != null && !output.inlineTags.isEmpty()) {\n+        if (!output.inlineTags.isEmpty()) {\n@@ -257,1 +237,1 @@\n-        Input inheritedSearchInput = input.copy(configuration.utils);\n+        Input inheritedSearchInput = input.copy();\n@@ -260,1 +240,2 @@\n-            ExecutableElement overriddenMethod = utils.overriddenMethod((ExecutableElement) input.element);\n+            ExecutableElement m = (ExecutableElement) input.element;\n+            ExecutableElement overriddenMethod = utils.overriddenMethod(m);\n@@ -269,3 +250,0 @@\n-            \/\/NOTE:  When we fix the bug where ClassDoc.interfaceTypes() does\n-            \/\/       not pass all implemented interfaces, we will use the\n-            \/\/       appropriate element here.\n@@ -274,2 +252,1 @@\n-            List<ExecutableElement> implementedMethods =\n-                    vmt.getImplementedMethods((ExecutableElement)input.element);\n+            List<ExecutableElement> implementedMethods = vmt.getImplementedMethods(m);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/DocFinder.java","additions":53,"deletions":76,"binary":false,"changes":129,"status":"modified"},{"patch":"@@ -2503,1 +2503,1 @@\n-        return new ArrayList<>(getBlockTags(element, RETURN, ReturnTree.class));\n+        return getBlockTags(element, RETURN, ReturnTree.class);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/Utils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -205,1 +205,1 @@\n-     * sole {@code @inheritDoc} or devoid of any API comments.\n+     * sole {@code {@inheritDoc}} or devoid of any API comments.\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/VisibleMemberTable.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}