{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -389,1 +389,4 @@\n-        if (!isFullScreenSupported()) {\n+        if (!isFullScreenSupported()\n+                || ((X11GraphicsEnvironment) GraphicsEnvironment\n+                            .getLocalGraphicsEnvironment()).runningXinerama()) {\n+            \/\/ only the current mode will be returned\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11GraphicsDevice.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,5 +27,0 @@\n-#include \"jni.h\"\n-#include \"jni_util.h\"\n-#include \"jvm_md.h\"\n-#include <dlfcn.h>\n-#include <stdio.h>\n@@ -33,157 +28,0 @@\n-#include <string.h>\n-\n-typedef void* g_settings_schema_source_get_default();\n-typedef void* g_settings_schema_source_ref(void *);\n-typedef void g_settings_schema_source_unref(void *);\n-typedef void* g_settings_schema_source_lookup(void *, char *, int);\n-typedef int g_settings_schema_has_key(void *, char *);\n-typedef void* g_settings_new_full(void *, void *, char *);\n-typedef void* g_settings_get_value(void *, char *);\n-typedef int g_variant_is_of_type(void *, char *);\n-typedef unsigned long g_variant_n_children(void *);\n-typedef void* g_variant_get_child_value(void *, unsigned long);\n-typedef void  g_variant_unref(void *);\n-typedef char*  g_variant_get_string(void *, unsigned long *);\n-typedef int  g_variant_get_int32(void *);\n-typedef double  g_variant_get_double(void *);\n-\n-static g_settings_schema_has_key* fp_g_settings_schema_has_key;\n-static g_settings_new_full* fp_g_settings_new_full;\n-static g_settings_get_value* fp_g_settings_get_value;\n-static g_variant_is_of_type* fp_g_variant_is_of_type;\n-static g_variant_n_children* fp_g_variant_n_children;\n-static g_variant_get_child_value* fp_g_variant_get_child_value;\n-static g_variant_get_string* fp_g_variant_get_string;\n-static g_variant_get_int32* fp_g_variant_get_int32;\n-static g_variant_get_double* fp_g_variant_get_double;\n-static g_variant_unref* fp_g_variant_unref;\n-\n-static void* get_schema_value(char *name, char *key) {\n-    static void *lib_handle;\n-    static int initialized = 0;\n-    static void * default_schema;\n-    static g_settings_schema_source_lookup* schema_lookup;\n-    void *schema = NULL, *fp = NULL;\n-    if (!initialized) {\n-        initialized = 1;\n-        lib_handle = dlopen(JNI_LIB_NAME(\"gio-2.0\"), RTLD_GLOBAL | RTLD_LAZY);\n-        if (!lib_handle) {\n-            CHECK_NULL_RETURN(lib_handle =\n-                          dlopen(VERSIONED_JNI_LIB_NAME(\"gio-2.0\", \"0\"),\n-                                                RTLD_GLOBAL | RTLD_LAZY), NULL);\n-        }\n-        CHECK_NULL_RETURN(fp_g_settings_schema_has_key =\n-                          (g_settings_schema_has_key*)\n-                          dlsym(lib_handle, \"g_settings_schema_has_key\"), NULL);\n-        CHECK_NULL_RETURN(fp_g_settings_new_full =\n-                          (g_settings_new_full*)\n-                          dlsym(lib_handle, \"g_settings_new_full\"), NULL);\n-        CHECK_NULL_RETURN(fp_g_settings_get_value =\n-                          (g_settings_get_value*)\n-                          dlsym(lib_handle, \"g_settings_get_value\"), NULL);\n-        CHECK_NULL_RETURN(fp_g_variant_is_of_type =\n-                          (g_variant_is_of_type*)\n-                          dlsym(lib_handle, \"g_variant_is_of_type\"), NULL);\n-        CHECK_NULL_RETURN(fp_g_variant_n_children =\n-                          (g_variant_n_children*)\n-                          dlsym(lib_handle, \"g_variant_n_children\"), NULL);\n-        CHECK_NULL_RETURN(fp_g_variant_get_child_value =\n-                          (g_variant_get_child_value*)\n-                          dlsym(lib_handle, \"g_variant_get_child_value\"), NULL);\n-        CHECK_NULL_RETURN(fp_g_variant_get_string =\n-                          (g_variant_get_string*)\n-                          dlsym(lib_handle, \"g_variant_get_string\"), NULL);\n-        CHECK_NULL_RETURN(fp_g_variant_get_int32 =\n-                          (g_variant_get_int32*)\n-                          dlsym(lib_handle, \"g_variant_get_int32\"), NULL);\n-        CHECK_NULL_RETURN(fp_g_variant_get_double =\n-                          (g_variant_get_double*)\n-                          dlsym(lib_handle, \"g_variant_get_double\"), NULL);\n-        CHECK_NULL_RETURN(fp_g_variant_unref =\n-                          (g_variant_unref*)\n-                          dlsym(lib_handle, \"g_variant_unref\"), NULL);\n-\n-        fp = dlsym(lib_handle, \"g_settings_schema_source_get_default\");\n-        if (fp) {\n-            default_schema = ((g_settings_schema_source_get_default*)fp)();\n-        }\n-        if (default_schema) {\n-            fp = dlsym(lib_handle, \"g_settings_schema_source_ref\");\n-            if (fp) {\n-                ((g_settings_schema_source_ref*)fp)(default_schema);\n-            }\n-        }\n-        schema_lookup = (g_settings_schema_source_lookup*)\n-                           dlsym(lib_handle, \"g_settings_schema_source_lookup\");\n-    }\n-\n-    if (!default_schema || !schema_lookup) {\n-        return NULL;\n-    }\n-\n-    schema = schema_lookup(default_schema, name, 1);\n-    if (schema) {\n-        if (fp_g_settings_schema_has_key(schema, key)) {\n-            void *settings = fp_g_settings_new_full(schema, NULL, NULL);\n-            if (settings) {\n-                return fp_g_settings_get_value(settings, key);\n-            }\n-        }\n-    }\n-    return NULL;\n-}\n-\n-\n-static double getDesktopScale(char *output_name) {\n-    double result = -1;\n-    if(output_name) {\n-        void *value = get_schema_value(\"com.ubuntu.user-interface\",\n-                                                                \"scale-factor\");\n-        if (value) {\n-            if(fp_g_variant_is_of_type(value, \"a{si}\")) {\n-                int num = fp_g_variant_n_children(value);\n-                int i = 0;\n-                while (i < num) {\n-                    void *entry = fp_g_variant_get_child_value(value, i++);\n-                    if (entry) {\n-                        void *screen = fp_g_variant_get_child_value(entry, 0);\n-                        void *scale = fp_g_variant_get_child_value(entry, 1);\n-                        if (screen && scale) {\n-                            char *name = fp_g_variant_get_string(screen, NULL);\n-                            if (name && !strcmp(name, output_name)) {\n-                                result = fp_g_variant_get_int32(scale) \/ 8.;\n-                            }\n-                            fp_g_variant_unref(screen);\n-                            fp_g_variant_unref(scale);\n-                        }\n-                        fp_g_variant_unref(entry);\n-                    }\n-                    if (result > 0) {\n-                        break;\n-                    }\n-                }\n-            }\n-            fp_g_variant_unref(value);\n-        }\n-        if (result > 0) {\n-            value = get_schema_value(\"com.canonical.Unity.Interface\",\n-                                                           \"text-scale-factor\");\n-            if (value && fp_g_variant_is_of_type(value, \"d\")) {\n-                result *= fp_g_variant_get_double(value);\n-                fp_g_variant_unref(value);\n-            }\n-        }\n-    }\n-\n-    if (result <= 0) {\n-        void *value = get_schema_value(\"org.gnome.desktop.interface\",\n-                                                         \"text-scaling-factor\");\n-        if (value && fp_g_variant_is_of_type(value, \"d\")) {\n-            result = fp_g_variant_get_double(value);\n-            fp_g_variant_unref(value);\n-        }\n-    }\n-\n-    return result;\n-\n-}\n@@ -203,1 +41,1 @@\n-double getNativeScaleFactor(char *output_name) {\n+double getNativeScaleFactor() {\n@@ -205,2 +43,0 @@\n-    double native_scale = 0;\n-    int gdk_scale = 0;\n@@ -216,9 +52,1 @@\n-    native_scale = getDesktopScale(output_name);\n-\n-    if (native_scale <= 0) {\n-        native_scale = 1;\n-    }\n-\n-    gdk_scale = getScale(\"GDK_SCALE\");\n-\n-    return gdk_scale > 0 ? native_scale * gdk_scale : native_scale;\n+    return getScale(\"GDK_SCALE\");\n","filename":"src\/java.desktop\/unix\/native\/common\/awt\/systemscale\/systemScale.c","additions":3,"deletions":175,"binary":false,"changes":178,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n-double getNativeScaleFactor(char *output_name);\n+double getNativeScaleFactor();\n","filename":"src\/java.desktop\/unix\/native\/common\/awt\/systemscale\/systemScale.h","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1721,43 +1721,1 @@\n-    if (usingXinerama && XScreenCount(awt_display) > 0) {\n-        XRRScreenResources *res = awt_XRRGetScreenResources(awt_display,\n-                                                    RootWindow(awt_display, 0));\n-        if (res) {\n-            if (res->noutput > screen) {\n-                XRROutputInfo *output_info = awt_XRRGetOutputInfo(awt_display,\n-                                                     res, res->outputs[screen]);\n-                if (output_info) {\n-                    if (output_info->crtc) {\n-                        XRRCrtcInfo *crtc_info =\n-                                    awt_XRRGetCrtcInfo (awt_display, res,\n-                                                        output_info->crtc);\n-                        if (crtc_info) {\n-                            if (crtc_info->mode) {\n-                                int i;\n-                                for (i = 0; i < res->nmode; i++) {\n-                                    XRRModeInfo *mode = &res->modes[i];\n-                                    if (mode->id == crtc_info->mode) {\n-                                        float rate = 0;\n-                                        if (mode->hTotal && mode->vTotal) {\n-                                             rate = ((float)mode->dotClock \/\n-                                                    ((float)mode->hTotal *\n-                                                    (float)mode->vTotal));\n-                                        }\n-                                        displayMode = X11GD_CreateDisplayMode(\n-                                                           env,\n-                                                           mode->width,\n-                                                           mode->height,\n-                                                           BIT_DEPTH_MULTI,\n-                                                           (int)(rate +.2));\n-                                        break;\n-                                    }\n-                                }\n-                            }\n-                            awt_XRRFreeCrtcInfo(crtc_info);\n-                        }\n-                    }\n-                    awt_XRRFreeOutputInfo(output_info);\n-                }\n-            }\n-            awt_XRRFreeScreenResources(res);\n-        }\n-    } else {\n+    if (screen < ScreenCount(awt_display)) {\n@@ -1813,39 +1771,2 @@\n-    if (usingXinerama && XScreenCount(awt_display) > 0) {\n-        XRRScreenResources *res = awt_XRRGetScreenResources(awt_display,\n-                                                    RootWindow(awt_display, 0));\n-        if (res) {\n-           if (res->noutput > screen) {\n-                XRROutputInfo *output_info = awt_XRRGetOutputInfo(awt_display,\n-                                                     res, res->outputs[screen]);\n-                if (output_info) {\n-                    int i;\n-                    for (i = 0; i < output_info->nmode; i++) {\n-                        RRMode m = output_info->modes[i];\n-                        int j;\n-                        XRRModeInfo *mode;\n-                        for (j = 0; j < res->nmode; j++) {\n-                            mode = &res->modes[j];\n-                            if (mode->id == m) {\n-                                 float rate = 0;\n-                                 if (mode->hTotal && mode->vTotal) {\n-                                     rate = ((float)mode->dotClock \/\n-                                                   ((float)mode->hTotal *\n-                                                          (float)mode->vTotal));\n-                                 }\n-                                 X11GD_AddDisplayMode(env, arrayList,\n-                                        mode->width, mode->height,\n-                                              BIT_DEPTH_MULTI, (int)(rate +.2));\n-                                 if ((*env)->ExceptionCheck(env)) {\n-                                     goto ret0;\n-                                 }\n-                                 break;\n-                            }\n-                        }\n-                    }\n-ret0:\n-                    awt_XRRFreeOutputInfo(output_info);\n-                }\n-            }\n-            awt_XRRFreeScreenResources(res);\n-        }\n-    } else {\n+    if (XScreenCount(awt_display) > 0) {\n+\n@@ -2009,36 +1930,0 @@\n-static char *get_output_screen_name(JNIEnv *env, int screen) {\n-#ifdef NO_XRANDR\n-    return NULL;\n-#else\n-    if (!awt_XRRGetScreenResources || !awt_XRRGetOutputInfo) {\n-        return NULL;\n-    }\n-    char *name = NULL;\n-    AWT_LOCK();\n-    int scr = 0, out = 0;\n-    if (usingXinerama && XScreenCount(awt_display) > 0) {\n-        out = screen;\n-    } else {\n-        scr = screen;\n-    }\n-\n-    XRRScreenResources *res = awt_XRRGetScreenResources(awt_display,\n-                                                  RootWindow(awt_display, scr));\n-    if (res) {\n-       if (res->noutput > out) {\n-            XRROutputInfo *output_info = awt_XRRGetOutputInfo(awt_display,\n-                                                        res, res->outputs[out]);\n-            if (output_info) {\n-                if (output_info->name) {\n-                    name = strdup(output_info->name);\n-                }\n-                awt_XRRFreeOutputInfo(output_info);\n-            }\n-        }\n-        awt_XRRFreeScreenResources(res);\n-    }\n-    AWT_UNLOCK();\n-    return name;\n-#endif \/* NO_XRANDR *\/\n-}\n-\n@@ -2053,7 +1938,2 @@\n-    \/\/ in case of Xinerama individual screen scales are not supported\n-    char *name = get_output_screen_name(env, usingXinerama ? 0 : screen);\n-    double scale = getNativeScaleFactor(name);\n-    if (name) {\n-        free(name);\n-    }\n-    return scale;\n+\n+    return getNativeScaleFactor();\n","filename":"src\/java.desktop\/unix\/native\/libawt_xawt\/awt\/awt_GraphicsEnv.c","additions":6,"deletions":126,"binary":false,"changes":132,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -814,1 +814,1 @@\n-    *scaleFactor = (float)getNativeScaleFactor(NULL);\n+    *scaleFactor = (float)getNativeScaleFactor();\n","filename":"src\/java.desktop\/unix\/native\/libsplashscreen\/splashscreen_sys.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}