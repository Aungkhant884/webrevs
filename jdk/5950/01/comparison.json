{"files":[{"patch":"@@ -1262,2 +1262,8 @@\n-            byte[] encrData = createEncryptedData(password);\n-            if (!certProtectionAlgorithm.equalsIgnoreCase(\"NONE\")) {\n+            byte[] certsData = getCertificateData();\n+            if (password != null && !certProtectionAlgorithm.equalsIgnoreCase(\"NONE\")) {\n+                \/\/ -- SEQUENCE of EncryptedData\n+                DerOutputStream encrData = new DerOutputStream();\n+                encrData.putInteger(0);\n+                encrData.write(encryptContent(certsData, password));\n+                DerOutputStream encrDataContent = new DerOutputStream();\n+                encrDataContent.write(DerValue.tag_Sequence, encrData);\n@@ -1266,1 +1272,1 @@\n-                                new DerValue(encrData));\n+                                new DerValue(encrDataContent.toByteArray()));\n@@ -1269,1 +1275,1 @@\n-                ContentInfo dataContentInfo = new ContentInfo(encrData);\n+                ContentInfo dataContentInfo = new ContentInfo(certsData);\n@@ -1292,1 +1298,1 @@\n-        if (!macAlgorithm.equalsIgnoreCase(\"NONE\")) {\n+        if (password != null && !macAlgorithm.equalsIgnoreCase(\"NONE\")) {\n@@ -1707,3 +1713,2 @@\n-     * Create EncryptedData content type, that contains EncryptedContentInfo.\n-     * Includes certificates in individual SafeBags of type CertBag.\n-     * Each CertBag may include pkcs12 attributes\n+     * Create Data content type, includes certificates in individual\n+     * SafeBags of type CertBag. Each CertBag may include pkcs12 attributes\n@@ -1712,1 +1717,1 @@\n-    private byte[] createEncryptedData(char[] password)\n+    private byte[] getCertificateData()\n@@ -1806,16 +1811,1 @@\n-        byte[] safeBagData = safeBagValue.toByteArray();\n-\n-        \/\/ encrypt the content (EncryptedContentInfo)\n-        if (!certProtectionAlgorithm.equalsIgnoreCase(\"NONE\")) {\n-            byte[] encrContentInfo = encryptContent(safeBagData, password);\n-\n-            \/\/ -- SEQUENCE of EncryptedData\n-            DerOutputStream encrData = new DerOutputStream();\n-            DerOutputStream encrDataContent = new DerOutputStream();\n-            encrData.putInteger(0);\n-            encrData.write(encrContentInfo);\n-            encrDataContent.write(DerValue.tag_Sequence, encrData);\n-            return encrDataContent.toByteArray();\n-        } else {\n-            return safeBagData;\n-        }\n+        return safeBagValue.toByteArray();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs12\/PKCS12KeyStore.java","additions":15,"deletions":25,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8202299\n+ * @bug 8202299 8231107\n@@ -30,1 +30,1 @@\n- * @summary Java Keystore fails to load PKCS12\/PFX certificates created in WindowsServer2016\n+ * @summary Testing empty (any of null, \"\", \"\\0\") password behaviors\n@@ -41,0 +41,1 @@\n+import java.util.Arrays;\n@@ -55,3 +56,3 @@\n-        try (FileOutputStream fos = new FileOutputStream(\"p12\")) {\n-            ks.store(fos, new char[1]);\n-        }\n+\n+        \/\/ 8202299: interop between new char[0] and new char[1]\n+        store(ks, \"p12\", new char[1]);\n@@ -63,0 +64,26 @@\n+\n+        ks = KeyStore.getInstance(new File(\"p12\"), new char[1]);\n+        Asserts.assertTrue(ks.getKey(\"a\", new char[1]) != null);\n+        Asserts.assertTrue(ks.getCertificate(\"a\") != null);\n+\n+        \/\/ 8231107: Store with null password makes it password-less\n+        store(ks, \"p00\", null);\n+\n+        \/\/ Can read cert and key with any password\n+        for (char[] pass: new char[][] {\n+                new char[0],    \/\/ password actually used before 8202299\n+                new char[1],    \/\/ the interoperability before 8202299\n+                null,           \/\/ password-less after 8202299\n+                \"whatever\".toCharArray()\n+        }) {\n+            System.out.println(\"with password \" + Arrays.toString(pass));\n+            ks = KeyStore.getInstance(new File(\"p00\"), pass);\n+            Asserts.assertTrue(ks.getKey(\"a\", new char[1]) != null);\n+            Asserts.assertTrue(ks.getCertificate(\"a\") != null);\n+        }\n+    }\n+\n+    static void store(KeyStore ks, String file, char[] pass) throws Exception {\n+        try (FileOutputStream fos = new FileOutputStream(file)) {\n+            ks.store(fos, pass);\n+        }\n","filename":"test\/jdk\/sun\/security\/pkcs12\/EmptyPassword.java","additions":33,"deletions":6,"binary":false,"changes":39,"status":"modified"}]}