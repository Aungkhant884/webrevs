{"files":[{"patch":"@@ -1400,2 +1400,2 @@\n-        Name invoker = lambdaForm.names[pos+1];\n-        Name result  = lambdaForm.names[pos+2];\n+        Name invoker = lambdaForm.names[pos + 1];\n+        Name result  = lambdaForm.names[pos + 2];\n@@ -1405,1 +1405,1 @@\n-            .dropParameterTypes(0,1) \/\/ drop collector\n+            .dropParameterTypes(0, 1) \/\/ drop collector\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InvokerBytecodeGenerator.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -721,3 +721,3 @@\n-        final int POS_COLLECT_ARGS  = pos;\n-        final int POS_TABLE_SWITCH  = pos + 1;\n-        final int POS_UNBOX_RESULT  = pos + 2;\n+        final int POS_COLLECT_ARGS = pos;\n+        final int POS_TABLE_SWITCH = pos + 1;\n+        final int POS_UNBOX_RESULT = pos + 2;\n@@ -725,3 +725,3 @@\n-        Name collectArgs  = names[POS_COLLECT_ARGS];\n-        Name tableSwitch  = names[POS_TABLE_SWITCH];\n-        Name unboxResult  = names[POS_UNBOX_RESULT];\n+        Name collectArgs = names[POS_COLLECT_ARGS];\n+        Name tableSwitch = names[POS_TABLE_SWITCH];\n+        Name unboxResult = names[POS_UNBOX_RESULT];\n@@ -731,2 +731,2 @@\n-                tableSwitch.lastUseIndex(collectArgs)  == 3 &&    \/\/ t_{n+1}:L=MethodHandleImpl.<invoker>(*, *, *, t_{n});\n-                lastUseIndex(collectArgs)  == POS_TABLE_SWITCH && \/\/ t_{n} is local: used only in t_{n+1}\n+                tableSwitch.lastUseIndex(collectArgs) == 3 &&     \/\/ t_{n+1}:L=MethodHandleImpl.<invoker>(*, *, *, t_{n});\n+                lastUseIndex(collectArgs) == POS_TABLE_SWITCH &&  \/\/ t_{n} is local: used only in t_{n+1}\n@@ -1097,2 +1097,0 @@\n-        private final MethodHandleImpl.Intrinsic intrinsicName;\n-        private final Object intrinsicData;\n@@ -1101,7 +1099,1 @@\n-            this(resolvedHandle.internalMemberName(), resolvedHandle, MethodHandleImpl.Intrinsic.NONE, null);\n-        }\n-        NamedFunction(MethodHandle resolvedHandle, MethodHandleImpl.Intrinsic intrinsic) {\n-            this(resolvedHandle.internalMemberName(), resolvedHandle, intrinsic, null);\n-        }\n-        NamedFunction(MethodHandle resolvedHandle, MethodHandleImpl.Intrinsic intrinsic, Object intrinsicData) {\n-            this(resolvedHandle.internalMemberName(), resolvedHandle, intrinsic, intrinsicData);\n+            this(resolvedHandle.internalMemberName(), resolvedHandle);\n@@ -1110,6 +1102,0 @@\n-            this(member, resolvedHandle, MethodHandleImpl.Intrinsic.NONE, null);\n-        }\n-        NamedFunction(MemberName member, MethodHandle resolvedHandle, MethodHandleImpl.Intrinsic intrinsic) {\n-            this(member, resolvedHandle, intrinsic, null);\n-        }\n-        NamedFunction(MemberName member, MethodHandle resolvedHandle, MethodHandleImpl.Intrinsic intrinsic, Object intrinsicData) {\n@@ -1118,5 +1104,0 @@\n-            this.intrinsicName = intrinsic;\n-            this.intrinsicData = intrinsicData;\n-            assert(resolvedHandle == null ||\n-                   resolvedHandle.intrinsicName() == MethodHandleImpl.Intrinsic.NONE ||\n-                   resolvedHandle.intrinsicName() == intrinsic) : resolvedHandle.intrinsicName() + \" != \" + intrinsic;\n@@ -1135,2 +1116,0 @@\n-            this.intrinsicName = MethodHandleImpl.Intrinsic.NONE;\n-            this.intrinsicData = null;\n@@ -1289,1 +1268,3 @@\n-            return intrinsicName;\n+            return resolvedHandle != null\n+                ? resolvedHandle.intrinsicName()\n+                : MethodHandleImpl.Intrinsic.NONE;\n@@ -1293,1 +1274,3 @@\n-            return intrinsicData;\n+            return resolvedHandle != null\n+                ? resolvedHandle.intrinsicData()\n+                : null;\n@@ -1775,2 +1758,2 @@\n-                idFun = new NamedFunction(idMem, SimpleMethodHandle.make(idMem.getInvocationType(), idForm),\n-                            MethodHandleImpl.Intrinsic.IDENTITY);\n+                idFun = new NamedFunction(idMem, MethodHandleImpl.makeIntrinsic(SimpleMethodHandle.make(idMem.getInvocationType(), idForm),\n+                            MethodHandleImpl.Intrinsic.IDENTITY));\n@@ -1782,2 +1765,2 @@\n-                zeFun = new NamedFunction(zeMem, SimpleMethodHandle.make(zeMem.getInvocationType(), zeForm),\n-                        MethodHandleImpl.Intrinsic.ZERO);\n+                zeFun = new NamedFunction(zeMem, MethodHandleImpl.makeIntrinsic(SimpleMethodHandle.make(zeMem.getInvocationType(), zeForm),\n+                        MethodHandleImpl.Intrinsic.ZERO));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/LambdaForm.java","additions":19,"deletions":36,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import static java.lang.invoke.MethodHandleImpl.makeIntrinsic;\n@@ -622,1 +623,1 @@\n-            Name loadArgument = new Name(new NamedFunction(aload, Intrinsic.ARRAY_LOAD), spreadParam, i);\n+            Name loadArgument = new Name(new NamedFunction(makeIntrinsic(aload, Intrinsic.ARRAY_LOAD)), spreadParam, i);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/LambdaFormEditor.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1682,0 +1682,5 @@\n+    \/*non-public*\/\n+    Object intrinsicData() {\n+        return null;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandle.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -828,1 +828,3 @@\n-        names[SELECT_ALT] = new Name(new NamedFunction(getConstantHandle(MH_selectAlternative), Intrinsic.SELECT_ALTERNATIVE), names[TEST], names[GET_TARGET], names[GET_FALLBACK]);\n+        names[SELECT_ALT] = new Name(new NamedFunction(\n+                makeIntrinsic(getConstantHandle(MH_selectAlternative), Intrinsic.SELECT_ALTERNATIVE)),\n+                names[TEST], names[GET_TARGET], names[GET_FALLBACK]);\n@@ -899,1 +901,1 @@\n-        names[BOXED_ARGS] = new Name(new NamedFunction(invokeBasic, Intrinsic.GUARD_WITH_CATCH), args);\n+        names[BOXED_ARGS] = new Name(new NamedFunction(makeIntrinsic(invokeBasic, Intrinsic.GUARD_WITH_CATCH)), args);\n@@ -1246,0 +1248,1 @@\n+        private final Object intrinsicData;\n@@ -1248,0 +1251,4 @@\n+           this(target, intrinsicName, null);\n+        }\n+\n+        IntrinsicMethodHandle(MethodHandle target, Intrinsic intrinsicName, Object intrinsicData) {\n@@ -1251,0 +1258,1 @@\n+            this.intrinsicData = intrinsicData;\n@@ -1263,0 +1271,5 @@\n+        @Override\n+        Object intrinsicData() {\n+            return intrinsicData;\n+        }\n+\n@@ -1288,0 +1301,4 @@\n+        return makeIntrinsic(target, intrinsicName, null);\n+    }\n+\n+    static MethodHandle makeIntrinsic(MethodHandle target, Intrinsic intrinsicName, Object intrinsicData) {\n@@ -1290,1 +1307,1 @@\n-        return new IntrinsicMethodHandle(target, intrinsicName);\n+        return new IntrinsicMethodHandle(target, intrinsicName, intrinsicData);\n@@ -1612,1 +1629,1 @@\n-            names[BOXED_ARGS] = new Name(new NamedFunction(invokeBasic, Intrinsic.LOOP), args);\n+            names[BOXED_ARGS] = new Name(new NamedFunction(makeIntrinsic(invokeBasic, Intrinsic.LOOP)), args);\n@@ -1849,1 +1866,1 @@\n-        names[BOXED_ARGS] = new Name(new NamedFunction(invokeBasic, Intrinsic.TRY_FINALLY), args);\n+        names[BOXED_ARGS] = new Name(new NamedFunction(makeIntrinsic(invokeBasic, Intrinsic.TRY_FINALLY)), args);\n@@ -1951,1 +1968,1 @@\n-            names[storeNameCursor] = new Name(new NamedFunction(storeFunc, Intrinsic.ARRAY_STORE),\n+            names[storeNameCursor] = new Name(new NamedFunction(makeIntrinsic(storeFunc, Intrinsic.ARRAY_STORE)),\n@@ -1993,0 +2010,2 @@\n+        private static final Map<TableSwitchCacheKey, LambdaForm> CACHE = new ConcurrentHashMap<>();\n+\n@@ -2008,1 +2027,0 @@\n-\n@@ -2015,2 +2033,0 @@\n-    private static final Map<TableSwitchCacheKey, LambdaForm> TABLE_SWITCH_LAMBDA_FORM_CACHE = new ConcurrentHashMap<>();\n-\n@@ -2026,1 +2042,1 @@\n-        LambdaForm lform = TABLE_SWITCH_LAMBDA_FORM_CACHE.get(key);\n+        LambdaForm lform = TableSwitchCacheKey.CACHE.get(key);\n@@ -2066,1 +2082,1 @@\n-            names[BOXED_ARGS] = new Name(new NamedFunction(invokeBasic, Intrinsic.TABLE_SWITCH, numCases), args);\n+            names[BOXED_ARGS] = new Name(new NamedFunction(makeIntrinsic(invokeBasic, Intrinsic.TABLE_SWITCH, numCases)), args);\n@@ -2082,1 +2098,1 @@\n-        LambdaForm prev = TABLE_SWITCH_LAMBDA_FORM_CACHE.putIfAbsent(key, lform);\n+        LambdaForm prev = TableSwitchCacheKey.CACHE.putIfAbsent(key, lform);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleImpl.java","additions":28,"deletions":12,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -90,3 +90,1 @@\n-        \"25\",\n-        \"50\",\n-        \"100\"\n+        \"25\"\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodHandlesTableSwitchConstant.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -62,1 +62,0 @@\n-    private static final MethodHandle MH_SUBTRACT;\n@@ -68,2 +67,0 @@\n-            MH_SUBTRACT = MethodHandles.lookup().findStatic(MethodHandlesTableSwitchOpaqueSingle.class, \"subtract\",\n-                    MethodType.methodType(int.class, int.class, int.class));\n@@ -87,3 +84,1 @@\n-        \"25\",\n-        \"50\",\n-        \"100\"\n+        \"25\"\n@@ -93,6 +88,0 @@\n-    @Param({\n-        \"0\",\n-        \"150\"\n-    })\n-    public int offset;\n-\n@@ -107,3 +96,0 @@\n-        if (offset != 0) {\n-            switcher = MethodHandles.filterArguments(switcher, 0, MethodHandles.insertArguments(MH_SUBTRACT, 1, offset));\n-        }\n@@ -112,1 +98,1 @@\n-        input = ThreadLocalRandom.current().nextInt(numCases) + offset;\n+        input = ThreadLocalRandom.current().nextInt(numCases);\n@@ -119,4 +105,0 @@\n-    private static int subtract(int a, int b) {\n-        return a - b;\n-    }\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodHandlesTableSwitchOpaqueSingle.java","additions":2,"deletions":20,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -62,1 +62,0 @@\n-    private static final MethodHandle MH_SUBTRACT;\n@@ -68,2 +67,0 @@\n-            MH_SUBTRACT = MethodHandles.lookup().findStatic(MethodHandlesTableSwitchRandom.class, \"subtract\",\n-                    MethodType.methodType(int.class, int.class, int.class));\n@@ -87,3 +84,1 @@\n-        \"25\",\n-        \"50\",\n-        \"100\"\n+        \"25\"\n@@ -93,6 +88,0 @@\n-    @Param({\n-        \"0\",\n-        \"150\"\n-    })\n-    public int offset;\n-\n@@ -113,3 +102,0 @@\n-        if (offset != 0) {\n-            switcher = MethodHandles.filterArguments(switcher, 0, MethodHandles.insertArguments(MH_SUBTRACT, 1, offset));\n-        }\n@@ -122,1 +108,1 @@\n-            inputs[i] = rand.nextInt(numCases) + offset;\n+            inputs[i] = rand.nextInt(numCases);\n@@ -134,4 +120,0 @@\n-    private static int subtract(int a, int b) {\n-        return a - b;\n-    }\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/invoke\/MethodHandlesTableSwitchRandom.java","additions":2,"deletions":20,"binary":false,"changes":22,"status":"modified"}]}