{"files":[{"patch":"@@ -3633,1 +3633,10 @@\n-  for (int c = 0; c < x->number_of_arguments(); c++) {\n+  \/\/ If we have a receiver, then null-check and handle it separately\n+  bool handle_receiver = x->needs_null_check();\n+  if (handle_receiver) {\n+    CodeEmitInfo* info = state_for(x);\n+    LIRItem vitem(x->receiver(), this);\n+    vitem.load_item();\n+    __ null_check(vitem.result(), info);\n+  }\n+\n+  for (int c = (handle_receiver ? 1 : 0); c < x->number_of_arguments(); c++) {\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -160,2 +160,1 @@\n-      _signature->return_type()->basic_type() == T_VOID &&\n-      h_m->intrinsic_id() == vmIntrinsics::_none) {\n+      _signature->return_type()->basic_type() == T_VOID) {\n","filename":"src\/hotspot\/share\/ci\/ciMethod.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -537,1 +537,1 @@\n-  do_intrinsic(_blackhole,                java_lang_Object,       blackhole_name, star_name, F_RN)                      \\\n+  do_intrinsic(_blackhole,                java_lang_Object,       blackhole_name, star_name, F_S)                       \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -6861,0 +6861,10 @@\n+  bool has_receiver = !callee()->is_static();\n+  Node* receiver = NULL;\n+  if (has_receiver) {\n+    receiver = null_check(argument(0));\n+    \/\/ Unconditionally null, full stop\n+    if (stopped()) {\n+      return true;\n+    }\n+  }\n+\n@@ -6864,0 +6874,3 @@\n+  if (has_receiver) {\n+    bh->add_req(receiver);\n+  }\n@@ -6865,1 +6878,1 @@\n-  for (uint i = 0; i < nargs; i++) {\n+  for (uint i = has_receiver ? 1 : 0; i < nargs; i++) {\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -115,1 +115,2 @@\n-            t.bh_s_boolean(false);\n+            t.bh_i_boolean(false);\n+            throw new IllegalStateException(\"Expected NPE\");\n@@ -117,1 +118,0 @@\n-            throw new IllegalStateException(\"Unexpected NPE\");\n@@ -130,1 +130,2 @@\n-            BH_SF_TARGET.bh_s_boolean(false);\n+            BH_SF_TARGET.bh_i_boolean(false);\n+            throw new IllegalStateException(\"Expected NPE\");\n@@ -132,1 +133,0 @@\n-            throw new IllegalStateException(\"Unexpected NPE\");\n@@ -145,1 +145,2 @@\n-            BH_S_TARGET.bh_s_boolean(false);\n+            BH_S_TARGET.bh_i_boolean(false);\n+            throw new IllegalStateException(\"Expected NPE\");\n@@ -147,1 +148,0 @@\n-            throw new IllegalStateException(\"Unexpected NPE\");\n@@ -160,1 +160,2 @@\n-            BH_TARGET.bh_s_boolean(false);\n+            BH_TARGET.bh_i_boolean(false);\n+            throw new IllegalStateException(\"Expected NPE\");\n@@ -162,1 +163,0 @@\n-            throw new IllegalStateException(\"Unexpected NPE\");\n","filename":"test\/hotspot\/jtreg\/compiler\/blackhole\/BlackholeNullCheckTest.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"}]}