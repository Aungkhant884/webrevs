{"files":[{"patch":"@@ -2030,2 +2030,1 @@\n-  if (target->can_be_blackholed() &&\n-      compilation()->directive()->should_blackhole(target)) {\n+  if (target->should_be_blackholed()) {\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -159,1 +159,2 @@\n-  _can_be_blackholed = _signature->return_type()->basic_type() == T_VOID;\n+  _should_be_blackholed = CompilerOracle::should_blackhole(h_m) &&\n+                          _signature->return_type()->basic_type() == T_VOID;\n@@ -191,1 +192,1 @@\n-  _can_be_blackholed = false;\n+  _should_be_blackholed = false;\n","filename":"src\/hotspot\/share\/ci\/ciMethod.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-  bool _can_be_blackholed;\n+  bool _should_be_blackholed;\n@@ -356,1 +356,1 @@\n-  bool can_be_blackholed() const { return _can_be_blackholed; }\n+  bool should_be_blackholed() const              { return _should_be_blackholed; }\n","filename":"src\/hotspot\/share\/ci\/ciMethod.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -458,11 +458,0 @@\n-bool DirectiveSet::should_blackhole(ciMethod* m) {\n-  m->check_is_loaded();\n-  VM_ENTRY_MARK;\n-  methodHandle mh(THREAD, m->get_Method());\n-\n-  if (!CompilerDirectivesIgnoreCompileCommandsOption) {\n-    return CompilerOracle::should_blackhole(mh);\n-  }\n-  return false;\n-}\n-\n","filename":"src\/hotspot\/share\/compiler\/compilerDirectives.cpp","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -116,1 +116,0 @@\n-  bool should_blackhole(ciMethod* m);\n","filename":"src\/hotspot\/share\/compiler\/compilerDirectives.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -115,3 +115,1 @@\n-  if (callee->can_be_blackholed() &&\n-      Compile::current()->directive()->should_blackhole(callee) &&\n-      Matcher::match_rule_supported(Op_CallBlackhole)) {\n+  if (callee->should_be_blackholed()) {\n","filename":"src\/hotspot\/share\/opto\/doCall.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"}]}