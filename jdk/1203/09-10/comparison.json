{"files":[{"patch":"@@ -128,4 +128,0 @@\n-  bool is_static = method()->is_static();\n-  address target = is_static ? SharedRuntime::get_resolve_static_call_stub()\n-                             : SharedRuntime::get_resolve_opt_virtual_call_stub();\n-\n@@ -136,11 +132,1 @@\n-  CallBlackholeNode* call = new CallBlackholeNode(tf(), target);\n-\n-  if (!is_static) {\n-    \/\/ Make an explicit receiver null_check as part of this call.\n-    \/\/ Since we share a map with the caller, his JVMS gets adjusted.\n-    kit.null_check_receiver_before_call(method());\n-    if (kit.stopped()) {\n-      \/\/ And dump it back to the caller, decorated with any exceptions:\n-      return kit.transfer_exceptions_into_jvms();\n-    }\n-  }\n+  CallBlackholeNode* call = new CallBlackholeNode(tf(), NULL);\n@@ -173,1 +159,3 @@\n-  kit.push_node(method()->return_type()->basic_type(), kit.top());\n+  BasicType ret_type = method()->return_type()->basic_type();\n+  assert(ret_type == T_VOID, \"Must be void\");\n+  kit.push_node(ret_type, kit.top());\n","filename":"src\/hotspot\/share\/opto\/callGenerator.cpp","additions":4,"deletions":16,"binary":false,"changes":20,"status":"modified"}]}