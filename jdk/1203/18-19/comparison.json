{"files":[{"patch":"@@ -159,2 +159,1 @@\n-  if (CompilerOracle::should_blackhole(h_m) &&\n-      _signature->return_type()->basic_type() == T_VOID) {\n+  if (CompilerOracle::should_blackhole(h_m)) {\n","filename":"src\/hotspot\/share\/ci\/ciMethod.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -415,1 +415,10 @@\n-  return (check_predicate(CompileCommand::Blackhole, method));\n+  if (check_predicate(CompileCommand::Blackhole, method)) {\n+    if (method->result_type() == T_VOID) {\n+      return true;\n+    } else {\n+      ttyLocker ttyl;\n+      tty->print_cr(\"Warning: blackhole compile command only works for methods with void type: %s\",\n+                    method->name_and_sig_as_C_string());\n+    }\n+  }\n+  return false;\n","filename":"src\/hotspot\/share\/compiler\/compilerOracle.cpp","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -3460,0 +3460,1 @@\n+#ifndef PRODUCT\n@@ -3478,0 +3479,1 @@\n+#endif\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2020, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @library \/test\/lib\n+ * @build compiler.blackhole.BlackholeTarget\n+ * @run driver compiler.blackhole.BlackholeNonVoidWarning\n+ *\/\n+\n+package compiler.blackhole;\n+\n+import java.io.IOException;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class BlackholeNonVoidWarning {\n+\n+    private static final int CYCLES = 1_000_000;\n+    private static final int TRIES = 10;\n+\n+    public static void main(String[] args) throws IOException {\n+        if (args.length == 0) {\n+            driver();\n+        } else {\n+            runner();\n+        }\n+    }\n+\n+    public static void driver() throws IOException {\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+            \"-Xmx128m\",\n+            \"-XX:CompileCommand=quiet\",\n+            \"-XX:CompileCommand=blackhole,compiler\/blackhole\/BlackholeTarget.bh_*\",\n+            \"compiler.blackhole.BlackholeNonVoidWarning\",\n+            \"run\"\n+        );\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        output.shouldHaveExitValue(0);\n+        output.shouldContain(\"blackhole compile command only works for methods with void type: compiler.blackhole.BlackholeTarget.bh_sr_int(I)I\");\n+    }\n+\n+    public static void runner() {\n+        for (int t = 0; t < TRIES; t++) {\n+            run();\n+        }\n+    }\n+\n+    public static void run() {\n+        for (int c = 0; c < CYCLES; c++) {\n+            if (BlackholeTarget.bh_sr_int(c) != 0) {\n+                throw new AssertionError(\"Return value error\");\n+            }\n+        }\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/blackhole\/BlackholeNonVoidWarning.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"}]}