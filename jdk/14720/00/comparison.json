{"files":[{"patch":"@@ -650,5 +650,11 @@\n-     * For backward compatibility, the default implementation of this method\n-     * behaves as follows. If this ClassLoader object is registered as\n-     * parallel capable, the method returns a dedicated object associated\n-     * with the specified class name. Otherwise, the method returns this\n-     * ClassLoader object.\n+     * If this {@code ClassLoader} object is registered as parallel capable,\n+     * this method returns a dedicated object associated with the specified\n+     * class name. Otherwise, this method returns this {@code ClassLoader} object.\n+     *\n+     * @apiNote\n+     * This method allows parallel capable class loaders to implement\n+     * finer-grained locking scheme such that multiple threads may load classes\n+     * concurrently without deadlocks.  For non-parallel-capable class loaders,\n+     * the {@code ClassLoader} object is held during the class loading operations.\n+     * Class loaders with non-hierarchical delegation should be {@linkplain\n+     * #registerAsParallelCapable() registered as parallel capable} to prevent deadlocks.\n@@ -662,1 +668,1 @@\n-     *         If registered as parallel capable and {@code className} is null\n+     *         If registered as parallel capable and {@code className} is {@code null}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ClassLoader.java","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"}]}