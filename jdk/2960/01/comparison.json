{"files":[{"patch":"@@ -46,1 +46,1 @@\n-#include \"gc\/g1\/g1GCTypes.hpp\"\n+#include \"gc\/g1\/g1GCPauseType.hpp\"\n@@ -2851,12 +2851,9 @@\n-const char* G1CollectedHeap::young_gc_name() const {\n-  if (collector_state()->in_concurrent_start_gc()) {\n-    return \"Pause Young (Concurrent Start)\";\n-  } else if (collector_state()->in_young_only_phase()) {\n-    if (collector_state()->in_young_gc_before_mixed()) {\n-      return \"Pause Young (Prepare Mixed)\";\n-    } else {\n-      return \"Pause Young (Normal)\";\n-    }\n-  } else {\n-    return \"Pause Young (Mixed)\";\n-  }\n+void G1CollectedHeap::set_young_gc_name(char* young_gc_name) {\n+  G1GCPauseType pause_type =\n+    \/\/ The strings for all Concurrent Start pauses are the same, so the parameter\n+    \/\/ does not matter here.\n+    collector_state()->young_gc_pause_type(false \/* concurrent_operation_is_full_mark *\/);\n+  snprintf(young_gc_name,\n+           MaxYoungGCNameLength,\n+           \"Pause Young (%s)\",\n+           G1GCPauseTypeHelper::to_string(pause_type));\n@@ -2885,0 +2882,15 @@\n+void G1CollectedHeap::gc_tracer_report_gc_start() {\n+  _gc_timer_stw->register_gc_start();\n+  _gc_tracer_stw->report_gc_start(gc_cause(), _gc_timer_stw->gc_start());\n+}\n+\n+void G1CollectedHeap::gc_tracer_report_gc_end(bool concurrent_operation_is_full_mark,\n+                                              G1EvacuationInfo& evacuation_info) {\n+  _gc_tracer_stw->report_evacuation_info(&evacuation_info);\n+  _gc_tracer_stw->report_tenuring_threshold(_policy->tenuring_threshold());\n+\n+  _gc_timer_stw->register_gc_end();\n+  _gc_tracer_stw->report_gc_end(_gc_timer_stw->gc_end(),\n+  _gc_timer_stw->time_partitions());\n+}\n+\n@@ -2893,2 +2905,1 @@\n-  _gc_timer_stw->register_gc_start();\n-  _gc_tracer_stw->report_gc_start(gc_cause(), _gc_timer_stw->gc_start());\n+  gc_tracer_report_gc_start();\n@@ -2929,2 +2940,0 @@\n-    _gc_tracer_stw->report_yc_phase(collector_state()->young_gc_phase());\n-\n@@ -2933,1 +2942,4 @@\n-    GCTraceTime(Info, gc) tm(young_gc_name(), NULL, gc_cause(), true);\n+    char young_gc_name[MaxYoungGCNameLength];\n+    set_young_gc_name(young_gc_name);\n+\n+    GCTraceTime(Info, gc) tm(young_gc_name, NULL, gc_cause(), true);\n@@ -2943,1 +2955,1 @@\n-                         collector_state()->young_gc_phase() == Mixed \/* all_memory_pools_affected *\/);\n+                         collector_state()->in_mixed_phase() \/* all_memory_pools_affected *\/);\n@@ -3011,0 +3023,4 @@\n+        \/\/ Need to report the collection pause now since record_collection_pause_end()\n+        \/\/ modifies it to the next state.\n+        _gc_tracer_stw->report_young_gc_pause(collector_state()->young_gc_pause_type(concurrent_operation_is_full_mark));\n+\n@@ -3045,4 +3061,1 @@\n-    _gc_tracer_stw->report_evacuation_info(&evacuation_info);\n-    _gc_tracer_stw->report_tenuring_threshold(_policy->tenuring_threshold());\n-    _gc_timer_stw->register_gc_end();\n-    _gc_tracer_stw->report_gc_end(_gc_timer_stw->gc_end(), _gc_timer_stw->time_partitions());\n+    gc_tracer_report_gc_end(concurrent_operation_is_full_mark, evacuation_info);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":36,"deletions":23,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n-#include \"gc\/g1\/g1GCTypes.hpp\"\n+#include \"gc\/g1\/g1GCPauseType.hpp\"\n@@ -381,1 +381,4 @@\n-  const char* young_gc_name() const;\n+  static const uint MaxYoungGCNameLength = 128;\n+  \/\/ Sets given young_gc_name to the canonical young gc pause string. Young_gc_name\n+  \/\/ must be at least of length MaxYoungGCNameLength.\n+  void set_young_gc_name(char* young_gc_name);\n@@ -391,0 +394,3 @@\n+  void gc_tracer_report_gc_start();\n+  void gc_tracer_report_gc_end(bool concurrent_operation_is_full_mark, G1EvacuationInfo& evacuation_info);\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-#include \"gc\/g1\/g1GCTypes.hpp\"\n+#include \"gc\/g1\/g1GCPauseType.hpp\"\n@@ -33,1 +33,2 @@\n-    return concurrent_operation_is_full_mark ? ConcurrentStartMarkGC : ConcurrentStartUndoGC;\n+    return concurrent_operation_is_full_mark ? G1GCPauseType::ConcurrentStartMarkGC :\n+                                               G1GCPauseType::ConcurrentStartUndoGC;\n@@ -36,1 +37,1 @@\n-    return LastYoungGC;\n+    return G1GCPauseType::LastYoungGC;\n@@ -40,1 +41,1 @@\n-    return MixedGC;\n+    return G1GCPauseType::MixedGC;\n@@ -44,15 +45,1 @@\n-    return YoungGC;\n-  }\n-}\n-\n-G1GCYoungPhase G1CollectorState::young_gc_phase() const {\n-  assert(!in_full_gc(), \"must be\");\n-\n-  if (in_concurrent_start_gc()) {\n-    return ConcurrentStart;\n-  } else if (mark_or_rebuild_in_progress()) {\n-    return DuringMarkOrRebuild;\n-  } else if (in_young_only_phase()) {\n-    return Normal;\n-  } else {\n-    return Mixed;\n+    return G1GCPauseType::YoungGC;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectorState.cpp","additions":6,"deletions":19,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-#include \"gc\/g1\/g1GCTypes.hpp\"\n+#include \"gc\/g1\/g1GCPauseType.hpp\"\n@@ -115,2 +115,0 @@\n-  G1GCYoungPhase young_gc_phase() const;\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectorState.hpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_GC_G1_G1GCPAUSETYPES_HPP\n+#define SHARE_GC_G1_G1GCPAUSETYPES_HPP\n+\n+#include \"utilities\/debug.hpp\"\n+#include \"utilities\/enumIterator.hpp\"\n+\n+enum class G1GCPauseType : uint {\n+  YoungGC,\n+  LastYoungGC,\n+  ConcurrentStartMarkGC,\n+  ConcurrentStartUndoGC,\n+  Cleanup,\n+  Remark,\n+  MixedGC,\n+  FullGC\n+};\n+\n+ENUMERATOR_RANGE(G1GCPauseType, G1GCPauseType::YoungGC, G1GCPauseType::FullGC)\n+\n+class G1GCPauseTypeHelper {\n+public:\n+\n+  static void assert_is_young_pause(G1GCPauseType type) {\n+    assert(type != G1GCPauseType::FullGC, \"must be\");\n+    assert(type != G1GCPauseType::Remark, \"must be\");\n+    assert(type != G1GCPauseType::Cleanup, \"must be\");\n+  }\n+\n+  static bool is_young_only_pause(G1GCPauseType type) {\n+    assert_is_young_pause(type);\n+    return type == G1GCPauseType::ConcurrentStartUndoGC ||\n+           type == G1GCPauseType::ConcurrentStartMarkGC ||\n+           type == G1GCPauseType::LastYoungGC ||\n+           type == G1GCPauseType::YoungGC;\n+  }\n+\n+  static bool is_mixed_pause(G1GCPauseType type) {\n+    assert_is_young_pause(type);\n+    return type == G1GCPauseType::MixedGC;\n+  }\n+\n+  static bool is_last_young_pause(G1GCPauseType type) {\n+    assert_is_young_pause(type);\n+    return type == G1GCPauseType::LastYoungGC;\n+  }\n+\n+  static bool is_concurrent_start_pause(G1GCPauseType type) {\n+    assert_is_young_pause(type);\n+    return type == G1GCPauseType::ConcurrentStartMarkGC || type == G1GCPauseType::ConcurrentStartUndoGC;\n+  }\n+\n+  static const char* to_string(G1GCPauseType type) {\n+    static const char* pause_strings[] = { \"Normal\",\n+                                           \"Prepare Mixed\",\n+                                           \"Concurrent Start\", \/\/ Do not distinguish between the different\n+                                           \"Concurrent Start\", \/\/ Concurrent Start pauses.\n+                                           \"Cleanup\",\n+                                           \"Remark\",\n+                                           \"Mixed\",\n+                                           \"Full\",\n+                                           \"Invalid\"};\n+    return pause_strings[static_cast<uint>(type)];\n+  }\n+};\n+\n+#endif \/\/ SHARE_GC_G1_G1GCPAUSETYPES_HPP\n","filename":"src\/hotspot\/share\/gc\/g1\/g1GCPauseType.hpp","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"},{"patch":"@@ -1,94 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_GC_G1_G1GCTYPES_HPP\n-#define SHARE_GC_G1_G1GCTYPES_HPP\n-\n-#include \"utilities\/debug.hpp\"\n-\n-\/\/ Enumarate the phases in which the collection cycle can be.\n-enum G1GCYoungPhase {\n-  Normal,\n-  ConcurrentStart,\n-  DuringMarkOrRebuild,\n-  Mixed,\n-  G1GCYoungPhaseEndSentinel\n-};\n-\n-enum G1GCPauseType {\n-  YoungGC,\n-  LastYoungGC,\n-  ConcurrentStartMarkGC,\n-  ConcurrentStartUndoGC,\n-  Cleanup,\n-  Remark,\n-  MixedGC,\n-  FullGC,\n-  G1GCPauseTypeEndSentinel\n-};\n-\n-class G1GCTypeHelper {\n- public:\n-\n-  static void assert_is_young_pause(G1GCPauseType type) {\n-    assert(type != FullGC, \"must be\");\n-    assert(type != Remark, \"must be\");\n-    assert(type != Cleanup, \"must be\");\n-  }\n-\n-  static bool is_young_only_pause(G1GCPauseType type) {\n-    assert_is_young_pause(type);\n-    return type == ConcurrentStartUndoGC ||\n-           type == ConcurrentStartMarkGC ||\n-           type == LastYoungGC ||\n-           type == YoungGC;\n-  }\n-\n-  static bool is_mixed_pause(G1GCPauseType type) {\n-    assert_is_young_pause(type);\n-    return type == MixedGC;\n-  }\n-\n-  static bool is_last_young_pause(G1GCPauseType type) {\n-    assert_is_young_pause(type);\n-    return type == LastYoungGC;\n-  }\n-\n-  static bool is_concurrent_start_pause(G1GCPauseType type) {\n-    assert_is_young_pause(type);\n-    return type == ConcurrentStartMarkGC || type == ConcurrentStartUndoGC;\n-  }\n-\n-  static const char* to_string(G1GCYoungPhase type) {\n-    switch(type) {\n-      case Normal: return \"Normal\";\n-      case ConcurrentStart: return \"Concurrent Start\";\n-      case DuringMarkOrRebuild: return \"During Mark\";\n-      case Mixed: return \"Mixed\";\n-      default: ShouldNotReachHere(); return NULL;\n-    }\n-  }\n-};\n-\n-#endif \/\/ SHARE_GC_G1_G1GCTYPES_HPP\n","filename":"src\/hotspot\/share\/gc\/g1\/g1GCTypes.hpp","additions":0,"deletions":94,"binary":false,"changes":94,"status":"deleted"},{"patch":"@@ -460,1 +460,1 @@\n-  record_pause(FullGC, _full_collection_start_sec, end_sec);\n+  record_pause(G1GCPauseType::FullGC, _full_collection_start_sec, end_sec);\n@@ -554,1 +554,1 @@\n-  record_pause(Remark, _mark_remark_start_sec, end_time_sec);\n+  record_pause(G1GCPauseType::Remark, _mark_remark_start_sec, end_time_sec);\n@@ -638,1 +638,1 @@\n-  if (G1GCTypeHelper::is_concurrent_start_pause(this_pause)) {\n+  if (G1GCPauseTypeHelper::is_concurrent_start_pause(this_pause)) {\n@@ -668,2 +668,2 @@\n-  if (G1GCTypeHelper::is_last_young_pause(this_pause)) {\n-    assert(!G1GCTypeHelper::is_concurrent_start_pause(this_pause),\n+  if (G1GCPauseTypeHelper::is_last_young_pause(this_pause)) {\n+    assert(!G1GCPauseTypeHelper::is_concurrent_start_pause(this_pause),\n@@ -676,1 +676,1 @@\n-  } else if (G1GCTypeHelper::is_mixed_pause(this_pause)) {\n+  } else if (G1GCPauseTypeHelper::is_mixed_pause(this_pause)) {\n@@ -687,1 +687,1 @@\n-    assert(G1GCTypeHelper::is_young_only_pause(this_pause), \"must be\");\n+    assert(G1GCPauseTypeHelper::is_young_only_pause(this_pause), \"must be\");\n@@ -712,1 +712,1 @@\n-                                                G1GCTypeHelper::is_young_only_pause(this_pause));\n+                                                G1GCPauseTypeHelper::is_young_only_pause(this_pause));\n@@ -724,1 +724,1 @@\n-                                               G1GCTypeHelper::is_young_only_pause(this_pause));\n+                                               G1GCPauseTypeHelper::is_young_only_pause(this_pause));\n@@ -739,1 +739,1 @@\n-                                                G1GCTypeHelper::is_young_only_pause(this_pause));\n+                                                G1GCPauseTypeHelper::is_young_only_pause(this_pause));\n@@ -769,1 +769,1 @@\n-    if (G1GCTypeHelper::is_young_only_pause(this_pause)) {\n+    if (G1GCPauseTypeHelper::is_young_only_pause(this_pause)) {\n@@ -775,1 +775,1 @@\n-  assert(!(G1GCTypeHelper::is_concurrent_start_pause(this_pause) && collector_state()->mark_or_rebuild_in_progress()),\n+  assert(!(G1GCPauseTypeHelper::is_concurrent_start_pause(this_pause) && collector_state()->mark_or_rebuild_in_progress()),\n@@ -777,1 +777,1 @@\n-  if (G1GCTypeHelper::is_concurrent_start_pause(this_pause)) {\n+  if (G1GCPauseTypeHelper::is_concurrent_start_pause(this_pause)) {\n@@ -797,1 +797,1 @@\n-                           G1GCTypeHelper::is_young_only_pause(this_pause));\n+                           G1GCPauseTypeHelper::is_young_only_pause(this_pause));\n@@ -1123,1 +1123,1 @@\n-  record_pause(Cleanup, _mark_cleanup_start_sec, end_sec);\n+  record_pause(G1GCPauseType::Cleanup, _mark_cleanup_start_sec, end_sec);\n@@ -1168,1 +1168,1 @@\n-  if (gc_type == Cleanup || gc_type == Remark) {\n+  if (gc_type == G1GCPauseType::Cleanup || gc_type == G1GCPauseType::Remark) {\n@@ -1179,1 +1179,1 @@\n-  if (gc_type != FullGC) {\n+  if (gc_type != G1GCPauseType::FullGC) {\n@@ -1195,1 +1195,1 @@\n-    case FullGC:\n+    case G1GCPauseType::FullGC:\n@@ -1198,4 +1198,4 @@\n-    case Cleanup:\n-    case Remark:\n-    case YoungGC:\n-    case LastYoungGC:\n+    case G1GCPauseType::Cleanup:\n+    case G1GCPauseType::Remark:\n+    case G1GCPauseType::YoungGC:\n+    case G1GCPauseType::LastYoungGC:\n@@ -1204,1 +1204,1 @@\n-    case ConcurrentStartMarkGC:\n+    case G1GCPauseType::ConcurrentStartMarkGC:\n@@ -1212,1 +1212,1 @@\n-    case ConcurrentStartUndoGC:\n+    case G1GCPauseType::ConcurrentStartUndoGC:\n@@ -1217,1 +1217,1 @@\n-    case MixedGC:\n+    case G1GCPauseType::MixedGC:\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.cpp","additions":25,"deletions":25,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n-#include \"gc\/g1\/g1GCTypes.hpp\"\n+#include \"gc\/g1\/g1GCPauseType.hpp\"\n@@ -40,5 +40,6 @@\n-  static const u4 nof_entries = G1HeapRegionTraceType::G1HeapRegionTypeEndSentinel;\n-  writer.write_count(nof_entries);\n-  for (u4 i = 0; i < nof_entries; ++i) {\n-    writer.write_key(i);\n-    writer.write(G1HeapRegionTraceType::to_string((G1HeapRegionTraceType::Type)i));\n+    static const u4 nof_entries = G1HeapRegionTraceType::G1HeapRegionTypeEndSentinel;\n+    writer.write_count(nof_entries);\n+    for (u4 i = 0; i < nof_entries; ++i) {\n+      writer.write_key(i);\n+      writer.write(G1HeapRegionTraceType::to_string((G1HeapRegionTraceType::Type)i));\n+    }\n@@ -46,1 +47,0 @@\n-}\n@@ -52,1 +52,2 @@\n-    static const u4 nof_entries = G1GCYoungPhaseEndSentinel;\n+    constexpr EnumRange<G1GCPauseType> types{};\n+    static const u4 nof_entries = static_cast<u4>(types.size());\n@@ -54,3 +55,3 @@\n-    for (u4 i = 0; i < nof_entries; ++i) {\n-      writer.write_key(i);\n-      writer.write(G1GCTypeHelper::to_string((G1GCYoungPhase)i));\n+    for (auto index : types) {\n+      writer.write_key(static_cast<uint>(index));\n+      writer.write(G1GCPauseTypeHelper::to_string(index));\n@@ -75,2 +76,3 @@\n-void G1NewTracer::report_yc_phase(G1GCYoungPhase phase) {\n-  _g1_young_gc_info.set_phase(phase);\n+void G1NewTracer::report_young_gc_pause(G1GCPauseType pause) {\n+  G1GCPauseTypeHelper::assert_is_young_pause(pause);\n+  _pause = pause;\n@@ -129,0 +131,3 @@\n+  \/\/ Check that the pause type has been updated to something valid for this event.\n+  G1GCPauseTypeHelper::assert_is_young_pause(_pause);\n+\n@@ -132,1 +137,1 @@\n-    e.set_type(_g1_young_gc_info.phase());\n+    e.set_type(static_cast<uint>(_pause));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Trace.cpp","additions":20,"deletions":15,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-#include \"gc\/g1\/g1GCTypes.hpp\"\n+#include \"gc\/g1\/g1GCPauseType.hpp\"\n@@ -35,10 +35,0 @@\n-class G1YoungGCInfo {\n-  G1GCYoungPhase _phase;\n-public:\n-  G1YoungGCInfo() : _phase(G1GCYoungPhaseEndSentinel) {}\n-  void set_phase(G1GCYoungPhase phase) {\n-    _phase = phase;\n-  }\n-  G1GCYoungPhase phase() const { return _phase; }\n-};\n-\n@@ -46,1 +36,1 @@\n-  G1YoungGCInfo _g1_young_gc_info;\n+  G1GCPauseType _pause;\n@@ -49,1 +39,5 @@\n-  G1NewTracer() : YoungGCTracer(G1New) {}\n+  G1NewTracer() :\n+    YoungGCTracer(G1New),\n+    _pause(G1GCPauseType::FullGC) \/\/ Initialize to something invalid. For this event, which\n+                                  \/\/ is about young collections, FullGC is not a valid value.\n+  { }\n@@ -52,1 +46,1 @@\n-  void report_yc_phase(G1GCYoungPhase phase);\n+  void report_young_gc_pause(G1GCPauseType pause);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Trace.hpp","additions":9,"deletions":15,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -296,1 +296,1 @@\n-  <Event name=\"G1GarbageCollection\" category=\"Java Virtual Machine, GC, Collector\" label=\"G1 Garbage Collection\" description=\"Extra information specific to G1 Garbage Collections\">\n+  <Event name=\"G1GarbageCollection\" category=\"Java Virtual Machine, GC, Collector\" label=\"G1 Young Garbage Collection\" description=\"Extra information specific to G1 Young Garbage Collections\">\n@@ -298,1 +298,1 @@\n-    <Field type=\"G1YCType\" name=\"type\" label=\"Type\" \/>\n+    <Field type=\"G1YCType\" name=\"type\" label=\"Type\"\/>\n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xml","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,45 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-package sun.jvm.hotspot.gc.shared;\n-\n-\/\/These definitions should be kept in sync with the definitions in the HotSpot\n-\/\/code.\n-\n-public enum G1YCType {\n-  Normal (\"Normal\"),\n-  ConcurrentStart (\"Concurrent Start\"),\n-  DuringMark (\"During Mark\"),\n-  Mixed (\"Mixed\"),\n-  G1YCTypeEndSentinel (\"Unknown\");\n-\n-  private final String value;\n-\n-  G1YCType(String val) {\n-    this.value = val;\n-  }\n-  public String value() {\n-    return value;\n-  }\n-}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/shared\/G1YCType.java","additions":0,"deletions":45,"binary":false,"changes":45,"status":"deleted"}]}