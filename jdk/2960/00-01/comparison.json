{"files":[{"patch":"@@ -2851,12 +2851,9 @@\n-const char* G1CollectedHeap::young_gc_name() const {\n-  if (collector_state()->in_concurrent_start_gc()) {\n-    return \"Pause Young (Concurrent Start)\";\n-  } else if (collector_state()->in_young_only_phase()) {\n-    if (collector_state()->in_young_gc_before_mixed()) {\n-      return \"Pause Young (Prepare Mixed)\";\n-    } else {\n-      return \"Pause Young (Normal)\";\n-    }\n-  } else {\n-    return \"Pause Young (Mixed)\";\n-  }\n+void G1CollectedHeap::set_young_gc_name(char* young_gc_name) {\n+  G1GCPauseType pause_type =\n+    \/\/ The strings for all Concurrent Start pauses are the same, so the parameter\n+    \/\/ does not matter here.\n+    collector_state()->young_gc_pause_type(false \/* concurrent_operation_is_full_mark *\/);\n+  snprintf(young_gc_name,\n+           MaxYoungGCNameLength,\n+           \"Pause Young (%s)\",\n+           G1GCPauseTypeHelper::to_string(pause_type));\n@@ -2945,1 +2942,4 @@\n-    GCTraceTime(Info, gc) tm(young_gc_name(), NULL, gc_cause(), true);\n+    char young_gc_name[MaxYoungGCNameLength];\n+    set_young_gc_name(young_gc_name);\n+\n+    GCTraceTime(Info, gc) tm(young_gc_name, NULL, gc_cause(), true);\n@@ -3025,1 +3025,1 @@\n-        _gc_tracer_stw->report_yc_pause(collector_state()->young_gc_pause_type(concurrent_operation_is_full_mark));\n+        _gc_tracer_stw->report_young_gc_pause(collector_state()->young_gc_pause_type(concurrent_operation_is_full_mark));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -381,1 +381,4 @@\n-  const char* young_gc_name() const;\n+  static const uint MaxYoungGCNameLength = 128;\n+  \/\/ Sets given young_gc_name to the canonical young gc pause string. Young_gc_name\n+  \/\/ must be at least of length MaxYoungGCNameLength.\n+  void set_young_gc_name(char* young_gc_name);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -39,2 +39,1 @@\n-  FullGC,\n-  Invalid\n+  FullGC\n@@ -80,2 +79,2 @@\n-                                           \"Concurrent Start Mark\",\n-                                           \"Concurrent Start Undo\",\n+                                           \"Concurrent Start\", \/\/ Do not distinguish between the different\n+                                           \"Concurrent Start\", \/\/ Concurrent Start pauses.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1GCPauseType.hpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -52,1 +52,2 @@\n-    static const u4 nof_entries = static_cast<u4>(EnumRange<G1GCPauseType>{}.size());\n+    constexpr EnumRange<G1GCPauseType> types{};\n+    static const u4 nof_entries = static_cast<u4>(types.size());\n@@ -54,1 +55,1 @@\n-    for (auto index : EnumRange<G1GCPauseType>{}) {\n+    for (auto index : types) {\n@@ -75,1 +76,2 @@\n-void G1NewTracer::report_yc_pause(G1GCPauseType pause) {\n+void G1NewTracer::report_young_gc_pause(G1GCPauseType pause) {\n+  G1GCPauseTypeHelper::assert_is_young_pause(pause);\n@@ -129,0 +131,3 @@\n+  \/\/ Check that the pause type has been updated to something valid for this event.\n+  G1GCPauseTypeHelper::assert_is_young_pause(_pause);\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Trace.cpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -39,1 +39,5 @@\n-  G1NewTracer() : YoungGCTracer(G1New), _pause(G1GCPauseType::Invalid) {}\n+  G1NewTracer() :\n+    YoungGCTracer(G1New),\n+    _pause(G1GCPauseType::FullGC) \/\/ Initialize to something invalid. For this event, which\n+                                  \/\/ is about young collections, FullGC is not a valid value.\n+  { }\n@@ -42,1 +46,1 @@\n-  void report_yc_pause(G1GCPauseType pause);\n+  void report_young_gc_pause(G1GCPauseType pause);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Trace.hpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1,45 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-package sun.jvm.hotspot.gc.shared;\n-\n-\/\/These definitions should be kept in sync with the definitions in the HotSpot\n-\/\/code.\n-\n-public enum G1YCType {\n-  Normal (\"Normal\"),\n-  ConcurrentStart (\"Concurrent Start\"),\n-  DuringMark (\"During Mark\"),\n-  Mixed (\"Mixed\"),\n-  G1YCTypeEndSentinel (\"Unknown\");\n-\n-  private final String value;\n-\n-  G1YCType(String val) {\n-    this.value = val;\n-  }\n-  public String value() {\n-    return value;\n-  }\n-}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/shared\/G1YCType.java","additions":0,"deletions":45,"binary":false,"changes":45,"status":"deleted"}]}