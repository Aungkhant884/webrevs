{"files":[{"patch":"@@ -33,1 +33,0 @@\n-import java.text.MessageFormat;\n@@ -95,0 +94,6 @@\n+    \/\/ constants used for TZDB short names\n+    private static final String NBSP = \"\\u00A0\";\n+    private static final String STD = \"std\";\n+    private static final String DST = \"dst\";\n+    private static final String NO_SUBST = \"-\";\n+\n@@ -126,0 +131,4 @@\n+    \/\/ TZDB Short Names Map\n+    private static final Map<String, String> tzdbShortNamesMap = HashMap.newHashMap(512);\n+    private static final Map<String, String> tzdbSubstLetters = HashMap.newHashMap(512);\n+\n@@ -287,0 +296,3 @@\n+        \/\/ TZDB short names map\n+        generateTZDBShortNamesMap();\n+\n@@ -760,1 +772,1 @@\n-            if (data instanceof String[]) {\n+            if (data instanceof String[] tznames) {\n@@ -763,1 +775,1 @@\n-                    names.put(METAZONE_ID_PREFIX + META_ETCUTC_ZONE_NAME, data);\n+                    names.put(METAZONE_ID_PREFIX + META_ETCUTC_ZONE_NAME, tznames);\n@@ -767,1 +779,3 @@\n-                    names.put(tzid, data);\n+                    \/\/ TZDB short names\n+                    fillTZDBShortNames(tzid, tznames);\n+                    names.put(tzid, tznames);\n@@ -774,1 +788,3 @@\n-                    if (data instanceof String[]) {\n+                    if (data instanceof String[] tznames) {\n+                        \/\/ TZDB short names\n+                        fillTZDBShortNames(tzid, tznames);\n@@ -1249,0 +1265,119 @@\n+    \/*\n+     * Generates two maps from TZ database files, where they have usual abbreviation\n+     * of the time zone names as \"FORMAT\".\n+     *\n+     * `tzdbShortNamesMap` maps the time zone id, such as \"America\/Los_Angeles\" to\n+     * its FORMAT and Rule which determines the substitution. In \"America\/Los_Angeles\"\n+     * case, its FORMAT is \"P%sT\" and the Rule is \"US\". They are concatenated with\n+     * an NBSP, so the eventual mapping will be:\n+     *\n+     * \"America\/Los_Angeles\" -> \"P%sT<NBSP>US\"\n+     *\n+     * The other map, `tzdbSubstLetters` maps the Rule to its substitution letters.\n+     * The key of the map is the Rule name, appended with \"<NBSP>std\" or \"<NBSP>dst\"\n+     * depending on the savings, e.g.,\n+     *\n+     * \"US<NBSP>std\" -> \"S\"\n+     * \"US<NBSP>dst\" -> \"D\"\n+     *\n+     * These two mappings resolve the short names for time zones in each type,\n+     * such as:\n+     *\n+     * Standard short name for \"America\/Los_Angeles\" -> \"PST\"\n+     * DST short name for \"America\/Los_Angeles\" -> \"PDT\"\n+     * Generic short name for \"America\/Los_Angeles\" -> \"PT\"\n+     *\/\n+    private static void generateTZDBShortNamesMap() throws IOException {\n+        Files.walk(Path.of(tzDataDir), 1, FileVisitOption.FOLLOW_LINKS)\n+            .filter(p -> p.toFile().isFile())\n+            .forEach(p -> {\n+                try {\n+                    String zone = null;\n+                    String rule = null;\n+                    String format = null;\n+                    for (var line : Files.readAllLines(p)) {\n+                        if (line.contains(\"#STDOFF\")) continue;\n+                        line = line.replaceAll(\"[ \\t]*#.*\", \"\");\n+\n+                        \/\/ Zone line\n+                        if (line.startsWith(\"Zone\")) {\n+                            var zl = line.split(\"[ \\t]+\", -1);\n+                            zone = zl[1];\n+                            rule = zl[3];\n+                            format = zl[4];\n+                        } else {\n+                            if (zone != null) {\n+                                if (line.isBlank()) {\n+                                    tzdbShortNamesMap.put(zone, format + NBSP + rule);\n+                                    zone = null;\n+                                    rule = null;\n+                                    format = null;\n+                                } else {\n+                                    var s = line.split(\"[ \\t]+\", -1);\n+                                    rule = s[2];\n+                                    format = s[3];\n+                                }\n+                            }\n+                        }\n+\n+                        \/\/ Rule line\n+                        if (line.startsWith(\"Rule\")) {\n+                            var rl = line.split(\"[ \\t]+\", -1);\n+                            tzdbSubstLetters.put(rl[1] + NBSP + (rl[8].equals(\"0\") ? STD : DST),\n+                                    rl[9].replace(NO_SUBST, \"\"));\n+                        }\n+                    }\n+                } catch (IOException ioe) {\n+                    throw new UncheckedIOException(ioe);\n+                }\n+            });\n+    }\n+\n+    \/*\n+     * Fill the TZDB short names if there is no name provided by the CLDR\n+     *\/\n+    private static void fillTZDBShortNames(String tzid, String[] names) {\n+        var val = tzdbShortNamesMap.get(tzid);\n+        if (val != null) {\n+            var format = val.split(NBSP)[0];\n+            var rule = val.split(NBSP)[1];\n+            IntStream.of(1, 3, 5).forEach(i -> {\n+                if (names[i] == null) {\n+                    if (format.contains(\"%s\")) {\n+                        names[i] = switch (i) {\n+                            case 1 -> format.formatted(tzdbSubstLetters.get(rule + NBSP + STD));\n+                            case 3 -> format.formatted(tzdbSubstLetters.get(rule + NBSP + DST));\n+                            case 5 -> format.formatted(\"\");\n+                            default -> throw new InternalError();\n+                        };\n+                    } else if (format.contains(\"\/\")) { \/\/ such as \"+08\/+09\" or \"GMT\/BST\"\n+                        names[i] = switch (i) {\n+                            case 1, 5 -> convertGMTName(format.substring(0, format.indexOf(\"\/\")));\n+                            case 3 -> convertGMTName(format.substring(format.indexOf(\"\/\") + 1));\n+                            default -> throw new InternalError();\n+                        };\n+                    } else {\n+                        names[i] = convertGMTName(format);\n+                    }\n+                }\n+            });\n+        }\n+    }\n+\n+    \/*\n+     * Convert TZDB offsets to JDK's offsets, eg, \"-08\" to \"GMT-08:00\".\n+     * If it cannot recognize the pattern, return the argument as is.\n+     *\/\n+    private static String convertGMTName(String f) {\n+        try {\n+            \/\/ Should pre-fill GMT format once COMPAT is gone.\n+            \/\/ Till then, fall back to GMT format at runtime, after COMPAT short\n+            \/\/ names are populated\n+            ZoneOffset.of(f);\n+            return null;\n+        } catch (DateTimeException dte) {\n+            \/\/ textual representation. return as is\n+        }\n+        return f;\n+    }\n+\n","filename":"make\/jdk\/src\/classes\/build\/tools\/cldrconverter\/CLDRConverter.java","additions":140,"deletions":5,"binary":false,"changes":145,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+TZ_DATA_DIR := $(MODULE_SRC)\/..\/java.base\/share\/data\/tzdata\n@@ -50,1 +51,2 @@\n-\t    -o $(GENSRC_DIR))\n+\t    -o $(GENSRC_DIR) \\\n+\t    -tzdatadir $(TZ_DATA_DIR))\n","filename":"make\/modules\/jdk.localedata\/Gensrc.gmk","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8303440\n+ * @bug 8303440 8317979\n@@ -46,2 +46,2 @@\n-        \/\/ Assuming CLDR's SHORT name for \"America\/Los_Angeles\"\n-        \/\/ produces \"UTC\\u212208:00\"\n+        \/\/ Assuming CLDR's SHORT name for \"America\/Juneau\"\n+        \/\/ produces \"UTC\\u212209:00\"\n@@ -63,1 +63,1 @@\n-        var zdt = ZonedDateTime.of(2023, 3, 3, 0, 0, 0, 0, ZoneId.of(\"America\/Los_Angeles\"));\n+        var zdt = ZonedDateTime.of(2023, 3, 3, 0, 0, 0, 0, ZoneId.of(\"America\/Juneau\"));\n@@ -65,1 +65,1 @@\n-        assertEquals(formatted, \"UTC\\u221208:00\");\n+        assertEquals(formatted, \"UTC\\u221209:00\");\n","filename":"test\/jdk\/java\/time\/test\/java\/time\/format\/TestUTCParse.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n- *      8234347 8236548\n+ *      8234347 8236548 8317979\n@@ -51,1 +51,1 @@\n-            \"GMT-08:00\",\n+            \"PST\",\n@@ -53,1 +53,1 @@\n-            \"GMT-07:00\",\n+            \"PDT\",\n@@ -60,1 +60,1 @@\n-            \"GMT-08:00\",\n+            \"PST\",\n@@ -62,1 +62,1 @@\n-            \"GMT-07:00\",\n+            \"PDT\",\n@@ -69,1 +69,1 @@\n-            \"GMT-08:00\",\n+            \"PST\",\n@@ -71,1 +71,1 @@\n-            \"GMT-07:00\",\n+            \"PDT\",\n","filename":"test\/jdk\/java\/util\/TimeZone\/CLDRDisplayNamesTest.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -5243,1 +5243,1 @@\n-# bug 6507067\n+# bug 6507067 8317979\n@@ -5245,1 +5245,1 @@\n-TimeZoneNames\/zh_TW\/Asia\\\/Taipei\/2=\n+TimeZoneNames\/zh_TW\/Asia\\\/Taipei\/2=CST\n","filename":"test\/jdk\/sun\/text\/resources\/LocaleData.cldr","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n- *      8301206 8303472\n+ *      8301206 8303472 8317979\n","filename":"test\/jdk\/sun\/text\/resources\/LocaleDataTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}