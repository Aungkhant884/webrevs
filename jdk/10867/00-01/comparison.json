{"files":[{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test libm intrinsics\n+ * @library \/test\/lib \/\n+ *\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *                   -XX:-BackgroundCompilation -XX:-UseOnStackReplacement\n+ *                   compiler.floatingpoint.TestLibmIntrinsics\n+ *\/\n+\n+package compiler.floatingpoint;\n+\n+import compiler.whitebox.CompilerWhiteBoxTest;\n+import jdk.test.whitebox.WhiteBox;\n+\n+import java.lang.reflect.Method;\n+\n+public class TestLibmIntrinsics {\n+\n+    private static final WhiteBox WHITE_BOX = WhiteBox.getWhiteBox();\n+\n+    private static final double pi = 3.1415926;\n+\n+    private static final double expected = 2.5355263553695413;\n+\n+    static double m() {\n+        return Math.pow(pi, Math.sin(Math.cos(Math.tan(Math.log(Math.log10(Math.exp(pi)))))));\n+    }\n+\n+    static void proofread(double ans) {\n+        if (Math.abs(ans - expected) > 1e8) {\n+            System.out.println(\"actual = \" + ans + \" but expected = \" + expected);\n+            throw new RuntimeException(\"Test Failed\");\n+        }\n+    }\n+\n+    static public void main(String[] args) throws NoSuchMethodException {\n+        Method test_method = compiler.floatingpoint.TestLibmIntrinsics.class.getDeclaredMethod(\"m\");\n+\n+        double interpreter_result = m();\n+\n+        \/\/ Compile with C1 if possible\n+        WHITE_BOX.enqueueMethodForCompilation(test_method, CompilerWhiteBoxTest.COMP_LEVEL_SIMPLE);\n+\n+        double c1_result = m();\n+\n+        WHITE_BOX.deoptimizeMethod(test_method);\n+\n+        \/\/ Compile it with C2 if possible\n+        WHITE_BOX.enqueueMethodForCompilation(test_method, CompilerWhiteBoxTest.COMP_LEVEL_FULL_OPTIMIZATION);\n+\n+        double c2_result = m();\n+\n+        if (interpreter_result != c1_result ||\n+            interpreter_result != c2_result ||\n+            c1_result != c2_result) {\n+            System.out.println(\"interpreter = \" + interpreter_result + \" c1 = \" + c1_result + \" c2 = \" + c2_result);\n+            throw new RuntimeException(\"Test Failed\");\n+        }\n+\n+        proofread(interpreter_result);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/floatingpoint\/TestLibmIntrinsics.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"}]}