{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,3 +27,1 @@\n- * @modules java.base\/sun.net.www\n- * @library ..\/..\/httptest\/\n- * @build HttpCallback TestHttpServer HttpTransaction\n+ * @library \/test\/lib\n@@ -35,3 +33,19 @@\n-import java.net.*;\n-import java.io.*;\n-import java.util.*;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.io.PrintWriter;\n+import java.net.CacheRequest;\n+import java.net.CacheResponse;\n+import java.net.HttpURLConnection;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.Proxy;\n+import java.net.ResponseCache;\n+import java.net.URI;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n@@ -47,1 +61,1 @@\n-   static TestHttpServer server;\n+   static HttpServer server;\n@@ -59,1 +73,4 @@\n-     server = new TestHttpServer(httpTrans, 1, 10, loopback, 0);\n+     server = HttpServer.create(new InetSocketAddress(loopback, 0), 10);\n+     server.createContext(\"\/\", httpTrans);\n+     server.setExecutor(Executors.newSingleThreadExecutor());\n+     server.start();\n@@ -64,1 +81,1 @@\n-         System.out.println(\"http server listen on: \" + server.getLocalPort());\n+         System.out.println(\"http server listen on: \" + server.getAddress().getPort());\n@@ -66,1 +83,1 @@\n-                            server.getLocalPort(), \"\/\");\n+                            server.getAddress().getPort(), \"\/\");\n@@ -70,1 +87,1 @@\n-         server.terminate();\n+         server.stop(1);\n@@ -75,1 +92,1 @@\n-class SimpleHttpTransaction implements HttpCallback\n+class SimpleHttpTransaction implements HttpHandler\n@@ -80,1 +97,2 @@\n-   public void request(HttpTransaction trans) {\n+   @Override\n+   public void handle(HttpExchange trans) {\n@@ -82,2 +100,4 @@\n-         trans.setResponseEntityBody(\"\");\n-         trans.sendResponse(200, \"OK\");\n+         trans.sendResponseHeaders(200, 0);\n+         try(PrintWriter pw = new PrintWriter(trans.getResponseBody())) {\n+            pw.print(\"\");\n+         }\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/http\/B6296310.java","additions":36,"deletions":16,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,4 +27,2 @@\n- * @modules java.base\/sun.net.www\n- * @library ..\/..\/httptest\/\n- * @build HttpCallback TestHttpServer ClosedChannelList HttpTransaction\n- * @run main RelativeRedirect\n+ * @library \/test\/lib\n+ * @run main\/othervm RelativeRedirect\n@@ -35,2 +33,11 @@\n-import java.io.*;\n-import java.net.*;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.PrintWriter;\n+import java.net.Authenticator;\n+import java.net.HttpURLConnection;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.PasswordAuthentication;\n+import java.net.Proxy;\n+import java.net.URL;\n+import java.util.concurrent.Executors;\n@@ -38,1 +45,5 @@\n-public class RelativeRedirect implements HttpCallback {\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n+\n+public class RelativeRedirect implements HttpHandler {\n@@ -40,1 +51,2 @@\n-    static TestHttpServer server;\n+    static HttpServer server;\n+\n@@ -53,5 +65,4 @@\n-    void firstReply (HttpTransaction req) throws IOException {\n-        req.addResponseHeader (\"Connection\", \"close\");\n-        req.addResponseHeader (\"Location\", \"\/redirect\/file.html\");\n-        req.sendResponse (302, \"Moved Permamently\");\n-        req.orderlyClose();\n+    void firstReply(HttpExchange req) throws IOException {\n+        req.getResponseHeaders().set(\"Connection\", \"close\");\n+        req.getResponseHeaders().set(\"Location\", \"\/redirect\/file.html\");\n+        req.sendResponseHeaders(302, -1);\n@@ -60,1 +71,1 @@\n-    void secondReply (HttpTransaction req) throws IOException {\n+    void secondReply (HttpExchange req) throws IOException {\n@@ -62,3 +73,5 @@\n-            req.getRequestHeader(\"Host\").equals(authority(server.getLocalPort()))) {\n-            req.setResponseEntityBody (\"Hello .\");\n-            req.sendResponse (200, \"Ok\");\n+            req.getRequestHeaders().get(\"Host\").get(0).equals(authority(server.getAddress().getPort()))) {\n+            req.sendResponseHeaders(200, 0);\n+            try(PrintWriter pw = new PrintWriter(req.getResponseBody())) {\n+                pw.print(\"Hello .\");\n+            }\n@@ -66,2 +79,4 @@\n-            req.setResponseEntityBody (req.getRequestURI().toString());\n-            req.sendResponse (400, \"Bad request\");\n+            req.sendResponseHeaders(400, 0);\n+            try(PrintWriter pw = new PrintWriter(req.getResponseBody())) {\n+                pw.print(req.getRequestURI().toString());\n+            }\n@@ -69,2 +84,0 @@\n-        req.orderlyClose();\n-\n@@ -72,1 +85,3 @@\n-    public void request (HttpTransaction req) {\n+\n+    @Override\n+    public void handle (HttpExchange req) {\n@@ -104,3 +119,6 @@\n-            server = new TestHttpServer (new RelativeRedirect(), 1, 10, loopback, 0);\n-            System.out.println (\"Server: listening on port: \" + server.getLocalPort());\n-            URL url = new URL(\"http:\/\/\" + authority(server.getLocalPort()));\n+            server = HttpServer.create(new InetSocketAddress(loopback, 0), 10);\n+            server.createContext(\"\/\", new RelativeRedirect());\n+            server.setExecutor(Executors.newSingleThreadExecutor());\n+            server.start();\n+            System.out.println (\"Server: listening on port: \" + server.getAddress().getPort());\n+            URL url = new URL(\"http:\/\/\" + authority(server.getAddress().getPort()));\n@@ -115,1 +133,1 @@\n-                server.terminate();\n+                server.stop(1);\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/http\/RelativeRedirect.java","additions":45,"deletions":27,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,0 @@\n- * @modules java.base\/sun.net.www\n- * @library ..\/..\/httptest\/\n- * @build HttpCallback TestHttpServer ClosedChannelList HttpTransaction\n@@ -35,3 +32,21 @@\n-import java.net.*;\n-import java.io.*;\n-import java.util.*;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.PrintWriter;\n+import java.net.CacheRequest;\n+import java.net.CacheResponse;\n+import java.net.HttpURLConnection;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.ResponseCache;\n+import java.net.URI;\n+import java.net.URL;\n+import java.net.URLConnection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.Executors;\n+\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n@@ -40,1 +55,1 @@\n-public class ResponseCacheStream implements HttpCallback {\n+public class ResponseCacheStream implements HttpHandler {\n@@ -42,5 +57,6 @@\n-    void okReply (HttpTransaction req) throws IOException {\n-        req.setResponseEntityBody (\"Hello, This is the response body. Let's make it as long as possible since we need to test the cache mechanism.\");\n-        req.sendResponse (200, \"Ok\");\n-            System.out.println (\"Server: sent response\");\n-        req.orderlyClose();\n+    void okReply (HttpExchange req) throws IOException {\n+        req.sendResponseHeaders(200, 0);\n+        try(PrintWriter pw = new PrintWriter(req.getResponseBody())) {\n+            pw.print(\"Hello, This is the response body. Let's make it as long as possible since we need to test the cache mechanism.\");\n+        }\n+        System.out.println (\"Server: sent response\");\n@@ -49,6 +65,5 @@\n-    public void request (HttpTransaction req) {\n-        try {\n-            okReply (req);\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        }\n+\n+    @Override\n+    public void handle(HttpExchange exchange) throws IOException {\n+        okReply(exchange);\n+        exchange.close();\n@@ -97,1 +112,1 @@\n-    static TestHttpServer server;\n+    static HttpServer server;\n@@ -104,2 +119,5 @@\n-            server = new TestHttpServer (new ResponseCacheStream(), loopback, 0);\n-            System.out.println (\"Server: listening on port: \" + server.getLocalPort());\n+            server = HttpServer.create(new InetSocketAddress(loopback, 0), 10);\n+            server.createContext(\"\/\", new ResponseCacheStream());\n+            server.setExecutor(Executors.newSingleThreadExecutor());\n+            server.start();\n+            System.out.println(\"Server: listening on port: \" + server.getAddress().getPort());\n@@ -109,1 +127,1 @@\n-                .port(server.getLocalPort())\n+                .port(server.getAddress().getPort())\n@@ -152,1 +170,1 @@\n-                server.terminate();\n+                server.stop(1);\n@@ -156,1 +174,1 @@\n-        server.terminate();\n+        server.stop(1);\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/http\/ResponseCacheStream.java","additions":43,"deletions":25,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,0 @@\n- * @modules java.base\/sun.net.www\n- * @library ..\/..\/httptest\/\n@@ -30,2 +28,1 @@\n- * @build HttpCallback TestHttpServer ClosedChannelList HttpTransaction\n- * @run main SetChunkedStreamingMode\n+ * @run main\/othervm SetChunkedStreamingMode\n@@ -35,3 +32,8 @@\n-import java.io.*;\n-import java.net.*;\n-import jdk.test.lib.net.URIBuilder;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.PrintWriter;\n+import java.net.HttpURLConnection;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.URL;\n+import java.util.concurrent.Executors;\n@@ -39,1 +41,4 @@\n-public class SetChunkedStreamingMode implements HttpCallback {\n+import com.sun.net.httpserver.HttpExchange;\n+import com.sun.net.httpserver.HttpHandler;\n+import com.sun.net.httpserver.HttpServer;\n+import jdk.test.lib.net.URIBuilder;\n@@ -41,6 +46,1 @@\n-    void okReply (HttpTransaction req) throws IOException {\n-        req.setResponseEntityBody (\"Hello .\");\n-        req.sendResponse (200, \"Ok\");\n-            System.out.println (\"Server: sent response\");\n-        req.orderlyClose();\n-    }\n+public class SetChunkedStreamingMode implements HttpHandler {\n@@ -48,5 +48,4 @@\n-    public void request (HttpTransaction req) {\n-        try {\n-            okReply (req);\n-        } catch (IOException e) {\n-            e.printStackTrace();\n+    void okReply (HttpExchange req) throws IOException {\n+        req.sendResponseHeaders(200, 0);\n+        try(PrintWriter pw = new PrintWriter(req.getResponseBody())) {\n+            pw.print(\"Hello .\");\n@@ -54,0 +53,1 @@\n+        System.out.println (\"Server: sent response\");\n@@ -56,8 +56,3 @@\n-    static void read (InputStream is) throws IOException {\n-        int c;\n-        System.out.println (\"reading\");\n-        while ((c=is.read()) != -1) {\n-            System.out.write (c);\n-        }\n-        System.out.println (\"\");\n-        System.out.println (\"finished reading\");\n+    @Override\n+    public void handle(HttpExchange exchange) throws IOException {\n+        okReply(exchange);\n@@ -66,1 +61,1 @@\n-    static TestHttpServer server;\n+    static HttpServer server;\n@@ -70,3 +65,6 @@\n-            server = new TestHttpServer(new SetChunkedStreamingMode(), 1, 10,\n-                    InetAddress.getLoopbackAddress(), 0);\n-            System.out.println (\"Server: listening on port: \" + server.getLocalPort());\n+            InetAddress loopback = InetAddress.getLoopbackAddress();\n+            server = HttpServer.create(new InetSocketAddress(loopback, 0), 10);\n+            server.createContext(\"\/\", new SetChunkedStreamingMode());\n+            server.setExecutor(Executors.newSingleThreadExecutor());\n+            server.start();\n+            System.out.println (\"Server: listening on port: \" + server.getAddress().getPort());\n@@ -76,1 +74,1 @@\n-                .port(server.getLocalPort())\n+                .port(server.getAddress().getPort())\n@@ -87,1 +85,1 @@\n-                server.terminate();\n+                server.stop(1);\n@@ -91,1 +89,1 @@\n-        server.terminate();\n+        server.stop(1);\n@@ -95,1 +93,1 @@\n-        server.terminate();\n+        server.stop(1);\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/http\/SetChunkedStreamingMode.java","additions":34,"deletions":36,"binary":false,"changes":70,"status":"modified"}]}