{"files":[{"patch":"@@ -6700,2 +6700,4 @@\n-  static RuntimeStub* generate_jfr_stub(const char* name, address entrypoint) {\n-\n+  \/\/ For c2: c_rarg0 is junk, call to runtime to write a checkpoint.\n+  \/\/ It returns a jobject handle to the event writer.\n+  \/\/ The handle is dereferenced and the return value is the event writer oop.\n+  static RuntimeStub* generate_jfr_write_checkpoint() {\n@@ -6712,1 +6714,1 @@\n-    CodeBuffer code(name, insts_size, locs_size);\n+    CodeBuffer code(\"jfr_write_checkpoint\", insts_size, locs_size);\n@@ -6722,1 +6724,1 @@\n-    __ call_VM_leaf(entrypoint, 1);\n+    __ call_VM_leaf(CAST_FROM_FN_PTR(address, JfrIntrinsicSupport::write_checkpoint), 1);\n@@ -6731,1 +6733,1 @@\n-      RuntimeStub::new_runtime_stub(name, &code, frame_complete,\n+      RuntimeStub::new_runtime_stub(\"jfr_write_checkpoint\", &code, frame_complete,\n@@ -6737,15 +6739,0 @@\n-  \/\/ For c2: c_rarg0 is junk, call to runtime to write a checkpoint.\n-  \/\/ It returns a jobject handle to the event writer.\n-  \/\/ The handle is dereferenced and the return value is the event writer oop.\n-  RuntimeStub* generate_jfr_write_checkpoint() {\n-    return generate_jfr_stub(\"jfr_write_checkpoint\",\n-                              CAST_FROM_FN_PTR(address, JfrIntrinsicSupport::write_checkpoint));\n-  }\n-\n-  \/\/ For c1: call the corresponding runtime routine, it returns a jobject handle to the event writer.\n-  \/\/ The handle is dereferenced and the return value is the event writer oop.\n-  RuntimeStub* generate_jfr_get_event_writer() {\n-    return generate_jfr_stub(\"jfr_get_event_writer\",\n-                              CAST_FROM_FN_PTR(address, JfrIntrinsicSupport::event_writer));\n-  }\n-\n@@ -7749,2 +7736,0 @@\n-    JFR_ONLY(StubRoutines::_jfr_get_event_writer_stub = generate_jfr_get_event_writer();)\n-    JFR_ONLY(StubRoutines::_jfr_get_event_writer = StubRoutines::_jfr_get_event_writer_stub->entry_point();)\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":7,"deletions":22,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -7619,1 +7619,4 @@\n-  static RuntimeStub* generate_jfr_stub(const char* name, address entrypoint) {\n+  \/\/ For c2: c_rarg0 is junk, call to runtime to write a checkpoint.\n+  \/\/ It returns a jobject handle to the event writer.\n+  \/\/ The handle is dereferenced and the return value is the event writer oop.\n+  RuntimeStub* generate_jfr_write_checkpoint() {\n@@ -7630,1 +7633,1 @@\n-    CodeBuffer code(name, insts_size, locs_size);\n+    CodeBuffer code(\"jfr_write_checkpoint\", insts_size, locs_size);\n@@ -7640,1 +7643,1 @@\n-    __ call_VM_leaf(entrypoint, 1);\n+    __ call_VM_leaf(CAST_FROM_FN_PTR(address, JfrIntrinsicSupport::write_checkpoint), 1);\n@@ -7649,1 +7652,1 @@\n-      RuntimeStub::new_runtime_stub(name, &code, frame_complete,\n+      RuntimeStub::new_runtime_stub(\"jfr_write_checkpoint\", &code, frame_complete,\n@@ -7655,15 +7658,0 @@\n-  \/\/ For c2: c_rarg0 is junk, call to runtime to write a checkpoint.\n-  \/\/ It returns a jobject handle to the event writer.\n-  \/\/ The handle is dereferenced and the return value is the event writer oop.\n-  RuntimeStub* generate_jfr_write_checkpoint() {\n-    return generate_jfr_stub(\"jfr_write_checkpoint\",\n-                              CAST_FROM_FN_PTR(address, JfrIntrinsicSupport::write_checkpoint));\n-  }\n-\n-  \/\/ For c1: call the corresponding runtime routine, it returns a jobject handle to the event writer.\n-  \/\/ The handle is dereferenced and the return value is the event writer oop.\n-  RuntimeStub* generate_jfr_get_event_writer() {\n-    return generate_jfr_stub(\"jfr_get_event_writer\",\n-                              CAST_FROM_FN_PTR(address, JfrIntrinsicSupport::event_writer));\n-  }\n-\n@@ -7903,2 +7891,0 @@\n-    JFR_ONLY(StubRoutines::_jfr_get_event_writer_stub = generate_jfr_get_event_writer();)\n-    JFR_ONLY(StubRoutines::_jfr_get_event_writer = StubRoutines::_jfr_get_event_writer_stub->entry_point();)\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":7,"deletions":21,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -231,1 +231,0 @@\n-  case vmIntrinsics::_getEventWriter:\n","filename":"src\/hotspot\/share\/c1\/c1_Compiler.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2901,16 +2901,0 @@\n-#ifdef JFR_HAVE_INTRINSICS\n-\n-void LIRGenerator::do_getEventWriter(Intrinsic* x) {\n-  BasicTypeList signature(0);\n-  CallingConvention* cc = frame_map()->c_calling_convention(&signature);\n-  LIR_Opr reg = result_register_for(x->type());\n-  address entry = StubRoutines::jfr_get_event_writer();\n-  CodeEmitInfo* info = state_for(x, x->state());\n-  __ call_runtime(entry, getThreadTemp(), reg, cc->args(), info);\n-  LIR_Opr result = rlock_result(x);\n-  __ move(reg, result);\n-}\n-\n-#endif\n-\n-\n@@ -2942,3 +2926,0 @@\n-  case vmIntrinsics::_getEventWriter:\n-    do_getEventWriter(x);\n-    break;\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":0,"deletions":19,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -327,1 +327,0 @@\n-  FUNCTION_CASE(entry, StubRoutines::jfr_get_event_writer());\n","filename":"src\/hotspot\/share\/c1\/c1_Runtime1.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -52,8 +52,1 @@\n-#endif\n-\n-void* JfrIntrinsicSupport::event_writer(JavaThread* jt) {\n-  DEBUG_ONLY(assert_precondition(jt);)\n-  \/\/ Can safepoint here.\n-  ThreadInVMfromJava transition(jt);\n-  return JfrJavaEventWriter::event_writer(jt);\n-}\n+#endif \/\/ ASSERT\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrIntrinsics.cpp","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-  static void* event_writer(JavaThread* jt);\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrIntrinsics.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -184,2 +184,0 @@\n-JFR_ONLY(RuntimeStub* StubRoutines::_jfr_get_event_writer_stub = NULL;)\n-JFR_ONLY(address StubRoutines::_jfr_get_event_writer = NULL;)\n","filename":"src\/hotspot\/share\/runtime\/stubRoutines.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -262,2 +262,0 @@\n-  JFR_ONLY(static RuntimeStub* _jfr_get_event_writer_stub;)\n-  JFR_ONLY(static address _jfr_get_event_writer;)\n@@ -442,1 +440,0 @@\n-  JFR_ONLY(static address jfr_get_event_writer() { return _jfr_get_event_writer; })\n","filename":"src\/hotspot\/share\/runtime\/stubRoutines.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"}]}