{"files":[{"patch":"@@ -77,2 +77,0 @@\n-compiler\/vectorapi\/reshape\/TestVectorCastAVX512.java 8278623 generic-x64\n-\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.vectorapi.reshape;\n+\n+import compiler.vectorapi.reshape.tests.TestVectorCast;\n+import compiler.vectorapi.reshape.utils.TestCastMethods;\n+import compiler.vectorapi.reshape.utils.VectorReshapeHelper;\n+\n+\/*\n+ * @test\n+ * @bug 8278623\n+ * @modules jdk.incubator.vector\n+ * @modules java.base\/jdk.internal.misc\n+ * @summary Test that vector cast intrinsics work as intended on avx512bw.\n+ * @requires vm.cpu.features ~= \".*avx512bw.*\"\n+ * @library \/test\/lib \/\n+ * @run driver compiler.vectorapi.reshape.TestVectorCastAVX512BW\n+ *\/\n+public class TestVectorCastAVX512BW {\n+    public static void main(String[] args) {\n+        VectorReshapeHelper.runMainHelper(\n+                TestVectorCast.class,\n+                TestCastMethods.AVX512BW_CAST_TESTS.stream(),\n+                \"-XX:UseAVX=3\");\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/reshape\/TestVectorCastAVX512BW.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -77,2 +77,1 @@\n-                        .filter(p -> p.isp().length() > 1 && p.osp().length() > 1),\n-                \"--add-exports=java.base\/jdk.internal.misc=ALL-UNNAMED\"\n+                        .filter(p -> p.isp().length() > 1 && p.osp().length() > 1)\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/reshape\/TestVectorReinterpret.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -37,0 +37,6 @@\n+ *\n+ * We must load from\/store to the exact type array since vector support for byte may be\n+ * smaller than that for other types. Failing to intrinsify LoadVectorNode causes C2\n+ * compilation to stop, which results in non-compilable failure since we only have one\n+ * chance of compilation before IR verification.\n+ *\n@@ -42,1 +48,1 @@\n-    public static void testB64toS64(byte[] input, byte[] output) {\n+    public static void testB64toS64(byte[] input, short[] output) {\n@@ -53,1 +59,1 @@\n-    public static void testB64toS128(byte[] input, byte[] output) {\n+    public static void testB64toS128(byte[] input, short[] output) {\n@@ -64,1 +70,1 @@\n-    public static void testB128toS256(byte[] input, byte[] output) {\n+    public static void testB128toS256(byte[] input, short[] output) {\n@@ -75,1 +81,1 @@\n-    public static void testB256toS512(byte[] input, byte[] output) {\n+    public static void testB256toS512(byte[] input, short[] output) {\n@@ -86,1 +92,1 @@\n-    public static void testB64toI64(byte[] input, byte[] output) {\n+    public static void testB64toI64(byte[] input, int[] output) {\n@@ -97,1 +103,1 @@\n-    public static void testB64toI128(byte[] input, byte[] output) {\n+    public static void testB64toI128(byte[] input, int[] output) {\n@@ -108,1 +114,1 @@\n-    public static void testB64toI256(byte[] input, byte[] output) {\n+    public static void testB64toI256(byte[] input, int[] output) {\n@@ -119,1 +125,1 @@\n-    public static void testB128toI512(byte[] input, byte[] output) {\n+    public static void testB128toI512(byte[] input, int[] output) {\n@@ -130,1 +136,1 @@\n-    public static void testB64toL64(byte[] input, byte[] output) {\n+    public static void testB64toL64(byte[] input, long[] output) {\n@@ -141,1 +147,1 @@\n-    public static void testB64toL128(byte[] input, byte[] output) {\n+    public static void testB64toL128(byte[] input, long[] output) {\n@@ -152,1 +158,1 @@\n-    public static void testB64toL256(byte[] input, byte[] output) {\n+    public static void testB64toL256(byte[] input, long[] output) {\n@@ -163,1 +169,1 @@\n-    public static void testB64toL512(byte[] input, byte[] output) {\n+    public static void testB64toL512(byte[] input, long[] output) {\n@@ -174,1 +180,1 @@\n-    public static void testB64toF64(byte[] input, byte[] output) {\n+    public static void testB64toF64(byte[] input, float[] output) {\n@@ -185,1 +191,1 @@\n-    public static void testB64toF128(byte[] input, byte[] output) {\n+    public static void testB64toF128(byte[] input, float[] output) {\n@@ -196,1 +202,1 @@\n-    public static void testB64toF256(byte[] input, byte[] output) {\n+    public static void testB64toF256(byte[] input, float[] output) {\n@@ -207,1 +213,1 @@\n-    public static void testB128toF512(byte[] input, byte[] output) {\n+    public static void testB128toF512(byte[] input, float[] output) {\n@@ -218,1 +224,1 @@\n-    public static void testB64toD64(byte[] input, byte[] output) {\n+    public static void testB64toD64(byte[] input, double[] output) {\n@@ -229,1 +235,1 @@\n-    public static void testB64toD128(byte[] input, byte[] output) {\n+    public static void testB64toD128(byte[] input, double[] output) {\n@@ -240,1 +246,1 @@\n-    public static void testB64toD256(byte[] input, byte[] output) {\n+    public static void testB64toD256(byte[] input, double[] output) {\n@@ -251,1 +257,1 @@\n-    public static void testB64toD512(byte[] input, byte[] output) {\n+    public static void testB64toD512(byte[] input, double[] output) {\n@@ -262,1 +268,1 @@\n-    public static void testS64toB64(byte[] input, byte[] output) {\n+    public static void testS64toB64(short[] input, byte[] output) {\n@@ -273,1 +279,1 @@\n-    public static void testS128toB64(byte[] input, byte[] output) {\n+    public static void testS128toB64(short[] input, byte[] output) {\n@@ -284,1 +290,1 @@\n-    public static void testS256toB128(byte[] input, byte[] output) {\n+    public static void testS256toB128(short[] input, byte[] output) {\n@@ -295,1 +301,1 @@\n-    public static void testS512toB256(byte[] input, byte[] output) {\n+    public static void testS512toB256(short[] input, byte[] output) {\n@@ -306,1 +312,1 @@\n-    public static void testS64toI64(byte[] input, byte[] output) {\n+    public static void testS64toI64(short[] input, int[] output) {\n@@ -317,1 +323,1 @@\n-    public static void testS64toI128(byte[] input, byte[] output) {\n+    public static void testS64toI128(short[] input, int[] output) {\n@@ -328,1 +334,1 @@\n-    public static void testS128toI256(byte[] input, byte[] output) {\n+    public static void testS128toI256(short[] input, int[] output) {\n@@ -339,1 +345,1 @@\n-    public static void testS256toI512(byte[] input, byte[] output) {\n+    public static void testS256toI512(short[] input, int[] output) {\n@@ -350,1 +356,1 @@\n-    public static void testS64toL64(byte[] input, byte[] output) {\n+    public static void testS64toL64(short[] input, long[] output) {\n@@ -361,1 +367,1 @@\n-    public static void testS64toL128(byte[] input, byte[] output) {\n+    public static void testS64toL128(short[] input, long[] output) {\n@@ -372,1 +378,1 @@\n-    public static void testS64toL256(byte[] input, byte[] output) {\n+    public static void testS64toL256(short[] input, long[] output) {\n@@ -383,1 +389,1 @@\n-    public static void testS128toL512(byte[] input, byte[] output) {\n+    public static void testS128toL512(short[] input, long[] output) {\n@@ -394,1 +400,1 @@\n-    public static void testS64toF64(byte[] input, byte[] output) {\n+    public static void testS64toF64(short[] input, float[] output) {\n@@ -405,1 +411,1 @@\n-    public static void testS64toF128(byte[] input, byte[] output) {\n+    public static void testS64toF128(short[] input, float[] output) {\n@@ -416,1 +422,1 @@\n-    public static void testS128toF256(byte[] input, byte[] output) {\n+    public static void testS128toF256(short[] input, float[] output) {\n@@ -427,1 +433,1 @@\n-    public static void testS256toF512(byte[] input, byte[] output) {\n+    public static void testS256toF512(short[] input, float[] output) {\n@@ -438,1 +444,1 @@\n-    public static void testS64toD64(byte[] input, byte[] output) {\n+    public static void testS64toD64(short[] input, double[] output) {\n@@ -449,1 +455,1 @@\n-    public static void testS64toD128(byte[] input, byte[] output) {\n+    public static void testS64toD128(short[] input, double[] output) {\n@@ -460,1 +466,1 @@\n-    public static void testS64toD256(byte[] input, byte[] output) {\n+    public static void testS64toD256(short[] input, double[] output) {\n@@ -471,1 +477,1 @@\n-    public static void testS128toD512(byte[] input, byte[] output) {\n+    public static void testS128toD512(short[] input, double[] output) {\n@@ -482,1 +488,1 @@\n-    public static void testI64toB64(byte[] input, byte[] output) {\n+    public static void testI64toB64(int[] input, byte[] output) {\n@@ -493,1 +499,1 @@\n-    public static void testI128toB64(byte[] input, byte[] output) {\n+    public static void testI128toB64(int[] input, byte[] output) {\n@@ -504,1 +510,1 @@\n-    public static void testI256toB64(byte[] input, byte[] output) {\n+    public static void testI256toB64(int[] input, byte[] output) {\n@@ -515,1 +521,1 @@\n-    public static void testI512toB128(byte[] input, byte[] output) {\n+    public static void testI512toB128(int[] input, byte[] output) {\n@@ -526,1 +532,1 @@\n-    public static void testI64toS64(byte[] input, byte[] output) {\n+    public static void testI64toS64(int[] input, short[] output) {\n@@ -537,1 +543,1 @@\n-    public static void testI128toS64(byte[] input, byte[] output) {\n+    public static void testI128toS64(int[] input, short[] output) {\n@@ -548,1 +554,1 @@\n-    public static void testI256toS128(byte[] input, byte[] output) {\n+    public static void testI256toS128(int[] input, short[] output) {\n@@ -559,1 +565,1 @@\n-    public static void testI512toS256(byte[] input, byte[] output) {\n+    public static void testI512toS256(int[] input, short[] output) {\n@@ -570,1 +576,1 @@\n-    public static void testI64toL64(byte[] input, byte[] output) {\n+    public static void testI64toL64(int[] input, long[] output) {\n@@ -581,1 +587,1 @@\n-    public static void testI64toL128(byte[] input, byte[] output) {\n+    public static void testI64toL128(int[] input, long[] output) {\n@@ -592,1 +598,1 @@\n-    public static void testI128toL256(byte[] input, byte[] output) {\n+    public static void testI128toL256(int[] input, long[] output) {\n@@ -603,1 +609,1 @@\n-    public static void testI256toL512(byte[] input, byte[] output) {\n+    public static void testI256toL512(int[] input, long[] output) {\n@@ -614,1 +620,1 @@\n-    public static void testI64toF64(byte[] input, byte[] output) {\n+    public static void testI64toF64(int[] input, float[] output) {\n@@ -625,1 +631,1 @@\n-    public static void testI128toF128(byte[] input, byte[] output) {\n+    public static void testI128toF128(int[] input, float[] output) {\n@@ -636,1 +642,1 @@\n-    public static void testI256toF256(byte[] input, byte[] output) {\n+    public static void testI256toF256(int[] input, float[] output) {\n@@ -647,1 +653,1 @@\n-    public static void testI512toF512(byte[] input, byte[] output) {\n+    public static void testI512toF512(int[] input, float[] output) {\n@@ -658,1 +664,1 @@\n-    public static void testI64toD64(byte[] input, byte[] output) {\n+    public static void testI64toD64(int[] input, double[] output) {\n@@ -669,1 +675,1 @@\n-    public static void testI64toD128(byte[] input, byte[] output) {\n+    public static void testI64toD128(int[] input, double[] output) {\n@@ -680,1 +686,1 @@\n-    public static void testI128toD256(byte[] input, byte[] output) {\n+    public static void testI128toD256(int[] input, double[] output) {\n@@ -691,1 +697,1 @@\n-    public static void testI256toD512(byte[] input, byte[] output) {\n+    public static void testI256toD512(int[] input, double[] output) {\n@@ -702,1 +708,1 @@\n-    public static void testL64toB64(byte[] input, byte[] output) {\n+    public static void testL64toB64(long[] input, byte[] output) {\n@@ -713,1 +719,1 @@\n-    public static void testL128toB64(byte[] input, byte[] output) {\n+    public static void testL128toB64(long[] input, byte[] output) {\n@@ -724,1 +730,1 @@\n-    public static void testL256toB64(byte[] input, byte[] output) {\n+    public static void testL256toB64(long[] input, byte[] output) {\n@@ -735,1 +741,1 @@\n-    public static void testL512toB64(byte[] input, byte[] output) {\n+    public static void testL512toB64(long[] input, byte[] output) {\n@@ -746,1 +752,1 @@\n-    public static void testL64toS64(byte[] input, byte[] output) {\n+    public static void testL64toS64(long[] input, short[] output) {\n@@ -757,1 +763,1 @@\n-    public static void testL128toS64(byte[] input, byte[] output) {\n+    public static void testL128toS64(long[] input, short[] output) {\n@@ -768,1 +774,1 @@\n-    public static void testL256toS64(byte[] input, byte[] output) {\n+    public static void testL256toS64(long[] input, short[] output) {\n@@ -779,1 +785,1 @@\n-    public static void testL512toS128(byte[] input, byte[] output) {\n+    public static void testL512toS128(long[] input, short[] output) {\n@@ -790,1 +796,1 @@\n-    public static void testL64toI64(byte[] input, byte[] output) {\n+    public static void testL64toI64(long[] input, int[] output) {\n@@ -801,1 +807,1 @@\n-    public static void testL128toI64(byte[] input, byte[] output) {\n+    public static void testL128toI64(long[] input, int[] output) {\n@@ -812,1 +818,1 @@\n-    public static void testL256toI128(byte[] input, byte[] output) {\n+    public static void testL256toI128(long[] input, int[] output) {\n@@ -823,1 +829,1 @@\n-    public static void testL512toI256(byte[] input, byte[] output) {\n+    public static void testL512toI256(long[] input, int[] output) {\n@@ -834,1 +840,1 @@\n-    public static void testL64toF64(byte[] input, byte[] output) {\n+    public static void testL64toF64(long[] input, float[] output) {\n@@ -845,1 +851,1 @@\n-    public static void testL128toF64(byte[] input, byte[] output) {\n+    public static void testL128toF64(long[] input, float[] output) {\n@@ -856,1 +862,1 @@\n-    public static void testL256toF128(byte[] input, byte[] output) {\n+    public static void testL256toF128(long[] input, float[] output) {\n@@ -867,1 +873,1 @@\n-    public static void testL512toF256(byte[] input, byte[] output) {\n+    public static void testL512toF256(long[] input, float[] output) {\n@@ -878,1 +884,1 @@\n-    public static void testL64toD64(byte[] input, byte[] output) {\n+    public static void testL64toD64(long[] input, double[] output) {\n@@ -889,1 +895,1 @@\n-    public static void testL128toD128(byte[] input, byte[] output) {\n+    public static void testL128toD128(long[] input, double[] output) {\n@@ -900,1 +906,1 @@\n-    public static void testL256toD256(byte[] input, byte[] output) {\n+    public static void testL256toD256(long[] input, double[] output) {\n@@ -911,1 +917,1 @@\n-    public static void testL512toD512(byte[] input, byte[] output) {\n+    public static void testL512toD512(long[] input, double[] output) {\n@@ -922,1 +928,1 @@\n-    public static void testF64toB64(byte[] input, byte[] output) {\n+    public static void testF64toB64(float[] input, byte[] output) {\n@@ -933,1 +939,1 @@\n-    public static void testF128toB64(byte[] input, byte[] output) {\n+    public static void testF128toB64(float[] input, byte[] output) {\n@@ -944,1 +950,1 @@\n-    public static void testF256toB64(byte[] input, byte[] output) {\n+    public static void testF256toB64(float[] input, byte[] output) {\n@@ -955,1 +961,1 @@\n-    public static void testF512toB128(byte[] input, byte[] output) {\n+    public static void testF512toB128(float[] input, byte[] output) {\n@@ -966,1 +972,1 @@\n-    public static void testF64toS64(byte[] input, byte[] output) {\n+    public static void testF64toS64(float[] input, short[] output) {\n@@ -977,1 +983,1 @@\n-    public static void testF128toS64(byte[] input, byte[] output) {\n+    public static void testF128toS64(float[] input, short[] output) {\n@@ -988,1 +994,1 @@\n-    public static void testF256toS128(byte[] input, byte[] output) {\n+    public static void testF256toS128(float[] input, short[] output) {\n@@ -999,1 +1005,1 @@\n-    public static void testF512toS256(byte[] input, byte[] output) {\n+    public static void testF512toS256(float[] input, short[] output) {\n@@ -1010,2 +1016,2 @@\n-    public static void testF64toL64(byte[] input, byte[] output) {\n-        vectorCast(F2L, FSPEC64, LSPEC64, input, output);\n+    public static void testF64toI64(float[] input, int[] output) {\n+        vectorCast(F2I, FSPEC64, ISPEC64, input, output);\n@@ -1014,3 +1020,3 @@\n-    @Run(test = \"testF64toL64\")\n-    public static void runF64toL64() throws Throwable {\n-        runCastHelper(F2L, FSPEC64, LSPEC64);\n+    @Run(test = \"testF64toI64\")\n+    public static void runF64toI64() throws Throwable {\n+        runCastHelper(F2I, FSPEC64, ISPEC64);\n@@ -1021,2 +1027,2 @@\n-    public static void testF64toL128(byte[] input, byte[] output) {\n-        vectorCast(F2L, FSPEC64, LSPEC128, input, output);\n+    public static void testF128toI128(float[] input, int[] output) {\n+        vectorCast(F2I, FSPEC128, ISPEC128, input, output);\n@@ -1025,3 +1031,3 @@\n-    @Run(test = \"testF64toL128\")\n-    public static void runF64toL128() throws Throwable {\n-        runCastHelper(F2L, FSPEC64, LSPEC128);\n+    @Run(test = \"testF128toI128\")\n+    public static void runF128toI128() throws Throwable {\n+        runCastHelper(F2I, FSPEC128, ISPEC128);\n@@ -1032,2 +1038,2 @@\n-    public static void testF128toL256(byte[] input, byte[] output) {\n-        vectorCast(F2L, FSPEC128, LSPEC256, input, output);\n+    public static void testF256toI256(float[] input, int[] output) {\n+        vectorCast(F2I, FSPEC256, ISPEC256, input, output);\n@@ -1036,3 +1042,3 @@\n-    @Run(test = \"testF128toL256\")\n-    public static void runF128toL256() throws Throwable {\n-        runCastHelper(F2L, FSPEC128, LSPEC256);\n+    @Run(test = \"testF256toI256\")\n+    public static void runF256toI256() throws Throwable {\n+        runCastHelper(F2I, FSPEC256, ISPEC256);\n@@ -1043,2 +1049,2 @@\n-    public static void testF256toL512(byte[] input, byte[] output) {\n-        vectorCast(F2L, FSPEC256, LSPEC512, input, output);\n+    public static void testF512toI512(float[] input, int[] output) {\n+        vectorCast(F2I, FSPEC512, ISPEC512, input, output);\n@@ -1047,3 +1053,3 @@\n-    @Run(test = \"testF256toL512\")\n-    public static void runF256toL512() throws Throwable {\n-        runCastHelper(F2L, FSPEC256, LSPEC512);\n+    @Run(test = \"testF512toI512\")\n+    public static void runF512toI512() throws Throwable {\n+        runCastHelper(F2I, FSPEC512, ISPEC512);\n@@ -1054,2 +1060,2 @@\n-    public static void testF64toI64(byte[] input, byte[] output) {\n-        vectorCast(F2I, FSPEC64, ISPEC64, input, output);\n+    public static void testF64toL64(float[] input, long[] output) {\n+        vectorCast(F2L, FSPEC64, LSPEC64, input, output);\n@@ -1058,3 +1064,3 @@\n-    @Run(test = \"testF64toI64\")\n-    public static void runF64toI64() throws Throwable {\n-        runCastHelper(F2I, FSPEC64, ISPEC64);\n+    @Run(test = \"testF64toL64\")\n+    public static void runF64toL64() throws Throwable {\n+        runCastHelper(F2L, FSPEC64, LSPEC64);\n@@ -1065,2 +1071,2 @@\n-    public static void testF128toI128(byte[] input, byte[] output) {\n-        vectorCast(F2I, FSPEC128, ISPEC128, input, output);\n+    public static void testF64toL128(float[] input, long[] output) {\n+        vectorCast(F2L, FSPEC64, LSPEC128, input, output);\n@@ -1069,3 +1075,3 @@\n-    @Run(test = \"testF128toI128\")\n-    public static void runF128toI128() throws Throwable {\n-        runCastHelper(F2I, FSPEC128, ISPEC128);\n+    @Run(test = \"testF64toL128\")\n+    public static void runF64toL128() throws Throwable {\n+        runCastHelper(F2L, FSPEC64, LSPEC128);\n@@ -1076,2 +1082,2 @@\n-    public static void testF256toI256(byte[] input, byte[] output) {\n-        vectorCast(F2I, FSPEC256, ISPEC256, input, output);\n+    public static void testF128toL256(float[] input, long[] output) {\n+        vectorCast(F2L, FSPEC128, LSPEC256, input, output);\n@@ -1080,3 +1086,3 @@\n-    @Run(test = \"testF256toI256\")\n-    public static void runF256toI256() throws Throwable {\n-        runCastHelper(F2I, FSPEC256, ISPEC256);\n+    @Run(test = \"testF128toL256\")\n+    public static void runF128toL256() throws Throwable {\n+        runCastHelper(F2L, FSPEC128, LSPEC256);\n@@ -1087,2 +1093,2 @@\n-    public static void testF512toI512(byte[] input, byte[] output) {\n-        vectorCast(F2I, FSPEC512, ISPEC512, input, output);\n+    public static void testF256toL512(float[] input, long[] output) {\n+        vectorCast(F2L, FSPEC256, LSPEC512, input, output);\n@@ -1091,3 +1097,3 @@\n-    @Run(test = \"testF512toI512\")\n-    public static void runF512toI512() throws Throwable {\n-        runCastHelper(F2I, FSPEC512, ISPEC512);\n+    @Run(test = \"testF256toL512\")\n+    public static void runF256toL512() throws Throwable {\n+        runCastHelper(F2L, FSPEC256, LSPEC512);\n@@ -1098,1 +1104,1 @@\n-    public static void testF64toD64(byte[] input, byte[] output) {\n+    public static void testF64toD64(float[] input, double[] output) {\n@@ -1109,1 +1115,1 @@\n-    public static void testF64toD128(byte[] input, byte[] output) {\n+    public static void testF64toD128(float[] input, double[] output) {\n@@ -1120,1 +1126,1 @@\n-    public static void testF128toD256(byte[] input, byte[] output) {\n+    public static void testF128toD256(float[] input, double[] output) {\n@@ -1131,1 +1137,1 @@\n-    public static void testF256toD512(byte[] input, byte[] output) {\n+    public static void testF256toD512(float[] input, double[] output) {\n@@ -1142,1 +1148,1 @@\n-    public static void testD64toB64(byte[] input, byte[] output) {\n+    public static void testD64toB64(double[] input, byte[] output) {\n@@ -1153,1 +1159,1 @@\n-    public static void testD128toB64(byte[] input, byte[] output) {\n+    public static void testD128toB64(double[] input, byte[] output) {\n@@ -1164,1 +1170,1 @@\n-    public static void testD256toB64(byte[] input, byte[] output) {\n+    public static void testD256toB64(double[] input, byte[] output) {\n@@ -1175,1 +1181,1 @@\n-    public static void testD512toB64(byte[] input, byte[] output) {\n+    public static void testD512toB64(double[] input, byte[] output) {\n@@ -1186,1 +1192,1 @@\n-    public static void testD64toS64(byte[] input, byte[] output) {\n+    public static void testD64toS64(double[] input, short[] output) {\n@@ -1197,1 +1203,1 @@\n-    public static void testD128toS64(byte[] input, byte[] output) {\n+    public static void testD128toS64(double[] input, short[] output) {\n@@ -1208,1 +1214,1 @@\n-    public static void testD256toS64(byte[] input, byte[] output) {\n+    public static void testD256toS64(double[] input, short[] output) {\n@@ -1219,1 +1225,1 @@\n-    public static void testD512toS128(byte[] input, byte[] output) {\n+    public static void testD512toS128(double[] input, short[] output) {\n@@ -1230,1 +1236,1 @@\n-    public static void testD64toI64(byte[] input, byte[] output) {\n+    public static void testD64toI64(double[] input, int[] output) {\n@@ -1241,1 +1247,1 @@\n-    public static void testD128toI64(byte[] input, byte[] output) {\n+    public static void testD128toI64(double[] input, int[] output) {\n@@ -1252,1 +1258,1 @@\n-    public static void testD256toI128(byte[] input, byte[] output) {\n+    public static void testD256toI128(double[] input, int[] output) {\n@@ -1263,1 +1269,1 @@\n-    public static void testD512toI256(byte[] input, byte[] output) {\n+    public static void testD512toI256(double[] input, int[] output) {\n@@ -1274,2 +1280,2 @@\n-    public static void testD64toF64(byte[] input, byte[] output) {\n-        vectorCast(D2F, DSPEC64, FSPEC64, input, output);\n+    public static void testD64toL64(double[] input, long[] output) {\n+        vectorCast(D2L, DSPEC64, LSPEC64, input, output);\n@@ -1278,3 +1284,3 @@\n-    @Run(test = \"testD64toF64\")\n-    public static void runD64toF64() throws Throwable {\n-        runCastHelper(D2F, DSPEC64, FSPEC64);\n+    @Run(test = \"testD64toL64\")\n+    public static void runD64toL64() throws Throwable {\n+        runCastHelper(D2L, DSPEC64, LSPEC64);\n@@ -1285,2 +1291,2 @@\n-    public static void testD128toF64(byte[] input, byte[] output) {\n-        vectorCast(D2F, DSPEC128, FSPEC64, input, output);\n+    public static void testD128toL128(double[] input, long[] output) {\n+        vectorCast(D2L, DSPEC128, LSPEC128, input, output);\n@@ -1289,3 +1295,3 @@\n-    @Run(test = \"testD128toF64\")\n-    public static void runD128toF64() throws Throwable {\n-        runCastHelper(D2F, DSPEC128, FSPEC64);\n+    @Run(test = \"testD128toL128\")\n+    public static void runD128toL128() throws Throwable {\n+        runCastHelper(D2L, DSPEC128, LSPEC128);\n@@ -1296,2 +1302,2 @@\n-    public static void testD256toF128(byte[] input, byte[] output) {\n-        vectorCast(D2F, DSPEC256, FSPEC128, input, output);\n+    public static void testD256toL256(double[] input, long[] output) {\n+        vectorCast(D2L, DSPEC256, LSPEC256, input, output);\n@@ -1300,3 +1306,3 @@\n-    @Run(test = \"testD256toF128\")\n-    public static void runD256toF128() throws Throwable {\n-        runCastHelper(D2F, DSPEC256, FSPEC128);\n+    @Run(test = \"testD256toL256\")\n+    public static void runD256toL256() throws Throwable {\n+        runCastHelper(D2L, DSPEC256, LSPEC256);\n@@ -1307,2 +1313,2 @@\n-    public static void testD512toF256(byte[] input, byte[] output) {\n-        vectorCast(D2F, DSPEC512, FSPEC256, input, output);\n+    public static void testD512toL512(double[] input, long[] output) {\n+        vectorCast(D2L, DSPEC512, LSPEC512, input, output);\n@@ -1311,3 +1317,3 @@\n-    @Run(test = \"testD512toF256\")\n-    public static void runD512toF256() throws Throwable {\n-        runCastHelper(D2F, DSPEC512, FSPEC256);\n+    @Run(test = \"testD512toL512\")\n+    public static void runD512toL512() throws Throwable {\n+        runCastHelper(D2L, DSPEC512, LSPEC512);\n@@ -1318,2 +1324,2 @@\n-    public static void testD64toL64(byte[] input, byte[] output) {\n-        vectorCast(D2L, DSPEC64, LSPEC64, input, output);\n+    public static void testD64toF64(double[] input, float[] output) {\n+        vectorCast(D2F, DSPEC64, FSPEC64, input, output);\n@@ -1322,3 +1328,3 @@\n-    @Run(test = \"testD64toL64\")\n-    public static void runD64toL64() throws Throwable {\n-        runCastHelper(D2L, DSPEC64, LSPEC64);\n+    @Run(test = \"testD64toF64\")\n+    public static void runD64toF64() throws Throwable {\n+        runCastHelper(D2F, DSPEC64, FSPEC64);\n@@ -1329,2 +1335,2 @@\n-    public static void testD128toL128(byte[] input, byte[] output) {\n-        vectorCast(D2L, DSPEC128, LSPEC128, input, output);\n+    public static void testD128toF64(double[] input, float[] output) {\n+        vectorCast(D2F, DSPEC128, FSPEC64, input, output);\n@@ -1333,3 +1339,3 @@\n-    @Run(test = \"testD128toL128\")\n-    public static void runD128toL128() throws Throwable {\n-        runCastHelper(D2L, DSPEC128, LSPEC128);\n+    @Run(test = \"testD128toF64\")\n+    public static void runD128toF64() throws Throwable {\n+        runCastHelper(D2F, DSPEC128, FSPEC64);\n@@ -1340,2 +1346,2 @@\n-    public static void testD256toL256(byte[] input, byte[] output) {\n-        vectorCast(D2L, DSPEC256, LSPEC256, input, output);\n+    public static void testD256toF128(double[] input, float[] output) {\n+        vectorCast(D2F, DSPEC256, FSPEC128, input, output);\n@@ -1344,3 +1350,3 @@\n-    @Run(test = \"testD256toL256\")\n-    public static void runD256toL256() throws Throwable {\n-        runCastHelper(D2L, DSPEC256, LSPEC256);\n+    @Run(test = \"testD256toF128\")\n+    public static void runD256toF128() throws Throwable {\n+        runCastHelper(D2F, DSPEC256, FSPEC128);\n@@ -1351,2 +1357,2 @@\n-    public static void testD512toL512(byte[] input, byte[] output) {\n-        vectorCast(D2L, DSPEC512, LSPEC512, input, output);\n+    public static void testD512toF256(double[] input, float[] output) {\n+        vectorCast(D2F, DSPEC512, FSPEC256, input, output);\n@@ -1355,3 +1361,3 @@\n-    @Run(test = \"testD512toL512\")\n-    public static void runD512toL512() throws Throwable {\n-        runCastHelper(D2L, DSPEC512, LSPEC512);\n+    @Run(test = \"testD512toF256\")\n+    public static void runD512toF256() throws Throwable {\n+        runCastHelper(D2F, DSPEC512, FSPEC256);\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/reshape\/tests\/TestVectorCast.java","additions":190,"deletions":184,"binary":false,"changes":374,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+ *\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/reshape\/tests\/TestVectorDoubleExpandShrink.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+ *\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/reshape\/tests\/TestVectorExpandShrink.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,4 +34,6 @@\n- * a vector as a similar vector with another element type. It is complicated to verify\n- * the IR in this case since a load\/store with respect to byte array will result in\n- * additional ReinterpretNodes if the vector element type is not byte. As a result,\n- * arguments need to be arrays of the correct type.\n+ * a vector as a similar vector with another element type.\n+ *\n+ * It is complicated to verify the IR in this case since a load\/store with respect to\n+ * byte array will result in additional ReinterpretNodes if the vector element type is\n+ * not byte. As a result, arguments need to be arrays of the correct type.\n+ *\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/reshape\/tests\/TestVectorRebracket.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-            \/\/ makePair(BSPEC64, DSPEC256),\n+\/\/            makePair(BSPEC64, DSPEC256),\n@@ -51,1 +51,1 @@\n-            \/\/ makePair(SSPEC64, DSPEC256),\n+\/\/            makePair(SSPEC64, DSPEC256),\n@@ -66,2 +66,2 @@\n-            makePair(DSPEC128, FSPEC64)\n-            \/\/ makePair(DSPEC256, FSPEC128)\n+            makePair(DSPEC128, FSPEC64),\n+            makePair(DSPEC256, FSPEC128)\n@@ -70,1 +70,1 @@\n-    public static final List<VectorSpeciesPair> AVX2_CAST_TESTS = Stream.concat(AVX1_CAST_TESTS.stream(), List.of(\n+    public static final List<VectorSpeciesPair> AVX2_CAST_TESTS = Stream.concat(AVX1_CAST_TESTS.stream(), Stream.of(\n@@ -87,1 +87,1 @@\n-    ).stream()).toList();\n+    )).toList();\n@@ -89,2 +89,1 @@\n-    public static final List<VectorSpeciesPair> AVX512_CAST_TESTS = Stream.concat(AVX2_CAST_TESTS.stream(), List.of(\n-            makePair(BSPEC256, SSPEC512),\n+    public static final List<VectorSpeciesPair> AVX512_CAST_TESTS = Stream.concat(AVX2_CAST_TESTS.stream(), Stream.of(\n@@ -95,1 +94,0 @@\n-            makePair(SSPEC512, BSPEC256),\n@@ -111,1 +109,6 @@\n-    ).stream()).toList();\n+    )).toList();\n+\n+    public static final List<VectorSpeciesPair> AVX512BW_CAST_TESTS = Stream.concat(AVX512_CAST_TESTS.stream(), Stream.of(\n+            makePair(BSPEC256, SSPEC512),\n+            makePair(SSPEC512, BSPEC256)\n+    )).toList();\n@@ -113,1 +116,1 @@\n-    public static final List<VectorSpeciesPair> AVX512DQ_CAST_TESTS = Stream.concat(AVX512_CAST_TESTS.stream(), List.of(\n+    public static final List<VectorSpeciesPair> AVX512DQ_CAST_TESTS = Stream.concat(AVX512_CAST_TESTS.stream(), Stream.of(\n@@ -120,1 +123,1 @@\n-    ).stream()).toList();\n+    )).toList();\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/reshape\/utils\/TestCastMethods.java","additions":15,"deletions":12,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -38,3 +38,3 @@\n-    public static int getByte(Object o, long base, int i) {\n-        \/\/ This is technically an UB, what we need is UNSAFE.getByteUnaligned but they seem to be equivalent\n-        return UNSAFE.getByte(o, base + i);\n+    public static byte getByte(Object o, long base, int i) {\n+        \/\/ This technically leads to UB, what we need is UNSAFE.getByteUnaligned but they seem to be equivalent\n+        return UNSAFE.getByte(o, base + (long)i * Unsafe.ARRAY_BYTE_INDEX_SCALE);\n@@ -43,2 +43,43 @@\n-    public static void putByte(Object o, long base, int i, int value) {\n-        UNSAFE.putByte(o, base + i, (byte)value);\n+    public static void putByte(Object o, long base, int i, byte value) {\n+        \/\/ This technically leads to UB, what we need is UNSAFE.putByteUnaligned but they seem to be equivalent\n+        UNSAFE.putByte(o, base + (long)i * Unsafe.ARRAY_BYTE_INDEX_SCALE, value);\n+    }\n+\n+    public static short getShort(Object o, long base, int i) {\n+        return UNSAFE.getShort(o, base + (long)i * Unsafe.ARRAY_SHORT_INDEX_SCALE);\n+    }\n+\n+    public static void putShort(Object o, long base, int i, short value) {\n+        UNSAFE.putShort(o, base + (long)i * Unsafe.ARRAY_SHORT_INDEX_SCALE, value);\n+    }\n+\n+    public static int getInt(Object o, long base, int i) {\n+        return UNSAFE.getInt(o, base + (long)i * Unsafe.ARRAY_INT_INDEX_SCALE);\n+    }\n+\n+    public static void putInt(Object o, long base, int i, int value) {\n+        UNSAFE.putInt(o, base + (long)i * Unsafe.ARRAY_INT_INDEX_SCALE, value);\n+    }\n+\n+    public static long getLong(Object o, long base, int i) {\n+        return UNSAFE.getLong(o, base + (long)i * Unsafe.ARRAY_LONG_INDEX_SCALE);\n+    }\n+\n+    public static void putLong(Object o, long base, int i, long value) {\n+        UNSAFE.putLong(o, base + (long)i * Unsafe.ARRAY_LONG_INDEX_SCALE, value);\n+    }\n+\n+    public static float getFloat(Object o, long base, int i) {\n+        return UNSAFE.getFloat(o, base + (long)i * Unsafe.ARRAY_FLOAT_INDEX_SCALE);\n+    }\n+\n+    public static void putFloat(Object o, long base, int i, float value) {\n+        UNSAFE.putFloat(o, base + (long)i * Unsafe.ARRAY_FLOAT_INDEX_SCALE, value);\n+    }\n+\n+    public static double getDouble(Object o, long base, int i) {\n+        return UNSAFE.getDouble(o, base + (long)i * Unsafe.ARRAY_DOUBLE_INDEX_SCALE);\n+    }\n+\n+    public static void putDouble(Object o, long base, int i, double value) {\n+        UNSAFE.putDouble(o, base + (long)i * Unsafe.ARRAY_DOUBLE_INDEX_SCALE, value);\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/reshape\/utils\/UnsafeUtils.java","additions":46,"deletions":5,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-        test.addFlags(\"--add-modules=jdk.incubator.vector\");\n+        test.addFlags(\"--add-modules=jdk.incubator.vector\", \"--add-exports=java.base\/jdk.internal.misc=ALL-UNNAMED\");\n@@ -97,4 +97,4 @@\n-                                         VectorSpecies<T> isp, VectorSpecies<U> osp, byte[] input, byte[] output) {\n-        isp.fromByteArray(input, 0, ByteOrder.nativeOrder())\n-                .convertShape(cop, osp, 0)\n-                .intoByteArray(output, 0, ByteOrder.nativeOrder());\n+                                         VectorSpecies<T> isp, VectorSpecies<U> osp, Object input, Object output) {\n+        var outputVector = readVector(isp, input)\n+                .convertShape(cop, osp, 0);\n+        writeVector(osp, outputVector, output);\n@@ -110,4 +110,7 @@\n-                testMethodName,\n-                MethodType.methodType(void.class, byte.class.arrayType(), byte.class.arrayType()));\n-        byte[] input = new byte[isp.vectorByteSize()];\n-        byte[] output = new byte[osp.vectorByteSize()];\n+                    testMethodName,\n+                    MethodType.methodType(void.class, isp.elementType().arrayType(), osp.elementType().arrayType()))\n+                .asType(MethodType.methodType(void.class, Object.class, Object.class));\n+        Object input = Array.newInstance(isp.elementType(), isp.length());\n+        Object output = Array.newInstance(osp.elementType(), osp.length());\n+        long ibase = UnsafeUtils.arrayBase(isp.elementType());\n+        long obase = UnsafeUtils.arrayBase(osp.elementType());\n@@ -120,4 +123,4 @@\n-                    case \"byte\"   -> setByte(input, i, (byte)random.nextInt());\n-                    case \"short\"  -> setShort(input, i, (short)random.nextInt());\n-                    case \"int\"    -> setInt(input, i, random.nextInt());\n-                    case \"long\"   -> setLong(input, i, random.nextLong());\n+                    case \"byte\"   -> UnsafeUtils.putByte(input, ibase, i, (byte)random.nextInt());\n+                    case \"short\"  -> UnsafeUtils.putShort(input, ibase, i, (short)random.nextInt());\n+                    case \"int\"    -> UnsafeUtils.putInt(input, ibase, i, random.nextInt());\n+                    case \"long\"   -> UnsafeUtils.putLong(input, ibase, i, random.nextLong());\n@@ -126,1 +129,1 @@\n-                            setFloat(input, i, random.nextFloat(Byte.MIN_VALUE, Byte.MAX_VALUE));\n+                            UnsafeUtils.putFloat(input, ibase, i, random.nextFloat(Byte.MIN_VALUE, Byte.MAX_VALUE));\n@@ -128,1 +131,1 @@\n-                            setFloat(input, i, abnormalValue.get(random.nextInt(abnormalValue.size())).floatValue());\n+                            UnsafeUtils.putFloat(input, ibase, i, abnormalValue.get(random.nextInt(abnormalValue.size())).floatValue());\n@@ -133,1 +136,1 @@\n-                            setDouble(input, i, random.nextDouble(Byte.MIN_VALUE, Byte.MAX_VALUE));\n+                            UnsafeUtils.putDouble(input, ibase, i, random.nextDouble(Byte.MIN_VALUE, Byte.MAX_VALUE));\n@@ -135,1 +138,1 @@\n-                            setDouble(input, i, abnormalValue.get(random.nextInt(abnormalValue.size())));\n+                            UnsafeUtils.putDouble(input, ibase, i, abnormalValue.get(random.nextInt(abnormalValue.size())));\n@@ -148,6 +151,6 @@\n-                        case \"byte\"   -> getByte(input, i);\n-                        case \"short\"  -> getShort(input, i);\n-                        case \"int\"    -> getInt(input, i);\n-                        case \"long\"   -> getLong(input, i);\n-                        case \"float\"  -> getFloat(input, i);\n-                        case \"double\" -> getDouble(input, i);\n+                        case \"byte\"   -> UnsafeUtils.getByte(input, ibase, i);\n+                        case \"short\"  -> UnsafeUtils.getShort(input, ibase, i);\n+                        case \"int\"    -> UnsafeUtils.getInt(input, ibase, i);\n+                        case \"long\"   -> UnsafeUtils.getLong(input, ibase, i);\n+                        case \"float\"  -> UnsafeUtils.getFloat(input, ibase, i);\n+                        case \"double\" -> UnsafeUtils.getDouble(input, ibase, i);\n@@ -195,6 +198,6 @@\n-                    case \"byte\"   -> getByte(output, i);\n-                    case \"short\"  -> getShort(output, i);\n-                    case \"int\"    -> getInt(output, i);\n-                    case \"long\"   -> getLong(output, i);\n-                    case \"float\"  -> getFloat(output, i);\n-                    case \"double\" -> getDouble(output, i);\n+                    case \"byte\"   -> UnsafeUtils.getByte(output, obase, i);\n+                    case \"short\"  -> UnsafeUtils.getShort(output, obase, i);\n+                    case \"int\"    -> UnsafeUtils.getInt(output, obase, i);\n+                    case \"long\"   -> UnsafeUtils.getLong(output, obase, i);\n+                    case \"float\"  -> UnsafeUtils.getFloat(output, obase, i);\n+                    case \"double\" -> UnsafeUtils.getDouble(output, obase, i);\n@@ -209,1 +212,1 @@\n-    public static <T, U> void vectorExpandShrink(VectorSpecies<T> isp, VectorSpecies<U> osp, byte[] input, byte[] output) {\n+    public static void vectorExpandShrink(VectorSpecies<Byte> isp, VectorSpecies<Byte> osp, byte[] input, byte[] output) {\n@@ -215,1 +218,1 @@\n-    public static <T, U> void runExpandShrinkHelper(VectorSpecies<T> isp, VectorSpecies<U> osp) throws Throwable {\n+    public static void runExpandShrinkHelper(VectorSpecies<Byte> isp, VectorSpecies<Byte> osp) throws Throwable {\n@@ -238,1 +241,1 @@\n-    public static <T, U> void vectorDoubleExpandShrink(VectorSpecies<T> isp, VectorSpecies<U> osp, byte[] input, byte[] output) {\n+    public static void vectorDoubleExpandShrink(VectorSpecies<Byte> isp, VectorSpecies<Byte> osp, byte[] input, byte[] output) {\n@@ -245,1 +248,1 @@\n-    public static <T, U> void runDoubleExpandShrinkHelper(VectorSpecies<T> isp, VectorSpecies<U> osp) throws Throwable {\n+    public static void runDoubleExpandShrinkHelper(VectorSpecies<Byte> isp, VectorSpecies<Byte> osp) throws Throwable {\n@@ -267,3 +270,0 @@\n-    \/\/ All this complication is due to the fact that vector load and store with respect to byte array introduce\n-    \/\/ additional ReinterpretNodes, several ReinterpretNodes back to back being optimized make the number of\n-    \/\/ nodes remaining in the IR becomes unpredictable.\n@@ -272,17 +272,3 @@\n-        var outputVector = isp.fromArray(input, 0).reinterpretShape(osp, 0);\n-        var otype = osp.elementType();\n-        if (otype == byte.class) {\n-            ((ByteVector)outputVector).intoArray((byte[])output, 0);\n-        } else if (otype == short.class) {\n-            ((ShortVector)outputVector).intoArray((short[])output, 0);\n-        } else if (otype == int.class) {\n-            ((IntVector)outputVector).intoArray((int[])output, 0);\n-        } else if (otype == long.class) {\n-            ((LongVector)outputVector).intoArray((long[])output, 0);\n-        } else if (otype == float.class) {\n-            ((FloatVector)outputVector).intoArray((float[])output, 0);\n-        } else if (otype == double.class) {\n-            ((DoubleVector)outputVector).intoArray((double[])output, 0);\n-        } else {\n-            throw new AssertionError();\n-        }\n+        var outputVector = readVector(isp, input)\n+                .reinterpretShape(osp, 0);\n+        writeVector(osp, outputVector, output);\n@@ -305,1 +291,1 @@\n-                UnsafeUtils.putByte(input, ibase, i, random.nextInt());\n+                UnsafeUtils.putByte(input, ibase, i, (byte)random.nextInt());\n@@ -318,42 +304,3 @@\n-    public static byte getByte(byte[] array, int index) {\n-        return (byte)BYTE_ACCESS.get(array, index * Byte.BYTES);\n-    }\n-\n-    public static short getShort(byte[] array, int index) {\n-        return (short)SHORT_ACCESS.get(array, index * Short.BYTES);\n-    }\n-\n-    public static int getInt(byte[] array, int index) {\n-        return (int)INT_ACCESS.get(array, index * Integer.BYTES);\n-    }\n-\n-    public static long getLong(byte[] array, int index) {\n-        return (long)LONG_ACCESS.get(array, index * Long.BYTES);\n-    }\n-\n-    public static float getFloat(byte[] array, int index) {\n-        return (float)FLOAT_ACCESS.get(array, index * Float.BYTES);\n-    }\n-\n-    public static double getDouble(byte[] array, int index) {\n-        return (double)DOUBLE_ACCESS.get(array, index * Double.BYTES);\n-    }\n-\n-    public static void setByte(byte[] array, int index, byte value) {\n-        BYTE_ACCESS.set(array, index * Byte.BYTES, value);\n-    }\n-\n-    public static void setShort(byte[] array, int index, short value) {\n-        SHORT_ACCESS.set(array, index * Short.BYTES, value);\n-    }\n-\n-    public static void setInt(byte[] array, int index, int value) {\n-        INT_ACCESS.set(array, index * Integer.BYTES, value);\n-    }\n-\n-    public static void setLong(byte[] array, int index, long value) {\n-        LONG_ACCESS.set(array, index * Long.BYTES, value);\n-    }\n-\n-    public static void setFloat(byte[] array, int index, float value) {\n-        FLOAT_ACCESS.set(array, index * Float.BYTES, value);\n+    @ForceInline\n+    private static <T> Vector<T> readVector(VectorSpecies<T> isp, Object input) {\n+        return isp.fromArray(input, 0);\n@@ -362,2 +309,18 @@\n-    public static void setDouble(byte[] array, int index, double value) {\n-        DOUBLE_ACCESS.set(array, index * Double.BYTES, value);\n+    @ForceInline\n+    private static <U> void writeVector(VectorSpecies<U> osp, Vector<U> vector, Object output) {\n+        var otype = osp.elementType();\n+        if (otype == byte.class) {\n+            ((ByteVector)vector).intoArray((byte[])output, 0);\n+        } else if (otype == short.class) {\n+            ((ShortVector)vector).intoArray((short[])output, 0);\n+        } else if (otype == int.class) {\n+            ((IntVector)vector).intoArray((int[])output, 0);\n+        } else if (otype == long.class) {\n+            ((LongVector)vector).intoArray((long[])output, 0);\n+        } else if (otype == float.class) {\n+            ((FloatVector)vector).intoArray((float[])output, 0);\n+        } else if (otype == double.class) {\n+            ((DoubleVector)vector).intoArray((double[])output, 0);\n+        } else {\n+            throw new AssertionError();\n+        }\n@@ -365,7 +328,0 @@\n-\n-    private static final VarHandle BYTE_ACCESS   = MethodHandles.arrayElementVarHandle(byte.class.arrayType());\n-    private static final VarHandle SHORT_ACCESS  = MethodHandles.byteArrayViewVarHandle(short.class.arrayType(),  ByteOrder.nativeOrder());\n-    private static final VarHandle INT_ACCESS    = MethodHandles.byteArrayViewVarHandle(int.class.arrayType(),    ByteOrder.nativeOrder());\n-    private static final VarHandle LONG_ACCESS   = MethodHandles.byteArrayViewVarHandle(long.class.arrayType(),   ByteOrder.nativeOrder());\n-    private static final VarHandle FLOAT_ACCESS  = MethodHandles.byteArrayViewVarHandle(float.class.arrayType(),  ByteOrder.nativeOrder());\n-    private static final VarHandle DOUBLE_ACCESS = MethodHandles.byteArrayViewVarHandle(double.class.arrayType(), ByteOrder.nativeOrder());\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/reshape\/utils\/VectorReshapeHelper.java","additions":61,"deletions":105,"binary":false,"changes":166,"status":"modified"}]}