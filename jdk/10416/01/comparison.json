{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+import java.util.Objects;\n@@ -284,5 +285,4 @@\n-         if (!super.equals(o)) {\n-             return false;\n-         }\n-\n-         return ((Font2D)o).getStyle() == this.getStyle();\n+        return o instanceof CFont other\n+                && Objects.equals(fullName, other.fullName)\n+                && Objects.equals(platName, other.platName)\n+                && getStyle() == other.getStyle();\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/font\/CFont.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+import java.util.Objects;\n@@ -293,1 +294,1 @@\n-     * @param obj the object to test for equality\n+     * @param o the object to test for equality\n@@ -298,3 +299,3 @@\n-    public boolean equals(Object obj) {\n-        try {\n-            return equals((FontRenderContext)obj);\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n@@ -302,2 +303,12 @@\n-        catch (ClassCastException e) {\n-            return false;\n+\n+        if (o instanceof FontRenderContext rhs) {\n+            \/\/ if neither instance is a subclass, reference values directly.\n+            if (!rhs.defaulting && !defaulting) {\n+                return rhs.aaHintValue == aaHintValue\n+                        && rhs.fmHintValue == fmHintValue\n+                        && Objects.equals(tx, rhs.tx);\n+            } else {\n+                return rhs.getAntiAliasingHint() == getAntiAliasingHint()\n+                        && rhs.getFractionalMetricsHint() == getFractionalMetricsHint()\n+                        && rhs.getTransform().equals(getTransform());\n+            }\n@@ -305,0 +316,1 @@\n+        return false;\n@@ -317,21 +329,1 @@\n-        if (this == rhs) {\n-            return true;\n-        }\n-        if (rhs == null) {\n-            return false;\n-        }\n-\n-        \/* if neither instance is a subclass, reference values directly. *\/\n-        if (!rhs.defaulting && !defaulting) {\n-            if (rhs.aaHintValue == aaHintValue &&\n-                rhs.fmHintValue == fmHintValue) {\n-\n-                return tx == null ? rhs.tx == null : tx.equals(rhs.tx);\n-            }\n-            return false;\n-        } else {\n-            return\n-                rhs.getAntiAliasingHint() == getAntiAliasingHint() &&\n-                rhs.getFractionalMetricsHint() == getFractionalMetricsHint() &&\n-                rhs.getTransform().equals(getTransform());\n-        }\n+        return equals((Object) rhs);\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/font\/FontRenderContext.java","additions":20,"deletions":28,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -179,1 +179,1 @@\n-     * @param rhs the {@code Object} to compare for equality\n+     * @param o the {@code Object} to compare for equality\n@@ -184,8 +184,6 @@\n-    public boolean equals(Object rhs) {\n-\n-        try {\n-            return equals((ImageGraphicAttribute) rhs);\n-        }\n-        catch(ClassCastException e) {\n-            return false;\n-        }\n+    public boolean equals(Object o) {\n+        return this == o || o instanceof ImageGraphicAttribute rhs\n+                && fOriginX == rhs.fOriginX\n+                && fOriginY == rhs.fOriginY\n+                && getAlignment() == rhs.getAlignment()\n+                && fImage.equals(rhs.fImage);\n@@ -204,22 +202,1 @@\n-\n-        if (rhs == null) {\n-            return false;\n-        }\n-\n-        if (this == rhs) {\n-            return true;\n-        }\n-\n-        if (fOriginX != rhs.fOriginX || fOriginY != rhs.fOriginY) {\n-            return false;\n-        }\n-\n-        if (getAlignment() != rhs.getAlignment()) {\n-            return false;\n-        }\n-\n-        if (!fImage.equals(rhs.fImage)) {\n-            return false;\n-        }\n-\n-        return true;\n+        return equals((Object) rhs);\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/font\/ImageGraphicAttribute.java","additions":8,"deletions":31,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1828,6 +1828,8 @@\n-        if (o != null) {\n-            try {\n-                NumericShaper rhs = (NumericShaper)o;\n-                if (rangeSet != null) {\n-                    if (rhs.rangeSet != null) {\n-                        return isContextual() == rhs.isContextual()\n+        if (o == this) {\n+            return true;\n+        }\n+\n+        if (o instanceof NumericShaper rhs) {\n+            if (rangeSet != null) {\n+                if (rhs.rangeSet != null) {\n+                    return isContextual() == rhs.isContextual()\n@@ -1836,2 +1838,2 @@\n-                    }\n-                    return isContextual() == rhs.isContextual()\n+                }\n+                return isContextual() == rhs.isContextual()\n@@ -1840,4 +1842,4 @@\n-                } else if (rhs.rangeSet != null) {\n-                    Set<Range> rset = Range.maskToRangeSet(mask);\n-                    Range srange = Range.indexToRange(key);\n-                    return isContextual() == rhs.isContextual()\n+            } else if (rhs.rangeSet != null) {\n+                Set<Range> rset = Range.maskToRangeSet(mask);\n+                Range srange = Range.indexToRange(key);\n+                return isContextual() == rhs.isContextual()\n@@ -1846,4 +1848,0 @@\n-                }\n-                return rhs.mask == mask && rhs.key == key;\n-            }\n-            catch (ClassCastException e) {\n@@ -1851,0 +1849,1 @@\n+            return rhs.mask == mask && rhs.key == key;\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/font\/NumericShaper.java","additions":16,"deletions":17,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -208,1 +208,1 @@\n-     * @param rhs the {@code Object} to compare for equality\n+     * @param o the {@code Object} to compare for equality\n@@ -213,8 +213,5 @@\n-    public boolean equals(Object rhs) {\n-\n-        try {\n-            return equals((ShapeGraphicAttribute) rhs);\n-        }\n-        catch(ClassCastException e) {\n-            return false;\n-        }\n+    public boolean equals(Object o) {\n+        return this == o || o instanceof ShapeGraphicAttribute rhs\n+                && fStroke == rhs.fStroke\n+                && getAlignment() == rhs.getAlignment()\n+                && fShape.equals(rhs.fShape);\n@@ -233,22 +230,1 @@\n-\n-        if (rhs == null) {\n-            return false;\n-        }\n-\n-        if (this == rhs) {\n-            return true;\n-        }\n-\n-        if (fStroke != rhs.fStroke) {\n-            return false;\n-        }\n-\n-        if (getAlignment() != rhs.getAlignment()) {\n-            return false;\n-        }\n-\n-        if (!fShape.equals(rhs.fShape)) {\n-            return false;\n-        }\n-\n-        return true;\n+        return equals((Object) rhs);\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/font\/ShapeGraphicAttribute.java","additions":7,"deletions":31,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -154,1 +154,1 @@\n-     * @param rhs the object to compare to\n+     * @param o the object to compare to\n@@ -160,13 +160,3 @@\n-    public boolean equals(Object rhs) {\n-        if (rhs != null) {\n-            try {\n-                TransformAttribute that = (TransformAttribute)rhs;\n-                if (transform == null) {\n-                    return that.transform == null;\n-                }\n-                return transform.equals(that.transform);\n-            }\n-            catch (ClassCastException e) {\n-            }\n-        }\n-        return false;\n+    public boolean equals(Object o) {\n+        return this == o || o instanceof TransformAttribute rhs\n+                && transform.equals(rhs.transform);\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/font\/TransformAttribute.java","additions":5,"deletions":15,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,0 +59,1 @@\n+import java.util.Objects;\n@@ -439,42 +440,32 @@\n-    public boolean equals(Object rhs) {\n-        try {\n-            return equals((AttributeValues)rhs);\n-        }\n-        catch (ClassCastException e) {\n-        }\n-        return false;\n-    }\n-\n-    public boolean equals(AttributeValues rhs) {\n-        \/\/ test in order of most likely to differ and easiest to compare\n-        \/\/ also assumes we're generally calling this only if family,\n-        \/\/ size, weight, posture are the same\n-\n-        if (rhs == null) return false;\n-        if (rhs == this) return true;\n-\n-        return defined == rhs.defined\n-            && nondefault == rhs.nondefault\n-            && underline == rhs.underline\n-            && strikethrough == rhs.strikethrough\n-            && superscript == rhs.superscript\n-            && width == rhs.width\n-            && kerning == rhs.kerning\n-            && tracking == rhs.tracking\n-            && ligatures == rhs.ligatures\n-            && runDirection == rhs.runDirection\n-            && bidiEmbedding == rhs.bidiEmbedding\n-            && swapColors == rhs.swapColors\n-            && equals(transform, rhs.transform)\n-            && equals(foreground, rhs.foreground)\n-            && equals(background, rhs.background)\n-            && equals(numericShaping, rhs.numericShaping)\n-            && equals(justification, rhs.justification)\n-            && equals(charReplacement, rhs.charReplacement)\n-            && size == rhs.size\n-            && weight == rhs.weight\n-            && posture == rhs.posture\n-            && equals(family, rhs.family)\n-            && equals(font, rhs.font)\n-            && imUnderline == rhs.imUnderline\n-            && equals(imHighlight, rhs.imHighlight);\n+    \/**\n+     * test in order of most likely to differ and easiest to compare\n+     * also assumes we're generally calling this only if family,\n+     * size, weight, posture are the same\n+     *\/\n+    public boolean equals(Object o) {\n+        return this == o || o instanceof AttributeValues rhs\n+                && defined == rhs.defined\n+                && nondefault == rhs.nondefault\n+                && underline == rhs.underline\n+                && strikethrough == rhs.strikethrough\n+                && superscript == rhs.superscript\n+                && width == rhs.width\n+                && kerning == rhs.kerning\n+                && tracking == rhs.tracking\n+                && ligatures == rhs.ligatures\n+                && runDirection == rhs.runDirection\n+                && bidiEmbedding == rhs.bidiEmbedding\n+                && swapColors == rhs.swapColors\n+                && Objects.equals(transform, rhs.transform)\n+                && Objects.equals(foreground, rhs.foreground)\n+                && Objects.equals(background, rhs.background)\n+                && Objects.equals(numericShaping, rhs.numericShaping)\n+                && Objects.equals(justification, rhs.justification)\n+                && Objects.equals(charReplacement, rhs.charReplacement)\n+                && size == rhs.size\n+                && weight == rhs.weight\n+                && posture == rhs.posture\n+                && Objects.equals(family, rhs.family)\n+                && Objects.equals(font, rhs.font)\n+                && imUnderline == rhs.imUnderline\n+                && Objects.equals(imHighlight, rhs.imHighlight);\n@@ -552,4 +543,0 @@\n-    private static boolean equals(Object lhs, Object rhs) {\n-        return lhs == null ? rhs == null : lhs.equals(rhs);\n-    }\n-\n@@ -602,1 +589,1 @@\n-        case EFAMILY: return equals(family, src.family);\n+        case EFAMILY: return Objects.equals(family, src.family);\n@@ -607,1 +594,1 @@\n-        case ETRANSFORM: return equals(transform, src.transform);\n+        case ETRANSFORM: return Objects.equals(transform, src.transform);\n@@ -609,4 +596,4 @@\n-        case EFONT: return equals(font, src.font);\n-        case ECHAR_REPLACEMENT: return equals(charReplacement, src.charReplacement);\n-        case EFOREGROUND: return equals(foreground, src.foreground);\n-        case EBACKGROUND: return equals(background, src.background);\n+        case EFONT: return Objects.equals(font, src.font);\n+        case ECHAR_REPLACEMENT: return Objects.equals(charReplacement, src.charReplacement);\n+        case EFOREGROUND: return Objects.equals(foreground, src.foreground);\n+        case EBACKGROUND: return Objects.equals(background, src.background);\n@@ -618,1 +605,1 @@\n-        case EINPUT_METHOD_HIGHLIGHT: return equals(imHighlight, src.imHighlight);\n+        case EINPUT_METHOD_HIGHLIGHT: return Objects.equals(imHighlight, src.imHighlight);\n@@ -621,1 +608,1 @@\n-        case ENUMERIC_SHAPING: return equals(numericShaping, src.numericShaping);\n+        case ENUMERIC_SHAPING: return Objects.equals(numericShaping, src.numericShaping);\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/AttributeValues.java","additions":42,"deletions":55,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -73,16 +73,3 @@\n-    public boolean equals(Object rhs) {\n-        try {\n-            return equals((CoreMetrics)rhs);\n-        }\n-        catch(ClassCastException e) {\n-            return false;\n-        }\n-    }\n-\n-    public boolean equals(CoreMetrics rhs) {\n-        if (rhs != null) {\n-            if (this == rhs) {\n-                return true;\n-            }\n-\n-            return ascent == rhs.ascent\n+    public boolean equals(Object o) {\n+        return this == o || o instanceof CoreMetrics rhs\n+                && ascent == rhs.ascent\n@@ -101,2 +88,0 @@\n-        }\n-        return false;\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/CoreMetrics.java","additions":3,"deletions":18,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-import java.awt.RenderingHints;\n@@ -43,2 +42,0 @@\n-import java.awt.font.TextAttribute;\n-\n@@ -50,0 +47,1 @@\n+import java.util.Objects;\n@@ -51,1 +49,0 @@\n-import static sun.font.AttributeValues.*;\n@@ -171,42 +168,8 @@\n-        private static boolean areEqual(Object lhs, Object rhs) {\n-\n-            if (lhs == null) {\n-                return rhs == null;\n-            }\n-            else {\n-                return lhs.equals(rhs);\n-            }\n-        }\n-\n-        public boolean equals(Object rhs) {\n-\n-            if (rhs == this) {\n-                return true;\n-            }\n-            if (rhs == null) {\n-                return false;\n-            }\n-\n-            DecorationImpl other = null;\n-            try {\n-                other = (DecorationImpl) rhs;\n-            }\n-            catch(ClassCastException e) {\n-                return false;\n-            }\n-\n-            if (!(swapColors == other.swapColors &&\n-                        strikethrough == other.strikethrough)) {\n-                return false;\n-            }\n-\n-            if (!areEqual(stdUnderline, other.stdUnderline)) {\n-                return false;\n-            }\n-            if (!areEqual(fgPaint, other.fgPaint)) {\n-                return false;\n-            }\n-            if (!areEqual(bgPaint, other.bgPaint)) {\n-                return false;\n-            }\n-            return areEqual(imUnderline, other.imUnderline);\n+        public boolean equals(Object o) {\n+            return this == o || o instanceof DecorationImpl other\n+                    && swapColors == other.swapColors\n+                    && strikethrough == other.strikethrough\n+                    && Objects.equals(stdUnderline, other.stdUnderline)\n+                    && Objects.equals(fgPaint, other.fgPaint)\n+                    && Objects.equals(bgPaint, other.bgPaint)\n+                    && Objects.equals(imUnderline, other.imUnderline);\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/Decoration.java","additions":9,"deletions":46,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import java.util.Objects;\n@@ -101,7 +102,3 @@\n-    public boolean equals(Object rhs) {\n-        try {\n-            return cm.equals(((FontLineMetrics)rhs).cm);\n-        }\n-        catch (ClassCastException e) {\n-            return false;\n-        }\n+    public boolean equals(Object o) {\n+        return this == o || o instanceof FontLineMetrics rhs\n+            && Objects.equals(cm, rhs.cm);\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/FontLineMetrics.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2005, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,2 @@\n+import java.util.Objects;\n+\n@@ -87,12 +89,5 @@\n-    public boolean equals(Object obj) {\n-        try {\n-            FontStrikeDesc desc = (FontStrikeDesc)obj;\n-            return (desc.valuemask == this.valuemask &&\n-                    desc.glyphTx.equals(this.glyphTx) &&\n-                    desc.devTx.equals(this.devTx));\n-        } catch (Exception e) {\n-            \/* class cast or NP exceptions should not happen often, if ever,\n-             * and I am hoping that this is faster than an instanceof check.\n-             *\/\n-            return false;\n-        }\n+    public boolean equals(Object o) {\n+        return this == o || o instanceof FontStrikeDesc desc\n+                && valuemask == desc.valuemask\n+                && Objects.equals(glyphTx, desc.glyphTx)\n+                && Objects.equals(devTx, desc.devTx);\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/FontStrikeDesc.java","additions":8,"deletions":13,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -137,12 +137,5 @@\n-        public boolean equals(Object rhs) {\n-            if (this == rhs) return true;\n-            if (rhs == null) return false;\n-            try {\n-                LayoutEngineKey that = (LayoutEngineKey)rhs;\n-                return this.script == that.script &&\n-                       this.lang == that.lang &&\n-                       this.font.equals(that.font);\n-            }\n-            catch (ClassCastException e) {\n-                return false;\n-            }\n+        public boolean equals(Object o) {\n+            return this == o || o instanceof LayoutEngineKey rhs\n+                    && script == rhs.script\n+                    && lang == rhs.lang\n+                    && font.equals(rhs.font);\n@@ -282,10 +275,4 @@\n-                try {\n-                    SDKey rhs = (SDKey)o;\n-                    return\n-                        hash == rhs.hash &&\n-                        font.equals(rhs.font) &&\n-                        frc.equals(rhs.frc);\n-                }\n-                catch (ClassCastException e) {\n-                }\n-                return false;\n+                return this == o || o instanceof SDKey rhs\n+                        && hash == rhs.hash\n+                        && font.equals(rhs.font)\n+                        && frc.equals(rhs.frc);\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/GlyphLayout.java","additions":10,"deletions":23,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+import java.util.Objects;\n@@ -44,8 +45,3 @@\n-        if (o == null || o.getClass() != this.getClass()) {\n-            return false;\n-        }\n-        PhysicalFont other = (PhysicalFont)o;\n-        return\n-           (this.fullName.equals(other.fullName)) &&\n-            ((this.platName == null && other.platName == null) ||\n-             (this.platName != null && this.platName.equals(other.platName)));\n+        return o instanceof PhysicalFont other\n+                && Objects.equals(fullName, other.fullName)\n+                && Objects.equals(platName, other.platName);\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/PhysicalFont.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,0 +48,1 @@\n+import java.util.Objects;\n@@ -638,1 +639,18 @@\n-        if (this == rhs) {\n+        return equals((Object) rhs);\n+    }\n+\n+    \/**\n+     * As a concrete subclass of Object that implements equality, this must\n+     * implement hashCode.\n+     *\/\n+    public int hashCode() {\n+        return font.hashCode() ^ glyphs.length;\n+    }\n+\n+    \/**\n+     * Since we implement equality comparisons for GlyphVector, we implement\n+     * the inherited Object.equals(Object) as well.  GlyphVector should do\n+     * this, and define two glyphvectors as not equal if the classes differ.\n+     *\/\n+    public boolean equals(Object o) {\n+        if (this == o) {\n@@ -641,6 +659,0 @@\n-        if (rhs == null) {\n-            return false;\n-        }\n-\n-        try {\n-            StandardGlyphVector other = (StandardGlyphVector)rhs;\n@@ -648,0 +660,1 @@\n+        if (o instanceof StandardGlyphVector other) {\n@@ -682,32 +695,1 @@\n-            if (gti == null) {\n-                return other.gti == null;\n-            } else {\n-                return gti.equals(other.gti);\n-            }\n-        }\n-        catch (ClassCastException e) {\n-            \/\/ assume they are different simply by virtue of the class difference\n-\n-            return false;\n-        }\n-    }\n-\n-    \/**\n-     * As a concrete subclass of Object that implements equality, this must\n-     * implement hashCode.\n-     *\/\n-    public int hashCode() {\n-        return font.hashCode() ^ glyphs.length;\n-    }\n-\n-    \/**\n-     * Since we implement equality comparisons for GlyphVector, we implement\n-     * the inherited Object.equals(Object) as well.  GlyphVector should do\n-     * this, and define two glyphvectors as not equal if the classes differ.\n-     *\/\n-    public boolean equals(Object rhs) {\n-        try {\n-            return equals((GlyphVector)rhs);\n-        }\n-        catch (ClassCastException e) {\n-            return false;\n+            return Objects.equals(gti, other.gti);\n@@ -715,0 +697,1 @@\n+        return false;\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/StandardGlyphVector.java","additions":23,"deletions":40,"binary":false,"changes":63,"status":"modified"}]}