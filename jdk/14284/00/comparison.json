{"files":[{"patch":"@@ -1660,0 +1660,1 @@\n+            boolean intSwitch = types.isAssignable(seltype, syms.intType);\n@@ -1661,2 +1662,1 @@\n-            if (!enumSwitch && !stringSwitch && !errorEnumSwitch &&\n-                !types.isAssignable(seltype, syms.intType)) {\n+            if (!enumSwitch && !stringSwitch && !errorEnumSwitch && !intSwitch) {\n@@ -1709,0 +1709,4 @@\n+                                    Symbol enumSym = TreeInfo.symbol(expr);\n+                                    if (enumSym == null || !enumSym.isEnum() || enumSym.kind != VAR) {\n+                                        log.error(expr.pos(), Errors.EnumLabelMustBeEnumConstant);\n+                                    }\n@@ -1731,1 +1735,1 @@\n-                                    if (s != null && s.kind == TYP && allowPatternSwitch) {\n+                                    if (s != null && s.kind == TYP) {\n@@ -1734,1 +1738,1 @@\n-                                    } else if ((s != null && !s.isEnum()) || !allowPatternSwitch) {\n+                                    } else if (s == null || !s.isEnum()) {\n@@ -1736,1 +1740,3 @@\n-                                                  (stringSwitch ? Errors.StringConstReq : Errors.ConstExprReq));\n+                                                  (stringSwitch ? Errors.StringConstReq\n+                                                                : intSwitch ? Errors.ConstExprReq\n+                                                                            : Errors.PatternOrEnumReq));\n@@ -1738,1 +1744,1 @@\n-                                } else if (!stringSwitch && !types.isAssignable(seltype, syms.intType)) {\n+                                } else if (!stringSwitch && !intSwitch) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -414,0 +414,3 @@\n+compiler.err.pattern.or.enum.req=\\\n+    pattern or enum constant required\n+\n@@ -579,0 +582,3 @@\n+compiler.err.enum.label.must.be.enum.constant=\\\n+    an enum switch constant case label must be an enumeration constant\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.enum.label.must.be.enum.constant\n+\n+class EnumLabelMustBeEnumConstant {\n+    enum E { A };\n+\n+    void m(E e) {\n+        switch (e) {\n+            case EA -> {}\n+            default -> {}\n+        }\n+    }\n+\n+    static final E EA;\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/EnumLabelMustBeEnumConstant.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.pattern.or.enum.req\n+\n+class PatternOrEnumReq {\n+    enum E { A };\n+\n+    void m(Object o) {\n+        switch (o) {\n+            case EA -> {}\n+            default -> {}\n+        }\n+    }\n+\n+    static final E EA;\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/PatternOrEnumReq.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n-PatternErrorRecovery.java:11:18: compiler.err.const.expr.req\n+PatternErrorRecovery.java:11:18: compiler.err.pattern.expected\n","filename":"test\/langtools\/tools\/javac\/patterns\/PatternErrorRecovery-old.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8300543\n+ * @bug 8300543 8309336\n@@ -54,0 +54,18 @@\n+    int testPatternMatchingSwitch4(E1 e) {\n+        return switch(e) {\n+            case E1A -> 1;\n+            case (E1) null -> 1;\n+            case E1 -> 1;\n+            default -> {}\n+        };\n+    }\n+\n+    int testPatternMatchingSwitch5(Object e) {\n+        return switch(e) {\n+            case E1A -> 1;\n+            case (E1) null -> 1;\n+            case E1 -> 1;\n+            default -> {}\n+        };\n+    }\n+\n@@ -58,0 +76,1 @@\n+    static final E1 E1A = null;\n","filename":"test\/langtools\/tools\/javac\/switchextra\/EnumSwitchQualifiedErrors.java","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -5,1 +5,7 @@\n-4 errors\n+EnumSwitchQualifiedErrors.java:56:18: compiler.err.enum.label.must.be.enum.constant\n+EnumSwitchQualifiedErrors.java:57:18: compiler.err.enum.label.must.be.enum.constant\n+EnumSwitchQualifiedErrors.java:58:18: compiler.err.enum.label.must.be.enum.constant\n+EnumSwitchQualifiedErrors.java:65:18: compiler.err.pattern.or.enum.req\n+EnumSwitchQualifiedErrors.java:66:18: compiler.err.pattern.or.enum.req\n+EnumSwitchQualifiedErrors.java:67:18: compiler.err.pattern.expected\n+10 errors\n","filename":"test\/langtools\/tools\/javac\/switchextra\/EnumSwitchQualifiedErrors.out","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"}]}