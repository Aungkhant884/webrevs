{"files":[{"patch":"@@ -224,1 +224,1 @@\n-    private String transformation;\n+    private final String transformation;\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/Cipher.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.io.InputStream;\n@@ -31,2 +30,1 @@\n-import javax.crypto.BadPaddingException;\n-import javax.crypto.IllegalBlockSizeException;\n+import java.io.InputStream;\n@@ -80,1 +78,1 @@\n-    private Cipher cipher;\n+    private final Cipher cipher;\n@@ -83,1 +81,1 @@\n-    private InputStream input;\n+    private final InputStream input;\n@@ -88,1 +86,1 @@\n-    private byte[] ibuffer = new byte[512];\n+    private final byte[] ibuffer = new byte[512];\n@@ -218,1 +216,1 @@\n-    };\n+    }\n@@ -236,1 +234,1 @@\n-    public int read(byte b[]) throws IOException {\n+    public int read(byte[] b) throws IOException {\n@@ -257,1 +255,1 @@\n-    public int read(byte b[], int off, int len) throws IOException {\n+    public int read(byte[] b, int off, int len) throws IOException {\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/CipherInputStream.java","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-    private Cipher cipher;\n+    private final Cipher cipher;\n@@ -77,1 +77,1 @@\n-    private OutputStream output;\n+    private final OutputStream output;\n@@ -80,1 +80,1 @@\n-    private byte[] ibuffer = new byte[1];\n+    private final byte[] ibuffer = new byte[1];\n@@ -116,1 +116,1 @@\n-    };\n+    }\n@@ -152,1 +152,1 @@\n-    };\n+    }\n@@ -169,1 +169,1 @@\n-    public void write(byte b[]) throws IOException {\n+    public void write(byte[] b) throws IOException {\n@@ -183,1 +183,1 @@\n-    public void write(byte b[], int off, int len) throws IOException {\n+    public void write(byte[] b, int off, int len) throws IOException {\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/CipherOutputStream.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,9 +28,0 @@\n-import java.security.AlgorithmParameters;\n-import java.security.Key;\n-import java.security.SecureRandom;\n-import java.security.NoSuchAlgorithmException;\n-import java.security.InvalidKeyException;\n-import java.security.InvalidAlgorithmParameterException;\n-import java.security.ProviderException;\n-import java.security.spec.AlgorithmParameterSpec;\n-\n@@ -38,0 +29,2 @@\n+import java.security.*;\n+import java.security.spec.AlgorithmParameterSpec;\n@@ -543,1 +536,1 @@\n-     * @param output the output ByteByffer\n+     * @param output the output ByteBuffer\n@@ -704,1 +697,1 @@\n-     * @param output the output ByteByffer\n+     * @param output the output ByteBuffer\n@@ -774,0 +767,1 @@\n+            byte[] outArray;\n@@ -775,1 +769,1 @@\n-                byte[] outArray = output.array();\n+                outArray = output.array();\n@@ -800,2 +794,0 @@\n-                \/\/ adjust input position manually\n-                input.position(inLimit);\n@@ -803,1 +795,0 @@\n-                byte[] outArray = null;\n@@ -813,2 +804,0 @@\n-                \/\/ adjust input position manually\n-                input.position(inLimit);\n@@ -816,0 +805,2 @@\n+            \/\/ adjust input position manually\n+            input.position(inLimit);\n@@ -937,1 +928,1 @@\n-     * Continues a multi-part update of the Additional Authentication\n+     * Continues a multipart update of the Additional Authentication\n@@ -967,1 +958,1 @@\n-     * Continues a multi-part update of the Additional Authentication\n+     * Continues a multipart update of the Additional Authentication\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/CipherSpi.java","additions":10,"deletions":19,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.io.Serial;\n@@ -55,1 +56,1 @@\n-    private String alg;\n+    private final String alg;\n@@ -222,1 +223,1 @@\n-        if (!(p instanceof CryptoPermission))\n+        if (!(p instanceof CryptoPermission cp))\n@@ -225,2 +226,0 @@\n-        CryptoPermission cp = (CryptoPermission)p;\n-\n@@ -241,3 +240,1 @@\n-            if (impliesExemptionMechanism(cp.exemptionMechanism)) {\n-                return true;\n-            }\n+            return impliesExemptionMechanism(cp.exemptionMechanism);\n@@ -264,1 +261,1 @@\n-        if (!(obj instanceof CryptoPermission))\n+        if (!(obj instanceof CryptoPermission that))\n@@ -267,2 +264,0 @@\n-        CryptoPermission that = (CryptoPermission) obj;\n-\n@@ -303,1 +298,1 @@\n-     * onject.\n+     * object.\n@@ -401,5 +396,1 @@\n-        if (this.exemptionMechanism.equals(exemptionMechanism)) {\n-            return true;\n-        }\n-\n-        return false;\n+        return this.exemptionMechanism.equals(exemptionMechanism);\n@@ -445,6 +436,1 @@\n-            if (this.algParamSpec.equals(algParamSpec)) {\n-                return true;\n-            }\n-            return false;\n-        } else if (this.checkParam) {\n-            return false;\n+            return this.algParamSpec.equals(algParamSpec);\n@@ -452,1 +438,1 @@\n-            return true;\n+            return !this.checkParam;\n@@ -458,1 +444,1 @@\n-            return (obj2 == null ? true : false);\n+            return (obj2 == null);\n@@ -478,0 +464,1 @@\n+    @Serial\n@@ -480,1 +467,1 @@\n-    private Vector<Permission> permissions;\n+    private final Vector<Permission> permissions;\n@@ -487,1 +474,1 @@\n-        permissions = new Vector<Permission>(3);\n+        permissions = new Vector<>(3);\n@@ -519,1 +506,1 @@\n-        if (!(permission instanceof CryptoPermission))\n+        if (!(permission instanceof CryptoPermission cp))\n@@ -522,2 +509,0 @@\n-        CryptoPermission cp = (CryptoPermission)permission;\n-\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/CryptoPermission.java","additions":15,"deletions":30,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -146,1 +146,1 @@\n-        if (!(permission instanceof CryptoPermission)) {\n+        if (!(permission instanceof CryptoPermission cryptoPerm)) {\n@@ -150,1 +150,0 @@\n-        CryptoPermission cryptoPerm = (CryptoPermission)permission;\n@@ -159,1 +158,1 @@\n-     * Checks if this object's PermissionCollection for permissons\n+     * Checks if this object's PermissionCollection for permissions\n@@ -171,1 +170,1 @@\n-        if (!(permission instanceof CryptoPermission)) {\n+        if (!(permission instanceof CryptoPermission cryptoPerm)) {\n@@ -175,2 +174,0 @@\n-        CryptoPermission cryptoPerm = (CryptoPermission)permission;\n-\n@@ -302,1 +299,1 @@\n-     * @param thisPc the first given PermissionColloection\n+     * @param thisPc the first given PermissionCollection\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/CryptoPermissions.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,1 +69,1 @@\n-    private Vector<GrantEntry> grantEntries;\n+    private final Vector<GrantEntry> grantEntries;\n@@ -79,1 +79,1 @@\n-        grantEntries = new Vector<GrantEntry>();\n+        grantEntries = new Vector<>();\n@@ -144,2 +144,1 @@\n-                if (ge != null)\n-                    grantEntries.addElement(ge);\n+                grantEntries.addElement(ge);\n@@ -284,1 +283,1 @@\n-                                                            Integer[] params)\n+                                                      Integer[] params)\n@@ -287,1 +286,1 @@\n-        AlgorithmParameterSpec ret = null;\n+        AlgorithmParameterSpec ret;\n@@ -499,1 +498,1 @@\n-            processedPermissions = new Hashtable<String, Vector<String>>();\n+            processedPermissions = new Hashtable<>();\n@@ -518,1 +517,1 @@\n-            exemptionMechanisms = new Vector<String>(1);\n+            exemptionMechanisms = new Vector<>(1);\n@@ -556,1 +555,1 @@\n-        private Vector<CryptoPermissionEntry> permissionEntries;\n+        private final Vector<CryptoPermissionEntry> permissionEntries;\n@@ -559,1 +558,1 @@\n-            permissionEntries = new Vector<CryptoPermissionEntry>();\n+            permissionEntries = new Vector<>();\n@@ -646,1 +645,1 @@\n-            if (!(obj instanceof CryptoPermissionEntry))\n+            if (!(obj instanceof CryptoPermissionEntry that))\n@@ -649,2 +648,0 @@\n-            CryptoPermissionEntry that = (CryptoPermissionEntry) obj;\n-\n@@ -671,1 +668,1 @@\n-                if (that.algParamSpec != null) return false;\n+                return that.algParamSpec == null;\n@@ -673,2 +670,1 @@\n-                if (!this.algParamSpec.equals(that.algParamSpec))\n-                    return false;\n+                return this.algParamSpec.equals(that.algParamSpec);\n@@ -676,3 +672,0 @@\n-\n-            \/\/ everything matched -- the 2 objects are equal\n-            return true;\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/CryptoPolicyParser.java","additions":13,"deletions":20,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,1 +61,1 @@\n-    private AlgorithmId algid;\n+    private final AlgorithmId algid;\n@@ -67,1 +67,1 @@\n-    private byte[] encryptedData;\n+    private final byte[] encryptedData;\n@@ -70,1 +70,1 @@\n-    private byte[] encoded = null;\n+    private byte[] encoded;\n@@ -127,1 +127,1 @@\n-     * <code>encrypedData<\/code> are copied to protect against subsequent\n+     * <code>encryptedData<\/code> are copied to protect against subsequent\n@@ -165,1 +165,1 @@\n-     * of the <code>AlgorithmIdentifer<\/code> component of the\n+     * of the <code>AlgorithmIdentifier<\/code> component of the\n@@ -168,1 +168,1 @@\n-     * <code>encrypedData<\/code> are copied to protect against\n+     * <code>encryptedData<\/code> are copied to protect against\n@@ -251,1 +251,1 @@\n-        byte[] encoded = null;\n+        byte[] encoded;\n@@ -267,1 +267,1 @@\n-        byte[] encoded = null;\n+        byte[] encoded;\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/EncryptedPrivateKeyInfo.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,1 +55,1 @@\n-    private Provider provider;\n+    private final Provider provider;\n@@ -58,1 +58,1 @@\n-    private ExemptionMechanismSpi exmechSpi;\n+    private final ExemptionMechanismSpi exmechSpi;\n@@ -61,1 +61,1 @@\n-    private String mechanism;\n+    private final String mechanism;\n@@ -121,1 +121,1 @@\n-     * may be different than the order of providers returned by\n+     * may be different from the order of providers returned by\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/ExemptionMechanism.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -93,1 +93,1 @@\n-        \/\/ lookup is case sensitive.\n+        \/\/ lookup is case-sensitive.\n@@ -202,1 +202,0 @@\n-                continue;\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/JceSecurityManager.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -160,1 +160,1 @@\n-     * may be different than the order of providers returned by\n+     * may be different from the order of providers returned by\n@@ -189,1 +189,1 @@\n-            if (JceSecurity.canUseProvider(s.getProvider()) == false) {\n+            if (!JceSecurity.canUseProvider(s.getProvider())) {\n@@ -322,1 +322,1 @@\n-                if (JceSecurity.canUseProvider(s.getProvider()) == false) {\n+                if (!JceSecurity.canUseProvider(s.getProvider())) {\n@@ -327,1 +327,1 @@\n-                    if (obj instanceof KeyAgreementSpi == false) {\n+                    if (!(obj instanceof KeyAgreementSpi)) {\n@@ -380,1 +380,1 @@\n-                if (s.supportsParameter(key) == false) {\n+                if (!s.supportsParameter(key)) {\n@@ -383,1 +383,1 @@\n-                if (JceSecurity.canUseProvider(s.getProvider()) == false) {\n+                if (!JceSecurity.canUseProvider(s.getProvider())) {\n@@ -566,1 +566,1 @@\n-     * @param lastPhase flag which indicates whether or not this is the last\n+     * @param lastPhase flag which indicates whether this is the last\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KeyAgreement.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -121,1 +121,1 @@\n-     * @param lastPhase flag which indicates whether or not this is the last\n+     * @param lastPhase flag which indicates whether this is the last\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KeyAgreementSpi.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -221,1 +221,1 @@\n-     * may be different than the order of providers returned by\n+     * may be different from the order of providers returned by\n@@ -362,1 +362,1 @@\n-                if (JceSecurity.canUseProvider(s.getProvider()) == false) {\n+                if (!JceSecurity.canUseProvider(s.getProvider())) {\n@@ -368,1 +368,1 @@\n-                    if (inst instanceof KeyGeneratorSpi == false) {\n+                    if (!(inst instanceof KeyGeneratorSpi spi)) {\n@@ -371,1 +371,0 @@\n-                    KeyGeneratorSpi spi = (KeyGeneratorSpi)inst;\n@@ -492,4 +491,1 @@\n-        if (failure instanceof RuntimeException) {\n-            throw (RuntimeException)failure;\n-        }\n-        throw new InvalidAlgorithmParameterException(\"init() failed\", failure);\n+        throw (RuntimeException)failure;\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KeyGenerator.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -159,1 +159,1 @@\n-     * may be different than the order of providers returned by\n+     * may be different from the order of providers returned by\n@@ -185,1 +185,1 @@\n-            if (JceSecurity.canUseProvider(s.getProvider()) == false) {\n+            if (!JceSecurity.canUseProvider(s.getProvider())) {\n@@ -313,1 +313,1 @@\n-                if (JceSecurity.canUseProvider(s.getProvider()) == false) {\n+                if (!JceSecurity.canUseProvider(s.getProvider())) {\n@@ -318,1 +318,1 @@\n-                    if (obj instanceof MacSpi == false) {\n+                    if (!(obj instanceof MacSpi)) {\n@@ -357,1 +357,1 @@\n-                if (s.supportsParameter(key) == false) {\n+                if (!s.supportsParameter(key)) {\n@@ -360,1 +360,1 @@\n-                if (JceSecurity.canUseProvider(s.getProvider()) == false) {\n+                if (!JceSecurity.canUseProvider(s.getProvider())) {\n@@ -484,1 +484,1 @@\n-        if (initialized == false) {\n+        if (!initialized) {\n@@ -500,1 +500,1 @@\n-        if (initialized == false) {\n+        if (!initialized) {\n@@ -522,1 +522,1 @@\n-        if (initialized == false) {\n+        if (!initialized) {\n@@ -547,1 +547,1 @@\n-        if (initialized == false) {\n+        if (!initialized) {\n@@ -577,1 +577,1 @@\n-        if (initialized == false) {\n+        if (!initialized) {\n@@ -615,1 +615,1 @@\n-        if (initialized == false) {\n+        if (!initialized) {\n@@ -625,1 +625,0 @@\n-        return;\n@@ -651,1 +650,1 @@\n-        if (initialized == false) {\n+        if (!initialized) {\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/Mac.java","additions":14,"deletions":15,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -107,1 +107,1 @@\n-        if (input.hasRemaining() == false) {\n+        if (!input.hasRemaining()) {\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/MacSpi.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,2 +61,1 @@\n-        byte[] x = new byte[8];\n-        return x;\n+        return new byte[8];\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/NullCipherSpi.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,3 +49,2 @@\n-    private URL jarURL;\n-    private Provider provider;\n-    private boolean savePerms;\n+    private final URL jarURL;\n+    private final boolean savePerms;\n@@ -75,1 +74,0 @@\n-        this.provider = provider;\n@@ -97,1 +95,1 @@\n-                        jarURL : new URL(\"jar:\" + jarURL.toString() + \"!\/\");\n+                        jarURL : new URL(\"jar:\" + jarURL + \"!\/\");\n@@ -106,10 +104,8 @@\n-                         new PrivilegedExceptionAction<JarFile>() {\n-                             public JarFile run() throws Exception {\n-                                 JarURLConnection conn =\n-                                     (JarURLConnection) url.openConnection();\n-                                 \/\/ You could do some caching here as\n-                                 \/\/ an optimization.\n-                                 conn.setUseCaches(false);\n-                                 return conn.getJarFile();\n-                             }\n-                         });\n+                        (PrivilegedExceptionAction<JarFile>) () -> {\n+                            JarURLConnection conn =\n+                                (JarURLConnection) url.openConnection();\n+                            \/\/ You could do some caching here as\n+                            \/\/ an optimization.\n+                            conn.setUseCaches(false);\n+                            return conn.getJarFile();\n+                        });\n@@ -118,1 +114,1 @@\n-                throw new SecurityException(\"Cannot load \" + url.toString(),\n+                throw new SecurityException(\"Cannot load \" + url,\n@@ -133,2 +129,1 @@\n-                        new JarException(\"Cannot load\/parse\" +\n-                            jarURL.toString());\n+                        new JarException(\"Cannot load\/parse\" + jarURL);\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/ProviderVerifier.java","additions":14,"deletions":19,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -112,1 +112,1 @@\n-    private String sealAlg = null;\n+    private final String sealAlg;\n@@ -138,1 +138,1 @@\n-     * operation are stored inside of the new <code>SealedObject<\/code>.\n+     * operation are stored inside the new <code>SealedObject<\/code>.\n@@ -238,1 +238,1 @@\n-     * @exception IOException if an error occurs during de-serialiazation.\n+     * @exception IOException if an error occurs during de-serialization.\n@@ -240,1 +240,1 @@\n-     * de-serialiazation.\n+     * de-serialization.\n@@ -279,1 +279,1 @@\n-     * @exception IOException if an error occurs during de-serialiazation\n+     * @exception IOException if an error occurs during de-serialization\n@@ -281,1 +281,1 @@\n-     * de-serialiazation\n+     * de-serialization\n@@ -294,2 +294,1 @@\n-            Object obj = a.readObject();\n-            return obj;\n+            return a.readObject();\n@@ -320,1 +319,1 @@\n-     * @exception IOException if an error occurs during de-serialiazation.\n+     * @exception IOException if an error occurs during de-serialization.\n@@ -322,1 +321,1 @@\n-     * de-serialiazation.\n+     * de-serialization.\n@@ -411,2 +410,1 @@\n-            Object obj = a.readObject();\n-            return obj;\n+            return a.readObject();\n@@ -445,1 +443,1 @@\n-        SharedSecrets.setJavaxCryptoSealedObjectAccess((obj,c) -> obj.getExtObjectInputStream(c));\n+        SharedSecrets.setJavaxCryptoSealedObjectAccess(SealedObject::getExtObjectInputStream);\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/SealedObject.java","additions":11,"deletions":13,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -72,1 +72,1 @@\n-    static final long serialVersionUID = -4795878709595146952L;\n+    long serialVersionUID = -4795878709595146952L;\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/SecretKey.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,1 @@\n- * <P> Key factories are bi-directional, i.e., they allow to build an opaque\n+ * <P> Key factories are bidirectional, i.e., they allow to build an opaque\n@@ -141,1 +141,1 @@\n-     * may be different than the order of providers returned by\n+     * may be different from the order of providers returned by\n@@ -283,1 +283,1 @@\n-     * implementation for failover. If no more implemenations are\n+     * implementation for failover. If no more implementations are\n@@ -299,1 +299,1 @@\n-                if (JceSecurity.canUseProvider(s.getProvider()) == false) {\n+                if (!JceSecurity.canUseProvider(s.getProvider())) {\n@@ -304,1 +304,1 @@\n-                    if (obj instanceof SecretKeyFactorySpi == false) {\n+                    if (!(obj instanceof SecretKeyFactorySpi spi)) {\n@@ -307,1 +307,0 @@\n-                    SecretKeyFactorySpi spi = (SecretKeyFactorySpi)obj;\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/SecretKeyFactory.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,1 @@\n-    static final long serialVersionUID = 2211791113380396553L;\n+    long serialVersionUID = 2211791113380396553L;\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/interfaces\/DHPrivateKey.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,1 @@\n-    static final long serialVersionUID = -6628103563352519193L;\n+    long serialVersionUID = -6628103563352519193L;\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/interfaces\/DHPublicKey.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import java.math.BigInteger;\n-\n@@ -51,1 +49,1 @@\n-    static final long serialVersionUID = -1430015993304333921L;\n+    long serialVersionUID = -1430015993304333921L;\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/interfaces\/PBEKey.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n- * seamlessly as needed.  Therefore application developers may take\n+ * seamlessly as needed.  Therefore, application developers may take\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/package-info.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,1 @@\n-    private byte[] key;\n+    private final byte[] key;\n@@ -229,2 +229,2 @@\n-            for (int j = 0; j < DES_KEY_LEN && found == true; j++) {\n-                if (WEAK_KEYS[i][j] != key[j+offset]) {\n+            for (int j = 0; j < DES_KEY_LEN; j++) {\n+                if (WEAK_KEYS[i][j] != key[j + offset]) {\n@@ -232,0 +232,1 @@\n+                    break;\n@@ -234,2 +235,2 @@\n-            if (found == true) {\n-                return found;\n+            if (found) {\n+                return true;\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/spec\/DESKeySpec.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,1 @@\n-    private byte[] key;\n+    private final byte[] key;\n@@ -119,6 +119,3 @@\n-            if (DESKeySpec.isParityAdjusted(key, offset) == false\n-                || DESKeySpec.isParityAdjusted(key, offset + 8) == false\n-                || DESKeySpec.isParityAdjusted(key, offset + 16) == false) {\n-                return false;\n-            }\n-            return true;\n+        return DESKeySpec.isParityAdjusted(key, offset)\n+                && DESKeySpec.isParityAdjusted(key, offset + 8)\n+                && DESKeySpec.isParityAdjusted(key, offset + 16);\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/spec\/DESedeKeySpec.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.math.BigInteger;\n@@ -48,1 +47,1 @@\n-    private int primeSize;\n+    private final int primeSize;\n@@ -51,1 +50,1 @@\n-    private int exponentSize;\n+    private final int exponentSize;\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/spec\/DHGenParameterSpec.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,1 +58,1 @@\n-    private BigInteger p;\n+    private final BigInteger p;\n@@ -61,1 +61,1 @@\n-    private BigInteger g;\n+    private final BigInteger g;\n@@ -64,1 +64,1 @@\n-    private int l;\n+    private final int l;\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/spec\/DHParameterSpec.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,1 @@\n-    private BigInteger x;\n+    private final BigInteger x;\n@@ -49,1 +49,1 @@\n-    private BigInteger p;\n+    private final BigInteger p;\n@@ -52,1 +52,1 @@\n-    private BigInteger g;\n+    private final BigInteger g;\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/spec\/DHPrivateKeySpec.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,1 @@\n-    private BigInteger y;\n+    private final BigInteger y;\n@@ -49,1 +49,1 @@\n-    private BigInteger p;\n+    private final BigInteger p;\n@@ -52,1 +52,1 @@\n-    private BigInteger g;\n+    private final BigInteger g;\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/spec\/DHPublicKeySpec.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n-    private byte[] iv;\n+    private final byte[] iv;\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/spec\/IvParameterSpec.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.math.BigInteger;\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/spec\/OAEPParameterSpec.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,2 +42,2 @@\n-    private byte[] salt;\n-    private int iterationCount;\n+    private final byte[] salt;\n+    private final int iterationCount;\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/spec\/PBEParameterSpec.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,1 @@\n-    private String pSrcName;\n+    private final String pSrcName;\n@@ -85,1 +85,1 @@\n-        private byte[] p = new byte[0];\n+        private final byte[] p;\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/spec\/PSource.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,1 @@\n-    private int effectiveKeyBits;\n+    private final int effectiveKeyBits;\n@@ -138,1 +138,1 @@\n-        if (!(obj instanceof RC2ParameterSpec)) {\n+        if (!(obj instanceof RC2ParameterSpec other)) {\n@@ -141,1 +141,0 @@\n-        RC2ParameterSpec other = (RC2ParameterSpec) obj;\n@@ -158,1 +157,1 @@\n-        return (retval += effectiveKeyBits);\n+        return retval + effectiveKeyBits;\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/spec\/RC2ParameterSpec.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,3 +50,3 @@\n-    private int version;\n-    private int rounds;\n-    private int wordSize; \/\/ the word size in bits\n+    private final int version;\n+    private final int rounds;\n+    private final int wordSize; \/\/ the word size in bits\n@@ -183,1 +183,1 @@\n-        if (!(obj instanceof RC5ParameterSpec)) {\n+        if (!(obj instanceof RC5ParameterSpec other)) {\n@@ -186,1 +186,0 @@\n-        RC5ParameterSpec other = (RC5ParameterSpec) obj;\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/spec\/RC5ParameterSpec.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import jdk.internal.access.JavaxCryptoSpecAccess;\n@@ -31,0 +30,1 @@\n+import javax.crypto.SecretKey;\n@@ -35,1 +35,0 @@\n-import javax.crypto.SecretKey;\n@@ -64,1 +63,1 @@\n-    private byte[] key;\n+    private final byte[] key;\n@@ -71,1 +70,1 @@\n-    private String algorithm;\n+    private final String algorithm;\n@@ -75,6 +74,1 @@\n-                new JavaxCryptoSpecAccess() {\n-                    @Override\n-                    public void clearSecretKeySpec(SecretKeySpec keySpec) {\n-                        keySpec.clear();\n-                    }\n-                });\n+                SecretKeySpec::clear);\n@@ -213,1 +207,1 @@\n-            return (retval ^= \"desede\".hashCode());\n+            return retval ^ \"desede\".hashCode();\n@@ -215,2 +209,1 @@\n-            return (retval ^=\n-                    this.algorithm.toLowerCase(Locale.ENGLISH).hashCode());\n+            return retval ^ this.algorithm.toLowerCase(Locale.ENGLISH).hashCode();\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/spec\/SecretKeySpec.java","additions":7,"deletions":14,"binary":false,"changes":21,"status":"modified"}]}