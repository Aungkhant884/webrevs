{"files":[{"patch":"@@ -1056,0 +1056,3 @@\n+  # jdk.javadoc uses an internal copy of the main license files from java.base.\n+  jdk.javadoc-copy: java.base-copy\n+\n","filename":"make\/Main.gmk","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,47 @@\n+#\n+# Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+include CopyCommon.gmk\n+\n+JDK_JAVADOC_DIR := $(JDK_OUTPUTDIR)\/modules\/jdk.javadoc\n+JDK_JAVADOC_DOCLET_RESOURCE_DIR := $(JDK_JAVADOC_DIR)\/jdk\/javadoc\/internal\/doclets\/formats\/html\/resources\n+\n+################################################################################\n+\n+$(eval $(call SetupCopyFiles, COPY_JAVADOC_MODULE_LEGAL_RESOURCES, \\\n+    DEST := $(JDK_JAVADOC_DOCLET_RESOURCE_DIR)\/legal, \\\n+    FILES := $(wildcard $(MODULE_SRC)\/share\/legal\/*.md), \\\n+))\n+TARGETS += $(COPY_JAVADOC_MODULE_LEGAL_RESOURCES)\n+\n+################################################################################\n+\n+$(eval $(call SetupCopyFiles, COPY_JAVADOC_COMMON_LEGAL_RESOURCES, \\\n+    DEST := $(JDK_JAVADOC_DOCLET_RESOURCE_DIR)\/legal, \\\n+    FILES := $(wildcard $(COMMON_LEGAL_DST_DIR)\/*), \\\n+))\n+TARGETS += $(COPY_JAVADOC_COMMON_LEGAL_RESOURCES)\n+\n+################################################################################\n","filename":"make\/modules\/jdk.javadoc\/Copy.gmk","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -30,0 +30,1 @@\n+import java.net.URISyntaxException;\n@@ -345,2 +346,13 @@\n-                Path javaHome = Path.of(System.getProperty(\"java.home\"));\n-                legalNoticesDir = javaHome.resolve(\"legal\").resolve(getClass().getModule().getName());\n+                \/\/ use a known resource as a stand-in, because we cannot get the URL for a resources directory\n+                var url = HtmlDoclet.class.getResource(\n+                        DocPaths.RESOURCES.resolve(DocPaths.LEGAL).resolve(DocPaths.JQUERY_MD).getPath());\n+                if (url != null) {\n+                    try {\n+                        legalNoticesDir = Path.of(url.toURI()).getParent();\n+                    } catch (URISyntaxException e) {\n+                        \/\/ should not happen when running javadoc from a system image\n+                        return;\n+                    }\n+                } else {\n+                    return;\n+                }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDoclet.java","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -115,0 +115,3 @@\n+    \/** The name of the default jQuery file for legal notices. *\/\n+    public static final DocPath JQUERY_MD = DocPath.create(\"jquery.md\");\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/DocPaths.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -115,0 +115,12 @@\n+\n+        \/\/ See JDK-8306980\n+        for (Path p : foundFiles) {\n+            \/\/ Somewhat unusually, the dominant test is that the string \"Please see...\"\n+            \/\/ does _not_ appear in the generated legal-notice files.\n+            \/\/ The string is used by jlink when creating the legal files for a module\n+            \/\/ on platforms that do not support symbolic links.\n+            \/\/ The test verifies that javadoc is not using any such files.\n+            checkOutput(\"legal\/\" + p, false,\n+                    \"Please see\");\n+        }\n+\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testLegalNotices\/TestLegalNotices.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -842,0 +842,5 @@\n+            @Override\n+            public Iterable<? extends JavaFileObject> getJavaFileObjects(Path... files) {\n+                return delegate.getJavaFileObjects(files);\n+            }\n+\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testSnippetTag\/TestSnippetMarkup.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -135,0 +135,5 @@\n+        @Override\n+        public Iterable<? extends JavaFileObject> getJavaFileObjects(Path... files) {\n+            return fileManager.getJavaFileObjects(files);\n+        }\n+\n","filename":"test\/langtools\/jdk\/javadoc\/tool\/api\/basic\/GetTask_FileManagerTest.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}