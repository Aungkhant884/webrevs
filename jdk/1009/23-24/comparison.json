{"files":[{"patch":"@@ -167,1 +167,0 @@\n-      bool do_nmethods = heap->unload_classes() && !ShenandoahConcurrentRoots::can_do_concurrent_class_unloading();\n@@ -169,0 +168,1 @@\n+      bool do_nmethods = heap->unload_classes() && !ShenandoahConcurrentRoots::can_do_concurrent_class_unloading();\n@@ -213,1 +213,1 @@\n-  assert(!_heap->has_forwarded_objects(), \"Not expected\");\n+  assert(!ShenandoahHeap::heap()->has_forwarded_objects(), \"Not expected\");\n@@ -312,3 +312,3 @@\n-                                                                    ShenandoahReferenceProcessor* rp,\n-                                                                    ShenandoahPhaseTimings::Phase phase,\n-                                                                    uint nworkers) :\n+                                                                     ShenandoahReferenceProcessor* rp,\n+                                                                     ShenandoahPhaseTimings::Phase phase,\n+                                                                     uint nworkers) :\n@@ -325,1 +325,1 @@\n-  ShenandoahMarkResolveRefsClosure cl(q, _rp);\n+  ShenandoahMarkRefsClosure cl(q, _rp);\n@@ -330,1 +330,2 @@\n-  assert(!heap()->has_forwarded_objects(), \"Not expected\");\n+  ShenandoahHeap* const heap = ShenandoahHeap::heap();\n+  assert(!heap->has_forwarded_objects(), \"Not expected\");\n@@ -332,2 +333,2 @@\n-  WorkGang* workers = heap()->workers();\n-  ShenandoahReferenceProcessor* rp = _heap->ref_processor();\n+  WorkGang* workers = heap->workers();\n+  ShenandoahReferenceProcessor* rp = heap->ref_processor();\n@@ -335,1 +336,1 @@\n-  ShenandoahMarkConcurrentRootsTask task(task_queues(), rp,  ShenandoahPhaseTimings::conc_mark_roots, workers->active_workers());\n+  ShenandoahMarkConcurrentRootsTask task(task_queues(), rp, ShenandoahPhaseTimings::conc_mark_roots, workers->active_workers());\n@@ -341,1 +342,2 @@\n-  WorkGang* workers = heap()->workers();\n+  ShenandoahHeap* const heap = ShenandoahHeap::heap();\n+  WorkGang* workers = heap->workers();\n@@ -352,1 +354,1 @@\n-  assert(task_queues()->is_empty() || _heap->cancelled_gc(), \"Should be empty when not cancelled\");\n+  assert(task_queues()->is_empty() || heap->cancelled_gc(), \"Should be empty when not cancelled\");\n@@ -372,0 +374,1 @@\n+  ShenandoahHeap* const heap = ShenandoahHeap::heap();\n@@ -373,1 +376,1 @@\n-  uint nworkers = _heap->workers()->active_workers();\n+  uint nworkers = heap->workers()->active_workers();\n@@ -379,1 +382,1 @@\n-  heap()->workers()->run_task(&task);\n+  heap->workers()->run_task(&task);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentMark.cpp","additions":17,"deletions":14,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -56,2 +56,1 @@\n-  _heap(ShenandoahHeap::heap()),\n-  _task_queues(_heap->marking_context()->task_queues()) {\n+  _task_queues(ShenandoahHeap::heap()->marking_context()->task_queues()) {\n@@ -74,1 +73,2 @@\n-  ShenandoahLiveData* ld = _heap->get_liveness_cache(w);\n+  ShenandoahHeap* const heap = ShenandoahHeap::heap();\n+  ShenandoahLiveData* ld = heap->get_liveness_cache(w);\n@@ -78,2 +78,2 @@\n-  if (_heap->unload_classes()) {\n-    if (_heap->has_forwarded_objects()) {\n+  if (heap->unload_classes()) {\n+    if (heap->has_forwarded_objects()) {\n@@ -97,1 +97,1 @@\n-    if (_heap->has_forwarded_objects()) {\n+    if (heap->has_forwarded_objects()) {\n@@ -116,1 +116,1 @@\n-  _heap->flush_liveness_cache(w);\n+  heap->flush_liveness_cache(w);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -58,1 +58,0 @@\n-  ShenandoahHeap* const              _heap;\n@@ -96,2 +95,0 @@\n-\n-  inline ShenandoahHeap* heap() const;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-  shenandoah_assert_not_in_cset_except(NULL, obj, _heap->cancelled_gc());\n+  shenandoah_assert_not_in_cset_except(NULL, obj, ShenandoahHeap::heap()->cancelled_gc());\n@@ -86,2 +86,3 @@\n-  size_t region_idx = _heap->heap_region_index_containing(obj);\n-  ShenandoahHeapRegion* region = _heap->get_region(region_idx);\n+  ShenandoahHeap* const heap = ShenandoahHeap::heap();\n+  size_t region_idx = heap->heap_region_index_containing(obj);\n+  ShenandoahHeapRegion* region = heap->get_region(region_idx);\n@@ -107,1 +108,1 @@\n-      ShenandoahHeapRegion* chain_reg = _heap->get_region(i);\n+      ShenandoahHeapRegion* chain_reg = heap->get_region(i);\n@@ -303,5 +304,0 @@\n-\n-ShenandoahHeap* ShenandoahMark::heap() const {\n-  return _heap;\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.inline.hpp","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -249,1 +249,0 @@\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkCompact.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2019, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2019, 2021, Red Hat, Inc. All rights reserved.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRootProcessor.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -68,1 +68,2 @@\n-  ShenandoahReferenceProcessor* rp = heap()->ref_processor();\n+  ShenandoahHeap* const heap = ShenandoahHeap::heap();\n+  ShenandoahReferenceProcessor* rp = heap->ref_processor();\n@@ -70,1 +71,1 @@\n-  rp->set_soft_reference_policy(heap()->soft_ref_policy()->should_clear_all_soft_refs());\n+  rp->set_soft_reference_policy(heap->soft_ref_policy()->should_clear_all_soft_refs());\n@@ -75,1 +76,1 @@\n-    heap()->verifier()->verify_roots_no_forwarded();\n+    heap->verifier()->verify_roots_no_forwarded();\n@@ -78,1 +79,1 @@\n-  uint nworkers = heap()->workers()->active_workers();\n+  uint nworkers = heap->workers()->active_workers();\n@@ -81,1 +82,0 @@\n-\n@@ -86,1 +86,1 @@\n-    heap()->workers()->run_task(&task);\n+    heap->workers()->run_task(&task);\n@@ -91,1 +91,1 @@\n-  heap()->mark_complete_marking_context();\n+  heap->mark_complete_marking_context();\n@@ -96,1 +96,0 @@\n-\n@@ -107,1 +106,1 @@\n-  ShenandoahReferenceProcessor* rp = heap()->ref_processor();\n+  ShenandoahReferenceProcessor* rp = ShenandoahHeap::heap()->ref_processor();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahSTWMark.cpp","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"}]}