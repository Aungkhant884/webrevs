{"files":[{"patch":"@@ -37,2 +37,2 @@\n- * schemes and whether SSL\/TLS\/DTLS servers should request or require client\n- * authentication, etc.\n+ * schemes, the key exchange named groups and whether SSL\/TLS\/DTLS servers\n+ * should request or require client authentication, etc.\n@@ -88,0 +88,1 @@\n+    private String[] namedGroups = null;\n@@ -813,0 +814,119 @@\n+\n+    \/**\n+     * Returns a prioritized array of key exchange named groups names that\n+     * can be used over the SSL\/TLS\/DTLS protocols.\n+     * <p>\n+     * Note that the standard list of key exchange named groups are defined\n+     * in the <a href=\n+     * \"{@docRoot}\/..\/specs\/security\/standard-names.html#named-groups\">\n+     * Named Groups<\/a> section of the Java Security Standard Algorithm\n+     * Names Specification.  Providers may support named groups not defined\n+     * in this list or may not use the recommended name for a certain named\n+     * group.\n+     * <p>\n+     * The set of named groups that will be used over the SSL\/TLS\/DTLS\n+     * connections is determined by the returned array of this method and the\n+     * underlying provider-specific default named groups.\n+     * <p>\n+     * If the returned array is {@code null}, then the underlying\n+     * provider-specific default named groups will be used over the\n+     * SSL\/TLS\/DTLS connections.\n+     * <p>\n+     * If the returned array is empty (zero-length), then the named group\n+     * negotiation mechanism is turned off for SSL\/TLS\/DTLS protocols, and\n+     * the connections may not be able to be established if the negotiation\n+     * mechanism is required by a certain SSL\/TLS\/DTLS protocol.  This\n+     * parameter will override the underlying provider-specific default\n+     * name groups.\n+     * <p>\n+     * If the returned array is not {@code null} or empty (zero-length),\n+     * then the named groups in the returned array will be used over\n+     * the SSL\/TLS\/DTLS connections.  This parameter will override the\n+     * underlying provider-specific default named groups.\n+     * <p>\n+     * This method returns the most recent value passed to\n+     * {@link #setNamedGroups} if that method has been called and otherwise\n+     * returns the default named groups for connection populated objects,\n+     * or {@code null} for pre-populated objects.\n+     *\n+     * @apiNote\n+     * Note that a provider may not have been updated to support this method\n+     * and in that case may return {@code null} instead of the default\n+     * named groups for connection populated objects.\n+     *\n+     * @implNote\n+     * The SunJSSE provider supports this method.\n+     *\n+     * @implNote\n+     * Note that applications may use the\n+     * {@systemProperty jdk.tls.namedGroups} system property with the SunJSSE\n+     * provider to override the provider-specific default named groups.\n+     *\n+     * @return an array of key exchange named group names {@code Strings} or\n+     *         {@code null} if none have been set.  For non-null returns, this\n+     *         method will return a new array each time it is invoked.  The\n+     *         array is ordered based on named group preference, with the first\n+     *         entry being the most preferred.  Providers should ignore unknown\n+     *         named group names while establishing the SSL\/TLS\/DTLS\n+     *         connections.\n+     * @see #setNamedGroups\n+     *\n+     * @since 20\n+     *\/\n+    public String[] getNamedGroups() {\n+        return clone(namedGroups);\n+    }\n+\n+    \/**\n+     * Sets the prioritized array of key exchange named groups names that\n+     * can be used over the SSL\/TLS\/DTLS protocols.\n+     * <p>\n+     * Note that the standard list of key exchange named groups are defined in\n+     * the <a href=\n+     * \"{@docRoot}\/..\/specs\/security\/standard-names.html#named-groups\">\n+     * Named Groups<\/a> section of the Java Security Standard Algorithm\n+     * Names Specification.  Providers may support named groups not defined\n+     * in this list or may not use the recommended name for a certain named\n+     * group.\n+     * <p>\n+     * The set of named groups that will be used over the SSL\/TLS\/DTLS\n+     * connections is determined by the input parameter {@code namedGroups}\n+     * array and the underlying provider-specific default named groups.\n+     * See {@link #getNamedGroups} for specific details on how the\n+     * parameters are used in SSL\/TLS\/DTLS connections.\n+     *\n+     * @apiNote\n+     * Note that a provider may not have been updated to support this method\n+     * and in that case may ignore the named groups that are set.\n+     *\n+     * @implNote\n+     * The SunJSSE provider supports this method.\n+     *\n+     * @param namedGroups an ordered array of key exchange named group names\n+     *        with the first entry being the most preferred, or {@code null}.\n+     *        This method will make a copy of this array. Providers should\n+     *        ignore unknown named group scheme names while establishing the\n+     *        SSL\/TLS\/DTLS connections.\n+     * @throws IllegalArgumentException if any element in the\n+     *        {@code namedGroups} array is {@code null} or\n+     *        {@linkplain String#isBlank() blank}.\n+     *\n+     * @see #getNamedGroups\n+     *\n+     * @since 20\n+     *\/\n+    public void setNamedGroups(String[] namedGroups) {\n+        String[] tempGroups = null;\n+\n+        if (namedGroups != null) {\n+            tempGroups = namedGroups.clone();\n+            for (String namedGroup : tempGroups) {\n+                if (namedGroup == null || namedGroup.isBlank()) {\n+                    throw new IllegalArgumentException(\n+                        \"An element of namedGroups is null or blank\");\n+                }\n+            }\n+        }\n+\n+        this.namedGroups = tempGroups;\n+    }\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ssl\/SSLParameters.java","additions":122,"deletions":2,"binary":false,"changes":124,"status":"modified"},{"patch":"@@ -593,0 +593,1 @@\n+                    chc.sslConfig,\n@@ -904,0 +905,1 @@\n+                    context.sslConfig,\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/CertificateVerify.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n-import sun.security.ssl.SupportedGroupsExtension.SupportedGroups;\n@@ -316,6 +315,7 @@\n-                preferableNamedGroup =\n-                        SupportedGroups.getPreferredGroup(context.negotiatedProtocol,\n-                                context.algorithmConstraints,\n-                                new NamedGroupSpec [] {\n-                                    NamedGroupSpec.NAMED_GROUP_FFDHE },\n-                                context.clientRequestedNamedGroups);\n+                preferableNamedGroup = NamedGroup.getPreferredGroup(\n+                        context.sslConfig,\n+                        context.negotiatedProtocol,\n+                        context.algorithmConstraints,\n+                        new NamedGroupSpec [] {\n+                            NamedGroupSpec.NAMED_GROUP_FFDHE },\n+                        context.clientRequestedNamedGroups);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/DHKeyExchange.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -130,0 +130,1 @@\n+                                    shc.sslConfig,\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/DHServerKeyExchange.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -47,1 +47,0 @@\n-import sun.security.ssl.SupportedGroupsExtension.SupportedGroups;\n@@ -239,1 +238,2 @@\n-                preferableNamedGroup = SupportedGroups.getPreferredGroup(\n+                preferableNamedGroup = NamedGroup.getPreferredGroup(\n+                        context.sslConfig,\n@@ -247,1 +247,2 @@\n-                preferableNamedGroup = SupportedGroups.getPreferredGroup(\n+                preferableNamedGroup = NamedGroup.getPreferredGroup(\n+                        context.sslConfig,\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/ECDHKeyExchange.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n-import sun.security.ssl.SupportedGroupsExtension.SupportedGroups;\n@@ -142,0 +141,1 @@\n+                                shc.sslConfig,\n@@ -207,1 +207,1 @@\n-            if (!SupportedGroups.isSupported(namedGroup)) {\n+            if (!NamedGroup.isEnabled(chc.sslConfig, namedGroup)) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/ECDHServerKeyExchange.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-import sun.security.ssl.SupportedGroupsExtension.SupportedGroups;\n@@ -160,2 +159,2 @@\n-        this.activeProtocols = getActiveProtocols(sslConfig.enabledProtocols,\n-                sslConfig.enabledCipherSuites, algorithmConstraints);\n+        this.activeProtocols =\n+                getActiveProtocols(sslConfig, algorithmConstraints);\n@@ -176,2 +175,2 @@\n-        this.activeCipherSuites = getActiveCipherSuites(this.activeProtocols,\n-                sslConfig.enabledCipherSuites, algorithmConstraints);\n+        this.activeCipherSuites = getActiveCipherSuites(sslConfig,\n+                this.activeProtocols, algorithmConstraints);\n@@ -259,2 +258,1 @@\n-            List<ProtocolVersion> enabledProtocols,\n-            List<CipherSuite> enabledCipherSuites,\n+            SSLConfiguration sslConfig,\n@@ -264,1 +262,1 @@\n-        for (ProtocolVersion protocol : enabledProtocols) {\n+        for (ProtocolVersion protocol : sslConfig.enabledProtocols) {\n@@ -280,1 +278,1 @@\n-            for (CipherSuite suite : enabledCipherSuites) {\n+            for (CipherSuite suite : sslConfig.enabledCipherSuites) {\n@@ -282,1 +280,1 @@\n-                    if (isActivatable(suite,\n+                    if (isActivatable(sslConfig, suite,\n@@ -312,0 +310,1 @@\n+            SSLConfiguration sslConfig,\n@@ -313,1 +312,0 @@\n-            List<CipherSuite> enabledCipherSuites,\n@@ -320,1 +318,1 @@\n-            for (CipherSuite suite : enabledCipherSuites) {\n+            for (CipherSuite suite : sslConfig.enabledCipherSuites) {\n@@ -330,1 +328,1 @@\n-                    if (isActivatable(suite,\n+                    if (isActivatable(sslConfig, suite,\n@@ -528,1 +526,3 @@\n-    private static boolean isActivatable(CipherSuite suite,\n+    private static boolean isActivatable(\n+            SSLConfiguration sslConfig,\n+            CipherSuite suite,\n@@ -546,2 +546,2 @@\n-                        groupAvailable = SupportedGroups.isActivatable(\n-                                algorithmConstraints, groupType);\n+                        groupAvailable = NamedGroup.isActivatable(\n+                                sslConfig, algorithmConstraints, groupType);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/HandshakeContext.java","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-import sun.security.ssl.SupportedGroupsExtension.SupportedGroups;\n@@ -348,1 +347,1 @@\n-                if (ng == null || !SupportedGroups.isActivatable(\n+                if (ng == null || !NamedGroup.isActivatable(shc.sslConfig,\n@@ -650,1 +649,1 @@\n-            if (ng == null || !SupportedGroups.isActivatable(\n+            if (ng == null || !NamedGroup.isActivatable(chc.sslConfig,\n@@ -803,1 +802,1 @@\n-                if (SupportedGroups.isActivatable(\n+                if (NamedGroup.isActivatable(shc.sslConfig,\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/KeyShareExtension.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import java.util.ArrayList;\n@@ -41,1 +42,1 @@\n-\n+import sun.security.action.GetPropertyAction;\n@@ -244,3 +245,3 @@\n-               NamedGroupSpec namedGroupSpec,\n-               ProtocolVersion[] supportedProtocols,\n-               AlgorithmParameterSpec keAlgParamSpec) {\n+            NamedGroupSpec namedGroupSpec,\n+            ProtocolVersion[] supportedProtocols,\n+            AlgorithmParameterSpec keAlgParamSpec) {\n@@ -372,0 +373,116 @@\n+    public static List<NamedGroup> namesOf(String[] namedGroups) {\n+        if (namedGroups == null) {\n+            return null;\n+        }\n+\n+        if (namedGroups.length == 0) {\n+            return List.of();\n+        }\n+\n+        List<NamedGroup> ngs = new ArrayList<>(namedGroups.length);\n+        for (String ss : namedGroups) {\n+            NamedGroup ng = NamedGroup.nameOf(ss);\n+            if (ng == null || !ng.isAvailable) {\n+                if (SSLLogger.isOn &&\n+                        SSLLogger.isOn(\"ssl,handshake,verbose\")) {\n+                    SSLLogger.finest(\n+                            \"Ignore the named group (\" + ss\n+                                    + \"), unsupported or unavailable\");\n+                }\n+\n+                continue;\n+            }\n+\n+            ngs.add(ng);\n+        }\n+\n+        return Collections.unmodifiableList(ngs);\n+    }\n+\n+    \/\/ Is there any supported group permitted by the constraints?\n+    static boolean isActivatable(SSLConfiguration sslConfig,\n+            AlgorithmConstraints constraints, NamedGroupSpec type) {\n+\n+        boolean hasFFDHEGroups = false;\n+        for (String ng : sslConfig.namedGroups) {\n+            NamedGroup namedGroup = NamedGroup.nameOf(ng);\n+            if (namedGroup != null &&\n+                namedGroup.isAvailable && namedGroup.spec == type) {\n+                if (namedGroup.isPermitted(constraints)) {\n+                    return true;\n+                }\n+\n+                if (!hasFFDHEGroups &&\n+                        (type == NamedGroupSpec.NAMED_GROUP_FFDHE)) {\n+                    hasFFDHEGroups = true;\n+                }\n+            }\n+        }\n+\n+        \/\/ For compatibility, if no FFDHE groups are defined, the non-FFDHE\n+        \/\/ compatible mode (using DHE cipher suite without FFDHE extension)\n+        \/\/ is allowed.\n+        \/\/\n+        \/\/ Note that the constraints checking on DHE parameters will be\n+        \/\/ performed during key exchanging in a handshake.\n+        return !hasFFDHEGroups && type == NamedGroupSpec.NAMED_GROUP_FFDHE;\n+    }\n+\n+    \/\/ Is the named group permitted by the constraints?\n+    static boolean isActivatable(\n+            SSLConfiguration sslConfig,\n+            AlgorithmConstraints constraints, NamedGroup namedGroup) {\n+        if (!namedGroup.isAvailable || !isEnabled(sslConfig, namedGroup)) {\n+            return false;\n+        }\n+\n+        return namedGroup.isPermitted(constraints);\n+    }\n+\n+    \/\/ Is the named group supported?\n+    static boolean isEnabled(SSLConfiguration sslConfig,\n+                             NamedGroup namedGroup) {\n+        for (String ng : sslConfig.namedGroups) {\n+            if (namedGroup.name.equalsIgnoreCase(ng)) {\n+                return true;\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    static NamedGroup getPreferredGroup(\n+            SSLConfiguration sslConfig,\n+            ProtocolVersion negotiatedProtocol,\n+            AlgorithmConstraints constraints, NamedGroupSpec[] types) {\n+        for (String name : sslConfig.namedGroups) {\n+            NamedGroup ng = NamedGroup.nameOf(name);\n+            if (ng != null && ng.isAvailable &&\n+                    (NamedGroupSpec.arrayContains(types, ng.spec)) &&\n+                    ng.isAvailable(negotiatedProtocol) &&\n+                    ng.isPermitted(constraints)) {\n+                return ng;\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    static NamedGroup getPreferredGroup(\n+            SSLConfiguration sslConfig,\n+            ProtocolVersion negotiatedProtocol,\n+            AlgorithmConstraints constraints, NamedGroupSpec[] types,\n+            List<NamedGroup> requestedNamedGroups) {\n+        for (NamedGroup namedGroup : requestedNamedGroups) {\n+            if ((namedGroup.isAvailable &&\n+                    NamedGroupSpec.arrayContains(types, namedGroup.spec)) &&\n+                    namedGroup.isAvailable(negotiatedProtocol) &&\n+                    isEnabled(sslConfig, namedGroup) &&\n+                    namedGroup.isPermitted(constraints)) {\n+                return namedGroup;\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n@@ -621,0 +738,82 @@\n+\n+    static final class SupportedGroups {\n+        \/\/ the supported named groups, non-null immutable list\n+        static final String[] namedGroups;\n+\n+        static {\n+            \/\/ The value of the System Property defines a list of enabled named\n+            \/\/ groups in preference order, separated with comma.  For example:\n+            \/\/\n+            \/\/      jdk.tls.namedGroups=\"secp521r1, secp256r1, ffdhe2048\"\n+            \/\/\n+            \/\/ If the System Property is not defined or the value is empty, the\n+            \/\/ default groups and preferences will be used.\n+            String property = GetPropertyAction\n+                    .privilegedGetProperty(\"jdk.tls.namedGroups\");\n+            if (property != null && !property.isEmpty()) {\n+                \/\/ remove double quote marks from beginning\/end of the property\n+                if (property.length() > 1 && property.charAt(0) == '\"' &&\n+                        property.charAt(property.length() - 1) == '\"') {\n+                    property = property.substring(1, property.length() - 1);\n+                }\n+            }\n+\n+            ArrayList<String> groupList;\n+            if (property != null && !property.isEmpty()) {\n+                String[] groups = property.split(\",\");\n+                groupList = new ArrayList<>(groups.length);\n+                for (String group : groups) {\n+                    group = group.trim();\n+                    if (!group.isEmpty()) {\n+                        NamedGroup namedGroup = nameOf(group);\n+                        if (namedGroup != null) {\n+                            if (namedGroup.isAvailable) {\n+                                groupList.add(namedGroup.name);\n+                            }\n+                        }   \/\/ ignore unknown groups\n+                    }\n+                }\n+\n+                if (groupList.isEmpty()) {\n+                    throw new IllegalArgumentException(\n+                            \"System property jdk.tls.namedGroups(\" +\n+                            property + \") contains no supported named groups\");\n+                }\n+            } else {        \/\/ default groups\n+                NamedGroup[] groups = new NamedGroup[] {\n+\n+                        \/\/ Primary XDH (RFC 7748) curves\n+                        X25519,\n+\n+                        \/\/ Primary NIST Suite B curves\n+                        SECP256_R1,\n+                        SECP384_R1,\n+                        SECP521_R1,\n+\n+                        \/\/ Secondary XDH curves\n+                        X448,\n+\n+                        \/\/ FFDHE (RFC 7919)\n+                        FFDHE_2048,\n+                        FFDHE_3072,\n+                        FFDHE_4096,\n+                        FFDHE_6144,\n+                        FFDHE_8192,\n+                    };\n+\n+                groupList = new ArrayList<>(groups.length);\n+                for (NamedGroup group : groups) {\n+                    if (group.isAvailable) {\n+                        groupList.add(group.name);\n+                    }\n+                }\n+\n+                if (groupList.isEmpty() &&\n+                        SSLLogger.isOn && SSLLogger.isOn(\"ssl\")) {\n+                    SSLLogger.warning(\"No default named groups\");\n+                }\n+            }\n+\n+            namedGroups = groupList.toArray(new String[0]);\n+        }\n+    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/NamedGroup.java","additions":203,"deletions":4,"binary":false,"changes":207,"status":"modified"},{"patch":"@@ -67,0 +67,3 @@\n+    \/\/ the configured named groups for the \"supported_groups\" extensions\n+    String[]                   namedGroups;\n+\n@@ -112,0 +115,4 @@\n+    \/\/ To switch off the supported_groups extension for DHE cipher suite.\n+    static final boolean enableFFDHE =\n+            Utilities.getBooleanProperty(\"jsse.enableFFDHE\", true);\n+\n@@ -149,0 +156,1 @@\n+        this.namedGroups = NamedGroup.SupportedGroups.namedGroups;\n@@ -204,0 +212,1 @@\n+        params.setNamedGroups(this.namedGroups);\n@@ -268,0 +277,9 @@\n+        String[] ngs = params.getNamedGroups();\n+        if (ngs != null) {\n+            \/\/ Note if 'ss' is empty, then no signature schemes should be\n+            \/\/ specified over the connections.\n+            this.namedGroups = ngs;\n+        } else {    \/\/ Otherwise, use the default values.\n+            this.namedGroups = NamedGroup.SupportedGroups.namedGroups;\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLConfiguration.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -31,2 +31,0 @@\n-\n-import sun.security.ssl.SupportedGroupsExtension.SupportedGroups;\n@@ -564,10 +562,0 @@\n-        static final Map<NamedGroup, T13KeyAgreement>\n-                supportedKeyShares = new HashMap<>();\n-\n-        static {\n-            for (NamedGroup namedGroup :\n-                    SupportedGroups.supportedNamedGroups) {\n-                supportedKeyShares.put(\n-                        namedGroup, new T13KeyAgreement(namedGroup));\n-            }\n-        }\n@@ -580,1 +568,1 @@\n-            return supportedKeyShares.get(namedGroup);\n+            return new T13KeyAgreement(namedGroup);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLKeyExchange.java","additions":1,"deletions":13,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n-import sun.security.ssl.SupportedGroupsExtension.SupportedGroups;\n@@ -469,0 +468,1 @@\n+            SSLConfiguration sslConfig,\n@@ -522,1 +522,1 @@\n-                                SupportedGroups.isSupported(keyGroup)) {\n+                                NamedGroup.isEnabled(sslConfig, keyGroup)) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SignatureScheme.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.security.AlgorithmConstraints;\n@@ -34,1 +33,1 @@\n-import sun.security.action.GetPropertyAction;\n+\n@@ -67,4 +66,0 @@\n-        private SupportedGroupsSpec(int[] namedGroupsIds) {\n-            this.namedGroupsIds = namedGroupsIds;\n-        }\n-\n@@ -153,168 +148,0 @@\n-    static class SupportedGroups {\n-        \/\/ To switch off the supported_groups extension for DHE cipher suite.\n-        static final boolean enableFFDHE =\n-                Utilities.getBooleanProperty(\"jsse.enableFFDHE\", true);\n-\n-        \/\/ the supported named groups\n-        static final NamedGroup[] supportedNamedGroups;\n-\n-        static {\n-            \/\/ The value of the System Property defines a list of enabled named\n-            \/\/ groups in preference order, separated with comma.  For example:\n-            \/\/\n-            \/\/      jdk.tls.namedGroups=\"secp521r1, secp256r1, ffdhe2048\"\n-            \/\/\n-            \/\/ If the System Property is not defined or the value is empty, the\n-            \/\/ default groups and preferences will be used.\n-            String property = GetPropertyAction\n-                    .privilegedGetProperty(\"jdk.tls.namedGroups\");\n-            if (property != null && !property.isEmpty()) {\n-                \/\/ remove double quote marks from beginning\/end of the property\n-                if (property.length() > 1 && property.charAt(0) == '\"' &&\n-                        property.charAt(property.length() - 1) == '\"') {\n-                    property = property.substring(1, property.length() - 1);\n-                }\n-            }\n-\n-            ArrayList<NamedGroup> groupList;\n-            if (property != null && !property.isEmpty()) {\n-                String[] groups = property.split(\",\");\n-                groupList = new ArrayList<>(groups.length);\n-                for (String group : groups) {\n-                    group = group.trim();\n-                    if (!group.isEmpty()) {\n-                        NamedGroup namedGroup = NamedGroup.nameOf(group);\n-                        if (namedGroup != null) {\n-                            if (namedGroup.isAvailable) {\n-                                groupList.add(namedGroup);\n-                            }\n-                        }   \/\/ ignore unknown groups\n-                    }\n-                }\n-\n-                if (groupList.isEmpty()) {\n-                    throw new IllegalArgumentException(\n-                            \"System property jdk.tls.namedGroups(\" +\n-                            property + \") contains no supported named groups\");\n-                }\n-            } else {        \/\/ default groups\n-                NamedGroup[] groups = new NamedGroup[] {\n-\n-                        \/\/ Primary XDH (RFC 7748) curves\n-                        NamedGroup.X25519,\n-\n-                        \/\/ Primary NIST Suite B curves\n-                        NamedGroup.SECP256_R1,\n-                        NamedGroup.SECP384_R1,\n-                        NamedGroup.SECP521_R1,\n-\n-                        \/\/ Secondary XDH curves\n-                        NamedGroup.X448,\n-\n-                        \/\/ FFDHE (RFC 7919)\n-                        NamedGroup.FFDHE_2048,\n-                        NamedGroup.FFDHE_3072,\n-                        NamedGroup.FFDHE_4096,\n-                        NamedGroup.FFDHE_6144,\n-                        NamedGroup.FFDHE_8192,\n-                    };\n-\n-                groupList = new ArrayList<>(groups.length);\n-                for (NamedGroup group : groups) {\n-                    if (group.isAvailable) {\n-                        groupList.add(group);\n-                    }\n-                }\n-\n-                if (groupList.isEmpty() &&\n-                        SSLLogger.isOn && SSLLogger.isOn(\"ssl\")) {\n-                    SSLLogger.warning(\"No default named groups\");\n-                }\n-            }\n-\n-            supportedNamedGroups = new NamedGroup[groupList.size()];\n-            int i = 0;\n-            for (NamedGroup namedGroup : groupList) {\n-                supportedNamedGroups[i++] = namedGroup;\n-            }\n-        }\n-\n-        \/\/ Is there any supported group permitted by the constraints?\n-        static boolean isActivatable(\n-                AlgorithmConstraints constraints, NamedGroupSpec type) {\n-\n-            boolean hasFFDHEGroups = false;\n-            for (NamedGroup namedGroup : supportedNamedGroups) {\n-                if (namedGroup.isAvailable && namedGroup.spec == type) {\n-                    if (namedGroup.isPermitted(constraints)) {\n-                        return true;\n-                    }\n-\n-                    if (!hasFFDHEGroups &&\n-                            (type == NamedGroupSpec.NAMED_GROUP_FFDHE)) {\n-                        hasFFDHEGroups = true;\n-                    }\n-                }\n-            }\n-\n-            \/\/ For compatibility, if no FFDHE groups are defined, the non-FFDHE\n-            \/\/ compatible mode (using DHE cipher suite without FFDHE extension)\n-            \/\/ is allowed.\n-            \/\/\n-            \/\/ Note that the constraints checking on DHE parameters will be\n-            \/\/ performed during key exchanging in a handshake.\n-            return !hasFFDHEGroups && type == NamedGroupSpec.NAMED_GROUP_FFDHE;\n-        }\n-\n-        \/\/ Is the named group permitted by the constraints?\n-        static boolean isActivatable(\n-                AlgorithmConstraints constraints, NamedGroup namedGroup) {\n-            if (!namedGroup.isAvailable || !isSupported(namedGroup)) {\n-                return false;\n-            }\n-\n-            return namedGroup.isPermitted(constraints);\n-        }\n-\n-        \/\/ Is the named group supported?\n-        static boolean isSupported(NamedGroup namedGroup) {\n-            for (NamedGroup group : supportedNamedGroups) {\n-                if (namedGroup.id == group.id) {\n-                    return true;\n-                }\n-            }\n-\n-            return false;\n-        }\n-\n-        static NamedGroup getPreferredGroup(\n-                ProtocolVersion negotiatedProtocol,\n-                AlgorithmConstraints constraints, NamedGroupSpec[] types,\n-                List<NamedGroup> requestedNamedGroups) {\n-            for (NamedGroup namedGroup : requestedNamedGroups) {\n-                if ((NamedGroupSpec.arrayContains(types, namedGroup.spec)) &&\n-                        namedGroup.isAvailable(negotiatedProtocol) &&\n-                        isSupported(namedGroup) &&\n-                        namedGroup.isPermitted(constraints)) {\n-                    return namedGroup;\n-                }\n-            }\n-\n-            return null;\n-        }\n-\n-        static NamedGroup getPreferredGroup(\n-                ProtocolVersion negotiatedProtocol,\n-                AlgorithmConstraints constraints, NamedGroupSpec[] types) {\n-            for (NamedGroup namedGroup : supportedNamedGroups) {\n-                if ((NamedGroupSpec.arrayContains(types, namedGroup.spec)) &&\n-                        namedGroup.isAvailable(negotiatedProtocol) &&\n-                        namedGroup.isPermitted(constraints)) {\n-                    return namedGroup;\n-                }\n-            }\n-\n-            return null;\n-        }\n-    }\n-\n@@ -349,3 +176,12 @@\n-                new ArrayList<>(SupportedGroups.supportedNamedGroups.length);\n-            for (NamedGroup ng : SupportedGroups.supportedNamedGroups) {\n-                if ((!SupportedGroups.enableFFDHE) &&\n+                    new ArrayList<>(chc.sslConfig.namedGroups.length);\n+            for (String name : chc.sslConfig.namedGroups) {\n+                NamedGroup ng = NamedGroup.nameOf(name);\n+                if (ng == null) {\n+                    if (SSLLogger.isOn && SSLLogger.isOn(\"ssl,handshake\")) {\n+                        SSLLogger.fine(\n+                                \"Ignore unspecified named group: \" + name);\n+                    }\n+                    continue;\n+                }\n+\n+                if ((!SSLConfiguration.enableFFDHE) &&\n@@ -498,3 +334,13 @@\n-                    SupportedGroups.supportedNamedGroups.length);\n-            for (NamedGroup ng : SupportedGroups.supportedNamedGroups) {\n-                if ((!SupportedGroups.enableFFDHE) &&\n+                    shc.sslConfig.namedGroups.length);\n+            for (String name : shc.sslConfig.namedGroups) {\n+                NamedGroup ng = NamedGroup.nameOf(name);\n+                if (ng == null) {\n+                    if (SSLLogger.isOn &&\n+                            SSLLogger.isOn(\"ssl,handshake\")) {\n+                        SSLLogger.fine(\n+                                \"Ignore unspecified named group: \" + name);\n+                    }\n+                    continue;\n+                }\n+\n+                if ((!SSLConfiguration.enableFFDHE) &&\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SupportedGroupsExtension.java","additions":26,"deletions":180,"binary":false,"changes":206,"status":"modified"},{"patch":"@@ -42,2 +42,0 @@\n-import sun.security.ssl.SupportedGroupsExtension.SupportedGroups;\n-\n@@ -347,1 +345,1 @@\n-                        (!SupportedGroups.isSupported(namedGroup)) ||\n+                        (!NamedGroup.isEnabled(shc.sslConfig, namedGroup)) ||\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/X509Authentication.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,143 @@\n+\/*\n+ * Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ SunJSSE does not support dynamic system properties, no way to re-use\n+\/\/ system properties in samevm\/agentvm mode.\n+\n+\/*\n+ * @test\n+ * @bug 8281236\n+ * @summary (D)TLS key exchange named groups\n+ * @modules java.base\/sun.security.util\n+ * @library \/test\/lib\n+ * @build DTLSOverDatagram\n+ * @run main\/othervm DTLSNamedGroups\n+ *\/\n+\n+import javax.net.ssl.SSLEngine;\n+import javax.net.ssl.SSLParameters;\n+import java.security.Security;\n+\n+\/**\n+ * Test DTLS client authentication.\n+ *\/\n+public class DTLSNamedGroups extends DTLSOverDatagram {\n+    \/\/ Make sure default DH(E) key exchange is not used for DTLS v1.2.\n+    private static String[] cipherSuites = new String[] {\n+        \"TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256\"\n+    };\n+\n+    private final String[] serverNamedGroups;\n+    private final String[] clientNamedGroups;\n+\n+    public DTLSNamedGroups(String[] serverNamedGroups,\n+                           String[] clientNamedGroups) {\n+        this.serverNamedGroups = serverNamedGroups;\n+        this.clientNamedGroups = clientNamedGroups;\n+    }\n+\n+    @Override\n+    SSLEngine createSSLEngine(boolean isClient) throws Exception {\n+        SSLEngine engine = super.createSSLEngine(isClient);\n+\n+        SSLParameters sslParameters = engine.getSSLParameters();\n+        if (isClient) {\n+            sslParameters.setNamedGroups(clientNamedGroups);\n+            sslParameters.setCipherSuites(cipherSuites);\n+        } else {\n+            sslParameters.setNamedGroups(serverNamedGroups);\n+        }\n+        engine.setSSLParameters(sslParameters);\n+\n+        return engine;\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        Security.setProperty(\"jdk.tls.disabledAlgorithms\", \"\");\n+\n+        runTest(new String[] {\n+                        \"x25519\",\n+                        \"secp256r1\"\n+                },\n+                new String[] {\n+                        \"x25519\",\n+                        \"secp256r1\"\n+                },\n+                false);\n+        runTest(new String[] {\n+                        \"secp256r1\"\n+                },\n+                new String[] {\n+                        \"secp256r1\"\n+                },\n+                false);\n+        runTest(null,\n+                new String[] {\n+                        \"secp256r1\"\n+                },\n+                false);\n+        runTest(new String[] {\n+                        \"secp256r1\"\n+                },\n+                null,\n+                false);\n+        runTest(new String[0],\n+                new String[] {\n+                        \"secp256r1\"\n+                },\n+                true);\n+        runTest(new String[] {\n+                        \"secp256r1\"\n+                },\n+                new String[0],\n+                true);\n+        runTest(new String[] {\n+                        \"secp256NA\"\n+                },\n+                new String[] {\n+                        \"secp256r1\"\n+                },\n+                true);\n+    }\n+\n+    private static void runTest(String[] serverNamedGroups,\n+                                String[] clientNamedGroups,\n+                                boolean exceptionExpected) throws Exception {\n+        DTLSNamedGroups testCase = new DTLSNamedGroups(\n+                serverNamedGroups, clientNamedGroups);\n+        try {\n+            testCase.runTest(testCase);\n+        } catch (Exception e) {\n+            if (!exceptionExpected) {\n+                throw e;\n+            } else { \/\/ Otherwise, swallow the expected exception and return.\n+                return;\n+            }\n+        }\n+\n+        if (exceptionExpected) {\n+            throw new RuntimeException(\"Unexpected success!\");\n+        }\n+    }\n+}\n+\n","filename":"test\/jdk\/javax\/net\/ssl\/DTLS\/DTLSNamedGroups.java","additions":143,"deletions":0,"binary":false,"changes":143,"status":"added"},{"patch":"@@ -0,0 +1,147 @@\n+\/*\n+ * Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ SunJSSE does not support dynamic system properties, no way to re-use\n+\/\/ system properties in samevm\/agentvm mode.\n+\n+\/*\n+ * @test\n+ * @bug 8281236\n+ * @summary (D)TLS key exchange named groups\n+ * @library \/javax\/net\/ssl\/templates\n+ * @run main\/othervm NamedGroups\n+ *\/\n+\n+import javax.net.ssl.SSLParameters;\n+import javax.net.ssl.SSLServerSocket;\n+import javax.net.ssl.SSLSocket;\n+import java.security.Security;\n+\n+public class NamedGroups extends SSLSocketTemplate {\n+    private final String[] serverNamedGroups;\n+    private final String[] clientNamedGroups;\n+    private final boolean exceptionExpected;\n+\n+    public NamedGroups(String[] serverNamedGroups,\n+                            String[] clientNamedGroups,\n+                            boolean exceptionExpected) {\n+        this.serverNamedGroups = serverNamedGroups;\n+        this.clientNamedGroups = clientNamedGroups;\n+        this.exceptionExpected = exceptionExpected;\n+    }\n+\n+    @Override\n+    protected void configureServerSocket(SSLServerSocket sslServerSocket) {\n+        SSLParameters sslParameters = sslServerSocket.getSSLParameters();\n+        sslParameters.setNamedGroups(serverNamedGroups);\n+        sslServerSocket.setSSLParameters(sslParameters);\n+    }\n+\n+    @Override\n+    protected void configureClientSocket(SSLSocket socket) {\n+        SSLParameters sslParameters = socket.getSSLParameters();\n+        sslParameters.setNamedGroups(clientNamedGroups);\n+        socket.setSSLParameters(sslParameters);\n+    }\n+\n+    @Override\n+    protected void runServerApplication(SSLSocket socket) {\n+        try {\n+            super.runServerApplication(socket);\n+        } catch (Exception ex) {\n+            \/\/ Just ignore, let the client handle the failure information.\n+        }\n+    }\n+\n+    @Override\n+    protected void runClientApplication(SSLSocket sslSocket) throws Exception {\n+        try {\n+            super.runClientApplication(sslSocket);\n+        } catch (Exception ex) {\n+            if (!exceptionExpected) {\n+                throw ex;\n+            } else {  \/\/ Otherwise, swallow the exception and return.\n+                return;\n+            }\n+        }\n+\n+        if (exceptionExpected) {\n+            throw new RuntimeException(\"Unexpected success!\");\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        Security.setProperty(\"jdk.tls.disabledAlgorithms\", \"\");\n+\n+        runTest(new String[] {\n+                        \"x25519\",\n+                        \"secp256r1\"\n+                },\n+                new String[] {\n+                        \"x25519\",\n+                        \"secp256r1\"\n+                },\n+                false);\n+        runTest(new String[] {\n+                        \"secp256r1\"\n+                },\n+                new String[] {\n+                        \"secp256r1\"\n+                },\n+                false);\n+        runTest(null,\n+                new String[] {\n+                        \"secp256r1\"\n+                },\n+                false);\n+        runTest(new String[] {\n+                        \"secp256r1\"\n+                },\n+                null,\n+                false);\n+        runTest(new String[0],\n+                new String[] {\n+                        \"secp256r1\"\n+                },\n+                true);\n+        runTest(new String[] {\n+                        \"secp256r1\"\n+                },\n+                new String[0],\n+                true);\n+        runTest(new String[] {\n+                        \"secp256NA\"\n+                },\n+                new String[] {\n+                        \"secp256r1\"\n+                },\n+                true);\n+    }\n+\n+    private static void runTest(String[] serverNamedGroups,\n+                                String[] clientNamedGroups,\n+                                boolean exceptionExpected) throws Exception {\n+        new NamedGroups(serverNamedGroups,\n+                clientNamedGroups, exceptionExpected).run();\n+    }\n+}\n","filename":"test\/jdk\/javax\/net\/ssl\/SSLParameters\/NamedGroups.java","additions":147,"deletions":0,"binary":false,"changes":147,"status":"added"}]}