{"files":[{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.ref.Reference;\n+import java.lang.ref.WeakReference;\n+import java.io.ObjectStreamClass;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertTrue;\n+\n+\/* @test\n+ * @bug 8277072\n+ * @library \/test\/lib\/\n+ * @summary ObjectStreamClass caches keep ClassLoaders alive\n+ * @run testng\/othervm -Xmx10m -XX:SoftRefLRUPolicyMSPerMB=1 ObjectStreamClassCaching\n+ *\/\n+public class ObjectStreamClassCaching {\n+\n+    @Test\n+    public void testCachingEffectiveness() throws Exception {\n+        var ref = lookupObjectStreamClass(TestClass.class);\n+        System.gc();\n+        Thread.sleep(100L);\n+        \/\/ to trigger any ReferenceQueue processing...\n+        lookupObjectStreamClass(AnotherTestClass.class);\n+        assertFalse(ref.refersTo(null),\n+                    \"Cache lost entry although memory was not under pressure\");\n+    }\n+\n+    @Test\n+    public void testCacheReleaseUnderMemoryPressure() throws Exception {\n+        var ref = lookupObjectStreamClass(TestClass.class);\n+        pressMemoryHard(ref);\n+        System.gc();\n+        Thread.sleep(100L);\n+        assertTrue(ref.refersTo(null),\n+                   \"Cache still has entry although memory was pressed hard\");\n+    }\n+\n+    \/\/ separate method so that the looked-up ObjectStreamClass is not kept on stack\n+    private static WeakReference<?> lookupObjectStreamClass(Class<?> cl) {\n+        return new WeakReference<>(ObjectStreamClass.lookup(cl));\n+    }\n+\n+    private static void pressMemoryHard(Reference<?> ref) {\n+        try {\n+            var list = new ArrayList<>();\n+            while (!ref.refersTo(null)) {\n+                list.add(new byte[1024 * 1024 * 64]); \/\/ 64 MiB chunks\n+            }\n+        } catch (OutOfMemoryError e) {\n+            \/\/ release\n+        }\n+    }\n+}\n+\n+class TestClass implements Serializable {\n+}\n+\n+class AnotherTestClass implements Serializable {\n+}\n","filename":"test\/jdk\/java\/io\/ObjectStreamClass\/ObjectStreamClassCaching.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"},{"patch":"@@ -43,1 +43,1 @@\n- * @run testng\/othervm -Xmx10m -XX:SoftRefLRUPolicyMSPerMB=1 TestOSCClassLoaderLeak\n+ * @run testng TestOSCClassLoaderLeak\n@@ -67,18 +67,0 @@\n-\n-    @Test\n-    public void testMemoryPressure() throws Exception {\n-        TestClassLoader myOwnClassLoader = new TestClassLoader();\n-        Class<?> loadClass = myOwnClassLoader.loadClass(\"ObjectStreamClass_MemoryLeakExample\");\n-        Constructor con = loadClass.getConstructor();\n-        con.setAccessible(true);\n-        Object objectStreamClass_MemoryLeakExample = con.newInstance();\n-        objectStreamClass_MemoryLeakExample.toString();\n-\n-        int[] x;\n-        for (int i = 0; i < 2000; i++) {\n-            ObjectStreamClass.lookup(TestClass.class).getFields();\n-            x = new int[1000000];\n-        }\n-\n-        assertNotNull(ObjectStreamClass.lookup(TestClass.class).getFields());\n-    }\n","filename":"test\/jdk\/java\/io\/ObjectStreamClass\/TestOSCClassLoaderLeak.java","additions":1,"deletions":19,"binary":false,"changes":20,"status":"modified"}]}