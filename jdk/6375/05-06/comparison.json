{"files":[{"patch":"@@ -40,1 +40,1 @@\n-        private Class<?> type;\n+        private final Class<?> type;\n@@ -62,1 +62,1 @@\n-                return new SoftReference<>(ClassCache.this.computeValue(type), queue);\n+                return new CacheRef<>(ClassCache.this.computeValue(type), queue, type);\n","filename":"src\/java.base\/share\/classes\/java\/io\/ClassCache.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n- * @run testng TestOSCClassLoaderLeak\n+ * @run testng\/othervm -Xmx10m -XX:SoftRefLRUPolicyMSPerMB=1 TestOSCClassLoaderLeak\n@@ -48,1 +48,1 @@\n-    public void run() throws Exception {\n+    public void testClassLoaderLeak() throws Exception {\n@@ -67,0 +67,18 @@\n+\n+    @Test\n+    public void testMemoryPressure() throws Exception {\n+        TestClassLoader myOwnClassLoader = new TestClassLoader();\n+        Class<?> loadClass = myOwnClassLoader.loadClass(\"ObjectStreamClass_MemoryLeakExample\");\n+        Constructor con = loadClass.getConstructor();\n+        con.setAccessible(true);\n+        Object objectStreamClass_MemoryLeakExample = con.newInstance();\n+        objectStreamClass_MemoryLeakExample.toString();\n+\n+        int[] x;\n+        for (int i = 0; i < 2000; i++) {\n+            ObjectStreamClass.lookup(TestClass.class).getFields();\n+            x = new int[1000000];\n+        }\n+\n+        assertNotNull(ObjectStreamClass.lookup(TestClass.class).getFields());\n+    }\n","filename":"test\/jdk\/java\/io\/ObjectStreamClass\/TestOSCClassLoaderLeak.java","additions":20,"deletions":2,"binary":false,"changes":22,"status":"modified"}]}