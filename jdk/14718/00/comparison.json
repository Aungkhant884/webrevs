{"files":[{"patch":"@@ -1699,1 +1699,1 @@\n-     *        expression 3y*y+x. Hence it is not recommended uless division\n+     *        expression 3y*y+x. Hence it is not recommended unless division\n@@ -3159,1 +3159,1 @@\n-            \/\/ |x| in [log(maxdouble), overflowthresold]\n+            \/\/ |x| in [log(maxdouble), overflowthreshold]\n@@ -3169,1 +3169,1 @@\n-            \/\/ |x| > overflowthresold, sinh(x) overflow\n+            \/\/ |x| > overflowthreshold, sinh(x) overflow\n@@ -3234,1 +3234,1 @@\n-            \/\/ |x| in [log(maxdouble), overflowthresold]\n+            \/\/ |x| in [log(maxdouble), overflowthreshold]\n@@ -3244,1 +3244,1 @@\n-            \/\/ |x| > overflowthresold, cosh(x) overflow\n+            \/\/ |x| > overflowthreshold, cosh(x) overflow\n","filename":"src\/java.base\/share\/classes\/java\/lang\/FdLibm.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1165,1 +1165,1 @@\n-        \/\/ not just the sigificand; quantity is added to the exponent\n+        \/\/ not just the significand; quantity is added to the exponent\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Float.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -534,1 +534,1 @@\n-     * <em>key<\/em> to a value. The {@code Carrier} can be used to accumlate mappings so\n+     * <em>key<\/em> to a value. The {@code Carrier} can be used to accumulate mappings so\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ScopedValue.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,1 @@\n-    \/\/ Map from DirectMethodHandle method type name to index to LambdForms\n+    \/\/ Map from DirectMethodHandle method type name to index to LambdaForms\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/GenerateJLIClassesHelper.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -335,1 +335,1 @@\n-    \/\/ root factory pre\/post processing and calls simple cosntructor\n+    \/\/ root factory pre\/post processing and calls simple constructor\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/LambdaForm.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1127,1 +1127,1 @@\n-         *     NativeMethodAccesssorImpl::invoke(target, args)\n+         *     NativeMethodAccessorImpl::invoke(target, args)\n@@ -1686,1 +1686,1 @@\n-     * @param step sanitited array of loop bodies.\n+     * @param step sanitized array of loop bodies.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3846,1 +3846,1 @@\n-         * for ensureInitialzed, findClass or accessClass.\n+         * for ensureInitialized, findClass or accessClass.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -386,1 +386,1 @@\n-            throw new IllegalArgumentException(\"Out of range major class file vesion \"\n+            throw new IllegalArgumentException(\"Out of range major class file version \"\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/ClassFileFormatVersion.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1271,1 +1271,1 @@\n-                \/\/ visit all superinteraces of one proxy interface to find if\n+                \/\/ visit all superinterfaces of one proxy interface to find if\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Proxy.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -95,1 +95,1 @@\n-     * DigitList is normalized, so if it is non-zero, figits[0] is non-zero.  We\n+     * DigitList is normalized, so if it is non-zero, digits[0] is non-zero.  We\n","filename":"src\/java.base\/share\/classes\/java\/text\/DigitList.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -225,1 +225,1 @@\n-     * @return true if the specified object is equal to this {@code Responderid}\n+     * @return true if the specified object is equal to this {@code ResponderId}\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/ResponderId.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * A time-instance comparison of two byte arrays.\n+ * A time-constant comparison of two byte arrays.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/ByteArrays.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -296,1 +296,1 @@\n-        return true; \/\/ we made it through the guantlet.\n+        return true; \/\/ we made it through the gauntlet.\n","filename":"src\/java.base\/share\/classes\/sun\/text\/CompactByteArray.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}