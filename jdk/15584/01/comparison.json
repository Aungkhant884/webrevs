{"files":[{"patch":"@@ -1281,2 +1281,3 @@\n-            boolean[] hasTry = new boolean[1];\n-            new TreeScanner() {\n+            var scan = new TreeScanner() {\n+                private boolean hasTry;\n+\n@@ -1285,1 +1286,6 @@\n-                    hasTry[0] = true;\n+                    hasTry = true;\n+                }\n+\n+                @Override\n+                public void visitSynchronized(JCSynchronized tree) {\n+                    hasTry = true;\n@@ -1295,2 +1301,3 @@\n-            }.scan(tree);\n-            return hasTry[0];\n+            };\n+            scan.scan(tree);\n+            return scan.hasTry;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Gen.java","additions":12,"deletions":5,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8315735\n+ * @summary Verify valid classfile is produced when synchronized block is used\n+ *          inside a switch expression.\n+ * @compile ExpressionSwitchSynchronized.java\n+ * @run main ExpressionSwitchSynchronized\n+ *\/\n+public class ExpressionSwitchSynchronized {\n+\n+    public static void main(String... args) {\n+        int i1 = 2 + switch (args.length) {\n+            default -> {\n+                synchronized (args) {\n+                    yield 1;\n+                }\n+            }\n+        };\n+        if (i1 != 3) {\n+            throw new AssertionError(\"Incorrect value, got: \" + i1 +\n+                                     \", expected: \" + 3);\n+        }\n+        int i2 = 2 + switch (args) {\n+            case String[] a -> {\n+                synchronized (args) {\n+                    yield a.length + 1;\n+                }\n+            }\n+        };\n+        if (i2 != 3) {\n+            throw new AssertionError(\"Incorrect value, got: \" + i2 +\n+                                     \", expected: \" + 3);\n+        }\n+    }\n+\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/switchexpr\/ExpressionSwitchSynchronized.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"}]}