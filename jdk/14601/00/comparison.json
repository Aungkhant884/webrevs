{"files":[{"patch":"@@ -112,1 +112,2 @@\n-ResourceHashtable<SymbolHandle, ConstraintSet, 107, AnyObj::C_HEAP, mtClass, SymbolHandle::compute_hash> _loader_constraint_table;\n+using LCTable = ResourceHashtable<SymbolHandle, ConstraintSet, 107, AnyObj::C_HEAP, mtClass, SymbolHandle::compute_hash>;\n+static LCTable* _loader_constraint_table;\n@@ -137,0 +138,4 @@\n+void LoaderConstraintTable::initialize() {\n+  _loader_constraint_table = new (mtClass) LCTable();\n+}\n+\n@@ -141,1 +146,1 @@\n-  ConstraintSet* set = _loader_constraint_table.get(name);\n+  ConstraintSet* set = _loader_constraint_table->get(name);\n@@ -170,1 +175,1 @@\n-  ConstraintSet* set = _loader_constraint_table.put_if_absent(name, &created);\n+  ConstraintSet* set = _loader_constraint_table->put_if_absent(name, &created);\n@@ -252,1 +257,1 @@\n-  _loader_constraint_table.unlink(&purge);\n+  _loader_constraint_table->unlink(&purge);\n@@ -444,1 +449,1 @@\n-  ConstraintSet* set = _loader_constraint_table.get(class_name);\n+  ConstraintSet* set = _loader_constraint_table->get(class_name);\n@@ -483,1 +488,1 @@\n-  _loader_constraint_table.iterate_all(check);\n+  _loader_constraint_table->iterate_all(check);\n@@ -497,1 +502,1 @@\n-  TableStatistics ts = _loader_constraint_table.statistics_calculate(size);\n+  TableStatistics ts = _loader_constraint_table->statistics_calculate(size);\n@@ -519,2 +524,2 @@\n-               _loader_constraint_table.table_size(), _loader_constraint_table.number_of_entries());\n-  _loader_constraint_table.iterate_all(printer);\n+               _loader_constraint_table->table_size(), _loader_constraint_table->number_of_entries());\n+  _loader_constraint_table->iterate_all(printer);\n","filename":"src\/hotspot\/share\/classfile\/loaderConstraints.cpp","additions":14,"deletions":9,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-\n+  static void initialize();\n","filename":"src\/hotspot\/share\/classfile\/loaderConstraints.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,2 +53,3 @@\n-ResourceHashtable<PlaceholderKey, PlaceholderEntry, _placeholder_table_size, AnyObj::C_HEAP, mtClass,\n-                  PlaceholderKey::hash, PlaceholderKey::equals> _placeholders;\n+using PHTable = ResourceHashtable<PlaceholderKey, PlaceholderEntry, _placeholder_table_size, AnyObj::C_HEAP, mtClass,\n+                  PlaceholderKey::hash, PlaceholderKey::equals>;\n+static PHTable* _placeholders;\n@@ -210,1 +211,1 @@\n-  PlaceholderEntry* table_copy = _placeholders.put_if_absent(key, entry, &created);\n+  PlaceholderEntry* table_copy = _placeholders->put_if_absent(key, entry, &created);\n@@ -220,1 +221,1 @@\n-  _placeholders.remove(key);\n+  _placeholders->remove(key);\n@@ -227,1 +228,1 @@\n-  return _placeholders.get(key);\n+  return _placeholders->get(key);\n@@ -274,0 +275,4 @@\n+void PlaceholderTable::initialize(){\n+  _placeholders = new (mtClass) PHTable();\n+}\n+\n@@ -343,2 +348,2 @@\n-                _placeholders.table_size(), _placeholders.number_of_entries());\n-  _placeholders.iterate(printer);\n+                _placeholders->table_size(), _placeholders->number_of_entries());\n+  _placeholders->iterate(printer);\n","filename":"src\/hotspot\/share\/classfile\/placeholders.cpp","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-\n+  static void initialize();\n","filename":"src\/hotspot\/share\/classfile\/placeholders.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-ResourceHashtable<WeakHandle, WeakHandle, 1009, AnyObj::C_HEAP, mtClass,\n+using PDCTable = ResourceHashtable<WeakHandle, WeakHandle, 1009, AnyObj::C_HEAP, mtClass,\n@@ -56,1 +56,2 @@\n-                  ProtectionDomainCacheTable::equals> _pd_cache_table;\n+                  ProtectionDomainCacheTable::equals>;\n+static PDCTable* _pd_cache_table;\n@@ -61,0 +62,3 @@\n+void ProtectionDomainCacheTable::initialize(){\n+  _pd_cache_table = new (mtClass) PDCTable();\n+}\n@@ -162,1 +166,1 @@\n-  _pd_cache_table.unlink(&deleter);\n+  _pd_cache_table->unlink(&deleter);\n@@ -174,2 +178,2 @@\n-                _pd_cache_table.table_size(), _pd_cache_table.number_of_entries());\n-  _pd_cache_table.iterate_all(printer);\n+                _pd_cache_table->table_size(), _pd_cache_table->number_of_entries());\n+  _pd_cache_table->iterate_all(printer);\n@@ -182,1 +186,1 @@\n-  _pd_cache_table.iterate_all(verifier);\n+  _pd_cache_table->iterate_all(verifier);\n@@ -195,1 +199,1 @@\n-  WeakHandle* wk = _pd_cache_table.put_if_absent(w, w, &created);\n+  WeakHandle* wk = _pd_cache_table->put_if_absent(w, w, &created);\n@@ -218,1 +222,1 @@\n-  TableStatistics ts = _pd_cache_table.statistics_calculate(size);\n+  TableStatistics ts = _pd_cache_table->statistics_calculate(size);\n@@ -223,1 +227,1 @@\n-  return _pd_cache_table.number_of_entries();\n+  return _pd_cache_table->number_of_entries();\n","filename":"src\/hotspot\/share\/classfile\/protectionDomainCache.cpp","additions":13,"deletions":9,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+  static void initialize();\n","filename":"src\/hotspot\/share\/classfile\/protectionDomainCache.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-ResourceHashtable<ResolutionErrorKey, ResolutionErrorEntry*, 107, AnyObj::C_HEAP, mtClass,\n+using RETable = ResourceHashtable<ResolutionErrorKey, ResolutionErrorEntry*, 107, AnyObj::C_HEAP, mtClass,\n@@ -59,1 +59,7 @@\n-                  ResolutionErrorKey::equals> _resolution_error_table;\n+                  ResolutionErrorKey::equals>;\n+\n+static RETable* _resolution_error_table;\n+\n+void ResolutionErrorTable::initialize() {\n+  _resolution_error_table = new (mtClass) RETable();\n+}\n@@ -71,1 +77,1 @@\n-  _resolution_error_table.put(key, entry);\n+  _resolution_error_table->put(key, entry);\n@@ -83,1 +89,1 @@\n-  _resolution_error_table.put(key, entry);\n+  _resolution_error_table->put(key, entry);\n@@ -90,1 +96,1 @@\n-  ResolutionErrorEntry** entry = _resolution_error_table.get(key);\n+  ResolutionErrorEntry** entry = _resolution_error_table->get(key);\n@@ -142,1 +148,1 @@\n-  _resolution_error_table.unlink(&deleteIterator);\n+  _resolution_error_table->unlink(&deleteIterator);\n@@ -163,1 +169,1 @@\n-  _resolution_error_table.unlink(&purgeErrorsIterator);\n+  _resolution_error_table->unlink(&purgeErrorsIterator);\n","filename":"src\/hotspot\/share\/classfile\/resolutionErrors.cpp","additions":13,"deletions":7,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+  static void initialize();\n","filename":"src\/hotspot\/share\/classfile\/resolutionErrors.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -116,3 +116,5 @@\n-ResourceHashtable<InvokeMethodKey, Method*, 139, AnyObj::C_HEAP, mtClass,\n-                  InvokeMethodKey::compute_hash, InvokeMethodKey::key_comparison> _invoke_method_intrinsic_table;\n-ResourceHashtable<SymbolHandle, OopHandle, 139, AnyObj::C_HEAP, mtClass, SymbolHandle::compute_hash> _invoke_method_type_table;\n+using InvokeMethodIntrisicTable = ResourceHashtable<InvokeMethodKey, Method*, 139, AnyObj::C_HEAP, mtClass,\n+                  InvokeMethodKey::compute_hash, InvokeMethodKey::key_comparison>;\n+static InvokeMethodIntrisicTable* _invoke_method_intrinsic_table;\n+using InvokeMethodTypeTable = ResourceHashtable<SymbolHandle, OopHandle, 139, AnyObj::C_HEAP, mtClass, SymbolHandle::compute_hash>;\n+static InvokeMethodTypeTable* _invoke_method_type_table;\n@@ -1595,1 +1597,1 @@\n-    _invoke_method_intrinsic_table.iterate_all(doit);\n+    _invoke_method_intrinsic_table->iterate_all(doit);\n@@ -1604,0 +1606,6 @@\n+  ResolutionErrorTable::initialize();\n+  _invoke_method_intrinsic_table = new (mtClass) InvokeMethodIntrisicTable();\n+  _invoke_method_type_table = new (mtClass) InvokeMethodTypeTable();\n+  LoaderConstraintTable::initialize();\n+  PlaceholderTable::initialize();\n+  ProtectionDomainCacheTable::initialize();\n@@ -1607,1 +1615,0 @@\n-\n@@ -1957,1 +1964,1 @@\n-      met = _invoke_method_intrinsic_table.put_if_absent(key, &created);\n+      met = _invoke_method_intrinsic_table->put_if_absent(key, &created);\n@@ -1988,1 +1995,1 @@\n-      bool removed = _invoke_method_intrinsic_table.remove(key);\n+      bool removed = _invoke_method_intrinsic_table->remove(key);\n@@ -2151,1 +2158,1 @@\n-    o = _invoke_method_type_table.get(signature);\n+    o = _invoke_method_type_table->get(signature);\n@@ -2222,1 +2229,1 @@\n-    OopHandle* h = _invoke_method_type_table.get(signature);\n+    OopHandle* h = _invoke_method_type_table->get(signature);\n@@ -2226,1 +2233,1 @@\n-      bool created = _invoke_method_type_table.put(signature, elem);\n+      bool created = _invoke_method_type_table->put(signature, elem);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":17,"deletions":10,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -618,1 +618,0 @@\n-\n","filename":"src\/hotspot\/share\/classfile\/verifier.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -981,2 +981,2 @@\n-ResourceHashtable<const InstanceKlass*, OopHandle, 107, AnyObj::C_HEAP, mtClass>\n-      _initialization_error_table;\n+using IETable = ResourceHashtable<const InstanceKlass*, OopHandle, 107, AnyObj::C_HEAP, mtClass>;\n+static IETable* _initialization_error_table;\n@@ -1009,1 +1009,4 @@\n-  _initialization_error_table.put_if_absent(this, elem, &created);\n+  if (_initialization_error_table == nullptr) {\n+    _initialization_error_table = new (mtClass) IETable();\n+  }\n+  _initialization_error_table->put_if_absent(this, elem, &created);\n@@ -1016,1 +1019,4 @@\n-  OopHandle* h = _initialization_error_table.get(this);\n+  if (_initialization_error_table == nullptr) {\n+    return nullptr;\n+  }\n+  OopHandle* h = _initialization_error_table->get(this);\n@@ -1035,1 +1041,3 @@\n-  _initialization_error_table.unlink(&cleaner);\n+  if (_initialization_error_table != nullptr) {\n+    _initialization_error_table->unlink(&cleaner);\n+  }\n@@ -4326,0 +4334,1 @@\n+\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":14,"deletions":5,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2630,1 +2630,1 @@\n-ResourceHashtable<AdapterFingerPrint*, AdapterHandlerEntry*, 293,\n+using AHTable = ResourceHashtable<AdapterFingerPrint*, AdapterHandlerEntry*, 293,\n@@ -2633,1 +2633,2 @@\n-                  AdapterFingerPrint::equals> _adapter_handler_table;\n+                  AdapterFingerPrint::equals>;\n+static AHTable* _adapter_handler_table;\n@@ -2640,1 +2641,1 @@\n-  AdapterHandlerEntry** entry = _adapter_handler_table.get(&fp);\n+  AdapterHandlerEntry** entry = _adapter_handler_table->get(&fp);\n@@ -2656,1 +2657,1 @@\n-  TableStatistics ts = _adapter_handler_table.statistics_calculate(size);\n+  TableStatistics ts = _adapter_handler_table->statistics_calculate(size);\n@@ -2659,1 +2660,1 @@\n-                _adapter_handler_table.table_size(), _adapter_handler_table.number_of_entries());\n+                _adapter_handler_table->table_size(), _adapter_handler_table->number_of_entries());\n@@ -2707,0 +2708,1 @@\n+    _adapter_handler_table = new (mtClass) AHTable();\n@@ -2948,1 +2950,1 @@\n-                  _adapter_handler_table.number_of_entries(), fingerprint->as_basic_args_string(),\n+                  _adapter_handler_table->number_of_entries(), fingerprint->as_basic_args_string(),\n@@ -2966,1 +2968,1 @@\n-    _adapter_handler_table.put(fingerprint, entry);\n+    _adapter_handler_table->put(fingerprint, entry);\n@@ -3299,1 +3301,1 @@\n-  _adapter_handler_table.iterate(findblob);\n+  _adapter_handler_table->iterate(findblob);\n@@ -3316,1 +3318,1 @@\n-  _adapter_handler_table.iterate(findblob);\n+  _adapter_handler_table->iterate(findblob);\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"}]}