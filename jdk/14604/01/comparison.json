{"files":[{"patch":"@@ -70,1 +70,1 @@\n-  BufferBlob* blob = BufferBlob::create(name, size);\n+  BufferBlob* blob = BufferBlob::create(name, checked_cast<int>(size));\n","filename":"src\/hotspot\/share\/code\/stubs.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -158,1 +158,1 @@\n-  int   index_of(Stub* s) const                  { int i = (address)s - _stub_buffer; check_index(i); return i; }\n+  int   index_of(Stub* s) const                  { int i = (int)((address)s - _stub_buffer); check_index(i); return i; }\n","filename":"src\/hotspot\/share\/code\/stubs.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -133,1 +133,1 @@\n-    float     rel = abs * 100.0F \/ tot;\n+    float     rel = (float)abs * 100.0F \/ (float)tot;\n@@ -140,1 +140,1 @@\n-  float rel_sum = abs_sum * 100.0F \/ tot;\n+  float rel_sum = (float)abs_sum * 100.0F \/ (float)tot;\n@@ -175,1 +175,1 @@\n-    float     rel = abs * 100.0F \/ tot;\n+    float     rel = (float)abs * 100.0F \/ (float)tot;\n@@ -184,1 +184,1 @@\n-  float rel_sum = abs_sum * 100.0F \/ tot;\n+  float rel_sum = (float)abs_sum * 100.0F \/ (float)tot;\n","filename":"src\/hotspot\/share\/interpreter\/bytecodeHistogram.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -121,1 +121,1 @@\n-     int bci = bcp - method->code_base();\n+     int bci = (int)(bcp - method->code_base());\n@@ -150,1 +150,1 @@\n-    int bci = bcp - method->code_base();\n+    int bci = (int)(bcp - method->code_base());\n","filename":"src\/hotspot\/share\/interpreter\/bytecodeTracer.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -356,1 +356,1 @@\n-StackSlotAnalysisData::StackSlotAnalysisData(int bci, BasicType type) : _bci(bci), _type(type) {\n+StackSlotAnalysisData::StackSlotAnalysisData(int bci, BasicType type) : _bci((u2)bci), _type(type) {\n@@ -1084,1 +1084,1 @@\n-  for (int64_t i = 0; i < dests.length(); ++i) {\n+  for (int i = 0; i < dests.length(); ++i) {\n","filename":"src\/hotspot\/share\/interpreter\/bytecodeUtils.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -388,3 +388,3 @@\n-      jlong lo = (jint)Bytes::get_Java_u4(aligned_bcp + 1*jintSize);\n-      jlong hi = (jint)Bytes::get_Java_u4(aligned_bcp + 2*jintSize);\n-      jlong len = (aligned_bcp - bcp) + (3 + hi - lo + 1)*jintSize;\n+      int lo = Bytes::get_Java_u4(aligned_bcp + 1*jintSize);\n+      int hi = Bytes::get_Java_u4(aligned_bcp + 2*jintSize);\n+      int len = (int)(aligned_bcp - bcp) + (3 + hi - lo + 1)*jintSize;\n@@ -403,2 +403,2 @@\n-      jlong npairs = (jint)Bytes::get_Java_u4(aligned_bcp + jintSize);\n-      jlong len = (aligned_bcp - bcp) + (2 + 2*npairs)*jintSize;\n+      int npairs = Bytes::get_Java_u4(aligned_bcp + jintSize);\n+      int len = (int)(aligned_bcp - bcp) + (2 + 2*npairs)*jintSize;\n@@ -442,1 +442,1 @@\n-  int bc_flags = 0;\n+  jchar bc_flags = 0;\n@@ -472,1 +472,1 @@\n-int Bytecodes::compute_flags(const char* format, int more_flags) {\n+jchar Bytecodes::compute_flags(const char* format, jchar more_flags) {\n@@ -474,1 +474,1 @@\n-  int flags = more_flags;\n+  jchar flags = more_flags;\n@@ -494,1 +494,1 @@\n-    int this_flag = 0;\n+    jchar this_flag = 0;\n@@ -498,1 +498,0 @@\n-      assert(flags == (jchar)flags, \"change _format_flags\");\n","filename":"src\/hotspot\/share\/interpreter\/bytecodes.cpp","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -313,1 +313,1 @@\n-  enum Flags {\n+  enum Flags : jchar {\n@@ -357,0 +357,1 @@\n+  static jchar compute_flags  (const char* format, jchar more_flags);  \/\/ compute the flags\n@@ -426,1 +427,0 @@\n-  static int         compute_flags  (const char* format, int more_flags = 0);  \/\/ compute the flags\n","filename":"src\/hotspot\/share\/interpreter\/bytecodes.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,1 +77,1 @@\n-  int         code_size() const                  { return code_end() - code_begin(); }\n+  int         code_size() const                  { return (int)(code_end() - code_begin()); }\n@@ -112,1 +112,1 @@\n-    int codelet_size = AbstractInterpreter::code()->available_space() - 2*K;\n+    int codelet_size = AbstractInterpreter::code()->available_space() - (int)(2*K);\n","filename":"src\/hotspot\/share\/interpreter\/interpreter.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -68,1 +68,1 @@\n-  tty->print_cr(\"invocation count: up = %d, limit = %d, carry = %s\",\n+  tty->print_cr(\"invocation count: up = %d, limit = \" INTX_FORMAT \", carry = %s\",\n","filename":"src\/hotspot\/share\/interpreter\/invocationCounter.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,1 +71,1 @@\n-  uint limit() const               { return CompileThreshold; }\n+  intx limit() const               { return CompileThreshold; }\n","filename":"src\/hotspot\/share\/interpreter\/invocationCounter.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -337,1 +337,1 @@\n-  set_bci(bci);\n+  set_bci(checked_cast<unsigned short>(bci));  \/\/ bci is always u2\n","filename":"src\/hotspot\/share\/interpreter\/oopMapCache.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -105,2 +105,2 @@\n-  int            bci() const                     { return _bci; }\n-  void           set_bci(int v)                  { _bci = v; }\n+  unsigned short bci() const                     { return _bci; }\n+  void           set_bci(unsigned short v)       { _bci = v; }\n","filename":"src\/hotspot\/share\/interpreter\/oopMapCache.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-    Bytes::put_native_u2(p, cache_index);\n+    Bytes::put_native_u2(p, (u2)cache_index);\n@@ -190,1 +190,1 @@\n-    Bytes::put_Java_u2(p, pool_index);\n+    Bytes::put_Java_u2(p, (u2)pool_index);\n@@ -209,1 +209,1 @@\n-      Bytes::put_native_u2(p, cache_index);\n+      Bytes::put_native_u2(p, (u2)cache_index);\n@@ -298,1 +298,1 @@\n-    Bytes::put_Java_u2(p, cp_index);\n+    Bytes::put_Java_u2(p, (u2)cp_index);\n@@ -322,1 +322,1 @@\n-        Bytes::put_native_u2(p, ref_index);\n+        Bytes::put_native_u2(p, (u2)ref_index);\n@@ -339,1 +339,1 @@\n-        Bytes::put_Java_u2(p, pool_index);\n+        Bytes::put_Java_u2(p, (u2)pool_index);\n","filename":"src\/hotspot\/share\/interpreter\/rewriter.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-  int        distance_from(address *table)      { return table - table_for(); }\n+  int        distance_from(address *table)      { return (int)(table - table_for()); }\n","filename":"src\/hotspot\/share\/interpreter\/templateInterpreter.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,2 +51,2 @@\n-  int i = this - TemplateTable::_template_table;\n-  if (i < 0 || i >= Bytecodes::number_of_codes) i = this - TemplateTable::_template_table_wide;\n+  int i = (int)(this - TemplateTable::_template_table);\n+  if (i < 0 || i >= Bytecodes::number_of_codes) i = (int)(this - TemplateTable::_template_table_wide);\n","filename":"src\/hotspot\/share\/interpreter\/templateTable.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -234,1 +234,1 @@\n-  uint     age()           const { return mask_bits(value() >> age_shift, age_mask); }\n+  uint     age()           const { return (uint) mask_bits(value() >> age_shift, age_mask); }\n","filename":"src\/hotspot\/share\/oops\/markWord.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -126,1 +126,1 @@\n-  return p - start_address();\n+  return (int)(p - start_address());\n","filename":"src\/hotspot\/share\/oops\/stackChunkOop.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -718,1 +718,1 @@\n-enum BasicType {\n+enum BasicType : u1 {\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}