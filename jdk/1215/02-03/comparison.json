{"files":[{"patch":"@@ -17982,164 +17982,0 @@\n-\/\/ --------------------------------- ABS --------------------------------------\n-\n-instruct vabs8B(vecD dst, vecD src)\n-%{\n-  predicate(n->as_Vector()->length() == 4 ||\n-            n->as_Vector()->length() == 8);\n-  match(Set dst (AbsVB src));\n-  ins_cost(INSN_COST);\n-  format %{ \"abs  $dst, $src\\t# vector (8B)\" %}\n-  ins_encode %{\n-    __ absr(as_FloatRegister($dst$$reg), __ T8B, as_FloatRegister($src$$reg));\n-  %}\n-  ins_pipe(vlogical64);\n-%}\n-\n-instruct vabs16B(vecX dst, vecX src)\n-%{\n-  predicate(n->as_Vector()->length() == 16);\n-  match(Set dst (AbsVB src));\n-  ins_cost(INSN_COST);\n-  format %{ \"abs  $dst, $src\\t# vector (16B)\" %}\n-  ins_encode %{\n-    __ absr(as_FloatRegister($dst$$reg), __ T16B, as_FloatRegister($src$$reg));\n-  %}\n-  ins_pipe(vlogical128);\n-%}\n-\n-instruct vabs4S(vecD dst, vecD src)\n-%{\n-  predicate(n->as_Vector()->length() == 4);\n-  match(Set dst (AbsVS src));\n-  ins_cost(INSN_COST);\n-  format %{ \"abs  $dst, $src\\t# vector (4H)\" %}\n-  ins_encode %{\n-    __ absr(as_FloatRegister($dst$$reg), __ T4H, as_FloatRegister($src$$reg));\n-  %}\n-  ins_pipe(vlogical64);\n-%}\n-\n-instruct vabs8S(vecX dst, vecX src)\n-%{\n-  predicate(n->as_Vector()->length() == 8);\n-  match(Set dst (AbsVS src));\n-  ins_cost(INSN_COST);\n-  format %{ \"abs  $dst, $src\\t# vector (8H)\" %}\n-  ins_encode %{\n-    __ absr(as_FloatRegister($dst$$reg), __ T8H, as_FloatRegister($src$$reg));\n-  %}\n-  ins_pipe(vlogical128);\n-%}\n-\n-instruct vabs2I(vecD dst, vecD src)\n-%{\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (AbsVI src));\n-  ins_cost(INSN_COST);\n-  format %{ \"abs  $dst, $src\\t# vector (2S)\" %}\n-  ins_encode %{\n-    __ absr(as_FloatRegister($dst$$reg), __ T2S, as_FloatRegister($src$$reg));\n-  %}\n-  ins_pipe(vlogical64);\n-%}\n-\n-instruct vabs4I(vecX dst, vecX src)\n-%{\n-  predicate(n->as_Vector()->length() == 4);\n-  match(Set dst (AbsVI src));\n-  ins_cost(INSN_COST);\n-  format %{ \"abs  $dst, $src\\t# vector (4S)\" %}\n-  ins_encode %{\n-    __ absr(as_FloatRegister($dst$$reg), __ T4S, as_FloatRegister($src$$reg));\n-  %}\n-  ins_pipe(vlogical128);\n-%}\n-\n-instruct vabs2L(vecX dst, vecX src)\n-%{\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (AbsVL src));\n-  ins_cost(INSN_COST);\n-  format %{ \"abs  $dst, $src\\t# vector (2D)\" %}\n-  ins_encode %{\n-    __ absr(as_FloatRegister($dst$$reg), __ T2D, as_FloatRegister($src$$reg));\n-  %}\n-  ins_pipe(vlogical128);\n-%}\n-\n-instruct vabs2F(vecD dst, vecD src)\n-%{\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (AbsVF src));\n-  ins_cost(INSN_COST * 3);\n-  format %{ \"fabs  $dst,$src\\t# vector (2S)\" %}\n-  ins_encode %{\n-    __ fabs(as_FloatRegister($dst$$reg), __ T2S, as_FloatRegister($src$$reg));\n-  %}\n-  ins_pipe(vunop_fp64);\n-%}\n-\n-instruct vabs4F(vecX dst, vecX src)\n-%{\n-  predicate(n->as_Vector()->length() == 4);\n-  match(Set dst (AbsVF src));\n-  ins_cost(INSN_COST * 3);\n-  format %{ \"fabs  $dst,$src\\t# vector (4S)\" %}\n-  ins_encode %{\n-    __ fabs(as_FloatRegister($dst$$reg), __ T4S, as_FloatRegister($src$$reg));\n-  %}\n-  ins_pipe(vunop_fp128);\n-%}\n-\n-instruct vabs2D(vecX dst, vecX src)\n-%{\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (AbsVD src));\n-  ins_cost(INSN_COST * 3);\n-  format %{ \"fabs  $dst,$src\\t# vector (2D)\" %}\n-  ins_encode %{\n-    __ fabs(as_FloatRegister($dst$$reg), __ T2D, as_FloatRegister($src$$reg));\n-  %}\n-  ins_pipe(vunop_fp128);\n-%}\n-\n-\/\/ --------------------------------- FABS DIFF --------------------------------\n-\n-instruct vabsd2F(vecD dst, vecD src1, vecD src2)\n-%{\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (AbsVF (SubVF src1 src2)));\n-  ins_cost(INSN_COST * 3);\n-  format %{ \"fabd  $dst,$src1,$src2\\t# vector (2S)\" %}\n-  ins_encode %{\n-    __ fabd(as_FloatRegister($dst$$reg), __ T2S,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vunop_fp64);\n-%}\n-\n-instruct vabsd4F(vecX dst, vecX src1, vecX src2)\n-%{\n-  predicate(n->as_Vector()->length() == 4);\n-  match(Set dst (AbsVF (SubVF src1 src2)));\n-  ins_cost(INSN_COST * 3);\n-  format %{ \"fabd  $dst,$src1,$src2\\t# vector (4S)\" %}\n-  ins_encode %{\n-    __ fabd(as_FloatRegister($dst$$reg), __ T4S,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vunop_fp128);\n-%}\n-\n-instruct vabsd2D(vecX dst, vecX src1, vecX src2)\n-%{\n-  predicate(n->as_Vector()->length() == 2);\n-  match(Set dst (AbsVD (SubVD src1 src2)));\n-  ins_cost(INSN_COST * 3);\n-  format %{ \"fabd  $dst,$src1,$src2\\t# vector (2D)\" %}\n-  ins_encode %{\n-    __ fabd(as_FloatRegister($dst$$reg), __ T2D,\n-            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n-  %}\n-  ins_pipe(vunop_fp128);\n-%}\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":0,"deletions":164,"binary":false,"changes":164,"status":"modified"},{"patch":"@@ -3457,0 +3457,163 @@\n+\n+\/\/ --------------------------------- ABS --------------------------------------\n+\n+instruct vabs8B(vecD dst, vecD src)\n+%{\n+  predicate(n->as_Vector()->length() == 8);\n+  match(Set dst (AbsVB src));\n+  ins_cost(INSN_COST);\n+  format %{ \"abs  $dst, $src\\t# vector (8B)\" %}\n+  ins_encode %{\n+    __ absr(as_FloatRegister($dst$$reg), __ T8B, as_FloatRegister($src$$reg));\n+  %}\n+  ins_pipe(vlogical64);\n+%}\n+\n+instruct vabs16B(vecX dst, vecX src)\n+%{\n+  predicate(n->as_Vector()->length() == 16);\n+  match(Set dst (AbsVB src));\n+  ins_cost(INSN_COST);\n+  format %{ \"abs  $dst, $src\\t# vector (16B)\" %}\n+  ins_encode %{\n+    __ absr(as_FloatRegister($dst$$reg), __ T16B, as_FloatRegister($src$$reg));\n+  %}\n+  ins_pipe(vlogical128);\n+%}\n+\n+instruct vabs4S(vecD dst, vecD src)\n+%{\n+  predicate(n->as_Vector()->length() == 4);\n+  match(Set dst (AbsVS src));\n+  ins_cost(INSN_COST);\n+  format %{ \"abs  $dst, $src\\t# vector (4H)\" %}\n+  ins_encode %{\n+    __ absr(as_FloatRegister($dst$$reg), __ T4H, as_FloatRegister($src$$reg));\n+  %}\n+  ins_pipe(vlogical64);\n+%}\n+\n+instruct vabs8S(vecX dst, vecX src)\n+%{\n+  predicate(n->as_Vector()->length() == 8);\n+  match(Set dst (AbsVS src));\n+  ins_cost(INSN_COST);\n+  format %{ \"abs  $dst, $src\\t# vector (8H)\" %}\n+  ins_encode %{\n+    __ absr(as_FloatRegister($dst$$reg), __ T8H, as_FloatRegister($src$$reg));\n+  %}\n+  ins_pipe(vlogical128);\n+%}\n+\n+instruct vabs2I(vecD dst, vecD src)\n+%{\n+  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (AbsVI src));\n+  ins_cost(INSN_COST);\n+  format %{ \"abs  $dst, $src\\t# vector (2S)\" %}\n+  ins_encode %{\n+    __ absr(as_FloatRegister($dst$$reg), __ T2S, as_FloatRegister($src$$reg));\n+  %}\n+  ins_pipe(vlogical64);\n+%}\n+\n+instruct vabs4I(vecX dst, vecX src)\n+%{\n+  predicate(n->as_Vector()->length() == 4);\n+  match(Set dst (AbsVI src));\n+  ins_cost(INSN_COST);\n+  format %{ \"abs  $dst, $src\\t# vector (4S)\" %}\n+  ins_encode %{\n+    __ absr(as_FloatRegister($dst$$reg), __ T4S, as_FloatRegister($src$$reg));\n+  %}\n+  ins_pipe(vlogical128);\n+%}\n+\n+instruct vabs2L(vecX dst, vecX src)\n+%{\n+  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (AbsVL src));\n+  ins_cost(INSN_COST);\n+  format %{ \"abs  $dst, $src\\t# vector (2D)\" %}\n+  ins_encode %{\n+    __ absr(as_FloatRegister($dst$$reg), __ T2D, as_FloatRegister($src$$reg));\n+  %}\n+  ins_pipe(vlogical128);\n+%}\n+\n+instruct vabs2F(vecD dst, vecD src)\n+%{\n+  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (AbsVF src));\n+  ins_cost(INSN_COST * 3);\n+  format %{ \"fabs  $dst, $src\\t# vector (2S)\" %}\n+  ins_encode %{\n+    __ fabs(as_FloatRegister($dst$$reg), __ T2S, as_FloatRegister($src$$reg));\n+  %}\n+  ins_pipe(vunop_fp64);\n+%}\n+\n+instruct vabs4F(vecX dst, vecX src)\n+%{\n+  predicate(n->as_Vector()->length() == 4);\n+  match(Set dst (AbsVF src));\n+  ins_cost(INSN_COST * 3);\n+  format %{ \"fabs  $dst, $src\\t# vector (4S)\" %}\n+  ins_encode %{\n+    __ fabs(as_FloatRegister($dst$$reg), __ T4S, as_FloatRegister($src$$reg));\n+  %}\n+  ins_pipe(vunop_fp128);\n+%}\n+\n+instruct vabs2D(vecX dst, vecX src)\n+%{\n+  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (AbsVD src));\n+  ins_cost(INSN_COST * 3);\n+  format %{ \"fabs  $dst, $src\\t# vector (2D)\" %}\n+  ins_encode %{\n+    __ fabs(as_FloatRegister($dst$$reg), __ T2D, as_FloatRegister($src$$reg));\n+  %}\n+  ins_pipe(vunop_fp128);\n+%}\n+\n+\/\/ --------------------------------- FABS DIFF --------------------------------\n+\n+instruct vabd2F(vecD dst, vecD src1, vecD src2)\n+%{\n+  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (AbsVF (SubVF src1 src2)));\n+  ins_cost(INSN_COST * 3);\n+  format %{ \"fabd  $dst, $src1, $src2\\t# vector (2S)\" %}\n+  ins_encode %{\n+    __ fabd(as_FloatRegister($dst$$reg), __ T2S,\n+            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vunop_fp64);\n+%}\n+\n+instruct vabd4F(vecX dst, vecX src1, vecX src2)\n+%{\n+  predicate(n->as_Vector()->length() == 4);\n+  match(Set dst (AbsVF (SubVF src1 src2)));\n+  ins_cost(INSN_COST * 3);\n+  format %{ \"fabd  $dst, $src1, $src2\\t# vector (4S)\" %}\n+  ins_encode %{\n+    __ fabd(as_FloatRegister($dst$$reg), __ T4S,\n+            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vunop_fp128);\n+%}\n+\n+instruct vabd2D(vecX dst, vecX src1, vecX src2)\n+%{\n+  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (AbsVD (SubVD src1 src2)));\n+  ins_cost(INSN_COST * 3);\n+  format %{ \"fabd  $dst, $src1, $src2\\t# vector (2D)\" %}\n+  ins_encode %{\n+    __ fabd(as_FloatRegister($dst$$reg), __ T2D,\n+            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vunop_fp128);\n+%}\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon.ad","additions":163,"deletions":0,"binary":false,"changes":163,"status":"modified"},{"patch":"@@ -1425,0 +1425,64 @@\n+dnl\n+\n+\/\/ --------------------------------- ABS --------------------------------------\n+define(`VABS', `\n+instruct vabs$1$2`'(vec$3 dst, vec$3 src)\n+%{\n+  predicate(n->as_Vector()->length() == $1);\n+  match(Set dst (AbsV$2 src));\n+  ins_cost(INSN_COST);\n+  format %{ \"abs  $dst, $src\\t# vector ($1$4)\" %}\n+  ins_encode %{\n+    __ absr(as_FloatRegister($dst$$reg), __ T$1$4, as_FloatRegister($src$$reg));\n+  %}\n+  ins_pipe(vlogical$5);\n+%}')dnl\n+dnl\n+dnl $1   $2 $3 $4 $5\n+VABS(8,  B, D, B, 64)\n+VABS(16, B, X, B, 128)\n+VABS(4,  S, D, H, 64)\n+VABS(8,  S, X, H, 128)\n+VABS(2,  I, D, S, 64)\n+VABS(4,  I, X, S, 128)\n+VABS(2,  L, X, D, 128)\n+dnl\n+define(`VFABS', `\n+instruct vabs$1$2`'(vec$3 dst, vec$3 src)\n+%{\n+  predicate(n->as_Vector()->length() == $1);\n+  match(Set dst (AbsV$2 src));\n+  ins_cost(INSN_COST * 3);\n+  format %{ \"fabs  $dst, $src\\t# vector ($1$4)\" %}\n+  ins_encode %{\n+    __ fabs(as_FloatRegister($dst$$reg), __ T$1$4, as_FloatRegister($src$$reg));\n+  %}\n+  ins_pipe(vunop_fp$5);\n+%}')dnl\n+dnl\n+dnl   $1 $2 $3 $4 $5\n+VFABS(2, F, D, S, 64)\n+VFABS(4, F, X, S, 128)\n+VFABS(2, D, X, D, 128)\n+dnl\n+\n+\/\/ --------------------------------- FABS DIFF --------------------------------\n+define(`VFABD', `\n+instruct vabd$1$2`'(vec$3 dst, vec$3 src1, vec$3 src2)\n+%{\n+  predicate(n->as_Vector()->length() == $1);\n+  match(Set dst (AbsV$2 (SubV$2 src1 src2)));\n+  ins_cost(INSN_COST * 3);\n+  format %{ \"fabd  $dst, $src1, $src2\\t# vector ($1$4)\" %}\n+  ins_encode %{\n+    __ fabd(as_FloatRegister($dst$$reg), __ T$1$4,\n+            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vunop_fp$5);\n+%}')dnl\n+dnl\n+dnl   $1 $2 $3 $4 $5\n+VFABD(2, F, D, S, 64)\n+VFABD(4, F, X, S, 128)\n+VFABD(2, D, X, D, 128)\n+dnl\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon_ad.m4","additions":64,"deletions":0,"binary":false,"changes":64,"status":"modified"}]}