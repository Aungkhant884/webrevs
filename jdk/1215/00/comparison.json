{"files":[{"patch":"@@ -13976,0 +13976,28 @@\n+instruct absdF_reg(vRegF dst, vRegF src1, vRegF src2) %{\n+  match(Set dst (AbsF (SubF src1 src2)));\n+\n+  ins_cost(INSN_COST * 3);\n+  format %{ \"fabds   $dst, $src1, $src2\" %}\n+  ins_encode %{\n+    __ fabds(as_FloatRegister($dst$$reg),\n+             as_FloatRegister($src1$$reg),\n+             as_FloatRegister($src2$$reg));\n+  %}\n+\n+  ins_pipe(fp_uop_s);\n+%}\n+\n+instruct absdD_reg(vRegD dst, vRegD src1, vRegD src2) %{\n+  match(Set dst (AbsD (SubD src1 src2)));\n+\n+  ins_cost(INSN_COST * 3);\n+  format %{ \"fabdd   $dst, $src1, $src2\" %}\n+  ins_encode %{\n+    __ fabdd(as_FloatRegister($dst$$reg),\n+             as_FloatRegister($src1$$reg),\n+             as_FloatRegister($src2$$reg));\n+  %}\n+\n+  ins_pipe(fp_uop_d);\n+%}\n+\n@@ -18077,0 +18105,41 @@\n+\/\/ --------------------------------- FABS DIFF --------------------------------\n+\n+instruct vabsd2F(vecD dst, vecD src1, vecD src2)\n+%{\n+  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (AbsVF (SubVF src1 src2)));\n+  ins_cost(INSN_COST * 3);\n+  format %{ \"fabd  $dst,$src1,$src2\\t# vector (2S)\" %}\n+  ins_encode %{\n+    __ fabd(as_FloatRegister($dst$$reg), __ T2S,\n+            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vunop_fp64);\n+%}\n+\n+instruct vabsd4F(vecX dst, vecX src1, vecX src2)\n+%{\n+  predicate(n->as_Vector()->length() == 4);\n+  match(Set dst (AbsVF (SubVF src1 src2)));\n+  ins_cost(INSN_COST * 3);\n+  format %{ \"fabd  $dst,$src1,$src2\\t# vector (4S)\" %}\n+  ins_encode %{\n+    __ fabd(as_FloatRegister($dst$$reg), __ T4S,\n+            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vunop_fp128);\n+%}\n+\n+instruct vabsd2D(vecX dst, vecX src1, vecX src2)\n+%{\n+  predicate(n->as_Vector()->length() == 2);\n+  match(Set dst (AbsVD (SubVD src1 src2)));\n+  ins_cost(INSN_COST * 3);\n+  format %{ \"fabd  $dst,$src1,$src2\\t# vector (2D)\" %}\n+  ins_encode %{\n+    __ fabd(as_FloatRegister($dst$$reg), __ T2D,\n+            as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(vunop_fp128);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":69,"deletions":0,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -1952,1 +1952,1 @@\n-    f(type, 23, 22), f(1, 21), f(opcode, 15, 12), f(0b10, 11, 10);\n+    f(type, 23, 22), f(1, 21), f(opcode, 15, 10);\n@@ -1961,7 +1961,8 @@\n-  INSN(fmuls, 0b000, 0b00, 0b0000);\n-  INSN(fdivs, 0b000, 0b00, 0b0001);\n-  INSN(fadds, 0b000, 0b00, 0b0010);\n-  INSN(fsubs, 0b000, 0b00, 0b0011);\n-  INSN(fmaxs, 0b000, 0b00, 0b0100);\n-  INSN(fmins, 0b000, 0b00, 0b0101);\n-  INSN(fnmuls, 0b000, 0b00, 0b1000);\n+  INSN(fabds,  0b011, 0b10, 0b110101);\n+  INSN(fmuls,  0b000, 0b00, 0b000010);\n+  INSN(fdivs,  0b000, 0b00, 0b000110);\n+  INSN(fadds,  0b000, 0b00, 0b001010);\n+  INSN(fsubs,  0b000, 0b00, 0b001110);\n+  INSN(fmaxs,  0b000, 0b00, 0b010010);\n+  INSN(fmins,  0b000, 0b00, 0b010110);\n+  INSN(fnmuls, 0b000, 0b00, 0b100010);\n@@ -1969,7 +1970,8 @@\n-  INSN(fmuld, 0b000, 0b01, 0b0000);\n-  INSN(fdivd, 0b000, 0b01, 0b0001);\n-  INSN(faddd, 0b000, 0b01, 0b0010);\n-  INSN(fsubd, 0b000, 0b01, 0b0011);\n-  INSN(fmaxd, 0b000, 0b01, 0b0100);\n-  INSN(fmind, 0b000, 0b01, 0b0101);\n-  INSN(fnmuld, 0b000, 0b01, 0b1000);\n+  INSN(fabdd,  0b011, 0b11, 0b110101);\n+  INSN(fmuld,  0b000, 0b01, 0b000010);\n+  INSN(fdivd,  0b000, 0b01, 0b000110);\n+  INSN(faddd,  0b000, 0b01, 0b001010);\n+  INSN(fsubd,  0b000, 0b01, 0b001110);\n+  INSN(fmaxd,  0b000, 0b01, 0b010010);\n+  INSN(fmind,  0b000, 0b01, 0b010110);\n+  INSN(fnmuld, 0b000, 0b01, 0b100010);\n@@ -2485,0 +2487,1 @@\n+  INSN(fabd, 1, 1, 0b110101);\n@@ -2692,1 +2695,1 @@\n-  INSN(ssra, 0, 0b000101, \/* isSHAR =*\/ true);\n+  INSN(ssra, 0, 0b000101, \/* isSHR = *\/ true);\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":19,"deletions":16,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Huawei Technologies Co. Ltd. All rights reserved.\n+ * Copyright (c) 2019, Huawei Technologies Co., Ltd. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/Test8217359.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Huawei Technologies Co. Ltd. All rights reserved.\n+ * Copyright (c) 2020, Huawei Technologies Co., Ltd. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestFoldCompares.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Huawei Technologies Co. Ltd. All rights reserved.\n+ * Copyright (c) 2020, Huawei Technologies Co., Ltd. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestReplaceEquivPhis.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Huawei Technologies Co. Ltd. All rights reserved.\n+ * Copyright (c) 2020, Huawei Technologies Co., Ltd. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/aarch64\/TestVectorShiftShorts.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Huawei Technologies Co. Ltd. All rights reserved.\n+ * Copyright (c) 2020, Huawei Technologies Co., Ltd. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/cli\/TestUseSHA3IntrinsicsOptionOnSupportedCPU.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Huawei Technologies Co. Ltd. All rights reserved.\n+ * Copyright (c) 2020, Huawei Technologies Co., Ltd. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/cli\/TestUseSHA3IntrinsicsOptionOnUnsupportedCPU.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Huawei Technologies Co. Ltd. All rights reserved.\n+ * Copyright (c) 2020, Huawei Technologies Co., Ltd. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/sanity\/TestSHA3Intrinsics.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Huawei Technologies Co. Ltd. All rights reserved.\n+ * Copyright (c) 2020, Huawei Technologies Co., Ltd. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/sanity\/TestSHA3MultiBlockIntrinsics.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Huawei Technologies Co. Ltd. All rights reserved.\n+ * Copyright (c) 2020, Huawei Technologies Co., Ltd. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestBeautifyLoops.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Huawei Technologies Co. Ltd. All rights reserved.\n+ * Copyright (c) 2020, Huawei Technologies Co., Ltd. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestBeautifyLoops_2.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Huawei Technologies Co. Ltd. All rights reserved.\n+ * Copyright (c) 2019, Huawei Technologies Co., Ltd. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestRemoveEmptyLoop.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Huawei Technologies Co. Ltd. All rights reserved.\n+ * Copyright (c) 2020, Huawei Technologies Co., Ltd. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestSearchAlignment.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Huawei Technologies Co. Ltd. All rights reserved.\n+ * Copyright (c) 2020, Huawei Technologies Co., Ltd. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/invokedynamic\/DynamicConstantHelper.jasm","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Huawei Technologies Co. Ltd. All rights reserved.\n+ * Copyright (c) 2020, Huawei Technologies Co., Ltd. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/invokedynamic\/TestDynamicConstant.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Huawei Technologies Co. Ltd. All rights reserved.\n+ * Copyright (c) 2020, Huawei Technologies Co., Ltd. All rights reserved.\n","filename":"test\/jdk\/sun\/security\/provider\/MessageDigest\/SHA3.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Huawei Technologies Co. Ltd. All rights reserved.\n+ * Copyright (c) 2020, Huawei Technologies Co., Ltd. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/Base64Encode.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2020, Huawei Technologies Co., Ltd. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.infra.*;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.Random;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+public class FloatingScalarVectorAbsDiff {\n+    @Param({\"1024\"})\n+    public int count;\n+\n+    private float[]  floatsA,  floatsB,  floatsD;\n+    private double[] doublesA, doublesB, doublesD;\n+\n+    @Param(\"316731\")\n+    private int seed;\n+    private Random r = new Random(seed);\n+\n+    @Setup\n+    public void init() {\n+        floatsA  = new float[count];\n+        doublesA = new double[count];\n+\n+        floatsB  = new float[count];\n+        doublesB = new double[count];\n+\n+        floatsD  = new float[count];\n+        doublesD = new double[count];\n+\n+        for (int i = 0; i < count; i++) {\n+            floatsA[i]  = r.nextFloat();\n+            doublesB[i] = r.nextDouble();\n+\n+            floatsB[i]  = r.nextFloat();\n+            doublesB[i] = r.nextDouble();\n+        }\n+    }\n+\n+    @Benchmark\n+    public void testVectorAbsDiffFloat() {\n+        for (int i = 0; i < count; i++) {\n+            floatsD[i] = Math.abs(floatsA[i] - floatsB[i]);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void testVectorAbsDiffDouble() {\n+        for (int i = 0; i < count; i++) {\n+            doublesD[i] = Math.abs(doublesA[i] - doublesB[i]);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void testScalarAbsDiffFloat(Blackhole bh) {\n+        float a = r.nextFloat();\n+        float b = r.nextFloat();\n+\n+        for (int i = 0; i < count; i++) {\n+            a = Math.abs(a - b);\n+            b = Math.abs(b - a);\n+        }\n+\n+        bh.consume(a + b);\n+    }\n+\n+    @Benchmark\n+    public void testScalarAbsDiffDouble(Blackhole bh) {\n+        double a = r.nextDouble();\n+        double b = r.nextDouble();\n+\n+        for (int i = 0; i < count; i++) {\n+            a = Math.abs(a - b);\n+            b = Math.abs(b - a);\n+        }\n+\n+        bh.consume(a + b);\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/FloatingScalarVectorAbsDiff.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Huawei Technologies Co. Ltd. All rights reserved.\n+ * Copyright (c) 2020, Huawei Technologies Co., Ltd. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/VectorShiftAccumulate.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}