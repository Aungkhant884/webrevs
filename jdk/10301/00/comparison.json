{"files":[{"patch":"@@ -2288,0 +2288,4 @@\n+void G1CollectedHeap::heap_region_iterate(HeapRegionIndexClosure* cl) const {\n+  _hrm.iterate(cl);\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1083,0 +1083,1 @@\n+  void heap_region_iterate(HeapRegionIndexClosure* blk) const;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -612,0 +612,19 @@\n+class HeapRegionIndexClosure : public StackObj {\n+  friend class HeapRegionManager;\n+  friend class G1CollectionSet;\n+  friend class G1CollectionSetCandidates;\n+\n+  bool _is_complete;\n+  void set_incomplete() { _is_complete = false; }\n+\n+public:\n+  HeapRegionIndexClosure(): _is_complete(true) {}\n+\n+  \/\/ Typically called on each region until it returns true.\n+  virtual bool do_heap_region_index(uint region_index) = 0;\n+\n+  \/\/ True after iteration if the closure was applied to all heap regions\n+  \/\/ and returned \"false\" in all cases.\n+  bool is_complete() { return _is_complete; }\n+};\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.hpp","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -529,0 +529,15 @@\n+void HeapRegionManager::iterate(HeapRegionIndexClosure* blk) const {\n+  uint len = reserved_length();\n+\n+  for (uint i = 0; i < len; i++) {\n+    if (!is_available(i)) {\n+      continue;\n+    }\n+    bool res = blk->do_heap_region_index(i);\n+    if (res) {\n+      blk->set_incomplete();\n+      return;\n+    }\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegionManager.cpp","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -274,0 +274,1 @@\n+  void iterate(HeapRegionIndexClosure* blk) const;\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegionManager.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}