{"files":[{"patch":"@@ -2845,0 +2845,45 @@\n+\/\/ ------------------------------ Vector and_not -------------------------------\n+\n+instruct vand_not2I(vecD dst, vecD src1, vecD src2, immI_M1 m1)\n+%{\n+  predicate(n->as_Vector()->length_in_bytes() == 8);\n+  match(Set dst (AndV src1 (XorV src2 (ReplicateB m1))));\n+  match(Set dst (AndV src1 (XorV src2 (ReplicateS m1))));\n+  match(Set dst (AndV src1 (XorV src2 (ReplicateI m1))));\n+  ins_cost(INSN_COST);\n+  format %{ \"bic  $dst, T8B, $src1, $src2\\t# vector (8B)\" %}\n+  ins_encode %{\n+    __ bic(as_FloatRegister($dst$$reg), __ T8B,\n+           as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(pipe_class_default);\n+%}\n+\n+instruct vand_not4I(vecX dst, vecX src1, vecX src2, immI_M1 m1)\n+%{\n+  predicate(n->as_Vector()->length_in_bytes() == 16);\n+  match(Set dst (AndV src1 (XorV src2 (ReplicateB m1))));\n+  match(Set dst (AndV src1 (XorV src2 (ReplicateS m1))));\n+  match(Set dst (AndV src1 (XorV src2 (ReplicateI m1))));\n+  ins_cost(INSN_COST);\n+  format %{ \"bic  $dst, T16B, $src1, $src2\\t# vector (16B)\" %}\n+  ins_encode %{\n+    __ bic(as_FloatRegister($dst$$reg), __ T16B,\n+           as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(pipe_class_default);\n+%}\n+\n+instruct vand_not2L(vecX dst, vecX src1, vecX src2, immL_M1 m1)\n+%{\n+  predicate(n->as_Vector()->length_in_bytes() == 16);\n+  match(Set dst (AndV src1 (XorV src2 (ReplicateL m1))));\n+  ins_cost(INSN_COST);\n+  format %{ \"bic  $dst, T16B, $src1, $src2\\t# vector (16B)\" %}\n+  ins_encode %{\n+    __ bic(as_FloatRegister($dst$$reg), __ T16B,\n+           as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(pipe_class_default);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon.ad","additions":45,"deletions":0,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -1039,0 +1039,26 @@\n+\/\/ ------------------------------ Vector and_not -------------------------------\n+dnl\n+define(`MATCH_RULE', `ifelse($1, I,\n+`match(Set dst (AndV src1 (XorV src2 (ReplicateB m1))));\n+  match(Set dst (AndV src1 (XorV src2 (ReplicateS m1))));\n+  match(Set dst (AndV src1 (XorV src2 (ReplicateI m1))));',\n+`match(Set dst (AndV src1 (XorV src2 (ReplicateL m1))));')')dnl\n+dnl\n+define(`VECTOR_AND_NOT', `\n+instruct vand_not$1$2`'(vec$3 dst, vec$3 src1, vec$3 src2, imm$2_M1 m1)\n+%{\n+  predicate(n->as_Vector()->length_in_bytes() == $4);\n+  MATCH_RULE($2)\n+  ins_cost(INSN_COST);\n+  format %{ \"bic  $dst, T$5, $src1, $src2\\t# vector ($5)\" %}\n+  ins_encode %{\n+    __ bic(as_FloatRegister($dst$$reg), __ T$5,\n+           as_FloatRegister($src1$$reg), as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(pipe_class_default);\n+%}')dnl\n+dnl        $1 $2 $3 $4  $5\n+VECTOR_AND_NOT(2, I, D, 8,  8B)\n+VECTOR_AND_NOT(4, I, X, 16, 16B)\n+VECTOR_AND_NOT(2, L, X, 16, 16B)\n+undefine(MATCH_RULE)\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon_ad.m4","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -456,0 +456,60 @@\n+\/\/ vector not\n+\n+instruct vnotI(vReg dst, vReg src, immI_M1 m1) %{\n+  predicate(UseSVE > 0 && n->as_Vector()->length_in_bytes() >= 16);\n+  match(Set dst (XorV src (ReplicateB m1)));\n+  match(Set dst (XorV src (ReplicateS m1)));\n+  match(Set dst (XorV src (ReplicateI m1)));\n+  ins_cost(SVE_COST);\n+  format %{ \"sve_not $dst, $src\\t# vector (sve) B\/H\/S\" %}\n+  ins_encode %{\n+    __ sve_not(as_FloatRegister($dst$$reg), __ D,\n+               ptrue, as_FloatRegister($src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vnotL(vReg dst, vReg src, immL_M1 m1) %{\n+  predicate(UseSVE > 0 && n->as_Vector()->length_in_bytes() >= 16);\n+  match(Set dst (XorV src (ReplicateL m1)));\n+  ins_cost(SVE_COST);\n+  format %{ \"sve_not $dst, $src\\t# vector (sve) D\" %}\n+  ins_encode %{\n+    __ sve_not(as_FloatRegister($dst$$reg), __ D,\n+               ptrue, as_FloatRegister($src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\n+\/\/ vector and_not\n+\n+instruct vand_notI(vReg dst, vReg src1, vReg src2, immI_M1 m1) %{\n+  predicate(UseSVE > 0 && n->as_Vector()->length_in_bytes() >= 16);\n+  match(Set dst (AndV src1 (XorV src2 (ReplicateB m1))));\n+  match(Set dst (AndV src1 (XorV src2 (ReplicateS m1))));\n+  match(Set dst (AndV src1 (XorV src2 (ReplicateI m1))));\n+  ins_cost(SVE_COST);\n+  format %{ \"sve_bic $dst, $src1, $src2\\t# vector (sve) B\/H\/S\" %}\n+  ins_encode %{\n+    __ sve_bic(as_FloatRegister($dst$$reg),\n+               as_FloatRegister($src1$$reg),\n+               as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct vand_notL(vReg dst, vReg src1, vReg src2, immL_M1 m1) %{\n+  predicate(UseSVE > 0 && n->as_Vector()->length_in_bytes() >= 16);\n+  match(Set dst (AndV src1 (XorV src2 (ReplicateL m1))));\n+  ins_cost(SVE_COST);\n+  format %{ \"sve_bic $dst, $src1, $src2\\t# vector (sve) D\" %}\n+  ins_encode %{\n+    __ sve_bic(as_FloatRegister($dst$$reg),\n+               as_FloatRegister($src1$$reg),\n+               as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve.ad","additions":60,"deletions":0,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -319,0 +319,51 @@\n+\n+\/\/ vector not\n+dnl\n+define(`MATCH_RULE', `ifelse($1, I,\n+`match(Set dst (XorV src (ReplicateB m1)));\n+  match(Set dst (XorV src (ReplicateS m1)));\n+  match(Set dst (XorV src (ReplicateI m1)));',\n+`match(Set dst (XorV src (ReplicateL m1)));')')dnl\n+dnl\n+define(`VECTOR_NOT', `\n+instruct vnot$1`'(vReg dst, vReg src, imm$1_M1 m1) %{\n+  predicate(UseSVE > 0 && n->as_Vector()->length_in_bytes() >= 16);\n+  MATCH_RULE($1)\n+  ins_cost(SVE_COST);\n+  format %{ \"sve_not $dst, $src\\t# vector (sve) $2\" %}\n+  ins_encode %{\n+    __ sve_not(as_FloatRegister($dst$$reg), __ D,\n+               ptrue, as_FloatRegister($src$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}')dnl\n+dnl        $1,$2\n+VECTOR_NOT(I, B\/H\/S)\n+VECTOR_NOT(L, D)\n+undefine(MATCH_RULE)\n+\n+\/\/ vector and_not\n+dnl\n+define(`MATCH_RULE', `ifelse($1, I,\n+`match(Set dst (AndV src1 (XorV src2 (ReplicateB m1))));\n+  match(Set dst (AndV src1 (XorV src2 (ReplicateS m1))));\n+  match(Set dst (AndV src1 (XorV src2 (ReplicateI m1))));',\n+`match(Set dst (AndV src1 (XorV src2 (ReplicateL m1))));')')dnl\n+dnl\n+define(`VECTOR_AND_NOT', `\n+instruct vand_not$1`'(vReg dst, vReg src1, vReg src2, imm$1_M1 m1) %{\n+  predicate(UseSVE > 0 && n->as_Vector()->length_in_bytes() >= 16);\n+  MATCH_RULE($1)\n+  ins_cost(SVE_COST);\n+  format %{ \"sve_bic $dst, $src1, $src2\\t# vector (sve) $2\" %}\n+  ins_encode %{\n+    __ sve_bic(as_FloatRegister($dst$$reg),\n+               as_FloatRegister($src1$$reg),\n+               as_FloatRegister($src2$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}')dnl\n+dnl            $1,$2\n+VECTOR_AND_NOT(I, B\/H\/S)\n+VECTOR_AND_NOT(L, D)\n+undefine(MATCH_RULE)\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve_ad.m4","additions":51,"deletions":0,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -3063,0 +3063,1 @@\n+  INSN(sve_bic, 0b11);\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -919,1 +919,1 @@\n-        elif not self._isPredicated and (name == \"and\" or name == \"eor\" or name == \"orr\"):\n+        elif not self._isPredicated and (name in [\"and\", \"eor\", \"orr\", \"bic\"]):\n@@ -1615,0 +1615,1 @@\n+                       [\"bic\", \"ZZZ\"],\n","filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -908,0 +908,1 @@\n+    __ sve_bic(z8, z20, z16);                          \/\/       bic     z8.d, z20.d, z16.d\n@@ -910,9 +911,9 @@\n-    __ sve_andv(v8, __ D, p5, z16);                    \/\/       andv d8, p5, z16.d\n-    __ sve_orv(v15, __ S, p1, z4);                     \/\/       orv s15, p1, z4.s\n-    __ sve_eorv(v8, __ B, p1, z29);                    \/\/       eorv b8, p1, z29.b\n-    __ sve_smaxv(v28, __ D, p4, z29);                  \/\/       smaxv d28, p4, z29.d\n-    __ sve_sminv(v9, __ H, p3, z2);                    \/\/       sminv h9, p3, z2.h\n-    __ sve_fminv(v28, __ S, p0, z7);                   \/\/       fminv s28, p0, z7.s\n-    __ sve_fmaxv(v26, __ S, p5, z17);                  \/\/       fmaxv s26, p5, z17.s\n-    __ sve_fadda(v8, __ D, p4, z21);                   \/\/       fadda d8, p4, d8, z21.d\n-    __ sve_uaddv(v5, __ S, p5, z21);                   \/\/       uaddv d5, p5, z21.s\n+    __ sve_andv(v15, __ S, p1, z4);                    \/\/       andv s15, p1, z4.s\n+    __ sve_orv(v8, __ B, p1, z29);                     \/\/       orv b8, p1, z29.b\n+    __ sve_eorv(v28, __ D, p4, z29);                   \/\/       eorv d28, p4, z29.d\n+    __ sve_smaxv(v9, __ H, p3, z2);                    \/\/       smaxv h9, p3, z2.h\n+    __ sve_sminv(v28, __ B, p0, z7);                   \/\/       sminv b28, p0, z7.b\n+    __ sve_fminv(v26, __ S, p5, z17);                  \/\/       fminv s26, p5, z17.s\n+    __ sve_fmaxv(v8, __ D, p4, z21);                   \/\/       fmaxv d8, p4, z21.d\n+    __ sve_fadda(v5, __ D, p5, z21);                   \/\/       fadda d5, p5, d5, z21.d\n+    __ sve_uaddv(v22, __ S, p4, z29);                  \/\/       uaddv d22, p4, z29.s\n@@ -937,7 +938,7 @@\n-    0x14000000,     0x17ffffd7,     0x140002e0,     0x94000000,\n-    0x97ffffd4,     0x940002dd,     0x3400000a,     0x34fffa2a,\n-    0x34005b4a,     0x35000008,     0x35fff9c8,     0x35005ae8,\n-    0xb400000b,     0xb4fff96b,     0xb4005a8b,     0xb500001d,\n-    0xb5fff91d,     0xb5005a3d,     0x10000013,     0x10fff8b3,\n-    0x100059d3,     0x90000013,     0x36300016,     0x3637f836,\n-    0x36305956,     0x3758000c,     0x375ff7cc,     0x375858ec,\n+    0x14000000,     0x17ffffd7,     0x140002e1,     0x94000000,\n+    0x97ffffd4,     0x940002de,     0x3400000a,     0x34fffa2a,\n+    0x34005b6a,     0x35000008,     0x35fff9c8,     0x35005b08,\n+    0xb400000b,     0xb4fff96b,     0xb4005aab,     0xb500001d,\n+    0xb5fff91d,     0xb5005a5d,     0x10000013,     0x10fff8b3,\n+    0x100059f3,     0x90000013,     0x36300016,     0x3637f836,\n+    0x36305976,     0x3758000c,     0x375ff7cc,     0x3758590c,\n@@ -948,13 +949,13 @@\n-    0x540056c0,     0x54000001,     0x54fff541,     0x54005661,\n-    0x54000002,     0x54fff4e2,     0x54005602,     0x54000002,\n-    0x54fff482,     0x540055a2,     0x54000003,     0x54fff423,\n-    0x54005543,     0x54000003,     0x54fff3c3,     0x540054e3,\n-    0x54000004,     0x54fff364,     0x54005484,     0x54000005,\n-    0x54fff305,     0x54005425,     0x54000006,     0x54fff2a6,\n-    0x540053c6,     0x54000007,     0x54fff247,     0x54005367,\n-    0x54000008,     0x54fff1e8,     0x54005308,     0x54000009,\n-    0x54fff189,     0x540052a9,     0x5400000a,     0x54fff12a,\n-    0x5400524a,     0x5400000b,     0x54fff0cb,     0x540051eb,\n-    0x5400000c,     0x54fff06c,     0x5400518c,     0x5400000d,\n-    0x54fff00d,     0x5400512d,     0x5400000e,     0x54ffefae,\n-    0x540050ce,     0x5400000f,     0x54ffef4f,     0x5400506f,\n+    0x540056e0,     0x54000001,     0x54fff541,     0x54005681,\n+    0x54000002,     0x54fff4e2,     0x54005622,     0x54000002,\n+    0x54fff482,     0x540055c2,     0x54000003,     0x54fff423,\n+    0x54005563,     0x54000003,     0x54fff3c3,     0x54005503,\n+    0x54000004,     0x54fff364,     0x540054a4,     0x54000005,\n+    0x54fff305,     0x54005445,     0x54000006,     0x54fff2a6,\n+    0x540053e6,     0x54000007,     0x54fff247,     0x54005387,\n+    0x54000008,     0x54fff1e8,     0x54005328,     0x54000009,\n+    0x54fff189,     0x540052c9,     0x5400000a,     0x54fff12a,\n+    0x5400526a,     0x5400000b,     0x54fff0cb,     0x5400520b,\n+    0x5400000c,     0x54fff06c,     0x540051ac,     0x5400000d,\n+    0x54fff00d,     0x5400514d,     0x5400000e,     0x54ffefae,\n+    0x540050ee,     0x5400000f,     0x54ffef4f,     0x5400508f,\n@@ -992,1 +993,1 @@\n-    0xbd1b1869,     0x580040bb,     0x1800000b,     0xf8945060,\n+    0xbd1b1869,     0x580040db,     0x1800000b,     0xf8945060,\n@@ -1119,3 +1120,3 @@\n-    0x04613176,     0x04da3608,     0x0498248f,     0x041927a8,\n-    0x04c833bc,     0x044a2c49,     0x658720fc,     0x6586363a,\n-    0x65d832a8,     0x048136a5,\n+    0x04613176,     0x04f03288,     0x049a248f,     0x041827a8,\n+    0x04d933bc,     0x04482c49,     0x040a20fc,     0x6587363a,\n+    0x65c632a8,     0x65d836a5,     0x048133b6,\n","filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h","additions":34,"deletions":33,"binary":false,"changes":67,"status":"modified"}]}