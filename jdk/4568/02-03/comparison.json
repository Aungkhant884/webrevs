{"files":[{"patch":"@@ -231,1 +231,1 @@\n-    \/\/ See RunTimeSharedClassInfo::get_for()\n+    \/\/ See RunTimeClassInfo::get_for()\n@@ -322,1 +322,1 @@\n-  \/\/ size of the symbol table and two dictionaries, plus the RunTimeSharedClassInfo's\n+  \/\/ size of the symbol table and two dictionaries, plus the RunTimeClassInfo's\n@@ -635,2 +635,2 @@\n-    \/\/ we can do a quick lookup from InstanceKlass* -> RunTimeSharedClassInfo*\n-    \/\/ without building another hashtable. See RunTimeSharedClassInfo::get_for()\n+    \/\/ we can do a quick lookup from InstanceKlass* -> RunTimeClassInfo*\n+    \/\/ without building another hashtable. See RunTimeClassInfo::get_for()\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-#include \"cds\/dumpTimeSharedClassInfo.hpp\"\n+#include \"cds\/dumpTimeClassInfo.hpp\"\n@@ -33,1 +33,1 @@\n-void DumpTimeSharedClassInfo::add_verification_constraint(InstanceKlass* k, Symbol* name,\n+void DumpTimeClassInfo::add_verification_constraint(InstanceKlass* k, Symbol* name,\n@@ -78,1 +78,1 @@\n-void DumpTimeSharedClassInfo::record_linking_constraint(Symbol* name, Handle loader1, Handle loader2) {\n+void DumpTimeClassInfo::record_linking_constraint(Symbol* name, Handle loader1, Handle loader2) {\n@@ -113,1 +113,1 @@\n-bool DumpTimeSharedClassInfo::is_builtin() {\n+bool DumpTimeClassInfo::is_builtin() {\n@@ -117,1 +117,1 @@\n-DumpTimeSharedClassInfo* DumpTimeSharedClassTable::find_or_allocate_info_for(InstanceKlass* k, bool dump_in_progress) {\n+DumpTimeClassInfo* DumpTimeSharedClassTable::find_or_allocate_info_for(InstanceKlass* k, bool dump_in_progress) {\n@@ -119,1 +119,1 @@\n-  DumpTimeSharedClassInfo* p;\n+  DumpTimeClassInfo* p;\n@@ -141,1 +141,1 @@\n-  bool do_entry(InstanceKlass* k, DumpTimeSharedClassInfo& info) {\n+  bool do_entry(InstanceKlass* k, DumpTimeClassInfo& info) {\n","filename":"src\/hotspot\/share\/cds\/dumpTimeClassInfo.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"previous_filename":"src\/hotspot\/share\/cds\/dumpTimeSharedClassInfo.cpp","status":"renamed"},{"patch":"@@ -40,1 +40,1 @@\n-class DumpTimeSharedClassInfo: public CHeapObj<mtClass> {\n+class DumpTimeClassInfo: public CHeapObj<mtClass> {\n@@ -81,1 +81,1 @@\n-  DumpTimeSharedClassInfo() {\n+  DumpTimeClassInfo() {\n@@ -172,1 +172,1 @@\n-  DumpTimeSharedClassInfo,\n+  DumpTimeClassInfo,\n@@ -181,1 +181,1 @@\n-  DumpTimeSharedClassInfo* find_or_allocate_info_for(InstanceKlass* k, bool dump_in_progress);\n+  DumpTimeClassInfo* find_or_allocate_info_for(InstanceKlass* k, bool dump_in_progress);\n","filename":"src\/hotspot\/share\/cds\/dumpTimeClassInfo.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"src\/hotspot\/share\/cds\/dumpTimeSharedClassInfo.hpp","status":"renamed"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"classfile\/javaClasses.hpp\"\n","filename":"src\/hotspot\/share\/cds\/lambdaProxyClassDictionary.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-#include \"cds\/runTimeSharedClassInfo.hpp\"\n+#include \"cds\/runTimeClassInfo.hpp\"\n@@ -30,1 +30,1 @@\n-void RunTimeSharedClassInfo::init(DumpTimeSharedClassInfo& info) {\n+void RunTimeClassInfo::init(DumpTimeClassInfo& info) {\n@@ -70,1 +70,1 @@\n-size_t RunTimeSharedClassInfo::crc_size(InstanceKlass* klass) {\n+size_t RunTimeClassInfo::crc_size(InstanceKlass* klass) {\n","filename":"src\/hotspot\/share\/cds\/runTimeClassInfo.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/hotspot\/share\/cds\/runTimeSharedClassInfo.cpp","status":"renamed"},{"patch":"@@ -43,1 +43,1 @@\n-class RunTimeSharedClassInfo {\n+class RunTimeClassInfo {\n@@ -50,1 +50,1 @@\n-  \/\/ This is different than  DumpTimeSharedClassInfo::DTVerifierConstraint. We use\n+  \/\/ This is different than  DumpTimeClassInfo::DTVerifierConstraint. We use\n@@ -80,1 +80,1 @@\n-    return sizeof(RunTimeSharedClassInfo);\n+    return sizeof(RunTimeClassInfo);\n@@ -178,1 +178,1 @@\n-  void init(DumpTimeSharedClassInfo& info);\n+  void init(DumpTimeClassInfo& info);\n@@ -193,1 +193,1 @@\n-  \/\/ lookup of InstanceKlass* -> RunTimeSharedClassInfo* without\n+  \/\/ lookup of InstanceKlass* -> RunTimeClassInfo* without\n@@ -196,1 +196,1 @@\n-  \/\/  info_pointer_addr(klass) --> 0x0100   RunTimeSharedClassInfo*\n+  \/\/  info_pointer_addr(klass) --> 0x0100   RunTimeClassInfo*\n@@ -199,2 +199,2 @@\n-  static RunTimeSharedClassInfo** info_pointer_addr(InstanceKlass* klass) {\n-    return &((RunTimeSharedClassInfo**)klass)[-1];\n+  static RunTimeClassInfo** info_pointer_addr(InstanceKlass* klass) {\n+    return &((RunTimeClassInfo**)klass)[-1];\n@@ -204,1 +204,1 @@\n-  static RunTimeSharedClassInfo* get_for(InstanceKlass* klass) {\n+  static RunTimeClassInfo* get_for(InstanceKlass* klass) {\n@@ -208,1 +208,1 @@\n-  static void set_for(InstanceKlass* klass, RunTimeSharedClassInfo* record) {\n+  static void set_for(InstanceKlass* klass, RunTimeClassInfo* record) {\n@@ -217,1 +217,1 @@\n-       const RunTimeSharedClassInfo* value, Symbol* key, int len_unused) {\n+       const RunTimeClassInfo* value, Symbol* key, int len_unused) {\n@@ -224,2 +224,2 @@\n-  const RunTimeSharedClassInfo*,\n-  RunTimeSharedClassInfo::EQUALS> {};\n+  const RunTimeClassInfo*,\n+  RunTimeClassInfo::EQUALS> {};\n","filename":"src\/hotspot\/share\/cds\/runTimeClassInfo.hpp","additions":13,"deletions":13,"binary":false,"changes":26,"previous_filename":"src\/hotspot\/share\/cds\/runTimeSharedClassInfo.hpp","status":"renamed"},{"patch":"@@ -125,1 +125,1 @@\n-  const RunTimeSharedClassInfo* record = find_record(&_unregistered_dictionary, &_dynamic_unregistered_dictionary, class_name);\n+  const RunTimeClassInfo* record = find_record(&_unregistered_dictionary, &_dynamic_unregistered_dictionary, class_name);\n@@ -185,1 +185,1 @@\n-DumpTimeSharedClassInfo* SystemDictionaryShared::find_or_allocate_info_for(InstanceKlass* k) {\n+DumpTimeClassInfo* SystemDictionaryShared::find_or_allocate_info_for(InstanceKlass* k) {\n@@ -190,1 +190,1 @@\n-DumpTimeSharedClassInfo* SystemDictionaryShared::find_or_allocate_info_for_locked(InstanceKlass* k) {\n+DumpTimeClassInfo* SystemDictionaryShared::find_or_allocate_info_for_locked(InstanceKlass* k) {\n@@ -198,1 +198,1 @@\n-bool SystemDictionaryShared::check_for_exclusion(InstanceKlass* k, DumpTimeSharedClassInfo* info) {\n+bool SystemDictionaryShared::check_for_exclusion(InstanceKlass* k, DumpTimeClassInfo* info) {\n@@ -239,1 +239,1 @@\n-  DumpTimeSharedClassInfo* info = _dumptime_table->get(ik);\n+  DumpTimeClassInfo* info = _dumptime_table->get(ik);\n@@ -244,1 +244,1 @@\n-  DumpTimeSharedClassInfo* info = _dumptime_table->get(ik);\n+  DumpTimeClassInfo* info = _dumptime_table->get(ik);\n@@ -284,1 +284,1 @@\n-    \/\/ be recorded in DumpTimeSharedClassInfo.\n+    \/\/ be recorded in DumpTimeClassInfo.\n@@ -511,1 +511,1 @@\n-  DumpTimeSharedClassInfo* info = find_or_allocate_info_for(k);\n+  DumpTimeClassInfo* info = find_or_allocate_info_for(k);\n@@ -524,1 +524,1 @@\n-  DumpTimeSharedClassInfo* p = _dumptime_table->get(k);\n+  DumpTimeClassInfo* p = _dumptime_table->get(k);\n@@ -530,1 +530,1 @@\n-      DumpTimeSharedClassInfo::DTVerifierConstraint constraint = p->_verifier_constraints->at(i);\n+      DumpTimeClassInfo::DTVerifierConstraint constraint = p->_verifier_constraints->at(i);\n@@ -538,1 +538,1 @@\n-    FREE_C_HEAP_ARRAY(DumpTimeSharedClassInfo::DTVerifierConstraint, p->_verifier_constraints);\n+    FREE_C_HEAP_ARRAY(DumpTimeClassInfo::DTVerifierConstraint, p->_verifier_constraints);\n@@ -545,1 +545,1 @@\n-      DumpTimeSharedClassInfo::DTLoaderConstraint ld =  p->_loader_constraints->at(i);\n+      DumpTimeClassInfo::DTLoaderConstraint ld =  p->_loader_constraints->at(i);\n@@ -550,1 +550,1 @@\n-    FREE_C_HEAP_ARRAY(DumpTimeSharedClassInfo::DTLoaderConstraint, p->_loader_constraints);\n+    FREE_C_HEAP_ARRAY(DumpTimeClassInfo::DTLoaderConstraint, p->_loader_constraints);\n@@ -593,1 +593,1 @@\n-  DumpTimeSharedClassInfo* info = _dumptime_table->get(k);\n+  DumpTimeClassInfo* info = _dumptime_table->get(k);\n@@ -616,1 +616,1 @@\n-  bool do_entry(InstanceKlass* k, DumpTimeSharedClassInfo& info) {\n+  bool do_entry(InstanceKlass* k, DumpTimeClassInfo& info) {\n@@ -654,1 +654,1 @@\n-  bool do_entry(InstanceKlass* k, DumpTimeSharedClassInfo& info) {\n+  bool do_entry(InstanceKlass* k, DumpTimeClassInfo& info) {\n@@ -682,1 +682,1 @@\n-  DumpTimeSharedClassInfo* p = find_or_allocate_info_for_locked(k);\n+  DumpTimeClassInfo* p = find_or_allocate_info_for_locked(k);\n@@ -689,1 +689,1 @@\n-  DumpTimeSharedClassInfo* info = find_or_allocate_info_for_locked(k);\n+  DumpTimeClassInfo* info = find_or_allocate_info_for_locked(k);\n@@ -697,1 +697,1 @@\n-  DumpTimeSharedClassInfo* info = find_or_allocate_info_for(k);\n+  DumpTimeClassInfo* info = find_or_allocate_info_for(k);\n@@ -705,1 +705,1 @@\n-  DumpTimeSharedClassInfo* p = find_or_allocate_info_for(ik);\n+  DumpTimeClassInfo* p = find_or_allocate_info_for(ik);\n@@ -718,1 +718,1 @@\n-  DumpTimeSharedClassInfo* p = _dumptime_table->get(ik);\n+  DumpTimeClassInfo* p = _dumptime_table->get(ik);\n@@ -727,1 +727,1 @@\n-  bool do_entry(InstanceKlass* k, DumpTimeSharedClassInfo& info) {\n+  bool do_entry(InstanceKlass* k, DumpTimeClassInfo& info) {\n@@ -764,1 +764,1 @@\n-  DumpTimeSharedClassInfo* info = find_or_allocate_info_for(k);\n+  DumpTimeClassInfo* info = find_or_allocate_info_for(k);\n@@ -830,1 +830,1 @@\n-  DumpTimeSharedClassInfo* info = _dumptime_table->get(lambda_ik);\n+  DumpTimeClassInfo* info = _dumptime_table->get(lambda_ik);\n@@ -834,1 +834,1 @@\n-    \/\/ Set _is_archived_lambda_proxy in DumpTimeSharedClassInfo so that the lambda_ik\n+    \/\/ Set _is_archived_lambda_proxy in DumpTimeClassInfo so that the lambda_ik\n@@ -895,1 +895,1 @@\n-  RunTimeSharedClassInfo* record = RunTimeSharedClassInfo::get_for(lambda_ik);\n+  RunTimeClassInfo* record = RunTimeClassInfo::get_for(lambda_ik);\n@@ -948,1 +948,1 @@\n-  RunTimeSharedClassInfo* record = RunTimeSharedClassInfo::get_for(klass);\n+  RunTimeClassInfo* record = RunTimeClassInfo::get_for(klass);\n@@ -953,1 +953,1 @@\n-      RunTimeSharedClassInfo::RTVerifierConstraint* vc = record->verifier_constraint_at(i);\n+      RunTimeClassInfo::RTVerifierConstraint* vc = record->verifier_constraint_at(i);\n@@ -1057,1 +1057,1 @@\n-  DumpTimeSharedClassInfo* info = find_or_allocate_info_for(klass);\n+  DumpTimeClassInfo* info = find_or_allocate_info_for(klass);\n@@ -1073,1 +1073,1 @@\n-    RunTimeSharedClassInfo* info = RunTimeSharedClassInfo::get_for(klass);\n+    RunTimeClassInfo* info = RunTimeClassInfo::get_for(klass);\n@@ -1078,1 +1078,1 @@\n-        RunTimeSharedClassInfo::RTLoaderConstraint* lc = info->loader_constraint_at(i);\n+        RunTimeClassInfo::RTLoaderConstraint* lc = info->loader_constraint_at(i);\n@@ -1169,1 +1169,1 @@\n-  bool do_entry(InstanceKlass* k, DumpTimeSharedClassInfo& info) {\n+  bool do_entry(InstanceKlass* k, DumpTimeClassInfo& info) {\n@@ -1171,1 +1171,1 @@\n-      size_t byte_size = RunTimeSharedClassInfo::byte_size(info._klass, info.num_verifier_constraints(), info.num_loader_constraints());\n+      size_t byte_size = RunTimeClassInfo::byte_size(info._klass, info.num_verifier_constraints(), info.num_loader_constraints());\n@@ -1278,1 +1278,1 @@\n-  bool do_entry(InstanceKlass* k, DumpTimeSharedClassInfo& info) {\n+  bool do_entry(InstanceKlass* k, DumpTimeClassInfo& info) {\n@@ -1280,3 +1280,3 @@\n-      size_t byte_size = RunTimeSharedClassInfo::byte_size(info._klass, info.num_verifier_constraints(), info.num_loader_constraints());\n-      RunTimeSharedClassInfo* record;\n-      record = (RunTimeSharedClassInfo*)ArchiveBuilder::ro_region_alloc(byte_size);\n+      size_t byte_size = RunTimeClassInfo::byte_size(info._klass, info.num_verifier_constraints(), info.num_loader_constraints());\n+      RunTimeClassInfo* record;\n+      record = (RunTimeClassInfo*)ArchiveBuilder::ro_region_alloc(byte_size);\n@@ -1299,2 +1299,2 @@\n-      \/\/ Save this for quick runtime lookup of InstanceKlass* -> RunTimeSharedClassInfo*\n-      RunTimeSharedClassInfo::set_for(info._klass, record);\n+      \/\/ Save this for quick runtime lookup of InstanceKlass* -> RunTimeClassInfo*\n+      RunTimeClassInfo::set_for(info._klass, record);\n@@ -1372,1 +1372,1 @@\n-const RunTimeSharedClassInfo*\n+const RunTimeClassInfo*\n@@ -1380,1 +1380,1 @@\n-  const RunTimeSharedClassInfo* record = NULL;\n+  const RunTimeClassInfo* record = NULL;\n@@ -1408,1 +1408,1 @@\n-  const RunTimeSharedClassInfo* record = find_record(&_builtin_dictionary, &_dynamic_builtin_dictionary, name);\n+  const RunTimeClassInfo* record = find_record(&_builtin_dictionary, &_dynamic_builtin_dictionary, name);\n@@ -1420,1 +1420,1 @@\n-  DumpTimeSharedClassInfo* info = find_or_allocate_info_for(k);\n+  DumpTimeClassInfo* info = find_or_allocate_info_for(k);\n@@ -1448,1 +1448,1 @@\n-  void do_value(const RunTimeSharedClassInfo* record) {\n+  void do_value(const RunTimeClassInfo* record) {\n@@ -1561,1 +1561,1 @@\n-  void do_value(const RunTimeSharedClassInfo* info) {\n+  void do_value(const RunTimeClassInfo* info) {\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":45,"deletions":45,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"cds\/dumpTimeSharedClassInfo.hpp\"\n+#include \"cds\/dumpTimeClassInfo.hpp\"\n@@ -31,1 +31,1 @@\n-#include \"cds\/runTimeSharedClassInfo.hpp\"\n+#include \"cds\/runTimeClassInfo.hpp\"\n@@ -112,1 +112,1 @@\n-class DumpTimeSharedClassInfo;\n+class DumpTimeClassInfo;\n@@ -115,1 +115,1 @@\n-class RunTimeSharedClassInfo;\n+class RunTimeClassInfo;\n@@ -169,2 +169,2 @@\n-  static DumpTimeSharedClassInfo* find_or_allocate_info_for(InstanceKlass* k);\n-  static DumpTimeSharedClassInfo* find_or_allocate_info_for_locked(InstanceKlass* k);\n+  static DumpTimeClassInfo* find_or_allocate_info_for(InstanceKlass* k);\n+  static DumpTimeClassInfo* find_or_allocate_info_for_locked(InstanceKlass* k);\n@@ -193,1 +193,1 @@\n-  static const RunTimeSharedClassInfo* find_record(RunTimeSharedDictionary* static_dict,\n+  static const RunTimeClassInfo* find_record(RunTimeSharedDictionary* static_dict,\n@@ -271,1 +271,1 @@\n-  static bool check_for_exclusion(InstanceKlass* k, DumpTimeSharedClassInfo* info);\n+  static bool check_for_exclusion(InstanceKlass* k, DumpTimeClassInfo* info);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"}]}