{"files":[{"patch":"@@ -587,1 +587,1 @@\n-    \/* package-private *\/ abstract ZoneOffset getOffset(long epochSecond);\n+    \/* package-private *\/ abstract ZoneOffset getOffset(long epochSecond, int nanoOfSecond);\n","filename":"src\/java.base\/share\/classes\/java\/time\/ZoneId.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -511,1 +511,1 @@\n-    \/* package-private *\/ ZoneOffset getOffset(long epochSecond) {\n+    \/* package-private *\/ ZoneOffset getOffset(long epochSecond, int nanoOfSecond) {\n","filename":"src\/java.base\/share\/classes\/java\/time\/ZoneOffset.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -182,2 +182,2 @@\n-    \/* package-private *\/ ZoneOffset getOffset(long epochSecond) {\n-        return getRules().getOffset(Instant.ofEpochSecond(epochSecond));\n+    \/* package-private *\/ ZoneOffset getOffset(long epochSecond, int nanoOfSecond) {\n+        return getRules().getOffset(Instant.ofEpochSecond(epochSecond, nanoOfSecond));\n","filename":"src\/java.base\/share\/classes\/java\/time\/ZoneRegion.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -455,1 +455,1 @@\n-        ZoneOffset offset = zone.getOffset(epochSecond);\n+        ZoneOffset offset = zone.getOffset(epochSecond, nanoOfSecond);\n","filename":"src\/java.base\/share\/classes\/java\/time\/ZonedDateTime.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,2 +53,2 @@\n- * Tests the JITs ability to remove allocations from expressions\n- * like {@code Instant.ofEpochMilli(value).atZone(ZoneOffset.UTC).getYear()}\n+ * Examine ability to perform escape analysis on expressions\n+ * such as {@code Instant.ofEpochMilli(value).atZone(ZoneOffset.UTC).getYear()}\n@@ -64,1 +64,1 @@\n-    private static final TimeZone UTC = TimeZone.getTimeZone(\"UTC\");\n+    private TimeZone UTC = TimeZone.getTimeZone(\"UTC\");\n@@ -66,1 +66,1 @@\n-    private static final TimeZone LONDON = TimeZone.getTimeZone(\"Europe\/London\");\n+    private TimeZone LONDON = TimeZone.getTimeZone(\"Europe\/London\");\n@@ -68,1 +68,1 @@\n-    private static final long[] INSTANT_MILLIS = createInstants();\n+    private long[] INSTANT_MILLIS;\n@@ -70,1 +70,1 @@\n-    private static final int[] YEARS = new int[INSTANT_MILLIS.length];\n+    private int[] YEARS;\n@@ -72,1 +72,2 @@\n-    private static long[] createInstants() {\n+    @Setup\n+    public void createInstants() {\n@@ -78,1 +79,1 @@\n-        return IntStream\n+        INSTANT_MILLIS = IntStream\n@@ -86,0 +87,1 @@\n+        YEARS = new int[INSTANT_MILLIS.length];\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/time\/GetYearBench.java","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"}]}