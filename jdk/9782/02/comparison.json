{"files":[{"patch":"@@ -29,0 +29,1 @@\n+#include \"opto\/compile.hpp\"\n@@ -1657,0 +1658,11 @@\n+\n+bool C2_MacroAssembler::in_scratch_emit_size() {\n+  if (ciEnv::current()->task() != NULL) {\n+    PhaseOutput* phase_output = Compile::current()->output();\n+    if (phase_output != NULL && phase_output->in_scratch_emit_size()) {\n+      return true;\n+    }\n+  }\n+  return MacroAssembler::in_scratch_emit_size();\n+}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -30,0 +30,4 @@\n+ private:\n+  \/\/ Return true if the phase output is in the scratch emit size mode.\n+  virtual bool in_scratch_emit_size() override;\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -854,2 +854,1 @@\n-address MacroAssembler::trampoline_call(Address entry, CodeBuffer* cbuf,\n-                                        bool check_emit_size) {\n+address MacroAssembler::trampoline_call(Address entry, CodeBuffer* cbuf) {\n@@ -861,0 +860,3 @@\n+  address target = entry.target();\n+\n+  \/\/ We might need a trampoline if branches are far.\n@@ -862,1 +864,1 @@\n-  if (!need_trampoline && entry.rspec().type() == relocInfo::runtime_call_type && !CodeCache::contains(entry.target())) {\n+  if (!need_trampoline && entry.rspec().type() == relocInfo::runtime_call_type && !CodeCache::contains(target)) {\n@@ -865,1 +867,0 @@\n-    address target = entry.target();\n@@ -876,1 +877,0 @@\n-  \/\/ We need a trampoline if branches are far.\n@@ -878,3 +878,1 @@\n-    bool in_scratch_emit_size = false;\n-#ifdef COMPILER2\n-    if (check_emit_size) {\n+    if (!in_scratch_emit_size()) {\n@@ -883,8 +881,1 @@\n-      CompileTask* task = ciEnv::current()->task();\n-      in_scratch_emit_size =\n-        (task != NULL && is_c2_compile(task->comp_level()) &&\n-         Compile::current()->output()->in_scratch_emit_size());\n-    }\n-#endif\n-    if (!in_scratch_emit_size) {\n-      address stub = emit_trampoline_stub(offset(), entry.target());\n+      address stub = emit_trampoline_stub(offset(), target);\n@@ -896,0 +887,1 @@\n+    target = pc();\n@@ -900,5 +892,2 @@\n-  if (!need_trampoline) {\n-    bl(entry.target());\n-  } else {\n-    bl(pc());\n-  }\n+  bl(target);\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":10,"deletions":21,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -636,0 +636,4 @@\n+  \/\/ Return whether code is emitted to a scratch blob.\n+  virtual bool in_scratch_emit_size() {\n+    return false;\n+  }\n@@ -1178,1 +1182,1 @@\n-  address trampoline_call(Address entry, CodeBuffer* cbuf = NULL, bool check_emit_size = true);\n+  address trampoline_call(Address entry, CodeBuffer* cbuf = NULL);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1056,1 +1056,1 @@\n-    __ trampoline_call(resolve, \/*cbuf=*\/ NULL, \/*check_emit_size=*\/ false);\n+    __ trampoline_call(resolve);\n@@ -1082,1 +1082,1 @@\n-  __ trampoline_call(resolve, \/*cbuf=*\/ NULL, \/*check_emit_size=*\/ false);\n+  __ trampoline_call(resolve);\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}