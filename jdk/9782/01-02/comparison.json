{"files":[{"patch":"@@ -1659,1 +1659,1 @@\n-bool C2_MacroAssembler::emit_trampoline_stub(int insts_call_instruction_offset, address target) {\n+bool C2_MacroAssembler::in_scratch_emit_size() {\n@@ -1663,2 +1663,0 @@\n-      \/\/ We don't want to emit a trampoline if C2 is generating dummy\n-      \/\/ code during its branch shortening phase.\n@@ -1668,1 +1666,1 @@\n-  return MacroAssembler::emit_trampoline_stub(insts_call_instruction_offset, target);\n+  return MacroAssembler::in_scratch_emit_size();\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -31,6 +31,2 @@\n-  \/\/ If the phase output is in the scratch emit size mode,\n-  \/\/ no trampoline is emitted and true returned.\n-  \/\/\n-  \/\/ Note: To unconditionally emit a trampoline stub,\n-  \/\/ MacroAssembler::emit_trampoline_stub must be used.\n-  virtual bool emit_trampoline_stub(int insts_call_instruction_offset, address target) override;\n+  \/\/ Return true if the phase output is in the scratch emit size mode.\n+  virtual bool in_scratch_emit_size() override;\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -878,3 +878,8 @@\n-    if (!emit_trampoline_stub(offset(), target)) {\n-      postcond(pc() == badAddress);\n-      return NULL; \/\/ CodeCache is full\n+    if (!in_scratch_emit_size()) {\n+      \/\/ We don't want to emit a trampoline if C2 is generating dummy\n+      \/\/ code during its branch shortening phase.\n+      address stub = emit_trampoline_stub(offset(), target);\n+      if (stub == NULL) {\n+        postcond(pc() == badAddress);\n+        return NULL; \/\/ CodeCache is full\n+      }\n@@ -905,2 +910,2 @@\n-bool MacroAssembler::emit_trampoline_stub(int insts_call_instruction_offset,\n-                                          address dest) {\n+address MacroAssembler::emit_trampoline_stub(int insts_call_instruction_offset,\n+                                             address dest) {\n@@ -911,1 +916,1 @@\n-    return false;  \/\/ CodeBuffer::expand failed\n+    return NULL;  \/\/ CodeBuffer::expand failed\n@@ -938,1 +943,1 @@\n-  return true;\n+  return stub_start_addr;\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -636,2 +636,5 @@\n-  \/\/ Return false if it fails to emit a stub.\n-  virtual bool emit_trampoline_stub(int insts_call_instruction_offset, address target);\n+  \/\/ Return whether code is emitted to a scratch blob.\n+  virtual bool in_scratch_emit_size() {\n+    return false;\n+  }\n+  address emit_trampoline_stub(int insts_call_instruction_offset, address target);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -529,1 +529,1 @@\n-void NativeCall::trampoline_jump(CodeBuffer &cbuf, address dest) {\n+address NativeCall::trampoline_jump(CodeBuffer &cbuf, address dest) {\n@@ -531,1 +531,1 @@\n-  bool no_stub = true;\n+  address stub = NULL;\n@@ -535,3 +535,1 @@\n-    bool result = a.emit_trampoline_stub(instruction_address() - cbuf.insts()->start(), dest);\n-    assert(result, \"failed to generate a trampoline stub\");\n-    no_stub = !result;\n+    stub = a.emit_trampoline_stub(instruction_address() - cbuf.insts()->start(), dest);\n@@ -540,1 +538,1 @@\n-  if (no_stub) {\n+  if (stub == NULL) {\n@@ -546,0 +544,2 @@\n+\n+  return stub;\n","filename":"src\/hotspot\/cpu\/aarch64\/nativeInst_aarch64.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -254,1 +254,1 @@\n-  void trampoline_jump(CodeBuffer &cbuf, address dest);\n+  address trampoline_jump(CodeBuffer &cbuf, address dest);\n","filename":"src\/hotspot\/cpu\/aarch64\/nativeInst_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}