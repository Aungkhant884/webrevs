{"files":[{"patch":"@@ -12789,3 +12789,1 @@\n-\n-\/\/ rol expander\n-instruct rolL_rReg(iRegLNoSp dst, iRegL src, iRegI shift, rFlagsReg cr)\n+instruct rorI_imm(iRegINoSp dst, iRegI src, immI shift)\n@@ -12793,14 +12791,1 @@\n-  effect(DEF dst, USE src, USE shift);\n-\n-  format %{ \"rol    $dst, $src, $shift\" %}\n-  ins_cost(INSN_COST * 3);\n-  ins_encode %{\n-    __ subw(rscratch1, zr, as_Register($shift$$reg));\n-    __ rorv(as_Register($dst$$reg), as_Register($src$$reg),\n-            rscratch1);\n-    %}\n-  ins_pipe(ialu_reg_reg_vshift);\n-%}\n-\n-\/\/ This pattern is automatically generated from aarch64_ad.m4\n-\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+  match(Set dst (RotateRight src shift));\n@@ -12808,4 +12793,2 @@\n-\/\/ rol expander\n-instruct rolI_rReg(iRegINoSp dst, iRegI src, iRegI shift, rFlagsReg cr)\n-%{\n-  effect(DEF dst, USE src, USE shift);\n+  ins_cost(INSN_COST);\n+  format %{ \"ror    $dst, $src, $shift\" %}\n@@ -12813,2 +12796,0 @@\n-  format %{ \"rol    $dst, $src, $shift\" %}\n-  ins_cost(INSN_COST * 3);\n@@ -12816,26 +12797,2 @@\n-    __ subw(rscratch1, zr, as_Register($shift$$reg));\n-    __ rorvw(as_Register($dst$$reg), as_Register($src$$reg),\n-            rscratch1);\n-    %}\n-  ins_pipe(ialu_reg_reg_vshift);\n-%}\n-\n-\/\/ This pattern is automatically generated from aarch64_ad.m4\n-\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n-instruct rolL_rReg_Var_C_64(iRegLNoSp dst, iRegL src, iRegI shift, immI_64 c_64, rFlagsReg cr)\n-%{\n-  match(Set dst (OrL (LShiftL src shift) (URShiftL src (SubI c_64 shift))));\n-\n-  expand %{\n-    rolL_rReg(dst, src, shift, cr);\n-  %}\n-%}\n-\n-\/\/ This pattern is automatically generated from aarch64_ad.m4\n-\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n-instruct rolL_rReg_Var_C0(iRegLNoSp dst, iRegL src, iRegI shift, immI0 c0, rFlagsReg cr)\n-%{\n-  match(Set dst (OrL (LShiftL src shift) (URShiftL src (SubI c0 shift))));\n-\n-  expand %{\n-    rolL_rReg(dst, src, shift, cr);\n+     __ extrw(as_Register($dst$$reg), as_Register($src$$reg), as_Register($src$$reg),\n+               $shift$$constant & 0x1f);\n@@ -12843,0 +12800,1 @@\n+  ins_pipe(ialu_reg_reg_vshift);\n@@ -12847,1 +12805,1 @@\n-instruct rolI_rReg_Var_C_32(iRegINoSp dst, iRegI src, iRegI shift, immI_32 c_32, rFlagsReg cr)\n+instruct rorL_imm(iRegLNoSp dst, iRegL src, immI shift)\n@@ -12849,6 +12807,1 @@\n-  match(Set dst (OrI (LShiftI src shift) (URShiftI src (SubI c_32 shift))));\n-\n-  expand %{\n-    rolI_rReg(dst, src, shift, cr);\n-  %}\n-%}\n+  match(Set dst (RotateRight src shift));\n@@ -12856,5 +12809,2 @@\n-\/\/ This pattern is automatically generated from aarch64_ad.m4\n-\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n-instruct rolI_rReg_Var_C0(iRegINoSp dst, iRegI src, iRegI shift, immI0 c0, rFlagsReg cr)\n-%{\n-  match(Set dst (OrI (LShiftI src shift) (URShiftI src (SubI c0 shift))));\n+  ins_cost(INSN_COST);\n+  format %{ \"ror    $dst, $src, $shift\" %}\n@@ -12862,2 +12812,3 @@\n-  expand %{\n-    rolI_rReg(dst, src, shift, cr);\n+  ins_encode %{\n+     __ extr(as_Register($dst$$reg), as_Register($src$$reg), as_Register($src$$reg),\n+               $shift$$constant & 0x3f);\n@@ -12865,0 +12816,1 @@\n+  ins_pipe(ialu_reg_reg_vshift);\n@@ -12869,3 +12821,1 @@\n-\n-\/\/ ror expander\n-instruct rorL_rReg(iRegLNoSp dst, iRegL src, iRegI shift, rFlagsReg cr)\n+instruct rorI_reg(iRegINoSp dst, iRegI src, iRegI shift)\n@@ -12873,1 +12823,1 @@\n-  effect(DEF dst, USE src, USE shift);\n+  match(Set dst (RotateRight src shift));\n@@ -12875,1 +12825,0 @@\n-  format %{ \"ror    $dst, $src, $shift\" %}\n@@ -12877,0 +12826,2 @@\n+  format %{ \"ror    $dst, $src, $shift\" %}\n+\n@@ -12878,3 +12829,2 @@\n-    __ rorv(as_Register($dst$$reg), as_Register($src$$reg),\n-            as_Register($shift$$reg));\n-    %}\n+     __ rorvw(as_Register($dst$$reg), as_Register($src$$reg), as_Register($shift$$reg));\n+  %}\n@@ -12886,3 +12836,1 @@\n-\n-\/\/ ror expander\n-instruct rorI_rReg(iRegINoSp dst, iRegI src, iRegI shift, rFlagsReg cr)\n+instruct rorL_reg(iRegLNoSp dst, iRegL src, iRegI shift)\n@@ -12890,1 +12838,1 @@\n-  effect(DEF dst, USE src, USE shift);\n+  match(Set dst (RotateRight src shift));\n@@ -12892,1 +12840,0 @@\n-  format %{ \"ror    $dst, $src, $shift\" %}\n@@ -12894,0 +12841,2 @@\n+  format %{ \"ror    $dst, $src, $shift\" %}\n+\n@@ -12895,3 +12844,2 @@\n-    __ rorvw(as_Register($dst$$reg), as_Register($src$$reg),\n-            as_Register($shift$$reg));\n-    %}\n+     __ rorv(as_Register($dst$$reg), as_Register($src$$reg), as_Register($shift$$reg));\n+  %}\n@@ -12903,1 +12851,1 @@\n-instruct rorL_rReg_Var_C_64(iRegLNoSp dst, iRegL src, iRegI shift, immI_64 c_64, rFlagsReg cr)\n+instruct rolI_reg(iRegINoSp dst, iRegI src, iRegI shift)\n@@ -12905,6 +12853,1 @@\n-  match(Set dst (OrL (URShiftL src shift) (LShiftL src (SubI c_64 shift))));\n-\n-  expand %{\n-    rorL_rReg(dst, src, shift, cr);\n-  %}\n-%}\n+  match(Set dst (RotateLeft src shift));\n@@ -12912,5 +12855,2 @@\n-\/\/ This pattern is automatically generated from aarch64_ad.m4\n-\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n-instruct rorL_rReg_Var_C0(iRegLNoSp dst, iRegL src, iRegI shift, immI0 c0, rFlagsReg cr)\n-%{\n-  match(Set dst (OrL (URShiftL src shift) (LShiftL src (SubI c0 shift))));\n+  ins_cost(INSN_COST);\n+  format %{ \"rol    $dst, $src, $shift\" %}\n@@ -12918,2 +12858,3 @@\n-  expand %{\n-    rorL_rReg(dst, src, shift, cr);\n+  ins_encode %{\n+     __ subw(rscratch1, zr, as_Register($shift$$reg));\n+     __ rorvw(as_Register($dst$$reg), as_Register($src$$reg), rscratch1);\n@@ -12921,0 +12862,1 @@\n+  ins_pipe(ialu_reg_reg_vshift);\n@@ -12925,1 +12867,1 @@\n-instruct rorI_rReg_Var_C_32(iRegINoSp dst, iRegI src, iRegI shift, immI_32 c_32, rFlagsReg cr)\n+instruct rolL_reg(iRegLNoSp dst, iRegL src, iRegI shift)\n@@ -12927,1 +12869,1 @@\n-  match(Set dst (OrI (URShiftI src shift) (LShiftI src (SubI c_32 shift))));\n+  match(Set dst (RotateLeft src shift));\n@@ -12929,10 +12871,2 @@\n-  expand %{\n-    rorI_rReg(dst, src, shift, cr);\n-  %}\n-%}\n-\n-\/\/ This pattern is automatically generated from aarch64_ad.m4\n-\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n-instruct rorI_rReg_Var_C0(iRegINoSp dst, iRegI src, iRegI shift, immI0 c0, rFlagsReg cr)\n-%{\n-  match(Set dst (OrI (URShiftI src shift) (LShiftI src (SubI c0 shift))));\n+  ins_cost(INSN_COST);\n+  format %{ \"rol    $dst, $src, $shift\" %}\n@@ -12940,2 +12874,3 @@\n-  expand %{\n-    rorI_rReg(dst, src, shift, cr);\n+  ins_encode %{\n+     __ subw(rscratch1, zr, as_Register($shift$$reg));\n+     __ rorv(as_Register($dst$$reg), as_Register($src$$reg), rscratch1);\n@@ -12943,0 +12878,1 @@\n+  ins_pipe(ialu_reg_reg_vshift);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":43,"deletions":107,"binary":false,"changes":150,"status":"modified"},{"patch":"@@ -332,1 +332,1 @@\n-define(`ROL_EXPAND', `\/\/ This pattern is automatically generated from aarch64_ad.m4\n+define(ROTATE_INSN, `\/\/ This pattern is automatically generated from aarch64_ad.m4\n@@ -334,21 +334,1 @@\n-\n-\/\/ $2 expander\n-instruct $2$1_rReg(iReg$1NoSp dst, iReg$1 src, iRegI shift, rFlagsReg cr)\n-%{\n-  effect(DEF dst, USE src, USE shift);\n-\n-  format %{ \"$2    $dst, $src, $shift\" %}\n-  ins_cost(INSN_COST * 3);\n-  ins_encode %{\n-    __ subw(rscratch1, zr, as_Register($shift$$reg));\n-    __ $3(as_Register($dst$$reg), as_Register($src$$reg),\n-            rscratch1);\n-    %}\n-  ins_pipe(ialu_reg_reg_vshift);\n-%}\n-')\n-define(`ROR_EXPAND', `\/\/ This pattern is automatically generated from aarch64_ad.m4\n-\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n-\n-\/\/ $2 expander\n-instruct $2$1_rReg(iReg$1NoSp dst, iReg$1 src, iRegI shift, rFlagsReg cr)\n+instruct $2$1_$3(iReg$1NoSp dst, iReg$1 src, ifelse($3, reg, iReg, imm)I shift)\n@@ -356,1 +336,1 @@\n-  effect(DEF dst, USE src, USE shift);\n+  match(Set dst (ifelse($2, ror, RotateRight, RotateLeft) src shift));\n@@ -358,1 +338,0 @@\n-  format %{ \"$2    $dst, $src, $shift\" %}\n@@ -360,26 +339,8 @@\n-  ins_encode %{\n-    __ $3(as_Register($dst$$reg), as_Register($src$$reg),\n-            as_Register($shift$$reg));\n-    %}\n-  ins_pipe(ialu_reg_reg_vshift);\n-%}\n-')dnl\n-define(ROL_INSN, `\/\/ This pattern is automatically generated from aarch64_ad.m4\n-\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n-instruct $3$1_rReg_Var_C$2(iReg$1NoSp dst, iReg$1 src, iRegI shift, immI$2 c$2, rFlagsReg cr)\n-%{\n-  match(Set dst (Or$1 (LShift$1 src shift) (URShift$1 src (SubI c$2 shift))));\n-\n-  expand %{\n-    $3$1_rReg(dst, src, shift, cr);\n-  %}\n-%}\n-')dnl\n-define(ROR_INSN, `\/\/ This pattern is automatically generated from aarch64_ad.m4\n-\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n-instruct $3$1_rReg_Var_C$2(iReg$1NoSp dst, iReg$1 src, iRegI shift, immI$2 c$2, rFlagsReg cr)\n-%{\n-  match(Set dst (Or$1 (URShift$1 src shift) (LShift$1 src (SubI c$2 shift))));\n-\n-  expand %{\n-    $3$1_rReg(dst, src, shift, cr);\n+  format %{ \"ifelse($2, ror, ror, rol)    $dst, $src, $shift\" %}\n+\n+  ifelse($2, rol, ins_encode %{\n+     __ subw(rscratch1, zr, as_Register($shift$$reg));, ins_encode %{)\n+     __ ifelse($3, imm,\n+        ifelse($1, I, extrw, extr)(as_Register($dst$$reg), as_Register($src$$reg), as_Register($src$$reg),\n+               $shift$$constant & ifelse($1, I, 0x1f, 0x3f)),\n+        ifelse($1, I, rorvw, rorv)(as_Register($dst$$reg), as_Register($src$$reg), ifelse($2, rol, rscratch1, as_Register($shift$$reg))));\n@@ -387,0 +348,1 @@\n+  ins_pipe(ialu_reg_reg_vshift);\n@@ -389,12 +351,7 @@\n-ROL_EXPAND(L, rol, rorv)\n-ROL_EXPAND(I, rol, rorvw)\n-ROL_INSN(L, _64, rol)\n-ROL_INSN(L, 0, rol)\n-ROL_INSN(I, _32, rol)\n-ROL_INSN(I, 0, rol)\n-ROR_EXPAND(L, ror, rorv)\n-ROR_EXPAND(I, ror, rorvw)\n-ROR_INSN(L, _64, ror)\n-ROR_INSN(L, 0, ror)\n-ROR_INSN(I, _32, ror)\n-ROR_INSN(I, 0, ror)\n+ROTATE_INSN(I, ror, imm)\n+ROTATE_INSN(L, ror, imm)\n+ROTATE_INSN(I, ror, reg)\n+ROTATE_INSN(L, ror, reg)\n+ROTATE_INSN(I, rol, reg)\n+ROTATE_INSN(L, rol, reg)\n+dnl rol_imm has been transformed to ror_imm during GVN.\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_ad.m4","additions":19,"deletions":62,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -1492,0 +1492,16 @@\n+Node* RotateLeftNode::Ideal(PhaseGVN *phase, bool can_reshape) {\n+  const Type *t1 = phase->type(in(1));\n+  const Type *t2 = phase->type(in(2));\n+  if (t2->isa_int() && t2->is_int()->is_con()) {\n+    if (t1->isa_int()) {\n+      int lshift = t2->is_int()->get_con() & 31;\n+      return new RotateRightNode(in(1), phase->intcon(32 - (lshift & 31)), TypeInt::INT);\n+    } else {\n+      assert(t1->isa_long(), \"Type must be a long\");\n+      int lshift = t2->is_int()->get_con() & 63;\n+      return new RotateRightNode(in(1), phase->intcon(64 - (lshift & 63)), TypeLong::LONG);\n+    }\n+  }\n+  return NULL;\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/mulnode.cpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -224,0 +224,1 @@\n+  virtual Node* Ideal(PhaseGVN* phase, bool can_reshape);\n","filename":"src\/hotspot\/share\/opto\/mulnode.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}