{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,2 @@\n+import java.security.cert.CertPathValidatorException;\n+import java.security.cert.CertPathValidatorException.BasicReason;\n@@ -38,0 +40,2 @@\n+import java.security.cert.CertificateParsingException;\n+import java.security.cert.TrustAnchor;\n@@ -63,0 +67,1 @@\n+import sun.security.provider.certpath.CertPathConstraintsParameters;\n@@ -86,0 +91,1 @@\n+import sun.security.validator.Validator;\n@@ -181,0 +187,2 @@\n+    Set<X509Certificate> trustedCerts = new HashSet<>();\n+\n@@ -1121,0 +1129,1 @@\n+        buildTrustedCerts();\n@@ -1488,1 +1497,3 @@\n-        checkWeak(rb.getString(\"the.certificate.request\"), req);\n+        CertPathConstraintsParameters cpcp = new CertPathConstraintsParameters(\n+                req.getSubjectPublicKeyInfo(), null, null, null);\n+        checkWeakConstraint(rb.getString(\"the.certificate.request\"), req, cpcp);\n@@ -1545,2 +1556,5 @@\n-        checkWeak(rb.getString(\"the.issuer\"), keyStore.getCertificateChain(alias));\n-        checkWeak(rb.getString(\"the.generated.certificate\"), cert);\n+        checkWeakConstraint(rb.getString(\"the.issuer\"),\n+                keyStore.getCertificateChain(alias));\n+        cpcp = new CertPathConstraintsParameters(cert, null, null, null);\n+        checkWeakConstraint(rb.getString(\"the.generated.certificate\"),\n+                cert, cpcp);\n@@ -1595,1 +1609,4 @@\n-        checkWeak(rb.getString(\"the.generated.crl\"), crl, privateKey);\n+        CertPathConstraintsParameters cpcp = new CertPathConstraintsParameters(\n+                privateKey, null, null, null);\n+        checkWeakConstraint(rb.getString(\"the.generated.crl\"), crl, privateKey,\n+                cpcp);\n@@ -1641,1 +1658,4 @@\n-        checkWeak(rb.getString(\"the.generated.certificate.request\"), request);\n+        CertPathConstraintsParameters cpcp = new CertPathConstraintsParameters(\n+                request.getSubjectPublicKeyInfo(), null, null, null);\n+        checkWeakConstraint(rb.getString(\"the.generated.certificate.request\"),\n+                request, cpcp);\n@@ -1686,1 +1706,3 @@\n-        checkWeak(rb.getString(\"the.certificate\"), cert);\n+        CertPathConstraintsParameters cpcp =\n+                new CertPathConstraintsParameters(cert, null, null, null);\n+        checkWeakConstraint(rb.getString(\"the.certificate\"), cert, cpcp);\n@@ -2024,1 +2046,2 @@\n-        checkWeak(rb.getString(\"the.generated.certificate\"), finalChain);\n+        checkWeakConstraint(rb.getString(\"the.generated.certificate\"),\n+                finalChain);\n@@ -2117,0 +2140,1 @@\n+        CertPathConstraintsParameters cpcp;\n@@ -2173,0 +2197,4 @@\n+\n+                    X509Certificate[] xcerts = convertCerts(chain);\n+                    List<X509Certificate> certs = Arrays.asList(xcerts);\n+                    TrustAnchor anchor = findTrustAnchor(certs);\n@@ -2185,1 +2213,13 @@\n-                        checkWeak(label, chain[i]);\n+\n+                        if (i == 0 &&\n+                                ((X509Certificate)chain[0]).\n+                                getBasicConstraints() == -1) {\n+                            \/\/ this is an EE\n+                            cpcp = buildCertPathConstraint((X509Certificate) chain[i], anchor);\n+                        } else {\n+                            cpcp = new CertPathConstraintsParameters(\n+                                    (X509Certificate)chain[i], null, anchor,\n+                                    null);\n+                        }\n+\n+                        checkWeakConstraint(label, chain[i], cpcp);\n@@ -2192,1 +2232,1 @@\n-                    checkWeak(label, chain);\n+                    checkWeakConstraint(label, chain);\n@@ -2218,1 +2258,3 @@\n-            checkWeak(label, cert);\n+            cpcp = new CertPathConstraintsParameters((X509Certificate)cert,\n+                    null,null, null);\n+            checkWeakConstraint(label, cert, cpcp);\n@@ -2445,1 +2487,4 @@\n-                checkWeak(\"<\" + newAlias + \">\", c);\n+                CertPathConstraintsParameters cpcp =\n+                        new CertPathConstraintsParameters((X509Certificate)c,\n+                        null, null, null);\n+                checkWeakConstraint(\"<\" + newAlias + \">\", c, cpcp);\n@@ -2642,0 +2687,4 @@\n+                    CertPathConstraintsParameters cpcp =\n+                            new CertPathConstraintsParameters(\n+                            (X509Certificate)signer, null,\n+                            null, null);\n@@ -2646,1 +2695,1 @@\n-                            withWeak(signer.getPublicKey()));\n+                            withWeakConstraint(signer.getPublicKey(), cpcp));\n@@ -2654,0 +2703,3 @@\n+                    CertPathConstraintsParameters cpcp =\n+                            new CertPathConstraintsParameters(\n+                            (X509Certificate)signer, null, null, null);\n@@ -2658,1 +2710,1 @@\n-                            withWeak(signer.getPublicKey()));\n+                            withWeakConstraint(signer.getPublicKey(), cpcp));\n@@ -2675,1 +2727,10 @@\n-            checkWeak(rb.getString(\"the.crl\"), crl, signer == null ? null : signer.getPublicKey());\n+\n+            if (signer != null) {\n+                CertPathConstraintsParameters cpcp =\n+                        new CertPathConstraintsParameters(\n+                        (X509Certificate)signer, null, null, null);\n+                checkWeakConstraint(rb.getString(\"the.crl\"), crl,\n+                        signer.getPublicKey(), cpcp);\n+            } else {\n+                checkWeak(rb.getString(\"the.crl\"), crl, null);\n+            }\n@@ -2721,0 +2782,2 @@\n+        CertPathConstraintsParameters cpcp =\n+                new CertPathConstraintsParameters(pkey, null, null, null);\n@@ -2724,1 +2787,1 @@\n-                withWeak(pkey),\n+                withWeakConstraint(pkey, cpcp),\n@@ -2748,1 +2811,6 @@\n-        checkWeak(rb.getString(\"the.certificate.request\"), req);\n+\n+        CertPathConstraintsParameters cpcp1 =\n+                new CertPathConstraintsParameters(\n+                req.getSubjectPublicKeyInfo(), null, null, null);\n+        checkWeakConstraint(rb.getString(\"the.certificate.request\"), req,\n+                cpcp1);\n@@ -2768,0 +2836,3 @@\n+        X509Certificate[] xcerts = convertCerts(certs);\n+        List<X509Certificate> chain = Arrays.asList(xcerts);\n+        TrustAnchor anchor = findTrustAnchor(chain);\n@@ -2788,1 +2859,11 @@\n-            checkWeak(oneInMany(rb.getString(\"the.certificate\"), i, certs.length), x509Cert);\n+            CertPathConstraintsParameters cpcp;\n+            if (i == 0 &&\n+                    x509Cert.getBasicConstraints() == -1) {\n+                \/\/ this is an EE\n+                cpcp = buildCertPathConstraint(x509Cert, anchor);\n+            } else {\n+                cpcp = new CertPathConstraintsParameters(x509Cert,\n+                        null, anchor, null);\n+            }\n+            checkWeakConstraint(oneInMany(rb.getString(\"the.certificate\"),\n+                    i, certs.length), x509Cert, cpcp);\n@@ -2904,0 +2985,5 @@\n+                @SuppressWarnings(\"unchecked\")\n+                List<X509Certificate> chain =\n+                        (List<X509Certificate>)certs;\n+                TrustAnchor anchor = findTrustAnchor(chain);\n+                CertPathConstraintsParameters cpcp;\n@@ -2916,1 +3002,8 @@\n-                    checkWeak(oneInManys(rb.getString(\n+                    if (cc == 0 && x.getBasicConstraints() == -1) {\n+                        \/\/ this is an EE\n+                        cpcp = buildCertPathConstraint(x, anchor);\n+                    } else {\n+                        cpcp = new CertPathConstraintsParameters(\n+                                x,null, anchor, null);\n+                    }\n+                    checkWeakConstraint(oneInManys(rb.getString(\n@@ -2919,1 +3012,1 @@\n-                            ss.size()), x);\n+                            ss.size()), x, cpcp);\n@@ -2926,0 +3019,4 @@\n+                    @SuppressWarnings(\"unchecked\")\n+                    List<X509Certificate> tschain =\n+                            (List<X509Certificate>)certs;\n+                    anchor = findTrustAnchor(tschain);\n@@ -2938,1 +3035,9 @@\n-                        checkWeak(oneInManys(rb.getString(\n+                        if (cc == 0 &&\n+                                x.getBasicConstraints() == -1) {\n+                            \/\/ this is an EE\n+                            cpcp = buildCertPathConstraint(x, anchor);\n+                        } else {\n+                            cpcp = new CertPathConstraintsParameters(\n+                                    x, null, anchor, null);\n+                        }\n+                        checkWeakConstraint(oneInManys(rb.getString(\n@@ -2941,1 +3046,1 @@\n-                                ss.size()), x);\n+                                ss.size()), x, cpcp);\n@@ -2971,0 +3076,3 @@\n+            @SuppressWarnings(\"unchecked\")\n+            List<X509Certificate> xcerts = (List<X509Certificate>)chain;\n+            TrustAnchor anchor = findTrustAnchor(xcerts);\n@@ -2981,1 +3089,11 @@\n-                    checkWeak(oneInMany(rb.getString(\"the.certificate\"), i++, chain.size()), cert);\n+                    X509Certificate x = (X509Certificate)cert;\n+                    CertPathConstraintsParameters cpcp;\n+                    if (i == 0 && x.getBasicConstraints() == -1) {\n+                        \/\/ this is an EE\n+                        cpcp = buildCertPathConstraint(x, anchor);\n+                    } else {\n+                        cpcp = new CertPathConstraintsParameters(\n+                                x, null, anchor, null);\n+                    }\n+                    checkWeakConstraint(oneInMany(rb.getString(\n+                            \"the.certificate\"), i++, chain.size()), x, cpcp);\n@@ -3205,0 +3323,3 @@\n+        CertPathConstraintsParameters cpcp =\n+                new CertPathConstraintsParameters(cert, null, null, null);\n+\n@@ -3206,1 +3327,1 @@\n-            checkWeak(rb.getString(\"the.input\"), cert);\n+            checkWeakConstraint(rb.getString(\"the.input\"), cert, cpcp);\n@@ -3226,1 +3347,1 @@\n-            checkWeak(rb.getString(\"the.input\"), cert);\n+            checkWeakConstraint(rb.getString(\"the.input\"), cert, cpcp);\n@@ -3237,1 +3358,1 @@\n-                checkWeak(rb.getString(\"the.input\"), cert);\n+                checkWeakConstraint(rb.getString(\"the.input\"), cert, cpcp);\n@@ -3246,1 +3367,1 @@\n-                checkWeak(rb.getString(\"the.input\"), cert);\n+                checkWeakConstraint(rb.getString(\"the.input\"), cert, cpcp);\n@@ -3273,1 +3394,1 @@\n-            checkWeak(rb.getString(\"the.input\"), cert);\n+            checkWeakConstraint(rb.getString(\"the.input\"), cert, cpcp);\n@@ -3413,0 +3534,15 @@\n+    private String withWeakConstraint(String alg,\n+            CertPathConstraintsParameters cpcp) {\n+        try {\n+            DISABLED_CHECK.permits(alg, cpcp, false);\n+        } catch (CertPathValidatorException e) {\n+            return String.format(rb.getString(\"with.disabled\"), alg);\n+        }\n+        try {\n+            LEGACY_CHECK.permits(alg, cpcp, false);\n+            return alg;\n+        } catch (CertPathValidatorException e) {\n+            return String.format(rb.getString(\"with.weak\"), alg);\n+        }\n+    }\n+\n@@ -3439,1 +3575,2 @@\n-    private String withWeak(Key key) {\n+    private String withWeakConstraint(Key key,\n+            CertPathConstraintsParameters cpcp) {\n@@ -3442,7 +3579,9 @@\n-        if (DISABLED_CHECK.permits(SIG_PRIMITIVE_SET, key)) {\n-            if (LEGACY_CHECK.permits(SIG_PRIMITIVE_SET, key)) {\n-                if (kLen >= 0) {\n-                    return String.format(rb.getString(\"key.bit\"), kLen, displayAlg);\n-                } else {\n-                    return String.format(rb.getString(\"unknown.size.1\"), displayAlg);\n-                }\n+        try {\n+            DISABLED_CHECK.permits(key.getAlgorithm(), cpcp, true);\n+        } catch (CertPathValidatorException e) {\n+            return String.format(rb.getString(\"key.bit.disabled\"), kLen, displayAlg);\n+        }\n+        try {\n+            LEGACY_CHECK.permits(key.getAlgorithm(), cpcp, true);\n+            if (kLen >= 0) {\n+                return String.format(rb.getString(\"key.bit\"), kLen, displayAlg);\n@@ -3450,1 +3589,1 @@\n-                return String.format(rb.getString(\"key.bit.weak\"), kLen, displayAlg);\n+                return String.format(rb.getString(\"unknown.size.1\"), displayAlg);\n@@ -3452,2 +3591,2 @@\n-        } else {\n-            return String.format(rb.getString(\"key.bit.disabled\"), kLen, displayAlg);\n+        } catch (CertPathValidatorException e) {\n+            return String.format(rb.getString(\"key.bit.weak\"), kLen, displayAlg);\n@@ -3468,0 +3607,2 @@\n+        CertPathConstraintsParameters cpcp =\n+                new CertPathConstraintsParameters(cert, null, null, null);\n@@ -3470,1 +3611,1 @@\n-            sigName = withWeak(sigName);\n+            sigName = withWeakConstraint(sigName, cpcp);\n@@ -3480,1 +3621,1 @@\n-                        withWeak(pkey),\n+                        withWeakConstraint(pkey, cpcp),\n@@ -3804,1 +3945,1 @@\n-        checkWeak(rb.getString(\"reply\"), replyCerts);\n+        checkWeakConstraint(rb.getString(\"reply\"), replyCerts);\n@@ -3886,1 +4027,4 @@\n-                checkWeak(String.format(fromKeyStore\n+                CertPathConstraintsParameters cpcp =\n+                        new CertPathConstraintsParameters(\n+                        (X509Certificate)root.snd, null, null, null);\n+                checkWeakConstraint(String.format(fromKeyStore\n@@ -3890,1 +4034,1 @@\n-                          root.snd);\n+                        root.snd, cpcp);\n@@ -3955,1 +4099,4 @@\n-                checkWeak(p.fst, p.snd);\n+                CertPathConstraintsParameters cpcp =\n+                        new CertPathConstraintsParameters(\n+                        p.snd, null, null, null);\n+                checkWeakConstraint(p.fst, p.snd, cpcp);\n@@ -4751,0 +4898,46 @@\n+    private void checkWeakConstraint(String label, String sigAlg, Key key,\n+            CertPathConstraintsParameters cpcp) {\n+        if (sigAlg != null) {\n+            try {\n+                DISABLED_CHECK.permits(sigAlg, cpcp, false);\n+                try {\n+                    LEGACY_CHECK.permits(sigAlg, cpcp, false);\n+                } catch (CertPathValidatorException e) {\n+                    weakWarnings.add(String.format(\n+                            rb.getString(\"whose.sigalg.weak\"), label, sigAlg));\n+                }\n+            } catch (CertPathValidatorException e) {\n+                if (e.getMessage().contains(\"denyAfter constraint check failed\") &&\n+                        e.getReason() == BasicReason.ALGORITHM_CONSTRAINED) {\n+                    weakWarnings.add(String.format(\n+                            rb.getString(\"whose.sigalg.usagesignedjar\"), label, sigAlg));\n+                } else {\n+                    weakWarnings.add(String.format(\n+                            rb.getString(\"whose.sigalg.disabled\"), label, sigAlg));\n+                }\n+                if (debug) {\n+                    e.printStackTrace();\n+                }\n+            }\n+        }\n+\n+        if (key != null) {\n+            try {\n+                DISABLED_CHECK.permits(key.getAlgorithm(), cpcp, true);\n+                try {\n+                    LEGACY_CHECK.permits(key.getAlgorithm(), cpcp, true);\n+                } catch (CertPathValidatorException e) {\n+                    weakWarnings.add(String.format(\n+                            rb.getString(\"whose.key.weak\"), label,\n+                            String.format(rb.getString(\"key.bit\"),\n+                            KeyUtil.getKeySize(key), fullDisplayAlgName(key))));\n+                }\n+            } catch (CertPathValidatorException e) {\n+                weakWarnings.add(String.format(\n+                        rb.getString(\"whose.key.disabled\"), label,\n+                        String.format(rb.getString(\"key.bit\"),\n+                        KeyUtil.getKeySize(key), fullDisplayAlgName(key))));\n+            }\n+        }\n+    }\n+\n@@ -4777,2 +4970,5 @@\n-    private void checkWeak(String label, Certificate[] certs)\n-            throws KeyStoreException {\n+    private void checkWeakConstraint(String label, Certificate[] certs)\n+            throws KeyStoreException, Exception {\n+        X509Certificate[] xcerts = convertCerts(certs);\n+        List<X509Certificate> chain = Arrays.asList(xcerts);\n+        TrustAnchor anchor = findTrustAnchor(chain);\n@@ -4787,1 +4983,10 @@\n-                checkWeak(fullLabel, xc);\n+\n+                CertPathConstraintsParameters cpcp = null;\n+                if (i == 0 && xc.getBasicConstraints() == -1) {\n+                    \/\/ this is an EE\n+                    cpcp = buildCertPathConstraint(xc, anchor);\n+                } else {\n+                    cpcp = new CertPathConstraintsParameters(\n+                            xc, null, anchor, null);\n+                }\n+                checkWeakConstraint(fullLabel, xc, cpcp);\n@@ -4792,1 +4997,2 @@\n-    private void checkWeak(String label, Certificate cert)\n+    private void checkWeakConstraint(String label, Certificate cert,\n+            CertPathConstraintsParameters cpcp)\n@@ -4798,1 +5004,1 @@\n-            checkWeak(label, sigAlg, xc.getPublicKey());\n+            checkWeakConstraint(label, sigAlg, xc.getPublicKey(), cpcp);\n@@ -4802,2 +5008,12 @@\n-    private void checkWeak(String label, PKCS10 p10) {\n-        checkWeak(label, p10.getSigAlg(), p10.getSubjectPublicKeyInfo());\n+    private void checkWeakConstraint(String label, PKCS10 p10,\n+            CertPathConstraintsParameters cpcp) {\n+        checkWeakConstraint(label, p10.getSigAlg(),\n+                p10.getSubjectPublicKeyInfo(), cpcp);\n+    }\n+\n+    private void checkWeakConstraint(String label, CRL crl, Key key,\n+            CertPathConstraintsParameters cpcp) {\n+        if (crl instanceof X509CRLImpl) {\n+            X509CRLImpl impl = (X509CRLImpl)crl;\n+            checkWeakConstraint(label, impl.getSigAlgName(), key, cpcp);\n+        }\n@@ -4813,0 +5029,69 @@\n+    private void buildTrustedCerts() {\n+        try {\n+            KeyStore caks = KeyStoreUtil.getCacertsKeyStore();\n+            if (caks != null) {\n+                Enumeration<String> aliases = caks.aliases();\n+                while (aliases.hasMoreElements()) {\n+                    String a = aliases.nextElement();\n+                    try {\n+                        trustedCerts.add((X509Certificate)caks.getCertificate(a));\n+                    } catch (Exception e2) {\n+                        \/\/ ignore, when a SecretkeyEntry does not include a cert\n+                    }\n+                }\n+            }\n+        } catch (Exception e) {\n+            \/\/ Ignore, if cacerts cannot be loaded\n+        }\n+    }\n+\n+    private TrustAnchor findTrustAnchor(List<X509Certificate> chain) {\n+        X509Certificate last = chain.get(chain.size() - 1);\n+        Optional<X509Certificate> trusted =\n+                trustedCerts.stream()\n+                        .filter(c -> c.getSubjectX500Principal().equals(last.getIssuerX500Principal()))\n+                        .findFirst();\n+        return trusted.isPresent() ? new TrustAnchor(trusted.get(), null) : null;\n+    }\n+\n+    private X509Certificate[] convertCerts(Certificate[] certs)\n+        throws Exception {\n+        X509Certificate[] xcerts = new X509Certificate[certs.length];\n+\n+        for (int i = 0; i < certs.length; i++) {\n+            try {\n+                CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n+                ByteArrayInputStream bais =\n+                        new ByteArrayInputStream(certs[i].getEncoded());\n+                xcerts[i] = (X509Certificate)cf.generateCertificate(bais);\n+            } catch (CertificateException e) {\n+                throw new RuntimeException(e);\n+            }\n+        }\n+        return xcerts;\n+    }\n+\n+    private CertPathConstraintsParameters buildCertPathConstraint (\n+        X509Certificate xcert, TrustAnchor anchor) throws Exception{\n+        List<String> eku = xcert.getExtendedKeyUsage();\n+        if (eku == null) {\n+            return new CertPathConstraintsParameters(xcert, null,\n+                    anchor, null);\n+        }\n+\n+        if (eku.contains(KnownOIDs.codeSigning.value())) {\n+            return new CertPathConstraintsParameters(xcert,\n+                    Validator.VAR_CODE_SIGNING, anchor, null);\n+        } else if (eku.contains(KnownOIDs.clientAuth.value())) {\n+            return new CertPathConstraintsParameters(xcert,\n+                    Validator.VAR_TLS_CLIENT, anchor, null);\n+        } else if (eku.contains(KnownOIDs.serverAuth.value())) {\n+            return new CertPathConstraintsParameters(xcert,\n+                    Validator.VAR_TLS_SERVER, anchor, null);\n+        } else if (eku.contains(KnownOIDs.KP_TimeStamping.value())) {\n+            return new CertPathConstraintsParameters(xcert,\n+                    Validator.VAR_TSA_SERVER, anchor, null);\n+        }\n+        return new CertPathConstraintsParameters(xcert, null, anchor, null);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/tools\/keytool\/Main.java","additions":337,"deletions":52,"binary":false,"changes":389,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -486,0 +486,1 @@\n+        {\"whose.sigalg.usagesignedjar\", \"%1$s uses the %2$s signature algorithm which is considered a security risk and cannot be used to sign JARs after 2019-01-01.\"},\n","filename":"src\/java.base\/share\/classes\/sun\/security\/tools\/keytool\/Resources.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8273236\n+ * @summary Test SHA1 usage SignedJAR\n+ * @library \/test\/lib\n+ *\/\n+\n+import jdk.test.lib.SecurityTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class TestSha1Usage {\n+\n+    static OutputAnalyzer kt(String cmd, String ks) throws Exception {\n+        return SecurityTools.keytool(\"-storepass changeit \" + cmd +\n+                \" -keystore \" + ks);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        SecurityTools.keytool(\"-keystore ks -storepass changeit \" +\n+                \"-genkeypair -keyalg rsa -alias ca -dname CN=CA \" +\n+                \"-ext eku=codeSigning -sigalg SHA1withRSA\")\n+                .shouldContain(\"Warning:\")\n+                .shouldMatch(\"The generated certificate.*SHA1withRSA.*considered a security risk\")\n+                .shouldMatch(\"cannot be used to sign JARs\")\n+                .shouldHaveExitValue(0);\n+\n+        kt(\"-genkeypair -keyalg rsa -alias e1 -dname CN=E1\", \"ks\");\n+        kt(\"-certreq -alias e1 -file tmp.req\", \"ks\");\n+        SecurityTools.keytool(\"-keystore ks -storepass changeit \" +\n+                \"-gencert -alias ca -infile tmp.req -outfile tmp.cert\")\n+                .shouldContain(\"Warning:\")\n+                .shouldMatch(\"The issuer.*SHA1withRSA.*considered a security risk\")\n+                .shouldMatch(\"cannot be used to sign JARs\")\n+                .shouldHaveExitValue(0);\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/TestSha1Usage.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"}]}