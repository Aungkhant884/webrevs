{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -497,2 +497,1 @@\n-            throw new WrongMethodTypeException(\"expected \" + handle.accessModeType(ad.type) + \" but found \"\n-                    + ad.symbolicMethodTypeExact);\n+            throw newWrongMethodTypeException(handle.accessModeType(ad.type), ad.symbolicMethodTypeExact);\n@@ -521,1 +520,1 @@\n-    static WrongMethodTypeException newWrongMethodTypeException(MethodType actual, MethodType expected) {\n+    static WrongMethodTypeException newWrongMethodTypeException(MethodType targetType, MethodType callSiteType) {\n@@ -523,1 +522,1 @@\n-        return new WrongMethodTypeException(\"expected \"+expected+\" but found \"+actual);\n+        return new WrongMethodTypeException(\"handle's method type \" + targetType + \" but found \" + callSiteType);\n@@ -530,3 +529,3 @@\n-        MethodType actual = mh.type();\n-        if (actual != expected)\n-            throw newWrongMethodTypeException(actual, expected);\n+        MethodType targetType = mh.type();\n+        if (targetType != expected)\n+            throw newWrongMethodTypeException(targetType, expected);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/Invokers.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -2086,2 +2086,2 @@\n-        throw new WrongMethodTypeException(\"expected \" + accessModeType(ad.type) + \" but found \"\n-                + ad.symbolicMethodTypeExact);\n+        throw new WrongMethodTypeException(\"handle's method type \" + accessModeType(ad.type)\n+                + \" but found \" + ad.symbolicMethodTypeExact);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandle.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test 8299183\n+ * @run testng WrongMethodTypeTest\n+ *\/\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodHandles.Lookup;\n+import java.lang.invoke.VarHandle;\n+import java.lang.invoke.WrongMethodTypeException;\n+\n+import static java.lang.invoke.MethodType.methodType;\n+\n+import static org.testng.AssertJUnit.*;\n+\n+import org.testng.annotations.*;\n+\n+public class WrongMethodTypeTest {\n+    static final Lookup LOOKUP = MethodHandles.lookup();\n+\n+    @Test\n+    public void checkExactType() throws Throwable {\n+        String expectedMessage = \"handle's method type (int)int but found ()boolean\";\n+        try {\n+            MethodHandle mh = LOOKUP.findStatic(WrongMethodTypeTest.class, \"m\", methodType(int.class, int.class));\n+            boolean b = (boolean)mh.invokeExact();\n+            fail(\"Expected WrongMethodTypeException\");\n+        } catch (WrongMethodTypeException ex) {\n+            assertEquals(expectedMessage, ex.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    public void checkAccessModeInvokeExact() throws Throwable {\n+        String expectedMessage = \"handle's method type ()int but found ()Void\";\n+        VarHandle vh = LOOKUP.findStaticVarHandle(WrongMethodTypeTest.class, \"x\", int.class)\n+                             .withInvokeExactBehavior();\n+        try {\n+            Void o = (Void) vh.get();\n+        } catch (WrongMethodTypeException ex) {\n+            assertEquals(expectedMessage, ex.getMessage());\n+        }\n+    }\n+\n+    @Test\n+    public void checkVarHandleInvokeExact() throws Throwable {\n+        String expectedMessage = \"handle's method type (WrongMethodTypeTest)boolean but found (WrongMethodTypeTest)int\";\n+        VarHandle vh = LOOKUP.findVarHandle(WrongMethodTypeTest.class, \"y\", boolean.class)\n+                             .withInvokeExactBehavior();\n+        try {\n+            int o = (int) vh.get(new WrongMethodTypeTest());\n+        } catch (WrongMethodTypeException ex) {\n+            assertEquals(expectedMessage, ex.getMessage());\n+        }\n+    }\n+\n+    static int m(int x) {\n+        return x;\n+    }\n+\n+    static int x = 200;\n+    boolean y = false;\n+}\n","filename":"test\/jdk\/java\/lang\/invoke\/WrongMethodTypeTest.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"}]}