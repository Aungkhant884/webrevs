{"files":[{"patch":"@@ -180,14 +180,0 @@\n-        \/\/ Copy cache to avoid race.\n-        DecimalFormatSymbols dfsyms = cache;\n-         \/\/ Use cached value if same locale. Note: Locale.equals creates false positives.\n-        if (dfsyms != null && dfsyms.locale == locale) {\n-            return dfsyms;\n-        }\n-        \/\/ Fetch DecimalFormatSymbols from provider.\n-        dfsyms = getInstanceFromProvider(locale);\n-        \/\/ Update cache. Race collisions are benign.\n-        cache = dfsyms;\n-        return dfsyms;\n-    }\n-\n-    private static final DecimalFormatSymbols getInstanceFromProvider(Locale locale) {\n@@ -205,2 +191,8 @@\n-    \/\/ Cache most recent use. Deliberately non-volatile heuristic.\n-    private static DecimalFormatSymbols cache = null;\n+    \/**\n+     * {@return locale used to create this instance}\n+     *\n+     * @since 19\n+     *\/\n+    public Locale getLocale() {\n+        return locale;\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/text\/DecimalFormatSymbols.java","additions":8,"deletions":16,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2012,0 +2012,1 @@\n+    private static DecimalFormatSymbols DFS = null;\n@@ -2013,1 +2014,11 @@\n-        return DecimalFormatSymbols.getInstance(locale);\n+        \/\/ Capture local copy to avoid thread race.\n+        DecimalFormatSymbols dfs = DFS;\n+        if (dfs != null && dfs.getLocale().equals(locale)) {\n+            return dfs;\n+        }\n+        \/\/ Fetch a new local instance of DecimalFormatSymbols. Note that DFS are mutatble\n+        \/\/ and this instance is reserved for Formatter.\n+        dfs = DecimalFormatSymbols.getInstance(locale);\n+        \/\/ Non-volatile here is acceptable heuristic.\n+        DFS = dfs;\n+        return dfs;\n","filename":"src\/java.base\/share\/classes\/java\/util\/Formatter.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"}]}