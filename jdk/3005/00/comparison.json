{"files":[{"patch":"@@ -3496,1 +3496,1 @@\n-    assert(!n->as_Loop()->is_transformed_long_loop() || _loop_opts_cnt == 0, \"should have been turned into a counted loop\");\n+    assert(!n->as_Loop()->is_transformed_long_inner_loop() || _loop_opts_cnt == 0, \"should have been turned into a counted loop\");\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -767,1 +767,1 @@\n-  if (loop->_child != NULL || !x->is_LongCountedLoop()) {\n+  if (loop->_child != NULL || !x->is_LongCountedLoop() || x->as_Loop()->is_transformed_long_outer_loop()) {\n@@ -815,1 +815,2 @@\n-  const TypeLong* phi_t = _igvn.type(phi)->is_long();\n+  \/\/ May not have gone thru igvn yet so don't use _igvn.type(phi) (PhaseIdealLoop::is_counted_loop() sets the iv phi's type)\n+  const TypeLong* phi_t = phi->bottom_type()->is_long();\n@@ -835,2 +836,2 @@\n-  Node* outer_head = new LoopNode(entry_control, outer_back_branch);\n-  IdealLoopTree* outer_ilt = insert_outer_loop(loop, outer_head->as_Loop(), outer_back_branch);\n+  LoopNode* outer_head = new LoopNode(entry_control, outer_back_branch);\n+  IdealLoopTree* outer_ilt = insert_outer_loop(loop, outer_head, outer_back_branch);\n@@ -1008,1 +1009,2 @@\n-  inner_head->mark_transformed_long_loop();\n+  inner_head->mark_transformed_long_inner_loop();\n+  outer_head->mark_transformed_long_outer_loop();\n@@ -1392,1 +1394,1 @@\n-    assert(!x->as_Loop()->is_transformed_long_loop(), \"long loop was transformed\");\n+    assert(!x->as_Loop()->is_transformed_long_inner_loop(), \"long loop was transformed\");\n@@ -1482,1 +1484,1 @@\n-      !x->as_Loop()->is_transformed_long_loop() &&\n+      !x->as_Loop()->is_transformed_long_inner_loop() &&\n@@ -1677,1 +1679,1 @@\n-  if (x->as_Loop()->is_transformed_long_loop()) {\n+  if (x->as_Loop()->is_transformed_long_inner_loop()) {\n@@ -1681,0 +1683,3 @@\n+  if (iv_bt == T_LONG && x->as_Loop()->is_transformed_long_outer_loop()) {\n+    l->mark_transformed_long_outer_loop();\n+  }\n@@ -3316,1 +3321,1 @@\n-    assert(!_head->is_Loop() || !_head->as_Loop()->is_transformed_long_loop(), \"transformation to counted loop should not fail\");\n+    assert(!_head->is_Loop() || !_head->as_Loop()->is_transformed_long_inner_loop(), \"transformation to counted loop should not fail\");\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":14,"deletions":9,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -80,1 +80,2 @@\n-         TransformedLongLoop = 1<<18 };\n+         TransformedLongInnerLoop = 1<<18,\n+         TransformedLongOuterLoop = 1<<19};\n@@ -105,1 +106,2 @@\n-  bool is_transformed_long_loop() const { return _loop_flags & TransformedLongLoop; }\n+  bool is_transformed_long_inner_loop() const { return _loop_flags & TransformedLongInnerLoop; }\n+  bool is_transformed_long_outer_loop() const { return _loop_flags & TransformedLongOuterLoop; }\n@@ -120,1 +122,2 @@\n-  void mark_transformed_long_loop() { _loop_flags |= TransformedLongLoop; }\n+  void mark_transformed_long_inner_loop() { _loop_flags |= TransformedLongInnerLoop; }\n+  void mark_transformed_long_outer_loop() { _loop_flags |= TransformedLongOuterLoop; }\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1046,1 +1046,1 @@\n-  if (((n_blk->is_CountedLoop() || (n_blk->is_Loop() && n_blk->as_Loop()->is_transformed_long_loop())) && n->Opcode() == Op_AddI) ||\n+  if (((n_blk->is_CountedLoop() || (n_blk->is_Loop() && n_blk->as_Loop()->is_transformed_long_inner_loop())) && n->Opcode() == Op_AddI) ||\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8263189\n+ * @summary C2: assert(!had_error) failed: bad dominance\n+ *\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=TestDeadLongPhi TestDeadLongPhi\n+ *\n+ *\/\n+\n+public class TestDeadLongPhi {\n+    static int N = 400;\n+    static long instanceCount;\n+\n+    public static void main(String[] strArr) {\n+        for (int i = 0; i < 10 ; i++) {\n+            mainTest();\n+        }\n+    }\n+\n+    static void mainTest() {\n+        vMeth();\n+    }\n+\n+    static void vMeth() {\n+        int i17 = 89, i18, i19 = 44, i20 = 2, iArr3[] = new int[N];\n+        long l2, lArr[] = new long[N];\n+        byte by = 22;\n+        init(iArr3, 131);\n+        for (i18 = 2; i18 < 350; ++i18) {\n+            i17 \/= 8;\n+            for (l2 = 5; l2 > i18; l2 -= 2) {\n+                switch ((i18 % 3)) {\n+                    case 8:\n+                        iArr3[i18] |= i17;\n+                        break;\n+                    case 9:\n+                        i20 += (((l2) + by) - i19);\n+                        i19 += instanceCount;\n+                    case 10:\n+                }\n+            }\n+        }\n+    }\n+\n+    public static void init(int[] a, int seed) {\n+        for (int j = 0; j < a.length; j++) {\n+            a[j] = (j % 2 == 0) ? seed + j : seed - j;\n+        }\n+    }\n+\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/longcountedloops\/TestDeadLongPhi.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"}]}