{"files":[{"patch":"@@ -36,2 +36,0 @@\n-import java.nio.*;\n-import java.nio.charset.*;\n@@ -773,12 +771,1 @@\n-\n-        try {\n-            byte b[] = new byte[end-start];\n-            System.arraycopy(buffer, start, b, 0, end-start);\n-            CharBuffer cb = cs.newDecoder()\n-                .onUnmappableCharacter(CodingErrorAction.REPORT)\n-                .onMalformedInput(CodingErrorAction.REPORT)\n-                .decode(ByteBuffer.wrap(b));\n-            return cb.toString();\n-        } catch (IOException e) {\n-            throw new IOException(\"Incorrect string value\", e);\n-        }\n+        return new String(buffer, start, end - start, cs);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/DerValue.java","additions":1,"deletions":14,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,0 +65,6 @@\n+        byte[] data = derValue.getData().toByteArray();\n+        for (int i=0; i < data.length; i++) {\n+            if ((int)data[i] < 0) {\n+                 throw new IOException(\"Incorrect DNSName\");\n+            }\n+        }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/DNSName.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,2 @@\n+ * @run main\/othervm  DNSNameErrorTest\n+ * @run main\/othervm -Djava.security.debug=x509 DNSNameErrorTest debug.x509\n@@ -32,2 +34,0 @@\n-import jdk.test.lib.process.ProcessTools;\n-import jdk.test.lib.process.OutputAnalyzer;\n@@ -36,1 +36,3 @@\n-import java.nio.charset.StandardCharsets;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n@@ -38,0 +40,1 @@\n+import java.security.cert.CertificateParsingException;\n@@ -80,0 +83,3 @@\n+    private final static String debugMsg1 = \"x509: Debug info only. Error parsing extension: ObjectId: 2.5.29.17 Criticality=false\";\n+    private final static String debugMsg2 = \"java.io.IOException: Incorrect DNSName\";\n+\n@@ -82,8 +88,6 @@\n-        if (args.length > 0) {\n-            String test = args[0];\n-            if (test.equals(\"nonCritical\")) {\n-               testNonCriticalName();\n-            }\n-            else if (test.equals(\"critical\")) {\n-               testCriticalName();\n-            }\n+        if (args.length > 0 && args[0].equals(\"debug.x509\")) {\n+               testNonCriticalNameWithDBG();\n+        }\n+        else {\n+            testNonCriticalName();\n+            testCriticalName();\n@@ -91,4 +95,0 @@\n-\n-        runTestNonCriticalName();\n-        runTestNonCriticalNameWithDBG();\n-        runTestCriticalName();\n@@ -108,0 +108,22 @@\n+    private static void testNonCriticalNameWithDBG() throws Exception {\n+        \/\/ getSubjectAlternativeNames() doesn't throw an Exception and retrun null\n+        \/\/ when critical is not specified, even if it has incorrect strings.\n+        \/\/ IOExceition is printed in x509 debug info.\n+        PrintStream err = System.err;\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        System.setErr(new PrintStream(baos));\n+        X509Certificate certificate = certificate(invalidSANCertStr);\n+        Collection<?> subjectAltNames = certificate.getSubjectAlternativeNames();\n+        if (subjectAltNames != null) {\n+            throw new RuntimeException(\"Read invalid subjectAlternativeNames.\");\n+        }\n+        baos.close();\n+        System.setErr(err);\n+        String debugMsg = baos.toString();\n+        if (debugMsg.contains(debugMsg1) && debugMsg.contains(debugMsg2)) {\n+            System.out.println(\"Passed.\");\n+            return;\n+        }\n+        throw new RuntimeException(\"Invalid java.security.debug=x509 messaege.\");\n+    }\n+\n@@ -111,3 +133,11 @@\n-        X509Certificate certificate = certificate(invalidCriticalSANCertStr);\n-        Collection<?> subjectAltNames = certificate.getSubjectAlternativeNames();\n-        System.out.println(\"Failed.\");\n+        try {\n+            X509Certificate certificate = certificate(invalidCriticalSANCertStr);\n+            Collection<?> subjectAltNames = certificate.getSubjectAlternativeNames();\n+        }\n+        catch (CertificateParsingException e) {\n+            if (e.getMessage().equals(\"java.io.IOException: Incorrect DNSName\")) {\n+                System.out.println(\"Passed.\");\n+                return;\n+            }\n+        }\n+        throw new RuntimeException(\"Read invalid subjectAlternativeNames.\");\n@@ -120,25 +150,0 @@\n-\n-    private static void runTestNonCriticalName() throws Exception {\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n-            \"DNSNameErrorTest\", \"nonCritical\");\n-        OutputAnalyzer output = ProcessTools.executeProcess(pb);\n-        output.shouldContain(\"Passed.\");\n-    }\n-\n-    static void runTestNonCriticalNameWithDBG() throws Exception {\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n-            \"-Djava.security.debug=x509\", \"DNSNameErrorTest\", \"nonCritical\");\n-        OutputAnalyzer output = ProcessTools.executeProcess(pb);\n-        output.shouldContain(\"java.io.IOException: Incorrect string value\");\n-        output.shouldContain(\"Caused by: java.nio.charset.MalformedInputException\");\n-        output.shouldContain(\"Passed.\");\n-    }\n-\n-    static void runTestCriticalName() throws Exception {\n-        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n-            \"DNSNameErrorTest\", \"critical\");\n-        OutputAnalyzer output = ProcessTools.executeProcess(pb);\n-        output.shouldContain(\"java.io.IOException: Incorrect string value\");\n-        output.shouldContain(\"Caused by: java.nio.charset.MalformedInputException\");\n-        output.shouldNotContain(\"Failed.\");\n-    }\n","filename":"test\/jdk\/sun\/security\/x509\/GeneralName\/DNSNameErrorTest.java","additions":49,"deletions":44,"binary":false,"changes":93,"status":"modified"}]}