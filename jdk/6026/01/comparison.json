{"files":[{"patch":"@@ -1023,0 +1023,28 @@\n+    \/**\n+     * Retrieves the attributes associated with the given alias.\n+     *\n+     * @implSpec\n+     * The default implementation returns an empty {@code Set}.\n+     *\n+     * @param alias the alias name\n+     * @return an unmodifiable {@code Set} of attributes, possibly empty\n+     *      if the given alias does not exist, or there is no\n+     *      attributes associated with it. For a {@code PrivateKeyEntry}\n+     *      or {@code SecretKeyEntry}, some attributes may be protected\n+     *      and only available through the {@link Entry#getAttributes}\n+     *      method after the entry is extracted.\n+     *\n+     * @throws KeyStoreException if the keystore has not been initialized\n+     * (loaded).\n+     * @throws NullPointerException if {@code alias} is {@code null}\n+     *\n+     * @since 18\n+     *\/\n+    public final Set<Entry.Attribute> getAttributes(String alias)\n+            throws KeyStoreException {\n+        if (!initialized) {\n+            throw new KeyStoreException(\"Uninitialized keystore\");\n+        }\n+        return keyStoreSpi.engineGetAttributes(Objects.requireNonNull(alias));\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/security\/KeyStore.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -448,0 +448,23 @@\n+    \/**\n+     * Retrieves the attributes associated with the given alias.\n+     *\n+     * @implSpec\n+     * The default implementation returns an empty {@code Set}.\n+     *\n+     * @param alias the alias name\n+     * @return an unmodifiable {@code Set} of attributes, possibly empty\n+     *      if the given alias does not exist, or there is no\n+     *      attributes associated with it. For a {@code PrivateKeyEntry}\n+     *      or {@code SecretKeyEntry}, some attributes may be protected\n+     *      and they should be populated into the entry returned by\n+     *      {@link #engineGetEntry}.\n+     *\n+     * @throws KeyStoreException if the keystore has not been initialized\n+     * (loaded).\n+     *\n+     * @since 18\n+     *\/\n+    public Set<Entry.Attribute> engineGetAttributes(String alias) {\n+        return Collections.emptySet();\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/security\/KeyStoreSpi.java","additions":24,"deletions":1,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -1304,0 +1304,9 @@\n+    @Override\n+    public Set<KeyStore.Entry.Attribute> engineGetAttributes(String alias) {\n+        if (!engineContainsAlias(alias)) {\n+            return super.engineGetAttributes(alias);\n+        }\n+        Entry entry = entries.get(alias.toLowerCase(Locale.ENGLISH));\n+        return getAttributes(entry);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs12\/PKCS12KeyStore.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -239,0 +239,22 @@\n+    @Override\n+    public Set<KeyStore.Entry.Attribute> engineGetAttributes(String alias) {\n+\n+        AbstractMap.SimpleEntry<String, Collection<KeyStore>> pair =\n+                getKeystoresForReading(alias);\n+        Set<KeyStore.Entry.Attribute> result = Collections.emptySet();\n+\n+        try {\n+            String entryAlias = pair.getKey();\n+            for (KeyStore keystore : pair.getValue()) {\n+                result = keystore.getAttributes(entryAlias);\n+                if (result != null) {\n+                    break;\n+                }\n+            }\n+        } catch (KeyStoreException e) {\n+            throw new IllegalStateException(e);\n+        }\n+\n+        return result;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/DomainKeyStore.java","additions":23,"deletions":1,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -132,0 +132,5 @@\n+    @Override\n+    public Set<KeyStore.Entry.Attribute> engineGetAttributes(String alias) {\n+        return keystore.engineGetAttributes(alias);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/KeyStoreDelegator.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8225181\n+ * @summary KeyStore should have a getAttributes method\n+ * @library \/test\/lib\n+ * @modules java.base\/sun.security.tools.keytool\n+ *          java.base\/sun.security.x509\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+import sun.security.tools.keytool.CertAndKeyGen;\n+import sun.security.x509.X500Name;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.security.KeyStore;\n+import java.security.cert.Certificate;\n+\n+public class GetAttributes {\n+\n+    static char[] pass = \"changeit\".toCharArray();\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        \/\/ Create a keystore with one private key entry and one cert entry\n+        CertAndKeyGen cag = new CertAndKeyGen(\"EC\", \"SHA256withECDSA\");\n+        KeyStore ks = KeyStore.getInstance(\"pkcs12\");\n+        ks.load(null, null);\n+        cag.generate(\"secp256r1\");\n+        ks.setKeyEntry(\"a\", cag.getPrivateKey(), pass, new Certificate[] {\n+                cag.getSelfCertificate(new X500Name(\"CN=a\"), 1000)} );\n+        cag.generate(\"secp256r1\");\n+        ks.setCertificateEntry(\"b\",\n+                cag.getSelfCertificate(new X500Name(\"CN=b\"), 1000));\n+\n+        \/\/ Test\n+        check(ks);\n+\n+        \/\/ Test newly loaded\n+        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+        ks.store(bos, pass);\n+        KeyStore ks2 = KeyStore.getInstance(\"pkcs12\");\n+        ks2.load(new ByteArrayInputStream(bos.toByteArray()), pass);\n+        check(ks2);\n+    }\n+\n+    static void check(KeyStore ks) throws Exception {\n+        var entry = ks.getEntry(\"a\", new KeyStore.PasswordProtection(pass));\n+        Asserts.assertEQ(ks.getAttributes(\"a\"), entry.getAttributes());\n+        entry = ks.getEntry(\"b\", null);\n+        Asserts.assertEQ(ks.getAttributes(\"b\"), entry.getAttributes());\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/pkcs12\/GetAttributes.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"}]}