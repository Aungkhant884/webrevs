{"files":[{"patch":"@@ -1032,3 +1032,4 @@\n-     *      attributes associated with it, or the attributes are\n-     *      not extractable (For example, if the attributes is encrypted\n-     *      in a private key entry or a secret key entry).\n+     *      attributes associated with it. For a {@code PrivateKeyEntry}\n+     *      or {@code SecretKeyEntry}, some attributes may be protected\n+     *      and only available through the {@link Entry#getAttributes}\n+     *      method after the entry is extracted.\n@@ -1036,1 +1037,1 @@\n-     * @throws    KeyStoreException if the keystore has not been initialized\n+     * @throws KeyStoreException if the keystore has not been initialized\n@@ -1038,0 +1039,1 @@\n+     * @throws NullPointerException if {@code alias} is {@code null}\n@@ -1046,1 +1048,1 @@\n-        return keyStoreSpi.engineGetAttributes(alias);\n+        return keyStoreSpi.engineGetAttributes(Objects.requireNonNull(alias));\n","filename":"src\/java.base\/share\/classes\/java\/security\/KeyStore.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -451,0 +451,3 @@\n+     * @implSpec\n+     * The default implementation returns an empty {@code Set}.\n+     *\n@@ -453,0 +456,8 @@\n+     *      if the given alias does not exist, or there is no\n+     *      attributes associated with it. For a {@code PrivateKeyEntry}\n+     *      or {@code SecretKeyEntry}, some attributes may be protected\n+     *      and they should be populated into the entry returned by\n+     *      {@link #engineGetEntry}.\n+     *\n+     * @throws KeyStoreException if the keystore has not been initialized\n+     * (loaded).\n","filename":"src\/java.base\/share\/classes\/java\/security\/KeyStoreSpi.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"}]}