{"files":[{"patch":"@@ -115,1 +115,1 @@\n-        return !non0AfterIndex(0);\n+        return !nonZeroAfterIndex(0);\n@@ -123,1 +123,1 @@\n-    private boolean non0AfterIndex(int index) {\n+    private boolean nonZeroAfterIndex(int index) {\n@@ -404,1 +404,0 @@\n-     * This method is reserved for Long and BigInteger representations.\n@@ -409,1 +408,1 @@\n-    private void round(int maximumDigits) {\n+    private void roundInt(int maximumDigits) {\n@@ -416,1 +415,0 @@\n-     * This method is reserved for Double and BigDecimal representations.\n@@ -514,1 +512,1 @@\n-                return non0AfterIndex(maximumDigits);\n+                return nonZeroAfterIndex(maximumDigits);\n@@ -519,3 +517,6 @@\n-                if (non0AfterIndex(maximumDigits)) {\n-                    return (isNegative && roundingMode == RoundingMode.FLOOR)\n-                            || (!isNegative && roundingMode == RoundingMode.CEILING);\n+                if (nonZeroAfterIndex(maximumDigits)) {\n+                    if (roundingMode == RoundingMode.FLOOR) {\n+                        return isNegative;\n+                    } else {\n+                        return !isNegative;\n+                    }\n@@ -526,22 +527,14 @@\n-                case HALF_EVEN:\n-                    \/\/ Above tie, round up for all cases\n-                    if (digits[maximumDigits] > '5') {\n-                        return true;\n-                        \/\/ At tie, consider UP, DOWN, and EVEN logic\n-                    } else if (digits[maximumDigits] == '5' ) {\n-                        \/\/ Rounding position is the last index, there are 3 Cases.\n-                        if (maximumDigits == (count - 1)) {\n-                            \/\/ Do not round twice\n-                            if (alreadyRounded) {\n-                                return false;\n-                                \/\/ When exact, consider specific contract logic\n-                            } else if (valueExactAsDecimal) {\n-                                return (roundingMode == RoundingMode.HALF_UP) ||\n-                                        (roundingMode == RoundingMode.HALF_EVEN\n-                                                && (maximumDigits > 0) && (digits[maximumDigits - 1] % 2 != 0));\n-                                \/\/ Not already rounded, and not exact, round up\n-                            } else {\n-                                return true;\n-                            }\n-                            \/\/ Rounding position is not the last index\n-                            \/\/ If any further digits have a non-zero value, round up\n+            case HALF_EVEN:\n+                \/\/ Above tie, round up for all cases\n+                if (digits[maximumDigits] > '5') {\n+                    return true;\n+                    \/\/ At tie, consider UP, DOWN, and EVEN logic\n+                } else if (digits[maximumDigits] == '5' ) {\n+                    \/\/ Rounding position is the last index, there are 3 Cases.\n+                    if (maximumDigits == (count - 1)) {\n+                        \/\/ When exact, consider specific contract logic\n+                        if (valueExactAsDecimal) {\n+                            return (roundingMode == RoundingMode.HALF_UP) ||\n+                                    (roundingMode == RoundingMode.HALF_EVEN\n+                                            && (maximumDigits > 0) && (digits[maximumDigits - 1] % 2 != 0));\n+                        \/\/ If already rounded, do not round again, otherwise round up\n@@ -549,1 +542,1 @@\n-                            return non0AfterIndex(maximumDigits+1);\n+                            return !alreadyRounded;\n@@ -551,0 +544,4 @@\n+                    \/\/ Rounding position is not the last index\n+                    \/\/ If any further digits have a non-zero value, round up\n+                    } else {\n+                        return nonZeroAfterIndex(maximumDigits+1);\n@@ -552,4 +549,5 @@\n-                    \/\/ Below tie, do not round up for all cases\n-                    break;\n-                case UNNECESSARY:\n-                if (non0AfterIndex(maximumDigits)) {\n+                }\n+                \/\/ Below tie, do not round up for all cases\n+                break;\n+            case UNNECESSARY:\n+                if (nonZeroAfterIndex(maximumDigits)) {\n@@ -646,1 +644,1 @@\n-            round(maximumDigits);\n+            roundInt(maximumDigits);\n@@ -692,1 +690,1 @@\n-            round(maximumDigits);\n+            roundInt(maximumDigits);\n","filename":"src\/java.base\/share\/classes\/java\/text\/DigitList.java","additions":36,"deletions":38,"binary":false,"changes":74,"status":"modified"}]}