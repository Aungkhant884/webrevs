{"files":[{"patch":"@@ -1,61 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2010, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#include \"precompiled.hpp\"\n-#include \"runtime\/thread.inline.hpp\"\n-#include \"runtime\/threadCritical.hpp\"\n-\n-\/\/ put OS-includes here\n-# include <pthread.h>\n-\n-\/\/\n-\/\/ See threadCritical.hpp for details of this class.\n-\/\/\n-\n-static pthread_t             tc_owner = 0;\n-static pthread_mutex_t       tc_mutex = PTHREAD_MUTEX_INITIALIZER;\n-static int                   tc_count = 0;\n-\n-ThreadCritical::ThreadCritical() {\n-  pthread_t self = pthread_self();\n-  if (self != tc_owner) {\n-    int ret = pthread_mutex_lock(&tc_mutex);\n-    guarantee(ret == 0, \"fatal error with pthread_mutex_lock()\");\n-    assert(tc_count == 0, \"Lock acquired with illegal reentry count.\");\n-    tc_owner = self;\n-  }\n-  tc_count++;\n-}\n-\n-ThreadCritical::~ThreadCritical() {\n-  assert(tc_owner == pthread_self(), \"must have correct owner\");\n-  assert(tc_count > 0, \"must have correct count\");\n-\n-  tc_count--;\n-  if (tc_count == 0) {\n-    tc_owner = 0;\n-    int ret = pthread_mutex_unlock(&tc_mutex);\n-    guarantee(ret == 0, \"fatal error with pthread_mutex_unlock()\");\n-  }\n-}\n","filename":"src\/hotspot\/os\/bsd\/threadCritical_bsd.cpp","additions":0,"deletions":61,"binary":false,"changes":61,"status":"deleted"},{"patch":"@@ -1,61 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2010, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#include \"precompiled.hpp\"\n-#include \"runtime\/thread.inline.hpp\"\n-#include \"runtime\/threadCritical.hpp\"\n-\n-\/\/ put OS-includes here\n-# include <pthread.h>\n-\n-\/\/\n-\/\/ See threadCritical.hpp for details of this class.\n-\/\/\n-\n-static pthread_t             tc_owner = 0;\n-static pthread_mutex_t       tc_mutex = PTHREAD_MUTEX_INITIALIZER;\n-static int                   tc_count = 0;\n-\n-ThreadCritical::ThreadCritical() {\n-  pthread_t self = pthread_self();\n-  if (self != tc_owner) {\n-    int ret = pthread_mutex_lock(&tc_mutex);\n-    guarantee(ret == 0, \"fatal error with pthread_mutex_lock()\");\n-    assert(tc_count == 0, \"Lock acquired with illegal reentry count.\");\n-    tc_owner = self;\n-  }\n-  tc_count++;\n-}\n-\n-ThreadCritical::~ThreadCritical() {\n-  assert(tc_owner == pthread_self(), \"must have correct owner\");\n-  assert(tc_count > 0, \"must have correct count\");\n-\n-  tc_count--;\n-  if (tc_count == 0) {\n-    tc_owner = 0;\n-    int ret = pthread_mutex_unlock(&tc_mutex);\n-    guarantee(ret == 0, \"fatal error with pthread_mutex_unlock()\");\n-  }\n-}\n","filename":"src\/hotspot\/os\/linux\/threadCritical_linux.cpp","additions":0,"deletions":61,"binary":false,"changes":61,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-#include \"runtime\/threadCritical.hpp\"\n@@ -29,0 +28,1 @@\n+#include \"runtime\/threadCritical.hpp\"\n","filename":"src\/hotspot\/os\/posix\/threadCritical_posix.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/hotspot\/os\/aix\/threadCritical_aix.cpp","status":"renamed"}]}