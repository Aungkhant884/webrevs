{"files":[{"patch":"@@ -404,0 +404,4 @@\n+                if (mods.contains(Requires.Modifier.SYNTHETIC)) {\n+                    throw invalidModuleDescriptor(\"The requires entry for java.base\"\n+                                                  + \" has ACC_SYNTHETIC set\");\n+                }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModuleInfo.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+ * @bug 8142968 8158456 8298875\n@@ -66,0 +67,1 @@\n+    private static final JavaLangModuleAccess JLMA = SharedSecrets.getJavaLangModuleAccess();\n@@ -1087,1 +1089,0 @@\n-        JavaLangModuleAccess JLMA = SharedSecrets.getJavaLangModuleAccess();\n@@ -1097,1 +1098,0 @@\n-        JavaLangModuleAccess JLMA = SharedSecrets.getJavaLangModuleAccess();\n@@ -1364,1 +1364,0 @@\n-    @Test(expectedExceptions = InvalidModuleDescriptorException.class)\n@@ -1376,1 +1375,2 @@\n-        ModuleDescriptor.read(bb, () -> Set.of(\"q\"));\n+        assertThrows(InvalidModuleDescriptorException.class,\n+                     () -> ModuleDescriptor.read(bb, () -> Set.of(\"q\")));\n@@ -1395,2 +1395,4 @@\n-    \/\/ The requires table for java.base must be 0 length\n-    @Test(expectedExceptions = InvalidModuleDescriptorException.class)\n+    \/**\n+     * Test ModuleDescriptor.read reading a module-info for java.base that has a non-0\n+     * length requires table.\n+     *\/\n@@ -1398,2 +1400,1 @@\n-        ModuleDescriptor descriptor\n-            = ModuleDescriptor.newModule(\"java.base\")\n+        ModuleDescriptor descriptor = ModuleDescriptor.newModule(\"java.base\")\n@@ -1403,1 +1404,2 @@\n-        ModuleDescriptor.read(bb);\n+        assertThrows(InvalidModuleDescriptorException.class,\n+                     () -> ModuleDescriptor.read(bb));\n@@ -1406,2 +1408,4 @@\n-    \/\/ The requires table must have an entry for java.base\n-    @Test(expectedExceptions = InvalidModuleDescriptorException.class)\n+    \/**\n+     * Test ModuleDescriptor.read reading a module-info with a zero length requires table\n+     * (no entry for java.base).\n+     *\/\n@@ -1409,2 +1413,2 @@\n-        ModuleDescriptor descriptor = SharedSecrets.getJavaLangModuleAccess()\n-                .newModuleBuilder(\"m1\", false, Set.of()).build();\n+        \/\/ use non-strict builder to create module that does not require java.base\n+        ModuleDescriptor descriptor = JLMA.newModuleBuilder(\"m\", false, Set.of()).build();\n@@ -1412,1 +1416,2 @@\n-        ModuleDescriptor.read(bb);\n+        assertThrows(InvalidModuleDescriptorException.class,\n+                     () -> ModuleDescriptor.read(bb));\n@@ -1415,2 +1420,4 @@\n-    \/\/ The requires table must have an entry for java.base\n-    @Test(expectedExceptions = InvalidModuleDescriptorException.class)\n+    \/**\n+     * Test ModuleDescriptor.read reading a module-info with a non-zero length requires\n+     * table that does not have entry for java.base.\n+     *\/\n@@ -1418,2 +1425,4 @@\n-        ModuleDescriptor descriptor = SharedSecrets.getJavaLangModuleAccess()\n-                .newModuleBuilder(\"m1\", false, Set.of()).requires(\"m2\").build();\n+        \/\/ use non-strict builder to create module that does not require java.base\n+        ModuleDescriptor descriptor = JLMA.newModuleBuilder(\"m1\", false, Set.of())\n+                .requires(\"m2\")\n+                .build();\n@@ -1421,1 +1430,15 @@\n-        ModuleDescriptor.read(bb);\n+        assertThrows(InvalidModuleDescriptorException.class,\n+                     () -> ModuleDescriptor.read(bb));\n+    }\n+\n+    \/**\n+     * Test ModuleDescriptor.read reading a module-info with a requires entry for\n+     * java.base with the ACC_SYNTHETIC flag set.\n+     *\/\n+    public void testReadWithSynethticRequiresBase() {\n+        ModuleDescriptor descriptor = ModuleDescriptor.newModule(\"m\")\n+                .requires(Set.of(SYNTHETIC), \"java.base\")\n+                .build();\n+        ByteBuffer bb = ModuleInfoWriter.toByteBuffer(descriptor);\n+        assertThrows(InvalidModuleDescriptorException.class,\n+                     () -> ModuleDescriptor.read(bb));\n@@ -1424,0 +1447,3 @@\n+    \/**\n+     * Test ModuleDescriptor.read with a null parameter.\n+     *\/\n@@ -1427,5 +1453,4 @@\n-        try {\n-            ModuleDescriptor.read((InputStream)null);\n-            assertTrue(false);\n-        } catch (NullPointerException expected) { }\n-\n+        assertThrows(NullPointerException.class,\n+                     () -> ModuleDescriptor.read((InputStream) null));\n+        assertThrows(NullPointerException.class,\n+                     () -> ModuleDescriptor.read((ByteBuffer) null));\n@@ -1434,5 +1459,2 @@\n-            try {\n-                ModuleDescriptor.read(in, null);\n-                assertTrue(false);\n-            } catch (NullPointerException expected) { }\n-        }\n+            assertThrows(NullPointerException.class,\n+                        () -> ModuleDescriptor.read(in, null));\n@@ -1440,7 +1462,0 @@\n-        try {\n-            ModuleDescriptor.read((ByteBuffer)null);\n-            assertTrue(false);\n-        } catch (NullPointerException expected) { }\n-\n-\n-        try (InputStream in = base.getResourceAsStream(\"module-info.class\")) {\n@@ -1448,4 +1463,2 @@\n-            try {\n-                ModuleDescriptor.read(bb, null);\n-                assertTrue(false);\n-            } catch (NullPointerException expected) { }\n+            assertThrows(NullPointerException.class,\n+                         () -> ModuleDescriptor.read(bb, null));\n","filename":"test\/jdk\/java\/lang\/module\/ModuleDescriptorTest.java","additions":54,"deletions":41,"binary":false,"changes":95,"status":"modified"}]}