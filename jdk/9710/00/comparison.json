{"files":[{"patch":"@@ -2943,1 +2943,1 @@\n-                Env<AttrContext> dupLocalEnv = localEnv.dup(localEnv.tree, localEnv.info.dup(localEnv.info.scope.dupUnshared()));\n+                Env<AttrContext> dupLocalEnv = copyEnv(localEnv);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8260892\n+ * @summary Compilation fails: lambda parameter not visible in body when generics involved\n+ * @compile ScopeCopyCanGetAlteredTest.java\n+ *\/\n+\n+import java.util.function.Function;\n+import java.util.function.IntFunction;\n+\n+class ScopeCopyCanGetAlteredTest {\n+    interface GenericOp<A> {\n+        <B> A apply(IntFunction<B> func1, Function<B, A> func2);\n+    }\n+\n+    static <A> GenericOp<A> foo(IntFunction<GenericOp<A>> f) {\n+        return null;\n+    }\n+\n+    static <A> GenericOp<A> bar() {\n+        return foo((int arg) -> new GenericOp<>() {\n+            @Override\n+            public <B> A apply(IntFunction<B> func1, Function<B, A> func2) {\n+                return func2.apply(func1.apply(arg));\n+            }\n+        });\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/generics\/diamond\/ScopeCopyCanGetAlteredTest.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"}]}