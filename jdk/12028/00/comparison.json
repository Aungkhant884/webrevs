{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -140,0 +140,1 @@\n+    private volatile boolean finalResponseCodeReceived = false;\n@@ -502,3 +503,0 @@\n-        responseCode = (int)responseHeaders\n-                .firstValueAsLong(\":status\")\n-                .orElseThrow(() -> new IOException(\"no statuscode in response\"));\n@@ -506,3 +504,11 @@\n-        response = new Response(\n-                request, exchange, responseHeaders, connection(),\n-                responseCode, HttpClient.Version.HTTP_2);\n+        if (!finalResponseCodeReceived) {\n+            responseCode = (int) responseHeaders\n+                    .firstValueAsLong(\":status\")\n+                    .orElseThrow(() -> new IOException(\"no statuscode in response\"));\n+            \/\/ If informational code, response is partially complete\n+            if (responseCode < 100 || responseCode > 199)\n+                this.finalResponseCodeReceived = true;\n+\n+            response = new Response(\n+                    request, exchange, responseHeaders, connection(),\n+                    responseCode, HttpClient.Version.HTTP_2);\n@@ -514,1 +520,1 @@\n-        responseHeaders.firstValueAsLong(\"content-length\");\n+            responseHeaders.firstValueAsLong(\"content-length\");\n@@ -516,5 +522,8 @@\n-        if (Log.headers()) {\n-            StringBuilder sb = new StringBuilder(\"RESPONSE HEADERS:\\n\");\n-            Log.dumpHeaders(sb, \"    \", responseHeaders);\n-            Log.logHeaders(sb.toString());\n-        }\n+            if (Log.headers()) {\n+                StringBuilder sb = new StringBuilder(\"RESPONSE HEADERS:\\n\");\n+                Log.dumpHeaders(sb, \"    \", responseHeaders);\n+                Log.logHeaders(sb.toString());\n+            }\n+\n+            \/\/ this will clear the response headers\n+            rspHeadersConsumer.reset();\n@@ -522,2 +531,9 @@\n-        \/\/ this will clear the response headers\n-        rspHeadersConsumer.reset();\n+            completeResponse(response);\n+        } else {\n+            if (Log.headers()) {\n+                StringBuilder sb = new StringBuilder(\"TRAILING HEADERS:\\n\");\n+                Log.dumpHeaders(sb, \"    \", responseHeaders);\n+                Log.logHeaders(sb.toString());\n+            }\n+            rspHeadersConsumer.reset();\n+        }\n@@ -525,1 +541,0 @@\n-        completeResponse(response);\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Stream.java","additions":31,"deletions":16,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -0,0 +1,217 @@\n+\/*\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ @test\n+ * @summary Trailing headers should be ignored by the client when using HTTP\/2\n+ *          and not affect the rest of the exchange.\n+ * @library \/test\/lib server\n+ * @bug 8296410\n+ * @modules java.base\/sun.net.www.http\n+ *          java.net.http\/jdk.internal.net.http.common\n+ *          java.net.http\/jdk.internal.net.http.frame\n+ *          java.net.http\/jdk.internal.net.http.hpack\n+ * @run testng\/othervm -Djdk.httpclient.HttpClient.log=errors,requests,headers TrailingHeadersTest\n+ *\/\n+\n+import jdk.internal.net.http.common.HttpHeadersBuilder;\n+import jdk.internal.net.http.frame.DataFrame;\n+import jdk.internal.net.http.frame.HeaderFrame;\n+import jdk.internal.net.http.frame.HeadersFrame;\n+import org.testng.annotations.AfterTest;\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.Test;\n+\n+import javax.net.ssl.SSLSession;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.PrintStream;\n+import java.net.URI;\n+import java.net.http.HttpClient;\n+import java.net.http.HttpHeaders;\n+import java.net.http.HttpRequest;\n+import java.net.http.HttpResponse;\n+import java.net.http.HttpResponse.BodyHandlers;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+public class TrailingHeadersTest {\n+\n+    Http2TestServer http2TestServer;\n+    URI trailingURI, trailng1xxURI, warmupURI;\n+    static PrintStream testLog = System.err;\n+\n+    @BeforeTest\n+    public void setup() throws Exception {\n+        http2TestServer = new Http2TestServer(false, 0);\n+        http2TestServer.setExchangeSupplier(TrailingHeadersExchange::new);\n+        http2TestServer.addHandler(new ResponseTrailersHandler(), \"\/ResponseTrailingHeaders\");\n+        http2TestServer.addHandler(new InformationalTrailersHandler(), \"\/InfoRespTrailingHeaders\");\n+        http2TestServer.addHandler(new WarmupHandler(), \"\/WarmupHandler\");\n+\n+        http2TestServer.start();\n+\n+        trailingURI = URI.create(\"http:\/\/\" + http2TestServer.serverAuthority() + \"\/ResponseTrailingHeaders\");\n+        trailng1xxURI = URI.create(\"http:\/\/\" + http2TestServer.serverAuthority() + \"\/InfoRespTrailingHeaders\");\n+        warmupURI = URI.create(\"http:\/\/\" + http2TestServer.serverAuthority() + \"\/WarmupHandler\");\n+\n+        testLog.println(this.getClass().getCanonicalName() + \": setup(): trailing = \" + trailingURI);\n+        testLog.println(this.getClass().getCanonicalName() + \": setup(): trailing1xxURI = \" + trailng1xxURI);\n+    }\n+\n+    @AfterTest\n+    public void teardown() {\n+        http2TestServer.stop();\n+    }\n+\n+    @Test\n+    public void testTrailingHeaders() {\n+        HttpClient httpClient = HttpClient.newBuilder().build();\n+        testLog.println(this.getClass().getCanonicalName() + \": testTrailingHeaders(): Performing warmup request, upgrade to HTTP\/2\");\n+        performWarmupRequest(httpClient);\n+\n+        HttpRequest hRequest = HttpRequest.newBuilder()\n+                .version(HttpClient.Version.HTTP_2)\n+                .GET()\n+                .uri(trailingURI)\n+                .build();\n+        testLog.println(this.getClass().getCanonicalName() + \": testTrailingHeaders(): Client sending GET\");\n+        CompletableFuture<HttpResponse<String>> hSend = httpClient.sendAsync(hRequest, BodyHandlers.ofString(StandardCharsets.UTF_8));\n+        HttpResponse<String> hResponse = hSend.join();\n+        assertEquals(hResponse.statusCode(), 200, (\"Expected 200 but got \" + hResponse.statusCode()));\n+    }\n+\n+    \/**\n+     * Changes concerned with this test alters behavior of how partial http responses are handled (1XX Codes).\n+     * Therefore, an additional test case checking that partial responses, when expected by the client, behave\n+     * as expected.\n+     *\/\n+    @Test\n+    public void testTrailingHeaders1XX() {\n+        HttpClient httpClient = HttpClient.newBuilder().build();\n+        testLog.println(this.getClass().getCanonicalName() + \": testTrailingHeaders1XX(): Performing warmup request, upgrade to HTTP\/2\");\n+        performWarmupRequest(httpClient);\n+\n+        HttpRequest hRequest = HttpRequest.newBuilder()\n+                .version(HttpClient.Version.HTTP_2)\n+                .POST(HttpRequest.BodyPublishers.ofString(\"Test Post\"))\n+                .expectContinue(true)\n+                .uri(trailng1xxURI)\n+                .build();\n+        testLog.println(this.getClass().getCanonicalName() + \": testTrailingHeaders1XX(): Client sending POST with 100-continue header\");\n+        CompletableFuture<HttpResponse<String>> hSend = httpClient.sendAsync(hRequest, BodyHandlers.ofString(StandardCharsets.UTF_8));\n+        HttpResponse<String> hResponse = hSend.join();\n+        assertEquals(hResponse.statusCode(), 200, (\"Expected 200 but got \" + hResponse.statusCode()));\n+    }\n+\n+    private void performWarmupRequest(HttpClient httpClient) {\n+        HttpRequest warmupReq = HttpRequest.newBuilder()\n+                .version(HttpClient.Version.HTTP_2)\n+                .GET()\n+                .uri(warmupURI)\n+                .build();\n+        CompletableFuture<HttpResponse<String>> warmup = httpClient.sendAsync(warmupReq, BodyHandlers.ofString(StandardCharsets.UTF_8));\n+        warmup.join();\n+    }\n+\n+    static class TrailingHeadersExchange extends Http2TestExchangeImpl {\n+\n+        byte[] resp = \"Test Response\".getBytes(StandardCharsets.UTF_8);\n+\n+\n+        TrailingHeadersExchange(int streamid, String method, HttpHeaders reqheaders, HttpHeadersBuilder rspheadersBuilder,\n+                                 URI uri, InputStream is, SSLSession sslSession, BodyOutputStream os,\n+                                 Http2TestServerConnection conn, boolean pushAllowed) {\n+            super(streamid, method, reqheaders, rspheadersBuilder, uri, is, sslSession, os, conn, pushAllowed);\n+        }\n+\n+        public void sendResponseThenTrailers() throws IOException {\n+            this.sendResponseHeaders(200, resp.length);\n+            DataFrame dataFrame = new DataFrame(this.streamid, 0, ByteBuffer.wrap(resp));\n+            this.conn.outputQ.put(dataFrame);\n+\n+            \/\/ Encoding sample headers here can intermittently cause an IllegalStateException as the encoder may be busy.\n+            \/\/ Leaving the code commented out here as it can be useful to observe how Trailing Headers appear in the log.\n+            \/*\n+            HttpHeadersBuilder hb = this.conn.createNewHeadersBuilder();\n+            hb.setHeader(\"x-sample\", \"val\");\n+            HeaderFrame headerFrame = new HeadersFrame(this.streamid, 0, this.conn.encodeHeaders(hb.build()));\n+            *\/\n+\n+            HeaderFrame headerFrame = new HeadersFrame(this.streamid, 0, List.of());\n+            headerFrame.setFlag(HeaderFrame.END_HEADERS);\n+            headerFrame.setFlag(HeaderFrame.END_STREAM);\n+            this.conn.outputQ.put(headerFrame);\n+        }\n+    }\n+\n+    static class WarmupHandler implements Http2Handler {\n+\n+        @Override\n+        public void handle(Http2TestExchange exchange) throws IOException {\n+            exchange.sendResponseHeaders(200, 0);\n+        }\n+    }\n+\n+    static class ResponseTrailersHandler implements Http2Handler {\n+\n+        @Override\n+        public void handle(Http2TestExchange exchange) throws IOException {\n+            if (exchange.getProtocol().equals(\"HTTP\/2\")) {\n+                if (exchange instanceof TrailingHeadersExchange trailingHeadersExchange) {\n+                    trailingHeadersExchange.sendResponseThenTrailers();\n+                }\n+            } else {\n+                testLog.println(this.getClass().getCanonicalName() + \": Incorrect protocol version\");\n+                exchange.sendResponseHeaders(400, 0);\n+            }\n+        }\n+    }\n+\n+    static class InformationalTrailersHandler implements Http2Handler {\n+\n+        @Override\n+        public void handle(Http2TestExchange exchange) throws IOException {\n+            if (exchange.getProtocol().equals(\"HTTP\/2\")) {\n+                if (exchange instanceof TrailingHeadersExchange trailingHeadersExchange) {\n+                    testLog.println(this.getClass().getCanonicalName() + \": Sending status 100\");\n+                    trailingHeadersExchange.sendResponseHeaders(100, 0);\n+\n+                    try (InputStream is = exchange.getRequestBody()) {\n+                        is.readAllBytes();\n+                        trailingHeadersExchange.sendResponseThenTrailers();\n+                    }\n+                }\n+            } else {\n+                testLog.println(this.getClass().getCanonicalName() + \": Incorrect protocol version\");\n+                exchange.sendResponseHeaders(400, 0);\n+            }\n+        }\n+\n+\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/TrailingHeadersTest.java","additions":217,"deletions":0,"binary":false,"changes":217,"status":"added"}]}