{"files":[{"patch":"@@ -140,1 +140,1 @@\n-    private volatile boolean finalResponseCodeReceived = false;\n+    private volatile boolean finalResponseCodeReceived;\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Stream.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,4 +54,0 @@\n-import jdk.httpclient.test.lib.http2.BodyOutputStream;\n-import jdk.httpclient.test.lib.http2.Http2TestExchangeImpl;\n-import jdk.httpclient.test.lib.http2.Http2TestServerConnection;\n-import jdk.internal.net.http.common.HttpHeadersBuilder;\n@@ -62,1 +58,0 @@\n-import java.io.InputStream;\n@@ -64,0 +59,1 @@\n+import java.net.InetSocketAddress;\n@@ -66,1 +62,0 @@\n-import java.net.http.HttpHeaders;\n@@ -74,2 +69,0 @@\n-import javax.net.ssl.SSLSession;\n-\n@@ -82,1 +75,1 @@\n-    static Http2TestServer http2TestServer;\n+    Http2TestServer http2TestServer;\n@@ -96,1 +89,0 @@\n-        http2TestServer.setExchangeSupplier(TestExchangeSupplier::new);\n@@ -165,2 +157,1 @@\n-        boolean acceptedFirstConnection;\n-        int firstConnectionHash = 0;\n+        InetSocketAddress remote;\n@@ -170,19 +161,9 @@\n-            if (exchange instanceof TestExchangeSupplier exch) {\n-                if (!acceptedFirstConnection) {\n-                    firstConnectionHash = exch.getTestConnection().hashCode();\n-                    acceptedFirstConnection = true;\n-                    exch.sendResponseHeaders(200, 0);\n-                } else {\n-                    int secondConnectionHash = exch.getTestConnection().hashCode();\n-                    int cmp = Integer.compare(firstConnectionHash, secondConnectionHash);\n-\n-                    if (cmp < 0 | cmp > 0) {\n-                        testLog.println(\"ServerTimeoutHandler: New Connection was used, idleConnectionTimeoutEvent fired.\"\n-                                + \" First Connection Hash: \" + firstConnectionHash + \", Second Connection Hash: \" + secondConnectionHash);\n-                        exch.sendResponseHeaders(200, 0);\n-                    } else {\n-                        testLog.println(\"ServerTimeoutHandler: Same Connection was used, idleConnectionTimeoutEvent did not fire.\"\n-                                + \" First Connection Hash: \" + firstConnectionHash + \", Second Connection Hash: \" + secondConnectionHash);\n-                        exch.sendResponseHeaders(400, 0);\n-                    }\n-                }\n+            if (remote == null) {\n+                remote = exchange.getRemoteAddress();\n+                exchange.sendResponseHeaders(200, 0);\n+            } else if (!remote.equals(exchange.getRemoteAddress())) {\n+                testLog.println(\"ServerTimeoutHandler: New Connection was used, idleConnectionTimeoutEvent fired.\"\n+                        + \" First remote: \" + remote + \", Second Remote: \" + exchange.getRemoteAddress());\n+                exchange.sendResponseHeaders(200, 0);\n+            } else {\n+                exchange.sendResponseHeaders(400, 0);\n@@ -195,2 +176,1 @@\n-        boolean acceptedFirstConnection;\n-        int firstConnectionHash = 0;\n+        InetSocketAddress oldRemote;\n@@ -200,19 +180,10 @@\n-            if (exchange instanceof TestExchangeSupplier exch) {\n-                if (!acceptedFirstConnection) {\n-                    firstConnectionHash = exch.getTestConnection().hashCode();\n-                    acceptedFirstConnection = true;\n-                    exch.sendResponseHeaders(200, 0);\n-                } else {\n-                    int secondConnectionHash = exch.getTestConnection().hashCode();\n-                    int cmp = Integer.compare(firstConnectionHash, secondConnectionHash);\n-\n-                    if (cmp == 0) {\n-                        testLog.println(\"ServerTimeoutHandler: Same Connection was used, idleConnectionTimeoutEvent did not fire.\"\n-                                + \" First Connection Hash: \" + firstConnectionHash + \", Second Connection Hash: \" + secondConnectionHash);\n-                        exch.sendResponseHeaders(200, 0);\n-                    } else {\n-                        testLog.println(\"ServerTimeoutHandler: Different Connection was used, idleConnectionTimeoutEvent fired.\"\n-                                + \" First Connection Hash: \" + firstConnectionHash + \", Second Connection Hash: \" + secondConnectionHash);\n-                        exch.sendResponseHeaders(400, 0);\n-                    }\n-                }\n+            InetSocketAddress newRemote = exchange.getRemoteAddress();\n+            if (oldRemote == null) {\n+                oldRemote = newRemote;\n+                exchange.sendResponseHeaders(200, 0);\n+            } else if (oldRemote.equals(newRemote)) {\n+                testLog.println(\"ServerNoTimeoutHandler: Same Connection was used, idleConnectionTimeoutEvent did not fire.\"\n+                        + \" First remote: \" + oldRemote + \", Second Remote: \" + newRemote);\n+                exchange.sendResponseHeaders(200, 0);\n+            } else {\n+                exchange.sendResponseHeaders(400, 0);\n@@ -222,11 +193,0 @@\n-\n-    static class TestExchangeSupplier extends Http2TestExchangeImpl {\n-\n-        public TestExchangeSupplier(int streamid, String method, HttpHeaders reqheaders, HttpHeadersBuilder rspheadersBuilder, URI uri, InputStream is, SSLSession sslSession, BodyOutputStream os, Http2TestServerConnection conn, boolean pushAllowed) {\n-            super(streamid, method, reqheaders, rspheadersBuilder, uri, is, sslSession, os, conn, pushAllowed);\n-        }\n-\n-        public Http2TestServerConnection getTestConnection() {\n-            return this.conn;\n-        }\n-    }\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/IdleConnectionTimeoutTest.java","additions":23,"deletions":63,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -31,4 +31,0 @@\n- * @modules java.base\/sun.net.www.http\n- *          java.net.http\/jdk.internal.net.http.common\n- *          java.net.http\/jdk.internal.net.http.frame\n- *          java.net.http\/jdk.internal.net.http.hpack\n@@ -153,11 +149,8 @@\n-        if (pushPromiseMap.size() > 1) {\n-            throw new TestException(\"Push Promise map size is greater than 1\");\n-        } else {\n-            \/\/ This will only iterate once\n-            for (HttpRequest r : pushPromiseMap.keySet()) {\n-                CompletableFuture<HttpResponse<String>> serverPushResp = pushPromiseMap.get(r);\n-                \/\/ Get the push promise HttpResponse result if present\n-                HttpResponse<String> resp = serverPushResp.join();\n-                assertEquals(resp.body(), \"Sample_Push_Data\", \"Unexpected Push Promise response body\");\n-                assertEquals(resp.statusCode(), 200, \"Status code of Push Promise response should be 200\");\n-            }\n+        assertEquals(pushPromiseMap.size(), 1, \"Push Promise should not be greater than 1\");\n+        \/\/ This will only iterate once\n+        for (HttpRequest r : pushPromiseMap.keySet()) {\n+            CompletableFuture<HttpResponse<String>> serverPushResp = pushPromiseMap.get(r);\n+            \/\/ Get the push promise HttpResponse result if present\n+            HttpResponse<String> resp = serverPushResp.join();\n+            assertEquals(resp.body(), \"Sample_Push_Data\", \"Unexpected Push Promise response body\");\n+            assertEquals(resp.statusCode(), 200, \"Status code of Push Promise response should be 200\");\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/TrailingHeadersTest.java","additions":8,"deletions":15,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -966,9 +966,5 @@\n-            protected void sendEndStream() {\n-                try {\n-                    if (properties.getProperty(\"sendTrailingHeadersAfterPushPromise\", \"0\").equals(\"1\")) {\n-                        conn.outputQ.put(getTrailingHeadersFrame(promisedStreamid, List.of()));\n-                    } else {\n-                        super.sendEndStream();\n-                    }\n-                } catch (IOException e) {\n-                    e.printStackTrace();\n+            protected void sendEndStream() throws IOException {\n+                if (properties.getProperty(\"sendTrailingHeadersAfterPushPromise\", \"0\").equals(\"1\")) {\n+                    conn.outputQ.put(getTrailingHeadersFrame(promisedStreamid, List.of()));\n+                } else {\n+                    super.sendEndStream();\n","filename":"test\/jdk\/java\/net\/httpclient\/lib\/jdk\/httpclient\/test\/lib\/http2\/Http2TestServerConnection.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"}]}