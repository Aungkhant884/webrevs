{"files":[{"patch":"@@ -436,0 +436,25 @@\n+\/\/------------------------------Ideal---------------------------------------\n+\/\/ Check to see if we are multiplying by a constant 2 and convert to add, then try the regular MulNode::Ideal\n+Node *MulFNode::Ideal(PhaseGVN *phase, bool can_reshape) {\n+  const TypeF *t1 = in(1)->bottom_type()->isa_float_constant();\n+  const TypeF *t2 = in(2)->bottom_type()->isa_float_constant();\n+\n+  \/\/ x * 2 -> x + x\n+  if (t1 != NULL) {\n+    if (t1->getf() == 2) {\n+      Node* base = in(2);\n+      return new AddFNode(base, base);\n+    }\n+  }\n+\n+  \/\/ Try other operand\n+  if (t2 != NULL) {\n+    if (t2->getf() == 2) {\n+      Node* base = in(1);\n+      return new AddFNode(base, base);\n+    }\n+  }\n+\n+  return MulNode::Ideal(phase, can_reshape);\n+}\n+\n@@ -445,0 +470,25 @@\n+\/\/------------------------------Ideal---------------------------------------\n+\/\/ Check to see if we are multiplying by a constant 2 and convert to add, then try the regular MulNode::Ideal\n+Node *MulDNode::Ideal(PhaseGVN *phase, bool can_reshape) {\n+  const TypeD *t1 = in(1)->bottom_type()->isa_double_constant();\n+  const TypeD *t2 = in(2)->bottom_type()->isa_double_constant();\n+\n+  \/\/ x * 2 -> x + x\n+  if (t1 != NULL) {\n+    if (t1->getd() == 2) {\n+      Node* base = in(2);\n+      return new AddDNode(base, base);\n+    }\n+  }\n+\n+  \/\/ Try other operand\n+  if (t2 != NULL) {\n+    if (t2->getd() == 2) {\n+      Node* base = in(1);\n+      return new AddDNode(base, base);\n+    }\n+  }\n+\n+  return MulNode::Ideal(phase, can_reshape);\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/mulnode.cpp","additions":50,"deletions":0,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -133,0 +133,1 @@\n+  virtual Node *Ideal(PhaseGVN *phase, bool can_reshape);\n@@ -150,0 +151,1 @@\n+  virtual Node *Ideal(PhaseGVN *phase, bool can_reshape);\n","filename":"src\/hotspot\/share\/opto\/mulnode.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.c2.irTests;\n+\n+import compiler.lib.ir_framework.*;\n+import java.util.Random;\n+import jdk.test.lib.Utils;\n+\n+\/*\n+ * @test\n+ * @summary Test that transformation of multiply-by-2 is appropriately turned into additions.\n+ * @library \/test\/lib \/\n+ * @requires vm.compiler2.enabled\n+ * @run driver compiler.c2.irTests.TestMulBy2\n+ *\/\n+public class TestMulBy2 {\n+    private static final Random RANDOM = Utils.getRandomInstance();\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.MUL})\n+    \/\/ Checks x * 2 -> x + x\n+    public float testFloat(float x) {\n+        return x * 2;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.MUL})\n+    \/\/ Checks x * 2 -> x + x\n+    public double testDouble(double x) {\n+        return x * 2;\n+    }\n+\n+    @Run(test = \"testFloat\")\n+    public void runTestFloat() {\n+        testFloat(RANDOM.nextFloat());\n+    }\n+\n+    @Run(test = \"testDouble\")\n+    public void runTestDouble() {\n+        testDouble(RANDOM.nextDouble());\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestMulBy2.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Measurement(iterations = 5, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n+@Warmup(iterations = 5, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n+@Fork(3)\n+public class MulBy2 {\n+    @Benchmark\n+    public void testMul2Float(Blackhole blackhole, BenchState state) {\n+        blackhole.consume(state.f * 2);\n+    }\n+\n+    @Benchmark\n+    public void testMul2Double(Blackhole blackhole, BenchState state) {\n+        blackhole.consume(state.d * 2);\n+    }\n+\n+\n+    @State(Scope.Benchmark)\n+    public static class BenchState {\n+        private float f;\n+        private double d;\n+\n+        public BenchState() {\n+        }\n+\n+        @Setup\n+        public void setup() {\n+            f = (float) Math.random();\n+            d = Math.random();\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/MulBy2.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"}]}