{"files":[{"patch":"@@ -439,2 +439,1 @@\n-  const TypeF *t1 = in(1)->bottom_type()->isa_float_constant();\n-  const TypeF *t2 = in(2)->bottom_type()->isa_float_constant();\n+  const TypeF *t2 = phase->type(in(2))->isa_float_constant();\n@@ -443,8 +442,0 @@\n-  if (t1 != NULL) {\n-    if (t1->getf() == 2) {\n-      Node* base = in(2);\n-      return new AddFNode(base, base);\n-    }\n-  }\n-\n-  \/\/ Try other operand\n@@ -473,2 +464,1 @@\n-  const TypeD *t1 = in(1)->bottom_type()->isa_double_constant();\n-  const TypeD *t2 = in(2)->bottom_type()->isa_double_constant();\n+  const TypeD *t2 = phase->type(in(2))->isa_double_constant();\n@@ -477,8 +467,0 @@\n-  if (t1 != NULL) {\n-    if (t1->getd() == 2) {\n-      Node* base = in(2);\n-      return new AddDNode(base, base);\n-    }\n-  }\n-\n-  \/\/ Try other operand\n","filename":"src\/hotspot\/share\/opto\/mulnode.cpp","additions":2,"deletions":20,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- * @run driver compiler.c2.irTests.TestMulBy2\n+ * @run driver compiler.c2.irTests.TestMulNodeIdealization\n@@ -37,1 +37,1 @@\n-public class TestMulBy2 {\n+public class TestMulNodeIdealization {\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestMulNodeIdealization.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestMulBy2.java","status":"renamed"},{"patch":"@@ -1,61 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.bench.vm.compiler;\n-\n-import org.openjdk.jmh.annotations.*;\n-import org.openjdk.jmh.infra.Blackhole;\n-\n-import java.util.concurrent.TimeUnit;\n-\n-@BenchmarkMode(Mode.AverageTime)\n-@OutputTimeUnit(TimeUnit.NANOSECONDS)\n-@Measurement(iterations = 5, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n-@Warmup(iterations = 5, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n-@Fork(3)\n-public class MulBy2 {\n-    @Benchmark\n-    public void testMul2Float(Blackhole blackhole, BenchState state) {\n-        blackhole.consume(state.f * 2);\n-    }\n-\n-    @Benchmark\n-    public void testMul2Double(Blackhole blackhole, BenchState state) {\n-        blackhole.consume(state.d * 2);\n-    }\n-\n-\n-    @State(Scope.Benchmark)\n-    public static class BenchState {\n-        private float f;\n-        private double d;\n-\n-        public BenchState() {\n-        }\n-\n-        @Setup\n-        public void setup() {\n-            f = (float) Math.random();\n-            d = Math.random();\n-        }\n-    }\n-}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/MulBy2.java","additions":0,"deletions":61,"binary":false,"changes":61,"status":"deleted"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Measurement(iterations = 5, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n+@Warmup(iterations = 5, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n+@Fork(3)\n+public class MulNodeIdealize {\n+    private static final int SIZE = 50;\n+\n+    @Benchmark\n+    public void testMul2Float(Blackhole blackhole) {\n+        for (float i = 0; i < SIZE; i++) {\n+            blackhole.consume(i * 2);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void testMul2Double(Blackhole blackhole) {\n+        for (double i = 0; i < SIZE; i++) {\n+            blackhole.consume(i * 2);\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/MulNodeIdealize.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"}]}