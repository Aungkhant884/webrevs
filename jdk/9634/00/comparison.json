{"files":[{"patch":"@@ -172,17 +172,15 @@\n-DumpTimeClassInfo* DumpTimeSharedClassTable::find_or_allocate_info_for(InstanceKlass* k, bool dump_in_progress) {\n-  bool created = false;\n-  DumpTimeClassInfo* p;\n-  if (!dump_in_progress) {\n-    p = put_if_absent(k, &created);\n-  } else {\n-    p = get(k);\n-  }\n-  if (created) {\n-    assert(!SystemDictionaryShared::no_class_loading_should_happen(),\n-           \"no new classes can be loaded while dumping archive\");\n-    p->_klass = k;\n-  } else {\n-    if (!dump_in_progress) {\n-      assert(p->_klass == k, \"Sanity\");\n-    }\n-  }\n+DumpTimeClassInfo* DumpTimeSharedClassTable::allocate_info(InstanceKlass* k) {\n+  assert(!k->is_shared(), \"Do not call with shared classes\");\n+  bool created;\n+  DumpTimeClassInfo* p = put_if_absent(k, &created);\n+  assert(created, \"must not exist in table\");\n+  p->_klass = k;\n+  return p;\n+}\n+\n+DumpTimeClassInfo* DumpTimeSharedClassTable::get_info(InstanceKlass* k) {\n+  assert(!k->is_shared(), \"Do not call with shared classes\");\n+  DumpTimeClassInfo* p = get(k);\n+  assert(p != NULL, \"we must not see any non-shared InstanceKlass* that's \"\n+         \"not stored with SystemDictionaryShared::init_dumptime_info\");\n+  assert(p->_klass == k, \"Sanity\");\n","filename":"src\/hotspot\/share\/cds\/dumpTimeClassInfo.cpp","additions":15,"deletions":17,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -199,1 +199,2 @@\n-  DumpTimeClassInfo* find_or_allocate_info_for(InstanceKlass* k, bool dump_in_progress);\n+  DumpTimeClassInfo* allocate_info(InstanceKlass* k);\n+  DumpTimeClassInfo* get_info(InstanceKlass* k);\n","filename":"src\/hotspot\/share\/cds\/dumpTimeClassInfo.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -109,2 +109,0 @@\n-    SystemDictionaryShared::start_dumping();\n-\n@@ -120,1 +118,0 @@\n-      SystemDictionaryShared::stop_dumping();\n@@ -180,1 +177,0 @@\n-    SystemDictionaryShared::stop_dumping();\n","filename":"src\/hotspot\/share\/cds\/dynamicArchive.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -221,2 +221,3 @@\n-  SystemDictionaryShared::set_excluded(InstanceKlass::cast(klass)); \/\/ exclude the existing class from dump\n-  SystemDictionaryShared::init_dumptime_info(result);\n+  if (!klass->is_shared()) {\n+    SystemDictionaryShared::set_excluded(InstanceKlass::cast(klass)); \/\/ exclude the existing class from dump\n+  }\n","filename":"src\/hotspot\/share\/cds\/lambdaFormInvokers.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1652,0 +1652,4 @@\n+#if INCLUDE_CDS\n+  SystemDictionaryShared::initialize();\n+#endif\n+\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -85,1 +85,0 @@\n-bool SystemDictionaryShared::_dump_in_progress = false;\n@@ -181,1 +180,3 @@\n-void SystemDictionaryShared::start_dumping() {\n+\/\/ Guaranteed to return non-NULL value for non-shared classes.\n+\/\/ k must not be a shared class.\n+DumpTimeClassInfo* SystemDictionaryShared::get_info(InstanceKlass* k) {\n@@ -183,1 +184,1 @@\n-  _dump_in_progress = true;\n+  return get_info_locked(k);\n@@ -186,1 +187,1 @@\n-void SystemDictionaryShared::stop_dumping() {\n+DumpTimeClassInfo* SystemDictionaryShared::get_info_locked(InstanceKlass* k) {\n@@ -188,14 +189,3 @@\n-  _dump_in_progress = false;\n-}\n-\n-DumpTimeClassInfo* SystemDictionaryShared::find_or_allocate_info_for(InstanceKlass* k) {\n-  MutexLocker ml(DumpTimeTable_lock, Mutex::_no_safepoint_check_flag);\n-  return find_or_allocate_info_for_locked(k);\n-}\n-\n-DumpTimeClassInfo* SystemDictionaryShared::find_or_allocate_info_for_locked(InstanceKlass* k) {\n-  assert_lock_strong(DumpTimeTable_lock);\n-  if (_dumptime_table == NULL) {\n-    _dumptime_table = new (ResourceObj::C_HEAP, mtClass) DumpTimeSharedClassTable;\n-  }\n-  return _dumptime_table->find_or_allocate_info_for(k, _dump_in_progress);\n+  DumpTimeClassInfo* info = _dumptime_table->get_info(k);\n+  assert(info != NULL, \"must be\");\n+  return info;\n@@ -504,4 +494,10 @@\n-  DumpTimeClassInfo* info = find_or_allocate_info_for(k);\n-  if (info != NULL) {\n-    info->_clsfile_size  = cfs->length();\n-    info->_clsfile_crc32 = ClassLoader::crc32(0, (const char*)cfs->buffer(), cfs->length());\n+  DumpTimeClassInfo* info = get_info(k);\n+  info->_clsfile_size  = cfs->length();\n+  info->_clsfile_crc32 = ClassLoader::crc32(0, (const char*)cfs->buffer(), cfs->length());\n+}\n+\n+void SystemDictionaryShared::initialize() {\n+  if (Arguments::is_dumping_archive()) {\n+    _dumptime_table = new (ResourceObj::C_HEAP, mtClass) DumpTimeSharedClassTable;\n+    _dumptime_lambda_proxy_class_dictionary =\n+                      new (ResourceObj::C_HEAP, mtClass) DumpTimeLambdaProxyClassDictionary;\n@@ -512,1 +508,4 @@\n-  (void)find_or_allocate_info_for(k);\n+  MutexLocker ml(DumpTimeTable_lock, Mutex::_no_safepoint_check_flag);\n+  assert(!SystemDictionaryShared::no_class_loading_should_happen(),\n+         \"no new classes can be loaded while dumping archive\");\n+  _dumptime_table->allocate_info(k);\n@@ -677,2 +676,2 @@\n-  DumpTimeClassInfo* p = find_or_allocate_info_for_locked(k);\n-  return (p == NULL) ? true : p->is_excluded();\n+  DumpTimeClassInfo* p = get_info_locked(k);\n+  return p->is_excluded();\n@@ -684,4 +683,2 @@\n-  DumpTimeClassInfo* info = find_or_allocate_info_for_locked(k);\n-  if (info != NULL) {\n-    info->set_excluded();\n-  }\n+  DumpTimeClassInfo* info = get_info_locked(k);\n+  info->set_excluded();\n@@ -692,4 +689,2 @@\n-  DumpTimeClassInfo* info = find_or_allocate_info_for(k);\n-  if (info != NULL) {\n-    info->set_excluded();\n-  }\n+  DumpTimeClassInfo* info = get_info(k);\n+  info->set_excluded();\n@@ -700,4 +695,2 @@\n-  DumpTimeClassInfo* p = find_or_allocate_info_for(ik);\n-  if (p != NULL) {\n-    p->set_failed_verification();\n-  }\n+  DumpTimeClassInfo* p = get_info(ik);\n+  p->set_failed_verification();\n@@ -708,5 +701,0 @@\n-  if (_dumptime_table == NULL) {\n-    assert(DynamicDumpSharedSpaces, \"sanity\");\n-    assert(ik->is_shared(), \"must be a shared class in the static archive\");\n-    return false;\n-  }\n@@ -727,9 +715,7 @@\n-  if (_dumptime_lambda_proxy_class_dictionary != NULL) {\n-    auto do_lambda = [&] (LambdaProxyClassKey& key, DumpTimeLambdaProxyClassInfo& info) {\n-      if (key.caller_ik()->is_loader_alive()) {\n-        info.metaspace_pointers_do(it);\n-        key.metaspace_pointers_do(it);\n-      }\n-    };\n-    _dumptime_lambda_proxy_class_dictionary->iterate_all(do_lambda);\n-  }\n+  auto do_lambda = [&] (LambdaProxyClassKey& key, DumpTimeLambdaProxyClassInfo& info) {\n+    if (key.caller_ik()->is_loader_alive()) {\n+      info.metaspace_pointers_do(it);\n+      key.metaspace_pointers_do(it);\n+    }\n+  };\n+  _dumptime_lambda_proxy_class_dictionary->iterate_all(do_lambda);\n@@ -741,7 +727,4 @@\n-  DumpTimeClassInfo* info = find_or_allocate_info_for(k);\n-  if (info != NULL) {\n-    info->add_verification_constraint(k, name, from_name, from_field_is_protected,\n-                                      from_is_array, from_is_object);\n-  } else {\n-    return true;\n-  }\n+  DumpTimeClassInfo* info = get_info(k);\n+  info->add_verification_constraint(k, name, from_name, from_field_is_protected,\n+                                    from_is_array, from_is_object);\n+\n@@ -769,2 +752,1 @@\n-  DumpTimeClassInfo* info = SystemDictionaryShared::find_or_allocate_info_for_locked(ik);\n-  assert(info != NULL, \"must be\");\n+  DumpTimeClassInfo* info = get_info_locked(ik);\n@@ -777,4 +759,1 @@\n-  if (_dumptime_lambda_proxy_class_dictionary == NULL) {\n-    _dumptime_lambda_proxy_class_dictionary =\n-      new (ResourceObj::C_HEAP, mtClass) DumpTimeLambdaProxyClassDictionary;\n-  }\n+\n@@ -1033,4 +1012,2 @@\n-  DumpTimeClassInfo* info = find_or_allocate_info_for(klass);\n-  if (info != NULL) {\n-    info->record_linking_constraint(name, loader1, loader2);\n-  }\n+  DumpTimeClassInfo* info = get_info(klass);\n+  info->record_linking_constraint(name, loader1, loader2);\n@@ -1163,3 +1140,3 @@\n-  if (_dumptime_lambda_proxy_class_dictionary != NULL) {\n-    size_t bytesize = align_up(sizeof(RunTimeLambdaProxyClassInfo), SharedSpaceObjectAlignment);\n-    total_size +=\n+\n+  size_t bytesize = align_up(sizeof(RunTimeLambdaProxyClassInfo), SharedSpaceObjectAlignment);\n+  total_size +=\n@@ -1168,3 +1145,1 @@\n-  } else {\n-    total_size += CompactHashtableWriter::estimate_size(0);\n-  }\n+\n@@ -1303,7 +1278,4 @@\n-  if (_dumptime_table != NULL) {\n-    write_dictionary(&archive->_builtin_dictionary, true);\n-    write_dictionary(&archive->_unregistered_dictionary, false);\n-  }\n-  if (_dumptime_lambda_proxy_class_dictionary != NULL) {\n-    write_lambda_proxy_class_dictionary(&archive->_lambda_proxy_class_dictionary);\n-  }\n+  write_dictionary(&archive->_builtin_dictionary, true);\n+  write_dictionary(&archive->_unregistered_dictionary, false);\n+\n+  write_lambda_proxy_class_dictionary(&archive->_lambda_proxy_class_dictionary);\n@@ -1313,4 +1285,2 @@\n-  if (_dumptime_lambda_proxy_class_dictionary != NULL) {\n-    AdjustLambdaProxyClassInfo adjuster;\n-    _dumptime_lambda_proxy_class_dictionary->iterate(&adjuster);\n-  }\n+  AdjustLambdaProxyClassInfo adjuster;\n+  _dumptime_lambda_proxy_class_dictionary->iterate(&adjuster);\n@@ -1390,1 +1360,1 @@\n-  DumpTimeClassInfo* info = find_or_allocate_info_for(k);\n+  DumpTimeClassInfo* info = get_info(k);\n@@ -1496,3 +1466,0 @@\n-  if (_dumptime_table == NULL) {\n-    return true;\n-  }\n@@ -1548,16 +1515,14 @@\n-  if (_dumptime_table != NULL) {\n-    assert(_cloned_dumptime_table == NULL, \"_cloned_dumptime_table must be cleaned\");\n-    _cloned_dumptime_table = new (ResourceObj::C_HEAP, mtClass) DumpTimeSharedClassTable;\n-    CloneDumpTimeClassTable copy_classes(_dumptime_table, _cloned_dumptime_table);\n-    _dumptime_table->iterate_all_live_classes(&copy_classes);\n-    _cloned_dumptime_table->update_counts();\n-  }\n-  if (_dumptime_lambda_proxy_class_dictionary != NULL) {\n-    assert(_cloned_dumptime_lambda_proxy_class_dictionary == NULL,\n-           \"_cloned_dumptime_lambda_proxy_class_dictionary must be cleaned\");\n-    _cloned_dumptime_lambda_proxy_class_dictionary =\n-                                          new (ResourceObj::C_HEAP, mtClass) DumpTimeLambdaProxyClassDictionary;\n-    CloneDumpTimeLambdaProxyClassTable copy_proxy_classes(_dumptime_lambda_proxy_class_dictionary,\n-                                                          _cloned_dumptime_lambda_proxy_class_dictionary);\n-    _dumptime_lambda_proxy_class_dictionary->iterate(&copy_proxy_classes);\n-  }\n+\n+  assert(_cloned_dumptime_table == NULL, \"_cloned_dumptime_table must be cleaned\");\n+  _cloned_dumptime_table = new (ResourceObj::C_HEAP, mtClass) DumpTimeSharedClassTable;\n+  CloneDumpTimeClassTable copy_classes(_dumptime_table, _cloned_dumptime_table);\n+  _dumptime_table->iterate_all_live_classes(&copy_classes);\n+  _cloned_dumptime_table->update_counts();\n+\n+  assert(_cloned_dumptime_lambda_proxy_class_dictionary == NULL,\n+         \"_cloned_dumptime_lambda_proxy_class_dictionary must be cleaned\");\n+  _cloned_dumptime_lambda_proxy_class_dictionary =\n+                                        new (ResourceObj::C_HEAP, mtClass) DumpTimeLambdaProxyClassDictionary;\n+  CloneDumpTimeLambdaProxyClassTable copy_proxy_classes(_dumptime_lambda_proxy_class_dictionary,\n+                                                        _cloned_dumptime_lambda_proxy_class_dictionary);\n+  _dumptime_lambda_proxy_class_dictionary->iterate(&copy_proxy_classes);\n@@ -1571,0 +1536,1 @@\n+\n@@ -1601,4 +1567,2 @@\n-  if (_dumptime_lambda_proxy_class_dictionary != NULL) {\n-    CleanupDumpTimeLambdaProxyClassTable cleanup_proxy_classes;\n-    _dumptime_lambda_proxy_class_dictionary->unlink(&cleanup_proxy_classes);\n-  }\n+  CleanupDumpTimeLambdaProxyClassTable cleanup_proxy_classes;\n+  _dumptime_lambda_proxy_class_dictionary->unlink(&cleanup_proxy_classes);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":73,"deletions":109,"binary":false,"changes":182,"status":"modified"},{"patch":"@@ -185,2 +185,6 @@\n-  static DumpTimeClassInfo* find_or_allocate_info_for(InstanceKlass* k);\n-  static DumpTimeClassInfo* find_or_allocate_info_for_locked(InstanceKlass* k);\n+\n+  \/\/ Guaranteed to return non-NULL value for non-shared classes.\n+  \/\/ k must not be a shared class.\n+  static DumpTimeClassInfo* get_info(InstanceKlass* k);\n+  static DumpTimeClassInfo* get_info_locked(InstanceKlass* k);\n+\n@@ -198,1 +202,0 @@\n-  static bool _dump_in_progress;\n@@ -228,0 +231,1 @@\n+  static void initialize() NOT_CDS_RETURN;\n@@ -314,2 +318,0 @@\n-  static void start_dumping() NOT_CDS_RETURN;\n-  static void stop_dumping() NOT_CDS_RETURN;\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.hpp","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -125,1 +125,1 @@\n-extern Mutex*   DumpTimeTable_lock;              \/\/ SystemDictionaryShared::find_or_allocate_info_for\n+extern Mutex*   DumpTimeTable_lock;              \/\/ SystemDictionaryShared::_dumptime_table\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}