{"files":[{"patch":"@@ -0,0 +1,152 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.*;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.testng.AssertJUnit.assertEquals;\n+\n+\/**\n+ * @test\n+ * @summary Verifies that a FileSystemProvider's implementation of the exists\n+ * and readAttributesIfExists methods are invoked\n+ * @build TestDelegation TestProvider\n+ * @run testng\/othervm  TestDelegation\n+ *\/\n+public class TestDelegation {\n+\n+    \/\/ Non-existent Path to be used by the test\n+    private Path NON_EXISTENT_FILE;\n+    \/\/ Path to Temp directory used by the test\n+    private Path TEMP_DIRECTORY;\n+    \/\/ Valid file Path used by the test\n+    private Path FILE_THAT_EXISTS;\n+    \/\/ The FileSystemProvider used by the test\n+    private MyProvider PROVIDER;\n+\n+\n+    \/**\n+     * Create the FileSystemProvider, the FileSystem and\n+     * Path's used by the test.\n+     *\n+     * @throws IOException if an error occurs\n+     *\/\n+    @BeforeClass\n+    public void setup() throws IOException {\n+        PROVIDER = new MyProvider();\n+        FileSystem fs = PROVIDER.getFileSystem(URI.create(\"\/\"));\n+        \/\/ Path to Current Working Directory\n+        Path cwd = fs.getPath(\".\");\n+        TEMP_DIRECTORY = Files.createTempDirectory(cwd, \"tmp\");\n+        FILE_THAT_EXISTS = Files.createFile(TEMP_DIRECTORY.resolve(\"file\"));\n+        NON_EXISTENT_FILE = TEMP_DIRECTORY.resolve(\"doesNotExist\");\n+    }\n+\n+    \/**\n+     * DataProvider that is used by the test.  The DataProvider's elements are:\n+     * <UL>\n+     *     <li>Path to validate<\/li>\n+     *     <li>Does the Path Exist<\/li>\n+     *     <li>Is the Path a Directory<\/li>\n+     *     <li>Is the Path a regular file<\/li>\n+     * <\/UL>\n+     * @return The test parameter data\n+     *\/\n+    @DataProvider\n+    private Object[][] testPaths() {\n+        return new Object[][]{\n+                {TEMP_DIRECTORY, true, true, false},\n+                {FILE_THAT_EXISTS, true, false, true},\n+                {NON_EXISTENT_FILE, false, false, false}\n+        };\n+    }\n+\n+    \/**\n+     * Validate that a FileSystemProvider's implementation of exists and\n+     * readAttributesIfExists is delegated to.\n+     *\n+     * @param p      the path to the file to test\n+     * @param exists does the path exist\n+     * @param isDir  is the path a directory\n+     * @param isFile is the path a regular file\n+     *\/\n+    @Test(dataProvider = \"testPaths\")\n+    public void testDelegation(Path p, boolean exists, boolean isDir,\n+                               boolean isFile) {\n+        assertEquals(Files.exists(p), exists);\n+        assertEquals(Files.isDirectory(p), isDir);\n+        assertEquals(Files.isRegularFile(p), isFile);\n+        assertEquals(1, PROVIDER.findCall(\"exists\").size());\n+        assertEquals(2, PROVIDER.findCall(\"readAttributesIfExists\").size());\n+        PROVIDER.resetCalls();\n+    }\n+\n+    \/**\n+     * The FileSystemProvider implementation used by the test\n+     *\/\n+    static class MyProvider extends TestProvider {\n+        private final Map<String, List<Path>> calls = new HashMap<>();\n+\n+        private MyProvider() {\n+            super(FileSystems.getDefault().provider());\n+        }\n+\n+        private void recordCall(String op, Path path) {\n+            calls.computeIfAbsent(op, k -> new ArrayList<>()).add(path);\n+        }\n+\n+        List<Path> findCall(String op) {\n+            return calls.getOrDefault(op, List.of());\n+        }\n+\n+        void resetCalls() {\n+            calls.clear();\n+        }\n+\n+        @Override\n+        public boolean exists(Path path, LinkOption... options) {\n+            recordCall(\"exists\", path);\n+            return super.exists(path, options);\n+        }\n+\n+        @Override\n+        public <A extends BasicFileAttributes> A readAttributesIfExists(Path path,\n+                                                                        Class<A> type,\n+                                                                        LinkOption... options)\n+                throws IOException {\n+            recordCall(\"readAttributesIfExists\", path);\n+            return super.readAttributesIfExists(path, type, options);\n+        }\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/nio\/file\/spi\/TestDelegation.java","additions":152,"deletions":0,"binary":false,"changes":152,"status":"added"},{"patch":"@@ -1,73 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-import org.testng.annotations.Test;\n-\n-import java.io.IOException;\n-import java.nio.file.FileSystems;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.attribute.BasicFileAttributes;\n-\n-import static org.testng.AssertJUnit.assertTrue;\n-\n-\/**\n- * @test\n- * @summary Verifies that a FileSystemProvider's implementation of the exists\n- * and readAttributesIfExists methods are invoked\n- * @build TestOverRideFSPMethods TestProvider\n- * @run testng\/othervm -Djava.nio.file.spi.DefaultFileSystemProvider=TestProvider TestOverRideFSPMethods\n- *\/\n-public class TestOverRideFSPMethods {\n-\n-    \/\/ Non-existent Path to be used by the tests\n-    static final Path STUB_PATH = Path.of(\"fileThatDoesNotExist.txt\");\n-\n-    \/**\n-     * Validate that the Provider's version of exists() is invoked\n-     * The TestProvider will always return true\n-     *\/\n-    @Test\n-    public void TestExists() {\n-        var fsp = FileSystems.getDefault().provider();\n-        assertTrue(fsp.exists(STUB_PATH));\n-        \/\/ Now check via Files::exists\n-        assertTrue(Files.exists(STUB_PATH));\n-    }\n-\n-    \/**\n-     * Validate that the Provider's version of readAttributesIfExists() is invoked.\n-     *\n-     * The TestProvider will return an instance of\n-     * TestProvider.TestAttributes when readAttributesIfExists()\n-     * is called\n-     * @throws IOException if an error occurs\n-     *\/\n-    @Test\n-    public void TestReadAttributesIfExists() throws IOException {\n-        var fsp = FileSystems.getDefault().provider();\n-        var attrs = fsp.readAttributesIfExists(STUB_PATH,\n-                BasicFileAttributes.class);\n-        \/\/ This should always be true if the StubFSProvider is used\n-        assertTrue(attrs instanceof TestProvider.TestAttributes);\n-    }\n-}\n","filename":"test\/jdk\/java\/nio\/file\/spi\/TestOverRideFSPMethods.java","additions":0,"deletions":73,"binary":false,"changes":73,"status":"deleted"},{"patch":"@@ -26,1 +26,4 @@\n-import java.nio.file.attribute.*;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.nio.file.attribute.FileAttribute;\n+import java.nio.file.attribute.FileAttributeView;\n+import java.nio.file.attribute.UserPrincipalLookupService;\n@@ -47,4 +50,0 @@\n-    FileSystemProvider defaultProvider() {\n-        return defaultProvider;\n-    }\n-\n@@ -98,6 +97,1 @@\n-    public <A extends BasicFileAttributes> A readAttributesIfExists(Path path,\n-                                                                    Class<A> type,\n-                                                                    LinkOption... options)\n-            throws IOException {\n-        return (A) new TestAttributes();\n-    }\n+\n@@ -167,6 +161,1 @@\n-    @Override\n-    public boolean exists(Path path, LinkOption... options) {\n-        var fs = path.getFileSystem();\n-        return ((fs instanceof TestFileSystem)\n-                && (fs.provider() instanceof TestProvider));\n-    }\n+\n@@ -212,1 +201,2 @@\n-        throw new RuntimeException(\"not implemented\");\n+        Path delegate = theFileSystem.unwrap(file);\n+        defaultProvider.checkAccess(delegate, modes);\n@@ -478,31 +468,0 @@\n-    static class TestAttributes implements BasicFileAttributes {\n-\n-        @Override\n-        public FileTime lastModifiedTime() {\n-            return null;\n-        }\n-\n-        @Override\n-        public FileTime lastAccessTime() {\n-            return null;\n-        }\n-\n-        @Override\n-        public FileTime creationTime() {\n-            return null;\n-        }\n-\n-        @Override\n-        public boolean isRegularFile() {\n-            return false;\n-        }\n-\n-        @Override\n-        public boolean isDirectory() {\n-            return false;\n-        }\n-\n-        @Override\n-        public boolean isSymbolicLink() {\n-            return false;\n-        }\n@@ -510,15 +469,0 @@\n-        @Override\n-        public boolean isOther() {\n-            return false;\n-        }\n-\n-        @Override\n-        public long size() {\n-            return 0;\n-        }\n-\n-        @Override\n-        public Object fileKey() {\n-            return null;\n-        }\n-    }\n","filename":"test\/jdk\/java\/nio\/file\/spi\/TestProvider.java","additions":8,"deletions":64,"binary":false,"changes":72,"status":"modified"}]}