{"files":[{"patch":"@@ -76,1 +76,2 @@\n-     * DataProvider that is used by the test.  The DataProvider's elements are:\n+     * DataProvider that is used to test Files::exists. The DataProvider's\n+     * elements are:\n@@ -80,0 +81,17 @@\n+     * <\/UL>\n+     * @return The test parameter data\n+     *\/\n+    @DataProvider\n+    private Object[][] testExists() {\n+        return new Object[][]{\n+                {TEMP_DIRECTORY, true},\n+                {FILE_THAT_EXISTS, true},\n+                {NON_EXISTENT_FILE, false}\n+        };\n+    }\n+\n+    \/**\n+     * DataProvider that is used to test Files::isDirectory. The DataProvider's\n+     * elements are:\n+     * <UL>\n+     *     <li>Path to validate<\/li>\n@@ -81,0 +99,16 @@\n+     * <\/UL>\n+     * @return The test parameter data\n+     *\/\n+    @DataProvider\n+    private Object[][] testIsDirectory() {\n+        return new Object[][]{\n+                {TEMP_DIRECTORY, true},\n+                {FILE_THAT_EXISTS, false},\n+                {NON_EXISTENT_FILE, false}\n+        };\n+    }\n+    \/**\n+     * DataProvider that is used to test Files::isRegularFile. The DataProvider's\n+     * elements are:\n+     * <UL>\n+     *     <li>Path to validate<\/li>\n@@ -86,1 +120,1 @@\n-    private Object[][] testPaths() {\n+    private Object[][] testIsRegularFile() {\n@@ -88,3 +122,3 @@\n-                {TEMP_DIRECTORY, true, true, false},\n-                {FILE_THAT_EXISTS, true, false, true},\n-                {NON_EXISTENT_FILE, false, false, false}\n+                {TEMP_DIRECTORY, false},\n+                {FILE_THAT_EXISTS, true},\n+                {NON_EXISTENT_FILE, false}\n@@ -95,2 +129,2 @@\n-     * Validate that a FileSystemProvider's implementation of exists and\n-     * readAttributesIfExists is delegated to.\n+     * Validate that Files::exists delegates to the FileSystemProvider's\n+     * implementation of exists.\n@@ -100,2 +134,0 @@\n-     * @param isDir  is the path a directory\n-     * @param isFile is the path a regular file\n@@ -103,3 +135,2 @@\n-    @Test(dataProvider = \"testPaths\")\n-    public void testDelegation(Path p, boolean exists, boolean isDir,\n-                               boolean isFile) {\n+    @Test(dataProvider = \"testExists\")\n+    public void testExists(Path p, boolean exists) {\n@@ -107,0 +138,15 @@\n+        \/\/ We should only have called exists once\n+        assertEquals(1, PROVIDER.findCall(\"exists\").size());\n+        assertEquals(0, PROVIDER.findCall(\"readAttributesIfExists\").size());\n+        PROVIDER.resetCalls();\n+    }\n+\n+    \/**\n+     * Validate that Files::isDirectory delegates to the FileSystemProvider's\n+     * implementation readAttributesIfExists.\n+     *\n+     * @param p      the path to the file to test\n+     * @param isDir  is the path a directory\n+     *\/\n+    @Test(dataProvider = \"testIsDirectory\")\n+    public void testIsDirectory(Path p, boolean isDir) {\n@@ -108,0 +154,15 @@\n+        \/\/ We should only have called readAttributesIfExists once\n+        assertEquals(0, PROVIDER.findCall(\"exists\").size());\n+        assertEquals(1, PROVIDER.findCall(\"readAttributesIfExists\").size());\n+        PROVIDER.resetCalls();\n+    }\n+\n+    \/**\n+     * Validate that Files::isRegularFile delegates to the FileSystemProvider's\n+     * implementation readAttributesIfExists.\n+     *\n+     * @param p      the path to the file to test\n+     * @param isFile is the path a regular file\n+     *\/\n+    @Test(dataProvider = \"testIsRegularFile\")\n+    public void testIsRegularFile(Path p, boolean isFile) {\n@@ -109,2 +170,3 @@\n-        assertEquals(1, PROVIDER.findCall(\"exists\").size());\n-        assertEquals(2, PROVIDER.findCall(\"readAttributesIfExists\").size());\n+        \/\/ We should only have called readAttributesIfExists once\n+        assertEquals(0, PROVIDER.findCall(\"exists\").size());\n+        assertEquals(1, PROVIDER.findCall(\"readAttributesIfExists\").size());\n","filename":"test\/jdk\/java\/nio\/file\/spi\/TestDelegation.java","additions":76,"deletions":14,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -0,0 +1,133 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.jdk.nio.zipfs;\n+\n+import  org.openjdk.jmh.annotations.*;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.*;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n+\n+\/**\n+ * Simple benchmark measuring cost of Files::exist, Files::isDirectory and\n+ * Files::isRegularFile with ZipFileSystem.\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 5, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n+@Fork(3)\n+public class ZipfileSystemProviderDelegation {\n+\n+    public static final String ZIP_FILE = \"zipfsprovider-delegation-benchmark.zip\";\n+    public static final String NON_EXISTENT_SUFFIX = \"-nope\";\n+    @Param({\"256\", \"512\"})\n+    private int entriesToTest;\n+    public String[] entries;\n+    private FileSystem zipfs;\n+\n+    private int index = 0;\n+\n+    @Setup\n+    public void setup() throws IOException {\n+        Path zip = Paths.get(ZIP_FILE);\n+        Files.deleteIfExists(zip);\n+        Random random = new Random(4711);\n+        entries = new String[entriesToTest];\n+        URI zipURI = URI.create(\"jar:file:\"+ zip.toAbsolutePath().toString());\n+        Map<String, String> env = new HashMap<>();\n+        env.put(\"create\", \"true\");\n+        zipfs = FileSystems.newFileSystem(zipURI, env);\n+            for (int i = 0; i < entriesToTest; i++) {\n+                Path dir = zipfs.getPath(\"dir-\" + (random.nextInt(90000) + 10000)\n+                        + \"-\" + i);\n+                Files.createDirectory(dir);\n+                Path entry = dir.resolve(\"entry-\" +\n+                        (random.nextInt(90000) + 10000)\n+                        + \"-\" + i);\n+                Files.write(entry, \"\".getBytes(StandardCharsets.UTF_8));\n+                entries[i] = entry.toString();\n+            }\n+    }\n+\n+    @TearDown\n+    public void cleanup() throws IOException {\n+        zipfs.close();\n+        Files.deleteIfExists(Paths.get(ZIP_FILE));\n+    }\n+    \n+    @Benchmark\n+    public void existsWithEntry() {\n+        if (index >= entriesToTest) {\n+            index = 0;\n+        }\n+        Files.exists(zipfs.getPath(entries[index++]));\n+    }\n+\n+    @Benchmark\n+    public void existsWithNonExistingEntry() {\n+        if (index >= entriesToTest) {\n+            index = 0;\n+        }\n+        Files.exists(zipfs.getPath(entries[index++] + NON_EXISTENT_SUFFIX));\n+    }\n+\n+    @Benchmark\n+    public void isDirectoryWithEntry() {\n+        if (index >= entriesToTest) {\n+            index = 0;\n+        }\n+        Files.isDirectory(zipfs.getPath(entries[index++]));\n+    }\n+\n+    @Benchmark\n+    public void isDirectoryWithNonExistingEntry() {\n+        if (index >= entriesToTest) {\n+            index = 0;\n+        }\n+        Files.isDirectory(zipfs.getPath(entries[index++] + NON_EXISTENT_SUFFIX));\n+    }\n+\n+    @Benchmark\n+    public void isRegularFileWithEntry() {\n+        if (index >= entriesToTest) {\n+            index = 0;\n+        }\n+        Files.isRegularFile(zipfs.getPath(entries[index++]));\n+    }\n+\n+    @Benchmark\n+    public void isRegularFileWithNonExistingEntry() {\n+        if (index >= entriesToTest) {\n+            index = 0;\n+        }\n+        Files.isRegularFile(zipfs.getPath(entries[index++] + NON_EXISTENT_SUFFIX));\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/nio\/zipfs\/ZipfileSystemProviderDelegation.java","additions":133,"deletions":0,"binary":false,"changes":133,"status":"added"}]}