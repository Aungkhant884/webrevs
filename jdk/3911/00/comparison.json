{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -161,0 +161,4 @@\n+        if (throwable.getClass().getName().equals(\"jtreg.SkippedException\")) {\n+            throw (RuntimeException)throwable;\n+        }\n+\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/Functional.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-import jdk.jpackage.test.TKit;\n+import jdk.jpackage.test.Annotations.Test;\n@@ -52,1 +52,2 @@\n- * @run main\/othervm\/timeout=360 -Xmx512m AppCategoryTest\n+ * @run main\/othervm\/timeout=360 -Xmx512m jdk.jpackage.test.Main\n+ *  --jpt-run=AppCategoryTest\n@@ -56,1 +57,2 @@\n-    public static void main(String[] args) {\n+    @Test\n+    public static void test() {\n@@ -59,13 +61,11 @@\n-        TKit.run(args, () -> {\n-            new PackageTest()\n-            .forTypes(PackageType.LINUX)\n-            .configureHelloApp()\n-            .addInitializer(cmd -> {\n-                cmd.addArguments(\"--linux-app-category\", CATEGORY);\n-            })\n-            .forTypes(PackageType.LINUX_DEB)\n-            .addBundlePropertyVerifier(\"Section\", CATEGORY)\n-            .forTypes(PackageType.LINUX_RPM)\n-            .addBundlePropertyVerifier(\"Group\", CATEGORY)\n-            .run();\n-        });\n+        new PackageTest()\n+                .forTypes(PackageType.LINUX)\n+                .configureHelloApp()\n+                .addInitializer(cmd -> {\n+                    cmd.addArguments(\"--linux-app-category\", CATEGORY);\n+                })\n+                .forTypes(PackageType.LINUX_DEB)\n+                .addBundlePropertyVerifier(\"Section\", CATEGORY)\n+                .forTypes(PackageType.LINUX_RPM)\n+                .addBundlePropertyVerifier(\"Group\", CATEGORY)\n+                .run();\n","filename":"test\/jdk\/tools\/jpackage\/linux\/AppCategoryTest.java","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-import jdk.jpackage.test.TKit;\n+import jdk.jpackage.test.Annotations.Test;\n@@ -47,1 +47,2 @@\n- * @run main\/othervm\/timeout=360 -Xmx512m LicenseTypeTest\n+ * @run main\/othervm\/timeout=360 -Xmx512m jdk.jpackage.test.Main\n+ *  --jpt-run=LicenseTypeTest\n@@ -51,1 +52,2 @@\n-    public static void main(String[] args) {\n+    @Test\n+    public static void test() {\n@@ -54,8 +56,6 @@\n-        TKit.run(args, () -> {\n-            new PackageTest().forTypes(PackageType.LINUX_RPM).configureHelloApp()\n-            .addInitializer(cmd -> {\n-                cmd.addArguments(\"--linux-rpm-license-type\", LICENSE_TYPE);\n-            })\n-            .addBundlePropertyVerifier(\"License\", LICENSE_TYPE)\n-            .run();\n-        });\n+        new PackageTest().forTypes(PackageType.LINUX_RPM).configureHelloApp()\n+                .addInitializer(cmd -> {\n+                    cmd.addArguments(\"--linux-rpm-license-type\", LICENSE_TYPE);\n+                })\n+                .addBundlePropertyVerifier(\"License\", LICENSE_TYPE)\n+                .run();\n","filename":"test\/jdk\/tools\/jpackage\/linux\/LicenseTypeTest.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-import jdk.jpackage.test.TKit;\n+import jdk.jpackage.test.Annotations.Test;\n@@ -52,1 +52,2 @@\n- * @run main\/othervm\/timeout=360 -Xmx512m LinuxBundleNameTest\n+ * @run main\/othervm\/timeout=360 -Xmx512m jdk.jpackage.test.Main\n+ *  --jpt-run=LinuxBundleNameTest\n@@ -56,1 +57,2 @@\n-    public static void main(String[] args) {\n+    @Test\n+    public static void test() {\n@@ -59,13 +61,11 @@\n-        TKit.run(args, () -> {\n-            new PackageTest()\n-            .forTypes(PackageType.LINUX)\n-            .configureHelloApp()\n-            .addInitializer(cmd -> {\n-                cmd.addArguments(\"--linux-package-name\", PACKAGE_NAME);\n-            })\n-            .forTypes(PackageType.LINUX_DEB)\n-            .addBundlePropertyVerifier(\"Package\", PACKAGE_NAME)\n-            .forTypes(PackageType.LINUX_RPM)\n-            .addBundlePropertyVerifier(\"Name\", PACKAGE_NAME)\n-            .run();\n-        });\n+        new PackageTest()\n+                .forTypes(PackageType.LINUX)\n+                .configureHelloApp()\n+                .addInitializer(cmd -> {\n+                    cmd.addArguments(\"--linux-package-name\", PACKAGE_NAME);\n+                })\n+                .forTypes(PackageType.LINUX_DEB)\n+                .addBundlePropertyVerifier(\"Package\", PACKAGE_NAME)\n+                .forTypes(PackageType.LINUX_RPM)\n+                .addBundlePropertyVerifier(\"Name\", PACKAGE_NAME)\n+                .run();\n","filename":"test\/jdk\/tools\/jpackage\/linux\/LinuxBundleNameTest.java","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-import jdk.jpackage.test.TKit;\n+import jdk.jpackage.test.Annotations.Test;\n@@ -48,1 +48,2 @@\n- * @run main\/othervm\/timeout=360 -Xmx512m MaintainerTest\n+ * @run main\/othervm\/timeout=360 -Xmx512m jdk.jpackage.test.Main\n+ *  --jpt-run=MaintainerTest\n@@ -52,1 +53,2 @@\n-    public static void main(String[] args) {\n+    @Test\n+    public static void test() {\n@@ -55,11 +57,9 @@\n-        TKit.run(args, () -> {\n-            new PackageTest().forTypes(PackageType.LINUX_DEB).configureHelloApp()\n-            .addInitializer(cmd -> {\n-                cmd.addArguments(\"--linux-deb-maintainer\", MAINTAINER);\n-            })\n-            .addBundlePropertyVerifier(\"Maintainer\", value -> {\n-                String lookupValue = \"<\" + MAINTAINER + \">\";\n-                return value.endsWith(lookupValue);\n-            }, \"ends with\")\n-            .run();\n-        });\n+        new PackageTest().forTypes(PackageType.LINUX_DEB).configureHelloApp()\n+                .addInitializer(cmd -> {\n+                    cmd.addArguments(\"--linux-deb-maintainer\", MAINTAINER);\n+                })\n+                .addBundlePropertyVerifier(\"Maintainer\", value -> {\n+                    String lookupValue = \"<\" + MAINTAINER + \">\";\n+                    return value.endsWith(lookupValue);\n+                }, \"ends with\")\n+                .run();\n","filename":"test\/jdk\/tools\/jpackage\/linux\/MaintainerTest.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-import jdk.jpackage.test.TKit;\n+import jdk.jpackage.test.Annotations.Test;\n@@ -51,1 +51,2 @@\n- * @run main\/othervm\/timeout=360 -Xmx512m ReleaseTest\n+ * @run main\/othervm\/timeout=360 -Xmx512m jdk.jpackage.test.Main\n+ *  --jpt-run=ReleaseTest\n@@ -55,1 +56,2 @@\n-    public static void main(String[] args) {\n+    @Test\n+    public static void test() {\n@@ -58,15 +60,13 @@\n-        TKit.run(args, () -> {\n-            new PackageTest()\n-            .forTypes(PackageType.LINUX)\n-            .configureHelloApp()\n-            .addInitializer(cmd -> {\n-                cmd.addArguments(\"--linux-app-release\", RELEASE);\n-            })\n-            .forTypes(PackageType.LINUX_RPM)\n-            .addBundlePropertyVerifier(\"Release\", RELEASE)\n-            .forTypes(PackageType.LINUX_DEB)\n-            .addBundlePropertyVerifier(\"Version\", propValue -> {\n-                return propValue.endsWith(\"-\" + RELEASE);\n-            }, \"ends with\")\n-            .run();\n-        });\n+        new PackageTest()\n+                .forTypes(PackageType.LINUX)\n+                .configureHelloApp()\n+                .addInitializer(cmd -> {\n+                    cmd.addArguments(\"--linux-app-release\", RELEASE);\n+                })\n+                .forTypes(PackageType.LINUX_RPM)\n+                .addBundlePropertyVerifier(\"Release\", RELEASE)\n+                .forTypes(PackageType.LINUX_DEB)\n+                .addBundlePropertyVerifier(\"Version\", propValue -> {\n+                    return propValue.endsWith(\"-\" + RELEASE);\n+                }, \"ends with\")\n+                .run();\n","filename":"test\/jdk\/tools\/jpackage\/linux\/ReleaseTest.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+import jdk.jpackage.test.Annotations.Test;\n@@ -47,1 +48,2 @@\n- * @run main\/othervm -Xmx512m MacFileAssociationsTest\n+ * @run main\/othervm -Xmx512m jdk.jpackage.test.Main\n+ *  --jpt-run=MacFileAssociationsTest\n@@ -51,16 +53,16 @@\n-    public static void main(String[] args) throws Exception {\n-        TKit.run(args, () -> {\n-            final Path propFile = TKit.workDir().resolve(\"fa.properties\");\n-            Map<String,String> map = Map.ofEntries(\n-                    entry(\"mime-type\", \"application\/x-jpackage-foo\"),\n-                    entry(\"extension\", \"foo\"),\n-                    entry(\"description\", \"bar\"),\n-                    entry(\"mac.CFBundleTypeRole\", \"Viewer\"),\n-                    entry(\"mac.LSHandlerRank\", \"Default\"),\n-                    entry(\"mac.NSDocumentClass\", \"SomeClass\"),\n-                    entry(\"mac.LSTypeIsPackage\", \"true\"),\n-                    entry(\"mac.LSSupportsOpeningDocumentsInPlace\", \"false\"),\n-                    entry(\"mac.UISupportsDocumentBrowser\", \"false\"),\n-                    entry(\"mac.NSExportableTypes\", \"public.png, public.jpg\"),\n-                    entry(\"mac.UTTypeConformsTo\", \"public.image, public.data\"));\n-            TKit.createPropertiesFile(propFile, map);\n+    @Test\n+    public static void test() throws Exception {\n+        final Path propFile = TKit.workDir().resolve(\"fa.properties\");\n+        Map<String, String> map = Map.ofEntries(\n+                entry(\"mime-type\", \"application\/x-jpackage-foo\"),\n+                entry(\"extension\", \"foo\"),\n+                entry(\"description\", \"bar\"),\n+                entry(\"mac.CFBundleTypeRole\", \"Viewer\"),\n+                entry(\"mac.LSHandlerRank\", \"Default\"),\n+                entry(\"mac.NSDocumentClass\", \"SomeClass\"),\n+                entry(\"mac.LSTypeIsPackage\", \"true\"),\n+                entry(\"mac.LSSupportsOpeningDocumentsInPlace\", \"false\"),\n+                entry(\"mac.UISupportsDocumentBrowser\", \"false\"),\n+                entry(\"mac.NSExportableTypes\", \"public.png, public.jpg\"),\n+                entry(\"mac.UTTypeConformsTo\", \"public.image, public.data\"));\n+        TKit.createPropertiesFile(propFile, map);\n@@ -68,3 +70,3 @@\n-            JPackageCommand cmd = JPackageCommand.helloAppImage();\n-            cmd.addArguments(\"--file-associations\", propFile);\n-            cmd.executeAndAssertHelloAppImageCreated();\n+        JPackageCommand cmd = JPackageCommand.helloAppImage();\n+        cmd.addArguments(\"--file-associations\", propFile);\n+        cmd.executeAndAssertHelloAppImageCreated();\n@@ -72,3 +74,2 @@\n-            Path appImage = cmd.outputBundle();\n-            verifyPList(appImage);\n-        });\n+        Path appImage = cmd.outputBundle();\n+        verifyPList(appImage);\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/MacFileAssociationsTest.java","additions":25,"deletions":24,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-import jdk.jpackage.test.TKit;\n+import jdk.jpackage.test.Annotations.Test;\n@@ -55,1 +55,2 @@\n- * @run main\/othervm -Xmx512m SigningAppImageTest\n+ * @run main\/othervm -Xmx512m jdk.jpackage.test.Main\n+ *  --jpt-run=SigningAppImageTest\n@@ -59,3 +60,3 @@\n-    public static void main(String[] args) throws Exception {\n-        TKit.run(args, () -> {\n-            SigningCheck.checkCertificates();\n+    @Test\n+    public static void test() throws Exception {\n+        SigningCheck.checkCertificates();\n@@ -63,5 +64,5 @@\n-            JPackageCommand cmd = JPackageCommand.helloAppImage();\n-            cmd.addArguments(\"--mac-sign\", \"--mac-signing-key-user-name\",\n-                    SigningBase.DEV_NAME, \"--mac-signing-keychain\",\n-                    SigningBase.KEYCHAIN);\n-            cmd.executeAndAssertHelloAppImageCreated();\n+        JPackageCommand cmd = JPackageCommand.helloAppImage();\n+        cmd.addArguments(\"--mac-sign\", \"--mac-signing-key-user-name\",\n+                SigningBase.DEV_NAME, \"--mac-signing-keychain\",\n+                SigningBase.KEYCHAIN);\n+        cmd.executeAndAssertHelloAppImageCreated();\n@@ -69,2 +70,2 @@\n-            Path launcherPath = cmd.appLauncherPath();\n-            SigningBase.verifyCodesign(launcherPath, true);\n+        Path launcherPath = cmd.appLauncherPath();\n+        SigningBase.verifyCodesign(launcherPath, true);\n@@ -72,4 +73,3 @@\n-            Path appImage = cmd.outputBundle();\n-            SigningBase.verifyCodesign(appImage, true);\n-            SigningBase.verifySpctl(appImage, \"exec\");\n-        });\n+        Path appImage = cmd.outputBundle();\n+        SigningBase.verifyCodesign(appImage, true);\n+        SigningBase.verifySpctl(appImage, \"exec\");\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningAppImageTest.java","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n-import jdk.jpackage.test.TKit;\n+import jdk.jpackage.test.Annotations.Test;\n@@ -60,1 +60,2 @@\n- * @run main\/othervm -Xmx512m SigningPackageTest\n+ * @run main\/othervm\/timeout=360 -Xmx512m jdk.jpackage.test.Main\n+ *  --jpt-run=SigningPackageTest\n@@ -84,3 +85,3 @@\n-    public static void main(String[] args) throws Exception {\n-        TKit.run(args, () -> {\n-            SigningCheck.checkCertificates();\n+    @Test\n+    public static void test() throws Exception {\n+        SigningCheck.checkCertificates();\n@@ -88,15 +89,14 @@\n-            new PackageTest()\n-                    .configureHelloApp()\n-                    .forTypes(PackageType.MAC)\n-                    .addInitializer(cmd -> {\n-                        cmd.addArguments(\"--mac-sign\",\n-                                \"--mac-signing-key-user-name\", SigningBase.DEV_NAME,\n-                                \"--mac-signing-keychain\", SigningBase.KEYCHAIN);\n-                    })\n-                    .forTypes(PackageType.MAC_PKG)\n-                    .addBundleVerifier(SigningPackageTest::verifyPKG)\n-                    .forTypes(PackageType.MAC_DMG)\n-                    .addBundleVerifier(SigningPackageTest::verifyDMG)\n-                    .addBundleVerifier(SigningPackageTest::verifyAppImageInDMG)\n-                    .run();\n-        });\n+        new PackageTest()\n+                .configureHelloApp()\n+                .forTypes(PackageType.MAC)\n+                .addInitializer(cmd -> {\n+                    cmd.addArguments(\"--mac-sign\",\n+                            \"--mac-signing-key-user-name\", SigningBase.DEV_NAME,\n+                            \"--mac-signing-keychain\", SigningBase.KEYCHAIN);\n+                })\n+                .forTypes(PackageType.MAC_PKG)\n+                .addBundleVerifier(SigningPackageTest::verifyPKG)\n+                .forTypes(PackageType.MAC_DMG)\n+                .addBundleVerifier(SigningPackageTest::verifyDMG)\n+                .addBundleVerifier(SigningPackageTest::verifyAppImageInDMG)\n+                .run();\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningPackageTest.java","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n-import jdk.jpackage.test.TKit;\n+import jdk.jpackage.test.Annotations.Test;\n@@ -44,1 +44,2 @@\n- * @run main\/othervm\/timeout=720 -Xmx512m EmptyFolderPackageTest\n+ * @run main\/othervm\/timeout=720 -Xmx512m jdk.jpackage.test.Main\n+ *  --jpt-run=EmptyFolderPackageTest\n@@ -48,13 +49,12 @@\n-    public static void main(String[] args) throws Exception {\n-        TKit.run(args, () -> {\n-            new PackageTest().configureHelloApp()\n-                    .addInitializer(cmd -> {\n-                        Path input = cmd.inputDir();\n-                        EmptyFolderBase.createDirStrcture(input);\n-                    })\n-                    .addInstallVerifier(cmd -> {\n-                        if (cmd.packageType() == PackageType.WIN_MSI) {\n-                            if (cmd.isPackageUnpacked(\"Not running file \"\n-                                    + \"structure check for empty folders\")) {\n-                                return;\n-                            }\n+    @Test\n+    public static void test() throws Exception {\n+        new PackageTest().configureHelloApp()\n+                .addInitializer(cmd -> {\n+                    Path input = cmd.inputDir();\n+                    EmptyFolderBase.createDirStrcture(input);\n+                })\n+                .addInstallVerifier(cmd -> {\n+                    if (cmd.packageType() == PackageType.WIN_MSI) {\n+                        if (cmd.isPackageUnpacked(\"Not running file \"\n+                                + \"structure check for empty folders\")) {\n+                            return;\n@@ -62,0 +62,1 @@\n+                    }\n@@ -63,6 +64,5 @@\n-                        ApplicationLayout appLayout = cmd.appLayout();\n-                        Path appDir = appLayout.appDirectory();\n-                        EmptyFolderBase.validateDirStrcture(appDir);\n-                    })\n-                    .run();\n-        });\n+                    ApplicationLayout appLayout = cmd.appLayout();\n+                    Path appDir = appLayout.appDirectory();\n+                    EmptyFolderBase.validateDirStrcture(appDir);\n+                })\n+                .run();\n","filename":"test\/jdk\/tools\/jpackage\/share\/EmptyFolderPackageTest.java","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-import jdk.jpackage.test.TKit;\n+import jdk.jpackage.test.Annotations.Test;\n@@ -42,1 +42,2 @@\n- * @run main\/othervm -Xmx512m EmptyFolderTest\n+ * @run main\/othervm -Xmx512m jdk.jpackage.test.Main\n+ *  --jpt-run=EmptyFolderTest\n@@ -46,3 +47,3 @@\n-    public static void main(String[] args) throws Exception {\n-        TKit.run(args, () -> {\n-            JPackageCommand cmd = JPackageCommand.helloAppImage();\n+    @Test\n+    public static void test() throws Exception {\n+        JPackageCommand cmd = JPackageCommand.helloAppImage();\n@@ -50,3 +51,3 @@\n-            \/\/ Add more files into input folder\n-            Path input = cmd.inputDir();\n-            EmptyFolderBase.createDirStrcture(input);\n+        \/\/ Add more files into input folder\n+        Path input = cmd.inputDir();\n+        EmptyFolderBase.createDirStrcture(input);\n@@ -54,2 +55,2 @@\n-            \/\/ Create app image\n-            cmd.executeAndAssertHelloAppImageCreated();\n+        \/\/ Create app image\n+        cmd.executeAndAssertHelloAppImageCreated();\n@@ -57,5 +58,4 @@\n-            \/\/ Verify directory strcture\n-            ApplicationLayout appLayout = cmd.appLayout();\n-            Path appDir = appLayout.appDirectory();\n-            EmptyFolderBase.validateDirStrcture(appDir);\n-        });\n+        \/\/ Verify directory strcture\n+        ApplicationLayout appLayout = cmd.appLayout();\n+        Path appDir = appLayout.appDirectory();\n+        EmptyFolderBase.validateDirStrcture(appDir);\n","filename":"test\/jdk\/tools\/jpackage\/share\/EmptyFolderTest.java","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-import jdk.jpackage.test.TKit;\n+import jdk.jpackage.test.Annotations.Test;\n@@ -45,1 +45,2 @@\n- * @run main\/othervm\/timeout=360 -Xmx512m WinDirChooserTest\n+ * @run main\/othervm\/timeout=360 -Xmx512m jdk.jpackage.test.Main\n+ *  --jpt-run=WinDirChooserTest\n@@ -49,7 +50,8 @@\n-    public static void main(String[] args) {\n-        TKit.run(args, () -> {\n-            new PackageTest()\n-            .forTypes(PackageType.WINDOWS)\n-            .configureHelloApp()\n-            .addInitializer(cmd -> cmd.addArgument(\"--win-dir-chooser\")).run();\n-        });\n+\n+    @Test\n+    public static void test() {\n+        new PackageTest()\n+                .forTypes(PackageType.WINDOWS)\n+                .configureHelloApp()\n+                .addInitializer(cmd -> cmd.addArgument(\"--win-dir-chooser\"))\n+                .run();\n","filename":"test\/jdk\/tools\/jpackage\/windows\/WinDirChooserTest.java","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"}]}