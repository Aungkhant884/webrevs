{"files":[{"patch":"@@ -1,95 +0,0 @@\n-Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n-DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n-This code is free software; you can redistribute it and\/or modify it\n-under the terms of the GNU General Public License version 2 only, as\n-published by the Free Software Foundation.\n-\n-This code is distributed in the hope that it will be useful, but WITHOUT\n-ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-version 2 for more details (a copy is included in the LICENSE file that\n-accompanied this code).\n-\n-You should have received a copy of the GNU General Public License version\n-2 along with this work; if not, write to the Free Software Foundation,\n-Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-\n-Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-or visit www.oracle.com if you need additional information or have any\n-questions.\n--- These tests run forever at the current time [8\/14\/97] --\n-\n-\n-\n-ArrayJuggle.README\n-\n-These are a series of tests to exercise the multi-threaded\n-GC part of the JVM.\n-\n-MemoryObjects are objects with a byte array to control their\n-size and next and previous pointers for building up links to\n-other MemoryObjects. These pointers can be used to make linked\n-lists or binary trees or whatever. In these test cases, they are\n-used only to build singly-linked lists.\n-\n-In the main class for each ArrayJuggle test, there is an array of\n-MemoryObjects called the mainArray. This array is acted upon\n-by various threads.\n-\n-MainArrayWalker threads randomly pick a cell in the main array\n-and allocate a new MemoryObject into it. This means that\n-the previous occupant of this cell in the array and anything\n-it points to are candidates for GC.\n-\n-The CopyingThread threads copy parts of the main array into\n-a thread-local array. While it resides in the thread-local array,\n-a MemoryObject and the objects it points to should not be GC'd.\n-\n-The LinkMaker threads add new objects at the head of a linked\n-list. The head of the list is stored in the main array. These\n-links can vary in size.\n-\n-In Juggle1, a single CopyingThread copies the values of the main array to the\n-subarray, a single LinkMaker adds nodes to the main array, and a single\n-MainArrayWalker turns over the main array.\n-\n-Juggle2 is the same as Juggle1, but the CopyingThread puts a reference\n-to the main array cell in the thread-local sub-array instead of\n-copying it. A small difference.\n-\n-Juggle3 is the same as Juggle1, but is configurable for how many\n-of each type of thread exists.\n-\n-Juggle4 is the same as Juggle2, but also has arrays of threads which\n-operate on the array.\n-\n-The \"gc\" versions of these tests all have one or more threads\n-which simply sit in a loop calling System.gc() to stress the system.\n-\n-\n-These programs are designed to have their values adjusted to stress\n-different parts of the system. A simple command interface can be\n-added to adjust these at runtime, or the files can be edited and\n-recompiled.\n-\n-No attempt has been made to synchronize access to the various array\n-structures. This means that the arrays at any given moment inside\n-any given thread may not necessarily be consistent. This is by\n-design.\n-\n-Because there is no synchronization across array accesses, the\n-values given by the dumpStatistics will not be precise, but will\n-instead reflect a rolling average.\n-\n-Currently, all these programs run forever. That is because the\n-curernt 1.1E system eventually fails on these tests. Each of\n-the threads has a mechanism for stopping. The main program can\n-wait for some specified period of time or number of iterations\n-and then set runForever = false on all its child threads and\n-then join() on them and the program should eventually terminate.\n-This will be necessary for adding these to VM Testbase.\n-\n-Also, it will be interesting to run these tests in multiple\n-configurations (varying the number of mutator threads) to\n-help check for problems.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/ArrayJuggle\/ArrayJuggle.README","additions":0,"deletions":95,"binary":false,"changes":95,"status":"deleted"},{"patch":"@@ -28,35 +28,29 @@\n-\/\/ Run in Juggle3Quic.java @test id=1  @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp byteArr -ms low\n-\/* @test id=2  @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp byteArr -ms medium *\/\n-\/* @test id=3  @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp byteArr -ms high *\/\n-\/* @test id=4  @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp booleanArr -ms low *\/\n-\/* @test id=5  @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp booleanArr -ms medium *\/\n-\/* @test id=6  @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp booleanArr -ms high *\/\n-\/* @test id=7  @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp shortArr -ms low *\/\n-\/* @test id=8  @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp shortArr -ms medium *\/\n-\/* @test id=9  @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp shortArr -ms high *\/\n-\/* @test id=10 @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp charArr -ms low *\/\n-\/* @test id=11 @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp charArr -ms medium *\/\n-\/* @test id=12 @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp charArr -ms high *\/\n-\/* @test id=13 @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp intArr -ms low *\/\n-\/\/ Run in Juggle3Quic.java @test id=14 @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp intArr -ms medium\n-\/* @test id=15 @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp intArr -ms high *\/\n-\/* @test id=16 @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp longArr -ms low *\/\n-\/* @test id=17 @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp longArr -ms medium *\/\n-\/* @test id=18 @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp longArr -ms high *\/\n-\/* @test id=19 @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp floatArr -ms low *\/\n-\/* @test id=20 @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp floatArr -ms medium *\/\n-\/* @test id=21 @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp floatArr -ms high *\/\n-\/\/ Run in Juggle3Quic.java @test id=22 @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp doubleArr -ms low\n-\/* @test id=23 @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp doubleArr -ms medium *\/\n-\/* @test id=24 @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp doubleArr -ms high *\/\n-\/* @test id=25 @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp objectArr -ms low *\/\n-\/* @test id=26 @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp objectArr -ms medium *\/\n-\/* @test id=27 @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp objectArr -ms high *\/\n-\/* @test id=28 @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp hashed(doubleArr) -ms low *\/\n-\/\/ Run in Juggle3Quic.java @test id=29 @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp hashed(doubleArr) -ms medium\n-\/* @test id=30 @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp hashed(doubleArr) -ms high *\/\n-\/* @test id=31 @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp hashed(objectArr) -ms low *\/\n-\/* @test id=32 @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp hashed(objectArr) -ms medium *\/\n-\/* @test id=33 @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp hashed(objectArr) -ms high *\/\n-\/\/ Run in Juggle3Quic.java @test id=34 @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp random(arrays) -ms high\n-\n+\/* @test id=byteArr_medium     @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp byteArr           -ms medium *\/\n+\/* @test id=byteArr_high       @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp byteArr           -ms high *\/\n+\/* @test id=booleanArr_low     @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp booleanArr        -ms low *\/\n+\/* @test id=booleanArr_medium  @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp booleanArr        -ms medium *\/\n+\/* @test id=booleanArr_high    @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp booleanArr        -ms high *\/\n+\/* @test id=shortArr_low       @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp shortArr          -ms low *\/\n+\/* @test id=shortArr_medium    @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp shortArr          -ms medium *\/\n+\/* @test id=shortArr_high      @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp shortArr          -ms high *\/\n+\/* @test id=charArr_low        @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp charArr           -ms low *\/\n+\/* @test id=charArr_medium     @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp charArr           -ms medium *\/\n+\/* @test id=charArr_high       @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp charArr           -ms high *\/\n+\/* @test id=intArr_low         @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp intArr            -ms low *\/\n+\/* @test id=intArr_high        @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp intArr            -ms high *\/\n+\/* @test id=longArr_low        @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp longArr           -ms low *\/\n+\/* @test id=longArr_medium     @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp longArr           -ms medium *\/\n+\/* @test id=longArr_high       @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp longArr           -ms high *\/\n+\/* @test id=floatArr_low       @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp floatArr          -ms low *\/\n+\/* @test id=floatArr_medium    @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp floatArr          -ms medium *\/\n+\/* @test id=floatArr_high      @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp floatArr          -ms high *\/\n+\/* @test id=doubleArr_medium   @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp doubleArr         -ms medium *\/\n+\/* @test id=doubleArr_high     @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp doubleArr         -ms high *\/\n+\/* @test id=objectArr_low      @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp objectArr         -ms low *\/\n+\/* @test id=objectArr_medium   @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp objectArr         -ms medium *\/\n+\/* @test id=objectArr_high     @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp objectArr         -ms high *\/\n+\/* @test id=h_doubleArr_low    @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp hashed(doubleArr) -ms low *\/\n+\/* @test id=h_doubleArr_high   @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp hashed(doubleArr) -ms high *\/\n+\/* @test id=h_objectArr_low    @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp hashed(objectArr) -ms low *\/\n+\/* @test id=h_objectArr_medium @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp hashed(objectArr) -ms medium *\/\n+\/* @test id=h_objectArr_high   @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp hashed(objectArr) -ms high *\/\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/ArrayJuggle\/Juggle3.java","additions":29,"deletions":35,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -28,5 +28,5 @@\n-\/* @test id=1  @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp byteArr -ms low *\/\n-\/* @test id=14 @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp intArr -ms medium *\/\n-\/* @test id=22 @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp doubleArr -ms low *\/\n-\/* @test id=29 @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp hashed(doubleArr) -ms medium *\/\n-\/* @test id=34 @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp random(arrays) -ms high *\/\n+\/* @test id=byteArr_low        @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp byteArr           -ms low *\/\n+\/* @test id=intArr_medium      @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp intArr            -ms medium *\/\n+\/* @test id=doubleArr_low      @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp doubleArr         -ms low *\/\n+\/* @test id=h_doubleArr_medium @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp hashed(doubleArr) -ms medium *\/\n+\/* @test id=r_arrays_high      @key stress randomness @library \/vmTestbase \/test\/lib @run main\/othervm -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc=debug:gc.log gc.ArrayJuggle.Juggle3 -gp random(arrays)    -ms high *\/\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/ArrayJuggle\/Juggle3Quick.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}