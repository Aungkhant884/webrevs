{"files":[{"patch":"@@ -30,0 +30,49 @@\n+void CodeBuffer::share_trampoline_for(address dest, int caller_offset) {\n+  if (_shared_trampoline_requests == nullptr) {\n+    constexpr unsigned init_size = 8;\n+    constexpr unsigned max_size  = 256;\n+    _shared_trampoline_requests = new SharedTrampolineRequests(init_size, max_size);\n+  }\n+\n+  bool created;\n+  Offsets* offsets = _shared_trampoline_requests->put_if_absent(dest, &created);\n+  if (created) {\n+    _shared_trampoline_requests->maybe_grow();\n+  }\n+  offsets->add(caller_offset);\n+  _finalize_stubs = true;\n+}\n+\n+static bool emit_shared_trampolines(CodeBuffer* cb, CodeBuffer::SharedTrampolineRequests* requests) {\n+  if (requests == nullptr) {\n+    return true;\n+  }\n+\n+  MacroAssembler masm(cb);\n+\n+  bool p_succeeded = true;\n+  auto emit = [&](address dest, const CodeBuffer::Offsets &offsets) {\n+    masm.set_code_section(cb->stubs());\n+    masm.align(wordSize, NativeCallTrampolineStub::data_offset);\n+\n+    LinkedListIterator<int> it(offsets.head());\n+    int offset = *it.next();\n+    for (; !it.is_empty(); offset = *it.next()) {\n+      masm.relocate(trampoline_stub_Relocation::spec(cb->insts()->start() + offset));\n+    }\n+    masm.set_code_section(cb->insts());\n+\n+    address stub = masm.emit_trampoline_stub(offset, dest);\n+    if (stub == nullptr) {\n+      ciEnv::current()->record_failure(\"CodeCache is full\");\n+      p_succeeded = false;\n+    }\n+\n+    return p_succeeded;\n+  };\n+\n+  requests->iterate(emit);\n+\n+  return p_succeeded;\n+}\n+\n@@ -31,1 +80,2 @@\n-  return emit_shared_stubs_to_interp<MacroAssembler>(this, _shared_stub_to_interp_requests);\n+  return emit_shared_stubs_to_interp<MacroAssembler>(this, _shared_stub_to_interp_requests)\n+      && emit_shared_trampolines(this, _shared_trampoline_requests);\n","filename":"src\/hotspot\/cpu\/riscv\/codeBuffer_riscv.cpp","additions":51,"deletions":1,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -38,0 +38,2 @@\n+  void share_trampoline_for(address dest, int caller_offset);\n+\n","filename":"src\/hotspot\/cpu\/riscv\/codeBuffer_riscv.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2819,0 +2819,2 @@\n+  address target = entry.target();\n+\n@@ -2831,4 +2833,9 @@\n-      address stub = emit_trampoline_stub(offset(), entry.target());\n-      if (stub == NULL) {\n-        postcond(pc() == badAddress);\n-        return NULL; \/\/ CodeCache is full\n+      if (entry.rspec().type() == relocInfo::runtime_call_type) {\n+        assert(CodeBuffer::supports_shared_stubs(), \"must support shared stubs\");\n+        code()->share_trampoline_for(entry.target(), offset());\n+      } else {\n+        address stub = emit_trampoline_stub(offset(), target);\n+        if (stub == NULL) {\n+          postcond(pc() == badAddress);\n+          return NULL; \/\/ CodeCache is full\n+        }\n@@ -2837,0 +2844,1 @@\n+    target = pc();\n@@ -2841,5 +2849,1 @@\n-  if (!far_branches()) {\n-    jal(entry.target());\n-  } else {\n-    jal(pc());\n-  }\n+  jal(target);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":13,"deletions":9,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -31,1 +31,2 @@\n- * @requires vm.debug & os.arch==\"aarch64\"\n+ * @requires os.arch==\"aarch64\" | os.arch==\"riscv64\"\n+ * @requires vm.debug\n","filename":"test\/hotspot\/jtreg\/compiler\/sharedstubs\/SharedTrampolineTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}