{"files":[{"patch":"@@ -689,0 +689,3 @@\n+    if (!FLAG_IS_DEFAULT(CompressedClassSpaceBaseAddress)) {\n+      log_warning(metaspace)(\"CDS active - ignoring CompressedClassSpaceBaseAddress.\");\n+    }\n@@ -704,1 +707,1 @@\n-    \/\/ case (b)\n+    \/\/ case (b) (No CDS)\n@@ -706,10 +709,0 @@\n-\n-    \/\/ If UseCompressedOops=1 and the java heap has been placed in coops-friendly\n-    \/\/  territory, i.e. its base is under 32G, then we attempt to place ccs\n-    \/\/  right above the java heap.\n-    \/\/ Otherwise the lower 32G are still free. We try to place ccs at the lowest\n-    \/\/ allowed mapping address.\n-    address base = (UseCompressedOops && (uint64_t)CompressedOops::base() < OopEncodingHeapMax) ?\n-                   CompressedOops::end() : (address)HeapBaseMinAddress;\n-    base = align_up(base, Metaspace::reserve_alignment());\n-\n@@ -717,4 +710,40 @@\n-    if (base != NULL) {\n-      if (CompressedKlassPointers::is_valid_base(base)) {\n-        rs = ReservedSpace(size, Metaspace::reserve_alignment(),\n-                           os::vm_page_size(), (char*)base);\n+    address base = NULL;\n+\n+    \/\/ If CompressedClassSpaceBaseAddress is set, we attempt to force-map class space to\n+    \/\/ the given address. This is a debug-only feature aiding tests. Due to the ASLR lottery\n+    \/\/ this may fail, in which case the VM will exit after printing an appropiate message.\n+    \/\/ Tests using this switch should cope with that.\n+    if (CompressedClassSpaceBaseAddress != 0) {\n+      base = (address)CompressedClassSpaceBaseAddress;\n+      if (!is_aligned(base, Metaspace::reserve_alignment())) {\n+        vm_exit_during_initialization(\n+            err_msg(\"CompressedClassSpaceBaseAddress=\" PTR_FORMAT \" invalid \"\n+                    \"(must be aligned to \" SIZE_FORMAT_HEX \").\",\n+                    CompressedClassSpaceBaseAddress, Metaspace::reserve_alignment()));\n+      }\n+      rs = ReservedSpace(size, Metaspace::reserve_alignment(),\n+                         os::vm_page_size() \/* large *\/, (char*)base);\n+      if (rs.is_reserved()) {\n+        log_info(metaspace)(\"Sucessfully forced class space address to \" PTR_FORMAT, p2i(base));\n+      } else {\n+        vm_exit_during_initialization(\n+            err_msg(\"CompressedClassSpaceBaseAddress=\" PTR_FORMAT \" given, but reserving class space failed.\",\n+                CompressedClassSpaceBaseAddress));\n+      }\n+    }\n+\n+    if (!rs.is_reserved()) {\n+      \/\/ If UseCompressedOops=1 and the java heap has been placed in coops-friendly\n+      \/\/  territory, i.e. its base is under 32G, then we attempt to place ccs\n+      \/\/  right above the java heap.\n+      \/\/ Otherwise the lower 32G are still free. We try to place ccs at the lowest\n+      \/\/ allowed mapping address.\n+      base = (UseCompressedOops && (uint64_t)CompressedOops::base() < OopEncodingHeapMax) ?\n+              CompressedOops::end() : (address)HeapBaseMinAddress;\n+      base = align_up(base, Metaspace::reserve_alignment());\n+\n+      if (base != NULL) {\n+        if (CompressedKlassPointers::is_valid_base(base)) {\n+          rs = ReservedSpace(size, Metaspace::reserve_alignment(),\n+                             os::vm_page_size(), (char*)base);\n+        }\n","filename":"src\/hotspot\/share\/memory\/metaspace.cpp","additions":44,"deletions":15,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -1465,0 +1465,4 @@\n+  develop(size_t, CompressedClassSpaceBaseAddress, 0,                       \\\n+          \"Force the class space to be allocated at this address or \"       \\\n+          \"fails VM initialization (requires -Xshare=off.\")                 \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}