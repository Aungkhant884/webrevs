{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -98,1 +98,2 @@\n-    return element_value_impl(elembt, get_arrayOop(), index);\n+    ciConstant value = element_value_impl(elembt, get_arrayOop(), index);\n+    return check_constant_value_cache(index, value);\n","filename":"src\/hotspot\/share\/ci\/ciArray.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,29 @@\n+\/\/ ------------------------------------------------------------------\n+\/\/ ciConstant::is_null_or_zero\n+bool ciConstant::is_null_or_zero() const {\n+  if (!is_java_primitive(basic_type())) {\n+    return as_object()->is_null_object();\n+  } else if (type2size[basic_type()] == 1) {\n+    \/\/ treat float bits as int, to avoid comparison with -0 and NaN\n+    return (_value._int == 0);\n+  } else if (type2size[basic_type()] == 2) {\n+    \/\/ treat double bits as long, to avoid comparison with -0 and NaN\n+    return (_value._long == 0);\n+  } else {\n+    return false;\n+  }\n+}\n+\n+\/\/ ------------------------------------------------------------------\n+\/\/ ciConstant::is_loaded\n+bool ciConstant::is_loaded() const {\n+  if (is_valid()) {\n+    if (is_reference_type(basic_type())) {\n+      return as_object()->is_loaded();\n+    } else {\n+      return true;\n+    }\n+  }\n+  return false;\n+}\n+\n","filename":"src\/hotspot\/share\/ci\/ciConstant.cpp","additions":30,"deletions":1,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n-#include \"ci\/ciNullObject.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -113,13 +113,1 @@\n-  bool      is_null_or_zero() const {\n-    if (!is_java_primitive(basic_type())) {\n-      return as_object()->is_null_object();\n-    } else if (type2size[basic_type()] == 1) {\n-      \/\/ treat float bits as int, to avoid comparison with -0 and NaN\n-      return (_value._int == 0);\n-    } else if (type2size[basic_type()] == 2) {\n-      \/\/ treat double bits as long, to avoid comparison with -0 and NaN\n-      return (_value._long == 0);\n-    } else {\n-      return false;\n-    }\n-  }\n+  bool is_null_or_zero() const;\n@@ -131,10 +119,2 @@\n-  bool is_loaded() const {\n-    if (is_valid()) {\n-      if (is_reference_type(basic_type())) {\n-        return as_object()->is_loaded();\n-      } else {\n-        return true;\n-      }\n-    }\n-    return false;\n-  }\n+  bool is_loaded() const;\n+\n","filename":"src\/hotspot\/share\/ci\/ciConstant.hpp","additions":5,"deletions":25,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -174,2 +174,0 @@\n-  _stable_values = new (_arena) GrowableArray<StableValue>(_arena, 0, 0, StableValue());\n-\n@@ -297,2 +295,0 @@\n-  _stable_values = nullptr;\n-\n@@ -1301,14 +1297,0 @@\n-\/\/ Cache stable value lookups to ensure that consistent values are observed during compilation.\n-ciConstant ciEnv::check_stable_value(const ciObject* obj, int off, ciConstant val) {\n-  assert(FoldStableValues && _stable_values != nullptr, \"Must be enabled and initialized\");\n-  assert(obj != nullptr, \"Value must have a holder\");\n-  for (int i = 0; i < _stable_values->length(); ++i) {\n-    StableValue cached_val = _stable_values->at(i);\n-    if (cached_val.obj() == obj && cached_val.off() == off) {\n-      return cached_val.value();\n-    }\n-  }\n-  _stable_values->append(StableValue(obj, off, val));\n-  return val;\n-}\n-\n","filename":"src\/hotspot\/share\/ci\/ciEnv.cpp","additions":1,"deletions":19,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,0 @@\n-#include \"ci\/ciConstant.hpp\"\n@@ -470,22 +469,0 @@\n-  \/\/ FoldStableValues support\n-private:\n-  class StableValue {\n-    private:\n-      const ciObject* _obj;\n-      int _off;\n-      ciConstant _value;\n-\n-    public:\n-      StableValue() : _obj(NULL), _off(0), _value(ciConstant()) { }\n-      StableValue(const ciObject* obj, int off, ciConstant value) : _obj(obj), _off(off), _value(value) { }\n-\n-      const ciObject* obj() const { return _obj; }\n-      int off() const { return _off; }\n-      ciConstant value() const { return _value; }\n-  };\n-\n-  GrowableArray<StableValue>* _stable_values; \/\/ Cache of stable values\n-\n-public:\n-  ciConstant check_stable_value(const ciObject* obj, int off, ciConstant val);\n-\n","filename":"src\/hotspot\/share\/ci\/ciEnv.hpp","additions":1,"deletions":24,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+#include \"ci\/ciNullObject.hpp\"\n@@ -64,0 +65,1 @@\n+  ciConstant value;\n@@ -65,8 +67,8 @@\n-    case T_BYTE:    return ciConstant(field_btype, obj->byte_field(offset));\n-    case T_CHAR:    return ciConstant(field_btype, obj->char_field(offset));\n-    case T_SHORT:   return ciConstant(field_btype, obj->short_field(offset));\n-    case T_BOOLEAN: return ciConstant(field_btype, obj->bool_field(offset));\n-    case T_INT:     return ciConstant(field_btype, obj->int_field(offset));\n-    case T_FLOAT:   return ciConstant(obj->float_field(offset));\n-    case T_DOUBLE:  return ciConstant(obj->double_field(offset));\n-    case T_LONG:    return ciConstant(obj->long_field(offset));\n+    case T_BYTE:    value = ciConstant(field_btype, obj->byte_field(offset)); break;\n+    case T_CHAR:    value = ciConstant(field_btype, obj->char_field(offset)); break;\n+    case T_SHORT:   value = ciConstant(field_btype, obj->short_field(offset)); break;\n+    case T_BOOLEAN: value = ciConstant(field_btype, obj->bool_field(offset)); break;\n+    case T_INT:     value = ciConstant(field_btype, obj->int_field(offset)); break;\n+    case T_FLOAT:   value = ciConstant(obj->float_field(offset)); break;\n+    case T_DOUBLE:  value = ciConstant(obj->double_field(offset)); break;\n+    case T_LONG:    value = ciConstant(obj->long_field(offset)); break;\n@@ -85,1 +87,1 @@\n-        return ciConstant(field_btype, ciNullObject::make());\n+        value = ciConstant(field_btype, ciNullObject::make());\n@@ -87,1 +89,1 @@\n-        return ciConstant(field_btype, CURRENT_ENV->get_object(o));\n+        value = ciConstant(field_btype, CURRENT_ENV->get_object(o));\n@@ -89,0 +91,1 @@\n+      break;\n@@ -92,1 +95,0 @@\n-      return ciConstant();\n@@ -94,0 +96,1 @@\n+  return check_constant_value_cache(offset, value);\n","filename":"src\/hotspot\/share\/ci\/ciInstance.cpp","additions":15,"deletions":12,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -171,0 +171,20 @@\n+\/\/ ------------------------------------------------------------------\n+\/\/ ciObject::check_constant_value_cache()\n+\/\/\n+\/\/ Cache constant value lookups to ensure that consistent values are observed\n+\/\/ during compilation because fields may be (re-)initialized concurrently.\n+ciConstant ciObject::check_constant_value_cache(int off, ciConstant val) {\n+  if (_constant_values == nullptr) {\n+    Arena* arena = CURRENT_ENV->arena();\n+    _constant_values = new (arena) GrowableArray<ConstantValue>(arena, 0, 0, ConstantValue());\n+  }\n+  for (int i = 0; i < _constant_values->length(); ++i) {\n+    ConstantValue cached_val = _constant_values->at(i);\n+    if (cached_val.obj() == this && cached_val.off() == off) {\n+      return cached_val.value();\n+    }\n+  }\n+  _constant_values->append(ConstantValue(this, off, val));\n+  return val;\n+}\n+\n","filename":"src\/hotspot\/share\/ci\/ciObject.cpp","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+#include \"ci\/ciConstant.hpp\"\n@@ -31,0 +32,1 @@\n+#include \"utilities\/growableArray.hpp\"\n@@ -60,0 +62,18 @@\n+  \/\/ Cache constant value lookups to ensure that consistent values are observed during compilation.\n+  class ConstantValue {\n+    private:\n+      const ciObject* _obj;\n+      int _off;\n+      ciConstant _value;\n+\n+    public:\n+      ConstantValue() : _obj(NULL), _off(0), _value(ciConstant()) { }\n+      ConstantValue(const ciObject* obj, int off, ciConstant value) : _obj(obj), _off(off), _value(value) { }\n+\n+      const ciObject* obj() const { return _obj; }\n+      int off() const { return _off; }\n+      ciConstant value() const { return _value; }\n+  };\n+\n+  GrowableArray<ConstantValue>* _constant_values = nullptr;\n+\n@@ -97,0 +117,3 @@\n+  \/\/ Checks the constant value cache\n+  ciConstant check_constant_value_cache(int off, ciConstant val);\n+\n","filename":"src\/hotspot\/share\/ci\/ciObject.hpp","additions":24,"deletions":1,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -4174,2 +4174,0 @@\n-    } else {\n-      return nullptr; \/\/ Holder not constant\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -319,1 +319,0 @@\n-  element_value = ciEnv::current()->check_stable_value(array, off, element_value);\n@@ -365,4 +364,0 @@\n-  if (FoldStableValues && field->is_stable()) {\n-    holder = field->is_static() ? field->holder()->java_mirror() : holder;\n-    field_value = ciEnv::current()->check_stable_value(holder, field->offset(), field_value);\n-  }\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"}]}