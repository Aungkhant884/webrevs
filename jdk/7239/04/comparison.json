{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,9 +32,3 @@\n- * Indicates that the named compiler warnings should be suppressed in the\n- * annotated element (and in all program elements contained in the annotated\n- * element).  Note that the set of warnings suppressed in a given element is\n- * a superset of the warnings suppressed in all containing elements.  For\n- * example, if you annotate a class to suppress one warning and annotate a\n- * method to suppress another, both warnings will be suppressed in the method.\n- * However, note that if a warning is suppressed in a {@code\n- * module-info} file, the suppression applies to elements within the\n- * file and <em>not<\/em> to types contained within the module.\n+ * Indicates the warnings to be suppressed at compile time in the\n+ * annotated element, and in all elements contained in the annotated\n+ * element.\n@@ -42,2 +36,5 @@\n- * <p>As a matter of style, programmers should always use this annotation\n- * on the most deeply nested element where it is effective.  If you want to\n+ * <p>The {@code SuppressWarnings} annotation interface is applicable\n+ * in all declaration contexts, so an {@code @SuppressWarnings}\n+ * annotation can be used on any element.  As a matter of style,\n+ * programmers should always use this annotation on the most deeply\n+ * nested element where it is effective. For example, if you want to\n@@ -47,0 +44,34 @@\n+ * <p>The set of warnings suppressed in a given element is a union of\n+ * the warnings suppressed in all containing elements.  For example,\n+ * if you annotate a class to suppress one warning and annotate a\n+ * method in the class to suppress another, both warnings will be\n+ * suppressed in the method.  However, note that if a warning is\n+ * suppressed in a {@code module-info} file, the suppression applies\n+ * to elements within the file and <em>not<\/em> to types contained\n+ * within the module.  Likewise, if a warning is suppressed in a\n+ * {@code package-info} file, the suppression applies to elements\n+ * within the file and <em>not<\/em> to types contained within the\n+ * package.\n+ *\n+ * <p>Java compilers must recognize all the kinds of warnings defined\n+ * in the <cite>Java Language Specification<\/cite> (JLS section {@jls\n+ * 9.6.4.5}) which include:\n+ *\n+ * <ul>\n+ * <li> Unchecked warnings, specified by the string {@code \"unchecked\"}.\n+ * <li> Deprecation warnings, specified by the string {@code \"deprecation\"}.\n+ * <li> Removal warnings, specified by the string {@code \"removal\"}.\n+ * <li> Preview warnings, specified by the string {@code \"preview\"}.\n+ * <\/ul>\n+ *\n+ * Whether or not a Java compiler recognizes other strings is a\n+ * quality of implementation concern.  Compiler vendors should\n+ * document the additional warning names they support.  Vendors are\n+ * encouraged to cooperate to ensure that the same names work across\n+ * multiple compilers.\n+ *\n+ * @implNote\n+ * In addition to the mandated suppression strings, the {@code javac}\n+ * reference implementation recognizes compilation-related warning\n+ * names documented in its {@code --help-lint} output.\n+ *\n@@ -55,1 +86,1 @@\n-@Target({TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE, MODULE})\n+\/\/ Implicitly target all declaration contexts by omitting a @Target annotation\n@@ -66,6 +97,0 @@\n-     *\n-     * <p> The string {@code \"unchecked\"} is used to suppress\n-     * unchecked warnings. Compiler vendors should document the\n-     * additional warning names they support in conjunction with this\n-     * annotation type. They are encouraged to cooperate to ensure\n-     * that the same names work across multiple compilers.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/SuppressWarnings.java","additions":44,"deletions":19,"binary":false,"changes":63,"status":"modified"}]}