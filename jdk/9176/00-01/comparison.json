{"files":[{"patch":"@@ -28,1 +28,0 @@\n-#include \"cds\/serializeClosure.hpp\"\n","filename":"src\/hotspot\/share\/cds\/archiveUtils.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"cds\/serializeClosure.hpp\"\n","filename":"src\/hotspot\/share\/cds\/cppVtables.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#include \"cds\/serializeClosure.hpp\"\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -49,1 +49,0 @@\n-class SerializeClosure;\n","filename":"src\/hotspot\/share\/cds\/heapShared.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-class SerializeClosure;\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,65 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_CDS_SERIALIZECLOSURE_HPP\n-#define SHARE_CDS_SERIALIZECLOSURE_HPP\n-\n-#include \"memory\/allocation.hpp\"\n-#include \"oops\/oopsHierarchy.hpp\"\n-\n-\/\/ Abstract closure for serializing data (read or write).\n-\n-class SerializeClosure : public StackObj {\n-public:\n-  \/\/ Return bool indicating whether closure implements read or write.\n-  virtual bool reading() const = 0;\n-\n-  \/\/ Read\/write the void pointer pointed to by p.\n-  virtual void do_ptr(void** p) = 0;\n-\n-  \/\/ Read\/write the 32-bit unsigned integer pointed to by p.\n-  virtual void do_u4(u4* p) = 0;\n-\n-  \/\/ Read\/write the bool pointed to by p.\n-  virtual void do_bool(bool* p) = 0;\n-\n-  \/\/ Read\/write the region specified.\n-  virtual void do_region(u_char* start, size_t size) = 0;\n-\n-  \/\/ Check\/write the tag.  If reading, then compare the tag against\n-  \/\/ the passed in value and fail is they don't match.  This allows\n-  \/\/ for verification that sections of the serialized data are of the\n-  \/\/ correct length.\n-  virtual void do_tag(int tag) = 0;\n-\n-  \/\/ Read\/write the oop\n-  virtual void do_oop(oop* o) = 0;\n-\n-  bool writing() {\n-    return !reading();\n-  }\n-};\n-\n-#endif \/\/ SHARE_CDS_SERIALIZECLOSURE_HPP\n-\n","filename":"src\/hotspot\/share\/cds\/serializeClosure.hpp","additions":0,"deletions":65,"binary":false,"changes":65,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-#include \"cds\/serializeClosure.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/classLoaderDataShared.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-class SerializeClosure;\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-#include \"cds\/serializeClosure.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -35,2 +35,0 @@\n-class SerializeClosure;\n-\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-#include \"memory\/devirtualizer.inline.hpp\"\n@@ -36,0 +35,1 @@\n+#include \"utilities\/devirtualizer.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-#include \"memory\/devirtualizer.inline.hpp\"\n@@ -43,0 +42,1 @@\n+#include \"utilities\/devirtualizer.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -328,0 +328,33 @@\n+\/\/ Abstract closure for serializing data (read or write).\n+\n+class SerializeClosure : public Closure {\n+public:\n+  \/\/ Return bool indicating whether closure implements read or write.\n+  virtual bool reading() const = 0;\n+\n+  \/\/ Read\/write the void pointer pointed to by p.\n+  virtual void do_ptr(void** p) = 0;\n+\n+  \/\/ Read\/write the 32-bit unsigned integer pointed to by p.\n+  virtual void do_u4(u4* p) = 0;\n+\n+  \/\/ Read\/write the bool pointed to by p.\n+  virtual void do_bool(bool* p) = 0;\n+\n+  \/\/ Read\/write the region specified.\n+  virtual void do_region(u_char* start, size_t size) = 0;\n+\n+  \/\/ Check\/write the tag.  If reading, then compare the tag against\n+  \/\/ the passed in value and fail is they don't match.  This allows\n+  \/\/ for verification that sections of the serialized data are of the\n+  \/\/ correct length.\n+  virtual void do_tag(int tag) = 0;\n+\n+  \/\/ Read\/write the oop\n+  virtual void do_oop(oop* o) = 0;\n+\n+  bool writing() {\n+    return !reading();\n+  }\n+};\n+\n","filename":"src\/hotspot\/share\/memory\/iterator.hpp","additions":33,"deletions":0,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include \"cds\/serializeClosure.hpp\"\n@@ -85,29 +84,0 @@\n-\/\/ A helper class for caching a Method* when the user of the cache\n-\/\/ only cares about the latest version of the Method*.  This cache safely\n-\/\/ interacts with the RedefineClasses API.\n-\n-class LatestMethodCache : public CHeapObj<mtClass> {\n-  \/\/ We save the Klass* and the idnum of Method* in order to get\n-  \/\/ the current cached Method*.\n- private:\n-  Klass*                _klass;\n-  int                   _method_idnum;\n-\n- public:\n-  LatestMethodCache()   { _klass = NULL; _method_idnum = -1; }\n-  ~LatestMethodCache()  { _klass = NULL; _method_idnum = -1; }\n-\n-  void   init(Klass* k, Method* m);\n-  Klass* klass() const           { return _klass; }\n-  int    method_idnum() const    { return _method_idnum; }\n-\n-  Method* get_method();\n-\n-  \/\/ CDS support.  Replace the klass in this with the archive version\n-  \/\/ could use this for Enhanced Class Redefinition also.\n-  void serialize(SerializeClosure* f) {\n-    f->do_ptr((void**)&_klass);\n-  }\n-  void metaspace_pointers_do(MetaspaceClosure* it);\n-};\n-\n@@ -1280,5 +1250,0 @@\n-Method* Universe::finalizer_register_method()   { return _finalizer_register_cache->get_method(); }\n-Method* Universe::loader_addClass_method()      { return _loader_addClass_cache->get_method(); }\n-Method* Universe::throw_illegal_access_error()  { return _throw_illegal_access_error_cache->get_method(); }\n-Method* Universe::throw_no_such_method_error()  { return _throw_no_such_method_error_cache->get_method(); }\n-Method* Universe::do_stack_walk_method()        { return _do_stack_walk_cache->get_method(); }\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":0,"deletions":35,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -46,2 +46,29 @@\n-class LatestMethodCache;\n-class SerializeClosure;\n+\n+\/\/ A helper class for caching a Method* when the user of the cache\n+\/\/ only cares about the latest version of the Method*.  This cache safely\n+\/\/ interacts with the RedefineClasses API.\n+\n+class LatestMethodCache : public CHeapObj<mtClass> {\n+  \/\/ We save the Klass* and the idnum of Method* in order to get\n+  \/\/ the current cached Method*.\n+ private:\n+  Klass*                _klass;\n+  int                   _method_idnum;\n+\n+ public:\n+  LatestMethodCache()   { _klass = NULL; _method_idnum = -1; }\n+  ~LatestMethodCache()  { _klass = NULL; _method_idnum = -1; }\n+\n+  void   init(Klass* k, Method* m);\n+  Klass* klass() const           { return _klass; }\n+  int    method_idnum() const    { return _method_idnum; }\n+\n+  Method* get_method();\n+\n+  \/\/ CDS support.  Replace the klass in this with the archive version\n+  \/\/ could use this for Enhanced Class Redefinition also.\n+  void serialize(SerializeClosure* f) {\n+    f->do_ptr((void**)&_klass);\n+  }\n+  void metaspace_pointers_do(MetaspaceClosure* it);\n+};\n@@ -231,0 +258,5 @@\n+  static Method*      finalizer_register_method()     { return _finalizer_register_cache->get_method(); }\n+  static Method*      loader_addClass_method()        { return _loader_addClass_cache->get_method(); }\n+\n+  static Method*      throw_illegal_access_error()    { return _throw_illegal_access_error_cache->get_method(); }\n+  static Method*      throw_no_such_method_error()    { return _throw_no_such_method_error_cache->get_method(); }\n@@ -232,5 +264,1 @@\n-  static Method*      finalizer_register_method();\n-  static Method*      loader_addClass_method();\n-  static Method*      throw_illegal_access_error();\n-  static Method*      throw_no_such_method_error();\n-  static Method*      do_stack_walk_method();\n+  static Method*      do_stack_walk_method()          { return _do_stack_walk_cache->get_method(); }\n","filename":"src\/hotspot\/share\/memory\/universe.hpp","additions":35,"deletions":7,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-#include \"memory\/devirtualizer.inline.hpp\"\n@@ -35,0 +34,1 @@\n+#include \"utilities\/devirtualizer.inline.hpp\"\n","filename":"src\/hotspot\/share\/oops\/instanceClassLoaderKlass.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#include \"memory\/devirtualizer.inline.hpp\"\n@@ -38,0 +37,1 @@\n+#include \"utilities\/devirtualizer.inline.hpp\"\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-#include \"cds\/serializeClosure.hpp\"\n","filename":"src\/hotspot\/share\/oops\/instanceMirrorKlass.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-#include \"memory\/devirtualizer.inline.hpp\"\n@@ -36,0 +35,1 @@\n+#include \"utilities\/devirtualizer.inline.hpp\"\n","filename":"src\/hotspot\/share\/oops\/instanceMirrorKlass.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-#include \"memory\/devirtualizer.inline.hpp\"\n@@ -38,0 +37,1 @@\n+#include \"utilities\/devirtualizer.inline.hpp\"\n","filename":"src\/hotspot\/share\/oops\/instanceRefKlass.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-#include \"cds\/serializeClosure.hpp\"\n@@ -30,1 +29,0 @@\n-#include \"memory\/devirtualizer.inline.hpp\"\n@@ -41,0 +39,1 @@\n+#include \"utilities\/devirtualizer.inline.hpp\"\n","filename":"src\/hotspot\/share\/oops\/instanceStackChunkKlass.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-#include \"memory\/devirtualizer.inline.hpp\"\n@@ -50,0 +49,1 @@\n+#include \"utilities\/devirtualizer.inline.hpp\"\n","filename":"src\/hotspot\/share\/oops\/instanceStackChunkKlass.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-#include \"memory\/devirtualizer.inline.hpp\"\n@@ -37,0 +36,1 @@\n+#include \"utilities\/devirtualizer.inline.hpp\"\n","filename":"src\/hotspot\/share\/oops\/objArrayKlass.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#include \"memory\/devirtualizer.inline.hpp\"\n@@ -39,0 +38,1 @@\n+#include \"utilities\/devirtualizer.inline.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/stackChunkFrameStream.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"","filename":"src\/hotspot\/share\/utilities\/devirtualizer.hpp","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/hotspot\/share\/memory\/devirtualizer.hpp","status":"renamed"},{"patch":"@@ -28,1 +28,1 @@\n-#include \"memory\/devirtualizer.hpp\"\n+#include \"utilities\/devirtualizer.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/devirtualizer.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/hotspot\/share\/memory\/devirtualizer.inline.hpp","status":"renamed"}]}