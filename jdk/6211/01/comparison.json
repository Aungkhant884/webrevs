{"files":[{"patch":"@@ -54,1 +54,0 @@\n-#include \"runtime\/vmThread.hpp\"\n@@ -56,0 +55,1 @@\n+#include \"runtime\/vmThread.hpp\"\n@@ -71,2 +71,1 @@\n- *            have the same size as host pointers. For example, on\n- *            Solaris and Win32, the size is 4.\n+ *            have the same size as host pointers.\n@@ -330,1 +329,1 @@\n-typedef enum {\n+enum hprofTag : u1 {\n@@ -375,1 +374,1 @@\n-} hprofTag;\n+};\n@@ -409,1 +408,1 @@\n-  void write_fast(void* s, size_t len);\n+  void write_fast(const void* s, size_t len);\n@@ -426,1 +425,1 @@\n-  virtual void write_raw(void* s, size_t len);\n+  virtual void write_raw(const void* s, size_t len);\n@@ -455,1 +454,1 @@\n-void AbstractDumpWriter::write_fast(void* s, size_t len) {\n+void AbstractDumpWriter::write_fast(const void* s, size_t len) {\n@@ -468,1 +467,1 @@\n-void AbstractDumpWriter::write_raw(void* s, size_t len) {\n+void AbstractDumpWriter::write_raw(const void* s, size_t len) {\n@@ -493,1 +492,1 @@\n-  WRITE_KNOWN_TYPE((void*) &x, 1);\n+  WRITE_KNOWN_TYPE(&x, 1);\n@@ -499,1 +498,1 @@\n-  WRITE_KNOWN_TYPE((void*)&v, 2);\n+  WRITE_KNOWN_TYPE(&v, 2);\n@@ -505,1 +504,1 @@\n-  WRITE_KNOWN_TYPE((void*)&v, 4);\n+  WRITE_KNOWN_TYPE(&v, 4);\n@@ -511,1 +510,1 @@\n-  WRITE_KNOWN_TYPE((void*)&v, 8);\n+  WRITE_KNOWN_TYPE(&v, 8);\n@@ -761,1 +760,1 @@\n-  virtual void write_raw(void* s, size_t len) {\n+  virtual void write_raw(const void* s, size_t len) {\n@@ -949,1 +948,1 @@\n-  writer->write_u1((u1)tag);\n+  writer->write_u1(tag);\n@@ -1001,0 +1000,7 @@\n+template<typename T, typename F> T bit_cast(F from) { \/\/ replace with the real thing when we can use c++20\n+  T to;\n+  static_assert(sizeof(to) == sizeof(from), \"must be of the same size\");\n+  memcpy(&to, &from, sizeof(to));\n+  return to;\n+}\n+\n@@ -1004,1 +1010,1 @@\n-    writer->write_u4(0x7fc00000);    \/\/ collapsing NaNs\n+    writer->write_u4(0x7fc00000); \/\/ collapsing NaNs\n@@ -1006,6 +1012,1 @@\n-    union {\n-      int i;\n-      float f;\n-    } u;\n-    u.f = (float)f;\n-    writer->write_u4((u4)u.i);\n+    writer->write_u4(bit_cast<u4>(f));\n@@ -1017,7 +1018,2 @@\n-  union {\n-    jlong l;\n-    double d;\n-  } u;\n-  if (g_isnan(d)) {                 \/\/ collapsing NaNs\n-    u.l = (jlong)(0x7ff80000);\n-    u.l = (u.l << 32);\n+  if (g_isnan(d)) {\n+    writer->write_u8(0x7ff80000ull << 32); \/\/ collapsing NaNs\n@@ -1025,1 +1021,1 @@\n-    u.d = (double)d;\n+    writer->write_u8(bit_cast<u8>(d));\n@@ -1027,1 +1023,0 @@\n-  writer->write_u8((u8)u.l);\n@@ -1049,1 +1044,1 @@\n-      writer->write_u1((u1)b);\n+      writer->write_u1(b);\n@@ -1054,1 +1049,1 @@\n-      writer->write_u2((u2)c);\n+      writer->write_u2(c);\n@@ -1059,1 +1054,1 @@\n-      writer->write_u2((u2)s);\n+      writer->write_u2(s);\n@@ -1074,1 +1069,1 @@\n-      writer->write_u4((u4)i);\n+      writer->write_u4(i);\n@@ -1079,1 +1074,1 @@\n-      writer->write_u8((u8)l);\n+      writer->write_u8(l);\n@@ -1084,1 +1079,1 @@\n-      writer->write_u1((u1)b);\n+      writer->write_u1(b);\n@@ -1467,1 +1462,1 @@\n-        writer->write_raw((void*)(array->int_at_addr(0)), length_in_bytes);\n+        writer->write_raw(array->int_at_addr(0), length_in_bytes);\n@@ -1472,1 +1467,1 @@\n-      writer->write_raw((void*)(array->byte_at_addr(0)), length_in_bytes);\n+      writer->write_raw(array->byte_at_addr(0), length_in_bytes);\n@@ -1479,1 +1474,1 @@\n-        writer->write_raw((void*)(array->char_at_addr(0)), length_in_bytes);\n+        writer->write_raw(array->char_at_addr(0), length_in_bytes);\n@@ -1487,1 +1482,1 @@\n-        writer->write_raw((void*)(array->short_at_addr(0)), length_in_bytes);\n+        writer->write_raw(array->short_at_addr(0), length_in_bytes);\n@@ -1495,1 +1490,1 @@\n-        writer->write_raw((void*)(array->bool_at_addr(0)), length_in_bytes);\n+        writer->write_raw(array->bool_at_addr(0), length_in_bytes);\n@@ -1503,1 +1498,1 @@\n-        writer->write_raw((void*)(array->long_at_addr(0)), length_in_bytes);\n+        writer->write_raw(array->long_at_addr(0), length_in_bytes);\n@@ -2285,2 +2280,1 @@\n-    writer()->write_raw((void*)header, (int)strlen(header));\n-    writer()->write_u1(0); \/\/ terminator\n+    writer()->write_raw(header, strlen(header) + 1); \/\/ NUL terminated\n","filename":"src\/hotspot\/share\/services\/heapDumper.cpp","additions":39,"deletions":45,"binary":false,"changes":84,"status":"modified"}]}