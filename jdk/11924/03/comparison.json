{"files":[{"patch":"@@ -39,0 +39,1 @@\n+import java.io.Serial;\n@@ -51,0 +52,1 @@\n+import java.util.Objects;\n@@ -102,1 +104,1 @@\n- * Otherwise the results of these methods reflect transient states\n+ * Otherwise, the results of these methods reflect transient states\n@@ -266,0 +268,1 @@\n+    @Serial\n@@ -288,1 +291,1 @@\n-     * hashes, and are readily distinguishable during search etc\n+     * hashes, and are readily distinguishable during search etc.\n@@ -363,1 +366,1 @@\n-     * steps, lock hold times, etc, to reasonable constants (roughly\n+     * steps, lock hold times, etc., to reasonable constants (roughly\n@@ -609,0 +612,1 @@\n+    @Serial\n@@ -625,1 +629,1 @@\n-    static class Node<K,V> implements Map.Entry<K,V> {\n+    static sealed class Node<K,V> implements Map.Entry<K,V> {\n@@ -642,0 +646,1 @@\n+        @Override\n@@ -643,0 +648,1 @@\n+        @Override\n@@ -644,0 +650,1 @@\n+        @Override\n@@ -645,0 +652,1 @@\n+        @Override\n@@ -648,0 +656,1 @@\n+        @Override\n@@ -652,0 +661,1 @@\n+        @Override\n@@ -653,3 +663,3 @@\n-            Object k, v, u; Map.Entry<?,?> e;\n-            return ((o instanceof Map.Entry) &&\n-                    (k = (e = (Map.Entry<?,?>)o).getKey()) != null &&\n+            Object k, v, u;\n+            return ((o instanceof Map.Entry<?, ?> e) &&\n+                    (k = e.getKey()) != null &&\n@@ -696,1 +706,1 @@\n-    static final int spread(int h) {\n+    static int spread(int h) {\n@@ -704,1 +714,1 @@\n-    private static final int tableSizeFor(int c) {\n+    private static int tableSizeFor(int c) {\n@@ -715,1 +725,1 @@\n-            Class<?> c; Type[] ts, as; ParameterizedType p;\n+            Class<?> c; Type[] ts, as;\n@@ -720,3 +730,2 @@\n-                    if ((t instanceof ParameterizedType) &&\n-                        ((p = (ParameterizedType)t).getRawType() ==\n-                         Comparable.class) &&\n+                    if ((t instanceof ParameterizedType p) &&\n+                            (p.getRawType() == Comparable.class) &&\n@@ -759,1 +768,1 @@\n-    static final <K,V> Node<K,V> tabAt(Node<K,V>[] tab, int i) {\n+    static <K,V> Node<K,V> tabAt(Node<K,V>[] tab, int i) {\n@@ -763,1 +772,1 @@\n-    static final <K,V> boolean casTabAt(Node<K,V>[] tab, int i,\n+    static <K,V> boolean casTabAt(Node<K,V>[] tab, int i,\n@@ -768,1 +777,1 @@\n-    static final <K,V> void setTabAt(Node<K,V>[] tab, int i, Node<K,V> v) {\n+    static <K,V> void setTabAt(Node<K,V>[] tab, int i, Node<K,V> v) {\n@@ -909,0 +918,1 @@\n+    @Override\n@@ -919,0 +929,1 @@\n+    @Override\n@@ -934,0 +945,1 @@\n+    @Override\n@@ -963,0 +975,1 @@\n+    @Override\n@@ -977,0 +990,1 @@\n+    @Override\n@@ -978,2 +992,1 @@\n-        if (value == null)\n-            throw new NullPointerException();\n+        Objects.requireNonNull(value);\n@@ -982,1 +995,1 @@\n-            Traverser<K,V> it = new Traverser<K,V>(t, t.length, 0, t.length);\n+            Traverser<K,V> it = new Traverser<>(t, t.length, 0, t.length);\n@@ -1005,0 +1018,1 @@\n+    @Override\n@@ -1011,1 +1025,2 @@\n-        if (key == null || value == null) throw new NullPointerException();\n+        Objects.requireNonNull(key);\n+        Objects.requireNonNull(value);\n@@ -1019,1 +1034,1 @@\n-                if (casTabAt(tab, i, null, new Node<K,V>(hash, key, value)))\n+                if (casTabAt(tab, i, null, new Node<>(hash, key, value)))\n@@ -1047,1 +1062,1 @@\n-                                    pred.next = new Node<K,V>(hash, key, value);\n+                                    pred.next = new Node<>(hash, key, value);\n@@ -1052,1 +1067,1 @@\n-                        else if (f instanceof TreeBin) {\n+                        else if (f instanceof TreeBin<K, V> t) {\n@@ -1055,2 +1070,1 @@\n-                            if ((p = ((TreeBin<K,V>)f).putTreeVal(hash, key,\n-                                                           value)) != null) {\n+                            if ((p = t.putTreeVal(hash, key, value)) != null) {\n@@ -1086,0 +1100,1 @@\n+    @Override\n@@ -1101,0 +1116,1 @@\n+    @Override\n@@ -1149,1 +1165,1 @@\n-                        else if (f instanceof TreeBin) {\n+                        else if (f instanceof TreeBin<K, V> t) {\n@@ -1151,1 +1167,0 @@\n-                            TreeBin<K,V> t = (TreeBin<K,V>)f;\n@@ -1186,0 +1201,1 @@\n+    @Override\n@@ -1203,2 +1219,2 @@\n-                                       (f instanceof TreeBin) ?\n-                                       ((TreeBin<K,V>)f).first : null);\n+                                       (f instanceof TreeBin<K, V> t) ?\n+                                       t.first : null);\n@@ -1236,0 +1252,1 @@\n+    @Override\n@@ -1239,1 +1256,1 @@\n-        return keySet = new KeySetView<K,V>(this, null);\n+        return keySet = new KeySetView<>(this, null);\n@@ -1263,1 +1280,1 @@\n-        return values = new ValuesView<K,V>(this);\n+        return values = new ValuesView<>(this);\n@@ -1286,1 +1303,1 @@\n-        return entrySet = new EntrySetView<K,V>(this);\n+        return entrySet = new EntrySetView<>(this);\n@@ -1300,1 +1317,1 @@\n-            Traverser<K,V> it = new Traverser<K,V>(t, t.length, 0, t.length);\n+            Traverser<K,V> it = new Traverser<>(t, t.length, 0, t.length);\n@@ -1321,1 +1338,1 @@\n-        Traverser<K,V> it = new Traverser<K,V>(t, f, 0, f);\n+        Traverser<K,V> it = new Traverser<>(t, f, 0, f);\n@@ -1352,1 +1369,1 @@\n-            if (!(o instanceof Map))\n+            if (!(o instanceof Map<?, ?> m))\n@@ -1354,1 +1371,0 @@\n-            Map<?,?> m = (Map<?,?>) o;\n@@ -1357,1 +1373,1 @@\n-            Traverser<K,V> it = new Traverser<K,V>(t, f, 0, f);\n+            Traverser<K,V> it = new Traverser<>(t, f, 0, f);\n@@ -1380,1 +1396,2 @@\n-    static class Segment<K,V> extends ReentrantLock implements Serializable {\n+    static final class Segment<K,V> extends ReentrantLock implements Serializable {\n+        @Serial\n@@ -1396,0 +1413,1 @@\n+    @Serial\n@@ -1412,1 +1430,1 @@\n-            segments[i] = new Segment<K,V>(LOAD_FACTOR);\n+            segments[i] = new Segment<>(LOAD_FACTOR);\n@@ -1421,1 +1439,1 @@\n-            Traverser<K,V> it = new Traverser<K,V>(t, t.length, 0, t.length);\n+            Traverser<K,V> it = new Traverser<>(t, t.length, 0, t.length);\n@@ -1438,0 +1456,1 @@\n+    @Serial\n@@ -1457,1 +1476,1 @@\n-                p = new Node<K,V>(spread(k.hashCode()), k, v, p);\n+                p = new Node<>(spread(k.hashCode()), k, v, p);\n@@ -1506,1 +1525,1 @@\n-                                TreeNode<K,V> t = new TreeNode<K,V>\n+                                TreeNode<K,V> t = new TreeNode<>\n@@ -1514,1 +1533,1 @@\n-                            setTabAt(tab, j, new TreeBin<K,V>(hd));\n+                            setTabAt(tab, j, new TreeBin<>(hd));\n@@ -1540,0 +1559,1 @@\n+    @Override\n@@ -1549,0 +1569,1 @@\n+    @Override\n@@ -1550,2 +1571,1 @@\n-        if (key == null)\n-            throw new NullPointerException();\n+        Objects.requireNonNull(key);\n@@ -1560,0 +1580,1 @@\n+    @Override\n@@ -1561,2 +1582,3 @@\n-        if (key == null || oldValue == null || newValue == null)\n-            throw new NullPointerException();\n+        Objects.requireNonNull(key);\n+        Objects.requireNonNull(oldValue);\n+        Objects.requireNonNull(newValue);\n@@ -1573,0 +1595,1 @@\n+    @Override\n@@ -1574,2 +1597,2 @@\n-        if (key == null || value == null)\n-            throw new NullPointerException();\n+        Objects.requireNonNull(key);\n+        Objects.requireNonNull(value);\n@@ -1592,0 +1615,1 @@\n+    @Override\n@@ -1597,0 +1621,1 @@\n+    @Override\n@@ -1598,1 +1623,1 @@\n-        if (action == null) throw new NullPointerException();\n+        Objects.requireNonNull(action);\n@@ -1601,1 +1626,1 @@\n-            Traverser<K,V> it = new Traverser<K,V>(t, t.length, 0, t.length);\n+            Traverser<K,V> it = new Traverser<>(t, t.length, 0, t.length);\n@@ -1608,0 +1633,1 @@\n+    @Override\n@@ -1609,1 +1635,1 @@\n-        if (function == null) throw new NullPointerException();\n+        Objects.requireNonNull(function);\n@@ -1612,1 +1638,1 @@\n-            Traverser<K,V> it = new Traverser<K,V>(t, t.length, 0, t.length);\n+            Traverser<K,V> it = new Traverser<>(t, t.length, 0, t.length);\n@@ -1617,2 +1643,1 @@\n-                    if (newValue == null)\n-                        throw new NullPointerException();\n+                    Objects.requireNonNull(newValue);\n@@ -1631,1 +1656,1 @@\n-        if (function == null) throw new NullPointerException();\n+        Objects.requireNonNull(function);\n@@ -1635,1 +1660,1 @@\n-            Traverser<K,V> it = new Traverser<K,V>(t, t.length, 0, t.length);\n+            Traverser<K,V> it = new Traverser<>(t, t.length, 0, t.length);\n@@ -1651,1 +1676,1 @@\n-        if (function == null) throw new NullPointerException();\n+        Objects.requireNonNull(function);\n@@ -1655,1 +1680,1 @@\n-            Traverser<K,V> it = new Traverser<K,V>(t, t.length, 0, t.length);\n+            Traverser<K,V> it = new Traverser<>(t, t.length, 0, t.length);\n@@ -1691,0 +1716,1 @@\n+    @Override\n@@ -1692,2 +1718,2 @@\n-        if (key == null || mappingFunction == null)\n-            throw new NullPointerException();\n+        Objects.requireNonNull(key);\n+        Objects.requireNonNull(mappingFunction);\n@@ -1702,1 +1728,1 @@\n-                Node<K,V> r = new ReservationNode<K,V>();\n+                Node<K,V> r = new ReservationNode<>();\n@@ -1709,1 +1735,1 @@\n-                                node = new Node<K,V>(h, key, val);\n+                                node = new Node<>(h, key, val);\n@@ -1744,1 +1770,1 @@\n-                                        pred.next = new Node<K,V>(h, key, val);\n+                                        pred.next = new Node<>(h, key, val);\n@@ -1750,1 +1776,1 @@\n-                        else if (f instanceof TreeBin) {\n+                        else if (f instanceof TreeBin<K, V> t) {\n@@ -1752,1 +1778,0 @@\n-                            TreeBin<K,V> t = (TreeBin<K,V>)f;\n@@ -1803,0 +1828,1 @@\n+    @Override\n@@ -1804,2 +1830,2 @@\n-        if (key == null || remappingFunction == null)\n-            throw new NullPointerException();\n+        Objects.requireNonNull(key);\n+        Objects.requireNonNull(remappingFunction);\n@@ -1846,1 +1872,1 @@\n-                        else if (f instanceof TreeBin) {\n+                        else if (f instanceof TreeBin<K, V> t) {\n@@ -1848,1 +1874,0 @@\n-                            TreeBin<K,V> t = (TreeBin<K,V>)f;\n@@ -1871,1 +1896,1 @@\n-            addCount((long)delta, binCount);\n+            addCount(delta, binCount);\n@@ -1897,0 +1922,1 @@\n+    @Override\n@@ -1899,2 +1925,2 @@\n-        if (key == null || remappingFunction == null)\n-            throw new NullPointerException();\n+        Objects.requireNonNull(key);\n+        Objects.requireNonNull(remappingFunction);\n@@ -1910,1 +1936,1 @@\n-                Node<K,V> r = new ReservationNode<K,V>();\n+                Node<K,V> r = new ReservationNode<>();\n@@ -1918,1 +1944,1 @@\n-                                node = new Node<K,V>(h, key, val);\n+                                node = new Node<>(h, key, val);\n@@ -1960,1 +1986,1 @@\n-                                        pred.next = new Node<K,V>(h, key, val);\n+                                        pred.next = new Node<>(h, key, val);\n@@ -1966,1 +1992,1 @@\n-                        else if (f instanceof TreeBin) {\n+                        else if (f instanceof TreeBin<K, V> t) {\n@@ -1968,1 +1994,0 @@\n-                            TreeBin<K,V> t = (TreeBin<K,V>)f;\n@@ -2002,1 +2027,1 @@\n-            addCount((long)delta, binCount);\n+            addCount(delta, binCount);\n@@ -2026,0 +2051,1 @@\n+    @Override\n@@ -2027,2 +2053,3 @@\n-        if (key == null || value == null || remappingFunction == null)\n-            throw new NullPointerException();\n+        Objects.requireNonNull(key);\n+        Objects.requireNonNull(value);\n+        Objects.requireNonNull(remappingFunction);\n@@ -2038,1 +2065,1 @@\n-                if (casTabAt(tab, i, null, new Node<K,V>(h, key, value))) {\n+                if (casTabAt(tab, i, null, new Node<>(h, key, value))) {\n@@ -2073,1 +2100,1 @@\n-                                    pred.next = new Node<K,V>(h, key, val);\n+                                    pred.next = new Node<>(h, key, val);\n@@ -2078,1 +2105,1 @@\n-                        else if (f instanceof TreeBin) {\n+                        else if (f instanceof TreeBin<K, V> t) {\n@@ -2080,1 +2107,0 @@\n-                            TreeBin<K,V> t = (TreeBin<K,V>)f;\n@@ -2112,1 +2138,1 @@\n-            addCount((long)delta, binCount);\n+            addCount(delta, binCount);\n@@ -2147,1 +2173,1 @@\n-        return new KeyIterator<K,V>(t, f, 0, f, this);\n+        return new KeyIterator<>(t, f, 0, f, this);\n@@ -2159,1 +2185,1 @@\n-        return new ValueIterator<K,V>(t, f, 0, f, this);\n+        return new ValueIterator<>(t, f, 0, f, this);\n@@ -2176,1 +2202,1 @@\n-        return (n < 0L) ? 0L : n; \/\/ ignore transient negative values\n+        return Math.max(n, 0L); \/\/ ignore transient negative values\n@@ -2188,2 +2214,2 @@\n-        return new KeySetView<K,Boolean>\n-            (new ConcurrentHashMap<K,Boolean>(), Boolean.TRUE);\n+        return new KeySetView<>\n+            (new ConcurrentHashMap<>(), Boolean.TRUE);\n@@ -2205,2 +2231,2 @@\n-        return new KeySetView<K,Boolean>\n-            (new ConcurrentHashMap<K,Boolean>(initialCapacity), Boolean.TRUE);\n+        return new KeySetView<>\n+            (new ConcurrentHashMap<>(initialCapacity), Boolean.TRUE);\n@@ -2221,3 +2247,2 @@\n-        if (mappedValue == null)\n-            throw new NullPointerException();\n-        return new KeySetView<K,V>(this, mappedValue);\n+        Objects.requireNonNull(mappedValue);\n+        return new KeySetView<>(this, mappedValue);\n@@ -2238,0 +2263,1 @@\n+        @Override\n@@ -2251,2 +2277,2 @@\n-                        if (e instanceof ForwardingNode) {\n-                            tab = ((ForwardingNode<K,V>)e).nextTable;\n+                        if (e instanceof ForwardingNode<K, V> f) {\n+                            tab = f.nextTable;\n@@ -2284,1 +2310,1 @@\n-    static final int resizeStamp(int n) {\n+    static int resizeStamp(int n) {\n@@ -2291,1 +2317,1 @@\n-    private final Node<K,V>[] initTable() {\n+    private Node<K,V>[] initTable() {\n@@ -2324,1 +2350,1 @@\n-    private final void addCount(long x, int check) {\n+    private void addCount(long x, int check) {\n@@ -2365,2 +2391,2 @@\n-        if (tab != null && (f instanceof ForwardingNode) &&\n-            (nextTab = ((ForwardingNode<K,V>)f).nextTable) != null) {\n+        if (tab != null && (f instanceof ForwardingNode<K, V> fn) &&\n+            (nextTab = fn.nextTable) != null) {\n@@ -2388,1 +2414,1 @@\n-    private final void tryPresize(int size) {\n+    private void tryPresize(int size) {\n@@ -2395,1 +2421,1 @@\n-                n = (sc > c) ? sc : c;\n+                n = Math.max(sc, c);\n@@ -2424,1 +2450,1 @@\n-    private final void transfer(Node<K,V>[] tab, Node<K,V>[] nextTab) {\n+    private void transfer(Node<K,V>[] tab, Node<K,V>[] nextTab) {\n@@ -2441,1 +2467,1 @@\n-        ForwardingNode<K,V> fwd = new ForwardingNode<K,V>(nextTab);\n+        ForwardingNode<K,V> fwd = new ForwardingNode<>(nextTab);\n@@ -2507,1 +2533,1 @@\n-                                    ln = new Node<K,V>(ph, pk, pv, ln);\n+                                    ln = new Node<>(ph, pk, pv, ln);\n@@ -2509,1 +2535,1 @@\n-                                    hn = new Node<K,V>(ph, pk, pv, hn);\n+                                    hn = new Node<>(ph, pk, pv, hn);\n@@ -2516,2 +2542,1 @@\n-                        else if (f instanceof TreeBin) {\n-                            TreeBin<K,V> t = (TreeBin<K,V>)f;\n+                        else if (f instanceof TreeBin<K, V> t) {\n@@ -2523,1 +2548,1 @@\n-                                TreeNode<K,V> p = new TreeNode<K,V>\n+                                TreeNode<K,V> p = new TreeNode<>\n@@ -2543,1 +2568,1 @@\n-                                (hc != 0) ? new TreeBin<K,V>(lo) : t;\n+                                (hc != 0) ? new TreeBin<>(lo) : t;\n@@ -2545,1 +2570,1 @@\n-                                (lc != 0) ? new TreeBin<K,V>(hi) : t;\n+                                (lc != 0) ? new TreeBin<>(hi) : t;\n@@ -2582,1 +2607,1 @@\n-    private final void fullAddCount(long x, boolean wasUncontended) {\n+    private void fullAddCount(long x, boolean wasUncontended) {\n@@ -2665,1 +2690,1 @@\n-    private final void treeifyBin(Node<K,V>[] tab, int index) {\n+    private void treeifyBin(Node<K,V>[] tab, int index) {\n@@ -2676,1 +2701,1 @@\n-                                new TreeNode<K,V>(e.hash, e.key, e.val,\n+                                new TreeNode<>(e.hash, e.key, e.val,\n@@ -2684,1 +2709,1 @@\n-                        setTabAt(tab, index, new TreeBin<K,V>(hd));\n+                        setTabAt(tab, index, new TreeBin<>(hd));\n@@ -2697,1 +2722,1 @@\n-            Node<K,V> p = new Node<K,V>(q.hash, q.key, q.val);\n+            Node<K,V> p = new Node<>(q.hash, q.key, q.val);\n@@ -2725,0 +2750,1 @@\n+        @Override\n@@ -2733,1 +2759,1 @@\n-        final TreeNode<K,V> findTreeNode(int h, Object k, Class<?> kc) {\n+        TreeNode<K,V> findTreeNode(int h, Object k, Class<?> kc) {\n@@ -2849,1 +2875,1 @@\n-        private final void lockRoot() {\n+        private void lockRoot() {\n@@ -2857,1 +2883,1 @@\n-        private final void unlockRoot() {\n+        private void unlockRoot() {\n@@ -2864,1 +2890,1 @@\n-        private final void contendedLock() {\n+        private void contendedLock() {\n@@ -2888,1 +2914,2 @@\n-        final Node<K,V> find(int h, Object k) {\n+        @Override\n+        Node<K,V> find(int h, Object k) {\n@@ -2921,1 +2948,1 @@\n-        final TreeNode<K,V> putTreeVal(int h, K k, V v) {\n+        TreeNode<K,V> putTreeVal(int h, K k, V v) {\n@@ -2927,1 +2954,1 @@\n-                    first = root = new TreeNode<K,V>(h, k, v, null, null);\n+                    first = root = new TreeNode<>(h, k, v, null, null);\n@@ -2954,1 +2981,1 @@\n-                    first = x = new TreeNode<K,V>(h, k, v, f, xp);\n+                    first = x = new TreeNode<>(h, k, v, f, xp);\n@@ -2988,1 +3015,1 @@\n-        final boolean removeTreeNode(TreeNode<K,V> p) {\n+        boolean removeTreeNode(TreeNode<K,V> p) {\n@@ -3043,4 +3070,1 @@\n-                    if (sr != null)\n-                        replacement = sr;\n-                    else\n-                        replacement = p;\n+                    replacement = Objects.requireNonNullElse(sr, p);\n@@ -3050,4 +3074,1 @@\n-                else if (pr != null)\n-                    replacement = pr;\n-                else\n-                    replacement = p;\n+                else replacement = Objects.requireNonNullElse(pr, p);\n@@ -3336,1 +3357,1 @@\n-    static class Traverser<K,V> {\n+    static sealed class Traverser<K,V> {\n@@ -3368,2 +3389,2 @@\n-                    if (e instanceof ForwardingNode) {\n-                        tab = ((ForwardingNode<K,V>)e).nextTable;\n+                    if (e instanceof ForwardingNode<K, V> f) {\n+                        tab = f.nextTable;\n@@ -3374,2 +3395,2 @@\n-                    else if (e instanceof TreeBin)\n-                        e = ((TreeBin<K,V>)e).first;\n+                    else if (e instanceof TreeBin<K, V> tb)\n+                        e = tb.first;\n@@ -3394,1 +3415,1 @@\n-                s = new TableStack<K,V>();\n+                s = new TableStack<>();\n@@ -3428,1 +3449,1 @@\n-    static class BaseIterator<K,V> extends Traverser<K,V> {\n+    static sealed class BaseIterator<K,V> extends Traverser<K,V> {\n@@ -3457,1 +3478,2 @@\n-        public final K next() {\n+        @Override\n+        public K next() {\n@@ -3467,1 +3489,2 @@\n-        public final K nextElement() { return next(); }\n+        @Override\n+        public K nextElement() { return next(); }\n@@ -3477,1 +3500,2 @@\n-        public final V next() {\n+        @Override\n+        public V next() {\n@@ -3487,1 +3511,2 @@\n-        public final V nextElement() { return next(); }\n+        @Override\n+        public V nextElement() { return next(); }\n@@ -3497,1 +3522,2 @@\n-        public final Map.Entry<K,V> next() {\n+        @Override\n+        public Map.Entry<K,V> next() {\n@@ -3505,1 +3531,1 @@\n-            return new MapEntry<K,V>(k, v, map);\n+            return new MapEntry<>(k, v, map);\n@@ -3521,0 +3547,2 @@\n+\n+        @Override\n@@ -3522,0 +3550,1 @@\n+        @Override\n@@ -3523,0 +3552,1 @@\n+        @Override\n@@ -3524,0 +3554,1 @@\n+        @Override\n@@ -3528,0 +3559,1 @@\n+        @Override\n@@ -3529,3 +3561,3 @@\n-            Object k, v; Map.Entry<?,?> e;\n-            return ((o instanceof Map.Entry) &&\n-                    (k = (e = (Map.Entry<?,?>)o).getKey()) != null &&\n+            Object k, v;\n+            return ((o instanceof Map.Entry<?, ?> e) &&\n+                    (k = e.getKey()) != null &&\n@@ -3545,0 +3577,1 @@\n+        @Override\n@@ -3546,1 +3579,1 @@\n-            if (value == null) throw new NullPointerException();\n+            Objects.requireNonNull(value);\n@@ -3563,0 +3596,1 @@\n+        @Override\n@@ -3566,1 +3600,1 @@\n-                new KeySpliterator<K,V>(tab, baseSize, baseLimit = h,\n+                new KeySpliterator<>(tab, baseSize, baseLimit = h,\n@@ -3570,0 +3604,1 @@\n+        @Override\n@@ -3571,1 +3606,1 @@\n-            if (action == null) throw new NullPointerException();\n+            Objects.requireNonNull(action);\n@@ -3576,0 +3611,1 @@\n+        @Override\n@@ -3577,1 +3613,1 @@\n-            if (action == null) throw new NullPointerException();\n+            Objects.requireNonNull(action);\n@@ -3585,0 +3621,1 @@\n+        @Override\n@@ -3587,0 +3624,1 @@\n+        @Override\n@@ -3602,0 +3640,1 @@\n+        @Override\n@@ -3605,1 +3644,1 @@\n-                new ValueSpliterator<K,V>(tab, baseSize, baseLimit = h,\n+                new ValueSpliterator<>(tab, baseSize, baseLimit = h,\n@@ -3609,0 +3648,1 @@\n+        @Override\n@@ -3610,1 +3650,1 @@\n-            if (action == null) throw new NullPointerException();\n+            Objects.requireNonNull(action);\n@@ -3615,0 +3655,1 @@\n+        @Override\n@@ -3616,1 +3657,1 @@\n-            if (action == null) throw new NullPointerException();\n+            Objects.requireNonNull(action);\n@@ -3624,0 +3665,1 @@\n+        @Override\n@@ -3626,0 +3668,1 @@\n+        @Override\n@@ -3642,0 +3685,1 @@\n+        @Override\n@@ -3645,1 +3689,1 @@\n-                new EntrySpliterator<K,V>(tab, baseSize, baseLimit = h,\n+                new EntrySpliterator<>(tab, baseSize, baseLimit = h,\n@@ -3649,0 +3693,1 @@\n+        @Override\n@@ -3650,1 +3695,1 @@\n-            if (action == null) throw new NullPointerException();\n+            Objects.requireNonNull(action);\n@@ -3652,1 +3697,1 @@\n-                action.accept(new MapEntry<K,V>(p.key, p.val, map));\n+                action.accept(new MapEntry<>(p.key, p.val, map));\n@@ -3655,0 +3700,1 @@\n+        @Override\n@@ -3656,1 +3702,1 @@\n-            if (action == null) throw new NullPointerException();\n+            Objects.requireNonNull(action);\n@@ -3660,1 +3706,1 @@\n-            action.accept(new MapEntry<K,V>(p.key, p.val, map));\n+            action.accept(new MapEntry<>(p.key, p.val, map));\n@@ -3664,0 +3710,1 @@\n+        @Override\n@@ -3666,0 +3713,1 @@\n+        @Override\n@@ -3700,2 +3748,2 @@\n-        if (action == null) throw new NullPointerException();\n-        new ForEachMappingTask<K,V>\n+        Objects.requireNonNull(action);\n+        new ForEachMappingTask<>\n@@ -3722,2 +3770,2 @@\n-        if (transformer == null || action == null)\n-            throw new NullPointerException();\n+        Objects.requireNonNull(transformer);\n+        Objects.requireNonNull(action);\n@@ -3747,2 +3795,2 @@\n-        if (searchFunction == null) throw new NullPointerException();\n-        return new SearchMappingsTask<K,V,U>\n+        Objects.requireNonNull(searchFunction);\n+        return new SearchMappingsTask<>\n@@ -3772,3 +3820,3 @@\n-        if (transformer == null || reducer == null)\n-            throw new NullPointerException();\n-        return new MapReduceMappingsTask<K,V,U>\n+        Objects.requireNonNull(transformer);\n+        Objects.requireNonNull(reducer);\n+        return new MapReduceMappingsTask<>\n@@ -3798,3 +3846,3 @@\n-        if (transformer == null || reducer == null)\n-            throw new NullPointerException();\n-        return new MapReduceMappingsToDoubleTask<K,V>\n+        Objects.requireNonNull(transformer);\n+        Objects.requireNonNull(reducer);\n+        return new MapReduceMappingsToDoubleTask<>\n@@ -3824,3 +3872,3 @@\n-        if (transformer == null || reducer == null)\n-            throw new NullPointerException();\n-        return new MapReduceMappingsToLongTask<K,V>\n+        Objects.requireNonNull(transformer);\n+        Objects.requireNonNull(reducer);\n+        return new MapReduceMappingsToLongTask<>\n@@ -3850,3 +3898,3 @@\n-        if (transformer == null || reducer == null)\n-            throw new NullPointerException();\n-        return new MapReduceMappingsToIntTask<K,V>\n+        Objects.requireNonNull(transformer);\n+        Objects.requireNonNull(reducer);\n+        return new MapReduceMappingsToIntTask<>\n@@ -3867,2 +3915,2 @@\n-        if (action == null) throw new NullPointerException();\n-        new ForEachKeyTask<K,V>\n+        Objects.requireNonNull(action);\n+        new ForEachKeyTask<>\n@@ -3889,2 +3937,2 @@\n-        if (transformer == null || action == null)\n-            throw new NullPointerException();\n+        Objects.requireNonNull(transformer);\n+        Objects.requireNonNull(action);\n@@ -3914,2 +3962,2 @@\n-        if (searchFunction == null) throw new NullPointerException();\n-        return new SearchKeysTask<K,V,U>\n+        Objects.requireNonNull(searchFunction);\n+        return new SearchKeysTask<>\n@@ -3933,2 +3981,2 @@\n-        if (reducer == null) throw new NullPointerException();\n-        return new ReduceKeysTask<K,V>\n+        Objects.requireNonNull(reducer);\n+        return new ReduceKeysTask<>\n@@ -3958,3 +4006,3 @@\n-        if (transformer == null || reducer == null)\n-            throw new NullPointerException();\n-        return new MapReduceKeysTask<K,V,U>\n+        Objects.requireNonNull(transformer);\n+        Objects.requireNonNull(reducer);\n+        return new MapReduceKeysTask<>\n@@ -3984,3 +4032,3 @@\n-        if (transformer == null || reducer == null)\n-            throw new NullPointerException();\n-        return new MapReduceKeysToDoubleTask<K,V>\n+        Objects.requireNonNull(transformer);\n+        Objects.requireNonNull(reducer);\n+        return new MapReduceKeysToDoubleTask<>\n@@ -4010,3 +4058,3 @@\n-        if (transformer == null || reducer == null)\n-            throw new NullPointerException();\n-        return new MapReduceKeysToLongTask<K,V>\n+        Objects.requireNonNull(transformer);\n+        Objects.requireNonNull(reducer);\n+        return new MapReduceKeysToLongTask<>\n@@ -4036,3 +4084,3 @@\n-        if (transformer == null || reducer == null)\n-            throw new NullPointerException();\n-        return new MapReduceKeysToIntTask<K,V>\n+        Objects.requireNonNull(transformer);\n+        Objects.requireNonNull(reducer);\n+        return new MapReduceKeysToIntTask<>\n@@ -4053,3 +4101,2 @@\n-        if (action == null)\n-            throw new NullPointerException();\n-        new ForEachValueTask<K,V>\n+        Objects.requireNonNull(action);\n+        new ForEachValueTask<>\n@@ -4076,3 +4123,3 @@\n-        if (transformer == null || action == null)\n-            throw new NullPointerException();\n-        new ForEachTransformedValueTask<K,V,U>\n+        Objects.requireNonNull(transformer);\n+        Objects.requireNonNull(action);\n+        new ForEachTransformedValueTask<>\n@@ -4101,2 +4148,2 @@\n-        if (searchFunction == null) throw new NullPointerException();\n-        return new SearchValuesTask<K,V,U>\n+        Objects.requireNonNull(searchFunction);\n+        return new SearchValuesTask<>\n@@ -4119,2 +4166,2 @@\n-        if (reducer == null) throw new NullPointerException();\n-        return new ReduceValuesTask<K,V>\n+        Objects.requireNonNull(reducer);\n+        return new ReduceValuesTask<>\n@@ -4144,3 +4191,3 @@\n-        if (transformer == null || reducer == null)\n-            throw new NullPointerException();\n-        return new MapReduceValuesTask<K,V,U>\n+        Objects.requireNonNull(transformer);\n+        Objects.requireNonNull(reducer);\n+        return new MapReduceValuesTask<>\n@@ -4170,3 +4217,3 @@\n-        if (transformer == null || reducer == null)\n-            throw new NullPointerException();\n-        return new MapReduceValuesToDoubleTask<K,V>\n+        Objects.requireNonNull(transformer);\n+        Objects.requireNonNull(reducer);\n+        return new MapReduceValuesToDoubleTask<>\n@@ -4196,3 +4243,3 @@\n-        if (transformer == null || reducer == null)\n-            throw new NullPointerException();\n-        return new MapReduceValuesToLongTask<K,V>\n+        Objects.requireNonNull(transformer);\n+        Objects.requireNonNull(reducer);\n+        return new MapReduceValuesToLongTask<>\n@@ -4222,3 +4269,3 @@\n-        if (transformer == null || reducer == null)\n-            throw new NullPointerException();\n-        return new MapReduceValuesToIntTask<K,V>\n+        Objects.requireNonNull(transformer);\n+        Objects.requireNonNull(reducer);\n+        return new MapReduceValuesToIntTask<>\n@@ -4239,2 +4286,2 @@\n-        if (action == null) throw new NullPointerException();\n-        new ForEachEntryTask<K,V>(null, batchFor(parallelismThreshold), 0, 0, table,\n+        Objects.requireNonNull(action);\n+        new ForEachEntryTask<>(null, batchFor(parallelismThreshold), 0, 0, table,\n@@ -4260,3 +4307,3 @@\n-        if (transformer == null || action == null)\n-            throw new NullPointerException();\n-        new ForEachTransformedEntryTask<K,V,U>\n+        Objects.requireNonNull(transformer);\n+        Objects.requireNonNull(action);\n+        new ForEachTransformedEntryTask<>\n@@ -4285,2 +4332,2 @@\n-        if (searchFunction == null) throw new NullPointerException();\n-        return new SearchEntriesTask<K,V,U>\n+        Objects.requireNonNull(searchFunction);\n+        return new SearchEntriesTask<>\n@@ -4303,2 +4350,2 @@\n-        if (reducer == null) throw new NullPointerException();\n-        return new ReduceEntriesTask<K,V>\n+        Objects.requireNonNull(reducer);\n+        return new ReduceEntriesTask<>\n@@ -4328,3 +4375,3 @@\n-        if (transformer == null || reducer == null)\n-            throw new NullPointerException();\n-        return new MapReduceEntriesTask<K,V,U>\n+        Objects.requireNonNull(transformer);\n+        Objects.requireNonNull(reducer);\n+        return new MapReduceEntriesTask<>\n@@ -4354,3 +4401,3 @@\n-        if (transformer == null || reducer == null)\n-            throw new NullPointerException();\n-        return new MapReduceEntriesToDoubleTask<K,V>\n+        Objects.requireNonNull(transformer);\n+        Objects.requireNonNull(reducer);\n+        return new MapReduceEntriesToDoubleTask<>\n@@ -4380,3 +4427,3 @@\n-        if (transformer == null || reducer == null)\n-            throw new NullPointerException();\n-        return new MapReduceEntriesToLongTask<K,V>\n+        Objects.requireNonNull(transformer);\n+        Objects.requireNonNull(reducer);\n+        return new MapReduceEntriesToLongTask<>\n@@ -4406,3 +4453,3 @@\n-        if (transformer == null || reducer == null)\n-            throw new NullPointerException();\n-        return new MapReduceEntriesToIntTask<K,V>\n+        Objects.requireNonNull(transformer);\n+        Objects.requireNonNull(reducer);\n+        return new MapReduceEntriesToIntTask<>\n@@ -4421,0 +4468,1 @@\n+        @Serial\n@@ -4436,0 +4484,1 @@\n+        @Override\n@@ -4437,0 +4486,1 @@\n+        @Override\n@@ -4438,0 +4488,1 @@\n+        @Override\n@@ -4450,0 +4501,1 @@\n+        @Override\n@@ -4451,0 +4503,1 @@\n+        @Override\n@@ -4452,0 +4505,1 @@\n+        @Override\n@@ -4456,0 +4510,1 @@\n+        @Override\n@@ -4479,0 +4534,1 @@\n+        @Override\n@@ -4519,0 +4575,1 @@\n+        @Override\n@@ -4535,0 +4592,1 @@\n+        @Override\n@@ -4545,0 +4603,1 @@\n+        @Override\n@@ -4546,1 +4605,1 @@\n-            if (c == null) throw new NullPointerException();\n+            Objects.requireNonNull(c);\n@@ -4567,0 +4626,1 @@\n+        @Override\n@@ -4568,1 +4628,1 @@\n-            if (c == null) throw new NullPointerException();\n+            Objects.requireNonNull(c);\n@@ -4597,0 +4657,1 @@\n+        @Serial\n@@ -4618,0 +4679,1 @@\n+        @Override\n@@ -4629,0 +4691,1 @@\n+        @Override\n@@ -4634,0 +4697,1 @@\n+        @Override\n@@ -4638,1 +4702,1 @@\n-            return new KeyIterator<K,V>(t, f, 0, f, m);\n+            return new KeyIterator<>(t, f, 0, f, m);\n@@ -4651,0 +4715,1 @@\n+        @Override\n@@ -4669,0 +4734,1 @@\n+        @Override\n@@ -4681,0 +4747,1 @@\n+        @Override\n@@ -4688,0 +4755,1 @@\n+        @Override\n@@ -4689,3 +4757,2 @@\n-            Set<?> c;\n-            return ((o instanceof Set) &&\n-                    ((c = (Set<?>)o) == this ||\n+            return ((o instanceof Set<?> c) &&\n+                    (c == this ||\n@@ -4695,0 +4762,1 @@\n+        @Override\n@@ -4700,1 +4768,1 @@\n-            return new KeySpliterator<K,V>(t, f, 0, f, n < 0L ? 0L : n);\n+            return new KeySpliterator<>(t, f, 0, f, Math.max(n, 0L));\n@@ -4703,0 +4771,1 @@\n+        @Override\n@@ -4704,1 +4773,1 @@\n-            if (action == null) throw new NullPointerException();\n+            Objects.requireNonNull(action);\n@@ -4707,1 +4776,1 @@\n-                Traverser<K,V> it = new Traverser<K,V>(t, t.length, 0, t.length);\n+                Traverser<K,V> it = new Traverser<>(t, t.length, 0, t.length);\n@@ -4721,0 +4790,1 @@\n+        @Serial\n@@ -4723,1 +4793,2 @@\n-        public final boolean contains(Object o) {\n+        @Override\n+        public boolean contains(Object o) {\n@@ -4727,1 +4798,2 @@\n-        public final boolean remove(Object o) {\n+        @Override\n+        public boolean remove(Object o) {\n@@ -4739,1 +4811,2 @@\n-        public final Iterator<V> iterator() {\n+        @Override\n+        public Iterator<V> iterator() {\n@@ -4743,1 +4816,1 @@\n-            return new ValueIterator<K,V>(t, f, 0, f, m);\n+            return new ValueIterator<>(t, f, 0, f, m);\n@@ -4746,1 +4819,2 @@\n-        public final boolean add(V e) {\n+        @Override\n+        public boolean add(V e) {\n@@ -4749,1 +4823,2 @@\n-        public final boolean addAll(Collection<? extends V> c) {\n+        @Override\n+        public boolean addAll(Collection<? extends V> c) {\n@@ -4754,1 +4829,1 @@\n-            if (c == null) throw new NullPointerException();\n+            Objects.requireNonNull(c);\n@@ -4765,0 +4840,1 @@\n+        @Override\n@@ -4769,0 +4845,1 @@\n+        @Override\n@@ -4774,1 +4851,1 @@\n-            return new ValueSpliterator<K,V>(t, f, 0, f, n < 0L ? 0L : n);\n+            return new ValueSpliterator<>(t, f, 0, f, Math.max(n, 0L));\n@@ -4777,0 +4854,1 @@\n+        @Override\n@@ -4778,1 +4856,1 @@\n-            if (action == null) throw new NullPointerException();\n+            Objects.requireNonNull(action);\n@@ -4781,1 +4859,1 @@\n-                Traverser<K,V> it = new Traverser<K,V>(t, t.length, 0, t.length);\n+                Traverser<K,V> it = new Traverser<>(t, t.length, 0, t.length);\n@@ -4795,0 +4873,1 @@\n+        @Serial\n@@ -4798,0 +4877,1 @@\n+        @Override\n@@ -4799,3 +4879,3 @@\n-            Object k, v, r; Map.Entry<?,?> e;\n-            return ((o instanceof Map.Entry) &&\n-                    (k = (e = (Map.Entry<?,?>)o).getKey()) != null &&\n+            Object k, v, r;\n+            return ((o instanceof Map.Entry<?, ?> e) &&\n+                    (k = e.getKey()) != null &&\n@@ -4807,0 +4887,1 @@\n+        @Override\n@@ -4808,3 +4889,3 @@\n-            Object k, v; Map.Entry<?,?> e;\n-            return ((o instanceof Map.Entry) &&\n-                    (k = (e = (Map.Entry<?,?>)o).getKey()) != null &&\n+            Object k, v;\n+            return ((o instanceof Map.Entry<?, ?> e) &&\n+                    (k = e.getKey()) != null &&\n@@ -4818,0 +4899,1 @@\n+        @Override\n@@ -4822,1 +4904,1 @@\n-            return new EntryIterator<K,V>(t, f, 0, f, m);\n+            return new EntryIterator<>(t, f, 0, f, m);\n@@ -4825,0 +4907,1 @@\n+        @Override\n@@ -4829,0 +4912,1 @@\n+        @Override\n@@ -4838,0 +4922,1 @@\n+        @Override\n@@ -4842,1 +4927,2 @@\n-        public final int hashCode() {\n+        @Override\n+        public int hashCode() {\n@@ -4846,1 +4932,1 @@\n-                Traverser<K,V> it = new Traverser<K,V>(t, t.length, 0, t.length);\n+                Traverser<K,V> it = new Traverser<>(t, t.length, 0, t.length);\n@@ -4854,4 +4940,4 @@\n-        public final boolean equals(Object o) {\n-            Set<?> c;\n-            return ((o instanceof Set) &&\n-                    ((c = (Set<?>)o) == this ||\n+        @Override\n+        public boolean equals(Object o) {\n+            return ((o instanceof Set<?> c) &&\n+                     (c == this ||\n@@ -4861,0 +4947,1 @@\n+        @Override\n@@ -4866,1 +4953,1 @@\n-            return new EntrySpliterator<K,V>(t, f, 0, f, n < 0L ? 0L : n, m);\n+            return new EntrySpliterator<>(t, f, 0, f, Math.max(n, 0L), m);\n@@ -4869,0 +4956,1 @@\n+        @Override\n@@ -4870,1 +4958,1 @@\n-            if (action == null) throw new NullPointerException();\n+            Objects.requireNonNull(action);\n@@ -4873,1 +4961,1 @@\n-                Traverser<K,V> it = new Traverser<K,V>(t, t.length, 0, t.length);\n+                Traverser<K,V> it = new Traverser<>(t, t.length, 0, t.length);\n@@ -4875,1 +4963,1 @@\n-                    action.accept(new MapEntry<K,V>(p.key, p.val, map));\n+                    action.accept(new MapEntry<>(p.key, p.val, map));\n@@ -4888,1 +4976,1 @@\n-    abstract static class BulkTask<K,V,R> extends CountedCompleter<R> {\n+    abstract static sealed class BulkTask<K,V,R> extends CountedCompleter<R> {\n@@ -4927,2 +5015,2 @@\n-                    if (e instanceof ForwardingNode) {\n-                        tab = ((ForwardingNode<K,V>)e).nextTable;\n+                    if (e instanceof ForwardingNode<K, V> f) {\n+                        tab = f.nextTable;\n@@ -4933,2 +5021,2 @@\n-                    else if (e instanceof TreeBin)\n-                        e = ((TreeBin<K,V>)e).first;\n+                    else if (e instanceof TreeBin<K, V> tb)\n+                        e = tb.first;\n@@ -4950,1 +5038,1 @@\n-                s = new TableStack<K,V>();\n+                s = new TableStack<>();\n@@ -4992,1 +5080,2 @@\n-        public final void compute() {\n+        @Override\n+        public void compute() {\n@@ -4998,1 +5087,1 @@\n-                    new ForEachKeyTask<K,V>\n+                    new ForEachKeyTask<>\n@@ -5019,1 +5108,2 @@\n-        public final void compute() {\n+        @Override\n+        public void compute() {\n@@ -5025,1 +5115,1 @@\n-                    new ForEachValueTask<K,V>\n+                    new ForEachValueTask<>\n@@ -5046,1 +5136,2 @@\n-        public final void compute() {\n+        @Override\n+        public void compute() {\n@@ -5052,1 +5143,1 @@\n-                    new ForEachEntryTask<K,V>\n+                    new ForEachEntryTask<>\n@@ -5073,1 +5164,2 @@\n-        public final void compute() {\n+        @Override\n+        public void compute() {\n@@ -5079,1 +5171,1 @@\n-                    new ForEachMappingTask<K,V>\n+                    new ForEachMappingTask<>\n@@ -5101,1 +5193,2 @@\n-        public final void compute() {\n+        @Override\n+        public void compute() {\n@@ -5134,1 +5227,2 @@\n-        public final void compute() {\n+        @Override\n+        public void compute() {\n@@ -5142,1 +5236,1 @@\n-                    new ForEachTransformedValueTask<K,V,U>\n+                    new ForEachTransformedValueTask<>\n@@ -5167,1 +5261,2 @@\n-        public final void compute() {\n+        @Override\n+        public void compute() {\n@@ -5175,1 +5270,1 @@\n-                    new ForEachTransformedEntryTask<K,V,U>\n+                    new ForEachTransformedEntryTask<>\n@@ -5201,1 +5296,2 @@\n-        public final void compute() {\n+        @Override\n+        public void compute() {\n@@ -5235,2 +5331,4 @@\n-        public final U getRawResult() { return result.get(); }\n-        public final void compute() {\n+        @Override\n+        public U getRawResult() { return result.get(); }\n+        @Override\n+        public void compute() {\n@@ -5246,1 +5344,1 @@\n-                    new SearchKeysTask<K,V,U>\n+                    new SearchKeysTask<>\n@@ -5279,2 +5377,4 @@\n-        public final U getRawResult() { return result.get(); }\n-        public final void compute() {\n+        @Override\n+        public U getRawResult() { return result.get(); }\n+        @Override\n+        public void compute() {\n@@ -5290,1 +5390,1 @@\n-                    new SearchValuesTask<K,V,U>\n+                    new SearchValuesTask<>\n@@ -5323,2 +5423,4 @@\n-        public final U getRawResult() { return result.get(); }\n-        public final void compute() {\n+        @Override\n+        public U getRawResult() { return result.get(); }\n+        @Override\n+        public void compute() {\n@@ -5334,1 +5436,1 @@\n-                    new SearchEntriesTask<K,V,U>\n+                    new SearchEntriesTask<>\n@@ -5367,2 +5469,4 @@\n-        public final U getRawResult() { return result.get(); }\n-        public final void compute() {\n+        @Override\n+        public U getRawResult() { return result.get(); }\n+        @Override\n+        public void compute() {\n@@ -5378,1 +5482,1 @@\n-                    new SearchMappingsTask<K,V,U>\n+                    new SearchMappingsTask<>\n@@ -5412,2 +5516,4 @@\n-        public final K getRawResult() { return result; }\n-        public final void compute() {\n+        @Override\n+        public K getRawResult() { return result; }\n+        @Override\n+        public void compute() {\n@@ -5419,1 +5525,1 @@\n-                    (rights = new ReduceKeysTask<K,V>\n+                    (rights = new ReduceKeysTask<>\n@@ -5460,2 +5566,4 @@\n-        public final V getRawResult() { return result; }\n-        public final void compute() {\n+        @Override\n+        public V getRawResult() { return result; }\n+        @Override\n+        public void compute() {\n@@ -5467,1 +5575,1 @@\n-                    (rights = new ReduceValuesTask<K,V>\n+                    (rights = new ReduceValuesTask<>\n@@ -5508,2 +5616,4 @@\n-        public final Map.Entry<K,V> getRawResult() { return result; }\n-        public final void compute() {\n+        @Override\n+        public Map.Entry<K,V> getRawResult() { return result; }\n+        @Override\n+        public void compute() {\n@@ -5515,1 +5625,1 @@\n-                    (rights = new ReduceEntriesTask<K,V>\n+                    (rights = new ReduceEntriesTask<>\n@@ -5557,2 +5667,4 @@\n-        public final U getRawResult() { return result; }\n-        public final void compute() {\n+        @Override\n+        public U getRawResult() { return result; }\n+        @Override\n+        public void compute() {\n@@ -5566,1 +5678,1 @@\n-                    (rights = new MapReduceKeysTask<K,V,U>\n+                    (rights = new MapReduceKeysTask<>\n@@ -5611,2 +5723,4 @@\n-        public final U getRawResult() { return result; }\n-        public final void compute() {\n+        @Override\n+        public U getRawResult() { return result; }\n+        @Override\n+        public void compute() {\n@@ -5620,1 +5734,1 @@\n-                    (rights = new MapReduceValuesTask<K,V,U>\n+                    (rights = new MapReduceValuesTask<>\n@@ -5665,2 +5779,4 @@\n-        public final U getRawResult() { return result; }\n-        public final void compute() {\n+        @Override\n+        public U getRawResult() { return result; }\n+        @Override\n+        public void compute() {\n@@ -5674,1 +5790,1 @@\n-                    (rights = new MapReduceEntriesTask<K,V,U>\n+                    (rights = new MapReduceEntriesTask<>\n@@ -5719,2 +5835,4 @@\n-        public final U getRawResult() { return result; }\n-        public final void compute() {\n+        @Override\n+        public U getRawResult() { return result; }\n+        @Override\n+        public void compute() {\n@@ -5728,1 +5846,1 @@\n-                    (rights = new MapReduceMappingsTask<K,V,U>\n+                    (rights = new MapReduceMappingsTask<>\n@@ -5775,2 +5893,4 @@\n-        public final Double getRawResult() { return result; }\n-        public final void compute() {\n+        @Override\n+        public Double getRawResult() { return result; }\n+        @Override\n+        public void compute() {\n@@ -5785,1 +5905,1 @@\n-                    (rights = new MapReduceKeysToDoubleTask<K,V>\n+                    (rights = new MapReduceKeysToDoubleTask<>\n@@ -5825,2 +5945,4 @@\n-        public final Double getRawResult() { return result; }\n-        public final void compute() {\n+        @Override\n+        public Double getRawResult() { return result; }\n+        @Override\n+        public void compute() {\n@@ -5835,1 +5957,1 @@\n-                    (rights = new MapReduceValuesToDoubleTask<K,V>\n+                    (rights = new MapReduceValuesToDoubleTask<>\n@@ -5875,2 +5997,4 @@\n-        public final Double getRawResult() { return result; }\n-        public final void compute() {\n+        @Override\n+        public Double getRawResult() { return result; }\n+        @Override\n+        public void compute() {\n@@ -5885,1 +6009,1 @@\n-                    (rights = new MapReduceEntriesToDoubleTask<K,V>\n+                    (rights = new MapReduceEntriesToDoubleTask<>\n@@ -5925,2 +6049,4 @@\n-        public final Double getRawResult() { return result; }\n-        public final void compute() {\n+        @Override\n+        public Double getRawResult() { return result; }\n+        @Override\n+        public void compute() {\n@@ -5935,1 +6061,1 @@\n-                    (rights = new MapReduceMappingsToDoubleTask<K,V>\n+                    (rights = new MapReduceMappingsToDoubleTask<>\n@@ -5975,2 +6101,4 @@\n-        public final Long getRawResult() { return result; }\n-        public final void compute() {\n+        @Override\n+        public Long getRawResult() { return result; }\n+        @Override\n+        public void compute() {\n@@ -5985,1 +6113,1 @@\n-                    (rights = new MapReduceKeysToLongTask<K,V>\n+                    (rights = new MapReduceKeysToLongTask<>\n@@ -6025,2 +6153,4 @@\n-        public final Long getRawResult() { return result; }\n-        public final void compute() {\n+        @Override\n+        public Long getRawResult() { return result; }\n+        @Override\n+        public void compute() {\n@@ -6035,1 +6165,1 @@\n-                    (rights = new MapReduceValuesToLongTask<K,V>\n+                    (rights = new MapReduceValuesToLongTask<>\n@@ -6075,2 +6205,4 @@\n-        public final Long getRawResult() { return result; }\n-        public final void compute() {\n+        @Override\n+        public Long getRawResult() { return result; }\n+        @Override\n+        public void compute() {\n@@ -6085,1 +6217,1 @@\n-                    (rights = new MapReduceEntriesToLongTask<K,V>\n+                    (rights = new MapReduceEntriesToLongTask<>\n@@ -6125,2 +6257,4 @@\n-        public final Long getRawResult() { return result; }\n-        public final void compute() {\n+        @Override\n+        public Long getRawResult() { return result; }\n+        @Override\n+        public void compute() {\n@@ -6135,1 +6269,1 @@\n-                    (rights = new MapReduceMappingsToLongTask<K,V>\n+                    (rights = new MapReduceMappingsToLongTask<>\n@@ -6175,2 +6309,4 @@\n-        public final Integer getRawResult() { return result; }\n-        public final void compute() {\n+        @Override\n+        public Integer getRawResult() { return result; }\n+        @Override\n+        public void compute() {\n@@ -6185,1 +6321,1 @@\n-                    (rights = new MapReduceKeysToIntTask<K,V>\n+                    (rights = new MapReduceKeysToIntTask<>\n@@ -6225,2 +6361,4 @@\n-        public final Integer getRawResult() { return result; }\n-        public final void compute() {\n+        @Override\n+        public Integer getRawResult() { return result; }\n+        @Override\n+        public void compute() {\n@@ -6235,1 +6373,1 @@\n-                    (rights = new MapReduceValuesToIntTask<K,V>\n+                    (rights = new MapReduceValuesToIntTask<>\n@@ -6275,2 +6413,4 @@\n-        public final Integer getRawResult() { return result; }\n-        public final void compute() {\n+        @Override\n+        public Integer getRawResult() { return result; }\n+        @Override\n+        public void compute() {\n@@ -6285,1 +6425,1 @@\n-                    (rights = new MapReduceEntriesToIntTask<K,V>\n+                    (rights = new MapReduceEntriesToIntTask<>\n@@ -6325,2 +6465,4 @@\n-        public final Integer getRawResult() { return result; }\n-        public final void compute() {\n+        @Override\n+        public Integer getRawResult() { return result; }\n+        @Override\n+        public void compute() {\n@@ -6335,1 +6477,1 @@\n-                    (rights = new MapReduceMappingsToIntTask<K,V>\n+                    (rights = new MapReduceMappingsToIntTask<>\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ConcurrentHashMap.java","additions":512,"deletions":370,"binary":false,"changes":882,"status":"modified"}]}