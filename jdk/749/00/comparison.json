{"files":[{"patch":"@@ -122,3 +122,3 @@\n-  for (int i = 1; i < _intrinsics->length(); i++) {\n-    CallGenerator* cg1 = _intrinsics->at(i-1);\n-    CallGenerator* cg2 = _intrinsics->at(i);\n+  for (int i = 1; i < _intrinsics.length(); i++) {\n+    CallGenerator* cg1 = _intrinsics.at(i-1);\n+    CallGenerator* cg2 = _intrinsics.at(i);\n@@ -132,1 +132,1 @@\n-  return _intrinsics->find_sorted<IntrinsicDescPair*, IntrinsicDescPair::compare>(&pair, found);\n+  return _intrinsics.find_sorted<IntrinsicDescPair*, IntrinsicDescPair::compare>(&pair, found);\n@@ -136,4 +136,0 @@\n-  if (_intrinsics == NULL) {\n-    _intrinsics = new (comp_arena())GrowableArray<CallGenerator*>(comp_arena(), 60, 0, NULL);\n-  }\n-  int len = _intrinsics->length();\n@@ -143,1 +139,1 @@\n-  _intrinsics->insert_before(index, cg);\n+  _intrinsics.insert_before(index, cg);\n@@ -149,1 +145,1 @@\n-  if (_intrinsics != NULL) {\n+  if (_intrinsics.length() > 0) {\n@@ -153,1 +149,1 @@\n-      return _intrinsics->at(index);\n+      return _intrinsics.at(index);\n@@ -171,3 +167,1 @@\n-\/\/ Compile:: register_library_intrinsics and make_vm_intrinsic are defined\n-\/\/ in library_call.cpp.\n-\n+\/\/ Compile::make_vm_intrinsic is defined in library_call.cpp.\n@@ -355,0 +349,9 @@\n+void Compile::remove_useless_nodes(GrowableArray<Node*>& node_list, Unique_Node_List& useful) {\n+  for (int i = node_list.length() - 1; i >= 0; i--) {\n+    Node* n = node_list.at(i);\n+    if (!useful.member(n)) {\n+      node_list.remove_if_existing(n);\n+    }\n+  }\n+}\n+\n@@ -369,1 +372,1 @@\n-      if (! useful.member(child)) {\n+      if (!useful.member(child)) {\n@@ -382,28 +385,6 @@\n-  \/\/ Remove useless macro and predicate opaq nodes\n-  for (int i = C->macro_count()-1; i >= 0; i--) {\n-    Node* n = C->macro_node(i);\n-    if (!useful.member(n)) {\n-      remove_macro_node(n);\n-    }\n-  }\n-  \/\/ Remove useless CastII nodes with range check dependency\n-  for (int i = range_check_cast_count() - 1; i >= 0; i--) {\n-    Node* cast = range_check_cast_node(i);\n-    if (!useful.member(cast)) {\n-      remove_range_check_cast(cast);\n-    }\n-  }\n-  \/\/ Remove useless expensive nodes\n-  for (int i = C->expensive_count()-1; i >= 0; i--) {\n-    Node* n = C->expensive_node(i);\n-    if (!useful.member(n)) {\n-      remove_expensive_node(n);\n-    }\n-  }\n-  \/\/ Remove useless Opaque4 nodes\n-  for (int i = opaque4_count() - 1; i >= 0; i--) {\n-    Node* opaq = opaque4_node(i);\n-    if (!useful.member(opaq)) {\n-      remove_opaque4_node(opaq);\n-    }\n-  }\n+\n+  remove_useless_nodes(_macro_nodes,        useful); \/\/ remove useless macro and predicate opaq nodes\n+  remove_useless_nodes(_expensive_nodes,    useful); \/\/ remove useless expensive nodes\n+  remove_useless_nodes(_range_check_casts,  useful); \/\/ remove useless CastII nodes with range check dependency\n+  remove_useless_nodes(_opaque4_nodes,      useful); \/\/ remove useless Opaque4 nodes\n+\n@@ -536,0 +517,6 @@\n+                  _intrinsics        (comp_arena(), 0, 0, NULL),\n+                  _macro_nodes       (comp_arena(), 8, 0, NULL),\n+                  _predicate_opaqs   (comp_arena(), 8, 0, NULL),\n+                  _expensive_nodes   (comp_arena(), 8, 0, NULL),\n+                  _range_check_casts (comp_arena(), 8, 0, NULL),\n+                  _opaque4_nodes     (comp_arena(), 8, 0, NULL),\n@@ -1018,7 +1005,0 @@\n-  _intrinsics = NULL;\n-  _macro_nodes = new(comp_arena()) GrowableArray<Node*>(comp_arena(), 8,  0, NULL);\n-  _predicate_opaqs = new(comp_arena()) GrowableArray<Node*>(comp_arena(), 8,  0, NULL);\n-  _expensive_nodes = new(comp_arena()) GrowableArray<Node*>(comp_arena(), 8,  0, NULL);\n-  _range_check_casts = new(comp_arena()) GrowableArray<Node*>(comp_arena(), 8,  0, NULL);\n-  _opaque4_nodes = new(comp_arena()) GrowableArray<Node*>(comp_arena(), 8,  0, NULL);\n-  register_library_intrinsics();\n@@ -1797,2 +1777,2 @@\n-  assert(!_range_check_casts->contains(n), \"duplicate entry in range check casts\");\n-  _range_check_casts->append(n);\n+  assert(!_range_check_casts.contains(n), \"duplicate entry in range check casts\");\n+  _range_check_casts.append(n);\n@@ -1813,2 +1793,2 @@\n-  assert(!_opaque4_nodes->contains(n), \"duplicate entry in Opaque4 list\");\n-  _opaque4_nodes->append(n);\n+  assert(!_opaque4_nodes.contains(n), \"duplicate entry in Opaque4 list\");\n+  _opaque4_nodes.append(n);\n@@ -1991,1 +1971,1 @@\n-  if(_loop_opts_cnt > 0) {\n+  if (_loop_opts_cnt > 0) {\n@@ -1993,1 +1973,1 @@\n-    while(major_progress() && (_loop_opts_cnt > 0)) {\n+    while (major_progress() && (_loop_opts_cnt > 0)) {\n@@ -2274,0 +2254,1 @@\n+  assert(igvn._worklist.size() == 0, \"not empty\");\n@@ -3684,1 +3665,1 @@\n-    _expensive_nodes->at(i)->set_req(0, NULL);\n+    _expensive_nodes.at(i)->set_req(0, NULL);\n@@ -4336,1 +4317,1 @@\n-    _expensive_nodes->sort(cmp_expensive_nodes);\n+    _expensive_nodes.sort(cmp_expensive_nodes);\n@@ -4341,2 +4322,2 @@\n-  for (int i = 1; i < _expensive_nodes->length(); i++) {\n-    if (cmp_expensive_nodes(_expensive_nodes->adr_at(i), _expensive_nodes->adr_at(i-1)) < 0) {\n+  for (int i = 1; i < _expensive_nodes.length(); i++) {\n+    if (cmp_expensive_nodes(_expensive_nodes.adr_at(i), _expensive_nodes.adr_at(i-1)) < 0) {\n@@ -4350,1 +4331,1 @@\n-  if (_expensive_nodes->length() == 0) {\n+  if (_expensive_nodes.length() == 0) {\n@@ -4358,2 +4339,2 @@\n-  for (int i = 0; i < _expensive_nodes->length(); i++) {\n-    Node* n = _expensive_nodes->at(i);\n+  for (int i = 0; i < _expensive_nodes.length(); i++) {\n+    Node* n = _expensive_nodes.at(i);\n@@ -4362,1 +4343,1 @@\n-      _expensive_nodes->at_put(j, n);\n+      _expensive_nodes.at_put(j, n);\n@@ -4366,1 +4347,1 @@\n-  _expensive_nodes->trunc_to(j);\n+  _expensive_nodes.trunc_to(j);\n@@ -4373,2 +4354,2 @@\n-  for (int i = 0; i < _expensive_nodes->length()-1; i++) {\n-    if (cmp_expensive_nodes(_expensive_nodes->adr_at(i), _expensive_nodes->adr_at(i+1)) == 0) {\n+  for (int i = 0; i < _expensive_nodes.length()-1; i++) {\n+    if (cmp_expensive_nodes(_expensive_nodes.adr_at(i), _expensive_nodes.adr_at(i+1)) == 0) {\n@@ -4383,1 +4364,1 @@\n-  if (_expensive_nodes->length() == 0) {\n+  if (_expensive_nodes.length() == 0) {\n@@ -4397,1 +4378,1 @@\n-  for (; i < _expensive_nodes->length()-1; i++) {\n+  for (; i < _expensive_nodes.length()-1; i++) {\n@@ -4399,1 +4380,1 @@\n-    if (_expensive_nodes->at(i)->Opcode() == _expensive_nodes->at(i+1)->Opcode()) {\n+    if (_expensive_nodes.at(i)->Opcode() == _expensive_nodes.at(i+1)->Opcode()) {\n@@ -4401,1 +4382,1 @@\n-      _expensive_nodes->at_put(j++, _expensive_nodes->at(i));\n+      _expensive_nodes.at_put(j++, _expensive_nodes.at(i));\n@@ -4405,1 +4386,1 @@\n-      _expensive_nodes->at_put(j++, _expensive_nodes->at(i));\n+      _expensive_nodes.at_put(j++, _expensive_nodes.at(i));\n@@ -4408,1 +4389,1 @@\n-      Node* n = _expensive_nodes->at(i);\n+      Node* n = _expensive_nodes.at(i);\n@@ -4415,3 +4396,3 @@\n-    _expensive_nodes->at_put(j++, _expensive_nodes->at(i));\n-  } else if (_expensive_nodes->length() >= 1) {\n-    Node* n = _expensive_nodes->at(i);\n+    _expensive_nodes.at_put(j++, _expensive_nodes.at(i));\n+  } else if (_expensive_nodes.length() >= 1) {\n+    Node* n = _expensive_nodes.at(i);\n@@ -4422,1 +4403,1 @@\n-  _expensive_nodes->trunc_to(j);\n+  _expensive_nodes.trunc_to(j);\n@@ -4429,1 +4410,1 @@\n-  assert(!_expensive_nodes->contains(n), \"duplicate entry in expensive list\");\n+  assert(!_expensive_nodes.contains(n), \"duplicate entry in expensive list\");\n@@ -4433,1 +4414,1 @@\n-    _expensive_nodes->append(n);\n+    _expensive_nodes.append(n);\n@@ -4611,2 +4592,2 @@\n-        _macro_nodes->at_put(allocates, n);\n-        _macro_nodes->at_put(i, tmp);\n+        _macro_nodes.at_put(allocates, n);\n+        _macro_nodes.at_put(i, tmp);\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":62,"deletions":81,"binary":false,"changes":143,"status":"modified"},{"patch":"@@ -312,6 +312,6 @@\n-  GrowableArray<CallGenerator*>* _intrinsics;   \/\/ List of intrinsics.\n-  GrowableArray<Node*>* _macro_nodes;           \/\/ List of nodes which need to be expanded before matching.\n-  GrowableArray<Node*>* _predicate_opaqs;       \/\/ List of Opaque1 nodes for the loop predicates.\n-  GrowableArray<Node*>* _expensive_nodes;       \/\/ List of nodes that are expensive to compute and that we'd better not let the GVN freely common\n-  GrowableArray<Node*>* _range_check_casts;     \/\/ List of CastII nodes with a range check dependency\n-  GrowableArray<Node*>* _opaque4_nodes;         \/\/ List of Opaque4 nodes that have a default value\n+  GrowableArray<CallGenerator*> _intrinsics;    \/\/ List of intrinsics.\n+  GrowableArray<Node*>  _macro_nodes;           \/\/ List of nodes which need to be expanded before matching.\n+  GrowableArray<Node*>  _predicate_opaqs;       \/\/ List of Opaque1 nodes for the loop predicates.\n+  GrowableArray<Node*>  _expensive_nodes;       \/\/ List of nodes that are expensive to compute and that we'd better not let the GVN freely common\n+  GrowableArray<Node*>  _range_check_casts;     \/\/ List of CastII nodes with a range check dependency\n+  GrowableArray<Node*>  _opaque4_nodes;         \/\/ List of Opaque4 nodes that have a default value\n@@ -379,2 +379,1 @@\n-  GrowableArray<CallGenerator*> _late_inlines;        \/\/ List of CallGenerators to be revisited after\n-                                                      \/\/ main parsing has finished.\n+  GrowableArray<CallGenerator*> _late_inlines;        \/\/ List of CallGenerators to be revisited after main parsing has finished.\n@@ -382,1 +381,0 @@\n-\n@@ -662,6 +660,6 @@\n-  int           macro_count()             const { return _macro_nodes->length(); }\n-  int           predicate_count()         const { return _predicate_opaqs->length();}\n-  int           expensive_count()         const { return _expensive_nodes->length(); }\n-  Node*         macro_node(int idx)       const { return _macro_nodes->at(idx); }\n-  Node*         predicate_opaque1_node(int idx) const { return _predicate_opaqs->at(idx);}\n-  Node*         expensive_node(int idx)   const { return _expensive_nodes->at(idx); }\n+  int           macro_count()             const { return _macro_nodes.length(); }\n+  int           predicate_count()         const { return _predicate_opaqs.length();}\n+  int           expensive_count()         const { return _expensive_nodes.length(); }\n+  Node*         macro_node(int idx)       const { return _macro_nodes.at(idx); }\n+  Node*         predicate_opaque1_node(int idx) const { return _predicate_opaqs.at(idx);}\n+  Node*         expensive_node(int idx)   const { return _expensive_nodes.at(idx); }\n@@ -672,2 +670,2 @@\n-    assert(!_macro_nodes->contains(n), \"duplicate entry in expand list\");\n-    _macro_nodes->append(n);\n+    assert(!_macro_nodes.contains(n), \"duplicate entry in expand list\");\n+    _macro_nodes.append(n);\n@@ -678,1 +676,1 @@\n-    _macro_nodes->remove_if_existing(n);\n+    _macro_nodes.remove_if_existing(n);\n@@ -681,1 +679,1 @@\n-      _predicate_opaqs->remove_if_existing(n);\n+      _predicate_opaqs.remove_if_existing(n);\n@@ -686,1 +684,1 @@\n-    _expensive_nodes->remove_if_existing(n);\n+    _expensive_nodes.remove_if_existing(n);\n@@ -689,3 +687,3 @@\n-    assert(!_predicate_opaqs->contains(n), \"duplicate entry in predicate opaque1\");\n-    assert(_macro_nodes->contains(n), \"should have already been in macro list\");\n-    _predicate_opaqs->append(n);\n+    assert(!_predicate_opaqs.contains(n), \"duplicate entry in predicate opaque1\");\n+    assert(_macro_nodes.contains(n), \"should have already been in macro list\");\n+    _predicate_opaqs.append(n);\n@@ -697,1 +695,1 @@\n-    _range_check_casts->remove_if_existing(n);\n+    _range_check_casts.remove_if_existing(n);\n@@ -699,2 +697,2 @@\n-  Node* range_check_cast_node(int idx) const { return _range_check_casts->at(idx);  }\n-  int   range_check_cast_count()       const { return _range_check_casts->length(); }\n+  Node* range_check_cast_node(int idx) const { return _range_check_casts.at(idx);  }\n+  int   range_check_cast_count()       const { return _range_check_casts.length(); }\n@@ -706,1 +704,1 @@\n-    _opaque4_nodes->remove_if_existing(n);\n+    _opaque4_nodes.remove_if_existing(n);\n@@ -708,2 +706,2 @@\n-  Node* opaque4_node(int idx) const { return _opaque4_nodes->at(idx);  }\n-  int   opaque4_count()       const { return _opaque4_nodes->length(); }\n+  Node* opaque4_node(int idx) const { return _opaque4_nodes.at(idx);  }\n+  int   opaque4_count()       const { return _opaque4_nodes.length(); }\n@@ -717,2 +715,2 @@\n-  bool is_predicate_opaq(Node * n) {\n-    return _predicate_opaqs->contains(n);\n+  bool is_predicate_opaq(Node* n) {\n+    return _predicate_opaqs.contains(n);\n@@ -955,0 +953,1 @@\n+  void remove_useless_nodes       (GrowableArray<Node*>&        node_list, Unique_Node_List &useful);\n@@ -1087,1 +1086,0 @@\n-  void           register_library_intrinsics();                            \/\/ initializer\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":30,"deletions":32,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -98,6 +98,0 @@\n-\/\/----------------------register_library_intrinsics-----------------------\n-\/\/ Initialize this file's data structures, for each Compile instance.\n-void Compile::register_library_intrinsics() {\n-  \/\/ Nothing to do here.\n-}\n-\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3489,1 +3489,1 @@\n-static void log_loop_tree(IdealLoopTree* root, IdealLoopTree* loop, CompileLog* log) {\n+static void log_loop_tree_helper(IdealLoopTree* root, IdealLoopTree* loop, CompileLog* log) {\n@@ -3494,1 +3494,1 @@\n-      if( loop->_child ) log_loop_tree(root, loop->_child, log);\n+      log_loop_tree_helper(root, loop->_child, log);\n@@ -3498,1 +3498,1 @@\n-  } else {\n+  } else if (loop != NULL) {\n@@ -3504,1 +3504,1 @@\n-      if (head->as_Loop()->is_inner_loop()) log->print(\"inner_loop='1' \");\n+      if (head->as_Loop()->is_inner_loop())        log->print(\"inner_loop='1' \");\n@@ -3506,2 +3506,1 @@\n-    }\n-    if (head->is_CountedLoop()) {\n+    } else if (head->is_CountedLoop()) {\n@@ -3511,1 +3510,1 @@\n-      if (cl->is_post_loop()) log->print(\"post_loop='%d' \",  cl->main_idx());\n+      if (cl->is_post_loop()) log->print(\"post_loop='%d' \", cl->main_idx());\n@@ -3514,1 +3513,1 @@\n-    if( loop->_child ) log_loop_tree(root, loop->_child, log);\n+    log_loop_tree_helper(root, loop->_child, log);\n@@ -3516,1 +3515,7 @@\n-    if( loop->_next  ) log_loop_tree(root, loop->_next, log);\n+    log_loop_tree_helper(root, loop->_next, log);\n+  }\n+}\n+\n+void PhaseIdealLoop::log_loop_tree() {\n+  if (C->log() != NULL) {\n+    log_loop_tree_helper(_ltree_root, _ltree_root, C->log());\n@@ -3779,1 +3784,0 @@\n-    _igvn.optimize();           \/\/ Cleanup NeverBranches\n@@ -3889,1 +3893,0 @@\n-    _igvn.optimize();\n@@ -3912,1 +3915,0 @@\n-    \/\/ restore major progress flag\n@@ -3914,7 +3916,0 @@\n-\n-    \/\/ Cleanup any modified bits\n-    _igvn.optimize();\n-\n-    if (C->log() != NULL) {\n-      log_loop_tree(_ltree_root, _ltree_root, C->log());\n-    }\n@@ -3942,6 +3937,0 @@\n-\n-    _igvn.optimize();\n-\n-    if (C->log() != NULL) {\n-      log_loop_tree(_ltree_root, _ltree_root, C->log());\n-    }\n@@ -3952,4 +3941,0 @@\n-    _igvn.optimize();\n-    if (C->log() != NULL) {\n-      log_loop_tree(_ltree_root, _ltree_root, C->log());\n-    }\n@@ -4094,3 +4079,0 @@\n-  \/\/ Cleanup any modified bits\n-  _igvn.optimize();\n-\n@@ -4100,4 +4082,0 @@\n-\n-  if (C->log() != NULL) {\n-    log_loop_tree(_ltree_root, _ltree_root, C->log());\n-  }\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":14,"deletions":36,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -815,0 +815,2 @@\n+  void log_loop_tree();\n+\n@@ -1040,0 +1042,8 @@\n+\n+    Compile* C = Compile::current();\n+    if (!C->failing()) {\n+      \/\/ Cleanup any modified bits\n+      igvn.optimize();\n+\n+      v.log_loop_tree();\n+    }\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -794,1 +794,1 @@\n-    assert(is_##type(), \"invalid node class\");               \\\n+    assert(is_##type(), \"invalid node class: %s\", Name()); \\\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}