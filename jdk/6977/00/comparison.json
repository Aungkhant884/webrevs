{"files":[{"patch":"@@ -2917,0 +2917,1 @@\n+                Env<AttrContext> dupLocalEnv = localEnv.dup(localEnv.tree, localEnv.info.dup(localEnv.info.scope.dupUnshared()));\n@@ -2925,1 +2926,1 @@\n-                                                            localEnv, argtypes, typeargtypes, pkind);\n+                                        dupLocalEnv, argtypes, typeargtypes, pkind);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary symbol not found error, implicit lambdas and diamond constructor invocations\n+ * @compile CantFindSymbolImplicitLambdaAndDiamondTest.java\n+ *\/\n+\n+import java.util.function.Consumer;\n+\n+class CantFindSymbolImplicitLambdaAndDiamondTest {\n+    static class B<T>{}\n+\n+    static class A1 {\n+        <T> A1(Consumer<T> cons) {}\n+    }\n+\n+    static class A2<T> {\n+        A2(Consumer<T> cons) {}\n+    }\n+\n+    public void mount() {\n+        new A1(inHours ->\n+                new B<>() {{\n+                    System.out.println(inHours);\n+                }});\n+\n+        new A2<>(inHours ->\n+            new B<>() {{\n+                System.out.println(inHours);\n+            }});\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/lambda\/CantFindSymbolImplicitLambdaAndDiamondTest.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"}]}