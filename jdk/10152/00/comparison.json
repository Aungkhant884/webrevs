{"files":[{"patch":"@@ -68,0 +68,16 @@\n+ATTRIBUTE_ALIGNED(16) uint32_t KEY_SHUFFLE_MASK[] = {\n+    0x00010203UL, 0x04050607UL, 0x08090A0BUL, 0x0C0D0E0FUL,\n+};\n+\n+ATTRIBUTE_ALIGNED(16) uint32_t COUNTER_SHUFFLE_MASK[] = {\n+    0x0C0D0E0FUL, 0x08090A0BUL, 0x04050607UL, 0x00010203UL,\n+};\n+\n+ATTRIBUTE_ALIGNED(16) uint32_t GHASH_BYTE_SWAP_MASK[] = {\n+    0x0C0D0E0FUL, 0x08090A0BUL, 0x04050607UL, 0x00010203UL,\n+};\n+\n+ATTRIBUTE_ALIGNED(16) uint32_t GHASH_LONG_SWAP_MASK[] = {\n+    0x0B0A0908UL, 0x0F0E0D0CUL, 0x03020100UL, 0x07060504UL,\n+};\n+\n@@ -2183,9 +2199,2 @@\n-  address generate_key_shuffle_mask() {\n-    __ align(16);\n-    StubCodeMark mark(this, \"StubRoutines\", \"key_shuffle_mask\");\n-    address start = __ pc();\n-    __ emit_data(0x00010203, relocInfo::none, 0 );\n-    __ emit_data(0x04050607, relocInfo::none, 0 );\n-    __ emit_data(0x08090a0b, relocInfo::none, 0 );\n-    __ emit_data(0x0c0d0e0f, relocInfo::none, 0 );\n-    return start;\n+  address key_shuffle_mask_addr() {\n+    return (address)KEY_SHUFFLE_MASK;\n@@ -2194,9 +2203,2 @@\n-  address generate_counter_shuffle_mask() {\n-    __ align(16);\n-    StubCodeMark mark(this, \"StubRoutines\", \"counter_shuffle_mask\");\n-    address start = __ pc();\n-    __ emit_data(0x0c0d0e0f, relocInfo::none, 0);\n-    __ emit_data(0x08090a0b, relocInfo::none, 0);\n-    __ emit_data(0x04050607, relocInfo::none, 0);\n-    __ emit_data(0x00010203, relocInfo::none, 0);\n-    return start;\n+  address counter_shuffle_mask_addr() {\n+    return (address)COUNTER_SHUFFLE_MASK;\n@@ -2212,1 +2214,1 @@\n-      __ pshufb(xmmdst, ExternalAddress(StubRoutines::x86::key_shuffle_mask_addr()));\n+      __ pshufb(xmmdst, ExternalAddress(key_shuffle_mask_addr()));\n@@ -2293,1 +2295,1 @@\n-    __ movdqu(xmm_key_shuf_mask, ExternalAddress(StubRoutines::x86::key_shuffle_mask_addr()));\n+    __ movdqu(xmm_key_shuf_mask, ExternalAddress(key_shuffle_mask_addr()));\n@@ -2392,1 +2394,1 @@\n-    __ movdqu(xmm_key_shuf_mask, ExternalAddress(StubRoutines::x86::key_shuffle_mask_addr()));\n+    __ movdqu(xmm_key_shuf_mask, ExternalAddress(key_shuffle_mask_addr()));\n@@ -2525,1 +2527,1 @@\n-    __ movdqu(xmm_key_shuf_mask, ExternalAddress(StubRoutines::x86::key_shuffle_mask_addr()));\n+    __ movdqu(xmm_key_shuf_mask, ExternalAddress(key_shuffle_mask_addr()));\n@@ -2693,1 +2695,1 @@\n-    __ movdqu(xmm_key_shuf_mask, ExternalAddress(StubRoutines::x86::key_shuffle_mask_addr()));\n+    __ movdqu(xmm_key_shuf_mask, ExternalAddress(key_shuffle_mask_addr()));\n@@ -2912,1 +2914,1 @@\n-    __ movdqu(xmm_counter_shuf_mask, ExternalAddress(StubRoutines::x86::counter_shuffle_mask_addr()));\n+    __ movdqu(xmm_counter_shuf_mask, ExternalAddress(counter_shuffle_mask_addr()));\n@@ -2916,1 +2918,1 @@\n-    __ movdqu(xmm_key_shuf_mask, ExternalAddress(StubRoutines::x86::key_shuffle_mask_addr()));\n+    __ movdqu(xmm_key_shuf_mask, ExternalAddress(key_shuffle_mask_addr()));\n@@ -2942,2 +2944,2 @@\n-      __ movdqu(xmm_key_shuf_mask, ExternalAddress(StubRoutines::x86::key_shuffle_mask_addr()));\n-      __ movdqu(xmm_counter_shuf_mask, ExternalAddress(StubRoutines::x86::counter_shuffle_mask_addr()));\n+      __ movdqu(xmm_key_shuf_mask, ExternalAddress(key_shuffle_mask_addr()));\n+      __ movdqu(xmm_counter_shuf_mask, ExternalAddress(counter_shuffle_mask_addr()));\n@@ -2995,2 +2997,2 @@\n-      __ movdqu(xmm_key_shuf_mask, ExternalAddress(StubRoutines::x86::key_shuffle_mask_addr()));\n-      __ movdqu(xmm_counter_shuf_mask, ExternalAddress(StubRoutines::x86::counter_shuffle_mask_addr()));\n+      __ movdqu(xmm_key_shuf_mask, ExternalAddress(key_shuffle_mask_addr()));\n+      __ movdqu(xmm_counter_shuf_mask, ExternalAddress(counter_shuffle_mask_addr()));\n@@ -3081,1 +3083,1 @@\n-    __ movdqu(xmm_counter_shuf_mask, ExternalAddress(StubRoutines::x86::counter_shuffle_mask_addr()));\n+    __ movdqu(xmm_counter_shuf_mask, ExternalAddress(counter_shuffle_mask_addr()));\n@@ -3269,10 +3271,2 @@\n-  address generate_ghash_long_swap_mask() {\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", \"ghash_long_swap_mask\");\n-    address start = __ pc();\n-    __ emit_data(0x0b0a0908, relocInfo::none, 0);\n-    __ emit_data(0x0f0e0d0c, relocInfo::none, 0);\n-    __ emit_data(0x03020100, relocInfo::none, 0);\n-    __ emit_data(0x07060504, relocInfo::none, 0);\n-\n-  return start;\n+  address ghash_long_swap_mask_addr() {\n+    return (address)GHASH_LONG_SWAP_MASK;\n@@ -3282,9 +3276,2 @@\n-  address generate_ghash_byte_swap_mask() {\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", \"ghash_byte_swap_mask\");\n-    address start = __ pc();\n-    __ emit_data(0x0c0d0e0f, relocInfo::none, 0);\n-    __ emit_data(0x08090a0b, relocInfo::none, 0);\n-    __ emit_data(0x04050607, relocInfo::none, 0);\n-    __ emit_data(0x00010203, relocInfo::none, 0);\n-  return start;\n+  address ghash_byte_swap_mask_addr() {\n+    return (address)GHASH_BYTE_SWAP_MASK;\n@@ -3329,1 +3316,1 @@\n-    __ pshufb(xmm_temp0, ExternalAddress(StubRoutines::x86::ghash_long_swap_mask_addr()));\n+    __ pshufb(xmm_temp0, ExternalAddress(ghash_long_swap_mask_addr()));\n@@ -3332,1 +3319,1 @@\n-    __ pshufb(xmm_temp1, ExternalAddress(StubRoutines::x86::ghash_long_swap_mask_addr()));\n+    __ pshufb(xmm_temp1, ExternalAddress(ghash_long_swap_mask_addr()));\n@@ -3336,1 +3323,1 @@\n-    __ pshufb(xmm_temp2, ExternalAddress(StubRoutines::x86::ghash_byte_swap_mask_addr()));\n+    __ pshufb(xmm_temp2, ExternalAddress(ghash_byte_swap_mask_addr()));\n@@ -3422,1 +3409,1 @@\n-    __ pshufb(xmm_temp6, ExternalAddress(StubRoutines::x86::ghash_long_swap_mask_addr()));\n+    __ pshufb(xmm_temp6, ExternalAddress(ghash_long_swap_mask_addr()));\n@@ -4129,2 +4116,0 @@\n-      StubRoutines::x86::_key_shuffle_mask_addr = generate_key_shuffle_mask();  \/\/ might be needed by the others\n-\n@@ -4138,1 +4123,0 @@\n-      StubRoutines::x86::_counter_shuffle_mask_addr = generate_counter_shuffle_mask();\n@@ -4161,2 +4145,0 @@\n-      StubRoutines::x86::_ghash_long_swap_mask_addr = generate_ghash_long_swap_mask();\n-      StubRoutines::x86::_ghash_byte_swap_mask_addr = generate_ghash_byte_swap_mask();\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_32.cpp","additions":40,"deletions":58,"binary":false,"changes":98,"status":"modified"},{"patch":"@@ -314,7 +314,0 @@\n-  address generate_counter_shuffle_mask();\n-\n-  \/\/ This mask is used for incrementing counter value(linc0, linc4, etc.)\n-  address generate_counter_mask_addr();\n-\n-  address generate_ghash_polynomial512_addr();\n-\n@@ -328,1 +321,1 @@\n-  void generateHtbl_48_block_zmm(Register htbl, Register avx512_subkeyHtbl);\n+  void generateHtbl_48_block_zmm(Register htbl, Register avx512_subkeyHtbl, Register rscratch);\n@@ -334,1 +327,2 @@\n-  void ev_load_key(XMMRegister xmmdst, Register key, int offset, XMMRegister xmm_shuf_mask = xnoreg);\n+  void ev_load_key(XMMRegister xmmdst, Register key, int offset, XMMRegister xmm_shuf_mask);\n+  void ev_load_key(XMMRegister xmmdst, Register key, int offset, Register rscratch);\n@@ -338,1 +332,2 @@\n-  void load_key(XMMRegister xmmdst, Register key, int offset, XMMRegister xmm_shuf_mask = xnoreg);\n+  void load_key(XMMRegister xmmdst, Register key, int offset, XMMRegister xmm_shuf_mask);\n+  void load_key(XMMRegister xmmdst, Register key, int offset, Register rscratch);\n@@ -353,1 +348,1 @@\n-  void generateHtbl_one_block(Register htbl);\n+  void generateHtbl_one_block(Register htbl, Register rscratch);\n@@ -357,7 +352,5 @@\n-  address generate_ghash_polynomial_addr();\n-\n-  address generate_ghash_shufflemask_addr();\n-\n-  address generate_ghash_long_swap_mask(); \/\/ byte swap x86 long\n-\n-  address generate_ghash_byte_swap_mask(); \/\/ byte swap x86 byte array\n+  \/\/ Used by GHASH and AES stubs.\n+  address ghash_polynomial_addr();\n+  address ghash_shufflemask_addr();\n+  address ghash_long_swap_mask_addr(); \/\/ byte swap x86 long\n+  address ghash_byte_swap_mask_addr(); \/\/ byte swap x86 byte array\n@@ -372,0 +365,2 @@\n+  \/\/ BASE64 stubs\n+\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.hpp","additions":13,"deletions":18,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -43,2 +43,1 @@\n-\n-\/\/ AES intrinsic stubs\n+\/\/ Constants\n@@ -48,0 +47,97 @@\n+\/\/ Shuffle mask for fixing up 128-bit words consisting of big-endian 32-bit integers.\n+ATTRIBUTE_ALIGNED(16) uint64_t KEY_SHUFFLE_MASK[] = {\n+    0x0405060700010203UL, 0x0C0D0E0F08090A0BUL\n+};\n+static address key_shuffle_mask_addr() {\n+  return (address)KEY_SHUFFLE_MASK;\n+}\n+\n+\/\/ Shuffle mask for big-endian 128-bit integers.\n+ATTRIBUTE_ALIGNED(64) uint64_t COUNTER_SHUFFLE_MASK[] = {\n+    0x08090A0B0C0D0E0FUL, 0x0001020304050607UL,\n+    0x08090A0B0C0D0E0FUL, 0x0001020304050607UL,\n+    0x08090A0B0C0D0E0FUL, 0x0001020304050607UL,\n+    0x08090A0B0C0D0E0FUL, 0x0001020304050607UL,\n+};\n+static address counter_shuffle_mask_addr() {\n+  return (address)COUNTER_SHUFFLE_MASK;\n+}\n+\n+\/\/ This mask is used for incrementing counter value\n+ATTRIBUTE_ALIGNED(64) uint64_t COUNTER_MASK_LINC0[] = {\n+    0x0000000000000000UL, 0x0000000000000000UL,\n+    0x0000000000000001UL, 0x0000000000000000UL,\n+    0x0000000000000002UL, 0x0000000000000000UL,\n+    0x0000000000000003UL, 0x0000000000000000UL,\n+};\n+static address counter_mask_linc0_addr() {\n+  return (address)COUNTER_MASK_LINC0;\n+}\n+\n+ATTRIBUTE_ALIGNED(16) uint64_t COUNTER_MASK_LINC1[] = {\n+    0x0000000000000001UL, 0x0000000000000000UL,\n+};\n+static address counter_mask_linc1_addr() {\n+  return (address)COUNTER_MASK_LINC1;\n+}\n+\n+ATTRIBUTE_ALIGNED(64) uint64_t COUNTER_MASK_LINC4[] = {\n+    0x0000000000000004UL, 0x0000000000000000UL,\n+    0x0000000000000004UL, 0x0000000000000000UL,\n+    0x0000000000000004UL, 0x0000000000000000UL,\n+    0x0000000000000004UL, 0x0000000000000000UL,\n+};\n+static address counter_mask_linc4_addr() {\n+  return (address)COUNTER_MASK_LINC4;\n+}\n+\n+ATTRIBUTE_ALIGNED(64) uint64_t COUNTER_MASK_LINC8[] = {\n+    0x0000000000000008UL, 0x0000000000000000UL,\n+    0x0000000000000008UL, 0x0000000000000000UL,\n+    0x0000000000000008UL, 0x0000000000000000UL,\n+    0x0000000000000008UL, 0x0000000000000000UL,\n+};\n+static address counter_mask_linc8_addr() {\n+  return (address)COUNTER_MASK_LINC8;\n+}\n+\n+ATTRIBUTE_ALIGNED(64) uint64_t COUNTER_MASK_LINC16[] = {\n+    0x0000000000000010UL, 0x0000000000000000UL,\n+    0x0000000000000010UL, 0x0000000000000000UL,\n+    0x0000000000000010UL, 0x0000000000000000UL,\n+    0x0000000000000010UL, 0x0000000000000000UL,\n+};\n+static address counter_mask_linc16_addr() {\n+  return (address)COUNTER_MASK_LINC16;\n+}\n+\n+ATTRIBUTE_ALIGNED(64) uint64_t COUNTER_MASK_LINC32[] = {\n+    0x0000000000000020UL, 0x0000000000000000UL,\n+    0x0000000000000020UL, 0x0000000000000000UL,\n+    0x0000000000000020UL, 0x0000000000000000UL,\n+    0x0000000000000020UL, 0x0000000000000000UL,\n+};\n+static address counter_mask_linc32_addr() {\n+  return (address)COUNTER_MASK_LINC32;\n+}\n+\n+ATTRIBUTE_ALIGNED(64) uint64_t GHASH_POLYNOMIAL_REDUCTION[] = {\n+    0x00000001C2000000UL, 0xC200000000000000UL,\n+    0x00000001C2000000UL, 0xC200000000000000UL,\n+    0x00000001C2000000UL, 0xC200000000000000UL,\n+    0x00000001C2000000UL, 0xC200000000000000UL,\n+};\n+static address ghash_polynomial_reduction_addr() {\n+  return (address)GHASH_POLYNOMIAL_REDUCTION;\n+}\n+\n+ATTRIBUTE_ALIGNED(16) uint64_t GHASH_POLYNOMIAL_TWO_ONE[] = {\n+    0x0000000000000001UL, 0x0000000100000000UL,\n+};\n+static address ghash_polynomial_two_one_addr() {\n+  return (address)GHASH_POLYNOMIAL_TWO_ONE;\n+}\n+\n+\n+\/\/ AES intrinsic stubs\n+\n@@ -50,1 +146,0 @@\n-    StubRoutines::x86::_key_shuffle_mask_addr = generate_key_shuffle_mask();  \/\/ needed by the others\n@@ -58,3 +153,0 @@\n-      StubRoutines::x86::_counter_mask_addr = generate_counter_mask_addr();\n-      StubRoutines::x86::_ghash_poly512_addr = generate_ghash_polynomial512_addr();\n-      StubRoutines::x86::_ghash_long_swap_mask_addr = generate_ghash_long_swap_mask();\n@@ -69,3 +161,0 @@\n-      if (StubRoutines::x86::_counter_mask_addr == NULL) {\n-        StubRoutines::x86::_counter_mask_addr = generate_counter_mask_addr();\n-      }\n@@ -74,1 +163,0 @@\n-      StubRoutines::x86::_counter_shuffle_mask_addr = generate_counter_shuffle_mask();\n@@ -80,101 +168,0 @@\n-address StubGenerator::generate_key_shuffle_mask() {\n-  __ align(16);\n-  StubCodeMark mark(this, \"StubRoutines\", \"key_shuffle_mask\");\n-  address start = __ pc();\n-\n-  __ emit_data64( 0x0405060700010203, relocInfo::none );\n-  __ emit_data64( 0x0c0d0e0f08090a0b, relocInfo::none );\n-\n-  return start;\n-}\n-\n-address StubGenerator::generate_counter_shuffle_mask() {\n-  __ align(16);\n-  StubCodeMark mark(this, \"StubRoutines\", \"counter_shuffle_mask\");\n-  address start = __ pc();\n-\n-  __ emit_data64(0x08090a0b0c0d0e0f, relocInfo::none);\n-  __ emit_data64(0x0001020304050607, relocInfo::none);\n-\n-  return start;\n-}\n-\n-\/\/ This mask is used for incrementing counter value(linc0, linc4, etc.)\n-address StubGenerator::generate_counter_mask_addr() {\n-  __ align64();\n-  StubCodeMark mark(this, \"StubRoutines\", \"counter_mask_addr\");\n-  address start = __ pc();\n-\n-  __ emit_data64(0x08090a0b0c0d0e0f, relocInfo::none);\/\/lbswapmask\n-  __ emit_data64(0x0001020304050607, relocInfo::none);\n-  __ emit_data64(0x08090a0b0c0d0e0f, relocInfo::none);\n-  __ emit_data64(0x0001020304050607, relocInfo::none);\n-  __ emit_data64(0x08090a0b0c0d0e0f, relocInfo::none);\n-  __ emit_data64(0x0001020304050607, relocInfo::none);\n-  __ emit_data64(0x08090a0b0c0d0e0f, relocInfo::none);\n-  __ emit_data64(0x0001020304050607, relocInfo::none);\n-  __ emit_data64(0x0000000000000000, relocInfo::none);\/\/linc0 = counter_mask_addr+64\n-  __ emit_data64(0x0000000000000000, relocInfo::none);\n-  __ emit_data64(0x0000000000000001, relocInfo::none);\/\/counter_mask_addr() + 80\n-  __ emit_data64(0x0000000000000000, relocInfo::none);\n-  __ emit_data64(0x0000000000000002, relocInfo::none);\n-  __ emit_data64(0x0000000000000000, relocInfo::none);\n-  __ emit_data64(0x0000000000000003, relocInfo::none);\n-  __ emit_data64(0x0000000000000000, relocInfo::none);\n-  __ emit_data64(0x0000000000000004, relocInfo::none);\/\/linc4 = counter_mask_addr() + 128\n-  __ emit_data64(0x0000000000000000, relocInfo::none);\n-  __ emit_data64(0x0000000000000004, relocInfo::none);\n-  __ emit_data64(0x0000000000000000, relocInfo::none);\n-  __ emit_data64(0x0000000000000004, relocInfo::none);\n-  __ emit_data64(0x0000000000000000, relocInfo::none);\n-  __ emit_data64(0x0000000000000004, relocInfo::none);\n-  __ emit_data64(0x0000000000000000, relocInfo::none);\n-  __ emit_data64(0x0000000000000008, relocInfo::none);\/\/linc8 = counter_mask_addr() + 192\n-  __ emit_data64(0x0000000000000000, relocInfo::none);\n-  __ emit_data64(0x0000000000000008, relocInfo::none);\n-  __ emit_data64(0x0000000000000000, relocInfo::none);\n-  __ emit_data64(0x0000000000000008, relocInfo::none);\n-  __ emit_data64(0x0000000000000000, relocInfo::none);\n-  __ emit_data64(0x0000000000000008, relocInfo::none);\n-  __ emit_data64(0x0000000000000000, relocInfo::none);\n-  __ emit_data64(0x0000000000000020, relocInfo::none);\/\/linc32 = counter_mask_addr() + 256\n-  __ emit_data64(0x0000000000000000, relocInfo::none);\n-  __ emit_data64(0x0000000000000020, relocInfo::none);\n-  __ emit_data64(0x0000000000000000, relocInfo::none);\n-  __ emit_data64(0x0000000000000020, relocInfo::none);\n-  __ emit_data64(0x0000000000000000, relocInfo::none);\n-  __ emit_data64(0x0000000000000020, relocInfo::none);\n-  __ emit_data64(0x0000000000000000, relocInfo::none);\n-  __ emit_data64(0x0000000000000010, relocInfo::none);\/\/linc16 = counter_mask_addr() + 320\n-  __ emit_data64(0x0000000000000000, relocInfo::none);\n-  __ emit_data64(0x0000000000000010, relocInfo::none);\n-  __ emit_data64(0x0000000000000000, relocInfo::none);\n-  __ emit_data64(0x0000000000000010, relocInfo::none);\n-  __ emit_data64(0x0000000000000000, relocInfo::none);\n-  __ emit_data64(0x0000000000000010, relocInfo::none);\n-  __ emit_data64(0x0000000000000000, relocInfo::none);\n-\n-  return start;\n-}\n-\n-address StubGenerator::generate_ghash_polynomial512_addr() {\n-  __ align(CodeEntryAlignment);\n-  StubCodeMark mark(this, \"StubRoutines\", \"_ghash_poly512_addr\");\n-  address start = __ pc();\n-\n-  __ emit_data64(0x00000001C2000000, relocInfo::none); \/\/ POLY for reduction\n-  __ emit_data64(0xC200000000000000, relocInfo::none);\n-  __ emit_data64(0x00000001C2000000, relocInfo::none);\n-  __ emit_data64(0xC200000000000000, relocInfo::none);\n-  __ emit_data64(0x00000001C2000000, relocInfo::none);\n-  __ emit_data64(0xC200000000000000, relocInfo::none);\n-  __ emit_data64(0x00000001C2000000, relocInfo::none);\n-  __ emit_data64(0xC200000000000000, relocInfo::none);\n-  __ emit_data64(0x0000000000000001, relocInfo::none); \/\/ POLY\n-  __ emit_data64(0xC200000000000000, relocInfo::none);\n-  __ emit_data64(0x0000000000000001, relocInfo::none); \/\/ TWOONE\n-  __ emit_data64(0x0000000100000000, relocInfo::none);\n-\n-  return start;\n-}\n-\n@@ -446,1 +433,1 @@\n-  __ movdqu(xmm_counter_shuf_mask, ExternalAddress(StubRoutines::x86::counter_shuffle_mask_addr()), pos); \/\/ pos as scratch\n+  __ movdqu(xmm_counter_shuf_mask, ExternalAddress(counter_shuffle_mask_addr()), pos \/*rscratch*\/);\n@@ -469,1 +456,1 @@\n-  __ movdqu(xmm_key_shuf_mask, ExternalAddress(StubRoutines::x86::key_shuffle_mask_addr()), rbx); \/\/ rbx as scratch\n+  __ movdqu(xmm_key_shuf_mask, ExternalAddress(key_shuffle_mask_addr()), rbx \/*rscratch*\/);\n@@ -679,1 +666,1 @@\n-  __ movdqu(xmm_key_shuf_mask, ExternalAddress(StubRoutines::x86::key_shuffle_mask_addr()));\n+  __ movdqu(xmm_key_shuf_mask, ExternalAddress(key_shuffle_mask_addr()), rbx \/*rscratch*\/);\n@@ -952,1 +939,1 @@\n-  __ movdqu(xmm_key_shuf_mask, ExternalAddress(StubRoutines::x86::key_shuffle_mask_addr()));\n+  __ movdqu(xmm_key_shuf_mask, ExternalAddress(key_shuffle_mask_addr()), r10 \/*rscratch*\/);\n@@ -1007,0 +994,1 @@\n+\n@@ -1045,1 +1033,1 @@\n-  __ movdqu(xmm_key_shuf_mask, ExternalAddress(StubRoutines::x86::key_shuffle_mask_addr()));\n+  __ movdqu(xmm_key_shuf_mask, ExternalAddress(key_shuffle_mask_addr()), r10 \/*rscratch*\/);\n@@ -1101,0 +1089,1 @@\n+\n@@ -1132,3 +1121,1 @@\n-#ifndef _WIN64\n-  const Register len_reg     = c_rarg4;  \/\/ src len (must be multiple of blocksize 16)\n-#else\n+#ifdef _WIN64\n@@ -1137,0 +1124,2 @@\n+#else\n+  const Register len_reg     = c_rarg4;  \/\/ src len (must be multiple of blocksize 16)\n@@ -1162,1 +1151,1 @@\n-  __ movdqu(xmm_key_shuf_mask, ExternalAddress(StubRoutines::x86::key_shuffle_mask_addr()));\n+  __ movdqu(xmm_key_shuf_mask, ExternalAddress(key_shuffle_mask_addr()), r10 \/*rscratch*\/);\n@@ -1170,0 +1159,1 @@\n+\n@@ -1243,1 +1233,1 @@\n-  load_key(xmm_temp, key, 0xe0);\n+  load_key(xmm_temp, key, 0xe0, r10 \/*rscratch*\/);\n@@ -1317,1 +1307,1 @@\n-  __ movdqu(xmm_key_shuf_mask, ExternalAddress(StubRoutines::x86::key_shuffle_mask_addr()));\n+  __ movdqu(xmm_key_shuf_mask, ExternalAddress(key_shuffle_mask_addr()), rbx \/*rscratch*\/);\n@@ -1359,1 +1349,1 @@\n-      load_key(xmm15, key, 0xb0); \/\/ 0xb0; 192-bit key goes up to 0xc0\n+      load_key(xmm15, key, 0xb0, rbx \/*rscratch*\/); \/\/ 0xb0; 192-bit key goes up to 0xc0\n@@ -1361,1 +1351,1 @@\n-      load_key(xmm1, key, 0xc0);  \/\/ 0xc0;\n+      load_key(xmm1, key, 0xc0, rbx \/*rscratch*\/);  \/\/ 0xc0;\n@@ -1366,1 +1356,1 @@\n-      load_key(xmm15, key, 0xd0); \/\/ 0xd0; 256-bit key goes up to 0xe0\n+      load_key(xmm15, key, 0xd0, rbx \/*rscratch*\/); \/\/ 0xd0; 256-bit key goes up to 0xe0\n@@ -1368,1 +1358,1 @@\n-      load_key(xmm1, key, 0xe0);  \/\/ 0xe0;\n+      load_key(xmm1, key, 0xe0, rbx \/*rscratch*\/);  \/\/ 0xe0;\n@@ -1370,1 +1360,1 @@\n-      load_key(xmm15, key, 0xb0); \/\/ 0xb0;\n+      load_key(xmm15, key, 0xb0, rbx \/*rscratch*\/); \/\/ 0xb0;\n@@ -1372,1 +1362,1 @@\n-      load_key(xmm1, key, 0xc0);  \/\/ 0xc0;\n+      load_key(xmm1, key, 0xc0, rbx \/*rscratch*\/);  \/\/ 0xc0;\n@@ -1458,2 +1448,2 @@\n-      load_key(xmm_key11, key, 0xb0); \/\/ 0xb0; 192-bit key goes up to 0xc0\n-      load_key(xmm_key12, key, 0xc0); \/\/ 0xc0; 192-bit key goes up to 0xc0\n+      load_key(xmm_key11, key, 0xb0, rbx \/*rscratch*\/); \/\/ 0xb0; 192-bit key goes up to 0xc0\n+      load_key(xmm_key12, key, 0xc0, rbx \/*rscratch*\/); \/\/ 0xc0; 192-bit key goes up to 0xc0\n@@ -1462,1 +1452,1 @@\n-      load_key(xmm_key11, key, 0xb0); \/\/ 0xb0; 256-bit key goes up to 0xe0\n+      load_key(xmm_key11, key, 0xb0, rbx \/*rscratch*\/); \/\/ 0xb0; 256-bit key goes up to 0xe0\n@@ -1478,1 +1468,1 @@\n-      load_key(key_tmp, key, 0xc0);\n+      load_key(key_tmp, key, 0xc0, rbx \/*rscratch*\/);\n@@ -1480,1 +1470,1 @@\n-      load_key(key_tmp, key, 0xd0);\n+      load_key(key_tmp, key, 0xd0, rbx \/*rscratch*\/);\n@@ -1482,1 +1472,1 @@\n-      load_key(key_tmp, key, 0xe0);\n+      load_key(key_tmp, key, 0xe0, rbx \/*rscratch*\/);\n@@ -1614,1 +1604,0 @@\n-\/\/ can optionally specify that the shuffle mask is already in an xmmregister\n@@ -1617,5 +1606,6 @@\n-  if (xmm_shuf_mask != xnoreg) {\n-    __ pshufb(xmmdst, xmm_shuf_mask);\n-  } else {\n-    __ pshufb(xmmdst, ExternalAddress(StubRoutines::x86::key_shuffle_mask_addr()));\n-  }\n+  __ pshufb(xmmdst, xmm_shuf_mask);\n+}\n+\n+void StubGenerator::load_key(XMMRegister xmmdst, Register key, int offset, Register rscratch) {\n+  __ movdqu(xmmdst, Address(key, offset));\n+  __ pshufb(xmmdst, ExternalAddress(key_shuffle_mask_addr()), rscratch);\n@@ -1626,5 +1616,7 @@\n-  if (xmm_shuf_mask != xnoreg) {\n-    __ pshufb(xmmdst, xmm_shuf_mask);\n-  } else {\n-    __ pshufb(xmmdst, ExternalAddress(StubRoutines::x86::key_shuffle_mask_addr()));\n-  }\n+  __ pshufb(xmmdst, xmm_shuf_mask);\n+  __ evshufi64x2(xmmdst, xmmdst, xmmdst, 0x0, Assembler::AVX_512bit);\n+}\n+\n+void StubGenerator::ev_load_key(XMMRegister xmmdst, Register key, int offset, Register rscratch) {\n+  __ movdqu(xmmdst, Address(key, offset));\n+  __ pshufb(xmmdst, ExternalAddress(key_shuffle_mask_addr()), rscratch);\n@@ -1634,0 +1626,1 @@\n+\n@@ -1662,1 +1655,1 @@\n-  __ movdqu(xmm_key_shuf_mask, ExternalAddress(StubRoutines::x86::key_shuffle_mask_addr()));\n+  __ movdqu(xmm_key_shuf_mask, ExternalAddress(key_shuffle_mask_addr()), rbx \/*rscratch*\/);\n@@ -1872,1 +1865,1 @@\n-  __ movdqu(xmm_key_shuf_mask, ExternalAddress(StubRoutines::x86::key_shuffle_mask_addr()));\n+  __ movdqu(xmm_key_shuf_mask, ExternalAddress(key_shuffle_mask_addr()), rbx \/*rscratch*\/);\n@@ -2101,1 +2094,1 @@\n-  __ evmovdquq(xmm16, ExternalAddress(StubRoutines::x86::counter_mask_addr()), Assembler::AVX_512bit, r15);\n+  __ evmovdquq(xmm16, ExternalAddress(counter_shuffle_mask_addr()), Assembler::AVX_512bit, r15 \/*rscratch*\/);\n@@ -2111,8 +2104,8 @@\n-  __ vpaddd(xmm8, xmm8, ExternalAddress(StubRoutines::x86::counter_mask_addr() + 64), Assembler::AVX_512bit, r15);\/\/linc0\n-  __ vpaddd(xmm9, xmm8, ExternalAddress(StubRoutines::x86::counter_mask_addr() + 128), Assembler::AVX_512bit, r15);\/\/linc4(rip)\n-  __ vpaddd(xmm10, xmm9, ExternalAddress(StubRoutines::x86::counter_mask_addr() + 128), Assembler::AVX_512bit, r15);\/\/Linc4(rip)\n-  __ vpaddd(xmm11, xmm10, ExternalAddress(StubRoutines::x86::counter_mask_addr() + 128), Assembler::AVX_512bit, r15);\/\/Linc4(rip)\n-  __ vpaddd(xmm12, xmm11, ExternalAddress(StubRoutines::x86::counter_mask_addr() + 128), Assembler::AVX_512bit, r15);\/\/Linc4(rip)\n-  __ vpaddd(xmm13, xmm12, ExternalAddress(StubRoutines::x86::counter_mask_addr() + 128), Assembler::AVX_512bit, r15);\/\/Linc4(rip)\n-  __ vpaddd(xmm14, xmm13, ExternalAddress(StubRoutines::x86::counter_mask_addr() + 128), Assembler::AVX_512bit, r15);\/\/Linc4(rip)\n-  __ vpaddd(xmm15, xmm14, ExternalAddress(StubRoutines::x86::counter_mask_addr() + 128), Assembler::AVX_512bit, r15);\/\/Linc4(rip)\n+  __ vpaddd(xmm8,  xmm8,  ExternalAddress(counter_mask_linc0_addr()), Assembler::AVX_512bit, r15 \/*rscratch*\/);\n+  __ vpaddd(xmm9,  xmm8,  ExternalAddress(counter_mask_linc4_addr()), Assembler::AVX_512bit, r15 \/*rscratch*\/);\n+  __ vpaddd(xmm10, xmm9,  ExternalAddress(counter_mask_linc4_addr()), Assembler::AVX_512bit, r15 \/*rscratch*\/);\n+  __ vpaddd(xmm11, xmm10, ExternalAddress(counter_mask_linc4_addr()), Assembler::AVX_512bit, r15 \/*rscratch*\/);\n+  __ vpaddd(xmm12, xmm11, ExternalAddress(counter_mask_linc4_addr()), Assembler::AVX_512bit, r15 \/*rscratch*\/);\n+  __ vpaddd(xmm13, xmm12, ExternalAddress(counter_mask_linc4_addr()), Assembler::AVX_512bit, r15 \/*rscratch*\/);\n+  __ vpaddd(xmm14, xmm13, ExternalAddress(counter_mask_linc4_addr()), Assembler::AVX_512bit, r15 \/*rscratch*\/);\n+  __ vpaddd(xmm15, xmm14, ExternalAddress(counter_mask_linc4_addr()), Assembler::AVX_512bit, r15 \/*rscratch*\/);\n@@ -2121,1 +2114,1 @@\n-  __ evmovdquq(xmm19, ExternalAddress(StubRoutines::x86::counter_mask_addr() + 256), Assembler::AVX_512bit, r15);\/\/Linc32\n+  __ evmovdquq(xmm19, ExternalAddress(counter_mask_linc32_addr()), Assembler::AVX_512bit, r15 \/*rscratch*\/);\n@@ -2124,1 +2117,1 @@\n-  __ movdqu(xmm31, ExternalAddress(StubRoutines::x86::key_shuffle_mask_addr()));\n+  __ movdqu(xmm31, ExternalAddress(key_shuffle_mask_addr()), r15 \/*rscratch*\/);\n@@ -2240,1 +2233,1 @@\n-  __ evmovdquq(xmm19, ExternalAddress(StubRoutines::x86::counter_mask_addr() + 80), Assembler::AVX_128bit, r15);\n+  __ evmovdquq(xmm19, ExternalAddress(counter_mask_linc1_addr()), Assembler::AVX_128bit, r15 \/*rscratch*\/);\n@@ -2247,1 +2240,1 @@\n-  __ evmovdquq(xmm19, ExternalAddress(StubRoutines::x86::counter_mask_addr() + 320), Assembler::AVX_512bit, r15);\/\/Linc16(rip)\n+  __ evmovdquq(xmm19, ExternalAddress(counter_mask_linc16_addr()), Assembler::AVX_512bit, r15 \/*rscratch*\/);\n@@ -2312,1 +2305,1 @@\n-  __ evmovdquq(xmm19, ExternalAddress(StubRoutines::x86::counter_mask_addr() + 80), Assembler::AVX_128bit, r15);\/\/Linc0 + 16(rip)\n+  __ evmovdquq(xmm19, ExternalAddress(counter_mask_linc1_addr()), Assembler::AVX_128bit, r15 \/*rscratch*\/);\n@@ -2319,1 +2312,1 @@\n-  __ evmovdquq(xmm19, ExternalAddress(StubRoutines::x86::counter_mask_addr() + 192), Assembler::AVX_512bit, r15);\/\/Linc8(rip)\n+  __ evmovdquq(xmm19, ExternalAddress(counter_mask_linc8_addr()), Assembler::AVX_512bit, r15 \/*rscratch*\/);\n@@ -2372,1 +2365,1 @@\n-  __ evmovdquq(xmm19, ExternalAddress(StubRoutines::x86::counter_mask_addr() + 80), Assembler::AVX_128bit, r15);\/\/Linc0 + 16(rip)\n+  __ evmovdquq(xmm19, ExternalAddress(counter_mask_linc1_addr()), Assembler::AVX_128bit, r15 \/*rscratch*\/);\n@@ -2379,1 +2372,1 @@\n-  __ evmovdquq(xmm19, ExternalAddress(StubRoutines::x86::counter_mask_addr() + 128), Assembler::AVX_512bit, r15);\/\/Linc4(rip)\n+  __ evmovdquq(xmm19, ExternalAddress(counter_mask_linc4_addr()), Assembler::AVX_512bit, r15 \/*rscratch*\/);\n@@ -2423,1 +2416,1 @@\n-  __ evmovdquq(xmm19, ExternalAddress(StubRoutines::x86::counter_mask_addr() + 80), Assembler::AVX_128bit, r15);\/\/Linc0 + 16(rip)\n+  __ evmovdquq(xmm19, ExternalAddress(counter_mask_linc1_addr()), Assembler::AVX_128bit, r15 \/*rscratch*\/);\n@@ -2560,1 +2553,1 @@\n-  __ evmovdquq(TMP3, ExternalAddress(StubRoutines::x86::ghash_polynomial512_addr()), Assembler::AVX_512bit, r15);\n+  __ evmovdquq(TMP3, ExternalAddress(ghash_polynomial_reduction_addr()), Assembler::AVX_512bit, r15 \/*rscratch*\/);\n@@ -2571,1 +2564,1 @@\n-void StubGenerator::generateHtbl_48_block_zmm(Register htbl, Register avx512_htbl) {\n+void StubGenerator::generateHtbl_48_block_zmm(Register htbl, Register avx512_htbl, Register rscratch) {\n@@ -2580,1 +2573,1 @@\n-  __ movdqu(xmm10, ExternalAddress(StubRoutines::x86::ghash_long_swap_mask_addr()));\n+  __ movdqu(xmm10, ExternalAddress(ghash_long_swap_mask_addr()), rscratch);\n@@ -2583,2 +2576,2 @@\n-  __ movdqu(xmm11, ExternalAddress(StubRoutines::x86::ghash_polynomial512_addr() + 64)); \/\/ Poly\n-  __ movdqu(xmm12, ExternalAddress(StubRoutines::x86::ghash_polynomial512_addr() + 80)); \/\/ Twoone\n+  __ movdqu(xmm11, ExternalAddress(ghash_polynomial_addr()), rscratch);\n+  __ movdqu(xmm12, ExternalAddress(ghash_polynomial_two_one_addr()), rscratch);\n@@ -2838,1 +2831,1 @@\n-    __ evmovdquq(ZTMP12, ExternalAddress(StubRoutines::x86::ghash_polynomial512_addr()), Assembler::AVX_512bit, rbx);\n+    __ evmovdquq(ZTMP12, ExternalAddress(ghash_polynomial_reduction_addr()), Assembler::AVX_512bit, rbx \/*rscratch*\/);\n@@ -2945,1 +2938,1 @@\n-  __ movdqu(xmm24, ExternalAddress(StubRoutines::x86::ghash_long_swap_mask_addr()), rbx);\n+  __ movdqu(xmm24, ExternalAddress(ghash_long_swap_mask_addr()), rbx \/*rscratch*\/);\n@@ -2955,1 +2948,1 @@\n-  __ evmovdquq(xmm24, ExternalAddress(StubRoutines::x86::counter_mask_addr()), Assembler::AVX_512bit, rbx);\n+  __ evmovdquq(xmm24, ExternalAddress(counter_shuffle_mask_addr()), Assembler::AVX_512bit, rbx \/*rscratch*\/);\n@@ -2960,1 +2953,1 @@\n-  __ evmovdquq(COUNTER_INC_MASK, ExternalAddress(StubRoutines::x86::counter_mask_addr() + 128), Assembler::AVX_512bit, rbx);\n+  __ evmovdquq(COUNTER_INC_MASK, ExternalAddress(counter_mask_linc4_addr()), Assembler::AVX_512bit, rbx \/*rscratch*\/);\n@@ -2962,1 +2955,1 @@\n-  __ vpaddd(ZTMP5, CTR_BLOCKx, ExternalAddress(StubRoutines::x86::counter_mask_addr() + 64), Assembler::AVX_512bit, rbx);\n+  __ vpaddd(ZTMP5, CTR_BLOCKx, ExternalAddress(counter_mask_linc0_addr()), Assembler::AVX_512bit, rbx \/*rscratch*\/);\n@@ -2975,1 +2968,1 @@\n-  __ movdqu(xmm29, ExternalAddress(StubRoutines::x86::key_shuffle_mask_addr()), rbx);\n+  __ movdqu(xmm29, ExternalAddress(key_shuffle_mask_addr()), rbx \/*rscratch*\/);\n@@ -3138,1 +3131,1 @@\n-  __ evmovdquq(ZTMP15, ExternalAddress(StubRoutines::x86::ghash_polynomial512_addr()), Assembler::AVX_512bit, rbx);\n+  __ evmovdquq(ZTMP15, ExternalAddress(ghash_polynomial_reduction_addr()), Assembler::AVX_512bit, rbx \/*rscratch*\/);\n@@ -3147,1 +3140,1 @@\n-  __ movdqu(xmm24, ExternalAddress(StubRoutines::x86::ghash_long_swap_mask_addr()));\n+  __ movdqu(xmm24, ExternalAddress(ghash_long_swap_mask_addr()), rbx \/*rscratch*\/);\n@@ -3154,1 +3147,1 @@\n-  generateHtbl_48_block_zmm(subkeyHtbl, avx512_subkeyHtbl);\n+  generateHtbl_48_block_zmm(subkeyHtbl, avx512_subkeyHtbl, rbx \/*rscratch*\/);\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_aes.cpp","additions":172,"deletions":179,"binary":false,"changes":351,"status":"modified"},{"patch":"@@ -35,13 +35,5 @@\n-\/\/ GHASH intrinsic stubs\n-\n-\n-\/\/ Polynomial x^128+x^127+x^126+x^121+1\n-address StubGenerator::generate_ghash_polynomial_addr() {\n-  __ align(CodeEntryAlignment);\n-  StubCodeMark mark(this, \"StubRoutines\", \"_ghash_poly_addr\");\n-  address start = __ pc();\n-\n-  __ emit_data64(0x0000000000000001, relocInfo::none);\n-  __ emit_data64(0xc200000000000000, relocInfo::none);\n-\n-  return start;\n+ATTRIBUTE_ALIGNED(16) uint64_t GHASH_SHUFFLE_MASK[] = {\n+    0x0F0F0F0F0F0F0F0FUL, 0x0F0F0F0F0F0F0F0FUL,\n+};\n+static address ghash_shuffle_mask_addr() {\n+  return (address)GHASH_SHUFFLE_MASK;\n@@ -50,12 +42,0 @@\n-address StubGenerator::generate_ghash_shufflemask_addr() {\n-  __ align(CodeEntryAlignment);\n-  StubCodeMark mark(this, \"StubRoutines\", \"_ghash_shuffmask_addr\");\n-  address start = __ pc();\n-\n-  __ emit_data64(0x0f0f0f0f0f0f0f0f, relocInfo::none);\n-  __ emit_data64(0x0f0f0f0f0f0f0f0f, relocInfo::none);\n-\n-  return start;\n-}\n-\n-\n@@ -63,4 +43,6 @@\n-address StubGenerator::generate_ghash_long_swap_mask() {\n-  __ align(CodeEntryAlignment);\n-  StubCodeMark mark(this, \"StubRoutines\", \"ghash_long_swap_mask\");\n-  address start = __ pc();\n+ATTRIBUTE_ALIGNED(16) uint64_t GHASH_LONG_SWAP_MASK[] = {\n+    0x0F0E0D0C0B0A0908UL, 0x0706050403020100UL,\n+};\n+address StubGenerator::ghash_long_swap_mask_addr() {\n+  return (address)GHASH_LONG_SWAP_MASK;\n+}\n@@ -68,2 +50,7 @@\n-  __ emit_data64(0x0f0e0d0c0b0a0908, relocInfo::none );\n-  __ emit_data64(0x0706050403020100, relocInfo::none );\n+\/\/ byte swap x86 byte array\n+ATTRIBUTE_ALIGNED(16) uint64_t GHASH_BYTE_SWAP_MASK[] = {\n+  0x08090A0B0C0D0E0FUL, 0x0001020304050607UL,\n+};\n+address StubGenerator::ghash_byte_swap_mask_addr() {\n+  return (address)GHASH_BYTE_SWAP_MASK;\n+}\n@@ -71,1 +58,6 @@\n-return start;\n+\/\/ Polynomial x^128+x^127+x^126+x^121+1\n+ATTRIBUTE_ALIGNED(16) uint64_t GHASH_POLYNOMIAL[] = {\n+    0x0000000000000001UL, 0xC200000000000000UL,\n+};\n+address StubGenerator::ghash_polynomial_addr() {\n+  return (address)GHASH_POLYNOMIAL;\n@@ -74,5 +66,0 @@\n-\/\/ byte swap x86 byte array\n-address StubGenerator::generate_ghash_byte_swap_mask() {\n-  __ align(CodeEntryAlignment);\n-  StubCodeMark mark(this, \"StubRoutines\", \"ghash_byte_swap_mask\");\n-  address start = __ pc();\n@@ -80,2 +67,1 @@\n-  __ emit_data64(0x08090a0b0c0d0e0f, relocInfo::none );\n-  __ emit_data64(0x0001020304050607, relocInfo::none );\n+\/\/ GHASH intrinsic stubs\n@@ -83,1 +69,8 @@\n-return start;\n+void StubGenerator::generate_ghash_stubs() {\n+  if (UseGHASHIntrinsics) {\n+    if (VM_Version::supports_avx()) {\n+      StubRoutines::_ghash_processBlocks = generate_avx_ghash_processBlocks();\n+    } else {\n+      StubRoutines::_ghash_processBlocks = generate_ghash_processBlocks();\n+    }\n+  }\n@@ -113,1 +106,3 @@\n-  __ movdqu(xmm_temp10, ExternalAddress(StubRoutines::x86::ghash_long_swap_mask_addr()));\n+  __ push(rbx); \/\/ scratch\n+\n+  __ movdqu(xmm_temp10, ExternalAddress(ghash_long_swap_mask_addr()), rbx \/*rscratch*\/);\n@@ -121,1 +116,1 @@\n-  __ pshufb(xmm_temp2, ExternalAddress(StubRoutines::x86::ghash_byte_swap_mask_addr()));\n+  __ pshufb(xmm_temp2, ExternalAddress(ghash_byte_swap_mask_addr()), rbx \/*rscratch*\/);\n@@ -211,0 +206,3 @@\n+\n+  __ pop(rbx);\n+\n@@ -231,0 +229,1 @@\n+  __ push(rbx);\n@@ -234,0 +233,1 @@\n+  __ pop(rbx);\n@@ -271,1 +271,1 @@\n-  __ movdqu(lswap_mask, ExternalAddress(StubRoutines::x86::ghash_long_swap_mask_addr()));\n+  __ movdqu(lswap_mask, ExternalAddress(ghash_long_swap_mask_addr()), rbx \/*rscratch*\/);\n@@ -287,1 +287,1 @@\n-  __ movdqu(bswap_mask, ExternalAddress(StubRoutines::x86::ghash_byte_swap_mask_addr()));\n+  __ movdqu(bswap_mask, ExternalAddress(ghash_byte_swap_mask_addr()), rbx \/*rscratch*\/);\n@@ -372,1 +372,1 @@\n-  __ movdqu(bswap_mask, ExternalAddress(StubRoutines::x86::ghash_byte_swap_mask_addr()));\n+  __ movdqu(bswap_mask, ExternalAddress(ghash_byte_swap_mask_addr()), rbx \/*rscratch*\/);\n@@ -396,1 +396,1 @@\n-  generateHtbl_one_block(htbl);\n+  generateHtbl_one_block(htbl, rbx \/*rscratch*\/);\n@@ -475,1 +475,1 @@\n-void StubGenerator::generateHtbl_one_block(Register htbl) {\n+void StubGenerator::generateHtbl_one_block(Register htbl, Register rscratch) {\n@@ -481,1 +481,1 @@\n-  __ movdqu(xmm10, ExternalAddress(StubRoutines::x86::ghash_long_swap_mask_addr()));\n+  __ movdqu(xmm10, ExternalAddress(ghash_long_swap_mask_addr()), rscratch);\n@@ -486,1 +486,1 @@\n-  __ movdqu(xmm4, ExternalAddress(StubRoutines::x86::ghash_shufflemask_addr()));\n+  __ movdqu(xmm4, ExternalAddress(ghash_shuffle_mask_addr()), rscratch);\n@@ -491,1 +491,1 @@\n-  __ movdqu(xmm5, ExternalAddress(StubRoutines::x86::ghash_polynomial_addr()));\n+  __ movdqu(xmm5, ExternalAddress(ghash_polynomial_addr()), rscratch);\n@@ -537,17 +537,0 @@\n-\n-void StubGenerator::generate_ghash_stubs() {\n-  if (UseGHASHIntrinsics) {\n-    if (StubRoutines::x86::_ghash_long_swap_mask_addr == NULL) {\n-      StubRoutines::x86::_ghash_long_swap_mask_addr = generate_ghash_long_swap_mask();\n-    }\n-    StubRoutines::x86::_ghash_byte_swap_mask_addr = generate_ghash_byte_swap_mask();\n-    if (VM_Version::supports_avx()) {\n-      StubRoutines::x86::_ghash_shuffmask_addr = generate_ghash_shufflemask_addr();\n-      StubRoutines::x86::_ghash_poly_addr = generate_ghash_polynomial_addr();\n-      StubRoutines::_ghash_processBlocks = generate_avx_ghash_processBlocks();\n-    } else {\n-      StubRoutines::_ghash_processBlocks = generate_ghash_processBlocks();\n-    }\n-  }\n-}\n-\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_ghash.cpp","additions":50,"deletions":67,"binary":false,"changes":117,"status":"modified"},{"patch":"@@ -37,6 +37,0 @@\n-address StubRoutines::x86::_key_shuffle_mask_addr = NULL;\n-address StubRoutines::x86::_counter_shuffle_mask_addr = NULL;\n-address StubRoutines::x86::_ghash_long_swap_mask_addr = NULL;\n-address StubRoutines::x86::_ghash_byte_swap_mask_addr = NULL;\n-address StubRoutines::x86::_ghash_poly_addr = NULL;\n-address StubRoutines::x86::_ghash_shuffmask_addr = NULL;\n@@ -80,1 +74,0 @@\n-address StubRoutines::x86::_counter_mask_addr = NULL;\n@@ -90,1 +83,0 @@\n-address StubRoutines::x86::_ghash_poly512_addr = NULL;\n","filename":"src\/hotspot\/cpu\/x86\/stubRoutines_x86.cpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -126,5 +126,0 @@\n-  \/\/ shuffle mask for fixing up 128-bit words consisting of big-endian 32-bit integers\n-  static address _key_shuffle_mask_addr;\n-\n-  \/\/shuffle mask for big-endian 128-bit integers\n-  static address _counter_shuffle_mask_addr;\n@@ -148,5 +143,0 @@\n-  \/\/ swap mask for ghash\n-  static address _ghash_long_swap_mask_addr;\n-  static address _ghash_byte_swap_mask_addr;\n-  static address _ghash_poly_addr;\n-  static address _ghash_shuffmask_addr;\n@@ -193,1 +183,0 @@\n-  static address _counter_mask_addr;\n@@ -209,1 +198,0 @@\n-  static address _ghash_poly512_addr;\n@@ -217,2 +205,0 @@\n-  static address key_shuffle_mask_addr() { return _key_shuffle_mask_addr; }\n-  static address counter_shuffle_mask_addr() { return _counter_shuffle_mask_addr; }\n@@ -225,1 +211,0 @@\n-  static address ghash_polynomial512_addr() { return _ghash_poly512_addr; }\n@@ -227,4 +212,0 @@\n-  static address ghash_long_swap_mask_addr() { return _ghash_long_swap_mask_addr; }\n-  static address ghash_byte_swap_mask_addr() { return _ghash_byte_swap_mask_addr; }\n-  static address ghash_shufflemask_addr() { return _ghash_shuffmask_addr; }\n-  static address ghash_polynomial_addr() { return _ghash_poly_addr; }\n@@ -339,1 +320,0 @@\n-  static address counter_mask_addr() { return _counter_mask_addr; }\n","filename":"src\/hotspot\/cpu\/x86\/stubRoutines_x86.hpp","additions":0,"deletions":20,"binary":false,"changes":20,"status":"modified"}]}