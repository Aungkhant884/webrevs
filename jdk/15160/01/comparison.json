{"files":[{"patch":"@@ -713,1 +713,2 @@\n-  assert(pointer_delta(end, start, sizeof(jbyte)) < INT_MAX,\n+  size_t code_size = pointer_delta(end, start, sizeof(jbyte));\n+  assert(code_size < INT_MAX,\n@@ -717,1 +718,1 @@\n-    pointer_delta(end, start, sizeof(jbyte)), 0, nullptr);\n+                      checked_cast<int>(code_size), 0, nullptr);\n","filename":"src\/hotspot\/share\/prims\/forte.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -191,1 +191,1 @@\n-    intptr_t offset = raw_instance_offset(id);\n+    int offset = raw_instance_offset(id);\n@@ -209,1 +209,1 @@\n-intptr_t jfieldIDWorkaround::encode_klass_hash(Klass* k, intptr_t offset) {\n+intptr_t jfieldIDWorkaround::encode_klass_hash(Klass* k, int offset) {\n@@ -252,1 +252,1 @@\n-  intptr_t offset = raw_instance_offset(id);\n+  int offset = raw_instance_offset(id);\n@@ -416,1 +416,1 @@\n-    intptr_t offset = InstanceKlass::cast(k1)->field_offset( slot );\n+    int offset = InstanceKlass::cast(k1)->field_offset( slot );\n@@ -428,1 +428,1 @@\n-  intptr_t offset = InstanceKlass::cast(k1)->field_offset( slot );\n+  int offset = InstanceKlass::cast(k1)->field_offset( slot );\n@@ -1887,0 +1887,1 @@\n+\/\/ TODO: make this a template\n@@ -1904,1 +1905,0 @@\n-  if (SigType == JVM_SIGNATURE_BOOLEAN) { value = ((jboolean)value) & 1; } \\\n@@ -2097,1 +2097,0 @@\n-  if (SigType == JVM_SIGNATURE_BOOLEAN) { value = ((jboolean)value) & 1; } \\\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -611,1 +611,2 @@\n-  return handle == nullptr ? 0 : ObjectSynchronizer::FastHashCode (THREAD, JNIHandles::resolve_non_null(handle)) ;\n+  return handle == nullptr ? 0 :\n+         checked_cast<jint>(ObjectSynchronizer::FastHashCode (THREAD, JNIHandles::resolve_non_null(handle)));\n@@ -1595,1 +1596,1 @@\n-  intptr_t offset = ik->field_offset(slot);\n+  int offset = ik->field_offset(slot);\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -619,1 +619,1 @@\n-    int offset = checked_cast<int>(jfieldIDWorkaround::from_instance_jfieldID(k, field));\n+    int offset = jfieldIDWorkaround::from_instance_jfieldID(k, field);\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvBase.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -696,1 +696,1 @@\n-    DEBUG_ONLY(int vmindex = java_lang_invoke_MemberName::vmindex(mname()));\n+    DEBUG_ONLY(intptr_t vmindex = java_lang_invoke_MemberName::vmindex(mname()));\n@@ -710,1 +710,1 @@\n-  DEBUG_ONLY(int old_vmindex);\n+  DEBUG_ONLY(intptr_t old_vmindex);\n@@ -910,1 +910,1 @@\n-      int vmindex  = java_lang_invoke_MemberName::vmindex(mname());\n+      intptr_t vmindex  = java_lang_invoke_MemberName::vmindex(mname());\n@@ -913,1 +913,1 @@\n-      if (!defc->find_field_from_offset(vmindex, is_static, &fd))\n+      if (!defc->find_field_from_offset(checked_cast<int>(vmindex), is_static, &fd))\n@@ -1164,1 +1164,1 @@\n-      int vmindex = java_lang_invoke_MemberName::vmindex(mname);\n+      intptr_t vmindex = java_lang_invoke_MemberName::vmindex(mname);\n","filename":"src\/hotspot\/share\/prims\/methodHandles.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-JavaFrameStream::JavaFrameStream(JavaThread* thread, int mode, Handle cont_scope, Handle cont)\n+JavaFrameStream::JavaFrameStream(JavaThread* thread, jlong mode, Handle cont_scope, Handle cont)\n","filename":"src\/hotspot\/share\/prims\/stackwalk.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-  JavaFrameStream(JavaThread* thread, int mode, Handle cont_scope, Handle cont);\n+  JavaFrameStream(JavaThread* thread, jlong mode, Handle cont_scope, Handle cont);\n@@ -150,1 +150,1 @@\n-  static inline bool get_caller_class(int mode) {\n+  static inline bool get_caller_class(jlong mode) {\n@@ -153,1 +153,1 @@\n-  static inline bool skip_hidden_frames(int mode) {\n+  static inline bool skip_hidden_frames(jlong mode) {\n@@ -156,1 +156,1 @@\n-  static inline bool live_frame_info(int mode) {\n+  static inline bool live_frame_info(jlong mode) {\n@@ -161,1 +161,1 @@\n-  static inline bool need_method_info(int mode) {\n+  static inline bool need_method_info(jlong mode) {\n@@ -164,1 +164,1 @@\n-  static inline bool use_frames_array(int mode) {\n+  static inline bool use_frames_array(jlong mode) {\n","filename":"src\/hotspot\/share\/prims\/stackwalk.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-static inline jlong field_offset_from_byte_offset(jlong byte_offset) {\n+static inline int field_offset_from_byte_offset(int byte_offset) {\n","filename":"src\/hotspot\/share\/prims\/unsafe.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -144,1 +144,1 @@\n-  const char c_delim = j_delim & 0xff;\n+  const char c_delim = (char)(j_delim & 0xff);\n","filename":"src\/hotspot\/share\/prims\/wbtestmethods\/parserTests.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1385,1 +1385,1 @@\n-  int result = value;\n+  int result = checked_cast<int>(value);\n@@ -1390,1 +1390,1 @@\n-  uint result = value;\n+  uint result = checked_cast<uint>(value);\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-  static intptr_t raw_instance_offset(jfieldID id) {\n+  static int raw_instance_offset(jfieldID id) {\n@@ -92,1 +92,3 @@\n-    return result;\n+    \/\/ This gets back the InstanceKlass field offset that\n+    \/\/ the jfieldID is created with.\n+    return checked_cast<int>(result);\n@@ -94,1 +96,1 @@\n-  static intptr_t encode_klass_hash(Klass* k, intptr_t offset);\n+  static intptr_t encode_klass_hash(Klass* k, int offset);\n@@ -127,1 +129,1 @@\n-  static intptr_t from_instance_jfieldID(Klass* k, jfieldID id) {\n+  static int from_instance_jfieldID(Klass* k, jfieldID id) {\n","filename":"src\/hotspot\/share\/runtime\/jfieldIDWorkaround.hpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"}]}