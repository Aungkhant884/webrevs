{"files":[{"patch":"@@ -347,0 +347,19 @@\n+    \/**\n+     * {@return {@code true} if the {@code Console} instance is a terminal}\n+     * <p>\n+     * If it is {@code true}, the {@code Console} instance is attached to a terminal\n+     * provided by the underlying platform, typically its input and output\n+     * character devices are available to the {@code Console}. Otherwise it could\n+     * mean that the implementation of the {@code Console} may simulate those\n+     * devices within.\n+     *\n+     * @implNote The default implementation returns the value equivalent to calling\n+     * {@code isatty(stdin\/stdout)} on POSIX platforms, or whether standard in\/out file\n+     * descriptors are character devices or not on Windows.\n+     *\n+     * @since 22\n+     *\/\n+    public boolean isTerminal() {\n+        return istty;\n+    }\n+\n@@ -353,0 +372,1 @@\n+    private static final boolean istty = istty();\n@@ -356,1 +376,0 @@\n-        boolean istty = istty();\n","filename":"src\/java.base\/share\/classes\/java\/io\/Console.java","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,4 +37,4 @@\n-    private final Object readLock;\n-    private final Object writeLock;\n-    private final Reader reader;\n-    private final PrintWriter printWriter;\n+    private final Object readLock = new Object();\n+    private final Object writeLock = new Object();\n+    private volatile Reader reader;\n+    private volatile PrintWriter printWriter;\n@@ -44,4 +44,0 @@\n-        readLock = new Object();\n-        writeLock = new Object();\n-        reader = new WrappingReader(delegate.reader(), readLock);\n-        printWriter = new WrappingWriter(delegate.writer(), writeLock);\n@@ -55,0 +51,10 @@\n+        PrintWriter printWriter = this.printWriter;\n+        if (printWriter == null) {\n+            synchronized (this) {\n+                printWriter = this.printWriter;\n+                if (printWriter == null) {\n+                    printWriter = new WrappingWriter(delegate.writer(), writeLock);\n+                    this.printWriter = printWriter;\n+                }\n+            }\n+        }\n@@ -63,0 +69,10 @@\n+        Reader reader = this.reader;\n+        if (reader == null) {\n+            synchronized (this) {\n+                reader = this.reader;\n+                if (reader == null) {\n+                    reader = new WrappingReader(delegate.reader(), readLock);\n+                    this.reader = reader;\n+                }\n+            }\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/io\/ProxyingConsole.java","additions":25,"deletions":9,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-    String DEFAULT_PROVIDER_MODULE_NAME = \"java.base\";\n+    String DEFAULT_PROVIDER_MODULE_NAME = \"jdk.internal.le\";\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/io\/JdkConsoleProvider.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -94,0 +94,1 @@\n+                initJLineIfNeeded();\n@@ -108,0 +109,1 @@\n+                initJLineIfNeeded();\n@@ -129,1 +131,0 @@\n-        private final LineReader jline;\n@@ -131,0 +132,1 @@\n+        private volatile LineReader jline;\n@@ -134,1 +136,13 @@\n-            this.jline = LineReaderBuilder.builder().terminal(terminal).build();\n+        }\n+\n+        private void initJLineIfNeeded() {\n+            LineReader jline = this.jline;\n+            if (jline == null) {\n+                synchronized (this) {\n+                    jline = this.jline;\n+                    if (jline == null) {\n+                        jline = LineReaderBuilder.builder().terminal(terminal).build();\n+                        this.jline = jline;\n+                    }\n+                }\n+            }\n","filename":"src\/jdk.internal.le\/share\/classes\/jdk\/internal\/org\/jline\/JdkConsoleProviderImpl.java","additions":17,"deletions":3,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n- * @run main\/othervm ModuleSelectionTest java.base\n+ * @run main\/othervm ModuleSelectionTest jdk.internal.le\n","filename":"test\/jdk\/java\/io\/Console\/ModuleSelectionTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}