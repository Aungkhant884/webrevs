{"files":[{"patch":"@@ -446,10 +446,6 @@\n-        if (!isServer) {\n-            \/\/ Do not initialize the VM on the server (unnecessary, since it's\n-            \/\/ instantiated on the client)\n-            try {\n-                VM.initialize(db, debugger);\n-            } catch (DebuggerException e) {\n-                throw (e);\n-            } catch (Exception e) {\n-                throw new DebuggerException(e);\n-            }\n+        try {\n+            VM.initialize(db, debugger);\n+        } catch (DebuggerException e) {\n+            throw (e);\n+        } catch (Exception e) {\n+            throw new DebuggerException(e);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/HotSpotAgent.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2009, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.util.*;\n@@ -79,0 +80,4 @@\n+\n+  public default String execCommandOnServer(String command, Map<String, Object> options) throws RemoteException {\n+    throw new DebuggerException(\"Command execution is not supported\");\n+  }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/remote\/RemoteDebugger.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -418,0 +418,8 @@\n+\n+  public String execCommandOnServer(String command, Map<String, Object> options) {\n+    try {\n+      return remoteDebugger.execCommandOnServer(command, options);\n+    } catch (RemoteException e) {\n+      throw new DebuggerException(e);\n+    }\n+  }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/remote\/RemoteDebuggerClient.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+import java.io.*;\n@@ -29,0 +30,1 @@\n+import java.util.*;\n@@ -31,0 +33,1 @@\n+import sun.jvm.hotspot.tools.*;\n@@ -38,1 +41,1 @@\n-  private transient Debugger debugger;\n+  private transient JVMDebugger debugger;\n@@ -47,1 +50,1 @@\n-  public RemoteDebuggerServer(Debugger debugger, int port) throws RemoteException {\n+  public RemoteDebuggerServer(JVMDebugger debugger, int port) throws RemoteException {\n@@ -54,1 +57,1 @@\n-  public RemoteDebuggerServer(Debugger debugger) throws RemoteException {\n+  public RemoteDebuggerServer(JVMDebugger debugger) throws RemoteException {\n@@ -178,0 +181,19 @@\n+\n+  @Override\n+  public String execCommandOnServer(String command, Map<String, Object> options) throws RemoteException {\n+    ByteArrayOutputStream bout = new ByteArrayOutputStream();\n+    try (var out = new PrintStream(bout)) {\n+      if (command.equals(\"pmap\")) {\n+        (new PMap(debugger)).run(out, debugger);\n+      } else if (command.equals(\"pstack\")) {\n+        PStack pstack = new PStack(debugger);\n+        pstack.setVerbose(false);\n+        pstack.setConcurrentLocks((boolean)options.get(\"concurrentLocks\"));\n+        pstack.run(out, debugger);\n+      } else {\n+        throw new DebuggerException(command + \" is not supported in this debugger\");\n+      }\n+    }\n+\n+    return bout.toString();\n+  }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/remote\/RemoteDebuggerServer.java","additions":26,"deletions":4,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import sun.jvm.hotspot.debugger.remote.*;\n@@ -80,1 +81,1 @@\n-              out.println(\"remote configuration is not yet implemented\");\n+            out.print(((RemoteDebuggerClient)dbg).execCommandOnServer(\"pmap\", null));\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/tools\/PMap.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import sun.jvm.hotspot.debugger.remote.*;\n@@ -196,1 +197,1 @@\n-              out.println(\"remote configuration is not yet implemented\");\n+              out.print(((RemoteDebuggerClient)dbg).execCommandOnServer(\"pstack\", Map.of(\"concurrentLocks\", concurrentLocks)));\n@@ -288,0 +289,8 @@\n+\n+   public void setVerbose(boolean verbose) {\n+       this.verbose = verbose;\n+   }\n+\n+   public void setConcurrentLocks(boolean concurrentLocks) {\n+       this.concurrentLocks = concurrentLocks;\n+   }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/tools\/PStack.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -48,12 +48,1 @@\n-\n-        if (SATestUtils.needsPrivileges()) {\n-            \/\/ This tests has issues if you try adding privileges on OSX. The debugd process cannot\n-            \/\/ be killed if you do this (because it is a root process and the test is not), so the destroy()\n-            \/\/ call fails to do anything, and then waitFor() will time out. If you try to manually kill it with\n-            \/\/ a \"sudo kill\" command, that seems to work, but then leaves the LingeredApp it was\n-            \/\/ attached to in a stuck state for some unknown reason, causing the stopApp() call\n-            \/\/ to timeout. For that reason we don't run this test when privileges are needed. Note\n-            \/\/ it does appear to run fine as root, so we still allow it to run on OSX when privileges\n-            \/\/ are not required.\n-            throw new SkippedException(\"Cannot run this test on OSX if adding privileges is required.\");\n-        }\n+        SATestUtils.validateSADebugDPrivileges();\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/sadebugd\/ClhsdbAttachToDebugServer.java","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,85 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021 NTT DATA.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.JDKToolLauncher;\n+import jdk.test.lib.apps.LingeredApp;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.SA.SATestUtils;\n+\n+import jtreg.SkippedException;\n+\n+\/**\n+ * @test\n+ * @bug 8263670\n+ * @requires vm.hasSA\n+ * @requires (os.family != \"windows\") & (os.family != \"mac\")\n+ * @library \/test\/lib\n+ * @run main\/othervm PmapOnDebugdTest\n+ *\/\n+\n+public class PmapOnDebugdTest {\n+\n+    public static void main(String[] args) throws Exception {\n+        SATestUtils.skipIfCannotAttach(); \/\/ throws SkippedException if attach not expected to work.\n+        SATestUtils.validateSADebugDPrivileges();\n+\n+        LingeredApp theApp = null;\n+        DebugdUtils debugd = null;\n+        try {\n+            theApp = LingeredApp.startApp();\n+            System.out.println(\"Started LingeredApp with pid \" + theApp.getPid());\n+            debugd = new DebugdUtils(null);\n+            debugd.attach(theApp.getPid());\n+\n+            JDKToolLauncher jhsdbLauncher = JDKToolLauncher.createUsingTestJDK(\"jhsdb\");\n+            jhsdbLauncher.addToolArg(\"jmap\");\n+            jhsdbLauncher.addToolArg(\"--connect\");\n+            jhsdbLauncher.addToolArg(\"localhost\");\n+\n+            Process jhsdb = (SATestUtils.createProcessBuilder(jhsdbLauncher)).start();\n+            OutputAnalyzer out = new OutputAnalyzer(jhsdb);\n+\n+            jhsdb.waitFor();\n+            System.out.println(out.getStdout());\n+            System.err.println(out.getStderr());\n+\n+            out.stderrShouldBeEmptyIgnoreDeprecatedWarnings();\n+            out.shouldMatch(\"^0x[0-9a-f]+.+libjvm\\\\.so$\"); \/\/ Find libjvm from output\n+            out.shouldHaveExitValue(0);\n+\n+            \/\/ This will detect most SA failures, including during the attach.\n+            out.shouldNotMatch(\"^sun.jvm.hotspot.debugger.DebuggerException:.*$\");\n+        } catch (SkippedException se) {\n+            throw se;\n+        } catch (Exception ex) {\n+            throw new RuntimeException(\"Test ERROR \" + ex, ex);\n+        } finally {\n+            if (debugd != null) {\n+                debugd.detach();\n+            }\n+            LingeredApp.stopApp(theApp);\n+        }\n+        System.out.println(\"Test PASSED\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/sadebugd\/PmapOnDebugdTest.java","additions":85,"deletions":0,"binary":false,"changes":85,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,12 +59,1 @@\n-\n-        if (SATestUtils.needsPrivileges()) {\n-            \/\/ This tests has issues if you try adding privileges on OSX. The debugd process cannot\n-            \/\/ be killed if you do this (because it is a root process and the test is not), so the destroy()\n-            \/\/ call fails to do anything, and then waitFor() will time out. If you try to manually kill it with\n-            \/\/ a \"sudo kill\" command, that seems to work, but then leaves the LingeredApp it was\n-            \/\/ attached to in a stuck state for some unknown reason, causing the stopApp() call\n-            \/\/ to timeout. For that reason we don't run this test when privileges are needed. Note\n-            \/\/ it does appear to run fine as root, so we still allow it to run on OSX when privileges\n-            \/\/ are not required.\n-            throw new SkippedException(\"Cannot run this test on OSX if adding privileges is required.\");\n-        }\n+        SATestUtils.validateSADebugDPrivileges();\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/sadebugd\/SADebugDTest.java","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -210,0 +210,16 @@\n+\n+    \/**\n+     * This tests has issues if you try adding privileges on OSX. The debugd process cannot\n+     * be killed if you do this (because it is a root process and the test is not), so the destroy()\n+     * call fails to do anything, and then waitFor() will time out. If you try to manually kill it with\n+     * a \"sudo kill\" command, that seems to work, but then leaves the LingeredApp it was\n+     * attached to in a stuck state for some unknown reason, causing the stopApp() call\n+     * to timeout. For that reason we don't run this test when privileges are needed. Note\n+     * it does appear to run fine as root, so we still allow it to run on OSX when privileges\n+     * are not required.\n+     *\/\n+    public static void validateSADebugDPrivileges() {\n+        if (needsPrivileges()) {\n+            throw new SkippedException(\"Cannot run this test on OSX if adding privileges is required.\");\n+        }\n+    }\n","filename":"test\/lib\/jdk\/test\/lib\/SA\/SATestUtils.java","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"}]}