{"files":[{"patch":"@@ -498,1 +498,1 @@\n-                throw new IRViolationException(failuresBuilder.toString(), compilationsBuilder.toString());\n+                throw new IRViolationException(failuresBuilder.toString(), compilations);\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/IRMatcher.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,3 +34,1 @@\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.List;\n+import java.util.*;\n@@ -54,1 +52,7 @@\n-    private static final List<Exception> exceptions = new ArrayList<>();\n+    private static final Map<Exception, String> exceptions = new LinkedHashMap<>();\n+    private static final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+    private static final ByteArrayOutputStream baosErr = new ByteArrayOutputStream();\n+    private static final PrintStream ps = new PrintStream(baos);\n+    private static final PrintStream psErr = new PrintStream(baosErr);\n+    private static final PrintStream oldOut = System.out;\n+    private static final PrintStream oldErr = System.err;\n@@ -57,2 +61,3 @@\n-        System.out.println(TestFramework.getLastTestVMOutput());\n-        exceptions.add(e);\n+        System.out.flush();\n+        System.err.flush();\n+        exceptions.put(e, baos.toString() + System.lineSeparator() + baosErr.toString());\n@@ -62,3 +67,3 @@\n-        runFailOnTestsArgs(BadFailOnConstraint.create(AndOr1.class, \"test1(int)\", 1, \"CallStaticJava\"), \"-XX:TLABRefillWasteFraction=50\", \"-XX:+UsePerfData\", \"-XX:+UseTLAB\");\n-        runFailOnTestsArgs(BadFailOnConstraint.create(AndOr1.class, \"test2()\", 1, \"CallStaticJava\"), \"-XX:TLABRefillWasteFraction=50\", \"-XX:-UsePerfData\", \"-XX:+UseTLAB\");\n-\n+        \/\/ Redirect System.out and System.err to reduce noise.\n+        System.setOut(ps);\n+        System.setErr(psErr);\n@@ -70,0 +75,3 @@\n+        runCheck(new String[] {\"-XX:TLABRefillWasteFraction=50\", \"-XX:+UsePerfData\", \"-XX:+UseTLAB\"}, BadFailOnConstraint.create(AndOr1.class, \"test1(int)\", 1, \"CallStaticJava\"));\n+        runCheck(new String[] {\"-XX:TLABRefillWasteFraction=50\", \"-XX:-UsePerfData\", \"-XX:+UseTLAB\"}, BadFailOnConstraint.create(AndOr1.class, \"test2()\", 1, \"CallStaticJava\"));\n+\n@@ -219,6 +227,0 @@\n-        \/\/ Redirect stdout to stream and then check if we find required IR encoding read from socket.\n-        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-        PrintStream ps = new PrintStream(baos);\n-        PrintStream old = System.out;\n-        System.setOut(ps);\n-\n@@ -227,1 +229,1 @@\n-            Utils.shouldHaveThrownException();\n+            Utils.shouldHaveThrownException(baos.toString());\n@@ -230,1 +232,1 @@\n-                boolean failed = false;\n+                StringBuilder failures = new StringBuilder();\n@@ -238,2 +240,1 @@\n-                    exceptions.add(new RuntimeException(\"Could not find all both() methods, expected 7 but found \" + bothCount));\n-                    failed = true;\n+                    failures.append(\"- Could not find all both() methods, expected 7 but found \").append(bothCount).append(System.lineSeparator());\n@@ -246,1 +247,3 @@\n-                    Asserts.assertFalse(match.contains(\"PrintOptoAssembly\"), \"Cannot contain opto assembly: \" + output);\n+                    if (match.contains(\"PrintOptoAssembly\")) {\n+                        failures.append(\"Cannot contain opto assembly: \").append(System.lineSeparator()).append(match);\n+                    }\n@@ -250,2 +253,1 @@\n-                    exceptions.add(new RuntimeException(\"Could not find all ideal() methods, expected 7 but found \" + count));\n-                    failed = true;\n+                    failures.append(\"- Could not find all ideal() methods, expected 7 but found \").append(count).append(System.lineSeparator());\n@@ -258,1 +260,3 @@\n-                    Asserts.assertFalse(match.contains(\"PrintIdeal\"), \"Cannot contain opto assembly: \" + output);\n+                    if (match.contains(\"PrintIdeal\")) {\n+                        failures.append(\"Cannot contain print assembly: \").append(System.lineSeparator()).append(match);\n+                    }\n@@ -262,2 +266,1 @@\n-                    exceptions.add(new RuntimeException(\"Could not find all opto() methods, expected 7 but found \" + count));\n-                    failed = true;\n+                    failures.append(\"- Could not find all opto() methods, expected 7 but found \").append(count).append(System.lineSeparator());\n@@ -265,3 +268,2 @@\n-                if (failed) {\n-                    System.err.println(TestFramework.getLastTestVMOutput());\n-                    System.err.println(output);\n+                if (!failures.isEmpty()) {\n+                    addException(new RuntimeException(failures.toString()));\n@@ -279,1 +281,0 @@\n-        baos.reset();\n@@ -286,1 +287,0 @@\n-        baos.reset();\n@@ -293,1 +293,0 @@\n-        baos.reset();\n@@ -296,1 +295,2 @@\n-        System.setOut(old);\n+        System.setOut(oldOut);\n+        System.setErr(oldErr);\n@@ -299,3 +299,8 @@\n-            System.err.println(\"TestIRMatching failed with one or more exceptions:\");\n-            for (Exception e : exceptions) {\n-                System.err.println(e.getMessage());\n+            System.err.println(\"TestIRMatching failed with \" + exceptions.size() + \" exception(s):\");\n+            int i = 1;\n+            System.err.println(\"************************\");\n+            for (Map.Entry<Exception, String> entry : exceptions.entrySet()) {\n+                System.err.println(\"***** Exception \" + String.format(\"%02d\", i++) +\" *****\");\n+                System.err.println(\"************************\");\n+\n+                Exception e = entry.getKey();\n@@ -303,1 +308,16 @@\n-                System.err.println(\"---------\");\n+                System.err.println();\n+                System.err.println(\"===== OUTPUT ======\");\n+                System.err.println(entry.getValue());\n+                System.err.println(\"MESSAGE: \" + e.getMessage());\n+                System.err.println(\"************************\");\n+            }\n+            i = 1;\n+            System.err.println(\"====================================\");\n+            System.err.println(\"********************\");\n+            System.err.println(\"***** OVERVIEW *****\");\n+            System.err.println(\"********************\");\n+            for (Map.Entry<Exception, String> entry : exceptions.entrySet()) {\n+                Exception e = entry.getKey();\n+                System.err.print((i++) + \") \");\n+                entry.getKey().printStackTrace(System.err);\n+                System.err.println(\"********************\");\n@@ -305,1 +325,1 @@\n-            throw new RuntimeException(\"TestIRMatching failed with one or more exceptions - check stderr and stdout\");\n+            throw new RuntimeException(\"TestIRMatching failed with \" + exceptions.size() + \" exception(s) - check stderr and stdout\");\n@@ -309,0 +329,6 @@\n+    private static void runFramework(TestFramework framework) {\n+        baos.reset();\n+        baosErr.reset();\n+        framework.start();\n+    }\n+\n@@ -311,1 +337,1 @@\n-            new TestFramework(clazz).addFlags(args).start();\n+            runFramework(new TestFramework(clazz).addFlags(args));\n@@ -318,1 +344,1 @@\n-        new TestFramework(clazz).addFlags(args).start();\n+        runFramework(new TestFramework(clazz).addFlags(args));\n@@ -323,2 +349,6 @@\n-            new TestFramework(constraints[0].getKlass()).addFlags(args).start(); \/\/ All constraints have the same class.\n-            Utils.shouldHaveThrownException();\n+            TestFramework framework = new TestFramework(constraints[0].getKlass()); \/\/ All constraints have the same class.\n+            if (args != null) {\n+                framework.addFlags(args);\n+            }\n+            runFramework(framework);\n+            Utils.shouldHaveThrownException(baos.toString());\n@@ -333,8 +363,1 @@\n-        try {\n-            TestFramework.run(constraints[0].getKlass()); \/\/ All constraints have the same class.\n-            Utils.shouldHaveThrownException();\n-        } catch (IRViolationException e) {\n-            checkConstraints(e, constraints);\n-        } catch (Exception e) {\n-            addException(e);\n-        }\n+        runCheck(null, constraints);\n@@ -350,1 +373,1 @@\n-            System.out.println(TestFramework.getLastTestVMOutput());\n+            System.out.println(e.getCompilations());\n@@ -352,17 +375,1 @@\n-            exceptions.add(e1);\n-        }\n-    }\n-\n-    \/\/ Single constraint\n-    private static void runFailOnTestsArgs(Constraint constraint, String... args) {\n-        try {\n-            new TestFramework(constraint.getKlass()).addFlags(args).start(); \/\/ All constraints have the same class.\n-            Utils.shouldHaveThrownException();\n-        } catch (IRViolationException e) {\n-            try {\n-                constraint.checkConstraint(e);\n-            } catch (Exception e1) {\n-                addException(e);\n-            }\n-        } catch (Exception e) {\n-            addException(e);\n+            addException(e1);\n@@ -383,2 +390,3 @@\n-        Asserts.assertTrue(output.contains(builder.toString()), \"Could not find encoding: \\\"\" + builder.toString()\n-                                                                + System.lineSeparator());\n+        if (!output.contains(builder.toString())) {\n+            addException(new RuntimeException(\"Could not find encoding: \\\"\" + builder.toString() + System.lineSeparator()));\n+        }\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestIRMatching.java","additions":77,"deletions":69,"binary":false,"changes":146,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n@@ -44,0 +46,5 @@\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        PrintStream ps = new PrintStream(baos);\n+        PrintStream oldOut = System.out;\n+        System.setOut(ps);\n+\n@@ -47,1 +54,1 @@\n-            Utils.shouldHaveThrownException();\n+            Utils.shouldHaveThrownException(baos.toString());\n@@ -49,0 +56,1 @@\n+            System.setOut(oldOut);\n@@ -53,0 +61,1 @@\n+        System.setOut(oldOut);\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestRunTests.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-    public static void shouldHaveThrownException() {\n+    public static void shouldHaveThrownException(String s) {\n@@ -37,1 +37,1 @@\n-        if (!TestVMProcess.getLastTestVMOutput().contains(IRMatcher.SAFEPOINT_WHILE_PRINTING_MESSAGE)) {\n+        if (!s.contains(IRMatcher.SAFEPOINT_WHILE_PRINTING_MESSAGE)) {\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/Utils.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}