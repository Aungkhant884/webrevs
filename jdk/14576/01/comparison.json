{"files":[{"patch":"@@ -2292,1 +2292,0 @@\n-  bool ret_value = true;\n@@ -2300,1 +2299,1 @@\n-        ret_value = false;\n+        return false;\n@@ -2306,1 +2305,9 @@\n-        ret_value = false;\n+        return false;\n+      }\n+      break;\n+    case Op_FmaF:\n+    case Op_FmaD:\n+    case Op_FmaVF:\n+    case Op_FmaVD:\n+      if (!UseFMA) {\n+        return false;\n@@ -2311,1 +2318,1 @@\n-  return ret_value; \/\/ Per default match rules are supported.\n+  return true; \/\/ Per default match rules are supported.\n@@ -14308,1 +14315,0 @@\n-  predicate(UseFMA);\n@@ -14325,1 +14331,0 @@\n-  predicate(UseFMA);\n@@ -14340,1 +14345,2 @@\n-\/\/ -src1 * src2 + src3\n+\/\/ src1 * (-src2) + src3\n+\/\/ \"(-src1) * src2 + src3\" has been idealized to \"src2 * (-src1) + src3\"\n@@ -14342,2 +14348,0 @@\n-  predicate(UseFMA);\n-  match(Set dst (FmaF src3 (Binary (NegF src1) src2)));\n@@ -14358,1 +14362,2 @@\n-\/\/ -src1 * src2 + src3\n+\/\/ src1 * (-src2) + src3\n+\/\/ \"(-src1) * src2 + src3\" has been idealized to \"src2 * (-src1) + src3\"\n@@ -14360,2 +14365,0 @@\n-  predicate(UseFMA);\n-  match(Set dst (FmaD src3 (Binary (NegD src1) src2)));\n@@ -14376,1 +14379,2 @@\n-\/\/ -src1 * src2 - src3\n+\/\/ src1 * (-src2) - src3\n+\/\/ \"(-src1) * src2 - src3\" has been idealized to \"src2 * (-src1) - src3\"\n@@ -14378,2 +14382,0 @@\n-  predicate(UseFMA);\n-  match(Set dst (FmaF (NegF src3) (Binary (NegF src1) src2)));\n@@ -14394,1 +14396,2 @@\n-\/\/ -src1 * src2 - src3\n+\/\/ src1 * (-src2) - src3\n+\/\/ \"(-src1) * src2 - src3\" has been idealized to \"src2 * (-src1) - src3\"\n@@ -14396,2 +14399,0 @@\n-  predicate(UseFMA);\n-  match(Set dst (FmaD (NegD src3) (Binary (NegD src1) src2)));\n@@ -14414,1 +14415,0 @@\n-  predicate(UseFMA);\n@@ -14431,1 +14431,0 @@\n-  predicate(UseFMA);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":19,"deletions":20,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2138,1 +2138,1 @@\n-\/\/ dst_src1 = dst_src1 + src2 * src3\n+\/\/ dst_src1 = src2 * src3 + dst_src1\n@@ -2141,1 +2141,0 @@\n-  predicate(UseFMA);\n@@ -2164,1 +2163,1 @@\n-  predicate(UseFMA && UseSVE > 0);\n+  predicate(UseSVE > 0);\n@@ -2228,24 +2227,3 @@\n-\/\/ dst_src1 = dst_src1 + -src2 * src3\n-instruct vfmls1(vReg dst_src1, vReg src2, vReg src3) %{\n-  predicate(UseFMA);\n-  match(Set dst_src1 (FmaVF dst_src1 (Binary (NegVF src2) src3)));\n-  match(Set dst_src1 (FmaVD dst_src1 (Binary (NegVD src2) src3)));\n-  format %{ \"vfmls1 $dst_src1, $src2, $src3\" %}\n-  ins_encode %{\n-    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n-    if (VM_Version::use_neon_for_vector(length_in_bytes)) {\n-      __ fmls($dst_src1$$FloatRegister, get_arrangement(this),\n-              $src2$$FloatRegister, $src3$$FloatRegister);\n-    } else {\n-      assert(UseSVE > 0, \"must be sve\");\n-      BasicType bt = Matcher::vector_element_basic_type(this);\n-      __ sve_fmls($dst_src1$$FloatRegister, __ elemType_to_regVariant(bt),\n-                  ptrue, $src2$$FloatRegister, $src3$$FloatRegister);\n-    }\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-\/\/ dst_src1 = dst_src1 + src2 * -src3\n-instruct vfmls2(vReg dst_src1, vReg src2, vReg src3) %{\n-  predicate(UseFMA);\n+\/\/ dst_src1 = src2 * (-src3) + dst_src1\n+\/\/ \"(-src2) * src3 + dst_src1\" has been idealized to \"src3 * (-src2) + dst_src1\"\n+instruct vfmls(vReg dst_src1, vReg src2, vReg src3) %{\n@@ -2254,1 +2232,1 @@\n-  format %{ \"vfmls2 $dst_src1, $src2, $src3\" %}\n+  format %{ \"vfmls $dst_src1, $src2, $src3\" %}\n@@ -2272,1 +2250,1 @@\n-\/\/ dst_src1 = dst_src1 * -src2 + src3\n+\/\/ dst_src1 = dst_src1 * (-src2) + src3\n@@ -2274,1 +2252,1 @@\n-  predicate(UseFMA && UseSVE > 0);\n+  predicate(UseSVE > 0);\n@@ -2288,17 +2266,4 @@\n-\/\/ dst_src1 = -dst_src1 + -src2 * src3\n-instruct vfnmla1(vReg dst_src1, vReg src2, vReg src3) %{\n-  predicate(UseFMA && UseSVE > 0);\n-  match(Set dst_src1 (FmaVF (NegVF dst_src1) (Binary (NegVF src2) src3)));\n-  match(Set dst_src1 (FmaVD (NegVD dst_src1) (Binary (NegVD src2) src3)));\n-  format %{ \"vfnmla1 $dst_src1, $src2, $src3\" %}\n-  ins_encode %{\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    __ sve_fnmla($dst_src1$$FloatRegister, __ elemType_to_regVariant(bt),\n-                 ptrue, $src2$$FloatRegister, $src3$$FloatRegister);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-\/\/ dst_src1 = -dst_src1 + src2 * -src3\n-instruct vfnmla2(vReg dst_src1, vReg src2, vReg src3) %{\n-  predicate(UseFMA && UseSVE > 0);\n+\/\/ dst_src1 = src2 * (-src3) - dst_src1\n+\/\/ \"(-src2) * src3 - dst_src1\" has been idealized to \"src3 * (-src2) - dst_src1\"\n+instruct vfnmla(vReg dst_src1, vReg src2, vReg src3) %{\n+  predicate(UseSVE > 0);\n@@ -2307,1 +2272,1 @@\n-  format %{ \"vfnmla2 $dst_src1, $src2, $src3\" %}\n+  format %{ \"vfnmla $dst_src1, $src2, $src3\" %}\n@@ -2318,1 +2283,1 @@\n-\/\/ dst_src1 = -src3 + dst_src1 * -src2\n+\/\/ dst_src1 = dst_src1 * (-src2) - src3\n@@ -2320,1 +2285,1 @@\n-  predicate(UseFMA && UseSVE > 0);\n+  predicate(UseSVE > 0);\n@@ -2334,1 +2299,1 @@\n-\/\/ dst_src1 = -dst_src1 + src2 * src3\n+\/\/ dst_src1 = src2 * src3 - dst_src1\n@@ -2336,1 +2301,1 @@\n-  predicate(UseFMA && UseSVE > 0);\n+  predicate(UseSVE > 0);\n@@ -2350,1 +2315,1 @@\n-\/\/ dst_src1 = -src3 + dst_src1 * src2\n+\/\/ dst_src1 = dst_src1 * src2 - src3\n@@ -2352,1 +2317,1 @@\n-  predicate(UseFMA && UseSVE > 0);\n+  predicate(UseSVE > 0);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad","additions":19,"deletions":54,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -1180,1 +1180,1 @@\n-\/\/ dst_src1 = dst_src1 + src2 * src3\n+\/\/ dst_src1 = src2 * src3 + dst_src1\n@@ -1183,1 +1183,0 @@\n-  predicate(UseFMA);\n@@ -1206,1 +1205,1 @@\n-  predicate(UseFMA && UseSVE > 0);\n+  predicate(UseSVE > 0);\n@@ -1270,24 +1269,3 @@\n-\/\/ dst_src1 = dst_src1 + -src2 * src3\n-instruct vfmls1(vReg dst_src1, vReg src2, vReg src3) %{\n-  predicate(UseFMA);\n-  match(Set dst_src1 (FmaVF dst_src1 (Binary (NegVF src2) src3)));\n-  match(Set dst_src1 (FmaVD dst_src1 (Binary (NegVD src2) src3)));\n-  format %{ \"vfmls1 $dst_src1, $src2, $src3\" %}\n-  ins_encode %{\n-    uint length_in_bytes = Matcher::vector_length_in_bytes(this);\n-    if (VM_Version::use_neon_for_vector(length_in_bytes)) {\n-      __ fmls($dst_src1$$FloatRegister, get_arrangement(this),\n-              $src2$$FloatRegister, $src3$$FloatRegister);\n-    } else {\n-      assert(UseSVE > 0, \"must be sve\");\n-      BasicType bt = Matcher::vector_element_basic_type(this);\n-      __ sve_fmls($dst_src1$$FloatRegister, __ elemType_to_regVariant(bt),\n-                  ptrue, $src2$$FloatRegister, $src3$$FloatRegister);\n-    }\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-\/\/ dst_src1 = dst_src1 + src2 * -src3\n-instruct vfmls2(vReg dst_src1, vReg src2, vReg src3) %{\n-  predicate(UseFMA);\n+\/\/ dst_src1 = src2 * (-src3) + dst_src1\n+\/\/ \"(-src2) * src3 + dst_src1\" has been idealized to \"src3 * (-src2) + dst_src1\"\n+instruct vfmls(vReg dst_src1, vReg src2, vReg src3) %{\n@@ -1296,1 +1274,1 @@\n-  format %{ \"vfmls2 $dst_src1, $src2, $src3\" %}\n+  format %{ \"vfmls $dst_src1, $src2, $src3\" %}\n@@ -1314,1 +1292,1 @@\n-\/\/ dst_src1 = dst_src1 * -src2 + src3\n+\/\/ dst_src1 = dst_src1 * (-src2) + src3\n@@ -1316,1 +1294,1 @@\n-  predicate(UseFMA && UseSVE > 0);\n+  predicate(UseSVE > 0);\n@@ -1330,17 +1308,4 @@\n-\/\/ dst_src1 = -dst_src1 + -src2 * src3\n-instruct vfnmla1(vReg dst_src1, vReg src2, vReg src3) %{\n-  predicate(UseFMA && UseSVE > 0);\n-  match(Set dst_src1 (FmaVF (NegVF dst_src1) (Binary (NegVF src2) src3)));\n-  match(Set dst_src1 (FmaVD (NegVD dst_src1) (Binary (NegVD src2) src3)));\n-  format %{ \"vfnmla1 $dst_src1, $src2, $src3\" %}\n-  ins_encode %{\n-    BasicType bt = Matcher::vector_element_basic_type(this);\n-    __ sve_fnmla($dst_src1$$FloatRegister, __ elemType_to_regVariant(bt),\n-                 ptrue, $src2$$FloatRegister, $src3$$FloatRegister);\n-  %}\n-  ins_pipe(pipe_slow);\n-%}\n-\n-\/\/ dst_src1 = -dst_src1 + src2 * -src3\n-instruct vfnmla2(vReg dst_src1, vReg src2, vReg src3) %{\n-  predicate(UseFMA && UseSVE > 0);\n+\/\/ dst_src1 = src2 * (-src3) - dst_src1\n+\/\/ \"(-src2) * src3 - dst_src1\" has been idealized to \"src3 * (-src2) - dst_src1\"\n+instruct vfnmla(vReg dst_src1, vReg src2, vReg src3) %{\n+  predicate(UseSVE > 0);\n@@ -1349,1 +1314,1 @@\n-  format %{ \"vfnmla2 $dst_src1, $src2, $src3\" %}\n+  format %{ \"vfnmla $dst_src1, $src2, $src3\" %}\n@@ -1360,1 +1325,1 @@\n-\/\/ dst_src1 = -src3 + dst_src1 * -src2\n+\/\/ dst_src1 = dst_src1 * (-src2) - src3\n@@ -1362,1 +1327,1 @@\n-  predicate(UseFMA && UseSVE > 0);\n+  predicate(UseSVE > 0);\n@@ -1376,1 +1341,1 @@\n-\/\/ dst_src1 = -dst_src1 + src2 * src3\n+\/\/ dst_src1 = src2 * src3 - dst_src1\n@@ -1378,1 +1343,1 @@\n-  predicate(UseFMA && UseSVE > 0);\n+  predicate(UseSVE > 0);\n@@ -1392,1 +1357,1 @@\n-\/\/ dst_src1 = -src3 + dst_src1 * src2\n+\/\/ dst_src1 = dst_src1 * src2 - src3\n@@ -1394,1 +1359,1 @@\n-  predicate(UseFMA && UseSVE > 0);\n+  predicate(UseSVE > 0);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4","additions":19,"deletions":54,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -2151,0 +2151,3 @@\n+    case Op_FmaF:\n+    case Op_FmaD:\n+      return UseFMA;\n@@ -9676,1 +9679,2 @@\n-\/\/ -src1 * src2 + src3 = -(src1*src2-src3)\n+\/\/ src1 * (-src2) + src3 = -(src1*src2-src3)\n+\/\/ \"(-src1) * src2 + src3\" has been idealized to \"src2 * (-src1) + src3\"\n@@ -9678,1 +9682,0 @@\n-  match(Set dst (FmaF src3 (Binary (NegF src1) src2)));\n@@ -9689,1 +9692,2 @@\n-\/\/ -src1 * src2 + src3 = -(src1*src2-src3)\n+\/\/ src1 * (-src2) + src3 = -(src1*src2-src3)\n+\/\/ \"(-src1) * src2 + src3\" has been idealized to \"src2 * (-src1) + src3\"\n@@ -9691,1 +9695,0 @@\n-  match(Set dst (FmaD src3 (Binary (NegD src1) src2)));\n@@ -9702,1 +9705,2 @@\n-\/\/ -src1 * src2 - src3 = -(src1*src2+src3)\n+\/\/ src1 * (-src2) - src3 = -(src1*src2+src3)\n+\/\/ \"(-src1) * src2 - src3\" has been idealized to \"src2 * (-src1) - src3\"\n@@ -9704,1 +9708,0 @@\n-  match(Set dst (FmaF (NegF src3) (Binary (NegF src1) src2)));\n@@ -9715,1 +9718,2 @@\n-\/\/ -src1 * src2 - src3 = -(src1*src2+src3)\n+\/\/ src1 * (-src2) - src3 = -(src1*src2+src3)\n+\/\/ \"(-src1) * src2 - src3\" has been idealized to \"src2 * (-src1) - src3\"\n@@ -9717,1 +9721,0 @@\n-  match(Set dst (FmaD (NegD src3) (Binary (NegD src1) src2)));\n@@ -14064,1 +14067,1 @@\n-\/\/ dst + src1 * src2\n+\/\/ src1 * src2 + dst\n@@ -14078,1 +14081,2 @@\n-\/\/ dst - src1 * src2\n+\/\/ src1 * (-src2) + dst\n+\/\/ \"(-src1) * src2 + dst\" has been idealized to \"src2 * (-src1) + dst\"\n@@ -14080,1 +14084,0 @@\n-  match(Set dst (FmaVF dst (Binary (NegVF src1) src2)));\n@@ -14093,1 +14096,1 @@\n-\/\/ - dst + src1 * src2\n+\/\/ src1 * src2 - dst\n@@ -14107,1 +14110,1 @@\n-\/\/ dst + src1 * src2\n+\/\/ src1 * src2 + dst\n@@ -14121,1 +14124,2 @@\n-\/\/ dst - src1 * src2\n+\/\/ src1 * (-src2) + dst\n+\/\/ \"(-src1) * src2 + dst\" has been idealized to \"src2 * (-src1) + dst\"\n@@ -14123,1 +14127,0 @@\n-  match(Set dst (FmaVD  dst (Binary (NegVD src1) src2)));\n@@ -14136,1 +14139,1 @@\n-\/\/ - dst + src1 * src2\n+\/\/ src1 * src2 - dst\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":19,"deletions":16,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -1910,0 +1910,5 @@\n+    case Op_FmaF:\n+    case Op_FmaD:\n+    case Op_FmaVF:\n+    case Op_FmaVD:\n+      return UseFMA;\n@@ -7274,1 +7279,0 @@\n-  predicate(UseFMA);\n@@ -7292,1 +7296,0 @@\n-  predicate(UseFMA);\n@@ -7310,1 +7313,0 @@\n-  predicate(UseFMA);\n@@ -7328,1 +7330,0 @@\n-  predicate(UseFMA);\n@@ -7344,1 +7345,2 @@\n-\/\/ -src1 * src2 + src3\n+\/\/ src1 * (-src2) + src3\n+\/\/ \"(-src1) * src2 + src3\" has been idealized to \"src2 * (-src1) + src3\"\n@@ -7346,2 +7348,0 @@\n-  predicate(UseFMA);\n-  match(Set dst (FmaF src3 (Binary (NegF src1) src2)));\n@@ -7363,1 +7363,2 @@\n-\/\/ -src1 * src2 + src3\n+\/\/ src1 * (-src2) + src3\n+\/\/ \"(-src1) * src2 + src3\" has been idealized to \"src2 * (-src1) + src3\"\n@@ -7365,2 +7366,0 @@\n-  predicate(UseFMA);\n-  match(Set dst (FmaD src3 (Binary (NegD src1) src2)));\n@@ -7382,1 +7381,2 @@\n-\/\/ -src1 * src2 - src3\n+\/\/ src1 * (-src2) - src3\n+\/\/ \"(-src1) * src2 - src3\" has been idealized to \"src2 * (-src1) - src3\"\n@@ -7384,2 +7384,0 @@\n-  predicate(UseFMA);\n-  match(Set dst (FmaF (NegF src3) (Binary (NegF src1) src2)));\n@@ -7401,1 +7399,2 @@\n-\/\/ -src1 * src2 - src3\n+\/\/ src1 * (-src2) - src3\n+\/\/ \"(-src1) * src2 - src3\" has been idealized to \"src2 * (-src1) - src3\"\n@@ -7403,2 +7402,0 @@\n-  predicate(UseFMA);\n-  match(Set dst (FmaD (NegD src3) (Binary (NegD src1) src2)));\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":13,"deletions":16,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n-\/\/ Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n-\/\/ Copyright (c) 2020, Arm Limited. All rights reserved.\n+\/\/ Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2020, 2023, Arm Limited. All rights reserved.\n@@ -749,1 +749,1 @@\n-\/\/ dst_src1 = dst_src1 + src2 * src3\n+\/\/ dst_src1 = src2 * src3 + dst_src1\n@@ -751,1 +751,0 @@\n-  predicate(UseFMA);\n@@ -769,1 +768,0 @@\n-  predicate(UseFMA);\n@@ -784,2 +782,2 @@\n-\/\/ dst_src1 = dst_src1 + -src2 * src3\n-\/\/ dst_src1 = dst_src1 + src2 * -src3\n+\/\/ dst_src1 = src2 * (-src3) + dst_src1\n+\/\/ \"(-src2) * src3 + dst_src1\" has been idealized to \"src3 * (-src2) + dst_src1\"\n@@ -787,2 +785,0 @@\n-  predicate(UseFMA);\n-  match(Set dst_src1 (FmaVF dst_src1 (Binary (NegVF src2) src3)));\n@@ -800,2 +796,2 @@\n-\/\/ dst_src1 = dst_src1 + -src2 * src3\n-\/\/ dst_src1 = dst_src1 + src2 * -src3\n+\/\/ dst_src1 = src2 * (-src3) + dst_src1\n+\/\/ \"(-src2) * src3 + dst_src1\" has been idealized to \"src3 * (-src2) + dst_src1\"\n@@ -803,2 +799,0 @@\n-  predicate(UseFMA);\n-  match(Set dst_src1 (FmaVD dst_src1 (Binary (NegVD src2) src3)));\n@@ -818,1 +812,1 @@\n-\/\/ dst_src1 = dst_src1 * -src2 + src3\n+\/\/ dst_src1 = dst_src1 * (-src2) + src3\n@@ -820,1 +814,0 @@\n-  predicate(UseFMA);\n@@ -835,2 +828,2 @@\n-\/\/ dst_src1 = -dst_src1 + -src2 * src3\n-\/\/ dst_src1 = -dst_src1 + src2 * -src3\n+\/\/ dst_src1 = src2 * (-src3) - dst_src1\n+\/\/ \"(-src2) * src3 - dst_src1\" has been idealized to \"src3 * (-src2) - dst_src1\"\n@@ -838,2 +831,0 @@\n-  predicate(UseFMA);\n-  match(Set dst_src1 (FmaVF (NegVF dst_src1) (Binary (NegVF src2) src3)));\n@@ -851,2 +842,2 @@\n-\/\/ dst_src1 = -dst_src1 + -src2 * src3\n-\/\/ dst_src1 = -dst_src1 + src2 * -src3\n+\/\/ dst_src1 = src2 * (-src3) - dst_src1\n+\/\/ \"(-src2) * src3 - dst_src1\" has been idealized to \"src3 * (-src2) - dst_src1\"\n@@ -854,2 +845,0 @@\n-  predicate(UseFMA);\n-  match(Set dst_src1 (FmaVD (NegVD dst_src1) (Binary (NegVD src2) src3)));\n@@ -869,1 +858,1 @@\n-\/\/ dst_src1 = -src3 + dst_src1 * -src2\n+\/\/ dst_src1 = dst_src1 * (-src2) - src3\n@@ -871,1 +860,0 @@\n-  predicate(UseFMA);\n@@ -886,1 +874,1 @@\n-\/\/ dst_src1 = -dst_src1 + src2 * src3\n+\/\/ dst_src1 = src2 * src3 - dst_src1\n@@ -888,1 +876,0 @@\n-  predicate(UseFMA);\n@@ -902,1 +889,0 @@\n-  predicate(UseFMA);\n@@ -916,1 +902,1 @@\n-\/\/ dst_src1 = -src3 + dst_src1 * src2\n+\/\/ dst_src1 = dst_src1 * src2 - src3\n@@ -918,1 +904,0 @@\n-  predicate(UseFMA);\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":15,"deletions":30,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -1508,0 +1508,3 @@\n+    case Op_FmaF:\n+    case Op_FmaD:\n+      return UseFMA;\n","filename":"src\/hotspot\/cpu\/s390\/s390.ad","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1569,0 +1569,2 @@\n+    case Op_FmaF:\n+    case Op_FmaD:\n@@ -3976,1 +3978,0 @@\n-  predicate(UseFMA);\n@@ -3988,1 +3989,0 @@\n-  predicate(UseFMA);\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -476,1 +476,1 @@\n-    if (!UseFMA || !Matcher::match_rule_supported(Op_FmaD)) return false;\n+    if (!Matcher::match_rule_supported(Op_FmaD)) return false;\n@@ -479,1 +479,1 @@\n-    if (!UseFMA || !Matcher::match_rule_supported(Op_FmaF)) return false;\n+    if (!Matcher::match_rule_supported(Op_FmaF)) return false;\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1714,0 +1714,11 @@\n+\/\/=============================================================================\n+\/\/------------------------------Ideal------------------------------------------\n+Node* FmaNode::Ideal(PhaseGVN* phase, bool can_reshape) {\n+  \/\/ We canonicalize the node by converting \"(-a)*b+c\" into \"b*(-a)+c\"\n+  if (in(1)->is_Neg() && !in(2)->is_Neg()) {\n+    swap_edges(1, 2);\n+    return this;\n+  }\n+  return nullptr;\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/mulnode.cpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -360,0 +360,10 @@\n+\/\/------------------------------FmaNode--------------------------------------\n+\/\/ fused-multiply-add\n+class FmaNode : public Node {\n+public:\n+  FmaNode(Node* c, Node* in1, Node* in2, Node* in3) : Node(c, in1, in2, in3) {\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n+  }\n+  virtual Node* Ideal(PhaseGVN* phase, bool can_reshape);\n+};\n+\n@@ -362,1 +372,1 @@\n-class FmaDNode : public Node {\n+class FmaDNode : public FmaNode {\n@@ -364,1 +374,1 @@\n-  FmaDNode(Node *c, Node *in1, Node *in2, Node *in3) : Node(c, in1, in2, in3) {}\n+  FmaDNode(Node* c, Node* in1, Node* in2, Node* in3) : FmaNode(c, in1, in2, in3) {}\n@@ -366,1 +376,1 @@\n-  const Type *bottom_type() const { return Type::DOUBLE; }\n+  const Type* bottom_type() const { return Type::DOUBLE; }\n@@ -373,1 +383,1 @@\n-class FmaFNode : public Node {\n+class FmaFNode : public FmaNode {\n@@ -375,1 +385,1 @@\n-  FmaFNode(Node *c, Node *in1, Node *in2, Node *in3) : Node(c, in1, in2, in3) {}\n+  FmaFNode(Node* c, Node* in1, Node* in2, Node* in3) : FmaNode(c, in1, in2, in3) {}\n@@ -377,1 +387,1 @@\n-  const Type *bottom_type() const { return Type::FLOAT; }\n+  const Type* bottom_type() const { return Type::FLOAT; }\n","filename":"src\/hotspot\/share\/opto\/mulnode.hpp","additions":16,"deletions":6,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -132,0 +132,2 @@\n+class NegNode;\n+class NegVNode;\n@@ -727,0 +729,1 @@\n+        DEFINE_CLASS_ID(NegV, Vector, 8)\n@@ -781,0 +784,1 @@\n+    DEFINE_CLASS_ID(Neg,      Node, 19)\n@@ -782,1 +786,1 @@\n-    _max_classes  = ClassMask_LShift\n+    _max_classes  = ClassMask_Neg\n@@ -942,0 +946,2 @@\n+  DEFINE_CLASS_QUERY(Neg)\n+  DEFINE_CLASS_QUERY(NegV)\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -433,1 +433,3 @@\n-  NegNode( Node *in1 ) : Node(0,in1) {}\n+  NegNode(Node* in1) : Node(0, in1) {\n+    init_class_id(Class_Neg);\n+  }\n","filename":"src\/hotspot\/share\/opto\/subnode.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1872,0 +1872,11 @@\n+Node* FmaVNode::Ideal(PhaseGVN* phase, bool can_reshape) {\n+  \/\/ We canonicalize the node by converting \"(-a)*b+c\" into \"b*(-a)+c\"\n+  \/\/ except vectorapi masked nodes, since the inactive lanes should\n+  \/\/ save the first input of the masked node.\n+  if (!is_predicated_vector() && in(1)->is_NegV() && !in(2)->is_NegV()) {\n+    swap_edges(1, 2);\n+    return this;\n+  }\n+  return nullptr;\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -379,0 +379,10 @@\n+\/\/------------------------------FmaVNode--------------------------------------\n+\/\/ Vector fused-multiply-add\n+class FmaVNode : public VectorNode {\n+public:\n+  FmaVNode(Node* in1, Node* in2, Node* in3, const TypeVect* vt) : VectorNode(in1, in2, in3, vt) {\n+    assert(UseFMA, \"Needs FMA instructions support.\");\n+  }\n+  virtual Node* Ideal(PhaseGVN* phase, bool can_reshape);\n+};\n+\n@@ -380,2 +390,2 @@\n-\/\/ Vector multiply double\n-class FmaVDNode : public VectorNode {\n+\/\/ Vector fused-multiply-add double\n+class FmaVDNode : public FmaVNode {\n@@ -383,1 +393,1 @@\n-  FmaVDNode(Node* in1, Node* in2, Node* in3, const TypeVect* vt) : VectorNode(in1, in2, in3, vt) {}\n+  FmaVDNode(Node* in1, Node* in2, Node* in3, const TypeVect* vt) : FmaVNode(in1, in2, in3, vt) {}\n@@ -388,2 +398,2 @@\n-\/\/ Vector multiply float\n-class FmaVFNode : public VectorNode {\n+\/\/ Vector fused-multiply-add float\n+class FmaVFNode : public FmaVNode {\n@@ -391,1 +401,1 @@\n-  FmaVFNode(Node* in1, Node* in2, Node* in3, const TypeVect* vt) : VectorNode(in1, in2, in3, vt) {}\n+  FmaVFNode(Node* in1, Node* in2, Node* in3, const TypeVect* vt) : FmaVNode(in1, in2, in3, vt) {}\n@@ -511,1 +521,3 @@\n-  NegVNode(Node* in, const TypeVect* vt) : VectorNode(in, vt) {}\n+  NegVNode(Node* in, const TypeVect* vt) : VectorNode(in, vt) {\n+    init_class_id(Class_NegV);\n+  }\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":19,"deletions":7,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -0,0 +1,185 @@\n+\/*\n+ * Copyright (c) 2023, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.c2.irTests;\n+\n+import compiler.lib.ir_framework.*;\n+import java.util.Random;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Utils;\n+\n+\/*\n+ * @test\n+ * @bug 8308340\n+ * @key randomness\n+ * @summary Test fma match rule after C2 optimizer.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.TestIRFma\n+ *\/\n+\n+public class TestIRFma {\n+\n+    private static final Random RANDOM = Utils.getRandomInstance();\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Run(test = {\"test1\", \"test2\", \"test3\",\n+                 \"test4\", \"test5\", \"test6\",\n+                 \"test7\", \"test8\", \"test9\",\n+                 \"test10\", \"test11\", \"test12\",\n+                 \"test13\", \"test14\"})\n+    public void runMethod() {\n+        float fa = RANDOM.nextFloat();\n+        float fb = RANDOM.nextFloat();\n+        float fc = RANDOM.nextFloat();\n+        assertResult(fa, fb, fc);\n+\n+        double da = RANDOM.nextDouble();\n+        double db = RANDOM.nextDouble();\n+        double dc = RANDOM.nextDouble();\n+        assertResult(da, db, dc);\n+    }\n+\n+    @DontCompile\n+    public void assertResult(float a, float b, float c) {\n+        Asserts.assertEquals(Math.fma(-a, -b, c)  , test1(a, b, c));\n+        Asserts.assertEquals(Math.fma(-a, b, c)   , test3(a, b, c));\n+        Asserts.assertEquals(Math.fma(a, -b, c)   , test5(a, b, c));\n+        Asserts.assertEquals(Math.fma(-a, b, -c)  , test7(a, b, c));\n+        Asserts.assertEquals(Math.fma(a, -b, -c)  , test9(a, b, c));\n+        Asserts.assertEquals(Math.fma(a, b, -c)   , test11(a, b, c));\n+        Asserts.assertEquals(Math.fma(-a, -b, -c) , test13(a, b, c));\n+    }\n+\n+    @DontCompile\n+    public void assertResult(double a, double b, double c) {\n+        Asserts.assertEquals(Math.fma(-a, -b, c)  , test2(a, b, c));\n+        Asserts.assertEquals(Math.fma(-a, b, c)   , test4(a, b, c));\n+        Asserts.assertEquals(Math.fma(a, -b, c)   , test6(a, b, c));\n+        Asserts.assertEquals(Math.fma(-a, b, -c)  , test8(a, b, c));\n+        Asserts.assertEquals(Math.fma(a, -b, -c)  , test10(a, b, c));\n+        Asserts.assertEquals(Math.fma(a, b, -c)   , test12(a, b, c));\n+        Asserts.assertEquals(Math.fma(-a, -b, -c) , test14(a, b, c));\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.FMSUB, \"> 0\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    static float test1(float a, float b, float c) {\n+        return Math.fma(-a, -b, c);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.FMSUB, \"> 0\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    static double test2(double a, double b, double c) {\n+        return Math.fma(-a, -b, c);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.FMSUB, \"> 0\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    static float test3(float a, float b, float c) {\n+        return Math.fma(-a, b, c);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.FMSUB, \"> 0\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    static double test4(double a, double b, double c) {\n+        return Math.fma(-a, b, c);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.FMSUB, \"> 0\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    static float test5(float a, float b, float c) {\n+        return Math.fma(a, -b, c);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.FMSUB, \"> 0\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    static double test6(double a, double b, double c) {\n+        return Math.fma(a, -b, c);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.FNMADD, \"> 0\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    static float test7(float a, float b, float c) {\n+        return Math.fma(-a, b, -c);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.FNMADD, \"> 0\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    static double test8(double a, double b, double c) {\n+        return Math.fma(-a, b, -c);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.FNMADD, \"> 0\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    static float test9(float a, float b, float c) {\n+        return Math.fma(a, -b, -c);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.FNMADD, \"> 0\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    static double test10(double a, double b, double c) {\n+        return Math.fma(a, -b, -c);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.FNMSUB, \"> 0\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    static float test11(float a, float b, float c) {\n+        return Math.fma(a, b, -c);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.FNMSUB, \"> 0\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    static double test12(double a, double b, double c) {\n+        return Math.fma(a, b, -c);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.FNMADD, \"> 0\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    static float test13(float a, float b, float c) {\n+        return Math.fma(-a, -b, -c);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.FNMADD, \"> 0\"},\n+        applyIfCPUFeature = {\"asimd\", \"true\"})\n+    static double test14(double a, double b, double c) {\n+        return Math.fma(-a, -b, -c);\n+    }\n+\n+ }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/TestIRFma.java","additions":185,"deletions":0,"binary":false,"changes":185,"status":"added"},{"patch":"@@ -1386,0 +1386,5 @@\n+    public static final String VFMAD_MASKED = PREFIX + \"VFMAD_MASKED\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(VFMAD_MASKED, \"vfmad_masked\");\n+    }\n+\n@@ -1401,0 +1406,30 @@\n+    public static final String FMSUB = PREFIX + \"FMSUB\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(FMSUB, \"msub(F|D)_reg_reg\");\n+    }\n+\n+    public static final String FNMADD = PREFIX + \"FNMADD\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(FNMADD, \"mnadd(F|D)_reg_reg\");\n+    }\n+\n+    public static final String FNMSUB = PREFIX + \"FNMSUB\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(FNMSUB, \"mnsub(F|D)_reg_reg\");\n+    }\n+\n+    public static final String VFMLA = PREFIX + \"VFMLA\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(VFMLA, \"vfmla\");\n+    }\n+\n+    public static final String VFMLS = PREFIX + \"VFMLS\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(VFMLS, \"vfmls\");\n+    }\n+\n+    public static final String VFNMLA = PREFIX + \"VFNMLA\" + POSTFIX;\n+    static {\n+        machOnlyNameRegex(VFNMLA, \"vfnmla\");\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Arm Limited. All rights reserved.\n+ * Copyright (c) 2022, 2023, Arm Limited. All rights reserved.\n@@ -63,1 +63,1 @@\n-    private static int LENGTH = 1024;\n+    private static int LENGTH = 128;\n@@ -226,0 +226,20 @@\n+    private static void assertArrayEqualsNeg(float[] r, float[] a, float[] b, float[] c, boolean[] m, FTenOp f) {\n+       for (int i = 0; i < LENGTH; i++) {\n+           if (m[i % F_SPECIES.length()]) {\n+               Asserts.assertEquals(f.apply(a[i], b[i], c[i]), r[i]);\n+           } else {\n+               Asserts.assertEquals(-a[i], r[i]);\n+           }\n+       }\n+    }\n+\n+    private static void assertArrayEqualsNeg(double[] r, double[] a, double[] b, double[] c, boolean[] m, DTenOp f) {\n+       for (int i = 0; i < LENGTH; i++) {\n+           if (m[i % D_SPECIES.length()]) {\n+               Asserts.assertEquals(f.apply(a[i], b[i], c[i]), r[i]);\n+           } else {\n+               Asserts.assertEquals(-a[i], r[i]);\n+           }\n+       }\n+    }\n+\n@@ -343,0 +363,13 @@\n+    @Test\n+    @IR(counts = { IRNode.VFMAD_MASKED, \">= 1\" })\n+    public static void testFloatMultiplyNegAMasked() {\n+        VectorMask<Float> mask = VectorMask.fromArray(F_SPECIES, m, 0);\n+        for (int i = 0; i < LENGTH; i += F_SPECIES.length()) {\n+            FloatVector av = FloatVector.fromArray(F_SPECIES, fa, i);\n+            FloatVector bv = FloatVector.fromArray(F_SPECIES, fb, i);\n+            FloatVector cv = FloatVector.fromArray(F_SPECIES, fc, i);\n+            av.neg().lanewise(VectorOperators.FMA, bv, cv, mask).intoArray(fr, i);\n+        }\n+        assertArrayEqualsNeg(fr, fa, fb, fc, m, (a, b, c) -> (float) Math.fma(-a, b, c));\n+    }\n+\n@@ -356,0 +389,13 @@\n+    @Test\n+    @IR(counts = { IRNode.VFNMSB_MASKED, \">= 1\" })\n+    public static void testFloatNegatedMultiplyNegAMasked() {\n+        VectorMask<Float> mask = VectorMask.fromArray(F_SPECIES, m, 0);\n+        for (int i = 0; i < LENGTH; i += F_SPECIES.length()) {\n+            FloatVector av = FloatVector.fromArray(F_SPECIES, fa, i);\n+            FloatVector bv = FloatVector.fromArray(F_SPECIES, fb, i);\n+            FloatVector cv = FloatVector.fromArray(F_SPECIES, fc, i);\n+            av.neg().lanewise(VectorOperators.FMA, bv, cv.neg(), mask).intoArray(fr, i);\n+        }\n+        assertArrayEqualsNeg(fr, fa, fb, fc, m, (a, b, c) -> (float) Math.fma(-a, b, -c));\n+    }\n+\n@@ -382,0 +428,13 @@\n+    @Test\n+    @IR(counts = { IRNode.VFMAD_MASKED, \">= 1\" })\n+    public static void testDoubleMultiplyNegAMasked() {\n+        VectorMask<Double> mask = VectorMask.fromArray(D_SPECIES, m, 0);\n+        for (int i = 0; i < LENGTH; i += D_SPECIES.length()) {\n+            DoubleVector av = DoubleVector.fromArray(D_SPECIES, da, i);\n+            DoubleVector bv = DoubleVector.fromArray(D_SPECIES, db, i);\n+            DoubleVector cv = DoubleVector.fromArray(D_SPECIES, dc, i);\n+            av.neg().lanewise(VectorOperators.FMA, bv, cv, mask).intoArray(dr, i);\n+        }\n+        assertArrayEqualsNeg(dr, da, db, dc, m, (a, b, c) -> (double) Math.fma(-a, b, c));\n+    }\n+\n@@ -395,0 +454,13 @@\n+    @Test\n+    @IR(counts = { IRNode.VFNMSB_MASKED, \">= 1\" })\n+    public static void testDoubleNegatedMultiplyNegAMasked() {\n+        VectorMask<Double> mask = VectorMask.fromArray(D_SPECIES, m, 0);\n+        for (int i = 0; i < LENGTH; i += D_SPECIES.length()) {\n+            DoubleVector av = DoubleVector.fromArray(D_SPECIES, da, i);\n+            DoubleVector bv = DoubleVector.fromArray(D_SPECIES, db, i);\n+            DoubleVector cv = DoubleVector.fromArray(D_SPECIES, dc, i);\n+            av.neg().lanewise(VectorOperators.FMA, bv, cv.neg(), mask).intoArray(dr, i);\n+        }\n+        assertArrayEqualsNeg(dr, da, db, dc, m, (a, b, c) -> (double) Math.fma(-a, b, -c));\n+    }\n+\n@@ -409,2 +481,4 @@\n-        TestFramework.runWithFlags(\"--add-modules=jdk.incubator.vector\",\n-                                   \"-XX:UseSVE=1\");\n+        TestFramework testFramework = new TestFramework();\n+        testFramework.setDefaultWarmup(5000)\n+                     .addFlags(\"--add-modules=jdk.incubator.vector\", \"-XX:UseSVE=1\")\n+                     .start();\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorFusedMultiplyAddSubTest.java","additions":78,"deletions":4,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -200,1 +200,1 @@\n-        counts = {IRNode.FMA_V, \">0\"})\n+        counts = {IRNode.FMA_V, \">0\", IRNode.VFMLA, \">0\"})\n@@ -213,1 +213,1 @@\n-        counts = {IRNode.FMA_V, \">0\"})\n+        counts = {IRNode.FMA_V, \">0\", IRNode.VFMLS, \">0\"})\n@@ -226,1 +226,1 @@\n-        counts = {IRNode.FMA_V, \">0\"})\n+        counts = {IRNode.FMA_V, \">0\", IRNode.VFMLS, \">0\"})\n@@ -240,0 +240,2 @@\n+    @IR(applyIfCPUFeature = {\"sve\", \"true\"},\n+        counts = {IRNode.VFNMLA, \">0\"})\n@@ -253,0 +255,2 @@\n+    @IR(applyIfCPUFeature = {\"sve\", \"true\"},\n+        counts = {IRNode.VFNMLA, \">0\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/BasicDoubleOpTest.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -167,1 +167,1 @@\n-        counts = {IRNode.FMA_V, \">0\"})\n+        counts = {IRNode.FMA_V, \">0\", IRNode.VFMLA, \">0\"})\n@@ -180,1 +180,1 @@\n-        counts = {IRNode.FMA_V, \">0\"})\n+        counts = {IRNode.FMA_V, \">0\", IRNode.VFMLS, \">0\"})\n@@ -193,1 +193,1 @@\n-        counts = {IRNode.FMA_V, \">0\"})\n+        counts = {IRNode.FMA_V, \">0\", IRNode.VFMLS, \">0\"})\n@@ -207,0 +207,2 @@\n+    @IR(applyIfCPUFeature = {\"sve\", \"true\"},\n+        counts = {IRNode.VFNMLA, \">0\"})\n@@ -220,0 +222,2 @@\n+    @IR(applyIfCPUFeature = {\"sve\", \"true\"},\n+        counts = {IRNode.VFNMLA, \">0\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/BasicFloatOpTest.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"}]}