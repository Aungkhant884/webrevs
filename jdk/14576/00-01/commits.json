[{"commit":{"message":"Move check for UseFMA from c2compiler.cpp to Matcher::match_rule_supported in .ad files"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/ppc\/ppc.ad"},{"filename":"src\/hotspot\/cpu\/riscv\/riscv.ad"},{"filename":"src\/hotspot\/cpu\/s390\/s390.ad"},{"filename":"src\/hotspot\/cpu\/x86\/x86.ad"},{"filename":"src\/hotspot\/share\/opto\/c2compiler.cpp"}],"sha":"a22814d8702a81a3b42c77b7b71f190b8f0e9d90"},{"commit":{"message":"Merge branch 'master' into fg8308340"},"files":[],"sha":"972e345ff353d4e00b02b9ad7e746aed4890e665"},{"commit":{"message":"8308340: C2: Idealize Fma nodes\n\nSome platforms, like aarch64, ppc, and riscv, support fusing\n`Math.fma(-a, b, c)` or `Math.fma(a, -b, c)` by generating\npartially symmetric match rules like:\n\n```\n  match(Set dst (FmaF src3 (Binary (NegF src1) src2)));\n  match(Set dst (FmaF src3 (Binary src1 (NegF src2))));\n```\n\nSince `Fma` is partially communitive, the patch is to convert\n`Math.fma(-a, b, c)` to `Math.fma(b, -a, c)` in gvn phase,\nmaking node patterns canonical. Then we can remove redundant\nrules.\n\nAlso, we should guarantee that C2 generates `Fma` nodes only on\nplatforms supporting `Fma` instructions before matcher, so we\ncan remove all `predicate(UseFMA)` for all `Fma` rules.\n\nAfter the patch, the code size of libjvm.so on aarch64 platform\ndecreased by 63.4k.\n\nThe patch passed all tier 1 - 3 on aarch64 and x86 platforms."},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/ppc\/ppc.ad"},{"filename":"src\/hotspot\/cpu\/riscv\/riscv.ad"},{"filename":"src\/hotspot\/cpu\/x86\/x86.ad"}],"sha":"8239531eba90e7e85cd5692f605f669695fa1b8c"}]