{"files":[{"patch":"@@ -355,0 +355,5 @@\n+    \/**\n+     * RegEx to parse number part of a compact number text\n+     *\/\n+    private transient Pattern numberPattern;\n+\n@@ -591,2 +596,2 @@\n-            int iPart = getIntegerPart(number, divisor);\n-            if (checkIncrement(iPart, compactDataIndex, divisor)) {\n+            double val = getNumberValue(number, divisor);\n+            if (checkIncrement(val, compactDataIndex, divisor)) {\n@@ -594,1 +599,1 @@\n-                iPart = getIntegerPart(number, divisor);\n+                val = getNumberValue(number, divisor);\n@@ -596,2 +601,2 @@\n-            String prefix = getAffix(false, true, isNegative, compactDataIndex, iPart);\n-            String suffix = getAffix(false, false, isNegative, compactDataIndex, iPart);\n+            String prefix = getAffix(false, true, isNegative, compactDataIndex, val);\n+            String suffix = getAffix(false, false, isNegative, compactDataIndex, val);\n@@ -601,1 +606,1 @@\n-                if (!placeHolderPatterns.get(compactDataIndex).get(iPart).isEmpty()) {\n+                if (!placeHolderPatterns.get(compactDataIndex).get(val).isEmpty()) {\n@@ -664,2 +669,2 @@\n-            int iPart = getIntegerPart(number, divisor);\n-            if (checkIncrement(iPart, compactDataIndex, divisor)) {\n+            double val = getNumberValue(number, divisor);\n+            if (checkIncrement(val, compactDataIndex, divisor)) {\n@@ -667,1 +672,1 @@\n-                iPart = getIntegerPart(number, divisor);\n+                val = getNumberValue(number, divisor);\n@@ -669,2 +674,2 @@\n-            String prefix = getAffix(false, true, isNegative, compactDataIndex, iPart);\n-            String suffix = getAffix(false, false, isNegative, compactDataIndex, iPart);\n+            String prefix = getAffix(false, true, isNegative, compactDataIndex, val);\n+            String suffix = getAffix(false, false, isNegative, compactDataIndex, val);\n@@ -673,1 +678,1 @@\n-                if (!placeHolderPatterns.get(compactDataIndex).get(iPart).isEmpty()) {\n+                if (!placeHolderPatterns.get(compactDataIndex).get(val).isEmpty()) {\n@@ -763,2 +768,2 @@\n-            int iPart = getIntegerPart(number.doubleValue(), divisor.doubleValue());\n-            if (checkIncrement(iPart, compactDataIndex, divisor.doubleValue())) {\n+            double val = getNumberValue(number.doubleValue(), divisor.doubleValue());\n+            if (checkIncrement(val, compactDataIndex, divisor.doubleValue())) {\n@@ -766,1 +771,1 @@\n-                iPart = getIntegerPart(number.doubleValue(), divisor.doubleValue());\n+                val = getNumberValue(number.doubleValue(), divisor.doubleValue());\n@@ -768,2 +773,2 @@\n-            String prefix = getAffix(false, true, isNegative, compactDataIndex, iPart);\n-            String suffix = getAffix(false, false, isNegative, compactDataIndex, iPart);\n+            String prefix = getAffix(false, true, isNegative, compactDataIndex, val);\n+            String suffix = getAffix(false, false, isNegative, compactDataIndex, val);\n@@ -772,1 +777,1 @@\n-                if (!placeHolderPatterns.get(compactDataIndex).get(iPart).isEmpty()) {\n+                if (!placeHolderPatterns.get(compactDataIndex).get(val).isEmpty()) {\n@@ -834,2 +839,2 @@\n-            int iPart = getIntegerPart(number.doubleValue(), divisor.doubleValue());\n-            if (checkIncrement(iPart, compactDataIndex, divisor.doubleValue())) {\n+            double val = getNumberValue(number.doubleValue(), divisor.doubleValue());\n+            if (checkIncrement(val, compactDataIndex, divisor.doubleValue())) {\n@@ -837,1 +842,1 @@\n-                iPart = getIntegerPart(number.doubleValue(), divisor.doubleValue());\n+                val = getNumberValue(number.doubleValue(), divisor.doubleValue());\n@@ -839,2 +844,2 @@\n-            String prefix = getAffix(false, true, isNegative, compactDataIndex, iPart);\n-            String suffix = getAffix(false, false, isNegative, compactDataIndex, iPart);\n+            String prefix = getAffix(false, true, isNegative, compactDataIndex, val);\n+            String suffix = getAffix(false, false, isNegative, compactDataIndex, val);\n@@ -843,1 +848,1 @@\n-                if (!placeHolderPatterns.get(compactDataIndex).get(iPart).isEmpty()) {\n+                if (!placeHolderPatterns.get(compactDataIndex).get(val).isEmpty()) {\n@@ -882,1 +887,1 @@\n-    private String getAffix(boolean isExpanded, boolean isPrefix, boolean isNegative, int compactDataIndex, int iPart) {\n+    private String getAffix(boolean isExpanded, boolean isPrefix, boolean isNegative, int compactDataIndex, double val) {\n@@ -887,1 +892,1 @@\n-                .get(compactDataIndex).get(iPart);\n+                .get(compactDataIndex).get(val);\n@@ -1590,2 +1595,2 @@\n-            String positivePrefix = getAffix(true, true, false, compactIndex, (int)num);\n-            String negativePrefix = getAffix(true, true, true, compactIndex, (int)num);\n+            String positivePrefix = getAffix(true, true, false, compactIndex, num);\n+            String negativePrefix = getAffix(true, true, true, compactIndex, num);\n@@ -1739,1 +1744,0 @@\n-    private static final Pattern DIGITS = Pattern.compile(\"\\\\p{Nd}+\");\n@@ -1748,0 +1752,3 @@\n+        if (numberPattern == null) {\n+            numberPattern = Pattern.compile(\"[\\\\Q\" + symbols.getDecimalSeparator() + \"\\\\E\\\\p{Nd}]+\");\n+        }\n@@ -1751,1 +1758,1 @@\n-            Matcher m = DIGITS.matcher(text);\n+            Matcher m = numberPattern.matcher(text);\n@@ -1754,2 +1761,1 @@\n-                int cp = digits.codePointAt(0);\n-                if (Character.isDigit(cp)) {\n+                if (Character.isDigit(digits.codePointAt(0))) {\n@@ -1757,0 +1763,1 @@\n+                        .filter(cp -> cp != symbols.getDecimalSeparator())\n@@ -1912,4 +1919,4 @@\n-            String positivePrefix = getAffix(true, true, false, compactIndex, (int)num);\n-            String negativePrefix = getAffix(true, true, true, compactIndex, (int)num);\n-            String positiveSuffix = getAffix(true, false, false, compactIndex, (int)num);\n-            String negativeSuffix = getAffix(true, false, true, compactIndex, (int)num);\n+            String positivePrefix = getAffix(true, true, false, compactIndex, num);\n+            String negativePrefix = getAffix(true, true, true, compactIndex, num);\n+            String positiveSuffix = getAffix(true, false, false, compactIndex, num);\n+            String negativeSuffix = getAffix(true, false, true, compactIndex, num);\n@@ -2410,3 +2417,4 @@\n-    private int getIntegerPart(double number, double divisor) {\n-        return BigDecimal.valueOf(number)\n-                .divide(BigDecimal.valueOf(divisor), roundingMode).intValue();\n+    private double getNumberValue(double number, double divisor) {\n+        var num = BigDecimal.valueOf(number)\n+                .divide(BigDecimal.valueOf(divisor), roundingMode);\n+        return getMaximumFractionDigits() > 0 ? num.doubleValue() : num.intValue();\n@@ -2415,3 +2423,3 @@\n-    \/\/ Checks whether the iPart is incremented by the BigDecimal division in\n-    \/\/ getIntegerPart(), and affects the compact number index.\n-    private boolean checkIncrement(int iPart, int index, double divisor) {\n+    \/\/ Checks whether the val is incremented by the BigDecimal division in\n+    \/\/ getNumberValue(), and affects the compact number index.\n+    private boolean checkIncrement(double val, int index, double divisor) {\n@@ -2422,1 +2430,1 @@\n-                return Math.log10(iPart) == Math.log10(nextDiv) - Math.log10(divisor);\n+                return Math.log10(val) == Math.log10(nextDiv) - Math.log10(divisor);\n","filename":"src\/java.base\/share\/classes\/java\/text\/CompactNumberFormat.java","additions":51,"deletions":43,"binary":false,"changes":94,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @bug 8177552 8217721 8222756\n+ * @bug 8177552 8217721 8222756 8295372\n@@ -84,0 +84,15 @@\n+    private static final NumberFormat FORMAT_ES_LONG_FD1 = NumberFormat\n+            .getCompactNumberInstance(Locale.of(\"es\"), NumberFormat.Style.LONG);\n+    private static final NumberFormat FORMAT_DE_LONG_FD2 = NumberFormat\n+            .getCompactNumberInstance(Locale.GERMAN, NumberFormat.Style.LONG);\n+    private static final NumberFormat FORMAT_IT_LONG_FD3 = NumberFormat\n+            .getCompactNumberInstance(Locale.ITALIAN, NumberFormat.Style.LONG);\n+    private static final NumberFormat FORMAT_PT_LONG_FD4 = NumberFormat\n+            .getCompactNumberInstance(Locale.of(\"pt\"), NumberFormat.Style.LONG);\n+    static {\n+        FORMAT_ES_LONG_FD1.setMaximumFractionDigits(1);\n+        FORMAT_DE_LONG_FD2.setMaximumFractionDigits(2);\n+        FORMAT_IT_LONG_FD3.setMaximumFractionDigits(3);\n+        FORMAT_PT_LONG_FD4.setMaximumFractionDigits(4);\n+    }\n+\n@@ -342,0 +357,5 @@\n+            \/\/ Fractional plurals\n+            {FORMAT_ES_LONG_FD1, 1_234_500, \"1,2 millones\"},\n+            {FORMAT_DE_LONG_FD2, 1_234_500, \"1,23 Millionen\"},\n+            {FORMAT_IT_LONG_FD3, 1_234_500, \"1,234 milioni\"},\n+            {FORMAT_PT_LONG_FD4, 1_234_500, \"1,2345 milh\\u00f5es\"},\n@@ -444,0 +464,5 @@\n+                \/\/ Fractional plurals\n+                {FORMAT_ES_LONG_FD1, \"1,2 millones\", 1_200_000L, Long.class},\n+                {FORMAT_DE_LONG_FD2, \"1,23 Millionen\", 1_230_000L, Long.class},\n+                {FORMAT_IT_LONG_FD3, \"1,234 milioni\", 1_234_000L, Long.class},\n+                {FORMAT_PT_LONG_FD4, \"1,2345 milh\\u00f5es\", 1_234_500L, Long.class},\n@@ -450,1 +475,1 @@\n-            \/\/ compact number instance, string to parse, null (no o\/p; must throws exception)\n+            \/\/ compact number instance, string to parse, null (no o\/p; must throw exception)\n","filename":"test\/jdk\/java\/text\/Format\/CompactNumberFormat\/TestCompactNumber.java","additions":27,"deletions":2,"binary":false,"changes":29,"status":"modified"}]}