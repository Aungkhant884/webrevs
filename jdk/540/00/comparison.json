{"files":[{"patch":"@@ -586,1 +586,0 @@\n-  \/\/ Eagerly reclaim unique Node numberings\n@@ -588,0 +587,2 @@\n+  \/\/ If this is the most recently created node, reclaim its index. Otherwise,\n+  \/\/ record the node as dead to keep liveness information accurate.\n@@ -590,0 +591,2 @@\n+  } else {\n+    compile->record_dead_node(_idx);\n","filename":"src\/hotspot\/share\/opto\/node.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.conversions;\n+\n+\/*\n+ * @test\n+ * @bug 8253404\n+ * @requires vm.compiler2.enabled\n+ * @summary Tests that the optimization of a chain of integer additions followed\n+ *          by a long conversion does not lead to an explosion of live nodes.\n+ * @library \/test\/lib \/\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation\n+ *      -XX:CompileOnly=compiler.conversions.TestChainOfIntAddsToLongConversion::main\n+ *      -XX:MaxNodeLimit=1000 -XX:NodeLimitFudgeFactor=25\n+ *      compiler.conversions.TestChainOfIntAddsToLongConversion\n+ *\/\n+\n+public class TestChainOfIntAddsToLongConversion {\n+    public static void main(String[] args) {\n+        long out = 0;\n+        for (int i = 0; i < 2; i++) {\n+            int foo = i;\n+            for (int j = 0; j < 17; j++) {\n+                \/\/ Int addition to be turned into a chain by loop unrolling.\n+                foo = foo + foo;\n+            }\n+            \/\/ Int to long conversion.\n+            out = foo;\n+        }\n+        System.out.println(out);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/conversions\/TestChainOfIntAddsToLongConversion.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"}]}