{"files":[{"patch":"@@ -8559,1 +8559,1 @@\n-    __ mov($tmp$$FloatRegister, __ T1D, 0, $src$$Register);\n+    __ mov($tmp$$FloatRegister, __ D, 0, $src$$Register);\n@@ -8562,1 +8562,1 @@\n-    __ mov($dst$$Register, $tmp$$FloatRegister, __ T1D, 0);\n+    __ mov($dst$$Register, $tmp$$FloatRegister, __ D, 0);\n@@ -8584,1 +8584,1 @@\n-    __ mov($dst$$Register, $tmp$$FloatRegister, __ T1D, 0);\n+    __ mov($dst$$Register, $tmp$$FloatRegister, __ D, 0);\n@@ -8602,1 +8602,1 @@\n-    __ mov($tmp$$FloatRegister, __ T1D, 0, $src$$Register);\n+    __ mov($tmp$$FloatRegister, __ D, 0, $src$$Register);\n@@ -8605,1 +8605,1 @@\n-    __ mov($dst$$Register, $tmp$$FloatRegister, __ T1D, 0);\n+    __ mov($dst$$Register, $tmp$$FloatRegister, __ D, 0);\n@@ -8627,1 +8627,1 @@\n-    __ mov($dst$$Register, $tmp$$FloatRegister, __ T1D, 0);\n+    __ mov($dst$$Register, $tmp$$FloatRegister, __ D, 0);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -514,1 +514,1 @@\n-            \"mov      $dst, T2S, 1, rscratch2\\t#convert 2D to 2I vector\"\n+            \"mov      $dst, S, 1, rscratch2\\t#convert 2D to 2I vector\"\n@@ -523,1 +523,1 @@\n-    __ mov(as_FloatRegister($dst$$reg), __ T2S, 1, rscratch2);\n+    __ mov(as_FloatRegister($dst$$reg), __ S, 1, rscratch2);\n@@ -1706,1 +1706,1 @@\n-            \"mov    $dst, T8B, $idx, $val\\t# insert into vector(8B)\" %}\n+            \"mov    $dst, B, $idx, $val\\t# insert into vector(8B)\" %}\n@@ -1712,1 +1712,1 @@\n-    __ mov(as_FloatRegister($dst$$reg), __ T8B, $idx$$constant, $val$$Register);\n+    __ mov(as_FloatRegister($dst$$reg), __ B, $idx$$constant, $val$$Register);\n@@ -1723,1 +1723,1 @@\n-            \"mov    $dst, T16B, $idx, $val\\t# insert into vector(16B)\" %}\n+            \"mov    $dst, B, $idx, $val\\t# insert into vector(16B)\" %}\n@@ -1729,1 +1729,1 @@\n-    __ mov(as_FloatRegister($dst$$reg), __ T16B, $idx$$constant, $val$$Register);\n+    __ mov(as_FloatRegister($dst$$reg), __ B, $idx$$constant, $val$$Register);\n@@ -1740,1 +1740,1 @@\n-            \"mov    $dst, T4H, $idx, $val\\t# insert into vector(4S)\" %}\n+            \"mov    $dst, H, $idx, $val\\t# insert into vector(4S)\" %}\n@@ -1746,1 +1746,1 @@\n-    __ mov(as_FloatRegister($dst$$reg), __ T4H, $idx$$constant, $val$$Register);\n+    __ mov(as_FloatRegister($dst$$reg), __ H, $idx$$constant, $val$$Register);\n@@ -1757,1 +1757,1 @@\n-            \"mov    $dst, T8H, $idx, $val\\t# insert into vector(8S)\" %}\n+            \"mov    $dst, H, $idx, $val\\t# insert into vector(8S)\" %}\n@@ -1763,1 +1763,1 @@\n-    __ mov(as_FloatRegister($dst$$reg), __ T8H, $idx$$constant, $val$$Register);\n+    __ mov(as_FloatRegister($dst$$reg), __ H, $idx$$constant, $val$$Register);\n@@ -1774,1 +1774,1 @@\n-            \"mov    $dst, T2S, $idx, $val\\t# insert into vector(2I)\" %}\n+            \"mov    $dst, S, $idx, $val\\t# insert into vector(2I)\" %}\n@@ -1780,1 +1780,1 @@\n-    __ mov(as_FloatRegister($dst$$reg), __ T2S, $idx$$constant, $val$$Register);\n+    __ mov(as_FloatRegister($dst$$reg), __ S, $idx$$constant, $val$$Register);\n@@ -1791,1 +1791,1 @@\n-            \"mov    $dst, T4S, $idx, $val\\t# insert into vector(4I)\" %}\n+            \"mov    $dst, S, $idx, $val\\t# insert into vector(4I)\" %}\n@@ -1797,1 +1797,1 @@\n-    __ mov(as_FloatRegister($dst$$reg), __ T4S, $idx$$constant, $val$$Register);\n+    __ mov(as_FloatRegister($dst$$reg), __ S, $idx$$constant, $val$$Register);\n@@ -1808,1 +1808,1 @@\n-            \"mov    $dst, T2D, $idx, $val\\t# insert into vector(2L)\" %}\n+            \"mov    $dst, D, $idx, $val\\t# insert into vector(2L)\" %}\n@@ -1814,1 +1814,1 @@\n-    __ mov(as_FloatRegister($dst$$reg), __ T2D, $idx$$constant, $val$$Register);\n+    __ mov(as_FloatRegister($dst$$reg), __ D, $idx$$constant, $val$$Register);\n@@ -2047,1 +2047,1 @@\n-    __ mov(as_FloatRegister($dst$$reg), __ T2D, 0, $tmp2$$Register);\n+    __ mov(as_FloatRegister($dst$$reg), __ D, 0, $tmp2$$Register);\n@@ -2051,1 +2051,1 @@\n-    __ mov(as_FloatRegister($dst$$reg), __ T2D, 1, $tmp2$$Register);\n+    __ mov(as_FloatRegister($dst$$reg), __ D, 1, $tmp2$$Register);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon.ad","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -299,1 +299,1 @@\n-            \"mov      $dst, T2S, 1, rscratch2\\t#convert 2D to 2I vector\"\n+            \"mov      $dst, S, 1, rscratch2\\t#convert 2D to 2I vector\"\n@@ -308,1 +308,1 @@\n-    __ mov(as_FloatRegister($dst$$reg), __ T2S, 1, rscratch2);\n+    __ mov(as_FloatRegister($dst$$reg), __ S, 1, rscratch2);\n@@ -871,1 +871,1 @@\n-            \"mov    $dst, T$1`'iTYPE2SIMD($2), $idx, $val\\t# insert into vector($1$2)\" %}\n+            \"mov    $dst, iTYPE2SIMD($2), $idx, $val\\t# insert into vector($1$2)\" %}\n@@ -877,1 +877,1 @@\n-    __ mov(as_FloatRegister($dst$$reg), __ T$1`'iTYPE2SIMD($2), $idx$$constant, $val$$Register);\n+    __ mov(as_FloatRegister($dst$$reg), __ iTYPE2SIMD($2), $idx$$constant, $val$$Register);\n@@ -1006,1 +1006,1 @@\n-    __ mov(as_FloatRegister($dst$$reg), __ T2D, 0, $tmp2$$Register);\n+    __ mov(as_FloatRegister($dst$$reg), __ D, 0, $tmp2$$Register);\n@@ -1010,1 +1010,1 @@\n-    __ mov(as_FloatRegister($dst$$reg), __ T2D, 1, $tmp2$$Register);\n+    __ mov(as_FloatRegister($dst$$reg), __ D, 1, $tmp2$$Register);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_neon_ad.m4","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2759,1 +2759,2 @@\n-  void mov(FloatRegister Vd, SIMD_Arrangement T, int index, Register Xn) {\n+  void mov(FloatRegister Vd, SIMD_RegVariant T, int index, Register Xn) {\n+    guarantee(T != Q, \"invalid register variant\");\n@@ -2761,1 +2762,1 @@\n-    f(0b01001110000, 31, 21), f(((1 << (T >> 1)) | (index << ((T >> 1) + 1))), 20, 16);\n+    f(0b01001110000, 31, 21), f(((1 << T) | (index << (T + 1))), 20, 16);\n@@ -2767,6 +2768,3 @@\n-  void mov(Register Xd, FloatRegister Vn, SIMD_Arrangement T, int index) {\n-    guarantee(T >= T2S && T < T1Q, \"only D and S arrangements are supported\");\n-    starti;\n-    f(0, 31), f((T >= T1D) ? 1:0, 30), f(0b001110000, 29, 21);\n-    f(((1 << (T >> 1)) | (index << ((T >> 1) + 1))), 20, 16);\n-    f(0b001111, 15, 10), rf(Vn, 5), rf(Xd, 0);\n+  void mov(Register Xd, FloatRegister Vn, SIMD_RegVariant T, int index) {\n+    guarantee(T == S || T == D, \"invalid register variant\");\n+    umov(Xd, Vn, T, index);\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -3370,1 +3370,1 @@\n-      mov(v16, T4S, 0, crc);\n+      mov(v16, S, 0, crc);\n@@ -3474,1 +3474,1 @@\n-      mov(tmp, v0, T1D, 0);\n+      mov(tmp, v0, D, 0);\n@@ -3477,1 +3477,1 @@\n-      mov(tmp, v0, T1D, 1);\n+      mov(tmp, v0, D, 1);\n@@ -3480,1 +3480,1 @@\n-      mov(tmp, v1, T1D, 0);\n+      mov(tmp, v1, D, 0);\n@@ -3483,1 +3483,1 @@\n-      mov(tmp, v1, T1D, 1);\n+      mov(tmp, v1, D, 1);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1574,4 +1574,4 @@\n-                        [\"mov\",    \"__ mov(v1, __ T1D, 0, zr);\",                         \"mov\\tv1.d[0], xzr\"],\n-                        [\"mov\",    \"__ mov(v1, __ T2S, 1, zr);\",                         \"mov\\tv1.s[1], wzr\"],\n-                        [\"mov\",    \"__ mov(v1, __ T4H, 2, zr);\",                         \"mov\\tv1.h[2], wzr\"],\n-                        [\"mov\",    \"__ mov(v1, __ T8B, 3, zr);\",                         \"mov\\tv1.b[3], wzr\"],\n+                        [\"mov\",    \"__ mov(v1, __ D, 0, zr);\",                           \"mov\\tv1.d[0], xzr\"],\n+                        [\"mov\",    \"__ mov(v1, __ S, 1, zr);\",                           \"mov\\tv1.s[1], wzr\"],\n+                        [\"mov\",    \"__ mov(v1, __ H, 2, zr);\",                           \"mov\\tv1.h[2], wzr\"],\n+                        [\"mov\",    \"__ mov(v1, __ B, 3, zr);\",                           \"mov\\tv1.b[3], wzr\"],\n","filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -716,4 +716,4 @@\n-    __ mov(v1, __ T1D, 0, zr);                         \/\/       mov     v1.d[0], xzr\n-    __ mov(v1, __ T2S, 1, zr);                         \/\/       mov     v1.s[1], wzr\n-    __ mov(v1, __ T4H, 2, zr);                         \/\/       mov     v1.h[2], wzr\n-    __ mov(v1, __ T8B, 3, zr);                         \/\/       mov     v1.b[3], wzr\n+    __ mov(v1, __ D, 0, zr);                           \/\/       mov     v1.d[0], xzr\n+    __ mov(v1, __ S, 1, zr);                           \/\/       mov     v1.s[1], wzr\n+    __ mov(v1, __ H, 2, zr);                           \/\/       mov     v1.h[2], wzr\n+    __ mov(v1, __ B, 3, zr);                           \/\/       mov     v1.b[3], wzr\n","filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}