{"files":[{"patch":"@@ -33,1 +33,0 @@\n-import java.util.Comparator;\n@@ -43,1 +42,1 @@\n-import java.util.TreeSet;\n+import java.util.TreeMap;\n@@ -580,1 +579,1 @@\n-        for (Taglet t : allTaglets.values()) {\n+        allTaglets.forEach((name, t) -> {\n@@ -585,4 +584,2 @@\n-            if (t.isBlockTag()) {\n-                for (Location l : t.getAllowedLocations()) {\n-                    blockTagletsByLocation.get(l).add(t);\n-                }\n+            if (t.isBlockTag() && t.getName().equals(name)) {\n+                t.getAllowedLocations().forEach(l -> blockTagletsByLocation.get(l).add(t));\n@@ -590,1 +587,1 @@\n-        }\n+        });\n@@ -615,4 +612,1 @@\n-        addStandardTaglet(new ThrowsTaglet());\n-        addStandardTaglet(\n-                new SimpleTaglet(EXCEPTION, null,\n-                    EnumSet.of(Location.METHOD, Location.CONSTRUCTOR)));\n+        addStandardTaglet(new ThrowsTaglet(), EXCEPTION);\n@@ -686,0 +680,8 @@\n+    private void addStandardTaglet(Taglet taglet, DocTree.Kind alias) {\n+        addStandardTaglet(taglet);\n+        String name = alias.tagName;\n+        allTaglets.put(name, taglet);\n+        standardTags.add(name);\n+        standardTagsLowercase.add(Utils.toLowerCase(name));\n+    }\n+\n@@ -732,2 +734,1 @@\n-        Set<Taglet> taglets = new TreeSet<>(Comparator.comparing(Taglet::getName));\n-        taglets.addAll(allTaglets.values());\n+        Map<String, Taglet> taglets = new TreeMap<>(allTaglets);\n@@ -735,1 +736,1 @@\n-        for (Taglet t : taglets) {\n+        taglets.forEach((n, t) -> {\n@@ -737,1 +738,1 @@\n-            String name = t.isBlockTag() ? \"@\" + t.getName() : \"{@\" + t.getName() + \"}\";\n+            String name = t.isBlockTag() ? \"@\" + n : \"{@\" + n + \"}\";\n@@ -749,1 +750,1 @@\n-        }\n+        });\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/taglets\/TagletManager.java","additions":18,"deletions":17,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -0,0 +1,109 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8157682\n+ * @summary at-inheritDoc doesn't work with at-exception\n+ * @library \/tools\/lib ..\/..\/lib\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.tool\n+ * @build toolbox.ToolBox javadoc.tester.*\n+ * @run main TestExceptionInheritance\n+ *\/\n+\n+import java.nio.file.Path;\n+\n+import javadoc.tester.JavadocTester;\n+\n+import toolbox.ToolBox;\n+\n+public class TestExceptionInheritance extends JavadocTester {\n+\n+    public static void main(String... args) throws Exception {\n+        TestExceptionInheritance tester = new TestExceptionInheritance();\n+        tester.runTests(m -> new Object[] { Path.of(m.getName()) });\n+    }\n+\n+    ToolBox tb = new ToolBox();\n+\n+    @Test\n+    public void testExceptionException(Path base) throws Exception {\n+        test(base, \"exception\", \"exception\");\n+    }\n+\n+    @Test\n+    public void testExceptionThrows(Path base) throws Exception {\n+        test(base, \"exception\", \"throws\");\n+    }\n+\n+    @Test\n+    public void testThrowsException(Path base) throws Exception {\n+        test(base, \"throws\", \"exception\");\n+    }\n+\n+    @Test\n+    public void testThrowsThrows(Path base) throws Exception {\n+        test(base, \"throws\", \"throws\");\n+    }\n+\n+    void test(Path base, String a, String b) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                    package p;\n+                    public class A {\n+                        \/**\n+                         * @param x a number\n+                         * @##A## NullPointerException if x is null\n+                         * @##A## IllegalArgumentException if {@code x < 0}\n+                         *\/\n+                        public void m(Integer x) { }\n+                    }\n+                    \"\"\".replace(\"##A##\", a),\n+                \"\"\"\n+                    package p;\n+                    public class A_Sub extends A {\n+                        \/**\n+                         * @param x {@inheritDoc}\n+                         * @##B## NullPointerException {@inheritDoc}\n+                         * @##B## IllegalArgumentException {@inheritDoc}\n+                         *\/\n+                        @Override\n+                        public void m(Integer x) { }\n+                    }\n+                    \"\"\".replace(\"##B##\", b)\n+                );\n+\n+        javadoc(\"-d\", base.resolve(\"out\").toString(),\n+                \"-sourcepath\", src.toString(),\n+                \"--no-platform-links\",\n+                \"p\");\n+        checkExit(Exit.OK);\n+\n+        checkOutput(\"p\/A_Sub.html\", true,\n+                \"<code>java.lang.NullPointerException<\/code> - if x is null\");\n+\n+        checkOutput(\"p\/A_Sub.html\", true,\n+                \"<code>java.lang.IllegalArgumentException<\/code> - if <code>x &lt; 0<\/code>\");\n+    }\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testExceptionInheritance\/TestExceptionInheritance.java","additions":109,"deletions":0,"binary":false,"changes":109,"status":"added"}]}