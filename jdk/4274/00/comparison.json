{"files":[{"patch":"@@ -125,0 +125,5 @@\n+    } else if (StubRoutines::is_stub_code(pc())) {\n+      \/\/ fp must be safe\n+      if (!thread->is_in_full_stack_checked((address)this->fp())) {\n+        return false;\n+      }\n@@ -126,0 +131,10 @@\n+      sender_sp = (intptr_t*) addr_at(sender_sp_offset);\n+      \/\/ Is sender_sp safe?\n+      if (!thread->is_in_full_stack_checked((address)sender_sp)) {\n+        return false;\n+      }\n+      sender_unextended_sp = sender_sp;\n+      \/\/ On Intel the return_address is always the word on the stack\n+      sender_pc = (address) this->fp()[return_addr_offset];\n+      \/\/ Note: frame::sender_sp_offset is only valid for compiled frame\n+      saved_fp = (intptr_t*) this->fp()[link_offset];\n@@ -442,4 +457,7 @@\n-  \/\/ frame owned by optimizing compiler\n-  assert(_cb->frame_size() >= 0, \"must have non-zero frame size\");\n-  intptr_t* sender_sp = unextended_sp() + _cb->frame_size();\n-  intptr_t* unextended_sp = sender_sp;\n+  intptr_t* sender_sp;\n+  intptr_t* sender_unextended_sp;\n+  address sender_pc;\n+  intptr_t** saved_fp_addr;\n+  if (StubRoutines::is_stub_code(pc())) {\n+    sender_sp = (intptr_t*) addr_at(sender_sp_offset);\n+    sender_unextended_sp = sender_sp;\n@@ -447,2 +465,2 @@\n-  \/\/ On Intel the return_address is always the word on the stack\n-  address sender_pc = (address) *(sender_sp-1);\n+    \/\/ On Intel the return_address is always the word on the stack\n+    sender_pc = (address) fp()[return_addr_offset];\n@@ -450,3 +468,16 @@\n-  \/\/ This is the saved value of EBP which may or may not really be an FP.\n-  \/\/ It is only an FP if the sender is an interpreter frame (or C1?).\n-  intptr_t** saved_fp_addr = (intptr_t**) (sender_sp - frame::sender_sp_offset);\n+    \/\/ This is the saved value of EBP which may or may not really be an FP.\n+    \/\/ It is only an FP if the sender is an interpreter frame (or C1?).\n+    saved_fp_addr = (intptr_t**) addr_at(link_offset);\n+  } else {\n+    \/\/ frame owned by optimizing compiler\n+    assert(_cb->frame_size() >= 0, \"must have non-zero frame size\");\n+    sender_sp = unextended_sp() + _cb->frame_size();\n+    sender_unextended_sp = sender_sp;\n+\n+    \/\/ On Intel the return_address is always the word on the stack\n+    sender_pc = (address) *(sender_sp-1);\n+\n+    \/\/ This is the saved value of EBP which may or may not really be an FP.\n+    \/\/ It is only an FP if the sender is an interpreter frame (or C1?).\n+    saved_fp_addr = (intptr_t**) (sender_sp - frame::sender_sp_offset);\n+  }\n@@ -470,1 +501,1 @@\n-  return frame(sender_sp, unextended_sp, *saved_fp_addr, sender_pc);\n+  return frame(sender_sp, sender_unextended_sp, *saved_fp_addr, sender_pc);\n","filename":"src\/hotspot\/cpu\/x86\/frame_x86.cpp","additions":41,"deletions":10,"binary":false,"changes":51,"status":"modified"}]}