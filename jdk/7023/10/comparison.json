{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+#include \"metaprogramming\/enableIf.hpp\"\n@@ -407,12 +408,5 @@\n-  Address(Register r, int o)\n-    : _base(r), _index(noreg), _offset(o), _mode(base_plus_offset), _target(0) { }\n-  Address(Register r, long o)\n-    : _base(r), _index(noreg), _offset(o), _mode(base_plus_offset), _target(0) { }\n-  Address(Register r, long long o)\n-    : _base(r), _index(noreg), _offset(o), _mode(base_plus_offset), _target(0) { }\n-  Address(Register r, unsigned int o)\n-    : _base(r), _index(noreg), _offset(o), _mode(base_plus_offset), _target(0) { }\n-  Address(Register r, unsigned long o)\n-    : _base(r), _index(noreg), _offset(o), _mode(base_plus_offset), _target(0) { }\n-  Address(Register r, unsigned long long o)\n-    : _base(r), _index(noreg), _offset(o), _mode(base_plus_offset), _target(0) { }\n+\n+  template<typename T, ENABLE_IF(std::is_integral<T>::value)>\n+  Address(Register r, T o)\n+    : _base(r), _index(noreg), _offset(o), _mode(base_plus_offset), _target(0) {}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":7,"deletions":13,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -4345,1 +4345,1 @@\n-    mov(rscratch2, (size_t)(4 * wordSize) << shift);\n+    mov(rscratch2, (uint64_t)(4 * wordSize) << shift);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+#include \"metaprogramming\/enableIf.hpp\"\n@@ -496,6 +497,2 @@\n-  inline void mov(Register dst, int imm64)                { mov_immediate64(dst, (uint64_t)imm64); }\n-  inline void mov(Register dst, long imm64)               { mov_immediate64(dst, (uint64_t)imm64); }\n-  inline void mov(Register dst, long long imm64)          { mov_immediate64(dst, (uint64_t)imm64); }\n-  inline void mov(Register dst, unsigned int imm64)       { mov_immediate64(dst, (uint64_t)imm64); }\n-  inline void mov(Register dst, unsigned long imm64)      { mov_immediate64(dst, (uint64_t)imm64); }\n-  inline void mov(Register dst, unsigned long long imm64) { mov_immediate64(dst, (uint64_t)imm64); }\n+  template<typename T, ENABLE_IF(std::is_integral<T>::value)>\n+  inline void mov(Register dst, T o)                      { mov_immediate64(dst, (uint64_t)o); }\n@@ -503,4 +500,1 @@\n-  inline void movw(Register dst, uint32_t imm32)\n-  {\n-    mov_immediate32(dst, imm32);\n-  }\n+  inline void movw(Register dst, uint32_t imm32)          { mov_immediate32(dst, imm32); }\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":5,"deletions":11,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -300,1 +300,2 @@\n-    mov(rscratch1, 0xffffe00000000000);\n+    uint64_t mask = UCONST64(0xffffe00000000000);\n+    mov(rscratch1, mask);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64_log.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1212,1 +1212,1 @@\n-      __ ldr(member_reg, Address(sp, r->reg2stack() * VMRegImpl::stack_slot_size));\n+      __ ldr(member_reg, Address(sp, (uint64_t)r->reg2stack() * VMRegImpl::stack_slot_size));\n@@ -1231,1 +1231,1 @@\n-      __ ldr(receiver_reg, Address(sp, r->reg2stack() * VMRegImpl::stack_slot_size));\n+      __ ldr(receiver_reg, Address(sp, (uint64_t)r->reg2stack() * VMRegImpl::stack_slot_size));\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -74,1 +74,2 @@\n-  __ str(rscratch1, Address(sp, layout.stack_args));\n+  Address slot = __ legitimize_address(Address(sp, layout.stack_args), wordSize, rscratch2);\n+  __ str(rscratch1, slot);\n","filename":"src\/hotspot\/cpu\/aarch64\/universalUpcallHandler_aarch64.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}