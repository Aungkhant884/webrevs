{"files":[{"patch":"@@ -411,0 +411,7 @@\n+#ifdef __APPLE__\n+  \/\/ macosx wants all the overloads\n+  Address(Register r, uintptr_t o)\n+    : _base(r), _index(noreg), _offset(o), _mode(base_plus_offset), _target(0) { }\n+  Address(Register r, ptrdiff_t o)\n+    : _base(r), _index(noreg), _offset(o), _mode(base_plus_offset), _target(0) { }\n+#endif\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1174,1 +1174,1 @@\n-          __ ldr(temp_reg, Address(sp, r->reg2stack() * VMRegImpl::stack_slot_size));\n+          __ ldr(temp_reg, Address(sp, (uint64_t)r->reg2stack() * VMRegImpl::stack_slot_size));\n@@ -1212,1 +1212,1 @@\n-      __ ldr(member_reg, Address(sp, r->reg2stack() * VMRegImpl::stack_slot_size));\n+      __ ldr(member_reg, Address(sp, (uint64_t)r->reg2stack() * VMRegImpl::stack_slot_size));\n@@ -1231,1 +1231,1 @@\n-      __ ldr(receiver_reg, Address(sp, r->reg2stack() * VMRegImpl::stack_slot_size));\n+      __ ldr(receiver_reg, Address(sp, (uint64_t)r->reg2stack() * VMRegImpl::stack_slot_size));\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}