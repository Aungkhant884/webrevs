{"files":[{"patch":"@@ -30,0 +30,1 @@\n+#include \"metaprogramming\/enableIf.hpp\"\n@@ -407,13 +408,5 @@\n-  Address(Register r, int o)\n-    : _base(r), _index(noreg), _offset(o), _mode(base_plus_offset), _target(0) { }\n-  Address(Register r, int64_t o)\n-    : _base(r), _index(noreg), _offset(o), _mode(base_plus_offset), _target(0) { }\n-#ifdef __APPLE__\n-  \/\/ macosx wants all the overloads\n-  Address(Register r, uintptr_t o)\n-    : _base(r), _index(noreg), _offset(o), _mode(base_plus_offset), _target(0) { }\n-  Address(Register r, ptrdiff_t o)\n-    : _base(r), _index(noreg), _offset(o), _mode(base_plus_offset), _target(0) { }\n-#endif\n-  Address(Register r, uint64_t o)\n-    : _base(r), _index(noreg), _offset(o), _mode(base_plus_offset), _target(0) { }\n+\n+  template<typename T, ENABLE_IF(std::is_integral<T>::value)>\n+  Address(Register r, T o)\n+    : _base(r), _index(noreg), _offset(o), _mode(base_plus_offset), _target(0) {}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":6,"deletions":13,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"metaprogramming\/enableIf.hpp\"\n@@ -495,8 +496,3 @@\n-  inline void mov(Register dst, int32_t imm32)            { mov_immediate64(dst, imm32); }\n-  inline void mov(Register dst, uint32_t imm32)           { mov_immediate64(dst, imm32); }\n-#ifdef __APPLE__\n-  \/\/ macosx wants all the overloads\n-  inline void mov(Register dst, intptr_t imm64)           { mov_immediate64(dst, imm64); }\n-#endif\n-  inline void mov(Register dst, int64_t imm64)            { mov_immediate64(dst, imm64); }\n-  inline void mov(Register dst, uint64_t imm64)           { mov_immediate64(dst, imm64); }\n+\n+  template<typename T, ENABLE_IF(std::is_integral<T>::value)>\n+  inline void mov(Register dst, T o)                      { mov_immediate64(dst, (uint64_t)o); }\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"}]}