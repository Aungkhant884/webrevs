{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -407,11 +407,1 @@\n-  Address(Register r, int o)\n-    : _base(r), _index(noreg), _offset(o), _mode(base_plus_offset), _target(0) { }\n-  Address(Register r, long o)\n-    : _base(r), _index(noreg), _offset(o), _mode(base_plus_offset), _target(0) { }\n-  Address(Register r, long long o)\n-    : _base(r), _index(noreg), _offset(o), _mode(base_plus_offset), _target(0) { }\n-  Address(Register r, unsigned int o)\n-    : _base(r), _index(noreg), _offset(o), _mode(base_plus_offset), _target(0) { }\n-  Address(Register r, unsigned long o)\n-    : _base(r), _index(noreg), _offset(o), _mode(base_plus_offset), _target(0) { }\n-  Address(Register r, unsigned long long o)\n+  Address(Register r, int64_t o)\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":2,"deletions":12,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -4345,1 +4345,1 @@\n-    mov(rscratch2, (size_t)(4 * wordSize) << shift);\n+    mov(rscratch2, (uint64_t)(4 * wordSize) << shift);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -495,0 +495,8 @@\n+  inline void mov(Register dst, int32_t imm32)            { mov_immediate64(dst, imm32); }\n+  inline void mov(Register dst, uint32_t imm32)           { mov_immediate64(dst, imm32); }\n+#ifdef __APPLE__\n+  \/\/ macosx wants all the overloads\n+  inline void mov(Register dst, intptr_t imm32)           { mov_immediate64(dst, imm32); }\n+#endif\n+  inline void mov(Register dst, int64_t imm32)           { mov_immediate64(dst, imm32); }\n+  inline void mov(Register dst, uint64_t imm32)           { mov_immediate64(dst, imm32); }\n@@ -496,11 +504,1 @@\n-  inline void mov(Register dst, int imm64)                { mov_immediate64(dst, (uint64_t)imm64); }\n-  inline void mov(Register dst, long imm64)               { mov_immediate64(dst, (uint64_t)imm64); }\n-  inline void mov(Register dst, long long imm64)          { mov_immediate64(dst, (uint64_t)imm64); }\n-  inline void mov(Register dst, unsigned int imm64)       { mov_immediate64(dst, (uint64_t)imm64); }\n-  inline void mov(Register dst, unsigned long imm64)      { mov_immediate64(dst, (uint64_t)imm64); }\n-  inline void mov(Register dst, unsigned long long imm64) { mov_immediate64(dst, (uint64_t)imm64); }\n-\n-  inline void movw(Register dst, uint32_t imm32)\n-  {\n-    mov_immediate32(dst, imm32);\n-  }\n+  inline void movw(Register dst, uint32_t imm32)          { mov_immediate32(dst, imm32); }\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -300,1 +300,2 @@\n-    mov(rscratch1, 0xffffe00000000000);\n+    uint64_t mask = 0xffffe00000000000UL;\n+    mov(rscratch1, mask);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64_log.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -972,1 +972,1 @@\n- *   int java.util.zip.CRC32.updateByteBuffer(int crc, long buf, int off, int len)\n+ *   int java.util.zip.CRC32.updateByteBuffer(int crc, jlong buf, int off, int len)\n@@ -997,1 +997,1 @@\n-      __ ldr(buf, Address(esp, 2*wordSize)); \/\/ long buf\n+      __ ldr(buf, Address(esp, 2*wordSize)); \/\/ jlong buf\n@@ -1027,1 +1027,1 @@\n- *   int java.util.zip.CRC32C.updateDirectByteBuffer(int crc, long buf, int off, int end)\n+ *   int java.util.zip.CRC32C.updateDirectByteBuffer(int crc, jlong buf, int off, int end)\n@@ -1046,1 +1046,1 @@\n-    __ ldr(buf, Address(esp, 2*wordSize)); \/\/ byte[] buf | long buf\n+    __ ldr(buf, Address(esp, 2*wordSize)); \/\/ byte[] buf | jlong buf\n@@ -1049,1 +1049,1 @@\n-      __ ldrw(crc, Address(esp, 4*wordSize)); \/\/ long crc\n+      __ ldrw(crc, Address(esp, 4*wordSize)); \/\/ jlong crc\n@@ -1052,1 +1052,1 @@\n-      __ ldrw(crc, Address(esp, 3*wordSize)); \/\/ long crc\n+      __ ldrw(crc, Address(esp, 3*wordSize)); \/\/ jlong crc\n","filename":"src\/hotspot\/cpu\/aarch64\/templateInterpreterGenerator_aarch64.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-  __ str(rscratch1, Address(sp, layout.stack_args));\n+  __ str(rscratch1, Address(sp, (int)layout.stack_args));  \/\/ x86 casts to int also\n","filename":"src\/hotspot\/cpu\/aarch64\/universalUpcallHandler_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}