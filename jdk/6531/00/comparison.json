{"files":[{"patch":"@@ -41,0 +41,1 @@\n+import java.nio.file.FileVisitResult;\n@@ -43,0 +44,2 @@\n+import java.nio.file.SimpleFileVisitor;\n+import java.nio.file.attribute.BasicFileAttributes;\n@@ -45,1 +48,1 @@\n-import java.util.Enumeration;\n+import java.util.HashSet;\n@@ -220,6 +223,16 @@\n-            try (Stream<Path> stream = Files.walk(path, Integer.MAX_VALUE)) {\n-                return stream.filter(ClassFileReader::isClass)\n-                             .map(path::relativize)\n-                             .map(Path::toString)\n-                             .map(p -> p.replace(File.separatorChar, '\/'))\n-                             .collect(Collectors.toSet());\n+            try {\n+                Set<String> result = new HashSet<>();\n+                Files.walkFileTree(path, new SimpleFileVisitor<>() {\n+                    @Override\n+                    public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n+                        if (ClassFileReader.isClass(file)) {\n+                            result.add(path.relativize(file).toString().replace(File.separatorChar, '\/'));\n+                        }\n+                        return FileVisitResult.CONTINUE;\n+                    }\n+                    @Override\n+                    public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {\n+                        return FileVisitResult.CONTINUE;\n+                    }\n+                });\n+                return result;\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/jdeps\/ClassFileReader.java","additions":20,"deletions":7,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -0,0 +1,93 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @library lib\n+ * @build CompilerUtils\n+ * @run testng TestClassPath\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.attribute.FileAttribute;\n+import java.nio.file.attribute.PosixFilePermission;\n+import java.nio.file.attribute.PosixFilePermissions;\n+import java.util.Set;\n+import java.util.spi.ToolProvider;\n+\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.Test;\n+\n+import static org.testng.Assert.assertTrue;\n+\n+public class TestClassPath {\n+    private static final ToolProvider JDEPS_TOOL = ToolProvider.findFirst(\"jdeps\").orElseThrow();\n+    private static final String TEST_SRC = System.getProperty(\"test.src\");\n+    private static final Path CLASSES_DIR = Path.of(\"classes\");\n+    private static final Path CLASSES = CLASSES_DIR.resolve(\"p\");\n+\n+    @BeforeTest\n+    public void setup() throws IOException {\n+        CompilerUtils.cleanDir(CLASSES_DIR);\n+        assertTrue(CompilerUtils.compile(Path.of(TEST_SRC, \"p\"), CLASSES_DIR));\n+    }\n+\n+    @Test\n+    public void test() {\n+        int rc = JDEPS_TOOL.run(System.out, System.out, \"-verbose:class\", \"-cp\", \".\", CLASSES.toString());\n+        assertTrue(rc == 0);\n+    }\n+\n+    \/\/ Class file with no permission\n+    @Test\n+    public void ignoreNoPermissionFile() throws IOException {\n+        Set<PosixFilePermission> perms = PosixFilePermissions.fromString(\"---------\");\n+        FileAttribute<Set<PosixFilePermission>> attrs = PosixFilePermissions.asFileAttribute(perms);\n+        Files.createDirectories(Path.of(\"dir1\"));\n+        Path file = Path.of(\"dir1\", \"NoPerm.class\");\n+        Files.createFile(file, attrs);\n+        int rc = JDEPS_TOOL.run(System.out, System.out, \"--list-deps\", \"-cp\", \"dir1\", CLASSES.toString());\n+        assertTrue(rc == 0);\n+        resetPermission(file);\n+    }\n+\n+    \/\/ A directory with no permission\n+    @Test\n+    public void ignoreNoPermissionDir() throws IOException {\n+        Set<PosixFilePermission> perms = PosixFilePermissions.fromString(\"---------\");\n+        FileAttribute<Set<PosixFilePermission>> attrs = PosixFilePermissions.asFileAttribute(perms);\n+        Path dir = Path.of(\"dir2\");\n+        Files.createDirectories(dir, attrs);\n+        int rc = JDEPS_TOOL.run(System.out, System.out, \"--print-module-deps\", \"-cp\", \"dir2\", CLASSES.toString());\n+        assertTrue(rc == 0);\n+        resetPermission(dir);\n+    }\n+\n+    private void resetPermission(Path path) throws IOException {\n+        Set<PosixFilePermission> perms = PosixFilePermissions.fromString(\"rwxrwxrwx\");\n+        Files.setPosixFilePermissions(path, perms);\n+    }\n+}\n","filename":"test\/langtools\/tools\/jdeps\/TestClassPath.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"added"}]}