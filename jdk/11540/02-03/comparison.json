{"files":[{"patch":"@@ -29,1 +29,0 @@\n-import sun.invoke.util.ValueConversions;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/BoundMethodHandle.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import sun.invoke.util.BytecodeDescriptor;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MemberName.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -345,58 +345,0 @@\n-    static void empty() {\n-    }\n-\n-    static Object zeroObject() {\n-        return null;\n-    }\n-\n-    static int zeroInteger() {\n-        return 0;\n-    }\n-\n-    static long zeroLong() {\n-        return 0;\n-    }\n-\n-    static float zeroFloat() {\n-        return 0;\n-    }\n-\n-    static double zeroDouble() {\n-        return 0;\n-    }\n-\n-    private static final WrapperCache[] CONSTANT_FUNCTIONS = newWrapperCaches(2);\n-\n-    public static MethodHandle zeroConstantFunction(Wrapper wrap) {\n-        WrapperCache cache = CONSTANT_FUNCTIONS[0];\n-        MethodHandle mh = cache.get(wrap);\n-        if (mh != null) {\n-            return mh;\n-        }\n-        \/\/ slow path\n-        MethodType type = MethodType.methodType(wrap.primitiveType());\n-        switch (wrap) {\n-            case VOID:\n-                mh = Handles.EMPTY;\n-                break;\n-            case OBJECT:\n-            case INT: case LONG: case FLOAT: case DOUBLE:\n-                try {\n-                    mh = IMPL_LOOKUP.findStatic(THIS_CLASS, \"zero\"+wrap.wrapperSimpleName(), type);\n-                } catch (ReflectiveOperationException ex) {\n-                    mh = null;\n-                }\n-                break;\n-        }\n-        if (mh != null) {\n-            return cache.put(wrap, mh);\n-        }\n-\n-        \/\/ use zeroInt and cast the result\n-        if (wrap.isSubwordOrInt() && wrap != Wrapper.INT) {\n-            mh = MethodHandles.explicitCastArguments(zeroConstantFunction(Wrapper.INT), type);\n-            return cache.put(wrap, mh);\n-        }\n-        throw new IllegalArgumentException(\"cannot find zero constant for \" + wrap);\n-    }\n-\n@@ -404,1 +346,1 @@\n-        static final MethodHandle CAST_REFERENCE, IGNORE, EMPTY;\n+        static final MethodHandle IGNORE;\n@@ -409,1 +351,0 @@\n-                CAST_REFERENCE = IMPL_LOOKUP.findVirtual(Class.class, \"cast\", idType);\n@@ -411,1 +352,0 @@\n-                EMPTY = IMPL_LOOKUP.findStatic(THIS_CLASS, \"empty\", ignoreType.dropParameterTypes(0, 1));\n@@ -422,4 +362,0 @@\n-    \/** Return a method that casts its second argument (an Object) to the given type (a Class). *\/\n-    public static MethodHandle cast() {\n-        return Handles.CAST_REFERENCE;\n-    }\n@@ -676,3 +612,0 @@\n-    private static InternalError newInternalError(Throwable cause) {\n-        return new InternalError(cause);\n-    }\n","filename":"src\/java.base\/share\/classes\/sun\/invoke\/util\/ValueConversions.java","additions":2,"deletions":69,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -137,24 +137,0 @@\n-    @Test\n-    public void testCast() throws Throwable {\n-        Class<?>[] types = { Object.class, Serializable.class, String.class, Number.class, Integer.class };\n-        Object[] objects = { new Object(), Boolean.FALSE,      \"hello\",      (Long)12L,    (Integer)6    };\n-        for (Class<?> dst : types) {\n-            MethodHandle caster = ValueConversions.cast().bindTo(dst);\n-            assertEquals(caster.type(), MethodHandles.identity(Object.class).type());\n-            for (Object obj : objects) {\n-                Class<?> src = obj.getClass();\n-                boolean canCast = dst.isAssignableFrom(src);\n-                try {\n-                    Object result = caster.invokeExact(obj);\n-                    if (canCast)\n-                        assertEquals(obj, result);\n-                    else\n-                        assertEquals(\"cast should not have succeeded\", dst, obj);\n-                } catch (ClassCastException ex) {\n-                    if (canCast)\n-                        throw ex;\n-                }\n-            }\n-        }\n-    }\n-\n","filename":"test\/jdk\/sun\/invoke\/util\/ValueConversionsTest.java","additions":0,"deletions":24,"binary":false,"changes":24,"status":"modified"}]}