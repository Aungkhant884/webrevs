{"files":[{"patch":"@@ -34,0 +34,1 @@\n+import static sun.nio.fs.UnixConstants.*;\n@@ -265,2 +266,3 @@\n-            try {\n-                if (followLinks) {\n+\n+            if (followLinks) {\n+                try {\n@@ -268,7 +270,2 @@\n-                } else {\n-                    int fd = file.openForAttributeAccess(false);\n-                    try {\n-                        fchmod(fd, mode);\n-                    } finally {\n-                        close(fd);\n-                    }\n+                } catch (UnixException e) {\n+                    e.rethrowAsIOException(file);\n@@ -276,7 +273,12 @@\n-            } catch (UnixException x) {\n-                if (!followLinks && x.errno() == UnixConstants.EACCES) {\n-                    \/\/\n-                    \/\/ check whether file's path contains any symlinks, and if\n-                    \/\/ not, retry setting the mode as if followLinks were true\n-                    \/\/\n-                    UnixPath p = file;\n+                return;\n+            }\n+\n+            if (O_NOFOLLOW == 0) {\n+                throw new IOException(\"NOFOLLOW_LINKS is not supported on this platform\");\n+            }\n+\n+            int fd = -1;\n+            try {\n+                fd = open(file, O_RDONLY, O_NOFOLLOW);\n+            } catch (UnixException e1) {\n+                if (e1.errno() == EACCES) {\n@@ -284,15 +286,3 @@\n-                        boolean containsLink =\n-                            UnixFileAttributes.get(p, false).isSymbolicLink();\n-                        while (!containsLink) {\n-                            p = p.getParent();\n-                            if (p == null)\n-                                break;\n-                            containsLink =\n-                                UnixFileAttributes.get(p, false).isSymbolicLink();\n-                        }\n-                        if (!containsLink) {\n-                            chmod(file, mode);\n-                            return;\n-                        }\n-                    } catch (UnixException y) {\n-                        x.addSuppressed(y);\n+                        fd = open(file, O_WRONLY, O_NOFOLLOW);\n+                    } catch (UnixException e2) {\n+                        e2.rethrowAsIOException(file);\n@@ -300,0 +290,2 @@\n+                } else {\n+                    e1.rethrowAsIOException(file);\n@@ -301,1 +293,10 @@\n-                x.rethrowAsIOException(file);\n+            }\n+\n+            try {\n+                try {\n+                    fchmod(fd, mode);\n+                } finally {\n+                    close(fd);\n+                }\n+            } catch (UnixException e) {\n+                e.rethrowAsIOException(file);\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileAttributeViews.java","additions":33,"deletions":32,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -189,3 +189,2 @@\n-            \/\/ test that setting permissions on a link-free path with\n-            \/\/ the NOFOLLOW_LINKS option succeeds when the path does\n-            \/\/ not have read permission but fails on a path with links\n+            \/\/ test that setting permissions on paths with and without\n+            \/\/ links succeeds when the NOFOLLOW_LINKS option is set\n@@ -228,6 +227,1 @@\n-            try {\n-                withView.setPermissions(Set.of(PosixFilePermission.OWNER_WRITE));\n-                throw new RuntimeException(\"AccessDeniedException not thrown\");\n-            } catch (AccessDeniedException expected) {\n-                System.err.println(\"Ignored expected AccessDeniedException\");\n-            }\n+            withView.setPermissions(Set.of(PosixFilePermission.OWNER_WRITE));\n","filename":"test\/jdk\/java\/nio\/file\/attribute\/PosixFileAttributeView\/Basic.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"}]}