{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+import static sun.nio.fs.UnixConstants.*;\n@@ -265,2 +266,3 @@\n-            try {\n-                if (followLinks) {\n+\n+            if (followLinks) {\n+                try {\n@@ -268,2 +270,16 @@\n-                } else {\n-                    int fd = file.openForAttributeAccess(false);\n+                } catch (UnixException e) {\n+                    e.rethrowAsIOException(file);\n+                }\n+                return;\n+            }\n+\n+            if (O_NOFOLLOW == 0) {\n+                throw new IOException(\"NOFOLLOW_LINKS is not supported on this platform\");\n+            }\n+\n+            int fd = -1;\n+            try {\n+                fd = open(file, O_RDONLY, O_NOFOLLOW);\n+            } catch (UnixException e1) {\n+                if (e1.errno() == EACCES) {\n+                    \/\/ retry with write access if there is no read permission\n@@ -271,3 +287,3 @@\n-                        fchmod(fd, mode);\n-                    } finally {\n-                        close(fd);\n+                        fd = open(file, O_WRONLY, O_NOFOLLOW);\n+                    } catch (UnixException e2) {\n+                        e2.rethrowAsIOException(file);\n@@ -275,0 +291,2 @@\n+                } else {\n+                    e1.rethrowAsIOException(file);\n@@ -276,2 +294,10 @@\n-            } catch (UnixException x) {\n-                x.rethrowAsIOException(file);\n+            }\n+\n+            try {\n+                try {\n+                    fchmod(fd, mode);\n+                } finally {\n+                    close(fd);\n+                }\n+            } catch (UnixException e) {\n+                e.rethrowAsIOException(file);\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileAttributeViews.java","additions":36,"deletions":10,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n- * @bug 4313887 6838333\n+ * @bug 4313887 6838333 8062795\n@@ -170,2 +170,0 @@\n-        \/\/ create link (to file that doesn't exist) and test reading of\n-        \/\/ permissions\n@@ -173,0 +171,2 @@\n+            \/\/ create link (to file that doesn't exist) and test reading of\n+            \/\/ permissions\n@@ -188,0 +188,40 @@\n+\n+            \/\/ test that setting permissions on paths with and without\n+            \/\/ links succeeds when the NOFOLLOW_LINKS option is set\n+\n+            \/\/ ensure there are no links in the path to test\n+            Path realDir = dir.toRealPath();\n+\n+            \/\/ realDir\/a\/b\/c\/d\n+            Path leaf = realDir.resolve(Path.of(\"a\", \"b\", \"c\", \"d\"));\n+            Files.createDirectories(leaf);\n+\n+            \/\/ realDir\/a\/b\/c\/d\/FUBAR\n+            Path sansLinks = Files.createTempFile(leaf, \"FU\", \"BAR\");\n+\n+            PosixFileAttributeView sansView =\n+                Files.getFileAttributeView(sansLinks,\n+                                           PosixFileAttributeView.class,\n+                                           LinkOption.NOFOLLOW_LINKS);\n+            sansView.setPermissions(Set.of(PosixFilePermission.OWNER_WRITE));\n+            sansView.setPermissions(Set.of(PosixFilePermission.OWNER_WRITE));\n+\n+            \/\/ reinstate read permission\n+            sansView.setPermissions(Set.of(PosixFilePermission.OWNER_READ,\n+                                           PosixFilePermission.OWNER_WRITE));\n+\n+            \/\/ lien -> realDir\/a\/b\/c\n+            Path lien = realDir.resolve(Path.of(\"a\", \"lien\"));\n+            Files.createSymbolicLink(lien,\n+                                     realDir.resolve(Path.of(\"a\", \"b\", \"c\")));\n+\n+            \/\/ lien\/d\/FUBAR\n+            Path withLinks = lien.resolve(Path.of(\"d\"),\n+                                          sansLinks.getFileName());\n+\n+            PosixFileAttributeView withView =\n+                Files.getFileAttributeView(withLinks,\n+                                           PosixFileAttributeView.class,\n+                                           LinkOption.NOFOLLOW_LINKS);\n+            withView.setPermissions(Set.of(PosixFilePermission.OWNER_WRITE));\n+            withView.setPermissions(Set.of(PosixFilePermission.OWNER_WRITE));\n","filename":"test\/jdk\/java\/nio\/file\/attribute\/PosixFileAttributeView\/Basic.java","additions":44,"deletions":4,"binary":false,"changes":48,"status":"modified"}]}