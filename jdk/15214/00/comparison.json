{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -277,0 +277,24 @@\n+                if (!followLinks && x.errno() == UnixConstants.EACCES) {\n+                    \/\/\n+                    \/\/ check whether file's path contains any symlinks, and if\n+                    \/\/ not, retry setting the mode as if followLinks were true\n+                    \/\/\n+                    UnixPath p = file;\n+                    try {\n+                        boolean containsLink =\n+                            UnixFileAttributes.get(p, false).isSymbolicLink();\n+                        while (!containsLink) {\n+                            p = p.getParent();\n+                            if (p == null)\n+                                break;\n+                            containsLink =\n+                                UnixFileAttributes.get(p, false).isSymbolicLink();\n+                        }\n+                        if (!containsLink) {\n+                            chmod(file, mode);\n+                            return;\n+                        }\n+                    } catch (UnixException y) {\n+                        x.addSuppressed(y);\n+                    }\n+                }\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileAttributeViews.java","additions":25,"deletions":1,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -170,2 +170,0 @@\n-        \/\/ create link (to file that doesn't exist) and test reading of\n-        \/\/ permissions\n@@ -173,0 +171,2 @@\n+            \/\/ create link (to file that doesn't exist) and test reading of\n+            \/\/ permissions\n@@ -188,0 +188,46 @@\n+\n+            \/\/ test that setting permissions on a link-free path with\n+            \/\/ the NOFOLLOW_LINKS option succeeds when the path does\n+            \/\/ not have read permission but fails on a path with links\n+\n+            \/\/ ensure there are no links in the path to test\n+            Path realDir = dir.toRealPath();\n+\n+            \/\/ realDir\/a\/b\/c\/d\n+            Path leaf = realDir.resolve(Path.of(\"a\", \"b\", \"c\", \"d\"));\n+            Files.createDirectories(leaf);\n+\n+            \/\/ realDir\/a\/b\/c\/d\/FUBAR\n+            Path sansLinks = Files.createTempFile(leaf, \"FU\", \"BAR\");\n+\n+            PosixFileAttributeView sansView =\n+                Files.getFileAttributeView(sansLinks,\n+                                           PosixFileAttributeView.class,\n+                                           LinkOption.NOFOLLOW_LINKS);\n+            sansView.setPermissions(Set.of(PosixFilePermission.OWNER_WRITE));\n+            sansView.setPermissions(Set.of(PosixFilePermission.OWNER_WRITE));\n+\n+            \/\/ reinstate read permission\n+            sansView.setPermissions(Set.of(PosixFilePermission.OWNER_READ,\n+                                           PosixFilePermission.OWNER_WRITE));\n+\n+            \/\/ lien -> realDir\/a\/b\/c\n+            Path lien = realDir.resolve(Path.of(\"a\", \"lien\"));\n+            Files.createSymbolicLink(lien,\n+                                     realDir.resolve(Path.of(\"a\", \"b\", \"c\")));\n+\n+            \/\/ lien\/d\/FUBAR\n+            Path withLinks = lien.resolve(Path.of(\"d\"),\n+                                          sansLinks.getFileName());\n+\n+            PosixFileAttributeView withView =\n+                Files.getFileAttributeView(withLinks,\n+                                           PosixFileAttributeView.class,\n+                                           LinkOption.NOFOLLOW_LINKS);\n+            withView.setPermissions(Set.of(PosixFilePermission.OWNER_WRITE));\n+            try {\n+                withView.setPermissions(Set.of(PosixFilePermission.OWNER_WRITE));\n+                throw new RuntimeException(\"AccessDeniedException not thrown\");\n+            } catch (AccessDeniedException expected) {\n+                System.err.println(\"Ignored expected AccessDeniedException\");\n+            }\n","filename":"test\/jdk\/java\/nio\/file\/attribute\/PosixFileAttributeView\/Basic.java","additions":49,"deletions":3,"binary":false,"changes":52,"status":"modified"}]}