{"files":[{"patch":"@@ -148,0 +148,7 @@\n+    GET_CONTAINER_INFO(julong, _memory->controller(), \"\/memory.swappiness\",\n+                       \"Swappiness is: \" JULONG_FORMAT, JULONG_FORMAT, swappiness);\n+    if (swappiness == 0) {\n+      jlong memlimit = read_memory_limit_in_bytes();\n+      log_trace(os, container)(\"Memory and Swap Limit has been reset to \" JULONG_FORMAT \" because swappiness is 0\", memlimit);\n+      return memlimit;\n+    }\n","filename":"src\/hotspot\/os\/linux\/cgroupV1Subsystem_linux.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -153,2 +153,3 @@\n-         long retval = getLongValue(controller, \"memory.memsw.limit_in_bytes\");\n-         return retval > 0;\n+        long memswBytes = getLongValue(controller, \"memory.memsw.limit_in_bytes\");\n+        long swappiness = getLongValue(controller, \"memory.swappiness\");\n+        return (memswBytes > 0 && swappiness > 0);\n","filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/cgroupv1\/CgroupV1Subsystem.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,85 @@\n+\/*\n+ * Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.containers.docker.Common;\n+import jdk.test.lib.containers.docker.DockerTestUtils;\n+import jdk.test.lib.containers.docker.DockerRunOptions;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.internal.platform.Metrics;\n+\n+\/*\n+ * @test\n+ * @key cgroups\n+ * @requires os.family == \"linux\"\n+ * @modules java.base\/jdk.internal.platform\n+ * @library \/test\/lib\n+ * @build sun.hotspot.WhiteBox PrintContainerInfo\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar whitebox.jar sun.hotspot.WhiteBox\n+ * @run main TestMemoryWithCgroupV1\n+ *\/\n+public class TestMemoryWithCgroupV1 {\n+\n+    private static final String imageName = Common.imageName(\"misc\");\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ If cgroups is not configured, report success.\n+        Metrics metrics = Metrics.systemMetrics();\n+        if (metrics == null) {\n+            System.out.println(\"TEST PASSED!!!\");\n+            return;\n+        }\n+        if (\"cgroupv1\".equals(metrics.getProvider())) {\n+            if (!DockerTestUtils.canTestDocker()) {\n+                return;\n+            }\n+\n+            Common.prepareWhiteBox();\n+            DockerTestUtils.buildJdkContainerImage(imageName);\n+\n+            try {\n+                testMemoryLimitWithSwappiness(\"100M\", \"150M\");\n+            } finally {\n+                DockerTestUtils.removeDockerImage(imageName);\n+            }\n+        } else {\n+            System.out.println(\"Memory swappiness not supported with cgroups v2. Test skipped.\");\n+        }\n+        System.out.println(\"TEST PASSED!!!\");\n+    }\n+\n+    private static void testMemoryLimitWithSwappiness(String dockerMemLimit, String dockerSwapMemLimit)\n+            throws Exception {\n+        Common.logNewTestCase(\"Test print_container_info()\");\n+\n+        DockerRunOptions opts = Common.newOpts(imageName, \"PrintContainerInfo\").addJavaOpts(\"-XshowSettings:system\");\n+        opts.addDockerOpts(\"--memory\", dockerMemLimit, \"--memory-swappiness\", \"0\", \"--memory-swap\", dockerSwapMemLimit);\n+        Common.addWhiteBoxOpts(opts);\n+\n+        OutputAnalyzer out = Common.run(opts);\n+        out.shouldContain(\"Memory and Swap Limit is: 157286400\")\n+           .shouldContain(\"Memory and Swap Limit has been reset to 104857600 because swappiness is 0\")\n+           .shouldContain(\"Memory & Swap Limit: 100.00M\");\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestMemoryWithCgroupV1.java","additions":85,"deletions":0,"binary":false,"changes":85,"status":"added"}]}