{"files":[{"patch":"@@ -0,0 +1,102 @@\n+\/*\n+ * Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import jdk.internal.platform.Metrics;\n+import jdk.test.lib.containers.cgroup.CgroupV1TestUtils;\n+import jdk.test.lib.containers.docker.Common;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+\/*\n+ * @test\n+ * @key cgroups\n+ * @requires os.family == \"linux\"\n+ * @modules java.base\/jdk.internal.platform\n+ * @library \/test\/lib\n+ * @build sun.hotspot.WhiteBox PrintContainerInfo\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar whitebox.jar sun.hotspot.WhiteBox\n+ * @run main TestCgroupV1Memory\n+ *\/\n+public class TestCgroupV1Memory {\n+\n+    private static final String SUB_SYSTEM_PRE = \"memory:\";\n+    private static final String SUB_SYSTEM_NAME = \"memorytest\";\n+\n+    public static void main(String[] args) throws Exception {\n+        \/\/ If cgroups is not configured, report success.\n+        Metrics metrics = Metrics.systemMetrics();\n+        if (metrics == null) {\n+            System.out.println(\"TEST PASSED!!!\");\n+            return;\n+        }\n+        if (\"cgroupv1\".equals(metrics.getProvider())) {\n+            Common.prepareWhiteBox();\n+            CgroupV1TestUtils.createSubSystem(SUB_SYSTEM_PRE + SUB_SYSTEM_NAME);\n+\n+            try {\n+                testMemoryLimit();\n+                testMemoryLimitWithSwappiness();\n+            } finally {\n+                CgroupV1TestUtils.deleteSubSystem(SUB_SYSTEM_PRE + SUB_SYSTEM_NAME);\n+            }\n+        }\n+        System.out.println(\"TEST PASSED!!!\");\n+    }\n+\n+    private static void testMemoryLimit() throws Exception {\n+        OutputAnalyzer out = commonMemorySetting();\n+        out.shouldContain(\"Memory Limit: 50.00M\")\n+           .shouldContain(\"memory_and_swap_limit_in_bytes: 104857600\")\n+           .shouldContain(\"Memory & Swap Limit: 100.00M\");\n+    }\n+\n+    private static void testMemoryLimitWithSwappiness() throws Exception {\n+        \n+        CgroupV1TestUtils.initSubSystem(SUB_SYSTEM_NAME, \"memory.swappiness=0\");\n+        OutputAnalyzer out = commonMemorySetting();\n+        out.shouldContain(\"Memory Limit: 50.00M\")\n+           .shouldContain(\"memory_and_swap_limit_in_bytes: 52428800\")\n+           .shouldContain(\"Memory & Swap Limit: 50.00M\")\n+           .shouldContain(\"Memory and Swap Limit has been reset to 52428800 because of Swappiness is 0\");\n+    }\n+\n+    private static OutputAnalyzer commonMemorySetting() throws Exception {\n+        CgroupV1TestUtils.initSubSystem(SUB_SYSTEM_NAME, \"memory.limit_in_bytes=52428800\");\n+        CgroupV1TestUtils.initSubSystem(SUB_SYSTEM_NAME, \"memory.memsw.limit_in_bytes=104857600\");\n+\n+        List<String> subSystems = new ArrayList<>();\n+        subSystems.add(SUB_SYSTEM_PRE + SUB_SYSTEM_NAME);\n+\n+        List<String> jvmOps  = new ArrayList<>();\n+        jvmOps.add(\"-XshowSettings:system\");\n+        jvmOps.add(\"-Xbootclasspath\/a:whitebox.jar\");\n+        jvmOps.add(\"-XX:+UnlockDiagnosticVMOptions\");\n+        jvmOps.add(\"-XX:+WhiteBoxAPI\");\n+        jvmOps.add(\"-Xlog:os+container=trace\");\n+        OutputAnalyzer outputAnalyzer = CgroupV1TestUtils\n+                .runJavaApp(subSystems, jvmOps , \"PrintContainerInfo\");\n+        return outputAnalyzer;\n+    } \n+\n+}\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestCgroupV1Memory.java","additions":102,"deletions":0,"binary":false,"changes":102,"status":"added"},{"patch":"@@ -0,0 +1,92 @@\n+\/*\n+ * Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.test.lib.containers.cgroup;\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+\n+public class CgroupV1TestUtils {\n+\n+\n+    \/\/ Specifies how many lines to copy from child STDOUT to main test output.\n+    \/\/ Having too many lines in the main test output will result\n+    \/\/ in JT harness trimming the output, and can lead to loss of useful\n+    \/\/ diagnostic information.\n+    private static final int MAX_LINES_TO_COPY_FOR_CHILD_STDOUT = 100;\n+\n+    \/\/ Path to a JDK under test.\n+    \/\/ This may be useful when developing tests on non-Linux platforms.\n+    public static final String JDK_UNDER_TEST =\n+            System.getProperty(\"jdk.test.cgroupv1.jdk\", Utils.TEST_JDK);\n+\n+    \/**\n+     * Execute a specified command in a process, report diagnostic info.\n+     *\n+     * @param command to be executed\n+     * @return The output from the process\n+     * @throws Exception\n+     *\/\n+    public static OutputAnalyzer execute(String... command) throws Exception {\n+        return CommandUtils.execute(\"cgroupv1-stdout-%d.log\", MAX_LINES_TO_COPY_FOR_CHILD_STDOUT, command);\n+    }\n+\n+\n+    public static void createSubSystem(String subSystemName) throws Exception {\n+        execute(\"cgcreate\", \"-g\", subSystemName)\n+                .shouldHaveExitValue(0);\n+    }\n+\n+\n+    public static void initSubSystem(String subSystemName,String info) throws Exception {\n+        OutputAnalyzer outputAnalyzer = execute(\"cgset\", \"-r\", info, subSystemName);\n+        System.out.println(outputAnalyzer.getOutput());\n+\n+    }\n+\n+    public static void deleteSubSystem(String subSystemName) throws Exception {\n+        execute(\"cgdelete\", subSystemName)\n+                .shouldHaveExitValue(0);\n+    }\n+\n+    public static OutputAnalyzer runJavaApp(List<String> subSystemList, List<String> jvmOps, String command)\n+            throws Exception {\n+        List<String> cmd = new ArrayList<>();\n+        cmd.add(\"cgexec\");\n+        for (String subSystemName : subSystemList) {\n+            cmd.add(\"-g\");\n+            cmd.add(subSystemName);\n+        }\n+        Path jdkSrcDir = Paths.get(JDK_UNDER_TEST);\n+        cmd.add(jdkSrcDir.toString() + \"\/bin\/java\");\n+        cmd.addAll(jvmOps);\n+        cmd.add(command);\n+\n+        return execute(cmd.toArray(new String[0]));\n+    }\n+}\n","filename":"test\/lib\/jdk\/test\/lib\/containers\/cgroup\/CgroupV1TestUtils.java","additions":92,"deletions":0,"binary":false,"changes":92,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (C) 2022 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.test.lib.containers.cgroup;\n+\n+import java.io.FileWriter;\n+import java.util.Arrays;\n+import java.util.List;\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class CommandUtils {\n+\n+    public static OutputAnalyzer execute(String filename,int lineNumber,String... command) throws Exception {\n+\n+        ProcessBuilder pb = new ProcessBuilder(command);\n+        System.out.println(\"[COMMAND]\\n\" + Utils.getCommandLine(pb));\n+\n+        long started = System.currentTimeMillis();\n+        Process p = pb.start();\n+        long pid = p.pid();\n+        OutputAnalyzer output = new OutputAnalyzer(p);\n+\n+        String stdoutLogFile = String.format(filename, pid);\n+        System.out.println(\"[ELAPSED: \" + (System.currentTimeMillis() - started) + \" ms]\");\n+        System.out.println(\"[STDERR]\\n\" + output.getStderr());\n+        System.out.println(\"[STDOUT]\\n\" +\n+                trimLines(output.getStdout(),lineNumber));\n+        System.out.printf(\"Child process STDOUT is trimmed to %d lines \\n\",\n+                lineNumber);\n+        writeOutputToFile(output.getStdout(), stdoutLogFile);\n+        System.out.println(\"Full child process STDOUT was saved to \" + stdoutLogFile);\n+\n+        return output;\n+    }\n+\n+    private static void writeOutputToFile(String output, String fileName) throws Exception {\n+        try (FileWriter fw = new FileWriter(fileName)) {\n+            fw.write(output, 0, output.length());\n+        }\n+    }\n+\n+\n+    private static String trimLines(String buffer, int nrOfLines) {\n+        List<String> l = Arrays.asList(buffer.split(\"\\\\R\"));\n+        if (l.size() < nrOfLines) {\n+            return buffer;\n+        }\n+\n+        return String.join(\"\\n\", l.subList(0, nrOfLines));\n+    }\n+\n+}\n","filename":"test\/lib\/jdk\/test\/lib\/containers\/cgroup\/CommandUtils.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -26,1 +26,0 @@\n-import java.io.FileWriter;\n@@ -41,0 +40,1 @@\n+import jdk.test.lib.containers.cgroup.CommandUtils;\n@@ -272,27 +272,1 @@\n-\n-        ProcessBuilder pb = new ProcessBuilder(command);\n-        System.out.println(\"[COMMAND]\\n\" + Utils.getCommandLine(pb));\n-\n-        long started = System.currentTimeMillis();\n-        Process p = pb.start();\n-        long pid = p.pid();\n-        OutputAnalyzer output = new OutputAnalyzer(p);\n-\n-        String stdoutLogFile = String.format(\"docker-stdout-%d.log\", pid);\n-        System.out.println(\"[ELAPSED: \" + (System.currentTimeMillis() - started) + \" ms]\");\n-        System.out.println(\"[STDERR]\\n\" + output.getStderr());\n-        System.out.println(\"[STDOUT]\\n\" +\n-                           trimLines(output.getStdout(),MAX_LINES_TO_COPY_FOR_CHILD_STDOUT));\n-        System.out.printf(\"Child process STDOUT is trimmed to %d lines \\n\",\n-                           MAX_LINES_TO_COPY_FOR_CHILD_STDOUT);\n-        writeOutputToFile(output.getStdout(), stdoutLogFile);\n-        System.out.println(\"Full child process STDOUT was saved to \" + stdoutLogFile);\n-\n-        return output;\n-    }\n-\n-\n-    private static void writeOutputToFile(String output, String fileName) throws Exception {\n-        try (FileWriter fw = new FileWriter(fileName)) {\n-            fw.write(output, 0, output.length());\n-        }\n+        return CommandUtils.execute(\"docker-stdout-%d.log\", MAX_LINES_TO_COPY_FOR_CHILD_STDOUT, command);\n@@ -302,9 +276,0 @@\n-    private static String trimLines(String buffer, int nrOfLines) {\n-        List<String> l = Arrays.asList(buffer.split(\"\\\\R\"));\n-        if (l.size() < nrOfLines) {\n-            return buffer;\n-        }\n-\n-        return String.join(\"\\n\", l.subList(0, nrOfLines));\n-    }\n-\n","filename":"test\/lib\/jdk\/test\/lib\/containers\/docker\/DockerTestUtils.java","additions":2,"deletions":37,"binary":false,"changes":39,"status":"modified"}]}