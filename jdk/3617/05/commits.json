[{"commit":{"message":"Fix build after merge"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/SystemLookup.java"}],"sha":"f2c45f91651b81ff098c7a0515d6635917f67c81"},{"commit":{"message":"Merge master"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/CLinker.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java"},{"filename":"test\/jdk\/java\/foreign\/valist\/VaListTest.java"}],"sha":"f7a55fb1e51dab0d2adf7e381a66f8da422dc654"},{"commit":{"message":"Redundant cast to long"},"files":[{"filename":"test\/jdk\/java\/foreign\/valist\/VaListTest.java"}],"sha":"e89b8d87353c785969e0df21965fac2ba257cef0"},{"commit":{"message":"Merge master\n\nChange-Id: I49bef0437b4c47bef8bf74d192299d06b25e1555\nCustomizedGitHooks: yes"},"files":[{"filename":"test\/jdk\/ProblemList.txt"}],"sha":"bc64fdc74c072eecc7ac89eb4d721727e884da16"},{"commit":{"message":"Update test\/jdk\/java\/foreign\/valist\/VaListTest.java\n\nCo-authored-by: Jorn Vernee <JornVernee@users.noreply.github.com>"},"files":[{"filename":"test\/jdk\/java\/foreign\/valist\/VaListTest.java"}],"sha":"185f114f76ccd28f55f76541b23688a49cf75d1c"},{"commit":{"message":"No variadic upcalls\n\nChange-Id: Ibf91c570c88be2587e9e23240477c4a5cc56b4c5\nCustomizedGitHooks: yes"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/CallArranger.java"}],"sha":"251aae682ff305a6985afb1e46f91c7b12ac4fd8"},{"commit":{"message":"Fixes after JEP integratioN\n\nChange-Id: Iaa13b3869522c8814c3f7ef4c1eac8e8267657e6\nCustomizedGitHooks: yes"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/CLinker.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/CABI.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/PlatformLayouts.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/SharedUtils.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/CallArranger.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/linux\/LinuxAArch64Linker.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/linux\/LinuxAArch64VaList.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/macos\/MacOsAArch64Linker.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/macos\/MacOsAArch64VaList.java"},{"filename":"test\/jdk\/ProblemList.txt"},{"filename":"test\/jdk\/java\/foreign\/valist\/VaListTest.java"},{"filename":"test\/jdk\/java\/foreign\/valist\/libVaList.c"}],"sha":"645ccb3d4647653b8a265c5304f268604dff4eb3"},{"commit":{"message":"merge master\n\nChange-Id: Ic06fec084099ff2053dd251a255cbbf4a64a59d7\nCustomizedGitHooks: yes"},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/PlatformLayouts.java"}],"sha":"1a4772b37497e88a4101a12a2eb18cd128b3ba8a"},{"commit":{"message":"8263512: [macos_aarch64] issues with calling va_args functions from invoke_native\n\nmacOS on Apple silicon uses slightly different ABI conventions to the\nstandard AArch64 ABI.  The differences are outlined in [1].  In\nparticular in the standard (AAPCS) ABI, variadic arguments may be passed\nin either registers or on the stack following the normal calling\nconvention.  To handle this, va_list is a struct containing separate\npointers for arguments located in integer registers, floating point\nregisters, and on the stack.  Apple's ABI simplifies this by passing all\nvariadic arguments on the stack and the va_list type becomes a simple\nchar* pointer.\n\nThis patch adds a new MacOsAArch64 CABI type and MacOsAArch64Linker to\nrepresent the new ABI variant on macOS.  StackVaList is based on\nWinVaList lightly modified to handle the different TypeClasses on\nAArch64.  The original AArch64Linker is renamed to AapcsLinker and is\ncurrently used for all non-Mac platforms.  I think we also need to add a\nWinAArch64 CABI but I haven't yet been able to test on a Windows system\nso will do that later.\n\nThe macOS ABI also uses a different method of spilling arguments to the\nstack (the standard ABI pads each argument to a multiple of 8 byte stack\nslots, but the Mac ABI packs arguments according to their natural\nalignment).  None of the existing tests exercise this so I'll open a new\nJBS issue and work on that separately.\n\nTested jdk_foreign on macOS AArch64, Linux AArch64, and Linux X86_64."},"files":[{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/CABI.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/PlatformLayouts.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/AArch64Linker.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/TypeClass.java"},{"filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/abi\/aarch64\/macos\/MacOsAArch64Linker.java"}],"sha":"8b94e8f807ee99060cb9dd0182fb91785958b635"}]