{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -329,1 +329,1 @@\n-  verify_oop_addr(Address(sp, stack_offset), \"oop\");\n+  verify_oop_addr(Address(sp, stack_offset));\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -255,1 +255,1 @@\n-  __ verify_oop(r0, \"Bad oop\");\n+  __ verify_oop(r0);\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/z\/zBarrierSetAssembler_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -120,1 +120,1 @@\n-               verify_oop(r0, state);               break;\n+               interp_verify_oop(r0, state);        break;\n@@ -385,1 +385,1 @@\n-  verify_oop(r0, state);\n+  interp_verify_oop(r0, state);\n@@ -389,1 +389,1 @@\n-  verify_oop(r0, state);\n+  interp_verify_oop(r0, state);\n@@ -467,1 +467,1 @@\n-    verify_oop(r0, state);\n+    interp_verify_oop(r0, state);\n@@ -1472,1 +1472,1 @@\n-void InterpreterMacroAssembler::verify_oop(Register reg, TosState state) {\n+void InterpreterMacroAssembler::_interp_verify_oop(Register reg, TosState state, const char* file, int line) {\n@@ -1474,1 +1474,1 @@\n-    MacroAssembler::verify_oop(reg);\n+    MacroAssembler::_verify_oop_checked(reg, \"broken oop\", file, line);\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -280,1 +280,2 @@\n-  void verify_oop(Register reg, TosState state = atos);\n+#define interp_verify_oop(reg, state) _interp_verify_oop(reg, state, __FILE__, __LINE__);\n+  void _interp_verify_oop(Register reg, TosState state, const char* file, int line);\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -775,1 +775,1 @@\n-  verify_oop(oop_result, \"broken oop in call_VM_base\");\n+  verify_oop_msg(oop_result, \"broken oop in call_VM_base\");\n@@ -1142,1 +1142,1 @@\n-void MacroAssembler::verify_oop(Register reg, const char* s) {\n+void MacroAssembler::_verify_oop(Register reg, const char* s, const char* file, int line) {\n@@ -1150,1 +1150,1 @@\n-    ss.print(\"verify_oop: %s: %s\", reg->name(), s);\n+    ss.print(\"verify_oop: %s: %s (%s:%d)\", reg->name(), s, file, line);\n@@ -1175,1 +1175,1 @@\n-void MacroAssembler::verify_oop_addr(Address addr, const char* s) {\n+void MacroAssembler::_verify_oop_addr(Address addr, const char* s, const char* file, int line) {\n@@ -1182,1 +1182,1 @@\n-    ss.print(\"verify_oop_addr: %s\", s);\n+    ss.print(\"verify_oop_addr: %s (%s:%d)\", s, file, line);\n@@ -3795,1 +3795,1 @@\n-  verify_oop(s, \"broken oop in encode_heap_oop\");\n+  verify_oop_msg(s, \"broken oop in encode_heap_oop\");\n@@ -3828,1 +3828,1 @@\n-  verify_oop(r, \"broken oop in encode_heap_oop_not_null\");\n+  verify_oop_msg(r, \"broken oop in encode_heap_oop_not_null\");\n@@ -3848,1 +3848,1 @@\n-  verify_oop(src, \"broken oop in encode_heap_oop_not_null2\");\n+  verify_oop_msg(src, \"broken oop in encode_heap_oop_not_null2\");\n@@ -3880,1 +3880,1 @@\n-  verify_oop(d, \"broken oop in decode_heap_oop\");\n+  verify_oop_msg(d, \"broken oop in decode_heap_oop\");\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -965,2 +965,13 @@\n-  void verify_oop(Register reg, const char* s = \"broken oop\");\n-  void verify_oop_addr(Address addr, const char * s = \"broken oop addr\");\n+  void _verify_oop(Register reg, const char* s, const char* file, int line);\n+  void _verify_oop_addr(Address addr, const char * s, const char* file, int line);\n+\n+  void _verify_oop_checked(Register reg, const char* s, const char* file, int line) {\n+    if (VerifyOops) {\n+      _verify_oop(reg, s, file, line);\n+    }\n+  }\n+  void _verify_oop_addr_checked(Address reg, const char* s, const char* file, int line) {\n+    if (VerifyOops) {\n+      _verify_oop_addr(reg, s, file, line);\n+    }\n+  }\n@@ -972,0 +983,3 @@\n+#define verify_oop(reg) _verify_oop_checked(reg, \"broken oop \" #reg, __FILE__, __LINE__)\n+#define verify_oop_msg(reg, msg) _verify_oop_checked(reg, \"broken oop \" #reg \", \" #msg, __FILE__, __LINE__)\n+#define verify_oop_addr(addr) _verify_oop_addr_checked(addr, \"broken oop addr \" #addr, __FILE__, __LINE__)\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -7455,1 +7455,3 @@\n-    StubRoutines::_verify_oop_subroutine_entry     = generate_verify_oop();\n+    if (VerifyOops) {\n+      StubRoutines::_verify_oop_subroutine_entry   = generate_verify_oop();\n+    }\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -345,1 +345,1 @@\n-  verify_oop_addr(Address(sp, stack_offset), \"oop\");\n+  verify_oop_addr(Address(sp, stack_offset));\n","filename":"src\/hotspot\/cpu\/riscv\/c1_MacroAssembler_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -400,1 +400,1 @@\n-  __ verify_oop(x10, \"Bad oop\");\n+  __ verify_oop(x10);\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/z\/zBarrierSetAssembler_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -327,1 +327,1 @@\n-  verify_oop(oop_result, \"broken oop in call_VM_base\");\n+  verify_oop_msg(oop_result, \"broken oop in call_VM_base\");\n@@ -365,1 +365,1 @@\n-void MacroAssembler::verify_oop(Register reg, const char* s) {\n+void MacroAssembler::_verify_oop(Register reg, const char* s, const char* file, int line) {\n@@ -373,1 +373,1 @@\n-    ss.print(\"verify_oop: %s: %s\", reg->name(), s);\n+    ss.print(\"verify_oop: %s: %s (%s:%d)\", reg->name(), s, file, line);\n@@ -394,1 +394,1 @@\n-void MacroAssembler::verify_oop_addr(Address addr, const char* s) {\n+void MacroAssembler::_verify_oop_addr(Address addr, const char* s, const char* file, int line) {\n@@ -403,1 +403,1 @@\n-    ss.print(\"verify_oop_addr: %s\", s);\n+    ss.print(\"verify_oop_addr: %s (%s:%d)\", s, file, line);\n@@ -1830,1 +1830,1 @@\n-  verify_oop(s, \"broken oop in encode_heap_oop\");\n+  verify_oop_msg(s, \"broken oop in encode_heap_oop\");\n@@ -1988,1 +1988,1 @@\n-  verify_oop(d, \"broken oop in decode_heap_oop\");\n+  verify_oop_msg(d, \"broken oop in decode_heap_oop\");\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -324,2 +324,13 @@\n-  void verify_oop(Register reg, const char* s = \"broken oop\");\n-  void verify_oop_addr(Address addr, const char* s = \"broken oop addr\");\n+  void _verify_oop(Register reg, const char* s, const char* file, int line);\n+  void _verify_oop_addr(Address addr, const char* s, const char* file, int line);\n+\n+  void _verify_oop_checked(Register reg, const char* s, const char* file, int line) {\n+    if (VerifyOops) {\n+      _verify_oop(reg, s, file, line);\n+    }\n+  }\n+  void _verify_oop_addr_checked(Address reg, const char* s, const char* file, int line) {\n+    if (VerifyOops) {\n+      _verify_oop_addr(reg, s, file, line);\n+    }\n+  }\n@@ -330,0 +341,3 @@\n+#define verify_oop(reg) _verify_oop_checked(reg, \"broken oop \" #reg, __FILE__, __LINE__)\n+#define verify_oop_msg(reg, msg) _verify_oop_checked(reg, \"broken oop \" #reg \", \" #msg, __FILE__, __LINE__)\n+#define verify_oop_addr(addr) _verify_oop_addr_checked(addr, \"broken oop addr \" #addr, __FILE__, __LINE__)\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -3734,1 +3734,3 @@\n-    StubRoutines::_verify_oop_subroutine_entry     = generate_verify_oop();\n+    if (VerifyOops) {\n+      StubRoutines::_verify_oop_subroutine_entry   = generate_verify_oop();\n+    }\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}