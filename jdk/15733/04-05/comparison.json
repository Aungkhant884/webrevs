{"files":[{"patch":"@@ -59,1 +59,0 @@\n-    private static final int MAX_TRANSFER_SIZE = 128*1024;\n@@ -649,8 +648,2 @@\n-                int nwritten = 0;\n-                while (nwritten < avail) {\n-                    int nbyte = Integer.min(avail - nwritten, MAX_TRANSFER_SIZE);\n-                    out.write(buffer, pos, nbyte);\n-                    pos += nbyte;\n-                    nwritten += nbyte;\n-                }\n-                assert pos == count;\n+                out.write(buffer);\n+                pos = count;\n","filename":"src\/java.base\/share\/classes\/java\/io\/BufferedInputStream.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -26,1 +26,2 @@\n- * @summary Ensure {BAIS,BIS}.transferTo do not overrun MaxDirectMemorySize\n+ * @summary Ensure ByteArrayInputStream.transferTo does not cause direct memory\n+ *          to overflow MaxDirectMemorySize\n@@ -30,1 +31,0 @@\n-import java.io.BufferedInputStream;\n@@ -33,1 +33,0 @@\n-import java.io.InputStream;\n@@ -35,0 +34,2 @@\n+import java.nio.channels.Channels;\n+import java.nio.channels.FileChannel;\n@@ -40,1 +41,2 @@\n-import static java.nio.file.StandardCopyOption.*;\n+import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;\n+import static java.nio.file.StandardOpenOption.*;\n@@ -42,2 +44,0 @@\n-import org.junit.jupiter.api.AfterAll;\n-import org.junit.jupiter.api.BeforeAll;\n@@ -50,37 +50,0 @@\n-    static byte[] src;\n-    static Path source;\n-\n-    @BeforeAll\n-    public static void before() throws IOException {\n-        src = new byte[SIZE];\n-        Random rnd = new Random(System.nanoTime());\n-        rnd.nextBytes(src);\n-        source = Files.createTempFile(\"SNA\", \"FU\");\n-        Files.write(source, src);\n-    }\n-\n-    @AfterAll\n-    public static void after() throws IOException {\n-        Files.deleteIfExists(source);\n-    }\n-\n-    @Test\n-    public void bufferedInputStream() throws IOException {\n-        try (InputStream in = new FileInputStream(source.toFile());\n-             BufferedInputStream bis = new BufferedInputStream(in)) {\n-            Path target = Files.createTempFile(\"BIS\", \"target\");\n-            Files.copy(bis, target, REPLACE_EXISTING);\n-            byte[] dst = new byte[SIZE + 1];\n-            try (FileInputStream fis = new FileInputStream(target.toFile())) {\n-                int n = -1;\n-                if ((n = fis.read(dst)) != SIZE)\n-                    throw new RuntimeException(n + \" != \" + SIZE);\n-            }\n-            Files.delete(target);\n-            if (!Arrays.equals(src, 0, SIZE, dst, 0, SIZE))\n-                throw new RuntimeException(\"Arrays are not equal\");\n-        } catch (OutOfMemoryError oome) {\n-            throw new RuntimeException(oome);\n-        }\n-    }\n-\n@@ -89,0 +52,3 @@\n+        byte[] src = new byte[SIZE];\n+        Random rnd = new Random(System.nanoTime());\n+        rnd.nextBytes(src);\n@@ -90,2 +56,3 @@\n-            Path target = Files.createTempFile(\"BAIS\", \"target\");\n-            Files.copy(bais, target, REPLACE_EXISTING);\n+            Path target = Files.createTempFile(\"SNA\", \"FU\");\n+            FileChannel fc = FileChannel.open(target, CREATE, WRITE);\n+            bais.transferTo(Channels.newOutputStream(fc));\n","filename":"test\/jdk\/java\/io\/ByteArrayInputStream\/ChunkedTransferTo.java","additions":12,"deletions":45,"binary":false,"changes":57,"status":"modified"}]}