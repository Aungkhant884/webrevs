{"files":[{"patch":"@@ -27,1 +27,1 @@\n- * @run main\/othervm -XX:MaxDirectMemorySize=5M ChannelStreamsIO\n+ * @run junit\/othervm -XX:MaxDirectMemorySize=5M ChannelStreamsIO\n@@ -30,0 +30,2 @@\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n@@ -42,0 +44,4 @@\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n@@ -46,2 +52,6 @@\n-    public static void main(String[] args) throws IOException {\n-        byte[] x = new byte[SIZE];\n+    static byte[] src;\n+    static Path path;\n+\n+    @BeforeAll\n+    public static void before() throws IOException {\n+        src = new byte[SIZE];\n@@ -49,1 +59,27 @@\n-        rnd.nextBytes(x);\n+        rnd.nextBytes(src);\n+        path = Files.createTempFile(\"SNA\", \"FU\");\n+    }\n+\n+    @AfterEach\n+    public void after() throws IOException {\n+        Files.deleteIfExists(path);\n+    }\n+\n+    @Test\n+    public void write() throws IOException {\n+        try (FileChannel fc = FileChannel.open(path, CREATE, WRITE);\n+             OutputStream out = Channels.newOutputStream(fc)) {\n+            out.write(src);\n+        } catch (OutOfMemoryError oome) {\n+            throw new RuntimeException(oome);\n+        }\n+\n+        try (InputStream in = new FileInputStream(path.toFile())) {\n+            byte[] dst = new byte[SIZE];\n+            int n = -1;\n+            if ((n = in.read(dst)) != SIZE)\n+                throw new RuntimeException(n + \" != \" + SIZE);\n+            if (!Arrays.equals(src, dst))\n+                throw new RuntimeException(\"Arrays are not equal\");\n+        }\n+    }\n@@ -51,19 +87,14 @@\n-        Path file = Files.createTempFile(\"sna\", \"fu\");\n-        try {\n-            try (FileChannel fc = FileChannel.open(file, CREATE, WRITE)) {\n-                try (OutputStream out = Channels.newOutputStream(fc)) {\n-                    out.write(x);\n-                }\n-            }\n-            try (FileChannel fc = FileChannel.open(file, READ)) {\n-                try (InputStream in = Channels.newInputStream(fc)) {\n-                    byte[] y = new byte[SIZE];\n-                    int n = -1;\n-                    if ((n = in.read(y)) != SIZE)\n-                        throw new RuntimeException(\"n \" + n + \" != \" + SIZE);\n-                    if (!Arrays.equals(x, y))\n-                        throw new RuntimeException(\"Arrays are not equal\");\n-                }\n-            }\n-        } finally {\n-            Files.delete(file);\n+    @Test\n+    public void read() throws IOException {\n+        try (OutputStream out = new FileOutputStream(path.toFile());\n+             FileChannel fc = FileChannel.open(path, READ);\n+             InputStream in = Channels.newInputStream(fc)) {\n+            out.write(src);\n+            byte[] dst = new byte[SIZE];\n+            int n = -1;\n+            if ((n = in.read(dst)) != SIZE)\n+                throw new RuntimeException(n + \" != \" + SIZE);\n+            if (!Arrays.equals(src, dst))\n+                throw new RuntimeException(\"Arrays are not equal\");\n+        } catch (OutOfMemoryError oome) {\n+            throw new RuntimeException(oome);\n","filename":"test\/jdk\/java\/nio\/channels\/Channels\/ChannelStreamsIO.java","additions":54,"deletions":23,"binary":false,"changes":77,"status":"modified"}]}