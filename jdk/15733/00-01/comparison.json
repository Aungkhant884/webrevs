{"files":[{"patch":"@@ -49,2 +49,0 @@\n-    static final int DEFAULT_BUFFER_SIZE = 8192;\n-\n@@ -64,2 +62,2 @@\n-     * Reads bytes in DEFAULT_BUFFER_SIZE chunks until all requested bytes\n-     * have been read or end-of-stream is reached.\n+     * Reads bytes in Streams.DEFAULT_BUFFER_SIZE chunks until all requested\n+     * bytes have been read or end-of-stream is reached.\n@@ -68,1 +66,1 @@\n-    private int readFully(ByteBuffer bb) throws IOException {\n+    private int readBytes(ByteBuffer bb) throws IOException {\n@@ -73,1 +71,1 @@\n-            int size = Integer.min(rem, DEFAULT_BUFFER_SIZE);\n+            int size = Integer.min(rem, Streams.DEFAULT_BUFFER_SIZE);\n@@ -97,1 +95,1 @@\n-                return readFully(bb);\n+                return readBytes(bb);\n@@ -100,1 +98,1 @@\n-            return readFully(bb);\n+            return readBytes(bb);\n@@ -171,1 +169,1 @@\n-                                DEFAULT_BUFFER_SIZE);\n+                                Streams.DEFAULT_BUFFER_SIZE);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/ChannelInputStream.java","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-            bb.limit(pos + Integer.min(rem, ChannelInputStream.DEFAULT_BUFFER_SIZE));\n+            bb.limit(pos + Integer.min(rem, Streams.DEFAULT_BUFFER_SIZE));\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/ChannelOutputStream.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,3 @@\n+    \/\/ Size to which buffers are clamped when reading and writing.\n+    static final int DEFAULT_BUFFER_SIZE = 8192;\n+\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/Streams.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8316156\n+ * @summary Ensure Channel{In,Out}putStreams do not overrun MaxDirectMemorySize\n+ * @run main\/othervm -XX:MaxDirectMemorySize=5M ChannelStreamsIO\n+ *\/\n+\n+import java.io.InputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.channels.Channels;\n+import java.nio.channels.FileChannel;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Random;\n+\n+import static java.nio.file.StandardOpenOption.*;\n+\n+public class ChannelStreamsIO {\n+    \/\/ this value must exceed MaxDirectMemorySize\n+    private static final int SIZE = 10*1024*1024;\n+\n+    public static void main(String[] args) throws IOException {\n+        byte[] x = new byte[SIZE];\n+        Random rnd = new Random(System.nanoTime());\n+        rnd.nextBytes(x);\n+\n+        Path file = Files.createTempFile(\"sna\", \"fu\");\n+        try {\n+            try (FileChannel fc = FileChannel.open(file, CREATE, WRITE)) {\n+                try (OutputStream out = Channels.newOutputStream(fc)) {\n+                    out.write(x);\n+                }\n+            }\n+            try (FileChannel fc = FileChannel.open(file, READ)) {\n+                try (InputStream in = Channels.newInputStream(fc)) {\n+                    byte[] y = new byte[SIZE];\n+                    int n = -1;\n+                    if ((n = in.read(y)) != SIZE)\n+                        throw new RuntimeException(\"n \" + n + \" != \" + SIZE);\n+                    if (!Arrays.equals(x, y))\n+                        throw new RuntimeException(\"Arrays are not equal\");\n+                }\n+            }\n+        } finally {\n+            Files.delete(file);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/channels\/Channels\/ChannelStreamsIO.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -1,57 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n- * @bug 8316156\n- * @summary Ensure Channels.newOutputStream.write doe not overrun max memory\n- * @run main\/othervm -XX:MaxDirectMemorySize=5M WriteFullyMemorySize\n- *\/\n-\n-import java.io.ByteArrayInputStream;\n-import java.io.IOException;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.StandardCopyOption;\n-import java.util.Arrays;\n-import java.util.Random;\n-\n-public class WriteFullyMemorySize {\n-    \/\/ this value must exceed MaxDirectMemorySize\n-    private static final int SIZE = 10*1024*1024;\n-\n-    public static void main(String[] args) throws IOException {\n-        byte[] b = new byte[SIZE];\n-        Random rnd = new Random(System.nanoTime());\n-        rnd.nextBytes(b);\n-        ByteArrayInputStream bais = new ByteArrayInputStream(b);\n-        Path target = Files.createTempFile(\"sna\", \"fu\");\n-        try {\n-            Files.copy(bais, target, StandardCopyOption.REPLACE_EXISTING);\n-            byte[] res = Files.readAllBytes(target);\n-            if (!Arrays.equals(b, res))\n-                throw new RuntimeException(\"Arrays are not equal\");\n-        } finally {\n-            Files.delete(target);\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/nio\/channels\/Channels\/WriteFullyMemorySize.java","additions":0,"deletions":57,"binary":false,"changes":57,"status":"deleted"}]}