{"files":[{"patch":"@@ -62,2 +62,1 @@\n-     * Reads bytes in Streams.DEFAULT_BUFFER_SIZE chunks until all requested\n-     * bytes have been read or end-of-stream is reached.\n+     * Reads at most Streams.DEFAULT_BUFFER_SIZE bytes into the given buffer.\n@@ -67,1 +66,0 @@\n-        int nread = 0;\n@@ -70,15 +68,5 @@\n-        while (rem > 0) {\n-            int size = Integer.min(rem, Streams.DEFAULT_BUFFER_SIZE);\n-            bb.limit(pos + size);\n-            int n = ch.read(bb);\n-            if (n < 0) {\n-                \/\/ EOF\n-                if (nread == 0)\n-                    nread = -1;\n-                break;\n-            }\n-            nread += n;\n-            pos += n;\n-            rem -=n;\n-        }\n-        return nread;\n+        if (rem <= 0)\n+            return 0;\n+\n+        bb.limit(pos + Integer.min(rem, Streams.DEFAULT_BUFFER_SIZE));\n+        return ch.read(bb);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/ChannelInputStream.java","additions":6,"deletions":18,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-    private static final int SIZE = 10*1024*1024;\n+    private static final int SIZE = 10_000_000;\n@@ -94,0 +94,1 @@\n+            int nread = 0;\n@@ -95,2 +96,4 @@\n-            if ((n = in.read(dst)) != SIZE)\n-                throw new RuntimeException(n + \" != \" + SIZE);\n+            while ((n = in.read(dst, nread, SIZE - nread)) > 0)\n+                nread += n;\n+            if (nread != SIZE)\n+                throw new RuntimeException(nread + \" != \" + SIZE);\n","filename":"test\/jdk\/java\/nio\/channels\/Channels\/ChannelStreamsIO.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"}]}