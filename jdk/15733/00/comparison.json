{"files":[{"patch":"@@ -49,1 +49,1 @@\n-    private static final int DEFAULT_BUFFER_SIZE = 8192;\n+    static final int DEFAULT_BUFFER_SIZE = 8192;\n@@ -63,0 +63,26 @@\n+    \/*\n+     * Reads bytes in DEFAULT_BUFFER_SIZE chunks until all requested bytes\n+     * have been read or end-of-stream is reached.\n+     * If the channel is selectable then it must be configured blocking.\n+     *\/\n+    private int readFully(ByteBuffer bb) throws IOException {\n+        int nread = 0;\n+        int pos = bb.position();\n+        int rem = bb.limit() - pos;\n+        while (rem > 0) {\n+            int size = Integer.min(rem, DEFAULT_BUFFER_SIZE);\n+            bb.limit(pos + size);\n+            int n = ch.read(bb);\n+            if (n < 0) {\n+                \/\/ EOF\n+                if (nread == 0)\n+                    nread = -1;\n+                break;\n+            }\n+            nread += n;\n+            pos += n;\n+            rem -=n;\n+        }\n+        return nread;\n+    }\n+\n@@ -71,1 +97,1 @@\n-                return ch.read(bb);\n+                return readFully(bb);\n@@ -74,1 +100,1 @@\n-            return ch.read(bb);\n+            return readFully(bb);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/ChannelInputStream.java","additions":29,"deletions":3,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,1 +67,4 @@\n-        while (bb.remaining() > 0) {\n+        int pos = bb.position();\n+        int rem = bb.limit() - pos;\n+        while (rem > 0) {\n+            bb.limit(pos + Integer.min(rem, ChannelInputStream.DEFAULT_BUFFER_SIZE));\n@@ -70,1 +73,3 @@\n-                throw new RuntimeException(\"no bytes written\");\n+                throw new IOException(\"no bytes written\");\n+            pos += n;\n+            rem -=n;\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/ChannelOutputStream.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8316156\n+ * @summary Ensure Channels.newOutputStream.write doe not overrun max memory\n+ * @run main\/othervm -XX:MaxDirectMemorySize=5M WriteFullyMemorySize\n+ *\/\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.StandardCopyOption;\n+import java.util.Arrays;\n+import java.util.Random;\n+\n+public class WriteFullyMemorySize {\n+    \/\/ this value must exceed MaxDirectMemorySize\n+    private static final int SIZE = 10*1024*1024;\n+\n+    public static void main(String[] args) throws IOException {\n+        byte[] b = new byte[SIZE];\n+        Random rnd = new Random(System.nanoTime());\n+        rnd.nextBytes(b);\n+        ByteArrayInputStream bais = new ByteArrayInputStream(b);\n+        Path target = Files.createTempFile(\"sna\", \"fu\");\n+        try {\n+            Files.copy(bais, target, StandardCopyOption.REPLACE_EXISTING);\n+            byte[] res = Files.readAllBytes(target);\n+            if (!Arrays.equals(b, res))\n+                throw new RuntimeException(\"Arrays are not equal\");\n+        } finally {\n+            Files.delete(target);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/channels\/Channels\/WriteFullyMemorySize.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"}]}