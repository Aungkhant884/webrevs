{"files":[{"patch":"@@ -49,2 +49,0 @@\n-    private static final int DEFAULT_BUFFER_SIZE = 8192;\n-\n@@ -63,0 +61,14 @@\n+    \/*\n+     * Reads at most Streams.DEFAULT_BUFFER_SIZE bytes into the given buffer.\n+     * If the channel is selectable then it must be configured blocking.\n+     *\/\n+    private int readBytes(ByteBuffer bb) throws IOException {\n+        int pos = bb.position();\n+        int rem = bb.limit() - pos;\n+        if (rem <= 0)\n+            return 0;\n+\n+        bb.limit(pos + Integer.min(rem, Streams.DEFAULT_BUFFER_SIZE));\n+        return ch.read(bb);\n+    }\n+\n@@ -71,1 +83,1 @@\n-                return ch.read(bb);\n+                return readBytes(bb);\n@@ -74,1 +86,1 @@\n-            return ch.read(bb);\n+            return readBytes(bb);\n@@ -145,1 +157,1 @@\n-                                DEFAULT_BUFFER_SIZE);\n+                                Streams.DEFAULT_BUFFER_SIZE);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/ChannelInputStream.java","additions":17,"deletions":5,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,1 +67,4 @@\n-        while (bb.remaining() > 0) {\n+        int pos = bb.position();\n+        int rem = bb.limit() - pos;\n+        while (rem > 0) {\n+            bb.limit(pos + Integer.min(rem, Streams.DEFAULT_BUFFER_SIZE));\n@@ -70,1 +73,3 @@\n-                throw new RuntimeException(\"no bytes written\");\n+                throw new IOException(\"no bytes written\");\n+            pos += n;\n+            rem -=n;\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/ChannelOutputStream.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,3 @@\n+    \/\/ Size to which buffers are clamped when reading and writing.\n+    static final int DEFAULT_BUFFER_SIZE = 8192;\n+\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/Streams.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8316156\n+ * @summary Ensure Channel{In,Out}putStreams do not overrun MaxDirectMemorySize\n+ * @run junit\/othervm -XX:MaxDirectMemorySize=5M ChannelStreamsIO\n+ *\/\n+\n+import java.io.FileInputStream;\n+import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.channels.Channels;\n+import java.nio.channels.FileChannel;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Random;\n+\n+import static java.nio.file.StandardOpenOption.*;\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+public class ChannelStreamsIO {\n+    \/\/ this value must exceed MaxDirectMemorySize\n+    private static final int SIZE = 10_000_000;\n+\n+    static byte[] src;\n+    static Path path;\n+\n+    @BeforeAll\n+    public static void before() throws IOException {\n+        src = new byte[SIZE];\n+        Random rnd = new Random(System.nanoTime());\n+        rnd.nextBytes(src);\n+        path = Files.createTempFile(\"SNA\", \"FU\");\n+    }\n+\n+    @AfterEach\n+    public void after() throws IOException {\n+        Files.deleteIfExists(path);\n+    }\n+\n+    @Test\n+    public void write() throws IOException {\n+        try (FileChannel fc = FileChannel.open(path, CREATE, WRITE);\n+             OutputStream out = Channels.newOutputStream(fc)) {\n+            out.write(src);\n+        } catch (OutOfMemoryError oome) {\n+            throw new RuntimeException(oome);\n+        }\n+\n+        try (InputStream in = new FileInputStream(path.toFile())) {\n+            byte[] dst = new byte[SIZE];\n+            int n = -1;\n+            if ((n = in.read(dst)) != SIZE)\n+                throw new RuntimeException(n + \" != \" + SIZE);\n+            if (!Arrays.equals(src, dst))\n+                throw new RuntimeException(\"Arrays are not equal\");\n+        }\n+    }\n+\n+    @Test\n+    public void read() throws IOException {\n+        try (OutputStream out = new FileOutputStream(path.toFile());\n+             FileChannel fc = FileChannel.open(path, READ);\n+             InputStream in = Channels.newInputStream(fc)) {\n+            out.write(src);\n+            byte[] dst = new byte[SIZE];\n+            int nread = 0;\n+            int n = -1;\n+            while ((n = in.read(dst, nread, SIZE - nread)) > 0)\n+                nread += n;\n+            if (nread != SIZE)\n+                throw new RuntimeException(nread + \" != \" + SIZE);\n+            if (!Arrays.equals(src, dst))\n+                throw new RuntimeException(\"Arrays are not equal\");\n+        } catch (OutOfMemoryError oome) {\n+            throw new RuntimeException(oome);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/nio\/channels\/Channels\/ChannelStreamsIO.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"}]}