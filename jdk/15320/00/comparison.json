{"files":[{"patch":"@@ -91,1 +91,1 @@\n-     * returning the <i>prototypical<\/i> type for an element\n+     * returning the <dfn>{@index \"prototypical type\"}<\/dfn> for an element\n@@ -101,0 +101,6 @@\n+     * Otherwise, for a non-generic class or interface, the\n+     * prototypical type mirror corresponds to a use of the type.\n+     * None of the components of the prototypical type are annotated,\n+     * including the prototypical type itself.\n+     *\n+     * @apiNote\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/element\/TypeElement.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -117,6 +117,2 @@\n- * prototypical type.  (If a class or interface is generic, its\n- * prototypical type mirror is parameterized with type arguments\n- * matching the type variables of the declaration, all\n- * unannotated. Otherwise, for a non-generic class or interface, the\n- * prototypical type mirror corresponds to an unannotated use of the\n- * type.)  Conversely, in general, many types can map to the same\n+ * {@linkplain javax.lang.model.element.TypeElement#asType() prototypical type}.\n+ * Conversely, in general, many types can map to the same\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/package-info.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"}]}