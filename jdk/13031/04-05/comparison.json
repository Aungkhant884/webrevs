{"files":[{"patch":"@@ -2995,0 +2995,1 @@\n+        \/\/ Calculate how many days are in the first week\n@@ -2998,1 +2999,1 @@\n-            daysInFirstWeek = (7 - jan1Dow) + getFirstDayOfWeek();\n+            daysInFirstWeek = 7 - jan1Dow + getFirstDayOfWeek();\n@@ -3002,0 +3003,3 @@\n+        \/\/ Calculate the end day of the first week\n+        int endDow = getFirstDayOfWeek() - 1 == 0\n+                ? 7 : getFirstDayOfWeek() - 1;\n@@ -3004,1 +3008,1 @@\n-                !dayInMinWeek(internalGet(DAY_OF_WEEK), jan1Dow, getFirstDayOfWeek() - 1);\n+                !dayInMinWeek(internalGet(DAY_OF_WEEK), jan1Dow, endDow);\n@@ -3008,1 +3012,3 @@\n-     * Determines if the specified day exists in the minimum week.\n+     * Given the first day and last day of a week, this method determines\n+     * if the specified day exists in the minimum week.\n+     * This method expects all parameters to be passed in as DAY_OF_WEEK values.\n@@ -3012,0 +3018,3 @@\n+     *\n+     * @throws IllegalArgumentException if either startDay or endDay are not between\n+     * 1 and 7 inclusive (Calendar.SUNDAY to Calendar.SATURDAY)\n@@ -3014,2 +3023,4 @@\n-        endDay = endDay == 0\n-                ? 7 : endDay;\n+        if (endDay > 7 || endDay < 1 || startDay > 7 || startDay < 1) {\n+            throw new IllegalArgumentException(\"Start day or end day is not \" +\n+                    \"a valid day of the week\");\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/util\/GregorianCalendar.java","additions":16,"deletions":5,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-    static Calendar.Builder GREGORIAN_BUILDER = new Builder()\n+    private static final Builder GREGORIAN_BUILDER = new Builder()\n","filename":"test\/jdk\/java\/util\/Calendar\/RollFromLastToFirstWeek.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}