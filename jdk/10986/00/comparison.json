{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,1 @@\n-\/\/ TODO: this test is far too slow\n-\n+import java.util.Arrays;\n@@ -41,2 +40,0 @@\n-import java.util.concurrent.RejectedExecutionException;\n-import java.util.concurrent.ScheduledExecutorService;\n@@ -44,0 +41,1 @@\n+import static java.lang.Thread.State.*;\n@@ -45,2 +43,0 @@\n-import org.testng.annotations.AfterClass;\n-import org.testng.annotations.BeforeClass;\n@@ -59,23 +55,0 @@\n-    private ScheduledExecutorService scheduledExecutor;\n-\n-    @BeforeClass\n-    public void setup() {\n-        scheduledExecutor = Executors.newScheduledThreadPool(1);\n-    }\n-\n-    @AfterClass\n-    public void teardown() {\n-        scheduledExecutor.shutdown();\n-    }\n-\n-    \/**\n-     * Schedule the given executor service to be shutdown abruptly after the given\n-     * delay, in seconds.\n-     *\/\n-    private void scheduleShutdownNow(ExecutorService executor, int delayInSeconds) {\n-        scheduledExecutor.schedule(() -> {\n-            executor.shutdownNow();\n-            return null;\n-        }, delayInSeconds, TimeUnit.SECONDS);\n-    }\n-\n@@ -99,3 +72,1 @@\n-        scheduleShutdownNow(executor, 5);\n-        try {\n-            \/\/ submit long running task, the task should be cancelled\n+        try (executor) {\n@@ -103,0 +74,3 @@\n+\n+            \/\/ shutdownNow when main thread waits in ForkJoinTask.get\n+            onWait(\"java.util.concurrent.ForkJoinTask.get\", executor::shutdownNow);\n@@ -105,2 +79,2 @@\n-                assertTrue(false);\n-            } catch (ExecutionException | RejectedExecutionException e) {\n+                fail();\n+            } catch (ExecutionException | CancellationException e) {\n@@ -109,2 +83,0 @@\n-        } finally {\n-            executor.shutdown();\n@@ -120,3 +92,1 @@\n-        scheduleShutdownNow(executor, 5);\n-        try {\n-            \/\/ submit long running task, the task should be cancelled\n+        try (executor) {\n@@ -124,0 +94,3 @@\n+\n+            \/\/ shutdownNow when main thread waits in ForkJoinTask.get\n+            onWait(\"java.util.concurrent.ForkJoinTask.get\", executor::shutdownNow);\n@@ -126,2 +99,2 @@\n-                assertTrue(false);\n-            } catch (ExecutionException | RejectedExecutionException e) {\n+                fail();\n+            } catch (ExecutionException | CancellationException e) {\n@@ -130,2 +103,0 @@\n-        } finally {\n-            executor.shutdown();\n@@ -141,3 +112,3 @@\n-        scheduleShutdownNow(executor, 5);\n-        try {\n-            \/\/ execute long running tasks\n+        try (executor) {\n+            \/\/ shutdownNow when main thread waits in ForkJoinTask.quietlyJoin\n+            onWait(\"java.util.concurrent.ForkJoinTask.quietlyJoin\", executor::shutdownNow);\n@@ -149,1 +120,1 @@\n-                    assertTrue(false);\n+                    fail();\n@@ -154,2 +125,0 @@\n-        } finally {\n-            executor.shutdown();\n@@ -162,1 +131,1 @@\n-    @Test(dataProvider = \"executors\")\n+    @Test(dataProvider = \"executors\", enabled = false)\n@@ -165,2 +134,3 @@\n-        scheduleShutdownNow(executor, 5);\n-        try {\n+        try (executor) {\n+            \/\/ shutdownNow when main thread waits in ForkJoinTask.get\n+            onWait(\"java.util.concurrent.ForkJoinTask.get\", executor::shutdownNow);\n@@ -168,1 +138,0 @@\n-                \/\/ execute long running tasks\n@@ -170,2 +139,2 @@\n-                assertTrue(false);\n-            } catch (ExecutionException | RejectedExecutionException e) {\n+                fail();\n+            } catch (ExecutionException e) {\n@@ -174,2 +143,0 @@\n-        } finally {\n-            executor.shutdown();\n@@ -178,0 +145,42 @@\n+\n+    \/**\n+     * Runs the given action when the current thread is sampled as waiting (timed or\n+     * untimed) at the given location. The location takes the form \"{@code c.m}\" where\n+     * {@code c} is the fully qualified class name and {@code m} is the method name.\n+     *\/\n+    private void onWait(String location, Runnable action) {\n+        int index = location.lastIndexOf('.');\n+        String className = location.substring(0, index);\n+        String methodName = location.substring(index + 1);\n+        Thread target = Thread.currentThread();\n+        var thread = new Thread(() -> {\n+            try {\n+                boolean found = false;\n+                while (!found) {\n+                    Thread.State state = target.getState();\n+                    assertTrue(state != TERMINATED);\n+                    if ((state == WAITING || state == TIMED_WAITING)\n+                            && contains(target.getStackTrace(), className, methodName)) {\n+                        found = true;\n+                    } else {\n+                        Thread.sleep(20);\n+                    }\n+                }\n+                action.run();\n+            } catch (Exception e) {\n+                e.printStackTrace();\n+            }\n+        });\n+        thread.setDaemon(true);\n+        thread.start();\n+    }\n+\n+    \/**\n+     * Returns true if the given stack trace contains an element for the given class\n+     * and method name.\n+     *\/\n+    private boolean contains(StackTraceElement[] stack, String className, String methodName) {\n+        return Arrays.stream(stack)\n+                .anyMatch(e -> className.equals(e.getClassName())\n+                        && methodName.equals(e.getMethodName()));\n+    }\n","filename":"test\/jdk\/java\/util\/concurrent\/forkjoin\/AsyncShutdownNow.java","additions":67,"deletions":58,"binary":false,"changes":125,"status":"modified"}]}