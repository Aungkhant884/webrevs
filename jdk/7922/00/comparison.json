{"files":[{"patch":"@@ -141,1 +141,1 @@\n-      if (obj->is_instance() && InstanceKlass::cast(obj->klass())->is_reference_instance_klass()) {\n+      if (obj->is_instanceRef()) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCMarker.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-  InstanceClassLoaderKlass(const ClassFileParser& parser) : InstanceKlass(parser, InstanceKlass::_kind_class_loader, ID) {}\n+  InstanceClassLoaderKlass(const ClassFileParser& parser) : InstanceKlass(parser, ID) {}\n","filename":"src\/hotspot\/share\/oops\/instanceClassLoaderKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -445,2 +445,1 @@\n-    }\n-    else if (is_class_loader(class_name, parser)) {\n+    } else if (is_class_loader(class_name, parser)) {\n@@ -451,1 +450,1 @@\n-      ik = new (loader_data, size, THREAD) InstanceKlass(parser, InstanceKlass::_kind_other);\n+      ik = new (loader_data, size, THREAD) InstanceKlass(parser);\n@@ -489,1 +488,1 @@\n-InstanceKlass::InstanceKlass(const ClassFileParser& parser, unsigned kind, KlassID id) :\n+InstanceKlass::InstanceKlass(const ClassFileParser& parser, KlassID id) :\n@@ -504,1 +503,0 @@\n-  set_kind(kind);\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -139,1 +139,1 @@\n-  InstanceKlass(const ClassFileParser& parser, unsigned kind, KlassID id = ID);\n+  InstanceKlass(const ClassFileParser& parser, KlassID id = ID);\n@@ -232,7 +232,0 @@\n-  \/\/ This can be used to quickly discriminate among the four kinds of\n-  \/\/ InstanceKlass. This should be an enum (?)\n-  static const unsigned _kind_other        = 0; \/\/ concrete InstanceKlass\n-  static const unsigned _kind_reference    = 1; \/\/ InstanceRefKlass\n-  static const unsigned _kind_class_loader = 2; \/\/ InstanceClassLoaderKlass\n-  static const unsigned _kind_mirror       = 3; \/\/ InstanceMirrorKlass\n-\n@@ -240,1 +233,0 @@\n-  u1              _kind;                          \/\/ kind of InstanceKlass\n@@ -790,9 +782,0 @@\n-private:\n-\n-  void set_kind(unsigned kind) {\n-    _kind = (u1)kind;\n-  }\n-\n-  bool is_kind(unsigned desired) const {\n-    return _kind == (u1)desired;\n-  }\n@@ -801,7 +784,0 @@\n-\n-  \/\/ Other is anything that is not one of the more specialized kinds of InstanceKlass.\n-  bool is_other_instance_klass() const        { return is_kind(_kind_other); }\n-  bool is_reference_instance_klass() const    { return is_kind(_kind_reference); }\n-  bool is_mirror_instance_klass() const       { return is_kind(_kind_mirror); }\n-  bool is_class_loader_instance_klass() const { return is_kind(_kind_class_loader); }\n-\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":1,"deletions":25,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-  InstanceMirrorKlass(const ClassFileParser& parser) : InstanceKlass(parser, InstanceKlass::_kind_mirror, ID) {}\n+  InstanceMirrorKlass(const ClassFileParser& parser) : InstanceKlass(parser, ID) {}\n@@ -63,1 +63,1 @@\n-    assert(InstanceKlass::cast(k)->is_mirror_instance_klass(), \"cast to InstanceMirrorKlass\");\n+    assert(k->is_mirror_instance_klass(), \"cast to InstanceMirrorKlass\");\n","filename":"src\/hotspot\/share\/oops\/instanceMirrorKlass.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -90,2 +90,1 @@\n-    guarantee(next->is_instance(), \"next field should be an instance\");\n-    guarantee(InstanceKlass::cast(next->klass())->is_reference_instance_klass(), \"next field verify failed\");\n+    guarantee(next->is_instanceRef(), \"next field verify failed\");\n","filename":"src\/hotspot\/share\/oops\/instanceRefKlass.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-  InstanceRefKlass(const ClassFileParser& parser) : InstanceKlass(parser, InstanceKlass::_kind_reference, ID) {}\n+  InstanceRefKlass(const ClassFileParser& parser) : InstanceKlass(parser, ID) {}\n","filename":"src\/hotspot\/share\/oops\/instanceRefKlass.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -617,12 +617,10 @@\n-  inline  bool is_instance_klass()            const { return assert_same_query(\n-                                                      layout_helper_is_instance(layout_helper()),\n-                                                      is_instance_klass_slow()); }\n-  inline  bool is_array_klass()               const { return assert_same_query(\n-                                                    layout_helper_is_array(layout_helper()),\n-                                                    is_array_klass_slow()); }\n-  inline  bool is_objArray_klass()            const { return assert_same_query(\n-                                                    layout_helper_is_objArray(layout_helper()),\n-                                                    is_objArray_klass_slow()); }\n-  inline  bool is_typeArray_klass()           const { return assert_same_query(\n-                                                    layout_helper_is_typeArray(layout_helper()),\n-                                                    is_typeArray_klass_slow()); }\n+\n+  bool is_instance_klass()              const { return assert_same_query(_id <= InstanceClassLoaderKlassID, is_instance_klass_slow()); }\n+  \/\/ Other is anything that is not one of the more specialized kinds of InstanceKlass.\n+  bool is_other_instance_klass()        const { return _id == InstanceKlassID; }\n+  bool is_reference_instance_klass()    const { return _id == InstanceRefKlassID; }\n+  bool is_mirror_instance_klass()       const { return _id == InstanceMirrorKlassID; }\n+  bool is_class_loader_instance_klass() const { return _id == InstanceClassLoaderKlassID; }\n+  bool is_array_klass()                 const { return assert_same_query( _id >= TypeArrayKlassID, is_array_klass_slow()); }\n+  bool is_objArray_klass()              const { return assert_same_query( _id == ObjArrayKlassID,  is_objArray_klass_slow()); }\n+  bool is_typeArray_klass()             const { return assert_same_query( _id == TypeArrayKlassID, is_typeArray_klass_slow()); }\n","filename":"src\/hotspot\/share\/oops\/klass.hpp","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -137,4 +137,5 @@\n-bool oopDesc::is_instance_noinline()          const { return is_instance();            }\n-bool oopDesc::is_array_noinline()             const { return is_array();               }\n-bool oopDesc::is_objArray_noinline()          const { return is_objArray();            }\n-bool oopDesc::is_typeArray_noinline()         const { return is_typeArray();           }\n+bool oopDesc::is_instance_noinline()    const { return is_instance();    }\n+bool oopDesc::is_instanceRef_noinline() const { return is_instanceRef(); }\n+bool oopDesc::is_array_noinline()       const { return is_array();       }\n+bool oopDesc::is_objArray_noinline()    const { return is_objArray();    }\n+bool oopDesc::is_typeArray_noinline()   const { return is_typeArray();   }\n","filename":"src\/hotspot\/share\/oops\/oop.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -110,4 +110,5 @@\n-  inline bool is_instance()            const;\n-  inline bool is_array()               const;\n-  inline bool is_objArray()            const;\n-  inline bool is_typeArray()           const;\n+  inline bool is_instance()    const;\n+  inline bool is_instanceRef() const;\n+  inline bool is_array()       const;\n+  inline bool is_objArray()    const;\n+  inline bool is_typeArray()   const;\n@@ -116,4 +117,5 @@\n-  bool is_instance_noinline()          const;\n-  bool is_array_noinline()             const;\n-  bool is_objArray_noinline()          const;\n-  bool is_typeArray_noinline()         const;\n+  bool is_instance_noinline()    const;\n+  bool is_instanceRef_noinline() const;\n+  bool is_array_noinline()       const;\n+  bool is_objArray_noinline()    const;\n+  bool is_typeArray_noinline()   const;\n","filename":"src\/hotspot\/share\/oops\/oop.hpp","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -198,4 +198,5 @@\n-bool oopDesc::is_instance()  const { return klass()->is_instance_klass();  }\n-bool oopDesc::is_array()     const { return klass()->is_array_klass();     }\n-bool oopDesc::is_objArray()  const { return klass()->is_objArray_klass();  }\n-bool oopDesc::is_typeArray() const { return klass()->is_typeArray_klass(); }\n+bool oopDesc::is_instance()    const { return klass()->is_instance_klass();           }\n+bool oopDesc::is_instanceRef() const { return klass()->is_reference_instance_klass(); }\n+bool oopDesc::is_array()       const { return klass()->is_array_klass();              }\n+bool oopDesc::is_objArray()    const { return klass()->is_objArray_klass();           }\n+bool oopDesc::is_typeArray()   const { return klass()->is_typeArray_klass();          }\n","filename":"src\/hotspot\/share\/oops\/oop.inline.hpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"}]}