{"files":[{"patch":"@@ -60,1 +60,1 @@\n-            throw runtime.exitHotSpotWithMessage(1, \"Cannot use JVMCI compiler: \" + reason);\n+            throw runtime.exitHotSpotWithMessage(1, \"Cannot use JVMCI compiler: %s%n\", reason);\n@@ -91,0 +91,1 @@\n+                String compPropertyName = Option.Compiler.getPropertyName();\n@@ -92,1 +93,1 @@\n-                    factory = new DummyCompilerFactory(\" empty \\\"\\\" is specified\", runtime);\n+                    factory = new DummyCompilerFactory(\"Value of \" + compPropertyName + \" is empty\", runtime);\n@@ -94,1 +95,1 @@\n-                    factory = new DummyCompilerFactory(\"\\\"null\\\" is specified\", runtime);\n+                    factory = new DummyCompilerFactory(\"Value of \" + compPropertyName + \" is \\\"null\\\"\", runtime);\n@@ -104,2 +105,2 @@\n-                                            \"Use -XX:-UseJVMCINativeLibrary when specifying a JVMCI compiler available on a class path with %s.\",\n-                                            compilerName, Option.Compiler.getPropertyName());\n+                                            \"Use -XX:-UseJVMCINativeLibrary when specifying a JVMCI compiler available on a class path with %s.%n\",\n+                                            compilerName, compPropertyName);\n@@ -107,1 +108,1 @@\n-                        throw runtime.exitHotSpotWithMessage(1, \"JVMCI compiler '%s' not found\", compilerName);\n+                        throw runtime.exitHotSpotWithMessage(1, \"JVMCI compiler '%s' specified by %s not found%n\", compilerName, compPropertyName);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot\/src\/jdk\/vm\/ci\/hotspot\/HotSpotJVMCICompilerConfig.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"}]}