{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,2 @@\n+import jdk.internal.access.JavaLangAccess;\n+import jdk.internal.access.SharedSecrets;\n@@ -55,0 +57,2 @@\n+import jdk.internal.util.ArraysSupport;\n+\n@@ -145,0 +149,2 @@\n+        private static final JavaLangAccess JLA = SharedSecrets.getJavaLangAccess();\n+\n@@ -229,16 +235,3 @@\n-            int hash = 0;\n-            boolean foundHigh = false;\n-\n-            int px = offset;\n-            int utfend = px + rawLen;\n-            while (px < utfend) {\n-                int c = (int) rawBytes[px] & 0xff;\n-                if (c > 127) {\n-                    foundHigh = true;\n-                    break;\n-                }\n-                hash = 31 * hash + c;\n-                px++;\n-            }\n-\n-            if (!foundHigh) {\n+            int singleBytes = JLA.countPositives(rawBytes, offset, rawLen);\n+            int hash = ArraysSupport.vectorizedHashCode(rawBytes, offset, singleBytes, 0, ArraysSupport.T_BOOLEAN);\n+            if (singleBytes == rawLen) {\n@@ -251,1 +244,1 @@\n-                int chararr_count = 0;\n+                int chararr_count = singleBytes;\n@@ -253,4 +246,4 @@\n-                for (int i = offset; i < px; i++) {\n-                    int c = (int) rawBytes[i] & 0xff;\n-                    chararr[chararr_count++] = (char) c;\n-                }\n+                JLA.inflateBytesToChars(rawBytes, offset, chararr, 0, singleBytes);\n+\n+                int px = offset + singleBytes;\n+                int utfend = offset + rawLen;\n@@ -334,1 +327,1 @@\n-                              : new String(rawBytes, offset, charLen, StandardCharsets.UTF_8);\n+                              : new String(rawBytes, offset, charLen, StandardCharsets.ISO_8859_1);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry.java","additions":16,"deletions":23,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -75,0 +75,18 @@\n+    @Benchmark\n+    @BenchmarkMode(Mode.Throughput)\n+    public void jdkReadMemberNames(Blackhole bh) {\n+        var cc = Classfile.of();\n+        for (byte[] bytes : classes) {\n+            var cm = cc.parse(bytes);\n+            bh.consume(cm.thisClass().asInternalName());\n+            for (var f : cm.fields()) {\n+                bh.consume(f.fieldName().stringValue());\n+                bh.consume(f.fieldType().stringValue());\n+            }\n+            for (var m : cm.methods()) {\n+                bh.consume(m.methodName().stringValue());\n+                bh.consume(m.methodType().stringValue());\n+            }\n+        }\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/ReadMetadata.java","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"}]}