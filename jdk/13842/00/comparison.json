{"files":[{"patch":"@@ -170,1 +170,0 @@\n-  _special_refs = new (mtClassShared) GrowableArray<SpecialRefInfo>(24 * K, mtClassShared);\n@@ -188,1 +187,0 @@\n-  delete _special_refs;\n@@ -425,7 +423,0 @@\n-  virtual void push_special(SpecialRef type, Ref* ref, intptr_t* p) {\n-    assert(type == _method_entry_ref, \"only special type allowed for now\");\n-    address src_obj = ref->obj();\n-    size_t field_offset = pointer_delta(p, src_obj,  sizeof(u1));\n-    _builder->add_special_ref(type, src_obj, field_offset);\n-  };\n-\n@@ -473,4 +464,0 @@\n-void ArchiveBuilder::add_special_ref(MetaspaceClosure::SpecialRef type, address src_obj, size_t field_offset) {\n-  _special_refs->append(SpecialRefInfo(type, src_obj, field_offset));\n-}\n-\n@@ -675,15 +662,0 @@\n-void ArchiveBuilder::update_special_refs() {\n-  for (int i = 0; i < _special_refs->length(); i++) {\n-    SpecialRefInfo s = _special_refs->at(i);\n-    size_t field_offset = s.field_offset();\n-    address src_obj = s.src_obj();\n-    address dst_obj = get_buffered_addr(src_obj);\n-    intptr_t* src_p = (intptr_t*)(src_obj + field_offset);\n-    intptr_t* dst_p = (intptr_t*)(dst_obj + field_offset);\n-    assert(s.type() == MetaspaceClosure::_method_entry_ref, \"only special type allowed for now\");\n-\n-    assert(*src_p == *dst_p, \"must be a copy\");\n-    ArchivePtrMarker::mark_pointer((address*)dst_p);\n-  }\n-}\n-\n@@ -718,1 +690,0 @@\n-  update_special_refs();\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":0,"deletions":29,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -125,17 +125,0 @@\n-  class SpecialRefInfo {\n-    \/\/ We have a \"special pointer\" of the given _type at _field_offset of _src_obj.\n-    \/\/ See MetaspaceClosure::push_special().\n-    MetaspaceClosure::SpecialRef _type;\n-    address _src_obj;\n-    size_t _field_offset;\n-\n-  public:\n-    SpecialRefInfo() {}\n-    SpecialRefInfo(MetaspaceClosure::SpecialRef type, address src_obj, size_t field_offset)\n-      : _type(type), _src_obj(src_obj), _field_offset(field_offset) {}\n-\n-    MetaspaceClosure::SpecialRef type() const { return _type;         }\n-    address src_obj()                   const { return _src_obj;      }\n-    size_t field_offset()               const { return _field_offset; }\n-  };\n-\n@@ -233,1 +216,0 @@\n-  GrowableArray<SpecialRefInfo>* _special_refs;\n@@ -271,1 +253,0 @@\n-  void update_special_refs();\n@@ -360,1 +341,0 @@\n-  void add_special_ref(MetaspaceClosure::SpecialRef type, address src_obj, size_t field_offset);\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.hpp","additions":0,"deletions":20,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -81,4 +81,0 @@\n-  enum SpecialRef {\n-    _method_entry_ref\n-  };\n-\n@@ -359,13 +355,0 @@\n-  template <class T> void push_method_entry(T** mpp, intptr_t* p) {\n-    Ref* ref = new MSORef<T>(mpp, _default);\n-    push_special(_method_entry_ref, ref, (intptr_t*)p);\n-    if (!ref->keep_after_pushing()) {\n-      delete ref;\n-    }\n-  }\n-\n-  \/\/ This is for tagging special pointers that are not a reference to MetaspaceObj. It's currently\n-  \/\/ used to mark the method entry points in Method\/ConstMethod.\n-  virtual void push_special(SpecialRef type, Ref* obj, intptr_t* p) {\n-    assert(type == _method_entry_ref, \"only special type allowed for now\");\n-  }\n","filename":"src\/hotspot\/share\/memory\/metaspaceClosure.hpp","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"}]}