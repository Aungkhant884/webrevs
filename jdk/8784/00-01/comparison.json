{"files":[{"patch":"@@ -37,1 +37,69 @@\n- * Represents a thread dump that is obtained by parsing JSON text.\n+ * Represents a thread dump that is obtained by parsing JSON text. A thread dump in JSON\n+ * format is generated with the {@code com.sun.management.HotSpotDiagnosticMXBean} API or\n+ * using {@code jcmd <pid> Thread.dump_to_file -format=json <file>}.\n+ *\n+ * <p> The following is an example thread dump that is parsed by this class. Many of the\n+ * objects are collapsed to reduce the size.\n+ *\n+ * <pre>{@code\n+ * {\n+ *   \"threadDump\": {\n+ *     \"processId\": 63406,\n+ *     \"time\": \"2022-05-20T07:37:16.308017Z\",\n+ *     \"runtimeVersion\": \"19\",\n+ *     \"threadContainers\": [\n+ *       {\n+ *         \"container\": \"<root>\",\n+ *         \"parent\": null,\n+ *         \"owner\": null,\n+ *         \"threads\": [\n+ *          {\n+ *            \"tid\": 1,\n+ *            \"name\": \"main\",\n+ *            \"stack\": [...]\n+ *          },\n+ *          {\n+ *            \"tid\": 8,\n+ *            \"name\": \"Reference Handler\",\n+ *            \"stack\": [\n+ *               \"java.base\\\/java.lang.ref.Reference.waitForReferencePendingList(Native Method)\",\n+ *               \"java.base\\\/java.lang.ref.Reference.processPendingReferences(Reference.java:245)\",\n+ *               \"java.base\\\/java.lang.ref.Reference$ReferenceHandler.run(Reference.java:207)\"\n+ *            ]\n+ *          },\n+ *          {\"name\": \"Finalizer\"...},\n+ *          {\"name\": \"Signal Dispatcher\"...},\n+ *          {\"name\": \"Common-Cleaner\"...},\n+ *          {\"name\": \"Monitor Ctrl-Break\"...},\n+ *          {\"name\": \"Notification Thread\"...}\n+ *         ],\n+ *         \"threadCount\": 7\n+ *       },\n+ *       {\n+ *         \"container\": \"ForkJoinPool.commonPool\",\n+ *         \"parent\": \"<root>\",\n+ *         \"owner\": null,\n+ *         \"threads:\": [...],\n+ *         \"threadCount\": 1\n+ *       }\n+ *     ]\n+ *   }\n+ * }\n+ * }<\/pre>\n+ *\n+ * <p> The following is an example using this class to print the tree of thread containers\n+ * (grouping of threads) and the threads in each container:\n+ *\n+ * <pre>{@code\n+ *    void printThreadDump(Path file) throws IOException {\n+ *         String json = Files.readString(file);\n+ *         ThreadDump dump = ThreadDump.parse(json);\n+ *         printThreadContainer(dump.rootThreadContainer(), 0);\n+ *     }\n+ *\n+ *     void printThreadContainer(ThreadDump.ThreadContainer container, int indent) {\n+ *         out.printf(\"%s%s%n\", \" \".repeat(indent), container);\n+ *         container.threads().forEach(t -> out.printf(\"%s%s%n\", \" \".repeat(indent), t.name()));\n+ *         container.children().forEach(c -> printThreadContainer(c, indent + 2));\n+ *     }\n+ * }<\/pre>\n","filename":"test\/lib\/jdk\/test\/lib\/threaddump\/ThreadDump.java","additions":69,"deletions":1,"binary":false,"changes":70,"status":"modified"}]}