{"files":[{"patch":"@@ -2309,4 +2309,4 @@\n-        Node* adj_max = _igvn.intcon((stride_con > 0) ? min_jint : max_jint);\n-        set_ctrl(adj_max, C->root());\n-        Node* old_limit = NULL;\n-        Node* adj_limit = NULL;\n+        Node* underflow_clamp = _igvn.intcon((stride_con > 0) ? min_jint : max_jint);\n+        set_ctrl(underflow_clamp, C->root());\n+        Node* limit_before_underflow = NULL;\n+        Node* prev_limit = NULL;\n@@ -2316,1 +2316,1 @@\n-            limit->in(CMoveNode::IfTrue) == adj_max &&\n+            limit->in(CMoveNode::IfTrue) == underflow_clamp &&\n@@ -2320,7 +2320,4 @@\n-          \/\/ Loop was unrolled before.\n-          \/\/ Optimize the limit to avoid nested CMove:\n-          \/\/ use original limit as old limit.\n-          old_limit = bol->in(1)->in(1);\n-          \/\/ Adjust previous adjusted limit.\n-          adj_limit = limit->in(CMoveNode::IfFalse);\n-          adj_limit = new SubINode(adj_limit, stride);\n+          \/\/ Loop was unrolled before, and had an unrolling protection CMoveI.\n+          \/\/ Use inputs to previous CMoveI for the new one:\n+          prev_limit = limit->in(CMoveNode::IfFalse); \/\/ unpack previous limit with underflow\n+          limit_before_underflow = bol->in(1)->in(1); \/\/ CMoveI -> Bool -> CmpI -> limit_before_underflow\n@@ -2328,2 +2325,3 @@\n-          old_limit = limit;\n-          adj_limit = new SubINode(limit, stride);\n+          \/\/ Loop was not unrolled before, or the limit did not underflow in a previous unrolling.\n+          prev_limit = limit;\n+          limit_before_underflow = limit;\n@@ -2331,7 +2329,29 @@\n-        assert(old_limit != NULL && adj_limit != NULL, \"\");\n-        register_new_node(adj_limit, ctrl); \/\/ adjust amount\n-        Node* adj_cmp = new CmpINode(old_limit, adj_limit);\n-        register_new_node(adj_cmp, ctrl);\n-        Node* adj_bool = new BoolNode(adj_cmp, bt);\n-        register_new_node(adj_bool, ctrl);\n-        new_limit = new CMoveINode(adj_bool, adj_limit, adj_max, TypeInt::INT);\n+        \/\/                           prev_limit   stride\n+        \/\/                                |         |\n+        \/\/ limit_before_underflow  new_limit_with_underflow (SubI)\n+        \/\/                   |        |           |\n+        \/\/                 underflow_cmp          |\n+        \/\/                   |                    |\n+        \/\/                 underflow_bool [lt\/gt] |\n+        \/\/                   |                    |\n+        \/\/                   +----+  +------------+\n+        \/\/                        |  |\n+        \/\/                        |  | underflow_clamp (min_jint\/max_jint)\n+        \/\/                        |  |  |\n+        \/\/                       CMoveINode ([min_jint..hi] \/ [lo..max_jing])\n+        \/\/\n+        assert(limit_before_underflow != NULL && prev_limit != NULL, \"must find them\");\n+        Node* new_limit_with_underflow = new SubINode(prev_limit, stride);\n+        register_new_node(new_limit_with_underflow, ctrl);\n+        \/\/ We must compare with limit_before_underflow, prev_limit may already have underflowed.\n+        Node* underflow_cmp = new CmpINode(limit_before_underflow, new_limit_with_underflow);\n+        register_new_node(underflow_cmp, ctrl);\n+        Node* underflow_bool = new BoolNode(underflow_cmp, bt);\n+        register_new_node(underflow_bool, ctrl);\n+        \/\/ Prevent type from becoming too pessimistic due to type underflow. The new limit\n+        \/\/ may be arbitrarily decreased by unrolling, but still in [min_jint..hi] \/ [lo..max_jint]\n+        const TypeInt* limit_before_underflow_t = _igvn.type(limit_before_underflow)->is_int();\n+        const TypeInt* no_underflow_t = TypeInt::make(stride_con > 0 ? min_jint : limit_before_underflow_t->_lo,\n+                                                      stride_con > 0 ? limit_before_underflow_t->_hi : max_jint,\n+                                                      Type::WidenMax);\n+        new_limit = new CMoveINode(underflow_bool, new_limit_with_underflow, underflow_clamp, no_underflow_t);\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":41,"deletions":21,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -0,0 +1,140 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key stress randomness\n+ * @bug 8299975\n+ * @summary Limit underflow protection CMoveINode in PhaseIdealLoop::do_unroll must also protect type from underflow\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:-TieredCompilation\n+ *                   -XX:CompileCommand=compileonly,compiler.loopopts.TestCMoveLimitType::test*\n+ *                   -XX:CompileCommand=dontinline,compiler.loopopts.TestCMoveLimitType::dontInline\n+ *                   -XX:RepeatCompilation=50 -XX:+StressIGVN\n+ *                   -Xbatch\n+ *                   compiler.loopopts.TestCMoveLimitType\n+*\/\n+\n+\/*\n+ * @test\n+ * @key stress randomness\n+ * @bug 8299975\n+ * @summary Limit underflow protection CMoveINode in PhaseIdealLoop::do_unroll must also protect type from underflow\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:-TieredCompilation\n+ *                   -XX:CompileCommand=compileonly,compiler.loopopts.TestCMoveLimitType::test*\n+ *                   -XX:CompileCommand=dontinline,compiler.loopopts.TestCMoveLimitType::dontInline\n+ *                   -XX:RepeatCompilation=50 -XX:+StressIGVN\n+ *                   -XX:+IgnoreUnrecognizedVMOptions -Xcomp -XX:+TraceLoopOpts\n+ *                   compiler.loopopts.TestCMoveLimitType\n+*\/\n+\n+\/\/ Note: if this test fails too intermittently then increase the RepeatCompilation, at the cost of more runtime.\n+\n+package compiler.loopopts;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n+\n+public class TestCMoveLimitType {\n+    static int[] iArr = new int[10000];\n+\n+    static int test_buf(CharBuffer src, ByteBuffer dst) {\n+        \/\/ code reduced from sun.nio.cs.ext.EUC_JP$Encoder::encodeBufferLoop\n+        int outputSize = 0;\n+        byte[] outputByte;\n+        byte[] tmpBuf = new byte[3];\n+\n+        while (src.hasRemaining()) {\n+            outputByte = tmpBuf;\n+            char c = src.get();\n+            if (c % 3 == 0) {\n+                outputSize = -2147483648; \/\/ int:min -> leads to underflow\n+            } else {\n+                outputByte[0] = (byte) 0;\n+                outputByte[1] = (byte) 1;\n+                outputByte[2] = (byte) 2;\n+                outputSize = 3; \/\/ mostly 3, to get LOOP to unroll (profiling info)\n+            }\n+            if (dst.remaining() < outputSize) {\n+                return 102;\n+            }\n+            \/\/ outputSize: int:min..3 -> Phi limited to 0..2\n+            \/\/ PreMainPost: main loop Phi limited to 1..2\n+            \/\/ Unroll(2):\n+            \/\/ Phi of first iteration is 1..2\n+            \/\/ Phi of second is therefore const 2 -> collapse to constant.\n+            \/\/ Increment it by 1, get const int:3 -> incr value goes into exit condition.\n+            \/\/ This loop cannot take the backedge, the tripcount has collapsed.\n+            \/\/ Exit condition must therefore be constant folded, to make loop without phi disappear.\n+            \/\/ Exit limit is the CMoveI created in do_unroll (original limit -1).\n+            \/\/ It protects agains underflow (outputSize can be int:min).\n+            \/\/ CMoveI's type is int, because it does outputSize-1 -> underflow.\n+            \/\/ CmpI(int:3, int) cannot be constant folded, however.\n+            \/\/ Solution: insert CastII after CMoveI, to prevent type underflow.\n+            \/\/ Then we have CmpI(int:3, CastII(CMoveI)) = CmpI(int:3, int:<=3) = GE\n+            \/\/ -> Bool [lt] constant folds to false -> fixed\n+            for (int i = 0; i < outputSize; i++) { \/\/ LOOP\n+                dst.put(outputByte[i]);\n+            }\n+        }\n+        return 103;\n+    }\n+\n+    static CharBuffer makeSrc() {\n+        CharBuffer src = CharBuffer.allocate(100);\n+        for (int j = 0; j < 100; j++) {\n+            if (j % 31 == 0) {\n+                src.put((char)(0 + (j%3)*3)); \/\/ some 0\n+            } else {\n+                src.put((char)(1 + (j%3)*3)); \/\/ mostly 2\n+            }\n+        }\n+        src.position(0);\n+        return src;\n+    }\n+\n+    static void test_simple(boolean flag) {\n+        int x = flag ? Integer.MIN_VALUE : 3;\n+        dontInline();\n+        \/\/ x has type \"int:min..3\" == \"<=3\"\n+        \/\/ Leads to Peel and 2x Unroll\n+        \/\/ Exit check needs to collapse\n+        for (int i = 0; i < x; i++) {\n+            iArr[i * 2] = 666 + i;\n+        }\n+    }\n+\n+    static void dontInline() {}\n+\n+    static public void main(String[] args) {\n+        for (int i = 0; i < 10_000; i++) {\n+            try {\n+                test_simple(i % 2 == 0);\n+            } catch (Exception e) {}\n+        }\n+        for (int i = 0; i < 6_000; i++) {\n+            CharBuffer src = makeSrc();\n+            ByteBuffer dst = ByteBuffer.allocate(10_000);\n+            test_buf(src, dst); \/\/ call many times -> multiple compilations with different profiling\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestCMoveLimitType.java","additions":140,"deletions":0,"binary":false,"changes":140,"status":"added"}]}