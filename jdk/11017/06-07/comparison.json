{"files":[{"patch":"@@ -190,0 +190,11 @@\n+#ifdef ASSERT\n+void VMError::reenterant_test_hit_stack_limit() {\n+  if (!check_stack_headroom(_thread, _reattempt_required_stack_headroom)) {\n+    char stack_buffer[_reattempt_required_stack_headroom \/ 2];\n+    static_cast<void>(stack_buffer[sizeof(stack_buffer) - 1] = '\\0');\n+    reenterant_test_hit_stack_limit();\n+  }\n+  controlled_crash(14);\n+}\n+#endif \/\/ ASSERT\n+\n@@ -657,0 +668,1 @@\n+#define TEST_REATTEMPT_SECONDARY_CRASH 15\n@@ -671,0 +683,38 @@\n+  \/\/ See corresponding test in test\/runtime\/ErrorHandling\/ReattemptErrorTest.java\n+  STEP_IF(\"test reattempt secondary crash\",\n+      _verbose && TestCrashInErrorHandler == TEST_REATTEMPT_SECONDARY_CRASH)\n+    st->print_cr(\"Will crash now (TestCrashInErrorHandler=%u)...\",\n+      TestCrashInErrorHandler);\n+    controlled_crash(14);\n+\n+  REATTEMPT_STEP_IF(\"test reattempt secondary crash, attempt 2\",\n+      _verbose && TestCrashInErrorHandler == TEST_REATTEMPT_SECONDARY_CRASH)\n+    st->print_cr(\"test reattempt secondary crash. attempt 2\");\n+\n+  REATTEMPT_STEP_IF(\"test reattempt secondary crash, attempt 3\",\n+      _verbose && TestCrashInErrorHandler == TEST_REATTEMPT_SECONDARY_CRASH)\n+    st->print_cr(\"test reattempt secondary crash. attempt 3\");\n+\n+  STEP_IF(\"test reattempt timeout\",\n+      _verbose && TestCrashInErrorHandler == TEST_REATTEMPT_SECONDARY_CRASH)\n+    st->print_cr(\"test reattempt timeout\");\n+    os::infinite_sleep();\n+\n+  REATTEMPT_STEP_WITH_NEW_TIMEOUT_IF(\"test reattempt timeout, attempt 2\",\n+       _verbose && TestCrashInErrorHandler == TEST_REATTEMPT_SECONDARY_CRASH)\n+    st->print_cr(\"test reattempt timeout, attempt 2\");\n+    os::infinite_sleep();\n+\n+  REATTEMPT_STEP_IF(\"test reattempt timeout, attempt 3\",\n+      _verbose && TestCrashInErrorHandler == TEST_REATTEMPT_SECONDARY_CRASH)\n+    st->print_cr(\"test reattempt timeout, attempt 3\");\n+\n+  STEP_IF(\"test reattempt stack headroom\",\n+      _verbose && TestCrashInErrorHandler == TEST_REATTEMPT_SECONDARY_CRASH)\n+    st->print_cr(\"test reattempt stack headroom\");\n+    reenterant_test_hit_stack_limit();\n+\n+  REATTEMPT_STEP_IF(\"test reattempt stack headroom, attempt 2\",\n+      _verbose && TestCrashInErrorHandler == TEST_REATTEMPT_SECONDARY_CRASH)\n+    st->print_cr(\"test reattempt stack headroom, attempt 2\");\n+\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":50,"deletions":0,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -125,0 +125,1 @@\n+  DEBUG_ONLY(static void reenterant_test_hit_stack_limit());\n","filename":"src\/hotspot\/share\/utilities\/vmError.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -372,0 +372,1 @@\n+ -runtime\/ErrorHandling\/ReattemptErrorTest.java \\\n","filename":"test\/hotspot\/jtreg\/TEST.groups","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,117 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/*\n+ * @test\n+ * @summary Check secondary error handling\n+ * @library \/test\/lib\n+ * @requires vm.debug\n+ * @requires os.family != \"windows\"\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @run driver ReattemptErrorTest\n+ *\/\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.regex.Pattern;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class ReattemptErrorTest {\n+\n+    \/\/ 16 seconds for hs_err generation timeout = 4 seconds per step timeout\n+    public static final int ERROR_LOG_TIMEOUT = 16;\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        \/\/ How this works:\n+        \/\/ The test will fault with SIGFPE (ErrorHandlerTest=15) and then, during error handling,\n+        \/\/ three pieces of reattempt logic are tested:\n+        \/\/ * First a step will fault with SIGSEGV. And then reattmempt the step twice. With the first\n+        \/\/   reattempt succeeding. And the second reattempt being skipped.\n+        \/\/ * Second a step will timeout, followed by two reattempts, the first is given a new timeout\n+        \/\/   window so it will be run, but also timeout and the second reattempt is not given a new\n+        \/\/   timeout window and will be skipped.\n+        \/\/ * Third a step will use almost all stack space and then fault with SIGSEGV. After this the\n+        \/\/   procceeding reattempt steps will be skipped because of low stack headroom.\n+\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+            \"-XX:+UnlockDiagnosticVMOptions\",\n+            \"-Xmx100M\",\n+            \"-XX:-CreateCoredumpOnCrash\",\n+            \"-XX:ErrorHandlerTest=15\",\n+            \"-XX:TestCrashInErrorHandler=15\",\n+            \"-XX:ErrorLogTimeout=\" + ERROR_LOG_TIMEOUT,\n+            \"-version\");\n+\n+        OutputAnalyzer output_detail = new OutputAnalyzer(pb.start());\n+\n+        \/\/ we should have crashed with a SIGFPE\n+        output_detail.shouldMatch(\"# A fatal error has been detected by the Java Runtime Environment:.*\");\n+        output_detail.shouldMatch(\"#.+SIGFPE.*\");\n+\n+        \/\/ extract hs-err file\n+        File hs_err_file = HsErrFileUtils.openHsErrFileFromOutput(output_detail);\n+\n+        ArrayList<Pattern> positivePatternlist = new ArrayList<>();\n+        ArrayList<Pattern> negativePatternlist = new ArrayList<>();\n+\n+        \/\/ * First case\n+        \/\/   * First step crashes\n+        positivePatternlist.add(Pattern.compile(\"Will crash now \\\\(TestCrashInErrorHandler=15\\\\)...\"));\n+        positivePatternlist.add(Pattern.compile(\"\\\\[error occurred during error reporting \\\\(test reattempt secondary crash\\\\).*\\\\]\"));\n+        \/\/   * Second attempt succeeds\n+        positivePatternlist.add(Pattern.compile(\"test reattempt secondary crash. attempt 2\"));\n+        \/\/   * Third attempt is skipped\n+        negativePatternlist.add(Pattern.compile(\"test reattempt secondary crash. attempt 3\"));\n+\n+        \/\/ * Second case\n+        \/\/   * First step timeouts\n+        positivePatternlist.add(Pattern.compile(\"test reattempt timeout\"));\n+        positivePatternlist.add(Pattern.compile(\".*timeout occurred during error reporting in step \\\"test reattempt timeout\\\".*\"));\n+        \/\/   * Second attempt with new timeout window is run and timeouts\n+        positivePatternlist.add(Pattern.compile(\"test reattempt timeout, attempt 2\"));\n+        positivePatternlist.add(Pattern.compile(\".*timeout occurred during error reporting in step \\\"test reattempt timeout, attempt 2\\\".*\"));\n+        \/\/   * Third attempt is skipped becuase of previous timeout\n+        negativePatternlist.add(Pattern.compile(\"test reattempt secondary crash, attempt 3\"));\n+        positivePatternlist.add(Pattern.compile(\".*stop reattempt \\\\(test reattempt timeout, attempt 3\\\\) reason: Step time limit reached.*\"));\n+\n+        \/\/ * Third case\n+        \/\/   * First step crashes after using almost all stack space\n+        positivePatternlist.add(Pattern.compile(\"test reattempt stack headroom\"));\n+        positivePatternlist.add(Pattern.compile(\"\\\\[error occurred during error reporting \\\\(test reattempt stack headroom\\\\).*\\\\]\"));\n+        \/\/   * Second step is skip because of limited stack headroom\n+        negativePatternlist.add(Pattern.compile(\"test reattempt stack headroom, attempt 2\"));\n+        positivePatternlist.add(Pattern.compile(\".*stop reattempt \\\\(test reattempt stack headroom, attempt 2\\\\) reason: Stack headroom limit reached.*\"));\n+\n+        Pattern[] positivePatterns = positivePatternlist.toArray(new Pattern[] {});\n+        Pattern[] negativePatterns = negativePatternlist.toArray(new Pattern[] {});\n+\n+        HsErrFileUtils.checkHsErrFileContent(hs_err_file, positivePatterns, negativePatterns, true, false);\n+\n+        System.out.println(\"OK.\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/ReattemptErrorTest.java","additions":117,"deletions":0,"binary":false,"changes":117,"status":"added"}]}