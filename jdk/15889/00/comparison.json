{"files":[{"patch":"@@ -34,1 +34,0 @@\n-import java.nio.file.DirectoryStream;\n@@ -46,0 +45,1 @@\n+import java.util.stream.Stream;\n@@ -613,3 +613,2 @@\n-                    try (DirectoryStream<Path> files =\n-                                 Files.newDirectoryStream(dir)) {\n-                        for (Path p: files) {\n+                    try (Stream<Path> files = Files.list(dir)) {\n+                        for (Path p: files.sorted().toList()) {\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/Config.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8309356\n+ * @summary Read files in includedir in alphanumeric order\n+ * @modules java.security.jgss\/sun.security.krb5\n+ * @library \/test\/lib\n+ * @run main\/othervm IncludeDirOrder\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+import sun.security.krb5.Config;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Collections;\n+import java.util.Random;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n+public class IncludeDirOrder {\n+    public static void main(String[] args) throws Exception {\n+        long seed = new Random().nextLong();\n+        System.out.println(\"Seed is \" + seed);\n+        Random random = new Random(seed);\n+        Path xdir = Path.of(\"x\");\n+        Files.writeString(Path.of(\"main.conf\"), String.format(\"\"\"\n+                includedir %s\n+                [libdefaults]\n+                default_realm = K\n+                \"\"\", xdir.toAbsolutePath()));\n+        Files.createDirectory(xdir);\n+        var list = IntStream.range(10, 20).boxed().collect(Collectors.toList());\n+        Collections.shuffle(list, random);\n+        for (var i : list) {\n+            write(xdir, i);\n+        }\n+        \/\/ K10 should always to read first\n+        System.setProperty(\"java.security.krb5.conf\", \"main.conf\");\n+        Asserts.assertEQ(Config.getInstance().getDefaultRealm(), \"K10\");\n+    }\n+\n+    static void write(Path xdir, int realm) throws IOException {\n+        Files.writeString(xdir.resolve(\"K\" + realm), String.format(\"\"\"\n+                [libdefaults]\n+                default_realm = K%d\n+                \"\"\", realm));\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/krb5\/config\/IncludeDirOrder.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"}]}