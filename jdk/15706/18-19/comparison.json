{"files":[{"patch":"@@ -259,12 +259,7 @@\n- * Syntax validation is applied during symbolic descriptors construction.\n- * For example {@link java.lang.constant.ClassDesc#of} validates the class binary\n- * name or {@link java.lang.constant.ClassDesc#ofDescriptor} validates the class\n- * descriptor syntax.\n- * <p>\n- * Using symbolic descriptors assures the right serial form selection by\n- * the ClassFile API library. For example a class name is stored in its internal\n- * form as constant pool class entry or in a class descriptor form when represents\n- * an array or as constant pool Utf8 entry in a class descriptor form when referenced\n- * from an annotation. The library always converts symbols to the right serial\n- * forms based on the actual context. Following example accepts syntactically\n- * validated class binary name and performs conversion to internal class name.\n+ * Using nominal descriptors assures the right serial form is applied by the\n+ * ClassFile API library based on the actual context. Also these nominal\n+ * descriptors are validated during their construction, so it is not possible to\n+ * create them with invalid content by mistake. Following example pass class\n+ * name to the {@link java.lang.constant.ClassDesc#of} method for validation\n+ * and the library performs automatic conversion to the right internal form of\n+ * the class name when serialized in the constant pool as a class entry.\n@@ -276,5 +271,4 @@\n- * constant pool entries to avoid any form of syntax validation or conversion.\n- * Constant pool entries can be constructed from raw values, with no additional\n- * syntactic checks, conversions or validations. In the following example is\n- * wrongly used binary class name and it is serialized without any validation or\n- * conversion.\n+ * constant pool entries directly. Constant pool entries can be constructed also\n+ * directly from raw values, with no additional conversions or validations.\n+ * Following example uses intentionally wrong class name form and it is applied\n+ * without any validation or conversion. \n@@ -401,7 +395,3 @@\n- * Future JDK releases may introduce new classfile elements, not known at the\n- * development time of a custom transformation code.\n- * To achieve deterministic stability of transformations running on future JDK\n- * releases it is desired to set appropriate response to classfile elements\n- * unknown at the development time.\n- * <p>\n- * Classfile transforms interested in consuming all classfile elements should be\n+ * Custom classfile transformations might be unaware of classfile elements\n+ * introduced by future JDK releases. To achieve deterministic stability,\n+ * classfile transforms interested in consuming all classfile elements should be\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/package-info.java","additions":14,"deletions":24,"binary":false,"changes":38,"status":"modified"}]}