{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -76,0 +76,1 @@\n+    private static final String LJL_CLASSLOADER = \"Ljava\/lang\/ClassLoader;\";\n@@ -600,0 +601,7 @@\n+        \/\/ Put ClassLoader at local variable index 0, used by\n+        \/\/ Class.forName(String, boolean, ClassLoader) calls\n+        mv.visitLdcInsn(Type.getObjectType(dotToSlash(className)));\n+        mv.visitMethodInsn(INVOKEVIRTUAL, JL_CLASS,\n+                \"getClassLoader\", \"()\" + LJL_CLASSLOADER, false);\n+        mv.visitVarInsn(ASTORE, 0);\n+\n@@ -875,1 +883,2 @@\n-         * the Method object for this proxy method.\n+         * the Method object for this proxy method. A class loader is\n+         * anticipated at local variable index 0.\n@@ -921,1 +930,2 @@\n-         * may cause the checked ClassNotFoundException to be thrown.\n+         * may cause the checked ClassNotFoundException to be thrown. A class\n+         * loader is anticipated at local variable index 0.\n@@ -925,0 +935,2 @@\n+            mv.visitInsn(ICONST_0); \/\/ false\n+            mv.visitVarInsn(ALOAD, 0); \/\/ classLoader\n@@ -927,1 +939,3 @@\n-                    \"forName\", \"(Ljava\/lang\/String;)Ljava\/lang\/Class;\", false);\n+                    \"forName\",\n+                    \"(Ljava\/lang\/String;Z\" + LJL_CLASSLOADER + \")Ljava\/lang\/Class;\",\n+                    false);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/ProxyGenerator.java","additions":18,"deletions":4,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.reflect.Proxy;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+\/*\n+ * @test\n+ * @bug 8285401\n+ * @summary Avoid initialization of parameter types in proxy construction\n+ * @run testng LazyInitializationTest\n+ *\/\n+public final class LazyInitializationTest {\n+    private static volatile boolean initialized = false;\n+\n+    interface Intf {\n+        void m(Parameter parameter);\n+    }\n+\n+    static class Parameter {\n+        static {\n+            initialized = true;\n+        }\n+    }\n+\n+    @Test\n+    public void testLazyInitialization() {\n+        Intf value = (Intf) Proxy.newProxyInstance(LazyInitializationTest.class.getClassLoader(),\n+                new Class<?>[]{ Intf.class },\n+                (proxy, method, args) -> null);\n+        Assert.assertFalse(initialized, \"parameter type initialized unnecessarily\");\n+\n+        value.m(new Parameter());\n+        Assert.assertTrue(initialized, \"parameter type initialized after instantiation\");\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/reflect\/Proxy\/LazyInitializationTest.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"}]}