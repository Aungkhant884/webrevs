{"files":[{"patch":"@@ -347,4 +347,20 @@\n-      if( t->isa_rawptr() && C->cfg()->_raw_oops.member(def) ) {\n-        def->dump();\n-        n->dump();\n-        assert(false, \"there should be a oop in OopMap instead of a live raw oop at safepoint\");\n+      if (t->isa_rawptr()) {\n+        ResourceMark rm;\n+        Unique_Node_List worklist;\n+        worklist.push(def);\n+        for (uint i = 0; i < worklist.size(); i++) {\n+          Node* m = worklist.at(i);\n+          if (C->cfg()->_raw_oops.member(m)) {\n+            def->dump();\n+            m->dump();\n+            n->dump();\n+            assert(false, \"there should be an oop in OopMap instead of a live raw oop at safepoint\");\n+          }\n+          \/\/ Check users as well because def might be spilled\n+          for (DUIterator_Fast jmax, j = m->fast_outs(jmax); j < jmax; j++) {\n+            Node* u = m->fast_out(j);\n+            if ((u->is_SpillCopy() && u->in(1) == m) || u->is_Phi()) {\n+              worklist.push(u);\n+            }\n+          }\n+        }\n","filename":"src\/hotspot\/share\/opto\/buildOopMap.cpp","additions":20,"deletions":4,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -5895,0 +5895,5 @@\n+  \/\/ Don't extend live ranges of raw oops\n+  if (least != early && n->is_ConstraintCast() && n->in(1)->bottom_type()->isa_rawptr() &&\n+      !n->bottom_type()->isa_rawptr()) {\n+    least = early;\n+  }\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1575,3 +1575,0 @@\n-  bool is_raw_to_oop_cast = n->is_ConstraintCast() &&\n-                            n->in(1)->bottom_type()->isa_rawptr() &&\n-                            !n->bottom_type()->isa_rawptr();\n@@ -1584,1 +1581,0 @@\n-      !is_raw_to_oop_cast && \/\/ don't extend live ranges of raw oops\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,125 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.vectorapi;\n+\n+import jdk.incubator.vector.IntVector;\n+import jdk.test.lib.Asserts;\n+\n+\/*\n+ * @test\n+ * @bug 8276064 8271600\n+ * @summary Verify that CheckCastPPs with raw oop inputs are not floating below a safepoint.\n+ * @library \/test\/lib\n+ * @modules jdk.incubator.vector\n+ * @run main\/othervm -XX:-TieredCompilation -Xbatch\n+ *                   -XX:CompileCommand=compileonly,compiler.vectorapi.TestRawOopAtSafepoint::test*\n+ *                   -XX:CompileCommand=dontinline,compiler.vectorapi.TestRawOopAtSafepoint::safepoint\n+ *                   compiler.vectorapi.TestRawOopAtSafepoint\n+ *\/\n+public class TestRawOopAtSafepoint {\n+\n+    static int iFld = 42;\n+\n+    public static void safepoint(boolean gc) {\n+        if (gc) {\n+            \/\/ Give the GC a chance to move the IntVector object on the heap\n+            \/\/ and thus invalidate the oop if it's not in the oopMap.\n+            System.gc();\n+        }\n+    }\n+\n+    \/\/ Loop unswitching moves a CheckCastPP out of a loop such that the raw oop\n+    \/\/ input crosses a safepoint. We then SIGSEGV after the GC moved the IntVector\n+    \/\/ object when deferencing the now stale oop.\n+    public static IntVector test1(boolean flag, boolean gc) {\n+        IntVector vector = null;\n+        for (int i = 0; i < 100; i++) {\n+            \/\/ Trigger loop unswitching\n+            if (flag) {\n+                iFld++;\n+            }\n+            \/\/ Allocate an IntVector that will be scalarized in the\n+            \/\/ safepoint debug info but not in the return.\n+            vector = IntVector.zero(IntVector.SPECIES_MAX);\n+            safepoint((i == 99) && gc);\n+        }\n+        return vector;\n+    }\n+\n+    \/\/ Same as test1 but we hit an assert in OopFlow::build_oop_map instead.\n+    public static IntVector test2(boolean flag, boolean gc) {\n+        for (int i = 0; i < 100; i++) {\n+            \/\/ Trigger loop unswitching\n+            if (flag) {\n+                iFld++;\n+            }\n+            IntVector vector = IntVector.zero(IntVector.SPECIES_MAX);\n+            safepoint((i == 99) && gc);\n+            if (flag) {\n+                return vector;\n+            }\n+        }\n+        return IntVector.zero(IntVector.SPECIES_MAX);\n+    }\n+\n+    \/\/ Same as test1 but PhaseIdealLoop::try_sink_out_of_loop moves the CheckCastPP.\n+    public static IntVector test3(boolean flag, boolean gc) {\n+        IntVector vector = null;\n+        for (int i = 0; i < 10; i++) {\n+            vector = IntVector.zero(IntVector.SPECIES_MAX);\n+            safepoint((i == 9) && gc);\n+        }\n+        return vector;\n+    }\n+\n+    \/\/ Same as test2 but PhaseIdealLoop::try_sink_out_of_loop moves the CheckCastPP.\n+    public static IntVector test4(boolean flag, boolean gc) {\n+        IntVector vector = null;\n+        for (int i = 0; i < 2; i++) {\n+            vector = IntVector.zero(IntVector.SPECIES_MAX);\n+            safepoint((i == 9) && gc);\n+        }\n+        return vector;\n+    }\n+\n+    public static void main(String[] args) {\n+        int sum = 0;\n+        for (int i = 0; i < 15_000; ++i) {\n+            boolean flag = ((i % 2) == 0);\n+            boolean gc = (i > 14_500);\n+            IntVector vector1 = test1(flag, gc);\n+            sum += vector1.lane(0);\n+\n+            IntVector vector2 = test2(flag, gc);\n+            sum += vector2.lane(0);\n+\n+            IntVector vector3 = test3(flag, gc);\n+            sum += vector3.lane(0);\n+\n+            IntVector vector4 = test4(flag, gc);\n+            sum += vector4.lane(0);\n+        }\n+        Asserts.assertEQ(sum, 0);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestRawOopAtSafepoint.java","additions":125,"deletions":0,"binary":false,"changes":125,"status":"added"}]}