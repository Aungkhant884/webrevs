{"files":[{"patch":"@@ -28,4 +28,0 @@\n-import java.lang.annotation.ElementType;\n-import java.lang.annotation.Retention;\n-import java.lang.annotation.RetentionPolicy;\n-import java.lang.annotation.Target;\n@@ -37,3 +33,0 @@\n-import java.io.File;\n-\n-import jdk.test.lib.Platform;\n@@ -62,14 +55,5 @@\n-        \/\/ Some VM options like \"-Xint\" may mess with the compiler control for the\n-        \/\/ correctness check. We disable the check in these cases.\n-        boolean use_intp = WB.getBooleanVMFlag(\"UseInterpreter\");\n-        boolean use_comp = WB.getBooleanVMFlag(\"UseCompiler\");\n-        if (use_intp && use_comp) {\n-            for (Method method : klass.getDeclaredMethods()) {\n-                try {\n-                    if (method.isAnnotationPresent(Test.class)) {\n-                        verifyTestMethod(method);\n-                        runTestOnMethod(method);\n-                    }\n-                } catch (Exception e) {\n-                    throw new RuntimeException(\"Test failed in \" + klass.getName() +\n-                            \".\" + method.getName() + \": \" + e.getMessage());\n+        for (Method method : klass.getDeclaredMethods()) {\n+            try {\n+                if (method.isAnnotationPresent(Test.class)) {\n+                    verifyTestMethod(method);\n+                    runTestOnMethod(method);\n@@ -77,0 +61,3 @@\n+            } catch (Exception e) {\n+                throw new RuntimeException(\"Test failed in \" + klass.getName() +\n+                        \".\" + method.getName() + \": \" + e.getMessage());\n@@ -78,2 +65,0 @@\n-        } else {\n-            System.out.println(\"WARNING: Correctness check is skipped due to extra compiler control flags\");\n@@ -123,1 +108,0 @@\n-        assert(WB.getBooleanVMFlag(\"UseCompiler\"));\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/runner\/VectorizationTestRunner.java","additions":8,"deletions":24,"binary":false,"changes":32,"status":"modified"}]}