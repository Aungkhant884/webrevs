{"files":[{"patch":"@@ -0,0 +1,201 @@\n+\/*This test has been modified per scott's mail dated 07th March 03\n+ * Scott wrote:\n+ *\n+ *I don't think any timing is necessary to test this. The key thing to\n+ *test for is how often the renderer is called for.\n+ *\n+ *If I were writing a test for this I would do the following:\n+ *\n+ *Create a custom renderer that has a counter indicating how many times\n+ *it has been configured. Configure a JComboBox with this renderer, set\n+ *the prototype display value and ask for the preferred size. The custom\n+ *renderer should be called only once.\n+ *\n+ * Accordingly this test has been rewritten to check how many times the\n+ * getListCellRendererComponent method is called in the custom renderer\n+ * with setPrototypeDisplayValue(true). It should be called only once.\n+ *\/\n+\/*\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Robot;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Vector;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+import javax.swing.JButton;\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.JList;\n+import javax.swing.JPanel;\n+import javax.swing.ListCellRenderer;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UIManager.LookAndFeelInfo;\n+import javax.swing.UnsupportedLookAndFeelException;\n+\n+import static javax.swing.UIManager.getInstalledLookAndFeels;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4231298\n+ * @summary This testcase tests the RFE 4231298 request, JComboBox Custom\n+ *          Renderer should not be called for non displaying elements if\n+ *          setPrototypeDisplayValue() has been invoked.\n+ * @run main JComboBoxPrototypeDisplayValueTest\n+ *\/\n+public class JComboBoxPrototypeDisplayValueTest {\n+\n+    private static Robot robot;\n+    private static JFrame frame;\n+    private static JComboBox buttonComboBox;\n+    private static volatile int count;\n+\n+    public static void main(String[] args) throws Exception {\n+        robot = new Robot();\n+        robot.setAutoWaitForIdle(true);\n+        robot.setAutoDelay(200);\n+        List<String> lafs = Arrays.stream(getInstalledLookAndFeels())\n+                                  .map(LookAndFeelInfo::getClassName)\n+                                  .collect(Collectors.toList());\n+        for (final String laf : lafs) {\n+            try {\n+                count = 0;\n+                AtomicBoolean lafSetSuccess = new AtomicBoolean(false);\n+                SwingUtilities.invokeAndWait(() -> {\n+                    lafSetSuccess.set(setLookAndFeel(laf));\n+                    if (lafSetSuccess.get()) {\n+                        createUI();\n+                    }\n+                });\n+                if (!lafSetSuccess.get()) {\n+                    continue;\n+                }\n+                robot.waitForIdle();\n+\n+                SwingUtilities\n+                        .invokeAndWait(() -> buttonComboBox.getPreferredSize());\n+\n+                robot.waitForIdle();\n+                if (count > 6) {\n+                    System.out.println(\"Test Failed\");\n+                    throw new RuntimeException(\n+                            \"Custom Renderer got called \" + count + \" times, \" +\n+                            \"even after calling setPrototypeDisplayValue(), \" +\n+                            \"but the expected maximum is 6 times for \" + laf);\n+                } else {\n+                    System.out.println(\"Test Passed for \" + laf);\n+                }\n+            } finally {\n+                SwingUtilities.invokeAndWait(\n+                        JComboBoxPrototypeDisplayValueTest::disposeFrame);\n+            }\n+        }\n+    }\n+\n+    public static void createUI() {\n+        Vector data = new Vector(IntStream.rangeClosed(1, 100).boxed()\n+                                          .map(i -> new JButton(\"\" + i))\n+                                          .collect(Collectors.toList()));\n+        buttonComboBox = new JComboBox(data);\n+        ButtonRenderer renderer = new ButtonRenderer();\n+        buttonComboBox.setRenderer(renderer);\n+        buttonComboBox.setMaximumRowCount(25);\n+\n+        \/\/ New method introduced in Java 1.4\n+        buttonComboBox.setPrototypeDisplayValue(new JButton(\"111111111\"));\n+\n+        frame = new JFrame();\n+        JPanel panel = new JPanel();\n+        panel.add(buttonComboBox);\n+        frame.getContentPane().add(panel);\n+        frame.setSize(200, 100);\n+        frame.setLocationRelativeTo(null);\n+        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n+        frame.setVisible(true);\n+    }\n+\n+    private static boolean setLookAndFeel(String lafName) {\n+        try {\n+            UIManager.setLookAndFeel(lafName);\n+        } catch (UnsupportedLookAndFeelException ignored) {\n+            System.out.println(\"Ignoring Unsupported L&F: \" + lafName);\n+            return false;\n+        } catch (ClassNotFoundException | InstantiationException\n+                | IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return true;\n+    }\n+\n+    private static void disposeFrame() {\n+        if (frame != null) {\n+            frame.dispose();\n+            frame = null;\n+        }\n+    }\n+\n+    \/**\n+     * Custom ListCellRenderer used for the drop down portion and the text\n+     * portion of the ComboBox.\n+     *\/\n+    private static class ButtonRenderer implements ListCellRenderer {\n+        private final Color selectedBackground;\n+        private final Color selectedForeground;\n+        private final Color background;\n+        private final Color foreground;\n+\n+        public ButtonRenderer() {\n+            selectedBackground = Color.BLUE;\n+            selectedForeground = Color.YELLOW;\n+            background = Color.GRAY;\n+            foreground = Color.RED;\n+        }\n+\n+        public Component getListCellRendererComponent(JList list, Object value,\n+                                                      int index,\n+                                                      boolean isSelected,\n+                                                      boolean cellHasFocus) {\n+            JButton button = (JButton) value;\n+            System.out.println(\n+                    \"getListCellRendererComponent index = \" + index + \", \" +\n+                    \"isSelected = \" + isSelected + \", cellHasFocus = \" +\n+                    cellHasFocus);\n+\n+            button.setBackground(isSelected ? selectedBackground : background);\n+            button.setForeground(isSelected ? selectedForeground : foreground);\n+\n+            count++;\n+            System.out.println(\"Value of the Counter is \" + count);\n+\n+            return button;\n+        }\n+\n+    }\n+\n+}\n","filename":"test\/jdk\/javax\/swing\/JComboBox\/4231298\/JComboBoxPrototypeDisplayValueTest.java","additions":201,"deletions":0,"binary":false,"changes":201,"status":"added"}]}