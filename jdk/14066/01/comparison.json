{"files":[{"patch":"@@ -267,0 +267,10 @@\n+ * <li>The <em>maximum integer<\/em> digits is the sum of '0's and '#'s\n+ * prior to the decimal point. The <em>minimum integer<\/em> digits is the\n+ * sum of the '0's prior to the decimal point. The <em>maximum fraction<\/em>\n+ * and <em>minimum fraction<\/em> digits follow the same rules, but apply to the\n+ * digits after the decimal point but before the exponent. For example, the\n+ * following pattern: {@code \"#00.0####E0\"} would have a minimum number of\n+ * integer digits = 2(\"00\") and a maximum number of integer digits = 3(\"#00\"). It\n+ * would have a minimum number of fraction digits = 1(\"0\") and a maximum number of fraction\n+ * digits= 5(\"0####\").\n+ *\n@@ -285,5 +295,19 @@\n- * <li>The number of significant digits in the mantissa is the sum of the\n- * <em>minimum integer<\/em> and <em>maximum fraction<\/em> digits, and is\n- * unaffected by the maximum integer digits.  For example, 12345 formatted with\n- * {@code \"##0.##E0\"} is {@code \"12.3E3\"}. To show all digits, set\n- * the significant digits count to zero.  The number of significant digits\n+ * <li>For a given number, the amount of significant digits in\n+ * the mantissa can be calculated as such\n+ *\n+ * <blockquote><pre>\n+ * <i>Mantissa Digits:<\/i>\n+ *         min(max(Minimum Pattern Digits, Original Number Digits), Maximum Pattern Digits)\n+ * <i>Minimum pattern Digits:<\/i>\n+ *         <i>Minimum Integer Digits<\/i> + <i>Minimum Fraction Digits<\/i>\n+ * <i>Maximum pattern Digits:<\/i>\n+ *         <i>Maximum Integer Digits<\/i> + <i>Maximum Fraction Digits<\/i>\n+ * <i>Original Number Digits:<\/i>\n+ *         The amount of significant digits in the number to be formatted\n+ * <\/pre><\/blockquote>\n+ *\n+ * This means that generally, a mantissa will have up to the combined maximum integer\n+ * and fraction digits, if the original number itself has enough significant digits. However,\n+ * if there are more minimum pattern digits than significant digits in the original number,\n+ * the mantissa will have significant digits that equals the combined\n+ * minimum integer and fraction digits. The number of significant digits\n@@ -292,0 +316,11 @@\n+ * <p>It should be noted, that the integer portion of the mantissa will give\n+ * any excess digits to the fraction portion, whether it be for precision or\n+ * for satisfying the total amount of combined minimum digits.\n+ *\n+ * <p>This behavior can be observed in the following example,\n+ * {@snippet lang=java :\n+ *     DecimalFormat df = new DecimalFormat(\"#000.000##E0\");\n+ *     df.format(12); \/\/ returns \"12.0000E0\"\n+ *     df.format(123456789) \/\/ returns \"1.23456789E8\"\n+ * }\n+ *\n@@ -311,2 +346,2 @@\n- * <p>{@code NaN} is formatted as a string, which typically has a single character\n- * {@code U+FFFD}.  This string is determined by the\n+ * <p>Not a Number({@code NaN}) is formatted as a string, which typically has a\n+ * single character {@code U+FFFD}.  This string is determined by the\n","filename":"src\/java.base\/share\/classes\/java\/text\/DecimalFormat.java","additions":42,"deletions":7,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -0,0 +1,110 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8159023\n+ * @summary Confirm behavior of mantissa for scientific notation in Decimal Format\n+ * @run junit MantissaDigits\n+ *\/\n+\n+import java.text.DecimalFormat;\n+import java.text.DecimalFormatSymbols;\n+import java.util.Locale;\n+import java.util.stream.Stream;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class MantissaDigits {\n+    private static final double[] numbers = {\n+            1.1, 12.1, 123.1, 1234.1, 12345.1, 123456.1,\n+            -1.1, -12.1, -123.1, -1234.1, -12345.1, -123456.1,\n+            1, 12, 123, 1234, 12345, 123456, 1234567,\n+            -1, -12, -123, -1234, -12345, -123456, -1234567,\n+            1.1234, 1.1111, 1.412, 222.333, -771.2222\n+            };\n+    private static final DecimalFormatSymbols dfs = new DecimalFormatSymbols(Locale.US);\n+    private static final String ERRMSG = \"%s formatted with %s gives %s, and \" +\n+            \"significant digit count was %s, but the formula provided %s%n\";\n+    \/\/ Hard coded as 1, since all test patterns only have 1 exponent digit\n+    private static final int EXPONENTDIGITS = 1;\n+\n+    @ParameterizedTest\n+    @MethodSource(\"patterns\")\n+    public void testMantissaDefinition(String pattern, int minDigits, int maxDigits) {\n+        DecimalFormat df = new DecimalFormat(pattern, dfs);\n+        for (double number : numbers) {\n+            \/\/ Count the significant digits in the pre-formatted number\n+            int originalNumDigits = String.valueOf(number)\n+                    .replace(\".\", \"\")\n+                    .replace(\"-\", \"\")\n+                    .length();\n+\n+            if (wholeNumber(number)) {\n+                \/\/ Trailing 0 should not be counted\n+                originalNumDigits--;\n+            }\n+\n+            \/\/ Format the number, then grab the significant\n+            \/\/ digits inside the mantissa\n+            String formattedNum = df.format(number);\n+            int mantissaDigits = formattedNum\n+                    .replace(\".\", \"\")\n+                    .replace(\"E\", \"\")\n+                    .replace(\"-\", \"\")\n+                    .length() - EXPONENTDIGITS;\n+\n+            \/\/ Test the new definition of the Mantissa\n+            Integer calculatedDigits = Math\n+                    .min(Math.max(minDigits, originalNumDigits), maxDigits);\n+            assertEquals(mantissaDigits, calculatedDigits, String.format(ERRMSG,\n+                    number, pattern, formattedNum, mantissaDigits, calculatedDigits));\n+        }\n+    }\n+\n+    private static Boolean wholeNumber(double number) {\n+        return (int) number == number;\n+    }\n+\n+    private static Stream<Arguments> patterns() {\n+        return Stream.of(\n+                Arguments.of(\"#0.0##E0\", 2, 5),\n+                Arguments.of(\"#00.00##E0\", 4, 7),\n+                Arguments.of(\"#0.000##E0\", 4, 7),\n+                Arguments.of(\"#00.000##E0\", 5, 8),\n+                Arguments.of(\"#000.0##E0\", 4, 7),\n+                Arguments.of(\"#000.00##E0\", 5, 8),\n+                Arguments.of(\"#000.000##E0\", 6, 9),\n+                Arguments.of(\"000.000E0\", 6, 6),\n+                Arguments.of(\"#.##E0\", 0, 3),\n+                Arguments.of(\"######.######E0\", 0, 12),\n+                Arguments.of(\"####00.00######E0\", 4, 14)\n+        );\n+    }\n+}\n","filename":"test\/jdk\/java\/text\/Format\/DecimalFormat\/MantissaDigits.java","additions":110,"deletions":0,"binary":false,"changes":110,"status":"added"}]}