{"files":[{"patch":"@@ -34,0 +34,1 @@\n+import java.text.DecimalFormatSymbols;\n@@ -51,0 +52,5 @@\n+    private static final DecimalFormatSymbols dfs = new DecimalFormatSymbols(Locale.US);\n+    private static final String ERRMSG = \"%s formatted with %s gives %s, and \" +\n+            \"significant digit count was %s, but the formula provided %s%n\";\n+    \/\/ Hard coded as 1, since all test patterns only have 1 exponent digit\n+    private static final int EXPONENTDIGITS = 1;\n@@ -54,3 +60,2 @@\n-    public void testMantissaDefinition(String pattern) {\n-        Locale.setDefault(Locale.ENGLISH);\n-        DecimalFormat df = new DecimalFormat(pattern);\n+    public void testMantissaDefinition(String pattern, int minDigits, int maxDigits) {\n+        DecimalFormat df = new DecimalFormat(pattern, dfs);\n@@ -76,10 +81,1 @@\n-                    .length() - 1;\n-\n-            \/\/ Count the zeroes and hash symbols in the\n-            \/\/ pattern, to be used in the mathematical expression\n-            int zeroes = (int) (pattern.chars()\n-                    \/\/ ignore exponent zero\n-                    .filter(ch -> ch == '0').count() - 1);\n-            int hashes = (int) pattern.chars()\n-                    .filter(ch -> ch == '#').count();\n-\n+                    .length() - EXPONENTDIGITS;\n@@ -89,5 +85,3 @@\n-                    .min(Math.max(zeroes, originalNumDigits), (hashes+zeroes));\n-            assertEquals(mantissaDigits, calculatedDigits,\n-                    String.format(\"%s formatted with %s gives %s, and significant \" +\n-                            \"digit count was %s, but the formula provided %s%n\",\n-                            number, pattern, formattedNum, mantissaDigits, calculatedDigits));\n+                    .min(Math.max(minDigits, originalNumDigits), maxDigits);\n+            assertEquals(mantissaDigits, calculatedDigits, String.format(ERRMSG,\n+                    number, pattern, formattedNum, mantissaDigits, calculatedDigits));\n@@ -103,11 +97,11 @@\n-                Arguments.of(\"#0.0##E0\"),\n-                Arguments.of(\"#00.00##E0\"),\n-                Arguments.of(\"#0.000##E0\"),\n-                Arguments.of(\"#00.000##E0\"),\n-                Arguments.of(\"#000.0##E0\"),\n-                Arguments.of(\"#000.00##E0\"),\n-                Arguments.of(\"#000.000##E0\"),\n-                Arguments.of(\"000.000E0\"),\n-                Arguments.of(\"#.##E0\"),\n-                Arguments.of(\"######.######E0\"),\n-                Arguments.of(\"####00.00######E0\")\n+                Arguments.of(\"#0.0##E0\", 2, 5),\n+                Arguments.of(\"#00.00##E0\", 4, 7),\n+                Arguments.of(\"#0.000##E0\", 4, 7),\n+                Arguments.of(\"#00.000##E0\", 5, 8),\n+                Arguments.of(\"#000.0##E0\", 4, 7),\n+                Arguments.of(\"#000.00##E0\", 5, 8),\n+                Arguments.of(\"#000.000##E0\", 6, 9),\n+                Arguments.of(\"000.000E0\", 6, 6),\n+                Arguments.of(\"#.##E0\", 0, 3),\n+                Arguments.of(\"######.######E0\", 0, 12),\n+                Arguments.of(\"####00.00######E0\", 4, 14)\n","filename":"test\/jdk\/java\/text\/Format\/DecimalFormat\/MantissaDigits.java","additions":23,"deletions":29,"binary":false,"changes":52,"status":"modified"}]}