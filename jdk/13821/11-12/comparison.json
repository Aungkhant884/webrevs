{"files":[{"patch":"@@ -60,1 +60,1 @@\n-        this.directTarget = target.target();\n+        this.directTarget = target.asDirect();\n@@ -72,2 +72,2 @@\n-    VarHandle target() {\n-        return this.directTarget;\n+    VarHandle asDirect() {\n+        return directTarget;\n@@ -79,2 +79,2 @@\n-            ? this\n-            : new IndirectVarHandle(target, value, coordinates, handleFactory, vform, true);\n+                ? this\n+                : new IndirectVarHandle(target, value, coordinates, handleFactory, vform, true);\n@@ -86,2 +86,2 @@\n-            ? this\n-            : new IndirectVarHandle(target, value, coordinates, handleFactory, vform, false);\n+                ? this\n+                : new IndirectVarHandle(target, value, coordinates, handleFactory, vform, false);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/IndirectVarHandle.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -564,1 +564,1 @@\n-        return handle.target();\n+        return handle.asDirect();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/Invokers.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,0 +45,3 @@\n+    \/\/ Implementation notes:\n+    \/\/ We put a barrier on both target() (for VH form impl direct invocation)\n+    \/\/ and on getMethodHandle() (for indirect VH invocation, toMethodHandle)\n@@ -55,6 +58,0 @@\n-    @Override\n-    boolean checkAccessModeThenIsDirect(AccessDescriptor ad) {\n-        super.checkAccessModeThenIsDirect(ad);\n-        return false;\n-    }\n-\n@@ -66,0 +63,5 @@\n+    @ForceInline\n+    VarHandle asDirect() {\n+        return target;\n+    }\n+\n@@ -69,0 +71,1 @@\n+        ensureInitialized();\n@@ -95,2 +98,5 @@\n-        ensureInitialized();\n-        return target.getMethodHandle(accessMode);\n+        var mh = target.getMethodHandle(accessMode);\n+        if (this.initialized)\n+            return mh;\n+\n+        return MethodHandles.collectArguments(mh, 0, ensureInitializedMh()).bindTo(this);\n@@ -129,12 +135,0 @@\n-\n-    \/\/ regular impl uses getMethodHandle which we avoid, for our getMethodHandle\n-    \/\/ serves as an initialization barrier\n-    @Override\n-    public MethodHandle toMethodHandle(AccessMode accessMode) {\n-        var mh = target.toMethodHandle(accessMode);\n-        if (initialized)\n-            return mh;\n-\n-        \/\/ Add barrier\n-        return MethodHandles.collectArguments(mh, 0, ensureInitializedMh()).bindTo(this);\n-    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/LazyInitializingVarHandle.java","additions":14,"deletions":20,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -522,0 +522,9 @@\n+    \/**\n+     * Direct VH implementations call this method to\n+     * unwrap lazy initializing VarHandles.\n+     *\/\n+    @ForceInline\n+    VarHandle target() {\n+        return asDirect();\n+    }\n+\n@@ -525,2 +534,0 @@\n-     * Direct VH implementation methods also call this method to\n-     * unwrap lazy initializing VarHandles.\n@@ -532,1 +539,1 @@\n-    VarHandle target() {\n+    VarHandle asDirect() {\n@@ -2084,1 +2091,1 @@\n-     * @see #target()\n+     * @see #asDirect()\n@@ -2160,1 +2167,1 @@\n-            return mh.bindTo(target());\n+            return mh.bindTo(asDirect());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandle.java","additions":12,"deletions":5,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-            return mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0);\n+            return mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0);\n@@ -59,1 +59,1 @@\n-            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1);\n+            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1);\n@@ -72,1 +72,1 @@\n-            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1, arg2);\n+            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1, arg2);\n@@ -86,1 +86,1 @@\n-            return mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1, arg2);\n+            return mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1, arg2);\n@@ -100,1 +100,1 @@\n-            return mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1);\n+            return mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1);\n@@ -113,1 +113,1 @@\n-            return (int) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0);\n+            return (int) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0);\n@@ -128,1 +128,1 @@\n-            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1);\n+            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1);\n@@ -141,1 +141,1 @@\n-            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1, arg2);\n+            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1, arg2);\n@@ -154,1 +154,1 @@\n-            return (int) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1, arg2);\n+            return (int) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1, arg2);\n@@ -167,1 +167,1 @@\n-            return (int) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1);\n+            return (int) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1);\n@@ -180,1 +180,1 @@\n-            return (long) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0);\n+            return (long) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0);\n@@ -195,1 +195,1 @@\n-            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1);\n+            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1);\n@@ -208,1 +208,1 @@\n-            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1, arg2);\n+            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1, arg2);\n@@ -221,1 +221,1 @@\n-            return (long) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1, arg2);\n+            return (long) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1, arg2);\n@@ -234,1 +234,1 @@\n-            return (long) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1);\n+            return (long) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1);\n@@ -247,1 +247,1 @@\n-            return (float) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0);\n+            return (float) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0);\n@@ -262,1 +262,1 @@\n-            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1);\n+            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1);\n@@ -275,1 +275,1 @@\n-            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1, arg2);\n+            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1, arg2);\n@@ -288,1 +288,1 @@\n-            return (float) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1, arg2);\n+            return (float) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1, arg2);\n@@ -301,1 +301,1 @@\n-            return (float) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1);\n+            return (float) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1);\n@@ -314,1 +314,1 @@\n-            return (double) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0);\n+            return (double) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0);\n@@ -329,1 +329,1 @@\n-            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1);\n+            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1);\n@@ -342,1 +342,1 @@\n-            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1, arg2);\n+            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1, arg2);\n@@ -355,1 +355,1 @@\n-            return (double) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1, arg2);\n+            return (double) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1, arg2);\n@@ -368,1 +368,1 @@\n-            return (double) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1);\n+            return (double) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1);\n@@ -382,1 +382,1 @@\n-            return mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target());\n+            return mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect());\n@@ -397,1 +397,1 @@\n-            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0);\n+            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0);\n@@ -410,1 +410,1 @@\n-            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1);\n+            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1);\n@@ -423,1 +423,1 @@\n-            return (int) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target());\n+            return (int) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect());\n@@ -438,1 +438,1 @@\n-            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0);\n+            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0);\n@@ -451,1 +451,1 @@\n-            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1);\n+            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1);\n@@ -464,1 +464,1 @@\n-            return (int) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1);\n+            return (int) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1);\n@@ -477,1 +477,1 @@\n-            return (int) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0);\n+            return (int) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0);\n@@ -490,1 +490,1 @@\n-            return (long) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target());\n+            return (long) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect());\n@@ -505,1 +505,1 @@\n-            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0);\n+            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0);\n@@ -518,1 +518,1 @@\n-            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1);\n+            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1);\n@@ -531,1 +531,1 @@\n-            return (long) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1);\n+            return (long) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1);\n@@ -544,1 +544,1 @@\n-            return (long) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0);\n+            return (long) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0);\n@@ -557,1 +557,1 @@\n-            return (float) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target());\n+            return (float) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect());\n@@ -572,1 +572,1 @@\n-            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0);\n+            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0);\n@@ -585,1 +585,1 @@\n-            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1);\n+            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1);\n@@ -598,1 +598,1 @@\n-            return (float) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1);\n+            return (float) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1);\n@@ -611,1 +611,1 @@\n-            return (float) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0);\n+            return (float) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0);\n@@ -624,1 +624,1 @@\n-            return (double) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target());\n+            return (double) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect());\n@@ -639,1 +639,1 @@\n-            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0);\n+            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0);\n@@ -652,1 +652,1 @@\n-            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1);\n+            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1);\n@@ -665,1 +665,1 @@\n-            return (double) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1);\n+            return (double) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1);\n@@ -678,1 +678,1 @@\n-            return (double) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0);\n+            return (double) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0);\n@@ -692,1 +692,1 @@\n-            return mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1);\n+            return mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1);\n@@ -707,1 +707,1 @@\n-            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1, arg2);\n+            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1, arg2);\n@@ -720,1 +720,1 @@\n-            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1, arg2, arg3);\n+            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1, arg2, arg3);\n@@ -734,1 +734,1 @@\n-            return mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1, arg2, arg3);\n+            return mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1, arg2, arg3);\n@@ -748,1 +748,1 @@\n-            return mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1, arg2);\n+            return mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1, arg2);\n@@ -763,1 +763,1 @@\n-            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1, arg2);\n+            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1, arg2);\n@@ -776,1 +776,1 @@\n-            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1, arg2, arg3);\n+            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1, arg2, arg3);\n@@ -789,1 +789,1 @@\n-            return (int) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1, arg2, arg3);\n+            return (int) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1, arg2, arg3);\n@@ -802,1 +802,1 @@\n-            return (long) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1);\n+            return (long) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1);\n@@ -817,1 +817,1 @@\n-            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1, arg2);\n+            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1, arg2);\n@@ -830,1 +830,1 @@\n-            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1, arg2, arg3);\n+            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1, arg2, arg3);\n@@ -843,1 +843,1 @@\n-            return (long) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1, arg2, arg3);\n+            return (long) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1, arg2, arg3);\n@@ -856,1 +856,1 @@\n-            return (long) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1, arg2);\n+            return (long) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1, arg2);\n@@ -869,1 +869,1 @@\n-            return (float) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1);\n+            return (float) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1);\n@@ -884,1 +884,1 @@\n-            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1, arg2);\n+            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1, arg2);\n@@ -897,1 +897,1 @@\n-            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1, arg2, arg3);\n+            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1, arg2, arg3);\n@@ -910,1 +910,1 @@\n-            return (float) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1, arg2, arg3);\n+            return (float) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1, arg2, arg3);\n@@ -923,1 +923,1 @@\n-            return (float) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1, arg2);\n+            return (float) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1, arg2);\n@@ -936,1 +936,1 @@\n-            return (double) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1);\n+            return (double) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1);\n@@ -951,1 +951,1 @@\n-            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1, arg2);\n+            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1, arg2);\n@@ -964,1 +964,1 @@\n-            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1, arg2, arg3);\n+            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1, arg2, arg3);\n@@ -977,1 +977,1 @@\n-            return (double) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1, arg2, arg3);\n+            return (double) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1, arg2, arg3);\n@@ -990,1 +990,1 @@\n-            return (double) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1, arg2);\n+            return (double) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1, arg2);\n@@ -1003,1 +1003,1 @@\n-            return (int) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1);\n+            return (int) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1);\n@@ -1018,1 +1018,1 @@\n-            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1, arg2);\n+            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1, arg2);\n@@ -1031,1 +1031,1 @@\n-            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1, arg2, arg3);\n+            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1, arg2, arg3);\n@@ -1044,1 +1044,1 @@\n-            return (int) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1, arg2, arg3);\n+            return (int) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1, arg2, arg3);\n@@ -1057,1 +1057,1 @@\n-            return (int) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1, arg2);\n+            return (int) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1, arg2);\n@@ -1072,1 +1072,1 @@\n-            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1, arg2);\n+            mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1, arg2);\n@@ -1085,1 +1085,1 @@\n-            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1, arg2, arg3);\n+            return (boolean) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1, arg2, arg3);\n@@ -1098,1 +1098,1 @@\n-            return (long) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.target(), arg0, arg1, arg2, arg3);\n+            return (long) mh.asType(ad.symbolicMethodTypeInvoker).invokeBasic(handle.asDirect(), arg0, arg1, arg2, arg3);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandleGuards.java","additions":79,"deletions":79,"binary":false,"changes":158,"status":"modified"},{"patch":"@@ -734,10 +734,1 @@\n-\/\/        static class HandleType {\n-\/\/            final Class<?> receiver;\n-\/\/            final Class<?>[] intermediates;\n-\/\/            final Class<?> value;\n-\/\/\n-\/\/            HandleType(Class<?> receiver, Class<?> value, Class<?>... intermediates) {\n-\/\/                this.receiver = receiver;\n-\/\/                this.intermediates = intermediates;\n-\/\/                this.value = value;\n-\/\/            }\n+\/\/        record HandleType(Class<?> receiver, Class<?> value, Class<?>... intermediates) {\n@@ -819,4 +810,2 @@\n-\/\/            for (int i = 0; i < intermediates.length; i++) {\n-\/\/                params.add(intermediates[i]);\n-\/\/            }\n-\/\/            for (Parameter p : m.getParameters()) {\n+\/\/            java.util.Collections.addAll(params, intermediates);\n+\/\/            for (var p : m.getParameters()) {\n@@ -831,1 +820,1 @@\n-\/\/            LinkedHashMap<String, Class<?>> params = new LinkedHashMap<>();\n+\/\/            var params = new java.util.LinkedHashMap<String, Class<?>>();\n@@ -844,1 +833,1 @@\n-\/\/                    collect(Collectors.joining(\", \"));\n+\/\/                    collect(java.util.stream.Collectors.joining(\", \"));\n@@ -858,1 +847,1 @@\n-\/\/            LINK_TO_INVOKER_ARGS.set(0, LINK_TO_INVOKER_ARGS.get(0) + \".target()\");\n+\/\/            LINK_TO_INVOKER_ARGS.set(0, LINK_TO_INVOKER_ARGS.get(0) + \".asDirect()\");\n@@ -885,4 +874,2 @@\n-\/\/                    replaceAll(\"<LINK_TO_STATIC_ARGS>\", LINK_TO_STATIC_ARGS.stream().\n-\/\/                            collect(Collectors.joining(\", \"))).\n-\/\/                    replace(\"<LINK_TO_INVOKER_ARGS>\", LINK_TO_INVOKER_ARGS.stream().\n-\/\/                            collect(Collectors.joining(\", \")))\n+\/\/                    replaceAll(\"<LINK_TO_STATIC_ARGS>\", String.join(\", \", LINK_TO_STATIC_ARGS)).\n+\/\/                    replace(\"<LINK_TO_INVOKER_ARGS>\", String.join(\", \", LINK_TO_INVOKER_ARGS))\n@@ -917,24 +904,1 @@\n-\/\/            if (pt == void.class) {\n-\/\/                return 'V';\n-\/\/            }\n-\/\/            else if (!pt.isPrimitive()) {\n-\/\/                return 'L';\n-\/\/            }\n-\/\/            else if (pt == boolean.class) {\n-\/\/                return 'Z';\n-\/\/            }\n-\/\/            else if (pt == int.class) {\n-\/\/                return 'I';\n-\/\/            }\n-\/\/            else if (pt == long.class) {\n-\/\/                return 'J';\n-\/\/            }\n-\/\/            else if (pt == float.class) {\n-\/\/                return 'F';\n-\/\/            }\n-\/\/            else if (pt == double.class) {\n-\/\/                return 'D';\n-\/\/            }\n-\/\/            else {\n-\/\/                throw new IllegalStateException(pt.getName());\n-\/\/            }\n+\/\/            return Wrapper.forBasicType(pt).basicTypeChar();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandles.java","additions":9,"deletions":45,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -443,1 +443,1 @@\n-            FieldStaticReadOnly handle = (FieldStaticReadOnly)ob;\n+            FieldStaticReadOnly handle = (FieldStaticReadOnly) ob.target();\n@@ -450,1 +450,1 @@\n-            FieldStaticReadOnly handle = (FieldStaticReadOnly)ob;\n+            FieldStaticReadOnly handle = (FieldStaticReadOnly) ob.target();\n@@ -457,1 +457,1 @@\n-            FieldStaticReadOnly handle = (FieldStaticReadOnly)ob;\n+            FieldStaticReadOnly handle = (FieldStaticReadOnly) ob.target();\n@@ -464,1 +464,1 @@\n-            FieldStaticReadOnly handle = (FieldStaticReadOnly)ob;\n+            FieldStaticReadOnly handle = (FieldStaticReadOnly) ob.target();\n@@ -499,1 +499,1 @@\n-            FieldStaticReadWrite handle = (FieldStaticReadWrite)ob;\n+            FieldStaticReadWrite handle = (FieldStaticReadWrite) ob.target();\n@@ -507,1 +507,1 @@\n-            FieldStaticReadWrite handle = (FieldStaticReadWrite)ob;\n+            FieldStaticReadWrite handle = (FieldStaticReadWrite) ob.target();\n@@ -515,1 +515,1 @@\n-            FieldStaticReadWrite handle = (FieldStaticReadWrite)ob;\n+            FieldStaticReadWrite handle = (FieldStaticReadWrite) ob.target();\n@@ -523,1 +523,1 @@\n-            FieldStaticReadWrite handle = (FieldStaticReadWrite)ob;\n+            FieldStaticReadWrite handle = (FieldStaticReadWrite) ob.target();\n@@ -532,1 +532,1 @@\n-            FieldStaticReadWrite handle = (FieldStaticReadWrite)ob;\n+            FieldStaticReadWrite handle = (FieldStaticReadWrite) ob.target();\n@@ -542,1 +542,1 @@\n-            FieldStaticReadWrite handle = (FieldStaticReadWrite)ob;\n+            FieldStaticReadWrite handle = (FieldStaticReadWrite) ob.target();\n@@ -551,1 +551,1 @@\n-            FieldStaticReadWrite handle = (FieldStaticReadWrite)ob;\n+            FieldStaticReadWrite handle = (FieldStaticReadWrite) ob.target();\n@@ -560,1 +560,1 @@\n-            FieldStaticReadWrite handle = (FieldStaticReadWrite)ob;\n+            FieldStaticReadWrite handle = (FieldStaticReadWrite) ob.target();\n@@ -569,1 +569,1 @@\n-            FieldStaticReadWrite handle = (FieldStaticReadWrite)ob;\n+            FieldStaticReadWrite handle = (FieldStaticReadWrite) ob.target();\n@@ -578,1 +578,1 @@\n-            FieldStaticReadWrite handle = (FieldStaticReadWrite)ob;\n+            FieldStaticReadWrite handle = (FieldStaticReadWrite) ob.target();\n@@ -587,1 +587,1 @@\n-            FieldStaticReadWrite handle = (FieldStaticReadWrite)ob;\n+            FieldStaticReadWrite handle = (FieldStaticReadWrite) ob.target();\n@@ -596,1 +596,1 @@\n-            FieldStaticReadWrite handle = (FieldStaticReadWrite)ob;\n+            FieldStaticReadWrite handle = (FieldStaticReadWrite) ob.target();\n@@ -605,1 +605,1 @@\n-            FieldStaticReadWrite handle = (FieldStaticReadWrite)ob;\n+            FieldStaticReadWrite handle = (FieldStaticReadWrite) ob.target();\n@@ -613,1 +613,1 @@\n-            FieldStaticReadWrite handle = (FieldStaticReadWrite)ob;\n+            FieldStaticReadWrite handle = (FieldStaticReadWrite) ob.target();\n@@ -621,1 +621,1 @@\n-            FieldStaticReadWrite handle = (FieldStaticReadWrite)ob;\n+            FieldStaticReadWrite handle = (FieldStaticReadWrite) ob.target();\n@@ -631,1 +631,1 @@\n-            FieldStaticReadWrite handle = (FieldStaticReadWrite)ob;\n+            FieldStaticReadWrite handle = (FieldStaticReadWrite) ob.target();\n@@ -639,1 +639,1 @@\n-            FieldStaticReadWrite handle = (FieldStaticReadWrite)ob;\n+            FieldStaticReadWrite handle = (FieldStaticReadWrite) ob.target();\n@@ -647,1 +647,1 @@\n-            FieldStaticReadWrite handle = (FieldStaticReadWrite)ob;\n+            FieldStaticReadWrite handle = (FieldStaticReadWrite) ob.target();\n@@ -657,1 +657,1 @@\n-            FieldStaticReadWrite handle = (FieldStaticReadWrite)ob;\n+            FieldStaticReadWrite handle = (FieldStaticReadWrite) ob.target();\n@@ -665,1 +665,1 @@\n-            FieldStaticReadWrite handle = (FieldStaticReadWrite)ob;\n+            FieldStaticReadWrite handle = (FieldStaticReadWrite) ob.target();\n@@ -673,1 +673,1 @@\n-            FieldStaticReadWrite handle = (FieldStaticReadWrite)ob;\n+            FieldStaticReadWrite handle = (FieldStaticReadWrite) ob.target();\n@@ -681,1 +681,1 @@\n-            FieldStaticReadWrite handle = (FieldStaticReadWrite)ob;\n+            FieldStaticReadWrite handle = (FieldStaticReadWrite) ob.target();\n@@ -689,1 +689,1 @@\n-            FieldStaticReadWrite handle = (FieldStaticReadWrite)ob;\n+            FieldStaticReadWrite handle = (FieldStaticReadWrite) ob.target();\n@@ -697,1 +697,1 @@\n-            FieldStaticReadWrite handle = (FieldStaticReadWrite)ob;\n+            FieldStaticReadWrite handle = (FieldStaticReadWrite) ob.target();\n@@ -705,1 +705,1 @@\n-            FieldStaticReadWrite handle = (FieldStaticReadWrite)ob;\n+            FieldStaticReadWrite handle = (FieldStaticReadWrite) ob.target();\n@@ -713,1 +713,1 @@\n-            FieldStaticReadWrite handle = (FieldStaticReadWrite)ob;\n+            FieldStaticReadWrite handle = (FieldStaticReadWrite) ob.target();\n@@ -721,1 +721,1 @@\n-            FieldStaticReadWrite handle = (FieldStaticReadWrite)ob;\n+            FieldStaticReadWrite handle = (FieldStaticReadWrite) ob.target();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandle.java.template","additions":31,"deletions":31,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+ * @run junit\/othervm -Djava.lang.invoke.VarHandle.VAR_HANDLE_IDENTITY_ADAPT=true LazyInitializingTest\n@@ -58,0 +59,3 @@\n+    \/**\n+     * Meta test to ensure the testing mechanism to check initialization is correct.\n+     *\/\n@@ -86,1 +90,1 @@\n-        assertEquals(42, vh.get(), \"VH does not read value set in class initializer\");\n+        assertEquals(42, (int) vh.get(), \"VH does not read value set in class initializer\");\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/LazyInitializingTest.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"}]}