{"files":[{"patch":"@@ -274,23 +274,0 @@\n-void* Arena::operator new(size_t size) throw() {\n-  assert(false, \"Use dynamic memory type binding\");\n-  return NULL;\n-}\n-\n-void* Arena::operator new (size_t size, const std::nothrow_t&  nothrow_constant) throw() {\n-  assert(false, \"Use dynamic memory type binding\");\n-  return NULL;\n-}\n-\n-  \/\/ dynamic memory type binding\n-void* Arena::operator new(size_t size, MEMFLAGS flags) throw() {\n-  return (void *) AllocateHeap(size, flags, CALLER_PC);\n-}\n-\n-void* Arena::operator new(size_t size, const std::nothrow_t& nothrow_constant, MEMFLAGS flags) throw() {\n-  return (void*)AllocateHeap(size, flags, CALLER_PC, AllocFailStrategy::RETURN_NULL);\n-}\n-\n-void Arena::operator delete(void* p) {\n-  FreeHeap(p);\n-}\n-\n","filename":"src\/hotspot\/share\/memory\/arena.cpp","additions":0,"deletions":23,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-class Arena {\n+class Arena : public CHeapObjBase {\n@@ -124,9 +124,0 @@\n-  \/\/ new operators\n-  void* operator new (size_t size) throw();\n-  void* operator new (size_t size, const std::nothrow_t& nothrow_constant) throw();\n-\n-  \/\/ dynamic memory type tagging\n-  void* operator new(size_t size, MEMFLAGS flags) throw();\n-  void* operator new(size_t size, const std::nothrow_t& nothrow_constant, MEMFLAGS flags) throw();\n-  void  operator delete(void* p);\n-\n","filename":"src\/hotspot\/share\/memory\/arena.hpp","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"}]}