{"files":[{"patch":"@@ -29,0 +29,2 @@\n+VMRegImpl all_VMRegs[ConcreteRegisterImpl::number_of_registers + 1];\n+\n@@ -30,1 +32,1 @@\n-VMReg VMRegImpl::stack0 = (VMReg)(intptr_t)((ConcreteRegisterImpl::number_of_registers + 7) & ~7);\n+VMReg VMRegImpl::stack0 = VMRegImpl::stack_0();\n","filename":"src\/hotspot\/share\/code\/vmreg.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -59,2 +59,2 @@\n-\n-\n+  \/\/ Despite being private, this field is exported to the\n+  \/\/ serviceability agent and our friends.\n@@ -62,0 +62,2 @@\n+\n+  static constexpr VMReg first();\n@@ -66,0 +68,3 @@\n+  static constexpr VMReg stack_0() {\n+    return first() + ((ConcreteRegisterImpl::number_of_registers + 7) & ~7);\n+  }\n@@ -69,1 +74,4 @@\n-  static VMReg  as_VMReg(int val, bool bad_ok = false) { assert(val > BAD_REG || bad_ok, \"invalid\"); return (VMReg) (intptr_t) val; }\n+  static VMReg  as_VMReg(int val, bool bad_ok = false) {\n+    assert(val > BAD_REG || bad_ok, \"invalid\");\n+    return val + first();\n+  }\n@@ -81,3 +89,4 @@\n-  static VMReg Bad() { return (VMReg) (intptr_t) BAD_REG; }\n-  bool is_valid() const { return ((intptr_t) this) != BAD_REG; }\n-  bool is_stack() const { return (intptr_t) this >= (intptr_t) stack0; }\n+  intptr_t value() const { return this - first(); }\n+  static VMReg Bad() { return BAD_REG+first(); }\n+  bool is_valid() const { return value() != BAD_REG; }\n+  bool is_stack() const { return this >= stack_0(); }\n@@ -102,1 +111,1 @@\n-    return (VMReg)(intptr_t)(value() + 1);\n+    return this + 1;\n@@ -106,1 +115,1 @@\n-    return (VMReg)(intptr_t)(value() + i);\n+    return this + i;\n@@ -110,1 +119,1 @@\n-    return (VMReg)(intptr_t)(value() - 1);\n+    return this - 1;\n@@ -114,2 +123,0 @@\n-  intptr_t value() const         {return (intptr_t) this; }\n-\n@@ -134,1 +141,1 @@\n-    return (VMReg) (intptr_t) (stack0->value() + idx);\n+    return stack_0() + idx;\n@@ -139,1 +146,1 @@\n-    return value() - stack0->value();\n+    return this - stack_0();\n@@ -148,0 +155,3 @@\n+extern VMRegImpl all_VMRegs[ConcreteRegisterImpl::number_of_registers + 1] INTERNAL_VISIBILITY;\n+inline constexpr VMReg VMRegImpl::first() { return all_VMRegs + 1; }\n+\n","filename":"src\/hotspot\/share\/code\/vmreg.hpp","additions":23,"deletions":13,"binary":false,"changes":36,"status":"modified"}]}