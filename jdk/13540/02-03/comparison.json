{"files":[{"patch":"@@ -1454,1 +1454,1 @@\n-     * @throws NegativeArraySizeException if arrayLength is negative\n+     * @throws StreamCorruptedException if arrayLength is negative\n@@ -1457,1 +1457,1 @@\n-    private void checkArray(Class<?> arrayType, int arrayLength) throws InvalidClassException {\n+    private void checkArray(Class<?> arrayType, int arrayLength) throws ObjectStreamException {\n@@ -1463,1 +1463,1 @@\n-            throw new NegativeArraySizeException();\n+            throw new StreamCorruptedException(\"Array length is negative\");\n@@ -2142,1 +2142,1 @@\n-            throw new InvalidClassException(\"Array length is negative\");\n+            throw new StreamCorruptedException(\"Array length is negative\");\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectInputStream.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import java.io.InvalidClassException;\n+import java.io.ObjectStreamException;\n@@ -37,1 +37,1 @@\n-        throws InvalidClassException;\n+        throws ObjectStreamException;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaObjectInputStreamAccess.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import java.util.PriorityQueue;\n@@ -43,1 +44,1 @@\n-    private static byte[] buildPayload() throws IOException {\n+    private static byte[] buildArrayPayload() throws IOException {\n@@ -68,0 +69,25 @@\n+    private static byte[] buildPriorityQueuePayload() throws IOException {\n+        \/\/ Serialize to bytes\n+       ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+       ObjectOutputStream oos = new ObjectOutputStream(baos);\n+       oos.writeObject(new PriorityQueue<>());\n+       oos.close();\n+       byte[] serializedData = baos.toByteArray();\n+\n+       \/\/ Find the right location to modify, looking for the first instance of TC_ENDBLOCKDATA\n+       int firstPos = 0;\n+       for (int i = 0; i < serializedData.length - 1; i++) {\n+           \/\/ 0x77 = TC_BLOCKDATA\n+           if (serializedData[i] == 0x77) {\n+               \/\/ Replace array length with -3\n+               serializedData[i - 5] = (byte) 0xff;\n+               serializedData[i - 4] = (byte) 0xff;\n+               serializedData[i - 3] = (byte) 0xff;\n+               serializedData[i - 2] = (byte) 0xfd;\n+\n+               return serializedData;\n+           }\n+       }\n+       throw new RuntimeException(\"Can't find TC_BLOCKDATA in object output stream\");\n+    }\n+\n@@ -82,1 +108,1 @@\n-            ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(buildPayload()));\n+            ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(buildArrayPayload()));\n@@ -94,1 +120,1 @@\n-            ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(buildPayload()));\n+            ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(buildArrayPayload()));\n@@ -108,0 +134,12 @@\n+        try {\n+            \/\/ Test object input stream with negative sized PriorityQueue\n+            ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(buildPriorityQueuePayload()));\n+            ois.readObject();\n+        } catch (NegativeArraySizeException nase) {\n+            throw new Exception(\"ObjectInputStream::readObject() shouldn't throw a NegativeArraySizeException\", nase);\n+        } catch (ObjectStreamException ose) {\n+            \/\/ OK, because a NegativeArraySizeException should be converted into a ObjectStreamException\n+            if (!\"Array length is negative\".equals(ose.getMessage())) {\n+                throw new Exception(\"Expected \\\"Array length is negative\\\" as exception message\", ose);\n+            }\n+        }\n","filename":"test\/jdk\/java\/io\/ObjectInputStream\/NegativeArraySizeTest.java","additions":41,"deletions":3,"binary":false,"changes":44,"status":"modified"}]}