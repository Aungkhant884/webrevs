{"files":[{"patch":"@@ -2141,1 +2141,3 @@\n-\n+        if (len < 0) {\n+            throw new InvalidClassException(desc.getName(), \"Array length < 0 (\" + len + \")\");\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectInputStream.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,112 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8306461\n+ * @summary ObjectInputStream::readObject() should handle negative array sizes without throwing NegativeArraySizeExceptions\n+ * @run main\/othervm NegativeArraySizeTest\n+ *\/\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.InvalidClassException;\n+import java.io.IOException;\n+import java.io.ObjectInputFilter;\n+import java.io.ObjectInputFilter.Status;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.io.ObjectStreamException;\n+\n+public class NegativeArraySizeTest {\n+\n+    private static byte[] _buildPayload() throws IOException {\n+        String[] simpleArray = new String[1];\n+\n+        \/\/ Serialize to bytes\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ObjectOutputStream oos = new ObjectOutputStream(baos);\n+        oos.writeObject(simpleArray);\n+        oos.close();\n+        byte[] serializedData = baos.toByteArray();\n+\n+        \/\/ Find the right location to modify, looking for the first instance of TC_ENDBLOCKDATA\n+        int firstPos = 0;\n+        for (int i=0; i<serializedData.length-1; i++) {\n+            \/\/ 0x78 = TC_ENDBLOCKDATA\n+            if (serializedData[i] == 0x78) {\n+                firstPos = i;\n+                break;\n+            }\n+        }\n+\n+        \/\/ Replace array length with -2\n+        serializedData[firstPos+2] = (byte) 0xff;\n+        serializedData[firstPos+3] = (byte) 0xff;\n+        serializedData[firstPos+4] = (byte) 0xff;\n+        serializedData[firstPos+5] = (byte) 0xfe;\n+\n+        return  serializedData;\n+    }\n+\n+    public static void test_simpleArray_negative() throws IOException, ClassNotFoundException {\n+        ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(_buildPayload()));\n+        ois.readObject();\n+    }\n+\n+    public static void test_simpleArray_negative_with_filter() throws IOException, ClassNotFoundException {\n+        class CustomFilter implements ObjectInputFilter {\n+            @Override\n+            public Status checkInput(FilterInfo filterInfo) {\n+                Class<?> cl = filterInfo.serialClass();\n+                if (cl != null && cl.isArray() && filterInfo.arrayLength() < -1) {\n+                    throw new RuntimeException(\"FilterInfo.arrayLength() must be >= -1 for arrays (was \" + filterInfo.arrayLength() + \")\");\n+                }\n+                return Status.ALLOWED;\n+            }\n+        }\n+        ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(_buildPayload()));\n+        ois.setObjectInputFilter(new CustomFilter());\n+        ois.readObject();\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            test_simpleArray_negative();\n+        } catch (NegativeArraySizeException nase) {\n+            throw new Exception(\"ObjectInputStream::readObject() shouldn't throw a NegativeArraySizeException\", nase);\n+        } catch (ObjectStreamException ose) {\n+            \/\/ OK, because a NegativeArraySizeException should be converted into a ObjectStreamException\n+        }\n+        try {\n+            test_simpleArray_negative_with_filter();\n+        } catch (NegativeArraySizeException nase) {\n+            throw new Exception(\"ObjectInputStream::readObject() shouldn't throw a NegativeArraySizeException\", nase);\n+        } catch (ObjectStreamException ose) {\n+            if (ose instanceof InvalidClassException ice && ice.getMessage().contains(\"filter status: REJECTED\")) {\n+                throw new Exception(\"ObjectInputStream::readObject() should catch NegativeArraySizeExceptions before filtering\", ice);\n+            }\n+            \/\/ OK, because a NegativeArraySizeException should be converted into a ObjectStreamException *before* filtering\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/io\/ObjectInputStream\/NegativeArraySizeTest.java","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"}]}