{"files":[{"patch":"@@ -203,1 +203,2 @@\n-  _deadlocks = ThreadService::find_deadlocks_at_safepoint(_setter.list(), _concurrent_locks);\n+  bool timeout = false;\n+  _deadlocks = ThreadService::find_deadlocks_at_safepoint(_setter.list(), _concurrent_locks, _deadline, &timeout);\n@@ -205,0 +206,5 @@\n+\n+    if (timeout) {\n+      _out->print_cr(\"Deadlock detection is interrupted due to timeout\");\n+    }\n+\n","filename":"src\/hotspot\/share\/runtime\/vmOperations.cpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -185,1 +185,1 @@\n-\n+  jlong             _deadline;\n@@ -187,2 +187,3 @@\n-  VM_FindDeadlocks(bool concurrent_locks) :  _concurrent_locks(concurrent_locks), _deadlocks(NULL), _out(NULL), _setter() {};\n-  VM_FindDeadlocks(outputStream* st) : _concurrent_locks(true), _deadlocks(NULL), _out(st) {};\n+  VM_FindDeadlocks(bool concurrent_locks) :  _concurrent_locks(concurrent_locks), _deadlocks(NULL), _out(NULL), _setter(), _deadline(0) {};\n+  VM_FindDeadlocks(outputStream* st) : _concurrent_locks(true), _deadlocks(NULL), _out(st), _deadline(0) {};\n+  VM_FindDeadlocks(outputStream* st, jlong deadline) : _concurrent_locks(true), _deadlocks(NULL), _out(st), _deadline(deadline) {};\n@@ -270,1 +271,1 @@\n-  VM_ExtendedPrintThreads(outputStream* out, bool print_concurrent_locks, bool print_extended_info)\n+  VM_ExtendedPrintThreads(outputStream* out, bool print_concurrent_locks, bool print_extended_info, jlong cutoff = 200000000 \/* 200ms *\/)\n@@ -272,1 +273,1 @@\n-      _find_dead_locks(out) {}\n+      _find_dead_locks(out, cutoff > 0 ? os::elapsed_counter() + cutoff : 0) {}\n","filename":"src\/hotspot\/share\/runtime\/vmOperations.hpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -372,1 +372,2 @@\n-DeadlockCycle* ThreadService::find_deadlocks_at_safepoint(ThreadsList * t_list, bool concurrent_locks) {\n+#define CHECK_INTERVAL 2000\n+DeadlockCycle* ThreadService::find_deadlocks_at_safepoint(ThreadsList * t_list, bool concurrent_locks, jlong deadline, bool* timeout) {\n@@ -374,0 +375,8 @@\n+  assert(deadline == 0 || timeout != NULL, \"sanity\");\n+\n+  bool check_deadline = deadline > 0;\n+  if (check_deadline && os::elapsed_counter() >= deadline) {\n+    *timeout = true;\n+    return NULL;\n+  }\n+  int check_interval = CHECK_INTERVAL;\n@@ -399,0 +408,9 @@\n+    if (check_deadline && check_interval-- == 0) {\n+      if (os::elapsed_counter() >= deadline) {\n+        *timeout = true;\n+        delete cycle;\n+        return deadlocks;\n+      }\n+      check_interval = CHECK_INTERVAL;\n+    }\n+\n@@ -444,2 +462,0 @@\n-            cycle->set_deadlock(true);\n-\n@@ -487,2 +503,0 @@\n-        cycle->set_deadlock(true);\n-\n@@ -499,0 +513,10 @@\n+\n+      if (check_deadline && check_interval-- == 0) {\n+        if (os::elapsed_counter() >= deadline) {\n+          *timeout = true;\n+          delete cycle;\n+          return deadlocks;\n+        }\n+        check_interval = CHECK_INTERVAL;\n+      }\n+\n@@ -958,1 +982,0 @@\n-  _is_deadlock = false;\n","filename":"src\/hotspot\/share\/services\/threadService.cpp","additions":29,"deletions":6,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -115,1 +115,2 @@\n-  static DeadlockCycle*       find_deadlocks_at_safepoint(ThreadsList * t_list, bool object_monitors_only);\n+  static DeadlockCycle*       find_deadlocks_at_safepoint(ThreadsList * t_list, bool object_monitors_only,\n+                                                          jlong deadline = 0, bool* timeout = NULL);\n@@ -387,1 +388,0 @@\n-  bool _is_deadlock;\n@@ -397,3 +397,1 @@\n-  void           reset()                    { _is_deadlock = false; _threads->clear(); }\n-  void           set_deadlock(bool value)   { _is_deadlock = value; }\n-  bool           is_deadlock()              { return _is_deadlock; }\n+  void           reset()                    { _threads->clear(); }\n","filename":"src\/hotspot\/share\/services\/threadService.hpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"}]}