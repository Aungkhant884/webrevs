{"files":[{"patch":"@@ -2076,1 +2076,1 @@\n-      processor_id = Atomic::fetch_and_add(&processor_id_next, 1) % os::processor_count();\n+      processor_id = Atomic::fetch_then_add(&processor_id_next, 1) % os::processor_count();\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -98,1 +98,1 @@\n-  D add_and_fetch(D volatile* dest, I add_value, atomic_memory_order order) const;\n+  D add_then_fetch(D volatile* dest, I add_value, atomic_memory_order order) const;\n@@ -101,2 +101,2 @@\n-  D fetch_and_add(D volatile* dest, I add_value, atomic_memory_order order) const {\n-    return add_and_fetch(dest, add_value, order) - add_value;\n+  D fetch_then_add(D volatile* dest, I add_value, atomic_memory_order order) const {\n+    return add_then_fetch(dest, add_value, order) - add_value;\n@@ -108,1 +108,1 @@\n-inline D Atomic::PlatformAdd<4>::add_and_fetch(D volatile* dest, I add_value,\n+inline D Atomic::PlatformAdd<4>::add_then_fetch(D volatile* dest, I add_value,\n@@ -134,1 +134,1 @@\n-inline D Atomic::PlatformAdd<8>::add_and_fetch(D volatile* dest, I add_value,\n+inline D Atomic::PlatformAdd<8>::add_then_fetch(D volatile* dest, I add_value,\n","filename":"src\/hotspot\/os_cpu\/aix_ppc\/atomic_aix_ppc.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-  D add_and_fetch(D volatile* dest, I add_value, atomic_memory_order order) const {\n+  D add_then_fetch(D volatile* dest, I add_value, atomic_memory_order order) const {\n@@ -50,2 +50,2 @@\n-  D fetch_and_add(D volatile* dest, I add_value, atomic_memory_order order) const {\n-    return add_and_fetch(dest, add_value, order) - add_value;\n+  D fetch_then_add(D volatile* dest, I add_value, atomic_memory_order order) const {\n+    return add_then_fetch(dest, add_value, order) - add_value;\n","filename":"src\/hotspot\/os_cpu\/bsd_aarch64\/atomic_bsd_aarch64.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-  D fetch_and_add(D volatile* dest, I add_value, atomic_memory_order \/* order *\/) const;\n+  D fetch_then_add(D volatile* dest, I add_value, atomic_memory_order \/* order *\/) const;\n@@ -36,2 +36,2 @@\n-  D add_and_fetch(D volatile* dest, I add_value, atomic_memory_order order) const {\n-    return fetch_and_add(dest, add_value, order) + add_value;\n+  D add_then_fetch(D volatile* dest, I add_value, atomic_memory_order order) const {\n+    return fetch_then_add(dest, add_value, order) + add_value;\n@@ -43,2 +43,2 @@\n-inline D Atomic::PlatformAdd<4>::fetch_and_add(D volatile* dest, I add_value,\n-                                               atomic_memory_order \/* order *\/) const {\n+inline D Atomic::PlatformAdd<4>::fetch_then_add(D volatile* dest, I add_value,\n+                                                atomic_memory_order \/* order *\/) const {\n@@ -99,2 +99,2 @@\n-inline D Atomic::PlatformAdd<8>::fetch_and_add(D volatile* dest, I add_value,\n-                                               atomic_memory_order \/* order *\/) const {\n+inline D Atomic::PlatformAdd<8>::fetch_then_add(D volatile* dest, I add_value,\n+                                                atomic_memory_order \/* order *\/) const {\n","filename":"src\/hotspot\/os_cpu\/bsd_x86\/atomic_bsd_x86.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,1 +78,1 @@\n-static inline int m68k_add_and_fetch(int add_value, volatile int *ptr) {\n+static inline int m68k_add_then_fetch(int add_value, volatile int *ptr) {\n@@ -139,1 +139,1 @@\n-static inline int arm_add_and_fetch(int add_value, volatile int *ptr) {\n+static inline int arm_add_then_fetch(int add_value, volatile int *ptr) {\n@@ -166,1 +166,1 @@\n-  D add_and_fetch(D volatile* dest, I add_value, atomic_memory_order order) const;\n+  D add_then_fetch(D volatile* dest, I add_value, atomic_memory_order order) const;\n@@ -169,2 +169,2 @@\n-  D fetch_and_add(D volatile* dest, I add_value, atomic_memory_order order) const {\n-    return add_and_fetch(dest, add_value, order) - add_value;\n+  D fetch_then_add(D volatile* dest, I add_value, atomic_memory_order order) const {\n+    return add_then_fetch(dest, add_value, order) - add_value;\n@@ -176,2 +176,2 @@\n-inline D Atomic::PlatformAdd<4>::add_and_fetch(D volatile* dest, I add_value,\n-                                               atomic_memory_order order) const {\n+inline D Atomic::PlatformAdd<4>::add_then_fetch(D volatile* dest, I add_value,\n+                                                atomic_memory_order order) const {\n@@ -182,1 +182,1 @@\n-  return add_using_helper<int>(arm_add_and_fetch, dest, add_value);\n+  return add_using_helper<int>(arm_add_then_fetch, dest, add_value);\n@@ -185,1 +185,1 @@\n-  return add_using_helper<int>(m68k_add_and_fetch, dest, add_value);\n+  return add_using_helper<int>(m68k_add_then_fetch, dest, add_value);\n@@ -196,2 +196,2 @@\n-inline D Atomic::PlatformAdd<8>::add_and_fetch(D volatile* dest, I add_value,\n-                                               atomic_memory_order order) const {\n+inline D Atomic::PlatformAdd<8>::add_then_fetch(D volatile* dest, I add_value,\n+                                                atomic_memory_order order) const {\n","filename":"src\/hotspot\/os_cpu\/bsd_zero\/atomic_bsd_zero.hpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -75,1 +75,1 @@\n-  D fetch_and_add(D volatile* dest, I add_value, atomic_memory_order order) const;\n+  D fetch_then_add(D volatile* dest, I add_value, atomic_memory_order order) const;\n@@ -78,2 +78,2 @@\n-  D add_and_fetch(D volatile* dest, I add_value, atomic_memory_order order) const {\n-    D value = fetch_and_add(dest, add_value, order) + add_value;\n+  D add_then_fetch(D volatile* dest, I add_value, atomic_memory_order order) const {\n+    D value = fetch_then_add(dest, add_value, order) + add_value;\n@@ -86,2 +86,2 @@\n-inline D Atomic::PlatformAdd<4>::fetch_and_add(D volatile* dest, I add_value,\n-                                               atomic_memory_order order) const {\n+inline D Atomic::PlatformAdd<4>::fetch_then_add(D volatile* dest, I add_value,\n+                                                atomic_memory_order order) const {\n@@ -102,2 +102,2 @@\n-inline D Atomic::PlatformAdd<8>::fetch_and_add(D volatile* dest, I add_value,\n-                                               atomic_memory_order order) const {\n+inline D Atomic::PlatformAdd<8>::fetch_then_add(D volatile* dest, I add_value,\n+                                                atomic_memory_order order) const {\n","filename":"src\/hotspot\/os_cpu\/linux_aarch64\/atomic_linux_aarch64.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -104,1 +104,1 @@\n-  D add_and_fetch(D volatile* dest, I add_value, atomic_memory_order order) const;\n+  D add_then_fetch(D volatile* dest, I add_value, atomic_memory_order order) const;\n@@ -107,2 +107,2 @@\n-  D fetch_and_add(D volatile* dest, I add_value, atomic_memory_order order) const {\n-    return add_and_fetch(dest, add_value, order) - add_value;\n+  D fetch_then_add(D volatile* dest, I add_value, atomic_memory_order order) const {\n+    return add_then_fetch(dest, add_value, order) - add_value;\n@@ -114,1 +114,1 @@\n-inline D Atomic::PlatformAdd<4>::add_and_fetch(D volatile* dest, I add_value,\n+inline D Atomic::PlatformAdd<4>::add_then_fetch(D volatile* dest, I add_value,\n","filename":"src\/hotspot\/os_cpu\/linux_arm\/atomic_linux_arm.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -98,1 +98,1 @@\n-  D add_and_fetch(D volatile* dest, I add_value, atomic_memory_order order) const;\n+  D add_then_fetch(D volatile* dest, I add_value, atomic_memory_order order) const;\n@@ -101,2 +101,2 @@\n-  D fetch_and_add(D volatile* dest, I add_value, atomic_memory_order order) const {\n-    return add_and_fetch(dest, add_value, order) - add_value;\n+  D fetch_then_add(D volatile* dest, I add_value, atomic_memory_order order) const {\n+    return add_then_fetch(dest, add_value, order) - add_value;\n@@ -108,2 +108,2 @@\n-inline D Atomic::PlatformAdd<4>::add_and_fetch(D volatile* dest, I add_value,\n-                                               atomic_memory_order order) const {\n+inline D Atomic::PlatformAdd<4>::add_then_fetch(D volatile* dest, I add_value,\n+                                                atomic_memory_order order) const {\n@@ -134,2 +134,2 @@\n-inline D Atomic::PlatformAdd<8>::add_and_fetch(D volatile* dest, I add_value,\n-                                               atomic_memory_order order) const {\n+inline D Atomic::PlatformAdd<8>::add_then_fetch(D volatile* dest, I add_value,\n+                                                atomic_memory_order order) const {\n","filename":"src\/hotspot\/os_cpu\/linux_ppc\/atomic_linux_ppc.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n-  D add_and_fetch(D volatile* dest, I add_value, atomic_memory_order order) const {\n+  D add_then_fetch(D volatile* dest, I add_value, atomic_memory_order order) const {\n@@ -53,2 +53,2 @@\n-  D fetch_and_add(D volatile* dest, I add_value, atomic_memory_order order) const {\n-    return add_and_fetch(dest, add_value, order) - add_value;\n+  D fetch_then_add(D volatile* dest, I add_value, atomic_memory_order order) const {\n+    return add_then_fetch(dest, add_value, order) - add_value;\n","filename":"src\/hotspot\/os_cpu\/linux_riscv\/atomic_linux_riscv.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -80,1 +80,1 @@\n-  D add_and_fetch(D volatile* dest, I add_value, atomic_memory_order order) const;\n+  D add_then_fetch(D volatile* dest, I add_value, atomic_memory_order order) const;\n@@ -83,2 +83,2 @@\n-  D fetch_and_add(D volatile* dest, I add_value, atomic_memory_order order) const {\n-    return add_and_fetch(dest, add_value, order) - add_value;\n+  D fetch_then_add(D volatile* dest, I add_value, atomic_memory_order order) const {\n+    return add_then_fetch(dest, add_value, order) - add_value;\n@@ -90,2 +90,2 @@\n-inline D Atomic::PlatformAdd<4>::add_and_fetch(D volatile* dest, I inc,\n-                                               atomic_memory_order order) const {\n+inline D Atomic::PlatformAdd<4>::add_then_fetch(D volatile* dest, I inc,\n+                                                atomic_memory_order order) const {\n@@ -144,2 +144,2 @@\n-inline D Atomic::PlatformAdd<8>::add_and_fetch(D volatile* dest, I inc,\n-                                               atomic_memory_order order) const {\n+inline D Atomic::PlatformAdd<8>::add_then_fetch(D volatile* dest, I inc,\n+                                                atomic_memory_order order) const {\n","filename":"src\/hotspot\/os_cpu\/linux_s390\/atomic_linux_s390.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-  D fetch_and_add(D volatile* dest, I add_value, atomic_memory_order order) const;\n+  D fetch_then_add(D volatile* dest, I add_value, atomic_memory_order order) const;\n@@ -36,2 +36,2 @@\n-  D add_and_fetch(D volatile* dest, I add_value, atomic_memory_order order) const {\n-    return fetch_and_add(dest, add_value, order) + add_value;\n+  D add_then_fetch(D volatile* dest, I add_value, atomic_memory_order order) const {\n+    return fetch_then_add(dest, add_value, order) + add_value;\n@@ -43,2 +43,2 @@\n-inline D Atomic::PlatformAdd<4>::fetch_and_add(D volatile* dest, I add_value,\n-                                               atomic_memory_order order) const {\n+inline D Atomic::PlatformAdd<4>::fetch_then_add(D volatile* dest, I add_value,\n+                                                atomic_memory_order order) const {\n@@ -100,2 +100,2 @@\n-inline D Atomic::PlatformAdd<8>::fetch_and_add(D volatile* dest, I add_value,\n-                                               atomic_memory_order order) const {\n+inline D Atomic::PlatformAdd<8>::fetch_then_add(D volatile* dest, I add_value,\n+                                                atomic_memory_order order) const {\n","filename":"src\/hotspot\/os_cpu\/linux_x86\/atomic_linux_x86.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-  D add_and_fetch(D volatile* dest, I add_value, atomic_memory_order order) const;\n+  D add_then_fetch(D volatile* dest, I add_value, atomic_memory_order order) const;\n@@ -39,2 +39,2 @@\n-  D fetch_and_add(D volatile* dest, I add_value, atomic_memory_order order) const {\n-    return add_and_fetch(dest, add_value, order) - add_value;\n+  D fetch_then_add(D volatile* dest, I add_value, atomic_memory_order order) const {\n+    return add_then_fetch(dest, add_value, order) - add_value;\n@@ -46,2 +46,2 @@\n-inline D Atomic::PlatformAdd<4>::add_and_fetch(D volatile* dest, I add_value,\n-                                               atomic_memory_order order) const {\n+inline D Atomic::PlatformAdd<4>::add_then_fetch(D volatile* dest, I add_value,\n+                                                atomic_memory_order order) const {\n@@ -58,2 +58,2 @@\n-inline D Atomic::PlatformAdd<8>::add_and_fetch(D volatile* dest, I add_value,\n-                                               atomic_memory_order order) const {\n+inline D Atomic::PlatformAdd<8>::add_then_fetch(D volatile* dest, I add_value,\n+                                                atomic_memory_order order) const {\n","filename":"src\/hotspot\/os_cpu\/linux_zero\/atomic_linux_zero.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-  D add_and_fetch(D volatile* dest, I add_value, atomic_memory_order order) const;\n+  D add_then_fetch(D volatile* dest, I add_value, atomic_memory_order order) const;\n@@ -45,2 +45,2 @@\n-  D fetch_and_add(D volatile* dest, I add_value, atomic_memory_order order) const {\n-    return add_and_fetch(dest, add_value, order) - add_value;\n+  D fetch_then_add(D volatile* dest, I add_value, atomic_memory_order order) const {\n+    return add_then_fetch(dest, add_value, order) - add_value;\n@@ -56,3 +56,3 @@\n-  inline D Atomic::PlatformAdd<sizeof(IntrinsicType)>::add_and_fetch(D volatile* dest, \\\n-                                                                     I add_value, \\\n-                                                                     atomic_memory_order order) const { \\\n+  inline D Atomic::PlatformAdd<sizeof(IntrinsicType)>::add_then_fetch(D volatile* dest, \\\n+                                                                      I add_value, \\\n+                                                                      atomic_memory_order order) const { \\\n","filename":"src\/hotspot\/os_cpu\/windows_aarch64\/atomic_windows_aarch64.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,1 @@\n-  D add_and_fetch(D volatile* dest, I add_value, atomic_memory_order order) const;\n+  D add_then_fetch(D volatile* dest, I add_value, atomic_memory_order order) const;\n@@ -48,2 +48,2 @@\n-  D fetch_and_add(D volatile* dest, I add_value, atomic_memory_order order) const {\n-    return add_and_fetch(dest, add_value, order) - add_value;\n+  D fetch_then_add(D volatile* dest, I add_value, atomic_memory_order order) const {\n+    return add_then_fetch(dest, add_value, order) - add_value;\n@@ -59,3 +59,3 @@\n-  inline D Atomic::PlatformAdd<sizeof(IntrinsicType)>::add_and_fetch(D volatile* dest, \\\n-                                                                     I add_value, \\\n-                                                                     atomic_memory_order order) const { \\\n+  inline D Atomic::PlatformAdd<sizeof(IntrinsicType)>::add_then_fetch(D volatile* dest, \\\n+                                                                      I add_value, \\\n+                                                                      atomic_memory_order order) const { \\\n","filename":"src\/hotspot\/os_cpu\/windows_x86\/atomic_windows_x86.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-  size_t old_count = Atomic::fetch_and_add(&_num_instance_classes, -count, memory_order_relaxed);\n+  size_t old_count = Atomic::fetch_then_add(&_num_instance_classes, -count, memory_order_relaxed);\n@@ -68,1 +68,1 @@\n-  size_t old_count = Atomic::fetch_and_add(&_num_array_classes, -count, memory_order_relaxed);\n+  size_t old_count = Atomic::fetch_then_add(&_num_array_classes, -count, memory_order_relaxed);\n","filename":"src\/hotspot\/share\/classfile\/classLoaderDataGraph.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,1 @@\n-  task = Atomic::fetch_and_add(&_num_serial_tasks_done, 1);\n+  task = Atomic::fetch_then_add(&_num_serial_tasks_done, 1);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BatchedTask.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-  uint claim = Atomic::fetch_and_add(&_cur_claim, _claim_step);\n+  uint claim = Atomic::fetch_then_add(&_cur_claim, _claim_step);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -221,1 +221,1 @@\n-  size_t cur_idx = Atomic::fetch_and_add(&_hwm, 1u);\n+  size_t cur_idx = Atomic::fetch_then_add(&_hwm, 1u);\n@@ -289,1 +289,1 @@\n-  size_t idx = Atomic::fetch_and_add(&_num_root_regions, 1u);\n+  size_t idx = Atomic::fetch_then_add(&_num_root_regions, 1u);\n@@ -317,1 +317,1 @@\n-  size_t claimed_index = Atomic::fetch_and_add(&_claimed_root_regions, 1u);\n+  size_t claimed_index = Atomic::fetch_then_add(&_claimed_root_regions, 1u);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-    size_t offset = Atomic::fetch_and_add(&_evac_failure_regions_cur_length, 1u);\n+    size_t offset = Atomic::fetch_then_add(&_evac_failure_regions_cur_length, 1u);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailureRegions.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-  uint result = Atomic::fetch_and_add(&_next_allocate, 1u, memory_order_relaxed);\n+  uint result = Atomic::fetch_then_add(&_next_allocate, 1u, memory_order_relaxed);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MonotonicArena.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -181,1 +181,1 @@\n-        uint allocated = Atomic::fetch_and_add(&_cur_idx, 1u);\n+        uint allocated = Atomic::fetch_then_add(&_cur_idx, 1u);\n@@ -246,1 +246,1 @@\n-        uint next = Atomic::fetch_and_add(&_cur_dirty_regions, num_regions_per_worker);\n+        uint next = Atomic::fetch_then_add(&_cur_dirty_regions, num_regions_per_worker);\n@@ -423,1 +423,1 @@\n-    return Atomic::fetch_and_add(&_card_table_scan_state[region], increment, memory_order_relaxed);\n+    return Atomic::fetch_then_add(&_card_table_scan_state[region], increment, memory_order_relaxed);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -593,1 +593,1 @@\n-    block_index = Atomic::fetch_and_add(&_claimed_index, 1u);\n+    block_index = Atomic::fetch_then_add(&_claimed_index, 1u);\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2241,1 +2241,1 @@\n-    uint claimed = Atomic::fetch_and_add(&_counter, 1u);\n+    uint claimed = Atomic::fetch_then_add(&_counter, 1u);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,3 +74,3 @@\n-  int start = Atomic::fetch_and_add(to_length_addr,\n-                                    chunk_size,\n-                                    memory_order_relaxed);\n+  int start = Atomic::fetch_then_add(to_length_addr,\n+                                     chunk_size,\n+                                     memory_order_relaxed);\n","filename":"src\/hotspot\/share\/gc\/shared\/partialArrayTaskStepper.inline.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-  const uint worker_id = Atomic::fetch_and_add(&_started, 1u);\n+  const uint worker_id = Atomic::fetch_then_add(&_started, 1u);\n","filename":"src\/hotspot\/share\/gc\/shared\/workerThread.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1506,1 +1506,1 @@\n-      size_t cur = Atomic::fetch_and_add(&_index, stride, memory_order_relaxed);\n+      size_t cur = Atomic::fetch_then_add(&_index, stride, memory_order_relaxed);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -474,1 +474,1 @@\n-    size_t cur = Atomic::fetch_and_add(&_claimed, stride, memory_order_relaxed);\n+    size_t cur = Atomic::fetch_then_add(&_claimed, stride, memory_order_relaxed);\n@@ -498,1 +498,1 @@\n-    size_t cur = Atomic::fetch_and_add(&_claimed, stride, memory_order_relaxed);\n+    size_t cur = Atomic::fetch_then_add(&_claimed, stride, memory_order_relaxed);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahNMethod.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-  return Atomic::fetch_and_add(&_claimed, _stride, memory_order_relaxed);\n+  return Atomic::fetch_then_add(&_claimed, _stride, memory_order_relaxed);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahRootProcessor.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -523,1 +523,1 @@\n-      size_t v = Atomic::fetch_and_add(&_claimed, 1u, memory_order_relaxed);\n+      size_t v = Atomic::fetch_then_add(&_claimed, 1u, memory_order_relaxed);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,1 @@\n-  char* const addr = Atomic::fetch_and_add(&_top, size);\n+  char* const addr = Atomic::fetch_then_add(&_top, size);\n","filename":"src\/hotspot\/share\/gc\/x\/xForwardingAllocator.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -150,1 +150,1 @@\n-  addr = Atomic::fetch_and_add(&_top, size);\n+  addr = Atomic::fetch_then_add(&_top, size);\n","filename":"src\/hotspot\/share\/gc\/x\/xMarkStackAllocator.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,1 +61,1 @@\n-    const size_t partition_start = MIN2(Atomic::fetch_and_add(&_claimed, partition_size), _size);\n+    const size_t partition_start = MIN2(Atomic::fetch_then_add(&_claimed, partition_size), _size);\n","filename":"src\/hotspot\/share\/gc\/x\/xNMethodTableIteration.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -203,1 +203,1 @@\n-      const uintptr_t offset = Atomic::fetch_and_add(&_start, size);\n+      const uintptr_t offset = Atomic::fetch_then_add(&_start, size);\n","filename":"src\/hotspot\/share\/gc\/x\/xPageAllocator.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,1 @@\n-    const size_t index = Atomic::fetch_and_add(next, 1u);\n+    const size_t index = Atomic::fetch_then_add(next, 1u);\n","filename":"src\/hotspot\/share\/gc\/x\/xRelocationSet.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,1 +73,1 @@\n-  return Atomic::fetch_and_add(&_claimed, 1u);\n+  return Atomic::fetch_then_add(&_claimed, 1u);\n","filename":"src\/hotspot\/share\/gc\/x\/xRootsIterator.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-  const size_t claimed_index = Atomic::fetch_and_add(&_next, 1u, memory_order_relaxed);\n+  const size_t claimed_index = Atomic::fetch_then_add(&_next, 1u, memory_order_relaxed);\n","filename":"src\/hotspot\/share\/gc\/z\/zArray.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,1 @@\n-  char* const addr = Atomic::fetch_and_add(&_top, size);\n+  char* const addr = Atomic::fetch_then_add(&_top, size);\n","filename":"src\/hotspot\/share\/gc\/z\/zForwardingAllocator.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-    return Atomic::fetch_and_add(&_claim_stripe, 1, memory_order_relaxed);\n+    return Atomic::fetch_then_add(&_claim_stripe, 1, memory_order_relaxed);\n@@ -68,1 +68,1 @@\n-      for (int index; (index = Atomic::fetch_and_add(claim_addr(i), 1, memory_order_relaxed)) < stripe_max;) {\n+      for (int index; (index = Atomic::fetch_then_add(claim_addr(i), 1, memory_order_relaxed)) < stripe_max;) {\n@@ -77,1 +77,1 @@\n-      for (int index; (index = Atomic::fetch_and_add(claim_addr(i), 1, memory_order_relaxed)) < stripe_max;) {\n+      for (int index; (index = Atomic::fetch_then_add(claim_addr(i), 1, memory_order_relaxed)) < stripe_max;) {\n@@ -169,1 +169,1 @@\n-    return Atomic::fetch_and_add(&_claim_array[index], 1, memory_order_relaxed);\n+    return Atomic::fetch_then_add(&_claim_array[index], 1, memory_order_relaxed);\n","filename":"src\/hotspot\/share\/gc\/z\/zIndexDistributor.inline.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -149,1 +149,1 @@\n-  addr = Atomic::fetch_and_add(&_top, size);\n+  addr = Atomic::fetch_then_add(&_top, size);\n","filename":"src\/hotspot\/share\/gc\/z\/zMarkStackAllocator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-    const size_t partition_start = MIN2(Atomic::fetch_and_add(&_claimed, partition_size), _size);\n+    const size_t partition_start = MIN2(Atomic::fetch_then_add(&_claimed, partition_size), _size);\n","filename":"src\/hotspot\/share\/gc\/z\/zNMethodTableIteration.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -250,1 +250,1 @@\n-      const zoffset offset = to_zoffset(Atomic::fetch_and_add((uintptr_t*)&_start, size));\n+      const zoffset offset = to_zoffset(Atomic::fetch_then_add((uintptr_t*)&_start, size));\n","filename":"src\/hotspot\/share\/gc\/z\/zPageAllocator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -124,1 +124,1 @@\n-  return Atomic::fetch_and_add(&_claimed, 1u);\n+  return Atomic::fetch_then_add(&_claimed, 1u);\n","filename":"src\/hotspot\/share\/gc\/z\/zRootsIterator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -108,2 +108,2 @@\n-  inline static D fetch_and_add(D volatile* dest, I add_value,\n-                                atomic_memory_order order = memory_order_conservative);\n+  inline static D fetch_then_add(D volatile* dest, I add_value,\n+                                 atomic_memory_order order = memory_order_conservative);\n@@ -322,2 +322,2 @@\n-  \/\/   platform_add.add_and_fetch(dest, add_value, order)\n-  \/\/   platform_add.fetch_and_add(dest, add_value, order)\n+  \/\/   platform_add.add_then_fetch(dest, add_value, order)\n+  \/\/   platform_add.fetch_then_add(dest, add_value, order)\n@@ -326,1 +326,1 @@\n-  \/\/ add_and_fetch atomically adds add_value to the value of dest,\n+  \/\/ add_then_fetch atomically adds add_value to the value of dest,\n@@ -329,1 +329,1 @@\n-  \/\/ fetch_and_add atomically adds add_value to the value of dest,\n+  \/\/ fetch_then_add atomically adds add_value to the value of dest,\n@@ -341,1 +341,1 @@\n-  \/\/ easy for the platform to implement one of add_and_fetch or fetch_and_add\n+  \/\/ easy for the platform to implement one of add_then_fetch or fetch_then_add\n@@ -869,1 +869,1 @@\n-  return AddImpl<D, I>::add_and_fetch(dest, add_value, order);\n+  return AddImpl<D, I>::add_then_fetch(dest, add_value, order);\n@@ -873,3 +873,3 @@\n-inline D Atomic::fetch_and_add(D volatile* dest, I add_value,\n-                               atomic_memory_order order) {\n-  return AddImpl<D, I>::fetch_and_add(dest, add_value, order);\n+inline D Atomic::fetch_then_add(D volatile* dest, I add_value,\n+                                atomic_memory_order order) {\n+  return AddImpl<D, I>::fetch_then_add(dest, add_value, order);\n@@ -886,1 +886,1 @@\n-  static D add_and_fetch(D volatile* dest, I add_value, atomic_memory_order order) {\n+  static D add_then_fetch(D volatile* dest, I add_value, atomic_memory_order order) {\n@@ -888,1 +888,1 @@\n-    return PlatformAdd<sizeof(D)>().add_and_fetch(dest, addend, order);\n+    return PlatformAdd<sizeof(D)>().add_then_fetch(dest, addend, order);\n@@ -890,1 +890,1 @@\n-  static D fetch_and_add(D volatile* dest, I add_value, atomic_memory_order order) {\n+  static D fetch_then_add(D volatile* dest, I add_value, atomic_memory_order order) {\n@@ -892,1 +892,1 @@\n-    return PlatformAdd<sizeof(D)>().fetch_and_add(dest, addend, order);\n+    return PlatformAdd<sizeof(D)>().fetch_then_add(dest, addend, order);\n@@ -930,2 +930,2 @@\n-  static P* add_and_fetch(P* volatile* dest, I addend, atomic_memory_order order) {\n-    return scale_result(PlatformAdd<sizeof(P*)>().add_and_fetch(unscale_dest(dest),\n+  static P* add_then_fetch(P* volatile* dest, I addend, atomic_memory_order order) {\n+    return scale_result(PlatformAdd<sizeof(P*)>().add_then_fetch(unscale_dest(dest),\n@@ -936,2 +936,2 @@\n-  static P* fetch_and_add(P* volatile* dest, I addend, atomic_memory_order order) {\n-    return scale_result(PlatformAdd<sizeof(P*)>().fetch_and_add(unscale_dest(dest),\n+  static P* fetch_then_add(P* volatile* dest, I addend, atomic_memory_order order) {\n+    return scale_result(PlatformAdd<sizeof(P*)>().fetch_then_add(unscale_dest(dest),\n","filename":"src\/hotspot\/share\/runtime\/atomic.hpp","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-        size_t claimed = Atomic::fetch_and_add(&_next, _size);\n+        size_t claimed = Atomic::fetch_then_add(&_next, _size);\n","filename":"src\/hotspot\/share\/utilities\/concurrentHashTableTasks.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,1 +63,1 @@\n-    uint index = Atomic::fetch_and_add(&_claim_id, 1u);\n+    uint index = Atomic::fetch_then_add(&_claim_id, 1u);\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_stressCommitUncommit.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-    T value = Atomic::fetch_and_add(&_test_value, five);\n+    T value = Atomic::fetch_then_add(&_test_value, five);\n@@ -85,1 +85,1 @@\n-  value = Atomic::fetch_and_add(&_test_value, 6);\n+  value = Atomic::fetch_then_add(&_test_value, 6);\n","filename":"test\/hotspot\/gtest\/runtime\/test_atomic.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}