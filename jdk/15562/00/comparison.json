{"files":[{"patch":"@@ -1725,0 +1725,2 @@\n+\n+  void update_addp_chain_base(Node* x, Node* old_base, Node* new_base);\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1680,3 +1680,4 @@\n-          \/\/ Chain of AddP: (AddP base (AddP base )) must keep the same base after sinking so:\n-          \/\/ 1- We don't add a CastPP here when the first one is sunk so if the second one is not, their bases remain\n-          \/\/ the same.\n+          \/\/ Chain of AddP nodes: (AddP base (AddP base (AddP base )))\n+          \/\/ All AddP nodes must keep the same base after sinking so:\n+          \/\/ 1- We don't add a CastPP here until the last one of the chain is sunk: if part of the chain is not sunk,\n+          \/\/ their bases remain the same.\n@@ -1707,2 +1708,2 @@\n-                \/\/ Chain of AddP:\n-                \/\/ 2- A CastPP of the base is only added now that both AddP nodes are sunk\n+                \/\/ Chain of AddP nodes:\n+                \/\/ 2- A CastPP of the base is only added now that all AddP nodes are sunk\n@@ -1710,7 +1711,1 @@\n-                  for (DUIterator_Fast imax, i = x->fast_outs(imax); i < imax; i++) {\n-                    Node* u = x->fast_out(i);\n-                    if (u->is_AddP() && u->in(AddPNode::Base) == n->in(AddPNode::Base)) {\n-                      _igvn.replace_input_of(u, AddPNode::Base, cast);\n-                      assert(u->find_out_with(Op_AddP) == nullptr, \"more than 2 chained AddP nodes?\");\n-                    }\n-                  }\n+                  update_addp_chain_base(x, n->in(AddPNode::Base), cast);\n@@ -1731,0 +1726,16 @@\n+void PhaseIdealLoop::update_addp_chain_base(Node* x, Node* old_base, Node* new_base) {\n+  ResourceMark rm;\n+  Node_List wq;\n+  wq.push(x);\n+  while (wq.size() != 0) {\n+    Node* n = wq.pop();\n+    for (DUIterator_Fast imax, i = n->fast_outs(imax); i < imax; i++) {\n+      Node* u = n->fast_out(i);\n+      if (u->is_AddP() && u->in(AddPNode::Base) == old_base) {\n+        _igvn.replace_input_of(u, AddPNode::Base, new_base);\n+        wq.push(u);\n+      }\n+    }\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/loopopts.cpp","additions":23,"deletions":12,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2023, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8315377\n+ * @requires vm.compiler2.enabled\n+ * @summary C2: assert(u->find_out_with(Op_AddP) == nullptr) failed: more than 2 chained AddP nodes?\n+ * @library \/test\/lib\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=TestSinkingMoreThan2AddPNodes::test TestSinkingMoreThan2AddPNodes\n+ *\n+ *\/\n+\n+import jdk.test.lib.Utils;\n+\n+public class TestSinkingMoreThan2AddPNodes {\n+    public static void main(String[] strArr) throws Exception {\n+        Thread t = new Thread(new Runnable() {\n+                public void run() {\n+                    test();\n+                }\n+            });\n+        t.setDaemon(true);\n+        t.start();\n+        Thread.sleep(Utils.adjustTimeout(500));\n+    }\n+\n+    static void test() {\n+        double dArr[] = new double[10];\n+        int i4 = 5, i11, i12 = 2, iArr[] = new int[400];\n+        long l1;\n+        byte by1 = 0;\n+        short s1 = 8;\n+\n+        for (int i = 0; i < iArr.length; i++) {\n+            iArr[i] = (i % 2 == 0) ? 23 : 34;\n+        }\n+\n+        for (i11 = 10; i11 > 9; ) {\n+            l1 = 1;\n+            do {\n+                try {\n+                    i4 = 6 % i4;\n+                    i12 = iArr[(int) l1];\n+                } catch (ArithmeticException a_e) {\n+                }\n+                by1 += 8;\n+                iArr = iArr;\n+            } while (++l1 < 11);\n+        }\n+\n+        long meth_res = i12;\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestSinkingMoreThan2AddPNodes.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"}]}