{"files":[{"patch":"@@ -4600,1 +4600,1 @@\n-                String zeros = Character.toString(zero).repeat(width - sb.length());\n+                String zeros = String.valueOf(zero).repeat(width - sb.length());\n","filename":"src\/java.base\/share\/classes\/java\/util\/Formatter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,3 @@\n+ * @bug 4906370\n+ * @summary Tests to excercise padding on int and double values,\n+ *      with various flag combinations.\n@@ -29,2 +32,3 @@\n-import org.junit.jupiter.api.Nested;\n-import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -33,0 +37,1 @@\n+import static org.junit.jupiter.params.provider.Arguments.arguments;\n@@ -36,212 +41,264 @@\n-    @Nested\n-    class BlankPaddingInt {\n-\n-        @Test\n-        void blankPad_d() {\n-            assertEquals(\"12\", String.format(\"%1d\", 12));\n-            assertEquals(\"12\", String.format(\"%2d\", 12));\n-            assertEquals(\" 12\", String.format(\"%3d\", 12));\n-            assertEquals(\"  12\", String.format(\"%4d\", 12));\n-            assertEquals(\"   12\", String.format(\"%5d\", 12));\n-            assertEquals(\"        12\", String.format(\"%10d\", 12));\n-\n-            assertEquals(\"-12\", String.format(\"%1d\", -12));\n-            assertEquals(\"-12\", String.format(\"%2d\", -12));\n-            assertEquals(\"-12\", String.format(\"%3d\", -12));\n-            assertEquals(\" -12\", String.format(\"%4d\", -12));\n-            assertEquals(\"  -12\", String.format(\"%5d\", -12));\n-            assertEquals(\"       -12\", String.format(\"%10d\", -12));\n-        }\n-\n-        @Test\n-        void blankPad_plus_d() {\n-            assertEquals(\"+12\", String.format(\"%+1d\", 12));\n-            assertEquals(\"+12\", String.format(\"%+2d\", 12));\n-            assertEquals(\"+12\", String.format(\"%+3d\", 12));\n-            assertEquals(\" +12\", String.format(\"%+4d\", 12));\n-            assertEquals(\"  +12\", String.format(\"%+5d\", 12));\n-            assertEquals(\"       +12\", String.format(\"%+10d\", 12));\n-\n-            assertEquals(\"-12\", String.format(\"%+1d\", -12));\n-            assertEquals(\"-12\", String.format(\"%+2d\", -12));\n-            assertEquals(\"-12\", String.format(\"%+3d\", -12));\n-            assertEquals(\" -12\", String.format(\"%+4d\", -12));\n-            assertEquals(\"  -12\", String.format(\"%+5d\", -12));\n-            assertEquals(\"       -12\", String.format(\"%+10d\", -12));\n-        }\n-\n-        @Test\n-        void blankPad_blank_d() {\n-            assertEquals(\" 12\", String.format(\"% 1d\", 12));\n-            assertEquals(\" 12\", String.format(\"% 2d\", 12));\n-            assertEquals(\" 12\", String.format(\"% 3d\", 12));\n-            assertEquals(\"  12\", String.format(\"% 4d\", 12));\n-            assertEquals(\"   12\", String.format(\"% 5d\", 12));\n-            assertEquals(\"        12\", String.format(\"% 10d\", 12));\n-\n-            assertEquals(\"-12\", String.format(\"% 1d\", -12));\n-            assertEquals(\"-12\", String.format(\"% 2d\", -12));\n-            assertEquals(\"-12\", String.format(\"% 3d\", -12));\n-            assertEquals(\" -12\", String.format(\"% 4d\", -12));\n-            assertEquals(\"  -12\", String.format(\"% 5d\", -12));\n-            assertEquals(\"       -12\", String.format(\"% 10d\", -12));\n-        }\n-\n-        @Test\n-        void blankPad_minus_d() {\n-            assertEquals(\"12\", String.format(\"%-1d\", 12));\n-            assertEquals(\"12\", String.format(\"%-2d\", 12));\n-            assertEquals(\"12 \", String.format(\"%-3d\", 12));\n-            assertEquals(\"12  \", String.format(\"%-4d\", 12));\n-            assertEquals(\"12   \", String.format(\"%-5d\", 12));\n-            assertEquals(\"12        \", String.format(\"%-10d\", 12));\n-\n-            assertEquals(\"-12\", String.format(\"%-1d\", -12));\n-            assertEquals(\"-12\", String.format(\"%-2d\", -12));\n-            assertEquals(\"-12\", String.format(\"%-3d\", -12));\n-            assertEquals(\"-12 \", String.format(\"%-4d\", -12));\n-            assertEquals(\"-12  \", String.format(\"%-5d\", -12));\n-            assertEquals(\"-12       \", String.format(\"%-10d\", -12));\n-        }\n-\n-        @Test\n-        void blankPad_minus_plus_d() {\n-            assertEquals(\"+12\", String.format(\"%-+1d\", 12));\n-            assertEquals(\"+12\", String.format(\"%-+2d\", 12));\n-            assertEquals(\"+12\", String.format(\"%-+3d\", 12));\n-            assertEquals(\"+12 \", String.format(\"%-+4d\", 12));\n-            assertEquals(\"+12  \", String.format(\"%-+5d\", 12));\n-            assertEquals(\"+12       \", String.format(\"%-+10d\", 12));\n-\n-            assertEquals(\"-12\", String.format(\"%-+1d\", -12));\n-            assertEquals(\"-12\", String.format(\"%-+2d\", -12));\n-            assertEquals(\"-12\", String.format(\"%-+3d\", -12));\n-            assertEquals(\"-12 \", String.format(\"%-+4d\", -12));\n-            assertEquals(\"-12  \", String.format(\"%-+5d\", -12));\n-            assertEquals(\"-12       \", String.format(\"%-+10d\", -12));\n-        }\n-\n-        @Test\n-        void blankPad_minus_blank_d() {\n-            assertEquals(\" 12\", String.format(\"%- 1d\", 12));\n-            assertEquals(\" 12\", String.format(\"%- 2d\", 12));\n-            assertEquals(\" 12\", String.format(\"%- 3d\", 12));\n-            assertEquals(\" 12 \", String.format(\"%- 4d\", 12));\n-            assertEquals(\" 12  \", String.format(\"%- 5d\", 12));\n-            assertEquals(\" 12       \", String.format(\"%- 10d\", 12));\n-\n-            assertEquals(\"-12\", String.format(\"%- 1d\", -12));\n-            assertEquals(\"-12\", String.format(\"%- 2d\", -12));\n-            assertEquals(\"-12\", String.format(\"%- 3d\", -12));\n-            assertEquals(\"-12 \", String.format(\"%- 4d\", -12));\n-            assertEquals(\"-12  \", String.format(\"%- 5d\", -12));\n-            assertEquals(\"-12       \", String.format(\"%- 10d\", -12));\n-        }\n-\n-    }\n-\n-    @Nested\n-    class BlankPaddingDouble {\n-\n-        @Test\n-        void blankPad_f() {\n-            assertEquals(\"1.2\", String.format(\"%1.1f\", 1.2));\n-            assertEquals(\"1.2\", String.format(\"%2.1f\", 1.2));\n-            assertEquals(\"1.2\", String.format(\"%3.1f\", 1.2));\n-            assertEquals(\" 1.2\", String.format(\"%4.1f\", 1.2));\n-            assertEquals(\"  1.2\", String.format(\"%5.1f\", 1.2));\n-            assertEquals(\"       1.2\", String.format(\"%10.1f\", 1.2));\n-\n-            assertEquals(\"-1.2\", String.format(\"%1.1f\", -1.2));\n-            assertEquals(\"-1.2\", String.format(\"%2.1f\", -1.2));\n-            assertEquals(\"-1.2\", String.format(\"%3.1f\", -1.2));\n-            assertEquals(\"-1.2\", String.format(\"%4.1f\", -1.2));\n-            assertEquals(\" -1.2\", String.format(\"%5.1f\", -1.2));\n-            assertEquals(\"      -1.2\", String.format(\"%10.1f\", -1.2));\n-        }\n-\n-        @Test\n-        void blankPad_plus_f() {\n-            assertEquals(\"+1.2\", String.format(\"%+1.1f\", 1.2));\n-            assertEquals(\"+1.2\", String.format(\"%+2.1f\", 1.2));\n-            assertEquals(\"+1.2\", String.format(\"%+3.1f\", 1.2));\n-            assertEquals(\"+1.2\", String.format(\"%+4.1f\", 1.2));\n-            assertEquals(\" +1.2\", String.format(\"%+5.1f\", 1.2));\n-            assertEquals(\"      +1.2\", String.format(\"%+10.1f\", 1.2));\n-\n-            assertEquals(\"-1.2\", String.format(\"%+1.1f\", -1.2));\n-            assertEquals(\"-1.2\", String.format(\"%+2.1f\", -1.2));\n-            assertEquals(\"-1.2\", String.format(\"%+3.1f\", -1.2));\n-            assertEquals(\"-1.2\", String.format(\"%+4.1f\", -1.2));\n-            assertEquals(\" -1.2\", String.format(\"%+5.1f\", -1.2));\n-            assertEquals(\"      -1.2\", String.format(\"%+10.1f\", -1.2));\n-        }\n-\n-        @Test\n-        void blankPad_blank_f() {\n-            assertEquals(\" 1.2\", String.format(\"% 1.1f\", 1.2));\n-            assertEquals(\" 1.2\", String.format(\"% 2.1f\", 1.2));\n-            assertEquals(\" 1.2\", String.format(\"% 3.1f\", 1.2));\n-            assertEquals(\" 1.2\", String.format(\"% 4.1f\", 1.2));\n-            assertEquals(\"  1.2\", String.format(\"% 5.1f\", 1.2));\n-            assertEquals(\"       1.2\", String.format(\"% 10.1f\", 1.2));\n-\n-            assertEquals(\"-1.2\", String.format(\"% 1.1f\", -1.2));\n-            assertEquals(\"-1.2\", String.format(\"% 2.1f\", -1.2));\n-            assertEquals(\"-1.2\", String.format(\"% 3.1f\", -1.2));\n-            assertEquals(\"-1.2\", String.format(\"% 4.1f\", -1.2));\n-            assertEquals(\" -1.2\", String.format(\"% 5.1f\", -1.2));\n-            assertEquals(\"      -1.2\", String.format(\"% 10.1f\", -1.2));\n-        }\n-\n-        @Test\n-        void blankPad_minus_f() {\n-            assertEquals(\"1.2\", String.format(\"%-1.1f\", 1.2));\n-            assertEquals(\"1.2\", String.format(\"%-2.1f\", 1.2));\n-            assertEquals(\"1.2\", String.format(\"%-3.1f\", 1.2));\n-            assertEquals(\"1.2 \", String.format(\"%-4.1f\", 1.2));\n-            assertEquals(\"1.2  \", String.format(\"%-5.1f\", 1.2));\n-            assertEquals(\"1.2       \", String.format(\"%-10.1f\", 1.2));\n-\n-            assertEquals(\"-1.2\", String.format(\"%-1.1f\", -1.2));\n-            assertEquals(\"-1.2\", String.format(\"%-2.1f\", -1.2));\n-            assertEquals(\"-1.2\", String.format(\"%-3.1f\", -1.2));\n-            assertEquals(\"-1.2\", String.format(\"%-4.1f\", -1.2));\n-            assertEquals(\"-1.2 \", String.format(\"%-5.1f\", -1.2));\n-            assertEquals(\"-1.2      \", String.format(\"%-10.1f\", -1.2));\n-        }\n-\n-        @Test\n-        void blankPad_minus_plus_f() {\n-            assertEquals(\"+1.2\", String.format(\"%-+1.1f\", 1.2));\n-            assertEquals(\"+1.2\", String.format(\"%-+2.1f\", 1.2));\n-            assertEquals(\"+1.2\", String.format(\"%-+3.1f\", 1.2));\n-            assertEquals(\"+1.2\", String.format(\"%-+4.1f\", 1.2));\n-            assertEquals(\"+1.2 \", String.format(\"%-+5.1f\", 1.2));\n-            assertEquals(\"+1.2      \", String.format(\"%-+10.1f\", 1.2));\n-\n-            assertEquals(\"-1.2\", String.format(\"%-+1.1f\", -1.2));\n-            assertEquals(\"-1.2\", String.format(\"%-+2.1f\", -1.2));\n-            assertEquals(\"-1.2\", String.format(\"%-+3.1f\", -1.2));\n-            assertEquals(\"-1.2\", String.format(\"%-+4.1f\", -1.2));\n-            assertEquals(\"-1.2 \", String.format(\"%-+5.1f\", -1.2));\n-            assertEquals(\"-1.2      \", String.format(\"%-+10.1f\", -1.2));\n-        }\n-\n-        @Test\n-        void blankPad_minus_blank_f() {\n-            assertEquals(\" 1.2\", String.format(\"%- 1.1f\", 1.2));\n-            assertEquals(\" 1.2\", String.format(\"%- 2.1f\", 1.2));\n-            assertEquals(\" 1.2\", String.format(\"%- 3.1f\", 1.2));\n-            assertEquals(\" 1.2\", String.format(\"%- 4.1f\", 1.2));\n-            assertEquals(\" 1.2 \", String.format(\"%- 5.1f\", 1.2));\n-            assertEquals(\" 1.2      \", String.format(\"%- 10.1f\", 1.2));\n-\n-            assertEquals(\"-1.2\", String.format(\"%- 1.1f\", -1.2));\n-            assertEquals(\"-1.2\", String.format(\"%- 2.1f\", -1.2));\n-            assertEquals(\"-1.2\", String.format(\"%- 3.1f\", -1.2));\n-            assertEquals(\"-1.2\", String.format(\"%- 4.1f\", -1.2));\n-            assertEquals(\"-1.2 \", String.format(\"%- 5.1f\", -1.2));\n-            assertEquals(\"-1.2      \", String.format(\"%- 10.1f\", -1.2));\n-        }\n-\n+    static Arguments[] padding() {\n+        return new Arguments[] {\n+                \/* blank padding, right adjusted, optional plus sign *\/\n+                arguments(\"12\", \"%1d\", 12),\n+                arguments(\"12\", \"%2d\", 12),\n+                arguments(\" 12\", \"%3d\", 12),\n+                arguments(\"  12\", \"%4d\", 12),\n+                arguments(\"   12\", \"%5d\", 12),\n+                arguments(\"        12\", \"%10d\", 12),\n+\n+                arguments(\"-12\", \"%1d\", -12),\n+                arguments(\"-12\", \"%2d\", -12),\n+                arguments(\"-12\", \"%3d\", -12),\n+                arguments(\" -12\", \"%4d\", -12),\n+                arguments(\"  -12\", \"%5d\", -12),\n+                arguments(\"       -12\", \"%10d\", -12),\n+\n+                arguments(\"1.2\", \"%1.1f\", 1.2),\n+                arguments(\"1.2\", \"%2.1f\", 1.2),\n+                arguments(\"1.2\", \"%3.1f\", 1.2),\n+                arguments(\" 1.2\", \"%4.1f\", 1.2),\n+                arguments(\"  1.2\", \"%5.1f\", 1.2),\n+                arguments(\"       1.2\", \"%10.1f\", 1.2),\n+\n+                arguments(\"-1.2\", \"%1.1f\", -1.2),\n+                arguments(\"-1.2\", \"%2.1f\", -1.2),\n+                arguments(\"-1.2\", \"%3.1f\", -1.2),\n+                arguments(\"-1.2\", \"%4.1f\", -1.2),\n+                arguments(\" -1.2\", \"%5.1f\", -1.2),\n+                arguments(\"      -1.2\", \"%10.1f\", -1.2),\n+\n+                \/* blank padding, right adjusted, mandatory plus sign *\/\n+                arguments(\"+12\", \"%+1d\", 12),\n+                arguments(\"+12\", \"%+2d\", 12),\n+                arguments(\"+12\", \"%+3d\", 12),\n+                arguments(\" +12\", \"%+4d\", 12),\n+                arguments(\"  +12\", \"%+5d\", 12),\n+                arguments(\"       +12\", \"%+10d\", 12),\n+\n+                arguments(\"-12\", \"%+1d\", -12),\n+                arguments(\"-12\", \"%+2d\", -12),\n+                arguments(\"-12\", \"%+3d\", -12),\n+                arguments(\" -12\", \"%+4d\", -12),\n+                arguments(\"  -12\", \"%+5d\", -12),\n+                arguments(\"       -12\", \"%+10d\", -12),\n+\n+                arguments(\"+1.2\", \"%+1.1f\", 1.2),\n+                arguments(\"+1.2\", \"%+2.1f\", 1.2),\n+                arguments(\"+1.2\", \"%+3.1f\", 1.2),\n+                arguments(\"+1.2\", \"%+4.1f\", 1.2),\n+                arguments(\" +1.2\", \"%+5.1f\", 1.2),\n+                arguments(\"      +1.2\", \"%+10.1f\", 1.2),\n+\n+                arguments(\"-1.2\", \"%+1.1f\", -1.2),\n+                arguments(\"-1.2\", \"%+2.1f\", -1.2),\n+                arguments(\"-1.2\", \"%+3.1f\", -1.2),\n+                arguments(\"-1.2\", \"%+4.1f\", -1.2),\n+                arguments(\" -1.2\", \"%+5.1f\", -1.2),\n+                arguments(\"      -1.2\", \"%+10.1f\", -1.2),\n+\n+                \/* blank padding, right adjusted, mandatory blank sign *\/\n+                arguments(\" 12\", \"% 1d\", 12),\n+                arguments(\" 12\", \"% 2d\", 12),\n+                arguments(\" 12\", \"% 3d\", 12),\n+                arguments(\"  12\", \"% 4d\", 12),\n+                arguments(\"   12\", \"% 5d\", 12),\n+                arguments(\"        12\", \"% 10d\", 12),\n+\n+                arguments(\"-12\", \"% 1d\", -12),\n+                arguments(\"-12\", \"% 2d\", -12),\n+                arguments(\"-12\", \"% 3d\", -12),\n+                arguments(\" -12\", \"% 4d\", -12),\n+                arguments(\"  -12\", \"% 5d\", -12),\n+                arguments(\"       -12\", \"% 10d\", -12),\n+\n+                arguments(\" 1.2\", \"% 1.1f\", 1.2),\n+                arguments(\" 1.2\", \"% 2.1f\", 1.2),\n+                arguments(\" 1.2\", \"% 3.1f\", 1.2),\n+                arguments(\" 1.2\", \"% 4.1f\", 1.2),\n+                arguments(\"  1.2\", \"% 5.1f\", 1.2),\n+                arguments(\"       1.2\", \"% 10.1f\", 1.2),\n+\n+                arguments(\"-1.2\", \"% 1.1f\", -1.2),\n+                arguments(\"-1.2\", \"% 2.1f\", -1.2),\n+                arguments(\"-1.2\", \"% 3.1f\", -1.2),\n+                arguments(\"-1.2\", \"% 4.1f\", -1.2),\n+                arguments(\" -1.2\", \"% 5.1f\", -1.2),\n+                arguments(\"      -1.2\", \"% 10.1f\", -1.2),\n+\n+                \/* blank padding, left adjusted, optional sign *\/\n+                arguments(\"12\", \"%-1d\", 12),\n+                arguments(\"12\", \"%-2d\", 12),\n+                arguments(\"12 \", \"%-3d\", 12),\n+                arguments(\"12  \", \"%-4d\", 12),\n+                arguments(\"12   \", \"%-5d\", 12),\n+                arguments(\"12        \", \"%-10d\", 12),\n+\n+                arguments(\"-12\", \"%-1d\", -12),\n+                arguments(\"-12\", \"%-2d\", -12),\n+                arguments(\"-12\", \"%-3d\", -12),\n+                arguments(\"-12 \", \"%-4d\", -12),\n+                arguments(\"-12  \", \"%-5d\", -12),\n+                arguments(\"-12       \", \"%-10d\", -12),\n+\n+                arguments(\"1.2\", \"%-1.1f\", 1.2),\n+                arguments(\"1.2\", \"%-2.1f\", 1.2),\n+                arguments(\"1.2\", \"%-3.1f\", 1.2),\n+                arguments(\"1.2 \", \"%-4.1f\", 1.2),\n+                arguments(\"1.2  \", \"%-5.1f\", 1.2),\n+                arguments(\"1.2       \", \"%-10.1f\", 1.2),\n+\n+                arguments(\"-1.2\", \"%-1.1f\", -1.2),\n+                arguments(\"-1.2\", \"%-2.1f\", -1.2),\n+                arguments(\"-1.2\", \"%-3.1f\", -1.2),\n+                arguments(\"-1.2\", \"%-4.1f\", -1.2),\n+                arguments(\"-1.2 \", \"%-5.1f\", -1.2),\n+                arguments(\"-1.2      \", \"%-10.1f\", -1.2),\n+\n+                \/* blank padding, left adjusted, mandatory plus sign *\/\n+                arguments(\"+12\", \"%-+1d\", 12),\n+                arguments(\"+12\", \"%-+2d\", 12),\n+                arguments(\"+12\", \"%-+3d\", 12),\n+                arguments(\"+12 \", \"%-+4d\", 12),\n+                arguments(\"+12  \", \"%-+5d\", 12),\n+                arguments(\"+12       \", \"%-+10d\", 12),\n+\n+                arguments(\"-12\", \"%-+1d\", -12),\n+                arguments(\"-12\", \"%-+2d\", -12),\n+                arguments(\"-12\", \"%-+3d\", -12),\n+                arguments(\"-12 \", \"%-+4d\", -12),\n+                arguments(\"-12  \", \"%-+5d\", -12),\n+                arguments(\"-12       \", \"%-+10d\", -12),\n+\n+                arguments(\"+1.2\", \"%-+1.1f\", 1.2),\n+                arguments(\"+1.2\", \"%-+2.1f\", 1.2),\n+                arguments(\"+1.2\", \"%-+3.1f\", 1.2),\n+                arguments(\"+1.2\", \"%-+4.1f\", 1.2),\n+                arguments(\"+1.2 \", \"%-+5.1f\", 1.2),\n+                arguments(\"+1.2      \", \"%-+10.1f\", 1.2),\n+\n+                arguments(\"-1.2\", \"%-+1.1f\", -1.2),\n+                arguments(\"-1.2\", \"%-+2.1f\", -1.2),\n+                arguments(\"-1.2\", \"%-+3.1f\", -1.2),\n+                arguments(\"-1.2\", \"%-+4.1f\", -1.2),\n+                arguments(\"-1.2 \", \"%-+5.1f\", -1.2),\n+                arguments(\"-1.2      \", \"%-+10.1f\", -1.2),\n+\n+                \/* blank padding, left adjusted, mandatory blank sign *\/\n+                arguments(\" 12\", \"%- 1d\", 12),\n+                arguments(\" 12\", \"%- 2d\", 12),\n+                arguments(\" 12\", \"%- 3d\", 12),\n+                arguments(\" 12 \", \"%- 4d\", 12),\n+                arguments(\" 12  \", \"%- 5d\", 12),\n+                arguments(\" 12       \", \"%- 10d\", 12),\n+\n+                arguments(\"-12\", \"%- 1d\", -12),\n+                arguments(\"-12\", \"%- 2d\", -12),\n+                arguments(\"-12\", \"%- 3d\", -12),\n+                arguments(\"-12 \", \"%- 4d\", -12),\n+                arguments(\"-12  \", \"%- 5d\", -12),\n+                arguments(\"-12       \", \"%- 10d\", -12),\n+\n+                arguments(\" 1.2\", \"%- 1.1f\", 1.2),\n+                arguments(\" 1.2\", \"%- 2.1f\", 1.2),\n+                arguments(\" 1.2\", \"%- 3.1f\", 1.2),\n+                arguments(\" 1.2\", \"%- 4.1f\", 1.2),\n+                arguments(\" 1.2 \", \"%- 5.1f\", 1.2),\n+                arguments(\" 1.2      \", \"%- 10.1f\", 1.2),\n+\n+                arguments(\"-1.2\", \"%- 1.1f\", -1.2),\n+                arguments(\"-1.2\", \"%- 2.1f\", -1.2),\n+                arguments(\"-1.2\", \"%- 3.1f\", -1.2),\n+                arguments(\"-1.2\", \"%- 4.1f\", -1.2),\n+                arguments(\"-1.2 \", \"%- 5.1f\", -1.2),\n+                arguments(\"-1.2      \", \"%- 10.1f\", -1.2),\n+\n+                \/* zero padding, right adjusted, optional sign *\/\n+                arguments(\"12\", \"%01d\", 12),\n+                arguments(\"12\", \"%02d\", 12),\n+                arguments(\"012\", \"%03d\", 12),\n+                arguments(\"0012\", \"%04d\", 12),\n+                arguments(\"00012\", \"%05d\", 12),\n+                arguments(\"0000000012\", \"%010d\", 12),\n+\n+                arguments(\"-12\", \"%01d\", -12),\n+                arguments(\"-12\", \"%02d\", -12),\n+                arguments(\"-12\", \"%03d\", -12),\n+                arguments(\"-012\", \"%04d\", -12),\n+                arguments(\"-0012\", \"%05d\", -12),\n+                arguments(\"-000000012\", \"%010d\", -12),\n+\n+                arguments(\"1.2\", \"%01.1f\", 1.2),\n+                arguments(\"1.2\", \"%02.1f\", 1.2),\n+                arguments(\"1.2\", \"%03.1f\", 1.2),\n+                arguments(\"01.2\", \"%04.1f\", 1.2),\n+                arguments(\"001.2\", \"%05.1f\", 1.2),\n+                arguments(\"00000001.2\", \"%010.1f\", 1.2),\n+\n+                arguments(\"-1.2\", \"%01.1f\", -1.2),\n+                arguments(\"-1.2\", \"%02.1f\", -1.2),\n+                arguments(\"-1.2\", \"%03.1f\", -1.2),\n+                arguments(\"-1.2\", \"%04.1f\", -1.2),\n+                arguments(\"-01.2\", \"%05.1f\", -1.2),\n+                arguments(\"-0000001.2\", \"%010.1f\", -1.2),\n+\n+                \/* zero padding, right adjusted, mandatory plus sign *\/\n+                arguments(\"+12\", \"%+01d\", 12),\n+                arguments(\"+12\", \"%+02d\", 12),\n+                arguments(\"+12\", \"%+03d\", 12),\n+                arguments(\"+012\", \"%+04d\", 12),\n+                arguments(\"+0012\", \"%+05d\", 12),\n+                arguments(\"+000000012\", \"%+010d\", 12),\n+\n+                arguments(\"-12\", \"%+01d\", -12),\n+                arguments(\"-12\", \"%+02d\", -12),\n+                arguments(\"-12\", \"%+03d\", -12),\n+                arguments(\"-012\", \"%+04d\", -12),\n+                arguments(\"-0012\", \"%+05d\", -12),\n+                arguments(\"-000000012\", \"%+010d\", -12),\n+\n+                arguments(\"+1.2\", \"%+01.1f\", 1.2),\n+                arguments(\"+1.2\", \"%+02.1f\", 1.2),\n+                arguments(\"+1.2\", \"%+03.1f\", 1.2),\n+                arguments(\"+1.2\", \"%+04.1f\", 1.2),\n+                arguments(\"+01.2\", \"%+05.1f\", 1.2),\n+                arguments(\"+0000001.2\", \"%+010.1f\", 1.2),\n+\n+                arguments(\"-1.2\", \"%+01.1f\", -1.2),\n+                arguments(\"-1.2\", \"%+02.1f\", -1.2),\n+                arguments(\"-1.2\", \"%+03.1f\", -1.2),\n+                arguments(\"-1.2\", \"%+04.1f\", -1.2),\n+                arguments(\"-01.2\", \"%+05.1f\", -1.2),\n+                arguments(\"-0000001.2\", \"%+010.1f\", -1.2),\n+\n+                \/* zero padding, right adjusted, mandatory blank sign *\/\n+                arguments(\" 12\", \"% 01d\", 12),\n+                arguments(\" 12\", \"% 02d\", 12),\n+                arguments(\" 12\", \"% 03d\", 12),\n+                arguments(\" 012\", \"% 04d\", 12),\n+                arguments(\" 0012\", \"% 05d\", 12),\n+                arguments(\" 000000012\", \"% 010d\", 12),\n+\n+                arguments(\"-12\", \"% 01d\", -12),\n+                arguments(\"-12\", \"% 02d\", -12),\n+                arguments(\"-12\", \"% 03d\", -12),\n+                arguments(\"-012\", \"% 04d\", -12),\n+                arguments(\"-0012\", \"% 05d\", -12),\n+                arguments(\"-000000012\", \"% 010d\", -12),\n+\n+                arguments(\" 1.2\", \"% 01.1f\", 1.2),\n+                arguments(\" 1.2\", \"% 02.1f\", 1.2),\n+                arguments(\" 1.2\", \"% 03.1f\", 1.2),\n+                arguments(\" 1.2\", \"% 04.1f\", 1.2),\n+                arguments(\" 01.2\", \"% 05.1f\", 1.2),\n+                arguments(\" 0000001.2\", \"% 010.1f\", 1.2),\n+\n+                arguments(\"-1.2\", \"% 01.1f\", -1.2),\n+                arguments(\"-1.2\", \"% 02.1f\", -1.2),\n+                arguments(\"-1.2\", \"% 03.1f\", -1.2),\n+                arguments(\"-1.2\", \"% 04.1f\", -1.2),\n+                arguments(\"-01.2\", \"% 05.1f\", -1.2),\n+                arguments(\"-0000001.2\", \"% 010.1f\", -1.2),\n+\n+        };\n@@ -250,110 +307,4 @@\n-    @Nested\n-    class ZeroPaddingInt {\n-\n-        @Test\n-        void zeroPad_d() {\n-            assertEquals(\"12\", String.format(\"%01d\", 12));\n-            assertEquals(\"12\", String.format(\"%02d\", 12));\n-            assertEquals(\"012\", String.format(\"%03d\", 12));\n-            assertEquals(\"0012\", String.format(\"%04d\", 12));\n-            assertEquals(\"00012\", String.format(\"%05d\", 12));\n-            assertEquals(\"0000000012\", String.format(\"%010d\", 12));\n-\n-            assertEquals(\"-12\", String.format(\"%01d\", -12));\n-            assertEquals(\"-12\", String.format(\"%02d\", -12));\n-            assertEquals(\"-12\", String.format(\"%03d\", -12));\n-            assertEquals(\"-012\", String.format(\"%04d\", -12));\n-            assertEquals(\"-0012\", String.format(\"%05d\", -12));\n-            assertEquals(\"-000000012\", String.format(\"%010d\", -12));\n-        }\n-\n-        @Test\n-        void zeroPad_plus_d() {\n-            assertEquals(\"+12\", String.format(\"%+01d\", 12));\n-            assertEquals(\"+12\", String.format(\"%+02d\", 12));\n-            assertEquals(\"+12\", String.format(\"%+03d\", 12));\n-            assertEquals(\"+012\", String.format(\"%+04d\", 12));\n-            assertEquals(\"+0012\", String.format(\"%+05d\", 12));\n-            assertEquals(\"+000000012\", String.format(\"%+010d\", 12));\n-\n-            assertEquals(\"-12\", String.format(\"%+01d\", -12));\n-            assertEquals(\"-12\", String.format(\"%+02d\", -12));\n-            assertEquals(\"-12\", String.format(\"%+03d\", -12));\n-            assertEquals(\"-012\", String.format(\"%+04d\", -12));\n-            assertEquals(\"-0012\", String.format(\"%+05d\", -12));\n-            assertEquals(\"-000000012\", String.format(\"%+010d\", -12));\n-        }\n-\n-        @Test\n-        void zeroPad_blank_d() {\n-            assertEquals(\" 12\", String.format(\"% 01d\", 12));\n-            assertEquals(\" 12\", String.format(\"% 02d\", 12));\n-            assertEquals(\" 12\", String.format(\"% 03d\", 12));\n-            assertEquals(\" 012\", String.format(\"% 04d\", 12));\n-            assertEquals(\" 0012\", String.format(\"% 05d\", 12));\n-            assertEquals(\" 000000012\", String.format(\"% 010d\", 12));\n-\n-            assertEquals(\"-12\", String.format(\"% 01d\", -12));\n-            assertEquals(\"-12\", String.format(\"% 02d\", -12));\n-            assertEquals(\"-12\", String.format(\"% 03d\", -12));\n-            assertEquals(\"-012\", String.format(\"% 04d\", -12));\n-            assertEquals(\"-0012\", String.format(\"% 05d\", -12));\n-            assertEquals(\"-000000012\", String.format(\"% 010d\", -12));\n-        }\n-\n-    }\n-\n-    @Nested\n-    class ZeroPaddingDouble {\n-\n-        @Test\n-        void zeroPad_f() {\n-            assertEquals(\"1.2\", String.format(\"%01.1f\", 1.2));\n-            assertEquals(\"1.2\", String.format(\"%02.1f\", 1.2));\n-            assertEquals(\"1.2\", String.format(\"%03.1f\", 1.2));\n-            assertEquals(\"01.2\", String.format(\"%04.1f\", 1.2));\n-            assertEquals(\"001.2\", String.format(\"%05.1f\", 1.2));\n-            assertEquals(\"00000001.2\", String.format(\"%010.1f\", 1.2));\n-\n-            assertEquals(\"-1.2\", String.format(\"%01.1f\", -1.2));\n-            assertEquals(\"-1.2\", String.format(\"%02.1f\", -1.2));\n-            assertEquals(\"-1.2\", String.format(\"%03.1f\", -1.2));\n-            assertEquals(\"-1.2\", String.format(\"%04.1f\", -1.2));\n-            assertEquals(\"-01.2\", String.format(\"%05.1f\", -1.2));\n-            assertEquals(\"-0000001.2\", String.format(\"%010.1f\", -1.2));\n-        }\n-\n-        @Test\n-        void zeroPad_plus_f() {\n-            assertEquals(\"+1.2\", String.format(\"%+01.1f\", 1.2));\n-            assertEquals(\"+1.2\", String.format(\"%+02.1f\", 1.2));\n-            assertEquals(\"+1.2\", String.format(\"%+03.1f\", 1.2));\n-            assertEquals(\"+1.2\", String.format(\"%+04.1f\", 1.2));\n-            assertEquals(\"+01.2\", String.format(\"%+05.1f\", 1.2));\n-            assertEquals(\"+0000001.2\", String.format(\"%+010.1f\", 1.2));\n-\n-            assertEquals(\"-1.2\", String.format(\"%+01.1f\", -1.2));\n-            assertEquals(\"-1.2\", String.format(\"%+02.1f\", -1.2));\n-            assertEquals(\"-1.2\", String.format(\"%+03.1f\", -1.2));\n-            assertEquals(\"-1.2\", String.format(\"%+04.1f\", -1.2));\n-            assertEquals(\"-01.2\", String.format(\"%+05.1f\", -1.2));\n-            assertEquals(\"-0000001.2\", String.format(\"%+010.1f\", -1.2));\n-        }\n-\n-        @Test\n-        void zeroPad_blank_f() {\n-            assertEquals(\" 1.2\", String.format(\"% 01.1f\", 1.2));\n-            assertEquals(\" 1.2\", String.format(\"% 02.1f\", 1.2));\n-            assertEquals(\" 1.2\", String.format(\"% 03.1f\", 1.2));\n-            assertEquals(\" 1.2\", String.format(\"% 04.1f\", 1.2));\n-            assertEquals(\" 01.2\", String.format(\"% 05.1f\", 1.2));\n-            assertEquals(\" 0000001.2\", String.format(\"% 010.1f\", 1.2));\n-\n-            assertEquals(\"-1.2\", String.format(\"% 01.1f\", -1.2));\n-            assertEquals(\"-1.2\", String.format(\"% 02.1f\", -1.2));\n-            assertEquals(\"-1.2\", String.format(\"% 03.1f\", -1.2));\n-            assertEquals(\"-1.2\", String.format(\"% 04.1f\", -1.2));\n-            assertEquals(\"-01.2\", String.format(\"% 05.1f\", -1.2));\n-            assertEquals(\"-0000001.2\", String.format(\"% 010.1f\", -1.2));\n-        }\n-\n+    @ParameterizedTest\n+    @MethodSource\n+    void padding(String expected, String format, Object value) {\n+        assertEquals(expected, String.format(format, value));\n","filename":"test\/jdk\/java\/util\/Formatter\/Padding.java","additions":275,"deletions":324,"binary":false,"changes":599,"status":"modified"}]}