{"files":[{"patch":"@@ -2478,0 +2478,1 @@\n+    case Op_VectorLongToMask:\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -154,0 +154,2 @@\n+      case Op_VectorLongToMask:\n+        if (UseSVE < 2 || vlen > 64 || !VM_Version::supports_svebitperm()) return false;\n@@ -5506,0 +5508,14 @@\n+instruct vmask_fromlong(pRegGov dst, iRegL src, vReg vtmp1, vReg vtmp2) %{\n+  match(Set dst (VectorLongToMask src));\n+  effect(TEMP vtmp1, TEMP vtmp2);\n+  ins_cost(10 * SVE_COST);\n+  format %{ \"vmask_fromlong $dst, $src\\t# vector mask fromlong (sve2)\" %}\n+  ins_encode %{\n+    __ sve_vmask_fromlong(as_PRegister($dst$$reg), as_Register($src$$reg),\n+                          Matcher::vector_element_basic_type(this),\n+                          Matcher::vector_length(this),\n+                          as_FloatRegister($vtmp1$$reg), as_FloatRegister($vtmp2$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve.ad","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -149,0 +149,2 @@\n+      case Op_VectorLongToMask:\n+        if (UseSVE < 2 || vlen > 64 || !VM_Version::supports_svebitperm()) return false;\n@@ -3074,0 +3076,14 @@\n+instruct vmask_fromlong(pRegGov dst, iRegL src, vReg vtmp1, vReg vtmp2) %{\n+  match(Set dst (VectorLongToMask src));\n+  effect(TEMP vtmp1, TEMP vtmp2);\n+  ins_cost(10 * SVE_COST);\n+  format %{ \"vmask_fromlong $dst, $src\\t# vector mask fromlong (sve2)\" %}\n+  ins_encode %{\n+    __ sve_vmask_fromlong(as_PRegister($dst$$reg), as_Register($src$$reg),\n+                          Matcher::vector_element_basic_type(this),\n+                          Matcher::vector_length(this),\n+                          as_FloatRegister($vtmp1$$reg), as_FloatRegister($vtmp2$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_sve_ad.m4","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -3833,0 +3833,1 @@\n+  INSN(sve_bdep, 0b01);\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1032,0 +1032,60 @@\n+\/\/ Unpack the mask, a long value in src, into predicate register dst based on the\n+\/\/ corresponding data type. Note that dst can support at most 64 lanes.\n+\/\/ Below example gives the expected dst predicate register in different types, with\n+\/\/ a valid src(0x658D) on a 1024-bit vector size machine.\n+\/\/ BYTE:  dst = 0x00 00 00 00 00 00 00 00 00 00 00 00 00 00 65 8D\n+\/\/ SHORT: dst = 0x00 00 00 00 00 00 00 00 00 00 00 00 14 11 40 51\n+\/\/ INT:   dst = 0x00 00 00 00 00 00 00 00 01 10 01 01 10 00 11 01\n+\/\/ LONG:  dst = 0x00 01 01 00 00 01 00 01 01 00 00 00 01 01 00 01\n+\/\/\n+\/\/ The number of significant bits of src must be equal to lane_cnt. E.g., 0xFF658D which\n+\/\/ has 24 significant bits would be an invalid input if dst predicate register refers to\n+\/\/ a LONG type 1024-bit vector, which has at most 16 lanes.\n+void C2_MacroAssembler::sve_vmask_fromlong(PRegister dst, Register src, BasicType bt, int lane_cnt,\n+                                           FloatRegister vtmp1, FloatRegister vtmp2) {\n+  assert(UseSVE == 2 && VM_Version::supports_svebitperm() &&\n+         lane_cnt <= 64 && is_power_of_2(lane_cnt), \"unsupported\");\n+  Assembler::SIMD_RegVariant size = elemType_to_regVariant(bt);\n+  \/\/ Example:   src = 0x658D, bt = T_BYTE, size = B, lane_cnt = 16\n+  \/\/ Expected:  dst = 0b01101001 10001101\n+\n+  \/\/ Put long value from general purpose register into the first lane of vector.\n+  \/\/ vtmp1 = 0x0000000000000000 | 0x000000000000658D\n+  sve_dup(vtmp1, B, 0);\n+  mov(vtmp1, D, 0, src);\n+\n+  \/\/ As sve_cmp generates mask value with the minimum unit in byte, we should\n+  \/\/ transform the value in the first lane which is mask in bit now to the\n+  \/\/ mask in byte, which can be done by SVE2's BDEP instruction.\n+\n+  \/\/ The first source input of BDEP instruction. Deposite each byte in every 8 bytes.\n+  \/\/ vtmp1 = 0x0000000000000065 | 0x000000000000008D\n+  if (lane_cnt <= 8) {\n+    \/\/ Nothing. As only one byte exsits.\n+  } else if (lane_cnt <= 16) {\n+    ins(vtmp1, B, vtmp1, 8, 1);\n+    mov(vtmp1, B, 1, zr);\n+  } else {\n+    sve_vector_extend(vtmp1, D, vtmp1, B);\n+  }\n+\n+  \/\/ The second source input of BDEP instruction, initialized with 0x01 for each byte.\n+  \/\/ vtmp2 = 0x01010101 0x01010101 0x01010101 0x01010101\n+  sve_dup(vtmp2, B, 1);\n+\n+  \/\/ BDEP vtmp1.D, vtmp1.D, vtmp2.D\n+  \/\/ vtmp1 = 0x0000000000000065 | 0x000000000000008D\n+  \/\/ vtmp2 = 0x0101010101010101 | 0x0101010101010101\n+  \/\/         ---------------------------------------\n+  \/\/ vtmp1 = 0x0001010000010001 | 0x0100000001010001\n+  sve_bdep(vtmp1, D, vtmp1, vtmp2);\n+\n+  if (bt != T_BYTE) {\n+    sve_vector_extend(vtmp1, size, vtmp1, B);\n+  }\n+  \/\/ Generate mask according to the given vector, in which the elements have been\n+  \/\/ extended to expected type.\n+  \/\/ dst = 0b01101001 10001101\n+  sve_cmp(Assembler::NE, dst, size, ptrue, vtmp1, 0);\n+}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp","additions":60,"deletions":0,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -66,0 +66,5 @@\n+  \/\/ Unpack the mask, a long value in src, into predicate register dst based on the\n+  \/\/ corresponding data type. Note that dst can support at most 64 lanes.\n+  void sve_vmask_fromlong(PRegister dst, Register src, BasicType bt, int lane_cnt,\n+                          FloatRegister vtmp1, FloatRegister vtmp2);\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1899,0 +1899,1 @@\n+                       [\"bdep\", \"ZZZ\"],\n","filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1187,0 +1187,1 @@\n+    __ sve_bdep(z10, __ S, z19, z11);                  \/\/       bdep    z10.s, z19.s, z11.s\n@@ -1189,9 +1190,9 @@\n-    __ sve_andv(v10, __ S, p5, z11);                   \/\/       andv s10, p5, z11.s\n-    __ sve_orv(v23, __ D, p6, z8);                     \/\/       orv d23, p6, z8.d\n-    __ sve_eorv(v17, __ S, p5, z19);                   \/\/       eorv s17, p5, z19.s\n-    __ sve_smaxv(v4, __ D, p5, z13);                   \/\/       smaxv d4, p5, z13.d\n-    __ sve_sminv(v22, __ D, p7, z30);                  \/\/       sminv d22, p7, z30.d\n-    __ sve_fminv(v17, __ S, p4, z14);                  \/\/       fminv s17, p4, z14.s\n-    __ sve_fmaxv(v12, __ S, p7, z20);                  \/\/       fmaxv s12, p7, z20.s\n-    __ sve_fadda(v1, __ S, p3, z13);                   \/\/       fadda s1, p3, s1, z13.s\n-    __ sve_uaddv(v7, __ S, p2, z11);                   \/\/       uaddv d7, p2, z11.s\n+    __ sve_andv(v23, __ D, p6, z8);                    \/\/       andv d23, p6, z8.d\n+    __ sve_orv(v17, __ S, p5, z19);                    \/\/       orv s17, p5, z19.s\n+    __ sve_eorv(v4, __ D, p5, z13);                    \/\/       eorv d4, p5, z13.d\n+    __ sve_smaxv(v22, __ D, p7, z30);                  \/\/       smaxv d22, p7, z30.d\n+    __ sve_sminv(v17, __ H, p4, z14);                  \/\/       sminv h17, p4, z14.h\n+    __ sve_fminv(v12, __ S, p7, z20);                  \/\/       fminv s12, p7, z20.s\n+    __ sve_fmaxv(v1, __ S, p3, z13);                   \/\/       fmaxv s1, p3, z13.s\n+    __ sve_fadda(v7, __ D, p2, z11);                   \/\/       fadda d7, p2, d7, z11.d\n+    __ sve_uaddv(v4, __ B, p6, z15);                   \/\/       uaddv d4, p6, z15.b\n@@ -1216,7 +1217,7 @@\n-    0x14000000,     0x17ffffd7,     0x140003e5,     0x94000000,\n-    0x97ffffd4,     0x940003e2,     0x3400000a,     0x34fffa2a,\n-    0x34007bea,     0x35000008,     0x35fff9c8,     0x35007b88,\n-    0xb400000b,     0xb4fff96b,     0xb4007b2b,     0xb500001d,\n-    0xb5fff91d,     0xb5007add,     0x10000013,     0x10fff8b3,\n-    0x10007a73,     0x90000013,     0x36300016,     0x3637f836,\n-    0x363079f6,     0x3758000c,     0x375ff7cc,     0x3758798c,\n+    0x14000000,     0x17ffffd7,     0x140003e6,     0x94000000,\n+    0x97ffffd4,     0x940003e3,     0x3400000a,     0x34fffa2a,\n+    0x34007c0a,     0x35000008,     0x35fff9c8,     0x35007ba8,\n+    0xb400000b,     0xb4fff96b,     0xb4007b4b,     0xb500001d,\n+    0xb5fff91d,     0xb5007afd,     0x10000013,     0x10fff8b3,\n+    0x10007a93,     0x90000013,     0x36300016,     0x3637f836,\n+    0x36307a16,     0x3758000c,     0x375ff7cc,     0x375879ac,\n@@ -1227,13 +1228,13 @@\n-    0x54007760,     0x54000001,     0x54fff541,     0x54007701,\n-    0x54000002,     0x54fff4e2,     0x540076a2,     0x54000002,\n-    0x54fff482,     0x54007642,     0x54000003,     0x54fff423,\n-    0x540075e3,     0x54000003,     0x54fff3c3,     0x54007583,\n-    0x54000004,     0x54fff364,     0x54007524,     0x54000005,\n-    0x54fff305,     0x540074c5,     0x54000006,     0x54fff2a6,\n-    0x54007466,     0x54000007,     0x54fff247,     0x54007407,\n-    0x54000008,     0x54fff1e8,     0x540073a8,     0x54000009,\n-    0x54fff189,     0x54007349,     0x5400000a,     0x54fff12a,\n-    0x540072ea,     0x5400000b,     0x54fff0cb,     0x5400728b,\n-    0x5400000c,     0x54fff06c,     0x5400722c,     0x5400000d,\n-    0x54fff00d,     0x540071cd,     0x5400000e,     0x54ffefae,\n-    0x5400716e,     0x5400000f,     0x54ffef4f,     0x5400710f,\n+    0x54007780,     0x54000001,     0x54fff541,     0x54007721,\n+    0x54000002,     0x54fff4e2,     0x540076c2,     0x54000002,\n+    0x54fff482,     0x54007662,     0x54000003,     0x54fff423,\n+    0x54007603,     0x54000003,     0x54fff3c3,     0x540075a3,\n+    0x54000004,     0x54fff364,     0x54007544,     0x54000005,\n+    0x54fff305,     0x540074e5,     0x54000006,     0x54fff2a6,\n+    0x54007486,     0x54000007,     0x54fff247,     0x54007427,\n+    0x54000008,     0x54fff1e8,     0x540073c8,     0x54000009,\n+    0x54fff189,     0x54007369,     0x5400000a,     0x54fff12a,\n+    0x5400730a,     0x5400000b,     0x54fff0cb,     0x540072ab,\n+    0x5400000c,     0x54fff06c,     0x5400724c,     0x5400000d,\n+    0x54fff00d,     0x540071ed,     0x5400000e,     0x54ffefae,\n+    0x5400718e,     0x5400000f,     0x54ffef4f,     0x5400712f,\n@@ -1463,3 +1464,4 @@\n-    0x05776f59,     0x4501b2b5,     0x049a356a,     0x04d83917,\n-    0x04993671,     0x04c835a4,     0x04ca3fd6,     0x658731d1,\n-    0x65863e8c,     0x65982da1,     0x04812967,\n+    0x05776f59,     0x4501b2b5,     0x458bb66a,     0x04da3917,\n+    0x04983671,     0x04d935a4,     0x04c83fd6,     0x044a31d1,\n+    0x65873e8c,     0x65862da1,     0x65d82967,     0x040139e4,\n+\n","filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h","additions":34,"deletions":32,"binary":false,"changes":66,"status":"modified"}]}