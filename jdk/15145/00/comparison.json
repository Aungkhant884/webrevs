{"files":[{"patch":"@@ -65,1 +65,1 @@\n-  return MallocSiteTable::access_stack(stack, _mst_marker);\n+  return MallocSiteTable::access_stack(stack, _bucket);\n","filename":"src\/hotspot\/share\/services\/mallocHeader.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+\n@@ -59,4 +60,9 @@\n- *     0        1        2        3        4        5        6        7\n- * +--------+--------+--------+--------+--------+--------+--------+--------+\n- * |                            64-bit size                                |  ...\n- * +--------+--------+--------+--------+--------+--------+--------+--------+\n+ *           0        1        2        3        4        5        6        7\n+ *       +--------+--------+--------+--------+--------+--------+--------+--------+\n+ *       |                            64-bit size                                |  ...\n+ *       +--------+--------+--------+--------+--------+--------+--------+--------+\n+ *\n+ *           8        9        10       11       12       13       14       15\n+ *       +--------+--------+--------+--------+--------+--------+--------+--------+\n+ *  ...  |  bucket index   | bucket position | flags  | unused |     canary      |  ...\n+ *       +--------+--------+--------+--------+--------+--------+--------+--------+\n@@ -64,4 +70,4 @@\n- *           8        9        10       11       12       13       14       15          16 ++\n- *       +--------+--------+--------+--------+--------+--------+--------+--------+  ------------------------\n- *  ...  |   malloc site table marker        | flags  | unused |     canary      |  ... User payload ....\n- *       +--------+--------+--------+--------+--------+--------+--------+--------+  ------------------------\n+ *       16 ++\n+ *       ------------------------\n+ *  ...  ... User payload ....     ...\n+ *       ------------------------\n@@ -69,0 +75,6 @@\n+ *       footer[0] footer[1]\n+ *       +--------+--------+\n+ *  ...  |     canary      |\n+ *       +--------+--------+\n+ *\n+\n@@ -71,4 +83,4 @@\n- *     0        1        2        3        4        5        6        7\n- * +--------+--------+--------+--------+--------+--------+--------+--------+\n- * |            alt. canary            |           32-bit size             |  ...\n- * +--------+--------+--------+--------+--------+--------+--------+--------+\n+ *           0        1        2        3        4        5        6        7\n+ *       +--------+--------+--------+--------+--------+--------+--------+--------+\n+ *       |            alt. canary            |           32-bit size             |  ...\n+ *       +--------+--------+--------+--------+--------+--------+--------+--------+\n@@ -76,4 +88,4 @@\n- *           8        9        10       11       12       13       14       15          16 ++\n- *       +--------+--------+--------+--------+--------+--------+--------+--------+  ------------------------\n- *  ...  |   malloc site table marker        | flags  | unused |     canary      |  ... User payload ....\n- *       +--------+--------+--------+--------+--------+--------+--------+--------+  ------------------------\n+ *           8        9        10       11       12       13       14       15\n+ *       +--------+--------+--------+--------+--------+--------+--------+--------+\n+ *  ...  |  bucket index   | bucket position | flags  | unused |     canary      |  ...\n+ *       +--------+--------+--------+--------+--------+--------+--------+--------+\n@@ -81,0 +93,11 @@\n+ *       16 ++\n+ *       ------------------------\n+ *  ...  ... User payload ....     ...\n+ *       ------------------------\n+ *\n+ *       footer[0] footer[1]\n+ *       +--------+--------+\n+ *  ...  |     canary      |\n+ *       +--------+--------+\n+ *\n+\n@@ -91,0 +114,10 @@\n+\n+public:\n+  struct alignas(uint32_t) BucketInfo {\n+    const uint16_t index;\n+    const uint16_t position;\n+    inline BucketInfo(uint16_t idx, uint16_t pos) : index(idx), position(pos) { }\n+  };\n+  STATIC_ASSERT(sizeof(BucketInfo) == sizeof(uint32_t));\n+\n+private:\n@@ -94,1 +127,1 @@\n-  const uint32_t _mst_marker;\n+  const BucketInfo _bucket;\n@@ -124,0 +157,1 @@\n+    const BucketInfo bucket;\n@@ -125,1 +159,0 @@\n-    const uint32_t mst_marker;\n@@ -128,1 +161,1 @@\n-  inline MallocHeader(size_t size, MEMFLAGS flags, uint32_t mst_marker);\n+  inline MallocHeader(size_t size, MEMFLAGS flags, BucketInfo bucket);\n@@ -132,1 +165,0 @@\n-  inline uint32_t mst_marker() const { return _mst_marker; }\n@@ -137,1 +169,1 @@\n-    return FreeInfo{this->size(), this->flags(), this->mst_marker()};\n+    return FreeInfo{this->_size, this->_bucket, this->_flags};\n@@ -142,1 +174,0 @@\n-\n@@ -167,1 +198,0 @@\n-\n","filename":"src\/hotspot\/share\/services\/mallocHeader.hpp","additions":53,"deletions":23,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -37,2 +37,2 @@\n-inline MallocHeader::MallocHeader(size_t size, MEMFLAGS flags, uint32_t mst_marker)\n-  : _size(size), _mst_marker(mst_marker), _flags(flags),\n+inline MallocHeader::MallocHeader(size_t size, MEMFLAGS flags, BucketInfo bucket)\n+  : _size(size), _bucket(bucket), _flags(flags),\n","filename":"src\/hotspot\/share\/services\/mallocHeader.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -104,0 +104,3 @@\n+#define ASSERT_MALLOCSITE_TABLE_BUCKET(index, position) \\\n+  assert(index <= MAX_MALLOCSITE_TABLE_SIZE && position < MAX_MALLOCSITE_TABLE_BUCKET_LENGTH, \"overflow\");\n+\n@@ -115,1 +118,1 @@\n-MallocSite* MallocSiteTable::lookup_or_add(const NativeCallStack& key, uint32_t* marker, MEMFLAGS flags) {\n+MallocSite* MallocSiteTable::lookup_or_add(const NativeCallStack& key, uint16_t* bucket_idx, uint16_t* bucket_pos, MEMFLAGS flags) {\n@@ -119,1 +122,2 @@\n-  *marker = 0;\n+  *bucket_idx = 0;\n+  *bucket_pos = 0;\n@@ -129,1 +133,3 @@\n-      *marker = build_marker(index, 0);\n+      *bucket_idx = index;\n+      *bucket_pos = 0;\n+      ASSERT_MALLOCSITE_TABLE_BUCKET(*bucket_idx, *bucket_pos)\n@@ -138,1 +144,1 @@\n-  while (head != nullptr && pos_idx < MAX_BUCKET_LENGTH) {\n+  while (head != nullptr && pos_idx < MAX_MALLOCSITE_TABLE_BUCKET_LENGTH) {\n@@ -142,1 +148,3 @@\n-        *marker = build_marker(index, pos_idx);\n+        *bucket_idx = index;\n+        *bucket_pos = pos_idx;\n+        ASSERT_MALLOCSITE_TABLE_BUCKET(*bucket_idx, *bucket_pos)\n@@ -147,1 +155,1 @@\n-    if (head->next() == nullptr && pos_idx < (MAX_BUCKET_LENGTH - 1)) {\n+    if (head->next() == nullptr && pos_idx < (MAX_MALLOCSITE_TABLE_BUCKET_LENGTH - 1)) {\n@@ -153,1 +161,3 @@\n-        *marker = build_marker(index, pos_idx);\n+        *bucket_idx = index;\n+        *bucket_pos = pos_idx;\n+        ASSERT_MALLOCSITE_TABLE_BUCKET(*bucket_idx, *bucket_pos)\n@@ -166,5 +176,3 @@\n-MallocSite* MallocSiteTable::malloc_site(uint32_t marker) {\n-  uint16_t bucket_idx = bucket_idx_from_marker(marker);\n-  assert(bucket_idx < table_size, \"Invalid bucket index\");\n-  const uint16_t pos_idx = pos_idx_from_marker(marker);\n-  MallocSiteHashtableEntry* head = _table[bucket_idx];\n+MallocSite* MallocSiteTable::malloc_site(MallocHeader::BucketInfo bucket) {\n+  assert(bucket.index < table_size, \"Invalid bucket index\");\n+  MallocSiteHashtableEntry* head = _table[bucket.index];\n@@ -172,1 +180,1 @@\n-       index < pos_idx && head != nullptr;\n+       index < bucket.position && head != nullptr;\n","filename":"src\/hotspot\/share\/services\/mallocSiteTable.cpp","additions":21,"deletions":13,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -112,1 +112,1 @@\n-#define MAX_MALLOCSITE_TABLE_SIZE (USHRT_MAX - 1)\n+#define MAX_MALLOCSITE_TABLE_SIZE           (USHRT_MAX - 1)\n@@ -114,1 +114,1 @@\n-#define MAX_BUCKET_LENGTH         (USHRT_MAX - 1)\n+#define MAX_MALLOCSITE_TABLE_BUCKET_LENGTH  (USHRT_MAX - 1)\n@@ -118,7 +118,0 @@\n-  static uint32_t build_marker(unsigned bucket_idx, unsigned pos_idx) {\n-    assert(bucket_idx <= MAX_MALLOCSITE_TABLE_SIZE && pos_idx < MAX_BUCKET_LENGTH, \"overflow\");\n-    return (uint32_t)bucket_idx << 16 | pos_idx;\n-  }\n-  static uint16_t bucket_idx_from_marker(uint32_t marker) { return (uint16_t)(marker >> 16); }\n-  static uint16_t pos_idx_from_marker(uint32_t marker) { return marker & 0xFFFF; }\n-\n@@ -134,2 +127,2 @@\n-  static inline bool access_stack(NativeCallStack& stack, uint32_t marker) {\n-    MallocSite* site = malloc_site(marker);\n+  static inline bool access_stack(NativeCallStack& stack, MallocHeader::BucketInfo bucket) {\n+    MallocSite* site = malloc_site(bucket);\n@@ -144,8 +137,5 @@\n-  \/\/ Return true if the allocation is recorded successfully and updates marker\n-  \/\/ to indicate the entry where the allocation information was recorded.\n-  \/\/ Return false only occurs under rare scenarios:\n-  \/\/  1. out of memory\n-  \/\/  2. overflow hash bucket\n-  static inline bool allocation_at(const NativeCallStack& stack, size_t size,\n-      uint32_t* marker, MEMFLAGS flags) {\n-    MallocSite* site = lookup_or_add(stack, marker, flags);\n+  \/\/ Returns BucketInfo to indicate where the allocation information was recorded.\n+  static inline MallocHeader::BucketInfo allocation_at(const NativeCallStack& stack, size_t size, MEMFLAGS flags) {\n+    uint16_t bucket_idx = 0;\n+    uint16_t bucket_pos = 0;\n+    MallocSite* site = lookup_or_add(stack, &bucket_idx, &bucket_pos, flags);\n@@ -153,1 +143,1 @@\n-    return site != nullptr;\n+    return MallocHeader::BucketInfo(bucket_idx, bucket_pos);\n@@ -156,4 +146,4 @@\n-  \/\/ Record memory deallocation. marker indicates where the allocation\n-  \/\/ information was recorded.\n-  static inline bool deallocation_at(size_t size, uint32_t marker) {\n-    MallocSite* site = malloc_site(marker);\n+  \/\/ Record memory deallocation.\n+  \/\/ BucketInfo indicate allocation information.\n+  static inline bool deallocation_at(size_t size, MallocHeader::BucketInfo bucket) {\n+    MallocSite* site = malloc_site(bucket);\n@@ -175,2 +165,2 @@\n-  static MallocSite* lookup_or_add(const NativeCallStack& key, uint32_t* marker, MEMFLAGS flags);\n-  static MallocSite* malloc_site(uint32_t marker);\n+  static MallocSite* lookup_or_add(const NativeCallStack& key, uint16_t* bucket_idx, uint16_t* bucket_pos, MEMFLAGS flags);\n+  static MallocSite* malloc_site(MallocHeader::BucketInfo bucket);\n","filename":"src\/hotspot\/share\/services\/mallocSiteTable.hpp","additions":16,"deletions":26,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -149,0 +149,2 @@\n+  uint16_t index = 0;\n+  uint16_t position = 0;\n@@ -150,1 +152,0 @@\n-  uint32_t mst_marker = 0;\n@@ -152,1 +153,3 @@\n-    MallocSiteTable::allocation_at(stack, size, &mst_marker, flags);\n+    MallocHeader::BucketInfo bucket = MallocSiteTable::allocation_at(stack, size, flags);\n+    index = bucket.index;\n+    position = bucket.position;\n@@ -156,1 +159,1 @@\n-  MallocHeader* const header = ::new (malloc_base)MallocHeader(size, flags, mst_marker);\n+  MallocHeader* const header = ::new (malloc_base)MallocHeader(size, flags, MallocHeader::BucketInfo(index, position));\n@@ -191,1 +194,1 @@\n-    MallocSiteTable::deallocation_at(free_info.size, free_info.mst_marker);\n+    MallocSiteTable::deallocation_at(free_info.size, free_info.bucket);\n","filename":"src\/hotspot\/share\/services\/mallocTracker.cpp","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"}]}