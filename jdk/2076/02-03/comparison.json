{"files":[{"patch":"@@ -29,1 +29,1 @@\n-final class DCollinearSimplifier implements DPathConsumer2D {\n+final class CollinearSimplifier implements DPathConsumer2D {\n@@ -43,1 +43,1 @@\n-    DCollinearSimplifier() {\n+    CollinearSimplifier() {\n@@ -46,1 +46,1 @@\n-    public DCollinearSimplifier init(DPathConsumer2D delegate) {\n+    public CollinearSimplifier init(DPathConsumer2D delegate) {\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/marlin\/CollinearSimplifier.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/marlin\/DCollinearSimplifier.java","status":"renamed"},{"patch":"@@ -28,1 +28,1 @@\n-final class DCurve {\n+final class Curve {\n@@ -33,1 +33,1 @@\n-    DCurve() {\n+    Curve() {\n@@ -116,1 +116,1 @@\n-        return DHelpers.quadraticRoots(dax, dbx, cx, roots, off);\n+        return Helpers.quadraticRoots(dax, dbx, cx, roots, off);\n@@ -120,1 +120,1 @@\n-        return DHelpers.quadraticRoots(day, dby, cy, roots, off);\n+        return Helpers.quadraticRoots(day, dby, cy, roots, off);\n@@ -131,1 +131,1 @@\n-        return DHelpers.quadraticRoots(a, b, c, pts, off);\n+        return Helpers.quadraticRoots(a, b, c, pts, off);\n@@ -136,1 +136,1 @@\n-        return DHelpers.cubicRootsInAB(ax, bx, cx, dx - x, ts, off, 0.0d, 1.0d);\n+        return Helpers.cubicRootsInAB(ax, bx, cx, dx - x, ts, off, 0.0d, 1.0d);\n@@ -141,1 +141,1 @@\n-        return DHelpers.cubicRootsInAB(ay, by, cy, dy - y, ts, off, 0.0d, 1.0d);\n+        return Helpers.cubicRootsInAB(ay, by, cy, dy - y, ts, off, 0.0d, 1.0d);\n@@ -158,1 +158,1 @@\n-        return DHelpers.cubicRootsInAB(a, b, c, d, pts, off, 0.0d, 1.0d);\n+        return Helpers.cubicRootsInAB(a, b, c, d, pts, off, 0.0d, 1.0d);\n@@ -211,1 +211,1 @@\n-    \/\/ algorithm in DHelpers.java\n+    \/\/ algorithm in Helpers.java\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/marlin\/Curve.java","additions":9,"deletions":9,"binary":false,"changes":18,"previous_filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/marlin\/DCurve.java","status":"renamed"},{"patch":"@@ -68,1 +68,1 @@\n-            PathIterator getNormalizingPathIterator(final DRendererContext rdrCtx,\n+            PathIterator getNormalizingPathIterator(final RendererContext rdrCtx,\n@@ -77,1 +77,1 @@\n-            PathIterator getNormalizingPathIterator(final DRendererContext rdrCtx,\n+            PathIterator getNormalizingPathIterator(final RendererContext rdrCtx,\n@@ -86,1 +86,1 @@\n-            PathIterator getNormalizingPathIterator(final DRendererContext rdrCtx,\n+            PathIterator getNormalizingPathIterator(final RendererContext rdrCtx,\n@@ -94,1 +94,1 @@\n-        abstract PathIterator getNormalizingPathIterator(DRendererContext rdrCtx,\n+        abstract PathIterator getNormalizingPathIterator(RendererContext rdrCtx,\n@@ -132,1 +132,1 @@\n-        final DRendererContext rdrCtx = getRendererContext();\n+        final RendererContext rdrCtx = getRendererContext();\n@@ -154,1 +154,1 @@\n-            \/\/ recycle the DRendererContext instance\n+            \/\/ recycle the RendererContext instance\n@@ -252,1 +252,1 @@\n-        final DRendererContext rdrCtx = getRendererContext();\n+        final RendererContext rdrCtx = getRendererContext();\n@@ -287,1 +287,1 @@\n-            \/\/ recycle the DRendererContext instance\n+            \/\/ recycle the RendererContext instance\n@@ -292,1 +292,1 @@\n-    void strokeTo(final DRendererContext rdrCtx,\n+    void strokeTo(final RendererContext rdrCtx,\n@@ -393,1 +393,1 @@\n-    void strokeTo(final DRendererContext rdrCtx,\n+    void strokeTo(final RendererContext rdrCtx,\n@@ -497,1 +497,1 @@\n-        final DTransformingPathConsumer2D transformerPC2D = rdrCtx.transformerPC2D;\n+        final TransformingPathConsumer2D transformerPC2D = rdrCtx.transformerPC2D;\n@@ -727,1 +727,1 @@\n-    private static void pathTo(final DRendererContext rdrCtx, final PathIterator pi,\n+    private static void pathTo(final RendererContext rdrCtx, final PathIterator pi,\n@@ -913,1 +913,1 @@\n-        DRenderer r = null;\n+        Renderer r = null;\n@@ -915,1 +915,1 @@\n-        final DRendererContext rdrCtx = getRendererContext();\n+        final RendererContext rdrCtx = getRendererContext();\n@@ -922,2 +922,2 @@\n-                final double rdrOffX = DRenderer.RDR_OFFSET_X;\n-                final double rdrOffY = DRenderer.RDR_OFFSET_Y;\n+                final double rdrOffX = Renderer.RDR_OFFSET_X;\n+                final double rdrOffY = Renderer.RDR_OFFSET_Y;\n@@ -1036,1 +1036,1 @@\n-        DRenderer r = null;\n+        Renderer r = null;\n@@ -1038,1 +1038,1 @@\n-        final DRendererContext rdrCtx = getRendererContext();\n+        final RendererContext rdrCtx = getRendererContext();\n@@ -1107,2 +1107,2 @@\n-    \/\/ --- DRendererContext handling ---\n-    \/\/ use ThreadLocal or ConcurrentLinkedQueue to get one DRendererContext\n+    \/\/ --- RendererContext handling ---\n+    \/\/ use ThreadLocal or ConcurrentLinkedQueue to get one RendererContext\n@@ -1114,2 +1114,2 @@\n-    \/\/ Per-thread DRendererContext\n-    private static final ReentrantContextProvider<DRendererContext> RDR_CTX_PROVIDER;\n+    \/\/ Per-thread RendererContext\n+    private static final ReentrantContextProvider<RendererContext> RDR_CTX_PROVIDER;\n@@ -1139,1 +1139,1 @@\n-            RDR_CTX_PROVIDER = new ReentrantContextProviderTL<DRendererContext>(REF_TYPE)\n+            RDR_CTX_PROVIDER = new ReentrantContextProviderTL<RendererContext>(REF_TYPE)\n@@ -1142,2 +1142,2 @@\n-                    protected DRendererContext newContext() {\n-                        return DRendererContext.createContext();\n+                    protected RendererContext newContext() {\n+                        return RendererContext.createContext();\n@@ -1147,1 +1147,1 @@\n-            RDR_CTX_PROVIDER = new ReentrantContextProviderCLQ<DRendererContext>(REF_TYPE)\n+            RDR_CTX_PROVIDER = new ReentrantContextProviderCLQ<RendererContext>(REF_TYPE)\n@@ -1150,2 +1150,2 @@\n-                    protected DRendererContext newContext() {\n-                        return DRendererContext.createContext();\n+                    protected RendererContext newContext() {\n+                        return RendererContext.createContext();\n@@ -1270,3 +1270,3 @@\n-        logInfo(\"CUB_DEC_BND  = \" + DRenderer.CUB_DEC_BND);\n-        logInfo(\"CUB_INC_BND  = \" + DRenderer.CUB_INC_BND);\n-        logInfo(\"QUAD_DEC_BND = \" + DRenderer.QUAD_DEC_BND);\n+        logInfo(\"CUB_DEC_BND  = \" + Renderer.CUB_DEC_BND);\n+        logInfo(\"CUB_INC_BND  = \" + Renderer.CUB_INC_BND);\n+        logInfo(\"QUAD_DEC_BND = \" + Renderer.QUAD_DEC_BND);\n@@ -1277,1 +1277,1 @@\n-                + DRenderer.INITIAL_CROSSING_COUNT);\n+                + Renderer.INITIAL_CROSSING_COUNT);\n@@ -1284,2 +1284,2 @@\n-     * Get the DRendererContext instance dedicated to the current thread\n-     * @return DRendererContext instance\n+     * Get the RendererContext instance dedicated to the current thread\n+     * @return RendererContext instance\n@@ -1288,2 +1288,2 @@\n-    static DRendererContext getRendererContext() {\n-        final DRendererContext rdrCtx = RDR_CTX_PROVIDER.acquire();\n+    static RendererContext getRendererContext() {\n+        final RendererContext rdrCtx = RDR_CTX_PROVIDER.acquire();\n@@ -1297,2 +1297,2 @@\n-     * Reset and return the given DRendererContext instance for reuse\n-     * @param rdrCtx DRendererContext instance\n+     * Reset and return the given RendererContext instance for reuse\n+     * @param rdrCtx RendererContext instance\n@@ -1300,1 +1300,1 @@\n-    static void returnRendererContext(final DRendererContext rdrCtx) {\n+    static void returnRendererContext(final RendererContext rdrCtx) {\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/marlin\/DMarlinRenderingEngine.java","additions":39,"deletions":39,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n-import sun.java2d.marlin.DTransformingPathConsumer2D.CurveBasicMonotonizer;\n-import sun.java2d.marlin.DTransformingPathConsumer2D.CurveClipSplitter;\n+import sun.java2d.marlin.TransformingPathConsumer2D.CurveBasicMonotonizer;\n+import sun.java2d.marlin.TransformingPathConsumer2D.CurveClipSplitter;\n@@ -33,1 +33,1 @@\n- * The <code>DDasher<\/code> class takes a series of linear commands\n+ * The <code>Dasher<\/code> class takes a series of linear commands\n@@ -43,1 +43,1 @@\n-final class DDasher implements DPathConsumer2D, MarlinConst {\n+final class Dasher implements DPathConsumer2D, MarlinConst {\n@@ -80,1 +80,1 @@\n-    final DRendererContext rdrCtx;\n+    final RendererContext rdrCtx;\n@@ -114,1 +114,1 @@\n-     * Constructs a <code>DDasher<\/code>.\n+     * Constructs a <code>Dasher<\/code>.\n@@ -117,1 +117,1 @@\n-    DDasher(final DRendererContext rdrCtx) {\n+    Dasher(final RendererContext rdrCtx) {\n@@ -133,1 +133,1 @@\n-     * Initialize the <code>DDasher<\/code>.\n+     * Initialize the <code>Dasher<\/code>.\n@@ -142,1 +142,1 @@\n-    DDasher init(final DPathConsumer2D out, final double[] dash, final int dashLen,\n+    Dasher init(final DPathConsumer2D out, final double[] dash, final int dashLen,\n@@ -265,1 +265,1 @@\n-            final int outcode = DHelpers.outcode(x0, y0, clipRect);\n+            final int outcode = Helpers.outcode(x0, y0, clipRect);\n@@ -356,1 +356,1 @@\n-            final int outcode1 = DHelpers.outcode(x1, y1, clipRect);\n+            final int outcode1 = Helpers.outcode(x1, y1, clipRect);\n@@ -562,1 +562,1 @@\n-                DHelpers.subdivideAt((t - prevT) \/ (1.0d - prevT),\n+                Helpers.subdivideAt((t - prevT) \/ (1.0d - prevT),\n@@ -730,1 +730,1 @@\n-                if (!DHelpers.within(len1, len2, err * len2)) {\n+                if (!Helpers.within(len1, len2, err * len2)) {\n@@ -740,2 +740,2 @@\n-                    if (!(DHelpers.within(len2, len3, errLen3) &&\n-                          DHelpers.within(len1, len3, errLen3))) {\n+                    if (!(Helpers.within(len2, len3, errLen3) &&\n+                          Helpers.within(len1, len3, errLen3))) {\n@@ -812,1 +812,1 @@\n-                final int n = DHelpers.cubicRootsInAB(a, b, c, d, nextRoots, 0, 0.0d, 1.0d);\n+                final int n = Helpers.cubicRootsInAB(a, b, c, d, nextRoots, 0, 0.0d, 1.0d);\n@@ -885,1 +885,1 @@\n-                DHelpers.subdivide(recCurveStack[recLevel],\n+                Helpers.subdivide(recCurveStack[recLevel],\n@@ -905,1 +905,1 @@\n-                final double len = DHelpers.linelen(x0, y0, x1, y1);\n+                final double len = Helpers.linelen(x0, y0, x1, y1);\n@@ -912,1 +912,1 @@\n-            final double lineLen = DHelpers.linelen(curve[0], curve[1], x0, y0);\n+            final double lineLen = Helpers.linelen(curve[0], curve[1], x0, y0);\n@@ -929,3 +929,3 @@\n-            final int outcode1 = DHelpers.outcode(x1, y1, clipRect);\n-            final int outcode2 = DHelpers.outcode(x2, y2, clipRect);\n-            final int outcode3 = DHelpers.outcode(x3, y3, clipRect);\n+            final int outcode1 = Helpers.outcode(x1, y1, clipRect);\n+            final int outcode2 = Helpers.outcode(x2, y2, clipRect);\n+            final int outcode3 = Helpers.outcode(x3, y3, clipRect);\n@@ -1016,2 +1016,2 @@\n-            final int outcode1 = DHelpers.outcode(x1, y1, clipRect);\n-            final int outcode2 = DHelpers.outcode(x2, y2, clipRect);\n+            final int outcode1 = Helpers.outcode(x1, y1, clipRect);\n+            final int outcode2 = Helpers.outcode(x2, y2, clipRect);\n@@ -1120,1 +1120,1 @@\n-        throw new InternalError(\"DDasher does not use a native consumer\");\n+        throw new InternalError(\"Dasher does not use a native consumer\");\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/marlin\/Dasher.java","additions":25,"deletions":25,"binary":false,"changes":50,"previous_filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/marlin\/DDasher.java","status":"renamed"},{"patch":"@@ -32,1 +32,1 @@\n-final class DHelpers implements MarlinConst {\n+final class Helpers implements MarlinConst {\n@@ -34,1 +34,1 @@\n-    private DHelpers() {\n+    private Helpers() {\n@@ -238,1 +238,1 @@\n-    static int findSubdivPoints(final DCurve c, final double[] pts,\n+    static int findSubdivPoints(final Curve c, final double[] pts,\n@@ -299,1 +299,1 @@\n-    static int findClipPoints(final DCurve curve, final double[] pts,\n+    static int findClipPoints(final Curve curve, final double[] pts,\n@@ -638,1 +638,1 @@\n-        PolyStack(final DRendererContext rdrCtx) {\n+        PolyStack(final RendererContext rdrCtx) {\n@@ -642,1 +642,1 @@\n-        PolyStack(final DRendererContext rdrCtx,\n+        PolyStack(final RendererContext rdrCtx,\n@@ -877,1 +877,1 @@\n-        IndexStack(final DRendererContext rdrCtx) {\n+        IndexStack(final RendererContext rdrCtx) {\n@@ -881,1 +881,1 @@\n-        IndexStack(final DRendererContext rdrCtx,\n+        IndexStack(final RendererContext rdrCtx,\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/marlin\/Helpers.java","additions":8,"deletions":8,"binary":false,"changes":16,"previous_filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/marlin\/DHelpers.java","status":"renamed"},{"patch":"@@ -110,1 +110,1 @@\n-    MarlinCache(final DRendererContext rdrCtx) {\n+    MarlinCache(final RendererContext rdrCtx) {\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/marlin\/MarlinCache.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-    private final DRenderer renderer;\n+    private final Renderer renderer;\n@@ -62,1 +62,1 @@\n-    MarlinTileGenerator(final RendererStats stats, final DRenderer r,\n+    MarlinTileGenerator(final RendererStats stats, final Renderer r,\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/marlin\/MarlinTileGenerator.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-final class DPathSimplifier implements DPathConsumer2D {\n+final class PathSimplifier implements DPathConsumer2D {\n@@ -38,1 +38,1 @@\n-    DPathSimplifier() {\n+    PathSimplifier() {\n@@ -41,1 +41,1 @@\n-    DPathSimplifier init(final DPathConsumer2D delegate) {\n+    PathSimplifier init(final DPathConsumer2D delegate) {\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/marlin\/PathSimplifier.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/marlin\/DPathSimplifier.java","status":"renamed"},{"patch":"@@ -31,1 +31,1 @@\n-final class DRenderer implements DPathConsumer2D, MarlinConst {\n+final class Renderer implements DPathConsumer2D, MarlinConst {\n@@ -182,1 +182,1 @@\n-                                          final DCurve c,\n+                                          final Curve c,\n@@ -236,1 +236,1 @@\n-                                           final DCurve c,\n+                                           final Curve c,\n@@ -506,1 +506,1 @@\n-    final DRendererContext rdrCtx;\n+    final RendererContext rdrCtx;\n@@ -508,1 +508,1 @@\n-    private final DCurve curve;\n+    private final Curve curve;\n@@ -525,1 +525,1 @@\n-    DRenderer(final DRendererContext rdrCtx) {\n+    Renderer(final RendererContext rdrCtx) {\n@@ -556,1 +556,1 @@\n-    DRenderer init(final int pix_boundsX, final int pix_boundsY,\n+    Renderer init(final int pix_boundsX, final int pix_boundsY,\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/marlin\/Renderer.java","additions":7,"deletions":7,"binary":false,"changes":14,"previous_filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/marlin\/DRenderer.java","status":"renamed"},{"patch":"@@ -34,2 +34,2 @@\n-import sun.java2d.marlin.DTransformingPathConsumer2D.CurveBasicMonotonizer;\n-import sun.java2d.marlin.DTransformingPathConsumer2D.CurveClipSplitter;\n+import sun.java2d.marlin.TransformingPathConsumer2D.CurveBasicMonotonizer;\n+import sun.java2d.marlin.TransformingPathConsumer2D.CurveClipSplitter;\n@@ -40,1 +40,1 @@\n-final class DRendererContext extends ReentrantContext implements MarlinConst {\n+final class RendererContext extends ReentrantContext implements MarlinConst {\n@@ -50,2 +50,2 @@\n-    static DRendererContext createContext() {\n-        return new DRendererContext(\"ctx\"\n+    static RendererContext createContext() {\n+        return new RendererContext(\"ctx\"\n@@ -62,1 +62,1 @@\n-    final DCurve curve = new DCurve();\n+    final Curve curve = new Curve();\n@@ -68,1 +68,1 @@\n-    final DTransformingPathConsumer2D transformerPC2D;\n+    final TransformingPathConsumer2D transformerPC2D;\n@@ -71,2 +71,2 @@\n-    final DRenderer renderer;\n-    final DStroker stroker;\n+    final Renderer renderer;\n+    final Stroker stroker;\n@@ -74,1 +74,1 @@\n-    final DCollinearSimplifier simplifier = new DCollinearSimplifier();\n+    final CollinearSimplifier simplifier = new CollinearSimplifier();\n@@ -76,2 +76,2 @@\n-    final DPathSimplifier pathSimplifier = new DPathSimplifier();\n-    final DDasher dasher;\n+    final PathSimplifier pathSimplifier = new PathSimplifier();\n+    final Dasher dasher;\n@@ -115,1 +115,1 @@\n-    DRendererContext(final String name) {\n+    RendererContext(final String name) {\n@@ -141,1 +141,1 @@\n-        transformerPC2D = new DTransformingPathConsumer2D(this);\n+        transformerPC2D = new TransformingPathConsumer2D(this);\n@@ -145,1 +145,1 @@\n-        renderer = new DRenderer(this); \/\/ needs MarlinCache from rdrCtx.cache\n+        renderer = new Renderer(this); \/\/ needs MarlinCache from rdrCtx.cache\n@@ -148,2 +148,2 @@\n-        stroker = new DStroker(this);\n-        dasher = new DDasher(this);\n+        stroker = new Stroker(this);\n+        dasher = new Dasher(this);\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/marlin\/RendererContext.java","additions":17,"deletions":17,"binary":false,"changes":34,"previous_filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/marlin\/DRendererContext.java","status":"renamed"},{"patch":"@@ -29,3 +29,3 @@\n-import sun.java2d.marlin.DHelpers.PolyStack;\n-import sun.java2d.marlin.DTransformingPathConsumer2D.CurveBasicMonotonizer;\n-import sun.java2d.marlin.DTransformingPathConsumer2D.CurveClipSplitter;\n+import sun.java2d.marlin.Helpers.PolyStack;\n+import sun.java2d.marlin.TransformingPathConsumer2D.CurveBasicMonotonizer;\n+import sun.java2d.marlin.TransformingPathConsumer2D.CurveClipSplitter;\n@@ -36,1 +36,1 @@\n-final class DStroker implements DPathConsumer2D, MarlinConst {\n+final class Stroker implements DPathConsumer2D, MarlinConst {\n@@ -86,1 +86,1 @@\n-    final DRendererContext rdrCtx;\n+    final RendererContext rdrCtx;\n@@ -89,1 +89,1 @@\n-    final DCurve curve;\n+    final Curve curve;\n@@ -111,1 +111,1 @@\n-     * Constructs a <code>DStroker<\/code>.\n+     * Constructs a <code>Stroker<\/code>.\n@@ -114,1 +114,1 @@\n-    DStroker(final DRendererContext rdrCtx) {\n+    Stroker(final RendererContext rdrCtx) {\n@@ -131,1 +131,1 @@\n-     * Inits the <code>DStroker<\/code>.\n+     * Inits the <code>Stroker<\/code>.\n@@ -145,1 +145,1 @@\n-    DStroker init(final DPathConsumer2D pc2d,\n+    Stroker init(final DPathConsumer2D pc2d,\n@@ -499,1 +499,1 @@\n-            final int outcode = DHelpers.outcode(x0, y0, clipRect);\n+            final int outcode = Helpers.outcode(x0, y0, clipRect);\n@@ -534,1 +534,1 @@\n-            final int outcode1 = DHelpers.outcode(x1, y1, clipRect);\n+            final int outcode1 = Helpers.outcode(x1, y1, clipRect);\n@@ -805,2 +805,2 @@\n-        return (DHelpers.within(x1, x2, err) && \/\/ we want to avoid calling Math.abs\n-                DHelpers.within(y1, y2, err));  \/\/ this is just as good.\n+        return (Helpers.within(x1, x2, err) && \/\/ we want to avoid calling Math.abs\n+                Helpers.within(y1, y2, err));  \/\/ this is just as good.\n@@ -869,1 +869,1 @@\n-        if (DHelpers.within(dotsq, l1sq * l4sq, 4.0d * Math.ulp(dotsq))) {\n+        if (Helpers.within(dotsq, l1sq * l4sq, 4.0d * Math.ulp(dotsq))) {\n@@ -1018,1 +1018,1 @@\n-        if (DHelpers.within(dotsq, l1sq * l3sq, 4.0d * Math.ulp(dotsq))) {\n+        if (Helpers.within(dotsq, l1sq * l3sq, 4.0d * Math.ulp(dotsq))) {\n@@ -1053,3 +1053,3 @@\n-            final int outcode1 = DHelpers.outcode(x1, y1, clipRect);\n-            final int outcode2 = DHelpers.outcode(x2, y2, clipRect);\n-            final int outcode3 = DHelpers.outcode(x3, y3, clipRect);\n+            final int outcode1 = Helpers.outcode(x1, y1, clipRect);\n+            final int outcode2 = Helpers.outcode(x2, y2, clipRect);\n+            final int outcode3 = Helpers.outcode(x3, y3, clipRect);\n@@ -1202,2 +1202,2 @@\n-            final int outcode1 = DHelpers.outcode(x1, y1, clipRect);\n-            final int outcode2 = DHelpers.outcode(x2, y2, clipRect);\n+            final int outcode1 = Helpers.outcode(x1, y1, clipRect);\n+            final int outcode2 = Helpers.outcode(x2, y2, clipRect);\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/marlin\/Stroker.java","additions":21,"deletions":21,"binary":false,"changes":42,"previous_filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/marlin\/DStroker.java","status":"renamed"},{"patch":"@@ -31,2 +31,2 @@\n-import sun.java2d.marlin.DHelpers.IndexStack;\n-import sun.java2d.marlin.DHelpers.PolyStack;\n+import sun.java2d.marlin.Helpers.IndexStack;\n+import sun.java2d.marlin.Helpers.PolyStack;\n@@ -34,1 +34,1 @@\n-final class DTransformingPathConsumer2D {\n+final class TransformingPathConsumer2D {\n@@ -39,1 +39,1 @@\n-    private final DRendererContext rdrCtx;\n+    private final RendererContext rdrCtx;\n@@ -65,1 +65,1 @@\n-    DTransformingPathConsumer2D(final DRendererContext rdrCtx) {\n+    TransformingPathConsumer2D(final RendererContext rdrCtx) {\n@@ -429,1 +429,1 @@\n-        private final DRendererContext rdrCtx;\n+        private final RendererContext rdrCtx;\n@@ -434,1 +434,1 @@\n-        ClosedPathDetector(final DRendererContext rdrCtx) {\n+        ClosedPathDetector(final RendererContext rdrCtx) {\n@@ -545,1 +545,1 @@\n-        PathClipFilter(final DRendererContext rdrCtx) {\n+        PathClipFilter(final RendererContext rdrCtx) {\n@@ -638,1 +638,1 @@\n-            this.cOutCode = DHelpers.outcode(sx0, sy0, clipRect);\n+            this.cOutCode = Helpers.outcode(sx0, sy0, clipRect);\n@@ -650,1 +650,1 @@\n-            this.cOutCode = DHelpers.outcode(x0, y0, clipRect);\n+            this.cOutCode = Helpers.outcode(x0, y0, clipRect);\n@@ -661,1 +661,1 @@\n-            final int outcode1 = DHelpers.outcode(xe, ye, clipRect);\n+            final int outcode1 = Helpers.outcode(xe, ye, clipRect);\n@@ -758,3 +758,3 @@\n-            final int outcode1 = DHelpers.outcode(x1, y1, clipRect);\n-            final int outcode2 = DHelpers.outcode(x2, y2, clipRect);\n-            final int outcode3 = DHelpers.outcode(xe, ye, clipRect);\n+            final int outcode1 = Helpers.outcode(x1, y1, clipRect);\n+            final int outcode2 = Helpers.outcode(x2, y2, clipRect);\n+            final int outcode3 = Helpers.outcode(xe, ye, clipRect);\n@@ -821,2 +821,2 @@\n-            final int outcode1 = DHelpers.outcode(x1, y1, clipRect);\n-            final int outcode2 = DHelpers.outcode(xe, ye, clipRect);\n+            final int outcode1 = Helpers.outcode(x1, y1, clipRect);\n+            final int outcode2 = Helpers.outcode(xe, ye, clipRect);\n@@ -891,1 +891,1 @@\n-        private final DRendererContext rdrCtx;\n+        private final RendererContext rdrCtx;\n@@ -910,1 +910,1 @@\n-        private final DCurve curve;\n+        private final Curve curve;\n@@ -912,1 +912,1 @@\n-        CurveClipSplitter(final DRendererContext rdrCtx) {\n+        CurveClipSplitter(final RendererContext rdrCtx) {\n@@ -959,1 +959,1 @@\n-            if (DO_CHECK_LENGTH && DHelpers.fastLineLen(x0, y0, x1, y1) <= minLength) {\n+            if (DO_CHECK_LENGTH && Helpers.fastLineLen(x0, y0, x1, y1) <= minLength) {\n@@ -980,1 +980,1 @@\n-            if (DO_CHECK_LENGTH && DHelpers.fastQuadLen(x0, y0, x1, y1, x2, y2) <= minLength) {\n+            if (DO_CHECK_LENGTH && Helpers.fastQuadLen(x0, y0, x1, y1, x2, y2) <= minLength) {\n@@ -1003,1 +1003,1 @@\n-            if (DO_CHECK_LENGTH && DHelpers.fastCurvelen(x0, y0, x1, y1, x2, y2, x3, y3) <= minLength) {\n+            if (DO_CHECK_LENGTH && Helpers.fastCurvelen(x0, y0, x1, y1, x2, y2, x3, y3) <= minLength) {\n@@ -1027,1 +1027,1 @@\n-            final int nSplits = DHelpers.findClipPoints(curve, mid, subTs, type,\n+            final int nSplits = Helpers.findClipPoints(curve, mid, subTs, type,\n@@ -1043,1 +1043,1 @@\n-                DHelpers.subdivideAt((t - prevT) \/ (1.0d - prevT),\n+                Helpers.subdivideAt((t - prevT) \/ (1.0d - prevT),\n@@ -1091,1 +1091,1 @@\n-        private final DCurve curve;\n+        private final Curve curve;\n@@ -1093,1 +1093,1 @@\n-        CurveBasicMonotonizer(final DRendererContext rdrCtx) {\n+        CurveBasicMonotonizer(final RendererContext rdrCtx) {\n@@ -1113,1 +1113,1 @@\n-            final int nSplits = DHelpers.findSubdivPoints(curve, mid, subTs, 8, lw2);\n+            final int nSplits = Helpers.findSubdivPoints(curve, mid, subTs, 8, lw2);\n@@ -1119,1 +1119,1 @@\n-                DHelpers.subdivideCubicAt((t - prevT) \/ (1.0d - prevT),\n+                Helpers.subdivideCubicAt((t - prevT) \/ (1.0d - prevT),\n@@ -1138,1 +1138,1 @@\n-            final int nSplits = DHelpers.findSubdivPoints(curve, mid, subTs, 6, lw2);\n+            final int nSplits = Helpers.findSubdivPoints(curve, mid, subTs, 6, lw2);\n@@ -1143,1 +1143,1 @@\n-                DHelpers.subdivideQuadAt((t - prevt) \/ (1.0d - prevt),\n+                Helpers.subdivideQuadAt((t - prevt) \/ (1.0d - prevt),\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/marlin\/TransformingPathConsumer2D.java","additions":30,"deletions":30,"binary":false,"changes":60,"previous_filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/marlin\/DTransformingPathConsumer2D.java","status":"renamed"}]}