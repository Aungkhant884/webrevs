{"files":[{"patch":"@@ -405,0 +405,7 @@\n+  \/\/ A discrete resource is a simple definition of a resource, while compound resources can be composed of multiple resources.\n+  \/\/ A discrete resource will always have a power of two mask, so this check succeeds in that case.\n+  \/\/ As compound resources have different masks added together, this check will not succeed there.\n+  bool is_discrete() const {\n+    return (_resmask & (_resmask - 1)) == 0;\n+  }\n+\n","filename":"src\/hotspot\/share\/adlc\/formsopt.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -275,0 +275,1 @@\n+  const char* resource;\n@@ -277,10 +278,13 @@\n-  for (i = 0; i < pipeline->_rescount; i++) {\n-    if (res_stages[i] == 0) {\n-      if (max_stage < 9)\n-        max_stage = 9;\n-    }\n-    else {\n-      int stagelen = (int)strlen(pipeline->_stages.name(res_stages[i]-1));\n-      if (max_stage < stagelen)\n-        max_stage = stagelen;\n-    }\n+  i = 0;\n+  for (pipeline->_reslist.reset(); (resource = pipeline->_reslist.iter()) != NULL;) {\n+    if (pipeline->_resdict[resource]->is_resource()->is_discrete()) {\n+      if (res_stages[i] == 0) {\n+        if (max_stage < 9) {\n+          max_stage = 9;\n+        }\n+      } else {\n+        int stagelen = (int)strlen(pipeline->_stages.name(res_stages[i]-1));\n+        if (max_stage < stagelen) {\n+          max_stage = stagelen;\n+        }\n+      }\n@@ -288,1 +292,3 @@\n-    commentlen += (int)strlen(pipeline->_reslist.name(i));\n+      commentlen += (int)strlen(resource);\n+      i++;\n+    }\n@@ -298,8 +304,10 @@\n-  for (i = 0; i < pipeline->_rescount; i++) {\n-    const char * const resname =\n-      res_stages[i] == 0 ? \"undefined\" : pipeline->_stages.name(res_stages[i]-1);\n-\n-    templen += snprintf_checked(&resource_stages[templen], resource_stages_size - templen, \"  stage_%s%-*s \/\/ %s\\n\",\n-      resname, max_stage - (int)strlen(resname) + 1,\n-      (i < pipeline->_rescount-1) ? \",\" : \"\",\n-      pipeline->_reslist.name(i));\n+  i = 0;\n+  for (pipeline->_reslist.reset(); (resource = pipeline->_reslist.iter()) != NULL;) {\n+    if (pipeline->_resdict[resource]->is_resource()->is_discrete()) {\n+      const char* const resname = res_stages[i] == 0 ? \"undefined\" : pipeline->_stages.name(res_stages[i] - 1);\n+\n+      templen += snprintf_checked(&resource_stages[templen], resource_stages_size - templen,\"  stage_%s%-*s \/\/ %s\\n\",\n+          resname, max_stage - (int)strlen(resname) + 1,\n+          (i < pipeline->_rescount - 1) ? \",\" : \"\", resource);\n+      i++;\n+    }\n@@ -358,7 +366,16 @@\n-  for (i = 0; i < pipeline->_rescount; i++) {\n-    if (max_cycles < res_cycles[i])\n-      max_cycles = res_cycles[i];\n-    templen = snprintf_checked(temp, sizeof(temp), \"%d\", res_cycles[i]);\n-    if (cyclelen < templen)\n-      cyclelen = templen;\n-    commentlen += (int)strlen(pipeline->_reslist.name(i));\n+  const char* resource;\n+  i = 0;\n+  for (pipeline->_reslist.reset(); (resource = pipeline->_reslist.iter()) != NULL;) {\n+    if (pipeline->_resdict[resource]->is_resource()->is_discrete()) {\n+      if (max_cycles < res_cycles[i]) {\n+        max_cycles = res_cycles[i];\n+      }\n+\n+      templen = snprintf_checked(temp, sizeof(temp), \"%d\", res_cycles[i]);\n+      if (cyclelen < templen) {\n+        cyclelen = templen;\n+      }\n+\n+      commentlen += (int)strlen(resource);\n+      i++;\n+    }\n@@ -375,3 +392,7 @@\n-  for (i = 0; i < pipeline->_rescount; i++) {\n-    templen += snprintf_checked(&resource_cycles[templen], resource_cycles_size - templen, \"  %*d%c \/\/ %s\\n\",\n-      cyclelen, res_cycles[i], (i < pipeline->_rescount-1) ? ',' : ' ', pipeline->_reslist.name(i));\n+  i = 0;\n+  for (pipeline->_reslist.reset(); (resource = pipeline->_reslist.iter()) != NULL;) {\n+    if (pipeline->_resdict[resource]->is_resource()->is_discrete()) {\n+      templen += snprintf_checked(&resource_cycles[templen], resource_cycles_size - templen, \"  %*d%c \/\/ %s\\n\",\n+      cyclelen, res_cycles[i], (i < pipeline->_rescount-1) ? ',' : ' ', resource);\n+      i++;\n+    }\n@@ -985,2 +1006,9 @@\n-  for (i = 0; i < _pipeline->_rescount; i++)\n-    fprintf(fp_cpp, \" \\\"%s\\\"%c\", _pipeline->_reslist.name(i), i < _pipeline->_rescount-1 ? ',' : ' ');\n+  \/\/ Don't add compound resources to the list of resource names\n+  const char* resource;\n+  i = 0;\n+  for (_pipeline->_reslist.reset(); (resource = _pipeline->_reslist.iter()) != NULL;) {\n+    if (_pipeline->_resdict[resource]->is_resource()->is_discrete()) {\n+      fprintf(fp_cpp, \" \\\"%s\\\"%c\", resource, i < _pipeline->_rescount - 1 ? ',' : ' ');\n+      i++;\n+    }\n+  }\n","filename":"src\/hotspot\/share\/adlc\/output_c.cpp","additions":59,"deletions":31,"binary":false,"changes":90,"status":"modified"},{"patch":"@@ -828,3 +828,2 @@\n-  for ( _pipeline->_reslist.reset(); (resource = _pipeline->_reslist.iter()) != NULL; ) {\n-      int mask = _pipeline->_resdict[resource]->is_resource()->mask();\n-      if ((mask & (mask-1)) == 0)\n+  for (_pipeline->_reslist.reset(); (resource = _pipeline->_reslist.iter()) != NULL;) {\n+      if (_pipeline->_resdict[resource]->is_resource()->is_discrete()) {\n@@ -832,0 +831,1 @@\n+      }\n@@ -2233,2 +2233,1 @@\n-      int mask = resform->mask();\n-      if ((mask & (mask-1)) == 0)\n+      if (resform->is_discrete()) {\n@@ -2236,0 +2235,1 @@\n+      }\n","filename":"src\/hotspot\/share\/adlc\/output_h.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}