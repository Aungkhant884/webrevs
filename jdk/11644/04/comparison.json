{"files":[{"patch":"@@ -29,1 +29,0 @@\n-import java.util.Objects;\n@@ -83,0 +82,7 @@\n+    \/**\n+     * A local buffer that allows reading and writing of\n+     * longer primitive parameters (e.g. long) to be performed\n+     * using bulk operations rather than on a per-byte basis.\n+     *\/\n+    private final byte[] buffer = new byte[Long.BYTES];\n+\n@@ -740,4 +746,1 @@\n-        int ch = this.read();\n-        if (ch < 0)\n-            throw new EOFException();\n-        return (ch != 0);\n+        return readUnsignedByte() != 0;\n@@ -765,4 +768,1 @@\n-        int ch = this.read();\n-        if (ch < 0)\n-            throw new EOFException();\n-        return (byte)(ch);\n+        return (byte) readUnsignedByte();\n@@ -812,5 +812,1 @@\n-        int ch1 = this.read();\n-        int ch2 = this.read();\n-        if ((ch1 | ch2) < 0)\n-            throw new EOFException();\n-        return (short)((ch1 << 8) + (ch2 << 0));\n+        return (short) readUnsignedShort();\n@@ -840,5 +836,3 @@\n-        int ch1 = this.read();\n-        int ch2 = this.read();\n-        if ((ch1 | ch2) < 0)\n-            throw new EOFException();\n-        return (ch1 << 8) + (ch2 << 0);\n+        readFully(buffer, 0, Short.BYTES);\n+        return  ((buffer[1] & 0xff)      ) +\n+                ((buffer[0] & 0xff) <<  8);\n@@ -868,5 +862,1 @@\n-        int ch1 = this.read();\n-        int ch2 = this.read();\n-        if ((ch1 | ch2) < 0)\n-            throw new EOFException();\n-        return (char)((ch1 << 8) + (ch2 << 0));\n+        return (char) readUnsignedShort();\n@@ -896,7 +886,2 @@\n-        int ch1 = this.read();\n-        int ch2 = this.read();\n-        int ch3 = this.read();\n-        int ch4 = this.read();\n-        if ((ch1 | ch2 | ch3 | ch4) < 0)\n-            throw new EOFException();\n-        return ((ch1 << 24) + (ch2 << 16) + (ch3 << 8) + (ch4 << 0));\n+        readFully(buffer, 0, Integer.BYTES);\n+        return Bits.getInt(buffer, 0);\n@@ -934,1 +919,2 @@\n-        return ((long)(readInt()) << 32) + (readInt() & 0xFFFFFFFFL);\n+        readFully(buffer, 0, Long.BYTES);\n+        return Bits.getLong(buffer, 0);\n@@ -957,1 +943,2 @@\n-        return Float.intBitsToFloat(readInt());\n+        readFully(buffer, 0, Float.BYTES);\n+        return Bits.getFloat(buffer, 0);\n@@ -980,1 +967,2 @@\n-        return Double.longBitsToDouble(readLong());\n+        readFully(buffer, 0, Double.BYTES);\n+        return Bits.getDouble(buffer, 0);\n@@ -1073,1 +1061,0 @@\n-        \/\/written++;\n@@ -1085,1 +1072,0 @@\n-        \/\/written++;\n@@ -1096,3 +1082,3 @@\n-        write((v >>> 8) & 0xFF);\n-        write((v >>> 0) & 0xFF);\n-        \/\/written += 2;\n+        buffer[1] = (byte)(v       );\n+        buffer[0] = (byte)(v >>>  8);\n+        write(buffer, 0, Short.BYTES);\n@@ -1110,3 +1096,1 @@\n-        write((v >>> 8) & 0xFF);\n-        write((v >>> 0) & 0xFF);\n-        \/\/written += 2;\n+        writeShort(v);\n@@ -1123,4 +1107,2 @@\n-        write((v >>> 24) & 0xFF);\n-        write((v >>> 16) & 0xFF);\n-        write((v >>>  8) & 0xFF);\n-        write((v >>>  0) & 0xFF);\n+        Bits.putInt(buffer, 0, v);\n+        write(buffer, 0, Integer.BYTES);\n@@ -1138,9 +1120,2 @@\n-        write((int)(v >>> 56) & 0xFF);\n-        write((int)(v >>> 48) & 0xFF);\n-        write((int)(v >>> 40) & 0xFF);\n-        write((int)(v >>> 32) & 0xFF);\n-        write((int)(v >>> 24) & 0xFF);\n-        write((int)(v >>> 16) & 0xFF);\n-        write((int)(v >>>  8) & 0xFF);\n-        write((int)(v >>>  0) & 0xFF);\n-        \/\/written += 8;\n+        Bits.putLong(buffer, 0, v);\n+        write(buffer, 0, Long.BYTES);\n","filename":"src\/java.base\/share\/classes\/java\/io\/RandomAccessFile.java","additions":30,"deletions":55,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import java.io.IOException;\n@@ -35,1 +34,0 @@\n-import java.io.RandomAccessFile;\n","filename":"test\/jdk\/java\/io\/File\/Basic.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,129 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package micro.org.openjdk.bench.java.io;\n+\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.io.*;\n+import java.nio.file.Files;\n+import java.util.Random;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.TimeUnit;\n+\n+@Fork(2)\n+@State(Scope.Thread)\n+@Warmup(iterations = 5, time = 1)\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.MICROSECONDS)\n+@Measurement(iterations = 5, time = 2)\n+\n+public class RandomAccessFileBenchmark {\n+\n+    @Param({\"1\", \"5\"})\n+    private int kiloBytes;\n+    private int size;\n+    private File file;\n+\n+    private RandomAccessFile raf;\n+\n+    private short[] shorts;\n+    private int[] ints;\n+    private long[] longs;\n+\n+    @Setup(Level.Iteration)\n+    public void beforeRun() throws IOException {\n+        Random rnd = ThreadLocalRandom.current();\n+        size = kiloBytes << 10;\n+        var bytes = new byte[size];\n+        rnd.nextBytes(bytes);\n+        file = File.createTempFile(getClass().getName(), \".txt\");\n+        Files.write(file.toPath(), bytes);\n+        shorts = new short[size];\n+        for (int i = 0; i < size \/ Short.BYTES; i++) {\n+            shorts[i] = (short) rnd.nextInt();\n+        }\n+        ints = rnd.ints(size \/ Integer.BYTES).toArray();\n+        longs = rnd.longs(size \/ Long.BYTES).toArray();\n+        raf = new RandomAccessFile(file, \"rw\");\n+        \/\/ Make it more likely file content is directly available\n+        for (int i = 0; i < size \/ Integer.BYTES; i++) {\n+            raf.readInt();\n+        }\n+    }\n+\n+    @TearDown(Level.Iteration)\n+    public void afterRun() throws IOException {\n+        raf.close();\n+        file.delete();\n+    }\n+\n+    @Benchmark\n+    public void readShort(Blackhole bh) throws IOException {\n+        raf.seek(0);\n+        for (int i = 0; i < size \/ Short.BYTES; i++) {\n+            bh.consume(raf.readShort());\n+        }\n+    }\n+\n+    @Benchmark\n+    public void readInt(Blackhole bh) throws IOException {\n+        raf.seek(0);\n+        for (int i = 0; i < size \/ Integer.BYTES; i++) {\n+            bh.consume(raf.readInt());\n+        }\n+    }\n+\n+    @Benchmark\n+    public void readLong(Blackhole bh) throws IOException {\n+        raf.seek(0);\n+        for (int i = 0; i < size \/ Long.BYTES; i++) {\n+            bh.consume(raf.readLong());\n+        }\n+    }\n+\n+    @Benchmark\n+    public void writeShort() throws IOException {\n+        raf.seek(0);\n+        for (int i = 0; i < size \/ Short.BYTES; i++) {\n+            raf.writeShort(shorts[i]);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void writeInt() throws IOException {\n+        raf.seek(0);\n+        for (int i = 0; i < size \/ Integer.BYTES; i++) {\n+            raf.writeInt(ints[i]);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void writeLong() throws IOException {\n+        raf.seek(0);\n+        for (int i = 0; i < size \/ Long.BYTES; i++) {\n+            raf.writeLong(longs[i]);\n+        }\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/io\/RandomAccessFileBenchmark.java","additions":129,"deletions":0,"binary":false,"changes":129,"status":"added"}]}