{"files":[{"patch":"@@ -60,0 +60,2 @@\n+ * @implNote This class is not thread safe.\n+ *\n@@ -747,4 +749,1 @@\n-        int ch = this.read();\n-        if (ch < 0)\n-            throw new EOFException();\n-        return (ch != 0);\n+        return readUnsignedByte() != 0;\n@@ -772,4 +771,1 @@\n-        int ch = this.read();\n-        if (ch < 0)\n-            throw new EOFException();\n-        return (byte)(ch);\n+        return (byte) readUnsignedByte();\n@@ -819,1 +815,1 @@\n-        return (short)readUnsignedShort();\n+        return (short) readUnsignedShort();\n@@ -844,2 +840,2 @@\n-        return  ((buffer[0] & 0xff) <<  8) +\n-                ((buffer[1] & 0xff)      );\n+        return  ((buffer[1] & 0xff)      ) +\n+                ((buffer[0] & 0xff) <<  8);\n@@ -869,1 +865,1 @@\n-        return (char)readUnsignedShort();\n+        return (char) readUnsignedShort();\n@@ -894,4 +890,1 @@\n-        return (int)(((long)(buffer[0] & 0xff) << 24) +\n-                           ((buffer[1] & 0xff) << 16) +\n-                           ((buffer[2] & 0xff) <<  8) +\n-                           ((buffer[3] & 0xff)      ));\n+        return Bits.getInt(buffer, 0);\n@@ -930,9 +923,1 @@\n-        return (((long)(buffer[0]       ) << 56) +\n-                ((long)(buffer[1] & 0xff) << 48) +\n-                ((long)(buffer[2] & 0xff) << 40) +\n-                ((long)(buffer[3] & 0xff) << 32) +\n-                ((long)(buffer[4] & 0xff) << 24) +\n-                (      (buffer[5] & 0xff) << 16) +\n-                (      (buffer[6] & 0xff) <<  8) +\n-                (      (buffer[7] & 0xff)      ));\n-\n+        return Bits.getLong(buffer, 0);\n@@ -961,1 +946,2 @@\n-        return Float.intBitsToFloat(readInt());\n+        readFully(buffer, 0, Float.BYTES);\n+        return Bits.getFloat(buffer, 0);\n@@ -984,1 +970,2 @@\n-        return Double.longBitsToDouble(readLong());\n+        readFully(buffer, 0, Double.BYTES);\n+        return Bits.getDouble(buffer, 0);\n@@ -1100,1 +1087,0 @@\n-        buffer[0] = (byte)(v >>>  8);\n@@ -1102,0 +1088,1 @@\n+        buffer[0] = (byte)(v >>>  8);\n@@ -1126,4 +1113,1 @@\n-        buffer[0] = (byte)(v >>> 24);\n-        buffer[1] = (byte)(v >>> 16);\n-        buffer[2] = (byte)(v >>>  8);\n-        buffer[3] = (byte)(v       );\n+        Bits.putInt(buffer, 0, v);\n@@ -1142,8 +1126,1 @@\n-        buffer[0] = (byte)(v >>> 56);\n-        buffer[1] = (byte)(v >>> 48);\n-        buffer[2] = (byte)(v >>> 40);\n-        buffer[3] = (byte)(v >>> 32);\n-        buffer[4] = (byte)(v >>> 24);\n-        buffer[5] = (byte)(v >>> 16);\n-        buffer[6] = (byte)(v >>>  8);\n-        buffer[7] = (byte)(v       );\n+        Bits.putLong(buffer, 0, v);\n","filename":"src\/java.base\/share\/classes\/java\/io\/RandomAccessFile.java","additions":17,"deletions":40,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -0,0 +1,129 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package micro.org.openjdk.bench.java.io;\n+\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.io.*;\n+import java.nio.file.Files;\n+import java.util.Random;\n+import java.util.concurrent.ThreadLocalRandom;\n+import java.util.concurrent.TimeUnit;\n+\n+@Fork(2)\n+@State(Scope.Thread)\n+@Warmup(iterations = 5, time = 1)\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.MICROSECONDS)\n+@Measurement(iterations = 5, time = 2)\n+\n+public class RandomAccessFileBenchmark {\n+\n+    @Param({\"1\", \"5\"})\n+    private int kiloBytes;\n+    private int size;\n+    private File file;\n+\n+    private RandomAccessFile raf;\n+\n+    private short[] shorts;\n+    private int[] ints;\n+    private long[] longs;\n+\n+    @Setup(Level.Iteration)\n+    public void beforeRun() throws IOException {\n+        Random rnd = ThreadLocalRandom.current();\n+        size = kiloBytes << 10;\n+        var bytes = new byte[size];\n+        rnd.nextBytes(bytes);\n+        file = File.createTempFile(getClass().getName(), \".txt\");\n+        Files.write(file.toPath(), bytes);\n+        shorts = new short[size];\n+        for (int i = 0; i < size \/ Short.BYTES; i++) {\n+            shorts[i] = (short) rnd.nextInt();\n+        }\n+        ints = rnd.ints(size \/ Integer.BYTES).toArray();\n+        longs = rnd.longs(size \/ Long.BYTES).toArray();\n+        raf = new RandomAccessFile(file, \"rw\");\n+        \/\/ Make it more likely file content is directly available\n+        for (int i = 0; i < size \/ Integer.BYTES; i++) {\n+            raf.readInt();\n+        }\n+    }\n+\n+    @TearDown(Level.Iteration)\n+    public void afterRun() throws IOException {\n+        raf.close();\n+        file.delete();\n+    }\n+\n+    @Benchmark\n+    public void readShort(Blackhole bh) throws IOException {\n+        raf.seek(0);\n+        for (int i = 0; i < size \/ Short.BYTES; i++) {\n+            bh.consume(raf.readShort());\n+        }\n+    }\n+\n+    @Benchmark\n+    public void readInt(Blackhole bh) throws IOException {\n+        raf.seek(0);\n+        for (int i = 0; i < size \/ Integer.BYTES; i++) {\n+            bh.consume(raf.readInt());\n+        }\n+    }\n+\n+    @Benchmark\n+    public void readLong(Blackhole bh) throws IOException {\n+        raf.seek(0);\n+        for (int i = 0; i < size \/ Long.BYTES; i++) {\n+            bh.consume(raf.readLong());\n+        }\n+    }\n+\n+    @Benchmark\n+    public void writeShort() throws IOException {\n+        raf.seek(0);\n+        for (int i = 0; i < size \/ Short.BYTES; i++) {\n+            raf.writeShort(shorts[i]);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void writeInt() throws IOException {\n+        raf.seek(0);\n+        for (int i = 0; i < size \/ Integer.BYTES; i++) {\n+            raf.writeInt(ints[i]);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void writeLong() throws IOException {\n+        raf.seek(0);\n+        for (int i = 0; i < size \/ Long.BYTES; i++) {\n+            raf.writeLong(longs[i]);\n+        }\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/io\/RandomAccessFileBenchmark.java","additions":129,"deletions":0,"binary":false,"changes":129,"status":"added"}]}