{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -2303,1 +2303,1 @@\n-  return (jlong)::lseek(fd, (off_t)0, SEEK_CUR);\n+  return (jlong)os::lseek(fd, (off_t)0, SEEK_CUR);\n@@ -2308,1 +2308,1 @@\n-  return (jlong)::lseek(fd, (off_t)offset, SEEK_SET);\n+  return (jlong)os::lseek(fd, (off_t)offset, SEEK_SET);\n@@ -2329,1 +2329,1 @@\n-  if ((cur = ::lseek(fd, 0L, SEEK_CUR)) == -1) {\n+  if ((cur = os::lseek(fd, 0L, SEEK_CUR)) == -1) {\n@@ -2331,1 +2331,1 @@\n-  } else if ((end = ::lseek(fd, 0L, SEEK_END)) == -1) {\n+  } else if ((end = os::lseek(fd, 0L, SEEK_END)) == -1) {\n@@ -2333,1 +2333,1 @@\n-  } else if (::lseek(fd, cur, SEEK_SET) == -1) {\n+  } else if (os::lseek(fd, cur, SEEK_SET) == -1) {\n@@ -2490,1 +2490,1 @@\n-    while (::stat(filename, &buf) == 0) {\n+    while (os::stat(filename, &buf) == 0) {\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -388,1 +388,1 @@\n-    ssize_t n = ::write(s, buf, len);\n+    ssize_t n = os::write(s, buf, len);\n","filename":"src\/hotspot\/os\/linux\/attachListener_linux.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -133,1 +133,1 @@\n-  while (ftruncate(_fd, max_capacity) == -1) {\n+  while (os::ftruncate(_fd, max_capacity) == -1) {\n","filename":"src\/hotspot\/os\/linux\/gc\/z\/zPhysicalMemoryBacking_linux.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2611,1 +2611,1 @@\n-    off_t rv = ::lseek(fd, size-2, SEEK_SET);\n+    off_t rv = os::lseek(fd, size-2, SEEK_SET);\n@@ -2613,1 +2613,1 @@\n-      if (::write(fd, \"\", 1) == 1) {\n+      if (os::write(fd, \"\", 1) == 1) {\n@@ -4926,1 +4926,1 @@\n-  return (jlong)::lseek64(fd, (off64_t)0, SEEK_CUR);\n+  return (jlong)os::lseek(fd, (off64_t)0, SEEK_CUR);\n@@ -4931,1 +4931,1 @@\n-  return (jlong)::lseek64(fd, (off64_t)offset, SEEK_SET);\n+  return (jlong)os::lseek(fd, (off64_t)offset, SEEK_SET);\n@@ -4952,1 +4952,1 @@\n-  if ((cur = ::lseek64(fd, 0L, SEEK_CUR)) == -1) {\n+  if ((cur = os::lseek(fd, 0L, SEEK_CUR)) == -1) {\n@@ -4954,1 +4954,1 @@\n-  } else if ((end = ::lseek64(fd, 0L, SEEK_END)) == -1) {\n+  } else if ((end = os::lseek(fd, 0L, SEEK_END)) == -1) {\n@@ -4956,1 +4956,1 @@\n-  } else if (::lseek64(fd, cur, SEEK_SET) == -1) {\n+  } else if (os::lseek(fd, cur, SEEK_SET) == -1) {\n@@ -5147,1 +5147,1 @@\n-    while (::stat(filename, &buf) == 0) {\n+    while (os::stat(filename, &buf) == 0) {\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -292,1 +292,1 @@\n-  if ((taskDir = opendir(\"\/proc\/self\/task\")) == NULL) {\n+  if ((taskDir = os::opendir(\"\/proc\/self\/task\")) == NULL) {\n@@ -296,1 +296,1 @@\n-    closedir(taskDir);\n+    os::closedir(taskDir);\n@@ -678,1 +678,1 @@\n-  ret_val = stat(name, &mystat);\n+  ret_val = os::stat(name, &mystat);\n@@ -691,1 +691,1 @@\n-  if (stat(name, &fbuf) < 0) {\n+  if (os::stat(name, &fbuf) < 0) {\n","filename":"src\/hotspot\/os\/linux\/os_perf_linux.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -663,1 +663,5 @@\n-  return (jlong) BSD_ONLY(::lseek) NOT_BSD(::lseek64)(fd, offset, whence);\n+#ifdef BSD\n+  ALLOW_C_FUNCTION(lseek, return (jlong)::lseek(fd, offset, whence);)\n+#else\n+  ALLOW_C_FUNCTION(lseek64, return (jlong)::lseek64(fd, offset, whence);)\n+#endif\n@@ -667,1 +671,1 @@\n-  return ::fsync(fd);\n+  ALLOW_C_FUNCTION(fsync, return ::fsync(fd);)\n@@ -671,1 +675,5 @@\n-   return BSD_ONLY(::ftruncate) NOT_BSD(::ftruncate64)(fd, length);\n+#ifdef BSD\n+  ALLOW_C_FUNCTION(ftruncate, return ::ftruncate(fd, length);)\n+#else\n+  ALLOW_C_FUNCTION(ftruncate64, return ::ftruncate64(fd, length);)\n+#endif\n@@ -679,1 +687,1 @@\n-  return ::fdopen(fd, mode);\n+  ALLOW_C_FUNCTION(fdopen, return ::fdopen(fd, mode);)\n@@ -684,1 +692,1 @@\n-  RESTARTABLE(::write(fd, buf, (size_t) nBytes), res);\n+  ALLOW_C_FUNCTION(write, RESTARTABLE(::write(fd, buf, (size_t) nBytes), res);)\n@@ -693,1 +701,1 @@\n-  ::flockfile(fp);\n+  ALLOW_C_FUNCTION(flockfile, ::flockfile(fp);)\n@@ -697,1 +705,1 @@\n-  ::funlockfile(fp);\n+  ALLOW_C_FUNCTION(funlockfile, ::funlockfile(fp);)\n@@ -702,1 +710,1 @@\n-  return ::opendir(dirname);\n+  ALLOW_C_FUNCTION(opendir, return ::opendir(dirname);)\n@@ -707,1 +715,1 @@\n-  return ::readdir(dirp);\n+  ALLOW_C_FUNCTION(readdir, return ::readdir(dirp);)\n@@ -712,1 +720,1 @@\n-  return ::closedir(dirp);\n+  ALLOW_C_FUNCTION(closedir, return ::closedir(dirp);)\n@@ -720,1 +728,1 @@\n-  RESTARTABLE_RETURN_INT(::recv(fd, buf, nBytes, flags));\n+  ALLOW_C_FUNCTION(recv, RESTARTABLE_RETURN_INT(::recv(fd, buf, nBytes, flags));)\n@@ -724,1 +732,1 @@\n-  RESTARTABLE_RETURN_INT(::send(fd, buf, nBytes, flags));\n+  ALLOW_C_FUNCTION(send, RESTARTABLE_RETURN_INT(::send(fd, buf, nBytes, flags));)\n@@ -731,2 +739,2 @@\n-int os::connect(int fd, struct sockaddr* him, socklen_t len) {\n-  RESTARTABLE_RETURN_INT(::connect(fd, him, len));\n+int os::connect(int fd, const struct sockaddr* him, socklen_t len) {\n+  ALLOW_C_FUNCTION(connect, RESTARTABLE_RETURN_INT(::connect(fd, him, len));)\n@@ -865,1 +873,1 @@\n-  return ::stat(path, sbuf);\n+  ALLOW_C_FUNCTION(stat, return ::stat(path, sbuf);)\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":23,"deletions":15,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -338,1 +338,1 @@\n-  dirp = ::opendir(dirname);\n+  dirp = os::opendir(dirname);\n@@ -871,1 +871,1 @@\n-  RESTARTABLE(::ftruncate(fd, (off_t)0), result);\n+  RESTARTABLE(os::ftruncate(fd, (off_t)0), result);\n@@ -880,1 +880,1 @@\n-  RESTARTABLE(::ftruncate(fd, (off_t)size), result);\n+  RESTARTABLE(os::ftruncate(fd, (off_t)size), result);\n","filename":"src\/hotspot\/os\/posix\/perfMemory_posix.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -5724,1 +5724,1 @@\n-int os::connect(int fd, struct sockaddr* him, socklen_t len) {\n+int os::connect(int fd, const struct sockaddr* him, socklen_t len) {\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1271,1 +1271,2 @@\n-  FILE* file = ::fopen(path, modified_mode);\n+\n+  ALLOW_C_FUNCTION(fopen, FILE* file = ::fopen(path, modified_mode);)\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -790,1 +790,1 @@\n-  static int connect(int fd, struct sockaddr* him, socklen_t len);\n+  static int connect(int fd, const struct sockaddr* him, socklen_t len);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,0 +73,8 @@\n+#ifndef FORBID_C_FUNCTION\n+#define FORBID_C_FUNCTION(signature, alternative)\n+#endif\n+\n+#ifndef ALLOW_C_FUNCTION\n+#define ALLOW_C_FUNCTION(name, invocation) invocation\n+#endif\n+\n","filename":"src\/hotspot\/share\/utilities\/compilerWarnings.hpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,0 +66,40 @@\n+#if __GNUC__ >= 9\n+\n+#include <sys\/socket.h>\n+#include <stdio.h>\n+\n+#define FORBID_C_FUNCTION(signature, alternative) \\\n+  extern \"C\" signature __attribute__((__warning__(alternative)))\n+\n+#define ALLOW_C_FUNCTION(name, invocation) \\\n+PRAGMA_DIAG_PUSH \\\n+PRAGMA_DISABLE_GCC_WARNING(\"-Wattribute-warning\") \\\n+invocation \\\n+PRAGMA_DIAG_POP\n+\n+\n+FORBID_C_FUNCTION(int      connect(int, const struct sockaddr*, socklen_t), \"use os::connect\");\n+FORBID_C_FUNCTION(FILE*    fdopen(int, const char*),                  \"use os::fdopen\");\n+FORBID_C_FUNCTION(void     flockfile(FILE*),                          \"use os::flockfile\");\n+FORBID_C_FUNCTION(FILE*    fopen(const char*, const char*),           \"use os::fopen\");\n+FORBID_C_FUNCTION(int      fsync(int),                                \"use os::fsync\");\n+FORBID_C_FUNCTION(int      ftruncate(int, off_t),                     \"use os::ftruncate\");\n+#ifndef BSD\n+FORBID_C_FUNCTION(int      ftruncate64(int, off64_t),                 \"use os::ftruncate\");\n+#endif\n+FORBID_C_FUNCTION(void     funlockfile(FILE *),                       \"use os::funlockfile\");\n+FORBID_C_FUNCTION(off_t    lseek(int, off_t, int),                    \"use os::lseek\");\n+#ifndef BSD\n+FORBID_C_FUNCTION(off64_t  lseek64(int, off64_t, int),                \"use os::lseek\");\n+#endif\n+FORBID_C_FUNCTION(long int random(void),                              \"use os::random\");\n+FORBID_C_FUNCTION(ssize_t  recv(int, void*, size_t, int),             \"use os::recv\");\n+FORBID_C_FUNCTION(int      stat(const char*, struct stat*),           \"use os::stat\");\n+FORBID_C_FUNCTION(ssize_t  send(int, const void*, size_t, int),       \"use os::send\");\n+FORBID_C_FUNCTION(char*    strerror(int),                             \"use os::strerror\");\n+FORBID_C_FUNCTION(ssize_t  write(int, const void*, size_t ),          \"use os::write\");\n+\n+FORBID_C_FUNCTION(char*    strtok(char*, const char*),                \"use strtok_r\");\n+\n+#endif \/\/ __GNUC__ >= 9\n+\n","filename":"src\/hotspot\/share\/utilities\/compilerWarnings_gcc.hpp","additions":41,"deletions":1,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -617,1 +617,1 @@\n-    ssize_t count = ::write(_fd, s, (int)len);\n+    ssize_t count = os::write(_fd, s, (int)len);\n","filename":"src\/hotspot\/share\/utilities\/ostream.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -281,1 +281,1 @@\n-      abort();\n+      ALLOW_C_FUNCTION(abort, ::abort();)\n","filename":"test\/hotspot\/gtest\/gtestMain.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}