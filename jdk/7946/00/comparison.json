{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-\/**\n+\/*\n@@ -28,1 +28,1 @@\n- * @run main\/manual=yesno PrintTextTest\n+ * @run main\/manual SwingUIText\n@@ -31,3 +31,21 @@\n-import java.awt.*;\n-import javax.swing.*;\n-import java.awt.print.*;\n+import java.awt.BorderLayout;\n+import java.awt.Font;\n+import java.awt.Graphics;\n+import java.awt.GridLayout;\n+import java.awt.print.PageFormat;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+import java.awt.print.PrinterJob;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import javax.swing.JButton;\n+import javax.swing.JDialog;\n+import javax.swing.JEditorPane;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTextArea;\n+import javax.swing.JTextField;\n+import javax.swing.SwingUtilities;\n@@ -37,16 +55,26 @@\n-    static String[] instructions = {\n-        \"This tests that when a Swing UI is printed, that the text\",\n-        \"in each component properly matches the length of the component\",\n-        \"as seen on-screen, and that the spacing of the text is of\",\n-        \"reasonable even-ness. This latter part is very subjective and\",\n-        \"the comparison has to be with JDK1.5 GA, or JDK 1.6 GA\",\n-    };\n-\n-    static JFrame frame;\n-\n-    public static void main(String args[]) {\n-        SwingUtilities.invokeLater(new Runnable() {\n-          public void run() {\n-              createUI();\n-          }\n-      });\n+    private static JFrame frame;\n+    private static JFrame testInstructionFrame;\n+    private static final CountDownLatch resultCountDownLatch =\n+            new CountDownLatch(1);\n+    private static volatile boolean testResult = false;\n+    private static volatile String failureReason;\n+\n+    public static void main(String[] args) throws InterruptedException, InvocationTargetException {\n+        SwingUtilities.invokeAndWait(() -> {\n+            createTestInstructionUI();\n+            createSwingTestUI();\n+        });\n+\n+        \/\/ Giving max 10 minutes since sometime printer has to be ready to\n+        \/\/ print and user has to compare the UI on screen and the print out.\n+        if (!resultCountDownLatch.await(10, TimeUnit.MINUTES)) {\n+            throw new RuntimeException(\"Timeout: User did not press either \" +\n+                    \"Pass or Fail button\");\n+        }\n+\n+        if (!testResult) {\n+            dispose();\n+            throw new RuntimeException(\"Test Failed: \" + failureReason);\n+        } else {\n+            System.out.println(\"Test Passed.\");\n+        }\n@@ -55,1 +83,10 @@\n-    public static void createUI() {\n+    private static void dispose() throws InterruptedException, InvocationTargetException {\n+        SwingUtilities.invokeAndWait(() -> {\n+            if (frame != null) {\n+                frame.dispose();\n+            }\n+            if (testInstructionFrame != null) {\n+                testInstructionFrame.dispose();\n+            }\n+        });\n+    }\n@@ -57,1 +94,47 @@\n-        Sysout.createDialogWithInstructions(instructions);\n+    private static void createTestInstructionUI() {\n+        testInstructionFrame = new JFrame(\"Test Instruction Frame\");\n+        final String INSTRUCTION = \"\"\"\n+                Note: This tests that when a Swing UI is printed, that the text,\n+                in each component properly matches the length of the component,\n+                as seen on-screen, and that the spacing of the text is of,\n+                reasonable even-ness. This latter part is very subjective and,\n+                the comparison has to be with JDK1.5 GA, or JDK 1.6 GA.\n+                Steps:\n+                1) You should see two JFrame & a Print Dialog\n+                a) First JFrame with title \"Test Instruction Frame\", which is the instruction frame.\n+                b) Second JFrame with title \"Swing UI Text Printing Test\". which contains components\n+                with different texts that needs to be compared with the printout.\n+                2) Click \"Print\" or OK button on the Print dialog to the print content of \"Swing UI\n+                Text Printing Test\" JFrame.\n+                3) Compare printout with content of \"Swing UI Text Printing Test\" JFrame.\n+                If they match then press \"Pass\" button else press \"Fail\" button.\n+                \"\"\";\n+        JTextArea instructionTextArea = new JTextArea(INSTRUCTION, 16, 45);\n+        JPanel panel = new JPanel(new BorderLayout());\n+        panel.add(new JScrollPane(instructionTextArea), BorderLayout.CENTER);\n+\n+        JPanel ctrlPanel = new JPanel();\n+        JButton passBtn = new JButton(\"Pass\");\n+        passBtn.addActionListener((ae) -> {\n+            testResult = true;\n+            resultCountDownLatch.countDown();\n+            frame.dispose();\n+            testInstructionFrame.dispose();\n+        });\n+\n+        JButton failBtn = new JButton(\"Fail\");\n+        failBtn.addActionListener((ae) -> {\n+            getFailureReason();\n+            frame.dispose();\n+            testInstructionFrame.dispose();\n+        });\n+\n+        ctrlPanel.add(passBtn);\n+        ctrlPanel.add(failBtn);\n+\n+        panel.add(ctrlPanel, BorderLayout.SOUTH);\n+        testInstructionFrame.add(panel);\n+        testInstructionFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n+        testInstructionFrame.pack();\n+        testInstructionFrame.setVisible(true);\n+    }\n@@ -59,0 +142,1 @@\n+    public static void createSwingTestUI() {\n@@ -60,1 +144,1 @@\n-        panel.setLayout(new GridLayout(4,1));\n+        panel.setLayout(new GridLayout(4, 1));\n@@ -66,2 +150,3 @@\n-        itext = itext+itext+itext+itext+itext+itext+itext;\n-        displayText(panel, itext);\n+        StringBuilder iTextBuilder = new StringBuilder(itext);\n+        displayText(panel,\n+                iTextBuilder.append(itext).append(itext).append(itext).append(itext).append(itext).append(itext).append(itext).toString());\n@@ -69,1 +154,1 @@\n-        String itext2 = \"\\u0641\"+text;\n+        String itext2 = \"\\u0641\" + text;\n@@ -77,1 +162,1 @@\n-        StringBuffer buffer = new StringBuffer();\n+        StringBuilder buffer = new StringBuilder();\n@@ -90,0 +175,1 @@\n+        frame.setLocationRelativeTo(null);\n@@ -97,4 +183,5 @@\n-            try { job.print(); }\n-            catch (Exception e) {\n-              e.printStackTrace();\n-              throw new RuntimeException(e);\n+            try {\n+                job.print();\n+            } catch (Exception e) {\n+                e.printStackTrace();\n+                throw new RuntimeException(e);\n@@ -105,1 +192,0 @@\n-\n@@ -108,1 +194,1 @@\n-        panel.setLayout(new GridLayout(2,1));\n+        panel.setLayout(new GridLayout(2, 1));\n@@ -116,1 +202,1 @@\n-        JButton button = new JButton(\"Print \"+text);\n+        JButton button = new JButton(\"Print \" + text);\n@@ -135,2 +221,27 @@\n-    public int print(Graphics g, PageFormat pf, int pageIndex)\n-        throws PrinterException {\n+    public static void getFailureReason() {\n+        final JDialog dialog = new JDialog();\n+        dialog.setTitle(\"Read testcase failure reason\");\n+        JPanel jPanel = new JPanel(new BorderLayout());\n+        JTextArea jTextArea = new JTextArea(5, 20);\n+\n+        JButton okButton = new JButton(\"Ok\");\n+        okButton.addActionListener((ae) -> {\n+            failureReason = jTextArea.getText();\n+            testResult = false;\n+            resultCountDownLatch.countDown();\n+            dialog.dispose();\n+        });\n+\n+        jPanel.add(new JLabel(\"Enter the testcase failed reason below and \" +\n+                \"click OK button\", JLabel.CENTER), BorderLayout.NORTH);\n+        jPanel.add(jTextArea, BorderLayout.CENTER);\n+\n+        JPanel okayBtnPanel = new JPanel();\n+        okayBtnPanel.add(okButton);\n+\n+        jPanel.add(okayBtnPanel, BorderLayout.SOUTH);\n+        dialog.add(jPanel);\n+        dialog.setLocationRelativeTo(null);\n+        dialog.pack();\n+        dialog.setVisible(true);\n+    }\n@@ -138,0 +249,3 @@\n+    @Override\n+    public int print(Graphics g, PageFormat pf, int pageIndex)\n+            throws PrinterException {\n@@ -141,1 +255,1 @@\n-        g.translate((int)pf.getImageableX(), (int)pf.getImageableY());\n+        g.translate((int) pf.getImageableX(), (int) pf.getImageableY());\n@@ -143,1 +257,0 @@\n-\n@@ -146,1 +259,0 @@\n-\n@@ -149,115 +261,0 @@\n-class Sysout\n- {\n-   private static TestDialog dialog;\n-\n-   public static void createDialogWithInstructions( String[] instructions )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      dialog.printInstructions( instructions );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-   public static void createDialog( )\n-    {\n-      dialog = new TestDialog( new Frame(), \"Instructions\" );\n-      String[] defInstr = { \"Instructions will appear here. \", \"\" } ;\n-      dialog.printInstructions( defInstr );\n-      dialog.show();\n-      println( \"Any messages for the tester will display here.\" );\n-    }\n-\n-\n-   public static void printInstructions( String[] instructions )\n-    {\n-      dialog.printInstructions( instructions );\n-    }\n-\n-\n-   public static void println( String messageIn )\n-    {\n-      dialog.displayMessage( messageIn );\n-    }\n-\n- }\/\/ Sysout  class\n-\n-\/**\n-  This is part of the standard test machinery.  It provides a place for the\n-   test instructions to be displayed, and a place for interactive messages\n-   to the user to be displayed.\n-  To have the test instructions displayed, see Sysout.\n-  To have a message to the user be displayed, see Sysout.\n-  Do not call anything in this dialog directly.\n-  *\/\n-class TestDialog extends Dialog\n- {\n-\n-   TextArea instructionsText;\n-   TextArea messageText;\n-   int maxStringLength = 80;\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public TestDialog( Frame frame, String name )\n-    {\n-      super( frame, name );\n-      int scrollBoth = TextArea.SCROLLBARS_BOTH;\n-      instructionsText = new TextArea( \"\", 10, maxStringLength, scrollBoth );\n-      add( \"North\", instructionsText );\n-\n-      messageText = new TextArea( \"\", 5, maxStringLength, scrollBoth );\n-      add(\"South\", messageText);\n-\n-      pack();\n-\n-      show();\n-    }\/\/ TestDialog()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void printInstructions( String[] instructions )\n-    {\n-      \/\/Clear out any current instructions\n-      instructionsText.setText( \"\" );\n-\n-      \/\/Go down array of instruction strings\n-\n-      String printStr, remainingStr;\n-      for( int i=0; i < instructions.length; i++ )\n-       {\n-     \/\/chop up each into pieces maxSringLength long\n-     remainingStr = instructions[ i ];\n-     while( remainingStr.length() > 0 )\n-      {\n-        \/\/if longer than max then chop off first max chars to print\n-        if( remainingStr.length() >= maxStringLength )\n-         {\n-           \/\/Try to chop on a word boundary\n-           int posOfSpace = remainingStr.\n-          lastIndexOf( ' ', maxStringLength - 1 );\n-\n-           if( posOfSpace <= 0 ) posOfSpace = maxStringLength - 1;\n-\n-           printStr = remainingStr.substring( 0, posOfSpace + 1 );\n-           remainingStr = remainingStr.substring( posOfSpace + 1 );\n-         }\n-        \/\/else just print\n-        else\n-         {\n-           printStr = remainingStr;\n-           remainingStr = \"\";\n-         }\n-\n-            instructionsText.append( printStr + \"\\n\" );\n-\n-      }\/\/ while\n-\n-       }\/\/ for\n-\n-    }\/\/printInstructions()\n-\n-   \/\/DO NOT call this directly, go through Sysout\n-   public void displayMessage( String messageIn )\n-    {\n-      messageText.append( messageIn + \"\\n\" );\n-    }\n-\n-}\/\/ TestDialog  class\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/SwingUIText.java","additions":153,"deletions":156,"binary":false,"changes":309,"status":"modified"}]}