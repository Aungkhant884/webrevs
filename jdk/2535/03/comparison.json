{"files":[{"patch":"@@ -67,0 +67,1 @@\n+#include \"runtime\/threadSMR.hpp\"\n@@ -1005,0 +1006,2 @@\n+      ThreadsListHandle tlh;\n+      assert(tlh.includes(ct), \"ct=\" INTPTR_FORMAT \" exited unexpectedly.\", p2i(ct));\n@@ -1008,1 +1011,0 @@\n-        MutexLocker mu(Threads_lock);\n@@ -1025,0 +1027,2 @@\n+      ThreadsListHandle tlh;\n+      assert(tlh.includes(ct), \"ct=\" INTPTR_FORMAT \" exited unexpectedly.\", p2i(ct));\n@@ -1028,1 +1032,0 @@\n-        MutexLocker mu(Threads_lock);\n@@ -1111,0 +1114,2 @@\n+      ThreadsListHandle tlh;\n+      assert(tlh.includes(ct), \"ct=\" INTPTR_FORMAT \" exited unexpectedly.\", p2i(ct));\n@@ -1114,1 +1119,0 @@\n-        MutexLocker mu(Threads_lock);\n@@ -1131,0 +1135,2 @@\n+      ThreadsListHandle tlh;\n+      assert(tlh.includes(ct), \"ct=\" INTPTR_FORMAT \" exited unexpectedly.\", p2i(ct));\n@@ -1134,1 +1140,0 @@\n-        MutexLocker mu(Threads_lock);\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2937,2 +2937,0 @@\n-  \/\/ A nested ThreadsListHandle will grab the Threads_lock so create\n-  \/\/ tlh before we resolve throwable.\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -485,0 +485,22 @@\n+\/\/ Is the target JavaThread protected by the calling Thread:\n+bool Thread::is_JavaThread_protected(const JavaThread* p) {\n+  Thread* thread = Thread::current();\n+  if (thread == p || thread->is_VM_thread()) {\n+    \/\/ Target JavaThread is self or access by the VMThread is always protected:\n+    return true;\n+  }\n+\n+  \/\/ Check the ThreadsLists associated with the calling thread (if any)\n+  \/\/ to see if one of them protects the target JavaThread:\n+  for (SafeThreadsListPtr* stlp = thread->_threads_list_ptr; stlp != NULL; stlp = stlp->previous()) {\n+    if (stlp->list()->includes(p)) {\n+      \/\/ The target JavaThread is protected by this ThreadsList:\n+      return true;\n+    }\n+  }\n+\n+  \/\/ The target JavaThread is not on this ThreadsList or any of its\n+  \/\/ nested ThreadsLists (if any) so it is not safe to query:\n+  return false;\n+}\n+\n@@ -2522,1 +2544,1 @@\n-\/\/ seen prior to having it's threadObj set (eg JNI attaching threads and\n+\/\/ seen prior to having its threadObj set (e.g., JNI attaching threads and\n@@ -2526,11 +2548,26 @@\n-#ifdef ASSERT\n-  \/\/ early safepoints can hit while current thread does not yet have TLS\n-  if (!SafepointSynchronize::is_at_safepoint()) {\n-    \/\/ Current JavaThreads are allowed to get their own name without\n-    \/\/ the Threads_lock.\n-    if (Thread::current() != this) {\n-      assert_locked_or_safepoint_or_handshake(Threads_lock, this);\n-    }\n-  }\n-#endif \/\/ ASSERT\n-  return get_thread_name_string();\n+  if (Thread::is_JavaThread_protected(this)) {\n+    \/\/ The target JavaThread is protected so get_thread_name_string() is safe:\n+    return get_thread_name_string();\n+  }\n+\n+\/\/#ifdef ASSERT\n+  Thread *current_thread = Thread::current();\n+\/\/#endif\n+  \/\/ Use this with -XX:+UseNewCode to diagnose locations that are missing\n+  \/\/ a ThreadsListHandle:\n+  \/\/ guarantee(!UseNewCode, \"current_thread=\" INTPTR_FORMAT\n+  \/\/           \" is not protecting this=\" INTPTR_FORMAT,\n+  \/\/           p2i(current_thread), p2i(this));\n+  guarantee(false, \"current_thread=\" INTPTR_FORMAT\n+            \" is not protecting this=\" INTPTR_FORMAT,\n+            p2i(current_thread), p2i(this));\n+\n+  \/\/ Note: Since this JavaThread isn't protected by a TLH, the call to\n+  \/\/ this->is_handshake_safe_for() may crash, but we have debug bits so...\n+  assert(SafepointSynchronize::is_at_safepoint() ||\n+         this->is_handshake_safe_for(current_thread), \"JavaThread=\"\n+         INTPTR_FORMAT \" is not protected, not at a safepoint and \"\n+         \"not handshake safe.\", p2i(this));\n+\n+  \/\/ The target JavaThread is not protected so we return the default:\n+  return Thread::name();\n@@ -2897,0 +2934,6 @@\n+void Threads::java_threads_do(JavaThreadIteratorWithHandle* jtiwh_p, ThreadClosure* tc) {\n+  for (; JavaThread *jt = jtiwh_p->next(); ) {\n+    tc->do_thread(jt);\n+  }\n+}\n+\n@@ -2910,0 +2953,5 @@\n+void Threads::threads_do(JavaThreadIteratorWithHandle* jtiwh_p, ThreadClosure* tc) {\n+  java_threads_do(jtiwh_p, tc);\n+  non_java_threads_do(tc);\n+}\n+\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":60,"deletions":12,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+class JavaThreadIteratorWithHandle;\n@@ -202,1 +203,0 @@\n-\n@@ -204,0 +204,3 @@\n+  \/\/ Is the target JavaThread protected by the calling Thread:\n+  static bool is_JavaThread_protected(const JavaThread* p);\n+\n@@ -1785,0 +1788,1 @@\n+  static void java_threads_do(JavaThreadIteratorWithHandle* jtiwh_p, ThreadClosure* tc);\n@@ -1787,0 +1791,1 @@\n+  static void threads_do(JavaThreadIteratorWithHandle* jtiwh_p, ThreadClosure* tc);\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -847,2 +847,2 @@\n-    MutexLocker ml(Threads_lock);\n-    Threads::threads_do(&vmtcc);\n+    JavaThreadIteratorWithHandle jtiwh;\n+    Threads::threads_do(&jtiwh, &vmtcc);\n@@ -1619,1 +1619,1 @@\n-  void do_unlocked();\n+  void do_string_allocs();\n@@ -1635,3 +1635,0 @@\n-\/\/\n-\/\/ Called with Threads_lock held\n-\/\/\n@@ -1639,1 +1636,0 @@\n-  assert(Threads_lock->owned_by_self(), \"Must hold Threads_lock\");\n@@ -1662,2 +1658,1 @@\n-\/\/ Called without Threads_lock, we can allocate String objects.\n-void ThreadTimesClosure::do_unlocked() {\n+void ThreadTimesClosure::do_string_allocs() {\n@@ -1707,2 +1702,2 @@\n-    MutexLocker ml(THREAD, Threads_lock);\n-    Threads::threads_do(&ttc);\n+    JavaThreadIteratorWithHandle jtiwh;\n+    Threads::threads_do(&jtiwh, &ttc);\n@@ -1710,1 +1705,1 @@\n-  ttc.do_unlocked();\n+  ttc.do_string_allocs();\n","filename":"src\/hotspot\/share\/services\/management.cpp","additions":7,"deletions":12,"binary":false,"changes":19,"status":"modified"}]}