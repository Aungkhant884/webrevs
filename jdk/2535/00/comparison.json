{"files":[{"patch":"@@ -1008,1 +1008,0 @@\n-        MutexLocker mu(Threads_lock);\n@@ -1028,1 +1027,0 @@\n-        MutexLocker mu(Threads_lock);\n@@ -1114,1 +1112,0 @@\n-        MutexLocker mu(Threads_lock);\n@@ -1134,1 +1131,0 @@\n-        MutexLocker mu(Threads_lock);\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -280,7 +280,6 @@\n-  oop threadObj = thread->as_Java_thread()->threadObj();\n-  if (threadObj == NULL) {\n-    return \"NULL\";\n-  }\n-  oop name = java_lang_Thread::name(threadObj);\n-  if (name == NULL) {\n-    return \"<NOT FILLED IN>\";\n+\n+  ThreadsListHandle tlh;\n+  JavaThread* jt = thread->as_Java_thread();\n+  if (Thread::current()->is_JavaThread_protected(jt)) {\n+    \/\/ The target JavaThread is protected so get_thread_name_string() is safe:\n+    return jt->get_thread_name_string();\n@@ -288,1 +287,2 @@\n-  return java_lang_String::as_utf8_string(name);\n+  \/\/ The target JavaThread is not protected so we return a non-NULL string:\n+  return \"<NOT FILLED IN>\";\n","filename":"src\/hotspot\/share\/prims\/jvmtiTrace.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -487,0 +487,20 @@\n+bool Thread::is_JavaThread_protected(const JavaThread* p) {\n+  if (current() == p) {\n+    \/\/ Current thread is always protected:\n+    return true;\n+  }\n+\n+  \/\/ Check the ThreadsLists associated with the calling thread (if any)\n+  \/\/ to see if one of them protects the target JavaThread:\n+  for (SafeThreadsListPtr* stlp = _threads_list_ptr; stlp != NULL; stlp = stlp->previous()) {\n+    if (stlp->list()->includes(p)) {\n+      \/\/ The target JavaThread is protected by this ThreadsList:\n+      return true;\n+    }\n+  }\n+\n+  \/\/ The target JavaThread is not on this ThreadsList or any of its\n+  \/\/ nested ThreadsLists (if any) so it is not safe to query:\n+  return false;\n+}\n+\n@@ -2829,1 +2849,1 @@\n-\/\/ seen prior to having it's threadObj set (eg JNI attaching threads and\n+\/\/ seen prior to having it's threadObj set (e.g., JNI attaching threads and\n@@ -2833,8 +2853,5 @@\n-#ifdef ASSERT\n-  \/\/ early safepoints can hit while current thread does not yet have TLS\n-  if (!SafepointSynchronize::is_at_safepoint()) {\n-    \/\/ Current JavaThreads are allowed to get their own name without\n-    \/\/ the Threads_lock.\n-    if (Thread::current() != this) {\n-      assert_locked_or_safepoint_or_handshake(Threads_lock, this);\n-    }\n+  ThreadsListHandle tlh;\n+\n+  if (Thread::current()->is_JavaThread_protected(this)) {\n+    \/\/ The target JavaThread is protected so get_thread_name_string() is safe:\n+    return get_thread_name_string();\n@@ -2842,2 +2859,3 @@\n-#endif \/\/ ASSERT\n-  return get_thread_name_string();\n+\n+  \/\/ The target JavaThread is not protected so we return \"Unknown thread\":\n+  return Thread::name();\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":29,"deletions":11,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -215,1 +215,0 @@\n-\n@@ -217,0 +216,3 @@\n+  \/\/ Is the target JavaThread protected by this Thread:\n+  bool is_JavaThread_protected(const JavaThread* p);\n+\n@@ -1690,0 +1692,1 @@\n+  friend class JvmtiTrace;  \/\/ so get_thread_name_string() can be called\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}