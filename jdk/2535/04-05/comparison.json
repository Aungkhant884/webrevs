{"files":[{"patch":"@@ -1006,1 +1006,1 @@\n-      ThreadsListHandle tlh;\n+      ThreadsListHandle tlh;  \/\/ get_thread_name() depends on the TLH.\n@@ -1027,1 +1027,1 @@\n-      ThreadsListHandle tlh;\n+      ThreadsListHandle tlh;  \/\/ get_thread_name() depends on the TLH.\n@@ -1114,2 +1114,2 @@\n-      ThreadsListHandle tlh;\n-      if (!tlh.includes(ct)) break;\n+      ThreadsListHandle tlh;  \/\/ get_thread_name() depends on the TLH.\n+      assert(tlh.includes(ct), \"ct=\" INTPTR_FORMAT \" exited unexpectedly.\", p2i(ct));\n@@ -1135,2 +1135,2 @@\n-      ThreadsListHandle tlh;\n-      if (!tlh.includes(ct)) break;\n+      ThreadsListHandle tlh;  \/\/ get_thread_name() depends on the TLH.\n+      assert(tlh.includes(ct), \"ct=\" INTPTR_FORMAT \" exited unexpectedly.\", p2i(ct));\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -485,1 +485,2 @@\n-\/\/ Is the target JavaThread protected by the calling Thread:\n+\/\/ Is the target JavaThread protected by the calling Thread\n+\/\/ or by some other mechanism:\n@@ -487,3 +488,13 @@\n-  Thread* thread = Thread::current();\n-  if (thread == p || thread->is_VM_thread()) {\n-    \/\/ Target JavaThread is self or access by the VMThread is always protected:\n+  \/\/ Do the simplest check first:\n+  if (SafepointSynchronize::is_at_safepoint()) {\n+    \/\/ The target is protected since JavaThreads cannot exit\n+    \/\/ while we're at a safepoint.\n+    return true;\n+  }\n+\n+  \/\/ Now make the simple checks based on who the caller is:\n+  Thread* current_thread = Thread::current();\n+  if (current_thread == p || Threads_lock->owner() == current_thread) {\n+    \/\/ Target JavaThread is self or calling thread owns the Threads_lock.\n+    \/\/ Second check is the same as Threads_lock->owner_is_self(),\n+    \/\/ but we already have the current thread so check directly.\n@@ -495,1 +506,2 @@\n-  for (SafeThreadsListPtr* stlp = thread->_threads_list_ptr; stlp != NULL; stlp = stlp->previous()) {\n+  for (SafeThreadsListPtr* stlp = current_thread->_threads_list_ptr;\n+       stlp != NULL; stlp = stlp->previous()) {\n@@ -502,2 +514,14 @@\n-  \/\/ The target JavaThread is not on this ThreadsList or any of its\n-  \/\/ nested ThreadsLists (if any) so it is not safe to query:\n+  \/\/ Use this debug code with -XX:+UseNewCode to diagnose locations that\n+  \/\/ are missing a ThreadsListHandle or other protection mechanism:\n+  \/\/ guarantee(!UseNewCode, \"current_thread=\" INTPTR_FORMAT \" is not protecting p=\"\n+  \/\/           INTPTR_FORMAT, p2i(current_thread), p2i(p));\n+  guarantee(false, \"current_thread=\" INTPTR_FORMAT \" is not protecting p=\"\n+            INTPTR_FORMAT, p2i(current_thread), p2i(p));\n+\n+  \/\/ Note: Since 'p' isn't protected by a TLH, the call to\n+  \/\/ p->is_handshake_safe_for() may crash, but we have debug bits so\n+  \/\/ we'll be able to figure out what protection mechanism is missing.\n+  assert(p->is_handshake_safe_for(current_thread), \"JavaThread=\" INTPTR_FORMAT\n+         \" is not protected and not handshake safe.\", p2i(p));\n+\n+  \/\/ The target JavaThread is not protected so it is not safe to query:\n@@ -2553,19 +2577,0 @@\n-\/\/#ifdef ASSERT\n-  Thread *current_thread = Thread::current();\n-\/\/#endif\n-  \/\/ Use this with -XX:+UseNewCode to diagnose locations that are missing\n-  \/\/ a ThreadsListHandle:\n-  \/\/ guarantee(!UseNewCode, \"current_thread=\" INTPTR_FORMAT\n-  \/\/           \" is not protecting this=\" INTPTR_FORMAT,\n-  \/\/           p2i(current_thread), p2i(this));\n-  guarantee(false, \"current_thread=\" INTPTR_FORMAT\n-            \" is not protecting this=\" INTPTR_FORMAT,\n-            p2i(current_thread), p2i(this));\n-\n-  \/\/ Note: Since this JavaThread isn't protected by a TLH, the call to\n-  \/\/ this->is_handshake_safe_for() may crash, but we have debug bits so...\n-  assert(SafepointSynchronize::is_at_safepoint() ||\n-         this->is_handshake_safe_for(current_thread), \"JavaThread=\"\n-         INTPTR_FORMAT \" is not protected, not at a safepoint and \"\n-         \"not handshake safe.\", p2i(this));\n-\n@@ -2934,6 +2939,0 @@\n-void Threads::java_threads_do(JavaThreadIteratorWithHandle* jtiwh_p, ThreadClosure* tc) {\n-  for (; JavaThread *jt = jtiwh_p->next(); ) {\n-    tc->do_thread(jt);\n-  }\n-}\n-\n@@ -2953,5 +2952,0 @@\n-void Threads::threads_do(JavaThreadIteratorWithHandle* jtiwh_p, ThreadClosure* tc) {\n-  java_threads_do(jtiwh_p, tc);\n-  non_java_threads_do(tc);\n-}\n-\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":31,"deletions":37,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -57,1 +57,0 @@\n-class JavaThreadIteratorWithHandle;\n@@ -203,0 +202,1 @@\n+\n@@ -204,1 +204,2 @@\n-  \/\/ Is the target JavaThread protected by the calling Thread:\n+  \/\/ Is the target JavaThread protected by the calling Thread\n+  \/\/ or by some other mechanism:\n@@ -1788,1 +1789,0 @@\n-  static void java_threads_do(JavaThreadIteratorWithHandle* jtiwh_p, ThreadClosure* tc);\n@@ -1791,1 +1791,0 @@\n-  static void threads_do(JavaThreadIteratorWithHandle* jtiwh_p, ThreadClosure* tc);\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -848,2 +848,2 @@\n-    JavaThreadIteratorWithHandle jtiwh;\n-    Threads::threads_do(&jtiwh, &vmtcc);\n+    MutexLocker ml(Threads_lock);\n+    Threads::threads_do(&vmtcc);\n@@ -1620,1 +1620,1 @@\n-  void do_string_allocs();\n+  void do_unlocked();\n@@ -1636,0 +1636,3 @@\n+\/\/\n+\/\/ Called with Threads_lock held\n+\/\/\n@@ -1637,0 +1640,1 @@\n+  assert(Threads_lock->owned_by_self(), \"Must hold Threads_lock\");\n@@ -1659,1 +1663,2 @@\n-void ThreadTimesClosure::do_string_allocs() {\n+\/\/ Called without Threads_lock, we can allocate String objects.\n+void ThreadTimesClosure::do_unlocked() {\n@@ -1703,2 +1708,2 @@\n-    JavaThreadIteratorWithHandle jtiwh;\n-    Threads::threads_do(&jtiwh, &ttc);\n+    MutexLocker ml(THREAD, Threads_lock);\n+    Threads::threads_do(&ttc);\n@@ -1706,1 +1711,1 @@\n-  ttc.do_string_allocs();\n+  ttc.do_unlocked();\n","filename":"src\/hotspot\/share\/services\/management.cpp","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"}]}