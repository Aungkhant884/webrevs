{"files":[{"patch":"@@ -1762,4 +1762,0 @@\n-      if (!VM_Version::supports_avx512bw() && (is_subword_type(bt) || UseAVX < 1)) {\n-        return false;\n-      }\n-      break;\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -308,7 +308,0 @@\n-    \/\/ Since operation support check is done upfront, we reach here only when target\n-    \/\/ specific checks in match_rule_supported_vector returned a true value\n-    \/\/ for these masked operations over non-predicated targets.\n-    if (!is_supported && (sopc == Op_StoreVectorMasked || sopc == Op_LoadVectorMasked)) {\n-      return true;\n-    }\n-\n@@ -1227,2 +1220,1 @@\n-                                                mem_num_elem, mem_elem_bt,\n-                                                (VectorMaskUseType) (VecMaskUseLoad | VecMaskUsePred));\n+                                                mem_num_elem, mem_elem_bt, VecMaskUseLoad);\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -3923,1 +3923,0 @@\n-    @ForceInline\n@@ -3934,1 +3933,0 @@\n-    @ForceInline\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3534,1 +3534,0 @@\n-    @ForceInline\n@@ -3545,1 +3544,0 @@\n-    @ForceInline\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3484,1 +3484,0 @@\n-    @ForceInline\n@@ -3495,1 +3494,0 @@\n-    @ForceInline\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3641,1 +3641,0 @@\n-    @ForceInline\n@@ -3652,1 +3651,0 @@\n-    @ForceInline\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3576,1 +3576,0 @@\n-    @ForceInline\n@@ -3587,1 +3586,0 @@\n-    @ForceInline\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3909,1 +3909,0 @@\n-    @ForceInline\n@@ -3920,1 +3919,0 @@\n-    @ForceInline\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5136,1 +5136,0 @@\n-    @ForceInline\n@@ -5147,1 +5146,0 @@\n-    @ForceInline\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/gen-src.sh","additions":0,"deletions":0,"binary":false,"changes":0,"status":"modified"},{"patch":"@@ -98,1 +98,1 @@\n-            ByteVector.fromArray(bspecies, byteIn, i, mask).intoArray(byteOut, i, mask);\n+            ByteVector.fromArray(bspecies, byteIn, i, mask).intoArray(byteOut, i);\n@@ -106,1 +106,1 @@\n-            ShortVector.fromArray(sspecies, shortIn, i, mask).intoArray(shortOut, i, mask);\n+            ShortVector.fromArray(sspecies, shortIn, i, mask).intoArray(shortOut, i);\n@@ -114,1 +114,1 @@\n-            IntVector.fromArray(ispecies, intIn, i, mask).intoArray(intOut, i, mask);\n+            IntVector.fromArray(ispecies, intIn, i, mask).intoArray(intOut, i);\n@@ -122,1 +122,1 @@\n-            LongVector.fromArray(lspecies, longIn, i, mask).intoArray(longOut, i, mask);\n+            LongVector.fromArray(lspecies, longIn, i, mask).intoArray(longOut, i);\n@@ -130,1 +130,1 @@\n-            FloatVector.fromArray(fspecies, floatIn, i, mask).intoArray(floatOut, i, mask);\n+            FloatVector.fromArray(fspecies, floatIn, i, mask).intoArray(floatOut, i);\n@@ -138,1 +138,1 @@\n-            DoubleVector.fromArray(dspecies, doubleIn, i, mask).intoArray(doubleOut, i, mask);\n+            DoubleVector.fromArray(dspecies, doubleIn, i, mask).intoArray(doubleOut, i);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/LoadMaskedIOOBEBenchmark.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,134 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.jdk.incubator.vector;\n+\n+import java.util.concurrent.TimeUnit;\n+import jdk.incubator.vector.*;\n+import org.openjdk.jmh.annotations.*;\n+\n+@BenchmarkMode(Mode.Throughput)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@State(Scope.Benchmark)\n+@Warmup(iterations = 3, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(value = 1, jvmArgsPrepend = {\"--add-modules=jdk.incubator.vector\"})\n+public class StoreMaskedIOOBEBenchmark {\n+    @Param({\"1024\"})\n+    private int inSize;\n+\n+    @Param({\"1022\"})\n+    private int outSize;\n+\n+    private byte[] byteIn;\n+    private byte[] byteOut;\n+    private short[] shortIn;\n+    private short[] shortOut;\n+    private int[] intIn;\n+    private int[] intOut;\n+    private long[] longIn;\n+    private long[] longOut;\n+    private float[] floatIn;\n+    private float[] floatOut;\n+    private double[] doubleIn;\n+    private double[] doubleOut;\n+\n+    private static final VectorSpecies<Byte> bspecies = VectorSpecies.ofLargestShape(byte.class);\n+    private static final VectorSpecies<Short> sspecies = VectorSpecies.ofLargestShape(short.class);\n+    private static final VectorSpecies<Integer> ispecies = VectorSpecies.ofLargestShape(int.class);\n+    private static final VectorSpecies<Long> lspecies = VectorSpecies.ofLargestShape(long.class);\n+    private static final VectorSpecies<Float> fspecies = VectorSpecies.ofLargestShape(float.class);\n+    private static final VectorSpecies<Double> dspecies = VectorSpecies.ofLargestShape(double.class);\n+\n+    @Setup(Level.Trial)\n+    public void Setup() {\n+        byteIn = new byte[inSize];\n+        byteOut = new byte[outSize];\n+        shortIn = new short[inSize];\n+        shortOut = new short[outSize];\n+        intIn = new int[inSize];\n+        intOut = new int[outSize];\n+        longIn = new long[inSize];\n+        longOut = new long[outSize];\n+        floatIn = new float[inSize];\n+        floatOut = new float[outSize];\n+        doubleIn = new double[inSize];\n+        doubleOut = new double[outSize];\n+\n+        for (int i = 0; i < inSize; i++) {\n+            byteIn[i] = (byte) i;\n+            shortIn[i] = (short) i;\n+            intIn[i] = i;\n+            longIn[i] = i;\n+            floatIn[i] = (float) i;\n+            doubleIn[i] = (double) i;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void byteStoreArrayMaskIOOBE() {\n+        VectorMask<Byte> mask = VectorMask.fromLong(bspecies, (1 << (bspecies.length() - 2)) - 1);\n+        for (int i = 0; i < inSize; i += bspecies.length()) {\n+            ByteVector.fromArray(bspecies, byteIn, i, mask).intoArray(byteOut, i, mask);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void shortStoreArrayMaskIOOBE() {\n+        VectorMask<Short> mask = VectorMask.fromLong(sspecies, (1 << (sspecies.length() - 2)) - 1);\n+        for (int i = 0; i < inSize; i += sspecies.length()) {\n+            ShortVector.fromArray(sspecies, shortIn, i).intoArray(shortOut, i, mask);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void intStoreArrayMaskIOOBE() {\n+        VectorMask<Integer> mask = VectorMask.fromLong(ispecies, (1 << (ispecies.length() - 2)) - 1);\n+        for (int i = 0; i < inSize; i += ispecies.length()) {\n+            IntVector.fromArray(ispecies, intIn, i).intoArray(intOut, i, mask);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void longStoreArrayMaskIOOBE() {\n+        VectorMask<Long> mask = VectorMask.fromLong(lspecies, (1 << (lspecies.length() - 2)) -1);\n+        for (int i = 0; i < inSize; i += lspecies.length()) {\n+            LongVector.fromArray(lspecies, longIn, i).intoArray(longOut, i, mask);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void floatStoreArrayMaskIOOBE() {\n+        VectorMask<Float> mask = VectorMask.fromLong(fspecies, (1 << (fspecies.length() - 2)) - 1);\n+        for (int i = 0; i < inSize; i += fspecies.length()) {\n+            FloatVector.fromArray(fspecies, floatIn, i).intoArray(floatOut, i, mask);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void doubleStoreArrayMaskIOOBE() {\n+        VectorMask<Double> mask = VectorMask.fromLong(dspecies, (1 << (dspecies.length() - 2)) - 1);\n+        for (int i = 0; i < inSize; i += dspecies.length()) {\n+            DoubleVector.fromArray(dspecies, doubleIn, i).intoArray(doubleOut, i, mask);\n+        }\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/StoreMaskedIOOBEBenchmark.java","additions":134,"deletions":0,"binary":false,"changes":134,"status":"added"}]}