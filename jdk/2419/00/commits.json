[{"commit":{"message":"8261022: Fix incorrect result of Math.abs() with char type\n\nMath.abs() with char type may return incorrect result after C2 superword\noptimization. It can be reproduced by below Java code and commands.\n\npublic class Bug {\n    private static int SIZE = 60000;\n    private static char[] a = new char[SIZE];\n    private static char[] b = new char[SIZE];\n\n    public static void main(String[] args) {\n        for (int i = 0; i < SIZE; i++) {\n            a[i] = b[i] = (char) i;\n        }\n        for (int i = 0; i < SIZE; i++) {\n            a[i] = (char) Math.abs(a[i]);\n        }\n        for (int i = 0; i < SIZE; i++) {\n            if (a[i] != b[i]) {\n                throw new RuntimeException(\"Broken!\");\n            }\n        }\n        System.out.println(\"OK\");\n    }\n}\n\n\/\/ $ java -Xint Bug\n\/\/ OK\n\n\/\/ $ java -Xcomp -XX:-TieredCompilation Bug\n\/\/ Exception in thread \"main\" java.lang.RuntimeException: Broken!\n\/\/         at Bug.main(Bug.java:15)\n\nIn Java, 'char' is a 16-bit unsigned integer type and the abs() method\nshould always return the value of its input. But with C2 vectorization,\nthe sign bit of the 16-bit value is cleared because it's regarded as a\nsigned value.\n\nRoot cause is that we get an imprecise vector element type for AbsINode\nfrom SuperWord::compute_vector_element_type(). In any Java arithmetic\noperation, operands of small integer types (boolean, byte, char & short)\nshould be promoted to int first. As vector elements of small types don't\nhave upper bits of int, for RShiftI or AbsI operations, the compiler has\nto know the precise signedness info of the 1st operand. These operations\nshouldn't be vectorized if the signedness info is imprecise.\n\nIn code SuperWord::compute_vector_element_type(), we have some special\nhandling for right shift. It limited the vectorization of small integer\nright shift to operations only after loads. The reason is that in the C2\ncompiler, only LoadNode has precise signedness info of its value. When\nJDK-8222074 enabled abs vectorization, it didn't involve AbsI operation\ninto the special handling and thus introduced this bug. This patch just\ndoes the fix at this point.\n\nTested hotspot::hotspot_all_no_apps, jdk::jdk_core and langtools::tier1,\nno new failure is found. Also created a new jtreg with this fix."},"files":[{"filename":"src\/hotspot\/share\/opto\/superword.cpp"},{"filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestAbsCharVector.java"}],"sha":"7ec48429ec727cae4284df47f7efe24bd7cfd410"}]