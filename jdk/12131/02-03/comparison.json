{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-import java.time.LocalDateTime;\n@@ -30,2 +29,0 @@\n-import java.time.format.DateTimeFormatterBuilder;\n-import java.time.temporal.ChronoField;\n@@ -68,12 +65,0 @@\n-    private static final DateTimeFormatter FORMATTER_WITH_PADDING = new DateTimeFormatterBuilder()\n-            .appendLiteral(\"Date:\")\n-            .padNext(20, ' ')\n-            .append(DateTimeFormatter.ISO_DATE)\n-            .toFormatter();\n-\n-    private static final DateTimeFormatter YEAR_FORMATTER = new DateTimeFormatterBuilder()\n-            .appendLiteral(\"Year:\")\n-            .padNext(5)\n-            .appendValue(ChronoField.YEAR)\n-            .toFormatter();\n-\n@@ -90,1 +75,1 @@\n-        final Instant loInstant = Instant.EPOCH.plus(Duration.ofDays(365 * 50)); \/\/ 2020-01-01\n+        final Instant loInstant = Instant.EPOCH.plus(Duration.ofDays(365*50)); \/\/ 2020-01-01\n@@ -109,1 +94,1 @@\n-    private final StringBuilder stringBuilder = new StringBuilder(100);\n+    private StringBuilder stringBuilder = new StringBuilder(100);\n@@ -111,1 +96,0 @@\n-    private LocalDateTime now;\n@@ -118,1 +102,0 @@\n-        now = LocalDateTime.now();\n@@ -139,10 +122,0 @@\n-    @Benchmark\n-    public String formatWithPadding() {\n-        return FORMATTER_WITH_PADDING.format(now);\n-    }\n-\n-    @Benchmark\n-    public String formatWithZeroPadding() {\n-        return YEAR_FORMATTER.format(now);\n-    }\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/time\/format\/DateTimeFormatterBench.java","additions":3,"deletions":30,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.time.format;\n+\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeFormatterBuilder;\n+import java.time.temporal.ChronoField;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.Throughput)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(3)\n+@State(Scope.Benchmark)\n+public class DateTimeFormatterWithPaddingBench {\n+\n+    private static final DateTimeFormatter FORMATTER_WITH_PADDING = new DateTimeFormatterBuilder()\n+            .appendLiteral(\"Date:\")\n+            .padNext(20, ' ')\n+            .append(DateTimeFormatter.ISO_DATE)\n+            .toFormatter();\n+\n+    private static final DateTimeFormatter YEAR_FORMATTER = new DateTimeFormatterBuilder()\n+            .appendLiteral(\"Year:\")\n+            .padNext(5)\n+            .appendValue(ChronoField.YEAR)\n+            .toFormatter();\n+\n+    private final LocalDateTime now = LocalDateTime.now();\n+\n+    @Benchmark\n+    public String formatWithPadding() {\n+        return FORMATTER_WITH_PADDING.format(now);\n+    }\n+\n+    @Benchmark\n+    public String formatWithZeroPadding() {\n+        return YEAR_FORMATTER.format(now);\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/time\/format\/DateTimeFormatterWithPaddingBench.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"}]}