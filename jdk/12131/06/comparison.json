{"files":[{"patch":"@@ -2615,1 +2615,5 @@\n-            for (int i = 0; i < padWidth - len; i++) {\n+            var count = padWidth - len;\n+            if (count == 0) {\n+                return true;\n+            }\n+            if (count == 1) {\n@@ -2617,0 +2621,1 @@\n+                return true;\n@@ -2618,0 +2623,1 @@\n+            buf.insert(preLen, String.valueOf(padChar).repeat(count));\n","filename":"src\/java.base\/share\/classes\/java\/time\/format\/DateTimeFormatterBuilder.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.time.format;\n+\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeFormatterBuilder;\n+import java.time.temporal.ChronoField;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.Throughput)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(3)\n+@State(Scope.Benchmark)\n+public class DateTimeFormatterWithPaddingBench {\n+\n+    private static final DateTimeFormatter FORMATTER_WITH_PADDING = new DateTimeFormatterBuilder()\n+            .appendLiteral(\"Date:\")\n+            .padNext(20, ' ')\n+            .append(DateTimeFormatter.ISO_DATE)\n+            .toFormatter();\n+\n+    private static final DateTimeFormatter FORMATTER_WITH_PADDING_ZERO = new DateTimeFormatterBuilder()\n+            .appendLiteral(\"Year:\")\n+            .padNext(4)\n+            .appendValue(ChronoField.YEAR)\n+            .toFormatter();\n+\n+    private static final DateTimeFormatter FORMATTER_WITH_PADDING_ONE = new DateTimeFormatterBuilder()\n+            .appendLiteral(\"Year:\")\n+            .padNext(5)\n+            .appendValue(ChronoField.YEAR)\n+            .toFormatter();\n+\n+    private final LocalDateTime now = LocalDateTime.now();\n+\n+    @Benchmark\n+    public String formatWithPadding() {\n+        return FORMATTER_WITH_PADDING.format(now);\n+    }\n+\n+    @Benchmark\n+    public String formatWithPaddingLengthZero() {\n+        return FORMATTER_WITH_PADDING_ZERO.format(now);\n+    }\n+\n+    @Benchmark\n+    public String formatWithPaddingLengthOne() {\n+        return FORMATTER_WITH_PADDING_ONE.format(now);\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/time\/format\/DateTimeFormatterWithPaddingBench.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"}]}