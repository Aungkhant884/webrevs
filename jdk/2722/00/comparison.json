{"files":[{"patch":"@@ -365,1 +365,0 @@\n-#ifdef COMPILER2\n@@ -369,2 +368,10 @@\n-    return Matcher::max_vector_size(bt);\n-  }\n+    int min_lane_count = 64 \/ type2aelembytes(bt);\n+    \/\/ The return value should not be less than min_lane_count since the minimal vector size\n+    \/\/ supported by the Vector API is 64-bit (see VectorShape.preferredShape() for more details).\n+    \/\/ This is fine because the vector size is unlikely to be less than 64-bit on modern hardware.\n+    \/\/ And for the worst case, where the hardware doesn't support 64-bit long, the non-vector\n+    \/\/ implementation will be called, which is still fine.\n+#ifdef COMPILER2\n+    return MAX2(Matcher::max_vector_size(bt), min_lane_count);\n+#else\n+    return min_lane_count;\n@@ -372,0 +379,1 @@\n+  }\n","filename":"src\/hotspot\/share\/prims\/vectorSupport.cpp","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -249,5 +249,0 @@\n-            \/\/ FIXME: Consider removing, since unlikely to occur on modern hardware\n-            if (maxSize < Double.SIZE) {\n-                String msg = \"shape unavailable for lane type: \" + etype.getName();\n-                throw new UnsupportedOperationException(msg);\n-            }\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/VectorShape.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (C) 2021 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.vectorapi;\n+\n+import jdk.incubator.vector.DoubleVector;\n+import jdk.incubator.vector.VectorOperators;\n+import jdk.incubator.vector.VectorSpecies;\n+\n+\/*\n+ * @test\n+ * @bug 8262096\n+ * @summary Test the initialization of vector shapes\n+ * @modules jdk.incubator.vector\n+ * @run main\/othervm -XX:MaxVectorSize=8 compiler.vectorapi.VectorShapeInitTest\n+ * @run main\/othervm -XX:MaxVectorSize=4 compiler.vectorapi.VectorShapeInitTest\n+ *\/\n+\n+public class VectorShapeInitTest {\n+    static final VectorSpecies<Double> SPECIES = DoubleVector.SPECIES_64;\n+    static double[] a = new double[64];\n+    static double[] r = new double[64];\n+\n+    public static void main(String[] args) {\n+        DoubleVector av = DoubleVector.fromArray(SPECIES, a, 0);\n+        av.lanewise(VectorOperators.ABS).intoArray(r, 0);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorShapeInitTest.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"}]}