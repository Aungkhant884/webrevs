{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,1 +63,1 @@\n-    S_Max_BIT(VectorSupport.getMaxLaneCount(byte.class) * Byte.SIZE);\n+    S_Max_BIT(Math.max(VectorSupport.getMaxLaneCount(byte.class) * Byte.SIZE, 64));\n@@ -216,1 +216,1 @@\n-        int vectorBitSize = laneCount * elementSize;\n+        int vectorBitSize = Math.max(laneCount * elementSize, 64);\n@@ -249,5 +249,0 @@\n-            \/\/ FIXME: Consider removing, since unlikely to occur on modern hardware\n-            if (maxSize < Double.SIZE) {\n-                String msg = \"shape unavailable for lane type: \" + etype.getName();\n-                throw new UnsupportedOperationException(msg);\n-            }\n@@ -256,0 +251,1 @@\n+        prefBitSize = Math.max(prefBitSize, 64);\n@@ -258,1 +254,1 @@\n-        assert(prefBitSize\/Byte.SIZE == VectorSupport.getMaxLaneCount(byte.class));\n+        assert(prefBitSize == Math.max(VectorSupport.getMaxLaneCount(byte.class)*Byte.SIZE, 64));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/VectorShape.java","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,9 @@\n+\/**\n+ * @test\n+ * @bug 8262096\n+ * @summary Test the initialization of vector shapes\n+ * @modules jdk.incubator.vector java.base\/jdk.internal.vm.vector\n+ * @run testng\/othervm -XX:MaxVectorSize=8 PreferredSpeciesTest\n+ * @run testng\/othervm -XX:MaxVectorSize=4 PreferredSpeciesTest\n+ *\/\n+\n@@ -52,0 +61,1 @@\n+        int elemSize = 0;\n@@ -54,0 +64,1 @@\n+            elemSize = Byte.SIZE;\n@@ -56,0 +67,1 @@\n+            elemSize = Short.SIZE;\n@@ -58,0 +70,1 @@\n+            elemSize = Integer.SIZE;\n@@ -60,0 +73,1 @@\n+            elemSize = Long.SIZE;\n@@ -62,0 +76,1 @@\n+            elemSize = Float.SIZE;\n@@ -64,0 +79,1 @@\n+            elemSize = Double.SIZE;\n@@ -69,1 +85,3 @@\n-        System.out.println(\"class = \"+c+\"; preferred shape\"+shape+\"; preferred species = \"+species+\"; maxSize=\"+VectorSupport.getMaxLaneCount(c));\n+        int maxLaneCount = Math.max(VectorSupport.getMaxLaneCount(c), 64 \/ elemSize);\n+\n+        System.out.println(\"class = \"+c+\"; preferred shape\"+shape+\"; preferred species = \"+species+\"; maxSize=\"+maxLaneCount);\n@@ -71,1 +89,1 @@\n-        Assert.assertEquals(species.length(), Math.min(species.length(), VectorSupport.getMaxLaneCount(c)));\n+        Assert.assertEquals(species.length(), Math.min(species.length(), maxLaneCount));\n@@ -99,0 +117,3 @@\n+\n+        int maxLaneCount = Math.max(VectorSupport.getMaxLaneCount(c), 64 \/ elemSize);\n+\n@@ -100,1 +121,1 @@\n-        VectorShape largestShape = VectorShape.forBitSize(VectorSupport.getMaxLaneCount(c) * elemSize);\n+        VectorShape largestShape = VectorShape.forBitSize(maxLaneCount * elemSize);\n@@ -102,1 +123,1 @@\n-        System.out.println(\"class = \"+c+\"; largest species = \"+largestSpecies+\"; maxSize=\"+VectorSupport.getMaxLaneCount(c));\n+        System.out.println(\"class = \"+c+\"; largest species = \"+largestSpecies+\"; maxSize=\"+maxLaneCount);\n@@ -104,2 +125,2 @@\n-        Assert.assertEquals(largestSpecies.length(), VectorSupport.getMaxLaneCount(c));\n-        Assert.assertEquals(largestSpecies.length(), Math.max(species.length(), VectorSupport.getMaxLaneCount(c)));\n+        Assert.assertEquals(largestSpecies.length(), maxLaneCount);\n+        Assert.assertEquals(largestSpecies.length(), Math.max(species.length(), maxLaneCount));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/PreferredSpeciesTest.java","additions":28,"deletions":7,"binary":false,"changes":35,"status":"modified"}]}