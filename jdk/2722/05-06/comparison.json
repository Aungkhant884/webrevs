{"files":[{"patch":"@@ -63,1 +63,1 @@\n-    S_Max_BIT(Math.max(VectorSupport.getMaxLaneCount(byte.class) * Byte.SIZE, 64));\n+    S_Max_BIT(getMaxVectorBitSize(byte.class));\n@@ -214,4 +214,1 @@\n-        int laneCount = VectorSupport.getMaxLaneCount(etype);\n-        int elementSize = LaneType.of(etype).elementSize;\n-        int vectorBitSize = Math.max(laneCount * elementSize, 64);\n-        return VectorShape.forBitSize(vectorBitSize);\n+        return VectorShape.forBitSize(getMaxVectorBitSize(etype));\n@@ -247,3 +244,1 @@\n-            int maxLaneCount = VectorSupport.getMaxLaneCount(etype);\n-            int maxSize = type.elementSize * maxLaneCount;\n-            prefBitSize = Math.min(prefBitSize, maxSize);\n+            prefBitSize = Math.min(prefBitSize, getMaxVectorBitSize(etype));\n@@ -251,1 +246,0 @@\n-        prefBitSize = Math.max(prefBitSize, 64);\n@@ -254,1 +248,1 @@\n-        assert(prefBitSize == Math.max(VectorSupport.getMaxLaneCount(byte.class)*Byte.SIZE, 64));\n+        assert(prefBitSize == getMaxVectorBitSize(byte.class));\n@@ -260,0 +254,16 @@\n+    \/**\n+     * Returns the maximum vector bit size for a given element type.\n+     *\n+     * @param etype the element type.\n+     * @return the maximum vector bit.\n+     *\/\n+     \/*package-private*\/\n+    static int getMaxVectorBitSize(Class<?> etype) {\n+        \/\/ VectorSupport.getMaxLaneCount may return -1 if C2 is not enabled,\n+        \/\/ or a value smaller than the S_64_BIT.vectorBitSize \/ elementSizeInBits if MaxVectorSize < 16\n+        \/\/ If so default to S_64_BIT\n+        int maxLaneCount = VectorSupport.getMaxLaneCount(etype);\n+        int elementSizeInBits = LaneType.of(etype).elementSize;\n+        return Math.max(maxLaneCount * elementSizeInBits, S_64_BIT.vectorBitSize);\n+    }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/VectorShape.java","additions":20,"deletions":10,"binary":false,"changes":30,"status":"modified"}]}