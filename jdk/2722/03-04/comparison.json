{"files":[{"patch":"@@ -365,0 +365,1 @@\n+#ifdef COMPILER2\n@@ -368,11 +369,1 @@\n-    int min_lane_count = 8 \/ type2aelembytes(bt);\n-    \/\/ The return value should not be less than min_lane_count since the minimal vector size\n-    \/\/ supported by the Vector API is 64-bit (see VectorShape.preferredShape() for more details).\n-    \/\/ This is fine because the vector size is unlikely to be less than 64-bit on modern hardware.\n-    \/\/ And for the worst case, where the hardware doesn't support 64-bit long, the non-vector\n-    \/\/ implementation will be called, which is still fine.\n-#ifdef COMPILER2\n-    return MAX2(Matcher::max_vector_size(bt), min_lane_count);\n-#else\n-    return min_lane_count;\n-#endif \/\/ COMPILER2\n+    return Matcher::max_vector_size(bt);\n@@ -380,0 +371,1 @@\n+#endif \/\/ COMPILER2\n","filename":"src\/hotspot\/share\/prims\/vectorSupport.cpp","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    S_Max_BIT(VectorSupport.getMaxLaneCount(byte.class) * Byte.SIZE);\n+    S_Max_BIT(Math.max(VectorSupport.getMaxLaneCount(byte.class) * Byte.SIZE, 64));\n@@ -216,1 +216,1 @@\n-        int vectorBitSize = laneCount * elementSize;\n+        int vectorBitSize = Math.max(laneCount * elementSize, 64);\n@@ -251,0 +251,1 @@\n+        prefBitSize = Math.max(prefBitSize, 64);\n@@ -253,1 +254,1 @@\n-        assert(prefBitSize\/Byte.SIZE == VectorSupport.getMaxLaneCount(byte.class));\n+        assert(prefBitSize == Math.max(VectorSupport.getMaxLaneCount(byte.class)*Byte.SIZE, 64));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/VectorShape.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-\/*\n+\/**\n@@ -61,0 +61,1 @@\n+        int elemSize = 0;\n@@ -63,0 +64,1 @@\n+            elemSize = Byte.SIZE;\n@@ -65,0 +67,1 @@\n+            elemSize = Short.SIZE;\n@@ -67,0 +70,1 @@\n+            elemSize = Integer.SIZE;\n@@ -69,0 +73,1 @@\n+            elemSize = Long.SIZE;\n@@ -71,0 +76,1 @@\n+            elemSize = Float.SIZE;\n@@ -73,0 +79,1 @@\n+            elemSize = Double.SIZE;\n@@ -78,1 +85,3 @@\n-        System.out.println(\"class = \"+c+\"; preferred shape\"+shape+\"; preferred species = \"+species+\"; maxSize=\"+VectorSupport.getMaxLaneCount(c));\n+        int maxLaneCount = Math.max(VectorSupport.getMaxLaneCount(c), 64 \/ elemSize);\n+\n+        System.out.println(\"class = \"+c+\"; preferred shape\"+shape+\"; preferred species = \"+species+\"; maxSize=\"+maxLaneCount);\n@@ -80,1 +89,1 @@\n-        Assert.assertEquals(species.length(), Math.min(species.length(), VectorSupport.getMaxLaneCount(c)));\n+        Assert.assertEquals(species.length(), Math.min(species.length(), maxLaneCount));\n@@ -108,0 +117,3 @@\n+\n+        int maxLaneCount = Math.max(VectorSupport.getMaxLaneCount(c), 64 \/ elemSize);\n+\n@@ -109,1 +121,1 @@\n-        VectorShape largestShape = VectorShape.forBitSize(VectorSupport.getMaxLaneCount(c) * elemSize);\n+        VectorShape largestShape = VectorShape.forBitSize(maxLaneCount * elemSize);\n@@ -111,1 +123,1 @@\n-        System.out.println(\"class = \"+c+\"; largest species = \"+largestSpecies+\"; maxSize=\"+VectorSupport.getMaxLaneCount(c));\n+        System.out.println(\"class = \"+c+\"; largest species = \"+largestSpecies+\"; maxSize=\"+maxLaneCount);\n@@ -113,2 +125,2 @@\n-        Assert.assertEquals(largestSpecies.length(), VectorSupport.getMaxLaneCount(c));\n-        Assert.assertEquals(largestSpecies.length(), Math.max(species.length(), VectorSupport.getMaxLaneCount(c)));\n+        Assert.assertEquals(largestSpecies.length(), maxLaneCount);\n+        Assert.assertEquals(largestSpecies.length(), Math.max(species.length(), maxLaneCount));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/PreferredSpeciesTest.java","additions":19,"deletions":7,"binary":false,"changes":26,"status":"modified"}]}