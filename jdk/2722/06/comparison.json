{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,1 +63,1 @@\n-    S_Max_BIT(VectorSupport.getMaxLaneCount(byte.class) * Byte.SIZE);\n+    S_Max_BIT(getMaxVectorBitSize(byte.class));\n@@ -214,4 +214,1 @@\n-        int laneCount = VectorSupport.getMaxLaneCount(etype);\n-        int elementSize = LaneType.of(etype).elementSize;\n-        int vectorBitSize = laneCount * elementSize;\n-        return VectorShape.forBitSize(vectorBitSize);\n+        return VectorShape.forBitSize(getMaxVectorBitSize(etype));\n@@ -247,8 +244,1 @@\n-            int maxLaneCount = VectorSupport.getMaxLaneCount(etype);\n-            int maxSize = type.elementSize * maxLaneCount;\n-            \/\/ FIXME: Consider removing, since unlikely to occur on modern hardware\n-            if (maxSize < Double.SIZE) {\n-                String msg = \"shape unavailable for lane type: \" + etype.getName();\n-                throw new UnsupportedOperationException(msg);\n-            }\n-            prefBitSize = Math.min(prefBitSize, maxSize);\n+            prefBitSize = Math.min(prefBitSize, getMaxVectorBitSize(etype));\n@@ -258,1 +248,1 @@\n-        assert(prefBitSize\/Byte.SIZE == VectorSupport.getMaxLaneCount(byte.class));\n+        assert(prefBitSize == getMaxVectorBitSize(byte.class));\n@@ -264,0 +254,16 @@\n+    \/**\n+     * Returns the maximum vector bit size for a given element type.\n+     *\n+     * @param etype the element type.\n+     * @return the maximum vector bit.\n+     *\/\n+     \/*package-private*\/\n+    static int getMaxVectorBitSize(Class<?> etype) {\n+        \/\/ VectorSupport.getMaxLaneCount may return -1 if C2 is not enabled,\n+        \/\/ or a value smaller than the S_64_BIT.vectorBitSize \/ elementSizeInBits if MaxVectorSize < 16\n+        \/\/ If so default to S_64_BIT\n+        int maxLaneCount = VectorSupport.getMaxLaneCount(etype);\n+        int elementSizeInBits = LaneType.of(etype).elementSize;\n+        return Math.max(maxLaneCount * elementSizeInBits, S_64_BIT.vectorBitSize);\n+    }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/VectorShape.java","additions":21,"deletions":15,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,10 @@\n+\/**\n+ * @test\n+ * @bug 8262096\n+ * @requires vm.compiler2.enabled\n+ * @summary Test the initialization of vector shapes\n+ * @modules jdk.incubator.vector java.base\/jdk.internal.vm.vector\n+ * @run testng\/othervm -XX:MaxVectorSize=8 PreferredSpeciesTest\n+ * @run testng\/othervm -XX:MaxVectorSize=4 PreferredSpeciesTest\n+ *\/\n+\n@@ -52,0 +62,1 @@\n+        int elemSize = 0;\n@@ -54,0 +65,1 @@\n+            elemSize = Byte.SIZE;\n@@ -56,0 +68,1 @@\n+            elemSize = Short.SIZE;\n@@ -58,0 +71,1 @@\n+            elemSize = Integer.SIZE;\n@@ -60,0 +74,1 @@\n+            elemSize = Long.SIZE;\n@@ -62,0 +77,1 @@\n+            elemSize = Float.SIZE;\n@@ -64,0 +80,1 @@\n+            elemSize = Double.SIZE;\n@@ -69,1 +86,3 @@\n-        System.out.println(\"class = \"+c+\"; preferred shape\"+shape+\"; preferred species = \"+species+\"; maxSize=\"+VectorSupport.getMaxLaneCount(c));\n+        int maxLaneCount = Math.max(VectorSupport.getMaxLaneCount(c), 64 \/ elemSize);\n+\n+        System.out.println(\"class = \"+c+\"; preferred shape\"+shape+\"; preferred species = \"+species+\"; maxSize=\"+maxLaneCount);\n@@ -71,1 +90,1 @@\n-        Assert.assertEquals(species.length(), Math.min(species.length(), VectorSupport.getMaxLaneCount(c)));\n+        Assert.assertEquals(species.length(), Math.min(species.length(), maxLaneCount));\n@@ -99,0 +118,3 @@\n+\n+        int maxLaneCount = Math.max(VectorSupport.getMaxLaneCount(c), 64 \/ elemSize);\n+\n@@ -100,1 +122,1 @@\n-        VectorShape largestShape = VectorShape.forBitSize(VectorSupport.getMaxLaneCount(c) * elemSize);\n+        VectorShape largestShape = VectorShape.forBitSize(maxLaneCount * elemSize);\n@@ -102,1 +124,1 @@\n-        System.out.println(\"class = \"+c+\"; largest species = \"+largestSpecies+\"; maxSize=\"+VectorSupport.getMaxLaneCount(c));\n+        System.out.println(\"class = \"+c+\"; largest species = \"+largestSpecies+\"; maxSize=\"+maxLaneCount);\n@@ -104,2 +126,2 @@\n-        Assert.assertEquals(largestSpecies.length(), VectorSupport.getMaxLaneCount(c));\n-        Assert.assertEquals(largestSpecies.length(), Math.max(species.length(), VectorSupport.getMaxLaneCount(c)));\n+        Assert.assertEquals(largestSpecies.length(), maxLaneCount);\n+        Assert.assertEquals(largestSpecies.length(), Math.max(species.length(), maxLaneCount));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/PreferredSpeciesTest.java","additions":29,"deletions":7,"binary":false,"changes":36,"status":"modified"}]}