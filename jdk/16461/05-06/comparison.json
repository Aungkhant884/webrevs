{"files":[{"patch":"@@ -26,1 +26,1 @@\n- * Exemplar unnamed class.\n+ * Exemplar implicit class.\n@@ -28,1 +28,1 @@\n-public void main() {\n+void main() {\n","filename":"test\/jdk\/java\/lang\/Class\/ImplicitClass\/Implicit.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/jdk\/java\/lang\/Class\/UnnamedClass\/Unnamed.java","status":"renamed"},{"patch":"@@ -0,0 +1,91 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8315458\n+ * @enablePreview\n+ * @build Implicit TestImplicitClass\n+ * @run main TestImplicitClass\n+ * @summary Basic checks of java.lang.Class support for implicit classes\n+ *\/\n+\n+import java.lang.reflect.Modifier;\n+\n+public class TestImplicitClass {\n+    public static void main(String... args) throws Exception {\n+        Class<?> implicitClass = Class.forName(\"Implicit\");\n+\n+        \/*\n+         * From JEP 463 JLS changes:\n+         *\n+         * \"An implicit class compilation unit implicitly declares a class that satisfies the following\n+         * properties:\n+         * It is always a top level class.\n+         * It is never abstract (8.1.1.1).\n+         * It is never synthetic (13.1.11)\n+         * It is always final (8.1.1.2).\n+         * It is always a member of unnamed package (7.4.2) and has package access.\n+         * Its direct superclass type is always Object (8.1.4).\n+         * It never has any direct superinterface types (8.1.5).\n+         *\/\n+\n+        check(!(implicitClass.isInterface() ||\n+                implicitClass.isEnum()      ||\n+                implicitClass.isRecord()    ||\n+                implicitClass.isHidden()),\n+              \"Implicit class was not a normal class\");\n+\n+        check(!(implicitClass.isLocalClass()  ||\n+                implicitClass.isMemberClass() ||\n+                implicitClass.isPrimitive()   ||\n+                implicitClass.isArray()),\n+              \"Implicit class was not top-level\");\n+\n+        check(\"Implicit\".equals(implicitClass.getName()),     \"Unexpected Class.getName result\");\n+        check(\"Implicit\".equals(implicitClass.getTypeName()), \"Unexpected Class.getTypeName result\");\n+        check(\"Implicit\".equals(implicitClass.getSimpleName()),      \"Unexpected Class.getSimpleName result\");\n+        check(\"Implicit\".equals(implicitClass.getCanonicalName()),      \"Unexpected Class.getCanonicalName result\");\n+\n+        int modifiers = implicitClass.getModifiers();\n+        check((modifiers & Modifier.ABSTRACT) == 0,    \"Implicit class was abstract\");\n+        check((modifiers & Modifier.FINAL) != 0,       \"Implicit class was not final\");\n+        check((modifiers & (Modifier.PUBLIC  |\n+                            Modifier.PRIVATE |\n+                            Modifier.PROTECTED)) == 0, \"Implicit class was not package access\");\n+\n+        check(!implicitClass.isSynthetic(), \"Implicit class was synthetic\");\n+\n+        check(\"\".equals(implicitClass.getPackage().getName()), \"Implicit class not in an implicit package\");\n+\n+        check(implicitClass.getSuperclass() == Object.class, \"Superclass was not java.lang.Object\");\n+\n+        check(implicitClass.getInterfaces().length == 0, \"Implicit class had super interfaces\");\n+    }\n+\n+    private static void check(boolean predicate, String message) {\n+        if (!predicate) {\n+            throw new RuntimeException(message);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/Class\/ImplicitClass\/TestImplicitClass.java","additions":91,"deletions":0,"binary":false,"changes":91,"status":"added"}]}