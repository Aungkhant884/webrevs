{"files":[{"patch":"@@ -1,100 +0,0 @@\n-\/*\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.javac;\n-\n-import java.lang.annotation.*;\n-\n-\/**\n- * Indicates the API declaration in question is associated with a\n- * <em>preview feature<\/em>. See JEP 12: \"Preview Language and VM\n- * Features\" (https:\/\/openjdk.org\/jeps\/12).\n- *\n- * Note this internal annotation is handled specially by the javac compiler.\n- * To work properly with {@code --release older-release}, it requires special\n- * handling in {@code make\/langtools\/src\/classes\/build\/tools\/symbolgenerator\/CreateSymbols.java}\n- * and {@code src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java}.\n- *\n- * @since 14\n- *\/\n-\/\/ Match the meaningful targets of java.lang.Deprecated, omit local\n-\/\/ variables and parameter declarations\n-@Target({ElementType.METHOD,\n-         ElementType.CONSTRUCTOR,\n-         ElementType.FIELD,\n-         ElementType.PACKAGE,\n-         ElementType.MODULE,\n-         ElementType.TYPE})\n- \/\/ CLASS retention will hopefully be sufficient for the purposes at hand\n-@Retention(RetentionPolicy.CLASS)\n-\/\/ *Not* @Documented\n-public @interface PreviewFeature {\n-    \/**\n-     * Name of the preview feature the annotated API is associated\n-     * with.\n-     *\/\n-    public Feature feature();\n-\n-    public boolean reflective() default false;\n-\n-    \/**\n-     * Enum of preview features in the current release.\n-     * Values should be annotated with the feature's {@code JEP}.\n-     *\/\n-    public enum Feature {\n-        \/\/ not used, but required for interim javac to not warn.\n-        VIRTUAL_THREADS,\n-        FOREIGN,\n-\n-        @JEP(number=430, title=\"String Templates\")\n-        STRING_TEMPLATES,\n-        @JEP(number=445, title=\"Unnamed Classes and Instance Main Methods\")\n-        UNNAMED_CLASSES,\n-        @JEP(number=446, title=\"Scoped Values\", status=\"Preview\")\n-        SCOPED_VALUES,\n-        @JEP(number=453, title=\"Structured Concurrency\", status=\"Preview\")\n-        STRUCTURED_CONCURRENCY,\n-        \/**\n-         * A key for testing.\n-         *\/\n-        @JEP(number=0, title=\"Test Feature\")\n-        TEST,\n-        ;\n-    }\n-\n-    \/**\n-     * Annotation identifying the JEP associated with a preview feature.\n-     *\/\n-    @Target(ElementType.FIELD)\n-    @Retention(RetentionPolicy.CLASS)\n-    @interface JEP {\n-        \/** JEP number *\/\n-        int number() default 0;\n-        \/** JEP title in plain text *\/\n-        String title();\n-        \/** JEP status such as \"Preview\", \"Second Preview\", etc *\/\n-        String status() default \"Preview\";\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/javac\/PreviewFeature.java.orig","additions":0,"deletions":100,"binary":false,"changes":100,"status":"deleted"},{"patch":"@@ -1,282 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.tools.javac.code;\n-\n-import com.sun.tools.javac.code.Lint.LintCategory;\n-import com.sun.tools.javac.code.Source.Feature;\n-import com.sun.tools.javac.jvm.Target;\n-import com.sun.tools.javac.resources.CompilerProperties.Errors;\n-import com.sun.tools.javac.resources.CompilerProperties.Warnings;\n-import com.sun.tools.javac.util.Assert;\n-import com.sun.tools.javac.util.Context;\n-import com.sun.tools.javac.util.JCDiagnostic.DiagnosticPosition;\n-import com.sun.tools.javac.util.JCDiagnostic.Error;\n-import com.sun.tools.javac.util.JCDiagnostic.SimpleDiagnosticPosition;\n-import com.sun.tools.javac.util.JCDiagnostic.Warning;\n-import com.sun.tools.javac.util.Log;\n-import com.sun.tools.javac.util.MandatoryWarningHandler;\n-import com.sun.tools.javac.util.Names;\n-import com.sun.tools.javac.util.Options;\n-\n-import javax.tools.JavaFileObject;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.Map;\n-import java.util.Set;\n-\n-import static com.sun.tools.javac.code.Flags.RECORD;\n-import static com.sun.tools.javac.code.Flags.SEALED;\n-import static com.sun.tools.javac.code.Flags.NON_SEALED;\n-import static com.sun.tools.javac.main.Option.PREVIEW;\n-import com.sun.tools.javac.util.JCDiagnostic;\n-\n-\/**\n- * Helper class to handle preview language features. This class maps certain language features\n- * (see {@link Feature} into 'preview' features; the mapping is completely ad-hoc, so as to allow\n- * for maximum flexibility, which allows to migrate preview feature into supported features with ease.\n- *\n- * This class acts as a centralized point against which usages of preview features are reported by\n- * clients (e.g. other javac classes). Internally, this class collects all such usages and generates\n- * diagnostics to inform the user of such usages. Such diagnostics can be enabled using the\n- * {@link LintCategory#PREVIEW} lint category, and are suppressible by usual means.\n- *\/\n-public class Preview {\n-\n-    \/** flag: are preview features enabled *\/\n-    private final boolean enabled;\n-\n-    \/** the diag handler to manage preview feature usage diagnostics *\/\n-    private final MandatoryWarningHandler previewHandler;\n-\n-    \/** test flag: should all features be considered as preview features? *\/\n-    private final boolean forcePreview;\n-\n-    \/** a mapping from classfile numbers to Java SE versions *\/\n-    private final Map<Integer, Source> majorVersionToSource;\n-\n-    private final Set<JavaFileObject> sourcesWithPreviewFeatures = new HashSet<>();\n-\n-    private final Names names;\n-    private final Lint lint;\n-    private final Log log;\n-    private final Source source;\n-\n-    private static final Context.Key<Preview> previewKey = new Context.Key<>();\n-\n-    public static Preview instance(Context context) {\n-        Preview instance = context.get(previewKey);\n-        if (instance == null) {\n-            instance = new Preview(context);\n-        }\n-        return instance;\n-    }\n-\n-    Preview(Context context) {\n-        context.put(previewKey, this);\n-        Options options = Options.instance(context);\n-        names = Names.instance(context);\n-        enabled = options.isSet(PREVIEW);\n-        log = Log.instance(context);\n-        lint = Lint.instance(context);\n-        source = Source.instance(context);\n-        this.previewHandler =\n-                new MandatoryWarningHandler(log, source, lint.isEnabled(LintCategory.PREVIEW), true, \"preview\", LintCategory.PREVIEW);\n-        forcePreview = options.isSet(\"forcePreview\");\n-        majorVersionToSource = initMajorVersionToSourceMap();\n-    }\n-\n-    private Map<Integer, Source> initMajorVersionToSourceMap() {\n-        Map<Integer, Source> majorVersionToSource = new HashMap<>();\n-        for (Target t : Target.values()) {\n-            int major = t.majorVersion;\n-            Source source = Source.lookup(t.name);\n-            if (source != null) {\n-                majorVersionToSource.put(major, source);\n-            }\n-        }\n-        return majorVersionToSource;\n-    }\n-\n-    \/**\n-     * Returns true if {@code s} is deemed to participate in the preview of {@code previewSymbol}, and\n-     * therefore no warnings or errors will be produced.\n-     *\n-     * @param syms the symbol table\n-     * @param s the symbol depending on the preview symbol\n-     * @param previewSymbol the preview symbol marked with @Preview\n-     * @return true if {@code s} is participating in the preview of {@code previewSymbol}\n-     *\/\n-    public boolean participatesInPreview(Symtab syms, Symbol s, Symbol previewSymbol) {\n-        \/\/ All symbols in the same module as the preview symbol participate in the preview API\n-        if (previewSymbol.packge().modle == s.packge().modle) {\n-            return true;\n-        }\n-\n-        \/\/ If java.base's jdk.internal.javac package is exported to s's module then\n-        \/\/ s participates in the preview API\n-        return syms.java_base.exports.stream()\n-                .filter(ed -> ed.packge.fullname == names.jdk_internal_javac)\n-                .anyMatch(ed -> ed.modules.contains(s.packge().modle));\n-    }\n-\n-    \/**\n-     * Report usage of a preview feature. Usages reported through this method will affect the\n-     * set of sourcefiles with dependencies on preview features.\n-     * @param pos the position at which the preview feature was used.\n-     * @param feature the preview feature used.\n-     *\/\n-    public void warnPreview(int pos, Feature feature) {\n-        warnPreview(new SimpleDiagnosticPosition(pos), feature);\n-    }\n-\n-    \/**\n-     * Report usage of a preview feature. Usages reported through this method will affect the\n-     * set of sourcefiles with dependencies on preview features.\n-     * @param pos the position at which the preview feature was used.\n-     * @param feature the preview feature used.\n-     *\/\n-    public void warnPreview(DiagnosticPosition pos, Feature feature) {\n-        Assert.check(isEnabled());\n-        Assert.check(isPreview(feature));\n-        if (!lint.isSuppressed(LintCategory.PREVIEW)) {\n-            sourcesWithPreviewFeatures.add(log.currentSourceFile());\n-            previewHandler.report(pos, feature.isPlural() ?\n-                    Warnings.PreviewFeatureUsePlural(feature.nameFragment()) :\n-                    Warnings.PreviewFeatureUse(feature.nameFragment()));\n-        }\n-    }\n-\n-    \/**\n-     * Report usage of a preview feature in classfile.\n-     * @param classfile the name of the classfile with preview features enabled\n-     * @param majorVersion the major version found in the classfile.\n-     *\/\n-    public void warnPreview(JavaFileObject classfile, int majorVersion) {\n-        Assert.check(isEnabled());\n-        if (lint.isEnabled(LintCategory.PREVIEW)) {\n-            log.mandatoryWarning(LintCategory.PREVIEW, null,\n-                    Warnings.PreviewFeatureUseClassfile(classfile, majorVersionToSource.get(majorVersion).name));\n-        }\n-    }\n-\n-    public void markUsesPreview(DiagnosticPosition pos) {\n-        sourcesWithPreviewFeatures.add(log.currentSourceFile());\n-    }\n-\n-    public void reportPreviewWarning(DiagnosticPosition pos, Warning warnKey) {\n-        previewHandler.report(pos, warnKey);\n-    }\n-\n-    public boolean usesPreview(JavaFileObject file) {\n-        return sourcesWithPreviewFeatures.contains(file);\n-    }\n-\n-    \/**\n-     * Are preview features enabled?\n-     * @return true, if preview features are enabled.\n-     *\/\n-    public boolean isEnabled() {\n-        return enabled;\n-    }\n-\n-    \/**\n-     * Is given feature a preview feature?\n-     * @param feature the feature to be tested.\n-     * @return true, if given feature is a preview feature.\n-     *\/\n-    public boolean isPreview(Feature feature) {\n-        return switch (feature) {\n-            case STRING_TEMPLATES -> true;\n-            case UNNAMED_CLASSES -> true;\n-            \/\/Note: this is a backdoor which allows to optionally treat all features as 'preview' (for testing).\n-            \/\/When real preview features will be added, this method can be implemented to return 'true'\n-            \/\/for those selected features, and 'false' for all the others.\n-            default -> forcePreview;\n-        };\n-    }\n-\n-    \/**\n-     * Generate an error key which captures the fact that a given preview feature could not be used\n-     * due to the preview feature support being disabled.\n-     * @param feature the feature for which the diagnostic has to be generated.\n-     * @return the diagnostic.\n-     *\/\n-    public Error disabledError(Feature feature) {\n-        Assert.check(!isEnabled());\n-        return feature.isPlural() ?\n-                Errors.PreviewFeatureDisabledPlural(feature.nameFragment()) :\n-                Errors.PreviewFeatureDisabled(feature.nameFragment());\n-    }\n-\n-    \/**\n-     * Generate an error key which captures the fact that a preview classfile cannot be loaded\n-     * due to the preview feature support being disabled.\n-     * @param classfile the name of the classfile with preview features enabled\n-     * @param majorVersion the major version found in the classfile.\n-     *\/\n-    public Error disabledError(JavaFileObject classfile, int majorVersion) {\n-        Assert.check(!isEnabled());\n-        return Errors.PreviewFeatureDisabledClassfile(classfile, majorVersionToSource.get(majorVersion).name);\n-    }\n-\n-    \/**\n-     * Check whether the given symbol has been declared using\n-     * a preview language feature.\n-     *\n-     * @param sym Symbol to check\n-     * @return true iff sym has been declared using a preview language feature\n-     *\/\n-    public boolean declaredUsingPreviewFeature(Symbol sym) {\n-        return false;\n-    }\n-\n-    \/**\n-     * Report any deferred diagnostics.\n-     *\/\n-    public void reportDeferredDiagnostics() {\n-        previewHandler.reportDeferredDiagnostic();\n-    }\n-\n-    public void clear() {\n-        previewHandler.clear();\n-    }\n-\n-    public void checkSourceLevel(DiagnosticPosition pos, Feature feature) {\n-        if (isPreview(feature) && !isEnabled()) {\n-            \/\/preview feature without --preview flag, error\n-            log.error(JCDiagnostic.DiagnosticFlag.SOURCE_LEVEL, pos, disabledError(feature));\n-        } else {\n-            if (!feature.allowedInSource(source)) {\n-                log.error(JCDiagnostic.DiagnosticFlag.SOURCE_LEVEL, pos,\n-                          feature.error(source.name));\n-            }\n-            if (isEnabled() && isPreview(feature)) {\n-                warnPreview(pos, feature);\n-            }\n-        }\n-    }\n-\n-}\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Preview.java.orig","additions":0,"deletions":282,"binary":false,"changes":282,"status":"deleted"},{"patch":"@@ -1,338 +0,0 @@\n-\/*\n- * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.tools.javac.code;\n-\n-import java.util.*;\n-\n-import javax.lang.model.SourceVersion;\n-import static javax.lang.model.SourceVersion.*;\n-\n-import com.sun.tools.javac.jvm.Target;\n-import com.sun.tools.javac.resources.CompilerProperties.Errors;\n-import com.sun.tools.javac.resources.CompilerProperties.Fragments;\n-import com.sun.tools.javac.util.*;\n-import com.sun.tools.javac.util.JCDiagnostic.Error;\n-import com.sun.tools.javac.util.JCDiagnostic.Fragment;\n-\n-import static com.sun.tools.javac.main.Option.*;\n-\n-\/** The source language version accepted.\n- *\n- *  <p><b>This is NOT part of any supported API.\n- *  If you write code that depends on this, you do so at your own risk.\n- *  This code and its internal interfaces are subject to change or\n- *  deletion without notice.<\/b>\n- *\/\n-public enum Source {\n-    \/** 1.0 had no inner classes, and so could not pass the JCK. *\/\n-    \/\/ public static final Source JDK1_0 =              new Source(\"1.0\");\n-\n-    \/** 1.1 did not have strictfp, and so could not pass the JCK. *\/\n-    \/\/ public static final Source JDK1_1 =              new Source(\"1.1\");\n-\n-    \/** 1.2 introduced strictfp. *\/\n-    JDK1_2(\"1.2\"),\n-\n-    \/** 1.3 is the same language as 1.2. *\/\n-    JDK1_3(\"1.3\"),\n-\n-    \/** 1.4 introduced assert. *\/\n-    JDK1_4(\"1.4\"),\n-\n-    \/** 1.5 introduced generics, attributes, foreach, boxing, static import,\n-     *  covariant return, enums, varargs, et al. *\/\n-    JDK5(\"5\"),\n-\n-    \/** 1.6 reports encoding problems as errors instead of warnings. *\/\n-    JDK6(\"6\"),\n-\n-    \/** 1.7 introduced try-with-resources, multi-catch, string switch, etc. *\/\n-    JDK7(\"7\"),\n-\n-    \/** 1.8 lambda expressions and default methods. *\/\n-    JDK8(\"8\"),\n-\n-    \/** 1.9 modularity. *\/\n-    JDK9(\"9\"),\n-\n-    \/** 1.10 local-variable type inference (var). *\/\n-    JDK10(\"10\"),\n-\n-    \/** 1.11 local-variable syntax for lambda parameters *\/\n-    JDK11(\"11\"),\n-\n-    \/** 12, no language features; switch expression in preview *\/\n-    JDK12(\"12\"),\n-\n-    \/**\n-     * 13, no language features; text blocks and revised switch\n-     * expressions in preview\n-     *\/\n-    JDK13(\"13\"),\n-\n-    \/**\n-     * 14, switch expressions; pattern matching, records, and revised\n-     * text blocks in preview\n-     *\/\n-    JDK14(\"14\"),\n-\n-    \/**\n-      * 15, text blocks\n-      *\/\n-    JDK15(\"15\"),\n-\n-    \/**\n-      * 16, records and pattern matching for instanceof\n-      *\/\n-    JDK16(\"16\"),\n-\n-    \/**\n-      * 17, sealed classes, restoration of always-strict floating-point\n-      *\/\n-    JDK17(\"17\"),\n-\n-    \/**\n-      * 18, no major changes\n-      *\/\n-    JDK18(\"18\"),\n-\n-    \/**\n-      * 19, no major changes\n-      *\/\n-    JDK19(\"19\"),\n-\n-    \/**\n-      * 20, no major changes\n-      *\/\n-    JDK20(\"20\"),\n-\n-    \/**\n-      * 21, tbd\n-      *\/\n-    JDK21(\"21\"),\n-\n-    \/**\n-      * 22, tbd\n-      *\/\n-    JDK22(\"22\"),\n-    ; \/\/ Reduce code churn when appending new constants\n-\n-    private static final Context.Key<Source> sourceKey = new Context.Key<>();\n-\n-    public static Source instance(Context context) {\n-        Source instance = context.get(sourceKey);\n-        if (instance == null) {\n-            Options options = Options.instance(context);\n-            String sourceString = options.get(SOURCE);\n-            if (sourceString != null) instance = lookup(sourceString);\n-            if (instance == null) instance = DEFAULT;\n-            context.put(sourceKey, instance);\n-        }\n-        return instance;\n-    }\n-\n-    public final String name;\n-\n-    private static final Map<String,Source> tab = new HashMap<>();\n-    static {\n-        for (Source s : values()) {\n-            tab.put(s.name, s);\n-        }\n-        tab.put(\"1.5\", JDK5); \/\/ Make 5 an alias for 1.5\n-        tab.put(\"1.6\", JDK6); \/\/ Make 6 an alias for 1.6\n-        tab.put(\"1.7\", JDK7); \/\/ Make 7 an alias for 1.7\n-        tab.put(\"1.8\", JDK8); \/\/ Make 8 an alias for 1.8\n-        tab.put(\"1.9\", JDK9); \/\/ Make 9 an alias for 1.9\n-        tab.put(\"1.10\", JDK10); \/\/ Make 10 an alias for 1.10\n-        \/\/ Decline to make 1.11 an alias for 11.\n-    }\n-\n-    private Source(String name) {\n-        this.name = name;\n-    }\n-\n-    public static final Source MIN = Source.JDK8;\n-\n-    private static final Source MAX = values()[values().length - 1];\n-\n-    public static final Source DEFAULT = MAX;\n-\n-    public static Source lookup(String name) {\n-        return tab.get(name);\n-    }\n-\n-    public boolean isSupported() {\n-        return this.compareTo(MIN) >= 0;\n-    }\n-\n-    public Target requiredTarget() {\n-        return switch(this) {\n-        case JDK22  -> Target.JDK1_22;\n-        case JDK21  -> Target.JDK1_21;\n-        case JDK20  -> Target.JDK1_20;\n-        case JDK19  -> Target.JDK1_19;\n-        case JDK18  -> Target.JDK1_18;\n-        case JDK17  -> Target.JDK1_17;\n-        case JDK16  -> Target.JDK1_16;\n-        case JDK15  -> Target.JDK1_15;\n-        case JDK14  -> Target.JDK1_14;\n-        case JDK13  -> Target.JDK1_13;\n-        case JDK12  -> Target.JDK1_12;\n-        case JDK11  -> Target.JDK1_11;\n-        case JDK10  -> Target.JDK1_10;\n-        case JDK9   -> Target.JDK1_9;\n-        case JDK8   -> Target.JDK1_8;\n-        case JDK7   -> Target.JDK1_7;\n-        case JDK6   -> Target.JDK1_6;\n-        case JDK5   -> Target.JDK1_5;\n-        case JDK1_4 -> Target.JDK1_4;\n-        default     -> Target.JDK1_1;\n-        };\n-    }\n-\n-    \/**\n-     * Models a feature of the Java programming language. Each feature can be associated with a\n-     * minimum source level, a maximum source level and a diagnostic fragment describing the feature,\n-     * which is used to generate error messages of the kind {@code feature XYZ not supported in source N}.\n-     *\/\n-    public enum Feature {\n-\n-        MODULES(JDK9, Fragments.FeatureModules, DiagKind.PLURAL),\n-        EFFECTIVELY_FINAL_VARIABLES_IN_TRY_WITH_RESOURCES(JDK9, Fragments.FeatureVarInTryWithResources, DiagKind.PLURAL),\n-        DEPRECATION_ON_IMPORT(MIN, JDK8),\n-        PRIVATE_SAFE_VARARGS(JDK9),\n-        DIAMOND_WITH_ANONYMOUS_CLASS_CREATION(JDK9, Fragments.FeatureDiamondAndAnonClass, DiagKind.NORMAL),\n-        UNDERSCORE_IDENTIFIER(MIN, JDK8),\n-        PRIVATE_INTERFACE_METHODS(JDK9, Fragments.FeaturePrivateIntfMethods, DiagKind.PLURAL),\n-        LOCAL_VARIABLE_TYPE_INFERENCE(JDK10),\n-        VAR_SYNTAX_IMPLICIT_LAMBDAS(JDK11, Fragments.FeatureVarSyntaxInImplicitLambda, DiagKind.PLURAL),\n-        IMPORT_ON_DEMAND_OBSERVABLE_PACKAGES(JDK1_2, JDK8),\n-        SWITCH_MULTIPLE_CASE_LABELS(JDK14, Fragments.FeatureMultipleCaseLabels, DiagKind.PLURAL),\n-        SWITCH_RULE(JDK14, Fragments.FeatureSwitchRules, DiagKind.PLURAL),\n-        SWITCH_EXPRESSION(JDK14, Fragments.FeatureSwitchExpressions, DiagKind.PLURAL),\n-        NO_TARGET_ANNOTATION_APPLICABILITY(JDK14),\n-        TEXT_BLOCKS(JDK15, Fragments.FeatureTextBlocks, DiagKind.PLURAL),\n-        PATTERN_MATCHING_IN_INSTANCEOF(JDK16, Fragments.FeaturePatternMatchingInstanceof, DiagKind.NORMAL),\n-        REIFIABLE_TYPES_INSTANCEOF(JDK16, Fragments.FeatureReifiableTypesInstanceof, DiagKind.PLURAL),\n-        RECORDS(JDK16, Fragments.FeatureRecords, DiagKind.PLURAL),\n-        SEALED_CLASSES(JDK17, Fragments.FeatureSealedClasses, DiagKind.PLURAL),\n-        CASE_NULL(JDK21, Fragments.FeatureCaseNull, DiagKind.NORMAL),\n-        PATTERN_SWITCH(JDK21, Fragments.FeaturePatternSwitch, DiagKind.PLURAL),\n-        REDUNDANT_STRICTFP(JDK17),\n-        UNCONDITIONAL_PATTERN_IN_INSTANCEOF(JDK21, Fragments.FeatureUnconditionalPatternsInInstanceof, DiagKind.PLURAL),\n-        RECORD_PATTERNS(JDK21, Fragments.FeatureDeconstructionPatterns, DiagKind.PLURAL),\n-        STRING_TEMPLATES(JDK21, Fragments.FeatureStringTemplates, DiagKind.PLURAL),\n-        UNNAMED_CLASSES(JDK21, Fragments.FeatureUnnamedClasses, DiagKind.PLURAL),\n-        WARN_ON_ILLEGAL_UTF8(MIN, JDK21),\n-        UNNAMED_VARIABLES(JDK22, Fragments.FeatureUnnamedVariables, DiagKind.PLURAL),\n-        ;\n-\n-        enum DiagKind {\n-            NORMAL,\n-            PLURAL;\n-        }\n-\n-        private final Source minLevel;\n-        private final Source maxLevel;\n-        private final Fragment optFragment;\n-        private final DiagKind optKind;\n-\n-        Feature(Source minLevel) {\n-            this(minLevel, null, null);\n-        }\n-\n-        Feature(Source minLevel, Fragment optFragment, DiagKind optKind) {\n-            this(minLevel, MAX, optFragment, optKind);\n-        }\n-\n-        Feature(Source minLevel, Source maxLevel) {\n-            this(minLevel, maxLevel, null, null);\n-        }\n-\n-        Feature(Source minLevel, Source maxLevel, Fragment optFragment, DiagKind optKind) {\n-            this.minLevel = minLevel;\n-            this.maxLevel = maxLevel;\n-            this.optFragment = optFragment;\n-            this.optKind = optKind;\n-        }\n-\n-        public boolean allowedInSource(Source source) {\n-            return source.compareTo(minLevel) >= 0 &&\n-                    source.compareTo(maxLevel) <= 0;\n-        }\n-\n-        public boolean isPlural() {\n-            Assert.checkNonNull(optKind);\n-            return optKind == DiagKind.PLURAL;\n-        }\n-\n-        public Fragment nameFragment() {\n-            Assert.checkNonNull(optFragment);\n-            return optFragment;\n-        }\n-\n-        public Fragment fragment(String sourceName) {\n-            Assert.checkNonNull(optFragment);\n-            return optKind == DiagKind.NORMAL ?\n-                    Fragments.FeatureNotSupportedInSource(optFragment, sourceName, minLevel.name) :\n-                    Fragments.FeatureNotSupportedInSourcePlural(optFragment, sourceName, minLevel.name);\n-        }\n-\n-        public Error error(String sourceName) {\n-            Assert.checkNonNull(optFragment);\n-            return optKind == DiagKind.NORMAL ?\n-                    Errors.FeatureNotSupportedInSource(optFragment, sourceName, minLevel.name) :\n-                    Errors.FeatureNotSupportedInSourcePlural(optFragment, sourceName, minLevel.name);\n-        }\n-    }\n-\n-    public static SourceVersion toSourceVersion(Source source) {\n-        return switch(source) {\n-        case JDK1_2 -> RELEASE_2;\n-        case JDK1_3 -> RELEASE_3;\n-        case JDK1_4 -> RELEASE_4;\n-        case JDK5   -> RELEASE_5;\n-        case JDK6   -> RELEASE_6;\n-        case JDK7   -> RELEASE_7;\n-        case JDK8   -> RELEASE_8;\n-        case JDK9   -> RELEASE_9;\n-        case JDK10  -> RELEASE_10;\n-        case JDK11  -> RELEASE_11;\n-        case JDK12  -> RELEASE_12;\n-        case JDK13  -> RELEASE_13;\n-        case JDK14  -> RELEASE_14;\n-        case JDK15  -> RELEASE_15;\n-        case JDK16  -> RELEASE_16;\n-        case JDK17  -> RELEASE_17;\n-        case JDK18  -> RELEASE_18;\n-        case JDK19  -> RELEASE_19;\n-        case JDK20  -> RELEASE_20;\n-        case JDK21  -> RELEASE_21;\n-        case JDK22  -> RELEASE_22;\n-        default     -> null;\n-        };\n-    }\n-}\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Source.java.orig","additions":0,"deletions":338,"binary":false,"changes":338,"status":"deleted"}]}