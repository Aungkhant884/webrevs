{"files":[{"patch":"@@ -756,1 +756,0 @@\n-        validateMainClass(mainClass);\n@@ -898,1 +897,0 @@\n-    private static int mainType = 0;\n@@ -903,5 +901,1 @@\n-    public static int getMainType() {\n-        return mainType;\n-    }\n-\n-    private static void setMainType(Method mainMethod) {\n+    public static int getMainType(Method mainMethod) {\n@@ -911,1 +905,1 @@\n-        mainType = (isStatic ? 0 : MAIN_NONSTATIC) | (noArgs ? MAIN_WITHOUT_ARGS : 0);\n+        return (isStatic ? 0 : MAIN_NONSTATIC) | (noArgs ? MAIN_WITHOUT_ARGS : 0);\n@@ -915,1 +909,2 @@\n-    static void validateMainClass(Class<?> mainClass) {\n+    \/\/ Return main method.\n+    public static Method validateMainMethod(Class<?> mainClass) {\n@@ -934,2 +929,0 @@\n-        setMainType(mainMethod);\n-\n@@ -940,0 +933,1 @@\n+                mainMethod = null;\n@@ -945,0 +939,1 @@\n+                    mainMethod = null;\n@@ -948,0 +943,1 @@\n+                mainMethod = null;\n@@ -950,0 +946,2 @@\n+\n+        return mainMethod;\n","filename":"src\/java.base\/share\/classes\/sun\/launcher\/LauncherHelper.java","additions":9,"deletions":11,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -406,0 +406,3 @@\n+    jclass helperClass;\n+    jmethodID validateMainMethod;\n+    jobject mainMethod;\n@@ -407,0 +410,1 @@\n+    int mainType;\n@@ -528,0 +532,11 @@\n+    \/*  Get launcher helper class. *\/\n+    helperClass = GetLauncherHelperClass(env);\n+\n+    \/*  Validate and fetch main method from application class. *\/\n+    validateMainMethod = (*env)->GetStaticMethodID(env, helperClass,\n+                                         \"validateMainMethod\",\n+                                         \"(Ljava\/lang\/Class;)Ljava\/lang\/reflect\/Method;\");\n+    CHECK_EXCEPTION_NULL_LEAVE(validateMainMethod);\n+    mainMethod = (*env)->CallStaticObjectMethod(env, helperClass, validateMainMethod, mainClass);\n+    NULL_CHECK_RETURN_VALUE(mainMethod, -1);\n+\n@@ -548,4 +563,3 @@\n-     * The LoadMainClass not only loads the main class, it will also ensure\n-     * that the main method's signature is correct, therefore further checking\n-     * is not required. The main method is invoked here so that extraneous java\n-     * stacks are not in the application stack trace.\n+     * validateMainMethod ensures that the main method's signature is correct,\n+     * therefore further checking is not required. The main method is invoked\n+     * here so that extraneous java stacks are not in the application stack trace.\n@@ -556,1 +570,0 @@\n-    jclass helperClass = GetLauncherHelperClass(env);\n@@ -559,1 +572,1 @@\n-                                                      \"()I\");\n+                                                      \"(Ljava\/lang\/reflect\/Method;)I\");\n@@ -561,2 +574,2 @@\n-    int mainType = (*env)->CallStaticIntMethod(env, helperClass, getMainType);\n-    CHECK_EXCEPTION_LEAVE(mainType);\n+    mainType = (*env)->CallStaticIntMethod(env, helperClass, getMainType, mainMethod);\n+    CHECK_EXCEPTION_LEAVE(-1);\n","filename":"src\/java.base\/share\/native\/libjli\/java.c","additions":21,"deletions":8,"binary":false,"changes":29,"status":"modified"}]}