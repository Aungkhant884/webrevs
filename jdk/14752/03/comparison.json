{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -661,6 +661,2 @@\n-    private static final boolean valuesMatch(Object value1, Object value2) {\n-        if (value1 == null) {\n-            return value2 == null;\n-        } else {\n-            return value1.equals(value2);\n-        }\n+    private static boolean valuesMatch(Object value1, Object value2) {\n+        return Objects.equals(value1, value2);\n@@ -763,0 +759,1 @@\n+        @Override\n@@ -778,0 +775,1 @@\n+        @Override\n@@ -1084,0 +1082,1 @@\n+    @Override\n@@ -1085,4 +1084,2 @@\n-        if (!(o instanceof AttributeEntry other)) {\n-            return false;\n-        }\n-        return other.key.equals(key) && Objects.equals(other.value, value);\n+        return o instanceof AttributeEntry other\n+                && other.key.equals(key) && Objects.equals(other.value, value);\n@@ -1103,0 +1100,1 @@\n+    @Override\n@@ -1104,1 +1102,1 @@\n-        return key.hashCode() ^ (value==null ? 0 : value.hashCode());\n+        return key.hashCode() ^ Objects.hashCode(value);\n","filename":"src\/java.base\/share\/classes\/java\/text\/AttributedString.java","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -504,0 +504,1 @@\n+    @Override\n@@ -516,0 +517,1 @@\n+    @Override\n@@ -517,1 +519,0 @@\n-        if (obj == null) return false;\n@@ -520,1 +521,1 @@\n-        if (getClass() != obj.getClass())\n+        if (obj == null || getClass() != obj.getClass())\n","filename":"src\/java.base\/share\/classes\/java\/text\/ChoiceFormat.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -533,4 +533,1 @@\n-        if (that == null) {\n-            return false;\n-        }\n-        if (getClass() != that.getClass()) {\n+        if (that == null || getClass() != that.getClass()) {\n","filename":"src\/java.base\/share\/classes\/java\/text\/Collator.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2357,1 +2357,5 @@\n-        if (!super.equals(obj)) {\n+        if (this == obj) {\n+            return true;\n+        }\n+\n+        if (!super.equals(obj)) { \/\/ super does null and class checks\n@@ -2372,3 +2376,1 @@\n-     * Returns the hash code for this {@code CompactNumberFormat} instance.\n-     *\n-     * @return hash code for this {@code CompactNumberFormat}\n+     * {@return the hash code for this {@code CompactNumberFormat} instance}\n","filename":"src\/java.base\/share\/classes\/java\/text\/CompactNumberFormat.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -686,0 +686,1 @@\n+    @Override\n@@ -698,4 +699,1 @@\n-                && ((localPatternChars != null\n-                  && localPatternChars.equals(that.localPatternChars))\n-                 || (localPatternChars == null\n-                  && that.localPatternChars == null)));\n+                && Objects.equals(localPatternChars, that.localPatternChars));\n","filename":"src\/java.base\/share\/classes\/java\/text\/DateFormatSymbols.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2921,2 +2921,4 @@\n-        if (obj == null)\n-            return false;\n+        if (this == obj) {\n+            return true;\n+        }\n+\n@@ -2924,1 +2926,2 @@\n-            return false; \/\/ super does class check\n+            return false; \/\/ super does null and class checks\n+\n","filename":"src\/java.base\/share\/classes\/java\/text\/DecimalFormat.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -744,1 +744,0 @@\n-        if (obj == null) return false;\n@@ -746,1 +745,1 @@\n-        if (getClass() != obj.getClass()) return false;\n+        if (obj == null || getClass() != obj.getClass()) return false;\n","filename":"src\/java.base\/share\/classes\/java\/text\/DecimalFormatSymbols.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,2 @@\n+import java.util.Objects;\n+\n@@ -221,0 +223,1 @@\n+    @Override\n@@ -223,1 +226,0 @@\n-        if (obj == null) return false;\n@@ -226,6 +228,1 @@\n-        if (attribute == null) {\n-            if (other.attribute != null) {\n-                return false;\n-            }\n-        }\n-        else if (!attribute.equals(other.attribute)) {\n+        if (!Objects.equals(attribute, other.attribute))\n@@ -233,1 +230,0 @@\n-        }\n@@ -240,2 +236,1 @@\n-     * Returns a hash code for this FieldPosition.\n-     * @return a hash code value for this object\n+     * {@return a hash code for this FieldPosition}\n@@ -243,0 +238,1 @@\n+    @Override\n@@ -273,1 +269,1 @@\n-     * represents an inteter constant and {@code field} equals it.\n+     * represents an integer constant and {@code field} equals it.\n","filename":"src\/java.base\/share\/classes\/java\/text\/FieldPosition.java","additions":8,"deletions":12,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+import java.util.Objects;\n@@ -1135,0 +1136,1 @@\n+    @Override\n@@ -1143,2 +1145,1 @@\n-                && ((locale != null && locale.equals(other.locale))\n-                 || (locale == null && other.locale == null))\n+                && Objects.equals(locale,other.locale)\n@@ -1153,0 +1154,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/java\/text\/MessageFormat.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -714,3 +714,0 @@\n-        if (obj == null) {\n-            return false;\n-        }\n@@ -720,1 +717,1 @@\n-        if (getClass() != obj.getClass()) {\n+        if (obj == null || getClass() != obj.getClass()) {\n","filename":"src\/java.base\/share\/classes\/java\/text\/NumberFormat.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -125,0 +125,1 @@\n+    @Override\n@@ -127,4 +128,2 @@\n-        if (obj == null) return false;\n-        if (!(obj instanceof ParsePosition other))\n-            return false;\n-        return (index == other.index && errorIndex == other.errorIndex);\n+        return obj instanceof ParsePosition other\n+                && index == other.index && errorIndex == other.errorIndex;\n@@ -134,2 +133,1 @@\n-     * Returns a hash code for this ParsePosition.\n-     * @return a hash code value for this object\n+     * {@return a hash code for this ParsePosition}\n@@ -137,0 +135,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/java\/text\/ParsePosition.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -732,0 +732,1 @@\n+    @Override\n@@ -733,2 +734,1 @@\n-        if (obj == null) return false;\n-        if (!super.equals(obj)) return false;  \/\/ super does class check\n+        if (!super.equals(obj)) return false;  \/\/ super does null and class checks\n@@ -743,0 +743,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/java\/text\/RuleBasedCollator.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -2412,3 +2412,1 @@\n-     * Returns the hash code value for this {@code SimpleDateFormat} object.\n-     *\n-     * @return the hash code value for this {@code SimpleDateFormat} object.\n+     * {@return the hash code value for this {@code SimpleDateFormat} object}\n@@ -2434,1 +2432,1 @@\n-            return false; \/\/ super does class check\n+            return false; \/\/ super does null and class checks\n","filename":"src\/java.base\/share\/classes\/java\/text\/SimpleDateFormat.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -94,0 +94,1 @@\n+    @Override\n@@ -95,3 +96,3 @@\n-        if (that.getClass() != this.getClass()) return false;\n-\n-        IntHashtable other = (IntHashtable) that;\n+        if (!(that instanceof IntHashtable other)) {\n+            return false;\n+        }\n@@ -99,1 +100,1 @@\n-                return false;\n+            return false;\n@@ -109,0 +110,1 @@\n+    @Override\n","filename":"src\/java.base\/share\/classes\/sun\/text\/IntHashtable.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,0 +49,2 @@\n+import java.util.Objects;\n+\n@@ -501,18 +503,3 @@\n-        try {\n-            if (that == null) {\n-                return false;\n-            }\n-\n-            RuleBasedBreakIterator other = (RuleBasedBreakIterator) that;\n-            if (checksum != other.checksum) {\n-                return false;\n-            }\n-            if (text == null) {\n-                return other.text == null;\n-            } else {\n-                return text.equals(other.text);\n-            }\n-        }\n-        catch(ClassCastException e) {\n-            return false;\n-        }\n+        return that instanceof RuleBasedBreakIterator other\n+                && checksum == other.checksum\n+                && Objects.equals(text, other.text);\n@@ -530,2 +517,1 @@\n-     * Compute a hashcode for this BreakIterator\n-     * @return A hash code\n+     * {@return hashcode for this BreakIterator}\n","filename":"src\/java.base\/share\/classes\/sun\/text\/RuleBasedBreakIterator.java","additions":7,"deletions":21,"binary":false,"changes":28,"status":"modified"}]}