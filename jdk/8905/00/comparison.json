{"files":[{"patch":"@@ -364,1 +364,1 @@\n-    private static final BigDecimal ZERO_THROUGH_TEN[] = {\n+    private static final BigDecimal[] ZERO_THROUGH_TEN = {\n@@ -519,1 +519,1 @@\n-        int scl = 0;                  \/\/ record scale value\n+        long scl = 0;                 \/\/ record scale value\n@@ -538,1 +538,0 @@\n-            long exp = 0;                    \/\/ exponent\n@@ -588,4 +587,1 @@\n-                        exp = parseExp(in, offset, len);\n-                        \/\/ Next test is required for backwards compatibility\n-                        if ((int) exp != exp) \/\/ overflow\n-                            throw new NumberFormatException(\"Exponent overflow.\");\n+                        scl -= parseExp(in, offset, len);\n@@ -601,4 +597,0 @@\n-                \/\/ Adjust scale if exp is not zero.\n-                if (exp != 0) { \/\/ had significant exponent\n-                    scl = adjustScale(scl, exp);\n-                }\n@@ -608,1 +600,1 @@\n-                                       \/\/ therefore, this subtract cannot overflow\n+                                       \/\/ therefore, this subtraction cannot overflow\n@@ -611,1 +603,1 @@\n-                        scl = checkScaleNonZero((long) scl - drop);\n+                        scl -= drop;\n@@ -618,1 +610,1 @@\n-                char coeff[] = new char[len];\n+                char[] coeff = new char[len];\n@@ -655,4 +647,1 @@\n-                    exp = parseExp(in, offset, len);\n-                    \/\/ Next test is required for backwards compatibility\n-                    if ((int) exp != exp) \/\/ overflow\n-                        throw new NumberFormatException(\"Exponent overflow.\");\n+                    scl -= parseExp(in, offset, len);\n@@ -664,4 +653,0 @@\n-                \/\/ Adjust scale if exp is not zero.\n-                if (exp != 0) { \/\/ had significant exponent\n-                    scl = adjustScale(scl, exp);\n-                }\n@@ -676,1 +661,1 @@\n-                            scl = checkScaleNonZero((long) scl - drop);\n+                            scl -= drop;\n@@ -690,1 +675,1 @@\n-                            scl = checkScaleNonZero((long) scl - drop);\n+                            scl -= drop;\n@@ -704,1 +689,3 @@\n-        this.scale = scl;\n+        if ((int) scl != scl) \/\/ overflow\n+            throw new NumberFormatException(\"Exponent overflow.\");\n+        this.scale = (int) scl;\n@@ -710,8 +697,0 @@\n-    private int adjustScale(int scl, long exp) {\n-        long adjustedScale = scl - exp;\n-        if (adjustedScale > Integer.MAX_VALUE || adjustedScale < Integer.MIN_VALUE)\n-            throw new NumberFormatException(\"Scale out of range.\");\n-        scl = (int) adjustedScale;\n-        return scl;\n-    }\n-\n@@ -822,3 +801,1 @@\n-     * followed by one or more decimal digits.  The value of the\n-     * exponent must lie between -{@link Integer#MAX_VALUE} ({@link\n-     * Integer#MIN_VALUE}+1) and {@link Integer#MAX_VALUE}, inclusive.\n+     * followed by one or more decimal digits.\n@@ -1443,1 +1420,1 @@\n-            BigDecimal arg[] = preAlign(lhs, augend, padding, mc);\n+            BigDecimal[] arg = preAlign(lhs, augend, padding, mc);\n@@ -1978,1 +1955,1 @@\n-        BigDecimal divrem[] = this.divideAndRemainder(divisor);\n+        BigDecimal[] divrem = this.divideAndRemainder(divisor);\n@@ -2008,1 +1985,1 @@\n-        BigDecimal divrem[] = this.divideAndRemainder(divisor, mc);\n+        BigDecimal[] divrem = this.divideAndRemainder(divisor, mc);\n@@ -3834,1 +3811,1 @@\n-    private static final double DOUBLE_10_POW[] = {\n+    private static final double[] DOUBLE_10_POW = {\n@@ -3845,1 +3822,1 @@\n-    private static final float FLOAT_10_POW[] = {\n+    private static final float[] FLOAT_10_POW = {\n@@ -4151,1 +4128,1 @@\n-    private static volatile BigInteger BIG_TEN_POWERS_TABLE[] = {\n+    private static volatile BigInteger[] BIG_TEN_POWERS_TABLE = {\n@@ -4178,1 +4155,1 @@\n-    private static final long THRESHOLDS_TABLE[] = {\n+    private static final long[] THRESHOLDS_TABLE = {\n@@ -4911,1 +4888,1 @@\n-        BigInteger qr[]; \/\/ quotient-remainder pair\n+        BigInteger[] qr; \/\/ quotient-remainder pair\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigDecimal.java","additions":21,"deletions":44,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,1 +69,0 @@\n-        constructWithError(\"1e\"+((long)Integer.MAX_VALUE + 1));\n","filename":"test\/jdk\/java\/math\/BigDecimal\/StringConstructor.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}