{"files":[{"patch":"@@ -0,0 +1,359 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Container;\n+import java.awt.Dialog;\n+import java.awt.Dimension;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.GridLayout;\n+import java.awt.Label;\n+import java.awt.Menu;\n+import java.awt.MenuBar;\n+import java.awt.MenuItem;\n+import java.awt.Panel;\n+import java.awt.Rectangle;\n+import java.awt.TextArea;\n+import java.awt.Window;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.FocusListener;\n+import java.awt.event.MouseEvent;\n+import java.awt.event.MouseListener;\n+import java.awt.event.MouseMotionListener;\n+import java.awt.event.WindowEvent;\n+import java.awt.event.WindowListener;\n+import java.lang.reflect.InvocationTargetException;\n+\n+\/*\n+ * @test\n+ * @bug 4124096 4183412 6234295\n+ * @key headful\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @summary Test dialog's modality with a series of Window, Frame and Dialog\n+ * For bug 4183412, verify that the Menu on any Frame cannot be popped up\n+ * when there is a modal dialog up.\n+ * @run main\/manual ModalDialogTest\n+ *\/\n+\n+class TestPanel extends Panel {\n+    private static MouseListener mouseListener;\n+    private static MouseMotionListener mouseMotionListener;\n+    private static FocusListener focusListener;\n+    static TextArea ta;\n+\n+    public TestPanel() {\n+        if (mouseListener == null) {\n+            mouseListener = new MouseListener() {\n+                public void mouseEntered(MouseEvent e) {\n+                    ta.append(e.getComponent().getName()+\":mouseEntered\\n\");\n+                }\n+                public void mouseExited(MouseEvent e) {\n+                    ta.append(e.getComponent().getName()+\":mouseExited\\n\");\n+                }\n+                public void mousePressed(MouseEvent e) {\n+                    ta.append(e.getComponent().getName()+\":mousePressed\\n\");\n+                }\n+\n+                public void mouseReleased(MouseEvent e) {\n+                    ta.append(e.getComponent().getName()+\":mouseReleased\\n\");\n+                }\n+                public void mouseClicked(MouseEvent e) {\n+                    ta.append(e.getComponent().getName()+\":mouseClicked\\n\");\n+                }\n+            };\n+        }\n+\n+        if (mouseMotionListener == null) {\n+            mouseMotionListener = new MouseMotionListener() {\n+                public void mouseMoved(MouseEvent e) {\n+                    ta.append(e.getComponent().getName()+\":mouseMoved\\n\");\n+                }\n+                public void mouseDragged(MouseEvent e) {\n+                    ta.append(e.getComponent().getName()+\":mouseDragged\\n\");\n+                }\n+            };\n+        }\n+\n+        if (focusListener == null) {\n+           focusListener = new FocusListener() {\n+              public void focusGained(FocusEvent e) {\n+                  ta.append(e.getComponent().getName()+\":focusGained\\n\");\n+              }\n+              public void focusLost(FocusEvent e) {\n+                  ta.append(e.getComponent().getName()+\":focusLost\\n\");\n+              }\n+          };\n+       }\n+\n+        Button b = new Button(\"Heavy Button\");\n+        b.setName(\"HeavyButton\");\n+        b.addMouseListener(mouseListener);\n+        b.addMouseMotionListener(mouseMotionListener);\n+        b.addFocusListener(focusListener);\n+        add(b);\n+\n+        Component c = new Container() {\n+            public Dimension getPreferredSize() {\n+                return new Dimension(50,50);\n+            }\n+            public void paint(Graphics g) {\n+                Dimension d = getSize();\n+                g.setColor(Color.blue);\n+                g.fillRect(0, 0, d.width, d.height);\n+            }\n+        };\n+        c.setName(\"Lightweight\");\n+        c.setBackground(Color.blue);\n+        c.addMouseListener(mouseListener);\n+        c.addMouseMotionListener(mouseMotionListener);\n+        c.addFocusListener(focusListener);\n+        add(c);\n+    }\n+\n+    public TestPanel(TextArea t) {\n+        this();\n+        ta = t;\n+        add(ta);\n+    }\n+}\n+\n+class WindowPanel extends Panel {\n+    static int windows = 0;\n+    static int dialogs = 0;\n+    static int frames = 1;\n+    static int modalDialogs = 0;\n+\n+    private static WindowListener winListener;\n+    private static FocusListener focusListener;\n+\n+    private final Button windowButton;\n+    private final Button dialogButton;\n+    private final Button frameButton;\n+    private final Button modalDialogButton;\n+\n+    public static void buildAndShowWindow(Window win, Component top,\n+                                          TestPanel center, Component bottom) {\n+        final TextArea ta = TestPanel.ta;\n+\n+        if (winListener == null) {\n+            winListener = new WindowListener() {\n+                public void windowOpened(WindowEvent e) {\n+                    ta.append(e.getWindow().getName()+\":windowOpened\\n\");\n+                }\n+                public void windowClosing(WindowEvent e) {\n+                    ta.append(e.getWindow().getName()+\":windowClosing\\n\");\n+                    e.getWindow().setVisible(false);\n+                }\n+                public void windowClosed(WindowEvent e) {\n+                    ta.append(e.getWindow().getName()+\":windowClosed\\n\");\n+                }\n+                public void windowIconified(WindowEvent e) {\n+                    ta.append(e.getWindow().getName()+\":windowIconified\\n\");\n+                }\n+                public void windowDeiconified(WindowEvent e) {\n+                    ta.append(e.getWindow().getName()+\":windowDeiconified\\n\");\n+                }\n+                public void windowActivated(WindowEvent e) {\n+                    ta.append(e.getWindow().getName()+\":windowActivated\\n\");\n+                }\n+                public void windowDeactivated(WindowEvent e) {\n+                    ta.append(e.getWindow().getName()+\":windowDeactivated\\n\");\n+                }\n+            };\n+         }\n+\n+        if (focusListener == null) {\n+            focusListener = new FocusListener() {\n+                public void focusGained(FocusEvent e) {\n+                    ta.append(e.getComponent().getName()+\":focusGained\\n\");\n+                }\n+                public void focusLost(FocusEvent e) {\n+                    ta.append(e.getComponent().getName()+\":focusLost\\n\");\n+                }\n+            };\n+        }\n+\n+        win.addWindowListener(winListener);\n+        win.addFocusListener(focusListener);\n+\n+        if (!(win instanceof Frame)) {\n+            Rectangle pBounds = win.getOwner().getBounds();\n+            win.setLocation(pBounds.x, pBounds.y + pBounds.height);\n+        }\n+\n+        win.add(top, BorderLayout.NORTH);\n+        win.add(center, BorderLayout.CENTER);\n+        win.add(bottom, BorderLayout.SOUTH);\n+        win.pack();\n+        win.setVisible(true);\n+\n+        PassFailJFrame.addTestWindow(win);\n+    }\n+\n+    public Window getParentWindow() {\n+        Container p = getParent();\n+        while (p != null && !(p instanceof Window)) {\n+            p = p.getParent();\n+        }\n+        return (Window)p;\n+    }\n+\n+    public WindowPanel() {\n+\n+        windowButton = new Button(\"New Window...\");\n+        windowButton.addActionListener(e -> {\n+            Window owner = getParentWindow();\n+            Window window = new Window(owner);\n+            window.setName(\"Window \"+ windows++);\n+\n+            Panel p = new Panel();\n+            p.setLayout(new GridLayout(0, 1));\n+            p.add(new Label(\"Title: \"+ window.getName()));\n+            p.add(new Label(\"Owner: \"+ owner.getName()));\n+\n+            buildAndShowWindow(window, p, new TestPanel(), new WindowPanel());\n+        });\n+        add(windowButton);\n+\n+        frameButton = new Button(\"New Frame...\");\n+        frameButton.addActionListener(e -> {\n+            Frame frame = new Frame(\"Frame \"+ frames++);\n+            frame.setName(frame.getTitle());\n+            MenuBar mb=new MenuBar();\n+            Menu m=new Menu(\"Menu\");\n+            m.add(new MenuItem(\"Dummy menu item\"));\n+            frame.setMenuBar(mb);\n+            mb.add(m);\n+\n+            buildAndShowWindow(frame, new Label(\"Owner: none\"),\n+                               new TestPanel(), new WindowPanel());\n+        });\n+        add(frameButton);\n+\n+        dialogButton = new Button(\"New Dialog...\");\n+        dialogButton.addActionListener(e -> {\n+            Window owner = getParentWindow();\n+            Dialog dialog;\n+            if (owner instanceof Dialog) {\n+                dialog = new Dialog((Dialog)owner, \"Dialog \"+ dialogs++, false);\n+            } else {\n+                dialog = new Dialog((Frame)owner, \"Dialog \"+ dialogs++, false);\n+            }\n+            dialog.setName(dialog.getTitle());\n+\n+            buildAndShowWindow(dialog, new Label(\"Owner: \"+ owner.getName()),\n+                               new TestPanel(), new WindowPanel());\n+        });\n+        add(dialogButton);\n+\n+        modalDialogButton = new Button(\"New Modal Dialog...\");\n+        modalDialogButton.addActionListener(e -> {\n+            Window owner = getParentWindow();\n+            Dialog dialog;\n+            if (owner instanceof Dialog) {\n+                dialog = new Dialog((Dialog)owner, \"ModalDialog \"+ modalDialogs++,\n+                                    true);\n+            } else {\n+                dialog = new Dialog((Frame)owner, \"ModalDialog \"+ modalDialogs++,\n+                                    true);\n+            }\n+            dialog.setName(dialog.getTitle());\n+            buildAndShowWindow(dialog, new Label(\"Owner: \"+ owner.getName()),\n+                               new TestPanel(), new WindowPanel());\n+        });\n+        add(modalDialogButton);\n+    }\n+\n+    public void addNotify() {\n+        super.addNotify();\n+        Window owner = getParentWindow();\n+        if (!(owner instanceof Frame) && !(owner instanceof Dialog)) {\n+            dialogButton.setEnabled(false);\n+            modalDialogButton.setEnabled(false);\n+        }\n+    }\n+}\n+\n+public class ModalDialogTest {\n+    private static Frame frame= new Frame(\"RootFrame\");\n+    private static final boolean isMacOS = System.getProperty(\"os.name\")\n+                                          .contains(\"OS X\");\n+\n+    private static String getInstructions() {\n+        StringBuilder sb = new StringBuilder();\n+\n+        sb.append(\"\"\"\n+            When the test is ready, one Root Frame is shown. The Frame has a\n+            \"Heavy button\", a blue lightweight component and a TextArea to\n+            display message. The Root Frame has no owner.\n+\n+            \\t *. Click button \"New Frame\" to show a new Frame, notice that this\n+            \\t Frame 1 has a Menu added. Verify that Menu is accessible.\n+\n+            \\t *. Now click button \"New Modal Dialog\" to bring up a modal dialog.\n+            \"\"\");\n+\n+        if (!isMacOS) { \/\/We do not test screen menu bar on macOS\n+            sb.append(\"\"\"\n+                  \\t Verify that the Menu in Frame 1 is not accessible anymore.\n+                  \\t That tests the fix for 4183412 on Solaris and\n+                  \\t 6234295 on XToolkit.\\n\n+                  \"\"\");\n+        }\n+\n+        sb.append(\"\"\"\n+            \\t *. You can click different buttons several times, but verify that\n+            \\t whenever a Modal dialog is up, no mouse event can be generated for\n+            \\t other windows.\n+            \\t (All the events are printed in the TextArea in Root Window).\n+            \\t This tests the fix for 4124096.\n+\n+            Close the modal dialog before pressing fail\/pass button.\n+            \"\"\");\n+\n+        return sb.toString();\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException,\n+                                                  InvocationTargetException {\n+        PassFailJFrame passFailJFrame = new PassFailJFrame(\"ModalDialogTest \" +\n+        \"Instructions\", getInstructions(), 10, 20, 60);\n+\n+        WindowPanel.buildAndShowWindow(\n+            frame,\n+            new Label(\"Owner: none\"),\n+            new TestPanel(new TextArea(10, 30)),\n+            new WindowPanel()\n+        );\n+\n+        \/\/ adding only the root frame to be positioned\n+        \/\/ w.r.t instruction frame\n+        passFailJFrame.positionTestWindow(frame, PassFailJFrame.Position.HORIZONTAL);\n+        passFailJFrame.awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Dialog\/ModalDialogTest\/ModalDialogTest.java","additions":359,"deletions":0,"binary":false,"changes":359,"status":"added"}]}