{"files":[{"patch":"@@ -125,1 +125,5 @@\n-        return new AArch64HotSpotRegisterConfig(target, config.useCompressedOops, config.linuxOs);\n+        \/\/ ARMv8 defines r18 as being available to the platform ABI. Windows\n+        \/\/ and Darwin use it for such. Linux doesn't assign it and thus r18 can\n+        \/\/ be used as an additional register.\n+        boolean canUsePlatformRegister = config.linuxOs;\n+        return new AArch64HotSpotRegisterConfig(target, config.useCompressedOops, canUsePlatformRegister);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot.aarch64\/src\/jdk\/vm\/ci\/hotspot\/aarch64\/AArch64HotSpotJVMCIBackendFactory.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -126,0 +126,5 @@\n+    \/**\n+     * The platform ABI can use r18 to carry inter-procedural state (e.g. thread\n+     * context). If not defined as such by the platform ABI, it can be used as\n+     * additional temporary register.\n+     *\/\n@@ -133,1 +138,1 @@\n-    private static RegisterArray initAllocatable(Architecture arch, boolean reserveForHeapBase, boolean linuxOs) {\n+    private static RegisterArray initAllocatable(Architecture arch, boolean reserveForHeapBase, boolean canUsePlatformRegister) {\n@@ -135,1 +140,1 @@\n-        Register[] registers = new Register[allRegisters.size() - reservedRegisters.size() - (reserveForHeapBase ? 1 : 0) - (!linuxOs ? 1 : 0)];\n+        Register[] registers = new Register[allRegisters.size() - reservedRegisters.size() - (reserveForHeapBase ? 1 : 0) - (!canUsePlatformRegister ? 1 : 0)];\n@@ -144,4 +149,1 @@\n-            if (!linuxOs && reg.equals(platformRegister)) {\n-                \/\/ ARMv8 defines r18 as being available to the platform ABI.\n-                \/\/ Windows and Darwin use it for such. Linux doesn't assign it\n-                \/\/ and thus r18 can be used as an additional register.\n+            if (!canUsePlatformRegister && reg.equals(platformRegister)) {\n@@ -163,2 +165,2 @@\n-    public AArch64HotSpotRegisterConfig(TargetDescription target, boolean useCompressedOops, boolean linuxOs) {\n-        this(target, initAllocatable(target.arch, useCompressedOops, linuxOs));\n+    public AArch64HotSpotRegisterConfig(TargetDescription target, boolean useCompressedOops, boolean canUsePlatformRegister) {\n+        this(target, initAllocatable(target.arch, useCompressedOops, canUsePlatformRegister));\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot.aarch64\/src\/jdk\/vm\/ci\/hotspot\/aarch64\/AArch64HotSpotRegisterConfig.java","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"}]}