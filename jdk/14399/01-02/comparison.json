{"files":[{"patch":"@@ -60,0 +60,2 @@\n+    static final long MINUTES = 60 * 1_000_000_000L; \/\/ 60 * 10**9 ns\n+\n@@ -80,13 +82,3 @@\n-            ITERS--;\n-            var nextRandomFloat = tlr.nextFloat();\n-            try {\n-                switch (behaviour) {\n-                    case CALL ->\n-                        ScopedValue.where(el, el.get() + 1).call(() -> fibonacci_pad(20, this));\n-                    case GET ->\n-                        ScopedValue.where(el, el.get() + 1).get(() -> fibonacci_pad(20, this));\n-                    case RUN ->\n-                        ScopedValue.where(el, el.get() + 1).run(() -> fibonacci_pad(20, this));\n-                }\n-                if (!last.equals(el.get())) {\n-                    throw testFailureException;\n+            while (ITERS-- > 0) {\n+                if (System.nanoTime() - startTime > 3 * MINUTES) { \/\/ 3 minutes is long enough\n+                    return;\n@@ -94,14 +86,26 @@\n-            } catch (StackOverflowError e) {\n-                if (nextRandomFloat <= 0.1) {\n-                    ScopedValue.where(el, el.get() + 1).run(this);\n-                }\n-            } catch (TestFailureException e) {\n-                throw e;\n-            } catch (Throwable throwable) {\n-                \/\/ StackOverflowErrors cause many different failures. These include\n-                \/\/ StructureViolationExceptions and InvocationTargetExceptions. This test\n-                \/\/ checks that, no matter what the failure mode, scoped values are handled\n-                \/\/ correctly.\n-            } finally {\n-                if (!last.equals(el.get())) {\n-                    throw testFailureException;\n+\n+                var nextRandomFloat = tlr.nextFloat();\n+                try {\n+                    switch (behaviour) {\n+                        case CALL -> ScopedValue.where(el, el.get() + 1).call(() -> fibonacci_pad(20, this));\n+                        case GET -> ScopedValue.where(el, el.get() + 1).get(() -> fibonacci_pad(20, this));\n+                        case RUN -> ScopedValue.where(el, el.get() + 1).run(() -> fibonacci_pad(20, this));\n+                    }\n+                    if (!last.equals(el.get())) {\n+                        throw testFailureException;\n+                    }\n+                } catch (StackOverflowError e) {\n+                    if (nextRandomFloat <= 0.1) {\n+                        ScopedValue.where(el, el.get() + 1).run(this);\n+                    }\n+                } catch (TestFailureException e) {\n+                    throw e;\n+                } catch (Throwable throwable) {\n+                    \/\/ StackOverflowErrors cause many different failures. These include\n+                    \/\/ StructureViolationExceptions and InvocationTargetExceptions. This test\n+                    \/\/ checks that, no matter what the failure mode, scoped values are handled\n+                    \/\/ correctly.\n+                } finally {\n+                    if (!last.equals(el.get())) {\n+                        throw testFailureException;\n+                    }\n@@ -109,1 +113,0 @@\n-            }\n@@ -111,1 +114,2 @@\n-            Thread.yield();\n+                Thread.yield();\n+            }\n@@ -170,0 +174,2 @@\n+        } catch (TestFailureException e) {\n+            throw e;\n@@ -214,0 +220,2 @@\n+                    } catch (TestFailureException e) {\n+                        throw e;\n@@ -219,1 +227,3 @@\n-        } catch (StructureViolationException structureViolationException) {\n+        } catch (TestFailureException e) {\n+            throw e;\n+        } catch (Exception e) {\n@@ -225,0 +235,2 @@\n+    static long startTime = System.nanoTime();\n+\n@@ -227,2 +239,11 @@\n-        while (torture.ITERS > 0) {\n-            torture.run();\n+        while (torture.ITERS > 0\n+                && System.nanoTime() - startTime <= 3 * MINUTES) { \/\/ 3 minutes is long enough\n+            try {\n+                torture.run();\n+            } catch (TestFailureException e) {\n+                throw e;\n+            } finally {\n+                \/\/ ScopedValueContainer and StructuredTaskScope can\n+                \/\/ throw many exceptions on stack overflow. Ignore\n+                \/\/ them all.\n+            }\n","filename":"test\/jdk\/java\/lang\/ScopedValue\/StressStackOverflow.java","additions":53,"deletions":32,"binary":false,"changes":85,"status":"modified"}]}