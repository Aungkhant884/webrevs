{"files":[{"patch":"@@ -1388,3 +1388,2 @@\n-      if ((holder == resolver.Carrier_klass\n-           || holder == vmClasses::VirtualThread_klass()\n-           || holder == vmClasses::Thread_klass())) {\n+      if (holder == vmClasses::Thread_klass()\n+          || holder == resolver.Carrier_klass) {\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1594,1 +1594,1 @@\n-    private void runWith(Object bindings, Runnable op) {\n+    final void runWith(Object bindings, Runnable op) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Thread.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -436,1 +436,2 @@\n-                task.run();\n+                Object bindings = Thread.scopedValueBindings();\n+                runWith(bindings, task);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ThreadBuilders.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import java.lang.ref.Reference;\n@@ -57,1 +56,0 @@\n-import jdk.internal.vm.annotation.ForceInline;\n@@ -309,1 +307,1 @@\n-        Object bindings = scopedValueBindings();\n+        Object bindings = Thread.scopedValueBindings();\n@@ -337,8 +335,0 @@\n-    @Hidden\n-    @ForceInline\n-    private void runWith(Object bindings, Runnable op) {\n-        ensureMaterializedForStackWalk(bindings);\n-        op.run();\n-        Reference.reachabilityFence(bindings);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/VirtualThread.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -47,2 +47,0 @@\n-java\/lang\/ScopedValue\/StressStackOverflow.java 8309646 generic-all\n-\n","filename":"test\/jdk\/ProblemList-Virtual.txt","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -490,2 +490,0 @@\n-java\/lang\/ScopedValue\/StressStackOverflow.java                  8303498 linux-s390x\n-\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,2 +24,2 @@\n-\/**\n- * @test\n+\/*\n+ * @test id=default\n@@ -33,0 +33,7 @@\n+\/*\n+ * @test id=no-vmcontinuations\n+ * @requires vm.continuations\n+ * @enablePreview\n+ * @run main\/othervm\/timeout=300 -XX:+UnlockExperimentalVMOptions -XX:-VMContinuations StressStackOverflow\n+ *\/\n+\n@@ -53,0 +60,2 @@\n+    static final long MINUTES = 60 * 1_000_000_000L; \/\/ 60 * 10**9 ns\n+\n@@ -73,10 +82,3 @@\n-            ITERS--;\n-            var nextRandomFloat = tlr.nextFloat();\n-            try {\n-                switch (behaviour) {\n-                    case CALL ->\n-                        ScopedValue.where(el, el.get() + 1).call(() -> fibonacci_pad(20, this));\n-                    case GET ->\n-                        ScopedValue.where(el, el.get() + 1).get(() -> fibonacci_pad(20, this));\n-                    case RUN ->\n-                        ScopedValue.where(el, el.get() + 1).run(() -> fibonacci_pad(20, this));\n+            while (ITERS-- > 0) {\n+                if (System.nanoTime() - startTime > 3 * MINUTES) { \/\/ 3 minutes is long enough\n+                    return;\n@@ -84,17 +86,26 @@\n-                if (!last.equals(el.get())) {\n-                    throw testFailureException;\n-                }\n-            } catch (StackOverflowError e) {\n-                if (nextRandomFloat <= 0.1) {\n-                    ScopedValue.where(el, el.get() + 1).run(this);\n-                }\n-            } catch (TestFailureException e) {\n-                throw e;\n-            } catch (Throwable throwable) {\n-                \/\/ StackOverflowErrors cause many different failures. These include\n-                \/\/ StructureViolationExceptions and InvocationTargetExceptions. This test\n-                \/\/ checks that, no matter what the failure mode, scoped values are handled\n-                \/\/ correctly.\n-            } finally {\n-                if (!last.equals(el.get())) {\n-                    throw testFailureException;\n+\n+                var nextRandomFloat = tlr.nextFloat();\n+                try {\n+                    switch (behaviour) {\n+                        case CALL -> ScopedValue.where(el, el.get() + 1).call(() -> fibonacci_pad(20, this));\n+                        case GET -> ScopedValue.where(el, el.get() + 1).get(() -> fibonacci_pad(20, this));\n+                        case RUN -> ScopedValue.where(el, el.get() + 1).run(() -> fibonacci_pad(20, this));\n+                    }\n+                    if (!last.equals(el.get())) {\n+                        throw testFailureException;\n+                    }\n+                } catch (StackOverflowError e) {\n+                    if (nextRandomFloat <= 0.1) {\n+                        ScopedValue.where(el, el.get() + 1).run(this);\n+                    }\n+                } catch (TestFailureException e) {\n+                    throw e;\n+                } catch (Throwable throwable) {\n+                    \/\/ StackOverflowErrors cause many different failures. These include\n+                    \/\/ StructureViolationExceptions and InvocationTargetExceptions. This test\n+                    \/\/ checks that, no matter what the failure mode, scoped values are handled\n+                    \/\/ correctly.\n+                } finally {\n+                    if (!last.equals(el.get())) {\n+                        throw testFailureException;\n+                    }\n@@ -102,1 +113,0 @@\n-            }\n@@ -104,1 +114,2 @@\n-            Thread.yield();\n+                Thread.yield();\n+            }\n@@ -163,0 +174,2 @@\n+        } catch (TestFailureException e) {\n+            throw e;\n@@ -207,0 +220,2 @@\n+                    } catch (TestFailureException e) {\n+                        throw e;\n@@ -212,1 +227,3 @@\n-        } catch (StructureViolationException structureViolationException) {\n+        } catch (TestFailureException e) {\n+            throw e;\n+        } catch (Exception e) {\n@@ -218,0 +235,2 @@\n+    static long startTime = System.nanoTime();\n+\n@@ -220,2 +239,14 @@\n-        while (torture.ITERS > 0) {\n-            torture.run();\n+        while (torture.ITERS > 0\n+                && System.nanoTime() - startTime <= 3 * MINUTES) { \/\/ 3 minutes is long enough\n+            try {\n+                torture.run();\n+                if (inheritedValue.isBound()) {\n+                    throw new TestFailureException(\"Should not be bound here\");\n+                }\n+            } catch (TestFailureException e) {\n+                throw e;\n+            } finally {\n+                \/\/ ScopedValueContainer and StructuredTaskScope can\n+                \/\/ throw many exceptions on stack overflow. Ignore\n+                \/\/ them all.\n+            }\n","filename":"test\/jdk\/java\/lang\/ScopedValue\/StressStackOverflow.java","additions":65,"deletions":34,"binary":false,"changes":99,"status":"modified"}]}