{"files":[{"patch":"@@ -1385,2 +1385,2 @@\n-  if (is_mask && elem_bt_from != elem_bt_to) {\n-    return false; \/\/ type mismatch\n+  if (is_mask && (type2aelembytes(elem_bt_from) != type2aelembytes(elem_bt_to))) {\n+    return false; \/\/ elem size mismatch\n@@ -1388,0 +1388,1 @@\n+\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -602,1 +602,5 @@\n-        @Override\n+        \/**\n+         * Helper function for all sorts of lane-wise conversions.\n+         * This function kicks in after intrinsic failure.\n+         *\/\n+        \/*package-private*\/\n@@ -604,2 +608,3 @@\n-        public <E> VectorMask<E> cast(VectorSpecies<E> s) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) s;\n+        final <E>\n+        VectorMask<E> defaultMaskReinterpret(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n@@ -629,0 +634,18 @@\n+        @Override\n+        @ForceInline\n+        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n+            if (length() != species.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n+            if (VSIZE == species.vectorBitSize()) {\n+                Class<?> dtype = species.elementType();\n+                Class<?> dmtype = species.maskType();\n+                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n+                    this.getClass(), ETYPE, VLENGTH,\n+                    dmtype, dtype, VLENGTH,\n+                    this, species,\n+                    Byte128Mask::defaultMaskReinterpret);\n+            }\n+            return this.defaultMaskReinterpret(species);\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte128Vector.java","additions":26,"deletions":3,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -634,1 +634,5 @@\n-        @Override\n+        \/**\n+         * Helper function for all sorts of lane-wise conversions.\n+         * This function kicks in after intrinsic failure.\n+         *\/\n+        \/*package-private*\/\n@@ -636,2 +640,3 @@\n-        public <E> VectorMask<E> cast(VectorSpecies<E> s) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) s;\n+        final <E>\n+        VectorMask<E> defaultMaskReinterpret(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n@@ -661,0 +666,18 @@\n+        @Override\n+        @ForceInline\n+        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n+            if (length() != species.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n+            if (VSIZE == species.vectorBitSize()) {\n+                Class<?> dtype = species.elementType();\n+                Class<?> dmtype = species.maskType();\n+                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n+                    this.getClass(), ETYPE, VLENGTH,\n+                    dmtype, dtype, VLENGTH,\n+                    this, species,\n+                    Byte256Mask::defaultMaskReinterpret);\n+            }\n+            return this.defaultMaskReinterpret(species);\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte256Vector.java","additions":26,"deletions":3,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -698,1 +698,5 @@\n-        @Override\n+        \/**\n+         * Helper function for all sorts of lane-wise conversions.\n+         * This function kicks in after intrinsic failure.\n+         *\/\n+        \/*package-private*\/\n@@ -700,2 +704,3 @@\n-        public <E> VectorMask<E> cast(VectorSpecies<E> s) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) s;\n+        final <E>\n+        VectorMask<E> defaultMaskReinterpret(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n@@ -725,0 +730,18 @@\n+        @Override\n+        @ForceInline\n+        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n+            if (length() != species.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n+            if (VSIZE == species.vectorBitSize()) {\n+                Class<?> dtype = species.elementType();\n+                Class<?> dmtype = species.maskType();\n+                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n+                    this.getClass(), ETYPE, VLENGTH,\n+                    dmtype, dtype, VLENGTH,\n+                    this, species,\n+                    Byte512Mask::defaultMaskReinterpret);\n+            }\n+            return this.defaultMaskReinterpret(species);\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte512Vector.java","additions":26,"deletions":3,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -586,1 +586,5 @@\n-        @Override\n+        \/**\n+         * Helper function for all sorts of lane-wise conversions.\n+         * This function kicks in after intrinsic failure.\n+         *\/\n+        \/*package-private*\/\n@@ -588,2 +592,3 @@\n-        public <E> VectorMask<E> cast(VectorSpecies<E> s) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) s;\n+        final <E>\n+        VectorMask<E> defaultMaskReinterpret(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n@@ -613,0 +618,18 @@\n+        @Override\n+        @ForceInline\n+        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n+            if (length() != species.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n+            if (VSIZE == species.vectorBitSize()) {\n+                Class<?> dtype = species.elementType();\n+                Class<?> dmtype = species.maskType();\n+                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n+                    this.getClass(), ETYPE, VLENGTH,\n+                    dmtype, dtype, VLENGTH,\n+                    this, species,\n+                    Byte64Mask::defaultMaskReinterpret);\n+            }\n+            return this.defaultMaskReinterpret(species);\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte64Vector.java","additions":26,"deletions":3,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -572,1 +572,5 @@\n-        @Override\n+        \/**\n+         * Helper function for all sorts of lane-wise conversions.\n+         * This function kicks in after intrinsic failure.\n+         *\/\n+        \/*package-private*\/\n@@ -574,2 +578,3 @@\n-        public <E> VectorMask<E> cast(VectorSpecies<E> s) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) s;\n+        final <E>\n+        VectorMask<E> defaultMaskReinterpret(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n@@ -599,0 +604,18 @@\n+        @Override\n+        @ForceInline\n+        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n+            if (length() != species.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n+            if (VSIZE == species.vectorBitSize()) {\n+                Class<?> dtype = species.elementType();\n+                Class<?> dmtype = species.maskType();\n+                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n+                    this.getClass(), ETYPE, VLENGTH,\n+                    dmtype, dtype, VLENGTH,\n+                    this, species,\n+                    ByteMaxMask::defaultMaskReinterpret);\n+            }\n+            return this.defaultMaskReinterpret(species);\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteMaxVector.java","additions":26,"deletions":3,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -570,1 +570,5 @@\n-        @Override\n+        \/**\n+         * Helper function for all sorts of lane-wise conversions.\n+         * This function kicks in after intrinsic failure.\n+         *\/\n+        \/*package-private*\/\n@@ -572,2 +576,3 @@\n-        public <E> VectorMask<E> cast(VectorSpecies<E> s) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) s;\n+        final <E>\n+        VectorMask<E> defaultMaskReinterpret(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n@@ -597,0 +602,18 @@\n+        @Override\n+        @ForceInline\n+        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n+            if (length() != species.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n+            if (VSIZE == species.vectorBitSize()) {\n+                Class<?> dtype = species.elementType();\n+                Class<?> dmtype = species.maskType();\n+                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n+                    this.getClass(), ETYPE, VLENGTH,\n+                    dmtype, dtype, VLENGTH,\n+                    this, species,\n+                    Double128Mask::defaultMaskReinterpret);\n+            }\n+            return this.defaultMaskReinterpret(species);\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double128Vector.java","additions":26,"deletions":3,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -574,1 +574,5 @@\n-        @Override\n+        \/**\n+         * Helper function for all sorts of lane-wise conversions.\n+         * This function kicks in after intrinsic failure.\n+         *\/\n+        \/*package-private*\/\n@@ -576,2 +580,3 @@\n-        public <E> VectorMask<E> cast(VectorSpecies<E> s) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) s;\n+        final <E>\n+        VectorMask<E> defaultMaskReinterpret(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n@@ -601,0 +606,18 @@\n+        @Override\n+        @ForceInline\n+        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n+            if (length() != species.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n+            if (VSIZE == species.vectorBitSize()) {\n+                Class<?> dtype = species.elementType();\n+                Class<?> dmtype = species.maskType();\n+                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n+                    this.getClass(), ETYPE, VLENGTH,\n+                    dmtype, dtype, VLENGTH,\n+                    this, species,\n+                    Double256Mask::defaultMaskReinterpret);\n+            }\n+            return this.defaultMaskReinterpret(species);\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double256Vector.java","additions":26,"deletions":3,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -582,1 +582,5 @@\n-        @Override\n+        \/**\n+         * Helper function for all sorts of lane-wise conversions.\n+         * This function kicks in after intrinsic failure.\n+         *\/\n+        \/*package-private*\/\n@@ -584,2 +588,3 @@\n-        public <E> VectorMask<E> cast(VectorSpecies<E> s) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) s;\n+        final <E>\n+        VectorMask<E> defaultMaskReinterpret(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n@@ -609,0 +614,18 @@\n+        @Override\n+        @ForceInline\n+        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n+            if (length() != species.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n+            if (VSIZE == species.vectorBitSize()) {\n+                Class<?> dtype = species.elementType();\n+                Class<?> dmtype = species.maskType();\n+                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n+                    this.getClass(), ETYPE, VLENGTH,\n+                    dmtype, dtype, VLENGTH,\n+                    this, species,\n+                    Double512Mask::defaultMaskReinterpret);\n+            }\n+            return this.defaultMaskReinterpret(species);\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double512Vector.java","additions":26,"deletions":3,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -568,1 +568,5 @@\n-        @Override\n+        \/**\n+         * Helper function for all sorts of lane-wise conversions.\n+         * This function kicks in after intrinsic failure.\n+         *\/\n+        \/*package-private*\/\n@@ -570,2 +574,3 @@\n-        public <E> VectorMask<E> cast(VectorSpecies<E> s) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) s;\n+        final <E>\n+        VectorMask<E> defaultMaskReinterpret(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n@@ -595,0 +600,18 @@\n+        @Override\n+        @ForceInline\n+        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n+            if (length() != species.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n+            if (VSIZE == species.vectorBitSize()) {\n+                Class<?> dtype = species.elementType();\n+                Class<?> dmtype = species.maskType();\n+                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n+                    this.getClass(), ETYPE, VLENGTH,\n+                    dmtype, dtype, VLENGTH,\n+                    this, species,\n+                    Double64Mask::defaultMaskReinterpret);\n+            }\n+            return this.defaultMaskReinterpret(species);\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double64Vector.java","additions":26,"deletions":3,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -567,1 +567,5 @@\n-        @Override\n+        \/**\n+         * Helper function for all sorts of lane-wise conversions.\n+         * This function kicks in after intrinsic failure.\n+         *\/\n+        \/*package-private*\/\n@@ -569,2 +573,3 @@\n-        public <E> VectorMask<E> cast(VectorSpecies<E> s) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) s;\n+        final <E>\n+        VectorMask<E> defaultMaskReinterpret(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n@@ -594,0 +599,18 @@\n+        @Override\n+        @ForceInline\n+        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n+            if (length() != species.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n+            if (VSIZE == species.vectorBitSize()) {\n+                Class<?> dtype = species.elementType();\n+                Class<?> dmtype = species.maskType();\n+                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n+                    this.getClass(), ETYPE, VLENGTH,\n+                    dmtype, dtype, VLENGTH,\n+                    this, species,\n+                    DoubleMaxMask::defaultMaskReinterpret);\n+            }\n+            return this.defaultMaskReinterpret(species);\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleMaxVector.java","additions":26,"deletions":3,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -574,1 +574,5 @@\n-        @Override\n+        \/**\n+         * Helper function for all sorts of lane-wise conversions.\n+         * This function kicks in after intrinsic failure.\n+         *\/\n+        \/*package-private*\/\n@@ -576,2 +580,3 @@\n-        public <E> VectorMask<E> cast(VectorSpecies<E> s) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) s;\n+        final <E>\n+        VectorMask<E> defaultMaskReinterpret(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n@@ -601,0 +606,18 @@\n+        @Override\n+        @ForceInline\n+        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n+            if (length() != species.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n+            if (VSIZE == species.vectorBitSize()) {\n+                Class<?> dtype = species.elementType();\n+                Class<?> dmtype = species.maskType();\n+                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n+                    this.getClass(), ETYPE, VLENGTH,\n+                    dmtype, dtype, VLENGTH,\n+                    this, species,\n+                    Float128Mask::defaultMaskReinterpret);\n+            }\n+            return this.defaultMaskReinterpret(species);\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float128Vector.java","additions":26,"deletions":3,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -582,1 +582,5 @@\n-        @Override\n+        \/**\n+         * Helper function for all sorts of lane-wise conversions.\n+         * This function kicks in after intrinsic failure.\n+         *\/\n+        \/*package-private*\/\n@@ -584,2 +588,3 @@\n-        public <E> VectorMask<E> cast(VectorSpecies<E> s) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) s;\n+        final <E>\n+        VectorMask<E> defaultMaskReinterpret(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n@@ -609,0 +614,18 @@\n+        @Override\n+        @ForceInline\n+        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n+            if (length() != species.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n+            if (VSIZE == species.vectorBitSize()) {\n+                Class<?> dtype = species.elementType();\n+                Class<?> dmtype = species.maskType();\n+                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n+                    this.getClass(), ETYPE, VLENGTH,\n+                    dmtype, dtype, VLENGTH,\n+                    this, species,\n+                    Float256Mask::defaultMaskReinterpret);\n+            }\n+            return this.defaultMaskReinterpret(species);\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float256Vector.java","additions":26,"deletions":3,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -598,1 +598,5 @@\n-        @Override\n+        \/**\n+         * Helper function for all sorts of lane-wise conversions.\n+         * This function kicks in after intrinsic failure.\n+         *\/\n+        \/*package-private*\/\n@@ -600,2 +604,3 @@\n-        public <E> VectorMask<E> cast(VectorSpecies<E> s) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) s;\n+        final <E>\n+        VectorMask<E> defaultMaskReinterpret(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n@@ -625,0 +630,18 @@\n+        @Override\n+        @ForceInline\n+        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n+            if (length() != species.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n+            if (VSIZE == species.vectorBitSize()) {\n+                Class<?> dtype = species.elementType();\n+                Class<?> dmtype = species.maskType();\n+                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n+                    this.getClass(), ETYPE, VLENGTH,\n+                    dmtype, dtype, VLENGTH,\n+                    this, species,\n+                    Float512Mask::defaultMaskReinterpret);\n+            }\n+            return this.defaultMaskReinterpret(species);\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float512Vector.java","additions":26,"deletions":3,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -570,1 +570,5 @@\n-        @Override\n+        \/**\n+         * Helper function for all sorts of lane-wise conversions.\n+         * This function kicks in after intrinsic failure.\n+         *\/\n+        \/*package-private*\/\n@@ -572,2 +576,3 @@\n-        public <E> VectorMask<E> cast(VectorSpecies<E> s) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) s;\n+        final <E>\n+        VectorMask<E> defaultMaskReinterpret(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n@@ -597,0 +602,18 @@\n+        @Override\n+        @ForceInline\n+        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n+            if (length() != species.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n+            if (VSIZE == species.vectorBitSize()) {\n+                Class<?> dtype = species.elementType();\n+                Class<?> dmtype = species.maskType();\n+                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n+                    this.getClass(), ETYPE, VLENGTH,\n+                    dmtype, dtype, VLENGTH,\n+                    this, species,\n+                    Float64Mask::defaultMaskReinterpret);\n+            }\n+            return this.defaultMaskReinterpret(species);\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float64Vector.java","additions":26,"deletions":3,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -567,1 +567,5 @@\n-        @Override\n+        \/**\n+         * Helper function for all sorts of lane-wise conversions.\n+         * This function kicks in after intrinsic failure.\n+         *\/\n+        \/*package-private*\/\n@@ -569,2 +573,3 @@\n-        public <E> VectorMask<E> cast(VectorSpecies<E> s) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) s;\n+        final <E>\n+        VectorMask<E> defaultMaskReinterpret(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n@@ -594,0 +599,18 @@\n+        @Override\n+        @ForceInline\n+        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n+            if (length() != species.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n+            if (VSIZE == species.vectorBitSize()) {\n+                Class<?> dtype = species.elementType();\n+                Class<?> dmtype = species.maskType();\n+                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n+                    this.getClass(), ETYPE, VLENGTH,\n+                    dmtype, dtype, VLENGTH,\n+                    this, species,\n+                    FloatMaxMask::defaultMaskReinterpret);\n+            }\n+            return this.defaultMaskReinterpret(species);\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatMaxVector.java","additions":26,"deletions":3,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -578,1 +578,5 @@\n-        @Override\n+        \/**\n+         * Helper function for all sorts of lane-wise conversions.\n+         * This function kicks in after intrinsic failure.\n+         *\/\n+        \/*package-private*\/\n@@ -580,2 +584,3 @@\n-        public <E> VectorMask<E> cast(VectorSpecies<E> s) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) s;\n+        final <E>\n+        VectorMask<E> defaultMaskReinterpret(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n@@ -605,0 +610,18 @@\n+        @Override\n+        @ForceInline\n+        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n+            if (length() != species.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n+            if (VSIZE == species.vectorBitSize()) {\n+                Class<?> dtype = species.elementType();\n+                Class<?> dmtype = species.maskType();\n+                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n+                    this.getClass(), ETYPE, VLENGTH,\n+                    dmtype, dtype, VLENGTH,\n+                    this, species,\n+                    Int128Mask::defaultMaskReinterpret);\n+            }\n+            return this.defaultMaskReinterpret(species);\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int128Vector.java","additions":26,"deletions":3,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -586,1 +586,5 @@\n-        @Override\n+        \/**\n+         * Helper function for all sorts of lane-wise conversions.\n+         * This function kicks in after intrinsic failure.\n+         *\/\n+        \/*package-private*\/\n@@ -588,2 +592,3 @@\n-        public <E> VectorMask<E> cast(VectorSpecies<E> s) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) s;\n+        final <E>\n+        VectorMask<E> defaultMaskReinterpret(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n@@ -613,0 +618,18 @@\n+        @Override\n+        @ForceInline\n+        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n+            if (length() != species.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n+            if (VSIZE == species.vectorBitSize()) {\n+                Class<?> dtype = species.elementType();\n+                Class<?> dmtype = species.maskType();\n+                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n+                    this.getClass(), ETYPE, VLENGTH,\n+                    dmtype, dtype, VLENGTH,\n+                    this, species,\n+                    Int256Mask::defaultMaskReinterpret);\n+            }\n+            return this.defaultMaskReinterpret(species);\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int256Vector.java","additions":26,"deletions":3,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -602,1 +602,5 @@\n-        @Override\n+        \/**\n+         * Helper function for all sorts of lane-wise conversions.\n+         * This function kicks in after intrinsic failure.\n+         *\/\n+        \/*package-private*\/\n@@ -604,2 +608,3 @@\n-        public <E> VectorMask<E> cast(VectorSpecies<E> s) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) s;\n+        final <E>\n+        VectorMask<E> defaultMaskReinterpret(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n@@ -629,0 +634,18 @@\n+        @Override\n+        @ForceInline\n+        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n+            if (length() != species.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n+            if (VSIZE == species.vectorBitSize()) {\n+                Class<?> dtype = species.elementType();\n+                Class<?> dmtype = species.maskType();\n+                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n+                    this.getClass(), ETYPE, VLENGTH,\n+                    dmtype, dtype, VLENGTH,\n+                    this, species,\n+                    Int512Mask::defaultMaskReinterpret);\n+            }\n+            return this.defaultMaskReinterpret(species);\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int512Vector.java","additions":26,"deletions":3,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -574,1 +574,5 @@\n-        @Override\n+        \/**\n+         * Helper function for all sorts of lane-wise conversions.\n+         * This function kicks in after intrinsic failure.\n+         *\/\n+        \/*package-private*\/\n@@ -576,2 +580,3 @@\n-        public <E> VectorMask<E> cast(VectorSpecies<E> s) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) s;\n+        final <E>\n+        VectorMask<E> defaultMaskReinterpret(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n@@ -601,0 +606,18 @@\n+        @Override\n+        @ForceInline\n+        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n+            if (length() != species.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n+            if (VSIZE == species.vectorBitSize()) {\n+                Class<?> dtype = species.elementType();\n+                Class<?> dmtype = species.maskType();\n+                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n+                    this.getClass(), ETYPE, VLENGTH,\n+                    dmtype, dtype, VLENGTH,\n+                    this, species,\n+                    Int64Mask::defaultMaskReinterpret);\n+            }\n+            return this.defaultMaskReinterpret(species);\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int64Vector.java","additions":26,"deletions":3,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -572,1 +572,5 @@\n-        @Override\n+        \/**\n+         * Helper function for all sorts of lane-wise conversions.\n+         * This function kicks in after intrinsic failure.\n+         *\/\n+        \/*package-private*\/\n@@ -574,2 +578,3 @@\n-        public <E> VectorMask<E> cast(VectorSpecies<E> s) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) s;\n+        final <E>\n+        VectorMask<E> defaultMaskReinterpret(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n@@ -599,0 +604,18 @@\n+        @Override\n+        @ForceInline\n+        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n+            if (length() != species.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n+            if (VSIZE == species.vectorBitSize()) {\n+                Class<?> dtype = species.elementType();\n+                Class<?> dmtype = species.maskType();\n+                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n+                    this.getClass(), ETYPE, VLENGTH,\n+                    dmtype, dtype, VLENGTH,\n+                    this, species,\n+                    IntMaxMask::defaultMaskReinterpret);\n+            }\n+            return this.defaultMaskReinterpret(species);\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntMaxVector.java","additions":26,"deletions":3,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -564,1 +564,5 @@\n-        @Override\n+        \/**\n+         * Helper function for all sorts of lane-wise conversions.\n+         * This function kicks in after intrinsic failure.\n+         *\/\n+        \/*package-private*\/\n@@ -566,2 +570,3 @@\n-        public <E> VectorMask<E> cast(VectorSpecies<E> s) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) s;\n+        final <E>\n+        VectorMask<E> defaultMaskReinterpret(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n@@ -591,0 +596,18 @@\n+        @Override\n+        @ForceInline\n+        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n+            if (length() != species.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n+            if (VSIZE == species.vectorBitSize()) {\n+                Class<?> dtype = species.elementType();\n+                Class<?> dmtype = species.maskType();\n+                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n+                    this.getClass(), ETYPE, VLENGTH,\n+                    dmtype, dtype, VLENGTH,\n+                    this, species,\n+                    Long128Mask::defaultMaskReinterpret);\n+            }\n+            return this.defaultMaskReinterpret(species);\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long128Vector.java","additions":26,"deletions":3,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -568,1 +568,5 @@\n-        @Override\n+        \/**\n+         * Helper function for all sorts of lane-wise conversions.\n+         * This function kicks in after intrinsic failure.\n+         *\/\n+        \/*package-private*\/\n@@ -570,2 +574,3 @@\n-        public <E> VectorMask<E> cast(VectorSpecies<E> s) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) s;\n+        final <E>\n+        VectorMask<E> defaultMaskReinterpret(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n@@ -595,0 +600,18 @@\n+        @Override\n+        @ForceInline\n+        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n+            if (length() != species.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n+            if (VSIZE == species.vectorBitSize()) {\n+                Class<?> dtype = species.elementType();\n+                Class<?> dmtype = species.maskType();\n+                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n+                    this.getClass(), ETYPE, VLENGTH,\n+                    dmtype, dtype, VLENGTH,\n+                    this, species,\n+                    Long256Mask::defaultMaskReinterpret);\n+            }\n+            return this.defaultMaskReinterpret(species);\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long256Vector.java","additions":26,"deletions":3,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -576,1 +576,5 @@\n-        @Override\n+        \/**\n+         * Helper function for all sorts of lane-wise conversions.\n+         * This function kicks in after intrinsic failure.\n+         *\/\n+        \/*package-private*\/\n@@ -578,2 +582,3 @@\n-        public <E> VectorMask<E> cast(VectorSpecies<E> s) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) s;\n+        final <E>\n+        VectorMask<E> defaultMaskReinterpret(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n@@ -603,0 +608,18 @@\n+        @Override\n+        @ForceInline\n+        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n+            if (length() != species.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n+            if (VSIZE == species.vectorBitSize()) {\n+                Class<?> dtype = species.elementType();\n+                Class<?> dmtype = species.maskType();\n+                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n+                    this.getClass(), ETYPE, VLENGTH,\n+                    dmtype, dtype, VLENGTH,\n+                    this, species,\n+                    Long512Mask::defaultMaskReinterpret);\n+            }\n+            return this.defaultMaskReinterpret(species);\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long512Vector.java","additions":26,"deletions":3,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -562,1 +562,5 @@\n-        @Override\n+        \/**\n+         * Helper function for all sorts of lane-wise conversions.\n+         * This function kicks in after intrinsic failure.\n+         *\/\n+        \/*package-private*\/\n@@ -564,2 +568,3 @@\n-        public <E> VectorMask<E> cast(VectorSpecies<E> s) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) s;\n+        final <E>\n+        VectorMask<E> defaultMaskReinterpret(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n@@ -589,0 +594,18 @@\n+        @Override\n+        @ForceInline\n+        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n+            if (length() != species.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n+            if (VSIZE == species.vectorBitSize()) {\n+                Class<?> dtype = species.elementType();\n+                Class<?> dmtype = species.maskType();\n+                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n+                    this.getClass(), ETYPE, VLENGTH,\n+                    dmtype, dtype, VLENGTH,\n+                    this, species,\n+                    Long64Mask::defaultMaskReinterpret);\n+            }\n+            return this.defaultMaskReinterpret(species);\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long64Vector.java","additions":26,"deletions":3,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -562,1 +562,5 @@\n-        @Override\n+        \/**\n+         * Helper function for all sorts of lane-wise conversions.\n+         * This function kicks in after intrinsic failure.\n+         *\/\n+        \/*package-private*\/\n@@ -564,2 +568,3 @@\n-        public <E> VectorMask<E> cast(VectorSpecies<E> s) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) s;\n+        final <E>\n+        VectorMask<E> defaultMaskReinterpret(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n@@ -589,0 +594,18 @@\n+        @Override\n+        @ForceInline\n+        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n+            if (length() != species.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n+            if (VSIZE == species.vectorBitSize()) {\n+                Class<?> dtype = species.elementType();\n+                Class<?> dmtype = species.maskType();\n+                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n+                    this.getClass(), ETYPE, VLENGTH,\n+                    dmtype, dtype, VLENGTH,\n+                    this, species,\n+                    LongMaxMask::defaultMaskReinterpret);\n+            }\n+            return this.defaultMaskReinterpret(species);\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongMaxVector.java","additions":26,"deletions":3,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -586,1 +586,5 @@\n-        @Override\n+        \/**\n+         * Helper function for all sorts of lane-wise conversions.\n+         * This function kicks in after intrinsic failure.\n+         *\/\n+        \/*package-private*\/\n@@ -588,2 +592,3 @@\n-        public <E> VectorMask<E> cast(VectorSpecies<E> s) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) s;\n+        final <E>\n+        VectorMask<E> defaultMaskReinterpret(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n@@ -613,0 +618,18 @@\n+        @Override\n+        @ForceInline\n+        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n+            if (length() != species.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n+            if (VSIZE == species.vectorBitSize()) {\n+                Class<?> dtype = species.elementType();\n+                Class<?> dmtype = species.maskType();\n+                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n+                    this.getClass(), ETYPE, VLENGTH,\n+                    dmtype, dtype, VLENGTH,\n+                    this, species,\n+                    Short128Mask::defaultMaskReinterpret);\n+            }\n+            return this.defaultMaskReinterpret(species);\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short128Vector.java","additions":26,"deletions":3,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -602,1 +602,5 @@\n-        @Override\n+        \/**\n+         * Helper function for all sorts of lane-wise conversions.\n+         * This function kicks in after intrinsic failure.\n+         *\/\n+        \/*package-private*\/\n@@ -604,2 +608,3 @@\n-        public <E> VectorMask<E> cast(VectorSpecies<E> s) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) s;\n+        final <E>\n+        VectorMask<E> defaultMaskReinterpret(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n@@ -629,0 +634,18 @@\n+        @Override\n+        @ForceInline\n+        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n+            if (length() != species.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n+            if (VSIZE == species.vectorBitSize()) {\n+                Class<?> dtype = species.elementType();\n+                Class<?> dmtype = species.maskType();\n+                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n+                    this.getClass(), ETYPE, VLENGTH,\n+                    dmtype, dtype, VLENGTH,\n+                    this, species,\n+                    Short256Mask::defaultMaskReinterpret);\n+            }\n+            return this.defaultMaskReinterpret(species);\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short256Vector.java","additions":26,"deletions":3,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -634,1 +634,5 @@\n-        @Override\n+        \/**\n+         * Helper function for all sorts of lane-wise conversions.\n+         * This function kicks in after intrinsic failure.\n+         *\/\n+        \/*package-private*\/\n@@ -636,2 +640,3 @@\n-        public <E> VectorMask<E> cast(VectorSpecies<E> s) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) s;\n+        final <E>\n+        VectorMask<E> defaultMaskReinterpret(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n@@ -661,0 +666,18 @@\n+        @Override\n+        @ForceInline\n+        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n+            if (length() != species.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n+            if (VSIZE == species.vectorBitSize()) {\n+                Class<?> dtype = species.elementType();\n+                Class<?> dmtype = species.maskType();\n+                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n+                    this.getClass(), ETYPE, VLENGTH,\n+                    dmtype, dtype, VLENGTH,\n+                    this, species,\n+                    Short512Mask::defaultMaskReinterpret);\n+            }\n+            return this.defaultMaskReinterpret(species);\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short512Vector.java","additions":26,"deletions":3,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -578,1 +578,5 @@\n-        @Override\n+        \/**\n+         * Helper function for all sorts of lane-wise conversions.\n+         * This function kicks in after intrinsic failure.\n+         *\/\n+        \/*package-private*\/\n@@ -580,2 +584,3 @@\n-        public <E> VectorMask<E> cast(VectorSpecies<E> s) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) s;\n+        final <E>\n+        VectorMask<E> defaultMaskReinterpret(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n@@ -605,0 +610,18 @@\n+        @Override\n+        @ForceInline\n+        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n+            if (length() != species.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n+            if (VSIZE == species.vectorBitSize()) {\n+                Class<?> dtype = species.elementType();\n+                Class<?> dmtype = species.maskType();\n+                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n+                    this.getClass(), ETYPE, VLENGTH,\n+                    dmtype, dtype, VLENGTH,\n+                    this, species,\n+                    Short64Mask::defaultMaskReinterpret);\n+            }\n+            return this.defaultMaskReinterpret(species);\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short64Vector.java","additions":26,"deletions":3,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -572,1 +572,5 @@\n-        @Override\n+        \/**\n+         * Helper function for all sorts of lane-wise conversions.\n+         * This function kicks in after intrinsic failure.\n+         *\/\n+        \/*package-private*\/\n@@ -574,2 +578,3 @@\n-        public <E> VectorMask<E> cast(VectorSpecies<E> s) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) s;\n+        final <E>\n+        VectorMask<E> defaultMaskReinterpret(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n@@ -599,0 +604,18 @@\n+        @Override\n+        @ForceInline\n+        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n+            if (length() != species.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n+            if (VSIZE == species.vectorBitSize()) {\n+                Class<?> dtype = species.elementType();\n+                Class<?> dmtype = species.maskType();\n+                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n+                    this.getClass(), ETYPE, VLENGTH,\n+                    dmtype, dtype, VLENGTH,\n+                    this, species,\n+                    ShortMaxMask::defaultMaskReinterpret);\n+            }\n+            return this.defaultMaskReinterpret(species);\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortMaxVector.java","additions":26,"deletions":3,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -845,1 +845,5 @@\n-        @Override\n+        \/**\n+         * Helper function for all sorts of lane-wise conversions.\n+         * This function kicks in after intrinsic failure.\n+         *\/\n+        \/*package-private*\/\n@@ -847,2 +851,3 @@\n-        public <E> VectorMask<E> cast(VectorSpecies<E> s) {\n-            AbstractSpecies<E> species = (AbstractSpecies<E>) s;\n+        final <E>\n+        VectorMask<E> defaultMaskReinterpret(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n@@ -872,0 +877,18 @@\n+        @Override\n+        @ForceInline\n+        public <E> VectorMask<E> cast(VectorSpecies<E> dsp) {\n+            AbstractSpecies<E> species = (AbstractSpecies<E>) dsp;\n+            if (length() != species.laneCount())\n+                throw new IllegalArgumentException(\"VectorMask length and species length differ\");\n+            if (VSIZE == species.vectorBitSize()) {\n+                Class<?> dtype = species.elementType();\n+                Class<?> dmtype = species.maskType();\n+                return VectorSupport.convert(VectorSupport.VECTOR_OP_REINTERPRET,\n+                    this.getClass(), ETYPE, VLENGTH,\n+                    dmtype, dtype, VLENGTH,\n+                    this, species,\n+                    $Type$$bits$Mask::defaultMaskReinterpret);\n+            }\n+            return this.defaultMaskReinterpret(species);\n+        }\n+\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-VectorBits.java.template","additions":26,"deletions":3,"binary":false,"changes":29,"status":"modified"}]}