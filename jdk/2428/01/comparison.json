{"files":[{"patch":"@@ -98,9 +98,2 @@\n-    if (site->size() >= MemBaseline::SIZE_THRESHOLD) {\n-      if (_malloc_sites.add(*site) != NULL) {\n-        _count++;\n-        return true;\n-      } else {\n-        return false;  \/\/ OOM\n-      }\n-    } else {\n-      \/\/ malloc site does not meet threshold, ignore and continue\n+    if (_malloc_sites.add(*site) != NULL) {\n+      _count++;\n@@ -109,0 +102,1 @@\n+    return false;  \/\/ OOM\n@@ -128,7 +122,3 @@\n-    if (rgn->size() >= MemBaseline::SIZE_THRESHOLD) {\n-      if (_virtual_memory_regions.add(*rgn) != NULL) {\n-        _count ++;\n-        return true;\n-      } else {\n-        return false;\n-      }\n+    if (_virtual_memory_regions.add(*rgn) != NULL) {\n+      _count ++;\n+      return true;\n@@ -136,1 +126,1 @@\n-    return true;\n+    return false;\n","filename":"src\/hotspot\/share\/services\/memBaseline.cpp","additions":7,"deletions":17,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -46,3 +46,0 @@\n-  enum BaselineThreshold {\n-    SIZE_THRESHOLD = K        \/\/ Only allocation size over this threshold will be baselined.\n-  };\n","filename":"src\/hotspot\/share\/services\/memBaseline.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -99,1 +99,0 @@\n-  const char* scale = current_scale();\n@@ -108,0 +107,6 @@\n+\n+  if (scale() > 1) {\n+    out->print_cr(\"(Omitting categories weighting less than 1%s)\", current_scale());\n+    out->cr();\n+  }\n+\n@@ -245,2 +250,9 @@\n-  report_malloc_sites();\n-  report_virtual_memory_allocation_sites();\n+  int num_omitted =\n+      report_malloc_sites() +\n+      report_virtual_memory_allocation_sites();\n+  if (num_omitted > 0) {\n+    assert(scale() > 1, \"sanity\");\n+    out->print_cr(\"(%d call sites weighting less than 1%s each omitted.)\",\n+                   num_omitted, current_scale());\n+    out->cr();\n+  }\n@@ -249,1 +261,1 @@\n-void MemDetailReporter::report_malloc_sites() {\n+int MemDetailReporter::report_malloc_sites() {\n@@ -251,1 +263,1 @@\n-  if (malloc_itr.is_empty()) return;\n+  if (malloc_itr.is_empty()) return 0;\n@@ -256,0 +268,1 @@\n+  int num_omitted = 0;\n@@ -257,2 +270,2 @@\n-    \/\/ Don't report if size is too small\n-    if (amount_in_current_scale(malloc_site->size()) == 0)\n+    \/\/ Don't report free sites; does not count toward omitted count.\n+    if (malloc_site->size() == 0) {\n@@ -260,1 +273,6 @@\n-\n+    }\n+    \/\/ Don't report if site has allocated less than one unit of whatever our scale is\n+    if (scale() > 1 && amount_in_current_scale(malloc_site->size()) == 0) {\n+      num_omitted ++;\n+      continue;\n+    }\n@@ -270,0 +288,1 @@\n+  return num_omitted;\n@@ -272,1 +291,1 @@\n-void MemDetailReporter::report_virtual_memory_allocation_sites()  {\n+int MemDetailReporter::report_virtual_memory_allocation_sites()  {\n@@ -276,1 +295,1 @@\n-  if (virtual_memory_itr.is_empty()) return;\n+  if (virtual_memory_itr.is_empty()) return 0;\n@@ -280,1 +299,1 @@\n-\n+  int num_omitted = 0;\n@@ -282,2 +301,2 @@\n-    \/\/ Don't report if size is too small\n-    if (amount_in_current_scale(virtual_memory_site->reserved()) == 0)\n+    \/\/ Don't report free sites; does not count toward omitted count.\n+    if (virtual_memory_site->reserved() == 0) {\n@@ -285,1 +304,6 @@\n-\n+    }\n+    \/\/ Don't report if site has reserved less than one unit of whatever our scale is\n+    if (scale() > 1 && amount_in_current_scale(virtual_memory_site->reserved()) == 0) {\n+      num_omitted ++;\n+      continue;\n+    }\n@@ -296,0 +320,1 @@\n+  return num_omitted;\n@@ -361,1 +386,0 @@\n-  const char* scale = current_scale();\n@@ -365,0 +389,5 @@\n+  if (scale() > 1) {\n+    out->print_cr(\"(Omitting categories weighting less than 1%s)\", current_scale());\n+    out->cr();\n+  }\n+\n","filename":"src\/hotspot\/share\/services\/memReporter.cpp","additions":44,"deletions":15,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -42,3 +42,3 @@\n-  size_t        _scale;  \/\/ report in this scale\n-  outputStream* _output; \/\/ destination\n-\n+  const size_t        _scale;  \/\/ report in this scale\n+  outputStream* const _output; \/\/ destination\n+  static const size_t default_scale = K;\n@@ -46,4 +46,4 @@\n-  MemReporterBase(outputStream* out = NULL, size_t scale = K)\n-    : _scale(scale) {\n-    _output = (out == NULL) ? tty : out;\n-  }\n+  MemReporterBase(outputStream* out = NULL, size_t scale = 0) :\n+    _scale(scale == 0 ? default_scale : scale),\n+    _output(out == NULL ? tty : out)\n+  {}\n@@ -56,0 +56,3 @@\n+  size_t scale() const {\n+    return _scale;\n+  }\n@@ -103,1 +106,1 @@\n-    size_t scale = K) : MemReporterBase(output, scale),\n+    size_t scale = 0) : MemReporterBase(output, scale),\n@@ -128,1 +131,1 @@\n-  MemDetailReporter(MemBaseline& baseline, outputStream* output, size_t scale = K) :\n+  MemDetailReporter(MemBaseline& baseline, outputStream* output, size_t scale = 0) :\n@@ -145,4 +148,4 @@\n-  \/\/ Report malloc allocation sites\n-  void report_malloc_sites();\n-  \/\/ Report virtual memory reservation sites\n-  void report_virtual_memory_allocation_sites();\n+  \/\/ Report malloc allocation sites; returns number of omitted sites.\n+  int report_malloc_sites();\n+  \/\/ Report virtual memory reservation sites; returns number of omitted sites.\n+  int report_virtual_memory_allocation_sites();\n@@ -165,1 +168,1 @@\n-    outputStream* output, size_t scale = K) : MemReporterBase(output, scale),\n+    outputStream* output, size_t scale = 0) : MemReporterBase(output, scale),\n@@ -204,1 +207,1 @@\n-    outputStream* output, size_t scale = K) :\n+    outputStream* output, size_t scale = 0) :\n","filename":"src\/hotspot\/share\/services\/memReporter.hpp","additions":18,"deletions":15,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -173,0 +173,6 @@\n+\/\/ Make a final report or report for hs_err file.\n+void MemTracker::error_report(outputStream* output) {\n+  if (tracking_level() >= NMT_summary) {\n+    report(true, output, K);  \/\/ just print summary for error case.\n+  }\n+}\n@@ -184,1 +190,3 @@\n-      report(level == NMT_summary, output);\n+      \/\/ Print in whatever level we gave; print with scale=1 to use this\n+      \/\/ final report to find leaks.\n+      report(level == NMT_summary, output, 1);\n@@ -189,1 +197,1 @@\n-void MemTracker::report(bool summary_only, outputStream* output) {\n+void MemTracker::report(bool summary_only, outputStream* output, size_t scale) {\n@@ -194,1 +202,1 @@\n-      MemSummaryReporter rpt(baseline, output);\n+      MemSummaryReporter rpt(baseline, output, scale);\n@@ -197,1 +205,1 @@\n-      MemDetailReporter rpt(baseline, output);\n+      MemDetailReporter rpt(baseline, output, scale);\n@@ -202,1 +210,1 @@\n-      MetaspaceUtils::print_basic_report(output, K);\n+      MetaspaceUtils::print_basic_report(output, scale);\n","filename":"src\/hotspot\/share\/services\/memTracker.cpp","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -290,6 +290,1 @@\n-  static void error_report(outputStream* output) {\n-    if (tracking_level() >= NMT_summary) {\n-      report(true, output);  \/\/ just print summary for error case.\n-    }\n-   }\n-\n+  static void error_report(outputStream* output);\n@@ -311,1 +306,1 @@\n-  static void report(bool summary_only, outputStream* output);\n+  static void report(bool summary_only, outputStream* output, size_t scale);\n","filename":"src\/hotspot\/share\/services\/memTracker.hpp","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"}]}