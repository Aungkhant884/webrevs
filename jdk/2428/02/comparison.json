{"files":[{"patch":"@@ -98,9 +98,2 @@\n-    if (site->size() >= MemBaseline::SIZE_THRESHOLD) {\n-      if (_malloc_sites.add(*site) != NULL) {\n-        _count++;\n-        return true;\n-      } else {\n-        return false;  \/\/ OOM\n-      }\n-    } else {\n-      \/\/ malloc site does not meet threshold, ignore and continue\n+    if (_malloc_sites.add(*site) != NULL) {\n+      _count++;\n@@ -109,0 +102,1 @@\n+    return false;  \/\/ OOM\n@@ -128,7 +122,3 @@\n-    if (rgn->size() >= MemBaseline::SIZE_THRESHOLD) {\n-      if (_virtual_memory_regions.add(*rgn) != NULL) {\n-        _count ++;\n-        return true;\n-      } else {\n-        return false;\n-      }\n+    if (_virtual_memory_regions.add(*rgn) != NULL) {\n+      _count ++;\n+      return true;\n@@ -136,1 +126,1 @@\n-    return true;\n+    return false;\n","filename":"src\/hotspot\/share\/services\/memBaseline.cpp","additions":7,"deletions":17,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -46,3 +46,0 @@\n-  enum BaselineThreshold {\n-    SIZE_THRESHOLD = K        \/\/ Only allocation size over this threshold will be baselined.\n-  };\n","filename":"src\/hotspot\/share\/services\/memBaseline.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -99,1 +99,0 @@\n-  const char* scale = current_scale();\n@@ -108,0 +107,6 @@\n+\n+  if (scale() > 1) {\n+    out->print_cr(\"(Omitting categories weighting less than 1%s)\", current_scale());\n+    out->cr();\n+  }\n+\n@@ -245,2 +250,9 @@\n-  report_malloc_sites();\n-  report_virtual_memory_allocation_sites();\n+  int num_omitted =\n+      report_malloc_sites() +\n+      report_virtual_memory_allocation_sites();\n+  if (num_omitted > 0) {\n+    assert(scale() > 1, \"sanity\");\n+    out->print_cr(\"(%d call sites weighting less than 1%s each omitted.)\",\n+                   num_omitted, current_scale());\n+    out->cr();\n+  }\n@@ -249,1 +261,1 @@\n-void MemDetailReporter::report_malloc_sites() {\n+int MemDetailReporter::report_malloc_sites() {\n@@ -251,1 +263,1 @@\n-  if (malloc_itr.is_empty()) return;\n+  if (malloc_itr.is_empty()) return 0;\n@@ -256,0 +268,1 @@\n+  int num_omitted = 0;\n@@ -257,2 +270,2 @@\n-    \/\/ Don't report if size is too small\n-    if (amount_in_current_scale(malloc_site->size()) == 0)\n+    \/\/ Don't report free sites; does not count toward omitted count.\n+    if (malloc_site->size() == 0) {\n@@ -260,1 +273,6 @@\n-\n+    }\n+    \/\/ Don't report if site has allocated less than one unit of whatever our scale is\n+    if (scale() > 1 && amount_in_current_scale(malloc_site->size()) == 0) {\n+      num_omitted ++;\n+      continue;\n+    }\n@@ -270,0 +288,1 @@\n+  return num_omitted;\n@@ -272,1 +291,1 @@\n-void MemDetailReporter::report_virtual_memory_allocation_sites()  {\n+int MemDetailReporter::report_virtual_memory_allocation_sites()  {\n@@ -276,1 +295,1 @@\n-  if (virtual_memory_itr.is_empty()) return;\n+  if (virtual_memory_itr.is_empty()) return 0;\n@@ -280,1 +299,1 @@\n-\n+  int num_omitted = 0;\n@@ -282,2 +301,2 @@\n-    \/\/ Don't report if size is too small\n-    if (amount_in_current_scale(virtual_memory_site->reserved()) == 0)\n+    \/\/ Don't report free sites; does not count toward omitted count.\n+    if (virtual_memory_site->reserved() == 0) {\n@@ -285,1 +304,6 @@\n-\n+    }\n+    \/\/ Don't report if site has reserved less than one unit of whatever our scale is\n+    if (scale() > 1 && amount_in_current_scale(virtual_memory_site->reserved()) == 0) {\n+      num_omitted ++;\n+      continue;\n+    }\n@@ -296,0 +320,1 @@\n+  return num_omitted;\n@@ -361,1 +386,0 @@\n-  const char* scale = current_scale();\n@@ -365,0 +389,5 @@\n+  if (scale() > 1) {\n+    out->print_cr(\"(Omitting categories weighting less than 1%s)\", current_scale());\n+    out->cr();\n+  }\n+\n","filename":"src\/hotspot\/share\/services\/memReporter.cpp","additions":44,"deletions":15,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -56,0 +56,3 @@\n+  size_t scale() const {\n+    return _scale;\n+  }\n@@ -145,4 +148,4 @@\n-  \/\/ Report malloc allocation sites\n-  void report_malloc_sites();\n-  \/\/ Report virtual memory reservation sites\n-  void report_virtual_memory_allocation_sites();\n+  \/\/ Report malloc allocation sites; returns number of omitted sites.\n+  int report_malloc_sites();\n+  \/\/ Report virtual memory reservation sites; returns number of omitted sites.\n+  int report_virtual_memory_allocation_sites();\n","filename":"src\/hotspot\/share\/services\/memReporter.hpp","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"}]}