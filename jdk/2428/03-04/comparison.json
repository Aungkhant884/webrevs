{"files":[{"patch":"@@ -99,0 +99,1 @@\n+  const char* scale = current_scale();\n@@ -107,6 +108,0 @@\n-\n-  if (scale() > 1) {\n-    out->print_cr(\"(Omitting categories weighting less than 1%s)\", current_scale());\n-    out->cr();\n-  }\n-\n@@ -250,9 +245,2 @@\n-  int num_omitted =\n-      report_malloc_sites() +\n-      report_virtual_memory_allocation_sites();\n-  if (num_omitted > 0) {\n-    assert(scale() > 1, \"sanity\");\n-    out->print_cr(\"(%d call sites weighting less than 1%s each omitted.)\",\n-                   num_omitted, current_scale());\n-    out->cr();\n-  }\n+  report_malloc_sites();\n+  report_virtual_memory_allocation_sites();\n@@ -261,1 +249,1 @@\n-int MemDetailReporter::report_malloc_sites() {\n+void MemDetailReporter::report_malloc_sites() {\n@@ -263,1 +251,1 @@\n-  if (malloc_itr.is_empty()) return 0;\n+  if (malloc_itr.is_empty()) return;\n@@ -268,1 +256,0 @@\n-  int num_omitted = 0;\n@@ -270,7 +257,2 @@\n-    \/\/ Don't report free sites; does not count toward omitted count.\n-    if (malloc_site->size() == 0) {\n-      continue;\n-    }\n-    \/\/ Don't report if site has allocated less than one unit of whatever our scale is\n-    if (scale() > 1 && amount_in_current_scale(malloc_site->size()) == 0) {\n-      num_omitted ++;\n+    \/\/ Don't report if size is too small\n+    if (amount_in_current_scale(malloc_site->size()) == 0)\n@@ -278,1 +260,1 @@\n-    }\n+\n@@ -288,1 +270,0 @@\n-  return num_omitted;\n@@ -291,1 +272,1 @@\n-int MemDetailReporter::report_virtual_memory_allocation_sites()  {\n+void MemDetailReporter::report_virtual_memory_allocation_sites()  {\n@@ -295,1 +276,1 @@\n-  if (virtual_memory_itr.is_empty()) return 0;\n+  if (virtual_memory_itr.is_empty()) return;\n@@ -299,1 +280,1 @@\n-  int num_omitted = 0;\n+\n@@ -301,7 +282,2 @@\n-    \/\/ Don't report free sites; does not count toward omitted count.\n-    if (virtual_memory_site->reserved() == 0) {\n-      continue;\n-    }\n-    \/\/ Don't report if site has reserved less than one unit of whatever our scale is\n-    if (scale() > 1 && amount_in_current_scale(virtual_memory_site->reserved()) == 0) {\n-      num_omitted ++;\n+    \/\/ Don't report if size is too small\n+    if (amount_in_current_scale(virtual_memory_site->reserved()) == 0)\n@@ -309,1 +285,1 @@\n-    }\n+\n@@ -320,1 +296,0 @@\n-  return num_omitted;\n@@ -386,0 +361,1 @@\n+  const char* scale = current_scale();\n@@ -389,5 +365,0 @@\n-  if (scale() > 1) {\n-    out->print_cr(\"(Omitting categories weighting less than 1%s)\", current_scale());\n-    out->cr();\n-  }\n-\n","filename":"src\/hotspot\/share\/services\/memReporter.cpp","additions":15,"deletions":44,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -59,3 +59,0 @@\n-  size_t scale() const {\n-    return _scale;\n-  }\n@@ -150,4 +147,4 @@\n-  \/\/ Report malloc allocation sites; returns number of omitted sites.\n-  int report_malloc_sites();\n-  \/\/ Report virtual memory reservation sites; returns number of omitted sites.\n-  int report_virtual_memory_allocation_sites();\n+  \/\/ Report malloc allocation sites\n+  void report_malloc_sites();\n+  \/\/ Report virtual memory reservation sites\n+  void report_virtual_memory_allocation_sites();\n","filename":"src\/hotspot\/share\/services\/memReporter.hpp","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"}]}