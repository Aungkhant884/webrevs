{"files":[{"patch":"@@ -266,2 +266,3 @@\n-    \/\/ packed into a byte vector first, this will simplify the re-materialization\n-    \/\/ logic for both predicated and non-predicated targets.\n+    \/\/ packed into a boolean\/byte vector first, this will simplify the\n+    \/\/ re-materialization logic for both predicated and non-predicated\n+    \/\/ targets.\n@@ -269,6 +270,4 @@\n-    if (is_mask) {\n-      if (vec_value->Opcode() != Op_VectorStoreMask) {\n-        const TypeVect* vt = vec_value->bottom_type()->is_vect();\n-        BasicType bt = vt->element_basic_type();\n-        vec_value = gvn.transform(VectorStoreMaskNode::make(gvn, vec_value, bt, vt->length()));\n-      }\n+    if (is_mask && vec_value->Opcode() != Op_VectorStoreMask) {\n+      const TypeVect* vt = vec_value->bottom_type()->is_vect();\n+      BasicType bt = vt->element_basic_type();\n+      vec_value = gvn.transform(VectorStoreMaskNode::make(gvn, vec_value, bt, vt->length()));\n","filename":"src\/hotspot\/share\/opto\/vector.cpp","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -97,3 +97,1 @@\n-\/\/\n-\/\/ TODO: revisit when predicate registers are fully supported.\n-\/\/\n+\n@@ -102,1 +100,1 @@\n-    case T_BOOLEAN:\n+    case T_BOOLEAN: arr->  byte_at_put(index,   *(jboolean*)addr); break;\n","filename":"src\/hotspot\/share\/prims\/vectorSupport.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"}]}