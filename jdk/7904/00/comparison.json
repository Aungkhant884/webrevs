{"files":[{"patch":"@@ -64,0 +64,20 @@\n+static void* null_event_callback(void* ignore_stream, const char* ignore_event, void* arg) {\n+  return NULL;\n+}\n+\n+\/* print all events as XML markup *\/\n+static void* xml_event_callback(void* stream, const char* event, void* arg) {\n+  FILE* fp = (FILE*) stream;\n+#define NS_PFX \"dis:\"\n+  if (event[0] != '\/') {\n+    \/* issue the tag, with or without a formatted argument *\/\n+    fprintf(fp, \"<\"NS_PFX);\n+    fprintf(fp, event, arg);\n+    fprintf(fp, \">\");\n+  } else {\n+    ++event;                    \/* skip slash *\/\n+    fprintf(fp, \"<\/\"NS_PFX\"%s>\", event);\n+  }\n+  return NULL;\n+}\n+\n@@ -77,0 +97,15 @@\n+  if (printf_callback == NULL) {\n+    int (*fprintf_callback)(FILE*, const char*, ...) = &fprintf;\n+    FILE* fprintf_stream = stdout;\n+    printf_callback = (printf_callback_t) fprintf_callback;\n+    if (printf_stream == NULL)\n+      printf_stream   = (void*)           fprintf_stream;\n+  }\n+  if (event_callback == NULL) {\n+    if (event_stream == NULL)\n+      event_callback = &null_event_callback;\n+    else\n+      event_callback = &xml_event_callback;\n+  }\n+\n+\n@@ -89,1 +124,7 @@\n-      print(\"  0x%\" PRIx64 \":\\t%s\\t\\t%s\\n\", insn[j].address, insn[j].mnemonic, insn[j].op_str);\n+      (*event_callback)(event_stream, \"insn\", (void*) insn[j].address);\n+      print(\"%s\\t\\t%s\", insn[j].mnemonic, insn[j].op_str);\n+      (*event_callback)(event_stream, \"\/insn\", (void*) (insn[j].address + insn[j].size));\n+      if (newline) {\n+        \/* follow each complete insn by a nice newline *\/\n+        print(\"\\n\");\n+      }\n","filename":"src\/utils\/hsdis\/capstone\/hsdis-capstone.c","additions":42,"deletions":1,"binary":false,"changes":43,"status":"modified"}]}