{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -92,1 +92,1 @@\n-        TWENTY_ONE(false,\"65.0\", \"21\", Versions::checksrc20);\n+        TWENTY_ONE(false,\"65.0\", \"21\", Versions::checksrc21);\n@@ -251,1 +251,3 @@\n-        expectedFail(args, List.of(\"New10.java\"));\n+        expectedFail(args, List.of(\"New10.java\", \"New11.java\", \"New14.java\", \"New15.java\",\n+                                   \"New16.java\", \"New17.java\", \"New21.java\"));\n+\n@@ -257,1 +259,2 @@\n-        expectedFail(args, List.of(\"New10.java\"));\n+        expectedFail(args, List.of(\"New10.java\", \"New11.java\", \"New14.java\", \"New15.java\",\n+                                   \"New16.java\", \"New17.java\", \"New21.java\"));\n@@ -263,1 +266,2 @@\n-        expectedFail(args, List.of(\"New11.java\"));\n+        expectedFail(args, List.of(\"New11.java\", \"New14.java\", \"New15.java\",\n+                                   \"New16.java\", \"New17.java\", \"New21.java\"));\n@@ -269,1 +273,1 @@\n-        expectedFail(args, List.of(\"New14.java\"));\n+        expectedFail(args, List.of(\"New14.java\", \"New15.java\", \"New16.java\", \"New17.java\", \"New21.java\"));\n@@ -275,1 +279,1 @@\n-        expectedFail(args, List.of(\"New14.java\"));\n+        expectedFail(args, List.of(\"New14.java\", \"New15.java\", \"New16.java\", \"New17.java\", \"New21.java\"));\n@@ -281,1 +285,1 @@\n-        expectedFail(args, List.of(\"New14.java\"));\n+        expectedFail(args, List.of(\"New14.java\", \"New15.java\", \"New16.java\", \"New17.java\", \"New21.java\"));\n@@ -288,1 +292,1 @@\n-        expectedFail(args, List.of(\"New15.java\"));\n+        expectedFail(args, List.of(\"New15.java\", \"New16.java\", \"New17.java\", \"New21.java\"));\n@@ -295,1 +299,1 @@\n-        expectedFail(args, List.of(\"New16.java\"));\n+       expectedFail(args, List.of(\"New16.java\", \"New17.java\", \"New21.java\"));\n@@ -302,1 +306,1 @@\n-        expectedFail(args, List.of(\"New17.java\"));\n+       expectedFail(args, List.of(\"New17.java\", \"New21.java\"));\n@@ -309,1 +313,1 @@\n-       \/\/ Add expectedFail after new language features added in a later release.\n+       expectedFail(args, List.of(\"New21.java\"));\n@@ -316,1 +320,1 @@\n-       \/\/ Add expectedFail after new language features added in a later release.\n+       expectedFail(args, List.of(\"New21.java\"));\n@@ -323,1 +327,1 @@\n-       \/\/ Add expectedFail after new language features added in a later release.\n+       expectedFail(args, List.of(\"New21.java\"));\n@@ -330,0 +334,8 @@\n+       expectedFail(args, List.of(\"New21.java\"));\n+    }\n+\n+   protected void checksrc21(List<String> args) {\n+       printargs(\"checksrc21\", args);\n+       expectedPass(args, List.of(\"New7.java\", \"New8.java\", \"New10.java\", \"New11.java\",\n+                                  \"New14.java\", \"New15.java\", \"New16.java\", \"New17.java\",\n+                                  \"New21.java\"));\n@@ -387,1 +399,0 @@\n-\n@@ -572,0 +583,18 @@\n+\n+        \/*\n+         * Create a file with a new feature in 21, not in 20 : pattern matching for switch\n+         *\/\n+        writeSourceFile(\"New21.java\",\n+            \"\"\"\n+            public class New21 {\n+                public static void main(String... args) {\n+                    Object o = new Object(){};\n+\n+                    System.out.println(switch (o) {\n+                                       case Integer i -> String.format(\"%d\", i);\n+                                       default        -> o.toString();\n+                                       });\n+                }\n+            }\n+            \"\"\"\n+        );\n","filename":"test\/langtools\/tools\/javac\/versions\/Versions.java","additions":44,"deletions":15,"binary":false,"changes":59,"status":"modified"}]}