{"files":[{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2018, 2022 SAP SE. All rights reserved.\n+ * Copyright (c) 2018, 2023 SAP SE. All rights reserved.\n@@ -209,2 +209,1 @@\n-    \/\/ Attempt to commit the chunk (depending on settings, we either fully commit it or just\n-    \/\/  commit enough to get the caller going). That may fail if we hit a commit limit. In\n+    \/\/ Attempt to commit the chunk. That may fail if we hit a commit limit. In\n@@ -213,1 +212,1 @@\n-    const size_t to_commit = Settings::new_chunks_are_fully_committed() ? c->word_size() : min_committed_words;\n+    const size_t to_commit = min_committed_words;\n@@ -346,11 +345,9 @@\n-  if (Settings::uncommit_free_chunks()) {\n-    const chunklevel_t max_level =\n-        chunklevel::level_fitting_word_size(Settings::commit_granule_words());\n-    for (chunklevel_t l = chunklevel::LOWEST_CHUNK_LEVEL;\n-         l <= max_level;\n-         l++) {\n-      \/\/ Since we uncommit all chunks at this level, we do not break the \"committed chunks are\n-      \/\/  at the front of the list\" condition.\n-      for (Metachunk* c = _chunks.first_at_level(l); c != nullptr; c = c->next()) {\n-        c->uncommit_locked();\n-      }\n+  const chunklevel_t max_level =\n+      chunklevel::level_fitting_word_size(Settings::commit_granule_words());\n+  for (chunklevel_t l = chunklevel::LOWEST_CHUNK_LEVEL;\n+       l <= max_level;\n+       l++) {\n+    \/\/ Since we uncommit all chunks at this level, we do not break the \"committed chunks are\n+    \/\/  at the front of the list\" condition.\n+    for (Metachunk* c = _chunks.first_at_level(l); c != nullptr; c = c->next()) {\n+      c->uncommit_locked();\n","filename":"src\/hotspot\/share\/memory\/metaspace\/chunkManager.cpp","additions":12,"deletions":15,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2020 SAP SE. All rights reserved.\n+ * Copyright (c) 2020, 2023 SAP SE. All rights reserved.\n@@ -55,9 +55,0 @@\n-\/\/ Note that even though this is an O(n) search, partially committed chunks are\n-\/\/  very rare. A partially committed chunk is one spanning multiple commit\n-\/\/  granules, of which some are committed and some are not.\n-\/\/ If metaspace reclamation is on (MetaspaceReclaimPolicy=balanced|aggressive), these\n-\/\/  chunks will become uncommitted after they are returned to the ChunkManager.\n-\/\/ If metaspace reclamation is off (MetaspaceReclaimPolicy=none) they are fully\n-\/\/  committed when handed out and will not be uncommitted when returned to the\n-\/\/  ChunkManager.\n-\/\/\n","filename":"src\/hotspot\/share\/memory\/metaspace\/freeChunkList.hpp","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2020 SAP SE. All rights reserved.\n+ * Copyright (c) 2020, 2023 SAP SE. All rights reserved.\n@@ -319,3 +319,0 @@\n-      if (Settings::new_chunks_are_fully_committed()) {\n-        assert(new_chunk->is_fully_committed(), \"Chunk should be fully committed.\");\n-      }\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceArena.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2020 SAP SE. All rights reserved.\n+ * Copyright (c) 2020, 2023 SAP SE. All rights reserved.\n@@ -42,3 +42,0 @@\n-bool Settings::_new_chunks_are_fully_committed = false;\n-bool Settings::_uncommit_free_chunks = false;\n-\n@@ -48,9 +45,1 @@\n-  if (strcmp(MetaspaceReclaimPolicy, \"none\") == 0) {\n-    log_info(metaspace)(\"Initialized with strategy: no reclaim.\");\n-    _commit_granule_bytes = MAX2(os::vm_page_size(), 64 * K);\n-    _commit_granule_words = _commit_granule_bytes \/ BytesPerWord;\n-    \/\/ In \"none\" reclamation mode, we do not uncommit, and we commit new chunks fully;\n-    \/\/ that very closely mimics the behaviour of old Metaspace.\n-    _new_chunks_are_fully_committed = true;\n-    _uncommit_free_chunks = false;\n-  } else if (strcmp(MetaspaceReclaimPolicy, \"aggressive\") == 0) {\n+  if (strcmp(MetaspaceReclaimPolicy, \"aggressive\") == 0) {\n@@ -62,2 +51,0 @@\n-    _new_chunks_are_fully_committed = false;\n-    _uncommit_free_chunks = true;\n@@ -68,2 +55,0 @@\n-    _new_chunks_are_fully_committed = false;\n-    _uncommit_free_chunks = true;\n@@ -90,2 +75,0 @@\n-  st->print_cr(\" - new_chunks_are_fully_committed: %d.\", (int)new_chunks_are_fully_committed());\n-  st->print_cr(\" - uncommit_free_chunks: %d.\", (int)uncommit_free_chunks());\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceSettings.cpp","additions":2,"deletions":19,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2020, 2022 SAP SE. All rights reserved.\n+ * Copyright (c) 2020, 2023 SAP SE. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,9 +59,0 @@\n-  \/\/ Whether or not chunks handed out to an arena start out fully committed;\n-  \/\/ if true, this deactivates committing-on-demand (regardless of whether\n-  \/\/ we uncommit free chunks).\n-  static bool _new_chunks_are_fully_committed;\n-\n-  \/\/ If true, chunks equal or larger than a commit granule are uncommitted\n-  \/\/ after being returned to the freelist.\n-  static bool _uncommit_free_chunks;\n-\n@@ -75,1 +66,0 @@\n-  static bool new_chunks_are_fully_committed()                { return _new_chunks_are_fully_committed; }\n@@ -79,1 +69,0 @@\n-  static bool uncommit_free_chunks()                          { return _uncommit_free_chunks; }\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceSettings.hpp","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1424,1 +1424,1 @@\n-          \"options: balanced, aggressive, none\")                            \\\n+          \"options: balanced, aggressive\")                                  \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2020 SAP SE. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023 SAP SE. All rights reserved.\n@@ -69,3 +69,0 @@\n-    if (Settings::new_chunks_are_fully_committed()) {\n-      ASSERT_TRUE(c->is_fully_committed());\n-    }\n","filename":"test\/hotspot\/gtest\/metaspace\/metaspaceGtestContexts.cpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2020 SAP SE. All rights reserved.\n+ * Copyright (c) 2020, 2023 SAP SE. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,5 +74,0 @@\n-    if (Settings::new_chunks_are_fully_committed()) {\n-      \/\/ For all we know we may have just failed to fully-commit a new root chunk.\n-      additional_word_size = MAX_CHUNK_WORD_SIZE;\n-    }\n-\n","filename":"test\/hotspot\/gtest\/metaspace\/test_chunkManager_stress.cpp","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2020, 2021 SAP SE. All rights reserved.\n+ * Copyright (c) 2020, 2023 SAP SE. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -85,13 +85,0 @@\n-          \/\/ Exception: MetaspaceReclaimPolicy=none. Here, chunks are fully committed from the get go and\n-          \/\/ min_committed_words is effectively ignored. So commit would fail if the chunk is larger than\n-          \/\/ the commit limit. Unfortunately, the chunk size is difficult to predict (it will be between\n-          \/\/ [pref_lvl, max_lvl]. To make matters simple, we skip the test if we don't know the level for\n-          \/\/ sure.\n-          if (Settings::new_chunks_are_fully_committed()) {\n-            if (pref_lvl == max_lvl) {\n-              commit_should_work = word_size_for_level(max_lvl) <= commit_limit_words;\n-            } else {\n-              continue;\n-            }\n-          }\n-\n@@ -245,5 +232,0 @@\n-  \/\/ This test does not make sense if commit-on-demand is off\n-  if (Settings::new_chunks_are_fully_committed()) {\n-    return;\n-  }\n-\n","filename":"test\/hotspot\/gtest\/metaspace\/test_metachunk.cpp","additions":2,"deletions":20,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2020 SAP SE. All rights reserved.\n+ * Copyright (c) 2020, 2023 SAP SE. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -154,4 +154,0 @@\n-  if (Settings::new_chunks_are_fully_committed()) {\n-    return;\n-  }\n-\n","filename":"test\/hotspot\/gtest\/metaspace\/test_metachunklist.cpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2020 SAP SE. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023 SAP SE. All rights reserved.\n@@ -121,5 +121,1 @@\n-      if (Settings::uncommit_free_chunks()) {\n-        ASSERT_LE(committed_words_after, committed_words_before);\n-      } else {\n-        ASSERT_EQ(committed_words_after, committed_words_before);\n-      }\n+      ASSERT_LE(committed_words_after, committed_words_before);\n@@ -180,6 +176,1 @@\n-      if (Settings::new_chunks_are_fully_committed()) {\n-        ASSERT_LT(possible_expansion, MAX_CHUNK_WORD_SIZE);\n-      } else {\n-        ASSERT_LT(possible_expansion, word_size);\n-      }\n-\n+      ASSERT_LT(possible_expansion, word_size);\n@@ -460,4 +451,0 @@\n-  if (Settings::new_chunks_are_fully_committed()) {\n-    return; \/\/ This would throw off the commit counting in this test.\n-  }\n-\n@@ -568,6 +555,17 @@\n-  if (!(Settings::new_chunks_are_fully_committed() && type == Metaspace::BootMetaspaceType)) {\n-    \/\/ Initial commit charge for the whole context should be one granule\n-    ASSERT_EQ(context.committed_words(), Settings::commit_granule_words());\n-    \/\/ Initial commit number for the arena should be less since - apart from boot loader - no\n-    \/\/  space type has large initial chunks.\n-    ASSERT_LE(committed, Settings::commit_granule_words());\n+  \/\/ What happens when we allocate, commit wise:\n+  \/\/ Arena allocates from current chunk, committing needed memory from the chunk on demand.\n+  \/\/ The chunk asks the underlying vsnode to commit the area it is located in. Since the\n+  \/\/ chunk may be smaller than one commit granule, this may result in surrounding memory\n+  \/\/ also getting committed.\n+  \/\/ In reality we will commit in granule granularity, but arena can only know what its first\n+  \/\/ chunk did commit. So what it thinks was committed depends on the size of its first chunk,\n+  \/\/ which depends on ArenaGrowthPolicy.\n+  {\n+    const chunklevel_t expected_level_for_first_chunk =\n+        ArenaGrowthPolicy::policy_for_space_type(type, is_class)->get_level_at_step(0);\n+    const size_t what_arena_should_think_was_committed =\n+        MIN2(Settings::commit_granule_words(), word_size_for_level(expected_level_for_first_chunk));\n+    const size_t what_should_really_be_committed = Settings::commit_granule_words();\n+\n+    ASSERT_EQ(committed, what_arena_should_think_was_committed);\n+    ASSERT_EQ(context.committed_words(), what_should_really_be_committed);\n@@ -618,1 +616,1 @@\n-    if (committed_jump > 0 && !Settings::new_chunks_are_fully_committed()) {\n+    if (committed_jump > 0) {\n","filename":"test\/hotspot\/gtest\/metaspace\/test_metaspacearena.cpp","additions":22,"deletions":24,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2020 SAP SE. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023 SAP SE. All rights reserved.\n@@ -32,1 +32,1 @@\n-\/* @test id=reclaim-none-debug\n+\/* @test id=default-debug\n@@ -34,1 +34,1 @@\n- * @summary Run metaspace-related gtests for reclaim policy none (with verifications)\n+ * @summary Run metaspace-related gtests with all default but verifications enabled\n@@ -40,12 +40,1 @@\n- * @run main\/native GTestWrapper --gtest_filter=metaspace* -XX:+UnlockDiagnosticVMOptions -XX:MetaspaceReclaimPolicy=none -XX:VerifyMetaspaceInterval=3\n- *\/\n-\n-\/* @test id=reclaim-none-ndebug\n- * @bug 8251158\n- * @summary Run metaspace-related gtests for reclaim policy none\n- * @library \/test\/lib\n- * @modules java.base\/jdk.internal.misc\n- *          java.xml\n- * @requires vm.debug == false\n- * @requires vm.flagless\n- * @run main\/native GTestWrapper --gtest_filter=metaspace* -XX:+UnlockDiagnosticVMOptions -XX:MetaspaceReclaimPolicy=none\n+ * @run main\/native GTestWrapper --gtest_filter=metaspace* -XX:+UnlockDiagnosticVMOptions -XX:VerifyMetaspaceInterval=3\n","filename":"test\/hotspot\/jtreg\/gtest\/MetaspaceGtests.java","additions":5,"deletions":16,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -39,10 +39,0 @@\n-\/*\n- * @test id=test-64bit-ccs-noreclaim\n- * @summary Test the VM.metaspace command\n- * @requires vm.bits == \"64\"\n- * @library \/test\/lib\n- * @modules java.base\/jdk.internal.misc\n- *          java.management\n- * @run main\/othervm -Dwith-compressed-class-space -XX:MaxMetaspaceSize=201M -Xmx100M -XX:+UseCompressedOops -XX:+UseCompressedClassPointers -XX:+UnlockDiagnosticVMOptions -XX:MetaspaceReclaimPolicy=none PrintMetaspaceDcmd\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/Metaspace\/PrintMetaspaceDcmd.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2020 SAP SE. All rights reserved.\n+ * Copyright (c) 2020, 2023, SAP SE. All rights reserved.\n+ * Copyright (c) 2020, 2023 Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/runtime\/Metaspace\/elastic\/MetaspaceTestArena.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,24 @@\n+\/*\n+ * Copyright (c) 2020, 2023 SAP SE. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n@@ -152,1 +176,1 @@\n-        \/\/ If no arenas are alive, usage should be zero and committed too (in reclaiming mode)\n+        \/\/ If no arenas are alive, usage should be zero and committed too\n@@ -157,4 +181,2 @@\n-            if (Settings.settings().doesReclaim()) {\n-                if (committedMeasured > 0) {\n-                    throw new RuntimeException(\"Committed > 0, expected 0\");\n-                }\n+            if (committedMeasured > 0) {\n+                throw new RuntimeException(\"Committed > 0, expected 0\");\n@@ -217,5 +239,1 @@\n-        if (Settings.settings().doesReclaim()) {\n-            expectedMaxCommitted *= 10.0;\n-        } else {\n-            expectedMaxCommitted *= 100.0;\n-        }\n+        expectedMaxCommitted *= 10.0;\n","filename":"test\/hotspot\/jtreg\/runtime\/Metaspace\/elastic\/MetaspaceTestContext.java","additions":28,"deletions":10,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2021 SAP SE. All rights reserved.\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023 SAP SE. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,10 +64,6 @@\n-        \/\/ It then purges the context.\n-        \/\/ We may return memory to the operating system:\n-        \/\/ - with -XX:MetaspaceReclaimPolicy=balanced|aggressive (balanced is the default),\n-        \/\/   we will scourge the freelist for chunks larger than a commit granule, and uncommit\n-        \/\/   their backing memory. Note that since we deleted all arenas, all their chunks are\n-        \/\/   in the freelist, should have been maximally folded by the buddy allocator, and\n-        \/\/   therefore should all be eligible for uncommitting. Meaning the context should\n-        \/\/   retain no memory at all, its committed counter should be zero.\n-        \/\/ - with -XX:MetaspaceReclaimPolicy=none, we omit the purging and retain memory in the\n-        \/\/   metaspace allocator, so the context should retain its memory.\n+        \/\/ It then purges the context. We will scourge the freelist for chunks larger than a\n+        \/\/ commit granule, and uncommit their backing memory. Note that since we deleted all\n+        \/\/ arenas, all their chunks are in the freelist, should have been maximally folded\n+        \/\/ by the buddy allocator, and therefore should all be eligible for uncommitting.\n+        \/\/ Meaning the context should retain no memory at all, its committed counter should\n+        \/\/ be zero.\n","filename":"test\/hotspot\/jtreg\/runtime\/Metaspace\/elastic\/MetaspaceTestWithThreads.java","additions":8,"deletions":12,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2020 SAP SE. All rights reserved.\n+ * Copyright (c) 2020, 2023 SAP SE. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,0 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI  -XX:VerifyMetaspaceInterval=10  -XX:MetaspaceReclaimPolicy=none       TestMetaspaceAllocation\n@@ -56,1 +55,0 @@\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI  -XX:MetaspaceReclaimPolicy=none       TestMetaspaceAllocation\n","filename":"test\/hotspot\/jtreg\/runtime\/Metaspace\/elastic\/TestMetaspaceAllocation.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2020 SAP SE. All rights reserved.\n+ * Copyright (c) 2020, 2023 SAP SE. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,18 +60,0 @@\n-\/*\n- * @test id=debug-none\n- * @library \/test\/lib\n- * @modules java.base\/jdk.internal.misc\n- *          java.management\n- * @build jdk.test.whitebox.WhiteBox\n- * @key randomness\n- * @requires (vm.debug == true)\n- *\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n- *\n- * @run main\/othervm\/timeout=400\n- *      -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n- *      -XX:VerifyMetaspaceInterval=10\n- *      -XX:MetaspaceReclaimPolicy=none\n- *      TestMetaspaceAllocationMT1\n- *\/\n-\n@@ -130,17 +112,0 @@\n-\/*\n- * @test id=ndebug-none\n- * @library \/test\/lib\n- * @modules java.base\/jdk.internal.misc\n- *          java.management\n- * @build jdk.test.whitebox.WhiteBox\n- * @key randomness\n- * @requires (vm.debug == false)\n- *\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n- *\n- * @run main\/othervm\/timeout=400\n- *      -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n- *      -XX:MetaspaceReclaimPolicy=none\n- *      TestMetaspaceAllocationMT1\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/Metaspace\/elastic\/TestMetaspaceAllocationMT1.java","additions":2,"deletions":37,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2020 SAP SE. All rights reserved.\n+ * Copyright (c) 2020, 2023 SAP SE. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,18 +60,0 @@\n-\/*\n- * @test id=debug-none\n- * @library \/test\/lib\n- * @modules java.base\/jdk.internal.misc\n- *          java.management\n- * @build jdk.test.whitebox.WhiteBox\n- * @key randomness\n- * @requires (vm.debug == true)\n- *\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n- *\n- * @run main\/othervm\/timeout=400\n- *      -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n- *      -XX:VerifyMetaspaceInterval=10\n- *      -XX:MetaspaceReclaimPolicy=none\n- *      TestMetaspaceAllocationMT2\n- *\/\n-\n@@ -130,17 +112,0 @@\n-\/*\n- * @test id=ndebug-none\n- * @library \/test\/lib\n- * @modules java.base\/jdk.internal.misc\n- *          java.management\n- * @build jdk.test.whitebox.WhiteBox\n- * @key randomness\n- * @requires (vm.debug == false)\n- *\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n- *\n- * @run main\/othervm\/timeout=400\n- *      -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n- *      -XX:MetaspaceReclaimPolicy=none\n- *      TestMetaspaceAllocationMT2\n- *\/\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/Metaspace\/elastic\/TestMetaspaceAllocationMT2.java","additions":2,"deletions":37,"binary":false,"changes":39,"status":"modified"}]}