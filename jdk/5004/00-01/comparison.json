{"files":[{"patch":"@@ -38,0 +38,1 @@\n+import static jdk.jpackage.internal.StandardBundlerParam.SIGN_BUNDLE;\n@@ -128,1 +129,1 @@\n-        if (Optional.ofNullable(MacAppImageBuilder.\n+        if (Optional.ofNullable(\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacAppBundler.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -69,0 +69,1 @@\n+import static jdk.jpackage.internal.StandardBundlerParam.SIGN_BUNDLE;\n@@ -146,10 +147,0 @@\n-    public static final StandardBundlerParam<Boolean> SIGN_BUNDLE  =\n-            new StandardBundlerParam<>(\n-            Arguments.CLIOptions.MAC_SIGN.getId(),\n-            Boolean.class,\n-            params -> false,\n-            \/\/ valueOf(null) is false, we actually do want null in some cases\n-            (s, p) -> (s == null || \"null\".equalsIgnoreCase(s)) ?\n-                    null : Boolean.valueOf(s)\n-        );\n-\n@@ -866,17 +857,0 @@\n-\n-     \/*\n-      * isFileSigned()\n-      * We cannot use this internally to decide whether to unsign a file\n-      * or not before resigning, because both unsigned and badly signed\n-      * return false. It can be used to differentiate between a signed and\n-      * unsigned app-image.\n-      *\/\n-     public static boolean isFileSigned(Path file) {\n-         try {\n-             IOUtils.exec(new ProcessBuilder(\"\/usr\/bin\/codesign\",\n-                         \"--verify\", file.toString()));\n-         } catch (IOException ex) {\n-             return false;\n-         }\n-         return true;\n-     }\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacAppImageBuilder.java","additions":1,"deletions":27,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import java.util.Optional;\n@@ -44,1 +45,1 @@\n-import static jdk.jpackage.internal.MacAppImageBuilder.SIGN_BUNDLE;\n+import static jdk.jpackage.internal.StandardBundlerParam.SIGN_BUNDLE;\n@@ -138,1 +139,2 @@\n-            if (SIGN_BUNDLE.fetchFrom(params)) {\n+            if (Optional.ofNullable(\n+                    SIGN_BUNDLE.fetchFrom(params)).orElse(Boolean.FALSE)) {\n@@ -141,7 +143,8 @@\n-                Path launcher = applicationImage.resolve(\"Contents\/MacOS\")\n-                        .resolve(APP_NAME.fetchFrom(params));\n-\n-                if (IOUtils.exists(launcher) &&\n-                        !MacAppImageBuilder.isFileSigned(launcher)) {\n-                    Log.info(MessageFormat.format(I18N.getString(\n-                             \"warning.unsigned.app.image\"), getID()));\n+                try {\n+                    if (!(AppImageFile.load(applicationImage).isSigned())) {\n+                        Log.info(MessageFormat.format(I18N.getString(\n+                                 \"warning.unsigned.app.image\"), getID()));\n+                    }\n+                } catch (IOException ioe) {\n+                    \/\/ Ignore - In case of a forign or tampered with app-image,\n+                    \/\/ user is notified of this when the name is extracted.\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacBaseInstallerBundler.java","additions":12,"deletions":9,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+import static jdk.jpackage.internal.StandardBundlerParam.SIGN_BUNDLE;\n@@ -502,1 +503,1 @@\n-            if (Optional.ofNullable(MacAppImageBuilder.\n+            if (Optional.ofNullable(\n@@ -606,1 +607,1 @@\n-            if (Optional.ofNullable(MacAppImageBuilder.\n+            if (Optional.ofNullable(\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacPkgBundler.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+import static jdk.jpackage.internal.StandardBundlerParam.SIGN_BUNDLE;\n@@ -61,0 +62,1 @@\n+    private final boolean signed;\n@@ -70,1 +72,1 @@\n-        this(null, null, null, null);\n+        this(null, null, null, null, null);\n@@ -74,1 +76,1 @@\n-            String creatorVersion, String creatorPlatform) {\n+            String creatorVersion, String creatorPlatform, String signedStr) {\n@@ -79,0 +81,1 @@\n+        this.signed = \"true\".equals(signedStr);\n@@ -97,0 +100,4 @@\n+    boolean isSigned() {\n+        return signed;\n+    }\n+\n@@ -132,0 +139,4 @@\n+            xml.writeStartElement(\"signed\");\n+            xml.writeCharacters(SIGN_BUNDLE.fetchFrom(params).toString());\n+            xml.writeEndElement();\n+\n@@ -174,0 +185,3 @@\n+            String signedStr = xpathQueryNullable(xPath,\n+                    \"\/jpackage-state\/@signed\", doc);\n+\n@@ -190,1 +204,1 @@\n-                    mainLauncher, launcherInfos, version, platform);\n+                    mainLauncher, launcherInfos, version, platform, signedStr);\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/AppImageFile.java","additions":17,"deletions":3,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -488,0 +488,10 @@\n+    static final StandardBundlerParam<Boolean> SIGN_BUNDLE =\n+            new StandardBundlerParam<>(\n+                    Arguments.CLIOptions.MAC_SIGN.getId(),\n+                    Boolean.class,\n+                    params -> false,\n+                    (s, p) -> (s == null || \"null\".equalsIgnoreCase(s)) ?\n+                    null : Boolean.valueOf(s)\n+        );\n+\n+\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/StandardBundlerParam.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"}]}