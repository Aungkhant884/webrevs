{"files":[{"patch":"@@ -271,17 +271,3 @@\n-static GrowableArray<Mutex*>* _mutex_array = NULL;\n-\n-static void add_mutex(Mutex* var) {\n-  \/\/ This is at startup so doesn't need sync.\n-  if (_mutex_array == NULL) {\n-    _mutex_array = new (ResourceObj::C_HEAP, mtThread) GrowableArray<Mutex*>(128, mtThread);\n-  }\n-  ThreadCritical tc;\n-  _mutex_array->push(var);\n-}\n-\n-static void remove_mutex(Mutex* var) {\n-  ThreadCritical tc;\n-  int i = _mutex_array->find_from_end(var);\n-  assert(i != -1, \"Mutex not in list\");\n-  _mutex_array->remove_at(i);\n-}\n+\/\/ Array used to print owned locks on error.\n+static Mutex* _mutex_array = NULL;\n+static int _array_count = 0;\n@@ -290,1 +276,13 @@\n-  remove_mutex(this);\n+  {\n+    \/\/ Remove mutex from print_owned_locks_on_error array\n+    ThreadCritical tc;\n+    Mutex* old_next = _next_mutex;\n+    assert(old_next != nullptr, \"only static mutexes don't have a next\");\n+    old_next->_prev_mutex = _prev_mutex;\n+    if (_prev_mutex == nullptr) {\n+      _mutex_array = old_next;\n+    } else {\n+      _prev_mutex->_next_mutex = old_next;\n+    }\n+    _array_count -= 1;\n+  }\n@@ -303,0 +301,2 @@\n+  _next            = nullptr;\n+  _last_owner      = nullptr;\n@@ -311,1 +311,12 @@\n-  add_mutex(this);\n+  {\n+    \/\/ Add mutex to print_owned_locks_on_error array\n+    ThreadCritical tc;\n+    Mutex* next = _mutex_array;\n+    _next_mutex = next;\n+    _prev_mutex = nullptr;\n+    _mutex_array = this;\n+    if (next != nullptr) {\n+      next->_prev_mutex = this;\n+    }\n+    _array_count += 1;\n+  }\n@@ -318,1 +329,1 @@\n-void Mutex::print_on_error(outputStream* st) const {\n+void Mutex::print_on(outputStream* st) const {\n@@ -322,0 +333,7 @@\n+#ifdef ASSERT\n+  if (_allow_vm_block) {\n+    st->print(\"%s\", \" allow_vm_block\");\n+  }\n+  st->print(\" %s\", rank_name());\n+#endif\n+  st->cr();\n@@ -327,0 +345,1 @@\n+  ResourceMark rm;\n@@ -329,1 +348,2 @@\n-  for (int i = 0; i < _mutex_array->length(); i++) {\n+  Mutex *m = _mutex_array;\n+  while (m != nullptr) {\n@@ -331,1 +351,1 @@\n-     if (_mutex_array->at(i)->owner() != NULL) {\n+     if (m->owner() != NULL) {\n@@ -333,2 +353,1 @@\n-          \/\/ print format used by Mutex::print_on_error()\n-          st->print_cr(\" ([mutex\/lock_event])\");\n+          st->cr();\n@@ -337,2 +356,1 @@\n-       _mutex_array->at(i)->print_on_error(st);\n-       st->cr();\n+       m->print_on(st);\n@@ -340,0 +358,1 @@\n+     m = m->_next_mutex;\n@@ -342,0 +361,1 @@\n+  st->print_cr(\"Total Mutex count %d\", _array_count);\n@@ -387,13 +407,0 @@\n-#endif \/\/ ASSERT\n-\n-#ifndef PRODUCT\n-void Mutex::print_on(outputStream* st) const {\n-  st->print(\"Mutex: [\" PTR_FORMAT \"] %s - owner: \" PTR_FORMAT,\n-            p2i(this), _name, p2i(owner()));\n-  if (_allow_vm_block) {\n-    st->print(\"%s\", \" allow_vm_block\");\n-  }\n-  DEBUG_ONLY(st->print(\" %s\", rank_name()));\n-  st->cr();\n-}\n-#endif \/\/ PRODUCT\n@@ -401,1 +408,0 @@\n-#ifdef ASSERT\n","filename":"src\/hotspot\/share\/runtime\/mutex.cpp","additions":46,"deletions":40,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -91,0 +91,4 @@\n+  \/\/ Embed pointers for mutex array for error reporting.\n+  Mutex* _next_mutex;\n+  Mutex* _prev_mutex;\n+\n@@ -95,4 +99,1 @@\n-  \/\/ Debugging fields for naming, deadlock detection, etc. (some only used in debug mode)\n-#ifndef PRODUCT\n-  bool    _allow_vm_block;\n-#endif\n+  \/\/ Debugging fields for naming, deadlock detection, etc.\n@@ -103,1 +104,2 @@\n-  bool _skip_rank_check;         \/\/ read only by owner when doing rank checks\n+  bool    _skip_rank_check;      \/\/ read only by owner when doing rank checks\n+  bool    _allow_vm_block;\n@@ -192,2 +194,0 @@\n-  void print_on_error(outputStream* st) const;\n-\n@@ -197,5 +197,2 @@\n-\n-  #ifndef PRODUCT\n-    void print_on(outputStream* st) const;\n-    void print() const                      { print_on(::tty); }\n-  #endif\n+  void print_on(outputStream* st) const;\n+  void print() const { print_on(::tty); }\n","filename":"src\/hotspot\/share\/runtime\/mutex.hpp","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- * @run driver ErrorFileLocksTest\n+ * @run driver TestErrorFileMutex\n@@ -41,1 +41,1 @@\n-public class ErrorFileLocksTest {\n+public class TestErrorFileMutex {\n@@ -60,2 +60,2 @@\n-            Pattern.compile(\".*Threads_lock - owner thread:.*\"),\n-            Pattern.compile(\".*ErrorTest_lock - owner thread:.*\")\n+            Pattern.compile(\".*ErrorTest_lock - owner thread:.*\"),\n+            Pattern.compile(\".*Threads_lock - owner thread:.*\")\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/TestErrorFileMutex.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/ErrorFileLocksTest.java","status":"renamed"}]}