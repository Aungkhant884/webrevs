{"files":[{"patch":"@@ -1248,2 +1248,8 @@\n-          assert(get_block_for_node(def) || def->is_Con(), \"must have block; constants for debug info ok\");\n-          \/\/ Verify that instructions in the block is in correct order.\n+          Block* def_block = get_block_for_node(def);\n+          assert(def_block || def->is_Con(), \"must have block; constants for debug info ok\");\n+          \/\/ Verify that all definitions dominate their uses (except for virtual\n+          \/\/ instructions merging multiple definitions).\n+          assert(n->is_Root() || n->is_Region() || n->is_Phi() || n->is_MachMerge() ||\n+                 def_block->dominates(block),\n+                 \"uses must be dominated by definitions\");\n+          \/\/ Verify that instructions in the block are in correct order.\n@@ -1253,1 +1259,1 @@\n-          if (get_block_for_node(def) == block && !(block->head()->is_Loop() && n->is_Phi()) &&\n+          if (def_block == block && !(block->head()->is_Loop() && n->is_Phi()) &&\n","filename":"src\/hotspot\/share\/opto\/block.cpp","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1396,1 +1396,4 @@\n-    \/\/ Remove any newly created, but dead, nodes.\n+    \/\/ Remove any newly created, but dead, nodes. In this context, a dead node\n+    \/\/ is either a multi-node with all projections unused, or a non-projection\n+    \/\/ single node that is unused. This definition avoids removing unused\n+    \/\/ projections of partially-used multi-nodes.\n@@ -1399,2 +1402,21 @@\n-      if (n->outcnt() == 0 &&\n-          (!n->is_Proj() || n->as_Proj()->in(0)->outcnt() == 1) ){\n+      if (n->is_Proj()) {\n+        continue;\n+      }\n+      bool dead = true;\n+      for (DUIterator_Fast imax, i = n->fast_outs(imax); i < imax; i++) {\n+        Node* user = n->fast_out(i);\n+        if (!user->is_Proj() || user->outcnt() > 0) {\n+          dead = false;\n+          break;\n+        }\n+      }\n+      if (dead) {\n+        \/\/ Remove projections if n is a dead multi-node.\n+        for (uint k = j + n->outcnt(); sb->get_node(k)->is_Proj(); k--) {\n+          assert(sb->get_node(k)->in(0) == n,\n+                 \"dead projection should correspond to current node\");\n+          sb->get_node(k)->disconnect_inputs(C);\n+          sb->remove_node(k);\n+          new_cnt--;\n+        }\n+        \/\/ Now remove the node itself.\n","filename":"src\/hotspot\/share\/opto\/lcm.cpp","additions":25,"deletions":3,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,0 +117,2 @@\n+    \/\/ This assumes that the instruction is not used in the other exception\n+    \/\/ blocks. Global code motion is responsible for maintaining this invariant.\n","filename":"src\/hotspot\/share\/opto\/reg_split.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.exceptions;\n+\n+\/**\n+ * @test\n+ * @bug 8263227\n+ * @summary Tests that users of return values from exception-throwing method\n+ *          calls are not duplicated in the call's exception path. The second\n+ *          run with a variable seed is added for test robustness.\n+ * @library \/test\/lib \/\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:+UnlockDiagnosticVMOptions\n+ *                   -Xbatch -XX:+StressGCM -XX:StressSeed=0\n+ *                   -XX:+VerifyRegisterAllocator\n+ *                   -XX:CompileCommand=dontinline,java.lang.Integer::*\n+ *                   compiler.exceptions.TestSpilling\n+ * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:+UnlockDiagnosticVMOptions\n+ *                   -Xbatch -XX:+StressGCM\n+ *                   -XX:+VerifyRegisterAllocator\n+ *                   -XX:CompileCommand=dontinline,java.lang.Integer::*\n+ *                   compiler.exceptions.TestSpilling\n+ *\/\n+\n+public class TestSpilling {\n+\n+    public static void test() {\n+        int a = Integer.valueOf(42).intValue();\n+        \/\/ After global code motion, the logic below should only be placed in\n+        \/\/ the fall-through path of java.lang.Integer::intValue(). Otherwise,\n+        \/\/ live range splitting might create uses without reaching definitions\n+        \/\/ if 'a' is spilled.\n+        int b = (((a & 0x0000F000)) + 1);\n+        int c = a \/ b + ((a % b > 0) ? 1 : 0);\n+    }\n+\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 10_000; i++) {\n+            test();\n+        }\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/exceptions\/TestSpilling.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"}]}