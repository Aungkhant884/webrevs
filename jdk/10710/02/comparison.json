{"files":[{"patch":"@@ -98,0 +98,1 @@\n+    private final TransTypes transTypes;\n@@ -120,0 +121,1 @@\n+        transTypes = TransTypes.instance(context);\n@@ -3521,4 +3523,2 @@\n-            Type eType = types.skipTypeVars(tree.expr.type, false);\n-            tree.expr.type = types.erasure(eType);\n-            if (eType.isCompound())\n-                tree.expr = make.TypeCast(types.erasure(iterableType), tree.expr);\n+            tree.expr.type = types.erasure(types.skipTypeVars(tree.expr.type, false));\n+            tree.expr = transTypes.coerce(attrEnv, tree.expr, types.erasure(iterableType));\n@@ -3527,1 +3527,1 @@\n-                                           eType,\n+                                           tree.expr.type,\n@@ -3529,0 +3529,1 @@\n+            Assert.check(types.isSameType(types.erasure(types.asSuper(iterator.type.getReturnType(), syms.iteratorType.tsym)), types.erasure(syms.iteratorType)));\n@@ -3530,1 +3531,1 @@\n-                                            types.erasure(types.asSuper(iterator.type.getReturnType(), syms.iteratorType.tsym)),\n+                                            types.erasure(syms.iteratorType),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8295020\n+ * @summary javac emits incorrect code for for-each on an intersection type.\n+ * @run main CovariantIntersectIterator\n+ *\/\n+\n+import java.io.Serializable;\n+import java.util.Iterator;\n+\n+public class CovariantIntersectIterator {\n+\n+    public static void main(String... args) {\n+        int npeCount = 0;\n+        try {\n+            \/\/ JCEnhancedForLoop.expr's erased type is ALREADY an Iterable\n+            \/\/ iterator() comes from expr's erased type (MyIterable) and\n+            \/\/ is called using invokevirtual & returns a covariant type (MyIterable.MyIterator)\n+            for (Object s : (MyIterable & Serializable) null) {}\n+        } catch (NullPointerException e) {\n+            npeCount++;\n+        }\n+        try {\n+            \/\/ JCEnhancedForLoop.expr's erased type is NOT an Iterable\n+            \/\/ iterator() comes from Iterable (expr's erased type casted),\n+            \/\/ will be called by invokeinterface and return Iterator\n+            for (Object s : (MyIterableBase & Iterable<Object>) null) {}\n+        } catch (NullPointerException e) {\n+            npeCount++;\n+        }\n+        if (npeCount != 2) {\n+            throw new AssertionError(\"Expected NPE missing\");\n+        }\n+    }\n+\n+    abstract static class MyIterableBase {\n+        public abstract MyIterable.MyIterator iterator();\n+    }\n+\n+    static class MyIterable extends MyIterableBase implements Iterable<Object> {\n+\n+        class MyIterator implements Iterator<Object> {\n+\n+            public boolean hasNext() {\n+                return false;\n+            }\n+\n+            public Object next() {\n+                return null;\n+            }\n+\n+            public void remove() {}\n+        }\n+\n+        public MyIterator iterator() {\n+            return new MyIterator();\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/foreach\/CovariantIntersectIterator.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"}]}