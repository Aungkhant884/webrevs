{"files":[{"patch":"@@ -0,0 +1,114 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+* @test\n+* @summary Test vectorization of loop induction variable usage in the loop\n+* @requires vm.compiler2.enabled\n+* @requires vm.cpu.features ~= \".*avx2.*\"\n+* @requires os.arch==\"amd64\" | os.arch==\"x86_64\"\n+* @library \/test\/lib \/\n+* @run driver compiler.vectorization.TestPopulateIndex\n+*\/\n+\n+package compiler.vectorization;\n+import compiler.lib.ir_framework.*;\n+import java.util.Random;\n+\n+public class TestPopulateIndex {\n+    private static final int count = 65536;\n+\n+    private int[] idx;\n+    private int[] src;\n+    private int[] dst;\n+    private float[] f;\n+\n+    public static void main(String args[]) {\n+        TestFramework.run(TestPopulateIndex.class);\n+    }\n+\n+    public TestPopulateIndex() {\n+        idx = new int[count];\n+        src = new int[count];\n+        dst = new int[count];\n+        f = new float[count];\n+        Random ran = new Random(0);\n+        for (int i = 0; i < count; i++) {\n+            src[i] = ran.nextInt();\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {\"PopulateIndex\", \">= 1\"})\n+    public void indexArrayFill() {\n+        for (int i = 0; i < count; i++) {\n+            idx[i] = i;\n+        }\n+        checkResultIndexArrayFill();\n+    }\n+\n+    public void checkResultIndexArrayFill() {\n+        for (int i = 0; i < count; ++i) {\n+            int expected = i;\n+            if (idx[i] != expected) {\n+                throw new RuntimeException(\"Invalid result: idx[\" + i + \"] = \" + idx[i] + \" != \" + expected);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {\"PopulateIndex\", \">= 1\"})\n+    public void exprWithIndex1() {\n+        for (int i = 0; i < count; i++) {\n+            dst[i] = src[i] * (i & 7);\n+        }\n+        checkResultExprWithIndex1();\n+    }\n+\n+    public void checkResultExprWithIndex1() {\n+        for (int i = 0; i < count; ++i) {\n+            int expected = src[i] * (i & 7);\n+            if (dst[i] != expected) {\n+                throw new RuntimeException(\"Invalid result: dst[\" + i + \"] = \" + dst[i] + \" != \" + expected);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {\"PopulateIndex\", \">= 1\"})\n+    public void exprWithIndex2() {\n+        for (int i = 0; i < count; i++) {\n+            f[i] = i * i + 100;\n+        }\n+        checkResultExprWithIndex2();\n+    }\n+\n+    public void checkResultExprWithIndex2() {\n+        for (int i = 0; i < count; ++i) {\n+            float expected = i * i  + 100;\n+            if (f[i] != expected) {\n+                throw new RuntimeException(\"Invalid result: f[\" + i + \"] = \" + f[i] + \" != \" + expected);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestPopulateIndex.java","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"}]}