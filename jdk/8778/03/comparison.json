{"files":[{"patch":"@@ -2277,0 +2277,78 @@\n+void C2_MacroAssembler::vpadd(BasicType elem_bt, XMMRegister dst, XMMRegister src1, XMMRegister src2, int vlen_enc) {\n+  assert(UseAVX >= 2, \"required\");\n+#ifdef ASSERT\n+  bool is_bw = ((elem_bt == T_BYTE) || (elem_bt == T_SHORT));\n+  bool is_bw_supported = VM_Version::supports_avx512bw();\n+  if (is_bw && !is_bw_supported) {\n+    assert(vlen_enc != Assembler::AVX_512bit, \"required\");\n+    assert((dst->encoding() < 16) && (src1->encoding() < 16) && (src2->encoding() < 16),\n+           \"XMM register should be 0-15\");\n+  }\n+#endif \/\/ ASSERT\n+  switch (elem_bt) {\n+    case T_BYTE: vpaddb(dst, src1, src2, vlen_enc); return;\n+    case T_SHORT: vpaddw(dst, src1, src2, vlen_enc); return;\n+    case T_INT: vpaddd(dst, src1, src2, vlen_enc); return;\n+    case T_FLOAT: vaddps(dst, src1, src2, vlen_enc); return;\n+    case T_LONG: vpaddq(dst, src1, src2, vlen_enc); return;\n+    case T_DOUBLE: vaddpd(dst, src1, src2, vlen_enc); return;\n+    default: assert(false, \"%s\", type2name(elem_bt));\n+  }\n+}\n+\n+#ifdef _LP64\n+void C2_MacroAssembler::vpbroadcast(BasicType elem_bt, XMMRegister dst, Register src, int vlen_enc) {\n+  assert(UseAVX >= 2, \"required\");\n+  bool is_bw = ((elem_bt == T_BYTE) || (elem_bt == T_SHORT));\n+  bool is_vl = vlen_enc != Assembler::AVX_512bit;\n+  if ((UseAVX > 2) &&\n+      (!is_bw || VM_Version::supports_avx512bw()) &&\n+      (!is_vl || VM_Version::supports_avx512vl())) {\n+    switch (elem_bt) {\n+      case T_BYTE: evpbroadcastb(dst, src, vlen_enc); return;\n+      case T_SHORT: evpbroadcastw(dst, src, vlen_enc); return;\n+      case T_FLOAT: case T_INT: evpbroadcastd(dst, src, vlen_enc); return;\n+      case T_DOUBLE: case T_LONG: evpbroadcastq(dst, src, vlen_enc); return;\n+      default: assert(false, \"%s\", type2name(elem_bt));\n+    }\n+  } else {\n+    assert(vlen_enc != Assembler::AVX_512bit, \"required\");\n+    assert((dst->encoding() < 16),\"XMM register should be 0-15\");\n+    switch (elem_bt) {\n+      case T_BYTE: movdl(dst, src); vpbroadcastb(dst, dst, vlen_enc); return;\n+      case T_SHORT: movdl(dst, src); vpbroadcastw(dst, dst, vlen_enc); return;\n+      case T_INT: movdl(dst, src); vpbroadcastd(dst, dst, vlen_enc); return;\n+      case T_FLOAT: movdl(dst, src); vbroadcastss(dst, dst, vlen_enc); return;\n+      case T_LONG: movdq(dst, src); vpbroadcastq(dst, dst, vlen_enc); return;\n+      case T_DOUBLE: movdq(dst, src); vbroadcastsd(dst, dst, vlen_enc); return;\n+      default: assert(false, \"%s\", type2name(elem_bt));\n+    }\n+  }\n+}\n+#endif\n+\n+void C2_MacroAssembler::vconvert_b2x(BasicType to_elem_bt, XMMRegister dst, XMMRegister src, int vlen_enc) {\n+  switch (to_elem_bt) {\n+    case T_SHORT:\n+      vpmovsxbw(dst, src, vlen_enc);\n+      break;\n+    case T_INT:\n+      vpmovsxbd(dst, src, vlen_enc);\n+      break;\n+    case T_FLOAT:\n+      vpmovsxbd(dst, src, vlen_enc);\n+      vcvtdq2ps(dst, dst, vlen_enc);\n+      break;\n+    case T_LONG:\n+      vpmovsxbq(dst, src, vlen_enc);\n+      break;\n+    case T_DOUBLE: {\n+      int mid_vlen_enc = (vlen_enc == Assembler::AVX_512bit) ? Assembler::AVX_256bit : Assembler::AVX_128bit;\n+      vpmovsxbd(dst, src, mid_vlen_enc);\n+      vcvtdq2pd(dst, dst, vlen_enc);\n+      break;\n+    }\n+    default: assert(false, \"%s\", type2name(to_elem_bt));\n+  }\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":78,"deletions":0,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -135,0 +135,7 @@\n+ \/\/ Covert B2X\n+ void vconvert_b2x(BasicType to_elem_bt, XMMRegister dst, XMMRegister src, int vlen_enc);\n+#ifdef _LP64\n+ void vpbroadcast(BasicType elem_bt, XMMRegister dst, Register src, int vlen_enc);\n+#endif\n+ void vpadd(BasicType elem_bt, XMMRegister dst, XMMRegister src1, XMMRegister src2, int vlen_enc);\n+\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1471,0 +1471,5 @@\n+    case Op_PopulateIndex:\n+      if (!is_LP64 || (UseAVX < 2)) {\n+        return false;\n+      }\n+      break;\n@@ -1814,0 +1819,4 @@\n+    case Op_PopulateIndex:\n+      if (size_in_bits > 256 && !VM_Version::supports_avx512bw()) {\n+        return false;\n+      }\n@@ -6921,22 +6930,1 @@\n-    switch (to_elem_bt) {\n-      case T_SHORT:\n-        __ vpmovsxbw($dst$$XMMRegister, $src$$XMMRegister, vlen_enc);\n-        break;\n-      case T_INT:\n-        __ vpmovsxbd($dst$$XMMRegister, $src$$XMMRegister, vlen_enc);\n-        break;\n-      case T_FLOAT:\n-        __ vpmovsxbd($dst$$XMMRegister, $src$$XMMRegister, vlen_enc);\n-        __ vcvtdq2ps($dst$$XMMRegister, $dst$$XMMRegister, vlen_enc);\n-        break;\n-      case T_LONG:\n-        __ vpmovsxbq($dst$$XMMRegister, $src$$XMMRegister, vlen_enc);\n-        break;\n-      case T_DOUBLE: {\n-        int mid_vlen_enc = (vlen_enc == Assembler::AVX_512bit) ? Assembler::AVX_256bit : Assembler::AVX_128bit;\n-        __ vpmovsxbd($dst$$XMMRegister, $src$$XMMRegister, mid_vlen_enc);\n-        __ vcvtdq2pd($dst$$XMMRegister, $dst$$XMMRegister, vlen_enc);\n-        break;\n-      }\n-      default: assert(false, \"%s\", type2name(to_elem_bt));\n-    }\n+    __ vconvert_b2x(to_elem_bt, $dst$$XMMRegister, $src$$XMMRegister, vlen_enc);\n@@ -8275,0 +8263,39 @@\n+#ifdef _LP64\n+instruct VectorPopulateIndex(vec dst, rRegI src1, immI_1 src2, vec vtmp, rRegP scratch) %{\n+  match(Set dst (PopulateIndex src1 src2));\n+  effect(TEMP dst, TEMP vtmp, TEMP scratch);\n+  format %{ \"vector_populate_index $dst $src1 $src2\\t! using $vtmp and $scratch as TEMP\" %}\n+  ins_encode %{\n+     int vlen_in_bytes = Matcher::vector_length_in_bytes(this);\n+     int vlen_enc = vector_length_encoding(this);\n+     BasicType elem_bt = Matcher::vector_element_basic_type(this);\n+     assert($src2$$constant == 1, \"required\");\n+     __ vpbroadcast(elem_bt, $vtmp$$XMMRegister, $src1$$Register, vlen_enc);\n+     __ load_iota_indices($dst$$XMMRegister, $scratch$$Register, vlen_in_bytes\/type2aelembytes(elem_bt));\n+     if (elem_bt != T_BYTE) {\n+       __ vconvert_b2x(elem_bt, $dst$$XMMRegister, $dst$$XMMRegister, vlen_enc);\n+     }\n+     __ vpadd(elem_bt, $dst$$XMMRegister, $dst$$XMMRegister, $vtmp$$XMMRegister, vlen_enc);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+instruct VectorPopulateLIndex(vec dst, rRegL src1, immI_1 src2, vec vtmp, rRegP scratch) %{\n+  match(Set dst (PopulateIndex src1 src2));\n+  effect(TEMP dst, TEMP vtmp, TEMP scratch);\n+  format %{ \"vector_populate_index $dst $src1 $src2\\t! using $vtmp and $scratch as TEMP\" %}\n+  ins_encode %{\n+     int vlen_in_bytes = Matcher::vector_length_in_bytes(this);\n+     int vlen_enc = vector_length_encoding(this);\n+     BasicType elem_bt = Matcher::vector_element_basic_type(this);\n+     assert($src2$$constant == 1, \"required\");\n+     __ vpbroadcast(elem_bt, $vtmp$$XMMRegister, $src1$$Register, vlen_enc);\n+     __ load_iota_indices($dst$$XMMRegister, $scratch$$Register, vlen_in_bytes\/type2aelembytes(elem_bt));\n+     if (elem_bt != T_BYTE) {\n+       __ vconvert_b2x(elem_bt, $dst$$XMMRegister, $dst$$XMMRegister, vlen_enc);\n+     }\n+     __ vpadd(elem_bt, $dst$$XMMRegister, $dst$$XMMRegister, $vtmp$$XMMRegister, vlen_enc);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+#endif\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":49,"deletions":22,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -0,0 +1,114 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+* @test\n+* @summary Test vectorization of loop induction variable usage in the loop\n+* @requires vm.compiler2.enabled\n+* @requires (os.simpleArch == \"x64\" & vm.cpu.features ~= \".*avx2.*\") |\n+*           (os.simpleArch == \"aarch64\" & vm.cpu.features ~= \".*sve.*\")\n+* @library \/test\/lib \/\n+* @run driver compiler.vectorization.TestPopulateIndex\n+*\/\n+\n+package compiler.vectorization;\n+import compiler.lib.ir_framework.*;\n+import java.util.Random;\n+\n+public class TestPopulateIndex {\n+    private static final int count = 65536;\n+\n+    private int[] idx;\n+    private int[] src;\n+    private int[] dst;\n+    private float[] f;\n+\n+    public static void main(String args[]) {\n+        TestFramework.run(TestPopulateIndex.class);\n+    }\n+\n+    public TestPopulateIndex() {\n+        idx = new int[count];\n+        src = new int[count];\n+        dst = new int[count];\n+        f = new float[count];\n+        Random ran = new Random(0);\n+        for (int i = 0; i < count; i++) {\n+            src[i] = ran.nextInt();\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {\"PopulateIndex\", \">= 1\"})\n+    public void indexArrayFill() {\n+        for (int i = 0; i < count; i++) {\n+            idx[i] = i;\n+        }\n+        checkResultIndexArrayFill();\n+    }\n+\n+    public void checkResultIndexArrayFill() {\n+        for (int i = 0; i < count; ++i) {\n+            int expected = i;\n+            if (idx[i] != expected) {\n+                throw new RuntimeException(\"Invalid result: idx[\" + i + \"] = \" + idx[i] + \" != \" + expected);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {\"PopulateIndex\", \">= 1\"})\n+    public void exprWithIndex1() {\n+        for (int i = 0; i < count; i++) {\n+            dst[i] = src[i] * (i & 7);\n+        }\n+        checkResultExprWithIndex1();\n+    }\n+\n+    public void checkResultExprWithIndex1() {\n+        for (int i = 0; i < count; ++i) {\n+            int expected = src[i] * (i & 7);\n+            if (dst[i] != expected) {\n+                throw new RuntimeException(\"Invalid result: dst[\" + i + \"] = \" + dst[i] + \" != \" + expected);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {\"PopulateIndex\", \">= 1\"})\n+    public void exprWithIndex2() {\n+        for (int i = 0; i < count; i++) {\n+            f[i] = i * i + 100;\n+        }\n+        checkResultExprWithIndex2();\n+    }\n+\n+    public void checkResultExprWithIndex2() {\n+        for (int i = 0; i < count; ++i) {\n+            float expected = i * i  + 100;\n+            if (f[i] != expected) {\n+                throw new RuntimeException(\"Invalid result: f[\" + i + \"] = \" + f[i] + \" != \" + expected);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestPopulateIndex.java","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"}]}