{"files":[{"patch":"@@ -202,13 +202,0 @@\n-#ifdef ASSERT\n-    \/\/ Cross-section branches only work if the\n-    \/\/ intermediate section boundaries are frozen.\n-    if (target_sect != branch_sect) {\n-      for (int n = MIN2(target_sect, branch_sect),\n-               nlimit = (target_sect + branch_sect) - n;\n-           n < nlimit; n++) {\n-        CodeSection* cs = cb->code_section(n);\n-        assert(cs->is_frozen(), \"cross-section branch needs stable offsets\");\n-      }\n-    }\n-#endif \/\/ASSERT\n-\n","filename":"src\/hotspot\/share\/asm\/assembler.cpp","additions":0,"deletions":13,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -179,22 +179,0 @@\n-void CodeBuffer::freeze_section(CodeSection* cs) {\n-  CodeSection* next_cs = (cs == consts())? NULL: code_section(cs->index()+1);\n-  csize_t frozen_size = cs->size();\n-  if (next_cs != NULL) {\n-    frozen_size = next_cs->align_at_start(frozen_size);\n-  }\n-  address old_limit = cs->limit();\n-  address new_limit = cs->start() + frozen_size;\n-  relocInfo* old_locs_limit = cs->locs_limit();\n-  relocInfo* new_locs_limit = cs->locs_end();\n-  \/\/ Patch the limits.\n-  cs->_limit = new_limit;\n-  cs->_locs_limit = new_locs_limit;\n-  cs->_frozen = true;\n-  if (next_cs != NULL && !next_cs->is_allocated() && !next_cs->is_frozen()) {\n-    \/\/ Give remaining buffer space to the following section.\n-    next_cs->initialize(new_limit, old_limit - new_limit);\n-    next_cs->initialize_shared_locs(new_locs_limit,\n-                                    old_locs_limit - new_locs_limit);\n-  }\n-}\n-\n@@ -509,12 +487,0 @@\n-      #ifdef ASSERT\n-      if (prev_cs != NULL && prev_cs->is_frozen() && n < (SECT_LIMIT - 1)) {\n-        \/\/ Make sure the ends still match up.\n-        \/\/ This is important because a branch in a frozen section\n-        \/\/ might target code in a following section, via a Label,\n-        \/\/ and without a relocation record.  See Label::patch_instructions.\n-        address dest_start = buf+buf_offset;\n-        csize_t start2start = cs->start() - prev_cs->start();\n-        csize_t dest_start2start = dest_start - prev_dest_cs->start();\n-        assert(start2start == dest_start2start, \"cannot stretch frozen sect\");\n-      }\n-      #endif \/\/ASSERT\n@@ -899,3 +865,0 @@\n-    for (int n = 0; n < (int)SECT_LIMIT; n++) {\n-      guarantee(!code_section(n)->is_frozen(), \"resizing not allowed when frozen\");\n-    }\n@@ -1227,3 +1190,2 @@\n-  tty->print_cr(\" %7s.code = \" PTR_FORMAT \" : \" PTR_FORMAT \" : \" PTR_FORMAT \" (%d of %d)%s\",\n-                name, p2i(start()), p2i(end()), p2i(limit()), size(), capacity(),\n-                is_frozen()? \" [frozen]\": \"\");\n+  tty->print_cr(\" %7s.code = \" PTR_FORMAT \" : \" PTR_FORMAT \" : \" PTR_FORMAT \" (%d of %d)\",\n+                name, p2i(start()), p2i(end()), p2i(limit()), size(), capacity());\n","filename":"src\/hotspot\/share\/asm\/codeBuffer.cpp","additions":2,"deletions":40,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -95,1 +95,0 @@\n-  bool        _frozen;          \/\/ no more expansion of this section\n@@ -112,1 +111,0 @@\n-    _frozen        = false;\n@@ -164,1 +162,0 @@\n-  csize_t     locs_remaining()const { return (csize_t)(_locs_limit - _locs_end); }\n@@ -169,1 +166,0 @@\n-  bool        is_frozen() const     { return _frozen; }\n@@ -187,2 +183,0 @@\n-  void    set_mark_off(int offset)  { assert(contains2(offset+_start),\"not in codeBuffer\");\n-                                      _mark = offset + _start; }\n@@ -262,4 +256,0 @@\n-  \/\/ Mark a section frozen.  Assign its remaining space to\n-  \/\/ the following section.  It will never expand after this point.\n-  inline void freeze();         \/\/  { _outer->freeze_section(this); }\n-\n@@ -466,2 +456,0 @@\n-  void freeze_section(CodeSection* cs);\n-\n@@ -651,6 +639,0 @@\n-\n-  \/\/ Print the comment associated with offset on stream, if there is one.\n-  virtual void print_block_comment(outputStream* stream, address block_begin) {\n-    intptr_t offset = (intptr_t)(block_begin - _total_start);  \/\/ I assume total_start is not correct for all code sections.\n-    _code_strings.print_block_comment(stream, offset);\n-  }\n@@ -682,3 +664,0 @@\n-  \/\/ Transform an address from the code in this code buffer to a specified code buffer\n-  address transform_address(const CodeBuffer &cb, address addr) const;\n-\n@@ -713,5 +692,0 @@\n-\n-inline void CodeSection::freeze() {\n-  _outer->freeze_section(this);\n-}\n-\n","filename":"src\/hotspot\/share\/asm\/codeBuffer.hpp","additions":0,"deletions":26,"binary":false,"changes":26,"status":"modified"}]}