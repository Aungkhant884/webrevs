{"files":[{"patch":"@@ -44,0 +44,1 @@\n+#include \"runtime\/globals_extension.hpp\"\n@@ -1092,0 +1093,4 @@\n+  if (mapinfo->header()->magic() == CDS_DYNAMIC_ARCHIVE_MAGIC) {\n+    mapinfo->set_header_base_archive_name_size(strlen(Arguments::GetSharedArchivePath()) + 1);\n+    mapinfo->set_header_base_archive_is_default(FLAG_IS_DEFAULT(SharedArchiveFile));\n+  }\n@@ -1093,0 +1098,2 @@\n+  \/\/ After this point, we should not write any data into mapinfo->header() since this\n+  \/\/ would corrupt its checksum we have calculated before.\n","filename":"src\/hotspot\/share\/memory\/archiveBuilder.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -56,1 +56,0 @@\n-#include \"runtime\/globals_extension.hpp\"\n@@ -1239,7 +1238,0 @@\n-  char* base_archive_name = NULL;\n-  if (header()->magic() == CDS_DYNAMIC_ARCHIVE_MAGIC) {\n-    base_archive_name = (char*)Arguments::GetSharedArchivePath();\n-    header()->set_base_archive_name_size(strlen(base_archive_name) + 1);\n-    header()->set_base_archive_is_default(FLAG_IS_DEFAULT(SharedArchiveFile));\n-  }\n-\n@@ -1248,2 +1240,6 @@\n-  if (base_archive_name != NULL) {\n-    write_bytes(base_archive_name, header()->base_archive_name_size());\n+\n+  if (header()->magic() == CDS_DYNAMIC_ARCHIVE_MAGIC) {\n+    char* base_archive_name = (char*)Arguments::GetSharedArchivePath();\n+    if (base_archive_name != NULL) {\n+      write_bytes(base_archive_name, header()->base_archive_name_size());\n+    }\n","filename":"src\/hotspot\/share\/memory\/filemap.cpp","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -244,1 +244,1 @@\n-  unsigned int magic() const {return _magic;}\n+  unsigned int magic()                    const { return _magic; }\n@@ -386,0 +386,1 @@\n+  unsigned int magic()         const { return header()->magic(); }\n@@ -393,0 +394,3 @@\n+  void   set_header_base_archive_name_size(size_t size)      { header()->set_base_archive_name_size(size); }\n+  void   set_header_base_archive_is_default(bool is_default) { header()->set_base_archive_is_default(is_default); }\n+\n","filename":"src\/hotspot\/share\/memory\/filemap.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2021, Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8264413\n+ * @summary test dynamic cds archive when turning on VerifySharedSpaces\n+ * @requires vm.cds\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @compile ..\/test-classes\/Hello.java\n+ * @compile ..\/test-classes\/HelloMore.java\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. VerifyWithDynamicArchive\n+ *\/\n+\n+public class VerifyWithDynamicArchive extends DynamicArchiveTestBase {\n+\n+    public static void main(String[] args) throws Exception {\n+        runTest(VerifyWithDynamicArchive::testDefaultBase);\n+    }\n+\n+    static void testDefaultBase() throws Exception {\n+        String topArchiveName = getNewArchiveName(\"top\");\n+        doTest(topArchiveName);\n+    }\n+\n+    private static void doTest(String topArchiveName) throws Exception {\n+        String appJar = JarBuilder.getOrCreateHelloJar();\n+\n+        dump(topArchiveName,\n+             \"-Xlog:cds\",\n+             \"-Xlog:cds+dynamic=debug\",\n+             \"-cp\", appJar, \"Hello\")\n+            .assertNormalExit(output -> {\n+                    output.shouldContain(\"Written dynamic archive 0x\");\n+                });\n+\n+        run(topArchiveName,\n+            \"-Xlog:class+load\",\n+            \"-Xlog:cds+dynamic=debug,cds=debug\",\n+            \"-XX:+VerifySharedSpaces\",\n+            \"-cp\", appJar,\n+            \"Hello\")\n+            .assertNormalExit(output -> {\n+                    output.shouldContain(\"Hello source: shared objects file\")\n+                          .shouldNotContain(\"Header checksum verification failed\")\n+                          .shouldHaveExitValue(0);\n+                });\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/VerifyWithDynamicArchive.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"}]}