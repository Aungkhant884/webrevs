{"files":[{"patch":"@@ -166,0 +166,2 @@\n+<h4 id=\"branch-protection\">Branch Protection<\/h4>\n+<p>In order to use Branch Protection features in the VM, <code>--enable-branch-protection<\/code> must be used. This option requires C++ compiler support (GCC 9.1.0+ or Clang 10+). The resulting build can be run on both machines with and without support for branch protection in hardware. Branch Protection is only supported for Linux targets.<\/p>\n@@ -217,1 +219,1 @@\n-<p>It's possible to build both Windows and Linux binaries from WSL. To build Windows binaries, you must use a Windows boot JDK (located in a Windows-accessible directory). To build Linux binaries, you must use a Linux boot JDK. The default behavior is to build for Windows. To build for Linux, pass <code>--build=x86_64-unknown-linux-gnu --host=x86_64-unknown-linux-gnu<\/code> to <code>configure<\/code>.<\/p>\n+<p>It's possible to build both Windows and Linux binaries from WSL. To build Windows binaries, you must use a Windows boot JDK (located in a Windows-accessible directory). To build Linux binaries, you must use a Linux boot JDK. The default behavior is to build for Windows. To build for Linux, pass <code>--build=x86_64-unknown-linux-gnu --openjdk-target=x86_64-unknown-linux-gnu<\/code> to <code>configure<\/code>.<\/p>\n@@ -571,1 +573,2 @@\n-<p>You <em>must<\/em> specify the target platform when cross-compiling. Doing so will also automatically turn the build into a cross-compiling mode. The simplest way to do this is to use the <code>--openjdk-target<\/code> argument, e.g. <code>--openjdk-target=arm-linux-gnueabihf<\/code>. or <code>--openjdk-target=aarch64-oe-linux<\/code>. This will automatically set the <code>--build<\/code>, <code>--host<\/code> and <code>--target<\/code> options for autoconf, which can otherwise be confusing. (In autoconf terminology, the &quot;target&quot; is known as &quot;host&quot;, and &quot;target&quot; is used for building a Canadian cross-compiler.)<\/p>\n+<p>You <em>must<\/em> specify the target platform when cross-compiling. Doing so will also automatically turn the build into a cross-compiling mode. The simplest way to do this is to use the <code>--openjdk-target<\/code> argument, e.g. <code>--openjdk-target=arm-linux-gnueabihf<\/code>. or <code>--openjdk-target=aarch64-oe-linux<\/code>. This will automatically set the <code>--host<\/code> and <code>--target<\/code> options for autoconf, which can otherwise be confusing. (In autoconf terminology, the &quot;target&quot; is known as &quot;host&quot;, and &quot;target&quot; is used for building a Canadian cross-compiler.)<\/p>\n+<p>If <code>--build<\/code> has not been explicitly passed to configure, <code>--openjdk-target<\/code> will autodetect the build platform and internally set the flag automatically, otherwise the platform that was explicitly passed to <code>--build<\/code> will be used instead.<\/p>\n","filename":"doc\/building.html","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -247,2 +247,2 @@\n-`--build=x86_64-unknown-linux-gnu --host=x86_64-unknown-linux-gnu` to\n-`configure`.\n+`--build=x86_64-unknown-linux-gnu --openjdk-target=x86_64-unknown-linux-gnu`\n+to `configure`.\n@@ -385,3 +385,3 @@\n-For aarch64 machines running Windows the minimum accepted version is Visual Studio 2019 \n-(16.8 or higher). For all other platforms the minimum accepted version of \n-Visual Studio is 2017. Older versions will not be accepted by `configure` and will \n+For aarch64 machines running Windows the minimum accepted version is Visual Studio 2019\n+(16.8 or higher). For all other platforms the minimum accepted version of\n+Visual Studio is 2017. Older versions will not be accepted by `configure` and will\n@@ -989,1 +989,1 @@\n-This will automatically set the `--build`, `--host` and `--target` options for\n+This will automatically set the `--host` and `--target` options for\n@@ -994,0 +994,5 @@\n+If `--build` has not been explicitly passed to configure, `--openjdk-target`\n+will autodetect the build platform and internally set the flag automatically,\n+otherwise the platform that was explicitly passed to `--build` will be used\n+instead.\n+\n","filename":"doc\/building.md","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -277,1 +277,1 @@\n-      conf_legacy_crosscompile=\"$conf_legacy_crosscompile $conf_option\" ;;\n+      conf_build_set=true ;;\n@@ -279,1 +279,1 @@\n-      conf_legacy_crosscompile=\"$conf_legacy_crosscompile $conf_option\" ;;\n+      conf_incompatible_crosscompile=\"$conf_incompatible_crosscompile $conf_option\" ;;\n@@ -281,1 +281,1 @@\n-      conf_legacy_crosscompile=\"$conf_legacy_crosscompile $conf_option\" ;;\n+      conf_incompatible_crosscompile=\"$conf_incompatible_crosscompile $conf_option\" ;;\n@@ -290,1 +290,1 @@\n-if test \"x$conf_legacy_crosscompile\" != \"x\"; then\n+if test \"x$conf_incompatible_crosscompile\" != \"x\"; then\n@@ -292,4 +292,4 @@\n-    echo \"Error: Specifying --openjdk-target together with autoconf\"\n-    echo \"legacy cross-compilation flags is not supported.\"\n-    echo \"You specified: --openjdk-target=$conf_openjdk_target and $conf_legacy_crosscompile.\"\n-    echo \"The recommended use is just --openjdk-target.\"\n+    echo \"Error: --openjdk-target was specified together with\"\n+    echo \"incompatible autoconf cross-compilation flags.\"\n+    echo \"You specified: --openjdk-target=$conf_openjdk_target and $conf_incompatible_crosscompile.\"\n+    echo \"It is recommended that you only use --openjdk-target.\"\n@@ -298,2 +298,4 @@\n-    echo \"Warning: You are using legacy autoconf cross-compilation flags.\"\n-    echo \"It is recommended that you use --openjdk-target instead.\"\n+    echo \"Warning: You are using misleading autoconf cross-compilation flag(s).\"\n+    echo \"This is not encouraged as use of such flags during building can\"\n+    echo \"quickly become confusing.\"\n+    echo \"It is highly recommended that you use --openjdk-target instead.\"\n@@ -305,2 +307,7 @@\n-  conf_build_platform=`sh $conf_script_dir\/build-aux\/config.guess`\n-  conf_processed_arguments=(\"--build=$conf_build_platform\" \"--host=$conf_openjdk_target\" \"--target=$conf_openjdk_target\" \"${conf_processed_arguments[@]}\")\n+  conf_processed_arguments=(\"--host=$conf_openjdk_target\" \"--target=$conf_openjdk_target\" \"${conf_processed_arguments[@]}\")\n+\n+  # If --build has been explicitly set don't override that flag with our own\n+  if test \"x$conf_build_set\" != xtrue; then\n+    conf_build_platform=`sh $conf_script_dir\/build-aux\/config.guess`\n+    conf_processed_arguments=(\"--build=$conf_build_platform\" \"${conf_processed_arguments[@]}\")\n+  fi\n@@ -344,1 +351,3 @@\n-                          --build=<current platform>\n+                          --build=<current platform>, or the platform you\n+                          have provided if you have explicitly passed\n+                          --build to configure\n","filename":"make\/autoconf\/configure","additions":22,"deletions":13,"binary":false,"changes":35,"status":"modified"}]}