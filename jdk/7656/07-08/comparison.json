{"files":[{"patch":"@@ -1,1072 +1,458 @@\n-<!DOCTYPE html>\r\n-<html xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\" lang=\"\" xml:lang=\"\">\r\n-<head>\r\n-  <meta charset=\"utf-8\" \/>\r\n-  <meta name=\"generator\" content=\"pandoc\" \/>\r\n-  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" \/>\r\n-  <title>HotSpot Coding Style<\/title>\r\n-  <style>\r\n-    code{white-space: pre-wrap;}\r\n-    span.smallcaps{font-variant: small-caps;}\r\n-    span.underline{text-decoration: underline;}\r\n-    div.column{display: inline-block; vertical-align: top; width: 50%;}\r\n-    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\r\n-    ul.task-list{list-style: none;}\r\n-    .display.math{display: block; text-align: center; margin: 0.5rem auto;}\r\n-  <\/style>\r\n-  <link rel=\"stylesheet\" href=\"..\/make\/data\/docs-resources\/resources\/jdk-default.css\" \/>\r\n-  <!--[if lt IE 9]>\r\n-    <script src=\"\/\/cdnjs.cloudflare.com\/ajax\/libs\/html5shiv\/3.7.3\/html5shiv-printshiv.min.js\"><\/script>\r\n-  <![endif]-->\r\n-<\/head>\r\n-<body>\r\n-<header id=\"title-block-header\">\r\n-<h1 class=\"title\">HotSpot Coding Style<\/h1>\r\n-<\/header>\r\n-<nav id=\"TOC\" role=\"doc-toc\">\r\n-<ul>\r\n-<li><a href=\"#introduction\">Introduction<\/a>\r\n-<ul>\r\n-<li><a href=\"#why-care-about-style\">Why Care About Style?<\/a><\/li>\r\n-<li><a href=\"#counterexamples-and-updates\">Counterexamples and\r\n-Updates<\/a><\/li>\r\n-<\/ul><\/li>\r\n-<li><a href=\"#structure-and-formatting\">Structure and Formatting<\/a>\r\n-<ul>\r\n-<li><a href=\"#factoring-and-class-design\">Factoring and Class\r\n-Design<\/a><\/li>\r\n-<li><a href=\"#source-files\">Source Files<\/a><\/li>\r\n-<li><a href=\"#jtreg-tests\">JTReg Tests<\/a><\/li>\r\n-<li><a href=\"#naming\">Naming<\/a><\/li>\r\n-<li><a href=\"#commenting\">Commenting<\/a><\/li>\r\n-<li><a href=\"#macros\">Macros<\/a><\/li>\r\n-<li><a href=\"#whitespace\">Whitespace<\/a><\/li>\r\n-<li><a href=\"#miscellaneous\">Miscellaneous<\/a><\/li>\r\n-<\/ul><\/li>\r\n-<li><a href=\"#use-of-c-features\">Use of C++ Features<\/a>\r\n-<ul>\r\n-<li><a href=\"#error-handling\">Error Handling<\/a><\/li>\r\n-<li><a href=\"#rtti-runtime-type-information\">RTTI (Runtime Type\r\n-Information)<\/a><\/li>\r\n-<li><a href=\"#memory-allocation\">Memory Allocation<\/a><\/li>\r\n-<li><a href=\"#class-inheritance\">Class Inheritance<\/a><\/li>\r\n-<li><a href=\"#namespaces\">Namespaces<\/a><\/li>\r\n-<li><a href=\"#c-standard-library\">C++ Standard Library<\/a><\/li>\r\n-<li><a href=\"#type-deduction\">Type Deduction<\/a><\/li>\r\n-<li><a href=\"#expression-sfinae\">Expression SFINAE<\/a><\/li>\r\n-<li><a href=\"#enum\">enum<\/a><\/li>\r\n-<li><a href=\"#thread_local\">thread_local<\/a><\/li>\r\n-<li><a href=\"#nullptr\">nullptr<\/a><\/li>\r\n-<li><a href=\"#atomic\">&lt;atomic&gt;<\/a><\/li>\r\n-<li><a href=\"#uniform-initialization\">Uniform Initialization<\/a><\/li>\r\n-<li><a href=\"#local-function-objects\">Local Function Objects<\/a><\/li>\r\n-<li><a href=\"#additional-permitted-features\">Additional Permitted\r\n-Features<\/a><\/li>\r\n-<li><a href=\"#excluded-features\">Excluded Features<\/a><\/li>\r\n-<li><a href=\"#undecided-features\">Undecided Features<\/a><\/li>\r\n-<\/ul><\/li>\r\n-<\/ul>\r\n-<\/nav>\r\n-<h2 id=\"introduction\">Introduction<\/h2>\r\n-<p>This is a collection of rules, guidelines, and suggestions for\r\n-writing HotSpot code. Following these will help new code fit in with\r\n-existing HotSpot code, making it easier to read and maintain. Failure to\r\n-follow these guidelines may lead to discussion during code reviews, if\r\n-not outright rejection of a change.<\/p>\r\n-<h3 id=\"why-care-about-style\">Why Care About Style?<\/h3>\r\n-<p>Some programmers seem to have lexers and even C preprocessors\r\n-installed directly behind their eyeballs. The rest of us require code\r\n-that is not only functionally correct but also easy to read. More than\r\n-that, since there is no one style for easy-to-read code, and since a\r\n-mashup of many styles is just as confusing as no style at all, it is\r\n-important for coders to be conscious of the many implicit stylistic\r\n-choices that historically have gone into the HotSpot code base.<\/p>\r\n-<p>Some of these guidelines are driven by the cross-platform\r\n-requirements for HotSpot. Shared code must work on a variety of\r\n-platforms, and may encounter deficiencies in some. Using platform\r\n-conditionalization in shared code is usually avoided, while shared code\r\n-is strongly preferred to multiple platform-dependent implementations, so\r\n-some language features may be recommended against.<\/p>\r\n-<p>Some of the guidelines here are relatively arbitrary choices among\r\n-equally plausible alternatives. The purpose of stating and enforcing\r\n-these rules is largely to provide a consistent look to the code. That\r\n-consistency makes the code more readable by avoiding non-functional\r\n-distractions from the interesting functionality.<\/p>\r\n-<p>When changing pre-existing code, it is reasonable to adjust it to\r\n-match these conventions. Exception: If the pre-existing code clearly\r\n-conforms locally to its own peculiar conventions, it is not worth\r\n-reformatting the whole thing. Also consider separating changes that make\r\n-extensive stylistic updates from those which make functional\r\n-changes.<\/p>\r\n-<h3 id=\"counterexamples-and-updates\">Counterexamples and Updates<\/h3>\r\n-<p>Many of the guidelines mentioned here have (sometimes widespread)\r\n-counterexamples in the HotSpot code base. Finding a counterexample is\r\n-not sufficient justification for new code to follow the counterexample\r\n-as a precedent, since readers of your code will rightfully expect your\r\n-code to follow the greater bulk of precedents documented here.<\/p>\r\n-<p>Occasionally a guideline mentioned here may be just out of synch with\r\n-the actual HotSpot code base. If you find that a guideline is\r\n-consistently contradicted by a large number of counterexamples, please\r\n-bring it up for discussion and possible change. The architectural rule,\r\n-of course, is \"When in Rome do as the Romans\". Sometimes in the suburbs\r\n-of Rome the rules are a little different; these differences can be\r\n-pointed out here.<\/p>\r\n-<p>Proposed changes should be discussed on the <a\r\n-href=\"mailto:hotspot-dev@openjdk.java.net\">HotSpot Developers<\/a>\r\n-mailing list. Changes are likely to be cautious and incremental, since\r\n-HotSpot coders have been using these guidelines for years.<\/p>\r\n-<p>Substantive changes are approved by <a\r\n-href=\"https:\/\/en.wikipedia.org\/wiki\/Rough_consensus\">rough consensus<\/a>\r\n-of the <a href=\"https:\/\/openjdk.java.net\/census#hotspot\">HotSpot\r\n-Group<\/a> Members. The Group Lead determines whether consensus has been\r\n-reached.<\/p>\r\n-<p>Editorial changes (changes that only affect the description of\r\n-HotSpot style, not its substance) do not require the full consensus\r\n-gathering process. The normal HotSpot pull request process may be used\r\n-for editorial changes, with the additional requirement that the\r\n-requisite reviewers are also HotSpot Group Members.<\/p>\r\n-<h2 id=\"structure-and-formatting\">Structure and Formatting<\/h2>\r\n-<h3 id=\"factoring-and-class-design\">Factoring and Class Design<\/h3>\r\n-<ul>\r\n-<li><p>Group related code together, so readers can concentrate on one\r\n-section of one file.<\/p><\/li>\r\n-<li><p>Classes are the primary code structuring mechanism. Place related\r\n-functionality in a class, or a set of related classes. Use of either\r\n-namespaces or public non-member functions is rare in HotSpot code.\r\n-Static non-member functions are not uncommon.<\/p><\/li>\r\n-<li><p>If a class <code>FooBar<\/code> is going to be used in more than\r\n-one place, put it a file named fooBar.hpp and fooBar.cpp. If the class\r\n-is a sidekick to a more important class <code>BazBat<\/code>, it can go\r\n-in bazBat.hpp.<\/p><\/li>\r\n-<li><p>Put a member function <code>FooBar::bang<\/code> into the same\r\n-file that defined <code>FooBar<\/code>, or its associated <em>.inline.hpp\r\n-or <\/em>.cpp file.<\/p><\/li>\r\n-<li><p>Use public accessor functions for member variables accessed\r\n-outside the class.<\/p><\/li>\r\n-<li><p>Assign names to constant literals and use the names\r\n-instead.<\/p><\/li>\r\n-<li><p>Keep functions small, a screenful at most. Split out chunks of\r\n-logic into file-local classes or static functions if needed.<\/p><\/li>\r\n-<li><p>Factor away nonessential complexity into local inline helper\r\n-functions and helper classes.<\/p><\/li>\r\n-<li><p>Think clearly about internal invariants that apply to each class,\r\n-and document them in the form of asserts within member\r\n-functions.<\/p><\/li>\r\n-<li><p>Make simple, self-evident contracts for member functions. If you\r\n-cannot communicate a simple contract, redesign the class.<\/p><\/li>\r\n-<li><p>Implement classes as if expecting rough usage by clients. Check\r\n-for incorrect usage of a class using <code>assert(...)<\/code>,\r\n-<code>guarantee(...)<\/code>, <code>ShouldNotReachHere()<\/code> and\r\n-comments wherever needed. Performance is almost never a reason to omit\r\n-asserts.<\/p><\/li>\r\n-<li><p>When possible, design as if for reusability. This forces a clear\r\n-design of the class's externals, and clean hiding of its\r\n-internals.<\/p><\/li>\r\n-<li><p>Initialize all variables and data structures to a known state. If\r\n-a class has a constructor, initialize it there.<\/p><\/li>\r\n-<li><p>Do no optimization before its time. Prove the need to\r\n-optimize.<\/p><\/li>\r\n-<li><p>When you must defactor to optimize, preserve as much structure as\r\n-possible. If you must hand-inline some name, label the local copy with\r\n-the original name.<\/p><\/li>\r\n-<li><p>If you need to use a hidden detail (e.g., a structure offset),\r\n-name it (as a constant or function) in the class that owns it.<\/p><\/li>\r\n-<li><p>Don't use the Copy and Paste keys to replicate more than a couple\r\n-lines of code. Name what you must repeat.<\/p><\/li>\r\n-<li><p>If a class needs a member function to change a user-visible\r\n-attribute, the change should be done with a \"setter\" accessor matched to\r\n-the simple \"getter\".<\/p><\/li>\r\n-<\/ul>\r\n-<h3 id=\"source-files\">Source Files<\/h3>\r\n-<ul>\r\n-<li><p>All source files must have a globally unique basename. The build\r\n-system depends on this uniqueness.<\/p><\/li>\r\n-<li><p>Do not put non-trivial function implementations in .hpp files. If\r\n-the implementation depends on other .hpp files, put it in a .cpp or a\r\n-.inline.hpp file.<\/p><\/li>\r\n-<li><p>.inline.hpp files should only be included in .cpp or .inline.hpp\r\n-files.<\/p><\/li>\r\n-<li><p>All .inline.hpp files should include their corresponding .hpp\r\n-file as the first include line. Declarations needed by other files\r\n-should be put in the .hpp file, and not in the .inline.hpp file. This\r\n-rule exists to resolve problems with circular dependencies between\r\n-.inline.hpp files.<\/p><\/li>\r\n-<li><p>All .cpp files include precompiled.hpp as the first include\r\n-line.<\/p><\/li>\r\n-<li><p>precompiled.hpp is just a build time optimization, so don't rely\r\n-on it to resolve include problems.<\/p><\/li>\r\n-<li><p>Keep the include lines alphabetically sorted.<\/p><\/li>\r\n-<li><p>Put conditional inclusions (<code>#if ...<\/code>) at the end of\r\n-the include list.<\/p><\/li>\r\n-<\/ul>\r\n-<h3 id=\"jtreg-tests\">JTReg Tests<\/h3>\r\n-<ul>\r\n-<li><p>JTReg tests should have meaningful names.<\/p><\/li>\r\n-<li><p>JTReg tests associated with specific bugs should be tagged with\r\n-the <code>@bug<\/code> keyword in the test description.<\/p><\/li>\r\n-<li><p>JTReg tests should be organized by component or feature under\r\n-<code>test\/<\/code>, in a directory hierarchy that generally follows that\r\n-of the <code>src\/<\/code> directory. There may be additional\r\n-subdirectories to further categorize tests by feature. This structure\r\n-makes it easy to run a collection of tests associated with a specific\r\n-feature by specifying the associated directory as the source of the\r\n-tests to run.<\/p>\r\n-<ul>\r\n-<li>Some (older) tests use the associated bug number in the directory\r\n-name, the test name, or both. That naming style should no longer be\r\n-used, with existing tests using that style being candidates for\r\n-migration.<\/li>\r\n-<\/ul><\/li>\r\n-<\/ul>\r\n-<h3 id=\"naming\">Naming<\/h3>\r\n-<ul>\r\n-<li><p>The length of a name may be correlated to the size of its scope.\r\n-In particular, short names (even single letter names) may be fine in a\r\n-small scope, but are usually inappropriate for larger scopes.<\/p><\/li>\r\n-<li><p>Prefer whole words rather than abbreviations, unless the\r\n-abbreviation is more widely used than the long form in the code's\r\n-domain.<\/p><\/li>\r\n-<li><p>Choose names consistently. Do not introduce spurious variations.\r\n-Abbreviate corresponding terms to a consistent length.<\/p><\/li>\r\n-<li><p>Global names must be unique, to avoid <a\r\n-href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/definition\"\r\n-title=\"One Definition Rule\">One Definition Rule<\/a> (ODR) violations. A\r\n-common prefixing scheme for related global names is often used. (This is\r\n-instead of using namespaces, which are mostly avoided in\r\n-HotSpot.)<\/p><\/li>\r\n-<li><p>Don't give two names to the semantically same thing. But use\r\n-different names for semantically different things, even if they are\r\n-representationally the same. (So use meaningful <code>typedef<\/code> or\r\n-template alias names where appropriate.)<\/p><\/li>\r\n-<li><p>When choosing names, avoid categorical nouns like \"variable\",\r\n-\"field\", \"parameter\", \"value\", and verbs like \"compute\", \"get\".\r\n-(<code>storeValue(int param)<\/code> is bad.)<\/p><\/li>\r\n-<li><p>Type names and global names should use mixed-case with the first\r\n-letter of each word capitalized (<code>FooBar<\/code>).<\/p><\/li>\r\n-<li><p>Embedded abbreviations in otherwise mixed-case names are usually\r\n-capitalized entirely rather than being treated as a single word with\r\n-only the initial letter capitalized, e.g. \"HTML\" rather than\r\n-\"Html\".<\/p><\/li>\r\n-<li><p>Function and local variable names use lowercase with words\r\n-separated by a single underscore (<code>foo_bar<\/code>).<\/p><\/li>\r\n-<li><p>Class data member names have a leading underscore, and use\r\n-lowercase with words separated by a single underscore\r\n-(<code>_foo_bar<\/code>).<\/p><\/li>\r\n-<li><p>Constant names may be upper-case or mixed-case, according to\r\n-historical necessity. (Note: There are many examples of constants with\r\n-lowercase names.)<\/p><\/li>\r\n-<li><p>Constant names should follow an existing pattern, and must have a\r\n-distinct appearance from other names in related APIs.<\/p><\/li>\r\n-<li><p>Class and type names should be noun phrases. Consider an \"er\"\r\n-suffix for a class that represents an action.<\/p><\/li>\r\n-<li><p>Function names should be verb phrases that reflect changes of\r\n-state known to a class's user, or else noun phrases if they cause no\r\n-change of state visible to the class's user.<\/p><\/li>\r\n-<li><p>Getter accessor names are noun phrases, with no\r\n-\"<code>get_<\/code>\" noise word. Boolean getters can also begin with\r\n-\"<code>is_<\/code>\" or \"<code>has_<\/code>\". Member function for reading\r\n-data members usually have the same name as the data member, exclusive of\r\n-the leading underscore.<\/p><\/li>\r\n-<li><p>Setter accessor names prepend \"<code>set_<\/code>\" to the getter\r\n-name.<\/p><\/li>\r\n-<li><p>Other member function names are verb phrases, as if commands to\r\n-the receiver.<\/p><\/li>\r\n-<li><p>Avoid leading underscores (as \"<code>_oop<\/code>\") except in\r\n-cases required above. (Names with leading underscores can cause\r\n-portability problems.)<\/p><\/li>\r\n-<\/ul>\r\n-<h3 id=\"commenting\">Commenting<\/h3>\r\n-<ul>\r\n-<li><p>Clearly comment subtle fixes.<\/p><\/li>\r\n-<li><p>Clearly comment tricky classes and functions.<\/p><\/li>\r\n-<li><p>If you have to choose between commenting code and writing wiki\r\n-content, comment the code. Link from the wiki to the source file if it\r\n-makes sense.<\/p><\/li>\r\n-<li><p>As a general rule don't add bug numbers to comments (they would\r\n-soon overwhelm the code). But if the bug report contains significant\r\n-information that can't reasonably be added as a comment, then refer to\r\n-the bug report.<\/p><\/li>\r\n-<li><p>Personal names are discouraged in the source code, which is a\r\n-team product.<\/p><\/li>\r\n-<\/ul>\r\n-<h3 id=\"macros\">Macros<\/h3>\r\n-<ul>\r\n-<li><p>You can almost always use an inline function or class instead of\r\n-a macro. Use a macro only when you really need it.<\/p><\/li>\r\n-<li><p>Templates may be preferable to multi-line macros. (There may be\r\n-subtle performance effects with templates on some platforms; revert to\r\n-macros if absolutely necessary.)<\/p><\/li>\r\n-<li><p><code>#ifdef<\/code>s should not be used to introduce\r\n-platform-specific code into shared code (except for <code>_LP64<\/code>).\r\n-They must be used to manage header files, in the pattern found at the\r\n-top of every source file. They should be used mainly for major build\r\n-features, including <code>PRODUCT<\/code>, <code>ASSERT<\/code>,\r\n-<code>_LP64<\/code>, <code>INCLUDE_SERIALGC<\/code>,\r\n-<code>COMPILER1<\/code>, etc.<\/p><\/li>\r\n-<li><p>For build features such as <code>PRODUCT<\/code>, use\r\n-<code>#ifdef PRODUCT<\/code> for multiple-line inclusions or\r\n-exclusions.<\/p><\/li>\r\n-<li><p>For short inclusions or exclusions based on build features, use\r\n-macros like <code>PRODUCT_ONLY<\/code> and <code>NOT_PRODUCT<\/code>. But\r\n-avoid using them with multiple-line arguments, since debuggers do not\r\n-handle that well.<\/p><\/li>\r\n-<li><p>Use <code>CATCH<\/code>, <code>THROW<\/code>, etc. for\r\n-HotSpot-specific exception processing.<\/p><\/li>\r\n-<\/ul>\r\n-<h3 id=\"whitespace\">Whitespace<\/h3>\r\n-<ul>\r\n-<li><p>In general, don't change whitespace unless it improves\r\n-readability or consistency. Gratuitous whitespace changes will make\r\n-integrations and backports more difficult.<\/p><\/li>\r\n-<li><p>Use One-True-Brace-Style. The opening brace for a function or\r\n-class is normally at the end of the line; it is sometimes moved to the\r\n-beginning of the next line for emphasis. Substatements are enclosed in\r\n-braces, even if there is only a single statement. Extremely simple\r\n-one-line statements may drop braces around a substatement.<\/p><\/li>\r\n-<li><p>Indentation levels are two columns.<\/p><\/li>\r\n-<li><p>There is no hard line length limit. That said, bear in mind that\r\n-excessively long lines can cause difficulties. Some people like to have\r\n-multiple side-by-side windows in their editors, and long lines may force\r\n-them to choose among unpleasant options. They can use wide windows,\r\n-reducing the number that can fit across the screen, and wasting a lot of\r\n-screen real estate because most lines are not that long. Alternatively,\r\n-they can have more windows across the screen, with long lines wrapping\r\n-(or worse, requiring scrolling to see in their entirety), which is\r\n-harder to read. Similar issues exist for side-by-side code\r\n-reviews.<\/p><\/li>\r\n-<li><p>Tabs are not allowed in code. Set your editor accordingly.<br>\r\n-(Emacs: <code>(setq-default indent-tabs-mode nil)<\/code>.)<\/p><\/li>\r\n-<li><p>Use good taste to break lines and align corresponding tokens on\r\n-adjacent lines.<\/p><\/li>\r\n-<li><p>Use spaces around operators, especially comparisons and\r\n-assignments. (Relaxable for boolean expressions and high-precedence\r\n-operators in classic math-style formulas.)<\/p><\/li>\r\n-<li><p>Put spaces on both sides of control flow keywords\r\n-<code>if<\/code>, <code>else<\/code>, <code>for<\/code>,\r\n-<code>switch<\/code>, etc. Don't add spaces around the associated\r\n-<em>control<\/em> expressions. Examples:<\/p>\r\n-<pre><code>while (test_foo(args...)) {   \/\/ Yes\r\n-while(test_foo(args...)) {    \/\/ No, missing space after while\r\n-while ( test_foo(args...) ) { \/\/ No, excess spaces around control<\/code><\/pre><\/li>\r\n-<li><p>Use extra parentheses in expressions whenever operator precedence\r\n-seems doubtful. Always use parentheses in shift\/mask expressions\r\n-(<code>&lt;&lt;<\/code>, <code>&amp;<\/code>, <code>|<\/code>). Don't add\r\n-whitespace immediately inside parentheses.<\/p><\/li>\r\n-<li><p>Use more spaces and blank lines between larger constructs, such\r\n-as classes or function definitions.<\/p><\/li>\r\n-<li><p>If the surrounding code has any sort of vertical organization,\r\n-adjust new lines horizontally to be consistent with that organization.\r\n-(E.g., trailing backslashes on long macro definitions often\r\n-align.)<\/p><\/li>\r\n-<\/ul>\r\n-<h3 id=\"miscellaneous\">Miscellaneous<\/h3>\r\n-<ul>\r\n-<li><p>Use the <a href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/raii\"\r\n-title=\"Resource Acquisition Is Initialization\">Resource Acquisition Is\r\n-Initialization<\/a> (RAII) design pattern to manage bracketed critical\r\n-sections. See class <code>ResourceMark<\/code> for an example.<\/p><\/li>\r\n-<li><p>Avoid implicit conversions to <code>bool<\/code>.<\/p>\r\n-<ul>\r\n-<li>Use <code>bool<\/code> for boolean values.<\/li>\r\n-<li>Do not use ints or pointers as (implicit) booleans with\r\n-<code>&amp;&amp;<\/code>, <code>||<\/code>, <code>if<\/code>,\r\n-<code>while<\/code>. Instead, compare explicitly, i.e.\r\n-<code>if (x != 0)<\/code> or <code>if (ptr != nullptr)<\/code>, etc.<\/li>\r\n-<li>Do not use declarations in <em>condition<\/em> forms, i.e. don't use\r\n-<code>if (T v = value) { ... }<\/code>.<\/li>\r\n-<\/ul><\/li>\r\n-<li><p>Use functions from globalDefinitions.hpp and related files when\r\n-performing bitwise operations on integers. Do not code directly as C\r\n-operators, unless they are extremely simple. (Examples:\r\n-<code>align_up<\/code>, <code>is_power_of_2<\/code>,\r\n-<code>exact_log2<\/code>.)<\/p><\/li>\r\n-<li><p>Use arrays with abstractions supporting range checks.<\/p><\/li>\r\n-<li><p>Always enumerate all cases in a switch statement or provide a\r\n-default case. It is ok to have an empty default with comment.<\/p><\/li>\r\n-<\/ul>\r\n-<h2 id=\"use-of-c-features\">Use of C++ Features<\/h2>\r\n-<p>HotSpot was originally written in a subset of the C++98\/03 language.\r\n-More recently, support for C++14 is provided, though again, HotSpot only\r\n-uses a subset. (Backports to JDK versions lacking support for more\r\n-recent Standards must of course stick with the original C++98\/03\r\n-subset.)<\/p>\r\n-<p>This section describes that subset. Features from the C++98\/03\r\n-language may be used unless explicitly excluded here. Features from\r\n-C++11 and C++14 may be explicitly permitted or explicitly excluded, and\r\n-discussed accordingly here. There is a third category, undecided\r\n-features, about which HotSpot developers have not yet reached a\r\n-consensus, or perhaps have not discussed at all. Use of these features\r\n-is also excluded.<\/p>\r\n-<p>(The use of some features may not be immediately obvious and may slip\r\n-in anyway, since the compiler will accept them. The code review process\r\n-is the main defense against this.)<\/p>\r\n-<p>Some features are discussed in their own subsection, typically to\r\n-provide more extensive discussion or rationale for limitations. Features\r\n-that don't have their own subsection are listed in omnibus feature\r\n-sections for permitted, excluded, and undecided features.<\/p>\r\n-<p>Lists of new features for C++11 and C++14, along with links to their\r\n-descriptions, can be found in the online documentation for some of the\r\n-compilers and libraries. The C++14 Standard is the definitive\r\n-description.<\/p>\r\n-<ul>\r\n-<li><a href=\"https:\/\/gcc.gnu.org\/projects\/cxx-status.html\">C++ Standards\r\n-Support in GCC<\/a><\/li>\r\n-<li><a href=\"https:\/\/clang.llvm.org\/cxx_status.html\">C++ Support in\r\n-Clang<\/a><\/li>\r\n-<li><a\r\n-href=\"https:\/\/docs.microsoft.com\/en-us\/cpp\/visual-cpp-language-conformance\">Visual\r\n-C++ Language Conformance<\/a><\/li>\r\n-<li><a\r\n-href=\"https:\/\/gcc.gnu.org\/onlinedocs\/libstdc++\/manual\/status.html\">libstdc++\r\n-Status<\/a><\/li>\r\n-<li><a href=\"https:\/\/libcxx.llvm.org\/cxx1y_status.html\">libc++\r\n-Status<\/a><\/li>\r\n-<\/ul>\r\n-<p>As a rule of thumb, permitting features which simplify writing code\r\n-and, especially, reading code, is encouraged.<\/p>\r\n-<p>Similar discussions for some other projects:<\/p>\r\n-<ul>\r\n-<li><p><a\r\n-href=\"https:\/\/google.github.io\/styleguide\/cppguide.html\">Google C++\r\n-Style Guide<\/a> — Currently (2020) targeting C++17.<\/p><\/li>\r\n-<li><p><a\r\n-href=\"https:\/\/chromium.googlesource.com\/chromium\/src\/+\/main\/styleguide\/c++\/c++-features.md\">C++11\r\n-and C++14 use in Chromium<\/a> — Categorizes features as allowed, banned,\r\n-or to be discussed.<\/p><\/li>\r\n-<li><p><a href=\"https:\/\/llvm.org\/docs\/CodingStandards.html\">llvm Coding\r\n-Standards<\/a> — Currently (2020) targeting C++14.<\/p><\/li>\r\n-<li><p><a\r\n-href=\"https:\/\/firefox-source-docs.mozilla.org\/code-quality\/coding-style\/using_cxx_in_firefox_code.html\">Using\r\n-C++ in Mozilla code<\/a> — C++17 support is required for recent versions\r\n-(2020).<\/p><\/li>\r\n-<\/ul>\r\n-<h3 id=\"error-handling\">Error Handling<\/h3>\r\n-<p>Do not use exceptions. Exceptions are disabled by the build\r\n-configuration for some platforms.<\/p>\r\n-<p>Rationale: There is significant concern over the performance cost of\r\n-exceptions and their usage model and implications for maintainable code.\r\n-That's not just a matter of history that has been fixed; there remain\r\n-questions and problems even today (2019). See, for example, <a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2018\/p0709r0.pdf\">Zero\r\n-cost deterministic exceptions<\/a>. Because of this, HotSpot has always\r\n-used a build configuration that disables exceptions where that is\r\n-available. As a result, HotSpot code uses error handling mechanisms such\r\n-as two-phase construction, factory functions, returning error codes, and\r\n-immediate termination. Even if the cost of exceptions were not a\r\n-concern, the existing body of code was not written with exception safety\r\n-in mind. Making HotSpot exception safe would be a very large\r\n-undertaking.<\/p>\r\n-<p>In addition to the usual alternatives to exceptions, HotSpot provides\r\n-its own exception mechanism. This is based on a set of macros defined in\r\n-utilities\/exceptions.hpp.<\/p>\r\n-<h3 id=\"rtti-runtime-type-information\">RTTI (Runtime Type\r\n-Information)<\/h3>\r\n-<p>Do not use <a\r\n-href=\"https:\/\/en.wikipedia.org\/wiki\/Run-time_type_information\"\r\n-title=\"Runtime Type Information\">Runtime Type Information<\/a> (RTTI). <a\r\n-href=\"https:\/\/en.wikipedia.org\/wiki\/Run-time_type_information\"\r\n-title=\"Runtime Type Information\">RTTI<\/a> is disabled by the build\r\n-configuration for some platforms. Among other things, this means\r\n-<code>dynamic_cast<\/code> cannot be used.<\/p>\r\n-<p>Rationale: Other than to implement exceptions (which HotSpot doesn't\r\n-use), most potential uses of <a\r\n-href=\"https:\/\/en.wikipedia.org\/wiki\/Run-time_type_information\"\r\n-title=\"Runtime Type Information\">RTTI<\/a> are better done via virtual\r\n-functions. Some of the remainder can be replaced by bespoke mechanisms.\r\n-The cost of the additional runtime data structures needed to support <a\r\n-href=\"https:\/\/en.wikipedia.org\/wiki\/Run-time_type_information\"\r\n-title=\"Runtime Type Information\">RTTI<\/a> are deemed not worthwhile,\r\n-given the alternatives.<\/p>\r\n-<h3 id=\"memory-allocation\">Memory Allocation<\/h3>\r\n-<p>Do not use the standard global allocation and deallocation functions\r\n-(operator new and related functions). Use of these functions by HotSpot\r\n-code is disabled for some platforms.<\/p>\r\n-<p>Rationale: HotSpot often uses \"resource\" or \"arena\" allocation. Even\r\n-where heap allocation is used, the standard global functions are avoided\r\n-in favor of wrappers around malloc and free that support the VM's Native\r\n-Memory Tracking (NMT) feature.<\/p>\r\n-<p>Native memory allocation failures are often treated as\r\n-non-recoverable. The place where \"out of memory\" is (first) detected may\r\n-be an innocent bystander, unrelated to the actual culprit.<\/p>\r\n-<h3 id=\"class-inheritance\">Class Inheritance<\/h3>\r\n-<p>Use public single inheritance.<\/p>\r\n-<p>Prefer composition rather than non-public inheritance.<\/p>\r\n-<p>Restrict inheritance to the \"is-a\" case; use composition rather than\r\n-non-is-a related inheritance.<\/p>\r\n-<p>Avoid multiple inheritance. Never use virtual inheritance.<\/p>\r\n-<h3 id=\"namespaces\">Namespaces<\/h3>\r\n-<p>Avoid using namespaces. HotSpot code normally uses \"all static\"\r\n-classes rather than namespaces for grouping. An \"all static\" class is\r\n-not instantiable, has only static members, and is normally derived\r\n-(possibly indirectly) from the helper class <code>AllStatic<\/code>.<\/p>\r\n-<p>Benefits of using such classes include:<\/p>\r\n-<ul>\r\n-<li><p>Provides access control for members, which is unavailable with\r\n-namespaces.<\/p><\/li>\r\n-<li><p>Avoids <a href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/adl\"\r\n-title=\"Argument Dependent Lookup\">Argument Dependent Lookup<\/a>\r\n-(ADL).<\/p><\/li>\r\n-<li><p>Closed for additional members. Namespaces allow names to be added\r\n-in multiple contexts, making it harder to see the complete API.<\/p><\/li>\r\n-<\/ul>\r\n-<p>Namespaces should be used only in cases where one of those \"benefits\"\r\n-is actually a hindrance.<\/p>\r\n-<p>In particular, don't use anonymous namespaces. They seem like they\r\n-should be useful, and indeed have some real benefits for naming and\r\n-generated code size on some platforms. Unfortunately, debuggers don't\r\n-seem to like them at all.<\/p>\r\n-<p><a\r\n-href=\"https:\/\/groups.google.com\/forum\/#!topic\/mozilla.dev.platform\/KsaG3lEEaRM\"\r\n-class=\"uri\">https:\/\/groups.google.com\/forum\/#!topic\/mozilla.dev.platform\/KsaG3lEEaRM<\/a><br>\r\n-Suggests Visual Studio debugger might not be able to refer to anonymous\r\n-namespace symbols, so can't set breakpoints in them. Though the\r\n-discussion seems to go back and forth on that.<\/p>\r\n-<p><a\r\n-href=\"https:\/\/firefox-source-docs.mozilla.org\/code-quality\/coding-style\/coding_style_cpp.html\"\r\n-class=\"uri\">https:\/\/firefox-source-docs.mozilla.org\/code-quality\/coding-style\/coding_style_cpp.html<\/a><br>\r\n-Search for \"Anonymous namespaces\" Suggests preferring \"static\" to\r\n-anonymous namespaces where applicable, because of poor debugger support\r\n-for anonymous namespaces.<\/p>\r\n-<p><a href=\"https:\/\/sourceware.org\/bugzilla\/show_bug.cgi?id=16874\"\r\n-class=\"uri\">https:\/\/sourceware.org\/bugzilla\/show_bug.cgi?id=16874<\/a><br>\r\n-Bug for similar gdb problems.<\/p>\r\n-<h3 id=\"c-standard-library\">C++ Standard Library<\/h3>\r\n-<p>Avoid using the C++ Standard Library.<\/p>\r\n-<p>Historically, HotSpot has mostly avoided use of the Standard\r\n-Library.<\/p>\r\n-<p>(It used to be impossible to use most of it in shared code, because\r\n-the build configuration for Solaris with Solaris Studio made all but a\r\n-couple of pieces inaccessible. Support for header-only parts was added\r\n-in mid-2017. Support for Solaris was removed in 2020.)<\/p>\r\n-<p>Some reasons for this include<\/p>\r\n-<ul>\r\n-<li><p>Exceptions. Perhaps the largest core issue with adopting the use\r\n-of Standard Library facilities is exceptions. HotSpot does not use\r\n-exceptions and, for platforms which allow doing so, builds with them\r\n-turned off. Many Standard Library facilities implicitly or explicitly\r\n-use exceptions.<\/p><\/li>\r\n-<li><p><code>assert<\/code>. An issue that is quickly encountered is the\r\n-<code>assert<\/code> macro name collision (<a\r\n-href=\"https:\/\/bugs.openjdk.java.net\/browse\/JDK-8007770\">JDK-8007770<\/a>).\r\n-Some mechanism for addressing this would be needed before much of the\r\n-Standard Library could be used. (Not all Standard Library\r\n-implementations use assert in header files, but some do.)<\/p><\/li>\r\n-<li><p>Memory allocation. HotSpot requires explicit control over where\r\n-allocations occur. The C++98\/03 <code>std::allocator<\/code> class is too\r\n-limited to support our usage. (Changes in more recent Standards may\r\n-remove this limitation.)<\/p><\/li>\r\n-<li><p>Implementation vagaries. Bugs, or simply different implementation\r\n-choices, can lead to different behaviors among the various Standard\r\n-Libraries we need to deal with.<\/p><\/li>\r\n-<li><p>Inconsistent naming conventions. HotSpot and the C++ Standard use\r\n-different naming conventions. The coexistence of those different\r\n-conventions might appear jarring and reduce readability.<\/p><\/li>\r\n-<\/ul>\r\n-<p>There are a few exceptions to this rule.<\/p>\r\n-<ul>\r\n-<li><code>#include &lt;new&gt;<\/code> to use placement <code>new<\/code>,\r\n-<code>std::nothrow<\/code>, and <code>std::nothrow_t<\/code>.<\/li>\r\n-<li><code>#include &lt;limits&gt;<\/code> to use\r\n-<code>std::numeric_limits<\/code>.<\/li>\r\n-<li><code>#include &lt;type_traits&gt;<\/code>.<\/li>\r\n-<li><code>#include &lt;cstddef&gt;<\/code> to use\r\n-<code>std::nullptr_t<\/code>.<\/li>\r\n-<\/ul>\r\n-<p>TODO: Rather than directly #including (permitted) Standard Library\r\n-headers, use a convention of #including wrapper headers (in some\r\n-location like hotspot\/shared\/stdcpp). This provides a single place for\r\n-dealing with issues we might have for any given header, esp.\r\n-platform-specific issues.<\/p>\r\n-<h3 id=\"type-deduction\">Type Deduction<\/h3>\r\n-<p>Use type deduction only if it makes the code clearer or safer. Do not\r\n-use it merely to avoid the inconvenience of writing an explicit type,\r\n-unless that type is itself difficult to write. An example of the latter\r\n-is a function template return type that depends on template parameters\r\n-in a non-trivial way.<\/p>\r\n-<p>There are several contexts where types are deduced.<\/p>\r\n-<ul>\r\n-<li><p>Function argument deduction. This is always permitted, and indeed\r\n-encouraged. It is nearly always better to allow the type of a function\r\n-template argument to be deduced rather than explicitly\r\n-specified.<\/p><\/li>\r\n-<li><p><code>auto<\/code> variable declarations (<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2006\/n1984.pdf\">n1984<\/a>)<br>\r\n-For local variables, this can be used to make the code clearer by\r\n-eliminating type information that is obvious or irrelevant. Excessive\r\n-use can make code much harder to understand.<\/p><\/li>\r\n-<li><p>Function return type deduction (<a\r\n-href=\"https:\/\/isocpp.org\/files\/papers\/N3638.html\">n3638<\/a>)<br> Only\r\n-use if the function body has a very small number of <code>return<\/code>\r\n-statements, and generally relatively little other code.<\/p><\/li>\r\n-<li><p>Also see <a href=\"#lambdaexpressions\">lambda\r\n-expressions<\/a>.<\/p><\/li>\r\n-<\/ul>\r\n-<h3 id=\"expression-sfinae\">Expression SFINAE<\/h3>\r\n-<p><a href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/sfinae\"\r\n-title=\"Substitution Failure Is Not An Error\">Substitution Failure Is Not\r\n-An Error<\/a> (SFINAE) is a template metaprogramming technique that makes\r\n-use of template parameter substitution failures to make compile-time\r\n-decisions.<\/p>\r\n-<p>C++11 relaxed the rules for what constitutes a hard-error when\r\n-attempting to substitute template parameters with template arguments,\r\n-making most deduction errors be substitution errors; see (<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2634.html\">n2634<\/a>).\r\n-This makes <a href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/sfinae\"\r\n-title=\"Substitution Failure Is Not An Error\">SFINAE<\/a> more powerful\r\n-and easier to use. However, the implementation complexity for this\r\n-change is significant, and this seems to be a place where obscure\r\n-corner-case bugs in various compilers can be found. So while this\r\n-feature can (and indeed should) be used (and would be difficult to\r\n-avoid), caution should be used when pushing to extremes.<\/p>\r\n-<p>Here are a few closely related example bugs:<br> <a\r\n-href=\"https:\/\/gcc.gnu.org\/bugzilla\/show_bug.cgi?id=95468\"\r\n-class=\"uri\">https:\/\/gcc.gnu.org\/bugzilla\/show_bug.cgi?id=95468<\/a><br>\r\n-<a\r\n-href=\"https:\/\/developercommunity.visualstudio.com\/content\/problem\/396562\/sizeof-deduced-type-is-sometimes-not-a-constant-ex.html\"\r\n-class=\"uri\">https:\/\/developercommunity.visualstudio.com\/content\/problem\/396562\/sizeof-deduced-type-is-sometimes-not-a-constant-ex.html<\/a><\/p>\r\n-<h3 id=\"enum\">enum<\/h3>\r\n-<p>Where appropriate, <em>scoped-enums<\/em> should be used. (<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2347.pdf\">n2347<\/a>)<\/p>\r\n-<p>Use of <em>unscoped-enums<\/em> is permitted, though ordinary\r\n-constants may be preferable when the automatic initializer feature isn't\r\n-used.<\/p>\r\n-<p>The underlying type (the <em>enum-base<\/em>) of an unscoped enum type\r\n-should always be specified explicitly. When unspecified, the underlying\r\n-type is dependent on the range of the enumerator values and the\r\n-platform.<\/p>\r\n-<p>The underlying type of a <em>scoped-enum<\/em> should also be\r\n-specified explicitly if conversions may be applied to values of that\r\n-type.<\/p>\r\n-<p>Due to bugs in certain (very old) compilers, there is widespread use\r\n-of enums and avoidance of in-class initialization of static integral\r\n-constant members. Compilers having such bugs are no longer supported.\r\n-Except where an enum is semantically appropriate, new code should use\r\n-integral constants.<\/p>\r\n-<h3 id=\"thread_local\">thread_local<\/h3>\r\n-<p>Do not use <code>thread_local<\/code> (<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2659.htm\">n2659<\/a>);\r\n-instead, use the HotSpot macro <code>THREAD_LOCAL<\/code>. The\r\n-initializer must be a constant expression.<\/p>\r\n-<p>As was discussed in the review for <a\r\n-href=\"https:\/\/mail.openjdk.java.net\/pipermail\/hotspot-dev\/2019-September\/039487.html\">JDK-8230877<\/a>,\r\n-<code>thread_local<\/code> allows dynamic initialization and destruction\r\n-semantics. However, that support requires a run-time penalty for\r\n-references to non-function-local <code>thread_local<\/code> variables\r\n-defined in a different translation unit, even if they don't need dynamic\r\n-initialization. Dynamic initialization and destruction of\r\n-namespace-scoped thread local variables also has the same ordering\r\n-problems as for ordinary namespace-scoped variables.<\/p>\r\n-<h3 id=\"nullptr\">nullptr<\/h3>\r\n-<p>Prefer <code>nullptr<\/code> (<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2431.pdf\">n2431<\/a>)\r\n-to <code>NULL<\/code>. Don't use (constexpr or literal) 0 for\r\n-pointers.<\/p>\r\n-<p>For historical reasons there are widespread uses of both\r\n-<code>NULL<\/code> and of integer 0 as a pointer value.<\/p>\r\n-<h3 id=\"atomic\">&lt;atomic&gt;<\/h3>\r\n-<p>Do not use facilities provided by the <code>&lt;atomic&gt;<\/code>\r\n-header (<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2427.html\">n2427<\/a>),\r\n-(<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2752.htm\">n2752<\/a>);\r\n-instead, use the HotSpot <code>Atomic<\/code> class and related\r\n-facilities.<\/p>\r\n-<p>Atomic operations in HotSpot code must have semantics which are\r\n-consistent with those provided by the JDK's compilers for Java. There\r\n-are platform-specific implementation choices that a C++ compiler might\r\n-make or change that are outside the scope of the C++ Standard, and might\r\n-differ from what the Java compilers implement.<\/p>\r\n-<p>In addition, HotSpot <code>Atomic<\/code> has a concept of\r\n-\"conservative\" memory ordering, which may differ from (may be stronger\r\n-than) sequentially consistent. There are algorithms in HotSpot that are\r\n-believed to rely on that ordering.<\/p>\r\n-<h3 id=\"uniform-initialization\">Uniform Initialization<\/h3>\r\n-<p>The use of <em>uniform initialization<\/em> (<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2672.htm\">n2672<\/a>),\r\n-also known as <em>brace initialization<\/em>, is permitted.<\/p>\r\n-<p>Some relevant sections from cppreference.com:<\/p>\r\n-<ul>\r\n-<li><a\r\n-href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/initialization\">initialization<\/a><\/li>\r\n-<li><a\r\n-href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/value_initialization\">value\r\n-initialization<\/a><\/li>\r\n-<li><a\r\n-href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/direct_initialization\">direct\r\n-initialization<\/a><\/li>\r\n-<li><a\r\n-href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/list_initialization\">list\r\n-initialization<\/a><\/li>\r\n-<li><a\r\n-href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/aggregate_initialization\">aggregate\r\n-initialization<\/a><\/li>\r\n-<\/ul>\r\n-<p>Although related, the use of <code>std::initializer_list<\/code>\r\n-remains forbidden, as part of the avoidance of the C++ Standard Library\r\n-in HotSpot code.<\/p>\r\n-<h3 id=\"local-function-objects\">Local Function Objects<\/h3>\r\n-<ul>\r\n-<li>Local function objects, including lambda expressions, may be\r\n-used.<\/li>\r\n-<li>Lambda expressions must only be used as a downward value.<\/li>\r\n-<li>Prefer <code>[&amp;]<\/code> as the capture list of a lambda\r\n-expression.<\/li>\r\n-<li>Return type deduction for lambda expressions is permitted, and\r\n-indeed encouraged.<\/li>\r\n-<li>An empty parameter list for a lambda expression may be elided.<\/li>\r\n-<li>A lambda expression must not be <code>mutable<\/code>.<\/li>\r\n-<li>Generic lambda expressions are permitted.<\/li>\r\n-<li>Lambda expressions should be relatively simple.<\/li>\r\n-<li>Anonymous lambda expressions should not overly clutter the enclosing\r\n-expression.<\/li>\r\n-<li>An anonymous lambda expression must not be directly invoked.<\/li>\r\n-<li>Bind expressions are forbidden.<\/li>\r\n-<\/ul>\r\n-<p>Single-use function objects can be defined locally within a function,\r\n-directly at the point of use. This is an alternative to having a\r\n-function or function object class defined at class or namespace\r\n-scope.<\/p>\r\n-<p>This usage was somewhat limited by C++03, which does not permit such\r\n-a class to be used as a template parameter. That restriction was removed\r\n-by C++11 (<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2657.htm\">n2657<\/a>).\r\n-Use of this feature is permitted.<\/p>\r\n-<p>Many HotSpot protocols involve \"function-like\" objects that involve\r\n-some named member function rather than a call operator. For example, a\r\n-function that performs some action on all threads might be written\r\n-as<\/p>\r\n-<pre><code>void do_something() {\r\n-  struct DoSomething : public ThreadClosure {\r\n-    virtual void do_thread(Thread* t) {\r\n-      ... do something with t ...\r\n-    }\r\n-  } closure;\r\n-  Threads::threads_do(&amp;closure);\r\n-}<\/code><\/pre>\r\n-<p>HotSpot code has historically usually placed the DoSomething class at\r\n-namespace (or sometimes class) scope. This separates the function's code\r\n-from its use, often to the detriment of readability. It requires giving\r\n-the class a globally unique name (if at namespace scope). It also loses\r\n-the information that the class is intended for use in exactly one place,\r\n-and does not have any subclasses. (However, the latter can now be\r\n-indicated by declaring it <code>final<\/code>.) Often, for simplicity, a\r\n-local class will skip things like access control and accessor functions,\r\n-giving the enclosing function direct access to the implementation and\r\n-eliminating some boilerplate that might be provided if the class is in\r\n-some outer (more accessible) scope. On the other hand, if there is a lot\r\n-of surrounding code in the function body or the local class is of\r\n-significant size, defining it locally can increase clutter and reduce\r\n-readability.<\/p>\r\n-<p><a name=\"lambdaexpressions\"><\/a> C++11 added <em>lambda\r\n-expressions<\/em> as a new way to write a function object. Simple lambda\r\n-expressions can be significantly more concise than a function object,\r\n-eliminating a lot of boiler-plate. On the other hand, a complex lambda\r\n-expression may not provide much, if any, readability benefit compared to\r\n-an ordinary function object. Also, while a lambda can encapsulate a call\r\n-to a \"function-like\" object, it cannot be used in place of such.<\/p>\r\n-<p>A common use for local functions is as one-use <a\r\n-href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/raii\"\r\n-title=\"Resource Acquisition Is Initialization\">RAII<\/a> objects. The\r\n-amount of boilerplate for a function object class (local or not) makes\r\n-such usage somewhat clumsy and verbose. But with the help of a small\r\n-amount of supporting utility code, lambdas work particularly well for\r\n-this use case.<\/p>\r\n-<p>Another use for local functions is <a\r\n-href=\"https:\/\/en.wikipedia.org\/wiki\/Partial_application\"\r\n-title=\"Partial Application\">partial application<\/a>. Again here, lambdas\r\n-are typically much simpler and less verbose than function object\r\n-classes.<\/p>\r\n-<p>Because of these benefits, lambda expressions are permitted in\r\n-HotSpot code, with some restrictions and usage guidance. An anonymous\r\n-lambda is one which is passed directly as an argument. A named lambda is\r\n-the value of a variable, which is its name.<\/p>\r\n-<p>Lambda expressions should only be passed downward. In particular, a\r\n-lambda should not be returned from a function or stored in a global\r\n-variable, whether directly or as the value of a member of some other\r\n-object. Lambda capture is syntactically subtle (by design), and\r\n-propagating a lambda in such ways can easily pass references to captured\r\n-values to places where they are no longer valid. In particular, members\r\n-of the enclosing <code>this<\/code> object are effectively captured by\r\n-reference, even if the default capture is by-value. For such uses-cases\r\n-a function object class should be used to make the desired value\r\n-capturing and propagation explicit.<\/p>\r\n-<p>Limiting the capture list to <code>[&amp;]<\/code> (implicitly capture\r\n-by reference) is a simplifying restriction that still provides good\r\n-support for HotSpot usage, while reducing the cases a reader must\r\n-recognize and understand.<\/p>\r\n-<ul>\r\n-<li><p>Many common lambda uses require reference capture. Not permitting\r\n-it would substantially reduce the utility of lambdas.<\/p><\/li>\r\n-<li><p>Referential transparency. Implicit reference capture makes\r\n-variable references in the lambda body have the same meaning they would\r\n-have in the enclosing code. There isn't a semantic barrier across which\r\n-the meaning of a variable changes.<\/p><\/li>\r\n-<li><p>Explicit reference capture introduces significant clutter,\r\n-especially when lambda expressions are relatively small and simple, as\r\n-they should be in HotSpot code.<\/p><\/li>\r\n-<li><p>There are a number of reasons why by-value capture might be used,\r\n-but for the most part they don't apply to HotSpot code, given other\r\n-usage restrictions.<\/p>\r\n-<ul>\r\n-<li><p>A primary use-case for by-value capture is to support escaping\r\n-uses, where values captured by-reference might become invalid. That\r\n-use-case doesn't apply if only downward lambdas are used.<\/p><\/li>\r\n-<li><p>By-value capture can also make a lambda-local copy for mutation,\r\n-which requires making the lambda <code>mutable<\/code>; see\r\n-below.<\/p><\/li>\r\n-<li><p>By-value capture might be viewed as an optimization, avoiding any\r\n-overhead for reference capture of cheap to copy values. But the compiler\r\n-can often eliminate any such overhead.<\/p><\/li>\r\n-<li><p>By-value capture by a non-<code>mutable<\/code> lambda makes the\r\n-captured values const, preventing any modification by the lambda and\r\n-making the captured value unaffected by modifications to the outer\r\n-variable. But this only applies to captured auto variables, not member\r\n-variables, and is inconsistent with referential transparency.<\/p><\/li>\r\n-<\/ul><\/li>\r\n-<li><p>Non-capturing lambdas (with an empty capture list -\r\n-<code>[]<\/code>) have limited utility. There are cases where no captures\r\n-are required (pure functions, for example), but if the function is small\r\n-and simple then that's obvious anyway.<\/p><\/li>\r\n-<li><p>Capture initializers (a C++14 feature - <a\r\n-href=\"https:\/\/isocpp.org\/files\/papers\/N3649.html\">N3649<\/a>) are not\r\n-permitted. Capture initializers inherently increase the complexity of\r\n-the capture list, and provide little benefit over an additional in-scope\r\n-local variable.<\/p><\/li>\r\n-<\/ul>\r\n-<p>The use of <code>mutable<\/code> lambda expressions is forbidden\r\n-because there don't seem to be many, if any, good use-cases for them in\r\n-HotSpot. A lambda expression needs to be mutable in order to modify a\r\n-by-value captured value. But with only downward lambdas, such usage\r\n-seems likely to be rare and complicated. It is better to use a function\r\n-object class in any such cases that arise, rather than requiring all\r\n-HotSpot developers to understand this relatively obscure feature.<\/p>\r\n-<p>While it is possible to directly invoke an anonymous lambda\r\n-expression, that feature should not be used, as such a form can be\r\n-confusing to readers. Instead, name the lambda and call it by name.<\/p>\r\n-<p>Some reasons to prefer a named lambda instead of an anonymous lambda\r\n-are<\/p>\r\n-<ul>\r\n-<li><p>The body contains non-trivial control flow or declarations or\r\n-other nested constructs.<\/p><\/li>\r\n-<li><p>Its role in an argument list is hard to guess without examining\r\n-the function declaration. Give it a name that indicates its\r\n-purpose.<\/p><\/li>\r\n-<li><p>It has an unusual capture list.<\/p><\/li>\r\n-<li><p>It has a complex explicit return type or parameter\r\n-types.<\/p><\/li>\r\n-<\/ul>\r\n-<p>Lambda expressions, and particularly anonymous lambda expressions,\r\n-should be simple and compact. One-liners are good. Anonymous lambdas\r\n-should usually be limited to a couple lines of body code. More complex\r\n-lambdas should be named. A named lambda should not clutter the enclosing\r\n-function and make it long and complex; do continue to break up large\r\n-functions via the use of separate helper functions.<\/p>\r\n-<p>An anonymous lambda expression should either be a one-liner in a\r\n-one-line expression, or isolated in its own set of lines. Don't place\r\n-part of a lambda expression on the same line as other arguments to a\r\n-function. The body of a multi-line lambda argument should be indented\r\n-from the start of the capture list, as if that were the start of an\r\n-ordinary function definition. The body of a multi-line named lambda\r\n-should be indented one step from the variable's indentation.<\/p>\r\n-<p>Some examples:<\/p>\r\n-<ol type=\"1\">\r\n-<li><p><code>foo([&amp;] { ++counter; });<\/code><\/p><\/li>\r\n-<li><p><code>foo(x, [&amp;] { ++counter; });<\/code><\/p><\/li>\r\n-<li><p><code>foo([&amp;] { if (predicate) ++counter; });<\/code><\/p><\/li>\r\n-<li><p><code>foo([&amp;] { auto tmp = process(x); tmp.f(); return tmp.g(); })<\/code><\/p><\/li>\r\n-<li><p>Separate one-line lambda from other arguments:<\/p>\r\n-<pre><code>foo(c.begin(), c.end(),\r\n-    [&amp;] (const X&amp; x) { do_something(x); return x.value(); });<\/code><\/pre><\/li>\r\n-<li><p>Indentation for multi-line lambda:<\/p>\r\n-<pre><code>c.do_entries([&amp;] (const X&amp; x) {\r\n-               do_something(x, a);\r\n-               do_something1(x, b);\r\n-               do_something2(x, c);\r\n-             });<\/code><\/pre><\/li>\r\n-<li><p>Separate multi-line lambda from other arguments:<\/p>\r\n-<pre><code>foo(c.begin(), c.end(),\r\n-    [&amp;] (const X&amp; x) {\r\n-      do_something(x, a);\r\n-      do_something1(x, b);\r\n-      do_something2(x, c);\r\n-    });<\/code><\/pre><\/li>\r\n-<li><p>Multi-line named lambda:<\/p>\r\n-<pre><code>auto do_entry = [&amp;] (const X&amp; x) {\r\n-  do_something(x, a);\r\n-  do_something1(x, b);\r\n-  do_something2(x, c);\r\n-};<\/code><\/pre><\/li>\r\n-<\/ol>\r\n-<p>Item 4, and especially items 6 and 7, are pushing the simplicity\r\n-limits for anonymous lambdas. Item 6 might be better written using a\r\n-named lambda:<\/p>\r\n-<pre><code>c.do_entries(do_entry);<\/code><\/pre>\r\n-<p>Note that C++11 also added <em>bind expressions<\/em> as a way to\r\n-write a function object for partial application, using\r\n-<code>std::bind<\/code> and related facilities from the Standard Library.\r\n-<code>std::bind<\/code> generalizes and replaces some of the binders from\r\n-C++03. Bind expressions are not permitted in HotSpot code. They don't\r\n-provide enough benefit over lambdas or local function classes in the\r\n-cases where bind expressions are applicable to warrant the introduction\r\n-of yet another mechanism in this space into HotSpot code.<\/p>\r\n-<p>References:<\/p>\r\n-<ul>\r\n-<li>Local and unnamed types as template parameters (<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2657.htm\">n2657<\/a>)<\/li>\r\n-<li>New wording for C++0x lambdas (<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2009\/n2927.pdf\">n2927<\/a>)<\/li>\r\n-<li>Generalized lambda capture (init-capture) (<a\r\n-href=\"https:\/\/isocpp.org\/files\/papers\/N3648.html\">N3648<\/a>)<\/li>\r\n-<li>Generic (polymorphic) lambda expressions (<a\r\n-href=\"https:\/\/isocpp.org\/files\/papers\/N3649.html\">N3649<\/a>)<\/li>\r\n-<\/ul>\r\n-<p>References from C++17<\/p>\r\n-<ul>\r\n-<li>Wording for constexpr lambda (<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2016\/p0170r1.pdf\">p0170r1<\/a>)<\/li>\r\n-<li>Lambda capture of *this by Value (<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2016\/p0018r3.html\">p0018r3<\/a>)<\/li>\r\n-<\/ul>\r\n-<p>References from C++20<\/p>\r\n-<ul>\r\n-<li>Allow lambda capture [=, this] (<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2017\/p0409r2.html\">p0409r2<\/a>)<\/li>\r\n-<li>Familiar template syntax for generic lambdas (<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2017\/p0428r2.pdf\">p0428r2<\/a>)<\/li>\r\n-<li>Simplifying implicit lambda capture (<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2017\/p0588r1.html\">p0588r1<\/a>)<\/li>\r\n-<li>Default constructible and assignable stateless lambdas (<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2017\/p0624r2.pdf\">p0624r2<\/a>)<\/li>\r\n-<li>Lambdas in unevaluated contexts (<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2017\/p0315r4.pdf\">p0315r4<\/a>)<\/li>\r\n-<li>Allow pack expansion in lambda init-capture (<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2018\/p0780r2.html\">p0780r2<\/a>)\r\n-(<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2020\/p2095r0.html\">p2095r0<\/a>)<\/li>\r\n-<li>Deprecate implicit capture of this via [=] (<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2018\/p0806r2.html\">p0806r2<\/a>)<\/li>\r\n-<\/ul>\r\n-<p>References from C++23<\/p>\r\n-<ul>\r\n-<li>Make () more optional for lambdas (<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2020\/p1102r2.html\">p1102r2<\/a>)<\/li>\r\n-<\/ul>\r\n-<h3 id=\"additional-permitted-features\">Additional Permitted\r\n-Features<\/h3>\r\n-<ul>\r\n-<li><p><code>constexpr<\/code> (<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2235.pdf\">n2235<\/a>)\r\n-(<a\r\n-href=\"https:\/\/isocpp.org\/files\/papers\/N3652.html\">n3652<\/a>)<\/p><\/li>\r\n-<li><p>Sized deallocation (<a\r\n-href=\"https:\/\/isocpp.org\/files\/papers\/n3778.html\">n3778<\/a>)<\/p><\/li>\r\n-<li><p>Variadic templates (<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2242.pdf\">n2242<\/a>)\r\n-(<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2555.pdf\">n2555<\/a>)<\/p><\/li>\r\n-<li><p>Static assertions (<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2004\/n1720.html\">n1720<\/a>)<\/p><\/li>\r\n-<li><p><code>decltype<\/code> (<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2343.pdf\">n2343<\/a>)\r\n-(<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2011\/n3276.pdf\">n3276<\/a>)<\/p><\/li>\r\n-<li><p>Right angle brackets (<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2005\/n1757.html\">n1757<\/a>)<\/p><\/li>\r\n-<li><p>Default template arguments for function templates (<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/cwg_defects.html#226\">CWG\r\n-D226<\/a>)<\/p><\/li>\r\n-<li><p>Template aliases (<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2258.pdf\">n2258<\/a>)<\/p><\/li>\r\n-<li><p>Delegating constructors (<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2006\/n1986.pdf\">n1986<\/a>)<\/p><\/li>\r\n-<li><p>Explicit conversion operators (<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2437.pdf\">n2437<\/a>)<\/p><\/li>\r\n-<li><p>Standard Layout Types (<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2342.htm\">n2342<\/a>)<\/p><\/li>\r\n-<li><p>Defaulted and deleted functions (<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2346.htm\">n2346<\/a>)<\/p><\/li>\r\n-<li><p>Dynamic initialization and destruction with concurrency (<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2660.htm\">n2660<\/a>)<\/p><\/li>\r\n-<li><p><code>final<\/code> virtual specifiers for classes and virtual\r\n-functions (<a\r\n-href=\"http:\/\/www.open-std.org\/JTC1\/SC22\/WG21\/docs\/papers\/2009\/n2928.htm\">n2928<\/a>),\r\n-(<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2010\/n3206.htm\">n3206<\/a>),\r\n-(<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2011\/n3272.htm\">n3272<\/a>)<\/p><\/li>\r\n-<li><p><code>override<\/code> virtual specifiers for virtual functions\r\n-(<a\r\n-href=\"http:\/\/www.open-std.org\/JTC1\/SC22\/WG21\/docs\/papers\/2009\/n2928.htm\">n2928<\/a>),\r\n-(<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2010\/n3206.htm\">n3206<\/a>),\r\n-(<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2011\/n3272.htm\">n3272<\/a>)<\/p><\/li>\r\n-<li><p>Range-based <code>for<\/code> loops (<a\r\n-href=\"http:\/\/www.open-std.org\/JTC1\/SC22\/WG21\/docs\/papers\/2009\/n2930.html\">n2930<\/a>)\r\n-(<a\r\n-href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/range-for\">range-for<\/a>)<\/p><\/li>\r\n-<\/ul>\r\n-<h3 id=\"excluded-features\">Excluded Features<\/h3>\r\n-<ul>\r\n-<li><p>New string and character literals<\/p>\r\n-<ul>\r\n-<li>New character types (<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2249.html\">n2249<\/a>)<\/li>\r\n-<li>Unicode string literals (<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2442.htm\">n2442<\/a>)<\/li>\r\n-<li>Raw string literals (<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2442.htm\">n2442<\/a>)<\/li>\r\n-<li>Universal character name literals (<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2170.html\">n2170<\/a>)<\/li>\r\n-<\/ul>\r\n-<p>HotSpot doesn't need any of the new character and string literal\r\n-types.<\/p><\/li>\r\n-<li><p>User-defined literals (<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2765.pdf\">n2765<\/a>)\r\n-— User-defined literals should not be added casually, but only through a\r\n-proposal to add a specific UDL.<\/p><\/li>\r\n-<li><p>Inline namespaces (<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2535.htm\">n2535<\/a>)\r\n-— HotSpot makes very limited use of namespaces.<\/p><\/li>\r\n-<li><p><code>using namespace<\/code> directives. In particular, don't use\r\n-<code>using namespace std;<\/code> to avoid needing to qualify Standard\r\n-Library names.<\/p><\/li>\r\n-<li><p>Propagating exceptions (<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2179.html\">n2179<\/a>)\r\n-— HotSpot does not permit the use of exceptions, so this feature isn't\r\n-useful.<\/p><\/li>\r\n-<li><p>Avoid namespace-scoped variables with non-constexpr\r\n-initialization. In particular, avoid variables with types requiring\r\n-non-trivial initialization or destruction. Initialization order problems\r\n-can be difficult to deal with and lead to surprises, as can destruction\r\n-ordering. HotSpot doesn't generally try to cleanup on exit, and running\r\n-destructors at exit can also lead to problems.<\/p><\/li>\r\n-<li><p><code>[[deprecated]]<\/code> attribute (<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2013\/n3760.html\">n3760<\/a>)\r\n-— Not relevant in HotSpot code.<\/p><\/li>\r\n-<li><p>Avoid most operator overloading, preferring named functions. When\r\n-operator overloading is used, ensure the semantics conform to the normal\r\n-expected behavior of the operation.<\/p><\/li>\r\n-<li><p>Avoid most implicit conversion constructors and (implicit or\r\n-explicit) conversion operators. (Note that conversion to\r\n-<code>bool<\/code> isn't needed in HotSpot code because of the \"no\r\n-implicit boolean\" guideline.)<\/p><\/li>\r\n-<li><p>Avoid covariant return types.<\/p><\/li>\r\n-<li><p>Avoid <code>goto<\/code> statements.<\/p><\/li>\r\n-<\/ul>\r\n-<h3 id=\"undecided-features\">Undecided Features<\/h3>\r\n-<p>This list is incomplete; it serves to explicitly call out some\r\n-features that have not yet been discussed.<\/p>\r\n-<ul>\r\n-<li><p>Trailing return type syntax for functions (<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2541.htm\">n2541<\/a>)<\/p><\/li>\r\n-<li><p>Variable templates (<a\r\n-href=\"https:\/\/isocpp.org\/files\/papers\/N3651.pdf\">n3651<\/a>)<\/p><\/li>\r\n-<li><p>Member initializers and aggregates (<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2013\/n3653.html\">n3653<\/a>)<\/p><\/li>\r\n-<li><p><code>[[noreturn]]<\/code> attribute (<a\r\n-href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2761.pdf\">n2761<\/a>)<\/p><\/li>\r\n-<li><p>Rvalue references and move semantics<\/p><\/li>\r\n-<\/ul>\r\n-<\/body>\r\n-<\/html>\r\n+<!DOCTYPE html>\n+<html xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\" lang=\"\" xml:lang=\"\">\n+<head>\n+  <meta charset=\"utf-8\" \/>\n+  <meta name=\"generator\" content=\"pandoc\" \/>\n+  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" \/>\n+  <title>HotSpot Coding Style<\/title>\n+  <style type=\"text\/css\">\n+      code{white-space: pre-wrap;}\n+      span.smallcaps{font-variant: small-caps;}\n+      span.underline{text-decoration: underline;}\n+      div.column{display: inline-block; vertical-align: top; width: 50%;}\n+  <\/style>\n+  <link rel=\"stylesheet\" href=\"..\/make\/data\/docs-resources\/resources\/jdk-default.css\" \/>\n+  <!--[if lt IE 9]>\n+    <script src=\"\/\/cdnjs.cloudflare.com\/ajax\/libs\/html5shiv\/3.7.3\/html5shiv-printshiv.min.js\"><\/script>\n+  <![endif]-->\n+<\/head>\n+<body>\n+<header id=\"title-block-header\">\n+<h1 class=\"title\">HotSpot Coding Style<\/h1>\n+<\/header>\n+<nav id=\"TOC\">\n+<ul>\n+<li><a href=\"#introduction\">Introduction<\/a><ul>\n+<li><a href=\"#why-care-about-style\">Why Care About Style?<\/a><\/li>\n+<li><a href=\"#counterexamples-and-updates\">Counterexamples and Updates<\/a><\/li>\n+<\/ul><\/li>\n+<li><a href=\"#structure-and-formatting\">Structure and Formatting<\/a><ul>\n+<li><a href=\"#factoring-and-class-design\">Factoring and Class Design<\/a><\/li>\n+<li><a href=\"#source-files\">Source Files<\/a><\/li>\n+<li><a href=\"#jtreg-tests\">JTReg Tests<\/a><\/li>\n+<li><a href=\"#naming\">Naming<\/a><\/li>\n+<li><a href=\"#commenting\">Commenting<\/a><\/li>\n+<li><a href=\"#macros\">Macros<\/a><\/li>\n+<li><a href=\"#whitespace\">Whitespace<\/a><\/li>\n+<li><a href=\"#miscellaneous\">Miscellaneous<\/a><\/li>\n+<\/ul><\/li>\n+<li><a href=\"#use-of-c-features\">Use of C++ Features<\/a><ul>\n+<li><a href=\"#error-handling\">Error Handling<\/a><\/li>\n+<li><a href=\"#rtti-runtime-type-information\">RTTI (Runtime Type Information)<\/a><\/li>\n+<li><a href=\"#memory-allocation\">Memory Allocation<\/a><\/li>\n+<li><a href=\"#class-inheritance\">Class Inheritance<\/a><\/li>\n+<li><a href=\"#namespaces\">Namespaces<\/a><\/li>\n+<li><a href=\"#c-standard-library\">C++ Standard Library<\/a><\/li>\n+<li><a href=\"#type-deduction\">Type Deduction<\/a><\/li>\n+<li><a href=\"#expression-sfinae\">Expression SFINAE<\/a><\/li>\n+<li><a href=\"#enum\">enum<\/a><\/li>\n+<li><a href=\"#thread_local\">thread_local<\/a><\/li>\n+<li><a href=\"#nullptr\">nullptr<\/a><\/li>\n+<li><a href=\"#atomic\">&lt;atomic&gt;<\/a><\/li>\n+<li><a href=\"#uniform-initialization\">Uniform Initialization<\/a><\/li>\n+<li><a href=\"#local-function-objects\">Local Function Objects<\/a><\/li>\n+<li><a href=\"#additional-permitted-features\">Additional Permitted Features<\/a><\/li>\n+<li><a href=\"#excluded-features\">Excluded Features<\/a><\/li>\n+<li><a href=\"#undecided-features\">Undecided Features<\/a><\/li>\n+<\/ul><\/li>\n+<\/ul>\n+<\/nav>\n+<h2 id=\"introduction\">Introduction<\/h2>\n+<p>This is a collection of rules, guidelines, and suggestions for writing HotSpot code. Following these will help new code fit in with existing HotSpot code, making it easier to read and maintain. Failure to follow these guidelines may lead to discussion during code reviews, if not outright rejection of a change.<\/p>\n+<h3 id=\"why-care-about-style\">Why Care About Style?<\/h3>\n+<p>Some programmers seem to have lexers and even C preprocessors installed directly behind their eyeballs. The rest of us require code that is not only functionally correct but also easy to read. More than that, since there is no one style for easy-to-read code, and since a mashup of many styles is just as confusing as no style at all, it is important for coders to be conscious of the many implicit stylistic choices that historically have gone into the HotSpot code base.<\/p>\n+<p>Some of these guidelines are driven by the cross-platform requirements for HotSpot. Shared code must work on a variety of platforms, and may encounter deficiencies in some. Using platform conditionalization in shared code is usually avoided, while shared code is strongly preferred to multiple platform-dependent implementations, so some language features may be recommended against.<\/p>\n+<p>Some of the guidelines here are relatively arbitrary choices among equally plausible alternatives. The purpose of stating and enforcing these rules is largely to provide a consistent look to the code. That consistency makes the code more readable by avoiding non-functional distractions from the interesting functionality.<\/p>\n+<p>When changing pre-existing code, it is reasonable to adjust it to match these conventions. Exception: If the pre-existing code clearly conforms locally to its own peculiar conventions, it is not worth reformatting the whole thing. Also consider separating changes that make extensive stylistic updates from those which make functional changes.<\/p>\n+<h3 id=\"counterexamples-and-updates\">Counterexamples and Updates<\/h3>\n+<p>Many of the guidelines mentioned here have (sometimes widespread) counterexamples in the HotSpot code base. Finding a counterexample is not sufficient justification for new code to follow the counterexample as a precedent, since readers of your code will rightfully expect your code to follow the greater bulk of precedents documented here.<\/p>\n+<p>Occasionally a guideline mentioned here may be just out of synch with the actual HotSpot code base. If you find that a guideline is consistently contradicted by a large number of counterexamples, please bring it up for discussion and possible change. The architectural rule, of course, is &quot;When in Rome do as the Romans&quot;. Sometimes in the suburbs of Rome the rules are a little different; these differences can be pointed out here.<\/p>\n+<p>Proposed changes should be discussed on the <a href=\"mailto:hotspot-dev@openjdk.java.net\">HotSpot Developers<\/a> mailing list. Changes are likely to be cautious and incremental, since HotSpot coders have been using these guidelines for years.<\/p>\n+<p>Substantive changes are approved by <a href=\"https:\/\/en.wikipedia.org\/wiki\/Rough_consensus\">rough consensus<\/a> of the <a href=\"https:\/\/openjdk.java.net\/census#hotspot\">HotSpot Group<\/a> Members. The Group Lead determines whether consensus has been reached.<\/p>\n+<p>Editorial changes (changes that only affect the description of HotSpot style, not its substance) do not require the full consensus gathering process. The normal HotSpot pull request process may be used for editorial changes, with the additional requirement that the requisite reviewers are also HotSpot Group Members.<\/p>\n+<h2 id=\"structure-and-formatting\">Structure and Formatting<\/h2>\n+<h3 id=\"factoring-and-class-design\">Factoring and Class Design<\/h3>\n+<ul>\n+<li><p>Group related code together, so readers can concentrate on one section of one file.<\/p><\/li>\n+<li><p>Classes are the primary code structuring mechanism. Place related functionality in a class, or a set of related classes. Use of either namespaces or public non-member functions is rare in HotSpot code. Static non-member functions are not uncommon.<\/p><\/li>\n+<li><p>If a class <code>FooBar<\/code> is going to be used in more than one place, put it a file named fooBar.hpp and fooBar.cpp. If the class is a sidekick to a more important class <code>BazBat<\/code>, it can go in bazBat.hpp.<\/p><\/li>\n+<li><p>Put a member function <code>FooBar::bang<\/code> into the same file that defined <code>FooBar<\/code>, or its associated <em>.inline.hpp or <\/em>.cpp file.<\/p><\/li>\n+<li><p>Use public accessor functions for member variables accessed outside the class.<\/p><\/li>\n+<li><p>Assign names to constant literals and use the names instead.<\/p><\/li>\n+<li><p>Keep functions small, a screenful at most. Split out chunks of logic into file-local classes or static functions if needed.<\/p><\/li>\n+<li><p>Factor away nonessential complexity into local inline helper functions and helper classes.<\/p><\/li>\n+<li><p>Think clearly about internal invariants that apply to each class, and document them in the form of asserts within member functions.<\/p><\/li>\n+<li><p>Make simple, self-evident contracts for member functions. If you cannot communicate a simple contract, redesign the class.<\/p><\/li>\n+<li><p>Implement classes as if expecting rough usage by clients. Check for incorrect usage of a class using <code>assert(...)<\/code>, <code>guarantee(...)<\/code>, <code>ShouldNotReachHere()<\/code> and comments wherever needed. Performance is almost never a reason to omit asserts.<\/p><\/li>\n+<li><p>When possible, design as if for reusability. This forces a clear design of the class's externals, and clean hiding of its internals.<\/p><\/li>\n+<li><p>Initialize all variables and data structures to a known state. If a class has a constructor, initialize it there.<\/p><\/li>\n+<li><p>Do no optimization before its time. Prove the need to optimize.<\/p><\/li>\n+<li><p>When you must defactor to optimize, preserve as much structure as possible. If you must hand-inline some name, label the local copy with the original name.<\/p><\/li>\n+<li><p>If you need to use a hidden detail (e.g., a structure offset), name it (as a constant or function) in the class that owns it.<\/p><\/li>\n+<li><p>Don't use the Copy and Paste keys to replicate more than a couple lines of code. Name what you must repeat.<\/p><\/li>\n+<li><p>If a class needs a member function to change a user-visible attribute, the change should be done with a &quot;setter&quot; accessor matched to the simple &quot;getter&quot;.<\/p><\/li>\n+<\/ul>\n+<h3 id=\"source-files\">Source Files<\/h3>\n+<ul>\n+<li><p>All source files must have a globally unique basename. The build system depends on this uniqueness.<\/p><\/li>\n+<li><p>Do not put non-trivial function implementations in .hpp files. If the implementation depends on other .hpp files, put it in a .cpp or a .inline.hpp file.<\/p><\/li>\n+<li><p>.inline.hpp files should only be included in .cpp or .inline.hpp files.<\/p><\/li>\n+<li><p>All .inline.hpp files should include their corresponding .hpp file as the first include line. Declarations needed by other files should be put in the .hpp file, and not in the .inline.hpp file. This rule exists to resolve problems with circular dependencies between .inline.hpp files.<\/p><\/li>\n+<li><p>All .cpp files include precompiled.hpp as the first include line.<\/p><\/li>\n+<li><p>precompiled.hpp is just a build time optimization, so don't rely on it to resolve include problems.<\/p><\/li>\n+<li><p>Keep the include lines alphabetically sorted.<\/p><\/li>\n+<li><p>Put conditional inclusions (<code>#if ...<\/code>) at the end of the include list.<\/p><\/li>\n+<\/ul>\n+<h3 id=\"jtreg-tests\">JTReg Tests<\/h3>\n+<ul>\n+<li><p>JTReg tests should have meaningful names.<\/p><\/li>\n+<li><p>JTReg tests associated with specific bugs should be tagged with the <code>@bug<\/code> keyword in the test description.<\/p><\/li>\n+<li><p>JTReg tests should be organized by component or feature under <code>test\/<\/code>, in a directory hierarchy that generally follows that of the <code>src\/<\/code> directory. There may be additional subdirectories to further categorize tests by feature. This structure makes it easy to run a collection of tests associated with a specific feature by specifying the associated directory as the source of the tests to run.<\/p>\n+<ul>\n+<li>Some (older) tests use the associated bug number in the directory name, the test name, or both. That naming style should no longer be used, with existing tests using that style being candidates for migration.<\/li>\n+<\/ul><\/li>\n+<\/ul>\n+<h3 id=\"naming\">Naming<\/h3>\n+<ul>\n+<li><p>The length of a name may be correlated to the size of its scope. In particular, short names (even single letter names) may be fine in a small scope, but are usually inappropriate for larger scopes.<\/p><\/li>\n+<li><p>Prefer whole words rather than abbreviations, unless the abbreviation is more widely used than the long form in the code's domain.<\/p><\/li>\n+<li><p>Choose names consistently. Do not introduce spurious variations. Abbreviate corresponding terms to a consistent length.<\/p><\/li>\n+<li><p>Global names must be unique, to avoid <a href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/definition\" title=\"One Definition Rule\">One Definition Rule<\/a> (ODR) violations. A common prefixing scheme for related global names is often used. (This is instead of using namespaces, which are mostly avoided in HotSpot.)<\/p><\/li>\n+<li><p>Don't give two names to the semantically same thing. But use different names for semantically different things, even if they are representationally the same. (So use meaningful <code>typedef<\/code> or template alias names where appropriate.)<\/p><\/li>\n+<li><p>When choosing names, avoid categorical nouns like &quot;variable&quot;, &quot;field&quot;, &quot;parameter&quot;, &quot;value&quot;, and verbs like &quot;compute&quot;, &quot;get&quot;. (<code>storeValue(int param)<\/code> is bad.)<\/p><\/li>\n+<li><p>Type names and global names should use mixed-case with the first letter of each word capitalized (<code>FooBar<\/code>).<\/p><\/li>\n+<li><p>Embedded abbreviations in otherwise mixed-case names are usually capitalized entirely rather than being treated as a single word with only the initial letter capitalized, e.g. &quot;HTML&quot; rather than &quot;Html&quot;.<\/p><\/li>\n+<li><p>Function and local variable names use lowercase with words separated by a single underscore (<code>foo_bar<\/code>).<\/p><\/li>\n+<li><p>Class data member names have a leading underscore, and use lowercase with words separated by a single underscore (<code>_foo_bar<\/code>).<\/p><\/li>\n+<li><p>Constant names may be upper-case or mixed-case, according to historical necessity. (Note: There are many examples of constants with lowercase names.)<\/p><\/li>\n+<li><p>Constant names should follow an existing pattern, and must have a distinct appearance from other names in related APIs.<\/p><\/li>\n+<li><p>Class and type names should be noun phrases. Consider an &quot;er&quot; suffix for a class that represents an action.<\/p><\/li>\n+<li><p>Function names should be verb phrases that reflect changes of state known to a class's user, or else noun phrases if they cause no change of state visible to the class's user.<\/p><\/li>\n+<li><p>Getter accessor names are noun phrases, with no &quot;<code>get_<\/code>&quot; noise word. Boolean getters can also begin with &quot;<code>is_<\/code>&quot; or &quot;<code>has_<\/code>&quot;. Member function for reading data members usually have the same name as the data member, exclusive of the leading underscore.<\/p><\/li>\n+<li><p>Setter accessor names prepend &quot;<code>set_<\/code>&quot; to the getter name.<\/p><\/li>\n+<li><p>Other member function names are verb phrases, as if commands to the receiver.<\/p><\/li>\n+<li><p>Avoid leading underscores (as &quot;<code>_oop<\/code>&quot;) except in cases required above. (Names with leading underscores can cause portability problems.)<\/p><\/li>\n+<\/ul>\n+<h3 id=\"commenting\">Commenting<\/h3>\n+<ul>\n+<li><p>Clearly comment subtle fixes.<\/p><\/li>\n+<li><p>Clearly comment tricky classes and functions.<\/p><\/li>\n+<li><p>If you have to choose between commenting code and writing wiki content, comment the code. Link from the wiki to the source file if it makes sense.<\/p><\/li>\n+<li><p>As a general rule don't add bug numbers to comments (they would soon overwhelm the code). But if the bug report contains significant information that can't reasonably be added as a comment, then refer to the bug report.<\/p><\/li>\n+<li><p>Personal names are discouraged in the source code, which is a team product.<\/p><\/li>\n+<\/ul>\n+<h3 id=\"macros\">Macros<\/h3>\n+<ul>\n+<li><p>You can almost always use an inline function or class instead of a macro. Use a macro only when you really need it.<\/p><\/li>\n+<li><p>Templates may be preferable to multi-line macros. (There may be subtle performance effects with templates on some platforms; revert to macros if absolutely necessary.)<\/p><\/li>\n+<li><p><code>#ifdef<\/code>s should not be used to introduce platform-specific code into shared code (except for <code>_LP64<\/code>). They must be used to manage header files, in the pattern found at the top of every source file. They should be used mainly for major build features, including <code>PRODUCT<\/code>, <code>ASSERT<\/code>, <code>_LP64<\/code>, <code>INCLUDE_SERIALGC<\/code>, <code>COMPILER1<\/code>, etc.<\/p><\/li>\n+<li><p>For build features such as <code>PRODUCT<\/code>, use <code>#ifdef PRODUCT<\/code> for multiple-line inclusions or exclusions.<\/p><\/li>\n+<li><p>For short inclusions or exclusions based on build features, use macros like <code>PRODUCT_ONLY<\/code> and <code>NOT_PRODUCT<\/code>. But avoid using them with multiple-line arguments, since debuggers do not handle that well.<\/p><\/li>\n+<li><p>Use <code>CATCH<\/code>, <code>THROW<\/code>, etc. for HotSpot-specific exception processing.<\/p><\/li>\n+<\/ul>\n+<h3 id=\"whitespace\">Whitespace<\/h3>\n+<ul>\n+<li><p>In general, don't change whitespace unless it improves readability or consistency. Gratuitous whitespace changes will make integrations and backports more difficult.<\/p><\/li>\n+<li><p>Use One-True-Brace-Style. The opening brace for a function or class is normally at the end of the line; it is sometimes moved to the beginning of the next line for emphasis. Substatements are enclosed in braces, even if there is only a single statement. Extremely simple one-line statements may drop braces around a substatement.<\/p><\/li>\n+<li><p>Indentation levels are two columns.<\/p><\/li>\n+<li><p>There is no hard line length limit. That said, bear in mind that excessively long lines can cause difficulties. Some people like to have multiple side-by-side windows in their editors, and long lines may force them to choose among unpleasant options. They can use wide windows, reducing the number that can fit across the screen, and wasting a lot of screen real estate because most lines are not that long. Alternatively, they can have more windows across the screen, with long lines wrapping (or worse, requiring scrolling to see in their entirety), which is harder to read. Similar issues exist for side-by-side code reviews.<\/p><\/li>\n+<li><p>Tabs are not allowed in code. Set your editor accordingly.<br> (Emacs: <code>(setq-default indent-tabs-mode nil)<\/code>.)<\/p><\/li>\n+<li><p>Use good taste to break lines and align corresponding tokens on adjacent lines.<\/p><\/li>\n+<li><p>Use spaces around operators, especially comparisons and assignments. (Relaxable for boolean expressions and high-precedence operators in classic math-style formulas.)<\/p><\/li>\n+<li><p>Put spaces on both sides of control flow keywords <code>if<\/code>, <code>else<\/code>, <code>for<\/code>, <code>switch<\/code>, etc. Don't add spaces around the associated <em>control<\/em> expressions. Examples:<\/p>\n+<pre><code>while (test_foo(args...)) {   \/\/ Yes\n+while(test_foo(args...)) {    \/\/ No, missing space after while\n+while ( test_foo(args...) ) { \/\/ No, excess spaces around control<\/code><\/pre><\/li>\n+<li><p>Use extra parentheses in expressions whenever operator precedence seems doubtful. Always use parentheses in shift\/mask expressions (<code>&lt;&lt;<\/code>, <code>&amp;<\/code>, <code>|<\/code>). Don't add whitespace immediately inside parentheses.<\/p><\/li>\n+<li><p>Use more spaces and blank lines between larger constructs, such as classes or function definitions.<\/p><\/li>\n+<li><p>If the surrounding code has any sort of vertical organization, adjust new lines horizontally to be consistent with that organization. (E.g., trailing backslashes on long macro definitions often align.)<\/p><\/li>\n+<\/ul>\n+<h3 id=\"miscellaneous\">Miscellaneous<\/h3>\n+<ul>\n+<li><p>Use the <a href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/raii\" title=\"Resource Acquisition Is Initialization\">Resource Acquisition Is Initialization<\/a> (RAII) design pattern to manage bracketed critical sections. See class <code>ResourceMark<\/code> for an example.<\/p><\/li>\n+<li>Avoid implicit conversions to <code>bool<\/code>.\n+<ul>\n+<li>Use <code>bool<\/code> for boolean values.<\/li>\n+<li>Do not use ints or pointers as (implicit) booleans with <code>&amp;&amp;<\/code>, <code>||<\/code>, <code>if<\/code>, <code>while<\/code>. Instead, compare explicitly, i.e. <code>if (x != 0)<\/code> or <code>if (ptr != nullptr)<\/code>, etc.<\/li>\n+<li>Do not use declarations in <em>condition<\/em> forms, i.e. don't use <code>if (T v = value) { ... }<\/code>.<\/li>\n+<\/ul><\/li>\n+<li><p>Use functions from globalDefinitions.hpp and related files when performing bitwise operations on integers. Do not code directly as C operators, unless they are extremely simple. (Examples: <code>align_up<\/code>, <code>is_power_of_2<\/code>, <code>exact_log2<\/code>.)<\/p><\/li>\n+<li><p>Use arrays with abstractions supporting range checks.<\/p><\/li>\n+<li><p>Always enumerate all cases in a switch statement or provide a default case. It is ok to have an empty default with comment.<\/p><\/li>\n+<\/ul>\n+<h2 id=\"use-of-c-features\">Use of C++ Features<\/h2>\n+<p>HotSpot was originally written in a subset of the C++98\/03 language. More recently, support for C++14 is provided, though again, HotSpot only uses a subset. (Backports to JDK versions lacking support for more recent Standards must of course stick with the original C++98\/03 subset.)<\/p>\n+<p>This section describes that subset. Features from the C++98\/03 language may be used unless explicitly excluded here. Features from C++11 and C++14 may be explicitly permitted or explicitly excluded, and discussed accordingly here. There is a third category, undecided features, about which HotSpot developers have not yet reached a consensus, or perhaps have not discussed at all. Use of these features is also excluded.<\/p>\n+<p>(The use of some features may not be immediately obvious and may slip in anyway, since the compiler will accept them. The code review process is the main defense against this.)<\/p>\n+<p>Some features are discussed in their own subsection, typically to provide more extensive discussion or rationale for limitations. Features that don't have their own subsection are listed in omnibus feature sections for permitted, excluded, and undecided features.<\/p>\n+<p>Lists of new features for C++11 and C++14, along with links to their descriptions, can be found in the online documentation for some of the compilers and libraries. The C++14 Standard is the definitive description.<\/p>\n+<ul>\n+<li><a href=\"https:\/\/gcc.gnu.org\/projects\/cxx-status.html\">C++ Standards Support in GCC<\/a><\/li>\n+<li><a href=\"https:\/\/clang.llvm.org\/cxx_status.html\">C++ Support in Clang<\/a><\/li>\n+<li><a href=\"https:\/\/docs.microsoft.com\/en-us\/cpp\/visual-cpp-language-conformance\">Visual C++ Language Conformance<\/a><\/li>\n+<li><a href=\"https:\/\/gcc.gnu.org\/onlinedocs\/libstdc++\/manual\/status.html\">libstdc++ Status<\/a><\/li>\n+<li><a href=\"https:\/\/libcxx.llvm.org\/cxx1y_status.html\">libc++ Status<\/a><\/li>\n+<\/ul>\n+<p>As a rule of thumb, permitting features which simplify writing code and, especially, reading code, is encouraged.<\/p>\n+<p>Similar discussions for some other projects:<\/p>\n+<ul>\n+<li><p><a href=\"https:\/\/google.github.io\/styleguide\/cppguide.html\">Google C++ Style Guide<\/a> — Currently (2020) targeting C++17.<\/p><\/li>\n+<li><p><a href=\"https:\/\/chromium.googlesource.com\/chromium\/src\/+\/main\/styleguide\/c++\/c++-features.md\">C++11 and C++14 use in Chromium<\/a> — Categorizes features as allowed, banned, or to be discussed.<\/p><\/li>\n+<li><p><a href=\"https:\/\/llvm.org\/docs\/CodingStandards.html\">llvm Coding Standards<\/a> — Currently (2020) targeting C++14.<\/p><\/li>\n+<li><p><a href=\"https:\/\/firefox-source-docs.mozilla.org\/code-quality\/coding-style\/using_cxx_in_firefox_code.html\">Using C++ in Mozilla code<\/a> — C++17 support is required for recent versions (2020).<\/p><\/li>\n+<\/ul>\n+<h3 id=\"error-handling\">Error Handling<\/h3>\n+<p>Do not use exceptions. Exceptions are disabled by the build configuration for some platforms.<\/p>\n+<p>Rationale: There is significant concern over the performance cost of exceptions and their usage model and implications for maintainable code. That's not just a matter of history that has been fixed; there remain questions and problems even today (2019). See, for example, <a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2018\/p0709r0.pdf\">Zero cost deterministic exceptions<\/a>. Because of this, HotSpot has always used a build configuration that disables exceptions where that is available. As a result, HotSpot code uses error handling mechanisms such as two-phase construction, factory functions, returning error codes, and immediate termination. Even if the cost of exceptions were not a concern, the existing body of code was not written with exception safety in mind. Making HotSpot exception safe would be a very large undertaking.<\/p>\n+<p>In addition to the usual alternatives to exceptions, HotSpot provides its own exception mechanism. This is based on a set of macros defined in utilities\/exceptions.hpp.<\/p>\n+<h3 id=\"rtti-runtime-type-information\">RTTI (Runtime Type Information)<\/h3>\n+<p>Do not use <a href=\"https:\/\/en.wikipedia.org\/wiki\/Run-time_type_information\" title=\"Runtime Type Information\">Runtime Type Information<\/a> (RTTI). <a href=\"https:\/\/en.wikipedia.org\/wiki\/Run-time_type_information\" title=\"Runtime Type Information\">RTTI<\/a> is disabled by the build configuration for some platforms. Among other things, this means <code>dynamic_cast<\/code> cannot be used.<\/p>\n+<p>Rationale: Other than to implement exceptions (which HotSpot doesn't use), most potential uses of <a href=\"https:\/\/en.wikipedia.org\/wiki\/Run-time_type_information\" title=\"Runtime Type Information\">RTTI<\/a> are better done via virtual functions. Some of the remainder can be replaced by bespoke mechanisms. The cost of the additional runtime data structures needed to support <a href=\"https:\/\/en.wikipedia.org\/wiki\/Run-time_type_information\" title=\"Runtime Type Information\">RTTI<\/a> are deemed not worthwhile, given the alternatives.<\/p>\n+<h3 id=\"memory-allocation\">Memory Allocation<\/h3>\n+<p>Do not use the standard global allocation and deallocation functions (operator new and related functions). Use of these functions by HotSpot code is disabled for some platforms.<\/p>\n+<p>Rationale: HotSpot often uses &quot;resource&quot; or &quot;arena&quot; allocation. Even where heap allocation is used, the standard global functions are avoided in favor of wrappers around malloc and free that support the VM's Native Memory Tracking (NMT) feature.<\/p>\n+<p>Native memory allocation failures are often treated as non-recoverable. The place where &quot;out of memory&quot; is (first) detected may be an innocent bystander, unrelated to the actual culprit.<\/p>\n+<h3 id=\"class-inheritance\">Class Inheritance<\/h3>\n+<p>Use public single inheritance.<\/p>\n+<p>Prefer composition rather than non-public inheritance.<\/p>\n+<p>Restrict inheritance to the &quot;is-a&quot; case; use composition rather than non-is-a related inheritance.<\/p>\n+<p>Avoid multiple inheritance. Never use virtual inheritance.<\/p>\n+<h3 id=\"namespaces\">Namespaces<\/h3>\n+<p>Avoid using namespaces. HotSpot code normally uses &quot;all static&quot; classes rather than namespaces for grouping. An &quot;all static&quot; class is not instantiable, has only static members, and is normally derived (possibly indirectly) from the helper class <code>AllStatic<\/code>.<\/p>\n+<p>Benefits of using such classes include:<\/p>\n+<ul>\n+<li><p>Provides access control for members, which is unavailable with namespaces.<\/p><\/li>\n+<li><p>Avoids <a href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/adl\" title=\"Argument Dependent Lookup\">Argument Dependent Lookup<\/a> (ADL).<\/p><\/li>\n+<li><p>Closed for additional members. Namespaces allow names to be added in multiple contexts, making it harder to see the complete API.<\/p><\/li>\n+<\/ul>\n+<p>Namespaces should be used only in cases where one of those &quot;benefits&quot; is actually a hindrance.<\/p>\n+<p>In particular, don't use anonymous namespaces. They seem like they should be useful, and indeed have some real benefits for naming and generated code size on some platforms. Unfortunately, debuggers don't seem to like them at all.<\/p>\n+<p><a href=\"https:\/\/groups.google.com\/forum\/#!topic\/mozilla.dev.platform\/KsaG3lEEaRM\" class=\"uri\">https:\/\/groups.google.com\/forum\/#!topic\/mozilla.dev.platform\/KsaG3lEEaRM<\/a><br> Suggests Visual Studio debugger might not be able to refer to anonymous namespace symbols, so can't set breakpoints in them. Though the discussion seems to go back and forth on that.<\/p>\n+<p><a href=\"https:\/\/firefox-source-docs.mozilla.org\/code-quality\/coding-style\/coding_style_cpp.html\" class=\"uri\">https:\/\/firefox-source-docs.mozilla.org\/code-quality\/coding-style\/coding_style_cpp.html<\/a><br> Search for &quot;Anonymous namespaces&quot; Suggests preferring &quot;static&quot; to anonymous namespaces where applicable, because of poor debugger support for anonymous namespaces.<\/p>\n+<p><a href=\"https:\/\/sourceware.org\/bugzilla\/show_bug.cgi?id=16874\" class=\"uri\">https:\/\/sourceware.org\/bugzilla\/show_bug.cgi?id=16874<\/a><br> Bug for similar gdb problems.<\/p>\n+<h3 id=\"c-standard-library\">C++ Standard Library<\/h3>\n+<p>Avoid using the C++ Standard Library.<\/p>\n+<p>Historically, HotSpot has mostly avoided use of the Standard Library.<\/p>\n+<p>(It used to be impossible to use most of it in shared code, because the build configuration for Solaris with Solaris Studio made all but a couple of pieces inaccessible. Support for header-only parts was added in mid-2017. Support for Solaris was removed in 2020.)<\/p>\n+<p>Some reasons for this include<\/p>\n+<ul>\n+<li><p>Exceptions. Perhaps the largest core issue with adopting the use of Standard Library facilities is exceptions. HotSpot does not use exceptions and, for platforms which allow doing so, builds with them turned off. Many Standard Library facilities implicitly or explicitly use exceptions.<\/p><\/li>\n+<li><p><code>assert<\/code>. An issue that is quickly encountered is the <code>assert<\/code> macro name collision (<a href=\"https:\/\/bugs.openjdk.java.net\/browse\/JDK-8007770\">JDK-8007770<\/a>). Some mechanism for addressing this would be needed before much of the Standard Library could be used. (Not all Standard Library implementations use assert in header files, but some do.)<\/p><\/li>\n+<li><p>Memory allocation. HotSpot requires explicit control over where allocations occur. The C++98\/03 <code>std::allocator<\/code> class is too limited to support our usage. (Changes in more recent Standards may remove this limitation.)<\/p><\/li>\n+<li><p>Implementation vagaries. Bugs, or simply different implementation choices, can lead to different behaviors among the various Standard Libraries we need to deal with.<\/p><\/li>\n+<li><p>Inconsistent naming conventions. HotSpot and the C++ Standard use different naming conventions. The coexistence of those different conventions might appear jarring and reduce readability.<\/p><\/li>\n+<\/ul>\n+<p>There are a few exceptions to this rule.<\/p>\n+<ul>\n+<li><code>#include &lt;new&gt;<\/code> to use placement <code>new<\/code>, <code>std::nothrow<\/code>, and <code>std::nothrow_t<\/code>.<\/li>\n+<li><code>#include &lt;limits&gt;<\/code> to use <code>std::numeric_limits<\/code>.<\/li>\n+<li><code>#include &lt;type_traits&gt;<\/code>.<\/li>\n+<li><code>#include &lt;cstddef&gt;<\/code> to use <code>std::nullptr_t<\/code>.<\/li>\n+<\/ul>\n+<p>TODO: Rather than directly #including (permitted) Standard Library headers, use a convention of #including wrapper headers (in some location like hotspot\/shared\/stdcpp). This provides a single place for dealing with issues we might have for any given header, esp. platform-specific issues.<\/p>\n+<h3 id=\"type-deduction\">Type Deduction<\/h3>\n+<p>Use type deduction only if it makes the code clearer or safer. Do not use it merely to avoid the inconvenience of writing an explicit type, unless that type is itself difficult to write. An example of the latter is a function template return type that depends on template parameters in a non-trivial way.<\/p>\n+<p>There are several contexts where types are deduced.<\/p>\n+<ul>\n+<li><p>Function argument deduction. This is always permitted, and indeed encouraged. It is nearly always better to allow the type of a function template argument to be deduced rather than explicitly specified.<\/p><\/li>\n+<li><p><code>auto<\/code> variable declarations (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2006\/n1984.pdf\">n1984<\/a>)<br> For local variables, this can be used to make the code clearer by eliminating type information that is obvious or irrelevant. Excessive use can make code much harder to understand.<\/p><\/li>\n+<li><p>Function return type deduction (<a href=\"https:\/\/isocpp.org\/files\/papers\/N3638.html\">n3638<\/a>)<br> Only use if the function body has a very small number of <code>return<\/code> statements, and generally relatively little other code.<\/p><\/li>\n+<li><p>Also see <a href=\"#lambdaexpressions\">lambda expressions<\/a>.<\/p><\/li>\n+<\/ul>\n+<h3 id=\"expression-sfinae\">Expression SFINAE<\/h3>\n+<p><a href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/sfinae\" title=\"Substitution Failure Is Not An Error\">Substitution Failure Is Not An Error<\/a> (SFINAE) is a template metaprogramming technique that makes use of template parameter substitution failures to make compile-time decisions.<\/p>\n+<p>C++11 relaxed the rules for what constitutes a hard-error when attempting to substitute template parameters with template arguments, making most deduction errors be substitution errors; see (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2634.html\">n2634<\/a>). This makes <a href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/sfinae\" title=\"Substitution Failure Is Not An Error\">SFINAE<\/a> more powerful and easier to use. However, the implementation complexity for this change is significant, and this seems to be a place where obscure corner-case bugs in various compilers can be found. So while this feature can (and indeed should) be used (and would be difficult to avoid), caution should be used when pushing to extremes.<\/p>\n+<p>Here are a few closely related example bugs:<br> <a href=\"https:\/\/gcc.gnu.org\/bugzilla\/show_bug.cgi?id=95468\" class=\"uri\">https:\/\/gcc.gnu.org\/bugzilla\/show_bug.cgi?id=95468<\/a><br> <a href=\"https:\/\/developercommunity.visualstudio.com\/content\/problem\/396562\/sizeof-deduced-type-is-sometimes-not-a-constant-ex.html\" class=\"uri\">https:\/\/developercommunity.visualstudio.com\/content\/problem\/396562\/sizeof-deduced-type-is-sometimes-not-a-constant-ex.html<\/a><\/p>\n+<h3 id=\"enum\">enum<\/h3>\n+<p>Where appropriate, <em>scoped-enums<\/em> should be used. (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2347.pdf\">n2347<\/a>)<\/p>\n+<p>Use of <em>unscoped-enums<\/em> is permitted, though ordinary constants may be preferable when the automatic initializer feature isn't used.<\/p>\n+<p>The underlying type (the <em>enum-base<\/em>) of an unscoped enum type should always be specified explicitly. When unspecified, the underlying type is dependent on the range of the enumerator values and the platform.<\/p>\n+<p>The underlying type of a <em>scoped-enum<\/em> should also be specified explicitly if conversions may be applied to values of that type.<\/p>\n+<p>Due to bugs in certain (very old) compilers, there is widespread use of enums and avoidance of in-class initialization of static integral constant members. Compilers having such bugs are no longer supported. Except where an enum is semantically appropriate, new code should use integral constants.<\/p>\n+<h3 id=\"thread_local\">thread_local<\/h3>\n+<p>Do not use <code>thread_local<\/code> (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2659.htm\">n2659<\/a>); instead, use the HotSpot macro <code>THREAD_LOCAL<\/code>. The initializer must be a constant expression.<\/p>\n+<p>As was discussed in the review for <a href=\"https:\/\/mail.openjdk.java.net\/pipermail\/hotspot-dev\/2019-September\/039487.html\">JDK-8230877<\/a>, <code>thread_local<\/code> allows dynamic initialization and destruction semantics. However, that support requires a run-time penalty for references to non-function-local <code>thread_local<\/code> variables defined in a different translation unit, even if they don't need dynamic initialization. Dynamic initialization and destruction of namespace-scoped thread local variables also has the same ordering problems as for ordinary namespace-scoped variables.<\/p>\n+<h3 id=\"nullptr\">nullptr<\/h3>\n+<p>Prefer <code>nullptr<\/code> (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2431.pdf\">n2431<\/a>) to <code>NULL<\/code>. Don't use (constexpr or literal) 0 for pointers.<\/p>\n+<p>For historical reasons there are widespread uses of both <code>NULL<\/code> and of integer 0 as a pointer value.<\/p>\n+<h3 id=\"atomic\">&lt;atomic&gt;<\/h3>\n+<p>Do not use facilities provided by the <code>&lt;atomic&gt;<\/code> header (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2427.html\">n2427<\/a>), (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2752.htm\">n2752<\/a>); instead, use the HotSpot <code>Atomic<\/code> class and related facilities.<\/p>\n+<p>Atomic operations in HotSpot code must have semantics which are consistent with those provided by the JDK's compilers for Java. There are platform-specific implementation choices that a C++ compiler might make or change that are outside the scope of the C++ Standard, and might differ from what the Java compilers implement.<\/p>\n+<p>In addition, HotSpot <code>Atomic<\/code> has a concept of &quot;conservative&quot; memory ordering, which may differ from (may be stronger than) sequentially consistent. There are algorithms in HotSpot that are believed to rely on that ordering.<\/p>\n+<h3 id=\"uniform-initialization\">Uniform Initialization<\/h3>\n+<p>The use of <em>uniform initialization<\/em> (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2672.htm\">n2672<\/a>), also known as <em>brace initialization<\/em>, is permitted.<\/p>\n+<p>Some relevant sections from cppreference.com:<\/p>\n+<ul>\n+<li><a href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/initialization\">initialization<\/a><\/li>\n+<li><a href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/value_initialization\">value initialization<\/a><\/li>\n+<li><a href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/direct_initialization\">direct initialization<\/a><\/li>\n+<li><a href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/list_initialization\">list initialization<\/a><\/li>\n+<li><a href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/aggregate_initialization\">aggregate initialization<\/a><\/li>\n+<\/ul>\n+<p>Although related, the use of <code>std::initializer_list<\/code> remains forbidden, as part of the avoidance of the C++ Standard Library in HotSpot code.<\/p>\n+<h3 id=\"local-function-objects\">Local Function Objects<\/h3>\n+<ul>\n+<li>Local function objects, including lambda expressions, may be used.<\/li>\n+<li>Lambda expressions must only be used as a downward value.<\/li>\n+<li>Prefer <code>[&amp;]<\/code> as the capture list of a lambda expression.<\/li>\n+<li>Return type deduction for lambda expressions is permitted, and indeed encouraged.<\/li>\n+<li>An empty parameter list for a lambda expression may be elided.<\/li>\n+<li>A lambda expression must not be <code>mutable<\/code>.<\/li>\n+<li>Generic lambda expressions are permitted.<\/li>\n+<li>Lambda expressions should be relatively simple.<\/li>\n+<li>Anonymous lambda expressions should not overly clutter the enclosing expression.<\/li>\n+<li>An anonymous lambda expression must not be directly invoked.<\/li>\n+<li>Bind expressions are forbidden.<\/li>\n+<\/ul>\n+<p>Single-use function objects can be defined locally within a function, directly at the point of use. This is an alternative to having a function or function object class defined at class or namespace scope.<\/p>\n+<p>This usage was somewhat limited by C++03, which does not permit such a class to be used as a template parameter. That restriction was removed by C++11 (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2657.htm\">n2657<\/a>). Use of this feature is permitted.<\/p>\n+<p>Many HotSpot protocols involve &quot;function-like&quot; objects that involve some named member function rather than a call operator. For example, a function that performs some action on all threads might be written as<\/p>\n+<pre><code>void do_something() {\n+  struct DoSomething : public ThreadClosure {\n+    virtual void do_thread(Thread* t) {\n+      ... do something with t ...\n+    }\n+  } closure;\n+  Threads::threads_do(&amp;closure);\n+}<\/code><\/pre>\n+<p>HotSpot code has historically usually placed the DoSomething class at namespace (or sometimes class) scope. This separates the function's code from its use, often to the detriment of readability. It requires giving the class a globally unique name (if at namespace scope). It also loses the information that the class is intended for use in exactly one place, and does not have any subclasses. (However, the latter can now be indicated by declaring it <code>final<\/code>.) Often, for simplicity, a local class will skip things like access control and accessor functions, giving the enclosing function direct access to the implementation and eliminating some boilerplate that might be provided if the class is in some outer (more accessible) scope. On the other hand, if there is a lot of surrounding code in the function body or the local class is of significant size, defining it locally can increase clutter and reduce readability.<\/p>\n+<p><a name=\"lambdaexpressions\"><\/a> C++11 added <em>lambda expressions<\/em> as a new way to write a function object. Simple lambda expressions can be significantly more concise than a function object, eliminating a lot of boiler-plate. On the other hand, a complex lambda expression may not provide much, if any, readability benefit compared to an ordinary function object. Also, while a lambda can encapsulate a call to a &quot;function-like&quot; object, it cannot be used in place of such.<\/p>\n+<p>A common use for local functions is as one-use <a href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/raii\" title=\"Resource Acquisition Is Initialization\">RAII<\/a> objects. The amount of boilerplate for a function object class (local or not) makes such usage somewhat clumsy and verbose. But with the help of a small amount of supporting utility code, lambdas work particularly well for this use case.<\/p>\n+<p>Another use for local functions is <a href=\"https:\/\/en.wikipedia.org\/wiki\/Partial_application\" title=\"Partial Application\">partial application<\/a>. Again here, lambdas are typically much simpler and less verbose than function object classes.<\/p>\n+<p>Because of these benefits, lambda expressions are permitted in HotSpot code, with some restrictions and usage guidance. An anonymous lambda is one which is passed directly as an argument. A named lambda is the value of a variable, which is its name.<\/p>\n+<p>Lambda expressions should only be passed downward. In particular, a lambda should not be returned from a function or stored in a global variable, whether directly or as the value of a member of some other object. Lambda capture is syntactically subtle (by design), and propagating a lambda in such ways can easily pass references to captured values to places where they are no longer valid. In particular, members of the enclosing <code>this<\/code> object are effectively captured by reference, even if the default capture is by-value. For such uses-cases a function object class should be used to make the desired value capturing and propagation explicit.<\/p>\n+<p>Limiting the capture list to <code>[&amp;]<\/code> (implicitly capture by reference) is a simplifying restriction that still provides good support for HotSpot usage, while reducing the cases a reader must recognize and understand.<\/p>\n+<ul>\n+<li><p>Many common lambda uses require reference capture. Not permitting it would substantially reduce the utility of lambdas.<\/p><\/li>\n+<li><p>Referential transparency. Implicit reference capture makes variable references in the lambda body have the same meaning they would have in the enclosing code. There isn't a semantic barrier across which the meaning of a variable changes.<\/p><\/li>\n+<li><p>Explicit reference capture introduces significant clutter, especially when lambda expressions are relatively small and simple, as they should be in HotSpot code.<\/p><\/li>\n+<li><p>There are a number of reasons why by-value capture might be used, but for the most part they don't apply to HotSpot code, given other usage restrictions.<\/p>\n+<ul>\n+<li><p>A primary use-case for by-value capture is to support escaping uses, where values captured by-reference might become invalid. That use-case doesn't apply if only downward lambdas are used.<\/p><\/li>\n+<li><p>By-value capture can also make a lambda-local copy for mutation, which requires making the lambda <code>mutable<\/code>; see below.<\/p><\/li>\n+<li><p>By-value capture might be viewed as an optimization, avoiding any overhead for reference capture of cheap to copy values. But the compiler can often eliminate any such overhead.<\/p><\/li>\n+<li><p>By-value capture by a non-<code>mutable<\/code> lambda makes the captured values const, preventing any modification by the lambda and making the captured value unaffected by modifications to the outer variable. But this only applies to captured auto variables, not member variables, and is inconsistent with referential transparency.<\/p><\/li>\n+<\/ul><\/li>\n+<li><p>Non-capturing lambdas (with an empty capture list - <code>[]<\/code>) have limited utility. There are cases where no captures are required (pure functions, for example), but if the function is small and simple then that's obvious anyway.<\/p><\/li>\n+<li><p>Capture initializers (a C++14 feature - <a href=\"https:\/\/isocpp.org\/files\/papers\/N3649.html\">N3649<\/a>) are not permitted. Capture initializers inherently increase the complexity of the capture list, and provide little benefit over an additional in-scope local variable.<\/p><\/li>\n+<\/ul>\n+<p>The use of <code>mutable<\/code> lambda expressions is forbidden because there don't seem to be many, if any, good use-cases for them in HotSpot. A lambda expression needs to be mutable in order to modify a by-value captured value. But with only downward lambdas, such usage seems likely to be rare and complicated. It is better to use a function object class in any such cases that arise, rather than requiring all HotSpot developers to understand this relatively obscure feature.<\/p>\n+<p>While it is possible to directly invoke an anonymous lambda expression, that feature should not be used, as such a form can be confusing to readers. Instead, name the lambda and call it by name.<\/p>\n+<p>Some reasons to prefer a named lambda instead of an anonymous lambda are<\/p>\n+<ul>\n+<li><p>The body contains non-trivial control flow or declarations or other nested constructs.<\/p><\/li>\n+<li><p>Its role in an argument list is hard to guess without examining the function declaration. Give it a name that indicates its purpose.<\/p><\/li>\n+<li><p>It has an unusual capture list.<\/p><\/li>\n+<li><p>It has a complex explicit return type or parameter types.<\/p><\/li>\n+<\/ul>\n+<p>Lambda expressions, and particularly anonymous lambda expressions, should be simple and compact. One-liners are good. Anonymous lambdas should usually be limited to a couple lines of body code. More complex lambdas should be named. A named lambda should not clutter the enclosing function and make it long and complex; do continue to break up large functions via the use of separate helper functions.<\/p>\n+<p>An anonymous lambda expression should either be a one-liner in a one-line expression, or isolated in its own set of lines. Don't place part of a lambda expression on the same line as other arguments to a function. The body of a multi-line lambda argument should be indented from the start of the capture list, as if that were the start of an ordinary function definition. The body of a multi-line named lambda should be indented one step from the variable's indentation.<\/p>\n+<p>Some examples:<\/p>\n+<ol type=\"1\">\n+<li><code>foo([&amp;] { ++counter; });<\/code><\/li>\n+<li><code>foo(x, [&amp;] { ++counter; });<\/code><\/li>\n+<li><code>foo([&amp;] { if (predicate) ++counter; });<\/code><\/li>\n+<li><code>foo([&amp;] { auto tmp = process(x); tmp.f(); return tmp.g(); })<\/code><\/li>\n+<li><p>Separate one-line lambda from other arguments:<\/p>\n+<pre><code>foo(c.begin(), c.end(),\n+    [&amp;] (const X&amp; x) { do_something(x); return x.value(); });<\/code><\/pre><\/li>\n+<li><p>Indentation for multi-line lambda:<\/p>\n+<pre><code>c.do_entries([&amp;] (const X&amp; x) {\n+               do_something(x, a);\n+               do_something1(x, b);\n+               do_something2(x, c);\n+             });<\/code><\/pre><\/li>\n+<li><p>Separate multi-line lambda from other arguments:<\/p>\n+<pre><code>foo(c.begin(), c.end(),\n+    [&amp;] (const X&amp; x) {\n+      do_something(x, a);\n+      do_something1(x, b);\n+      do_something2(x, c);\n+    });<\/code><\/pre><\/li>\n+<li><p>Multi-line named lambda:<\/p>\n+<pre><code>auto do_entry = [&amp;] (const X&amp; x) {\n+  do_something(x, a);\n+  do_something1(x, b);\n+  do_something2(x, c);\n+};<\/code><\/pre><\/li>\n+<\/ol>\n+<p>Item 4, and especially items 6 and 7, are pushing the simplicity limits for anonymous lambdas. Item 6 might be better written using a named lambda:<\/p>\n+<pre><code>c.do_entries(do_entry);<\/code><\/pre>\n+<p>Note that C++11 also added <em>bind expressions<\/em> as a way to write a function object for partial application, using <code>std::bind<\/code> and related facilities from the Standard Library. <code>std::bind<\/code> generalizes and replaces some of the binders from C++03. Bind expressions are not permitted in HotSpot code. They don't provide enough benefit over lambdas or local function classes in the cases where bind expressions are applicable to warrant the introduction of yet another mechanism in this space into HotSpot code.<\/p>\n+<p>References:<\/p>\n+<ul>\n+<li>Local and unnamed types as template parameters (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2657.htm\">n2657<\/a>)<\/li>\n+<li>New wording for C++0x lambdas (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2009\/n2927.pdf\">n2927<\/a>)<\/li>\n+<li>Generalized lambda capture (init-capture) (<a href=\"https:\/\/isocpp.org\/files\/papers\/N3648.html\">N3648<\/a>)<\/li>\n+<li>Generic (polymorphic) lambda expressions (<a href=\"https:\/\/isocpp.org\/files\/papers\/N3649.html\">N3649<\/a>)<\/li>\n+<\/ul>\n+<p>References from C++17<\/p>\n+<ul>\n+<li>Wording for constexpr lambda (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2016\/p0170r1.pdf\">p0170r1<\/a>)<\/li>\n+<li>Lambda capture of *this by Value (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2016\/p0018r3.html\">p0018r3<\/a>)<\/li>\n+<\/ul>\n+<p>References from C++20<\/p>\n+<ul>\n+<li>Allow lambda capture [=, this] (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2017\/p0409r2.html\">p0409r2<\/a>)<\/li>\n+<li>Familiar template syntax for generic lambdas (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2017\/p0428r2.pdf\">p0428r2<\/a>)<\/li>\n+<li>Simplifying implicit lambda capture (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2017\/p0588r1.html\">p0588r1<\/a>)<\/li>\n+<li>Default constructible and assignable stateless lambdas (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2017\/p0624r2.pdf\">p0624r2<\/a>)<\/li>\n+<li>Lambdas in unevaluated contexts (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2017\/p0315r4.pdf\">p0315r4<\/a>)<\/li>\n+<li>Allow pack expansion in lambda init-capture (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2018\/p0780r2.html\">p0780r2<\/a>) (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2020\/p2095r0.html\">p2095r0<\/a>)<\/li>\n+<li>Deprecate implicit capture of this via [=] (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2018\/p0806r2.html\">p0806r2<\/a>)<\/li>\n+<\/ul>\n+<p>References from C++23<\/p>\n+<ul>\n+<li>Make () more optional for lambdas (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2020\/p1102r2.html\">p1102r2<\/a>)<\/li>\n+<\/ul>\n+<h3 id=\"additional-permitted-features\">Additional Permitted Features<\/h3>\n+<ul>\n+<li><p><code>constexpr<\/code> (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2235.pdf\">n2235<\/a>) (<a href=\"https:\/\/isocpp.org\/files\/papers\/N3652.html\">n3652<\/a>)<\/p><\/li>\n+<li><p>Sized deallocation (<a href=\"https:\/\/isocpp.org\/files\/papers\/n3778.html\">n3778<\/a>)<\/p><\/li>\n+<li><p>Variadic templates (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2242.pdf\">n2242<\/a>) (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2555.pdf\">n2555<\/a>)<\/p><\/li>\n+<li><p>Static assertions (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2004\/n1720.html\">n1720<\/a>)<\/p><\/li>\n+<li><p><code>decltype<\/code> (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2343.pdf\">n2343<\/a>) (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2011\/n3276.pdf\">n3276<\/a>)<\/p><\/li>\n+<li><p>Right angle brackets (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2005\/n1757.html\">n1757<\/a>)<\/p><\/li>\n+<li><p>Default template arguments for function templates (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/cwg_defects.html#226\">CWG D226<\/a>)<\/p><\/li>\n+<li><p>Template aliases (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2258.pdf\">n2258<\/a>)<\/p><\/li>\n+<li><p>Delegating constructors (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2006\/n1986.pdf\">n1986<\/a>)<\/p><\/li>\n+<li><p>Explicit conversion operators (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2437.pdf\">n2437<\/a>)<\/p><\/li>\n+<li><p>Standard Layout Types (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2342.htm\">n2342<\/a>)<\/p><\/li>\n+<li><p>Defaulted and deleted functions (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2346.htm\">n2346<\/a>)<\/p><\/li>\n+<li><p>Dynamic initialization and destruction with concurrency (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2660.htm\">n2660<\/a>)<\/p><\/li>\n+<li><p><code>final<\/code> virtual specifiers for classes and virtual functions (<a href=\"http:\/\/www.open-std.org\/JTC1\/SC22\/WG21\/docs\/papers\/2009\/n2928.htm\">n2928<\/a>), (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2010\/n3206.htm\">n3206<\/a>), (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2011\/n3272.htm\">n3272<\/a>)<\/p><\/li>\n+<li><p><code>override<\/code> virtual specifiers for virtual functions (<a href=\"http:\/\/www.open-std.org\/JTC1\/SC22\/WG21\/docs\/papers\/2009\/n2928.htm\">n2928<\/a>), (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2010\/n3206.htm\">n3206<\/a>), (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2011\/n3272.htm\">n3272<\/a>)<\/p><\/li>\n+<li><p>Range-based <code>for<\/code> loops (<a href=\"http:\/\/www.open-std.org\/JTC1\/SC22\/WG21\/docs\/papers\/2009\/n2930.html\">n2930<\/a>) (<a href=\"https:\/\/en.cppreference.com\/w\/cpp\/language\/range-for\">range-for<\/a>)<\/p><\/li>\n+<\/ul>\n+<h3 id=\"excluded-features\">Excluded Features<\/h3>\n+<ul>\n+<li>New string and character literals\n+<ul>\n+<li>New character types (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2249.html\">n2249<\/a>)<\/li>\n+<li>Unicode string literals (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2442.htm\">n2442<\/a>)<\/li>\n+<li>Raw string literals (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2442.htm\">n2442<\/a>)<\/li>\n+<li>Universal character name literals (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2170.html\">n2170<\/a>)<\/li>\n+<\/ul>\n+<p>HotSpot doesn't need any of the new character and string literal types.<\/p><\/li>\n+<li><p>User-defined literals (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2765.pdf\">n2765<\/a>) — User-defined literals should not be added casually, but only through a proposal to add a specific UDL.<\/p><\/li>\n+<li><p>Inline namespaces (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2535.htm\">n2535<\/a>) — HotSpot makes very limited use of namespaces.<\/p><\/li>\n+<li><p><code>using namespace<\/code> directives. In particular, don't use <code>using namespace std;<\/code> to avoid needing to qualify Standard Library names.<\/p><\/li>\n+<li><p>Propagating exceptions (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2007\/n2179.html\">n2179<\/a>) — HotSpot does not permit the use of exceptions, so this feature isn't useful.<\/p><\/li>\n+<li><p>Avoid namespace-scoped variables with non-constexpr initialization. In particular, avoid variables with types requiring non-trivial initialization or destruction. Initialization order problems can be difficult to deal with and lead to surprises, as can destruction ordering. HotSpot doesn't generally try to cleanup on exit, and running destructors at exit can also lead to problems.<\/p><\/li>\n+<li><p><code>[[deprecated]]<\/code> attribute (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2013\/n3760.html\">n3760<\/a>) — Not relevant in HotSpot code.<\/p><\/li>\n+<li><p>Avoid most operator overloading, preferring named functions. When operator overloading is used, ensure the semantics conform to the normal expected behavior of the operation.<\/p><\/li>\n+<li><p>Avoid most implicit conversion constructors and (implicit or explicit) conversion operators. (Note that conversion to <code>bool<\/code> isn't needed in HotSpot code because of the &quot;no implicit boolean&quot; guideline.)<\/p><\/li>\n+<li><p>Avoid covariant return types.<\/p><\/li>\n+<li><p>Avoid <code>goto<\/code> statements.<\/p><\/li>\n+<\/ul>\n+<h3 id=\"undecided-features\">Undecided Features<\/h3>\n+<p>This list is incomplete; it serves to explicitly call out some features that have not yet been discussed.<\/p>\n+<ul>\n+<li><p>Trailing return type syntax for functions (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2541.htm\">n2541<\/a>)<\/p><\/li>\n+<li><p>Variable templates (<a href=\"https:\/\/isocpp.org\/files\/papers\/N3651.pdf\">n3651<\/a>)<\/p><\/li>\n+<li><p>Member initializers and aggregates (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2013\/n3653.html\">n3653<\/a>)<\/p><\/li>\n+<li><p><code>[[noreturn]]<\/code> attribute (<a href=\"http:\/\/www.open-std.org\/jtc1\/sc22\/wg21\/docs\/papers\/2008\/n2761.pdf\">n2761<\/a>)<\/p><\/li>\n+<li><p>Rvalue references and move semantics<\/p><\/li>\n+<\/ul>\n+<\/body>\n+<\/html>\n","filename":"doc\/hotspot-style.html","additions":458,"deletions":1072,"binary":false,"changes":1530,"status":"modified"},{"patch":"@@ -1,472 +1,223 @@\n-<!DOCTYPE html>\r\n-<html xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\" lang=\"\" xml:lang=\"\">\r\n-<head>\r\n-  <meta charset=\"utf-8\" \/>\r\n-  <meta name=\"generator\" content=\"pandoc\" \/>\r\n-  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" \/>\r\n-  <title>Native\/Unit Test Development Guidelines<\/title>\r\n-  <style>\r\n-    code{white-space: pre-wrap;}\r\n-    span.smallcaps{font-variant: small-caps;}\r\n-    span.underline{text-decoration: underline;}\r\n-    div.column{display: inline-block; vertical-align: top; width: 50%;}\r\n-    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\r\n-    ul.task-list{list-style: none;}\r\n-    .display.math{display: block; text-align: center; margin: 0.5rem auto;}\r\n-  <\/style>\r\n-  <link rel=\"stylesheet\" href=\"..\/make\/data\/docs-resources\/resources\/jdk-default.css\" \/>\r\n-  <!--[if lt IE 9]>\r\n-    <script src=\"\/\/cdnjs.cloudflare.com\/ajax\/libs\/html5shiv\/3.7.3\/html5shiv-printshiv.min.js\"><\/script>\r\n-  <![endif]-->\r\n-<\/head>\r\n-<body>\r\n-<header id=\"title-block-header\">\r\n-<h1 class=\"title\">Native\/Unit Test Development Guidelines<\/h1>\r\n-<\/header>\r\n-<nav id=\"TOC\" role=\"doc-toc\">\r\n-<ul>\r\n-<li><a href=\"#good-test-properties\">Good test properties<\/a>\r\n-<ul>\r\n-<li><a href=\"#lightness\">Lightness<\/a><\/li>\r\n-<li><a href=\"#isolation\">Isolation<\/a><\/li>\r\n-<li><a href=\"#atomicity-and-self-containment\">Atomicity and\r\n-self-containment<\/a><\/li>\r\n-<li><a href=\"#repeatability\">Repeatability<\/a><\/li>\r\n-<li><a href=\"#informativeness\">Informativeness<\/a><\/li>\r\n-<li><a href=\"#testing-instead-of-visiting\">Testing instead of\r\n-visiting<\/a><\/li>\r\n-<li><a href=\"#nearness\">Nearness<\/a><\/li>\r\n-<\/ul><\/li>\r\n-<li><a href=\"#asserts\">Asserts<\/a>\r\n-<ul>\r\n-<li><a href=\"#several-checks\">Several checks<\/a><\/li>\r\n-<li><a href=\"#first-parameter-is-expected-value\">First parameter is\r\n-expected value<\/a><\/li>\r\n-<li><a href=\"#floating-point-comparison\">Floating-point\r\n-comparison<\/a><\/li>\r\n-<li><a href=\"#c-string-comparison\">C string comparison<\/a><\/li>\r\n-<li><a href=\"#error-messages\">Error messages<\/a><\/li>\r\n-<li><a href=\"#uncluttered-output\">Uncluttered output<\/a><\/li>\r\n-<li><a href=\"#failures-propagation\">Failures propagation<\/a><\/li>\r\n-<\/ul><\/li>\r\n-<li><a href=\"#naming-and-grouping\">Naming and Grouping<\/a>\r\n-<ul>\r\n-<li><a href=\"#test-group-names\">Test group names<\/a><\/li>\r\n-<li><a href=\"#filename\">Filename<\/a><\/li>\r\n-<li><a href=\"#file-location\">File location<\/a><\/li>\r\n-<li><a href=\"#test-names\">Test names<\/a><\/li>\r\n-<li><a href=\"#fixture-classes\">Fixture classes<\/a><\/li>\r\n-<li><a href=\"#friend-classes\">Friend classes<\/a><\/li>\r\n-<li><a href=\"#oscpu-specific-tests\">OS\/CPU specific tests<\/a><\/li>\r\n-<\/ul><\/li>\r\n-<li><a href=\"#miscellaneous\">Miscellaneous<\/a>\r\n-<ul>\r\n-<li><a href=\"#hotspot-style\">Hotspot style<\/a><\/li>\r\n-<li><a href=\"#codetest-metrics\">Code\/test metrics<\/a><\/li>\r\n-<li><a href=\"#access-to-non-public-members\">Access to non-public\r\n-members<\/a><\/li>\r\n-<li><a href=\"#death-tests\">Death tests<\/a><\/li>\r\n-<li><a href=\"#external-flags\">External flags<\/a><\/li>\r\n-<li><a href=\"#test-specific-flags\">Test-specific flags<\/a><\/li>\r\n-<li><a href=\"#flag-restoring\">Flag restoring<\/a><\/li>\r\n-<li><a href=\"#googletest-documentation\">GoogleTest\r\n-documentation<\/a><\/li>\r\n-<\/ul><\/li>\r\n-<li><a href=\"#todo\">TODO<\/a><\/li>\r\n-<\/ul>\r\n-<\/nav>\r\n-<p>The purpose of these guidelines is to establish a shared vision on\r\n-what kind of native tests and how we want to develop them for Hotspot\r\n-using GoogleTest. Hence these guidelines include style items as well as\r\n-test approach items.<\/p>\r\n-<p>First section of this document describes properties of good tests\r\n-which are common for almost all types of test regardless of language,\r\n-framework, etc. Further sections provide recommendations to achieve\r\n-those properties and other HotSpot and\/or GoogleTest specific\r\n-guidelines.<\/p>\r\n-<h2 id=\"good-test-properties\">Good test properties<\/h2>\r\n-<h3 id=\"lightness\">Lightness<\/h3>\r\n-<p>Use the most lightweight type of tests.<\/p>\r\n-<p>In Hotspot, there are 3 different types of tests regarding their\r\n-dependency on a JVM, each next level is slower than previous<\/p>\r\n-<ul>\r\n-<li><p><code>TEST<\/code> : a test does not depend on a JVM<\/p><\/li>\r\n-<li><p><code>TEST_VM<\/code> : a test does depend on an initialized JVM,\r\n-but are supposed not to break a JVM, i.e. leave it in a workable\r\n-state.<\/p><\/li>\r\n-<li><p><code>TEST_OTHER_VM<\/code> : a test depends on a JVM and requires\r\n-a freshly initialized JVM or leaves a JVM in non-workable state<\/p><\/li>\r\n-<\/ul>\r\n-<h3 id=\"isolation\">Isolation<\/h3>\r\n-<p>Tests have to be isolated: not to have visible side-effects,\r\n-influences on other tests results.<\/p>\r\n-<p>Results of one test should not depend on test execution order, other\r\n-tests, otherwise it is becoming almost impossible to find out why a test\r\n-failed. Due to hotspot-specific, it is not so easy to get a full\r\n-isolation, e.g. we share an initialized JVM between all\r\n-<code>TEST_VM<\/code> tests, so if your test changes JVM's state too\r\n-drastically and does not change it back, you had better consider\r\n-<code>TEST_OTHER_VM<\/code>.<\/p>\r\n-<h3 id=\"atomicity-and-self-containment\">Atomicity and\r\n-self-containment<\/h3>\r\n-<p>Tests should be <em>atomic<\/em> and <em>self-contained<\/em> at the\r\n-same time.<\/p>\r\n-<p>One test should check a particular part of a class, subsystem,\r\n-functionality, etc. Then it is quite easy to determine what parts of a\r\n-product are broken basing on test failures. On the other hand, a test\r\n-should test that part more-or-less entirely, because when one sees a\r\n-test <code>FooTest::bar<\/code>, they assume all aspects of bar from\r\n-<code>Foo<\/code> are tested.<\/p>\r\n-<p>However, it is impossible to cover all aspects even of a method, not\r\n-to mention a subsystem. In such cases, it is recommended to have several\r\n-tests, one for each aspect of a thing under test. For example one test\r\n-to tests how <code>Foo::bar<\/code> works if an argument is\r\n-<code>null<\/code>, another test to test how it works if an argument is\r\n-acceptable but <code>Foo<\/code> is not in the right state to accept it\r\n-and so on. This helps not only to make tests atomic, self-contained but\r\n-also makes test name self-descriptive (discussed in more details in <a\r\n-href=\"#test-names\">Test names<\/a>).<\/p>\r\n-<h3 id=\"repeatability\">Repeatability<\/h3>\r\n-<p>Tests have to be repeatable.<\/p>\r\n-<p>Reproducibility is very crucial for a test. No one likes sporadic\r\n-test failures, they are hard to investigate, fix and verify a fix.<\/p>\r\n-<p>In some cases, it is quite hard to write a 100% repeatable test,\r\n-since besides a test there can be other moving parts, e.g. in case of\r\n-<code>TEST_VM<\/code> there are several concurrently running threads.\r\n-Despite this, we should try to make a test as reproducible as\r\n-possible.<\/p>\r\n-<h3 id=\"informativeness\">Informativeness<\/h3>\r\n-<p>In case of a failure, a test should be as <em>informative<\/em> as\r\n-possible.<\/p>\r\n-<p>Having more information about a test failure than just compared\r\n-values can be very useful for failure troubleshooting, it can reduce or\r\n-even completely eliminate debugging hours. This is even more important\r\n-in case of not 100% reproducible failures.<\/p>\r\n-<p>Achieving this property, one can easily make a test too verbose, so\r\n-it will be really hard to find useful information in the ocean of\r\n-useless information. Hence they should not only think about how to\r\n-provide <a href=\"#error-messages\">good information<\/a>, but also <a\r\n-href=\"#uncluttered-output\">when to do it<\/a>.<\/p>\r\n-<h3 id=\"testing-instead-of-visiting\">Testing instead of visiting<\/h3>\r\n-<p>Tests should <em>test<\/em>.<\/p>\r\n-<p>It is not enough just to \"visit\" some code, a test should check that\r\n-code does that it has to do, compare return values with expected values,\r\n-check that desired side effects are done, and undesired are not, and so\r\n-on. In other words, a test should contain at least one GoogleTest\r\n-assertion and do not rely on JVM asserts.<\/p>\r\n-<p>Generally speaking to write a good test, one should create a model of\r\n-the system under tests, a model of possible bugs (or bugs which one\r\n-wants to find) and design tests using those models.<\/p>\r\n-<h3 id=\"nearness\">Nearness<\/h3>\r\n-<p>Prefer having checks inside test code.<\/p>\r\n-<p>Not only does having test logic outside, e.g. verification method,\r\n-depending on asserts in product code contradict with several items above\r\n-but also decreases test’s readability and stability. It is much easier\r\n-to understand that a test is testing when all testing logic is located\r\n-inside a test or nearby in shared test libraries. As a rule of thumb,\r\n-the closer a check to a test, the better.<\/p>\r\n-<h2 id=\"asserts\">Asserts<\/h2>\r\n-<h3 id=\"several-checks\">Several checks<\/h3>\r\n-<p>Prefer <code>EXPECT<\/code> over <code>ASSERT<\/code> if possible.<\/p>\r\n-<p>This is related to the <a href=\"#informativeness\">informativeness<\/a>\r\n-property of tests, information for other checks can help to better\r\n-localize a defect’s root-cause. One should use <code>ASSERT<\/code> if it\r\n-is impossible to continue test execution or if it does not make much\r\n-sense. Later in the text, <code>EXPECT<\/code> forms will be used to\r\n-refer to both <code>ASSERT\/EXPECT<\/code>.<\/p>\r\n-<p>When it is possible to make several different checks, but impossible\r\n-to continue test execution if at least one check fails, you can use\r\n-<code>::testing::Test::HasNonfatalFailure()<\/code> function. The\r\n-recommended way to express that is\r\n-<code>ASSERT_FALSE(::testing::Test::HasNonfatalFailure())<\/code>.\r\n-Besides making it clear why a test is aborted, it also allows you to\r\n-provide more information about a failure.<\/p>\r\n-<h3 id=\"first-parameter-is-expected-value\">First parameter is expected\r\n-value<\/h3>\r\n-<p>In all equality assertions, expected values should be passed as the\r\n-first parameter.<\/p>\r\n-<p>This convention is adopted by GoogleTest, and there is a slight\r\n-difference in how GoogleTest treats parameters, the most important one\r\n-is <code>null<\/code> detection. Due to different reasons,\r\n-<code>null<\/code> detection is enabled only for the first parameter,\r\n-that is to said <code>EXPECT_EQ(NULL, object)<\/code> checks that object\r\n-is <code>null<\/code>, while <code>EXPECT_EQ(object, NULL)<\/code> checks\r\n-that object equals to <code>NULL<\/code>, GoogleTest is very strict\r\n-regarding types of compared values so the latter will generates a\r\n-compile-time error.<\/p>\r\n-<h3 id=\"floating-point-comparison\">Floating-point comparison<\/h3>\r\n-<p>Use floating-point special macros to compare\r\n-<code>float\/double<\/code> values.<\/p>\r\n-<p>Because of floating-point number representations and round-off\r\n-errors, regular equality comparison will not return true in most cases.\r\n-There are special <code>EXPECT_FLOAT_EQ\/EXPECT_DOUBLE_EQ<\/code>\r\n-assertions which check that the distance between compared values is not\r\n-more than 4 ULPs, there is also <code>EXPECT_NEAR(v1, v2, eps)<\/code>\r\n-which checks that the absolute value of the difference between\r\n-<code>v1<\/code> and <code>v2<\/code> is not greater than\r\n-<code>eps<\/code>.<\/p>\r\n-<h3 id=\"c-string-comparison\">C string comparison<\/h3>\r\n-<p>Use string special macros for C strings comparisons.<\/p>\r\n-<p><code>EXPECT_EQ<\/code> just compares pointers’ values, which is\r\n-hardly what one wants comparing C strings. GoogleTest provides\r\n-<code>EXPECT_STREQ<\/code> and <code>EXPECT_STRNE<\/code> macros to\r\n-compare C string contents. There are also case-insensitive versions\r\n-<code>EXPECT_STRCASEEQ<\/code>, <code>EXPECT_STRCASENE<\/code>.<\/p>\r\n-<h3 id=\"error-messages\">Error messages<\/h3>\r\n-<p>Provide informative, but not too verbose error messages.<\/p>\r\n-<p>All GoogleTest asserts print compared expressions and their values,\r\n-so there is no need to have them in error messages. Asserts print only\r\n-compared values, they do not print any of interim variables, e.g.\r\n-<code>ASSERT_TRUE((val1 == val2 &amp;&amp; isFail(foo(8)) || i == 18)<\/code>\r\n-prints only one value. If you use some complex predicates, please\r\n-consider <code>EXPECT_PRED*<\/code> or <code>EXPECT_FORMAT_PRED<\/code>\r\n-assertions family, they check that a predicate returns true\/success and\r\n-print out all parameters values.<\/p>\r\n-<p>However in some cases, default information is not enough, a commonly\r\n-used example is an assert inside a loop, GoogleTest will not print\r\n-iteration values (unless it is an assert's parameter). Other\r\n-demonstrative examples are printing error code and a corresponding error\r\n-message; printing internal states which might have an impact on results.\r\n-One should add this information to assert message using\r\n-<code>&lt;&lt;<\/code> operator.<\/p>\r\n-<h3 id=\"uncluttered-output\">Uncluttered output<\/h3>\r\n-<p>Print information only if it is needed.<\/p>\r\n-<p>Too verbose tests which print all information even if they pass are\r\n-very bad practice. They just pollute output, so it becomes harder to\r\n-find useful information. In order not print information till it is\r\n-really needed, one should consider saving it to a temporary buffer and\r\n-pass to an assert. <a\r\n-href=\"https:\/\/hg.openjdk.java.net\/jdk\/jdk\/file\/tip\/test\/hotspot\/gtest\/gc\/shared\/test_memset_with_concurrent_readers.cpp\"\r\n-class=\"uri\">https:\/\/hg.openjdk.java.net\/jdk\/jdk\/file\/tip\/test\/hotspot\/gtest\/gc\/shared\/test_memset_with_concurrent_readers.cpp<\/a>\r\n-has a good example how to do that.<\/p>\r\n-<h3 id=\"failures-propagation\">Failures propagation<\/h3>\r\n-<p>Wrap a subroutine call into <code>EXPECT_NO_FATAL_FAILURE<\/code>\r\n-macro to propagate failures.<\/p>\r\n-<p><code>ASSERT<\/code> and <code>FAIL<\/code> abort only the current\r\n-function, so if you have them in a subroutine, a test will not be\r\n-aborted after the subroutine even if <code>ASSERT<\/code> or\r\n-<code>FAIL<\/code> fails. You should call such subroutines in\r\n-<code>ASSERT_NO_FATAL_FAILURE<\/code> macro to propagate fatal failures\r\n-and abort a test. <code>(EXPECT|ASSERT)_NO_FATAL_FAILURE<\/code> can also\r\n-be used to provide more information.<\/p>\r\n-<p>Due to obvious reasons, there are no\r\n-<code>(EXPECT|ASSERT)_NO_NONFATAL_FAILURE<\/code> macros. However, if you\r\n-need to check if a subroutine generated a nonfatal failure (failed an\r\n-<code>EXPECT<\/code>), you can use\r\n-<code>::testing::Test::HasNonfatalFailure<\/code> function, or\r\n-<code>::testing::Test::HasFailure<\/code> function to check if a\r\n-subroutine generated any failures, see <a href=\"#several-checks\">Several\r\n-checks<\/a>.<\/p>\r\n-<h2 id=\"naming-and-grouping\">Naming and Grouping<\/h2>\r\n-<h3 id=\"test-group-names\">Test group names<\/h3>\r\n-<p>Test group names should be in CamelCase, start and end with a letter.\r\n-A test group should be named after tested class, functionality,\r\n-subsystem, etc.<\/p>\r\n-<p>This naming scheme helps to find tests, filter them and simplifies\r\n-test failure analysis. For example, class <code>Foo<\/code> - test group\r\n-<code>Foo<\/code>, compiler logging subsystem - test group\r\n-<code>CompilerLogging<\/code>, G1 GC — test group <code>G1GC<\/code>, and\r\n-so forth.<\/p>\r\n-<h3 id=\"filename\">Filename<\/h3>\r\n-<p>A test file must have <code>test_<\/code> prefix and <code>.cpp<\/code>\r\n-suffix.<\/p>\r\n-<p>Both are actually requirements from the current build system to\r\n-recognize your tests.<\/p>\r\n-<h3 id=\"file-location\">File location<\/h3>\r\n-<p>Test file location should reflect a location of the tested part of\r\n-the product.<\/p>\r\n-<ul>\r\n-<li><p>All unit tests for a class from <code>foo\/bar\/baz.cpp<\/code>\r\n-should be placed <code>foo\/bar\/test_baz.cpp<\/code> in\r\n-<code>hotspot\/test\/native\/<\/code> directory. Having all tests for a\r\n-class in one file is a common practice for unit tests, it helps to see\r\n-all existing tests at once, share functions and\/or resources without\r\n-losing encapsulation.<\/p><\/li>\r\n-<li><p>For tests which test more than one class, directory hierarchy\r\n-should be the same as product hierarchy, and file name should reflect\r\n-the name of the tested subsystem\/functionality. For example, if a\r\n-sub-system under tests belongs to <code>gc\/g1<\/code>, tests should be\r\n-placed in <code>gc\/g1<\/code> directory.<\/p><\/li>\r\n-<\/ul>\r\n-<p>Please note that framework prepends directory name to a test group\r\n-name. For example, if <code>TEST(foo, check_this)<\/code> and\r\n-<code>TEST(bar, check_that)<\/code> are defined in\r\n-<code>hotspot\/test\/native\/gc\/shared\/test_foo.cpp<\/code> file, they will\r\n-be reported as <code>gc\/shared\/foo::check_this<\/code> and\r\n-<code>gc\/shared\/bar::check_that<\/code>.<\/p>\r\n-<h3 id=\"test-names\">Test names<\/h3>\r\n-<p>Test names should be in small_snake_case, start and end with a\r\n-letter. A test name should reflect that a test checks.<\/p>\r\n-<p>Such naming makes tests self-descriptive and helps a lot during the\r\n-whole test life cycle. It is easy to do test planning, test inventory,\r\n-to see what things are not tested, to review tests, to analyze test\r\n-failures, to evolve a test, etc. For example\r\n-<code>foo_return_0_if_name_is_null<\/code> is better than\r\n-<code>foo_sanity<\/code> or <code>foo_basic<\/code> or just\r\n-<code>foo<\/code>,\r\n-<code>humongous_objects_can_not_be_moved_by_young_gc<\/code> is better\r\n-than <code>ho_young_gc<\/code>.<\/p>\r\n-<p>Actually using underscore is against GoogleTest project convention,\r\n-because it can lead to illegal identifiers, however, this is too strict.\r\n-Restricting usage of underscore for test names only and prohibiting test\r\n-name starts or ends with an underscore are enough to be safe.<\/p>\r\n-<h3 id=\"fixture-classes\">Fixture classes<\/h3>\r\n-<p>Fixture classes should be named after tested classes, subsystems, etc\r\n-(follow <a href=\"#test-group-names\">Test group names rule<\/a>) and have\r\n-<code>Test<\/code> suffix to prevent class name conflicts.<\/p>\r\n-<h3 id=\"friend-classes\">Friend classes<\/h3>\r\n-<p>All test purpose friends should have either <code>Test<\/code> or\r\n-<code>Testable<\/code> suffix.<\/p>\r\n-<p>It greatly simplifies understanding of friendship’s purpose and\r\n-allows statically check that private members are not exposed\r\n-unexpectedly. Having <code>FooTest<\/code> as a friend of\r\n-<code>Foo<\/code> without any comments will be understood as a necessary\r\n-evil to get testability.<\/p>\r\n-<h3 id=\"oscpu-specific-tests\">OS\/CPU specific tests<\/h3>\r\n-<p>Guard OS\/CPU specific tests by <code>#ifdef<\/code> and have OS\/CPU\r\n-name in filename.<\/p>\r\n-<p>For the time being, we do not support separate directories for OS,\r\n-CPU, OS-CPU specific tests, in case we will have lots of such tests, we\r\n-will change directory layout and build system to support that in the\r\n-same way it is done in hotspot.<\/p>\r\n-<h2 id=\"miscellaneous\">Miscellaneous<\/h2>\r\n-<h3 id=\"hotspot-style\">Hotspot style<\/h3>\r\n-<p>Abide the norms and rules accepted in Hotspot style guide.<\/p>\r\n-<p>Tests are a part of Hotspot, so everything (if applicable) we use for\r\n-Hotspot, should be used for tests as well. Those guidelines cover\r\n-test-specific things.<\/p>\r\n-<h3 id=\"codetest-metrics\">Code\/test metrics<\/h3>\r\n-<p>Coverage information and other code\/test metrics are quite useful to\r\n-decide what tests should be written, what tests should be improved and\r\n-what can be removed.<\/p>\r\n-<p>For unit tests, widely used and well-known coverage metric is branch\r\n-coverage, which provides good quality of tests with relatively easy test\r\n-development process. For other levels of testing, branch coverage is not\r\n-as good, and one should consider others metrics, e.g. transaction flow\r\n-coverage, data flow coverage.<\/p>\r\n-<h3 id=\"access-to-non-public-members\">Access to non-public members<\/h3>\r\n-<p>Use explicit friend class to get access to non-public members.<\/p>\r\n-<p>We do not use GoogleTest macro to declare friendship relation,\r\n-because, from our point of view, it is less clear than an explicit\r\n-declaration.<\/p>\r\n-<p>Declaring a test fixture class as a friend class of a tested test is\r\n-the easiest and the clearest way to get access. However, it has some\r\n-disadvantages, here is some of them:<\/p>\r\n-<ul>\r\n-<li>Each test has to be declared as a friend<\/li>\r\n-<li>Subclasses do not inheritance friendship relation<\/li>\r\n-<\/ul>\r\n-<p>In other words, it is harder to share code between tests. Hence if\r\n-you want to share code or expect it to be useful in other tests, you\r\n-should consider making members in a tested class protected and introduce\r\n-a shared test-only class which expose those members via public\r\n-functions, or even making members publicly accessible right away in a\r\n-product class. If it is not an option to change members visibility, one\r\n-can create a friend class which exposes members.<\/p>\r\n-<h3 id=\"death-tests\">Death tests<\/h3>\r\n-<p>You can not use death tests inside <code>TEST_OTHER_VM<\/code> and\r\n-<code>TEST_VM_ASSERT*<\/code>.<\/p>\r\n-<p>We tried to make Hotspot-GoogleTest integration as transparent as\r\n-possible, however, due to the current implementation of\r\n-<code>TEST_OTHER_VM<\/code> and <code>TEST_VM_ASSERT*<\/code> tests, you\r\n-cannot use death test functionality in them. These tests are implemented\r\n-as GoogleTest death tests, and GoogleTest does not allow to have a death\r\n-test inside another death test.<\/p>\r\n-<h3 id=\"external-flags\">External flags<\/h3>\r\n-<p>Passing external flags to a tested JVM is not supported.<\/p>\r\n-<p>The rationality of such design decision is to simplify both tests and\r\n-a test framework and to avoid failures related to incompatible flags\r\n-combination till there is a good solution for that. However there are\r\n-cases when one wants to test a JVM with specific flags combination,\r\n-<code>_JAVA_OPTIONS<\/code> environment variable can be used to do that.\r\n-Flags from <code>_JAVA_OPTIONS<\/code> will be used in\r\n-<code>TEST_VM<\/code>, <code>TEST_OTHER_VM<\/code> and\r\n-<code>TEST_VM_ASSERT*<\/code> tests.<\/p>\r\n-<h3 id=\"test-specific-flags\">Test-specific flags<\/h3>\r\n-<p>Passing flags to a tested JVM in <code>TEST_OTHER_VM<\/code> and\r\n-<code>TEST_VM_ASSERT*<\/code> should be possible, but is not implemented\r\n-yet.<\/p>\r\n-<p>Facility to pass test-specific flags is needed for system, regression\r\n-or other types of tests which require a fully initialized JVM in some\r\n-particular configuration, e.g. with Serial GC selected. There is no\r\n-support for such tests now, however, there is a plan to add that in\r\n-upcoming releases.<\/p>\r\n-<p>For now, if a test depends on flags values, it should have\r\n-<code>if (!&lt;flag&gt;) { return }<\/code> guards in the very beginning\r\n-and <code>@requires<\/code> comment similar to jtreg\r\n-<code>@requires<\/code> directive right before test macros. <a\r\n-href=\"https:\/\/hg.openjdk.java.net\/jdk\/jdk\/file\/tip\/test\/hotspot\/gtest\/gc\/g1\/test_g1IHOPControl.cpp\"\r\n-class=\"uri\">https:\/\/hg.openjdk.java.net\/jdk\/jdk\/file\/tip\/test\/hotspot\/gtest\/gc\/g1\/test_g1IHOPControl.cpp<\/a>\r\n-ha an example of this temporary workaround. It is important to follow\r\n-that pattern as it allows us to easily find all such tests and update\r\n-them as soon as there is an implementation of flag passing facility.<\/p>\r\n-<p>In long-term, we expect jtreg to support GoogleTest tests as first\r\n-class citizens, that is to say, jtreg will parse <span class=\"citation\"\r\n-data-cites=\"requires\">@requires<\/span> comments and filter out\r\n-inapplicable tests.<\/p>\r\n-<h3 id=\"flag-restoring\">Flag restoring<\/h3>\r\n-<p>Restore changed flags.<\/p>\r\n-<p>It is quite common for tests to configure JVM in a certain way\r\n-changing flags’ values. GoogleTest provides two ways to set up\r\n-environment before a test and restore it afterward: using either\r\n-constructor and destructor or <code>SetUp<\/code> and\r\n-<code>TearDown<\/code> functions. Both ways require to use a test fixture\r\n-class, which sometimes is too wordy. The simpler facilities like\r\n-<code>FLAG_GUARD<\/code> macro or <code>*FlagSetting<\/code> classes could\r\n-be used in such cases to restore\/set values.<\/p>\r\n-<p>Caveats:<\/p>\r\n-<ul>\r\n-<li><p>Changing a flag’s value could break the invariants between flags'\r\n-values and hence could lead to unexpected\/unsupported JVM\r\n-state.<\/p><\/li>\r\n-<li><p><code>FLAG_SET_*<\/code> macros can change more than one flag (in\r\n-order to maintain invariants) so it is hard to predict what flags will\r\n-be changed and it makes restoring all changed flags a nontrivial task.\r\n-Thus in case one uses <code>FLAG_SET_*<\/code> macros, they should use\r\n-<code>TEST_OTHER_VM<\/code> test type.<\/p><\/li>\r\n-<\/ul>\r\n-<h3 id=\"googletest-documentation\">GoogleTest documentation<\/h3>\r\n-<p>In case you have any questions regarding GoogleTest itself, its\r\n-asserts, test declaration macros, other macros, etc, please consult its\r\n-documentation.<\/p>\r\n-<h2 id=\"todo\">TODO<\/h2>\r\n-<p>Although this document provides guidelines on the most important\r\n-parts of test development using GTest, it still misses a few items:<\/p>\r\n-<ul>\r\n-<li><p>Examples, esp for <a href=\"#access-to-non-public-members\">access\r\n-to non-public members<\/a><\/p><\/li>\r\n-<li><p>test types: purpose, drawbacks, limitation<\/p>\r\n-<ul>\r\n-<li><code>TEST_VM<\/code><\/li>\r\n-<li><code>TEST_VM_F<\/code><\/li>\r\n-<li><code>TEST_OTHER_VM<\/code><\/li>\r\n-<li><code>TEST_VM_ASSERT<\/code><\/li>\r\n-<li><code>TEST_VM_ASSERT_MSG<\/code><\/li>\r\n-<\/ul><\/li>\r\n-<li><p>Miscellaneous<\/p>\r\n-<ul>\r\n-<li>Test libraries\r\n-<ul>\r\n-<li>where to place<\/li>\r\n-<li>how to write<\/li>\r\n-<li>how to use<\/li>\r\n-<\/ul><\/li>\r\n-<li>test your tests\r\n-<ul>\r\n-<li>how to run tests in random order<\/li>\r\n-<li>how to run only specific tests<\/li>\r\n-<li>how to run each test separately<\/li>\r\n-<li>check that a test can find bugs it is supposed to by introducing\r\n-them<\/li>\r\n-<\/ul><\/li>\r\n-<li>mocks\/stubs\/dependency injection<\/li>\r\n-<li>setUp\/tearDown\r\n-<ul>\r\n-<li>vs c-tor\/d-tor<\/li>\r\n-<li>empty test to test them<\/li>\r\n-<\/ul><\/li>\r\n-<li>internal (declared in .cpp) struct\/classes<\/li>\r\n-<\/ul><\/li>\r\n-<\/ul>\r\n-<\/body>\r\n-<\/html>\r\n+<!DOCTYPE html>\n+<html xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\" lang=\"\" xml:lang=\"\">\n+<head>\n+  <meta charset=\"utf-8\" \/>\n+  <meta name=\"generator\" content=\"pandoc\" \/>\n+  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" \/>\n+  <title>Native\/Unit Test Development Guidelines<\/title>\n+  <style type=\"text\/css\">\n+      code{white-space: pre-wrap;}\n+      span.smallcaps{font-variant: small-caps;}\n+      span.underline{text-decoration: underline;}\n+      div.column{display: inline-block; vertical-align: top; width: 50%;}\n+  <\/style>\n+  <link rel=\"stylesheet\" href=\"..\/make\/data\/docs-resources\/resources\/jdk-default.css\" \/>\n+  <!--[if lt IE 9]>\n+    <script src=\"\/\/cdnjs.cloudflare.com\/ajax\/libs\/html5shiv\/3.7.3\/html5shiv-printshiv.min.js\"><\/script>\n+  <![endif]-->\n+<\/head>\n+<body>\n+<header id=\"title-block-header\">\n+<h1 class=\"title\">Native\/Unit Test Development Guidelines<\/h1>\n+<\/header>\n+<nav id=\"TOC\">\n+<ul>\n+<li><a href=\"#good-test-properties\">Good test properties<\/a><ul>\n+<li><a href=\"#lightness\">Lightness<\/a><\/li>\n+<li><a href=\"#isolation\">Isolation<\/a><\/li>\n+<li><a href=\"#atomicity-and-self-containment\">Atomicity and self-containment<\/a><\/li>\n+<li><a href=\"#repeatability\">Repeatability<\/a><\/li>\n+<li><a href=\"#informativeness\">Informativeness<\/a><\/li>\n+<li><a href=\"#testing-instead-of-visiting\">Testing instead of visiting<\/a><\/li>\n+<li><a href=\"#nearness\">Nearness<\/a><\/li>\n+<\/ul><\/li>\n+<li><a href=\"#asserts\">Asserts<\/a><ul>\n+<li><a href=\"#several-checks\">Several checks<\/a><\/li>\n+<li><a href=\"#first-parameter-is-expected-value\">First parameter is expected value<\/a><\/li>\n+<li><a href=\"#floating-point-comparison\">Floating-point comparison<\/a><\/li>\n+<li><a href=\"#c-string-comparison\">C string comparison<\/a><\/li>\n+<li><a href=\"#error-messages\">Error messages<\/a><\/li>\n+<li><a href=\"#uncluttered-output\">Uncluttered output<\/a><\/li>\n+<li><a href=\"#failures-propagation\">Failures propagation<\/a><\/li>\n+<\/ul><\/li>\n+<li><a href=\"#naming-and-grouping\">Naming and Grouping<\/a><ul>\n+<li><a href=\"#test-group-names\">Test group names<\/a><\/li>\n+<li><a href=\"#filename\">Filename<\/a><\/li>\n+<li><a href=\"#file-location\">File location<\/a><\/li>\n+<li><a href=\"#test-names\">Test names<\/a><\/li>\n+<li><a href=\"#fixture-classes\">Fixture classes<\/a><\/li>\n+<li><a href=\"#friend-classes\">Friend classes<\/a><\/li>\n+<li><a href=\"#oscpu-specific-tests\">OS\/CPU specific tests<\/a><\/li>\n+<\/ul><\/li>\n+<li><a href=\"#miscellaneous\">Miscellaneous<\/a><ul>\n+<li><a href=\"#hotspot-style\">Hotspot style<\/a><\/li>\n+<li><a href=\"#codetest-metrics\">Code\/test metrics<\/a><\/li>\n+<li><a href=\"#access-to-non-public-members\">Access to non-public members<\/a><\/li>\n+<li><a href=\"#death-tests\">Death tests<\/a><\/li>\n+<li><a href=\"#external-flags\">External flags<\/a><\/li>\n+<li><a href=\"#test-specific-flags\">Test-specific flags<\/a><\/li>\n+<li><a href=\"#flag-restoring\">Flag restoring<\/a><\/li>\n+<li><a href=\"#googletest-documentation\">GoogleTest documentation<\/a><\/li>\n+<\/ul><\/li>\n+<li><a href=\"#todo\">TODO<\/a><\/li>\n+<\/ul>\n+<\/nav>\n+<p>The purpose of these guidelines is to establish a shared vision on what kind of native tests and how we want to develop them for Hotspot using GoogleTest. Hence these guidelines include style items as well as test approach items.<\/p>\n+<p>First section of this document describes properties of good tests which are common for almost all types of test regardless of language, framework, etc. Further sections provide recommendations to achieve those properties and other HotSpot and\/or GoogleTest specific guidelines.<\/p>\n+<h2 id=\"good-test-properties\">Good test properties<\/h2>\n+<h3 id=\"lightness\">Lightness<\/h3>\n+<p>Use the most lightweight type of tests.<\/p>\n+<p>In Hotspot, there are 3 different types of tests regarding their dependency on a JVM, each next level is slower than previous<\/p>\n+<ul>\n+<li><p><code>TEST<\/code> : a test does not depend on a JVM<\/p><\/li>\n+<li><p><code>TEST_VM<\/code> : a test does depend on an initialized JVM, but are supposed not to break a JVM, i.e. leave it in a workable state.<\/p><\/li>\n+<li><p><code>TEST_OTHER_VM<\/code> : a test depends on a JVM and requires a freshly initialized JVM or leaves a JVM in non-workable state<\/p><\/li>\n+<\/ul>\n+<h3 id=\"isolation\">Isolation<\/h3>\n+<p>Tests have to be isolated: not to have visible side-effects, influences on other tests results.<\/p>\n+<p>Results of one test should not depend on test execution order, other tests, otherwise it is becoming almost impossible to find out why a test failed. Due to hotspot-specific, it is not so easy to get a full isolation, e.g. we share an initialized JVM between all <code>TEST_VM<\/code> tests, so if your test changes JVM's state too drastically and does not change it back, you had better consider <code>TEST_OTHER_VM<\/code>.<\/p>\n+<h3 id=\"atomicity-and-self-containment\">Atomicity and self-containment<\/h3>\n+<p>Tests should be <em>atomic<\/em> and <em>self-contained<\/em> at the same time.<\/p>\n+<p>One test should check a particular part of a class, subsystem, functionality, etc. Then it is quite easy to determine what parts of a product are broken basing on test failures. On the other hand, a test should test that part more-or-less entirely, because when one sees a test <code>FooTest::bar<\/code>, they assume all aspects of bar from <code>Foo<\/code> are tested.<\/p>\n+<p>However, it is impossible to cover all aspects even of a method, not to mention a subsystem. In such cases, it is recommended to have several tests, one for each aspect of a thing under test. For example one test to tests how <code>Foo::bar<\/code> works if an argument is <code>null<\/code>, another test to test how it works if an argument is acceptable but <code>Foo<\/code> is not in the right state to accept it and so on. This helps not only to make tests atomic, self-contained but also makes test name self-descriptive (discussed in more details in <a href=\"#test-names\">Test names<\/a>).<\/p>\n+<h3 id=\"repeatability\">Repeatability<\/h3>\n+<p>Tests have to be repeatable.<\/p>\n+<p>Reproducibility is very crucial for a test. No one likes sporadic test failures, they are hard to investigate, fix and verify a fix.<\/p>\n+<p>In some cases, it is quite hard to write a 100% repeatable test, since besides a test there can be other moving parts, e.g. in case of <code>TEST_VM<\/code> there are several concurrently running threads. Despite this, we should try to make a test as reproducible as possible.<\/p>\n+<h3 id=\"informativeness\">Informativeness<\/h3>\n+<p>In case of a failure, a test should be as <em>informative<\/em> as possible.<\/p>\n+<p>Having more information about a test failure than just compared values can be very useful for failure troubleshooting, it can reduce or even completely eliminate debugging hours. This is even more important in case of not 100% reproducible failures.<\/p>\n+<p>Achieving this property, one can easily make a test too verbose, so it will be really hard to find useful information in the ocean of useless information. Hence they should not only think about how to provide <a href=\"#error-messages\">good information<\/a>, but also <a href=\"#uncluttered-output\">when to do it<\/a>.<\/p>\n+<h3 id=\"testing-instead-of-visiting\">Testing instead of visiting<\/h3>\n+<p>Tests should <em>test<\/em>.<\/p>\n+<p>It is not enough just to &quot;visit&quot; some code, a test should check that code does that it has to do, compare return values with expected values, check that desired side effects are done, and undesired are not, and so on. In other words, a test should contain at least one GoogleTest assertion and do not rely on JVM asserts.<\/p>\n+<p>Generally speaking to write a good test, one should create a model of the system under tests, a model of possible bugs (or bugs which one wants to find) and design tests using those models.<\/p>\n+<h3 id=\"nearness\">Nearness<\/h3>\n+<p>Prefer having checks inside test code.<\/p>\n+<p>Not only does having test logic outside, e.g. verification method, depending on asserts in product code contradict with several items above but also decreases test’s readability and stability. It is much easier to understand that a test is testing when all testing logic is located inside a test or nearby in shared test libraries. As a rule of thumb, the closer a check to a test, the better.<\/p>\n+<h2 id=\"asserts\">Asserts<\/h2>\n+<h3 id=\"several-checks\">Several checks<\/h3>\n+<p>Prefer <code>EXPECT<\/code> over <code>ASSERT<\/code> if possible.<\/p>\n+<p>This is related to the <a href=\"#informativeness\">informativeness<\/a> property of tests, information for other checks can help to better localize a defect’s root-cause. One should use <code>ASSERT<\/code> if it is impossible to continue test execution or if it does not make much sense. Later in the text, <code>EXPECT<\/code> forms will be used to refer to both <code>ASSERT\/EXPECT<\/code>.<\/p>\n+<p>When it is possible to make several different checks, but impossible to continue test execution if at least one check fails, you can use <code>::testing::Test::HasNonfatalFailure()<\/code> function. The recommended way to express that is <code>ASSERT_FALSE(::testing::Test::HasNonfatalFailure())<\/code>. Besides making it clear why a test is aborted, it also allows you to provide more information about a failure.<\/p>\n+<h3 id=\"first-parameter-is-expected-value\">First parameter is expected value<\/h3>\n+<p>In all equality assertions, expected values should be passed as the first parameter.<\/p>\n+<p>This convention is adopted by GoogleTest, and there is a slight difference in how GoogleTest treats parameters, the most important one is <code>null<\/code> detection. Due to different reasons, <code>null<\/code> detection is enabled only for the first parameter, that is to said <code>EXPECT_EQ(NULL, object)<\/code> checks that object is <code>null<\/code>, while <code>EXPECT_EQ(object, NULL)<\/code> checks that object equals to <code>NULL<\/code>, GoogleTest is very strict regarding types of compared values so the latter will generates a compile-time error.<\/p>\n+<h3 id=\"floating-point-comparison\">Floating-point comparison<\/h3>\n+<p>Use floating-point special macros to compare <code>float\/double<\/code> values.<\/p>\n+<p>Because of floating-point number representations and round-off errors, regular equality comparison will not return true in most cases. There are special <code>EXPECT_FLOAT_EQ\/EXPECT_DOUBLE_EQ<\/code> assertions which check that the distance between compared values is not more than 4 ULPs, there is also <code>EXPECT_NEAR(v1, v2, eps)<\/code> which checks that the absolute value of the difference between <code>v1<\/code> and <code>v2<\/code> is not greater than <code>eps<\/code>.<\/p>\n+<h3 id=\"c-string-comparison\">C string comparison<\/h3>\n+<p>Use string special macros for C strings comparisons.<\/p>\n+<p><code>EXPECT_EQ<\/code> just compares pointers’ values, which is hardly what one wants comparing C strings. GoogleTest provides <code>EXPECT_STREQ<\/code> and <code>EXPECT_STRNE<\/code> macros to compare C string contents. There are also case-insensitive versions <code>EXPECT_STRCASEEQ<\/code>, <code>EXPECT_STRCASENE<\/code>.<\/p>\n+<h3 id=\"error-messages\">Error messages<\/h3>\n+<p>Provide informative, but not too verbose error messages.<\/p>\n+<p>All GoogleTest asserts print compared expressions and their values, so there is no need to have them in error messages. Asserts print only compared values, they do not print any of interim variables, e.g. <code>ASSERT_TRUE((val1 == val2 &amp;&amp; isFail(foo(8)) || i == 18)<\/code> prints only one value. If you use some complex predicates, please consider <code>EXPECT_PRED*<\/code> or <code>EXPECT_FORMAT_PRED<\/code> assertions family, they check that a predicate returns true\/success and print out all parameters values.<\/p>\n+<p>However in some cases, default information is not enough, a commonly used example is an assert inside a loop, GoogleTest will not print iteration values (unless it is an assert's parameter). Other demonstrative examples are printing error code and a corresponding error message; printing internal states which might have an impact on results. One should add this information to assert message using <code>&lt;&lt;<\/code> operator.<\/p>\n+<h3 id=\"uncluttered-output\">Uncluttered output<\/h3>\n+<p>Print information only if it is needed.<\/p>\n+<p>Too verbose tests which print all information even if they pass are very bad practice. They just pollute output, so it becomes harder to find useful information. In order not print information till it is really needed, one should consider saving it to a temporary buffer and pass to an assert. <a href=\"https:\/\/hg.openjdk.java.net\/jdk\/jdk\/file\/tip\/test\/hotspot\/gtest\/gc\/shared\/test_memset_with_concurrent_readers.cpp\" class=\"uri\">https:\/\/hg.openjdk.java.net\/jdk\/jdk\/file\/tip\/test\/hotspot\/gtest\/gc\/shared\/test_memset_with_concurrent_readers.cpp<\/a> has a good example how to do that.<\/p>\n+<h3 id=\"failures-propagation\">Failures propagation<\/h3>\n+<p>Wrap a subroutine call into <code>EXPECT_NO_FATAL_FAILURE<\/code> macro to propagate failures.<\/p>\n+<p><code>ASSERT<\/code> and <code>FAIL<\/code> abort only the current function, so if you have them in a subroutine, a test will not be aborted after the subroutine even if <code>ASSERT<\/code> or <code>FAIL<\/code> fails. You should call such subroutines in <code>ASSERT_NO_FATAL_FAILURE<\/code> macro to propagate fatal failures and abort a test. <code>(EXPECT|ASSERT)_NO_FATAL_FAILURE<\/code> can also be used to provide more information.<\/p>\n+<p>Due to obvious reasons, there are no <code>(EXPECT|ASSERT)_NO_NONFATAL_FAILURE<\/code> macros. However, if you need to check if a subroutine generated a nonfatal failure (failed an <code>EXPECT<\/code>), you can use <code>::testing::Test::HasNonfatalFailure<\/code> function, or <code>::testing::Test::HasFailure<\/code> function to check if a subroutine generated any failures, see <a href=\"#several-checks\">Several checks<\/a>.<\/p>\n+<h2 id=\"naming-and-grouping\">Naming and Grouping<\/h2>\n+<h3 id=\"test-group-names\">Test group names<\/h3>\n+<p>Test group names should be in CamelCase, start and end with a letter. A test group should be named after tested class, functionality, subsystem, etc.<\/p>\n+<p>This naming scheme helps to find tests, filter them and simplifies test failure analysis. For example, class <code>Foo<\/code> - test group <code>Foo<\/code>, compiler logging subsystem - test group <code>CompilerLogging<\/code>, G1 GC — test group <code>G1GC<\/code>, and so forth.<\/p>\n+<h3 id=\"filename\">Filename<\/h3>\n+<p>A test file must have <code>test_<\/code> prefix and <code>.cpp<\/code> suffix.<\/p>\n+<p>Both are actually requirements from the current build system to recognize your tests.<\/p>\n+<h3 id=\"file-location\">File location<\/h3>\n+<p>Test file location should reflect a location of the tested part of the product.<\/p>\n+<ul>\n+<li><p>All unit tests for a class from <code>foo\/bar\/baz.cpp<\/code> should be placed <code>foo\/bar\/test_baz.cpp<\/code> in <code>hotspot\/test\/native\/<\/code> directory. Having all tests for a class in one file is a common practice for unit tests, it helps to see all existing tests at once, share functions and\/or resources without losing encapsulation.<\/p><\/li>\n+<li><p>For tests which test more than one class, directory hierarchy should be the same as product hierarchy, and file name should reflect the name of the tested subsystem\/functionality. For example, if a sub-system under tests belongs to <code>gc\/g1<\/code>, tests should be placed in <code>gc\/g1<\/code> directory.<\/p><\/li>\n+<\/ul>\n+<p>Please note that framework prepends directory name to a test group name. For example, if <code>TEST(foo, check_this)<\/code> and <code>TEST(bar, check_that)<\/code> are defined in <code>hotspot\/test\/native\/gc\/shared\/test_foo.cpp<\/code> file, they will be reported as <code>gc\/shared\/foo::check_this<\/code> and <code>gc\/shared\/bar::check_that<\/code>.<\/p>\n+<h3 id=\"test-names\">Test names<\/h3>\n+<p>Test names should be in small_snake_case, start and end with a letter. A test name should reflect that a test checks.<\/p>\n+<p>Such naming makes tests self-descriptive and helps a lot during the whole test life cycle. It is easy to do test planning, test inventory, to see what things are not tested, to review tests, to analyze test failures, to evolve a test, etc. For example <code>foo_return_0_if_name_is_null<\/code> is better than <code>foo_sanity<\/code> or <code>foo_basic<\/code> or just <code>foo<\/code>, <code>humongous_objects_can_not_be_moved_by_young_gc<\/code> is better than <code>ho_young_gc<\/code>.<\/p>\n+<p>Actually using underscore is against GoogleTest project convention, because it can lead to illegal identifiers, however, this is too strict. Restricting usage of underscore for test names only and prohibiting test name starts or ends with an underscore are enough to be safe.<\/p>\n+<h3 id=\"fixture-classes\">Fixture classes<\/h3>\n+<p>Fixture classes should be named after tested classes, subsystems, etc (follow <a href=\"#test-group-names\">Test group names rule<\/a>) and have <code>Test<\/code> suffix to prevent class name conflicts.<\/p>\n+<h3 id=\"friend-classes\">Friend classes<\/h3>\n+<p>All test purpose friends should have either <code>Test<\/code> or <code>Testable<\/code> suffix.<\/p>\n+<p>It greatly simplifies understanding of friendship’s purpose and allows statically check that private members are not exposed unexpectedly. Having <code>FooTest<\/code> as a friend of <code>Foo<\/code> without any comments will be understood as a necessary evil to get testability.<\/p>\n+<h3 id=\"oscpu-specific-tests\">OS\/CPU specific tests<\/h3>\n+<p>Guard OS\/CPU specific tests by <code>#ifdef<\/code> and have OS\/CPU name in filename.<\/p>\n+<p>For the time being, we do not support separate directories for OS, CPU, OS-CPU specific tests, in case we will have lots of such tests, we will change directory layout and build system to support that in the same way it is done in hotspot.<\/p>\n+<h2 id=\"miscellaneous\">Miscellaneous<\/h2>\n+<h3 id=\"hotspot-style\">Hotspot style<\/h3>\n+<p>Abide the norms and rules accepted in Hotspot style guide.<\/p>\n+<p>Tests are a part of Hotspot, so everything (if applicable) we use for Hotspot, should be used for tests as well. Those guidelines cover test-specific things.<\/p>\n+<h3 id=\"codetest-metrics\">Code\/test metrics<\/h3>\n+<p>Coverage information and other code\/test metrics are quite useful to decide what tests should be written, what tests should be improved and what can be removed.<\/p>\n+<p>For unit tests, widely used and well-known coverage metric is branch coverage, which provides good quality of tests with relatively easy test development process. For other levels of testing, branch coverage is not as good, and one should consider others metrics, e.g. transaction flow coverage, data flow coverage.<\/p>\n+<h3 id=\"access-to-non-public-members\">Access to non-public members<\/h3>\n+<p>Use explicit friend class to get access to non-public members.<\/p>\n+<p>We do not use GoogleTest macro to declare friendship relation, because, from our point of view, it is less clear than an explicit declaration.<\/p>\n+<p>Declaring a test fixture class as a friend class of a tested test is the easiest and the clearest way to get access. However, it has some disadvantages, here is some of them:<\/p>\n+<ul>\n+<li>Each test has to be declared as a friend<\/li>\n+<li>Subclasses do not inheritance friendship relation<\/li>\n+<\/ul>\n+<p>In other words, it is harder to share code between tests. Hence if you want to share code or expect it to be useful in other tests, you should consider making members in a tested class protected and introduce a shared test-only class which expose those members via public functions, or even making members publicly accessible right away in a product class. If it is not an option to change members visibility, one can create a friend class which exposes members.<\/p>\n+<h3 id=\"death-tests\">Death tests<\/h3>\n+<p>You can not use death tests inside <code>TEST_OTHER_VM<\/code> and <code>TEST_VM_ASSERT*<\/code>.<\/p>\n+<p>We tried to make Hotspot-GoogleTest integration as transparent as possible, however, due to the current implementation of <code>TEST_OTHER_VM<\/code> and <code>TEST_VM_ASSERT*<\/code> tests, you cannot use death test functionality in them. These tests are implemented as GoogleTest death tests, and GoogleTest does not allow to have a death test inside another death test.<\/p>\n+<h3 id=\"external-flags\">External flags<\/h3>\n+<p>Passing external flags to a tested JVM is not supported.<\/p>\n+<p>The rationality of such design decision is to simplify both tests and a test framework and to avoid failures related to incompatible flags combination till there is a good solution for that. However there are cases when one wants to test a JVM with specific flags combination, <code>_JAVA_OPTIONS<\/code> environment variable can be used to do that. Flags from <code>_JAVA_OPTIONS<\/code> will be used in <code>TEST_VM<\/code>, <code>TEST_OTHER_VM<\/code> and <code>TEST_VM_ASSERT*<\/code> tests.<\/p>\n+<h3 id=\"test-specific-flags\">Test-specific flags<\/h3>\n+<p>Passing flags to a tested JVM in <code>TEST_OTHER_VM<\/code> and <code>TEST_VM_ASSERT*<\/code> should be possible, but is not implemented yet.<\/p>\n+<p>Facility to pass test-specific flags is needed for system, regression or other types of tests which require a fully initialized JVM in some particular configuration, e.g. with Serial GC selected. There is no support for such tests now, however, there is a plan to add that in upcoming releases.<\/p>\n+<p>For now, if a test depends on flags values, it should have <code>if (!&lt;flag&gt;) { return }<\/code> guards in the very beginning and <code>@requires<\/code> comment similar to jtreg <code>@requires<\/code> directive right before test macros. <a href=\"https:\/\/hg.openjdk.java.net\/jdk\/jdk\/file\/tip\/test\/hotspot\/gtest\/gc\/g1\/test_g1IHOPControl.cpp\" class=\"uri\">https:\/\/hg.openjdk.java.net\/jdk\/jdk\/file\/tip\/test\/hotspot\/gtest\/gc\/g1\/test_g1IHOPControl.cpp<\/a> ha an example of this temporary workaround. It is important to follow that pattern as it allows us to easily find all such tests and update them as soon as there is an implementation of flag passing facility.<\/p>\n+<p>In long-term, we expect jtreg to support GoogleTest tests as first class citizens, that is to say, jtreg will parse <span class=\"citation\" data-cites=\"requires\">@requires<\/span> comments and filter out inapplicable tests.<\/p>\n+<h3 id=\"flag-restoring\">Flag restoring<\/h3>\n+<p>Restore changed flags.<\/p>\n+<p>It is quite common for tests to configure JVM in a certain way changing flags’ values. GoogleTest provides two ways to set up environment before a test and restore it afterward: using either constructor and destructor or <code>SetUp<\/code> and <code>TearDown<\/code> functions. Both ways require to use a test fixture class, which sometimes is too wordy. The simpler facilities like <code>FLAG_GUARD<\/code> macro or <code>*FlagSetting<\/code> classes could be used in such cases to restore\/set values.<\/p>\n+<p>Caveats:<\/p>\n+<ul>\n+<li><p>Changing a flag’s value could break the invariants between flags' values and hence could lead to unexpected\/unsupported JVM state.<\/p><\/li>\n+<li><p><code>FLAG_SET_*<\/code> macros can change more than one flag (in order to maintain invariants) so it is hard to predict what flags will be changed and it makes restoring all changed flags a nontrivial task. Thus in case one uses <code>FLAG_SET_*<\/code> macros, they should use <code>TEST_OTHER_VM<\/code> test type.<\/p><\/li>\n+<\/ul>\n+<h3 id=\"googletest-documentation\">GoogleTest documentation<\/h3>\n+<p>In case you have any questions regarding GoogleTest itself, its asserts, test declaration macros, other macros, etc, please consult its documentation.<\/p>\n+<h2 id=\"todo\">TODO<\/h2>\n+<p>Although this document provides guidelines on the most important parts of test development using GTest, it still misses a few items:<\/p>\n+<ul>\n+<li><p>Examples, esp for <a href=\"#access-to-non-public-members\">access to non-public members<\/a><\/p><\/li>\n+<li>test types: purpose, drawbacks, limitation\n+<ul>\n+<li><code>TEST_VM<\/code><\/li>\n+<li><code>TEST_VM_F<\/code><\/li>\n+<li><code>TEST_OTHER_VM<\/code><\/li>\n+<li><code>TEST_VM_ASSERT<\/code><\/li>\n+<li><code>TEST_VM_ASSERT_MSG<\/code><\/li>\n+<\/ul><\/li>\n+<li>Miscellaneous\n+<ul>\n+<li>Test libraries\n+<ul>\n+<li>where to place<\/li>\n+<li>how to write<\/li>\n+<li>how to use<\/li>\n+<\/ul><\/li>\n+<li>test your tests\n+<ul>\n+<li>how to run tests in random order<\/li>\n+<li>how to run only specific tests<\/li>\n+<li>how to run each test separately<\/li>\n+<li>check that a test can find bugs it is supposed to by introducing them<\/li>\n+<\/ul><\/li>\n+<li>mocks\/stubs\/dependency injection<\/li>\n+<li>setUp\/tearDown\n+<ul>\n+<li>vs c-tor\/d-tor<\/li>\n+<li>empty test to test them<\/li>\n+<\/ul><\/li>\n+<li>internal (declared in .cpp) struct\/classes<\/li>\n+<\/ul><\/li>\n+<\/ul>\n+<\/body>\n+<\/html>\n","filename":"doc\/hotspot-unit-tests.html","additions":223,"deletions":472,"binary":false,"changes":695,"status":"modified"},{"patch":"@@ -1,103 +1,60 @@\n-<!DOCTYPE html>\r\n-<html xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\" lang=\"\" xml:lang=\"\">\r\n-<head>\r\n-  <meta charset=\"utf-8\" \/>\r\n-  <meta name=\"generator\" content=\"pandoc\" \/>\r\n-  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" \/>\r\n-  <title>IDE support in the JDK<\/title>\r\n-  <style>\r\n-    code{white-space: pre-wrap;}\r\n-    span.smallcaps{font-variant: small-caps;}\r\n-    span.underline{text-decoration: underline;}\r\n-    div.column{display: inline-block; vertical-align: top; width: 50%;}\r\n-    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\r\n-    ul.task-list{list-style: none;}\r\n-    .display.math{display: block; text-align: center; margin: 0.5rem auto;}\r\n-  <\/style>\r\n-  <link rel=\"stylesheet\" href=\"..\/make\/data\/docs-resources\/resources\/jdk-default.css\" \/>\r\n-  <!--[if lt IE 9]>\r\n-    <script src=\"\/\/cdnjs.cloudflare.com\/ajax\/libs\/html5shiv\/3.7.3\/html5shiv-printshiv.min.js\"><\/script>\r\n-  <![endif]-->\r\n-<\/head>\r\n-<body>\r\n-<header id=\"title-block-header\">\r\n-<h1 class=\"title\">IDE support in the JDK<\/h1>\r\n-<\/header>\r\n-<nav id=\"TOC\" role=\"doc-toc\">\r\n-<ul>\r\n-<li><a href=\"#introduction\">Introduction<\/a>\r\n-<ul>\r\n-<li><a href=\"#ide-support-for-native-code\">IDE support for native\r\n-code<\/a><\/li>\r\n-<li><a href=\"#ide-support-for-java-code\">IDE support for Java\r\n-code<\/a><\/li>\r\n-<\/ul><\/li>\r\n-<\/ul>\r\n-<\/nav>\r\n-<h2 id=\"introduction\">Introduction<\/h2>\r\n-<p>When you are familiar with building and testing the JDK, you may want\r\n-to configure an IDE to work with the source code. The instructions\r\n-differ a bit depending on whether you are interested in working with the\r\n-native (C\/C++) or the Java code.<\/p>\r\n-<h3 id=\"ide-support-for-native-code\">IDE support for native code<\/h3>\r\n-<p>There are a few ways to generate IDE configuration for the native\r\n-sources, depending on which IDE to use.<\/p>\r\n-<h4 id=\"visual-studio-code\">Visual Studio Code<\/h4>\r\n-<p>The make system can generate a <a\r\n-href=\"https:\/\/code.visualstudio.com\">Visual Studio Code<\/a> workspace\r\n-that has C\/C++ source indexing configured correctly, as well as launcher\r\n-targets for tests and the Java launcher. After configuring, a workspace\r\n-for the configuration can be generated using:<\/p>\r\n-<pre class=\"shell\"><code>make vscode-project<\/code><\/pre>\r\n-<p>This creates a file called <code>jdk.code-workspace<\/code> in the\r\n-build output folder. The full location will be printed after the\r\n-workspace has been generated. To use it, choose\r\n-<code>File -&gt; Open Workspace...<\/code> in Visual Studio Code.<\/p>\r\n-<h5 id=\"alternative-indexers\">Alternative indexers<\/h5>\r\n-<p>The main <code>vscode-project<\/code> target configures the default\r\n-C++ support in Visual Studio Code. There are also other source indexers\r\n-that can be installed, that may provide additional features. It's\r\n-currently possible to generate configuration for two such indexers, <a\r\n-href=\"https:\/\/clang.llvm.org\/extra\/clangd\/\">clangd<\/a> and <a\r\n-href=\"https:\/\/github.com\/Andersbakken\/rtags\">rtags<\/a>. These can be\r\n-configured by appending the name of the indexer to the make target, such\r\n-as:<\/p>\r\n-<pre class=\"shell\"><code>make vscode-project-clangd<\/code><\/pre>\r\n-<p>Additional instructions for configuring the given indexer will be\r\n-displayed after the workspace has been generated.<\/p>\r\n-<h4 id=\"visual-studio\">Visual Studio<\/h4>\r\n-<p>The make system can generate a Visual Studio project for the Hotspot\r\n-native source. After configuring, the project is generated using:<\/p>\r\n-<pre class=\"shell\"><code>make hotspot-ide-project<\/code><\/pre>\r\n-<p>This creates a file named <code>jvm.vcxproj<\/code> in\r\n-<code>ide\\hotspot-visualstudio<\/code> subfolder of the build output\r\n-folder. The file can be opened in Visual Studio via\r\n-<code>File -&gt; Open -&gt; Project\/Solution<\/code>.<\/p>\r\n-<h4 id=\"compilation-database\">Compilation Database<\/h4>\r\n-<p>The make system can generate generic native code indexing support in\r\n-the form of a <a\r\n-href=\"https:\/\/clang.llvm.org\/docs\/JSONCompilationDatabase.html\">Compilation\r\n-Database<\/a> that can be used by many different IDEs and source code\r\n-indexers.<\/p>\r\n-<pre class=\"shell\"><code>make compile-commands<\/code><\/pre>\r\n-<p>It's also possible to generate the Compilation Database for the\r\n-HotSpot source code only, which is a bit faster as it includes less\r\n-information.<\/p>\r\n-<pre class=\"shell\"><code>make compile-commands-hotspot<\/code><\/pre>\r\n-<h3 id=\"ide-support-for-java-code\">IDE support for Java code<\/h3>\r\n-<h4 id=\"intellij-idea\">IntelliJ IDEA<\/h4>\r\n-<p>The JDK project has a script that can be used for indexing the\r\n-project with IntelliJ. After configuring and building the JDK, an\r\n-IntelliJ workspace can be generated by running the following command in\r\n-the top-level folder of the cloned repository:<\/p>\r\n-<pre class=\"shell\"><code>bash bin\/idea.sh<\/code><\/pre>\r\n-<p>To use it, choose <code>File -&gt; Open...<\/code> in IntelliJ and\r\n-select the folder where you ran the above script.<\/p>\r\n-<p>Next, configure the project SDK in IntelliJ. Open\r\n-<code>File -&gt; Project Structure -&gt; Project<\/code> and select\r\n-<code>build\/&lt;config&gt;\/images\/jdk<\/code> as the SDK to use.<\/p>\r\n-<p>In order to run the tests from the IDE, you can use the JTReg plugin.\r\n-Instructions for building and using the plugin can be found <a\r\n-href=\"https:\/\/github.com\/openjdk\/jtreg\/tree\/master\/plugins\/idea\">here<\/a>.<\/p>\r\n-<\/body>\r\n-<\/html>\r\n+<!DOCTYPE html>\n+<html xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\" lang=\"\" xml:lang=\"\">\n+<head>\n+  <meta charset=\"utf-8\" \/>\n+  <meta name=\"generator\" content=\"pandoc\" \/>\n+  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" \/>\n+  <title>IDE support in the JDK<\/title>\n+  <style type=\"text\/css\">\n+      code{white-space: pre-wrap;}\n+      span.smallcaps{font-variant: small-caps;}\n+      span.underline{text-decoration: underline;}\n+      div.column{display: inline-block; vertical-align: top; width: 50%;}\n+  <\/style>\n+  <link rel=\"stylesheet\" href=\"..\/make\/data\/docs-resources\/resources\/jdk-default.css\" \/>\n+  <!--[if lt IE 9]>\n+    <script src=\"\/\/cdnjs.cloudflare.com\/ajax\/libs\/html5shiv\/3.7.3\/html5shiv-printshiv.min.js\"><\/script>\n+  <![endif]-->\n+<\/head>\n+<body>\n+<header id=\"title-block-header\">\n+<h1 class=\"title\">IDE support in the JDK<\/h1>\n+<\/header>\n+<nav id=\"TOC\">\n+<ul>\n+<li><a href=\"#introduction\">Introduction<\/a><ul>\n+<li><a href=\"#ide-support-for-native-code\">IDE support for native code<\/a><\/li>\n+<li><a href=\"#ide-support-for-java-code\">IDE support for Java code<\/a><\/li>\n+<\/ul><\/li>\n+<\/ul>\n+<\/nav>\n+<h2 id=\"introduction\">Introduction<\/h2>\n+<p>When you are familiar with building and testing the JDK, you may want to configure an IDE to work with the source code. The instructions differ a bit depending on whether you are interested in working with the native (C\/C++) or the Java code.<\/p>\n+<h3 id=\"ide-support-for-native-code\">IDE support for native code<\/h3>\n+<p>There are a few ways to generate IDE configuration for the native sources, depending on which IDE to use.<\/p>\n+<h4 id=\"visual-studio-code\">Visual Studio Code<\/h4>\n+<p>The make system can generate a <a href=\"https:\/\/code.visualstudio.com\">Visual Studio Code<\/a> workspace that has C\/C++ source indexing configured correctly, as well as launcher targets for tests and the Java launcher. After configuring, a workspace for the configuration can be generated using:<\/p>\n+<pre class=\"shell\"><code>make vscode-project<\/code><\/pre>\n+<p>This creates a file called <code>jdk.code-workspace<\/code> in the build output folder. The full location will be printed after the workspace has been generated. To use it, choose <code>File -&gt; Open Workspace...<\/code> in Visual Studio Code.<\/p>\n+<h5 id=\"alternative-indexers\">Alternative indexers<\/h5>\n+<p>The main <code>vscode-project<\/code> target configures the default C++ support in Visual Studio Code. There are also other source indexers that can be installed, that may provide additional features. It's currently possible to generate configuration for two such indexers, <a href=\"https:\/\/clang.llvm.org\/extra\/clangd\/\">clangd<\/a> and <a href=\"https:\/\/github.com\/Andersbakken\/rtags\">rtags<\/a>. These can be configured by appending the name of the indexer to the make target, such as:<\/p>\n+<pre class=\"shell\"><code>make vscode-project-clangd<\/code><\/pre>\n+<p>Additional instructions for configuring the given indexer will be displayed after the workspace has been generated.<\/p>\n+<h4 id=\"visual-studio\">Visual Studio<\/h4>\n+<p>The make system can generate a Visual Studio project for the Hotspot native source. After configuring, the project is generated using:<\/p>\n+<pre class=\"shell\"><code>make hotspot-ide-project<\/code><\/pre>\n+<p>This creates a file named <code>jvm.vcxproj<\/code> in <code>ide\\hotspot-visualstudio<\/code> subfolder of the build output folder. The file can be opened in Visual Studio via <code>File -&gt; Open -&gt; Project\/Solution<\/code>.<\/p>\n+<h4 id=\"compilation-database\">Compilation Database<\/h4>\n+<p>The make system can generate generic native code indexing support in the form of a <a href=\"https:\/\/clang.llvm.org\/docs\/JSONCompilationDatabase.html\">Compilation Database<\/a> that can be used by many different IDEs and source code indexers.<\/p>\n+<pre class=\"shell\"><code>make compile-commands<\/code><\/pre>\n+<p>It's also possible to generate the Compilation Database for the HotSpot source code only, which is a bit faster as it includes less information.<\/p>\n+<pre class=\"shell\"><code>make compile-commands-hotspot<\/code><\/pre>\n+<h3 id=\"ide-support-for-java-code\">IDE support for Java code<\/h3>\n+<h4 id=\"intellij-idea\">IntelliJ IDEA<\/h4>\n+<p>The JDK project has a script that can be used for indexing the project with IntelliJ. After configuring and building the JDK, an IntelliJ workspace can be generated by running the following command in the top-level folder of the cloned repository:<\/p>\n+<pre class=\"shell\"><code>bash bin\/idea.sh<\/code><\/pre>\n+<p>To use it, choose <code>File -&gt; Open...<\/code> in IntelliJ and select the folder where you ran the above script.<\/p>\n+<p>Next, configure the project SDK in IntelliJ. Open <code>File -&gt; Project Structure -&gt; Project<\/code> and select <code>build\/&lt;config&gt;\/images\/jdk<\/code> as the SDK to use.<\/p>\n+<p>In order to run the tests from the IDE, you can use the JTReg plugin. Instructions for building and using the plugin can be found <a href=\"https:\/\/github.com\/openjdk\/jtreg\/tree\/master\/plugins\/idea\">here<\/a>.<\/p>\n+<\/body>\n+<\/html>\n","filename":"doc\/ide.html","additions":60,"deletions":103,"binary":false,"changes":163,"status":"modified"},{"patch":"@@ -1,534 +1,255 @@\n-<!DOCTYPE html>\r\n-<html xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\" lang=\"\" xml:lang=\"\">\r\n-<head>\r\n-  <meta charset=\"utf-8\" \/>\r\n-  <meta name=\"generator\" content=\"pandoc\" \/>\r\n-  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" \/>\r\n-  <title>Testing the JDK<\/title>\r\n-  <style>\r\n-    code{white-space: pre-wrap;}\r\n-    span.smallcaps{font-variant: small-caps;}\r\n-    span.underline{text-decoration: underline;}\r\n-    div.column{display: inline-block; vertical-align: top; width: 50%;}\r\n-    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\r\n-    ul.task-list{list-style: none;}\r\n-    .display.math{display: block; text-align: center; margin: 0.5rem auto;}\r\n-  <\/style>\r\n-  <link rel=\"stylesheet\" href=\"..\/make\/data\/docs-resources\/resources\/jdk-default.css\" \/>\r\n-  <style type=\"text\/css\">pre, code, tt { color: #1d6ae5; }<\/style>\r\n-  <!--[if lt IE 9]>\r\n-    <script src=\"\/\/cdnjs.cloudflare.com\/ajax\/libs\/html5shiv\/3.7.3\/html5shiv-printshiv.min.js\"><\/script>\r\n-  <![endif]-->\r\n-<\/head>\r\n-<body>\r\n-<header id=\"title-block-header\">\r\n-<h1 class=\"title\">Testing the JDK<\/h1>\r\n-<\/header>\r\n-<nav id=\"TOC\" role=\"doc-toc\">\r\n-<ul>\r\n-<li><a href=\"#using-make-test-the-run-test-framework\">Using \"make test\"\r\n-(the run-test framework)<\/a>\r\n-<ul>\r\n-<li><a href=\"#configuration\">Configuration<\/a><\/li>\r\n-<\/ul><\/li>\r\n-<li><a href=\"#test-selection\">Test selection<\/a>\r\n-<ul>\r\n-<li><a href=\"#common-test-groups\">Common Test Groups<\/a><\/li>\r\n-<li><a href=\"#jtreg\">JTReg<\/a><\/li>\r\n-<li><a href=\"#gtest\">Gtest<\/a><\/li>\r\n-<li><a href=\"#microbenchmarks\">Microbenchmarks<\/a><\/li>\r\n-<li><a href=\"#special-tests\">Special tests<\/a><\/li>\r\n-<\/ul><\/li>\r\n-<li><a href=\"#test-results-and-summary\">Test results and\r\n-summary<\/a><\/li>\r\n-<li><a href=\"#test-suite-control\">Test suite control<\/a>\r\n-<ul>\r\n-<li><a href=\"#general-keywords-test_opts\">General keywords\r\n-(TEST_OPTS)<\/a><\/li>\r\n-<li><a href=\"#jtreg-keywords\">JTReg keywords<\/a><\/li>\r\n-<li><a href=\"#gtest-keywords\">Gtest keywords<\/a><\/li>\r\n-<li><a href=\"#microbenchmark-keywords\">Microbenchmark keywords<\/a><\/li>\r\n-<\/ul><\/li>\r\n-<li><a href=\"#notes-for-specific-tests\">Notes for Specific Tests<\/a>\r\n-<ul>\r\n-<li><a href=\"#docker-tests\">Docker Tests<\/a><\/li>\r\n-<li><a href=\"#non-us-locale\">Non-US locale<\/a><\/li>\r\n-<li><a href=\"#pkcs11-tests\">PKCS11 Tests<\/a><\/li>\r\n-<li><a href=\"#client-ui-tests\">Client UI Tests<\/a><\/li>\r\n-<\/ul><\/li>\r\n-<\/ul>\r\n-<\/nav>\r\n-<h2 id=\"using-make-test-the-run-test-framework\">Using \"make test\" (the\r\n-run-test framework)<\/h2>\r\n-<p>This new way of running tests is developer-centric. It assumes that\r\n-you have built a JDK locally and want to test it. Running common test\r\n-targets is simple, and more complex ad-hoc combination of tests is\r\n-possible. The user interface is forgiving, and clearly report errors it\r\n-cannot resolve.<\/p>\r\n-<p>The main target <code>test<\/code> uses the jdk-image as the tested\r\n-product. There is also an alternate target <code>exploded-test<\/code>\r\n-that uses the exploded image instead. Not all tests will run\r\n-successfully on the exploded image, but using this target can greatly\r\n-improve rebuild times for certain workflows.<\/p>\r\n-<p>Previously, <code>make test<\/code> was used to invoke an old system\r\n-for running tests, and <code>make run-test<\/code> was used for the new\r\n-test framework. For backward compatibility with scripts and muscle\r\n-memory, <code>run-test<\/code> (and variants like\r\n-<code>exploded-run-test<\/code> or <code>run-test-tier1<\/code>) are kept\r\n-as aliases.<\/p>\r\n-<p>Some example command-lines:<\/p>\r\n-<pre><code>$ make test-tier1\r\n-$ make test-jdk_lang JTREG=&quot;JOBS=8&quot;\r\n-$ make test TEST=jdk_lang\r\n-$ make test-only TEST=&quot;gtest:LogTagSet gtest:LogTagSetDescriptions&quot; GTEST=&quot;REPEAT=-1&quot;\r\n-$ make test TEST=&quot;hotspot:hotspot_gc&quot; JTREG=&quot;JOBS=1;TIMEOUT_FACTOR=8;JAVA_OPTIONS=-XshowSettings -Xlog:gc+ref=debug&quot;\r\n-$ make test TEST=&quot;jtreg:test\/hotspot:hotspot_gc test\/hotspot\/jtreg\/native_sanity\/JniVersion.java&quot;\r\n-$ make test TEST=&quot;micro:java.lang.reflect&quot; MICRO=&quot;FORK=1;WARMUP_ITER=2&quot;\r\n-$ make exploded-test TEST=tier2<\/code><\/pre>\r\n-<h3 id=\"configuration\">Configuration<\/h3>\r\n-<p>To be able to run JTReg tests, <code>configure<\/code> needs to know\r\n-where to find the JTReg test framework. If it is not picked up\r\n-automatically by configure, use the\r\n-<code>--with-jtreg=&lt;path to jtreg home&gt;<\/code> option to point to\r\n-the JTReg framework. Note that this option should point to the JTReg\r\n-home, i.e. the top directory, containing <code>lib\/jtreg.jar<\/code> etc.\r\n-(An alternative is to set the <code>JT_HOME<\/code> environment variable\r\n-to point to the JTReg home before running <code>configure<\/code>.)<\/p>\r\n-<p>To be able to run microbenchmarks, <code>configure<\/code> needs to\r\n-know where to find the JMH dependency. Use\r\n-<code>--with-jmh=&lt;path to JMH jars&gt;<\/code> to point to a directory\r\n-containing the core JMH and transitive dependencies. The recommended\r\n-dependencies can be retrieved by running\r\n-<code>sh make\/devkit\/createJMHBundle.sh<\/code>, after which\r\n-<code>--with-jmh=build\/jmh\/jars<\/code> should work.<\/p>\r\n-<h2 id=\"test-selection\">Test selection<\/h2>\r\n-<p>All functionality is available using the <code>test<\/code> make\r\n-target. In this use case, the test or tests to be executed is controlled\r\n-using the <code>TEST<\/code> variable. To speed up subsequent test runs\r\n-with no source code changes, <code>test-only<\/code> can be used instead,\r\n-which do not depend on the source and test image build.<\/p>\r\n-<p>For some common top-level tests, direct make targets have been\r\n-generated. This includes all JTReg test groups, the hotspot gtest, and\r\n-custom tests (if present). This means that <code>make test-tier1<\/code>\r\n-is equivalent to <code>make test TEST=\"tier1\"<\/code>, but the latter is\r\n-more tab-completion friendly. For more complex test runs, the\r\n-<code>test TEST=\"x\"<\/code> solution needs to be used.<\/p>\r\n-<p>The test specifications given in <code>TEST<\/code> is parsed into\r\n-fully qualified test descriptors, which clearly and unambigously show\r\n-which tests will be run. As an example, <code>:tier1<\/code> will expand\r\n-to\r\n-<code>jtreg:$(TOPDIR)\/test\/hotspot\/jtreg:tier1 jtreg:$(TOPDIR)\/test\/jdk:tier1 jtreg:$(TOPDIR)\/test\/langtools:tier1 jtreg:$(TOPDIR)\/test\/nashorn:tier1 jtreg:$(TOPDIR)\/test\/jaxp:tier1<\/code>.\r\n-You can always submit a list of fully qualified test descriptors in the\r\n-<code>TEST<\/code> variable if you want to shortcut the parser.<\/p>\r\n-<h3 id=\"common-test-groups\">Common Test Groups<\/h3>\r\n-<p>Ideally, all tests are run for every change but this may not be\r\n-practical due to the limited testing resources, the scope of the change,\r\n-etc.<\/p>\r\n-<p>The source tree currently defines a few common test groups in the\r\n-relevant <code>TEST.groups<\/code> files. There are test groups that\r\n-cover a specific component, for example <code>hotspot_gc<\/code>. It is a\r\n-good idea to look into <code>TEST.groups<\/code> files to get a sense\r\n-what tests are relevant to a particular JDK component.<\/p>\r\n-<p>Component-specific tests may miss some unintended consequences of a\r\n-change, so other tests should also be run. Again, it might be\r\n-impractical to run all tests, and therefore <em>tiered<\/em> test groups\r\n-exist. Tiered test groups are not component-specific, but rather cover\r\n-the significant parts of the entire JDK.<\/p>\r\n-<p>Multiple tiers allow balancing test coverage and testing costs. Lower\r\n-test tiers are supposed to contain the simpler, quicker and more stable\r\n-tests. Higher tiers are supposed to contain progressively more thorough,\r\n-slower, and sometimes less stable tests, or the tests that require\r\n-special configuration.<\/p>\r\n-<p>Contributors are expected to run the tests for the areas that are\r\n-changed, and the first N tiers they can afford to run, but at least\r\n-tier1.<\/p>\r\n-<p>A brief description of the tiered test groups:<\/p>\r\n-<ul>\r\n-<li><p><code>tier1<\/code>: This is the lowest test tier. Multiple\r\n-developers run these tests every day. Because of the widespread use, the\r\n-tests in <code>tier1<\/code> are carefully selected and optimized to run\r\n-fast, and to run in the most stable manner. The test failures in\r\n-<code>tier1<\/code> are usually followed up on quickly, either with\r\n-fixes, or adding relevant tests to problem list. GitHub Actions\r\n-workflows, if enabled, run <code>tier1<\/code> tests.<\/p><\/li>\r\n-<li><p><code>tier2<\/code>: This test group covers even more ground.\r\n-These contain, among other things, tests that either run for too long to\r\n-be at <code>tier1<\/code>, or may require special configuration, or tests\r\n-that are less stable, or cover the broader range of non-core JVM and JDK\r\n-features\/components (for example, XML).<\/p><\/li>\r\n-<li><p><code>tier3<\/code>: This test group includes more stressful\r\n-tests, the tests for corner cases not covered by previous tiers, plus\r\n-the tests that require GUIs. As such, this suite should either be run\r\n-with low concurrency (<code>TEST_JOBS=1<\/code>), or without headful\r\n-tests (<code>JTREG_KEYWORDS=\\!headful<\/code>), or both.<\/p><\/li>\r\n-<li><p><code>tier4<\/code>: This test group includes every other test not\r\n-covered by previous tiers. It includes, for example,\r\n-<code>vmTestbase<\/code> suites for Hotspot, which run for many hours\r\n-even on large machines. It also runs GUI tests, so the same\r\n-<code>TEST_JOBS<\/code> and <code>JTREG_KEYWORDS<\/code> caveats\r\n-apply.<\/p><\/li>\r\n-<\/ul>\r\n-<h3 id=\"jtreg\">JTReg<\/h3>\r\n-<p>JTReg tests can be selected either by picking a JTReg test group, or\r\n-a selection of files or directories containing JTReg tests.<\/p>\r\n-<p>JTReg test groups can be specified either without a test root, e.g.\r\n-<code>:tier1<\/code> (or <code>tier1<\/code>, the initial colon is\r\n-optional), or with, e.g. <code>hotspot:tier1<\/code>,\r\n-<code>test\/jdk:jdk_util<\/code> or\r\n-<code>$(TOPDIR)\/test\/hotspot\/jtreg:hotspot_all<\/code>. The test root can\r\n-be specified either as an absolute path, or a path relative to the JDK\r\n-top directory, or the <code>test<\/code> directory. For simplicity, the\r\n-hotspot JTReg test root, which really is <code>hotspot\/jtreg<\/code> can\r\n-be abbreviated as just <code>hotspot<\/code>.<\/p>\r\n-<p>When specified without a test root, all matching groups from all test\r\n-roots will be added. Otherwise, only the group from the specified test\r\n-root will be added.<\/p>\r\n-<p>Individual JTReg tests or directories containing JTReg tests can also\r\n-be specified, like\r\n-<code>test\/hotspot\/jtreg\/native_sanity\/JniVersion.java<\/code> or\r\n-<code>hotspot\/jtreg\/native_sanity<\/code>. Just like for test root\r\n-selection, you can either specify an absolute path (which can even point\r\n-to JTReg tests outside the source tree), or a path relative to either\r\n-the JDK top directory or the <code>test<\/code> directory.\r\n-<code>hotspot<\/code> can be used as an alias for\r\n-<code>hotspot\/jtreg<\/code> here as well.<\/p>\r\n-<p>As long as the test groups or test paths can be uniquely resolved,\r\n-you do not need to enter the <code>jtreg:<\/code> prefix. If this is not\r\n-possible, or if you want to use a fully qualified test descriptor, add\r\n-<code>jtreg:<\/code>, e.g.\r\n-<code>jtreg:test\/hotspot\/jtreg\/native_sanity<\/code>.<\/p>\r\n-<h3 id=\"gtest\">Gtest<\/h3>\r\n-<p>Since the Hotspot Gtest suite is so quick, the default is to run all\r\n-tests. This is specified by just <code>gtest<\/code>, or as a fully\r\n-qualified test descriptor <code>gtest:all<\/code>.<\/p>\r\n-<p>If you want, you can single out an individual test or a group of\r\n-tests, for instance <code>gtest:LogDecorations<\/code> or\r\n-<code>gtest:LogDecorations.level_test_vm<\/code>. This can be\r\n-particularly useful if you want to run a shaky test repeatedly.<\/p>\r\n-<p>For Gtest, there is a separate test suite for each JVM variant. The\r\n-JVM variant is defined by adding <code>\/&lt;variant&gt;<\/code> to the\r\n-test descriptor, e.g. <code>gtest:Log\/client<\/code>. If you specify no\r\n-variant, gtest will run once for each JVM variant present (e.g. server,\r\n-client). So if you only have the server JVM present, then\r\n-<code>gtest:all<\/code> will be equivalent to\r\n-<code>gtest:all\/server<\/code>.<\/p>\r\n-<h3 id=\"microbenchmarks\">Microbenchmarks<\/h3>\r\n-<p>Which microbenchmarks to run is selected using a regular expression\r\n-following the <code>micro:<\/code> test descriptor, e.g.,\r\n-<code>micro:java.lang.reflect<\/code>. This delegates the test selection\r\n-to JMH, meaning package name, class name and even benchmark method names\r\n-can be used to select tests.<\/p>\r\n-<p>Using special characters like <code>|<\/code> in the regular\r\n-expression is possible, but needs to be escaped multiple times:\r\n-<code>micro:ArrayCopy\\\\\\\\\\|reflect<\/code>.<\/p>\r\n-<h3 id=\"special-tests\">Special tests<\/h3>\r\n-<p>A handful of odd tests that are not covered by any other testing\r\n-framework are accessible using the <code>special:<\/code> test\r\n-descriptor. Currently, this includes <code>failure-handler<\/code> and\r\n-<code>make<\/code>.<\/p>\r\n-<ul>\r\n-<li><p>Failure handler testing is run using\r\n-<code>special:failure-handler<\/code> or just\r\n-<code>failure-handler<\/code> as test descriptor.<\/p><\/li>\r\n-<li><p>Tests for the build system, including both makefiles and related\r\n-functionality, is run using <code>special:make<\/code> or just\r\n-<code>make<\/code> as test descriptor. This is equivalent to\r\n-<code>special:make:all<\/code>.<\/p>\r\n-<p>A specific make test can be run by supplying it as argument, e.g.\r\n-<code>special:make:idea<\/code>. As a special syntax, this can also be\r\n-expressed as <code>make-idea<\/code>, which allows for command lines as\r\n-<code>make test-make-idea<\/code>.<\/p><\/li>\r\n-<\/ul>\r\n-<h2 id=\"test-results-and-summary\">Test results and summary<\/h2>\r\n-<p>At the end of the test run, a summary of all tests run will be\r\n-presented. This will have a consistent look, regardless of what test\r\n-suites were used. This is a sample summary:<\/p>\r\n-<pre><code>==============================\r\n-Test summary\r\n-==============================\r\n-   TEST                                          TOTAL  PASS  FAIL ERROR\r\n-&gt;&gt; jtreg:jdk\/test:tier1                           1867  1865     2     0 &lt;&lt;\r\n-   jtreg:langtools\/test:tier1                     4711  4711     0     0\r\n-   jtreg:nashorn\/test:tier1                        133   133     0     0\r\n-==============================\r\n-TEST FAILURE<\/code><\/pre>\r\n-<p>Tests where the number of TOTAL tests does not equal the number of\r\n-PASSed tests will be considered a test failure. These are marked with\r\n-the <code>&gt;&gt; ... &lt;&lt;<\/code> marker for easy\r\n-identification.<\/p>\r\n-<p>The classification of non-passed tests differs a bit between test\r\n-suites. In the summary, ERROR is used as a catch-all for tests that\r\n-neither passed nor are classified as failed by the framework. This might\r\n-indicate test framework error, timeout or other problems.<\/p>\r\n-<p>In case of test failures, <code>make test<\/code> will exit with a\r\n-non-zero exit value.<\/p>\r\n-<p>All tests have their result stored in\r\n-<code>build\/$BUILD\/test-results\/$TEST_ID<\/code>, where TEST_ID is a\r\n-path-safe conversion from the fully qualified test descriptor, e.g. for\r\n-<code>jtreg:jdk\/test:tier1<\/code> the TEST_ID is\r\n-<code>jtreg_jdk_test_tier1<\/code>. This path is also printed in the log\r\n-at the end of the test run.<\/p>\r\n-<p>Additional work data is stored in\r\n-<code>build\/$BUILD\/test-support\/$TEST_ID<\/code>. For some frameworks,\r\n-this directory might contain information that is useful in determining\r\n-the cause of a failed test.<\/p>\r\n-<h2 id=\"test-suite-control\">Test suite control<\/h2>\r\n-<p>It is possible to control various aspects of the test suites using\r\n-make control variables.<\/p>\r\n-<p>These variables use a keyword=value approach to allow multiple values\r\n-to be set. So, for instance,\r\n-<code>JTREG=\"JOBS=1;TIMEOUT_FACTOR=8\"<\/code> will set the JTReg\r\n-concurrency level to 1 and the timeout factor to 8. This is equivalent\r\n-to setting <code>JTREG_JOBS=1 JTREG_TIMEOUT_FACTOR=8<\/code>, but using\r\n-the keyword format means that the <code>JTREG<\/code> variable is parsed\r\n-and verified for correctness, so <code>JTREG=\"TMIEOUT_FACTOR=8\"<\/code>\r\n-would give an error, while <code>JTREG_TMIEOUT_FACTOR=8<\/code> would\r\n-just pass unnoticed.<\/p>\r\n-<p>To separate multiple keyword=value pairs, use <code>;<\/code>\r\n-(semicolon). Since the shell normally eats <code>;<\/code>, the\r\n-recommended usage is to write the assignment inside qoutes, e.g.\r\n-<code>JTREG=\"...;...\"<\/code>. This will also make sure spaces are\r\n-preserved, as in\r\n-<code>JTREG=\"JAVA_OPTIONS=-XshowSettings -Xlog:gc+ref=debug\"<\/code>.<\/p>\r\n-<p>(Other ways are possible, e.g. using backslash:\r\n-<code>JTREG=JOBS=1\\;TIMEOUT_FACTOR=8<\/code>. Also, as a special\r\n-technique, the string <code>%20<\/code> will be replaced with space for\r\n-certain options, e.g.\r\n-<code>JTREG=JAVA_OPTIONS=-XshowSettings%20-Xlog:gc+ref=debug<\/code>.\r\n-This can be useful if you have layers of scripts and have trouble\r\n-getting proper quoting of command line arguments through.)<\/p>\r\n-<p>As far as possible, the names of the keywords have been standardized\r\n-between test suites.<\/p>\r\n-<h3 id=\"general-keywords-test_opts\">General keywords (TEST_OPTS)<\/h3>\r\n-<p>Some keywords are valid across different test suites. If you want to\r\n-run tests from multiple test suites, or just don't want to care which\r\n-test suite specific control variable to use, then you can use the\r\n-general TEST_OPTS control variable.<\/p>\r\n-<p>There are also some keywords that applies globally to the test runner\r\n-system, not to any specific test suites. These are also available as\r\n-TEST_OPTS keywords.<\/p>\r\n-<h4 id=\"jobs\">JOBS<\/h4>\r\n-<p>Currently only applies to JTReg.<\/p>\r\n-<h4 id=\"timeout_factor\">TIMEOUT_FACTOR<\/h4>\r\n-<p>Currently only applies to JTReg.<\/p>\r\n-<h4 id=\"java_options\">JAVA_OPTIONS<\/h4>\r\n-<p>Applies to JTReg, GTest and Micro.<\/p>\r\n-<h4 id=\"vm_options\">VM_OPTIONS<\/h4>\r\n-<p>Applies to JTReg, GTest and Micro.<\/p>\r\n-<h4 id=\"aot_modules\">AOT_MODULES<\/h4>\r\n-<p>Applies to JTReg and GTest.<\/p>\r\n-<h4 id=\"jcov\">JCOV<\/h4>\r\n-<p>This keywords applies globally to the test runner system. If set to\r\n-<code>true<\/code>, it enables JCov coverage reporting for all tests run.\r\n-To be useful, the JDK under test must be run with a JDK built with JCov\r\n-instrumentation\r\n-(<code>configure --with-jcov=&lt;path to directory containing lib\/jcov.jar&gt;<\/code>,\r\n-<code>make jcov-image<\/code>).<\/p>\r\n-<p>The simplest way to run tests with JCov coverage report is to use the\r\n-special target <code>jcov-test<\/code> instead of <code>test<\/code>, e.g.\r\n-<code>make jcov-test TEST=jdk_lang<\/code>. This will make sure the JCov\r\n-image is built, and that JCov reporting is enabled.<\/p>\r\n-<p>The JCov report is stored in\r\n-<code>build\/$BUILD\/test-results\/jcov-output\/report<\/code>.<\/p>\r\n-<p>Please note that running with JCov reporting can be very memory\r\n-intensive.<\/p>\r\n-<h4 id=\"jcov_diff_changeset\">JCOV_DIFF_CHANGESET<\/h4>\r\n-<p>While collecting code coverage with JCov, it is also possible to find\r\n-coverage for only recently changed code. JCOV_DIFF_CHANGESET specifies a\r\n-source revision. A textual report will be generated showing coverage of\r\n-the diff between the specified revision and the repository tip.<\/p>\r\n-<p>The report is stored in\r\n-<code>build\/$BUILD\/test-results\/jcov-output\/diff_coverage_report<\/code>\r\n-file.<\/p>\r\n-<h3 id=\"jtreg-keywords\">JTReg keywords<\/h3>\r\n-<h4 id=\"jobs-1\">JOBS<\/h4>\r\n-<p>The test concurrency (<code>-concurrency<\/code>).<\/p>\r\n-<p>Defaults to TEST_JOBS (if set by <code>--with-test-jobs=<\/code>),\r\n-otherwise it defaults to JOBS, except for Hotspot, where the default is\r\n-<em>number of CPU cores\/2<\/em>, but never more than <em>memory size in\r\n-GB\/2<\/em>.<\/p>\r\n-<h4 id=\"timeout_factor-1\">TIMEOUT_FACTOR<\/h4>\r\n-<p>The timeout factor (<code>-timeoutFactor<\/code>).<\/p>\r\n-<p>Defaults to 4.<\/p>\r\n-<h4 id=\"failure_handler_timeout\">FAILURE_HANDLER_TIMEOUT<\/h4>\r\n-<p>Sets the argument <code>-timeoutHandlerTimeout<\/code> for JTReg. The\r\n-default value is 0. This is only valid if the failure handler is\r\n-built.<\/p>\r\n-<h4 id=\"test_mode\">TEST_MODE<\/h4>\r\n-<p>The test mode (<code>agentvm<\/code> or <code>othervm<\/code>).<\/p>\r\n-<p>Defaults to <code>agentvm<\/code>.<\/p>\r\n-<h4 id=\"assert\">ASSERT<\/h4>\r\n-<p>Enable asserts (<code>-ea -esa<\/code>, or none).<\/p>\r\n-<p>Set to <code>true<\/code> or <code>false<\/code>. If true, adds\r\n-<code>-ea -esa<\/code>. Defaults to true, except for hotspot.<\/p>\r\n-<h4 id=\"verbose\">VERBOSE<\/h4>\r\n-<p>The verbosity level (<code>-verbose<\/code>).<\/p>\r\n-<p>Defaults to <code>fail,error,summary<\/code>.<\/p>\r\n-<h4 id=\"retain\">RETAIN<\/h4>\r\n-<p>What test data to retain (<code>-retain<\/code>).<\/p>\r\n-<p>Defaults to <code>fail,error<\/code>.<\/p>\r\n-<h4 id=\"max_mem\">MAX_MEM<\/h4>\r\n-<p>Limit memory consumption (<code>-Xmx<\/code> and\r\n-<code>-vmoption:-Xmx<\/code>, or none).<\/p>\r\n-<p>Limit memory consumption for JTReg test framework and VM under test.\r\n-Set to 0 to disable the limits.<\/p>\r\n-<p>Defaults to 512m, except for hotspot, where it defaults to 0 (no\r\n-limit).<\/p>\r\n-<h4 id=\"max_output\">MAX_OUTPUT<\/h4>\r\n-<p>Set the property <code>javatest.maxOutputSize<\/code> for the\r\n-launcher, to change the default JTReg log limit.<\/p>\r\n-<h4 id=\"keywords\">KEYWORDS<\/h4>\r\n-<p>JTReg keywords sent to JTReg using <code>-k<\/code>. Please be careful\r\n-in making sure that spaces and special characters (like <code>!<\/code>)\r\n-are properly quoted. To avoid some issues, the special value\r\n-<code>%20<\/code> can be used instead of space.<\/p>\r\n-<h4 id=\"extra_problem_lists\">EXTRA_PROBLEM_LISTS<\/h4>\r\n-<p>Use additional problem lists file or files, in addition to the\r\n-default ProblemList.txt located at the JTReg test roots.<\/p>\r\n-<p>If multiple file names are specified, they should be separated by\r\n-space (or, to help avoid quoting issues, the special value\r\n-<code>%20<\/code>).<\/p>\r\n-<p>The file names should be either absolute, or relative to the JTReg\r\n-test root of the tests to be run.<\/p>\r\n-<h4 id=\"run_problem_lists\">RUN_PROBLEM_LISTS<\/h4>\r\n-<p>Use the problem lists to select tests instead of excluding them.<\/p>\r\n-<p>Set to <code>true<\/code> or <code>false<\/code>. If <code>true<\/code>,\r\n-JTReg will use <code>-match:<\/code> option, otherwise\r\n-<code>-exclude:<\/code> will be used. Default is <code>false<\/code>.<\/p>\r\n-<h4 id=\"options\">OPTIONS<\/h4>\r\n-<p>Additional options to the JTReg test framework.<\/p>\r\n-<p>Use <code>JTREG=\"OPTIONS=--help all\"<\/code> to see all available\r\n-JTReg options.<\/p>\r\n-<h4 id=\"java_options-1\">JAVA_OPTIONS<\/h4>\r\n-<p>Additional Java options for running test classes (sent to JTReg as\r\n-<code>-javaoption<\/code>).<\/p>\r\n-<h4 id=\"vm_options-1\">VM_OPTIONS<\/h4>\r\n-<p>Additional Java options to be used when compiling and running classes\r\n-(sent to JTReg as <code>-vmoption<\/code>).<\/p>\r\n-<p>This option is only needed in special circumstances. To pass Java\r\n-options to your test classes, use <code>JAVA_OPTIONS<\/code>.<\/p>\r\n-<h4 id=\"launcher_options\">LAUNCHER_OPTIONS<\/h4>\r\n-<p>Additional Java options that are sent to the java launcher that\r\n-starts the JTReg harness.<\/p>\r\n-<h4 id=\"aot_modules-1\">AOT_MODULES<\/h4>\r\n-<p>Generate AOT modules before testing for the specified module, or set\r\n-of modules. If multiple modules are specified, they should be separated\r\n-by space (or, to help avoid quoting issues, the special value\r\n-<code>%20<\/code>).<\/p>\r\n-<h4 id=\"retry_count\">RETRY_COUNT<\/h4>\r\n-<p>Retry failed tests up to a set number of times, until they pass. This\r\n-allows to pass the tests with intermittent failures. Defaults to 0.<\/p>\r\n-<h4 id=\"repeat_count\">REPEAT_COUNT<\/h4>\r\n-<p>Repeat the tests up to a set number of times, stopping at first\r\n-failure. This helps to reproduce intermittent test failures. Defaults to\r\n-0.<\/p>\r\n-<h3 id=\"gtest-keywords\">Gtest keywords<\/h3>\r\n-<h4 id=\"repeat\">REPEAT<\/h4>\r\n-<p>The number of times to repeat the tests\r\n-(<code>--gtest_repeat<\/code>).<\/p>\r\n-<p>Default is 1. Set to -1 to repeat indefinitely. This can be\r\n-especially useful combined with\r\n-<code>OPTIONS=--gtest_break_on_failure<\/code> to reproduce an\r\n-intermittent problem.<\/p>\r\n-<h4 id=\"options-1\">OPTIONS<\/h4>\r\n-<p>Additional options to the Gtest test framework.<\/p>\r\n-<p>Use <code>GTEST=\"OPTIONS=--help\"<\/code> to see all available Gtest\r\n-options.<\/p>\r\n-<h4 id=\"aot_modules-2\">AOT_MODULES<\/h4>\r\n-<p>Generate AOT modules before testing for the specified module, or set\r\n-of modules. If multiple modules are specified, they should be separated\r\n-by space (or, to help avoid quoting issues, the special value\r\n-<code>%20<\/code>).<\/p>\r\n-<h3 id=\"microbenchmark-keywords\">Microbenchmark keywords<\/h3>\r\n-<h4 id=\"fork\">FORK<\/h4>\r\n-<p>Override the number of benchmark forks to spawn. Same as specifying\r\n-<code>-f &lt;num&gt;<\/code>.<\/p>\r\n-<h4 id=\"iter\">ITER<\/h4>\r\n-<p>Number of measurement iterations per fork. Same as specifying\r\n-<code>-i &lt;num&gt;<\/code>.<\/p>\r\n-<h4 id=\"time\">TIME<\/h4>\r\n-<p>Amount of time to spend in each measurement iteration, in seconds.\r\n-Same as specifying <code>-r &lt;num&gt;<\/code><\/p>\r\n-<h4 id=\"warmup_iter\">WARMUP_ITER<\/h4>\r\n-<p>Number of warmup iterations to run before the measurement phase in\r\n-each fork. Same as specifying <code>-wi &lt;num&gt;<\/code>.<\/p>\r\n-<h4 id=\"warmup_time\">WARMUP_TIME<\/h4>\r\n-<p>Amount of time to spend in each warmup iteration. Same as specifying\r\n-<code>-w &lt;num&gt;<\/code>.<\/p>\r\n-<h4 id=\"results_format\">RESULTS_FORMAT<\/h4>\r\n-<p>Specify to have the test run save a log of the values. Accepts the\r\n-same values as <code>-rff<\/code>, i.e., <code>text<\/code>,\r\n-<code>csv<\/code>, <code>scsv<\/code>, <code>json<\/code>, or\r\n-<code>latex<\/code>.<\/p>\r\n-<h4 id=\"vm_options-2\">VM_OPTIONS<\/h4>\r\n-<p>Additional VM arguments to provide to forked off VMs. Same as\r\n-<code>-jvmArgs &lt;args&gt;<\/code><\/p>\r\n-<h4 id=\"options-2\">OPTIONS<\/h4>\r\n-<p>Additional arguments to send to JMH.<\/p>\r\n-<h2 id=\"notes-for-specific-tests\">Notes for Specific Tests<\/h2>\r\n-<h3 id=\"docker-tests\">Docker Tests<\/h3>\r\n-<p>Docker tests with default parameters may fail on systems with glibc\r\n-versions not compatible with the one used in the default docker image\r\n-(e.g., Oracle Linux 7.6 for x86). For example, they pass on Ubuntu 16.04\r\n-but fail on Ubuntu 18.04 if run like this on x86:<\/p>\r\n-<pre><code>$ make test TEST=&quot;jtreg:test\/hotspot\/jtreg\/containers\/docker&quot;<\/code><\/pre>\r\n-<p>To run these tests correctly, additional parameters for the correct\r\n-docker image are required on Ubuntu 18.04 by using\r\n-<code>JAVA_OPTIONS<\/code>.<\/p>\r\n-<pre><code>$ make test TEST=&quot;jtreg:test\/hotspot\/jtreg\/containers\/docker&quot; \\\r\n-    JTREG=&quot;JAVA_OPTIONS=-Djdk.test.docker.image.name=ubuntu\r\n-    -Djdk.test.docker.image.version=latest&quot;<\/code><\/pre>\r\n-<h3 id=\"non-us-locale\">Non-US locale<\/h3>\r\n-<p>If your locale is non-US, some tests are likely to fail. To work\r\n-around this you can set the locale to US. On Unix platforms simply\r\n-setting <code>LANG=\"en_US\"<\/code> in the environment before running\r\n-tests should work. On Windows or MacOS, setting\r\n-<code>JTREG=\"VM_OPTIONS=-Duser.language=en -Duser.country=US\"<\/code>\r\n-helps for most, but not all test cases.<\/p>\r\n-<p>For example:<\/p>\r\n-<pre><code>$ export LANG=&quot;en_US&quot; &amp;&amp; make test TEST=...\r\n-$ make test JTREG=&quot;VM_OPTIONS=-Duser.language=en -Duser.country=US&quot; TEST=...<\/code><\/pre>\r\n-<h3 id=\"pkcs11-tests\">PKCS11 Tests<\/h3>\r\n-<p>It is highly recommended to use the latest NSS version when running\r\n-PKCS11 tests. Improper NSS version may lead to unexpected failures which\r\n-are hard to diagnose. For example,\r\n-sun\/security\/pkcs11\/Secmod\/AddTrustedCert.java may fail on Ubuntu 18.04\r\n-with the default NSS version in the system. To run these tests\r\n-correctly, the system property <code>test.nss.lib.paths<\/code> is\r\n-required on Ubuntu 18.04 to specify the alternative NSS lib\r\n-directories.<\/p>\r\n-<p>For example:<\/p>\r\n-<pre><code>$ make test TEST=&quot;jtreg:sun\/security\/pkcs11\/Secmod\/AddTrustedCert.java&quot; \\\r\n-    JTREG=&quot;JAVA_OPTIONS=-Dtest.nss.lib.paths=\/path\/to\/your\/latest\/NSS-libs&quot;<\/code><\/pre>\r\n-<p>For more notes about the PKCS11 tests, please refer to\r\n-test\/jdk\/sun\/security\/pkcs11\/README.<\/p>\r\n-<h3 id=\"client-ui-tests\">Client UI Tests<\/h3>\r\n-<p>Some Client UI tests use key sequences which may be reserved by the\r\n-operating system. Usually that causes the test failure. So it is highly\r\n-recommended to disable system key shortcuts prior testing. The steps to\r\n-access and disable system key shortcuts for various platforms are\r\n-provided below.<\/p>\r\n-<h4 id=\"macos\">MacOS<\/h4>\r\n-<p>Choose Apple menu; System Preferences, click Keyboard, then click\r\n-Shortcuts; select or deselect desired shortcut.<\/p>\r\n-<p>For example,\r\n-test\/jdk\/javax\/swing\/TooltipManager\/JMenuItemToolTipKeyBindingsTest\/JMenuItemToolTipKeyBindingsTest.java\r\n-fails on MacOS because it uses <code>CTRL + F1<\/code> key sequence to\r\n-show or hide tooltip message but the key combination is reserved by the\r\n-operating system. To run the test correctly the default global key\r\n-shortcut should be disabled using the steps described above, and then\r\n-deselect \"Turn keyboard access on or off\" option which is responsible\r\n-for <code>CTRL + F1<\/code> combination.<\/p>\r\n-<h4 id=\"linux\">Linux<\/h4>\r\n-<p>Open the Activities overview and start typing Settings; Choose\r\n-Settings, click Devices, then click Keyboard; set or override desired\r\n-shortcut.<\/p>\r\n-<h4 id=\"windows\">Windows<\/h4>\r\n-<p>Type <code>gpedit<\/code> in the Search and then click Edit group\r\n-policy; navigate to User Configuration -&gt; Administrative Templates\r\n--&gt; Windows Components -&gt; File Explorer; in the right-side pane\r\n-look for \"Turn off Windows key hotkeys\" and double click on it; enable\r\n-or disable hotkeys.<\/p>\r\n-<p>Note: restart is required to make the settings take effect.<\/p>\r\n-<\/body>\r\n-<\/html>\r\n+<!DOCTYPE html>\n+<html xmlns=\"http:\/\/www.w3.org\/1999\/xhtml\" lang=\"\" xml:lang=\"\">\n+<head>\n+  <meta charset=\"utf-8\" \/>\n+  <meta name=\"generator\" content=\"pandoc\" \/>\n+  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" \/>\n+  <title>Testing the JDK<\/title>\n+  <style type=\"text\/css\">\n+      code{white-space: pre-wrap;}\n+      span.smallcaps{font-variant: small-caps;}\n+      span.underline{text-decoration: underline;}\n+      div.column{display: inline-block; vertical-align: top; width: 50%;}\n+  <\/style>\n+  <link rel=\"stylesheet\" href=\"..\/make\/data\/docs-resources\/resources\/jdk-default.css\" \/>\n+  <!--[if lt IE 9]>\n+    <script src=\"\/\/cdnjs.cloudflare.com\/ajax\/libs\/html5shiv\/3.7.3\/html5shiv-printshiv.min.js\"><\/script>\n+  <![endif]-->\n+  <style type=\"text\/css\">pre, code, tt { color: #1d6ae5; }<\/style>\n+<\/head>\n+<body>\n+<header id=\"title-block-header\">\n+<h1 class=\"title\">Testing the JDK<\/h1>\n+<\/header>\n+<nav id=\"TOC\">\n+<ul>\n+<li><a href=\"#using-make-test-the-run-test-framework\">Using &quot;make test&quot; (the run-test framework)<\/a><ul>\n+<li><a href=\"#configuration\">Configuration<\/a><\/li>\n+<\/ul><\/li>\n+<li><a href=\"#test-selection\">Test selection<\/a><ul>\n+<li><a href=\"#common-test-groups\">Common Test Groups<\/a><\/li>\n+<li><a href=\"#jtreg\">JTReg<\/a><\/li>\n+<li><a href=\"#gtest\">Gtest<\/a><\/li>\n+<li><a href=\"#microbenchmarks\">Microbenchmarks<\/a><\/li>\n+<li><a href=\"#special-tests\">Special tests<\/a><\/li>\n+<\/ul><\/li>\n+<li><a href=\"#test-results-and-summary\">Test results and summary<\/a><\/li>\n+<li><a href=\"#test-suite-control\">Test suite control<\/a><ul>\n+<li><a href=\"#general-keywords-test_opts\">General keywords (TEST_OPTS)<\/a><\/li>\n+<li><a href=\"#jtreg-keywords\">JTReg keywords<\/a><\/li>\n+<li><a href=\"#gtest-keywords\">Gtest keywords<\/a><\/li>\n+<li><a href=\"#microbenchmark-keywords\">Microbenchmark keywords<\/a><\/li>\n+<\/ul><\/li>\n+<li><a href=\"#notes-for-specific-tests\">Notes for Specific Tests<\/a><ul>\n+<li><a href=\"#docker-tests\">Docker Tests<\/a><\/li>\n+<li><a href=\"#non-us-locale\">Non-US locale<\/a><\/li>\n+<li><a href=\"#pkcs11-tests\">PKCS11 Tests<\/a><\/li>\n+<li><a href=\"#client-ui-tests\">Client UI Tests<\/a><\/li>\n+<\/ul><\/li>\n+<\/ul>\n+<\/nav>\n+<h2 id=\"using-make-test-the-run-test-framework\">Using &quot;make test&quot; (the run-test framework)<\/h2>\n+<p>This new way of running tests is developer-centric. It assumes that you have built a JDK locally and want to test it. Running common test targets is simple, and more complex ad-hoc combination of tests is possible. The user interface is forgiving, and clearly report errors it cannot resolve.<\/p>\n+<p>The main target <code>test<\/code> uses the jdk-image as the tested product. There is also an alternate target <code>exploded-test<\/code> that uses the exploded image instead. Not all tests will run successfully on the exploded image, but using this target can greatly improve rebuild times for certain workflows.<\/p>\n+<p>Previously, <code>make test<\/code> was used to invoke an old system for running tests, and <code>make run-test<\/code> was used for the new test framework. For backward compatibility with scripts and muscle memory, <code>run-test<\/code> (and variants like <code>exploded-run-test<\/code> or <code>run-test-tier1<\/code>) are kept as aliases.<\/p>\n+<p>Some example command-lines:<\/p>\n+<pre><code>$ make test-tier1\n+$ make test-jdk_lang JTREG=&quot;JOBS=8&quot;\n+$ make test TEST=jdk_lang\n+$ make test-only TEST=&quot;gtest:LogTagSet gtest:LogTagSetDescriptions&quot; GTEST=&quot;REPEAT=-1&quot;\n+$ make test TEST=&quot;hotspot:hotspot_gc&quot; JTREG=&quot;JOBS=1;TIMEOUT_FACTOR=8;JAVA_OPTIONS=-XshowSettings -Xlog:gc+ref=debug&quot;\n+$ make test TEST=&quot;jtreg:test\/hotspot:hotspot_gc test\/hotspot\/jtreg\/native_sanity\/JniVersion.java&quot;\n+$ make test TEST=&quot;micro:java.lang.reflect&quot; MICRO=&quot;FORK=1;WARMUP_ITER=2&quot;\n+$ make exploded-test TEST=tier2<\/code><\/pre>\n+<h3 id=\"configuration\">Configuration<\/h3>\n+<p>To be able to run JTReg tests, <code>configure<\/code> needs to know where to find the JTReg test framework. If it is not picked up automatically by configure, use the <code>--with-jtreg=&lt;path to jtreg home&gt;<\/code> option to point to the JTReg framework. Note that this option should point to the JTReg home, i.e. the top directory, containing <code>lib\/jtreg.jar<\/code> etc. (An alternative is to set the <code>JT_HOME<\/code> environment variable to point to the JTReg home before running <code>configure<\/code>.)<\/p>\n+<p>To be able to run microbenchmarks, <code>configure<\/code> needs to know where to find the JMH dependency. Use <code>--with-jmh=&lt;path to JMH jars&gt;<\/code> to point to a directory containing the core JMH and transitive dependencies. The recommended dependencies can be retrieved by running <code>sh make\/devkit\/createJMHBundle.sh<\/code>, after which <code>--with-jmh=build\/jmh\/jars<\/code> should work.<\/p>\n+<h2 id=\"test-selection\">Test selection<\/h2>\n+<p>All functionality is available using the <code>test<\/code> make target. In this use case, the test or tests to be executed is controlled using the <code>TEST<\/code> variable. To speed up subsequent test runs with no source code changes, <code>test-only<\/code> can be used instead, which do not depend on the source and test image build.<\/p>\n+<p>For some common top-level tests, direct make targets have been generated. This includes all JTReg test groups, the hotspot gtest, and custom tests (if present). This means that <code>make test-tier1<\/code> is equivalent to <code>make test TEST=&quot;tier1&quot;<\/code>, but the latter is more tab-completion friendly. For more complex test runs, the <code>test TEST=&quot;x&quot;<\/code> solution needs to be used.<\/p>\n+<p>The test specifications given in <code>TEST<\/code> is parsed into fully qualified test descriptors, which clearly and unambigously show which tests will be run. As an example, <code>:tier1<\/code> will expand to <code>jtreg:$(TOPDIR)\/test\/hotspot\/jtreg:tier1 jtreg:$(TOPDIR)\/test\/jdk:tier1 jtreg:$(TOPDIR)\/test\/langtools:tier1 jtreg:$(TOPDIR)\/test\/nashorn:tier1 jtreg:$(TOPDIR)\/test\/jaxp:tier1<\/code>. You can always submit a list of fully qualified test descriptors in the <code>TEST<\/code> variable if you want to shortcut the parser.<\/p>\n+<h3 id=\"common-test-groups\">Common Test Groups<\/h3>\n+<p>Ideally, all tests are run for every change but this may not be practical due to the limited testing resources, the scope of the change, etc.<\/p>\n+<p>The source tree currently defines a few common test groups in the relevant <code>TEST.groups<\/code> files. There are test groups that cover a specific component, for example <code>hotspot_gc<\/code>. It is a good idea to look into <code>TEST.groups<\/code> files to get a sense what tests are relevant to a particular JDK component.<\/p>\n+<p>Component-specific tests may miss some unintended consequences of a change, so other tests should also be run. Again, it might be impractical to run all tests, and therefore <em>tiered<\/em> test groups exist. Tiered test groups are not component-specific, but rather cover the significant parts of the entire JDK.<\/p>\n+<p>Multiple tiers allow balancing test coverage and testing costs. Lower test tiers are supposed to contain the simpler, quicker and more stable tests. Higher tiers are supposed to contain progressively more thorough, slower, and sometimes less stable tests, or the tests that require special configuration.<\/p>\n+<p>Contributors are expected to run the tests for the areas that are changed, and the first N tiers they can afford to run, but at least tier1.<\/p>\n+<p>A brief description of the tiered test groups:<\/p>\n+<ul>\n+<li><p><code>tier1<\/code>: This is the lowest test tier. Multiple developers run these tests every day. Because of the widespread use, the tests in <code>tier1<\/code> are carefully selected and optimized to run fast, and to run in the most stable manner. The test failures in <code>tier1<\/code> are usually followed up on quickly, either with fixes, or adding relevant tests to problem list. GitHub Actions workflows, if enabled, run <code>tier1<\/code> tests.<\/p><\/li>\n+<li><p><code>tier2<\/code>: This test group covers even more ground. These contain, among other things, tests that either run for too long to be at <code>tier1<\/code>, or may require special configuration, or tests that are less stable, or cover the broader range of non-core JVM and JDK features\/components (for example, XML).<\/p><\/li>\n+<li><p><code>tier3<\/code>: This test group includes more stressful tests, the tests for corner cases not covered by previous tiers, plus the tests that require GUIs. As such, this suite should either be run with low concurrency (<code>TEST_JOBS=1<\/code>), or without headful tests (<code>JTREG_KEYWORDS=\\!headful<\/code>), or both.<\/p><\/li>\n+<li><p><code>tier4<\/code>: This test group includes every other test not covered by previous tiers. It includes, for example, <code>vmTestbase<\/code> suites for Hotspot, which run for many hours even on large machines. It also runs GUI tests, so the same <code>TEST_JOBS<\/code> and <code>JTREG_KEYWORDS<\/code> caveats apply.<\/p><\/li>\n+<\/ul>\n+<h3 id=\"jtreg\">JTReg<\/h3>\n+<p>JTReg tests can be selected either by picking a JTReg test group, or a selection of files or directories containing JTReg tests.<\/p>\n+<p>JTReg test groups can be specified either without a test root, e.g. <code>:tier1<\/code> (or <code>tier1<\/code>, the initial colon is optional), or with, e.g. <code>hotspot:tier1<\/code>, <code>test\/jdk:jdk_util<\/code> or <code>$(TOPDIR)\/test\/hotspot\/jtreg:hotspot_all<\/code>. The test root can be specified either as an absolute path, or a path relative to the JDK top directory, or the <code>test<\/code> directory. For simplicity, the hotspot JTReg test root, which really is <code>hotspot\/jtreg<\/code> can be abbreviated as just <code>hotspot<\/code>.<\/p>\n+<p>When specified without a test root, all matching groups from all test roots will be added. Otherwise, only the group from the specified test root will be added.<\/p>\n+<p>Individual JTReg tests or directories containing JTReg tests can also be specified, like <code>test\/hotspot\/jtreg\/native_sanity\/JniVersion.java<\/code> or <code>hotspot\/jtreg\/native_sanity<\/code>. Just like for test root selection, you can either specify an absolute path (which can even point to JTReg tests outside the source tree), or a path relative to either the JDK top directory or the <code>test<\/code> directory. <code>hotspot<\/code> can be used as an alias for <code>hotspot\/jtreg<\/code> here as well.<\/p>\n+<p>As long as the test groups or test paths can be uniquely resolved, you do not need to enter the <code>jtreg:<\/code> prefix. If this is not possible, or if you want to use a fully qualified test descriptor, add <code>jtreg:<\/code>, e.g. <code>jtreg:test\/hotspot\/jtreg\/native_sanity<\/code>.<\/p>\n+<h3 id=\"gtest\">Gtest<\/h3>\n+<p>Since the Hotspot Gtest suite is so quick, the default is to run all tests. This is specified by just <code>gtest<\/code>, or as a fully qualified test descriptor <code>gtest:all<\/code>.<\/p>\n+<p>If you want, you can single out an individual test or a group of tests, for instance <code>gtest:LogDecorations<\/code> or <code>gtest:LogDecorations.level_test_vm<\/code>. This can be particularly useful if you want to run a shaky test repeatedly.<\/p>\n+<p>For Gtest, there is a separate test suite for each JVM variant. The JVM variant is defined by adding <code>\/&lt;variant&gt;<\/code> to the test descriptor, e.g. <code>gtest:Log\/client<\/code>. If you specify no variant, gtest will run once for each JVM variant present (e.g. server, client). So if you only have the server JVM present, then <code>gtest:all<\/code> will be equivalent to <code>gtest:all\/server<\/code>.<\/p>\n+<h3 id=\"microbenchmarks\">Microbenchmarks<\/h3>\n+<p>Which microbenchmarks to run is selected using a regular expression following the <code>micro:<\/code> test descriptor, e.g., <code>micro:java.lang.reflect<\/code>. This delegates the test selection to JMH, meaning package name, class name and even benchmark method names can be used to select tests.<\/p>\n+<p>Using special characters like <code>|<\/code> in the regular expression is possible, but needs to be escaped multiple times: <code>micro:ArrayCopy\\\\\\\\\\|reflect<\/code>.<\/p>\n+<h3 id=\"special-tests\">Special tests<\/h3>\n+<p>A handful of odd tests that are not covered by any other testing framework are accessible using the <code>special:<\/code> test descriptor. Currently, this includes <code>failure-handler<\/code> and <code>make<\/code>.<\/p>\n+<ul>\n+<li><p>Failure handler testing is run using <code>special:failure-handler<\/code> or just <code>failure-handler<\/code> as test descriptor.<\/p><\/li>\n+<li><p>Tests for the build system, including both makefiles and related functionality, is run using <code>special:make<\/code> or just <code>make<\/code> as test descriptor. This is equivalent to <code>special:make:all<\/code>.<\/p>\n+<p>A specific make test can be run by supplying it as argument, e.g. <code>special:make:idea<\/code>. As a special syntax, this can also be expressed as <code>make-idea<\/code>, which allows for command lines as <code>make test-make-idea<\/code>.<\/p><\/li>\n+<\/ul>\n+<h2 id=\"test-results-and-summary\">Test results and summary<\/h2>\n+<p>At the end of the test run, a summary of all tests run will be presented. This will have a consistent look, regardless of what test suites were used. This is a sample summary:<\/p>\n+<pre><code>==============================\n+Test summary\n+==============================\n+   TEST                                          TOTAL  PASS  FAIL ERROR\n+&gt;&gt; jtreg:jdk\/test:tier1                           1867  1865     2     0 &lt;&lt;\n+   jtreg:langtools\/test:tier1                     4711  4711     0     0\n+   jtreg:nashorn\/test:tier1                        133   133     0     0\n+==============================\n+TEST FAILURE<\/code><\/pre>\n+<p>Tests where the number of TOTAL tests does not equal the number of PASSed tests will be considered a test failure. These are marked with the <code>&gt;&gt; ... &lt;&lt;<\/code> marker for easy identification.<\/p>\n+<p>The classification of non-passed tests differs a bit between test suites. In the summary, ERROR is used as a catch-all for tests that neither passed nor are classified as failed by the framework. This might indicate test framework error, timeout or other problems.<\/p>\n+<p>In case of test failures, <code>make test<\/code> will exit with a non-zero exit value.<\/p>\n+<p>All tests have their result stored in <code>build\/$BUILD\/test-results\/$TEST_ID<\/code>, where TEST_ID is a path-safe conversion from the fully qualified test descriptor, e.g. for <code>jtreg:jdk\/test:tier1<\/code> the TEST_ID is <code>jtreg_jdk_test_tier1<\/code>. This path is also printed in the log at the end of the test run.<\/p>\n+<p>Additional work data is stored in <code>build\/$BUILD\/test-support\/$TEST_ID<\/code>. For some frameworks, this directory might contain information that is useful in determining the cause of a failed test.<\/p>\n+<h2 id=\"test-suite-control\">Test suite control<\/h2>\n+<p>It is possible to control various aspects of the test suites using make control variables.<\/p>\n+<p>These variables use a keyword=value approach to allow multiple values to be set. So, for instance, <code>JTREG=&quot;JOBS=1;TIMEOUT_FACTOR=8&quot;<\/code> will set the JTReg concurrency level to 1 and the timeout factor to 8. This is equivalent to setting <code>JTREG_JOBS=1 JTREG_TIMEOUT_FACTOR=8<\/code>, but using the keyword format means that the <code>JTREG<\/code> variable is parsed and verified for correctness, so <code>JTREG=&quot;TMIEOUT_FACTOR=8&quot;<\/code> would give an error, while <code>JTREG_TMIEOUT_FACTOR=8<\/code> would just pass unnoticed.<\/p>\n+<p>To separate multiple keyword=value pairs, use <code>;<\/code> (semicolon). Since the shell normally eats <code>;<\/code>, the recommended usage is to write the assignment inside qoutes, e.g. <code>JTREG=&quot;...;...&quot;<\/code>. This will also make sure spaces are preserved, as in <code>JTREG=&quot;JAVA_OPTIONS=-XshowSettings -Xlog:gc+ref=debug&quot;<\/code>.<\/p>\n+<p>(Other ways are possible, e.g. using backslash: <code>JTREG=JOBS=1\\;TIMEOUT_FACTOR=8<\/code>. Also, as a special technique, the string <code>%20<\/code> will be replaced with space for certain options, e.g. <code>JTREG=JAVA_OPTIONS=-XshowSettings%20-Xlog:gc+ref=debug<\/code>. This can be useful if you have layers of scripts and have trouble getting proper quoting of command line arguments through.)<\/p>\n+<p>As far as possible, the names of the keywords have been standardized between test suites.<\/p>\n+<h3 id=\"general-keywords-test_opts\">General keywords (TEST_OPTS)<\/h3>\n+<p>Some keywords are valid across different test suites. If you want to run tests from multiple test suites, or just don't want to care which test suite specific control variable to use, then you can use the general TEST_OPTS control variable.<\/p>\n+<p>There are also some keywords that applies globally to the test runner system, not to any specific test suites. These are also available as TEST_OPTS keywords.<\/p>\n+<h4 id=\"jobs\">JOBS<\/h4>\n+<p>Currently only applies to JTReg.<\/p>\n+<h4 id=\"timeout_factor\">TIMEOUT_FACTOR<\/h4>\n+<p>Currently only applies to JTReg.<\/p>\n+<h4 id=\"java_options\">JAVA_OPTIONS<\/h4>\n+<p>Applies to JTReg, GTest and Micro.<\/p>\n+<h4 id=\"vm_options\">VM_OPTIONS<\/h4>\n+<p>Applies to JTReg, GTest and Micro.<\/p>\n+<h4 id=\"aot_modules\">AOT_MODULES<\/h4>\n+<p>Applies to JTReg and GTest.<\/p>\n+<h4 id=\"jcov\">JCOV<\/h4>\n+<p>This keywords applies globally to the test runner system. If set to <code>true<\/code>, it enables JCov coverage reporting for all tests run. To be useful, the JDK under test must be run with a JDK built with JCov instrumentation (<code>configure --with-jcov=&lt;path to directory containing lib\/jcov.jar&gt;<\/code>, <code>make jcov-image<\/code>).<\/p>\n+<p>The simplest way to run tests with JCov coverage report is to use the special target <code>jcov-test<\/code> instead of <code>test<\/code>, e.g. <code>make jcov-test TEST=jdk_lang<\/code>. This will make sure the JCov image is built, and that JCov reporting is enabled.<\/p>\n+<p>The JCov report is stored in <code>build\/$BUILD\/test-results\/jcov-output\/report<\/code>.<\/p>\n+<p>Please note that running with JCov reporting can be very memory intensive.<\/p>\n+<h4 id=\"jcov_diff_changeset\">JCOV_DIFF_CHANGESET<\/h4>\n+<p>While collecting code coverage with JCov, it is also possible to find coverage for only recently changed code. JCOV_DIFF_CHANGESET specifies a source revision. A textual report will be generated showing coverage of the diff between the specified revision and the repository tip.<\/p>\n+<p>The report is stored in <code>build\/$BUILD\/test-results\/jcov-output\/diff_coverage_report<\/code> file.<\/p>\n+<h3 id=\"jtreg-keywords\">JTReg keywords<\/h3>\n+<h4 id=\"jobs-1\">JOBS<\/h4>\n+<p>The test concurrency (<code>-concurrency<\/code>).<\/p>\n+<p>Defaults to TEST_JOBS (if set by <code>--with-test-jobs=<\/code>), otherwise it defaults to JOBS, except for Hotspot, where the default is <em>number of CPU cores\/2<\/em>, but never more than <em>memory size in GB\/2<\/em>.<\/p>\n+<h4 id=\"timeout_factor-1\">TIMEOUT_FACTOR<\/h4>\n+<p>The timeout factor (<code>-timeoutFactor<\/code>).<\/p>\n+<p>Defaults to 4.<\/p>\n+<h4 id=\"failure_handler_timeout\">FAILURE_HANDLER_TIMEOUT<\/h4>\n+<p>Sets the argument <code>-timeoutHandlerTimeout<\/code> for JTReg. The default value is 0. This is only valid if the failure handler is built.<\/p>\n+<h4 id=\"test_mode\">TEST_MODE<\/h4>\n+<p>The test mode (<code>agentvm<\/code> or <code>othervm<\/code>).<\/p>\n+<p>Defaults to <code>agentvm<\/code>.<\/p>\n+<h4 id=\"assert\">ASSERT<\/h4>\n+<p>Enable asserts (<code>-ea -esa<\/code>, or none).<\/p>\n+<p>Set to <code>true<\/code> or <code>false<\/code>. If true, adds <code>-ea -esa<\/code>. Defaults to true, except for hotspot.<\/p>\n+<h4 id=\"verbose\">VERBOSE<\/h4>\n+<p>The verbosity level (<code>-verbose<\/code>).<\/p>\n+<p>Defaults to <code>fail,error,summary<\/code>.<\/p>\n+<h4 id=\"retain\">RETAIN<\/h4>\n+<p>What test data to retain (<code>-retain<\/code>).<\/p>\n+<p>Defaults to <code>fail,error<\/code>.<\/p>\n+<h4 id=\"max_mem\">MAX_MEM<\/h4>\n+<p>Limit memory consumption (<code>-Xmx<\/code> and <code>-vmoption:-Xmx<\/code>, or none).<\/p>\n+<p>Limit memory consumption for JTReg test framework and VM under test. Set to 0 to disable the limits.<\/p>\n+<p>Defaults to 512m, except for hotspot, where it defaults to 0 (no limit).<\/p>\n+<h4 id=\"max_output\">MAX_OUTPUT<\/h4>\n+<p>Set the property <code>javatest.maxOutputSize<\/code> for the launcher, to change the default JTReg log limit.<\/p>\n+<h4 id=\"keywords\">KEYWORDS<\/h4>\n+<p>JTReg keywords sent to JTReg using <code>-k<\/code>. Please be careful in making sure that spaces and special characters (like <code>!<\/code>) are properly quoted. To avoid some issues, the special value <code>%20<\/code> can be used instead of space.<\/p>\n+<h4 id=\"extra_problem_lists\">EXTRA_PROBLEM_LISTS<\/h4>\n+<p>Use additional problem lists file or files, in addition to the default ProblemList.txt located at the JTReg test roots.<\/p>\n+<p>If multiple file names are specified, they should be separated by space (or, to help avoid quoting issues, the special value <code>%20<\/code>).<\/p>\n+<p>The file names should be either absolute, or relative to the JTReg test root of the tests to be run.<\/p>\n+<h4 id=\"run_problem_lists\">RUN_PROBLEM_LISTS<\/h4>\n+<p>Use the problem lists to select tests instead of excluding them.<\/p>\n+<p>Set to <code>true<\/code> or <code>false<\/code>. If <code>true<\/code>, JTReg will use <code>-match:<\/code> option, otherwise <code>-exclude:<\/code> will be used. Default is <code>false<\/code>.<\/p>\n+<h4 id=\"options\">OPTIONS<\/h4>\n+<p>Additional options to the JTReg test framework.<\/p>\n+<p>Use <code>JTREG=&quot;OPTIONS=--help all&quot;<\/code> to see all available JTReg options.<\/p>\n+<h4 id=\"java_options-1\">JAVA_OPTIONS<\/h4>\n+<p>Additional Java options for running test classes (sent to JTReg as <code>-javaoption<\/code>).<\/p>\n+<h4 id=\"vm_options-1\">VM_OPTIONS<\/h4>\n+<p>Additional Java options to be used when compiling and running classes (sent to JTReg as <code>-vmoption<\/code>).<\/p>\n+<p>This option is only needed in special circumstances. To pass Java options to your test classes, use <code>JAVA_OPTIONS<\/code>.<\/p>\n+<h4 id=\"launcher_options\">LAUNCHER_OPTIONS<\/h4>\n+<p>Additional Java options that are sent to the java launcher that starts the JTReg harness.<\/p>\n+<h4 id=\"aot_modules-1\">AOT_MODULES<\/h4>\n+<p>Generate AOT modules before testing for the specified module, or set of modules. If multiple modules are specified, they should be separated by space (or, to help avoid quoting issues, the special value <code>%20<\/code>).<\/p>\n+<h4 id=\"retry_count\">RETRY_COUNT<\/h4>\n+<p>Retry failed tests up to a set number of times, until they pass. This allows to pass the tests with intermittent failures. Defaults to 0.<\/p>\n+<h4 id=\"repeat_count\">REPEAT_COUNT<\/h4>\n+<p>Repeat the tests up to a set number of times, stopping at first failure. This helps to reproduce intermittent test failures. Defaults to 0.<\/p>\n+<h3 id=\"gtest-keywords\">Gtest keywords<\/h3>\n+<h4 id=\"repeat\">REPEAT<\/h4>\n+<p>The number of times to repeat the tests (<code>--gtest_repeat<\/code>).<\/p>\n+<p>Default is 1. Set to -1 to repeat indefinitely. This can be especially useful combined with <code>OPTIONS=--gtest_break_on_failure<\/code> to reproduce an intermittent problem.<\/p>\n+<h4 id=\"options-1\">OPTIONS<\/h4>\n+<p>Additional options to the Gtest test framework.<\/p>\n+<p>Use <code>GTEST=&quot;OPTIONS=--help&quot;<\/code> to see all available Gtest options.<\/p>\n+<h4 id=\"aot_modules-2\">AOT_MODULES<\/h4>\n+<p>Generate AOT modules before testing for the specified module, or set of modules. If multiple modules are specified, they should be separated by space (or, to help avoid quoting issues, the special value <code>%20<\/code>).<\/p>\n+<h3 id=\"microbenchmark-keywords\">Microbenchmark keywords<\/h3>\n+<h4 id=\"fork\">FORK<\/h4>\n+<p>Override the number of benchmark forks to spawn. Same as specifying <code>-f &lt;num&gt;<\/code>.<\/p>\n+<h4 id=\"iter\">ITER<\/h4>\n+<p>Number of measurement iterations per fork. Same as specifying <code>-i &lt;num&gt;<\/code>.<\/p>\n+<h4 id=\"time\">TIME<\/h4>\n+<p>Amount of time to spend in each measurement iteration, in seconds. Same as specifying <code>-r &lt;num&gt;<\/code><\/p>\n+<h4 id=\"warmup_iter\">WARMUP_ITER<\/h4>\n+<p>Number of warmup iterations to run before the measurement phase in each fork. Same as specifying <code>-wi &lt;num&gt;<\/code>.<\/p>\n+<h4 id=\"warmup_time\">WARMUP_TIME<\/h4>\n+<p>Amount of time to spend in each warmup iteration. Same as specifying <code>-w &lt;num&gt;<\/code>.<\/p>\n+<h4 id=\"results_format\">RESULTS_FORMAT<\/h4>\n+<p>Specify to have the test run save a log of the values. Accepts the same values as <code>-rff<\/code>, i.e., <code>text<\/code>, <code>csv<\/code>, <code>scsv<\/code>, <code>json<\/code>, or <code>latex<\/code>.<\/p>\n+<h4 id=\"vm_options-2\">VM_OPTIONS<\/h4>\n+<p>Additional VM arguments to provide to forked off VMs. Same as <code>-jvmArgs &lt;args&gt;<\/code><\/p>\n+<h4 id=\"options-2\">OPTIONS<\/h4>\n+<p>Additional arguments to send to JMH.<\/p>\n+<h2 id=\"notes-for-specific-tests\">Notes for Specific Tests<\/h2>\n+<h3 id=\"docker-tests\">Docker Tests<\/h3>\n+<p>Docker tests with default parameters may fail on systems with glibc versions not compatible with the one used in the default docker image (e.g., Oracle Linux 7.6 for x86). For example, they pass on Ubuntu 16.04 but fail on Ubuntu 18.04 if run like this on x86:<\/p>\n+<pre><code>$ make test TEST=&quot;jtreg:test\/hotspot\/jtreg\/containers\/docker&quot;<\/code><\/pre>\n+<p>To run these tests correctly, additional parameters for the correct docker image are required on Ubuntu 18.04 by using <code>JAVA_OPTIONS<\/code>.<\/p>\n+<pre><code>$ make test TEST=&quot;jtreg:test\/hotspot\/jtreg\/containers\/docker&quot; \\\n+    JTREG=&quot;JAVA_OPTIONS=-Djdk.test.docker.image.name=ubuntu\n+    -Djdk.test.docker.image.version=latest&quot;<\/code><\/pre>\n+<h3 id=\"non-us-locale\">Non-US locale<\/h3>\n+<p>If your locale is non-US, some tests are likely to fail. To work around this you can set the locale to US. On Unix platforms simply setting <code>LANG=&quot;en_US&quot;<\/code> in the environment before running tests should work. On Windows or MacOS, setting <code>JTREG=&quot;VM_OPTIONS=-Duser.language=en -Duser.country=US&quot;<\/code> helps for most, but not all test cases.<\/p>\n+<p>For example:<\/p>\n+<pre><code>$ export LANG=&quot;en_US&quot; &amp;&amp; make test TEST=...\n+$ make test JTREG=&quot;VM_OPTIONS=-Duser.language=en -Duser.country=US&quot; TEST=...<\/code><\/pre>\n+<h3 id=\"pkcs11-tests\">PKCS11 Tests<\/h3>\n+<p>It is highly recommended to use the latest NSS version when running PKCS11 tests. Improper NSS version may lead to unexpected failures which are hard to diagnose. For example, sun\/security\/pkcs11\/Secmod\/AddTrustedCert.java may fail on Ubuntu 18.04 with the default NSS version in the system. To run these tests correctly, the system property <code>test.nss.lib.paths<\/code> is required on Ubuntu 18.04 to specify the alternative NSS lib directories.<\/p>\n+<p>For example:<\/p>\n+<pre><code>$ make test TEST=&quot;jtreg:sun\/security\/pkcs11\/Secmod\/AddTrustedCert.java&quot; \\\n+    JTREG=&quot;JAVA_OPTIONS=-Dtest.nss.lib.paths=\/path\/to\/your\/latest\/NSS-libs&quot;<\/code><\/pre>\n+<p>For more notes about the PKCS11 tests, please refer to test\/jdk\/sun\/security\/pkcs11\/README.<\/p>\n+<h3 id=\"client-ui-tests\">Client UI Tests<\/h3>\n+<p>Some Client UI tests use key sequences which may be reserved by the operating system. Usually that causes the test failure. So it is highly recommended to disable system key shortcuts prior testing. The steps to access and disable system key shortcuts for various platforms are provided below.<\/p>\n+<h4 id=\"macos\">MacOS<\/h4>\n+<p>Choose Apple menu; System Preferences, click Keyboard, then click Shortcuts; select or deselect desired shortcut.<\/p>\n+<p>For example, test\/jdk\/javax\/swing\/TooltipManager\/JMenuItemToolTipKeyBindingsTest\/JMenuItemToolTipKeyBindingsTest.java fails on MacOS because it uses <code>CTRL + F1<\/code> key sequence to show or hide tooltip message but the key combination is reserved by the operating system. To run the test correctly the default global key shortcut should be disabled using the steps described above, and then deselect &quot;Turn keyboard access on or off&quot; option which is responsible for <code>CTRL + F1<\/code> combination.<\/p>\n+<h4 id=\"linux\">Linux<\/h4>\n+<p>Open the Activities overview and start typing Settings; Choose Settings, click Devices, then click Keyboard; set or override desired shortcut.<\/p>\n+<h4 id=\"windows\">Windows<\/h4>\n+<p>Type <code>gpedit<\/code> in the Search and then click Edit group policy; navigate to User Configuration -&gt; Administrative Templates -&gt; Windows Components -&gt; File Explorer; in the right-side pane look for &quot;Turn off Windows key hotkeys&quot; and double click on it; enable or disable hotkeys.<\/p>\n+<p>Note: restart is required to make the settings take effect.<\/p>\n+<\/body>\n+<\/html>\n","filename":"doc\/testing.html","additions":255,"deletions":534,"binary":false,"changes":789,"status":"modified"}]}