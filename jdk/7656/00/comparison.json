{"files":[{"patch":"@@ -247,2 +247,1 @@\n-`--build=x86_64-unknown-linux-gnu --host=x86_64-unknown-linux-gnu` to\n-`configure`.\n+`--current-platform=x86_64-unknown-linux-gnu --openjdk-target=x86_64-unknown-linux-gnu` to `configure`.\n@@ -989,4 +988,11 @@\n-This will automatically set the `--build`, `--host` and `--target` options for\n-autoconf, which can otherwise be confusing. (In autoconf terminology, the\n-\"target\" is known as \"host\", and \"target\" is used for building a Canadian\n-cross-compiler.)\n+This will automatically set the `--host` and `--target` options for\n+autoconf, and if `--current-platform` is not set, `--build` as well, which can otherwise be confusing. (In autoconf terminology, the \"target\" is known as \"host\",\n+and \"target\" is used for building a Canadian cross-compiler.)\n+\n+### Specifying the Build Platform\n+\n+You can explicitly specify the build platform when compiling, by simply \n+passing the `--current-platform=<platform>` argument to `configure`.\n+This will set the `--build` option for autoconf, but it *will* override\n+platform autodetection for the build platform, so be sure that you know what\n+you are doing when using this option.\n","filename":"doc\/building.md","additions":12,"deletions":6,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -230,0 +230,1 @@\n+conf_explicit_platform=\n@@ -237,0 +238,3 @@\n+    --current-platform=*)\n+      conf_explicit_platform=`expr \"X$conf_option\" : '[^=]*=\\(.*\\)'`\n+      ;;\n@@ -291,6 +295,10 @@\n-  if test \"x$conf_openjdk_target\" != \"x\"; then\n-    echo \"Error: Specifying --openjdk-target together with autoconf\"\n-    echo \"legacy cross-compilation flags is not supported.\"\n-    echo \"You specified: --openjdk-target=$conf_openjdk_target and $conf_legacy_crosscompile.\"\n-    echo \"The recommended use is just --openjdk-target.\"\n-    exit 1\n+  echo \"Error: Legacy autoconf cross-compilation flags are not supported.\"\n+  echo \"You specified: $conf_legacy_crosscompile.\"\n+  echo \"It is recommend you use --current-platform and --openjdk-target\"\n+  echo \"for cross compiling Java.\"\n+  exit 1\n+fi\n+\n+if test \"x$conf_openjdk_target\" != \"x\"; then\n+  if test \"x$conf_explicit_platform\" != \"x\"; then\n+    conf_processed_arguments=(\"--host=$conf_openjdk_target\" \"--target=$conf_openjdk_target\" \"${conf_processed_arguments[@]}\")\n@@ -298,3 +306,2 @@\n-    echo \"Warning: You are using legacy autoconf cross-compilation flags.\"\n-    echo \"It is recommended that you use --openjdk-target instead.\"\n-    echo \"\"\n+    conf_build_platform=`sh $conf_script_dir\/build-aux\/config.guess`\n+    conf_processed_arguments=(\"--build=$conf_build_platform\" \"--host=$conf_openjdk_target\" \"--target=$conf_openjdk_target\" \"${conf_processed_arguments[@]}\")\n@@ -304,3 +311,2 @@\n-if test \"x$conf_openjdk_target\" != \"x\"; then\n-  conf_build_platform=`sh $conf_script_dir\/build-aux\/config.guess`\n-  conf_processed_arguments=(\"--build=$conf_build_platform\" \"--host=$conf_openjdk_target\" \"--target=$conf_openjdk_target\" \"${conf_processed_arguments[@]}\")\n+if test \"x$conf_explicit_platform\" != \"x\"; then\n+  conf_processed_arguments=(\"--build=$conf_explicit_platform\" \"${conf_processed_arguments[@]}\")\n@@ -341,0 +347,5 @@\n+  --current-platform      Explicitly set the current platform the JDK is being\n+                          compiled on. This fully overrides automatic platform\n+                          detection and it is recommended you don't set this\n+                          unless you have a good reason to and know what you\n+                          are doing.\n@@ -344,1 +355,2 @@\n-                          --build=<current platform>\n+                          --build=<current platform>, or --current-platform if\n+                          you have explicitly set it.\n","filename":"make\/autoconf\/configure","additions":25,"deletions":13,"binary":false,"changes":38,"status":"modified"}]}