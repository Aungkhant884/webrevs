{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+#include \"memory\/metaspace.hpp\"\n","filename":"src\/hotspot\/os_cpu\/linux_ppc\/thread_linux_ppc.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+#include \"memory\/metaspace.hpp\"\n","filename":"src\/hotspot\/os_cpu\/linux_s390\/thread_linux_s390.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,0 @@\n-#include \"memory\/memRegion.hpp\"\n-#include \"memory\/metaspace.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/classLoaderData.hpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"runtime\/globals.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/compactHashtable.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"memory\/metaspaceUtils.hpp\"\n","filename":"src\/hotspot\/share\/gc\/epsilon\/epsilonHeap.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -96,0 +96,1 @@\n+#include \"memory\/metaspaceUtils.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -61,0 +61,1 @@\n+#include \"memory\/metaspaceUtils.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n-#include \"memory\/metaspace.hpp\"\n+#include \"memory\/metaspaceUtils.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapTransition.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+#include \"memory\/metaspaceUtils.hpp\"\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-#include \"memory\/metaspace.hpp\"\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,0 +65,1 @@\n+#include \"memory\/metaspaceUtils.hpp\"\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-#include \"memory\/metaspace.hpp\"\n","filename":"src\/hotspot\/share\/gc\/serial\/cSpaceCounters.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+#include \"memory\/metaspaceUtils.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"memory\/metaspace.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -63,0 +63,1 @@\n+#include \"memory\/metaspaceUtils.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"memory\/virtualspace.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSet.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+#include \"memory\/metaspaceUtils.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-#include \"memory\/metaspace.hpp\"\n+#include \"memory\/metaspaceUtils.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -76,0 +76,1 @@\n+#include \"memory\/metaspaceUtils.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+#include \"memory\/metaspaceUtils.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahUnload.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+#include \"memory\/metaspaceUtils.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zHeap.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"memory\/metaspaceUtils.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zStat.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+#include \"memory\/metaspaceUtils.hpp\"\n","filename":"src\/hotspot\/share\/gc\/z\/zUnload.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,0 +45,1 @@\n+#include \"memory\/metaspaceUtils.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/recorder\/checkpoint\/types\/jfrType.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-#include \"memory\/metaspace.hpp\"\n@@ -38,0 +37,1 @@\n+#include \"memory\/metaspaceUtils.hpp\"\n@@ -239,2 +239,1 @@\n-  \/\/ Start with 0 committed bytes. The memory will be committed as needed by\n-  \/\/ MetaspaceShared::commit_to().\n+  \/\/ Start with 0 committed bytes. The memory will be committed as needed.\n","filename":"src\/hotspot\/share\/memory\/archiveUtils.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+#include \"memory\/metaspaceUtils.hpp\"\n","filename":"src\/hotspot\/share\/memory\/classLoaderMetaspace.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"memory\/metaspace.hpp\"\n","filename":"src\/hotspot\/share\/memory\/filemap.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n-#include \"oops\/array.hpp\"\n+#include \"oops\/array.inline.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metadataFactory.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+#include \"memory\/metaspaceUtils.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metaspace.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,0 @@\n-#include \"memory\/memRegion.hpp\"\n-#include \"memory\/metaspaceChunkFreeListSummary.hpp\"\n-#include \"memory\/virtualspace.hpp\"\n@@ -40,0 +37,1 @@\n+class ReservedSpace;\n@@ -155,110 +153,0 @@\n-\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/ MetaspaceGC \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n-\n-\/\/ Metaspace are deallocated when their class loader are GC'ed.\n-\/\/ This class implements a policy for inducing GC's to recover\n-\/\/ Metaspaces.\n-\n-class MetaspaceGCThresholdUpdater : public AllStatic {\n- public:\n-  enum Type {\n-    ComputeNewSize,\n-    ExpandAndAllocate,\n-    Last\n-  };\n-\n-  static const char* to_string(MetaspaceGCThresholdUpdater::Type updater) {\n-    switch (updater) {\n-      case ComputeNewSize:\n-        return \"compute_new_size\";\n-      case ExpandAndAllocate:\n-        return \"expand_and_allocate\";\n-      default:\n-        assert(false, \"Got bad updater: %d\", (int) updater);\n-        return NULL;\n-    };\n-  }\n-};\n-\n-class MetaspaceGC : public AllStatic {\n-\n-  \/\/ The current high-water-mark for inducing a GC.\n-  \/\/ When committed memory of all metaspaces reaches this value,\n-  \/\/ a GC is induced and the value is increased. Size is in bytes.\n-  static volatile size_t _capacity_until_GC;\n-  static uint _shrink_factor;\n-\n-  static size_t shrink_factor() { return _shrink_factor; }\n-  void set_shrink_factor(uint v) { _shrink_factor = v; }\n-\n- public:\n-\n-  static void initialize();\n-  static void post_initialize();\n-\n-  static size_t capacity_until_GC();\n-  static bool inc_capacity_until_GC(size_t v,\n-                                    size_t* new_cap_until_GC = NULL,\n-                                    size_t* old_cap_until_GC = NULL,\n-                                    bool* can_retry = NULL);\n-  static size_t dec_capacity_until_GC(size_t v);\n-\n-  \/\/ The amount to increase the high-water-mark (_capacity_until_GC)\n-  static size_t delta_capacity_until_GC(size_t bytes);\n-\n-  \/\/ Tells if we have can expand metaspace without hitting set limits.\n-  static bool can_expand(size_t words, bool is_class);\n-\n-  \/\/ Returns amount that we can expand without hitting a GC,\n-  \/\/ measured in words.\n-  static size_t allowed_expansion();\n-\n-  \/\/ Calculate the new high-water mark at which to induce\n-  \/\/ a GC.\n-  static void compute_new_size();\n-};\n-\n-class MetaspaceUtils : AllStatic {\n-public:\n-\n-  \/\/ Committed space actually in use by Metadata\n-  static size_t used_words();\n-  static size_t used_words(Metaspace::MetadataType mdtype);\n-\n-  \/\/ Space committed for Metaspace\n-  static size_t committed_words();\n-  static size_t committed_words(Metaspace::MetadataType mdtype);\n-\n-  \/\/ Space reserved for Metaspace\n-  static size_t reserved_words();\n-  static size_t reserved_words(Metaspace::MetadataType mdtype);\n-\n-  \/\/ _bytes() variants for convenience...\n-  static size_t used_bytes()                                    { return used_words() * BytesPerWord; }\n-  static size_t used_bytes(Metaspace::MetadataType mdtype)      { return used_words(mdtype) * BytesPerWord; }\n-  static size_t committed_bytes()                               { return committed_words() * BytesPerWord; }\n-  static size_t committed_bytes(Metaspace::MetadataType mdtype) { return committed_words(mdtype) * BytesPerWord; }\n-  static size_t reserved_bytes()                                { return reserved_words() * BytesPerWord; }\n-  static size_t reserved_bytes(Metaspace::MetadataType mdtype)  { return reserved_words(mdtype) * BytesPerWord; }\n-\n-  \/\/ (See JDK-8251342). Implement or Consolidate.\n-  static MetaspaceChunkFreeListSummary chunk_free_list_summary(Metaspace::MetadataType mdtype) {\n-    return MetaspaceChunkFreeListSummary(0,0,0,0,0,0,0,0);\n-  }\n-\n-  \/\/ Log change in used metadata.\n-  static void print_metaspace_change(const metaspace::MetaspaceSizesSnapshot& pre_meta_values);\n-\n-  \/\/ This will print out a basic metaspace usage report but\n-  \/\/ unlike print_report() is guaranteed not to lock or to walk the CLDG.\n-  static void print_basic_report(outputStream* st, size_t scale = 0);\n-\n-  \/\/ Prints a report about the current metaspace state.\n-  \/\/ Function will walk the CLDG and will lock the expand lock; if that is not\n-  \/\/ convenient, use print_basic_report() instead.\n-  static void print_report(outputStream* out, size_t scale = 0);\n-\n-  static void print_on(outputStream * out);\n-\n-  DEBUG_ONLY(static void verify();)\n-\n-};\n","filename":"src\/hotspot\/share\/memory\/metaspace.hpp","additions":2,"deletions":114,"binary":false,"changes":116,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+#include \"memory\/metaspaceUtils.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metaspace\/commitLimiter.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"memory\/metaspace.hpp\"\n@@ -29,0 +30,1 @@\n+#include \"memory\/metaspaceUtils.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceDCmd.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,1 @@\n+#include \"memory\/metaspaceUtils.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceReporter.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+#include \"memory\/metaspaceUtils.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metaspaceSizesSnapshot.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"memory\/metaspaceUtils.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metaspaceCounters.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+#include \"memory\/metaspaceUtils.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metaspaceTracer.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,141 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+#ifndef SHARE_MEMORY_METASPACEUTILS_HPP\n+#define SHARE_MEMORY_METASPACEUTILS_HPP\n+\n+#include \"memory\/metaspace.hpp\"\n+#include \"memory\/metaspaceChunkFreeListSummary.hpp\"\n+\n+class outputStream;\n+\n+\/\/ Metaspace are deallocated when their class loader are GC'ed.\n+\/\/ This class implements a policy for inducing GC's to recover\n+\/\/ Metaspaces.\n+\n+class MetaspaceGCThresholdUpdater : public AllStatic {\n+ public:\n+  enum Type {\n+    ComputeNewSize,\n+    ExpandAndAllocate,\n+    Last\n+  };\n+\n+  static const char* to_string(MetaspaceGCThresholdUpdater::Type updater) {\n+    switch (updater) {\n+      case ComputeNewSize:\n+        return \"compute_new_size\";\n+      case ExpandAndAllocate:\n+        return \"expand_and_allocate\";\n+      default:\n+        assert(false, \"Got bad updater: %d\", (int) updater);\n+        return NULL;\n+    };\n+  }\n+};\n+\n+class MetaspaceGC : public AllStatic {\n+\n+  \/\/ The current high-water-mark for inducing a GC.\n+  \/\/ When committed memory of all metaspaces reaches this value,\n+  \/\/ a GC is induced and the value is increased. Size is in bytes.\n+  static volatile size_t _capacity_until_GC;\n+  static uint _shrink_factor;\n+\n+  static size_t shrink_factor() { return _shrink_factor; }\n+  void set_shrink_factor(uint v) { _shrink_factor = v; }\n+\n+ public:\n+\n+  static void initialize();\n+  static void post_initialize();\n+\n+  static size_t capacity_until_GC();\n+  static bool inc_capacity_until_GC(size_t v,\n+                                    size_t* new_cap_until_GC = NULL,\n+                                    size_t* old_cap_until_GC = NULL,\n+                                    bool* can_retry = NULL);\n+  static size_t dec_capacity_until_GC(size_t v);\n+\n+  \/\/ The amount to increase the high-water-mark (_capacity_until_GC)\n+  static size_t delta_capacity_until_GC(size_t bytes);\n+\n+  \/\/ Tells if we have can expand metaspace without hitting set limits.\n+  static bool can_expand(size_t words, bool is_class);\n+\n+  \/\/ Returns amount that we can expand without hitting a GC,\n+  \/\/ measured in words.\n+  static size_t allowed_expansion();\n+\n+  \/\/ Calculate the new high-water mark at which to induce\n+  \/\/ a GC.\n+  static void compute_new_size();\n+};\n+\n+class MetaspaceUtils : AllStatic {\n+public:\n+\n+  \/\/ Committed space actually in use by Metadata\n+  static size_t used_words();\n+  static size_t used_words(Metaspace::MetadataType mdtype);\n+\n+  \/\/ Space committed for Metaspace\n+  static size_t committed_words();\n+  static size_t committed_words(Metaspace::MetadataType mdtype);\n+\n+  \/\/ Space reserved for Metaspace\n+  static size_t reserved_words();\n+  static size_t reserved_words(Metaspace::MetadataType mdtype);\n+\n+  \/\/ _bytes() variants for convenience...\n+  static size_t used_bytes()                                    { return used_words() * BytesPerWord; }\n+  static size_t used_bytes(Metaspace::MetadataType mdtype)      { return used_words(mdtype) * BytesPerWord; }\n+  static size_t committed_bytes()                               { return committed_words() * BytesPerWord; }\n+  static size_t committed_bytes(Metaspace::MetadataType mdtype) { return committed_words(mdtype) * BytesPerWord; }\n+  static size_t reserved_bytes()                                { return reserved_words() * BytesPerWord; }\n+  static size_t reserved_bytes(Metaspace::MetadataType mdtype)  { return reserved_words(mdtype) * BytesPerWord; }\n+\n+  \/\/ (See JDK-8251342). Implement or Consolidate.\n+  static MetaspaceChunkFreeListSummary chunk_free_list_summary(Metaspace::MetadataType mdtype) {\n+    return MetaspaceChunkFreeListSummary(0,0,0,0,0,0,0,0);\n+  }\n+\n+  \/\/ Log change in used metadata.\n+  static void print_metaspace_change(const metaspace::MetaspaceSizesSnapshot& pre_meta_values);\n+\n+  \/\/ This will print out a basic metaspace usage report but\n+  \/\/ unlike print_report() is guaranteed not to lock or to walk the CLDG.\n+  static void print_basic_report(outputStream* st, size_t scale = 0);\n+\n+  \/\/ Prints a report about the current metaspace state.\n+  \/\/ Function will walk the CLDG and will lock the expand lock; if that is not\n+  \/\/ convenient, use print_basic_report() instead.\n+  static void print_report(outputStream* out, size_t scale = 0);\n+\n+  static void print_on(outputStream * out);\n+\n+  DEBUG_ONLY(static void verify();)\n+\n+};\n+\n+#endif \/\/ SHARE_MEMORY_METASPACEUTILS_HPP\n","filename":"src\/hotspot\/share\/memory\/metaspaceUtils.hpp","additions":141,"deletions":0,"binary":false,"changes":141,"status":"added"},{"patch":"@@ -51,0 +51,1 @@\n+#include \"memory\/metaspaceUtils.hpp\"\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+class ReservedHeapSpace;\n","filename":"src\/hotspot\/share\/memory\/universe.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-#include \"memory\/allocation.hpp\"\n-#include \"memory\/metaspace.hpp\"\n@@ -32,0 +30,1 @@\n+#include \"utilities\/exceptions.hpp\"\n@@ -33,0 +32,1 @@\n+#include \"utilities\/ostream.hpp\"\n@@ -55,5 +55,1 @@\n-  void* operator new(size_t size, ClassLoaderData* loader_data, int length, TRAPS) throw() {\n-    size_t word_size = Array::size(length);\n-    return (void*) Metaspace::allocate(loader_data, word_size,\n-                                       MetaspaceObj::array_type(sizeof(T)), THREAD);\n-  }\n+  inline void* operator new(size_t size, ClassLoaderData* loader_data, int length, TRAPS) throw();\n","filename":"src\/hotspot\/share\/oops\/array.hpp","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,40 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_OOPS_ARRAY_INLINE_HPP\n+#define SHARE_OOPS_ARRAY_INLINE_HPP\n+\n+#include \"memory\/allocation.hpp\"\n+#include \"memory\/metaspace.hpp\"\n+#include \"oops\/array.hpp\"\n+\n+\n+template <typename T>\n+inline void* Array<T>::operator new(size_t size, ClassLoaderData* loader_data, int length, TRAPS) throw() {\n+  size_t word_size = Array::size(length);\n+  return (void*) Metaspace::allocate(loader_data, word_size,\n+                                     MetaspaceObj::array_type(sizeof(T)), THREAD);\n+}\n+\n+#endif \/\/ SHARE_OOPS_ARRAY_INLINE_HPP\n","filename":"src\/hotspot\/share\/oops\/array.inline.hpp","additions":40,"deletions":0,"binary":false,"changes":40,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +32,1 @@\n+#include \"memory\/virtualspace.hpp\"\n","filename":"src\/hotspot\/share\/oops\/compressedOops.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-#include \"memory\/metaspace.hpp\"\n","filename":"src\/hotspot\/share\/oops\/metadata.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-#include \"memory\/metaspace.hpp\"\n","filename":"src\/hotspot\/share\/oops\/recordComponent.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-\n@@ -28,1 +27,0 @@\n-\n@@ -50,1 +48,1 @@\n-#include \"memory\/metaspaceShared.hpp\"\n+#include \"memory\/iterator.hpp\"\n@@ -53,1 +51,3 @@\n-#include \"memory\/iterator.hpp\"\n+#include \"memory\/metaspaceShared.hpp\"\n+#include \"memory\/metaspaceUtils.hpp\"\n+#include \"memory\/oopFactory.hpp\"\n@@ -56,1 +56,0 @@\n-#include \"memory\/oopFactory.hpp\"\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+#include \"memory\/metaspaceUtils.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+#include \"memory\/metaspaceUtils.hpp\"\n","filename":"src\/hotspot\/share\/services\/memReporter.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-\n+#include \"memory\/metaspaceUtils.hpp\"\n","filename":"src\/hotspot\/share\/services\/memTracker.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"memory\/metaspaceUtils.hpp\"\n","filename":"src\/hotspot\/share\/services\/memoryPool.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-\n@@ -28,0 +27,1 @@\n+#include \"memory\/metaspaceUtils.hpp\"\n","filename":"src\/hotspot\/share\/services\/virtualMemoryTracker.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+#include \"memory\/metaspaceUtils.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+#include \"memory\/metaspaceUtils.hpp\"\n","filename":"test\/hotspot\/gtest\/metaspace\/test_metaspaceUtils.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}