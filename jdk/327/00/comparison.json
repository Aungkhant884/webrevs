{"files":[{"patch":"@@ -126,1 +126,1 @@\n-JVM_GetRandomSeedForCDSDump\n+JVM_GetRandomSeedForDumping\n@@ -146,2 +146,2 @@\n-JVM_IsCDSDumpingEnabled\n-JVM_IsCDSSharingEnabled\n+JVM_IsDynamicDumpingEnabled\n+JVM_IsSharingEnabled\n","filename":"make\/hotspot\/symbols\/symbols-unix","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -201,1 +201,1 @@\n-JVM_IsCDSDumpingEnabled(JNIEnv* env);\n+JVM_IsDynamicDumpingEnabled(JNIEnv* env);\n@@ -204,1 +204,1 @@\n-JVM_IsCDSSharingEnabled(JNIEnv* env);\n+JVM_IsSharingEnabled(JNIEnv* env);\n@@ -207,1 +207,1 @@\n-JVM_GetRandomSeedForCDSDump();\n+JVM_GetRandomSeedForDumping();\n","filename":"src\/hotspot\/share\/include\/jvm.h","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3836,2 +3836,2 @@\n-JVM_ENTRY(jboolean, JVM_IsCDSDumpingEnabled(JNIEnv* env))\n-    JVMWrapper(\"JVM_IsCDSDumpingEnable\");\n+JVM_ENTRY(jboolean, JVM_IsDynamicDumpingEnabled(JNIEnv* env))\n+    JVMWrapper(\"JVM_IsDynamicDumpingEnable\");\n@@ -3841,2 +3841,2 @@\n-JVM_ENTRY(jboolean, JVM_IsCDSSharingEnabled(JNIEnv* env))\n-    JVMWrapper(\"JVM_IsCDSSharingEnable\");\n+JVM_ENTRY(jboolean, JVM_IsSharingEnabled(JNIEnv* env))\n+    JVMWrapper(\"JVM_IsSharingEnable\");\n@@ -3846,2 +3846,2 @@\n-JVM_ENTRY_NO_ENV(jlong, JVM_GetRandomSeedForCDSDump())\n-  JVMWrapper(\"JVM_GetRandomSeedForCDSDump\");\n+JVM_ENTRY_NO_ENV(jlong, JVM_GetRandomSeedForDumping())\n+  JVMWrapper(\"JVM_GetRandomSeedForDumping\");\n@@ -3862,1 +3862,1 @@\n-    log_debug(cds)(\"JVM_GetRandomSeedForCDSDump() = \" JLONG_FORMAT, seed);\n+    log_debug(cds)(\"JVM_GetRandomSeedForDumping() = \" JLONG_FORMAT, seed);\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import jdk.internal.misc.VM;\n+import jdk.internal.misc.CDS;\n@@ -111,1 +111,1 @@\n-            VM.initializeFromArchive(ByteCache.class);\n+            CDS.initializeFromArchive(ByteCache.class);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Byte.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import jdk.internal.misc.VM;\n+import jdk.internal.misc.CDS;\n@@ -8519,1 +8519,1 @@\n-            VM.initializeFromArchive(CharacterCache.class);\n+            CDS.initializeFromArchive(CharacterCache.class);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Character.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import jdk.internal.misc.CDS;\n@@ -1026,1 +1027,1 @@\n-            VM.initializeFromArchive(IntegerCache.class);\n+            CDS.initializeFromArchive(IntegerCache.class);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Integer.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-import jdk.internal.misc.VM;\n+import jdk.internal.misc.CDS;\n@@ -1172,1 +1172,1 @@\n-            VM.initializeFromArchive(LongCache.class);\n+            CDS.initializeFromArchive(LongCache.class);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Long.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -58,0 +58,1 @@\n+import jdk.internal.misc.CDS;\n@@ -280,1 +281,1 @@\n-            VM.initializeFromArchive(ArchivedData.class);\n+            CDS.initializeFromArchive(ArchivedData.class);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Module.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import jdk.internal.misc.VM;\n+import jdk.internal.misc.CDS;\n@@ -237,1 +237,1 @@\n-            VM.initializeFromArchive(ShortCache.class);\n+            CDS.initializeFromArchive(ShortCache.class);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Short.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import jdk.internal.misc.VM;\n+import jdk.internal.misc.CDS;\n@@ -36,2 +36,2 @@\n-        dumpArchive = VM.isCDSDumpingEnabled();\n-        sharingEnabled = VM.isCDSSharingEnabled();\n+        dumpArchive = CDS.isDynamicDumpingEnabled();\n+        sharingEnabled = CDS.isSharingEnabled();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/LambdaProxyClassArchive.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-import jdk.internal.misc.VM;\n+import jdk.internal.misc.CDS;\n@@ -113,1 +113,1 @@\n-        VM.initializeFromArchive(Configuration.class);\n+        CDS.initializeFromArchive(Configuration.class);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/module\/Configuration.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-import jdk.internal.misc.VM;\n+import jdk.internal.misc.CDS;\n@@ -79,1 +79,1 @@\n-        long seed = VM.getRandomSeedForCDSDump();\n+        long seed = CDS.getRandomSeedForDumping();\n@@ -103,1 +103,1 @@\n-        VM.initializeFromArchive(ImmutableCollections.class);\n+        CDS.initializeFromArchive(ImmutableCollections.class);\n","filename":"src\/java.base\/share\/classes\/java\/util\/ImmutableCollections.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-import jdk.internal.misc.VM;\n+import jdk.internal.misc.CDS;\n@@ -675,1 +675,1 @@\n-            VM.initializeFromArchive(Attributes.Name.class);\n+            CDS.initializeFromArchive(Attributes.Name.class);\n","filename":"src\/java.base\/share\/classes\/java\/util\/jar\/Attributes.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import jdk.internal.misc.VM;\n+import jdk.internal.misc.CDS;\n@@ -94,1 +94,1 @@\n-        VM.initializeFromArchive(ArchivedClassLoaders.class);\n+        CDS.initializeFromArchive(ArchivedClassLoaders.class);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/loader\/ArchivedClassLoaders.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n-import jdk.internal.misc.VM;\n+import jdk.internal.misc.CDS;\n@@ -87,1 +87,1 @@\n-        VM.initializeFromArchive(FDBigInteger.class);\n+        CDS.initializeFromArchive(FDBigInteger.class);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/math\/FDBigInteger.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -460,25 +460,0 @@\n-    \/**\n-     * Initialize archived static fields in the given Class using archived\n-     * values from CDS dump time. Also initialize the classes of objects in\n-     * the archived graph referenced by those fields.\n-     *\n-     * Those static fields remain as uninitialized if there is no mapped CDS\n-     * java heap data or there is any error during initialization of the\n-     * object class in the archived graph.\n-     *\/\n-    public static native void initializeFromArchive(Class<?> c);\n-\n-    public static native void defineArchivedModules(ClassLoader platformLoader, ClassLoader systemLoader);\n-\n-    public static native long getRandomSeedForCDSDump();\n-\n-    \/**\n-     * Check if CDS dynamic dumping is enabled via the DynamicDumpSharedSpaces flag.\n-     *\/\n-    public static native boolean isCDSDumpingEnabled();\n-\n-    \/**\n-     * Check if CDS sharing is enabled by via the UseSharedSpaces flag.\n-     *\/\n-    public static native boolean isCDSSharingEnabled();\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/VM.java","additions":0,"deletions":25,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import jdk.internal.misc.VM;\n+import jdk.internal.misc.CDS;\n@@ -62,1 +62,1 @@\n-        VM.initializeFromArchive(ArchivedBootLayer.class);\n+        CDS.initializeFromArchive(ArchivedBootLayer.class);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ArchivedBootLayer.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-import jdk.internal.misc.VM;\n+import jdk.internal.misc.CDS;\n@@ -126,1 +126,1 @@\n-        VM.initializeFromArchive(ArchivedModuleGraph.class);\n+        CDS.initializeFromArchive(ArchivedModuleGraph.class);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ArchivedModuleGraph.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-import jdk.internal.misc.VM;\n+import jdk.internal.misc.CDS;\n@@ -170,1 +170,1 @@\n-            VM.defineArchivedModules(ClassLoaders.platformClassLoader(), ClassLoaders.appClassLoader());\n+            CDS.defineArchivedModules(ClassLoaders.platformClassLoader(), ClassLoaders.appClassLoader());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModuleBootstrap.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-import jdk.internal.misc.VM;\n+import jdk.internal.misc.CDS;\n@@ -65,1 +65,1 @@\n-        VM.initializeFromArchive(BaseLocale.class);\n+        CDS.initializeFromArchive(BaseLocale.class);\n","filename":"src\/java.base\/share\/classes\/sun\/util\/locale\/BaseLocale.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"jvm.h\"\n+#include \"jdk_internal_misc_CDS.h\"\n+\n+JNIEXPORT void JNICALL\n+Java_jdk_internal_misc_CDS_initializeFromArchive(JNIEnv *env, jclass ignore,\n+                                                jclass c) {\n+    JVM_InitializeFromArchive(env, c);\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_jdk_internal_misc_CDS_defineArchivedModules(JNIEnv *env, jclass ignore,\n+                                                jobject platform_loader,\n+                                                jobject system_loader) {\n+    JVM_DefineArchivedModules(env, platform_loader, system_loader);\n+}\n+\n+JNIEXPORT jlong JNICALL\n+Java_jdk_internal_misc_CDS_getRandomSeedForDumping(JNIEnv *env, jclass ignore) {\n+    return JVM_GetRandomSeedForDumping();\n+}\n+\n+JNIEXPORT jboolean JNICALL\n+Java_jdk_internal_misc_CDS_isDynamicDumpingEnabled(JNIEnv *env, jclass jcls) {\n+    return JVM_IsDynamicDumpingEnabled(env);\n+}\n+\n+JNIEXPORT jboolean JNICALL\n+Java_jdk_internal_misc_CDS_isSharingEnabled(JNIEnv *env, jclass jcls) {\n+    return JVM_IsSharingEnabled(env);\n+}\n","filename":"src\/java.base\/share\/native\/libjava\/CDS.c","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -58,28 +58,0 @@\n-\n-JNIEXPORT void JNICALL\n-Java_jdk_internal_misc_VM_initializeFromArchive(JNIEnv *env, jclass ignore,\n-                                                jclass c) {\n-    JVM_InitializeFromArchive(env, c);\n-}\n-\n-JNIEXPORT void JNICALL\n-Java_jdk_internal_misc_VM_defineArchivedModules(JNIEnv *env, jclass ignore,\n-                                                jobject platform_loader,\n-                                                jobject system_loader) {\n-    JVM_DefineArchivedModules(env, platform_loader, system_loader);\n-}\n-\n-JNIEXPORT jlong JNICALL\n-Java_jdk_internal_misc_VM_getRandomSeedForCDSDump(JNIEnv *env, jclass ignore) {\n-    return JVM_GetRandomSeedForCDSDump();\n-}\n-\n-JNIEXPORT jboolean JNICALL\n-Java_jdk_internal_misc_VM_isCDSDumpingEnabled(JNIEnv *env, jclass jcls) {\n-    return JVM_IsCDSDumpingEnabled(env);\n-}\n-\n-JNIEXPORT jboolean JNICALL\n-Java_jdk_internal_misc_VM_isCDSSharingEnabled(JNIEnv *env, jclass jcls) {\n-    return JVM_IsCDSSharingEnabled(env);\n-}\n","filename":"src\/java.base\/share\/native\/libjava\/VM.c","additions":0,"deletions":28,"binary":false,"changes":28,"status":"modified"}]}