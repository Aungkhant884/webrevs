{"files":[{"patch":"@@ -49,3 +49,0 @@\n-\/\/ Complain every extra number of unplanned local refs\n-#define CHECK_JNI_LOCAL_REF_CAP_WARN_THRESHOLD 32\n-\n@@ -205,11 +202,0 @@\n-\/**\n- * Add to the planned number of handles. I.e. plus current live & warning threshold\n- *\/\n-static inline void\n-add_planned_handle_capacity(JNIHandleBlock* handles, size_t capacity) {\n-  handles->set_planned_capacity(capacity +\n-                                handles->get_number_of_live_handles() +\n-                                CHECK_JNI_LOCAL_REF_CAP_WARN_THRESHOLD);\n-}\n-\n-\n@@ -247,12 +233,1 @@\n-  JNIHandleBlock* handles = thr->active_handles();\n-  size_t planned_capacity = handles->get_planned_capacity();\n-  size_t live_handles = handles->get_number_of_live_handles();\n-  if (live_handles > planned_capacity) {\n-    IN_VM(\n-      tty->print_cr(\"WARNING: JNI local refs: \" SIZE_FORMAT \", exceeds capacity: \" SIZE_FORMAT,\n-                    live_handles, planned_capacity);\n-      thr->print_stack();\n-    )\n-    \/\/ Complain just the once, reset to current + warn threshold\n-    add_planned_handle_capacity(handles, 0);\n-  }\n+  \/\/ No checks at this time\n@@ -749,3 +724,0 @@\n-    if (result == JNI_OK) {\n-      add_planned_handle_capacity(thr->active_handles(), capacity);\n-    }\n@@ -853,6 +825,0 @@\n-    if (result == JNI_OK) {\n-      \/\/ increase local ref capacity if needed\n-      if ((size_t)capacity > thr->active_handles()->get_planned_capacity()) {\n-        add_planned_handle_capacity(thr->active_handles(), capacity);\n-      }\n-    }\n","filename":"src\/hotspot\/share\/prims\/jniCheck.cpp","additions":1,"deletions":35,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -359,1 +359,0 @@\n-  block->_planned_capacity = block_size_in_oops;\n@@ -553,16 +552,0 @@\n-class CountJNIHandleClosure: public OopClosure {\n-private:\n-  int _count;\n-public:\n-  CountJNIHandleClosure(): _count(0) {}\n-  virtual void do_oop(oop* ooph) { _count++; }\n-  virtual void do_oop(narrowOop* unused) { ShouldNotReachHere(); }\n-  int count() { return _count; }\n-};\n-\n-const size_t JNIHandleBlock::get_number_of_live_handles() {\n-  CountJNIHandleClosure counter;\n-  oops_do(&counter);\n-  return counter.count();\n-}\n-\n","filename":"src\/hotspot\/share\/runtime\/jniHandles.cpp","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -150,2 +150,0 @@\n-  \/\/ Check JNI, \"planned capacity\" for current frame (or push\/ensure)\n-  size_t          _planned_capacity;\n@@ -182,5 +180,0 @@\n-  \/\/ Checked JNI support\n-  void set_planned_capacity(size_t planned_capacity) { _planned_capacity = planned_capacity; }\n-  const size_t get_planned_capacity() { return _planned_capacity; }\n-  const size_t get_number_of_live_handles();\n-\n","filename":"src\/hotspot\/share\/runtime\/jniHandles.hpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1,91 +0,0 @@\n-\/*\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n- * @bug 8193222\n- * @summary Check EnsureLocalCapacity doesn't shrink unexpectedly\n- * @library \/test\/lib\n- * @run main\/native TestCheckedEnsureLocalCapacity launch\n- *\/\n-import jdk.test.lib.Utils;\n-import jdk.test.lib.process.ProcessTools;\n-import jdk.test.lib.process.OutputAnalyzer;\n-\n-public class TestCheckedEnsureLocalCapacity {\n-\n-    static {\n-        System.loadLibrary(\"TestCheckedEnsureLocalCapacity\");\n-    }\n-\n-    \/\/ Calls EnsureLocalCapacity(capacity) and then creates \"copies\" number\n-    \/\/ of LocalRefs to \"o\".\n-    \/\/ If capacity > copies no warning should ensue (with the bug fixed).\n-    \/\/ If copies > capacity + warning-threshold then we still get a warning.\n-    private static native void ensureCapacity(Object o, int capacity, int copies);\n-\n-    private static int[][] testArgs = {\n-        { 60, 45 }, \/\/ good: capacity > copies\n-        { 1, 45 }   \/\/ bad: copies >> capacity\n-    };\n-\n-    \/\/ Patterns EXCEED_WARNING and WARNING are not anchored to the beginning\n-    \/\/ of lines to allow matching interleaved output.\n-\n-    private static final String EXCEED_WARNING =\n-        \"WARNING: JNI local refs: \\\\d++, exceeds capacity:\";\n-\n-    private static final String WARNING = \"WARNING:\";\n-\n-    public static void main(String[] args) throws Throwable {\n-        if (args.length == 2) {\n-            ensureCapacity(new Object(),\n-                           Integer.parseInt(args[0]),\n-                           Integer.parseInt(args[1]));\n-            return;\n-        }\n-\n-        \/\/ No warning\n-        ProcessTools.executeTestJvm(\"-Xcheck:jni\",\n-                                    \"-Djava.library.path=\" + Utils.TEST_NATIVE_PATH,\n-                                    \"TestCheckedEnsureLocalCapacity\",\n-                                    Integer.toString(testArgs[0][0]),\n-                                    Integer.toString(testArgs[0][1])).\n-            shouldHaveExitValue(0).\n-            \/\/ check no capacity warning\n-            stdoutShouldNotMatch(EXCEED_WARNING).\n-            \/\/ check no other warning\n-            stdoutShouldNotMatch(WARNING).\n-            reportDiagnosticSummary();\n-\n-        \/\/ Warning\n-        ProcessTools.executeTestJvm(\"-Xcheck:jni\",\n-                                    \"-Djava.library.path=\" + Utils.TEST_NATIVE_PATH,\n-                                    \"TestCheckedEnsureLocalCapacity\",\n-                                    Integer.toString(testArgs[1][0]),\n-                                    Integer.toString(testArgs[1][1])).\n-            shouldHaveExitValue(0).\n-            \/\/ check for capacity warning\n-            stdoutShouldMatch(EXCEED_WARNING).\n-            reportDiagnosticSummary();\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/checked\/TestCheckedEnsureLocalCapacity.java","additions":0,"deletions":91,"binary":false,"changes":91,"status":"deleted"},{"patch":"@@ -695,1 +695,0 @@\n-tools\/launcher\/TestXcheckJNIWarnings.java#jdwp-agent   8296936 generic-all\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}