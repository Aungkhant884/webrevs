{"files":[{"patch":"@@ -1,49 +0,0 @@\n-\/*\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#include <jni.h>\n-#include <stdio.h>\n-\n-void reduceLocalCapacity(JNIEnv* env) {\n-    puts(\"reduceLocalCapacity: setting to 1\");\n-    (*env)->EnsureLocalCapacity(env,1);\n-}\n-\n-JNIEXPORT void JNICALL\n-Java_TestCheckedEnsureLocalCapacity_ensureCapacity(JNIEnv *env,\n-                                                   jobject unused,\n-                                                   jobject target,\n-                                                   jint capacity,\n-                                                   jint copies) {\n-  int i;\n-  printf(\"ensureCapacity: setting to %d\\n\", capacity);\n-  (*env)->EnsureLocalCapacity(env, capacity); \/\/ set high\n-  reduceLocalCapacity(env);     \/\/ sets low\n-\n-  printf(\"ensureCapacity: creating %d LocalRefs\\n\", copies);\n-  for (i = 0; i < copies; i++) {\n-    target = (*env)->NewLocalRef(env, target);\n-  }\n-\n-  puts(\"ensureCapacity: done\");\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/jni\/checked\/libTestCheckedEnsureLocalCapacity.c","additions":0,"deletions":49,"binary":false,"changes":49,"status":"deleted"},{"patch":"@@ -1,85 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Red Hat, Inc.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug     8258836\n- * @summary JNI local refs exceed capacity getDiagnosticCommandInfo\n- * @library \/test\/lib\n- * @run main\/othervm DcmdMBeanTestCheckJni\n- *\/\n-\n-import java.lang.management.ManagementFactory;\n-import javax.management.MBeanServer;\n-import javax.management.ObjectName;\n-import javax.management.MBeanServerConnection;\n-import javax.management.remote.JMXConnectorFactory;\n-import javax.management.remote.JMXConnector;\n-import javax.management.remote.JMXConnectorServerFactory;\n-import javax.management.remote.JMXServiceURL;\n-import javax.management.remote.JMXConnectorServer;\n-\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n-\n-public class DcmdMBeanTestCheckJni {\n-\n-    public static void main(String[] args) throws Exception {\n-        OutputAnalyzer out = ProcessTools.executeTestJvm(\n-            \"-Xcheck:jni\",\n-            DcmdMBeanRunner.class.getName());\n-        out.shouldNotMatch(\"WARNING: JNI local refs: \\\\d+, exceeds capacity: \\\\d+\\\\s+\" +\n-                           \"at com.sun.management.internal.DiagnosticCommandImpl.getDiagnosticCommandInfo\")\n-           .shouldContain(\"DcmdMBeanRunner COMPLETE\")\n-           .shouldHaveExitValue(0);\n-    }\n-\n-}\n-\n-class DcmdMBeanRunner {\n-\n-    private static final String HOTSPOT_DIAGNOSTIC_MXBEAN_NAME =\n-        \"com.sun.management:type=DiagnosticCommand\";\n-\n-    public static void main(String[] args) throws Exception {\n-        MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\n-        JMXServiceURL url = new JMXServiceURL(\"rmi\", null, 0);\n-        JMXConnectorServer cs = null;\n-        JMXConnector cc = null;\n-        try {\n-            cs = JMXConnectorServerFactory.newJMXConnectorServer(url, null, mbs);\n-            cs.start();\n-            JMXServiceURL addr = cs.getAddress();\n-            cc = JMXConnectorFactory.connect(addr);\n-            MBeanServerConnection mbsc = cc.getMBeanServerConnection();\n-            ObjectName name = new ObjectName(HOTSPOT_DIAGNOSTIC_MXBEAN_NAME);\n-            System.out.println(\"DiagnosticCommand MBean: \" + name);\n-            System.out.println(\"DcmdMBeanRunner COMPLETE\");\n-        } finally {\n-            try {\n-                cc.close();\n-                cs.stop();\n-            } catch (Exception e) { \/* ignored *\/ }\n-        }\n-    }\n-}\n","filename":"test\/jdk\/com\/sun\/management\/DiagnosticCommandMBean\/DcmdMBeanTestCheckJni.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"deleted"}]}