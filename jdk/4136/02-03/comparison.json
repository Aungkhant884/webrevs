{"files":[{"patch":"@@ -933,2 +933,3 @@\n-    const TypeInt* t1x = TypeInt::make(0, next_power_of_2(t1i->_hi) - 1, t1i->_widen);\n-    const TypeInt* t2x = TypeInt::make(0, next_power_of_2(t2i->_hi) - 1, t2i->_widen);\n+    \/\/ hi - set all bits below the highest bit. Using round_down to avoid overflow.\n+    const TypeInt* t1x = TypeInt::make(0, round_down_power_of_2(t1i->_hi) + (round_down_power_of_2(t1i->_hi) - 1), t1i->_widen);\n+    const TypeInt* t2x = TypeInt::make(0, round_down_power_of_2(t2i->_hi) + (round_down_power_of_2(t2i->_hi) - 1), t2i->_widen);\n@@ -998,2 +999,3 @@\n-    const TypeLong* t1x = TypeLong::make(0, next_power_of_2(t1l->_hi) - 1, t1l->_widen);\n-    const TypeLong* t2x = TypeLong::make(0, next_power_of_2(t2l->_hi) - 1, t2l->_widen);\n+    \/\/ hi - set all bits below the highest bit. Using round_down to avoid overflow.\n+    const TypeLong* t1x = TypeLong::make(0, round_down_power_of_2(t1l->_hi) + (round_down_power_of_2(t1l->_hi) - 1), t1l->_widen);\n+    const TypeLong* t2x = TypeLong::make(0, round_down_power_of_2(t2l->_hi) + (round_down_power_of_2(t2l->_hi) - 1), t2l->_widen);\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @key randomness\n@@ -29,1 +30,1 @@\n- * @run main\/othervm compiler.types.TestMeetXor -XX::CompileCommand=dontinline,*::test*\n+ * @run main\/othervm compiler.types.TestMeetXor -Xbatch -XX::CompileCommand=dontinline,*::test*\n@@ -39,1 +40,1 @@\n-        for (int i = 0; i < 10000; i++) {\n+        for (int i = 0; i < 50_000; i++) {\n@@ -43,0 +44,1 @@\n+            testCase4E();\n@@ -49,1 +51,1 @@\n-    static Random r = new Random(5);\n+    static Random r = jdk.test.lib.Utils.getRandomInstance();\n","filename":"test\/hotspot\/jtreg\/compiler\/types\/TestMeetXor.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"}]}