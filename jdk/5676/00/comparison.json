{"files":[{"patch":"@@ -8,5 +8,8 @@\n-  <style type=\"text\/css\">\n-      code{white-space: pre-wrap;}\n-      span.smallcaps{font-variant: small-caps;}\n-      span.underline{text-decoration: underline;}\n-      div.column{display: inline-block; vertical-align: top; width: 50%;}\n+  <style>\n+    code{white-space: pre-wrap;}\n+    span.smallcaps{font-variant: small-caps;}\n+    span.underline{text-decoration: underline;}\n+    div.column{display: inline-block; vertical-align: top; width: 50%;}\n+    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n+    ul.task-list{list-style: none;}\n+    .display.math{display: block; text-align: center; margin: 0.5rem auto;}\n@@ -24,1 +27,3 @@\n-<nav id=\"TOC\">\n+<nav id=\"TOC\" role=\"doc-toc\">\n+<ul>\n+<li><a href=\"#using-make-test-the-run-test-framework\">Using \"make test\" (the run-test framework)<\/a>\n@@ -26,1 +31,0 @@\n-<li><a href=\"#using-make-test-the-run-test-framework\">Using &quot;make test&quot; (the run-test framework)<\/a><ul>\n@@ -29,1 +33,2 @@\n-<li><a href=\"#test-selection\">Test selection<\/a><ul>\n+<li><a href=\"#test-selection\">Test selection<\/a>\n+<ul>\n@@ -37,1 +42,2 @@\n-<li><a href=\"#test-suite-control\">Test suite control<\/a><ul>\n+<li><a href=\"#test-suite-control\">Test suite control<\/a>\n+<ul>\n@@ -43,1 +49,2 @@\n-<li><a href=\"#notes-for-specific-tests\">Notes for Specific Tests<\/a><ul>\n+<li><a href=\"#notes-for-specific-tests\">Notes for Specific Tests<\/a>\n+<ul>\n@@ -51,1 +58,1 @@\n-<h2 id=\"using-make-test-the-run-test-framework\">Using &quot;make test&quot; (the run-test framework)<\/h2>\n+<h2 id=\"using-make-test-the-run-test-framework\">Using \"make test\" (the run-test framework)<\/h2>\n@@ -69,1 +76,1 @@\n-<p>For some common top-level tests, direct make targets have been generated. This includes all JTReg test groups, the hotspot gtest, and custom tests (if present). This means that <code>make test-tier1<\/code> is equivalent to <code>make test TEST=&quot;tier1&quot;<\/code>, but the latter is more tab-completion friendly. For more complex test runs, the <code>test TEST=&quot;x&quot;<\/code> solution needs to be used.<\/p>\n+<p>For some common top-level tests, direct make targets have been generated. This includes all JTReg test groups, the hotspot gtest, and custom tests (if present). This means that <code>make test-tier1<\/code> is equivalent to <code>make test TEST=\"tier1\"<\/code>, but the latter is more tab-completion friendly. For more complex test runs, the <code>test TEST=\"x\"<\/code> solution needs to be used.<\/p>\n@@ -122,2 +129,2 @@\n-<p>These variables use a keyword=value approach to allow multiple values to be set. So, for instance, <code>JTREG=&quot;JOBS=1;TIMEOUT_FACTOR=8&quot;<\/code> will set the JTReg concurrency level to 1 and the timeout factor to 8. This is equivalent to setting <code>JTREG_JOBS=1 JTREG_TIMEOUT_FACTOR=8<\/code>, but using the keyword format means that the <code>JTREG<\/code> variable is parsed and verified for correctness, so <code>JTREG=&quot;TMIEOUT_FACTOR=8&quot;<\/code> would give an error, while <code>JTREG_TMIEOUT_FACTOR=8<\/code> would just pass unnoticed.<\/p>\n-<p>To separate multiple keyword=value pairs, use <code>;<\/code> (semicolon). Since the shell normally eats <code>;<\/code>, the recommended usage is to write the assignment inside qoutes, e.g. <code>JTREG=&quot;...;...&quot;<\/code>. This will also make sure spaces are preserved, as in <code>JTREG=&quot;JAVA_OPTIONS=-XshowSettings -Xlog:gc+ref=debug&quot;<\/code>.<\/p>\n+<p>These variables use a keyword=value approach to allow multiple values to be set. So, for instance, <code>JTREG=\"JOBS=1;TIMEOUT_FACTOR=8\"<\/code> will set the JTReg concurrency level to 1 and the timeout factor to 8. This is equivalent to setting <code>JTREG_JOBS=1 JTREG_TIMEOUT_FACTOR=8<\/code>, but using the keyword format means that the <code>JTREG<\/code> variable is parsed and verified for correctness, so <code>JTREG=\"TMIEOUT_FACTOR=8\"<\/code> would give an error, while <code>JTREG_TMIEOUT_FACTOR=8<\/code> would just pass unnoticed.<\/p>\n+<p>To separate multiple keyword=value pairs, use <code>;<\/code> (semicolon). Since the shell normally eats <code>;<\/code>, the recommended usage is to write the assignment inside qoutes, e.g. <code>JTREG=\"...;...\"<\/code>. This will also make sure spaces are preserved, as in <code>JTREG=\"JAVA_OPTIONS=-XshowSettings -Xlog:gc+ref=debug\"<\/code>.<\/p>\n@@ -185,1 +192,1 @@\n-<p>Use <code>JTREG=&quot;OPTIONS=--help all&quot;<\/code> to see all available JTReg options.<\/p>\n+<p>Use <code>JTREG=\"OPTIONS=--help all\"<\/code> to see all available JTReg options.<\/p>\n@@ -203,1 +210,1 @@\n-<p>Use <code>GTEST=&quot;OPTIONS=--help&quot;<\/code> to see all available Gtest options.<\/p>\n+<p>Use <code>GTEST=\"OPTIONS=--help\"<\/code> to see all available Gtest options.<\/p>\n@@ -232,1 +239,1 @@\n-<p>If your locale is non-US, some tests are likely to fail. To work around this you can set the locale to US. On Unix platforms simply setting <code>LANG=&quot;en_US&quot;<\/code> in the environment before running tests should work. On Windows, setting <code>JTREG=&quot;VM_OPTIONS=-Duser.language=en -Duser.country=US&quot;<\/code> helps for most, but not all test cases.<\/p>\n+<p>If your locale is non-US, some tests are likely to fail. To work around this you can set the locale to US. On Unix platforms simply setting <code>LANG=\"en_US\"<\/code> in the environment before running tests should work. On Windows or MacOS, setting <code>JTREG=\"VM_OPTIONS=-Duser.language=en -Duser.country=US\"<\/code> helps for most, but not all test cases.<\/p>\n@@ -246,1 +253,1 @@\n-<p>For example, test\/jdk\/javax\/swing\/TooltipManager\/JMenuItemToolTipKeyBindingsTest\/JMenuItemToolTipKeyBindingsTest.java fails on MacOS because it uses <code>CTRL + F1<\/code> key sequence to show or hide tooltip message but the key combination is reserved by the operating system. To run the test correctly the default global key shortcut should be disabled using the steps described above, and then deselect &quot;Turn keyboard access on or off&quot; option which is responsible for <code>CTRL + F1<\/code> combination.<\/p>\n+<p>For example, test\/jdk\/javax\/swing\/TooltipManager\/JMenuItemToolTipKeyBindingsTest\/JMenuItemToolTipKeyBindingsTest.java fails on MacOS because it uses <code>CTRL + F1<\/code> key sequence to show or hide tooltip message but the key combination is reserved by the operating system. To run the test correctly the default global key shortcut should be disabled using the steps described above, and then deselect \"Turn keyboard access on or off\" option which is responsible for <code>CTRL + F1<\/code> combination.<\/p>\n@@ -250,1 +257,1 @@\n-<p>Type <code>gpedit<\/code> in the Search and then click Edit group policy; navigate to User Configuration -&gt; Administrative Templates -&gt; Windows Components -&gt; File Explorer; in the right-side pane look for &quot;Turn off Windows key hotkeys&quot; and double click on it; enable or disable hotkeys.<\/p>\n+<p>Type <code>gpedit<\/code> in the Search and then click Edit group policy; navigate to User Configuration -&gt; Administrative Templates -&gt; Windows Components -&gt; File Explorer; in the right-side pane look for \"Turn off Windows key hotkeys\" and double click on it; enable or disable hotkeys.<\/p>\n","filename":"doc\/testing.html","additions":26,"deletions":19,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -509,1 +509,1 @@\n-in the environment before running tests should work. On Windows, setting\n+in the environment before running tests should work. On Windows or MacOS, setting\n","filename":"doc\/testing.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}