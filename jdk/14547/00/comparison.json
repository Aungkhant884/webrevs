{"files":[{"patch":"@@ -253,1 +253,1 @@\n-            return type.getFields().get(0).getTypeName();\n+            return type.getFields().getFirst().getTypeName();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/ValueDescriptor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -505,3 +505,2 @@\n-        if (o instanceof UnsignedValue unsigned) {\n-            Object u = unsigned.value();\n-            if (u instanceof Short s) {\n+        if (o instanceof UnsignedValue(Object unsigned)) {\n+            if (unsigned instanceof Short s) {\n@@ -510,1 +509,1 @@\n-            if (u instanceof Byte b) {\n+            if (unsigned instanceof Byte b) {\n@@ -558,3 +557,2 @@\n-        if (o instanceof UnsignedValue unsigned) {\n-            Object u = unsigned.value();\n-            if (u instanceof Integer i) {\n+        if (o instanceof UnsignedValue(Object unsigned)) {\n+            if (unsigned instanceof Integer i) {\n@@ -563,1 +561,1 @@\n-            if (u instanceof Short s) {\n+            if (unsigned instanceof Short s) {\n@@ -566,1 +564,1 @@\n-            if (u instanceof Byte b) {\n+            if (unsigned instanceof Byte b) {\n@@ -664,3 +662,2 @@\n-        if (o instanceof UnsignedValue unsigned) {\n-            Object u = unsigned.value();\n-            if (u instanceof Integer i) {\n+        if (o instanceof UnsignedValue(Object unsigned)) {\n+            if (unsigned instanceof Integer i) {\n@@ -669,1 +666,1 @@\n-            if (u instanceof Short s) {\n+            if (unsigned instanceof Short s) {\n@@ -672,1 +669,1 @@\n-            if (u instanceof Byte b) {\n+            if (unsigned instanceof Byte b) {\n@@ -796,3 +793,2 @@\n-        if (o instanceof UnsignedValue unsigned) {\n-            Object u = unsigned.value();\n-            if (u instanceof Integer i) {\n+        if (o instanceof UnsignedValue(Object unsigned)) {\n+            if (unsigned instanceof Integer i) {\n@@ -801,1 +797,1 @@\n-            if (u instanceof Short s) {\n+            if (unsigned instanceof Short s) {\n@@ -804,1 +800,1 @@\n-            if (u instanceof Byte b) {\n+            if (unsigned instanceof Byte b) {\n@@ -824,13 +820,8 @@\n-            switch (ts.value()) {\n-            case Timespan.MICROSECONDS:\n-                return Duration.ofNanos(1000 * timespan);\n-            case Timespan.SECONDS:\n-                return Duration.ofSeconds(timespan);\n-            case Timespan.MILLISECONDS:\n-                return Duration.ofMillis(timespan);\n-            case Timespan.NANOSECONDS:\n-                return Duration.ofNanos(timespan);\n-            case Timespan.TICKS:\n-                return Duration.ofNanos(objectContext.convertTimespan(timespan));\n-            }\n-            throw new IllegalArgumentException(\"Attempt to get \" + v.getTypeName() + \" field \\\"\" + name + \"\\\" with illegal timespan unit \" + ts.value());\n+            return switch (ts.value()) {\n+                case Timespan.MICROSECONDS -> Duration.ofNanos(1000 * timespan);\n+                case Timespan.SECONDS -> Duration.ofSeconds(timespan);\n+                case Timespan.MILLISECONDS -> Duration.ofMillis(timespan);\n+                case Timespan.NANOSECONDS -> Duration.ofNanos(timespan);\n+                case Timespan.TICKS -> Duration.ofNanos(objectContext.convertTimespan(timespan));\n+                default ->  throw new IllegalArgumentException(\"Attempt to get \" + v.getTypeName() + \" field \\\"\" + name + \"\\\" with illegal timespan unit \" + ts.value());\n+            };\n@@ -881,3 +872,2 @@\n-        if (o instanceof UnsignedValue unsigned) {\n-            Object u = unsigned.value();\n-            if (u instanceof Integer i) {\n+        if (o instanceof UnsignedValue(Object unsigned)) {\n+            if (unsigned instanceof Integer i) {\n@@ -886,1 +876,1 @@\n-            if (u instanceof Short s) {\n+            if (unsigned instanceof Short s) {\n@@ -889,1 +879,1 @@\n-            if (u instanceof Byte b) {\n+            if (unsigned instanceof Byte b) {\n@@ -903,7 +893,5 @@\n-            switch (ts.value()) {\n-            case Timestamp.MILLISECONDS_SINCE_EPOCH:\n-                return Instant.ofEpochMilli(timestamp);\n-            case Timestamp.TICKS:\n-                return Instant.ofEpochSecond(0, objectContext.convertTimestamp(timestamp));\n-            }\n-            throw new IllegalArgumentException(\"Attempt to get \" + v.getTypeName() + \" field \\\"\" + name + \"\\\" with illegal timestamp unit \" + ts.value());\n+            return switch (ts.value()) {\n+                case Timestamp.MILLISECONDS_SINCE_EPOCH -> Instant.ofEpochMilli(timestamp);\n+                case Timestamp.TICKS -> Instant.ofEpochSecond(0, objectContext.convertTimestamp(timestamp));\n+                default -> throw new IllegalArgumentException(\"Attempt to get \" + v.getTypeName() + \" field \\\"\" + name + \"\\\" with illegal timestamp unit \" + ts.value());\n+            };\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/consumer\/RecordedObject.java","additions":32,"deletions":44,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,1 +57,1 @@\n-                .map(s -> s.getFrames().get(0))\n+                .map(s -> s.getFrames().getFirst())\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/consumer\/snippet-files\/Snippets.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -229,1 +229,1 @@\n-                                if (values.size() == 1 && values.get(0)instanceof String s) {\n+                                if (values.size() == 1 && values.getFirst() instanceof String s) {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/EventInstrumentation.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n-import java.util.Set;\n+import java.util.SequencedSet;\n@@ -39,1 +39,1 @@\n-    private static final Set<SafePath> paths = new LinkedHashSet<>();\n+    private static final SequencedSet<SafePath> paths = new LinkedHashSet<>();\n@@ -61,2 +61,1 @@\n-        SafePath oldest = paths.iterator().next();\n-        paths.remove(oldest);\n+        paths.removeFirst();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/FilePurger.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,1 +77,1 @@\n-        Element metadata = root.elements(\"metadata\").get(0);\n+        Element metadata = root.elements(\"metadata\").getFirst();\n@@ -82,1 +82,1 @@\n-        Element time = root.elements(\"region\").get(0);\n+        Element time = root.elements(\"region\").getFirst();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/MetadataReader.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -102,1 +102,1 @@\n-            return result.get(0);\n+            return result.getFirst();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/PlatformRecorder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -798,1 +798,1 @@\n-            result.add(input.get(0));\n+            result.add(input.getFirst());\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/PlatformRecording.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -70,1 +70,1 @@\n-            return refs.get(0);\n+            return refs.getFirst();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/consumer\/CompositeParser.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -112,1 +112,1 @@\n-                sj.add(conflictedOptions.remove(0));\n+                sj.add(conflictedOptions.removeFirst());\n@@ -119,1 +119,1 @@\n-        sb.append(conflictedOptions.remove(0));\n+        sb.append(conflictedOptions.removeFirst());\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/dcmd\/ArgumentParser.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -306,13 +306,8 @@\n-        if (e instanceof FileNotFoundException || e instanceof NoSuchFileException) {\n-            return \"find\";\n-        }\n-        if (e instanceof ParseException) {\n-            return \"parse\";\n-        }\n-        if (e instanceof JFCModelException) {\n-            return \"use\";\n-        }\n-        if (e instanceof AccessDeniedException) {\n-            return \"access\";\n-        }\n-        return \"open\";  \/\/ InvalidPath, IOException\n+        return switch (e) {\n+            case FileNotFoundException f -> \"find\";\n+            case NoSuchFileException n -> \"find\";\n+            case ParseException p -> \"parse\";\n+            case JFCModelException j -> \"use\";\n+            case AccessDeniedException a -> \"access\";\n+            default -> \"open\"; \/\/ InvalidPath, IOException\n+        };\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/JFC.java","additions":9,"deletions":14,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -178,1 +178,1 @@\n-        return producers.get(0).evaluate();\n+        return producers.getFirst().evaluate();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/XmlElement.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,1 @@\n-            Result r = producers.get(0).evaluate();\n+            Result r = producers.getFirst().evaluate();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/XmlNot.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -124,1 +124,1 @@\n-        return options.isEmpty() ? null : options.get(0);\n+        return options.isEmpty() ? null : options.getFirst();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/XmlSelection.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-            XmlElement producer = producers.get(0);\n+            XmlElement producer = producers.getFirst();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/jfc\/model\/XmlTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -257,4 +257,1 @@\n-        case \"int\":\n-        case \"long\":\n-        case \"short\":\n-        case \"byte\":\n+        case \"int\", \"long\", \"short\", \"byte\":\n@@ -264,2 +261,1 @@\n-        case \"float\":\n-        case \"double\":\n+        case \"float\", \"double\":\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/query\/FieldBuilder.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -334,1 +334,1 @@\n-        TableCell lastCell = tableCells.get(tableCells.size() - 1);\n+        TableCell lastCell = tableCells.getLast();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/query\/TableRenderer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -113,2 +113,1 @@\n-                ViewConfiguration view = views.get(views.size() - 1);\n-                view.properties().put(key, value);\n+                views.getLast().properties().put(key, value);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/query\/ViewFile.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -125,1 +125,1 @@\n-            sb.append(aliases.get(0));\n+            sb.append(aliases.getFirst());\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/Command.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-        long fileSize = sizes.get(0);\n+        long fileSize = sizes.getFirst();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/Disassemble.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -98,1 +98,1 @@\n-            return filters.get(0);\n+            return filters.getFirst();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/Filters.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -421,1 +421,1 @@\n-                className = decodeDescriptors(className, arraySize > 0 ? Long.toString(arraySize) : \"\").get(0);\n+                className = decodeDescriptors(className, arraySize > 0 ? Long.toString(arraySize) : \"\").getFirst();\n@@ -487,1 +487,1 @@\n-            className = decodeDescriptors(className, \"\").get(0);\n+            className = decodeDescriptors(className, \"\").getFirst();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/tool\/PrettyWriter.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -68,1 +68,1 @@\n-            RecordedEvent event = events.get(0);\n+            RecordedEvent event = events.getFirst();\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/TestFieldAccess.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,1 +60,1 @@\n-            RecordedEvent recordedEvent = recordedEvents.get(0);\n+            RecordedEvent recordedEvent = recordedEvents.getFirst();\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/TestMethodGetModifiers.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,1 +69,1 @@\n-            RecordedEvent event = events.get(0);\n+            RecordedEvent event = events.getFirst();\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/TestRecordedEvent.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,1 +59,1 @@\n-            RecordedEvent event = events.get(0);\n+            RecordedEvent event = events.getFirst();\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/TestRecordedEventGetThread.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -88,1 +88,1 @@\n-        RecordedEvent event = events.get(0);\n+        RecordedEvent event = events.getFirst();\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/TestRecordedEventGetThreadOther.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,1 +71,1 @@\n-            RecordedEvent recordedEvent = recordedEvents.get(0);\n+            RecordedEvent recordedEvent = recordedEvents.getFirst();\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/TestRecordedFrame.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -154,1 +154,1 @@\n-            String firstMethod = frames.get(frames.size() - 1).getMethod().getName();\n+            String firstMethod = frames.getLast().getMethod().getName();\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/TestRecordedFullStackTrace.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,1 @@\n-            RecordedEvent event = events.get(0);\n+            RecordedEvent event = events.getFirst();\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/TestRecordedInstantEventTimestamp.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -68,1 +68,1 @@\n-            RecordedEvent recordedEvent = recordedEvents.get(0);\n+            RecordedEvent recordedEvent = recordedEvents.getFirst();\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/TestRecordedMethodDescriptor.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -395,1 +395,1 @@\n-            return events.get(0);\n+            return events.getFirst();\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/TestRecordedObject.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,1 +61,1 @@\n-            RecordedEvent recordedEvent = events.get(0);\n+            RecordedEvent recordedEvent = events.getFirst();\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/TestSingleRecordedEvent.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,1 +64,1 @@\n-            RecordedEvent e = events.get(0);\n+            RecordedEvent e = events.getFirst();\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/TestToString.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,1 +64,1 @@\n-            RecordedEvent recordedEvent = events.get(0);\n+            RecordedEvent recordedEvent = events.getFirst();\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/TestValueDescriptorRecorded.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -70,1 +70,1 @@\n-                EventType t = FlightRecorder.getFlightRecorder().getEventTypes().get(0);\n+                EventType t = FlightRecorder.getFlightRecorder().getEventTypes().getFirst();\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/recordingstream\/TestOnMetadata.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,1 @@\n-                FlightRecorder.getFlightRecorder().getRecordings().get(0).stop();\n+                FlightRecorder.getFlightRecorder().getRecordings().getFirst().stop();\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/recordingstream\/TestStoppedRecording.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,1 +58,1 @@\n-            if (events.get(0).getDuration().toNanos() < 1) {\n+            if (events.getFirst().getDuration().toNanos() < 1) {\n","filename":"test\/jdk\/jdk\/jfr\/api\/event\/TestEventDuration.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -141,1 +141,1 @@\n-            Events.assertField(events.get(0), \"ecid\").equal(ecidValue);\n+            Events.assertField(events.getFirst(), \"ecid\").equal(ecidValue);\n@@ -178,1 +178,1 @@\n-            RecordedEvent re = events.get(0);\n+            RecordedEvent re = events.getFirst();\n","filename":"test\/jdk\/jdk\/jfr\/api\/event\/dynamic\/TestDynamicAnnotations.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -75,1 +75,1 @@\n-            Asserts.assertGreaterThanOrEqual(snapshot.getStartTime(), recordings.get(0).getStartTime());\n+            Asserts.assertGreaterThanOrEqual(snapshot.getStartTime(), recordings.getFirst().getStartTime());\n@@ -125,1 +125,1 @@\n-                Asserts.assertEquals(events.get(0).getEventType().getName(), SimpleEvent.class.getName());\n+                Asserts.assertEquals(events.getFirst().getEventType().getName(), SimpleEvent.class.getName());\n@@ -165,1 +165,1 @@\n-                Asserts.assertEquals(events.get(0).getEventType().getName(), SimpleEvent.class.getName());\n+                Asserts.assertEquals(events.getFirst().getEventType().getName(), SimpleEvent.class.getName());\n","filename":"test\/jdk\/jdk\/jfr\/api\/flightrecorder\/TestSnapshot.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -272,1 +272,1 @@\n-            String illegal = type.getFields().get(type.getFields().size() - 1).getName();\n+            String illegal = type.getFields().getLast().getName();\n","filename":"test\/jdk\/jdk\/jfr\/api\/metadata\/annotations\/TestName.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -101,1 +101,1 @@\n-        List<AnnotationElement> aes = type.getAnnotationElements().get(0).getAnnotationElements();\n+        List<AnnotationElement> aes = type.getAnnotationElements().getFirst().getAnnotationElements();\n@@ -106,1 +106,1 @@\n-        aes = field.getAnnotationElements().get(0).getAnnotationElements();\n+        aes = field.getAnnotationElements().getFirst().getAnnotationElements();\n","filename":"test\/jdk\/jdk\/jfr\/api\/metadata\/eventtype\/TestGetAnnotationElements.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,1 @@\n-        Asserts.assertEquals(noCategory.get(0), \"Uncategorized\", \"Wrong default category\");\n+        Asserts.assertEquals(noCategory.getFirst(), \"Uncategorized\", \"Wrong default category\");\n","filename":"test\/jdk\/jdk\/jfr\/api\/metadata\/eventtype\/TestGetCategory.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,1 @@\n-            settings.add(settings.get(0));\n+            settings.add(settings.getFirst());\n","filename":"test\/jdk\/jdk\/jfr\/api\/metadata\/eventtype\/TestGetSettings.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,1 +62,1 @@\n-        final AnnotationElement outAnnotation = vdComplex.getAnnotationElements().get(0);\n+        final AnnotationElement outAnnotation = vdComplex.getAnnotationElements().getFirst();\n","filename":"test\/jdk\/jdk\/jfr\/api\/metadata\/valuedescriptor\/TestConstructor.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -97,1 +97,1 @@\n-        AnnotationElement ae = aes.get(0);\n+        AnnotationElement ae = aes.getFirst();\n","filename":"test\/jdk\/jdk\/jfr\/api\/modules\/src_mods\/test.jfr.main\/test\/jfr\/main\/MainTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,1 +62,1 @@\n-        System.out.println(events.iterator().next());\n+        System.out.println(events.getFirst());\n","filename":"test\/jdk\/jdk\/jfr\/api\/recording\/destination\/TestDestFileExist.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -95,1 +95,1 @@\n-        System.out.printf(\"Found event %s in %s%n\", events.get(0).getEventType().getName(), dest.toString());\n+        System.out.printf(\"Found event %s in %s%n\", events.getFirst().getEventType().getName(), dest.toString());\n","filename":"test\/jdk\/jdk\/jfr\/api\/recording\/destination\/TestDestInvalid.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,1 +61,1 @@\n-        System.out.printf(\"Found event %s%n\", events.get(0).getEventType().getName());\n+        System.out.printf(\"Found event %s%n\", events.getFirst().getEventType().getName());\n","filename":"test\/jdk\/jdk\/jfr\/api\/recording\/destination\/TestDestLongPath.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -75,1 +75,1 @@\n-        System.out.printf(\"Found event %s in %s%n\", events.get(0).getEventType().getName(), dest.toString());\n+        System.out.printf(\"Found event %s in %s%n\", events.getFirst().getEventType().getName(), dest.toString());\n","filename":"test\/jdk\/jdk\/jfr\/api\/recording\/destination\/TestDestReadOnly.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,1 +73,1 @@\n-        System.out.printf(\"Found event %s%n\", events.get(0).getEventType().getName());\n+        System.out.printf(\"Found event %s%n\", events.getFirst().getEventType().getName());\n","filename":"test\/jdk\/jdk\/jfr\/api\/recording\/destination\/TestDestState.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,1 +69,1 @@\n-        System.out.printf(\"Found event %s%n\", events.get(0).getEventType().getName());\n+        System.out.printf(\"Found event %s%n\", events.getFirst().getEventType().getName());\n","filename":"test\/jdk\/jdk\/jfr\/api\/recording\/destination\/TestDestToDiskFalse.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,1 +64,1 @@\n-        System.out.printf(\"Found event %s%n\", events.get(0).getEventType().getName());\n+        System.out.printf(\"Found event %s%n\", events.getFirst().getEventType().getName());\n","filename":"test\/jdk\/jdk\/jfr\/api\/recording\/destination\/TestDestToDiskTrue.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,1 +71,1 @@\n-        System.out.printf(\"Found event %s%n\", events.get(0).getEventType().getName());\n+        System.out.printf(\"Found event %s%n\", events.getFirst().getEventType().getName());\n","filename":"test\/jdk\/jdk\/jfr\/api\/recording\/destination\/TestDestWithDuration.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,1 +63,1 @@\n-        String foundEventPath = events.get(0).getEventType().getName();\n+        String foundEventPath = events.getFirst().getEventType().getName();\n","filename":"test\/jdk\/jdk\/jfr\/api\/recording\/dump\/TestDumpLongPath.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -71,1 +71,1 @@\n-        RecordedEvent event = events.get(0);\n+        RecordedEvent event = events.getFirst();\n@@ -86,1 +86,1 @@\n-        RecordedEvent event = events.get(0);\n+        RecordedEvent event = events.getFirst();\n","filename":"test\/jdk\/jdk\/jfr\/api\/recording\/event\/TestChunkPeriod.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -129,1 +129,1 @@\n-        RecordedEvent re = recordedEvents.get(0);\n+        RecordedEvent re = recordedEvents.getFirst();\n","filename":"test\/jdk\/jdk\/jfr\/api\/recording\/misc\/TestRecordingCopy.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,1 +63,1 @@\n-        RecordedEvent event = events.get(0);\n+        RecordedEvent event = events.getFirst();\n","filename":"test\/jdk\/jdk\/jfr\/event\/compiler\/TestCodeCacheConfig.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -70,1 +70,1 @@\n-        RecordedEvent event = events.get(0);\n+        RecordedEvent event = events.getFirst();\n","filename":"test\/jdk\/jdk\/jfr\/event\/compiler\/TestCodeCacheFull.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-            RecordedEvent e = events.get(0);\n+            RecordedEvent e = events.getFirst();\n","filename":"test\/jdk\/jdk\/jfr\/event\/diagnostics\/TestHeapDump.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,1 +63,1 @@\n-            RecordedEvent event1 = events.get(0);\n+            RecordedEvent event1 = events.getFirst();\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/collection\/TestSystemGC.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,1 @@\n-        EventVerifier v = createVerifier(events.get(0));\n+        EventVerifier v = createVerifier(events.getFirst());\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/configuration\/GCHeapConfigurationEventTester.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,1 @@\n-        EventVerifier v = createVerifier(events.get(0));\n+        EventVerifier v = createVerifier(events.getFirst());\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/configuration\/GCYoungGenerationConfigurationEventTester.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,1 @@\n-        GCConfigurationEventVerifier verifier = new GCConfigurationEventVerifier(events.get(0));\n+        GCConfigurationEventVerifier verifier = new GCConfigurationEventVerifier(events.getFirst());\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/configuration\/TestGCConfigurationEvent.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,1 @@\n-        DefaultGCConfigurationVerifier verifier = new DefaultGCConfigurationVerifier(events.get(0));\n+        DefaultGCConfigurationVerifier verifier = new DefaultGCConfigurationVerifier(events.getFirst());\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/configuration\/TestGCConfigurationEventWithDefaultPauseTarget.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-        GCSurvivorConfigurationEventVerifier verifier = new GCSurvivorConfigurationEventVerifier(events.get(0));\n+        GCSurvivorConfigurationEventVerifier verifier = new GCSurvivorConfigurationEventVerifier(events.getFirst());\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/configuration\/TestGCSurvivorConfigurationEvent.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,1 @@\n-        GCTLABConfigurationEventVerifier verifier = new GCTLABConfigurationEventVerifier(events.get(0));\n+        GCTLABConfigurationEventVerifier verifier = new GCTLABConfigurationEventVerifier(events.getFirst());\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/configuration\/TestGCTLABConfigurationEvent.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -160,1 +160,1 @@\n-        if (!(frames.get(0).getMethod().getName().equals(DIVER_FRAME_NAME))) {\n+        if (!(frames.getFirst().getMethod().getName().equals(DIVER_FRAME_NAME))) {\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/detailed\/StressAllocationGCEvents.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-            RecordedEvent event = events.get(0);\n+            RecordedEvent event = events.getFirst();\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/detailed\/TestGCHeapMemoryPoolUsageEvent.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-            RecordedEvent event = events.get(0);\n+            RecordedEvent event = events.getFirst();\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/detailed\/TestGCHeapMemoryUsageEvent.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -91,1 +91,1 @@\n-        var event = all.get(0);\n+        var event = all.getFirst();\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/detailed\/TestGCLockerEvent.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -178,3 +178,3 @@\n-            assertEquals(events.get(0).getEventType().getName(), \"jdk.Deserialization\");\n-            assertFilterConfigured(true).accept(events.get(0));\n-            assertFilterStatus(expectedValue).accept(events.get(0));\n+            assertEquals(events.getFirst().getEventType().getName(), \"jdk.Deserialization\");\n+            assertFilterConfigured(true).accept(events.getFirst());\n+            assertFilterStatus(expectedValue).accept(events.getFirst());\n@@ -205,3 +205,3 @@\n-            assertEquals(events.get(0).getEventType().getName(), \"jdk.Deserialization\");\n-            assertFilterConfigured(true).accept(events.get(0));\n-            assertFilterStatus(expectedValue).accept(events.get(0));\n+            assertEquals(events.getFirst().getEventType().getName(), \"jdk.Deserialization\");\n+            assertFilterConfigured(true).accept(events.getFirst());\n+            assertFilterStatus(expectedValue).accept(events.getFirst());\n@@ -227,4 +227,4 @@\n-            assertEquals(events.get(0).getEventType().getName(), \"jdk.Deserialization\");\n-            assertFilterConfigured(true).accept(events.get(0));\n-            assertExceptionType(XYZException.class).accept(events.get(0));\n-            assertExceptionMessage(\"I am a bad filter!!!\").accept(events.get(0));\n+            assertEquals(events.getFirst().getEventType().getName(), \"jdk.Deserialization\");\n+            assertFilterConfigured(true).accept(events.getFirst());\n+            assertExceptionType(XYZException.class).accept(events.getFirst());\n+            assertExceptionMessage(\"I am a bad filter!!!\").accept(events.getFirst());\n@@ -431,2 +431,2 @@\n-            assertFilterConfigured(true).accept(events.get(0));\n-            assertFilterStatus(\"REJECTED\").accept(events.get(0));\n+            assertFilterConfigured(true).accept(events.getFirst());\n+            assertFilterStatus(\"REJECTED\").accept(events.getFirst());\n","filename":"test\/jdk\/jdk\/jfr\/event\/io\/TestDeserializationEvent.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -124,1 +124,1 @@\n-        return frames.get(0).getMethod().getName();\n+        return frames.getFirst().getMethod().getName();\n@@ -147,1 +147,1 @@\n-            String firstMethod = frames.get(frames.size() - 1).getMethod().getName();\n+            String firstMethod = frames.getLast().getMethod().getName();\n","filename":"test\/jdk\/jdk\/jfr\/event\/profiling\/TestFullStackTrace.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-        RecordedEvent ev = events.get(0);\n+        RecordedEvent ev = events.getFirst();\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestActiveRecordingEvent.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-            RecordedEvent e = events.get(0);\n+            RecordedEvent e = events.getFirst();\n@@ -107,1 +107,1 @@\n-            RecordedEvent e = events.get(0);\n+            RecordedEvent e = events.getFirst();\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestAgentEvent.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -119,1 +119,1 @@\n-        RecordedEvent event = events.get(0);\n+        RecordedEvent event = events.getFirst();\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestClassLoadingStatisticsEvent.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -84,1 +84,1 @@\n-        RecordedEvent e1 = events.get(0);\n+        RecordedEvent e1 = events.getFirst();\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestClassRedefinition.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -105,1 +105,1 @@\n-                RecordedFrame topFrame = frames.get(0);\n+                RecordedFrame topFrame = frames.getFirst();\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestExceptionEvents.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -153,2 +153,2 @@\n-        long firstSample = javaHeapCommitted.get(0);\n-        long lastSample = javaHeapCommitted.get(javaHeapCommitted.size() - 1);\n+        long firstSample = javaHeapCommitted.getFirst();\n+        long lastSample = javaHeapCommitted.getLast();\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestNativeMemoryUsageEvents.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -82,1 +82,1 @@\n-        RecordedEvent event = events.get(0);\n+        RecordedEvent event = events.getFirst();\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestRedefineClasses.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -87,1 +87,1 @@\n-        RecordedEvent event = events.get(0);\n+        RecordedEvent event = events.getFirst();\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestRetransformClasses.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,1 +117,1 @@\n-        RecordedEvent event = filteredEvents.get(0);\n+        RecordedEvent event = filteredEvents.getFirst();\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestShutdownEvent.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -91,1 +91,1 @@\n-            throw testExceptions.get(0);\n+            throw testExceptions.getFirst();\n","filename":"test\/jdk\/jdk\/jfr\/jcmd\/TestJcmdConfigure.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -113,3 +113,1 @@\n-        List<TestRecording> reversed = new ArrayList<>(recs);\n-        Collections.reverse(reversed);\n-        for (TestRecording r : reversed) {\n+        for (TestRecording r : recs.reversed()) {\n","filename":"test\/jdk\/jdk\/jfr\/jcmd\/TestJcmdDumpLimited.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,1 +69,1 @@\n-        Recording r = recordings.get(0);\n+        Recording r = recordings.getFirst();\n","filename":"test\/jdk\/jdk\/jfr\/jcmd\/TestJcmdStartPathToGCRoots.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,1 @@\n-        Configuration config = Configuration.getConfigurations().get(0);\n+        Configuration config = Configuration.getConfigurations().getFirst();\n","filename":"test\/jdk\/jdk\/jfr\/jmx\/TestPredefinedConfigurationInvalid.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,1 +61,1 @@\n-                JmxHelper.verifyEquals(recs.get(0), snapshot);\n+                JmxHelper.verifyEquals(recs.getFirst(), snapshot);\n@@ -70,1 +70,1 @@\n-            JmxHelper.verifyEquals(recs.get(0), snapshot);\n+            JmxHelper.verifyEquals(recs.getFirst(), snapshot);\n","filename":"test\/jdk\/jdk\/jfr\/jmx\/TestSnapshot.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -156,1 +156,1 @@\n-            System.out.printf(\"Found event %s%n\", events.get(0).getEventType().getName());\n+            System.out.printf(\"Found event %s%n\", events.getFirst().getEventType().getName());\n","filename":"test\/jdk\/jdk\/jfr\/jvm\/TestDumpOnCrash.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-            RecordedEvent event = events.get(0);\n+            RecordedEvent event = events.getFirst();\n","filename":"test\/jdk\/jdk\/jfr\/jvm\/TestPrimitiveClasses.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,1 +63,1 @@\n-            Path currRoot = searchPaths.remove(searchPaths.size() - 1);\n+            Path currRoot = searchPaths.removeLast();\n","filename":"test\/jdk\/jdk\/jfr\/startupargs\/StartupHelper.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -87,1 +87,1 @@\n-        Map<String, String> currentSettings = rs.get(0).getSettings();\n+        Map<String, String> currentSettings = rs.getFirst().getSettings();\n","filename":"test\/jdk\/jdk\/jfr\/startupargs\/TestEventSettings.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -73,2 +73,2 @@\n-            System.out.println(events.get(0));\n-            RecordedEvent e = events.get(0);\n+            System.out.println(events.getFirst());\n+            RecordedEvent e = events.getFirst();\n","filename":"test\/jdk\/jdk\/jfr\/threading\/TestNestedVirtualThreads.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}