{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -181,1 +181,1 @@\n-     * [RFC5280].  If more than one identity of a given type is present in\n+     * [RFC6125].  If more than one identity of a given type is present in\n@@ -265,1 +265,1 @@\n-     * The matching is performed as per RFC 2818 rules for TLS and\n+     * The matching is performed as per RFC 2818\/6125 rules for TLS and\n@@ -302,3 +302,1 @@\n-        if (checkType == TYPE_TLS) {\n-            return matchAllWildcards(name, template);\n-        } else if (checkType == TYPE_LDAP) {\n+        if (checkType == TYPE_TLS || checkType == TYPE_LDAP) {\n@@ -374,31 +372,0 @@\n-    \/**\n-     * Returns true if name matches against template.<p>\n-     *\n-     * According to RFC 2818, section 3.1 -\n-     * Names may contain the wildcard character * which is\n-     * considered to match any single domain name component\n-     * or component fragment.\n-     * E.g., *.a.com matches foo.a.com but not\n-     * bar.foo.a.com. f*.com matches foo.com but not bar.com.\n-     *\/\n-    private static boolean matchAllWildcards(String name,\n-         String template) {\n-        name = name.toLowerCase(Locale.ENGLISH);\n-        template = template.toLowerCase(Locale.ENGLISH);\n-        StringTokenizer nameSt = new StringTokenizer(name, \".\");\n-        StringTokenizer templateSt = new StringTokenizer(template, \".\");\n-\n-        if (nameSt.countTokens() != templateSt.countTokens()) {\n-            return false;\n-        }\n-\n-        while (nameSt.hasMoreTokens()) {\n-            if (!matchWildCards(nameSt.nextToken(),\n-                        templateSt.nextToken())) {\n-                return false;\n-            }\n-        }\n-        return true;\n-    }\n-\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/HostnameChecker.java","additions":4,"deletions":37,"binary":false,"changes":41,"status":"modified"},{"patch":"","filename":"test\/jdk\/sun\/security\/util\/HostnameChecker\/NullHostnameCheck.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/sun\/security\/util\/HostnameMatcher\/NullHostnameCheck.java","status":"renamed"},{"patch":"@@ -0,0 +1,251 @@\n+\/*\n+ * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4514108 7192189\n+ * @summary Verify host name matching behaves as defined in RFC2818 and RFC6125.\n+ * @library \/test\/lib\n+ * @modules java.base\/sun.security.util java.base\/sun.security.x509\n+ *\/\n+\n+import java.security.cert.*;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import jdk.test.lib.security.CertUtils;\n+import sun.security.util.*;\n+import sun.security.x509.X509CertImpl;\n+\n+\/**\n+ * Certificate 1:\n+ *   . no subject alternative names, most specific CN is foo1.com.\n+ *     (also test if serialnumber attribute is ignored)\n+ * <pre>\n+    [\n+    [\n+      Version: V1\n+      Subject: SERIALNUMBER=12 + CN=foo1.com, CN=foo2.com, O=Sun, C=US\n+      Signature Algorithm: SHA1withRSA, OID = 1.2.840.113549.1.1.5\n+\n+      Key:  com.sun.net.ssl.internal.ssl.JSA_RSAPublicKey@1d8957f\n+      Validity: [From: Fri Mar 22 12:22:57 GMT 2002,\n+                   To: Tue Mar 22 12:22:57 GMT 2022]\n+      Issuer: CN=CA, O=Sun, C=US\n+      SerialNumber: [  0  ]\n+\n+    ]\n+      Algorithm: [SHA1withRSA]\n+      Signature:\n+    0000: B8 E1 F8 A8 23 EB C4 E9   F9 03 F6 97 FA DD A2 56  ....#..........V\n+    0010: 06 B6 95 99 68 6B F8 72   6A 27 F4 13 CC 40 06 83  ....hk.rj'...@..\n+    0020: 62 C1 94 72 63 EA 69 FD   78 A2 06 D8 3B F5 D0 2C  b..rc.i.x...;..,\n+    0030: 97 D6 29 84 FA 6F 2E E1   13 6A C7 5D DE 2F 6A 2F  ..)..o...j.].\/j\/\n+    0040: 08 85 43 3B 7D DB C1 AB   1A DC 38 BE F7 4B 6B 82  ..C;......8..Kk.\n+    0050: 84 06 FA 46 82 77 42 A6   47 55 33 63 2B D4 05 2E  ...F.wB.GU3c+...\n+    0060: 76 F5 1B 6A CD 8E B2 B3   83 8E 9D 13 BC 82 0C 4B  v..j...........K\n+    0070: DE 8A 63 B5 EA F1 07 00   C0 7E C9 75 DF 13 FC 34  ..c........u...4\n+\n+    ]\n+ * <\/pre>\n+ *\n+ * Certificate 2:\n+ *   . CN contains IP address, must be ignored.\n+ * <pre>\n+    [\n+    [\n+      Version: V1\n+      Subject: CN=1.2.3.4, O=Sun, C=US\n+      Signature Algorithm: SHA1withRSA, OID = 1.2.840.113549.1.1.5\n+\n+      Key:  com.sun.net.ssl.internal.ssl.JSA_RSAPublicKey@173831b\n+      Validity: [From: Fri Mar 22 12:22:57 GMT 2002,\n+                   To: Tue Mar 22 12:22:57 GMT 2022]\n+      Issuer: CN=CA, O=Sun, C=US\n+      SerialNumber: [    01]\n+\n+    ]\n+      Algorithm: [SHA1withRSA]\n+      Signature:\n+    0000: 15 86 83 1E 79 7F 8B 06   1F E0 BF 79 0F EA 84 D1  ....y......y....\n+    0010: C5 CD 2C D6 9D 4A 36 7C   75 41 E6 0D 8C 1D 65 60  ..,..J6.uA....e`\n+    0020: 0F 53 15 54 41 43 AE F9   E9 54 34 8A 4B B9 39 12  .S.TAC...T4.K.9.\n+    0030: DE 58 21 86 D3 F9 11 6C   4F 72 EF 8C 4B C3 66 FC  .X!....lOr..K.f.\n+    0040: BD AB 87 63 8F 59 1D C3   FE 76 DB B7 76 43 C2 A1  ...c.Y...v..vC..\n+    0050: 4D D7 92 C4 CA C6 DC 59   CA A6 1B 6D FE 01 AC F4  M......Y...m....\n+    0060: 09 86 D8 A1 40 C4 C2 77   BF 53 21 9A 3B 43 2E 9A  ....@..w.S!.;C..\n+    0070: D4 0C BE 85 47 A5 02 35   7D EE 27 11 36 0E 80 14  ....G..5..'.6...\n+\n+    ]\n+ * <\/pre>\n+ *\n+ * Certificate 3:\n+ *   . Contains subject alternative name extension with DNS altfoo1.com,\n+ *     DNS altfoo2.com, IP 5.6.7.8. CNs in subject DN must be ignored.\n+ * <pre>\n+    [\n+    [\n+      Version: V3\n+      Subject: SERIALNUMBER=12 + CN=foo1.com, CN=foo2.com, O=Sun, C=US\n+      Signature Algorithm: SHA1withRSA, OID = 1.2.840.113549.1.1.5\n+\n+      Key:  com.sun.net.ssl.internal.ssl.JSA_RSAPublicKey@18e2b22\n+      Validity: [From: Fri Mar 22 12:22:57 GMT 2002,\n+                   To: Tue Mar 22 12:22:57 GMT 2022]\n+      Issuer: CN=CA, O=Sun, C=US\n+      SerialNumber: [    02]\n+\n+    Certificate Extensions: 1\n+    [1]: ObjectId: 2.5.29.17 Criticality=false\n+    SubjectAlternativeName [\n+    [DNSName: altfoo1.com, DNSName: altfoo2.com, IPAddress: 5.6.7.8]]\n+\n+    ]\n+      Algorithm: [SHA1withRSA]\n+      Signature:\n+    0000: 65 A6 E5 96 4A D5 8F 8D   3E 70 7D 63 BE B1 58 1C  e...J...>p.c..X.\n+    0010: B5 35 EF 7D E8 00 9C 9E   56 E7 E9 52 71 7B BD 35  .5......V..Rq..5\n+    0020: 3D B5 F5 F7 B2 49 A0 E4   23 BB 2A 0A 25 84 0E E2  =....I..#.*.%...\n+    0030: 4B 6D 61 73 D5 C8 F1 0A   EC 2B F2 98 3D 80 F9 DC  Kmas.....+..=...\n+    0040: F5 D1 2A 36 44 EB 59 9A   E9 DF 97 FA AE C0 86 F1  ..*6D.Y.........\n+    0050: 2C 7B 54 21 F2 3A 56 83   0D E0 5A E1 0D FC D5 E2  ,.T!.:V...Z.....\n+    0060: 45 44 ED C8 C6 F8 26 8E   0C 14 ED D0 F7 37 1C 01  ED....&......7..\n+    0070: A5 E2 61 29 5D 14 B3 5A   EF 72 CC 9B 13 05 B0 B1  ..a)]..Z.r......\n+\n+    ]\n+ * <\/pre>\n+ *\n+ * Certificate 4:\n+ *   . SubjAltName contains wildcard char, in the leftmost as well as\n+ *     in the middle component.\n+ * <pre>\n+   [\n+   [\n+    Version: V3\n+    Subject: SERIALNUMBER=12, O=Sun, C=US\n+    Signature Algorithm: SHA1withRSA, OID = 1.2.840.113549.1.1.5\n+\n+    Key:  com.sun.net.ssl.internal.ssl.JSA_RSAPublicKey@17a8bd\n+    Validity: [From: Mon Apr 01 22:32:38 PST 2002,\n+               To: Fri Apr 01 22:32:38 PST 2022]\n+    Issuer: CN=CA, O=Sun, C=US\n+    SerialNumber: [    02]\n+\n+    Certificate Extensions: 1\n+    [1]: ObjectId: 2.5.29.17 Criticality=false\n+    SubjectAlternativeName [\n+\n+    [DNSName: f*.bar.com, DNSName: altfoo.b*.com]]\n+\n+   ]\n+   Algorithm: [SHA1withRSA]\n+   Signature:\n+   0000: BB 9B 00 DB C9 94 15 34   03 9F 28 59 20 4D 10 63  .......4..(Y M.c\n+   0010: 63 6A F5 C8 56 7B 7C CC   E7 06 7E 1E BE 0B 84 92  cj..V...........\n+   0020: 05 0A 12 5E 21 5D 70 03   DA 27 0B 4E 39 67 FC 8D  ...^!]p..'.N9g..\n+   0030: D6 FC A6 5B F5 CA F1 4C   75 53 33 E3 4F 30 88 68  ...[...LuS3.O0.h\n+   0040: B8 F1 2C DF C2 A8 71 A7   37 55 66 7C 51 23 BB C2  ..,...q.7Uf.Q#..\n+   0050: 25 70 EA EE 44 ED 32 63   56 E0 BA C8 94 36 87 E2  %p..D.2cV....6..\n+   0060: 94 00 2A 3D 4C 46 78 E9   2B 20 9F 73 3C 8E 92 2E  ..*=LFx.+ .s<...\n+   0070: 66 85 C6 27 3A 84 21 94   82 93 B1 A4 94 B6 DE 2F  f..':.!........\/\n+\n+   ]\n+ * <\/pre>\n+ *\n+ *\/\n+\n+public class TestHostnameChecker {\n+\n+    public static void main(String[] args) throws Exception {\n+        X509Certificate cert1 = CertUtils.getCertFromFile(\"cert1.crt\");\n+        X509Certificate cert2 = CertUtils.getCertFromFile(\"cert2.crt\");\n+        X509Certificate cert3 = CertUtils.getCertFromFile(\"cert3.crt\");\n+        X509Certificate cert4 = CertUtils.getCertFromFile(\"cert4.crt\");\n+        X509Certificate cert5 = CertUtils.getCertFromFile(\"cert5.crt\");\n+\n+        HostnameChecker checker = HostnameChecker.getInstance(\n+                HostnameChecker.TYPE_TLS);\n+        System.out.println(\"TLS tests.........\");\n+        System.out.println(\"==================\");\n+        check(checker, \"foo1.com\", cert1, true);\n+        check(checker, \"foo2.com\", cert1, false);\n+        check(checker, \"1.2.3.4\", cert2, false);\n+        check(checker, \"foo1.com\", cert3, false);\n+        check(checker, \"foo2.com\", cert3, false);\n+        check(checker, \"altfoo1.com\", cert3, true);\n+        check(checker, \"altfoo2.com\", cert3, true);\n+        check(checker, \"5.6.7.8\", cert3, true);\n+        check(checker, \"foo.bar.com\", cert4, true);\n+        check(checker, \"altfoo.bar.com\", cert4, false);\n+        check(checker, \"2001:db8:3c4d:15::1a2f:1a2b\", cert5, true);\n+        check(checker, \"2001:0db8:3c4d:0015:0000:0000:1a2f:1a2b\", cert5, true);\n+        check(checker, \"2002:db8:3c4d:15::1a2f:1a2b\", cert5, false);\n+        check(checker, \"foo.bar.example.net\", mock(\"foo.*.example.net\"), false);\n+        check(checker, \"baz1.example.net\", mock(\"baz*.example.net\"), true);\n+        check(checker, \"foobaz.example.net\", mock(\"*baz.example.net\"), true);\n+        check(checker, \"buzz.example.net\", mock(\"b*z.example.net\"), true);\n+        check(checker, \"公司.example.net\", mock(\"xn--5*.example.net\"), false);\n+        check(checker, \"公司.江利子.example.net\",\n+                       mock(\"*.xn--kcry6tjko.example.net\"), true);\n+\n+        checker = HostnameChecker.getInstance(\n+                                HostnameChecker.TYPE_LDAP);\n+        System.out.println();\n+        System.out.println(\"LDAP tests.........\");\n+        System.out.println(\"==================\");\n+        check(checker, \"foo1.com\", cert1, true);\n+        check(checker, \"foo2.com\", cert1, false);\n+        check(checker, \"foo1.com\", cert3, false);\n+        check(checker, \"foo2.com\", cert3, false);\n+        check(checker, \"altfoo1.com\", cert3, true);\n+        check(checker, \"altfoo2.com\", cert3, true);\n+        check(checker, \"5.6.7.8\", cert3, true);\n+        check(checker, \"foo.bar.com\", cert4, true);\n+        check(checker, \"altfoo.bar.com\", cert4, false);\n+    }\n+\n+    private static X509Certificate mock(String domain) {\n+        return new X509CertImpl() {\n+            @Override\n+            public Collection<List<?>> getSubjectAlternativeNames() {\n+                return List.of(List.of(2, domain));\n+            }\n+        };\n+    }\n+\n+    private static void check(HostnameChecker checker, String name,\n+                 X509Certificate cert, boolean expectedResult)\n+                 throws Exception {\n+        try {\n+            checker.match(name, cert);\n+            if (expectedResult == false) {\n+                throw new Exception(\"Passed invalid test: \" + name);\n+            }\n+        } catch (CertificateException e) {\n+            if (expectedResult == true) {\n+                throw new Exception(\"Failed valid test: \" + name, e);\n+            }\n+        }\n+        System.out.println(\"OK: \" + name);\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/util\/HostnameChecker\/TestHostnameChecker.java","additions":251,"deletions":0,"binary":false,"changes":251,"status":"added"},{"patch":"","filename":"test\/jdk\/sun\/security\/util\/HostnameChecker\/cert1.crt","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/sun\/security\/util\/HostnameMatcher\/cert1.crt","status":"renamed"},{"patch":"","filename":"test\/jdk\/sun\/security\/util\/HostnameChecker\/cert2.crt","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/sun\/security\/util\/HostnameMatcher\/cert2.crt","status":"renamed"},{"patch":"","filename":"test\/jdk\/sun\/security\/util\/HostnameChecker\/cert3.crt","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/sun\/security\/util\/HostnameMatcher\/cert3.crt","status":"renamed"},{"patch":"","filename":"test\/jdk\/sun\/security\/util\/HostnameChecker\/cert4.crt","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/sun\/security\/util\/HostnameMatcher\/cert4.crt","status":"renamed"},{"patch":"","filename":"test\/jdk\/sun\/security\/util\/HostnameChecker\/cert5.crt","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/sun\/security\/util\/HostnameMatcher\/cert5.crt","status":"renamed"},{"patch":"@@ -1,232 +0,0 @@\n-\/*\n- * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4514108\n- * @summary Verify host name matching behaves as defined in RFC2818.\n- * @library \/test\/lib\n- * @modules java.base\/sun.security.util\n- *\/\n-\n-import java.security.cert.*;\n-\n-import jdk.test.lib.security.CertUtils;\n-import sun.security.util.*;\n-\n-\/**\n- * Certificate 1:\n- *   . no subject alternative names, most specific CN is foo1.com.\n- *     (also test if serialnumber attribute is ignored)\n- * <pre>\n-    [\n-    [\n-      Version: V1\n-      Subject: SERIALNUMBER=12 + CN=foo1.com, CN=foo2.com, O=Sun, C=US\n-      Signature Algorithm: SHA1withRSA, OID = 1.2.840.113549.1.1.5\n-\n-      Key:  com.sun.net.ssl.internal.ssl.JSA_RSAPublicKey@1d8957f\n-      Validity: [From: Fri Mar 22 12:22:57 GMT 2002,\n-                   To: Tue Mar 22 12:22:57 GMT 2022]\n-      Issuer: CN=CA, O=Sun, C=US\n-      SerialNumber: [  0  ]\n-\n-    ]\n-      Algorithm: [SHA1withRSA]\n-      Signature:\n-    0000: B8 E1 F8 A8 23 EB C4 E9   F9 03 F6 97 FA DD A2 56  ....#..........V\n-    0010: 06 B6 95 99 68 6B F8 72   6A 27 F4 13 CC 40 06 83  ....hk.rj'...@..\n-    0020: 62 C1 94 72 63 EA 69 FD   78 A2 06 D8 3B F5 D0 2C  b..rc.i.x...;..,\n-    0030: 97 D6 29 84 FA 6F 2E E1   13 6A C7 5D DE 2F 6A 2F  ..)..o...j.].\/j\/\n-    0040: 08 85 43 3B 7D DB C1 AB   1A DC 38 BE F7 4B 6B 82  ..C;......8..Kk.\n-    0050: 84 06 FA 46 82 77 42 A6   47 55 33 63 2B D4 05 2E  ...F.wB.GU3c+...\n-    0060: 76 F5 1B 6A CD 8E B2 B3   83 8E 9D 13 BC 82 0C 4B  v..j...........K\n-    0070: DE 8A 63 B5 EA F1 07 00   C0 7E C9 75 DF 13 FC 34  ..c........u...4\n-\n-    ]\n- * <\/pre>\n- *\n- * Certificate 2:\n- *   . CN contains IP address, must be ignored.\n- * <pre>\n-    [\n-    [\n-      Version: V1\n-      Subject: CN=1.2.3.4, O=Sun, C=US\n-      Signature Algorithm: SHA1withRSA, OID = 1.2.840.113549.1.1.5\n-\n-      Key:  com.sun.net.ssl.internal.ssl.JSA_RSAPublicKey@173831b\n-      Validity: [From: Fri Mar 22 12:22:57 GMT 2002,\n-                   To: Tue Mar 22 12:22:57 GMT 2022]\n-      Issuer: CN=CA, O=Sun, C=US\n-      SerialNumber: [    01]\n-\n-    ]\n-      Algorithm: [SHA1withRSA]\n-      Signature:\n-    0000: 15 86 83 1E 79 7F 8B 06   1F E0 BF 79 0F EA 84 D1  ....y......y....\n-    0010: C5 CD 2C D6 9D 4A 36 7C   75 41 E6 0D 8C 1D 65 60  ..,..J6.uA....e`\n-    0020: 0F 53 15 54 41 43 AE F9   E9 54 34 8A 4B B9 39 12  .S.TAC...T4.K.9.\n-    0030: DE 58 21 86 D3 F9 11 6C   4F 72 EF 8C 4B C3 66 FC  .X!....lOr..K.f.\n-    0040: BD AB 87 63 8F 59 1D C3   FE 76 DB B7 76 43 C2 A1  ...c.Y...v..vC..\n-    0050: 4D D7 92 C4 CA C6 DC 59   CA A6 1B 6D FE 01 AC F4  M......Y...m....\n-    0060: 09 86 D8 A1 40 C4 C2 77   BF 53 21 9A 3B 43 2E 9A  ....@..w.S!.;C..\n-    0070: D4 0C BE 85 47 A5 02 35   7D EE 27 11 36 0E 80 14  ....G..5..'.6...\n-\n-    ]\n- * <\/pre>\n- *\n- * Certificate 3:\n- *   . Contains subject alternative name extension with DNS altfoo1.com,\n- *     DNS altfoo2.com, IP 5.6.7.8. CNs in subject DN must be ignored.\n- * <pre>\n-    [\n-    [\n-      Version: V3\n-      Subject: SERIALNUMBER=12 + CN=foo1.com, CN=foo2.com, O=Sun, C=US\n-      Signature Algorithm: SHA1withRSA, OID = 1.2.840.113549.1.1.5\n-\n-      Key:  com.sun.net.ssl.internal.ssl.JSA_RSAPublicKey@18e2b22\n-      Validity: [From: Fri Mar 22 12:22:57 GMT 2002,\n-                   To: Tue Mar 22 12:22:57 GMT 2022]\n-      Issuer: CN=CA, O=Sun, C=US\n-      SerialNumber: [    02]\n-\n-    Certificate Extensions: 1\n-    [1]: ObjectId: 2.5.29.17 Criticality=false\n-    SubjectAlternativeName [\n-    [DNSName: altfoo1.com, DNSName: altfoo2.com, IPAddress: 5.6.7.8]]\n-\n-    ]\n-      Algorithm: [SHA1withRSA]\n-      Signature:\n-    0000: 65 A6 E5 96 4A D5 8F 8D   3E 70 7D 63 BE B1 58 1C  e...J...>p.c..X.\n-    0010: B5 35 EF 7D E8 00 9C 9E   56 E7 E9 52 71 7B BD 35  .5......V..Rq..5\n-    0020: 3D B5 F5 F7 B2 49 A0 E4   23 BB 2A 0A 25 84 0E E2  =....I..#.*.%...\n-    0030: 4B 6D 61 73 D5 C8 F1 0A   EC 2B F2 98 3D 80 F9 DC  Kmas.....+..=...\n-    0040: F5 D1 2A 36 44 EB 59 9A   E9 DF 97 FA AE C0 86 F1  ..*6D.Y.........\n-    0050: 2C 7B 54 21 F2 3A 56 83   0D E0 5A E1 0D FC D5 E2  ,.T!.:V...Z.....\n-    0060: 45 44 ED C8 C6 F8 26 8E   0C 14 ED D0 F7 37 1C 01  ED....&......7..\n-    0070: A5 E2 61 29 5D 14 B3 5A   EF 72 CC 9B 13 05 B0 B1  ..a)]..Z.r......\n-\n-    ]\n- * <\/pre>\n- *\n- * Certificate 4:\n- *   . SubjAltName contains wildcard char, in the leftmost as well as\n- *     in the middle component.\n- * <pre>\n-   [\n-   [\n-    Version: V3\n-    Subject: SERIALNUMBER=12, O=Sun, C=US\n-    Signature Algorithm: SHA1withRSA, OID = 1.2.840.113549.1.1.5\n-\n-    Key:  com.sun.net.ssl.internal.ssl.JSA_RSAPublicKey@17a8bd\n-    Validity: [From: Mon Apr 01 22:32:38 PST 2002,\n-               To: Fri Apr 01 22:32:38 PST 2022]\n-    Issuer: CN=CA, O=Sun, C=US\n-    SerialNumber: [    02]\n-\n-    Certificate Extensions: 1\n-    [1]: ObjectId: 2.5.29.17 Criticality=false\n-    SubjectAlternativeName [\n-\n-    [DNSName: f*.bar.com, DNSName: altfoo.b*.com]]\n-\n-   ]\n-   Algorithm: [SHA1withRSA]\n-   Signature:\n-   0000: BB 9B 00 DB C9 94 15 34   03 9F 28 59 20 4D 10 63  .......4..(Y M.c\n-   0010: 63 6A F5 C8 56 7B 7C CC   E7 06 7E 1E BE 0B 84 92  cj..V...........\n-   0020: 05 0A 12 5E 21 5D 70 03   DA 27 0B 4E 39 67 FC 8D  ...^!]p..'.N9g..\n-   0030: D6 FC A6 5B F5 CA F1 4C   75 53 33 E3 4F 30 88 68  ...[...LuS3.O0.h\n-   0040: B8 F1 2C DF C2 A8 71 A7   37 55 66 7C 51 23 BB C2  ..,...q.7Uf.Q#..\n-   0050: 25 70 EA EE 44 ED 32 63   56 E0 BA C8 94 36 87 E2  %p..D.2cV....6..\n-   0060: 94 00 2A 3D 4C 46 78 E9   2B 20 9F 73 3C 8E 92 2E  ..*=LFx.+ .s<...\n-   0070: 66 85 C6 27 3A 84 21 94   82 93 B1 A4 94 B6 DE 2F  f..':.!........\/\n-\n-   ]\n- * <\/pre>\n- *\n- *\/\n-\n-public class TestHostnameChecker {\n-\n-    public static void main(String[] args) throws Exception {\n-        X509Certificate cert1 = CertUtils.getCertFromFile(\"cert1.crt\");\n-        X509Certificate cert2 = CertUtils.getCertFromFile(\"cert2.crt\");\n-        X509Certificate cert3 = CertUtils.getCertFromFile(\"cert3.crt\");\n-        X509Certificate cert4 = CertUtils.getCertFromFile(\"cert4.crt\");\n-        X509Certificate cert5 = CertUtils.getCertFromFile(\"cert5.crt\");\n-\n-        HostnameChecker checker = HostnameChecker.getInstance(\n-                HostnameChecker.TYPE_TLS);\n-        System.out.println(\"TLS tests.........\");\n-        System.out.println(\"==================\");\n-        check(checker, \"foo1.com\", cert1, true);\n-        check(checker, \"foo2.com\", cert1, false);\n-        check(checker, \"1.2.3.4\", cert2, false);\n-        check(checker, \"foo1.com\", cert3, false);\n-        check(checker, \"foo2.com\", cert3, false);\n-        check(checker, \"altfoo1.com\", cert3, true);\n-        check(checker, \"altfoo2.com\", cert3, true);\n-        check(checker, \"5.6.7.8\", cert3, true);\n-        check(checker, \"foo.bar.com\", cert4, true);\n-        check(checker, \"altfoo.bar.com\", cert4, true);\n-        check(checker, \"2001:db8:3c4d:15::1a2f:1a2b\", cert5, true);\n-        check(checker, \"2001:0db8:3c4d:0015:0000:0000:1a2f:1a2b\", cert5, true);\n-        check(checker, \"2002:db8:3c4d:15::1a2f:1a2b\", cert5, false);\n-\n-        checker = HostnameChecker.getInstance(\n-                                HostnameChecker.TYPE_LDAP);\n-        System.out.println();\n-        System.out.println(\"LDAP tests.........\");\n-        System.out.println(\"==================\");\n-        check(checker, \"foo1.com\", cert1, true);\n-        check(checker, \"foo2.com\", cert1, false);\n-        check(checker, \"foo1.com\", cert3, false);\n-        check(checker, \"foo2.com\", cert3, false);\n-        check(checker, \"altfoo1.com\", cert3, true);\n-        check(checker, \"altfoo2.com\", cert3, true);\n-        check(checker, \"5.6.7.8\", cert3, true);\n-        check(checker, \"foo.bar.com\", cert4, true);\n-        check(checker, \"altfoo.bar.com\", cert4, false);\n-    }\n-\n-    private static void check(HostnameChecker checker, String name,\n-                 X509Certificate cert, boolean expectedResult)\n-                 throws Exception {\n-        try {\n-            checker.match(name, cert);\n-            if (expectedResult == false) {\n-                throw new Exception(\"Passed invalid test: \" + name);\n-            }\n-        } catch (CertificateException e) {\n-            if (expectedResult == true) {\n-                throw e;\n-            }\n-        }\n-        System.out.println(\"OK: \" + name);\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/util\/HostnameMatcher\/TestHostnameChecker.java","additions":0,"deletions":232,"binary":false,"changes":232,"status":"deleted"}]}