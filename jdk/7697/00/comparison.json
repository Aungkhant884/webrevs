{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -181,1 +181,1 @@\n-     * [RFC5280].  If more than one identity of a given type is present in\n+     * [RFC6125].  If more than one identity of a given type is present in\n@@ -265,1 +265,1 @@\n-     * The matching is performed as per RFC 2818 rules for TLS and\n+     * The matching is performed as per RFC 2818\/6125 rules for TLS and\n@@ -302,3 +302,1 @@\n-        if (checkType == TYPE_TLS) {\n-            return matchAllWildcards(name, template);\n-        } else if (checkType == TYPE_LDAP) {\n+        if (checkType == TYPE_TLS || checkType == TYPE_LDAP) {\n@@ -374,31 +372,0 @@\n-    \/**\n-     * Returns true if name matches against template.<p>\n-     *\n-     * According to RFC 2818, section 3.1 -\n-     * Names may contain the wildcard character * which is\n-     * considered to match any single domain name component\n-     * or component fragment.\n-     * E.g., *.a.com matches foo.a.com but not\n-     * bar.foo.a.com. f*.com matches foo.com but not bar.com.\n-     *\/\n-    private static boolean matchAllWildcards(String name,\n-         String template) {\n-        name = name.toLowerCase(Locale.ENGLISH);\n-        template = template.toLowerCase(Locale.ENGLISH);\n-        StringTokenizer nameSt = new StringTokenizer(name, \".\");\n-        StringTokenizer templateSt = new StringTokenizer(template, \".\");\n-\n-        if (nameSt.countTokens() != templateSt.countTokens()) {\n-            return false;\n-        }\n-\n-        while (nameSt.hasMoreTokens()) {\n-            if (!matchWildCards(nameSt.nextToken(),\n-                        templateSt.nextToken())) {\n-                return false;\n-            }\n-        }\n-        return true;\n-    }\n-\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/HostnameChecker.java","additions":4,"deletions":37,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 7192189\n+ * @summary Check that wildcarded domains conform to RFC 6125\n+ * @modules java.base\/sun.security.util java.base\/sun.security.x509\n+ * @run main Wildcard\n+ *\/\n+\n+import java.security.cert.X509Certificate;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import sun.security.util.HostnameChecker;\n+import static sun.security.util.HostnameChecker.TYPE_TLS;\n+import sun.security.x509.X509CertImpl;\n+\n+public class Wildcard {\n+\n+    public static void main(String[] args) throws Exception {\n+        validateDomain(false, \"foo.bar.example.net\", \"foo.*.example.net\");\n+        validateDomain(true, \"baz1.example.net\", \"baz*.example.net\");\n+        validateDomain(true, \"foobaz.example.net\", \"*baz.example.net\");\n+        validateDomain(true, \"buzz.example.net\", \"b*z.example.net\");\n+        validateDomain(false, \"公司.example.net\", \"xn--5*.example.net\");\n+        validateDomain(true, \"公司.江利子.example.net\",\n+                       \"*.xn--kcry6tjko.example.net\");\n+    }\n+\n+    static X509Certificate mock(String domain) {\n+        return new X509CertImpl() {\n+            @Override\n+            public Collection<List<?>> getSubjectAlternativeNames() {\n+                return List.of(List.of(2, domain));\n+            }\n+        };\n+    }\n+\n+    static void validateDomain(boolean expected,\n+                               String domain, String wildcardedDomain)\n+        throws Exception {\n+\n+        System.out.println(\"Matching domain \" + domain +\n+            \" against wildcarded domain \" + wildcardedDomain);\n+        HostnameChecker checker = HostnameChecker.getInstance(TYPE_TLS);\n+        try {\n+            checker.match(domain, mock(wildcardedDomain));\n+        } catch (Exception e) {\n+            if (expected) {\n+                throw new Exception(\"unexpectedly failed match\", e);\n+            }\n+            return;\n+        }\n+        if (!expected) {\n+            throw new Exception(\"unexpectedly passed match\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/util\/HostnameChecker\/Wildcard.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,2 @@\n- * @bug 4514108\n- * @summary Verify host name matching behaves as defined in RFC2818.\n+ * @bug 4514108 7192189\n+ * @summary Verify host name matching behaves as defined in RFC2818 and RFC6125.\n@@ -196,1 +196,0 @@\n-        check(checker, \"altfoo.bar.com\", cert4, true);\n","filename":"test\/jdk\/sun\/security\/util\/HostnameMatcher\/TestHostnameChecker.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"}]}