{"files":[{"patch":"@@ -46,1 +46,0 @@\n-import java.util.LinkedHashSet;\n@@ -1047,1 +1046,1 @@\n-            LinkedHashSet<String> allAuths = new LinkedHashSet<>();\n+            List<String> allAuths = new ArrayList<>();\n@@ -1056,0 +1055,1 @@\n+                checkedKeyTypes.add(ss.keyAlgorithm);\n@@ -1069,1 +1069,0 @@\n-                    checkedKeyTypes.add(ss.keyAlgorithm);\n@@ -1079,1 +1078,0 @@\n-                    checkedKeyTypes.add(ss.keyAlgorithm);\n@@ -1089,2 +1087,1 @@\n-                    SSLLogger.warning(\n-                            \"Unavailable authentication scheme: \" + allAuths);\n+                    SSLLogger.warning(\"No available authentication scheme\");\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/CertificateMessage.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import java.util.LinkedHashSet;\n@@ -735,1 +734,1 @@\n-            LinkedHashSet<String> allAuths = new LinkedHashSet<>();\n+            List<String> allAuths = new ArrayList<>();\n@@ -744,0 +743,1 @@\n+                checkedKeyTypes.add(ss.keyAlgorithm);\n@@ -757,1 +757,0 @@\n-                    checkedKeyTypes.add(ss.keyAlgorithm);\n@@ -767,1 +766,0 @@\n-                    checkedKeyTypes.add(ss.keyAlgorithm);\n@@ -777,2 +775,1 @@\n-                    SSLLogger.warning(\n-                            \"Unavailable authentication scheme: \" + allAuths);\n+                    SSLLogger.warning(\"No available authentication scheme\");\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/CertificateRequest.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-import java.util.List;\n@@ -41,2 +40,0 @@\n-import javax.net.ssl.SSLEngine;\n-import javax.net.ssl.SSLSocket;\n@@ -49,2 +46,1 @@\n-    RSA         (\"RSA\",         new X509PossessionGenerator(\n-                                    new String[]{\"RSA\"})),\n+    RSA         (\"RSA\",         \"RSA\"),\n@@ -53,2 +49,1 @@\n-    RSASSA_PSS  (\"RSASSA-PSS\",  new X509PossessionGenerator(\n-                                    new String[] {\"RSASSA-PSS\"})),\n+    RSASSA_PSS  (\"RSASSA-PSS\",  \"RSASSA-PSS\"),\n@@ -61,2 +56,1 @@\n-    RSA_OR_PSS  (\"RSA_OR_PSS\",  new X509PossessionGenerator(\n-                                    new String[] {\"RSA\", \"RSASSA-PSS\"})),\n+    RSA_OR_PSS  (\"RSA_OR_PSS\",  \"RSA\", \"RSASSA-PSS\"),\n@@ -65,2 +59,1 @@\n-    DSA         (\"DSA\",         new X509PossessionGenerator(\n-                                    new String[] {\"DSA\"})),\n+    DSA         (\"DSA\",         \"DSA\"),\n@@ -69,2 +62,1 @@\n-    EC          (\"EC\",          new X509PossessionGenerator(\n-                                    new String[] {\"EC\"})),\n+    EC          (\"EC\",          \"EC\"),\n@@ -72,2 +64,1 @@\n-    EDDSA       (\"EdDSA\",       new X509PossessionGenerator(\n-                                    new String[] {\"EdDSA\"}));\n+    EDDSA       (\"EdDSA\",       \"EdDSA\");\n@@ -75,2 +66,2 @@\n-    final String keyType;\n-    final SSLPossessionGenerator possessionGenerator;\n+    final String keyAlgorithm;\n+    final String[] keyTypes;\n@@ -78,4 +69,4 @@\n-    private X509Authentication(String keyType,\n-            SSLPossessionGenerator possessionGenerator) {\n-        this.keyType = keyType;\n-        this.possessionGenerator = possessionGenerator;\n+    private X509Authentication(String keyAlgorithm,\n+            String... keyTypes) {\n+        this.keyAlgorithm = keyAlgorithm;\n+        this.keyTypes = keyTypes;\n@@ -86,1 +77,1 @@\n-            if (au.keyType.equals(signatureScheme.keyAlgorithm)) {\n+            if (au.keyAlgorithm.equals(signatureScheme.keyAlgorithm)) {\n@@ -96,1 +87,1 @@\n-        return possessionGenerator.createPossession(handshakeContext);\n+        return X509Authentication.createPossession(handshakeContext, keyTypes);\n@@ -200,14 +191,0 @@\n-    private static final\n-            class X509PossessionGenerator implements SSLPossessionGenerator {\n-        private final String[] keyTypes;\n-\n-        private X509PossessionGenerator(String[] keyTypes) {\n-            this.keyTypes = keyTypes;\n-        }\n-\n-        @Override\n-        public SSLPossession createPossession(HandshakeContext context) {\n-            return X509Authentication.createPossession(context, keyTypes);\n-        }\n-    }\n-\n@@ -230,1 +207,1 @@\n-        if (chc.conContext.transport instanceof SSLSocketImpl) {\n+        if (chc.conContext.transport instanceof SSLSocketImpl socket) {\n@@ -235,2 +212,2 @@\n-                    (SSLSocket) chc.conContext.transport);\n-        } else if (chc.conContext.transport instanceof SSLEngineImpl) {\n+                    socket);\n+        } else if (chc.conContext.transport instanceof SSLEngineImpl engine) {\n@@ -241,1 +218,1 @@\n-                    (SSLEngine) chc.conContext.transport);\n+                    engine);\n@@ -270,2 +247,12 @@\n-        PublicKey clientPublicKey = clientCerts[0].getPublicKey();\n-        if (!clientPrivateKey.getAlgorithm().equals(clientPublicKey.getAlgorithm())) {\n+        String privateKeyAlgorithm = clientPrivateKey.getAlgorithm();\n+        if (!Arrays.asList(keyTypes).contains(privateKeyAlgorithm)) {\n+            if (SSLLogger.isOn && SSLLogger.isOn(\"ssl\")) {\n+                SSLLogger.fine(\n+                        clientAlias + \" private key algorithm \" +\n+                                privateKeyAlgorithm + \" not in request list\");\n+            }\n+            return null;\n+        }\n+\n+        String publicKeyAlgorithm = clientCerts[0].getPublicKey().getAlgorithm();\n+        if (!privateKeyAlgorithm.equals(publicKeyAlgorithm)) {\n@@ -276,2 +263,2 @@\n-                                clientPrivateKey.getAlgorithm() + \" vs \" +\n-                                clientPublicKey.getAlgorithm());\n+                                privateKeyAlgorithm + \" vs \" +\n+                                publicKeyAlgorithm);\n@@ -290,1 +277,1 @@\n-            if (shc.conContext.transport instanceof SSLSocketImpl) {\n+            if (shc.conContext.transport instanceof SSLSocketImpl socket) {\n@@ -294,2 +281,2 @@\n-                        (SSLSocket) shc.conContext.transport);\n-            } else if (shc.conContext.transport instanceof SSLEngineImpl) {\n+                        socket);\n+            } else if (shc.conContext.transport instanceof SSLEngineImpl engine) {\n@@ -299,1 +286,1 @@\n-                        (SSLEngine) shc.conContext.transport);\n+                        engine);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/X509Authentication.java","additions":37,"deletions":50,"binary":false,"changes":87,"status":"modified"}]}