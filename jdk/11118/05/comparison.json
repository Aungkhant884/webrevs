{"files":[{"patch":"@@ -514,0 +514,3 @@\n+  develop(bool, ErrorLogSecondaryErrorDetails, false,                       \\\n+          \"If enabled, show details on secondary crashes in the error log\") \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -748,1 +748,1 @@\n-  VMError::print_native_stack(tty, fr, t, false, buf, sizeof(buf));\n+  VMError::print_native_stack(tty, fr, t, false, -1, buf, sizeof(buf));\n@@ -768,1 +768,1 @@\n-    VMError::print_native_stack(tty, fr, t, false, buf, sizeof(buf));\n+    VMError::print_native_stack(tty, fr, t, false, -1, buf, sizeof(buf));\n","filename":"src\/hotspot\/share\/utilities\/debug.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -350,1 +350,1 @@\n-void VMError::print_native_stack(outputStream* st, frame fr, Thread* t, bool print_source_info, char* buf, int buf_size) {\n+void VMError::print_native_stack(outputStream* st, frame fr, Thread* t, bool print_source_info, int max_frames, char* buf, int buf_size) {\n@@ -355,1 +355,1 @@\n-\n+    const int limit = max_frames == -1 ? StackPrintLimit : max_frames;\n@@ -357,1 +357,1 @@\n-    while (count++ < StackPrintLimit) {\n+    while (count++ < limit) {\n@@ -377,1 +377,1 @@\n-    if (count > StackPrintLimit) {\n+    if (count > limit) {\n@@ -381,1 +381,0 @@\n-    st->cr();\n@@ -848,1 +847,1 @@\n-       print_native_stack(st, fr, _thread, true, buf, sizeof(buf));\n+       print_native_stack(st, fr, _thread, true, -1, buf, sizeof(buf));\n@@ -860,1 +859,1 @@\n-     print_native_stack(st, fr, _thread, false, buf, sizeof(buf));\n+     print_native_stack(st, fr, _thread, false, -1, buf, sizeof(buf));\n@@ -1632,2 +1631,5 @@\n-        \/\/ Crash or assert during error reporting. Lets continue reporting with the next step.\n-        stringStream ss(buffer, sizeof(buffer));\n+        \/\/ A secondary error happened. Print brief information, but take care, since crashing\n+        \/\/ here would just recurse endlessly.\n+        \/\/ Any information (signal, context, siginfo etc) printed here should use the function\n+        \/\/ arguments, not the information stored in *this, since those describe the primary crash.\n+        static char tmp[256]; \/\/ cannot use global scratch buffer\n@@ -1636,1 +1638,1 @@\n-        ss.print(\"[error occurred during error reporting (%s), id 0x%x\",\n+        st->print(\"[error occurred during error reporting (%s), id 0x%x\",\n@@ -1638,3 +1640,2 @@\n-        char signal_name[64];\n-        if (os::exception_name(id, signal_name, sizeof(signal_name))) {\n-          ss.print(\", %s (0x%x) at pc=\" PTR_FORMAT, signal_name, id, p2i(pc));\n+        if (os::exception_name(id, tmp, sizeof(tmp))) {\n+          st->print(\", %s (0x%x) at pc=\" PTR_FORMAT, tmp, id, p2i(pc));\n@@ -1643,1 +1644,1 @@\n-            ss.print(\", Internal Error (%s:%d)\",\n+            st->print(\", Internal Error (%s:%d)\",\n@@ -1646,1 +1647,1 @@\n-            ss.print(\", Out of Memory Error (%s:%d)\",\n+            st->print(\", Out of Memory Error (%s:%d)\",\n@@ -1650,3 +1651,27 @@\n-        ss.print(\"]\");\n-        st->print_raw_cr(buffer);\n-        st->cr();\n+        st->print_cr(\"]\");\n+#ifdef ASSERT\n+        {\n+          if (ErrorLogSecondaryErrorDetails) {\n+            static bool recursed = false;\n+            if (!recursed) {\n+              recursed = true;\n+              \/\/ Print even more information for secondary errors. This may generate a lot of output\n+              \/\/ and possibly disturb error reporting, therefore its optional and only available in debug builds.\n+              if (siginfo != nullptr) {\n+                st->print(\"[\");\n+                os::print_siginfo(st, siginfo);\n+                st->print_cr(\"]\");\n+              }\n+              st->print(\"[stack: \");\n+              frame fr = context ? os::fetch_frame_from_context(context) : os::current_frame();\n+              \/\/ Subsequent secondary errors build up stack; to avoid flooding the hs-err file with irrelevant\n+              \/\/ call stacks, limit the stack we print here (we are only interested in what happened before the\n+              \/\/ last assert\/fault).\n+              const int max_stack_size = 15;\n+              print_native_stack(st, fr, _thread, true, max_stack_size, tmp, sizeof(tmp));\n+              st->print_cr(\"]\");\n+            } \/\/ !recursed\n+            recursed = false; \/\/ Note: reset outside !recursed\n+          }\n+        }\n+#endif \/\/ ASSERT\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":43,"deletions":18,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -108,0 +108,3 @@\n+  \/\/ print_source_info: if true, we try to resolve the source information on platforms that support it\n+  \/\/  (useful but may slow down, timeout or misfunction in error situations)\n+  \/\/ max_frames: if not -1, overrides StackPrintLimit\n@@ -109,1 +112,1 @@\n-                                 char* buf, int buf_size);\n+                                 int max_frames, char* buf, int buf_size);\n","filename":"src\/hotspot\/share\/utilities\/vmError.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,2 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022 SAP. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +28,1 @@\n- * @bug 8065896\n- * @summary Synchronous signals during error reporting may terminate or hang VM process\n+ * @summary Check secondary error handling\n@@ -32,1 +32,0 @@\n- * @author Thomas Stuefe (SAP)\n@@ -35,1 +34,12 @@\n- * @run driver SecondaryErrorTest\n+ * @run driver SecondaryErrorTest no_callstacks\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Check secondary error handling\n+ * @library \/test\/lib\n+ * @requires vm.debug\n+ * @requires os.family != \"windows\"\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @run driver SecondaryErrorTest with_callstacks\n@@ -42,0 +52,2 @@\n+import java.util.ArrayList;\n+import java.util.Arrays;\n@@ -51,0 +63,22 @@\n+\n+    boolean with_callstacks = false;\n+    if (args.length != 1) {\n+      throw new IllegalArgumentException(\"Missing argument\");\n+    } else if (args[0].equals(\"with_callstacks\")) {\n+      with_callstacks = true;\n+    } else if (args[0].equals(\"no_callstacks\")) {\n+      with_callstacks = false;\n+    } else {\n+      throw new IllegalArgumentException(\"unknown argument (\" + args[0] + \")\");\n+    }\n+\n+    \/\/ How this works:\n+    \/\/ The test will fault with SIGFPE (ErrorHandlerTest=15) and then, during error handling,\n+    \/\/ fault twice with SIGSEGV (TestCrashInErrorHandler=14). The point is not only to test\n+    \/\/ secondary crashes, but secondary crashes with a *different* error signal. This should\n+    \/\/ be handled correctly and not hang\/end the process (so the signal mask must be set correctly).\n+    \/\/ See JDK-8065895.\n+    \/\/ We do this twice, to check that secondary signal handling works repeatedly.\n+    \/\/ We also check, optionally, that +ErrorLogSecondaryErrorDetails produces callstacks for\n+    \/\/ the secondary error.\n+\n@@ -57,0 +91,1 @@\n+        \"-XX:\" + (with_callstacks ? \"+\" : \"-\") + \"ErrorLogSecondaryErrorDetails\",\n@@ -88,6 +123,17 @@\n-    Pattern [] pattern = new Pattern[] {\n-        Pattern.compile(\"Will crash now \\\\(TestCrashInErrorHandler=14\\\\)...\"),\n-        Pattern.compile(\"\\\\[error occurred during error reporting \\\\(test secondary crash 1\\\\).*\\\\]\"),\n-        Pattern.compile(\"Will crash now \\\\(TestCrashInErrorHandler=14\\\\)...\"),\n-        Pattern.compile(\"\\\\[error occurred during error reporting \\\\(test secondary crash 2\\\\).*\\\\]\"),\n-    };\n+    ArrayList<Pattern> patternlist = new ArrayList<>();\n+    patternlist.add(Pattern.compile(\"Will crash now \\\\(TestCrashInErrorHandler=14\\\\)...\"));\n+    patternlist.add(Pattern.compile(\"\\\\[error occurred during error reporting \\\\(test secondary crash 1\\\\).*\\\\]\"));\n+    if (with_callstacks) {\n+      patternlist.add(Pattern.compile(\"\\\\[siginfo: si_signo: 11 \\\\(SIGSEGV\\\\).*\\\\]\"));\n+      patternlist.add(Pattern.compile(\"\\\\[stack: Native frames:.*\"));\n+      patternlist.add(Pattern.compile(\".*VMError::controlled_crash.*\"));\n+    }\n+    \/\/ and again, to see that repeated error reporting steps work\n+    patternlist.add(Pattern.compile(\"Will crash now \\\\(TestCrashInErrorHandler=14\\\\)...\"));\n+    patternlist.add(Pattern.compile(\"\\\\[error occurred during error reporting \\\\(test secondary crash 2\\\\).*\\\\]\"));\n+    if (with_callstacks) {\n+      patternlist.add(Pattern.compile(\"\\\\[siginfo: si_signo: 11 \\\\(SIGSEGV\\\\).*\\\\]\"));\n+      patternlist.add(Pattern.compile(\"\\\\[stack: Native frames:.*\"));\n+      patternlist.add(Pattern.compile(\".*VMError::controlled_crash.*\"));\n+    }\n+    Pattern[] pattern = patternlist.toArray(new Pattern[] {});\n@@ -109,1 +155,1 @@\n-      throw new RuntimeException(\"hs-err file incomplete (first missing pattern: \" +  currentPattern + \")\");\n+      throw new RuntimeException(\"hs-err file incomplete (first missing pattern: \" + pattern[currentPattern] + \")\");\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/SecondaryErrorTest.java","additions":58,"deletions":12,"binary":false,"changes":70,"status":"modified"}]}