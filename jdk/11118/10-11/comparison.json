{"files":[{"patch":"@@ -520,1 +520,1 @@\n-  develop(bool, ErrorLogSecondaryErrorDetails, false,                       \\\n+  product(bool, ErrorLogSecondaryErrorDetails, false, DIAGNOSTIC,           \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1524,20 +1524,9 @@\n-#ifdef ASSERT\n-        {\n-          if (ErrorLogSecondaryErrorDetails) {\n-            static bool recursed = false;\n-            if (!recursed) {\n-              recursed = true;\n-              \/\/ Print even more information for secondary errors. This may generate a lot of output\n-              \/\/ and possibly disturb error reporting, therefore its optional and only available in debug builds.\n-              if (siginfo != nullptr) {\n-                st->print(\"[\");\n-                os::print_siginfo(st, siginfo);\n-                st->print_cr(\"]\");\n-              }\n-              st->print(\"[stack: \");\n-              frame fr = context ? os::fetch_frame_from_context(context) : os::current_frame();\n-              \/\/ Subsequent secondary errors build up stack; to avoid flooding the hs-err file with irrelevant\n-              \/\/ call stacks, limit the stack we print here (we are only interested in what happened before the\n-              \/\/ last assert\/fault).\n-              const int max_stack_size = 15;\n-              print_native_stack(st, fr, _thread, true, max_stack_size, tmp, sizeof(tmp));\n+        if (ErrorLogSecondaryErrorDetails) {\n+          static bool recursed = false;\n+          if (!recursed) {\n+            recursed = true;\n+            \/\/ Print even more information for secondary errors. This may generate a lot of output\n+            \/\/ and possibly disturb error reporting, therefore its optional and only available in debug builds.\n+            if (siginfo != nullptr) {\n+              st->print(\"[\");\n+              os::print_siginfo(st, siginfo);\n@@ -1545,3 +1534,11 @@\n-            } \/\/ !recursed\n-            recursed = false; \/\/ Note: reset outside !recursed\n-          }\n+            }\n+            st->print(\"[stack: \");\n+            frame fr = context ? os::fetch_frame_from_context(context) : os::current_frame();\n+            \/\/ Subsequent secondary errors build up stack; to avoid flooding the hs-err file with irrelevant\n+            \/\/ call stacks, limit the stack we print here (we are only interested in what happened before the\n+            \/\/ last assert\/fault).\n+            const int max_stack_size = 15;\n+            print_native_stack(st, fr, _thread, true, max_stack_size, tmp, sizeof(tmp));\n+            st->print_cr(\"]\");\n+          } \/\/ !recursed\n+          recursed = false; \/\/ Note: reset outside !recursed\n@@ -1549,1 +1546,0 @@\n-#endif \/\/ ASSERT\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":20,"deletions":24,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -48,1 +48,0 @@\n-import java.io.BufferedReader;\n@@ -50,2 +49,0 @@\n-import java.io.FileInputStream;\n-import java.io.InputStreamReader;\n@@ -53,1 +50,0 @@\n-import java.util.Arrays;\n","filename":"test\/hotspot\/jtreg\/runtime\/ErrorHandling\/SecondaryErrorTest.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"}]}