{"files":[{"patch":"@@ -1522,1 +1522,1 @@\n-        public RecordComponent createRecordComponent(RecordComponent existing, JCVariableDecl var, List<JCAnnotation> annotations) {\n+        public RecordComponent createRecordComponent(RecordComponent existing, JCVariableDecl rcDecl, VarSymbol varSym) {\n@@ -1526,1 +1526,1 @@\n-                recordComponents = recordComponents.append(rc = new RecordComponent(var.sym, existing.originalAnnos, existing.isVarargs));\n+                recordComponents = recordComponents.append(rc = new RecordComponent(varSym, existing.ast, existing.isVarargs));\n@@ -1529,1 +1529,1 @@\n-                recordComponents = recordComponents.append(rc = new RecordComponent(var.sym, annotations));\n+                recordComponents = recordComponents.append(rc = new RecordComponent(varSym, rcDecl));\n@@ -1789,3 +1789,1 @@\n-        \/* the original annotations applied to the record component\n-         *\/\n-        private final List<JCAnnotation> originalAnnos;\n+\n@@ -1799,0 +1797,2 @@\n+        private JCVariableDecl ast;\n+\n@@ -1805,1 +1805,1 @@\n-            originalAnnos = List.nil();\n+            ast = null;\n@@ -1809,2 +1809,2 @@\n-        public RecordComponent(VarSymbol field, List<JCAnnotation> annotations) {\n-            this(field, annotations, field.type.hasTag(TypeTag.ARRAY) && ((ArrayType)field.type).isVarargs());\n+        public RecordComponent(VarSymbol field, JCVariableDecl ast) {\n+            this(field, ast, field.type.hasTag(TypeTag.ARRAY) && ((ArrayType)field.type).isVarargs());\n@@ -1813,1 +1813,1 @@\n-        public RecordComponent(VarSymbol field, List<JCAnnotation> annotations, boolean isVarargs) {\n+        public RecordComponent(VarSymbol field, JCVariableDecl ast, boolean isVarargs) {\n@@ -1815,1 +1815,1 @@\n-            this.originalAnnos = annotations;\n+            this.ast = ast;\n@@ -1825,1 +1825,3 @@\n-        public List<JCAnnotation> getOriginalAnnos() { return originalAnnos; }\n+        public List<JCAnnotation> getOriginalAnnos() { return this.ast == null ? List.nil() : this.ast.mods.annotations; }\n+\n+        public JCVariableDecl declarationFor() { return this.ast; }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symbol.java","additions":14,"deletions":12,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -3009,0 +3009,10 @@\n+                    JCVariableDecl fieldAST = (JCVariableDecl) declarationTree;\n+                    for (JCAnnotation fieldAnnot : fieldAST.mods.annotations) {\n+                        for (JCAnnotation rcAnnot : rc.declarationFor().mods.annotations) {\n+                            if (rcAnnot.pos == fieldAnnot.pos) {\n+                                rcAnnot.setType(fieldAnnot.type);\n+                                break;\n+                            }\n+                        }\n+                    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -999,4 +999,2 @@\n-                    sym.createRecordComponent(rc, field,\n-                            field.mods.annotations.isEmpty() ?\n-                                    List.nil() :\n-                                    new TreeCopier<JCTree>(make.at(field.pos)).copy(field.mods.annotations));\n+                    JCVariableDecl rcDecl = new TreeCopier<JCTree>(make.at(field.pos)).copy(field);\n+                    sym.createRecordComponent(rc, rcDecl, field.sym);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TypeEnter.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import com.sun.tools.javac.code.Symbol.RecordComponent;\n@@ -49,0 +50,1 @@\n+import javax.lang.model.element.ElementKind;\n@@ -795,0 +797,6 @@\n+            if (this.sym.getKind() == ElementKind.RECORD_COMPONENT) {\n+                if (thatSym != null && thatSym.getKind() == ElementKind.FIELD && (thatSym.flags_field & RECORD) != 0) {\n+                    RecordComponent rc = thatSym.enclClass().getRecordComponent((VarSymbol)thatSym);\n+                    return checkMatch(rc.declarationFor(), rc);\n+                }\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/TreeInfo.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8295184\n+ * @summary Printing messages with a RecordComponentElement does not include position\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ * @compile TestWarning.java\n+ * @compile ReproducingAP.java\n+ * @run main RecordComponentSourcePositionTest\n+ *\/\n+\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import toolbox.JavacTask;\n+import toolbox.TestRunner;\n+import toolbox.ToolBox;\n+import toolbox.Task;\n+\n+public class RecordComponentSourcePositionTest extends TestRunner {\n+\n+    ToolBox tb;\n+\n+    public RecordComponentSourcePositionTest() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        RecordComponentSourcePositionTest t = new RecordComponentSourcePositionTest();\n+        t.runTests();\n+    }\n+\n+    @Test\n+    public void testRecordComponentPositionInDiagnostics() throws Exception {\n+        String code = \"\"\"\n+                      @TestWarning(includeAnnotation = true)\n+                      public record Test(\n+                              @TestWarning(includeAnnotation = true) int first,\n+                              @TestWarning int second) {\n+                      }\n+\n+                      @TestWarning\n+                      record Test2() {}\n+                      \"\"\";\n+\n+        Path curPath = Path.of(\".\");\n+\n+        List<String> output = new JavacTask(tb)\n+                .sources(code)\n+                .outdir(curPath)\n+                .options(\"-XDrawDiagnostics\", \"-processor\", \"ReproducingAP\")\n+                .run()\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        List<String> expected = Arrays.asList(\n+                \"Test.java:1:1: compiler.warn.proc.messager: Reporting Test with an annotation\",\n+                \"Test.java:3:9: compiler.warn.proc.messager: Reporting first with an annotation\",\n+                \"Test.java:4:26: compiler.warn.proc.messager: Reporting second\",\n+                \"Test.java:8:1: compiler.warn.proc.messager: Reporting Test2\",\n+                \"4 warnings\");\n+        tb.checkEqual(expected, output);\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/records\/recordComponent\/8295184\/RecordComponentSourcePositionTest.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.Set;\n+\n+import javax.annotation.processing.AbstractProcessor;\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.annotation.processing.SupportedSourceVersion;\n+import javax.lang.model.SourceVersion;\n+import javax.lang.model.element.TypeElement;\n+\n+public class ReproducingAP extends AbstractProcessor {\n+\n+    @Override\n+    public Set<String> getSupportedAnnotationTypes() {\n+        return Set.of(TestWarning.class.getName());\n+    }\n+\n+    @Override\n+    public SourceVersion getSupportedSourceVersion() {\n+        return SourceVersion.latest();\n+    }\n+\n+    @Override\n+    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+        roundEnv.getElementsAnnotatedWith(TestWarning.class).forEach(e -> {\n+            var annotation = e.getAnnotation(TestWarning.class);\n+            if (annotation.includeAnnotation()) {\n+                processingEnv.getMessager().printMessage(\n+                        javax.tools.Diagnostic.Kind.WARNING,\n+                        \"Reporting \" + e.getSimpleName() + \" with an annotation\",\n+                        e,\n+                        e.getAnnotationMirrors().get(0));\n+            } else {\n+                processingEnv.getMessager().printMessage(\n+                        javax.tools.Diagnostic.Kind.WARNING,\n+                        \"Reporting \" + e.getSimpleName(),\n+                        e);\n+            }\n+        });\n+        return false;\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/records\/recordComponent\/8295184\/ReproducingAP.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Target;\n+\n+\/**\n+ * Direct {@link ReproducingAP} to emit a warning.\n+ *\/\n+@Target({ElementType.TYPE, ElementType.RECORD_COMPONENT})\n+public @interface TestWarning {\n+    \/**\n+     * {@return {@code true} to include the relevant mirror in the warning message}\n+     *\/\n+    boolean includeAnnotation() default false;\n+}\n","filename":"test\/langtools\/tools\/javac\/records\/recordComponent\/8295184\/TestWarning.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"}]}