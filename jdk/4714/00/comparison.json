{"files":[{"patch":"@@ -190,1 +190,1 @@\n-                               !VerifyAccess.isSamePackage(implClass, implInfo.getDeclaringClass())) ||\n+                               !VerifyAccess.isSamePackage(targetClass, implInfo.getDeclaringClass())) ||\n@@ -567,1 +567,4 @@\n-                MethodType mtype = implInfo.getMethodType().insertParameterTypes(0, implClass);\n+                MethodType mtype = implInfo.getMethodType();\n+                if (implKind != MethodHandleInfo.REF_invokeStatic) {\n+                    mtype = mtype.insertParameterTypes(0, implClass);\n+                }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2021, Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/* @test\n+ * @summary test accessing protected static method from superclass\n+ * @run testng\/othervm test.java.lang.invoke.AccessProtectedStaticMethodFromSuper\n+ *\/\n+\n+package test.java.lang.invoke;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+\n+public class AccessProtectedStaticMethodFromSuper {\n+\n+    public static class A {\n+        protected static void func() {\n+        }\n+    }\n+\n+    public static class B extends A {\n+        public static Runnable get() {\n+            \/\/ Generate method body by ForwardingMethodGenerator.generate\n+            return A::func;\n+        }\n+    }\n+\n+    public static void main(String... args) throws Throwable {\n+        final URL empty[] = {};\n+        final class Loader extends URLClassLoader {\n+\n+            private final Class<?> responsibility;\n+\n+            public Loader(final ClassLoader parent, final Class<?> responsibility) {\n+                super(empty, parent);\n+                this.responsibility = responsibility;\n+            }\n+\n+            @Override\n+            protected Class<?> findClass(final String name) throws ClassNotFoundException {\n+                try {\n+                    if (name.equals(responsibility.getName())) {\n+                        final byte bytes[] = getBytesFromClass(responsibility);\n+                        return defineClass(null, bytes, 0, bytes.length);\n+                    }\n+                } catch (IOException e) {\n+                    throw new RuntimeException(e);\n+                }\n+                return super.findClass(name);\n+            }\n+\n+        }\n+        final ClassLoader a = new Loader(null, A.class), b = new Loader(a, B.class);\n+        final Class<?> bClass = b.loadClass(B.class.getName());\n+        final MethodHandle get = MethodHandles.lookup().findStatic(bClass, \"get\", MethodType.methodType(Runnable.class));\n+        final Runnable runnable = (Runnable) get.invoke();\n+        runnable.run();\n+    }\n+\n+    private static byte[] getBytesFromClass(final Class<?> clazz) throws IOException {\n+        try (final var input = clazz.getClassLoader().getResourceAsStream(clazz.getName().replace('.', '\/') + \".class\")) {\n+            final ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n+            int nRead;\n+            final byte data[] = new byte[1 << 12];\n+            while ((nRead = input.read(data, 0, data.length)) != -1)\n+                buffer.write(data, 0, nRead);\n+            buffer.flush();\n+            return buffer.toByteArray();\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/lang\/invoke\/AccessProtectedStaticMethodFromSuper.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"}]}