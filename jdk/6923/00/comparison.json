{"files":[{"patch":"@@ -340,0 +340,9 @@\n+    item = createMenuItem(\"Annotated Memory Viewer\",\n+                          new ActionListener() {\n+                             public void actionPerformed(ActionEvent e) {\n+                                showAnnotatedMemoryViewer();\n+                             }\n+                          });\n+    item.setMnemonic(KeyEvent.VK_W);\n+    toolsMenu.add(item);\n+\n@@ -1614,1 +1623,5 @@\n-    showPanel(\"Memory Viewer\", new MemoryViewer(agent.getDebugger(), agent.getTypeDataBase().getAddressSize() == 8));\n+    showPanel(\"Memory Viewer\", new MemoryViewer(agent.getDebugger(), false, agent.getTypeDataBase().getAddressSize() == 8));\n+  }\n+\n+  public void showAnnotatedMemoryViewer() {\n+    showPanel(\"Annotated Memory Viewer\", new MemoryViewer(agent.getDebugger(), true, agent.getTypeDataBase().getAddressSize() == 8));\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/HSDB.java","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.io.ByteArrayOutputStream;\n@@ -31,0 +32,1 @@\n+import java.io.PrintStream;\n@@ -38,0 +40,2 @@\n+import sun.jvm.hotspot.utilities.PointerFinder;\n+import sun.jvm.hotspot.utilities.PointerLocation;\n@@ -41,0 +45,1 @@\n+  private boolean isAnnotated;\n@@ -81,1 +86,1 @@\n-  public MemoryPanel(final Debugger debugger, boolean is64Bit) {\n+  public MemoryPanel(final Debugger debugger, boolean isAnnotated, boolean is64Bit) {\n@@ -85,0 +90,1 @@\n+    this.isAnnotated = isAnnotated;\n@@ -101,1 +107,1 @@\n-          return 2;\n+            return isAnnotated ? 1 : 2;\n@@ -104,5 +110,32 @@\n-          switch (column) {\n-          case 0:  return bigIntToHexString(startVal.add(new BigInteger(Integer.toString((row * addressSize)))));\n-          case 1: {\n-            try {\n-              Address addr = bigIntToAddress(startVal.add(new BigInteger(Integer.toString((row * addressSize)))));\n+          \/\/ When not annotated, we just display the address followed by its contents in two\n+          \/\/ separate columns. When annotated the format is just one column which contains:\n+          \/\/   <address>: <contents> <PointerFinder output>\n+          \/\/ For example:\n+          \/\/   0x00007f7eb010c330: 0x00007f7eb6c9dfb0 vtable for os::PlatformMonitor + 0x10\n+          if (!isAnnotated) {\n+            switch (column) {\n+            case 0:  return bigIntToHexString(startVal.add(new BigInteger(Integer.toString((row * addressSize)))));\n+            case 1: {\n+              try {\n+                Address addr = bigIntToAddress(startVal.add(new BigInteger(Integer.toString((row * addressSize)))));\n+                if (addr != null) {\n+                  return addressToString(addr.getAddressAt(0));\n+                }\n+                return unmappedAddrString;\n+              } catch (UnmappedAddressException e) {\n+                return unmappedAddrString;\n+              }\n+            }\n+            default: throw new RuntimeException(\"Column \" + column + \" out of bounds\");\n+            }\n+          } else {\n+            switch (column) {\n+            case 0: {\n+              String col1;\n+              String col2 = unmappedAddrString;\n+              String col3 = \"\";\n+              BigInteger bigaddr = startVal.add(new BigInteger(Integer.toString((row * addressSize))));\n+              Address addr = bigIntToAddress(bigaddr);\n+\n+              col1 = bigIntToHexString(bigaddr);\n+\n@@ -110,1 +143,11 @@\n-                return addressToString(addr.getAddressAt(0));\n+                try {\n+                  col2 = addressToString(addr.getAddressAt(0));\n+                  PointerLocation loc = PointerFinder.find(addr.getAddressAt(0));\n+                  if (!loc.isUnknown()) {\n+                    ByteArrayOutputStream bos = new ByteArrayOutputStream();\n+                    PrintStream tty = new PrintStream(bos);\n+                    loc.printOn(tty, false, false);\n+                    col3 = bos.toString();\n+                  }\n+                } catch (UnmappedAddressException e) {\n+                }\n@@ -112,3 +155,4 @@\n-              return unmappedAddrString;\n-            } catch (UnmappedAddressException e) {\n-              return unmappedAddrString;\n+\n+              return col1 + \": \" + col2 + \" \" + col3;\n+            }\n+            default: throw new RuntimeException(\"Column \" + column + \" out of bounds\");\n@@ -116,2 +160,0 @@\n-          }\n-          default: throw new RuntimeException(\"Column \" + column + \" out of bounds\");\n@@ -201,0 +243,9 @@\n+            \/\/ If someone drag-n-dropped a selection from the Annotated Memory Viewer,\n+            \/\/ window, it will look like this:\n+            \/\/   0x00007f7eb010c330: 0x00007f7eb6c9dfb0 vtable for os::PlatformMonitor + 0x10\n+            \/\/ We need to grab the second address.\n+            int secondAddrStartIndex = str.indexOf(\"0x\", 2);\n+            if (secondAddrStartIndex != -1) {\n+              str = str.substring(secondAddrStartIndex);\n+              str = str.split(\"\\\\s\")[0];\n+            }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/ui\/MemoryPanel.java","additions":64,"deletions":13,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021 Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-  public MemoryViewer(final Debugger debugger, boolean is64Bit) {\n+  public MemoryViewer(final Debugger debugger, boolean isAnnotated, boolean is64Bit) {\n@@ -38,1 +38,1 @@\n-    final MemoryPanel memory = new MemoryPanel(debugger, is64Bit);\n+    final MemoryPanel memory = new MemoryPanel(debugger, isAnnotated, is64Bit);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/ui\/MemoryViewer.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}