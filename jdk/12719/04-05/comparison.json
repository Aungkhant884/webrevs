{"files":[{"patch":"@@ -264,1 +264,1 @@\n-     * <p>The stream potentially produces all multiples <i>k<\/i>&delta;\n+     * <p>The stream potentially produces all multiples <i>k<\/i> &delta;\n@@ -269,0 +269,2 @@\n+     * The uniformity of the distribution of the {@code double}s produced by\n+     * the stream depends on the quality of the underlying {@link #nextLong(long)}.\n@@ -270,2 +272,11 @@\n-     * <p>The uniformity of the distribution of the {@code double}s produced by\n-     * the stream is as good as the one of {@link #nextLong(long)}.\n+     * @implNote The default implementation first determines the &delta; above.\n+     * It then computes both the smallest integer <i>k<\/i><sub><i>l<\/i><\/sub>\n+     * such that <i>k<\/i><sub><i>l<\/i><\/sub> &delta; lies <em>inside<\/em>\n+     * the given interval, and the smallest integer <i>n<\/i> > 0 such that\n+     * (<i>k<\/i><sub><i>l<\/i><\/sub> + <i>n<\/i>) &delta; lies\n+     * <em>outside<\/em> the interval.\n+     * Finally, it returns a stream which generates the {@code double}s\n+     * according to (<i>k<\/i><sub><i>l<\/i><\/sub> + {@code nextLong(}<i>n<\/i>{@code )})\n+     * &delta;.\n+     * The stream never produces {@code -0.0}, although it may produce\n+     * {@code 0.0} if the specified interval contains 0.\n@@ -280,2 +291,0 @@\n-     *         The stream never produces {@code -0.0}, although it may produce\n-     *         {@code 0.0} if the specified interval contains 0.\n@@ -334,1 +343,1 @@\n-             * sparse products k eps, that is, less doubles in I.\n+             * sparse products k eps, that is, fewer doubles in I.\n@@ -336,1 +345,1 @@\n-             * of equidistant doubles in I.\n+             * of equidistant doubles in the interval I.\n","filename":"src\/java.base\/share\/classes\/java\/util\/random\/RandomGenerator.java","additions":16,"deletions":7,"binary":false,"changes":23,"status":"modified"}]}