{"files":[{"patch":"@@ -28,1 +28,0 @@\n-import jdk.internal.misc.Unsafe;\n@@ -2510,1 +2509,1 @@\n-    public static boolean equals(short[] a, short a2[]) {\n+    public static boolean equals(short[] a, short[] a2) {\n@@ -3512,1 +3511,1 @@\n-        T[] copy = ((Object)newType == (Object)Object[].class)\n+        T[] copy = (newType == Object[].class)\n@@ -3785,1 +3784,1 @@\n-        T[] copy = ((Object)newType == (Object)Object[].class)\n+        T[] copy = (newType == Object[].class)\n","filename":"src\/java.base\/share\/classes\/java\/util\/Arrays.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -144,1 +144,0 @@\n-    @SuppressWarnings(\"unchecked\")\n@@ -178,1 +177,0 @@\n-    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n@@ -270,1 +268,1 @@\n-        T obj = null;\n+        T obj;\n@@ -654,1 +652,1 @@\n-    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+    @SuppressWarnings({\"unchecked\"})\n@@ -657,1 +655,1 @@\n-            return (T)min((Collection) coll);\n+            return (T)min((Collection<Comparable<Object>>) coll);\n@@ -727,1 +725,1 @@\n-    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+    @SuppressWarnings({\"unchecked\"})\n@@ -730,1 +728,1 @@\n-            return (T)max((Collection) coll);\n+            return (T)max((Collection<Comparable<Object>>) coll);\n@@ -1070,1 +1068,1 @@\n-            return new Iterator<E>() {\n+            return new Iterator<>() {\n@@ -1282,1 +1280,0 @@\n-        @SuppressWarnings(\"rawtypes\")\n@@ -1395,1 +1392,1 @@\n-            return new ListIterator<E>() {\n+            return new ListIterator<>() {\n@@ -1637,1 +1634,1 @@\n-            @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+            @SuppressWarnings({\"unchecked\"})\n@@ -1639,2 +1636,1 @@\n-                \/\/ Need to cast to raw in order to work around a limitation in the type system\n-                super((Set)s);\n+                super((Set<Map.Entry<K, V>>)s);\n@@ -1724,1 +1720,1 @@\n-                return new Iterator<Map.Entry<K,V>>() {\n+                return new Iterator<>() {\n@@ -1923,1 +1919,1 @@\n-         * A class for the {@link EMPTY_NAVIGABLE_MAP} which needs readResolve\n+         * A class for the {@link #EMPTY_NAVIGABLE_MAP} which needs readResolve\n@@ -1946,1 +1942,1 @@\n-         * Singleton for {@link emptyNavigableMap()} which is also immutable.\n+         * Singleton for {@link #emptyNavigableMap()} which is also immutable.\n@@ -3194,1 +3190,1 @@\n-            return new Iterator<E>() {\n+            return new Iterator<>() {\n@@ -3585,1 +3581,1 @@\n-            return new ListIterator<E>() {\n+            return new ListIterator<>() {\n@@ -3893,1 +3889,1 @@\n-                return new Iterator<Map.Entry<K,V>>() {\n+                return new Iterator<>() {\n@@ -4748,1 +4744,0 @@\n-        @SuppressWarnings(\"unchecked\")\n@@ -4829,1 +4824,1 @@\n-        return new Iterator<E>() {\n+        return new Iterator<>() {\n@@ -4862,1 +4857,1 @@\n-        return new Spliterator<T>() {\n+        return new Spliterator<>() {\n@@ -5064,1 +5059,1 @@\n-                entrySet = Collections.<Map.Entry<K,V>>singleton(\n+                entrySet = Collections.singleton(\n@@ -5432,2 +5427,2 @@\n-                (o instanceof ReverseComparator2 &&\n-                 cmp.equals(((ReverseComparator2)o).cmp));\n+                (o instanceof ReverseComparator2<?> that &&\n+                 cmp.equals(that.cmp));\n@@ -5462,1 +5457,1 @@\n-        return new Enumeration<T>() {\n+        return new Enumeration<>() {\n","filename":"src\/java.base\/share\/classes\/java\/util\/Collections.java","additions":21,"deletions":26,"binary":false,"changes":47,"status":"modified"}]}