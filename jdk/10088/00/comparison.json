{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -193,1 +193,1 @@\n-    throw new UnknownOopException();\n+    throw new UnknownOopException(handle.toString());\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/ObjectHeap.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -357,1 +357,1 @@\n-      e.printStackTrace();\n+        System.out.println(\"WARNING: could not get Thread object: \" + e);\n@@ -409,1 +409,5 @@\n-      return OopUtilities.threadOopGetParkBlocker(threadObj);\n+      try {\n+        return OopUtilities.threadOopGetParkBlocker(threadObj);\n+      } catch (Exception e) {\n+        System.out.println(\"Could not get current park blocker: \" + e);\n+      }\n@@ -505,27 +509,52 @@\n-    Oop threadOop = this.getThreadObj();\n-\n-    out.print(\"\\\"\");\n-    out.print(this.getThreadName());\n-    out.print(\"\\\" #\");\n-    out.print(OopUtilities.threadOopGetTID(threadOop));\n-    if(OopUtilities.threadOopGetDaemon(threadOop)){\n-      out.print(\" daemon\");\n-    }\n-    out.print(\" prio=\");\n-    out.print(OopUtilities.threadOopGetPriority(threadOop));\n-    out.print(\" tid=\");\n-    out.print(this.getAddress());\n-    out.print(\" nid=\");\n-    out.print(String.format(\"%d \",this.getOSThread().threadId()));\n-    out.print(getOSThread().getThreadState().getPrintVal());\n-    out.print(\" [\");\n-    if(this.getLastJavaSP() == null){\n-      out.print(String.format(ADDRESS_FORMAT,0L));\n-    } else {\n-      out.print(this.getLastJavaSP().andWithMask(~0xFFF));\n-    }\n-    out.println(\"]\");\n-    out.print(\"   java.lang.Thread.State: \");\n-    out.println(OopUtilities.threadOopGetThreadStatusName(threadOop));\n-    out.print(\"   JavaThread state: _thread_\");\n-    out.println(this.getThreadState().toString().toLowerCase());\n+      String threadName = \"<unknown>\";\n+      boolean daemon = false;\n+      int priority = java.lang.Thread.MIN_PRIORITY - 1;\n+      String statusName = \"<unknown>\";\n+\n+      Oop threadOop = this.getThreadObj();\n+      if (threadOop == null) {\n+          System.out.println(\"Could not get the java Thread object. Thread info will be limitted.\");\n+      } else {\n+          \/\/ Some of these accesses can throw an Exception if we are in the\n+          \/\/ middle of a GC, so be cautious.\n+          try {\n+              threadName = this.getThreadName();\n+          } catch (Exception e) {}\n+          try {\n+              \/\/ These all rely on the FieldHolder object, so if one fails, they all fail.\n+              daemon = OopUtilities.threadOopGetDaemon(threadOop);\n+              priority = OopUtilities.threadOopGetPriority(threadOop);\n+              statusName = OopUtilities.threadOopGetThreadStatusName(threadOop);\n+          } catch (Exception e) {}\n+          out.print(\"\\\"\");\n+          out.print(threadName);\n+          out.print(\"\\\" #\");\n+          out.print(OopUtilities.threadOopGetTID(threadOop));\n+          if (daemon) {\n+              out.print(\" daemon\");\n+          }\n+          out.print(\" prio=\");\n+          if (priority == java.lang.Thread.MIN_PRIORITY - 1) {\n+              out.print(\"<unknown>\");\n+          } else {\n+              out.print(priority);\n+          }\n+      }\n+      out.print(\" tid=\");\n+      out.print(this.getAddress());\n+      out.print(\" nid=\");\n+      out.print(String.format(\"%d \",this.getOSThread().threadId()));\n+      out.print(getOSThread().getThreadState().getPrintVal());\n+      out.print(\" [\");\n+      if (this.getLastJavaSP() == null) {\n+          out.print(String.format(ADDRESS_FORMAT,0L));\n+      } else {\n+          out.print(this.getLastJavaSP().andWithMask(~0xFFF));\n+      }\n+      out.println(\"]\");\n+      if (threadOop != null) {\n+          out.print(\"   java.lang.Thread.State: \");\n+          out.println(statusName);\n+      }\n+      out.print(\"   JavaThread state: _thread_\");\n+      out.println(this.getThreadState().toString().toLowerCase());\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/runtime\/JavaThread.java","additions":58,"deletions":29,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -64,1 +64,6 @@\n-      String klassName = klass.getName().asString();\n+      String klassName;\n+      if (klass != null) {\n+          klassName = klass.getName().asString();\n+      } else {\n+          klassName = \"<unknown class>\";\n+      }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/runtime\/JavaVFrame.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,1 +81,1 @@\n-            out.println(\"can't print deadlock information: \" + exp.getMessage());\n+            out.println(\"can't print deadlock information: \" + exp);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/tools\/PStack.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,1 +65,1 @@\n-            tty.println(\"Can't print deadlocks:\" + exp.getMessage());\n+            tty.println(\"Can't print deadlocks: \" + exp);\n@@ -114,1 +114,5 @@\n-                            vf.printLockInfo(tty, count++);\n+                            try {\n+                                vf.printLockInfo(tty, count++);\n+                            } catch (Exception e) {\n+                                tty.println(\"\\nCould not print lock info: \" + e);\n+                            }\n@@ -117,2 +121,2 @@\n-                        tty.println(\"Error occurred during stack walking:\");\n-                        e.printStackTrace();\n+                        tty.println(\"\\nError occurred during stack walking:\");\n+                        e.printStackTrace(tty);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/tools\/StackTrace.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"}]}