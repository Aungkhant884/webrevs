{"files":[{"patch":"@@ -53,0 +53,2 @@\n+    private static final Predicate<String> SOE = Pattern.compile(\n+            \".*StackOverFlowError.*\").asPredicate();\n@@ -68,4 +70,0 @@\n-                if (OOME.test(goldLine)) {\n-                    return;     \/\/ OOMEs are simply ignored.\n-                }\n-\n@@ -98,0 +96,4 @@\n+\n+    public static boolean isReliable(Stream<String> gold) {\n+        return !gold.anyMatch(line -> OOME.test(line) || SOE.test(line));\n+    }\n","filename":"test\/hotspot\/jtreg\/testlibrary\/jittester\/src\/jdk\/test\/lib\/jittester\/ErrorTolerance.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+        private boolean buildPrinter = true;\n@@ -63,0 +64,5 @@\n+        public Builder buildPrinter(boolean from) {\n+            buildPrinter = false;\n+            return this;\n+        }\n+\n@@ -79,3 +85,3 @@\n-        header.append(\" * @run build jdk.test.lib.jittester.jtreg.JitTesterDriver \"\n-                        + \"jdk.test.lib.jittester.jtreg.Printer\\n\");\n-        for (String action : builder.preRunActions.apply(mainClassName)) {\n+       header.append(\" * @run build jdk.test.lib.jittester.jtreg.JitTesterDriver\"\n+                        + (builder.buildPrinter ? \" jdk.test.lib.jittester.jtreg.Printer\\n\" : \"\\n\"));\n+       for (String action : builder.preRunActions.apply(mainClassName)) {\n@@ -86,1 +92,1 @@\n-        header.append(\" * @run driver jdk.test.lib.jittester.jtreg.JitTesterDriver \")\n+        header.append(\" * @run driver\/timeout=180 jdk.test.lib.jittester.jtreg.JitTesterDriver \")\n","filename":"test\/hotspot\/jtreg\/testlibrary\/jittester\/src\/jdk\/test\/lib\/jittester\/HeaderFormatter.java","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-    RUN(90, \"run\"),\n+    RUN(120, \"run\"),\n","filename":"test\/hotspot\/jtreg\/testlibrary\/jittester\/src\/jdk\/test\/lib\/jittester\/Phase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import java.util.Iterator;\n@@ -44,1 +43,1 @@\n-    public static void main(String[] args) {\n+    public static void main(String[] args) throws IOException {\n@@ -60,3 +59,4 @@\n-            if (!goldExitValue.equals(\"TIMEOUT\")) {\n-                String anlzExitValue = streamFile(Path.of(\".\"), name, Phase.RUN, \"exit\").findFirst().get();\n-                Asserts.assertEQ(anlzExitValue, goldExitValue);\n+            long goldOutSize = Files.size(Paths.get(Utils.TEST_SRC).resolve(name + \".gold.out\"));\n+            if (!goldExitValue.equals(\"TIMEOUT\") && goldOutSize < 2000000) {\n+                Stream<String> goldOut = streamFile(Paths.get(Utils.TEST_SRC), name, Phase.GOLD_RUN, \"out\");\n+                Stream<String> goldErr = streamFile(Paths.get(Utils.TEST_SRC), name, Phase.GOLD_RUN, \"err\");\n@@ -64,3 +64,12 @@\n-                ErrorTolerance.assertIsAcceptable(\n-                    Paths.get(Utils.TEST_SRC).resolve(name + \".\" + Phase.GOLD_RUN.suffix + \".err\"),\n-                    Paths.get(\".\").resolve(name + \".\" + Phase.RUN.suffix + \".err\"));\n+                if (ErrorTolerance.isReliable(goldOut) && ErrorTolerance.isReliable(goldErr)) {\n+                    String runExitValue = streamFile(Path.of(\".\"), name, Phase.RUN, \"exit\").findFirst().get();\n+                    Asserts.assertEQ(goldExitValue, runExitValue, \"Exit codes mismatch\");\n+\n+                    ErrorTolerance.assertIsAcceptable(\n+                            Paths.get(Utils.TEST_SRC).resolve(name + \".\" + Phase.GOLD_RUN.suffix + \".err\"),\n+                            Paths.get(\".\").resolve(name + \".\" + Phase.RUN.suffix + \".err\"));\n+\n+                    ErrorTolerance.assertIsAcceptable(\n+                            Paths.get(Utils.TEST_SRC).resolve(name + \".\" + Phase.GOLD_RUN.suffix + \".out\"),\n+                            Paths.get(\".\").resolve(name + \".\" + Phase.RUN.suffix + \".out\"));\n+                }\n@@ -68,3 +77,0 @@\n-                ErrorTolerance.assertIsAcceptable(\n-                    Paths.get(Utils.TEST_SRC).resolve(name + \".\" + Phase.GOLD_RUN.suffix + \".out\"),\n-                    Paths.get(\".\").resolve(name + \".\" + Phase.RUN.suffix + \".out\"));\n","filename":"test\/hotspot\/jtreg\/testlibrary\/jittester\/src\/jdk\/test\/lib\/jittester\/jtreg\/JitTesterDriver.java","additions":17,"deletions":11,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -214,1 +214,56 @@\n-        ErrorTolerance.assertIsAcceptable(\"\", Arrays.stream(run), Arrays.stream(gold));\n+        ErrorTolerance.assertIsAcceptable(\"\", Arrays.stream(gold), Arrays.stream(run));\n+    }\n+\n+    @Test\n+    public void goldHaveStackOverflowWhileRunDoesnt() {\n+        String[] gold = new String[] {\n+            \"[Fuzzer] End of execution.\",\n+            \"[Fuzzer] Field field_0: 0\",\n+            \"[Fuzzer] StackOverFlowError caught.\",\n+            \"[Fuzzer] Field traceCount: 2238\",\n+        };\n+\n+        String[] run = new String[] {\n+            \"[Fuzzer] traceID27\",\n+            \"[Fuzzer] Field field_0: 0\",\n+            \"[Fuzzer] Field traceCount: 7919\",\n+            \"[Fuzzer] traceID2\",\n+            \"[Fuzzer] Field field_0: 0\",\n+            \"[Fuzzer] Field traceCount: 15838\",\n+            \"[Fuzzer] traceID0\",\n+            \"[Fuzzer] Field field_0: 0\",\n+            \"[Fuzzer] Field traceCount: 23757\",\n+            \"[Fuzzer] traceID28\",\n+            \"[Fuzzer] Field field_0: 0\",\n+            \"[Fuzzer] Field traceCount: 31676\",\n+            \"[Fuzzer] traceID27\",\n+            \"[Fuzzer] Field field_0: 0\",\n+            \"[Fuzzer] Field traceCount: 39595\",\n+            \"[Fuzzer] traceID2\",\n+            \"[Fuzzer] Field field_0: 0\",\n+            \"[Fuzzer] Field traceCount: 47514\",\n+            \"[Fuzzer] traceID0\",\n+            \"[Fuzzer] Field field_0: 0\",\n+            \"[Fuzzer] Field traceCount: 55433\",\n+            \"[Fuzzer] traceID28\",\n+            \"[Fuzzer] Field field_0: 0\",\n+            \"[Fuzzer] Field traceCount: 63352\",\n+            \"[Fuzzer] traceID27\",\n+            \"[Fuzzer] Field field_0: 0\",\n+            \"[Fuzzer] Field traceCount: 71271\",\n+            \"[Fuzzer] traceID2\",\n+            \"[Fuzzer] Field field_0: 0\",\n+            \"[Fuzzer] Field traceCount: 79190\",\n+            \"[Fuzzer] traceID0\",\n+            \"[Fuzzer] Field field_0: 0\",\n+            \"[Fuzzer] Field traceCount: 87109\",\n+            \"[Fuzzer] traceID28\",\n+            \"[Fuzzer] Field field_0: 0\",\n+            \"[Fuzzer] Field traceCount: 95028\",\n+            \"[Fuzzer] traceID27\",\n+            \"[Fuzzer] Field field_0: 0\",\n+            \"[Fuzzer] Field traceCount: 102947\",\n+            \"[Fuzzer] trace max reached, exit.\",\n+        };\n+\n+        ErrorTolerance.assertIsAcceptable(\"\", Arrays.stream(gold), Arrays.stream(run));\n","filename":"test\/lib-test\/jdk\/test\/lib\/jittester\/ErrorToleranceTest.java","additions":56,"deletions":1,"binary":false,"changes":57,"status":"modified"}]}