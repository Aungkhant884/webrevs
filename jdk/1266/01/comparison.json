{"files":[{"patch":"@@ -8059,0 +8059,19 @@\n+void Assembler::fld_x(Address adr) {\n+  InstructionMark im(this);\n+  emit_int8((unsigned char)0xDB);\n+  emit_operand32(rbp, adr);\n+}\n+\n+void Assembler::fstp_x(Address adr) {\n+  InstructionMark im(this);\n+  emit_int8((unsigned char)0xDB);\n+  emit_operand32(rdi, adr);\n+}\n+\n+void Assembler::emit_operand32(Register reg, Address adr) {\n+  assert(reg->encoding() < 8, \"no extended registers\");\n+  assert(!adr.base_needs_rex() && !adr.index_needs_rex(), \"no extended registers\");\n+  emit_operand(reg, adr._base, adr._index, adr._scale, adr._disp,\n+               adr._rspec);\n+}\n+\n@@ -9879,19 +9898,0 @@\n-void Assembler::fld_x(Address adr) {\n-  InstructionMark im(this);\n-  emit_int8((unsigned char)0xDB);\n-  emit_operand32(rbp, adr);\n-}\n-\n-void Assembler::fstp_x(Address adr) {\n-  InstructionMark im(this);\n-  emit_int8((unsigned char)0xDB);\n-  emit_operand32(rdi, adr);\n-}\n-\n-void Assembler::emit_operand32(Register reg, Address adr) {\n-  assert(reg->encoding() < 8, \"no extended registers\");\n-  assert(!adr.base_needs_rex() && !adr.index_needs_rex(), \"no extended registers\");\n-  emit_operand(reg, adr._base, adr._index, adr._scale, adr._disp,\n-               adr._rspec);\n-}\n-\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -495,0 +495,4 @@\n+void MacroAssembler::reset_last_Java_frame(bool clear_fp) {\n+  reset_last_Java_frame(r15_thread, clear_fp);\n+}\n+\n@@ -2716,4 +2720,0 @@\n-void MacroAssembler::reset_last_Java_frame(bool clear_fp) {\n-  reset_last_Java_frame(r15_thread, clear_fp);\n-}\n-\n@@ -2726,1 +2726,1 @@\n-  movslq(Address(java_thread, JavaThread::last_Java_sp_offset()), NULL_WORD);\n+  movptr(Address(java_thread, JavaThread::last_Java_sp_offset()), NULL_WORD);\n@@ -2730,1 +2730,1 @@\n-    movslq(Address(java_thread, JavaThread::last_Java_fp_offset()), NULL_WORD);\n+    movptr(Address(java_thread, JavaThread::last_Java_fp_offset()), NULL_WORD);\n@@ -2733,2 +2733,2 @@\n-  movslq(Address(java_thread, JavaThread::last_Java_pc_offset()), NULL_WORD);\n-  movslq(Address(java_thread, JavaThread::saved_rbp_address_offset()), NULL_WORD);\n+  movptr(Address(java_thread, JavaThread::last_Java_pc_offset()), NULL_WORD);\n+  movptr(Address(java_thread, JavaThread::saved_rbp_address_offset()), NULL_WORD);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2988,0 +2988,8 @@\n+\n+BufferBlob* SharedRuntime::make_native_invoker(address call_target,\n+                                                int shadow_space_bytes,\n+                                                const GrowableArray<VMReg>& input_registers,\n+                                                const GrowableArray<VMReg>& output_registers) {\n+  ShouldNotCallThis();\n+  return nullptr;\n+}\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#ifdef _LP64\n@@ -130,0 +131,3 @@\n+#else\n+  __ hlt(); \/\/ NYI\n+#endif\n","filename":"src\/hotspot\/cpu\/x86\/universalNativeInvoker_x86.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+#ifdef _LP64\n@@ -136,0 +137,3 @@\n+#else\n+  __ hlt(); \/\/ NYI\n+#endif\n","filename":"src\/hotspot\/cpu\/x86\/universalUpcallHandler_x86.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -314,0 +314,5 @@\n+int MachCallNativeNode::ret_addr_offset() {\n+  ShouldNotCallThis();\n+  return -1;\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/x86_32.ad","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-JNI_ENTRY(void, ProgrammableUpcallHandler::upcall_helper(JNIEnv* env, jobject rec, address buff))\n+JNI_ENTRY_CPP_NOENV(void, ProgrammableUpcallHandler::upcall_helper(jobject rec, address buff))\n@@ -52,1 +52,0 @@\n-  JNIEnv* p_env = nullptr;\n@@ -55,0 +54,1 @@\n+    JNIEnv* p_env = nullptr; \/\/ unused\n@@ -59,2 +59,0 @@\n-  } else {\n-    p_env = thread->as_Java_thread()->jni_environment();\n@@ -63,1 +61,1 @@\n-  upcall_helper(p_env, rec, buff);\n+  upcall_helper(rec, buff);\n","filename":"src\/hotspot\/share\/prims\/universalUpcallHandler.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-  static void upcall_helper(JNIEnv* env, jobject rec, address buff);\n+  static void upcall_helper(jobject rec, address buff);\n","filename":"src\/hotspot\/share\/prims\/universalUpcallHandler.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -433,0 +433,5 @@\n+#define JNI_ENTRY_BASE(result_type, header, thread)                  \\\n+  ThreadInVMfromNative __tiv(thread);                                \\\n+  debug_only(VMNativeEntryWrapper __vew;)                            \\\n+  VM_ENTRY_BASE(result_type, header, thread)\n+\n@@ -442,3 +447,7 @@\n-    ThreadInVMfromNative __tiv(thread);                              \\\n-    debug_only(VMNativeEntryWrapper __vew;)                          \\\n-    VM_ENTRY_BASE(result_type, header, thread)\n+    JNI_ENTRY_BASE(result_type, header, thread)\n+\n+#define JNI_ENTRY_CPP_NOENV(result_type, header)                     \\\n+  result_type header { {                                             \\\n+    JavaThread* thread = JavaThread::current();                      \\\n+    JNI_ENTRY_BASE(result_type, header, thread)                      \\\n+    WeakPreserveExceptionMark __wem(thread);\n","filename":"src\/hotspot\/share\/runtime\/interfaceSupport.inline.hpp","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-        for (int i = 0; i < (cbNeeded \/ sizeof(HMODULE)); i++) {\n+        for (size_t i = 0; i < (cbNeeded \/ sizeof(HMODULE)); i++) {\n","filename":"src\/java.base\/windows\/native\/libjava\/jni_util_md.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -97,0 +97,2 @@\n+ * <p>Note that on unsupported platforms, this class will fail to initialize.\n+ *\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/CLinker.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,4 @@\n+import jdk.internal.foreign.abi.SharedUtils;\n+\n+import static jdk.incubator.foreign.MemoryLayouts.ADDRESS;\n+\n@@ -38,1 +42,4 @@\n-        if (arch.equals(\"amd64\") || arch.equals(\"x86_64\")) {\n+        long addressSize = ADDRESS.bitSize();\n+        \/\/ might be running in a 32-bit VM on a 64-bit platform.\n+        \/\/ addressSize will be correctly 32\n+        if ((arch.equals(\"amd64\") || arch.equals(\"x86_64\")) && addressSize == 64) {\n@@ -47,1 +54,2 @@\n-            throw new ExceptionInInitializerError(\"Unsupported os or arch: \" + os + \", \" + arch);\n+            throw new ExceptionInInitializerError(\n+                \"Unsupported os, arch, or address size: \" + os + \", \" + arch + \", \" + addressSize);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/CABI.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -144,1 +144,1 @@\n-        public static final ValueLayout C_POINTER = ofPointer(LITTLE_ENDIAN, ADDRESS.bitSize());\n+        public static final ValueLayout C_POINTER = ofPointer(LITTLE_ENDIAN, 64);\n@@ -204,1 +204,1 @@\n-        public static final ValueLayout C_POINTER = ofPointer(LITTLE_ENDIAN, ADDRESS.bitSize());\n+        public static final ValueLayout C_POINTER = ofPointer(LITTLE_ENDIAN, 64);\n@@ -269,1 +269,1 @@\n-        public static final ValueLayout C_POINTER = ofPointer(LITTLE_ENDIAN, ADDRESS.bitSize());\n+        public static final ValueLayout C_POINTER = ofPointer(LITTLE_ENDIAN, 64);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/PlatformLayouts.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @requires sun.arch.data.model == \"64\"\n","filename":"test\/jdk\/java\/foreign\/StdLibTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @requires sun.arch.data.model == \"64\"\n","filename":"test\/jdk\/java\/foreign\/TestCircularInit1.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @requires sun.arch.data.model == \"64\"\n","filename":"test\/jdk\/java\/foreign\/TestCircularInit2.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- *\n+ * @requires sun.arch.data.model == \"64\"\n","filename":"test\/jdk\/java\/foreign\/TestCondy.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @requires sun.arch.data.model == \"64\"\n","filename":"test\/jdk\/java\/foreign\/TestDowncall.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @requires sun.arch.data.model == \"64\"\n","filename":"test\/jdk\/java\/foreign\/TestFunctionDescriptor.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- *\n+ * @requires sun.arch.data.model == \"64\"\n","filename":"test\/jdk\/java\/foreign\/TestIllegalLink.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @requires sun.arch.data.model == \"64\"\n@@ -44,0 +45,5 @@\n+\/\/ FYI this test is run on 64-bit platforms only for now,\n+\/\/ since the windows 32-bit linker fails and there\n+\/\/ is some fallback behaviour to use the 64-bit linker,\n+\/\/ where cygwin gets in the way and we accidentally pick up its\n+\/\/ link.exe\n","filename":"test\/jdk\/java\/foreign\/TestLibraryLookup.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @requires sun.arch.data.model == \"64\"\n","filename":"test\/jdk\/java\/foreign\/TestNative.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -62,0 +62,1 @@\n+    final static Class<?> ADDRESS_CARRIER = MemoryLayouts.ADDRESS.bitSize() == 64 ? long.class : int.class;\n@@ -229,1 +230,1 @@\n-                        (Function<MemoryLayout, VarHandle>)l -> MemoryHandles.asAddressVarHandle(l.varHandle(long.class)) },\n+                        (Function<MemoryLayout, VarHandle>)l -> MemoryHandles.asAddressVarHandle(l.varHandle(ADDRESS_CARRIER)) },\n@@ -255,1 +256,1 @@\n-                        (Function<MemoryLayout, VarHandle>)l -> MemoryHandles.asAddressVarHandle(l.varHandle(long.class)) },\n+                        (Function<MemoryLayout, VarHandle>)l -> MemoryHandles.asAddressVarHandle(l.varHandle(ADDRESS_CARRIER)) },\n@@ -281,1 +282,1 @@\n-                        (Function<MemoryLayout, VarHandle>)l -> MemoryHandles.asAddressVarHandle(l.varHandle(long.class)) },\n+                        (Function<MemoryLayout, VarHandle>)l -> MemoryHandles.asAddressVarHandle(l.varHandle(ADDRESS_CARRIER)) },\n@@ -307,1 +308,1 @@\n-                        (Function<MemoryLayout, VarHandle>)l -> MemoryHandles.asAddressVarHandle(l.varHandle(long.class)) },\n+                        (Function<MemoryLayout, VarHandle>)l -> MemoryHandles.asAddressVarHandle(l.varHandle(ADDRESS_CARRIER)) },\n","filename":"test\/jdk\/java\/foreign\/TestNativeScope.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ *  This code is free software; you can redistribute it and\/or modify it\n+ *  under the terms of the GNU General Public License version 2 only, as\n+ *  published by the Free Software Foundation.\n+ *\n+ *  This code is distributed in the hope that it will be useful, but WITHOUT\n+ *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ *  version 2 for more details (a copy is included in the LICENSE file that\n+ *  accompanied this code).\n+ *\n+ *  You should have received a copy of the GNU General Public License version\n+ *  2 along with this work; if not, write to the Free Software Foundation,\n+ *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ *  or visit www.oracle.com if you need additional information or have any\n+ *  questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @requires sun.arch.data.model == \"32\"\n+ * @modules jdk.incubator.foreign\/jdk.internal.foreign\n+ * @run testng\/othervm -Dforeign.restricted=permit TestUnsupportedPlatform\n+ *\/\n+\n+import jdk.incubator.foreign.CLinker;\n+import jdk.incubator.foreign.MemoryLayout;\n+import jdk.incubator.foreign.NativeScope;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static jdk.incubator.foreign.MemoryAddress.NULL;\n+import static jdk.incubator.foreign.MemoryLayouts.JAVA_BYTE;\n+import static org.testng.Assert.assertNull;\n+\n+\/\/ tests run on 32-bit platforms, which are currently not supported\n+public class TestUnsupportedPlatform {\n+\n+    @Test(expectedExceptions = ExceptionInInitializerError.class)\n+    public void testNoInitialization() {\n+        CLinker.getInstance(); \/\/ trigger initialization\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/foreign\/TestUnsupportedPlatform.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"},{"patch":"@@ -27,0 +27,1 @@\n+ * @requires sun.arch.data.model == \"64\"\n","filename":"test\/jdk\/java\/foreign\/TestUpcall.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @requires sun.arch.data.model == \"64\"\n","filename":"test\/jdk\/java\/foreign\/TestUpcallHighArity.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @requires sun.arch.data.model == \"64\"\n","filename":"test\/jdk\/java\/foreign\/TestUpcallStubs.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @requires sun.arch.data.model == \"64\"\n","filename":"test\/jdk\/java\/foreign\/TestVarArgs.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @requires sun.arch.data.model == \"64\"\n","filename":"test\/jdk\/java\/foreign\/stackwalk\/TestStackWalk.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @requires sun.arch.data.model == \"64\"\n","filename":"test\/jdk\/java\/foreign\/valist\/VaListTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+#include \"jlong.h\"\n@@ -70,1 +71,1 @@\n-  return (jlong) cb;\n+  return ptr_to_jlong(cb);\n@@ -75,1 +76,1 @@\n-    JNICB jniCb = (JNICB) cb;\n+    JNICB jniCb = jlong_to_ptr(cb);\n@@ -81,1 +82,1 @@\n-    JNICB jniCb = (JNICB) cb;\n+    JNICB jniCb = jlong_to_ptr(cb);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/libUpcallsJNI.c","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"}]}