{"files":[{"patch":"@@ -8059,0 +8059,19 @@\n+void Assembler::fld_x(Address adr) {\n+  InstructionMark im(this);\n+  emit_int8((unsigned char)0xDB);\n+  emit_operand32(rbp, adr);\n+}\n+\n+void Assembler::fstp_x(Address adr) {\n+  InstructionMark im(this);\n+  emit_int8((unsigned char)0xDB);\n+  emit_operand32(rdi, adr);\n+}\n+\n+void Assembler::emit_operand32(Register reg, Address adr) {\n+  assert(reg->encoding() < 8, \"no extended registers\");\n+  assert(!adr.base_needs_rex() && !adr.index_needs_rex(), \"no extended registers\");\n+  emit_operand(reg, adr._base, adr._index, adr._scale, adr._disp,\n+               adr._rspec);\n+}\n+\n@@ -9879,19 +9898,0 @@\n-void Assembler::fld_x(Address adr) {\n-  InstructionMark im(this);\n-  emit_int8((unsigned char)0xDB);\n-  emit_operand32(rbp, adr);\n-}\n-\n-void Assembler::fstp_x(Address adr) {\n-  InstructionMark im(this);\n-  emit_int8((unsigned char)0xDB);\n-  emit_operand32(rdi, adr);\n-}\n-\n-void Assembler::emit_operand32(Register reg, Address adr) {\n-  assert(reg->encoding() < 8, \"no extended registers\");\n-  assert(!adr.base_needs_rex() && !adr.index_needs_rex(), \"no extended registers\");\n-  emit_operand(reg, adr._base, adr._index, adr._scale, adr._disp,\n-               adr._rspec);\n-}\n-\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -495,0 +495,4 @@\n+void MacroAssembler::reset_last_Java_frame(bool clear_fp) {\n+  reset_last_Java_frame(r15_thread, clear_fp);\n+}\n+\n@@ -2716,4 +2720,0 @@\n-void MacroAssembler::reset_last_Java_frame(bool clear_fp) {\n-  reset_last_Java_frame(r15_thread, clear_fp);\n-}\n-\n@@ -2726,1 +2726,1 @@\n-  movslq(Address(java_thread, JavaThread::last_Java_sp_offset()), NULL_WORD);\n+  movptr(Address(java_thread, JavaThread::last_Java_sp_offset()), NULL_WORD);\n@@ -2730,1 +2730,1 @@\n-    movslq(Address(java_thread, JavaThread::last_Java_fp_offset()), NULL_WORD);\n+    movptr(Address(java_thread, JavaThread::last_Java_fp_offset()), NULL_WORD);\n@@ -2733,2 +2733,2 @@\n-  movslq(Address(java_thread, JavaThread::last_Java_pc_offset()), NULL_WORD);\n-  movslq(Address(java_thread, JavaThread::saved_rbp_address_offset()), NULL_WORD);\n+  movptr(Address(java_thread, JavaThread::last_Java_pc_offset()), NULL_WORD);\n+  movptr(Address(java_thread, JavaThread::saved_rbp_address_offset()), NULL_WORD);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2988,0 +2988,8 @@\n+\n+BufferBlob* SharedRuntime::make_native_invoker(address call_target,\n+                                                int shadow_space_bytes,\n+                                                const GrowableArray<VMReg>& input_registers,\n+                                                const GrowableArray<VMReg>& output_registers) {\n+  ShouldNotCallThis();\n+  return nullptr;\n+}\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#ifdef _LP64\n@@ -130,0 +131,3 @@\n+#else\n+  Unimplemented();\n+#endif\n","filename":"src\/hotspot\/cpu\/x86\/universalNativeInvoker_x86.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+#ifdef _LP64\n@@ -136,0 +137,3 @@\n+#else\n+  Unimplemented();\n+#endif\n","filename":"src\/hotspot\/cpu\/x86\/universalUpcallHandler_x86.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -314,0 +314,5 @@\n+int MachCallNativeNode::ret_addr_offset() {\n+  ShouldNotCallThis();\n+  return -1;\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/x86_32.ad","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-JNI_ENTRY(void, ProgrammableUpcallHandler::upcall_helper(JNIEnv* env, jobject rec, address buff))\n+JNI_ENTRY_CPP_NOENV(void, ProgrammableUpcallHandler::upcall_helper(jobject rec, address buff))\n@@ -52,1 +52,0 @@\n-  JNIEnv* p_env = nullptr;\n@@ -55,0 +54,1 @@\n+    JNIEnv* p_env = nullptr; \/\/ unused\n@@ -59,2 +59,0 @@\n-  } else {\n-    p_env = thread->as_Java_thread()->jni_environment();\n@@ -63,1 +61,1 @@\n-  upcall_helper(p_env, rec, buff);\n+  upcall_helper(rec, buff);\n","filename":"src\/hotspot\/share\/prims\/universalUpcallHandler.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-  static void upcall_helper(JNIEnv* env, jobject rec, address buff);\n+  static void upcall_helper(jobject rec, address buff);\n","filename":"src\/hotspot\/share\/prims\/universalUpcallHandler.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -433,0 +433,5 @@\n+#define JNI_ENTRY_BASE(result_type, header, thread)                  \\\n+  ThreadInVMfromNative __tiv(thread);                                \\\n+  debug_only(VMNativeEntryWrapper __vew;)                            \\\n+  VM_ENTRY_BASE(result_type, header, thread)\n+\n@@ -442,3 +447,7 @@\n-    ThreadInVMfromNative __tiv(thread);                              \\\n-    debug_only(VMNativeEntryWrapper __vew;)                          \\\n-    VM_ENTRY_BASE(result_type, header, thread)\n+    JNI_ENTRY_BASE(result_type, header, thread)\n+\n+#define JNI_ENTRY_CPP_NOENV(result_type, header)                     \\\n+  result_type header { {                                             \\\n+    JavaThread* thread = JavaThread::current();                      \\\n+    JNI_ENTRY_BASE(result_type, header, thread)                      \\\n+    WeakPreserveExceptionMark __wem(thread);\n","filename":"src\/hotspot\/share\/runtime\/interfaceSupport.inline.hpp","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-        for (int i = 0; i < (cbNeeded \/ sizeof(HMODULE)); i++) {\n+        for (size_t i = 0; i < (cbNeeded \/ sizeof(HMODULE)); i++) {\n","filename":"src\/java.base\/windows\/native\/libjava\/jni_util_md.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+#include \"jlong.h\"\n@@ -70,1 +71,1 @@\n-  return (jlong) cb;\n+  return ptr_to_jlong(cb);\n@@ -75,1 +76,1 @@\n-    JNICB jniCb = (JNICB) cb;\n+    JNICB jniCb = jlong_to_ptr(cb);\n@@ -81,1 +82,1 @@\n-    JNICB jniCb = (JNICB) cb;\n+    JNICB jniCb = jlong_to_ptr(cb);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/libUpcallsJNI.c","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"}]}