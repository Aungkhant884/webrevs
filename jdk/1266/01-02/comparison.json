{"files":[{"patch":"@@ -97,2 +97,0 @@\n- * <p>Note that on unsupported platforms, this class will fail to initialize.\n- *\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/incubator\/foreign\/CLinker.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,4 +28,0 @@\n-import jdk.internal.foreign.abi.SharedUtils;\n-\n-import static jdk.incubator.foreign.MemoryLayouts.ADDRESS;\n-\n@@ -42,4 +38,1 @@\n-        long addressSize = ADDRESS.bitSize();\n-        \/\/ might be running in a 32-bit VM on a 64-bit platform.\n-        \/\/ addressSize will be correctly 32\n-        if ((arch.equals(\"amd64\") || arch.equals(\"x86_64\")) && addressSize == 64) {\n+        if (arch.equals(\"amd64\") || arch.equals(\"x86_64\")) {\n@@ -54,2 +47,1 @@\n-            throw new ExceptionInInitializerError(\n-                \"Unsupported os, arch, or address size: \" + os + \", \" + arch + \", \" + addressSize);\n+            throw new ExceptionInInitializerError(\"Unsupported os or arch: \" + os + \", \" + arch);\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/CABI.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -144,1 +144,1 @@\n-        public static final ValueLayout C_POINTER = ofPointer(LITTLE_ENDIAN, 64);\n+        public static final ValueLayout C_POINTER = ofPointer(LITTLE_ENDIAN, ADDRESS.bitSize());\n@@ -204,1 +204,1 @@\n-        public static final ValueLayout C_POINTER = ofPointer(LITTLE_ENDIAN, 64);\n+        public static final ValueLayout C_POINTER = ofPointer(LITTLE_ENDIAN, ADDRESS.bitSize());\n@@ -269,1 +269,1 @@\n-        public static final ValueLayout C_POINTER = ofPointer(LITTLE_ENDIAN, 64);\n+        public static final ValueLayout C_POINTER = ofPointer(LITTLE_ENDIAN, ADDRESS.bitSize());\n","filename":"src\/jdk.incubator.foreign\/share\/classes\/jdk\/internal\/foreign\/PlatformLayouts.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n- * @requires sun.arch.data.model == \"64\"\n","filename":"test\/jdk\/java\/foreign\/StdLibTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n- * @requires sun.arch.data.model == \"64\"\n","filename":"test\/jdk\/java\/foreign\/TestCircularInit1.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n- * @requires sun.arch.data.model == \"64\"\n","filename":"test\/jdk\/java\/foreign\/TestCircularInit2.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @requires sun.arch.data.model == \"64\"\n+ *\n","filename":"test\/jdk\/java\/foreign\/TestCondy.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n- * @requires sun.arch.data.model == \"64\"\n","filename":"test\/jdk\/java\/foreign\/TestDowncall.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n- * @requires sun.arch.data.model == \"64\"\n","filename":"test\/jdk\/java\/foreign\/TestFunctionDescriptor.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @requires sun.arch.data.model == \"64\"\n+ *\n","filename":"test\/jdk\/java\/foreign\/TestIllegalLink.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n- * @requires sun.arch.data.model == \"64\"\n@@ -45,5 +44,0 @@\n-\/\/ FYI this test is run on 64-bit platforms only for now,\n-\/\/ since the windows 32-bit linker fails and there\n-\/\/ is some fallback behaviour to use the 64-bit linker,\n-\/\/ where cygwin gets in the way and we accidentally pick up its\n-\/\/ link.exe\n","filename":"test\/jdk\/java\/foreign\/TestLibraryLookup.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n- * @requires sun.arch.data.model == \"64\"\n","filename":"test\/jdk\/java\/foreign\/TestNative.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -62,1 +62,0 @@\n-    final static Class<?> ADDRESS_CARRIER = MemoryLayouts.ADDRESS.bitSize() == 64 ? long.class : int.class;\n@@ -230,1 +229,1 @@\n-                        (Function<MemoryLayout, VarHandle>)l -> MemoryHandles.asAddressVarHandle(l.varHandle(ADDRESS_CARRIER)) },\n+                        (Function<MemoryLayout, VarHandle>)l -> MemoryHandles.asAddressVarHandle(l.varHandle(long.class)) },\n@@ -256,1 +255,1 @@\n-                        (Function<MemoryLayout, VarHandle>)l -> MemoryHandles.asAddressVarHandle(l.varHandle(ADDRESS_CARRIER)) },\n+                        (Function<MemoryLayout, VarHandle>)l -> MemoryHandles.asAddressVarHandle(l.varHandle(long.class)) },\n@@ -282,1 +281,1 @@\n-                        (Function<MemoryLayout, VarHandle>)l -> MemoryHandles.asAddressVarHandle(l.varHandle(ADDRESS_CARRIER)) },\n+                        (Function<MemoryLayout, VarHandle>)l -> MemoryHandles.asAddressVarHandle(l.varHandle(long.class)) },\n@@ -308,1 +307,1 @@\n-                        (Function<MemoryLayout, VarHandle>)l -> MemoryHandles.asAddressVarHandle(l.varHandle(ADDRESS_CARRIER)) },\n+                        (Function<MemoryLayout, VarHandle>)l -> MemoryHandles.asAddressVarHandle(l.varHandle(long.class)) },\n","filename":"test\/jdk\/java\/foreign\/TestNativeScope.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1,54 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- *  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- *  This code is free software; you can redistribute it and\/or modify it\n- *  under the terms of the GNU General Public License version 2 only, as\n- *  published by the Free Software Foundation.\n- *\n- *  This code is distributed in the hope that it will be useful, but WITHOUT\n- *  ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- *  FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- *  version 2 for more details (a copy is included in the LICENSE file that\n- *  accompanied this code).\n- *\n- *  You should have received a copy of the GNU General Public License version\n- *  2 along with this work; if not, write to the Free Software Foundation,\n- *  Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- *   Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- *  or visit www.oracle.com if you need additional information or have any\n- *  questions.\n- *\n- *\/\n-\n-\/*\n- * @test\n- * @requires sun.arch.data.model == \"32\"\n- * @modules jdk.incubator.foreign\/jdk.internal.foreign\n- * @run testng\/othervm -Dforeign.restricted=permit TestUnsupportedPlatform\n- *\/\n-\n-import jdk.incubator.foreign.CLinker;\n-import jdk.incubator.foreign.MemoryLayout;\n-import jdk.incubator.foreign.NativeScope;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n-\n-import java.lang.reflect.Field;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import static jdk.incubator.foreign.MemoryAddress.NULL;\n-import static jdk.incubator.foreign.MemoryLayouts.JAVA_BYTE;\n-import static org.testng.Assert.assertNull;\n-\n-\/\/ tests run on 32-bit platforms, which are currently not supported\n-public class TestUnsupportedPlatform {\n-\n-    @Test(expectedExceptions = ExceptionInInitializerError.class)\n-    public void testNoInitialization() {\n-        CLinker.getInstance(); \/\/ trigger initialization\n-    }\n-\n-}\n","filename":"test\/jdk\/java\/foreign\/TestUnsupportedPlatform.java","additions":0,"deletions":54,"binary":false,"changes":54,"status":"deleted"},{"patch":"@@ -27,1 +27,0 @@\n- * @requires sun.arch.data.model == \"64\"\n","filename":"test\/jdk\/java\/foreign\/TestUpcall.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n- * @requires sun.arch.data.model == \"64\"\n","filename":"test\/jdk\/java\/foreign\/TestUpcallHighArity.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n- * @requires sun.arch.data.model == \"64\"\n","filename":"test\/jdk\/java\/foreign\/TestUpcallStubs.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n- * @requires sun.arch.data.model == \"64\"\n","filename":"test\/jdk\/java\/foreign\/TestVarArgs.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n- * @requires sun.arch.data.model == \"64\"\n","filename":"test\/jdk\/java\/foreign\/stackwalk\/TestStackWalk.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n- * @requires sun.arch.data.model == \"64\"\n","filename":"test\/jdk\/java\/foreign\/valist\/VaListTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}