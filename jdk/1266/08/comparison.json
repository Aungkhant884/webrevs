{"files":[{"patch":"@@ -8043,0 +8043,19 @@\n+void Assembler::fld_x(Address adr) {\n+  InstructionMark im(this);\n+  emit_int8((unsigned char)0xDB);\n+  emit_operand32(rbp, adr);\n+}\n+\n+void Assembler::fstp_x(Address adr) {\n+  InstructionMark im(this);\n+  emit_int8((unsigned char)0xDB);\n+  emit_operand32(rdi, adr);\n+}\n+\n+void Assembler::emit_operand32(Register reg, Address adr) {\n+  assert(reg->encoding() < 8, \"no extended registers\");\n+  assert(!adr.base_needs_rex() && !adr.index_needs_rex(), \"no extended registers\");\n+  emit_operand(reg, adr._base, adr._index, adr._scale, adr._disp,\n+               adr._rspec);\n+}\n+\n@@ -9863,19 +9882,0 @@\n-void Assembler::fld_x(Address adr) {\n-  InstructionMark im(this);\n-  emit_int8((unsigned char)0xDB);\n-  emit_operand32(rbp, adr);\n-}\n-\n-void Assembler::fstp_x(Address adr) {\n-  InstructionMark im(this);\n-  emit_int8((unsigned char)0xDB);\n-  emit_operand32(rdi, adr);\n-}\n-\n-void Assembler::emit_operand32(Register reg, Address adr) {\n-  assert(reg->encoding() < 8, \"no extended registers\");\n-  assert(!adr.base_needs_rex() && !adr.index_needs_rex(), \"no extended registers\");\n-  emit_operand(reg, adr._base, adr._index, adr._scale, adr._disp,\n-               adr._rspec);\n-}\n-\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -748,0 +748,4 @@\n+void MacroAssembler::reset_last_Java_frame(bool clear_fp) {\n+  reset_last_Java_frame(r15_thread, clear_fp);\n+}\n+\n@@ -2716,4 +2720,0 @@\n-void MacroAssembler::reset_last_Java_frame(bool clear_fp) {\n-  reset_last_Java_frame(r15_thread, clear_fp);\n-}\n-\n@@ -2726,1 +2726,1 @@\n-  movslq(Address(java_thread, JavaThread::last_Java_sp_offset()), NULL_WORD);\n+  movptr(Address(java_thread, JavaThread::last_Java_sp_offset()), NULL_WORD);\n@@ -2730,1 +2730,1 @@\n-    movslq(Address(java_thread, JavaThread::last_Java_fp_offset()), NULL_WORD);\n+    movptr(Address(java_thread, JavaThread::last_Java_fp_offset()), NULL_WORD);\n@@ -2733,2 +2733,2 @@\n-  movslq(Address(java_thread, JavaThread::last_Java_pc_offset()), NULL_WORD);\n-  movslq(Address(java_thread, JavaThread::saved_rbp_address_offset()), NULL_WORD);\n+  movptr(Address(java_thread, JavaThread::last_Java_pc_offset()), NULL_WORD);\n+  movptr(Address(java_thread, JavaThread::saved_rbp_address_offset()), NULL_WORD);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2988,0 +2988,8 @@\n+\n+BufferBlob* SharedRuntime::make_native_invoker(address call_target,\n+                                                int shadow_space_bytes,\n+                                                const GrowableArray<VMReg>& input_registers,\n+                                                const GrowableArray<VMReg>& output_registers) {\n+  ShouldNotCallThis();\n+  return nullptr;\n+}\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,0 @@\n- * Copyright (c) 2020 SAP SE. All rights reserved.\n@@ -27,1 +26,4 @@\n-#include \"utilities\/debug.hpp\"\n+\n+void ProgrammableInvoker::Generator::generate() {\n+  Unimplemented();\n+}\n","filename":"src\/hotspot\/cpu\/x86\/universalNativeInvoker_x86_32.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"previous_filename":"src\/hotspot\/cpu\/ppc\/universalNativeInvoker_ppc.cpp","status":"copied"},{"patch":"","filename":"src\/hotspot\/cpu\/x86\/universalNativeInvoker_x86_64.cpp","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/hotspot\/cpu\/x86\/universalNativeInvoker_x86.cpp","status":"renamed"},{"patch":"@@ -28,1 +28,1 @@\n-  ShouldNotCallThis();\n+  Unimplemented();\n","filename":"src\/hotspot\/cpu\/x86\/universalUpcallHandler_x86_32.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"src\/hotspot\/cpu\/zero\/universalUpcallHandle_zero.cpp","status":"copied"},{"patch":"","filename":"src\/hotspot\/cpu\/x86\/universalUpcallHandler_x86_64.cpp","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/hotspot\/cpu\/x86\/universalUpcallHandler_x86.cpp","status":"renamed"},{"patch":"@@ -314,0 +314,5 @@\n+int MachCallNativeNode::ret_addr_offset() {\n+  ShouldNotCallThis();\n+  return -1;\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/x86_32.ad","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -36,1 +36,3 @@\n-JNI_ENTRY(void, ProgrammableUpcallHandler::upcall_helper(JNIEnv* env, jobject rec, address buff))\n+void ProgrammableUpcallHandler::upcall_helper(JavaThread* thread, jobject rec, address buff) {\n+  JavaThread* THREAD = thread;\n+  ThreadInVMfromNative tiv(THREAD);\n@@ -39,1 +41,1 @@\n-  ResourceMark rm(thread);\n+  ResourceMark rm(THREAD);\n@@ -46,2 +48,2 @@\n-  JavaCalls::call_static(&result, upcall_method.klass, upcall_method.name, upcall_method.sig, &args, thread);\n-JNI_END\n+  JavaCalls::call_static(&result, upcall_method.klass, upcall_method.name, upcall_method.sig, &args, CATCH);\n+}\n@@ -52,1 +54,0 @@\n-  JNIEnv* p_env = nullptr;\n@@ -55,0 +56,1 @@\n+    JNIEnv* p_env = nullptr; \/\/ unused\n@@ -59,2 +61,0 @@\n-  } else {\n-    p_env = thread->as_Java_thread()->jni_environment();\n@@ -63,1 +63,1 @@\n-  upcall_helper(p_env, rec, buff);\n+  upcall_helper(thread->as_Java_thread(), rec, buff);\n","filename":"src\/hotspot\/share\/prims\/universalUpcallHandler.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+class JavaThread;\n+\n@@ -44,1 +46,1 @@\n-  static void upcall_helper(JNIEnv* env, jobject rec, address buff);\n+  static void upcall_helper(JavaThread* thread, jobject rec, address buff);\n","filename":"src\/hotspot\/share\/prims\/universalUpcallHandler.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-        for (int i = 0; i < (cbNeeded \/ sizeof(HMODULE)); i++) {\n+        for (size_t i = 0; i < (cbNeeded \/ sizeof(HMODULE)); i++) {\n","filename":"src\/java.base\/windows\/native\/libjava\/jni_util_md.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+#include \"jlong.h\"\n@@ -70,1 +71,1 @@\n-  return (jlong) cb;\n+  return ptr_to_jlong(cb);\n@@ -75,1 +76,1 @@\n-    JNICB jniCb = (JNICB) cb;\n+    JNICB jniCb = jlong_to_ptr(cb);\n@@ -81,1 +82,1 @@\n-    JNICB jniCb = (JNICB) cb;\n+    JNICB jniCb = jlong_to_ptr(cb);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/libUpcallsJNI.c","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"}]}