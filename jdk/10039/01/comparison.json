{"files":[{"patch":"@@ -978,1 +978,1 @@\n-        JVMCIENV->invalidate_nmethod_mirror(nmethod_mirror, JVMCI_CHECK_0);\n+        JVMCIENV->invalidate_nmethod_mirror(nmethod_mirror, true, JVMCI_CHECK_0);\n@@ -1148,1 +1148,1 @@\n-C2V_VMENTRY(void, invalidateHotSpotNmethod, (JNIEnv* env, jobject, jobject hs_nmethod))\n+C2V_VMENTRY(void, invalidateHotSpotNmethod, (JNIEnv* env, jobject, jobject hs_nmethod, jboolean deoptimize))\n@@ -1150,1 +1150,1 @@\n-  JVMCIENV->invalidate_nmethod_mirror(nmethod_mirror, JVMCI_CHECK);\n+  JVMCIENV->invalidate_nmethod_mirror(nmethod_mirror, deoptimize, JVMCI_CHECK);\n@@ -2865,1 +2865,1 @@\n-  {CC \"invalidateHotSpotNmethod\",                     CC \"(\" HS_NMETHOD \")V\",                                                               FN_PTR(invalidateHotSpotNmethod)},\n+  {CC \"invalidateHotSpotNmethod\",                     CC \"(\" HS_NMETHOD \"Z)V\",                                                              FN_PTR(invalidateHotSpotNmethod)},\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1513,1 +1513,1 @@\n-void JVMCIEnv::invalidate_nmethod_mirror(JVMCIObject mirror, JVMCI_TRAPS) {\n+void JVMCIEnv::invalidate_nmethod_mirror(JVMCIObject mirror, bool deoptimize, JVMCI_TRAPS) {\n@@ -1532,2 +1532,7 @@\n-  \/\/ Invalidating the HotSpotNmethod means we want the nmethod to be deoptimized.\n-  Deoptimization::deoptimize_all_marked(nm);\n+  if (!deoptimize) {\n+    \/\/ Prevent future executions of the nmethod but let current executions complete.\n+    nm->make_not_entrant();\n+} else {\n+    \/\/ We want the nmethod to be deoptimized immediately.\n+    Deoptimization::deoptimize_all_marked(nm);\n+  }\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.cpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -415,3 +415,5 @@\n-  \/\/ Deoptimizes the nmethod (if any) in the HotSpotNmethod.address\n-  \/\/ field of mirror. The field is subsequently zeroed.\n-  void invalidate_nmethod_mirror(JVMCIObject mirror, JVMCI_TRAPS);\n+  \/\/ Updates the nmethod (if any) in the HotSpotNmethod.address\n+  \/\/ field of `mirror` to prevent it from being called.\n+  \/\/ If `deoptimize` is true, the nmethod is immediately deoptimized.\n+  \/\/ The HotSpotNmethod.address field is zero upon returning.\n+  void invalidate_nmethod_mirror(JVMCIObject mirror, bool deoptimze, JVMCI_TRAPS);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.hpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,1 +32,2 @@\n-     * Raw address address of entity representing this installed code.\n+     * Address of the entity (e.g., HotSpot {@code nmethod} or {@code RuntimeStub}) representing\n+     * this installed code.\n@@ -37,1 +38,1 @@\n-     * Raw address of entryPoint of this installed code.\n+     * Address of the entryPoint of this installed code.\n@@ -53,1 +54,2 @@\n-     * @return the address of entity representing this installed code.\n+     * @return the address of entity (e.g., HotSpot {@code nmethod} or {@code RuntimeStub})\n+     *         representing this installed code\n@@ -97,2 +99,1 @@\n-     * @return true if the code represented by this object still exists and might have live\n-     *         activations, false otherwise (may happen due to deopt, etc.)\n+     * @return true if this object still points to installed code\n@@ -111,0 +112,7 @@\n+    \/**\n+     * Equivalent to calling {@link #invalidate(boolean)} with a {@code true} argument.\n+     *\/\n+    public void invalidate() {\n+        invalidate(true);\n+    }\n+\n@@ -114,1 +122,10 @@\n-     * {@link InvalidInstalledCodeException} and all existing invocations will be deoptimized.\n+     * {@link InvalidInstalledCodeException}.\n+     *\n+     * If this installed code is already {@linkplain #isValid() invalid}, this method has no effect.\n+     * A subsequent call to {@link #isAlive()} or {@link #isValid()} on this object will return\n+     * {@code false}.\n+     *\n+     * @param deoptimize if {@code true}, all existing invocations will be immediately deoptimized.\n+     *            If {@code false}, any existing invocation will continue until it completes or\n+     *            there is a subsequent call to this method with {@code deoptimize == true} before\n+     *            the invocation completes.\n@@ -116,1 +133,1 @@\n-    public void invalidate() {\n+    public void invalidate(boolean deoptimize) {\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.code\/src\/jdk\/vm\/ci\/code\/InstalledCode.java","additions":24,"deletions":7,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -718,4 +718,4 @@\n-     * Invalidates {@code nmethodMirror} such that {@link InvalidInstalledCodeException} will be\n-     * raised the next time {@code nmethodMirror} is {@linkplain #executeHotSpotNmethod executed}.\n-     * The {@code nmethod} associated with {@code nmethodMirror} is also made non-entrant and any\n-     * current activations of the {@code nmethod} are deoptimized.\n+     * Updates {@code nmethodMirror} such that {@link InvalidInstalledCodeException} will be raised\n+     * the next time {@code nmethodMirror} is {@linkplain #executeHotSpotNmethod executed}. The\n+     * {@code nmethod} associated with {@code nmethodMirror} is also made non-entrant and if\n+     * {@code deoptimize == true} any current activations of the {@code nmethod} are deoptimized.\n@@ -723,1 +723,1 @@\n-    native void invalidateHotSpotNmethod(HotSpotNmethod nmethodMirror);\n+    native void invalidateHotSpotNmethod(HotSpotNmethod nmethodMirror, boolean deoptimize);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot\/src\/jdk\/vm\/ci\/hotspot\/CompilerToVM.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -160,1 +160,2 @@\n-            runtime.getCompilerToVM().invalidateHotSpotNmethod((HotSpotNmethod) installedCode);\n+            HotSpotNmethod nmethod = (HotSpotNmethod) installedCode;\n+            nmethod.invalidate(true);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot\/src\/jdk\/vm\/ci\/hotspot\/HotSpotCodeCacheProvider.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -126,2 +126,2 @@\n-    public void invalidate() {\n-        compilerToVM().invalidateHotSpotNmethod(this);\n+    public void invalidate(boolean deoptimize) {\n+        compilerToVM().invalidateHotSpotNmethod(this, deoptimize);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk.vm.ci.hotspot\/src\/jdk\/vm\/ci\/hotspot\/HotSpotNmethod.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -247,1 +247,1 @@\n-        CTVM.invalidateHotSpotNmethod(nmethodMirror);\n+        CTVM.invalidateHotSpotNmethod(nmethodMirror, true);\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/common\/patches\/jdk.internal.vm.ci\/jdk\/vm\/ci\/hotspot\/CompilerToVMHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}