{"files":[{"patch":"@@ -770,1 +770,7 @@\n-            public StringBuilder visitTypeVariable(javax.lang.model.type.TypeVariable t, Void p) {\n+            public StringBuilder visitPrimitive(PrimitiveType t, Void p) {\n+                sb.append(t.getKind().toString().toLowerCase(Locale.ROOT));\n+                return sb;\n+            }\n+\n+            @Override\n+            public StringBuilder visitTypeVariable(TypeVariable t, Void p) {\n@@ -777,1 +783,1 @@\n-            public StringBuilder visitWildcard(javax.lang.model.type.WildcardType t, Void p) {\n+            public StringBuilder visitWildcard(WildcardType t, Void p) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/Utils.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug      8261203\n+ * @summary  Incorrectly escaped javadoc html with type annotations\n+ * @library  \/tools\/lib ..\/..\/lib\/\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.tool\n+ * @build toolbox.ToolBox javadoc.tester.*\n+ * @run main TestMethodId\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+\n+import javadoc.tester.JavadocTester;\n+import toolbox.ToolBox;\n+\n+public class TestMethodId extends JavadocTester {\n+\n+    public static void main(String... args) throws Exception {\n+        TestMethodId tester = new TestMethodId();\n+        tester.runTests(m -> new Object[] { Path.of(m.getName()) });\n+    }\n+\n+    private ToolBox tb = new ToolBox();\n+\n+    @Test\n+    public void testMethodId(Path base) throws IOException {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                    package p;\n+                    public class C {\n+                        public void m(@A(\"anno-text\") int i) { }\n+                    }\n+                    \"\"\",\n+                \"\"\"\n+                    package p;\n+                    public @interface A {\n+                        String value();\n+                    }\n+                    \"\"\");\n+\n+        javadoc(\"-d\", base.resolve(\"out\").toString(),\n+                \"-Xdoclint:none\",\n+                \"--source-path\", src.toString(),\n+                \"p\");\n+        checkExit(Exit.OK);\n+\n+        checkOutput(\"p\/C.html\",\n+                true,\n+                \"\"\"\n+                    <code><a href=\"#m(int)\" class=\"member-name-link\">m<\/a>&#8203;(int&nbsp;i)<\/code>\"\"\",\n+                \"\"\"\n+                    <section class=\"detail\" id=\"m(int)\">\n+                    <h3>m<\/h3>\"\"\");\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testMethodId\/TestMethodId.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"}]}