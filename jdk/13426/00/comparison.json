{"files":[{"patch":"@@ -45,2 +45,0 @@\n-import java.net.InetAddress;\n-import java.net.InetSocketAddress;\n@@ -65,1 +63,0 @@\n-import java.util.concurrent.RejectedExecutionException;\n@@ -68,1 +65,0 @@\n-import java.util.function.Function;\n@@ -70,1 +66,0 @@\n-import jdk.httpclient.test.lib.http2.Http2TestServer;\n@@ -72,1 +67,0 @@\n-import javax.net.ssl.SSLHandshakeException;\n@@ -74,3 +68,0 @@\n-import com.sun.net.httpserver.HttpServer;\n-import com.sun.net.httpserver.HttpsConfigurator;\n-import com.sun.net.httpserver.HttpsServer;\n@@ -102,0 +93,1 @@\n+    ExecutorService readerService;\n@@ -126,1 +118,1 @@\n-    final ReferenceTracker TRACKER = ReferenceTracker.INSTANCE;\n+    static final ReferenceTracker TRACKER = ReferenceTracker.INSTANCE;\n@@ -178,2 +170,1 @@\n-        out.printf(\"%n---- starting (%s) ----%n\", uriString);\n-        ExecutorService readerService = Executors.newCachedThreadPool();\n+        out.printf(\"%n---- starting concurrent (%s) ----%n%n\", uriString);\n@@ -189,0 +180,1 @@\n+        List<CompletableFuture<String>> bodies = new ArrayList<>();\n@@ -190,1 +182,0 @@\n-            List<CompletableFuture<String>> bodies = new ArrayList<>();\n@@ -235,1 +226,0 @@\n-            CompletableFuture.allOf(bodies.toArray(new CompletableFuture<?>[0])).get();\n@@ -239,1 +229,1 @@\n-            failed = cleanup(client, readerService, failed);\n+            failed = cleanup(client, failed);\n@@ -244,0 +234,2 @@\n+        \/\/ ensure that all operations are eventually terminated\n+        CompletableFuture.allOf(bodies.toArray(new CompletableFuture<?>[0])).get();\n@@ -246,1 +238,1 @@\n-    static Throwable cleanup(HttpClient client, ExecutorService readerService, Throwable failed) {\n+    static Throwable cleanup(HttpClient client, Throwable failed) {\n@@ -248,12 +240,11 @@\n-            try {\n-                if (client.awaitTermination(Duration.ofMillis(2000))) {\n-                    out.println(\"Client terminated within expected delay\");\n-                } else {\n-                    AssertionError error = new AssertionError(\"client still running\");\n-                    if (failed != null) {\n-                        failed.addSuppressed(error);\n-                    } else failed = error;\n-                }\n-            } finally {\n-                readerService.shutdown();\n-                readerService.awaitTermination(2000, TimeUnit.MILLISECONDS);\n+            if (client.awaitTermination(Duration.ofMillis(2000))) {\n+                out.println(\"Client terminated within expected delay\");\n+            } else {\n+                String msg = \"Client %s still running: %s\".formatted(\n+                        client,\n+                        TRACKER.diagnose(client));\n+                out.println(msg);\n+                AssertionError error = new AssertionError(msg);\n+                if (failed != null) {\n+                    failed.addSuppressed(error);\n+                } else failed = error;\n@@ -271,2 +262,1 @@\n-        out.printf(\"%n---- starting (%s) ----%n\", uriString);\n-        ExecutorService readerService = Executors.newCachedThreadPool();\n+        out.printf(\"%n---- starting sequential (%s) ----%n%n\", uriString);\n@@ -342,1 +332,1 @@\n-            failed = cleanup(client, readerService, failed);\n+            failed = cleanup(client, failed);\n@@ -357,0 +347,1 @@\n+        readerService = Executors.newCachedThreadPool();\n@@ -383,0 +374,1 @@\n+            shutdown(readerService);\n@@ -392,0 +384,9 @@\n+    static void shutdown(ExecutorService executorService) {\n+        try {\n+            executorService.shutdown();\n+            executorService.awaitTermination(2000, TimeUnit.MILLISECONDS);\n+        } catch (InterruptedException ie) {\n+            executorService.shutdownNow();\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/net\/httpclient\/AsyncShutdownNow.java","additions":32,"deletions":31,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import java.io.Closeable;\n@@ -59,0 +60,4 @@\n+import java.util.concurrent.Flow;\n+import java.util.concurrent.Flow.Publisher;\n+import java.util.concurrent.Flow.Subscriber;\n+import java.util.concurrent.Flow.Subscription;\n@@ -61,0 +66,2 @@\n+import java.util.stream.Stream;\n+\n@@ -72,0 +79,1 @@\n+import static java.lang.System.in;\n@@ -89,0 +97,1 @@\n+    ExecutorService readerService;\n@@ -115,2 +124,2 @@\n-    static String readBody(InputStream in) {\n-        try {\n+    static String readBody(InputStream body) {\n+        try (InputStream in = body) {\n@@ -123,0 +132,51 @@\n+    private static record CancellingSubscriber<U>(ExchangeResult<?> result)\n+            implements Subscriber<U> {\n+        @Override\n+        public void onSubscribe(Subscription subscription) {\n+            out.printf(\"%s:  cancelling subscription\", result.step());\n+            subscription.cancel();\n+        }\n+        @Override\n+        public void onNext(U item) {}\n+        @Override\n+        public void onError(Throwable throwable) {}\n+        @Override\n+        public void onComplete() {}\n+    }\n+\n+    private static <U> void ensureClosed(ExchangeResult<U> result) {\n+        var response = result.response;\n+        if (response == null) return;\n+        var body = response.body();\n+        try {\n+            if (body instanceof Closeable cl) {\n+                cl.close();\n+            } else if (body instanceof Publisher<?> pub) {\n+                pub.subscribe(new CancellingSubscriber<Object>(result));\n+            }\n+        } catch (IOException io) {\n+            out.printf(\"%s:  Failed to close body: %s\", result.step(), io);\n+            io.printStackTrace(out);\n+        }\n+    }\n+\n+    private record ExchangeResult<T>(int step, HttpResponse<T> response) {\n+        public static <U> ExchangeResult<U> ofStep(int step) {\n+            return new ExchangeResult<U>(step, null);\n+        }\n+        ExchangeResult<T> withResponse(HttpResponse<T> response) {\n+            return new ExchangeResult(step, response);\n+        }\n+        ExchangeResult<T> assertResponseState() {\n+            try {\n+                out.println(step + \":  Got response: \" + response);\n+                assertEquals(response.statusCode(), 200);\n+            } catch (AssertionError error) {\n+                out.printf(\"%s:  Closing body due to assertion - %s\", error);\n+                ensureClosed(this);\n+                throw error;\n+            }\n+            return this;\n+        }\n+    }\n+\n@@ -125,2 +185,1 @@\n-        out.printf(\"%n---- starting (%s) ----%n\", uriString);\n-        ExecutorService readerService = Executors.newCachedThreadPool();\n+        out.printf(\"%n---- starting concurrent (%s) ----%n%n\", uriString);\n@@ -129,0 +188,1 @@\n+        List<CompletableFuture<String>> bodies = new ArrayList<>();\n@@ -136,1 +196,0 @@\n-            List<CompletableFuture<String>> bodies = new ArrayList<>();\n@@ -146,0 +205,1 @@\n+                ExchangeResult<InputStream> result = ExchangeResult.ofStep(si);\n@@ -147,5 +207,3 @@\n-                        .thenApply((response) -> {\n-                            out.println(si + \":  Got response: \" + response);\n-                            assertEquals(response.statusCode(), 200);\n-                            return response;\n-                        });\n+                        .thenApply(result::withResponse)\n+                        .thenApplyAsync(ExchangeResult::assertResponseState, readerService)\n+                        .thenApply(ExchangeResult::response);\n@@ -166,5 +224,0 @@\n-            CompletableFuture.allOf(bodies.toArray(new CompletableFuture<?>[0])).get();\n-        } catch (Throwable throwable) {\n-            failed = throwable;\n-        } finally {\n-            failed = cleanup(readerService, failed);\n@@ -172,2 +225,0 @@\n-        if (failed instanceof Exception ex) throw ex;\n-        if (failed instanceof Error e) throw e;\n@@ -175,12 +226,2 @@\n-    }\n-\n-    static Throwable cleanup(ExecutorService readerService, Throwable failed) {\n-        try {\n-            readerService.shutdown();\n-            readerService.awaitTermination(2000, TimeUnit.MILLISECONDS);\n-        } catch (InterruptedException ie) {\n-            if (failed != null) {\n-                failed.addSuppressed(ie);\n-            } else failed = ie;\n-        }\n-        return failed;\n+        \/\/ assert all operations eventually terminate\n+        CompletableFuture.allOf(bodies.toArray(new CompletableFuture<?>[0])).get();\n@@ -191,2 +232,1 @@\n-        out.printf(\"%n---- starting (%s) ----%n\", uriString);\n-        ExecutorService readerService = Executors.newCachedThreadPool();\n+        out.printf(\"%n---- starting sequential (%s) ----%n%n\", uriString);\n@@ -209,0 +249,1 @@\n+                ExchangeResult<InputStream> result = ExchangeResult.ofStep(si);\n@@ -212,5 +253,3 @@\n-                        .thenApply((response) -> {\n-                            out.println(si + \":  Got response: \" + response);\n-                            assertEquals(response.statusCode(), 200);\n-                            return response;\n-                        });\n+                        .thenApply(result::withResponse)\n+                        .thenApplyAsync(ExchangeResult::assertResponseState, readerService)\n+                        .thenApply(ExchangeResult::response);\n@@ -234,4 +273,0 @@\n-        } catch (Throwable throwable) {\n-            failed = throwable;\n-        } finally {\n-            failed = cleanup(readerService, failed);\n@@ -239,2 +274,0 @@\n-        if (failed instanceof Exception ex) throw ex;\n-        if (failed instanceof Error e) throw e;\n@@ -252,1 +285,1 @@\n-\n+        readerService = Executors.newCachedThreadPool();\n@@ -278,0 +311,1 @@\n+            shutdown(readerService);\n@@ -287,0 +321,9 @@\n+    static void shutdown(ExecutorService executorService) {\n+        try {\n+            executorService.shutdown();\n+            executorService.awaitTermination(2000, TimeUnit.MILLISECONDS);\n+        } catch (InterruptedException ie) {\n+            executorService.shutdownNow();\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/net\/httpclient\/HttpClientClose.java","additions":86,"deletions":43,"binary":false,"changes":129,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+import java.io.Closeable;\n@@ -64,0 +65,3 @@\n+import java.util.concurrent.Flow.Publisher;\n+import java.util.concurrent.Flow.Subscriber;\n+import java.util.concurrent.Flow.Subscription;\n@@ -94,0 +98,1 @@\n+    ExecutorService readerService;\n@@ -118,1 +123,1 @@\n-    final ReferenceTracker TRACKER = ReferenceTracker.INSTANCE;\n+    static final ReferenceTracker TRACKER = ReferenceTracker.INSTANCE;\n@@ -139,2 +144,2 @@\n-    static String readBody(InputStream in) {\n-        try {\n+    static String readBody(InputStream body) {\n+        try (InputStream in = body) {\n@@ -147,0 +152,51 @@\n+    private static record CancellingSubscriber<U>(ExchangeResult<?> result)\n+            implements Subscriber<U> {\n+        @Override\n+        public void onSubscribe(Subscription subscription) {\n+            out.printf(now() + \"%s:  cancelling subscription\", result.step());\n+            subscription.cancel();\n+        }\n+        @Override\n+        public void onNext(U item) {}\n+        @Override\n+        public void onError(Throwable throwable) {}\n+        @Override\n+        public void onComplete() {}\n+    }\n+\n+    private static <U> void ensureClosed(ExchangeResult<U> result) {\n+        var response = result.response;\n+        if (response == null) return;\n+        var body = response.body();\n+        try {\n+            if (body instanceof Closeable cl) {\n+                cl.close();\n+            } else if (body instanceof Publisher<?> pub) {\n+                pub.subscribe(new CancellingSubscriber<Object>(result));\n+            }\n+        } catch (IOException io) {\n+            out.printf(now() + \"%s:  Failed to close body: %s\", result.step(), io);\n+            io.printStackTrace(out);\n+        }\n+    }\n+\n+    private record ExchangeResult<T>(int step, HttpResponse<T> response) {\n+        public static <U> ExchangeResult<U> ofStep(int step) {\n+            return new ExchangeResult<U>(step, null);\n+        }\n+        ExchangeResult<T> withResponse(HttpResponse<T> response) {\n+            return new ExchangeResult(step, response);\n+        }\n+        ExchangeResult<T> assertResponseState() {\n+            try {\n+                out.println(now() + step + \":  Got response: \" + response);\n+                assertEquals(response.statusCode(), 200);\n+            } catch (AssertionError error) {\n+                out.printf(now() + \"%s:  Closing body due to assertion - %s\", error);\n+                ensureClosed(this);\n+                throw error;\n+            }\n+            return this;\n+        }\n+    }\n+\n@@ -180,2 +236,1 @@\n-        out.printf(\"%n---- %sstarting (%s) ----%n\", now(), uriString);\n-        ExecutorService readerService = Executors.newCachedThreadPool();\n+        out.printf(\"%n---- %sstarting concurrent (%s) ----%n%n\", now(), uriString);\n@@ -191,0 +246,1 @@\n+        List<CompletableFuture<String>> bodies = new ArrayList<>();\n@@ -192,1 +248,0 @@\n-            List<CompletableFuture<String>> bodies = new ArrayList<>();\n@@ -202,0 +257,1 @@\n+                ExchangeResult<InputStream> result = ExchangeResult.ofStep(si);\n@@ -203,5 +259,3 @@\n-                        .thenApply((response) -> {\n-                            out.println(now() + si + \":  Got response: \" + response);\n-                            assertEquals(response.statusCode(), 200);\n-                            return response;\n-                        });\n+                        .thenApply(result::withResponse)\n+                        .thenApplyAsync(ExchangeResult::assertResponseState, readerService)\n+                        .thenApply(ExchangeResult::response);\n@@ -241,1 +295,0 @@\n-            CompletableFuture.allOf(bodies.toArray(new CompletableFuture<?>[0])).get();\n@@ -245,1 +298,1 @@\n-            failed = cleanup(client, readerService, failed);\n+            failed = cleanup(client, failed);\n@@ -250,0 +303,2 @@\n+        \/\/ ensure all tasks have been successfully completed\n+        CompletableFuture.allOf(bodies.toArray(new CompletableFuture<?>[0])).get();\n@@ -252,1 +307,1 @@\n-    static Throwable cleanup(HttpClient client, ExecutorService readerService, Throwable failed) {\n+    static Throwable cleanup(HttpClient client, Throwable failed) {\n@@ -254,14 +309,12 @@\n-            try {\n-                out.println(now() + \"awaiting termination...\");\n-                if (client.awaitTermination(Duration.ofMillis(2000))) {\n-                    out.println(now() + \"Client terminated within expected delay\");\n-                } else {\n-                    out.println(now() + \"Client still running!\");\n-                    AssertionError error = new AssertionError(\"client still running\");\n-                    if (failed != null) {\n-                        failed.addSuppressed(error);\n-                    } else failed = error;\n-                }\n-            } finally {\n-                readerService.shutdown();\n-                readerService.awaitTermination(2000, TimeUnit.MILLISECONDS);\n+            out.println(now() + \"awaiting termination...\");\n+            if (client.awaitTermination(Duration.ofMinutes(3))) {\n+                out.println(now() + \"Client terminated within expected delay\");\n+            } else {\n+                String msg = \"Client %s still running: %s\".formatted(\n+                        client,\n+                        TRACKER.diagnose(client));\n+                out.println(now() + msg);\n+                AssertionError error = new AssertionError(msg);\n+                if (failed != null) {\n+                    failed.addSuppressed(error);\n+                } else failed = error;\n@@ -279,2 +332,1 @@\n-        out.printf(\"%n---- %sstarting (%s) ----%n\", now(), uriString);\n-        ExecutorService readerService = Executors.newCachedThreadPool();\n+        out.printf(\"%n---- %sstarting sequential (%s) ----%n%n\", now(), uriString);\n@@ -301,0 +353,1 @@\n+                ExchangeResult<InputStream> result = ExchangeResult.ofStep(si);\n@@ -302,5 +355,3 @@\n-                        .thenApply((response) -> {\n-                            out.println(now() + si + \":  Got response: \" + response);\n-                            assertEquals(response.statusCode(), 200);\n-                            return response;\n-                        });\n+                        .thenApply(result::withResponse)\n+                        .thenApplyAsync(ExchangeResult::assertResponseState, readerService)\n+                        .thenApply(ExchangeResult::response);\n@@ -353,1 +404,1 @@\n-            failed = cleanup(client, readerService, failed);\n+            failed = cleanup(client, failed);\n@@ -368,0 +419,1 @@\n+        readerService = Executors.newCachedThreadPool();\n@@ -395,0 +447,1 @@\n+            shutdown(readerService);\n@@ -404,0 +457,9 @@\n+    static void shutdown(ExecutorService executorService) {\n+        try {\n+            executorService.shutdown();\n+            executorService.awaitTermination(2000, TimeUnit.MILLISECONDS);\n+        } catch (InterruptedException ie) {\n+            executorService.shutdownNow();\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/net\/httpclient\/HttpClientShutdown.java","additions":98,"deletions":36,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -66,0 +66,8 @@\n+    public StringBuilder diagnose(Tracker tracker) {\n+        return diagnose(tracker, new StringBuilder(), (t) -> t.getOutstandingHttpOperations() > 0);\n+    }\n+\n+    public StringBuilder diagnose(HttpClient client) {\n+        return diagnose(getTracker(client));\n+    }\n+\n","filename":"test\/jdk\/java\/net\/httpclient\/ReferenceTracker.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"}]}