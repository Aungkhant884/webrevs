{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,0 @@\n-import java.lang.ref.Cleaner;\n@@ -45,3 +44,0 @@\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n-import java.util.function.BooleanSupplier;\n@@ -50,0 +46,1 @@\n+import jdk.test.lib.util.ForceGC;\n@@ -144,33 +141,0 @@\n-\n-    \/**\n-     * Utility class to invoke System.gc()\n-     *\/\n-    static class ForceGC {\n-        private  final CountDownLatch cleanerInvoked = new CountDownLatch(1);\n-        private  final Cleaner cleaner = Cleaner.create();\n-\n-        ForceGC() {\n-            cleaner.register(new Object(), () -> cleanerInvoked.countDown());\n-        }\n-\n-        void doit() {\n-            try {\n-                for (int i = 0; i < 10; i++) {\n-                    System.gc();\n-                    if (cleanerInvoked.await(1L, TimeUnit.SECONDS)) {\n-                        return;\n-                    }\n-                }\n-            } catch (InterruptedException unexpected) {\n-                throw new AssertionError(\"unexpected InterruptedException\");\n-            }\n-        }\n-\n-        void await(BooleanSupplier s) {\n-            for (int i = 0; i < 10; i++) {\n-                if (s.getAsBoolean()) return;\n-                doit();\n-            }\n-            throw new AssertionError(\"failed to satisfy condition\");\n-        }\n-    }\n","filename":"test\/jdk\/java\/lang\/reflect\/callerCache\/ReflectionCallerCacheTest.java","additions":2,"deletions":38,"binary":false,"changes":40,"status":"modified"}]}