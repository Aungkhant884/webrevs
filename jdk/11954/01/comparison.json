{"files":[{"patch":"@@ -3059,1 +3059,2 @@\n-            \/\/ first argument.\n+            \/\/ first argument. If we are a static class, there is no\n+            \/\/ such outer instance, so generate an error.\n@@ -3070,0 +3071,5 @@\n+                } else if (currentClass.isStatic()) {\n+                    \/\/ super() call from static nested class - invalid\n+                    log.error(tree.pos(),\n+                        Errors.NoEnclInstanceOfTypeInScope(c.type.getEnclosingType().tsym));\n+                    thisArg = make.Literal(BOT, null).setType(syms.botType);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,13 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8291154\n+ * @summary Disallow static nested subclasses of non-static nested classes\n+ * @compile\/fail\/ref=StaticNestedNonStaticSuper.out -XDrawDiagnostics StaticNestedNonStaticSuper.java\n+ *\/\n+\n+class StaticNestedNonStaticSuper{\n+    public abstract class NonStaticNested {\n+        public static class StaticNested extends NonStaticNested {\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/nested\/StaticNestedNonStaticSuper.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+StaticNestedNonStaticSuper.java:10:23: compiler.err.no.encl.instance.of.type.in.scope: StaticNestedNonStaticSuper\n+1 error\n","filename":"test\/langtools\/tools\/javac\/nested\/StaticNestedNonStaticSuper.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"}]}