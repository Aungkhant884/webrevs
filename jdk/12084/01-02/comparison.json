{"files":[{"patch":"@@ -98,2 +98,2 @@\n-        BytecodeFrame caller = new BytecodeFrame(null, m3, 0, true,  true,  values,  slotKinds, 1, 1, 0);\n-        BytecodeFrame f1 =  new BytecodeFrame(caller, m1, 0, true,  true,  values,  slotKinds,  1, 1, 0);\n+        BytecodeFrame caller = new BytecodeFrame(null, m3, 0, false, true,  values,  slotKinds, 1, 1, 0);\n+        BytecodeFrame f1 =  new BytecodeFrame(caller, m1, 0, false,  true,  values,  slotKinds,  1, 1, 0);\n@@ -101,9 +101,9 @@\n-        assertNotEquals(f1, new BytecodeFrame(caller, m2, 0, true,  true,  values,  slotKinds,  1, 1, 0)); \/\/ method\n-        assertNotEquals(f1, new BytecodeFrame(caller, m1, 1, true,  true,  values,  slotKinds,  1, 1, 0)); \/\/ bci\n-        assertNotEquals(f1, new BytecodeFrame(caller, m1, 0, false, true,  values,  slotKinds,  1, 1, 0)); \/\/ rethrowException\n-        assertNotEquals(f1, new BytecodeFrame(caller, m1, 0, true,  false, values,  slotKinds,  1, 1, 0)); \/\/ duringCall\n-        assertNotEquals(f1, new BytecodeFrame(caller, m1, 0, true,  true,  values2, slotKinds,  1, 1, 0)); \/\/ values\n-        assertNotEquals(f1, new BytecodeFrame(caller, m1, 0, true,  true,  values,  slotKinds2, 1, 1, 0)); \/\/ slotKinds\n-        assertNotEquals(f1, new BytecodeFrame(caller, m1, 0, true,  false, values,  slotKinds,  2, 1, 0)); \/\/ numLocals\n-        assertNotEquals(f1, new BytecodeFrame(caller, m1, 0, true,  false, values,  slotKinds,  1, 2, 0)); \/\/ numStack\n-        assertNotEquals(f1, new BytecodeFrame(caller, m1, 0, true,  false, values,  slotKinds,  1, 1, 1)); \/\/ numLocks\n+        assertNotEquals(f1, new BytecodeFrame(caller, m2, 0, false, true,  values,  slotKinds,  1, 1, 0)); \/\/ method\n+        assertNotEquals(f1, new BytecodeFrame(caller, m1, 1, false, true,  values,  slotKinds,  1, 1, 0)); \/\/ bci\n+        assertNotEquals(f1, new BytecodeFrame(caller, m1, 0, true,  true,  values,  slotKinds,  1, 1, 0)); \/\/ rethrowException\n+        assertNotEquals(f1, new BytecodeFrame(caller, m1, 0, false, false, values,  slotKinds,  1, 1, 0)); \/\/ duringCall\n+        assertNotEquals(f1, new BytecodeFrame(caller, m1, 0, false, true,  values2, slotKinds,  1, 1, 0)); \/\/ values\n+        assertNotEquals(f1, new BytecodeFrame(caller, m1, 0, false, true,  values,  slotKinds2, 1, 1, 0)); \/\/ slotKinds\n+        assertNotEquals(f1, new BytecodeFrame(caller, m1, 0, false, false, values,  slotKinds,  2, 1, 0)); \/\/ numLocals\n+        assertNotEquals(f1, new BytecodeFrame(caller, m1, 0, false, false, values,  slotKinds,  1, 2, 0)); \/\/ numStack\n+        assertNotEquals(f1, new BytecodeFrame(caller, m1, 0, false, false, values,  slotKinds,  1, 1, 1)); \/\/ numLocks\n@@ -112,1 +112,1 @@\n-        BytecodeFrame f2 = new BytecodeFrame(caller, m1, 0, true,  true,  values,  slotKinds, 1, 1, 0);\n+        BytecodeFrame f2 = new BytecodeFrame(caller, m1, 0, false,  true,  values,  slotKinds, 1, 1, 0);\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.runtime.test\/src\/jdk\/vm\/ci\/runtime\/test\/TestBytecodeFrame.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"}]}