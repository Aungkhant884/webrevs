{"files":[{"patch":"@@ -364,2 +364,2 @@\n-void ZHeap::free_garbage_pages(ZRelocationSetSelector* selector, int bulk) {\n-  \/\/ Freeing garbage pages in bulk is an optimization to avoid grabbing\n+void ZHeap::free_empty_pages(ZRelocationSetSelector* selector, int bulk) {\n+  \/\/ Freeing empty pages in bulk is an optimization to avoid grabbing\n@@ -368,3 +368,3 @@\n-  if (selector->should_free_garbage_pages(bulk)) {\n-    free_pages(selector->garbage_pages(), true \/* reclaimed *\/);\n-    selector->clear_garbage_pages();\n+  if (selector->should_free_empty_pages(bulk)) {\n+    free_pages(selector->empty_pages(), true \/* reclaimed *\/);\n+    selector->clear_empty_pages();\n@@ -391,2 +391,2 @@\n-      \/\/ Register garbage page\n-      selector.register_garbage_page(page);\n+      \/\/ Register empty page\n+      selector.register_empty_page(page);\n@@ -394,2 +394,2 @@\n-      \/\/ Reclaim garbage pages in bulk\n-      free_garbage_pages(&selector, 64 \/* bulk *\/);\n+      \/\/ Reclaim empty pages in bulk\n+      free_empty_pages(&selector, 64 \/* bulk *\/);\n@@ -399,2 +399,2 @@\n-  \/\/ Reclaim remaining garbage pages\n-  free_garbage_pages(&selector, 0 \/* bulk *\/);\n+  \/\/ Reclaim remaining empty pages\n+  free_empty_pages(&selector, 0 \/* bulk *\/);\n","filename":"src\/hotspot\/share\/gc\/z\/zHeap.cpp","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-  void free_garbage_pages(ZRelocationSetSelector* selector, int bulk);\n+  void free_empty_pages(ZRelocationSetSelector* selector, int bulk);\n","filename":"src\/hotspot\/share\/gc\/z\/zHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-    _registered_pages(),\n+    _live_pages(),\n@@ -68,1 +68,1 @@\n-  \/\/ Semi-sort registered pages by live bytes in ascending order\n+  \/\/ Semi-sort live pages by number of live bytes in ascending order\n@@ -78,1 +78,1 @@\n-  ZArrayIterator<ZPage*> iter1(&_registered_pages);\n+  ZArrayIterator<ZPage*> iter1(&_live_pages);\n@@ -93,2 +93,2 @@\n-  const int npages = _registered_pages.length();\n-  ZArray<ZPage*> sorted_pages(npages, npages, NULL);\n+  const int npages = _live_pages.length();\n+  ZArray<ZPage*> sorted_live_pages(npages, npages, NULL);\n@@ -97,1 +97,1 @@\n-  ZArrayIterator<ZPage*> iter2(&_registered_pages);\n+  ZArrayIterator<ZPage*> iter2(&_live_pages);\n@@ -101,2 +101,2 @@\n-    assert(sorted_pages.at(finger) == NULL, \"Invalid finger\");\n-    sorted_pages.at_put(finger, page);\n+    assert(sorted_live_pages.at(finger) == NULL, \"Invalid finger\");\n+    sorted_live_pages.at_put(finger, page);\n@@ -105,1 +105,1 @@\n-  _registered_pages.swap(&sorted_pages);\n+  _live_pages.swap(&sorted_live_pages);\n@@ -112,1 +112,1 @@\n-  const int npages = _registered_pages.length();\n+  const int npages = _live_pages.length();\n@@ -123,1 +123,1 @@\n-    ZPage* const page = _registered_pages.at(from - 1);\n+    ZPage* const page = _live_pages.at(from - 1);\n@@ -153,1 +153,1 @@\n-  _registered_pages.trunc_to(selected_from);\n+  _live_pages.trunc_to(selected_from);\n@@ -184,1 +184,1 @@\n-    _garbage_pages() {}\n+    _empty_pages() {}\n","filename":"src\/hotspot\/share\/gc\/z\/zRelocationSetSelector.cpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-  ZArray<ZPage*>                   _registered_pages;\n+  ZArray<ZPage*>                   _live_pages;\n@@ -93,1 +93,1 @@\n-  void register_garbage_page(ZPage* page);\n+  void register_empty_page(ZPage* page);\n@@ -107,1 +107,1 @@\n-  ZArray<ZPage*>              _garbage_pages;\n+  ZArray<ZPage*>              _empty_pages;\n@@ -118,1 +118,1 @@\n-  void register_garbage_page(ZPage* page);\n+  void register_empty_page(ZPage* page);\n@@ -120,3 +120,3 @@\n-  bool should_free_garbage_pages(int bulk) const;\n-  const ZArray<ZPage*>* garbage_pages() const;\n-  void clear_garbage_pages();\n+  bool should_free_empty_pages(int bulk) const;\n+  const ZArray<ZPage*>* empty_pages() const;\n+  void clear_empty_pages();\n","filename":"src\/hotspot\/share\/gc\/z\/zRelocationSetSelector.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-    _registered_pages.append(page);\n+    _live_pages.append(page);\n@@ -87,1 +87,1 @@\n-inline void ZRelocationSetSelectorGroup::register_garbage_page(ZPage* page) {\n+inline void ZRelocationSetSelectorGroup::register_empty_page(ZPage* page) {\n@@ -97,1 +97,1 @@\n-  return &_registered_pages;\n+  return &_live_pages;\n@@ -120,1 +120,1 @@\n-inline void ZRelocationSetSelector::register_garbage_page(ZPage* page) {\n+inline void ZRelocationSetSelector::register_empty_page(ZPage* page) {\n@@ -124,1 +124,1 @@\n-    _small.register_garbage_page(page);\n+    _small.register_empty_page(page);\n@@ -126,1 +126,1 @@\n-    _medium.register_garbage_page(page);\n+    _medium.register_empty_page(page);\n@@ -128,1 +128,1 @@\n-    _large.register_garbage_page(page);\n+    _large.register_empty_page(page);\n@@ -131,1 +131,1 @@\n-  _garbage_pages.append(page);\n+  _empty_pages.append(page);\n@@ -134,2 +134,2 @@\n-inline bool ZRelocationSetSelector::should_free_garbage_pages(int bulk) const {\n-  return _garbage_pages.length() >= bulk && _garbage_pages.is_nonempty();\n+inline bool ZRelocationSetSelector::should_free_empty_pages(int bulk) const {\n+  return _empty_pages.length() >= bulk && _empty_pages.is_nonempty();\n@@ -138,2 +138,2 @@\n-inline const ZArray<ZPage*>* ZRelocationSetSelector::garbage_pages() const {\n-  return &_garbage_pages;\n+inline const ZArray<ZPage*>* ZRelocationSetSelector::empty_pages() const {\n+  return &_empty_pages;\n@@ -142,2 +142,2 @@\n-inline void ZRelocationSetSelector::clear_garbage_pages() {\n-  return _garbage_pages.clear();\n+inline void ZRelocationSetSelector::clear_empty_pages() {\n+  return _empty_pages.clear();\n","filename":"src\/hotspot\/share\/gc\/z\/zRelocationSetSelector.inline.hpp","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"}]}