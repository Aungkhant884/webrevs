{"files":[{"patch":"@@ -483,1 +483,1 @@\n-    if (UseLoopSafepoints && target_bci <= bci()) {\n+    if (target_bci <= bci()) {\n","filename":"src\/hotspot\/share\/opto\/parse.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -488,1 +488,1 @@\n-  if (makes_backward_branch && UseLoopSafepoints) {\n+  if (makes_backward_branch) {\n@@ -582,1 +582,1 @@\n-  if (makes_backward_branch && UseLoopSafepoints) {\n+  if (makes_backward_branch) {\n@@ -2558,2 +2558,1 @@\n-    if( UseLoopSafepoints ) {\n-      switch( iter().next_bc() ) {\n+    switch (iter().next_bc()) {\n@@ -2570,1 +2569,0 @@\n-      }\n","filename":"src\/hotspot\/share\/opto\/parse2.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -410,4 +410,5 @@\n-\n-  \/\/ Implementation requires 'UseLoopSafepoints == true' and an edge from root\n-  \/\/ to each SafePointNode at a backward branch.  Inserted in add_safepoint().\n-  if( !UseLoopSafepoints || !OptoRemoveUseless ) return;\n+  \/\/ Implementation requires an edge from root to each SafePointNode\n+  \/\/ at a backward branch. Inserted in add_safepoint().\n+  if (!OptoRemoveUseless) {\n+    return;\n+  }\n@@ -996,2 +997,1 @@\n-      assert(!UseLoopSafepoints || !OptoRemoveUseless,\n-             \"remove_useless_nodes missed this node\");\n+      assert(!OptoRemoveUseless, \"remove_useless_nodes missed this node\");\n","filename":"src\/hotspot\/share\/opto\/phaseX.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1149,3 +1149,0 @@\n-  develop(bool, UseLoopSafepoints, true,                                    \\\n-          \"Generate Safepoint nodes in every loop\")                         \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,41 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 6232281\n- * @requires vm.debug == true & vm.compiler2.enabled\n- * @summary Tests that C2 does not crash trivially with a \"remove_useless_nodes\n- *          missed this node\" message when UseLoopSafepoints is disabled.\n- * @run main\/othervm -Xcomp -XX:-TieredCompilation\n-        -XX:CompileOnly=TestDisableUseLoopSafepoints -XX:-UseLoopSafepoints\n- *      compiler.arguments.TestDisableUseLoopSafepoints\n- *\/\n-\n-package compiler.arguments;\n-\n-public class TestDisableUseLoopSafepoints {\n-    public static void main(String[] args) {\n-        System.out.println(\"Passed\");\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/arguments\/TestDisableUseLoopSafepoints.java","additions":0,"deletions":41,"binary":false,"changes":41,"status":"deleted"}]}