{"files":[{"patch":"@@ -108,0 +108,1 @@\n+                return false;\n@@ -109,1 +110,0 @@\n-            return check;\n@@ -117,0 +117,1 @@\n+                return false;\n@@ -118,1 +119,0 @@\n-            return check;\n@@ -126,0 +126,1 @@\n+                return false;\n@@ -127,1 +128,0 @@\n-            return check;\n@@ -135,0 +135,1 @@\n+                return false;\n@@ -136,1 +137,0 @@\n-            return !check;\n@@ -144,0 +144,1 @@\n+                return false;\n@@ -145,1 +146,0 @@\n-            return check;\n@@ -153,0 +153,1 @@\n+                return false;\n@@ -154,1 +155,0 @@\n-            return check;\n@@ -162,0 +162,1 @@\n+                return false;\n@@ -163,1 +164,0 @@\n-            return check;\n@@ -165,1 +165,1 @@\n-        \/\/ No conditions, always apply.\n+        \/\/ All preconditions satisfied: apply rule.\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/test\/IREncodingPrinter.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test 8294236\n+ * @summary Tests different sources and combinations of preconditions.\n+ * @library \/test\/lib \/\n+ * @run driver ir_framework.tests.TestPreconditions\n+ *\/\n+\n+package ir_framework.tests;\n+\n+import compiler.lib.ir_framework.*;\n+\n+public class TestPreconditions {\n+\n+    public static void main(String[] args) {\n+        TestFramework.runWithFlags(\"-XX:LoopMaxUnroll=8\");\n+    }\n+\n+    \/\/ The IR check should not be applied, since LoopMaxUnroll is set to 8.\n+    @Test\n+    @IR(applyIf = {\"LoopMaxUnroll\", \"= 0\"},\n+        counts = {IRNode.LOOP, \">= 1000\"})\n+    public static void testApplyIfOnly() {}\n+\n+    \/\/ The IR check should not be applied, since the CPU feature does not exist.\n+    @Test\n+    @IR(applyIfCPUFeature={\"this-feature-does-not-exist-at-all\", \"true\"},\n+        counts = {IRNode.LOOP, \">= 1000\"})\n+    public static void testApplyIfCPUFeatureOnly() {}\n+\n+    \/\/ The IR check should not be applied, since the CPU feature does not exist.\n+    @Test\n+    @IR(applyIfCPUFeature={\"this-feature-does-not-exist-at-all\", \"true\"},\n+        applyIf = {\"LoopMaxUnroll\", \"= 8\"},\n+        counts = {IRNode.LOOP, \">= 1000\"})\n+    public static void testApplyBoth() {}\n+\n+}\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestPreconditions.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"}]}