{"files":[{"patch":"@@ -98,0 +98,5 @@\n+    private void printDisableReason(String method, String reason) {\n+        TestFrameworkSocket.write(\"Disabling IR matching for \" + method + \": \" + reason + \".\",\n+                                  \"[IREncodingPrinter]\", true);\n+    }\n+\n@@ -102,0 +107,24 @@\n+        } else if (irAnno.applyIf().length != 0 && !hasAllRequiredFlags(irAnno.applyIf(), \"applyIf\")) {\n+            printDisableReason(m, \"Flag constraint not met\");\n+            return false;\n+        } else if (irAnno.applyIfNot().length != 0 && !hasNoRequiredFlags(irAnno.applyIfNot(), \"applyIfNot\")) {\n+            printDisableReason(m, \"Flag constraint not met\");\n+            return false;\n+        } else if (irAnno.applyIfAnd().length != 0 && !hasAllRequiredFlags(irAnno.applyIfAnd(), \"applyIfAnd\")) {\n+            printDisableReason(m, \"All flag constraints not met\");\n+            return false;\n+        } else if (irAnno.applyIfOr().length != 0 && hasNoRequiredFlags(irAnno.applyIfOr(), \"applyIfOr\")) {\n+            printDisableReason(m, \"None of the flag constraints met\");\n+            return false;\n+        } else if (irAnno.applyIfCPUFeature().length != 0 && !hasAllRequiredCPUFeature(irAnno.applyIfCPUFeature())) {\n+            printDisableReason(m, \"Feature constraint not met\");\n+            return false;\n+        } else if (irAnno.applyIfCPUFeatureAnd().length != 0 && !hasAllRequiredCPUFeature(irAnno.applyIfCPUFeatureAnd())) {\n+            printDisableReason(m, \"All feature constraints not met\");\n+            return false;\n+        } else if (irAnno.applyIfCPUFeatureOr().length != 0 && !hasAnyRequiredCPUFeature(irAnno.applyIfCPUFeatureOr())) {\n+            printDisableReason(m, \"None of the feature constraints met\");\n+            return false;\n+        } else {\n+            \/\/ All preconditions satisfied: apply rule.\n+            return true;\n@@ -103,64 +132,0 @@\n-        if (irAnno.applyIf().length != 0) {\n-            boolean check = hasAllRequiredFlags(irAnno.applyIf(), \"applyIf\");\n-            if (!check) {\n-                TestFrameworkSocket.write(\"Disabling IR matching for \" + m + \": Flag constraint not met.\",\n-                                     \"[IREncodingPrinter]\", true);\n-                return false;\n-            }\n-        }\n-\n-        if (irAnno.applyIfNot().length != 0) {\n-            boolean check = hasNoRequiredFlags(irAnno.applyIfNot(), \"applyIfNot\");\n-            if (!check) {\n-                TestFrameworkSocket.write(\"Disabling IR matching for \" + m + \": Flag constraint not met.\",\n-                                     \"[IREncodingPrinter]\", true);\n-                return false;\n-            }\n-        }\n-\n-        if (irAnno.applyIfAnd().length != 0) {\n-            boolean check = hasAllRequiredFlags(irAnno.applyIfAnd(), \"applyIfAnd\");\n-            if (!check) {\n-                TestFrameworkSocket.write(\"Disabling IR matching for \" + m + \": All flag constraints not met.\",\n-                                     \"[IREncodingPrinter]\", true);\n-                return false;\n-            }\n-        }\n-\n-        if (irAnno.applyIfOr().length != 0) {\n-            boolean check = hasNoRequiredFlags(irAnno.applyIfOr(), \"applyIfOr\");\n-            if (check) {\n-                TestFrameworkSocket.write(\"Disabling IR matching for \" + m + \": None of the flag constraint met.\",\n-                                     \"[IREncodingPrinter]\", true);\n-                return false;\n-            }\n-        }\n-\n-        if (irAnno.applyIfCPUFeature().length != 0) {\n-            boolean check = hasAllRequiredCPUFeature(irAnno.applyIfCPUFeature());\n-            if (!check) {\n-                TestFrameworkSocket.write(\"Disabling IR matching for \" + m + \": Feature constraint not met.\",\n-                                     \"[IREncodingPrinter]\", true);\n-                return false;\n-            }\n-        }\n-\n-        if (irAnno.applyIfCPUFeatureAnd().length != 0) {\n-            boolean check = hasAllRequiredCPUFeature(irAnno.applyIfCPUFeatureAnd());\n-            if (!check) {\n-                TestFrameworkSocket.write(\"Disabling IR matching for \" + m + \": All feature constraints not met.\",\n-                                     \"[IREncodingPrinter]\", true);\n-                return false;\n-            }\n-        }\n-\n-        if (irAnno.applyIfCPUFeatureOr().length != 0) {\n-            boolean check = hasAnyRequiredCPUFeature(irAnno.applyIfCPUFeatureOr());\n-            if (!check) {\n-                TestFrameworkSocket.write(\"Disabling IR matching for \" + m + \": None of the feature constraint met.\",\n-                                     \"[IREncodingPrinter]\", true);\n-                return false;\n-            }\n-        }\n-        \/\/ All preconditions satisfied: apply rule.\n-        return true;\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/test\/IREncodingPrinter.java","additions":29,"deletions":64,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-    \/\/ The IR check should not be applied, since LoopMaxUnroll is set to 8.\n+    \/\/ The IR check should not be applied, since the VM is run with LoopMaxUnroll=8.\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestPreconditions.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}