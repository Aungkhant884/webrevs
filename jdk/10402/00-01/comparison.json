{"files":[{"patch":"@@ -67,1 +67,1 @@\n-An `@IR` annotation allows additional preconditions\/restrictions on the currently present VM flags to enable or disable rules when certain flags are present or have a specific value (see `applyIfXX` properties of an `@IR` annotation).\n+An `@IR` annotation allows additional preconditions\/restrictions on the currently present VM flags to enable or disable rules when certain flags are present or have a specific value (see `applyIfXX` properties of an `@IR` annotation). If a `@Test` annotated method has multiple preconditions (for example `applyIf` and `applyIfCPUFeature`), they are evaluated as a logical conjunction.\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/README.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @requires vm.compiler2.enabled\n@@ -49,1 +50,1 @@\n-    @IR(applyIfCPUFeature={\"this-feature-does-not-exist-at-all\", \"true\"},\n+    @IR(applyIfCPUFeature = {\"this-feature-does-not-exist-at-all\", \"true\"},\n@@ -55,1 +56,1 @@\n-    @IR(applyIfCPUFeature={\"this-feature-does-not-exist-at-all\", \"true\"},\n+    @IR(applyIfCPUFeature = {\"this-feature-does-not-exist-at-all\", \"true\"},\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestPreconditions.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}