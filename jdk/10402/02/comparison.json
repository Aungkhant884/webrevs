{"files":[{"patch":"@@ -67,1 +67,1 @@\n-An `@IR` annotation allows additional preconditions\/restrictions on the currently present VM flags to enable or disable rules when certain flags are present or have a specific value (see `applyIfXX` properties of an `@IR` annotation).\n+An `@IR` annotation allows additional preconditions\/restrictions on the currently present VM flags to enable or disable rules when certain flags are present or have a specific value (see `applyIfXX` properties of an `@IR` annotation). If a `@Test` annotated method has multiple preconditions (for example `applyIf` and `applyIfCPUFeature`), they are evaluated as a logical conjunction.\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/README.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -98,0 +98,5 @@\n+    private void printDisableReason(String method, String reason) {\n+        TestFrameworkSocket.write(\"Disabling IR matching for \" + method + \": \" + reason + \".\",\n+                                  \"[IREncodingPrinter]\", true);\n+    }\n+\n@@ -102,0 +107,24 @@\n+        } else if (irAnno.applyIf().length != 0 && !hasAllRequiredFlags(irAnno.applyIf(), \"applyIf\")) {\n+            printDisableReason(m, \"Flag constraint not met\");\n+            return false;\n+        } else if (irAnno.applyIfNot().length != 0 && !hasNoRequiredFlags(irAnno.applyIfNot(), \"applyIfNot\")) {\n+            printDisableReason(m, \"Flag constraint not met\");\n+            return false;\n+        } else if (irAnno.applyIfAnd().length != 0 && !hasAllRequiredFlags(irAnno.applyIfAnd(), \"applyIfAnd\")) {\n+            printDisableReason(m, \"All flag constraints not met\");\n+            return false;\n+        } else if (irAnno.applyIfOr().length != 0 && hasNoRequiredFlags(irAnno.applyIfOr(), \"applyIfOr\")) {\n+            printDisableReason(m, \"None of the flag constraints met\");\n+            return false;\n+        } else if (irAnno.applyIfCPUFeature().length != 0 && !hasAllRequiredCPUFeature(irAnno.applyIfCPUFeature())) {\n+            printDisableReason(m, \"Feature constraint not met\");\n+            return false;\n+        } else if (irAnno.applyIfCPUFeatureAnd().length != 0 && !hasAllRequiredCPUFeature(irAnno.applyIfCPUFeatureAnd())) {\n+            printDisableReason(m, \"All feature constraints not met\");\n+            return false;\n+        } else if (irAnno.applyIfCPUFeatureOr().length != 0 && !hasAnyRequiredCPUFeature(irAnno.applyIfCPUFeatureOr())) {\n+            printDisableReason(m, \"None of the feature constraints met\");\n+            return false;\n+        } else {\n+            \/\/ All preconditions satisfied: apply rule.\n+            return true;\n@@ -103,64 +132,0 @@\n-        if (irAnno.applyIf().length != 0) {\n-            boolean check = hasAllRequiredFlags(irAnno.applyIf(), \"applyIf\");\n-            if (!check) {\n-                TestFrameworkSocket.write(\"Disabling IR matching for \" + m + \": Flag constraint not met.\",\n-                                     \"[IREncodingPrinter]\", true);\n-            }\n-            return check;\n-        }\n-\n-        if (irAnno.applyIfNot().length != 0) {\n-            boolean check = hasNoRequiredFlags(irAnno.applyIfNot(), \"applyIfNot\");\n-            if (!check) {\n-                TestFrameworkSocket.write(\"Disabling IR matching for \" + m + \": Flag constraint not met.\",\n-                                     \"[IREncodingPrinter]\", true);\n-            }\n-            return check;\n-        }\n-\n-        if (irAnno.applyIfAnd().length != 0) {\n-            boolean check = hasAllRequiredFlags(irAnno.applyIfAnd(), \"applyIfAnd\");\n-            if (!check) {\n-                TestFrameworkSocket.write(\"Disabling IR matching for \" + m + \": All flag constraints not met.\",\n-                                     \"[IREncodingPrinter]\", true);\n-            }\n-            return check;\n-        }\n-\n-        if (irAnno.applyIfOr().length != 0) {\n-            boolean check = hasNoRequiredFlags(irAnno.applyIfOr(), \"applyIfOr\");\n-            if (check) {\n-                TestFrameworkSocket.write(\"Disabling IR matching for \" + m + \": None of the flag constraint met.\",\n-                                     \"[IREncodingPrinter]\", true);\n-            }\n-            return !check;\n-        }\n-\n-        if (irAnno.applyIfCPUFeature().length != 0) {\n-            boolean check = hasAllRequiredCPUFeature(irAnno.applyIfCPUFeature());\n-            if (!check) {\n-                TestFrameworkSocket.write(\"Disabling IR matching for \" + m + \": Feature constraint not met.\",\n-                                     \"[IREncodingPrinter]\", true);\n-            }\n-            return check;\n-        }\n-\n-        if (irAnno.applyIfCPUFeatureAnd().length != 0) {\n-            boolean check = hasAllRequiredCPUFeature(irAnno.applyIfCPUFeatureAnd());\n-            if (!check) {\n-                TestFrameworkSocket.write(\"Disabling IR matching for \" + m + \": All feature constraints not met.\",\n-                                     \"[IREncodingPrinter]\", true);\n-            }\n-            return check;\n-        }\n-\n-        if (irAnno.applyIfCPUFeatureOr().length != 0) {\n-            boolean check = hasAnyRequiredCPUFeature(irAnno.applyIfCPUFeatureOr());\n-            if (!check) {\n-                TestFrameworkSocket.write(\"Disabling IR matching for \" + m + \": None of the feature constraint met.\",\n-                                     \"[IREncodingPrinter]\", true);\n-            }\n-            return check;\n-        }\n-        \/\/ No conditions, always apply.\n-        return true;\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/test\/IREncodingPrinter.java","additions":29,"deletions":64,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test 8294236\n+ * @summary Tests different sources and combinations of preconditions.\n+ * @library \/test\/lib \/\n+ * @requires vm.compiler2.enabled\n+ * @run driver ir_framework.tests.TestPreconditions\n+ *\/\n+\n+package ir_framework.tests;\n+\n+import compiler.lib.ir_framework.*;\n+\n+public class TestPreconditions {\n+\n+    public static void main(String[] args) {\n+        TestFramework.runWithFlags(\"-XX:LoopMaxUnroll=8\");\n+    }\n+\n+    \/\/ The IR check should not be applied, since the VM is run with LoopMaxUnroll=8.\n+    @Test\n+    @IR(applyIf = {\"LoopMaxUnroll\", \"= 0\"},\n+        counts = {IRNode.LOOP, \">= 1000\"})\n+    public static void testApplyIfOnly() {}\n+\n+    \/\/ The IR check should not be applied, since the CPU feature does not exist.\n+    @Test\n+    @IR(applyIfCPUFeature = {\"this-feature-does-not-exist-at-all\", \"true\"},\n+        counts = {IRNode.LOOP, \">= 1000\"})\n+    public static void testApplyIfCPUFeatureOnly() {}\n+\n+    \/\/ The IR check should not be applied, since the CPU feature does not exist.\n+    @Test\n+    @IR(applyIfCPUFeature = {\"this-feature-does-not-exist-at-all\", \"true\"},\n+        applyIf = {\"LoopMaxUnroll\", \"= 8\"},\n+        counts = {IRNode.LOOP, \">= 1000\"})\n+    public static void testApplyBoth() {}\n+\n+}\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestPreconditions.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"}]}