{"files":[{"patch":"@@ -1,84 +0,0 @@\n-\/*\n- * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8025703\n- * @summary Verify implementation for Locale matching.\n- * @run junit Bug8025703\n- *\/\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Locale.LanguageRange;\n-import java.util.stream.Stream;\n-\n-import org.junit.jupiter.params.ParameterizedTest;\n-import org.junit.jupiter.params.provider.Arguments;\n-import org.junit.jupiter.params.provider.MethodSource;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-\n-public class Bug8025703 {\n-\n-    \/**\n-     * This test checks that parsing a range returns the expected\n-     * language priority list by matching the correct tag(s). This test\n-     * was originally created to verify an older update to the LSR data file,\n-     * and the test may be deprecated by LanguageSubtagRegistryTest.java\n-     *\/\n-    @ParameterizedTest\n-    @MethodSource(\"mappings\")\n-    public void localeMatchingTest(String range1, String range2) {\n-        List<LanguageRange> actual = LanguageRange.parse(range1);\n-        ArrayList<LanguageRange> expected = new ArrayList<>();\n-        expected.add(new LanguageRange(range1, 1.0));\n-        expected.add(new LanguageRange(range2, 1.0));\n-        assertEquals(expected, actual, () -> getRangeAndWeights(expected, actual));\n-    }\n-\n-    \/\/ Tags that map to each other\n-    private static Stream<Arguments> mappings() {\n-        return Stream.of(\n-                Arguments.of(\"ilw\", \"gal\"),\n-                Arguments.of(\"meg\", \"cir\"),\n-                Arguments.of(\"pcr\", \"adx\"),\n-                Arguments.of(\"xia\", \"acn\"),\n-                Arguments.of(\"yos\", \"zom\")\n-        );\n-    }\n-\n-    \/\/ Helper function to log differences\n-    private String getRangeAndWeights(ArrayList<LanguageRange> expected, List<LanguageRange> actual) {\n-       StringBuilder errOutput = new StringBuilder();\n-        for (LanguageRange lr : expected) {\n-            errOutput.append(String.format(\"%nExpected: \" +\n-                    \"range='%s', weight='%s'\", lr.getRange(), lr.getWeight()));\n-        }\n-        for (LanguageRange lr : actual) {\n-            errOutput.append(String.format(\"%nActual: \" +\n-                    \"range='%s', weight='%s'\", lr.getRange(), lr.getWeight()));\n-        }\n-       return errOutput.toString();\n-    }\n-}\n","filename":"test\/jdk\/java\/util\/Locale\/Bug8025703.java","additions":0,"deletions":84,"binary":false,"changes":84,"status":"deleted"},{"patch":"@@ -76,0 +76,2 @@\n+    \/\/ expectedISO639Codes generated from https:\/\/www.loc.gov\/standards\/iso639-2\/ISO-639-2_utf-8.txt\n+    \/\/ on March 9th, 2023.\n@@ -272,1 +274,0 @@\n-    \/\/ The following code was used to generate the table above from the two ISO standards.\n@@ -297,3 +298,0 @@\n-\n-\/\/ CODES generated from https:\/\/www.loc.gov\/standards\/iso639-2\/ISO-639-2_utf-8.txt\n-\/\/ on March 9th, 2023.\n","filename":"test\/jdk\/java\/util\/Locale\/ISO639.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8040211 8191404 8203872 8222980 8225435 8241082 8242010 8247432\n+ * @bug 8025703 8040211 8191404 8203872 8222980 8225435 8241082 8242010 8247432\n@@ -48,3 +48,3 @@\n-        + \" en-gb-oed, gti, iba, jks, kdz, kjh, kmb, koj, kru, ksp, kwq, kxe, kzk, lgs, lii, lmm, lsb, lsc, lsn, lsv, lsw, lvi, mtm,\"\n-        + \" ngv, nns, ola, oyb, pat, phr, plu, pnd, pub, rib, rnb, rsn, scv, snz, sqx, suj, szy, taj, tdg, tjj, tjp, tpn, tvx,\"\n-        + \" umi, uss, uth, ysm, zko, wkr;q=0.9, ar-hyw;q=0.8, yug;q=0.5, gfx;q=0.4\";\n+        + \" en-gb-oed, gti, iba, ilw, jks, kdz, kjh, kmb, koj, kru, ksp, kwq, kxe, kzk, lgs, lii, lmm, lsb, lsc, lsn, lsv, lsw, lvi, meg, mtm,\"\n+        + \" ngv, nns, ola, oyb, pat, pcr, phr, plu, pnd, pub, rib, rnb, rsn, scv, snz, sqx, suj, szy, taj, tdg, tjj, tjp, tpn, tvx,\"\n+        + \" umi, uss, uth, xia, yos, ysm, zko, wkr;q=0.9, ar-hyw;q=0.8, yug;q=0.5, gfx;q=0.4\";\n@@ -105,0 +105,2 @@\n+            new LanguageRange(\"ilw\", 1.0),\n+            new LanguageRange(\"gal\", 1.0),\n@@ -143,0 +145,2 @@\n+            new LanguageRange(\"meg\", 1.0),\n+            new LanguageRange(\"cir\", 1.0),\n@@ -157,0 +161,2 @@\n+            new LanguageRange(\"pcr\", 1.0),\n+            new LanguageRange(\"adx\", 1.0),\n@@ -191,0 +197,4 @@\n+            new LanguageRange(\"xia\", 1.0),\n+            new LanguageRange(\"acn\", 1.0),\n+            new LanguageRange(\"yos\", 1.0),\n+            new LanguageRange(\"zom\", 1.0),\n","filename":"test\/jdk\/java\/util\/Locale\/LanguageSubtagRegistryTest.java","additions":14,"deletions":4,"binary":false,"changes":18,"status":"modified"}]}