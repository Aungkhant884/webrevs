{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,3 +32,1 @@\n-\n-import jdk.internal.util.OperatingSystem;\n-import jdk.internal.util.Version;\n+import sun.security.action.GetPropertyAction;\n@@ -102,2 +100,1 @@\n-                return OperatingSystem.version()\n-                        .compareTo(new Version(10, 14)) >= 0;\n+                return isOsVersionGte(10, 14);\n@@ -119,0 +116,13 @@\n+\n+    \/**\n+     * Returns true if the OS major\/minor version is greater than, or equal, to the\n+     * given major\/minor version.\n+     *\/\n+    private static boolean isOsVersionGte(int requiredMajor, int requiredMinor) {\n+        String osVersion = GetPropertyAction.privilegedGetProperty(\"os.version\");\n+        String[] vers = Util.split(osVersion, '.');\n+        int majorVersion = Integer.parseInt(vers[0]);\n+        int minorVersion = Integer.parseInt(vers[1]);\n+        return (majorVersion > requiredMajor)\n+                || (majorVersion == requiredMajor && minorVersion >= requiredMinor);\n+    }\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/fs\/BsdFileStore.java","additions":16,"deletions":6,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -146,1 +146,1 @@\n-        return osVersion;\n+        return CURRENT_VERSION;\n@@ -150,1 +150,1 @@\n-    private static Version osVersion = initVersion();\n+    private static final Version CURRENT_VERSION = initVersion();\n@@ -156,2 +156,2 @@\n-        } catch (IllegalArgumentException ile) {\n-            throw new AssertionError(\"os.version malformed: \" + osVer);\n+        } catch (IllegalArgumentException iae) {\n+            throw new InternalError(\"os.version malformed: \" + osVer, iae);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/OperatingSystem.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-    private static Stream<Arguments> illegalVersionParams() {\n+    private static Stream<String> illegalVersionParams() {\n@@ -68,7 +68,3 @@\n-                Arguments.of(\"1.\", IllegalArgumentException.class),     \/\/ dot without digits\n-                Arguments.of(\"1.2.\", IllegalArgumentException.class),   \/\/ dot without digits\n-                Arguments.of(\"1.-abc\", IllegalArgumentException.class), \/\/ dot without digits\n-                Arguments.of(\"1.2.-abc\", IllegalArgumentException.class), \/\/ dot without digits\n-                Arguments.of(\"\", IllegalArgumentException.class),\n-                Arguments.of(\"xaaa\", IllegalArgumentException.class),\n-                Arguments.of(\"abc.xyz\", IllegalArgumentException.class)\n+                \"1.\", \"1.2.\", \"1.-abc\", \"1.2.-abc\", \/\/ dot without digits\n+                \"\",                                 \/\/ empty\n+                \"xaaa\", \"abc.xyz\"                   \/\/ no initial digit\n@@ -80,7 +76,4 @@\n-    public void checkIllegalParse(String verName, Class<Throwable> exception) {\n-        try {\n-            Version.parse(verName);\n-        } catch (Throwable th) {\n-            System.err.printf(\"%s: %s%n\", verName, th.getMessage());\n-        }\n-        assertThrows(exception, () -> Version.parse(verName));\n+    public void checkIllegalParse(String verName) {\n+        Throwable th = assertThrows(IllegalArgumentException.class, () -> Version.parse(verName));\n+        String expectedMsg = \"malformed version, missing digits: \" + verName;\n+        assertEquals(th.getMessage(), expectedMsg, \"message mismatch\");\n@@ -92,1 +85,1 @@\n-                Arguments.of(new Version(2, 1), new Version(2, 0), 1),\n+                Arguments.of(new Version(2, 1), new Version(2, 0), +1),\n@@ -95,1 +88,1 @@\n-                Arguments.of(new Version(3, 3, 1), new Version(3, 3, 0), 1),\n+                Arguments.of(new Version(3, 3, 1), new Version(3, 3, 0), +1),\n@@ -97,0 +90,3 @@\n+                Arguments.of(new Version(2, 1), new Version(2, 1), 0),\n+                Arguments.of(new Version(2, 0), new Version(3, 0), -1),\n+                Arguments.of(new Version(3, 0), new Version(2, 0), +1),\n","filename":"test\/jdk\/jdk\/internal\/util\/VersionTest.java","additions":13,"deletions":17,"binary":false,"changes":30,"status":"modified"}]}