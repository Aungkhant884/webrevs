{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,3 @@\n-import sun.security.action.GetPropertyAction;\n+\n+import jdk.internal.util.OperatingSystem;\n+import jdk.internal.util.Version;\n@@ -35,7 +37,0 @@\n-        String osVersion = GetPropertyAction.privilegedGetProperty(\"os.version\");\n-        \/\/ dynamic linker cache support on os.version >= 11.x\n-        int major = 11;\n-        int i = osVersion.indexOf('.');\n-        try {\n-            major = Integer.parseInt(i < 0 ? osVersion : osVersion.substring(0, i));\n-        } catch (NumberFormatException e) {}\n@@ -43,1 +38,2 @@\n-        hasDynamicLoaderCache = major >= 11 || osVersion.equals(\"10.16\");\n+        hasDynamicLoaderCache = OperatingSystem.version()\n+                .compareTo(new Version(10, 16)) >= 0;\n","filename":"src\/java.base\/macosx\/classes\/jdk\/internal\/loader\/ClassLoaderHelper.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-import java.util.Locale;\n-\n@@ -132,1 +130,10 @@\n-        return OperatingSystem.valueOf(osName.toUpperCase(Locale.ROOT));\n+        \/\/ Too early to use Locale conversions, manually do uppercase\n+        StringBuilder sb = new StringBuilder(osName);\n+        for (int i = 0; i < sb.length(); i++) {\n+            char ch = sb.charAt(i);\n+            if (ch >= 'a' && ch <= 'z') {\n+                sb.setCharAt(i, (char)(ch - ('a' - 'A')));  \/\/ Map lower case down to uppercase\n+            }\n+        }\n+        osName = sb.toString();\n+        return OperatingSystem.valueOf(osName);\n@@ -135,0 +142,18 @@\n+    \/**\n+     * {@return the operating system version with major, minor, micro}\n+     *\/\n+    public static Version version() {\n+        return CURRENT_VERSION;\n+    }\n+\n+    \/\/ Parse and save the current version\n+    private static final Version CURRENT_VERSION = initVersion();\n+\n+    private static Version initVersion() {\n+        final String osVer = StaticProperty.osVersion();\n+        try {\n+            return Version.parse(osVer);\n+        } catch (IllegalArgumentException iae) {\n+            throw new InternalError(\"os.version malformed: \" + osVer, iae);\n+        }\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/OperatingSystem.java","additions":28,"deletions":3,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+    private static final String OS_VERSION;\n@@ -80,0 +81,1 @@\n+        OS_VERSION = getProperty(props, \"os.version\");\n@@ -268,0 +270,9 @@\n+\n+     \/**\n+      * {@return the {@code os.version} system property}\n+      * <strong>{@link SecurityManager#checkPropertyAccess} is NOT checked\n+      * in this method. This property is not considered security sensitive.<\/strong>\n+      *\/\n+     public static String osVersion() {\n+         return OS_VERSION;\n+     }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/StaticProperty.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,114 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.util;\n+\n+\/**\n+ * A software Version with major, minor, and micro components.\n+ * @param major major version\n+ * @param minor minor version\n+ * @param micro micro version\n+ *\/\n+public record Version(int major, int minor, int micro) implements Comparable<Version> {\n+\n+    \/**\n+     * {@return a Version for major, minor versions}\n+     *\n+     * @param major major version\n+     * @param minor minor version\n+     *\/\n+    public Version(int major, int minor) {\n+        this(major, minor, 0);\n+    }\n+\n+    \/**\n+     * {@return Compare this version with another version}\n+     *\n+     * @param other the object to be compared\n+     *\/\n+    @Override\n+    public int compareTo(Version other) {\n+        int result = Integer.compare(major, other.major);\n+        if (result == 0) {\n+            result = Integer.compare(minor, other.minor);\n+            if (result == 0) {\n+                return Integer.compare(micro, other.micro);\n+            }\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return (micro == 0)\n+                ? major + \".\" + minor\n+                : major + \".\" + minor + \".\" + micro;\n+    }\n+\n+    \/**\n+     * {@return A Version parsed from a version string split on \".\" characters}\n+     * Only major, minor, and micro version numbers are parsed, finer detail is ignored.\n+     * Missing values for minor and micro are replaced with zero.\n+     * The string must start with a number, if there is a '.' it must be followed by a number.\n+     * <p>\n+     * Parsed by hand because it is called before RegEx can be initialized safely.\n+     *\n+     * @param str a version string\n+     * @throws IllegalArgumentException if the string does not start with digits\n+     *          or digits do not follow '.'\n+     *\/\n+    public static Version parse(String str) throws IllegalArgumentException {\n+        int len = str.length();\n+        int majorStart = 0;\n+        int majorEnd = skipDigits(str, majorStart);\n+        int major = Integer.parseInt(str.substring(majorStart, majorEnd));\n+\n+        int minor = 0, micro = 0;\n+        if (majorEnd < len && str.charAt(majorEnd) == '.') {\n+            int minorStart = majorEnd + 1;\n+            int minorEnd = skipDigits(str, minorStart);\n+            minor = Integer.parseInt(str.substring(minorStart, minorEnd));\n+\n+            if (minorEnd < len && str.charAt(minorEnd) == '.') {\n+                int microStart = minorEnd + 1;\n+                int microEnd = skipDigits(str, microStart);\n+                micro = Integer.parseInt(str.substring(microStart, microEnd));\n+            }\n+        }\n+        return new Version(major, minor, micro);\n+    }\n+\n+    \/**\n+     * {@return The index of the first non-digit from start}\n+     * @throws IllegalArgumentException if there are no digits\n+     *\/\n+\n+    private static int skipDigits(String s, int start) {\n+        int index = start;\n+        while (index < s.length() && Character.isDigit(s.charAt(index))) {\n+            index++;\n+        }\n+        if (index == start)\n+            throw new IllegalArgumentException(\"malformed version, missing digits: \" + s);\n+        return index;\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/Version.java","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"},{"patch":"@@ -35,0 +35,2 @@\n+import jdk.internal.util.StaticProperty;\n+import jdk.internal.util.Version;\n@@ -40,0 +42,1 @@\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -86,0 +89,8 @@\n+\n+    @Test\n+    public void checkOsVersion() {\n+        Version ver = OperatingSystem.version();\n+        String osVersion = StaticProperty.osVersion();\n+        System.err.printf(\"os.version: %s, version().toString(): %s%n\", osVersion, ver);\n+        assertTrue(osVersion.startsWith(ver.toString()), \"version().toString() is not prefix of vs os.version property\");\n+    }\n","filename":"test\/jdk\/jdk\/internal\/util\/OSTest.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+import java.util.stream.Stream;\n+\n+import jdk.internal.util.Version;\n+\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+\/**\n+ * @test\n+ * @summary test jdk.internal.util.Version\n+ * @modules java.base\/jdk.internal.util\n+ * @run junit VersionTest\n+ *\/\n+\n+public class VersionTest {\n+\n+    private static Stream<Arguments> versionParams() {\n+        return Stream.of(\n+                Arguments.of(\"1\", new Version(1, 0)),\n+                Arguments.of(\"1.2\", new Version(1, 2)),\n+                Arguments.of(\"1.2\", new Version(1, 2, 0)),\n+                Arguments.of(\"1.2.3\", new Version(1, 2, 3)),\n+                Arguments.of(\"1-abc\", new Version(1, 0, 0)), \/\/ Ignore extra\n+                Arguments.of(\"1.2-abc\", new Version(1, 2, 0)), \/\/ Ignore extra\n+                Arguments.of(\"1.2.3.4\", new Version(1, 2, 3)), \/\/ Ignore extra\n+                Arguments.of(\"1.2.3-abc\", new Version(1, 2, 3)) \/\/ Ignore extra\n+        );\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"versionParams\")\n+    public void checkParse(String verName, Version expected) {\n+        Version actual = Version.parse(verName);\n+        assertEquals(actual, expected, \"Parsed version mismatch\");\n+    }\n+\n+    private static Stream<String> illegalVersionParams() {\n+        return Stream.of(\n+                \"1.\", \"1.2.\", \"1.-abc\", \"1.2.-abc\", \/\/ dot without digits\n+                \"\",                                 \/\/ empty\n+                \"xaaa\", \"abc.xyz\"                   \/\/ no initial digit\n+        );\n+    }\n+\n+    @ParameterizedTest()\n+    @MethodSource(\"illegalVersionParams\")\n+    public void checkIllegalParse(String verName) {\n+        Throwable th = assertThrows(IllegalArgumentException.class, () -> Version.parse(verName));\n+        String expectedMsg = \"malformed version, missing digits: \" + verName;\n+        assertEquals(th.getMessage(), expectedMsg, \"message mismatch\");\n+    }\n+\n+    private static Stream<Arguments> versionCompare() {\n+        return Stream.of(\n+                Arguments.of(new Version(2, 1), new Version(2, 1), 0),\n+                Arguments.of(new Version(2, 1), new Version(2, 0), +1),\n+                Arguments.of(new Version(2, 0), new Version(2, 1), -1),\n+                Arguments.of(new Version(3, 3, 1), new Version(3, 3, 1), 0),\n+                Arguments.of(new Version(3, 3, 1), new Version(3, 3, 0), +1),\n+                Arguments.of(new Version(3, 3, 0), new Version(3, 3, 1), -1)\n+                Arguments.of(new Version(2, 1), new Version(2, 1), 0),\n+                Arguments.of(new Version(2, 0), new Version(3, 0), -1),\n+                Arguments.of(new Version(3, 0), new Version(2, 0), +1),\n+        );\n+    }\n+\n+    @ParameterizedTest()\n+    @MethodSource(\"versionCompare\")\n+    public void checkVersionCompare(Version v1, Version v2, int expected) {\n+        int result1 = v1.compareTo(v2);\n+        assertEquals(result1, expected, \"v1 vs v2\");\n+        int result2 = v2.compareTo(v1);\n+        assertEquals(result1, -result2, \"compare not reflexive\");\n+    }\n+}\n","filename":"test\/jdk\/jdk\/internal\/util\/VersionTest.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"}]}