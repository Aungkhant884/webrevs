{"files":[{"patch":"@@ -53,0 +53,19 @@\n+\n+# Normalize OPENJDK_TARGET_CPU name to match jdk.internal.util.Architecture enum\n+ifneq ($(filter $(OPENJDK_TARGET_CPU), ppc64le), )\n+  OPENJDK_TARGET_ARCH_CANONICAL = ppc64\n+else ifneq ($(filter $(OPENJDK_TARGET_CPU), s390x), )\n+  OPENJDK_TARGET_ARCH_CANONICAL = s390\n+else ifneq ($(filter $(OPENJDK_TARGET_CPU), x86_64 amd64), )\n+  OPENJDK_TARGET_ARCH_CANONICAL = x64\n+else\n+  OPENJDK_TARGET_ARCH_CANONICAL := $(OPENJDK_TARGET_CPU)\n+endif\n+\n+# Normalize OPENJDK_TARGET_OS operating system name to match jdk.internal.util.OperatingSystem enum\n+ifeq ($(OPENJDK_TARGET_OS), macosx)\n+  OPENJDK_TARGET_OS_CANONICAL = macos\n+else\n+  OPENJDK_TARGET_OS_CANONICAL := $(OPENJDK_TARGET_OS)\n+endif\n+\n@@ -54,2 +73,2 @@\n-    SOURCE_FILES := $(TOPDIR)\/src\/java.base\/share\/classes\/jdk\/internal\/util\/OperatingSystemProps.java.template, \\\n-    OUTPUT_FILE := $(SUPPORT_OUTPUTDIR)\/gensrc\/java.base\/jdk\/internal\/util\/OperatingSystemProps.java, \\\n+    SOURCE_FILES := $(TOPDIR)\/src\/java.base\/share\/classes\/jdk\/internal\/util\/PlatformProps.java.template, \\\n+    OUTPUT_FILE := $(SUPPORT_OUTPUTDIR)\/gensrc\/java.base\/jdk\/internal\/util\/PlatformProps.java, \\\n@@ -57,1 +76,4 @@\n-        @@OPENJDK_TARGET_OS@@ => $(OPENJDK_TARGET_OS), \\\n+        @@OPENJDK_TARGET_OS@@ => $(OPENJDK_TARGET_OS_CANONICAL) ; \\\n+        @@OPENJDK_TARGET_CPU@@ => $(OPENJDK_TARGET_ARCH_CANONICAL) ; \\\n+        @@OPENJDK_TARGET_CPU_ENDIAN@@ => $(OPENJDK_TARGET_CPU_ENDIAN) ; \\\n+        @@OPENJDK_TARGET_CPU_BITS@@ => $(OPENJDK_TARGET_CPU_BITS), \\\n","filename":"make\/modules\/java.base\/gensrc\/GensrcMisc.gmk","additions":25,"deletions":3,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,3 @@\n-import sun.security.action.GetPropertyAction;\n+\n+import jdk.internal.util.OperatingSystem;\n+import jdk.internal.util.Version;\n@@ -33,12 +35,4 @@\n-    private static final boolean hasDynamicLoaderCache;\n-    static {\n-        String osVersion = GetPropertyAction.privilegedGetProperty(\"os.version\");\n-        \/\/ dynamic linker cache support on os.version >= 11.x\n-        int major = 11;\n-        int i = osVersion.indexOf('.');\n-        try {\n-            major = Integer.parseInt(i < 0 ? osVersion : osVersion.substring(0, i));\n-        } catch (NumberFormatException e) {}\n-        \/\/ SDK 10.15 and earlier always reports 10.16 instead of 11.x.x\n-        hasDynamicLoaderCache = major >= 11 || osVersion.equals(\"10.16\");\n-    }\n+\n+    \/\/ SDK 10.15 and earlier always reports 10.16 instead of 11.x.x\n+    private static final boolean hasDynamicLoaderCache = OperatingSystem.version()\n+            .compareTo(new Version(10, 16)) >= 0;\n","filename":"src\/java.base\/macosx\/classes\/jdk\/internal\/loader\/ClassLoaderHelper.java","additions":8,"deletions":14,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -0,0 +1,132 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.util;\n+\n+import jdk.internal.vm.annotation.ForceInline;\n+import java.util.Locale;\n+\n+\/**\n+ * System architecture enum values.\n+ * Each architecture, except OTHER, has a matching {@code public static boolean isXXX()} method\n+ * that is true when running on that architecture.\n+ * The values of `OPENJDK_TARGET_CPU` from the build are mapped to the\n+ * architecture values.\n+ *\/\n+public enum Architecture {\n+    OTHER,      \/\/ An unknown architecture not specifically named\n+    X64,        \/\/ Represents AMD64 and X86_64\n+    X86,\n+    AARCH64,\n+    RISCV64,\n+    S390,\n+    PPC64,\n+    ;\n+\n+    private static Architecture CURRENT_ARCH = initArch(PlatformProps.CURRENT_ARCH_STRING);\n+\n+    \/**\n+     * {@return {@code true} if the current architecture is X64, Aka amd64}\n+     *\/\n+    @ForceInline\n+    public static boolean isX64() {\n+        return PlatformProps.TARGET_ARCH_IS_X64;\n+    }\n+\n+    \/**\n+     * {@return {@code true} if the current architecture is X86}\n+     *\/\n+    @ForceInline\n+    public static boolean isX86() {\n+        return PlatformProps.TARGET_ARCH_IS_X86;\n+    }\n+\n+    \/**\n+     * {@return {@code true} if the current architecture is RISCV64}\n+     *\/\n+    @ForceInline\n+    public static boolean isRISCV64() {\n+        return PlatformProps.TARGET_ARCH_IS_RISCV64;\n+    }\n+\n+    \/**\n+     * {@return {@code true} if the current architecture is S390}\n+     *\/\n+    @ForceInline\n+    public static boolean isS390() {\n+        return PlatformProps.TARGET_ARCH_IS_S390;\n+    }\n+\n+    \/**\n+     * {@return {@code true} if the current architecture is PPC64}\n+     * Use {@link #isLittleEndian()} to determine big or little endian.\n+     *\/\n+    @ForceInline\n+    public static boolean isPPC64() {\n+        return PlatformProps.TARGET_ARCH_IS_PPC64;\n+    }\n+\n+    \/**\n+     * {@return {@code true} if the current architecture is AARCH64}\n+     *\/\n+    @ForceInline\n+    public static boolean isAARCH64() {\n+        return PlatformProps.TARGET_ARCH_IS_AARCH64;\n+    }\n+\n+    \/**\n+     * {@return the current architecture}\n+     *\/\n+    public static Architecture current() {\n+        return CURRENT_ARCH;\n+    }\n+\n+    \/**\n+     * {@return {@code true} if the current architecture is 64-bit}\n+     *\/\n+    @ForceInline\n+    public static boolean is64bit() {\n+        return PlatformProps.TARGET_ARCH_BITS == 64;\n+    }\n+\n+    \/**\n+     * {@return {@code true} if the current architecture is little-endian}\n+     *\/\n+    @ForceInline\n+    public static boolean isLittleEndian() {\n+        return PlatformProps.TARGET_ARCH_LITTLE_ENDIAN;\n+    }\n+\n+\n+    \/**\n+     * Returns the Architecture of the built architecture.\n+     * Build time names are mapped to respective uppercase enum values.\n+     * Names not recognized are mapped to Architecture.OTHER.\n+     *\/\n+    private static Architecture initArch(String archName) {\n+        try {\n+            return Architecture.valueOf(archName.toUpperCase(Locale.ROOT));\n+        } catch (IllegalArgumentException ile) {\n+            return Architecture.OTHER;\n+        }\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/Architecture.java","additions":132,"deletions":0,"binary":false,"changes":132,"status":"added"},{"patch":"@@ -25,1 +25,1 @@\n-import jdk.internal.util.OperatingSystemProps;\n+import jdk.internal.util.PlatformProps;\n@@ -83,2 +83,1 @@\n-    \/\/ Cache a copy of the array for lightweight indexing\n-    private static final OperatingSystem[] osValues = OperatingSystem.values();\n+    private static final OperatingSystem CURRENT_OS = initOS(PlatformProps.CURRENT_OS_STRING);\n@@ -91,1 +90,1 @@\n-        return OperatingSystemProps.TARGET_OS_IS_LINUX;\n+        return PlatformProps.TARGET_OS_IS_LINUX;\n@@ -99,1 +98,1 @@\n-        return OperatingSystemProps.TARGET_OS_IS_MACOSX;\n+        return PlatformProps.TARGET_OS_IS_MACOS;\n@@ -107,1 +106,1 @@\n-        return OperatingSystemProps.TARGET_OS_IS_WINDOWS;\n+        return PlatformProps.TARGET_OS_IS_WINDOWS;\n@@ -115,1 +114,1 @@\n-        return OperatingSystemProps.TARGET_OS_IS_AIX;\n+        return PlatformProps.TARGET_OS_IS_AIX;\n@@ -122,1 +121,38 @@\n-        return osValues[OperatingSystemProps.CURRENT_OS_ORDINAL];\n+        return CURRENT_OS;\n+    }\n+\n+    \/**\n+     * Returns the OperatingSystem of the build.\n+     * Build time names are mapped to respective uppercase enum values.\n+     * Names not recognized throw ExceptionInInitializerError with IllegalArgumentException.\n+     *\/\n+    private static OperatingSystem initOS(String osName) {\n+        \/\/ Too early to use Locale conversions, manually do uppercase\n+        StringBuilder sb = new StringBuilder(osName);\n+        for (int i = 0; i < sb.length(); i++) {\n+            char ch = sb.charAt(i);\n+            if (ch >= 'a' && ch <= 'z') {\n+                sb.setCharAt(i, (char)(ch - ('a' - 'A')));  \/\/ Map lower case down to uppercase\n+            }\n+        }\n+        osName = sb.toString();\n+        return OperatingSystem.valueOf(osName);\n+    }\n+\n+    \/**\n+     * {@return the operating system version with major, minor, micro}\n+     *\/\n+    public static Version version() {\n+        return CURRENT_VERSION;\n+    }\n+\n+    \/\/ Parse and save the current version\n+    private static final Version CURRENT_VERSION = initVersion();\n+\n+    private static Version initVersion() {\n+        final String osVer = StaticProperty.osVersion();\n+        try {\n+            return Version.parse(osVer);\n+        } catch (IllegalArgumentException iae) {\n+            throw new InternalError(\"os.version malformed: \" + osVer, iae);\n+        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/OperatingSystem.java","additions":44,"deletions":8,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -1,46 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.internal.util;\n-\n-\/**\n- * The corresponding source file is generated by GensrcMisc.gmk for java.base.\n- * @see OperatingSystem\n- *\/\n-class OperatingSystemProps {\n-\n-    \/\/ Unique integers named to match the build system naming of the build target\n-    \/\/ The values must match the ordinals of the respective enum\n-    private static final int TARGET_OS_linux   = 0;\n-    private static final int TARGET_OS_macosx  = 1;\n-    private static final int TARGET_OS_windows = 2;\n-    private static final int TARGET_OS_aix     = 3;\n-\n-    \/\/ Index\/ordinal of the current OperatingSystem enum as substituted by the build\n-    static final int CURRENT_OS_ORDINAL = TARGET_OS_@@OPENJDK_TARGET_OS@@;\n-\n-    \/\/ Precomputed booleans for each Operating System\n-    static final boolean TARGET_OS_IS_LINUX   = TARGET_OS_@@OPENJDK_TARGET_OS@@ == TARGET_OS_linux;\n-    static final boolean TARGET_OS_IS_MACOSX  = TARGET_OS_@@OPENJDK_TARGET_OS@@ == TARGET_OS_macosx;\n-    static final boolean TARGET_OS_IS_WINDOWS = TARGET_OS_@@OPENJDK_TARGET_OS@@ == TARGET_OS_windows;\n-    static final boolean TARGET_OS_IS_AIX     = TARGET_OS_@@OPENJDK_TARGET_OS@@ == TARGET_OS_aix;\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/OperatingSystemProps.java.template","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.util;\n+\n+\/**\n+ * The corresponding source file is generated by GensrcMisc.gmk for java.base.\n+ * @see OperatingSystem\n+ * @see Architecture\n+ *\/\n+class PlatformProps {\n+\n+    \/\/ Name of the current OperatingSystem enum as substituted by the build\n+    static final String CURRENT_OS_STRING = \"@@OPENJDK_TARGET_OS@@\";\n+\n+    \/\/ Precomputed booleans for each Operating System\n+    static final boolean TARGET_OS_IS_LINUX   = \"@@OPENJDK_TARGET_OS@@\" == \"linux\";\n+    static final boolean TARGET_OS_IS_MACOS   = \"@@OPENJDK_TARGET_OS@@\" == \"macos\";\n+    static final boolean TARGET_OS_IS_WINDOWS = \"@@OPENJDK_TARGET_OS@@\" == \"windows\";\n+    static final boolean TARGET_OS_IS_AIX     = \"@@OPENJDK_TARGET_OS@@\" == \"aix\";\n+\n+    \/\/ The Architecture value for the current architecture\n+    static final String CURRENT_ARCH_STRING = \"@@OPENJDK_TARGET_CPU@@\";\n+\n+    \/\/ Architecture.is64Bit() uses this value\n+    static final int TARGET_ARCH_BITS = @@OPENJDK_TARGET_CPU_BITS@@;\n+\n+    \/\/ Architecture.isLittleEndian value from the build\n+    static final boolean TARGET_ARCH_LITTLE_ENDIAN = \"@@OPENJDK_TARGET_CPU_ENDIAN@@\" == \"little\";\n+\n+    \/\/ Precomputed booleans for each Architecture, shared with jdk.internal.util.Architecture\n+    \/\/ The variables are named to match the Architecture value names, and\n+    \/\/ the values chosen to match the build values.\n+    static final boolean TARGET_ARCH_IS_X64     = \"@@OPENJDK_TARGET_CPU@@\" == \"x64\";\n+    static final boolean TARGET_ARCH_IS_X86     = \"@@OPENJDK_TARGET_CPU@@\" == \"x86\";\n+    static final boolean TARGET_ARCH_IS_AARCH64 = \"@@OPENJDK_TARGET_CPU@@\" == \"aarch64\";\n+    static final boolean TARGET_ARCH_IS_RISCV64 = \"@@OPENJDK_TARGET_CPU@@\" == \"riscv64\";\n+    static final boolean TARGET_ARCH_IS_S390    = \"@@OPENJDK_TARGET_CPU@@\" == \"s390\";\n+    static final boolean TARGET_ARCH_IS_PPC64   = \"@@OPENJDK_TARGET_CPU@@\" == \"ppc64\";\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/PlatformProps.java.template","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -59,0 +59,1 @@\n+    private static final String OS_VERSION;\n@@ -80,0 +81,1 @@\n+        OS_VERSION = getProperty(props, \"os.version\");\n@@ -268,0 +270,9 @@\n+\n+     \/**\n+      * {@return the {@code os.version} system property}\n+      * <strong>{@link SecurityManager#checkPropertyAccess} is NOT checked\n+      * in this method. This property is not considered security sensitive.<\/strong>\n+      *\/\n+     public static String osVersion() {\n+         return OS_VERSION;\n+     }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/StaticProperty.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,114 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.util;\n+\n+\/**\n+ * A software Version with major, minor, and micro components.\n+ * @param major major version\n+ * @param minor minor version\n+ * @param micro micro version\n+ *\/\n+public record Version(int major, int minor, int micro) implements Comparable<Version> {\n+\n+    \/**\n+     * {@return a Version for major, minor versions}\n+     *\n+     * @param major major version\n+     * @param minor minor version\n+     *\/\n+    public Version(int major, int minor) {\n+        this(major, minor, 0);\n+    }\n+\n+    \/**\n+     * {@return Compare this version with another version}\n+     *\n+     * @param other the object to be compared\n+     *\/\n+    @Override\n+    public int compareTo(Version other) {\n+        int result = Integer.compare(major, other.major);\n+        if (result == 0) {\n+            result = Integer.compare(minor, other.minor);\n+            if (result == 0) {\n+                return Integer.compare(micro, other.micro);\n+            }\n+        }\n+        return result;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return (micro == 0)\n+                ? major + \".\" + minor\n+                : major + \".\" + minor + \".\" + micro;\n+    }\n+\n+    \/**\n+     * {@return A Version parsed from a version string split on \".\" characters}\n+     * Only major, minor, and micro version numbers are parsed, finer detail is ignored.\n+     * Missing values for minor and micro are replaced with zero.\n+     * The string must start with a number, if there is a '.' it must be followed by a number.\n+     * <p>\n+     * Parsed by hand because it is called before RegEx can be initialized safely.\n+     *\n+     * @param str a version string\n+     * @throws IllegalArgumentException if the string does not start with digits\n+     *          or digits do not follow '.'\n+     *\/\n+    public static Version parse(String str) throws IllegalArgumentException {\n+        int len = str.length();\n+        int majorStart = 0;\n+        int majorEnd = skipDigits(str, majorStart);\n+        int major = Integer.parseInt(str.substring(majorStart, majorEnd));\n+\n+        int minor = 0, micro = 0;\n+        if (majorEnd < len && str.charAt(majorEnd) == '.') {\n+            int minorStart = majorEnd + 1;\n+            int minorEnd = skipDigits(str, minorStart);\n+            minor = Integer.parseInt(str.substring(minorStart, minorEnd));\n+\n+            if (minorEnd < len && str.charAt(minorEnd) == '.') {\n+                int microStart = minorEnd + 1;\n+                int microEnd = skipDigits(str, microStart);\n+                micro = Integer.parseInt(str.substring(microStart, microEnd));\n+            }\n+        }\n+        return new Version(major, minor, micro);\n+    }\n+\n+    \/**\n+     * {@return The index of the first non-digit from start}\n+     * @throws IllegalArgumentException if there are no digits\n+     *\/\n+\n+    private static int skipDigits(String s, int start) {\n+        int index = start;\n+        while (index < s.length() && Character.isDigit(s.charAt(index))) {\n+            index++;\n+        }\n+        if (index == start)\n+            throw new IllegalArgumentException(\"malformed version, missing digits: \" + s);\n+        return index;\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/Version.java","additions":114,"deletions":0,"binary":false,"changes":114,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,10 +40,0 @@\n-        String os = System.getProperty(\"os.name\");\n-        if (os.startsWith(\"Windows 9\") || os.equals(\"Windows Me\")) {\n-            throw new RuntimeException(\n-                \"This provider is not supported on this version of Windows\");\n-        }\n-        String arch = System.getProperty(\"os.arch\");\n-        if (!arch.equals(\"x86\") && !arch.equals(\"amd64\") && !arch.equals(\"aarch64\")) {\n-            throw new RuntimeException(\n-                \"This provider is not supported on this processor architecture\");\n-        }\n","filename":"src\/jdk.attach\/windows\/classes\/sun\/tools\/attach\/AttachProviderImpl.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,118 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+import java.util.Locale;\n+import java.util.stream.Stream;\n+\n+import jdk.internal.util.Architecture;\n+import jdk.internal.misc.Unsafe;\n+\n+import static jdk.internal.util.Architecture.OTHER;\n+import static jdk.internal.util.Architecture.AARCH64;\n+import static jdk.internal.util.Architecture.PPC64;\n+import static jdk.internal.util.Architecture.RISCV64;\n+import static jdk.internal.util.Architecture.S390;\n+import static jdk.internal.util.Architecture.X64;\n+import static jdk.internal.util.Architecture.X86;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+\/**\n+ * @test\n+ * @bug 8304915\n+ * @summary Verify Architecture enum maps to system property os.arch\n+ * @modules java.base\/jdk.internal.util\n+ * @modules java.base\/jdk.internal.misc\n+ * @run junit ArchTest\n+ *\/\n+public class ArchTest {\n+    private static boolean IS_BIG_ENDIAN = Unsafe.getUnsafe().isBigEndian();\n+\n+    private static boolean IS_64BIT_ADDRESS = Unsafe.getUnsafe().addressSize() == 8;\n+\n+    \/**\n+     * Test consistency of System property \"os.arch\" with Architecture.current().\n+     *\/\n+    @Test\n+    public void nameVsCurrent() {\n+        String osArch = System.getProperty(\"os.arch\").toLowerCase(Locale.ROOT);\n+        System.out.printf(\"System property os.arch: \\\"%s\\\", Architecture.current(): \\\"%s\\\"%n\",\n+                osArch, Architecture.current());\n+        Architecture arch = switch (osArch) {\n+            case \"x86_64\", \"amd64\" -> X64;\n+            case \"x86\", \"i386\" -> X86;\n+            case \"aarch64\" -> AARCH64;\n+            case \"riscv64\" -> RISCV64;\n+            case \"s390x\", \"s390\" -> S390;\n+            case \"ppc64\", \"ppc64le\" -> PPC64;\n+            default -> OTHER;\n+        };\n+        assertEquals(Architecture.current(), arch, \"mismatch in Architecture.current vs \" + osArch);\n+    }\n+\n+    \/**\n+     * Test various Architecture enum values vs boolean isXXX() methods.\n+     * @return a stream of arguments for parameterized test\n+     *\/\n+    private static Stream<Arguments> archParams() {\n+        return Stream.of(\n+                Arguments.of(X64, Architecture.isX64()),\n+                Arguments.of(X86, Architecture.isX86()),\n+                Arguments.of(AARCH64, Architecture.isAARCH64()),\n+                Arguments.of(RISCV64, Architecture.isRISCV64()),\n+                Arguments.of(S390, Architecture.isS390()),\n+                Arguments.of(PPC64, Architecture.isPPC64())\n+        );\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"archParams\")\n+    public void isArch(Architecture arch, boolean isArch) {\n+        Architecture current = Architecture.current();\n+        assertEquals(arch == current, isArch,\n+                \"Method is\" + arch + \"(): returned \" + isArch + \", should be (\" + arch + \" == \" + current + \")\");\n+    }\n+\n+    \/**\n+     * Test that Architecture.is64bit() matches Unsafe.addressSize() == 8.\n+     *\/\n+    @Test\n+    public void is64BitVsCurrent() {\n+        assertEquals(Architecture.is64bit(), IS_64BIT_ADDRESS,\n+                \"Architecture.is64bit() does not match UNSAFE.addressSize() == 8\");\n+    }\n+\n+    \/**\n+     * Test that Architecture.isLittleEndian() == !Unsafe.isBigEndian().\n+     *\/\n+    @Test\n+    public void isLittleEndianVsCurrent() {\n+        assertEquals(Architecture.isLittleEndian(), !IS_BIG_ENDIAN,\n+                \"isLittleEndian does not match UNSAFE.isBigEndian()\");\n+    }\n+}\n","filename":"test\/jdk\/jdk\/internal\/util\/ArchTest.java","additions":118,"deletions":0,"binary":false,"changes":118,"status":"added"},{"patch":"@@ -35,0 +35,2 @@\n+import jdk.internal.util.StaticProperty;\n+import jdk.internal.util.Version;\n@@ -40,0 +42,1 @@\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n@@ -86,0 +89,8 @@\n+\n+    @Test\n+    public void checkOsVersion() {\n+        Version ver = OperatingSystem.version();\n+        String osVersion = StaticProperty.osVersion();\n+        System.err.printf(\"os.version: %s, version().toString(): %s%n\", osVersion, ver);\n+        assertTrue(osVersion.startsWith(ver.toString()), \"version().toString() is not prefix of vs os.version property\");\n+    }\n","filename":"test\/jdk\/jdk\/internal\/util\/OSTest.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,103 @@\n+\/*\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+import java.util.stream.Stream;\n+\n+import jdk.internal.util.Version;\n+\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+\/**\n+ * @test\n+ * @summary test jdk.internal.util.Version\n+ * @modules java.base\/jdk.internal.util\n+ * @run junit VersionTest\n+ *\/\n+\n+public class VersionTest {\n+\n+    private static Stream<Arguments> versionParams() {\n+        return Stream.of(\n+                Arguments.of(\"1\", new Version(1, 0)),\n+                Arguments.of(\"1.2\", new Version(1, 2)),\n+                Arguments.of(\"1.2\", new Version(1, 2, 0)),\n+                Arguments.of(\"1.2.3\", new Version(1, 2, 3)),\n+                Arguments.of(\"1-abc\", new Version(1, 0, 0)), \/\/ Ignore extra\n+                Arguments.of(\"1.2-abc\", new Version(1, 2, 0)), \/\/ Ignore extra\n+                Arguments.of(\"1.2.3.4\", new Version(1, 2, 3)), \/\/ Ignore extra\n+                Arguments.of(\"1.2.3-abc\", new Version(1, 2, 3)) \/\/ Ignore extra\n+        );\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"versionParams\")\n+    public void checkParse(String verName, Version expected) {\n+        Version actual = Version.parse(verName);\n+        assertEquals(actual, expected, \"Parsed version mismatch\");\n+    }\n+\n+    private static Stream<String> illegalVersionParams() {\n+        return Stream.of(\n+                \"1.\", \"1.2.\", \"1.-abc\", \"1.2.-abc\", \/\/ dot without digits\n+                \"\",                                 \/\/ empty\n+                \"xaaa\", \"abc.xyz\"                   \/\/ no initial digit\n+        );\n+    }\n+\n+    @ParameterizedTest()\n+    @MethodSource(\"illegalVersionParams\")\n+    public void checkIllegalParse(String verName) {\n+        Throwable th = assertThrows(IllegalArgumentException.class, () -> Version.parse(verName));\n+        String expectedMsg = \"malformed version, missing digits: \" + verName;\n+        assertEquals(th.getMessage(), expectedMsg, \"message mismatch\");\n+    }\n+\n+    private static Stream<Arguments> versionCompare() {\n+        return Stream.of(\n+                Arguments.of(new Version(2, 1), new Version(2, 1), 0),\n+                Arguments.of(new Version(2, 1), new Version(2, 0), +1),\n+                Arguments.of(new Version(2, 0), new Version(2, 1), -1),\n+                Arguments.of(new Version(3, 3, 1), new Version(3, 3, 1), 0),\n+                Arguments.of(new Version(3, 3, 1), new Version(3, 3, 0), +1),\n+                Arguments.of(new Version(3, 3, 0), new Version(3, 3, 1), -1),\n+                Arguments.of(new Version(2, 0), new Version(3, 0), -1),\n+                Arguments.of(new Version(3, 0), new Version(2, 0), +1)\n+        );\n+    }\n+\n+    @ParameterizedTest()\n+    @MethodSource(\"versionCompare\")\n+    public void checkVersionCompare(Version v1, Version v2, int expected) {\n+        int result1 = v1.compareTo(v2);\n+        assertEquals(result1, expected, \"v1 vs v2\");\n+        int result2 = v2.compareTo(v1);\n+        assertEquals(result1, -result2, \"compare not reflexive\");\n+    }\n+}\n","filename":"test\/jdk\/jdk\/internal\/util\/VersionTest.java","additions":103,"deletions":0,"binary":false,"changes":103,"status":"added"}]}