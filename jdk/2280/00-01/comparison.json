{"files":[{"patch":"@@ -578,1 +578,1 @@\n-    StrongRootsScope srs(1);\n+    StrongRootsScope srs(0);\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -185,1 +185,1 @@\n-    StrongRootsScope srs(1);\n+    StrongRootsScope srs(0);\n@@ -275,1 +275,1 @@\n-    StrongRootsScope srs(1);\n+    StrongRootsScope srs(0);\n","filename":"src\/hotspot\/share\/gc\/serial\/genMarkSweep.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -40,2 +40,4 @@\n-  \/\/ no need for thread claim for sequential case\n-  if (_n_threads > 1) {\n+  \/\/ No need for thread claim for statically-known sequential case (_n_threads == 0)\n+  \/\/ For positive values, clients of this class often unify sequential\/parallel\n+  \/\/ cases, so they expect the thread claim token to be updated.\n+  if (_n_threads != 0) {\n@@ -47,1 +49,1 @@\n-  if (_n_threads > 1) {\n+  if (_n_threads != 0) {\n","filename":"src\/hotspot\/share\/gc\/shared\/strongRootsScope.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+  \/\/ 0 means statically-known sequential root processing; used only by Serial GC\n","filename":"src\/hotspot\/share\/gc\/shared\/strongRootsScope.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}