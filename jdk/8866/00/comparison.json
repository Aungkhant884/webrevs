{"files":[{"patch":"@@ -2853,0 +2853,6 @@\n+        @Override\n+        public void visitTypeTest(JCInstanceOf tree) {\n+            scanExpr(tree.expr);\n+            scan(tree.pattern);\n+        }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Flow.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8270139 8273039\n+ * @bug 8270139 8273039 8286895\n@@ -60,0 +60,8 @@\n+\n+    public void testBooleanPatternExpression() {\n+        assertEval(\"Number n = 0;\");\n+        assertEval(\"if (!n instanceof Integer i) {}\",\n+                   DiagCheck.DIAG_ERROR,\n+                   DiagCheck.DIAG_IGNORE,\n+                   ste(MAIN_SNIPPET, NONEXISTENT, REJECTED, false, null));\n+    }\n","filename":"test\/langtools\/jdk\/jshell\/ErrorRecoveryTest.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,14 @@\n+\/**\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8286895\n+ * @summary Verify that errors don't crash the compiler.\n+ * @compile\/fail\/ref=NoCrashForError.out -XDshould-stop.at=FLOW -XDdev -XDrawDiagnostics NoCrashForError.java\n+ *\/\n+public class NoCrashForError {\n+    private void JDK8286895() {\n+        Number n = 17;\n+        if (! n instanceof Integer i) {\n+            System.out.println(\"not Integer\");\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/recovery\/NoCrashForError.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+NoCrashForError.java:10:13: compiler.err.operator.cant.be.applied: !, java.lang.Number\n+1 error\n","filename":"test\/langtools\/tools\/javac\/recovery\/NoCrashForError.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"}]}