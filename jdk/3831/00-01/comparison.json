{"files":[{"patch":"@@ -121,1 +121,1 @@\n-            if (source.compareTo(Source.JDK17) >= 0) {\n+            if (Source.Feature.REDUNDANT_STRICTFP.allowedInSource(source)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Lint.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -227,1 +227,0 @@\n-        \/\/ todo: will need to supplement\/replace with target feature for writing out classes\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Source.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1702,2 +1702,2 @@\n-        if (Feature.REDUNDANT_STRICTFP.allowedInSource(source))\n-            result = result & ~STRICTFP;\n+        if (target.obsoleteAccStrict())\n+            result &= ~STRICTFP;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassWriter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -197,0 +197,6 @@\n+\n+    \/** Is the ACC_STRICT bit redundant and obsolete\n+     *\/\n+    public boolean obsoleteAccStrict() {\n+        return compareTo(JDK1_17) >= 0;\n+    }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Target.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @compile -source 16 CheckACC_STRICTFlagOnclinitTest.java\n+ * @compile -source 16 -target 16 CheckACC_STRICTFlagOnclinitTest.java\n","filename":"test\/langtools\/tools\/javac\/7166455\/CheckACC_STRICTFlagOnclinitTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @run compile -source 16 -g NestedLambdasCastedTest.java\n+ * @run compile -source 16 -target 16 -g NestedLambdasCastedTest.java\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/NestedLambdasCastedTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @compile -source 16 CheckACC_STRICTFlagOnDefaultMethodTest.java\n+ * @compile -source 16 -target 16 CheckACC_STRICTFlagOnDefaultMethodTest.java\n","filename":"test\/langtools\/tools\/javac\/defaultMethods\/CheckACC_STRICTFlagOnDefaultMethodTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * @compile -source 16 LambdaTestStrictFPFlag.java\n+ * @compile -source 16 -target 16 LambdaTestStrictFPFlag.java\n","filename":"test\/langtools\/tools\/javac\/lambda\/LambdaTestStrictFPFlag.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,2 @@\n- * @compile         -processor   TestStrictfpRetention                                    StrictfpHost.java\n+ * @compile         -processor   TestStrictfpRetention               -proc:only           StrictfpHost.java\n+ * @compile         -processor   TestStrictfpRetention -source 16                         StrictfpHost.java\n@@ -63,0 +64,3 @@\n+ *\n+ * As well as the mixed combination of -source 16 and current release\n+ * as the implicit target.\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/ObsoleteStrictfp\/TestStrictfpRetention.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"}]}