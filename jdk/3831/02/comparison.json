{"files":[{"patch":"@@ -123,1 +123,1 @@\n-        public static strictfp double compute(double x) {\n+        public static double compute(double x) {\n@@ -206,1 +206,1 @@\n-        public static strictfp double compute(double x, double y) {\n+        public static double compute(double x, double y) {\n@@ -346,1 +346,1 @@\n-        public static strictfp double compute(final double x, final double y) {\n+        public static double compute(final double x, final double y) {\n@@ -683,2 +683,1 @@\n-        \/\/ should be able to forgo strictfp due to controlled over\/underflow\n-        public static strictfp double compute(double x) {\n+        public static double compute(double x) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/FdLibm.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -89,1 +89,0 @@\n-\n@@ -210,4 +209,2 @@\n-    public static strictfp double toRadians(double angdeg) {\n-        \/\/ Do not delegate to Math.toRadians(angdeg) because\n-        \/\/ this method has the strictfp modifier.\n-        return angdeg * DEGREES_TO_RADIANS;\n+    public static double toRadians(double angdeg) {\n+        return Math.toRadians(angdeg);\n@@ -227,4 +224,2 @@\n-    public static strictfp double toDegrees(double angrad) {\n-        \/\/ Do not delegate to Math.toDegrees(angrad) because\n-        \/\/ this method has the strictfp modifier.\n-        return angrad * RADIANS_TO_DEGREES;\n+    public static double toDegrees(double angrad) {\n+        return Math.toDegrees(angrad);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StrictMath.java","additions":4,"deletions":9,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -121,0 +121,3 @@\n+            if (Source.Feature.REDUNDANT_STRICTFP.allowedInSource(source)) {\n+                values.add(LintCategory.STRICTFP);\n+            }\n@@ -286,0 +289,5 @@\n+        \/**\n+         * Warn about unnecessary uses of the strictfp modifier\n+         *\/\n+        STRICTFP(\"strictfp\"),\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Lint.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -227,0 +227,1 @@\n+        REDUNDANT_STRICTFP(JDK17),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Source.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1215,0 +1215,3 @@\n+            if ((flags & STRICTFP) != 0) {\n+                warnOnExplicitStrictfp(pos, tree);\n+            }\n@@ -1256,0 +1259,3 @@\n+            if ((flags & STRICTFP) != 0) {\n+                warnOnExplicitStrictfp(pos, tree);\n+            }\n@@ -1318,0 +1324,13 @@\n+    private void warnOnExplicitStrictfp(DiagnosticPosition pos, JCTree tree) {\n+        DiagnosticPosition prevLintPos = deferredLintHandler.setPos(tree.pos());\n+        try {\n+            deferredLintHandler.report(() -> {\n+                                           if (lint.isEnabled(LintCategory.STRICTFP)) {\n+                                               log.warning(LintCategory.STRICTFP,\n+                                                           pos, Warnings.Strictfp); }\n+                                       });\n+        } finally {\n+            deferredLintHandler.setPos(prevLintPos);\n+        }\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+@SuppressWarnings(\"strictfp\")\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ConstFold.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+import com.sun.tools.javac.code.Source.Feature;\n@@ -1700,0 +1701,4 @@\n+        \/\/ Elide strictfp bit in class files\n+        if (target.obsoleteAccStrict())\n+            result &= ~STRICTFP;\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassWriter.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -197,0 +197,6 @@\n+\n+    \/** Is the ACC_STRICT bit redundant and obsolete\n+     *\/\n+    public boolean obsoleteAccStrict() {\n+        return compareTo(JDK1_17) >= 0;\n+    }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Target.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -567,1 +567,1 @@\n-    floating point number too large\n+    floating-point number too large\n@@ -570,1 +570,1 @@\n-    floating point number too small\n+    floating-point number too small\n@@ -788,1 +788,1 @@\n-    malformed floating point literal\n+    malformed floating-point literal\n@@ -1767,0 +1767,3 @@\n+compiler.warn.strictfp=\\\n+    as of release 17, all floating-point expressions are evaluated strictly and ''strictfp'' is not required\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -249,0 +249,3 @@\n+javac.opt.Xlint.desc.strictfp=\\\n+    Warn about unnecessary use of the strictfp modifier.\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/javac.properties","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -170,1 +170,1 @@\n-        allOptions.add(\"-Xlint:unchecked\");\n+        allOptions.add(\"-Xlint:unchecked,-strictfp\");\n@@ -187,1 +187,1 @@\n-                       List.of(\"-Xlint:unchecked\", \"-proc:none\", \"-parameters\"),\n+                       List.of(\"-Xlint:unchecked,-strictfp\", \"-proc:none\", \"-parameters\"),\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/TaskFactory.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @compile -source 16 -target 16 CheckACC_STRICTFlagOnclinitTest.java\n","filename":"test\/langtools\/tools\/javac\/7166455\/CheckACC_STRICTFlagOnclinitTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -84,1 +84,2 @@\n-        JavacTask ct = (JavacTask)comp.getTask(null, null, null, null, null,\n+        JavacTask ct = (JavacTask)comp.getTask(null, null, null,\n+                                               List.of(\"--release\", \"16\"), null,\n","filename":"test\/langtools\/tools\/javac\/8005931\/CheckACC_STRICTFlagOnPkgAccessClassTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * @bug 4153038 4785453\n+ * @bug 4153038 4785453 8244146\n@@ -7,1 +7,2 @@\n- * @compile\/fail\/ref=BadConstructorModifiers.out -XDrawDiagnostics BadConstructorModifiers.java\n+ * @compile\/fail\/ref=BadConstructorModifiers.out -XDrawDiagnostics --release 16     BadConstructorModifiers.java\n+ * @compile\/fail\/ref=BadConstructorModifiers.out -XDrawDiagnostics -Xlint:-strictfp BadConstructorModifiers.java\n","filename":"test\/langtools\/tools\/javac\/FloatingPointChanges\/BadConstructorModifiers.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-BadConstructorModifiers.java:12:14: compiler.err.mod.not.allowed.here: strictfp\n+BadConstructorModifiers.java:13:14: compiler.err.mod.not.allowed.here: strictfp\n","filename":"test\/langtools\/tools\/javac\/FloatingPointChanges\/BadConstructorModifiers.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-            JavacTask task = tool.getTask(null, fm, null, null, null, files);\n+            JavacTask task = tool.getTask(null, fm, null, List.of(\"--release\", \"16\"), null, files);\n","filename":"test\/langtools\/tools\/javac\/T6397044.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * @bug 8028428\n+ * @bug 8028428 8244146\n@@ -5,1 +5,2 @@\n- * @compile\/fail\/ref=AnnotationTypeElementModifiers.out -XDrawDiagnostics AnnotationTypeElementModifiers.java\n+ * @compile\/fail\/ref=AnnotationTypeElementModifiers.out -XDrawDiagnostics --release 16 AnnotationTypeElementModifiers.java\n+ * @compile\/fail\/ref=AnnotationTypeElementModifiers.out -XDrawDiagnostics -Xlint:-strictfp AnnotationTypeElementModifiers.java\n","filename":"test\/langtools\/tools\/javac\/annotations\/AnnotationTypeElementModifiers.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,1 +0,0 @@\n-AnnotationTypeElementModifiers.java:17:17: compiler.err.mod.not.allowed.here: private\n@@ -3,1 +2,1 @@\n-AnnotationTypeElementModifiers.java:20:19: compiler.err.mod.not.allowed.here: protected\n+AnnotationTypeElementModifiers.java:19:17: compiler.err.mod.not.allowed.here: private\n@@ -5,1 +4,1 @@\n-AnnotationTypeElementModifiers.java:23:16: compiler.err.mod.not.allowed.here: static\n+AnnotationTypeElementModifiers.java:22:19: compiler.err.mod.not.allowed.here: protected\n@@ -7,1 +6,1 @@\n-AnnotationTypeElementModifiers.java:26:15: compiler.err.mod.not.allowed.here: final\n+AnnotationTypeElementModifiers.java:25:16: compiler.err.mod.not.allowed.here: static\n@@ -9,1 +8,1 @@\n-AnnotationTypeElementModifiers.java:29:22: compiler.err.mod.not.allowed.here: synchronized\n+AnnotationTypeElementModifiers.java:28:15: compiler.err.mod.not.allowed.here: final\n@@ -11,1 +10,1 @@\n-AnnotationTypeElementModifiers.java:32:18: compiler.err.mod.not.allowed.here: volatile\n+AnnotationTypeElementModifiers.java:31:22: compiler.err.mod.not.allowed.here: synchronized\n@@ -13,1 +12,1 @@\n-AnnotationTypeElementModifiers.java:35:19: compiler.err.mod.not.allowed.here: transient\n+AnnotationTypeElementModifiers.java:34:18: compiler.err.mod.not.allowed.here: volatile\n@@ -15,1 +14,1 @@\n-AnnotationTypeElementModifiers.java:38:16: compiler.err.mod.not.allowed.here: native\n+AnnotationTypeElementModifiers.java:37:19: compiler.err.mod.not.allowed.here: transient\n@@ -17,1 +16,1 @@\n-AnnotationTypeElementModifiers.java:41:20: compiler.err.mod.not.allowed.here: strictfp\n+AnnotationTypeElementModifiers.java:40:16: compiler.err.mod.not.allowed.here: native\n@@ -19,1 +18,1 @@\n-AnnotationTypeElementModifiers.java:44:17: compiler.err.mod.not.allowed.here: default\n+AnnotationTypeElementModifiers.java:43:20: compiler.err.mod.not.allowed.here: strictfp\n@@ -21,0 +20,1 @@\n+AnnotationTypeElementModifiers.java:46:17: compiler.err.mod.not.allowed.here: default\n","filename":"test\/langtools\/tools\/javac\/annotations\/AnnotationTypeElementModifiers.out","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @run compile -g NestedLambdasCastedTest.java\n+ * @run compile -source 16 -target 16 -g NestedLambdasCastedTest.java\n","filename":"test\/langtools\/tools\/javac\/annotations\/typeAnnotations\/classfile\/NestedLambdasCastedTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+ * @compile -source 16 -target 16 CheckACC_STRICTFlagOnDefaultMethodTest.java\n","filename":"test\/langtools\/tools\/javac\/defaultMethods\/CheckACC_STRICTFlagOnDefaultMethodTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.warn.strictfp\n+\/\/ options: -Xlint:strictfp\n+\n+strictfp class UnneededStrictfpWarning {\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/UnneededStrictfpWarning.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -29,0 +29,2 @@\n+ * @compile -source 16 -target 16 LambdaTestStrictFPFlag.java\n+ * @run main LambdaTestStrictFPFlag\n","filename":"test\/langtools\/tools\/javac\/lambda\/LambdaTestStrictFPFlag.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * Enclosing class for several strictfp-using types and methods.\n+ *\n+ * In the JVM, the ACC_STRICT bit is only defined for\n+ * methods\/constructors and *not* classes\/interfaces. Therefore, for\n+ * the checking in this test, the @StrictfpInSource annotation is only\n+ * applied to methods\/constructors.\n+ *\/\n+public class StrictfpHost {\n+    public strictfp interface StrictfpInterface {\n+        \/\/ Implicitly strictfp\n+        @StrictfpInSource\n+        default double foo() {return 42.0;}\n+    }\n+\n+    public strictfp class StrictfpClass {\n+        \/\/ Implicitly strictfp\n+        @StrictfpInSource\n+        public StrictfpClass() {\n+            super();\n+        }\n+    }\n+\n+    @StrictfpInSource\n+    public strictfp static void main(String... args) {\n+        return;\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/ObsoleteStrictfp\/StrictfpHost.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.annotation.*;\n+import static java.lang.annotation.ElementType.*;\n+import static java.lang.annotation.RetentionPolicy.*;\n+\n+\n+\/**\n+ * At the JVM level, the ACC_STRICT bit is only defined for\n+ * methods\/constructors, unlike where strictfp can be applied in\n+ * sources.\n+ *\/\n+@Retention(RUNTIME)\n+@Target({METHOD, CONSTRUCTOR})\n+public @interface StrictfpInSource {}\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/ObsoleteStrictfp\/StrictfpInSource.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8244146\n+ * @summary Test test and class file retention of strictfp.\n+ * @compile --release 16 TestStrictfpRetention.java StrictfpInSource.java\n+ * @compile         -processor   TestStrictfpRetention --release 16                       StrictfpHost.java\n+ * @compile\/process -processor   TestStrictfpRetention --release 16  -proc:only           StrictfpHost\n+ * @compile         -processor   TestStrictfpRetention               -proc:only           StrictfpHost.java\n+ * @compile         -processor   TestStrictfpRetention -source 16                         StrictfpHost.java\n+ * @compile\/process -processor   TestStrictfpRetention              -AstrictfpNotExpected StrictfpHost\n+ *\/\n+\n+import java.util.Objects;\n+import java.util.Set;\n+import javax.annotation.processing.*;\n+import javax.lang.model.SourceVersion;\n+import static javax.lang.model.SourceVersion.*;\n+import javax.lang.model.element.*;\n+import javax.lang.model.util.*;\n+import static javax.tools.Diagnostic.Kind.*;\n+\n+import static javax.lang.model.element.Modifier.*;\n+\n+\/**\n+ * The StrictfpInSource annotation marks whether or not the element in\n+ * source was declared strictp in its source form. For release 16 (and\n+ * earlier releases), the strictfp-in-source status and\n+ * strictfp-in-class file status should generally match. (Per JLS,\n+ * some elements are implicitly strictfp).\n+ *\n+ * Under release 17 and later releases reflecting JEP 306, while\n+ * strictfp can be present in the source, it is *not* persisted to the\n+ * class file for methods\/constructors where ACC_STRICT can be\n+ * applied. (The ACC_STRICT modifier is not defined for\n+ * classes\/interfaces in the JVM.)\n+ *\n+ * This test checks that the strictfp modifier of the annotated\n+ * elements is as expected in the four combinations:\n+ *\n+ * (source, class file) X (--release 16, current release)\n+ *\n+ * As well as the mixed combination of -source 16 and current release\n+ * as the implicit target.\n+ *\/\n+@SupportedOptions(\"strictfpNotExpected\")\n+@SupportedAnnotationTypes(\"StrictfpInSource\")\n+public class TestStrictfpRetention extends AbstractProcessor {\n+    public boolean process(Set<? extends TypeElement> annotations,\n+                           RoundEnvironment roundEnv) {\n+        if (!roundEnv.processingOver()) {\n+            boolean annotatedElementsFound = false;\n+            boolean strictfpExpected = !processingEnv.getOptions().containsKey(\"strictfpNotExpected\");\n+            var messager = processingEnv.getMessager();\n+\n+            for (Element e: roundEnv.getElementsAnnotatedWith(StrictfpInSource.class)) {\n+                annotatedElementsFound = true;\n+\n+                boolean strictfpPresent =  e.getModifiers().contains(STRICTFP);\n+                if (strictfpPresent != strictfpExpected) {\n+                    messager.printMessage(ERROR, \"Unexpected strictfp status: \" + strictfpPresent + \" \" + e, e);\n+                }\n+            }\n+\n+            if (!annotatedElementsFound) {\n+                messager.printMessage(ERROR, \"No annotated elements found\");\n+            }\n+        }\n+        return true;\n+    }\n+\n+    @Override\n+    public SourceVersion getSupportedSourceVersion() {\n+        return SourceVersion.latest();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/ObsoleteStrictfp\/TestStrictfpRetention.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"},{"patch":"@@ -146,2 +146,2 @@\n-    @IsDefault(value=true, expectedTextRegex=\"\\\\s*@IsDefault\\\\(.*\\\\)\\\\s*default strictfp void quux\\\\(\\\\);\\\\s*$\")\n-    default strictfp void quux() {};\n+    @IsDefault(value=true, expectedTextRegex=\"\\\\s*@IsDefault\\\\(.*\\\\)\\\\s*default void quux\\\\(\\\\);\\\\s*$\")\n+    default void quux() {};\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/TestExecutableElement.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,262 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8244146\n+ * @summary Verify expected strictfp warnings are producted or not produced\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ * @build toolbox.ToolBox toolbox.JavacTask toolbox.TestRunner\n+ * @run main UnneededStrictfpWarningToolBox\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.util.EnumSet;\n+import javax.tools.JavaFileManager;\n+import javax.tools.JavaFileObject;\n+import javax.tools.StandardLocation;\n+import javax.tools.ToolProvider;\n+import toolbox.JavacTask;\n+import toolbox.Task;\n+import toolbox.Task.Expect;\n+import toolbox.TestRunner;\n+import toolbox.ToolBox;\n+\n+public class UnneededStrictfpWarningToolBox extends TestRunner {\n+\n+    private final ToolBox tb = new ToolBox();\n+    private final String fileSep = System.getProperty(\"file.separator\");\n+\n+    public UnneededStrictfpWarningToolBox() {\n+        super(System.err);\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        new UnneededStrictfpWarningToolBox().runTests();\n+    }\n+\n+    private void checkLog(List<String> log, List<String> expected) {\n+        if (!expected.equals(log)) {\n+            throw new AssertionError(\"Unexpected output: \" + log);\n+        }\n+    }\n+\n+    private void checkEmptyLog(List<String> log) {\n+        checkLog(log, List.of(\"\"));\n+    }\n+\n+    @Test\n+    public void testWithAndWithOutLint(Path base) throws IOException {\n+        Path src = base.resolve(\"src\");\n+\n+        tb.writeJavaFiles(src, UNNEEDED_STRICTFP_WARNING1_NO_SUPPRESSION);\n+        Path classes = base.resolve(\"classes\");\n+        tb.createDirectories(classes);\n+\n+        List<String> log;\n+\n+        \/\/ Warning not enabled, no messages expected\n+        log = new JavacTask(tb)\n+                .options(\"--release\", \"16\", \"-Werror\")\n+                .outdir(classes)\n+                .files(tb.findJavaFiles(src))\n+                .run(Expect.SUCCESS)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+        checkEmptyLog(log);\n+\n+        \/\/ Warning not enabled, no messages expected\n+        log = new JavacTask(tb)\n+                .options(\"-Xlint:-strictfp\", \"-Werror\")\n+                .outdir(classes)\n+                .files(tb.findJavaFiles(src))\n+                .run(Expect.SUCCESS)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+        checkEmptyLog(log);\n+\n+        \/\/ Warning enabled, 5 messages expected\n+        log = new JavacTask(tb)\n+            .options(\"-XDrawDiagnostics\")\n+                .outdir(classes)\n+                .files(tb.findJavaFiles(src))\n+                .run(Expect.SUCCESS)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        var expected = List.of(\"UnneededStrictfpWarning1.java:1:17: compiler.warn.strictfp\",\n+                               \"UnneededStrictfpWarning1.java:10:10: compiler.warn.strictfp\",\n+                               \"UnneededStrictfpWarning1.java:12:29: compiler.warn.strictfp\",\n+                               \"UnneededStrictfpWarning1.java:16:28: compiler.warn.strictfp\",\n+                               \"UnneededStrictfpWarning1.java:18:21: compiler.warn.strictfp\",\n+                               \"5 warnings\");\n+        checkLog(log, expected);\n+    }\n+\n+    @Test\n+    public void testTopLevelSuppression(Path base) throws IOException {\n+        Path src = base.resolve(\"src\");\n+\n+        tb.writeJavaFiles(src, UNNEEDED_STRICTFP_WARNING2_TOP_LEVEL_SUPPRESSION);\n+        Path classes = base.resolve(\"classes\");\n+        tb.createDirectories(classes);\n+\n+        List<String> log;\n+\n+        \/\/ Warning implicitly enabled, no messages expected\n+        log = new JavacTask(tb)\n+                .options(\"-Werror\")\n+                .outdir(classes)\n+                .files(tb.findJavaFiles(src))\n+                .run(Expect.SUCCESS)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+        checkEmptyLog(log);\n+\n+        \/\/ Warning explicitly enabled, no messages expected\n+        log = new JavacTask(tb)\n+                .options(\"-Xlint:strictfp\", \"-Werror\")\n+                .outdir(classes)\n+                .files(tb.findJavaFiles(src))\n+                .run(Expect.SUCCESS)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+        checkEmptyLog(log);\n+    }\n+\n+    @Test\n+    public void testInnerSuppression(Path base) throws IOException {\n+        Path src = base.resolve(\"src\");\n+\n+        tb.writeJavaFiles(src, UNNEEDED_STRICTFP_WARNING3_INNER_SUPPRESSION);\n+        Path classes = base.resolve(\"classes\");\n+        tb.createDirectories(classes);\n+\n+        \/\/ Warning enabled, 3 messages expected\n+        List<String> log = new JavacTask(tb)\n+            .options(\"-XDrawDiagnostics\")\n+                .outdir(classes)\n+                .files(tb.findJavaFiles(src))\n+                .run(Expect.SUCCESS)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        var expected = List.of(\"UnneededStrictfpWarning3.java:1:17: compiler.warn.strictfp\",\n+                               \"UnneededStrictfpWarning3.java:10:10: compiler.warn.strictfp\",\n+                               \"UnneededStrictfpWarning3.java:17:28: compiler.warn.strictfp\",\n+                               \"3 warnings\");\n+        checkLog(log, expected);\n+    }\n+\n+    protected void runTests() throws Exception {\n+        runTests(m -> new Object[] { Paths.get(m.getName()).toAbsolutePath() });\n+    }\n+\n+    \/\/ If warnings are enabled, should generate 5 warnings for the 5\n+    \/\/ explicit uses of strictfp.\n+    private static final String UNNEEDED_STRICTFP_WARNING1_NO_SUPPRESSION =\n+        \"\"\"\n+        public strictfp class UnneededStrictfpWarning1 {\n+            \/\/ Implicit strictfp, no warning\n+            public UnneededStrictfpWarning1() {super();}\n+\n+            public static void main(String... args) {\n+                return;\n+            }\n+        }\n+\n+        strictfp interface StrictfpInterface {\n+            default double foo() {return 42.0;};\n+            default strictfp double bar() {return 21.0;};\n+        }\n+\n+        class StrictfpMethod {\n+            static strictfp double quux() {return 42.0;}\n+\n+            static strictfp class NestedStrictfpClass {}\n+        }\n+        \"\"\";\n+\n+    \/\/ If warnings are enabled, no warnings should be generated due to\n+    \/\/ suppression at the top-most level.\n+    private static final String UNNEEDED_STRICTFP_WARNING2_TOP_LEVEL_SUPPRESSION =\n+        \"\"\"\n+        @SuppressWarnings(\"strictfp\")\n+        public strictfp class UnneededStrictfpWarning2 {\n+            \/\/ Implicit strictfp, no warning\n+            public UnneededStrictfpWarning2() {super();}\n+\n+            public static void main(String... args) {\n+                return;\n+            }\n+        }\n+\n+        @SuppressWarnings(\"strictfp\")\n+        strictfp interface StrictfpInterface {\n+            default double foo() {return 42.0;};\n+            default strictfp double bar() {return 21.0;};\n+        }\n+\n+        @SuppressWarnings(\"strictfp\")\n+        class StrictfpMethod {\n+            static strictfp double quux() {return 42.0;}\n+\n+            static strictfp class NestedStrictfpClass {}\n+        }\n+        \"\"\";\n+\n+    \/\/ If warnings are enabled, 3 warnings should be generated.\n+    private static final String UNNEEDED_STRICTFP_WARNING3_INNER_SUPPRESSION =\n+        \"\"\"\n+        public strictfp class UnneededStrictfpWarning3 {\n+            \/\/ Implicit strictfp, no warning\n+            public UnneededStrictfpWarning3() {super();}\n+\n+            public static void main(String... args) {\n+                return;\n+            }\n+        }\n+\n+        strictfp interface StrictfpInterface {\n+            default double foo() {return 42.0;};\n+            @SuppressWarnings(\"strictfp\")\n+            default strictfp double bar() {return 21.0;};\n+        }\n+\n+        class StrictfpMethod {\n+            static strictfp double quux() {return 42.0;}\n+\n+            @SuppressWarnings(\"strictfp\")\n+            static strictfp class NestedStrictfpClass {}\n+        }\n+        \"\"\";\n+}\n","filename":"test\/langtools\/tools\/javac\/warnings\/UnneededStrictfpWarningToolBox.java","additions":262,"deletions":0,"binary":false,"changes":262,"status":"added"}]}