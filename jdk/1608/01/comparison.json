{"files":[{"patch":"@@ -28,0 +28,1 @@\n+#include \"compiler\/compiler_globals.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"compiler\/compiler_globals.hpp\"\n","filename":"src\/hotspot\/cpu\/aarch64\/templateInterpreterGenerator_aarch64.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"compiler\/compiler_globals.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"compiler\/compiler_globals.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"compiler\/compiler_globals.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86_arrayCopy_avx3.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"compiler\/compiler_globals.hpp\"\n","filename":"src\/hotspot\/cpu\/x86\/templateInterpreterGenerator_x86.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+#include \"compiler\/compiler_globals.hpp\"\n","filename":"src\/hotspot\/share\/c1\/c1_Compilation.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"c1\/c1_globals_pd.hpp\"\n@@ -30,4 +31,0 @@\n-\n-#include CPU_HEADER(c1_globals)\n-#include OS_HEADER(c1_globals)\n-\n@@ -342,0 +339,2 @@\n+DECLARE_FLAGS(C1_FLAGS)\n+\n","filename":"src\/hotspot\/share\/c1\/c1_globals.hpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,34 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_C1_C1_GLOBALS_PD_HPP\n+#define SHARE_C1_C1_GLOBALS_PD_HPP\n+\n+#include \"runtime\/globals_shared.hpp\"\n+#include \"utilities\/macros.hpp\"\n+\n+#include CPU_HEADER(c1_globals)\n+#include OS_HEADER(c1_globals)\n+\n+#endif \/\/ SHARE_C1_C1_GLOBALS_PD_HPP\n","filename":"src\/hotspot\/share\/c1\/c1_globals_pd.hpp","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"compiler\/compiler_globals.hpp\"\n","filename":"src\/hotspot\/share\/code\/scopeDesc.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"compiler\/compiler_globals.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/compilerDirectives.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,40 +39,0 @@\n-#if !defined(COMPILER1) && !defined(COMPILER2) && !INCLUDE_JVMCI\n-define_pd_global(bool, BackgroundCompilation,        false);\n-define_pd_global(bool, CICompileOSR,                 false);\n-define_pd_global(bool, UseTypeProfile,               false);\n-define_pd_global(bool, UseOnStackReplacement,        false);\n-define_pd_global(bool, InlineIntrinsics,             false);\n-define_pd_global(bool, PreferInterpreterNativeStubs, true);\n-define_pd_global(bool, ProfileInterpreter,           false);\n-define_pd_global(bool, ProfileTraps,                 false);\n-define_pd_global(bool, TieredCompilation,            false);\n-\n-define_pd_global(intx, CompileThreshold,             0);\n-\n-define_pd_global(intx,   OnStackReplacePercentage,   0);\n-define_pd_global(size_t, NewSizeThreadIncrease,      4*K);\n-define_pd_global(bool,   InlineClassNatives,         true);\n-define_pd_global(bool,   InlineUnsafeOps,            true);\n-define_pd_global(uintx,  InitialCodeCacheSize,       160*K);\n-define_pd_global(uintx,  ReservedCodeCacheSize,      32*M);\n-define_pd_global(uintx,  NonProfiledCodeHeapSize,    0);\n-define_pd_global(uintx,  ProfiledCodeHeapSize,       0);\n-define_pd_global(uintx,  NonNMethodCodeHeapSize,     32*M);\n-\n-define_pd_global(uintx,  CodeCacheExpansionSize,     32*K);\n-define_pd_global(uintx,  CodeCacheMinBlockLength,    1);\n-define_pd_global(uintx,  CodeCacheMinimumUseSpace,   200*K);\n-define_pd_global(size_t, MetaspaceSize,              ScaleForWordSize(4*M));\n-define_pd_global(bool, NeverActAsServerClassMachine, true);\n-define_pd_global(uint64_t,MaxRAM,                    1ULL*G);\n-#define CI_COMPILER_COUNT 0\n-#else\n-\n-#if COMPILER2_OR_JVMCI\n-#define CI_COMPILER_COUNT 2\n-#else\n-#define CI_COMPILER_COUNT 1\n-#endif \/\/ COMPILER2_OR_JVMCI\n-\n-#endif \/\/ no compilers\n-\n","filename":"src\/hotspot\/share\/compiler\/compiler_globals.hpp","additions":1,"deletions":41,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_COMPILER_COMPILER_GLOBALS_PD_HPP\n+#define SHARE_COMPILER_COMPILER_GLOBALS_PD_HPP\n+\n+\/\/ Platform-specific Default values for VM flags used by the compiler.\n+\/\/\n+\/\/ Note: for historical reasons, some of these flags are declared in globals.hpp.\n+\/\/ E.g., BackgroundCompilation. Such declarations should be moved to this\n+\/\/ file instead.\n+\n+#include \"runtime\/globals_shared.hpp\"\n+#ifdef COMPILER1\n+#include \"c1\/c1_globals_pd.hpp\"\n+#endif \/\/ COMPILER1\n+#ifdef COMPILER2\n+#include \"opto\/c2_globals_pd.hpp\"\n+#endif \/\/ COMPILER2\n+\n+\/\/ JVMCI has no platform-specific global definitions\n+\/\/#if INCLUDE_JVMCI\n+\/\/#include \"jvmci\/jvmci_globals_pd.hpp\"\n+\/\/#endif\n+\n+#if !defined(COMPILER1) && !defined(COMPILER2) && !INCLUDE_JVMCI\n+define_pd_global(bool, BackgroundCompilation,        false);\n+define_pd_global(bool, CICompileOSR,                 false);\n+define_pd_global(bool, UseTypeProfile,               false);\n+define_pd_global(bool, UseOnStackReplacement,        false);\n+define_pd_global(bool, InlineIntrinsics,             false);\n+define_pd_global(bool, PreferInterpreterNativeStubs, true);\n+define_pd_global(bool, ProfileInterpreter,           false);\n+define_pd_global(bool, ProfileTraps,                 false);\n+define_pd_global(bool, TieredCompilation,            false);\n+\n+define_pd_global(intx, CompileThreshold,             0);\n+\n+define_pd_global(intx,   OnStackReplacePercentage,   0);\n+define_pd_global(size_t, NewSizeThreadIncrease,      4*K);\n+define_pd_global(bool,   InlineClassNatives,         true);\n+define_pd_global(bool,   InlineUnsafeOps,            true);\n+define_pd_global(uintx,  InitialCodeCacheSize,       160*K);\n+define_pd_global(uintx,  ReservedCodeCacheSize,      32*M);\n+define_pd_global(uintx,  NonProfiledCodeHeapSize,    0);\n+define_pd_global(uintx,  ProfiledCodeHeapSize,       0);\n+define_pd_global(uintx,  NonNMethodCodeHeapSize,     32*M);\n+\n+define_pd_global(uintx,  CodeCacheExpansionSize,     32*K);\n+define_pd_global(uintx,  CodeCacheMinBlockLength,    1);\n+define_pd_global(uintx,  CodeCacheMinimumUseSpace,   200*K);\n+define_pd_global(size_t, MetaspaceSize,              ScaleForWordSize(4*M));\n+define_pd_global(bool, NeverActAsServerClassMachine, true);\n+define_pd_global(uint64_t,MaxRAM,                    1ULL*G);\n+#define CI_COMPILER_COUNT 0\n+#else\n+\n+#if COMPILER2_OR_JVMCI\n+#define CI_COMPILER_COUNT 2\n+#else\n+#define CI_COMPILER_COUNT 1\n+#endif \/\/ COMPILER2_OR_JVMCI\n+\n+#endif \/\/ no compilers\n+\n+#endif \/\/ SHARE_COMPILER_COMPILER_GLOBALS_PD_HPP\n","filename":"src\/hotspot\/share\/compiler\/compiler_globals_pd.hpp","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -742,0 +742,2 @@\n+DECLARE_FLAGS(GC_FLAGS)\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/gc_globals.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+#include \"compiler\/compiler_globals.hpp\"\n","filename":"src\/hotspot\/share\/jvmci\/jvmci.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+#include \"compiler\/compiler_globals.hpp\"\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompiler.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"runtime\/globals_shared.hpp\"\n@@ -142,0 +143,2 @@\n+DECLARE_FLAGS(JVMCI_FLAGS)\n+\n","filename":"src\/hotspot\/share\/jvmci\/jvmci_globals.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"opto\/c2_globals_pd.hpp\"\n@@ -31,3 +32,0 @@\n-#include CPU_HEADER(c2_globals)\n-#include OS_HEADER(c2_globals)\n-\n@@ -801,0 +799,2 @@\n+DECLARE_FLAGS(C2_FLAGS)\n+\n","filename":"src\/hotspot\/share\/opto\/c2_globals.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,34 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_OPTO_C2_GLOBALS_PD_HPP\n+#define SHARE_OPTO_C2_GLOBALS_PD_HPP\n+\n+#include \"runtime\/globals_shared.hpp\"\n+#include \"utilities\/macros.hpp\"\n+\n+#include CPU_HEADER(c2_globals)\n+#include OS_HEADER(c2_globals)\n+\n+#endif \/\/ SHARE_OPTO_C2_GLOBALS_PD_HPP\n","filename":"src\/hotspot\/share\/opto\/c2_globals_pd.hpp","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"compiler\/compiler_globals.hpp\"\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"compiler\/compiler_globals.hpp\"\n@@ -30,1 +31,0 @@\n-#include \"runtime\/globals.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/escapeBarrier.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,120 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_RUNTIME_FLAGS_ALLFLAGS_HPP\n+#define SHARE_RUNTIME_FLAGS_ALLFLAGS_HPP\n+\n+#include \"compiler\/compiler_globals.hpp\"\n+#include \"runtime\/globals.hpp\"\n+\n+\/\/ Put the LP64\/JVMCI\/COMPILER1\/COMPILER1\/ARCH at\n+\/\/ the top, as they are processed by jvmFlags.cpp in that\n+\/\/ order.\n+\n+#define ALL_FLAGS(            \\\n+    develop,                  \\\n+    develop_pd,               \\\n+    product,                  \\\n+    product_pd,               \\\n+    notproduct,               \\\n+    range,                    \\\n+    constraint)               \\\n+                              \\\n+  LP64_RUNTIME_FLAGS(         \\\n+    develop,                  \\\n+    develop_pd,               \\\n+    product,                  \\\n+    product_pd,               \\\n+    notproduct,               \\\n+    range,                    \\\n+    constraint)               \\\n+                              \\\n+  JVMCI_ONLY(JVMCI_FLAGS(     \\\n+    develop,                  \\\n+    develop_pd,               \\\n+    product,                  \\\n+    product_pd,               \\\n+    notproduct,               \\\n+    range,                    \\\n+    constraint))              \\\n+                              \\\n+  COMPILER1_PRESENT(C1_FLAGS( \\\n+    develop,                  \\\n+    develop_pd,               \\\n+    product,                  \\\n+    product_pd,               \\\n+    notproduct,               \\\n+    range,                    \\\n+    constraint))              \\\n+                              \\\n+  COMPILER2_PRESENT(C2_FLAGS( \\\n+    develop,                  \\\n+    develop_pd,               \\\n+    product,                  \\\n+    product_pd,               \\\n+    notproduct,               \\\n+    range,                    \\\n+    constraint))              \\\n+                              \\\n+  ARCH_FLAGS(                 \\\n+    develop,                  \\\n+    product,                  \\\n+    notproduct,               \\\n+    range,                    \\\n+    constraint)               \\\n+                              \\\n+  RUNTIME_FLAGS(              \\\n+    develop,                  \\\n+    develop_pd,               \\\n+    product,                  \\\n+    product_pd,               \\\n+    notproduct,               \\\n+    range,                    \\\n+    constraint)               \\\n+                              \\\n+  RUNTIME_OS_FLAGS(           \\\n+    develop,                  \\\n+    develop_pd,               \\\n+    product,                  \\\n+    product_pd,               \\\n+    notproduct,               \\\n+    range,                    \\\n+    constraint)               \\\n+                              \\\n+  GC_FLAGS(                   \\\n+    develop,                  \\\n+    develop_pd,               \\\n+    product,                  \\\n+    product_pd,               \\\n+    notproduct,               \\\n+    range,                    \\\n+    constraint)\n+\n+#define ALL_CONSTRAINTS(f) \\\n+  COMPILER_CONSTRAINTS(f)  \\\n+  RUNTIME_CONSTRAINTS(f)   \\\n+  GC_CONSTRAINTS(f)\n+\n+\n+#endif \/\/ SHARE_RUNTIME_FLAGS_ALLFLAGS_HPP\n","filename":"src\/hotspot\/share\/runtime\/flags\/allFlags.hpp","additions":120,"deletions":0,"binary":false,"changes":120,"status":"added"},{"patch":"@@ -26,14 +26,1 @@\n-#include \"jfr\/jfrEvents.hpp\"\n-#include \"jvm.h\"\n-#include \"memory\/allocation.inline.hpp\"\n-#include \"oops\/oop.inline.hpp\"\n-#include \"runtime\/arguments.hpp\"\n-#include \"runtime\/globals.hpp\"\n-#include \"runtime\/globals_extension.hpp\"\n-#include \"runtime\/globals_shared.hpp\"\n-#include \"runtime\/os.hpp\"\n-#include \"runtime\/sharedRuntime.hpp\"\n-#include \"utilities\/defaultStream.hpp\"\n-#include \"utilities\/macros.hpp\"\n-#include \"utilities\/ostream.hpp\"\n-#include \"utilities\/stringUtils.hpp\"\n+#include \"runtime\/flags\/allFlags.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/globals.cpp","additions":1,"deletions":14,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-#include \"compiler\/compiler_globals.hpp\"\n+#include \"compiler\/compiler_globals_pd.hpp\"\n@@ -2499,20 +2499,4 @@\n-\/\/ Interface macros\n-#define DECLARE_PRODUCT_FLAG(type, name, value, ...)      extern \"C\" type name;\n-#define DECLARE_PD_PRODUCT_FLAG(type, name, ...)          extern \"C\" type name;\n-#ifdef PRODUCT\n-#define DECLARE_DEVELOPER_FLAG(type, name, value, ...)    const type name = value;\n-#define DECLARE_PD_DEVELOPER_FLAG(type, name, ...)        const type name = pd_##name;\n-#define DECLARE_NOTPRODUCT_FLAG(type, name, value, ...)   const type name = value;\n-#else\n-#define DECLARE_DEVELOPER_FLAG(type, name, value, ...)    extern \"C\" type name;\n-#define DECLARE_PD_DEVELOPER_FLAG(type, name, ...)        extern \"C\" type name;\n-#define DECLARE_NOTPRODUCT_FLAG(type, name, value, ...)   extern \"C\" type name;\n-#endif \/\/ PRODUCT\n-\n-ALL_FLAGS(DECLARE_DEVELOPER_FLAG,\n-          DECLARE_PD_DEVELOPER_FLAG,\n-          DECLARE_PRODUCT_FLAG,\n-          DECLARE_PD_PRODUCT_FLAG,\n-          DECLARE_NOTPRODUCT_FLAG,\n-          IGNORE_RANGE,\n-          IGNORE_CONSTRAINT)\n+DECLARE_FLAGS(LP64_RUNTIME_FLAGS)\n+DECLARE_ARCH_FLAGS(ARCH_FLAGS)\n+DECLARE_FLAGS(RUNTIME_FLAGS)\n+DECLARE_FLAGS(RUNTIME_OS_FLAGS)\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":5,"deletions":21,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"runtime\/flags\/allFlags.hpp\"\n@@ -30,1 +31,0 @@\n-#include \"runtime\/globals.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/globals_extension.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -82,30 +82,11 @@\n-#define VM_FLAGS(             \\\n-    develop,                  \\\n-    develop_pd,               \\\n-    product,                  \\\n-    product_pd,               \\\n-    notproduct,               \\\n-    range,                    \\\n-    constraint)               \\\n-                              \\\n-  RUNTIME_FLAGS(              \\\n-    develop,                  \\\n-    develop_pd,               \\\n-    product,                  \\\n-    product_pd,               \\\n-    notproduct,               \\\n-    range,                    \\\n-    constraint)               \\\n-                              \\\n-  GC_FLAGS(                   \\\n-    develop,                  \\\n-    develop_pd,               \\\n-    product,                  \\\n-    product_pd,               \\\n-    notproduct,               \\\n-    range,                    \\\n-    constraint)               \\\n-\n-\/\/ Put the LP64\/JVMCI\/COMPILER1\/COMPILER1\/ARCH at\n-\/\/ the top, as they are processed by jvmFlags.cpp in that\n-\/\/ order.\n+#define DECLARE_PRODUCT_FLAG(type, name, value, ...)      extern \"C\" type name;\n+#define DECLARE_PD_PRODUCT_FLAG(type, name, ...)          extern \"C\" type name;\n+#ifdef PRODUCT\n+#define DECLARE_DEVELOPER_FLAG(type, name, value, ...)    const type name = value;\n+#define DECLARE_PD_DEVELOPER_FLAG(type, name, ...)        const type name = pd_##name;\n+#define DECLARE_NOTPRODUCT_FLAG(type, name, value, ...)   const type name = value;\n+#else\n+#define DECLARE_DEVELOPER_FLAG(type, name, value, ...)    extern \"C\" type name;\n+#define DECLARE_PD_DEVELOPER_FLAG(type, name, ...)        extern \"C\" type name;\n+#define DECLARE_NOTPRODUCT_FLAG(type, name, value, ...)   extern \"C\" type name;\n+#endif \/\/ PRODUCT\n@@ -113,69 +94,8 @@\n-#define ALL_FLAGS(            \\\n-    develop,                  \\\n-    develop_pd,               \\\n-    product,                  \\\n-    product_pd,               \\\n-    notproduct,               \\\n-    range,                    \\\n-    constraint)               \\\n-                              \\\n-  LP64_RUNTIME_FLAGS(         \\\n-    develop,                  \\\n-    develop_pd,               \\\n-    product,                  \\\n-    product_pd,               \\\n-    notproduct,               \\\n-    range,                    \\\n-    constraint)               \\\n-                              \\\n-  JVMCI_ONLY(JVMCI_FLAGS(     \\\n-    develop,                  \\\n-    develop_pd,               \\\n-    product,                  \\\n-    product_pd,               \\\n-    notproduct,               \\\n-    range,                    \\\n-    constraint))              \\\n-                              \\\n-  COMPILER1_PRESENT(C1_FLAGS( \\\n-    develop,                  \\\n-    develop_pd,               \\\n-    product,                  \\\n-    product_pd,               \\\n-    notproduct,               \\\n-    range,                    \\\n-    constraint))              \\\n-                              \\\n-  COMPILER2_PRESENT(C2_FLAGS( \\\n-    develop,                  \\\n-    develop_pd,               \\\n-    product,                  \\\n-    product_pd,               \\\n-    notproduct,               \\\n-    range,                    \\\n-    constraint))              \\\n-                              \\\n-  ARCH_FLAGS(                 \\\n-    develop,                  \\\n-    product,                  \\\n-    notproduct,               \\\n-    range,                    \\\n-    constraint)               \\\n-                              \\\n-  VM_FLAGS(                   \\\n-    develop,                  \\\n-    develop_pd,               \\\n-    product,                  \\\n-    product_pd,               \\\n-    notproduct,               \\\n-    range,                    \\\n-    constraint)               \\\n-                              \\\n-  RUNTIME_OS_FLAGS(           \\\n-    develop,                  \\\n-    develop_pd,               \\\n-    product,                  \\\n-    product_pd,               \\\n-    notproduct,               \\\n-    range,                    \\\n-    constraint)\n+#define DECLARE_FLAGS(flag_group)         \\\n+    flag_group(DECLARE_DEVELOPER_FLAG,    \\\n+               DECLARE_PD_DEVELOPER_FLAG, \\\n+               DECLARE_PRODUCT_FLAG,      \\\n+               DECLARE_PD_PRODUCT_FLAG,   \\\n+               DECLARE_NOTPRODUCT_FLAG,   \\\n+               IGNORE_RANGE,              \\\n+               IGNORE_CONSTRAINT)\n@@ -183,4 +103,6 @@\n-#define ALL_CONSTRAINTS(f)    \\\n-  COMPILER_CONSTRAINTS(f)     \\\n-  RUNTIME_CONSTRAINTS(f)      \\\n-  GC_CONSTRAINTS(f)\n+#define DECLARE_ARCH_FLAGS(flag_group)    \\\n+    flag_group(DECLARE_DEVELOPER_FLAG,    \\\n+               DECLARE_PRODUCT_FLAG,      \\\n+               DECLARE_NOTPRODUCT_FLAG,   \\\n+               IGNORE_RANGE, \\\n+               IGNORE_CONSTRAINT)\n","filename":"src\/hotspot\/share\/runtime\/globals_shared.hpp","additions":25,"deletions":103,"binary":false,"changes":128,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"compiler\/compiler_globals.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/init.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}