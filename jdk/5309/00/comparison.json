{"files":[{"patch":"@@ -42,1 +42,2 @@\n- * <p>Note that the messages &quot;printed&quot; by methods in this\n+ * @apiNote\n+ * The messages &quot;printed&quot; by methods in this\n@@ -100,0 +101,86 @@\n+    \/**\n+     * Prints an error.\n+     *\n+     * @implSpec\n+     * The default implementation is equivalent to {@code\n+     * printMessage(Diagnostic.Kind.ERROR, msg)}.\n+     *\n+     * @param msg  the message, or an empty string if none\n+     * @since 18\n+     *\/\n+    default void printError(CharSequence msg) {\n+        printMessage(Diagnostic.Kind.ERROR, msg);\n+    }\n+\n+    \/**\n+     * Prints an error at the location of the element.\n+     *\n+     * @implSpec\n+     * The default implementation is equivalent to {@code\n+     * printMessage(Diagnostic.Kind.ERROR, msg, e)}.\n+     *\n+     * @param msg  the message, or an empty string if none\n+     * @param e    the element to use as a position hint\n+     * @since 18\n+     *\/\n+    default void printError(CharSequence msg, Element e) {\n+        printMessage(Diagnostic.Kind.ERROR, msg, e);\n+    }\n+\n+    \/**\n+     * Prints a warning.\n+     *\n+     * @implSpec\n+     * The default implementation is equivalent to {@code\n+     * printMessage(Diagnostic.Kind.WARNING, msg)}.\n+     *\n+     * @param msg  the message, or an empty string if none\n+     * @since 18\n+     *\/\n+    default void printWarning(CharSequence msg) {\n+        printMessage(Diagnostic.Kind.WARNING, msg);\n+    }\n+\n+    \/**\n+     * Prints a warning at the location of the element.\n+     *\n+     * @implSpec\n+     * The default implementation is equivalent to {@code\n+     * printMessage(Diagnostic.Kind.WARNING, msg, e)}.\n+     *\n+     * @param msg  the message, or an empty string if none\n+     * @param e    the element to use as a position hint\n+     * @since 18\n+     *\/\n+    default void printWarning(CharSequence msg, Element e) {\n+        printMessage(Diagnostic.Kind.WARNING, msg, e);\n+    }\n+\n+    \/**\n+     * Prints a note.\n+     *\n+     * @implSpec\n+     * The default implementation is equivalent to {@code\n+     * printMessage(Diagnostic.Kind.NOTE, msg)}.\n+     *\n+     * @param msg  the message, or an empty string if none\n+     * @since 18\n+     *\/\n+    default void printNote(CharSequence msg) {\n+        printMessage(Diagnostic.Kind.NOTE, msg);\n+    }\n+\n+    \/**\n+     * Prints a note at the location of the element.\n+     *\n+     * @implSpec\n+     * The default implementation is equivalent to {@code\n+     * printMessage(Diagnostic.Kind.NOTE, msg, e)}.\n+     *\n+     * @param msg  the message, or an empty string if none\n+     * @param e    the element to use as a position hint\n+     * @since 18\n+     *\/\n+    default void printNote(CharSequence msg, Element e) {\n+        printMessage(Diagnostic.Kind.NOTE, msg, e);\n+    }\n","filename":"src\/java.compiler\/share\/classes\/javax\/annotation\/processing\/Messager.java","additions":88,"deletions":1,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-        messager.printMessage(Kind.NOTE, \"RUNNING - lastRound = \" + re.processingOver());\n+        messager.printNote(\"RUNNING - lastRound = \" + re.processingOver());\n","filename":"test\/langtools\/tools\/javac\/7129225\/AnnoProcessor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-            messager.printMessage(Kind.NOTE, message);\n+            messager.printNote(message);\n","filename":"test\/langtools\/tools\/javac\/MethodParameters\/ClassReaderTest\/MethodParameterProcessor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,2 +43,1 @@\n-                        messager.printMessage(WARNING,\n-                            \"Type param names should be of length 1\", tp);\n+                        messager.printWarning(\"Type param names should be of length 1\", tp);\n","filename":"test\/langtools\/tools\/javac\/T6458823\/MyProcessor.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-            messager.printMessage(Diagnostic.Kind.NOTE, \"writing Generated.java\");\n+            messager.printNote(\"writing Generated.java\");\n@@ -89,1 +89,1 @@\n-                messager.printMessage(Diagnostic.Kind.ERROR, x.toString());\n+                messager.printError(x.toString());\n","filename":"test\/langtools\/tools\/javac\/T7159016.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-                messager.printMessage(Kind.ERROR, message);\n+                messager.printError(message);\n","filename":"test\/langtools\/tools\/javac\/T8170667\/ParameterProcessor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-        m.printMessage(Diagnostic.Kind.NOTE, \"processing annotations\");\n+        m.printNote(\"processing annotations\");\n@@ -80,1 +80,1 @@\n-            m.printMessage(Diagnostic.Kind.NOTE, \"  processing annotation \" + anno);\n+            m.printNote(\"  processing annotation \" + anno);\n@@ -82,1 +82,1 @@\n-                m.printMessage(Diagnostic.Kind.NOTE, \"    processing element \" + e);\n+                m.printNote(\"    processing element \" + e);\n@@ -92,1 +92,1 @@\n-            m.printMessage(Diagnostic.Kind.NOTE, \"no annotations found\");\n+            m.printNote(\"no annotations found\");\n","filename":"test\/langtools\/tools\/javac\/api\/T6412669.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -281,2 +281,2 @@\n-                messager.printMessage(Diagnostic.Kind.NOTE, \"informational note\",\n-                        roundEnv.getRootElements().iterator().next());\n+                messager.printNote(\"informational note\",\n+                                   roundEnv.getRootElements().iterator().next());\n","filename":"test\/langtools\/tools\/javac\/api\/TestClientCodeWrapper.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -115,2 +115,1 @@\n-            m.printMessage(Diagnostic.Kind.ERROR,\n-                    \"Unexpected number of elements found: \" + nelems + \" expected: \" + EXPECT);\n+            m.printError(\"Unexpected number of elements found: \" + nelems + \" expected: \" + EXPECT);\n@@ -180,1 +179,1 @@\n-                m.printMessage(Diagnostic.Kind.ERROR, \"Null element found for \" + text);\n+                m.printError(\"Null element found for \" + text);\n@@ -185,2 +184,2 @@\n-                m.printMessage(Diagnostic.Kind.ERROR, \"Unexpected name in last test: \"\n-                        + e.getSimpleName() + \", expected: last\");\n+                m.printError(\"Unexpected name in last test: \"\n+                             + e.getSimpleName() + \", expected: last\");\n","filename":"test\/langtools\/tools\/javac\/api\/TestGetElement.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -331,1 +331,1 @@\n-                        log.printMessage(ERROR, testNode.getKind() + \" != \" + kind, e);\n+                        log.printError(testNode.getKind() + \" != \" + kind, e);\n","filename":"test\/langtools\/tools\/javac\/api\/TestOperators.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -196,1 +196,1 @@\n-            messager.printMessage(Diagnostic.Kind.ERROR, msg);\n+            messager.printError(msg);\n","filename":"test\/langtools\/tools\/javac\/api\/TestTrees.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -153,1 +153,1 @@\n-                messager.printMessage(Diagnostic.Kind.ERROR, PACKAGE_CONTENT_ERROR);\n+                messager.printError(PACKAGE_CONTENT_ERROR);\n@@ -159,1 +159,0 @@\n-\n","filename":"test\/langtools\/tools\/javac\/classreader\/T7031108.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -101,1 +101,1 @@\n-                    messager.printMessage(Diagnostic.Kind.NOTE, tree.getDiagnostic().getMessage(null));\n+                    messager.printNote(tree.getDiagnostic().getMessage(null));\n","filename":"test\/langtools\/tools\/javac\/diags\/DocCommentProcessor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,2 +34,1 @@\n-            Messager m = processingEnv.getMessager();\n-            m.printMessage(Diagnostic.Kind.ERROR, \"Error!\");\n+            processingEnv.getMessager().printError(\"Error!\");\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ErrProcMessager\/processors\/AnnoProc.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -34,2 +34,1 @@\n-            Messager m = processingEnv.getMessager();\n-            m.printMessage(Diagnostic.Kind.NOTE, \"Note!\");\n+            processingEnv.getMessager().printNote(\"Note!\");\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/NoteProcMessager\/processors\/AnnoProc.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-                messager.printMessage(Diagnostic.Kind.ERROR, e.toString());\n+                messager.printError(e.toString());\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ProcFileCreateLastRound\/processors\/AnnoProc.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-                messager.printMessage(Diagnostic.Kind.ERROR, e.toString());\n+                messager.printError(e.toString());\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ProcFileReopening\/processors\/AnnoProc.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-                messager.printMessage(Diagnostic.Kind.ERROR, e.toString());\n+                messager.printError(e.toString());\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ProcIllegalFileName\/processors\/AnnoProc.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-                messager.printMessage(Diagnostic.Kind.ERROR, e.toString());\n+                messager.printError(e.toString());\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ProcSuspiciousClassName\/processors\/AnnoProc.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-                messager.printMessage(Diagnostic.Kind.ERROR, e.toString());\n+                messager.printError(e.toString());\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ProcTypeRecreate\/processors\/AnnoProc.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-                messager.printMessage(Diagnostic.Kind.ERROR, e.toString());\n+                messager.printError(e.toString());\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ProcUnclosedTypeFiles\/processors\/AnnoProc.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-                messager.printMessage(Diagnostic.Kind.ERROR, e.toString());\n+                messager.printError(e.toString());\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ProcUseImplicit\/processors\/AnnoProc.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-                messager.printMessage(Diagnostic.Kind.ERROR, e.toString());\n+                messager.printError(e.toString());\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ProcUseProcOrImplicit\/processors\/AnnoProc.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,2 +34,1 @@\n-            Messager m = processingEnv.getMessager();\n-            m.printMessage(Diagnostic.Kind.WARNING, \"Warning!\");\n+            processingEnv.getMessager().printWarning(\"Warning!\");\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/WarnProcMessager\/processors\/AnnoProc.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-                    log.printMessage(ERROR, \"final modifier on values()\", e);\n+                    log.printError(\"final modifier on values()\", e);\n","filename":"test\/langtools\/tools\/javac\/enum\/6424358\/T6424358.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -124,4 +124,3 @@\n-            messager.printMessage(Diagnostic.Kind.ERROR,\n-                    \"Unexpected value for \" + label\n-                    + \"; expected: \" + expected\n-                    + \"; found: \" + actual);\n+            messager.printError(\"Unexpected value for \" + label\n+                                + \"; expected: \" + expected\n+                                + \"; found: \" + actual);\n","filename":"test\/langtools\/tools\/javac\/file\/T7018098.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-                messager.printMessage(Kind.NOTE, \"found previous content of length \" +\n+                messager.printNote(\"found previous content of length \" +\n@@ -111,1 +111,1 @@\n-                messager.printMessage(Kind.NOTE, \"not previously there\");\n+                messager.printNote(\"not previously there\");\n@@ -114,1 +114,1 @@\n-                messager.printMessage(Kind.ERROR, \"while reading: \" + x);\n+                messager.printError(\"while reading: \" + x);\n@@ -119,1 +119,1 @@\n-                messager.printMessage(Kind.ERROR, \"expected file but file not found\");\n+                messager.printError(\"expected file but file not found\");\n@@ -126,1 +126,1 @@\n-                messager.printMessage(Kind.NOTE, \"wrote new content\");\n+                messager.printNote(\"wrote new content\");\n","filename":"test\/langtools\/tools\/javac\/file\/T7068437.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -148,1 +148,1 @@\n-                messager.printMessage(Kind.NOTE, \"C.java: found previous content of length \" + len);\n+                messager.printNote(\"C.java: found previous content of length \" + len);\n@@ -150,1 +150,1 @@\n-                messager.printMessage(Kind.NOTE, \"C.java: not previously there\");\n+                messager.printNote(\"C.java: not previously there\");\n@@ -152,1 +152,1 @@\n-                messager.printMessage(Kind.ERROR, \"while reading: \" + x);\n+                messager.printError(\"while reading: \" + x);\n@@ -160,1 +160,1 @@\n-                messager.printMessage(Kind.NOTE, \"C.java: wrote new content: \" + body);\n+                messager.printNote(\"C.java: wrote new content: \" + body);\n@@ -162,1 +162,1 @@\n-                messager.printMessage(Kind.ERROR, \"while writing: \" + x);\n+                messager.printError(\"while writing: \" + x);\n@@ -174,1 +174,0 @@\n-\n","filename":"test\/langtools\/tools\/javac\/file\/T7068451.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -396,1 +396,1 @@\n-                    messager.printMessage(Kind.NOTE, \"field: \" + field.getSimpleName());\n+                    messager.printNote(\"field: \" + field.getSimpleName());\n@@ -497,1 +497,1 @@\n-            processingEnv.getMessager().printMessage(Kind.NOTE, \"AP Invoked\");\n+            processingEnv.getMessager().printNote(\"AP Invoked\");\n@@ -556,1 +556,1 @@\n-            processingEnv.getMessager().printMessage(Kind.NOTE, \"m1x\/test.A AP Invoked\");\n+            processingEnv.getMessager().printNote(\"m1x\/test.A AP Invoked\");\n@@ -572,1 +572,1 @@\n-            processingEnv.getMessager().printMessage(Kind.NOTE, \"m1x\/test.B AP Invoked\");\n+            processingEnv.getMessager().printNote(\"m1x\/test.B AP Invoked\");\n","filename":"test\/langtools\/tools\/javac\/modules\/AnnotationProcessing.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -89,2 +89,1 @@\n-                            processingEnv.getMessager().printMessage(Diagnostic.Kind.NOTE,\n-                                                                     text.substring(start, end));\n+                            processingEnv.getMessager().printNote(text.substring(start, end));\n","filename":"test\/langtools\/tools\/javac\/patterns\/PatternMatchPosTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-            msgr.printMessage(NOTE, \"running process to create HelloWorld.\");\n+            msgr.printNote(\"running process to create HelloWorld.\");\n@@ -70,1 +70,1 @@\n-                msgr.printMessage(ERROR, ioe.getMessage());\n+                msgr.printError(ioe.getMessage());\n@@ -74,1 +74,1 @@\n-                msgr.printMessage(ERROR, e.getMessage());\n+                msgr.printError(e.getMessage());\n","filename":"test\/langtools\/tools\/javac\/processing\/6350124\/HelloWorldAP.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-            messager.printMessage(NOTE, \"Hello from ProcBar\");\n+            messager.printNote(\"Hello from ProcBar\");\n","filename":"test\/langtools\/tools\/javac\/processing\/6365040\/ProcBar.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-            messager.printMessage(NOTE, \"Hello from ProcFoo\");\n+            messager.printNote(\"Hello from ProcFoo\");\n","filename":"test\/langtools\/tools\/javac\/processing\/6365040\/ProcFoo.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-            messager.printMessage(NOTE, \"Hello from T6365040\");\n+            messager.printNote(\"Hello from T6365040\");\n","filename":"test\/langtools\/tools\/javac\/processing\/6365040\/T6365040.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-                m.printMessage(Diagnostic.Kind.ERROR, \"test\", e);\n+                m.printError(\"test\", e);\n","filename":"test\/langtools\/tools\/javac\/processing\/6414633\/A.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-                messager.printMessage(ERROR,npe.toString());\n+                messager.printError(npe.toString());\n@@ -59,3 +59,3 @@\n-            messager.printMessage(ERROR, \"FAILED: round:\" + r\n-                + \", errorRaised:\" + renv.errorRaised()\n-                + \", processingOver:\" + renv.processingOver());\n+            messager.printError(\"FAILED: round:\" + r\n+                                + \", errorRaised:\" + renv.errorRaised()\n+                                + \", processingOver:\" + renv.processingOver());\n","filename":"test\/langtools\/tools\/javac\/processing\/6430209\/b6341534.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -125,1 +125,1 @@\n-        messager.printMessage(Kind.ERROR, msg);\n+        messager.printError(msg);\n","filename":"test\/langtools\/tools\/javac\/processing\/6499119\/ClassProcessor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-            messager.printMessage(ERROR, \"Deliberate Error\");\n+            messager.printError(\"Deliberate Error\");\n","filename":"test\/langtools\/tools\/javac\/processing\/6994946\/TestProcessor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-            processingEnv.getMessager().printMessage(Kind.ERROR, \"error\");\n+            processingEnv.getMessager().printError(\"error\");\n","filename":"test\/langtools\/tools\/javac\/processing\/GenerateAndError.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-            processingEnv.getMessager().printMessage(Kind.ERROR, \"Stop!\");\n+            processingEnv.getMessager().printError(\"Stop!\");\n","filename":"test\/langtools\/tools\/javac\/processing\/StopAfterError\/StopAfterError.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-            messager.printMessage(Diagnostic.Kind.ERROR, e.toString());\n+            messager.printError(e.toString());\n","filename":"test\/langtools\/tools\/javac\/processing\/T6439826.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -456,1 +456,1 @@\n-            messager.printMessage(Diagnostic.Kind.ERROR, msg);\n+            messager.printError(msg);\n","filename":"test\/langtools\/tools\/javac\/processing\/T6920317.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -303,6 +303,4 @@\n-        messager.printMessage(Diagnostic.Kind.NOTE,\n-                \"Round \" + round\n-                + \" \" + roundEnv.getRootElements()\n-                + \", last round: \" + roundEnv.processingOver());\n-        messager.printMessage(Diagnostic.Kind.NOTE,\n-                \"ek: \" + ek + \", mwk: \" + mwk + \", jwk: \" + jwk);\n+        messager.printNote(\"Round \" + round\n+                           + \" \" + roundEnv.getRootElements()\n+                           + \", last round: \" + roundEnv.processingOver());\n+        messager.printNote(\"ek: \" + ek + \", mwk: \" + mwk + \", jwk: \" + jwk);\n@@ -316,1 +314,1 @@\n-            messager.printMessage(Diagnostic.Kind.WARNING, \"round \" + round);\n+            messager.printWarning(\"round \" + round);\n@@ -319,1 +317,1 @@\n-            messager.printMessage(Diagnostic.Kind.ERROR, \"round \" + round);\n+            messager.printError(\"round \" + round);\n","filename":"test\/langtools\/tools\/javac\/processing\/TestWarnErrorCount.java","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -79,3 +79,0 @@\n-\/\/        messager.printMessage(NOTE, \"expect: \" + expected);\n-\/\/        messager.printMessage(NOTE, \"actual: \" + actual);\n-\n@@ -83,2 +80,3 @@\n-            messager.printMessage(ERROR,\n-                \"round \" + round + \" unexpected value for \" + expected.getClass().getName() + \": \" + actual);\n+            messager.printError(\"round \" + round +\n+                                \" unexpected value for \" + expected.getClass().getName() +\n+                                \": \" + actual);\n","filename":"test\/langtools\/tools\/javac\/processing\/environment\/round\/TestContext.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-        messager.printMessage(Diagnostic.Kind.ERROR, \"intentional error\");\n+        messager.printError(\"intentional error\");\n","filename":"test\/langtools\/tools\/javac\/processing\/errors\/TestErrorCount.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-                messager.printMessage(ERROR, \"Error on first round.\");\n+                messager.printError(\"Error on first round.\");\n@@ -91,1 +91,1 @@\n-                messager.printMessage(ERROR, \"Error on last round.\");\n+                messager.printError(\"Error on last round.\");\n","filename":"test\/langtools\/tools\/javac\/processing\/errors\/TestReturnCode.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -239,1 +239,1 @@\n-                m.printMessage(Diagnostic.Kind.ERROR, e.toString());\n+                m.printError(e.toString());\n","filename":"test\/langtools\/tools\/javac\/processing\/errors\/TestSuppression.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -131,1 +131,1 @@\n-                    messager.printMessage(Kind.NOTE, \"found: \" + resource.toUri());\n+                    messager.printNote(\"found: \" + resource.toUri());\n@@ -134,1 +134,1 @@\n-                    messager.printMessage(Kind.ERROR, \"could not read: \" + resource.toUri());\n+                    messager.printError(\"could not read: \" + resource.toUri());\n@@ -138,1 +138,1 @@\n-                messager.printMessage(Kind.ERROR, \"did not find resource\");\n+                messager.printError(\"did not find resource\");\n","filename":"test\/langtools\/tools\/javac\/processing\/filer\/TestGetResource2.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -94,2 +94,2 @@\n-            messager.printMessage(Diagnostic.Kind.ERROR,\n-                    \"relative path: \" + relative + \", kind: \" + kind + \", unexpected exception: \" + e);\n+            messager.printError(\"relative path: \" + relative + \", kind: \" + kind +\n+                                \", unexpected exception: \" + e);\n@@ -98,2 +98,1 @@\n-        messager.printMessage(Diagnostic.Kind.ERROR,\n-                \"relative path: \" + relative + \", kind: \" + kind + \", no exception thrown\");\n+        messager.printError(\"relative path: \" + relative + \", kind: \" + kind + \", no exception thrown\");\n","filename":"test\/langtools\/tools\/javac\/processing\/filer\/TestInvalidRelativeNames.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -89,2 +89,2 @@\n-            messager.printMessage(Diagnostic.Kind.ERROR,\n-                    \"relative path: \" + relative + \", kind: \" + kind + \", unexpected exception: \" + e);\n+            messager.printError(\"relative path: \" + relative + \", kind: \" + kind +\n+                                \", unexpected exception: \" + e);\n@@ -108,1 +108,1 @@\n-                            messager.printMessage(Diagnostic.Kind.ERROR, \"unexpected content: \" + sb);\n+                            messager.printError(\"unexpected content: \" + sb);\n@@ -122,1 +122,1 @@\n-                            messager.printMessage(Diagnostic.Kind.ERROR, \"unexpected content: \" + sb);\n+                            messager.printError(\"unexpected content: \" + sb);\n@@ -128,2 +128,2 @@\n-            messager.printMessage(Diagnostic.Kind.ERROR,\n-                    \"relative path: \" + relative + \", kind: \" + kind + \", unexpected exception: \" + e);\n+            messager.printError(\"relative path: \" + relative + \", kind: \" + kind +\n+                                \", unexpected exception: \" + e);\n","filename":"test\/langtools\/tools\/javac\/processing\/filer\/TestValidRelativeNames.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -125,1 +125,1 @@\n-        messager.printMessage(Diagnostic.Kind.NOTE, \"processing\");\n+        messager.printNote(\"processing\");\n","filename":"test\/langtools\/tools\/javac\/processing\/loader\/testClose\/TestClose2.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -75,3 +75,3 @@\n-            messager.printMessage(WARNING, WRN_NO_SOURCE);\n-            messager.printMessage(WARNING, WRN_WITH_SOURCE, e);\n-            messager.printMessage(WARNING, WRN_NO_SOURCE);\n+            messager.printWarning(WRN_NO_SOURCE);\n+            messager.printWarning(WRN_WITH_SOURCE, e);\n+            messager.printWarning(WRN_NO_SOURCE);\n","filename":"test\/langtools\/tools\/javac\/processing\/messager\/MessagerDiags.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -49,2 +49,1 @@\n-        messager.printMessage(NOTE,\n-                              String.valueOf(eltUtils.getPackageElement(\"no.such.package\")));\n+        messager.printNote(String.valueOf(eltUtils.getPackageElement(\"no.such.package\")));\n@@ -52,1 +51,1 @@\n-        messager.printMessage(NOTE, dir.getQualifiedName().toString());\n+        messager.printNote(dir.getQualifiedName().toString());\n@@ -54,1 +53,1 @@\n-            messager.printMessage(NOTE, e.toString());\n+            messager.printNote(e.toString());\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/6341534\/T6341534.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -188,2 +188,2 @@\n-                        .printMessage(Diagnostic.Kind.ERROR, \"Record element \" + recordElement.getQualifiedName()\n-                                + \" has no record components\");\n+                        .printError(\"Record element \" + recordElement.getQualifiedName()\n+                                    + \" has no record components\");\n@@ -195,3 +195,2 @@\n-                                .printMessage(Diagnostic.Kind.ERROR,\n-                                        \"Record component \" + recordComponent.getSimpleName() + \" from record \" + recordElement\n-                                                .getQualifiedName() + \" has no accessor\");\n+                                .printError(\"Record component \" + recordComponent.getSimpleName() + \" from record \" + recordElement\n+                                            .getQualifiedName() + \" has no accessor\");\n@@ -201,3 +200,2 @@\n-                                .printMessage(Diagnostic.Kind.ERROR,\n-                                        \"Record component \" + recordComponent.getSimpleName() + \" from record \" +\n-                                                recordElement.getQualifiedName() + \" has an accessor with name \" + accessor.getSimpleName());\n+                                .printError(\"Record component \" + recordComponent.getSimpleName() + \" from record \" +\n+                                            recordElement.getQualifiedName() + \" has an accessor with name \" + accessor.getSimpleName());\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/CheckingAccessorsOnLoadedRecordClasses.java","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -293,1 +293,1 @@\n-            processingEnv.getMessager().printMessage(Kind.ERROR, text);\n+            processingEnv.getMessager().printError(text);\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/CheckingTypeAnnotationsOnRecords.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -139,1 +139,1 @@\n-                    messager.printMessage(Kind.NOTE, \"field: \" + field.getSimpleName());\n+                    messager.printNote(\"field: \" + field.getSimpleName());\n@@ -142,1 +142,1 @@\n-                    messager.printMessage(Kind.NOTE, \"record component: \" + rc.getSimpleName());\n+                    messager.printNote(\"record component: \" + rc.getSimpleName());\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/JavaxLangModelForRecords.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -68,3 +68,2 @@\n-               processingEnv.getMessager().printMessage(ERROR,\n-                                                        \"No element retrieved for node named ''\" +\n-                                                        node.getSimpleName() + \"''.\");\n+               processingEnv.getMessager().printError(\"No element retrieved for node named ''\" +\n+                                                      node.getSimpleName() + \"''.\");\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/TestAnonSourceNames.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-                messager.printMessage(ERROR, \"No expected method count specified.\");\n+                messager.printError(\"No expected method count specified.\");\n@@ -70,1 +70,1 @@\n-                    messager.printMessage(ERROR, \"Wrong number of seen methods: \" + seenMethods);\n+                    messager.printError(\"Wrong number of seen methods: \" + seenMethods);\n@@ -90,3 +90,2 @@\n-                messager.printMessage(ERROR,\n-                                      \"Modifier \\\"default\\\" not present as expected.\",\n-                                      method);\n+                messager.printError(\"Modifier \\\"default\\\" not present as expected.\",\n+                                    method);\n@@ -101,5 +100,4 @@\n-                messager.printMessage(ERROR,\n-                                      new Formatter().format(\"Unexpected printing ouptput:%n\\tgot %s,%n\\texpected pattern %s.\",\n-                                                             stringWriter.toString(),\n-                                                             expectedIsDefault.expectedTextRegex()).toString(),\n-                                      method);\n+                messager.printError(new Formatter().format(\"Unexpected printing ouptput:%n\\tgot %s,%n\\texpected pattern %s.\",\n+                                                           stringWriter.toString(),\n+                                                           expectedIsDefault.expectedTextRegex()).toString(),\n+                                    method);\n@@ -112,3 +110,2 @@\n-                messager.printMessage(ERROR,\n-                                      \"Modifier \\\"default\\\" present when not expected.\",\n-                                      method);\n+                messager.printError(\"Modifier \\\"default\\\" present when not expected.\",\n+                                    method);\n@@ -119,5 +116,4 @@\n-            messager.printMessage(ERROR,\n-                                  new Formatter().format(\"Unexpected Executable.isDefault result: got ``%s'', expected ``%s''.\",\n-                                                         expectedDefault,\n-                                                         methodIsDefault).toString(),\n-                                  method);\n+            messager.printError(new Formatter().format(\"Unexpected Executable.isDefault result: got ``%s'', expected ``%s''.\",\n+                                                       expectedDefault,\n+                                                       methodIsDefault).toString(),\n+                                method);\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/TestExecutableElement.java","additions":14,"deletions":18,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-                messager.printMessage(ERROR, \"No executables visited.\");\n+                messager.printError(\"No executables visited.\");\n@@ -78,4 +78,3 @@\n-            messager.printMessage(ERROR,\n-                                  String.format(\"Unexpected TypeKind on receiver of %s:\" +\n-                                                \" expected %s\\t got %s%n\",\n-                                                executable, expectedKind, actualKind));\n+            messager.printError(String.format(\"Unexpected TypeKind on receiver of %s:\" +\n+                                              \" expected %s\\t got %s%n\",\n+                                              executable, expectedKind, actualKind));\n@@ -93,4 +92,3 @@\n-            messager.printMessage(ERROR,\n-                                  String.format(\"Unexpected TypeKind on executable's asType() of %s:\" +\n-                                                \" expected %s\\t got %s%n\",\n-                                                executable, expectedKind, kindFromType));\n+            messager.printError(String.format(\"Unexpected TypeKind on executable's asType() of %s:\" +\n+                                              \" expected %s\\t got %s%n\",\n+                                              executable, expectedKind, kindFromType));\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/TestExecutableReceiverType.java","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-            messager.printMessage(ERROR, \"unexpected \" + label + \" found: \" + found + \"; expected: \" + expect, te);\n+            messager.printError(\"unexpected \" + label + \" found: \" + found + \"; expected: \" + expect, te);\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/TestMissingElement\/TestMissingElement.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-            messager.printMessage(Diagnostic.Kind.ERROR, \"problem writing file: \" + ex);\n+            messager.printError(\"problem writing file: \" + ex);\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/TestMissingElement2\/Generator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -188,1 +188,1 @@\n-                messager.printMessage(Kind.NOTE, \"visiting: \" + element.getSimpleName() + \" Modifiers: \" + element.getModifiers());\n+                messager.printNote(\"visiting: \" + element.getSimpleName() + \" Modifiers: \" + element.getModifiers());\n@@ -190,1 +190,1 @@\n-                messager.printMessage(Kind.NOTE, String.format(\"    this class has: %d, permitted subclasses\", permittedSubclasses.size()));\n+                messager.printNote(String.format(\"    this class has: %d, permitted subclasses\", permittedSubclasses.size()));\n@@ -192,1 +192,1 @@\n-                    messager.printMessage(Kind.NOTE, String.format(\"    permitted subclass: %s\", ((DeclaredType)tm).asElement().getSimpleName()));\n+                    messager.printNote(String.format(\"    permitted subclass: %s\", ((DeclaredType)tm).asElement().getSimpleName()));\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/TestSealed.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-                        messager.printMessage(ERROR, \"Modifier.DEFAULT not expected on classes\/interfaces\");\n+                        messager.printError(\"Modifier.DEFAULT not expected on classes\/interfaces\");\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/TestTypeElement.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-        messager.printMessage(Diagnostic.Kind.NOTE, msg);\n+        messager.printNote(msg);\n@@ -110,1 +110,1 @@\n-        messager.printMessage(Diagnostic.Kind.NOTE, msg, e);\n+        messager.printNote(msg, e);\n@@ -114,1 +114,1 @@\n-        messager.printMessage(Diagnostic.Kind.ERROR, msg, e);\n+        messager.printError(msg, e);\n@@ -118,1 +118,1 @@\n-        messager.printMessage(Diagnostic.Kind.ERROR, msg);\n+        messager.printError(msg);\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/TestTypeParameter.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -151,1 +151,1 @@\n-        messager.printMessage(Diagnostic.Kind.NOTE, msg);\n+        messager.printNote(msg);\n@@ -155,1 +155,1 @@\n-        messager.printMessage(Diagnostic.Kind.NOTE, msg, e);\n+        messager.printNote(msg, e);\n@@ -159,1 +159,1 @@\n-        messager.printMessage(Diagnostic.Kind.ERROR, msg, e);\n+        messager.printError(msg, e);\n@@ -163,1 +163,1 @@\n-        messager.printMessage(Diagnostic.Kind.ERROR, msg);\n+        messager.printError(msg);\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/TestTypeParameterAnnotations.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -60,3 +60,2 @@\n-                    messager.printMessage(ERROR,\n-                                          \"Mismatch between expected and computed isFunctionalInterface\",\n-                                          type);\n+                    messager.printError(\"Mismatch between expected and computed isFunctionalInterface\",\n+                                        type);\n@@ -67,1 +66,1 @@\n-                messager.printMessage(ERROR, \"No types with ExpectedIsFunInt processed.\");\n+                messager.printError(\"No types with ExpectedIsFunInt processed.\");\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/util\/elements\/TestIsFunctionalInterface.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -258,1 +258,1 @@\n-            messager.printMessage(Diagnostic.Kind.ERROR, \"doc comment is null\", e);\n+            messager.printError(\"doc comment is null\", e);\n@@ -260,2 +260,1 @@\n-            messager.printMessage(Diagnostic.Kind.ERROR,\n-                    \"unexpected comment: \\\"\" + dc + \"\\\", expected \\\"\" + expect + \"\\\"\", e);\n+            messager.printError(\"unexpected comment: \\\"\" + dc + \"\\\", expected \\\"\" + expect + \"\\\"\", e);\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/util\/elements\/doccomments\/TestDocComments.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-                messager.printMessage(Diagnostic.Kind.ERROR, \"doc comment is null\", e);\n+                messager.printError(\"doc comment is null\", e);\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/util\/elements\/doccomments\/TestPackageInfoComments.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-                messager.printMessage(Diagnostic.Kind.NOTE, \"processing \" + typeElt);\n+                messager.printNote(\"processing \" + typeElt);\n","filename":"test\/langtools\/tools\/javac\/processing\/options\/testCommandLineClasses\/Test.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-        messager.printMessage(Diagnostic.Kind.NOTE, \"round \" + round);\n+        messager.printNote(\"round \" + round);\n@@ -54,1 +54,1 @@\n-            messager.printMessage(Diagnostic.Kind.WARNING, \"last round\");\n+            messager.printWarning(\"last round\");\n","filename":"test\/langtools\/tools\/javac\/processing\/options\/testPrintProcessorInfo\/Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-            processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, e.toString());\n+            processingEnv.getMessager().printError(e.toString());\n","filename":"test\/langtools\/tools\/javac\/processing\/rounds\/BaseClassesNotReRead.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-                processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, e.toString());\n+                processingEnv.getMessager().printError(e.toString());\n","filename":"test\/langtools\/tools\/javac\/processing\/rounds\/ClassDependingOnGenerated.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -152,1 +152,1 @@\n-                    messager.printMessage(Diagnostic.Kind.ERROR, \"problem writing file: \" + e);\n+                    messager.printError(\"problem writing file: \" + e);\n","filename":"test\/langtools\/tools\/javac\/processing\/rounds\/ErrClassSymbolTypeFixed.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-                processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, e.toString());\n+                processingEnv.getMessager().printError(e.toString());\n@@ -82,1 +82,1 @@\n-                processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, e.toString());\n+                processingEnv.getMessager().printError(e.toString());\n","filename":"test\/langtools\/tools\/javac\/processing\/rounds\/GenerateAnonymousClass.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -93,1 +93,1 @@\n-                processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, e.toString());\n+                processingEnv.getMessager().printError(e.toString());\n@@ -109,1 +109,1 @@\n-                processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, e.toString());\n+                processingEnv.getMessager().printError(e.toString());\n","filename":"test\/langtools\/tools\/javac\/processing\/rounds\/OverwriteBetweenCompilations.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -64,2 +64,1 @@\n-            processingEnv.getMessager().printMessage(WARNING,\n-                                                     \"No SourceVersion option given\");\n+            processingEnv.getMessager().printWarning(\"No SourceVersion option given\");\n","filename":"test\/langtools\/tools\/javac\/processing\/warnings\/TestSourceVersionWarnings.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-                messager.printMessage(ERROR, \"error generated per option\");\n+                messager.printError(\"error generated per option\");\n","filename":"test\/langtools\/tools\/javac\/processing\/warnings\/UseImplicit\/TestProcUseImplicitWarning.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-            messager.printMessage(Diagnostic.Kind.WARNING, \"round 1\");\n+            messager.printWarning(\"round 1\");\n","filename":"test\/langtools\/tools\/javac\/processing\/werror\/WError1.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-            messager.printMessage(Diagnostic.Kind.WARNING, \"last round\");\n+            messager.printWarning(\"last round\");\n","filename":"test\/langtools\/tools\/javac\/processing\/werror\/WErrorLast.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-                processingEnv.getMessager().printMessage(Kind.NOTE, s);\n+                processingEnv.getMessager().printNote(s);\n","filename":"test\/langtools\/tools\/javac\/tree\/ArrayTypeToString.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -313,1 +313,1 @@\n-        processingEnv.getMessager().printMessage(Kind.ERROR, text);\n+        processingEnv.getMessager().printError(text);\n@@ -317,1 +317,1 @@\n-        processingEnv.getMessager().printMessage(Kind.NOTE, text);\n+        processingEnv.getMessager().printNote(text);\n","filename":"test\/langtools\/tools\/javac\/tree\/NoPrivateTypesExported.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -102,2 +102,1 @@\n-                messager.printMessage(Diagnostic.Kind.ERROR,\n-                        \"Cannot get source: \" + ex, e);\n+                messager.printError(\"Cannot get source: \" + ex, e);\n@@ -168,1 +167,1 @@\n-                messager.printMessage(Diagnostic.Kind.ERROR, \"start pos not set for \" + trim(tree));\n+                messager.printError(\"start pos not set for \" + trim(tree));\n@@ -174,1 +173,1 @@\n-                messager.printMessage(Diagnostic.Kind.ERROR, \"end pos not set for \" + trim(tree));\n+                messager.printError(\"end pos not set for \" + trim(tree));\n@@ -193,2 +192,2 @@\n-                messager.printMessage(Diagnostic.Kind.ERROR,\n-                        \"unexpected value found: '\" + found + \"'; expected: '\" + expect + \"'\");\n+                messager.printError(\"unexpected value found: '\" + found +\n+                                    \"'; expected: '\" + expect + \"'\");\n","filename":"test\/langtools\/tools\/javac\/tree\/TreePosRoundsTest.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-        messager.printMessage(Diagnostic.Kind.ERROR, msg);\n+        messager.printError(msg);\n@@ -112,1 +112,1 @@\n-        messager.printMessage(Diagnostic.Kind.ERROR, text);\n+        messager.printError(text);\n","filename":"test\/langtools\/tools\/javac\/treeannotests\/TestProcessor.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-        processingEnv.getMessager().printMessage(Kind.NOTE,\"\\n\");\n+        processingEnv.getMessager().printNote(\"\\n\");\n","filename":"test\/langtools\/tools\/javac\/util\/NewlineOnlyDiagnostic.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -118,4 +118,3 @@\n-            messager.printMessage(Diagnostic.Kind.ERROR,\n-                    \"Unexpected value for \" + label\n-                    + \"; expected: \" + expected\n-                    + \"; found: \" + actual);\n+            messager.printError(\"Unexpected value for \" + label\n+                                + \"; expected: \" + expected\n+                                + \"; found: \" + actual);\n","filename":"test\/langtools\/tools\/javac\/util\/T6597678.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"}]}