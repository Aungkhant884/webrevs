{"files":[{"patch":"@@ -138,2 +138,2 @@\n-    protected void bufferedCopy(int dst, int src, long address,\n-                                int size, long addressToPollForCancel)\n+    void bufferedCopy(int dst, int src, long address,\n+                      int size, long addressToPollForCancel)\n@@ -151,1 +151,1 @@\n-    protected int directCopy(int dst, int src, long addressToPollForCancel)\n+    int directCopy(int dst, int src, long addressToPollForCancel)\n","filename":"src\/java.base\/linux\/classes\/sun\/nio\/fs\/LinuxFileSystem.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -151,1 +151,1 @@\n-    return posix_fadvise((int)fd, (off_t)offset, (off_t)len, (int)advice);\n+    return posix_fadvise64((int)fd, (off64_t)offset, (off64_t)len, (int)advice);\n","filename":"src\/java.base\/linux\/native\/libnio\/fs\/LinuxNativeDispatcher.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -115,1 +115,1 @@\n-    protected int directCopy(int dst, int src, long addressToPollForCancel)\n+    int directCopy(int dst, int src, long addressToPollForCancel)\n","filename":"src\/java.base\/macosx\/classes\/sun\/nio\/fs\/BsdFileSystem.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -68,0 +68,6 @@\n+    \/\/ minimum size of a temporary direct buffer\n+    private static final int MIN_BUFFER_SIZE = 16384;\n+\n+    \/\/ whether direct copying is supported on this platform\n+    private static volatile boolean directCopyNotSupported;\n+\n@@ -386,3 +392,0 @@\n-    \/\/ minimum size of a temporary direct buffer\n-    private static final int MIN_BUFFER_SIZE = 16384;\n-\n@@ -427,3 +430,0 @@\n-    \/\/ whether direct copying is supported on this platform\n-    private static volatile boolean directCopyNotSupported;\n-\n@@ -616,1 +616,1 @@\n-    protected int directCopy(int dst, int src, long addressToPollForCancel)\n+    int directCopy(int dst, int src, long addressToPollForCancel)\n@@ -633,2 +633,2 @@\n-    protected void bufferedCopy(int dst, int src, long address,\n-                                int size, long addressToPollForCancel)\n+    void bufferedCopy(int dst, int src, long address,\n+                      int size, long addressToPollForCancel)\n@@ -641,5 +641,5 @@\n-    protected void copyFile(UnixPath source,\n-                            UnixFileAttributes attrs,\n-                            UnixPath  target,\n-                            Flags flags,\n-                            long addressToPollForCancel)\n+    void copyFile(UnixPath source,\n+                  UnixFileAttributes attrs,\n+                  UnixPath  target,\n+                  Flags flags,\n+                  long addressToPollForCancel)\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileSystem.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @bug 4313887 6838333 6917021 7006126 6950237 8006645 8201407 8293121 8267820\n+ * @bug 4313887 6838333 6917021 7006126 6950237 8006645 8201407 8267820\n@@ -43,2 +43,0 @@\n-import java.util.stream.Stream;\n-import java.util.stream.StreamSupport;\n@@ -49,5 +47,0 @@\n-    \/\/ File system types that support copy-on-write (CoW)\n-    \/\/ for testing cloning \/ reflink on Linux\n-    private static final Set<String> COW_TYPES =\n-        Set.of(\"bcachefs\", \"btrfs\", \"ocfs2\", \"xfs\");\n-\n@@ -55,2 +48,0 @@\n-    private static boolean testPosixAttributes = false;\n-\n@@ -58,42 +49,1 @@\n-\n-    \/**\n-     * Returns the secondary test directory as a path name string.\n-     * If the system property \"test.dir\" is definied it is returned.\n-     * Otherwise, if the platform is not Linux, the current directory\n-     * \".\" is returned. If the platform is Linux, then the first\n-     * located top level directory which supports CoW is returned. If\n-     * there is no such directory then \".\" is returned.\n-     *\n-     * @return the path string of the secondary test directory\n-     *\/\n-    private static final String getTestDir() {\n-        final String dot = \".\";\n-        if (!Platform.isLinux()) {\n-            return System.getProperty(\"test.dir\", dot);\n-        }\n-\n-        String testDir = System.getProperty(\"test.dir\");\n-        if (testDir != null) {\n-            return testDir;\n-        }\n-\n-        final Path dotPath = Path.of(dot);\n-        try {\n-            if (COW_TYPES.contains(getFileStore(dotPath).type().toLowerCase())) {\n-                return dot;\n-            }\n-        } catch (IOException ignored) {\n-        }\n-\n-        Spliterator<FileStore> spfs =\n-            FileSystems.getDefault().getFileStores().spliterator();\n-        Stream<FileStore> sfs = StreamSupport.stream(spfs, false);\n-        return sfs.filter(fs -> !fs.isReadOnly() &&\n-                                COW_TYPES.contains(fs.type().toLowerCase()))\n-                  .map(fs -> fs.toString().split(\" \")[0])\n-                  .map(s -> Path.of(s))\n-                  .filter(d -> Files.exists(d) && Files.isDirectory(d))\n-                  .findFirst()\n-                  .orElse(dotPath)\n-                  .toString();\n-    }\n+    private static boolean testPosixAttributes = false;\n@@ -112,3 +62,3 @@\n-            \/\/ Use test.dir to define second directory if possible as it might\n-            \/\/ be a different volume\/file system and so improve test coverage.\n-            String testDir = getTestDir();\n+            \/\/ Different directories. Use test.dir if possible as it might be\n+            \/\/ a different volume\/file system and so improve test coverage.\n+            String testDir = System.getProperty(\"test.dir\", \".\");\n@@ -116,16 +66,0 @@\n-            FileStore fileStore2 = getFileStore(dir2);\n-\n-            \/\/ If different type (format) from dir1, re-do same directory tests\n-            if (!fileStore1.type().equals(fileStore2.type())) {\n-                try {\n-                    printDirInfo(\"dir2\", dir2, fileStore2);\n-                    testPosixAttributes =\n-                        fileStore2.supportsFileAttributeView(\"posix\");\n-                    testCopyFileToFile(dir2, dir2, TestUtil.supportsLinks(dir2));\n-                    testMove(dir2, dir2, TestUtil.supportsLinks(dir2));\n-                } finally {\n-                    TestUtil.removeAll(dir2);\n-                }\n-            }\n-\n-            \/\/ Different directories.\n@@ -133,4 +67,0 @@\n-                \/\/ Recreate dir2 if it was removed above\n-                if (notExists(dir2)) {\n-                    dir2 = TestUtil.createTemporaryDirectory(testDir);\n-                }\n@@ -139,0 +69,1 @@\n+                FileStore fileStore2 = getFileStore(dir2);\n","filename":"test\/jdk\/java\/nio\/file\/Files\/CopyAndMove.java","additions":6,"deletions":75,"binary":false,"changes":81,"status":"modified"}]}