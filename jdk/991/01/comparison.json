{"files":[{"patch":"@@ -257,0 +257,1 @@\n+java\/awt\/image\/DrawImage\/BlitRotateClippedArea.java 8255724 linux-all\n","filename":"test\/jdk\/ProblemList.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,142 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.AlphaComposite;\n+import java.awt.Color;\n+import java.awt.Graphics2D;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.Image;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+\n+import javax.imageio.ImageIO;\n+\n+import static java.awt.Transparency.TRANSLUCENT;\n+\n+\/**\n+ * @test\n+ * @bug 8255722\n+ * @key headful\n+ *\/\n+public class BlitRotateClippedArea {\n+\n+    \/**\n+     * The test use case:\n+     * 1. The destination image is created of size 1000x1000\n+     * 2. The source image is created of size 2000x2000\n+     * 3. The source image is painted by the pattern outsize of 1000x1000\n+     * 4. If the source image is painted as-is to the destination then the\n+     *    pattern in the source will be ignored, but the test sets some\n+     *    specific rotation that the pattern will hit the source.\n+     * Note that rotation is used not a scale\/translate.\n+     *\/\n+    public static void main(String[] args) throws Exception {\n+        \/\/ the test check the exact pixels location\n+        System.setProperty(\"sun.java2d.uiScale\", \"1\");\n+        var ge = GraphicsEnvironment.getLocalGraphicsEnvironment();\n+        var gc = ge.getDefaultScreenDevice().getDefaultConfiguration();\n+\n+        var gold = gc.createCompatibleImage(1000, 1000, TRANSLUCENT);\n+        var dstVI2BI = gc.createCompatibleImage(1000, 1000, TRANSLUCENT);\n+        var dstVI2VI = gc.createCompatibleVolatileImage(1000, 1000, TRANSLUCENT);\n+        var dstBI2VI = gc.createCompatibleVolatileImage(1000, 1000, TRANSLUCENT);\n+\n+        var srcBI = gc.createCompatibleImage(2000, 2000, TRANSLUCENT);\n+        var srcVI = gc.createCompatibleVolatileImage(2000, 2000, TRANSLUCENT);\n+\n+        int attempt = 0;\n+        BufferedImage snapshotVI2VI;\n+        BufferedImage snapshotBI2VI;\n+        do {\n+            if (++attempt > 10) {\n+                throw new RuntimeException(\"Too many attempts: \" + attempt);\n+            }\n+            dstVI2VI.validate(gc);\n+            dstBI2VI.validate(gc);\n+            srcVI.validate(gc);\n+\n+            fill(srcBI);\n+            fill(srcVI);\n+\n+            init(gold);\n+            init(dstVI2BI);\n+            init(dstVI2VI);\n+            init(dstBI2VI);\n+\n+            draw(gold, srcBI);\n+            draw(dstVI2BI, srcVI);\n+            draw(dstVI2VI, srcVI);\n+            draw(dstBI2VI, srcBI);\n+\n+            snapshotVI2VI = dstVI2VI.getSnapshot();\n+            snapshotBI2VI = dstBI2VI.getSnapshot();\n+        } while (dstVI2VI.contentsLost() || dstBI2VI.contentsLost()\n+                || srcVI.contentsLost());\n+\n+        validate(gold, snapshotVI2VI);\n+        validate(gold, snapshotBI2VI);\n+        validate(gold, dstVI2BI);\n+    }\n+\n+    private static void validate(BufferedImage gold, BufferedImage img)\n+            throws IOException {\n+        for (int x = 0; x < gold.getWidth(); ++x) {\n+            for (int y = 0; y < gold.getHeight(); ++y) {\n+                if (gold.getRGB(x, y) != img.getRGB(x, y)) {\n+                    ImageIO.write(gold, \"png\", new File(\"gold.png\"));\n+                    ImageIO.write(img, \"png\", new File(\"snapshot.png\"));\n+                    throw new RuntimeException(\"Test failed.\");\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void draw(Image dstBI, Image src) {\n+        Graphics2D g = (Graphics2D) dstBI.getGraphics();\n+        g.rotate(Math.toRadians(180), 1250, 1150);\n+        g.drawImage(src, 0, 0, null);\n+        g.dispose();\n+    }\n+\n+    private static void init(Image image) {\n+        Graphics2D graphics = (Graphics2D) image.getGraphics();\n+        graphics.setComposite(AlphaComposite.Src);\n+        graphics.setColor(Color.YELLOW);\n+        graphics.fillRect(0, 0, image.getWidth(null), image.getHeight(null));\n+        graphics.dispose();\n+    }\n+\n+    private static void fill(Image image) {\n+        Graphics2D graphics = (Graphics2D) image.getGraphics();\n+        graphics.setComposite(AlphaComposite.Src);\n+        for (int x = 1000; x < image.getWidth(null); ++x) {\n+            for (int y = 1000; y < image.getHeight(null); ++y) {\n+                graphics.setColor(new Color(x % 256, 0, y % 256, 125));\n+                graphics.fillRect(x, y, 1, 1);\n+            }\n+        }\n+        graphics.dispose();\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/awt\/image\/DrawImage\/BlitRotateClippedArea.java","additions":142,"deletions":0,"binary":false,"changes":142,"status":"added"}]}