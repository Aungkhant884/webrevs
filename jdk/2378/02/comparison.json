{"files":[{"patch":"@@ -1052,0 +1052,4 @@\n+  if (*p == '[') {\n+    \/\/ Disallow array classes\n+    return NULL;\n+  }\n@@ -1053,0 +1057,4 @@\n+    if (*p == '\/') {\n+      \/\/ Disallow slashes in input\n+      return NULL;\n+    }\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1258,2 +1258,0 @@\n-        if (!checkName(name)) return null;\n-\n@@ -1281,2 +1279,0 @@\n-        if (!checkName(name))\n-            return null;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ClassLoader.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -41,4 +41,0 @@\n-\/* defined in libverify.so\/verify.dll (src file common\/check_format.c) *\/\n-extern jboolean VerifyClassname(char *utf_name, jboolean arrayAllowed);\n-extern jboolean VerifyFixClassname(char *utf_name);\n-\n@@ -131,2 +127,3 @@\n-    if (verifyFixClassname(clname) == JNI_TRUE) {\n-        \/* slashes present in clname, use name b4 translation for exception *\/\n+    if (!verifyFixClassname(clname, JNI_TRUE)) {\n+        \/\/ invalid UTF-8 or slashes present in clname,\n+        \/\/ use name before translation for exception\n@@ -138,5 +135,0 @@\n-    if (!verifyClassname(clname, JNI_TRUE)) {  \/* expects slashed name *\/\n-        JNU_ThrowClassNotFoundException(env, clname);\n-        goto done;\n-    }\n-\n","filename":"src\/java.base\/share\/native\/libjava\/Class.c","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -83,1 +83,1 @@\n-    char *utfName;\n+    char *utfName = NULL;\n@@ -112,1 +112,1 @@\n-        goto free_body;\n+        goto done;\n@@ -117,1 +117,1 @@\n-            goto free_body;\n+            goto done;\n@@ -127,1 +127,1 @@\n-            goto free_utfName;\n+            goto done;\n@@ -134,1 +134,1 @@\n-    if (utfSource && utfSource != sourceBuf)\n+    if (utfSource != sourceBuf)\n@@ -137,2 +137,2 @@\n- free_utfName:\n-    if (utfName && utfName != buf)\n+ done:\n+    if (utfName != buf)\n@@ -141,1 +141,0 @@\n- free_body:\n@@ -193,1 +192,1 @@\n-            goto free_utfName;\n+            goto done;\n@@ -200,1 +199,1 @@\n-    if (utfSource && utfSource != sourceBuf)\n+    if (utfSource != sourceBuf)\n@@ -203,2 +202,2 @@\n- free_utfName:\n-    if (utfName && utfName != buf)\n+ done:\n+    if (utfName != buf)\n@@ -251,1 +250,1 @@\n-        goto free_body;\n+        goto done;\n@@ -256,1 +255,1 @@\n-            goto free_body;\n+            goto done;\n@@ -265,1 +264,1 @@\n-    if (utfName && utfName != buf)\n+    if (utfName != buf)\n@@ -268,1 +267,1 @@\n- free_body:\n+ done:\n@@ -293,3 +292,2 @@\n-    fixClassname(clname);\n-\n-    if (!verifyClassname(clname, JNI_TRUE)) {  \/* expects slashed name *\/\n+    \/\/ disallow array classes and slashes in input, change '.' to '\/'\n+    if (!verifyFixClassname(clname, JNI_FALSE)) {\n","filename":"src\/java.base\/share\/native\/libjava\/ClassLoader.c","additions":18,"deletions":20,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -227,1 +227,1 @@\n-\/* Determine if the specified name is legal\n+\/* Translates '.' to '\/', then determines if the specified name is a legal\n@@ -230,2 +230,1 @@\n- * Note that this routine expects the internal form of qualified classes:\n- * the dots should have been replaced by slashes.\n+ * Returns JNI_FALSE if any \/ were present before translation,\n@@ -233,1 +232,1 @@\n-jboolean verifyClassname(char *name, jboolean allowArrayClass)\n+jboolean verifyFixClassname(char *name, jboolean allowArrayClass)\n@@ -235,0 +234,4 @@\n+    char *p = name;\n+    jboolean slashesFound = JNI_FALSE;\n+    int valid = 1;\n+\n@@ -238,1 +241,9 @@\n-    char *p;\n+\n+    \/\/ check for slashes, converting any '.'s to '\/'\n+    for (unsigned int i = 0; i < length; i++) {\n+        if (p[i] == '\/') {\n+            return JNI_FALSE;\n+        } else if (p[i] == '.') {\n+            p[i] = '\/';\n+        }\n+    }\n@@ -254,23 +265,0 @@\n-\/*\n- * Translates '.' to '\/'.  Returns JNI_TRUE if any \/ were present.\n- *\/\n-jboolean verifyFixClassname(char *name)\n-{\n-    char *p = name;\n-    jboolean slashesFound = JNI_FALSE;\n-    int valid = 1;\n-\n-    while (valid != 0 && *p != '\\0') {\n-        if (*p == '\/') {\n-            slashesFound = JNI_TRUE;\n-            p++;\n-        } else if (*p == '.') {\n-            *p++ = '\/';\n-        } else {\n-            next_utf2unicode(&p, &valid);\n-        }\n-    }\n-\n-    return slashesFound && valid != 0;\n-}\n-\n","filename":"src\/java.base\/share\/native\/libjava\/check_classname.c","additions":16,"deletions":28,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -31,3 +31,1 @@\n-\n-jboolean verifyClassname(char *name, jboolean allowArrayClass);\n-jboolean verifyFixClassname(char *name);\n+jboolean verifyFixClassname(char *name, jboolean allowArrayClass);\n","filename":"src\/java.base\/share\/native\/libjava\/check_classname.h","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"}]}