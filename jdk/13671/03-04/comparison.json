{"files":[{"patch":"@@ -32,1 +32,1 @@\n-import java.util.LinkedList;\n+import java.util.ArrayList;\n@@ -56,2 +56,2 @@\n-        shared = new LinkedList<>();\n-        unshared = new LinkedList<>();\n+        shared = new ArrayList<>();\n+        unshared = new ArrayList<>();\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/RebuildMethodBodies.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.jdk.classfile;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.util.Iterator;\n+import java.util.LinkedList;\n+import java.util.List;\n+import jdk.internal.classfile.ClassModel;\n+import jdk.internal.classfile.Classfile;\n+import jdk.internal.classfile.components.ClassPrinter;\n+import org.openjdk.jmh.annotations.*;\n+\n+@BenchmarkMode(Mode.Throughput)\n+@State(Scope.Benchmark)\n+@Fork(value = 1, jvmArgsAppend = {\n+        \"--enable-preview\",\n+        \"--add-exports\", \"java.base\/jdk.internal.classfile=ALL-UNNAMED\",\n+        \"--add-exports\", \"java.base\/jdk.internal.classfile.components=ALL-UNNAMED\"})\n+@Warmup(iterations = 3)\n+@Measurement(iterations = 4)\n+public class RepeatedModelTraversal {\n+\n+    List<ClassModel> models;\n+    Iterator<ClassModel> it;\n+\n+    @Setup(Level.Trial)\n+    public void setup() throws IOException {\n+        models = new LinkedList<>();\n+        Files.walk(FileSystems.getFileSystem(URI.create(\"jrt:\/\")).getPath(\"modules\/java.base\/java\/util\")).forEach(p ->  {\n+            if (Files.isRegularFile(p) && p.toString().endsWith(\".class\")) try {\n+                var clm = Classfile.parse(p);\n+                models.add(clm);\n+            } catch (IOException e) {\n+                throw new RuntimeException(e);\n+            }\n+        });\n+    }\n+\n+    @Benchmark\n+    public void traverseModel() {\n+        if (it == null || !it.hasNext())\n+            it = models.iterator();\n+        ClassPrinter.toTree(it.next(), ClassPrinter.Verbosity.TRACE_ALL);\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/classfile\/RepeatedModelTraversal.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"}]}