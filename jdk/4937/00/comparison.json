{"files":[{"patch":"@@ -40,0 +40,1 @@\n+import java.util.Arrays;\n@@ -53,2 +54,4 @@\n-    static int nx = 3;\n-    static int ny = 3;\n+    private static final int nx = 3;\n+    private static final int ny = 3;\n+\n+    private static final int[] focusCnt = new int[nx * ny];\n@@ -56,1 +59,0 @@\n-    static int focusCnt[] = new int[nx * ny];\n@@ -58,0 +60,1 @@\n+    private static Robot robot;\n@@ -60,0 +63,2 @@\n+        robot = new Robot();\n+        robot.setAutoDelay(100);\n@@ -61,12 +66,15 @@\n-        try {\n-            SwingUtilities.invokeAndWait(() -> changeLAF());\n-            SwingUtilities.invokeAndWait(() -> initLayout(nx, ny));\n-            Robot robot = new Robot();\n-            robot.setAutoDelay(100);\n-            robot.waitForIdle();\n-            robot.delay(1000);\n-\n-            for (int i = 0; i < nx * ny - nx * ny \/ 2 - 1; i++) {\n-                robot.keyPress(KeyEvent.VK_RIGHT);\n-                robot.keyRelease(KeyEvent.VK_RIGHT);\n-                robot.waitForIdle();\n+        for (UIManager.LookAndFeelInfo laf : UIManager.getInstalledLookAndFeels()) {\n+            try {\n+                SwingUtilities.invokeAndWait(() -> setLookAndFeel(laf));\n+                SwingUtilities.invokeAndWait(() -> initLayout(nx, ny));\n+                test();\n+            } finally {\n+                SwingUtilities.invokeAndWait(() -> {\n+                    if (window != null) {\n+                        window.dispose();\n+                    }\n+                    window = null;\n+                    synchronized (focusCnt) {\n+                        Arrays.fill(focusCnt, 0);\n+                    }\n+                });\n@@ -74,0 +82,2 @@\n+        }\n+    }\n@@ -75,5 +85,0 @@\n-            for (int i = 0; i < nx * ny \/ 2; i++) {\n-                robot.keyPress(KeyEvent.VK_TAB);\n-                robot.keyRelease(KeyEvent.VK_TAB);\n-                robot.waitForIdle();\n-            }\n@@ -81,1 +86,15 @@\n-            robot.delay(200);\n+    private static void test() {\n+        robot.waitForIdle();\n+        robot.delay(1000);\n+\n+        for (int i = 0; i < nx * ny - nx * ny \/ 2 - 1; i++) {\n+            robot.keyPress(KeyEvent.VK_RIGHT);\n+            robot.keyRelease(KeyEvent.VK_RIGHT);\n+            robot.waitForIdle();\n+        }\n+\n+        for (int i = 0; i < nx * ny \/ 2; i++) {\n+            robot.keyPress(KeyEvent.VK_TAB);\n+            robot.keyRelease(KeyEvent.VK_TAB);\n+            robot.waitForIdle();\n+        }\n@@ -83,0 +102,3 @@\n+        robot.delay(200);\n+\n+        synchronized (focusCnt) {\n@@ -86,1 +108,1 @@\n-                        + \" is not reachable in the forward focus cycle\");\n+                            + \" is not reachable in the forward focus cycle\");\n@@ -89,1 +111,1 @@\n-                        + \" got focus more than once in the forward focus cycle\");\n+                            + \" got focus more than once in the forward focus cycle\");\n@@ -92,0 +114,1 @@\n+        }\n@@ -93,14 +116,1 @@\n-            for (int i = 0; i < nx * ny \/ 2; i++) {\n-                robot.keyPress(KeyEvent.VK_SHIFT);\n-                robot.keyPress(KeyEvent.VK_TAB);\n-                robot.keyRelease(KeyEvent.VK_TAB);\n-                robot.keyRelease(KeyEvent.VK_SHIFT);\n-                robot.waitForIdle();\n-            }\n-\n-            for (int i = 0; i < nx * ny - nx * ny \/ 2 - 1; i++) {\n-                robot.keyPress(KeyEvent.VK_LEFT);\n-                robot.keyRelease(KeyEvent.VK_LEFT);\n-                robot.waitForIdle();\n-            }\n-\n+        for (int i = 0; i < nx * ny \/ 2; i++) {\n@@ -112,0 +122,1 @@\n+        }\n@@ -113,1 +124,5 @@\n-            robot.delay(200);\n+        for (int i = 0; i < nx * ny - nx * ny \/ 2 - 1; i++) {\n+            robot.keyPress(KeyEvent.VK_LEFT);\n+            robot.keyRelease(KeyEvent.VK_LEFT);\n+            robot.waitForIdle();\n+        }\n@@ -115,0 +130,9 @@\n+        robot.keyPress(KeyEvent.VK_SHIFT);\n+        robot.keyPress(KeyEvent.VK_TAB);\n+        robot.keyRelease(KeyEvent.VK_TAB);\n+        robot.keyRelease(KeyEvent.VK_SHIFT);\n+        robot.waitForIdle();\n+\n+        robot.delay(200);\n+\n+        synchronized (focusCnt) {\n@@ -118,1 +142,1 @@\n-                        + \" is not reachable in the backward focus cycle\");\n+                            + \" is not reachable in the backward focus cycle\");\n@@ -121,1 +145,1 @@\n-                        + \" got focus more than once in the backward focus cycle\");\n+                            + \" got focus more than once in the backward focus cycle\");\n@@ -124,6 +148,0 @@\n-        } finally {\n-            SwingUtilities.invokeAndWait(() -> {\n-                if (window != null) {\n-                    window.dispose();\n-                }\n-            });\n@@ -131,0 +149,1 @@\n+\n@@ -133,12 +152,9 @@\n-    private static void changeLAF() {\n-        String currentLAF = UIManager.getLookAndFeel().toString();\n-        currentLAF = currentLAF.toLowerCase();\n-        if (currentLAF.contains(\"aqua\") || currentLAF.contains(\"nimbus\")) {\n-            try {\n-                UIManager.setLookAndFeel(\"javax.swing.plaf.metal.MetalLookAndFeel\");\n-            } catch (ClassNotFoundException\n-                    | IllegalAccessException\n-                    | InstantiationException\n-                    | UnsupportedLookAndFeelException ex) {\n-                ex.printStackTrace();\n-            }\n+    private static void setLookAndFeel(UIManager.LookAndFeelInfo laf) {\n+        try {\n+            UIManager.setLookAndFeel(laf.getClassName());\n+            System.out.println(laf.getName());\n+        } catch (UnsupportedLookAndFeelException ignored){\n+            System.out.println(\"Unsupported LookAndFeel: \" + laf.getClassName());\n+        } catch (ClassNotFoundException | InstantiationException |\n+                         IllegalAccessException e) {\n+            throw new RuntimeException(e);\n@@ -171,10 +187,10 @@\n-                    focusCnt[fi]++;\n-                    if (focusCnt[fi] == 1) {\n-                        ((JComponent) e.getSource())\n-                                .setBackground(Color.yellow);\n-                    } else if (focusCnt[fi] == 2) {\n-                        ((JComponent) e.getSource())\n-                                .setBackground(Color.green);\n-                    } else {\n-                        ((JComponent) e.getSource())\n-                                .setBackground(Color.red);\n+                    synchronized (focusCnt) {\n+                        focusCnt[fi]++;\n+                        JComponent btn = (JComponent) e.getSource();\n+                        if (focusCnt[fi] == 1) {\n+                            btn.setBackground(Color.yellow);\n+                        } else if (focusCnt[fi] == 2) {\n+                            btn.setBackground(Color.green);\n+                        } else {\n+                            btn.setBackground(Color.red);\n+                        }\n","filename":"test\/jdk\/java\/awt\/Focus\/FocusTraversalPolicy\/ButtonGroupLayoutTraversal\/ButtonGroupLayoutTraversalTest.java","additions":84,"deletions":68,"binary":false,"changes":152,"status":"modified"}]}