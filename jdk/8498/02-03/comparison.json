{"files":[{"patch":"@@ -1619,0 +1619,4 @@\n+      if (!VM_Version::supports_bmi2() || (!is_LP64 && UseSSE < 2)) {\n+        return false;\n+      }\n+      break;\n@@ -1620,1 +1624,1 @@\n-      if (!VM_Version::supports_bmi2()) {\n+      if (!VM_Version::supports_bmi2() || (!is_LP64 && (UseSSE < 2 || !VM_Version::supports_bmi1()))) {\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -11478,1 +11478,1 @@\n-instruct compressBitsL_reg(eADXRegL dst, eBCXRegL src, eBDPRegL mask, eSIRegI rtmp, regF xtmp) %{\n+instruct compressBitsL_reg(eADXRegL dst, eBCXRegL src, eBDPRegL mask, eSIRegI rtmp, regF xtmp, eFlagsReg cr) %{\n@@ -11481,2 +11481,2 @@\n-  effect(TEMP rtmp, TEMP xtmp);\n-  format %{ \"compress_bits32 $dst, $src, $mask\\t! using $rtmp and $xtmp as TEMP\" %}\n+  effect(TEMP rtmp, TEMP xtmp, KILL cr);\n+  format %{ \"compress_bits $dst, $src, $mask\\t! using $rtmp and $xtmp as TEMP\" %}\n@@ -11494,1 +11494,1 @@\n-    \/\/ Due to constraint on number of GPRs on 32 bit target, using XMM registers as potential spill slots.\n+    \/\/ Due to constraint on number of GPRs on 32 bit target, using XMM register as potential spill slot.\n@@ -11519,1 +11519,1 @@\n-instruct expandBitsL_reg(eADXRegL dst, eBCXRegL src, eBDPRegL mask, eSIRegI rtmp, regF xtmp) %{\n+instruct expandBitsL_reg(eADXRegL dst, eBCXRegL src, eBDPRegL mask, eSIRegI rtmp, regF xtmp, eFlagsReg cr) %{\n@@ -11522,2 +11522,2 @@\n-  effect(TEMP rtmp, TEMP xtmp);\n-  format %{ \"expand_bits32 $dst, $src, $mask\\t! using $rtmp and $xtmp as TEMP\" %}\n+  effect(TEMP rtmp, TEMP xtmp, KILL cr);\n+  format %{ \"expand_bits $dst, $src, $mask\\t! using $rtmp and $xtmp as TEMP\" %}\n@@ -11537,1 +11537,1 @@\n-    \/\/ Due to constraint on number of GPRs on 32 bit target, using XMM registers as potential spill slots.\n+    \/\/ Due to constraint on number of GPRs on 32 bit target, using XMM register as potential spill slot.\n","filename":"src\/hotspot\/cpu\/x86\/x86_32.ad","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -236,2 +236,0 @@\n-     src = w == 32 ? src & 0xFFFFFFFFL : src;\n-     mask = w == 32 ? mask & 0xFFFFFFFFL : mask;\n@@ -245,1 +243,2 @@\n-     return TypeInteger::make(res, res, w, bt);\n+     return bt == T_INT ? static_cast<const Type*>(TypeInt::make(res)) :\n+                          static_cast<const Type*>(TypeLong::make(res));\n@@ -266,2 +265,0 @@\n-     src = w == 32 ? src & 0xFFFFFFFFL : src;\n-     mask = w == 32 ? mask & 0xFFFFFFFFL : mask;\n@@ -275,1 +272,2 @@\n-     return TypeInteger::make(res, res, w, bt);\n+     return bt == T_INT ? static_cast<const Type*>(TypeInt::make(res)) :\n+                          static_cast<const Type*>(TypeLong::make(res));\n","filename":"src\/hotspot\/share\/opto\/intrinsicnode.cpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -247,1 +247,1 @@\n-        verifyCompressInt(ri, ai, bi);\n+        verifyCompressInts(ri, ai, bi);\n@@ -263,1 +263,1 @@\n-        verifyCompressLong(rl, al, bl);\n+        verifyCompressLongs(rl, al, bl);\n@@ -279,1 +279,1 @@\n-        verifyExpandInt(ri, ai, bi);\n+        verifyExpandInts(ri, ai, bi);\n@@ -295,1 +295,28 @@\n-        verifyExpandLong(rl, al, bl);\n+        verifyExpandLongs(rl, al, bl);\n+    }\n+\n+    @Test\n+    public void test17() {\n+        int resI = 0;\n+        long resL = 0L;\n+        for (int i = 0; i < 10000; i++) {\n+           resI = Integer.expand(-1, -1);\n+           verifyExpandInt(resI, -1, -1);\n+           resI = Integer.compress(-1, -1);\n+           verifyCompressInt(resI, -1, -1);\n+\n+           resI = Integer.compress(0x12123434, 0xFF00FF00);\n+           verifyCompressInt(resI, 0x12123434, 0xFF00FF00);\n+           resI = Integer.expand(0x12123434, 0xFF00FF00);\n+           verifyExpandInt(resI, 0x12123434, 0xFF00FF00);\n+\n+           resL = Long.expand(-1L, -1L);\n+           verifyExpandLong(resL, -1L, -1L);\n+           resL = Long.compress(-1L, -1L);\n+           verifyCompressLong(resL, -1L, -1L);\n+\n+           resL = Long.compress(0x1212343412123434L, 0xFF00FF00FF00FF00L);\n+           verifyCompressLong(resL, 0x1212343412123434L, 0xFF00FF00FF00FF00L);\n+           resL = Long.expand(0x1212343412123434L, 0xFF00FF00FF00FF00L);\n+           verifyExpandLong(resL, 0x1212343412123434L, 0xFF00FF00FF00FF00L);\n+        }\n@@ -323,13 +350,6 @@\n-    static void verifyExpandInt(int [] actual_res, int [] inp_arr, int [] mask_arr) {\n-        assert inp_arr.length == mask_arr.length && inp_arr.length == actual_res.length;\n-        int [] exp_res = new int[inp_arr.length];\n-        for (int i = 0 ; i < inp_arr.length; i++) {\n-            int exp = 0;\n-            int src = inp_arr[i];\n-            int mask = mask_arr[i];\n-            for(int j = 0, k = 0; j < Integer.SIZE; j++) {\n-                if ((mask & 0x1) == 1) {\n-                    exp |= (src & 0x1) <<  j;\n-                    src >>= 1;\n-                }\n-                mask >>= 1;\n+    static void verifyExpandInt(int actual, int src, int mask) {\n+        int exp = 0;\n+        for(int j = 0, k = 0; j < Integer.SIZE; j++) {\n+            if ((mask & 0x1) == 1) {\n+                exp |= (src & 0x1) <<  j;\n+                src >>= 1;\n@@ -337,1 +357,1 @@\n-            exp_res[i] = exp;\n+            mask >>= 1;\n@@ -339,0 +359,5 @@\n+        if (actual != exp) {\n+            throw new Error(\"expand_int: src = \" + src + \" mask = \" + mask +\n+                            \" acutal = \" + actual + \" expected = \" + exp);\n+        }\n+    }\n@@ -340,0 +365,2 @@\n+    static void verifyExpandInts(int [] actual_res, int [] inp_arr, int [] mask_arr) {\n+        assert inp_arr.length == mask_arr.length && inp_arr.length == actual_res.length;\n@@ -341,4 +368,1 @@\n-            if (actual_res[i] != exp_res[i]) {\n-                throw new Error(\"expand_int: src = \" + inp_arr[i] + \" mask = \" + mask_arr[i] +\n-                                \" acutal = \" + actual_res[i] + \" expected = \" + exp_res[i]);\n-            }\n+            verifyExpandInt(actual_res[i], inp_arr[i], mask_arr[i]);\n@@ -348,13 +372,6 @@\n-    static void verifyExpandLong(long [] actual_res, long [] inp_arr, long [] mask_arr) {\n-        assert inp_arr.length == mask_arr.length && inp_arr.length == actual_res.length;\n-        long [] exp_res = new long[inp_arr.length];\n-        for (int i = 0 ; i < inp_arr.length; i++) {\n-            long exp = 0;\n-            long src = inp_arr[i];\n-            long mask = mask_arr[i];\n-            for(int j = 0, k = 0; j < Long.SIZE; j++) {\n-                if ((mask & 0x1) == 1) {\n-                    exp |= (src & 0x1) <<  j;\n-                    src >>= 1;\n-                }\n-                mask >>= 1;\n+    static void verifyExpandLong(long actual, long src, long mask) {\n+        long exp = 0;\n+        for(int j = 0, k = 0; j < Long.SIZE; j++) {\n+            if ((mask & 0x1) == 1) {\n+                exp |= (src & 0x1) <<  j;\n+                src >>= 1;\n@@ -362,1 +379,1 @@\n-            exp_res[i] = exp;\n+            mask >>= 1;\n@@ -364,0 +381,5 @@\n+        if (actual != exp) {\n+            throw new Error(\"expand_long: src = \" + src + \" mask = \" + mask +\n+                            \" acutal = \" + actual + \" expected = \" + exp);\n+        }\n+    }\n@@ -365,0 +387,2 @@\n+    static void verifyExpandLongs(long [] actual_res, long [] inp_arr, long [] mask_arr) {\n+        assert inp_arr.length == mask_arr.length && inp_arr.length == actual_res.length;\n@@ -366,4 +390,1 @@\n-            if (actual_res[i] != exp_res[i]) {\n-                throw new Error(\"expand_long: src = \" + inp_arr[i] + \" mask = \" + mask_arr[i] +\n-                                \" acutal = \" + actual_res[i] + \" expected = \" + exp_res[i]);\n-            }\n+            verifyExpandLong(actual_res[i], inp_arr[i], mask_arr[i]);\n@@ -373,13 +394,5 @@\n-    static void verifyCompressInt(int [] actual_res, int [] inp_arr, int [] mask_arr) {\n-        assert inp_arr.length == mask_arr.length && inp_arr.length == actual_res.length;\n-        int [] exp_res = new int[inp_arr.length];\n-        for (int i = 0 ; i < inp_arr.length; i++) {\n-            int exp = 0;\n-            int src = inp_arr[i];\n-            int mask = mask_arr[i];\n-            for(int j = 0, k = 0; j < Integer.SIZE; j++) {\n-                if ((mask & 0x1) == 1) {\n-                    exp |= (src & 0x1) <<  k++;\n-                }\n-                mask >>= 1;\n-                src >>= 1;\n+    static void verifyCompressInt(int actual, int src, int mask) {\n+        int exp = 0;\n+        for(int j = 0, k = 0; j < Integer.SIZE; j++) {\n+            if ((mask & 0x1) == 1) {\n+                exp |= (src & 0x1) <<  k++;\n@@ -387,1 +400,2 @@\n-            exp_res[i] = exp;\n+            mask >>= 1;\n+            src >>= 1;\n@@ -389,0 +403,5 @@\n+        if (actual != exp) {\n+            throw new Error(\"compress_int: src = \" + src + \" mask = \" + mask +\n+                            \" acutal = \" + actual + \" expected = \" + exp);\n+        }\n+    }\n@@ -390,0 +409,2 @@\n+    static void verifyCompressInts(int [] actual_res, int [] inp_arr, int [] mask_arr) {\n+        assert inp_arr.length == mask_arr.length && inp_arr.length == actual_res.length;\n@@ -391,4 +412,1 @@\n-            if (actual_res[i] != exp_res[i]) {\n-                throw new Error(\"compress_int: src = \" + inp_arr[i] + \" mask = \" + mask_arr[i] +\n-                                \" acutal = \" + actual_res[i] + \" expected = \" + exp_res[i]);\n-            }\n+            verifyCompressInt(actual_res[i], inp_arr[i], mask_arr[i]);\n@@ -398,13 +416,5 @@\n-    static void verifyCompressLong(long [] actual_res, long [] inp_arr, long [] mask_arr) {\n-        assert inp_arr.length == mask_arr.length && inp_arr.length == actual_res.length;\n-        long [] exp_res = new long[inp_arr.length];\n-        for (int i = 0 ; i < inp_arr.length; i++) {\n-            long exp = 0;\n-            long src = inp_arr[i];\n-            long mask = mask_arr[i];\n-            for(int j = 0, k = 0; j < Long.SIZE; j++) {\n-                if ((mask & 0x1) == 1) {\n-                    exp |= (src & 0x1) <<  k++;\n-                }\n-                mask >>= 1;\n-                src >>= 1;\n+    static void verifyCompressLong(long actual, long src, long mask) {\n+        long exp = 0;\n+        for(int j = 0, k = 0; j < Long.SIZE; j++) {\n+            if ((mask & 0x1) == 1) {\n+                exp |= (src & 0x1) <<  k++;\n@@ -412,1 +422,2 @@\n-            exp_res[i] = exp;\n+            mask >>= 1;\n+            src >>= 1;\n@@ -414,0 +425,5 @@\n+        if (actual != exp) {\n+            throw new Error(\"compress_long: src = \" + src + \" mask = \" + mask +\n+                            \" acutal = \" + actual + \" expected = \" + exp);\n+        }\n+    }\n@@ -415,0 +431,2 @@\n+    static void verifyCompressLongs(long [] actual_res, long [] inp_arr, long [] mask_arr) {\n+        assert inp_arr.length == mask_arr.length && inp_arr.length == actual_res.length;\n@@ -416,4 +434,1 @@\n-            if (actual_res[i] != exp_res[i]) {\n-                throw new Error(\"compress_long: src = \" + inp_arr[i] + \" mask = \" + mask_arr[i] +\n-                                \" acutal = \" + actual_res[i] + \" expected = \" + exp_res[i]);\n-            }\n+            verifyCompressLong(actual_res[i], inp_arr[i], mask_arr[i]);\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/TestBitShuffleOpers.java","additions":91,"deletions":76,"binary":false,"changes":167,"status":"modified"}]}