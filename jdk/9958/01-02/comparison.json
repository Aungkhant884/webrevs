{"files":[{"patch":"@@ -1,586 +0,0 @@\n-\/*\n- * Copyright (c) 2022 Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @library \/test\/lib\n- * @modules java.base\/sun.net:+open\n- *          java.base\/sun.net.www.http:+open\n- *          java.base\/sun.net.www:+open\n- *          java.base\/sun.net.www.protocol.http:+open\n- * @run main\/othervm KeepAliveTest 0\n- * @run main\/othervm KeepAliveTest 1\n- * @run main\/othervm KeepAliveTest 2\n- * @run main\/othervm KeepAliveTest 3\n- * @run main\/othervm KeepAliveTest 4\n- * @run main\/othervm KeepAliveTest 5\n- * @run main\/othervm KeepAliveTest 6\n- * @run main\/othervm KeepAliveTest 7\n- * @run main\/othervm KeepAliveTest 8\n- * @run main\/othervm KeepAliveTest 9\n- * @run main\/othervm KeepAliveTest 10\n- * @run main\/othervm KeepAliveTest 11\n- * @run main\/othervm KeepAliveTest 12\n- * @run main\/othervm KeepAliveTest 13\n- * @run main\/othervm KeepAliveTest 14\n- * @run main\/othervm KeepAliveTest 15\n- * @run main\/othervm KeepAliveTest 16\n- * @run main\/othervm KeepAliveTest 17\n- * @run main\/othervm KeepAliveTest 18\n- * @run main\/othervm KeepAliveTest 19\n- * @run main\/othervm KeepAliveTest 20\n- * @run main\/othervm KeepAliveTest 21\n- * @run main\/othervm KeepAliveTest 22\n- * @run main\/othervm KeepAliveTest 23\n- * @run main\/othervm KeepAliveTest 24\n- * @run main\/othervm KeepAliveTest 25\n- * @run main\/othervm KeepAliveTest 26\n- * @run main\/othervm KeepAliveTest 27\n- * @run main\/othervm KeepAliveTest 28\n- * @run main\/othervm KeepAliveTest 29\n- * @run main\/othervm KeepAliveTest 30\n- * @run main\/othervm KeepAliveTest 31\n- * @run main\/othervm KeepAliveTest 32\n- * @run main\/othervm KeepAliveTest 33\n- * @run main\/othervm KeepAliveTest 34\n- * @run main\/othervm KeepAliveTest 35\n- * @run main\/othervm KeepAliveTest 36\n- * @run main\/othervm KeepAliveTest 37\n- * @run main\/othervm KeepAliveTest 38\n- * @run main\/othervm KeepAliveTest 39\n- * @run main\/othervm KeepAliveTest 40\n- * @run main\/othervm KeepAliveTest 41\n- * @run main\/othervm KeepAliveTest 42\n- * @run main\/othervm KeepAliveTest 43\n- * @run main\/othervm KeepAliveTest 44\n- * @run main\/othervm KeepAliveTest 45\n- * @run main\/othervm KeepAliveTest 46\n- * @run main\/othervm KeepAliveTest 47\n- * @run main\/othervm KeepAliveTest 48\n- * @run main\/othervm KeepAliveTest 49\n- * @run main\/othervm KeepAliveTest 50\n- * @run main\/othervm KeepAliveTest 51\n- * @run main\/othervm KeepAliveTest 52\n- * @run main\/othervm KeepAliveTest 53\n- * @run main\/othervm KeepAliveTest 54\n- * @run main\/othervm KeepAliveTest 55\n- * @run main\/othervm KeepAliveTest 56\n- * @run main\/othervm KeepAliveTest 57\n- * @run main\/othervm KeepAliveTest 58\n- * @run main\/othervm KeepAliveTest 59\n- * @run main\/othervm KeepAliveTest 60\n- * @run main\/othervm KeepAliveTest 61\n- * @run main\/othervm KeepAliveTest 62\n- * @run main\/othervm KeepAliveTest 63\n- * @run main\/othervm KeepAliveTest 64\n- * @run main\/othervm KeepAliveTest 65\n- * @run main\/othervm KeepAliveTest 66\n- * @run main\/othervm KeepAliveTest 67\n- * @run main\/othervm KeepAliveTest 68\n- * @run main\/othervm KeepAliveTest 69\n- * @run main\/othervm KeepAliveTest 70\n- * @run main\/othervm KeepAliveTest 71\n- * @run main\/othervm KeepAliveTest 72\n- * @run main\/othervm KeepAliveTest 73\n- * @run main\/othervm KeepAliveTest 74\n- * @run main\/othervm KeepAliveTest 75\n- * @run main\/othervm KeepAliveTest 76\n- * @run main\/othervm KeepAliveTest 77\n- * @run main\/othervm KeepAliveTest 78\n- * @run main\/othervm KeepAliveTest 79\n- * @run main\/othervm KeepAliveTest 80\n- * @run main\/othervm KeepAliveTest 81\n- * @run main\/othervm KeepAliveTest 82\n- * @run main\/othervm KeepAliveTest 83\n- * @run main\/othervm KeepAliveTest 84\n- * @run main\/othervm KeepAliveTest 85\n- * @run main\/othervm KeepAliveTest 86\n- * @run main\/othervm KeepAliveTest 87\n- * @run main\/othervm KeepAliveTest 88\n- * @run main\/othervm KeepAliveTest 89\n- * @run main\/othervm KeepAliveTest 90\n- * @run main\/othervm KeepAliveTest 91\n- * @run main\/othervm KeepAliveTest 92\n- * @run main\/othervm KeepAliveTest 93\n- * @run main\/othervm KeepAliveTest 94\n- * @run main\/othervm KeepAliveTest 95\n- * @run main\/othervm KeepAliveTest 96\n- * @run main\/othervm KeepAliveTest 97\n- * @run main\/othervm KeepAliveTest 98\n- * @run main\/othervm KeepAliveTest 99\n- * @run main\/othervm KeepAliveTest 100\n- * @run main\/othervm KeepAliveTest 101\n- * @run main\/othervm KeepAliveTest 102\n- * @run main\/othervm KeepAliveTest 103\n- * @run main\/othervm KeepAliveTest 104\n- * @run main\/othervm KeepAliveTest 105\n- * @run main\/othervm KeepAliveTest 106\n- * @run main\/othervm KeepAliveTest 107\n- * @run main\/othervm KeepAliveTest 108\n- * @run main\/othervm KeepAliveTest 109\n- * @run main\/othervm KeepAliveTest 110\n- * @run main\/othervm KeepAliveTest 111\n- * @run main\/othervm KeepAliveTest 112\n- * @run main\/othervm KeepAliveTest 113\n- * @run main\/othervm KeepAliveTest 114\n- * @run main\/othervm KeepAliveTest 115\n- * @run main\/othervm KeepAliveTest 116\n- * @run main\/othervm KeepAliveTest 117\n- * @run main\/othervm KeepAliveTest 118\n- * @run main\/othervm KeepAliveTest 119\n- * @run main\/othervm KeepAliveTest 120\n- * @run main\/othervm KeepAliveTest 121\n- * @run main\/othervm KeepAliveTest 122\n- * @run main\/othervm KeepAliveTest 123\n- * @run main\/othervm KeepAliveTest 124\n- * @run main\/othervm KeepAliveTest 125\n- * @run main\/othervm KeepAliveTest 126\n- * @run main\/othervm KeepAliveTest 127\n- * @run main\/othervm KeepAliveTest 128\n- * @run main\/othervm KeepAliveTest 129\n- * @run main\/othervm KeepAliveTest 130\n- * @run main\/othervm KeepAliveTest 131\n- * @run main\/othervm KeepAliveTest 132\n- * @run main\/othervm KeepAliveTest 133\n- * @run main\/othervm KeepAliveTest 134\n- * @run main\/othervm KeepAliveTest 135\n- * @run main\/othervm KeepAliveTest 136\n- * @run main\/othervm KeepAliveTest 137\n- * @run main\/othervm KeepAliveTest 138\n- * @run main\/othervm KeepAliveTest 139\n- * @run main\/othervm KeepAliveTest 140\n- * @run main\/othervm KeepAliveTest 141\n- * @run main\/othervm KeepAliveTest 142\n- * @run main\/othervm KeepAliveTest 143\n- * @run main\/othervm KeepAliveTest 144\n- * @run main\/othervm KeepAliveTest 145\n- * @run main\/othervm KeepAliveTest 146\n- * @run main\/othervm KeepAliveTest 147\n- * @run main\/othervm KeepAliveTest 148\n- * @run main\/othervm KeepAliveTest 149\n- * @run main\/othervm KeepAliveTest 150\n- * @run main\/othervm KeepAliveTest 151\n- * @run main\/othervm KeepAliveTest 152\n- * @run main\/othervm KeepAliveTest 153\n- * @run main\/othervm KeepAliveTest 154\n- * @run main\/othervm KeepAliveTest 155\n- * @run main\/othervm KeepAliveTest 156\n- * @run main\/othervm KeepAliveTest 157\n- * @run main\/othervm KeepAliveTest 158\n- * @run main\/othervm KeepAliveTest 159\n- *\/\n-import java.nio.charset.StandardCharsets;\n-import java.io.InputStream;\n-import java.io.BufferedReader;\n-import java.io.IOException;\n-import java.io.InputStreamReader;\n-import java.io.OutputStreamWriter;\n-import java.lang.reflect.Constructor;\n-import java.lang.reflect.Field;\n-import java.net.InetAddress;\n-import java.net.InetSocketAddress;\n-import java.net.Proxy;\n-import java.net.Proxy.Type;\n-import java.net.ServerSocket;\n-import java.net.Socket;\n-import java.net.URL;\n-import java.util.List;\n-import java.util.Map.Entry;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.logging.ConsoleHandler;\n-import java.util.logging.Level;\n-import java.util.logging.Logger;\n-\n-import jdk.test.lib.net.URIBuilder;\n-import sun.net.www.http.HttpClient;\n-import sun.net.www.http.KeepAliveCache;\n-import sun.net.www.protocol.http.HttpURLConnection;\n-\n-public class KeepAliveTest {\n-\n-  private static final String NOT_CACHED = \"NotCached\";\n-  private static final String CLIENT_SEPARATOR = \";\";\n-  private static final String NEW_LINE = \"\\r\\n\";\n-  private static final int TIMEOUT = 200;\n-  public volatile int SERVER_PORT = 0;\n-  \/*\n-   * isProxySet and serverReady are shared variables between server thread and client thread(main) and it should be set and reset to false for each and\n-   * every scenario.\n-   * isProxySet and serverReady variables should be set by server thread before proceeding to client thread(main).\n-   *\/\n-  private volatile boolean isProxySet = false;\n-  private volatile boolean serverReady = false;\n-  private static final String NI = \"NO_INPUT\";\n-  private static final String CONNECTION_KEEP_ALIVE_ONLY = \"Connection: keep-alive\";\n-  private static final String PROXY_CONNECTION_KEEP_ALIVE_ONLY = \"Proxy-Connection: keep-alive\";\n-  private static final String KEEP_ALIVE_TIMEOUT_NEG = \"Keep-alive: timeout=-20\";\n-  private static final String KEEP_ALIVE_TIMEOUT_ZERO = \"Keep-alive: timeout=0\";\n-  private static final String KEEP_ALIVE_TIMEOUT = \"Keep-alive: timeout=20\";\n-  private static final String KEEP_ALIVE_PROXY_TIMEOUT = \"Keep-alive: timeout=120\";\n-  private static final String CLIENT_HTTP_KEEP_ALIVE_TIME_SERVER_NEGATIVE = \"http.keepAlive.time.server=-100\";\n-  private static final String CLIENT_HTTP_KEEP_ALIVE_TIME_PROXY_NEGATIVE = \"http.keepAlive.time.proxy=-200\";\n-  private static final String CLIENT_HTTP_KEEP_ALIVE_TIME_SERVER_ZERO = \"http.keepAlive.time.server=0\";\n-  private static final String CLIENT_HTTP_KEEP_ALIVE_TIME_PROXY_ZERO = \"http.keepAlive.time.proxy=0\";\n-  private static final String CLIENT_HTTP_KEEP_ALIVE_TIME_SERVER_POSITIVE = \"http.keepAlive.time.server=100\";\n-  private static final String CLIENT_HTTP_KEEP_ALIVE_TIME_PROXY_POSITIVE = \"http.keepAlive.time.proxy=200\";\n-  private static final String CONNECTION_KEEP_ALIVE_WITH_TIMEOUT = CONNECTION_KEEP_ALIVE_ONLY + NEW_LINE\n-      + KEEP_ALIVE_TIMEOUT;\n-  private static final String SERVER_100_NEGATIVE = CLIENT_HTTP_KEEP_ALIVE_TIME_SERVER_NEGATIVE;\n-  private static final String PROXY_200_NEGATIVE = CLIENT_HTTP_KEEP_ALIVE_TIME_PROXY_NEGATIVE;\n-  private static final String SERVER_ZERO = CLIENT_HTTP_KEEP_ALIVE_TIME_SERVER_ZERO;\n-  private static final String PROXY_ZERO = CLIENT_HTTP_KEEP_ALIVE_TIME_PROXY_ZERO;\n-  private static final String SERVER_100 = CLIENT_HTTP_KEEP_ALIVE_TIME_SERVER_POSITIVE;\n-  private static final String PROXY_200 = CLIENT_HTTP_KEEP_ALIVE_TIME_PROXY_POSITIVE;\n-  private static final String A = CONNECTION_KEEP_ALIVE_ONLY;\n-  private static final String B = CONNECTION_KEEP_ALIVE_WITH_TIMEOUT;\n-  private static final String C = PROXY_CONNECTION_KEEP_ALIVE_ONLY;\n-  private static final String D = PROXY_CONNECTION_KEEP_ALIVE_ONLY + NEW_LINE + CONNECTION_KEEP_ALIVE_ONLY;\n-  private static final String E = C + NEW_LINE + KEEP_ALIVE_PROXY_TIMEOUT;\n-  private static final String F = A + NEW_LINE + KEEP_ALIVE_TIMEOUT_NEG;\n-  private static final String G = A + NEW_LINE + KEEP_ALIVE_TIMEOUT_ZERO;\n-  private static final String H = C + NEW_LINE + KEEP_ALIVE_TIMEOUT_NEG;\n-  private static final String I = C + NEW_LINE + KEEP_ALIVE_TIMEOUT_ZERO;\n-  private String[] serverScenarios = {\n-      A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,\n-      B, B, B, B, B, B, B, B, B, B,B, B, B, B, B, B,\n-      C, C, C, C, C, C, C, C, C, C, C, C, C, C, C, C,\n-      D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D,\n-      E, E, E, E, E, E, E, E, E, E, E, E, E, E, E, E,\n-      NI, NI, NI, NI, NI, NI, NI, NI, NI, NI, NI, NI, NI, NI, NI, NI,\n-      F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,\n-      G, G, G, G, G, G, G, G, G, G, G, G, G, G, G, G,\n-      H, H, H, H, H, H, H, H, H, H, H, H, H, H, H, H,\n-      I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I\n-  };\n-  \/*\n-   * following are client scenarios which are repeated.\n-   *\/\n-  private String[] a = {\n-      NI, SERVER_100,     PROXY_200, SERVER_100 + CLIENT_SEPARATOR + PROXY_200,    SERVER_100_NEGATIVE,\n-      PROXY_200_NEGATIVE, SERVER_100_NEGATIVE + CLIENT_SEPARATOR + PROXY_200_NEGATIVE,\n-      SERVER_ZERO,         PROXY_ZERO, SERVER_ZERO + CLIENT_SEPARATOR + PROXY_ZERO,\n-      SERVER_ZERO + CLIENT_SEPARATOR + PROXY_200_NEGATIVE, SERVER_100_NEGATIVE + CLIENT_SEPARATOR + PROXY_ZERO,\n-      SERVER_100 + CLIENT_SEPARATOR + PROXY_ZERO, SERVER_ZERO + CLIENT_SEPARATOR + PROXY_200,\n-      SERVER_100 + CLIENT_SEPARATOR + PROXY_200_NEGATIVE, SERVER_100_NEGATIVE + CLIENT_SEPARATOR + PROXY_200\n-  };\n-  private String[] clientScenarios = {\n-      a[0] , a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15],\n-      a[0] , a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15],\n-      a[0] , a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15],\n-      a[0] , a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15],\n-      a[0] , a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15],\n-      a[0] , a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15],\n-      a[0] , a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15],\n-      a[0] , a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15],\n-      a[0] , a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15],\n-  };\n-  private int[] expectedValues = {\n-                    5,  100,    5, 100,  5,  5,  5,  0,  5,   0,   0,   5,  100,    0,   100,    5,\n-                   20,   20 ,  20,  20, 20, 20, 20, 20, 20,  20 , 20,  20,   20,   20,    20,   20,\n-                   60,   60,  200, 200, 60, 60, 60, 60,  0,   0,  60,   0,    0,  200,    60,  200,\n-                   60,   60,  200, 200, 60, 60, 60, 60,  0,   0,  60,   0,    0,  200,    60,  200,\n-                   120, 120,  120, 120,120,120,120,120,120, 120, 120, 120,  120,  120,   120,  120,\n-                    5,  100,    5, 100,  5,  5,  5,  0,  5,   0,   0,   5,  100,    0,   100,    5,\n-                    5,  100,    5, 100,  5,  5,  5,  0,  5,   0,   0,   5,  100,    0,   100,    5,\n-                    0,    0,    0,   0,  0,  0,  0,  0,  0,   0,   0,   0,    0,    0,     0,    0,\n-                    60,  60,  200, 200, 60, 60, 60, 60,  0,   0,  60,   0,    0,  200,    60,  200,\n-                    0,    0,    0,   0,  0,  0,  0,  0,  0,   0,   0,   0,    0,    0,     0,    0,\n-  };\n-  private CountDownLatch countDownLatch = null;\n-  private void myinit(int scenarioNumber) throws Exception {\n-    countDownLatch = new CountDownLatch(1);\n-    System.out.println(\"serverScenarios[\" + scenarioNumber + \"]=\" + serverScenarios[scenarioNumber]);\n-    System.out.println(\"clientScenarios[\" + scenarioNumber + \"]=\" + clientScenarios[scenarioNumber]);\n-    if(expectedValues[scenarioNumber] == 0) {\n-      System.out.println(\"ExpectedOutput=\" + NOT_CACHED);\n-    } else {\n-      System.out.println(\"ExpectedOutput=\" + expectedValues[scenarioNumber]);\n-    }\n-    System.out.println();\n-    serverInit(scenarioNumber);\n-    clientInit(scenarioNumber);\n-    serverReady = false;\n-  }\n-  private void serverInit(int scenarioNumber) {\n-    Thread server = new Thread(new Runnable() {\n-\n-      @Override\n-      public void run() {\n-        try {\n-          createServer(scenarioNumber);\n-        } catch (IOException e) {\n-          e.printStackTrace();\n-        }\n-      }\n-    }, \"SERVER\");\n-    server.start();\n-  }\n-\n-  private void readAll(Socket s) throws IOException {\n-    byte[] buf = new byte[128];\n-    int c;\n-    String request = \"\";\n-    InputStream is = s.getInputStream();\n-    while ((c = is.read(buf)) > 0) {\n-        request += new String(buf, 0, c, StandardCharsets.US_ASCII);\n-        if (request.contains(\"\\r\\n\\r\\n\")) {\n-           return;\n-        }\n-   }\n-   if (c == -1) {\n-      throw new IOException(\"Socket closed\");\n-    }\n-   }\n-\n-  private void createServer(int scenarioNumber) throws IOException {\n-\n-    String serverScenarioContent = null;\n-    if (!serverScenarios[scenarioNumber].equalsIgnoreCase(NI)) {\n-       serverScenarioContent = serverScenarios[scenarioNumber] + NEW_LINE;\n-      \/*\n-       * isProxySet should be set before Server is moved to Listen State.\n-       *\/\n-      if (serverScenarioContent.contains(\"Proxy\")) {\n-        isProxySet = true;\n-      } else {\n-        isProxySet = false;\n-      }\n-    }\n-    ServerSocket serverSocket = null;\n-    Socket socket = null;\n-    OutputStreamWriter out = null;\n-    InetAddress loopback = InetAddress.getLoopbackAddress();\n-    try {\n-      serverSocket = new ServerSocket();\n-      serverSocket.bind(new InetSocketAddress(loopback, 0));\n-      SERVER_PORT = serverSocket.getLocalPort();\n-      serverReady = true;\n-      System.out\n-          .println(\"SERVER_PORT= \" + SERVER_PORT + \" ServerReady=\" + serverReady + \" isProxySet=\" + isProxySet);\n-      \/*\n-       * Server will be waiting for clients to connect.\n-       *\/\n-      socket = serverSocket.accept();\n-      readAll(socket);\n-      out = new OutputStreamWriter(socket.getOutputStream());\n-\n-      String BODY = \"SERVER REPLY: Hello world\";\n-      String CLEN = \"Content-Length: \" + BODY.length() + NEW_LINE;\n-\n-      \/* send the header *\/\n-      out.write(\"HTTP\/1.1 200 OK\\r\\n\");\n-      out.write(\"Content-Type: text\/plain; charset=iso-8859-1\\r\\n\");\n-\n-      \/*\n-       * append each scenario content from array.\n-       *\/\n-      if(serverScenarioContent != null) {\n-        out.write(serverScenarioContent);\n-      }\n-      out.write(CLEN);\n-      out.write(NEW_LINE);\n-      out.write(BODY);\n-      out.flush();\n-    } catch (IOException e) {\n-      e.printStackTrace();\n-    } finally {\n-      if (out != null) {\n-        out.flush();\n-        out.close();\n-      }\n-      if (socket != null) {\n-        socket.close();\n-      }\n-      if (serverSocket != null) {\n-        serverSocket.close();\n-      }\n-    }\n-  }\n-\n-  private void clientInit(int scenarioNumber) throws Exception {\n-    try {\n-      createURLClient(scenarioNumber);\n-    } finally {\n-      System.out.println(\"client count down latch:\" + scenarioNumber);\n-      this.countDownLatch.countDown();\n-      System.out.println();\n-\n-      System.out.println();\n-    }\n-  }\n-\n-  private void createURLClient(int scenarioNumber) throws Exception {\n-\n-\/\/    System.setProperty(\"java.net.useSystemProxies\", \"false\");\n-\/\/    System.setProperty(\"http.nonProxyHosts\", \"\");\n-\/\/    System.setProperty(\"http.proxyHost\", \"localhost\");\n-\/\/    System.setProperty(\"http.proxyPort\", String.valueOf(SERVER_PORT));\n-    System.out.println(\"Following are Existing System Properties if set any\");\n-    System.out.println(\"http.keepAlive.time.server:\" + System.getProperty(\"http.keepAlive.time.server\"));\n-    System.out.println(\"http.keepAlive.time.proxy:\" + System.getProperty(\"http.keepAlive.time.proxy\"));\n-    System.setProperty(\"java.net.useSystemProxies\", \"false\");\n-    System.out.println(\"http.proxyPort:\"+System.getProperty(\"http.proxyPort\"));\n-    System.out.println(\"http.proxyHost:\"+System.getProperty(\"http.proxyHost\"));\n-    System.clearProperty(\"http.keepAlive.time.server\");\n-    System.clearProperty(\"http.keepAlive.time.proxy\");\n-\n-    \/\/ fetch clientScenearios for each scenarioNumber from array and set it to\n-    \/\/ System property.\n-    if (!clientScenarios[scenarioNumber].equalsIgnoreCase(NI)) {\n-\n-      System.out.println(\"Client Input Parsing\");\n-      for (String clientScenarioString : clientScenarios[scenarioNumber].split(CLIENT_SEPARATOR)) {\n-        System.out.println(clientScenarioString);\n-        String key = clientScenarioString.split(\"=\")[0];\n-        String value = clientScenarioString.split(\"=\")[1];\n-        System.setProperty(key, value);\n-      }\n-    }\n-\n-    \/\/ wait until ServerSocket moves to listening state.\n-    while (!serverReady) {\n-      Thread.sleep(TIMEOUT);\n-    }\n-    System.out.println(\"client started\");\n-    URL url = URIBuilder.newBuilder().scheme(\"http\").loopback().port(SERVER_PORT).toURL();\n-    System.out.println(\"connecting from client to SERVER URL:\" + url);\n-    HttpURLConnection httpUrlConnection = null;\n-    \/*\n-     * isProxySet is set to true when Expected Server Response contains Proxy-Connection header.\n-     *\/\n-    if (isProxySet) {\n-      httpUrlConnection = (sun.net.www.protocol.http.HttpURLConnection) url\n-          .openConnection(new Proxy(Type.HTTP, new InetSocketAddress(\"localhost\", SERVER_PORT)));\n-    } else {\n-      httpUrlConnection = (sun.net.www.protocol.http.HttpURLConnection) url.openConnection();\n-    }\n-\n-    InputStreamReader inputStreamReader = new InputStreamReader(httpUrlConnection.getInputStream());\n-    BufferedReader bufferedReader = null;\n-    try {\n-      bufferedReader = new BufferedReader(inputStreamReader);\n-\n-      while (true) {\n-        String eachLine = bufferedReader.readLine();\n-        if (eachLine == null) {\n-          break;\n-        }\n-        System.out.println(eachLine);\n-      }\n-    } finally {\n-      if (bufferedReader != null) {\n-        bufferedReader.close();\n-      }\n-    }\n-\n-\/\/    System.out.println(\"ResponseCode:\" + httpUrlConnection.getResponseCode());\n-\/\/    System.out.println(\"ResponseMessage:\" + httpUrlConnection.getResponseMessage());\n-\/\/    System.out.println(\"Content:\" + httpUrlConnection.getContent());\n-\/\/    Thread.sleep(2000);\n-    for (Entry<String, List<String>> header : httpUrlConnection.getHeaderFields().entrySet()) {\n-      System.out.println(header.getKey() + \"=\" + header.getValue());\n-    }\n-    fetchInfo(scenarioNumber, httpUrlConnection);\n-\n-  }\n-\n-  private void fetchInfo(int scenarioNumber, sun.net.www.protocol.http.HttpURLConnection httpUrlConnection)\n-      throws Exception {\n-    Field field = Class.forName(\"sun.net.www.protocol.http.HttpURLConnection\").getDeclaredField(\"http\");\n-    field.setAccessible(true);\n-    HttpClient httpClient = (HttpClient) field.get(httpUrlConnection);\n-\/\/    System.out.println(\"httpclient=\" + httpClient);\n-    Field keepAliveField = Class.forName(\"sun.net.www.http.HttpClient\").getDeclaredField(\"kac\");\n-    keepAliveField.setAccessible(true);\n-    KeepAliveCache keepAliveCache = (KeepAliveCache) keepAliveField.get(httpClient);\n-    System.out.println(\"keepAliveCache\" + keepAliveCache);\n-    System.out.println(\"SERVER URL:\" + httpUrlConnection.getURL());\n-\n-    \/*\n-     * create KeepAliveKey(URL,Object) object and compare created KeepAliveKey and\n-     * existing using equals() method: KeepAliveKey.equals()\n-     *\/\n-\n-    Class keepAliveKeyClass = Class.forName(\"sun.net.www.http.KeepAliveKey\");\n-\/\/    System.out.println(\"keepAliveKeyClass=\" + keepAliveKeyClass);\n-    Constructor keepAliveKeyClassconstructor = keepAliveKeyClass.getDeclaredConstructors()[0];\n-    keepAliveKeyClassconstructor.setAccessible(true);\n-    Object expectedKeepAliveKey = keepAliveKeyClassconstructor.newInstance(httpUrlConnection.getURL(), null);\n-    System.out.println(\"ExpectedKeepAliveKey=\" + expectedKeepAliveKey);\n-    Object clientVectorObjectInMap = keepAliveCache.get(expectedKeepAliveKey);\n-    System.out.println(\"ClientVector=\" + clientVectorObjectInMap);\n-    HttpClient httpClientCached = keepAliveCache.get(httpUrlConnection.getURL(), null);\n-    System.out.println(\"HttpClient in Cache:\" + httpClientCached);\n-    if(httpClientCached != null) {\n-      System.out.println(\"KeepingAlive:\" + httpClientCached.isKeepingAlive());\n-      System.out.println(\"UsingProxy:\" + httpClientCached.getUsingProxy());\n-      System.out.println(\"ProxiedHost:\" + httpClientCached.getProxyHostUsed());\n-      System.out.println(\"ProxiedPort:\" + httpClientCached.getProxyPortUsed());\n-      System.out.println(\"ProxyPortUsingSystemProperty:\" + System.getProperty(\"http.proxyPort\"));\n-      System.out.println(\"ProxyHostUsingSystemProperty:\" + System.getProperty(\"http.proxyHost\"));\n-      System.out.println(\"http.keepAlive.time.server=\" + System.getProperty(\"http.keepAlive.time.server\"));\n-      System.out.println(\"http.keepAlive.time.proxy=\" + System.getProperty(\"http.keepAlive.time.proxy\"));\n-\n-      Class clientVectorClass = Class.forName(\"sun.net.www.http.ClientVector\");\n-\/\/      System.out.println(\"clientVectorClass=\" + clientVectorClass);\n-      Field napField = clientVectorClass.getDeclaredField(\"nap\");\n-      napField.setAccessible(true);\n-      int napValue = (int) napField.get(clientVectorObjectInMap);\n-      int actualValue = napValue \/ 1000;\n-\/\/      System.out.println(\"nap=\" + napValue \/ 1000);\n-      System.out.printf(\"ExpectedOutput:%d ActualOutput:%d \", expectedValues[scenarioNumber], actualValue);\n-      System.out.println();\n-      if (expectedValues[scenarioNumber] != actualValue) {\n-        throw new RuntimeException(\n-            \"ExpectedOutput:\" + expectedValues[scenarioNumber] + \" ActualOutput: \" + actualValue);\n-      }\n-    } else {\n-      \/\/executed when value is not cached.\n-      String expected = expectedValues[scenarioNumber] == 0 ? NOT_CACHED\n-          : String.valueOf(expectedValues[scenarioNumber]);\n-      System.out.println(\"ExpectedOutput:\" + expected + \" ActualOutput:\" + NOT_CACHED);\n-      if (!expected.equalsIgnoreCase(NOT_CACHED)) {\n-        throw new RuntimeException(\"ExpectedOutput:\" + expected + \" ActualOutput:\" + NOT_CACHED);\n-      }\n-    }\n-  }\n-  public static void main(String[] args) throws Exception {\n-    if (args.length != 1) {\n-      System.out.println(\"Usage:java KeepAliveTest.java <scenarioNumber>\");\n-      System.out.println(\"e.g.:java KeepAliveTest.java 1\");\n-      System.exit(1);\n-    }\n-    \/\/ exercise the logging code\n-    Logger logger = Logger.getLogger(\"sun.net.www.protocol.http.HttpURLConnection\");\n-    logger.setLevel(Level.FINEST);\n-    ConsoleHandler h = new ConsoleHandler();\n-    h.setLevel(Level.FINEST);\n-    logger.addHandler(h);\n-    KeepAliveTest keepAliveTest = new KeepAliveTest();\n-    if (args.length != 0) {\n-      keepAliveTest.myinit(Integer.valueOf(args[0]));\n-    }\n-    \/\/ make main thread wait until server and client is completed.\n-    keepAliveTest.countDownLatch.await();\n-  }\n-}\n","filename":"test\/jdk\/sun\/net\/www\/http\/HttpClient\/KeepAliveTest","additions":0,"deletions":586,"binary":false,"changes":586,"status":"deleted"},{"patch":"@@ -0,0 +1,590 @@\n+\/*\n+ * Copyright (c) 2022 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @library \/test\/lib\n+ * @modules java.base\/sun.net:+open\n+ *          java.base\/sun.net.www.http:+open\n+ *          java.base\/sun.net.www:+open\n+ *          java.base\/sun.net.www.protocol.http:+open\n+ * @run main\/othervm KeepAliveTest 0\n+ * @run main\/othervm KeepAliveTest 1\n+ * @run main\/othervm KeepAliveTest 2\n+ * @run main\/othervm KeepAliveTest 3\n+ * @run main\/othervm KeepAliveTest 4\n+ * @run main\/othervm KeepAliveTest 5\n+ * @run main\/othervm KeepAliveTest 6\n+ * @run main\/othervm KeepAliveTest 7\n+ * @run main\/othervm KeepAliveTest 8\n+ * @run main\/othervm KeepAliveTest 9\n+ * @run main\/othervm KeepAliveTest 10\n+ * @run main\/othervm KeepAliveTest 11\n+ * @run main\/othervm KeepAliveTest 12\n+ * @run main\/othervm KeepAliveTest 13\n+ * @run main\/othervm KeepAliveTest 14\n+ * @run main\/othervm KeepAliveTest 15\n+ * @run main\/othervm KeepAliveTest 16\n+ * @run main\/othervm KeepAliveTest 17\n+ * @run main\/othervm KeepAliveTest 18\n+ * @run main\/othervm KeepAliveTest 19\n+ * @run main\/othervm KeepAliveTest 20\n+ * @run main\/othervm KeepAliveTest 21\n+ * @run main\/othervm KeepAliveTest 22\n+ * @run main\/othervm KeepAliveTest 23\n+ * @run main\/othervm KeepAliveTest 24\n+ * @run main\/othervm KeepAliveTest 25\n+ * @run main\/othervm KeepAliveTest 26\n+ * @run main\/othervm KeepAliveTest 27\n+ * @run main\/othervm KeepAliveTest 28\n+ * @run main\/othervm KeepAliveTest 29\n+ * @run main\/othervm KeepAliveTest 30\n+ * @run main\/othervm KeepAliveTest 31\n+ * @run main\/othervm KeepAliveTest 32\n+ * @run main\/othervm KeepAliveTest 33\n+ * @run main\/othervm KeepAliveTest 34\n+ * @run main\/othervm KeepAliveTest 35\n+ * @run main\/othervm KeepAliveTest 36\n+ * @run main\/othervm KeepAliveTest 37\n+ * @run main\/othervm KeepAliveTest 38\n+ * @run main\/othervm KeepAliveTest 39\n+ * @run main\/othervm KeepAliveTest 40\n+ * @run main\/othervm KeepAliveTest 41\n+ * @run main\/othervm KeepAliveTest 42\n+ * @run main\/othervm KeepAliveTest 43\n+ * @run main\/othervm KeepAliveTest 44\n+ * @run main\/othervm KeepAliveTest 45\n+ * @run main\/othervm KeepAliveTest 46\n+ * @run main\/othervm KeepAliveTest 47\n+ * @run main\/othervm KeepAliveTest 48\n+ * @run main\/othervm KeepAliveTest 49\n+ * @run main\/othervm KeepAliveTest 50\n+ * @run main\/othervm KeepAliveTest 51\n+ * @run main\/othervm KeepAliveTest 52\n+ * @run main\/othervm KeepAliveTest 53\n+ * @run main\/othervm KeepAliveTest 54\n+ * @run main\/othervm KeepAliveTest 55\n+ * @run main\/othervm KeepAliveTest 56\n+ * @run main\/othervm KeepAliveTest 57\n+ * @run main\/othervm KeepAliveTest 58\n+ * @run main\/othervm KeepAliveTest 59\n+ * @run main\/othervm KeepAliveTest 60\n+ * @run main\/othervm KeepAliveTest 61\n+ * @run main\/othervm KeepAliveTest 62\n+ * @run main\/othervm KeepAliveTest 63\n+ * @run main\/othervm KeepAliveTest 64\n+ * @run main\/othervm KeepAliveTest 65\n+ * @run main\/othervm KeepAliveTest 66\n+ * @run main\/othervm KeepAliveTest 67\n+ * @run main\/othervm KeepAliveTest 68\n+ * @run main\/othervm KeepAliveTest 69\n+ * @run main\/othervm KeepAliveTest 70\n+ * @run main\/othervm KeepAliveTest 71\n+ * @run main\/othervm KeepAliveTest 72\n+ * @run main\/othervm KeepAliveTest 73\n+ * @run main\/othervm KeepAliveTest 74\n+ * @run main\/othervm KeepAliveTest 75\n+ * @run main\/othervm KeepAliveTest 76\n+ * @run main\/othervm KeepAliveTest 77\n+ * @run main\/othervm KeepAliveTest 78\n+ * @run main\/othervm KeepAliveTest 79\n+ * @run main\/othervm KeepAliveTest 80\n+ * @run main\/othervm KeepAliveTest 81\n+ * @run main\/othervm KeepAliveTest 82\n+ * @run main\/othervm KeepAliveTest 83\n+ * @run main\/othervm KeepAliveTest 84\n+ * @run main\/othervm KeepAliveTest 85\n+ * @run main\/othervm KeepAliveTest 86\n+ * @run main\/othervm KeepAliveTest 87\n+ * @run main\/othervm KeepAliveTest 88\n+ * @run main\/othervm KeepAliveTest 89\n+ * @run main\/othervm KeepAliveTest 90\n+ * @run main\/othervm KeepAliveTest 91\n+ * @run main\/othervm KeepAliveTest 92\n+ * @run main\/othervm KeepAliveTest 93\n+ * @run main\/othervm KeepAliveTest 94\n+ * @run main\/othervm KeepAliveTest 95\n+ * @run main\/othervm KeepAliveTest 96\n+ * @run main\/othervm KeepAliveTest 97\n+ * @run main\/othervm KeepAliveTest 98\n+ * @run main\/othervm KeepAliveTest 99\n+ * @run main\/othervm KeepAliveTest 100\n+ * @run main\/othervm KeepAliveTest 101\n+ * @run main\/othervm KeepAliveTest 102\n+ * @run main\/othervm KeepAliveTest 103\n+ * @run main\/othervm KeepAliveTest 104\n+ * @run main\/othervm KeepAliveTest 105\n+ * @run main\/othervm KeepAliveTest 106\n+ * @run main\/othervm KeepAliveTest 107\n+ * @run main\/othervm KeepAliveTest 108\n+ * @run main\/othervm KeepAliveTest 109\n+ * @run main\/othervm KeepAliveTest 110\n+ * @run main\/othervm KeepAliveTest 111\n+ * @run main\/othervm KeepAliveTest 112\n+ * @run main\/othervm KeepAliveTest 113\n+ * @run main\/othervm KeepAliveTest 114\n+ * @run main\/othervm KeepAliveTest 115\n+ * @run main\/othervm KeepAliveTest 116\n+ * @run main\/othervm KeepAliveTest 117\n+ * @run main\/othervm KeepAliveTest 118\n+ * @run main\/othervm KeepAliveTest 119\n+ * @run main\/othervm KeepAliveTest 120\n+ * @run main\/othervm KeepAliveTest 121\n+ * @run main\/othervm KeepAliveTest 122\n+ * @run main\/othervm KeepAliveTest 123\n+ * @run main\/othervm KeepAliveTest 124\n+ * @run main\/othervm KeepAliveTest 125\n+ * @run main\/othervm KeepAliveTest 126\n+ * @run main\/othervm KeepAliveTest 127\n+ * @run main\/othervm KeepAliveTest 128\n+ * @run main\/othervm KeepAliveTest 129\n+ * @run main\/othervm KeepAliveTest 130\n+ * @run main\/othervm KeepAliveTest 131\n+ * @run main\/othervm KeepAliveTest 132\n+ * @run main\/othervm KeepAliveTest 133\n+ * @run main\/othervm KeepAliveTest 134\n+ * @run main\/othervm KeepAliveTest 135\n+ * @run main\/othervm KeepAliveTest 136\n+ * @run main\/othervm KeepAliveTest 137\n+ * @run main\/othervm KeepAliveTest 138\n+ * @run main\/othervm KeepAliveTest 139\n+ * @run main\/othervm KeepAliveTest 140\n+ * @run main\/othervm KeepAliveTest 141\n+ * @run main\/othervm KeepAliveTest 142\n+ * @run main\/othervm KeepAliveTest 143\n+ * @run main\/othervm KeepAliveTest 144\n+ * @run main\/othervm KeepAliveTest 145\n+ * @run main\/othervm KeepAliveTest 146\n+ * @run main\/othervm KeepAliveTest 147\n+ * @run main\/othervm KeepAliveTest 148\n+ * @run main\/othervm KeepAliveTest 149\n+ * @run main\/othervm KeepAliveTest 150\n+ * @run main\/othervm KeepAliveTest 151\n+ * @run main\/othervm KeepAliveTest 152\n+ * @run main\/othervm KeepAliveTest 153\n+ * @run main\/othervm KeepAliveTest 154\n+ * @run main\/othervm KeepAliveTest 155\n+ * @run main\/othervm KeepAliveTest 156\n+ * @run main\/othervm KeepAliveTest 157\n+ * @run main\/othervm KeepAliveTest 158\n+ * @run main\/othervm KeepAliveTest 159\n+ *\/\n+import java.nio.charset.StandardCharsets;\n+import java.io.InputStream;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.io.OutputStreamWriter;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Field;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.Proxy;\n+import java.net.Proxy.Type;\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import java.net.URL;\n+import java.util.List;\n+import java.util.Map.Entry;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.logging.ConsoleHandler;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import jdk.test.lib.net.URIBuilder;\n+import sun.net.www.http.HttpClient;\n+import sun.net.www.http.KeepAliveCache;\n+import sun.net.www.protocol.http.HttpURLConnection;\n+\n+public class KeepAliveTest {\n+\n+    private static final String NOT_CACHED = \"NotCached\";\n+    private static final String CLIENT_SEPARATOR = \";\";\n+    private static final String NEW_LINE = \"\\r\\n\";\n+    private static final int TIMEOUT = 200;\n+    public volatile int SERVER_PORT = 0;\n+    \/*\n+     * isProxySet and serverReady are shared variables between server thread and client thread(main) and it should be set and reset to false for each and\n+     * every scenario.\n+     * isProxySet and serverReady variables should be set by server thread before proceeding to client thread(main).\n+     *\/\n+    private volatile boolean isProxySet = false;\n+    private volatile boolean serverReady = false;\n+    private static final String NI = \"NO_INPUT\";\n+    private static final String CONNECTION_KEEP_ALIVE_ONLY = \"Connection: keep-alive\";\n+    private static final String PROXY_CONNECTION_KEEP_ALIVE_ONLY = \"Proxy-Connection: keep-alive\";\n+    private static final String KEEP_ALIVE_TIMEOUT_NEG = \"Keep-alive: timeout=-20\";\n+    private static final String KEEP_ALIVE_TIMEOUT_ZERO = \"Keep-alive: timeout=0\";\n+    private static final String KEEP_ALIVE_TIMEOUT = \"Keep-alive: timeout=20\";\n+    private static final String KEEP_ALIVE_PROXY_TIMEOUT = \"Keep-alive: timeout=120\";\n+    private static final String CLIENT_HTTP_KEEP_ALIVE_TIME_SERVER_NEGATIVE = \"http.keepAlive.time.server=-100\";\n+    private static final String CLIENT_HTTP_KEEP_ALIVE_TIME_PROXY_NEGATIVE = \"http.keepAlive.time.proxy=-200\";\n+    private static final String CLIENT_HTTP_KEEP_ALIVE_TIME_SERVER_ZERO = \"http.keepAlive.time.server=0\";\n+    private static final String CLIENT_HTTP_KEEP_ALIVE_TIME_PROXY_ZERO = \"http.keepAlive.time.proxy=0\";\n+    private static final String CLIENT_HTTP_KEEP_ALIVE_TIME_SERVER_POSITIVE = \"http.keepAlive.time.server=100\";\n+    private static final String CLIENT_HTTP_KEEP_ALIVE_TIME_PROXY_POSITIVE = \"http.keepAlive.time.proxy=200\";\n+    private static final String CONNECTION_KEEP_ALIVE_WITH_TIMEOUT = CONNECTION_KEEP_ALIVE_ONLY + NEW_LINE\n+        + KEEP_ALIVE_TIMEOUT;\n+    private static final String SERVER_100_NEGATIVE = CLIENT_HTTP_KEEP_ALIVE_TIME_SERVER_NEGATIVE;\n+    private static final String PROXY_200_NEGATIVE = CLIENT_HTTP_KEEP_ALIVE_TIME_PROXY_NEGATIVE;\n+    private static final String SERVER_ZERO = CLIENT_HTTP_KEEP_ALIVE_TIME_SERVER_ZERO;\n+    private static final String PROXY_ZERO = CLIENT_HTTP_KEEP_ALIVE_TIME_PROXY_ZERO;\n+    private static final String SERVER_100 = CLIENT_HTTP_KEEP_ALIVE_TIME_SERVER_POSITIVE;\n+    private static final String PROXY_200 = CLIENT_HTTP_KEEP_ALIVE_TIME_PROXY_POSITIVE;\n+    private static final String A = CONNECTION_KEEP_ALIVE_ONLY;\n+    private static final String B = CONNECTION_KEEP_ALIVE_WITH_TIMEOUT;\n+    private static final String C = PROXY_CONNECTION_KEEP_ALIVE_ONLY;\n+    private static final String D = PROXY_CONNECTION_KEEP_ALIVE_ONLY + NEW_LINE + CONNECTION_KEEP_ALIVE_ONLY;\n+    private static final String E = C + NEW_LINE + KEEP_ALIVE_PROXY_TIMEOUT;\n+    private static final String F = A + NEW_LINE + KEEP_ALIVE_TIMEOUT_NEG;\n+    private static final String G = A + NEW_LINE + KEEP_ALIVE_TIMEOUT_ZERO;\n+    private static final String H = C + NEW_LINE + KEEP_ALIVE_TIMEOUT_NEG;\n+    private static final String I = C + NEW_LINE + KEEP_ALIVE_TIMEOUT_ZERO;\n+    private static Logger logger = Logger.getLogger(\"sun.net.www.protocol.http.HttpURLConnection\");\n+    private String[] serverScenarios = {\n+        A, A, A, A, A, A, A, A, A, A, A, A, A, A, A, A,\n+        B, B, B, B, B, B, B, B, B, B,B, B, B, B, B, B,\n+        C, C, C, C, C, C, C, C, C, C, C, C, C, C, C, C,\n+        D, D, D, D, D, D, D, D, D, D, D, D, D, D, D, D,\n+        E, E, E, E, E, E, E, E, E, E, E, E, E, E, E, E,\n+        NI, NI, NI, NI, NI, NI, NI, NI, NI, NI, NI, NI, NI, NI, NI, NI,\n+        F, F, F, F, F, F, F, F, F, F, F, F, F, F, F, F,\n+        G, G, G, G, G, G, G, G, G, G, G, G, G, G, G, G,\n+        H, H, H, H, H, H, H, H, H, H, H, H, H, H, H, H,\n+        I, I, I, I, I, I, I, I, I, I, I, I, I, I, I, I\n+    };\n+    \/*\n+     * following are client scenarios which are repeated.\n+     *\/\n+    private String[] a = {\n+        NI, SERVER_100,     PROXY_200, SERVER_100 + CLIENT_SEPARATOR + PROXY_200,    SERVER_100_NEGATIVE,\n+        PROXY_200_NEGATIVE, SERVER_100_NEGATIVE + CLIENT_SEPARATOR + PROXY_200_NEGATIVE,\n+        SERVER_ZERO,         PROXY_ZERO, SERVER_ZERO + CLIENT_SEPARATOR + PROXY_ZERO,\n+        SERVER_ZERO + CLIENT_SEPARATOR + PROXY_200_NEGATIVE, SERVER_100_NEGATIVE + CLIENT_SEPARATOR + PROXY_ZERO,\n+        SERVER_100 + CLIENT_SEPARATOR + PROXY_ZERO, SERVER_ZERO + CLIENT_SEPARATOR + PROXY_200,\n+        SERVER_100 + CLIENT_SEPARATOR + PROXY_200_NEGATIVE, SERVER_100_NEGATIVE + CLIENT_SEPARATOR + PROXY_200\n+    };\n+    private String[] clientScenarios = {\n+        a[0] , a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15],\n+        a[0] , a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15],\n+        a[0] , a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15],\n+        a[0] , a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15],\n+        a[0] , a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15],\n+        a[0] , a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15],\n+        a[0] , a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15],\n+        a[0] , a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15],\n+        a[0] , a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15],\n+        a[0] , a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15],\n+    };\n+    private int[] expectedValues = {\n+        5,  100,    5, 100,  5,  5,  5,  0,  5,   0,   0,   5,  100,    0,   100,    5,\n+        20,   20 ,  20,  20, 20, 20, 20, 20, 20,  20 , 20,  20,   20,   20,    20,   20,\n+        60,   60,  200, 200, 60, 60, 60, 60,  0,   0,  60,   0,    0,  200,    60,  200,\n+        60,   60,  200, 200, 60, 60, 60, 60,  0,   0,  60,   0,    0,  200,    60,  200,\n+        120, 120,  120, 120,120,120,120,120,120, 120, 120, 120,  120,  120,   120,  120,\n+        5,  100,    5, 100,  5,  5,  5,  0,  5,   0,   0,   5,  100,    0,   100,    5,\n+        5,  100,    5, 100,  5,  5,  5,  0,  5,   0,   0,   5,  100,    0,   100,    5,\n+        0,    0,    0,   0,  0,  0,  0,  0,  0,   0,   0,   0,    0,    0,     0,    0,\n+        60,  60,  200, 200, 60, 60, 60, 60,  0,   0,  60,   0,    0,  200,    60,  200,\n+        0,    0,    0,   0,  0,  0,  0,  0,  0,   0,   0,   0,    0,    0,     0,    0,\n+    };\n+    private CountDownLatch countDownLatch = null;\n+    private void myinit(int scenarioNumber) throws Exception {\n+        \/\/test scenarios are skipped because of JDK-8291638\n+        countDownLatch = new CountDownLatch(1);\n+        if((scenarioNumber >= 112 && scenarioNumber <= 127) || (scenarioNumber >= 144 && scenarioNumber <= 159)) {\n+            System.out.println(\"Scenario Skipped:\"+scenarioNumber);\n+            countDownLatch = new CountDownLatch(0);\n+            return;\n+        }\n+        System.out.println(\"serverScenarios[\" + scenarioNumber + \"]=\" + serverScenarios[scenarioNumber]);\n+        System.out.println(\"clientScenarios[\" + scenarioNumber + \"]=\" + clientScenarios[scenarioNumber]);\n+        if(expectedValues[scenarioNumber] == 0) {\n+            System.out.println(\"ExpectedOutput=\" + NOT_CACHED);\n+        } else {\n+            System.out.println(\"ExpectedOutput=\" + expectedValues[scenarioNumber]);\n+        }\n+        System.out.println();\n+        serverInit(scenarioNumber);\n+        clientInit(scenarioNumber);\n+        serverReady = false;\n+    }\n+    private void serverInit(int scenarioNumber) {\n+        Thread server = new Thread(new Runnable() {\n+\n+            @Override\n+            public void run() {\n+                try {\n+                   createServer(scenarioNumber);\n+                } catch (IOException e) {\n+                   e.printStackTrace();\n+                }\n+            }\n+        }, \"SERVER\");\n+        server.start();\n+    }\n+\n+    private void readAll(Socket s) throws IOException {\n+        byte[] buf = new byte[128];\n+        int c;\n+        String request = \"\";\n+        InputStream is = s.getInputStream();\n+        while ((c = is.read(buf)) > 0) {\n+            request += new String(buf, 0, c, StandardCharsets.US_ASCII);\n+            if (request.contains(\"\\r\\n\\r\\n\")) {\n+                return;\n+            }\n+        }\n+        if (c == -1) {\n+            throw new IOException(\"Socket closed\");\n+        }\n+    }\n+\n+    private void createServer(int scenarioNumber) throws IOException {\n+        String serverScenarioContent = null;\n+        if (!serverScenarios[scenarioNumber].equalsIgnoreCase(NI)) {\n+            serverScenarioContent = serverScenarios[scenarioNumber] + NEW_LINE;\n+            \/*\n+             * isProxySet should be set before Server is moved to Listen State.\n+             *\/\n+            if (serverScenarioContent.contains(\"Proxy\")) {\n+                isProxySet = true;\n+            } else {\n+                isProxySet = false;\n+            }\n+        }\n+        ServerSocket serverSocket = null;\n+        Socket socket = null;\n+        OutputStreamWriter out = null;\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        try {\n+            serverSocket = new ServerSocket();\n+            serverSocket.bind(new InetSocketAddress(loopback, 0));\n+            SERVER_PORT = serverSocket.getLocalPort();\n+            serverReady = true;\n+            System.out\n+                .println(\"SERVER_PORT= \" + SERVER_PORT + \" ServerReady=\" + serverReady + \" isProxySet=\" + isProxySet);\n+            \/*\n+             * Server will be waiting for clients to connect.\n+             *\/\n+            socket = serverSocket.accept();\n+            readAll(socket);\n+            out = new OutputStreamWriter(socket.getOutputStream());\n+\n+            String BODY = \"SERVER REPLY: Hello world\";\n+            String CLEN = \"Content-Length: \" + BODY.length() + NEW_LINE;\n+\n+            \/* send the header *\/\n+            out.write(\"HTTP\/1.1 200 OK\\r\\n\");\n+            out.write(\"Content-Type: text\/plain; charset=iso-8859-1\\r\\n\");\n+\n+            \/*\n+             * append each scenario content from array.\n+             *\/\n+            if(serverScenarioContent != null) {\n+                out.write(serverScenarioContent);\n+            }\n+            out.write(CLEN);\n+            out.write(NEW_LINE);\n+            out.write(BODY);\n+            out.flush();\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        } finally {\n+            if (out != null) {\n+                out.flush();\n+                out.close();\n+            }\n+            if (socket != null) {\n+                socket.close();\n+            }\n+            if (serverSocket != null) {\n+                serverSocket.close();\n+            }\n+        }\n+    }\n+\n+    private void clientInit(int scenarioNumber) throws Exception {\n+        try {\n+            createURLClient(scenarioNumber);\n+        } finally {\n+            System.out.println(\"client count down latch:\" + scenarioNumber);\n+            this.countDownLatch.countDown();\n+            System.out.println();\n+            System.out.println();\n+        }\n+    }\n+\n+    private void createURLClient(int scenarioNumber) throws Exception {\n+\n+        \/\/    System.setProperty(\"java.net.useSystemProxies\", \"false\");\n+        \/\/    System.setProperty(\"http.nonProxyHosts\", \"\");\n+        \/\/    System.setProperty(\"http.proxyHost\", \"localhost\");\n+        \/\/    System.setProperty(\"http.proxyPort\", String.valueOf(SERVER_PORT));\n+        System.out.println(\"Following are Existing System Properties if set any\");\n+        System.out.println(\"http.keepAlive.time.server:\" + System.getProperty(\"http.keepAlive.time.server\"));\n+        System.out.println(\"http.keepAlive.time.proxy:\" + System.getProperty(\"http.keepAlive.time.proxy\"));\n+        System.setProperty(\"java.net.useSystemProxies\", \"false\");\n+        System.out.println(\"http.proxyPort:\"+System.getProperty(\"http.proxyPort\"));\n+        System.out.println(\"http.proxyHost:\"+System.getProperty(\"http.proxyHost\"));\n+        System.clearProperty(\"http.keepAlive.time.server\");\n+        System.clearProperty(\"http.keepAlive.time.proxy\");\n+\n+        \/\/ fetch clientScenearios for each scenarioNumber from array and set it to\n+        \/\/ System property.\n+        if (!clientScenarios[scenarioNumber].equalsIgnoreCase(NI)) {\n+            System.out.println(\"Client Input Parsing\");\n+            for (String clientScenarioString : clientScenarios[scenarioNumber].split(CLIENT_SEPARATOR)) {\n+                System.out.println(clientScenarioString);\n+                String key = clientScenarioString.split(\"=\")[0];\n+                String value = clientScenarioString.split(\"=\")[1];\n+                System.setProperty(key, value);\n+            }\n+        }\n+\n+        \/\/ wait until ServerSocket moves to listening state.\n+        while (!serverReady) {\n+            Thread.sleep(TIMEOUT);\n+        }\n+        System.out.println(\"client started\");\n+        URL url = URIBuilder.newBuilder().scheme(\"http\").loopback().port(SERVER_PORT).toURL();\n+        System.out.println(\"connecting from client to SERVER URL:\" + url);\n+        HttpURLConnection httpUrlConnection = null;\n+        \/*\n+         * isProxySet is set to true when Expected Server Response contains Proxy-Connection header.\n+         *\/\n+        if (isProxySet) {\n+            httpUrlConnection = (sun.net.www.protocol.http.HttpURLConnection) url\n+                .openConnection(new Proxy(Type.HTTP, new InetSocketAddress(\"localhost\", SERVER_PORT)));\n+        } else {\n+            httpUrlConnection = (sun.net.www.protocol.http.HttpURLConnection) url.openConnection();\n+        }\n+\n+        InputStreamReader inputStreamReader = new InputStreamReader(httpUrlConnection.getInputStream());\n+        BufferedReader bufferedReader = null;\n+        try {\n+            bufferedReader = new BufferedReader(inputStreamReader);\n+\n+            while (true) {\n+                String eachLine = bufferedReader.readLine();\n+                if (eachLine == null) {\n+                    break;\n+                }\n+                System.out.println(eachLine);\n+            }\n+        } finally {\n+            if (bufferedReader != null) {\n+                bufferedReader.close();\n+            }\n+        }\n+\n+        \/\/    System.out.println(\"ResponseCode:\" + httpUrlConnection.getResponseCode());\n+        \/\/    System.out.println(\"ResponseMessage:\" + httpUrlConnection.getResponseMessage());\n+        \/\/    System.out.println(\"Content:\" + httpUrlConnection.getContent());\n+        \/\/    Thread.sleep(2000);\n+        for (Entry<String, List<String>> header : httpUrlConnection.getHeaderFields().entrySet()) {\n+            System.out.println(header.getKey() + \"=\" + header.getValue());\n+        }\n+        fetchInfo(scenarioNumber, httpUrlConnection);\n+\n+    }\n+\n+    private void fetchInfo(int scenarioNumber, sun.net.www.protocol.http.HttpURLConnection httpUrlConnection)\n+        throws Exception {\n+            Field field = Class.forName(\"sun.net.www.protocol.http.HttpURLConnection\").getDeclaredField(\"http\");\n+            field.setAccessible(true);\n+            HttpClient httpClient = (HttpClient) field.get(httpUrlConnection);\n+            \/\/    System.out.println(\"httpclient=\" + httpClient);\n+            Field keepAliveField = Class.forName(\"sun.net.www.http.HttpClient\").getDeclaredField(\"kac\");\n+            keepAliveField.setAccessible(true);\n+            KeepAliveCache keepAliveCache = (KeepAliveCache) keepAliveField.get(httpClient);\n+            System.out.println(\"keepAliveCache\" + keepAliveCache);\n+            System.out.println(\"SERVER URL:\" + httpUrlConnection.getURL());\n+\n+            \/*\n+             * create KeepAliveKey(URL,Object) object and compare created KeepAliveKey and\n+             * existing using equals() method: KeepAliveKey.equals()\n+             *\/\n+\n+            Class keepAliveKeyClass = Class.forName(\"sun.net.www.http.KeepAliveKey\");\n+            \/\/    System.out.println(\"keepAliveKeyClass=\" + keepAliveKeyClass);\n+            Constructor keepAliveKeyClassconstructor = keepAliveKeyClass.getDeclaredConstructors()[0];\n+            keepAliveKeyClassconstructor.setAccessible(true);\n+            Object expectedKeepAliveKey = keepAliveKeyClassconstructor.newInstance(httpUrlConnection.getURL(), null);\n+            System.out.println(\"ExpectedKeepAliveKey=\" + expectedKeepAliveKey);\n+            Object clientVectorObjectInMap = keepAliveCache.get(expectedKeepAliveKey);\n+            System.out.println(\"ClientVector=\" + clientVectorObjectInMap);\n+            HttpClient httpClientCached = keepAliveCache.get(httpUrlConnection.getURL(), null);\n+            System.out.println(\"HttpClient in Cache:\" + httpClientCached);\n+            if(httpClientCached != null) {\n+                System.out.println(\"KeepingAlive:\" + httpClientCached.isKeepingAlive());\n+                System.out.println(\"UsingProxy:\" + httpClientCached.getUsingProxy());\n+                System.out.println(\"ProxiedHost:\" + httpClientCached.getProxyHostUsed());\n+                System.out.println(\"ProxiedPort:\" + httpClientCached.getProxyPortUsed());\n+                System.out.println(\"ProxyPortUsingSystemProperty:\" + System.getProperty(\"http.proxyPort\"));\n+                System.out.println(\"ProxyHostUsingSystemProperty:\" + System.getProperty(\"http.proxyHost\"));\n+                System.out.println(\"http.keepAlive.time.server=\" + System.getProperty(\"http.keepAlive.time.server\"));\n+                System.out.println(\"http.keepAlive.time.proxy=\" + System.getProperty(\"http.keepAlive.time.proxy\"));\n+\n+                Class clientVectorClass = Class.forName(\"sun.net.www.http.ClientVector\");\n+                \/\/      System.out.println(\"clientVectorClass=\" + clientVectorClass);\n+                Field napField = clientVectorClass.getDeclaredField(\"nap\");\n+                napField.setAccessible(true);\n+                int napValue = (int) napField.get(clientVectorObjectInMap);\n+                int actualValue = napValue \/ 1000;\n+                \/\/      System.out.println(\"nap=\" + napValue \/ 1000);\n+                System.out.printf(\"ExpectedOutput:%d ActualOutput:%d \", expectedValues[scenarioNumber], actualValue);\n+                System.out.println();\n+                if (expectedValues[scenarioNumber] != actualValue) {\n+                    throw new RuntimeException(\n+                            \"ExpectedOutput:\" + expectedValues[scenarioNumber] + \" ActualOutput: \" + actualValue);\n+                }\n+            } else {\n+                \/\/executed when value is not cached.\n+                String expected = expectedValues[scenarioNumber] == 0 ? NOT_CACHED\n+                    : String.valueOf(expectedValues[scenarioNumber]);\n+                System.out.println(\"ExpectedOutput:\" + expected + \" ActualOutput:\" + NOT_CACHED);\n+                if (!expected.equalsIgnoreCase(NOT_CACHED)) {\n+                    throw new RuntimeException(\"ExpectedOutput:\" + expected + \" ActualOutput:\" + NOT_CACHED);\n+                }\n+            }\n+        }\n+    public static void main(String[] args) throws Exception {\n+        if (args.length != 1) {\n+            System.out.println(\"Usage:java KeepAliveTest.java <scenarioNumber>\");\n+            System.out.println(\"e.g.:java KeepAliveTest.java 1\");\n+            System.exit(1);\n+        }\n+        logger.setLevel(Level.FINEST);\n+        ConsoleHandler h = new ConsoleHandler();\n+        h.setLevel(Level.FINEST);\n+        logger.addHandler(h);\n+        KeepAliveTest keepAliveTest = new KeepAliveTest();\n+        if (args.length != 0) {\n+            keepAliveTest.myinit(Integer.valueOf(args[0]));\n+        }\n+        \/\/ make main thread wait until server and client is completed.\n+        keepAliveTest.countDownLatch.await();\n+    }\n+}\n+\n","filename":"test\/jdk\/sun\/net\/www\/http\/HttpClient\/KeepAliveTest.java","additions":590,"deletions":0,"binary":false,"changes":590,"status":"added"}]}