{"files":[{"patch":"@@ -576,0 +576,2 @@\n+            out.write(\"enum PeriodicType {BEGIN_CHUNK, INTERVAL, END_CHUNK};\");\n+            out.write(\"\");\n@@ -578,1 +580,1 @@\n-            out.write(\"  static void requestEvent(JfrEventId id, jlong timestamp) {\");\n+            out.write(\"  static void requestEvent(JfrEventId id, jlong timestamp, PeriodicType periodicType) {\");\n@@ -580,0 +582,1 @@\n+            out.write(\"    _type = periodicType;\");\n@@ -601,0 +604,2 @@\n+            out.write(\" static PeriodicType type(void);\");\n+            out.write(\" static PeriodicType _type;\");\n","filename":"make\/src\/classes\/build\/tools\/jfr\/GenerateJfrFiles.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -241,2 +241,2 @@\n-JVM_ENTRY_NO_ENV(jboolean, jfr_emit_event(JNIEnv* env, jobject jvm, jlong event_type_id, jlong timestamp, jlong when))\n-  JfrPeriodicEventSet::requestEvent((JfrEventId)event_type_id, timestamp);\n+JVM_ENTRY_NO_ENV(jboolean, jfr_emit_event(JNIEnv* env, jobject jvm, jlong event_type_id, jlong timestamp, jlong periodic_type))\n+  JfrPeriodicEventSet::requestEvent((JfrEventId)event_type_id, timestamp, static_cast<PeriodicType>(periodic_type));\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethod.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -85,0 +85,1 @@\n+PeriodicType JfrPeriodicEventSet::_type;\n@@ -90,0 +91,4 @@\n+PeriodicType JfrPeriodicEventSet::type(void) {\n+  return _type;\n+}\n+\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrPeriodic.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -121,1 +121,1 @@\n-     * @param when when it is being done {@link Periodic.When}\n+     * @param periodicType when it is being done {@link PeriodicType.When}\n@@ -125,1 +125,1 @@\n-    public native boolean emitEvent(long eventTypeId, long timestamp, long when);\n+    public native boolean emitEvent(long eventTypeId, long timestamp, long periodicType);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/JVM.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -42,0 +42,3 @@\n+    enum PeriodicType {\n+        BEGIN_CHUNK, INTERVAL, END_CHUNK\n+    }\n@@ -65,1 +68,1 @@\n-        private void execute(long timestamp) {\n+        private void execute(long timestamp, PeriodicType periodicType) {\n@@ -71,1 +74,1 @@\n-                        emitJVMEvent(type, timestamp);\n+                        emitJVMEvent(type, timestamp, periodicType);\n@@ -85,1 +88,1 @@\n-        private void emitJVMEvent(PlatformEventType type, long timestamp) {\n+        private void emitJVMEvent(PlatformEventType type, long timestamp, PeriodicType periodicType) {\n@@ -91,1 +94,1 @@\n-                jvm.emitEvent(type.getId(), timestamp, 0);\n+                jvm.emitEvent(type.getId(), timestamp, periodicType.ordinal());\n@@ -186,1 +189,1 @@\n-        doChunk(x -> x.isEndChunk());\n+        doChunk(x -> x.isEndChunk(), PeriodicType.END_CHUNK);\n@@ -190,1 +193,1 @@\n-        doChunk(x -> x.isBeginChunk());\n+        doChunk(x -> x.isBeginChunk(), PeriodicType.BEGIN_CHUNK);\n@@ -193,1 +196,1 @@\n-    private static void doChunk(Predicate<PlatformEventType> predicate) {\n+    private static void doChunk(Predicate<PlatformEventType> predicate, PeriodicType type) {\n@@ -198,1 +201,1 @@\n-                requestHook.execute(timestamp);\n+                requestHook.execute(timestamp, type);\n@@ -210,1 +213,1 @@\n-        \/\/ The interval for periodic events are typically at least 1 s, so\n+        \/\/ The interval for periodic events is typically at least 1 s, so\n@@ -250,1 +253,1 @@\n-                he.execute(eventTimestamp);\n+                he.execute(eventTimestamp, PeriodicType.INTERVAL);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/RequestEngine.java","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"}]}