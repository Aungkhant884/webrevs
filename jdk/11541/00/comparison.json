{"files":[{"patch":"@@ -578,1 +578,2 @@\n-            out.write(\"  static void requestEvent(JfrEventId id) {\");\n+            out.write(\"  static void requestEvent(JfrEventId id, jlong timestamp) {\");\n+            out.write(\"    _timestamp = Ticks(timestamp);\");\n@@ -598,0 +599,2 @@\n+            out.write(\" static Ticks timestamp(void);\");\n+            out.write(\" static Ticks _timestamp;\");\n","filename":"make\/src\/classes\/build\/tools\/jfr\/GenerateJfrFiles.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -241,2 +241,2 @@\n-JVM_ENTRY_NO_ENV(jboolean, jfr_emit_event(JNIEnv* env, jobject jvm, jlong eventTypeId, jlong timeStamp, jlong when))\n-  JfrPeriodicEventSet::requestEvent((JfrEventId)eventTypeId);\n+JVM_ENTRY_NO_ENV(jboolean, jfr_emit_event(JNIEnv* env, jobject jvm, jlong event_type_id, jlong timestamp, jlong when))\n+  JfrPeriodicEventSet::requestEvent((JfrEventId)event_type_id, timestamp);\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethod.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -83,0 +83,7 @@\n+\/\/ Timestamp to correlate events in the same batch\/generation\n+Ticks JfrPeriodicEventSet::_timestamp;\n+\n+Ticks JfrPeriodicEventSet::timestamp(void) {\n+  return _timestamp;\n+}\n+\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrPeriodic.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -234,0 +234,1 @@\n+  friend class JfrPeriodicEventSet;\n","filename":"src\/hotspot\/share\/utilities\/ticks.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -65,1 +65,1 @@\n-        private void execute() {\n+        private void execute(long timestamp) {\n@@ -71,1 +71,1 @@\n-                        emitJVMEvent(type);\n+                        emitJVMEvent(type, timestamp);\n@@ -85,1 +85,1 @@\n-        private void emitJVMEvent(PlatformEventType type) {\n+        private void emitJVMEvent(PlatformEventType type, long timestamp) {\n@@ -91,1 +91,1 @@\n-                jvm.emitEvent(type.getId(), JVM.counterTime(), 0);\n+                jvm.emitEvent(type.getId(), timestamp, 0);\n@@ -194,0 +194,1 @@\n+        long timestamp = JVM.counterTime();\n@@ -197,1 +198,1 @@\n-                requestHook.execute();\n+                requestHook.execute(timestamp);\n@@ -203,1 +204,1 @@\n-        return run_requests(entries);\n+        return run_requests(entries, JVM.counterTime());\n@@ -207,1 +208,1 @@\n-    private static long run_requests(Collection<RequestHook> entries) {\n+    private static long run_requests(Collection<RequestHook> entries, long timestamp) {\n@@ -252,1 +253,1 @@\n-                he.execute();\n+                he.execute(timestamp);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/RequestEngine.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"}]}