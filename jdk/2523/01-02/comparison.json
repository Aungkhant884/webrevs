{"files":[{"patch":"@@ -35,0 +35,2 @@\n+import java.util.Optional;\n+import java.util.function.BiConsumer;\n@@ -69,3 +71,13 @@\n-    private static final MemoryPoolMXBean CODE_CACHE_MX_BEAN = ManagementFactory\n-        .getMemoryPoolMXBeans().stream()\n-        .filter(pool -> pool.getName().equals(\"CodeCache\")).findFirst().get();\n+    private static final Optional<MemoryPoolMXBean> NON_SEGMENTED_CODE_CACHE_POOL;\n+    private static final Optional<MemoryPoolMXBean> PROFILED_NMETHODS_POOL;\n+    private static final Optional<MemoryPoolMXBean> NON_PROFILED_NMETHODS_POOL ;\n+\n+    static {\n+        var pools = ManagementFactory.getMemoryPoolMXBeans();\n+        NON_SEGMENTED_CODE_CACHE_POOL = pools.stream()\n+            .filter(pool -> pool.getName().equals(\"CodeCache\")).findFirst();\n+        PROFILED_NMETHODS_POOL = pools.stream()\n+            .filter(pool -> pool.getName().equals(\"CodeHeap 'profiled nmethods'\")).findFirst();\n+        NON_PROFILED_NMETHODS_POOL = pools.stream()\n+            .filter(pool -> pool.getName().equals(\"CodeHeap 'non-profiled nmethods'\")).findFirst();\n+    }\n@@ -78,1 +90,11 @@\n-        MemoryUsage usage = CODE_CACHE_MX_BEAN.getUsage();\n+        var result = new Object() { boolean value = false; };\n+\n+        BiConsumer<MemoryPoolMXBean, Integer> check = (pool, limit) -> {\n+            var usage = pool.getUsage();\n+            result.value |= usage.getMax() - usage.getUsed() < limit;\n+        };\n+\n+        \/\/ Limit numbers are arbitrary, feel free to change if arguably necessary\n+        NON_SEGMENTED_CODE_CACHE_POOL.ifPresent(pool -> check.accept(pool, 2_000_000));\n+        PROFILED_NMETHODS_POOL.ifPresent(pool -> check.accept(pool, 1_000_000));\n+        NON_PROFILED_NMETHODS_POOL.ifPresent(pool -> check.accept(pool, 1_000_000));\n@@ -80,2 +102,1 @@\n-        \/\/ Number 2M is arbitrary, can be changed if need arises\n-        return usage.getMax() - usage.getUsed() < 2000000;\n+        return result.value;\n@@ -104,1 +125,2 @@\n-        for ( int i = nextInt(MAX_CYCLES); i > 0; i-- ) {\n+        final int cyclesToBuild = nextInt(MAX_CYCLES);\n+        for ( int i = 0; i < cyclesToBuild; i++) {\n@@ -107,1 +129,1 @@\n-                        \" Has only been able to achieve \" + (MAX_CYCLES - i) + \" out of \" + MAX_CYCLES);\n+                        \" Has only been able to achieve \" + i + \" out of \" + cyclesToBuild);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/meth\/share\/MHTransformationGen.java","additions":30,"deletions":8,"binary":false,"changes":38,"status":"modified"}]}