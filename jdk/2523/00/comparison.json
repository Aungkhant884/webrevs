{"files":[{"patch":"@@ -1426,0 +1426,10 @@\n+WB_ENTRY(jlong, WB_CodeCacheTotalSize(JNIEnv* env, jobject o, jint blob_type))\n+  CodeHeap* heap = WhiteBox::get_code_heap(blob_type);\n+  return (heap == NULL) ? -1 : (jlong) (heap->high_boundary() - heap->low_boundary());\n+WB_END\n+\n+WB_ENTRY(jlong, WB_GetCodeCacheUnallocatedCapacity(JNIEnv* env, jobject o, jint blob_type))\n+  CodeHeap* heap = WhiteBox::get_code_heap(blob_type);\n+  return (heap == NULL) ? -1 : (jlong)heap->unallocated_capacity();\n+WB_END\n+\n@@ -2480,0 +2490,2 @@\n+  {CC\"getCodeCacheTotalSize\", CC\"(I)J\",               (void*)&WB_CodeCacheTotalSize},\n+  {CC\"getCodeCacheUnallocatedCapacity\",  CC\"(I)J\",    (void*)&WB_GetCodeCacheUnallocatedCapacity},\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -144,7 +144,1 @@\n-vmTestbase\/vm\/mlvm\/meth\/func\/java\/throwException\/Test.java 8058176 generic-all\n-vmTestbase\/vm\/mlvm\/meth\/stress\/compiler\/deoptimize\/Test.java#id1 8058176 generic-all\n-vmTestbase\/vm\/mlvm\/meth\/stress\/compiler\/i2c_c2i\/Test.java 8058176 generic-all\n-vmTestbase\/vm\/mlvm\/meth\/stress\/compiler\/sequences\/Test.java 8058176 generic-all\n-vmTestbase\/vm\/mlvm\/meth\/stress\/gc\/callSequencesDuringGC\/Test.java 8058176 generic-all\n-vmTestbase\/vm\/mlvm\/meth\/stress\/java\/sequences\/Test.java 8058176 generic-all\n-vmTestbase\/vm\/mlvm\/meth\/stress\/jdi\/breakpointInCompiledCode\/Test.java 8058176 generic-all\n+vmTestbase\/vm\/mlvm\/meth\/stress\/jdi\/breakpointInCompiledCode\/Test.java 8257761 generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+ * @build sun.hotspot.WhiteBox\n@@ -42,0 +43,1 @@\n+ * @run driver ClassFileInstaller sun.hotspot.WhiteBox\n@@ -44,1 +46,5 @@\n- * @run main\/othervm vm.mlvm.meth.func.java.throwException.Test\n+ * @run main\/othervm\n+ *      -Xbootclasspath\/a:.\n+ *      -XX:+UnlockDiagnosticVMOptions\n+ *      -XX:+WhiteBoxAPI\n+ *      vm.mlvm.meth.func.java.throwException.Test\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/meth\/func\/java\/throwException\/Test.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+ * @build sun.hotspot.WhiteBox\n@@ -43,0 +44,1 @@\n+ * @run driver ClassFileInstaller sun.hotspot.WhiteBox\n@@ -46,0 +48,3 @@\n+ *      -Xbootclasspath\/a:.\n+ *      -XX:+UnlockDiagnosticVMOptions\n+ *      -XX:+WhiteBoxAPI\n@@ -53,0 +58,1 @@\n+ *      -debugee.vmkeys=\" -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI ${test.vm.opts} ${test.java.opts}\"\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/meth\/func\/jdi\/breakpoint\/Test.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+ * @build sun.hotspot.WhiteBox\n@@ -44,0 +45,1 @@\n+ * @run driver ClassFileInstaller sun.hotspot.WhiteBox\n@@ -53,0 +55,3 @@\n+ *      -Xbootclasspath\/a:.\n+ *      -XX:+UnlockDiagnosticVMOptions\n+ *      -XX:+WhiteBoxAPI\n@@ -58,1 +63,1 @@\n- *      -debugee.vmkeys=\"-cp .\/bin\/classes${path.separator}${test.class.path}\"\n+ *      -debugee.vmkeys=\"-Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -cp .\/bin\/classes${path.separator}${test.class.path} \"\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/meth\/func\/jdi\/breakpointOtherStratum\/Test.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -56,0 +56,3 @@\n+import sun.hotspot.WhiteBox;\n+import sun.hotspot.code.BlobType;\n+\n@@ -66,0 +69,2 @@\n+    private static final WhiteBox WHITE_BOX = WhiteBox.getWhiteBox();\n+\n@@ -91,0 +96,6 @@\n+            if (WHITE_BOX.isCodeCacheEffectivelyFull(BlobType.All.id)) {\n+                Env.traceNormal(\"Not enought code cache to build up MH sequences anymore. \" +\n+                        \" Has only been able to achieve \" + (MAX_CYCLES - i) + \" out of \" + MAX_CYCLES);\n+                break;\n+            }\n+\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/meth\/share\/MHTransformationGen.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+ * @build sun.hotspot.WhiteBox\n@@ -43,0 +44,1 @@\n+ * @run driver ClassFileInstaller sun.hotspot.WhiteBox\n@@ -48,0 +50,3 @@\n+ *      -Xbootclasspath\/a:.\n+ *      -XX:+UnlockDiagnosticVMOptions\n+ *      -XX:+WhiteBoxAPI\n@@ -63,0 +68,1 @@\n+ * @build sun.hotspot.WhiteBox\n@@ -64,0 +70,1 @@\n+ * @run driver ClassFileInstaller sun.hotspot.WhiteBox\n@@ -69,0 +76,3 @@\n+ *      -Xbootclasspath\/a:.\n+ *      -XX:+UnlockDiagnosticVMOptions\n+ *      -XX:+WhiteBoxAPI\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/meth\/stress\/compiler\/deoptimize\/Test.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+ * @build sun.hotspot.WhiteBox\n@@ -51,0 +52,1 @@\n+ * @run driver ClassFileInstaller sun.hotspot.WhiteBox\n@@ -53,1 +55,5 @@\n- * @run main\/othervm vm.mlvm.meth.stress.compiler.i2c_c2i.Test\n+ * @run main\/othervm\n+ *      -Xbootclasspath\/a:.\n+ *      -XX:+UnlockDiagnosticVMOptions\n+ *      -XX:+WhiteBoxAPI\n+ *      vm.mlvm.meth.stress.compiler.i2c_c2i.Test\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/meth\/stress\/compiler\/i2c_c2i\/Test.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+ * @build sun.hotspot.WhiteBox\n@@ -42,0 +43,1 @@\n+ * @run driver ClassFileInstaller sun.hotspot.WhiteBox\n@@ -45,0 +47,3 @@\n+ *      -Xbootclasspath\/a:.\n+ *      -XX:+UnlockDiagnosticVMOptions\n+ *      -XX:+WhiteBoxAPI\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/meth\/stress\/compiler\/sequences\/Test.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+ * @build sun.hotspot.WhiteBox\n@@ -46,0 +47,1 @@\n+ * @run driver ClassFileInstaller sun.hotspot.WhiteBox\n@@ -48,1 +50,5 @@\n- * @run main\/othervm vm.mlvm.meth.stress.gc.callSequencesDuringGC.Test -stressIterationsFactor 1000\n+ * @run main\/othervm\n+ *      -Xbootclasspath\/a:.\n+ *      -XX:+UnlockDiagnosticVMOptions\n+ *      -XX:+WhiteBoxAPI\n+ *       vm.mlvm.meth.stress.gc.callSequencesDuringGC.Test -stressIterationsFactor 1000\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/meth\/stress\/gc\/callSequencesDuringGC\/Test.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+ * @build sun.hotspot.WhiteBox\n@@ -49,0 +50,1 @@\n+ * @run driver ClassFileInstaller sun.hotspot.WhiteBox\n@@ -51,1 +53,5 @@\n- * @run main\/othervm vm.mlvm.meth.stress.java.sequences.Test\n+ * @run main\/othervm\n+ *      -Xbootclasspath\/a:.\n+ *      -XX:+UnlockDiagnosticVMOptions\n+ *      -XX:+WhiteBoxAPI\n+ *      vm.mlvm.meth.stress.java.sequences.Test\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/meth\/stress\/java\/sequences\/Test.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+ * @build sun.hotspot.WhiteBox\n@@ -44,0 +45,1 @@\n+ * @run driver ClassFileInstaller sun.hotspot.WhiteBox\n@@ -47,0 +49,3 @@\n+ *      -Xbootclasspath\/a:.\n+ *      -XX:+UnlockDiagnosticVMOptions\n+ *      -XX:+WhiteBoxAPI\n@@ -55,1 +60,1 @@\n- *      -debugee.vmkeys=\"${test.vm.opts} ${test.java.opts}\"\n+ *      -debugee.vmkeys=\" -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI ${test.vm.opts} ${test.java.opts}\"\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/mlvm\/meth\/stress\/jdi\/breakpointInCompiledCode\/Test.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -373,0 +373,10 @@\n+\n+  public native long getCodeCacheTotalSize(int blobType);\n+  public native long getCodeCacheUnallocatedCapacity(int blobType);\n+  public boolean isCodeCacheEffectivelyFull(int blobType) {\n+      long unallocated = getCodeCacheUnallocatedCapacity(blobType);\n+\n+      \/\/ Number 2M is arbitrary, can be changed if need arises\n+      return unallocated == -1 ? true : unallocated < 2000000;\n+  }\n+\n","filename":"test\/lib\/sun\/hotspot\/WhiteBox.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"}]}