{"files":[{"patch":"@@ -1650,0 +1650,6 @@\n+#ifdef COMPILER2\n+    if (ReplayReduce && compiler_data() != NULL) {\n+      \/\/ Dump C2 \"reduced\" inlining data.\n+      ((Compile*)compiler_data())->dump_inline_data_reduced(out);\n+    }\n+#endif\n","filename":"src\/hotspot\/share\/ci\/ciEnv.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -636,0 +636,1 @@\n+    reset();\n@@ -811,1 +812,0 @@\n-    reset();\n","filename":"src\/hotspot\/share\/ci\/ciReplay.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -311,0 +311,3 @@\n+  product(bool, ReplayReduce, false, EXPERIMENTAL,                          \\\n+          \"Enable features to facilitate replay file reduction\")            \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/compiler\/compiler_globals.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -716,2 +716,2 @@\n-void InlineTree::dump_replay_data(outputStream* out) {\n-  out->print(\" %d %d %d \", inline_level(), caller_bci(), _late_inline);\n+void InlineTree::dump_replay_data(outputStream* out, int depth_adjust) {\n+  out->print(\" %d %d %d \", inline_level() + depth_adjust, caller_bci(), _late_inline);\n@@ -720,1 +720,1 @@\n-    _subtrees.at(i)->dump_replay_data(out);\n+    _subtrees.at(i)->dump_replay_data(out, depth_adjust);\n","filename":"src\/hotspot\/share\/opto\/bytecodeInfo.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4576,0 +4576,27 @@\n+void Compile::dump_inline_data_reduced(outputStream* out) {\n+  InlineTree* inl_tree = ilt();\n+  if (inl_tree == NULL) {\n+    return;\n+  }\n+  \/\/ Enable interative replay file reduction\n+  \/\/ Output \"compile\" lines for depth 1 subtrees,\n+  \/\/ simulating that those trees were compiled\n+  \/\/ instead of inlined.\n+  for (int i = 0; i < inl_tree->subtrees().length(); ++i) {\n+    InlineTree* sub = inl_tree->subtrees().at(i);\n+    if (sub->inline_level() != 1) {\n+      continue;\n+    }\n+\n+    ciMethod* method = sub->method();\n+    int entry_bci = -1;\n+    int comp_level = env()->task()->comp_level();\n+    out->print(\"compile \");\n+    method->dump_name_as_ascii(out);\n+    out->print(\" %d %d\", entry_bci, comp_level);\n+    out->print(\" inline %d\", sub->count());\n+    sub->dump_replay_data(out, -1);\n+    out->cr();\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":27,"deletions":0,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -509,0 +509,1 @@\n+  void dump_inline_data_reduced(outputStream* out);\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -95,1 +95,0 @@\n-  int         inline_level()      const { return stack_depth(); }\n@@ -127,0 +126,1 @@\n+  int         inline_level()      const { return stack_depth(); }\n@@ -144,1 +144,1 @@\n-  void dump_replay_data(outputStream* out);\n+  void dump_replay_data(outputStream* out, int depth_adjust = 0);\n","filename":"src\/hotspot\/share\/opto\/parse.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1701,1 +1701,1 @@\n-  static bool skip_replay = ReplayCompiles; \/\/ Do not overwrite file during replay\n+  static bool skip_replay = ReplayCompiles && !ReplayReduce; \/\/ Do not overwrite file during replay\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}