{"files":[{"patch":"@@ -1650,0 +1650,6 @@\n+#ifdef COMPILER2\n+    if (ReplayReduce && compiler_data() != NULL) {\n+      \/\/ Dump C2 \"reduced\" inlining data.\n+      ((Compile*)compiler_data())->dump_inline_data_reduced(out);\n+    }\n+#endif\n","filename":"src\/hotspot\/share\/ci\/ciEnv.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -636,0 +636,1 @@\n+    reset();\n@@ -734,7 +735,1 @@\n-    const char* comp_level_label = \"comp_level\";\n-    int comp_level = parse_int(comp_level_label);\n-    \/\/ old version w\/o comp_level\n-    if (had_error() && (error_message() == comp_level_label)) {\n-      \/\/ use highest available tier\n-      comp_level = CompilationPolicy::highest_compile_level();\n-    }\n+    int comp_level = parse_int(\"comp_level\");\n@@ -811,1 +806,0 @@\n-    reset();\n","filename":"src\/hotspot\/share\/ci\/ciReplay.cpp","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -311,0 +311,3 @@\n+  product(bool, ReplayReduce, false, EXPERIMENTAL,                          \\\n+          \"Enable features to facilitate replay file reduction\")            \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/compiler\/compiler_globals.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -716,2 +716,2 @@\n-void InlineTree::dump_replay_data(outputStream* out) {\n-  out->print(\" %d %d %d \", inline_level(), caller_bci(), _late_inline);\n+void InlineTree::dump_replay_data(outputStream* out, int depth_adjust) {\n+  out->print(\" %d %d %d \", inline_level() + depth_adjust, caller_bci(), _late_inline);\n@@ -720,1 +720,1 @@\n-    _subtrees.at(i)->dump_replay_data(out);\n+    _subtrees.at(i)->dump_replay_data(out, depth_adjust);\n","filename":"src\/hotspot\/share\/opto\/bytecodeInfo.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4576,0 +4576,29 @@\n+void Compile::dump_inline_data_reduced(outputStream* out) {\n+  assert(ReplayReduce, \"\");\n+\n+  InlineTree* inl_tree = ilt();\n+  if (inl_tree == NULL) {\n+    return;\n+  }\n+  \/\/ Enable iterative replay file reduction\n+  \/\/ Output \"compile\" lines for depth 1 subtrees,\n+  \/\/ simulating that those trees were compiled\n+  \/\/ instead of inlined.\n+  for (int i = 0; i < inl_tree->subtrees().length(); ++i) {\n+    InlineTree* sub = inl_tree->subtrees().at(i);\n+    if (sub->inline_level() != 1) {\n+      continue;\n+    }\n+\n+    ciMethod* method = sub->method();\n+    int entry_bci = -1;\n+    int comp_level = env()->task()->comp_level();\n+    out->print(\"compile \");\n+    method->dump_name_as_ascii(out);\n+    out->print(\" %d %d\", entry_bci, comp_level);\n+    out->print(\" inline %d\", sub->count());\n+    sub->dump_replay_data(out, -1);\n+    out->cr();\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":29,"deletions":0,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -509,0 +509,1 @@\n+  void dump_inline_data_reduced(outputStream* out);\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -95,1 +95,0 @@\n-  int         inline_level()      const { return stack_depth(); }\n@@ -127,0 +126,1 @@\n+  int         inline_level()      const { return stack_depth(); }\n@@ -144,1 +144,1 @@\n-  void dump_replay_data(outputStream* out);\n+  void dump_replay_data(outputStream* out, int depth_adjust = 0);\n","filename":"src\/hotspot\/share\/opto\/parse.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1701,1 +1701,1 @@\n-  static bool skip_replay = ReplayCompiles; \/\/ Do not overwrite file during replay\n+  static bool skip_replay = ReplayCompiles && !ReplayReduce; \/\/ Do not overwrite file during replay\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,80 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8011675\n- * @library \/ \/test\/lib\n- * @summary testing of ciReplay with using generated by VM replay.txt w\/o comp_level\n- * @requires vm.flightRecorder != true & vm.compMode != \"Xint\" & vm.debug == true &\n- *           (vm.opt.TieredStopAtLevel == null | vm.opt.TieredStopAtLevel == 1 | vm.opt.TieredStopAtLevel == 4)\n- * @modules java.base\/jdk.internal.misc\n- * @build jdk.test.whitebox.WhiteBox\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n- * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n- *      compiler.ciReplay.TestVMNoCompLevel\n- *\/\n-\n-package compiler.ciReplay;\n-\n-import java.io.IOException;\n-import java.nio.file.Files;\n-import java.nio.file.Paths;\n-import java.nio.file.Path;\n-import java.nio.file.StandardOpenOption;\n-import java.util.List;\n-\n-public class TestVMNoCompLevel extends CiReplayBase {\n-    public static void main(String args[]) {\n-        new TestVMNoCompLevel().runTest(false);\n-    }\n-\n-    @Override\n-    public void testAction() {\n-        try {\n-            Path replayFilePath = Paths.get(REPLAY_FILE_NAME);\n-            List<String> replayContent = Files.readAllLines(replayFilePath);\n-            for (int i = 0; i < replayContent.size(); i++) {\n-                String line = replayContent.get(i);\n-                if (line.startsWith(\"compile \")) {\n-                    replayContent.set(i, line.substring(0, line.lastIndexOf(\" \")));\n-                }\n-            }\n-            Files.write(replayFilePath, replayContent, StandardOpenOption.TRUNCATE_EXISTING);\n-        } catch (IOException ioe) {\n-            throw new Error(\"Failed to read\/write replay data: \" + ioe, ioe);\n-        }\n-        if (CLIENT_VM_AVAILABLE) {\n-            if (SERVER_VM_AVAILABLE) {\n-                negativeTest(CLIENT_VM_OPTION);\n-            } else {\n-                positiveTest(CLIENT_VM_OPTION);\n-            }\n-        }\n-        if (SERVER_VM_AVAILABLE) {\n-            positiveTest(TIERED_DISABLED_VM_OPTION, SERVER_VM_OPTION);\n-            positiveTest(TIERED_ENABLED_VM_OPTION, SERVER_VM_OPTION);\n-        }\n-    }\n-}\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/ciReplay\/TestVMNoCompLevel.java","additions":0,"deletions":80,"binary":false,"changes":80,"status":"deleted"}]}