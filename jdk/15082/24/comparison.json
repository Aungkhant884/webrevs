{"files":[{"patch":"@@ -2333,0 +2333,2 @@\n+\n+  update_parallel_gc_threads_cpu_time();\n@@ -2417,0 +2419,18 @@\n+void G1CollectedHeap::update_parallel_gc_threads_cpu_time() {\n+  assert(Thread::current()->is_VM_thread(),\n+         \"Must be called from VM thread to avoid races\");\n+  if (!UsePerfData || !os::is_thread_cpu_time_supported()) {\n+    return;\n+  }\n+  WorkerThreads* worker_threads = workers();\n+  if (worker_threads != NULL) {\n+    ThreadTotalCPUTimeClosure tttc(_perf_parallel_worker_threads_cpu_time, true);\n+    \/\/ Currently parallel worker threads never terminate (JDK-8081682), so it is\n+    \/\/ safe for VMThread to read their CPU times. However, if JDK-8087340 is\n+    \/\/ resolved so they terminate, we should rethink if it is still safe.\n+    worker_threads->threads_do(&tttc);\n+  }\n+\n+  CollectedHeap::publish_total_cpu_time();\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -375,0 +375,2 @@\n+ void update_parallel_gc_threads_cpu_time();\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -465,0 +465,8 @@\n+\n+  if (UsePerfData && os::is_thread_cpu_time_supported()) {\n+    EXCEPTION_MARK;\n+\n+    _g1_concurrent_mark_threads_cpu_time =\n+        PerfDataManager::create_counter(SUN_THREADS_GCCPU, \"g1_conc_mark\",\n+                                        PerfData::U_Ticks, CHECK);\n+  }\n@@ -2080,0 +2088,11 @@\n+void G1ConcurrentMark::update_concurrent_mark_threads_cpu_time() {\n+  assert(Thread::current() == cm_thread(),\n+         \"Must be called from _cmThread to avoid races\");\n+  if (!UsePerfData || !os::is_thread_cpu_time_supported()) {\n+    return;\n+  }\n+  ThreadTotalCPUTimeClosure tttc(_g1_concurrent_mark_threads_cpu_time, true);\n+  tttc.do_thread(cm_thread());\n+  threads_do(&tttc);\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -367,0 +367,3 @@\n+  \/\/ Perf data for CPU time consumed by concurrent mark threads.\n+  PerfCounter* _g1_concurrent_mark_threads_cpu_time;\n+\n@@ -452,0 +455,3 @@\n+  \/\/ Update the perf data counter _g1_concurrent_mark_threads_cpu_time.\n+  void update_concurrent_mark_threads_cpu_time();\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -137,0 +137,2 @@\n+\n+    cm()->update_concurrent_mark_threads_cpu_time();\n@@ -172,0 +174,1 @@\n+  cm()->update_concurrent_mark_threads_cpu_time();\n@@ -231,0 +234,1 @@\n+  cm()->update_concurrent_mark_threads_cpu_time();\n@@ -240,0 +244,1 @@\n+  cm()->update_concurrent_mark_threads_cpu_time();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMarkThread.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+#include \"runtime\/thread.hpp\"\n@@ -115,0 +116,7 @@\n+  if (UsePerfData && os::is_thread_cpu_time_supported()) {\n+    EXCEPTION_MARK;\n+    _g1_concurrent_refine_threads_cpu_time =\n+        PerfDataManager::create_counter(SUN_THREADS_GCCPU, \"g1_conc_refine\",\n+                                        PerfData::U_Ticks, CHECK_JNI_ERR);\n+  }\n+\n@@ -155,0 +163,13 @@\n+void G1ConcurrentRefineThreadControl::update_threads_cpu_time() {\n+  \/\/ The primary thread (_threads[0]) updates the counter for all worker\n+  \/\/ threads, because:\n+  \/\/ the primary thread is always woken up first from being blocked on a monitor\n+  \/\/ when there is refinement work to do;\n+  \/\/ the primary thread is started last and stopped first, so it will not risk\n+  \/\/ reading CPU time of a terminated worker thread.\n+  assert_current_thread_is_primary_refinement_thread();\n+  assert(UsePerfData && os::is_thread_cpu_time_supported(), \"Must be enabled\");\n+  ThreadTotalCPUTimeClosure tttc(_g1_concurrent_refine_threads_cpu_time, true);\n+  worker_threads_do(&tttc);\n+}\n+\n@@ -458,0 +479,4 @@\n+\n+void G1ConcurrentRefine::update_concurrent_refine_threads_cpu_time() {\n+  _thread_control.update_threads_cpu_time();\n+}\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefine.cpp","additions":25,"deletions":0,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"runtime\/perfData.hpp\"\n@@ -49,0 +50,3 @@\n+    \/\/ Perf data for CPU time consumed by concurrent refine threads.\n+  PerfCounter* _g1_concurrent_refine_threads_cpu_time;\n+\n@@ -74,0 +78,3 @@\n+\n+  \/\/ Update the perf data counter _g1_concurrent_refine_threads_cpu_time.\n+  void update_threads_cpu_time();\n@@ -221,0 +228,4 @@\n+\n+  \/\/ Update the perf data counter\n+  \/\/ G1ConcurrentRefineThreadControl::_g1_concurrent_refine_threads_cpu_time\n+  void update_concurrent_refine_threads_cpu_time();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefine.hpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -82,0 +82,1 @@\n+    maybe_update_threads_cpu_time();\n@@ -140,0 +141,1 @@\n+  void maybe_update_threads_cpu_time() override;\n@@ -185,0 +187,6 @@\n+void G1PrimaryConcurrentRefineThread::maybe_update_threads_cpu_time() {\n+  if (UsePerfData && os::is_thread_cpu_time_supported()) {\n+    cr()->update_concurrent_refine_threads_cpu_time();\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefineThread.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -74,0 +74,4 @@\n+  \/\/ Attempt to update concurrent refine threads stats.\n+  \/\/ Only overridden in G1PrimaryConcurrentRefineThread.\n+  virtual void maybe_update_threads_cpu_time() {};\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefineThread.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -195,0 +195,1 @@\n+  update_parallel_worker_threads_cpu_time();\n@@ -887,0 +888,13 @@\n+\n+void ParallelScavengeHeap::update_parallel_worker_threads_cpu_time() {\n+  assert(Thread::current()->is_VM_thread(),\n+         \"Must be called from VM thread to avoid races\");\n+  if (!UsePerfData || !os::is_thread_cpu_time_supported()) {\n+    return;\n+  }\n+  ThreadTotalCPUTimeClosure tttc(_perf_parallel_worker_threads_cpu_time, true);\n+  \/\/ Currently parallel worker threads in GCTaskManager never terminate, so it\n+  \/\/ is safe for VMThread to read their CPU times. If upstream changes this\n+  \/\/ behavior, we should rethink if it is still safe.\n+  gc_threads_do(&tttc);\n+}\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.cpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -104,0 +104,2 @@\n+  void update_parallel_worker_threads_cpu_time();\n+\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+#include \"runtime\/atomic.hpp\"\n@@ -160,0 +161,27 @@\n+void CollectedHeap::inc_total_cpu_time(jlong diff) {\n+#if defined(_LP64)\n+  Atomic::add(&_total_cpu_time_diff, diff);\n+#else\n+  jlong old_value;\n+  jlong fetched_value = Atomic::load(&_total_cpu_time_diff);\n+  do {\n+    jlong new_value = fetched_value + diff;\n+    old_value = fetched_value;\n+    fetched_value = Atomic::cmpxchg(&_total_cpu_time_diff, old_value, new_value);\n+  } while (old_value != fetched_value);\n+#endif\n+}\n+\n+void CollectedHeap::publish_total_cpu_time() {\n+  \/\/ Ensure that we are only incrementing atomically by using Atomic::cmpxchg\n+  \/\/ to set the value to zero after we obtain the new CPU time difference.\n+  jlong old_value;\n+  jlong fetched_value = Atomic::load(&_total_cpu_time_diff);\n+  jlong new_value = 0;\n+  do {\n+    old_value = fetched_value;\n+    fetched_value = Atomic::cmpxchg(&_total_cpu_time_diff, old_value, new_value);\n+  } while (old_value != fetched_value);\n+  _total_cpu_time->inc(fetched_value);\n+}\n+\n@@ -267,1 +295,1 @@\n-  if (UsePerfData) {\n+  if (UsePerfData && os::is_thread_cpu_time_supported()) {\n@@ -277,0 +305,9 @@\n+\n+    _total_cpu_time =\n+                PerfDataManager::create_counter(SUN_THREADS, \"total_gc_cpu_time\",\n+                                                PerfData::U_Ticks, CHECK);\n+    _total_cpu_time_diff = 0;\n+\n+    _perf_parallel_worker_threads_cpu_time =\n+                PerfDataManager::create_counter(SUN_THREADS_GCCPU, \"parallel_gc_workers\",\n+                                                PerfData::U_Ticks, CHECK);\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":38,"deletions":1,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -144,0 +144,14 @@\n+  \/\/ Perf counter to track total CPU time across all threads. Defined here in\n+  \/\/ order to be reused for all collectors.\n+  PerfCounter* _total_cpu_time;\n+\n+  \/\/ A long which atomically tracks how much CPU time has been spent doing GC\n+  \/\/ since the last time we called `publish_total_cpu_time()`.\n+  \/\/ It is incremented using Atomic::add() to prevent race conditions, and\n+  \/\/ is added to `_total_cpu_time` at the end of GC.\n+  volatile long _total_cpu_time_diff;\n+\n+  \/\/ Perf counter for CPU time of parallel GC threads. Defined here in order to\n+  \/\/ be reused for all collectors.\n+  PerfCounter* _perf_parallel_worker_threads_cpu_time;\n+\n@@ -197,0 +211,1 @@\n+\n@@ -475,0 +490,4 @@\n+  \/\/ Methods to modify and update counter for total CPU time spent doing GC.\n+  void inc_total_cpu_time(jlong diff);\n+  void publish_total_cpu_time();\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"gc\/shared\/collectedHeap.hpp\"\n@@ -43,0 +44,1 @@\n+#include \"runtime\/perfData.hpp\"\n@@ -49,0 +51,1 @@\n+PerfCounter* StringDedup::Processor::_concurrent_dedup_thread_cpu_time = NULL;\n@@ -67,0 +70,6 @@\n+  if (UsePerfData && os::is_thread_cpu_time_supported()) {\n+    EXCEPTION_MARK;\n+    _concurrent_dedup_thread_cpu_time =\n+        PerfDataManager::create_counter(SUN_THREADS_GCCPU, \"conc_dedup\",\n+                                         PerfData::U_Ticks, CHECK);\n+  }\n@@ -190,0 +199,4 @@\n+    if (UsePerfData && os::is_thread_cpu_time_supported()) {\n+      ThreadTotalCPUTimeClosure tttc(_concurrent_dedup_thread_cpu_time, true);\n+      tttc.do_thread(thread);\n+    }\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedupProcessor.cpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"runtime\/perfData.hpp\"\n@@ -50,0 +51,3 @@\n+  \/\/ Perf data for CPU time consumed by the string dedup thread.\n+  static PerfCounter* _concurrent_dedup_thread_cpu_time;\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedupProcessor.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"runtime\/perfData.hpp\"\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedupThread.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -76,0 +76,1 @@\n+  \"sun.threads.gc_cpu_time\",  \/\/ Subsystem for Sun Threads GC CPU\n@@ -536,0 +537,17 @@\n+\n+ThreadTotalCPUTimeClosure::~ThreadTotalCPUTimeClosure() {\n+    jlong net_cpu_time = _total - _counter->get_value();\n+    _counter->inc(net_cpu_time);\n+    if (_is_gc_threads) {\n+      Universe::heap()->inc_total_cpu_time(net_cpu_time);\n+    }\n+}\n+\n+void ThreadTotalCPUTimeClosure::do_thread(Thread* thread) {\n+    \/\/ The default code path (fast_thread_cpu_time()) asserts that\n+    \/\/ pthread_getcpuclockid() and clock_gettime() must return 0. Thus caller\n+    \/\/ must ensure the thread exists and has not terminated.\n+    assert(os::is_thread_cpu_time_supported(), \"os must support cpu time\");\n+    _total += os::thread_cpu_time(thread);\n+}\n+\n","filename":"src\/hotspot\/share\/runtime\/perfData.cpp","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"memory\/iterator.hpp\"\n@@ -64,0 +65,1 @@\n+  SUN_THREADS_GCCPU,    \/\/ Subsystem for Sun Threads GC CPU\n@@ -869,0 +871,17 @@\n+\/\/ Class to compute the total CPU time for a set of threads, then update an\n+\/\/ hsperfdata counter.\n+class ThreadTotalCPUTimeClosure: public ThreadClosure {\n+ private:\n+  jlong _total;\n+  PerfCounter* _counter;\n+  bool _is_gc_threads;\n+\n+ public:\n+  ThreadTotalCPUTimeClosure(PerfCounter* counter, bool is_gc_threads = false) :\n+      _total(0), _counter(counter), _is_gc_threads(is_gc_threads) {}\n+\n+  ~ThreadTotalCPUTimeClosure();\n+\n+  virtual void do_thread(Thread* thread);\n+};\n+\n","filename":"src\/hotspot\/share\/runtime\/perfData.hpp","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -109,0 +109,1 @@\n+PerfCounter*      VMThread::_perf_vm_thread_cpu_time = nullptr;\n@@ -133,1 +134,1 @@\n-  if (UsePerfData) {\n+  if (UsePerfData && os::is_thread_cpu_time_supported()) {\n@@ -139,0 +140,3 @@\n+    _perf_vm_thread_cpu_time =\n+                 PerfDataManager::create_counter(SUN_THREADS_GCCPU, \"vm\",\n+                                                 PerfData::U_Ticks, CHECK);\n@@ -291,0 +295,6 @@\n+  if (UsePerfData && os::is_thread_cpu_time_supported()) {\n+    assert(Thread::current() == this, \"Must be called from VM thread\");\n+    \/\/ Update vm_thread_cpu_time after each VM operation.\n+    ThreadTotalCPUTimeClosure tttc(_perf_vm_thread_cpu_time);\n+    tttc.do_thread(this);\n+  }\n","filename":"src\/hotspot\/share\/runtime\/vmThread.cpp","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -70,0 +70,1 @@\n+  static PerfCounter* _perf_vm_thread_cpu_time;\n","filename":"src\/hotspot\/share\/runtime\/vmThread.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,41 @@\n+import static jdk.test.lib.Asserts.*;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+\/*\n+ * @test\n+ * @bug 8315149\n+ * @summary Unit test to ensure CPU GC hsperf counters are published.\n+ * @requires vm.gc.G1\n+ *\n+ * @library \/test\/lib\n+ *\n+ * @run main\/othervm TestGcCounters\n+ *\/\n+public class TestGcCounters {\n+\n+    private static final String[] VM_ARGS = new String[] { \"-XX:+UsePerfData\" };\n+    private static final String SUN_THREADS = \"sun.threads\";\n+    private static final String SUN_THREADS_GCCPU = \"sun.threads.gc_cpu_time\";\n+\n+    public static void main(String[] args) throws Exception {\n+        testGcCpuCountersExist();\n+    }\n+\n+\n+    \/**\n+     * jcmd -J-XX:+UsePerfData pid PerfCounter.print\n+     *\/\n+     private static void testGcCpuCountersExist() throws Exception {\n+        OutputAnalyzer output = JcmdBase.jcmd(VM_ARGS,\n+                new String[] {\"PerfCounter.print\"});\n+\n+        output.shouldHaveExitValue(0);\n+        output.shouldContain(SUN_THREADS + \".total_gc_cpu_time\");\n+        output.shouldContain(SUN_THREADS_GCCPU + \".g1_conc_mark\");\n+        output.shouldContain(SUN_THREADS_GCCPU + \".g1_conc_refine\");\n+        output.shouldContain(SUN_THREADS_GCCPU + \".parallel_gc_workers\");\n+        output.shouldContain(SUN_THREADS_GCCPU + \".vm\");\n+    }\n+}\n+\n","filename":"test\/jdk\/sun\/tools\/jcmd\/TestGcCounters.java","additions":41,"deletions":0,"binary":false,"changes":41,"status":"added"}]}