{"files":[{"patch":"@@ -161,1 +161,1 @@\n-void CollectedHeap::inc_total_cpu_time(jlong diff) {\n+void CollectedHeap::inc_total_cpu_time(long diff) {\n@@ -166,1 +166,9 @@\n-  _total_cpu_time->inc(Atomic::load(&_total_cpu_time_diff));\n+  \/\/ Ensure that we are only incrementing atomically by using Atomic::cmpxchg\n+  \/\/ to set the value to zero after we obtain the new CPU time difference.\n+  long old_value;\n+  long fetched_value = Atomic::load(&_total_cpu_time_diff);\n+  do {\n+    old_value = fetched_value;\n+    fetched_value = Atomic::cmpxchg(&_total_cpu_time_diff, old_value, 0)\n+  } while (old_value != fetched_value);\n+  _total_cpu_time->inc(fetched_value);\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -148,1 +148,2 @@\n-  \/\/ A jlong to atomically track how much CPU time has been spent doing GC.\n+  \/\/ A long which atomically tracks how much CPU time has been spent doing GC\n+  \/\/ since the last time we called `publish_total_cpu_time()`.\n@@ -151,1 +152,1 @@\n-  volatile jlong _total_cpu_time_diff;\n+  volatile long _total_cpu_time_diff;\n@@ -490,1 +491,1 @@\n-  void inc_total_cpu_time(jlong diff);\n+  void inc_total_cpu_time(long diff);\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -13,1 +13,1 @@\n- * @run main\/othervm -XX:+UsePerfData TestGcCounters\n+ * @run main\/othervm TestGcCounters\n","filename":"test\/jdk\/sun\/tools\/jcmd\/TestGcCounters.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}