{"files":[{"patch":"@@ -2333,0 +2333,2 @@\n+\n+  update_parallel_gc_threads_cpu_time();\n@@ -2417,0 +2419,16 @@\n+void G1CollectedHeap::update_parallel_gc_threads_cpu_time() {\n+  assert(Thread::current()->is_VM_thread(),\n+         \"Must be called from VM thread to avoid races\");\n+  if (!UsePerfData || !os::is_thread_cpu_time_supported()) {\n+    return;\n+  }\n+  WorkerThreads* worker_threads = workers();\n+  if (worker_threads != NULL) {\n+    ThreadTotalCPUTimeClosure tttc(_perf_parallel_worker_threads_cpu_time);\n+    \/\/ Currently parallel worker threads never terminate (JDK-8081682), so it is\n+    \/\/ safe for VMThread to read their CPU times. If upstream fixes JDK-8087340\n+    \/\/ so they terminate, we should rethink if it is still safe.\n+    worker_threads->threads_do(&tttc);\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -375,0 +375,2 @@\n+ void update_parallel_gc_threads_cpu_time();\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -456,0 +456,8 @@\n+\n+  if (UsePerfData && os::is_thread_cpu_time_supported()) {\n+    EXCEPTION_MARK;\n+\n+    _g1_concurrent_mark_threads_cpu_time =\n+        PerfDataManager::create_counter(SUN_THREADS, \"g1_conc_mark_thread.cpu_time\",\n+                                        PerfData::U_Ticks, CHECK);\n+  }\n@@ -2070,0 +2078,11 @@\n+void G1ConcurrentMark::update_concurrent_mark_threads_cpu_time() {\n+  assert(Thread::current() == static_cast<Thread*>(cm_thread()),\n+         \"Must be called from _cmThread to avoid races\");\n+  if (!UsePerfData || !os::is_thread_cpu_time_supported()) {\n+    return;\n+  }\n+  ThreadTotalCPUTimeClosure tttc(_g1_concurrent_mark_threads_cpu_time);\n+  tttc.do_thread(cm_thread());\n+  threads_do(&tttc);\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -363,0 +363,3 @@\n+  \/\/ Perf data for CPU time consumed by concurrent mark threads.\n+  PerfCounter* _g1_concurrent_mark_threads_cpu_time;\n+\n@@ -448,0 +451,3 @@\n+  \/\/ Update the perf data counter _g1_concurrent_mark_threads_cpu_time.\n+  void update_concurrent_mark_threads_cpu_time();\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -137,0 +137,2 @@\n+\n+    cm()->update_concurrent_mark_threads_cpu_time();\n@@ -172,0 +174,1 @@\n+  cm()->update_concurrent_mark_threads_cpu_time();\n@@ -231,0 +234,1 @@\n+  cm()->update_concurrent_mark_threads_cpu_time();\n@@ -240,0 +244,1 @@\n+  cm()->update_concurrent_mark_threads_cpu_time();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMarkThread.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"gc\/shared\/collectedHeap.hpp\"\n@@ -115,0 +116,7 @@\n+  if (UsePerfData && os::is_thread_cpu_time_supported()) {\n+    EXCEPTION_MARK;\n+    _g1_concurrent_refine_threads_cpu_time =\n+        PerfDataManager::create_counter(SUN_THREADS, \"g1_conc_refine_thread.cpu_time\",\n+                                        PerfData::U_Ticks, CHECK_JNI_ERR);\n+  }\n+\n@@ -155,0 +163,14 @@\n+void G1ConcurrentRefineThreadControl::update_threads_cpu_time() {\n+  \/\/ The primary thread (_threads[0]) updates the counter for all worker\n+  \/\/ threads, because:\n+  \/\/ the primary thread is always woken up first from being blocked on a monitor\n+  \/\/ when there is refinement work to do (see comment in\n+  \/\/ G1ConcurrentRefineThread's constructor);\n+  \/\/ the primary thread is started last and stopped first, so it will not risk\n+  \/\/ reading CPU time of a terminated worker thread.\n+  assert_current_thread_is_primary_refinement_thread();\n+  assert(UsePerfData && os::is_thread_cpu_time_supported(), \"Must be enabled\");\n+  ThreadTotalCPUTimeClosure tttc(_g1_concurrent_refine_threads_cpu_time);\n+  worker_threads_do(&tttc);\n+}\n+\n@@ -458,0 +480,4 @@\n+\n+void G1ConcurrentRefine::update_concurrent_refine_threads_cpu_time() {\n+  _thread_control.update_threads_cpu_time();\n+}\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefine.cpp","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"runtime\/perfData.hpp\"\n@@ -49,0 +50,3 @@\n+    \/\/ Perf data for CPU time consumed by concurrent refine threads.\n+  PerfCounter* _g1_concurrent_refine_threads_cpu_time;\n+\n@@ -74,0 +78,3 @@\n+\n+  \/\/ Update the perf data counter _g1_concurrent_refine_threads_cpu_time.\n+  void update_threads_cpu_time();\n@@ -221,0 +228,4 @@\n+\n+  \/\/ Update the perf data counter\n+  \/\/ G1ConcurrentRefineThreadControl::_g1_concurrent_refine_threads_cpu_time\n+  void update_concurrent_refine_threads_cpu_time();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefine.hpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -82,0 +82,1 @@\n+    maybe_update_threads_cpu_time();\n@@ -140,0 +141,1 @@\n+  void maybe_update_threads_cpu_time() override;\n@@ -185,0 +187,6 @@\n+void G1PrimaryConcurrentRefineThread::maybe_update_threads_cpu_time() {\n+  if (UsePerfData && os::is_thread_cpu_time_supported()) {\n+    cr()->update_concurrent_refine_threads_cpu_time();\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefineThread.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -74,0 +74,4 @@\n+  \/\/ Attempt to update concurrent refine threads stats.\n+  \/\/ Only overridden in G1PrimaryConcurrentRefineThread.\n+  virtual void maybe_update_threads_cpu_time() {};\n+\n@@ -83,0 +87,5 @@\n+  \/\/ G1ConcurrentRefineThreadControl::update_threads_cpu_time() relies on the\n+  \/\/ primary thread at G1ConcurrentRefineThreadControl::_threads[0], and\n+  \/\/ _worker_id == 0.\n+  bool is_primary() { return (_worker_id == 0); }\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefineThread.hpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -195,0 +195,1 @@\n+  update_parallel_worker_threads_cpu_time();\n@@ -887,0 +888,13 @@\n+\n+void ParallelScavengeHeap::update_parallel_worker_threads_cpu_time() {\n+  assert(Thread::current()->is_VM_thread(),\n+         \"Must be called from VM thread to avoid races\");\n+  if (!UsePerfData || !os::is_thread_cpu_time_supported()) {\n+    return;\n+  }\n+  ThreadTotalCPUTimeClosure tttc(_perf_parallel_worker_threads_cpu_time);\n+  \/\/ Currently parallel worker threads in GCTaskManager never terminate, so it\n+  \/\/ is safe for VMThread to read their CPU times. If upstream changes this\n+  \/\/ behavior, we should rethink if it is still safe.\n+  gc_threads_do(&tttc);\n+}\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.cpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -104,0 +104,2 @@\n+  void update_parallel_worker_threads_cpu_time();\n+\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -267,1 +267,1 @@\n-  if (UsePerfData) {\n+  if (UsePerfData && os::is_thread_cpu_time_supported()) {\n@@ -277,0 +277,4 @@\n+\n+    _perf_parallel_worker_threads_cpu_time =\n+                PerfDataManager::create_counter(SUN_THREADS, \"par_gc_thread.cpu_time\",\n+                                                PerfData::U_Ticks, CHECK);\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+#include \"runtime\/perfData.hpp\"\n@@ -144,0 +145,4 @@\n+  \/\/ Perf counters for CPU time of parallel GC threads. Defined here in order to\n+  \/\/ be reused for all collectors.\n+  PerfCounter* _perf_parallel_worker_threads_cpu_time;\n+\n@@ -554,0 +559,25 @@\n+\/\/ Class to compute the total CPU time for a set of threads, then update an\n+\/\/ hsperfdata counter.\n+\n+class ThreadTotalCPUTimeClosure: public ThreadClosure {\n+ private:\n+  jlong _time_diff;\n+  PerfCounter* _counter;\n+\n+ public:\n+  ThreadTotalCPUTimeClosure(PerfCounter* counter) :\n+      _time_diff(0), _counter(counter) {}\n+\n+  ~ThreadTotalCPUTimeClosure() {\n+    _counter->inc(_time_diff);\n+  }\n+\n+  virtual void do_thread(Thread* thread) {\n+    \/\/ The default code path (fast_thread_cpu_time()) asserts that\n+    \/\/ pthread_getcpuclockid() and clock_gettime() must return 0. Thus caller\n+    \/\/ must ensure the thread exists and has not terminated.\n+    assert(os::is_thread_cpu_time_supported(), \"os must support cpu time\");\n+    _time_diff = os::thread_cpu_time(thread);\n+  }\n+};\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp","additions":30,"deletions":0,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+PerfCounter* StringDedup::Processor::_concurrent_dedup_thread_cpu_time = NULL;\n@@ -190,0 +191,4 @@\n+    if (UsePerfData && os::is_thread_cpu_time_supported()) {\n+      ThreadTotalCPUTimeClosure tttc(_concurrent_dedup_thread_cpu_time);\n+      tttc.do_thread(thread);\n+    }\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedupProcessor.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -50,0 +50,3 @@\n+  \/\/ Perf data for CPU time consumed by the string dedup thread.\n+  static PerfCounter* _concurrent_dedup_thread_cpu_time;\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedupProcessor.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -109,0 +109,1 @@\n+PerfCounter*      VMThread::_perf_vm_thread_cpu_time = nullptr;\n@@ -133,1 +134,1 @@\n-  if (UsePerfData) {\n+  if (UsePerfData && os::is_thread_cpu_time_supported()) {\n@@ -139,0 +140,3 @@\n+    _perf_vm_thread_cpu_time =\n+                 PerfDataManager::create_counter(SUN_THREADS, \"vm_thread.cpu_time\",\n+                                                 PerfData::U_Ticks, CHECK);\n@@ -291,0 +295,8 @@\n+  if (UsePerfData && os::is_thread_cpu_time_supported()) {\n+    assert(Thread::current() == static_cast<Thread*>(this),\n+           \"Must be called from VM thread\");\n+    \/\/ Update vm_thread_cpu_time after each VM operation.\n+    \/\/ _perf_vm_thread_cpu_time->set_value(os::current_thread_cpu_time());\n+    ThreadTotalCPUTimeClosure tttc(_perf_vm_thread_cpu_time);\n+    tttc.do_thread(this);\n+  }\n","filename":"src\/hotspot\/share\/runtime\/vmThread.cpp","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -70,0 +70,1 @@\n+  static PerfCounter* _perf_vm_thread_cpu_time;\n","filename":"src\/hotspot\/share\/runtime\/vmThread.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}