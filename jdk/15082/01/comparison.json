{"files":[{"patch":"@@ -2333,0 +2333,2 @@\n+\n+  update_parallel_gc_threads_cpu_time();\n@@ -2417,0 +2419,16 @@\n+void G1CollectedHeap::update_parallel_gc_threads_cpu_time() {\n+  assert(Thread::current()->is_VM_thread(),\n+         \"Must be called from VM thread to avoid races\");\n+  if (!UsePerfData || !os::is_thread_cpu_time_supported()) {\n+    return;\n+  }\n+  WorkerThreads* worker_threads = workers();\n+  if (worker_threads != NULL) {\n+    ThreadTotalCPUTimeClosure tttc(_perf_parallel_gc_threads_cpu_time);\n+    \/\/ Currently parallel worker threads never terminate (JDK-8081682), so it is\n+    \/\/ safe for VMThread to read their CPU times. If upstream fixes JDK-8087340\n+    \/\/ so they terminate, we should rethink if it is still safe.\n+    worker_threads->threads_do(&tttc);\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -375,0 +375,2 @@\n+ void update_parallel_gc_threads_cpu_time();\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -456,0 +456,8 @@\n+\n+  if (UsePerfData && os::is_thread_cpu_time_supported()) {\n+    EXCEPTION_MARK;\n+\n+    _g1_concurrent_mark_threads_cpu_time =\n+        PerfDataManager::create_variable(NULL_NS, \"g1_conc_mark_thread_time\",\n+                                         PerfData::U_Ticks, CHECK);\n+  }\n@@ -2070,0 +2078,11 @@\n+void G1ConcurrentMark::update_concurrent_mark_threads_cpu_time() {\n+  assert(Thread::current() == static_cast<Thread*>(cm_thread()),\n+         \"Must be called from _cmThread to avoid races\");\n+  if (!UsePerfData || !os::is_thread_cpu_time_supported()) {\n+    return;\n+  }\n+  ThreadTotalCPUTimeClosure tttc(_g1_concurrent_mark_threads_cpu_time);\n+  tttc.do_thread(cm_thread());\n+  threads_do(&tttc);\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -363,0 +363,3 @@\n+  \/\/ Perf data for CPU time consumed by concurrent mark threads.\n+  PerfVariable* _g1_concurrent_mark_threads_cpu_time;\n+\n@@ -448,0 +451,3 @@\n+  \/\/ Update the perf data counter _g1_concurrent_mark_threads_cpu_time.\n+  void update_concurrent_mark_threads_cpu_time();\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -137,0 +137,2 @@\n+\n+    cm()->update_concurrent_mark_threads_cpu_time();\n@@ -172,0 +174,1 @@\n+  cm()->update_concurrent_mark_threads_cpu_time();\n@@ -231,0 +234,1 @@\n+  cm()->update_concurrent_mark_threads_cpu_time();\n@@ -240,0 +244,1 @@\n+  cm()->update_concurrent_mark_threads_cpu_time();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMarkThread.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"gc\/shared\/collectedHeap.hpp\"\n@@ -115,0 +116,7 @@\n+  if (UsePerfData && os::is_thread_cpu_time_supported()) {\n+    EXCEPTION_MARK;\n+    _g1_concurrent_refine_threads_cpu_time =\n+        PerfDataManager::create_variable(NULL_NS, \"g1_conc_refine_thread_time\",\n+                                         PerfData::U_Ticks, CHECK_JNI_ERR);\n+  }\n+\n@@ -155,0 +163,16 @@\n+void G1ConcurrentRefineThreadControl::update_threads_cpu_time() {\n+  \/\/ The primary thread (_threads[0]) updates the counter for all worker\n+  \/\/ threads, because:\n+  \/\/ the primary thread is always woken up first from being blocked on a monitor\n+  \/\/ when there is refinement work to do (see comment in\n+  \/\/ G1ConcurrentRefineThread's constructor);\n+  \/\/ the primary thread is started last and stopped first, so it will not risk\n+  \/\/ reading CPU time of a terminated worker thread.\n+  assert(Thread::current() == _threads[0],\n+         \"Must be called from G1ConcurrentRefineThreadControl::_threads[0] to \"\n+         \"avoid races\");\n+  assert(UsePerfData && os::is_thread_cpu_time_supported(), \"Must be enabled\");\n+  ThreadTotalCPUTimeClosure tttc(_g1_concurrent_refine_threads_cpu_time);\n+  worker_threads_do(&tttc);\n+}\n+\n@@ -458,0 +482,4 @@\n+\n+void G1ConcurrentRefine::update_concurrent_refine_threads_cpu_time() {\n+  _thread_control.update_threads_cpu_time();\n+}\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefine.cpp","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"runtime\/perfData.hpp\"\n@@ -49,0 +50,3 @@\n+    \/\/ Perf data for CPU time consumed by concurrent refine threads.\n+  PerfVariable* _g1_concurrent_refine_threads_cpu_time;\n+\n@@ -74,0 +78,3 @@\n+\n+  \/\/ Update the perf data counter _g1_concurrent_refine_threads_cpu_time.\n+  void update_threads_cpu_time();\n@@ -221,0 +228,4 @@\n+\n+  \/\/ Update the perf data counter\n+  \/\/ G1ConcurrentRefineThreadControl::_g1_concurrent_refine_threads_cpu_time\n+  void update_concurrent_refine_threads_cpu_time();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefine.hpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -82,0 +82,4 @@\n+\n+    if (UsePerfData && os::is_thread_cpu_time_supported() && is_primary()) {\n+      _cr->update_concurrent_refine_threads_cpu_time();\n+    }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefineThread.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -83,0 +83,5 @@\n+  \/\/ G1ConcurrentRefineThreadControl::update_threads_cpu_time() relies on the\n+  \/\/ primary thread at G1ConcurrentRefineThreadControl::_threads[0], and\n+  \/\/ _worker_id == 0.\n+  bool is_primary() { return (_worker_id == 0); }\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefineThread.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -195,0 +195,1 @@\n+  update_parallel_gc_threads_cpu_time();\n@@ -887,0 +888,13 @@\n+\n+void ParallelScavengeHeap::update_parallel_gc_threads_cpu_time() {\n+  assert(Thread::current()->is_VM_thread(),\n+         \"Must be called from VM thread to avoid races\");\n+  if (!UsePerfData || !os::is_thread_cpu_time_supported()) {\n+    return;\n+  }\n+  ThreadTotalCPUTimeClosure tttc(_perf_parallel_gc_threads_cpu_time);\n+  \/\/ Currently parallel worker threads in GCTaskManager never terminate, so it\n+  \/\/ is safe for VMThread to read their CPU times. If upstream changes this\n+  \/\/ behavior, we should rethink if it is still safe.\n+  gc_threads_do(&tttc);\n+}\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.cpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -104,0 +104,2 @@\n+  void update_parallel_gc_threads_cpu_time();\n+\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -277,0 +277,4 @@\n+\n+    _perf_parallel_gc_threads_cpu_time =\n+                PerfDataManager::create_variable(NULL_NS, \"par_gc_thread_time\",\n+                                                 PerfData::U_Ticks, CHECK);\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+#include \"runtime\/perfData.hpp\"\n@@ -144,0 +145,4 @@\n+  \/\/ Perf counters for CPU time of parallel GC threads. Defined here in order to\n+  \/\/ be reused for all collectors.\n+  PerfVariable* _perf_parallel_gc_threads_cpu_time;\n+\n@@ -554,0 +559,26 @@\n+\/\/ Class to compute the total CPU time for a set of threads, then update an\n+\/\/ hsperfdata counter.\n+\n+class ThreadTotalCPUTimeClosure: public ThreadClosure {\n+ private:\n+  jlong _total;\n+  PerfVariable* _counter;\n+\n+ public:\n+  ThreadTotalCPUTimeClosure(PerfVariable* counter) :\n+      _total(0), _counter(counter) {}\n+\n+  ~ThreadTotalCPUTimeClosure() {\n+    _counter->set_value(_total);\n+  }\n+\n+  virtual void do_thread(Thread* thread) {\n+    \/\/ The default code path (fast_thread_cpu_time()) asserts that\n+    \/\/ pthread_getcpuclockid() and clock_gettime() must return 0. Thus caller\n+    \/\/ must ensure the thread exists and has not terminated.\n+    assert(os::is_thread_cpu_time_supported(), \"os must support cpu time\");\n+    jlong cpu_time = os::thread_cpu_time(thread);\n+    _total += cpu_time;\n+  }\n+};\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp","additions":31,"deletions":0,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+PerfVariable* StringDedupThread::_g1_concurrent_dedup_thread_cpu_time = NULL;\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedupThread.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -43,0 +43,3 @@\n+  \/\/ Perf data for CPU time consumed by the string dedup thread.\n+  static PerfVariable* _g1_concurrent_dedup_thread_cpu_time;\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/stringdedup\/stringDedupThread.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -109,0 +109,1 @@\n+PerfVariable*     VMThread::_perf_vm_thread_cpu_time = nullptr;\n@@ -139,0 +140,3 @@\n+    _perf_vm_thread_cpu_time =\n+                 PerfDataManager::create_variable(NULL_NS, \"vm_thread_time\",\n+                                                  PerfData::U_Ticks, CHECK);\n@@ -291,0 +295,8 @@\n+  if (UsePerfData && os::is_thread_cpu_time_supported()) {\n+    assert(Thread::current() == static_cast<Thread*>(this),\n+           \"Must be called from VM thread\");\n+    \/\/ Update vm_thread_cpu_time after each VM operation.\n+    \/\/ perf_vm_thread_cpu_time()->set_value(os::current_thread_cpu_time());\n+    ThreadTotalCPUTimeClosure tttc(perf_vm_thread_cpu_time());\n+    tttc.do_thread(this);\n+  }\n","filename":"src\/hotspot\/share\/runtime\/vmThread.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -70,0 +70,1 @@\n+  static PerfVariable* _perf_vm_thread_cpu_time;\n@@ -126,0 +127,3 @@\n+  static PerfVariable* perf_vm_thread_cpu_time() {\n+    return _perf_vm_thread_cpu_time;\n+  }\n","filename":"src\/hotspot\/share\/runtime\/vmThread.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}