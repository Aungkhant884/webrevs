{"files":[{"patch":"@@ -50,2 +50,0 @@\n-import sun.jvm.hotspot.debugger.cdbg.CDebugger;\n-import sun.jvm.hotspot.debugger.cdbg.LoadObject;\n@@ -602,26 +600,2 @@\n-                    String symbol = t.nextToken();\n-                    Address addr = VM.getVM().getDebugger().lookup(null, symbol);\n-                    if (addr == null && VM.getVM().getDebugger().getOS().equals(\"win32\")) {\n-                        \/\/ On win32 symbols are prefixed with the dll name. Do the user\n-                        \/\/ a favor and see if this is a symbol in jvm.dll or java.dll.\n-                        addr = VM.getVM().getDebugger().lookup(null, \"jvm!\" + symbol);\n-                        if (addr == null) {\n-                            addr = VM.getVM().getDebugger().lookup(null, \"java!\" + symbol);\n-                        }\n-                    }\n-                    if (addr == null) {\n-                        out.println(\"Symbol not found\");\n-                        return;\n-                    }\n-                    out.print(addr);  \/\/ Print the address of the symbol.\n-                    CDebugger cdbg = VM.getVM().getDebugger().getCDebugger();\n-                    LoadObject loadObject = cdbg.loadObjectContainingPC(addr);\n-                    \/\/ Print the shared library path and the offset of the symbol.\n-                    if (loadObject != null) {\n-                        out.print(\": \" + loadObject.getName());\n-                        long diff = addr.minus(loadObject.getBase());\n-                        if (diff != 0L) {\n-                            out.print(\" + 0x\" + Long.toHexString(diff));\n-                        }\n-                    }\n-                    out.println();\n+                    String result = VM.getVM().getDebugger().findSymbol(t.nextToken());\n+                    out.println(result == null ? \"Symbol not found\" : result);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/CommandProcessor.java","additions":2,"deletions":28,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -112,0 +112,5 @@\n+  \/**\n+   * Find address and executable which contains symbol.\n+  *\/\n+  public String findSymbol(String symbol);\n+\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/Debugger.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2009, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -529,0 +529,28 @@\n+  @Override\n+  public String findSymbol(String symbol) {\n+    Address addr = lookup(null, symbol);\n+    if (addr == null && getOS().equals(\"win32\")) {\n+      \/\/ On win32 symbols are prefixed with the dll name. Do the user\n+      \/\/ a favor and see if this is a symbol in jvm.dll or java.dll.\n+      addr = lookup(null, \"jvm!\" + symbol);\n+      if (addr == null) {\n+        addr = lookup(null, \"java!\" + symbol);\n+      }\n+    }\n+    if (addr == null) {\n+      return null;\n+    }\n+    var builder = new StringBuilder(addr.toString());\n+    var cdbg = getCDebugger();\n+    var loadObject = cdbg.loadObjectContainingPC(addr);\n+    \/\/ Print the shared library path and the offset of the symbol\n+    if (loadObject != null) {\n+      builder.append(\": \").append(loadObject.getName());\n+      long diff = addr.minus(loadObject.getBase());\n+      if (diff != 0L) {\n+        builder.append(\" + 0x\").append(Long.toHexString(diff));\n+      }\n+    }\n+    return builder.toString();\n+  }\n+\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/DebuggerBase.java","additions":29,"deletions":1,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -426,0 +426,5 @@\n+\n+  @Override\n+  public String findSymbol(String symbol) {\n+    return execCommandOnServer(\"findsym\", Map.of(\"symbol\", symbol));\n+  }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/remote\/RemoteDebuggerClient.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -184,11 +184,15 @@\n-    ByteArrayOutputStream bout = new ByteArrayOutputStream();\n-    try (var out = new PrintStream(bout)) {\n-      if (command.equals(\"pmap\")) {\n-        (new PMap(debugger)).run(out, debugger);\n-      } else if (command.equals(\"pstack\")) {\n-        PStack pstack = new PStack(debugger);\n-        pstack.setVerbose(false);\n-        pstack.setConcurrentLocks((boolean)options.get(\"concurrentLocks\"));\n-        pstack.run(out, debugger);\n-      } else {\n-        throw new DebuggerException(command + \" is not supported in this debugger\");\n+    if (command.equals(\"findsym\")) {\n+      return debugger.findSymbol((String)options.get(\"symbol\"));\n+    } else {\n+      ByteArrayOutputStream bout = new ByteArrayOutputStream();\n+      try (var out = new PrintStream(bout)) {\n+        if (command.equals(\"pmap\")) {\n+          (new PMap(debugger)).run(out, debugger);\n+        } else if (command.equals(\"pstack\")) {\n+          PStack pstack = new PStack(debugger);\n+          pstack.setVerbose(false);\n+          pstack.setConcurrentLocks((boolean)options.get(\"concurrentLocks\"));\n+          pstack.run(out, debugger);\n+        } else {\n+          throw new DebuggerException(command + \" is not supported in this debugger\");\n+        }\n@@ -196,0 +200,1 @@\n+      return bout.toString();\n@@ -197,2 +202,0 @@\n-\n-    return bout.toString();\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/remote\/RemoteDebuggerServer.java","additions":16,"deletions":13,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -36,1 +36,2 @@\n- * @bug 8263342\n+ * @bug 8265505\n+ * @summary Test clhsdb command which should be run on debugd server\n@@ -40,1 +41,1 @@\n- * @run main\/othervm ClhsdbTestConnectArgument\n+ * @run main\/othervm RunCommandOnServerTest\n@@ -43,1 +44,1 @@\n-public class ClhsdbTestConnectArgument {\n+public class RunCommandOnServerTest {\n@@ -49,2 +50,0 @@\n-        System.out.println(\"Starting ClhsdbTestConnectArgument test\");\n-\n@@ -70,1 +69,1 @@\n-                console.println(\"class java.lang.Object\");\n+                console.println(\"findsym gHotSpotVMTypes\");\n@@ -79,1 +78,1 @@\n-            out.shouldMatch(\"^java\/lang\/Object @0x[0-9a-f]+$\"); \/\/ for \"class java.lang.Object\"\n+            out.shouldMatch(\"^0x[0-9a-f]+: .+\/libjvm\\\\.(so|dylib) \\\\+ 0x[0-9a-f]+$\");\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/sadebugd\/RunCommandOnServerTest.java","additions":6,"deletions":7,"binary":false,"changes":13,"previous_filename":"test\/hotspot\/jtreg\/serviceability\/sa\/sadebugd\/ClhsdbTestConnectArgument.java","status":"copied"}]}