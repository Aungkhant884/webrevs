{"files":[{"patch":"@@ -1624,0 +1624,5 @@\n+     * @apiNote\n+     * On platforms which do not support setting whether a file is readable,\n+     * this method does nothing and returns the value of the {@code readable}\n+     * parameter.\n+     *\n@@ -1706,0 +1711,5 @@\n+     * @apiNote\n+     * On platforms which do not support setting whether a file is executable,\n+     * this method does nothing and returns the value of the {@code executable}\n+     * parameter.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/io\/File.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -472,5 +472,0 @@\n-\n-    pathbuf = fileToNTPath(env, file, ids.path);\n-    if (pathbuf == NULL)\n-        return JNI_FALSE;\n-\n@@ -479,1 +474,1 @@\n-        return _waccess(pathbuf, 0) == 0 ? enable : JNI_FALSE;\n+        return enable;\n@@ -481,1 +476,3 @@\n-\n+    pathbuf = fileToNTPath(env, file, ids.path);\n+    if (pathbuf == NULL)\n+        return JNI_FALSE;\n","filename":"src\/java.base\/windows\/native\/libjava\/WinNTFileSystem_md.c","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2012, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,6 +25,4 @@\n- * @bug 4167472 5097703 6216563 6284003 6728842 6464744 8316000\n- * @summary Basic test for setWritable\/Readable\/Executable methods\n- * @library .. \/test\/lib\n- * @build jdk.test.lib.Platform\n- * @build SetAccess Util\n- * @run main SetAccess\n+   @bug 4167472 5097703 6216563 6284003 6728842 6464744\n+   @summary Basic test for setWritable\/Readable\/Executable methods\n+   @build SetAccess Util\n+   @run main SetAccess\n@@ -33,7 +31,3 @@\n-import java.io.File;\n-import java.io.FileOutputStream;\n-import java.io.OutputStream;\n-import java.nio.file.Files;\n-import java.nio.file.attribute.PosixFileAttributes;\n-import java.nio.file.attribute.PosixFilePermissions;\n-import jdk.test.lib.Platform;\n+import java.io.*;\n+import java.nio.file.*;\n+import java.nio.file.attribute.*;\n@@ -58,3 +52,0 @@\n-        if (f.exists() && !f.delete())\n-            throw new Exception(\"Can't delete test file: \" + f);\n-\n@@ -67,3 +58,0 @@\n-\n-        if (f.exists() && !f.delete())\n-            throw new Exception(\"Can't delete test dir: \" + f);\n@@ -73,13 +61,1 @@\n-        \/\/ Generic\n-        if (f.isFile()) {\n-            File no = new File(\"nonexistent\");\n-            assert !no.exists();\n-            if (no.setReadable(true, false))\n-                throw new Exception(no + \": setReadable(true, false) Succeeded\");\n-            if (no.setWritable(true, false))\n-                throw new Exception(no + \": setWritable(true, false) Succeeded\");\n-            if (no.setExecutable(true, false))\n-                throw new Exception(no + \": setExecutable(true, false) Succeeded\");\n-        }\n-\n-        if (!Platform.isWindows()) {\n+        if (!System.getProperty(\"os.name\").startsWith(\"Windows\")) {\n@@ -87,1 +63,1 @@\n-                throw new Exception(f + \": setReadOnly Failed\");\n+                 throw new Exception(f + \": setReadOnly Failed\");\n@@ -154,1 +130,2 @@\n-        } else { \/\/ Windows platform\n+        } else {\n+            \/\/Windows platform\n@@ -176,29 +153,0 @@\n-                if (f.isDirectory()) {\n-                    \/\/ setWritable should fail on directories because the DOS readonly\n-                    \/\/ attribute prevents a directory from being deleted.\n-                    if (f.setWritable(false, true))\n-                        throw new Exception(f + \": setWritable(false, true) Succeeded\");\n-                    if (f.setWritable(false, false))\n-                        throw new Exception(f + \": setWritable(false, false) Succeeded\");\n-                    if (f.setWritable(false))\n-                        throw new Exception(f + \": setWritable(false) Succeeded\");\n-                } else {\n-                    if (!f.setWritable(false, true) || f.canWrite())\n-                        throw new Exception(f + \": setWritable(false, true) Failed\");\n-                    if (!f.setWritable(false, false) || f.canWrite())\n-                        throw new Exception(f + \": setWritable(false, false) Failed\");\n-                    if (!f.setWritable(false) || f.canWrite())\n-                        throw new Exception(f + \": setWritable(false) Failed\");\n-                }\n-                if (f.setExecutable(false, true))\n-                    throw new Exception(f + \": setExecutable(false, true) Failed\");\n-                if (f.setExecutable(false, false))\n-                    throw new Exception(f + \": setExecutable(false, false) Failed\");\n-                if (f.setExecutable(false))\n-                    throw new Exception(f + \": setExecutable(false, true) Failed\");\n-                if (f.setReadable(false, true))\n-                    throw new Exception(f + \": setReadable(false, true) Failed\");\n-                if (f.setReadable(false, false))\n-                    throw new Exception(f + \": setReadable(false, false) Failed\");\n-                if (f.setReadable(false))\n-                    throw new Exception(f + \": setReadable(false, true) Failed\");\n@@ -206,0 +154,29 @@\n+            if (f.isDirectory()) {\n+                \/\/ setWritable should fail on directories because the DOS readonly\n+                \/\/ attribute prevents a directory from being deleted.\n+                if (f.setWritable(false, true))\n+                    throw new Exception(f + \": setWritable(false, true) Succeeded\");\n+                if (f.setWritable(false, false))\n+                    throw new Exception(f + \": setWritable(false, false) Succeeded\");\n+                if (f.setWritable(false))\n+                    throw new Exception(f + \": setWritable(false) Succeeded\");\n+            } else {\n+                if (!f.setWritable(false, true) || f.canWrite())\n+                    throw new Exception(f + \": setWritable(false, true) Failed\");\n+                if (!f.setWritable(false, false) || f.canWrite())\n+                    throw new Exception(f + \": setWritable(false, false) Failed\");\n+                if (!f.setWritable(false) || f.canWrite())\n+                    throw new Exception(f + \": setWritable(false) Failed\");\n+            }\n+            if (f.setExecutable(false, true))\n+                throw new Exception(f + \": setExecutable(false, true) Failed\");\n+            if (f.setExecutable(false, false))\n+                throw new Exception(f + \": setExecutable(false, false) Failed\");\n+            if (f.setExecutable(false))\n+                throw new Exception(f + \": setExecutable(false, true) Failed\");\n+            if (f.setReadable(false, true))\n+                throw new Exception(f + \": setReadable(false, true) Failed\");\n+            if (f.setReadable(false, false))\n+                throw new Exception(f + \": setReadable(false, false) Failed\");\n+            if (f.setReadable(false))\n+                throw new Exception(f + \": setReadable(false, true) Failed\");\n@@ -207,0 +184,2 @@\n+        if (f.exists() && !f.delete())\n+            throw new Exception(\"Can't delete test dir: \" + f);\n","filename":"test\/jdk\/java\/io\/File\/SetAccess.java","additions":43,"deletions":64,"binary":false,"changes":107,"status":"modified"}]}