{"files":[{"patch":"@@ -472,4 +472,1 @@\n-    if (access == java_io_FileSystem_ACCESS_READ ||\n-        access == java_io_FileSystem_ACCESS_EXECUTE) {\n-        return enable;\n-    }\n+\n@@ -479,0 +476,6 @@\n+\n+    if (access == java_io_FileSystem_ACCESS_READ ||\n+        access == java_io_FileSystem_ACCESS_EXECUTE) {\n+        return _waccess(pathbuf, 0) == 0 ? enable : JNI_FALSE;\n+    }\n+\n","filename":"src\/java.base\/windows\/native\/libjava\/WinNTFileSystem_md.c","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,4 +25,6 @@\n-   @bug 4167472 5097703 6216563 6284003 6728842 6464744\n-   @summary Basic test for setWritable\/Readable\/Executable methods\n-   @build SetAccess Util\n-   @run main SetAccess\n+ * @bug 4167472 5097703 6216563 6284003 6728842 6464744 8316000\n+ * @summary Basic test for setWritable\/Readable\/Executable methods\n+ * @library .. \/test\/lib\n+ * @build jdk.test.lib.Platform\n+ * @build SetAccess Util\n+ * @run main SetAccess\n@@ -31,3 +33,7 @@\n-import java.io.*;\n-import java.nio.file.*;\n-import java.nio.file.attribute.*;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.OutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.attribute.PosixFileAttributes;\n+import java.nio.file.attribute.PosixFilePermissions;\n+import jdk.test.lib.Platform;\n@@ -52,0 +58,3 @@\n+        if (f.exists() && !f.delete())\n+            throw new Exception(\"Can't delete test file: \" + f);\n+\n@@ -58,0 +67,3 @@\n+\n+        if (f.exists() && !f.delete())\n+            throw new Exception(\"Can't delete test dir: \" + f);\n@@ -61,1 +73,13 @@\n-        if (!System.getProperty(\"os.name\").startsWith(\"Windows\")) {\n+        \/\/ Generic\n+        if (f.isFile()) {\n+            File no = new File(\"nonexistent\");\n+            assert !no.exists();\n+            if (no.setReadable(true, false))\n+                throw new Exception(no + \": setReadable(true, false) Succeeded\");\n+            if (no.setWritable(true, false))\n+                throw new Exception(no + \": setWritable(true, false) Succeeded\");\n+            if (no.setExecutable(true, false))\n+                throw new Exception(no + \": setExecutable(true, false) Succeeded\");\n+        }\n+\n+        if (!Platform.isWindows()) {\n@@ -63,1 +87,1 @@\n-                 throw new Exception(f + \": setReadOnly Failed\");\n+                throw new Exception(f + \": setReadOnly Failed\");\n@@ -130,2 +154,1 @@\n-        } else {\n-            \/\/Windows platform\n+        } else { \/\/ Windows platform\n@@ -153,0 +176,29 @@\n+                if (f.isDirectory()) {\n+                    \/\/ setWritable should fail on directories because the DOS readonly\n+                    \/\/ attribute prevents a directory from being deleted.\n+                    if (f.setWritable(false, true))\n+                        throw new Exception(f + \": setWritable(false, true) Succeeded\");\n+                    if (f.setWritable(false, false))\n+                        throw new Exception(f + \": setWritable(false, false) Succeeded\");\n+                    if (f.setWritable(false))\n+                        throw new Exception(f + \": setWritable(false) Succeeded\");\n+                } else {\n+                    if (!f.setWritable(false, true) || f.canWrite())\n+                        throw new Exception(f + \": setWritable(false, true) Failed\");\n+                    if (!f.setWritable(false, false) || f.canWrite())\n+                        throw new Exception(f + \": setWritable(false, false) Failed\");\n+                    if (!f.setWritable(false) || f.canWrite())\n+                        throw new Exception(f + \": setWritable(false) Failed\");\n+                }\n+                if (f.setExecutable(false, true))\n+                    throw new Exception(f + \": setExecutable(false, true) Failed\");\n+                if (f.setExecutable(false, false))\n+                    throw new Exception(f + \": setExecutable(false, false) Failed\");\n+                if (f.setExecutable(false))\n+                    throw new Exception(f + \": setExecutable(false, true) Failed\");\n+                if (f.setReadable(false, true))\n+                    throw new Exception(f + \": setReadable(false, true) Failed\");\n+                if (f.setReadable(false, false))\n+                    throw new Exception(f + \": setReadable(false, false) Failed\");\n+                if (f.setReadable(false))\n+                    throw new Exception(f + \": setReadable(false, true) Failed\");\n@@ -154,29 +206,0 @@\n-            if (f.isDirectory()) {\n-                \/\/ setWritable should fail on directories because the DOS readonly\n-                \/\/ attribute prevents a directory from being deleted.\n-                if (f.setWritable(false, true))\n-                    throw new Exception(f + \": setWritable(false, true) Succeeded\");\n-                if (f.setWritable(false, false))\n-                    throw new Exception(f + \": setWritable(false, false) Succeeded\");\n-                if (f.setWritable(false))\n-                    throw new Exception(f + \": setWritable(false) Succeeded\");\n-            } else {\n-                if (!f.setWritable(false, true) || f.canWrite())\n-                    throw new Exception(f + \": setWritable(false, true) Failed\");\n-                if (!f.setWritable(false, false) || f.canWrite())\n-                    throw new Exception(f + \": setWritable(false, false) Failed\");\n-                if (!f.setWritable(false) || f.canWrite())\n-                    throw new Exception(f + \": setWritable(false) Failed\");\n-            }\n-            if (f.setExecutable(false, true))\n-                throw new Exception(f + \": setExecutable(false, true) Failed\");\n-            if (f.setExecutable(false, false))\n-                throw new Exception(f + \": setExecutable(false, false) Failed\");\n-            if (f.setExecutable(false))\n-                throw new Exception(f + \": setExecutable(false, true) Failed\");\n-            if (f.setReadable(false, true))\n-                throw new Exception(f + \": setReadable(false, true) Failed\");\n-            if (f.setReadable(false, false))\n-                throw new Exception(f + \": setReadable(false, false) Failed\");\n-            if (f.setReadable(false))\n-                throw new Exception(f + \": setReadable(false, true) Failed\");\n@@ -184,2 +207,0 @@\n-        if (f.exists() && !f.delete())\n-            throw new Exception(\"Can't delete test dir: \" + f);\n","filename":"test\/jdk\/java\/io\/File\/SetAccess.java","additions":64,"deletions":43,"binary":false,"changes":107,"status":"modified"}]}