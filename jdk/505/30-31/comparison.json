{"files":[{"patch":"@@ -661,1 +661,1 @@\n-      __ far_call(RuntimeAddress(bs->load_reference_barrier_weakref_rt_code_blob()->code_begin()));\n+      __ far_call(RuntimeAddress(bs->load_reference_barrier_weak_rt_code_blob()->code_begin()));\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/shenandoahBarrierSetAssembler_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -838,1 +838,1 @@\n-      __ call(RuntimeAddress(bs->load_reference_barrier_weakref_rt_code_blob()->code_begin()));\n+      __ call(RuntimeAddress(bs->load_reference_barrier_weak_rt_code_blob()->code_begin()));\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/shenandoahBarrierSetAssembler_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-  _load_reference_barrier_weakref_rt_code_blob(NULL) {}\n+  _load_reference_barrier_weak_rt_code_blob(NULL) {}\n@@ -284,4 +284,4 @@\n-    C1ShenandoahLoadReferenceBarrierCodeGenClosure lrb_weakref_code_gen_cl(ShenandoahBarrierSet::AccessKind::WEAK);\n-    _load_reference_barrier_weakref_rt_code_blob = Runtime1::generate_blob(buffer_blob, -1,\n-                                                                           \"shenandoah_load_reference_barrier_weakref_slow\",\n-                                                                           false, &lrb_weakref_code_gen_cl);\n+    C1ShenandoahLoadReferenceBarrierCodeGenClosure lrb_weak_code_gen_cl(ShenandoahBarrierSet::AccessKind::WEAK);\n+    _load_reference_barrier_weak_rt_code_blob = Runtime1::generate_blob(buffer_blob, -1,\n+                                                                           \"shenandoah_load_reference_barrier_weak_slow\",\n+                                                                           false, &lrb_weak_code_gen_cl);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -195,1 +195,1 @@\n-  CodeBlob* _load_reference_barrier_weakref_rt_code_blob;\n+  CodeBlob* _load_reference_barrier_weak_rt_code_blob;\n@@ -224,3 +224,3 @@\n-  CodeBlob* load_reference_barrier_weakref_rt_code_blob() {\n-    assert(_load_reference_barrier_weakref_rt_code_blob != NULL, \"\");\n-    return _load_reference_barrier_weakref_rt_code_blob;\n+  CodeBlob* load_reference_barrier_weak_rt_code_blob() {\n+    assert(_load_reference_barrier_weak_rt_code_blob != NULL, \"\");\n+    return _load_reference_barrier_weak_rt_code_blob;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1063,1 +1063,1 @@\n-    \/\/ If one input is NULL, then step over the barriers (except LRB native) on the other input\n+    \/\/ If one input is NULL, then step over the barriers normal LRB barriers on the other input\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahBarrierSetC2.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-  inline void do_chunked_array_start(ShenandoahObjToScanQueue* q, T* cl, oop array, bool strong);\n+  inline void do_chunked_array_start(ShenandoahObjToScanQueue* q, T* cl, oop array, bool weak);\n@@ -56,1 +56,1 @@\n-  inline void do_chunked_array(ShenandoahObjToScanQueue* q, T* cl, oop array, int chunk, int pow, bool strong);\n+  inline void do_chunked_array(ShenandoahObjToScanQueue* q, T* cl, oop array, int chunk, int pow, bool weak);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentMark.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}