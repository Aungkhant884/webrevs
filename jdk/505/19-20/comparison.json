{"files":[{"patch":"@@ -525,1 +525,6 @@\n-      load_reference_barrier_native(masm, dst, src, (decorators & IN_NATIVE) == 0);\n+      \/\/ API impedance: when used on native refs, lrb-native necessarily works with full oops,\n+      \/\/ but when used for weak\/phantom refs, it might need to work with narrow oops.\n+      \/\/ Therefore, we need to ask barrier code to look back at UseCompressedOops and\n+      \/\/ decide, when lrb-native is not IN_NATIVE. TODO: Resolve this API impedance.\n+      bool maybe_narrow_oop = (decorators & IN_NATIVE) == 0;\n+      load_reference_barrier_native(masm, dst, src, maybe_narrow_oop);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/shenandoahBarrierSetAssembler_x86.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -104,1 +104,2 @@\n-  return on_native || on_weak || on_phantom;\n+  bool on_unknown = (decorators & ON_UNKNOWN_OOP_REF) != 0;\n+  return on_native || on_weak || on_phantom || on_unknown;\n@@ -121,1 +122,1 @@\n-  } else if ((decorators & (ON_WEAK_OOP_REF | ON_PHANTOM_OOP_REF)) != 0) {\n+  } else if ((decorators & (ON_WEAK_OOP_REF | ON_PHANTOM_OOP_REF | ON_UNKNOWN_OOP_REF)) != 0) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}