{"files":[{"patch":"@@ -2065,2 +2065,3 @@\n-  if (!has_match_rule(opcode))\n-    return false;\n+  if (!has_match_rule(opcode)) {\n+    return false; \/\/ no match rule present\n+  }\n@@ -2068,1 +2069,0 @@\n-  bool ret_value = true;\n@@ -2070,72 +2070,57 @@\n-  case Op_SqrtD:\n-    return VM_Version::has_fsqrt();\n-  case Op_CountLeadingZerosI:\n-  case Op_CountLeadingZerosL:\n-    if (!UseCountLeadingZerosInstructionsPPC64)\n-      return false;\n-    break;\n-  case Op_CountTrailingZerosI:\n-  case Op_CountTrailingZerosL:\n-    if (!UseCountLeadingZerosInstructionsPPC64 &&\n-        !UseCountTrailingZerosInstructionsPPC64)\n-      return false;\n-    break;\n-\n-  case Op_PopCountI:\n-  case Op_PopCountL:\n-    return (UsePopCountInstruction && VM_Version::has_popcntw());\n-\n-  case Op_StrComp:\n-    return SpecialStringCompareTo;\n-  case Op_StrEquals:\n-    return SpecialStringEquals;\n-  case Op_StrIndexOf:\n-  case Op_StrIndexOfChar:\n-    return SpecialStringIndexOf;\n-  case Op_AddVB:\n-  case Op_AddVS:\n-  case Op_AddVI:\n-  case Op_AddVF:\n-  case Op_AddVD:\n-  case Op_SubVB:\n-  case Op_SubVS:\n-  case Op_SubVI:\n-  case Op_SubVF:\n-  case Op_SubVD:\n-  case Op_MulVS:\n-  case Op_MulVF:\n-  case Op_MulVD:\n-  case Op_DivVF:\n-  case Op_DivVD:\n-  case Op_AbsVF:\n-  case Op_AbsVD:\n-  case Op_NegVF:\n-  case Op_NegVD:\n-  case Op_SqrtVF:\n-  case Op_SqrtVD:\n-  case Op_AddVL:\n-  case Op_SubVL:\n-  case Op_MulVI:\n-  case Op_RoundDoubleModeV:\n-    return SuperwordUseVSX;\n-  case Op_PopCountVI:\n-    return (SuperwordUseVSX && UsePopCountInstruction);\n-  case Op_FmaVF:\n-  case Op_FmaVD:\n-    return (SuperwordUseVSX && UseFMA);\n-  case Op_Digit:\n-    return vmIntrinsics::is_intrinsic_available(vmIntrinsics::_isDigit);\n-  case Op_LowerCase:\n-    return vmIntrinsics::is_intrinsic_available(vmIntrinsics::_isLowerCase);\n-  case Op_UpperCase:\n-    return vmIntrinsics::is_intrinsic_available(vmIntrinsics::_isUpperCase);\n-  case Op_Whitespace:\n-    return vmIntrinsics::is_intrinsic_available(vmIntrinsics::_isWhitespace);\n-\n-  case Op_CacheWB:\n-  case Op_CacheWBPreSync:\n-  case Op_CacheWBPostSync:\n-    if (!VM_Version::supports_data_cache_line_flush()) {\n-      ret_value = false;\n-    }\n-    break;\n+    case Op_SqrtD:\n+      return VM_Version::has_fsqrt();\n+    case Op_CountLeadingZerosI:\n+    case Op_CountLeadingZerosL:\n+      return UseCountLeadingZerosInstructionsPPC64;\n+    case Op_CountTrailingZerosI:\n+    case Op_CountTrailingZerosL:\n+      return (UseCountLeadingZerosInstructionsPPC64 || UseCountTrailingZerosInstructionsPPC64);\n+    case Op_PopCountI:\n+    case Op_PopCountL:\n+      return (UsePopCountInstruction && VM_Version::has_popcntw());\n+\n+    case Op_AddVB:\n+    case Op_AddVS:\n+    case Op_AddVI:\n+    case Op_AddVF:\n+    case Op_AddVD:\n+    case Op_SubVB:\n+    case Op_SubVS:\n+    case Op_SubVI:\n+    case Op_SubVF:\n+    case Op_SubVD:\n+    case Op_MulVS:\n+    case Op_MulVF:\n+    case Op_MulVD:\n+    case Op_DivVF:\n+    case Op_DivVD:\n+    case Op_AbsVF:\n+    case Op_AbsVD:\n+    case Op_NegVF:\n+    case Op_NegVD:\n+    case Op_SqrtVF:\n+    case Op_SqrtVD:\n+    case Op_AddVL:\n+    case Op_SubVL:\n+    case Op_MulVI:\n+    case Op_RoundDoubleModeV:\n+      return SuperwordUseVSX;\n+    case Op_PopCountVI:\n+      return (SuperwordUseVSX && UsePopCountInstruction);\n+    case Op_FmaVF:\n+    case Op_FmaVD:\n+      return (SuperwordUseVSX && UseFMA);\n+\n+    case Op_Digit:\n+      return vmIntrinsics::is_intrinsic_available(vmIntrinsics::_isDigit);\n+    case Op_LowerCase:\n+      return vmIntrinsics::is_intrinsic_available(vmIntrinsics::_isLowerCase);\n+    case Op_UpperCase:\n+      return vmIntrinsics::is_intrinsic_available(vmIntrinsics::_isUpperCase);\n+    case Op_Whitespace:\n+      return vmIntrinsics::is_intrinsic_available(vmIntrinsics::_isWhitespace);\n+\n+    case Op_CacheWB:\n+    case Op_CacheWBPreSync:\n+    case Op_CacheWBPostSync:\n+      return VM_Version::supports_data_cache_line_flush();\n@@ -2144,1 +2129,1 @@\n-  return ret_value;  \/\/ Per default match rules are supported.\n+  return true; \/\/ Per default match rules are supported.\n@@ -2148,8 +2133,4 @@\n-\n-  \/\/ TODO\n-  \/\/ identify extra cases that we might want to provide match rules for\n-  \/\/ e.g. Op_ vector nodes and other intrinsics while guarding with vlen\n-  bool ret_value = match_rule_supported(opcode);\n-  \/\/ Add rules here.\n-\n-  return ret_value;  \/\/ Per default match rules are supported.\n+  if (!match_rule_supported(opcode) || !vector_size_supported(bt, vlen)) {\n+    return false;\n+  }\n+  return true; \/\/ Per default match rules are supported.\n@@ -6572,0 +6553,17 @@\n+\/\/ Reinterpret: only one vector size used: either L or X\n+instruct reinterpretL(iRegLdst dst) %{\n+  match(Set dst (VectorReinterpret dst));\n+  ins_cost(0);\n+  format %{ \"reinterpret $dst\" %}\n+  ins_encode( \/*empty*\/ );\n+  ins_pipe(pipe_class_empty);\n+%}\n+\n+instruct reinterpretX(vecX dst) %{\n+  match(Set dst (VectorReinterpret dst));\n+  ins_cost(0);\n+  format %{ \"reinterpret $dst\" %}\n+  ins_encode( \/*empty*\/ );\n+  ins_pipe(pipe_class_empty);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":82,"deletions":84,"binary":false,"changes":166,"status":"modified"},{"patch":"@@ -1514,1 +1514,3 @@\n-  if (!has_match_rule(opcode)) return false;\n+  if (!has_match_rule(opcode)) {\n+    return false; \/\/ no match rule present\n+  }\n@@ -1517,7 +1519,0 @@\n-    case Op_CountLeadingZerosI:\n-    case Op_CountLeadingZerosL:\n-    case Op_CountTrailingZerosI:\n-    case Op_CountTrailingZerosL:\n-      \/\/ Implementation requires FLOGR instruction, which is available since z9.\n-      return true;\n-\n@@ -1527,2 +1522,0 @@\n-\n-    \/\/ PopCount supported by H\/W from z\/Architecture G5 (z196) on.\n@@ -1531,23 +1524,2 @@\n-      return UsePopCountInstruction && VM_Version::has_PopCount();\n-\n-    case Op_StrComp:\n-      return SpecialStringCompareTo;\n-    case Op_StrEquals:\n-      return SpecialStringEquals;\n-    case Op_StrIndexOf:\n-    case Op_StrIndexOfChar:\n-      return SpecialStringIndexOf;\n-\n-    case Op_GetAndAddI:\n-    case Op_GetAndAddL:\n-      return true;\n-      \/\/ return VM_Version::has_AtomicMemWithImmALUOps();\n-    case Op_GetAndSetI:\n-    case Op_GetAndSetL:\n-    case Op_GetAndSetP:\n-    case Op_GetAndSetN:\n-      return true;  \/\/ General CAS implementation, always available.\n-\n-    default:\n-      return true;  \/\/ Per default match rules are supported.\n-                    \/\/ BUT: make sure match rule is not disabled by a false predicate!\n+      \/\/ PopCount supported by H\/W from z\/Architecture G5 (z196) on.\n+      return (UsePopCountInstruction && VM_Version::has_PopCount());\n@@ -1556,2 +1528,1 @@\n-  return true;  \/\/ Per default match rules are supported.\n-                \/\/ BUT: make sure match rule is not disabled by a false predicate!\n+  return true; \/\/ Per default match rules are supported.\n@@ -1561,7 +1532,4 @@\n-  \/\/ TODO\n-  \/\/ Identify extra cases that we might want to provide match rules for\n-  \/\/ e.g. Op_ vector nodes and other intrinsics while guarding with vlen.\n-  bool ret_value = match_rule_supported(opcode);\n-  \/\/ Add rules here.\n-\n-  return ret_value;  \/\/ Per default match rules are supported.\n+  if (!match_rule_supported(opcode) || !vector_size_supported(bt, vlen)) {\n+    return false;\n+  }\n+  return true; \/\/ Per default match rules are supported.\n@@ -10794,1 +10762,1 @@\n-\/\/ Store\n+\/\/ Load\/Store vector\n@@ -10808,2 +10776,0 @@\n-\/\/ Load\n-\n@@ -10821,0 +10787,9 @@\n+\/\/ Reinterpret: only one vector size used\n+instruct reinterpret(iRegL dst) %{\n+  match(Set dst (VectorReinterpret dst));\n+  ins_cost(0);\n+  format %{ \"reinterpret $dst\" %}\n+  ins_encode( \/*empty*\/ );\n+  ins_pipe(pipe_class_dummy);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/s390\/s390.ad","additions":20,"deletions":45,"binary":false,"changes":65,"status":"modified"}]}