{"files":[{"patch":"@@ -65,1 +65,0 @@\n-import org.testng.annotations.DataProvider;\n@@ -4502,0 +4501,2 @@\n+    \/\/Ensure we don't drop nested interior character classes to the right of an\n+    \/\/intersection operator.\n@@ -4529,0 +4530,3 @@\n+    \/\/This is for ensuring that the caret doesn't point at the wrong character\n+    \/\/in a syntax exception message because we previously didn't compensate for\n+    \/\/tabs when rendering the offending string that contained tab characters.\n@@ -4539,0 +4543,2 @@\n+    \/\/Ensure our error message indicates we have an unescaped backslash when we\n+    \/\/encounter one.\n@@ -4548,0 +4554,1 @@\n+    \/\/Given bad intersection syntax, we should throw a PatternSyntaxException.\n@@ -4557,0 +4564,5 @@\n+    \/\/Here we check for inconsistencies between the behavior of \\w and the\n+    \/\/behavior of \\b. Prior to this fix, the two flags did not behave in a\n+    \/\/consistent way ie \\b would recognize non-\\w characters as part of a word\n+    \/\/in some cases. This test verifies that the two behave consistently\n+    \/\/for all codepoints we support.\n@@ -4612,0 +4624,3 @@\n+    \/\/Checks that when the Canonical Equivalence flag is set, the behavior for\n+    \/\/Matcher::hitEnd is equivalent for these similar, patterns that saw\n+    \/\/inconsistencies.\n@@ -4636,0 +4651,2 @@\n+    \/\/Checks that we are able to correctly match this case with a backref\n+    \/\/without encountering an IndexOutOfBoundsException.\n","filename":"test\/jdk\/java\/util\/regex\/RegExTest.java","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"}]}