{"files":[{"patch":"@@ -3335,0 +3335,28 @@\n+  class Cached64Bytes {\n+  private:\n+    MacroAssembler *_masm;\n+    Register _base;\n+    Register _regs[8];\n+\n+  public:\n+    Cached64Bytes(MacroAssembler *masm, Register base, RegSet rs):\n+      _masm(masm), _base(base) {\n+      assert(rs.size() == 8, \"%u registers are used to cache 16 4-byte data\", rs.size());\n+      auto it = rs.begin();\n+      for (int i = 0; i < 8; ++i, ++it) {\n+        _regs[i] = *it;\n+      }\n+    }\n+\n+    void gen_loads() {\n+      for (int i = 0; i < 8; i += 2) {\n+        __ ldp(_regs[i], _regs[i + 1], Address(_base, 8 * i));\n+      }\n+    }\n+\n+    \/\/ Generate code extracting i-th unsigned word (4 bytes) from cached 64 bytes.\n+    void gen_unsigned_word_extract(Register dest, int i) {\n+      __ ubfx(dest, _regs[i \/ 2], 32 * (i % 2), 32);\n+    }\n+  };\n+\n@@ -3337,1 +3365,1 @@\n-  void md5_FF(Register buf, Register r1, Register r2, Register r3, Register r4,\n+  void md5_FF(Cached64Bytes& reg_cache, Register r1, Register r2, Register r3, Register r4,\n@@ -3346,1 +3374,1 @@\n-    __ ldrw(rscratch1, Address(buf, k*4));\n+    reg_cache.gen_unsigned_word_extract(rscratch1, k);\n@@ -3354,1 +3382,1 @@\n-  void md5_GG(Register buf, Register r1, Register r2, Register r3, Register r4,\n+  void md5_GG(Cached64Bytes& reg_cache, Register r1, Register r2, Register r3, Register r4,\n@@ -3361,1 +3389,1 @@\n-    __ ldrw(rscratch1, Address(buf, k*4));\n+    reg_cache.gen_unsigned_word_extract(rscratch1, k);\n@@ -3371,1 +3399,1 @@\n-  void md5_HH(Register buf, Register r1, Register r2, Register r3, Register r4,\n+  void md5_HH(Cached64Bytes& reg_cache, Register r1, Register r2, Register r3, Register r4,\n@@ -3379,1 +3407,1 @@\n-    __ ldrw(rscratch1, Address(buf, k*4));\n+    reg_cache.gen_unsigned_word_extract(rscratch1, k);\n@@ -3387,1 +3415,1 @@\n-  void md5_II(Register buf, Register r1, Register r2, Register r3, Register r4,\n+  void md5_II(Cached64Bytes& reg_cache, Register r1, Register r2, Register r3, Register r4,\n@@ -3395,1 +3423,1 @@\n-    __ ldrw(rscratch1, Address(buf, k*4));\n+    reg_cache.gen_unsigned_word_extract(rscratch1, k);\n@@ -3427,0 +3455,12 @@\n+    Register state_regs[2] = { r12, r13 };\n+    RegSet saved_regs = RegSet::range(r16, r22) - r18_tls;\n+    Cached64Bytes reg_cache(_masm, buf, RegSet::of(r14, r15) + saved_regs);\n+\n+    __ push(saved_regs, sp);\n+\n+    __ ldp(state_regs[0], state_regs[1], Address(state));\n+    __ ubfx(a, state_regs[0],  0, 32);\n+    __ ubfx(b, state_regs[0], 32, 32);\n+    __ ubfx(c, state_regs[1],  0, 32);\n+    __ ubfx(d, state_regs[1], 32, 32);\n+\n@@ -3430,5 +3470,1 @@\n-    \/\/ Save hash values for addition after rounds\n-    __ ldrw(a, Address(state,  0));\n-    __ ldrw(b, Address(state,  4));\n-    __ ldrw(c, Address(state,  8));\n-    __ ldrw(d, Address(state, 12));\n+    reg_cache.gen_loads();\n@@ -3437,16 +3473,16 @@\n-    md5_FF(buf, a, b, c, d,  0,  7, 0xd76aa478);\n-    md5_FF(buf, d, a, b, c,  1, 12, 0xe8c7b756);\n-    md5_FF(buf, c, d, a, b,  2, 17, 0x242070db);\n-    md5_FF(buf, b, c, d, a,  3, 22, 0xc1bdceee);\n-    md5_FF(buf, a, b, c, d,  4,  7, 0xf57c0faf);\n-    md5_FF(buf, d, a, b, c,  5, 12, 0x4787c62a);\n-    md5_FF(buf, c, d, a, b,  6, 17, 0xa8304613);\n-    md5_FF(buf, b, c, d, a,  7, 22, 0xfd469501);\n-    md5_FF(buf, a, b, c, d,  8,  7, 0x698098d8);\n-    md5_FF(buf, d, a, b, c,  9, 12, 0x8b44f7af);\n-    md5_FF(buf, c, d, a, b, 10, 17, 0xffff5bb1);\n-    md5_FF(buf, b, c, d, a, 11, 22, 0x895cd7be);\n-    md5_FF(buf, a, b, c, d, 12,  7, 0x6b901122);\n-    md5_FF(buf, d, a, b, c, 13, 12, 0xfd987193);\n-    md5_FF(buf, c, d, a, b, 14, 17, 0xa679438e);\n-    md5_FF(buf, b, c, d, a, 15, 22, 0x49b40821);\n+    md5_FF(reg_cache, a, b, c, d,  0,  7, 0xd76aa478);\n+    md5_FF(reg_cache, d, a, b, c,  1, 12, 0xe8c7b756);\n+    md5_FF(reg_cache, c, d, a, b,  2, 17, 0x242070db);\n+    md5_FF(reg_cache, b, c, d, a,  3, 22, 0xc1bdceee);\n+    md5_FF(reg_cache, a, b, c, d,  4,  7, 0xf57c0faf);\n+    md5_FF(reg_cache, d, a, b, c,  5, 12, 0x4787c62a);\n+    md5_FF(reg_cache, c, d, a, b,  6, 17, 0xa8304613);\n+    md5_FF(reg_cache, b, c, d, a,  7, 22, 0xfd469501);\n+    md5_FF(reg_cache, a, b, c, d,  8,  7, 0x698098d8);\n+    md5_FF(reg_cache, d, a, b, c,  9, 12, 0x8b44f7af);\n+    md5_FF(reg_cache, c, d, a, b, 10, 17, 0xffff5bb1);\n+    md5_FF(reg_cache, b, c, d, a, 11, 22, 0x895cd7be);\n+    md5_FF(reg_cache, a, b, c, d, 12,  7, 0x6b901122);\n+    md5_FF(reg_cache, d, a, b, c, 13, 12, 0xfd987193);\n+    md5_FF(reg_cache, c, d, a, b, 14, 17, 0xa679438e);\n+    md5_FF(reg_cache, b, c, d, a, 15, 22, 0x49b40821);\n@@ -3455,16 +3491,16 @@\n-    md5_GG(buf, a, b, c, d,  1,  5, 0xf61e2562);\n-    md5_GG(buf, d, a, b, c,  6,  9, 0xc040b340);\n-    md5_GG(buf, c, d, a, b, 11, 14, 0x265e5a51);\n-    md5_GG(buf, b, c, d, a,  0, 20, 0xe9b6c7aa);\n-    md5_GG(buf, a, b, c, d,  5,  5, 0xd62f105d);\n-    md5_GG(buf, d, a, b, c, 10,  9, 0x02441453);\n-    md5_GG(buf, c, d, a, b, 15, 14, 0xd8a1e681);\n-    md5_GG(buf, b, c, d, a,  4, 20, 0xe7d3fbc8);\n-    md5_GG(buf, a, b, c, d,  9,  5, 0x21e1cde6);\n-    md5_GG(buf, d, a, b, c, 14,  9, 0xc33707d6);\n-    md5_GG(buf, c, d, a, b,  3, 14, 0xf4d50d87);\n-    md5_GG(buf, b, c, d, a,  8, 20, 0x455a14ed);\n-    md5_GG(buf, a, b, c, d, 13,  5, 0xa9e3e905);\n-    md5_GG(buf, d, a, b, c,  2,  9, 0xfcefa3f8);\n-    md5_GG(buf, c, d, a, b,  7, 14, 0x676f02d9);\n-    md5_GG(buf, b, c, d, a, 12, 20, 0x8d2a4c8a);\n+    md5_GG(reg_cache, a, b, c, d,  1,  5, 0xf61e2562);\n+    md5_GG(reg_cache, d, a, b, c,  6,  9, 0xc040b340);\n+    md5_GG(reg_cache, c, d, a, b, 11, 14, 0x265e5a51);\n+    md5_GG(reg_cache, b, c, d, a,  0, 20, 0xe9b6c7aa);\n+    md5_GG(reg_cache, a, b, c, d,  5,  5, 0xd62f105d);\n+    md5_GG(reg_cache, d, a, b, c, 10,  9, 0x02441453);\n+    md5_GG(reg_cache, c, d, a, b, 15, 14, 0xd8a1e681);\n+    md5_GG(reg_cache, b, c, d, a,  4, 20, 0xe7d3fbc8);\n+    md5_GG(reg_cache, a, b, c, d,  9,  5, 0x21e1cde6);\n+    md5_GG(reg_cache, d, a, b, c, 14,  9, 0xc33707d6);\n+    md5_GG(reg_cache, c, d, a, b,  3, 14, 0xf4d50d87);\n+    md5_GG(reg_cache, b, c, d, a,  8, 20, 0x455a14ed);\n+    md5_GG(reg_cache, a, b, c, d, 13,  5, 0xa9e3e905);\n+    md5_GG(reg_cache, d, a, b, c,  2,  9, 0xfcefa3f8);\n+    md5_GG(reg_cache, c, d, a, b,  7, 14, 0x676f02d9);\n+    md5_GG(reg_cache, b, c, d, a, 12, 20, 0x8d2a4c8a);\n@@ -3473,16 +3509,16 @@\n-    md5_HH(buf, a, b, c, d,  5,  4, 0xfffa3942);\n-    md5_HH(buf, d, a, b, c,  8, 11, 0x8771f681);\n-    md5_HH(buf, c, d, a, b, 11, 16, 0x6d9d6122);\n-    md5_HH(buf, b, c, d, a, 14, 23, 0xfde5380c);\n-    md5_HH(buf, a, b, c, d,  1,  4, 0xa4beea44);\n-    md5_HH(buf, d, a, b, c,  4, 11, 0x4bdecfa9);\n-    md5_HH(buf, c, d, a, b,  7, 16, 0xf6bb4b60);\n-    md5_HH(buf, b, c, d, a, 10, 23, 0xbebfbc70);\n-    md5_HH(buf, a, b, c, d, 13,  4, 0x289b7ec6);\n-    md5_HH(buf, d, a, b, c,  0, 11, 0xeaa127fa);\n-    md5_HH(buf, c, d, a, b,  3, 16, 0xd4ef3085);\n-    md5_HH(buf, b, c, d, a,  6, 23, 0x04881d05);\n-    md5_HH(buf, a, b, c, d,  9,  4, 0xd9d4d039);\n-    md5_HH(buf, d, a, b, c, 12, 11, 0xe6db99e5);\n-    md5_HH(buf, c, d, a, b, 15, 16, 0x1fa27cf8);\n-    md5_HH(buf, b, c, d, a,  2, 23, 0xc4ac5665);\n+    md5_HH(reg_cache, a, b, c, d,  5,  4, 0xfffa3942);\n+    md5_HH(reg_cache, d, a, b, c,  8, 11, 0x8771f681);\n+    md5_HH(reg_cache, c, d, a, b, 11, 16, 0x6d9d6122);\n+    md5_HH(reg_cache, b, c, d, a, 14, 23, 0xfde5380c);\n+    md5_HH(reg_cache, a, b, c, d,  1,  4, 0xa4beea44);\n+    md5_HH(reg_cache, d, a, b, c,  4, 11, 0x4bdecfa9);\n+    md5_HH(reg_cache, c, d, a, b,  7, 16, 0xf6bb4b60);\n+    md5_HH(reg_cache, b, c, d, a, 10, 23, 0xbebfbc70);\n+    md5_HH(reg_cache, a, b, c, d, 13,  4, 0x289b7ec6);\n+    md5_HH(reg_cache, d, a, b, c,  0, 11, 0xeaa127fa);\n+    md5_HH(reg_cache, c, d, a, b,  3, 16, 0xd4ef3085);\n+    md5_HH(reg_cache, b, c, d, a,  6, 23, 0x04881d05);\n+    md5_HH(reg_cache, a, b, c, d,  9,  4, 0xd9d4d039);\n+    md5_HH(reg_cache, d, a, b, c, 12, 11, 0xe6db99e5);\n+    md5_HH(reg_cache, c, d, a, b, 15, 16, 0x1fa27cf8);\n+    md5_HH(reg_cache, b, c, d, a,  2, 23, 0xc4ac5665);\n@@ -3491,33 +3527,29 @@\n-    md5_II(buf, a, b, c, d,  0,  6, 0xf4292244);\n-    md5_II(buf, d, a, b, c,  7, 10, 0x432aff97);\n-    md5_II(buf, c, d, a, b, 14, 15, 0xab9423a7);\n-    md5_II(buf, b, c, d, a,  5, 21, 0xfc93a039);\n-    md5_II(buf, a, b, c, d, 12,  6, 0x655b59c3);\n-    md5_II(buf, d, a, b, c,  3, 10, 0x8f0ccc92);\n-    md5_II(buf, c, d, a, b, 10, 15, 0xffeff47d);\n-    md5_II(buf, b, c, d, a,  1, 21, 0x85845dd1);\n-    md5_II(buf, a, b, c, d,  8,  6, 0x6fa87e4f);\n-    md5_II(buf, d, a, b, c, 15, 10, 0xfe2ce6e0);\n-    md5_II(buf, c, d, a, b,  6, 15, 0xa3014314);\n-    md5_II(buf, b, c, d, a, 13, 21, 0x4e0811a1);\n-    md5_II(buf, a, b, c, d,  4,  6, 0xf7537e82);\n-    md5_II(buf, d, a, b, c, 11, 10, 0xbd3af235);\n-    md5_II(buf, c, d, a, b,  2, 15, 0x2ad7d2bb);\n-    md5_II(buf, b, c, d, a,  9, 21, 0xeb86d391);\n-\n-    \/\/ write hash values back in the correct order\n-    __ ldrw(rscratch1, Address(state,  0));\n-    __ addw(rscratch1, rscratch1, a);\n-    __ strw(rscratch1, Address(state,  0));\n-\n-    __ ldrw(rscratch2, Address(state,  4));\n-    __ addw(rscratch2, rscratch2, b);\n-    __ strw(rscratch2, Address(state,  4));\n-\n-    __ ldrw(rscratch3, Address(state,  8));\n-    __ addw(rscratch3, rscratch3, c);\n-    __ strw(rscratch3, Address(state,  8));\n-\n-    __ ldrw(rscratch4, Address(state, 12));\n-    __ addw(rscratch4, rscratch4, d);\n-    __ strw(rscratch4, Address(state, 12));\n+    md5_II(reg_cache, a, b, c, d,  0,  6, 0xf4292244);\n+    md5_II(reg_cache, d, a, b, c,  7, 10, 0x432aff97);\n+    md5_II(reg_cache, c, d, a, b, 14, 15, 0xab9423a7);\n+    md5_II(reg_cache, b, c, d, a,  5, 21, 0xfc93a039);\n+    md5_II(reg_cache, a, b, c, d, 12,  6, 0x655b59c3);\n+    md5_II(reg_cache, d, a, b, c,  3, 10, 0x8f0ccc92);\n+    md5_II(reg_cache, c, d, a, b, 10, 15, 0xffeff47d);\n+    md5_II(reg_cache, b, c, d, a,  1, 21, 0x85845dd1);\n+    md5_II(reg_cache, a, b, c, d,  8,  6, 0x6fa87e4f);\n+    md5_II(reg_cache, d, a, b, c, 15, 10, 0xfe2ce6e0);\n+    md5_II(reg_cache, c, d, a, b,  6, 15, 0xa3014314);\n+    md5_II(reg_cache, b, c, d, a, 13, 21, 0x4e0811a1);\n+    md5_II(reg_cache, a, b, c, d,  4,  6, 0xf7537e82);\n+    md5_II(reg_cache, d, a, b, c, 11, 10, 0xbd3af235);\n+    md5_II(reg_cache, c, d, a, b,  2, 15, 0x2ad7d2bb);\n+    md5_II(reg_cache, b, c, d, a,  9, 21, 0xeb86d391);\n+\n+    __ ubfx(rscratch1, state_regs[0],  0, 32);\n+    __ ubfx(rscratch2, state_regs[0], 32, 32);\n+    __ ubfx(rscratch3, state_regs[1],  0, 32);\n+    __ ubfx(rscratch4, state_regs[1], 32, 32);\n+\n+    __ addw(a, rscratch1, a);\n+    __ addw(b, rscratch2, b);\n+    __ addw(c, rscratch3, c);\n+    __ addw(d, rscratch4, d);\n+\n+    __ orr(state_regs[0], a, b, Assembler::LSL, 32);\n+    __ orr(state_regs[1], c, d, Assembler::LSL, 32);\n@@ -3533,0 +3565,5 @@\n+    \/\/ write hash values back in the correct order\n+    __ stp(state_regs[0], state_regs[1], Address(state));\n+\n+    __ pop(saved_regs, sp);\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":131,"deletions":94,"binary":false,"changes":225,"status":"modified"}]}