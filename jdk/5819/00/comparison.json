{"files":[{"patch":"@@ -59,1 +59,1 @@\n-  static const int htbl_entries = -1;\n+  static const int htbl_entries = 0;\n","filename":"src\/hotspot\/cpu\/aarch64\/matcher_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3097,1 +3097,2 @@\n-  \/\/ counter = c_rarg7 - pointer to 16 bytes of CTR\n+  \/\/ subkeyHtbl_48_entries = c_rarg7 (not used)\n+  \/\/ counter = [sp, #0] pointer to 16 bytes of CTR\n@@ -3110,0 +3111,2 @@\n+    __ enter();\n+\n@@ -3121,0 +3124,2 @@\n+    \/\/ Pointer to CTR is passed on the stack before the (fp, lr) pair.\n+    const Address counter_mem(sp, 2 * wordSize);\n@@ -3122,0 +3127,1 @@\n+    __ ldr(counter, counter_mem);\n@@ -3124,1 +3130,0 @@\n-    __ enter();\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -6797,1 +6797,1 @@\n-  \/\/ htbl entries is set to 96 only fox x86-64\n+  \/\/ Does this target support this intrinsic?\n@@ -6801,4 +6801,10 @@\n-  Node* subkeyHtbl_48_entries = new_array(klass_node, intcon(Matcher::htbl_entries), 0);\n-  if (subkeyHtbl_48_entries == NULL) return false;\n-\n-  Node* subkeyHtbl_48_entries_start = array_element_address(subkeyHtbl_48_entries, intcon(0), T_LONG);\n+  Node* subkeyHtbl_48_entries_start;\n+  if (Matcher::htbl_entries != 0) {\n+    Node* subkeyHtbl_48_entries = new_array(klass_node, intcon(Matcher::htbl_entries), 0);\n+    if (subkeyHtbl_48_entries == NULL) return false;\n+    subkeyHtbl_48_entries_start\n+      = array_element_address(subkeyHtbl_48_entries, intcon(0), T_LONG);\n+  } else {\n+    \/\/ This target doesn't need the extra-large Htbl.\n+    subkeyHtbl_48_entries_start = ConvL2X(intcon(0));\n+  }\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"}]}