{"files":[{"patch":"@@ -1688,0 +1688,4 @@\n+            if (seltype.isPrimitive() && !intSwitch) {\n+                preview.checkSourceLevel(selector.pos(), Feature.PRIMITIVE_PATTERNS);\n+                patternSwitch = true;\n+            }\n@@ -1693,4 +1697,0 @@\n-                if (seltype.isPrimitive() && !intSwitch) {\n-                    preview.checkSourceLevel(selector.pos(), Feature.PRIMITIVE_PATTERNS);\n-                    patternSwitch = true;\n-                }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -558,4 +558,0 @@\n-# 0: type\n-compiler.err.selector.type.not.allowed=\\\n-    selector type {0} is not allowed\n-\n@@ -2644,4 +2640,0 @@\n-# 0: type, 1: type\n-compiler.misc.not.applicable.types=\\\n-    pattern of type {1} is not applicable at {0}\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -24,2 +24,2 @@\n-\/\/ key: compiler.misc.not.applicable.types\n-\/\/ key: compiler.err.prob.found.req\n+\/\/ key: compiler.err.preview.feature.disabled.plural\n+\/\/ key: compiler.misc.feature.primitive.patterns\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/NotApplicableTypes.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,1 +24,2 @@\n-\/\/ key: compiler.err.selector.type.not.allowed\n+\/\/ key: compiler.err.preview.feature.disabled.plural\n+\/\/ key: compiler.misc.feature.primitive.patterns\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/SelectorTypeNotAllowed.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,1 +30,9 @@\n-    boolean b = (this instanceof int);\n+    interface Sig {\n+        void m(int s);\n+    }\n+\n+    Sig consume(Sig s) { return s; }\n+\n+    public void meth() {\n+        Sig s = consume(int::new);\n+    }\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/TypeReqClassArray.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -28,2 +28,3 @@\n-    int i;\n-    boolean b = (i instanceof Object);\n+\n+    void method(Inner<int> in) {}\n+    class Inner<T> {}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/TypeReqRef.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -310,0 +310,20 @@\n+    @Test\n+    public void testOtherPrimitives(Path base) throws Exception {\n+        for (String type : new String[] {\"boolean\", \"long\", \"float\", \"double\"}) {\n+            doTest(base,\n+                   \"\"\"\n+                   package test;\n+                   public class Test {\n+                       private void test($type v) {\n+                           switch (v) {\n+                               default -> {}\n+                           }\n+                       }\n+                   }\n+                   \"\"\".replace(\"$type\", type),\n+                   21,\n+                   \"Test.java:4:16: compiler.err.preview.feature.disabled.plural: (compiler.misc.feature.primitive.patterns)\",\n+                   \"1 error\");\n+        }\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/patterns\/SourceLevelChecks.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -1,39 +0,0 @@\n-\/*\n- * @test \/nodynamiccopyright\/\n- * @bug 8206986\n- * @summary Verify switch over boolean\/long\/float\/double is not allowed.\n- * @compile\/fail\/ref=SwitchNoExtraTypes.out -XDrawDiagnostics SwitchNoExtraTypes.java\n- * @compile --enable-preview --source 22 SwitchNoExtraTypes.java\n- *\/\n-\n-public class SwitchNoExtraTypes {\n-\n-    private void switchBoolean(boolean b) {\n-        switch (b) {\n-            case true: return ;\n-            default:\n-        }\n-    }\n-\n-    private void switchLong(long l) {\n-        switch (l) {\n-            case 0l: return ;\n-            default:\n-        }\n-    }\n-\n-    private void switchFloat(float f) {\n-        switch (f) {\n-            case 0f: return ;\n-            default:\n-        }\n-    }\n-\n-    private void switchDouble(double d) {\n-        switch (d) {\n-            case 0d: return ;\n-            default:\n-        }\n-    }\n-\n-}\n","filename":"test\/langtools\/tools\/javac\/switchextra\/SwitchNoExtraTypes.java","additions":0,"deletions":39,"binary":false,"changes":39,"status":"deleted"},{"patch":"@@ -1,5 +0,0 @@\n-SwitchNoExtraTypes.java:12:16: compiler.err.selector.type.not.allowed: boolean\n-SwitchNoExtraTypes.java:19:16: compiler.err.selector.type.not.allowed: long\n-SwitchNoExtraTypes.java:26:16: compiler.err.selector.type.not.allowed: float\n-SwitchNoExtraTypes.java:33:16: compiler.err.selector.type.not.allowed: double\n-4 errors\n","filename":"test\/langtools\/tools\/javac\/switchextra\/SwitchNoExtraTypes.out","additions":0,"deletions":5,"binary":false,"changes":5,"status":"deleted"}]}