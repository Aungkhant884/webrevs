{"files":[{"patch":"@@ -0,0 +1,285 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.lang.runtime;\n+\n+\/**\n+ * A casting conversion is considered to be exact if, after applying the conversion\n+ * to the value, no exception was raised or loss of information has occured;\n+ * otherwise it is considered inexact.\n+ * The methods in this class provide the run-time support for primitive conversions exactness checks.\n+ * These methods may be used, for example, by Java compiler implementations to implement checks\n+ * for instanceof and pattern matching runtime implementations.\n+ * See JLS section 5.5.1 for more information on exact casting conversions.\n+ *\n+ * @jls 5.5.1 Exact Casting Conversions\n+ * @jls 15.20.2 The instanceof Operator\n+ *\n+ * @since 22\n+ *\/\n+public final class ExactConversionsSupport {\n+\n+    private ExactConversionsSupport() { }\n+\n+     \/** Exactness method from int to byte\n+     *\n+     * @param n value\n+     * @return  true if the passed value can be converted exactly to the target type\n+     *\n+     * *\/\n+    public static boolean intToByteExact(int n)      {return n == (int)(byte)n;}\n+\n+    \/** Exactness method from int to short\n+     *\n+     * @param n value\n+     * @return  true if the passed value can be converted exactly to the target type\n+     *\n+     * *\/\n+    public static boolean intToShortExact(int n)     {return n == (int)(short)n;}\n+\n+    \/** Exactness method from int to char\n+     *\n+     * @param n value\n+     * @return  true if the passed value can be converted exactly to the target type\n+     *\n+     * *\/\n+    public static boolean intToCharExact(int n)      {return n == (int)(char)n;}\n+\n+    \/** Exactness method from int to float\n+     *\n+     * @param n value\n+     * @return  true if the passed value can be converted exactly to the target type\n+     *\n+     * @implSpec relies on the notion of representation equivalence defined in the\n+     * specification of the {@linkplain Double} class.\n+     *\n+     * *\/\n+    public static boolean intToFloatExact(int n) { return n == (int)(float)n && n != Integer.MAX_VALUE; }\n+\n+    \/** Exactness method from long to byte\n+     *\n+     * @param n value\n+     * @return  true if the passed value can be converted exactly to the target type\n+     *\n+     * *\/\n+    public static boolean longToByteExact(long n)    {return n == (long)(byte)n;}\n+\n+    \/** Exactness method from long to short\n+     *\n+     * @param n value\n+     * @return  true if the passed value can be converted exactly to the target type\n+     *\n+     * *\/\n+    public static boolean longToShortExact(long n)   {return n == (long)(short)n;}\n+\n+    \/** Exactness method from long to char\n+     *\n+     * @param n value\n+     * @return  true if the passed value can be converted exactly to the target type\n+     *\n+     * *\/\n+    public static boolean longToCharExact(long n)    {return n == (long)(char)n;}\n+\n+    \/** Exactness method from long to int\n+     *\n+     * @param n value\n+     * @return  true if the passed value can be converted exactly to the target type\n+     *\n+     * *\/\n+    public static boolean longToIntExact(long n)     {return n == (long)(int)n;}\n+\n+    \/** Exactness method from long to float\n+     *\n+     * @param n value\n+     * @return  true if the passed value can be converted exactly to the target type\n+     *\n+     * @implSpec relies on the notion of representation equivalence defined in the\n+     * specification of the {@linkplain Double} class.\n+     *\n+     * *\/\n+    public static boolean longToFloatExact(long n) {\n+        return n == (long)(float)n && n != Long.MAX_VALUE;\n+    }\n+\n+    \/** Exactness method from long to double\n+     *\n+     * @param n value\n+     * @return  true if the passed value can be converted exactly to the target type\n+     *\n+     * @implSpec relies on the notion of representation equivalence defined in the\n+     * specification of the {@linkplain Double} class.\n+     * *\/\n+    public static boolean longToDoubleExact(long n) {\n+        return n == (long)(double)n && n != Long.MAX_VALUE;\n+    }\n+\n+    \/** Exactness method from float to byte\n+     *\n+     * @param n value\n+     * @return  true if the passed value can be converted exactly to the target type\n+     *\n+     * @implSpec relies on the notion of representation equivalence defined in the\n+     * specification of the {@linkplain Double} class.\n+     *\n+     * *\/\n+    public static boolean floatToByteExact(float n)  {\n+        return n == (float)(byte)n && !isNegativeZero(n);\n+    }\n+\n+    \/** Exactness method from float to short\n+     *\n+     * @param n value\n+     * @return  true if the passed value can be converted exactly to the target type\n+     *\n+     * @implSpec relies on the notion of representation equivalence defined in the\n+     * specification of the {@linkplain Double} class.\n+     *\n+     * *\/\n+    public static boolean floatToShortExact(float n) {\n+        return n == (float)(short)n && !isNegativeZero(n);\n+    }\n+\n+    \/** Exactness method from float to char\n+     *\n+     * @param n value\n+     * @return  true if the passed value can be converted exactly to the target type\n+     *\n+     * @implSpec relies on the notion of representation equivalence defined in the\n+     * specification of the {@linkplain Double} class.\n+     *\n+     * *\/\n+    public static boolean floatToCharExact(float n)  {\n+        return n == (float)(char)n && !isNegativeZero(n);\n+    }\n+\n+    \/** Exactness method from float to int\n+     *\n+     * @param n value\n+     * @return  true if the passed value can be converted exactly to the target type\n+     *\n+     * @implSpec relies on the notion of representation equivalence defined in the\n+     * specification of the {@linkplain Double} class.\n+     * *\/\n+    public static boolean floatToIntExact(float n) {\n+        return n == (float)(int)n && n != 0x1p31f && !isNegativeZero(n);\n+    }\n+\n+    \/** Exactness method from float to long\n+     *\n+     * @param n value\n+     * @return  true if the passed value can be converted exactly to the target type\n+     *\n+     * @implSpec relies on the notion of representation equivalence defined in the\n+     * specification of the {@linkplain Double} class.\n+     * *\/\n+    public static boolean floatToLongExact(float n) {\n+        return n == (float)(long)n && n != 0x1p63f && !isNegativeZero(n);\n+    }\n+\n+    \/** Exactness method from double to byte\n+     *\n+     * @param n value\n+     * @return  true if the passed value can be converted exactly to the target type\n+     *\n+     * @implSpec relies on the notion of representation equivalence defined in the\n+     * specification of the {@linkplain Double} class.\n+     *\n+     * *\/\n+    public static boolean doubleToByteExact(double n) {\n+        return n == (double)(byte)n && !isNegativeZero(n);\n+    }\n+\n+    \/** Exactness method from double to short\n+     *\n+     * @param n value\n+     * @return  true if the passed value can be converted exactly to the target type\n+     *\n+     * @implSpec relies on the notion of representation equivalence defined in the\n+     * specification of the {@linkplain Double} class.\n+     *\n+     * *\/\n+    public static boolean doubleToShortExact(double n){\n+        return n == (double)(short)n && !isNegativeZero(n);\n+    }\n+\n+    \/** Exactness method from double to char\n+     *\n+     * @param n value\n+     * @return  true if the passed value can be converted exactly to the target type\n+     *\n+     * @implSpec relies on the notion of representation equivalence defined in the\n+     * specification of the {@linkplain Double} class.\n+     *\n+     * *\/\n+    public static boolean doubleToCharExact(double n) {\n+        return n == (double)(char)n && !isNegativeZero(n);\n+    }\n+\n+    \/** Exactness method from double to int\n+     *\n+     * @param n value\n+     * @return  true if the passed value can be converted exactly to the target type\n+     *\n+     * @implSpec relies on the notion of representation equivalence defined in the\n+     * specification of the {@linkplain Double} class.\n+     *\n+     * *\/\n+    public static boolean doubleToIntExact(double n)  {\n+        return n == (double)(int)n && !isNegativeZero(n);\n+    }\n+\n+    \/** Exactness method from double to long\n+     *\n+     * @param n value\n+     * @return  true if the passed value can be converted exactly to the target type\n+     *\n+     * @implSpec relies on the notion of representation equivalence defined in the\n+     * specification of the {@linkplain Double} class.\n+     *\n+     * *\/\n+    public static boolean doubleToLongExact(double n) {\n+        return n == (double)(long)n && n != 0x1p63 && !isNegativeZero(n);\n+    }\n+\n+    \/** Exactness method from double to float\n+     *\n+     * @param n value\n+     * @return  true if the passed value can be converted exactly to the target type\n+     *\n+     * @implSpec relies on the notion of representation equivalence defined in the\n+     * specification of the {@linkplain Double} class.\n+     *\n+     * *\/\n+    public static boolean doubleToFloatExact(double n) {\n+        return n == (double)(float)n || n != n;\n+    }\n+\n+    private static boolean isNegativeZero(float n) {\n+        return Float.floatToRawIntBits(n) == Integer.MIN_VALUE;\n+    }\n+\n+    private static boolean isNegativeZero(double n) {\n+        return Double.doubleToRawLongBits(n) == Long.MIN_VALUE;\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/ExactConversionsSupport.java","additions":285,"deletions":0,"binary":false,"changes":285,"status":"added"},{"patch":"@@ -1,240 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package java.lang.runtime;\n-\n-\/**\n- * Exactness methods to test whether a conversion between types would be\n- * exact when not enough static information is present. These methods may\n- * be used, for example, by Java compiler implementations to implement checks\n- * for instanceof and pattern matching runtime implementations.\n- *\n- * @since 22\n- *\/\n-public final class ExactnessMethods {\n-\n-    private ExactnessMethods() { }\n-\n-     \/** Exactness method from int to byte\n-     *\n-     * @param n value\n-     * @return  true if the passed value can be converted exactly to the target type\n-     *\n-     * *\/\n-    public static boolean intToByteExact(int n)      {return n == (int)(byte)n;}\n-\n-    \/** Exactness method from int to short\n-     *\n-     * @param n value\n-     * @return  true if the passed value can be converted exactly to the target type\n-     *\n-     * *\/\n-    public static boolean intToShortExact(int n)     {return n == (int)(short)n;}\n-\n-    \/** Exactness method from int to char\n-     *\n-     * @param n value\n-     * @return  true if the passed value can be converted exactly to the target type\n-     *\n-     * *\/\n-    public static boolean intToCharExact(int n)      {return n == (int)(char)n;}\n-\n-    \/** Exactness method from int to float\n-     *\n-     * @param n value\n-     * @return  true if the passed value can be converted exactly to the target type\n-     *\n-     * *\/\n-    public static boolean intToFloatExact(int n) { return n == (int)(float)n && n != Integer.MAX_VALUE; }\n-\n-    \/** Exactness method from long to byte\n-     *\n-     * @param n value\n-     * @return  true if the passed value can be converted exactly to the target type\n-     *\n-     * *\/\n-    public static boolean longToByteExact(long n)    {return n == (long)(byte)n;}\n-\n-    \/** Exactness method from long to short\n-     *\n-     * @param n value\n-     * @return  true if the passed value can be converted exactly to the target type\n-     *\n-     * *\/\n-    public static boolean longToShortExact(long n)   {return n == (long)(short)n;}\n-\n-    \/** Exactness method from long to char\n-     *\n-     * @param n value\n-     * @return  true if the passed value can be converted exactly to the target type\n-     *\n-     * *\/\n-    public static boolean longToCharExact(long n)    {return n == (long)(char)n;}\n-\n-    \/** Exactness method from long to int\n-     *\n-     * @param n value\n-     * @return  true if the passed value can be converted exactly to the target type\n-     *\n-     * *\/\n-    public static boolean longToIntExact(long n)     {return n == (long)(int)n;}\n-\n-    \/** Exactness method from long to float\n-     *\n-     * @param n value\n-     * @return  true if the passed value can be converted exactly to the target type\n-     *\n-     * *\/\n-    public static boolean longToFloatExact(long n) {\n-        return n == (long)(float)n && n != Long.MAX_VALUE;\n-    }\n-\n-    \/** Exactness method from long to double\n-     *\n-     * @param n value\n-     * @return  true if the passed value can be converted exactly to the target type\n-     *\n-     * *\/\n-    public static boolean longToDoubleExact(long n) {\n-        return n == (long)(double)n && n != Long.MAX_VALUE;\n-    }\n-\n-    \/** Exactness method from float to byte\n-     *\n-     * @param n value\n-     * @return  true if the passed value can be converted exactly to the target type\n-     *\n-     * *\/\n-    public static boolean floatToByteExact(float n)  {\n-        return n == (float)(byte)n && !isNegativeZero(n);\n-    }\n-\n-    \/** Exactness method from float to short\n-     *\n-     * @param n value\n-     * @return  true if the passed value can be converted exactly to the target type\n-     *\n-     * *\/\n-    public static boolean floatToShortExact(float n) {\n-        return n == (float)(short)n && !isNegativeZero(n);\n-    }\n-\n-    \/** Exactness method from float to char\n-     *\n-     * @param n value\n-     * @return  true if the passed value can be converted exactly to the target type\n-     *\n-     * *\/\n-    public static boolean floatToCharExact(float n)  {\n-        return n == (float)(char)n && !isNegativeZero(n);\n-    }\n-\n-    \/** Exactness method from float to int\n-     *\n-     * @param n value\n-     * @return  true if the passed value can be converted exactly to the target type\n-     *\n-     * *\/\n-    public static boolean floatToIntExact(float n) {\n-        return n == (float)(int)n && n != 0x1p31f && !isNegativeZero(n);\n-    }\n-\n-    \/** Exactness method from float to long\n-     *\n-     * @param n value\n-     * @return  true if the passed value can be converted exactly to the target type\n-     *\n-     * *\/\n-    public static boolean floatToLongExact(float n) {\n-        return n == (float)(long)n && n != 0x1p63f && !isNegativeZero(n);\n-    }\n-\n-    \/** Exactness method from double to byte\n-     *\n-     * @param n value\n-     * @return  true if the passed value can be converted exactly to the target type\n-     *\n-     * *\/\n-    public static boolean doubleToByteExact(double n) {\n-        return n == (double)(byte)n && !isNegativeZero(n);\n-    }\n-\n-    \/** Exactness method from double to short\n-     *\n-     * @param n value\n-     * @return  true if the passed value can be converted exactly to the target type\n-     *\n-     * *\/\n-    public static boolean doubleToShortExact(double n){\n-        return n == (double)(short)n && !isNegativeZero(n);\n-    }\n-\n-    \/** Exactness method from double to char\n-     *\n-     * @param n value\n-     * @return  true if the passed value can be converted exactly to the target type\n-     *\n-     * *\/\n-    public static boolean doubleToCharExact(double n) {\n-        return n == (double)(char)n && !isNegativeZero(n);\n-    }\n-\n-    \/** Exactness method from double to int\n-     *\n-     * @param n value\n-     * @return  true if the passed value can be converted exactly to the target type\n-     *\n-     * *\/\n-    public static boolean doubleToIntExact(double n)  {\n-        return n == (double)(int)n && !isNegativeZero(n);\n-    }\n-\n-    \/** Exactness method from double to long\n-     *\n-     * @param n value\n-     * @return  true if the passed value can be converted exactly to the target type\n-     *\n-     * *\/\n-    public static boolean doubleToLongExact(double n) {\n-        return n == (double)(long)n && n != 0x1p63 && !isNegativeZero(n);\n-    }\n-\n-    \/** Exactness method from double to float\n-     *\n-     * @param n value\n-     * @return  true if the passed value can be converted exactly to the target type\n-     *\n-     * *\/\n-    public static boolean doubleToFloatExact(double n) {\n-        return n == (double)(float)n || n != n;\n-    }\n-\n-    private static boolean isNegativeZero(float n) {\n-        return Float.floatToRawIntBits(n) == Integer.MIN_VALUE;\n-    }\n-\n-    private static boolean isNegativeZero(double n) {\n-        return Double.doubleToRawLongBits(n) == Long.MIN_VALUE;\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/ExactnessMethods.java","additions":0,"deletions":240,"binary":false,"changes":240,"status":"deleted"},{"patch":"@@ -34,1 +34,0 @@\n-import java.util.Arrays;\n@@ -238,1 +237,1 @@\n-                                exactnessCheck = lookup.findStatic(ExactnessMethods.class, methodName, methodType).asType(MethodType.methodType(boolean.class, selectorType));\n+                                exactnessCheck = lookup.findStatic(ExactConversionsSupport.class, methodName, methodType).asType(MethodType.methodType(boolean.class, selectorType));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/SwitchBootstraps.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -166,1 +166,1 @@\n-    public final Type exactnessMethodsType;\n+    public final Type exactConversionsSupportType;\n@@ -549,1 +549,1 @@\n-        exactnessMethodsType = enterClass(\"java.lang.runtime.ExactnessMethods\");\n+        exactConversionsSupportType = enterClass(\"java.lang.runtime.ExactConversionsSupport\");\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symtab.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3030,1 +3030,1 @@\n-                syms.exactnessMethodsType,\n+                syms.exactConversionsSupportType,\n@@ -3037,1 +3037,1 @@\n-                make.QualIdent(syms.exactnessMethodsType.tsym),\n+                make.QualIdent(syms.exactConversionsSupportType.tsym),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-import static java.lang.runtime.ExactnessMethods.*;\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/preview\/patterns\/Exactness.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}