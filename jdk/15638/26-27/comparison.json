{"files":[{"patch":"@@ -36,2 +36,2 @@\n- * @compile PrimitivePatternsComboTest.java\n- * @run main PrimitivePatternsComboTest\n+ * @compile PrimitiveInstanceOfComboTest.java\n+ * @run main PrimitiveInstanceOfComboTest\n@@ -46,1 +46,1 @@\n-public class PrimitivePatternsComboTest extends ComboInstance<PrimitivePatternsComboTest> {\n+public class PrimitiveInstanceOfComboTest extends ComboInstance<PrimitiveInstanceOfComboTest> {\n@@ -51,1 +51,1 @@\n-    PrimitivePatternsComboTest() {\n+    PrimitiveInstanceOfComboTest() {\n@@ -57,1 +57,1 @@\n-        new ComboTestHelper<PrimitivePatternsComboTest>()\n+        new ComboTestHelper<PrimitiveInstanceOfComboTest>()\n@@ -61,1 +61,1 @@\n-                .run(PrimitivePatternsComboTest::new);\n+                .run(PrimitiveInstanceOfComboTest::new);\n","filename":"test\/langtools\/tools\/javac\/patterns\/PrimitiveInstanceOfComboTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"previous_filename":"test\/langtools\/tools\/javac\/patterns\/PrimitivePatternsComboTest.java","status":"renamed"},{"patch":"@@ -0,0 +1,162 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8304487\n+ * @summary Compiler Implementation for Primitive types in patterns, instanceof, and switch (Preview)\n+ * @compile -g --enable-preview -source ${jdk.version} PrimitiveInstanceOfPatternOpWithRecordPatterns.java\n+ * @run main\/othervm --enable-preview PrimitiveInstanceOfPatternOpWithRecordPatterns\n+ *\/\n+public class PrimitiveInstanceOfPatternOpWithRecordPatterns {\n+\n+    public static void main(String[] args) {\n+        assertEquals(true,  identityPrimitiveConversion());\n+        assertEquals(true,  wideningPrimitiveConversion());\n+        assertEquals(true,  narrowingPrimitiveConversion());\n+        assertEquals(true,  wideningAndNarrowingPrimitiveConversion());\n+        assertEquals(true,  boxingConversion());\n+        assertEquals(true,  boxingAndWideningReferenceConversion());\n+        assertEquals(true,  unboxing());\n+        assertEquals(true,  unboxingWithObject());\n+        assertEquals(true,  wideningReferenceConversionUnboxing());\n+        assertEquals(true,  wideningReferenceConversionUnboxingAndWideningPrimitive());\n+        assertEquals(true,  unboxingAndWideningPrimitiveExact());\n+        assertEquals(false, unboxingAndWideningPrimitiveNotExact());\n+        assertEquals(true,  unboxingWhenNullAndWideningPrimitive());\n+        assertEquals(true,  narrowingAndUnboxing());\n+    }\n+\n+    public static boolean identityPrimitiveConversion() {\n+        R_int r = new R_int(42);\n+        return r instanceof R_int(int _);\n+    }\n+\n+    public static boolean wideningPrimitiveConversion() {\n+        R_byte b = new R_byte((byte) 42);\n+        R_short s = new R_short((short) 42);\n+        R_char c = new R_char('a');\n+\n+        return b instanceof R_byte(int _) && s instanceof R_short(int _) && c instanceof R_char(int _);\n+    }\n+\n+    public static boolean narrowingPrimitiveConversion() {\n+        R_long l_within_int_range = new R_long(42L);\n+        R_long l_outside_int_range = new R_long(999999999999999999L);\n+\n+        return l_within_int_range instanceof R_long(int _) && !(l_outside_int_range instanceof R_long(int _));\n+    }\n+\n+    public static boolean wideningAndNarrowingPrimitiveConversion() {\n+        R_byte b = new R_byte((byte) 42);\n+        R_byte b2 = new R_byte((byte) -42);\n+        R_char c = new R_char((char) 42);\n+        return b instanceof R_byte(char _) && c instanceof R_char(byte _) && !(b2 instanceof R_byte(char _));\n+    }\n+\n+    public static boolean boxingConversion() {\n+        R_int i = new R_int(42);\n+\n+        return i instanceof R_int(Integer _);\n+    }\n+\n+    public static boolean boxingAndWideningReferenceConversion() {\n+        R_int i = new R_int(42);\n+        return i instanceof R_int(Object _) &&\n+                i instanceof R_int(Number _) &&\n+                i instanceof R_int(Comparable _);\n+    }\n+\n+    public static boolean unboxing() {\n+        R_Integer i = new R_Integer(Integer.valueOf(1));\n+        return i instanceof R_Integer(int _);\n+    }\n+\n+    public static boolean unboxingWithObject() {\n+        R_Object o1 = new R_Object((int) 42);\n+        R_Object o2 = new R_Object((byte) 42);\n+\n+        return o1 instanceof R_Object(int i1) &&\n+                o2 instanceof R_Object(byte b1) &&\n+                !(o1 instanceof R_Object(byte b2) &&\n+                !(o2 instanceof R_Object(int i2)));\n+    }\n+\n+    public static <T extends Integer> boolean wideningReferenceConversionUnboxing() {\n+        R_generic i = new R_generic(42);\n+        return i instanceof R_generic(int _);\n+    }\n+\n+    public static <T extends Integer> boolean wideningReferenceConversionUnboxingAndWideningPrimitive() {\n+        R_generic i = new R_generic(42);\n+        return i instanceof R_generic(double _);\n+    }\n+\n+    public static boolean unboxingAndWideningPrimitiveExact() {\n+        R_ByteValue b = new R_ByteValue(Byte.valueOf((byte)42));\n+        R_ShortValue s = new R_ShortValue(Short.valueOf((short)42));\n+        R_CharacterValue c = new R_CharacterValue(Character.valueOf('a'));\n+\n+        return (b instanceof R_ByteValue(int _)) && (s instanceof R_ShortValue(int _)) && (c instanceof R_CharacterValue(int _));\n+    }\n+\n+    public static boolean unboxingAndWideningPrimitiveNotExact() {\n+        int smallestIntNotRepresentable = 16777217; \/\/ 2^24 + 1\n+        R_Integer i = new R_Integer(Integer.valueOf(smallestIntNotRepresentable));\n+\n+        return i instanceof R_Integer(float _);\n+    }\n+\n+    public static boolean unboxingWhenNullAndWideningPrimitive() {\n+        R_ByteValue b = new R_ByteValue(null);\n+        R_ShortValue s = new R_ShortValue(null);\n+        R_CharacterValue c = new R_CharacterValue(null);\n+\n+        return !(b instanceof R_ByteValue(int _)) && !(s instanceof R_ShortValue(int _)) && !(c instanceof R_CharacterValue(int _));\n+    }\n+\n+    public static boolean narrowingAndUnboxing() {\n+        R_Number n = new R_Number(Byte.valueOf((byte) 42));\n+\n+        return n instanceof R_Number(byte _);\n+    }\n+\n+    static void assertEquals(boolean expected, boolean actual) {\n+        if (expected != actual) {\n+            throw new AssertionError(\"Expected: \" + expected + \", actual: \" + actual);\n+        }\n+    }\n+\n+    record R_int(int i) {}\n+    record R_byte(byte b) {}\n+    record R_short(short b) {}\n+    record R_char(char c) {}\n+    record R_long(long l) {}\n+    record R_Integer(Integer i) {}\n+    record R_Object(Object i) {}\n+    record R_generic<T extends Integer>(int i) {}\n+    record R_ByteValue(Byte b) {}\n+    record R_ShortValue(Short s) {}\n+    record R_CharacterValue(Character s) {}\n+    record R_Number(Number s) {}\n+}\n","filename":"test\/langtools\/tools\/javac\/patterns\/PrimitiveInstanceOfPatternOpWithRecordPatterns.java","additions":162,"deletions":0,"binary":false,"changes":162,"status":"added"},{"patch":"@@ -28,2 +28,2 @@\n- * @compile -g --enable-preview -source ${jdk.version} PrimitiveInstanceOf.java\n- * @run main\/othervm --enable-preview PrimitiveInstanceOf\n+ * @compile -g --enable-preview -source ${jdk.version} PrimitiveInstanceOfTypeComparisonOp.java\n+ * @run main\/othervm --enable-preview PrimitiveInstanceOfTypeComparisonOp\n@@ -31,1 +31,1 @@\n-public class PrimitiveInstanceOf {\n+public class PrimitiveInstanceOfTypeComparisonOp {\n","filename":"test\/langtools\/tools\/javac\/patterns\/PrimitiveInstanceOfTypeComparisonOp.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"test\/langtools\/tools\/javac\/patterns\/PrimitiveInstanceOf.java","status":"renamed"},{"patch":"@@ -28,2 +28,2 @@\n- * @compile PrimitivePatterns.java\n- * @run main\/othervm PrimitivePatterns\n+ * @compile PrimitivePatternsSwitch.java\n+ * @run main\/othervm PrimitivePatternsSwitch\n@@ -31,1 +31,1 @@\n-public class PrimitivePatterns {\n+public class PrimitivePatternsSwitch {\n@@ -33,2 +33,0 @@\n-        assertEquals(42, primitivePattern());\n-        assertEquals(42, primitivePatternUnnamed());\n@@ -114,16 +112,0 @@\n-    public static int primitivePattern() {\n-        int i = 42;\n-        if (i instanceof int p) {\n-            return p;\n-        }\n-        return -1;\n-    }\n-\n-    public static int primitivePatternUnnamed() {\n-        int i = 42;\n-        if (i instanceof int _) {\n-            return i;\n-        }\n-        return -1;\n-    }\n-\n","filename":"test\/langtools\/tools\/javac\/patterns\/PrimitivePatternsSwitch.java","additions":3,"deletions":21,"binary":false,"changes":24,"previous_filename":"test\/langtools\/tools\/javac\/patterns\/PrimitivePatterns.java","status":"renamed"}]}