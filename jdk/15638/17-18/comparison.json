{"files":[{"patch":"@@ -184,1 +184,0 @@\n-    \/\/ todo: check\n@@ -200,1 +199,1 @@\n-    int booleanSingleCase(boolean b) {\n+    int booleanSingleCase1(boolean b) {\n@@ -206,1 +205,1 @@\n-    int booleanSingleCase(boolean b) {\n+    int booleanSingleCase2(boolean b) {\n@@ -211,0 +210,9 @@\n+\n+    void nullAndPrimitive() {\n+        int i = 42;\n+        switch (i) {\n+            case short s -> System.out.println(\"its a short\");\n+            case null    -> System.out.println(\"oops\");\n+            default      -> System.out.println(\"any other integral value\");\n+        }\n+    }\n","filename":"test\/langtools\/tools\/javac\/patterns\/PrimitivePatternsSwitchErrors.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1,1 +0,0 @@\n-PrimitivePatternsSwitchErrors.java:206:9: compiler.err.already.defined: kindname.method, booleanSingleCase(boolean), kindname.class, PrimitivePatternsSwitchErrors\n@@ -27,2 +26,3 @@\n-PrimitivePatternsSwitchErrors.java:189:18: compiler.err.unconditional.pattern.and.default\n-PrimitivePatternsSwitchErrors.java:196:18: compiler.err.duplicate.unconditional.pattern\n+PrimitivePatternsSwitchErrors.java:188:18: compiler.err.unconditional.pattern.and.default\n+PrimitivePatternsSwitchErrors.java:195:18: compiler.err.duplicate.unconditional.pattern\n+PrimitivePatternsSwitchErrors.java:215:18: compiler.err.prob.found.req: (compiler.misc.inconvertible.types: compiler.misc.type.null, int)\n@@ -33,2 +33,2 @@\n-PrimitivePatternsSwitchErrors.java:201:16: compiler.err.not.exhaustive\n-PrimitivePatternsSwitchErrors.java:207:9: compiler.err.not.exhaustive.statement\n+PrimitivePatternsSwitchErrors.java:200:16: compiler.err.not.exhaustive\n+PrimitivePatternsSwitchErrors.java:206:9: compiler.err.not.exhaustive.statement\n","filename":"test\/langtools\/tools\/javac\/patterns\/PrimitivePatternsSwitchErrors.out","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}