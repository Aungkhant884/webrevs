{"files":[{"patch":"@@ -228,1 +228,1 @@\n-                         if (selectorType.isInstance(Object.class)) {\n+                         if (selectorType.equals(Object.class)) {\n@@ -237,9 +237,0 @@\n-                        } else if (!selectorType.isPrimitive()) {\n-                            currentTest = INSTANCEOF_CHECK;\n-                            if (currentLabelClass.equals(byte.class)) { testLabel = Byte.class; }\n-                            else if (currentLabelClass.equals(short.class)) { testLabel = Short.class; }\n-                            else if (currentLabelClass.equals(char.class)) { testLabel = Character.class; }\n-                            else if (currentLabelClass.equals(int.class)) { testLabel = Integer.class; }\n-                            else if (currentLabelClass.equals(double.class)) { testLabel = Double.class; }\n-                            else if (currentLabelClass.equals(float.class)) { testLabel = Float.class; }\n-                            else { testLabel = Long.class; }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/SwitchBootstraps.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -4154,1 +4154,1 @@\n-        if(!allowPrimitivePatterns) {\n+        if (!allowPrimitivePatterns) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -735,8 +735,0 @@\n-            if (tree.selector.type.hasTag(TypeTag.BOOLEAN)) {\n-                HashSet<JCTree> labelValues = tree.cases.stream()\n-                        .filter(TreeInfo::unguardedCase)\n-                        .flatMap(c -> c.labels.stream())\n-                        .filter(l -> !l.hasTag(DEFAULTCASELABEL))\n-                        .map(l -> l.hasTag(CONSTANTCASELABEL) ? ((JCConstantCaseLabel) l).expr\n-                                : ((JCPatternCaseLabel) l).pat)\n-                        .collect(Collectors.toCollection(HashSet::new));\n@@ -744,1 +736,1 @@\n-                boolean hasBothTrueAndFalse = labelValues.stream().filter(l -> l.hasTag(Tag.LITERAL)).map(l -> ((JCLiteral)l).value).distinct().count() == 2;\n+            boolean exhaustive = exhausts(tree.selector, tree.cases);\n@@ -746,9 +738,2 @@\n-                tree.isExhaustive = hasBothTrueAndFalse || tree.hasUnconditionalPattern;\n-\n-                if (hasBothTrueAndFalse && tree.hasUnconditionalPattern) {\n-                    log.error(tree, Errors.DefaultLabelNotAllowed);\n-                }\n-            } else {\n-                tree.isExhaustive = tree.hasUnconditionalPattern ||\n-                        TreeInfo.isErrorEnumSwitch(tree.selector, tree.cases) ||\n-                        exhausts(tree.selector, tree.cases);\n+            if (tree.selector.type.hasTag(TypeTag.BOOLEAN) && exhaustive && tree.hasUnconditionalPattern) {\n+                log.error(tree, Errors.DefaultLabelNotAllowed);\n@@ -756,0 +741,5 @@\n+\n+            tree.isExhaustive = tree.hasUnconditionalPattern ||\n+                    TreeInfo.isErrorEnumSwitch(tree.selector, tree.cases) ||\n+                    exhaustive;\n+\n@@ -766,0 +756,1 @@\n+            Set<Object> booleanLiterals = new HashSet<>();\n@@ -776,9 +767,14 @@\n-                        Symbol s = TreeInfo.symbol(constantLabel.expr);\n-                        if (s != null && s.isEnum()) {\n-                            enum2Constants.computeIfAbsent(s.owner, x -> {\n-                                Set<Symbol> result = new HashSet<>();\n-                                s.owner.members()\n-                                       .getSymbols(sym -> sym.kind == Kind.VAR && sym.isEnum())\n-                                       .forEach(result::add);\n-                                return result;\n-                            }).remove(s);\n+                        if (selector.type.hasTag(TypeTag.BOOLEAN)) {\n+                            Object value = ((JCLiteral) constantLabel.expr).value;\n+                            booleanLiterals.add(value);\n+                        } else {\n+                            Symbol s = TreeInfo.symbol(constantLabel.expr);\n+                            if (s != null && s.isEnum()) {\n+                                enum2Constants.computeIfAbsent(s.owner, x -> {\n+                                    Set<Symbol> result = new HashSet<>();\n+                                    s.owner.members()\n+                                            .getSymbols(sym -> sym.kind == Kind.VAR && sym.isEnum())\n+                                            .forEach(result::add);\n+                                    return result;\n+                                }).remove(s);\n+                            }\n@@ -789,0 +785,5 @@\n+\n+            if (selector.type.hasTag(TypeTag.BOOLEAN) && booleanLiterals.size() == 2) {\n+                return true;\n+            }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Flow.java","additions":28,"deletions":27,"binary":false,"changes":55,"status":"modified"}]}