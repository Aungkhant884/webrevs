{"files":[{"patch":"@@ -260,1 +260,1 @@\n-        String archiveFile =  fileName != null ? fileName :\n+        String archiveFileName =  fileName != null ? fileName :\n@@ -263,4 +263,5 @@\n-        \/\/ delete if archive file aready exists\n-        File fileArchive = new File(archiveFile);\n-        if (fileArchive.exists()) {\n-            fileArchive.delete();\n+        String tempArchiveFileName = archiveFileName + \".temp\";\n+        File tempArchiveFile = new File(tempArchiveFileName);\n+        \/\/ The operation below may cause exception if the file or its dir is protected.\n+        if (!tempArchiveFile.exists()) {\n+            tempArchiveFile.createNewFile();\n@@ -268,0 +269,2 @@\n+        tempArchiveFile.delete();\n+\n@@ -269,4 +272,4 @@\n-            String listFile = archiveFile + \".classlist\";\n-            File fileList = new File(listFile);\n-            if (fileList.exists()) {\n-                fileList.delete();\n+            String listFileName = archiveFileName + \".classlist\";\n+            File listFile = new File(listFileName);\n+            if (listFile.exists()) {\n+                listFile.delete();\n@@ -274,1 +277,1 @@\n-            dumpClassList(listFile);\n+            dumpClassList(listFileName);\n@@ -283,2 +286,2 @@\n-            cmds.add(\"-XX:SharedClassListFile=\" + listFile);\n-            cmds.add(\"-XX:SharedArchiveFile=\" + archiveFile);\n+            cmds.add(\"-XX:SharedClassListFile=\" + listFileName);\n+            cmds.add(\"-XX:SharedArchiveFile=\" + tempArchiveFileName);\n@@ -304,3 +307,2 @@\n-            if (fileList.exists()) {\n-                fileList.delete();\n-            }\n+            listFile.delete();\n+\n@@ -309,2 +311,2 @@\n-            if (!fileArchive.exists()) {\n-                throw new RuntimeException(\"Archive file \" + archiveFile +\n+            if (!tempArchiveFile.exists()) {\n+                throw new RuntimeException(\"Archive file \" + tempArchiveFileName +\n@@ -316,3 +318,3 @@\n-            dumpDynamicArchive(archiveFile);\n-            if (!fileArchive.exists()) {\n-                throw new RuntimeException(\"Archive file \" + archiveFile +\n+            dumpDynamicArchive(tempArchiveFileName);\n+            if (!tempArchiveFile.exists()) {\n+                throw new RuntimeException(\"Archive file \" + tempArchiveFileName +\n@@ -323,0 +325,8 @@\n+        \/\/ Override the existing archive file\n+        File archiveFile = new File(archiveFileName);\n+        if (archiveFile.exists()) {\n+            archiveFile.delete();\n+        }\n+        if (!tempArchiveFile.renameTo(archiveFile)) {\n+            throw new RuntimeException(\"Cannot rename temp file \" + tempArchiveFileName + \" to archive file\" + archiveFileName);\n+        }\n@@ -324,1 +334,1 @@\n-        System.out.println((isStatic ? \"Static\" : \" Dynamic\") + \" dump to file \" + archiveFile);\n+        System.out.println((isStatic ? \"Static\" : \" Dynamic\") + \" dump to file \" + archiveFileName);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/CDS.java","additions":31,"deletions":21,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -318,0 +318,1 @@\n+ -runtime\/cds\/appcds\/jcmd\/JCmdTestFileSafety.java \\\n","filename":"test\/hotspot\/jtreg\/TEST.groups","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import jdk.test.lib.dcmd.CommandExecutorException;\n@@ -77,0 +78,12 @@\n+    \/\/ If delete the created archive after test.\n+    private static boolean keepArchive = false;\n+    public static void setKeepArchive(boolean v) { keepArchive = v; }\n+    public static void checkFileExistence(String fileName, boolean checkExist) throws Exception {\n+        File file = new File(fileName);\n+        boolean exist = file.exists();\n+        boolean resultIsTrue = checkExist ? exist : !exist;\n+        if (!resultIsTrue) {\n+            throw new RuntimeException(\"File \" + fileName +  \" should \" + (checkExist ?  \"exist\" : \"not exist\"));\n+        }\n+    }\n+\n@@ -150,1 +163,1 @@\n-        app.setLogFileName(\"JCmdTestDynamicDump.log.\" + (logFileCount++));\n+        app.setLogFileName(\"JCmdTest-Run-\" + (isStatic ? \"Static.log\" : \"Dynamic.log.\") + (logFileCount++));\n@@ -162,1 +175,1 @@\n-    protected static void test(String archiveFile, long pid,\n+    protected static void test(String fileName, long pid,\n@@ -165,1 +178,1 @@\n-        String fileName = archiveFile != null ? archiveFile :\n+        String archiveFileName = fileName != null ? fileName :\n@@ -167,4 +180,2 @@\n-        File file = new File(fileName);\n-        if (file.exists()) {\n-            file.delete();\n-        }\n+\n+        File archiveFile = new File(archiveFileName);\n@@ -173,2 +184,2 @@\n-        if (archiveFile  != null) {\n-          jcmd +=  \" \" + archiveFile;\n+        if (archiveFileName  != null) {\n+          jcmd +=  \" \" + archiveFileName;\n@@ -182,5 +193,4 @@\n-            if (!file.exists()) {\n-                throw new RuntimeException(\"Could not create shared archive: \" + fileName);\n-            } else {\n-                runWithArchiveFile(fileName, useBoot, messages);\n-                file.delete();\n+            checkFileExistence(archiveFileName, true);\n+            runWithArchiveFile(archiveFileName, useBoot, messages);\n+            if (!keepArchive) {\n+\t\tarchiveFile.delete();\n@@ -189,2 +199,2 @@\n-            if (file.exists()) {\n-                throw new RuntimeException(\"Should not create shared archive \" + fileName);\n+            if (!keepArchive) {\n+                checkFileExistence(archiveFileName, false);\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jcmd\/JCmdTestDumpBase.java","additions":26,"deletions":16,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8265465\n+ * @summary Test jcmd to dump static shared archive.\n+ * @requires vm.cds\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @modules jdk.jcmd\/sun.tools.common:+open\n+ * @compile ..\/test-classes\/Hello.java JCmdTestDumpBase.java\n+ * @build sun.hotspot.WhiteBox\n+ * @build JCmdTestLingeredApp JCmdTestFileSafety\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm\/timeout=480 -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI JCmdTestFileSafety\n+ *\/\n+\n+import java.io.File;\n+import java.io.IOException;\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.apps.LingeredApp;\n+import jdk.test.lib.Platform;\n+\n+public class JCmdTestFileSafety extends JCmdTestDumpBase {\n+\n+    static void test() throws Exception {\n+        buildJars();\n+\n+        LingeredApp app = null;\n+        long pid;\n+\n+        int  test_count = 1;\n+        String subDir    = \"subdir\";\n+        File outputDirFile = new File(subDir);\n+        if (!outputDirFile.exists()) {\n+            outputDirFile.mkdir();\n+        }\n+        outputDirFile.setWritable(true);\n+        String localFileName = subDir + File.separator + \"MyStaticDump.jsa\";\n+        setIsStatic(true\/*static*\/);\n+        \/\/ Set target dir not writable, do static dump\n+        print2ln(test_count++ + \" Set target dir not writable, do static dump\");\n+        setKeepArchive(true);\n+        app = createLingeredApp(\"-cp\", allJars);\n+        pid = app.getPid();\n+        test(localFileName, pid, noBoot,  EXPECT_PASS);\n+        outputDirFile.setWritable(false);\n+        test(localFileName, pid, noBoot,  EXPECT_FAIL);\n+        app.stopApp();\n+        outputDirFile.setWritable(true);\n+        checkFileExistence(localFileName, true\/*exist*\/);\n+\n+        setIsStatic(false\/*dynamic*\/);\n+        \/\/  Set target dir not writable, do dynamic dump\n+        print2ln(test_count++ + \" Set target dir not writable, do dynamic dump\");\n+        setKeepArchive(true);\n+        outputDirFile.setWritable(true);\n+        app = createLingeredApp(\"-cp\", allJars, \"-XX:+RecordDynamicDumpInfo\");\n+        pid = app.getPid();\n+        localFileName = subDir + File.separator + \"MyDynamicDump.jsa\";\n+        test(localFileName, pid, noBoot,  EXPECT_PASS);\n+        app.stopApp();\n+        \/\/ cannot dynamically dump twice, restart\n+        app = createLingeredApp(\"-cp\", allJars, \"-XX:+RecordDynamicDumpInfo\");\n+        pid = app.getPid();\n+        outputDirFile.setWritable(false);\n+        test(localFileName, pid, noBoot,  EXPECT_FAIL);\n+        outputDirFile.setWritable(true);\n+        app.stopApp();\n+        \/\/ MyDynamicDump.jsa should exist\n+        checkFileExistence(localFileName, true);\n+        File rmFile = new File(localFileName);\n+        rmFile.delete();\n+        outputDirFile.delete();\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        if (Platform.isWindows()) {\n+            \/\/ ON windows, File operation resulted difference from other OS.\n+            \/\/ Set dir to not accessible for write, we still can run the test\n+            \/\/ to create archive successfully which is not expected.\n+            throw new jtreg.SkippedException(\"Test skipped on Windows\");\n+        }\n+        runTest(JCmdTestFileSafety::test);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jcmd\/JCmdTestFileSafety.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"}]}