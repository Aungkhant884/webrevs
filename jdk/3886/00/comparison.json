{"files":[{"patch":"@@ -253,0 +253,20 @@\n+    \/\/ Return a temp file name if the archive file exists. The temp file operation may\n+    \/\/ cause permission exception which prevents real archive being created.\n+    private static String getArchiveFileName(String name) throws Exception {\n+        String tempFileName = name + \".temp\";\n+        File tempFile = new File(tempFileName);\n+        if (tempFile.exists()) {\n+            tempFile.delete();\n+        } else {\n+            if (tempFile.createNewFile()) {\n+                tempFile.delete();\n+            }\n+        }\n+\n+        File archiveFile = new File(name);\n+        if (!archiveFile.exists()) {\n+            return name;\n+        }\n+        return tempFileName;\n+    }\n+\n@@ -260,1 +280,1 @@\n-        String archiveFile =  fileName != null ? fileName :\n+        String archiveFileName =  fileName != null ? fileName :\n@@ -263,5 +283,3 @@\n-        \/\/ delete if archive file aready exists\n-        File fileArchive = new File(archiveFile);\n-        if (fileArchive.exists()) {\n-            fileArchive.delete();\n-        }\n+        String tempFileName = getArchiveFileName(archiveFileName);\n+        File tempArchiveFile = new File(tempFileName);\n+\n@@ -269,4 +287,4 @@\n-            String listFile = archiveFile + \".classlist\";\n-            File fileList = new File(listFile);\n-            if (fileList.exists()) {\n-                fileList.delete();\n+            String listFileName = tempFileName + \".classlist\";\n+            File listFile = new File(listFileName);\n+            if (listFile.exists()) {\n+                listFile.delete();\n@@ -274,1 +292,1 @@\n-            dumpClassList(listFile);\n+            dumpClassList(listFileName);\n@@ -284,1 +302,1 @@\n-            cmds.add(\"-XX:SharedArchiveFile=\" + archiveFile);\n+            cmds.add(\"-XX:SharedArchiveFile=\" + tempFileName);\n@@ -304,2 +322,2 @@\n-            if (fileList.exists()) {\n-                fileList.delete();\n+            if (listFile.exists()) {\n+                listFile.delete();\n@@ -309,2 +327,2 @@\n-            if (!fileArchive.exists()) {\n-                throw new RuntimeException(\"Archive file \" + archiveFile +\n+            if (!tempArchiveFile.exists()) {\n+                throw new RuntimeException(\"Archive file \" + tempFileName +\n@@ -316,3 +334,3 @@\n-            dumpDynamicArchive(archiveFile);\n-            if (!fileArchive.exists()) {\n-                throw new RuntimeException(\"Archive file \" + archiveFile +\n+            dumpDynamicArchive(tempFileName);\n+            if (!tempArchiveFile.exists()) {\n+                throw new RuntimeException(\"Archive file \" + tempFileName +\n@@ -323,0 +341,10 @@\n+        \/\/ Override the existing archive file\n+        if (tempFileName != archiveFileName) {\n+            File archiveFile = new File(archiveFileName);\n+            if (archiveFile.exists()) {\n+                archiveFile.delete();\n+            }\n+            if (!tempArchiveFile.renameTo(archiveFile)) {\n+                throw new RuntimeException(\"Cannot rename temp file \" + tempFileName + \" to archive file\" + archiveFileName);\n+            }\n+        }\n@@ -324,1 +352,1 @@\n-        System.out.println((isStatic ? \"Static\" : \" Dynamic\") + \" dump to file \" + archiveFile);\n+        System.out.println((isStatic ? \"Static\" : \" Dynamic\") + \" dump to file \" + archiveFileName);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/CDS.java","additions":48,"deletions":20,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import jdk.test.lib.dcmd.CommandExecutorException;\n@@ -77,0 +78,12 @@\n+    \/\/ If delete archive before\/after test\n+    private static boolean keepArchive = false;\n+    public static void setKeepArchive(boolean v) { keepArchive = v; }\n+    public static void checkFileExistence(String fileName, boolean checkExist) throws Exception {\n+        File file = new File(fileName);\n+        boolean exist = file.exists();\n+        boolean resultIsTrue = checkExist ? exist : !exist;\n+        if (!resultIsTrue) {\n+            throw new RuntimeException(\"File \" + fileName +  \"should \" + (checkExist ?  \"exist \" : \"not exist\"));\n+        }\n+    }\n+\n@@ -150,1 +163,1 @@\n-        app.setLogFileName(\"JCmdTestDynamicDump.log.\" + (logFileCount++));\n+        app.setLogFileName(\"JCmdTest-Run-\" + (isStatic ? \"Static.log\" : \"Dynamic.log.\") + (logFileCount++));\n@@ -168,1 +181,1 @@\n-        if (file.exists()) {\n+        if (!keepArchive && file.exists()) {\n@@ -178,1 +191,19 @@\n-        OutputAnalyzer output = cmdExecutor.execute(jcmd, true\/*silent*\/);\n+        OutputAnalyzer output = null;\n+        try {\n+            output = cmdExecutor.execute(jcmd, true\/*silent*\/);\n+        } catch (CommandExecutorException e) {\n+            if (!expectOK) {\n+                \/\/ When target archive permission changed, the exception is\n+                \/\/    \"Static dump:java.io.IOException: Permission denied\"  or\n+                \/\/    \"executeProcess() failed: java.security.PrivilegedActionException: java.nio.file.AccessDeniedException: pid_<pid>-output.log\" or\n+                \/\/     or java security related type.\n+                \/\/ The printout below is just for displaying the real cause.\n+                Throwable t = e.getCause();\n+                if (t != null) {\n+                    System.out.println(\"Cause: \" + t);\n+                }\n+                return;\n+            } else {\n+                throw new RuntimeException(\"Failed with exception \" + e);\n+            }\n+        }\n@@ -182,4 +213,3 @@\n-            if (!file.exists()) {\n-                throw new RuntimeException(\"Could not create shared archive: \" + fileName);\n-            } else {\n-                runWithArchiveFile(fileName, useBoot, messages);\n+            checkFileExistence(fileName, true);\n+            runWithArchiveFile(fileName, useBoot, messages);\n+            if (!keepArchive) {\n@@ -189,3 +219,1 @@\n-            if (file.exists()) {\n-                throw new RuntimeException(\"Should not create shared archive \" + fileName);\n-            }\n+            checkFileExistence(fileName, false);\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jcmd\/JCmdTestDumpBase.java","additions":38,"deletions":10,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8265465\n+ * @summary Test jcmd to dump static shared archive.\n+ * @requires vm.cds\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @modules jdk.jcmd\/sun.tools.common:+open\n+ * @compile ..\/test-classes\/Hello.java JCmdTestDumpBase.java\n+ * @build sun.hotspot.WhiteBox\n+ * @build JCmdTestLingeredApp JCmdTestFileSecurity\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm\/timeout=480 -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI JCmdTestFileSecurity\n+ *\/\n+\n+import java.io.File;\n+import java.io.IOException;\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.apps.LingeredApp;\n+import jdk.test.lib.Platform;\n+\n+public class JCmdTestFileSecurity extends JCmdTestDumpBase {\n+\n+    static void test() throws Exception {\n+        buildJars();\n+\n+        LingeredApp app = null;\n+        long pid;\n+\n+        int  test_count = 1;\n+        \/\/ Set target dir not accessible, do static dump\n+        setIsStatic(true);\n+        print2ln(test_count++ + \" Set target dir not accessible, do static dump\");\n+        setKeepArchive(true);\n+        app = createLingeredApp(\"-cp\", allJars);\n+        pid = app.getPid();\n+        String localFileName = \"MyStaticDump.jsa\";\n+        test(localFileName, pid, noBoot,  EXPECT_PASS);\n+        File targetFile = CDSTestUtils.getOutputDirAsFile();\n+        targetFile.setWritable(false);\n+        test(localFileName, pid, noBoot,  EXPECT_FAIL);\n+        targetFile.setWritable(true);\n+        app.stopApp();\n+        \/\/ MyStaticDump.jsa should exist\n+        checkFileExistence(localFileName, true);\n+\n+        \/\/ test dynamic versoin\n+        setIsStatic(false);\n+        print2ln(test_count++ + \" Set target dir not accessible, do dynamic dump\");\n+        setKeepArchive(true);\n+        app = createLingeredApp(\"-cp\", allJars, \"-XX:+RecordDynamicDumpInfo\");\n+        pid = app.getPid();\n+        localFileName = \"MyDynamicDump.jsa\";\n+        test(localFileName, pid, noBoot,  EXPECT_PASS);\n+        app.stopApp();\n+        \/\/ cannot dynamically dump twice, restart\n+        app = createLingeredApp(\"-cp\", allJars, \"-XX:+RecordDynamicDumpInfo\");\n+        pid = app.getPid();\n+        targetFile.setWritable(false);\n+        test(localFileName, pid, noBoot,  EXPECT_FAIL);\n+        targetFile.setWritable(true);\n+        app.stopApp();\n+        \/\/ MyDynamicDump.jsa should exist\n+        checkFileExistence(localFileName, true);\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        if (Platform.isWindows()) {\n+            \/\/ ON windows, File operation resulted difference from other OS.\n+            throw new jtreg.SkippedException(\"Test skipped on Windows\");\n+        }\n+        runTest(JCmdTestFileSecurity::test);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jcmd\/JCmdTestFileSecurity.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"}]}