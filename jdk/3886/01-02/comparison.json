{"files":[{"patch":"@@ -253,20 +253,0 @@\n-    \/\/ Return a temp file name if the archive file exists. The temp file operation may\n-    \/\/ cause permission exception which prevents real archive being created.\n-    private static String getArchiveFileName(String name) throws Exception {\n-        String tempFileName = name + \".temp\";\n-        File tempFile = new File(tempFileName);\n-        if (tempFile.exists()) {\n-            tempFile.delete();\n-        } else {\n-            if (tempFile.createNewFile()) {\n-                tempFile.delete();\n-            }\n-        }\n-\n-        File archiveFile = new File(name);\n-        if (!archiveFile.exists()) {\n-            return name;\n-        }\n-        return tempFileName;\n-    }\n-\n@@ -283,2 +263,7 @@\n-        String tempFileName = getArchiveFileName(archiveFileName);\n-        File tempArchiveFile = new File(tempFileName);\n+        String tempArchiveFileName = archiveFileName + \".temp\";\n+        File tempArchiveFile = new File(tempArchiveFileName);\n+        \/\/ The operation below may cause exception if the file or its dir is protected.\n+        if (!tempArchiveFile.exists()) {\n+            tempArchiveFile.createNewFile();\n+        }\n+        tempArchiveFile.delete();\n@@ -287,1 +272,1 @@\n-            String listFileName = tempFileName + \".classlist\";\n+            String listFileName = archiveFileName + \".classlist\";\n@@ -301,2 +286,2 @@\n-            cmds.add(\"-XX:SharedClassListFile=\" + listFile);\n-            cmds.add(\"-XX:SharedArchiveFile=\" + tempFileName);\n+            cmds.add(\"-XX:SharedClassListFile=\" + listFileName);\n+            cmds.add(\"-XX:SharedArchiveFile=\" + tempArchiveFileName);\n@@ -322,3 +307,2 @@\n-            if (listFile.exists()) {\n-                listFile.delete();\n-            }\n+            listFile.delete();\n+\n@@ -328,1 +312,1 @@\n-                throw new RuntimeException(\"Archive file \" + tempFileName +\n+                throw new RuntimeException(\"Archive file \" + tempArchiveFileName +\n@@ -334,1 +318,1 @@\n-            dumpDynamicArchive(tempFileName);\n+            dumpDynamicArchive(tempArchiveFileName);\n@@ -336,1 +320,1 @@\n-                throw new RuntimeException(\"Archive file \" + tempFileName +\n+                throw new RuntimeException(\"Archive file \" + tempArchiveFileName +\n@@ -342,8 +326,6 @@\n-        if (tempFileName != archiveFileName) {\n-            File archiveFile = new File(archiveFileName);\n-            if (archiveFile.exists()) {\n-                archiveFile.delete();\n-            }\n-            if (!tempArchiveFile.renameTo(archiveFile)) {\n-                throw new RuntimeException(\"Cannot rename temp file \" + tempFileName + \" to archive file\" + archiveFileName);\n-            }\n+        File archiveFile = new File(archiveFileName);\n+        if (archiveFile.exists()) {\n+            archiveFile.delete();\n+        }\n+        if (!tempArchiveFile.renameTo(archiveFile)) {\n+            throw new RuntimeException(\"Cannot rename temp file \" + tempArchiveFileName + \" to archive file\" + archiveFileName);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/CDS.java","additions":21,"deletions":39,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -318,1 +318,1 @@\n- -runtime\/cds\/appcds\/jcmd\/JCmdTestFileSecurity.java \\\n+ -runtime\/cds\/appcds\/jcmd\/JCmdTestFileSafety.java \\\n","filename":"test\/hotspot\/jtreg\/TEST.groups","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-    \/\/ If delete archive before\/after test\n+    \/\/ If delete the created archive after test.\n@@ -86,1 +86,1 @@\n-            throw new RuntimeException(\"File \" + fileName +  \"should \" + (checkExist ?  \"exist \" : \"not exist\"));\n+            throw new RuntimeException(\"File \" + fileName +  \" should \" + (checkExist ?  \"exist\" : \"not exist\"));\n@@ -175,1 +175,1 @@\n-    protected static void test(String archiveFile, long pid,\n+    protected static void test(String fileName, long pid,\n@@ -178,1 +178,1 @@\n-        String fileName = archiveFile != null ? archiveFile :\n+        String archiveFileName = fileName != null ? fileName :\n@@ -180,3 +180,6 @@\n-        File file = new File(fileName);\n-        if (!keepArchive && file.exists()) {\n-            file.delete();\n+\n+        \/\/ Use a temporay file name\n+        String tempArchiveFileName = archiveFileName;\n+        File archiveFile = new File(archiveFileName);\n+        if (keepArchive && archiveFile.exists()) {\n+             tempArchiveFileName = archiveFileName + \".jcmd\";\n@@ -186,2 +189,2 @@\n-        if (archiveFile  != null) {\n-          jcmd +=  \" \" + archiveFile;\n+        if (archiveFileName  != null) {\n+          jcmd +=  \" \" + tempArchiveFileName;\n@@ -191,19 +194,1 @@\n-        OutputAnalyzer output = null;\n-        try {\n-            output = cmdExecutor.execute(jcmd, true\/*silent*\/);\n-        } catch (CommandExecutorException e) {\n-            if (!expectOK) {\n-                \/\/ When target archive permission changed, the exception is\n-                \/\/    \"Static dump:java.io.IOException: Permission denied\"  or\n-                \/\/    \"executeProcess() failed: java.security.PrivilegedActionException: java.nio.file.AccessDeniedException: pid_<pid>-output.log\" or\n-                \/\/     or java security related type.\n-                \/\/ The printout below is just for displaying the real cause.\n-                Throwable t = e.getCause();\n-                if (t != null) {\n-                    System.out.println(\"Cause: \" + t);\n-                }\n-                return;\n-            } else {\n-                throw new RuntimeException(\"Failed with exception \" + e);\n-            }\n-        }\n+        OutputAnalyzer output = cmdExecutor.execute(jcmd, true\/*silent*\/);\n@@ -213,2 +198,3 @@\n-            checkFileExistence(fileName, true);\n-            runWithArchiveFile(fileName, useBoot, messages);\n+            checkFileExistence(tempArchiveFileName, true);\n+            runWithArchiveFile(tempArchiveFileName, useBoot, messages);\n+            File tempArchiveFile = new File(tempArchiveFileName);\n@@ -216,1 +202,5 @@\n-                file.delete();\n+\t\ttempArchiveFile.delete();\n+            } else {\n+                if (tempArchiveFileName != archiveFileName) {\n+                    tempArchiveFile.renameTo(archiveFile);\n+                }\n@@ -219,1 +209,1 @@\n-            checkFileExistence(fileName, false);\n+            checkFileExistence(tempArchiveFileName, false);\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jcmd\/JCmdTestDumpBase.java","additions":22,"deletions":32,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8265465\n+ * @summary Test jcmd to dump static shared archive.\n+ * @requires vm.cds\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @modules jdk.jcmd\/sun.tools.common:+open\n+ * @compile ..\/test-classes\/Hello.java JCmdTestDumpBase.java\n+ * @build sun.hotspot.WhiteBox\n+ * @build JCmdTestLingeredApp JCmdTestFileSafety\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n+ * @run main\/othervm\/timeout=480 -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI JCmdTestFileSafety\n+ *\/\n+\n+import java.io.File;\n+import java.io.IOException;\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.apps.LingeredApp;\n+import jdk.test.lib.Platform;\n+\n+public class JCmdTestFileSafety extends JCmdTestDumpBase {\n+\n+    static void test() throws Exception {\n+        buildJars();\n+\n+        LingeredApp app = null;\n+        long pid;\n+\n+        int  test_count = 1;\n+        String subDir    = \"subdir\";\n+        File outputDirFile = new File(subDir);\n+        if (!outputDirFile.exists()) {\n+            outputDirFile.mkdir();\n+        }\n+        outputDirFile.setWritable(true);\n+        String localFileName = subDir + File.separator + \"MyStaticDump.jsa\";\n+        setIsStatic(true\/*static*\/);\n+        \/\/ Set target dir not writable, do static dump\n+        print2ln(test_count++ + \" Set target dir not writable, do static dump\");\n+        setKeepArchive(true);\n+        app = createLingeredApp(\"-cp\", allJars);\n+        pid = app.getPid();\n+        test(localFileName, pid, noBoot,  EXPECT_PASS);\n+        outputDirFile.setWritable(false);\n+        test(localFileName, pid, noBoot,  EXPECT_FAIL);\n+        app.stopApp();\n+        outputDirFile.setWritable(true);\n+        checkFileExistence(localFileName, true\/*exist*\/);\n+\n+        setIsStatic(false\/*dynamic*\/);\n+        \/\/  Set target dir not writable, do dynamic dump\n+        print2ln(test_count++ + \" Set target dir not writable, do dynamic dump\");\n+        setKeepArchive(true);\n+        outputDirFile.setWritable(true);\n+        app = createLingeredApp(\"-cp\", allJars, \"-XX:+RecordDynamicDumpInfo\");\n+        pid = app.getPid();\n+        localFileName = subDir + File.separator + \"MyDynamicDump.jsa\";\n+        test(localFileName, pid, noBoot,  EXPECT_PASS);\n+        app.stopApp();\n+        \/\/ cannot dynamically dump twice, restart\n+        app = createLingeredApp(\"-cp\", allJars, \"-XX:+RecordDynamicDumpInfo\");\n+        pid = app.getPid();\n+        outputDirFile.setWritable(false);\n+        test(localFileName, pid, noBoot,  EXPECT_FAIL);\n+        outputDirFile.setWritable(true);\n+        app.stopApp();\n+        \/\/ MyDynamicDump.jsa should exist\n+        checkFileExistence(localFileName, true);\n+        File rmFile = new File(localFileName);\n+        rmFile.delete();\n+        outputDirFile.delete();\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        if (Platform.isWindows()) {\n+            \/\/ ON windows, File operation resulted difference from other OS.\n+            \/\/ Set dir to not accessible for write, we still can run the test\n+            \/\/ to create archive successfully which is not expected.\n+            throw new jtreg.SkippedException(\"Test skipped on Windows\");\n+        }\n+        runTest(JCmdTestFileSafety::test);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jcmd\/JCmdTestFileSafety.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"},{"patch":"@@ -1,97 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8265465\n- * @summary Test jcmd to dump static shared archive.\n- * @requires vm.cds\n- * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n- * @modules jdk.jcmd\/sun.tools.common:+open\n- * @compile ..\/test-classes\/Hello.java JCmdTestDumpBase.java\n- * @build sun.hotspot.WhiteBox\n- * @build JCmdTestLingeredApp JCmdTestFileSecurity\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller sun.hotspot.WhiteBox\n- * @run main\/othervm\/timeout=480 -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI JCmdTestFileSecurity\n- *\/\n-\n-import java.io.File;\n-import java.io.IOException;\n-import jdk.test.lib.cds.CDSTestUtils;\n-import jdk.test.lib.apps.LingeredApp;\n-import jdk.test.lib.Platform;\n-\n-public class JCmdTestFileSecurity extends JCmdTestDumpBase {\n-\n-    static void test() throws Exception {\n-        buildJars();\n-\n-        LingeredApp app = null;\n-        long pid;\n-\n-        int  test_count = 1;\n-        \/\/ Set target dir not accessible, do static dump\n-        setIsStatic(true);\n-        print2ln(test_count++ + \" Set target dir not accessible, do static dump\");\n-        setKeepArchive(true);\n-        app = createLingeredApp(\"-cp\", allJars);\n-        pid = app.getPid();\n-        String localFileName = \"MyStaticDump.jsa\";\n-        test(localFileName, pid, noBoot,  EXPECT_PASS);\n-        File targetFile = CDSTestUtils.getOutputDirAsFile();\n-        targetFile.setWritable(false);\n-        test(localFileName, pid, noBoot,  EXPECT_FAIL);\n-        targetFile.setWritable(true);\n-        app.stopApp();\n-        \/\/ MyStaticDump.jsa should exist\n-        checkFileExistence(localFileName, true);\n-\n-        \/\/ test dynamic versoin\n-        setIsStatic(false);\n-        print2ln(test_count++ + \" Set target dir not accessible, do dynamic dump\");\n-        setKeepArchive(true);\n-        app = createLingeredApp(\"-cp\", allJars, \"-XX:+RecordDynamicDumpInfo\");\n-        pid = app.getPid();\n-        localFileName = \"MyDynamicDump.jsa\";\n-        test(localFileName, pid, noBoot,  EXPECT_PASS);\n-        app.stopApp();\n-        \/\/ cannot dynamically dump twice, restart\n-        app = createLingeredApp(\"-cp\", allJars, \"-XX:+RecordDynamicDumpInfo\");\n-        pid = app.getPid();\n-        targetFile.setWritable(false);\n-        test(localFileName, pid, noBoot,  EXPECT_FAIL);\n-        targetFile.setWritable(true);\n-        app.stopApp();\n-        \/\/ MyDynamicDump.jsa should exist\n-        checkFileExistence(localFileName, true);\n-    }\n-\n-    public static void main(String... args) throws Exception {\n-        if (Platform.isWindows()) {\n-            \/\/ ON windows, File operation resulted difference from other OS.\n-            throw new jtreg.SkippedException(\"Test skipped on Windows\");\n-        }\n-        runTest(JCmdTestFileSecurity::test);\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jcmd\/JCmdTestFileSecurity.java","additions":0,"deletions":97,"binary":false,"changes":97,"status":"deleted"}]}