{"files":[{"patch":"@@ -2886,1 +2886,1 @@\n-                        return findDiamond(env, site, argtypes, typeargtypes,\n+                        return findDiamond(pos, env, site, argtypes, typeargtypes,\n@@ -2899,1 +2899,1 @@\n-                                                null;\n+                                        null;\n@@ -2906,1 +2906,2 @@\n-                    }});\n+                    }\n+                });\n@@ -2909,7 +2910,33 @@\n-    \/** This method scans all the constructor symbol in a given class scope -\n-     *  assuming that the original scope contains a constructor of the kind:\n-     *  {@code Foo(X x, Y y)}, where X,Y are class type-variables declared in Foo,\n-     *  a method check is executed against the modified constructor type:\n-     *  {@code <X,Y>Foo<X,Y>(X x, Y y)}. This is crucial in order to enable diamond\n-     *  inference. The inferred return type of the synthetic constructor IS\n-     *  the inferred type for the diamond operator.\n+    \/**\n+     * Find the constructor using diamond inference and do some checks(deprecated and preview).\n+     *\n+     * @param pos          The position to use for error reporting.\n+     * @param env          The environment current at the constructor invocation.\n+     * @param site         The type of class for which a constructor is searched.\n+     *                     The scope of this class has been touched in attribution.\n+     * @param argtypes     The types of the constructor invocation's value arguments.\n+     * @param typeargtypes The types of the constructor invocation's type arguments.\n+     * @param allowBoxing  Allow boxing conversions of arguments.\n+     * @param useVarargs   Box trailing arguments into an array for varargs.\n+     *\/\n+    private Symbol findDiamond(DiagnosticPosition pos,\n+                               Env<AttrContext> env,\n+                               Type site,\n+                               List<Type> argtypes,\n+                               List<Type> typeargtypes,\n+                               boolean allowBoxing,\n+                               boolean useVarargs) {\n+        Symbol sym = findDiamond(env, site, argtypes, typeargtypes, allowBoxing, useVarargs);\n+        chk.checkDeprecated(pos, env.info.scope.owner, sym);\n+        chk.checkPreview(pos, sym);\n+        return sym;\n+    }\n+\n+    \/**\n+     * This method scans all the constructor symbol in a given class scope -\n+     * assuming that the original scope contains a constructor of the kind:\n+     * {@code Foo(X x, Y y)}, where X,Y are class type-variables declared in Foo,\n+     * a method check is executed against the modified constructor type:\n+     * {@code <X,Y>Foo<X,Y>(X x, Y y)}. This is crucial in order to enable diamond\n+     * inference. The inferred return type of the synthetic constructor IS\n+     * the inferred type for the diamond operator.\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":37,"deletions":10,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8257307\n+ * @summary No javac warning when calling deprecated constructor with diamond\n+ * @run compile\/ref=T8257037.out -Xlint -XDrawDiagnostics T8257037.java\n+ *\/\n+\n+public class T8257037 {\n+    T8257037_GenericClass<Object> test = new T8257037_GenericClass<>(); \/\/ use diamond\n+}\n+\n+class T8257037_GenericClass<T> {\n+    @Deprecated\n+    public T8257037_GenericClass() {}\n+}\n","filename":"test\/langtools\/tools\/javac\/T8257037\/T8257037.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+T8257037.java:32:42: compiler.warn.has.been.deprecated: <T>T8257037_GenericClass(), T8257037_GenericClass\n+1 warning\n","filename":"test\/langtools\/tools\/javac\/T8257037\/T8257037.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"}]}