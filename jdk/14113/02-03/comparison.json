{"files":[{"patch":"@@ -35,0 +35,2 @@\n+import javax.crypto.SecretKey;\n+\n@@ -42,4 +44,0 @@\n-    \/*\n-     * X448 produce keysize of 64 bytes which is larger in it's class\n-     * secp521r1 produce keysize of 64 bytes which is larger in it's class\n-     *\/\n@@ -48,1 +46,1 @@\n-        testAlgo(kem, \"XDH\", \"X448\");\n+        testAlgo(kem, \"X448\", null);\n@@ -64,1 +62,3 @@\n-        kpg.initialize(new ECGenParameterSpec(curveId));\n+        if (curveId != null) {\n+            kpg.initialize(new ECGenParameterSpec(curveId));\n+        }\n@@ -71,0 +71,1 @@\n+        SecretKey sk = enc.key();\n@@ -73,1 +74,6 @@\n-        Asserts.assertTrue(Arrays.equals(d.decapsulate(enc.encapsulation()).getEncoded(), enc.key().getEncoded()));\n+        Asserts.assertTrue(Arrays.equals(d.decapsulate(enc.encapsulation()).getEncoded(),\n+                sk.getEncoded()));\n+        Asserts.assertTrue(Arrays.equals(d.decapsulate(enc.encapsulation()).getEncoded(),\n+                sk.getEncoded()));\n+        Asserts.assertTrue(Arrays.equals(d.decapsulate(enc.encapsulation()).getEncoded(),\n+                enc.key().getEncoded()));\n","filename":"test\/jdk\/javax\/crypto\/KEM\/GenLargeNumberOfKeys.java","additions":13,"deletions":7,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -56,2 +56,0 @@\n-        test(\"XDH\", \"X25519\", p);\n-        test(\"XDH\", \"X448\", p);\n@@ -94,0 +92,5 @@\n+                Asserts.assertEQ(decT.secretSize(), dsk.getEncoded().length);\n+                Asserts.assertEQ(decT.secretSize(),\n+                        decT.decapsulate(enc.encapsulation()).getEncoded().length);\n+                Asserts.assertEQ(decT.decapsulate(enc.encapsulation()).getEncoded().length,\n+                        enc.key().getEncoded().length);\n","filename":"test\/jdk\/javax\/crypto\/KEM\/KemInterop.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -125,0 +125,4 @@\n+                Asserts.assertTrue(Arrays.equals(sk.getEncoded(),\n+                        decT.decapsulate(enc.encapsulation()).getEncoded()));\n+                Asserts.assertTrue(Arrays.equals(enc.key().getEncoded(),\n+                        decT.decapsulate(enc.encapsulation()).getEncoded()));\n@@ -130,0 +134,5 @@\n+                Asserts.assertEQ(decT.secretSize(), dsk.getEncoded().length);\n+                Asserts.assertEQ(decT.secretSize(),\n+                        decT.decapsulate(enc.encapsulation()).getEncoded().length);\n+                Asserts.assertEQ(decT.decapsulate(enc.encapsulation()).getEncoded().length,\n+                        enc.key().getEncoded().length);\n@@ -158,2 +167,0 @@\n-        secretLen.test(\"XDH\", \"X25519\", 32, 32);\n-        secretLen.test(\"XDH\", \"X448\", 64, 56);\n@@ -193,3 +200,1 @@\n-                Callable<KEM.Encapsulator> task = () -> {\n-                    return kem.newEncapsulator(kp.getPublic());\n-                };\n+                Callable<KEM.Encapsulator> task = () -> kem.newEncapsulator(kp.getPublic());\n@@ -202,1 +207,2 @@\n-                Asserts.assertTrue(Arrays.equals(decT.decapsulate(enc.encapsulation()).getEncoded(),\n+                Asserts.assertTrue(Arrays.equals(\n+                        decT.decapsulate(enc.encapsulation()).getEncoded(),\n@@ -229,3 +235,1 @@\n-                Callable<KEM.Encapsulated> task = () -> {\n-                    return encT.encapsulate();\n-                };\n+                Callable<KEM.Encapsulated> task = () -> encT.encapsulate();\n@@ -236,1 +240,2 @@\n-                Asserts.assertTrue(Arrays.equals(decT.decapsulate(future.get().encapsulation()).getEncoded(),\n+                Asserts.assertTrue(Arrays.equals(\n+                        decT.decapsulate(future.get().encapsulation()).getEncoded(),\n@@ -262,3 +267,1 @@\n-                Callable<KEM.Decapsulator> task = () -> {\n-                    return kem.newDecapsulator(kp.getPrivate());\n-                };\n+                Callable<KEM.Decapsulator> task = () -> kem.newDecapsulator(kp.getPrivate());\n@@ -270,1 +273,2 @@\n-                Asserts.assertTrue(Arrays.equals(decT.get().decapsulate(enc.encapsulation()).getEncoded(),\n+                Asserts.assertTrue(Arrays.equals(\n+                        decT.get().decapsulate(enc.encapsulation()).getEncoded(),\n@@ -300,3 +304,1 @@\n-                Callable<SecretKey> task = () -> {\n-                    return decT.decapsulate(enc.encapsulation());\n-                };\n+                Callable<SecretKey> task = () -> decT.decapsulate(enc.encapsulation());\n","filename":"test\/jdk\/javax\/crypto\/KEM\/KemTest.java","additions":19,"deletions":17,"binary":false,"changes":36,"status":"modified"}]}