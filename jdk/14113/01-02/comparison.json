{"files":[{"patch":"@@ -28,0 +28,1 @@\n+ * @library \/test\/lib\n@@ -32,2 +33,1 @@\n-import java.util.HashSet;\n-import java.util.Set;\n+import java.util.Arrays;\n@@ -35,1 +35,0 @@\n-import javax.crypto.SecretKey;\n@@ -37,0 +36,1 @@\n+import jdk.test.lib.Asserts;\n@@ -42,6 +42,0 @@\n-    public static void main(String[] args) throws Exception {\n-        KEM kem = KEM.getInstance(\"DHKEM\");\n-        testXDH(kem);\n-        testEC(kem);\n-    }\n-\n@@ -50,0 +44,1 @@\n+     * secp521r1 produce keysize of 64 bytes which is larger in it's class\n@@ -51,7 +46,4 @@\n-    private static void testXDH(KEM kem) throws Exception {\n-        KeyPair kp = genKeyPair(\"XDH\", \"X448\");\n-        Set<SecretKey> generated = new HashSet<>();\n-        for (int i = 0; i < COUNT; i++) {\n-            test(kem, kp, generated);\n-        }\n-        System.out.println(\"XDH test Successful\");\n+    public static void main(String[] args) throws Exception {\n+        KEM kem = KEM.getInstance(\"DHKEM\");\n+        testAlgo(kem, \"XDH\", \"X448\");\n+        testAlgo(kem, \"EC\", \"secp521r1\");\n@@ -60,6 +52,4 @@\n-    \/*\n-     * secp521r1 produce keysize of 64 bytes which is larger in it's class\n-     *\/\n-    private static void testEC(KEM kem) throws Exception {\n-        KeyPair kp = genKeyPair(\"EC\", \"secp521r1\");\n-        Set<SecretKey> generated = new HashSet<>();\n+    private static void testAlgo(KEM kem, String algo, String curveId) throws Exception {\n+        KeyPair kp = genKeyPair(algo, curveId);\n+        KEM.Encapsulator e = kem.newEncapsulator(kp.getPublic());\n+        KEM.Decapsulator d = kem.newDecapsulator(kp.getPrivate());\n@@ -67,1 +57,1 @@\n-            test(kem, kp, generated);\n+            test(e, d);\n@@ -69,1 +59,1 @@\n-        System.out.println(\"EC test Successful\");\n+        System.out.println(algo + \": test Successful\");\n@@ -72,1 +62,1 @@\n-    private static KeyPair genKeyPair(String algo, String curveid) throws Exception {\n+    private static KeyPair genKeyPair(String algo, String curveId) throws Exception {\n@@ -74,1 +64,1 @@\n-        kpg.initialize(new ECGenParameterSpec(curveid));\n+        kpg.initialize(new ECGenParameterSpec(curveId));\n@@ -78,1 +68,1 @@\n-    private static void test(KEM kem, KeyPair kp, Set<SecretKey> generated)\n+    private static void test(KEM.Encapsulator e, KEM.Decapsulator d)\n@@ -80,12 +70,4 @@\n-        KEM.Encapsulator e = kem.newEncapsulator(kp.getPublic());\n-        KEM.Encapsulated encap = e.encapsulate();\n-        SecretKey key = encap.key();\n-        if (generated.contains(key)) {\n-            throw new RuntimeException(\"Duplicate key found\");\n-        }\n-        generated.add(key);\n-        KEM.Decapsulator d = kem.newDecapsulator(kp.getPrivate());\n-        SecretKey dKey = d.decapsulate(encap.encapsulation());\n-        if (!key.equals(dKey)) {\n-            throw new RuntimeException(\"Key Mismatched\");\n-        }\n+        KEM.Encapsulated enc = e.encapsulate();\n+        Asserts.assertEQ(d.encapsulationSize(), enc.encapsulation().length);\n+        Asserts.assertEQ(d.secretSize(), enc.key().getEncoded().length);\n+        Asserts.assertTrue(Arrays.equals(d.decapsulate(enc.encapsulation()).getEncoded(), enc.key().getEncoded()));\n","filename":"test\/jdk\/javax\/crypto\/KEM\/GenLargeNumberOfKeys.java","additions":21,"deletions":39,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -77,1 +77,0 @@\n-                Asserts.assertEQ(enc.key(), enc.key());\n@@ -81,1 +80,0 @@\n-                Asserts.assertNE(enc.key(), enc1.key());\n@@ -85,1 +83,0 @@\n-                Asserts.assertNE(enc.key(), enc2.key());\n@@ -91,1 +88,0 @@\n-                Asserts.assertEQ(dsk, enc.key());\n@@ -93,0 +89,2 @@\n+\n+                Asserts.assertEQ(encT.encapsulationSize(), enc.encapsulation().length);\n@@ -94,0 +92,1 @@\n+                Asserts.assertEQ(encT.secretSize(), enc.key().getEncoded().length);\n@@ -99,1 +98,0 @@\n-                Asserts.assertEQ(dsk1, enc3.key());\n","filename":"test\/jdk\/javax\/crypto\/KEM\/KemInterop.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+import javax.crypto.DecapsulateException;\n@@ -110,1 +111,0 @@\n-                Asserts.assertEQ(enc.key(), enc.key());\n@@ -114,1 +114,0 @@\n-                Asserts.assertNE(enc.key(), enc1.key());\n@@ -118,1 +117,0 @@\n-                Asserts.assertNE(enc.key(), enc2.key());\n@@ -126,1 +124,0 @@\n-                Asserts.assertEQ(sk, dsk);\n@@ -128,0 +125,2 @@\n+\n+                Asserts.assertEQ(encT.encapsulationSize(), enc.encapsulation().length);\n@@ -129,0 +128,1 @@\n+                Asserts.assertEQ(encT.secretSize(), enc.key().getEncoded().length);\n@@ -135,1 +135,0 @@\n-                Asserts.assertEQ(dsk1, enc3.key());\n@@ -138,0 +137,8 @@\n+                try {\n+                    decT.decapsulate(new byte[enc.encapsulation().length]);\n+                    throw new RuntimeException(\"Shouldn't reach here\");\n+                } catch (DecapsulateException de) {\n+                    \/\/de.printStackTrace();\n+                    System.out.println(\"Expected Failure: mismatched encapsulation\");\n+                }\n+\n@@ -195,1 +202,2 @@\n-                Asserts.assertEQ(decT.decapsulate(enc.encapsulation()), enc.key());\n+                Asserts.assertTrue(Arrays.equals(decT.decapsulate(enc.encapsulation()).getEncoded(),\n+                        enc.key().getEncoded()));\n@@ -228,2 +236,2 @@\n-                Asserts.assertEQ(decT.decapsulate(future.get().encapsulation()),\n-                        future.get().key());\n+                Asserts.assertTrue(Arrays.equals(decT.decapsulate(future.get().encapsulation()).getEncoded(),\n+                        future.get().key().getEncoded()));\n@@ -262,1 +270,2 @@\n-                Asserts.assertEQ(decT.get().decapsulate(enc.encapsulation()), enc.key());\n+                Asserts.assertTrue(Arrays.equals(decT.get().decapsulate(enc.encapsulation()).getEncoded(),\n+                        enc.key().getEncoded()));\n@@ -297,1 +306,2 @@\n-                Asserts.assertEQ(future.get(), enc.key());\n+                Asserts.assertTrue(Arrays.equals(future.get().getEncoded(),\n+                        enc.key().getEncoded()));\n","filename":"test\/jdk\/javax\/crypto\/KEM\/KemTest.java","additions":20,"deletions":10,"binary":false,"changes":30,"status":"modified"}]}