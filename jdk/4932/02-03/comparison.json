{"files":[{"patch":"@@ -227,1 +227,1 @@\n-            Utils.shouldHaveCaughtException();\n+            Utils.shouldHaveThrownException();\n@@ -324,1 +324,1 @@\n-            Utils.shouldHaveCaughtException();\n+            Utils.shouldHaveThrownException();\n@@ -335,1 +335,1 @@\n-            Utils.shouldHaveCaughtException();\n+            Utils.shouldHaveThrownException();\n@@ -360,1 +360,1 @@\n-            Utils.shouldHaveCaughtException();\n+            Utils.shouldHaveThrownException();\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestIRMatching.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-            Utils.shouldHaveCaughtException();\n+            Utils.shouldHaveThrownException();\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestRunTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,1 +47,5 @@\n-            Utils.shouldHaveCaughtException(sDefault, s1, s2, s3);\n+            if (Utils.notAllBailedOut(sDefault, s1, s3)) {\n+                \/\/ Not all scenarios had a bailout which means that at least one exception should have been thrown.\n+                Asserts.fail(\"Should have thrown an exception\");\n+            }\n+\n@@ -49,1 +53,4 @@\n-            Asserts.assertTrue(e.getMessage().contains(\"The following scenarios have failed: #0, #1, #3\"), e.getMessage());\n+            if (Utils.noneBailedOut(sDefault, s1, s3)) {\n+                \/\/ Only do check if there was no bailout. Otherwise, the following message is different.\n+                Asserts.assertTrue(e.getMessage().contains(\"The following scenarios have failed: #0, #1, #3\"), e.getMessage());\n+            }\n@@ -53,2 +60,4 @@\n-            Utils.shouldHaveCaughtException(s1, s2, s3);\n-\n+            if (Utils.notAllBailedOut(s1, s3)) {\n+                \/\/ Not all scenarios had a bailout which means that at least one exception should have been thrown.\n+                Asserts.fail(\"Should have thrown an exception\");\n+            }\n@@ -56,1 +65,4 @@\n-            Asserts.assertTrue(e.getMessage().contains(\"The following scenarios have failed: #1, #3\"), e.getMessage());\n+            if (Utils.noneBailedOut(s1, s3)) {\n+                \/\/ Only do check if there was no bailout. Otherwise, the following message is different.\n+                Asserts.assertTrue(e.getMessage().contains(\"The following scenarios have failed: #1, #3\"), e.getMessage());\n+            }\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestScenarios.java","additions":17,"deletions":5,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -29,0 +29,3 @@\n+import jdk.test.lib.Asserts;\n+\n+import java.util.Arrays;\n@@ -31,2 +34,2 @@\n-    public static void shouldHaveCaughtException() {\n-        shouldHaveCaughtException(TestVMProcess.getLastTestVMOutput());\n+    public static void shouldHaveThrownException() {\n+        shouldHaveThrownException(TestVMProcess.getLastTestVMOutput());\n@@ -35,13 +38,5 @@\n-    public static void shouldHaveCaughtException(Scenario... scenarios) {\n-        boolean hitSafePointWhilePrinting = false;\n-        for (Scenario s : scenarios) {\n-            try {\n-                shouldHaveCaughtException(s.getTestVMOutput());\n-                hitSafePointWhilePrinting = true;\n-            } catch (ShouldHaveCaughtException e) {\n-                \/\/ No safepoint-while-printing message found\n-            }\n-        }\n-        if (!hitSafePointWhilePrinting) {\n-            throw new ShouldHaveCaughtException();\n-        }\n+    \/**\n+     * Did no scenario hit a safepoint while printing (i.e. a bailout)?\n+     *\/\n+    public static boolean noneBailedOut(Scenario... scenarios) {\n+        return Arrays.stream(scenarios).noneMatch(s -> s.getTestVMOutput().contains(IRMatcher.SAFEPOINT_WHILE_PRINTING_MESSAGE));\n@@ -51,2 +46,1 @@\n-     * Do not throw an exception if we hit a safepoint while printing which could possibly let the IR matching fail.\n-     * This happens very rarely. If there is a problem with the test, then we will catch that on the next test invocation.\n+     * Is there at least one scenario which did not hit a safepoint while printing (i.e. a bailout)?\n@@ -54,4 +48,2 @@\n-    private static void shouldHaveCaughtException(String testVMOutput) {\n-        if (!testVMOutput.contains(IRMatcher.SAFEPOINT_WHILE_PRINTING_MESSAGE)) {\n-            throw new ShouldHaveCaughtException();\n-        }\n+    public static boolean notAllBailedOut(Scenario... scenarios) {\n+        return !Arrays.stream(scenarios).allMatch(s -> s.getTestVMOutput().contains(IRMatcher.SAFEPOINT_WHILE_PRINTING_MESSAGE));\n@@ -59,1 +51,0 @@\n-}\n@@ -61,3 +52,6 @@\n-class ShouldHaveCaughtException extends RuntimeException {\n-    ShouldHaveCaughtException() {\n-        super(\"An exception should have been caught in a test but was not.\");\n+    private static void shouldHaveThrownException(String testVMOutput) {\n+        \/\/ Do not throw an exception if we hit a safepoint while printing which could possibly let the IR matching fail.\n+        \/\/ This happens very rarely. If there is a problem with the test, then we will catch that on the next test invocation.\n+        if (!testVMOutput.contains(IRMatcher.SAFEPOINT_WHILE_PRINTING_MESSAGE)) {\n+            Asserts.fail(\"Should have thrown exception\");\n+        }\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/Utils.java","additions":19,"deletions":25,"binary":false,"changes":44,"status":"modified"}]}