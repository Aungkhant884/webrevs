{"files":[{"patch":"@@ -51,1 +51,0 @@\n-\n@@ -53,3 +52,3 @@\n-            if (Utils.noneBailedOut(sDefault, s1, s3)) {\n-                \/\/ Only do check if there was no bailout. Otherwise, the following message is different.\n-                Asserts.assertTrue(e.getMessage().contains(\"The following scenarios have failed: #0, #1, #3\"), e.getMessage());\n+            if (!e.getMessage().contains(\"The following scenarios have failed: #0, #1, #3\")) {\n+                \/\/ Was there a bailout in a scenario? If not fail.\n+                Asserts.assertTrue(Utils.anyBailedOut(sDefault, s1, s3), e.getMessage());\n@@ -65,3 +64,3 @@\n-            if (Utils.noneBailedOut(s1, s3)) {\n-                \/\/ Only do check if there was no bailout. Otherwise, the following message is different.\n-                Asserts.assertTrue(e.getMessage().contains(\"The following scenarios have failed: #1, #3\"), e.getMessage());\n+            if (!e.getMessage().contains(\"The following scenarios have failed: #1, #3\")) {\n+                \/\/ Was there a bailout in a scenario? If not fail.\n+                Asserts.assertTrue(Utils.anyBailedOut(sDefault, s1, s3), e.getMessage());\n@@ -87,1 +86,0 @@\n-\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestScenarios.java","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -35,1 +35,5 @@\n-        shouldHaveThrownException(TestVMProcess.getLastTestVMOutput());\n+        \/\/ Do not throw an exception if we hit a safepoint while printing which could possibly let the IR matching fail.\n+        \/\/ This happens very rarely. If there is a problem with the test, then we will catch that on the next test invocation.\n+        if (!TestVMProcess.getLastTestVMOutput().contains(IRMatcher.SAFEPOINT_WHILE_PRINTING_MESSAGE)) {\n+            Asserts.fail(\"Should have thrown exception\");\n+        }\n@@ -39,1 +43,1 @@\n-     * Did no scenario hit a safepoint while printing (i.e. a bailout)?\n+     * Is there at least one scenario which hit a safepoint while printing (i.e. a bailout)?\n@@ -41,2 +45,2 @@\n-    public static boolean noneBailedOut(Scenario... scenarios) {\n-        return Arrays.stream(scenarios).noneMatch(s -> s.getTestVMOutput().contains(IRMatcher.SAFEPOINT_WHILE_PRINTING_MESSAGE));\n+    public static boolean anyBailedOut(Scenario... scenarios) {\n+        return Arrays.stream(scenarios).anyMatch(s -> s.getTestVMOutput().contains(IRMatcher.SAFEPOINT_WHILE_PRINTING_MESSAGE));\n@@ -49,9 +53,1 @@\n-        return !Arrays.stream(scenarios).allMatch(s -> s.getTestVMOutput().contains(IRMatcher.SAFEPOINT_WHILE_PRINTING_MESSAGE));\n-    }\n-\n-    private static void shouldHaveThrownException(String testVMOutput) {\n-        \/\/ Do not throw an exception if we hit a safepoint while printing which could possibly let the IR matching fail.\n-        \/\/ This happens very rarely. If there is a problem with the test, then we will catch that on the next test invocation.\n-        if (!testVMOutput.contains(IRMatcher.SAFEPOINT_WHILE_PRINTING_MESSAGE)) {\n-            Asserts.fail(\"Should have thrown exception\");\n-        }\n+        return Arrays.stream(scenarios).anyMatch(s -> !s.getTestVMOutput().contains(IRMatcher.SAFEPOINT_WHILE_PRINTING_MESSAGE));\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/Utils.java","additions":9,"deletions":13,"binary":false,"changes":22,"status":"modified"}]}