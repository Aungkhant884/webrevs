{"files":[{"patch":"@@ -921,1 +921,1 @@\n-    if (Verbose && xtty != NULL) {\n+    if (xtty != NULL) {\n","filename":"src\/hotspot\/share\/utilities\/ostream.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,0 +42,2 @@\n+    public static final String SAFEPOINT_WHILE_PRINTING_MESSAGE = \"<!-- safepoint while printing -->\";\n+\n@@ -490,1 +492,10 @@\n-            throw new IRViolationException(failuresBuilder.toString(), compilationsBuilder.toString());\n+\n+            \/\/ In some very rare cases, the VM output to regex match on contains \"<!-- safepoint while printing -->\"\n+            \/\/ (emitted by ttyLocker::break_tty_for_safepoint) which might be the reason for a matching error.\n+            \/\/ Do not throw an exception in this case (i.e. bailout).\n+            String compilations = compilationsBuilder.toString();\n+            if (!compilations.contains(SAFEPOINT_WHILE_PRINTING_MESSAGE)) {\n+                throw new IRViolationException(failuresBuilder.toString(), compilationsBuilder.toString());\n+            } else {\n+                System.out.println(\"Found \" + SAFEPOINT_WHILE_PRINTING_MESSAGE + \", bail out of IR matching\");\n+            }\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/IRMatcher.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n- * @library \/test\/lib \/\n+ * @library \/test\/lib \/testlibrary_tests \/\n@@ -227,1 +227,1 @@\n-            shouldNotReach();\n+            Utils.shouldHaveCaughtException();\n@@ -324,1 +324,1 @@\n-            shouldNotReach();\n+            Utils.shouldHaveCaughtException();\n@@ -335,1 +335,1 @@\n-            shouldNotReach();\n+            Utils.shouldHaveCaughtException();\n@@ -360,1 +360,1 @@\n-            shouldNotReach();\n+            Utils.shouldHaveCaughtException();\n@@ -372,4 +372,0 @@\n-    public static void shouldNotReach() {\n-        throw new ShouldNotReachException(\"Framework did not fail but it should have!\");\n-    }\n-\n@@ -1415,6 +1411,0 @@\n-class ShouldNotReachException extends RuntimeException {\n-    ShouldNotReachException(String s) {\n-        super(s);\n-    }\n-}\n-\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestIRMatching.java","additions":5,"deletions":15,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n- * @library \/test\/lib \/\n+ * @library \/test\/lib \/testlibrary_tests \/\n@@ -47,1 +47,1 @@\n-            throw new RuntimeException(\"Should not reach\");\n+            Utils.shouldHaveCaughtException();\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestRunTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @library \/test\/lib \/\n+ * @library \/test\/lib \/testlibrary_tests \/\n@@ -47,1 +47,1 @@\n-            Asserts.fail(\"Should not reach\");\n+            Utils.shouldHaveCaughtException(sDefault, s1, s2, s3);\n@@ -53,1 +53,2 @@\n-            Asserts.fail(\"Should not reach\");\n+            Utils.shouldHaveCaughtException(s1, s2, s3);\n+\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestScenarios.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package ir_framework.tests;\n+\n+import compiler.lib.ir_framework.Scenario;\n+import compiler.lib.ir_framework.driver.IRMatcher;\n+import compiler.lib.ir_framework.driver.TestVMProcess;\n+\n+public class Utils {\n+    public static void shouldHaveCaughtException() {\n+        shouldHaveCaughtException(TestVMProcess.getLastTestVMOutput());\n+    }\n+\n+    public static void shouldHaveCaughtException(Scenario... scenarios) {\n+        boolean hitSafePointWhilePrinting = false;\n+        for (Scenario s : scenarios) {\n+            try {\n+                shouldHaveCaughtException(s.getTestVMOutput());\n+                hitSafePointWhilePrinting = true;\n+            } catch (RuntimeException e) {\n+                \/\/ No safepoint-while-printing message found\n+            }\n+        }\n+        if (!hitSafePointWhilePrinting) {\n+            throw new RuntimeException(\"should not reach\");\n+        }\n+    }\n+\n+    \/**\n+     * Do not throw an exception if we hit a safepoint while printing which could possibly let the IR matching fail.\n+     * This happens very rarely. If there is a problem with the test, then we will catch that on the next test invocation.\n+     *\/\n+    private static void shouldHaveCaughtException(String testVMOutput) {\n+        if (!testVMOutput.contains(IRMatcher.SAFEPOINT_WHILE_PRINTING_MESSAGE)) {\n+            throw new ShouldHaveCaughtException();\n+        }\n+    }\n+}\n+\n+class ShouldHaveCaughtException extends RuntimeException {\n+    ShouldHaveCaughtException() {\n+        super(\"An exception should have been caught in a test but was not.\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/Utils.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"}]}