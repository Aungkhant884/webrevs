{"files":[{"patch":"@@ -287,10 +287,0 @@\n-    \/**\n-     * See {@code ConstantPool::decode_invokedynamic_index}.\n-     *\/\n-    private static int decodeInvokedynamicIndex(int i) {\n-        if (!isInvokedynamicIndex(i)) {\n-            throw new IllegalArgumentException(\"not an invokedynamic index: \" + i);\n-        }\n-        return ~i;\n-    }\n-\n@@ -827,1 +817,0 @@\n-        int index;\n@@ -832,6 +821,4 @@\n-            return index = decodeInvokedynamicIndex(rawIndex);\n-        } else {\n-            if (opcode == Bytecodes.INVOKEDYNAMIC) {\n-                throw new IllegalArgumentException(\"unexpected INVOKEDYNAMIC at \" + rawIndex);\n-            }\n-            index = rawIndexToConstantPoolCacheIndex(rawIndex, opcode);\n+            return compilerToVM().resolveInvokeDynamicInPool(this, rawIndex);\n+        }\n+        if (opcode == Bytecodes.INVOKEDYNAMIC) {\n+            throw new IllegalArgumentException(\"unexpected INVOKEDYNAMIC at \" + rawIndex);\n@@ -839,0 +826,1 @@\n+        int index = rawIndexToConstantPoolCacheIndex(rawIndex, opcode);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotConstantPool.java","additions":5,"deletions":17,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -336,0 +336,2 @@\n+        BootstrapMethodInvocation bmi = method.getConstantPool().lookupBootstrapMethodInvocation(cpi, INVOKEDYNAMIC);\n+        Assert.assertEquals(bmi.getName(), \"do_concat\");\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.hotspot.test\/src\/jdk\/vm\/ci\/hotspot\/test\/TestDynamicConstant.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}