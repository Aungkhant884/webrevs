{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1911,0 +1911,6 @@\n+                Document document = editor.getDocument();\n+                final String I18NProperty = \"i18n\";\n+                if (ComponentOrientation.RIGHT_TO_LEFT == newValue\n+                    && ! Boolean.TRUE.equals(document.getProperty(I18NProperty))) {\n+                    document.putProperty(I18NProperty, Boolean.TRUE);\n+                }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/basic\/BasicTextUI.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,120 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4710675\n+ * @key headful\n+ * @summary Verify JTextArea.setComponentOrientation honours RIGHT_TO_LEFT orientation.\n+ * @run main JTextAreaOrientationTest\n+ *\/\n+import java.awt.ComponentOrientation;\n+import java.awt.Graphics;\n+import java.awt.Rectangle;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import javax.imageio.ImageIO;\n+import javax.swing.JFrame;\n+import javax.swing.JTextArea;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UnsupportedLookAndFeelException;\n+\n+import static java.awt.image.BufferedImage.TYPE_INT_RGB;\n+\n+public class JTextAreaOrientationTest  {\n+\n+    static JFrame frame;\n+    static Rectangle bounds;\n+\n+    public static boolean compareBufferedImages(BufferedImage bufferedImage0, BufferedImage bufferedImage1) {\n+        int width = bufferedImage0.getWidth();\n+        int height = bufferedImage0.getHeight();\n+\n+        if (width != bufferedImage1.getWidth() || height != bufferedImage1.getHeight()) {\n+            return false;\n+        }\n+\n+        for (int y = 0; y < height; y++) {\n+            for (int x = 0; x < width; x++) {\n+                if (bufferedImage0.getRGB(x, y) != bufferedImage1.getRGB(x, y)) {\n+                    return false;\n+                }\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+    private static void setLookAndFeel(UIManager.LookAndFeelInfo laf) {\n+        try {\n+            UIManager.setLookAndFeel(laf.getClassName());\n+        } catch (UnsupportedLookAndFeelException ignored) {\n+            System.out.println(\"Unsupported L&F: \" + laf.getClassName());\n+        } catch (ClassNotFoundException | InstantiationException\n+                | IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        for (UIManager.LookAndFeelInfo laf : UIManager.getInstalledLookAndFeels()) {\n+            System.out.println(\"Testing L&F: \" + laf.getClassName());\n+            SwingUtilities.invokeAndWait(() -> setLookAndFeel(laf));\n+\n+            BufferedImage left = test(ComponentOrientation.LEFT_TO_RIGHT);\n+            ImageIO.write(left, \"png\", new File(\"JTextAreaTest-left.png\"));\n+            BufferedImage right = test(ComponentOrientation.RIGHT_TO_LEFT);\n+            ImageIO.write(right, \"png\", new File(\"JTextAreaTest-right.png\"));\n+            if (compareBufferedImages(left, right)) {\n+                throw new RuntimeException(\"Orientation change is not effected\");\n+            }\n+        }\n+    }\n+\n+    private static BufferedImage test(ComponentOrientation orientation) throws Exception {\n+        SwingUtilities.invokeAndWait(() -> {\n+            frame = new JFrame(\"Swing JTextArea component\");\n+            JTextArea ta = new JTextArea();\n+            ta.setText(\"Swing JTextArea component\");\n+            ta.setName(\"jtext\");\n+            ta.setComponentOrientation(orientation);\n+            frame.getContentPane().add(ta);\n+            frame.setSize(300, 100);\n+            frame.setUndecorated(true);\n+            frame.setLocationRelativeTo(null);\n+            frame.setVisible(true);\n+        });\n+        Thread.sleep(1000);\n+        SwingUtilities.invokeAndWait(() -> {\n+            bounds = frame.getBounds();\n+        });\n+        BufferedImage img = new BufferedImage(bounds.width, bounds.height, TYPE_INT_RGB);\n+        Graphics g = img.getGraphics();\n+        frame.paint(g);\n+        g.dispose();\n+        Thread.sleep(1000);\n+        SwingUtilities.invokeAndWait(() -> frame.dispose());\n+        return img;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JTextArea\/JTextAreaOrientationTest.java","additions":120,"deletions":0,"binary":false,"changes":120,"status":"added"}]}