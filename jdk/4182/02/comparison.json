{"files":[{"patch":"@@ -626,1 +626,1 @@\n-                case 0: case 1: case 2: case 3: case 4: case 5: case 6: case 7:\n+                case 0, 1, 2, 3, 4, 5, 6, 7 -> {\n@@ -630,2 +630,2 @@\n-                    break;\n-                case 12: case 13:\n+                }\n+                case 12, 13 -> {\n@@ -643,2 +643,2 @@\n-                    break;\n-                case 14:\n+                }\n+                case 14 -> {\n@@ -658,2 +658,2 @@\n-                    break;\n-                default:\n+                }\n+                default ->\n","filename":"src\/java.base\/share\/classes\/java\/io\/DataInputStream.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1781,13 +1781,5 @@\n-            switch (tc) {\n-                case TC_NULL:\n-                    return (String) readNull();\n-\n-                case TC_REFERENCE:\n-                    return (String) readHandle(false);\n-\n-                case TC_STRING:\n-                case TC_LONGSTRING:\n-                    return readString(false);\n-\n-                default:\n-                    throw new StreamCorruptedException(\n+            return switch (tc) {\n+                case TC_NULL                  -> (String) readNull();\n+                case TC_REFERENCE             -> (String) readHandle(false);\n+                case TC_STRING, TC_LONGSTRING -> readString(false);\n+                default                       -> throw new StreamCorruptedException(\n@@ -1795,1 +1787,1 @@\n-            }\n+            };\n@@ -1875,7 +1867,7 @@\n-        ObjectStreamClass descriptor;\n-        switch (tc) {\n-            case TC_NULL:\n-                descriptor = (ObjectStreamClass) readNull();\n-                break;\n-            case TC_REFERENCE:\n-                descriptor = (ObjectStreamClass) readHandle(unshared);\n+\n+        return switch (tc) {\n+            case TC_NULL            -> (ObjectStreamClass) readNull();\n+            case TC_PROXYCLASSDESC  -> readProxyDesc(unshared);\n+            case TC_CLASSDESC       -> readNonProxyDesc(unshared);\n+            case TC_REFERENCE       -> {\n+                var d = (ObjectStreamClass) readHandle(unshared);\n@@ -1883,10 +1875,4 @@\n-                descriptor.checkInitialized();\n-                break;\n-            case TC_PROXYCLASSDESC:\n-                descriptor = readProxyDesc(unshared);\n-                break;\n-            case TC_CLASSDESC:\n-                descriptor = readNonProxyDesc(unshared);\n-                break;\n-            default:\n-                throw new StreamCorruptedException(\n+                d.checkInitialized();\n+                yield d;\n+            }\n+            default                 -> throw new StreamCorruptedException(\n@@ -1894,2 +1880,1 @@\n-        }\n-        return descriptor;\n+        };\n@@ -2055,1 +2040,0 @@\n-        String str;\n@@ -2057,11 +2041,4 @@\n-        switch (tc) {\n-            case TC_STRING:\n-                str = bin.readUTF();\n-                break;\n-\n-            case TC_LONGSTRING:\n-                str = bin.readLongUTF();\n-                break;\n-\n-            default:\n-                throw new StreamCorruptedException(\n+        String str = switch (tc) {\n+            case TC_STRING      -> bin.readUTF();\n+            case TC_LONGSTRING  -> bin.readLongUTF();\n+            default             -> throw new StreamCorruptedException(\n@@ -2069,1 +2046,1 @@\n-        }\n+        };\n@@ -3683,8 +3660,1 @@\n-                        case 0:\n-                        case 1:\n-                        case 2:\n-                        case 3:\n-                        case 4:\n-                        case 5:\n-                        case 6:\n-                        case 7:   \/\/ 1 byte format: 0xxxxxxx\n+                        case 0, 1, 2, 3, 4, 5, 6, 7 -> \/\/ 1 byte format: 0xxxxxxx\n@@ -3692,4 +3662,1 @@\n-                            break;\n-\n-                        case 12:\n-                        case 13:  \/\/ 2 byte format: 110xxxxx 10xxxxxx\n+                        case 12, 13 -> {  \/\/ 2 byte format: 110xxxxx 10xxxxxx\n@@ -3702,3 +3669,2 @@\n-                            break;\n-\n-                        case 14:  \/\/ 3 byte format: 1110xxxx 10xxxxxx 10xxxxxx\n+                        }\n+                        case 14 -> {  \/\/ 3 byte format: 1110xxxx 10xxxxxx 10xxxxxx\n@@ -3714,4 +3680,2 @@\n-                            break;\n-\n-                        default:  \/\/ 10xx xxxx, 1111 xxxx\n-                            throw new UTFDataFormatException();\n+                        }\n+                        default ->  throw new UTFDataFormatException(); \/\/ 10xx xxxx, 1111 xxxx\n@@ -3751,8 +3715,1 @@\n-                case 0:\n-                case 1:\n-                case 2:\n-                case 3:\n-                case 4:\n-                case 5:\n-                case 6:\n-                case 7:     \/\/ 1 byte format: 0xxxxxxx\n+                case 0, 1, 2, 3, 4, 5, 6, 7 -> {     \/\/ 1 byte format: 0xxxxxxx\n@@ -3761,3 +3718,2 @@\n-\n-                case 12:\n-                case 13:    \/\/ 2 byte format: 110xxxxx 10xxxxxx\n+                }\n+                case 12, 13 -> {    \/\/ 2 byte format: 110xxxxx 10xxxxxx\n@@ -3774,2 +3730,2 @@\n-\n-                case 14:    \/\/ 3 byte format: 1110xxxx 10xxxxxx 10xxxxxx\n+                }\n+                case 14 -> {    \/\/ 3 byte format: 1110xxxx 10xxxxxx 10xxxxxx\n@@ -3788,1 +3744,1 @@\n-                                        ((b2 & 0x3F) << 6) |\n+                                        ((b2 & 0x3F) << 6)  |\n@@ -3791,3 +3747,2 @@\n-\n-                default:   \/\/ 10xx xxxx, 1111 xxxx\n-                    throw new UTFDataFormatException();\n+                }\n+                default -> throw new UTFDataFormatException(); \/\/ 10xx xxxx, 1111 xxxx\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectInputStream.java","additions":37,"deletions":82,"binary":false,"changes":119,"status":"modified"},{"patch":"@@ -1496,7 +1496,2 @@\n-                case 'Z':\n-                case 'B':\n-                    f.setOffset(primDataSize++);\n-                    break;\n-\n-                case 'C':\n-                case 'S':\n+                case 'Z', 'B' -> f.setOffset(primDataSize++);\n+                case 'C', 'S' -> {\n@@ -1505,4 +1500,2 @@\n-                    break;\n-\n-                case 'I':\n-                case 'F':\n+                }\n+                case 'I', 'F' -> {\n@@ -1511,4 +1504,2 @@\n-                    break;\n-\n-                case 'J':\n-                case 'D':\n+                }\n+                case 'J', 'D' -> {\n@@ -1517,4 +1508,2 @@\n-                    break;\n-\n-                case '[':\n-                case 'L':\n+                }\n+                case '[', 'L' -> {\n@@ -1525,4 +1514,2 @@\n-                    break;\n-\n-                default:\n-                    throw new InternalError();\n+                }\n+                default -> throw new InternalError();\n@@ -2127,34 +2114,9 @@\n-                    case 'Z':\n-                        Bits.putBoolean(buf, off, unsafe.getBoolean(obj, key));\n-                        break;\n-\n-                    case 'B':\n-                        buf[off] = unsafe.getByte(obj, key);\n-                        break;\n-\n-                    case 'C':\n-                        Bits.putChar(buf, off, unsafe.getChar(obj, key));\n-                        break;\n-\n-                    case 'S':\n-                        Bits.putShort(buf, off, unsafe.getShort(obj, key));\n-                        break;\n-\n-                    case 'I':\n-                        Bits.putInt(buf, off, unsafe.getInt(obj, key));\n-                        break;\n-\n-                    case 'F':\n-                        Bits.putFloat(buf, off, unsafe.getFloat(obj, key));\n-                        break;\n-\n-                    case 'J':\n-                        Bits.putLong(buf, off, unsafe.getLong(obj, key));\n-                        break;\n-\n-                    case 'D':\n-                        Bits.putDouble(buf, off, unsafe.getDouble(obj, key));\n-                        break;\n-\n-                    default:\n-                        throw new InternalError();\n+                    case 'Z' -> Bits.putBoolean(buf, off, unsafe.getBoolean(obj, key));\n+                    case 'B' -> buf[off] = unsafe.getByte(obj, key);\n+                    case 'C' -> Bits.putChar(buf, off, unsafe.getChar(obj, key));\n+                    case 'S' -> Bits.putShort(buf, off, unsafe.getShort(obj, key));\n+                    case 'I' -> Bits.putInt(buf, off, unsafe.getInt(obj, key));\n+                    case 'F' -> Bits.putFloat(buf, off, unsafe.getFloat(obj, key));\n+                    case 'J' -> Bits.putLong(buf, off, unsafe.getLong(obj, key));\n+                    case 'D' -> Bits.putDouble(buf, off, unsafe.getDouble(obj, key));\n+                    default  -> throw new InternalError();\n@@ -2181,34 +2143,9 @@\n-                    case 'Z':\n-                        unsafe.putBoolean(obj, key, Bits.getBoolean(buf, off));\n-                        break;\n-\n-                    case 'B':\n-                        unsafe.putByte(obj, key, buf[off]);\n-                        break;\n-\n-                    case 'C':\n-                        unsafe.putChar(obj, key, Bits.getChar(buf, off));\n-                        break;\n-\n-                    case 'S':\n-                        unsafe.putShort(obj, key, Bits.getShort(buf, off));\n-                        break;\n-\n-                    case 'I':\n-                        unsafe.putInt(obj, key, Bits.getInt(buf, off));\n-                        break;\n-\n-                    case 'F':\n-                        unsafe.putFloat(obj, key, Bits.getFloat(buf, off));\n-                        break;\n-\n-                    case 'J':\n-                        unsafe.putLong(obj, key, Bits.getLong(buf, off));\n-                        break;\n-\n-                    case 'D':\n-                        unsafe.putDouble(obj, key, Bits.getDouble(buf, off));\n-                        break;\n-\n-                    default:\n-                        throw new InternalError();\n+                    case 'Z' -> unsafe.putBoolean(obj, key, Bits.getBoolean(buf, off));\n+                    case 'B' -> unsafe.putByte(obj, key, buf[off]);\n+                    case 'C' -> unsafe.putChar(obj, key, Bits.getChar(buf, off));\n+                    case 'S' -> unsafe.putShort(obj, key, Bits.getShort(buf, off));\n+                    case 'I' -> unsafe.putInt(obj, key, Bits.getInt(buf, off));\n+                    case 'F' -> unsafe.putFloat(obj, key, Bits.getFloat(buf, off));\n+                    case 'J' -> unsafe.putLong(obj, key, Bits.getLong(buf, off));\n+                    case 'D' -> unsafe.putDouble(obj, key, Bits.getDouble(buf, off));\n+                    default  -> throw new InternalError();\n@@ -2233,10 +2170,4 @@\n-                switch (typeCodes[i]) {\n-                    case 'L':\n-                    case '[':\n-                        vals[offsets[i]] = unsafe.getReference(obj, readKeys[i]);\n-                        break;\n-\n-                    default:\n-                        throw new InternalError();\n-                }\n-            }\n+                vals[offsets[i]] = switch (typeCodes[i]) {\n+                    case 'L', '[' -> unsafe.getReference(obj, readKeys[i]);\n+                    default       -> throw new InternalError();\n+                };\n@@ -2275,2 +2206,1 @@\n-                    case 'L':\n-                    case '[':\n+                    case 'L', '[' -> {\n@@ -2292,4 +2222,2 @@\n-                        break;\n-\n-                    default:\n-                        throw new InternalError();\n+                    }\n+                    default -> throw new InternalError();\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java","additions":35,"deletions":107,"binary":false,"changes":142,"status":"modified"},{"patch":"@@ -113,13 +113,12 @@\n-        switch (signature.charAt(0)) {\n-            case 'Z': type = Boolean.TYPE; break;\n-            case 'B': type = Byte.TYPE; break;\n-            case 'C': type = Character.TYPE; break;\n-            case 'S': type = Short.TYPE; break;\n-            case 'I': type = Integer.TYPE; break;\n-            case 'J': type = Long.TYPE; break;\n-            case 'F': type = Float.TYPE; break;\n-            case 'D': type = Double.TYPE; break;\n-            case 'L':\n-            case '[': type = Object.class; break;\n-            default: throw new IllegalArgumentException(\"illegal signature\");\n-        }\n+        type = switch (signature.charAt(0)) {\n+            case 'Z'      -> Boolean.TYPE;\n+            case 'B'      -> Byte.TYPE;\n+            case 'C'      -> Character.TYPE;\n+            case 'S'      -> Short.TYPE;\n+            case 'I'      -> Integer.TYPE;\n+            case 'J'      -> Long.TYPE;\n+            case 'F'      -> Float.TYPE;\n+            case 'D'      -> Double.TYPE;\n+            case 'L', '[' -> Object.class;\n+            default       -> throw new IllegalArgumentException(\"illegal signature\");\n+        };\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamField.java","additions":12,"deletions":13,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -661,23 +661,10 @@\n-                        switch (c) {\n-                        case 'a':\n-                            c = 0x7;\n-                            break;\n-                        case 'b':\n-                            c = '\\b';\n-                            break;\n-                        case 'f':\n-                            c = 0xC;\n-                            break;\n-                        case 'n':\n-                            c = '\\n';\n-                            break;\n-                        case 'r':\n-                            c = '\\r';\n-                            break;\n-                        case 't':\n-                            c = '\\t';\n-                            break;\n-                        case 'v':\n-                            c = 0xB;\n-                            break;\n-                        }\n+                        c = switch (c) {\n+                            case 'a' -> 0x7;\n+                            case 'b' -> '\\b';\n+                            case 'f' -> 0xC;\n+                            case 'n' -> '\\n';\n+                            case 'r' -> '\\r';\n+                            case 't' -> '\\t';\n+                            case 'v' -> 0xB;\n+                            default  -> c;\n+                        };\n@@ -794,18 +781,7 @@\n-        String ret;\n-        switch (ttype) {\n-          case TT_EOF:\n-            ret = \"EOF\";\n-            break;\n-          case TT_EOL:\n-            ret = \"EOL\";\n-            break;\n-          case TT_WORD:\n-            ret = sval;\n-            break;\n-          case TT_NUMBER:\n-            ret = \"n=\" + nval;\n-            break;\n-          case TT_NOTHING:\n-            ret = \"NOTHING\";\n-            break;\n-          default: {\n+        String ret = switch (ttype) {\n+            case TT_EOF     -> \"EOF\";\n+            case TT_EOL     -> \"EOL\";\n+            case TT_WORD    -> sval;\n+            case TT_NUMBER  -> \"n=\" + nval;\n+            case TT_NOTHING -> \"NOTHING\";\n+            default         -> {\n@@ -818,4 +794,2 @@\n-                if (ttype < 256 &&\n-                    ((ctype[ttype] & CT_QUOTE) != 0)) {\n-                    ret = sval;\n-                    break;\n+                if (ttype < 256 && ((ctype[ttype] & CT_QUOTE) != 0)) {\n+                    yield sval;\n@@ -823,1 +797,0 @@\n-\n@@ -827,2 +800,1 @@\n-                ret = new String(s);\n-                break;\n+                yield new String(s);\n@@ -830,1 +802,1 @@\n-        }\n+        };\n","filename":"src\/java.base\/share\/classes\/java\/io\/StreamTokenizer.java","additions":21,"deletions":49,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -4709,3 +4709,4 @@\n-                switch(roundingMode) {\n-                case ROUND_HALF_DOWN:\n-                    return false;\n+                return switch (roundingMode) {\n+                    case ROUND_HALF_DOWN -> false;\n+                    case ROUND_HALF_UP   -> true;\n+                    case ROUND_HALF_EVEN -> oddQuot;\n@@ -4713,9 +4714,2 @@\n-                case ROUND_HALF_UP:\n-                    return true;\n-\n-                case ROUND_HALF_EVEN:\n-                    return oddQuot;\n-\n-                default:\n-                    throw new AssertionError(\"Unexpected rounding mode\" + roundingMode);\n-                }\n+                    default -> throw new AssertionError(\"Unexpected rounding mode\" + roundingMode);\n+                };\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigDecimal.java","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -3794,8 +3794,5 @@\n-            switch (signum) {\n-            case 1:\n-                return compareMagnitude(val);\n-            case -1:\n-                return val.compareMagnitude(this);\n-            default:\n-                return 0;\n-            }\n+            return switch (signum) {\n+                case 1  -> compareMagnitude(val);\n+                case -1 -> val.compareMagnitude(this);\n+                default -> 0;\n+            };\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigInteger.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -380,29 +380,11 @@\n-        switch(rm) {\n-\n-        case BigDecimal.ROUND_UP:\n-            return UP;\n-\n-        case BigDecimal.ROUND_DOWN:\n-            return DOWN;\n-\n-        case BigDecimal.ROUND_CEILING:\n-            return CEILING;\n-\n-        case BigDecimal.ROUND_FLOOR:\n-            return FLOOR;\n-\n-        case BigDecimal.ROUND_HALF_UP:\n-            return HALF_UP;\n-\n-        case BigDecimal.ROUND_HALF_DOWN:\n-            return HALF_DOWN;\n-\n-        case BigDecimal.ROUND_HALF_EVEN:\n-            return HALF_EVEN;\n-\n-        case BigDecimal.ROUND_UNNECESSARY:\n-            return UNNECESSARY;\n-\n-        default:\n-            throw new IllegalArgumentException(\"argument out of range\");\n-        }\n+        return switch (rm) {\n+            case BigDecimal.ROUND_UP          -> UP;\n+            case BigDecimal.ROUND_DOWN        -> DOWN;\n+            case BigDecimal.ROUND_CEILING     -> CEILING;\n+            case BigDecimal.ROUND_FLOOR       -> FLOOR;\n+            case BigDecimal.ROUND_HALF_UP     -> HALF_UP;\n+            case BigDecimal.ROUND_HALF_DOWN   -> HALF_DOWN;\n+            case BigDecimal.ROUND_HALF_EVEN   -> HALF_EVEN;\n+            case BigDecimal.ROUND_UNNECESSARY -> UNNECESSARY;\n+            default -> throw new IllegalArgumentException(\"argument out of range\");\n+        };\n","filename":"src\/java.base\/share\/classes\/java\/math\/RoundingMode.java","additions":11,"deletions":29,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -563,16 +563,7 @@\n-        BreakIterator iterator = null;\n-        switch (type) {\n-        case CHARACTER_INDEX:\n-            iterator = breakIteratorProvider.getCharacterInstance(locale);\n-            break;\n-        case WORD_INDEX:\n-            iterator = breakIteratorProvider.getWordInstance(locale);\n-            break;\n-        case LINE_INDEX:\n-            iterator = breakIteratorProvider.getLineInstance(locale);\n-            break;\n-        case SENTENCE_INDEX:\n-            iterator = breakIteratorProvider.getSentenceInstance(locale);\n-            break;\n-        }\n-        return iterator;\n+        return switch (type) {\n+            case CHARACTER_INDEX -> breakIteratorProvider.getCharacterInstance(locale);\n+            case WORD_INDEX      -> breakIteratorProvider.getWordInstance(locale);\n+            case LINE_INDEX      -> breakIteratorProvider.getLineInstance(locale);\n+            case SENTENCE_INDEX  -> breakIteratorProvider.getSentenceInstance(locale);\n+            default              -> null;\n+        };\n","filename":"src\/java.base\/share\/classes\/java\/text\/BreakIterator.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -975,19 +975,8 @@\n-        NumberFormat numberFormat = null;\n-        switch (choice) {\n-        case NUMBERSTYLE:\n-            numberFormat = provider.getNumberInstance(locale);\n-            break;\n-        case PERCENTSTYLE:\n-            numberFormat = provider.getPercentInstance(locale);\n-            break;\n-        case CURRENCYSTYLE:\n-            numberFormat = provider.getCurrencyInstance(locale);\n-            break;\n-        case INTEGERSTYLE:\n-            numberFormat = provider.getIntegerInstance(locale);\n-            break;\n-        case COMPACTSTYLE:\n-            numberFormat = provider.getCompactNumberInstance(locale, formatStyle);\n-            break;\n-        }\n-        return numberFormat;\n+        return switch (choice) {\n+            case NUMBERSTYLE   -> provider.getNumberInstance(locale);\n+            case PERCENTSTYLE  -> provider.getPercentInstance(locale);\n+            case CURRENCYSTYLE -> provider.getCurrencyInstance(locale);\n+            case INTEGERSTYLE  -> provider.getIntegerInstance(locale);\n+            case COMPACTSTYLE  -> provider.getCompactNumberInstance(locale, formatStyle);\n+            default            -> null;\n+        };\n","filename":"src\/java.base\/share\/classes\/java\/text\/NumberFormat.java","additions":8,"deletions":19,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -133,8 +133,12 @@\n-        switch (strength) {\n-        case Collator.IDENTICAL: toAddTo.append('='); break;\n-        case Collator.TERTIARY:  toAddTo.append(','); break;\n-        case Collator.SECONDARY: toAddTo.append(';'); break;\n-        case Collator.PRIMARY:   toAddTo.append('<'); break;\n-        case RESET: toAddTo.append('&'); break;\n-        case UNSET: toAddTo.append('?'); break;\n-        }\n+        var c = switch (strength) {\n+            case Collator.IDENTICAL -> '=';\n+            case Collator.TERTIARY  -> ',';\n+            case Collator.SECONDARY -> ';';\n+            case Collator.PRIMARY   -> '<';\n+            case RESET              -> '&';\n+            case UNSET              -> '?';\n+\n+            default -> throw new IllegalStateException(\"Unexpected value: \" + strength);\n+        };\n+        toAddTo.append(c);\n+        \n","filename":"src\/java.base\/share\/classes\/java\/text\/PatternEntry.java","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"}]}