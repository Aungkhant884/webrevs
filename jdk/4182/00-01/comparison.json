{"files":[{"patch":"@@ -1867,5 +1867,5 @@\n-        ObjectStreamClass descriptor;\n-        switch (tc) {\n-            case TC_NULL            -> descriptor = (ObjectStreamClass) readNull();\n-            case TC_PROXYCLASSDESC  -> descriptor = readProxyDesc(unshared);\n-            case TC_CLASSDESC       -> descriptor = readNonProxyDesc(unshared);\n+\n+        return switch (tc) {\n+            case TC_NULL            -> (ObjectStreamClass) readNull();\n+            case TC_PROXYCLASSDESC  -> readProxyDesc(unshared);\n+            case TC_CLASSDESC       -> readNonProxyDesc(unshared);\n@@ -1873,1 +1873,1 @@\n-                descriptor = (ObjectStreamClass) readHandle(unshared);\n+                var d = (ObjectStreamClass) readHandle(unshared);\n@@ -1875,1 +1875,2 @@\n-                descriptor.checkInitialized();\n+                d.checkInitialized();\n+                yield d;\n@@ -1879,2 +1880,1 @@\n-        }\n-        return descriptor;\n+        };\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectInputStream.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -113,10 +113,10 @@\n-        switch (signature.charAt(0)) {\n-            case 'Z'      -> type = Boolean.TYPE;\n-            case 'B'      -> type = Byte.TYPE;\n-            case 'C'      -> type = Character.TYPE;\n-            case 'S'      -> type = Short.TYPE;\n-            case 'I'      -> type = Integer.TYPE;\n-            case 'J'      -> type = Long.TYPE;\n-            case 'F'      -> type = Float.TYPE;\n-            case 'D'      -> type = Double.TYPE;\n-            case 'L', '[' -> type = Object.class;\n+        type = switch (signature.charAt(0)) {\n+            case 'Z'      -> Boolean.TYPE;\n+            case 'B'      -> Byte.TYPE;\n+            case 'C'      -> Character.TYPE;\n+            case 'S'      -> Short.TYPE;\n+            case 'I'      -> Integer.TYPE;\n+            case 'J'      -> Long.TYPE;\n+            case 'F'      -> Float.TYPE;\n+            case 'D'      -> Double.TYPE;\n+            case 'L', '[' -> Object.class;\n@@ -124,1 +124,1 @@\n-        }\n+        };\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamField.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -781,2 +781,2 @@\n-        String ret;\n-        switch (ttype) {\n+\n+        String ret = switch (ttype) {\n@@ -797,1 +797,0 @@\n-                    break;\n@@ -803,2 +802,1 @@\n-                ret = new String(s);\n-                break;\n+                yield new String(s);\n@@ -806,1 +804,1 @@\n-        }\n+        };\n","filename":"src\/java.base\/share\/classes\/java\/io\/StreamTokenizer.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -563,1 +563,1 @@\n-        BreakIterator iterator = switch (type) {\n+        return switch (type) {\n@@ -570,1 +570,0 @@\n-        return iterator;\n","filename":"src\/java.base\/share\/classes\/java\/text\/BreakIterator.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -975,1 +975,1 @@\n-        NumberFormat numberFormat = switch (choice) {\n+        return switch (choice) {\n@@ -983,1 +983,0 @@\n-        return numberFormat;\n","filename":"src\/java.base\/share\/classes\/java\/text\/NumberFormat.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}