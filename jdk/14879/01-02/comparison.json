{"files":[{"patch":"@@ -136,2 +136,2 @@\n-KlassToOopHandleTable* HeapShared::_scratch_java_mirror_table = nullptr;\n-HeapShared::ResolvedReferenceScratchTable* HeapShared::_scratch_references_table = nullptr;\n+MetaspaceObjToOopHandleTable* HeapShared::_scratch_java_mirror_table = nullptr;\n+MetaspaceObjToOopHandleTable* HeapShared::_scratch_references_table = nullptr;\n@@ -326,1 +326,1 @@\n-class KlassToOopHandleTable: public ResourceHashtable<Klass*, OopHandle,\n+class MetaspaceObjToOopHandleTable: public ResourceHashtable<MetaspaceObj*, OopHandle,\n@@ -331,1 +331,1 @@\n-  oop get_oop(Klass* k) {\n+  oop get_oop(MetaspaceObj* obj) {\n@@ -333,1 +333,1 @@\n-    OopHandle* handle = get(k);\n+    OopHandle* handle = get(obj);\n@@ -340,1 +340,1 @@\n-  void set_oop(Klass* k, oop o) {\n+  void set_oop(MetaspaceObj* obj, oop o) {\n@@ -343,1 +343,1 @@\n-    bool is_new = put(k, handle);\n+    bool is_new = put(obj, handle);\n@@ -346,1 +346,1 @@\n-  void remove_oop(Klass* k) {\n+  void remove_oop(MetaspaceObj* obj) {\n@@ -348,1 +348,1 @@\n-    OopHandle* handle = get(k);\n+    OopHandle* handle = get(obj);\n@@ -351,1 +351,1 @@\n-      remove(k);\n+      remove(obj);\n@@ -356,6 +356,2 @@\n-void HeapShared::add_scratch_resolved_reference(ConstantPool* src, int index, oop new_result) {\n-  MutexLocker ml(ScratchObjects_lock, Mutex::_no_safepoint_check_flag);\n-  OopHandle* scratch_handle = _scratch_references_table->get(src);\n-  assert(scratch_handle != nullptr, \"Must exist\");\n-  objArrayOop scratch = (objArrayOop)(scratch_handle->resolve());\n-  scratch->obj_at_put(index, new_result);\n+void HeapShared::add_scratch_resolved_references(ConstantPool* src, objArrayOop dest) {\n+  _scratch_references_table->set_oop(src, dest);\n@@ -364,12 +360,2 @@\n-void HeapShared::add_scratch_resolved_references(ConstantPool* src, OopHandle dest) {\n-  MutexLocker ml(ScratchObjects_lock, Mutex::_no_safepoint_check_flag);\n-  if (_scratch_references_table == nullptr) {\n-    _scratch_references_table = new (mtClass)ResolvedReferenceScratchTable();\n-  }\n-  assert(_scratch_references_table != nullptr, \"must be initialized\");\n-  _scratch_references_table->put(src, dest);\n-}\n-\n-OopHandle HeapShared::scratch_resolved_references(ConstantPool* src) {\n-  MutexLocker ml(ScratchObjects_lock, Mutex::_no_safepoint_check_flag);\n-  return *(_scratch_references_table->get(src));\n+objArrayOop HeapShared::scratch_resolved_references(ConstantPool* src) {\n+  return (objArrayOop)_scratch_references_table->get_oop(src);\n@@ -386,1 +372,2 @@\n-  _scratch_java_mirror_table = new (mtClass)KlassToOopHandleTable();\n+  _scratch_java_mirror_table = new (mtClass)MetaspaceObjToOopHandleTable();\n+  _scratch_references_table = new (mtClass)MetaspaceObjToOopHandleTable();\n@@ -405,0 +392,3 @@\n+  if (k->is_instance_klass()) {\n+    _scratch_references_table->remove(InstanceKlass::cast(k)->constants());\n+  }\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":19,"deletions":29,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-class KlassToOopHandleTable;\n+class MetaspaceObjToOopHandleTable;\n@@ -283,7 +283,2 @@\n-  static KlassToOopHandleTable* _scratch_java_mirror_table;\n-\n-  typedef ResourceHashtable<ConstantPool*, OopHandle,\n-    36137, \/\/ prime number\n-    AnyObj::C_HEAP,\n-    mtClassShared> ResolvedReferenceScratchTable;\n-  static ResolvedReferenceScratchTable* _scratch_references_table;\n+  static MetaspaceObjToOopHandleTable* _scratch_java_mirror_table;\n+  static MetaspaceObjToOopHandleTable* _scratch_references_table;\n@@ -406,3 +401,2 @@\n-  static OopHandle scratch_resolved_references(ConstantPool* src);\n-  static void add_scratch_resolved_reference(ConstantPool* src, int index, oop new_result) NOT_CDS_JAVA_HEAP_RETURN;\n-  static void add_scratch_resolved_references(ConstantPool* src, OopHandle dest) NOT_CDS_JAVA_HEAP_RETURN;\n+  static objArrayOop scratch_resolved_references(ConstantPool* src);\n+  static void add_scratch_resolved_references(ConstantPool* src, objArrayOop dest) NOT_CDS_JAVA_HEAP_RETURN;\n","filename":"src\/hotspot\/share\/cds\/heapShared.hpp","additions":5,"deletions":11,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -223,3 +223,4 @@\n-      HandleMark hm(THREAD);\n-      Handle scratch_handle(THREAD, scratch_references);\n-      HeapShared::add_scratch_resolved_references(this, loader_data->add_handle(scratch_handle));\n+      \/\/ HandleMark hm(THREAD);\n+      \/\/ Handle scratch_handle(THREAD, scratch_references);\n+      \/\/HeapShared::add_scratch_resolved_references(this, loader_data->add_handle(scratch_handle));\n+      HeapShared::add_scratch_resolved_references(this, scratch_references);\n@@ -298,0 +299,1 @@\n+    objArrayOop scratch_rr = HeapShared::scratch_resolved_references(orig_pool);\n@@ -303,1 +305,1 @@\n-      HeapShared::add_scratch_resolved_reference(orig_pool, i, nullptr);\n+      scratch_rr->obj_at_put(i, nullptr);\n@@ -309,1 +311,1 @@\n-            HeapShared::add_scratch_resolved_reference(orig_pool, i, obj);\n+            scratch_rr->obj_at_put(i, nullptr);\n@@ -314,2 +316,1 @@\n-    OopHandle handle = HeapShared::scratch_resolved_references(orig_pool);\n-    return (objArrayOop)(handle.resolve());\n+    return scratch_rr;\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -463,2 +463,2 @@\n-      CHECK_EXCEPTION_LEAVE(0);\n-      LEAVE();\n+        CHECK_EXCEPTION_LEAVE(1);\n+        LEAVE();\n@@ -1449,1 +1449,1 @@\n-          dumpSharedSpaces = JNI_TRUE;\n+            dumpSharedSpaces = JNI_TRUE;\n","filename":"src\/java.base\/share\/native\/libjli\/java.c","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}