{"files":[{"patch":"@@ -264,1 +264,2 @@\n-    sort_symbols_and_fix_hash();\n+    log_info(cds)(\"Sorting symbols ... \");\n+    _symbols->sort(compare_symbols_by_address);\n@@ -282,10 +283,0 @@\n-void ArchiveBuilder::sort_symbols_and_fix_hash() {\n-  log_info(cds)(\"Sorting symbols and fixing identity hash ... \");\n-  os::init_random(0x12345678);\n-  _symbols->sort(compare_symbols_by_address);\n-  for (int i = 0; i < _symbols->length(); i++) {\n-    assert(_symbols->at(i)->is_permanent(), \"archived symbols must be permanent\");\n-    _symbols->at(i)->update_identity_hash();\n-  }\n-}\n-\n@@ -648,0 +639,8 @@\n+\n+  \/\/ Update the hash of buffered sorted symbols for static dump so that the symbols have deterministic contents\n+  if (DumpSharedSpaces && (src_info->msotype() == MetaspaceObj::SymbolType)) {\n+    Symbol* buffered_symbol = (Symbol*)dest;\n+    assert(((Symbol*)src)->is_permanent(), \"archived symbols must be permanent\");\n+    buffered_symbol->update_identity_hash();\n+  }\n+\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -244,1 +244,0 @@\n-  void sort_symbols_and_fix_hash();\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -137,0 +137,3 @@\n+HeapShared::ResolvedReferenceScratchTable* HeapShared::_scratch_references_table = nullptr;\n+ClassLoaderData* HeapShared::_saved_java_platform_loader_data = nullptr;\n+ClassLoaderData* HeapShared::_saved_java_system_loader_data = nullptr;\n@@ -301,1 +304,1 @@\n-      \/\/ class_data will be restored explicitly at run time.\n+      \/\/ class_data will be restored explicitly at run time and after dumptime\n@@ -305,0 +308,5 @@\n+      if (obj == SystemDictionary::java_platform_loader()) {\n+        _saved_java_platform_loader_data = java_lang_ClassLoader::loader_data_acquire(SystemDictionary::java_platform_loader());\n+      } else if (obj == SystemDictionary::java_system_loader()) {\n+        _saved_java_system_loader_data = java_lang_ClassLoader::loader_data_acquire(SystemDictionary::java_system_loader());\n+      }\n@@ -312,0 +320,6 @@\n+void HeapShared::restore_loader_data() {\n+  log_info(cds)(\"Restoring java platform and system loaders\");\n+  java_lang_ClassLoader::release_set_loader_data(SystemDictionary::java_platform_loader(), _saved_java_platform_loader_data);\n+  java_lang_ClassLoader::release_set_loader_data(SystemDictionary::java_system_loader(), _saved_java_system_loader_data);\n+}\n+\n@@ -342,0 +356,22 @@\n+void HeapShared::add_scratch_resolved_reference(ConstantPool* src, int index, oop new_result) {\n+  MutexLocker ml(ScratchObjects_lock, Mutex::_no_safepoint_check_flag);\n+  OopHandle* scratch_handle = _scratch_references_table->get(src);\n+  assert(scratch_handle != nullptr, \"Must exist\");\n+  objArrayOop scratch = (objArrayOop)(scratch_handle->resolve());\n+  scratch->obj_at_put(index, new_result);\n+}\n+\n+void HeapShared::add_scratch_resolved_references(ConstantPool* src, OopHandle dest) {\n+  MutexLocker ml(ScratchObjects_lock, Mutex::_no_safepoint_check_flag);\n+  if (_scratch_references_table == nullptr) {\n+    _scratch_references_table = new (mtClass)ResolvedReferenceScratchTable();\n+  }\n+  assert(_scratch_references_table != nullptr, \"must be initialized\");\n+  _scratch_references_table->put(src, dest);\n+}\n+\n+OopHandle HeapShared::scratch_resolved_references(ConstantPool* src) {\n+  MutexLocker ml(ScratchObjects_lock, Mutex::_no_safepoint_check_flag);\n+  return *(_scratch_references_table->get(src));\n+}\n+\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":37,"deletions":1,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -285,0 +285,9 @@\n+  typedef ResourceHashtable<ConstantPool*, OopHandle,\n+    36137, \/\/ prime number\n+    AnyObj::C_HEAP,\n+    mtClassShared> ResolvedReferenceScratchTable;\n+  static ResolvedReferenceScratchTable* _scratch_references_table;\n+\n+  static ClassLoaderData* _saved_java_platform_loader_data;\n+  static ClassLoaderData* _saved_java_system_loader_data;\n+\n@@ -397,0 +406,3 @@\n+  static OopHandle scratch_resolved_references(ConstantPool* src);\n+  static void add_scratch_resolved_reference(ConstantPool* src, int index, oop new_result) NOT_CDS_JAVA_HEAP_RETURN;\n+  static void add_scratch_resolved_references(ConstantPool* src, OopHandle dest) NOT_CDS_JAVA_HEAP_RETURN;\n@@ -398,0 +410,1 @@\n+  static void restore_loader_data() NOT_CDS_JAVA_HEAP_RETURN;\n","filename":"src\/hotspot\/share\/cds\/heapShared.hpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -506,0 +506,3 @@\n+  \/\/ Initialize random for updating the hash of symbols\n+  os::init_random(0x12345678);\n+\n@@ -546,2 +549,0 @@\n-\n-  MetaspaceShared::exit_after_static_dump();\n@@ -664,4 +665,0 @@\n-  } else {\n-    \/\/ On success, the VM_PopulateDumpSharedSpace op should have\n-    \/\/ exited the VM.\n-    ShouldNotReachHere();\n@@ -669,0 +666,7 @@\n+\n+#if INCLUDE_CDS_JAVA_HEAP\n+  \/\/ Restore the java loaders that were cleared at dump time\n+  if (use_full_module_graph()) {\n+    HeapShared::restore_loader_data();\n+  }\n+#endif\n@@ -899,8 +903,0 @@\n-\/\/ We have finished dumping the static archive. At this point, there may be pending VM\n-\/\/ operations. We have changed some global states (such as vmClasses::_klasses) that\n-\/\/ may cause these VM operations to fail. For safety, forget these operations and\n-\/\/ exit the VM directly.\n-void MetaspaceShared::exit_after_static_dump() {\n-  os::_exit(0);\n-}\n-\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":10,"deletions":14,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -108,1 +108,0 @@\n-  static void exit_after_static_dump();\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -219,0 +219,8 @@\n+\n+    \/\/ Create a \"scratch\" copy of the resolved references array to archive\n+    if (DumpSharedSpaces) {\n+      objArrayOop scratch_references = oopFactory::new_objArray(vmClasses::Object_klass(), map_length, CHECK);\n+      HandleMark hm(THREAD);\n+      Handle scratch_handle(THREAD, scratch_references);\n+      HeapShared::add_scratch_resolved_references(this, loader_data->add_handle(scratch_handle));\n+    }\n@@ -289,0 +297,1 @@\n+    ConstantPool* orig_pool = ArchiveBuilder::current()->get_source_addr(this);\n@@ -294,1 +303,1 @@\n-      rr->obj_at_put(i, nullptr);\n+      HeapShared::add_scratch_resolved_reference(orig_pool, i, nullptr);\n@@ -300,1 +309,1 @@\n-            rr->obj_at_put(i, obj);\n+            HeapShared::add_scratch_resolved_reference(orig_pool, i, obj);\n@@ -305,0 +314,2 @@\n+    OopHandle handle = HeapShared::scratch_resolved_references(orig_pool);\n+    return (objArrayOop)(handle.resolve());\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -817,1 +817,0 @@\n-    ShouldNotReachHere();\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -88,0 +88,1 @@\n+static jboolean dumpSharedSpaces = JNI_FALSE; \/* -Xshare:dump *\/\n@@ -458,0 +459,8 @@\n+    \/*\n+     * -Xshare:dump does not have a main class so the VM can safely exit now\n+     *\/\n+    if (dumpSharedSpaces) {\n+      CHECK_EXCEPTION_LEAVE(0);\n+      LEAVE();\n+    }\n+\n@@ -1435,0 +1444,7 @@\n+\n+        \/*\n+        * Check for CDS option\n+        *\/\n+        if (JLI_StrCmp(arg, \"-Xshare:dump\") == 0) {\n+          dumpSharedSpaces = JNI_TRUE;\n+        }\n@@ -1443,1 +1459,1 @@\n-        if (!listModules && !describeModule && !validateModules) {\n+        if (!listModules && !describeModule && !validateModules && !dumpSharedSpaces) {\n","filename":"src\/java.base\/share\/native\/libjli\/java.c","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"}]}