{"files":[{"patch":"@@ -1361,22 +1361,0 @@\n-      if (FLAG_IS_DEFAULT(ArrayCopyPartialInlineSize) ||\n-          (!FLAG_IS_DEFAULT(ArrayCopyPartialInlineSize) &&\n-           ArrayCopyPartialInlineSize != 0 &&\n-           ArrayCopyPartialInlineSize != 32 &&\n-           ArrayCopyPartialInlineSize != 64)) {\n-        int pi_size = 0;\n-        if (MaxVectorSize > 32 && AVX3Threshold == 0) {\n-          pi_size = 64;\n-        } else if (MaxVectorSize >= 32) {\n-          pi_size = 32;\n-        }\n-        if(!FLAG_IS_DEFAULT(ArrayCopyPartialInlineSize)) {\n-          warning(\"Setting ArrayCopyPartialInlineSize as %d\", pi_size);\n-        }\n-        ArrayCopyPartialInlineSize = pi_size;\n-      }\n-\n-      if (ArrayCopyPartialInlineSize > MaxVectorSize) {\n-        ArrayCopyPartialInlineSize = MaxVectorSize;\n-        warning(\"Setting ArrayCopyPartialInlineSize as MaxVectorSize\");\n-      }\n-\n@@ -1420,0 +1398,23 @@\n+#ifdef COMPILER2\n+    if (FLAG_IS_DEFAULT(ArrayCopyPartialInlineSize) ||\n+        (!FLAG_IS_DEFAULT(ArrayCopyPartialInlineSize) &&\n+         ArrayCopyPartialInlineSize != 0 &&\n+         ArrayCopyPartialInlineSize != 32 &&\n+         ArrayCopyPartialInlineSize != 64)) {\n+      int pi_size = 0;\n+      if (MaxVectorSize > 32 && AVX3Threshold == 0) {\n+        pi_size = 64;\n+      } else if (MaxVectorSize >= 32) {\n+        pi_size = 32;\n+      }\n+      if(!FLAG_IS_DEFAULT(ArrayCopyPartialInlineSize)) {\n+        warning(\"Setting ArrayCopyPartialInlineSize as %d\", pi_size);\n+      }\n+      ArrayCopyPartialInlineSize = pi_size;\n+    }\n+\n+    if (ArrayCopyPartialInlineSize > MaxVectorSize) {\n+      ArrayCopyPartialInlineSize = MaxVectorSize;\n+      warning(\"Setting ArrayCopyPartialInlineSize as MaxVectorSize\");\n+    }\n+#endif\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":23,"deletions":22,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -1525,2 +1525,2 @@\n-    case Op_VectorMaskedLoad:\n-    case Op_VectorMaskedStore:\n+    case Op_LoadVectorMasked:\n+    case Op_StoreVectorMasked:\n@@ -1605,2 +1605,2 @@\n-    case Op_VectorMaskedLoad:\n-    case Op_VectorMaskedStore:\n+    case Op_LoadVectorMasked:\n+    case Op_StoreVectorMasked:\n@@ -7942,1 +7942,1 @@\n-  match(Set dst (VectorMaskedLoad mem mask));\n+  match(Set dst (LoadVectorMasked mem mask));\n@@ -7947,1 +7947,0 @@\n-    \/\/TODO: KRegister to be made valid \"bound\" operand to promote sharing.\n@@ -7974,1 +7973,1 @@\n-  match(Set mem (VectorMaskedStore mem (Binary src mask)));\n+  match(Set mem (StoreVectorMasked mem (Binary src mask)));\n@@ -7980,1 +7979,0 @@\n-    \/\/TODO: KRegister to be made valid \"bound\" operand to promote sharing.\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -272,1 +272,1 @@\n-  if( strcmp(opType,\"VectorMaskedLoad\")==0 )  return Form::idealV;\n+  if( strcmp(opType,\"LoadVectorMasked\")==0 )  return Form::idealV;\n@@ -290,1 +290,1 @@\n-  if( strcmp(opType,\"VectorMaskedStore\")==0 )  return Form::idealV;\n+  if( strcmp(opType,\"StoreVectorMasked\")==0 )  return Form::idealV;\n","filename":"src\/hotspot\/share\/adlc\/forms.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3488,1 +3488,1 @@\n-    \"StoreVector\", \"LoadVector\", \"LoadVectorGather\", \"StoreVectorScatter\", \"VectorMaskedLoad\", \"VectorMaskedStore\",\n+    \"StoreVector\", \"LoadVector\", \"LoadVectorGather\", \"StoreVectorScatter\", \"LoadVectorMasked\", \"StoreVectorMasked\",\n@@ -4180,1 +4180,1 @@\n-    \"VectorMaskWrapper\", \"VectorMaskCmp\", \"VectorReinterpret\",\"VectorMaskedLoad\",\"VectorMaskedStore\",\n+    \"VectorMaskWrapper\", \"VectorMaskCmp\", \"VectorReinterpret\",\"LoadVectorMasked\",\"StoreVectorMasked\",\n","filename":"src\/hotspot\/share\/adlc\/formssel.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -691,1 +691,1 @@\n-  } else if (mb->after_partial_array_copy()) {\n+  } else if (mb->trailing_partial_array_copy()) {\n","filename":"src\/hotspot\/share\/opto\/arraycopynode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -397,56 +397,0 @@\n-bool RegionNode::is_self_loop(Node* n) {\n-  Node_List nstack;\n-  VectorSet visited;\n-  nstack.push(n);\n-  visited.set(n->_idx);\n-\n-  while(nstack.size()) {\n-    n = nstack.pop();\n-    for(unsigned i = 1; i < n->req() ; i++) {\n-      Node* in = n->in(i);\n-      if (in == NULL) {\n-        continue;\n-      }\n-      if (visited.test_set(in->_idx)) {\n-        return true;\n-      } else {\n-        nstack.push(in);\n-        visited.set(in->_idx);\n-      }\n-    }\n-  }\n-\n-  return false;\n-}\n-\n-\/\/ If a two input non-loop region has dead input\n-\/\/ edge[s] degenerate any phi node contained within it.\n-bool RegionNode::try_phi_disintegration(PhaseGVN *phase) {\n-  if (req() != 3 || isa_Loop() || !in(1) || !in(2) ||\n-       (!in(1)->is_top() && !in(2)->is_top())) {\n-     return false;\n-  }\n-\n-  PhiNode* phi = has_unique_phi();\n-  if (!phi) {\n-    return false;\n-  }\n-\n-  Node* rep_node = NULL;\n-  PhaseIterGVN *igvn = phase->is_IterGVN();\n-  if (in(1)->is_top() && !in(2)->is_top()) {\n-    rep_node = phi->in(2);\n-  } else if(in(2)->is_top() && !in(1)->is_top()) {\n-    rep_node = phi->in(1);\n-  } else {\n-    rep_node = phase->C->top();\n-  }\n-\n-  \/\/ Safety check to avoid dead\/self loop creation.\n-  if (is_self_loop(rep_node)) {\n-    return false;\n-  }\n-\n-  igvn->replace_node(phi, rep_node);\n-  return true;\n-}\n@@ -512,4 +456,0 @@\n-    has_phis = (has_phi() != NULL);       \/\/ Cache result\n-    if (has_phis && try_phi_disintegration(phase)) {\n-      has_phis = false;\n-    }\n","filename":"src\/hotspot\/share\/opto\/cfgnode.cpp","additions":0,"deletions":60,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-  bool is_self_loop(Node* n);\n+  bool is_self_loop(Node* n, PhaseGVN *phase);\n","filename":"src\/hotspot\/share\/opto\/cfgnode.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -408,2 +408,2 @@\n-macro(VectorMaskedLoad)\n-macro(VectorMaskedStore)\n+macro(LoadVectorMasked)\n+macro(StoreVectorMasked)\n","filename":"src\/hotspot\/share\/opto\/classes.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3401,2 +3401,2 @@\n-  case Op_VectorMaskedLoad:\n-  case Op_VectorMaskedStore:\n+  case Op_LoadVectorMasked:\n+  case Op_StoreVectorMasked:\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -690,1 +690,1 @@\n-        case Op_VectorMaskedStore:\n+        case Op_StoreVectorMasked:\n","filename":"src\/hotspot\/share\/opto\/lcm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -179,2 +179,2 @@\n-\/\/      vload = VectorMaskedLoad src , mask\n-\/\/      VectorMaskedStore dst, mask, vload\n+\/\/      vload = LoadVectorMasked src , mask\n+\/\/      StoreVectorMasked dst, mask, vload\n@@ -222,2 +222,2 @@\n-      !Matcher::match_rule_supported_vector(Op_VectorMaskedLoad, lane_count, type)  ||\n-      !Matcher::match_rule_supported_vector(Op_VectorMaskedStore, lane_count, type) ||\n+      !Matcher::match_rule_supported_vector(Op_LoadVectorMasked, lane_count, type)  ||\n+      !Matcher::match_rule_supported_vector(Op_StoreVectorMasked, lane_count, type) ||\n@@ -241,3 +241,1 @@\n-    inline_block = new RegionNode(2);\n-    transform_later(inline_block);\n-    inline_block->init_req(1, is_lt64bytes_tp);\n+    inline_block = is_lt64bytes_tp;\n@@ -259,1 +257,1 @@\n-  Node* masked_load = new VectorMaskedLoadNode(inline_block, mm, src_start,\n+  Node* masked_load = new LoadVectorMaskedNode(inline_block, mm, src_start,\n@@ -264,1 +262,1 @@\n-  Node* masked_store = new VectorMaskedStoreNode(inline_block, mm, dst_start,\n+  Node* masked_store = new StoreVectorMaskedNode(inline_block, mm, dst_start,\n@@ -271,3 +269,1 @@\n-    RegionNode* stub_block = new RegionNode(2);\n-    transform_later(stub_block);\n-    stub_block->init_req(1, is_lt64bytes_fp);\n+    Node* stub_block = is_lt64bytes_fp;\n@@ -278,1 +274,1 @@\n-    (*exit_block)->init_req(1, masked_store);\n+    (*exit_block)->init_req(1, is_lt64bytes_tp);\n@@ -300,0 +296,1 @@\n+\n@@ -850,1 +847,1 @@\n-    (*ctrl)->in(0)->isa_MemBar()->set_after_partial_array_copy();\n+    (*ctrl)->in(0)->isa_MemBar()->set_trailing_partial_array_copy();\n@@ -859,1 +856,1 @@\n-  if (dest_t->is_known_instance() && false == is_partial_array_copy) {\n+  if (dest_t->is_known_instance() && !is_partial_array_copy) {\n","filename":"src\/hotspot\/share\/opto\/macroArrayCopy.cpp","additions":12,"deletions":15,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2204,1 +2204,1 @@\n-    case Op_VectorMaskedLoad:\n+    case Op_LoadVectorMasked:\n@@ -2307,1 +2307,1 @@\n-    case Op_VectorMaskedStore: {\n+    case Op_StoreVectorMasked: {\n","filename":"src\/hotspot\/share\/opto\/matcher.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1188,1 +1188,1 @@\n-    AfterPartialArrayCopy\n+    TrailingPartialArrayCopy\n@@ -1225,2 +1225,2 @@\n-  void set_after_partial_array_copy() { _kind = AfterPartialArrayCopy; }\n-  bool after_partial_array_copy() const { return _kind == AfterPartialArrayCopy; }\n+  void set_trailing_partial_array_copy() { _kind = TrailingPartialArrayCopy; }\n+  bool trailing_partial_array_copy() const { return _kind == TrailingPartialArrayCopy; }\n","filename":"src\/hotspot\/share\/opto\/memnode.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -155,2 +155,2 @@\n-class VectorMaskedLoad;\n-class VectorMaskedStore;\n+class LoadVectorMaskedNode;\n+class StoreVectorMaskedNode;\n@@ -698,1 +698,1 @@\n-          DEFINE_CLASS_ID(VectorMaskedLoad, LoadVector, 1)\n+          DEFINE_CLASS_ID(LoadVectorMasked, LoadVector, 1)\n@@ -702,1 +702,1 @@\n-          DEFINE_CLASS_ID(VectorMaskedStore, StoreVector, 1)\n+          DEFINE_CLASS_ID(StoreVectorMasked, StoreVector, 1)\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -762,1 +762,1 @@\n-VectorMaskedLoadNode* make(int opc, Node* ctl, Node* mem, Node* src,\n+LoadVectorMaskedNode* make(int opc, Node* ctl, Node* mem, Node* src,\n@@ -765,1 +765,1 @@\n-  return new VectorMaskedLoadNode(ctl, mem, src, atype, vt, mask);\n+  return new LoadVectorMaskedNode(ctl, mem, src, atype, vt, mask);\n@@ -768,1 +768,1 @@\n-VectorMaskedStoreNode* make(int opc, Node* ctl, Node* mem, Node* dst,\n+StoreVectorMaskedNode* make(int opc, Node* ctl, Node* mem, Node* dst,\n@@ -770,1 +770,1 @@\n-  return new VectorMaskedStoreNode(ctl, mem, dst, src, atype, mask);\n+  return new StoreVectorMaskedNode(ctl, mem, dst, src, atype, mask);\n@@ -777,1 +777,1 @@\n-Node* VectorMaskedLoadNode::Ideal(PhaseGVN* phase, bool can_reshape) {\n+Node* LoadVectorMaskedNode::Ideal(PhaseGVN* phase, bool can_reshape) {\n@@ -794,1 +794,1 @@\n-Node* VectorMaskedStoreNode::Ideal(PhaseGVN* phase, bool can_reshape) {\n+Node* StoreVectorMaskedNode::Ideal(PhaseGVN* phase, bool can_reshape) {\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -781,1 +781,1 @@\n-class VectorMaskedStoreNode : public StoreVectorNode {\n+class StoreVectorMaskedNode : public StoreVectorNode {\n@@ -783,1 +783,1 @@\n-  VectorMaskedStoreNode(Node* c, Node* mem, Node* dst, Node* src, const TypePtr* at, Node* mask)\n+  StoreVectorMaskedNode(Node* c, Node* mem, Node* dst, Node* src, const TypePtr* at, Node* mask)\n@@ -798,1 +798,1 @@\n-  static VectorMaskedStoreNode* make(int opc, Node* ctl, Node* mem, Node* dst, Node* src,\n+  static StoreVectorMaskedNode* make(int opc, Node* ctl, Node* mem, Node* dst, Node* src,\n@@ -802,1 +802,1 @@\n-class VectorMaskedLoadNode : public LoadVectorNode {\n+class LoadVectorMaskedNode : public LoadVectorNode {\n@@ -804,1 +804,1 @@\n-  VectorMaskedLoadNode(Node* c, Node* mem, Node* src, const TypePtr* at, const TypeVect* vt, Node* mask)\n+  LoadVectorMaskedNode(Node* c, Node* mem, Node* src, const TypePtr* at, const TypeVect* vt, Node* mask)\n@@ -819,1 +819,1 @@\n-  static VectorMaskedLoadNode* make(int opc, Node* ctl, Node* mem, Node* src,\n+  static LoadVectorMaskedNode* make(int opc, Node* ctl, Node* mem, Node* src,\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}