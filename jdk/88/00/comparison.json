{"files":[{"patch":"@@ -100,1 +100,1 @@\n-            return handleExceptions(() -> {\n+            Pair<Main.Result, Throwable> result = invocationHelper(() -> {\n@@ -106,1 +106,6 @@\n-            }, Main.Result.SYSERR, Main.Result.ABNORMAL);\n+            });\n+            if (result.snd == null) {\n+                return result.fst;\n+            } else {\n+                return (result.snd instanceof FatalError) ? Main.Result.SYSERR : Main.Result.ABNORMAL;\n+            }\n@@ -144,1 +149,1 @@\n-    private <T> T handleExceptions(Callable<T> c, T sysErrorResult, T abnormalErrorResult) {\n+    private <T> Pair<T, Throwable> invocationHelper(Callable<T> c) {\n@@ -147,1 +152,1 @@\n-            return c.call();\n+            return new Pair<>(c.call(), null);\n@@ -155,1 +160,1 @@\n-            return sysErrorResult;\n+            return new Pair<>(null, ex);\n@@ -178,1 +183,1 @@\n-            return abnormalErrorResult;\n+            return new Pair<>(null, ex);\n@@ -243,1 +248,5 @@\n-        return handleExceptions(this::parseInternal, List.nil(), List.nil());\n+        Pair<Iterable<? extends CompilationUnitTree>, Throwable> result =  invocationHelper(this::parseInternal);\n+        if (result.snd == null) {\n+            return result.fst;\n+        }\n+        throw new IllegalStateException(result.snd);\n@@ -370,1 +379,5 @@\n-        return handleExceptions(() -> analyze(null), List.nil(), List.nil());\n+        Pair<Iterable<? extends Element>, Throwable> result =  invocationHelper(() -> analyze(null));\n+        if (result.snd == null) {\n+            return result.fst;\n+        }\n+        throw new IllegalStateException(result.snd);\n@@ -432,1 +445,5 @@\n-        return handleExceptions(() -> generate(null), List.nil(), List.nil());\n+        Pair<Iterable<? extends JavaFileObject>, Throwable> result =  invocationHelper(() -> generate(null));\n+        if (result.snd == null) {\n+            return result.fst;\n+        }\n+        throw new IllegalStateException(result.snd);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/api\/JavacTaskImpl.java","additions":26,"deletions":9,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -192,1 +192,1 @@\n-            return true;\n+            return simpleName.equals(\"Source\") && kind == Kind.SOURCE;\n","filename":"test\/langtools\/tools\/javac\/processing\/errors\/CrashOnNonExistingAnnotation\/Processor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}