{"files":[{"patch":"@@ -93,3 +93,1 @@\n-        if (exact && accessModeType(ad.type) != ad.symbolicMethodTypeExact) {\n-            throwWrongMethodTypeException(ad);\n-        }\n+        super.checkAccessModeThenIsDirect(ad);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/IndirectVarHandle.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2009,10 +2009,1 @@\n-        \/\/ Mapping from the ordinal to AccessMode\n-        private static final Map<Integer, AccessMode> modeToAccessMode = initOrdinalToAccessModeMap();\n-        private static Map<Integer, AccessMode> initOrdinalToAccessModeMap() {\n-            Map<Integer, AccessMode> map = new HashMap<>();\n-            for (AccessMode am : AccessMode.values()) {\n-                map.put(am.ordinal(), am);\n-            }\n-            return map;\n-        }\n-\n+        private static final @Stable AccessMode[] VALUES = values();\n@@ -2020,1 +2011,1 @@\n-            return modeToAccessMode.get(mode);\n+            return VALUES[mode];\n@@ -2113,1 +2104,1 @@\n-        if (vform.getMemberNameOrNull(ad.mode) == null) {\n+        if (!isAccessModeSupported(AccessMode.valueFromOrdinal(ad.mode))) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandle.java","additions":3,"deletions":12,"binary":false,"changes":15,"status":"modified"}]}