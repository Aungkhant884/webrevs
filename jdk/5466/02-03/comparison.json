{"files":[{"patch":"@@ -28,1 +28,20 @@\n-      echo \"usage: $0 [-h|--help] [-v|--verbose] [-o|--output <path>] [-c|--conf <conf_name>] [modules]+\"\n+      echo \"Usage: $0 [-h|--help] [-q|--quiet] [-a|--absolute-paths] [-r|--root <path>] [-o|--output <path>] [-c|--conf <conf_name>] [modules...]\"\n+      echo \"    -h | --help\"\n+      echo \"    -q | --quiet\n+        No stdout output\"\n+      echo \"    -a | --absolute-paths\n+        Use absolute paths to this jdk, so that generated .idea\n+        project files can be moved independently of jdk sources\"\n+      echo \"    -r | --root <path>\n+        Project content root\n+        Default: $TOPLEVEL_DIR\"\n+      echo \"    -o | --output <path>\n+        Where .idea directory with project files will be generated\n+        (e.g. using '-o .' will place project files in '.\/.idea')\n+        Default: same as --root\"\n+      echo \"    -c | --conf <conf_name>\n+        make configuration (release, slowdebug etc)\"\n+      echo \"    [modules...]\n+        Generate project modules for specific java modules\n+        (e.g. 'java.base java.desktop')\n+        Default: all existing modules (java.* and jdk.*)\"\n@@ -36,0 +55,3 @@\n+if [ \"x$TOPLEVEL_DIR\" = \"x\" ] ; then\n+  cd .. ; TOPLEVEL_DIR=`pwd`\n+fi\n@@ -38,2 +60,2 @@\n-IDEA_OUTPUT=$TOP\/.idea\n-VERBOSE=\"false\"\n+VERBOSE=true\n+ABSOLUTE_PATHS=false\n@@ -48,2 +70,11 @@\n-    -v | --vebose )\n-      VERBOSE=\"true\"\n+    -q | --quiet )\n+      VERBOSE=false\n+      ;;\n+\n+    -a | --absolute-paths )\n+      ABSOLUTE_PATHS=true\n+      ;;\n+\n+    -r | --root )\n+      TOPLEVEL_DIR=\"$2\"\n+      shift\n@@ -53,1 +84,1 @@\n-      IDEA_OUTPUT=$2\/.idea\n+      IDEA_OUTPUT=\"$2\/.idea\"\n@@ -56,0 +87,1 @@\n+\n@@ -72,2 +104,2 @@\n-if [ -e $IDEA_OUTPUT ] ; then\n-    rm -r $IDEA_OUTPUT\n+if [ \"x$IDEA_OUTPUT\" = \"x\" ] ; then\n+  IDEA_OUTPUT=\"$TOPLEVEL_DIR\/.idea\"\n@@ -75,2 +107,0 @@\n-mkdir -p $IDEA_OUTPUT || exit 1\n-cd $IDEA_OUTPUT; IDEA_OUTPUT=`pwd`\n@@ -78,5 +108,5 @@\n-if [ \"x$TOPLEVEL_DIR\" = \"x\" ] ; then\n-    cd $SCRIPT_DIR\/..\n-    TOPLEVEL_DIR=`pwd`\n-    cd $IDEA_OUTPUT\n-fi\n+mkdir -p $IDEA_OUTPUT || exit 1\n+cd \"$TOP\" ; cd $TOPLEVEL_DIR; TOPLEVEL_DIR=`pwd`\n+cd \"$TOP\" ; cd $IDEA_OUTPUT; IDEA_OUTPUT=`pwd`\n+cd ..; IDEA_OUTPUT_PARENT=`pwd`\n+cd \"$SCRIPT_DIR\/..\" ; OPENJDK_DIR=`pwd`\n@@ -84,2 +114,1 @@\n-MAKE_DIR=\"$SCRIPT_DIR\/..\/make\"\n-IDEA_MAKE=\"$MAKE_DIR\/ide\/idea\/jdk\"\n+IDEA_MAKE=\"$OPENJDK_DIR\/make\/ide\/idea\/jdk\"\n@@ -88,1 +117,2 @@\n-cp -r \"$IDEA_TEMPLATE\"\/* \"$IDEA_OUTPUT\"\n+cp -rn \"$TOPLEVEL_DIR\/jb\/project\/idea-project-files\"\/* \"$IDEA_OUTPUT\"\n+cp -rn \"$IDEA_TEMPLATE\"\/* \"$IDEA_OUTPUT\"\n@@ -97,3 +127,2 @@\n-if [ \"$VERBOSE\" = \"true\" ] ; then\n-  echo \"output dir: $IDEA_OUTPUT\"\n-  echo \"idea template dir: $IDEA_TEMPLATE\"\n+if [ \"$VERBOSE\" = true ] ; then\n+  echo \"Will generate IDEA project files in \\\"$IDEA_OUTPUT\\\" for project \\\"$TOPLEVEL_DIR\\\"\"\n@@ -102,1 +131,2 @@\n-cd $TOP ; make -f \"$IDEA_MAKE\/idea.gmk\" -I $MAKE_DIR\/.. idea MAKEOVERRIDES= OUT=$IDEA_OUTPUT\/env.cfg MODULES=\"$*\" $CONF_ARG || exit 1\n+cd $TOP ; make -f \"$IDEA_MAKE\/idea.gmk\" -I \"$OPENJDK_DIR\" idea TOPLEVEL_DIR=\"$TOPLEVEL_DIR\" \\\n+    MAKEOVERRIDES= IDEA_OUTPUT_PARENT=\"$IDEA_OUTPUT_PARENT\" OUT=\"$IDEA_OUTPUT\/env.cfg\" MODULES=\"$*\" $CONF_ARG || exit 1\n@@ -107,3 +137,3 @@\n-# Expect MODULE_ROOTS, MODULE_NAMES, BOOT_JDK & SPEC to be set\n-if [ \"x$MODULE_ROOTS\" = \"x\" ] ; then\n-  echo \"FATAL: MODULE_ROOTS is empty\" >&2; exit 1\n+# Expect MODULES, MODULE_NAMES, RELATIVE_PROJECT_DIR, RELATIVE_BUILD_DIR to be set\n+if [ \"xMODULES\" = \"x\" ] ; then\n+  echo \"FATAL: MODULES is empty\" >&2; exit 1\n@@ -116,2 +146,2 @@\n-if [ \"x$BOOT_JDK\" = \"x\" ] ; then\n-  echo \"FATAL: BOOT_JDK is empty\" >&2; exit 1\n+if [ \"x$RELATIVE_PROJECT_DIR\" = \"x\" ] ; then\n+  echo \"FATAL: RELATIVE_PROJECT_DIR is empty\" >&2; exit 1\n@@ -120,2 +150,2 @@\n-if [ \"x$SPEC\" = \"x\" ] ; then\n-  echo \"FATAL: SPEC is empty\" >&2; exit 1\n+if [ \"x$RELATIVE_BUILD_DIR\" = \"x\" ] ; then\n+  echo \"FATAL: RELATIVE_BUILD_DIR is empty\" >&2; exit 1\n@@ -132,0 +162,37 @@\n+if [ \"$ABSOLUTE_PATHS\" = true ] ; then\n+  if [ \"x$PATHTOOL\" != \"x\" ]; then\n+    PROJECT_DIR=\"`$PATHTOOL -am $OPENJDK_DIR`\"\n+    TOPLEVEL_PROJECT_DIR=\"`$PATHTOOL -am $TOPLEVEL_DIR`\"\n+  else\n+    PROJECT_DIR=\"$OPENJDK_DIR\"\n+    TOPLEVEL_PROJECT_DIR=\"$TOPLEVEL_DIR\"\n+  fi\n+  MODULE_DIR=\"$PROJECT_DIR\"\n+  TOPLEVEL_MODULE_DIR=\"$TOPLEVEL_PROJECT_DIR\"\n+  cd \"$IDEA_OUTPUT_PARENT\" && cd \"$RELATIVE_BUILD_DIR\" && BUILD_DIR=\"`pwd`\"\n+  CLION_SCRIPT_TOPDIR=\"$OPENJDK_DIR\"\n+  CLION_PROJECT_DIR=\"$PROJECT_DIR\"\n+else\n+  if [ \"$RELATIVE_PROJECT_DIR\" = \".\" ] ; then\n+    PROJECT_DIR=\"\"\n+  else\n+    PROJECT_DIR=\"\/$RELATIVE_PROJECT_DIR\"\n+  fi\n+  if [ \"$RELATIVE_TOPLEVEL_PROJECT_DIR\" = \".\" ] ; then\n+    TOPLEVEL_PROJECT_DIR=\"\"\n+  else\n+    TOPLEVEL_PROJECT_DIR=\"\/$RELATIVE_TOPLEVEL_PROJECT_DIR\"\n+  fi\n+  MODULE_DIR=\"\\$MODULE_DIR\\$$PROJECT_DIR\"\n+  PROJECT_DIR=\"\\$PROJECT_DIR\\$$PROJECT_DIR\"\n+  TOPLEVEL_MODULE_DIR=\"\\$MODULE_DIR\\$$TOPLEVEL_PROJECT_DIR\"\n+  TOPLEVEL_PROJECT_DIR=\"\\$PROJECT_DIR\\$$TOPLEVEL_PROJECT_DIR\"\n+  BUILD_DIR=\"\\$PROJECT_DIR\\$\/$RELATIVE_BUILD_DIR\"\n+  CLION_SCRIPT_TOPDIR=\"$CLION_RELATIVE_PROJECT_DIR\"\n+  CLION_PROJECT_DIR=\"\\$PROJECT_DIR\\$\/$CLION_SCRIPT_TOPDIR\"\n+fi\n+if [ \"$VERBOSE\" = true ] ; then\n+  echo \"Project root: $PROJECT_DIR\"\n+  echo \"Generating IDEA project files...\"\n+fi\n+\n@@ -155,0 +222,7 @@\n+add_replacement \"###PATHTOOL###\" \"$PATHTOOL\"\n+add_replacement \"###CLION_SCRIPT_TOPDIR###\" \"$CLION_SCRIPT_TOPDIR\"\n+add_replacement \"###CLION_PROJECT_DIR###\" \"$CLION_PROJECT_DIR\"\n+add_replacement \"###PROJECT_DIR###\" \"$PROJECT_DIR\"\n+add_replacement \"###MODULE_DIR###\" \"$MODULE_DIR\"\n+add_replacement \"###TOPLEVEL_PROJECT_DIR###\" \"$TOPLEVEL_PROJECT_DIR\"\n+add_replacement \"###TOPLEVEL_MODULE_DIR###\" \"$TOPLEVEL_MODULE_DIR\"\n@@ -157,16 +231,8 @@\n-SPEC_DIR=`dirname $SPEC`\n-if [ \"x$CYGPATH\" != \"x\" ]; then\n-    add_replacement \"###BUILD_DIR###\" \"`$CYGPATH -am $SPEC_DIR`\"\n-    add_replacement \"###IMAGES_DIR###\" \"`$CYGPATH -am $SPEC_DIR`\/images\/jdk\"\n-    add_replacement \"###ROOT_DIR###\" \"`$CYGPATH -am $TOPLEVEL_DIR`\"\n-    add_replacement \"###IDEA_DIR###\" \"`$CYGPATH -am $IDEA_OUTPUT`\"\n-    if [ \"x$JT_HOME\" = \"x\" ]; then\n-      add_replacement \"###JTREG_HOME###\" \"\"\n-    else\n-      add_replacement \"###JTREG_HOME###\" \"`$CYGPATH -am $JT_HOME`\"\n-    fi\n-elif [ \"x$WSL_DISTRO_NAME\" != \"x\" ]; then\n-    add_replacement \"###BUILD_DIR###\" \"`wslpath -am $SPEC_DIR`\"\n-    add_replacement \"###IMAGES_DIR###\" \"`wslpath -am $SPEC_DIR`\/images\/jdk\"\n-    add_replacement \"###ROOT_DIR###\" \"`wslpath -am $TOPLEVEL_DIR`\"\n-    add_replacement \"###IDEA_DIR###\" \"`wslpath -am $IDEA_OUTPUT`\"\n+add_replacement \"###BUILD_DIR###\" \"$BUILD_DIR\"\n+add_replacement \"###RELATIVE_BUILD_DIR###\" \"$RELATIVE_BUILD_DIR\"\n+if [ \"x$PATHTOOL\" != \"x\" ]; then\n+  add_replacement \"###BASH_RUNNER_PREFIX###\" \"\\$PROJECT_DIR\\$\/.idea\/bash.bat\"\n+else\n+  add_replacement \"###BASH_RUNNER_PREFIX###\" \"\"\n+fi\n+if [ \"x$PATHTOOL\" != \"x\" ]; then\n@@ -176,1 +242,1 @@\n-      add_replacement \"###JTREG_HOME###\" \"`wslpath -am $JT_HOME`\"\n+      add_replacement \"###JTREG_HOME###\" \"`$PATHTOOL -am $JT_HOME`\"\n@@ -179,1 +245,0 @@\n-    add_replacement \"###BUILD_DIR###\" \"$SPEC_DIR\"\n@@ -181,3 +246,0 @@\n-    add_replacement \"###IMAGES_DIR###\" \"$SPEC_DIR\/images\/jdk\"\n-    add_replacement \"###ROOT_DIR###\" \"$TOPLEVEL_DIR\"\n-    add_replacement \"###IDEA_DIR###\" \"$IDEA_OUTPUT\"\n@@ -186,21 +248,5 @@\n-SOURCE_PREFIX=\"<sourceFolder url=\\\"file:\/\/\"\n-SOURCE_POSTFIX=\"\\\" isTestSource=\\\"false\\\" \/>\"\n-\n-for root in $MODULE_ROOTS; do\n-    if [ \"x$CYGPATH\" != \"x\" ]; then\n-      root=`$CYGPATH -am $root`\n-    elif [ \"x$WSL_DISTRO_NAME\" != \"x\" ]; then\n-      root=`wslpath -am $root`\n-    fi\n-\n-    VM_CI=\"jdk.internal.vm.ci\/share\/classes\"\n-    VM_COMPILER=\"src\/jdk.internal.vm.compiler\/share\/classes\"\n-    if test \"${root#*$VM_CI}\" != \"$root\" || test \"${root#*$VM_COMPILER}\" != \"$root\"; then\n-        for subdir in \"$root\"\/*; do\n-            if [ -d \"$subdir\" ]; then\n-                SOURCES=$SOURCES\" $SOURCE_PREFIX\"\"$subdir\"\/src\"$SOURCE_POSTFIX\"\n-            fi\n-        done\n-    else\n-        SOURCES=$SOURCES\" $SOURCE_PREFIX\"\"$root\"\"$SOURCE_POSTFIX\"\n-    fi\n+MODULE_IMLS=\"\"\n+TEST_MODULE_DEPENDENCIES=\"\"\n+for module in $MODULE_NAMES; do\n+    MODULE_IMLS=\"$MODULE_IMLS<module fileurl=\\\"file:\/\/\\$PROJECT_DIR$\/.idea\/$module.iml\\\" filepath=\\\"\\$PROJECT_DIR$\/.idea\/$module.iml\\\" \/> \"\n+    TEST_MODULE_DEPENDENCIES=\"$TEST_MODULE_DEPENDENCIES<orderEntry type=\\\"module\\\" module-name=\\\"$module\\\" scope=\\\"TEST\\\" \/> \"\n@@ -208,2 +254,2 @@\n-\n-add_replacement \"###SOURCE_ROOTS###\" \"$SOURCES\"\n+add_replacement \"###MODULE_IMLS###\" \"$MODULE_IMLS\"\n+add_replacement \"###TEST_MODULE_DEPENDENCIES###\" \"$TEST_MODULE_DEPENDENCIES\"\n@@ -213,22 +259,53 @@\n-### Compile the custom Logger\n-\n-CLASSES=$IDEA_OUTPUT\/classes\n-\n-if [ \"x$ANT_HOME\" = \"x\" ] ; then\n-   # try some common locations, before giving up\n-   if [ -f \"\/usr\/share\/ant\/lib\/ant.jar\" ] ; then\n-     ANT_HOME=\"\/usr\/share\/ant\"\n-   elif [ -f \"\/usr\/local\/Cellar\/ant\/1.9.4\/libexec\/lib\/ant.jar\" ] ; then\n-     ANT_HOME=\"\/usr\/local\/Cellar\/ant\/1.9.4\/libexec\"\n-   else\n-     echo \"FATAL: cannot find ant. Try setting ANT_HOME.\" >&2; exit 1\n-   fi\n-fi\n-CP=$ANT_HOME\/lib\/ant.jar\n-rm -rf $CLASSES; mkdir $CLASSES\n-\n-# If we have a Windows boot JDK, we need a .exe suffix\n-if [ -e \"$BOOT_JDK\/bin\/java.exe\" ] ; then\n-  JAVAC=javac.exe\n-else \n-  JAVAC=javac\n+### Generate module project files\n+\n+if [ \"$VERBOSE\" = true ] ; then\n+    echo \"Generating project modules:\"\n+  fi\n+(\n+DEFAULT_IFS=\"$IFS\"\n+IFS='#'\n+for value in $MODULES; do\n+  (\n+  eval \"$value\"\n+  if [ \"$VERBOSE\" = true ] ; then\n+    echo \"    $module\"\n+  fi\n+  MAIN_SOURCE_DIRS=\"\"\n+  CONTENT_ROOTS=\"\"\n+  IFS=' '\n+  for dir in $moduleSrcDirs; do\n+    case $dir in\n+      \"src\/\"*) MAIN_SOURCE_DIRS=\"$MAIN_SOURCE_DIRS <sourceFolder url=\\\"file:\/\/$MODULE_DIR\/$dir\\\" isTestSource=\\\"false\\\" \/>\" ;;\n+      *\"\/support\/gensrc\/$module\") ;; # Exclude generated sources to avoid module-info conflicts, see https:\/\/youtrack.jetbrains.com\/issue\/IDEA-185108\n+      *) CONTENT_ROOTS=\"$CONTENT_ROOTS <content url=\\\"file:\/\/$MODULE_DIR\/$dir\\\">\\\n+      <sourceFolder url=\\\"file:\/\/$MODULE_DIR\/$dir\\\" isTestSource=\\\"false\\\" generated=\\\"true\\\" \/><\/content>\" ;;\n+    esac\n+  done\n+  if [ \"x$MAIN_SOURCE_DIRS\" != \"x\" ] ; then\n+    CONTENT_ROOTS=\"<content url=\\\"file:\/\/$MODULE_DIR\/src\/$module\\\">$MAIN_SOURCE_DIRS<\/content>$CONTENT_ROOTS\"\n+  fi\n+  add_replacement \"###MODULE_CONTENT_ROOTS###\" \"$CONTENT_ROOTS\"\n+  DEPENDENCIES=\"\"\n+  for dep in $moduleDependencies; do\n+    case $MODULE_NAMES in # Exclude skipped modules from dependencies\n+      *\"$dep\"*) DEPENDENCIES=\"$DEPENDENCIES<orderEntry type=\\\"module\\\" module-name=\\\"$dep\\\" \/> \"\n+    esac\n+  done\n+  add_replacement \"###DEPENDENCIES###\" \"$DEPENDENCIES\"\n+  cp \"$IDEA_OUTPUT\/module.iml\" \"$IDEA_OUTPUT\/$module.iml\"\n+  IFS=\"$DEFAULT_IFS\"\n+  replace_template_file \"$IDEA_OUTPUT\/$module.iml\"\n+  )\n+done\n+)\n+rm \"$IDEA_OUTPUT\/module.iml\"\n+\n+### Create shell script runner for Windows\n+\n+if [ \"x$PATHTOOL\" != \"x\" ]; then\n+  echo \"@echo off\" > \"$IDEA_OUTPUT\/bash.bat\"\n+  if [ \"x$WSL_DISTRO_NAME\" != \"x\" ] ; then\n+    echo \"wsl -d $WSL_DISTRO_NAME --cd \\\"%cd%\\\" -e %*\" >> \"$IDEA_OUTPUT\/bash.bat\"\n+  else\n+    echo \"$WINENV_ROOT\\bin\\bash.exe -l -c \\\"cd %CD:\\=\/%\/ && %*\\\"\" >> \"$IDEA_OUTPUT\/bash.bat\"\n+  fi\n@@ -237,21 +314,0 @@\n-# If we are on WSL, the boot JDK might be either Windows or Linux,\n-# and we need to use realpath instead of CYGPATH to make javac work on both.\n-# We need to handle this case first since CYGPATH might be set on WSL.\n-if [ \"x$WSL_DISTRO_NAME\" != \"x\" ]; then\n-  JAVAC_SOURCE_FILE=`realpath --relative-to=.\/ $IDEA_OUTPUT\/src\/idea\/IdeaLoggerWrapper.java`\n-  JAVAC_SOURCE_PATH=`realpath --relative-to=.\/ $IDEA_OUTPUT\/src`\n-  JAVAC_CLASSES=`realpath --relative-to=.\/ $CLASSES`\n-  ANT_TEMP=`mktemp -d -p .\/`\n-  cp $ANT_HOME\/lib\/ant.jar $ANT_TEMP\/ant.jar\n-  JAVAC_CP=$ANT_TEMP\/ant.jar\n-elif [ \"x$CYGPATH\" != \"x\" ] ; then ## CYGPATH may be set in env.cfg\n-  JAVAC_SOURCE_FILE=`$CYGPATH -am $IDEA_OUTPUT\/src\/idea\/IdeaLoggerWrapper.java`\n-  JAVAC_SOURCE_PATH=`$CYGPATH -am $IDEA_OUTPUT\/src`\n-  JAVAC_CLASSES=`$CYGPATH -am $CLASSES`\n-  JAVAC_CP=`$CYGPATH -am $CP`\n-else\n-  JAVAC_SOURCE_FILE=$IDEA_OUTPUT\/src\/idea\/IdeaLoggerWrapper.java\n-  JAVAC_SOURCE_PATH=$IDEA_OUTPUT\/src\n-  JAVAC_CLASSES=$CLASSES\n-  JAVAC_CP=$CP\n-fi\n@@ -259,1 +315,0 @@\n-$BOOT_JDK\/bin\/$JAVAC -d $JAVAC_CLASSES -sourcepath $JAVAC_SOURCE_PATH -cp $JAVAC_CP $JAVAC_SOURCE_FILE\n@@ -261,2 +316,8 @@\n-if [ \"x$WSL_DISTRO_NAME\" != \"x\" ]; then\n-  rm -rf $ANT_TEMP\n+if [ \"$VERBOSE\" = true ] ; then\n+  IDEA_PROJECT_DIR=\"`dirname $IDEA_OUTPUT`\"\n+  if [ \"x$PATHTOOL\" != \"x\" ]; then\n+    IDEA_PROJECT_DIR=\"`$PATHTOOL -am $IDEA_PROJECT_DIR`\"\n+  fi\n+  echo \"\n+Now you can open \\\"$IDEA_PROJECT_DIR\\\" as IDEA project\n+You can also run 'bash \\\"$IDEA_OUTPUT\/jdk-clion\/update-project.sh\\\"' to generate Clion project\"\n","filename":"bin\/idea.sh","additions":180,"deletions":119,"binary":false,"changes":299,"status":"modified"},{"patch":"@@ -1,42 +0,0 @@\n-<!-- importing.xml -->\n-<project name=\"jdk\">\n-\n-    <taskdef name=\"wrapLogger\" classname=\"idea.IdeaLoggerWrapper\" classpath=\"${idea.dir}\/classes\"\/>\n-\n-    <wrapLogger\/>\n-\n-    <macrodef name=\"call-make\">\n-        <attribute name=\"dir\"\/>\n-        <attribute name=\"args\"\/>\n-        <sequential>\n-            <exec executable=\"make\" dir=\"@{dir}\" failonerror=\"true\">\n-                <arg line=\"@{args}\"\/>\n-                <env key=\"CLASSPATH\" value = \"\"\/>\n-            <\/exec>\n-        <\/sequential>\n-    <\/macrodef>\n-\n-    <target name=\"cond-clean\" unless=\"${intellij.ismake}\">\n-        <antcall target=\"clean\"\/>\n-    <\/target>\n-\n-    <target name=\"post-make\" depends=\"cond-clean, build-module\"\/>\n-\n-    <!--\n-        **** Global JDK Build Targets\n-    -->\n-\n-    <target name=\"clean\">\n-        <echo message=\"base = ${basedir}\"\/>\n-        <call-make dir = \"${build.target.dir}\" args = \"reconfigure\"\/>\n-        <call-make dir = \"${build.target.dir}\" args = \"clean\"\/>\n-    <\/target>\n-\n-    <target name=\"images\">\n-        <call-make dir = \"${build.target.dir}\" args = \"images\"\/>\n-    <\/target>\n-\n-    <target name=\"build-module\">\n-        <call-make dir = \"${build.target.dir}\" args = \"${module.name}\"\/>\n-    <\/target>\n-<\/project>\n","filename":"make\/ide\/idea\/jdk\/build.xml","additions":0,"deletions":42,"binary":false,"changes":42,"status":"deleted"},{"patch":"@@ -49,2 +49,5 @@\n-\t$(ECHO) \"SUPPORT=$(SUPPORT_OUTPUTDIR)\" >> $(OUT)\n-\t$(ECHO) \"MODULE_ROOTS=\\\"$(foreach mod, $(SEL_MODULES), $(call FindModuleSrcDirs,$(mod)))\\\"\" >> $(OUT)\n+\t$(ECHO) \"MODULES=\\\"$(foreach mod, $(SEL_MODULES), \\\n+\t          module='$(mod)' \\\n+\t          moduleSrcDirs='$(foreach m,$(call FindModuleSrcDirs,$(mod)),$(call RelativePath,$m,$(topdir)))' \\\n+\t          moduleDependencies='$(call FindTransitiveDepsForModule,$(mod))' \\\n+\t        #)\\\"\" > $(OUT)\n@@ -52,4 +55,5 @@\n-\t$(ECHO) \"SEL_MODULES=\\\"$(SEL_MODULES)\\\"\" >> $(OUT)\n-\t$(ECHO) \"BOOT_JDK=\\\"$(BOOT_JDK)\\\"\" >> $(OUT)\n-\t$(ECHO) \"CYGPATH=\\\"$(PATHTOOL)\\\"\" >> $(OUT)\n-\t$(ECHO) \"SPEC=\\\"$(SPEC)\\\"\" >> $(OUT)\n+\t$(ECHO) \"RELATIVE_TOPLEVEL_PROJECT_DIR=\\\"$(call RelativePath,$(TOPLEVEL_DIR),$(IDEA_OUTPUT_PARENT))\\\"\" >> $(OUT)\n+\t$(ECHO) \"RELATIVE_PROJECT_DIR=\\\"$(call RelativePath,$(topdir),$(IDEA_OUTPUT_PARENT))\\\"\" >> $(OUT)\n+\t$(ECHO) \"RELATIVE_BUILD_DIR=\\\"$(call RelativePath,$(OUTPUTDIR),$(IDEA_OUTPUT_PARENT))\\\"\" >> $(OUT)\n+\t$(ECHO) \"CLION_RELATIVE_PROJECT_DIR=\\\"$(call RelativePath,$(topdir),$(IDEA_OUTPUT_PARENT)\/.idea\/jdk-clion)\\\"\" >> $(OUT)\n+\t$(ECHO) \"PATHTOOL=\\\"$(PATHTOOL)\\\"\" >> $(OUT)\n@@ -57,0 +61,1 @@\n+\t$(ECHO) \"WINENV_ROOT=\\\"$(WINENV_ROOT)\\\"\" >> $(OUT)\n","filename":"make\/ide\/idea\/jdk\/idea.gmk","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -1,1 +0,0 @@\n-jdk\n","filename":"make\/ide\/idea\/jdk\/template\/.name","additions":0,"deletions":1,"binary":false,"changes":1,"status":"deleted"},{"patch":"@@ -1,14 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<project version=\"4\">\n-  <component name=\"AntConfiguration\">\n-    <buildFile url=\"file:\/\/###ROOT_DIR###\/make\/ide\/idea\/jdk\/build.xml\">\n-      <properties>\n-        <property name=\"intellij.ismake\" value=\"$IsMake$\" \/>\n-        <property name=\"build.target.dir\" value=\"###BUILD_DIR###\" \/>\n-        <property name=\"module.name\" value=\"###MODULE_NAMES###\" \/>\n-        <property name=\"idea.dir\" value=\"###IDEA_DIR###\" \/>\n-      <\/properties>\n-      <executeOn event=\"afterCompilation\" target=\"post-make\" \/>\n-    <\/buildFile>\n-  <\/component>\n-<\/project>\n","filename":"make\/ide\/idea\/jdk\/template\/ant.xml","additions":0,"deletions":14,"binary":false,"changes":14,"status":"deleted"},{"patch":"@@ -6,4 +6,4 @@\n-      <directory url=\"file:\/\/###ROOT_DIR###\/src\" includeSubdirectories=\"true\" \/>\n-      <directory url=\"file:\/\/###ROOT_DIR###\/build\" includeSubdirectories=\"true\" \/>\n-      <directory url=\"file:\/\/###ROOT_DIR###\/make\" includeSubdirectories=\"true\" \/>\n-      <directory url=\"file:\/\/###ROOT_DIR###\/test\" includeSubdirectories=\"true\" \/>\n+      <directory url=\"file:\/\/###PROJECT_DIR###\/src\" includeSubdirectories=\"true\" \/>\n+      <directory url=\"file:\/\/###PROJECT_DIR###\/build\" includeSubdirectories=\"true\" \/>\n+      <directory url=\"file:\/\/###PROJECT_DIR###\/make\" includeSubdirectories=\"true\" \/>\n+      <directory url=\"file:\/\/###PROJECT_DIR###\/test\" includeSubdirectories=\"false\" \/>\n","filename":"make\/ide\/idea\/jdk\/template\/compiler.xml","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -5,4 +5,3 @@\n-    <content url=\"file:\/\/###ROOT_DIR###\">\n-      ###SOURCE_ROOTS###\n-      <excludeFolder url=\"file:\/\/###ROOT_DIR###\/build\" \/>\n-      <excludeFolder url=\"file:\/\/###ROOT_DIR###\/make\" \/>\n+    <content url=\"file:\/\/###TOPLEVEL_MODULE_DIR###\">\n+      <excludeFolder url=\"file:\/\/###MODULE_DIR###\/build\" \/>\n+      <excludeFolder url=\"file:\/\/###MODULE_DIR###\/make\" \/>\n","filename":"make\/ide\/idea\/jdk\/template\/jdk.iml","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -9,1 +9,1 @@\n-    <jre alt=\"true\" value=\"###IMAGES_DIR###\" \/>\n+    <jre alt=\"true\" value=\"###BUILD_DIR###\/images\/jdk\" \/>\n@@ -11,3 +11,0 @@\n-    <ant>\n-      <target file=\"file:\/\/###ROOT_DIR###\/make\/ide\/idea\/jdk\/build.xml\" name=\"images\" \/>\n-    <\/ant>\n","filename":"make\/ide\/idea\/jdk\/template\/misc.xml","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -6,0 +6,2 @@\n+      ###MODULE_IMLS###\n+      <module fileurl=\"file:\/\/$PROJECT_DIR$\/.idea\/test.iml\" filepath=\"$PROJECT_DIR$\/.idea\/test.iml\" \/>\n","filename":"make\/ide\/idea\/jdk\/template\/modules.xml","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,13 +0,0 @@\n-package idea;\n-\n-import org.apache.tools.ant.Task;\n-\n-\/**\n- * This class implements a custom Ant task which replaces the standard Intellij IDEA Ant logger\n- * with a custom one which generates tighter output.\n- *\/\n-public class IdeaLoggerWrapper extends Task {\n-    public void execute() {\n-        new JdkIdeaAntLogger(getProject());\n-    }\n-}\n","filename":"make\/ide\/idea\/jdk\/template\/src\/idea\/IdeaLoggerWrapper.java","additions":0,"deletions":13,"binary":false,"changes":13,"status":"deleted"},{"patch":"@@ -1,375 +0,0 @@\n-\/*\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package idea;\n-\n-import org.apache.tools.ant.BuildEvent;\n-import org.apache.tools.ant.BuildListener;\n-import org.apache.tools.ant.DefaultLogger;\n-import org.apache.tools.ant.Project;\n-\n-import java.util.EnumSet;\n-import java.util.Stack;\n-\n-import static org.apache.tools.ant.Project.*;\n-\n-\/**\n- * This class is used to wrap the IntelliJ ant logger in order to provide more meaningful\n- * output when building langtools. The basic ant output in IntelliJ can be quite cumbersome to\n- * work with, as it provides two separate views: (i) a tree view, which is good to display build task\n- * in a hierarchical fashion as they are processed; and a (ii) plain text view, which gives you\n- * the full ant output. The main problem is that javac-related messages are buried into the\n- * ant output (which is made very verbose by IntelliJ in order to support the tree view). It is\n- * not easy to figure out which node to expand in order to see the error message; switching\n- * to plain text doesn't help either, as now the output is totally flat.\n- *\n- * This logger class removes a lot of verbosity from the IntelliJ ant logger by not propagating\n- * all the events to the IntelliJ's logger. In addition, certain events are handled in a custom\n- * fashion, to generate better output during the build.\n- *\/\n-public final class JdkIdeaAntLogger extends DefaultLogger {\n-\n-    \/**\n-     * This is just a way to pass in customized binary string predicates;\n-     *\n-     * TODO: replace with @code{BiPredicate<String, String>} and method reference when moving to 8\n-     *\/\n-    enum StringBinaryPredicate {\n-        CONTAINS() {\n-            @Override\n-            boolean apply(String s1, String s2) {\n-                return s1.contains(s2);\n-            }\n-        },\n-        STARTS_WITH {\n-            @Override\n-            boolean apply(String s1, String s2) {\n-                return s1.startsWith(s2);\n-            }\n-        },\n-        MATCHES {\n-            @Override\n-            boolean apply(String s1, String s2) {\n-                return s1.matches(s2);\n-            }\n-        };\n-\n-        abstract boolean apply(String s1, String s2);\n-    }\n-\n-    \/**\n-     * Various kinds of ant messages that we shall intercept\n-     *\/\n-    enum MessageKind {\n-\n-        \/** a make error *\/\n-        MAKE_ERROR(StringBinaryPredicate.CONTAINS, MSG_ERR, \"error:\", \"compiler.err\"),\n-        \/** a make warning *\/\n-        MAKE_WARNING(StringBinaryPredicate.CONTAINS, MSG_WARN, \"warning:\", \"compiler.warn\"),\n-        \/** a make note *\/\n-        MAKE_NOTE(StringBinaryPredicate.CONTAINS, MSG_INFO, \"note:\", \"compiler.note\"),\n-        \/** std make output *\/\n-        MAKE_OTHER(StringBinaryPredicate.MATCHES, MSG_INFO, \".*\"),\n-        \/** a javac crash *\/\n-        JAVAC_CRASH(StringBinaryPredicate.STARTS_WITH, MSG_ERR, \"An exception has occurred in the compiler\"),\n-        \/** jtreg test success *\/\n-        JTREG_TEST_PASSED(StringBinaryPredicate.STARTS_WITH, MSG_INFO, \"Passed: \"),\n-        \/** jtreg test failure *\/\n-        JTREG_TEST_FAILED(StringBinaryPredicate.STARTS_WITH, MSG_ERR, \"FAILED: \"),\n-        \/** jtreg test error *\/\n-        JTREG_TEST_ERROR(StringBinaryPredicate.STARTS_WITH, MSG_ERR, \"Error: \"),\n-        \/** jtreg report *\/\n-        JTREG_TEST_REPORT(StringBinaryPredicate.STARTS_WITH, MSG_INFO, \"Report written\");\n-\n-        StringBinaryPredicate sbp;\n-        int priority;\n-        String[] keys;\n-\n-        MessageKind(StringBinaryPredicate sbp, int priority, String... keys) {\n-            this.sbp = sbp;\n-            this.priority = priority;\n-            this.keys = keys;\n-        }\n-\n-        \/**\n-         * Does a given message string matches this kind?\n-         *\/\n-        boolean matches(String s) {\n-            for (String key : keys) {\n-                if (sbp.apply(s, key)) {\n-                    return true;\n-                }\n-            }\n-            return false;\n-        }\n-    }\n-\n-    \/**\n-     * This enum is used to represent the list of tasks we need to keep track of during logging.\n-     *\/\n-    enum Task {\n-        \/** javac task - invoked during compilation *\/\n-        MAKE(\"exec\", MessageKind.MAKE_ERROR, MessageKind.MAKE_WARNING, MessageKind.MAKE_NOTE,\n-                       MessageKind.MAKE_OTHER, MessageKind.JAVAC_CRASH),\n-        \/** jtreg task - invoked during test execution *\/\n-        JTREG(\"jtreg\", MessageKind.JTREG_TEST_PASSED, MessageKind.JTREG_TEST_FAILED, MessageKind.JTREG_TEST_ERROR, MessageKind.JTREG_TEST_REPORT),\n-        \/** initial synthetic task when the logger is created *\/\n-        ROOT(\"\") {\n-            @Override\n-            boolean matches(String s) {\n-                return false;\n-            }\n-        },\n-        \/** synthetic task catching any other tasks not in this list *\/\n-        ANY(\"\") {\n-            @Override\n-            boolean matches(String s) {\n-                return true;\n-            }\n-        };\n-\n-        String taskName;\n-        MessageKind[] msgs;\n-\n-        Task(String taskName, MessageKind... msgs) {\n-            this.taskName = taskName;\n-            this.msgs = msgs;\n-        }\n-\n-        boolean matches(String s) {\n-            return s.equals(taskName);\n-        }\n-    }\n-\n-    \/**\n-     * This enum is used to represent the list of targets we need to keep track of during logging.\n-     * A regular expression is used to match a given target name.\n-     *\/\n-    enum Target {\n-        \/** jtreg target - executed when launching tests *\/\n-        JTREG(\"jtreg\") {\n-            @Override\n-            String getDisplayMessage(BuildEvent e) {\n-                return \"Running jtreg tests: \" + e.getProject().getProperty(\"jtreg.tests\");\n-            }\n-        },\n-        \/** build selected modules *\/\n-        BUILD_MODULE(\"build-module\") {\n-            @Override\n-            String getDisplayMessage(BuildEvent e) {\n-                return \"Building modules: \" + e.getProject().getProperty(\"module.name\") + \"...\";\n-            }\n-        },\n-        \/** build images *\/\n-        BUILD_IMAGES(\"images\") {\n-            @Override\n-            String getDisplayMessage(BuildEvent e) {\n-                return \"Building images...\";\n-            }\n-        },\n-        \/** build images *\/\n-        CONFIGURE(\"-do-configure\") {\n-            @Override\n-            String getDisplayMessage(BuildEvent e) {\n-                return \"Configuring build...\";\n-            }\n-        },\n-        \/** synthetic target catching any other target not in this list *\/\n-        ANY(\"\") {\n-            @Override\n-            String getDisplayMessage(BuildEvent e) {\n-                return \"Executing Ant target(s): \" + e.getProject().getProperty(\"ant.project.invoked-targets\");\n-            }\n-            @Override\n-            boolean matches(String msg) {\n-                return true;\n-            }\n-        };\n-\n-        String targetRegex;\n-\n-        Target(String targetRegex) {\n-            this.targetRegex = targetRegex;\n-        }\n-\n-        boolean matches(String msg) {\n-            return msg.matches(targetRegex);\n-        }\n-\n-        abstract String getDisplayMessage(BuildEvent e);\n-    }\n-\n-    \/**\n-     * A custom build event used to represent status changes which should be notified inside\n-     * Intellij\n-     *\/\n-    static class StatusEvent extends BuildEvent {\n-\n-        \/** the target to which the status update refers *\/\n-        Target target;\n-\n-        StatusEvent(BuildEvent e, Target target) {\n-            super(new StatusTask(e, target.getDisplayMessage(e)));\n-            this.target = target;\n-            setMessage(getTask().getTaskName(), 2);\n-        }\n-\n-        \/**\n-         * A custom task used to channel info regarding a status change\n-         *\/\n-        static class StatusTask extends org.apache.tools.ant.Task {\n-            StatusTask(BuildEvent event, String msg) {\n-                setProject(event.getProject());\n-                setOwningTarget(event.getTarget());\n-                setTaskName(msg);\n-            }\n-        }\n-    }\n-\n-    \/** wrapped ant logger (IntelliJ's own logger) *\/\n-    DefaultLogger logger;\n-\n-    \/** flag - is this the first target we encounter? *\/\n-    boolean firstTarget = true;\n-\n-    \/** flag - should subsequenet failures be suppressed ? *\/\n-    boolean suppressTaskFailures = false;\n-\n-    \/** flag - have we ran into a javac crash ? *\/\n-    boolean crashFound = false;\n-\n-    \/** stack of status changes associated with pending targets *\/\n-    Stack<StatusEvent> statusEvents = new Stack<>();\n-\n-    \/** stack of pending tasks *\/\n-    Stack<Task> tasks = new Stack<>();\n-\n-    public JdkIdeaAntLogger(Project project) {\n-        for (Object o : project.getBuildListeners()) {\n-            if (o instanceof DefaultLogger) {\n-                this.logger = (DefaultLogger)o;\n-                project.removeBuildListener((BuildListener)o);\n-                project.addBuildListener(this);\n-            }\n-        }\n-        tasks.push(Task.ROOT);\n-    }\n-\n-    @Override\n-    public void buildStarted(BuildEvent event) {\n-        \/\/do nothing\n-    }\n-\n-    @Override\n-    public void buildFinished(BuildEvent event) {\n-        \/\/do nothing\n-    }\n-\n-    @Override\n-    public void targetStarted(BuildEvent event) {\n-        EnumSet<Target> statusKinds = firstTarget ?\n-                EnumSet.allOf(Target.class) :\n-                EnumSet.complementOf(EnumSet.of(Target.ANY));\n-\n-        String targetName = event.getTarget().getName();\n-\n-        for (Target statusKind : statusKinds) {\n-            if (statusKind.matches(targetName)) {\n-                StatusEvent statusEvent = new StatusEvent(event, statusKind);\n-                statusEvents.push(statusEvent);\n-                logger.taskStarted(statusEvent);\n-                firstTarget = false;\n-                return;\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public void targetFinished(BuildEvent event) {\n-        if (!statusEvents.isEmpty()) {\n-            StatusEvent lastEvent = statusEvents.pop();\n-            if (lastEvent.target.matches(event.getTarget().getName())) {\n-                logger.taskFinished(lastEvent);\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public void taskStarted(BuildEvent event) {\n-        String taskName = event.getTask().getTaskName();\n-        System.err.println(\"task started \" + taskName);\n-        for (Task task : Task.values()) {\n-            if (task.matches(taskName)) {\n-                tasks.push(task);\n-                return;\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public void taskFinished(BuildEvent event) {\n-        if (tasks.peek() == Task.ROOT) {\n-            \/\/we need to 'close' the root task to get nicer output\n-            logger.taskFinished(event);\n-        } else if (!suppressTaskFailures && event.getException() != null) {\n-            \/\/the first (innermost) task failure should always be logged\n-            event.setMessage(event.getException().toString(), 0);\n-            event.setException(null);\n-            \/\/note: we turn this into a plain message to avoid stack trace being logged by Idea\n-            logger.messageLogged(event);\n-            suppressTaskFailures = true;\n-        }\n-        tasks.pop();\n-    }\n-\n-    @Override\n-    public void messageLogged(BuildEvent event) {\n-        String msg = event.getMessage();\n-\n-        boolean processed = false;\n-\n-        if (!tasks.isEmpty()) {\n-            Task task = tasks.peek();\n-            for (MessageKind messageKind : task.msgs) {\n-                if (messageKind.matches(msg)) {\n-                    event.setMessage(msg, messageKind.priority);\n-                    processed = true;\n-                    if (messageKind == MessageKind.JAVAC_CRASH) {\n-                        crashFound = true;\n-                    }\n-                    break;\n-                }\n-            }\n-        }\n-\n-        if (event.getPriority() == MSG_ERR || crashFound) {\n-            \/\/we log errors regardless of owning task\n-            logger.messageLogged(event);\n-            suppressTaskFailures = true;\n-        } else if (processed) {\n-            logger.messageLogged(event);\n-        }\n-    }\n-}\n","filename":"make\/ide\/idea\/jdk\/template\/src\/idea\/JdkIdeaAntLogger.java","additions":0,"deletions":375,"binary":false,"changes":375,"status":"deleted"},{"patch":"@@ -3,0 +3,10 @@\n+  <component name=\"IssueNavigationConfiguration\">\n+    <option name=\"links\">\n+      <list>\n+        <IssueNavigationLink>\n+          <option name=\"issueRegexp\" value=\"(?:^|\\s|\\p{Punct})(?:JDK-)?(\\d{7})(?=$|\\s|\\p{Punct})\" \/>\n+          <option name=\"linkRegexp\" value=\"https:\/\/bugs.openjdk.java.net\/browse\/JDK-$1\" \/>\n+        <\/IssueNavigationLink>\n+      <\/list>\n+    <\/option>\n+  <\/component>\n@@ -4,1 +14,1 @@\n-    <mapping directory=\"###ROOT_DIR###\" vcs=\"###VCS_TYPE###\" \/>\n+    <mapping directory=\"###TOPLEVEL_PROJECT_DIR###\" vcs=\"###VCS_TYPE###\" \/>\n","filename":"make\/ide\/idea\/jdk\/template\/vcs.xml","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -5,1 +5,1 @@\n-    <ignored path=\"###ROOT_DIR###\/build\/idea\/out\/\" \/>\n+    <ignored path=\"###PROJECT_DIR###\/build\/idea\/out\/\" \/>\n@@ -11,52 +11,51 @@\n-  <component name=\"antWorkspaceConfiguration\">\n-    <option name=\"IS_AUTOSCROLL_TO_SOURCE\" value=\"false\" \/>\n-    <option name=\"FILTER_TARGETS\" value=\"false\" \/>\n-    <buildFile url=\"file:\/\/###ROOT_DIR###\/make\/ide\/idea\/jdk\/build.xml\">\n-      <runInBackground value=\"false\" \/>\n-      <targetFilters>\n-        <filter targetName=\"clean\" isVisible=\"true\" \/>\n-        <filter targetName=\"images\" isVisible=\"true\" \/>\n-      <\/targetFilters>\n-      <treeView value=\"false\" \/>\n-      <expanded value=\"true\" \/>\n-    <\/buildFile>\n-  <\/component>\n-  <component name=\"ProjectView\">\n-    <navigator currentView=\"ProjectPane\" proportions=\"\" version=\"1\">\n-      <flattenPackages \/>\n-      <showMembers \/>\n-      <showModules \/>\n-      <showLibraryContents \/>\n-      <hideEmptyPackages \/>\n-      <abbreviatePackageNames \/>\n-      <autoscrollToSource \/>\n-      <autoscrollFromSource \/>\n-      <sortByType \/>\n-    <\/navigator>\n-    <panes>\n-      <pane id=\"ProjectPane\">\n-        <subPane>\n-          <PATH>\n-            <PATH_ELEMENT>\n-              <option name=\"myItemId\" value=\"jdk\" \/>\n-              <option name=\"myItemType\" value=\"com.intellij.ide.projectView.impl.nodes.ProjectViewProjectNode\" \/>\n-            <\/PATH_ELEMENT>\n-          <\/PATH>\n-        <\/subPane>\n-      <\/pane>\n-      <pane id=\"PackagesPane\">\n-        <subPane>\n-          <PATH>\n-            <PATH_ELEMENT>\n-              <option name=\"myItemId\" value=\"jdk\" \/>\n-              <option name=\"myItemType\" value=\"com.intellij.ide.projectView.impl.nodes.PackageViewProjectNode\" \/>\n-            <\/PATH_ELEMENT>\n-            <PATH_ELEMENT>\n-              <option name=\"myItemId\" value=\"jdk\" \/>\n-              <option name=\"myItemType\" value=\"com.intellij.ide.projectView.impl.nodes.PackageViewModuleNode\" \/>\n-            <\/PATH_ELEMENT>\n-          <\/PATH>\n-        <\/subPane>\n-      <\/pane>\n-      <pane id=\"Scope\" \/>\n-    <\/panes>\n+  <component name=\"RunManager\" selected=\"Shell Script.images\">\n+    <configuration name=\"clean\" type=\"ShConfigurationType\" folderName=\"make\">\n+      <option name=\"SCRIPT_TEXT\" value=\"###BASH_RUNNER_PREFIX### make clean\" \/>\n+      <option name=\"INDEPENDENT_SCRIPT_PATH\" value=\"true\" \/>\n+      <option name=\"SCRIPT_PATH\" value=\"\" \/>\n+      <option name=\"SCRIPT_OPTIONS\" value=\"\" \/>\n+      <option name=\"INDEPENDENT_SCRIPT_WORKING_DIRECTORY\" value=\"true\" \/>\n+      <option name=\"SCRIPT_WORKING_DIRECTORY\" value=\"###PROJECT_DIR###\" \/>\n+      <option name=\"INDEPENDENT_INTERPRETER_PATH\" value=\"true\" \/>\n+      <option name=\"INTERPRETER_PATH\" value=\"\" \/>\n+      <option name=\"INTERPRETER_OPTIONS\" value=\"\" \/>\n+      <option name=\"EXECUTE_IN_TERMINAL\" value=\"true\" \/>\n+      <option name=\"EXECUTE_SCRIPT_FILE\" value=\"false\" \/>\n+      <envs \/>\n+      <method v=\"2\" \/>\n+    <\/configuration>\n+    <configuration name=\"images\" type=\"ShConfigurationType\" folderName=\"make\">\n+      <option name=\"SCRIPT_TEXT\" value=\"###BASH_RUNNER_PREFIX### make images\" \/>\n+      <option name=\"INDEPENDENT_SCRIPT_PATH\" value=\"true\" \/>\n+      <option name=\"SCRIPT_PATH\" value=\"\" \/>\n+      <option name=\"SCRIPT_OPTIONS\" value=\"\" \/>\n+      <option name=\"INDEPENDENT_SCRIPT_WORKING_DIRECTORY\" value=\"true\" \/>\n+      <option name=\"SCRIPT_WORKING_DIRECTORY\" value=\"###PROJECT_DIR###\" \/>\n+      <option name=\"INDEPENDENT_INTERPRETER_PATH\" value=\"true\" \/>\n+      <option name=\"INTERPRETER_PATH\" value=\"\" \/>\n+      <option name=\"INTERPRETER_OPTIONS\" value=\"\" \/>\n+      <option name=\"EXECUTE_IN_TERMINAL\" value=\"true\" \/>\n+      <option name=\"EXECUTE_SCRIPT_FILE\" value=\"false\" \/>\n+      <envs \/>\n+      <method v=\"2\" \/>\n+    <\/configuration>\n+    <configuration name=\"reconfigure\" type=\"ShConfigurationType\" folderName=\"make\">\n+      <option name=\"SCRIPT_TEXT\" value=\"###BASH_RUNNER_PREFIX### make reconfigure\" \/>\n+      <option name=\"INDEPENDENT_SCRIPT_PATH\" value=\"true\" \/>\n+      <option name=\"SCRIPT_PATH\" value=\"\" \/>\n+      <option name=\"SCRIPT_OPTIONS\" value=\"\" \/>\n+      <option name=\"INDEPENDENT_SCRIPT_WORKING_DIRECTORY\" value=\"true\" \/>\n+      <option name=\"SCRIPT_WORKING_DIRECTORY\" value=\"###PROJECT_DIR###\" \/>\n+      <option name=\"INDEPENDENT_INTERPRETER_PATH\" value=\"true\" \/>\n+      <option name=\"INTERPRETER_PATH\" value=\"\" \/>\n+      <option name=\"INTERPRETER_OPTIONS\" value=\"\" \/>\n+      <option name=\"EXECUTE_IN_TERMINAL\" value=\"true\" \/>\n+      <option name=\"EXECUTE_SCRIPT_FILE\" value=\"false\" \/>\n+      <envs \/>\n+      <method v=\"2\" \/>\n+    <\/configuration>\n+    <list>\n+      <item itemvalue=\"Shell Script.images\" \/>\n+      <item itemvalue=\"Shell Script.clean\" \/>\n+      <item itemvalue=\"Shell Script.reconfigure\" \/>\n+    <\/list>\n","filename":"make\/ide\/idea\/jdk\/template\/workspace.xml","additions":52,"deletions":53,"binary":false,"changes":105,"status":"modified"}]}