{"files":[{"patch":"@@ -691,3 +691,0 @@\n-  vmTestbase\/gc\/gctests\/mallocWithGC1\/mallocWithGC1.java \\\n-  vmTestbase\/gc\/gctests\/mallocWithGC2\/mallocWithGC2.java \\\n-  vmTestbase\/gc\/gctests\/mallocWithGC3\/mallocWithGC3.java \\\n","filename":"test\/hotspot\/jtreg\/TEST.groups","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,44 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-#include <jni.h>\n-#include <stdlib.h>\n-#include <time.h>\n-\n-extern \"C\" {\n-\n-JNIEXPORT void JNICALL Java_gc_gctests_mallocWithGC1_mallocWithGC1_getMallocLock01\n-(JNIEnv *env, jobject obj) {\n-        char *c_ptr;\n-        time_t current_time, old_time;\n-\n-        old_time = time(NULL);\n-        current_time = 0;\n-\n-        while (current_time - old_time < 180) {\n-                c_ptr = (char *) malloc(1);\n-                free(c_ptr);\n-                current_time = time(NULL);\n-        }\n-}\n-\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/gctests\/mallocWithGC1\/libmallocWithGC1.cpp","additions":0,"deletions":44,"binary":false,"changes":44,"status":"deleted"},{"patch":"@@ -1,131 +0,0 @@\n-\/*\n- * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-\/*\n- * @test\n- *\n- * @summary converted from VM Testbase gc\/gctests\/mallocWithGC1.\n- * VM Testbase keywords: [gc]\n- * VM Testbase readme:\n- * LD_LIBRARY PATH must include \"$TESTBASE\/src\/misc\/gc\/utils\/lib\/sparc(or i386)\"\n- * while running these tests. The native code for all the mallocWithGC* tests\n- * has been bunched up into a single .so.\n- * In this test, 2 threads are created, one thread(javaHeapEater)\n- * creates garbage by nulling out the elements of a vector, which formerly\n- * held points to circular linked lists. These elements are again repopulated\n- * with new linked lists. The second thread invokes a native function\n- * that continually mallocs and frees one byte of memory for 3 minutes\n- * a hold on a malloc lock.\n- * The idea here is  to see if the vm deadlocks (if it does, it is ofcourse\n- * a failure ). This test was created because of the following problem\n- * that the vm used to have :\n- *  \"The malloc\/GC deadlock problem is that a gc may suspend a thread (in native\n- * or VM code) that is in the middle of a malloc, so it has the \"malloc\" lock.\n- * GC may want to do a malloc, but it can't get the lock, so it deadlocks. \"\n- *\n- * @library \/vmTestbase\n- *          \/test\/lib\n- * @run main\/othervm\/native\/timeout=300 gc.gctests.mallocWithGC1.mallocWithGC1\n- *\/\n-\n-package gc.gctests.mallocWithGC1;\n-\n-import nsk.share.test.*;\n-import nsk.share.gc.*;\n-import nsk.share.TestFailure;\n-import java.util.Vector;\n-\n-public class mallocWithGC1 implements Test {\n-        private int objectSize = 100;\n-\n-        static {\n-                System.loadLibrary(\"mallocWithGC1\");\n-        }\n-\n-        public native void getMallocLock01();\n-\n-        class javaHeapEater extends Thread {\n-                private Vector v;\n-\n-                public javaHeapEater(Vector v) {\n-                        this.v = v;\n-                }\n-\n-                public void run() throws OutOfMemoryError {\n-                        int  gc_count;\n-\n-                        for(int i = 0; i < 5 ; i++)\n-                                v.addElement(buildCircularLinkedList());\n-                        gc_count = 0;\n-                        while( gc_count < 10 ) {\n-\n-                                for(int i = 0; i < 5 ; i++)\n-                                        v.setElementAt(null, i);\n-\n-                                for(int i = 0; i < 5 ; i++)\n-                                        v.setElementAt(buildCircularLinkedList(),i);\n-\n-                                gc_count++;\n-                                System.out.println(\"Finished iteration # \" + gc_count);\n-                        }\n-                }\n-        }\n-\n-        class cHeapEater extends Thread{\n-                public void run() {\n-                        getMallocLock01();\n-                }\n-        }\n-\n-        public void run() {\n-                Vector v = new Vector(5);\n-                Thread tArray[] = new Thread[2];\n-\n-                tArray[0] = new javaHeapEater(v);\n-                tArray[1] = new cHeapEater();\n-\n-                try {\n-                        for(int i = 0; i < tArray.length ; i++ )\n-                                tArray[i].start();\n-                        for(int i = 0; i < tArray.length ; i++ )\n-                                tArray[i].join();\n-                } catch (Exception e) {\n-                        throw new TestFailure(\"Test Failed.\", e);\n-                }\n-                System.out.println(\"Test Passed.\");\n-        }\n-\n-        \/\/ build a circular linked list of 0.2 Meg\n-\n-        private CircularLinkedList  buildCircularLinkedList() {\n-                CircularLinkedList cl = new CircularLinkedList(objectSize);\n-                for(int i = 0; i < 2000; i++)\n-                        cl.grow();\n-                return cl;\n-        }\n-\n-        public static void main(String args[]){\n-                Tests.runTest(new mallocWithGC1(), args);\n-        }\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/gctests\/mallocWithGC1\/mallocWithGC1.java","additions":0,"deletions":131,"binary":false,"changes":131,"status":"deleted"},{"patch":"@@ -1,44 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-#include <jni.h>\n-#include <stdlib.h>\n-#include <time.h>\n-\n-extern \"C\" {\n-\n-JNIEXPORT void JNICALL Java_gc_gctests_mallocWithGC2_mallocWithGC2_getMallocLock02\n-(JNIEnv *env, jobject obj) {\n-        char *c_ptr;\n-        time_t current_time, old_time;\n-\n-        old_time = time(NULL);\n-        current_time = 0;\n-\n-        while (current_time - old_time < 180) {\n-                c_ptr = (char *) malloc(1);\n-                free(c_ptr);\n-                current_time = time(NULL);\n-        }\n-}\n-\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/gctests\/mallocWithGC2\/libmallocWithGC2.cpp","additions":0,"deletions":44,"binary":false,"changes":44,"status":"deleted"},{"patch":"@@ -1,137 +0,0 @@\n-\/*\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-\/*\n- * @test\n- *\n- * @summary converted from VM Testbase gc\/gctests\/mallocWithGC2.\n- * VM Testbase keywords: [gc]\n- * VM Testbase readme:\n- * LD_LIBRARY PATH must include \"$TESTBASE\/src\/misc\/gc\/utils\/lib\/sparc(or i386)\"\n- * while running these tests. The native code for all the mallocWithGC* tests\n- * has been bunched up into a single .so.\n- * In this test, 2 threads are created, one thread(javaHeapEater)\n- * creates garbage by nulling out the elements of a vector, which formerly\n- * held points to circular linked lists. These elements are again repopulated\n- * with new linked lists. The second thread invokes a native function\n- * that continually mallocs and frees one byte of memory for 3 minutes\n- * a hold on a malloc lock.\n- * The difference between mallocWithGC1 mallocWithGC2 is the way the locks\n- * are held. here the \"malloc\" lock is more efficiently held, not by\n- * the expiration of a timer but as long as the java heap devourer thread\n- * stays alive.\n- * The idea here is  to see if the vm deadlocks (if it does, it is ofcourse\n- * a failure ). This test was created because of the following problem\n- * that the vm used to have :\n- *  \"The malloc\/GC deadlock problem is that a gc may suspend a thread (in native\n- * or VM code) that is in the middle of a malloc, so it has the \"malloc\" lock.\n- * GC may want to do a malloc, but it can't get the lock, so it deadlocks. \"\n- *\n- * @library \/vmTestbase\n- *          \/test\/lib\n- * @run main\/othervm\/native gc.gctests.mallocWithGC2.mallocWithGC2\n- *\/\n-\n-package gc.gctests.mallocWithGC2;\n-\n-import nsk.share.test.*;\n-import nsk.share.gc.*;\n-import nsk.share.TestFailure;\n-import java.util.Vector;\n-\n-public class mallocWithGC2 extends TestBase {\n-        static {\n-                System.loadLibrary(\"mallocWithGC2\");\n-        }\n-\n-        public native void getMallocLock02();\n-\n-        private class javaHeapEater extends Thread {\n-                private Vector v;\n-\n-                javaHeapEater(Vector v) {\n-                        this.v = v;\n-                }\n-\n-                public void run() throws OutOfMemoryError {\n-                        int  gc_count;\n-\n-                        for(int i = 0; i < 10 ; i++)\n-                                v.addElement(buildCircularLinkedList());\n-                        gc_count = 0;\n-                        while( gc_count < 10 ) {\n-\n-                                for(int i = 0; i < 10 ; i++)\n-                                        v.setElementAt(null, i);\n-\n-                                for(int i = 0; i < 10  ; i++)\n-                                        v.setElementAt(buildCircularLinkedList(),i);\n-\n-                                gc_count++;\n-                                log.info(\"Finished iteration # \" + gc_count);\n-                        }\n-                }\n-        }\n-\n-\n-        private class cHeapEater extends Thread{\n-                public void run() {\n-                        getMallocLock02();\n-                }\n-        }\n-\n-        public void run() {\n-                Vector v = new Vector(10);\n-                Thread tArray[] = new Thread[2];\n-\n-                tArray[0] = new javaHeapEater(v);\n-                tArray[1] = new cHeapEater();\n-\n-                try {\n-                        for(int i = 0; i < tArray.length ; i++ )\n-                                tArray[i].start();\n-\n-                        tArray[0].join(); \/\/ wait for the javaHeapEater Thread to finish\n-                } catch (Exception e) {\n-                        throw new TestFailure(\"Test Failed.\", e);\n-                }\n-                log.info(\"Test Passed.\");\n-        }\n-\n-        \/\/ build a circular linked list of 0.2 Meg\n-\n-        private CircularLinkedList buildCircularLinkedList() {\n-                CircularLinkedList cl;\n-\n-                cl = new CircularLinkedList(100);\n-                for(int i = 0; i < 2000; i++)\n-                        cl.grow();\n-                return cl;\n-        }\n-\n-        public static void main(String args[]) {\n-                Tests.runTest(new mallocWithGC2(), args);\n-        }\n-\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/gctests\/mallocWithGC2\/mallocWithGC2.java","additions":0,"deletions":137,"binary":false,"changes":137,"status":"deleted"},{"patch":"@@ -1,45 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-#include <jni.h>\n-#include <stdlib.h>\n-#include <time.h>\n-\n-extern \"C\" {\n-\n-JNIEXPORT void JNICALL\n-Java_gc_gctests_mallocWithGC3_mallocWithGC3_getMallocLock03\n-(JNIEnv *env, jobject obj) {\n-        char *c_ptr;\n-        time_t current_time, old_time;\n-\n-        old_time = time(NULL);\n-        current_time = 0;\n-\n-        while (current_time - old_time < 180) {\n-                c_ptr = (char *) malloc(1);\n-                free(c_ptr);\n-                current_time = time(NULL);\n-        }\n-}\n-\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/gctests\/mallocWithGC3\/libmallocWithGC3.cpp","additions":0,"deletions":45,"binary":false,"changes":45,"status":"deleted"},{"patch":"@@ -1,136 +0,0 @@\n-\/*\n- * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\n-\/*\n- * @test\n- *\n- * @summary converted from VM Testbase gc\/gctests\/mallocWithGC3.\n- * VM Testbase keywords: [gc]\n- * VM Testbase readme:\n- * ********************************************************\n- * LD_LIBRARY PATH must include \"$TESTBASE\/src\/misc\/gc\/utils\/lib\/sparc(or i386)\"\n- * while running these tests. The native code for all the mallocWithGC* tests\n- * has been bunched up into a single .so.\n- * ********************************************************\n- * In this test, 2 threads are created, one thread(javaHeapEater)\n- * creates garbage by nulling out the elements of a vector, which formerly\n- * held points to circular linked lists. These elements are again repopulated\n- * with new linked lists. The second thread invokes a native function\n- * that continually mallocs and frees one byte of memory for 3 minutes\n- * a hold on a malloc lock.\n- * In this test, the GC is called synchronously while another\n- * thread contines to malloc\/free in a loop.\n- * The idea here is  to see if the vm deadlocks (if it does, it is ofcourse\n- * a failure ). This test was created because of the following problem\n- * that the vm used to have :\n- *  \"The malloc\/GC deadlock problem is that a gc may suspend a thread (in native\n- * or VM code) that is in the middle of a malloc, so it has the \"malloc\" lock.\n- * GC may want to do a malloc, but it can't get the lock, so it deadlocks. \"\n- *\n- * @library \/vmTestbase\n- *          \/test\/lib\n- * @run main\/othervm\/native\/timeout=300 gc.gctests.mallocWithGC3.mallocWithGC3\n- *\/\n-\n-package gc.gctests.mallocWithGC3;\n-\n-import nsk.share.test.*;\n-import nsk.share.gc.*;\n-import java.util.Vector;\n-\n-public class mallocWithGC3 extends TestBase {\n-        static {\n-                System.loadLibrary(\"mallocWithGC3\");\n-        }\n-\n-        public native void getMallocLock03();\n-\n-        private class javaHeapEater extends Thread {\n-                private Vector v;\n-\n-                public javaHeapEater(Vector v) {\n-                        this.v = v;\n-                }\n-\n-                public void run() throws OutOfMemoryError {\n-                        int  gc_count;\n-\n-                        for(int i = 0; i < 5 ; i++)\n-                                v.addElement(buildCircularLinkedList());\n-                        gc_count = 0;\n-\n-                        while( gc_count < 10 ) {\n-                                for (int i = 0; i < 5 ; i++)\n-                                        v.setElementAt(null, i);\n-\n-                                System.gc(); \/\/ Forcibly call GC.\n-\n-                                for (int i = 0; i < 5 ; i++)\n-                                        v.setElementAt(buildCircularLinkedList(),i);\n-\n-                                gc_count++;\n-                                log.info(\"Finished iteration # \" + gc_count);\n-                        }\n-                }\n-        }\n-\n-        private class cHeapEater extends Thread {\n-                public void run() {\n-                        getMallocLock03();\n-                }\n-        }\n-\n-        public void run() {\n-                Vector v = new Vector(5);\n-                Thread tArray[] = new Thread[2];\n-\n-                tArray[0] = new javaHeapEater(v);\n-                tArray[1] = new cHeapEater();\n-\n-\n-                try {\n-                        for(int i = 0; i < tArray.length ; i++ )\n-                                tArray[i].start();\n-                        for(int i = 0; i < tArray.length ; i++ )\n-                                tArray[i].join();\n-                } catch (Exception e) {\n-                        setFailed(true);\n-                }\n-        }\n-\n-        \/\/ build a circular linked list of 0.4 Meg\n-        private CircularLinkedList  buildCircularLinkedList() {\n-                CircularLinkedList cl;\n-\n-                cl = new CircularLinkedList(100);\n-                for(int i = 0; i < 2000; i++)\n-                        cl.grow();\n-                return cl;\n-        }\n-\n-        public static void main(String args[]){\n-                Tests.runTest(new mallocWithGC3(), args);\n-        }\n-\n-}\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/gctests\/mallocWithGC3\/mallocWithGC3.java","additions":0,"deletions":136,"binary":false,"changes":136,"status":"deleted"}]}