{"files":[{"patch":"@@ -2414,1 +2414,1 @@\n-                                    (referent == other.get())) &&\n+                                    (other.refersTo(referent))) &&\n@@ -2535,1 +2535,1 @@\n-                Object referent = get();\n+                Class<?> referent = get();\n@@ -2537,1 +2537,1 @@\n-                       (referent == ((WeakClassKey) obj).get());\n+                        (((WeakClassKey) obj).refersTo(referent));\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2047,1 +2047,1 @@\n-                Object referent = get();\n+                Class<?> referent = get();\n@@ -2049,1 +2049,1 @@\n-                       (referent == ((WeakClassKey) obj).get());\n+                        (((WeakClassKey) obj).refersTo(referent));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Thread.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n-import java.lang.ref.*;\n+import java.lang.ref.WeakReference;\n@@ -436,1 +436,1 @@\n-            if (e != null && e.get() == key)\n+            if (e != null && e.refersTo(key))\n@@ -456,2 +456,1 @@\n-                ThreadLocal<?> k = e.get();\n-                if (k == key)\n+                if (e.refersTo(key))\n@@ -459,1 +458,1 @@\n-                if (k == null)\n+                if (e.refersTo(null))\n@@ -488,3 +487,1 @@\n-                ThreadLocal<?> k = e.get();\n-\n-                if (k == key) {\n+                if (e.refersTo(key)) {\n@@ -495,1 +492,1 @@\n-                if (k == null) {\n+                if (e.refersTo(null)) {\n@@ -517,1 +514,1 @@\n-                if (e.get() == key) {\n+                if (e.refersTo(key)) {\n@@ -554,1 +551,1 @@\n-                if (e.get() == null)\n+                if (e.refersTo(null))\n@@ -562,2 +559,0 @@\n-                ThreadLocal<?> k = e.get();\n-\n@@ -569,1 +564,1 @@\n-                if (k == key) {\n+                if (e.refersTo(key)) {\n@@ -585,1 +580,1 @@\n-                if (k == null && slotToExpunge == staleSlot)\n+                if (e.refersTo(null) && slotToExpunge == staleSlot)\n@@ -676,1 +671,1 @@\n-                if (e != null && e.get() == null) {\n+                if (e != null && e.refersTo(null)) {\n@@ -736,1 +731,1 @@\n-                if (e != null && e.get() == null)\n+                if (e != null && e.refersTo(null))\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ThreadLocal.java","additions":13,"deletions":18,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -405,1 +405,0 @@\n-        Thread clinitThread = ref.get();\n@@ -407,1 +406,1 @@\n-        if (clinitThread == Thread.currentThread()) {\n+        if (ref.refersTo(Thread.currentThread())) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -340,1 +340,1 @@\n-     * @see refersTo\n+     * @see #refersTo\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/Reference.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -645,1 +645,1 @@\n-            return callerRef.get() == caller && targetRef.get() == refc;\n+            return callerRef.refersTo(caller) && targetRef.refersTo(refc);\n@@ -677,1 +677,1 @@\n-            return ref.get() == caller;\n+            return ref.refersTo(caller);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/AccessibleObject.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -1758,1 +1758,1 @@\n-                if (bundleRef != null && bundleRef.get() == bundle) {\n+                if (bundleRef != null && bundleRef.refersTo(bundle)) {\n","filename":"src\/java.base\/share\/classes\/java\/util\/ResourceBundle.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import java.util.concurrent.ThreadLocalRandom;\n@@ -286,2 +285,8 @@\n-    private static boolean eq(Object x, Object y) {\n-        return x == y || x.equals(y);\n+    private boolean matchesKey(Entry<K,V> e, Object key) {\n+        \/\/ check if the given entry refers to the given key without\n+        \/\/ keeping a strong reference to the entry's referent\n+        if (e.refersTo(key)) return true;\n+\n+        \/\/ then check for equality if the referent is not cleared\n+        Object k = e.get();\n+        return k != null && key.equals(k);\n@@ -402,1 +407,1 @@\n-            if (e.hash == h && eq(k, e.get()))\n+            if (e.hash == h && matchesKey(e, k))\n@@ -431,1 +436,1 @@\n-        while (e != null && !(e.hash == h && eq(k, e.get())))\n+        while (e != null && !(e.hash == h && matchesKey(e, k)))\n@@ -455,1 +460,1 @@\n-            if (h == e.hash && eq(k, e.get())) {\n+            if (h == e.hash && matchesKey(e, k)) {\n@@ -518,2 +523,1 @@\n-                Object key = e.get();\n-                if (key == null) {\n+                if (e.refersTo(null)) {\n@@ -600,1 +604,1 @@\n-            if (h == e.hash && eq(k, e.get())) {\n+            if (h == e.hash && matchesKey(e, k)) {\n","filename":"src\/java.base\/share\/classes\/java\/util\/WeakHashMap.java","additions":14,"deletions":10,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -184,2 +184,1 @@\n-            ExecutorService executor = ref == null ? null : ref.get();\n-            if (executor != null) return true;\n+            if (ref != null && !ref.refersTo(null)) return true;\n@@ -188,2 +187,1 @@\n-                executor = ref == null ? null : ref.get();\n-                return executor != null;\n+                return ref != null && !ref.refersTo(null);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/logger\/BootstrapLogger.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -780,1 +780,1 @@\n-                if (ref.get() == null) {\n+                if (ref.refersTo(null)) {\n","filename":"src\/java.logging\/share\/classes\/java\/util\/logging\/LogManager.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2407,2 +2407,1 @@\n-                    Logger kid =  ref.get();\n-                    if (kid == this) {\n+                    if (ref.refersTo(this)) {\n","filename":"src\/java.logging\/share\/classes\/java\/util\/logging\/Logger.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2008, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -123,3 +123,4 @@\n-            IdentityWeakReference<?> wr = (IdentityWeakReference<?>) o;\n-            Object got = get();\n-            return (got != null && got == wr.get());\n+            @SuppressWarnings(\"unchecked\")\n+            IdentityWeakReference<T> wr = (IdentityWeakReference<T>) o;\n+            T got = get();\n+            return got != null && wr.refersTo(got);\n","filename":"src\/java.management\/share\/classes\/com\/sun\/jmx\/mbeanserver\/WeakIdentityHashMap.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"}]}