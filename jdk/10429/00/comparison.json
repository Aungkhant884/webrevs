{"files":[{"patch":"@@ -82,0 +82,8 @@\n+        if ((jeventType == MouseEvent.MOUSE_PRESSED) && (jbuttonNumber > MouseEvent.NOBUTTON)) {\n+            \/\/ 8294426: NSEvent.nsToJavaModifiers returns 0 on M2 MacBooks if the event is generated\n+            \/\/  via tapping (not pressing) on a trackpad\n+            \/\/  (System Preferences -> Trackpad -> Tap to click must be turned on).\n+            \/\/ So let's set the modifiers manually.\n+            jmodifiers |= MouseEvent.getMaskForButton(jbuttonNumber);\n+        }\n+\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CPlatformResponder.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,357 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, JetBrains s.r.o.. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8294426\n+ * @summary The test verifies that a press {@link java.awt.event.MouseEvent} contains correct modifiers although the according native mouse event is accompanied by no mouse modifiers.\n+ * @author Nikita.Provotorov@jetbrains.com\n+ *\n+ * @key headful\n+ * @requires (os.family == \"mac\")\n+ *\n+ * @modules java.desktop\/java.awt:open java.desktop\/sun.lwawt:open java.desktop\/sun.lwawt.macosx:+open\n+ * @run main\/othervm MouseMacTouchPressEventModifiers\n+ *\/\n+\n+import sun.lwawt.macosx.CocoaConstants;\n+import sun.lwawt.macosx.LWCToolkit;\n+\n+import javax.swing.*;\n+import java.awt.*;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.lang.reflect.Method;\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+\n+\/**\n+ * Sometimes native mouse events aren't accompanied by the correct mouse modifiers, i.e.\n+ *  {@link sun.lwawt.macosx.NSEvent#nsToJavaModifiers} returns 0 inside\n+ *  {@link sun.lwawt.macosx.CPlatformResponder#handleMouseEvent(int, int, int, int, int, int, int, int)}.\n+ * E.g. the situation above happens when a user taps (NOT clicks) on a trackpad on a M2 MacBooks while\n+ *  System Preferences -> Trackpad -> Tap to click is turned on.\n+ * The test emulates the situation via a direct invocation of\n+ *  {@link sun.lwawt.macosx.CPlatformResponder#handleMouseEvent(int, int, int, int, int, int, int, int)};\n+ *  unfortunately it's impossible to use {@link java.awt.Robot} because its mouse press events ARE accompanied\n+ *  by the correct modifiers ({@link sun.lwawt.macosx.NSEvent#nsToJavaModifiers} returns correct values).\n+ *\/\n+public class MouseMacTouchPressEventModifiers\n+{\n+    \/**\n+     * How it works:\n+     * 1. Send a native mouse press to {@code frame} via\n+     *    {@link sun.lwawt.macosx.CPlatformResponder#handleMouseEvent(int, int, int, int, int, int, int, int)}\n+     *    (using reflection).\n+     * 2. Wait (via {@link Future#get()}) until it generates a usual java MouseEvent\n+     *    and dispatches it to the MouseListener of the {@code frame}.\n+     * 3. Verify the dispatched MouseEvent contains correct modifiers, modifiersEx and button number.\n+     * 4. Do all the steps above but for a corresponding mouse release.\n+     *\/\n+    public static void main(String[] args) throws Throwable {\n+        \/\/ TreeMap to preserve the testing order\n+        final var testCases = new TreeMap<>(Map.of(\n+            CocoaConstants.kCGMouseButtonLeft, new MouseEventFieldsToTest(MouseEvent.BUTTON1_MASK, MouseEvent.BUTTON1_DOWN_MASK, MouseEvent.BUTTON1),\n+            CocoaConstants.kCGMouseButtonRight, new MouseEventFieldsToTest(MouseEvent.BUTTON3_MASK, MouseEvent.BUTTON3_DOWN_MASK, MouseEvent.BUTTON3),\n+            CocoaConstants.kCGMouseButtonCenter, new MouseEventFieldsToTest(MouseEvent.BUTTON2_MASK, MouseEvent.BUTTON2_DOWN_MASK, MouseEvent.BUTTON2)\n+        ));\n+\n+        SwingUtilities.invokeAndWait(MouseMacTouchPressEventModifiers::createAndShowGUI);\n+\n+        try {\n+            for (var testCase : testCases.entrySet()) {\n+                final var fieldsToTest = testCase.getValue();\n+\n+                final int mouseX = (frame.getWidth() - 1) \/ 2;\n+                final int mouseY = (frame.getHeight() - 1) \/ 2;\n+\n+                \/\/ press\n+\n+                MouseEvent event = frame.sendNativeMousePress(\n+                    0,\n+                    testCase.getKey(),\n+                    1,\n+                    mouseX,\n+                    mouseY\n+                ).get(500, TimeUnit.MILLISECONDS);\n+                System.out.println(\"A mouse press turned into: \" + event);\n+\n+                frame.checkInternalErrors();\n+\n+                checkMouseEvent(event,\n+                    MouseEvent.MOUSE_PRESSED, fieldsToTest.modifiers, fieldsToTest.pressModifiersEx, fieldsToTest.button);\n+\n+                \/\/ release\n+\n+                event = frame.sendNativeMouseRelease(\n+                    0,\n+                    testCase.getKey(),\n+                    1,\n+                    mouseX,\n+                    mouseY\n+                ).get(500, TimeUnit.MILLISECONDS);\n+                System.out.println(\"A mouse release turned into: \" + event);\n+\n+                frame.checkInternalErrors();\n+\n+                checkMouseEvent(event,\n+                    MouseEvent.MOUSE_RELEASED, fieldsToTest.modifiers, 0, fieldsToTest.button);\n+\n+                System.out.println();\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(MouseMacTouchPressEventModifiers::disposeGUI);\n+            System.out.flush();\n+        }\n+    }\n+\n+\n+    private record MouseEventFieldsToTest(int modifiers, int pressModifiersEx, int button) {}\n+\n+    private static MyFrame frame;\n+\n+    private static void createAndShowGUI() {\n+        frame = new MyFrame();\n+        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n+\n+        frame.pack();\n+        frame.setSize(800, 500);\n+\n+        frame.setLocationRelativeTo(null);\n+        frame.setAlwaysOnTop(true);\n+\n+        frame.setVisible(true);\n+    }\n+\n+    private static void disposeGUI() {\n+        if (frame != null) {\n+            frame.dispose();\n+        }\n+    }\n+\n+    private static void checkMouseEvent(MouseEvent me,\n+        int expectedId, int expectedModifiers, int expectedModifiersEx, int expectedButton\n+    ) {\n+        boolean wrong = false;\n+\n+        final var errMsg = new StringBuilder(1024);\n+        errMsg.append(\"Wrong MouseEvent \").append(me).append(':');\n+\n+        if (me.getID() != expectedId) {\n+            errMsg.append(\"\\n  eventId: expected <\").append(expectedId).append(\">, actual <\").append(me.getID()).append('>');\n+            wrong = true;\n+        }\n+        if (me.getModifiers() != expectedModifiers) {\n+            errMsg.append(\"\\n  modifiers: expected <\").append(expectedModifiers).append(\">, actual <\").append(me.getModifiers()).append('>');\n+            wrong = true;\n+        }\n+        if (me.getModifiersEx() != expectedModifiersEx) {\n+            errMsg.append(\"\\n  modifiersEx: expected <\").append(expectedModifiersEx).append(\">, actual <\").append(me.getModifiersEx()).append('>');\n+            wrong = true;\n+        }\n+        if (me.getButton() != expectedButton) {\n+            errMsg.append(\"\\n  button: expected <\").append(expectedButton).append(\">, actual <\").append(me.getButton()).append('>');\n+            wrong = true;\n+        }\n+\n+        if (wrong) {\n+            throw new IllegalArgumentException(errMsg.append('\\n').toString());\n+        }\n+    }\n+}\n+\n+\n+class MyFrame extends JFrame {\n+    public MyFrame() {\n+        addMouseListener(new MouseAdapter() {\n+            @Override\n+            public void mousePressed(MouseEvent e) {\n+                System.out.println(\"MyFrame::mousePressed: \" + e);\n+                keepPromiseVia(e);\n+            }\n+\n+            @Override\n+            public void mouseReleased(MouseEvent e) {\n+                System.out.println(\"MyFrame::mouseReleased: \" + e);\n+                keepPromiseVia(e);\n+            }\n+        });\n+    }\n+\n+    public Future<MouseEvent> sendNativeMousePress(int modifierFlags, int buttonNumber, int clickCount, int x, int y) {\n+        final int eventType = (buttonNumber == CocoaConstants.kCGMouseButtonLeft) ? CocoaConstants.NSLeftMouseDown\n+                              : (buttonNumber == CocoaConstants.kCGMouseButtonRight) ? CocoaConstants.NSRightMouseDown\n+                              : CocoaConstants.NSOtherMouseDown;\n+\n+        return sendNativeMouseEvent(eventType, modifierFlags, buttonNumber, clickCount, x, y, getX() + x, getY() + y);\n+    }\n+\n+    public Future<MouseEvent> sendNativeMouseRelease(int modifierFlags, int buttonNumber, int clickCount, int x, int y) {\n+        final int eventType = (buttonNumber == CocoaConstants.kCGMouseButtonLeft) ? CocoaConstants.NSLeftMouseUp\n+                              : (buttonNumber == CocoaConstants.kCGMouseButtonRight) ? CocoaConstants.NSRightMouseUp\n+                              : CocoaConstants.NSOtherMouseUp;\n+\n+        return sendNativeMouseEvent(eventType, modifierFlags, buttonNumber, clickCount, x, y, getX() + x, getY() + y);\n+    }\n+\n+    public void checkInternalErrors() throws Throwable {\n+        final Throwable result = internalError.getAndSet(null);\n+        if (result != null) {\n+            throw result;\n+        }\n+    }\n+\n+\n+    private final AtomicReference<CompletableFuture<MouseEvent>> mouseEventPromise = new AtomicReference<>(null);\n+\n+    private final AtomicReference<Throwable> internalError = new AtomicReference<>(null);\n+\n+    private Future<MouseEvent> sendNativeMouseEvent(\n+        final int eventType,\n+        final int modifierFlags,\n+        final int buttonNumber,\n+        final int clickCount,\n+        final int x,\n+        final int y,\n+        final int absX,\n+        final int absY\n+    ) {\n+        assert !SwingUtilities.isEventDispatchThread();\n+        assert mouseEventPromise.get() == null : \"Trying to send a mouse event while there is already a processing one\";\n+\n+        final CompletableFuture<MouseEvent> result = new CompletableFuture<>();\n+\n+        SwingUtilities.invokeLater(() -> {\n+            try {\n+                LWCToolkit.invokeLater(() -> {\n+                    try {\n+                        final Object thisPlatformResponder = obtainFramePlatformResponder(this);\n+                        final Method thisPlatformResponderHandleMouseEventMethod = obtainHandleMouseEventMethod(thisPlatformResponder);\n+\n+                        if (mouseEventPromise.compareAndExchange(null, result) != null) {\n+                            throw new IllegalStateException(\"Trying to send a mouse event while there is already a processing one\");\n+                        }\n+\n+                        thisPlatformResponderHandleMouseEventMethod.invoke(thisPlatformResponder,\n+                            eventType, modifierFlags, buttonNumber, clickCount, x, y, absX, absY);\n+                    } catch (Throwable err) {\n+                        \/\/ Remove the promise if thisPlatformResponderHandleMouseEventMethod.invoke(...) failed\n+                        mouseEventPromise.compareAndExchange(result, null);\n+                        failPromiseDueTo(result, err);\n+                    }\n+                }, this);\n+            } catch (Throwable err) {\n+                failPromiseDueTo(result, err);\n+            }\n+        });\n+\n+        return result;\n+    }\n+\n+    \/** Wraps {@link CompletableFuture#complete(Object)} *\/\n+    private void keepPromiseVia(MouseEvent mouseEvent) {\n+        try {\n+            final CompletableFuture<MouseEvent> promise = mouseEventPromise.getAndSet(null);\n+            if (promise == null) {\n+                throw new IllegalStateException(\"The following unexpected MouseEvent has arrived: \" + mouseEvent);\n+            }\n+\n+            if (!promise.complete(mouseEvent)) {\n+                throw new IllegalStateException(\"The promise had already been completed when the following MouseEvent arrived: \" + mouseEvent);\n+            }\n+        } catch (Throwable err) {\n+            setInternalError(err);\n+        }\n+    }\n+\n+    \/** Wraps {@link CompletableFuture#completeExceptionally(Throwable)} *\/\n+    private void failPromiseDueTo(CompletableFuture<MouseEvent> promise, Throwable cause) {\n+        try {\n+            if (!promise.completeExceptionally(cause)) {\n+                throw new IllegalStateException(\"The promise had already been completed when the following error arrived: \" + cause);\n+            }\n+        } catch (Throwable err) {\n+            setInternalError(err);\n+        }\n+    }\n+\n+    private void setInternalError(Throwable err) {\n+        if (internalError.compareAndExchange(null, err) != null) {\n+            System.err.println(\"Failed to set the following internal error because there is another one: \" + err);\n+        }\n+    }\n+\n+    \/** Obtains {@code component.peer.platformWindow.responder} *\/\n+    private static Object obtainFramePlatformResponder(Component component) throws NoSuchFieldException, IllegalAccessException {\n+        final Object framePeer;\n+        {\n+            final var frameClass = Component.class;\n+            final var peerField = frameClass.getDeclaredField(\"peer\");\n+\n+            peerField.setAccessible(true);\n+\n+            framePeer = peerField.get(component);\n+        }\n+\n+        final Object peerPlatformWindow;\n+        {\n+            final var peerClass = framePeer.getClass();\n+            final var platformWindowField = peerClass.getDeclaredField(\"platformWindow\");\n+\n+            platformWindowField.setAccessible(true);\n+\n+            peerPlatformWindow = platformWindowField.get(framePeer);\n+        }\n+\n+        final Object platformWindowResponder;\n+        {\n+            final var peerPlatformWindowClass = peerPlatformWindow.getClass();\n+            final var platformWindowResponderField = peerPlatformWindowClass.getDeclaredField(\"responder\");\n+\n+            platformWindowResponderField.setAccessible(true);\n+\n+            platformWindowResponder = platformWindowResponderField.get(peerPlatformWindow);\n+        }\n+\n+        return platformWindowResponder;\n+    }\n+\n+    \/** Obtains {@link sun.lwawt.macosx.CPlatformResponder#handleMouseEvent(int, int, int, int, int, int, int, int)} *\/\n+    private static Method obtainHandleMouseEventMethod(final Object platformResponder) throws NoSuchMethodException {\n+        final var responderClass = platformResponder.getClass();\n+        final var handleMouseEventMethod = responderClass.getDeclaredMethod(\n+            \"handleMouseEvent\",\n+            int.class, int.class, int.class, int.class, int.class, int.class, int.class, int.class\n+        );\n+\n+        handleMouseEventMethod.setAccessible(true);\n+\n+        return handleMouseEventMethod;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Mouse\/MacTouchPressEventModifiers\/MouseMacTouchPressEventModifiers.java","additions":357,"deletions":0,"binary":false,"changes":357,"status":"added"}]}