{"files":[{"patch":"@@ -245,4 +245,1 @@\n-  \/\/ On big endian platforms the jint is in the high part of the StackValue\n-  intptr_t val = sv_selector->get_int();\n-  jint selector = (jint)*((jint*)&val);\n-\n+  jint selector = sv_selector->get_jint();\n","filename":"src\/hotspot\/share\/code\/debugInfo.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -334,3 +334,3 @@\n-        intptr_t ret = st->get_int(); \/\/ read full 64-bit slot\n-        type = T_LONG;                \/\/ treat as long\n-        index--;                      \/\/ undo +1 in StackValueCollection::long_at\n+        intptr_t ret = st->get_intptr(); \/\/ read full 64-bit slot\n+        type = T_LONG;                   \/\/ treat as long\n+        index--;                         \/\/ undo +1 in StackValueCollection::long_at\n","filename":"src\/hotspot\/share\/prims\/stackwalk.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1189,6 +1189,6 @@\n-       case T_INT:     return IntegerBoxCache::singleton(THREAD)->lookup_raw(value->get_int(), cache_init_error);\n-       case T_CHAR:    return CharacterBoxCache::singleton(THREAD)->lookup_raw(value->get_int(), cache_init_error);\n-       case T_SHORT:   return ShortBoxCache::singleton(THREAD)->lookup_raw(value->get_int(), cache_init_error);\n-       case T_BYTE:    return ByteBoxCache::singleton(THREAD)->lookup_raw(value->get_int(), cache_init_error);\n-       case T_BOOLEAN: return BooleanBoxCache::singleton(THREAD)->lookup_raw(value->get_int(), cache_init_error);\n-       case T_LONG:    return LongBoxCache::singleton(THREAD)->lookup_raw(value->get_int(), cache_init_error);\n+       case T_INT:     return IntegerBoxCache::singleton(THREAD)->lookup_raw(value->get_intptr(), cache_init_error);\n+       case T_CHAR:    return CharacterBoxCache::singleton(THREAD)->lookup_raw(value->get_intptr(), cache_init_error);\n+       case T_SHORT:   return ShortBoxCache::singleton(THREAD)->lookup_raw(value->get_intptr(), cache_init_error);\n+       case T_BYTE:    return ByteBoxCache::singleton(THREAD)->lookup_raw(value->get_intptr(), cache_init_error);\n+       case T_BOOLEAN: return BooleanBoxCache::singleton(THREAD)->lookup_raw(value->get_intptr(), cache_init_error);\n+       case T_LONG:    return LongBoxCache::singleton(THREAD)->lookup_raw(value->get_intptr(), cache_init_error);\n@@ -1350,1 +1350,1 @@\n-      jlong res = (jlong)low->get_int();\n+      jlong res = (jlong)low->get_intptr();\n@@ -1352,1 +1352,1 @@\n-      jlong res = jlong_from((jint)value->get_int(), (jint)low->get_int());\n+      jlong res = jlong_from(value->get_jint(), low->get_jint());\n@@ -1358,1 +1358,0 @@\n-    \/\/ Have to cast to INT (32 bits) pointer to avoid little\/big-endian problem.\n@@ -1379,1 +1378,1 @@\n-        jlong res = (jlong)low->get_int();\n+        jlong res = (jlong)low->get_intptr();\n@@ -1381,1 +1380,1 @@\n-        jlong res = jlong_from((jint)value->get_int(), (jint)low->get_int());\n+        jlong res = jlong_from(value->get_jint(), low->get_jint());\n@@ -1383,2 +1382,2 @@\n-        obj->int_at_put(index, (jint)*((jint*)&res));\n-        obj->int_at_put(++index, (jint)*(((jint*)&res) + 1));\n+        obj->int_at_put(index, *(jint*)&res);\n+        obj->int_at_put(++index, *((jint*)&res + 1));\n@@ -1386,2 +1385,1 @@\n-        val = value->get_int();\n-        obj->int_at_put(index, (jint)*((jint*)&val));\n+        obj->int_at_put(index, value->get_jint());\n@@ -1394,2 +1392,1 @@\n-      val = value->get_int();\n-      obj->short_at_put(index, (jshort)*((jint*)&val));\n+      obj->short_at_put(index, (jshort)value->get_jint());\n@@ -1400,2 +1397,1 @@\n-      val = value->get_int();\n-      obj->char_at_put(index, (jchar)*((jint*)&val));\n+      obj->char_at_put(index, (jchar)value->get_jint());\n@@ -1406,2 +1402,0 @@\n-      \/\/ The value we get is erased as a regular int. We will need to find its actual byte count 'by hand'.\n-      val = value->get_int();\n@@ -1409,0 +1403,2 @@\n+      \/\/ The value we get is erased as a regular int. We will need to find its actual byte count 'by hand'.\n+      val = value->get_intptr();\n@@ -1417,1 +1413,1 @@\n-      obj->byte_at_put(index, (jbyte)*((jint*)&val));\n+      obj->byte_at_put(index, (jbyte)value->get_jint());\n@@ -1424,2 +1420,1 @@\n-      val = value->get_int();\n-      obj->bool_at_put(index, (jboolean)*((jint*)&val));\n+      obj->bool_at_put(index, (jboolean)value->get_jint());\n@@ -1478,1 +1473,0 @@\n-    intptr_t val;\n@@ -1489,1 +1483,0 @@\n-      \/\/ Have to cast to INT (32 bits) pointer to avoid little\/big-endian problem.\n@@ -1513,2 +1506,1 @@\n-          val = value->get_int();\n-          obj->int_field_put(offset, (jint)*((jint*)&val));\n+          obj->int_field_put(offset, value->get_jint());\n@@ -1524,1 +1516,1 @@\n-        jlong res = (jlong)low->get_int();\n+        jlong res = (jlong)low->get_intptr();\n@@ -1526,1 +1518,1 @@\n-        jlong res = jlong_from((jint)value->get_int(), (jint)low->get_int());\n+        jlong res = jlong_from(value->get_jint(), low->get_jint());\n@@ -1534,2 +1526,1 @@\n-        val = value->get_int();\n-        obj->short_field_put(offset, (jshort)*((jint*)&val));\n+        obj->short_field_put(offset, (jshort)value->get_jint());\n@@ -1540,2 +1531,1 @@\n-        val = value->get_int();\n-        obj->char_field_put(offset, (jchar)*((jint*)&val));\n+        obj->char_field_put(offset, (jchar)value->get_jint());\n@@ -1546,2 +1536,1 @@\n-        val = value->get_int();\n-        obj->byte_field_put(offset, (jbyte)*((jint*)&val));\n+        obj->byte_field_put(offset, (jbyte)value->get_jint());\n@@ -1552,2 +1541,1 @@\n-        val = value->get_int();\n-        obj->bool_field_put(offset, (jboolean)*((jint*)&val));\n+        obj->bool_field_put(offset, (jboolean)value->get_jint());\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":26,"deletions":38,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-  intptr_t get_int() const {\n+  intptr_t get_intptr() const {\n@@ -88,1 +88,1 @@\n-  intptr_t get_int(BasicType t) const {\n+  intptr_t get_intptr(BasicType t) const {\n@@ -93,1 +93,1 @@\n-  void set_int(intptr_t value) {\n+  void set_intptr(intptr_t value) {\n@@ -98,0 +98,12 @@\n+  \/\/ The jint value is always at offset 0 of the stack slot. On big endian platforms\n+  \/\/ this is the location of the high word therefore we cannot just cast to jint.\n+  jint get_jint() const {\n+    assert(type() == T_INT, \"type check\");\n+    return *(jint*)&_integer_value;\n+  }\n+\n+  void set_jint(jint value) {\n+    assert(type() == T_INT, \"type check\");\n+    *(jint*)&_integer_value = value;\n+  }\n+\n","filename":"src\/hotspot\/share\/runtime\/stackValue.hpp","additions":15,"deletions":3,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -29,3 +29,1 @@\n-  intptr_t val =  at(slot)->get_int();\n-  jint ival = *((jint*) (&val));\n-  return ival;\n+  return at(slot)->get_jint();\n@@ -36,1 +34,1 @@\n-  return at(slot+1)->get_int();\n+  return at(slot+1)->get_intptr();\n@@ -44,2 +42,2 @@\n-  value.array[0] = at(slot+1)->get_int();\n-  value.array[1] = at(slot  )->get_int();\n+  value.array[0] = at(slot+1)->get_intptr();\n+  value.array[1] = at(slot  )->get_intptr();\n@@ -55,1 +53,1 @@\n-  intptr_t res = at(slot)->get_int();\n+  intptr_t res = at(slot)->get_intptr();\n@@ -61,1 +59,1 @@\n-  intptr_t res = at(slot+1)->get_int();\n+  intptr_t res = at(slot+1)->get_intptr();\n@@ -70,2 +68,2 @@\n-  value.array[0] = at(slot+1)->get_int();\n-  value.array[1] = at(slot  )->get_int();\n+  value.array[0] = at(slot+1)->get_intptr();\n+  value.array[1] = at(slot  )->get_intptr();\n@@ -77,3 +75,1 @@\n-  intptr_t val;\n-  *((jint*) (&val)) = value;\n-  at(slot)->set_int(val);\n+  at(slot)->set_jint(value);\n@@ -84,1 +80,1 @@\n-  at(slot+1)->set_int(value);\n+  at(slot+1)->set_intptr(value);\n@@ -93,2 +89,2 @@\n-  at(slot+1)->set_int(x.array[0]);\n-  at(slot+0)->set_int(x.array[1]);\n+  at(slot+1)->set_intptr(x.array[0]);\n+  at(slot+0)->set_intptr(x.array[1]);\n@@ -111,1 +107,1 @@\n-  at(slot)->set_int(val.jd);\n+  at(slot)->set_intptr(val.jd);\n@@ -113,1 +109,1 @@\n-  at(slot)->set_int(*(jint*)(&value));\n+  at(slot)->set_intptr(*(jint*)(&value));\n@@ -119,1 +115,1 @@\n-  at(slot+1)->set_int(*(intptr_t*)(&value));\n+  at(slot+1)->set_intptr(*(intptr_t*)(&value));\n@@ -128,2 +124,2 @@\n-  at(slot+1)->set_int(x.array[0]);\n-  at(slot+0)->set_int(x.array[1]);\n+  at(slot+1)->set_intptr(x.array[0]);\n+  at(slot+0)->set_intptr(x.array[1]);\n","filename":"src\/hotspot\/share\/runtime\/stackValueCollection.cpp","additions":17,"deletions":21,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -456,1 +456,1 @@\n-      *addr = sv->get_int();\n+      *addr = sv->get_intptr();\n","filename":"src\/hotspot\/share\/runtime\/vframe.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -136,1 +136,1 @@\n-        _locals->add( new StackValue(value->get_int()));\n+        _locals->add( new StackValue(value->get_intptr()));\n@@ -163,1 +163,1 @@\n-        _expressions->add( new StackValue(value->get_int()));\n+        _expressions->add( new StackValue(value->get_intptr()));\n@@ -345,1 +345,1 @@\n-        *addr = value->get_int();\n+        *addr = value->get_intptr();\n@@ -353,1 +353,1 @@\n-        *addr = value->get_int(T_OBJECT);\n+        *addr = value->get_intptr(T_OBJECT);\n@@ -389,1 +389,1 @@\n-        *addr = value->get_int();\n+        *addr = value->get_intptr();\n@@ -397,1 +397,1 @@\n-        *addr = value->get_int(T_OBJECT);\n+        *addr = value->get_intptr(T_OBJECT);\n","filename":"src\/hotspot\/share\/runtime\/vframeArray.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}