{"files":[{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -161,0 +161,1 @@\n+JVM_LoadZipLibrary\n","filename":"make\/data\/hotspot-symbols\/symbols-unix","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -102,1 +102,2 @@\n-int ClassLoader::_libzip_loaded = 0;\n+int    ClassLoader::_libzip_loaded          = 0;\n+void*  ClassLoader::_zip_handle             = NULL;\n@@ -945,1 +946,0 @@\n-  void* handle = NULL;\n@@ -947,1 +947,1 @@\n-    handle = os::dll_load(path, ebuf, sizeof ebuf);\n+    _zip_handle = os::dll_load(path, ebuf, sizeof ebuf);\n@@ -949,1 +949,1 @@\n-  if (handle == NULL) {\n+  if (_zip_handle == NULL) {\n@@ -953,6 +953,6 @@\n-  ZipOpen = CAST_TO_FN_PTR(ZipOpen_t, dll_lookup(handle, \"ZIP_Open\", path));\n-  ZipClose = CAST_TO_FN_PTR(ZipClose_t, dll_lookup(handle, \"ZIP_Close\", path));\n-  FindEntry = CAST_TO_FN_PTR(FindEntry_t, dll_lookup(handle, \"ZIP_FindEntry\", path));\n-  ReadEntry = CAST_TO_FN_PTR(ReadEntry_t, dll_lookup(handle, \"ZIP_ReadEntry\", path));\n-  GetNextEntry = CAST_TO_FN_PTR(GetNextEntry_t, dll_lookup(handle, \"ZIP_GetNextEntry\", path));\n-  Crc32 = CAST_TO_FN_PTR(Crc32_t, dll_lookup(handle, \"ZIP_CRC32\", path));\n+  ZipOpen = CAST_TO_FN_PTR(ZipOpen_t, dll_lookup(_zip_handle, \"ZIP_Open\", path));\n+  ZipClose = CAST_TO_FN_PTR(ZipClose_t, dll_lookup(_zip_handle, \"ZIP_Close\", path));\n+  FindEntry = CAST_TO_FN_PTR(FindEntry_t, dll_lookup(_zip_handle, \"ZIP_FindEntry\", path));\n+  ReadEntry = CAST_TO_FN_PTR(ReadEntry_t, dll_lookup(_zip_handle, \"ZIP_ReadEntry\", path));\n+  GetNextEntry = CAST_TO_FN_PTR(GetNextEntry_t, dll_lookup(_zip_handle, \"ZIP_GetNextEntry\", path));\n+  Crc32 = CAST_TO_FN_PTR(Crc32_t, dll_lookup(_zip_handle, \"ZIP_CRC32\", path));\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -232,0 +232,3 @@\n+\n+  \/\/ cache the zip library handle\n+  static void* _zip_handle;\n@@ -256,1 +259,0 @@\n-  static inline void load_zip_library_if_needed();\n@@ -259,0 +261,2 @@\n+  static inline void load_zip_library_if_needed();\n+  static void* zip_library_handle() { return _zip_handle; }\n","filename":"src\/hotspot\/share\/classfile\/classLoader.hpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -153,0 +153,3 @@\n+JNIEXPORT void * JNICALL\n+JVM_LoadZipLibrary();\n+\n","filename":"src\/hotspot\/share\/include\/jvm.h","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-#include \"classfile\/classLoader.hpp\"\n+#include \"classfile\/classLoader.inline.hpp\"\n@@ -3376,0 +3376,5 @@\n+JVM_LEAF(void*, JVM_LoadZipLibrary())\n+  ClassLoader::load_zip_library_if_needed();\n+  return ClassLoader::zip_library_handle();\n+JVM_END\n+\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+#include \"jvm.h\"\n@@ -60,13 +61,1 @@\n-    void *addr = NULL;\n-#ifdef WIN32\n-    HMODULE handle = GetModuleHandle(\"zip.dll\");\n-    if (handle == NULL) {\n-      handle = LoadLibrary(\"zip.dll\");\n-    }\n-    if (handle == NULL) {\n-      return NULL;\n-    }\n-    addr = (void*) GetProcAddress(handle, name);\n-    return addr;\n-#else\n-    addr = dlopen(JNI_LIB_PREFIX \"zip\" JNI_LIB_SUFFIX, RTLD_GLOBAL|RTLD_LAZY);\n+    void *addr = JVM_LoadZipLibrary();\n@@ -76,2 +65,4 @@\n-    addr = dlsym(addr, name);\n-    return addr;\n+#ifdef WIN32\n+    return (void*) GetProcAddress(static_cast<HMODULE>(addr), name);\n+#else\n+    return dlsym(addr, name);\n","filename":"src\/java.base\/share\/native\/libjimage\/imageDecompressor.cpp","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"}]}