{"files":[{"patch":"@@ -44,0 +44,1 @@\n+#include \"runtime\/perfData.hpp\"\n@@ -954,1 +955,1 @@\n-\/\/\/ Checking dependencies:\n+\/\/\/ Checking dependencies\n@@ -1148,0 +1149,18 @@\n+  class CountingClassHierarchyIterator : public ClassHierarchyIterator {\n+   private:\n+    jlong _nof_steps;\n+   public:\n+    CountingClassHierarchyIterator(InstanceKlass* root) : ClassHierarchyIterator(root), _nof_steps(0) {}\n+\n+    void next() {\n+      _nof_steps++;\n+      ClassHierarchyIterator::next();\n+    }\n+\n+    ~CountingClassHierarchyIterator() {\n+      if (UsePerfData) {\n+        _perf_find_witness_anywhere_steps_count->inc(_nof_steps);\n+      }\n+    }\n+  };\n+\n@@ -1182,0 +1201,9 @@\n+\n+ private:\n+  static PerfCounter* _perf_find_witness_anywhere_calls_count;\n+  static PerfCounter* _perf_find_witness_anywhere_steps_count;\n+  static PerfCounter* _perf_find_witness_in_calls_count;\n+\n+ public:\n+  static void init();\n+  static void print_statistics();\n@@ -1184,39 +1212,13 @@\n-#ifndef PRODUCT\n-static int deps_find_witness_calls = 0;\n-static int deps_find_witness_steps = 0;\n-static int deps_find_witness_recursions = 0;\n-static int deps_find_witness_singles = 0;\n-static int deps_find_witness_print = 0; \/\/ set to -1 to force a final print\n-static bool count_find_witness_calls() {\n-  if (TraceDependencies || LogCompilation) {\n-    int pcount = deps_find_witness_print + 1;\n-    bool final_stats      = (pcount == 0);\n-    bool initial_call     = (pcount == 1);\n-    bool occasional_print = ((pcount & ((1<<10) - 1)) == 0);\n-    if (pcount < 0)  pcount = 1; \/\/ crude overflow protection\n-    deps_find_witness_print = pcount;\n-    if (TraceDependencies && VerifyDependencies && initial_call) {\n-      warning(\"TraceDependencies results may be inflated by VerifyDependencies\");\n-    }\n-    if (occasional_print || final_stats) {\n-      \/\/ Every now and then dump a little info about dependency searching.\n-      if (xtty != NULL) {\n-       ttyLocker ttyl;\n-       xtty->elem(\"deps_find_witness calls='%d' steps='%d' recursions='%d' singles='%d'\",\n-                   deps_find_witness_calls,\n-                   deps_find_witness_steps,\n-                   deps_find_witness_recursions,\n-                   deps_find_witness_singles);\n-      }\n-      if (final_stats || (TraceDependencies && WizardMode)) {\n-        ttyLocker ttyl;\n-        tty->print_cr(\"Dependency check (find_witness) \"\n-                      \"calls=%d, steps=%d (avg=%.1f), recursions=%d, singles=%d\",\n-                      deps_find_witness_calls,\n-                      deps_find_witness_steps,\n-                      (double)deps_find_witness_steps \/ deps_find_witness_calls,\n-                      deps_find_witness_recursions,\n-                      deps_find_witness_singles);\n-      }\n-    }\n-    return true;\n+PerfCounter* ClassHierarchyWalker::_perf_find_witness_anywhere_calls_count   = NULL;\n+PerfCounter* ClassHierarchyWalker::_perf_find_witness_anywhere_steps_count   = NULL;\n+PerfCounter* ClassHierarchyWalker::_perf_find_witness_in_calls_count = NULL;\n+\n+void ClassHierarchyWalker::init() {\n+  if (UsePerfData) {\n+    EXCEPTION_MARK;\n+    _perf_find_witness_anywhere_calls_count =\n+        PerfDataManager::create_counter(SUN_CI, \"findWitnessAnywhere\", PerfData::U_Events, CHECK);\n+    _perf_find_witness_anywhere_steps_count =\n+        PerfDataManager::create_counter(SUN_CI, \"findWitnessAnywhereSteps\", PerfData::U_Events, CHECK);\n+    _perf_find_witness_in_calls_count =\n+        PerfDataManager::create_counter(SUN_CI, \"findWitnessIn\", PerfData::U_Events, CHECK);\n@@ -1224,1 +1226,0 @@\n-  return false;\n@@ -1226,3 +1227,0 @@\n-#else\n-#define count_find_witness_calls() (0)\n-#endif \/\/PRODUCT\n@@ -1294,2 +1292,3 @@\n-  (void)count_find_witness_calls();\n-  NOT_PRODUCT(deps_find_witness_singles++);\n+  if (UsePerfData) {\n+    _perf_find_witness_in_calls_count->inc();\n+  }\n@@ -1335,1 +1334,3 @@\n-  bool do_counts = count_find_witness_calls();\n+  if (UsePerfData) {\n+    _perf_find_witness_anywhere_calls_count->inc();\n+  }\n@@ -1338,3 +1339,0 @@\n-  if (do_counts) {\n-    NOT_PRODUCT(deps_find_witness_calls++);\n-  }\n@@ -1365,1 +1363,1 @@\n-  for (ClassHierarchyIterator iter(context_type); !iter.done(); iter.next()) {\n+  for (CountingClassHierarchyIterator iter(context_type); !iter.done(); iter.next()) {\n@@ -1368,2 +1366,0 @@\n-    if (do_counts) { NOT_PRODUCT(deps_find_witness_steps++); }\n-\n@@ -1782,1 +1778,0 @@\n-#ifndef PRODUCT\n@@ -1784,4 +1779,22 @@\n-  if (deps_find_witness_print != 0) {\n-    \/\/ Call one final time, to flush out the data.\n-    deps_find_witness_print = -1;\n-    count_find_witness_calls();\n+  ClassHierarchyWalker::print_statistics();\n+}\n+\n+void ClassHierarchyWalker::print_statistics() {\n+  if (UsePerfData) {\n+    jlong deps_find_witness_calls   = _perf_find_witness_anywhere_calls_count->get_value();\n+    jlong deps_find_witness_steps   = _perf_find_witness_anywhere_steps_count->get_value();\n+    jlong deps_find_witness_singles = _perf_find_witness_in_calls_count->get_value();\n+\n+    ttyLocker ttyl;\n+    tty->print_cr(\"Dependency check (find_witness) \"\n+                  \"calls=\" JLONG_FORMAT \", steps=\" JLONG_FORMAT \" (avg=%.1f), singles=\" JLONG_FORMAT,\n+                  deps_find_witness_calls,\n+                  deps_find_witness_steps,\n+                  (double)deps_find_witness_steps \/ deps_find_witness_calls,\n+                  deps_find_witness_singles);\n+    if (xtty != NULL) {\n+      xtty->elem(\"deps_find_witness calls='\" JLONG_FORMAT \"' steps='\" JLONG_FORMAT \"' singles='\" JLONG_FORMAT \"'\",\n+                 deps_find_witness_calls,\n+                 deps_find_witness_steps,\n+                 deps_find_witness_singles);\n+    }\n@@ -1790,1 +1803,0 @@\n-#endif\n@@ -1798,0 +1810,4 @@\n+\n+void dependencies_init() {\n+  ClassHierarchyWalker::init();\n+}\n","filename":"src\/hotspot\/share\/code\/dependencies.cpp","additions":75,"deletions":59,"binary":false,"changes":134,"status":"modified"},{"patch":"@@ -617,1 +617,1 @@\n-  static void print_statistics() PRODUCT_RETURN;\n+  static void print_statistics();\n","filename":"src\/hotspot\/share\/code\/dependencies.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3970,0 +3970,6 @@\n+  if (TraceDependencies && VerifyDependencies) {\n+    if (!FLAG_IS_DEFAULT(TraceDependencies)) {\n+      warning(\"TraceDependencies results may be inflated by VerifyDependencies\");\n+    }\n+  }\n+\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -88,0 +88,1 @@\n+void dependencies_init();\n@@ -146,0 +147,1 @@\n+  dependencies_init();\n","filename":"src\/hotspot\/share\/runtime\/init.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}