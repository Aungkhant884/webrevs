{"files":[{"patch":"@@ -152,2 +152,1 @@\n-    index = LinkResolver::vtable_index_of_interface_method(resolved_klass,\n-                           _resolved_method);\n+    index = LinkResolver::vtable_index_of_interface_method(resolved_klass, _resolved_method);\n@@ -408,6 +407,1 @@\n-int LinkResolver::vtable_index_of_interface_method(Klass* klass,\n-                                                   const methodHandle& resolved_method) {\n-\n-  int vtable_index = Method::invalid_vtable_index;\n-  Symbol* name = resolved_method->name();\n-  Symbol* signature = resolved_method->signature();\n+int LinkResolver::vtable_index_of_interface_method(Klass* klass, const methodHandle& resolved_method) {\n@@ -415,18 +409,1 @@\n-\n-  \/\/ First check in default method array\n-  if (!resolved_method->is_abstract() && ik->default_methods() != NULL) {\n-    int index = InstanceKlass::find_method_index(ik->default_methods(),\n-                                                 name, signature,\n-                                                 Klass::OverpassLookupMode::find,\n-                                                 Klass::StaticLookupMode::find,\n-                                                 Klass::PrivateLookupMode::find);\n-    if (index >= 0 ) {\n-      vtable_index = ik->default_vtable_indices()->at(index);\n-    }\n-  }\n-  if (vtable_index == Method::invalid_vtable_index) {\n-    \/\/ get vtable_index for miranda methods\n-    klassVtable vt = ik->vtable();\n-    vtable_index = vt.index_of_miranda(name, signature);\n-  }\n-  return vtable_index;\n+  return ik->vtable_index_of_interface_method(resolved_method());\n","filename":"src\/hotspot\/share\/interpreter\/linkResolver.cpp","additions":3,"deletions":26,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -3195,0 +3195,28 @@\n+int InstanceKlass::vtable_index_of_interface_method(Method* intf_method) {\n+  assert(this->is_linked(), \"required\");\n+  assert(intf_method->method_holder()->is_interface(), \"not an interface method\");\n+  assert(this->is_subtype_of(intf_method->method_holder()), \"interface not implemented\");\n+\n+  int vtable_index = Method::invalid_vtable_index;\n+  Symbol* name = intf_method->name();\n+  Symbol* signature = intf_method->signature();\n+\n+  \/\/ First check in default method array\n+  if (!intf_method->is_abstract() && this->default_methods() != NULL) {\n+    int index = InstanceKlass::find_method_index(this->default_methods(),\n+                                                 name, signature,\n+                                                 Klass::OverpassLookupMode::find,\n+                                                 Klass::StaticLookupMode::find,\n+                                                 Klass::PrivateLookupMode::find);\n+    if (index >= 0 ) {\n+      vtable_index = this->default_vtable_indices()->at(index);\n+    }\n+  }\n+  if (vtable_index == Method::invalid_vtable_index) {\n+    \/\/ get vtable_index for miranda methods\n+    klassVtable vt = this->vtable();\n+    vtable_index = vt.index_of_miranda(name, signature);\n+  }\n+  return vtable_index;\n+}\n+\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -1113,0 +1113,1 @@\n+  int vtable_index_of_interface_method(Method* method);\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}