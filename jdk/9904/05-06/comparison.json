{"files":[{"patch":"@@ -142,2 +142,2 @@\n-  ConstraintSet* entry = _loader_constraint_table.get(name);\n-  if (entry == nullptr) {\n+  ConstraintSet* set = _loader_constraint_table.get(name);\n+  if (set == nullptr) {\n@@ -149,2 +149,2 @@\n-  for (int i = 0; i < entry->num_constraints(); i++) {\n-    LoaderConstraint* p = entry->constraint_at(i);\n+  for (int i = 0; i < set->num_constraints(); i++) {\n+    LoaderConstraint* p = set->constraint_at(i);\n@@ -172,1 +172,1 @@\n-  ConstraintSet* entry = _loader_constraint_table.put_if_absent(name, &created);\n+  ConstraintSet* set = _loader_constraint_table.put_if_absent(name, &created);\n@@ -176,1 +176,1 @@\n-    entry->initialize(constraint);\n+    set->initialize(constraint);\n@@ -178,1 +178,1 @@\n-    entry->add_constraint(constraint);\n+    set->add_constraint(constraint);\n@@ -184,1 +184,1 @@\n-  bool do_entry(Symbol*& name, ConstraintSet& entry) {\n+  bool do_entry(Symbol*& name, ConstraintSet& set) {\n@@ -186,1 +186,1 @@\n-    int len = entry.num_constraints();\n+    int len = set.num_constraints();\n@@ -188,1 +188,1 @@\n-      LoaderConstraint* probe = entry.constraint_at(i);\n+      LoaderConstraint* probe = set.constraint_at(i);\n@@ -227,1 +227,1 @@\n-      \/\/ Check whether entry should be purged\n+      \/\/ Check whether the set should be purged\n@@ -235,1 +235,1 @@\n-        entry.remove_constraint(probe);\n+        set.remove_constraint(probe);\n@@ -244,1 +244,1 @@\n-    if (entry.num_constraints() == 0) {\n+    if (set.num_constraints() == 0) {\n@@ -249,1 +249,1 @@\n-    \/\/ Don't unlink this entry\n+    \/\/ Don't unlink this set\n@@ -420,1 +420,1 @@\n-    \/\/ do we care about duplicates???\n+    \/\/ We don't seem to care about duplicates.\n@@ -451,3 +451,3 @@\n-  \/\/ Remove src from entry\n-  ConstraintSet* entry = _loader_constraint_table.get(class_name);\n-  entry->remove_constraint(src);\n+  \/\/ Remove src from set\n+  ConstraintSet* set = _loader_constraint_table.get(class_name);\n+  set->remove_constraint(src);\n@@ -457,3 +457,3 @@\n-  auto check = [&] (Symbol*& key, ConstraintSet& entry) {\n-    \/\/ foreach constraint in entry, check the klass is in the dictionary or placeholder table.\n-    int len = entry.num_constraints();\n+  auto check = [&] (Symbol*& key, ConstraintSet& set) {\n+    \/\/ foreach constraint in the set, check the klass is in the dictionary or placeholder table.\n+    int len = set.num_constraints();\n@@ -461,1 +461,1 @@\n-      LoaderConstraint* probe = entry.constraint_at(i);\n+      LoaderConstraint* probe = set.constraint_at(i);\n@@ -495,2 +495,2 @@\n-  auto size = [&] (Symbol*& key, ConstraintSet& entry) {\n-    \/\/ sizeof entry is included in the size of the hashtable node\n+  auto size = [&] (Symbol*& key, ConstraintSet& set) {\n+    \/\/ sizeof set is included in the size of the hashtable node\n@@ -498,1 +498,1 @@\n-    int len = entry.num_constraints();\n+    int len = set.num_constraints();\n@@ -500,1 +500,1 @@\n-      LoaderConstraint* probe = entry.constraint_at(i);\n+      LoaderConstraint* probe = set.constraint_at(i);\n@@ -511,2 +511,2 @@\n-  auto printer = [&] (Symbol*& key, ConstraintSet& entry) {\n-    int len = entry.num_constraints();\n+  auto printer = [&] (Symbol*& key, ConstraintSet& set) {\n+    int len = set.num_constraints();\n@@ -514,1 +514,1 @@\n-      LoaderConstraint* probe = entry.constraint_at(i);\n+      LoaderConstraint* probe = set.constraint_at(i);\n","filename":"src\/hotspot\/share\/classfile\/loaderConstraints.cpp","additions":29,"deletions":29,"binary":false,"changes":58,"status":"modified"}]}