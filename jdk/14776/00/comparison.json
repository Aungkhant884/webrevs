{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -241,1 +241,0 @@\n-                    int result;\n@@ -243,9 +242,1 @@\n-                    if ((utils.isModule(e1) || utils.isPackage(e1)) && (utils.isModule(e2) || utils.isPackage(e2))) {\n-                        result = compareFullyQualifiedNames(e1, e2);\n-                    } else if (utils.isModule(e1) || utils.isPackage(e1)) {\n-                        result = utils.compareStrings(utils.getFullyQualifiedName(e1), utils.getSimpleName(e2));\n-                    } else if (utils.isModule(e2) || utils.isPackage(e2)) {\n-                        result = utils.compareStrings(utils.getSimpleName(e1), utils.getFullyQualifiedName(e2));\n-                    } else {\n-                        result = compareNames(e1, e2);\n-                    }\n+                    int result = utils.compareStrings(getIndexElementKey(e1), getIndexElementKey(e2));\n@@ -277,0 +268,14 @@\n+    \/**\n+     * {@return the element's primary key for use in the index comparator}\n+     * This method can be used by other comparators which need to produce results\n+     * that are consistent with the index comparator.\n+     *\n+     * @param element an element\n+     *\/\n+    public String getIndexElementKey(Element element) {\n+        return switch (element.getKind()) {\n+            case MODULE, PACKAGE -> utils.getFullyQualifiedName(element);\n+            default -> utils.getSimpleName(element);\n+        };\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/Comparators.java","additions":16,"deletions":11,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -122,1 +122,1 @@\n-        mainComparator = makeIndexComparator(classesOnly);\n+        mainComparator = classesOnly ? makeClassComparator() : makeIndexComparator();\n@@ -313,0 +313,7 @@\n+    \/**\n+     * Returns a comparator for the all-classes list.\n+     * @return a comparator for class element items\n+     *\/\n+    private Comparator<IndexItem> makeClassComparator() {\n+        return Comparator.comparing(IndexItem::getElement, utils.comparators.makeAllClassesComparator());\n+    }\n@@ -321,7 +328,9 @@\n-    private Comparator<IndexItem> makeIndexComparator(boolean classesOnly) {\n-        Comparator<Element> elementComparator = classesOnly\n-                ? utils.comparators.makeAllClassesComparator()\n-                : utils.comparators.makeIndexElementComparator();\n-\n-        Comparator<IndexItem> labelComparator =\n-                (ii1, ii2) -> utils.compareStrings(ii1.getLabel(), ii2.getLabel());\n+    private Comparator<IndexItem> makeIndexComparator() {\n+        \/\/ We create comparators specific to element and search tag items, and a\n+        \/\/ base comparator used to compare between the two kinds of items.\n+        \/\/ In order to produce consistent results, it is important that the base comparator\n+        \/\/ uses the same primary sort keys as both the element and search tag comparators\n+        \/\/ (see JDK-8311264).\n+        Comparator<Element> elementComparator = utils.comparators.makeIndexElementComparator();\n+        Comparator<IndexItem> baseComparator =\n+                (ii1, ii2) -> utils.compareStrings(getIndexItemKey(ii1), getIndexItemKey(ii2));\n@@ -329,1 +338,1 @@\n-                labelComparator\n+                baseComparator\n@@ -353,1 +362,1 @@\n-            \/\/ If one is an element item, compare labels; if equal, put element item last\n+            \/\/ If one is an element item, compare item keys; if equal, put element item last\n@@ -355,1 +364,1 @@\n-                int d = labelComparator.compare(ii1, ii2);\n+                int d = baseComparator.compare(ii1, ii2);\n@@ -364,0 +373,8 @@\n+    private String getIndexItemKey(IndexItem ii) {\n+        \/\/ For element items return the key used by the element comparator;\n+        \/\/ for search tag items return the item's label.\n+        return ii.isElementItem()\n+                ? utils.comparators.getIndexElementKey(ii.getElement())\n+                : ii.getLabel();\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/IndexBuilder.java","additions":29,"deletions":12,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+ *           8311264\n@@ -53,1 +54,11 @@\n-        checkOutput(\"index-all.html\", true,\n+        checkOrder(\"index-all.html\",\n+                \"\"\"\n+                    <a href=\"pkg\/AnnotationType.html\" class=\"type-name-link\" title=\"annotation inter\\\n+                    face in pkg\">AnnotationType<\/a> - Annotation Interface in <a href=\"pkg\/package-s\\\n+                    ummary.html\">pkg<\/a>\"\"\",\n+                \"\"\"\n+                    <a href=\"pkg\/C.html#c()\" class=\"member-name-link\">c()<\/a> - Method in class pkg.\\\n+                    <a href=\"pkg\/C.html\" title=\"class in pkg\">C<\/a>\"\"\",\n+                \"\"\"\n+                    <a href=\"pkg\/C.html#c-heading\" class=\"search-tag-link\">C<\/a> - Search tag in cla\\\n+                    ss pkg.C\"\"\",\n@@ -58,2 +69,2 @@\n-                    <a href=\"pkg\/Interface.html\" class=\"type-name-link\" title=\"interface in pkg\">Int\\\n-                    erface<\/a> - Interface in <a href=\"pkg\/package-summary.html\">pkg<\/a>\"\"\",\n+                    <a href=\"pkg\/C.html#%3Cinit%3E()\" class=\"member-name-link\">C()<\/a> - Constructor\\\n+                     for class pkg.<a href=\"pkg\/C.html\" title=\"class in pkg\">C<\/a>\"\"\",\n@@ -61,3 +72,11 @@\n-                    <a href=\"pkg\/AnnotationType.html\" class=\"type-name-link\" title=\"annotation inter\\\n-                    face in pkg\">AnnotationType<\/a> - Annotation Interface in <a href=\"pkg\/package-s\\\n-                    ummary.html\">pkg<\/a>\"\"\",\n+                    <a href=\"pkg\/C.html#%3Cinit%3E(int)\" class=\"member-name-link\">C(int)<\/a> - Const\\\n+                    ructor for class pkg.<a href=\"pkg\/C.html\" title=\"class in pkg\">C<\/a>\"\"\",\n+                \"\"\"\n+                    <a href=\"pkg\/C.html#c_()\" class=\"member-name-link\">c_()<\/a> - Method in class pk\\\n+                    g.<a href=\"pkg\/C.html\" title=\"class in pkg\">C<\/a>\"\"\",\n+                \"\"\"\n+                    <a href=\"pkg\/C.html#c\/d\" class=\"search-tag-link\">c\/d<\/a> - Search tag in class p\\\n+                    kg.C\"\"\",\n+                \"\"\"\n+                    <a href=\"pkg\/C.html#c-d-heading\" class=\"search-tag-link\">C\/D<\/a> - Search tag in\\\n+                     class pkg.C\"\"\",\n@@ -68,1 +87,5 @@\n-                    Class in <a href=\"package-summary.html\">Unnamed Package<\/a>\"\"\",\n+                    <dt><a href=\"pkg\/Coin.html#Enum\" class=\"search-tag-link\">Enum<\/a> - Search tag i\\\n+                    n enum class pkg.Coin<\/dt>\"\"\",\n+                \"\"\"\n+                    <a href=\"pkg\/Interface.html\" class=\"type-name-link\" title=\"interface in pkg\">Int\\\n+                    erface<\/a> - Interface in <a href=\"pkg\/package-summary.html\">pkg<\/a>\"\"\",\n@@ -79,1 +102,1 @@\n-                    <dt><a href=\"pkg\/Coin.html#Enum\" class=\"search-tag-link\">Enum<\/a> - Search tag in enum class pkg.Coin<\/dt>\"\"\");\n+                    Class in <a href=\"package-summary.html\">Unnamed Package<\/a>\"\"\");\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testIndex\/TestIndex.java","additions":32,"deletions":9,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,13 @@\n+\/**\n+ * A class to test sorting of index items.\n+ *\n+ * <h2>C<\/h2>\n+ *\n+ * Section \"C\" should appear right before language elements with the same name.\n+ *\n+ * <h3>C\/D<\/h3>\n+ *\n+ * Section \"C\/D\" should appear after items named \"C\" in the index.\n+ *\n+ * {@index c\/d should appear before the section above}\n+ *\/\n@@ -28,3 +41,24 @@\n-    \/\/Test that Java appears before JDK in the index.  The fact\n-    \/\/that 'D' is uppercase and 'a' is lowercase should make no difference\n-    \/\/in ordering.\n+    \/**\n+     * Empty constructor.\n+     *\/\n+    public C() {}\n+\n+    \/**\n+     * Constructor with a parameter.\n+     * @param i an int\n+     *\/\n+    public C(int i) {}\n+\n+    \/**\n+     * Lower case \"c\" method should appear before upper case \"C\" elements and sections in index.\n+     *\/\n+    public void c() {}\n+\n+    \/**\n+     * Should appear after all items named \"c\" or \"C\".\n+     *\/\n+    public void c_() {}\n+\n+    \/\/ Test that Java appears before JDK in the index.  The fact\n+    \/\/ that 'D' is uppercase and 'a' is lowercase should make no difference\n+    \/\/ in ordering.\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testIndex\/pkg\/C.java","additions":38,"deletions":4,"binary":false,"changes":42,"status":"modified"}]}