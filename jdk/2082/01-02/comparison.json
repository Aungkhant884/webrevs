{"files":[{"patch":"@@ -36,0 +36,3 @@\n+    \/**\n+     * Creates a non-blocking eventfd object with initial value zero.\n+     *\/\n@@ -37,1 +40,1 @@\n-        efd = eventfd0(0, false);\n+        efd = eventfd0();\n@@ -45,1 +48,1 @@\n-        write0(efd, 1L);\n+        IOUtil.write(efd, 1L);\n@@ -49,1 +52,1 @@\n-        read0(efd);\n+        IOUtil.drain(efd);\n@@ -56,8 +59,1 @@\n-    static native int eventfd0(long initval, boolean isBlocking)\n-        throws IOException;\n-\n-    static native void write0(int efd, long value)\n-        throws IOException;\n-\n-    static native long read0(int efd)\n-        throws IOException;\n+    static native int eventfd0() throws IOException;\n","filename":"src\/java.base\/linux\/classes\/sun\/nio\/ch\/EventFD.java","additions":7,"deletions":11,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -38,2 +38,1 @@\n-Java_sun_nio_ch_EventFD_eventfd0(JNIEnv *env, jclass klazz,\n-                                 jlong initval, jboolean blocking)\n+Java_sun_nio_ch_EventFD_eventfd0(JNIEnv *env, jclass klazz)\n@@ -41,2 +40,1 @@\n-    int flags = blocking == JNI_TRUE ? 0 : EFD_NONBLOCK;\n-    int efd = eventfd((uint64_t)initval, flags);\n+    int efd = eventfd((uint64_t)0, EFD_NONBLOCK);\n@@ -49,26 +47,0 @@\n-\n-JNIEXPORT void JNICALL\n-Java_sun_nio_ch_EventFD_write0(JNIEnv *env, jclass klazz,\n-                               jint efd, jlong jvalue)\n-{\n-    uint64_t value = (uint64_t)jvalue;\n-    int res = write((int)efd, &value, sizeof(uint64_t));\n-    if (res == -1) {\n-        JNU_ThrowIOExceptionWithLastError(env, \"write failed\");\n-    } else if (res != 8) {\n-        JNU_ThrowInternalError(env, \"write did not return 8\");\n-    }\n-}\n-\n-JNIEXPORT jlong JNICALL\n-Java_sun_nio_ch_EventFD_read0(JNIEnv *env, jclass klazz, jint efd)\n-{\n-    uint64_t value;\n-    int res = read((int)efd, &value, sizeof(uint64_t));\n-    if (res == -1 && errno != EAGAIN) {\n-        JNU_ThrowIOExceptionWithLastError(env, \"read failed\");\n-    } else if (res != -1 && res != 8) {\n-        JNU_ThrowInternalError(env, \"read did not return 8\");\n-    }\n-    return (jlong)value;\n-}\n","filename":"src\/java.base\/linux\/native\/libnio\/ch\/EventFD.c","additions":2,"deletions":30,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -404,0 +404,2 @@\n+    static native int write(int fd, long value) throws IOException;\n+\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/IOUtil.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -112,0 +112,7 @@\n+}\n+\n+JNIEXPORT jint JNICALL\n+Java_sun_nio_ch_IOUtil_write(JNIEnv *env, jclass cl, jint fd, jlong value)\n+{\n+    long buf = (long)value;\n+    return convertReturnVal(env, write(fd, &buf, sizeof(long)), JNI_FALSE);\n","filename":"src\/java.base\/unix\/native\/libnio\/ch\/IOUtil.c","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"}]}