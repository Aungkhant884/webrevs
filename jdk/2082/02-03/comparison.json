{"files":[{"patch":"@@ -41,0 +41,1 @@\n+        IOUtil.configureBlocking(IOUtil.newFD(efd), false);\n@@ -48,1 +49,1 @@\n-        IOUtil.write(efd, 1L);\n+        set0(efd);\n@@ -61,0 +62,9 @@\n+    \/**\n+     * Writes the value 1 to the eventfd object as a long in the\n+     * native byte order of the platform.\n+     *\n+     * @param the integral eventfd file descriptor\n+     * @return the number of bytes written; should equal 8\n+     *\/\n+    static native int set0(int efd) throws IOException;\n+\n","filename":"src\/java.base\/linux\/classes\/sun\/nio\/ch\/EventFD.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-    int efd = eventfd((uint64_t)0, EFD_NONBLOCK);\n+    int efd = eventfd((uint64_t)0, 0);\n@@ -47,0 +47,8 @@\n+\n+JNIEXPORT jint JNICALL\n+Java_sun_nio_ch_EventFD_set0(JNIEnv *env, jclass klazz, jint efd)\n+{\n+    long one = 1L;\n+    return convertReturnVal(env, write(efd, (void*)&one, sizeof(long)),\n+        JNI_FALSE);\n+}\n","filename":"src\/java.base\/linux\/native\/libnio\/ch\/EventFD.c","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -404,2 +404,0 @@\n-    static native int write(int fd, long value) throws IOException;\n-\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/IOUtil.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n@@ -112,7 +112,0 @@\n-}\n-\n-JNIEXPORT jint JNICALL\n-Java_sun_nio_ch_IOUtil_write(JNIEnv *env, jclass cl, jint fd, jlong value)\n-{\n-    long buf = (long)value;\n-    return convertReturnVal(env, write(fd, &buf, sizeof(long)), JNI_FALSE);\n","filename":"src\/java.base\/unix\/native\/libnio\/ch\/IOUtil.c","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 2014, Oracle America, Inc.\n+ * All rights reserved.\n+ *\n+ * Redistribution and use in source and binary forms, with or without\n+ * modification, are permitted provided that the following conditions are met:\n+ *\n+ *  * Redistributions of source code must retain the above copyright notice,\n+ *    this list of conditions and the following disclaimer.\n+ *\n+ *  * Redistributions in binary form must reproduce the above copyright\n+ *    notice, this list of conditions and the following disclaimer in the\n+ *    documentation and\/or other materials provided with the distribution.\n+ *\n+ *  * Neither the name of Oracle nor the names of its contributors may be used\n+ *    to endorse or promote products derived from this software without\n+ *    specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n+ * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n+ * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n+ * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n+ * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n+ * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n+ * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n+ * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n+ * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n+ * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n+ * THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+\n+package org.openjdk.bench.java.nio;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+\n+import java.io.*;\n+import java.net.*;\n+import java.nio.*;\n+import java.nio.channels.*;\n+\n+\/**\n+ * Benchmark for the Selector wakeup mechanism. Intended primarily for the\n+ * epoll(2)-based implementation on Linux.\n+ *\/\n+@State(Scope.Thread)\n+public class SelectorWakeup {\n+    private Selector sel;\n+\n+    @Setup(Level.Iteration)\n+    public void setup() throws IOException {\n+        sel = Selector.open();\n+    }\n+\n+    @Benchmark\n+    public int test() throws IOException {\n+        return sel.wakeup().select();\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/nio\/SelectorWakeup.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"}]}