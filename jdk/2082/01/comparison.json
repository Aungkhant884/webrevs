{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,3 +61,2 @@\n-    \/\/ file descriptors used for interrupt\n-    private final int fd0;\n-    private final int fd1;\n+    \/\/ eventfd object used for interrupt\n+    private final EventFD eventfd;\n@@ -83,3 +82,1 @@\n-            long fds = IOUtil.makePipe(false);\n-            this.fd0 = (int) (fds >>> 32);\n-            this.fd1 = (int) fds;\n+            this.eventfd = new EventFD();\n@@ -93,1 +90,1 @@\n-        EPoll.ctl(epfd, EPOLL_CTL_ADD, fd0, EPOLLIN);\n+        EPoll.ctl(epfd, EPOLL_CTL_ADD, eventfd.efd(), EPOLLIN);\n@@ -191,1 +188,1 @@\n-            if (fd == fd0) {\n+            if (fd == eventfd.efd()) {\n@@ -221,2 +218,1 @@\n-        FileDispatcherImpl.closeIntFD(fd0);\n-        FileDispatcherImpl.closeIntFD(fd1);\n+        eventfd.close();\n@@ -254,1 +250,1 @@\n-                    IOUtil.write1(fd1, (byte)0);\n+                    eventfd.set();\n@@ -266,1 +262,1 @@\n-            IOUtil.drain(fd0);\n+            eventfd.reset();\n","filename":"src\/java.base\/linux\/classes\/sun\/nio\/ch\/EPollSelectorImpl.java","additions":9,"deletions":13,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package sun.nio.ch;\n+\n+import java.io.IOException;\n+\n+\/*\n+ * Provides access to the Linux eventfd object.\n+ *\/\n+final class EventFD {\n+    private final int efd;\n+\n+    EventFD() throws IOException {\n+        efd = eventfd0(0, false);\n+    }\n+\n+    int efd() {\n+        return efd;\n+    }\n+\n+    void set() throws IOException {\n+        write0(efd, 1L);\n+    }\n+\n+    void reset() throws IOException {\n+        read0(efd);\n+    }\n+\n+    void close() throws IOException {\n+        FileDispatcherImpl.closeIntFD(efd);\n+    }\n+\n+    static native int eventfd0(long initval, boolean isBlocking)\n+        throws IOException;\n+\n+    static native void write0(int efd, long value)\n+        throws IOException;\n+\n+    static native long read0(int efd)\n+        throws IOException;\n+\n+    static {\n+        IOUtil.load();\n+    }\n+}\n","filename":"src\/java.base\/linux\/classes\/sun\/nio\/ch\/EventFD.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+ #include <sys\/eventfd.h>\n+\n+#include \"jni.h\"\n+#include \"jni_util.h\"\n+#include \"jvm.h\"\n+#include \"jlong.h\"\n+#include \"nio.h\"\n+#include \"nio_util.h\"\n+\n+#include \"sun_nio_ch_EventFD.h\"\n+\n+JNIEXPORT jint JNICALL\n+Java_sun_nio_ch_EventFD_eventfd0(JNIEnv *env, jclass klazz,\n+                                 jlong initval, jboolean blocking)\n+{\n+    int flags = blocking == JNI_TRUE ? 0 : EFD_NONBLOCK;\n+    int efd = eventfd((uint64_t)initval, flags);\n+    if (efd == -1) {\n+        JNU_ThrowIOExceptionWithLastError(env, \"eventfd failed\");\n+        return IOS_THROWN;\n+    }\n+    return efd;\n+}\n+\n+JNIEXPORT void JNICALL\n+Java_sun_nio_ch_EventFD_write0(JNIEnv *env, jclass klazz,\n+                               jint efd, jlong jvalue)\n+{\n+    uint64_t value = (uint64_t)jvalue;\n+    int res = write((int)efd, &value, sizeof(uint64_t));\n+    if (res == -1) {\n+        JNU_ThrowIOExceptionWithLastError(env, \"write failed\");\n+    } else if (res != 8) {\n+        JNU_ThrowInternalError(env, \"write did not return 8\");\n+    }\n+}\n+\n+JNIEXPORT jlong JNICALL\n+Java_sun_nio_ch_EventFD_read0(JNIEnv *env, jclass klazz, jint efd)\n+{\n+    uint64_t value;\n+    int res = read((int)efd, &value, sizeof(uint64_t));\n+    if (res == -1 && errno != EAGAIN) {\n+        JNU_ThrowIOExceptionWithLastError(env, \"read failed\");\n+    } else if (res != -1 && res != 8) {\n+        JNU_ThrowInternalError(env, \"read did not return 8\");\n+    }\n+    return (jlong)value;\n+}\n","filename":"src\/java.base\/linux\/native\/libnio\/ch\/EventFD.c","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"}]}