{"files":[{"patch":"@@ -127,2 +127,10 @@\n-                tags = removeTagsMatchingBasicZeroRange(zeroRanges, tags);\n-                return new ArrayList<String>(tags);\n+                for (String tag : tags) {\n+                    String lowerCaseTag = tag.toLowerCase(Locale.ROOT);\n+\n+                    if (!caseInsensitiveMatch(list, lowerCaseTag)\n+                            && !shouldIgnoreFilterBasicMatch(zeroRanges, lowerCaseTag)) {\n+                        list.add(tag);\n+                    }\n+                }\n+\n+                break;\n@@ -151,27 +159,0 @@\n-    \/**\n-     * Removes the tag(s) which are falling in the basic exclusion range(s) i.e\n-     * range(s) with q=0 and returns the updated collection. If the basic\n-     * language ranges contains '*' as one of its non zero range then instead of\n-     * returning all the tags, remove those which are matching the range with\n-     * quality weight q=0.\n-     *\/\n-    private static Collection<String> removeTagsMatchingBasicZeroRange(\n-            List<LanguageRange> zeroRange, Collection<String> tags) {\n-        if (zeroRange.isEmpty()) {\n-            tags = removeDuplicates(tags);\n-            return tags;\n-        }\n-\n-        List<String> matchingTags = new ArrayList<>();\n-        for (String tag : tags) {\n-            \/\/ change to lowercase for case-insensitive matching\n-            String lowerCaseTag = tag.toLowerCase(Locale.ROOT);\n-            if (!shouldIgnoreFilterBasicMatch(zeroRange, lowerCaseTag)\n-                    && !caseInsensitiveMatch(matchingTags, lowerCaseTag)) {\n-                matchingTags.add(tag); \/\/ preserving the case of the input tag\n-            }\n-        }\n-\n-        return matchingTags;\n-    }\n-\n@@ -243,2 +224,10 @@\n-                tags = removeTagsMatchingExtendedZeroRange(zeroRanges, tags);\n-                return new ArrayList<String>(tags);\n+                for (String tag : tags) {\n+                    String lowerCaseTag = tag.toLowerCase(Locale.ROOT);\n+\n+                    if (!caseInsensitiveMatch(list, lowerCaseTag)\n+                            && !shouldIgnoreFilterExtendedMatch(zeroRanges, lowerCaseTag)) {\n+                        list.add(tag);\n+                    }\n+                }\n+\n+                break;\n@@ -270,27 +259,0 @@\n-    \/**\n-     * Removes the tag(s) which are falling in the extended exclusion range(s)\n-     * i.e range(s) with q=0 and returns the updated collection. If the extended\n-     * language ranges contains '*' as one of its non zero range then instead of\n-     * returning all the tags, remove those which are matching the range with\n-     * quality weight q=0.\n-     *\/\n-    private static Collection<String> removeTagsMatchingExtendedZeroRange(\n-            List<LanguageRange> zeroRange, Collection<String> tags) {\n-        if (zeroRange.isEmpty()) {\n-            tags = removeDuplicates(tags);\n-            return tags;\n-        }\n-\n-        List<String> matchingTags = new ArrayList<>();\n-        for (String tag : tags) {\n-            \/\/ change to lowercase for case-insensitive matching\n-            String lowerCaseTag = tag.toLowerCase(Locale.ROOT);\n-            if (!shouldIgnoreFilterExtendedMatch(zeroRange, lowerCaseTag)\n-                    && !caseInsensitiveMatch(matchingTags, lowerCaseTag)) {\n-                matchingTags.add(tag); \/\/ preserve the case of the input tag\n-            }\n-        }\n-\n-        return matchingTags;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/util\/locale\/LocaleMatcher.java","additions":20,"deletions":58,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -211,0 +211,5 @@\n+                {\"fr-FR, fr-BG;q=0.8, *;q=0.5, en;q=0\", \"en-US, fr-FR, fr-CA, fr-BG\",\n+                        null, \"fr-FR, fr-BG, fr-CA\"},\n+                {\"fr-FR, fr-*-BG;q=0.8, *;q=0.5, en;q=0\", \"en-US, fr-FR, fr-CA, fr-BG\",\n+                        null, \"fr-FR, fr-BG, fr-CA\"},\n+\n@@ -212,1 +217,1 @@\n-                        null, \"de-DE, en, ja-JP-hepburn, fr-JP, he\"},\n+                        null, \"ja-JP-hepburn, de-DE, en, fr-JP, he\"},\n@@ -219,0 +224,1 @@\n+\n@@ -221,1 +227,7 @@\n-                        MAP_EXTENDED_RANGES, \"de-DE, de-DE-x-goethe\"},\n+                        null, \"de-DE, de-DE-x-goethe\"},\n+                {\"de-*-DE\", \"de-DE, de-de, de-Latn-DE, de-Latf-DE, de-DE-x-goethe, \"\n+                        + \"de-Latn-DE-1996, de-Deva-DE, de, de-x-DE, de-Deva\",\n+                        null,\n+                        \"de-DE, de-Latn-DE, de-Latf-DE, de-DE-x-goethe, \"\n+                                + \"de-Latn-DE-1996, de-Deva-DE\"},\n+\n@@ -226,1 +238,1 @@\n-                                + \"de-Latn-DE-1996, de-Deva-DE\"},\n+                        + \"de-Latn-DE-1996, de-Deva-DE\"},\n@@ -231,1 +243,23 @@\n-                                + \"de-Latn-DE-1996, de-Deva-DE\"},\n+                        + \"de-Latn-DE-1996, de-Deva-DE\"},\n+\n+                {\"de-DE\", \"de-DE, de-de, de-Latn-DE, de-Latf-DE, de-DE-x-goethe, \"\n+                        + \"de-Latn-DE-1996, de-Deva-DE, de, de-x-DE, de-Deva\",\n+                        IGNORE_EXTENDED_RANGES,\n+                        \"de-DE, de-DE-x-goethe\"},\n+                {\"de-*-DE\", \"de-DE, de-de, de-Latn-DE, de-Latf-DE, de-DE-x-goethe, \"\n+                        + \"de-Latn-DE-1996, de-Deva-DE, de, de-x-DE, de-Deva\",\n+                        IGNORE_EXTENDED_RANGES,\n+                        \"\"},\n+\n+                {\"de-DE\", \"de-DE, de-de, de-Latn-DE, de-Latf-DE, de-DE-x-goethe, \"\n+                        + \"de-Latn-DE-1996, de-Deva-DE, de, de-x-DE, de-Deva\",\n+                        MAP_EXTENDED_RANGES, \"de-DE, de-DE-x-goethe\"},\n+                {\"de-*-DE\", \"de-DE, de-de, de-Latn-DE, de-Latf-DE, de-DE-x-goethe, \"\n+                        + \"de-Latn-DE-1996, de-Deva-DE, de, de-x-DE, de-Deva\",\n+                        MAP_EXTENDED_RANGES, \"de-DE, de-DE-x-goethe\"},\n+\n+                {\"de-DE\", \"de-DE, de-de, de-Latn-DE, de-Latf-DE, de-DE-x-goethe, \"\n+                        + \"de-Latn-DE-1996, de-Deva-DE, de, de-x-DE, de-Deva\",\n+                        REJECT_EXTENDED_RANGES, \"de-DE, de-DE-x-goethe\"},\n+\n+                \/\/ The next test in this chain is in testLFilterTagsIAE.\n@@ -383,0 +417,9 @@\n+    @Test(expectedExceptions = IllegalArgumentException.class)\n+    public void testLFilterTagsIAE() {\n+        String ranges = \"de-*-DE\";\n+        String tags = \"de-DE, de-de, de-Latn-DE, de-Latf-DE, de-DE-x-goethe, \"\n+                + \"de-Latn-DE-1996, de-Deva-DE, de, de-x-DE, de-Deva\";\n+        List<LanguageRange> priorityList = LanguageRange.parse(ranges);\n+        showLanguageTags(Locale.filterTags(priorityList, generateLanguageTags(tags), REJECT_EXTENDED_RANGES));\n+    }\n+\n","filename":"test\/jdk\/java\/util\/Locale\/Bug7069824.java","additions":47,"deletions":4,"binary":false,"changes":51,"status":"modified"}]}