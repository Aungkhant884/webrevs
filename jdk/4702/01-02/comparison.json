{"files":[{"patch":"@@ -45,4 +45,7 @@\n-    private long usageTicks = 0; \/\/ used for cpu load calculation\n-    private long totalTicks = 0; \/\/ used for cpu load calculation\n-    private long processUsageTicks = 0; \/\/ used for process cpu load calculation\n-    private long processTotalTicks = 0; \/\/ used for process cpu load calculation\n+    private CpuTicks systemLoadTicks = new CpuTicks();\n+    private CpuTicks processLoadTicks = new CpuTicks();\n+\n+    private class CpuTicks {\n+        long usageTicks = 0; \n+        long totalTicks = 0;\n+    }\n@@ -139,1 +142,1 @@\n-    private double getUsageDividesTotal(long usageTicks, long totalTicks) {\n+    private double getUsageDividesTotal(long usageTicks, long totalTicks, CpuTicks cpuTicks) {\n@@ -156,5 +159,4 @@\n-        long distance = usageTicks - this.usageTicks;\n-        this.usageTicks = usageTicks;\n-        long totalDistance = totalTicks - this.totalTicks;\n-        this.totalTicks = totalTicks;\n-\n+        long distance = usageTicks - cpuTicks.usageTicks;\n+        cpuTicks.usageTicks = usageTicks;\n+        long totalDistance = totalTicks - cpuTicks.totalTicks;\n+        cpuTicks.totalTicks = totalTicks;\n@@ -179,1 +181,1 @@\n-                return getUsageDividesTotal(usageNanos, quotaNanos);\n+                return getUsageDividesTotal(usageNanos, quotaNanos, this.systemLoadTicks);\n@@ -186,1 +188,1 @@\n-                return getUsageDividesTotal(usageNanos, hostTicks);\n+                return getUsageDividesTotal(usageNanos, hostTicks, this.systemLoadTicks);\n@@ -222,19 +224,0 @@\n-    private double getProcessUsageDividesTotal(long usageTicks, long totalTicks) {\n-        if (usageTicks < 0 || totalTicks <= 0) {\n-            return -1;\n-        }\n-        long distance = usageTicks - this.processUsageTicks;\n-        this.processUsageTicks = usageTicks;\n-        long totalDistance = totalTicks - this.processTotalTicks;\n-        this.processTotalTicks = totalTicks;\n-\n-        double processLoad = 0.0;\n-        if (distance > 0 && totalDistance > 0) {\n-            processLoad = ((double)distance) \/ totalDistance;\n-        }\n-        \/\/ Ensure the return value is in the range 0.0 -> 1.0\n-        processLoad = Math.max(0.0, processLoad);\n-        processLoad = Math.min(1.0, processLoad);\n-        return processLoad;\n-    }\n-\n@@ -249,1 +232,1 @@\n-                return getProcessUsageDividesTotal(usageNanos, quotaNanos);\n+                return getUsageDividesTotal(usageNanos, quotaNanos, this.processLoadTicks);\n@@ -256,1 +239,1 @@\n-                return getProcessUsageDividesTotal(usageNanos, hostTicks);\n+                return getUsageDividesTotal(usageNanos, hostTicks, this.processLoadTicks);\n@@ -258,1 +241,16 @@\n-                return getProcessCpuLoad0();\n+                if (isCpuSetSameAsHostCpuSet()) {\n+                    return getProcessCpuLoad0();\n+                } else {\n+                    int[] cpuSet = containerMetrics.getEffectiveCpuSetCpus();\n+                    if (cpuSet == null || cpuSet.length <= 0) {\n+                        cpuSet = containerMetrics.getCpuSetCpus();\n+                    }\n+                    if (cpuSet == null) {\n+                        return getProcessCpuLoad0();\n+                    } else if (cpuSet.length > 0) {\n+                        int totalCPUs = getHostOnlineCpuCount0();\n+                        int containerCPUs = getAvailableProcessors();\n+                        return getProcessCpuLoad0() * totalCPUs \/ containerCPUs;\n+                    }\n+                    return -1;\n+                }\n","filename":"src\/jdk.management\/unix\/classes\/com\/sun\/management\/internal\/OperatingSystemImpl.java","additions":32,"deletions":34,"binary":false,"changes":66,"status":"modified"}]}