{"files":[{"patch":"@@ -45,2 +45,7 @@\n-    private long usageTicks = 0; \/\/ used for cpu load calculation\n-    private long totalTicks = 0; \/\/ used for cpu load calculation\n+    private CpuTicks systemLoadTicks = new CpuTicks();\n+    private CpuTicks processLoadTicks = new CpuTicks();\n+\n+    private class CpuTicks {\n+        long usageTicks = 0;\n+        long totalTicks = 0;\n+    }\n@@ -137,1 +142,1 @@\n-    private double getUsageDividesTotal(long usageTicks, long totalTicks) {\n+    private double getUsageDividesTotal(long usageTicks, long totalTicks, CpuTicks cpuTicks) {\n@@ -154,5 +159,4 @@\n-        long distance = usageTicks - this.usageTicks;\n-        this.usageTicks = usageTicks;\n-        long totalDistance = totalTicks - this.totalTicks;\n-        this.totalTicks = totalTicks;\n-\n+        long distance = usageTicks - cpuTicks.usageTicks;\n+        cpuTicks.usageTicks = usageTicks;\n+        long totalDistance = totalTicks - cpuTicks.totalTicks;\n+        cpuTicks.totalTicks = totalTicks;\n@@ -177,1 +181,1 @@\n-                return getUsageDividesTotal(usageNanos, quotaNanos);\n+                return getUsageDividesTotal(usageNanos, quotaNanos, this.systemLoadTicks);\n@@ -184,1 +188,1 @@\n-                return getUsageDividesTotal(usageNanos, hostTicks);\n+                return getUsageDividesTotal(usageNanos, hostTicks, this.systemLoadTicks);\n@@ -221,0 +225,34 @@\n+        if (containerMetrics != null) {\n+            long quota = containerMetrics.getCpuQuota();\n+            long share = containerMetrics.getCpuShares();\n+            long usageNanos = getProcessCpuTime();\n+            if (quota > 0) {\n+                long numPeriods = containerMetrics.getCpuNumPeriods();\n+                long quotaNanos = TimeUnit.MICROSECONDS.toNanos(quota * numPeriods);\n+                return getUsageDividesTotal(usageNanos, quotaNanos, this.processLoadTicks);\n+            } else if (share > 0) {\n+                long hostTicks = getHostTotalCpuTicks0();\n+                int totalCPUs = getHostOnlineCpuCount0();\n+                int containerCPUs = getAvailableProcessors();\n+                \/\/ scale the total host load to the actual container cpus\n+                hostTicks = hostTicks * containerCPUs \/ totalCPUs;\n+                return getUsageDividesTotal(usageNanos, hostTicks, this.processLoadTicks);\n+            } else {\n+                if (isCpuSetSameAsHostCpuSet()) {\n+                    return getProcessCpuLoad0();\n+                } else {\n+                    int[] cpuSet = containerMetrics.getEffectiveCpuSetCpus();\n+                    if (cpuSet == null || cpuSet.length <= 0) {\n+                        cpuSet = containerMetrics.getCpuSetCpus();\n+                    }\n+                    if (cpuSet == null) {\n+                        return getProcessCpuLoad0();\n+                    } else if (cpuSet.length > 0) {\n+                        int totalCPUs = getHostOnlineCpuCount0();\n+                        int containerCPUs = getAvailableProcessors();\n+                        return getProcessCpuLoad0() * totalCPUs \/ containerCPUs;\n+                    }\n+                    return -1;\n+                }\n+            }\n+        }\n","filename":"src\/jdk.management\/unix\/classes\/com\/sun\/management\/internal\/OperatingSystemImpl.java","additions":48,"deletions":10,"binary":false,"changes":58,"status":"modified"}]}