{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -101,0 +101,1 @@\n+    private final JCDiagnostic.Factory diags;\n@@ -127,0 +128,1 @@\n+        diags = JCDiagnostic.Factory.instance(context);\n@@ -3499,0 +3501,9 @@\n+            Type returnType = types.asSuper(iterator.type.getReturnType(), syms.iteratorType.tsym);\n+            if (returnType == null) {\n+                log.error(tree.pos(),\n+                          Errors.OverrideIncompatibleRet(\n+                                  diags.fragment(\"foreach.cant.get.applicable.iterator\"),\n+                                  iterator.type.getReturnType(),\n+                                  syms.iteratorType));\n+                returnType = iterator.type.getReturnType();\n+            }\n@@ -3500,2 +3511,1 @@\n-                                            types.erasure(types.asSuper(iterator.type.getReturnType(), syms.iteratorType.tsym)),\n-                                            currentMethodSym);\n+                                            types.erasure(returnType), currentMethodSym);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":13,"deletions":3,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -566,0 +566,3 @@\n+compiler.misc.foreach.cant.get.applicable.iterator=\\\n+    for-each expression cannot get the applicable iterator when using the method \"iterator()\"\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,112 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8232765\n+ * @summary NullPointerException at Types.eraseNotNeeded()\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run main T8232765\n+ *\/\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import toolbox.JavacTask;\n+import toolbox.ToolBox;\n+import toolbox.TestRunner;\n+import toolbox.Task;\n+\n+public class T8232765 extends TestRunner {\n+    ToolBox tb;\n+\n+    T8232765() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        T8232765 t = new T8232765();\n+        t.runTests();\n+    }\n+\n+    @Test\n+    public void testIterableTopClass() throws Exception {\n+        String code = \"\"\"\n+                public class T8232765 {\n+                    public void test(String[] args) {\n+                        MyLinkedList<Integer> list = new MyLinkedList<>();\n+                        for (int x : list)\n+                            System.out.print(x);\n+                    }\n+                }\n+                class MyLinkedList<T> implements java.lang.Iterable<T> {\n+                    public void iterator() {}\n+                }\"\"\";\n+        List<String> output = new JavacTask(tb)\n+                .sources(code)\n+                .options(\"-XDrawDiagnostics\")\n+                .run(Task.Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+        List<String> expected = Arrays.asList(\n+                \"T8232765.java:4:9: compiler.err.override.incompatible.ret: \" +\n+                        \"(compiler.misc.foreach.cant.get.applicable.iterator), void, java.util.Iterator<E>\",\n+                \"T8232765.java:4:22: compiler.err.cant.resolve.location.args: \" +\n+                        \"kindname.method, hasNext, , , (compiler.misc.location: kindname.class, void, null)\",\n+                \"2 errors\",\n+                \"Fatal Error: Unable to find method hasNext\");\n+        tb.checkEqual(expected, output);\n+    }\n+\n+    @Test\n+    public void testIterableMemberClass() throws Exception {\n+        String code = \"\"\"\n+                public class T8232765 {\n+                    public void test(String[] args) {\n+                        MyLinkedList<Integer> list = new MyLinkedList<>();\n+                        for (int x : list)\n+                            System.out.print(x);\n+                    }\n+                    class MyLinkedList<T> implements java.lang.Iterable<T> {\n+                        public void iterator() {}\n+                    }\n+                }\"\"\";\n+        List<String> output = new JavacTask(tb)\n+                .sources(code)\n+                .options(\"-XDrawDiagnostics\")\n+                .run(Task.Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+        List<String> expected = Arrays.asList(\n+                \"T8232765.java:7:5: compiler.err.does.not.override.abstract: \" +\n+                        \"T8232765.MyLinkedList, iterator(), java.lang.Iterable\",\n+                \"T8232765.java:8:21: compiler.err.override.incompatible.ret: (compiler.misc.cant.implement: iterator()\" +\n+                        \", T8232765.MyLinkedList, iterator(), java.lang.Iterable), void, java.util.Iterator<T>\",\n+                \"2 errors\");\n+        tb.checkEqual(expected, output);\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/desugar\/8232765\/T8232765.java","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ key: compiler.err.override.incompatible.ret\n+\/\/ key: compiler.misc.foreach.cant.get.applicable.iterator\n+\/\/ key: compiler.err.cant.resolve.location.args\n+\/\/ key: compiler.misc.location\n+\n+public class ForeachCantGetApplicableIterator {\n+    public void test(String[] args) {\n+        MyLinkedList<Integer> list = new MyLinkedList<>();\n+        for (int x : list)\n+            System.out.print(x);\n+    }\n+}\n+\n+class MyLinkedList<T> implements java.lang.Iterable<T> {\n+    public void iterator() {}\n+}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ForeachCantGetApplicableIterator.java","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"}]}