{"files":[{"patch":"@@ -1539,0 +1539,9 @@\n+\n+                    \/\/ Check the return type of the method iterator().\n+                    \/\/ This is the bare minimum we need to verify to make sure code generation doesn't crash.\n+                    Symbol iterSymbol = rs.resolveInternalMethod(tree.pos(),\n+                            loopEnv, exprType, names.iterator, List.nil(), List.nil());\n+                    if (types.asSuper(iterSymbol.type.getReturnType(), syms.iteratorType.tsym) == null) {\n+                        log.error(tree.pos(),\n+                                Errors.ForeachNotApplicableToType(exprType, Fragments.TypeReqArrayOrIterable));\n+                    }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,303 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8232765\n+ * @summary NullPointerException at Types.eraseNotNeeded()\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run main TestReturnTypeOfIterator\n+ *\/\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import toolbox.JavacTask;\n+import toolbox.ToolBox;\n+import toolbox.TestRunner;\n+import toolbox.Task;\n+\n+public class TestReturnTypeOfIterator extends TestRunner {\n+    ToolBox tb;\n+\n+    TestReturnTypeOfIterator() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        var t = new TestReturnTypeOfIterator();\n+        t.runTests();\n+    }\n+\n+    @Test\n+    public void testVoidReturnTypeAtTopClass() throws Exception {\n+        String code = \"\"\"\n+                public class T8232765 {\n+                    public void test(String[] args) {\n+                        MyLinkedList<Integer> list = new MyLinkedList<>();\n+                        for (int x : list)\n+                            System.out.print(x);\n+                    }\n+                }\n+                class MyLinkedList<T> implements java.lang.Iterable<T> {\n+                    public void iterator() {}\n+                }\"\"\";\n+        List<String> output = new JavacTask(tb)\n+                .sources(code)\n+                .options(\"-XDrawDiagnostics\")\n+                .run(Task.Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+        List<String> expected = Arrays.asList(\n+                \"T8232765.java:4:9: compiler.err.foreach.not.applicable.to.type: \" +\n+                        \"MyLinkedList<java.lang.Integer>, (compiler.misc.type.req.array.or.iterable)\",\n+                \"T8232765.java:8:1: compiler.err.does.not.override.abstract: MyLinkedList, iterator(), java.lang.Iterable\",\n+                \"T8232765.java:9:17: compiler.err.override.incompatible.ret: (compiler.misc.cant.implement: iterator(),\" +\n+                        \" MyLinkedList, iterator(), java.lang.Iterable), void, java.util.Iterator<T>\",\n+                \"3 errors\");\n+        tb.checkEqual(expected, output);\n+    }\n+\n+    @Test\n+    public void testVoidReturnTypeAtMemberClass() throws Exception {\n+        String code = \"\"\"\n+                public class T8232765 {\n+                    public void test(String[] args) {\n+                        MyLinkedList<Integer> list = new MyLinkedList<>();\n+                        for (int x : list)\n+                            System.out.print(x);\n+                    }\n+                    class MyLinkedList<T> implements java.lang.Iterable<T> {\n+                        public void iterator() {}\n+                    }\n+                }\"\"\";\n+        List<String> output = new JavacTask(tb)\n+                .sources(code)\n+                .options(\"-XDrawDiagnostics\")\n+                .run(Task.Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+        List<String> expected = Arrays.asList(\n+                \"T8232765.java:4:9: compiler.err.foreach.not.applicable.to.type: \" +\n+                        \"T8232765.MyLinkedList<java.lang.Integer>, (compiler.misc.type.req.array.or.iterable)\",\n+                \"T8232765.java:7:5: compiler.err.does.not.override.abstract: T8232765.MyLinkedList, iterator(), java.lang.Iterable\",\n+                \"T8232765.java:8:21: compiler.err.override.incompatible.ret: (compiler.misc.cant.implement: iterator(),\" +\n+                        \" T8232765.MyLinkedList, iterator(), java.lang.Iterable), void, java.util.Iterator<T>\",\n+                \"3 errors\");\n+        tb.checkEqual(expected, output);\n+    }\n+\n+    @Test\n+    public void testNonOverride() throws Exception {\n+        String code = \"\"\"\n+                import java.util.Iterator;\n+                public class T8232765 {\n+                    public void test(String[] args) {\n+                        MyLinkedList<Integer> list = new MyLinkedList<>();\n+                        for (int x : list)\n+                            System.out.print(x);\n+                    }\n+                }\n+                class MyLinkedList<T> implements java.lang.Iterable<T> {\n+                    public Iterator<T> iterator(int a) {return null;}\n+                }\"\"\";\n+        List<String> output = new JavacTask(tb)\n+                .sources(code)\n+                .options(\"-XDrawDiagnostics\")\n+                .run(Task.Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+        List<String> expected = Arrays.asList(\n+                \"T8232765.java:9:1: compiler.err.does.not.override.abstract: MyLinkedList, iterator(), java.lang.Iterable\",\n+                \"1 error\");\n+        tb.checkEqual(expected, output);\n+    }\n+\n+    @Test\n+    public void testNonOverrideAndVoidReturnType() throws Exception {\n+        String code = \"\"\"\n+                public class T8232765 {\n+                    public void test(String[] args) {\n+                        MyLinkedList<Integer> list = new MyLinkedList<>();\n+                        for (int x : list)\n+                            System.out.print(x);\n+                    }\n+                }\n+                class MyLinkedList<T> implements java.lang.Iterable<T> {\n+                    public void iterator(int a) { }\n+                }\"\"\";\n+        List<String> output = new JavacTask(tb)\n+                .sources(code)\n+                .options(\"-XDrawDiagnostics\")\n+                .run(Task.Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+        List<String> expected = Arrays.asList(\n+                \"T8232765.java:8:1: compiler.err.does.not.override.abstract: MyLinkedList, iterator(), java.lang.Iterable\",\n+                \"1 error\");\n+        tb.checkEqual(expected, output);\n+    }\n+\n+    @Test\n+    public void testOverloadAndVoidReturnType() throws Exception {\n+        String code = \"\"\"\n+                public class T8232765 {\n+                    public void test(String[] args) {\n+                        MyLinkedList<Integer> list = new MyLinkedList<>();\n+                        for (int x : list)\n+                            System.out.print(x);\n+                    }\n+                }\n+                class MyLinkedList<T> implements java.lang.Iterable<T> {\n+                    public void iterator() { }\n+                    public void iterator(int a) { }\n+                }\"\"\";\n+        List<String> output = new JavacTask(tb)\n+                .sources(code)\n+                .options(\"-XDrawDiagnostics\")\n+                .run(Task.Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+        List<String> expected = Arrays.asList(\n+                \"T8232765.java:4:9: compiler.err.foreach.not.applicable.to.type: MyLinkedList<java.lang.Integer>, \" +\n+                        \"(compiler.misc.type.req.array.or.iterable)\",\n+                \"T8232765.java:8:1: compiler.err.does.not.override.abstract: MyLinkedList, iterator(), java.lang.Iterable\",\n+                \"T8232765.java:9:17: compiler.err.override.incompatible.ret: (compiler.misc.cant.implement: iterator(), \" +\n+                        \"MyLinkedList, iterator(), java.lang.Iterable), void, java.util.Iterator<T>\",\n+                \"3 errors\");\n+        tb.checkEqual(expected, output);\n+    }\n+\n+    @Test\n+    public void testOverload() throws Exception {\n+        String code = \"\"\"\n+                import java.util.Iterator;\n+                public class T8232765 {\n+                    public void test(String[] args) {\n+                        MyLinkedList<Integer> list = new MyLinkedList<>();\n+                        for (int x : list)\n+                            System.out.print(x);\n+                    }\n+                }\n+                class MyLinkedList<T> implements java.lang.Iterable<T> {\n+                    public Iterator<T> iterator() {return null;}\n+                    public Iterator<T> iterator(int a) {return null;}\n+                }\"\"\";\n+        new JavacTask(tb)\n+                .sources(code)\n+                .options(\"-XDrawDiagnostics\")\n+                .run(Task.Expect.SUCCESS);\n+    }\n+\n+    @Test\n+    public void testPrivate() throws Exception {\n+        String code = \"\"\"\n+                import java.util.Iterator;\n+                public class T8232765 {\n+                    public void test(String[] args) {\n+                        MyLinkedList<Integer> list = new MyLinkedList<>();\n+                        for (int x : list)\n+                            System.out.print(x);\n+                    }\n+                }\n+                class MyLinkedList<T> implements java.lang.Iterable<T> {\n+                    private Iterator<T> iterator() {return null;}\n+                }\"\"\";\n+        List<String> output = new JavacTask(tb)\n+                .sources(code)\n+                .options(\"-XDrawDiagnostics\")\n+                .run(Task.Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+        List<String> expected = Arrays.asList(\n+                \"T8232765.java:5:9: compiler.err.report.access: iterator(), private, MyLinkedList\",\n+                \"T8232765.java:10:25: compiler.err.override.weaker.access: (compiler.misc.cant.implement: \" +\n+                        \"iterator(), MyLinkedList, iterator(), java.lang.Iterable), public\",\n+                \"2 errors\");\n+        tb.checkEqual(expected, output);\n+    }\n+\n+    @Test\n+    public void testPrivateAndOverload() throws Exception {\n+        String code = \"\"\"\n+                import java.util.Iterator;\n+                public class T8232765 {\n+                    public void test(String[] args) {\n+                        MyLinkedList<Integer> list = new MyLinkedList<>();\n+                        for (int x : list)\n+                            System.out.print(x);\n+                    }\n+                }\n+                class MyLinkedList<T> implements java.lang.Iterable<T> {\n+                    private Iterator<T> iterator() {return null;}\n+                    public Iterator<T> iterator(int a) {return null;}\n+                }\"\"\";\n+        List<String> output = new JavacTask(tb)\n+                .sources(code)\n+                .options(\"-XDrawDiagnostics\")\n+                .run(Task.Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+        List<String> expected = Arrays.asList(\n+                \"T8232765.java:5:9: compiler.err.cant.apply.symbols: kindname.method, iterator, compiler.misc.no.args,\" +\n+                        \"{(compiler.misc.inapplicable.method: kindname.method, MyLinkedList, iterator(), \" +\n+                        \"(compiler.misc.report.access: iterator(), private, MyLinkedList)),\" +\n+                        \"(compiler.misc.inapplicable.method: kindname.method, MyLinkedList, iterator(int), \" +\n+                        \"(compiler.misc.arg.length.mismatch))}\",\n+                \"1 error\",\n+                \"Fatal Error: Unable to find method iterator\");\n+        tb.checkEqual(expected, output);\n+    }\n+\n+    @Test\n+    public void testPrivateAndOverloadAndVoidReturnType() throws Exception {\n+        String code = \"\"\"\n+                public class T8232765 {\n+                    public void test(String[] args) {\n+                        MyLinkedList<Integer> list = new MyLinkedList<>();\n+                        for (int x : list)\n+                            System.out.print(x);\n+                    }\n+                }\n+                class MyLinkedList<T> implements java.lang.Iterable<T> {\n+                    private void iterator() { }\n+                    public void iterator(int a) { }\n+                }\"\"\";\n+        List<String> output = new JavacTask(tb)\n+                .sources(code)\n+                .options(\"-XDrawDiagnostics\")\n+                .run(Task.Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+        List<String> expected = Arrays.asList(\n+                \"T8232765.java:8:1: compiler.err.does.not.override.abstract: MyLinkedList, iterator(), java.lang.Iterable\",\n+                \"T8232765.java:9:18: compiler.err.override.weaker.access: (compiler.misc.cant.implement: iterator(), \" +\n+                        \"MyLinkedList, iterator(), java.lang.Iterable), public\",\n+                \"2 errors\");\n+        tb.checkEqual(expected, output);\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/desugar\/TestReturnTypeOfIterator.java","additions":303,"deletions":0,"binary":false,"changes":303,"status":"added"}]}