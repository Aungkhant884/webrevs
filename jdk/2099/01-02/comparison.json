{"files":[{"patch":"@@ -1540,1 +1540,2 @@\n-                    \/\/ Check the return type of the method iterator()\n+                    \/\/ Check the return type of the method iterator().\n+                    \/\/ This is the bare minimum we need to verify to make sure code generation doesn't crash.\n@@ -1545,4 +1546,1 @@\n-                                Errors.OverrideIncompatibleRet(\n-                                        diags.fragment(\"foreach.cant.get.applicable.iterator\"),\n-                                        iterSymbol.type.getReturnType(),\n-                                        syms.iteratorType));\n+                                Errors.ForeachNotApplicableToType(exprType, Fragments.TypeReqArrayOrIterable));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -566,3 +566,0 @@\n-compiler.misc.foreach.cant.get.applicable.iterator=\\\n-    for-each expression cannot get the applicable iterator when using the method \"iterator()\"\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-    public void testIterableTopClass() throws Exception {\n+    public void testVoidReturnTypeAtTopClass() throws Exception {\n@@ -76,2 +76,2 @@\n-                \"T8232765.java:4:9: compiler.err.override.incompatible.ret: \" +\n-                        \"(compiler.misc.foreach.cant.get.applicable.iterator), void, java.util.Iterator<E>\",\n+                \"T8232765.java:4:9: compiler.err.foreach.not.applicable.to.type: \" +\n+                        \"MyLinkedList<java.lang.Integer>, (compiler.misc.type.req.array.or.iterable)\",\n@@ -86,1 +86,1 @@\n-    public void testIterableMemberClass() throws Exception {\n+    public void testVoidReturnTypeAtMemberClass() throws Exception {\n@@ -105,2 +105,2 @@\n-                \"T8232765.java:4:9: compiler.err.override.incompatible.ret: \" +\n-                        \"(compiler.misc.foreach.cant.get.applicable.iterator), void, java.util.Iterator<E>\",\n+                \"T8232765.java:4:9: compiler.err.foreach.not.applicable.to.type: \" +\n+                        \"T8232765.MyLinkedList<java.lang.Integer>, (compiler.misc.type.req.array.or.iterable)\",\n@@ -113,0 +113,190 @@\n+\n+    @Test\n+    public void testNonOverride() throws Exception {\n+        String code = \"\"\"\n+                import java.util.Iterator;\n+                public class T8232765 {\n+                    public void test(String[] args) {\n+                        MyLinkedList<Integer> list = new MyLinkedList<>();\n+                        for (int x : list)\n+                            System.out.print(x);\n+                    }\n+                }\n+                class MyLinkedList<T> implements java.lang.Iterable<T> {\n+                    public Iterator<T> iterator(int a) {return null;}\n+                }\"\"\";\n+        List<String> output = new JavacTask(tb)\n+                .sources(code)\n+                .options(\"-XDrawDiagnostics\")\n+                .run(Task.Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+        List<String> expected = Arrays.asList(\n+                \"T8232765.java:9:1: compiler.err.does.not.override.abstract: MyLinkedList, iterator(), java.lang.Iterable\",\n+                \"1 error\");\n+        tb.checkEqual(expected, output);\n+    }\n+\n+    @Test\n+    public void testNonOverrideAndVoidReturnType() throws Exception {\n+        String code = \"\"\"\n+                public class T8232765 {\n+                    public void test(String[] args) {\n+                        MyLinkedList<Integer> list = new MyLinkedList<>();\n+                        for (int x : list)\n+                            System.out.print(x);\n+                    }\n+                }\n+                class MyLinkedList<T> implements java.lang.Iterable<T> {\n+                    public void iterator(int a) { }\n+                }\"\"\";\n+        List<String> output = new JavacTask(tb)\n+                .sources(code)\n+                .options(\"-XDrawDiagnostics\")\n+                .run(Task.Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+        List<String> expected = Arrays.asList(\n+                \"T8232765.java:8:1: compiler.err.does.not.override.abstract: MyLinkedList, iterator(), java.lang.Iterable\",\n+                \"1 error\");\n+        tb.checkEqual(expected, output);\n+    }\n+\n+    @Test\n+    public void testOverloadAndVoidReturnType() throws Exception {\n+        String code = \"\"\"\n+                public class T8232765 {\n+                    public void test(String[] args) {\n+                        MyLinkedList<Integer> list = new MyLinkedList<>();\n+                        for (int x : list)\n+                            System.out.print(x);\n+                    }\n+                }\n+                class MyLinkedList<T> implements java.lang.Iterable<T> {\n+                    public void iterator() { }\n+                    public void iterator(int a) { }\n+                }\"\"\";\n+        List<String> output = new JavacTask(tb)\n+                .sources(code)\n+                .options(\"-XDrawDiagnostics\")\n+                .run(Task.Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+        List<String> expected = Arrays.asList(\n+                \"T8232765.java:4:9: compiler.err.foreach.not.applicable.to.type: MyLinkedList<java.lang.Integer>, \" +\n+                        \"(compiler.misc.type.req.array.or.iterable)\",\n+                \"T8232765.java:8:1: compiler.err.does.not.override.abstract: MyLinkedList, iterator(), java.lang.Iterable\",\n+                \"T8232765.java:9:17: compiler.err.override.incompatible.ret: (compiler.misc.cant.implement: iterator(), \" +\n+                        \"MyLinkedList, iterator(), java.lang.Iterable), void, java.util.Iterator<T>\",\n+                \"3 errors\");\n+        tb.checkEqual(expected, output);\n+    }\n+\n+    @Test\n+    public void testOverload() throws Exception {\n+        String code = \"\"\"\n+                import java.util.Iterator;\n+                public class T8232765 {\n+                    public void test(String[] args) {\n+                        MyLinkedList<Integer> list = new MyLinkedList<>();\n+                        for (int x : list)\n+                            System.out.print(x);\n+                    }\n+                }\n+                class MyLinkedList<T> implements java.lang.Iterable<T> {\n+                    public Iterator<T> iterator() {return null;}\n+                    public Iterator<T> iterator(int a) {return null;}\n+                }\"\"\";\n+        new JavacTask(tb)\n+                .sources(code)\n+                .options(\"-XDrawDiagnostics\")\n+                .run(Task.Expect.SUCCESS);\n+    }\n+\n+    @Test\n+    public void testPrivate() throws Exception {\n+        String code = \"\"\"\n+                import java.util.Iterator;\n+                public class T8232765 {\n+                    public void test(String[] args) {\n+                        MyLinkedList<Integer> list = new MyLinkedList<>();\n+                        for (int x : list)\n+                            System.out.print(x);\n+                    }\n+                }\n+                class MyLinkedList<T> implements java.lang.Iterable<T> {\n+                    private Iterator<T> iterator() {return null;}\n+                }\"\"\";\n+        List<String> output = new JavacTask(tb)\n+                .sources(code)\n+                .options(\"-XDrawDiagnostics\")\n+                .run(Task.Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+        List<String> expected = Arrays.asList(\n+                \"T8232765.java:5:9: compiler.err.report.access: iterator(), private, MyLinkedList\",\n+                \"T8232765.java:10:25: compiler.err.override.weaker.access: (compiler.misc.cant.implement: \" +\n+                        \"iterator(), MyLinkedList, iterator(), java.lang.Iterable), public\",\n+                \"2 errors\");\n+        tb.checkEqual(expected, output);\n+    }\n+\n+    @Test\n+    public void testPrivateAndOverload() throws Exception {\n+        String code = \"\"\"\n+                import java.util.Iterator;\n+                public class T8232765 {\n+                    public void test(String[] args) {\n+                        MyLinkedList<Integer> list = new MyLinkedList<>();\n+                        for (int x : list)\n+                            System.out.print(x);\n+                    }\n+                }\n+                class MyLinkedList<T> implements java.lang.Iterable<T> {\n+                    private Iterator<T> iterator() {return null;}\n+                    public Iterator<T> iterator(int a) {return null;}\n+                }\"\"\";\n+        List<String> output = new JavacTask(tb)\n+                .sources(code)\n+                .options(\"-XDrawDiagnostics\")\n+                .run(Task.Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+        List<String> expected = Arrays.asList(\n+                \"T8232765.java:5:9: compiler.err.cant.apply.symbols: kindname.method, iterator, compiler.misc.no.args,\" +\n+                        \"{(compiler.misc.inapplicable.method: kindname.method, MyLinkedList, iterator(), \" +\n+                        \"(compiler.misc.report.access: iterator(), private, MyLinkedList)),\" +\n+                        \"(compiler.misc.inapplicable.method: kindname.method, MyLinkedList, iterator(int), \" +\n+                        \"(compiler.misc.arg.length.mismatch))}\",\n+                \"1 error\",\n+                \"Fatal Error: Unable to find method iterator\");\n+        tb.checkEqual(expected, output);\n+    }\n+\n+    @Test\n+    public void testPrivateAndOverloadAndVoidReturnType() throws Exception {\n+        String code = \"\"\"\n+                public class T8232765 {\n+                    public void test(String[] args) {\n+                        MyLinkedList<Integer> list = new MyLinkedList<>();\n+                        for (int x : list)\n+                            System.out.print(x);\n+                    }\n+                }\n+                class MyLinkedList<T> implements java.lang.Iterable<T> {\n+                    private void iterator() { }\n+                    public void iterator(int a) { }\n+                }\"\"\";\n+        List<String> output = new JavacTask(tb)\n+                .sources(code)\n+                .options(\"-XDrawDiagnostics\")\n+                .run(Task.Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+        List<String> expected = Arrays.asList(\n+                \"T8232765.java:8:1: compiler.err.does.not.override.abstract: MyLinkedList, iterator(), java.lang.Iterable\",\n+                \"T8232765.java:9:18: compiler.err.override.weaker.access: (compiler.misc.cant.implement: iterator(), \" +\n+                        \"MyLinkedList, iterator(), java.lang.Iterable), public\",\n+                \"2 errors\");\n+        tb.checkEqual(expected, output);\n+    }\n","filename":"test\/langtools\/tools\/javac\/desugar\/TestReturnTypeOfIterator.java","additions":196,"deletions":6,"binary":false,"changes":202,"status":"modified"},{"patch":"@@ -1,40 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/\/ key: compiler.err.override.incompatible.ret\n-\/\/ key: compiler.misc.foreach.cant.get.applicable.iterator\n-\/\/ key: compiler.err.does.not.override.abstract\n-\/\/ key: compiler.err.override.incompatible.ret\n-\/\/ key: compiler.misc.cant.implement\n-\n-public class ForeachCantGetApplicableIterator {\n-    public void test(String[] args) {\n-        MyLinkedList<Integer> list = new MyLinkedList<>();\n-        for (int x : list)\n-            System.out.print(x);\n-    }\n-}\n-\n-class MyLinkedList<T> implements java.lang.Iterable<T> {\n-    public void iterator() {}\n-}\n","filename":"test\/langtools\/tools\/javac\/diags\/examples\/ForeachCantGetApplicableIterator.java","additions":0,"deletions":40,"binary":false,"changes":40,"status":"deleted"}]}