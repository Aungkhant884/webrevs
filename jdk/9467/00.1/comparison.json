{"files":[{"patch":"@@ -503,1 +503,1 @@\n-                .add(new RawHtml(replaceDocRootDir(options.top())))\n+                .add(RawHtml.of(replaceDocRootDir(options.top())))\n@@ -518,1 +518,1 @@\n-                .setUserHeader(new RawHtml(replaceDocRootDir(options.header())));\n+                .setUserHeader(RawHtml.of(replaceDocRootDir(options.header())));\n@@ -535,1 +535,1 @@\n-                                    new RawHtml(replaceDocRootDir(bottom)))));\n+                                    RawHtml.of(replaceDocRootDir(bottom)))));\n@@ -1007,1 +1007,1 @@\n-                        return new RawHtml(replaceDocRootDir(removeTrailingSlash(seeText)));\n+                        return RawHtml.of(replaceDocRootDir(removeTrailingSlash(seeText)));\n@@ -1487,1 +1487,0 @@\n-        \/\/ Array of all possible inline tags for this javadoc run\n@@ -1514,1 +1513,1 @@\n-            boolean allDone = new SimpleDocTreeVisitor<Boolean, Content>() {\n+            var docTreeVisitor = new SimpleDocTreeVisitor<Boolean, Content>() {\n@@ -1517,9 +1516,5 @@\n-                    if (utils.isStartElement(tag)) {\n-                        StartElementTree st = (StartElementTree)tag;\n-                        Name name = st.getName();\n-                        if (name != null) {\n-                            HtmlTag htag = HtmlTag.get(name);\n-                            return htag != null && htag.equals(HtmlTag.A);\n-                        }\n-                    }\n-                    return false;\n+                    return (tag instanceof StartElementTree st) && equalsIgnoreCase(st.getName(), \"a\");\n+                }\n+\n+                private boolean equalsIgnoreCase(Name name, String s) {\n+                    return name != null && name.toString().equalsIgnoreCase(s);\n@@ -1529,2 +1524,5 @@\n-                public Boolean visitAttribute(AttributeTree node, Content c) {\n-                    StringBuilder sb = new StringBuilder(SPACER).append(node.getName().toString());\n+                public Boolean visitAttribute(AttributeTree node, Content content) {\n+                    if (!content.isEmpty()) {\n+                        content.add(\" \");\n+                    }\n+                    content.add(node.getName());\n@@ -1532,1 +1530,0 @@\n-                        result.add(sb);\n@@ -1535,1 +1532,1 @@\n-                    sb.append(\"=\");\n+                    content.add(\"=\");\n@@ -1541,5 +1538,14 @@\n-                    sb.append(quote);\n-                    result.add(sb);\n-                    Content docRootContent = new ContentBuilder();\n-\n-                    boolean isHRef = inAnAtag() && node.getName().toString().equalsIgnoreCase(\"href\");\n+                    content.add(quote);\n+\n+                    \/* In the following code for an attribute value:\n+                     * 1. {@docRoot} followed by text beginning \"\/..\" is replaced by the value\n+                     *    of the docrootParent option, followed by the remainder of the text\n+                     * 2. in the value of an \"href\" attribute in a <a> tag, an initial text\n+                     *    value will have a relative link redirected.\n+                     * Note that, realistically, it only makes sense to ever use {@docRoot}\n+                     * at the beginning of a URL in an attribute value, but this is not\n+                     * required or enforced.\n+                     *\/\n+                    boolean isHRef = inAnAtag() && equalsIgnoreCase(node.getName(), \"href\");\n+                    boolean first = true;\n+                    DocRootTree pendingDocRoot = null;\n@@ -1547,11 +1553,8 @@\n-                        if (utils.isText(dt) && isHRef) {\n-                            String text = ((TextTree) dt).getBody();\n-                            if (text.startsWith(\"\/..\") && !options.docrootParent().isEmpty()) {\n-                                result.add(options.docrootParent());\n-                                docRootContent = new ContentBuilder();\n-                                result.add(textCleanup(text.substring(3), isLastNode));\n-                            } else {\n-                                if (!docRootContent.isEmpty()) {\n-                                    docRootContent = copyDocRootContent(docRootContent);\n-                                } else {\n-                                    text = redirectRelativeLinks(element, (TextTree) dt);\n+                        if (pendingDocRoot != null) {\n+                            if (dt instanceof TextTree tt) {\n+                                String text = tt.getBody();\n+                                if (text.startsWith(\"\/..\") && !options.docrootParent().isEmpty()) {\n+                                    content.add(options.docrootParent());\n+                                    content.add(textCleanup(text.substring(3), isLastNode));\n+                                    pendingDocRoot = null;\n+                                    continue;\n@@ -1559,1 +1562,13 @@\n-                                result.add(textCleanup(text, isLastNode));\n+                            pendingDocRoot.accept(this, content);\n+                            pendingDocRoot = null;\n+                        }\n+\n+                        if (dt instanceof TextTree tt) {\n+                            String text = tt.getBody();\n+                            if (first && isHRef) {\n+                                text = redirectRelativeLinks(element, tt);\n+                            }\n+                            content.add(textCleanup(text, isLastNode));\n+                        } else if (dt instanceof DocRootTree drt) {\n+                            \/\/ defer until we see what, if anything, follows this node\n+                            pendingDocRoot = drt;\n@@ -1562,2 +1577,1 @@\n-                            docRootContent = copyDocRootContent(docRootContent);\n-                            dt.accept(this, docRootContent);\n+                            dt.accept(this, content);\n@@ -1565,0 +1579,4 @@\n+                        first = false;\n+                    }\n+                    if (pendingDocRoot != null) {\n+                        pendingDocRoot.accept(this, content);\n@@ -1566,2 +1584,2 @@\n-                    copyDocRootContent(docRootContent);\n-                    result.add(quote);\n+\n+                    content.add(quote);\n@@ -1572,2 +1590,2 @@\n-                public Boolean visitComment(CommentTree node, Content c) {\n-                    result.add(new RawHtml(node.getBody()));\n+                public Boolean visitComment(CommentTree node, Content content) {\n+                    content.add(RawHtml.comment(node.getBody()));\n@@ -1577,15 +1595,2 @@\n-                private Content copyDocRootContent(Content content) {\n-                    if (!content.isEmpty()) {\n-                        result.add(content);\n-                        return new ContentBuilder();\n-                    }\n-                    return content;\n-                }\n-\n-                public Boolean visitDocRoot(DocRootTree node, Content c) {\n-                    Content docRootContent = getInlineTagOutput(element, node, context);\n-                    if (c != null) {\n-                        c.add(docRootContent);\n-                    } else {\n-                        result.add(docRootContent);\n-                    }\n+                public Boolean visitDocRoot(DocRootTree node, Content content) {\n+                    content.add(getInlineTagOutput(element, node, context));\n@@ -1597,3 +1602,2 @@\n-                public Boolean visitEndElement(EndElementTree node, Content c) {\n-                    RawHtml rawHtml = new RawHtml(\"<\/\" + node.getName() + \">\");\n-                    result.add(rawHtml);\n+                public Boolean visitEndElement(EndElementTree node, Content content) {\n+                    content.add(RawHtml.endElement(node.getName()));\n@@ -1604,2 +1608,2 @@\n-                public Boolean visitEntity(EntityTree node, Content c) {\n-                    result.add(new RawHtml(node.toString()));\n+                public Boolean visitEntity(EntityTree node, Content content) {\n+                    content.add(Entity.of(node.getName()));\n@@ -1610,1 +1614,1 @@\n-                public Boolean visitErroneous(ErroneousTree node, Content c) {\n+                public Boolean visitErroneous(ErroneousTree node, Content content) {\n@@ -1620,1 +1624,1 @@\n-                            result.add(invalidTagOutput(resources.getText(\"doclet.tag.invalid_input\", body),\n+                            content.add(invalidTagOutput(resources.getText(\"doclet.tag.invalid_input\", body),\n@@ -1624,1 +1628,1 @@\n-                            result.add(invalidTagOutput(resources.getText(\"doclet.tag.invalid\", tagName),\n+                            content.add(invalidTagOutput(resources.getText(\"doclet.tag.invalid\", tagName),\n@@ -1632,1 +1636,1 @@\n-                public Boolean visitInheritDoc(InheritDocTree node, Content c) {\n+                public Boolean visitInheritDoc(InheritDocTree node, Content content) {\n@@ -1634,1 +1638,1 @@\n-                    result.add(output);\n+                    content.add(output);\n@@ -1640,1 +1644,1 @@\n-                public Boolean visitIndex(IndexTree node, Content p) {\n+                public Boolean visitIndex(IndexTree node, Content content) {\n@@ -1643,1 +1647,1 @@\n-                        result.add(output);\n+                        content.add(output);\n@@ -1649,1 +1653,1 @@\n-                public Boolean visitLink(LinkTree node, Content c) {\n+                public Boolean visitLink(LinkTree node, Content content) {\n@@ -1660,1 +1664,1 @@\n-                        result.add(label);\n+                        content.add(label);\n@@ -1662,2 +1666,2 @@\n-                        Content content = seeTagToContent(element, node, context.within(node));\n-                        result.add(content);\n+                        Content c = seeTagToContent(element, node, context.within(node));\n+                        content.add(c);\n@@ -1669,1 +1673,1 @@\n-                public Boolean visitLiteral(LiteralTree node, Content c) {\n+                public Boolean visitLiteral(LiteralTree node, Content content) {\n@@ -1671,4 +1675,2 @@\n-                    Content content = Text.of(utils.normalizeNewlines(s));\n-                    if (node.getKind() == CODE)\n-                        content = HtmlTree.CODE(content);\n-                    result.add(content);\n+                    Content t = Text.of(utils.normalizeNewlines(s));\n+                    content.add(node.getKind() == CODE ? HtmlTree.CODE(t) : t);\n@@ -1679,2 +1681,2 @@\n-                public Boolean visitSee(SeeTree node, Content c) {\n-                    result.add(seeTagToContent(element, node, context));\n+                public Boolean visitSee(SeeTree node, Content content) {\n+                    content.add(seeTagToContent(element, node, context));\n@@ -1685,5 +1687,2 @@\n-                public Boolean visitStartElement(StartElementTree node, Content c) {\n-                    String text = \"<\" + node.getName();\n-                    RawHtml rawHtml = new RawHtml(utils.normalizeNewlines(text));\n-                    result.add(rawHtml);\n-\n+                public Boolean visitStartElement(StartElementTree node, Content content) {\n+                    Content attrs = new ContentBuilder();\n@@ -1691,1 +1690,1 @@\n-                        dt.accept(this, null);\n+                        dt.accept(this, attrs);\n@@ -1693,1 +1692,1 @@\n-                    result.add(new RawHtml(node.isSelfClosing() ? \"\/>\" : \">\"));\n+                    content.add(RawHtml.startElement(node.getName(), attrs, node.isSelfClosing()));\n@@ -1698,1 +1697,1 @@\n-                public Boolean visitSummary(SummaryTree node, Content c) {\n+                public Boolean visitSummary(SummaryTree node, Content content) {\n@@ -1700,1 +1699,1 @@\n-                    result.add(output);\n+                    content.add(output);\n@@ -1705,1 +1704,1 @@\n-                public Boolean visitSystemProperty(SystemPropertyTree node, Content p) {\n+                public Boolean visitSystemProperty(SystemPropertyTree node, Content content) {\n@@ -1708,1 +1707,1 @@\n-                        result.add(output);\n+                        content.add(output);\n@@ -1731,1 +1730,1 @@\n-                public Boolean visitText(TextTree node, Content c) {\n+                public Boolean visitText(TextTree node, Content content) {\n@@ -1733,1 +1732,3 @@\n-                    result.add(new RawHtml(textCleanup(text, isLastNode, commentRemoved)));\n+                    result.add(text.startsWith(\"<![CDATA[\")\n+                            ? RawHtml.cdata(text)\n+                            : Text.of(textCleanup(text, isLastNode, commentRemoved)));\n@@ -1738,1 +1739,1 @@\n-                protected Boolean defaultAction(DocTree node, Content c) {\n+                protected Boolean defaultAction(DocTree node, Content content) {\n@@ -1741,1 +1742,1 @@\n-                        result.add(output);\n+                        content.add(output);\n@@ -1746,1 +1747,3 @@\n-            }.visit(tag, null);\n+            };\n+\n+            boolean allDone = docTreeVisitor.visit(tag, result);\n@@ -1748,0 +1751,1 @@\n+\n@@ -1900,9 +1904,0 @@\n-    \/**\n-     * According to\n-     * <cite>The Java Language Specification<\/cite>,\n-     * all the outer classes and static nested classes are core classes.\n-     *\/\n-    public boolean isCoreClass(TypeElement typeElement) {\n-        return utils.getEnclosingTypeElement(typeElement) == null || utils.isStatic(typeElement);\n-    }\n-\n@@ -2169,0 +2164,1 @@\n+\n@@ -2178,0 +2174,1 @@\n+\n@@ -2182,0 +2179,1 @@\n+\n@@ -2193,0 +2191,1 @@\n+\n@@ -2277,4 +2276,0 @@\n-    Script getMainBodyScript() {\n-        return mainBodyScript;\n-    }\n-\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDocletWriter.java","additions":104,"deletions":109,"binary":false,"changes":213,"status":"modified"},{"patch":"@@ -1154,0 +1154,10 @@\n+        TextTree format = tree.getFormat();\n+        if (format != null) {\n+            String f = format.getBody().toString();\n+            long count = format.getBody().toString().chars()\n+                    .filter(ch -> ch == '%')\n+                    .count();\n+            if (count != 1) {\n+                env.messages.error(REFERENCE, format, \"dc.value.bad.format\", f);\n+            }\n+        }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclint\/Checker.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-static volatile int callbacksEnabled = NSK_FALSE;\n+static volatile int callbacksEnabled = JNI_FALSE;\n@@ -211,1 +211,1 @@\n-  callbacksEnabled = NSK_TRUE;\n+  callbacksEnabled = JNI_TRUE;\n@@ -217,1 +217,1 @@\n-  callbacksEnabled = NSK_FALSE;\n+  callbacksEnabled = JNI_FALSE;\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/FramePop\/framepop02\/libframepop02.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}