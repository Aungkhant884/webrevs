{"files":[{"patch":"@@ -527,3 +527,3 @@\n-<p>On modern versions of macOS, signing and notarizing applications are required before distribution. For more background on what this means and how it works, see Apple's documentation. To help support this, the JDK build can be configured to automatically sign all native binaries and the JDK bundle with all the options needed for successful notarization, as well as all the entitlements required by the JDK. To enable <code>hardened<\/code> signing, use configure parameter <code>--with-macosx-codesign=hardened<\/code> and configure the signing identity you wish to use with <code>--with-macosx-codesign-identity=&lt;identity&gt;<\/code>. The identity refers to a signing identity from Apple that needs to be preinstalled on the build host.<\/p>\n-<p>When not signing with the hardened option for distribution, the JDK build will still attempt to perform <code>adhoc<\/code> signing, to add the special entitlement <code>com.apple.security.get-task-allow<\/code> to each binary. This entitlement is required to be able to debug a process or dump its core. Note that adding this entitlement makes the build invalid for notarization, so it is only added when signing in <code>debug<\/code> mode. To explicitly enable this kind of adhoc signing use configure parameter <code>--with-macosx-codesign=debug<\/code>. It will be enabled by default in most cases.<\/p>\n-<p>If no macosx codesign option is specified, the default is to try for <code>hardened<\/code> signing if the debug level is <code>release<\/code> and either the default identity or the specified identity is valid, if not <code>debug<\/code> signing is chosen if it works and if nothing works, the codesign step is skipped. Note that on <code>aarch64<\/code>, the Xcode linker will always perform a default <code>adhoc<\/code> signing without any entitlements, causing debugging and core dumps not to work, unless this is signature replaced by the <code>debug<\/code> sign operation.<\/p>\n+<p>Modern versions of macOS require applications to be signed and notarizied before distribution. See Apple's documentation for more background on what this means and how it works. To help support this, the JDK build can be configured to automatically sign all native binaries, and the JDK bundle, with all the options needed for successful notarization, as well as all the entitlements required by the JDK. To enable <code>hardened<\/code> signing, use configure parameter <code>--with-macosx-codesign=hardened<\/code> and configure the signing identity you wish to use with <code>--with-macosx-codesign-identity=&lt;identity&gt;<\/code>. The identity refers to a signing identity from Apple that needs to be preinstalled on the build host.<\/p>\n+<p>When not signing for distribution with the hardened option, the JDK build will still attempt to perform <code>adhoc<\/code> signing, to add the special entitlement <code>com.apple.security.get-task-allow<\/code> to each binary. This entitlement is required to be able to attach to a process or dump its core. Note that adding this entitlement makes the build invalid for notarization, so it is only added when signing in <code>debug<\/code> mode. To explicitly enable this kind of adhoc signing, use configure parameter <code>--with-macosx-codesign=debug<\/code>. It will be enabled by default in most cases.<\/p>\n+<p>If no macosx codesign option is specified, the default is to try for <code>hardened<\/code> signing if the debug level is <code>release<\/code> and either the default identity or the specified identity is valid. If hardened isn't possible, then <code>debug<\/code> signing is chosen if it works. If nothing works, the codesign step is skipped. Note that on <code>aarch64<\/code>, the Xcode linker will always perform a default <code>adhoc<\/code> signing without any entitlements, causing attaching and core dumps not to work.<\/p>\n","filename":"doc\/building.html","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -884,6 +884,6 @@\n-On modern versions of macOS, signing and notarizing applications are required\n-before distribution. For more background on what this means and how it works,\n-see Apple's documentation. To help support this, the JDK build can be configured\n-to automatically sign all native binaries and the JDK bundle with all the\n-options needed for successful notarization, as well as all the entitlements\n-required by the JDK. To enable `hardened` signing, use configure parameter\n+Modern versions of macOS require applications to be signed and notarizied before\n+distribution. See Apple's documentation for more background on what this means\n+and how it works. To help support this, the JDK build can be configured to\n+automatically sign all native binaries, and the JDK bundle, with all the options\n+needed for successful notarization, as well as all the entitlements required by\n+the JDK. To enable `hardened` signing, use configure parameter\n@@ -894,1 +894,1 @@\n-When not signing with the hardened option for distribution, the JDK build will\n+When not signing for distribution with the hardened option, the JDK build will\n@@ -897,1 +897,1 @@\n-to be able to debug a process or dump its core. Note that adding this\n+to be able to attach to a process or dump its core. Note that adding this\n@@ -899,1 +899,1 @@\n-signing in `debug` mode. To explicitly enable this kind of adhoc signing use\n+signing in `debug` mode. To explicitly enable this kind of adhoc signing, use\n@@ -905,5 +905,4 @@\n-specified identity is valid, if not `debug` signing is chosen if it works and if\n-nothing works, the codesign step is skipped. Note that on `aarch64`, the Xcode\n-linker will always perform a default `adhoc` signing without any entitlements,\n-causing debugging and core dumps not to work, unless this is signature replaced\n-by the `debug` sign operation.\n+specified identity is valid. If hardened isn't possible, then `debug` signing is\n+chosen if it works. If nothing works, the codesign step is skipped. Note that on\n+`aarch64`, the Xcode linker will always perform a default `adhoc` signing\n+without any entitlements, causing attaching and core dumps not to work.\n","filename":"doc\/building.md","additions":13,"deletions":14,"binary":false,"changes":27,"status":"modified"}]}