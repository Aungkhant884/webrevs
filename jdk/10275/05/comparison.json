{"files":[{"patch":"@@ -73,0 +73,3 @@\n+<li><a href=\"#signing\">Signing<\/a><ul>\n+<li><a href=\"#macos-1\">macOS<\/a><\/li>\n+<\/ul><\/li>\n@@ -522,0 +525,6 @@\n+<h2 id=\"signing\">Signing<\/h2>\n+<h3 id=\"macos-1\">macOS<\/h3>\n+<p>Modern versions of macOS require applications to be signed and notarizied before distribution. See Apple's documentation for more background on what this means and how it works. To help support this, the JDK build can be configured to automatically sign all native binaries, and the JDK bundle, with all the options needed for successful notarization, as well as all the entitlements required by the JDK. To enable <code>hardened<\/code> signing, use configure parameter <code>--with-macosx-codesign=hardened<\/code> and configure the signing identity you wish to use with <code>--with-macosx-codesign-identity=&lt;identity&gt;<\/code>. The identity refers to a signing identity from Apple that needs to be preinstalled on the build host.<\/p>\n+<p>When not signing for distribution with the hardened option, the JDK build will still attempt to perform <code>adhoc<\/code> signing to add the special entitlement <code>com.apple.security.get-task-allow<\/code> to each binary. This entitlement is required to be able to dump core files from a process. Note that adding this entitlement makes the build invalid for notarization, so it is only added when signing in <code>debug<\/code> mode. To explicitly enable this kind of adhoc signing, use configure parameter <code>--with-macosx-codesign=debug<\/code>. It will be enabled by default in most cases.<\/p>\n+<p>It's also possible to completely disable any explicit codesign operations done by the JDK build using the configure parameter <code>--without-macosx-codesign<\/code>. The exact behavior then depends on the architecture. For macOS on x64, it (at least at the time of this writing) results in completely unsigned binaries that should still work fine for development and debugging purposes. On aarch64, the Xcode linker will apply a default &quot;adhoc&quot; signing, without any entitlements. Such a build does not allow dumping core files.<\/p>\n+<p>The default mode &quot;auto&quot; will try for <code>hardened<\/code> signing if the debug level is <code>release<\/code> and either the default identity or the specified identity is valid. If hardened isn't possible, then <code>debug<\/code> signing is chosen if it works. If nothing works, the codesign build step is disabled.<\/p>\n","filename":"doc\/building.html","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -880,0 +880,36 @@\n+## Signing\n+\n+### macOS\n+\n+Modern versions of macOS require applications to be signed and notarizied before\n+distribution. See Apple's documentation for more background on what this means\n+and how it works. To help support this, the JDK build can be configured to\n+automatically sign all native binaries, and the JDK bundle, with all the options\n+needed for successful notarization, as well as all the entitlements required by\n+the JDK. To enable `hardened` signing, use configure parameter\n+`--with-macosx-codesign=hardened` and configure the signing identity you wish to\n+use with `--with-macosx-codesign-identity=<identity>`. The identity refers to a\n+signing identity from Apple that needs to be preinstalled on the build host.\n+\n+When not signing for distribution with the hardened option, the JDK build will\n+still attempt to perform `adhoc` signing to add the special entitlement\n+`com.apple.security.get-task-allow` to each binary. This entitlement is required\n+to be able to dump core files from a process. Note that adding this entitlement\n+makes the build invalid for notarization, so it is only added when signing in\n+`debug` mode. To explicitly enable this kind of adhoc signing, use configure\n+parameter `--with-macosx-codesign=debug`. It will be enabled by default in most\n+cases.\n+\n+It's also possible to completely disable any explicit codesign operations done\n+by the JDK build using the configure parameter `--without-macosx-codesign`.\n+The exact behavior then depends on the architecture. For macOS on x64, it (at\n+least at the time of this writing) results in completely unsigned binaries that\n+should still work fine for development and debugging purposes. On aarch64, the\n+Xcode linker will apply a default \"adhoc\" signing, without any entitlements.\n+Such a build does not allow dumping core files.\n+\n+The default mode \"auto\" will try for `hardened` signing if the debug level is\n+`release` and either the default identity or the specified identity is valid.\n+If hardened isn't possible, then `debug` signing is chosen if it works. If\n+nothing works, the codesign build step is disabled.\n+\n","filename":"doc\/building.md","additions":36,"deletions":0,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -281,10 +281,1 @@\n-  # On Macosx release builds, when there is a code signing certificate available,\n-  # the final bundle layout can be signed.\n-  SIGN_BUNDLE := false\n-  ifeq ($(call isTargetOs, macosx)+$(DEBUG_LEVEL), true+release)\n-    ifneq ($(CODESIGN), )\n-      SIGN_BUNDLE := true\n-    endif\n-  endif\n-\n-  ifeq ($(SIGN_BUNDLE), true)\n+  ifeq ($(MACOSX_CODESIGN_MODE), hardened)\n","filename":"make\/Bundles.gmk","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -379,35 +379,0 @@\n-\n-    # Check for user provided code signing identity.\n-    UTIL_ARG_WITH(NAME: macosx-codesign-identity, TYPE: string,\n-        DEFAULT: openjdk_codesign, CHECK_VALUE: UTIL_CHECK_STRING_NON_EMPTY,\n-        DESC: [specify the macosx code signing identity],\n-        CHECKING_MSG: [for macosx code signing identity]\n-    )\n-    AC_SUBST(MACOSX_CODESIGN_IDENTITY)\n-\n-    if test \"x$CODESIGN\" != \"x\"; then\n-      # Verify that the codesign certificate is present\n-      AC_MSG_CHECKING([if codesign certificate is present])\n-      $RM codesign-testfile\n-      $TOUCH codesign-testfile\n-      $CODESIGN -s \"$MACOSX_CODESIGN_IDENTITY\" codesign-testfile 2>&AS_MESSAGE_LOG_FD \\\n-          >&AS_MESSAGE_LOG_FD || CODESIGN=\n-      $RM codesign-testfile\n-      if test \"x$CODESIGN\" = x; then\n-        AC_MSG_RESULT([no])\n-      else\n-        AC_MSG_RESULT([yes])\n-        # Verify that the codesign has --option runtime\n-        AC_MSG_CHECKING([if codesign has --option runtime])\n-        $RM codesign-testfile\n-        $TOUCH codesign-testfile\n-        $CODESIGN --option runtime -s \"$MACOSX_CODESIGN_IDENTITY\" codesign-testfile \\\n-            2>&AS_MESSAGE_LOG_FD >&AS_MESSAGE_LOG_FD || CODESIGN=\n-        $RM codesign-testfile\n-        if test \"x$CODESIGN\" = x; then\n-          AC_MSG_ERROR([codesign does not have --option runtime. macOS 10.13.6 and above is required.])\n-        else\n-          AC_MSG_RESULT([yes])\n-        fi\n-      fi\n-    fi\n","filename":"make\/autoconf\/basic_tools.m4","additions":0,"deletions":35,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -250,0 +250,1 @@\n+JDKOPT_SETUP_MACOSX_SIGNING\n","filename":"make\/autoconf\/configure.ac","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -699,0 +699,102 @@\n+\n+################################################################################\n+#\n+# Setup signing on macOS. This can either be setup to sign with a real identity\n+# and enabling the hardened runtime, or it can simply add the debug entitlement\n+# com.apple.security.get-task-allow without actually signing any binaries. The\n+# latter is needed to be able to debug processes and dump core files on modern\n+# versions of macOS. It can also be skipped completely.\n+#\n+# Check if codesign will run with the given parameters\n+# $1: Parameters to run with\n+# $2: Checking message\n+# Sets CODESIGN_SUCCESS=true\/false\n+AC_DEFUN([JDKOPT_CHECK_CODESIGN_PARAMS],\n+[\n+  PARAMS=\"$1\"\n+  MESSAGE=\"$2\"\n+  CODESIGN_TESTFILE=\"$CONFIGURESUPPORT_OUTPUTDIR\/codesign-testfile\"\n+  $RM \"$CODESIGN_TESTFILE\"\n+  $TOUCH \"$CODESIGN_TESTFILE\"\n+  CODESIGN_SUCCESS=false\n+  $CODESIGN $PARAMS \"$CODESIGN_TESTFILE\" 2>&AS_MESSAGE_LOG_FD \\\n+      >&AS_MESSAGE_LOG_FD && CODESIGN_SUCCESS=true\n+  $RM \"$CODESIGN_TESTFILE\"\n+  AC_MSG_CHECKING([$MESSAGE])\n+  if test \"x$CODESIGN_SUCCESS\" = \"xtrue\"; then\n+    AC_MSG_RESULT([yes])\n+  else\n+    AC_MSG_RESULT([no])\n+  fi\n+])\n+\n+AC_DEFUN([JDKOPT_CHECK_CODESIGN_HARDENED],\n+[\n+  JDKOPT_CHECK_CODESIGN_PARAMS([-s \"$MACOSX_CODESIGN_IDENTITY\" --option runtime],\n+      [if codesign with hardened runtime is possible])\n+])\n+\n+AC_DEFUN([JDKOPT_CHECK_CODESIGN_DEBUG],\n+[\n+  JDKOPT_CHECK_CODESIGN_PARAMS([-s -], [if debug mode codesign is possible])\n+])\n+\n+AC_DEFUN([JDKOPT_SETUP_MACOSX_SIGNING],\n+[\n+  ENABLE_CODESIGN=false\n+  if test \"x$OPENJDK_TARGET_OS\" = \"xmacosx\" && test \"x$CODESIGN\" != \"x\"; then\n+\n+    UTIL_ARG_WITH(NAME: macosx-codesign, TYPE: literal, OPTIONAL: true,\n+        VALID_VALUES: [hardened debug auto], DEFAULT: auto,\n+        ENABLED_DEFAULT: true,\n+        CHECKING_MSG: [for macosx code signing mode],\n+        DESC: [set the macosx code signing mode (hardened, debug, auto)]\n+    )\n+\n+    MACOSX_CODESIGN_MODE=disabled\n+    if test \"x$MACOSX_CODESIGN_ENABLED\" = \"xtrue\"; then\n+\n+      # Check for user provided code signing identity.\n+      UTIL_ARG_WITH(NAME: macosx-codesign-identity, TYPE: string,\n+          DEFAULT: openjdk_codesign, CHECK_VALUE: UTIL_CHECK_STRING_NON_EMPTY,\n+          DESC: [specify the macosx code signing identity],\n+          CHECKING_MSG: [for macosx code signing identity]\n+      )\n+      AC_SUBST(MACOSX_CODESIGN_IDENTITY)\n+\n+      if test \"x$MACOSX_CODESIGN\" = \"xauto\"; then\n+        # Only try to default to hardened signing on release builds\n+        if test \"x$DEBUG_LEVEL\" = \"xrelease\"; then\n+          JDKOPT_CHECK_CODESIGN_HARDENED\n+          if test \"x$CODESIGN_SUCCESS\" = \"xtrue\"; then\n+            MACOSX_CODESIGN_MODE=hardened\n+          fi\n+        fi\n+        if test \"x$MACOSX_CODESIGN_MODE\" = \"xdisabled\"; then\n+          JDKOPT_CHECK_CODESIGN_DEBUG\n+          if test \"x$CODESIGN_SUCCESS\" = \"xtrue\"; then\n+            MACOSX_CODESIGN_MODE=debug\n+          fi\n+        fi\n+        AC_MSG_CHECKING([for macosx code signing mode])\n+        AC_MSG_RESULT([$MACOSX_CODESIGN_MODE])\n+      elif test \"x$MACOSX_CODESIGN\" = \"xhardened\"; then\n+        JDKOPT_CHECK_CODESIGN_HARDENED\n+        if test \"x$CODESIGN_SUCCESS\" = \"xfalse\"; then\n+          AC_MSG_ERROR([Signing with hardened runtime is not possible])\n+        fi\n+        MACOSX_CODESIGN_MODE=hardened\n+      elif test \"x$MACOSX_CODESIGN\" = \"xdebug\"; then\n+        JDKOPT_CHECK_CODESIGN_DEBUG\n+        if test \"x$CODESIGN_SUCCESS\" = \"xfalse\"; then\n+          AC_MSG_ERROR([Signing in debug mode is not possible])\n+        fi\n+        MACOSX_CODESIGN_MODE=debug\n+      else\n+        AC_MSG_ERROR([unknown value for --with-macosx-codesign: $MACOSX_CODESIGN])\n+      fi\n+    fi\n+    AC_SUBST(MACOSX_CODESIGN_IDENTITY)\n+    AC_SUBST(MACOSX_CODESIGN_MODE)\n+  fi\n+])\n","filename":"make\/autoconf\/jdk-options.m4","additions":102,"deletions":0,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -462,1 +462,2 @@\n-# The macosx code signing identity to use\n+# The macosx code signing configuration\n+MACOSX_CODESIGN_MODE:=@MACOSX_CODESIGN_MODE@\n","filename":"make\/autoconf\/spec.gmk.in","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -270,1 +270,6 @@\n-DEFAULT_ENTITLEMENTS_FILE := $(ENTITLEMENTS_DIR)\/default.plist\n+ifeq ($(MACOSX_CODESIGN_MODE), debug)\n+  CODESIGN_PLIST_SUFFIX := -debug\n+else\n+  CODESIGN_PLIST_SUFFIX :=\n+endif\n+DEFAULT_ENTITLEMENTS_FILE := $(ENTITLEMENTS_DIR)\/default$(CODESIGN_PLIST_SUFFIX).plist\n@@ -273,1 +278,1 @@\n-    $(foreach f, $(ENTITLEMENTS_DIR)\/$(strip $(notdir $1)).plist, \\\n+    $(foreach f, $(ENTITLEMENTS_DIR)\/$(strip $(notdir $1))$(CODESIGN_PLIST_SUFFIX).plist, \\\n@@ -1207,3 +1212,2 @@\n-                # This only works if the openjdk_codesign identity is present on the system. Let\n-                # silently fail otherwise.\n-                ifneq ($(CODESIGN), )\n+                # On macosx, optionally run codesign on every binary\n+                ifeq ($(MACOSX_CODESIGN_MODE), hardened)\n@@ -1212,0 +1216,2 @@\n+                else ifeq ($(MACOSX_CODESIGN_MODE), debug)\n+\t\t  $(CODESIGN) -f -s - --entitlements $$(call GetEntitlementsFile, $$@) $$@\n","filename":"make\/common\/NativeCompilation.gmk","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -15,1 +15,1 @@\n-    <key>com.apple.security.device.audio-input<\/key>\n+    <key>com.apple.security.get-task-allow<\/key>\n","filename":"make\/data\/macosxsigning\/default-debug.plist","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"make\/data\/macosxsigning\/java.plist","status":"copied"},{"patch":"@@ -5,2 +5,0 @@\n-    <key>com.apple.security.app-sandbox<\/key>\n-    <true\/>\n@@ -19,0 +17,2 @@\n+    <key>com.apple.security.get-task-allow<\/key>\n+    <true\/>\n","filename":"make\/data\/macosxsigning\/java-debug.plist","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/resources\/sandbox.plist","status":"copied"}]}