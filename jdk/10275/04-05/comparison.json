{"files":[{"patch":"@@ -528,2 +528,2 @@\n-<p>When not signing for distribution with the hardened option, the JDK build will still attempt to perform <code>adhoc<\/code> signing, to add the special entitlement <code>com.apple.security.get-task-allow<\/code> to each binary. This entitlement is required to be able to attach to a process or dump its core. Note that adding this entitlement makes the build invalid for notarization, so it is only added when signing in <code>debug<\/code> mode. To explicitly enable this kind of adhoc signing, use configure parameter <code>--with-macosx-codesign=debug<\/code>. It will be enabled by default in most cases.<\/p>\n-<p>It's also possible to completely disable any explicit codesign operations done by the JDK build using the configure parameter <code>--without-macosx-codesign<\/code>. The exact behavior then depends on the architecture. For macOS on x64, it (at least at the time of this writing) results in completely unsigned binaries that should still work fine for development and debugging purposes. On aarch64, the Xcode linker will apply a default &quot;adhoc&quot; signing, without any entitlements. Such a build will not allow being attached to or dumping core.<\/p>\n+<p>When not signing for distribution with the hardened option, the JDK build will still attempt to perform <code>adhoc<\/code> signing to add the special entitlement <code>com.apple.security.get-task-allow<\/code> to each binary. This entitlement is required to be able to dump core files from a process. Note that adding this entitlement makes the build invalid for notarization, so it is only added when signing in <code>debug<\/code> mode. To explicitly enable this kind of adhoc signing, use configure parameter <code>--with-macosx-codesign=debug<\/code>. It will be enabled by default in most cases.<\/p>\n+<p>It's also possible to completely disable any explicit codesign operations done by the JDK build using the configure parameter <code>--without-macosx-codesign<\/code>. The exact behavior then depends on the architecture. For macOS on x64, it (at least at the time of this writing) results in completely unsigned binaries that should still work fine for development and debugging purposes. On aarch64, the Xcode linker will apply a default &quot;adhoc&quot; signing, without any entitlements. Such a build does not allow dumping core files.<\/p>\n","filename":"doc\/building.html","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -895,1 +895,1 @@\n-still attempt to perform `adhoc` signing, to add the special entitlement\n+still attempt to perform `adhoc` signing to add the special entitlement\n@@ -897,5 +897,5 @@\n-to be able to attach to a process or dump its core. Note that adding this\n-entitlement makes the build invalid for notarization, so it is only added when\n-signing in `debug` mode. To explicitly enable this kind of adhoc signing, use\n-configure parameter `--with-macosx-codesign=debug`. It will be enabled by\n-default in most cases.\n+to be able to dump core files from a process. Note that adding this entitlement\n+makes the build invalid for notarization, so it is only added when signing in\n+`debug` mode. To explicitly enable this kind of adhoc signing, use configure\n+parameter `--with-macosx-codesign=debug`. It will be enabled by default in most\n+cases.\n@@ -909,1 +909,1 @@\n-Such a build will not allow being attached to or dumping core.\n+Such a build does not allow dumping core files.\n","filename":"doc\/building.md","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}