{"files":[{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Alibaba Group Holding Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef CPU_AARCH64_COMPRESSEDOOPS_AARCH64_HPP\n+#define CPU_AARCH64_COMPRESSEDOOPS_AARCH64_HPP\n+\n+#endif \/\/ CPU_AARCH64_COMPERSSEDOOPS_AARCH64_HPP\n","filename":"src\/hotspot\/cpu\/aarch64\/compressedOops_aarch64.hpp","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Alibaba Group Holding Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef CPU_ARM_COMPRESSEDOOPS_ARM_HPP\n+#define CPU_ARM_COMPRESSEDOOPS_ARM_HPP\n+\n+#endif \/\/ CPU_ARM_COMPERSSEDOOPS_ARM_HPP\n","filename":"src\/hotspot\/cpu\/arm\/compressedOops_arm.hpp","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Alibaba Group Holding Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef CPU_ZERO_COMPRESSEDOOPS_ZERO_HPP\n+#define CPU_ZERO_COMPRESSEDOOPS_ZERO_HPP\n+\n+#endif \/\/ CPU_ZERO_COMPERSSEDOOPS_ZERO_HPP\n","filename":"src\/hotspot\/cpu\/ppc\/compressedOops_ppc.hpp","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Alibaba Group Holding Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef CPU_RISCV_COMPRESSEDOOPS_RISCV_HPP\n+#define CPU_RISCV_COMPRESSEDOOPS_RISCV_HPP\n+\n+#endif \/\/ CPU_RISCV_COMPERSSEDOOPS_RISCV_HPP\n","filename":"src\/hotspot\/cpu\/riscv\/compressedOops_riscv.hpp","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Alibaba Group Holding Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef CPU_S390_COMPRESSEDOOPS_S390_HPP\n+#define CPU_S390_COMPRESSEDOOPS_S390_HPP\n+\n+#endif \/\/ CPU_S390_COMPERSSEDOOPS_S390_HPP\n","filename":"src\/hotspot\/cpu\/s390\/compressedOops_s390.hpp","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -613,0 +613,1 @@\n+  assert (post_addr_length != -1 || no_relocation, \"sanity\");\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -809,0 +809,10 @@\n+ public:\n+  \/\/ a wrapper of emit_operand_helper ,only used in ad file\n+  void emit_regmem(int reg_enc,\n+                   int base_enc, int index_enc, Address::ScaleFactor scale,\n+                   int disp,\n+                   RelocationHolder const& rspec) {\n+    assert(rspec.type() == relocInfo::none, \"sanity\");\n+    emit_operand_helper(reg_enc, base_enc, index_enc, scale, disp, rspec,\n+                        -1); \/\/ post_addr_length is unused if rspec is none\n+  };\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Alibaba Group Holding Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef CPU_X86_COMPRESSEDOOPS_X86_HPP\n+#define CPU_X86_COMPRESSEDOOPS_X86_HPP\n+\n+#if !defined(ZERO)\n+#ifdef _LP64\n+public:\n+  static bool     need_heapbase_reg()        { return UseCompressedOops && (PreserveHeapbaseReg || _narrow_oop._base != nullptr); }\n+#endif\n+#endif \/\/ X86_64 only\n+\n+#endif \/\/ CPU_X86_COMPERSSEDOOPS_X86_HPP\n","filename":"src\/hotspot\/cpu\/x86\/compressedOops_x86.hpp","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -217,0 +217,2 @@\n+  LP64_ONLY(product(bool, PreserveHeapbaseReg, false,                       \\\n+          \"preserve r12 as heapbase reg\"))                                  \\\n","filename":"src\/hotspot\/cpu\/x86\/globals_x86.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5203,1 +5203,1 @@\n-  if (CheckCompressedOops) {\n+  if (CheckCompressedOops && X86_ONLY(CompressedOops::need_heapbase_reg())) {\n@@ -5331,1 +5331,1 @@\n-    if (LogMinObjAlignmentInBytes == Address::times_8) {\n+    if (LogMinObjAlignmentInBytes == Address::times_8 && CompressedOops::base() != nullptr) {\n@@ -5494,1 +5494,8 @@\n-        MacroAssembler::xorptr(r12_heapbase, r12_heapbase);\n+        if (CompressedOops::need_heapbase_reg()) {\n+          MacroAssembler::xorptr(r12_heapbase, r12_heapbase);\n+        }\n+#ifndef PRODUCT\n+        else {\n+          mov64(r12_heapbase, (int64_t)0xAABBCCDDAABBCCDD);\n+        }\n+#endif\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -382,1 +382,1 @@\n-  return UseCompressedOops;\n+  return CompressedOops::need_heapbase_reg();\n@@ -638,62 +638,2 @@\n-  int regenc = reg & 7;\n-  int baseenc = base & 7;\n-  int indexenc = index & 7;\n-\n-  \/\/ There is no index & no scale, use form without SIB byte\n-  if (index == 0x4 && scale == 0 && base != RSP_enc && base != R12_enc) {\n-    \/\/ If no displacement, mode is 0x0; unless base is [RBP] or [R13]\n-    if (disp == 0 && base != RBP_enc && base != R13_enc) {\n-      emit_rm(cbuf, 0x0, regenc, baseenc); \/\/ *\n-    } else if (-0x80 <= disp && disp < 0x80 && disp_reloc == relocInfo::none) {\n-      \/\/ If 8-bit displacement, mode 0x1\n-      emit_rm(cbuf, 0x1, regenc, baseenc); \/\/ *\n-      emit_d8(cbuf, disp);\n-    } else {\n-      \/\/ If 32-bit displacement\n-      if (base == -1) { \/\/ Special flag for absolute address\n-        emit_rm(cbuf, 0x0, regenc, 0x5); \/\/ *\n-        if (disp_reloc != relocInfo::none) {\n-          emit_d32_reloc(cbuf, disp, relocInfo::oop_type, RELOC_DISP32);\n-        } else {\n-          emit_d32(cbuf, disp);\n-        }\n-      } else {\n-        \/\/ Normal base + offset\n-        emit_rm(cbuf, 0x2, regenc, baseenc); \/\/ *\n-        if (disp_reloc != relocInfo::none) {\n-          emit_d32_reloc(cbuf, disp, relocInfo::oop_type, RELOC_DISP32);\n-        } else {\n-          emit_d32(cbuf, disp);\n-        }\n-      }\n-    }\n-  } else {\n-    \/\/ Else, encode with the SIB byte\n-    \/\/ If no displacement, mode is 0x0; unless base is [RBP] or [R13]\n-    if (disp == 0 && base != RBP_enc && base != R13_enc) {\n-      \/\/ If no displacement\n-      emit_rm(cbuf, 0x0, regenc, 0x4); \/\/ *\n-      emit_rm(cbuf, scale, indexenc, baseenc);\n-    } else {\n-      if (-0x80 <= disp && disp < 0x80 && disp_reloc == relocInfo::none) {\n-        \/\/ If 8-bit displacement, mode 0x1\n-        emit_rm(cbuf, 0x1, regenc, 0x4); \/\/ *\n-        emit_rm(cbuf, scale, indexenc, baseenc);\n-        emit_d8(cbuf, disp);\n-      } else {\n-        \/\/ If 32-bit displacement\n-        if (base == 0x04 ) {\n-          emit_rm(cbuf, 0x2, regenc, 0x4);\n-          emit_rm(cbuf, scale, indexenc, 0x04); \/\/ XXX is this valid???\n-        } else {\n-          emit_rm(cbuf, 0x2, regenc, 0x4);\n-          emit_rm(cbuf, scale, indexenc, baseenc); \/\/ *\n-        }\n-        if (disp_reloc != relocInfo::none) {\n-          emit_d32_reloc(cbuf, disp, relocInfo::oop_type, RELOC_DISP32);\n-        } else {\n-          emit_d32(cbuf, disp);\n-        }\n-      }\n-    }\n-  }\n+  MacroAssembler masm(&cbuf);\n+  masm.emit_regmem(reg, base, index, (Address::ScaleFactor)scale, disp, RelocationHolder::none);\n@@ -3998,2 +3938,0 @@\n-\/\/ Note: x86 architecture doesn't support \"scale * index + offset\" without a base\n-\/\/ we can't free r12 even with CompressedOops::base() == NULL.\n@@ -4001,1 +3939,1 @@\n-  predicate(UseCompressedOops && (CompressedOops::shift() == Address::times_8));\n+  predicate(UseCompressedOops && (CompressedOops::shift() == Address::times_8) && CompressedOops::need_heapbase_reg());\n@@ -4015,0 +3953,16 @@\n+\/\/ Indirect Narrow Oop Plus Offset Operand Zero Base\n+operand indCompressedOopOffsetZeroBase(rRegN reg, immL32 off) %{\n+  predicate(UseCompressedOops && (CompressedOops::shift() == Address::times_8) && !CompressedOops::need_heapbase_reg());\n+  constraint(ALLOC_IN_RC(ptr_reg));\n+  match(AddP (DecodeN reg) off);\n+\n+  op_cost(10);\n+  format %{\"[,$reg << 3 + $off] (zero base compressed oop addressing)\" %}\n+  interface(MEMORY_INTER) %{\n+    base(0xffffffff); \/\/ no base\n+    index($reg);\n+    scale(0x3);\n+    disp($off);\n+  %}\n+%}\n+\n@@ -4343,1 +4297,1 @@\n-               indCompressedOopOffset,\n+               indCompressedOopOffset,indCompressedOopOffsetZeroBase,\n@@ -6096,1 +6050,1 @@\n-  predicate(UseCompressedOops && (CompressedOops::base() == NULL) && n->as_Store()->barrier_data() == 0);\n+  predicate(UseCompressedOops && (CompressedOops::base() == NULL) && n->as_Store()->barrier_data() == 0 && CompressedOops::need_heapbase_reg());\n@@ -6148,1 +6102,1 @@\n-  predicate(CompressedOops::base() == NULL);\n+  predicate(CompressedOops::base() == NULL && CompressedOops::need_heapbase_reg());\n@@ -6191,1 +6145,1 @@\n-  predicate(UseCompressedOops && (CompressedOops::base() == NULL));\n+  predicate(UseCompressedOops && (CompressedOops::base() == NULL) && CompressedOops::need_heapbase_reg());\n@@ -6217,1 +6171,1 @@\n-  predicate(UseCompressedOops && (CompressedOops::base() == NULL));\n+  predicate(UseCompressedOops && (CompressedOops::base() == NULL) && CompressedOops::need_heapbase_reg());\n@@ -6243,1 +6197,1 @@\n-  predicate(UseCompressedOops && (CompressedOops::base() == NULL));\n+  predicate(UseCompressedOops && (CompressedOops::base() == NULL) && CompressedOops::need_heapbase_reg());\n@@ -6270,1 +6224,1 @@\n-  predicate(UseCompressedOops && (CompressedOops::base() == NULL));\n+  predicate(UseCompressedOops && (CompressedOops::base() == NULL) && CompressedOops::need_heapbase_reg());\n@@ -6296,1 +6250,1 @@\n-  predicate(UseCompressedOops && (CompressedOops::base() == NULL));\n+  predicate(UseCompressedOops && (CompressedOops::base() == NULL) && CompressedOops::need_heapbase_reg());\n@@ -6335,1 +6289,1 @@\n-  predicate(UseCompressedOops && (CompressedOops::base() == NULL));\n+  predicate(UseCompressedOops && (CompressedOops::base() == NULL) && CompressedOops::need_heapbase_reg());\n@@ -6387,1 +6341,1 @@\n-  predicate(UseCompressedOops && (CompressedOops::base() == NULL));\n+  predicate(UseCompressedOops && (CompressedOops::base() == NULL) && CompressedOops::need_heapbase_reg());\n@@ -12616,1 +12570,1 @@\n-            n->in(1)->as_Load()->barrier_data() == 0);\n+            n->in(1)->as_Load()->barrier_data() == 0 && CompressedOops::need_heapbase_reg());\n@@ -12711,1 +12665,1 @@\n-  predicate(CompressedOops::base() == NULL);\n+  predicate(CompressedOops::base() == NULL && CompressedOops::need_heapbase_reg());\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":32,"deletions":78,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Alibaba Group Holding Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef CPU_ZERO_COMPRESSEDOOPS_ZERO_HPP\n+#define CPU_ZERO_COMPRESSEDOOPS_ZERO_HPP\n+\n+#endif \/\/ CPU_ZERO_COMPERSSEDOOPS_ZERO_HPP\n","filename":"src\/hotspot\/cpu\/zero\/compressedOops_zero.hpp","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"runtime\/globals.hpp\"\n@@ -141,0 +142,2 @@\n+\n+#include CPU_HEADER(compressedOops)\n","filename":"src\/hotspot\/share\/oops\/compressedOops.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Alibaba Group Holding Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+\n+#if defined(X86) && !defined(ZERO)\n+#ifdef LP64\n+\n+#include \"asm\/macroAssembler.hpp\"\n+#include \"compiler\/disassembler.hpp\"\n+#include \"memory\/resourceArea.hpp\"\n+#include \"unittest.hpp\"\n+\n+#define __ _masm.\n+\n+static void asm_insn_check(const unsigned char *insns, const unsigned char *insns1, int len) {\n+  bool ok = true;\n+  if (memcmp(insns, insns1, len) != 0) {\n+    ResourceMark rm;\n+    stringStream ss;\n+    ss.print_cr(\"Ours:\");\n+    Disassembler::decode((address)insns1, (address)(insns1+len), &ss);\n+    ss.print_cr(\"Theirs:\");\n+    Disassembler::decode((address)insns, (address)(insns+len), &ss);\n+\n+    EXPECT_EQ(insns, insns1) << ss.as_string();\n+  }\n+}\n+\n+TEST_VM(AssemblerX86_64, validate) {\n+  \/\/ Smoke test for assembler\n+  BufferBlob* b = BufferBlob::create(\"x86_64Test\", 500000);\n+  CodeBuffer code(b);\n+  MacroAssembler _masm(&code);\n+  address entry = __ pc();\n+\n+  {\n+    address PC = __ pc();\n+    __ movq(rax, Address(noreg, r10, Address::times_8, 0x10));      \/\/ No base reg\n+\n+    static const unsigned char insns[] = {\n+       0x4a, 0x8b, 0x04, 0xd5, 0x10, 0x00, 0x00, 0x00 \/\/ mov 0x10(,%r10,8),%rax\n+    };\n+    asm_insn_check(PC, insns, sizeof(insns) \/ sizeof(unsigned char));\n+  }\n+\n+  BufferBlob::free(b);\n+}\n+\n+#endif  \/\/ LP64\n+#endif  \/\/ X86\n","filename":"test\/hotspot\/gtest\/x86\/test_assembler_x86.cpp","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"}]}