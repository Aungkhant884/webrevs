{"files":[{"patch":"@@ -0,0 +1,223 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+* @test\n+* @bug 8287835\n+* @summary Test float\/double to integral cast\n+* @modules jdk.incubator.vector\n+* @requires vm.compiler2.enabled\n+* @requires (os.simpleArch == \"x64\" & vm.cpu.features ~= \".*avx512dq.*\") \n+* @library \/test\/lib \/\n+* @run driver compiler.vectorapi.VectorFPtoIntCastTest\n+*\/\n+\n+package compiler.vectorapi;\n+\n+import jdk.incubator.vector.*;\n+import jdk.incubator.vector.FloatVector;\n+import compiler.lib.ir_framework.*;\n+import java.util.Random;\n+\n+public class VectorFPtoIntCastTest {\n+    private static final int COUNT = 16;\n+    private static final VectorSpecies<Float> fspec512 = FloatVector.SPECIES_512;\n+    private static final VectorSpecies<Double> dspec512 = DoubleVector.SPECIES_512;\n+    private static final VectorSpecies<Long> lspec512 = LongVector.SPECIES_512;\n+    private static final VectorSpecies<Integer> ispec512 = IntVector.SPECIES_512;\n+    private static final VectorSpecies<Integer> ispec256 = IntVector.SPECIES_256;\n+    private static final VectorSpecies<Short> sspec256 = ShortVector.SPECIES_256;\n+    private static final VectorSpecies<Short> sspec128 = ShortVector.SPECIES_128;\n+    private static final VectorSpecies<Byte> bspec128 = ByteVector.SPECIES_128;\n+    private static final VectorSpecies<Byte> bspec64  = ByteVector.SPECIES_64;\n+\n+    private float [] float_arr;\n+    private double [] double_arr;\n+    private long [] long_arr;\n+    private int [] int_arr;\n+    private short [] short_arr;\n+    private byte [] byte_arr;\n+\n+    private FloatVector fvec256;\n+    private FloatVector fvec512;\n+    private DoubleVector dvec512;\n+\n+    public static void main(String args[]) {\n+        TestFramework.runWithFlags(\"--add-modules=jdk.incubator.vector\");\n+    }\n+\n+    public VectorFPtoIntCastTest() {\n+        float_arr = new float[COUNT];\n+        double_arr = new double[COUNT];\n+        long_arr = new long[COUNT];\n+        int_arr = new int[COUNT];\n+        short_arr = new short[COUNT];\n+        byte_arr = new byte[COUNT];\n+\n+        Random ran = new Random(0);\n+        for (int i = 0; i < COUNT; i++) {\n+            float_arr[i] = ran.nextFloat();\n+            double_arr[i] = ran.nextDouble();\n+        }\n+\n+        fvec256 = FloatVector.fromArray(FloatVector.SPECIES_256, float_arr, 0);\n+        fvec512 = FloatVector.fromArray(FloatVector.SPECIES_512, float_arr, 0);\n+        dvec512 = DoubleVector.fromArray(DoubleVector.SPECIES_512, double_arr, 0);\n+    }\n+\n+    @Test\n+    @IR(counts = {\"F2X\", \">= 1\"})\n+    public void float2int() {\n+        var cvec = (IntVector)fvec512.convertShape(VectorOperators.F2I, ispec512, 0);\n+        cvec.intoArray(int_arr, 0);\n+        checkf2int(cvec.length());\n+    }\n+\n+    public void checkf2int(int len) {\n+        for (int i = 0; i < len; i++) {\n+            int expected = (int)float_arr[i];\n+            if (int_arr[i] != expected) {\n+                throw new RuntimeException(\"Invalid result: int_arr[\" + i + \"] = \" + int_arr[i] + \" != \" + expected);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {\"F2X\", \">= 1\"})\n+    public void float2long() {\n+        var cvec = (LongVector)fvec512.convertShape(VectorOperators.F2L, lspec512, 0);\n+        cvec.intoArray(long_arr, 0);\n+        checkf2long(cvec.length());\n+    }\n+\n+    public void checkf2long(int len) {\n+        for (int i = 0; i < len; i++) {\n+            long expected = (long)float_arr[i];\n+            if (long_arr[i] != expected) {\n+                throw new RuntimeException(\"Invalid result: long_arr[\" + i + \"] = \" + long_arr[i] + \" != \" + expected);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {\"F2X\", \">= 1\"})\n+    public void float2short() {\n+        var cvec = (ShortVector)fvec512.convertShape(VectorOperators.F2S, sspec256, 0);\n+        cvec.intoArray(short_arr, 0);\n+        checkf2short(cvec.length());\n+    }\n+\n+    public void checkf2short(int len) {\n+        for (int i = 0; i < len; i++) {\n+            short expected = (short)float_arr[i];\n+            if (short_arr[i] != expected) {\n+                throw new RuntimeException(\"Invalid result: short_arr[\" + i + \"] = \" + short_arr[i] + \" != \" + expected);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {\"F2X\", \">= 1\"})\n+    public void float2byte() {\n+        var cvec = (ByteVector)fvec512.convertShape(VectorOperators.F2B, bspec128, 0);\n+        cvec.intoArray(byte_arr, 0);\n+        checkf2byte(cvec.length());\n+    }\n+\n+    public void checkf2byte(int len) {\n+        for (int i = 0; i < len; i++) {\n+            byte expected = (byte)float_arr[i];\n+            if (byte_arr[i] != expected) {\n+                throw new RuntimeException(\"Invalid result: byte_arr[\" + i + \"] = \" + byte_arr[i] + \" != \" + expected);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {\"D2X\", \">= 1\"})\n+    public void double2int() {\n+        var cvec = (IntVector)dvec512.convertShape(VectorOperators.D2I, ispec256, 0);\n+        cvec.intoArray(int_arr, 0);\n+        checkd2int(cvec.length());\n+    }\n+\n+    public void checkd2int(int len) {\n+        for (int i = 0; i < len; i++) {\n+            int expected = (int)double_arr[i];\n+            if (int_arr[i] != expected) {\n+                throw new RuntimeException(\"Invalid result: int_arr[\" + i + \"] = \" + int_arr[i] + \" != \" + expected);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {\"D2X\", \">= 1\"})\n+    public void double2long() {\n+        var cvec = (LongVector)dvec512.convertShape(VectorOperators.D2L, lspec512, 0);\n+        cvec.intoArray(long_arr, 0);\n+        checkd2long(cvec.length());\n+    }\n+\n+    public void checkd2long(int len) {\n+        for (int i = 0; i < len; i++) {\n+            long expected = (long)double_arr[i];\n+            if (long_arr[i] != expected) {\n+                throw new RuntimeException(\"Invalid result: long_arr[\" + i + \"] = \" + long_arr[i] + \" != \" + expected);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {\"D2X\", \">= 1\"})\n+    public void double2short() {\n+        var cvec = (ShortVector)dvec512.convertShape(VectorOperators.D2S, sspec128, 0);\n+        cvec.intoArray(short_arr, 0);\n+        checkd2short(cvec.length());\n+    }\n+\n+    public void checkd2short(int len) {\n+        for (int i = 0; i < len; i++) {\n+            short expected = (short)double_arr[i];\n+            if (short_arr[i] != expected) {\n+                throw new RuntimeException(\"Invalid result: short_arr[\" + i + \"] = \" + short_arr[i] + \" != \" + expected);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @IR(counts = {\"D2X\", \">= 1\"})\n+    public void double2byte() {\n+        var cvec = (ByteVector)dvec512.convertShape(VectorOperators.D2B, bspec64, 0);\n+        cvec.intoArray(byte_arr, 0);\n+        checkd2byte(cvec.length());\n+    }\n+\n+    public void checkd2byte(int len) {\n+        for (int i = 0; i < len; i++) {\n+            byte expected = (byte)double_arr[i];\n+            if (byte_arr[i] != expected) {\n+                throw new RuntimeException(\"Invalid result: byte_arr[\" + i + \"] = \" + byte_arr[i] + \" != \" + expected);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorFPtoIntCastTest.java","additions":223,"deletions":0,"binary":false,"changes":223,"status":"added"}]}