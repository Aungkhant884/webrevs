{"files":[{"patch":"@@ -4275,0 +4275,22 @@\n+void C2_MacroAssembler::vector_castD2X_evex(BasicType to_elem_bt, XMMRegister dst, XMMRegister src, XMMRegister xtmp1,\n+                                            XMMRegister xtmp2, KRegister ktmp1, KRegister ktmp2,\n+                                            AddressLiteral double_sign_flip, Register scratch, int vec_enc) {\n+  vector_castD2L_evex(dst, src, xtmp1, xtmp2, ktmp1, ktmp2, double_sign_flip, scratch, vec_enc);\n+  if (to_elem_bt != T_LONG) {\n+    switch(to_elem_bt) {\n+      case T_INT:\n+        evpmovsqd(dst, dst, vec_enc);\n+        break;\n+      case T_SHORT:\n+        evpmovsqd(dst, dst, vec_enc);\n+        evpmovdw(dst, dst, vec_enc);\n+        break;\n+      case T_BYTE:\n+        evpmovsqd(dst, dst, vec_enc);\n+        evpmovdb(dst, dst, vec_enc);\n+        break;\n+      default: assert(false, \"%s\", type2name(to_elem_bt));\n+    }\n+  }\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -321,0 +321,4 @@\n+  void vector_castD2X_evex(BasicType to_elem_bt, XMMRegister dst, XMMRegister src, XMMRegister xtmp1,\n+                           XMMRegister xtmp2, KRegister ktmp1, KRegister ktmp2, AddressLiteral double_sign_flip,\n+                           Register scratch, int vec_enc);\n+\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7373,1 +7373,2 @@\n-    __ vector_castD2L_evex($dst$$XMMRegister, $src$$XMMRegister, $xtmp1$$XMMRegister,\n+    BasicType to_elem_bt = Matcher::vector_element_basic_type(this);\n+    __ vector_castD2X_evex(to_elem_bt, $dst$$XMMRegister, $src$$XMMRegister, $xtmp1$$XMMRegister,\n@@ -7376,17 +7377,0 @@\n-    BasicType to_elem_bt = Matcher::vector_element_basic_type(this);\n-    if (to_elem_bt != T_LONG) {\n-      switch(to_elem_bt) {\n-        case T_INT:\n-          __ evpmovsqd($dst$$XMMRegister, $dst$$XMMRegister, vlen_enc);\n-          break;\n-        case T_SHORT:\n-          __ evpmovsqd($dst$$XMMRegister, $dst$$XMMRegister, vlen_enc);\n-          __ evpmovdw($dst$$XMMRegister, $dst$$XMMRegister, vlen_enc);\n-          break;\n-        case T_BYTE:\n-          __ evpmovsqd($dst$$XMMRegister, $dst$$XMMRegister, vlen_enc);\n-          __ evpmovdb($dst$$XMMRegister, $dst$$XMMRegister, vlen_enc);\n-          break;\n-        default: assert(false, \"%s\", type2name(to_elem_bt));\n-      }\n-    }\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":2,"deletions":18,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -44,2 +44,0 @@\n-    private static final VectorSpecies<Float> fspec512 = FloatVector.SPECIES_512;\n-    private static final VectorSpecies<Double> dspec512 = DoubleVector.SPECIES_512;\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorFPtoIntCastTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,2 +58,2 @@\n-    public IntVector microFloat2Int() {\n-        return (IntVector)fvec512.convertShape(VectorOperators.F2I, IntVector.SPECIES_512, 0);\n+    public Vector microFloat2Int() {\n+        return fvec512.convertShape(VectorOperators.F2I, IntVector.SPECIES_512, 0);\n@@ -63,2 +63,2 @@\n-    public LongVector microFloat2Long() {\n-        return (LongVector)fvec256.convertShape(VectorOperators.F2L, LongVector.SPECIES_512, 0);\n+    public Vector microFloat2Long() {\n+        return fvec256.convertShape(VectorOperators.F2L, LongVector.SPECIES_512, 0);\n@@ -68,2 +68,2 @@\n-    public ShortVector microFloat2Short() {\n-        return (ShortVector)fvec512.convertShape(VectorOperators.F2S, ShortVector.SPECIES_256, 0);\n+    public Vector microFloat2Short() {\n+        return fvec512.convertShape(VectorOperators.F2S, ShortVector.SPECIES_256, 0);\n@@ -73,2 +73,2 @@\n-    public ByteVector microFloat2Byte() {\n-        return (ByteVector)fvec512.convertShape(VectorOperators.F2B, ByteVector.SPECIES_128, 0);\n+    public Vector microFloat2Byte() {\n+        return fvec512.convertShape(VectorOperators.F2B, ByteVector.SPECIES_128, 0);\n@@ -78,2 +78,2 @@\n-    public IntVector microDouble2Int() {\n-        return (IntVector)dvec512.convertShape(VectorOperators.D2I, IntVector.SPECIES_256, 0);\n+    public Vector microDouble2Int() {\n+        return dvec512.convertShape(VectorOperators.D2I, IntVector.SPECIES_256, 0);\n@@ -83,2 +83,2 @@\n-    public LongVector microDouble2Long() {\n-        return (LongVector)dvec512.convertShape(VectorOperators.D2L, LongVector.SPECIES_512, 0);\n+    public Vector microDouble2Long() {\n+        return dvec512.convertShape(VectorOperators.D2L, LongVector.SPECIES_512, 0);\n@@ -88,2 +88,2 @@\n-    public ShortVector microDouble2Short() {\n-        return (ShortVector)dvec512.convertShape(VectorOperators.D2S, ShortVector.SPECIES_128, 0);\n+    public Vector microDouble2Short() {\n+        return dvec512.convertShape(VectorOperators.D2S, ShortVector.SPECIES_128, 0);\n@@ -93,2 +93,2 @@\n-    public ByteVector microDouble2Byte() {\n-        return (ByteVector)dvec512.convertShape(VectorOperators.D2B, ByteVector.SPECIES_64, 0);\n+    public Vector microDouble2Byte() {\n+        return dvec512.convertShape(VectorOperators.D2B, ByteVector.SPECIES_64, 0);\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/VectorFPtoIntCastOperations.java","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"}]}