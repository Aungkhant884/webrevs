{"files":[{"patch":"@@ -36,0 +36,4 @@\n+  if (!super_t->isa_klassptr() ||\n+      (!sub_t->isa_klassptr() && !sub_t->isa_oopptr())) {\n+    return bottom_type();\n+  }\n","filename":"src\/hotspot\/share\/opto\/subtypenode.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 2023, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @key stress randomness\n+ * @requires vm.compiler2.enabled\n+ * @bug 8303279\n+ * @summary split_if() can call SubTypeCheckNode::sub() with raw null pointer\n+ *\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:-UseOnStackReplacement\n+ *                   -XX:-TieredCompilation -XX:-BackgroundCompilation\n+ *                   -XX:+StressIGVN -XX:StressSeed=598200189\n+ *                   -XX:CompileOnly=compiler.splitif.TestCrashAtIGVNSplitIfSubType::test\n+ *                   compiler.splitif.TestCrashAtIGVNSplitIfSubType\n+ *\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:-UseOnStackReplacement\n+ *                   -XX:-TieredCompilation -XX:-BackgroundCompilation\n+ *                   -XX:+StressIGVN\n+ *                   -XX:CompileOnly=compiler.splitif.TestCrashAtIGVNSplitIfSubType::test\n+ *                   compiler.splitif.TestCrashAtIGVNSplitIfSubType\n+ *\n+ *\/\n+\n+package compiler.splitif;\n+\n+public class TestCrashAtIGVNSplitIfSubType {\n+    private static volatile int barrier;\n+\n+    public static void main(String[] args) {\n+        A a = new A();\n+        B b = new B();\n+        for (int i = 0; i < 20_000; i++) {\n+            test(a);\n+            test(b);\n+            testHelper1(null, 0);\n+        }\n+    }\n+\n+    private static void test(Object o) {\n+        int i = 2;\n+        for (; i < 4; i *= 2) {\n+\n+        }\n+        o = testHelper1(o, i);\n+        if (o instanceof A) {\n+            barrier = 0x42;\n+        }\n+    }\n+\n+    private static Object testHelper1(Object o, int i) {\n+        if (i < 3) {\n+            o = null;\n+        } else {\n+            if (o == null) {\n+            }\n+        }\n+        if (i < 2) {\n+            barrier = 42;\n+        }\n+        return o;\n+    }\n+\n+    private static class A {\n+    }\n+\n+    private static class B {\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/splitif\/TestCrashAtIGVNSplitIfSubType.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"}]}