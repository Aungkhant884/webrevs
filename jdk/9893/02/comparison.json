{"files":[{"patch":"@@ -281,1 +281,0 @@\n-template class BasicHashtable<mtTracing>;\n","filename":"src\/hotspot\/share\/utilities\/hashtable.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-#include \"utilities\/hashtable.hpp\"\n+#include \"utilities\/resizeableResourceHash.hpp\"\n@@ -50,31 +50,7 @@\n-  class BitMapFragmentTable : public BasicHashtable<F> {\n-    class Entry : public BasicHashtableEntry<F> {\n-    public:\n-      uintptr_t _key;\n-      CHeapBitMap* _value;\n-\n-      Entry* next() {\n-        return (Entry*)BasicHashtableEntry<F>::next();\n-      }\n-    };\n-\n-  protected:\n-    Entry* bucket(int i) const;\n-\n-    Entry* new_entry(unsigned int hashValue, uintptr_t key, CHeapBitMap* value);\n-\n-    unsigned hash_segment(uintptr_t key) {\n-      unsigned hash = (unsigned)key;\n-      return hash ^ (hash >> 3);\n-    }\n-\n-    unsigned hash_to_index(unsigned hash) {\n-      return hash & (BasicHashtable<F>::table_size() - 1);\n-    }\n-\n-  public:\n-    BitMapFragmentTable(int table_size) : BasicHashtable<F>(table_size, sizeof(Entry)) {}\n-    ~BitMapFragmentTable();\n-    void add(uintptr_t key, CHeapBitMap* value);\n-    CHeapBitMap** lookup(uintptr_t key);\n-  };\n+  static unsigned hash_segment(const uintptr_t& key) {\n+    unsigned hash = (unsigned)key;\n+    return hash ^ (hash >> 3);\n+  }\n+\n+  typedef ResizeableResourceHashtable<uintptr_t, CHeapBitMap*, ResourceObj::C_HEAP, F,\n+                                      hash_segment> BitMapFragmentTable;\n","filename":"src\/hotspot\/share\/utilities\/objectBitSet.hpp","additions":8,"deletions":32,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#include \"utilities\/hashtable.inline.hpp\"\n@@ -42,1 +41,1 @@\n-        _bitmap_fragments(32),\n+        _bitmap_fragments(32, 8*K),\n@@ -56,46 +55,2 @@\n-}\n-\n-template<MEMFLAGS F>\n-ObjectBitSet<F>::BitMapFragmentTable::~BitMapFragmentTable() {\n-  for (int index = 0; index < BasicHashtable<F>::table_size(); index ++) {\n-    Entry* e = bucket(index);\n-    while (e != nullptr) {\n-      Entry* tmp = e;\n-      e = e->next();\n-      BasicHashtable<F>::free_entry(tmp);\n-    }\n-  }\n-}\n-\n-template<MEMFLAGS F>\n-inline typename ObjectBitSet<F>::BitMapFragmentTable::Entry* ObjectBitSet<F>::BitMapFragmentTable::bucket(int i) const {\n-  return (Entry*)BasicHashtable<F>::bucket(i);\n-}\n-\n-template<MEMFLAGS F>\n-inline typename ObjectBitSet<F>::BitMapFragmentTable::Entry*\n-  ObjectBitSet<F>::BitMapFragmentTable::new_entry(unsigned int hash, uintptr_t key, CHeapBitMap* value) {\n-\n-  Entry* entry = (Entry*)BasicHashtable<F>::new_entry(hash);\n-  entry->_key = key;\n-  entry->_value = value;\n-  return entry;\n-}\n-\n-template<MEMFLAGS F>\n-inline void ObjectBitSet<F>::BitMapFragmentTable::add(uintptr_t key, CHeapBitMap* value) {\n-  unsigned hash = hash_segment(key);\n-  Entry* entry = new_entry(hash, key, value);\n-  BasicHashtable<F>::add_entry(hash_to_index(hash), entry);\n-}\n-\n-template<MEMFLAGS F>\n-inline CHeapBitMap** ObjectBitSet<F>::BitMapFragmentTable::lookup(uintptr_t key) {\n-  unsigned hash = hash_segment(key);\n-  int index = hash_to_index(hash);\n-  for (Entry* e = bucket(index); e != NULL; e = e->next()) {\n-    if (e->hash() == hash && e->_key == key) {\n-      return &(e->_value);\n-    }\n-  }\n-  return NULL;\n+  \/\/ destructors for ResourceHashtable base deletes nodes, and\n+  \/\/ ResizeableResourceHashtableStorage deletes the table.\n@@ -117,1 +72,1 @@\n-  CHeapBitMap** found = _bitmap_fragments.lookup(granule);\n+  CHeapBitMap** found = _bitmap_fragments.get(granule);\n@@ -124,4 +79,2 @@\n-    if (_bitmap_fragments.number_of_entries() * 100 \/ _bitmap_fragments.table_size() > 25) {\n-      _bitmap_fragments.resize(_bitmap_fragments.table_size() * 2);\n-    }\n-    _bitmap_fragments.add(granule, bits);\n+    _bitmap_fragments.put(granule, bits);\n+    _bitmap_fragments.maybe_grow();\n","filename":"src\/hotspot\/share\/utilities\/objectBitSet.inline.hpp","additions":6,"deletions":53,"binary":false,"changes":59,"status":"modified"}]}