{"files":[{"patch":"@@ -73,2 +73,2 @@\n-      * The ASM API version implemented by this visitor. The value of this field must be one of {@link\n-      * Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6} or {@link Opcodes#ASM7}.\n+      * The ASM API version implemented by this visitor. The value of this field must be one of the\n+      * {@code ASM}<i>x<\/i> values in {@link Opcodes}.\n@@ -87,2 +87,2 @@\n-      * @param api the ASM API version implemented by this visitor. Must be one of {@link\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6} or {@link Opcodes#ASM7}.\n+      * @param api the ASM API version implemented by this visitor. Must be one of the {@code\n+      *     ASM}<i>x<\/i> values in {@link Opcodes}.\n@@ -90,1 +90,1 @@\n-    public AnnotationVisitor(final int api) {\n+    protected AnnotationVisitor(final int api) {\n@@ -97,2 +97,2 @@\n-      * @param api the ASM API version implemented by this visitor. Must be one of {@link\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6} or {@link Opcodes#ASM7}.\n+      * @param api the ASM API version implemented by this visitor. Must be one of the {@code\n+      *     ASM}<i>x<\/i> values in {@link Opcodes}.\n@@ -102,1 +102,1 @@\n-    public AnnotationVisitor(final int api, final AnnotationVisitor annotationVisitor) {\n+    protected AnnotationVisitor(final int api, final AnnotationVisitor annotationVisitor) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/AnnotationVisitor.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -100,0 +100,9 @@\n+    \/**\n+      * Returns the actual number of bytes in this vector.\n+      *\n+      * @return the actual number of bytes in this vector.\n+      *\/\n+    public int size() {\n+        return length;\n+    }\n+\n@@ -387,0 +396,3 @@\n+        if (length > data.length) {\n+            throw new AssertionError(\"Internal error\");\n+        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/ByteVector.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -343,0 +343,1 @@\n+    @SuppressWarnings(\"PMD.UseTryWithResources\")\n@@ -348,1 +349,1 @@\n-        int bufferSize = calculateBufferSize(inputStream);\n+        int bufferSize = computeBufferSize(inputStream);\n@@ -369,1 +370,1 @@\n-    private static int calculateBufferSize(final InputStream inputStream) throws IOException {\n+    private static int computeBufferSize(final InputStream inputStream) throws IOException {\n@@ -372,4 +373,3 @@\n-          * Some implementations can return 0 while holding available data\n-          * (e.g. new FileInputStream(\"\/proc\/a_file\"))\n-          * Also in some pathological cases a very small number might be returned,\n-          * and in this case we use default size\n+          * Some implementations can return 0 while holding available data (e.g. new\n+          * FileInputStream(\"\/proc\/a_file\")). Also in some pathological cases a very small number might\n+          * be returned, and in this case we use a default size.\n@@ -894,1 +894,1 @@\n-        \/\/ Read the  'provides_count' and 'provides' fields.\n+        \/\/ Read the 'provides_count' and 'provides' fields.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/ClassReader.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -75,2 +75,2 @@\n-      * The ASM API version implemented by this visitor. The value of this field must be one of {@link\n-      * Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6} or {@link Opcodes#ASM7}.\n+      * The ASM API version implemented by this visitor. The value of this field must be one of the\n+      * {@code ASM}<i>x<\/i> values in {@link Opcodes}.\n@@ -86,2 +86,2 @@\n-      * @param api the ASM API version implemented by this visitor. Must be one of {@link\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6} or {@link Opcodes#ASM7}.\n+      * @param api the ASM API version implemented by this visitor. Must be one of the {@code\n+      *     ASM}<i>x<\/i> values in {@link Opcodes}.\n@@ -89,1 +89,1 @@\n-    public ClassVisitor(final int api) {\n+    protected ClassVisitor(final int api) {\n@@ -96,3 +96,2 @@\n-      * @param api the ASM API version implemented by this visitor. Must be one of {@link\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n-      *     Opcodes#ASM8} or {@link Opcodes#ASM9}.\n+      * @param api the ASM API version implemented by this visitor. Must be one of the {@code\n+      *     ASM}<i>x<\/i> values in {@link Opcodes}.\n@@ -102,1 +101,1 @@\n-    public ClassVisitor(final int api, final ClassVisitor classVisitor) {\n+    protected ClassVisitor(final int api, final ClassVisitor classVisitor) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/ClassVisitor.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -100,0 +100,6 @@\n+    \/**\n+      * The flags passed to the constructor. Must be zero or more of {@link #COMPUTE_MAXS} and {@link\n+      * #COMPUTE_FRAMES}.\n+      *\/\n+    private final int flags;\n+\n@@ -283,3 +289,3 @@\n-      * @param flags option flags that can be used to modify the default behavior of this class.Must be\n-      *     zero or more of {@link #COMPUTE_MAXS} and {@link #COMPUTE_FRAMES}. <i>These option flags do\n-      *     not affect methods that are copied as is in the new class. This means that neither the\n+      * @param flags option flags that can be used to modify the default behavior of this class. Must\n+      *     be zero or more of {@link #COMPUTE_MAXS} and {@link #COMPUTE_FRAMES}. <i>These option flags\n+      *     do not affect methods that are copied as is in the new class. This means that neither the\n@@ -290,0 +296,1 @@\n+        this.flags = flags;\n@@ -292,1 +299,1 @@\n-            this.compute = MethodWriter.COMPUTE_ALL_FRAMES;\n+            compute = MethodWriter.COMPUTE_ALL_FRAMES;\n@@ -294,1 +301,1 @@\n-            this.compute = MethodWriter.COMPUTE_MAX_STACK_AND_LOCAL;\n+            compute = MethodWriter.COMPUTE_MAX_STACK_AND_LOCAL;\n@@ -296,1 +303,1 @@\n-            this.compute = MethodWriter.COMPUTE_NOTHING;\n+            compute = MethodWriter.COMPUTE_NOTHING;\n@@ -300,0 +307,15 @@\n+    \/\/ -----------------------------------------------------------------------------------------------\n+    \/\/ Accessors\n+    \/\/ -----------------------------------------------------------------------------------------------\n+\n+    \/**\n+      * Returns true if all the given flags were passed to the constructor.\n+      *\n+      * @param flags some option flags. Must be zero or more of {@link #COMPUTE_MAXS} and {@link\n+      *     #COMPUTE_FRAMES}.\n+      * @return true if all the given flags, or more, were passed to the constructor.\n+      *\/\n+    public boolean hasFlags(final int flags) {\n+        return (this.flags & flags) == flags;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/ClassWriter.java","additions":28,"deletions":6,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -72,3 +72,2 @@\n-      * The ASM API version implemented by this visitor. The value of this field must be one of {@link\n-      * Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n-      * Opcodes#ASM8} or {@link Opcodes#ASM9}.\n+      * The ASM API version implemented by this visitor. The value of this field must be one of the\n+      * {@code ASM}<i>x<\/i> values in {@link Opcodes}.\n@@ -84,3 +83,2 @@\n-      * @param api the ASM API version implemented by this visitor. Must be one of {@link\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n-      *     Opcodes#ASM8} or {@link Opcodes#ASM9}.\n+      * @param api the ASM API version implemented by this visitor. Must be one of the {@code\n+      *     ASM}<i>x<\/i> values in {@link Opcodes}.\n@@ -88,1 +86,1 @@\n-    public FieldVisitor(final int api) {\n+    protected FieldVisitor(final int api) {\n@@ -95,3 +93,2 @@\n-      * @param api the ASM API version implemented by this visitor. Must be one of {@link\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7} or {@link\n-      *     Opcodes#ASM8}.\n+      * @param api the ASM API version implemented by this visitor. Must be one of the {@code\n+      *     ASM}<i>x<\/i> values in {@link Opcodes}.\n@@ -101,1 +98,1 @@\n-    public FieldVisitor(final int api, final FieldVisitor fieldVisitor) {\n+    protected FieldVisitor(final int api, final FieldVisitor fieldVisitor) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/FieldVisitor.java","additions":8,"deletions":11,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -86,2 +86,2 @@\n-      * The ASM API version implemented by this visitor. The value of this field must be one of {@link\n-      * Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6} or {@link Opcodes#ASM7}.\n+      * The ASM API version implemented by this visitor. The value of this field must be one of the\n+      * {@code ASM}<i>x<\/i> values in {@link Opcodes}.\n@@ -99,2 +99,2 @@\n-      * @param api the ASM API version implemented by this visitor. Must be one of {@link\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6} or {@link Opcodes#ASM7}.\n+      * @param api the ASM API version implemented by this visitor. Must be one of the {@code\n+      *     ASM}<i>x<\/i> values in {@link Opcodes}.\n@@ -102,1 +102,1 @@\n-    public MethodVisitor(final int api) {\n+    protected MethodVisitor(final int api) {\n@@ -109,2 +109,2 @@\n-      * @param api the ASM API version implemented by this visitor. Must be one of {@link\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6} or {@link Opcodes#ASM7}.\n+      * @param api the ASM API version implemented by this visitor. Must be one of the {@code\n+      *     ASM}<i>x<\/i> values in {@link Opcodes}.\n@@ -114,1 +114,1 @@\n-    public MethodVisitor(final int api, final MethodVisitor methodVisitor) {\n+    protected MethodVisitor(final int api, final MethodVisitor methodVisitor) {\n@@ -382,2 +382,2 @@\n-      * @param var the operand of the instruction to be visited. This operand is the index of a local\n-      *     variable.\n+      * @param varIndex the operand of the instruction to be visited. This operand is the index of a\n+      *     local variable.\n@@ -385,1 +385,1 @@\n-    public void visitVarInsn(final int opcode, final int var) {\n+    public void visitVarInsn(final int opcode, final int varIndex) {\n@@ -387,1 +387,1 @@\n-            mv.visitVarInsn(opcode, var);\n+            mv.visitVarInsn(opcode, varIndex);\n@@ -585,1 +585,1 @@\n-      * @param var index of the local variable to be incremented.\n+      * @param varIndex index of the local variable to be incremented.\n@@ -588,1 +588,1 @@\n-    public void visitIincInsn(final int var, final int increment) {\n+    public void visitIincInsn(final int varIndex, final int increment) {\n@@ -590,1 +590,1 @@\n-            mv.visitIincInsn(var, increment);\n+            mv.visitIincInsn(varIndex, increment);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/MethodVisitor.java","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -501,1 +501,2 @@\n-      * #COMPUTE_INSERTED_FRAMES}, {@link #COMPUTE_MAX_STACK_AND_LOCAL} or {@link #COMPUTE_NOTHING}.\n+      * #COMPUTE_INSERTED_FRAMES}, {@link COMPUTE_MAX_STACK_AND_LOCAL_FROM_FRAMES}, {@link\n+      * #COMPUTE_MAX_STACK_AND_LOCAL} or {@link #COMPUTE_NOTHING}.\n@@ -939,1 +940,1 @@\n-    public void visitVarInsn(final int opcode, final int var) {\n+    public void visitVarInsn(final int opcode, final int varIndex) {\n@@ -942,1 +943,1 @@\n-        if (var < 4 && opcode != Opcodes.RET) {\n+        if (varIndex < 4 && opcode != Opcodes.RET) {\n@@ -945,1 +946,1 @@\n-                optimizedOpcode = Constants.ILOAD_0 + ((opcode - Opcodes.ILOAD) << 2) + var;\n+                optimizedOpcode = Constants.ILOAD_0 + ((opcode - Opcodes.ILOAD) << 2) + varIndex;\n@@ -947,1 +948,1 @@\n-                optimizedOpcode = Constants.ISTORE_0 + ((opcode - Opcodes.ISTORE) << 2) + var;\n+                optimizedOpcode = Constants.ISTORE_0 + ((opcode - Opcodes.ISTORE) << 2) + varIndex;\n@@ -950,2 +951,2 @@\n-        } else if (var >= 256) {\n-            code.putByte(Constants.WIDE).put12(opcode, var);\n+        } else if (varIndex >= 256) {\n+            code.putByte(Constants.WIDE).put12(opcode, varIndex);\n@@ -953,1 +954,1 @@\n-            code.put11(opcode, var);\n+            code.put11(opcode, varIndex);\n@@ -958,1 +959,1 @@\n-                currentBasicBlock.frame.execute(opcode, var, null, null);\n+                currentBasicBlock.frame.execute(opcode, varIndex, null, null);\n@@ -980,1 +981,1 @@\n-                currentMaxLocals = var + 2;\n+                currentMaxLocals = varIndex + 2;\n@@ -982,1 +983,1 @@\n-                currentMaxLocals = var + 1;\n+                currentMaxLocals = varIndex + 1;\n@@ -1342,1 +1343,1 @@\n-    public void visitIincInsn(final int var, final int increment) {\n+    public void visitIincInsn(final int varIndex, final int increment) {\n@@ -1345,2 +1346,2 @@\n-        if ((var > 255) || (increment > 127) || (increment < -128)) {\n-            code.putByte(Constants.WIDE).put12(Opcodes.IINC, var).putShort(increment);\n+        if ((varIndex > 255) || (increment > 127) || (increment < -128)) {\n+            code.putByte(Constants.WIDE).put12(Opcodes.IINC, varIndex).putShort(increment);\n@@ -1348,1 +1349,1 @@\n-            code.putByte(Opcodes.IINC).put11(var, increment);\n+            code.putByte(Opcodes.IINC).put11(varIndex, increment);\n@@ -1353,1 +1354,1 @@\n-            currentBasicBlock.frame.execute(Opcodes.IINC, var, null, null);\n+            currentBasicBlock.frame.execute(Opcodes.IINC, varIndex, null, null);\n@@ -1356,1 +1357,1 @@\n-            int currentMaxLocals = var + 1;\n+            int currentMaxLocals = varIndex + 1;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/MethodWriter.java","additions":18,"deletions":17,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-    public ModuleVisitor(final int api) {\n+    protected ModuleVisitor(final int api) {\n@@ -100,1 +100,1 @@\n-    public ModuleVisitor(final int api, final ModuleVisitor moduleVisitor) {\n+    protected ModuleVisitor(final int api, final ModuleVisitor moduleVisitor) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/ModuleVisitor.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-    public RecordComponentVisitor(final int api) {\n+    protected RecordComponentVisitor(final int api) {\n@@ -99,1 +99,1 @@\n-    public RecordComponentVisitor(\n+    protected RecordComponentVisitor(\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/RecordComponentVisitor.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -475,1 +475,1 @@\n-                throw new IllegalArgumentException();\n+                throw new IllegalArgumentException(\"Invalid descriptor: \" + descriptorBuffer);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/Type.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -133,2 +133,2 @@\n-      * @param api the ASM API version implemented by this visitor. Must be one of {@link\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6} or {@link Opcodes#ASM7}.\n+      * @param api the ASM API version implemented by this visitor. Must be one of the {@code\n+      *     ASM}<i>x<\/i> values in {@link Opcodes}.\n@@ -362,2 +362,2 @@\n-    public void visitVarInsn(final int opcode, final int var) {\n-        super.visitVarInsn(opcode, var);\n+    public void visitVarInsn(final int opcode, final int varIndex) {\n+        super.visitVarInsn(opcode, varIndex);\n@@ -376,1 +376,1 @@\n-                    pushValue(var == 0 ? UNINITIALIZED_THIS : OTHER);\n+                    pushValue(varIndex == 0 ? UNINITIALIZED_THIS : OTHER);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/AdviceAdapter.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -160,3 +160,2 @@\n-      * @param api the ASM API version implemented by this visitor. Must be one of {@link\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n-      *     Opcodes#ASM8} or {@link Opcodes#ASM9}.\n+      * @param api the ASM API version implemented by this visitor. Must be one of the {@code\n+      *     ASM}<i>x<\/i> values in {@link Opcodes}.\n@@ -278,2 +277,2 @@\n-    public void visitVarInsn(final int opcode, final int var) {\n-        super.visitVarInsn(opcode, var);\n+    public void visitVarInsn(final int opcode, final int varIndex) {\n+        super.visitVarInsn(opcode, varIndex);\n@@ -285,2 +284,2 @@\n-        maxLocals = Math.max(maxLocals, var + (isLongOrDouble ? 2 : 1));\n-        execute(opcode, var, null);\n+        maxLocals = Math.max(maxLocals, varIndex + (isLongOrDouble ? 2 : 1));\n+        execute(opcode, varIndex, null);\n@@ -434,4 +433,4 @@\n-    public void visitIincInsn(final int var, final int increment) {\n-        super.visitIincInsn(var, increment);\n-        maxLocals = Math.max(maxLocals, var + 1);\n-        execute(Opcodes.IINC, var, null);\n+    public void visitIincInsn(final int varIndex, final int increment) {\n+        super.visitIincInsn(varIndex, increment);\n+        maxLocals = Math.max(maxLocals, varIndex + 1);\n+        execute(Opcodes.IINC, varIndex, null);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/AnalyzerAdapter.java","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -111,4 +111,2 @@\n-      * @param api the ASM API version supported by this remapper. Must be one of {@link\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM4}, {@link jdk.internal.org.objectweb.asm.Opcodes#ASM5}, {@link\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM6}, {@link jdk.internal.org.objectweb.asm.Opcodes#ASM7}, {@link\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM8} or {@link jdk.internal.org.objectweb.asm.Opcodes#ASM9}.\n+      * @param api the ASM API version supported by this remapper. Must be one of the {@code\n+      *     ASM}<i>x<\/i> values in {@link Opcodes}.\n@@ -128,4 +126,2 @@\n-      * @param api the ASM API version supported by this remapper. Must be one of {@link\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM4}, {@link jdk.internal.org.objectweb.asm.Opcodes#ASM5}, {@link\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM6}, {@link jdk.internal.org.objectweb.asm.Opcodes#ASM7}, {@link\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM8} or {@link jdk.internal.org.objectweb.asm.Opcodes#ASM9}.\n+      * @param api the ASM API version supported by this remapper. Must be one of the {@code\n+      *     ASM}<i>x<\/i> values in {@link Opcodes}.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/AnnotationRemapper.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -114,4 +114,2 @@\n-      * @param api the ASM API version supported by this remapper. Must be one of {@link\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM4}, {@link jdk.internal.org.objectweb.asm.Opcodes#ASM5}, {@link\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM6}, {@link jdk.internal.org.objectweb.asm.Opcodes#ASM7}, {@link\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM8} or {@link jdk.internal.org.objectweb.asm.Opcodes#ASM9}.\n+      * @param api the ASM API version supported by this remapper. Must be one of the {@code\n+      *     ASM}<i>x<\/i> values in {@link Opcodes}.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/ClassRemapper.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -117,2 +117,2 @@\n-    public void visitVarInsn(final int opcode, final int var) {\n-        if (var < 4 && opcode != RET) {\n+    public void visitVarInsn(final int opcode, final int varIndex) {\n+        if (varIndex < 4 && opcode != RET) {\n@@ -121,1 +121,1 @@\n-        } else if (var >= 256) {\n+        } else if (varIndex >= 256) {\n@@ -128,1 +128,1 @@\n-        super.visitVarInsn(opcode, var);\n+        super.visitVarInsn(opcode, varIndex);\n@@ -207,2 +207,2 @@\n-    public void visitIincInsn(final int var, final int increment) {\n-        if (var > 255 || increment > 127 || increment < -128) {\n+    public void visitIincInsn(final int varIndex, final int increment) {\n+        if (varIndex > 255 || increment > 127 || increment < -128) {\n@@ -215,1 +215,1 @@\n-        super.visitIincInsn(var, increment);\n+        super.visitIincInsn(varIndex, increment);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/CodeSizeEvaluator.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -91,3 +91,2 @@\n-      * @param api the ASM API version supported by this remapper. Must be one of {@link Opcodes#ASM4},\n-      *     {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link Opcodes#ASM8}, or\n-      *     {@link Opcodes#ASM9}.\n+      * @param api the ASM API version supported by this remapper. Must be one of the {@code\n+      *     ASM}<i>x<\/i> values in {@link Opcodes}.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/FieldRemapper.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -245,3 +245,2 @@\n-      * @param api the ASM API version implemented by this visitor. Must be one of {@link\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n-      *     Opcodes#ASM8} or {@link Opcodes#ASM9}.\n+      * @param api the ASM API version implemented by this visitor. Must be one of the {@code\n+      *     ASM}<i>x<\/i> values in {@link Opcodes}.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/GeneratorAdapter.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -96,3 +96,2 @@\n-      * @param api the ASM API version implemented by this visitor. Must be one of {@link\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n-      *     Opcodes#ASM8} or {@link Opcodes#ASM9}.\n+      * @param api the ASM API version implemented by this visitor. Must be one of the {@code\n+      *     ASM}<i>x<\/i> values in {@link Opcodes}.\n@@ -459,1 +458,1 @@\n-    public void visitVarInsn(final int opcode, final int var) {\n+    public void visitVarInsn(final int opcode, final int varIndex) {\n@@ -462,1 +461,1 @@\n-                load(var, Type.INT_TYPE);\n+                load(varIndex, Type.INT_TYPE);\n@@ -465,1 +464,1 @@\n-                load(var, Type.LONG_TYPE);\n+                load(varIndex, Type.LONG_TYPE);\n@@ -468,1 +467,1 @@\n-                load(var, Type.FLOAT_TYPE);\n+                load(varIndex, Type.FLOAT_TYPE);\n@@ -471,1 +470,1 @@\n-                load(var, Type.DOUBLE_TYPE);\n+                load(varIndex, Type.DOUBLE_TYPE);\n@@ -474,1 +473,1 @@\n-                load(var, OBJECT_TYPE);\n+                load(varIndex, OBJECT_TYPE);\n@@ -477,1 +476,1 @@\n-                store(var, Type.INT_TYPE);\n+                store(varIndex, Type.INT_TYPE);\n@@ -480,1 +479,1 @@\n-                store(var, Type.LONG_TYPE);\n+                store(varIndex, Type.LONG_TYPE);\n@@ -483,1 +482,1 @@\n-                store(var, Type.FLOAT_TYPE);\n+                store(varIndex, Type.FLOAT_TYPE);\n@@ -486,1 +485,1 @@\n-                store(var, Type.DOUBLE_TYPE);\n+                store(varIndex, Type.DOUBLE_TYPE);\n@@ -489,1 +488,1 @@\n-                store(var, OBJECT_TYPE);\n+                store(varIndex, OBJECT_TYPE);\n@@ -492,1 +491,1 @@\n-                ret(var);\n+                ret(varIndex);\n@@ -689,2 +688,2 @@\n-    public void visitIincInsn(final int var, final int increment) {\n-        iinc(var, increment);\n+    public void visitIincInsn(final int varIndex, final int increment) {\n+        iinc(varIndex, increment);\n@@ -819,2 +818,2 @@\n-    public void load(final int var, final Type type) {\n-        mv.visitVarInsn(type.getOpcode(Opcodes.ILOAD), var);\n+    public void load(final int varIndex, final Type type) {\n+        mv.visitVarInsn(type.getOpcode(Opcodes.ILOAD), varIndex);\n@@ -827,2 +826,2 @@\n-    public void store(final int var, final Type type) {\n-        mv.visitVarInsn(type.getOpcode(Opcodes.ISTORE), var);\n+    public void store(final int varIndex, final Type type) {\n+        mv.visitVarInsn(type.getOpcode(Opcodes.ISTORE), varIndex);\n@@ -919,2 +918,2 @@\n-    public void iinc(final int var, final int increment) {\n-        mv.visitIincInsn(var, increment);\n+    public void iinc(final int varIndex, final int increment) {\n+        mv.visitIincInsn(varIndex, increment);\n@@ -1063,2 +1062,2 @@\n-    public void ret(final int var) {\n-        mv.visitVarInsn(Opcodes.RET, var);\n+    public void ret(final int varIndex) {\n+        mv.visitVarInsn(Opcodes.RET, varIndex);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/InstructionAdapter.java","additions":24,"deletions":25,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -149,3 +149,2 @@\n-      * @param api the ASM API version implemented by this visitor. Must be one of {@link\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n-      *     Opcodes#ASM8} or {@link Opcodes#ASM9}.\n+      * @param api the ASM API version implemented by this visitor. Must be one of the {@code\n+      *     ASM}<i>x<\/i> values in {@link Opcodes}.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/JSRInlinerAdapter.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -125,3 +125,2 @@\n-      * @param api the ASM API version implemented by this visitor. Must be one of {@link\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n-      *     Opcodes#ASM8} or {@link Opcodes#ASM9}.\n+      * @param api the ASM API version implemented by this visitor. Must be one of the {@code\n+      *     ASM}<i>x<\/i> values in {@link Opcodes}.\n@@ -143,1 +142,1 @@\n-    public void visitVarInsn(final int opcode, final int var) {\n+    public void visitVarInsn(final int opcode, final int varIndex) {\n@@ -170,1 +169,1 @@\n-        super.visitVarInsn(opcode, remap(var, varType));\n+        super.visitVarInsn(opcode, remap(varIndex, varType));\n@@ -174,2 +173,2 @@\n-    public void visitIincInsn(final int var, final int increment) {\n-        super.visitIincInsn(remap(var, Type.INT_TYPE), increment);\n+    public void visitIincInsn(final int varIndex, final int increment) {\n+        super.visitIincInsn(remap(varIndex, Type.INT_TYPE), increment);\n@@ -357,3 +356,3 @@\n-    private int remap(final int var, final Type type) {\n-        if (var + type.getSize() <= firstLocal) {\n-            return var;\n+    private int remap(final int varIndex, final Type type) {\n+        if (varIndex + type.getSize() <= firstLocal) {\n+            return varIndex;\n@@ -361,1 +360,1 @@\n-        int key = 2 * var + type.getSize() - 1;\n+        int key = 2 * varIndex + type.getSize() - 1;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/LocalVariablesSorter.java","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -93,4 +93,2 @@\n-      * @param api the ASM API version supported by this remapper. Must be one of {@link\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM4}, {@link jdk.internal.org.objectweb.asm.Opcodes#ASM5}, {@link\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM6}, {@link jdk.internal.org.objectweb.asm.Opcodes#ASM7}, {@link\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM8} or {@link jdk.internal.org.objectweb.asm.Opcodes#ASM9}.\n+      * @param api the ASM API version supported by this remapper. Must be one of the {@code\n+      *     ASM}<i>x<\/i> values in {@link Opcodes}.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/MethodRemapper.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -89,4 +89,2 @@\n-      * @param api the ASM API version supported by this remapper. Must be one of {@link\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM4}, {@link jdk.internal.org.objectweb.asm.Opcodes#ASM5}, {@link\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM6}, {@link jdk.internal.org.objectweb.asm.Opcodes#ASM7}, {@link\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM8} or {@link jdk.internal.org.objectweb.asm.Opcodes#ASM9}.\n+      * @param api the ASM API version supported by this remapper. Must be one of the {@code\n+      *     ASM}<i>x<\/i> values in {@link Opcodes}.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/ModuleRemapper.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -194,0 +194,2 @@\n+            boolean isFieldHandle = handle.getTag() <= Opcodes.H_PUTSTATIC;\n+\n@@ -197,4 +199,4 @@\n-                    mapMethodName(handle.getOwner(), handle.getName(), handle.getDesc()),\n-                    handle.getTag() <= Opcodes.H_PUTSTATIC\n-                            ? mapDesc(handle.getDesc())\n-                            : mapMethodDesc(handle.getDesc()),\n+                    isFieldHandle\n+                            ? mapFieldName(handle.getOwner(), handle.getName(), handle.getDesc())\n+                            : mapMethodName(handle.getOwner(), handle.getName(), handle.getDesc()),\n+                    isFieldHandle ? mapDesc(handle.getDesc()) : mapMethodDesc(handle.getDesc()),\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/Remapper.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -194,3 +194,2 @@\n-      * @param api the ASM API version implemented by this visitor. Must be one of {@link\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n-      *     Opcodes#ASM8} or {@link Opcodes#ASM9}.\n+      * @param api the ASM API version implemented by this visitor. Must be one of the {@code\n+      *     ASM}<i>x<\/i> values in {@link Opcodes}.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/SerialVersionUIDAdder.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -93,4 +93,2 @@\n-      * @param api the ASM API version supported by this remapper. Must be one of {@link\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM4}, {@link jdk.internal.org.objectweb.asm.Opcodes#ASM5},{@link\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM6}, {@link jdk.internal.org.objectweb.asm.Opcodes#ASM7}, {@link\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM8} or {@link jdk.internal.org.objectweb.asm.Opcodes#ASM9}.\n+      * @param api the ASM API version supported by this remapper. Must be one of the {@code\n+      *     ASM}<i>x<\/i> values in {@link Opcodes}.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/SignatureRemapper.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -102,3 +102,2 @@\n-      * @param api the ASM API version implemented by this visitor. Must be one of {@link\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n-      *     Opcodes#ASM8} or {@link Opcodes#ASM9}.\n+      * @param api the ASM API version implemented by this visitor. Must be one of the {@code\n+      *     ASM}<i>x<\/i> values in {@link Opcodes}.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/StaticInitMerger.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -95,2 +95,2 @@\n-      * The ASM API version implemented by this visitor. The value of this field must be one of {@link\n-      * Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6} or {@link Opcodes#ASM7}.\n+      * The ASM API version implemented by this visitor. The value of this field must be one of the\n+      * {@code ASM}<i>x<\/i> values in {@link Opcodes}.\n@@ -103,2 +103,2 @@\n-      * @param api the ASM API version implemented by this visitor. Must be one of {@link\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6} or {@link Opcodes#ASM7}.\n+      * @param api the ASM API version implemented by this visitor. Must be one of the {@code\n+      *     ASM}<i>x<\/i> values in {@link Opcodes}.\n@@ -106,1 +106,1 @@\n-    public SignatureVisitor(final int api) {\n+    protected SignatureVisitor(final int api) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/signature\/SignatureVisitor.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -104,3 +104,2 @@\n-      * @param api the ASM API version implemented by this visitor. Must be one of {@link\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n-      *     Opcodes#ASM8} or {@link Opcodes#ASM9}.\n+      * @param api the ASM API version implemented by this visitor. Must be one of the {@code\n+      *     ASM}<i>x<\/i> values in {@link Opcodes}.\n@@ -208,2 +207,2 @@\n-      * @param api an ASM API version. Must be one of {@link Opcodes#ASM4}, {@link Opcodes#ASM5},\n-      *     {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link Opcodes#ASM8} or {@link Opcodes#ASM9}.\n+      * @param api an ASM API version. Must be one of the {@code ASM}<i>x<\/i> values in {@link\n+      *     Opcodes}.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/AnnotationNode.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -190,3 +190,2 @@\n-      * @param api the ASM API version implemented by this visitor. Must be one of {@link\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n-      *     Opcodes#ASM8}, or {@link Opcodes#ASM9}.\n+      * @param api the ASM API version implemented by this visitor. Must be one of the {@code\n+      *     ASM}<i>x<\/i> values in {@link Opcodes}.\n@@ -337,2 +336,2 @@\n-      * @param api an ASM API version. Must be one of {@link Opcodes#ASM4}, {@link Opcodes#ASM5},\n-      *     {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link Opcodes#ASM8} or {@link Opcodes#ASM9}.\n+      * @param api an ASM API version. Must be one of the {@code ASM}<i>x<\/i> values in {@link\n+      *     Opcodes}.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/ClassNode.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -143,3 +143,2 @@\n-      * @param api the ASM API version implemented by this visitor. Must be one of {@link\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n-      *     Opcodes#ASM8} or {@link Opcodes#ASM9}.\n+      * @param api the ASM API version implemented by this visitor. Must be one of the {@code\n+      *     ASM}<i>x<\/i> values in {@link Opcodes}.\n@@ -216,2 +215,2 @@\n-      * @param api an ASM API version. Must be one of {@link Opcodes#ASM4}, {@link Opcodes#ASM5},\n-      *     {@link Opcodes#ASM6} or {@link Opcodes#ASM7}.\n+      * @param api an ASM API version. Must be one of the {@code ASM}<i>x<\/i> values in {@link\n+      *     Opcodes}.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/FieldNode.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-      * @param var index of the local variable to be incremented.\n+      * @param varIndex index of the local variable to be incremented.\n@@ -85,1 +85,1 @@\n-    public IincInsnNode(final int var, final int incr) {\n+    public IincInsnNode(final int varIndex, final int incr) {\n@@ -87,1 +87,1 @@\n-        this.var = var;\n+        this.var = varIndex;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/IincInsnNode.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -124,3 +124,2 @@\n-      * @param api the ASM API version implemented by this visitor. Must be one of {@link\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n-      *     Opcodes#ASM8} or {@link Opcodes#ASM9}.\n+      * @param api the ASM API version implemented by this visitor. Must be one of the {@code\n+      *     ASM}<i>x<\/i> values in {@link Opcodes}.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/LocalVariableAnnotationNode.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -199,3 +199,2 @@\n-      * @param api the ASM API version implemented by this visitor. Must be one of {@link\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n-      *     Opcodes#ASM8} or {@link Opcodes#ASM9}.\n+      * @param api the ASM API version implemented by this visitor. Must be one of the {@code\n+      *     ASM}<i>x<\/i> values in {@link Opcodes}.\n@@ -236,3 +235,2 @@\n-      * @param api the ASM API version implemented by this visitor. Must be one of {@link\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n-      *     Opcodes#ASM8} or {@link Opcodes#ASM9}.\n+      * @param api the ASM API version implemented by this visitor. Must be one of the {@code\n+      *     ASM}<i>x<\/i> values in {@link Opcodes}.\n@@ -384,2 +382,2 @@\n-    public void visitVarInsn(final int opcode, final int var) {\n-        instructions.add(new VarInsnNode(opcode, var));\n+    public void visitVarInsn(final int opcode, final int varIndex) {\n+        instructions.add(new VarInsnNode(opcode, varIndex));\n@@ -443,2 +441,2 @@\n-    public void visitIincInsn(final int var, final int increment) {\n-        instructions.add(new IincInsnNode(var, increment));\n+    public void visitIincInsn(final int varIndex, final int increment) {\n+        instructions.add(new IincInsnNode(varIndex, increment));\n@@ -602,2 +600,2 @@\n-      * @param api an ASM API version. Must be one of {@link Opcodes#ASM4}, {@link Opcodes#ASM5},\n-      *     {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link Opcodes#ASM8} or {@link Opcodes#ASM9}.\n+      * @param api an ASM API version. Must be one of the {@code ASM}<i>x<\/i> values in {@link\n+      *     Opcodes}.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/MethodNode.java","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -103,3 +103,2 @@\n-      * @param api the ASM API version implemented by this visitor. Must be one of {@link\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n-      *     Opcodes#ASM8} or {@link Opcodes#ASM9}.\n+      * @param api the ASM API version implemented by this visitor. Must be one of the {@code\n+      *     ASM}<i>x<\/i> values in {@link Opcodes}.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/TypeAnnotationNode.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-            list.add(t);\n+            list.add(t); \/\/ NOPMD(UseArraysAsList): we want a modifiable list.\n@@ -106,1 +106,1 @@\n-            byteList.add(b);\n+            byteList.add(b); \/\/ NOPMD(UseArraysAsList): we want a modifiable list.\n@@ -117,1 +117,1 @@\n-            booleanList.add(b);\n+            booleanList.add(b); \/\/ NOPMD(UseArraysAsList): we want a modifiable list.\n@@ -128,1 +128,1 @@\n-            shortList.add(s);\n+            shortList.add(s); \/\/ NOPMD(UseArraysAsList): we want a modifiable list.\n@@ -139,1 +139,1 @@\n-            charList.add(c);\n+            charList.add(c); \/\/ NOPMD(UseArraysAsList): we want a modifiable list.\n@@ -150,1 +150,1 @@\n-            intList.add(i);\n+            intList.add(i); \/\/ NOPMD(UseArraysAsList): we want a modifiable list.\n@@ -161,1 +161,1 @@\n-            floatList.add(f);\n+            floatList.add(f); \/\/ NOPMD(UseArraysAsList): we want a modifiable list.\n@@ -172,1 +172,1 @@\n-            longList.add(l);\n+            longList.add(l); \/\/ NOPMD(UseArraysAsList): we want a modifiable list.\n@@ -183,1 +183,1 @@\n-            doubleList.add(d);\n+            doubleList.add(d); \/\/ NOPMD(UseArraysAsList): we want a modifiable list.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/Util.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -81,2 +81,2 @@\n-      * @param var the operand of the instruction to be constructed. This operand is the index of a\n-      *     local variable.\n+      * @param varIndex the operand of the instruction to be constructed. This operand is the index of\n+      *     a local variable.\n@@ -84,1 +84,1 @@\n-    public VarInsnNode(final int opcode, final int var) {\n+    public VarInsnNode(final int opcode, final int varIndex) {\n@@ -86,1 +86,1 @@\n-        this.var = var;\n+        this.var = varIndex;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/VarInsnNode.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -287,2 +287,2 @@\n-                                int var = ((VarInsnNode) insnNode).var;\n-                                subroutine.localsUsed[var] = true;\n+                                int varIndex = ((VarInsnNode) insnNode).var;\n+                                subroutine.localsUsed[varIndex] = true;\n@@ -293,1 +293,1 @@\n-                                    subroutine.localsUsed[var + 1] = true;\n+                                    subroutine.localsUsed[varIndex + 1] = true;\n@@ -296,2 +296,2 @@\n-                                int var = ((IincInsnNode) insnNode).var;\n-                                subroutine.localsUsed[var] = true;\n+                                int varIndex = ((IincInsnNode) insnNode).var;\n+                                subroutine.localsUsed[varIndex] = true;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/analysis\/Analyzer.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -105,4 +105,2 @@\n-      * @param api the ASM API version supported by this interpreter. Must be one of {@link\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM4}, {@link jdk.internal.org.objectweb.asm.Opcodes#ASM5}, {@link\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM6}, {@link jdk.internal.org.objectweb.asm.Opcodes#ASM7}, {@link\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM8} or {@link jdk.internal.org.objectweb.asm.Opcodes#ASM9}.\n+      * @param api the ASM API version supported by this interpreter. Must be one of the {@code\n+      *     ASM}<i>x<\/i> values in {@link Opcodes}.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/analysis\/BasicInterpreter.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -63,0 +63,1 @@\n+import jdk.internal.org.objectweb.asm.Opcodes;\n@@ -91,4 +92,2 @@\n-      * @param api the ASM API version supported by this interpreter. Must be one of {@link\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM4}, {@link jdk.internal.org.objectweb.asm.Opcodes#ASM5}, {@link\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM6}, {@link jdk.internal.org.objectweb.asm.Opcodes#ASM7}, {@link\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM8} or or {@link jdk.internal.org.objectweb.asm.Opcodes#ASM9}.\n+      * @param api the ASM API version supported by this interpreter. Must be one of the {@code\n+      *     ASM}<i>x<\/i> values in {@link Opcodes}.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/analysis\/BasicVerifier.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -328,1 +328,1 @@\n-        int var;\n+        int varIndex;\n@@ -366,2 +366,2 @@\n-                var = ((VarInsnNode) insn).var;\n-                setLocal(var, value1);\n+                varIndex = ((VarInsnNode) insn).var;\n+                setLocal(varIndex, value1);\n@@ -369,1 +369,1 @@\n-                    setLocal(var + 1, interpreter.newEmptyValue(var + 1));\n+                    setLocal(varIndex + 1, interpreter.newEmptyValue(varIndex + 1));\n@@ -371,2 +371,2 @@\n-                if (var > 0) {\n-                    Value local = getLocal(var - 1);\n+                if (varIndex > 0) {\n+                    Value local = getLocal(varIndex - 1);\n@@ -374,1 +374,1 @@\n-                        setLocal(var - 1, interpreter.newEmptyValue(var - 1));\n+                        setLocal(varIndex - 1, interpreter.newEmptyValue(varIndex - 1));\n@@ -562,2 +562,2 @@\n-                var = ((IincInsnNode) insn).var;\n-                setLocal(var, interpreter.unaryOperation(insn, getLocal(var)));\n+                varIndex = ((IincInsnNode) insn).var;\n+                setLocal(varIndex, interpreter.unaryOperation(insn, getLocal(varIndex)));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/analysis\/Frame.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -63,0 +63,1 @@\n+import jdk.internal.org.objectweb.asm.Opcodes;\n@@ -80,3 +81,2 @@\n-      * The ASM API version supported by this interpreter. The value of this field must be one of\n-      * {@link jdk.internal.org.objectweb.asm.Opcodes#ASM4}, {@link jdk.internal.org.objectweb.asm.Opcodes#ASM5}, {@link\n-      * jdk.internal.org.objectweb.asm.Opcodes#ASM6} or {@link jdk.internal.org.objectweb.asm.Opcodes#ASM7}.\n+      * The ASM API version supported by this interpreter. The value of this field must be one of the\n+      * {@code ASM}<i>x<\/i> values in {@link Opcodes}.\n@@ -89,3 +89,2 @@\n-      * @param api the ASM API version supported by this interpreter. Must be one of {@link\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM4}, {@link jdk.internal.org.objectweb.asm.Opcodes#ASM5}, {@link\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM6} or {@link jdk.internal.org.objectweb.asm.Opcodes#ASM7}.\n+      * @param api the ASM API version supported by this interpreter. Must be one of the {@code\n+      *     ASM}<i>x<\/i> values in {@link Opcodes}.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/analysis\/Interpreter.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -63,0 +63,1 @@\n+import jdk.internal.org.objectweb.asm.Opcodes;\n@@ -143,4 +144,2 @@\n-      * @param api the ASM API version supported by this verifier. Must be one of {@link\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM4}, {@link jdk.internal.org.objectweb.asm.Opcodes#ASM5}, {@link\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM6}, {@link jdk.internal.org.objectweb.asm.Opcodes#ASM7}, {@link\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM8} or or {@link jdk.internal.org.objectweb.asm.Opcodes#ASM9}.\n+      * @param api the ASM API version supported by this verifier. Must be one of the {@code\n+      *     ASM}<i>x<\/i> values in {@link Opcodes}.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/analysis\/SimpleVerifier.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -95,4 +95,2 @@\n-      * @param api the ASM API version supported by this interpreter. Must be one of {@link\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM4}, {@link jdk.internal.org.objectweb.asm.Opcodes#ASM5}, {@link\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM6}, {@link jdk.internal.org.objectweb.asm.Opcodes#ASM7}, {@link\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM8} or or {@link jdk.internal.org.objectweb.asm.Opcodes#ASM9}.\n+      * @param api the ASM API version supported by this interpreter. Must be one of the {@code\n+      *     ASM}<i>x<\/i> values in {@link Opcodes}.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/analysis\/SourceInterpreter.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-        this(size, new SmallSet<AbstractInsnNode>());\n+        this(size, new SmallSet<>());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/analysis\/SourceValue.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -143,0 +143,1 @@\n+        classVersions.put(Opcodes.V19, \"V19\");\n@@ -171,3 +172,2 @@\n-      * @param api the ASM API version implemented by this class. Must be one of {@link Opcodes#ASM4},\n-      *     {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link Opcodes#ASM8} or\n-      *     {@link Opcodes#ASM9}.\n+      * @param api the ASM API version implemented by this class. Must be one of the {@code\n+      *     ASM}<i>x<\/i> values in {@link Opcodes}.\n@@ -301,0 +301,1 @@\n+        stringBuilder.append(\"{\\n\");\n@@ -857,1 +858,1 @@\n-    public void visitVarInsn(final int opcode, final int var) {\n+    public void visitVarInsn(final int opcode, final int varIndex) {\n@@ -864,1 +865,1 @@\n-                .append(var)\n+                .append(varIndex)\n@@ -970,1 +971,1 @@\n-    public void visitIincInsn(final int var, final int increment) {\n+    public void visitIincInsn(final int varIndex, final int increment) {\n@@ -975,1 +976,1 @@\n-                .append(var)\n+                .append(varIndex)\n@@ -1235,1 +1236,1 @@\n-                .append(\".\")\n+                .append('.')\n@@ -1237,1 +1238,1 @@\n-                .append(\"(\")\n+                .append('(')\n@@ -1320,5 +1321,1 @@\n-            if ((accessFlags & ACCESS_MODULE) == 0) {\n-                stringBuilder.append(\"ACC_FINAL\");\n-            } else {\n-                stringBuilder.append(\"ACC_TRANSITIVE\");\n-            }\n+            stringBuilder.append(\"ACC_FINAL\");\n@@ -1486,1 +1483,1 @@\n-            stringBuilder.append(handle.isInterface()).append(\")\");\n+            stringBuilder.append(handle.isInterface()).append(')');\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/ASMifier.java","additions":12,"deletions":15,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -74,0 +74,1 @@\n+import jdk.internal.org.objectweb.asm.ClassWriter;\n@@ -196,1 +197,1 @@\n-        this(classVisitor, true);\n+        this(classVisitor, \/* checkDataFlow = *\/ true);\n@@ -204,2 +205,1 @@\n-      * @param checkDataFlow whether to perform basic data flow checks. This option requires valid\n-      *     maxLocals and maxStack values.\n+      * @param checkDataFlow whether to perform basic data flow checks.\n@@ -218,3 +218,2 @@\n-      * @param api the ASM API version implemented by this visitor. Must be one of {@link\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n-      *     Opcodes#ASM8} or {@link Opcodes#ASM9}.\n+      * @param api the ASM API version implemented by this visitor. Must be one of the {@code\n+      *     ASM}<i>x<\/i> values in {@link Opcodes}.\n@@ -223,2 +222,1 @@\n-      *     not perform any data flow check (see {@link CheckMethodAdapter}). This option requires\n-      *     valid maxLocals and maxStack values.\n+      *     not perform any data flow check (see {@link CheckMethodAdapter}).\n@@ -496,0 +494,2 @@\n+        MethodVisitor methodVisitor =\n+                super.visitMethod(access, name, descriptor, signature, exceptions);\n@@ -497,0 +497,4 @@\n+            if (cv instanceof ClassWriter) {\n+                methodVisitor =\n+                        new CheckMethodAdapter.MethodWriterWrapper(api, (ClassWriter) cv, methodVisitor);\n+            }\n@@ -498,7 +502,1 @@\n-                    new CheckMethodAdapter(\n-                            api,\n-                            access,\n-                            name,\n-                            descriptor,\n-                            super.visitMethod(access, name, descriptor, signature, exceptions),\n-                            labelInsnIndices);\n+                    new CheckMethodAdapter(api, access, name, descriptor, methodVisitor, labelInsnIndices);\n@@ -506,5 +504,1 @@\n-            checkMethodAdapter =\n-                    new CheckMethodAdapter(\n-                            api,\n-                            super.visitMethod(access, name, descriptor, signature, exceptions),\n-                            labelInsnIndices);\n+            checkMethodAdapter = new CheckMethodAdapter(api, methodVisitor, labelInsnIndices);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/CheckClassAdapter.java","additions":14,"deletions":20,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -96,3 +96,2 @@\n-      * @param api the ASM API version implemented by this visitor. Must be one of {@link\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n-      *     Opcodes#ASM8} or {@link Opcodes#ASM9}.\n+      * @param api the ASM API version implemented by this visitor. Must be one of the {@code\n+      *     ASM}<i>x<\/i> values in {@link Opcodes}.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/CheckFieldAdapter.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -73,0 +73,1 @@\n+import jdk.internal.org.objectweb.asm.ClassWriter;\n@@ -386,1 +387,1 @@\n-        this(methodvisitor, new HashMap<Label, Integer>());\n+        this(methodvisitor, new HashMap<>());\n@@ -412,3 +413,2 @@\n-      * @param api the ASM API version implemented by this CheckMethodAdapter. Must be one of {@link\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n-      *     Opcodes#ASM8} or {@link Opcodes#ASM9}.\n+      * @param api the ASM API version implemented by this CheckMethodAdapter. Must be one of the\n+      *     {@code ASM}<i>x<\/i> values in {@link Opcodes}.\n@@ -461,3 +461,2 @@\n-      * @param api the ASM API version implemented by this CheckMethodAdapter. Must be one of {@link\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n-      *     Opcodes#ASM8} or {@link Opcodes#ASM9}.\n+      * @param api the ASM API version implemented by this CheckMethodAdapter. Must be one of the\n+      *     {@code ASM}<i>x<\/i> values in {@link Opcodes}.\n@@ -485,6 +484,12 @@\n-                            analyzer.analyze(\"dummy\", this);\n-                        } catch (IndexOutOfBoundsException e) {\n-                            if (maxLocals == 0 && maxStack == 0) {\n-                                throw new IllegalArgumentException(\n-                                        \"Data flow checking option requires valid, non zero maxLocals and maxStack.\",\n-                                        e);\n+                            \/\/ If 'methodVisitor' is a MethodWriter of a ClassWriter with no flags to compute the\n+                            \/\/ max stack and locals nor the stack map frames, we know that valid max stack and\n+                            \/\/ locals must be provided. Otherwise we assume they are not needed at this stage.\n+                            \/\/ TODO(ebruneton): similarly, check that valid stack map frames are provided if the\n+                            \/\/ class writer has no flags to compute them, and the class version is V1_7 or more.\n+                            boolean checkMaxStackAndLocals =\n+                                    (methodVisitor instanceof MethodWriterWrapper)\n+                                            && !((MethodWriterWrapper) methodVisitor).computesMaxs();\n+                            if (checkMaxStackAndLocals) {\n+                                analyzer.analyze(\"dummy\", this);\n+                            } else {\n+                                analyzer.analyzeAndComputeMaxs(\"dummy\", this);\n@@ -492,2 +497,1 @@\n-                            throwError(analyzer, e);\n-                        } catch (AnalyzerException e) {\n+                        } catch (IndexOutOfBoundsException | AnalyzerException e) {\n@@ -710,1 +714,1 @@\n-    public void visitVarInsn(final int opcode, final int var) {\n+    public void visitVarInsn(final int opcode, final int varIndex) {\n@@ -714,2 +718,2 @@\n-        checkUnsignedShort(var, INVALID_LOCAL_VARIABLE_INDEX);\n-        super.visitVarInsn(opcode, var);\n+        checkUnsignedShort(varIndex, INVALID_LOCAL_VARIABLE_INDEX);\n+        super.visitVarInsn(opcode, varIndex);\n@@ -835,1 +839,1 @@\n-    public void visitIincInsn(final int var, final int increment) {\n+    public void visitIincInsn(final int varIndex, final int increment) {\n@@ -838,1 +842,1 @@\n-        checkUnsignedShort(var, INVALID_LOCAL_VARIABLE_INDEX);\n+        checkUnsignedShort(varIndex, INVALID_LOCAL_VARIABLE_INDEX);\n@@ -840,1 +844,1 @@\n-        super.visitIincInsn(var, increment);\n+        super.visitIincInsn(varIndex, increment);\n@@ -1476,0 +1480,14 @@\n+\n+    static class MethodWriterWrapper extends MethodVisitor {\n+\n+        private final ClassWriter owner;\n+\n+        MethodWriterWrapper(final int api, final ClassWriter owner, final MethodVisitor methodWriter) {\n+            super(api, methodWriter);\n+            this.owner = owner;\n+        }\n+\n+        boolean computesMaxs() {\n+            return owner.hasFlags(ClassWriter.COMPUTE_MAXS) || owner.hasFlags(ClassWriter.COMPUTE_FRAMES);\n+        }\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/CheckMethodAdapter.java","additions":39,"deletions":21,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -115,3 +115,2 @@\n-      * @param api the ASM API version implemented by this visitor. Must be one of {@link\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n-      *     Opcodes#ASM8} or {@link Opcodes#ASM9}.\n+      * @param api the ASM API version implemented by this visitor. Must be one of the {@code\n+      *     ASM}<i>x<\/i> values in {@link Opcodes}.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/CheckModuleAdapter.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -164,3 +164,2 @@\n-      * @param api the ASM API version implemented by this visitor. Must be one of {@link\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n-      *     Opcodes#ASM8} or {@link Opcodes#ASM9}.\n+      * @param api the ASM API version implemented by this visitor. Must be one of the {@code\n+      *     ASM}<i>x<\/i> values in {@link Opcodes}.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/CheckSignatureAdapter.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -326,3 +326,2 @@\n-      * The ASM API version implemented by this class. The value of this field must be one of {@link\n-      * Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n-      * Opcodes#ASM8} or {@link Opcodes#ASM9}.\n+      * The ASM API version implemented by this class. The value of this field must be one of the\n+      * {@code ASM}<i>x<\/i> values in {@link Opcodes}.\n@@ -354,2 +353,2 @@\n-      * @param api the ASM API version implemented by this printer. Must be one of {@link\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6} or {@link Opcodes#ASM7}.\n+      * @param api the ASM API version implemented by this printer. Must be one of the {@code\n+      *     ASM}<i>x<\/i> values in {@link Opcodes}.\n@@ -953,2 +952,2 @@\n-      * @param var the operand of the instruction to be visited. This operand is the index of a local\n-      *     variable.\n+      * @param varIndex the operand of the instruction to be visited. This operand is the index of a\n+      *     local variable.\n@@ -956,1 +955,1 @@\n-    public abstract void visitVarInsn(int opcode, int var);\n+    public abstract void visitVarInsn(int opcode, int varIndex);\n@@ -1070,1 +1069,1 @@\n-      * @param var index of the local variable to be incremented.\n+      * @param varIndex index of the local variable to be incremented.\n@@ -1073,1 +1072,1 @@\n-    public abstract void visitIincInsn(int var, int increment);\n+    public abstract void visitIincInsn(int varIndex, int increment);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/Printer.java","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -156,3 +156,2 @@\n-      * @param api the ASM API version implemented by this visitor. Must be one of {@link\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n-      *     Opcodes#ASM8} or {@link Opcodes#ASM9}.\n+      * @param api the ASM API version implemented by this visitor. Must be one of the {@code\n+      *     ASM}<i>x<\/i> values in {@link Opcodes}.\n@@ -923,1 +922,1 @@\n-    public void visitVarInsn(final int opcode, final int var) {\n+    public void visitVarInsn(final int opcode, final int varIndex) {\n@@ -925,1 +924,1 @@\n-        stringBuilder.append(tab2).append(OPCODES[opcode]).append(' ').append(var).append('\\n');\n+        stringBuilder.append(tab2).append(OPCODES[opcode]).append(' ').append(varIndex).append('\\n');\n@@ -1048,1 +1047,1 @@\n-    public void visitIincInsn(final int var, final int increment) {\n+    public void visitIincInsn(final int varIndex, final int increment) {\n@@ -1053,1 +1052,1 @@\n-                .append(var)\n+                .append(varIndex)\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/Textifier.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -178,3 +178,3 @@\n-    public void visitVarInsn(final int opcode, final int var) {\n-        p.visitVarInsn(opcode, var);\n-        super.visitVarInsn(opcode, var);\n+    public void visitVarInsn(final int opcode, final int varIndex) {\n+        p.visitVarInsn(opcode, varIndex);\n+        super.visitVarInsn(opcode, varIndex);\n@@ -251,3 +251,3 @@\n-    public void visitIincInsn(final int var, final int increment) {\n-        p.visitIincInsn(var, increment);\n-        super.visitIincInsn(var, increment);\n+    public void visitIincInsn(final int varIndex, final int increment) {\n+        p.visitIincInsn(varIndex, increment);\n+        super.visitIincInsn(varIndex, increment);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/TraceMethodVisitor.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-ASM_9_2\n+ASM_9_3\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/version.txt","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-## ASM Bytecode Manipulation Framework v9.2\n+## ASM Bytecode Manipulation Framework v9.3\n","filename":"src\/java.base\/share\/legal\/asm.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,0 +53,2 @@\n+    private static final ToolProvider JAR_TOOL = ToolProvider.findFirst(\"jar\").orElseThrow(() -> new RuntimeException(\"jar tool not found\"));\n+\n@@ -54,1 +56,0 @@\n-        ToolProvider jarTool = ToolProvider.findFirst(\"jar\").orElseThrow(() -> new RuntimeException(\"jar tool not found\"));\n@@ -63,1 +64,1 @@\n-        jarTool.run(System.out, System.err, new String[] {\"--create\", \"--file\", \"foo.jar\", \"-C\", \"out\", \".\"});\n+        JAR_TOOL.run(System.out, System.err, new String[] {\"--create\", \"--file\", \"foo.jar\", \"-C\", \"out\", \".\"});\n@@ -67,2 +68,1 @@\n-        jarTool = ToolProvider.findFirst(\"jar\").orElseThrow(() -> new RuntimeException(\"jar tool not found\"));\n-        if (jarTool.run(System.out, System.err, new String[]{\"--validate\", \"--file\", \"foo.jar\"}) != 0) {\n+        if (JAR_TOOL.run(System.out, System.err, new String[]{\"--validate\", \"--file\", \"foo.jar\"}) != 0) {\n","filename":"test\/langtools\/tools\/javac\/sealed\/ValidateJarWithSealedAndRecord.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}