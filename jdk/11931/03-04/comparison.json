{"files":[{"patch":"@@ -41,0 +41,6 @@\n+  static T* allocate_array(size_t count);\n+\n+  static void deallocate_array(T* ptr, size_t count);\n+\n+  static size_t size_for_array(size_t count);\n+\n","filename":"src\/hotspot\/share\/gc\/z\/zGranuleMap.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"runtime\/os.hpp\"\n@@ -39,2 +40,1 @@\n-    _map(NEW_C_HEAP_ARRAY(T, _size, mtGC)) {\n-  memset(_map, '\\0', sizeof(T) * _size);\n+    _map(allocate_array(_size)) {\n@@ -46,1 +46,1 @@\n-  FREE_C_HEAP_ARRAY(T, _map);\n+  deallocate_array(_map, _size);\n@@ -56,0 +56,23 @@\n+template <typename T>\n+T* ZGranuleMap<T>::allocate_array(size_t count) {\n+  size_t size = size_for_array(count);\n+  void* addr = os::reserve_memory(size, !ExecMem, mtGC);\n+  if (addr == nullptr) {\n+    vm_exit_out_of_memory(size, OOM_MMAP_ERROR, \"Allocator (reserve)\");\n+  }\n+  os::commit_memory_or_exit(addr, size, !ExecMem, \"Allocator (commit)\");\n+  return static_cast<T*>(addr);\n+}\n+\n+template <typename T>\n+void ZGranuleMap<T>::deallocate_array(T* ptr, size_t count) {\n+  bool result = os::release_memory(static_cast<char*>(static_cast<void*>(ptr)),\n+                                   size_for_array(count));\n+  assert(result, \"Allocator (release\");\n+}\n+\n+template <typename T>\n+size_t ZGranuleMap<T>::size_for_array(size_t count) {\n+  return align_up(count * sizeof(T), os::vm_allocation_granularity());\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/z\/zGranuleMap.inline.hpp","additions":26,"deletions":3,"binary":false,"changes":29,"status":"modified"}]}