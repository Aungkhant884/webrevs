{"files":[{"patch":"@@ -111,2 +111,1 @@\n-  TaskQueueEntryChunk* new_base = REALLOC_C_HEAP_ARRAY_RETURN_NULL(TaskQueueEntryChunk, _base, new_capacity, mtGC);\n-\n+  TaskQueueEntryChunk* new_base = allocate_array(new_capacity);\n@@ -117,0 +116,1 @@\n+  deallocate_array(_base, _chunk_capacity);\n@@ -125,0 +125,23 @@\n+G1CMMarkStack::TaskQueueEntryChunk* G1CMMarkStack::allocate_array(size_t count) {\n+  const size_t size = size_for_array(count);\n+\n+  void* const addr = os::reserve_memory(size, !ExecMem, mtGC);\n+  if (addr == nullptr) {\n+    return nullptr;\n+  }\n+\n+  os::commit_memory_or_exit(static_cast<char*>(addr), size, !ExecMem, \"Failed to commit G1CMMarkStack memory\");\n+\n+  return static_cast<TaskQueueEntryChunk*>(addr);\n+}\n+\n+void G1CMMarkStack::deallocate_array(TaskQueueEntryChunk* ptr, size_t count) {\n+  const bool result = os::release_memory(static_cast<char*>(static_cast<void*>(ptr)),\n+                                         size_for_array(count));\n+  assert(result, \"Failed to release G1CMMarkStack memory\");\n+}\n+\n+size_t G1CMMarkStack::size_for_array(size_t count) {\n+  return align_up(count * sizeof(TaskQueueEntryChunk), os::vm_allocation_granularity());\n+}\n+\n@@ -168,1 +191,1 @@\n-    FREE_C_HEAP_ARRAY(TaskQueueEntryChunk, _base);\n+    deallocate_array(_base, _chunk_capacity);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":26,"deletions":3,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -174,0 +174,6 @@\n+  static TaskQueueEntryChunk* allocate_array(size_t count);\n+\n+  static void deallocate_array(TaskQueueEntryChunk* ptr, size_t count);\n+\n+  static size_t size_for_array(size_t count);\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}