{"files":[{"patch":"@@ -1,100 +0,0 @@\n-\/*\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package gc.arguments;\n-\n-\/*\n- * @test TestArrayAllocatorMallocLimit\n- * @summary Sanity check that the ArrayAllocatorMallocLimit flag can be set.\n- * The test helps verifying that size_t flags can be set\/read.\n- * @bug 8054823\n- * @library \/test\/lib\n- * @library \/\n- * @modules java.base\/jdk.internal.misc\n- *          java.management\n- * @run driver gc.arguments.TestArrayAllocatorMallocLimit\n- *\/\n-\n-import jdk.test.lib.Asserts;\n-import jdk.test.lib.process.OutputAnalyzer;\n-import java.math.BigInteger;\n-\n-public class TestArrayAllocatorMallocLimit {\n-  public static void main(String [] args) throws Exception {\n-    testDefaultValue();\n-    testSetValue();\n-  }\n-\n-  private static final String flagName = \"ArrayAllocatorMallocLimit\";\n-\n-  \/\/     size_t ArrayAllocatorMallocLimit                 = 18446744073709551615{experimental}\n-  private static final String printFlagsFinalPattern = \" *size_t *\" + flagName + \" *:?= *(\\\\d+) *\\\\{experimental\\\\} *\";\n-\n-  public static void testDefaultValue()  throws Exception {\n-    ProcessBuilder pb = GCArguments.createJavaProcessBuilder(\n-      \"-XX:+UnlockExperimentalVMOptions\", \"-XX:+PrintFlagsFinal\", \"-version\");\n-\n-    OutputAnalyzer output = new OutputAnalyzer(pb.start());\n-    String value = output.firstMatch(printFlagsFinalPattern, 1);\n-\n-    try {\n-      Asserts.assertNotNull(value, \"Couldn't find size_t flag \" + flagName);\n-\n-      \/\/ A size_t is not always parseable with Long.parseValue,\n-      \/\/ use BigInteger instead.\n-      BigInteger biValue = new BigInteger(value);\n-\n-      \/\/ Sanity check that we got a non-zero value.\n-      Asserts.assertNotEquals(biValue, \"0\");\n-\n-      output.shouldHaveExitValue(0);\n-    } catch (Exception e) {\n-      System.err.println(output.getOutput());\n-      throw e;\n-    }\n-  }\n-\n-  public static void testSetValue() throws Exception {\n-    long flagValue = 2048;\n-\n-    ProcessBuilder pb = GCArguments.createJavaProcessBuilder(\n-      \"-XX:+UnlockExperimentalVMOptions\", \"-XX:\" + flagName + \"=\" + flagValue, \"-XX:+PrintFlagsFinal\", \"-version\");\n-\n-    OutputAnalyzer output = new OutputAnalyzer(pb.start());\n-    String value = output.firstMatch(printFlagsFinalPattern, 1);\n-\n-    try {\n-      Asserts.assertNotNull(\"Couldn't find size_t flag \" + flagName);\n-\n-      long longValue = Long.parseLong(value);\n-\n-      Asserts.assertEquals(longValue, flagValue);\n-\n-      output.shouldHaveExitValue(0);\n-    } catch (Exception e) {\n-      System.err.println(output.getOutput());\n-      throw e;\n-    }\n-  }\n-\n-}\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestArrayAllocatorMallocLimit.java","additions":0,"deletions":100,"binary":false,"changes":100,"status":"deleted"}]}