{"files":[{"patch":"@@ -156,1 +156,3 @@\n-  relativize_one(vfp, hfp, frame::interpreter_frame_extended_sp_offset);\n+\n+  \/\/ extended_sp is already relativized by TemplateInterpreterGenerator::generate_normal_entry or\n+  \/\/ AbstractInterpreter::layout_activation\n@@ -161,0 +163,1 @@\n+  assert(hf.unextended_sp() >  (intptr_t*)hf.at(frame::interpreter_frame_extended_sp_offset), \"\");\n@@ -297,1 +300,3 @@\n-  derelativize_one(vfp, frame::interpreter_frame_extended_sp_offset);\n+\n+  \/\/ Make sure that extended_sp is kept relativized.\n+  assert((intptr_t*)f.at_relative(frame::interpreter_frame_extended_sp_offset) < f.unextended_sp(), \"\");\n","filename":"src\/hotspot\/cpu\/aarch64\/continuationFreezeThaw_aarch64.inline.hpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -365,1 +365,3 @@\n-  *((intptr_t**)addr_at(interpreter_frame_extended_sp_offset)) = sp;\n+  assert(is_interpreted_frame(), \"interpreted frame expected\");\n+  \/\/ set relativized extended_sp\n+  ptr_at_put(interpreter_frame_extended_sp_offset, (sp - fp()));\n","filename":"src\/hotspot\/cpu\/aarch64\/frame_aarch64.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -89,0 +89,1 @@\n+    lea(rscratch1, Address(rfp, rscratch1, Address::lsl(LogBytesPerWord)));\n@@ -101,0 +102,1 @@\n+    lea(rscratch1, Address(rfp, rscratch1, Address::lsl(LogBytesPerWord)));\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -815,1 +815,2 @@\n-  __ mov(rscratch1, sp);\n+  __ sub(rscratch1, sp, rfp);\n+  __ asr(rscratch1, rscratch1, Interpreter::logStackElementSize);\n@@ -883,0 +884,2 @@\n+    __ sub(rscratch2, rscratch1, rfp);\n+    __ asr(rscratch2, rscratch2, Interpreter::logStackElementSize);\n@@ -884,1 +887,1 @@\n-    __ stp(r10, rscratch1, Address(sp, 4 * wordSize));\n+    __ stp(r10, rscratch2, Address(sp, 4 * wordSize));\n@@ -891,1 +894,3 @@\n-    __ stp(r10, rscratch1, Address(sp, 4 * wordSize));\n+    __ sub(rscratch2, rscratch1, rfp);\n+    __ asr(rscratch2, rscratch2, Interpreter::logStackElementSize);\n+    __ stp(r10, rscratch2, Address(sp, 4 * wordSize));\n","filename":"src\/hotspot\/cpu\/aarch64\/templateInterpreterGenerator_aarch64.cpp","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -3913,1 +3913,2 @@\n-    __ mov(rscratch1, sp);\n+    __ sub(rscratch1, sp, rfp);\n+    __ asr(rscratch1, rscratch1, Interpreter::logStackElementSize);\n","filename":"src\/hotspot\/cpu\/aarch64\/templateTable_aarch64.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -154,1 +154,3 @@\n-  relativize_one(vfp, hfp, frame::interpreter_frame_extended_sp_offset);\n+\n+  \/\/ extended_sp is already relativized by TemplateInterpreterGenerator::generate_normal_entry or\n+  \/\/ AbstractInterpreter::layout_activation\n@@ -159,0 +161,1 @@\n+  assert(hf.unextended_sp() >  (intptr_t*)hf.at(frame::interpreter_frame_extended_sp_offset), \"\");\n@@ -299,1 +302,3 @@\n-  derelativize_one(vfp, frame::interpreter_frame_extended_sp_offset);\n+\n+  \/\/ Make sure that extended_sp is kept relativized.\n+  assert((intptr_t*)f.at_relative(frame::interpreter_frame_extended_sp_offset) < f.unextended_sp(), \"\");\n","filename":"src\/hotspot\/cpu\/riscv\/continuationFreezeThaw_riscv.inline.hpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -340,1 +340,3 @@\n-  *((intptr_t**)addr_at(interpreter_frame_extended_sp_offset)) = sp;\n+  assert(is_interpreted_frame(), \"interpreted frame expected\");\n+  \/\/ set relativized extended_sp\n+  ptr_at_put(interpreter_frame_extended_sp_offset, (sp - fp()));\n","filename":"src\/hotspot\/cpu\/riscv\/frame_riscv.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -88,0 +88,1 @@\n+    shadd(t0, t0, fp, t0, LogBytesPerWord);\n@@ -100,0 +101,1 @@\n+    shadd(t0, t0, fp, t0, LogBytesPerWord);\n","filename":"src\/hotspot\/cpu\/riscv\/interp_masm_riscv.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -713,1 +713,3 @@\n-  __ sd(sp, Address(fp, frame::interpreter_frame_extended_sp_offset * wordSize));\n+  __ sub(t0, sp, fp);\n+  __ srai(t0, t0, Interpreter::logStackElementSize);\n+  __ sd(t0, Address(fp, frame::interpreter_frame_extended_sp_offset * wordSize));\n@@ -788,0 +790,2 @@\n+    __ sub(t1, t0, fp);\n+    __ srai(t1, t1, Interpreter::logStackElementSize);\n@@ -789,1 +793,1 @@\n-    __ sd(t0, Address(sp, 5 * wordSize));\n+    __ sd(t1, Address(sp, 5 * wordSize));\n@@ -796,1 +800,3 @@\n-    __ sd(t0, Address(sp, 5 * wordSize));\n+    __ sub(t1, t0, fp);\n+    __ srai(t1, t1, Interpreter::logStackElementSize);\n+    __ sd(t1, Address(sp, 5 * wordSize));\n","filename":"src\/hotspot\/cpu\/riscv\/templateInterpreterGenerator_riscv.cpp","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -3847,1 +3847,3 @@\n-     __ sd(sp, Address(fp, frame::interpreter_frame_extended_sp_offset * wordSize));\n+     __ sub(t0, sp, fp);\n+     __ srai(t0, t0, Interpreter::logStackElementSize);\n+     __ sd(t0, Address(fp, frame::interpreter_frame_extended_sp_offset * wordSize));\n","filename":"src\/hotspot\/cpu\/riscv\/templateTable_riscv.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}