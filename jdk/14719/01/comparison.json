{"files":[{"patch":"@@ -97,1 +97,1 @@\n-  AllocateNode* alloc = AllocateNode::Ideal_allocation(base, phase);\n+  AllocateNode* alloc = AllocateNode::Ideal_allocation(base);\n@@ -145,1 +145,1 @@\n-                                              AllocateNode::Ideal_allocation(st_base, phase),\n+                                              AllocateNode::Ideal_allocation(st_base),\n@@ -310,1 +310,1 @@\n-  AllocateNode* alloc  = AllocateNode::Ideal_allocation(base, phase);\n+  AllocateNode* alloc  = AllocateNode::Ideal_allocation(base);\n","filename":"src\/hotspot\/share\/gc\/g1\/c2\/g1BarrierSetC2.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2018, 2023, Red Hat, Inc. All rights reserved.\n@@ -104,1 +104,1 @@\n-  AllocateNode* alloc = AllocateNode::Ideal_allocation(base, phase);\n+  AllocateNode* alloc = AllocateNode::Ideal_allocation(base);\n@@ -152,1 +152,1 @@\n-                                              AllocateNode::Ideal_allocation(st_base, phase),\n+                                              AllocateNode::Ideal_allocation(st_base),\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahBarrierSetC2.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -925,1 +925,1 @@\n-  static AllocateNode* Ideal_allocation(Node* ptr, PhaseValues* phase);\n+  static AllocateNode* Ideal_allocation(Node* ptr);\n@@ -935,1 +935,1 @@\n-    AllocateNode* allo = Ideal_allocation(ptr, phase);\n+    AllocateNode* allo = Ideal_allocation(ptr);\n@@ -1004,2 +1004,2 @@\n-  static AllocateArrayNode* Ideal_array_allocation(Node* ptr, PhaseValues* phase) {\n-    AllocateNode* allo = Ideal_allocation(ptr, phase);\n+  static AllocateArrayNode* Ideal_array_allocation(Node* ptr) {\n+    AllocateNode* allo = Ideal_allocation(ptr);\n","filename":"src\/hotspot\/share\/opto\/callnode.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1208,1 +1208,1 @@\n-  AllocateArrayNode* alloc = AllocateArrayNode::Ideal_array_allocation(array, &_gvn);\n+  AllocateArrayNode* alloc = AllocateArrayNode::Ideal_array_allocation(array);\n@@ -3628,1 +3628,1 @@\n-    assert(AllocateNode::Ideal_allocation(rawoop, &_gvn) == alloc,\n+    assert(AllocateNode::Ideal_allocation(rawoop) == alloc,\n@@ -3630,1 +3630,1 @@\n-    assert(AllocateNode::Ideal_allocation(javaoop, &_gvn) == alloc,\n+    assert(AllocateNode::Ideal_allocation(javaoop) == alloc,\n@@ -3633,1 +3633,1 @@\n-      assert(AllocateArrayNode::Ideal_array_allocation(rawoop, &_gvn) == alloc->as_AllocateArray(),\n+      assert(AllocateArrayNode::Ideal_array_allocation(rawoop) == alloc->as_AllocateArray(),\n@@ -3635,1 +3635,1 @@\n-      assert(AllocateArrayNode::Ideal_array_allocation(javaoop, &_gvn) == alloc->as_AllocateArray(),\n+      assert(AllocateArrayNode::Ideal_array_allocation(javaoop) == alloc->as_AllocateArray(),\n@@ -3921,1 +3921,1 @@\n-AllocateNode* AllocateNode::Ideal_allocation(Node* ptr, PhaseValues* phase) {\n+AllocateNode* AllocateNode::Ideal_allocation(Node* ptr) {\n@@ -3952,1 +3952,1 @@\n-  return Ideal_allocation(base, phase);\n+  return Ideal_allocation(base);\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -4040,1 +4040,1 @@\n-      AllocateArrayNode* alloc = AllocateArrayNode::Ideal_array_allocation(obj, &_gvn);\n+      AllocateArrayNode* alloc = AllocateArrayNode::Ideal_array_allocation(obj);\n@@ -4754,1 +4754,1 @@\n-    alloc = AllocateNode::Ideal_allocation(alloc_obj, &_gvn);\n+    alloc = AllocateNode::Ideal_allocation(alloc_obj);\n@@ -5463,1 +5463,1 @@\n-  AllocateArrayNode* alloc = AllocateArrayNode::Ideal_array_allocation(ptr, &_gvn);\n+  AllocateArrayNode* alloc = AllocateArrayNode::Ideal_array_allocation(ptr);\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1258,1 +1258,1 @@\n-      alloc = AllocateArrayNode::Ideal_array_allocation(dest, &_igvn);\n+      alloc = AllocateArrayNode::Ideal_array_allocation(dest);\n@@ -1276,1 +1276,1 @@\n-    alloc = AllocateArrayNode::Ideal_array_allocation(dest, &_igvn);\n+    alloc = AllocateArrayNode::Ideal_array_allocation(dest);\n","filename":"src\/hotspot\/share\/opto\/macroArrayCopy.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -556,1 +556,1 @@\n-  ArrayCopyNode* ac = find_array_copy_clone(phase, ld_alloc, mem);\n+  ArrayCopyNode* ac = find_array_copy_clone(ld_alloc, mem);\n@@ -611,1 +611,1 @@\n-ArrayCopyNode* MemNode::find_array_copy_clone(PhaseValues* phase, Node* ld_alloc, Node* mem) const {\n+ArrayCopyNode* MemNode::find_array_copy_clone(Node* ld_alloc, Node* mem) const {\n@@ -632,1 +632,1 @@\n-        AllocateNode* alloc = AllocateNode::Ideal_allocation(ac->in(ArrayCopyNode::Dest), phase);\n+        AllocateNode* alloc = AllocateNode::Ideal_allocation(ac->in(ArrayCopyNode::Dest));\n@@ -660,1 +660,1 @@\n-  AllocateNode* alloc  = AllocateNode::Ideal_allocation(base, phase);\n+  AllocateNode* alloc  = AllocateNode::Ideal_allocation(base);\n@@ -708,1 +708,1 @@\n-                                  AllocateNode::Ideal_allocation(st_base, phase),\n+                                  AllocateNode::Ideal_allocation(st_base),\n@@ -1061,1 +1061,1 @@\n-  Node* ld_alloc = AllocateNode::Ideal_allocation(ld_base, phase);\n+  Node* ld_alloc = AllocateNode::Ideal_allocation(ld_base);\n@@ -1163,1 +1163,1 @@\n-        if (ReduceBulkZeroing || find_array_copy_clone(phase, ld_alloc, in(MemNode::Memory)) == nullptr) {\n+        if (ReduceBulkZeroing || find_array_copy_clone(ld_alloc, in(MemNode::Memory)) == nullptr) {\n@@ -1716,1 +1716,1 @@\n-AllocateNode* LoadNode::is_new_object_mark_load(PhaseGVN *phase) const {\n+AllocateNode* LoadNode::is_new_object_mark_load() const {\n@@ -1719,1 +1719,1 @@\n-    AllocateNode* alloc = AllocateNode::Ideal_allocation(address, phase);\n+    AllocateNode* alloc = AllocateNode::Ideal_allocation(address);\n@@ -2133,1 +2133,1 @@\n-  Node* alloc = is_new_object_mark_load(phase);\n+  Node* alloc = is_new_object_mark_load();\n@@ -2520,1 +2520,1 @@\n-    AllocateArrayNode* alloc = AllocateArrayNode::Ideal_array_allocation(base, phase);\n+    AllocateArrayNode* alloc = AllocateArrayNode::Ideal_array_allocation(base);\n@@ -2552,1 +2552,1 @@\n-    AllocateArrayNode* alloc = AllocateArrayNode::Ideal_array_allocation(base, phase);\n+    AllocateArrayNode* alloc = AllocateArrayNode::Ideal_array_allocation(base);\n@@ -3363,1 +3363,1 @@\n-      Node* alloc = AllocateNode::Ideal_allocation(in(MemBarNode::Precedent), phase);\n+      Node* alloc = AllocateNode::Ideal_allocation(in(MemBarNode::Precedent));\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-  ArrayCopyNode* find_array_copy_clone(PhaseValues* phase, Node* ld_alloc, Node* mem) const;\n+  ArrayCopyNode* find_array_copy_clone(Node* ld_alloc, Node* mem) const;\n@@ -202,1 +202,1 @@\n-  AllocateNode* is_new_object_mark_load(PhaseGVN *phase) const;\n+  AllocateNode* is_new_object_mark_load() const;\n","filename":"src\/hotspot\/share\/opto\/memnode.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1014,1 +1014,1 @@\n-      AllocateNode *alloc = AllocateNode::Ideal_allocation(alloc_with_final(), &_gvn);\n+      AllocateNode* alloc = AllocateNode::Ideal_allocation(alloc_with_final());\n","filename":"src\/hotspot\/share\/opto\/parse1.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -245,1 +245,1 @@\n-      if (AllocateNode::Ideal_allocation(obj, &_gvn) != nullptr) {\n+      if (AllocateNode::Ideal_allocation(obj) != nullptr) {\n","filename":"src\/hotspot\/share\/opto\/parse3.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1684,1 +1684,1 @@\n-  AllocateArrayNode* byte_alloc = AllocateArrayNode::Ideal_array_allocation(byte_array, _gvn);\n+  AllocateArrayNode* byte_alloc = AllocateArrayNode::Ideal_array_allocation(byte_array);\n@@ -2012,1 +2012,1 @@\n-    assert(AllocateNode::Ideal_allocation(result, _gvn) != nullptr, \"should be newly allocated\");\n+    assert(AllocateNode::Ideal_allocation(result) != nullptr, \"should be newly allocated\");\n","filename":"src\/hotspot\/share\/opto\/stringopts.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -991,2 +991,2 @@\n-      AllocateNode* alloc1 = AllocateNode::Ideal_allocation(in1, nullptr);\n-      AllocateNode* alloc2 = AllocateNode::Ideal_allocation(in2, nullptr);\n+      AllocateNode* alloc1 = AllocateNode::Ideal_allocation(in1);\n+      AllocateNode* alloc2 = AllocateNode::Ideal_allocation(in2);\n","filename":"src\/hotspot\/share\/opto\/subnode.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}