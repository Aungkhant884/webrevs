{"files":[{"patch":"@@ -72,0 +72,1 @@\n+import java.util.stream.StreamSupport;\n@@ -390,2 +391,3 @@\n-        } else if (!t.isUnion()) {\n-            return isAccessible(env, t.tsym, checkInner);\n+        } else if (t.isUnion()) {\n+            return StreamSupport.stream(((UnionClassType) t).getAlternativeTypes().spliterator(), false)\n+                    .allMatch(alternative -> isAccessible(env, alternative.tsym, checkInner));\n@@ -393,5 +395,1 @@\n-            boolean canAccessible = true;\n-            for (Type alternativeType : ((UnionClassType) t).getAlternativeTypes()) {\n-                canAccessible = canAccessible && isAccessible(env, alternativeType.tsym, checkInner);\n-            }\n-            return canAccessible;\n+            return isAccessible(env, t.tsym, checkInner);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -104,2 +104,1 @@\n-                .run()\n-                .writeAll();\n+                .run();\n","filename":"test\/langtools\/tools\/javac\/resolve\/PackagePrivateSupertypeAtMultiCatch.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}