{"files":[{"patch":"@@ -388,3 +388,11 @@\n-        return (t.hasTag(ARRAY))\n-            ? isAccessible(env, types.cvarUpperBound(types.elemtype(t)))\n-            : isAccessible(env, t.tsym, checkInner);\n+        if (t.hasTag(ARRAY)) {\n+            return isAccessible(env, types.cvarUpperBound(types.elemtype(t)));\n+        } else if (!t.isUnion()) {\n+            return isAccessible(env, t.tsym, checkInner);\n+        } else {\n+            boolean canAccessible = true;\n+            for (Type alternativeType : ((UnionClassType) t).getAlternativeTypes()) {\n+                canAccessible = canAccessible && isAccessible(env, alternativeType.tsym, checkInner);\n+            }\n+            return canAccessible;\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8264696\n+ * @summary Multi-catch clause causes compiler exception because it uses the package-private supertype\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.compiler\/com.sun.tools.javac.api\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run main PackagePrivateSupertypeAtMultiCatch\n+ *\/\n+\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.Files;\n+\n+import toolbox.ToolBox;\n+import toolbox.TestRunner;\n+import toolbox.JavacTask;\n+\n+public class PackagePrivateSupertypeAtMultiCatch extends TestRunner {\n+    ToolBox tb;\n+\n+    private static String testCode = \"\"\"\n+            package pkg1;\n+            import pkg2.Child1Exception;\n+            import pkg2.Child2Exception;\n+            class Test {\n+                void success() {\n+                    try {\n+                        foo();\n+                    } catch (Child1Exception e) {\n+                        e.getMessage();\n+                    } catch (Child2Exception e) {\n+                        e.getMessage();\n+                    }\n+                }\n+                void fail() {\n+                    try {\n+                        foo();\n+                    } catch (Child1Exception | Child2Exception e) {\n+                        e.getMessage();\n+                    }\n+                }\n+                void foo() throws Child1Exception, Child2Exception {\n+                }\n+            }\"\"\";\n+\n+    private static String parentExceptionCode = \"\"\"\n+            package pkg2;\n+            class ParentException extends Exception {\n+            }\"\"\";\n+\n+    private static String child1ExceptionCode = \"\"\"\n+            package pkg2;\n+            public class Child1Exception extends ParentException {\n+            }\"\"\";\n+\n+    private static String child2ExceptionCode = \"\"\"\n+            package pkg2;\n+            public class Child2Exception extends ParentException {\n+            }\"\"\";\n+\n+    public PackagePrivateSupertypeAtMultiCatch() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        new PackagePrivateSupertypeAtMultiCatch().runTests();\n+    }\n+\n+    @Test\n+    public void testPackagePrivateSupertypeAtMultiCatch() throws Exception {\n+        Path src = Paths.get(\"src\");\n+        tb.writeJavaFiles(src, testCode, parentExceptionCode, child1ExceptionCode, child2ExceptionCode);\n+        Path out = Paths.get(\"out\");\n+        Files.createDirectories(out);\n+        new JavacTask(tb)\n+                .files(tb.findJavaFiles(src))\n+                .outdir(out)\n+                .run()\n+                .writeAll();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/resolve\/PackagePrivateSupertypeAtMultiCatch.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"}]}