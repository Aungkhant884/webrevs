{"files":[{"patch":"@@ -70,2 +70,0 @@\n-        customTmpdir = props.get(\"java.io.tmpdir\");\n-\n@@ -113,0 +111,2 @@\n+\n+        customTmpdir = props.get(\"java.io.tmpdir\");\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/SystemProps.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,117 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8290313\n+ * @library \/test\/lib\n+ * @summary Produce warning when user specified java.io.tmpdir directory doesn't exist\n+ *\/\n+\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+public class TempDirDoesNotExist {\n+    final static String ioWarningMsg = \"WARNING: java.io.tmpdir directory does not exist\";\n+\n+    public static void main(String... args) throws Exception {\n+\n+        String userDir = System.getProperty(\"user.home\");\n+        String timeStamp = java.time.Instant.now().toString();\n+        String tempDir = Path.of(userDir,\"non-existing-\", timeStamp).toString();\n+        System.out.println(\"args length:\"+args.length);\n+        for (String arg : args) {\n+            System.out.println(\"args value:\" + arg);\n+            if (arg.equals(\"io\")) {\n+                try {\n+                    File.createTempFile(\"prefix\", \".suffix\");\n+                } catch (Exception e) {\n+                    e.printStackTrace();\n+                }\n+            } else if (arg.equals(\"nio\")) {\n+                try {\n+                    Files.createTempFile(\"prefix\", \".suffix\");\n+                } catch (Exception e) {\n+                    e.printStackTrace();\n+                }\n+            } else {\n+                throw new Exception(\"unknown case: \" + arg);\n+            }\n+        }\n+\n+        if (args.length == 0) {\n+            \/\/ standard test with default setting for java.io.tmpdir\n+            testMessageNotExist(0, ioWarningMsg, \"TempDirDoesNotExist\", \"io\");\n+            testMessageNotExist(0, ioWarningMsg, \"TempDirDoesNotExist\", \"nio\");\n+\n+            \/\/ valid custom java.io.tmpdir\n+            testMessageNotExist(0, ioWarningMsg, \"-Djava.io.tmpdir=\" + userDir,\n+                    \"TempDirDoesNotExist\", \"io\");\n+            testMessageNotExist(0, ioWarningMsg, \"-Djava.io.tmpdir=\" + userDir,\n+                    \"TempDirDoesNotExist\", \"nio\");\n+\n+            \/\/ invalid custom java.io.tmpdir\n+            testMessageExist(0, ioWarningMsg, \"-Djava.io.tmpdir=\" + tempDir,\n+                    \"TempDirDoesNotExist\", \"io\");\n+            testMessageExist(0, ioWarningMsg, \"-Djava.io.tmpdir=\" + tempDir,\n+                    \"TempDirDoesNotExist\", \"nio\");\n+\n+            \/\/ test with security manager\n+            testMessageExist(0, ioWarningMsg, \"-Djava.io.tmpdir=\" + tempDir\n+                            + \" -Djava.security.manager\",\n+                    \"TempDirDoesNotExist\", \"io\");\n+\n+            testMessageExist(0, ioWarningMsg, \"-Djava.io.tmpdir=\" + tempDir\n+                            + \" -Djava.security.manager\",\n+                    \"TempDirDoesNotExist\", \"nio\");\n+\n+            \/\/ error message printed only once\n+            testMessageCounter(0, \"-Djava.io.tmpdir=\" + tempDir,\n+                    \"TempDirDoesNotExist\", \"io\", \"nio\");\n+        }\n+    }\n+\n+    private static void testMessageExist(int exitValue, String errorMsg, String... options) throws Exception {\n+        ProcessTools.executeTestJvm(options).shouldContain(errorMsg)\n+                .shouldHaveExitValue(exitValue);\n+    }\n+\n+    private static void testMessageNotExist(int exitValue, String errorMsg,String... options) throws Exception {\n+        ProcessTools.executeTestJvm(options).shouldNotContain(errorMsg).shouldHaveExitValue(exitValue);\n+    }\n+\n+    private static void testMessageCounter(int exitValue,String... options) throws Exception {\n+        OutputAnalyzer originalOutput = ProcessTools.executeTestJvm(options);\n+        List<String> list = originalOutput.asLines().stream().filter(line\n+                -> line.equalsIgnoreCase(ioWarningMsg)).collect(Collectors.toList());\n+        if (list.size() != 1 || originalOutput.getExitValue() != exitValue)\n+            throw new Exception(\"counter of messages is not one, but \" + list.size()\n+                    + \"\\n\" + originalOutput.asLines().toString());\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/io\/File\/TempDirDoesNotExist.java","additions":117,"deletions":0,"binary":false,"changes":117,"status":"added"},{"patch":"@@ -1,128 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n- * @bug 8290313\n- * @library \/test\/lib\n- * @summary Produce warning when user specified java.io.tmpdir directory doesn't exist\n- *\/\n-\n-import jdk.test.lib.Platform;\n-import jdk.test.lib.process.ProcessTools;\n-import jdk.test.lib.process.OutputAnalyzer;\n-\n-import java.io.File;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.util.List;\n-import java.util.stream.Collectors;\n-\n-public class TempDirectoryNotExisting {\n-    final static String ioWarningMsg = \"WARNING: java.io.tmpdir directory does not exist\";\n-\n-    public static void main(String... args) throws Exception {\n-\n-        String userDir = System.getProperty(\"user.home\");\n-        String timeStamp = java.time.Instant.now().toString();\n-        String tempDir = Path.of(userDir,\"non-existing-\", timeStamp).toString();\n-        System.out.println(\"args length:\"+args.length);\n-        for (String arg : args) {\n-            System.out.println(\"args value:\" + arg);\n-            if (arg.equals(\"io\")) {\n-                try {\n-                    File.createTempFile(\"prefix\", \".suffix\");\n-                } catch (Exception e) {\n-                    e.printStackTrace();\n-                }\n-            } else if (arg.equals(\"nio\")) {\n-                try {\n-                    Files.createTempFile(\"prefix\", \".suffix\");\n-                } catch (Exception e) {\n-                    e.printStackTrace();\n-                }\n-            } else if (arg.equals(\"io-nio\")) {\n-                try {\n-                    File.createTempFile(\"prefix\", \".suffix\");\n-                } catch (Exception e) {\n-                    e.printStackTrace();\n-                }\n-                try {\n-                    Files.createTempFile(\"prefix\", \".suffix\");\n-                } catch (Exception e) {\n-                    e.printStackTrace();\n-                }\n-            } else {\n-                throw new Exception(\"unknown case: \" + arg);\n-            }\n-        }\n-\n-        if (args.length == 0) {\n-            \/\/ standard test with default setting for java.io.tmpdir\n-            testMessageNotExist(0, ioWarningMsg, \"TempDirectoryNotExisting\", \"io\");\n-            testMessageNotExist(0, ioWarningMsg, \"TempDirectoryNotExisting\", \"nio\");\n-\n-            \/\/ valid custom java.io.tmpdir\n-            testMessageNotExist(0, ioWarningMsg, \"-Djava.io.tmpdir=\" + userDir,\n-                    \"TempDirectoryNotExisting\", \"io\");\n-            testMessageNotExist(0, ioWarningMsg, \"-Djava.io.tmpdir=\" + userDir,\n-                    \"TempDirectoryNotExisting\", \"nio\");\n-\n-            \/\/ invalid custom java.io.tmpdir\n-            testMessageExist(0, ioWarningMsg, \"-Djava.io.tmpdir=\" + tempDir,\n-                    \"TempDirectoryNotExisting\", \"io\");\n-            testMessageExist(0, ioWarningMsg, \"-Djava.io.tmpdir=\" + tempDir,\n-                    \"TempDirectoryNotExisting\", \"nio\");\n-\n-            \/\/ test with security manager\n-            testMessageExist(0, ioWarningMsg, \"-Djava.io.tmpdir=\" + tempDir\n-                            + \" -Djava.security.manager\",\n-                    \"TempDirectoryNotExisting\", \"io\");\n-\n-            testMessageExist(0, ioWarningMsg, \"-Djava.io.tmpdir=\" + tempDir\n-                            + \" -Djava.security.manager\",\n-                    \"TempDirectoryNotExisting\", \"nio\");\n-\n-            \/\/ error message printed only once\n-            testMessageCounter(0, \"-Djava.io.tmpdir=\" + tempDir,\n-                    \"TempDirectoryNotExisting\", \"io-nio\");\n-        }\n-    }\n-\n-    private static void testMessageExist(int exitValue, String errorMsg, String... options) throws Exception {\n-        ProcessTools.executeTestJvm(options).shouldContain(errorMsg)\n-                .shouldHaveExitValue(exitValue);\n-    }\n-\n-    private static void testMessageNotExist(int exitValue, String errorMsg,String... options) throws Exception {\n-        ProcessTools.executeTestJvm(options).shouldNotContain(errorMsg).shouldHaveExitValue(exitValue);\n-    }\n-\n-    private static void testMessageCounter(int exitValue,String... options) throws Exception {\n-        OutputAnalyzer originalOutput = ProcessTools.executeTestJvm(options);\n-        List<String> list = originalOutput.asLines().stream().filter(line\n-                -> line.equalsIgnoreCase(ioWarningMsg)).collect(Collectors.toList());\n-        if (list.size() != 1 || originalOutput.getExitValue() != exitValue)\n-            throw new Exception(\"counter of messages is not one, but \" + list.size()\n-                    + \"\\n\" + originalOutput.asLines().toString());\n-    }\n-}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/io\/File\/TempDirectoryNotExisting.java","additions":0,"deletions":128,"binary":false,"changes":128,"status":"deleted"}]}