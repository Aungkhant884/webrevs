{"files":[{"patch":"@@ -2248,2 +2248,2 @@\n-        if (SystemProps.checkIfWarningRequired()) {\n-            System.err.println(\"WARNING: java.io.tmpdir location does not exist\");\n+        if (SystemProps.checkIoTmpdir()) {\n+            System.err.println(\"WARNING: java.io.tmpdir directory does not exist\");\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-    \/\/ custom java.io.tmpdir via command line\n+    \/\/ Custom java.io.tmpdir via command line.\n@@ -48,1 +48,1 @@\n-     * check if warning for custom java.io.tmpdir is required\n+     * Check if warning for custom java.io.tmpdir is required.\n@@ -52,1 +52,1 @@\n-    public static boolean checkIfWarningRequired() {\n+    public static boolean checkIoTmpdir() {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/SystemProps.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import jdk.test.lib.process.OutputAnalyzer;\n@@ -40,1 +41,1 @@\n-    final static String ioWarningMsg = \"WARNING: java.io.tmpdir location does not exist\";\n+    final static String ioWarningMsg = \"WARNING: java.io.tmpdir directory does not exist\";\n@@ -45,1 +46,1 @@\n-        String timeStamp = System.currentTimeMillis() + \"\";\n+        String timeStamp = java.time.Instant.now().toString();\n@@ -47,3 +48,4 @@\n-\n-        if (args.length != 0) {\n-            if (args[0].equals(\"io\")) {\n+        System.out.println(\"args length:\"+args.length);\n+        for (String arg : args) {\n+            System.out.println(\"args value:\" + arg);\n+            if (arg.equals(\"io\")) {\n@@ -55,19 +57,5 @@\n-            } else {\n-\n-                if (args[0].equals(\"nio\")) {\n-                    try {\n-                        Files.createTempFile(\"prefix\", \".suffix\");\n-                    } catch (Exception e) {\n-                        e.printStackTrace();\n-                    }\n-                } else {\n-                    try {\n-                        File.createTempFile(\"prefix\", \".suffix\");\n-                    } catch (Exception e) {\n-                        e.printStackTrace();\n-                    }\n-                    try {\n-                        Files.createTempFile(\"prefix\", \".suffix\");\n-                    } catch (Exception e) {\n-                        e.printStackTrace();\n-                    }\n+            } else if (arg.equals(\"nio\")) {\n+                try {\n+                    Files.createTempFile(\"prefix\", \".suffix\");\n+                } catch (Exception e) {\n+                    e.printStackTrace();\n@@ -75,0 +63,13 @@\n+            } else if (arg.equals(\"io-nio\")) {\n+                try {\n+                    File.createTempFile(\"prefix\", \".suffix\");\n+                } catch (Exception e) {\n+                    e.printStackTrace();\n+                }\n+                try {\n+                    Files.createTempFile(\"prefix\", \".suffix\");\n+                } catch (Exception e) {\n+                    e.printStackTrace();\n+                }\n+            } else {\n+                throw new Exception(\"unknown case: \" + arg);\n@@ -76,1 +77,1 @@\n-        } else {\n+        }\n@@ -78,0 +79,1 @@\n+        if (args.length == 0) {\n@@ -119,5 +121,6 @@\n-        List<String> list = ProcessTools.executeTestJvm(options).shouldHaveExitValue(exitValue)\n-                .asLines().stream()\n-                .filter(line -> line.equalsIgnoreCase(ioWarningMsg))\n-                .collect(Collectors.toList());\n-        if (list.size() != 1) throw new Exception(\"counter of messages is not one, but \" + list.size());\n+        OutputAnalyzer originalOutput = ProcessTools.executeTestJvm(options);\n+        List<String> list = originalOutput.asLines().stream().filter(line\n+                -> line.equalsIgnoreCase(ioWarningMsg)).collect(Collectors.toList());\n+        if (list.size() != 1 || originalOutput.getExitValue() != exitValue)\n+            throw new Exception(\"counter of messages is not one, but \" + list.size()\n+                    + \"\\n\" + originalOutput.asLines().toString());\n","filename":"test\/jdk\/java\/io\/File\/TempDirectoryNotExisting.java","additions":33,"deletions":30,"binary":false,"changes":63,"status":"modified"}]}