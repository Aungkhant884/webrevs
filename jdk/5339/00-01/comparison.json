{"files":[{"patch":"@@ -388,1 +388,0 @@\n-\n@@ -405,1 +404,0 @@\n-\n@@ -415,1 +413,0 @@\n-\n@@ -422,1 +419,0 @@\n-\n","filename":"src\/hotspot\/share\/jvmci\/jvmci.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+  friend class VM_JVMCIResizeCounters;\n@@ -97,0 +98,3 @@\n+  \/\/ Accumulated counters for threads which have exited.\n+  static jlong* _jvmci_old_thread_counters;\n+\n@@ -159,1 +163,0 @@\n- public:\n@@ -167,5 +170,3 @@\n-  static jlong* _jvmci_old_thread_counters;\n-  static void collect_counters(jlong* array, int length);\n-\n-  static bool resize_counters(JavaThread* thread, int current_size, int new_size);\n-\n+  \/\/ Manage shared global counter storage\n+  static void init_counters();\n+  static void free_counters();\n@@ -174,1 +175,2 @@\n-  static void free_counters(JavaThread* thread);\n+  \/\/ Return the total of the counters from all live and exited threads\n+  static void collect_counters(jlong* array, int length);\n@@ -176,0 +178,1 @@\n+  \/\/ Accumulate the counters of this exiting thread into the global counts\n@@ -178,1 +181,2 @@\n-  static void init_counters();\n+  \/\/ Release the storage for the per thread counters\n+  static void free_counters(JavaThread* thread);\n@@ -180,1 +184,2 @@\n-  static void free_counters();\n+  \/\/ Enlarge the per thread counter storage\n+  static bool resize_counters(JavaThread* thread, int current_size, int new_size);\n@@ -190,1 +195,0 @@\n-  friend class JavaThread;\n@@ -198,1 +202,1 @@\n-  int       _pending_deoptimization;\n+  int _pending_deoptimization;\n@@ -202,1 +206,1 @@\n-  bool      _pending_monitorenter;\n+  bool _pending_monitorenter;\n@@ -205,1 +209,1 @@\n-  bool      _pending_transfer_to_interpreter;\n+  bool _pending_transfer_to_interpreter;\n@@ -209,1 +213,1 @@\n-  bool      _in_retryable_allocation;\n+  bool _in_retryable_allocation;\n@@ -214,1 +218,1 @@\n-  jlong     _pending_failed_speculation;\n+  jlong _pending_failed_speculation;\n@@ -220,1 +224,1 @@\n-    address   _implicit_exception_pc;\n+    address _implicit_exception_pc;\n@@ -223,1 +227,1 @@\n-    address   _alternate_call_target;\n+    address _alternate_call_target;\n@@ -227,1 +231,1 @@\n-  jlong*    _jvmci_counters;\n+  jlong* _jvmci_counters;\n@@ -230,3 +234,3 @@\n-  jlong      _jvmci_reserved0;\n-  jlong      _jvmci_reserved1;\n-  oop        _jvmci_reserved_oop0;\n+  jlong _jvmci_reserved0;\n+  jlong _jvmci_reserved1;\n+  oop _jvmci_reserved_oop0;\n@@ -234,1 +238,1 @@\n- public:\n+ public :\n@@ -244,0 +248,1 @@\n+  address implicit_exception_pc()                 { return _union._implicit_exception_pc; }\n@@ -247,15 +252,3 @@\n-  void set_jvmci_reserved_oop0(oop value) {\n-    _jvmci_reserved_oop0 = value;\n-  }\n-\n-  oop get_jvmci_reserved_oop0() {\n-    return _jvmci_reserved_oop0;\n-  }\n-\n-  void set_jvmci_reserved0(jlong value) {\n-    _jvmci_reserved0 = value;\n-  }\n-\n-  jlong get_jvmci_reserved0() {\n-    return _jvmci_reserved0;\n-  }\n+  void set_jvmci_reserved_oop0(oop value) { _jvmci_reserved_oop0 = value;  }\n+  void set_jvmci_reserved0(jlong value)   { _jvmci_reserved0 = value;  }\n+  void set_jvmci_reserved1(jlong value)   { _jvmci_reserved1 = value;  }\n@@ -263,3 +256,3 @@\n-  void set_jvmci_reserved1(jlong value) {\n-    _jvmci_reserved1 = value;\n-  }\n+  oop get_jvmci_reserved_oop0()           { return _jvmci_reserved_oop0;  }\n+  jlong get_jvmci_reserved0()             { return _jvmci_reserved0;  }\n+  jlong get_jvmci_reserved1()             { return _jvmci_reserved1;  }\n@@ -267,3 +260,1 @@\n-  jlong get_jvmci_reserved1() {\n-    return _jvmci_reserved1;\n-  }\n+  oop* jvmci_reserved_oop0_addr()         { return &_jvmci_reserved_oop0; }\n","filename":"src\/hotspot\/share\/jvmci\/jvmci.hpp","additions":34,"deletions":43,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -947,1 +947,1 @@\n-  assert(jvmci()._jvmci._implicit_exception_pc == nullptr, \"must be\");\n+  assert(jvmci().implicit_exception_pc() == nullptr, \"must be\");\n@@ -1858,1 +1858,1 @@\n-  f->do_oop((oop*) &_jvmci_state._jvmci_reserved_oop0);\n+  f->do_oop((oop*) _jvmci_state.jvmci_reserved_oop0_addr());\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}