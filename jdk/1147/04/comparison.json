{"files":[{"patch":"@@ -12,1 +12,1 @@\n-        default: \"Linux x64, Linux x86, Windows x64, macOS x64\"\n+        default: \"Linux aarch64, Linux arm, Linux ppc64le, Linux s390x, Linux x64, Linux x86, Windows x64, macOS x64\"\n@@ -21,0 +21,4 @@\n+      platform_linux_aarch64: ${{ steps.check_platforms.outputs.platform_linux_aarch64 }}\n+      platform_linux_arm: ${{ steps.check_platforms.outputs.platform_linux_arm }}\n+      platform_linux_ppc64le: ${{ steps.check_platforms.outputs.platform_linux_ppc64le }}\n+      platform_linux_s390x: ${{ steps.check_platforms.outputs.platform_linux_s390x }}\n@@ -35,0 +39,4 @@\n+          echo \"::set-output name=platform_linux_aarch64::${{ contains(github.event.inputs.platforms, 'linux aarch64') || (github.event.inputs.platforms == '' && (secrets.JDK_SUBMIT_PLATFORMS == '' || contains(secrets.JDK_SUBMIT_PLATFORMS, 'linux aarch64'))) }}\"\n+          echo \"::set-output name=platform_linux_arm::${{ contains(github.event.inputs.platforms, 'linux arm') || (github.event.inputs.platforms == '' && (secrets.JDK_SUBMIT_PLATFORMS == '' || contains(secrets.JDK_SUBMIT_PLATFORMS, 'linux arm'))) }}\"\n+          echo \"::set-output name=platform_linux_ppc64le::${{ contains(github.event.inputs.platforms, 'linux ppc64le') || (github.event.inputs.platforms == '' && (secrets.JDK_SUBMIT_PLATFORMS == '' || contains(secrets.JDK_SUBMIT_PLATFORMS, 'linux ppc64le'))) }}\"\n+          echo \"::set-output name=platform_linux_s390x::${{ contains(github.event.inputs.platforms, 'linux s390x') || (github.event.inputs.platforms == '' && (secrets.JDK_SUBMIT_PLATFORMS == '' || contains(secrets.JDK_SUBMIT_PLATFORMS, 'linux s390x'))) }}\"\n@@ -389,0 +397,544 @@\n+  linux_aarch64_build:\n+    name: Linux aarch64\n+    runs-on: \"ubuntu-latest\"\n+    needs:\n+      - prerequisites\n+      - linux_x64_build\n+    if: needs.prerequisites.outputs.should_run != 'false' && needs.prerequisites.outputs.platform_linux_aarch64 != 'false'\n+\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        flavor:\n+          - build release\n+          - build debug\n+        include:\n+          - flavor: build debug\n+            flags: --enable-debug\n+            artifact: -debug\n+\n+    env:\n+      JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).DEFAULT_VERSION_FEATURE }}\"\n+      BOOT_JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}\"\n+      BOOT_JDK_FILENAME: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_FILENAME }}\"\n+      BOOT_JDK_URL: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_URL }}\"\n+      BOOT_JDK_SHA256: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_SHA256 }}\"\n+\n+    steps:\n+      - name: Checkout the source\n+        uses: actions\/checkout@v2\n+        with:\n+          path: jdk\n+\n+      - name: Restore boot JDK from cache\n+        id: bootjdk\n+        uses: actions\/cache@v2\n+        with:\n+          path: ~\/bootjdk\/${{ env.BOOT_JDK_VERSION }}\n+          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1\n+\n+      - name: Download boot JDK\n+        run: |\n+          mkdir -p \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n+          wget -O \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" \"${BOOT_JDK_URL}\"\n+          echo \"${BOOT_JDK_SHA256} ${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" | sha256sum -c >\/dev\/null -\n+          tar -xf \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" -C \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n+          mv \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"*\/* \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"\n+        if: steps.bootjdk.outputs.cache-hit != 'true'\n+\n+      - name: Restore build JDK\n+        id: build_restore\n+        uses: actions\/download-artifact@v2\n+        with:\n+          name: transient_jdk-linux-x64_${{ needs.prerequisites.outputs.bundle_id }}\n+          path: ~\/jdk-linux-x64\n+        continue-on-error: true\n+\n+      - name: Unpack jdk\n+        run: |\n+          mkdir -p \"${HOME}\/jdk-linux-x64\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin\"\n+          tar -xf \"${HOME}\/jdk-linux-x64\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin.tar.gz\" -C \"${HOME}\/jdk-linux-x64\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin\"\n+\n+      - name: Find root of build JDK image dir\n+        run: |\n+          build_jdk_root=`find ${HOME}\/jdk-linux-x64\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin -name release -type f`\n+          echo \"build_jdk_root=`dirname ${build_jdk_root}`\" >> $GITHUB_ENV\n+\n+      - name: Install cross-compilation host dependencies\n+        run: |\n+          sudo apt-get update\n+          sudo apt-get install g++-aarch64-linux-gnu gcc-aarch64-linux-gnu\n+\n+      - name: Cache sysroot\n+        id: cache-sysroot\n+        uses: actions\/cache@v2\n+        with:\n+          path: ~\/sysroot-arm64\/\n+          key: sysroot-arm64-${{ hashFiles('jdk\/.github\/workflows\/submit.yml') }}\n+\n+      - name: Install sysroot host dependencies\n+        run: |\n+          sudo apt-get install debootstrap qemu-user-static\n+        if: steps.cache-sysroot.outputs.cache-hit != 'true'\n+\n+      - name: Create sysroot\n+        run: >\n+          sudo qemu-debootstrap\n+          --arch=arm64\n+          --verbose\n+          --include=fakeroot,symlinks,build-essential,libx11-dev,libxext-dev,libxrender-dev,libxrandr-dev,libxtst-dev,libxt-dev,libcups2-dev,libfontconfig1-dev,libasound2-dev,libfreetype6-dev,libpng-dev\n+          --resolve-deps\n+          buster\n+          ~\/sysroot-arm64\n+          http:\/\/httpredir.debian.org\/debian\/\n+        if: steps.cache-sysroot.outputs.cache-hit != 'true'\n+\n+      - name: Relativize symlinks in sysroot\n+        run: >\n+          sudo chroot ~\/sysroot-arm64 symlinks -cr .\n+        if: steps.cache-sysroot.outputs.cache-hit != 'true'\n+\n+      - name: Fix permissions in sysroot\n+        run: >\n+          sudo chown ${USER} -R ~\/sysroot-arm64\n+        if: steps.cache-sysroot.outputs.cache-hit != 'true'\n+\n+      - name: Remove special directories in sysroot\n+        run: >\n+          rm -rf ~\/sysroot-arm64\/{dev,proc,run,sys}\n+        if: steps.cache-sysroot.outputs.cache-hit != 'true'\n+\n+      - name: Configure\n+        env:\n+          CC: aarch64-linux-gnu-gcc\n+          CXX: aarch64-linux-gnu-g++\n+        run: >\n+          bash configure\n+          ${{ matrix.flags }}\n+          --openjdk-target=aarch64-linux-gnu\n+          --with-sysroot=${HOME}\/sysroot-arm64\/\n+          --with-toolchain-path=${HOME}\/sysroot-arm64\/\n+          --with-freetype-lib=${HOME}\/sysroot-arm64\/usr\/lib\/aarch64-linux-gnu\/\n+          --with-freetype-include=${HOME}\/sysroot-arm64\/usr\/include\/freetype2\/\n+          --x-libraries=${HOME}\/sysroot-arm64\/usr\/lib\/aarch64-linux-gnu\/\n+          --with-build-jdk=${{ env.build_jdk_root }}\n+          --with-conf-name=linux-aarch64\n+          --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA}\n+          --with-version-build=0\n+          --with-boot-jdk=${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\n+          --with-default-make-target=\"product-bundles test-bundles\"\n+          --with-zlib=system\n+        working-directory: jdk\n+\n+      - name: Build\n+        run: make CONF_NAME=linux-aarch64 ${{ matrix.build-target }}\n+        working-directory: jdk\n+\n+  linux_arm_build:\n+    name: Linux arm\n+    runs-on: \"ubuntu-latest\"\n+    needs:\n+      - prerequisites\n+      - linux_x64_build\n+    if: needs.prerequisites.outputs.should_run != 'false' && needs.prerequisites.outputs.platform_linux_arm != 'false'\n+\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        flavor:\n+          - build release\n+          - build debug\n+        include:\n+          - flavor: build debug\n+            flags: --enable-debug\n+            artifact: -debug\n+\n+    env:\n+      JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).DEFAULT_VERSION_FEATURE }}\"\n+      BOOT_JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}\"\n+      BOOT_JDK_FILENAME: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_FILENAME }}\"\n+      BOOT_JDK_URL: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_URL }}\"\n+      BOOT_JDK_SHA256: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_SHA256 }}\"\n+\n+    steps:\n+      - name: Checkout the source\n+        uses: actions\/checkout@v2\n+        with:\n+          path: jdk\n+\n+      - name: Restore boot JDK from cache\n+        id: bootjdk\n+        uses: actions\/cache@v2\n+        with:\n+          path: ~\/bootjdk\/${{ env.BOOT_JDK_VERSION }}\n+          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1\n+\n+      - name: Download boot JDK\n+        run: |\n+          mkdir -p \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n+          wget -O \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" \"${BOOT_JDK_URL}\"\n+          echo \"${BOOT_JDK_SHA256} ${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" | sha256sum -c >\/dev\/null -\n+          tar -xf \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" -C \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n+          mv \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"*\/* \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"\n+        if: steps.bootjdk.outputs.cache-hit != 'true'\n+\n+      - name: Restore build JDK\n+        id: build_restore\n+        uses: actions\/download-artifact@v2\n+        with:\n+          name: transient_jdk-linux-x64_${{ needs.prerequisites.outputs.bundle_id }}\n+          path: ~\/jdk-linux-x64\n+        continue-on-error: true\n+\n+      - name: Unpack jdk\n+        run: |\n+          mkdir -p \"${HOME}\/jdk-linux-x64\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin\"\n+          tar -xf \"${HOME}\/jdk-linux-x64\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin.tar.gz\" -C \"${HOME}\/jdk-linux-x64\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin\"\n+\n+      - name: Find root of build JDK image dir\n+        run: |\n+          build_jdk_root=`find ${HOME}\/jdk-linux-x64\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin -name release -type f`\n+          echo \"build_jdk_root=`dirname ${build_jdk_root}`\" >> $GITHUB_ENV\n+\n+      - name: Install cross-compilation host dependencies\n+        run: |\n+          sudo apt-get update\n+          sudo apt-get install g++-arm-linux-gnueabihf gcc-arm-linux-gnueabihf\n+\n+      - name: Cache sysroot\n+        id: cache-sysroot\n+        uses: actions\/cache@v2\n+        with:\n+          path: ~\/sysroot-armhf\/\n+          key: sysroot-armhf-${{ hashFiles('jdk\/.github\/workflows\/submit.yml') }}\n+\n+      - name: Install sysroot host dependencies\n+        run: |\n+          sudo apt-get install debootstrap qemu-user-static\n+        if: steps.cache-sysroot.outputs.cache-hit != 'true'\n+\n+      - name: Create sysroot\n+        run: >\n+          sudo qemu-debootstrap\n+          --arch=armhf\n+          --verbose\n+          --include=fakeroot,symlinks,build-essential,libx11-dev,libxext-dev,libxrender-dev,libxrandr-dev,libxtst-dev,libxt-dev,libcups2-dev,libfontconfig1-dev,libasound2-dev,libfreetype6-dev,libpng-dev\n+          --resolve-deps\n+          buster\n+          ~\/sysroot-armhf\n+          http:\/\/httpredir.debian.org\/debian\/\n+        if: steps.cache-sysroot.outputs.cache-hit != 'true'\n+\n+      - name: Relativize symlinks in sysroot\n+        run: >\n+          sudo chroot ~\/sysroot-armhf symlinks -cr .\n+        if: steps.cache-sysroot.outputs.cache-hit != 'true'\n+\n+      - name: Fix permissions in sysroot\n+        run: >\n+          sudo chown ${USER} -R ~\/sysroot-armhf\n+        if: steps.cache-sysroot.outputs.cache-hit != 'true'\n+\n+      - name: Remove special directories in sysroot\n+        run: >\n+          rm -rf ~\/sysroot-armhf\/{dev,proc,run,sys}\n+        if: steps.cache-sysroot.outputs.cache-hit != 'true'\n+\n+      - name: Configure\n+        env:\n+          CC: arm-linux-gnueabihf-gcc\n+          CXX: arm-linux-gnueabihf-g++\n+        run: >\n+          bash configure\n+          ${{ matrix.flags }}\n+          --openjdk-target=arm-linux-gnueabihf\n+          --with-sysroot=${HOME}\/sysroot-armhf\/\n+          --with-toolchain-path=${HOME}\/sysroot-armhf\/\n+          --with-freetype-lib=${HOME}\/sysroot-armhf\/usr\/lib\/arm-linux-gnueabihf\/\n+          --with-freetype-include=${HOME}\/sysroot-armhf\/usr\/include\/freetype2\/\n+          --x-libraries=${HOME}\/sysroot-armhf\/usr\/lib\/arm-linux-gnueabihf\/\n+          --with-build-jdk=${{ env.build_jdk_root }}\n+          --with-conf-name=linux-arm\n+          --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA}\n+          --with-version-build=0\n+          --with-boot-jdk=${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\n+          --with-default-make-target=\"product-bundles test-bundles\"\n+          --with-zlib=system\n+        working-directory: jdk\n+\n+      - name: Build\n+        run: make CONF_NAME=linux-arm ${{ matrix.build-target }}\n+        working-directory: jdk\n+\n+  linux_s390x_build:\n+    name: Linux s390x\n+    runs-on: \"ubuntu-latest\"\n+    needs:\n+      - prerequisites\n+      - linux_x64_build\n+    if: needs.prerequisites.outputs.should_run != 'false' && needs.prerequisites.outputs.platform_linux_s390x != 'false'\n+\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        flavor:\n+          - build release\n+          - build debug\n+        include:\n+          - flavor: build debug\n+            flags: --enable-debug\n+            artifact: -debug\n+\n+    env:\n+      JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).DEFAULT_VERSION_FEATURE }}\"\n+      BOOT_JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}\"\n+      BOOT_JDK_FILENAME: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_FILENAME }}\"\n+      BOOT_JDK_URL: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_URL }}\"\n+      BOOT_JDK_SHA256: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_SHA256 }}\"\n+\n+    steps:\n+      - name: Checkout the source\n+        uses: actions\/checkout@v2\n+        with:\n+          path: jdk\n+\n+      - name: Restore boot JDK from cache\n+        id: bootjdk\n+        uses: actions\/cache@v2\n+        with:\n+          path: ~\/bootjdk\/${{ env.BOOT_JDK_VERSION }}\n+          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1\n+\n+      - name: Download boot JDK\n+        run: |\n+          mkdir -p \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n+          wget -O \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" \"${BOOT_JDK_URL}\"\n+          echo \"${BOOT_JDK_SHA256} ${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" | sha256sum -c >\/dev\/null -\n+          tar -xf \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" -C \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n+          mv \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"*\/* \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"\n+        if: steps.bootjdk.outputs.cache-hit != 'true'\n+\n+      - name: Restore build JDK\n+        id: build_restore\n+        uses: actions\/download-artifact@v2\n+        with:\n+          name: transient_jdk-linux-x64_${{ needs.prerequisites.outputs.bundle_id }}\n+          path: ~\/jdk-linux-x64\n+        continue-on-error: true\n+\n+      - name: Unpack jdk\n+        run: |\n+          mkdir -p \"${HOME}\/jdk-linux-x64\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin\"\n+          tar -xf \"${HOME}\/jdk-linux-x64\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin.tar.gz\" -C \"${HOME}\/jdk-linux-x64\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin\"\n+\n+      - name: Find root of build JDK image dir\n+        run: |\n+          build_jdk_root=`find ${HOME}\/jdk-linux-x64\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin -name release -type f`\n+          echo \"build_jdk_root=`dirname ${build_jdk_root}`\" >> $GITHUB_ENV\n+\n+      - name: Install cross-compilation host dependencies\n+        run: |\n+          sudo apt-get update\n+          sudo apt-get install g++-s390x-linux-gnu gcc-s390x-linux-gnu\n+\n+      - name: Cache sysroot\n+        id: cache-sysroot\n+        uses: actions\/cache@v2\n+        with:\n+          path: ~\/sysroot-s390x\/\n+          key: sysroot-s390x-${{ hashFiles('jdk\/.github\/workflows\/submit.yml') }}\n+\n+      - name: Install sysroot host dependencies\n+        run: |\n+          sudo apt-get install debootstrap qemu-user-static\n+        if: steps.cache-sysroot.outputs.cache-hit != 'true'\n+\n+      - name: Create sysroot\n+        run: >\n+          sudo qemu-debootstrap\n+          --arch=s390x\n+          --verbose\n+          --include=fakeroot,symlinks,build-essential,libx11-dev,libxext-dev,libxrender-dev,libxrandr-dev,libxtst-dev,libxt-dev,libcups2-dev,libfontconfig1-dev,libasound2-dev,libfreetype6-dev,libpng-dev\n+          --resolve-deps\n+          buster\n+          ~\/sysroot-s390x\n+          http:\/\/httpredir.debian.org\/debian\/\n+        if: steps.cache-sysroot.outputs.cache-hit != 'true'\n+\n+      - name: Relativize symlinks in sysroot\n+        run: >\n+          sudo chroot ~\/sysroot-s390x symlinks -cr .\n+        if: steps.cache-sysroot.outputs.cache-hit != 'true'\n+\n+      - name: Fix permissions in sysroot\n+        run: >\n+          sudo chown ${USER} -R ~\/sysroot-s390x\n+        if: steps.cache-sysroot.outputs.cache-hit != 'true'\n+\n+      - name: Remove special directories in sysroot\n+        run: >\n+          rm -rf ~\/sysroot-s390x\/{dev,proc,run,sys}\n+        if: steps.cache-sysroot.outputs.cache-hit != 'true'\n+\n+      - name: Configure\n+        env:\n+          CC: s390x-linux-gnu-gcc\n+          CXX: s390x-linux-gnu-g++\n+        run: >\n+          bash configure\n+          ${{ matrix.flags }}\n+          --openjdk-target=s390x-linux-gnu\n+          --with-sysroot=${HOME}\/sysroot-s390x\/\n+          --with-toolchain-path=${HOME}\/sysroot-s390x\/\n+          --with-freetype-lib=${HOME}\/sysroot-s390x\/usr\/lib\/s390x-linux-gnu\/\n+          --with-freetype-include=${HOME}\/sysroot-s390x\/usr\/include\/freetype2\/\n+          --x-libraries=${HOME}\/sysroot-s390x\/usr\/lib\/s390x-linux-gnu\/\n+          --with-build-jdk=${{ env.build_jdk_root }}\n+          --with-conf-name=linux-s390x\n+          --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA}\n+          --with-version-build=0\n+          --with-boot-jdk=${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\n+          --with-default-make-target=\"product-bundles test-bundles\"\n+          --with-zlib=system\n+        working-directory: jdk\n+\n+      - name: Build\n+        run: make CONF_NAME=linux-s390x ${{ matrix.build-target }}\n+        working-directory: jdk\n+\n+  linux_ppc64le_build:\n+    name: Linux ppc64le\n+    runs-on: \"ubuntu-latest\"\n+    needs:\n+      - prerequisites\n+      - linux_x64_build\n+    if: needs.prerequisites.outputs.should_run != 'false' && needs.prerequisites.outputs.platform_linux_ppc64le != 'false'\n+\n+    strategy:\n+      fail-fast: false\n+      matrix:\n+        flavor:\n+          - build release\n+          - build debug\n+        include:\n+          - flavor: build debug\n+            flags: --enable-debug\n+            artifact: -debug\n+\n+    env:\n+      JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).DEFAULT_VERSION_FEATURE }}\"\n+      BOOT_JDK_VERSION: \"${{ fromJson(needs.prerequisites.outputs.dependencies).BOOT_JDK_VERSION }}\"\n+      BOOT_JDK_FILENAME: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_FILENAME }}\"\n+      BOOT_JDK_URL: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_URL }}\"\n+      BOOT_JDK_SHA256: \"${{ fromJson(needs.prerequisites.outputs.dependencies).LINUX_X64_BOOT_JDK_SHA256 }}\"\n+\n+    steps:\n+      - name: Checkout the source\n+        uses: actions\/checkout@v2\n+        with:\n+          path: jdk\n+\n+      - name: Restore boot JDK from cache\n+        id: bootjdk\n+        uses: actions\/cache@v2\n+        with:\n+          path: ~\/bootjdk\/${{ env.BOOT_JDK_VERSION }}\n+          key: bootjdk-${{ runner.os }}-${{ env.BOOT_JDK_VERSION }}-${{ env.BOOT_JDK_SHA256 }}-v1\n+\n+      - name: Download boot JDK\n+        run: |\n+          mkdir -p \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n+          wget -O \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" \"${BOOT_JDK_URL}\"\n+          echo \"${BOOT_JDK_SHA256} ${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" | sha256sum -c >\/dev\/null -\n+          tar -xf \"${HOME}\/bootjdk\/${BOOT_JDK_FILENAME}\" -C \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\"\n+          mv \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"*\/* \"${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\/\"\n+        if: steps.bootjdk.outputs.cache-hit != 'true'\n+\n+      - name: Restore build JDK\n+        id: build_restore\n+        uses: actions\/download-artifact@v2\n+        with:\n+          name: transient_jdk-linux-x64_${{ needs.prerequisites.outputs.bundle_id }}\n+          path: ~\/jdk-linux-x64\n+        continue-on-error: true\n+\n+      - name: Unpack jdk\n+        run: |\n+          mkdir -p \"${HOME}\/jdk-linux-x64\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin\"\n+          tar -xf \"${HOME}\/jdk-linux-x64\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin.tar.gz\" -C \"${HOME}\/jdk-linux-x64\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin\"\n+\n+      - name: Find root of build JDK image dir\n+        run: |\n+          build_jdk_root=`find ${HOME}\/jdk-linux-x64\/jdk-${{ env.JDK_VERSION }}-internal+0_linux-x64_bin -name release -type f`\n+          echo \"build_jdk_root=`dirname ${build_jdk_root}`\" >> $GITHUB_ENV\n+\n+      - name: Install cross-compilation host dependencies\n+        run: |\n+          sudo apt-get update\n+          sudo apt-get install g++-powerpc64le-linux-gnu gcc-powerpc64le-linux-gnu:\n+\n+      - name: Cache sysroot\n+        id: cache-sysroot\n+        uses: actions\/cache@v2\n+        with:\n+          path: ~\/sysroot-ppc64el\/\n+          key: sysroot-ppc64el-${{ hashFiles('jdk\/.github\/workflows\/submit.yml') }}\n+\n+      - name: Install sysroot host dependencies\n+        run: |\n+          sudo apt-get install debootstrap qemu-user-static\n+        if: steps.cache-sysroot.outputs.cache-hit != 'true'\n+\n+      - name: Create sysroot\n+        run: >\n+          sudo qemu-debootstrap\n+          --arch=ppc64el\n+          --verbose\n+          --include=fakeroot,symlinks,build-essential,libx11-dev,libxext-dev,libxrender-dev,libxrandr-dev,libxtst-dev,libxt-dev,libcups2-dev,libfontconfig1-dev,libasound2-dev,libfreetype6-dev,libpng-dev\n+          --resolve-deps\n+          buster\n+          ~\/sysroot-ppc64el\n+          http:\/\/httpredir.debian.org\/debian\/\n+        if: steps.cache-sysroot.outputs.cache-hit != 'true'\n+\n+      - name: Relativize symlinks in sysroot\n+        run: >\n+          sudo chroot ~\/sysroot-ppc64el symlinks -cr .\n+        if: steps.cache-sysroot.outputs.cache-hit != 'true'\n+\n+      - name: Fix permissions in sysroot\n+        run: >\n+          sudo chown ${USER} -R ~\/sysroot-ppc64el\n+        if: steps.cache-sysroot.outputs.cache-hit != 'true'\n+\n+      - name: Remove special directories in sysroot\n+        run: >\n+          rm -rf ~\/sysroot-ppc64el\/{dev,proc,run,sys}\n+        if: steps.cache-sysroot.outputs.cache-hit != 'true'\n+\n+      - name: Configure\n+        env:\n+          CC: powerpc64le-linux-gnu-gcc\n+          CXX: powerpc64le-linux-gnu-g++\n+        run: >\n+          bash configure\n+          ${{ matrix.flags }}\n+          --openjdk-target=powerpc64le-linux-gnu\n+          --with-sysroot=${HOME}\/sysroot-ppc64el\/\n+          --with-toolchain-path=${HOME}\/sysroot-ppc64el\/\n+          --with-freetype-lib=${HOME}\/sysroot-ppc64el\/usr\/lib\/powerpc64le-linux-gnu\/\n+          --with-freetype-include=${HOME}\/sysroot-ppc64el\/usr\/include\/freetype2\/\n+          --x-libraries=${HOME}\/sysroot-ppc64el\/usr\/lib\/powerpc64le-linux-gnu\/\n+          --with-build-jdk=${{ env.build_jdk_root }}\n+          --with-conf-name=linux-ppc64le\n+          --with-version-opt=${GITHUB_ACTOR}-${GITHUB_SHA}\n+          --with-version-build=0\n+          --with-boot-jdk=${HOME}\/bootjdk\/${BOOT_JDK_VERSION}\n+          --with-default-make-target=\"product-bundles test-bundles\"\n+          --with-zlib=system\n+        working-directory: jdk\n+\n+      - name: Build\n+        run: make CONF_NAME=linux-ppc64le ${{ matrix.build-target }}\n+        working-directory: jdk\n+\n@@ -1281,0 +1833,4 @@\n+      - linux_aarch64_build\n+      - linux_arm_build\n+      - linux_ppc64le_build\n+      - linux_s390x_build\n","filename":".github\/workflows\/submit.yml","additions":557,"deletions":1,"binary":false,"changes":558,"status":"modified"}]}