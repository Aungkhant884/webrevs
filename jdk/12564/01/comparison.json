{"files":[{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"jfr\/jfrEvents.hpp\"\n+#include \"jfr\/periodic\/jfrNativeMemoryEvent.hpp\"\n+#include \"services\/memTracker.hpp\"\n+#include \"services\/nmtUsage.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n+#include \"utilities\/ticks.hpp\"\n+\n+static NMTUsage* get_usage(const Ticks& timestamp) {\n+  static Ticks last_timestamp;\n+  static NMTUsage* usage = nullptr;\n+\n+  if (usage == nullptr) {\n+    \/\/ First time, create a new NMTUsage.\n+    usage = new NMTUsage(NMTUsage::OptionsNoTS);\n+    usage->refresh();\n+    last_timestamp = timestamp;\n+  }\n+\n+  if (timestamp != last_timestamp) {\n+    \/\/ Refresh usage if new timestamp.\n+    usage->refresh();\n+    last_timestamp = timestamp;\n+  }\n+  return usage;\n+}\n+\n+void JfrNativeMemoryEvent::send_total_event(const Ticks& timestamp) {\n+  if (!MemTracker::enabled()) {\n+    return;\n+  }\n+\n+  NMTUsage* usage = get_usage(timestamp);\n+\n+  EventNativeMemoryUsageTotal event(UNTIMED);\n+  event.set_starttime(timestamp);\n+  event.set_reserved(usage->total_reserved());\n+  event.set_committed(usage->total_committed());\n+  event.commit();\n+}\n+\n+void JfrNativeMemoryEvent::send_type_event(const Ticks& starttime, MEMFLAGS flag, size_t reserved, size_t committed) {\n+  EventNativeMemoryUsage event(UNTIMED);\n+  event.set_starttime(starttime);\n+  event.set_type(NMTUtil::flag_to_index(flag));\n+  event.set_reserved(reserved);\n+  event.set_committed(committed);\n+  event.commit();\n+}\n+\n+void JfrNativeMemoryEvent::send_type_events(const Ticks& timestamp) {\n+  if (!MemTracker::enabled()) {\n+    return;\n+  }\n+\n+  NMTUsage* usage = get_usage(timestamp);\n+\n+  for (int index = 0; index < mt_number_of_types; index ++) {\n+    MEMFLAGS flag = NMTUtil::index_to_flag(index);\n+    if (flag == mtNone) {\n+      \/\/ Skip mtNone since it is not really used.\n+      continue;\n+    }\n+    send_type_event(timestamp, flag, usage->reserved(flag), usage->committed(flag));\n+  }\n+}\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrNativeMemoryEvent.cpp","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_JFR_PERIODIC_JFRNATIVEMEMORYEVENT_HPP\n+#define SHARE_JFR_PERIODIC_JFRNATIVEMEMORYEVENT_HPP\n+\n+#include \"memory\/allocation.hpp\"\n+#include \"services\/nmtUsage.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n+#include \"utilities\/ticks.hpp\"\n+\n+\/\/ MemJFRReporter is only used by threads sending periodic JFR\n+\/\/ events. These threads are synchronized at a higher level,\n+\/\/ so no more synchronization is needed.\n+class JfrNativeMemoryEvent : public AllStatic {\n+private:\n+  static void send_type_event(const Ticks& starttime, MEMFLAGS flag, size_t reserved, size_t committed);\n+ public:\n+  static void send_total_event(const Ticks& timestamp);\n+  static void send_type_events(const Ticks& timestamp);\n+};\n+\n+#endif \/\/SHARE_JFR_PERIODIC_JFRNATIVEMEMORYEVENT_HPP\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrNativeMemoryEvent.hpp","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -44,0 +44,1 @@\n+#include \"jfr\/periodic\/jfrNativeMemoryEvent.hpp\"\n@@ -66,1 +67,0 @@\n-#include \"services\/memJfrReporter.hpp\"\n@@ -646,1 +646,1 @@\n-  MemJFRReporter::send_type_events();\n+  JfrNativeMemoryEvent::send_type_events(timestamp());\n@@ -650,1 +650,1 @@\n-  MemJFRReporter::send_total_event();\n+  JfrNativeMemoryEvent::send_total_event(timestamp());\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrPeriodic.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,113 +0,0 @@\n-\/*\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#include \"precompiled.hpp\"\n-#include \"jfr\/jfrEvents.hpp\"\n-#include \"services\/memJfrReporter.hpp\"\n-#include \"services\/memTracker.hpp\"\n-#include \"services\/nmtUsage.hpp\"\n-#include \"utilities\/globalDefinitions.hpp\"\n-#include \"utilities\/ticks.hpp\"\n-\n-\/\/ Helper class to avoid refreshing the NMTUsage to often and allow\n-\/\/ the two JFR events to use the same data.\n-class MemJFRCurrentUsage : public AllStatic {\n-private:\n-  \/\/ The age threshold in milliseconds. If older than this refresh the usage.\n-  static const uint64_t AgeThreshold = 50;\n-\n-  static Ticks _timestamp;\n-  static NMTUsage* _usage;\n-\n-public:\n-  static NMTUsage* get_usage();\n-  static Ticks get_timestamp();\n-};\n-\n-Ticks MemJFRCurrentUsage::_timestamp;\n-NMTUsage* MemJFRCurrentUsage::_usage = nullptr;\n-\n-NMTUsage* MemJFRCurrentUsage::get_usage() {\n-  Tickspan since_baselined = Ticks::now() - _timestamp;\n-\n-  if (_usage == nullptr) {\n-    \/\/ First time, create a new NMTUsage.\n-    _usage = new NMTUsage(NMTUsage::OptionsNoTS);\n-  } else if (since_baselined.milliseconds() < AgeThreshold) {\n-    \/\/ There is recent enough usage information, return it.\n-    return _usage;\n-  }\n-\n-  \/\/ Refresh the usage information.\n-  _usage->refresh();\n-  _timestamp.stamp();\n-\n-  return _usage;\n-}\n-\n-Ticks MemJFRCurrentUsage::get_timestamp() {\n-  return _timestamp;\n-}\n-\n-void MemJFRReporter::send_total_event() {\n-  if (!MemTracker::enabled()) {\n-    return;\n-  }\n-\n-  NMTUsage* usage = MemJFRCurrentUsage::get_usage();\n-  Ticks timestamp = MemJFRCurrentUsage::get_timestamp();\n-\n-  EventNativeMemoryUsageTotal event(UNTIMED);\n-  event.set_starttime(timestamp);\n-  event.set_reserved(usage->total_reserved());\n-  event.set_committed(usage->total_committed());\n-  event.commit();\n-}\n-\n-void MemJFRReporter::send_type_event(const Ticks& starttime, MEMFLAGS flag, size_t reserved, size_t committed) {\n-  EventNativeMemoryUsage event(UNTIMED);\n-  event.set_starttime(starttime);\n-  event.set_type(NMTUtil::flag_to_index(flag));\n-  event.set_reserved(reserved);\n-  event.set_committed(committed);\n-  event.commit();\n-}\n-\n-void MemJFRReporter::send_type_events() {\n-  if (!MemTracker::enabled()) {\n-    return;\n-  }\n-\n-  NMTUsage* usage = MemJFRCurrentUsage::get_usage();\n-  Ticks timestamp = MemJFRCurrentUsage::get_timestamp();\n-\n-  for (int index = 0; index < mt_number_of_types; index ++) {\n-    MEMFLAGS flag = NMTUtil::index_to_flag(index);\n-    if (flag == mtNone) {\n-      \/\/ Skip mtNone since it is not really used.\n-      continue;\n-    }\n-    send_type_event(timestamp, flag, usage->reserved(flag), usage->committed(flag));\n-  }\n-}\n","filename":"src\/hotspot\/share\/services\/memJfrReporter.cpp","additions":0,"deletions":113,"binary":false,"changes":113,"status":"deleted"},{"patch":"@@ -1,44 +0,0 @@\n-\/*\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_SERVICES_MEMJFRREPORTER_HPP\n-#define SHARE_SERVICES_MEMJFRREPORTER_HPP\n-\n-#include \"memory\/allocation.hpp\"\n-#include \"services\/nmtUsage.hpp\"\n-#include \"utilities\/globalDefinitions.hpp\"\n-#include \"utilities\/ticks.hpp\"\n-\n-\/\/ MemJFRReporter is only used by threads sending periodic JFR\n-\/\/ events. These threads are synchronized at a higher level,\n-\/\/ so no more synchronization is needed.\n-class MemJFRReporter : public AllStatic {\n-private:\n-  static void send_type_event(const Ticks& starttime, MEMFLAGS flag, size_t reserved, size_t committed);\n- public:\n-  static void send_total_event();\n-  static void send_type_events();\n-};\n-\n-#endif \/\/SHARE_SERVICES_MEMJFRREPORTER_HPP\n","filename":"src\/hotspot\/share\/services\/memJfrReporter.hpp","additions":0,"deletions":44,"binary":false,"changes":44,"status":"deleted"},{"patch":"@@ -28,0 +28,1 @@\n+import static jdk.test.lib.Asserts.assertEquals;\n@@ -29,0 +30,1 @@\n+import java.time.Instant;\n@@ -135,0 +137,6 @@\n+        \/\/ Verify that events only have two timestamps\n+        List<Instant> timestamps = events.stream()\n+                .map(e -> e.getStartTime())\n+                .distinct()\n+                .toList();\n+        assertEquals(timestamps.size(), 2, \"Expected two timestamps: \" + timestamps);\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestNativeMemoryUsageEvents.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"}]}