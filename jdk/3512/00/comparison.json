{"files":[{"patch":"@@ -567,1 +567,1 @@\n-                                tsym.complete();\n+                                tsym.apiComplete();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -462,0 +462,58 @@\n+    void testGetEnclosingOnMissingType() throws Exception {\n+        Path base = Paths.get(\".\", \"testGetEnclosingOnMissingType\");\n+        Path libClasses = compileLib(base,\n+                                     \"package pkg;\\n\" +\n+                                     \"public class A<E> {\\n\" +\n+                                     \"    public static class N<E> {}\\n\" +\n+                                     \"}\\n\",\n+                                     \"package pkg;\\n\" +\n+                                     \"public class T<E> {\\n\" +\n+                                     \"    T<A<T>> n;\\n\" +\n+                                     \"}\\n\");\n+        try (OutputStream out = Files.newOutputStream(libClasses.resolve(\"pkg\/A.class\"))) {\n+            out.write(0);\n+        }\n+\n+        Path testSrc = base.resolve(\"test-src\");\n+        tb.createDirectories(testSrc);\n+        Path testClasses = base.resolve(\"test-classes\");\n+        tb.createDirectories(testClasses);\n+\n+        tb.writeJavaFiles(testSrc, \"class Test { }\");\n+        tb.cleanDirectory(testClasses);\n+\n+        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\n+\n+        List<Consumer<DeclaredType>> validators = Arrays.asList(\n+                dt -> { if (dt.getEnclosingType().getKind() != TypeKind.NONE)\n+                            throw new AssertionError(\"Unexpected enclosing type: \" +\n+                                                     dt.getEnclosingType());\n+                },\n+                dt -> { if (!\"pkg.T<pkg.A<pkg.T>>\".equals(dt.toString()))\n+                            throw new AssertionError(\"Unexpected toString: \" +\n+                                                     dt.toString());\n+                }\n+        );\n+\n+        try (StandardJavaFileManager fm = compiler.getStandardFileManager(null, null, null)) {\n+            for (Consumer<DeclaredType> validator : validators) {\n+                com.sun.source.util.JavacTask task = (com.sun.source.util.JavacTask)\n+                        compiler.getTask(null,\n+                                         null,\n+                                         null,\n+                                         Arrays.asList(\"-XDrawDiagnostics\",\n+                                                       \"-classpath\",\n+                                                       libClasses.toString()),\n+                                         null,\n+                                         fm.getJavaFileObjects(tb.findJavaFiles(testSrc)));\n+                task.analyze();\n+                TypeElement a = task.getElements()\n+                                    .getTypeElement(task.getElements()\n+                                                        .getModuleElement(\"\"),\n+                                                    \"pkg.T\");\n+                DeclaredType type = (DeclaredType) a.getEnclosedElements().get(0).asType();\n+                validator.accept(type);\n+            }\n+        }\n+    }\n+\n@@ -628,0 +686,1 @@\n+        t.testGetEnclosingOnMissingType();\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/completionfailure\/MissingClassFile.java","additions":60,"deletions":1,"binary":false,"changes":61,"status":"modified"}]}