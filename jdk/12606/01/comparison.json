{"files":[{"patch":"@@ -396,1 +396,1 @@\n-        JCFieldAccess s = (JCFieldAccess)tree.qualid;\n+        JCFieldAccess s = tree.qualid;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4068,1 +4068,1 @@\n-            final JCFieldAccess select = (JCFieldAccess) imp.qualid;\n+            final JCFieldAccess select = imp.qualid;\n@@ -4091,1 +4091,1 @@\n-                TypeSymbol tsym = ((JCFieldAccess)imp.qualid).selected.type.tsym;\n+                TypeSymbol tsym = imp.qualid.selected.type.tsym;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -356,1 +356,2 @@\n-                importAll(make.at(tree.pos()).Import(make.QualIdent(javaLang), false), javaLang, env);\n+                importAll(make.at(tree.pos()).Import(make.Select(make.QualIdent(javaLang.owner), javaLang), false),\n+                    javaLang, env);\n@@ -409,1 +410,1 @@\n-            JCFieldAccess imp = (JCFieldAccess)tree.qualid;\n+            JCFieldAccess imp = tree.qualid;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TypeEnter.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -4023,1 +4023,1 @@\n-        return toP(F.at(pos).Import(pid, importStatic));\n+        return toP(F.at(pos).Import((JCFieldAccess)pid, importStatic));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -670,1 +670,1 @@\n-        public JCTree qualid;\n+        public JCFieldAccess qualid;\n@@ -672,1 +672,1 @@\n-        protected JCImport(JCTree qualid, boolean importStatic) {\n+        protected JCImport(JCFieldAccess qualid, boolean importStatic) {\n@@ -682,1 +682,1 @@\n-        public JCTree getQualifiedIdentifier() { return qualid; }\n+        public JCFieldAccess getQualifiedIdentifier() { return qualid; }\n@@ -3406,1 +3406,1 @@\n-        JCImport Import(JCTree qualid, boolean staticImport);\n+        JCImport Import(JCFieldAccess qualid, boolean staticImport);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/JCTree.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -260,1 +260,1 @@\n-        JCTree qualid = copy(t.qualid, p);\n+        JCFieldAccess qualid = copy(t.qualid, p);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/TreeCopier.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -151,1 +151,1 @@\n-    public JCImport Import(JCTree qualid, boolean importStatic) {\n+    public JCImport Import(JCFieldAccess qualid, boolean importStatic) {\n@@ -726,2 +726,2 @@\n-    public JCExpression Select(JCExpression base, Symbol sym) {\n-        return new JCFieldAccess(base, sym.name, sym).setPos(pos).setType(sym.type);\n+    public JCFieldAccess Select(JCExpression base, Symbol sym) {\n+        return (JCFieldAccess)new JCFieldAccess(base, sym.name, sym).setPos(pos).setType(sym.type);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/TreeMaker.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -278,4 +278,9 @@\n-                    imports.append(\n-                        make.Import(\n-                            make.Ident(names.fromString(element.getTextContent())),\n-                            false));\n+                    String[] idents = element.getTextContent().split(\"\\\\.\");\n+                    if (idents.length < 2)\n+                        throw new IllegalStateException(\"Invalid import: \" + element.getTextContent());\n+                    JCFieldAccess select = make.Select(\n+                        make.Ident(names.fromString(idents[0])), names.fromString(idents[1]));\n+                    for (int j = 2; j < idents.length; j++)\n+                        select = make.Select(select, names.fromString(idents[j]));\n+                    imports.append(make.Import(select, false));\n+                    break;\n","filename":"test\/langtools\/jdk\/javadoc\/tool\/sampleapi\/lib\/sampleapi\/generator\/PackageGenerator.java","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"}]}