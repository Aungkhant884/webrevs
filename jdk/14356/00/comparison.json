{"files":[{"patch":"@@ -990,1 +990,1 @@\n-        if (toolEnv.isSynthetic((Symbol) e)) {\n+        if (toolEnv.isSynthetic((Symbol) e) && !toolEnv.isUnnamed((Symbol) e)) {\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/tool\/ElementsTable.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -177,0 +177,4 @@\n+    boolean isUnnamed(Symbol sym) {\n+        return (sym.flags() & Flags.UNNAMED_CLASS) != 0;\n+    }\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/tool\/ToolEnvironment.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,85 @@\n+\/*\n+ * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8309595\n+ * @summary Allow javadoc to process unnamed classes\n+ * @library  \/tools\/lib ..\/..\/lib\n+ * @modules  jdk.javadoc\/jdk.javadoc.internal.tool\n+ * @build    toolbox.ToolBox javadoc.tester.*\n+ * @run main Unnamed\n+ *\/\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+import javadoc.tester.JavadocTester;\n+import toolbox.ToolBox;\n+\n+public class Unnamed extends JavadocTester {\n+\n+    private static final String thisVersion = System.getProperty(\"java.specification.version\");\n+\n+    private static final ToolBox tb = new ToolBox();\n+\n+    public static void main(String... args) throws Exception {\n+        new Unnamed().runTests();\n+    }\n+\n+    @Test\n+    public void testUnnamed(Path base) throws IOException {\n+        String className = \"Sample\";\n+        Files.createDirectories(base);\n+        Path out = base.resolve(\"out\");\n+        Path src = base.resolve(\"src\");\n+        Path sample = src.resolve(className + \".java\");\n+        Path result = out.resolve(className + \".html\");\n+\n+        Files.createDirectories(out);\n+        Files.createDirectories(src);\n+        Files.writeString(sample, \"\"\"\n+            \/**\n+             * This is a comment for the main method.\n+             *\/\n+            void main() {\n+                System.out.println(\"Done\");\n+            }\n+            \"\"\");\n+\n+         javadoc(\n+             \"--enable-preview\",\n+             \"--source\", thisVersion,\n+             \"-private\",\n+             \"-d\", out.toString(),\n+             sample.toString()\n+         );\n+\n+         if (!result.toFile().exists()) {\n+            throw new Error(\"Missing javadoc\");\n+         }\n+    }\n+\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/unnamed\/Unnamed.java","additions":85,"deletions":0,"binary":false,"changes":85,"status":"added"}]}