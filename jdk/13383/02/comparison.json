{"files":[{"patch":"@@ -3457,1 +3457,8 @@\n-        var elems = new String[8];\n+        String[] elems;\n+        long initLen = elements.spliterator().estimateSize();\n+        if (initLen <= 8L || initLen >= ArraysSupport.SOFT_MAX_ARRAY_LENGTH) {\n+            \/\/ This usually means the size of the Iterable cannot be computed easily.\n+            elems = new String[8];\n+        } else {\n+            elems = new String[(int)initLen];\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.LinkedHashSet;\n+import java.util.concurrent.LinkedBlockingDeque;\n+import java.util.concurrent.LinkedTransferQueue;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.*;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations=20, time=500, timeUnit=TimeUnit.MILLISECONDS)\n+@Measurement(iterations=10, time=1000, timeUnit=TimeUnit.MILLISECONDS)\n+@Fork(3)\n+public class StringJoinWithIterable {\n+    private ArrayList<String> arrayList;\n+    private LinkedHashSet<String> linkedHashSet;\n+    private LinkedBlockingDeque<String> blockingDeque;\n+    private LinkedTransferQueue<String> transferQueue;\n+    private Iterable<String> iterable;\n+\n+    private static final int STRING_COUNT = 5000000;\n+\n+    @Setup\n+    public void setup() {\n+        ArrayList<String> list = arrayList = new ArrayList<>(STRING_COUNT);\n+        for (int i = 0; i < STRING_COUNT; i++) {\n+            list.add(Integer.toString(i));\n+        }\n+        linkedHashSet = new LinkedHashSet<>(list);\n+        blockingDeque = new LinkedBlockingDeque<>(list);\n+        transferQueue = new LinkedTransferQueue<>(list);\n+        iterable = new Iterable<String>() {\n+            @Override\n+            public Iterator<String> iterator() {\n+                return list.iterator();\n+            }\n+        };\n+    }\n+\n+    @Benchmark\n+    public String joinWithArrayList() {\n+        return String.join(\" \", arrayList);\n+    }\n+\n+    @Benchmark\n+    public String joinWithLinkedHashSet() {\n+        return String.join(\" \", linkedHashSet);\n+    }\n+\n+    @Benchmark\n+    public String joinWithLinkedBlockingDeque() {\n+        return String.join(\" \", blockingDeque);\n+    }\n+\n+    @Benchmark\n+    public String joinWithLinkedTransferQueue() {\n+        return String.join(\" \", transferQueue);\n+    }\n+\n+    @Benchmark\n+    public String joinWithIterable() {\n+        return String.join(\" \", iterable);\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringJoinWithIterable.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"}]}