{"files":[{"patch":"@@ -38,1 +38,2 @@\n-import sun.security.action.GetPropertyAction;\n+\n+import jdk.internal.util.StaticProperty;\n@@ -1987,2 +1988,2 @@\n-        private static final File tmpdir = new File(\n-                GetPropertyAction.privilegedGetProperty(\"java.io.tmpdir\"));\n+        private static final File tmpdir = new File(StaticProperty.javaIoTmpDir());\n+\n@@ -2403,1 +2404,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/java\/io\/File.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2169,2 +2169,0 @@\n-        StaticProperty.javaHome();          \/\/ Load StaticProperty to cache the property values\n-\n@@ -2183,0 +2181,2 @@\n+        StaticProperty.javaHome();          \/\/ Load StaticProperty to cache the property values\n+\n@@ -2636,1 +2636,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+\n@@ -42,1 +43,1 @@\n-\n+@SuppressWarnings(\"removal\")\n@@ -173,1 +174,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/TempFileHelper.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,0 +28,3 @@\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -68,0 +71,5 @@\n+\n+        if (!(new File(JAVA_IO_TMPDIR)).isDirectory()) {\n+            System.err.println(\"WARNING: java.io.tmpdir location does not exist\");\n+        }\n+\n@@ -246,1 +254,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/StaticProperty.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1425,1 +1425,1 @@\n-#jdk.security.krb5.s4u2proxy.acceptNonForwardableServiceTicket=false\n+#jdk.security.krb5.s4u2proxy.acceptNonForwardableServiceTicket=false\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/conf\/security\/java.security","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,135 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8290313\n+ * @library \/test\/lib\n+ * @summary Produce warning when user specified java.io.tmpdir directory doesn't exist\n+ *\/\n+\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.process.ProcessTools;\n+\n+import java.io.File;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+public class TempDirectoryNotExisting {\n+    final static String ioWarningMsg = \"WARNING: java.io.tmpdir location does not exist\";\n+    final static String ioExceptionMsgNonWindows = \"java.io.IOException: No such file or directory\";\n+    final static String ioExceptionMsgWindows = \"java.io.IOException: The system cannot find the path specified\";\n+    final static String nioExceptionMsg = \"java.nio.file.NoSuchFileException\";\n+\n+    public static void main(String... args) throws Exception {\n+\n+        String userDir = System.getProperty(\"user.home\");\n+        String timeStamp = System.currentTimeMillis() + \"\";\n+        String tempDir = Path.of(userDir,\"non-existing-\", timeStamp).toString();\n+\n+        if (args.length != 0) {\n+            if (args[0].equalsIgnoreCase(\"io\")) {\n+                try {\n+                    File.createTempFile(\"prefix\", \".suffix\");\n+                }catch(Exception e){\n+                    e.printStackTrace();\n+                }\n+            } else {\n+\n+                if (args[0].equalsIgnoreCase(\"nio\")) {\n+                    try {\n+                        Files.createTempFile(\"prefix\", \".suffix\");\n+                    }catch(Exception e){\n+                        e.printStackTrace();;\n+                    }\n+                } else {\n+                    try {\n+                        File.createTempFile(\"prefix\", \".suffix\");\n+                        Files.createTempFile(\"prefix\", \".suffix\");\n+                    }catch (Exception e){\n+                        e.printStackTrace();\n+                    }\n+                }\n+            }\n+        } else {\n+\n+\n+            \/\/standard test with default setting for java.io.tmpdir\n+            testMessageNotExist(0, ioWarningMsg, \"TempDirectoryNotExisting\", \"io\");\n+            testMessageNotExist(0, ioWarningMsg, \"TempDirectoryNotExisting\", \"nio\");\n+\n+            \/\/set java.io.tmpdir to be empty\n+            testMessageAbnormalExist(0, \"-Djava.io.tmpdir=\", \"TempDirectoryNotExisting\", \"io\");\n+            testMessageAbnormalExist(0, \"-Djava.io.tmpdir=\", \"TempDirectoryNotExisting\", \"nio\");\n+\n+            String msg = Platform.isWindows()? ioExceptionMsgWindows: ioExceptionMsgNonWindows;\n+            \/\/invalid custom java.io.tmpdir\n+            testMessageExist(0, ioWarningMsg, msg, \"-Djava.io.tmpdir=\" + tempDir,\n+                    \"TempDirectoryNotExisting\", \"io\");\n+            testMessageExist(0, ioWarningMsg, nioExceptionMsg, \"-Djava.io.tmpdir=\" + tempDir,\n+                    \"TempDirectoryNotExisting\", \"nio\");\n+\n+            \/\/valid custom java.io.tmpdir\n+            testMessageNotExist(0, ioWarningMsg,\"-Djava.io.tmpdir=\" + userDir,\n+                    \"TempDirectoryNotExisting\", \"io\");\n+            testMessageNotExist(0, ioWarningMsg,\"-Djava.io.tmpdir=\" + userDir,\n+                    \"TempDirectoryNotExisting\", \"nio\");\n+\n+            \/\/test with security manager\n+            testMessageExist(0, ioWarningMsg, msg, \"-Djava.io.tmpdir=\" + tempDir\n+                            + \" -Djava.security.manager\",\n+                    \"TempDirectoryNotExisting\", \"io\");\n+\n+            testMessageExist(0, ioWarningMsg, nioExceptionMsg, \"-Djava.io.tmpdir=\" + tempDir\n+                            + \" -Djava.security.manager\",\n+                    \"TempDirectoryNotExisting\", \"nio\");\n+\n+            \/\/error message to be printed only once\n+            testMessageCounter(0, \"-Djava.io.tmpdir=\" + tempDir,\n+                    \"TempDirectoryNotExisting\", \"io-nio\");\n+        }\n+    }\n+\n+    private static void testMessageExist(int exitValue, String errorMsg1, String errorMsg2, String... options) throws Exception {\n+        ProcessTools.executeTestJvm(options).shouldContain(errorMsg1)\n+                .shouldContain(errorMsg2)\n+                .shouldHaveExitValue(exitValue);\n+    }\n+\n+    private static void testMessageAbnormalExist(int exitValue, String... options) throws Exception {\n+        ProcessTools.executeTestJvm(options).shouldHaveExitValue(exitValue);\n+    }\n+\n+    private static void testMessageNotExist(int exitValue, String errorMsg,String... options) throws Exception {\n+        ProcessTools.executeTestJvm(options).shouldNotContain(errorMsg).shouldHaveExitValue(exitValue);\n+    }\n+\n+    private static void testMessageCounter(int exitValue,String... options) throws Exception {\n+        List<String> list = ProcessTools.executeTestJvm(options).shouldHaveExitValue(exitValue)\n+                .asLines().stream()\n+                .filter(line -> line.equalsIgnoreCase(ioWarningMsg))\n+                .collect(Collectors.toList());\n+        if (list.size() != 1) throw new Exception(\"counter of messages is not one, but \" + list.size());\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/io\/File\/TempDirectoryNotExisting.java","additions":135,"deletions":0,"binary":false,"changes":135,"status":"added"},{"patch":"@@ -129,1 +129,1 @@\n-            \"-Djava.security.policy==\" + policyFile, \"p.Main\");\n+            \"-Djava.security.policy=\" + policyFile, \"p.Main\");\n@@ -225,1 +225,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/nio\/file\/spi\/SetDefaultProvider.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}