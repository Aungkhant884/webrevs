{"files":[{"patch":"@@ -104,0 +104,1 @@\n+    private boolean pendingOutput;\n@@ -418,0 +419,5 @@\n+            if (written == len && !finished) {\n+                pendingOutput = true;\n+            } else {\n+                pendingOutput = false;\n+            }\n@@ -713,0 +719,4 @@\n+\n+    boolean hasPendingOutput() {\n+        return pendingOutput;\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/Inflater.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -158,1 +158,6 @@\n-                if (inf.needsInput()) {\n+                if (inf.needsInput() && !inf.hasPendingOutput()) {\n+                    \/\/ Even if needsInput() is true, the native inflater may have some\n+                    \/\/ buffered data which couldn't fit in to the output buffer during the\n+                    \/\/ last call to inflate. Consume that buffered data first before calling\n+                    \/\/ fill() to avoid an EOF error if no more input is available and the\n+                    \/\/ next call to inflate will finish the inflation.\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/InflaterInputStream.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8292327\n+ * @summary Test case where Inflater.needsInput() is true but the native inflater\n+ *          still has unwritten output in its internal buffer.\n+ *\/\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.nio.ByteBuffer;\n+import java.util.zip.Inflater;\n+import java.util.zip.InflaterInputStream;\n+\n+public class UnexpectedEndOfZlibStream {\n+    public static void main(String[] args) throws Exception {\n+        byte[] bytes = {\n+            85, -115, 49, 14, -125, 48, 12, 0, -9, -68, 2, 49, -63, 98, -87, 93, 89, 90, -47, -103, 14,\n+            -99, 58, -102, 96, 5, -89, 36, -74, -120, -123, -44, -33, -61, 8, -21, -23, 78, -9, 120, -113,\n+            -111, -68, -15, 70, -3, -128, -119, -102, -6, -11, 29, 62, 79, -27, -70, 117, -118, -2, -121,\n+            -127, 42, 47, 9, -126, 72, 88, 8, 80, -75, -64, -12, -49, -104, -40, 8, -74, 27, -108, 25, 87,\n+            -102, 14, -50, -99, 115, -100, 84, 86, 59, -5, -15, 46, 99, -12, -128, 57, -117, -95, -79,\n+            -28, 2, -41, -33, 81, -19,\n+        };\n+        String deflated = \"@ObjectiveCName(\\\"DYNSApi\\\")\\npackage com.google.apps.dynamite.v1.shared.api;\\n\\n\"+\n+            \"import com.google.j2objc.annotations.ObjectiveCName;\\n\\n\";\n+\n+        \/\/ using readAllBytes succeeds, the underlying gzip data seems to be well-formed\n+        byte[] inflated =\n+            new InflaterInputStream(new ByteArrayInputStream(bytes), new Inflater(\/*nowrap=*\/ true)).readAllBytes();\n+\n+        if (!deflated.equals(new String(inflated, \"US-ASCII\"))) {\n+            throw new Exception(\"Inflated output differs from original\");\n+        }\n+\n+        \/\/ a 128 byte read followed by a 512 byte read fails after JDK-8281962\n+        InflaterInputStream is =\n+            new InflaterInputStream(new ByteArrayInputStream(bytes), new Inflater(\/*nowrap=*\/ true));\n+        byte[] buf = new byte[512];\n+        int n = is.read(buf, 0, 128);\n+        int pos = n;\n+        while (n > 0) {\n+            if ((n = is.read(buf, pos, 1)) > 0) { \/\/ Unexpected end of ZLIB input stream\n+                pos+= n;\n+            }\n+        }\n+        if (!deflated.equals(new String(buf, 0, pos, \"US-ASCII\"))) {\n+            throw new Exception(\"Inflated output differs from original\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/zip\/InflaterInputStream\/UnexpectedEndOfZlibStream.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"}]}