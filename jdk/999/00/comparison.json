{"files":[{"patch":"@@ -1153,4 +1153,3 @@\n-      \/\/ fprintf(fp, \"phase->eqv( \");\n-      \/\/ fprintf(fp, \"inst%d->in(%d+%d) \/* %s *\/, inst%d->in(%d+%d) \/* %s *\/\",\n-      \/\/         left_index,  left_op_base,  left_op_index,  left_op,\n-      \/\/         right_index, right_op_base, right_op_index, right_op );\n+      \/\/ fprintf(fp, \"(inst%d->_opnds[%d]->reg(ra_,inst%d%s)  \/* %d.%s *\/ == \/* %d.%s *\/ inst%d->_opnds[%d]->reg(ra_,inst%d%s)\",\n+      \/\/         left_index, left_op_index, left_index, left_reg_index, left_index, left_op\n+      \/\/         right_index, right_op, right_index, right_op_index, right_index, right_reg_index);\n","filename":"src\/hotspot\/share\/adlc\/output_c.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -331,1 +331,1 @@\n-  if( in(1)->Opcode() == Op_SubI && phase->eqv(in(1)->in(2),in(2)) ) {\n+  if (in(1)->Opcode() == Op_SubI && in(1)->in(2) == in(2)) {\n@@ -333,2 +333,1 @@\n-  }\n-  else if( in(2)->Opcode() == Op_SubI && phase->eqv(in(2)->in(2),in(1)) ) {\n+  } else if (in(2)->Opcode() == Op_SubI && in(2)->in(2) == in(1)) {\n@@ -448,1 +447,1 @@\n-  if( in(1)->Opcode() == Op_SubL && phase->eqv(in(1)->in(2),in(2)) ) {\n+  if (in(1)->Opcode() == Op_SubL && in(1)->in(2) == in(2)) {\n@@ -450,2 +449,1 @@\n-  }\n-  else if( in(2)->Opcode() == Op_SubL && phase->eqv(in(2)->in(2),in(1)) ) {\n+  } else if (in(2)->Opcode() == Op_SubL && in(2)->in(2) == in(1)) {\n@@ -739,1 +737,1 @@\n-  if (phase->eqv(in(1), in(2))) {\n+  if (in(1) == in(2)) {\n@@ -826,1 +824,1 @@\n-  if (phase->eqv(in(1), in(2))) {\n+  if (in(1) == in(2)) {\n@@ -1081,1 +1079,1 @@\n-    if (phase->eqv(x,y) && tx != NULL &&\n+    if (x == y && tx != NULL &&\n@@ -1089,1 +1087,1 @@\n-    if (phase->eqv(x,y) && tx != NULL &&\n+    if (x == y && tx != NULL &&\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1227,2 +1227,6 @@\n-  if( phase->type(in(0)) == Type::TOP ) return Type::TOP;\n-  if( phase->eqv( in(0), this ) ) return Type::TOP; \/\/ Dead infinite loop\n+  if (phase->type(in(0)) == Type::TOP) {\n+    return Type::TOP;\n+  }\n+  if (in(0) == this) {\n+    return Type::TOP; \/\/ Dead infinite loop\n+  }\n","filename":"src\/hotspot\/share\/opto\/callnode.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -347,1 +347,1 @@\n-      assert(phase->eqv(phi->in(0), this), \"sanity check phi\");\n+      assert(phi->in(0) == this, \"sanity check phi\");\n@@ -386,1 +386,1 @@\n-        if (phase->eqv(m, this)) {\n+        if (m == this) {\n@@ -571,1 +571,1 @@\n-            assert( igvn->eqv(n->in(0), this), \"\" );\n+            assert(n->in(0) == this, \"\");\n@@ -622,1 +622,1 @@\n-        assert(!igvn->eqv(parent_ctrl, this), \"Close dead loop\");\n+        assert(parent_ctrl != this, \"Close dead loop\");\n@@ -644,1 +644,1 @@\n-          assert( !igvn->eqv(n, this), \"Must be removed from DefUse edges\");\n+          assert(n != this, \"Must be removed from DefUse edges\");\n@@ -657,1 +657,1 @@\n-          assert( igvn->eqv(n->in(0), this), \"Expect RegionNode to be control parent\");\n+          assert(n->in(0) == this, \"Expect RegionNode to be control parent\");\n@@ -662,1 +662,1 @@\n-          assert( !igvn->eqv(n->in(k), this), \"All uses of RegionNode should be gone\");\n+          assert(n->in(k) != this, \"All uses of RegionNode should be gone\");\n@@ -2081,1 +2081,1 @@\n-    assert(opt == NULL || phase->eqv(opt, this), \"do not elide phi\");\n+    assert(opt == NULL || opt == this, \"do not elide phi\");\n@@ -2197,1 +2197,1 @@\n-        saw_self = saw_self || phase->eqv(n->base_memory(), this);\n+        saw_self = saw_self || (n->base_memory() == this);\n","filename":"src\/hotspot\/share\/opto\/cfgnode.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -508,1 +508,1 @@\n-  if( phase->eqv( in(1), in(2) ) )\n+  if (in(1) == in(2)) {\n@@ -510,0 +510,1 @@\n+  }\n@@ -613,1 +614,1 @@\n-  if( phase->eqv( in(1), in(2) ) )\n+  if (in(1) == in(2)) {\n@@ -615,0 +616,1 @@\n+  }\n@@ -688,3 +690,4 @@\n-  if( phase->eqv( in(1), in(2) ) && t1->base() == Type::FloatCon)\n-    if (!g_isnan(t1->getf()) && g_isfinite(t1->getf()) && t1->getf() != 0.0) \/\/ could be negative ZERO or NaN\n-      return TypeF::ONE;\n+  if (in(1) == in(2) && t1->base() == Type::FloatCon &&\n+      !g_isnan(t1->getf()) && g_isfinite(t1->getf()) && t1->getf() != 0.0) { \/\/ could be negative ZERO or NaN\n+    return TypeF::ONE;\n+  }\n@@ -776,3 +779,4 @@\n-  if( phase->eqv( in(1), in(2) ) && t1->base() == Type::DoubleCon)\n-    if (!g_isnan(t1->getd()) && g_isfinite(t1->getd()) && t1->getd() != 0.0) \/\/ could be negative ZERO or NaN\n-      return TypeD::ONE;\n+  if (in(1) == in(2) && t1->base() == Type::DoubleCon &&\n+      !g_isnan(t1->getd()) && g_isfinite(t1->getd()) && t1->getd() != 0.0) { \/\/ could be negative ZERO or NaN\n+    return TypeD::ONE;\n+  }\n@@ -993,1 +997,3 @@\n-  if( phase->eqv( in(1), in(2) ) ) return TypeInt::ZERO;\n+  if (in(1) == in(2)) {\n+    return TypeInt::ZERO;\n+  }\n@@ -1166,1 +1172,3 @@\n-  if( phase->eqv( in(1), in(2) ) ) return TypeLong::ZERO;\n+  if (in(1) == in(2)) {\n+    return TypeLong::ZERO;\n+  }\n","filename":"src\/hotspot\/share\/opto\/divnode.cpp","additions":18,"deletions":10,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -1077,1 +1077,1 @@\n-      if (!phase->eqv(st_adr, ld_adr)) {\n+      if (st_adr != ld_adr) {\n@@ -1526,1 +1526,1 @@\n-  if (!phase->eqv(this, this->Identity(phase))) {\n+  if (this != Identity(phase)) {\n@@ -2740,1 +2740,1 @@\n-        if (prev_val != NULL && phase->eqv(prev_val, val)) {\n+        if (prev_val != NULL && prev_val == val) {\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -81,3 +81,3 @@\n-  assert( !phase->eqv(in(Condition), this) &&\n-         !phase->eqv(in(IfFalse), this) &&\n-         !phase->eqv(in(IfTrue), this), \"dead loop in CMoveNode::Ideal\" );\n+  assert(in(Condition) != this &&\n+         in(IfFalse) != this &&\n+         in(IfTrue) != this, \"dead loop in CMoveNode::Ideal\" );\n@@ -101,5 +101,3 @@\n-  if( (phase->eqv(cmp->in(1),f) &&\n-       phase->eqv(cmp->in(2),t)) ||\n-     \/\/ Swapped Cmp is OK\n-     (phase->eqv(cmp->in(2),f) &&\n-      phase->eqv(cmp->in(1),t)) ) {\n+  if ((cmp->in(1) == f && cmp->in(2) == t) ||\n+      \/\/ Swapped Cmp is OK\n+      (cmp->in(2) == f && cmp->in(1) == t)) {\n@@ -125,6 +123,10 @@\n-  if( phase->eqv(in(IfFalse),in(IfTrue)) ) \/\/ C-moving identical inputs?\n-  return in(IfFalse);         \/\/ Then it doesn't matter\n-  if( phase->type(in(Condition)) == TypeInt::ZERO )\n-  return in(IfFalse);         \/\/ Always pick left(false) input\n-  if( phase->type(in(Condition)) == TypeInt::ONE )\n-  return in(IfTrue);          \/\/ Always pick right(true) input\n+  \/\/ C-moving identical inputs?\n+  if (in(IfFalse) == in(IfTrue)) {\n+    return in(IfFalse); \/\/ Then it doesn't matter\n+  }\n+  if (phase->type(in(Condition)) == TypeInt::ZERO) {\n+    return in(IfFalse); \/\/ Always pick left(false) input\n+  }\n+  if (phase->type(in(Condition)) == TypeInt::ONE) {\n+    return in(IfTrue);  \/\/ Always pick right(true) input\n+  }\n","filename":"src\/hotspot\/share\/opto\/movenode.cpp","additions":16,"deletions":14,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -90,5 +90,5 @@\n-    int   op1 = mul1->Opcode();\n-    if( phase->eqv( mul1, this ) || phase->eqv( in(2), this ) ||\n-        ( ( op1 == mul_opcode() || op1 == add_opcode() ) &&\n-          ( phase->eqv( mul1->in(1), this ) || phase->eqv( mul1->in(2), this ) ||\n-            phase->eqv( mul1->in(1), mul1 ) || phase->eqv( mul1->in(2), mul1 ) ) ) )\n+    int op1 = mul1->Opcode();\n+    if ((mul1 == this) || (in(2) == this) ||\n+        ((op1 == mul_opcode() || op1 == add_opcode()) &&\n+         ((mul1->in(1) == this) || (mul1->in(2) == this) ||\n+          (mul1->in(1) == mul1) || (mul1->in(2) == mul1)))) {\n@@ -96,0 +96,1 @@\n+    }\n@@ -439,1 +440,3 @@\n-  if (phase->eqv(in(1), in(2))) return in(1);\n+  if (in(1) == in(2)) {\n+    return in(1);\n+  }\n@@ -561,1 +564,3 @@\n-  if (phase->eqv(in(1), in(2))) return in(1);\n+  if (in(1) == in(2)) {\n+    return in(1);\n+  }\n","filename":"src\/hotspot\/share\/opto\/mulnode.cpp","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -285,5 +285,0 @@\n-  \/\/ Return whether two Nodes are equivalent.\n-  \/\/ Must not be recursive, since the recursive version is built from this.\n-  \/\/ For pessimistic optimizations this is simply pointer equivalence.\n-  bool eqv(const Node* n1, const Node* n2) const { return n1 == n2; }\n-\n","filename":"src\/hotspot\/share\/opto\/phaseX.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -64,2 +64,2 @@\n-  if( in(1)->Opcode() == Op_AddI ) {\n-    if( phase->eqv(in(1)->in(2),in(2)) )\n+  if (in(1)->Opcode() == Op_AddI) {\n+    if (in(1)->in(2) == in(2)) {\n@@ -67,1 +67,2 @@\n-    if (phase->eqv(in(1)->in(1),in(2)))\n+    }\n+    if (in(1)->in(1) == in(2)) {\n@@ -69,0 +70,1 @@\n+    }\n@@ -75,2 +77,1 @@\n-    if( in(1)->in(2)->Opcode() == Op_Opaque2 &&\n-        phase->eqv(in(1)->in(2)->in(1),in(2)) )\n+    if (in(1)->in(2)->Opcode() == Op_Opaque2 && in(1)->in(2)->in(1) == in(2)) {\n@@ -78,0 +79,1 @@\n+    }\n@@ -157,4 +159,4 @@\n-  if( phase->eqv( in1, this ) || phase->eqv( in2, this ) ||\n-      ( ( op1 == Op_AddI || op1 == Op_SubI ) &&\n-        ( phase->eqv( in1->in(1), this ) || phase->eqv( in1->in(2), this ) ||\n-          phase->eqv( in1->in(1), in1  ) || phase->eqv( in1->in(2), in1 ) ) ) )\n+  if ((in1 == this) || (in2 == this) ||\n+      ((op1 == Op_AddI || op1 == Op_SubI) &&\n+       ((in1->in(1) == this) || (in1->in(2) == this) ||\n+        (in1->in(1) == in1)  || (in1->in(2) == in1)))) {\n@@ -162,0 +164,1 @@\n+  }\n@@ -203,3 +206,3 @@\n-  if( ( op2 == Op_AddI || op2 == Op_SubI ) &&\n-      ( phase->eqv( in2->in(1), this ) || phase->eqv( in2->in(2), this ) ||\n-        phase->eqv( in2->in(1), in2  ) || phase->eqv( in2->in(2), in2  ) ) )\n+  if ((op2 == Op_AddI || op2 == Op_SubI) &&\n+      ((in2->in(1) == this) || (in2->in(2) == this) ||\n+       (in2->in(1) == in2)  || (in2->in(2) == in2))) {\n@@ -207,0 +210,1 @@\n+  }\n@@ -210,3 +214,3 @@\n-  if( op2 == Op_AddI &&\n-      phase->eqv( in1, in2->in(1) ) )\n-    return new SubINode( phase->intcon(0),in2->in(2));\n+  if (op2 == Op_AddI && in1 == in2->in(1)) {\n+    return new SubINode(phase->intcon(0), in2->in(2));\n+  }\n@@ -214,3 +218,3 @@\n-  if( op1 == Op_SubI &&\n-      phase->eqv( in1->in(1), in2 ) )\n-    return new SubINode( phase->intcon(0),in1->in(2));\n+  if (op1 == Op_SubI && in1->in(1) == in2) {\n+    return new SubINode(phase->intcon(0), in1->in(2));\n+  }\n@@ -218,3 +222,3 @@\n-  if( op2 == Op_AddI &&\n-      phase->eqv( in1, in2->in(2) ) )\n-    return new SubINode( phase->intcon(0),in2->in(1));\n+  if (op2 == Op_AddI && in1 == in2->in(2)) {\n+    return new SubINode(phase->intcon(0), in2->in(1));\n+  }\n@@ -299,4 +303,4 @@\n-  if( phase->eqv( in1, this ) || phase->eqv( in2, this ) ||\n-      ( ( op1 == Op_AddL || op1 == Op_SubL ) &&\n-        ( phase->eqv( in1->in(1), this ) || phase->eqv( in1->in(2), this ) ||\n-          phase->eqv( in1->in(1), in1  ) || phase->eqv( in1->in(2), in1  ) ) ) )\n+  if ((in1 == this) || (in2 == this) ||\n+      ((op1 == Op_AddL || op1 == Op_SubL) &&\n+       ((in1->in(1) == this) || (in1->in(2) == this) ||\n+        (in1->in(1) == in1)  || (in1->in(2) == in1)))) {\n@@ -304,0 +308,1 @@\n+  }\n@@ -343,3 +348,3 @@\n-  if( ( op2 == Op_AddL || op2 == Op_SubL ) &&\n-      ( phase->eqv( in2->in(1), this ) || phase->eqv( in2->in(2), this ) ||\n-        phase->eqv( in2->in(1), in2  ) || phase->eqv( in2->in(2), in2  ) ) )\n+  if ((op2 == Op_AddL || op2 == Op_SubL) &&\n+      ((in2->in(1) == this) || (in2->in(2) == this) ||\n+       (in2->in(1) == in2)  || (in2->in(2) == in2))) {\n@@ -347,0 +352,1 @@\n+  }\n@@ -350,3 +356,3 @@\n-  if( op2 == Op_AddL &&\n-      phase->eqv( in1, in2->in(1) ) )\n-    return new SubLNode( phase->makecon(TypeLong::ZERO), in2->in(2));\n+  if (op2 == Op_AddL && in1 == in2->in(1)) {\n+    return new SubLNode(phase->makecon(TypeLong::ZERO), in2->in(2));\n+  }\n@@ -354,3 +360,3 @@\n-  if( op2 == Op_AddL &&\n-      phase->eqv( in1, in2->in(2) ) )\n-    return new SubLNode( phase->makecon(TypeLong::ZERO),in2->in(1));\n+  if (op2 == Op_AddL && in1 == in2->in(2)) {\n+    return new SubLNode(phase->makecon(TypeLong::ZERO), in2->in(1));\n+  }\n@@ -424,2 +430,2 @@\n-  if( (t1->is_finite() && t2->is_finite()) ) {\n-    if( phase->eqv(in1, in2) ) return add_id();\n+  if (t1->is_finite() && t2->is_finite() && in1 == in2) {\n+    return add_id();\n@@ -448,1 +454,2 @@\n-  if( IdealizedNumerics && !phase->C->method()->is_strict() ) {\n+  if (IdealizedNumerics && !phase->C->method()->is_strict() &&\n+      in(2)->is_Add() && in(1) == in(2)->in(1)) {\n@@ -450,3 +457,1 @@\n-    if( in(2)->is_Add() &&\n-        phase->eqv(in(1),in(2)->in(1) ) )\n-      return new SubFNode( phase->makecon(TypeF::ZERO),in(2)->in(2));\n+    return new SubFNode(phase->makecon(TypeF::ZERO),in(2)->in(2));\n@@ -491,1 +496,2 @@\n-  if( IdealizedNumerics && !phase->C->method()->is_strict() ) {\n+  if (IdealizedNumerics && !phase->C->method()->is_strict() &&\n+      in(2)->is_Add() && in(1) == in(2)->in(1)) {\n@@ -493,3 +499,1 @@\n-    if( in(2)->is_Add() &&\n-        phase->eqv(in(1),in(2)->in(1) ) )\n-      return new SubDNode( phase->makecon(TypeD::ZERO),in(2)->in(2));\n+    return new SubDNode(phase->makecon(TypeD::ZERO), in(2)->in(2));\n","filename":"src\/hotspot\/share\/opto\/subnode.cpp","additions":48,"deletions":44,"binary":false,"changes":92,"status":"modified"}]}