{"files":[{"patch":"@@ -243,3 +243,2 @@\n-static Node* find_or_make_CastII(PhaseIterGVN* igvn, Node* parent, Node* control,\n-                                 const TypeInt* type) {\n-  Node* n = new CastIINode(parent, type);\n+static Node* find_or_make_CastII(PhaseIterGVN* igvn, Node* parent, Node* control, const TypeInt* type, bool carry_dependency) {\n+  Node* n = new CastIINode(parent, type, carry_dependency);\n@@ -278,2 +277,2 @@\n-    Node* cx = find_or_make_CastII(igvn, x, in(0), rx->is_int());\n-    Node* cy = find_or_make_CastII(igvn, y, in(0), ry->is_int());\n+    Node* cx = find_or_make_CastII(igvn, x, in(0), rx->is_int(), _carry_dependency);\n+    Node* cy = find_or_make_CastII(igvn, y, in(0), ry->is_int(), _carry_dependency);\n","filename":"src\/hotspot\/share\/opto\/castnode.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2021, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8263971\n+ * @summary C2 crashes with SIGFPE with -XX:+StressGCM and -XX:+StressIGVN\n+ *\n+ * @run main\/othervm -Xcomp -XX:-TieredCompilation -XX:CompileOnly=TestLostDependencyOnZeroTripGuard -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+IgnoreUnrecognizedVMOptions -XX:+StressGCM -XX:StressSeed=886771365 TestLostDependencyOnZeroTripGuard\n+ *\n+ *\/\n+\n+public class TestLostDependencyOnZeroTripGuard {\n+\n+    public static final int N = 400;\n+\n+    public int iArrFld[]=new int[N];\n+\n+    public void mainTest(String[] strArr1) {\n+\n+        int i=57657, i1=577, i2=6, i3=157, i4=12, i23=61271;\n+        boolean bArr[]=new boolean[N];\n+\n+        for (i = 9; 379 > i; i++) {\n+            i2 = 1;\n+            do {\n+                i1 <<= i3;\n+            } while (++i2 < 68);\n+            for (i23 = 68; i23 > 3; i23--) {\n+                bArr[i23 + 1] = true;\n+                try {\n+                    i1 = (-42360 \/ i23);\n+                    iArrFld[i + 1] = (i4 % 15384);\n+                } catch (ArithmeticException a_e) {}\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] strArr) {\n+        TestLostDependencyOnZeroTripGuard _instance = new TestLostDependencyOnZeroTripGuard();\n+        for (int i = 0; i < 10; i++ ) {\n+            _instance.mainTest(strArr);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestLostDependencyOnZeroTripGuard.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"}]}