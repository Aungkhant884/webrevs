{"files":[{"patch":"@@ -877,9 +877,0 @@\n-    if (result == nullptr && !req.is_lab_alloc() && get_gc_no_progress_count() > ShenandoahNoProgressThreshold) {\n-      \/\/ Shenandoah will grind along for quite a while allocating one\n-      \/\/ object at a time using non-tlab allocations. This will notify\n-      \/\/ the collector to start a cycle, but will raise an OOME to the\n-      \/\/ mutator if the last Full GCs have not made progress.\n-      control_thread()->handle_alloc_failure(req, false);\n-      return nullptr;\n-    }\n-\n@@ -893,5 +884,14 @@\n-    size_t original_count = get_gc_no_progress_count() + 1;\n-    while (result == nullptr && original_count > get_gc_no_progress_count()) {\n-      control_thread()->handle_alloc_failure(req);\n-      result = allocate_memory_under_lock(req, in_new_region);\n-    }\n+    if (result == nullptr) {\n+      size_t original_count = get_gc_no_progress_count() + 1;\n+      while (result == nullptr && original_count > get_gc_no_progress_count()) {\n+        if (!req.is_lab_alloc() && get_gc_no_progress_count() > ShenandoahNoProgressThreshold) {\n+          \/\/ Shenandoah will grind along for quite a while allocating one\n+          \/\/ object at a time using shared (non-tlab) allocations. This will notify\n+          \/\/ the collector to start a cycle, but will raise an OOME to the\n+          \/\/ mutator if the last Full GCs have not made progress.\n+          control_thread()->handle_alloc_failure(req, false);\n+          break;\n+        }\n+        control_thread()->handle_alloc_failure(req);\n+        result = allocate_memory_under_lock(req, in_new_region);\n+      }\n@@ -899,4 +899,5 @@\n-    if (log_is_enabled(Debug, gc, alloc)) {\n-      ResourceMark rm;\n-      log_debug(gc, alloc)(\"Thread: %s, Result: \" PTR_FORMAT \", Shared: %s, Size: \" SIZE_FORMAT \", Original: \" SIZE_FORMAT \", Latest: \" SIZE_FORMAT,\n-                           Thread::current()->name(), p2i(result), BOOL_TO_STR(!req.is_lab_alloc()), req.size(), original_count, get_gc_no_progress_count());\n+      if (log_is_enabled(Debug, gc, alloc)) {\n+        ResourceMark rm;\n+        log_debug(gc, alloc)(\"Thread: %s, Result: \" PTR_FORMAT \", Request: %s, Size: \" SIZE_FORMAT \", Original: \" SIZE_FORMAT \", Latest: \" SIZE_FORMAT,\n+                             Thread::current()->name(), p2i(result), req.type_string(), req.size(), original_count, get_gc_no_progress_count());\n+      }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":19,"deletions":18,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -612,5 +612,0 @@\n-hotspot_oome = \\\n-  runtime\/reflect\/ReflectOutOfMemoryError.java \\\n-  gc\/InfiniteList.java \\\n-  runtime\/ClassInitErrors\/TestOutOfMemoryDuringInit.java\n-\n","filename":"test\/hotspot\/jtreg\/TEST.groups","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"}]}