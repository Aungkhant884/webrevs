{"files":[{"patch":"@@ -527,1 +527,1 @@\n-void ShenandoahControlThread::handle_alloc_failure(ShenandoahAllocRequest& req) {\n+void ShenandoahControlThread::handle_alloc_failure(ShenandoahAllocRequest& req, bool block) {\n@@ -542,3 +542,6 @@\n-  MonitorLocker ml(&_alloc_failure_waiters_lock);\n-  while (is_alloc_failure_gc()) {\n-    ml.wait();\n+\n+  if (block) {\n+    MonitorLocker ml(&_alloc_failure_waiters_lock);\n+    while (is_alloc_failure_gc()) {\n+      ml.wait();\n+    }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.cpp","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -124,3 +124,5 @@\n-  \/\/ Handle allocation failure from normal allocation.\n-  \/\/ Blocks until memory is available.\n-  void handle_alloc_failure(ShenandoahAllocRequest& req);\n+  \/\/ Handle allocation failure from a mutator allocation.\n+  \/\/ Optionally blocks while collector is handling the failure. If the GC\n+  \/\/ threshold has been exceeded, the mutator allocation will not block so\n+  \/\/ that the out of memory error can be raised promptly.\n+  void handle_alloc_failure(ShenandoahAllocRequest& req, bool block = true);\n@@ -129,1 +131,0 @@\n-  \/\/ Optionally blocks while collector is handling the failure.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahControlThread.hpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -506,0 +506,1 @@\n+  _gc_no_progress_count(0),\n@@ -883,5 +884,20 @@\n-    size_t original_count = shenandoah_policy()->full_gc_count();\n-    while (result == nullptr\n-        && (_progress_last_gc.is_set() || original_count == shenandoah_policy()->full_gc_count())) {\n-      control_thread()->handle_alloc_failure(req);\n-      result = allocate_memory_under_lock(req, in_new_region);\n+    if (result == nullptr) {\n+      size_t original_count = get_gc_no_progress_count() + 1;\n+      while (result == nullptr && original_count > get_gc_no_progress_count()) {\n+        if (!req.is_lab_alloc() && get_gc_no_progress_count() > ShenandoahNoProgressThreshold) {\n+          \/\/ Shenandoah will grind along for quite a while allocating one\n+          \/\/ object at a time using shared (non-tlab) allocations. This will notify\n+          \/\/ the collector to start a cycle, but will raise an OOME to the\n+          \/\/ mutator if the last Full GCs have not made progress.\n+          control_thread()->handle_alloc_failure(req, false);\n+          break;\n+        }\n+        control_thread()->handle_alloc_failure(req);\n+        result = allocate_memory_under_lock(req, in_new_region);\n+      }\n+\n+      if (log_is_enabled(Debug, gc, alloc)) {\n+        ResourceMark rm;\n+        log_debug(gc, alloc)(\"Thread: %s, Result: \" PTR_FORMAT \", Request: %s, Size: \" SIZE_FORMAT \", Original: \" SIZE_FORMAT \", Latest: \" SIZE_FORMAT,\n+                             Thread::current()->name(), p2i(result), req.type_string(), req.size(), original_count, get_gc_no_progress_count());\n+      }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":21,"deletions":5,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -290,1 +290,0 @@\n-  ShenandoahSharedFlag   _progress_last_gc;\n@@ -293,0 +292,2 @@\n+  size_t _gc_no_progress_count;\n+\n@@ -376,2 +377,3 @@\n-  void notify_gc_progress()    { _progress_last_gc.set();   }\n-  void notify_gc_no_progress() { _progress_last_gc.unset(); }\n+  void notify_gc_progress();\n+  void notify_gc_no_progress();\n+  size_t get_gc_no_progress_count() const;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -76,0 +76,12 @@\n+inline void ShenandoahHeap::notify_gc_progress() {\n+  Atomic::store(&_gc_no_progress_count, (size_t) 0);\n+\n+}\n+inline void ShenandoahHeap::notify_gc_no_progress() {\n+  Atomic::inc(&_gc_no_progress_count);\n+}\n+\n+inline size_t ShenandoahHeap::get_gc_no_progress_count() const {\n+  return Atomic::load(&_gc_no_progress_count);\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -297,0 +297,5 @@\n+  product(uintx, ShenandoahNoProgressThreshold, 5, EXPERIMENTAL,            \\\n+          \"After this number of consecutive Full GCs fail to make \"         \\\n+          \"progress, Shenandoah will raise out of memory errors. Note \"     \\\n+          \"that progress is determined by ShenandoahCriticalFreeThreshold\") \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoah_globals.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -274,1 +274,1 @@\n-        public final boolean ZGCIsSelected;\n+        public final boolean ConcurrentGCIsSelected;\n@@ -288,2 +288,2 @@\n-            val = testCaseBaseTargetClass.getValue(testCaseBaseTargetClass.fieldByName(\"ZGCIsSelected\"));\n-            ZGCIsSelected = ((PrimitiveValue) val).booleanValue();\n+            val = testCaseBaseTargetClass.getValue(testCaseBaseTargetClass.fieldByName(\"ConcurrentGCIsSelected\"));\n+            ConcurrentGCIsSelected = ((PrimitiveValue) val).booleanValue();\n@@ -775,1 +775,1 @@\n-    public static final boolean ZGCIsSelected = GC.Z.isSelected();\n+    public static final boolean ConcurrentGCIsSelected = GC.Z.isSelected() || GC.Shenandoah.isSelected();\n@@ -2453,2 +2453,2 @@\n-                \/\/ With ZGC the OOME is not always thrown as expected\n-                env.targetVMOptions.ZGCIsSelected ||\n+                \/\/ With ZGC or Shenandoah the OOME is not always thrown as expected\n+                env.targetVMOptions.ConcurrentGCIsSelected ||\n@@ -2498,2 +2498,2 @@\n-                \/\/ With ZGC the OOME is not always thrown as expected\n-                ZGCIsSelected ||\n+                \/\/ With ZGC or Shenandoah the OOME is not always thrown as expected\n+                ConcurrentGCIsSelected ||\n@@ -2551,2 +2551,2 @@\n-                \/\/ With ZGC the OOME is not always thrown as expected\n-                env.targetVMOptions.ZGCIsSelected ||\n+                \/\/ With ZGC or Shenandoah the OOME is not always thrown as expected\n+                env.targetVMOptions.ConcurrentGCIsSelected ||\n@@ -2612,2 +2612,2 @@\n-                \/\/ With ZGC the OOME is not always thrown as expected\n-                ZGCIsSelected ||\n+                \/\/ With ZGC or Shenandoah the OOME is not always thrown as expected\n+                ConcurrentGCIsSelected ||\n@@ -2818,2 +2818,2 @@\n-                \/\/ With ZGC the OOME is not always thrown as expected\n-                env.targetVMOptions.ZGCIsSelected ||\n+                \/\/ With ZGC or Shenandoah the OOME is not always thrown as expected\n+                env.targetVMOptions.ConcurrentGCIsSelected ||\n@@ -2880,2 +2880,2 @@\n-                \/\/ With ZGC the OOME is not always thrown as expected\n-                ZGCIsSelected ||\n+                \/\/ With ZGC or Shenandoah the OOME is not always thrown as expected\n+                ConcurrentGCIsSelected ||\n","filename":"test\/jdk\/com\/sun\/jdi\/EATests.java","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"}]}