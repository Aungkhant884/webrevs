{"files":[{"patch":"@@ -46,4 +46,6 @@\n-    private static final long FILE_SIZE_TO_COPY = 512L * 1024L * 1024L;\n-    private static final int INTERRUPT_DELAY_IN_MS = 10;\n-    private static final int CANCEL_DELAY_IN_MS = 10;\n-    private static final int DURATION_MAX_IN_MS = 5000;\n+    private static final long FILE_SIZE_TO_COPY = 1024L * 1024L * 1024L;\n+    private static final int INTERRUPT_DELAY_IN_MS = 30;\n+    private static final int INTERRUPT_RATE_IN_MS = 10;\n+    private static final int CANCEL_DELAY_IN_MS = 30;\n+    private static final int CANCEL_RATE_IN_MS = 10;\n+    private static final int CANCEL_DURATION_IN_MS = 60000;\n@@ -87,2 +89,2 @@\n-            \/\/ copy source to target in main thread, interrupting it after a delay\n-            final CountDownLatch ilatch = new CountDownLatch(2);\n+            \/\/ copy source to target in main thread, interrupting it\n+            \/\/ at a fixed rate after a delay\n@@ -90,1 +92,1 @@\n-            Future<?> wakeup = pool.submit(new Runnable() {\n+            Future<?> wakeup = pool.scheduleAtFixedRate(new Runnable() {\n@@ -92,6 +94,2 @@\n-                    ilatch.countDown();\n-                    try {\n-                        ilatch.await();\n-                        Thread.sleep(INTERRUPT_DELAY_IN_MS);\n-                    } catch (InterruptedException ignored) {\n-                    }\n+                    System.out.printf(\"Interrupting at %dms%n\",\n+                        System.currentTimeMillis());\n@@ -99,1 +97,4 @@\n-                }});\n+                }},\n+                INTERRUPT_DELAY_IN_MS,\n+                INTERRUPT_RATE_IN_MS,\n+                java.util.concurrent.TimeUnit.MILLISECONDS);\n@@ -102,3 +103,2 @@\n-                ilatch.countDown();\n-                ilatch.await();\n-                long start = System.currentTimeMillis();\n+                System.out.printf(\"Copying at %dms%n\",\n+                    System.currentTimeMillis());\n@@ -106,3 +106,3 @@\n-                long duration = System.currentTimeMillis() - start;\n-                if (duration > DURATION_MAX_IN_MS)\n-                    throw new RuntimeException(\"Copy was not interrupted\");\n+                System.out.printf(\"Done copying at %dms%n\",\n+                    System.currentTimeMillis());\n+                throw new RuntimeException(\"Copy was not interrupted\");\n@@ -120,3 +120,3 @@\n-            \/\/ copy source to target via task in thread pool, interrupting it after\n-            \/\/ a delay using cancel(true)\n-            final CountDownLatch clatch = new CountDownLatch(2);\n+            \/\/ copy source to target via task in thread pool, interrupting it\n+            \/\/ at a fixed rate after a delay using cancel(true)\n+            final CountDownLatch latch = new CountDownLatch(2);\n@@ -126,1 +126,1 @@\n-                    clatch.countDown();\n+                    latch.countDown();\n@@ -128,1 +128,1 @@\n-                        clatch.await();\n+                        latch.await();\n@@ -131,0 +131,2 @@\n+                    System.out.printf(\"Copying at %dms%n\",\n+                        System.currentTimeMillis());\n@@ -133,0 +135,2 @@\n+                    System.out.printf(\"Done copying at %dms%n\",\n+                        System.currentTimeMillis());\n@@ -136,5 +140,23 @@\n-            clatch.countDown();\n-            clatch.await();\n-            Thread.sleep(CANCEL_DELAY_IN_MS);\n-            boolean cancelled = result.cancel(true);\n-            if (cancelled)\n+            latch.countDown();\n+            try {\n+                latch.await();\n+                Thread.sleep(CANCEL_DELAY_IN_MS);\n+            } catch (InterruptedException ignored) {\n+            }\n+            System.out.printf(\"Cancelling at %dms%n\",\n+                System.currentTimeMillis());\n+            if (result.isDone())\n+                throw new RuntimeException(\"Copy finished before cancellation\");\n+            boolean cancelled;\n+            long start = System.currentTimeMillis();\n+            while (!(cancelled = result.cancel(true))) {\n+                System.out.printf(\"Cancel failed at %dms%n\",\n+                    System.currentTimeMillis());\n+                try {\n+                    Thread.sleep(CANCEL_RATE_IN_MS);\n+                } catch (InterruptedException ignored) {\n+                }\n+                if (start - System.currentTimeMillis() > CANCEL_DURATION_IN_MS)\n+                    break;\n+            }\n+            if (result.isCancelled())\n","filename":"test\/jdk\/java\/nio\/file\/Files\/InterruptCopy.java","additions":52,"deletions":30,"binary":false,"changes":82,"status":"modified"}]}