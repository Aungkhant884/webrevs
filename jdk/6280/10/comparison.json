{"files":[{"patch":"@@ -1729,1 +1729,1 @@\n-    int regNumber = (Rm == zr ? 31 : (uintptr_t)Rm);                    \\\n+    int regNumber = (Rm == zr ? 31 : Rm->encoding());                   \\\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-  const Register (*to_Register)(int) = as_Register;\n+  constexpr Register (*to_Register)(int) = as_Register;\n","filename":"src\/hotspot\/cpu\/aarch64\/foreign_globals_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -70,0 +70,2 @@\n+#define USE_POINTERS_TO_REGISTER_IMPL_ARRAY\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/globalDefinitions_aarch64.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -189,1 +189,1 @@\n-    jint floatRegisterNumber = jvmci_reg - RegisterImpl::number_of_registers_for_jvmci;\n+    jint floatRegisterNumber = jvmci_reg - RegisterImpl::number_of_declared_registers;\n","filename":"src\/hotspot\/cpu\/aarch64\/jvmciCodeInstaller_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,4 @@\n+REGISTER_IMPL_DEFINITION(Register, RegisterImpl, RegisterImpl::number_of_declared_registers);\n+REGISTER_IMPL_DEFINITION(FloatRegister, FloatRegisterImpl, FloatRegisterImpl::number_of_registers);\n+REGISTER_IMPL_DEFINITION(PRegister, PRegisterImpl, PRegisterImpl::number_of_registers);\n+\n@@ -41,1 +45,1 @@\n-  const char* names[number_of_registers] = {\n+  static const char *const names[number_of_registers] = {\n@@ -53,1 +57,1 @@\n-  const char* names[number_of_registers] = {\n+  static const char *const names[number_of_registers] = {\n@@ -63,1 +67,1 @@\n-  const char* names[number_of_registers] = {\n+  static const char *const names[number_of_registers] = {\n","filename":"src\/hotspot\/cpu\/aarch64\/register_aarch64.cpp","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-typedef RegisterImpl* Register;\n+typedef const RegisterImpl* Register;\n@@ -39,3 +39,1 @@\n-inline const Register as_Register(int encoding) {\n-  return (Register)(intptr_t) encoding;\n-}\n+inline constexpr Register as_Register(int encoding);\n@@ -44,1 +42,3 @@\n- public:\n+  static constexpr Register first();\n+\n+public:\n@@ -47,2 +47,1 @@\n-    number_of_byte_registers      = 32,\n-    number_of_registers_for_jvmci = 34,  \/\/ Including SP and ZR.\n+    number_of_declared_registers  = 34,  \/\/ Including SP and ZR.\n@@ -53,1 +52,1 @@\n-  Register successor() const                          { return as_Register(encoding() + 1); }\n+  const Register successor() const { return this + 1; }\n@@ -56,1 +55,1 @@\n-  inline friend const Register as_Register(int encoding);\n+  inline friend constexpr Register as_Register(int encoding);\n@@ -58,1 +57,1 @@\n-  VMReg as_VMReg();\n+  VMReg as_VMReg() const;\n@@ -61,3 +60,2 @@\n-  int   encoding() const                         { assert(is_valid(), \"invalid register\"); return (intptr_t)this; }\n-  bool  is_valid() const                         { return 0 <= (intptr_t)this && (intptr_t)this < number_of_registers; }\n-  bool  has_byte_register() const                { return 0 <= (intptr_t)this && (intptr_t)this < number_of_byte_registers; }\n+  int encoding() const             { assert(is_valid(), \"invalid register\"); return encoding_nocheck(); }\n+  bool is_valid() const            { return (unsigned)encoding_nocheck() < number_of_registers; }\n@@ -65,1 +63,1 @@\n-  int   encoding_nocheck() const                 { return (intptr_t)this; }\n+  int encoding_nocheck() const     { return this - first(); }\n@@ -68,0 +66,3 @@\n+\n+REGISTER_IMPL_DECLARATION(Register, RegisterImpl, RegisterImpl::number_of_declared_registers);\n+\n@@ -72,1 +73,0 @@\n-\n@@ -129,1 +129,1 @@\n-typedef FloatRegisterImpl* FloatRegister;\n+typedef const FloatRegisterImpl* FloatRegister;\n@@ -131,3 +131,1 @@\n-inline FloatRegister as_FloatRegister(int encoding) {\n-  return (FloatRegister)(intptr_t) encoding;\n-}\n+inline constexpr FloatRegister as_FloatRegister(int encoding);\n@@ -137,1 +135,3 @@\n- public:\n+  static constexpr FloatRegister first();\n+\n+public:\n@@ -147,1 +147,1 @@\n-  inline friend FloatRegister as_FloatRegister(int encoding);\n+  inline friend constexpr FloatRegister as_FloatRegister(int encoding);\n@@ -149,1 +149,1 @@\n-  VMReg as_VMReg();\n+  VMReg as_VMReg() const;\n@@ -152,1 +152,3 @@\n-  FloatRegister successor() const                          { return as_FloatRegister((encoding() + 1) % 32); }\n+  FloatRegister successor() const {\n+    return as_FloatRegister((encoding() + 1) % (unsigned)number_of_registers);\n+  }\n@@ -155,3 +157,2 @@\n-  int   encoding() const                          { assert(is_valid(), \"invalid register\"); return (intptr_t)this; }\n-  int   encoding_nocheck() const                         { return (intptr_t)this; }\n-  bool  is_valid() const                          { return 0 <= (intptr_t)this && (intptr_t)this < number_of_registers; }\n+  int encoding() const             { assert(is_valid(), \"invalid register\"); return encoding_nocheck(); }\n+  bool is_valid() const            { return (unsigned)encoding_nocheck() < number_of_registers; }\n@@ -159,1 +160,1 @@\n-\n+  int encoding_nocheck() const     { return this - first(); }\n@@ -162,0 +163,3 @@\n+REGISTER_IMPL_DECLARATION(FloatRegister, FloatRegisterImpl, FloatRegisterImpl::number_of_registers);\n+\n+\n@@ -235,4 +239,2 @@\n-typedef PRegisterImpl* PRegister;\n-inline PRegister as_PRegister(int encoding) {\n-  return (PRegister)(intptr_t)encoding;\n-}\n+typedef const PRegisterImpl* PRegister;\n+inline constexpr PRegister as_PRegister(int encoding);\n@@ -242,0 +244,2 @@\n+  static constexpr PRegister first();\n+\n@@ -255,1 +259,1 @@\n-  inline friend PRegister as_PRegister(int encoding);\n+  inline friend constexpr PRegister as_PRegister(int encoding);\n@@ -257,1 +261,1 @@\n-  VMReg as_VMReg();\n+  VMReg as_VMReg() const;\n@@ -260,1 +264,1 @@\n-  PRegister successor() const     { return as_PRegister(encoding() + 1); }\n+  PRegister successor() const     { return this + 1; }\n@@ -263,4 +267,4 @@\n-  int   encoding() const          { assert(is_valid(), \"invalid register\"); return (intptr_t)this; }\n-  int   encoding_nocheck() const  { return (intptr_t)this; }\n-  bool  is_valid() const          { return 0 <= (intptr_t)this && (intptr_t)this < number_of_registers; }\n-  bool  is_governing() const      { return 0 <= (intptr_t)this && (intptr_t)this < number_of_governing_registers; }\n+  int encoding() const            { assert(is_valid(), \"invalid register\"); return encoding_nocheck(); }\n+  int encoding_nocheck() const    { return this - first(); }\n+  bool is_valid() const           { return (unsigned)encoding_nocheck() < number_of_registers; }\n+  bool is_governing() const       { return first() <= this && this - first() < number_of_governing_registers; }\n@@ -270,0 +274,3 @@\n+\n+REGISTER_IMPL_DECLARATION(PRegister, PRegisterImpl, PRegisterImpl::number_of_registers);\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/register_aarch64.hpp","additions":45,"deletions":38,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-inline VMReg RegisterImpl::as_VMReg() {\n+inline VMReg RegisterImpl::as_VMReg() const {\n@@ -34,1 +34,1 @@\n-inline VMReg FloatRegisterImpl::as_VMReg() {\n+inline VMReg FloatRegisterImpl::as_VMReg() const {\n@@ -39,1 +39,1 @@\n-inline VMReg PRegisterImpl::as_VMReg() {\n+inline VMReg PRegisterImpl::as_VMReg() const {\n","filename":"src\/hotspot\/cpu\/aarch64\/vmreg_aarch64.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -48,0 +48,5 @@\n+\n+\/\/ Macros to help define all kinds of registers\n+\n+#ifndef USE_POINTERS_TO_REGISTER_IMPL_ARRAY\n+\n@@ -50,2 +55,2 @@\n-#define CONSTANT_REGISTER_DECLARATION(type, name, value)        \\\n-const type name = ((type)value);                                \\\n+#define CONSTANT_REGISTER_DECLARATION(type, name, value)                \\\n+const type name = ((type)value);                                        \\\n@@ -54,1 +59,19 @@\n-#define REGISTER_DECLARATION(type, name, value)                 \\\n+#else \/\/ USE_POINTERS_TO_REGISTER_IMPL_ARRAY\n+\n+#define REGISTER_IMPL_DECLARATION(type, impl_type, reg_count)           \\\n+inline constexpr type as_ ## type(int encoding) {                       \\\n+  return impl_type::first() + encoding;                                 \\\n+}                                                                       \\\n+extern impl_type all_ ## type ## s[reg_count + 1] INTERNAL_VISIBILITY;  \\\n+inline constexpr type impl_type::first() { return all_ ## type ## s + 1; }\n+\n+#define REGISTER_IMPL_DEFINITION(type, impl_type, reg_count)            \\\n+impl_type all_ ## type ## s[reg_count + 1];\n+\n+#define CONSTANT_REGISTER_DECLARATION(type, name, value)                \\\n+constexpr type name = as_ ## type(value);\n+\n+#endif \/\/ USE_POINTERS_TO_REGISTER_IMPL_ARRAY\n+\n+\n+#define REGISTER_DECLARATION(type, name, value) \\\n@@ -57,0 +80,10 @@\n+\n+\/\/ For definitions of RegisterImpl* instances. To be redefined in an\n+\/\/ OS-specific way.\n+#ifdef __GNUC__\n+#define INTERNAL_VISIBILITY  __attribute__ ((visibility (\"internal\")))\n+#else\n+#define INTERNAL_VISIBILITY\n+#endif\n+\n+\n","filename":"src\/hotspot\/share\/asm\/register.hpp","additions":36,"deletions":3,"binary":false,"changes":39,"status":"modified"}]}