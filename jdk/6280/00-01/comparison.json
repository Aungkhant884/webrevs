{"files":[{"patch":"@@ -70,0 +70,2 @@\n+#define USE_POINTERS_TO_REGISTER_IMPL_ARRAY\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/globalDefinitions_aarch64.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,19 +35,0 @@\n-\/\/ Macros to help define all kinds of registers\n-\n-#define REGISTER_IMPL_DECLARATION(type, name)                           \\\n-inline const type as_ ## type(int encoding) {                           \\\n-  assert(encoding <= name::number_of_declared_registers, \"invalid register\"); \\\n-  return encoding == -1 ? name::invalid() : name::first() + encoding;   \\\n-}                                                                       \\\n-extern name all_ ## type ## s[name::number_of_declared_registers] INTERNAL_VISIBILITY; \\\n-constexpr type first_ ## type = all_ ## type ## s;                      \\\n-inline constexpr type name::first() { return all_ ## type ## s; }\n-\n-#define REGISTER_IMPL_DEFINITION(type, name)                    \\\n-name all_ ## type ## s[name::number_of_declared_registers];\n-\n-#undef CONSTANT_REGISTER_DECLARATION\n-#define CONSTANT_REGISTER_DECLARATION(type, name, value)        \\\n-constexpr type name = first_##type + value;\n-\n-\n@@ -56,1 +37,1 @@\n-typedef RegisterImpl* Register;\n+typedef const RegisterImpl* Register;\n@@ -58,1 +39,1 @@\n-const Register as_Register(int encoding);\n+inline const Register as_Register(int encoding);\n@@ -61,1 +42,1 @@\n-  const friend Register as_Register(int encoding);\n+  inline friend const Register as_Register(int encoding);\n@@ -69,4 +50,4 @@\n-    number_of_registers       = 32,\n-    number_of_byte_registers  = 32,\n-    number_of_declared_registers = 34,  \/\/ Including SP and ZR.\n-    max_slots_per_register    = 2\n+    number_of_registers         =   32,\n+    number_of_byte_registers      = 32,\n+    number_of_declared_registers  = 34,  \/\/ Including SP and ZR.\n+    max_slots_per_register = 2\n@@ -76,1 +57,1 @@\n-  Register successor() const     { return as_Register(encoding() + 1); }\n+  const Register successor() const { return this + 1; }\n@@ -78,1 +59,1 @@\n-  VMReg as_VMReg();\n+  VMReg as_VMReg() const;\n@@ -81,2 +62,3 @@\n-  bool is_valid() const          { return this < invalid(); }\n-  bool has_byte_register() const { return is_valid(); }\n+  int encoding() const             { assert(is_valid(), \"invalid register\"); return encoding_nocheck(); }\n+  bool is_valid() const            { return this >= first() && this < invalid(); }\n+  bool has_byte_register() const   { return is_valid(); }\n@@ -84,2 +66,1 @@\n-  int encoding() const           { assert(is_valid(), \"invalid register\"); return encoding_nocheck(); }\n-  int encoding_nocheck() const   { return this - first(); }\n+  int encoding_nocheck() const     { return this - first(); }\n@@ -92,0 +73,1 @@\n+\n@@ -137,0 +119,1 @@\n+\n@@ -147,1 +130,0 @@\n-\n@@ -150,1 +132,1 @@\n-typedef FloatRegisterImpl* FloatRegister;\n+typedef const FloatRegisterImpl* FloatRegister;\n@@ -152,1 +134,1 @@\n-const FloatRegister as_FloatRegister(int encoding);\n+inline const FloatRegister as_FloatRegister(int encoding);\n@@ -156,1 +138,1 @@\n-  const friend FloatRegister as_FloatRegister(int encoding);\n+  inline friend const FloatRegister as_FloatRegister(int encoding);\n@@ -172,1 +154,1 @@\n-  VMReg as_VMReg();\n+  VMReg as_VMReg() const;\n@@ -175,1 +157,1 @@\n-  FloatRegister successor() const { return as_FloatRegister(encoding() + 1); }\n+  FloatRegister successor() const { return this + 1; }\n@@ -178,2 +160,1 @@\n-  bool is_valid() const           { return this < invalid(); }\n-  bool has_byte_register() const  { return is_valid(); }\n+  bool is_valid() const           { return this >= first() && this < invalid(); }\n@@ -190,1 +171,1 @@\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, fnoreg , (FloatRegisterImpl::number_of_registers));\n+CONSTANT_REGISTER_DECLARATION(FloatRegister, fnoreg , (FloatRegisterImpl::number_of_declared_registers));\n@@ -260,1 +241,1 @@\n-typedef PRegisterImpl* PRegister;\n+typedef const PRegisterImpl* PRegister;\n@@ -265,1 +246,1 @@\n-  const friend PRegister as_PRegister(int encoding);\n+  friend const PRegister as_PRegister(int encoding);\n@@ -279,1 +260,1 @@\n-  VMReg as_VMReg();\n+  VMReg as_VMReg() const;\n@@ -282,1 +263,1 @@\n-  PRegister successor() const    { return as_PRegister(encoding() + 1); }\n+  PRegister successor() const     { return this + 1; }\n@@ -285,2 +266,4 @@\n-  bool is_valid() const          { return this < invalid(); }\n-  bool has_byte_register() const { return is_valid(); }\n+  int encoding() const            { assert(is_valid(), \"invalid register\"); return encoding_nocheck(); }\n+  int encoding_nocheck() const    { return this - first(); }\n+  bool is_valid() const           { return this >= first() && this < invalid(); }\n+  bool is_governing() const       { return this < first() + number_of_governing_registers; }\n@@ -288,5 +271,0 @@\n-  int encoding() const           { assert(is_valid(), \"invalid register\"); return encoding_nocheck(); }\n-  int encoding_nocheck() const   { return this - first(); }\n-  bool is_governing() const {\n-    return this < first() + number_of_governing_registers;\n-  }\n@@ -295,0 +273,1 @@\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/register_aarch64.hpp","additions":31,"deletions":52,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-inline VMReg RegisterImpl::as_VMReg() {\n+inline VMReg RegisterImpl::as_VMReg() const {\n@@ -34,1 +34,1 @@\n-inline VMReg FloatRegisterImpl::as_VMReg() {\n+inline VMReg FloatRegisterImpl::as_VMReg() const {\n@@ -39,1 +39,1 @@\n-inline VMReg PRegisterImpl::as_VMReg() {\n+inline VMReg PRegisterImpl::as_VMReg() const {\n","filename":"src\/hotspot\/cpu\/aarch64\/vmreg_aarch64.inline.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -48,0 +48,5 @@\n+\n+\/\/ Macros to help define all kinds of registers\n+\n+#ifndef USE_POINTERS_TO_REGISTER_IMPL_ARRAY\n+\n@@ -54,1 +59,22 @@\n-#define REGISTER_DECLARATION(type, name, value)                 \\\n+\n+#else \/\/ USE_POINTERS_TO_REGISTER_IMPL_ARRAY\n+\n+#define REGISTER_IMPL_DECLARATION(type, impl_type)                      \\\n+inline const type as_ ## type(int encoding) {                           \\\n+  assert(encoding <= impl_type::number_of_declared_registers, \"invalid register\"); \\\n+  return encoding == -1 ? impl_type::invalid() : impl_type::first() + encoding; \\\n+}                                                                       \\\n+extern impl_type all_ ## type ## s[impl_type::number_of_declared_registers] INTERNAL_VISIBILITY; \\\n+inline constexpr type impl_type::first() { return all_ ## type ## s; }\n+\n+#define REGISTER_IMPL_DEFINITION(type, impl_type)                    \\\n+impl_type all_ ## type ## s[impl_type::number_of_declared_registers];\n+\n+#undef CONSTANT_REGISTER_DECLARATION\n+#define CONSTANT_REGISTER_DECLARATION(type, name, value)        \\\n+constexpr type name = all_ ## type ## s + value;\n+\n+#endif \/\/ USE_POINTERS_TO_REGISTER_IMPL_ARRAY\n+\n+\n+#define REGISTER_DECLARATION(type, name, value) \\\n@@ -57,0 +83,1 @@\n+\n","filename":"src\/hotspot\/share\/asm\/register.hpp","additions":28,"deletions":1,"binary":false,"changes":29,"status":"modified"}]}