{"files":[{"patch":"@@ -48,1 +48,1 @@\n-  const Register (*to_Register)(int) = as_Register;\n+  constexpr Register (*to_Register)(int) = as_Register;\n","filename":"src\/hotspot\/cpu\/aarch64\/foreign_globals_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-inline const Register as_Register(int encoding);\n+inline constexpr Register as_Register(int encoding);\n@@ -42,2 +42,0 @@\n-  inline friend const Register as_Register(int encoding);\n-\n@@ -45,2 +43,0 @@\n-  static constexpr Register invalid() { return first() + number_of_registers; }\n-  static constexpr Register no_reg()  { return first() + number_of_declared_registers; }\n@@ -59,0 +55,3 @@\n+  \/\/ construction\n+  inline friend constexpr Register as_Register(int encoding);\n+\n@@ -63,2 +62,2 @@\n-  bool is_valid() const            { return this >= first() && this < invalid(); }\n-  bool has_byte_register() const   { return is_valid(); }\n+  bool is_valid() const            { return this >= first() && this - first() < number_of_registers; }\n+  bool has_byte_register() const   { return this >= first() && this - first() < number_of_byte_registers; }\n@@ -74,1 +73,1 @@\n-CONSTANT_REGISTER_DECLARATION(Register, noreg, (RegisterImpl::number_of_declared_registers));\n+CONSTANT_REGISTER_DECLARATION(Register, noreg, (-1));\n@@ -134,1 +133,1 @@\n-inline const FloatRegister as_FloatRegister(int encoding);\n+inline constexpr FloatRegister as_FloatRegister(int encoding);\n@@ -138,2 +137,0 @@\n-  inline friend const FloatRegister as_FloatRegister(int encoding);\n-\n@@ -141,2 +138,0 @@\n-  static constexpr FloatRegister invalid() { return first() + number_of_registers; }\n-  static constexpr FloatRegister no_reg()  { return first() + number_of_registers; }\n@@ -153,0 +148,3 @@\n+  \/\/ construction\n+  inline friend constexpr FloatRegister as_FloatRegister(int encoding);\n+\n@@ -159,1 +157,2 @@\n-  bool is_valid() const           { return this >= first() && this < invalid(); }\n+  int encoding() const             { assert(is_valid(), \"invalid register\"); return encoding_nocheck(); }\n+  bool is_valid() const            { return this >= first() && this - first() < number_of_registers; }\n@@ -161,2 +160,1 @@\n-  int encoding() const            { assert(is_valid(), \"invalid register\"); return encoding_nocheck(); }\n-  int encoding_nocheck() const    { return this - first(); }\n+  int encoding_nocheck() const     { return this - first(); }\n@@ -170,1 +168,2 @@\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, fnoreg , (FloatRegisterImpl::number_of_registers));\n+CONSTANT_REGISTER_DECLARATION(FloatRegister, fnoreg , (-1));\n+\n@@ -241,1 +240,1 @@\n-const PRegister as_PRegister(int encoding);\n+inline constexpr PRegister as_PRegister(int encoding);\n@@ -245,2 +244,0 @@\n-  friend const PRegister as_PRegister(int encoding);\n-\n@@ -248,2 +245,0 @@\n-  static constexpr PRegister invalid() { return first() + number_of_registers; }\n-  static constexpr PRegister no_reg()  { return first() + number_of_registers; }\n@@ -258,0 +253,3 @@\n+  \/\/ construction\n+  inline friend constexpr PRegister as_PRegister(int encoding);\n+\n@@ -266,2 +264,2 @@\n-  bool is_valid() const           { return this >= first() && this < invalid(); }\n-  bool is_governing() const       { return this < first() + number_of_governing_registers; }\n+  bool is_valid() const           { return this >= first() && this - first() < number_of_registers; }\n+  bool  is_governing() const      { return first() <= this && this - first() < number_of_governing_registers; }\n","filename":"src\/hotspot\/cpu\/aarch64\/register_aarch64.hpp","additions":22,"deletions":24,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -78,0 +78,2 @@\n+#define USE_POINTERS_TO_REGISTER_IMPL_ARRAY\n+\n","filename":"src\/hotspot\/cpu\/x86\/globalDefinitions_x86.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,1 +59,0 @@\n-\n@@ -63,2 +62,2 @@\n-inline const type as_ ## type(int encoding) {                           \\\n-  return encoding == -1 ? impl_type::no_reg() : impl_type::first() + encoding; \\\n+inline constexpr type as_ ## type(int encoding) {                       \\\n+  return impl_type::first() + encoding;                                 \\\n@@ -67,1 +66,1 @@\n-inline constexpr type impl_type::first() { return all_ ## type ## s; }\n+inline constexpr type impl_type::first() { return all_ ## type ## s + 1; }\n@@ -73,1 +72,1 @@\n-constexpr type name = all_ ## type ## s + value;\n+constexpr type name = as_ ## type(value);\n","filename":"src\/hotspot\/share\/asm\/register.hpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"}]}