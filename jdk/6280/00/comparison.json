{"files":[{"patch":"@@ -1724,1 +1724,1 @@\n-    int regNumber = (Rm == zr ? 31 : (uintptr_t)Rm);                    \\\n+    int regNumber = (Rm == zr ? 31 : Rm->encoding());                   \\\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -189,1 +189,1 @@\n-    jint floatRegisterNumber = jvmci_reg - RegisterImpl::number_of_registers_for_jvmci;\n+    jint floatRegisterNumber = jvmci_reg - RegisterImpl::number_of_declared_registers;\n","filename":"src\/hotspot\/cpu\/aarch64\/jvmciCodeInstaller_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,4 @@\n+REGISTER_IMPL_DEFINITION(Register, RegisterImpl);\n+REGISTER_IMPL_DEFINITION(FloatRegister, FloatRegisterImpl);\n+REGISTER_IMPL_DEFINITION(PRegister, PRegisterImpl);\n+\n@@ -40,1 +44,1 @@\n-  const char* names[number_of_registers] = {\n+  static const char *const names[number_of_registers] = {\n@@ -52,1 +56,1 @@\n-  const char* names[number_of_registers] = {\n+  static const char *const names[number_of_registers] = {\n@@ -62,1 +66,1 @@\n-  const char* names[number_of_registers] = {\n+  static const char *const names[number_of_registers] = {\n","filename":"src\/hotspot\/cpu\/aarch64\/register_aarch64.cpp","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -35,0 +35,19 @@\n+\/\/ Macros to help define all kinds of registers\n+\n+#define REGISTER_IMPL_DECLARATION(type, name)                           \\\n+inline const type as_ ## type(int encoding) {                           \\\n+  assert(encoding <= name::number_of_declared_registers, \"invalid register\"); \\\n+  return encoding == -1 ? name::invalid() : name::first() + encoding;   \\\n+}                                                                       \\\n+extern name all_ ## type ## s[name::number_of_declared_registers] INTERNAL_VISIBILITY; \\\n+constexpr type first_ ## type = all_ ## type ## s;                      \\\n+inline constexpr type name::first() { return all_ ## type ## s; }\n+\n+#define REGISTER_IMPL_DEFINITION(type, name)                    \\\n+name all_ ## type ## s[name::number_of_declared_registers];\n+\n+#undef CONSTANT_REGISTER_DECLARATION\n+#define CONSTANT_REGISTER_DECLARATION(type, name, value)        \\\n+constexpr type name = first_##type + value;\n+\n+\n@@ -39,3 +58,1 @@\n-inline const Register as_Register(int encoding) {\n-  return (Register)(intptr_t) encoding;\n-}\n+const Register as_Register(int encoding);\n@@ -44,1 +61,7 @@\n- public:\n+  const friend Register as_Register(int encoding);\n+\n+private:\n+  static constexpr Register first();\n+  static constexpr Register invalid() { return first() + number_of_declared_registers; }\n+\n+public:\n@@ -46,4 +69,4 @@\n-    number_of_registers         =   32,\n-    number_of_byte_registers      = 32,\n-    number_of_registers_for_jvmci = 34,  \/\/ Including SP and ZR.\n-    max_slots_per_register = 2\n+    number_of_registers       = 32,\n+    number_of_byte_registers  = 32,\n+    number_of_declared_registers = 34,  \/\/ Including SP and ZR.\n+    max_slots_per_register    = 2\n@@ -53,4 +76,1 @@\n-  Register successor() const                          { return as_Register(encoding() + 1); }\n-\n-  \/\/ construction\n-  inline friend const Register as_Register(int encoding);\n+  Register successor() const     { return as_Register(encoding() + 1); }\n@@ -61,3 +81,2 @@\n-  int   encoding() const                         { assert(is_valid(), \"invalid register\"); return (intptr_t)this; }\n-  bool  is_valid() const                         { return 0 <= (intptr_t)this && (intptr_t)this < number_of_registers; }\n-  bool  has_byte_register() const                { return 0 <= (intptr_t)this && (intptr_t)this < number_of_byte_registers; }\n+  bool is_valid() const          { return this < invalid(); }\n+  bool has_byte_register() const { return is_valid(); }\n@@ -65,1 +84,2 @@\n-  int   encoding_nocheck() const                 { return (intptr_t)this; }\n+  int encoding() const           { assert(is_valid(), \"invalid register\"); return encoding_nocheck(); }\n+  int encoding_nocheck() const   { return this - first(); }\n@@ -68,1 +88,0 @@\n-\/\/ The integer registers of the aarch64 architecture\n@@ -70,1 +89,1 @@\n-CONSTANT_REGISTER_DECLARATION(Register, noreg, (-1));\n+REGISTER_IMPL_DECLARATION(Register, RegisterImpl);\n@@ -72,0 +91,2 @@\n+\/\/ The integer registers of the aarch64 architecture\n+CONSTANT_REGISTER_DECLARATION(Register, noreg, (RegisterImpl::number_of_declared_registers));\n@@ -116,1 +137,0 @@\n-\n@@ -127,0 +147,1 @@\n+\n@@ -131,3 +152,1 @@\n-inline FloatRegister as_FloatRegister(int encoding) {\n-  return (FloatRegister)(intptr_t) encoding;\n-}\n+const FloatRegister as_FloatRegister(int encoding);\n@@ -137,1 +156,7 @@\n- public:\n+  const friend FloatRegister as_FloatRegister(int encoding);\n+\n+private:\n+  static constexpr FloatRegister first();\n+  static constexpr FloatRegister invalid() { return first() + number_of_declared_registers; }\n+\n+public:\n@@ -140,0 +165,1 @@\n+    number_of_declared_registers = 32,\n@@ -146,3 +172,0 @@\n-  \/\/ construction\n-  inline friend FloatRegister as_FloatRegister(int encoding);\n-\n@@ -152,1 +175,1 @@\n-  FloatRegister successor() const                          { return as_FloatRegister((encoding() + 1) % 32); }\n+  FloatRegister successor() const { return as_FloatRegister(encoding() + 1); }\n@@ -155,3 +178,2 @@\n-  int   encoding() const                          { assert(is_valid(), \"invalid register\"); return (intptr_t)this; }\n-  int   encoding_nocheck() const                         { return (intptr_t)this; }\n-  bool  is_valid() const                          { return 0 <= (intptr_t)this && (intptr_t)this < number_of_registers; }\n+  bool is_valid() const           { return this < invalid(); }\n+  bool has_byte_register() const  { return is_valid(); }\n@@ -159,1 +181,2 @@\n-\n+  int encoding() const            { assert(is_valid(), \"invalid register\"); return encoding_nocheck(); }\n+  int encoding_nocheck() const    { return this - first(); }\n@@ -162,1 +185,1 @@\n-\/\/ The float registers of the AARCH64 architecture\n+REGISTER_IMPL_DECLARATION(FloatRegister, FloatRegisterImpl);\n@@ -164,1 +187,0 @@\n-CONSTANT_REGISTER_DECLARATION(FloatRegister, fnoreg , (-1));\n@@ -166,0 +188,3 @@\n+\/\/ The float registers of the AARCH64 architecture\n+\n+CONSTANT_REGISTER_DECLARATION(FloatRegister, fnoreg , (FloatRegisterImpl::number_of_registers));\n@@ -236,3 +261,1 @@\n-inline PRegister as_PRegister(int encoding) {\n-  return (PRegister)(intptr_t)encoding;\n-}\n+const PRegister as_PRegister(int encoding);\n@@ -242,0 +265,6 @@\n+  const friend PRegister as_PRegister(int encoding);\n+\n+private:\n+  static constexpr PRegister first();\n+  static constexpr PRegister invalid() { return first() + number_of_declared_registers; }\n+\n@@ -245,0 +274,1 @@\n+    number_of_declared_registers = 16,\n@@ -249,3 +279,0 @@\n-  \/\/ construction\n-  inline friend PRegister as_PRegister(int encoding);\n-\n@@ -255,1 +282,1 @@\n-  PRegister successor() const     { return as_PRegister(encoding() + 1); }\n+  PRegister successor() const    { return as_PRegister(encoding() + 1); }\n@@ -258,4 +285,2 @@\n-  int   encoding() const          { assert(is_valid(), \"invalid register\"); return (intptr_t)this; }\n-  int   encoding_nocheck() const  { return (intptr_t)this; }\n-  bool  is_valid() const          { return 0 <= (intptr_t)this && (intptr_t)this < number_of_registers; }\n-  bool  is_governing() const      { return 0 <= (intptr_t)this && (intptr_t)this < number_of_governing_registers; }\n+  bool is_valid() const          { return this < invalid(); }\n+  bool has_byte_register() const { return is_valid(); }\n@@ -263,0 +288,5 @@\n+  int encoding() const           { assert(is_valid(), \"invalid register\"); return encoding_nocheck(); }\n+  int encoding_nocheck() const   { return this - first(); }\n+  bool is_governing() const {\n+    return this < first() + number_of_governing_registers;\n+  }\n@@ -265,0 +295,2 @@\n+REGISTER_IMPL_DECLARATION(PRegister, PRegisterImpl);\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/register_aarch64.hpp","additions":76,"deletions":44,"binary":false,"changes":120,"status":"modified"},{"patch":"@@ -57,0 +57,9 @@\n+\/\/ For definitions of RegisterImpl* instances. To be redefined in an\n+\/\/ OS-specific way.\n+#ifdef __GNUC__\n+#define INTERNAL_VISIBILITY  __attribute__ ((visibility (\"internal\")))\n+#else\n+#define INTERNAL_VISIBILITY\n+#endif\n+\n+\n","filename":"src\/hotspot\/share\/asm\/register.hpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"}]}