{"files":[{"patch":"@@ -210,1 +210,1 @@\n-  void remove_unlinked_entries() {\n+  void remove_dead_entries() {\n@@ -236,1 +236,1 @@\n-    \/\/ A table with the new size should be at most filled by this percentage. Otherwise\n+    \/\/ A table with the new size should be at most filled by this factor. Otherwise\n@@ -238,2 +238,2 @@\n-    const float WantedFillFactor = 0.5;\n-    size_t min_expected_size = checked_cast<size_t>(ceil(current_size \/ WantedFillFactor));\n+    const float WantedLoadFactor = 0.5;\n+    size_t min_expected_size = checked_cast<size_t>(ceil(current_size \/ WantedLoadFactor));\n@@ -304,1 +304,1 @@\n-  _table->remove_unlinked_entries();\n+  _table->remove_dead_entries();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CodeRootSet.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2598,3 +2598,2 @@\n-class G1CleanCodeCache : public HeapRegionClosure {\n-public:\n-  G1CleanCodeCache() { }\n+class G1RemoveDeadFromCodeRootSetsTask : public WorkerTask {\n+  HeapRegionClaimer _hrclaimer;\n@@ -2602,5 +2601,3 @@\n-  bool do_heap_region(HeapRegion* hr) {\n-    hr->rem_set()->remove_dead_entries();\n-    return false;\n-  }\n-};\n+  class RemoveDeadHeapRegionClosure : public HeapRegionClosure {\n+  public:\n+    RemoveDeadHeapRegionClosure() { }\n@@ -2608,3 +2605,5 @@\n-class G1CleanCodeCacheTask : public WorkerTask {\n-  HeapRegionClaimer _hrclaimer;\n-  G1CleanCodeCache _cl;\n+    bool do_heap_region(HeapRegion* hr) {\n+      hr->rem_set()->remove_dead_entries();\n+      return false;\n+    }\n+  } _cl;\n@@ -2613,2 +2612,2 @@\n-  G1CleanCodeCacheTask(uint num_workers)\n-  : WorkerTask(\"G1 Clean Code Cache Task\"),\n+  G1RemoveDeadFromCodeRootSetsTask(uint num_workers)\n+  : WorkerTask(\"G1 Remove Dead From Code Root Set Task\"),\n@@ -2622,1 +2621,1 @@\n-void G1CollectedHeap::clean_code_root_sets() {\n+void G1CollectedHeap::remove_dead_entries_from_code_root_sets() {\n@@ -2624,2 +2623,2 @@\n-  G1CleanCodeCacheTask clean_task(num_workers);\n-  workers()->run_task(&clean_task);\n+  G1RemoveDeadFromCodeRootSetsTask remove_dead_task(num_workers);\n+  workers()->run_task(&remove_dead_task);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":15,"deletions":16,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -1268,1 +1268,1 @@\n-  void clean_code_root_sets();\n+  void remove_dead_entries_from_code_root_sets();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1700,1 +1700,1 @@\n-    _g1h->clean_code_root_sets();\n+    _g1h->remove_dead_entries_from_code_root_sets();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -326,1 +326,1 @@\n-    _heap->clean_code_root_sets();\n+    _heap->remove_dead_entries_from_code_root_sets();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}