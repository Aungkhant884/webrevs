{"files":[{"patch":"@@ -176,1 +176,1 @@\n-void CodeBlob::flush(bool do_unregister_nmethod) {\n+void CodeBlob::flush() {\n","filename":"src\/hotspot\/share\/code\/codeBlob.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -144,1 +144,1 @@\n-  virtual void flush(bool do_unregister_nmethod = true);\n+  virtual void flush();\n","filename":"src\/hotspot\/share\/code\/codeBlob.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -988,1 +988,1 @@\n-void CodeCache::flush_unlinked_nmethods(bool do_unregister_nmethods) {\n+void CodeCache::flush_unlinked_nmethods() {\n@@ -995,1 +995,1 @@\n-    nm->flush(do_unregister_nmethods);\n+    nm->flush();\n@@ -1026,2 +1026,2 @@\n-CodeCache::UnloadingScope::UnloadingScope(BoolObjectClosure* is_alive, bool do_unregister_nmethods)\n-  : _is_unloading_behaviour(is_alive), _do_unregister_nmethods(do_unregister_nmethods)\n+CodeCache::UnloadingScope::UnloadingScope(BoolObjectClosure* is_alive)\n+  : _is_unloading_behaviour(is_alive)\n@@ -1038,1 +1038,1 @@\n-  CodeCache::flush_unlinked_nmethods(_do_unregister_nmethods);\n+  CodeCache::flush_unlinked_nmethods();\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -189,1 +189,0 @@\n-    bool                        _do_unregister_nmethods;\n@@ -192,1 +191,1 @@\n-    UnloadingScope(BoolObjectClosure* is_alive, bool do_unregister_nmethods);\n+    UnloadingScope(BoolObjectClosure* is_alive);\n@@ -217,4 +216,1 @@\n-  \/\/ do_unregister_nmethods controls whether CollectedHeap::unregister_nmethod is\n-  \/\/ called for every unlinked nmethod. If false, the caller is responsible to\n-  \/\/ perform an equivalent operation at the appropriate time.\n-  static void flush_unlinked_nmethods(bool do_unregister_nmethods);\n+  static void flush_unlinked_nmethods();\n","filename":"src\/hotspot\/share\/code\/codeCache.hpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -177,3 +177,1 @@\n-  \/\/ The parameter controls whether CollectedHeap::unregister_nmethod() is called\n-  \/\/ during flush. If not, the caller is responsible for doing this.\n-  virtual void flush(bool do_unregister_nmethod = true) = 0;\n+  virtual void flush() = 0;\n","filename":"src\/hotspot\/share\/code\/compiledMethod.hpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1445,1 +1445,1 @@\n-void nmethod::flush(bool do_unregister_nmethod) {\n+void nmethod::flush() {\n@@ -1465,3 +1465,1 @@\n-  if (do_unregister_nmethod) {\n-    Universe::heap()->unregister_nmethod(this);\n-  }\n+  Universe::heap()->unregister_nmethod(this);\n@@ -1470,1 +1468,1 @@\n-  CodeBlob::flush(do_unregister_nmethod);\n+  CodeBlob::flush();\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -524,1 +524,2 @@\n-  void flush(bool do_unregister_nmethod);\n+  \/\/ Deallocate this nmethod - called by the GC\n+  void flush();\n","filename":"src\/hotspot\/share\/code\/nmethod.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -194,9 +194,0 @@\n-  \/\/ Removes dead\/unlinked entries.\n-  void remove_dead_entries() {\n-    auto delete_check =\n-      [&] (G1CodeRootSetHashTableValue* value) {\n-        return value->_nmethod->unlinked_next() != nullptr;\n-      };\n-    clean(delete_check);\n-  }\n-\n@@ -271,5 +262,0 @@\n-void G1CodeRootSet::remove_dead_entries() {\n-  assert(!_is_iterating, \"should not mutate while iterating the table\");\n-  _table->remove_dead_entries();\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CodeRootSet.cpp","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -56,2 +56,0 @@\n-  \/\/ Remove all nmethods which were unlinked after class unloading.\n-  void remove_dead_entries();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CodeRootSet.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2598,29 +2598,0 @@\n-class G1RemoveDeadFromCodeRootSetsTask : public WorkerTask {\n-  HeapRegionClaimer _hrclaimer;\n-\n-  class RemoveDeadHeapRegionClosure : public HeapRegionClosure {\n-  public:\n-    RemoveDeadHeapRegionClosure() { }\n-\n-    bool do_heap_region(HeapRegion* hr) {\n-      hr->rem_set()->remove_dead_entries();\n-      return false;\n-    }\n-  } _cl;\n-\n-public:\n-  G1RemoveDeadFromCodeRootSetsTask(uint num_workers)\n-  : WorkerTask(\"G1 Remove Dead From Code Root Set Task\"),\n-    _hrclaimer(num_workers) { }\n-\n-  void work(uint worker_id) {\n-    G1CollectedHeap::heap()->heap_region_par_iterate_from_worker_offset(&_cl, &_hrclaimer, worker_id);\n-  }\n-};\n-\n-void G1CollectedHeap::remove_dead_entries_from_code_root_sets() {\n-  uint num_workers = workers()->active_workers();\n-  G1RemoveDeadFromCodeRootSetsTask remove_dead_task(num_workers);\n-  workers()->run_task(&remove_dead_task);\n-}\n-\n@@ -3041,1 +3012,0 @@\n-      \/\/ HeapRegion::add_code_root() avoids adding duplicate entries.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":0,"deletions":30,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -1267,3 +1267,0 @@\n-  \/\/ Removes unlinked nmethods from all code root sets after class unloading.\n-  void remove_dead_entries_from_code_root_sets();\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1697,1 +1697,1 @@\n-    CodeCache::UnloadingScope scope(&g1_is_alive, false \/* do_unregister_nmethods *\/);\n+    CodeCache::UnloadingScope scope(&g1_is_alive);\n@@ -1700,1 +1700,0 @@\n-    _g1h->remove_dead_entries_from_code_root_sets();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -322,1 +322,1 @@\n-    CodeCache::UnloadingScope unloading_scope(&_is_alive, false \/* do_unregister_nmethods *\/);\n+    CodeCache::UnloadingScope unloading_scope(&_is_alive);\n@@ -326,1 +326,0 @@\n-    _heap->remove_dead_entries_from_code_root_sets();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -126,4 +126,0 @@\n-void HeapRegionRemSet::remove_dead_entries() {\n-  _code_roots.remove_dead_entries();\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegionRemSet.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -159,2 +159,0 @@\n-  \/\/ Removes all unlinked nmethods from code roots.\n-  void remove_dead_entries();\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegionRemSet.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2055,1 +2055,1 @@\n-    CodeCache::UnloadingScope scope(is_alive_closure(), true \/* do_unregister_nmethods *\/);\n+    CodeCache::UnloadingScope scope(is_alive_closure());\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -202,1 +202,1 @@\n-    CodeCache::UnloadingScope scope(&is_alive, true \/* do_unregister_nmethods *\/);\n+    CodeCache::UnloadingScope scope(&is_alive);\n","filename":"src\/hotspot\/share\/gc\/serial\/genMarkSweep.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -302,1 +302,1 @@\n-  CodeCache::flush_unlinked_nmethods(true \/* do_unregister_nmethods *\/);\n+  CodeCache::flush_unlinked_nmethods();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCodeRoots.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1814,1 +1814,1 @@\n-    CodeCache::UnloadingScope scope(is_alive.is_alive_closure(), true \/* do_unregister_nmethods *\/);\n+    CodeCache::UnloadingScope scope(is_alive.is_alive_closure());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -365,1 +365,1 @@\n-  CodeCache::flush_unlinked_nmethods(true \/* do_unregister_nmethods *\/);\n+  CodeCache::flush_unlinked_nmethods();\n","filename":"src\/hotspot\/share\/gc\/x\/xNMethod.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -446,1 +446,1 @@\n-  CodeCache::flush_unlinked_nmethods(true \/* do_unregister_nmethods *\/);\n+  CodeCache::flush_unlinked_nmethods();\n","filename":"src\/hotspot\/share\/gc\/z\/zNMethod.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}