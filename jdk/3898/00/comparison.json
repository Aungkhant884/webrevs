{"files":[{"patch":"@@ -1889,1 +1889,0 @@\n-  assert(framesize%(2*wordSize) == 0, \"must preserve 2*wordSize alignment\");\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -377,4 +377,1 @@\n-  \/\/ The frame_map records size in slots (32bit word)\n-\n-  \/\/ subtract two words to account for return address and link\n-  return (frame_map()->framesize() - (2*VMRegImpl::slots_per_word))  * VMRegImpl::stack_slot_size;\n+  return in_bytes(frame_map()->framesize_in_bytes());\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRAssembler_aarch64.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -344,1 +344,1 @@\n-  \/\/ Note that we do this before doing an enter().\n+  \/\/ Note that we do this before creating a frame.\n@@ -346,1 +346,1 @@\n-  MacroAssembler::build_frame(framesize + 2 * wordSize);\n+  MacroAssembler::build_frame(framesize);\n@@ -354,1 +354,1 @@\n-  MacroAssembler::remove_frame(framesize + 2 * wordSize);\n+  MacroAssembler::remove_frame(framesize);\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_MacroAssembler_aarch64.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -4441,1 +4441,2 @@\n-  assert(framesize > 0, \"framesize must be > 0\");\n+  assert(framesize >= 2 * wordSize, \"framesize must include space for FP\/LR\");\n+  assert(framesize % (2*wordSize) == 0, \"must preserve 2*wordSize alignment\");\n@@ -4460,1 +4461,2 @@\n-  assert(framesize > 0, \"framesize must be > 0\");\n+  assert(framesize >= 2 * wordSize, \"framesize must include space for FP\/LR\");\n+  assert(framesize % (2*wordSize) == 0, \"must preserve 2*wordSize alignment\");\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}