{"files":[{"patch":"@@ -41,0 +41,1 @@\n+import java.util.Objects;\n@@ -2026,0 +2027,12 @@\n+\n+        @Override\n+        public int hashCode() {\n+            return (this.svalue != null) ? this.svalue.hashCode() : 0;\n+        }\n+\n+        @Override\n+        public boolean equals(Object val) {\n+            return val instanceof CSS.StringValue strVal\n+                    && Objects.equals(this.svalue, strVal.svalue);\n+        }\n+\n@@ -2203,0 +2216,10 @@\n+        @Override\n+        public int hashCode() {\n+            return Float.hashCode(value);\n+        }\n+\n+        @Override\n+        public boolean equals(Object val) {\n+            return val instanceof CSS.FontSize size && value == size.value;\n+        }\n+\n@@ -2303,0 +2326,11 @@\n+        @Override\n+        public int hashCode() {\n+            return (family != null) ? family.hashCode() : 0;\n+        }\n+\n+        @Override\n+        public boolean equals(Object val) {\n+            return val instanceof CSS.FontFamily font\n+                       && Objects.equals(family, font.family);\n+        }\n+\n@@ -2366,0 +2400,10 @@\n+        @Override\n+        public int hashCode() {\n+            return Integer.hashCode(weight);\n+        }\n+\n+        @Override\n+        public boolean equals(Object val) {\n+            return val instanceof CSS.FontWeight fontWeight && weight == fontWeight.weight;\n+        }\n+\n@@ -2426,0 +2470,10 @@\n+        @Override\n+        public int hashCode() {\n+            return (c != null) ? c.hashCode() : 0;\n+        }\n+\n+        @Override\n+        public boolean equals(Object val) {\n+            return val instanceof CSS.ColorValue color && c.equals(color.c);\n+        }\n+\n@@ -2480,0 +2534,10 @@\n+        @Override\n+        public int hashCode() {\n+            return (style != null) ? style.hashCode() : 0;\n+        }\n+\n+        @Override\n+        public boolean equals(Object val) {\n+            return val instanceof CSS.BorderStyle border && style.equals(border.style);\n+        }\n+\n@@ -2607,0 +2671,14 @@\n+        @Override\n+        public int hashCode() {\n+            return Float.hashCode(span);\n+        }\n+\n+        @Override\n+        public boolean equals(Object val) {\n+            if (percentage) {\n+                return false;\n+            } else {\n+                return val instanceof CSS.LengthValue lu && span == lu.span;\n+            }\n+        }\n+\n@@ -2610,0 +2688,1 @@\n+\n@@ -2826,0 +2905,14 @@\n+\n+        @Override\n+        public int hashCode() {\n+            int hashCode = Float.hashCode(horizontalPosition);\n+            hashCode |= Float.hashCode(verticalPosition);\n+            return hashCode;\n+        }\n+\n+        @Override\n+        public boolean equals(Object val) {\n+            return val instanceof CSS.BackgroundPosition bp\n+                    && horizontalPosition == bp.horizontalPosition\n+                    && verticalPosition == bp.verticalPosition;\n+        }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/html\/CSS.java","additions":93,"deletions":0,"binary":false,"changes":93,"status":"modified"},{"patch":"@@ -0,0 +1,165 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 7083187\n+ * @summary  Verifies if CSS.CSSValue attribute is same\n+ * @run main CSSAttributeEqualityBug\n+ *\/\n+\n+import javax.swing.text.SimpleAttributeSet;\n+import javax.swing.text.html.CSS;\n+import javax.swing.text.html.StyleSheet;\n+\n+public class CSSAttributeEqualityBug {\n+\n+    public static void main(String[] args) {\n+        testFontSize();\n+        testFontFamily();\n+        testFontWeight();\n+        testColor();\n+        testBorderStyle();\n+        testCSSLengthValue();\n+        testBackgroundPosition();\n+        testCSSStringValue();\n+    }\n+\n+    private static void checkEquality(SimpleAttributeSet a,\n+                                      SimpleAttributeSet b,\n+                                      String attribName) {\n+        if (a.isEqual(b)) {\n+            System.out.println(\"a equals b\");\n+        } else {\n+            System.out.println(\"a = \" + a);\n+            System.out.println(\"b = \" + b);\n+            throw new RuntimeException(attribName + \" a is not equal to b\");\n+        }\n+    }\n+\n+    private static void testFontSize() {\n+        StyleSheet ss = new StyleSheet();\n+        String fontSize = \"42\";\n+\n+        SimpleAttributeSet a = new SimpleAttributeSet();\n+        ss.addCSSAttribute(a, CSS.Attribute.FONT_SIZE, fontSize);\n+\n+        SimpleAttributeSet b = new SimpleAttributeSet();\n+        ss.addCSSAttribute(b, CSS.Attribute.FONT_SIZE, fontSize);\n+\n+        checkEquality(a, b, \"CSS.Attribute.FontSize\");\n+    }\n+\n+    private static void testFontFamily() {\n+        StyleSheet ss = new StyleSheet();\n+        String fontFamily = \"Sans-Serif\";\n+\n+        SimpleAttributeSet a = new SimpleAttributeSet();\n+        ss.addCSSAttribute(a, CSS.Attribute.FONT_FAMILY, fontFamily);\n+\n+        SimpleAttributeSet b = new SimpleAttributeSet();\n+        ss.addCSSAttribute(b, CSS.Attribute.FONT_FAMILY, fontFamily);\n+\n+        checkEquality(a, b, \"CSS.Attribute.FontFamily\");\n+    }\n+\n+    private static void testFontWeight() {\n+        StyleSheet ss = new StyleSheet();\n+        String fontWeight = \"bold\";\n+\n+        SimpleAttributeSet a = new SimpleAttributeSet();\n+        ss.addCSSAttribute(a, CSS.Attribute.FONT_WEIGHT, fontWeight);\n+\n+        SimpleAttributeSet b = new SimpleAttributeSet();\n+        ss.addCSSAttribute(b, CSS.Attribute.FONT_WEIGHT, fontWeight);\n+\n+        checkEquality(a, b, \"CSS.Attribute.FontWeight\");\n+    }\n+\n+    private static void testColor() {\n+        StyleSheet ss = new StyleSheet();\n+        String fontColor = \"red\";\n+\n+        SimpleAttributeSet a = new SimpleAttributeSet();\n+        ss.addCSSAttribute(a, CSS.Attribute.COLOR, fontColor);\n+\n+        SimpleAttributeSet b = new SimpleAttributeSet();\n+        ss.addCSSAttribute(b, CSS.Attribute.COLOR, fontColor);\n+\n+        checkEquality(a, b, \"CSS.Attribute.Color\");\n+    }\n+\n+    private static void testBorderStyle() {\n+        StyleSheet ss = new StyleSheet();\n+        String borderStyle = \"DASHED\";\n+\n+        SimpleAttributeSet a = new SimpleAttributeSet();\n+        ss.addCSSAttribute(a, CSS.Attribute.BORDER_STYLE, borderStyle);\n+\n+        SimpleAttributeSet b = new SimpleAttributeSet();\n+        ss.addCSSAttribute(b, CSS.Attribute.BORDER_STYLE, borderStyle);\n+\n+        checkEquality(a, b, \"CSS.Attribute.BorderStyle\");\n+    }\n+\n+    private static void testCSSLengthValue() {\n+        StyleSheet ss = new StyleSheet();\n+        String lengthUnit = \"42\";\n+\n+        SimpleAttributeSet a = new SimpleAttributeSet();\n+        ss.addCSSAttribute(a, CSS.Attribute.MARGIN_TOP, lengthUnit);\n+\n+        SimpleAttributeSet b = new SimpleAttributeSet();\n+        ss.addCSSAttribute(b, CSS.Attribute.MARGIN_TOP, lengthUnit);\n+\n+        checkEquality(a, b, \"CSS LengthValue\");\n+    }\n+\n+    private static void testBackgroundPosition() {\n+        StyleSheet ss = new StyleSheet();\n+        String bgPosition = \"top\";\n+\n+        SimpleAttributeSet a = new SimpleAttributeSet();\n+        ss.addCSSAttribute(a, CSS.Attribute.BACKGROUND_POSITION, bgPosition);\n+\n+        SimpleAttributeSet b = new SimpleAttributeSet();\n+        ss.addCSSAttribute(b, CSS.Attribute.BACKGROUND_POSITION, bgPosition);\n+\n+        checkEquality(a, b, \"CSS.Attribute.BACKGROUND_POSITION\");\n+    }\n+\n+    private static void testCSSStringValue() {\n+        StyleSheet ss = new StyleSheet();\n+        String strVal = \"underline\";\n+\n+        SimpleAttributeSet a = new SimpleAttributeSet();\n+        ss.addCSSAttribute(a, CSS.Attribute.TEXT_DECORATION, strVal);\n+\n+        SimpleAttributeSet b = new SimpleAttributeSet();\n+        ss.addCSSAttribute(b, CSS.Attribute.TEXT_DECORATION, strVal);\n+\n+        checkEquality(a, b, \"CSS.Attribute.TEXT_DECORATION\");\n+    }\n+}\n+\n+\n","filename":"test\/jdk\/javax\/swing\/text\/html\/CSS\/CSSAttributeEqualityBug.java","additions":165,"deletions":0,"binary":false,"changes":165,"status":"added"}]}