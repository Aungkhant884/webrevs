{"files":[{"patch":"@@ -153,10 +153,1 @@\n-    private static final class UnsignedValue {\n-        private final Object o;\n-\n-        UnsignedValue(Object o) {\n-            this.o = o;\n-        }\n-\n-        Object value() {\n-            return o;\n-        }\n+    private static final record UnsignedValue(Object value) {\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/consumer\/RecordedObject.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,2 @@\n-import java.util.HashMap;\n+import java.util.ArrayDeque;\n+import java.util.IdentityHashMap;\n@@ -37,1 +38,1 @@\n-    private final Map<ValueDescriptor, ObjectContext> contextLookup;\n+    private Map<ValueDescriptor, ObjectContext> contextLookup;\n@@ -39,1 +40,0 @@\n-\n@@ -44,1 +44,0 @@\n-        this.contextLookup = new HashMap<>();\n@@ -50,5 +49,5 @@\n-    private ObjectContext(ObjectContext parent, ValueDescriptor descriptor) {\n-        this.eventType = parent.eventType;\n-        this.contextLookup = parent.contextLookup;\n-        this.timeConverter = parent.timeConverter;\n-        this.fields = descriptor.getFields();\n+    private ObjectContext(Map<ValueDescriptor, ObjectContext> contextLookup, EventType eventType, List<ValueDescriptor> fields, TimeConverter timeConverter) {\n+        this.eventType = eventType;\n+        this.contextLookup = contextLookup;\n+        this.timeConverter = timeConverter;\n+        this.fields = fields;\n@@ -58,4 +57,21 @@\n-        ObjectContext context = contextLookup.get(descriptor);\n-        if (context == null) {\n-            context = new ObjectContext(this, descriptor);\n-            contextLookup.put(descriptor, context);\n+        if (contextLookup == null) {\n+            \/\/ Lazy, only needed when accessing nested structures.\n+            contextLookup = buildContextLookup(fields);\n+        }\n+        return contextLookup.get(descriptor);\n+    }\n+\n+    \/\/ Create mapping from ValueDescriptor to ObjectContext for all reachable\n+    \/\/ ValueDescriptors.\n+    public Map<ValueDescriptor, ObjectContext> buildContextLookup(List<ValueDescriptor> fields) {\n+        Map<ValueDescriptor, ObjectContext> lookup = new IdentityHashMap<>();\n+        ArrayDeque<ValueDescriptor> q = new ArrayDeque<>(fields);\n+        while (!q.isEmpty()) {\n+            ValueDescriptor vd = q.pop();\n+            if (!lookup.containsKey(vd)) {\n+                List<ValueDescriptor> children = vd.getFields();\n+                lookup.put(vd, new ObjectContext(lookup, eventType, children, timeConverter));\n+                for (ValueDescriptor v : children) {\n+                    q.add(v);\n+                }\n+            }\n@@ -63,1 +79,1 @@\n-        return context;\n+        return lookup;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/consumer\/ObjectContext.java","additions":31,"deletions":15,"binary":false,"changes":46,"status":"modified"}]}