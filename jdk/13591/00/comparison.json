{"files":[{"patch":"@@ -0,0 +1,203 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4887150\n+  @summary tests that after performing COPY drop, MOVE drop can be performed too\n+  @key headful\n+  @run main NextDropActionTest\n+*\/\n+\n+import java.awt.AWTException;\n+import java.awt.Component;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.datatransfer.StringSelection;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DragGestureListener;\n+import java.awt.dnd.DragSource;\n+import java.awt.dnd.DragSourceAdapter;\n+import java.awt.dnd.DragSourceDropEvent;\n+import java.awt.dnd.DragSourceListener;\n+import java.awt.dnd.DropTarget;\n+import java.awt.dnd.DropTargetAdapter;\n+import java.awt.dnd.DropTargetDropEvent;\n+import java.awt.dnd.DropTargetListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.lang.reflect.InvocationTargetException;\n+\n+\n+public class NextDropActionTest {\n+    private final long WAIT_TIMEOUT = 30000;\n+    private volatile boolean failed;\n+    private volatile boolean firstEnd;\n+    private volatile boolean secondEnd;\n+    private final Object LOCK = new Object();\n+    private Frame frame;\n+    private Panel panel;\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException, AWTException {\n+        NextDropActionTest nextDropActionTest = new NextDropActionTest();\n+        nextDropActionTest.start();\n+    }\n+\n+    public void start() throws InterruptedException,\n+            InvocationTargetException, AWTException {\n+\n+        EventQueue.invokeAndWait(() -> {\n+            panel = new Panel();\n+            frame = new Frame();\n+            frame.add(panel);\n+            frame.setBounds(300, 300, 300, 300);\n+            frame.setLocationRelativeTo(null);\n+            frame.setVisible(true);\n+            frame.validate();\n+        });\n+\n+        try {\n+            Robot robot = new Robot();\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            final DragSourceListener dsl = new DragSourceAdapter() {\n+                boolean firstCall = true;\n+                public void dragDropEnd(DragSourceDropEvent e) {\n+                    System.err.println(\"DragSourseListener.dragDropEnd(): \" +\n+                            \" firstCall=\" + firstCall +\n+                            \" drop action=\" + e.getDropAction());\n+                    if (firstCall) {\n+                        firstCall = false;\n+                        synchronized (LOCK) {\n+                            firstEnd = true;\n+                            LOCK.notifyAll();\n+                        }\n+                        return;\n+                    }\n+                    if (e.getDropAction() != DnDConstants.ACTION_MOVE) {\n+                        System.err.println(\"FAILURE: wrong drop action:\"\n+                                + e.getDropAction());\n+                        failed = true;\n+                    }\n+                    synchronized (LOCK) {\n+                        secondEnd = true;\n+                        LOCK.notifyAll();\n+                    }\n+                }\n+            };\n+\n+            DragGestureListener dgl = dge ->\n+                    dge.startDrag(null, new StringSelection(\"test\"), dsl);\n+\n+            new DragSource().createDefaultDragGestureRecognizer(panel,\n+                    DnDConstants.ACTION_COPY_OR_MOVE, dgl);\n+\n+            DropTargetListener dtl = new DropTargetAdapter() {\n+                public void drop(DropTargetDropEvent e) {\n+                    System.err.println(\"DropTargetListener.drop(): \" +\n+                            \"accepting the user drop action=\" + e.getDropAction());\n+                    e.acceptDrop(e.getDropAction());\n+                    e.dropComplete(true);\n+                }\n+            };\n+\n+            new DropTarget(frame, DnDConstants.ACTION_COPY_OR_MOVE, dtl);\n+\n+            Point startPoint = new Point(Util.blockTillDisplayed(panel));\n+            startPoint.translate(50, 50);\n+            Point endPoint = new Point(startPoint.x\n+                    + DragSource.getDragThreshold() + 10,\n+                    startPoint.y + DragSource.getDragThreshold() + 10);\n+\n+            synchronized (LOCK) {\n+                robot.keyPress(KeyEvent.VK_CONTROL);\n+                Util.doDragDrop(robot, startPoint, endPoint);\n+                robot.keyRelease(KeyEvent.VK_CONTROL);\n+                LOCK.wait(WAIT_TIMEOUT);\n+            }\n+            if (!firstEnd) {\n+                System.err.println(\"DragSourseListener.dragDropEnd() \" +\n+                        \"was not called, returning\");\n+                return;\n+            }\n+\n+            synchronized (LOCK) {\n+                Util.doDragDrop(robot, startPoint, endPoint);\n+                LOCK.wait(WAIT_TIMEOUT);\n+            }\n+            if (!secondEnd) {\n+                System.err.println(\"DragSourseListener.dragDropEnd() \" +\n+                        \"was not called, returning\");\n+                return;\n+            }\n+        } finally {\n+            if (frame != null) {\n+                frame.dispose();\n+            }\n+        }\n+\n+        if (failed) {\n+            throw new RuntimeException(\"wrong next drop action!\");\n+        }\n+\n+        System.err.println(\"test passed!\");\n+     }\n+}\n+\n+class Util {\n+    public static int sign(int n) {\n+        return n < 0 ? -1 : n == 0 ? 0 : 1;\n+    }\n+\n+    public static void doDragDrop(Robot robot, Point startPoint, Point endPoint) {\n+       robot.mouseMove(startPoint.x, startPoint.y);\n+       robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+       for (Point p = new Point(startPoint); !p.equals(endPoint);\n+                p.translate(Util.sign(endPoint.x - p.x),\n+                            Util.sign(endPoint.y - p.y))) {\n+           robot.mouseMove(p.x, p.y);\n+           robot.delay(100);\n+       }\n+       robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+    }\n+\n+    public static Point blockTillDisplayed(Component comp) {\n+        Point p = null;\n+        while (p == null) {\n+            try {\n+                p = comp.getLocationOnScreen();\n+            } catch (IllegalStateException e) {\n+                try {\n+                    Thread.sleep(1000);\n+                } catch (InterruptedException ie) {\n+                }\n+            }\n+        }\n+        return p;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/NextDropActionTest\/NextDropActionTest.java","additions":203,"deletions":0,"binary":false,"changes":203,"status":"added"},{"patch":"@@ -0,0 +1,224 @@\n+\/*\n+ * Copyright (c) 2002, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4702735\n+  @summary tests that a dragEnter is called even if the source doesn't\n+           export data in native formats.\n+  @key headful\n+  @run main NoFormatsDragEnterTest\n+*\/\n+\n+import java.awt.AWTException;\n+import java.awt.Canvas;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DragGestureEvent;\n+import java.awt.dnd.DragGestureListener;\n+import java.awt.dnd.DragSource;\n+import java.awt.dnd.DragSourceAdapter;\n+import java.awt.dnd.DragSourceListener;\n+import java.awt.dnd.DropTarget;\n+import java.awt.dnd.DropTargetDragEvent;\n+import java.awt.dnd.DropTargetDropEvent;\n+import java.awt.dnd.DropTargetEvent;\n+import java.awt.dnd.DropTargetListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+\n+\n+public class NoFormatsDragEnterTest {\n+\n+    Frame frame;\n+    DragSourcePanel dragSourcePanel;\n+    DropTargetPanel dropTargetPanel;\n+\n+    static final int FRAME_ACTIVATION_TIMEOUT = 1000;\n+    static final int DROP_COMPLETION_TIMEOUT = 1000;\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException, AWTException {\n+        NoFormatsDragEnterTest noFormatsDragEnterTest = new NoFormatsDragEnterTest();\n+        EventQueue.invokeAndWait(noFormatsDragEnterTest::init);\n+        noFormatsDragEnterTest.start();\n+    }\n+\n+    public void init() {\n+        frame = new Frame();\n+        dragSourcePanel = new DragSourcePanel();\n+        dropTargetPanel = new DropTargetPanel();\n+\n+        frame.setTitle(\"Test frame\");\n+        frame.setLayout(new GridLayout(2, 1));\n+        frame.add(dragSourcePanel);\n+        frame.add(dropTargetPanel);\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+        frame.validate();\n+    }\n+\n+    public void start() throws AWTException {\n+        try {\n+            Robot robot = new Robot();\n+            robot.waitForIdle();\n+            robot.delay(FRAME_ACTIVATION_TIMEOUT);\n+\n+            final Point srcPoint = dragSourcePanel.getLocationOnScreen();\n+            Dimension d = dragSourcePanel.getSize();\n+            srcPoint.translate(d.width \/ 2, d.height \/ 2);\n+\n+            final Point dstPoint = dropTargetPanel.getLocationOnScreen();\n+            d = dropTargetPanel.getSize();\n+            dstPoint.translate(d.width \/ 2, d.height \/ 2);\n+\n+            robot.mouseMove(srcPoint.x, srcPoint.y);\n+            robot.keyPress(KeyEvent.VK_CONTROL);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            for (Point curPoint = new Point(srcPoint);\n+                 !curPoint.equals(dstPoint);\n+                 curPoint.translate(sign(dstPoint.x - curPoint.x),\n+                                    sign(dstPoint.y - curPoint.y))) {\n+                robot.mouseMove(curPoint.x, curPoint.y);\n+                robot.delay(100);\n+            }\n+            robot.keyRelease(KeyEvent.VK_CONTROL);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+            robot.delay(DROP_COMPLETION_TIMEOUT);\n+        } finally {\n+            if (frame != null) {\n+                frame.dispose();\n+            }\n+        }\n+\n+        if (!dropTargetPanel.passed()) {\n+            throw new RuntimeException(\"Drop doesn't happen.\");\n+        }\n+    }\n+\n+    public static int sign(int n) {\n+        return n < 0 ? -1 : n > 0 ? 1 : 0;\n+    }\n+}\n+\n+class DragSourcePanel extends Canvas implements DragGestureListener {\n+\n+    private final Dimension preferredDimension = new Dimension(200, 100);\n+    private final DragSourceListener listener = new DragSourceAdapter() {};\n+\n+    public DragSourcePanel() {\n+        DragSource ds = DragSource.getDefaultDragSource();\n+        ds.createDefaultDragGestureRecognizer(this,\n+                                              DnDConstants.ACTION_COPY_OR_MOVE,\n+                                              this);\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return preferredDimension;\n+    }\n+\n+    public void dragGestureRecognized(DragGestureEvent dge) {\n+        dge.startDrag(null, new TestTransferable(), listener);\n+    }\n+}\n+\n+class TestTransferable implements Transferable {\n+\n+    public static DataFlavor dataFlavor = null;\n+    static final Object data = new Object();\n+\n+    static {\n+        DataFlavor df = null;\n+        try {\n+            df = new DataFlavor(DataFlavor.javaJVMLocalObjectMimeType +\n+                                \"; class=java.lang.Object\");\n+        } catch (ClassNotFoundException e) {\n+            throw new ExceptionInInitializerError(e);\n+        }\n+        dataFlavor = df;\n+    }\n+\n+    public DataFlavor[] getTransferDataFlavors() {\n+        return new DataFlavor[] { dataFlavor };\n+    }\n+\n+    public boolean isDataFlavorSupported(DataFlavor df) {\n+        return dataFlavor.equals(df);\n+    }\n+\n+    public Object getTransferData(DataFlavor df)\n+      throws UnsupportedFlavorException, IOException {\n+        if (!isDataFlavorSupported(df)) {\n+            throw new UnsupportedFlavorException(df);\n+        }\n+        return data;\n+    }\n+}\n+\n+class DropTargetPanel extends Canvas implements DropTargetListener {\n+\n+    private final Dimension preferredDimension = new Dimension(200, 100);\n+    private boolean dragEnterTriggered = false;\n+    private boolean dragOverTriggered = false;\n+\n+    public DropTargetPanel() {\n+        setDropTarget(new DropTarget(this, this));\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return preferredDimension;\n+    }\n+\n+    public void dragEnter(DropTargetDragEvent dtde) {\n+        dragEnterTriggered = true;\n+    }\n+\n+    public void dragExit(DropTargetEvent dte) {}\n+\n+    public void dragOver(DropTargetDragEvent dtde) {\n+        dragOverTriggered = true;\n+    }\n+\n+    public void dropActionChanged(DropTargetDragEvent dtde) {}\n+\n+    public void drop(DropTargetDropEvent dtde) {\n+        dtde.rejectDrop();\n+    }\n+\n+    public boolean passed() {\n+        \/\/ asserts that dragEnter has been called if dragOver has been called.\n+        return !dragOverTriggered || dragEnterTriggered;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/NoFormatsDragEnterTest\/NoFormatsDragEnterTest.java","additions":224,"deletions":0,"binary":false,"changes":224,"status":"added"},{"patch":"@@ -0,0 +1,296 @@\n+\/*\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4473062\n+  @summary tests that a drop happens even if the source doesn't export\n+           data in native formats.\n+  @key headful\n+  @run main NoFormatsDropTest\n+*\/\n+\n+import java.awt.AWTEvent;\n+import java.awt.AWTException;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DragGestureEvent;\n+import java.awt.dnd.DragGestureListener;\n+import java.awt.dnd.DragSource;\n+import java.awt.dnd.DragSourceAdapter;\n+import java.awt.dnd.DragSourceListener;\n+import java.awt.dnd.DropTarget;\n+import java.awt.dnd.DropTargetContext;\n+import java.awt.dnd.DropTargetDragEvent;\n+import java.awt.dnd.DropTargetDropEvent;\n+import java.awt.dnd.DropTargetEvent;\n+import java.awt.dnd.DropTargetListener;\n+import java.awt.event.AWTEventListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.MouseEvent;\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+\n+public class NoFormatsDropTest implements AWTEventListener {\n+\n+    Frame frame;\n+    DragSourcePanel dragSourcePanel;\n+    DropTargetPanel dropTargetPanel;\n+\n+    static final int FRAME_ACTIVATION_TIMEOUT = 1000;\n+    static final int DROP_COMPLETION_TIMEOUT = 1000;\n+    static final int MOUSE_RELEASE_TIMEOUT = 1000;\n+    static final Object SYNC_LOCK = new Object();\n+\n+    Component clickedComponent = null;\n+\n+    public static void main(String[] args) throws InterruptedException,\n+            InvocationTargetException, AWTException {\n+        NoFormatsDropTest noFormatsDropTest = new NoFormatsDropTest();\n+        EventQueue.invokeAndWait(noFormatsDropTest::init);\n+        noFormatsDropTest.start();\n+    }\n+\n+    public void init() {\n+        frame = new Frame();\n+        dragSourcePanel = new DragSourcePanel();\n+        dropTargetPanel = new DropTargetPanel();\n+\n+        frame.setTitle(\"Test frame\");\n+        frame.setLayout(new GridLayout(2, 1));\n+        frame.add(dragSourcePanel);\n+        frame.add(dropTargetPanel);\n+\n+        frame.getToolkit().addAWTEventListener(this, AWTEvent.MOUSE_EVENT_MASK);\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+        frame.validate();\n+    }\n+\n+    public void start() throws InterruptedException, AWTException {\n+        try {\n+            Robot robot = new Robot();\n+            robot.setAutoWaitForIdle(true);\n+            robot.delay(FRAME_ACTIVATION_TIMEOUT);\n+\n+            final Point srcPoint = dragSourcePanel.getLocationOnScreen();\n+            Dimension d = dragSourcePanel.getSize();\n+            srcPoint.translate(d.width \/ 2, d.height \/ 2);\n+\n+            if (!pointInComponent(robot, srcPoint, dragSourcePanel)) {\n+                System.err.println(\"WARNING: Couldn't locate source panel.\");\n+                return;\n+            }\n+\n+            final Point dstPoint = dropTargetPanel.getLocationOnScreen();\n+            d = dropTargetPanel.getSize();\n+            dstPoint.translate(d.width \/ 2, d.height \/ 2);\n+\n+            if (!pointInComponent(robot, dstPoint, dropTargetPanel)) {\n+                System.err.println(\"WARNING: Couldn't locate target panel.\");\n+                return;\n+            }\n+\n+            robot.mouseMove(srcPoint.x, srcPoint.y);\n+            robot.keyPress(KeyEvent.VK_CONTROL);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            for (Point curPoint = new Point(srcPoint);\n+                 !curPoint.equals(dstPoint);\n+                 curPoint.translate(sign(dstPoint.x - curPoint.x),\n+                                    sign(dstPoint.y - curPoint.y))) {\n+                robot.mouseMove(curPoint.x, curPoint.y);\n+                robot.delay(100);\n+            }\n+            robot.keyRelease(KeyEvent.VK_CONTROL);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+            robot.delay(DROP_COMPLETION_TIMEOUT);\n+        } finally {\n+            if (frame != null) {\n+                frame.dispose();\n+            }\n+        }\n+\n+        if (!dropTargetPanel.passed()) {\n+            throw new RuntimeException(\"Drop doesn't happen.\");\n+        }\n+    }\n+\n+    public static int sign(int n) {\n+        return n < 0 ? -1 : n > 0 ? 1 : 0;\n+    }\n+\n+    public void reset() {\n+        clickedComponent = null;\n+    }\n+\n+    public void eventDispatched(AWTEvent e) {\n+        if (e.getID() == MouseEvent.MOUSE_RELEASED) {\n+            clickedComponent = (Component)e.getSource();\n+            synchronized (SYNC_LOCK) {\n+                SYNC_LOCK.notifyAll();\n+            }\n+        }\n+    }\n+\n+    boolean pointInComponent(Robot robot, Point p, Component comp)\n+      throws InterruptedException {\n+        robot.waitForIdle();\n+        reset();\n+        robot.mouseMove(p.x, p.y);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        synchronized (SYNC_LOCK) {\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            SYNC_LOCK.wait(MOUSE_RELEASE_TIMEOUT);\n+        }\n+\n+        Component c = clickedComponent;\n+\n+        while (c != null && c != comp) {\n+            c = c.getParent();\n+        }\n+\n+        return c == comp;\n+    }\n+}\n+\n+class DragSourcePanel extends Panel implements DragGestureListener {\n+\n+    private final Dimension preferredDimension = new Dimension(200, 100);\n+    private final DragSourceListener listener = new DragSourceAdapter() {};\n+\n+    public DragSourcePanel() {\n+        DragSource ds = DragSource.getDefaultDragSource();\n+        ds.createDefaultDragGestureRecognizer(this,\n+                                              DnDConstants.ACTION_COPY_OR_MOVE,\n+                                              this);\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return preferredDimension;\n+    }\n+\n+    public void dragGestureRecognized(DragGestureEvent dge) {\n+        dge.startDrag(null, new TestTransferable(), listener);\n+    }\n+}\n+\n+class TestTransferable implements Transferable {\n+\n+    public static DataFlavor dataFlavor = null;\n+    static final Object data = new Object();\n+\n+    static {\n+        DataFlavor df = null;\n+        try {\n+            df = new DataFlavor(DataFlavor.javaJVMLocalObjectMimeType +\n+                                \"; class=java.lang.Object\");\n+        } catch (ClassNotFoundException e) {\n+            throw new ExceptionInInitializerError(e);\n+        }\n+        dataFlavor = df;\n+    }\n+\n+    public DataFlavor[] getTransferDataFlavors() {\n+        return new DataFlavor[] { dataFlavor };\n+    }\n+\n+    public boolean isDataFlavorSupported(DataFlavor df) {\n+        return dataFlavor.equals(df);\n+    }\n+\n+    public Object getTransferData(DataFlavor df)\n+      throws UnsupportedFlavorException, IOException {\n+        if (!isDataFlavorSupported(df)) {\n+            throw new UnsupportedFlavorException(df);\n+        }\n+        return data;\n+    }\n+}\n+\n+class DropTargetPanel extends Panel implements DropTargetListener {\n+\n+    final Dimension preferredDimension = new Dimension(200, 100);\n+    boolean passed = false;\n+\n+    public DropTargetPanel() {\n+        setDropTarget(new DropTarget(this, this));\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return preferredDimension;\n+    }\n+\n+    public void dragEnter(DropTargetDragEvent dtde) {}\n+\n+    public void dragExit(DropTargetEvent dte) {}\n+\n+    public void dragOver(DropTargetDragEvent dtde) {}\n+\n+    public void dropActionChanged(DropTargetDragEvent dtde) {}\n+\n+    public void drop(DropTargetDropEvent dtde) {\n+        DropTargetContext dtc = dtde.getDropTargetContext();\n+\n+        if ((dtde.getSourceActions() & DnDConstants.ACTION_COPY) != 0) {\n+            dtde.acceptDrop(DnDConstants.ACTION_COPY);\n+        } else {\n+            dtde.rejectDrop();\n+        }\n+\n+        Transferable transfer = dtde.getTransferable();\n+\n+        if (transfer.isDataFlavorSupported(TestTransferable.dataFlavor)) {\n+            try {\n+                Object data =\n+                    transfer.getTransferData(TestTransferable.dataFlavor);\n+                passed = true;\n+                dtc.dropComplete(true);\n+            } catch (IOException e) {\n+                e.printStackTrace();\n+                dtc.dropComplete(false);\n+            } catch (UnsupportedFlavorException e) {\n+                e.printStackTrace();\n+                dtc.dropComplete(false);\n+            }\n+        } else {\n+            dtc.dropComplete(false);\n+        }\n+    }\n+\n+    boolean passed() {\n+        return passed;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/NoFormatsDropTest\/NoFormatsDropTest.java","additions":296,"deletions":0,"binary":false,"changes":296,"status":"added"},{"patch":"@@ -0,0 +1,220 @@\n+\/*\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4874092\n+  @summary tests that DragSourceListener.dragExit() is not called if the mouse\n+           is not dragged over any drop site\n+  @key headful\n+  @run main NoTargetNoDragExitTest\n+*\/\n+\n+import java.awt.AWTEvent;\n+import java.awt.Component;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.StringSelection;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DragGestureListener;\n+import java.awt.dnd.DragSource;\n+import java.awt.dnd.DragSourceAdapter;\n+import java.awt.dnd.DragSourceDropEvent;\n+import java.awt.dnd.DragSourceEvent;\n+import java.awt.dnd.DragSourceListener;\n+import java.awt.event.AWTEventListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.MouseEvent;\n+\n+\n+public class NoTargetNoDragExitTest {\n+    private volatile boolean failed;\n+    private volatile boolean end;\n+    private final Object LOCK = new Object();\n+    private Frame frame;\n+    private Panel panel;\n+\n+    public static void main(String[] args) throws Exception {\n+        NoTargetNoDragExitTest noTargetNoDragExitTest = new NoTargetNoDragExitTest();\n+        EventQueue.invokeAndWait(noTargetNoDragExitTest::init);\n+        noTargetNoDragExitTest.start();\n+    }\n+\n+    public void init() {\n+        frame = new Frame();\n+        panel = new Panel();\n+        frame.add(panel);\n+        frame.setSize(300, 300);\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+        frame.validate();\n+    }\n+\n+    public void start() throws Exception {\n+        try {\n+            Robot robot = new Robot();\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+\n+            final DragSourceListener dsl = new DragSourceAdapter() {\n+                public void dragExit(DragSourceEvent e) {\n+                    failed = true;\n+                    System.err.println(\"FAILURE: DragSourceListener.dragExit() called!\");\n+                }\n+                public void dragDropEnd(DragSourceDropEvent e) {\n+                    System.err.println(\"DragSourceListener.dragDropEnd()\");\n+                    synchronized (LOCK) {\n+                        end = true;\n+                        LOCK.notifyAll();\n+                    }\n+                }\n+            };\n+\n+            DragGestureListener dgl = dge ->\n+                    dge.startDrag(null, new StringSelection(\"NoTargetNoDragExitTest\"), dsl);\n+\n+            new DragSource().createDefaultDragGestureRecognizer(panel,\n+                    DnDConstants.ACTION_COPY_OR_MOVE, dgl);\n+\n+            Point startPoint = frame.getLocationOnScreen();\n+            startPoint.translate(50, 50);\n+            Point endPoint = new Point(startPoint.x + 100, startPoint.y + 100);\n+\n+            Util.waitForInit();\n+\n+            if (!Util.pointInComponent(robot, startPoint, frame)) {\n+                System.err.println(\"WARNING: Could not locate \" + frame +\n+                        \" at point \" + startPoint);\n+                return;\n+            }\n+\n+            robot.mouseMove(startPoint.x, startPoint.y);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            for (Point p = new Point(startPoint); !p.equals(endPoint);\n+                 p.translate(Util.sign(endPoint.x - p.x),\n+                         Util.sign(endPoint.y - p.y))) {\n+                robot.mouseMove(p.x, p.y);\n+                robot.delay(100);\n+            }\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+            synchronized (LOCK) {\n+                while (!end) {\n+                    LOCK.wait();\n+                }\n+            }\n+        } finally {\n+            if (frame != null) {\n+                frame.dispose();\n+            }\n+        }\n+\n+\n+\n+        if (failed) {\n+            throw new RuntimeException(\"DragSourceListener.dragExit() called!\");\n+        }\n+\n+        System.err.println(\"test passed!\");\n+     }\n+\n+}\n+\n+\n+class Util implements AWTEventListener {\n+    private static final Toolkit tk = Toolkit.getDefaultToolkit();\n+    private static final Object SYNC_LOCK = new Object();\n+    private Component clickedComponent = null;\n+    private static final int PAINT_TIMEOUT = 10000;\n+    private static final int MOUSE_RELEASE_TIMEOUT = 10000;\n+    private static final Util util = new Util();\n+\n+    static {\n+        tk.addAWTEventListener(util, 0xFFFFFFFF);\n+    }\n+\n+    private void reset() {\n+        clickedComponent = null;\n+    }\n+\n+    public void eventDispatched(AWTEvent e) {\n+        if (e.getID() == MouseEvent.MOUSE_RELEASED) {\n+            clickedComponent = (Component)e.getSource();\n+            synchronized (SYNC_LOCK) {\n+                SYNC_LOCK.notifyAll();\n+            }\n+        }\n+    }\n+\n+    public static boolean pointInComponent(Robot robot, Point p, Component comp)\n+      throws InterruptedException {\n+        return util.isPointInComponent(robot, p, comp);\n+    }\n+\n+    private boolean isPointInComponent(Robot robot, Point p, Component comp)\n+      throws InterruptedException {\n+        tk.sync();\n+        robot.waitForIdle();\n+        reset();\n+        robot.mouseMove(p.x, p.y);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        synchronized (SYNC_LOCK) {\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            SYNC_LOCK.wait(MOUSE_RELEASE_TIMEOUT);\n+        }\n+\n+        Component c = clickedComponent;\n+\n+        while (c != null && c != comp) {\n+            c = c.getParent();\n+        }\n+\n+        return c == comp;\n+    }\n+\n+    public static void waitForInit() throws InterruptedException {\n+        final Frame f = new Frame() {\n+                public void paint(Graphics g) {\n+                    dispose();\n+                    synchronized (SYNC_LOCK) {\n+                        SYNC_LOCK.notifyAll();\n+                    }\n+                }\n+            };\n+        f.setBounds(600, 400, 200, 200);\n+        synchronized (SYNC_LOCK) {\n+            f.setVisible(true);\n+            SYNC_LOCK.wait(PAINT_TIMEOUT);\n+        }\n+        tk.sync();\n+    }\n+\n+    public static int sign(int n) {\n+        return n < 0 ? -1 : n == 0 ? 0 : 1;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/NoTargetNoDragExitTest\/NoTargetNoDragExitTest.java","additions":220,"deletions":0,"binary":false,"changes":220,"status":"added"},{"patch":"@@ -0,0 +1,121 @@\n+\/*\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+  @test\n+  @bug 4187912\n+  @summary Test that some incorrectly written DnD code cannot hang the app\n+  @run main NotReallySerializableTest\n+*\/\n+\n+import java.awt.Button;\n+import java.awt.Cursor;\n+import java.awt.Point;\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.StringSelection;\n+import java.awt.dnd.DnDConstants;\n+import java.awt.dnd.DragGestureEvent;\n+import java.awt.dnd.DragGestureListener;\n+import java.awt.dnd.DragGestureRecognizer;\n+import java.awt.dnd.DragSource;\n+import java.awt.dnd.DragSourceAdapter;\n+import java.awt.dnd.DragSourceContext;\n+import java.awt.dnd.DropTarget;\n+import java.awt.dnd.DropTargetAdapter;\n+import java.awt.dnd.DropTargetDropEvent;\n+import java.io.IOException;\n+import java.io.ObjectOutputStream;\n+import java.io.OutputStream;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+\n+\n+public class NotReallySerializableTest {\n+    public static void main(String[] args) throws IOException {\n+        try {\n+            Toolkit tk = Toolkit.getDefaultToolkit();\n+\n+            DragGestureRecognizer dgr = tk.createDragGestureRecognizer\n+                    (java.awt.dnd.MouseDragGestureRecognizer.class,\n+                            DragSource.getDefaultDragSource(), new Button(),\n+                            DnDConstants.ACTION_LINK, new TrickDragGestureListener());\n+            DragGestureEvent dge = new DragGestureEvent\n+                    (dgr, DnDConstants.ACTION_LINK, new Point(0, 0),\n+                            new TrickList());\n+            DragSourceContext dsc = new DragSourceContext(dge,\n+                    Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR),\n+                    null, null, new TrickTransferable(),\n+                    new TrickDragSourceListener());\n+            DropTarget dt = new DropTarget(new Button(),\n+                    new TrickDropTargetListener());\n+\n+            ObjectOutputStream stream = new ObjectOutputStream\n+                    (new OutputStream() {\n+                        public void write(int b) {}\n+                    });\n+\n+            stream.writeObject(dgr);\n+            stream.writeObject(dge);\n+            stream.writeObject(dsc);\n+            stream.writeObject(dt);\n+        }\n+\n+        System.out.println(\"test passed\");\n+    }\n+}\n+\n+class TrickList extends ArrayList implements Serializable {\n+    Object trick = new Object();\n+\n+    TrickList() {\n+        add(trick);\n+    }\n+}\n+\n+class TrickDragGestureListener implements DragGestureListener, Serializable {\n+    Object trick = new Object();\n+\n+    public void dragGestureRecognized(DragGestureEvent dge) {}\n+}\n+\n+class TrickTransferable extends StringSelection implements Serializable {\n+    Object trick = new Object();\n+\n+    TrickTransferable() {\n+        super(\"\");\n+    }\n+}\n+\n+class TrickDragSourceListener extends DragSourceAdapter\n+    implements Serializable\n+{\n+    Object trick = new Object();\n+}\n+\n+class TrickDropTargetListener extends DropTargetAdapter\n+    implements Serializable\n+{\n+    Object trick = new Object();\n+\n+    public void drop(DropTargetDropEvent dtde) {}\n+}\n","filename":"test\/jdk\/java\/awt\/dnd\/NotReallySerializableTest\/NotReallySerializableTest.java","additions":121,"deletions":0,"binary":false,"changes":121,"status":"added"}]}