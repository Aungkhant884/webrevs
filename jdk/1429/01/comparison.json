{"files":[{"patch":"@@ -305,2 +305,2 @@\n-  \/\/ Process concurrent weak roots\n-  _weak_roots_processor.process_concurrent_weak_roots();\n+  \/\/ Process weak roots\n+  _weak_roots_processor.process();\n","filename":"src\/hotspot\/share\/gc\/z\/zHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -165,2 +165,2 @@\n-    _concurrent_roots(ClassLoaderData::_claim_other),\n-    _concurrent_weak_roots(),\n+    _roots(ClassLoaderData::_claim_other),\n+    _weak_roots(),\n@@ -283,4 +283,1 @@\n-  _concurrent_roots.apply(&cl,\n-                          &cld_cl,\n-                          &thread_cl,\n-                          &nm_cl);\n+  _roots.apply(&cl, &cld_cl, &thread_cl, &nm_cl);\n@@ -291,1 +288,1 @@\n-  _concurrent_weak_roots.apply(&cl);\n+  _weak_roots.apply(&cl);\n","filename":"src\/hotspot\/share\/gc\/z\/zHeapIterator.cpp","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -49,9 +49,9 @@\n-  const bool                   _visit_weaks;\n-  ZStatTimerDisable            _timer_disable;\n-  ZHeapIteratorBitMaps         _bitmaps;\n-  ZLock                        _bitmaps_lock;\n-  ZHeapIteratorQueues          _queues;\n-  ZHeapIteratorArrayQueues     _array_queues;\n-  ZConcurrentRootsIterator     _concurrent_roots;\n-  ZConcurrentWeakRootsIterator _concurrent_weak_roots;\n-  TaskTerminator               _terminator;\n+  const bool               _visit_weaks;\n+  ZStatTimerDisable        _timer_disable;\n+  ZHeapIteratorBitMaps     _bitmaps;\n+  ZLock                    _bitmaps_lock;\n+  ZHeapIteratorQueues      _queues;\n+  ZHeapIteratorArrayQueues _array_queues;\n+  ZRootsIterator           _roots;\n+  ZWeakRootsIterator       _weak_roots;\n+  TaskTerminator           _terminator;\n","filename":"src\/hotspot\/share\/gc\/z\/zHeapIterator.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -652,1 +652,1 @@\n-class ZMarkConcurrentRootsTask : public ZTask {\n+class ZMarkRootsTask : public ZTask {\n@@ -656,1 +656,1 @@\n-  ZConcurrentRootsIterator   _roots;\n+  ZRootsIterator             _roots;\n@@ -664,2 +664,2 @@\n-  ZMarkConcurrentRootsTask(ZMark* mark) :\n-      ZTask(\"ZMarkConcurrentRootsTask\"),\n+  ZMarkRootsTask(ZMark* mark) :\n+      ZTask(\"ZMarkRootsTask\"),\n@@ -676,1 +676,1 @@\n-  ~ZMarkConcurrentRootsTask() {\n+  ~ZMarkRootsTask() {\n@@ -718,1 +718,1 @@\n-    ZMarkConcurrentRootsTask task(this);\n+    ZMarkRootsTask task(this);\n","filename":"src\/hotspot\/share\/gc\/z\/zMark.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -55,1 +55,0 @@\n-\n@@ -107,1 +106,1 @@\n-ZConcurrentRootsIterator::ZConcurrentRootsIterator(int cld_claim) {\n+ZRootsIterator::ZRootsIterator(int cld_claim) {\n@@ -113,4 +112,1 @@\n-void ZConcurrentRootsIterator::apply(OopClosure* cl,\n-                                     CLDClosure* cld_cl,\n-                                     ThreadClosure* thread_cl,\n-                                     NMethodClosure* nm_cl) {\n+void ZRootsIterator::apply(OopClosure* cl, CLDClosure* cld_cl, ThreadClosure* thread_cl, NMethodClosure* nm_cl) {\n@@ -137,1 +133,1 @@\n-void ZConcurrentWeakRootsIterator::report_num_dead() {\n+void ZWeakRootsIterator::report_num_dead() {\n@@ -141,1 +137,1 @@\n-void ZConcurrentWeakRootsIterator::apply(OopClosure* cl) {\n+void ZWeakRootsIterator::apply(OopClosure* cl) {\n","filename":"src\/hotspot\/share\/gc\/z\/zRootsIterator.cpp","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-class ZConcurrentRootsIterator {\n+class ZRootsIterator {\n@@ -94,1 +94,1 @@\n-  ZConcurrentRootsIterator(int cld_claim);\n+  ZRootsIterator(int cld_claim);\n@@ -96,4 +96,1 @@\n-  void apply(OopClosure* cl,\n-             CLDClosure* cld_cl,\n-             ThreadClosure* thread_cl,\n-             NMethodClosure* nm_cl);\n+  void apply(OopClosure* cl, CLDClosure* cld_cl, ThreadClosure* thread_cl, NMethodClosure* nm_cl);\n@@ -114,1 +111,1 @@\n-class ZConcurrentWeakRootsIterator {\n+class ZWeakRootsIterator {\n","filename":"src\/hotspot\/share\/gc\/z\/zRootsIterator.hpp","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -254,1 +254,1 @@\n-void ZVerify::roots_concurrent_strong(bool verify_fixed) {\n+void ZVerify::roots_strong(bool verify_fixed) {\n@@ -260,5 +260,2 @@\n-  ZConcurrentRootsIterator iter(ClassLoaderData::_claim_none);\n-  iter.apply(&cl,\n-             &cld_cl,\n-             &thread_cl,\n-             &nm_cl);\n+  ZRootsIterator iter(ClassLoaderData::_claim_none);\n+  iter.apply(&cl, &cld_cl, &thread_cl, &nm_cl);\n@@ -267,1 +264,1 @@\n-void ZVerify::roots_concurrent_weak() {\n+void ZVerify::roots_weak() {\n@@ -269,1 +266,1 @@\n-  ZConcurrentWeakRootsIterator iter;\n+  ZWeakRootsIterator iter;\n@@ -273,1 +270,1 @@\n-void ZVerify::roots(bool verify_concurrent_strong, bool verify_weaks) {\n+void ZVerify::roots(bool verify_strong, bool verify_weaks) {\n@@ -278,1 +275,1 @@\n-    roots_concurrent_strong(verify_concurrent_strong);\n+    roots_strong(verify_strong);\n@@ -280,1 +277,1 @@\n-      roots_concurrent_weak();\n+      roots_weak();\n@@ -297,2 +294,2 @@\n-void ZVerify::roots_and_objects(bool verify_concurrent_strong, bool verify_weaks) {\n-  roots(verify_concurrent_strong, verify_weaks);\n+void ZVerify::roots_and_objects(bool verify_strong, bool verify_weaks) {\n+  roots(verify_strong, verify_weaks);\n@@ -305,1 +302,1 @@\n-  roots(false \/* verify_concurrent_strong *\/, false \/* verify_weaks *\/);\n+  roots(false \/* verify_strong *\/, false \/* verify_weaks *\/);\n@@ -311,1 +308,1 @@\n-  roots_and_objects(true \/* verify_concurrent_strong*\/, false \/* verify_weaks *\/);\n+  roots_and_objects(true \/* verify_strong *\/, false \/* verify_weaks *\/);\n@@ -317,1 +314,1 @@\n-  roots_and_objects(true \/* verify_concurrent_strong*\/, true \/* verify_weaks *\/);\n+  roots_and_objects(true \/* verify_strong *\/, true \/* verify_weaks *\/);\n","filename":"src\/hotspot\/share\/gc\/z\/zVerify.cpp","additions":13,"deletions":16,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -34,2 +34,2 @@\n-  static void roots_concurrent_strong(bool verify_fixed);\n-  static void roots_concurrent_weak();\n+  static void roots_strong(bool verify_fixed);\n+  static void roots_weak();\n@@ -37,1 +37,1 @@\n-  static void roots(bool verify_concurrent_strong, bool verify_weaks);\n+  static void roots(bool verify_strong, bool verify_weaks);\n@@ -39,1 +39,1 @@\n-  static void roots_and_objects(bool verify_concurrent_strong, bool verify_weaks);\n+  static void roots_and_objects(bool verify_strong, bool verify_weaks);\n","filename":"src\/hotspot\/share\/gc\/z\/zVerify.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-class ZProcessConcurrentWeakRootsTask : public ZTask {\n+class ZProcessWeakRootsTask : public ZTask {\n@@ -59,1 +59,1 @@\n-  ZConcurrentWeakRootsIterator _concurrent_weak_roots;\n+  ZWeakRootsIterator _weak_roots;\n@@ -62,1 +62,1 @@\n-  ZProcessConcurrentWeakRootsTask() :\n+  ZProcessWeakRootsTask() :\n@@ -64,1 +64,1 @@\n-      _concurrent_weak_roots() {}\n+      _weak_roots() {}\n@@ -66,2 +66,2 @@\n-  ~ZProcessConcurrentWeakRootsTask() {\n-    _concurrent_weak_roots.report_num_dead();\n+  ~ZProcessWeakRootsTask() {\n+    _weak_roots.report_num_dead();\n@@ -72,1 +72,1 @@\n-    _concurrent_weak_roots.apply(&cl);\n+    _weak_roots.apply(&cl);\n@@ -76,2 +76,2 @@\n-void ZWeakRootsProcessor::process_concurrent_weak_roots() {\n-  ZProcessConcurrentWeakRootsTask task;\n+void ZWeakRootsProcessor::process() {\n+  ZProcessWeakRootsTask task;\n","filename":"src\/hotspot\/share\/gc\/z\/zWeakRootsProcessor.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-  void process_concurrent_weak_roots();\n+  void process();\n","filename":"src\/hotspot\/share\/gc\/z\/zWeakRootsProcessor.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}