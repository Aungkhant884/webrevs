{"files":[{"patch":"@@ -1644,1 +1644,1 @@\n-     *   is negative or larger then the length of this\n+     *   is negative or larger than the length of this\n@@ -1654,3 +1654,0 @@\n-        if (index < 0 || index > length()) {\n-            throw new IndexOutOfBoundsException();\n-        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,25 @@\n+package org.openjdk.bench.java.lang;\n+\n+import org.openjdk.jmh.annotations.*;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Warmup(iterations = 10, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 10, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n+@Fork(3)\n+public class StringOffsetByCodePoints {\n+\n+    @Benchmark\n+    public int offsetByCodePoints(Data data) {\n+        return data.value.offsetByCodePoints(data.index, data.offset);\n+    }\n+\n+    @State(Scope.Benchmark)\n+    public static class Data {\n+        String value = \"abc\";\n+        int index = 0;\n+        int offset = 1;\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringOffsetByCodePoints.java","additions":25,"deletions":0,"binary":false,"changes":25,"status":"added"}]}