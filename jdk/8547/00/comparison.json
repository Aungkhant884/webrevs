{"files":[{"patch":"@@ -785,2 +785,0 @@\n-  # Some tests needs to find a boot JDK using the JDK8_HOME variable.\n-  $1_JTREG_BASIC_OPTIONS += -e:JDK8_HOME=$$(BOOT_JDK)\n","filename":"make\/RunTests.gmk","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,81 +0,0 @@\n-\/*\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.io.IOException;\n-import java.net.URI;\n-import java.net.URL;\n-import java.net.URLClassLoader;\n-import java.nio.file.FileSystem;\n-import java.nio.file.FileSystems;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.util.Collections;\n-import java.util.stream.Stream;\n-\n-\/**\n- * Basic jrt file system functionality testing\n- *\n- *\/\n-public class Main {\n-\n-    public static void main(String[] args) throws Exception {\n-        String javaHome = args[0];\n-        FileSystem fs = null;\n-        boolean isInstalled = false;\n-        if (args.length == 2) {\n-            fs = createFsByInstalledProvider();\n-            isInstalled = true;\n-        } else {\n-            fs = createFsWithURLClassloader(javaHome);\n-        }\n-\n-        Path mods = fs.getPath(\"\/modules\");\n-        try (Stream<Path> stream = Files.walk(mods)) {\n-            stream.forEach(path -> {\n-                path.getFileName();\n-            });\n-        } finally {\n-            try {\n-                fs.close();\n-            } catch (UnsupportedOperationException e) {\n-                if (!isInstalled) {\n-                    throw new RuntimeException(\n-                        \"UnsupportedOperationException is thrown unexpectedly\");\n-                }\n-            }\n-        }\n-    }\n-\n-    private static FileSystem createFsWithURLClassloader(String javaHome) throws IOException{\n-        URL url = Paths.get(javaHome, \"lib\", \"jrt-fs.jar\").toUri().toURL();\n-        URLClassLoader loader = new URLClassLoader(new URL[] { url });\n-        return FileSystems.newFileSystem(URI.create(\"jrt:\/\"),\n-                                                    Collections.emptyMap(),\n-                                                    loader);\n-    }\n-\n-    private static FileSystem createFsByInstalledProvider() throws IOException {\n-        return FileSystems.getFileSystem(URI.create(\"jrt:\/\"));\n-    }\n-}\n","filename":"test\/jdk\/jdk\/internal\/jrtfs\/remote\/Main.java","additions":0,"deletions":81,"binary":false,"changes":81,"status":"deleted"},{"patch":"@@ -1,119 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8141609 8154403\n- * @summary Verify JDK 8 can use jrt-fs.jar to work with jrt file system.\n- * @run main RemoteRuntimeImageTest\n- *\/\n-\n-import java.io.File;\n-import java.io.FileInputStream;\n-import java.io.FileNotFoundException;\n-import java.io.IOException;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.util.Arrays;\n-import java.util.List;\n-import java.util.Properties;\n-public class RemoteRuntimeImageTest {\n-    \/\/the jrt-fs.jar shipped together with jdk\n-    private static final String JRTFS_JAR = \"jrt-fs.jar\";\n-    private static final String SRC_DIR = System.getProperty(\"test.src\");\n-    private static final String CLASSES_DIR = \"classes\";\n-    private static final String TEST_JAVAHOME = System.getProperty(\"test.jdk\");\n-\n-    public static void main(String[] args) throws Exception {\n-        \/\/ By default, set to ${JT_JAVA}\n-        String jdk8Home = System.getenv(\"JDK8_HOME\");\n-        if (jdk8Home == null || jdk8Home.isEmpty()) {\n-            System.err.println(\"Failed to locate JDK8 with system \"\n-                + \"environment variable 'JDK8_HOME'. Skip testing!\");\n-            return;\n-        }\n-\n-        Path jdk8Path = Paths.get(jdk8Home);\n-        if (!isJdk8(jdk8Path)) {\n-            System.err.println(\"This test is only for JDK 8. Skip testing\");\n-            return;\n-        }\n-\n-        String java = jdk8Path.resolve(\"bin\/java\").toAbsolutePath().toString();\n-        String javac = jdk8Path.resolve(\"bin\/javac\").toAbsolutePath().toString();\n-        Files.createDirectories(Paths.get(\".\", CLASSES_DIR));\n-        String jrtJar = Paths.get(TEST_JAVAHOME, \"lib\", JRTFS_JAR).toAbsolutePath().toString();\n-\n-        \/\/ Compose command-lines for compiling and executing tests\n-        List<List<String>> cmds = Arrays.asList(\n-                \/\/ Commands to compile test classes\n-                Arrays.asList(javac, \"-d\", CLASSES_DIR, \"-cp\", jrtJar,\n-                        SRC_DIR + File.separatorChar + \"Main.java\"),\n-                \/\/ Run test\n-                Arrays.asList(java, \"-cp\", CLASSES_DIR, \"Main\", TEST_JAVAHOME),\n-                \/\/ Run test with jrtfs.jar in class path,\n-                \/\/ which means to install jrt FileSystem provider\n-                Arrays.asList(java, \"-cp\", CLASSES_DIR + File.pathSeparatorChar + jrtJar,\n-                        \"Main\", TEST_JAVAHOME, \"installed\")\n-                );\n-\n-        cmds.forEach(cmd -> execCmd(cmd));\n-    }\n-\n-    private static void execCmd(List<String> command){\n-        System.out.println();\n-        System.out.println(\"Executing command: \" + command);\n-        Process p = null;\n-        try {\n-            p = new ProcessBuilder(command).inheritIO().start();\n-            p.waitFor();\n-            int rc = p.exitValue();\n-            if (rc != 0) {\n-                throw new RuntimeException(\"Unexpected exit code:\" + rc);\n-            }\n-        } catch (IOException | InterruptedException e) {\n-            throw new RuntimeException(e);\n-        } finally {\n-            if (p != null && p.isAlive()){\n-                p.destroy();\n-            }\n-        }\n-    }\n-\n-    private static boolean isJdk8(Path jdk8HomePath) throws IOException {\n-        File releaseFile = jdk8HomePath.resolve(\"release\").toFile();\n-        if (!releaseFile.exists()) {\n-            throw new RuntimeException(releaseFile.getPath() +\n-                    \" doesn't exist\");\n-        }\n-        Properties props = new Properties();\n-        try (FileInputStream in = new FileInputStream(releaseFile)) {\n-            props.load(in);\n-        }\n-\n-        String version = props.getProperty(\"JAVA_VERSION\", \"\");\n-        System.out.println(\"JAVA_VERSION is \" + version);\n-        return version.startsWith(\"\\\"1.8\");\n-    }\n-}\n","filename":"test\/jdk\/jdk\/internal\/jrtfs\/remote\/RemoteRuntimeImageTest.java","additions":0,"deletions":119,"binary":false,"changes":119,"status":"deleted"}]}