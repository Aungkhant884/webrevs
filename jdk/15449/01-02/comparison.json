{"files":[{"patch":"@@ -737,1 +737,1 @@\n-              if (!wq.member(u) && !u->as_Proj()->is_uncommon_trap_proj(Deoptimization::Reason_none)) {\n+              if (!wq.member(u) && !u->as_Proj()->is_uncommon_trap_proj()) {\n@@ -746,1 +746,1 @@\n-        if (c->as_Proj()->is_uncommon_trap_if_pattern(Deoptimization::Reason_none) != nullptr) {\n+        if (c->as_Proj()->is_uncommon_trap_if_pattern() != nullptr) {\n@@ -1141,1 +1141,1 @@\n-            u->in(0)->as_Proj()->is_uncommon_trap_if_pattern(Deoptimization::Reason_none) &&\n+            u->in(0)->as_Proj()->is_uncommon_trap_if_pattern() &&\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahSupport.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -803,1 +803,1 @@\n-    call = proj_out(i)->is_uncommon_trap_proj(Deoptimization::Reason_none);\n+    call = proj_out(i)->is_uncommon_trap_proj();\n@@ -814,1 +814,1 @@\n-  CallStaticJavaNode* dom_unc = otherproj->is_uncommon_trap_proj(Deoptimization::Reason_none);\n+  CallStaticJavaNode* dom_unc = otherproj->is_uncommon_trap_proj();\n@@ -1079,2 +1079,2 @@\n-  CallStaticJavaNode* unc = success->is_uncommon_trap_proj(Deoptimization::Reason_none);\n-  CallStaticJavaNode* dom_unc = otherproj->is_uncommon_trap_proj(Deoptimization::Reason_none);\n+  CallStaticJavaNode* unc = success->is_uncommon_trap_proj();\n+  CallStaticJavaNode* dom_unc = otherproj->is_uncommon_trap_proj();\n@@ -1244,1 +1244,1 @@\n-  CallStaticJavaNode* unc = proj->is_uncommon_trap_if_pattern(Deoptimization::Reason_none);\n+  CallStaticJavaNode* unc = proj->is_uncommon_trap_if_pattern();\n@@ -1249,2 +1249,2 @@\n-      CallStaticJavaNode* unc = proj->is_uncommon_trap_if_pattern(Deoptimization::Reason_none);\n-      CallStaticJavaNode* dom_unc = proj->in(0)->in(0)->as_Proj()->is_uncommon_trap_if_pattern(Deoptimization::Reason_none);\n+      CallStaticJavaNode* unc = proj->is_uncommon_trap_if_pattern();\n+      CallStaticJavaNode* dom_unc = proj->in(0)->in(0)->as_Proj()->is_uncommon_trap_if_pattern();\n@@ -1281,1 +1281,1 @@\n-  CallStaticJavaNode* dom_unc = dom_proj->is_uncommon_trap_if_pattern(Deoptimization::Reason_none);\n+  CallStaticJavaNode* dom_unc = dom_proj->is_uncommon_trap_if_pattern();\n@@ -1283,1 +1283,1 @@\n-  CallStaticJavaNode* unc = proj->is_uncommon_trap_if_pattern(Deoptimization::Reason_none);\n+  CallStaticJavaNode* unc = proj->is_uncommon_trap_if_pattern();\n","filename":"src\/hotspot\/share\/opto\/ifnode.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -102,1 +102,1 @@\n-IfProjNode* PhaseIdealLoop::create_new_if_for_predicate(IfProjNode* cont_proj, Node* new_entry,\n+IfProjNode* PhaseIdealLoop::create_new_if_for_predicate(ParsePredicateSuccessProj* parse_predicate_proj, Node* new_entry,\n@@ -105,2 +105,2 @@\n-  assert(cont_proj->is_uncommon_trap_if_pattern(reason), \"must be a uct if pattern!\");\n-  IfNode* iff = cont_proj->in(0)->as_If();\n+  assert(parse_predicate_proj->is_uncommon_trap_if_pattern(reason), \"must be a uct if pattern!\");\n+  ParsePredicateNode* parse_predicate = parse_predicate_proj->in(0)->as_ParsePredicate();\n@@ -108,3 +108,3 @@\n-  ProjNode *uncommon_proj = iff->proj_out(1 - cont_proj->_con);\n-  Node     *rgn   = uncommon_proj->unique_ctrl_out();\n-  assert(rgn->is_Region() || rgn->is_Call(), \"must be a region or call uct\");\n+  ProjNode* uncommon_proj = parse_predicate->proj_out(false);\n+  Node* uct_region = uncommon_proj->unique_ctrl_out();\n+  assert(uct_region->is_Region() || uct_region->is_Call(), \"must be a region or call uct\");\n@@ -113,3 +113,3 @@\n-  if (!rgn->is_Region()) { \/\/ create a region to guard the call\n-    assert(rgn->is_Call(), \"must be call uct\");\n-    CallNode* call = rgn->as_Call();\n+  if (!uct_region->is_Region()) { \/\/ create a region to guard the call\n+    assert(uct_region->is_Call(), \"must be call uct\");\n+    CallNode* call = uct_region->as_Call();\n@@ -117,1 +117,1 @@\n-    rgn = new RegionNode(1);\n+    uct_region = new RegionNode(1);\n@@ -120,4 +120,4 @@\n-    register_control(uncommon_proj, loop, iff);\n-    rgn->add_req(uncommon_proj);\n-    register_control(rgn, loop, uncommon_proj);\n-    _igvn.replace_input_of(call, 0, rgn);\n+    register_control(uncommon_proj, loop, parse_predicate);\n+    uct_region->add_req(uncommon_proj);\n+    register_control(uct_region, loop, uncommon_proj);\n+    _igvn.replace_input_of(call, 0, uct_region);\n@@ -126,1 +126,1 @@\n-      set_idom(call, rgn, dom_depth(rgn));\n+      set_idom(call, uct_region, dom_depth(uct_region));\n@@ -130,1 +130,1 @@\n-    lazy_replace(uncommon_proj_orig, rgn);\n+    lazy_replace(uncommon_proj_orig, uct_region);\n@@ -133,3 +133,3 @@\n-    for (; proj_index < rgn->req(); proj_index++)\n-      if (rgn->in(proj_index) == uncommon_proj) break;\n-    assert(proj_index < rgn->req(), \"sanity\");\n+    for (; proj_index < uct_region->req(); proj_index++)\n+      if (uct_region->in(proj_index) == uncommon_proj) break;\n+    assert(proj_index < uct_region->req(), \"sanity\");\n@@ -138,1 +138,1 @@\n-  Node* entry = iff->in(0);\n+  Node* entry = parse_predicate->in(0);\n@@ -148,1 +148,1 @@\n-      new_iff = new IfNode(entry, iff->in(1), iff->_prob, iff->_fcnt);\n+      new_iff = new IfNode(entry, parse_predicate->in(1), parse_predicate->_prob, parse_predicate->_fcnt);\n@@ -151,1 +151,1 @@\n-      new_iff = new RangeCheckNode(entry, iff->in(1), iff->_prob, iff->_fcnt);\n+      new_iff = new RangeCheckNode(entry, parse_predicate->in(1), parse_predicate->_prob, parse_predicate->_fcnt);\n@@ -163,4 +163,0 @@\n-  if (cont_proj->is_IfFalse()) {\n-    \/\/ Swap\n-    IfProjNode* tmp = if_uct; if_uct = if_cont; if_cont = tmp;\n-  }\n@@ -168,1 +164,1 @@\n-  register_control(if_uct, get_loop(rgn), new_iff);\n+  register_control(if_uct, get_loop(uct_region), new_iff);\n@@ -170,1 +166,1 @@\n-  _igvn.add_input_to(rgn, if_uct);\n+  _igvn.add_input_to(uct_region, if_uct);\n@@ -174,1 +170,1 @@\n-  assert(rgn->in(rgn->req() -1) == if_uct, \"new edge should be last\");\n+  assert(uct_region->in(uct_region->req() - 1) == if_uct, \"new edge should be last\");\n@@ -176,2 +172,2 @@\n-  for (DUIterator_Fast imax, i = rgn->fast_outs(imax); i < imax; i++) {\n-    Node* use = rgn->fast_out(i);\n+  for (DUIterator_Fast imax, i = uct_region->fast_outs(imax); i < imax; i++) {\n+    Node* use = uct_region->fast_out(i);\n@@ -179,1 +175,1 @@\n-      assert(use->in(0) == rgn, \"\");\n+      assert(use->in(0) == uct_region, \"\");\n@@ -200,1 +196,1 @@\n-  assert(!has_phi || rgn->req() > 3, \"no phis when region is created\");\n+  assert(!has_phi || uct_region->req() > 3, \"no phis when region is created\");\n@@ -204,1 +200,1 @@\n-    _igvn.replace_input_of(iff, 0, if_cont);\n+    _igvn.replace_input_of(parse_predicate, 0, if_cont);\n@@ -206,1 +202,1 @@\n-      set_idom(iff, if_cont, dom_depth(iff));\n+      set_idom(parse_predicate, if_cont, dom_depth(parse_predicate));\n@@ -212,1 +208,1 @@\n-    Node* ridom = idom(rgn);\n+    Node* ridom = idom(uct_region);\n@@ -214,1 +210,1 @@\n-    set_idom(rgn, nrdom, dom_depth(rgn));\n+    set_idom(uct_region, nrdom, dom_depth(uct_region));\n@@ -306,1 +302,1 @@\n-IfProjNode* PhaseIdealLoop::clone_parse_predicate_to_unswitched_loop(ParsePredicateSuccessProj* predicate_proj,\n+IfProjNode* PhaseIdealLoop::clone_parse_predicate_to_unswitched_loop(ParsePredicateSuccessProj* parse_predicate_proj,\n@@ -310,1 +306,1 @@\n-  IfProjNode* new_predicate_proj = create_new_if_for_predicate(predicate_proj, new_entry, reason, Op_ParsePredicate,\n+  IfProjNode* new_predicate_proj = create_new_if_for_predicate(parse_predicate_proj, new_entry, reason, Op_ParsePredicate,\n@@ -322,3 +318,5 @@\n-                                                                   IfProjNode* old_predicate_proj, IfProjNode* iffast_pred,\n-                                                                   IfProjNode* ifslow_pred) {\n-  assert(iffast_pred->in(0)->is_If() && ifslow_pred->in(0)->is_If(), \"sanity check\");\n+                                                                   IfProjNode* old_predicate_proj,\n+                                                                   ParsePredicateSuccessProj* fast_loop_parse_predicate_proj,\n+                                                                   ParsePredicateSuccessProj* slow_loop_parse_predicate_proj) {\n+  assert(fast_loop_parse_predicate_proj->in(0)->is_ParsePredicate() &&\n+         slow_loop_parse_predicate_proj->in(0)->is_ParsePredicate(), \"sanity check\");\n@@ -343,1 +341,1 @@\n-    IfProjNode* fast_proj = clone_assertion_predicate_for_unswitched_loops(iff, predicate_proj, reason, iffast_pred);\n+    IfProjNode* fast_proj = clone_assertion_predicate_for_unswitched_loops(iff, predicate_proj, reason, fast_loop_parse_predicate_proj);\n@@ -345,1 +343,1 @@\n-    IfProjNode* slow_proj = clone_assertion_predicate_for_unswitched_loops(iff, predicate_proj, reason, ifslow_pred);\n+    IfProjNode* slow_proj = clone_assertion_predicate_for_unswitched_loops(iff, predicate_proj, reason, slow_loop_parse_predicate_proj);\n@@ -400,3 +398,3 @@\n-                                                                           IfProjNode* output_proj) {\n-  Node* bol = create_bool_from_template_assertion_predicate(iff, nullptr, nullptr, output_proj);\n-  IfProjNode* if_proj = create_new_if_for_predicate(output_proj, nullptr, reason, iff->Opcode(), false);\n+                                                                           ParsePredicateSuccessProj* parse_predicate_proj) {\n+  Node* bol = create_bool_from_template_assertion_predicate(iff, nullptr, nullptr, parse_predicate_proj);\n+  IfProjNode* if_proj = create_new_if_for_predicate(parse_predicate_proj, nullptr, reason, iff->Opcode(), false);\n@@ -404,2 +402,2 @@\n-  _igvn.replace_input_of(output_proj->in(0), 0, if_proj);\n-  set_idom(output_proj->in(0), if_proj, dom_depth(if_proj));\n+  _igvn.replace_input_of(parse_predicate_proj->in(0), 0, if_proj);\n+  set_idom(parse_predicate_proj->in(0), if_proj, dom_depth(if_proj));\n@@ -438,0 +436,2 @@\n+    \/\/ We currently only clone Assertion Predicates if there are Parse Predicates. This is not entirely correct and will\n+    \/\/ be changed with the complete fix for Assertion Predicates.\n@@ -439,0 +439,2 @@\n+    assert(iffast_pred->in(0)->is_ParsePredicate() && ifslow_pred->in(0)->is_ParsePredicate(),\n+           \"must be success projections of the cloned Parse Predicates\");\n@@ -440,1 +442,1 @@\n-                                                  iffast_pred, ifslow_pred);\n+                                                  iffast_pred->as_IfTrue(), ifslow_pred->as_IfTrue());\n@@ -1148,1 +1150,1 @@\n-                   in->as_Proj()->is_uncommon_trap_if_pattern(Deoptimization::Reason_none) &&\n+                   in->as_Proj()->is_uncommon_trap_if_pattern() &&\n@@ -1297,2 +1299,3 @@\n-                                                             IfProjNode* predicate_proj, IfProjNode* upper_bound_proj,\n-                                                             int scale, Node* offset, Node* init, Node* limit, jint stride,\n+                                                             ParsePredicateSuccessProj* parse_predicate_proj,\n+                                                             IfProjNode* upper_bound_proj, const int scale, Node* offset,\n+                                                             Node* init, Node* limit, const jint stride,\n@@ -1303,1 +1306,1 @@\n-  bool negate = (if_proj->_con != predicate_proj->_con);\n+  bool negate = (if_proj->_con != parse_predicate_proj->_con);\n@@ -1309,1 +1312,1 @@\n-  IfProjNode* new_proj = create_new_if_for_predicate(predicate_proj, nullptr, reason, overflow ? Op_If : iff->Opcode());\n+  IfProjNode* new_proj = create_new_if_for_predicate(parse_predicate_proj, nullptr, reason, overflow ? Op_If : iff->Opcode());\n@@ -1325,1 +1328,1 @@\n-  register_new_node(max_value, predicate_proj);\n+  register_new_node(max_value, parse_predicate_proj);\n@@ -1332,1 +1335,1 @@\n-  new_proj = create_new_if_for_predicate(predicate_proj, nullptr, reason, overflow ? Op_If : iff->Opcode());\n+  new_proj = create_new_if_for_predicate(parse_predicate_proj, nullptr, reason, overflow ? Op_If : iff->Opcode());\n@@ -1422,1 +1425,1 @@\n-      CallStaticJavaNode* call = if_proj->is_uncommon_trap_if_pattern(Deoptimization::Reason_none);\n+      CallStaticJavaNode* call = if_proj->is_uncommon_trap_if_pattern();\n@@ -1460,1 +1463,1 @@\n-      if (if_proj->as_Proj()->is_uncommon_trap_if_pattern(Deoptimization::Reason_none) &&\n+      if (if_proj->as_Proj()->is_uncommon_trap_if_pattern() &&\n","filename":"src\/hotspot\/share\/opto\/loopPredicate.cpp","additions":62,"deletions":59,"binary":false,"changes":121,"status":"modified"},{"patch":"@@ -180,1 +180,1 @@\n-      if (!ctl->in(1)->as_Proj()->is_uncommon_trap_if_pattern(Deoptimization::Reason_none)) {\n+      if (!ctl->in(1)->as_Proj()->is_uncommon_trap_if_pattern()) {\n@@ -194,1 +194,1 @@\n-        if (!ctl->as_Proj()->is_uncommon_trap_if_pattern(Deoptimization::Reason_none)) {\n+        if (!ctl->as_Proj()->is_uncommon_trap_if_pattern()) {\n@@ -1084,1 +1084,1 @@\n-      CallStaticJavaNode* call = if_proj->is_uncommon_trap_if_pattern(Deoptimization::Reason_none);\n+      CallStaticJavaNode* call = if_proj->is_uncommon_trap_if_pattern();\n@@ -6121,1 +6121,1 @@\n-      CallStaticJavaNode* call = new_ctrl->as_Proj()->is_uncommon_trap_if_pattern(Deoptimization::Reason_none);\n+      CallStaticJavaNode* call = new_ctrl->as_Proj()->is_uncommon_trap_if_pattern();\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1334,2 +1334,3 @@\n-  IfProjNode* create_new_if_for_predicate(IfProjNode* cont_proj, Node* new_entry, Deoptimization::DeoptReason reason,\n-                                          int opcode, bool rewire_uncommon_proj_phi_inputs = false);\n+  IfProjNode* create_new_if_for_predicate(ParsePredicateSuccessProj* parse_predicate_proj, Node* new_entry,\n+                                          Deoptimization::DeoptReason reason, int opcode,\n+                                          bool rewire_uncommon_proj_phi_inputs = false);\n@@ -1366,1 +1367,2 @@\n-  IfProjNode* add_template_assertion_predicate(IfNode* iff, IdealLoopTree* loop, IfProjNode* if_proj, IfProjNode* predicate_proj,\n+  IfProjNode* add_template_assertion_predicate(IfNode* iff, IdealLoopTree* loop, IfProjNode* if_proj,\n+                                               ParsePredicateSuccessProj* parse_predicate_proj,\n@@ -1636,1 +1638,1 @@\n-  IfProjNode* clone_parse_predicate_to_unswitched_loop(ParsePredicateSuccessProj* predicate_proj, Node* new_entry,\n+  IfProjNode* clone_parse_predicate_to_unswitched_loop(ParsePredicateSuccessProj* parse_predicate_proj, Node* new_entry,\n@@ -1640,1 +1642,2 @@\n-                                                     IfProjNode* iffast_pred, IfProjNode* ifslow_pred);\n+                                                     ParsePredicateSuccessProj* fast_loop_parse_predicate_proj,\n+                                                     ParsePredicateSuccessProj* slow_loop_parse_predicate_proj);\n@@ -1643,1 +1646,1 @@\n-                                                             IfProjNode* output_proj);\n+                                                             ParsePredicateSuccessProj* parse_predicate_proj);\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -540,1 +540,1 @@\n-      if (sfpt_ctl->is_Proj() && sfpt_ctl->as_Proj()->is_uncommon_trap_proj(Deoptimization::Reason_none)) {\n+      if (sfpt_ctl->is_Proj() && sfpt_ctl->as_Proj()->is_uncommon_trap_proj()) {\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -187,3 +187,3 @@\n-CallStaticJavaNode* ProjNode::is_uncommon_trap_proj(Deoptimization::DeoptReason reason) {\n-  int path_limit = 10;\n-  Node* out = this;\n+CallStaticJavaNode* ProjNode::is_uncommon_trap_proj(Deoptimization::DeoptReason reason) const {\n+  const int path_limit = 10;\n+  const Node* out = this;\n@@ -216,11 +216,5 @@\n-\/\/ null otherwise\n-\/\/ \"must_reason_predicate\" means the uct reason must be Reason_predicate\n-CallStaticJavaNode* ProjNode::is_uncommon_trap_if_pattern(Deoptimization::DeoptReason reason) {\n-  Node *in0 = in(0);\n-  if (!in0->is_If()) return nullptr;\n-  \/\/ Variation of a dead If node.\n-  if (in0->outcnt() < 2)  return nullptr;\n-  IfNode* iff = in0->as_If();\n-\n-  \/\/ we need a ParsePredicate node for predicate reasons\n-  if (reason != Deoptimization::Reason_none && !iff->is_ParsePredicate()) {\n+\/\/ or null otherwise.\n+CallStaticJavaNode* ProjNode::is_uncommon_trap_if_pattern(Deoptimization::DeoptReason reason) const {\n+  Node* iff = in(0);\n+  if (!iff->is_If() || iff->outcnt() < 2) {\n+    \/\/ Not a projection of an If or variation of a dead If node.\n@@ -229,8 +223,1 @@\n-\n-  ProjNode* other_proj = iff->proj_out(1-_con);\n-  CallStaticJavaNode* call = other_proj->is_uncommon_trap_proj(reason);\n-  if (call != nullptr) {\n-    assert(reason == Deoptimization::Reason_none || iff->is_ParsePredicate(), \"sanity check\");\n-    return call;\n-  }\n-  return nullptr;\n+  return other_if_proj()->is_uncommon_trap_proj(reason);\n","filename":"src\/hotspot\/share\/opto\/multnode.cpp","additions":9,"deletions":22,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-  CallStaticJavaNode* is_uncommon_trap_proj(Deoptimization::DeoptReason reason);\n+  CallStaticJavaNode* is_uncommon_trap_proj(Deoptimization::DeoptReason reason = Deoptimization::Reason_none) const;\n@@ -102,1 +102,1 @@\n-  CallStaticJavaNode* is_uncommon_trap_if_pattern(Deoptimization::DeoptReason reason);\n+  CallStaticJavaNode* is_uncommon_trap_if_pattern(Deoptimization::DeoptReason reason = Deoptimization::Reason_none) const;\n","filename":"src\/hotspot\/share\/opto\/multnode.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-    CallStaticJavaNode* uct_call = if_proj->is_uncommon_trap_if_pattern(Deoptimization::Reason_none);\n+    CallStaticJavaNode* uct_call = if_proj->is_uncommon_trap_if_pattern();\n","filename":"src\/hotspot\/share\/opto\/predicates.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}