{"files":[{"patch":"@@ -52,0 +52,1 @@\n+import java.util.concurrent.atomic.AtomicBoolean;\n@@ -512,12 +513,1 @@\n-    private volatile List<HotSpotVMEventListener> vmEventListeners;\n-\n-    private Iterable<HotSpotVMEventListener> getVmEventListeners() {\n-        if (vmEventListeners == null) {\n-            synchronized (this) {\n-                if (vmEventListeners == null) {\n-                    vmEventListeners = JVMCIServiceLocator.getProviders(HotSpotVMEventListener.class);\n-                }\n-            }\n-        }\n-        return vmEventListeners;\n-    }\n+    private final List<HotSpotVMEventListener> vmEventListeners;\n@@ -583,0 +573,2 @@\n+\n+        vmEventListeners = JVMCIServiceLocator.getProviders(HotSpotVMEventListener.class);\n@@ -941,1 +933,1 @@\n-     * Guard to ensure shut down actions are performed at most once.\n+     * Guard to ensure shut down actions are performed by at most one thread.\n@@ -943,1 +935,1 @@\n-    private boolean isShutdown;\n+    private final AtomicBoolean isShutdown = new AtomicBoolean();\n@@ -949,3 +941,2 @@\n-    private synchronized void shutdown() throws Exception {\n-        if (!isShutdown) {\n-            isShutdown = true;\n+    private void shutdown() throws Exception {\n+        if (isShutdown.compareAndSet(false, true)) {\n@@ -956,1 +947,1 @@\n-            for (HotSpotVMEventListener vmEventListener : getVmEventListeners()) {\n+            for (HotSpotVMEventListener vmEventListener : vmEventListeners) {\n@@ -967,1 +958,1 @@\n-        for (HotSpotVMEventListener vmEventListener : getVmEventListeners()) {\n+        for (HotSpotVMEventListener vmEventListener : vmEventListeners) {\n@@ -980,1 +971,1 @@\n-        for (HotSpotVMEventListener vmEventListener : getVmEventListeners()) {\n+        for (HotSpotVMEventListener vmEventListener : vmEventListeners) {\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotJVMCIRuntime.java","additions":11,"deletions":20,"binary":false,"changes":31,"status":"modified"}]}