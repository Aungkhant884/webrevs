{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -70,0 +70,7 @@\n+    \/**\n+     *  The attribute indicates {@code value} is in UTF16 but may be compressible.\n+     *  An inflated byte array becomes compressible only when those non-latin1 chars are deleted.\n+     *  Therefore, sett this attribute in all methods that delete chars.\n+     *\/\n+    boolean maybeLatin1 = false;\n+\n@@ -134,2 +141,3 @@\n-            if (seq instanceof AbstractStringBuilder) {\n-                initCoder = ((AbstractStringBuilder)seq).getCoder();\n+            if (seq instanceof AbstractStringBuilder asb) {\n+                initCoder = asb.getCoder();\n+                maybeLatin1 |= asb.maybeLatin1;\n@@ -321,0 +329,2 @@\n+        } else if (count > newLength) {\n+            maybeLatin1 = true;\n@@ -530,0 +540,1 @@\n+            maybeLatin1 = true;\n@@ -599,0 +610,1 @@\n+        maybeLatin1 |= asb.maybeLatin1;\n@@ -909,0 +921,1 @@\n+            maybeLatin1 = true;\n@@ -960,0 +973,1 @@\n+        maybeLatin1 = true;\n@@ -994,0 +1008,3 @@\n+        if (end - start > 0) {\n+            maybeLatin1 = true;\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/AbstractStringBuilder.java","additions":20,"deletions":3,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -4514,1 +4514,2 @@\n-            if (COMPACT_STRINGS) {\n+            \/\/ only try to compress val if some characters were deleted.\n+            if (COMPACT_STRINGS && asb.maybeLatin1) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -715,3 +715,1 @@\n-            return toStringCache =\n-                    isLatin1() ? StringLatin1.newString(value, 0, count)\n-                               : StringUTF16.newString(value, 0, count);\n+            return toStringCache = new String(this, null);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringBuffer.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -453,2 +453,1 @@\n-        return isLatin1() ? StringLatin1.newString(value, 0, count)\n-                          : StringUTF16.newString(value, 0, count);\n+        return new String(this);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringBuilder.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -370,0 +370,37 @@\n+    \/*\n+     * Tests for maybeLatin1 attribute\n+     *\/\n+    @Test\n+    public void testCompactStringForMaybeLatin1() {\n+      StringBuilder sb = new StringBuilder(\"A\\uDC01\");\n+\n+      sb.setLength(0);      \/\/ maybeLatin1 become true\n+      check(sb, \"\");\n+      check(new StringBuilder(sb).append('A'), \"A\");\n+      check(new StringBuilder().append(sb), \"\");\n+\n+      sb = new StringBuilder(\"A\\uDC01\");\n+      sb.setCharAt(1, 'B');   \/\/ maybeLatin1 become true\n+      check(sb, \"AB\");\n+      check(new StringBuilder(sb).append('A'), \"ABA\");\n+      check(new StringBuilder().append(sb), \"AB\");\n+\n+      sb = new StringBuilder(\"A\\uDC01\");\n+      sb.deleteCharAt(1);   \/\/ maybeLatin1 become true\n+      check(sb, \"A\");\n+      check(new StringBuilder(sb).append('B'), \"AB\");\n+      check(new StringBuilder().append(sb), \"A\");\n+\n+      sb = new StringBuilder(\"A\\uDC01\\uFF21\\uD801\");\n+      sb.delete(1, 4);\n+      check(sb, \"A\");      \/\/ maybeLatin1 become true\n+      check(new StringBuilder(sb).append('B'), \"AB\");\n+      check(new StringBuilder().append(sb), \"A\");\n+\n+      sb = new StringBuilder(\"A\\uDC01\\uFF21\\uD801\");\n+      sb.replace(1, 4, \"B\");\n+      check(sb, \"AB\");      \/\/ maybeLatin1 become true\n+      check(new StringBuilder(sb).append('A'), \"ABA\");\n+      check(new StringBuilder().append(sb), \"AB\");\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/StringBuilder\/CompactStringBuilder.java","additions":38,"deletions":1,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -208,0 +208,15 @@\n+    @Param({\"128\", \"256\", \"1024\"})\n+    public int MIXED_SIZE;\n+\n+    \/**\n+     * This microbench simulates how java.io.BufferedReader uses StringBuilder.\n+     *\/\n+    @Benchmark\n+    public String toStringWithMixedChars() {\n+        StringBuilder sb = new StringBuilder(MIXED_SIZE);\n+        for (int i = 0; i < MIXED_SIZE - 4; ++i) {\n+            sb.append('a');\n+        }\n+        sb.append('\\u3042'); \/\/ can't be encoded in latin-1,\n+        return sb.toString();\n+    }\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringBuilders.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"}]}