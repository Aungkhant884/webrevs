{"files":[{"patch":"@@ -73,1 +73,1 @@\n-     *  Therefore, sett this attribute in all methods that delete chars.\n+     *  Therefore, set this attribute in all methods that delete chars.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/AbstractStringBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 5, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n+@Fork(3)\n+public class StringBuilderToString {\n+    @Param({\"128\", \"256\", \"1024\"})\n+    public int MIXED_SIZE;\n+\n+    \/**\n+     * This microbench simulates how java.io.BufferedReader uses StringBuilder.\n+     *\/\n+    @Benchmark\n+    public String toStringWithMixedChars() {\n+        StringBuilder sb = new StringBuilder(MIXED_SIZE);\n+        for (int i = 0; i < MIXED_SIZE - 4; ++i) {\n+            sb.append('a');\n+        }\n+        sb.append('\\u3042'); \/\/ can't be encoded in latin-1,\n+        return sb.toString();\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringBuilderToString.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -208,15 +208,0 @@\n-    @Param({\"128\", \"256\", \"1024\"})\n-    public int MIXED_SIZE;\n-\n-    \/**\n-     * This microbench simulates how java.io.BufferedReader uses StringBuilder.\n-     *\/\n-    @Benchmark\n-    public String toStringWithMixedChars() {\n-        StringBuilder sb = new StringBuilder(MIXED_SIZE);\n-        for (int i = 0; i < MIXED_SIZE - 4; ++i) {\n-            sb.append('a');\n-        }\n-        sb.append('\\u3042'); \/\/ can't be encoded in latin-1,\n-        return sb.toString();\n-    }\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/StringBuilders.java","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"}]}