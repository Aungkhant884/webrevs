{"files":[{"patch":"@@ -1104,0 +1104,1 @@\n+  PostCallNopCounter nopCounter(this);\n@@ -1107,0 +1108,1 @@\n+  nopCounter.register_nop();\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1188,0 +1188,1 @@\n+  PostCallNopCounter nopCounter(this);\n@@ -1189,0 +1190,1 @@\n+  nopCounter.register_nop();\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2038,0 +2038,1 @@\n+  PostCallNopCounter nopCounter(this);\n@@ -2043,0 +2044,1 @@\n+  nopCounter.register_nop();\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -244,0 +244,14 @@\n+\n+  class PostCallNopCounter: public StackObj {\n+   private:\n+    AbstractAssembler* _assm;\n+    address _nop_start;\n+   public:\n+    PostCallNopCounter(AbstractAssembler* assm) : _assm(assm), _nop_start(assm->pc()) {\n+      assert(assm->inst_mark() == NULL, \"overlapping instructions\");\n+    }\n+    void register_nop() {\n+        _assm->count_post_call_nop(_assm->pc() - _nop_start);\n+    }\n+  };\n+  friend class PostCallNopCounter;\n@@ -336,0 +350,2 @@\n+  void   count_post_call_nop(int size) { code_section()->count_post_call_nop(size); }\n+\n@@ -340,0 +356,1 @@\n+\n","filename":"src\/hotspot\/share\/asm\/assembler.hpp","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -599,0 +599,11 @@\n+int CodeBuffer::total_post_call_nop_size() const {\n+  int total_nop_size = 0;\n+  for (int n = (int) SECT_FIRST; n < (int) SECT_LIMIT; n++) {\n+    const CodeSection* cur_cs = code_section(n);\n+    if (!cur_cs->is_empty()) {\n+      total_nop_size += cur_cs->_post_call_nop_size;\n+    }\n+  }\n+  return total_nop_size;\n+}\n+\n","filename":"src\/hotspot\/share\/asm\/codeBuffer.cpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -101,0 +101,1 @@\n+  int         _post_call_nop_size;\n@@ -117,0 +118,1 @@\n+    _post_call_nop_size = 0;\n@@ -147,0 +149,1 @@\n+    _post_call_nop_size = cs->_post_call_nop_size;\n@@ -207,0 +210,4 @@\n+  void count_post_call_nop(int size) {\n+      _post_call_nop_size += size;\n+  }\n+\n@@ -641,0 +648,2 @@\n+  int total_post_call_nop_size() const;\n+\n","filename":"src\/hotspot\/share\/asm\/codeBuffer.hpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -155,0 +155,1 @@\n+  _inline_instructions_size = -1;\n@@ -176,0 +177,1 @@\n+  _inline_instructions_size(-1),\n@@ -1134,0 +1136,15 @@\n+int ciMethod::inline_instructions_size() {\n+  if (_inline_instructions_size == -1) {\n+    GUARDED_VM_ENTRY(\n+                     CompiledMethod* code = get_Method()->code();\n+                     if (code != NULL && (code->comp_level() == CompLevel_full_optimization)) {\n+                       int isize = code->insts_end() - code->verified_entry_point() - code->post_call_nop_size();\n+                       _inline_instructions_size = isize > 0 ? isize : 0;\n+                     } else {\n+                       _inline_instructions_size = 0;\n+                     }\n+                     );\n+  }\n+  return _inline_instructions_size;\n+}\n+\n","filename":"src\/hotspot\/share\/ci\/ciMethod.cpp","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -86,0 +86,1 @@\n+  int _inline_instructions_size;\n@@ -319,0 +320,1 @@\n+  int inline_instructions_size();\n","filename":"src\/hotspot\/share\/ci\/ciMethod.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1533,0 +1533,1 @@\n+    m->_inline_instructions_size = -1;\n","filename":"src\/hotspot\/share\/ci\/ciReplay.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -284,0 +284,2 @@\n+  virtual int post_call_nop_size() const = 0;\n+\n","filename":"src\/hotspot\/share\/code\/compiledMethod.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -680,0 +680,1 @@\n+    _post_call_nop_size      = code_buffer->total_post_call_nop_size();\n@@ -816,0 +817,1 @@\n+    _post_call_nop_size      = code_buffer->total_post_call_nop_size();\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -263,0 +263,2 @@\n+  int _post_call_nop_size;\n+\n@@ -396,0 +398,2 @@\n+  int     post_call_nop_size    () const          { return           _post_call_nop_size                    ; }\n+\n","filename":"src\/hotspot\/share\/code\/nmethod.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -183,1 +183,1 @@\n-        callee_method->instructions_size() > inline_small_code_size) {\n+        callee_method->inline_instructions_size() > inline_small_code_size) {\n@@ -281,1 +281,1 @@\n-      callee_method->instructions_size() > InlineSmallCode) {\n+      callee_method->inline_instructions_size() > InlineSmallCode) {\n","filename":"src\/hotspot\/share\/opto\/bytecodeInfo.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}