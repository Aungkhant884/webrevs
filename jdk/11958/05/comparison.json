{"files":[{"patch":"@@ -1104,0 +1104,1 @@\n+  InlineSkippedInstructionsCounter skipCounter(this);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1188,0 +1188,1 @@\n+  InlineSkippedInstructionsCounter skipCounter(this);\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2038,0 +2038,1 @@\n+  InlineSkippedInstructionsCounter skipCounter(this);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -244,0 +244,13 @@\n+\n+  \/\/ count size of instructions which are skipped from inline heuristics\n+  class InlineSkippedInstructionsCounter: public StackObj {\n+   private:\n+    AbstractAssembler* _assm;\n+    address _start;\n+   public:\n+    InlineSkippedInstructionsCounter(AbstractAssembler* assm) : _assm(assm), _start(assm->pc()) {\n+    }\n+    ~InlineSkippedInstructionsCounter() {\n+      _assm->register_skipped(_assm->pc() - _start);\n+    }\n+  };\n@@ -336,0 +349,2 @@\n+  void   register_skipped(int size) { code_section()->register_skipped(size); }\n+\n@@ -340,0 +355,1 @@\n+\n","filename":"src\/hotspot\/share\/asm\/assembler.hpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -599,0 +599,11 @@\n+int CodeBuffer::total_skipped_instructions_size() const {\n+  int total_skipped_size = 0;\n+  for (int n = (int) SECT_FIRST; n < (int) SECT_LIMIT; n++) {\n+    const CodeSection* cur_cs = code_section(n);\n+    if (!cur_cs->is_empty()) {\n+      total_skipped_size += cur_cs->_skipped_instructions_size;\n+    }\n+  }\n+  return total_skipped_size;\n+}\n+\n","filename":"src\/hotspot\/share\/asm\/codeBuffer.cpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -101,0 +101,1 @@\n+  int         _skipped_instructions_size;\n@@ -117,0 +118,1 @@\n+    _skipped_instructions_size = 0;\n@@ -147,0 +149,1 @@\n+    _skipped_instructions_size = cs->_skipped_instructions_size;\n@@ -207,0 +210,4 @@\n+  void register_skipped(int size) {\n+    _skipped_instructions_size += size;\n+  }\n+\n@@ -641,0 +648,2 @@\n+  int total_skipped_instructions_size() const;\n+\n","filename":"src\/hotspot\/share\/asm\/codeBuffer.hpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -154,1 +154,1 @@\n-  _instructions_size = -1;\n+  _inline_instructions_size = -1;\n@@ -175,1 +175,1 @@\n-  _instructions_size(-1),\n+  _inline_instructions_size(-1),\n@@ -1090,1 +1090,1 @@\n-  return instructions_size() > 0;\n+  return inline_instructions_size() > 0;\n@@ -1113,1 +1113,1 @@\n-\/\/ ciMethod::instructions_size\n+\/\/ ciMethod::inline_instructions_size\n@@ -1120,2 +1120,4 @@\n-int ciMethod::instructions_size() {\n-  if (_instructions_size == -1) {\n+\/\/ Also some instructions inside the code are excluded from inline\n+\/\/ heuristic (e.g. post call nop instructions; see InlineSkippedInstructionsCounter)\n+int ciMethod::inline_instructions_size() {\n+  if (_inline_instructions_size == -1) {\n@@ -1123,7 +1125,8 @@\n-                     CompiledMethod* code = get_Method()->code();\n-                     if (code != NULL && (code->comp_level() == CompLevel_full_optimization)) {\n-                       _instructions_size = code->insts_end() - code->verified_entry_point();\n-                     } else {\n-                       _instructions_size = 0;\n-                     }\n-                     );\n+      CompiledMethod* code = get_Method()->code();\n+      if (code != NULL && (code->comp_level() == CompLevel_full_optimization)) {\n+        int isize = code->insts_end() - code->verified_entry_point() - code->skipped_instructions_size();\n+        _inline_instructions_size = isize > 0 ? isize : 0;\n+      } else {\n+        _inline_instructions_size = 0;\n+      }\n+    );\n@@ -1131,1 +1134,1 @@\n-  return _instructions_size;\n+  return _inline_instructions_size;\n@@ -1318,1 +1321,1 @@\n-               _instructions_size);\n+               _inline_instructions_size);\n","filename":"src\/hotspot\/share\/ci\/ciMethod.cpp","additions":18,"deletions":15,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-  int _instructions_size;\n+  int _inline_instructions_size;\n@@ -318,1 +318,2 @@\n-  int instructions_size();\n+\n+  int inline_instructions_size();\n","filename":"src\/hotspot\/share\/ci\/ciMethod.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1532,1 +1532,1 @@\n-    m->_instructions_size = -1;\n+    m->_inline_instructions_size = -1;\n","filename":"src\/hotspot\/share\/ci\/ciReplay.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -284,0 +284,2 @@\n+  virtual int skipped_instructions_size() const = 0;\n+\n","filename":"src\/hotspot\/share\/code\/compiledMethod.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -680,0 +680,1 @@\n+    _skipped_instructions_size = code_buffer->total_skipped_instructions_size();\n@@ -816,0 +817,1 @@\n+    _skipped_instructions_size      = code_buffer->total_skipped_instructions_size();\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -263,0 +263,2 @@\n+  int _skipped_instructions_size;\n+\n@@ -396,0 +398,3 @@\n+\n+  int skipped_instructions_size () const          { return           _skipped_instructions_size             ; }\n+\n","filename":"src\/hotspot\/share\/code\/nmethod.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -183,1 +183,1 @@\n-        callee_method->instructions_size() > inline_small_code_size) {\n+        callee_method->inline_instructions_size() > inline_small_code_size) {\n@@ -281,1 +281,1 @@\n-      callee_method->instructions_size() > InlineSmallCode) {\n+      callee_method->inline_instructions_size() > InlineSmallCode) {\n","filename":"src\/hotspot\/share\/opto\/bytecodeInfo.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -817,1 +817,1 @@\n-  nonstatic_field(ciMethod,                    _instructions_size,                            int)                                   \\\n+  nonstatic_field(ciMethod,                    _inline_instructions_size,                     int)                                   \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}