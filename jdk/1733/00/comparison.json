{"files":[{"patch":"@@ -498,0 +498,1 @@\n+  do_class(jdk_internal_misc_ScopedMemoryAccess,   \"jdk\/internal\/misc\/ScopedMemoryAccess\")                              \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1589,1 +1589,2 @@\n-        inv.klass() == vmSymbols::sun_misc_Unsafe()) {\n+        inv.klass() == vmSymbols::sun_misc_Unsafe() ||\n+        inv.klass() == vmSymbols::jdk_internal_misc_ScopedMemoryAccess()) {\n","filename":"src\/hotspot\/share\/oops\/methodData.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,118 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.jdk.incubator.foreign;\n+\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+import org.openjdk.jmh.annotations.Warmup;\n+import sun.misc.Unsafe;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n+import java.nio.FloatBuffer;\n+import java.util.concurrent.TimeUnit;\n+\n+import static jdk.incubator.foreign.MemoryLayouts.JAVA_INT;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@Warmup(iterations = 5, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@Measurement(iterations = 10, time = 500, timeUnit = TimeUnit.MILLISECONDS)\n+@State(org.openjdk.jmh.annotations.Scope.Thread)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@Fork(value = 3, jvmArgsAppend = { \"--add-modules=jdk.incubator.foreign\" })\n+public class LoopOverPollutedBuffer {\n+\n+    static final int ELEM_SIZE = 1_000_000;\n+    static final int CARRIER_SIZE = (int) JAVA_INT.byteSize();\n+    static final int ALLOC_SIZE = ELEM_SIZE * CARRIER_SIZE;\n+\n+    static final Unsafe unsafe = Utils.unsafe;\n+\n+    ByteBuffer dbb = ByteBuffer.allocateDirect(ALLOC_SIZE).order(ByteOrder.nativeOrder());\n+    byte[] arr = new byte[ALLOC_SIZE];\n+    ByteBuffer hbb = ByteBuffer.wrap(arr).order(ByteOrder.nativeOrder());\n+    FloatBuffer hfb = hbb.asFloatBuffer();\n+\n+\n+    @Setup\n+    public void setup() {\n+        for (int i = 0; i < ELEM_SIZE; i++) {\n+            dbb.putFloat(i * 4, i);\n+            hbb.putFloat(i * 4, i);\n+        }\n+        for (int i = 0; i < ELEM_SIZE; i++) {\n+            hfb.put(i, i);\n+        }\n+    }\n+\n+    @TearDown\n+    public void tearDown() {\n+        unsafe.invokeCleaner(dbb);\n+        arr = null;\n+        hbb = null;\n+        hfb = null;\n+    }\n+\n+    @Benchmark\n+    public int direct_byte_buffer_get_float() {\n+        int sum = 0;\n+        for (int k = 0; k < ELEM_SIZE; k++) {\n+            dbb.putFloat(k, (float)k + 1);\n+            float v = dbb.getFloat(k * 4);\n+            sum += (int)v;\n+        }\n+        return sum;\n+    }\n+\n+    @Benchmark\n+    public int heap_byte_buffer_get_int() {\n+        int sum = 0;\n+        for (int k = 0; k < ELEM_SIZE; k++) {\n+            hbb.putInt(k, k + 1);\n+            int v = hbb.getInt(k * 4);\n+            sum += v;\n+        }\n+        return sum;\n+    }\n+\n+    @Benchmark\n+    public int unsafe_get_float() {\n+        int sum = 0;\n+        for (int k = 0; k < ALLOC_SIZE; k += 4) {\n+            unsafe.putFloat(arr, k + Unsafe.ARRAY_BYTE_BASE_OFFSET, k + 1);\n+            float v = unsafe.getFloat(arr, k + Unsafe.ARRAY_BYTE_BASE_OFFSET);\n+            sum += (int)v;\n+        }\n+        return sum;\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/foreign\/LoopOverPollutedBuffer.java","additions":118,"deletions":0,"binary":false,"changes":118,"status":"added"}]}