{"files":[{"patch":"@@ -126,1 +126,1 @@\n-  const SegmentedArrayBuffer<mtGCCardSet>* first_array_buffer = G1SegmentedArray<Elem, mtGCCardSet>::first_array_buffer();\n+  const G1SegmentedArrayBuffer<mtGCCardSet>* first_array_buffer = G1SegmentedArray<Elem, mtGCCardSet>::first_array_buffer();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSetMemory.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-typedef SegmentedArrayBuffer<mtGCCardSet> G1CardSetBuffer;\n+typedef G1SegmentedArrayBuffer<mtGCCardSet> G1CardSetBuffer;\n@@ -60,1 +60,1 @@\n-typedef SegmentedArrayBufferList<mtGCCardSet> G1CardSetBufferList;\n+typedef G1SegmentedArrayBufferList<mtGCCardSet> G1CardSetBufferList;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSetMemory.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,2 +26,2 @@\n-#ifndef LINUX_X86_64_SERVER_SLOWDEBUG_G1SEGMENTEDARRAY_HPP\n-#define LINUX_X86_64_SERVER_SLOWDEBUG_G1SEGMENTEDARRAY_HPP\n+#ifndef SHARE_GC_G1_G1SEGMENTEDARRAY_HPP\n+#define SHARE_GC_G1_G1SEGMENTEDARRAY_HPP\n@@ -34,1 +34,1 @@\n-\/\/ SegmentedArrayBuffers can be linked together using a singly linked list.\n+\/\/ G1SegmentedArrayBuffers can be linked together using a singly linked list.\n@@ -36,1 +36,1 @@\n-class SegmentedArrayBuffer : public CHeapObj<flag> {\n+class G1SegmentedArrayBuffer : public CHeapObj<flag> {\n@@ -40,1 +40,1 @@\n-  SegmentedArrayBuffer* volatile _next;\n+  G1SegmentedArrayBuffer* volatile _next;\n@@ -50,2 +50,2 @@\n-  SegmentedArrayBuffer(uint elem_size, uint num_elems, SegmentedArrayBuffer* next);\n-  ~SegmentedArrayBuffer();\n+  G1SegmentedArrayBuffer(uint elem_size, uint num_elems, G1SegmentedArrayBuffer* next);\n+  ~G1SegmentedArrayBuffer();\n@@ -53,1 +53,1 @@\n-  SegmentedArrayBuffer* volatile* next_addr() { return &_next; }\n+  G1SegmentedArrayBuffer* volatile* next_addr() { return &_next; }\n@@ -59,1 +59,1 @@\n-  SegmentedArrayBuffer* next() const { return _next; }\n+  G1SegmentedArrayBuffer* next() const { return _next; }\n@@ -61,1 +61,1 @@\n-  void set_next(SegmentedArrayBuffer* next) {\n+  void set_next(G1SegmentedArrayBuffer* next) {\n@@ -66,1 +66,1 @@\n-  void reset(SegmentedArrayBuffer* next) {\n+  void reset(G1SegmentedArrayBuffer* next) {\n@@ -84,1 +84,1 @@\n-  char* start() const { return _buffer; }\n+  const char* start() const { return _buffer; }\n@@ -91,1 +91,1 @@\n-\/\/ Set of (free) SegmentedArrayBuffers. The assumed usage is that allocation\n+\/\/ Set of (free) G1SegmentedArrayBuffers. The assumed usage is that allocation\n@@ -96,2 +96,2 @@\n-class SegmentedArrayBufferList {\n-  static SegmentedArrayBuffer<flag>* volatile* next_ptr(SegmentedArrayBuffer<flag>& node) {\n+class G1SegmentedArrayBufferList {\n+  static G1SegmentedArrayBuffer<flag>* volatile* next_ptr(G1SegmentedArrayBuffer<flag>& node) {\n@@ -100,1 +100,1 @@\n-  typedef LockFreeStack<SegmentedArrayBuffer<flag>, &SegmentedArrayBufferList::next_ptr> NodeStack;\n+  typedef LockFreeStack<G1SegmentedArrayBuffer<flag>, &G1SegmentedArrayBufferList::next_ptr> NodeStack;\n@@ -108,2 +108,2 @@\n-  SegmentedArrayBufferList() : _list(), _num_buffers(0), _mem_size(0) { }\n-  ~SegmentedArrayBufferList() { free_all(); }\n+  G1SegmentedArrayBufferList() : _list(), _num_buffers(0), _mem_size(0) { }\n+  ~G1SegmentedArrayBufferList() { free_all(); }\n@@ -111,2 +111,2 @@\n-  void bulk_add(SegmentedArrayBuffer<flag>& first, SegmentedArrayBuffer<flag>& last, size_t num, size_t mem_size);\n-  void add(SegmentedArrayBuffer<flag>& elem) { _list.prepend(elem); }\n+  void bulk_add(G1SegmentedArrayBuffer<flag>& first, G1SegmentedArrayBuffer<flag>& last, size_t num, size_t mem_size);\n+  void add(G1SegmentedArrayBuffer<flag>& elem) { _list.prepend(elem); }\n@@ -114,2 +114,2 @@\n-  SegmentedArrayBuffer<flag>* get();\n-  SegmentedArrayBuffer<flag>* get_all(size_t& num_buffers, size_t& mem_size);\n+  G1SegmentedArrayBuffer<flag>* get();\n+  G1SegmentedArrayBuffer<flag>* get_all(size_t& num_buffers, size_t& mem_size);\n@@ -127,1 +127,1 @@\n-\/\/ Configuration for G1SegmentedArray, e.g element size, element number of next SegmentedArrayBuffer.\n+\/\/ Configuration for G1SegmentedArray, e.g element size, element number of next G1SegmentedArrayBuffer.\n@@ -163,2 +163,2 @@\n-\/\/ A segmented array where SegmentedArrayBuffer is the segment, and\n-\/\/ SegmentedArrayBufferList is the free list to cache SegmentedArrayBuffer,\n+\/\/ A segmented array where G1SegmentedArrayBuffer is the segment, and\n+\/\/ G1SegmentedArrayBufferList is the free list to cache G1SegmentedArrayBuffer,\n@@ -176,2 +176,2 @@\n-  SegmentedArrayBuffer<flag>* volatile _first;       \/\/ The (start of the) list of all buffers.\n-  SegmentedArrayBuffer<flag>* _last;                 \/\/ The last element of the list of all buffers.\n+  G1SegmentedArrayBuffer<flag>* volatile _first;       \/\/ The (start of the) list of all buffers.\n+  G1SegmentedArrayBuffer<flag>* _last;                 \/\/ The last element of the list of all buffers.\n@@ -181,1 +181,1 @@\n-  SegmentedArrayBufferList<flag>* _free_buffer_list; \/\/ The global free buffer list to\n+  G1SegmentedArrayBufferList<flag>* _free_buffer_list; \/\/ The global free buffer list to\n@@ -185,1 +185,1 @@\n-  inline SegmentedArrayBuffer<flag>* create_new_buffer(SegmentedArrayBuffer<flag>* const prev);\n+  inline G1SegmentedArrayBuffer<flag>* create_new_buffer(G1SegmentedArrayBuffer<flag>* const prev);\n@@ -190,1 +190,1 @@\n-  const SegmentedArrayBuffer<flag>* first_array_buffer() const { return _first; }\n+  const G1SegmentedArrayBuffer<flag>* first_array_buffer() const { return _first; }\n@@ -196,1 +196,1 @@\n-                   SegmentedArrayBufferList<flag>* free_buffer_list);\n+                   G1SegmentedArrayBufferList<flag>* free_buffer_list);\n@@ -216,1 +216,1 @@\n-#endif \/\/LINUX_X86_64_SERVER_SLOWDEBUG_G1SEGMENTEDARRAY_HPP\n+#endif \/\/SHARE_GC_G1_G1SEGMENTEDARRAY_HPP\n","filename":"src\/hotspot\/share\/gc\/g1\/g1SegmentedArray.hpp","additions":32,"deletions":32,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -26,0 +26,3 @@\n+#ifndef SHARE_GC_G1_G1SEGMENTEDARRAY_INLINE_HPP\n+#define SHARE_GC_G1_G1SEGMENTEDARRAY_INLINE_HPP\n+\n@@ -32,1 +35,1 @@\n-\/\/ ==== SegmentedArrayBuffer ====\n+\/\/ ==== G1SegmentedArrayBuffer ====\n@@ -35,1 +38,1 @@\n-SegmentedArrayBuffer<flag>::SegmentedArrayBuffer(uint elem_size, uint num_instances, SegmentedArrayBuffer* next) :\n+G1SegmentedArrayBuffer<flag>::G1SegmentedArrayBuffer(uint elem_size, uint num_instances, G1SegmentedArrayBuffer* next) :\n@@ -42,1 +45,1 @@\n-SegmentedArrayBuffer<flag>::~SegmentedArrayBuffer() {\n+G1SegmentedArrayBuffer<flag>::~G1SegmentedArrayBuffer() {\n@@ -47,1 +50,1 @@\n-void* SegmentedArrayBuffer<flag>::get_new_buffer_elem() {\n+void* G1SegmentedArrayBuffer<flag>::get_new_buffer_elem() {\n@@ -60,1 +63,1 @@\n-\/\/ ==== SegmentedArrayBufferList ====\n+\/\/ ==== G1SegmentedArrayBufferList ====\n@@ -63,4 +66,4 @@\n-void SegmentedArrayBufferList<flag>::bulk_add(SegmentedArrayBuffer<flag>& first,\n-                                              SegmentedArrayBuffer<flag>& last,\n-                                              size_t num,\n-                                              size_t mem_size) {\n+void G1SegmentedArrayBufferList<flag>::bulk_add(G1SegmentedArrayBuffer<flag>& first,\n+                                                G1SegmentedArrayBuffer<flag>& last,\n+                                                size_t num,\n+                                                size_t mem_size) {\n@@ -73,1 +76,1 @@\n-void SegmentedArrayBufferList<flag>::print_on(outputStream* out, const char* prefix) {\n+void G1SegmentedArrayBufferList<flag>::print_on(outputStream* out, const char* prefix) {\n@@ -79,1 +82,1 @@\n-SegmentedArrayBuffer<flag>* SegmentedArrayBufferList<flag>::get() {\n+G1SegmentedArrayBuffer<flag>* G1SegmentedArrayBufferList<flag>::get() {\n@@ -82,1 +85,1 @@\n-  SegmentedArrayBuffer<flag>* result = _list.pop();\n+  G1SegmentedArrayBuffer<flag>* result = _list.pop();\n@@ -91,2 +94,2 @@\n-SegmentedArrayBuffer<flag>* SegmentedArrayBufferList<flag>::get_all(size_t& num_buffers,\n-                                                                    size_t& mem_size) {\n+G1SegmentedArrayBuffer<flag>* G1SegmentedArrayBufferList<flag>::get_all(size_t& num_buffers,\n+                                                                        size_t& mem_size) {\n@@ -95,1 +98,1 @@\n-  SegmentedArrayBuffer<flag>* result = _list.pop_all();\n+  G1SegmentedArrayBuffer<flag>* result = _list.pop_all();\n@@ -107,1 +110,1 @@\n-void SegmentedArrayBufferList<flag>::free_all() {\n+void G1SegmentedArrayBufferList<flag>::free_all() {\n@@ -110,1 +113,1 @@\n-  SegmentedArrayBuffer<flag>* cur;\n+  G1SegmentedArrayBuffer<flag>* cur;\n@@ -126,2 +129,2 @@\n-SegmentedArrayBuffer<flag>* G1SegmentedArray<Elem, flag>::create_new_buffer(\n-  SegmentedArrayBuffer<flag>* const prev) {\n+G1SegmentedArrayBuffer<flag>* G1SegmentedArray<Elem, flag>::create_new_buffer(\n+  G1SegmentedArrayBuffer<flag>* const prev) {\n@@ -130,1 +133,1 @@\n-  SegmentedArrayBuffer<flag>* next = _free_buffer_list->get();\n+  G1SegmentedArrayBuffer<flag>* next = _free_buffer_list->get();\n@@ -134,1 +137,1 @@\n-    next = new SegmentedArrayBuffer<flag>(elem_size(), num_elems, prev);\n+    next = new G1SegmentedArrayBuffer<flag>(elem_size(), num_elems, prev);\n@@ -142,1 +145,1 @@\n-  SegmentedArrayBuffer<flag>* old = Atomic::cmpxchg(&_first, prev, next);\n+  G1SegmentedArrayBuffer<flag>* old = Atomic::cmpxchg(&_first, prev, next);\n@@ -167,2 +170,2 @@\n-                 const G1SegmentedArrayAllocOptions& buffer_options,\n-                 SegmentedArrayBufferList<flag>* free_buffer_list) :\n+                                               const G1SegmentedArrayAllocOptions& buffer_options,\n+                                               G1SegmentedArrayBufferList<flag>* free_buffer_list) :\n@@ -182,1 +185,1 @@\n-  SegmentedArrayBuffer<flag>* cur = Atomic::load_acquire(&_first);\n+  G1SegmentedArrayBuffer<flag>* cur = Atomic::load_acquire(&_first);\n@@ -187,1 +190,1 @@\n-    SegmentedArrayBuffer<flag>* first = cur;\n+    G1SegmentedArrayBuffer<flag>* first = cur;\n@@ -190,1 +193,1 @@\n-    SegmentedArrayBuffer<flag>* last = cur;\n+    G1SegmentedArrayBuffer<flag>* last = cur;\n@@ -197,1 +200,1 @@\n-      SegmentedArrayBuffer<flag>* next = cur->next();\n+      G1SegmentedArrayBuffer<flag>* next = cur->next();\n@@ -219,1 +222,1 @@\n-  SegmentedArrayBuffer<flag>* cur = Atomic::load_acquire(&_first);\n+  G1SegmentedArrayBuffer<flag>* cur = Atomic::load_acquire(&_first);\n@@ -247,1 +250,1 @@\n-  void visit(SegmentedArrayBuffer<mtGC>* node, uint32_t limit) {\n+  void visit(G1SegmentedArrayBuffer<mtGC>* node, uint32_t limit) {\n@@ -265,1 +268,1 @@\n-  SegmentedArrayBuffer<flag>* cur = Atomic::load_acquire(&_first);\n+  G1SegmentedArrayBuffer<flag>* cur = Atomic::load_acquire(&_first);\n@@ -278,0 +281,2 @@\n+\n+#endif \/\/SHARE_GC_G1_G1SEGMENTEDARRAY_INLINE_HPP\n","filename":"src\/hotspot\/share\/gc\/g1\/g1SegmentedArray.inline.hpp","additions":36,"deletions":31,"binary":false,"changes":67,"status":"modified"}]}