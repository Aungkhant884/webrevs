{"files":[{"patch":"@@ -68,0 +68,2 @@\n+  init_card_set_alloc_options();\n+\n@@ -92,0 +94,2 @@\n+  init_card_set_alloc_options();\n+\n@@ -95,0 +99,12 @@\n+G1CardSetConfiguration::~G1CardSetConfiguration() {\n+  FREE_C_HEAP_ARRAY(size_t, _card_set_alloc_options);\n+}\n+\n+void G1CardSetConfiguration::init_card_set_alloc_options() {\n+  _card_set_alloc_options = NEW_C_HEAP_ARRAY(G1CardSetAllocOptions, num_mem_object_types(), mtGC);\n+  new (&_card_set_alloc_options[0]) G1CardSetAllocOptions((uint)CardSetHash::get_node_size());\n+  new (&_card_set_alloc_options[1]) G1CardSetAllocOptions((uint)G1CardSetArray::size_in_bytes(_num_cards_in_array), 2, 256);\n+  new (&_card_set_alloc_options[2]) G1CardSetAllocOptions((uint)G1CardSetBitMap::size_in_bytes(_num_cards_in_howl_bitmap), 2, 256);\n+  new (&_card_set_alloc_options[3]) G1CardSetAllocOptions((uint)G1CardSetHowl::size_in_bytes(_num_buckets_in_howl), 2, 256);\n+}\n+\n@@ -115,9 +131,2 @@\n-G1CardSetAllocOptions* G1CardSetConfiguration::mem_object_alloc_options() {\n-  G1CardSetAllocOptions* result = NEW_C_HEAP_ARRAY(G1CardSetAllocOptions, num_mem_object_types(), mtGC);\n-\n-  result[0] = { (uint)CardSetHash::get_node_size() };\n-  result[1] = { (uint)G1CardSetArray::size_in_bytes(num_cards_in_array()), 2, 256 };\n-  result[2] = { (uint)G1CardSetBitMap::size_in_bytes(num_cards_in_howl_bitmap()), 2, 256 };\n-  result[3] = { (uint)G1CardSetHowl::size_in_bytes(num_buckets_in_howl()), 2, 256 };\n-\n-  return result;\n+const G1CardSetAllocOptions* G1CardSetConfiguration::mem_object_alloc_options(uint idx) {\n+  return &_card_set_alloc_options[idx];\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSet.cpp","additions":18,"deletions":9,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -62,0 +62,4 @@\n+  G1CardSetAllocOptions* _card_set_alloc_options;\n+\n+  void init_card_set_alloc_options();\n+\n@@ -75,0 +79,2 @@\n+  ~G1CardSetConfiguration();\n+\n@@ -112,1 +118,1 @@\n-  G1CardSetAllocOptions* mem_object_alloc_options();\n+  const G1CardSetAllocOptions* mem_object_alloc_options(uint idx);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSet.hpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-                                             const G1CardSetAllocOptions& buffer_options,\n+                                             const G1CardSetAllocOptions* buffer_options,\n@@ -312,1 +312,0 @@\n-  G1CardSetAllocOptions* alloc_options = _config->mem_object_alloc_options();\n@@ -315,1 +314,1 @@\n-                                                                 alloc_options[i],\n+                                                                 _config->mem_object_alloc_options(i),\n@@ -318,1 +317,0 @@\n-  FREE_C_HEAP_ARRAY(size_t, alloc_options);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSetMemory.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-\n@@ -43,0 +42,3 @@\n+  uint exponential_expand(uint prev_num_elems) const {\n+    return clamp(prev_num_elems * 2, _initial_num_elems, _max_num_elems);\n+  }\n@@ -51,1 +53,1 @@\n-  uint next_num_elems(uint prev_num_elems) {\n+  virtual uint next_num_elems(uint prev_num_elems) const override {\n@@ -54,2 +56,0 @@\n-\n-  uint elem_size () const {return _elem_size;}\n@@ -111,1 +111,1 @@\n-                     const G1CardSetAllocOptions& buffer_options,\n+                     const G1CardSetAllocOptions* buffer_options,\n@@ -126,2 +126,1 @@\n-      _segmented_array.num_buffers() * sizeof(G1CardSetBuffer)\n-            + _segmented_array.num_available_nodes() * _segmented_array.elem_size();\n+      _segmented_array.num_buffers() * sizeof(G1CardSetBuffer) + _segmented_array.num_available_nodes() * _segmented_array.elem_size();\n@@ -131,3 +130,1 @@\n-    return (_segmented_array.num_available_nodes()\n-              - (_segmented_array.num_allocated_nodes() - _num_pending_nodes))\n-                * _segmented_array.elem_size();\n+    return (_segmented_array.num_available_nodes() - (_segmented_array.num_allocated_nodes() - _num_pending_nodes)) * _segmented_array.elem_size();\n@@ -135,0 +132,1 @@\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSetMemory.hpp","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-\n@@ -77,7 +76,0 @@\n-  uint length() {\n-    \/\/ _next_allocate might grow greater than _num_elems in multi-thread env,\n-    \/\/ so, here we need to return the adjusted real length value.\n-    _next_allocate = _next_allocate > _num_elems ? _num_elems : _next_allocate;\n-    return _next_allocate;\n-  }\n-\n@@ -87,2 +79,0 @@\n-\n-\n@@ -124,1 +114,0 @@\n-\n@@ -127,0 +116,1 @@\n+\n@@ -134,3 +124,0 @@\n-  uint exponential_expand(uint prev_num_elems) {\n-    return clamp(prev_num_elems * 2, _initial_num_elems, _max_num_elems);\n-  }\n@@ -150,1 +137,1 @@\n-  uint next_num_elems(uint prev_num_elems) {\n+  virtual uint next_num_elems(uint prev_num_elems) const {\n@@ -159,1 +146,0 @@\n-\n@@ -192,1 +178,1 @@\n-  G1SegmentedArrayAllocOptions _alloc_options;\n+  const G1SegmentedArrayAllocOptions* _alloc_options;\n@@ -196,2 +182,2 @@\n-  volatile uint _num_buffers;             \/\/ Number of assigned buffers to this allocator.\n-  volatile size_t _mem_size;              \/\/ Memory used by all buffers.\n+  volatile uint _num_buffers;                          \/\/ Number of assigned buffers to this allocator.\n+  volatile size_t _mem_size;                           \/\/ Memory used by all buffers.\n@@ -209,3 +195,5 @@\n-  uint num_available_nodes() const { return _num_available_nodes; }\n-  uint num_allocated_nodes() const { return _num_allocated_nodes; }\n-  const G1SegmentedArrayBuffer<flag>* first_array_buffer() const { return _first; }\n+  const G1SegmentedArrayBuffer<flag>* first_array_buffer() const { return Atomic::load(&_first); }\n+\n+  uint num_available_nodes() const { return Atomic::load(&_num_available_nodes); }\n+  uint num_allocated_nodes() const { return Atomic::load(&_num_allocated_nodes); }\n+\n@@ -215,1 +203,1 @@\n-                   const G1SegmentedArrayAllocOptions& buffer_options,\n+                   const G1SegmentedArrayAllocOptions* buffer_options,\n","filename":"src\/hotspot\/share\/gc\/g1\/g1SegmentedArray.hpp","additions":11,"deletions":23,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-\n@@ -59,1 +58,0 @@\n-\n@@ -120,1 +118,0 @@\n-\n@@ -123,1 +120,0 @@\n-\n@@ -128,1 +124,1 @@\n-    uint num_elems = _alloc_options.next_num_elems(prev_num_elems);\n+    uint num_elems = _alloc_options->next_num_elems(prev_num_elems);\n@@ -157,1 +153,1 @@\n-  return _alloc_options.elem_size();\n+  return _alloc_options->elem_size();\n@@ -162,1 +158,1 @@\n-                                               const G1SegmentedArrayAllocOptions& buffer_options,\n+                                               const G1SegmentedArrayAllocOptions* buffer_options,\n@@ -226,2 +222,2 @@\n-      guarantee(is_aligned(elem, _alloc_options.alignment()),\n-                \"result \" PTR_FORMAT \" not aligned at %u\", p2i(elem), _alloc_options.alignment());\n+      guarantee(is_aligned(elem, _alloc_options->alignment()),\n+                \"result \" PTR_FORMAT \" not aligned at %u\", p2i(elem), _alloc_options->alignment());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1SegmentedArray.inline.hpp","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"}]}