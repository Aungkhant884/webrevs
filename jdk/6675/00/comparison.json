{"files":[{"patch":"@@ -407,0 +407,6 @@\n+\n+  \/\/ Convert \"x + x\" into \"x << 1\"\n+  if (in1 == in2) {\n+    return new LShiftINode(in1, phase->intcon(1));\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8278114\n+ * @summary New addnode ideal optimization: converting \"x + x\" into \"x << 1\"\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:-TieredCompilation\n+ *                   -XX:CompileCommand=dontinline,compiler.c2.TestAddSameNumberIdeal::test*\n+ *                   compiler.c2.TestAddSameNumberIdeal\n+ *\/\n+package compiler.c2;\n+\n+import jdk.test.lib.Asserts;\n+\n+public class TestAddSameNumberIdeal {\n+\n+    public static int test1(int x) {\n+        return x + x;\n+    }\n+\n+    public static void main(String... args) {\n+        for (int i = 0; i < 50_000; i++) {\n+            Asserts.assertTrue(test1(10) == 20);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestAddSameNumberIdeal.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.CompilerControl;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+\/**\n+ * Tests transformations in AddINode::Ideal.\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.MICROSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 5, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(value = 3 , jvmArgsAppend = {\"-XX:-TieredCompilation\", \"-Xbatch\", \"-Xcomp\"})\n+public class AddIdeal {\n+\n+    private final int size = 100_000;\n+\n+    private int[] ints_a;\n+\n+    @Setup\n+    public void init() {\n+        ints_a = new int[size];\n+        for (int i = 0; i < size; i++) {\n+            ints_a[i] = i;\n+        }\n+    }\n+\n+    @Benchmark\n+    public void baseline() {\n+        for (int i = 0; i < size; i++) {\n+            sink(ints_a[i]);\n+        }\n+    }\n+\n+    @Benchmark\n+    public void test() {\n+        for (int i = 0; i < size; i++) {\n+            sink(helper(ints_a[i]));\n+        }\n+    }\n+\n+    \/\/ Convert \"x + x\" into \"x << 1\".\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    private static int helper(int x) {\n+        return x + x;\n+    }\n+\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    private static void sink(int v) {\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/AddIdeal.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"}]}