{"files":[{"patch":"@@ -97,2 +97,3 @@\n-Sometimes, an `@IR` rule should only be applied if a certain CPU feature is present. This can be done with\n-the attributes `applyIfCPUFeatureXXX` in [@IR](.\/IR.java) which follow the same logic as the `applyIfXXX` methods for flags in the previous section. If a `@Test` annotated method has multiple preconditions (for example `applyIf` and `applyIfCPUFeature`), they are evaluated as a logical conjunction. An example with `applyIfCPUFeatureXXX` can be found in [TestCPUFeatureCheck](..\/..\/..\/testlibrary_tests\/ir_framework\/tests\/TestCPUFeatureCheck.java) (internal framework test).\n+Sometimes, an `@IR` rule should only be applied if a certain CPU feature is present. This can be done with the attributes `applyIfCPUFeatureXXX` in [@IR](.\/IR.java) which follow the same logic as the `applyIfXXX` methods for flags in the previous section. An example with `applyIfCPUFeatureXXX` can be found in [TestCPUFeatureCheck](..\/..\/..\/testlibrary_tests\/ir_framework\/tests\/TestCPUFeatureCheck.java) (internal framework test).\n+\n+If a `@Test` annotated method has multiple preconditions (for example `applyIf` and `applyIfCPUFeature`), they are evaluated as a logical conjunction. It's worth noting that flags in `applyIf` are checked only if the cpu features in `applyIfCPUFeature` are matched when they are both specified. This can avoid the vm option being evaluated on hardware that does not support it. An example with both `applyIfCPUFeatureXXX` and `applyIfXXX` can be found in [TestPreconditions](..\/..\/..\/testlibrary_tests\/ir_framework\/tests\/TestPreconditions.java) (internal framework test).\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/README.md","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -135,0 +135,9 @@\n+        } else if (irAnno.applyIfCPUFeature().length != 0 && !hasAllRequiredCPUFeature(irAnno.applyIfCPUFeature())) {\n+            printDisableReason(m, \"Feature constraint not met (applyIfCPUFeature)\", irAnno.applyIfCPUFeature(), ruleIndex, ruleMax);\n+            return false;\n+        } else if (irAnno.applyIfCPUFeatureAnd().length != 0 && !hasAllRequiredCPUFeature(irAnno.applyIfCPUFeatureAnd())) {\n+            printDisableReason(m, \"Not all feature constraints are met (applyIfCPUFeatureAnd)\", irAnno.applyIfCPUFeatureAnd(), ruleIndex, ruleMax);\n+            return false;\n+        } else if (irAnno.applyIfCPUFeatureOr().length != 0 && !hasAnyRequiredCPUFeature(irAnno.applyIfCPUFeatureOr())) {\n+            printDisableReason(m, \"None of the feature constraints met (applyIfCPUFeatureOr)\", irAnno.applyIfCPUFeatureOr(), ruleIndex, ruleMax);\n+            return false;\n@@ -147,9 +156,0 @@\n-        } else if (irAnno.applyIfCPUFeature().length != 0 && !hasAllRequiredCPUFeature(irAnno.applyIfCPUFeature())) {\n-            printDisableReason(m, \"Feature constraint not met (applyIfCPUFeature)\", irAnno.applyIfCPUFeature(), ruleIndex, ruleMax);\n-            return false;\n-        } else if (irAnno.applyIfCPUFeatureAnd().length != 0 && !hasAllRequiredCPUFeature(irAnno.applyIfCPUFeatureAnd())) {\n-            printDisableReason(m, \"Not all feature constraints are met (applyIfCPUFeatureAnd)\", irAnno.applyIfCPUFeatureAnd(), ruleIndex, ruleMax);\n-            return false;\n-        } else if (irAnno.applyIfCPUFeatureOr().length != 0 && !hasAnyRequiredCPUFeature(irAnno.applyIfCPUFeatureOr())) {\n-            printDisableReason(m, \"None of the feature constraints met (applyIfCPUFeatureOr)\", irAnno.applyIfCPUFeatureOr(), ruleIndex, ruleMax);\n-            return false;\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/test\/IREncodingPrinter.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Arm Limited. All rights reserved.\n+ * Copyright (c) 2022, 2023, Arm Limited. All rights reserved.\n@@ -167,1 +167,1 @@\n-    @IR(failOn = IRNode.AND_V, applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    @IR(failOn = IRNode.AND_V, applyIfCPUFeature = {\"asimd\", \"true\"}, applyIf = {\"UseSVE\", \"0\"})\n@@ -188,1 +188,1 @@\n-    @IR(failOn = IRNode.AND_V, applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    @IR(failOn = IRNode.AND_V, applyIfCPUFeature = {\"asimd\", \"true\"}, applyIf = {\"UseSVE\", \"0\"})\n@@ -305,1 +305,2 @@\n-    @IR(counts = {IRNode.AND_V, \"1\"}, applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx512\", \"true\"})\n+    @IR(counts = {IRNode.AND_V, \"1\"}, applyIfCPUFeature = {\"sve\", \"true\"}, applyIf = {\"UseSVE\", \"> 0\"})\n+    @IR(counts = {IRNode.AND_V, \"1\"}, applyIfCPUFeature = {\"avx512\", \"true\"})\n@@ -326,1 +327,2 @@\n-    @IR(counts = {IRNode.AND_V, \"1\"}, applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx512\", \"true\"})\n+    @IR(counts = {IRNode.AND_V, \"1\"}, applyIfCPUFeature = {\"sve\", \"true\"}, applyIf = {\"UseSVE\", \"> 0\"})\n+    @IR(counts = {IRNode.AND_V, \"1\"}, applyIfCPUFeature = {\"avx512\", \"true\"})\n@@ -347,1 +349,2 @@\n-    @IR(counts = {IRNode.AND_V, \"1\"}, applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx512\", \"true\"})\n+    @IR(counts = {IRNode.AND_V, \"1\"}, applyIfCPUFeature = {\"sve\", \"true\"}, applyIf = {\"UseSVE\", \"> 0\"})\n+    @IR(counts = {IRNode.AND_V, \"1\"}, applyIfCPUFeature = {\"avx512\", \"true\"})\n@@ -412,1 +415,1 @@\n-    @IR(failOn = IRNode.OR_V, applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    @IR(failOn = IRNode.OR_V, applyIfCPUFeature = {\"asimd\", \"true\"}, applyIf = {\"UseSVE\", \"0\"})\n@@ -471,1 +474,1 @@\n-    @IR(failOn = IRNode.OR_V, applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    @IR(failOn = IRNode.OR_V, applyIfCPUFeature = {\"asimd\", \"true\"}, applyIf = {\"UseSVE\", \"0\"})\n@@ -569,1 +572,2 @@\n-    @IR(counts = {IRNode.OR_V, \"1\"}, applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx512\", \"true\"})\n+    @IR(counts = {IRNode.OR_V, \"1\"}, applyIfCPUFeature = {\"sve\", \"true\"}, applyIf = {\"UseSVE\", \"> 0\"})\n+    @IR(counts = {IRNode.OR_V, \"1\"}, applyIfCPUFeature = {\"avx512\", \"true\"})\n@@ -590,1 +594,2 @@\n-    @IR(counts = {IRNode.OR_V, \"1\"}, applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx512\", \"true\"})\n+    @IR(counts = {IRNode.OR_V, \"1\"}, applyIfCPUFeature = {\"sve\", \"true\"}, applyIf = {\"UseSVE\", \"> 0\"})\n+    @IR(counts = {IRNode.OR_V, \"1\"}, applyIfCPUFeature = {\"avx512\", \"true\"})\n@@ -611,1 +616,2 @@\n-    @IR(counts = {IRNode.OR_V, \"1\"}, applyIfCPUFeatureOr = {\"sve\", \"true\", \"avx512\", \"true\"})\n+    @IR(counts = {IRNode.OR_V, \"1\"}, applyIfCPUFeature = {\"sve\", \"true\"}, applyIf = {\"UseSVE\", \"> 0\"})\n+    @IR(counts = {IRNode.OR_V, \"1\"}, applyIfCPUFeature = {\"avx512\", \"true\"})\n@@ -650,1 +656,1 @@\n-    @IR(failOn = IRNode.XOR_V, applyIfCPUFeatureAnd = {\"asimd\", \"true\", \"sve\", \"false\"})\n+    @IR(failOn = IRNode.XOR_V, applyIfCPUFeature = {\"asimd\", \"true\"}, applyIf = {\"UseSVE\", \"0\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorLogicalOpIdentityTest.java","additions":18,"deletions":12,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-    public static void testApplyBoth() {}\n+    public static void testApplyBoth1() {}\n@@ -61,0 +61,21 @@\n+    \/\/ The IR check should not be applied on aarch64, because the \"applyIfAnd\"\n+    \/\/ condition returns false as the VM is run with LoopMaxUnroll=8.\n+    \/\/ Note that precondition `applyIfCPUFeature` will be evaluated first with\n+    \/\/ early return. Hence the IR check should not be applied on non-aarch64\n+    \/\/ systems, and no exception happens.\n+    @Test\n+    @IR(applyIfCPUFeature = {\"asimd\", \"true\"},\n+        applyIfAnd = {\"UseSVE\", \"= 0\", \"LoopMaxUnroll\", \"= 0\"},\n+        counts = {IRNode.LOOP, \">= 1000\"})\n+    public static void testApplyBoth2() {}\n+\n+    \/\/ The IR check should not be applied on x86, because the \"applyIfAnd\"\n+    \/\/ condition returns false as the VM is run with LoopMaxUnroll=8.\n+    \/\/ Note that precondition `applyIfCPUFeature` will be evaluated first with\n+    \/\/ early return. Hence the IR check should not be applied on non avx systems,\n+    \/\/ and no exception happens.\n+    @Test\n+    @IR(applyIfCPUFeature = {\"avx\", \"true\"},\n+        applyIfAnd = {\"UseAVX\", \"= 2\", \"LoopMaxUnroll\", \"= 0\"},\n+        counts = {IRNode.LOOP, \">= 1000\"})\n+    public static void testApplyBoth3() {}\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestPreconditions.java","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"}]}