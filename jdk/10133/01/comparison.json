{"files":[{"patch":"@@ -1030,51 +1030,1 @@\n-#ifdef _LP64\n- private:\n-  \/\/ Initialized in macroAssembler_x86_constants.cpp\n-  static address ONE;\n-  static address ONEHALF;\n-  static address SIGN_MASK;\n-  static address TWO_POW_55;\n-  static address TWO_POW_M55;\n-  static address SHIFTER;\n-  static address ZERO;\n-  static address NEG_ZERO;\n-  static address PI32INV;\n-  static address PI_INV_TABLE;\n-  static address Ctable;\n-  static address SC_1;\n-  static address SC_2;\n-  static address SC_3;\n-  static address SC_4;\n-  static address PI_4;\n-  static address P_1;\n-  static address P_3;\n-  static address P_2;\n-\n- public:\n-  void fast_log(XMMRegister xmm0, XMMRegister xmm1, XMMRegister xmm2, XMMRegister xmm3,\n-                XMMRegister xmm4, XMMRegister xmm5, XMMRegister xmm6, XMMRegister xmm7,\n-                Register rax, Register rcx, Register rdx, Register tmp1, Register tmp2);\n-\n-  void fast_log10(XMMRegister xmm0, XMMRegister xmm1, XMMRegister xmm2, XMMRegister xmm3,\n-                  XMMRegister xmm4, XMMRegister xmm5, XMMRegister xmm6, XMMRegister xmm7,\n-                  Register rax, Register rcx, Register rdx, Register r11, Register tmp);\n-\n-  void fast_pow(XMMRegister xmm0, XMMRegister xmm1, XMMRegister xmm2, XMMRegister xmm3, XMMRegister xmm4,\n-                XMMRegister xmm5, XMMRegister xmm6, XMMRegister xmm7, Register rax, Register rcx,\n-                Register rdx, Register tmp1, Register tmp2, Register tmp3, Register tmp4);\n-\n-  void fast_sin(XMMRegister xmm0, XMMRegister xmm1, XMMRegister xmm2, XMMRegister xmm3,\n-                XMMRegister xmm4, XMMRegister xmm5, XMMRegister xmm6, XMMRegister xmm7,\n-                Register rax, Register rbx, Register rcx, Register rdx, Register tmp1);\n-\n-  void fast_cos(XMMRegister xmm0, XMMRegister xmm1, XMMRegister xmm2, XMMRegister xmm3,\n-                XMMRegister xmm4, XMMRegister xmm5, XMMRegister xmm6, XMMRegister xmm7,\n-                Register rax, Register rcx, Register rdx, Register r8,\n-                Register  r9, Register r10, Register r11, Register tmp);\n-\n-  void fast_tan(XMMRegister xmm0, XMMRegister xmm1, XMMRegister xmm2, XMMRegister xmm3,\n-                XMMRegister xmm4, XMMRegister xmm5, XMMRegister xmm6, XMMRegister xmm7,\n-                Register rax, Register rcx, Register rdx, Register r8,\n-                Register  r9, Register r10, Register r11, Register tmp);\n-\n-#else\n+#ifndef _LP64\n@@ -1124,1 +1074,1 @@\n-#endif\n+#endif \/\/ !_LP64\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":2,"deletions":52,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"macroAssembler_x86.hpp\"\n+\n+ATTRIBUTE_ALIGNED(16) juint _ONES[] = {\n+    0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0xbff00000UL\n+};\n+address MacroAssembler::ONES = (address)_ONES;\n+\n+ATTRIBUTE_ALIGNED(16) juint _PI4_INV[] = {\n+    0x6dc9c883UL, 0x3ff45f30UL\n+};\n+address MacroAssembler::PI4_INV = (address)_PI4_INV;\n+\n+ATTRIBUTE_ALIGNED(16) juint _PI4X3[] = {\n+    0x54443000UL, 0xbfe921fbUL, 0x3b39a000UL, 0x3d373dcbUL, 0xe0e68948UL,\n+    0xba845c06UL\n+};\n+address MacroAssembler::PI4X3 = (address)_PI4X3;\n+\n+ATTRIBUTE_ALIGNED(16) juint _PI4X4[] = {\n+    0x54400000UL, 0xbfe921fbUL, 0x1a600000UL, 0xbdc0b461UL, 0x2e000000UL,\n+    0xbb93198aUL, 0x252049c1UL, 0xb96b839aUL\n+};\n+address MacroAssembler::PI4X4 = (address)_PI4X4;\n+\n+ATTRIBUTE_ALIGNED(16) juint _L_2IL0FLOATPACKET_0[] = {\n+    0xffffffffUL, 0x7fffffffUL, 0x00000000UL, 0x00000000UL\n+};\n+address MacroAssembler::L_2IL0FLOATPACKET_0 = (address)_L_2IL0FLOATPACKET_0;\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86_32_constants.cpp","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"@@ -0,0 +1,428 @@\n+\/*\n+* Copyright (c) 2016, 2021, Intel Corporation. All rights reserved.\n+* Intel Math Library (LIBM) Source Code\n+*\n+* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+*\n+* This code is free software; you can redistribute it and\/or modify it\n+* under the terms of the GNU General Public License version 2 only, as\n+* published by the Free Software Foundation.\n+*\n+* This code is distributed in the hope that it will be useful, but WITHOUT\n+* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+* version 2 for more details (a copy is included in the LICENSE file that\n+* accompanied this code).\n+*\n+* You should have received a copy of the GNU General Public License version\n+* 2 along with this work; if not, write to the Free Software Foundation,\n+* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+*\n+* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+* or visit www.oracle.com if you need additional information or have any\n+* questions.\n+*\n+*\/\n+\n+#include \"precompiled.hpp\"\n+#include \"asm\/assembler.hpp\"\n+#include \"asm\/assembler.inline.hpp\"\n+#include \"macroAssembler_x86.hpp\"\n+#include \"runtime\/stubRoutines.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n+\n+\/******************************************************************************\/\n+\/\/                     ALGORITHM DESCRIPTION - COS()\n+\/\/                     ---------------------\n+\/\/\n+\/\/     1. RANGE REDUCTION\n+\/\/\n+\/\/     We perform an initial range reduction from X to r with\n+\/\/\n+\/\/          X =~= N * pi\/32 + r\n+\/\/\n+\/\/     so that |r| <= pi\/64 + epsilon. We restrict inputs to those\n+\/\/     where |N| <= 932560. Beyond this, the range reduction is\n+\/\/     insufficiently accurate. For extremely small inputs,\n+\/\/     denormalization can occur internally, impacting performance.\n+\/\/     This means that the main path is actually only taken for\n+\/\/     2^-252 <= |X| < 90112.\n+\/\/\n+\/\/     To avoid branches, we perform the range reduction to full\n+\/\/     accuracy each time.\n+\/\/\n+\/\/          X - N * (P_1 + P_2 + P_3)\n+\/\/\n+\/\/     where P_1 and P_2 are 32-bit numbers (so multiplication by N\n+\/\/     is exact) and P_3 is a 53-bit number. Together, these\n+\/\/     approximate pi well enough for all cases in the restricted\n+\/\/     range.\n+\/\/\n+\/\/     The main reduction sequence is:\n+\/\/\n+\/\/             y = 32\/pi * x\n+\/\/             N = integer(y)\n+\/\/     (computed by adding and subtracting off SHIFTER)\n+\/\/\n+\/\/             m_1 = N * P_1\n+\/\/             m_2 = N * P_2\n+\/\/             r_1 = x - m_1\n+\/\/             r = r_1 - m_2\n+\/\/     (this r can be used for most of the calculation)\n+\/\/\n+\/\/             c_1 = r_1 - r\n+\/\/             m_3 = N * P_3\n+\/\/             c_2 = c_1 - m_2\n+\/\/             c = c_2 - m_3\n+\/\/\n+\/\/     2. MAIN ALGORITHM\n+\/\/\n+\/\/     The algorithm uses a table lookup based on B = M * pi \/ 32\n+\/\/     where M = N mod 64. The stored values are:\n+\/\/       sigma             closest power of 2 to cos(B)\n+\/\/       C_hl              53-bit cos(B) - sigma\n+\/\/       S_hi + S_lo       2 * 53-bit sin(B)\n+\/\/\n+\/\/     The computation is organized as follows:\n+\/\/\n+\/\/          sin(B + r + c) = [sin(B) + sigma * r] +\n+\/\/                           r * (cos(B) - sigma) +\n+\/\/                           sin(B) * [cos(r + c) - 1] +\n+\/\/                           cos(B) * [sin(r + c) - r]\n+\/\/\n+\/\/     which is approximately:\n+\/\/\n+\/\/          [S_hi + sigma * r] +\n+\/\/          C_hl * r +\n+\/\/          S_lo + S_hi * [(cos(r) - 1) - r * c] +\n+\/\/          (C_hl + sigma) * [(sin(r) - r) + c]\n+\/\/\n+\/\/     and this is what is actually computed. We separate this sum\n+\/\/     into four parts:\n+\/\/\n+\/\/          hi + med + pols + corr\n+\/\/\n+\/\/     where\n+\/\/\n+\/\/          hi       = S_hi + sigma r\n+\/\/          med      = C_hl * r\n+\/\/          pols     = S_hi * (cos(r) - 1) + (C_hl + sigma) * (sin(r) - r)\n+\/\/          corr     = S_lo + c * ((C_hl + sigma) - S_hi * r)\n+\/\/\n+\/\/     3. POLYNOMIAL\n+\/\/\n+\/\/     The polynomial S_hi * (cos(r) - 1) + (C_hl + sigma) *\n+\/\/     (sin(r) - r) can be rearranged freely, since it is quite\n+\/\/     small, so we exploit parallelism to the fullest.\n+\/\/\n+\/\/          psc4       =   SC_4 * r_1\n+\/\/          msc4       =   psc4 * r\n+\/\/          r2         =   r * r\n+\/\/          msc2       =   SC_2 * r2\n+\/\/          r4         =   r2 * r2\n+\/\/          psc3       =   SC_3 + msc4\n+\/\/          psc1       =   SC_1 + msc2\n+\/\/          msc3       =   r4 * psc3\n+\/\/          sincospols =   psc1 + msc3\n+\/\/          pols       =   sincospols *\n+\/\/                         <S_hi * r^2 | (C_hl + sigma) * r^3>\n+\/\/\n+\/\/     4. CORRECTION TERM\n+\/\/\n+\/\/     This is where the \"c\" component of the range reduction is\n+\/\/     taken into account; recall that just \"r\" is used for most of\n+\/\/     the calculation.\n+\/\/\n+\/\/          -c   = m_3 - c_2\n+\/\/          -d   = S_hi * r - (C_hl + sigma)\n+\/\/          corr = -c * -d + S_lo\n+\/\/\n+\/\/     5. COMPENSATED SUMMATIONS\n+\/\/\n+\/\/     The two successive compensated summations add up the high\n+\/\/     and medium parts, leaving just the low parts to add up at\n+\/\/     the end.\n+\/\/\n+\/\/          rs        =  sigma * r\n+\/\/          res_int   =  S_hi + rs\n+\/\/          k_0       =  S_hi - res_int\n+\/\/          k_2       =  k_0 + rs\n+\/\/          med       =  C_hl * r\n+\/\/          res_hi    =  res_int + med\n+\/\/          k_1       =  res_int - res_hi\n+\/\/          k_3       =  k_1 + med\n+\/\/\n+\/\/     6. FINAL SUMMATION\n+\/\/\n+\/\/     We now add up all the small parts:\n+\/\/\n+\/\/          res_lo = pols(hi) + pols(lo) + corr + k_1 + k_3\n+\/\/\n+\/\/     Now the overall result is just:\n+\/\/\n+\/\/          res_hi + res_lo\n+\/\/\n+\/\/     7. SMALL ARGUMENTS\n+\/\/\n+\/\/     Inputs with |X| < 2^-252 are treated specially as\n+\/\/     1 - |x|.\n+\/\/\n+\/\/ Special cases:\n+\/\/  cos(NaN) = quiet NaN, and raise invalid exception\n+\/\/  cos(INF) = NaN and raise invalid exception\n+\/\/  cos(0) = 1\n+\/\/\n+\/******************************************************************************\/\n+\n+\/\/ The 32 bit code is at most SSE2 compliant\n+\n+ATTRIBUTE_ALIGNED(16) juint _static_const_table_cos[] =\n+{\n+    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x00000000UL, 0x3ff00000UL, 0x176d6d31UL, 0xbf73b92eUL,\n+    0xbc29b42cUL, 0x3fb917a6UL, 0xe0000000UL, 0xbc3e2718UL, 0x00000000UL,\n+    0x3ff00000UL, 0x011469fbUL, 0xbf93ad06UL, 0x3c69a60bUL, 0x3fc8f8b8UL,\n+    0xc0000000UL, 0xbc626d19UL, 0x00000000UL, 0x3ff00000UL, 0x939d225aUL,\n+    0xbfa60beaUL, 0x2ed59f06UL, 0x3fd29406UL, 0xa0000000UL, 0xbc75d28dUL,\n+    0x00000000UL, 0x3ff00000UL, 0x866b95cfUL, 0xbfb37ca1UL, 0xa6aea963UL,\n+    0x3fd87de2UL, 0xe0000000UL, 0xbc672cedUL, 0x00000000UL, 0x3ff00000UL,\n+    0x73fa1279UL, 0xbfbe3a68UL, 0x3806f63bUL, 0x3fde2b5dUL, 0x20000000UL,\n+    0x3c5e0d89UL, 0x00000000UL, 0x3ff00000UL, 0x5bc57974UL, 0xbfc59267UL,\n+    0x39ae68c8UL, 0x3fe1c73bUL, 0x20000000UL, 0x3c8b25ddUL, 0x00000000UL,\n+    0x3ff00000UL, 0x53aba2fdUL, 0xbfcd0dfeUL, 0x25091dd6UL, 0x3fe44cf3UL,\n+    0x20000000UL, 0x3c68076aUL, 0x00000000UL, 0x3ff00000UL, 0x99fcef32UL,\n+    0x3fca8279UL, 0x667f3bcdUL, 0x3fe6a09eUL, 0x20000000UL, 0xbc8bdd34UL,\n+    0x00000000UL, 0x3fe00000UL, 0x94247758UL, 0x3fc133ccUL, 0x6b151741UL,\n+    0x3fe8bc80UL, 0x20000000UL, 0xbc82c5e1UL, 0x00000000UL, 0x3fe00000UL,\n+    0x9ae68c87UL, 0x3fac73b3UL, 0x290ea1a3UL, 0x3fea9b66UL, 0xe0000000UL,\n+    0x3c39f630UL, 0x00000000UL, 0x3fe00000UL, 0x7f909c4eUL, 0xbf9d4a2cUL,\n+    0xf180bdb1UL, 0x3fec38b2UL, 0x80000000UL, 0xbc76e0b1UL, 0x00000000UL,\n+    0x3fe00000UL, 0x65455a75UL, 0xbfbe0875UL, 0xcf328d46UL, 0x3fed906bUL,\n+    0x20000000UL, 0x3c7457e6UL, 0x00000000UL, 0x3fe00000UL, 0x76acf82dUL,\n+    0x3fa4a031UL, 0x56c62ddaUL, 0x3fee9f41UL, 0xe0000000UL, 0x3c8760b1UL,\n+    0x00000000UL, 0x3fd00000UL, 0x0e5967d5UL, 0xbfac1d1fUL, 0xcff75cb0UL,\n+    0x3fef6297UL, 0x20000000UL, 0x3c756217UL, 0x00000000UL, 0x3fd00000UL,\n+    0x0f592f50UL, 0xbf9ba165UL, 0xa3d12526UL, 0x3fefd88dUL, 0x40000000UL,\n+    0xbc887df6UL, 0x00000000UL, 0x3fc00000UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x0f592f50UL, 0x3f9ba165UL, 0xa3d12526UL, 0x3fefd88dUL,\n+    0x40000000UL, 0xbc887df6UL, 0x00000000UL, 0xbfc00000UL, 0x0e5967d5UL,\n+    0x3fac1d1fUL, 0xcff75cb0UL, 0x3fef6297UL, 0x20000000UL, 0x3c756217UL,\n+    0x00000000UL, 0xbfd00000UL, 0x76acf82dUL, 0xbfa4a031UL, 0x56c62ddaUL,\n+    0x3fee9f41UL, 0xe0000000UL, 0x3c8760b1UL, 0x00000000UL, 0xbfd00000UL,\n+    0x65455a75UL, 0x3fbe0875UL, 0xcf328d46UL, 0x3fed906bUL, 0x20000000UL,\n+    0x3c7457e6UL, 0x00000000UL, 0xbfe00000UL, 0x7f909c4eUL, 0x3f9d4a2cUL,\n+    0xf180bdb1UL, 0x3fec38b2UL, 0x80000000UL, 0xbc76e0b1UL, 0x00000000UL,\n+    0xbfe00000UL, 0x9ae68c87UL, 0xbfac73b3UL, 0x290ea1a3UL, 0x3fea9b66UL,\n+    0xe0000000UL, 0x3c39f630UL, 0x00000000UL, 0xbfe00000UL, 0x94247758UL,\n+    0xbfc133ccUL, 0x6b151741UL, 0x3fe8bc80UL, 0x20000000UL, 0xbc82c5e1UL,\n+    0x00000000UL, 0xbfe00000UL, 0x99fcef32UL, 0xbfca8279UL, 0x667f3bcdUL,\n+    0x3fe6a09eUL, 0x20000000UL, 0xbc8bdd34UL, 0x00000000UL, 0xbfe00000UL,\n+    0x53aba2fdUL, 0x3fcd0dfeUL, 0x25091dd6UL, 0x3fe44cf3UL, 0x20000000UL,\n+    0x3c68076aUL, 0x00000000UL, 0xbff00000UL, 0x5bc57974UL, 0x3fc59267UL,\n+    0x39ae68c8UL, 0x3fe1c73bUL, 0x20000000UL, 0x3c8b25ddUL, 0x00000000UL,\n+    0xbff00000UL, 0x73fa1279UL, 0x3fbe3a68UL, 0x3806f63bUL, 0x3fde2b5dUL,\n+    0x20000000UL, 0x3c5e0d89UL, 0x00000000UL, 0xbff00000UL, 0x866b95cfUL,\n+    0x3fb37ca1UL, 0xa6aea963UL, 0x3fd87de2UL, 0xe0000000UL, 0xbc672cedUL,\n+    0x00000000UL, 0xbff00000UL, 0x939d225aUL, 0x3fa60beaUL, 0x2ed59f06UL,\n+    0x3fd29406UL, 0xa0000000UL, 0xbc75d28dUL, 0x00000000UL, 0xbff00000UL,\n+    0x011469fbUL, 0x3f93ad06UL, 0x3c69a60bUL, 0x3fc8f8b8UL, 0xc0000000UL,\n+    0xbc626d19UL, 0x00000000UL, 0xbff00000UL, 0x176d6d31UL, 0x3f73b92eUL,\n+    0xbc29b42cUL, 0x3fb917a6UL, 0xe0000000UL, 0xbc3e2718UL, 0x00000000UL,\n+    0xbff00000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x00000000UL, 0x00000000UL, 0xbff00000UL, 0x176d6d31UL,\n+    0x3f73b92eUL, 0xbc29b42cUL, 0xbfb917a6UL, 0xe0000000UL, 0x3c3e2718UL,\n+    0x00000000UL, 0xbff00000UL, 0x011469fbUL, 0x3f93ad06UL, 0x3c69a60bUL,\n+    0xbfc8f8b8UL, 0xc0000000UL, 0x3c626d19UL, 0x00000000UL, 0xbff00000UL,\n+    0x939d225aUL, 0x3fa60beaUL, 0x2ed59f06UL, 0xbfd29406UL, 0xa0000000UL,\n+    0x3c75d28dUL, 0x00000000UL, 0xbff00000UL, 0x866b95cfUL, 0x3fb37ca1UL,\n+    0xa6aea963UL, 0xbfd87de2UL, 0xe0000000UL, 0x3c672cedUL, 0x00000000UL,\n+    0xbff00000UL, 0x73fa1279UL, 0x3fbe3a68UL, 0x3806f63bUL, 0xbfde2b5dUL,\n+    0x20000000UL, 0xbc5e0d89UL, 0x00000000UL, 0xbff00000UL, 0x5bc57974UL,\n+    0x3fc59267UL, 0x39ae68c8UL, 0xbfe1c73bUL, 0x20000000UL, 0xbc8b25ddUL,\n+    0x00000000UL, 0xbff00000UL, 0x53aba2fdUL, 0x3fcd0dfeUL, 0x25091dd6UL,\n+    0xbfe44cf3UL, 0x20000000UL, 0xbc68076aUL, 0x00000000UL, 0xbff00000UL,\n+    0x99fcef32UL, 0xbfca8279UL, 0x667f3bcdUL, 0xbfe6a09eUL, 0x20000000UL,\n+    0x3c8bdd34UL, 0x00000000UL, 0xbfe00000UL, 0x94247758UL, 0xbfc133ccUL,\n+    0x6b151741UL, 0xbfe8bc80UL, 0x20000000UL, 0x3c82c5e1UL, 0x00000000UL,\n+    0xbfe00000UL, 0x9ae68c87UL, 0xbfac73b3UL, 0x290ea1a3UL, 0xbfea9b66UL,\n+    0xe0000000UL, 0xbc39f630UL, 0x00000000UL, 0xbfe00000UL, 0x7f909c4eUL,\n+    0x3f9d4a2cUL, 0xf180bdb1UL, 0xbfec38b2UL, 0x80000000UL, 0x3c76e0b1UL,\n+    0x00000000UL, 0xbfe00000UL, 0x65455a75UL, 0x3fbe0875UL, 0xcf328d46UL,\n+    0xbfed906bUL, 0x20000000UL, 0xbc7457e6UL, 0x00000000UL, 0xbfe00000UL,\n+    0x76acf82dUL, 0xbfa4a031UL, 0x56c62ddaUL, 0xbfee9f41UL, 0xe0000000UL,\n+    0xbc8760b1UL, 0x00000000UL, 0xbfd00000UL, 0x0e5967d5UL, 0x3fac1d1fUL,\n+    0xcff75cb0UL, 0xbfef6297UL, 0x20000000UL, 0xbc756217UL, 0x00000000UL,\n+    0xbfd00000UL, 0x0f592f50UL, 0x3f9ba165UL, 0xa3d12526UL, 0xbfefd88dUL,\n+    0x40000000UL, 0x3c887df6UL, 0x00000000UL, 0xbfc00000UL, 0x00000000UL,\n+    0x00000000UL, 0x00000000UL, 0xbff00000UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x00000000UL, 0x0f592f50UL, 0xbf9ba165UL, 0xa3d12526UL,\n+    0xbfefd88dUL, 0x40000000UL, 0x3c887df6UL, 0x00000000UL, 0x3fc00000UL,\n+    0x0e5967d5UL, 0xbfac1d1fUL, 0xcff75cb0UL, 0xbfef6297UL, 0x20000000UL,\n+    0xbc756217UL, 0x00000000UL, 0x3fd00000UL, 0x76acf82dUL, 0x3fa4a031UL,\n+    0x56c62ddaUL, 0xbfee9f41UL, 0xe0000000UL, 0xbc8760b1UL, 0x00000000UL,\n+    0x3fd00000UL, 0x65455a75UL, 0xbfbe0875UL, 0xcf328d46UL, 0xbfed906bUL,\n+    0x20000000UL, 0xbc7457e6UL, 0x00000000UL, 0x3fe00000UL, 0x7f909c4eUL,\n+    0xbf9d4a2cUL, 0xf180bdb1UL, 0xbfec38b2UL, 0x80000000UL, 0x3c76e0b1UL,\n+    0x00000000UL, 0x3fe00000UL, 0x9ae68c87UL, 0x3fac73b3UL, 0x290ea1a3UL,\n+    0xbfea9b66UL, 0xe0000000UL, 0xbc39f630UL, 0x00000000UL, 0x3fe00000UL,\n+    0x94247758UL, 0x3fc133ccUL, 0x6b151741UL, 0xbfe8bc80UL, 0x20000000UL,\n+    0x3c82c5e1UL, 0x00000000UL, 0x3fe00000UL, 0x99fcef32UL, 0x3fca8279UL,\n+    0x667f3bcdUL, 0xbfe6a09eUL, 0x20000000UL, 0x3c8bdd34UL, 0x00000000UL,\n+    0x3fe00000UL, 0x53aba2fdUL, 0xbfcd0dfeUL, 0x25091dd6UL, 0xbfe44cf3UL,\n+    0x20000000UL, 0xbc68076aUL, 0x00000000UL, 0x3ff00000UL, 0x5bc57974UL,\n+    0xbfc59267UL, 0x39ae68c8UL, 0xbfe1c73bUL, 0x20000000UL, 0xbc8b25ddUL,\n+    0x00000000UL, 0x3ff00000UL, 0x73fa1279UL, 0xbfbe3a68UL, 0x3806f63bUL,\n+    0xbfde2b5dUL, 0x20000000UL, 0xbc5e0d89UL, 0x00000000UL, 0x3ff00000UL,\n+    0x866b95cfUL, 0xbfb37ca1UL, 0xa6aea963UL, 0xbfd87de2UL, 0xe0000000UL,\n+    0x3c672cedUL, 0x00000000UL, 0x3ff00000UL, 0x939d225aUL, 0xbfa60beaUL,\n+    0x2ed59f06UL, 0xbfd29406UL, 0xa0000000UL, 0x3c75d28dUL, 0x00000000UL,\n+    0x3ff00000UL, 0x011469fbUL, 0xbf93ad06UL, 0x3c69a60bUL, 0xbfc8f8b8UL,\n+    0xc0000000UL, 0x3c626d19UL, 0x00000000UL, 0x3ff00000UL, 0x176d6d31UL,\n+    0xbf73b92eUL, 0xbc29b42cUL, 0xbfb917a6UL, 0xe0000000UL, 0x3c3e2718UL,\n+    0x00000000UL, 0x3ff00000UL, 0x55555555UL, 0xbfc55555UL, 0x00000000UL,\n+    0xbfe00000UL, 0x11111111UL, 0x3f811111UL, 0x55555555UL, 0x3fa55555UL,\n+    0x1a01a01aUL, 0xbf2a01a0UL, 0x16c16c17UL, 0xbf56c16cUL, 0xa556c734UL,\n+    0x3ec71de3UL, 0x1a01a01aUL, 0x3efa01a0UL, 0x1a600000UL, 0x3d90b461UL,\n+    0x1a600000UL, 0x3d90b461UL, 0x54400000UL, 0x3fb921fbUL, 0x00000000UL,\n+    0x00000000UL, 0x2e037073UL, 0x3b63198aUL, 0x00000000UL, 0x00000000UL,\n+    0x6dc9c883UL, 0x40245f30UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n+    0x43380000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x3ff00000UL,\n+    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x80000000UL, 0x00000000UL,\n+    0x00000000UL, 0x00000000UL, 0x80000000UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x3fe00000UL, 0x00000000UL, 0x3fe00000UL\n+};\n+\/\/registers,\n+\/\/ input: (rbp + 8)\n+\/\/ scratch: xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7\n+\/\/          eax, ecx, edx, ebx (tmp)\n+\n+\/\/ Code generated by Intel C compiler for LIBM library\n+\n+void MacroAssembler::fast_cos(XMMRegister xmm0, XMMRegister xmm1, XMMRegister xmm2, XMMRegister xmm3,\n+                              XMMRegister xmm4, XMMRegister xmm5, XMMRegister xmm6, XMMRegister xmm7,\n+                              Register eax, Register ecx, Register edx, Register tmp) {\n+  Label L_2TAG_PACKET_0_0_2, L_2TAG_PACKET_1_0_2, L_2TAG_PACKET_2_0_2, L_2TAG_PACKET_3_0_2;\n+  Label start;\n+\n+  assert_different_registers(tmp, eax, ecx, edx);\n+\n+  address static_const_table_cos = (address)_static_const_table_cos;\n+\n+  bind(start);\n+  subl(rsp, 120);\n+  movl(Address(rsp, 56), tmp);\n+  lea(tmp, ExternalAddress(static_const_table_cos));\n+  movsd(xmm0, Address(rsp, 128));\n+  pextrw(eax, xmm0, 3);\n+  andl(eax, 32767);\n+  subl(eax, 12336);\n+  cmpl(eax, 4293);\n+  jcc(Assembler::above, L_2TAG_PACKET_0_0_2);\n+  movsd(xmm1, Address(tmp, 2160));\n+  mulsd(xmm1, xmm0);\n+  movdqu(xmm5, Address(tmp, 2240));\n+  movsd(xmm4, Address(tmp, 2224));\n+  pand(xmm4, xmm0);\n+  por(xmm5, xmm4);\n+  movsd(xmm3, Address(tmp, 2128));\n+  movdqu(xmm2, Address(tmp, 2112));\n+  addpd(xmm1, xmm5);\n+  cvttsd2sil(edx, xmm1);\n+  cvtsi2sdl(xmm1, edx);\n+  mulsd(xmm3, xmm1);\n+  unpcklpd(xmm1, xmm1);\n+  addl(edx, 1865232);\n+  movdqu(xmm4, xmm0);\n+  andl(edx, 63);\n+  movdqu(xmm5, Address(tmp, 2096));\n+  lea(eax, Address(tmp, 0));\n+  shll(edx, 5);\n+  addl(eax, edx);\n+  mulpd(xmm2, xmm1);\n+  subsd(xmm0, xmm3);\n+  mulsd(xmm1, Address(tmp, 2144));\n+  subsd(xmm4, xmm3);\n+  movsd(xmm7, Address(eax, 8));\n+  unpcklpd(xmm0, xmm0);\n+  movapd(xmm3, xmm4);\n+  subsd(xmm4, xmm2);\n+  mulpd(xmm5, xmm0);\n+  subpd(xmm0, xmm2);\n+  movdqu(xmm6, Address(tmp, 2064));\n+  mulsd(xmm7, xmm4);\n+  subsd(xmm3, xmm4);\n+  mulpd(xmm5, xmm0);\n+  mulpd(xmm0, xmm0);\n+  subsd(xmm3, xmm2);\n+  movdqu(xmm2, Address(eax, 0));\n+  subsd(xmm1, xmm3);\n+  movsd(xmm3, Address(eax, 24));\n+  addsd(xmm2, xmm3);\n+  subsd(xmm7, xmm2);\n+  mulsd(xmm2, xmm4);\n+  mulpd(xmm6, xmm0);\n+  mulsd(xmm3, xmm4);\n+  mulpd(xmm2, xmm0);\n+  mulpd(xmm0, xmm0);\n+  addpd(xmm5, Address(tmp, 2080));\n+  mulsd(xmm4, Address(eax, 0));\n+  addpd(xmm6, Address(tmp, 2048));\n+  mulpd(xmm5, xmm0);\n+  movapd(xmm0, xmm3);\n+  addsd(xmm3, Address(eax, 8));\n+  mulpd(xmm1, xmm7);\n+  movapd(xmm7, xmm4);\n+  addsd(xmm4, xmm3);\n+  addpd(xmm6, xmm5);\n+  movsd(xmm5, Address(eax, 8));\n+  subsd(xmm5, xmm3);\n+  subsd(xmm3, xmm4);\n+  addsd(xmm1, Address(eax, 16));\n+  mulpd(xmm6, xmm2);\n+  addsd(xmm5, xmm0);\n+  addsd(xmm3, xmm7);\n+  addsd(xmm1, xmm5);\n+  addsd(xmm1, xmm3);\n+  addsd(xmm1, xmm6);\n+  unpckhpd(xmm6, xmm6);\n+  addsd(xmm1, xmm6);\n+  addsd(xmm4, xmm1);\n+  movsd(Address(rsp, 0), xmm4);\n+  fld_d(Address(rsp, 0));\n+  jmp(L_2TAG_PACKET_1_0_2);\n+\n+  bind(L_2TAG_PACKET_0_0_2);\n+  jcc(Assembler::greater, L_2TAG_PACKET_2_0_2);\n+  pextrw(eax, xmm0, 3);\n+  andl(eax, 32767);\n+  pinsrw(xmm0, eax, 3);\n+  movsd(xmm1, Address(tmp, 2192));\n+  subsd(xmm1, xmm0);\n+  movsd(Address(rsp, 0), xmm1);\n+  fld_d(Address(rsp, 0));\n+  jmp(L_2TAG_PACKET_1_0_2);\n+\n+  bind(L_2TAG_PACKET_2_0_2);\n+  movl(eax, Address(rsp, 132));\n+  andl(eax, 2146435072);\n+  cmpl(eax, 2146435072);\n+  jcc(Assembler::equal, L_2TAG_PACKET_3_0_2);\n+  subl(rsp, 32);\n+  movsd(Address(rsp, 0), xmm0);\n+  lea(eax, Address(rsp, 40));\n+  movl(Address(rsp, 8), eax);\n+  movl(eax, 1);\n+  movl(Address(rsp, 12), eax);\n+  call(RuntimeAddress(CAST_FROM_FN_PTR(address, StubRoutines::dlibm_sin_cos_huge())));\n+  addl(rsp, 32);\n+  fld_d(Address(rsp, 8));\n+  jmp(L_2TAG_PACKET_1_0_2);\n+\n+  bind(L_2TAG_PACKET_3_0_2);\n+  fld_d(Address(rsp, 128));\n+  fmul_d(Address(tmp, 2208));\n+\n+  bind(L_2TAG_PACKET_1_0_2);\n+  movl(tmp, Address(rsp, 56));\n+}\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86_32_cos.cpp","additions":428,"deletions":0,"binary":false,"changes":428,"status":"added"},{"patch":"@@ -0,0 +1,330 @@\n+\/*\n+* Copyright (c) 2016, 2021, Intel Corporation. All rights reserved.\n+* Copyright (C) 2021 THL A29 Limited, a Tencent company. All rights reserved.\n+* Intel Math Library (LIBM) Source Code\n+*\n+* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+*\n+* This code is free software; you can redistribute it and\/or modify it\n+* under the terms of the GNU General Public License version 2 only, as\n+* published by the Free Software Foundation.\n+*\n+* This code is distributed in the hope that it will be useful, but WITHOUT\n+* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+* version 2 for more details (a copy is included in the LICENSE file that\n+* accompanied this code).\n+*\n+* You should have received a copy of the GNU General Public License version\n+* 2 along with this work; if not, write to the Free Software Foundation,\n+* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+*\n+* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+* or visit www.oracle.com if you need additional information or have any\n+* questions.\n+*\n+*\/\n+\n+#include \"precompiled.hpp\"\n+#include \"asm\/assembler.hpp\"\n+#include \"asm\/assembler.inline.hpp\"\n+#include \"macroAssembler_x86.hpp\"\n+#include \"runtime\/stubRoutines.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n+\n+\/******************************************************************************\/\n+\/\/                     ALGORITHM DESCRIPTION - EXP()\n+\/\/                     ---------------------\n+\/\/\n+\/\/ Description:\n+\/\/  Let K = 64 (table size).\n+\/\/        x    x\/log(2)     n\n+\/\/       e  = 2          = 2 * T[j] * (1 + P(y))\n+\/\/  where\n+\/\/       x = m*log(2)\/K + y,    y in [-log(2)\/K..log(2)\/K]\n+\/\/       m = n*K + j,           m,n,j - signed integer, j in [-K\/2..K\/2]\n+\/\/                  j\/K\n+\/\/       values of 2   are tabulated as T[j] = T_hi[j] ( 1 + T_lo[j]).\n+\/\/\n+\/\/       P(y) is a minimax polynomial approximation of exp(x)-1\n+\/\/       on small interval [-log(2)\/K..log(2)\/K] (were calculated by Maple V).\n+\/\/\n+\/\/  To avoid problems with arithmetic overflow and underflow,\n+\/\/            n                        n1  n2\n+\/\/  value of 2  is safely computed as 2 * 2 where n1 in [-BIAS\/2..BIAS\/2]\n+\/\/  where BIAS is a value of exponent bias.\n+\/\/\n+\/\/ Special cases:\n+\/\/  exp(NaN) = NaN\n+\/\/  exp(+INF) = +INF\n+\/\/  exp(-INF) = 0\n+\/\/  exp(x) = 1 for subnormals\n+\/\/  for finite argument, only exp(0)=1 is exact\n+\/\/  For IEEE double\n+\/\/    if x >  709.782712893383973096 then exp(x) overflow\n+\/\/    if x < -745.133219101941108420 then exp(x) underflow\n+\/\/\n+\/******************************************************************************\/\n+\n+\/\/ The 32 bit code is at most SSE2 compliant\n+\n+ATTRIBUTE_ALIGNED(16) juint _static_const_table[] =\n+{\n+    0x00000000UL, 0xfff00000UL, 0x00000000UL, 0xfff00000UL, 0xffffffc0UL,\n+    0x00000000UL, 0xffffffc0UL, 0x00000000UL, 0x0000ffc0UL, 0x00000000UL,\n+    0x0000ffc0UL, 0x00000000UL, 0x00000000UL, 0x43380000UL, 0x00000000UL,\n+    0x43380000UL, 0x652b82feUL, 0x40571547UL, 0x652b82feUL, 0x40571547UL,\n+    0xfefa0000UL, 0x3f862e42UL, 0xfefa0000UL, 0x3f862e42UL, 0xbc9e3b3aUL,\n+    0x3d1cf79aUL, 0xbc9e3b3aUL, 0x3d1cf79aUL, 0xfffffffeUL, 0x3fdfffffUL,\n+    0xfffffffeUL, 0x3fdfffffUL, 0xe3289860UL, 0x3f56c15cUL, 0x555b9e25UL,\n+    0x3fa55555UL, 0xc090cf0fUL, 0x3f811115UL, 0x55548ba1UL, 0x3fc55555UL,\n+    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x0e03754dUL,\n+    0x3cad7bbfUL, 0x3e778060UL, 0x00002c9aUL, 0x3567f613UL, 0x3c8cd252UL,\n+    0xd3158574UL, 0x000059b0UL, 0x61e6c861UL, 0x3c60f74eUL, 0x18759bc8UL,\n+    0x00008745UL, 0x5d837b6cUL, 0x3c979aa6UL, 0x6cf9890fUL, 0x0000b558UL,\n+    0x702f9cd1UL, 0x3c3ebe3dUL, 0x32d3d1a2UL, 0x0000e3ecUL, 0x1e63bcd8UL,\n+    0x3ca3516eUL, 0xd0125b50UL, 0x00011301UL, 0x26f0387bUL, 0x3ca4c554UL,\n+    0xaea92ddfUL, 0x0001429aUL, 0x62523fb6UL, 0x3ca95153UL, 0x3c7d517aUL,\n+    0x000172b8UL, 0x3f1353bfUL, 0x3c8b898cUL, 0xeb6fcb75UL, 0x0001a35bUL,\n+    0x3e3a2f5fUL, 0x3c9aecf7UL, 0x3168b9aaUL, 0x0001d487UL, 0x44a6c38dUL,\n+    0x3c8a6f41UL, 0x88628cd6UL, 0x0002063bUL, 0xe3a8a894UL, 0x3c968efdUL,\n+    0x6e756238UL, 0x0002387aUL, 0x981fe7f2UL, 0x3c80472bUL, 0x65e27cddUL,\n+    0x00026b45UL, 0x6d09ab31UL, 0x3c82f7e1UL, 0xf51fdee1UL, 0x00029e9dUL,\n+    0x720c0ab3UL, 0x3c8b3782UL, 0xa6e4030bUL, 0x0002d285UL, 0x4db0abb6UL,\n+    0x3c834d75UL, 0x0a31b715UL, 0x000306feUL, 0x5dd3f84aUL, 0x3c8fdd39UL,\n+    0xb26416ffUL, 0x00033c08UL, 0xcc187d29UL, 0x3ca12f8cUL, 0x373aa9caUL,\n+    0x000371a7UL, 0x738b5e8bUL, 0x3ca7d229UL, 0x34e59ff6UL, 0x0003a7dbUL,\n+    0xa72a4c6dUL, 0x3c859f48UL, 0x4c123422UL, 0x0003dea6UL, 0x259d9205UL,\n+    0x3ca8b846UL, 0x21f72e29UL, 0x0004160aUL, 0x60c2ac12UL, 0x3c4363edUL,\n+    0x6061892dUL, 0x00044e08UL, 0xdaa10379UL, 0x3c6ecce1UL, 0xb5c13cd0UL,\n+    0x000486a2UL, 0xbb7aafb0UL, 0x3c7690ceUL, 0xd5362a27UL, 0x0004bfdaUL,\n+    0x9b282a09UL, 0x3ca083ccUL, 0x769d2ca6UL, 0x0004f9b2UL, 0xc1aae707UL,\n+    0x3ca509b0UL, 0x569d4f81UL, 0x0005342bUL, 0x18fdd78eUL, 0x3c933505UL,\n+    0x36b527daUL, 0x00056f47UL, 0xe21c5409UL, 0x3c9063e1UL, 0xdd485429UL,\n+    0x0005ab07UL, 0x2b64c035UL, 0x3c9432e6UL, 0x15ad2148UL, 0x0005e76fUL,\n+    0x99f08c0aUL, 0x3ca01284UL, 0xb03a5584UL, 0x0006247eUL, 0x0073dc06UL,\n+    0x3c99f087UL, 0x82552224UL, 0x00066238UL, 0x0da05571UL, 0x3c998d4dUL,\n+    0x667f3bccUL, 0x0006a09eUL, 0x86ce4786UL, 0x3ca52bb9UL, 0x3c651a2eUL,\n+    0x0006dfb2UL, 0x206f0dabUL, 0x3ca32092UL, 0xe8ec5f73UL, 0x00071f75UL,\n+    0x8e17a7a6UL, 0x3ca06122UL, 0x564267c8UL, 0x00075febUL, 0x461e9f86UL,\n+    0x3ca244acUL, 0x73eb0186UL, 0x0007a114UL, 0xabd66c55UL, 0x3c65ebe1UL,\n+    0x36cf4e62UL, 0x0007e2f3UL, 0xbbff67d0UL, 0x3c96fe9fUL, 0x994cce12UL,\n+    0x00082589UL, 0x14c801dfUL, 0x3c951f14UL, 0x9b4492ecUL, 0x000868d9UL,\n+    0xc1f0eab4UL, 0x3c8db72fUL, 0x422aa0dbUL, 0x0008ace5UL, 0x59f35f44UL,\n+    0x3c7bf683UL, 0x99157736UL, 0x0008f1aeUL, 0x9c06283cUL, 0x3ca360baUL,\n+    0xb0cdc5e4UL, 0x00093737UL, 0x20f962aaUL, 0x3c95e8d1UL, 0x9fde4e4fUL,\n+    0x00097d82UL, 0x2b91ce27UL, 0x3c71affcUL, 0x82a3f090UL, 0x0009c491UL,\n+    0x589a2ebdUL, 0x3c9b6d34UL, 0x7b5de564UL, 0x000a0c66UL, 0x9ab89880UL,\n+    0x3c95277cUL, 0xb23e255cUL, 0x000a5503UL, 0x6e735ab3UL, 0x3c846984UL,\n+    0x5579fdbfUL, 0x000a9e6bUL, 0x92cb3387UL, 0x3c8c1a77UL, 0x995ad3adUL,\n+    0x000ae89fUL, 0xdc2d1d96UL, 0x3ca22466UL, 0xb84f15faUL, 0x000b33a2UL,\n+    0xb19505aeUL, 0x3ca1112eUL, 0xf2fb5e46UL, 0x000b7f76UL, 0x0a5fddcdUL,\n+    0x3c74ffd7UL, 0x904bc1d2UL, 0x000bcc1eUL, 0x30af0cb3UL, 0x3c736eaeUL,\n+    0xdd85529cUL, 0x000c199bUL, 0xd10959acUL, 0x3c84e08fUL, 0x2e57d14bUL,\n+    0x000c67f1UL, 0x6c921968UL, 0x3c676b2cUL, 0xdcef9069UL, 0x000cb720UL,\n+    0x36df99b3UL, 0x3c937009UL, 0x4a07897bUL, 0x000d072dUL, 0xa63d07a7UL,\n+    0x3c74a385UL, 0xdcfba487UL, 0x000d5818UL, 0xd5c192acUL, 0x3c8e5a50UL,\n+    0x03db3285UL, 0x000da9e6UL, 0x1c4a9792UL, 0x3c98bb73UL, 0x337b9b5eUL,\n+    0x000dfc97UL, 0x603a88d3UL, 0x3c74b604UL, 0xe78b3ff6UL, 0x000e502eUL,\n+    0x92094926UL, 0x3c916f27UL, 0xa2a490d9UL, 0x000ea4afUL, 0x41aa2008UL,\n+    0x3c8ec3bcUL, 0xee615a27UL, 0x000efa1bUL, 0x31d185eeUL, 0x3c8a64a9UL,\n+    0x5b6e4540UL, 0x000f5076UL, 0x4d91cd9dUL, 0x3c77893bUL, 0x819e90d8UL,\n+    0x000fa7c1UL, 0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0x7ff00000UL,\n+    0x00000000UL, 0x00000000UL, 0xffffffffUL, 0x7fefffffUL, 0x00000000UL,\n+    0x00100000UL\n+};\n+\n+\/\/registers,\n+\/\/ input: (rbp + 8)\n+\/\/ scratch: xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7\n+\/\/          rax, rdx, rcx, rbx (tmp)\n+\n+\/\/ Code generated by Intel C compiler for LIBM library\n+\n+void MacroAssembler::fast_exp(XMMRegister xmm0, XMMRegister xmm1, XMMRegister xmm2, XMMRegister xmm3,\n+                              XMMRegister xmm4, XMMRegister xmm5, XMMRegister xmm6, XMMRegister xmm7,\n+                              Register eax, Register ecx, Register edx, Register tmp) {\n+  Label L_2TAG_PACKET_0_0_2, L_2TAG_PACKET_1_0_2, L_2TAG_PACKET_2_0_2, L_2TAG_PACKET_3_0_2;\n+  Label L_2TAG_PACKET_4_0_2, L_2TAG_PACKET_5_0_2, L_2TAG_PACKET_6_0_2, L_2TAG_PACKET_7_0_2;\n+  Label L_2TAG_PACKET_8_0_2, L_2TAG_PACKET_9_0_2, L_2TAG_PACKET_10_0_2, L_2TAG_PACKET_11_0_2;\n+  Label L_2TAG_PACKET_12_0_2;\n+\n+  assert_different_registers(tmp, eax, ecx, edx);\n+  address static_const_table = (address)_static_const_table;\n+\n+  subl(rsp, 120);\n+  movl(Address(rsp, 64), tmp);\n+  lea(tmp, ExternalAddress(static_const_table));\n+  movsd(xmm0, Address(rsp, 128));\n+  unpcklpd(xmm0, xmm0);\n+  movdqu(xmm1, Address(tmp, 64));          \/\/ 0x652b82feUL, 0x40571547UL, 0x652b82feUL, 0x40571547UL\n+  movdqu(xmm6, Address(tmp, 48));          \/\/ 0x00000000UL, 0x43380000UL, 0x00000000UL, 0x43380000UL\n+  movdqu(xmm2, Address(tmp, 80));          \/\/ 0xfefa0000UL, 0x3f862e42UL, 0xfefa0000UL, 0x3f862e42UL\n+  movdqu(xmm3, Address(tmp, 96));          \/\/ 0xbc9e3b3aUL, 0x3d1cf79aUL, 0xbc9e3b3aUL, 0x3d1cf79aUL\n+  pextrw(eax, xmm0, 3);\n+  andl(eax, 32767);\n+  movl(edx, 16527);\n+  subl(edx, eax);\n+  subl(eax, 15504);\n+  orl(edx, eax);\n+  cmpl(edx, INT_MIN);\n+  jcc(Assembler::aboveEqual, L_2TAG_PACKET_0_0_2);\n+  mulpd(xmm1, xmm0);\n+  addpd(xmm1, xmm6);\n+  movapd(xmm7, xmm1);\n+  subpd(xmm1, xmm6);\n+  mulpd(xmm2, xmm1);\n+  movdqu(xmm4, Address(tmp, 128));         \/\/ 0xe3289860UL, 0x3f56c15cUL, 0x555b9e25UL, 0x3fa55555UL\n+  mulpd(xmm3, xmm1);\n+  movdqu(xmm5, Address(tmp, 144));         \/\/ 0xc090cf0fUL, 0x3f811115UL, 0x55548ba1UL, 0x3fc55555UL\n+  subpd(xmm0, xmm2);\n+  movdl(eax, xmm7);\n+  movl(ecx, eax);\n+  andl(ecx, 63);\n+  shll(ecx, 4);\n+  sarl(eax, 6);\n+  movl(edx, eax);\n+  movdqu(xmm6, Address(tmp, 16));          \/\/ 0xffffffc0UL, 0x00000000UL, 0xffffffc0UL, 0x00000000UL\n+  pand(xmm7, xmm6);\n+  movdqu(xmm6, Address(tmp, 32));          \/\/ 0x0000ffc0UL, 0x00000000UL, 0x0000ffc0UL, 0x00000000UL\n+  paddq(xmm7, xmm6);\n+  psllq(xmm7, 46);\n+  subpd(xmm0, xmm3);\n+  movdqu(xmm2, Address(tmp, ecx, Address::times_1, 160));\n+  mulpd(xmm4, xmm0);\n+  movapd(xmm6, xmm0);\n+  movapd(xmm1, xmm0);\n+  mulpd(xmm6, xmm6);\n+  mulpd(xmm0, xmm6);\n+  addpd(xmm5, xmm4);\n+  mulsd(xmm0, xmm6);\n+  mulpd(xmm6, Address(tmp, 112));          \/\/ 0xfffffffeUL, 0x3fdfffffUL, 0xfffffffeUL, 0x3fdfffffUL\n+  addsd(xmm1, xmm2);\n+  unpckhpd(xmm2, xmm2);\n+  mulpd(xmm0, xmm5);\n+  addsd(xmm1, xmm0);\n+  por(xmm2, xmm7);\n+  unpckhpd(xmm0, xmm0);\n+  addsd(xmm0, xmm1);\n+  addsd(xmm0, xmm6);\n+  addl(edx, 894);\n+  cmpl(edx, 1916);\n+  jcc(Assembler::above, L_2TAG_PACKET_1_0_2);\n+  mulsd(xmm0, xmm2);\n+  addsd(xmm0, xmm2);\n+  jmp(L_2TAG_PACKET_2_0_2);\n+\n+  bind(L_2TAG_PACKET_1_0_2);\n+  fnstcw(Address(rsp, 24));\n+  movzwl(edx, Address(rsp, 24));\n+  orl(edx, 768);\n+  movw(Address(rsp, 28), edx);\n+  fldcw(Address(rsp, 28));\n+  movl(edx, eax);\n+  sarl(eax, 1);\n+  subl(edx, eax);\n+  movdqu(xmm6, Address(tmp, 0));           \/\/ 0x00000000UL, 0xfff00000UL, 0x00000000UL, 0xfff00000UL\n+  pandn(xmm6, xmm2);\n+  addl(eax, 1023);\n+  movdl(xmm3, eax);\n+  psllq(xmm3, 52);\n+  por(xmm6, xmm3);\n+  addl(edx, 1023);\n+  movdl(xmm4, edx);\n+  psllq(xmm4, 52);\n+  movsd(Address(rsp, 8), xmm0);\n+  fld_d(Address(rsp, 8));\n+  movsd(Address(rsp, 16), xmm6);\n+  fld_d(Address(rsp, 16));\n+  fmula(1);\n+  faddp(1);\n+  movsd(Address(rsp, 8), xmm4);\n+  fld_d(Address(rsp, 8));\n+  fmulp(1);\n+  fstp_d(Address(rsp, 8));\n+  movsd(xmm0, Address(rsp, 8));\n+  fldcw(Address(rsp, 24));\n+  pextrw(ecx, xmm0, 3);\n+  andl(ecx, 32752);\n+  cmpl(ecx, 32752);\n+  jcc(Assembler::aboveEqual, L_2TAG_PACKET_3_0_2);\n+  cmpl(ecx, 0);\n+  jcc(Assembler::equal, L_2TAG_PACKET_4_0_2);\n+  jmp(L_2TAG_PACKET_2_0_2);\n+  cmpl(ecx, INT_MIN);\n+  jcc(Assembler::below, L_2TAG_PACKET_3_0_2);\n+  cmpl(ecx, -1064950997);\n+  jcc(Assembler::below, L_2TAG_PACKET_2_0_2);\n+  jcc(Assembler::above, L_2TAG_PACKET_4_0_2);\n+  movl(edx, Address(rsp, 128));\n+  cmpl(edx, -17155601);\n+  jcc(Assembler::below, L_2TAG_PACKET_2_0_2);\n+  jmp(L_2TAG_PACKET_4_0_2);\n+\n+  bind(L_2TAG_PACKET_3_0_2);\n+  movl(edx, 14);\n+  jmp(L_2TAG_PACKET_5_0_2);\n+\n+  bind(L_2TAG_PACKET_4_0_2);\n+  movl(edx, 15);\n+\n+  bind(L_2TAG_PACKET_5_0_2);\n+  movsd(Address(rsp, 0), xmm0);\n+  movsd(xmm0, Address(rsp, 128));\n+  fld_d(Address(rsp, 0));\n+  jmp(L_2TAG_PACKET_6_0_2);\n+\n+  bind(L_2TAG_PACKET_7_0_2);\n+  cmpl(eax, 2146435072);\n+  jcc(Assembler::aboveEqual, L_2TAG_PACKET_8_0_2);\n+  movl(eax, Address(rsp, 132));\n+  cmpl(eax, INT_MIN);\n+  jcc(Assembler::aboveEqual, L_2TAG_PACKET_9_0_2);\n+  movsd(xmm0, Address(tmp, 1208));         \/\/ 0xffffffffUL, 0x7fefffffUL\n+  mulsd(xmm0, xmm0);\n+  movl(edx, 14);\n+  jmp(L_2TAG_PACKET_5_0_2);\n+\n+  bind(L_2TAG_PACKET_9_0_2);\n+  movsd(xmm0, Address(tmp, 1216));\n+  mulsd(xmm0, xmm0);\n+  movl(edx, 15);\n+  jmp(L_2TAG_PACKET_5_0_2);\n+\n+  bind(L_2TAG_PACKET_8_0_2);\n+  movl(edx, Address(rsp, 128));\n+  cmpl(eax, 2146435072);\n+  jcc(Assembler::above, L_2TAG_PACKET_10_0_2);\n+  cmpl(edx, 0);\n+  jcc(Assembler::notEqual, L_2TAG_PACKET_10_0_2);\n+  movl(eax, Address(rsp, 132));\n+  cmpl(eax, 2146435072);\n+  jcc(Assembler::notEqual, L_2TAG_PACKET_11_0_2);\n+  movsd(xmm0, Address(tmp, 1192));         \/\/ 0x00000000UL, 0x7ff00000UL\n+  jmp(L_2TAG_PACKET_2_0_2);\n+\n+  bind(L_2TAG_PACKET_11_0_2);\n+  movsd(xmm0, Address(tmp, 1200));         \/\/ 0x00000000UL, 0x00000000UL\n+  jmp(L_2TAG_PACKET_2_0_2);\n+\n+  bind(L_2TAG_PACKET_10_0_2);\n+  movsd(xmm0, Address(rsp, 128));\n+  addsd(xmm0, xmm0);\n+  jmp(L_2TAG_PACKET_2_0_2);\n+\n+  bind(L_2TAG_PACKET_0_0_2);\n+  movl(eax, Address(rsp, 132));\n+  andl(eax, 2147483647);\n+  cmpl(eax, 1083179008);\n+  jcc(Assembler::aboveEqual, L_2TAG_PACKET_7_0_2);\n+  movsd(xmm0, Address(rsp, 128));\n+  addsd(xmm0, Address(tmp, 1184));         \/\/ 0x00000000UL, 0x3ff00000UL\n+  jmp(L_2TAG_PACKET_2_0_2);\n+\n+  bind(L_2TAG_PACKET_2_0_2);\n+  movsd(Address(rsp, 48), xmm0);\n+  fld_d(Address(rsp, 48));\n+\n+  bind(L_2TAG_PACKET_6_0_2);\n+  movl(tmp, Address(rsp, 64));\n+}\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86_32_exp.cpp","additions":330,"deletions":0,"binary":false,"changes":330,"status":"added"},{"patch":"@@ -0,0 +1,345 @@\n+\/*\n+* Copyright (c) 2016, 2021, Intel Corporation. All rights reserved.\n+* Copyright (C) 2021 THL A29 Limited, a Tencent company. All rights reserved.\n+* Intel Math Library (LIBM) Source Code\n+*\n+* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+*\n+* This code is free software; you can redistribute it and\/or modify it\n+* under the terms of the GNU General Public License version 2 only, as\n+* published by the Free Software Foundation.\n+*\n+* This code is distributed in the hope that it will be useful, but WITHOUT\n+* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+* version 2 for more details (a copy is included in the LICENSE file that\n+* accompanied this code).\n+*\n+* You should have received a copy of the GNU General Public License version\n+* 2 along with this work; if not, write to the Free Software Foundation,\n+* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+*\n+* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+* or visit www.oracle.com if you need additional information or have any\n+* questions.\n+*\n+*\/\n+\n+#include \"precompiled.hpp\"\n+#include \"asm\/assembler.hpp\"\n+#include \"asm\/assembler.inline.hpp\"\n+#include \"macroAssembler_x86.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n+\n+\/******************************************************************************\/\n+\/\/                     ALGORITHM DESCRIPTION - LOG()\n+\/\/                     ---------------------\n+\/\/\n+\/\/    x=2^k * mx, mx in [1,2)\n+\/\/\n+\/\/    Get B~1\/mx based on the output of rcpss instruction (B0)\n+\/\/    B = int((B0*2^7+0.5))\/2^7\n+\/\/\n+\/\/    Reduced argument: r=B*mx-1.0 (computed accurately in high and low parts)\n+\/\/\n+\/\/    Result:  k*log(2) - log(B) + p(r) if |x-1| >= small value (2^-6)  and\n+\/\/             p(r) is a degree 7 polynomial\n+\/\/             -log(B) read from data table (high, low parts)\n+\/\/             Result is formed from high and low parts\n+\/\/\n+\/\/ Special cases:\n+\/\/  log(NaN) = quiet NaN, and raise invalid exception\n+\/\/  log(+INF) = that INF\n+\/\/  log(0) = -INF with divide-by-zero exception raised\n+\/\/  log(1) = +0\n+\/\/  log(x) = NaN with invalid exception raised if x < -0, including -INF\n+\/\/\n+\/******************************************************************************\/\n+\n+\/\/ The 32 bit code is at most SSE2 compliant\n+\/\/\n+ATTRIBUTE_ALIGNED(16) juint _static_const_table_log[] =\n+{\n+    0xfefa3800UL, 0x3fe62e42UL, 0x93c76730UL, 0x3d2ef357UL, 0xaa241800UL,\n+    0x3fe5ee82UL, 0x0cda46beUL, 0x3d220238UL, 0x5c364800UL, 0x3fe5af40UL,\n+    0xac10c9fbUL, 0x3d2dfa63UL, 0x26bb8c00UL, 0x3fe5707aUL, 0xff3303ddUL,\n+    0x3d09980bUL, 0x26867800UL, 0x3fe5322eUL, 0x5d257531UL, 0x3d05ccc4UL,\n+    0x835a5000UL, 0x3fe4f45aUL, 0x6d93b8fbUL, 0xbd2e6c51UL, 0x6f970c00UL,\n+    0x3fe4b6fdUL, 0xed4c541cUL, 0x3cef7115UL, 0x27e8a400UL, 0x3fe47a15UL,\n+    0xf94d60aaUL, 0xbd22cb6aUL, 0xf2f92400UL, 0x3fe43d9fUL, 0x481051f7UL,\n+    0xbcfd984fUL, 0x2125cc00UL, 0x3fe4019cUL, 0x30f0c74cUL, 0xbd26ce79UL,\n+    0x0c36c000UL, 0x3fe3c608UL, 0x7cfe13c2UL, 0xbd02b736UL, 0x17197800UL,\n+    0x3fe38ae2UL, 0xbb5569a4UL, 0xbd218b7aUL, 0xad9d8c00UL, 0x3fe35028UL,\n+    0x9527e6acUL, 0x3d10b83fUL, 0x44340800UL, 0x3fe315daUL, 0xc5a0ed9cUL,\n+    0xbd274e93UL, 0x57b0e000UL, 0x3fe2dbf5UL, 0x07b9dc11UL, 0xbd17a6e5UL,\n+    0x6d0ec000UL, 0x3fe2a278UL, 0xe797882dUL, 0x3d206d2bUL, 0x1134dc00UL,\n+    0x3fe26962UL, 0x05226250UL, 0xbd0b61f1UL, 0xd8bebc00UL, 0x3fe230b0UL,\n+    0x6e48667bUL, 0x3d12fc06UL, 0x5fc61800UL, 0x3fe1f863UL, 0xc9fe81d3UL,\n+    0xbd2a7242UL, 0x49ae6000UL, 0x3fe1c078UL, 0xed70e667UL, 0x3cccacdeUL,\n+    0x40f23c00UL, 0x3fe188eeUL, 0xf8ab4650UL, 0x3d14cc4eUL, 0xf6f29800UL,\n+    0x3fe151c3UL, 0xa293ae49UL, 0xbd2edd97UL, 0x23c75c00UL, 0x3fe11af8UL,\n+    0xbb9ddcb2UL, 0xbd258647UL, 0x8611cc00UL, 0x3fe0e489UL, 0x07801742UL,\n+    0x3d1c2998UL, 0xe2d05400UL, 0x3fe0ae76UL, 0x887e7e27UL, 0x3d1f486bUL,\n+    0x0533c400UL, 0x3fe078bfUL, 0x41edf5fdUL, 0x3d268122UL, 0xbe760400UL,\n+    0x3fe04360UL, 0xe79539e0UL, 0xbd04c45fUL, 0xe5b20800UL, 0x3fe00e5aUL,\n+    0xb1727b1cUL, 0xbd053ba3UL, 0xaf7a4800UL, 0x3fdfb358UL, 0x3c164935UL,\n+    0x3d0085faUL, 0xee031800UL, 0x3fdf4aa7UL, 0x6f014a8bUL, 0x3d12cde5UL,\n+    0x56b41000UL, 0x3fdee2a1UL, 0x5a470251UL, 0x3d2f27f4UL, 0xc3ddb000UL,\n+    0x3fde7b42UL, 0x5372bd08UL, 0xbd246550UL, 0x1a272800UL, 0x3fde148aUL,\n+    0x07322938UL, 0xbd1326b2UL, 0x484c9800UL, 0x3fddae75UL, 0x60dc616aUL,\n+    0xbd1ea42dUL, 0x46def800UL, 0x3fdd4902UL, 0xe9a767a8UL, 0x3d235bafUL,\n+    0x18064800UL, 0x3fdce42fUL, 0x3ec7a6b0UL, 0xbd0797c3UL, 0xc7455800UL,\n+    0x3fdc7ff9UL, 0xc15249aeUL, 0xbd29b6ddUL, 0x693fa000UL, 0x3fdc1c60UL,\n+    0x7fe8e180UL, 0x3d2cec80UL, 0x1b80e000UL, 0x3fdbb961UL, 0xf40a666dUL,\n+    0x3d27d85bUL, 0x04462800UL, 0x3fdb56faUL, 0x2d841995UL, 0x3d109525UL,\n+    0x5248d000UL, 0x3fdaf529UL, 0x52774458UL, 0xbd217cc5UL, 0x3c8ad800UL,\n+    0x3fda93edUL, 0xbea77a5dUL, 0x3d1e36f2UL, 0x0224f800UL, 0x3fda3344UL,\n+    0x7f9d79f5UL, 0x3d23c645UL, 0xea15f000UL, 0x3fd9d32bUL, 0x10d0c0b0UL,\n+    0xbd26279eUL, 0x43135800UL, 0x3fd973a3UL, 0xa502d9f0UL, 0xbd152313UL,\n+    0x635bf800UL, 0x3fd914a8UL, 0x2ee6307dUL, 0xbd1766b5UL, 0xa88b3000UL,\n+    0x3fd8b639UL, 0xe5e70470UL, 0xbd205ae1UL, 0x776dc800UL, 0x3fd85855UL,\n+    0x3333778aUL, 0x3d2fd56fUL, 0x3bd81800UL, 0x3fd7fafaUL, 0xc812566aUL,\n+    0xbd272090UL, 0x687cf800UL, 0x3fd79e26UL, 0x2efd1778UL, 0x3d29ec7dUL,\n+    0x76c67800UL, 0x3fd741d8UL, 0x49dc60b3UL, 0x3d2d8b09UL, 0xe6af1800UL,\n+    0x3fd6e60eUL, 0x7c222d87UL, 0x3d172165UL, 0x3e9c6800UL, 0x3fd68ac8UL,\n+    0x2756eba0UL, 0x3d20a0d3UL, 0x0b3ab000UL, 0x3fd63003UL, 0xe731ae00UL,\n+    0xbd2db623UL, 0xdf596000UL, 0x3fd5d5bdUL, 0x08a465dcUL, 0xbd0a0b2aUL,\n+    0x53c8d000UL, 0x3fd57bf7UL, 0xee5d40efUL, 0x3d1fadedUL, 0x0738a000UL,\n+    0x3fd522aeUL, 0x8164c759UL, 0x3d2ebe70UL, 0x9e173000UL, 0x3fd4c9e0UL,\n+    0x1b0ad8a4UL, 0xbd2e2089UL, 0xc271c800UL, 0x3fd4718dUL, 0x0967d675UL,\n+    0xbd2f27ceUL, 0x23d5e800UL, 0x3fd419b4UL, 0xec90e09dUL, 0x3d08e436UL,\n+    0x77333000UL, 0x3fd3c252UL, 0xb606bd5cUL, 0x3d183b54UL, 0x76be1000UL,\n+    0x3fd36b67UL, 0xb0f177c8UL, 0x3d116ecdUL, 0xe1d36000UL, 0x3fd314f1UL,\n+    0xd3213cb8UL, 0xbd28e27aUL, 0x7cdc9000UL, 0x3fd2bef0UL, 0x4a5004f4UL,\n+    0x3d2a9cfaUL, 0x1134d800UL, 0x3fd26962UL, 0xdf5bb3b6UL, 0x3d2c93c1UL,\n+    0x6d0eb800UL, 0x3fd21445UL, 0xba46baeaUL, 0x3d0a87deUL, 0x635a6800UL,\n+    0x3fd1bf99UL, 0x5147bdb7UL, 0x3d2ca6edUL, 0xcbacf800UL, 0x3fd16b5cUL,\n+    0xf7a51681UL, 0x3d2b9acdUL, 0x8227e800UL, 0x3fd1178eUL, 0x63a5f01cUL,\n+    0xbd2c210eUL, 0x67616000UL, 0x3fd0c42dUL, 0x163ceae9UL, 0x3d27188bUL,\n+    0x604d5800UL, 0x3fd07138UL, 0x16ed4e91UL, 0x3cf89cdbUL, 0x5626c800UL,\n+    0x3fd01eaeUL, 0x1485e94aUL, 0xbd16f08cUL, 0x6cb3b000UL, 0x3fcf991cUL,\n+    0xca0cdf30UL, 0x3d1bcbecUL, 0xe4dd0000UL, 0x3fcef5adUL, 0x65bb8e11UL,\n+    0xbcca2115UL, 0xffe71000UL, 0x3fce530eUL, 0x6041f430UL, 0x3cc21227UL,\n+    0xb0d49000UL, 0x3fcdb13dUL, 0xf715b035UL, 0xbd2aff2aUL, 0xf2656000UL,\n+    0x3fcd1037UL, 0x75b6f6e4UL, 0xbd084a7eUL, 0xc6f01000UL, 0x3fcc6ffbUL,\n+    0xc5962bd2UL, 0xbcf1ec72UL, 0x383be000UL, 0x3fcbd087UL, 0x595412b6UL,\n+    0xbd2d4bc4UL, 0x575bd000UL, 0x3fcb31d8UL, 0x4eace1aaUL, 0xbd0c358dUL,\n+    0x3c8ae000UL, 0x3fca93edUL, 0x50562169UL, 0xbd287243UL, 0x07089000UL,\n+    0x3fc9f6c4UL, 0x6865817aUL, 0x3d29904dUL, 0xdcf70000UL, 0x3fc95a5aUL,\n+    0x58a0ff6fUL, 0x3d07f228UL, 0xeb390000UL, 0x3fc8beafUL, 0xaae92cd1UL,\n+    0xbd073d54UL, 0x6551a000UL, 0x3fc823c1UL, 0x9a631e83UL, 0x3d1e0ddbUL,\n+    0x85445000UL, 0x3fc7898dUL, 0x70914305UL, 0xbd1c6610UL, 0x8b757000UL,\n+    0x3fc6f012UL, 0xe59c21e1UL, 0xbd25118dUL, 0xbe8c1000UL, 0x3fc6574eUL,\n+    0x2c3c2e78UL, 0x3d19cf8bUL, 0x6b544000UL, 0x3fc5bf40UL, 0xeb68981cUL,\n+    0xbd127023UL, 0xe4a1b000UL, 0x3fc527e5UL, 0xe5697dc7UL, 0x3d2633e8UL,\n+    0x8333b000UL, 0x3fc4913dUL, 0x54fdb678UL, 0x3d258379UL, 0xa5993000UL,\n+    0x3fc3fb45UL, 0x7e6a354dUL, 0xbd2cd1d8UL, 0xb0159000UL, 0x3fc365fcUL,\n+    0x234b7289UL, 0x3cc62fa8UL, 0x0c868000UL, 0x3fc2d161UL, 0xcb81b4a1UL,\n+    0x3d039d6cUL, 0x2a49c000UL, 0x3fc23d71UL, 0x8fd3df5cUL, 0x3d100d23UL,\n+    0x7e23f000UL, 0x3fc1aa2bUL, 0x44389934UL, 0x3d2ca78eUL, 0x8227e000UL,\n+    0x3fc1178eUL, 0xce2d07f2UL, 0x3d21ef78UL, 0xb59e4000UL, 0x3fc08598UL,\n+    0x7009902cUL, 0xbd27e5ddUL, 0x39dbe000UL, 0x3fbfe891UL, 0x4fa10afdUL,\n+    0xbd2534d6UL, 0x830a2000UL, 0x3fbec739UL, 0xafe645e0UL, 0xbd2dc068UL,\n+    0x63844000UL, 0x3fbda727UL, 0x1fa71733UL, 0x3d1a8940UL, 0x01bc4000UL,\n+    0x3fbc8858UL, 0xc65aacd3UL, 0x3d2646d1UL, 0x8dad6000UL, 0x3fbb6ac8UL,\n+    0x2bf768e5UL, 0xbd139080UL, 0x40b1c000UL, 0x3fba4e76UL, 0xb94407c8UL,\n+    0xbd0e42b6UL, 0x5d594000UL, 0x3fb9335eUL, 0x3abd47daUL, 0x3d23115cUL,\n+    0x2f40e000UL, 0x3fb8197eUL, 0xf96ffdf7UL, 0x3d0f80dcUL, 0x0aeac000UL,\n+    0x3fb700d3UL, 0xa99ded32UL, 0x3cec1e8dUL, 0x4d97a000UL, 0x3fb5e95aUL,\n+    0x3c5d1d1eUL, 0xbd2c6906UL, 0x5d208000UL, 0x3fb4d311UL, 0x82f4e1efUL,\n+    0xbcf53a25UL, 0xa7d1e000UL, 0x3fb3bdf5UL, 0xa5db4ed7UL, 0x3d2cc85eUL,\n+    0xa4472000UL, 0x3fb2aa04UL, 0xae9c697dUL, 0xbd20b6e8UL, 0xd1466000UL,\n+    0x3fb1973bUL, 0x560d9e9bUL, 0xbd25325dUL, 0xb59e4000UL, 0x3fb08598UL,\n+    0x7009902cUL, 0xbd17e5ddUL, 0xc006c000UL, 0x3faeea31UL, 0x4fc93b7bUL,\n+    0xbd0e113eUL, 0xcdddc000UL, 0x3faccb73UL, 0x47d82807UL, 0xbd1a68f2UL,\n+    0xd0fb0000UL, 0x3faaaef2UL, 0x353bb42eUL, 0x3d20fc1aUL, 0x149fc000UL,\n+    0x3fa894aaUL, 0xd05a267dUL, 0xbd197995UL, 0xf2d4c000UL, 0x3fa67c94UL,\n+    0xec19afa2UL, 0xbd029efbUL, 0xd42e0000UL, 0x3fa466aeUL, 0x75bdfd28UL,\n+    0xbd2c1673UL, 0x2f8d0000UL, 0x3fa252f3UL, 0xe021b67bUL, 0x3d283e9aUL,\n+    0x89e74000UL, 0x3fa0415dUL, 0x5cf1d753UL, 0x3d0111c0UL, 0xec148000UL,\n+    0x3f9c63d2UL, 0x3f9eb2f3UL, 0x3d2578c6UL, 0x28c90000UL, 0x3f984925UL,\n+    0x325a0c34UL, 0xbd2aa0baUL, 0x25980000UL, 0x3f9432a9UL, 0x928637feUL,\n+    0x3d098139UL, 0x58938000UL, 0x3f902056UL, 0x06e2f7d2UL, 0xbd23dc5bUL,\n+    0xa3890000UL, 0x3f882448UL, 0xda74f640UL, 0xbd275577UL, 0x75890000UL,\n+    0x3f801015UL, 0x999d2be8UL, 0xbd10c76bUL, 0x59580000UL, 0x3f700805UL,\n+    0xcb31c67bUL, 0x3d2166afUL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n+    0x80000000UL, 0xfefa3800UL, 0x3fa62e42UL, 0x93c76730UL, 0x3ceef357UL,\n+    0x92492492UL, 0x3fc24924UL, 0x00000000UL, 0xbfd00000UL, 0x3d6fb175UL,\n+    0xbfc5555eUL, 0x55555555UL, 0x3fd55555UL, 0x9999999aUL, 0x3fc99999UL,\n+    0x00000000UL, 0xbfe00000UL, 0x00000000UL, 0xffffe000UL, 0x00000000UL,\n+    0xffffe000UL\n+};\n+\n+\/\/registers,\n+\/\/ input: xmm0\n+\/\/ scratch: xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7\n+\/\/          rax, rdx, rcx, rbx (tmp)\n+void MacroAssembler::fast_log(XMMRegister xmm0, XMMRegister xmm1, XMMRegister xmm2, XMMRegister xmm3,\n+                              XMMRegister xmm4, XMMRegister xmm5, XMMRegister xmm6, XMMRegister xmm7,\n+                              Register eax, Register ecx, Register edx, Register tmp) {\n+  Label L_2TAG_PACKET_0_0_2, L_2TAG_PACKET_1_0_2, L_2TAG_PACKET_2_0_2, L_2TAG_PACKET_3_0_2;\n+  Label L_2TAG_PACKET_4_0_2, L_2TAG_PACKET_5_0_2, L_2TAG_PACKET_6_0_2, L_2TAG_PACKET_7_0_2;\n+  Label L_2TAG_PACKET_8_0_2, L_2TAG_PACKET_9_0_2;\n+  Label L_2TAG_PACKET_10_0_2;\n+\n+  assert_different_registers(tmp, eax, ecx, edx);\n+  address static_const_table = (address)_static_const_table_log;\n+\n+  subl(rsp, 104);\n+  movl(Address(rsp, 40), tmp);\n+  lea(tmp, ExternalAddress(static_const_table));\n+  xorpd(xmm2, xmm2);\n+  movl(eax, 16368);\n+  pinsrw(xmm2, eax, 3);\n+  xorpd(xmm3, xmm3);\n+  movl(edx, 30704);\n+  pinsrw(xmm3, edx, 3);\n+  movsd(xmm0, Address(rsp, 112));\n+  movapd(xmm1, xmm0);\n+  movl(ecx, 32768);\n+  movdl(xmm4, ecx);\n+  movsd(xmm5, Address(tmp, 2128));         \/\/ 0x00000000UL, 0xffffe000UL\n+  pextrw(eax, xmm0, 3);\n+  por(xmm0, xmm2);\n+  psllq(xmm0, 5);\n+  movl(ecx, 16352);\n+  psrlq(xmm0, 34);\n+  rcpss(xmm0, xmm0);\n+  psllq(xmm1, 12);\n+  pshufd(xmm6, xmm5, 228);\n+  psrlq(xmm1, 12);\n+  subl(eax, 16);\n+  cmpl(eax, 32736);\n+  jcc(Assembler::aboveEqual, L_2TAG_PACKET_0_0_2);\n+\n+  bind(L_2TAG_PACKET_1_0_2);\n+  paddd(xmm0, xmm4);\n+  por(xmm1, xmm3);\n+  movdl(edx, xmm0);\n+  psllq(xmm0, 29);\n+  pand(xmm5, xmm1);\n+  pand(xmm0, xmm6);\n+  subsd(xmm1, xmm5);\n+  mulpd(xmm5, xmm0);\n+  andl(eax, 32752);\n+  subl(eax, ecx);\n+  cvtsi2sdl(xmm7, eax);\n+  mulsd(xmm1, xmm0);\n+  movsd(xmm6, Address(tmp, 2064));         \/\/ 0xfefa3800UL, 0x3fa62e42UL\n+  movdqu(xmm3, Address(tmp, 2080));        \/\/ 0x92492492UL, 0x3fc24924UL, 0x00000000UL, 0xbfd00000UL\n+  subsd(xmm5, xmm2);\n+  andl(edx, 16711680);\n+  shrl(edx, 12);\n+  movdqu(xmm0, Address(tmp, edx));\n+  movdqu(xmm4, Address(tmp, 2096));        \/\/ 0x3d6fb175UL, 0xbfc5555eUL, 0x55555555UL, 0x3fd55555UL\n+  addsd(xmm1, xmm5);\n+  movdqu(xmm2, Address(tmp, 2112));        \/\/ 0x9999999aUL, 0x3fc99999UL, 0x00000000UL, 0xbfe00000UL\n+  mulsd(xmm6, xmm7);\n+  pshufd(xmm5, xmm1, 68);\n+  mulsd(xmm7, Address(tmp, 2072));         \/\/ 0x93c76730UL, 0x3ceef357UL, 0x92492492UL, 0x3fc24924UL\n+  mulsd(xmm3, xmm1);\n+  addsd(xmm0, xmm6);\n+  mulpd(xmm4, xmm5);\n+  mulpd(xmm5, xmm5);\n+  pshufd(xmm6, xmm0, 228);\n+  addsd(xmm0, xmm1);\n+  addpd(xmm4, xmm2);\n+  mulpd(xmm3, xmm5);\n+  subsd(xmm6, xmm0);\n+  mulsd(xmm4, xmm1);\n+  pshufd(xmm2, xmm0, 238);\n+  addsd(xmm1, xmm6);\n+  mulsd(xmm5, xmm5);\n+  addsd(xmm7, xmm2);\n+  addpd(xmm4, xmm3);\n+  addsd(xmm1, xmm7);\n+  mulpd(xmm4, xmm5);\n+  addsd(xmm1, xmm4);\n+  pshufd(xmm5, xmm4, 238);\n+  addsd(xmm1, xmm5);\n+  addsd(xmm0, xmm1);\n+  jmp(L_2TAG_PACKET_2_0_2);\n+\n+  bind(L_2TAG_PACKET_0_0_2);\n+  movsd(xmm0, Address(rsp, 112));\n+  movdqu(xmm1, xmm0);\n+  addl(eax, 16);\n+  cmpl(eax, 32768);\n+  jcc(Assembler::aboveEqual, L_2TAG_PACKET_3_0_2);\n+  cmpl(eax, 16);\n+  jcc(Assembler::below, L_2TAG_PACKET_4_0_2);\n+\n+  bind(L_2TAG_PACKET_5_0_2);\n+  addsd(xmm0, xmm0);\n+  jmp(L_2TAG_PACKET_2_0_2);\n+\n+  bind(L_2TAG_PACKET_6_0_2);\n+  jcc(Assembler::above, L_2TAG_PACKET_5_0_2);\n+  cmpl(edx, 0);\n+  jcc(Assembler::above, L_2TAG_PACKET_5_0_2);\n+  jmp(L_2TAG_PACKET_7_0_2);\n+\n+  bind(L_2TAG_PACKET_3_0_2);\n+  movdl(edx, xmm1);\n+  psrlq(xmm1, 32);\n+  movdl(ecx, xmm1);\n+  addl(ecx, ecx);\n+  cmpl(ecx, -2097152);\n+  jcc(Assembler::aboveEqual, L_2TAG_PACKET_6_0_2);\n+  orl(edx, ecx);\n+  cmpl(edx, 0);\n+  jcc(Assembler::equal, L_2TAG_PACKET_8_0_2);\n+\n+  bind(L_2TAG_PACKET_7_0_2);\n+  xorpd(xmm1, xmm1);\n+  xorpd(xmm0, xmm0);\n+  movl(eax, 32752);\n+  pinsrw(xmm1, eax, 3);\n+  movl(edx, 3);\n+  mulsd(xmm0, xmm1);\n+\n+  bind(L_2TAG_PACKET_9_0_2);\n+  movsd(Address(rsp, 0), xmm0);\n+  movsd(xmm0, Address(rsp, 112));\n+  fld_d(Address(rsp, 0));\n+  jmp(L_2TAG_PACKET_10_0_2);\n+\n+  bind(L_2TAG_PACKET_8_0_2);\n+  xorpd(xmm1, xmm1);\n+  xorpd(xmm0, xmm0);\n+  movl(eax, 49136);\n+  pinsrw(xmm0, eax, 3);\n+  divsd(xmm0, xmm1);\n+  movl(edx, 2);\n+  jmp(L_2TAG_PACKET_9_0_2);\n+\n+  bind(L_2TAG_PACKET_4_0_2);\n+  movdl(edx, xmm1);\n+  psrlq(xmm1, 32);\n+  movdl(ecx, xmm1);\n+  orl(edx, ecx);\n+  cmpl(edx, 0);\n+  jcc(Assembler::equal, L_2TAG_PACKET_8_0_2);\n+  xorpd(xmm1, xmm1);\n+  movl(eax, 18416);\n+  pinsrw(xmm1, eax, 3);\n+  mulsd(xmm0, xmm1);\n+  movapd(xmm1, xmm0);\n+  pextrw(eax, xmm0, 3);\n+  por(xmm0, xmm2);\n+  psllq(xmm0, 5);\n+  movl(ecx, 18416);\n+  psrlq(xmm0, 34);\n+  rcpss(xmm0, xmm0);\n+  psllq(xmm1, 12);\n+  pshufd(xmm6, xmm5, 228);\n+  psrlq(xmm1, 12);\n+  jmp(L_2TAG_PACKET_1_0_2);\n+\n+  bind(L_2TAG_PACKET_2_0_2);\n+  movsd(Address(rsp, 24), xmm0);\n+  fld_d(Address(rsp, 24));\n+\n+  bind(L_2TAG_PACKET_10_0_2);\n+  movl(tmp, Address(rsp, 40));\n+}\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86_32_log.cpp","additions":345,"deletions":0,"binary":false,"changes":345,"status":"added"},{"patch":"@@ -0,0 +1,358 @@\n+\/*\n+* Copyright (c) 2016, 2021, Intel Corporation. All rights reserved.\n+* Intel Math Library (LIBM) Source Code\n+*\n+* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+*\n+* This code is free software; you can redistribute it and\/or modify it\n+* under the terms of the GNU General Public License version 2 only, as\n+* published by the Free Software Foundation.\n+*\n+* This code is distributed in the hope that it will be useful, but WITHOUT\n+* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+* version 2 for more details (a copy is included in the LICENSE file that\n+* accompanied this code).\n+*\n+* You should have received a copy of the GNU General Public License version\n+* 2 along with this work; if not, write to the Free Software Foundation,\n+* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+*\n+* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+* or visit www.oracle.com if you need additional information or have any\n+* questions.\n+*\n+*\/\n+\n+#include \"precompiled.hpp\"\n+#include \"asm\/assembler.hpp\"\n+#include \"asm\/assembler.inline.hpp\"\n+#include \"macroAssembler_x86.hpp\"\n+#include \"runtime\/stubRoutines.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n+\n+\/******************************************************************************\/\n+\/\/                     ALGORITHM DESCRIPTION - LOG10()\n+\/\/                     ---------------------\n+\/\/\n+\/\/    Let x=2^k * mx, mx in [1,2)\n+\/\/\n+\/\/    Get B~1\/mx based on the output of rcpss instruction (B0)\n+\/\/    B = int((B0*LH*2^7+0.5))\/2^7\n+\/\/    LH is a short approximation for log10(e)\n+\/\/\n+\/\/    Reduced argument: r=B*mx-LH (computed accurately in high and low parts)\n+\/\/\n+\/\/    Result:  k*log10(2) - log(B) + p(r)\n+\/\/             p(r) is a degree 7 polynomial\n+\/\/             -log(B) read from data table (high, low parts)\n+\/\/             Result is formed from high and low parts\n+\/\/\n+\/\/ Special cases:\n+\/\/  log10(0) = -INF with divide-by-zero exception raised\n+\/\/  log10(1) = +0\n+\/\/  log10(x) = NaN with invalid exception raised if x < -0, including -INF\n+\/\/  log10(+INF) = +INF\n+\/\/\n+\/******************************************************************************\/\n+\n+\/\/ The 32 bit code is at most SSE2 compliant\n+\n+ATTRIBUTE_ALIGNED(16) juint _static_const_table_log10[] =\n+{\n+    0x509f7800UL, 0x3fd34413UL, 0x1f12b358UL, 0x3d1fef31UL, 0x80333400UL,\n+    0x3fd32418UL, 0xc671d9d0UL, 0xbcf542bfUL, 0x51195000UL, 0x3fd30442UL,\n+    0x78a4b0c3UL, 0x3d18216aUL, 0x6fc79400UL, 0x3fd2e490UL, 0x80fa389dUL,\n+    0xbc902869UL, 0x89d04000UL, 0x3fd2c502UL, 0x75c2f564UL, 0x3d040754UL,\n+    0x4ddd1c00UL, 0x3fd2a598UL, 0xd219b2c3UL, 0xbcfa1d84UL, 0x6baa7c00UL,\n+    0x3fd28651UL, 0xfd9abec1UL, 0x3d1be6d3UL, 0x94028800UL, 0x3fd2672dUL,\n+    0xe289a455UL, 0xbd1ede5eUL, 0x78b86400UL, 0x3fd2482cUL, 0x6734d179UL,\n+    0x3d1fe79bUL, 0xcca3c800UL, 0x3fd2294dUL, 0x981a40b8UL, 0xbced34eaUL,\n+    0x439c5000UL, 0x3fd20a91UL, 0xcc392737UL, 0xbd1a9cc3UL, 0x92752c00UL,\n+    0x3fd1ebf6UL, 0x03c9afe7UL, 0x3d1e98f8UL, 0x6ef8dc00UL, 0x3fd1cd7dUL,\n+    0x71dae7f4UL, 0x3d08a86cUL, 0x8fe4dc00UL, 0x3fd1af25UL, 0xee9185a1UL,\n+    0xbcff3412UL, 0xace59400UL, 0x3fd190eeUL, 0xc2cab353UL, 0x3cf17ed9UL,\n+    0x7e925000UL, 0x3fd172d8UL, 0x6952c1b2UL, 0x3cf1521cUL, 0xbe694400UL,\n+    0x3fd154e2UL, 0xcacb79caUL, 0xbd0bdc78UL, 0x26cbac00UL, 0x3fd1370dUL,\n+    0xf71f4de1UL, 0xbd01f8beUL, 0x72fa0800UL, 0x3fd11957UL, 0x55bf910bUL,\n+    0x3c946e2bUL, 0x5f106000UL, 0x3fd0fbc1UL, 0x39e639c1UL, 0x3d14a84bUL,\n+    0xa802a800UL, 0x3fd0de4aUL, 0xd3f31d5dUL, 0xbd178385UL, 0x0b992000UL,\n+    0x3fd0c0f3UL, 0x3843106fUL, 0xbd1f602fUL, 0x486ce800UL, 0x3fd0a3baUL,\n+    0x8819497cUL, 0x3cef987aUL, 0x1de49400UL, 0x3fd086a0UL, 0x1caa0467UL,\n+    0x3d0faec7UL, 0x4c30cc00UL, 0x3fd069a4UL, 0xa4424372UL, 0xbd1618fcUL,\n+    0x94490000UL, 0x3fd04cc6UL, 0x946517d2UL, 0xbd18384bUL, 0xb7e84000UL,\n+    0x3fd03006UL, 0xe0109c37UL, 0xbd19a6acUL, 0x798a0c00UL, 0x3fd01364UL,\n+    0x5121e864UL, 0xbd164cf7UL, 0x38ce8000UL, 0x3fcfedbfUL, 0x46214d1aUL,\n+    0xbcbbc402UL, 0xc8e62000UL, 0x3fcfb4efUL, 0xdab93203UL, 0x3d1e0176UL,\n+    0x2cb02800UL, 0x3fcf7c5aUL, 0x2a2ea8e4UL, 0xbcfec86aUL, 0xeeeaa000UL,\n+    0x3fcf43fdUL, 0xc18e49a4UL, 0x3cf110a8UL, 0x9bb6e800UL, 0x3fcf0bdaUL,\n+    0x923cc9c0UL, 0xbd15ce99UL, 0xc093f000UL, 0x3fced3efUL, 0x4d4b51e9UL,\n+    0x3d1a04c7UL, 0xec58f800UL, 0x3fce9c3cUL, 0x163cad59UL, 0x3cac8260UL,\n+    0x9a907000UL, 0x3fce2d7dUL, 0x3fa93646UL, 0x3ce4a1c0UL, 0x37311000UL,\n+    0x3fcdbf99UL, 0x32abd1fdUL, 0x3d07ea9dUL, 0x6744b800UL, 0x3fcd528cUL,\n+    0x4dcbdfd4UL, 0xbd1b08e2UL, 0xe36de800UL, 0x3fcce653UL, 0x0b7b7f7fUL,\n+    0xbd1b8f03UL, 0x77506800UL, 0x3fcc7aecUL, 0xa821c9fbUL, 0x3d13c163UL,\n+    0x00ff8800UL, 0x3fcc1053UL, 0x536bca76UL, 0xbd074ee5UL, 0x70719800UL,\n+    0x3fcba684UL, 0xd7da9b6bUL, 0xbd1fbf16UL, 0xc6f8d800UL, 0x3fcb3d7dUL,\n+    0xe2220bb3UL, 0x3d1a295dUL, 0x16c15800UL, 0x3fcad53cUL, 0xe724911eUL,\n+    0xbcf55822UL, 0x82533800UL, 0x3fca6dbcUL, 0x6d982371UL, 0x3cac567cUL,\n+    0x3c19e800UL, 0x3fca06fcUL, 0x84d17d80UL, 0x3d1da204UL, 0x85ef8000UL,\n+    0x3fc9a0f8UL, 0x54466a6aUL, 0xbd002204UL, 0xb0ac2000UL, 0x3fc93baeUL,\n+    0xd601fd65UL, 0x3d18840cUL, 0x1bb9b000UL, 0x3fc8d71cUL, 0x7bf58766UL,\n+    0xbd14f897UL, 0x34aae800UL, 0x3fc8733eUL, 0x3af6ac24UL, 0xbd0f5c45UL,\n+    0x76d68000UL, 0x3fc81012UL, 0x4303e1a1UL, 0xbd1f9a80UL, 0x6af57800UL,\n+    0x3fc7ad96UL, 0x43fbcb46UL, 0x3cf4c33eUL, 0xa6c51000UL, 0x3fc74bc7UL,\n+    0x70f0eac5UL, 0xbd192e3bUL, 0xccab9800UL, 0x3fc6eaa3UL, 0xc0093dfeUL,\n+    0xbd0faf15UL, 0x8b60b800UL, 0x3fc68a28UL, 0xde78d5fdUL, 0xbc9ea4eeUL,\n+    0x9d987000UL, 0x3fc62a53UL, 0x962bea6eUL, 0xbd194084UL, 0xc9b0e800UL,\n+    0x3fc5cb22UL, 0x888dd999UL, 0x3d1fe201UL, 0xe1634800UL, 0x3fc56c93UL,\n+    0x16ada7adUL, 0x3d1b1188UL, 0xc176c000UL, 0x3fc50ea4UL, 0x4159b5b5UL,\n+    0xbcf09c08UL, 0x51766000UL, 0x3fc4b153UL, 0x84393d23UL, 0xbcf6a89cUL,\n+    0x83695000UL, 0x3fc4549dUL, 0x9f0b8bbbUL, 0x3d1c4b8cUL, 0x538d5800UL,\n+    0x3fc3f881UL, 0xf49df747UL, 0x3cf89b99UL, 0xc8138000UL, 0x3fc39cfcUL,\n+    0xd503b834UL, 0xbd13b99fUL, 0xf0df0800UL, 0x3fc3420dUL, 0xf011b386UL,\n+    0xbd05d8beUL, 0xe7466800UL, 0x3fc2e7b2UL, 0xf39c7bc2UL, 0xbd1bb94eUL,\n+    0xcdd62800UL, 0x3fc28de9UL, 0x05e6d69bUL, 0xbd10ed05UL, 0xd015d800UL,\n+    0x3fc234b0UL, 0xe29b6c9dUL, 0xbd1ff967UL, 0x224ea800UL, 0x3fc1dc06UL,\n+    0x727711fcUL, 0xbcffb30dUL, 0x01540000UL, 0x3fc183e8UL, 0x39786c5aUL,\n+    0x3cc23f57UL, 0xb24d9800UL, 0x3fc12c54UL, 0xc905a342UL, 0x3d003a1dUL,\n+    0x82835800UL, 0x3fc0d54aUL, 0x9b9920c0UL, 0x3d03b25aUL, 0xc72ac000UL,\n+    0x3fc07ec7UL, 0x46f26a24UL, 0x3cf0fa41UL, 0xdd35d800UL, 0x3fc028caUL,\n+    0x41d9d6dcUL, 0x3d034a65UL, 0x52474000UL, 0x3fbfa6a4UL, 0x44f66449UL,\n+    0x3d19cad3UL, 0x2da3d000UL, 0x3fbefcb8UL, 0x67832999UL, 0x3d18400fUL,\n+    0x32a10000UL, 0x3fbe53ceUL, 0x9c0e3b1aUL, 0xbcff62fdUL, 0x556b7000UL,\n+    0x3fbdabe3UL, 0x02976913UL, 0xbcf8243bUL, 0x97e88000UL, 0x3fbd04f4UL,\n+    0xec793797UL, 0x3d1c0578UL, 0x09647000UL, 0x3fbc5effUL, 0x05fc0565UL,\n+    0xbd1d799eUL, 0xc6426000UL, 0x3fbbb9ffUL, 0x4625f5edUL, 0x3d1f5723UL,\n+    0xf7afd000UL, 0x3fbb15f3UL, 0xdd5aae61UL, 0xbd1a7e1eUL, 0xd358b000UL,\n+    0x3fba72d8UL, 0x3314e4d3UL, 0x3d17bc91UL, 0x9b1f5000UL, 0x3fb9d0abUL,\n+    0x9a4d514bUL, 0x3cf18c9bUL, 0x9cd4e000UL, 0x3fb92f69UL, 0x7e4496abUL,\n+    0x3cf1f96dUL, 0x31f4f000UL, 0x3fb88f10UL, 0xf56479e7UL, 0x3d165818UL,\n+    0xbf628000UL, 0x3fb7ef9cUL, 0x26bf486dUL, 0xbd1113a6UL, 0xb526b000UL,\n+    0x3fb7510cUL, 0x1a1c3384UL, 0x3ca9898dUL, 0x8e31e000UL, 0x3fb6b35dUL,\n+    0xb3875361UL, 0xbd0661acUL, 0xd01de000UL, 0x3fb6168cUL, 0x2a7cacfaUL,\n+    0xbd1bdf10UL, 0x0af23000UL, 0x3fb57a98UL, 0xff868816UL, 0x3cf046d0UL,\n+    0xd8ea0000UL, 0x3fb4df7cUL, 0x1515fbe7UL, 0xbd1fd529UL, 0xde3b2000UL,\n+    0x3fb44538UL, 0x6e59a132UL, 0x3d1faeeeUL, 0xc8df9000UL, 0x3fb3abc9UL,\n+    0xf1322361UL, 0xbd198807UL, 0x505f1000UL, 0x3fb3132dUL, 0x0888e6abUL,\n+    0x3d1e5380UL, 0x359bd000UL, 0x3fb27b61UL, 0xdfbcbb22UL, 0xbcfe2724UL,\n+    0x429ee000UL, 0x3fb1e463UL, 0x6eb4c58cUL, 0xbcfe4dd6UL, 0x4a673000UL,\n+    0x3fb14e31UL, 0x4ce1ac9bUL, 0x3d1ba691UL, 0x28b96000UL, 0x3fb0b8c9UL,\n+    0x8c7813b8UL, 0xbd0b3872UL, 0xc1f08000UL, 0x3fb02428UL, 0xc2bc8c2cUL,\n+    0x3cb5ea6bUL, 0x05a1a000UL, 0x3faf209cUL, 0x72e8f18eUL, 0xbce8df84UL,\n+    0xc0b5e000UL, 0x3fadfa6dUL, 0x9fdef436UL, 0x3d087364UL, 0xaf416000UL,\n+    0x3facd5c2UL, 0x1068c3a9UL, 0x3d0827e7UL, 0xdb356000UL, 0x3fabb296UL,\n+    0x120a34d3UL, 0x3d101a9fUL, 0x5dfea000UL, 0x3faa90e6UL, 0xdaded264UL,\n+    0xbd14c392UL, 0x6034c000UL, 0x3fa970adUL, 0x1c9d06a9UL, 0xbd1b705eUL,\n+    0x194c6000UL, 0x3fa851e8UL, 0x83996ad9UL, 0xbd0117bcUL, 0xcf4ac000UL,\n+    0x3fa73492UL, 0xb1a94a62UL, 0xbca5ea42UL, 0xd67b4000UL, 0x3fa618a9UL,\n+    0x75aed8caUL, 0xbd07119bUL, 0x9126c000UL, 0x3fa4fe29UL, 0x5291d533UL,\n+    0x3d12658fUL, 0x6f4d4000UL, 0x3fa3e50eUL, 0xcd2c5cd9UL, 0x3d1d5c70UL,\n+    0xee608000UL, 0x3fa2cd54UL, 0xd1008489UL, 0x3d1a4802UL, 0x9900e000UL,\n+    0x3fa1b6f9UL, 0x54fb5598UL, 0xbd16593fUL, 0x06bb6000UL, 0x3fa0a1f9UL,\n+    0x64ef57b4UL, 0xbd17636bUL, 0xb7940000UL, 0x3f9f1c9fUL, 0xee6a4737UL,\n+    0x3cb5d479UL, 0x91aa0000UL, 0x3f9cf7f5UL, 0x3a16373cUL, 0x3d087114UL,\n+    0x156b8000UL, 0x3f9ad5edUL, 0x836c554aUL, 0x3c6900b0UL, 0xd4764000UL,\n+    0x3f98b67fUL, 0xed12f17bUL, 0xbcffc974UL, 0x77dec000UL, 0x3f9699a7UL,\n+    0x232ce7eaUL, 0x3d1e35bbUL, 0xbfbf4000UL, 0x3f947f5dUL, 0xd84ffa6eUL,\n+    0x3d0e0a49UL, 0x82c7c000UL, 0x3f92679cUL, 0x8d170e90UL, 0xbd14d9f2UL,\n+    0xadd20000UL, 0x3f90525dUL, 0x86d9f88eUL, 0x3cdeb986UL, 0x86f10000UL,\n+    0x3f8c7f36UL, 0xb9e0a517UL, 0x3ce29faaUL, 0xb75c8000UL, 0x3f885e9eUL,\n+    0x542568cbUL, 0xbd1f7bdbUL, 0x46b30000UL, 0x3f8442e8UL, 0xb954e7d9UL,\n+    0x3d1e5287UL, 0xb7e60000UL, 0x3f802c07UL, 0x22da0b17UL, 0xbd19fb27UL,\n+    0x6c8b0000UL, 0x3f7833e3UL, 0x821271efUL, 0xbd190f96UL, 0x29910000UL,\n+    0x3f701936UL, 0xbc3491a5UL, 0xbd1bcf45UL, 0x354a0000UL, 0x3f600fe3UL,\n+    0xc0ff520aUL, 0xbd19d71cUL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x509f7800UL, 0x3f934413UL, 0x1f12b358UL, 0x3cdfef31UL,\n+    0xc1a5f12eUL, 0x40358874UL, 0x64d4ef0dUL, 0xc0089309UL, 0x385593b1UL,\n+    0xc025c917UL, 0xdc963467UL, 0x3ffc6a02UL, 0x7f9d3aa1UL, 0x4016ab9fUL,\n+    0xdc77b115UL, 0xbff27af2UL, 0xf8000000UL, 0xffffffffUL, 0x00000000UL,\n+    0xffffe000UL, 0x00000000UL, 0x3fdbc000UL, 0xbf2e4108UL, 0x3f5a7a6cUL\n+};\n+\/\/registers,\n+\/\/ input: xmm0\n+\/\/ scratch: xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7\n+\/\/          rax, rdx, rcx, rbx (tmp)\n+\n+void MacroAssembler::fast_log10(XMMRegister xmm0, XMMRegister xmm1, XMMRegister xmm2, XMMRegister xmm3,\n+                                XMMRegister xmm4, XMMRegister xmm5, XMMRegister xmm6, XMMRegister xmm7,\n+                                Register eax, Register ecx, Register edx, Register tmp) {\n+\n+  Label L_2TAG_PACKET_0_0_2, L_2TAG_PACKET_1_0_2, L_2TAG_PACKET_2_0_2, L_2TAG_PACKET_3_0_2;\n+  Label L_2TAG_PACKET_4_0_2, L_2TAG_PACKET_5_0_2, L_2TAG_PACKET_6_0_2, L_2TAG_PACKET_7_0_2;\n+  Label L_2TAG_PACKET_8_0_2, L_2TAG_PACKET_9_0_2, L_2TAG_PACKET_10_0_2;\n+\n+  assert_different_registers(tmp, eax, ecx, edx);\n+\n+  address static_const_table_log10 = (address)_static_const_table_log10;\n+\n+  subl(rsp, 104);\n+  movl(Address(rsp, 40), tmp);\n+  lea(tmp, ExternalAddress(static_const_table_log10));\n+  xorpd(xmm2, xmm2);\n+  movl(eax, 16368);\n+  pinsrw(xmm2, eax, 3);\n+  movl(ecx, 1054736384);\n+  movdl(xmm7, ecx);\n+  xorpd(xmm3, xmm3);\n+  movl(edx, 30704);\n+  pinsrw(xmm3, edx, 3);\n+  movsd(xmm0, Address(rsp, 112));\n+  movdqu(xmm1, xmm0);\n+  movl(edx, 32768);\n+  movdl(xmm4, edx);\n+  movdqu(xmm5, Address(tmp, 2128));    \/\/0x3ffc6a02UL, 0x7f9d3aa1UL, 0x4016ab9fUL, 0xdc77b115UL\n+  pextrw(eax, xmm0, 3);\n+  por(xmm0, xmm2);\n+  movl(ecx, 16352);\n+  psllq(xmm0, 5);\n+  movsd(xmm2, Address(tmp, 2144));    \/\/0xbff27af2UL, 0xf8000000UL, 0xffffffffUL, 0x00000000UL\n+  psrlq(xmm0, 34);\n+  rcpss(xmm0, xmm0);\n+  psllq(xmm1, 12);\n+  pshufd(xmm6, xmm5, 78);\n+  psrlq(xmm1, 12);\n+  subl(eax, 16);\n+  cmpl(eax, 32736);\n+  jcc(Assembler::aboveEqual, L_2TAG_PACKET_0_0_2);\n+\n+  bind(L_2TAG_PACKET_1_0_2);\n+  mulss(xmm0, xmm7);\n+  por(xmm1, xmm3);\n+  andpd(xmm5, xmm1);\n+  paddd(xmm0, xmm4);\n+  subsd(xmm1, xmm5);\n+  movdl(edx, xmm0);\n+  psllq(xmm0, 29);\n+  andpd(xmm0, xmm6);\n+  andl(eax, 32752);\n+  subl(eax, ecx);\n+  cvtsi2sdl(xmm7, eax);\n+  mulpd(xmm5, xmm0);\n+  mulsd(xmm1, xmm0);\n+  movsd(xmm6, Address(tmp, 2064));    \/\/0xbd19d71cUL, 0x00000000UL, 0x00000000UL, 0x00000000UL\n+  movdqu(xmm3, Address(tmp, 2080));    \/\/0x00000000UL, 0x509f7800UL, 0x3f934413UL, 0x1f12b358UL\n+  subsd(xmm5, xmm2);\n+  andl(edx, 16711680);\n+  shrl(edx, 12);\n+  movdqu(xmm0, Address(tmp, edx, Address::times_1, -1504));\n+  movdqu(xmm4, Address(tmp, 2096));    \/\/0x3cdfef31UL, 0xc1a5f12eUL, 0x40358874UL, 0x64d4ef0dUL\n+  addsd(xmm1, xmm5);\n+  movdqu(xmm2, Address(tmp, 2112));    \/\/0xc0089309UL, 0x385593b1UL, 0xc025c917UL, 0xdc963467UL\n+  mulsd(xmm6, xmm7);\n+  pshufd(xmm5, xmm1, 68);\n+  mulsd(xmm7, Address(tmp, 2072));    \/\/0x00000000UL, 0x00000000UL, 0x00000000UL, 0x509f7800UL\n+  mulsd(xmm3, xmm1);\n+  addsd(xmm0, xmm6);\n+  mulpd(xmm4, xmm5);\n+  movsd(xmm6, Address(tmp, 2152));    \/\/0xffffffffUL, 0x00000000UL, 0xffffe000UL, 0x00000000UL\n+  mulpd(xmm5, xmm5);\n+  addpd(xmm4, xmm2);\n+  mulpd(xmm3, xmm5);\n+  pshufd(xmm2, xmm0, 228);\n+  addsd(xmm0, xmm1);\n+  mulsd(xmm4, xmm1);\n+  subsd(xmm2, xmm0);\n+  mulsd(xmm6, xmm1);\n+  addsd(xmm1, xmm2);\n+  pshufd(xmm2, xmm0, 238);\n+  mulsd(xmm5, xmm5);\n+  addsd(xmm7, xmm2);\n+  addsd(xmm1, xmm6);\n+  addpd(xmm4, xmm3);\n+  addsd(xmm1, xmm7);\n+  mulpd(xmm4, xmm5);\n+  addsd(xmm1, xmm4);\n+  pshufd(xmm5, xmm4, 238);\n+  addsd(xmm1, xmm5);\n+  addsd(xmm0, xmm1);\n+  jmp(L_2TAG_PACKET_2_0_2);\n+\n+  bind(L_2TAG_PACKET_0_0_2);\n+  movsd(xmm0, Address(rsp, 112));    \/\/0xbcfa1d84UL, 0x6baa7c00UL, 0x3fd28651UL, 0xfd9abec1UL\n+  movdqu(xmm1, xmm0);\n+  addl(eax, 16);\n+  cmpl(eax, 32768);\n+  jcc(Assembler::aboveEqual, L_2TAG_PACKET_3_0_2);\n+  cmpl(eax, 16);\n+  jcc(Assembler::below, L_2TAG_PACKET_4_0_2);\n+\n+  bind(L_2TAG_PACKET_5_0_2);\n+  addsd(xmm0, xmm0);\n+  jmp(L_2TAG_PACKET_2_0_2);\n+\n+  bind(L_2TAG_PACKET_6_0_2);\n+  jcc(Assembler::above, L_2TAG_PACKET_5_0_2);\n+  cmpl(edx, 0);\n+  jcc(Assembler::above, L_2TAG_PACKET_5_0_2);\n+  jmp(L_2TAG_PACKET_7_0_2);\n+\n+  bind(L_2TAG_PACKET_3_0_2);\n+  movdl(edx, xmm1);\n+  psrlq(xmm1, 32);\n+  movdl(ecx, xmm1);\n+  addl(ecx, ecx);\n+  cmpl(ecx, -2097152);\n+  jcc(Assembler::aboveEqual, L_2TAG_PACKET_6_0_2);\n+  orl(edx, ecx);\n+  cmpl(edx, 0);\n+  jcc(Assembler::equal, L_2TAG_PACKET_8_0_2);\n+\n+  bind(L_2TAG_PACKET_7_0_2);\n+  xorpd(xmm1, xmm1);\n+  xorpd(xmm0, xmm0);\n+  movl(eax, 32752);\n+  pinsrw(xmm1, eax, 3);\n+  movl(edx, 9);\n+  mulsd(xmm0, xmm1);\n+\n+  bind(L_2TAG_PACKET_9_0_2);\n+  movsd(Address(rsp, 0), xmm0);\n+  movsd(xmm0, Address(rsp, 112));    \/\/0xbcfa1d84UL, 0x6baa7c00UL, 0x3fd28651UL, 0xfd9abec1UL\n+  fld_d(Address(rsp, 0));\n+  jmp(L_2TAG_PACKET_10_0_2);\n+\n+  bind(L_2TAG_PACKET_8_0_2);\n+  xorpd(xmm1, xmm1);\n+  xorpd(xmm0, xmm0);\n+  movl(eax, 49136);\n+  pinsrw(xmm0, eax, 3);\n+  divsd(xmm0, xmm1);\n+  movl(edx, 8);\n+  jmp(L_2TAG_PACKET_9_0_2);\n+\n+  bind(L_2TAG_PACKET_4_0_2);\n+  movdl(edx, xmm1);\n+  psrlq(xmm1, 32);\n+  movdl(ecx, xmm1);\n+  orl(edx, ecx);\n+  cmpl(edx, 0);\n+  jcc(Assembler::equal, L_2TAG_PACKET_8_0_2);\n+  xorpd(xmm1, xmm1);\n+  movl(eax, 18416);\n+  pinsrw(xmm1, eax, 3);\n+  mulsd(xmm0, xmm1);\n+  xorpd(xmm2, xmm2);\n+  movl(eax, 16368);\n+  pinsrw(xmm2, eax, 3);\n+  movdqu(xmm1, xmm0);\n+  pextrw(eax, xmm0, 3);\n+  por(xmm0, xmm2);\n+  movl(ecx, 18416);\n+  psllq(xmm0, 5);\n+  movsd(xmm2, Address(tmp, 2144));    \/\/0xbff27af2UL, 0xf8000000UL, 0xffffffffUL, 0x00000000UL\n+  psrlq(xmm0, 34);\n+  rcpss(xmm0, xmm0);\n+  psllq(xmm1, 12);\n+  pshufd(xmm6, xmm5, 78);\n+  psrlq(xmm1, 12);\n+  jmp(L_2TAG_PACKET_1_0_2);\n+\n+  bind(L_2TAG_PACKET_2_0_2);\n+  movsd(Address(rsp, 24), xmm0);\n+  fld_d(Address(rsp, 24));\n+\n+  bind(L_2TAG_PACKET_10_0_2);\n+  movl(tmp, Address(rsp, 40));\n+\n+}\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86_32_log10.cpp","additions":358,"deletions":0,"binary":false,"changes":358,"status":"added"},{"patch":"@@ -0,0 +1,1856 @@\n+\/*\n+* Copyright (c) 2016, 2021, Intel Corporation. All rights reserved.\n+* Copyright (C) 2021 THL A29 Limited, a Tencent company. All rights reserved.\n+* Intel Math Library (LIBM) Source Code\n+*\n+* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+*\n+* This code is free software; you can redistribute it and\/or modify it\n+* under the terms of the GNU General Public License version 2 only, as\n+* published by the Free Software Foundation.\n+*\n+* This code is distributed in the hope that it will be useful, but WITHOUT\n+* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+* version 2 for more details (a copy is included in the LICENSE file that\n+* accompanied this code).\n+*\n+* You should have received a copy of the GNU General Public License version\n+* 2 along with this work; if not, write to the Free Software Foundation,\n+* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+*\n+* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+* or visit www.oracle.com if you need additional information or have any\n+* questions.\n+*\n+*\/\n+\n+#include \"precompiled.hpp\"\n+#include \"asm\/assembler.hpp\"\n+#include \"asm\/assembler.inline.hpp\"\n+#include \"macroAssembler_x86.hpp\"\n+#include \"runtime\/stubRoutines.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n+\n+\/******************************************************************************\/\n+\/\/                     ALGORITHM DESCRIPTION  - POW()\n+\/\/                     ---------------------\n+\/\/\n+\/\/    Let x=2^k * mx, mx in [1,2)\n+\/\/\n+\/\/    log2(x) calculation:\n+\/\/\n+\/\/    Get B~1\/mx based on the output of rcpps instruction (B0)\n+\/\/    B = int((B0*LH*2^9+0.5))\/2^9\n+\/\/    LH is a short approximation for log2(e)\n+\/\/\n+\/\/    Reduced argument, scaled by LH:\n+\/\/                r=B*mx-LH (computed accurately in high and low parts)\n+\/\/\n+\/\/    log2(x) result:  k - log2(B) + p(r)\n+\/\/             p(r) is a degree 8 polynomial\n+\/\/             -log2(B) read from data table (high, low parts)\n+\/\/             log2(x) is formed from high and low parts\n+\/\/    For |x| in [1-1\/32, 1+1\/16), a slower but more accurate computation\n+\/\/    based om the same table design is performed.\n+\/\/\n+\/\/   Main path is taken if | floor(log2(|log2(|x|)|) + floor(log2|y|) | < 8,\n+\/\/   to filter out all potential OF\/UF cases.\n+\/\/   exp2(y*log2(x)) is computed using an 8-bit index table and a degree 5\n+\/\/   polynomial\n+\/\/\n+\/\/ Special cases:\n+\/\/  pow(-0,y) = -INF and raises the divide-by-zero exception for y an odd\n+\/\/  integer < 0.\n+\/\/  pow(-0,y) = +INF and raises the divide-by-zero exception for y < 0 and\n+\/\/  not an odd integer.\n+\/\/  pow(-0,y) = -0 for y an odd integer > 0.\n+\/\/  pow(-0,y) = +0 for y > 0 and not an odd integer.\n+\/\/  pow(-1,-INF) = NaN.\n+\/\/  pow(+1,y) = NaN for any y, even a NaN.\n+\/\/  pow(x,-0) = 1 for any x, even a NaN.\n+\/\/  pow(x,y) = a NaN and raises the invalid exception for finite x < 0 and\n+\/\/  finite non-integer y.\n+\/\/  pow(x,-INF) = +INF for |x|<1.\n+\/\/  pow(x,-INF) = +0 for |x|>1.\n+\/\/  pow(x,+INF) = +0 for |x|<1.\n+\/\/  pow(x,+INF) = +INF for |x|>1.\n+\/\/  pow(-INF,y) = -0 for y an odd integer < 0.\n+\/\/  pow(-INF,y) = +0 for y < 0 and not an odd integer.\n+\/\/  pow(-INF,y) = -INF for y an odd integer > 0.\n+\/\/  pow(-INF,y) = +INF for y > 0 and not an odd integer.\n+\/\/  pow(+INF,y) = +0 for y <0.\n+\/\/  pow(+INF,y) = +INF for y >0.\n+\/\/\n+\/******************************************************************************\/\n+\n+\/\/ The 32 bit code is at most SSE2 compliant\n+ATTRIBUTE_ALIGNED(16) juint _static_const_table_pow[] =\n+{\n+    0x00000000UL, 0xbfd61a00UL, 0x00000000UL, 0xbf5dabe1UL, 0xf8000000UL,\n+    0xffffffffUL, 0x00000000UL, 0xfffff800UL, 0x00000000UL, 0x3ff00000UL,\n+    0x00000000UL, 0x00000000UL, 0x20000000UL, 0x3feff00aUL, 0x96621f95UL,\n+    0x3e5b1856UL, 0xe0000000UL, 0x3fefe019UL, 0xe5916f9eUL, 0xbe325278UL,\n+    0x00000000UL, 0x3fefd02fUL, 0x859a1062UL, 0x3e595fb7UL, 0xc0000000UL,\n+    0x3fefc049UL, 0xb245f18fUL, 0xbe529c38UL, 0xe0000000UL, 0x3fefb069UL,\n+    0xad2880a7UL, 0xbe501230UL, 0x60000000UL, 0x3fefa08fUL, 0xc8e72420UL,\n+    0x3e597bd1UL, 0x80000000UL, 0x3fef90baUL, 0xc30c4500UL, 0xbe5d6c75UL,\n+    0xe0000000UL, 0x3fef80eaUL, 0x02c63f43UL, 0x3e2e1318UL, 0xc0000000UL,\n+    0x3fef7120UL, 0xb3d4ccccUL, 0xbe44c52aUL, 0x00000000UL, 0x3fef615cUL,\n+    0xdbd91397UL, 0xbe4e7d6cUL, 0xa0000000UL, 0x3fef519cUL, 0x65c5cd68UL,\n+    0xbe522dc8UL, 0xa0000000UL, 0x3fef41e2UL, 0x46d1306cUL, 0xbe5a840eUL,\n+    0xe0000000UL, 0x3fef322dUL, 0xd2980e94UL, 0x3e5071afUL, 0xa0000000UL,\n+    0x3fef227eUL, 0x773abadeUL, 0xbe5891e5UL, 0xa0000000UL, 0x3fef12d4UL,\n+    0xdc6bf46bUL, 0xbe5cccbeUL, 0xe0000000UL, 0x3fef032fUL, 0xbc7247faUL,\n+    0xbe2bab83UL, 0x80000000UL, 0x3feef390UL, 0xbcaa1e46UL, 0xbe53bb3bUL,\n+    0x60000000UL, 0x3feee3f6UL, 0x5f6c682dUL, 0xbe54c619UL, 0x80000000UL,\n+    0x3feed461UL, 0x5141e368UL, 0xbe4b6d86UL, 0xe0000000UL, 0x3feec4d1UL,\n+    0xec678f76UL, 0xbe369af6UL, 0x80000000UL, 0x3feeb547UL, 0x41301f55UL,\n+    0xbe2d4312UL, 0x60000000UL, 0x3feea5c2UL, 0x676da6bdUL, 0xbe4d8dd0UL,\n+    0x60000000UL, 0x3fee9642UL, 0x57a891c4UL, 0x3e51f991UL, 0xa0000000UL,\n+    0x3fee86c7UL, 0xe4eb491eUL, 0x3e579bf9UL, 0x20000000UL, 0x3fee7752UL,\n+    0xfddc4a2cUL, 0xbe3356e6UL, 0xc0000000UL, 0x3fee67e1UL, 0xd75b5bf1UL,\n+    0xbe449531UL, 0x80000000UL, 0x3fee5876UL, 0xbd423b8eUL, 0x3df54fe4UL,\n+    0x60000000UL, 0x3fee4910UL, 0x330e51b9UL, 0x3e54289cUL, 0x80000000UL,\n+    0x3fee39afUL, 0x8651a95fUL, 0xbe55aad6UL, 0xa0000000UL, 0x3fee2a53UL,\n+    0x5e98c708UL, 0xbe2fc4a9UL, 0xe0000000UL, 0x3fee1afcUL, 0x0989328dUL,\n+    0x3e23958cUL, 0x40000000UL, 0x3fee0babUL, 0xee642abdUL, 0xbe425dd8UL,\n+    0xa0000000UL, 0x3fedfc5eUL, 0xc394d236UL, 0x3e526362UL, 0x20000000UL,\n+    0x3feded17UL, 0xe104aa8eUL, 0x3e4ce247UL, 0xc0000000UL, 0x3fedddd4UL,\n+    0x265a9be4UL, 0xbe5bb77aUL, 0x40000000UL, 0x3fedce97UL, 0x0ecac52fUL,\n+    0x3e4a7cb1UL, 0xe0000000UL, 0x3fedbf5eUL, 0x124cb3b8UL, 0x3e257024UL,\n+    0x80000000UL, 0x3fedb02bUL, 0xe6d4febeUL, 0xbe2033eeUL, 0x20000000UL,\n+    0x3feda0fdUL, 0x39cca00eUL, 0xbe3ddabcUL, 0xc0000000UL, 0x3fed91d3UL,\n+    0xef8a552aUL, 0xbe543390UL, 0x40000000UL, 0x3fed82afUL, 0xb8e85204UL,\n+    0x3e513850UL, 0xe0000000UL, 0x3fed738fUL, 0x3d59fe08UL, 0xbe5db728UL,\n+    0x40000000UL, 0x3fed6475UL, 0x3aa7ead1UL, 0x3e58804bUL, 0xc0000000UL,\n+    0x3fed555fUL, 0xf8a35ba9UL, 0xbe5298b0UL, 0x00000000UL, 0x3fed464fUL,\n+    0x9a88dd15UL, 0x3e5a8cdbUL, 0x40000000UL, 0x3fed3743UL, 0xb0b0a190UL,\n+    0x3e598635UL, 0x80000000UL, 0x3fed283cUL, 0xe2113295UL, 0xbe5c1119UL,\n+    0x80000000UL, 0x3fed193aUL, 0xafbf1728UL, 0xbe492e9cUL, 0x60000000UL,\n+    0x3fed0a3dUL, 0xe4a4ccf3UL, 0x3e19b90eUL, 0x20000000UL, 0x3fecfb45UL,\n+    0xba3cbeb8UL, 0x3e406b50UL, 0xc0000000UL, 0x3fecec51UL, 0x110f7dddUL,\n+    0x3e0d6806UL, 0x40000000UL, 0x3fecdd63UL, 0x7dd7d508UL, 0xbe5a8943UL,\n+    0x80000000UL, 0x3fecce79UL, 0x9b60f271UL, 0xbe50676aUL, 0x80000000UL,\n+    0x3fecbf94UL, 0x0b9ad660UL, 0x3e59174fUL, 0x60000000UL, 0x3fecb0b4UL,\n+    0x00823d9cUL, 0x3e5bbf72UL, 0x20000000UL, 0x3feca1d9UL, 0x38a6ec89UL,\n+    0xbe4d38f9UL, 0x80000000UL, 0x3fec9302UL, 0x3a0b7d8eUL, 0x3e53dbfdUL,\n+    0xc0000000UL, 0x3fec8430UL, 0xc6826b34UL, 0xbe27c5c9UL, 0xc0000000UL,\n+    0x3fec7563UL, 0x0c706381UL, 0xbe593653UL, 0x60000000UL, 0x3fec669bUL,\n+    0x7df34ec7UL, 0x3e461ab5UL, 0xe0000000UL, 0x3fec57d7UL, 0x40e5e7e8UL,\n+    0xbe5c3daeUL, 0x00000000UL, 0x3fec4919UL, 0x5602770fUL, 0xbe55219dUL,\n+    0xc0000000UL, 0x3fec3a5eUL, 0xec7911ebUL, 0x3e5a5d25UL, 0x60000000UL,\n+    0x3fec2ba9UL, 0xb39ea225UL, 0xbe53c00bUL, 0x80000000UL, 0x3fec1cf8UL,\n+    0x967a212eUL, 0x3e5a8ddfUL, 0x60000000UL, 0x3fec0e4cUL, 0x580798bdUL,\n+    0x3e5f53abUL, 0x00000000UL, 0x3febffa5UL, 0xb8282df6UL, 0xbe46b874UL,\n+    0x20000000UL, 0x3febf102UL, 0xe33a6729UL, 0x3e54963fUL, 0x00000000UL,\n+    0x3febe264UL, 0x3b53e88aUL, 0xbe3adce1UL, 0x60000000UL, 0x3febd3caUL,\n+    0xc2585084UL, 0x3e5cde9fUL, 0x80000000UL, 0x3febc535UL, 0xa335c5eeUL,\n+    0xbe39fd9cUL, 0x20000000UL, 0x3febb6a5UL, 0x7325b04dUL, 0x3e42ba15UL,\n+    0x60000000UL, 0x3feba819UL, 0x1564540fUL, 0x3e3a9f35UL, 0x40000000UL,\n+    0x3feb9992UL, 0x83fff592UL, 0xbe5465ceUL, 0xa0000000UL, 0x3feb8b0fUL,\n+    0xb9da63d3UL, 0xbe4b1a0aUL, 0x80000000UL, 0x3feb7c91UL, 0x6d6f1ea4UL,\n+    0x3e557657UL, 0x00000000UL, 0x3feb6e18UL, 0x5e80a1bfUL, 0x3e4ddbb6UL,\n+    0x00000000UL, 0x3feb5fa3UL, 0x1c9eacb5UL, 0x3e592877UL, 0xa0000000UL,\n+    0x3feb5132UL, 0x6d40beb3UL, 0xbe51858cUL, 0xa0000000UL, 0x3feb42c6UL,\n+    0xd740c67bUL, 0x3e427ad2UL, 0x40000000UL, 0x3feb345fUL, 0xa3e0cceeUL,\n+    0xbe5c2fc4UL, 0x40000000UL, 0x3feb25fcUL, 0x8e752b50UL, 0xbe3da3c2UL,\n+    0xc0000000UL, 0x3feb179dUL, 0xa892e7deUL, 0x3e1fb481UL, 0xc0000000UL,\n+    0x3feb0943UL, 0x21ed71e9UL, 0xbe365206UL, 0x20000000UL, 0x3feafaeeUL,\n+    0x0e1380a3UL, 0x3e5c5b7bUL, 0x20000000UL, 0x3feaec9dUL, 0x3c3d640eUL,\n+    0xbe5dbbd0UL, 0x60000000UL, 0x3feade50UL, 0x8f97a715UL, 0x3e3a8ec5UL,\n+    0x20000000UL, 0x3fead008UL, 0x23ab2839UL, 0x3e2fe98aUL, 0x40000000UL,\n+    0x3feac1c4UL, 0xf4bbd50fUL, 0x3e54d8f6UL, 0xe0000000UL, 0x3feab384UL,\n+    0x14757c4dUL, 0xbe48774cUL, 0xc0000000UL, 0x3feaa549UL, 0x7c7b0eeaUL,\n+    0x3e5b51bbUL, 0x20000000UL, 0x3fea9713UL, 0xf56f7013UL, 0x3e386200UL,\n+    0xe0000000UL, 0x3fea88e0UL, 0xbe428ebeUL, 0xbe514af5UL, 0xe0000000UL,\n+    0x3fea7ab2UL, 0x8d0e4496UL, 0x3e4f9165UL, 0x60000000UL, 0x3fea6c89UL,\n+    0xdbacc5d5UL, 0xbe5c063bUL, 0x20000000UL, 0x3fea5e64UL, 0x3f19d970UL,\n+    0xbe5a0c8cUL, 0x20000000UL, 0x3fea5043UL, 0x09ea3e6bUL, 0x3e5065dcUL,\n+    0x80000000UL, 0x3fea4226UL, 0x78df246cUL, 0x3e5e05f6UL, 0x40000000UL,\n+    0x3fea340eUL, 0x4057d4a0UL, 0x3e431b2bUL, 0x40000000UL, 0x3fea25faUL,\n+    0x82867bb5UL, 0x3e4b76beUL, 0xa0000000UL, 0x3fea17eaUL, 0x9436f40aUL,\n+    0xbe5aad39UL, 0x20000000UL, 0x3fea09dfUL, 0x4b5253b3UL, 0x3e46380bUL,\n+    0x00000000UL, 0x3fe9fbd8UL, 0x8fc52466UL, 0xbe386f9bUL, 0x20000000UL,\n+    0x3fe9edd5UL, 0x22d3f344UL, 0xbe538347UL, 0x60000000UL, 0x3fe9dfd6UL,\n+    0x1ac33522UL, 0x3e5dbc53UL, 0x00000000UL, 0x3fe9d1dcUL, 0xeabdff1dUL,\n+    0x3e40fc0cUL, 0xe0000000UL, 0x3fe9c3e5UL, 0xafd30e73UL, 0xbe585e63UL,\n+    0xe0000000UL, 0x3fe9b5f3UL, 0xa52f226aUL, 0xbe43e8f9UL, 0x20000000UL,\n+    0x3fe9a806UL, 0xecb8698dUL, 0xbe515b36UL, 0x80000000UL, 0x3fe99a1cUL,\n+    0xf2b4e89dUL, 0x3e48b62bUL, 0x20000000UL, 0x3fe98c37UL, 0x7c9a88fbUL,\n+    0x3e44414cUL, 0x00000000UL, 0x3fe97e56UL, 0xda015741UL, 0xbe5d13baUL,\n+    0xe0000000UL, 0x3fe97078UL, 0x5fdace06UL, 0x3e51b947UL, 0x00000000UL,\n+    0x3fe962a0UL, 0x956ca094UL, 0x3e518785UL, 0x40000000UL, 0x3fe954cbUL,\n+    0x01164c1dUL, 0x3e5d5b57UL, 0xc0000000UL, 0x3fe946faUL, 0xe63b3767UL,\n+    0xbe4f84e7UL, 0x40000000UL, 0x3fe9392eUL, 0xe57cc2a9UL, 0x3e34eda3UL,\n+    0xe0000000UL, 0x3fe92b65UL, 0x8c75b544UL, 0x3e5766a0UL, 0xc0000000UL,\n+    0x3fe91da1UL, 0x37d1d087UL, 0xbe5e2ab1UL, 0x80000000UL, 0x3fe90fe1UL,\n+    0xa953dc20UL, 0x3e5fa1f3UL, 0x80000000UL, 0x3fe90225UL, 0xdbd3f369UL,\n+    0x3e47d6dbUL, 0xa0000000UL, 0x3fe8f46dUL, 0x1c9be989UL, 0xbe5e2b0aUL,\n+    0xa0000000UL, 0x3fe8e6b9UL, 0x3c93d76aUL, 0x3e5c8618UL, 0xe0000000UL,\n+    0x3fe8d909UL, 0x2182fc9aUL, 0xbe41aa9eUL, 0x20000000UL, 0x3fe8cb5eUL,\n+    0xe6b3539dUL, 0xbe530d19UL, 0x60000000UL, 0x3fe8bdb6UL, 0x49e58cc3UL,\n+    0xbe3bb374UL, 0xa0000000UL, 0x3fe8b012UL, 0xa7cfeb8fUL, 0x3e56c412UL,\n+    0x00000000UL, 0x3fe8a273UL, 0x8d52bc19UL, 0x3e1429b8UL, 0x60000000UL,\n+    0x3fe894d7UL, 0x4dc32c6cUL, 0xbe48604cUL, 0xc0000000UL, 0x3fe8873fUL,\n+    0x0c868e56UL, 0xbe564ee5UL, 0x00000000UL, 0x3fe879acUL, 0x56aee828UL,\n+    0x3e5e2fd8UL, 0x60000000UL, 0x3fe86c1cUL, 0x7ceab8ecUL, 0x3e493365UL,\n+    0xc0000000UL, 0x3fe85e90UL, 0x78d4dadcUL, 0xbe4f7f25UL, 0x00000000UL,\n+    0x3fe85109UL, 0x0ccd8280UL, 0x3e31e7a2UL, 0x40000000UL, 0x3fe84385UL,\n+    0x34ba4e15UL, 0x3e328077UL, 0x80000000UL, 0x3fe83605UL, 0xa670975aUL,\n+    0xbe53eee5UL, 0xa0000000UL, 0x3fe82889UL, 0xf61b77b2UL, 0xbe43a20aUL,\n+    0xa0000000UL, 0x3fe81b11UL, 0x13e6643bUL, 0x3e5e5fe5UL, 0xc0000000UL,\n+    0x3fe80d9dUL, 0x82cc94e8UL, 0xbe5ff1f9UL, 0xa0000000UL, 0x3fe8002dUL,\n+    0x8a0c9c5dUL, 0xbe42b0e7UL, 0x60000000UL, 0x3fe7f2c1UL, 0x22a16f01UL,\n+    0x3e5d9ea0UL, 0x20000000UL, 0x3fe7e559UL, 0xc38cd451UL, 0x3e506963UL,\n+    0xc0000000UL, 0x3fe7d7f4UL, 0x9902bc71UL, 0x3e4503d7UL, 0x40000000UL,\n+    0x3fe7ca94UL, 0xdef2a3c0UL, 0x3e3d98edUL, 0xa0000000UL, 0x3fe7bd37UL,\n+    0xed49abb0UL, 0x3e24c1ffUL, 0xe0000000UL, 0x3fe7afdeUL, 0xe3b0be70UL,\n+    0xbe40c467UL, 0x00000000UL, 0x3fe7a28aUL, 0xaf9f193cUL, 0xbe5dff6cUL,\n+    0xe0000000UL, 0x3fe79538UL, 0xb74cf6b6UL, 0xbe258ed0UL, 0xa0000000UL,\n+    0x3fe787ebUL, 0x1d9127c7UL, 0x3e345fb0UL, 0x40000000UL, 0x3fe77aa2UL,\n+    0x1028c21dUL, 0xbe4619bdUL, 0xa0000000UL, 0x3fe76d5cUL, 0x7cb0b5e4UL,\n+    0x3e40f1a2UL, 0xe0000000UL, 0x3fe7601aUL, 0x2b1bc4adUL, 0xbe32e8bbUL,\n+    0xe0000000UL, 0x3fe752dcUL, 0x6839f64eUL, 0x3e41f57bUL, 0xc0000000UL,\n+    0x3fe745a2UL, 0xc4121f7eUL, 0xbe52c40aUL, 0x60000000UL, 0x3fe7386cUL,\n+    0xd6852d72UL, 0xbe5c4e6bUL, 0xc0000000UL, 0x3fe72b39UL, 0x91d690f7UL,\n+    0xbe57f88fUL, 0xe0000000UL, 0x3fe71e0aUL, 0x627a2159UL, 0xbe4425d5UL,\n+    0xc0000000UL, 0x3fe710dfUL, 0x50a54033UL, 0x3e422b7eUL, 0x60000000UL,\n+    0x3fe703b8UL, 0x3b0b5f91UL, 0x3e5d3857UL, 0xe0000000UL, 0x3fe6f694UL,\n+    0x84d628a2UL, 0xbe51f090UL, 0x00000000UL, 0x3fe6e975UL, 0x306d8894UL,\n+    0xbe414d83UL, 0xe0000000UL, 0x3fe6dc58UL, 0x30bf24aaUL, 0xbe4650caUL,\n+    0x80000000UL, 0x3fe6cf40UL, 0xd4628d69UL, 0xbe5db007UL, 0xc0000000UL,\n+    0x3fe6c22bUL, 0xa2aae57bUL, 0xbe31d279UL, 0xc0000000UL, 0x3fe6b51aUL,\n+    0x860edf7eUL, 0xbe2d4c4aUL, 0x80000000UL, 0x3fe6a80dUL, 0xf3559341UL,\n+    0xbe5f7e98UL, 0xe0000000UL, 0x3fe69b03UL, 0xa885899eUL, 0xbe5c2011UL,\n+    0xe0000000UL, 0x3fe68dfdUL, 0x2bdc6d37UL, 0x3e224a82UL, 0xa0000000UL,\n+    0x3fe680fbUL, 0xc12ad1b9UL, 0xbe40cf56UL, 0x00000000UL, 0x3fe673fdUL,\n+    0x1bcdf659UL, 0xbdf52f2dUL, 0x00000000UL, 0x3fe66702UL, 0x5df10408UL,\n+    0x3e5663e0UL, 0xc0000000UL, 0x3fe65a0aUL, 0xa4070568UL, 0xbe40b12fUL,\n+    0x00000000UL, 0x3fe64d17UL, 0x71c54c47UL, 0x3e5f5e8bUL, 0x00000000UL,\n+    0x3fe64027UL, 0xbd4b7e83UL, 0x3e42ead6UL, 0xa0000000UL, 0x3fe6333aUL,\n+    0x61598bd2UL, 0xbe4c48d4UL, 0xc0000000UL, 0x3fe62651UL, 0x6f538d61UL,\n+    0x3e548401UL, 0xa0000000UL, 0x3fe6196cUL, 0x14344120UL, 0xbe529af6UL,\n+    0x00000000UL, 0x3fe60c8bUL, 0x5982c587UL, 0xbe3e1e4fUL, 0x00000000UL,\n+    0x3fe5ffadUL, 0xfe51d4eaUL, 0xbe4c897aUL, 0x80000000UL, 0x3fe5f2d2UL,\n+    0xfd46ebe1UL, 0x3e552e00UL, 0xa0000000UL, 0x3fe5e5fbUL, 0xa4695699UL,\n+    0x3e5ed471UL, 0x60000000UL, 0x3fe5d928UL, 0x80d118aeUL, 0x3e456b61UL,\n+    0xa0000000UL, 0x3fe5cc58UL, 0x304c330bUL, 0x3e54dc29UL, 0x80000000UL,\n+    0x3fe5bf8cUL, 0x0af2dedfUL, 0xbe3aa9bdUL, 0xe0000000UL, 0x3fe5b2c3UL,\n+    0x15fc9258UL, 0xbe479a37UL, 0xc0000000UL, 0x3fe5a5feUL, 0x9292c7eaUL,\n+    0x3e188650UL, 0x20000000UL, 0x3fe5993dUL, 0x33b4d380UL, 0x3e5d6d93UL,\n+    0x20000000UL, 0x3fe58c7fUL, 0x02fd16c7UL, 0x3e2fe961UL, 0xa0000000UL,\n+    0x3fe57fc4UL, 0x4a05edb6UL, 0xbe4d55b4UL, 0xa0000000UL, 0x3fe5730dUL,\n+    0x3d443abbUL, 0xbe5e6954UL, 0x00000000UL, 0x3fe5665aUL, 0x024acfeaUL,\n+    0x3e50e61bUL, 0x00000000UL, 0x3fe559aaUL, 0xcc9edd09UL, 0xbe325403UL,\n+    0x60000000UL, 0x3fe54cfdUL, 0x1fe26950UL, 0x3e5d500eUL, 0x60000000UL,\n+    0x3fe54054UL, 0x6c5ae164UL, 0xbe4a79b4UL, 0xc0000000UL, 0x3fe533aeUL,\n+    0x154b0287UL, 0xbe401571UL, 0xa0000000UL, 0x3fe5270cUL, 0x0673f401UL,\n+    0xbe56e56bUL, 0xe0000000UL, 0x3fe51a6dUL, 0x751b639cUL, 0x3e235269UL,\n+    0xa0000000UL, 0x3fe50dd2UL, 0x7c7b2bedUL, 0x3ddec887UL, 0xc0000000UL,\n+    0x3fe5013aUL, 0xafab4e17UL, 0x3e5e7575UL, 0x60000000UL, 0x3fe4f4a6UL,\n+    0x2e308668UL, 0x3e59aed6UL, 0x80000000UL, 0x3fe4e815UL, 0xf33e2a76UL,\n+    0xbe51f184UL, 0xe0000000UL, 0x3fe4db87UL, 0x839f3e3eUL, 0x3e57db01UL,\n+    0xc0000000UL, 0x3fe4cefdUL, 0xa9eda7bbUL, 0x3e535e0fUL, 0x00000000UL,\n+    0x3fe4c277UL, 0x2a8f66a5UL, 0x3e5ce451UL, 0xc0000000UL, 0x3fe4b5f3UL,\n+    0x05192456UL, 0xbe4e8518UL, 0xc0000000UL, 0x3fe4a973UL, 0x4aa7cd1dUL,\n+    0x3e46784aUL, 0x40000000UL, 0x3fe49cf7UL, 0x8e23025eUL, 0xbe5749f2UL,\n+    0x00000000UL, 0x3fe4907eUL, 0x18d30215UL, 0x3e360f39UL, 0x20000000UL,\n+    0x3fe48408UL, 0x63dcf2f3UL, 0x3e5e00feUL, 0xc0000000UL, 0x3fe47795UL,\n+    0x46182d09UL, 0xbe5173d9UL, 0xa0000000UL, 0x3fe46b26UL, 0x8f0e62aaUL,\n+    0xbe48f281UL, 0xe0000000UL, 0x3fe45ebaUL, 0x5775c40cUL, 0xbe56aad4UL,\n+    0x60000000UL, 0x3fe45252UL, 0x0fe25f69UL, 0x3e48bd71UL, 0x40000000UL,\n+    0x3fe445edUL, 0xe9989ec5UL, 0x3e590d97UL, 0x80000000UL, 0x3fe4398bUL,\n+    0xb3d9ffe3UL, 0x3e479dbcUL, 0x20000000UL, 0x3fe42d2dUL, 0x388e4d2eUL,\n+    0xbe5eed80UL, 0xe0000000UL, 0x3fe420d1UL, 0x6f797c18UL, 0x3e554b4cUL,\n+    0x20000000UL, 0x3fe4147aUL, 0x31048bb4UL, 0xbe5b1112UL, 0x80000000UL,\n+    0x3fe40825UL, 0x2efba4f9UL, 0x3e48ebc7UL, 0x40000000UL, 0x3fe3fbd4UL,\n+    0x50201119UL, 0x3e40b701UL, 0x40000000UL, 0x3fe3ef86UL, 0x0a4db32cUL,\n+    0x3e551de8UL, 0xa0000000UL, 0x3fe3e33bUL, 0x0c9c148bUL, 0xbe50c1f6UL,\n+    0x20000000UL, 0x3fe3d6f4UL, 0xc9129447UL, 0x3e533fa0UL, 0x00000000UL,\n+    0x3fe3cab0UL, 0xaae5b5a0UL, 0xbe22b68eUL, 0x20000000UL, 0x3fe3be6fUL,\n+    0x02305e8aUL, 0xbe54fc08UL, 0x60000000UL, 0x3fe3b231UL, 0x7f908258UL,\n+    0x3e57dc05UL, 0x00000000UL, 0x3fe3a5f7UL, 0x1a09af78UL, 0x3e08038bUL,\n+    0xe0000000UL, 0x3fe399bfUL, 0x490643c1UL, 0xbe5dbe42UL, 0xe0000000UL,\n+    0x3fe38d8bUL, 0x5e8ad724UL, 0xbe3c2b72UL, 0x20000000UL, 0x3fe3815bUL,\n+    0xc67196b6UL, 0x3e1713cfUL, 0xa0000000UL, 0x3fe3752dUL, 0x6182e429UL,\n+    0xbe3ec14cUL, 0x40000000UL, 0x3fe36903UL, 0xab6eb1aeUL, 0x3e5a2cc5UL,\n+    0x40000000UL, 0x3fe35cdcUL, 0xfe5dc064UL, 0xbe5c5878UL, 0x40000000UL,\n+    0x3fe350b8UL, 0x0ba6b9e4UL, 0x3e51619bUL, 0x80000000UL, 0x3fe34497UL,\n+    0x857761aaUL, 0x3e5fff53UL, 0x00000000UL, 0x3fe3387aUL, 0xf872d68cUL,\n+    0x3e484f4dUL, 0xa0000000UL, 0x3fe32c5fUL, 0x087e97c2UL, 0x3e52842eUL,\n+    0x80000000UL, 0x3fe32048UL, 0x73d6d0c0UL, 0xbe503edfUL, 0x80000000UL,\n+    0x3fe31434UL, 0x0c1456a1UL, 0xbe5f72adUL, 0xa0000000UL, 0x3fe30823UL,\n+    0x83a1a4d5UL, 0xbe5e65ccUL, 0xe0000000UL, 0x3fe2fc15UL, 0x855a7390UL,\n+    0xbe506438UL, 0x40000000UL, 0x3fe2f00bUL, 0xa2898287UL, 0x3e3d22a2UL,\n+    0xe0000000UL, 0x3fe2e403UL, 0x8b56f66fUL, 0xbe5aa5fdUL, 0x80000000UL,\n+    0x3fe2d7ffUL, 0x52db119aUL, 0x3e3a2e3dUL, 0x60000000UL, 0x3fe2cbfeUL,\n+    0xe2ddd4c0UL, 0xbe586469UL, 0x40000000UL, 0x3fe2c000UL, 0x6b01bf10UL,\n+    0x3e352b9dUL, 0x40000000UL, 0x3fe2b405UL, 0xb07a1cdfUL, 0x3e5c5cdaUL,\n+    0x80000000UL, 0x3fe2a80dUL, 0xc7b5f868UL, 0xbe5668b3UL, 0xc0000000UL,\n+    0x3fe29c18UL, 0x185edf62UL, 0xbe563d66UL, 0x00000000UL, 0x3fe29027UL,\n+    0xf729e1ccUL, 0x3e59a9a0UL, 0x80000000UL, 0x3fe28438UL, 0x6433c727UL,\n+    0xbe43cc89UL, 0x00000000UL, 0x3fe2784dUL, 0x41782631UL, 0xbe30750cUL,\n+    0xa0000000UL, 0x3fe26c64UL, 0x914911b7UL, 0xbe58290eUL, 0x40000000UL,\n+    0x3fe2607fUL, 0x3dcc73e1UL, 0xbe4269cdUL, 0x00000000UL, 0x3fe2549dUL,\n+    0x2751bf70UL, 0xbe5a6998UL, 0xc0000000UL, 0x3fe248bdUL, 0x4248b9fbUL,\n+    0xbe4ddb00UL, 0x80000000UL, 0x3fe23ce1UL, 0xf35cf82fUL, 0x3e561b71UL,\n+    0x60000000UL, 0x3fe23108UL, 0x8e481a2dUL, 0x3e518fb9UL, 0x60000000UL,\n+    0x3fe22532UL, 0x5ab96edcUL, 0xbe5fafc5UL, 0x40000000UL, 0x3fe2195fUL,\n+    0x80943911UL, 0xbe07f819UL, 0x40000000UL, 0x3fe20d8fUL, 0x386f2d6cUL,\n+    0xbe54ba8bUL, 0x40000000UL, 0x3fe201c2UL, 0xf29664acUL, 0xbe5eb815UL,\n+    0x20000000UL, 0x3fe1f5f8UL, 0x64f03390UL, 0x3e5e320cUL, 0x20000000UL,\n+    0x3fe1ea31UL, 0x747ff696UL, 0x3e5ef0a5UL, 0x40000000UL, 0x3fe1de6dUL,\n+    0x3e9ceb51UL, 0xbe5f8d27UL, 0x20000000UL, 0x3fe1d2acUL, 0x4ae0b55eUL,\n+    0x3e5faa21UL, 0x20000000UL, 0x3fe1c6eeUL, 0x28569a5eUL, 0x3e598a4fUL,\n+    0x20000000UL, 0x3fe1bb33UL, 0x54b33e07UL, 0x3e46130aUL, 0x20000000UL,\n+    0x3fe1af7bUL, 0x024f1078UL, 0xbe4dbf93UL, 0x00000000UL, 0x3fe1a3c6UL,\n+    0xb0783bfaUL, 0x3e419248UL, 0xe0000000UL, 0x3fe19813UL, 0x2f02b836UL,\n+    0x3e4e02b7UL, 0xc0000000UL, 0x3fe18c64UL, 0x28dec9d4UL, 0x3e09064fUL,\n+    0x80000000UL, 0x3fe180b8UL, 0x45cbf406UL, 0x3e5b1f46UL, 0x40000000UL,\n+    0x3fe1750fUL, 0x03d9964cUL, 0x3e5b0a79UL, 0x00000000UL, 0x3fe16969UL,\n+    0x8b5b882bUL, 0xbe238086UL, 0xa0000000UL, 0x3fe15dc5UL, 0x73bad6f8UL,\n+    0xbdf1fca4UL, 0x20000000UL, 0x3fe15225UL, 0x5385769cUL, 0x3e5e8d76UL,\n+    0xa0000000UL, 0x3fe14687UL, 0x1676dc6bUL, 0x3e571d08UL, 0x20000000UL,\n+    0x3fe13aedUL, 0xa8c41c7fUL, 0xbe598a25UL, 0x60000000UL, 0x3fe12f55UL,\n+    0xc4e1aaf0UL, 0x3e435277UL, 0xa0000000UL, 0x3fe123c0UL, 0x403638e1UL,\n+    0xbe21aa7cUL, 0xc0000000UL, 0x3fe1182eUL, 0x557a092bUL, 0xbdd0116bUL,\n+    0xc0000000UL, 0x3fe10c9fUL, 0x7d779f66UL, 0x3e4a61baUL, 0xc0000000UL,\n+    0x3fe10113UL, 0x2b09c645UL, 0xbe5d586eUL, 0x20000000UL, 0x3fe0ea04UL,\n+    0xea2cad46UL, 0x3e5aa97cUL, 0x20000000UL, 0x3fe0d300UL, 0x23190e54UL,\n+    0x3e50f1a7UL, 0xa0000000UL, 0x3fe0bc07UL, 0x1379a5a6UL, 0xbe51619dUL,\n+    0x60000000UL, 0x3fe0a51aUL, 0x926a3d4aUL, 0x3e5cf019UL, 0xa0000000UL,\n+    0x3fe08e38UL, 0xa8c24358UL, 0x3e35241eUL, 0x20000000UL, 0x3fe07762UL,\n+    0x24317e7aUL, 0x3e512cfaUL, 0x00000000UL, 0x3fe06097UL, 0xfd9cf274UL,\n+    0xbe55bef3UL, 0x00000000UL, 0x3fe049d7UL, 0x3689b49dUL, 0xbe36d26dUL,\n+    0x40000000UL, 0x3fe03322UL, 0xf72ef6c4UL, 0xbe54cd08UL, 0xa0000000UL,\n+    0x3fe01c78UL, 0x23702d2dUL, 0xbe5900bfUL, 0x00000000UL, 0x3fe005daUL,\n+    0x3f59c14cUL, 0x3e57d80bUL, 0x40000000UL, 0x3fdfde8dUL, 0xad67766dUL,\n+    0xbe57fad4UL, 0x40000000UL, 0x3fdfb17cUL, 0x644f4ae7UL, 0x3e1ee43bUL,\n+    0x40000000UL, 0x3fdf8481UL, 0x903234d2UL, 0x3e501a86UL, 0x40000000UL,\n+    0x3fdf579cUL, 0xafe9e509UL, 0xbe267c3eUL, 0x00000000UL, 0x3fdf2acdUL,\n+    0xb7dfda0bUL, 0xbe48149bUL, 0x40000000UL, 0x3fdefe13UL, 0x3b94305eUL,\n+    0x3e5f4ea7UL, 0x80000000UL, 0x3fded16fUL, 0x5d95da61UL, 0xbe55c198UL,\n+    0x00000000UL, 0x3fdea4e1UL, 0x406960c9UL, 0xbdd99a19UL, 0x00000000UL,\n+    0x3fde7868UL, 0xd22f3539UL, 0x3e470c78UL, 0x80000000UL, 0x3fde4c04UL,\n+    0x83eec535UL, 0xbe3e1232UL, 0x40000000UL, 0x3fde1fb6UL, 0x3dfbffcbUL,\n+    0xbe4b7d71UL, 0x40000000UL, 0x3fddf37dUL, 0x7e1be4e0UL, 0xbe5b8f8fUL,\n+    0x40000000UL, 0x3fddc759UL, 0x46dae887UL, 0xbe350458UL, 0x80000000UL,\n+    0x3fdd9b4aUL, 0xed6ecc49UL, 0xbe5f0045UL, 0x80000000UL, 0x3fdd6f50UL,\n+    0x2e9e883cUL, 0x3e2915daUL, 0x80000000UL, 0x3fdd436bUL, 0xf0bccb32UL,\n+    0x3e4a68c9UL, 0x80000000UL, 0x3fdd179bUL, 0x9bbfc779UL, 0xbe54a26aUL,\n+    0x00000000UL, 0x3fdcebe0UL, 0x7cea33abUL, 0x3e43c6b7UL, 0x40000000UL,\n+    0x3fdcc039UL, 0xe740fd06UL, 0x3e5526c2UL, 0x40000000UL, 0x3fdc94a7UL,\n+    0x9eadeb1aUL, 0xbe396d8dUL, 0xc0000000UL, 0x3fdc6929UL, 0xf0a8f95aUL,\n+    0xbe5c0ab2UL, 0x80000000UL, 0x3fdc3dc0UL, 0x6ee2693bUL, 0x3e0992e6UL,\n+    0xc0000000UL, 0x3fdc126bUL, 0x5ac6b581UL, 0xbe2834b6UL, 0x40000000UL,\n+    0x3fdbe72bUL, 0x8cc226ffUL, 0x3e3596a6UL, 0x00000000UL, 0x3fdbbbffUL,\n+    0xf92a74bbUL, 0x3e3c5813UL, 0x00000000UL, 0x3fdb90e7UL, 0x479664c0UL,\n+    0xbe50d644UL, 0x00000000UL, 0x3fdb65e3UL, 0x5004975bUL, 0xbe55258fUL,\n+    0x00000000UL, 0x3fdb3af3UL, 0xe4b23194UL, 0xbe588407UL, 0xc0000000UL,\n+    0x3fdb1016UL, 0xe65d4d0aUL, 0x3e527c26UL, 0x80000000UL, 0x3fdae54eUL,\n+    0x814fddd6UL, 0x3e5962a2UL, 0x40000000UL, 0x3fdaba9aUL, 0xe19d0913UL,\n+    0xbe562f4eUL, 0x80000000UL, 0x3fda8ff9UL, 0x43cfd006UL, 0xbe4cfdebUL,\n+    0x40000000UL, 0x3fda656cUL, 0x686f0a4eUL, 0x3e5e47a8UL, 0xc0000000UL,\n+    0x3fda3af2UL, 0x7200d410UL, 0x3e5e1199UL, 0xc0000000UL, 0x3fda108cUL,\n+    0xabd2266eUL, 0x3e5ee4d1UL, 0x40000000UL, 0x3fd9e63aUL, 0x396f8f2cUL,\n+    0x3e4dbffbUL, 0x00000000UL, 0x3fd9bbfbUL, 0xe32b25ddUL, 0x3e5c3a54UL,\n+    0x40000000UL, 0x3fd991cfUL, 0x431e4035UL, 0xbe457925UL, 0x80000000UL,\n+    0x3fd967b6UL, 0x7bed3dd3UL, 0x3e40c61dUL, 0x00000000UL, 0x3fd93db1UL,\n+    0xd7449365UL, 0x3e306419UL, 0x80000000UL, 0x3fd913beUL, 0x1746e791UL,\n+    0x3e56fcfcUL, 0x40000000UL, 0x3fd8e9dfUL, 0xf3a9028bUL, 0xbe5041b9UL,\n+    0xc0000000UL, 0x3fd8c012UL, 0x56840c50UL, 0xbe26e20aUL, 0x40000000UL,\n+    0x3fd89659UL, 0x19763102UL, 0xbe51f466UL, 0x80000000UL, 0x3fd86cb2UL,\n+    0x7032de7cUL, 0xbe4d298aUL, 0x80000000UL, 0x3fd8431eUL, 0xdeb39fabUL,\n+    0xbe4361ebUL, 0x40000000UL, 0x3fd8199dUL, 0x5d01cbe0UL, 0xbe5425b3UL,\n+    0x80000000UL, 0x3fd7f02eUL, 0x3ce99aa9UL, 0x3e146fa8UL, 0x80000000UL,\n+    0x3fd7c6d2UL, 0xd1a262b9UL, 0xbe5a1a69UL, 0xc0000000UL, 0x3fd79d88UL,\n+    0x8606c236UL, 0x3e423a08UL, 0x80000000UL, 0x3fd77451UL, 0x8fd1e1b7UL,\n+    0x3e5a6a63UL, 0xc0000000UL, 0x3fd74b2cUL, 0xe491456aUL, 0x3e42c1caUL,\n+    0x40000000UL, 0x3fd7221aUL, 0x4499a6d7UL, 0x3e36a69aUL, 0x00000000UL,\n+    0x3fd6f91aUL, 0x5237df94UL, 0xbe0f8f02UL, 0x00000000UL, 0x3fd6d02cUL,\n+    0xb6482c6eUL, 0xbe5abcf7UL, 0x00000000UL, 0x3fd6a750UL, 0x1919fd61UL,\n+    0xbe57ade2UL, 0x00000000UL, 0x3fd67e86UL, 0xaa7a994dUL, 0xbe3f3fbdUL,\n+    0x00000000UL, 0x3fd655ceUL, 0x67db014cUL, 0x3e33c550UL, 0x00000000UL,\n+    0x3fd62d28UL, 0xa82856b7UL, 0xbe1409d1UL, 0xc0000000UL, 0x3fd60493UL,\n+    0x1e6a300dUL, 0x3e55d899UL, 0x80000000UL, 0x3fd5dc11UL, 0x1222bd5cUL,\n+    0xbe35bfc0UL, 0xc0000000UL, 0x3fd5b3a0UL, 0x6e8dc2d3UL, 0x3e5d4d79UL,\n+    0x00000000UL, 0x3fd58b42UL, 0xe0e4ace6UL, 0xbe517303UL, 0x80000000UL,\n+    0x3fd562f4UL, 0xb306e0a8UL, 0x3e5edf0fUL, 0xc0000000UL, 0x3fd53ab8UL,\n+    0x6574bc54UL, 0x3e5ee859UL, 0x80000000UL, 0x3fd5128eUL, 0xea902207UL,\n+    0x3e5f6188UL, 0xc0000000UL, 0x3fd4ea75UL, 0x9f911d79UL, 0x3e511735UL,\n+    0x80000000UL, 0x3fd4c26eUL, 0xf9c77397UL, 0xbe5b1643UL, 0x40000000UL,\n+    0x3fd49a78UL, 0x15fc9258UL, 0x3e479a37UL, 0x80000000UL, 0x3fd47293UL,\n+    0xd5a04dd9UL, 0xbe426e56UL, 0xc0000000UL, 0x3fd44abfUL, 0xe04042f5UL,\n+    0x3e56f7c6UL, 0x40000000UL, 0x3fd422fdUL, 0x1d8bf2c8UL, 0x3e5d8810UL,\n+    0x00000000UL, 0x3fd3fb4cUL, 0x88a8ddeeUL, 0xbe311454UL, 0xc0000000UL,\n+    0x3fd3d3abUL, 0x3e3b5e47UL, 0xbe5d1b72UL, 0x40000000UL, 0x3fd3ac1cUL,\n+    0xc2ab5d59UL, 0x3e31b02bUL, 0xc0000000UL, 0x3fd3849dUL, 0xd4e34b9eUL,\n+    0x3e51cb2fUL, 0x40000000UL, 0x3fd35d30UL, 0x177204fbUL, 0xbe2b8cd7UL,\n+    0x80000000UL, 0x3fd335d3UL, 0xfcd38c82UL, 0xbe4356e1UL, 0x80000000UL,\n+    0x3fd30e87UL, 0x64f54accUL, 0xbe4e6224UL, 0x00000000UL, 0x3fd2e74cUL,\n+    0xaa7975d9UL, 0x3e5dc0feUL, 0x80000000UL, 0x3fd2c021UL, 0x516dab3fUL,\n+    0xbe50ffa3UL, 0x40000000UL, 0x3fd29907UL, 0x2bfb7313UL, 0x3e5674a2UL,\n+    0xc0000000UL, 0x3fd271fdUL, 0x0549fc99UL, 0x3e385d29UL, 0xc0000000UL,\n+    0x3fd24b04UL, 0x55b63073UL, 0xbe500c6dUL, 0x00000000UL, 0x3fd2241cUL,\n+    0x3f91953aUL, 0x3e389977UL, 0xc0000000UL, 0x3fd1fd43UL, 0xa1543f71UL,\n+    0xbe3487abUL, 0xc0000000UL, 0x3fd1d67bUL, 0x4ec8867cUL, 0x3df6a2dcUL,\n+    0x00000000UL, 0x3fd1afc4UL, 0x4328e3bbUL, 0x3e41d9c0UL, 0x80000000UL,\n+    0x3fd1891cUL, 0x2e1cda84UL, 0x3e3bdd87UL, 0x40000000UL, 0x3fd16285UL,\n+    0x4b5331aeUL, 0xbe53128eUL, 0x00000000UL, 0x3fd13bfeUL, 0xb9aec164UL,\n+    0xbe52ac98UL, 0xc0000000UL, 0x3fd11586UL, 0xd91e1316UL, 0xbe350630UL,\n+    0x80000000UL, 0x3fd0ef1fUL, 0x7cacc12cUL, 0x3e3f5219UL, 0x40000000UL,\n+    0x3fd0c8c8UL, 0xbce277b7UL, 0x3e3d30c0UL, 0x00000000UL, 0x3fd0a281UL,\n+    0x2a63447dUL, 0xbe541377UL, 0x80000000UL, 0x3fd07c49UL, 0xfac483b5UL,\n+    0xbe5772ecUL, 0xc0000000UL, 0x3fd05621UL, 0x36b8a570UL, 0xbe4fd4bdUL,\n+    0xc0000000UL, 0x3fd03009UL, 0xbae505f7UL, 0xbe450388UL, 0x80000000UL,\n+    0x3fd00a01UL, 0x3e35aeadUL, 0xbe5430fcUL, 0x80000000UL, 0x3fcfc811UL,\n+    0x707475acUL, 0x3e38806eUL, 0x80000000UL, 0x3fcf7c3fUL, 0xc91817fcUL,\n+    0xbe40cceaUL, 0x80000000UL, 0x3fcf308cUL, 0xae05d5e9UL, 0xbe4919b8UL,\n+    0x80000000UL, 0x3fcee4f8UL, 0xae6cc9e6UL, 0xbe530b94UL, 0x00000000UL,\n+    0x3fce9983UL, 0x1efe3e8eUL, 0x3e57747eUL, 0x00000000UL, 0x3fce4e2dUL,\n+    0xda78d9bfUL, 0xbe59a608UL, 0x00000000UL, 0x3fce02f5UL, 0x8abe2c2eUL,\n+    0x3e4a35adUL, 0x00000000UL, 0x3fcdb7dcUL, 0x1495450dUL, 0xbe0872ccUL,\n+    0x80000000UL, 0x3fcd6ce1UL, 0x86ee0ba0UL, 0xbe4f59a0UL, 0x00000000UL,\n+    0x3fcd2205UL, 0xe81ca888UL, 0x3e5402c3UL, 0x00000000UL, 0x3fccd747UL,\n+    0x3b4424b9UL, 0x3e5dfdc3UL, 0x80000000UL, 0x3fcc8ca7UL, 0xd305b56cUL,\n+    0x3e202da6UL, 0x00000000UL, 0x3fcc4226UL, 0x399a6910UL, 0xbe482a1cUL,\n+    0x80000000UL, 0x3fcbf7c2UL, 0x747f7938UL, 0xbe587372UL, 0x80000000UL,\n+    0x3fcbad7cUL, 0x6fc246a0UL, 0x3e50d83dUL, 0x00000000UL, 0x3fcb6355UL,\n+    0xee9e9be5UL, 0xbe5c35bdUL, 0x80000000UL, 0x3fcb194aUL, 0x8416c0bcUL,\n+    0x3e546d4fUL, 0x00000000UL, 0x3fcacf5eUL, 0x49f7f08fUL, 0x3e56da76UL,\n+    0x00000000UL, 0x3fca858fUL, 0x5dc30de2UL, 0x3e5f390cUL, 0x00000000UL,\n+    0x3fca3bdeUL, 0x950583b6UL, 0xbe5e4169UL, 0x80000000UL, 0x3fc9f249UL,\n+    0x33631553UL, 0x3e52aeb1UL, 0x00000000UL, 0x3fc9a8d3UL, 0xde8795a6UL,\n+    0xbe59a504UL, 0x00000000UL, 0x3fc95f79UL, 0x076bf41eUL, 0x3e5122feUL,\n+    0x80000000UL, 0x3fc9163cUL, 0x2914c8e7UL, 0x3e3dd064UL, 0x00000000UL,\n+    0x3fc8cd1dUL, 0x3a30eca3UL, 0xbe21b4aaUL, 0x80000000UL, 0x3fc8841aUL,\n+    0xb2a96650UL, 0xbe575444UL, 0x80000000UL, 0x3fc83b34UL, 0x2376c0cbUL,\n+    0xbe2a74c7UL, 0x80000000UL, 0x3fc7f26bUL, 0xd8a0b653UL, 0xbe5181b6UL,\n+    0x00000000UL, 0x3fc7a9bfUL, 0x32257882UL, 0xbe4a78b4UL, 0x00000000UL,\n+    0x3fc7612fUL, 0x1eee8bd9UL, 0xbe1bfe9dUL, 0x80000000UL, 0x3fc718bbUL,\n+    0x0c603cc4UL, 0x3e36fdc9UL, 0x80000000UL, 0x3fc6d064UL, 0x3728b8cfUL,\n+    0xbe1e542eUL, 0x80000000UL, 0x3fc68829UL, 0xc79a4067UL, 0x3e5c380fUL,\n+    0x00000000UL, 0x3fc6400bUL, 0xf69eac69UL, 0x3e550a84UL, 0x80000000UL,\n+    0x3fc5f808UL, 0xb7a780a4UL, 0x3e5d9224UL, 0x80000000UL, 0x3fc5b022UL,\n+    0xad9dfb1eUL, 0xbe55242fUL, 0x00000000UL, 0x3fc56858UL, 0x659b18beUL,\n+    0xbe4bfda3UL, 0x80000000UL, 0x3fc520a9UL, 0x66ee3631UL, 0xbe57d769UL,\n+    0x80000000UL, 0x3fc4d916UL, 0x1ec62819UL, 0x3e2427f7UL, 0x80000000UL,\n+    0x3fc4919fUL, 0xdec25369UL, 0xbe435431UL, 0x00000000UL, 0x3fc44a44UL,\n+    0xa8acfc4bUL, 0xbe3c62e8UL, 0x00000000UL, 0x3fc40304UL, 0xcf1d3eabUL,\n+    0xbdfba29fUL, 0x80000000UL, 0x3fc3bbdfUL, 0x79aba3eaUL, 0xbdf1b7c8UL,\n+    0x80000000UL, 0x3fc374d6UL, 0xb8d186daUL, 0xbe5130cfUL, 0x80000000UL,\n+    0x3fc32de8UL, 0x9d74f152UL, 0x3e2285b6UL, 0x00000000UL, 0x3fc2e716UL,\n+    0x50ae7ca9UL, 0xbe503920UL, 0x80000000UL, 0x3fc2a05eUL, 0x6caed92eUL,\n+    0xbe533924UL, 0x00000000UL, 0x3fc259c2UL, 0x9cb5034eUL, 0xbe510e31UL,\n+    0x80000000UL, 0x3fc21340UL, 0x12c4d378UL, 0xbe540b43UL, 0x80000000UL,\n+    0x3fc1ccd9UL, 0xcc418706UL, 0x3e59887aUL, 0x00000000UL, 0x3fc1868eUL,\n+    0x921f4106UL, 0xbe528e67UL, 0x80000000UL, 0x3fc1405cUL, 0x3969441eUL,\n+    0x3e5d8051UL, 0x00000000UL, 0x3fc0fa46UL, 0xd941ef5bUL, 0x3e5f9079UL,\n+    0x80000000UL, 0x3fc0b44aUL, 0x5a3e81b2UL, 0xbe567691UL, 0x00000000UL,\n+    0x3fc06e69UL, 0x9d66afe7UL, 0xbe4d43fbUL, 0x00000000UL, 0x3fc028a2UL,\n+    0x0a92a162UL, 0xbe52f394UL, 0x00000000UL, 0x3fbfc5eaUL, 0x209897e5UL,\n+    0x3e529e37UL, 0x00000000UL, 0x3fbf3ac5UL, 0x8458bd7bUL, 0x3e582831UL,\n+    0x00000000UL, 0x3fbeafd5UL, 0xb8d8b4b8UL, 0xbe486b4aUL, 0x00000000UL,\n+    0x3fbe2518UL, 0xe0a3b7b6UL, 0x3e5bafd2UL, 0x00000000UL, 0x3fbd9a90UL,\n+    0x2bf2710eUL, 0x3e383b2bUL, 0x00000000UL, 0x3fbd103cUL, 0x73eb6ab7UL,\n+    0xbe56d78dUL, 0x00000000UL, 0x3fbc861bUL, 0x32ceaff5UL, 0xbe32dc5aUL,\n+    0x00000000UL, 0x3fbbfc2eUL, 0xbee04cb7UL, 0xbe4a71a4UL, 0x00000000UL,\n+    0x3fbb7274UL, 0x35ae9577UL, 0x3e38142fUL, 0x00000000UL, 0x3fbae8eeUL,\n+    0xcbaddab4UL, 0xbe5490f0UL, 0x00000000UL, 0x3fba5f9aUL, 0x95ce1114UL,\n+    0x3e597c71UL, 0x00000000UL, 0x3fb9d67aUL, 0x6d7c0f78UL, 0x3e3abc2dUL,\n+    0x00000000UL, 0x3fb94d8dUL, 0x2841a782UL, 0xbe566cbcUL, 0x00000000UL,\n+    0x3fb8c4d2UL, 0x6ed429c6UL, 0xbe3cfff9UL, 0x00000000UL, 0x3fb83c4aUL,\n+    0xe4a49fbbUL, 0xbe552964UL, 0x00000000UL, 0x3fb7b3f4UL, 0x2193d81eUL,\n+    0xbe42fa72UL, 0x00000000UL, 0x3fb72bd0UL, 0xdd70c122UL, 0x3e527a8cUL,\n+    0x00000000UL, 0x3fb6a3dfUL, 0x03108a54UL, 0xbe450393UL, 0x00000000UL,\n+    0x3fb61c1fUL, 0x30ff7954UL, 0x3e565840UL, 0x00000000UL, 0x3fb59492UL,\n+    0xdedd460cUL, 0xbe5422b5UL, 0x00000000UL, 0x3fb50d36UL, 0x950f9f45UL,\n+    0xbe5313f6UL, 0x00000000UL, 0x3fb4860bUL, 0x582cdcb1UL, 0x3e506d39UL,\n+    0x00000000UL, 0x3fb3ff12UL, 0x7216d3a6UL, 0x3e4aa719UL, 0x00000000UL,\n+    0x3fb3784aUL, 0x57a423fdUL, 0x3e5a9b9fUL, 0x00000000UL, 0x3fb2f1b4UL,\n+    0x7a138b41UL, 0xbe50b418UL, 0x00000000UL, 0x3fb26b4eUL, 0x2fbfd7eaUL,\n+    0x3e23a53eUL, 0x00000000UL, 0x3fb1e519UL, 0x18913ccbUL, 0x3e465fc1UL,\n+    0x00000000UL, 0x3fb15f15UL, 0x7ea24e21UL, 0x3e042843UL, 0x00000000UL,\n+    0x3fb0d941UL, 0x7c6d9c77UL, 0x3e59f61eUL, 0x00000000UL, 0x3fb0539eUL,\n+    0x114efd44UL, 0x3e4ccab7UL, 0x00000000UL, 0x3faf9c56UL, 0x1777f657UL,\n+    0x3e552f65UL, 0x00000000UL, 0x3fae91d2UL, 0xc317b86aUL, 0xbe5a61e0UL,\n+    0x00000000UL, 0x3fad87acUL, 0xb7664efbUL, 0xbe41f64eUL, 0x00000000UL,\n+    0x3fac7de6UL, 0x5d3d03a9UL, 0x3e0807a0UL, 0x00000000UL, 0x3fab7480UL,\n+    0x743c38ebUL, 0xbe3726e1UL, 0x00000000UL, 0x3faa6b78UL, 0x06a253f1UL,\n+    0x3e5ad636UL, 0x00000000UL, 0x3fa962d0UL, 0xa35f541bUL, 0x3e5a187aUL,\n+    0x00000000UL, 0x3fa85a88UL, 0x4b86e446UL, 0xbe508150UL, 0x00000000UL,\n+    0x3fa7529cUL, 0x2589cacfUL, 0x3e52938aUL, 0x00000000UL, 0x3fa64b10UL,\n+    0xaf6b11f2UL, 0xbe3454cdUL, 0x00000000UL, 0x3fa543e2UL, 0x97506fefUL,\n+    0xbe5fdec5UL, 0x00000000UL, 0x3fa43d10UL, 0xe75f7dd9UL, 0xbe388dd3UL,\n+    0x00000000UL, 0x3fa3369cUL, 0xa4139632UL, 0xbdea5177UL, 0x00000000UL,\n+    0x3fa23086UL, 0x352d6f1eUL, 0xbe565ad6UL, 0x00000000UL, 0x3fa12accUL,\n+    0x77449eb7UL, 0xbe50d5c7UL, 0x00000000UL, 0x3fa0256eUL, 0x7478da78UL,\n+    0x3e404724UL, 0x00000000UL, 0x3f9e40dcUL, 0xf59cef7fUL, 0xbe539d0aUL,\n+    0x00000000UL, 0x3f9c3790UL, 0x1511d43cUL, 0x3e53c2c8UL, 0x00000000UL,\n+    0x3f9a2f00UL, 0x9b8bff3cUL, 0xbe43b3e1UL, 0x00000000UL, 0x3f982724UL,\n+    0xad1e22a5UL, 0x3e46f0bdUL, 0x00000000UL, 0x3f962000UL, 0x130d9356UL,\n+    0x3e475ba0UL, 0x00000000UL, 0x3f941994UL, 0x8f86f883UL, 0xbe513d0bUL,\n+    0x00000000UL, 0x3f9213dcUL, 0x914d0dc8UL, 0xbe534335UL, 0x00000000UL,\n+    0x3f900ed8UL, 0x2d73e5e7UL, 0xbe22ba75UL, 0x00000000UL, 0x3f8c1510UL,\n+    0xc5b7d70eUL, 0x3e599c5dUL, 0x00000000UL, 0x3f880de0UL, 0x8a27857eUL,\n+    0xbe3d28c8UL, 0x00000000UL, 0x3f840810UL, 0xda767328UL, 0x3e531b3dUL,\n+    0x00000000UL, 0x3f8003b0UL, 0x77bacaf3UL, 0xbe5f04e3UL, 0x00000000UL,\n+    0x3f780150UL, 0xdf4b0720UL, 0x3e5a8bffUL, 0x00000000UL, 0x3f6ffc40UL,\n+    0x34c48e71UL, 0xbe3fcd99UL, 0x00000000UL, 0x3f5ff6c0UL, 0x1ad218afUL,\n+    0xbe4c78a7UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x80000000UL,\n+    0x00000000UL, 0xfffff800UL, 0x00000000UL, 0xfffff800UL, 0x00000000UL,\n+    0x3ff72000UL, 0x161bb241UL, 0xbf5dabe1UL, 0x6dc96112UL, 0xbf836578UL,\n+    0xee241472UL, 0xbf9b0301UL, 0x9f95985aUL, 0xbfb528dbUL, 0xb3841d2aUL,\n+    0xbfd619b6UL, 0x518775e3UL, 0x3f9004f2UL, 0xac8349bbUL, 0x3fa76c9bUL,\n+    0x486ececcUL, 0x3fc4635eUL, 0x161bb241UL, 0xbf5dabe1UL, 0x9f95985aUL,\n+    0xbfb528dbUL, 0xf8b5787dUL, 0x3ef2531eUL, 0x486ececbUL, 0x3fc4635eUL,\n+    0x412055ccUL, 0xbdd61bb2UL, 0x00000000UL, 0xfffffff8UL, 0x00000000UL,\n+    0xffffffffUL, 0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0x3b700000UL,\n+    0xfa5abcbfUL, 0x3ff00b1aUL, 0xa7609f71UL, 0xbc84f6b2UL, 0xa9fb3335UL,\n+    0x3ff0163dUL, 0x9ab8cdb7UL, 0x3c9b6129UL, 0x143b0281UL, 0x3ff02168UL,\n+    0x0fc54eb6UL, 0xbc82bf31UL, 0x3e778061UL, 0x3ff02c9aUL, 0x535b085dUL,\n+    0xbc719083UL, 0x2e11bbccUL, 0x3ff037d4UL, 0xeeade11aUL, 0x3c656811UL,\n+    0xe86e7f85UL, 0x3ff04315UL, 0x1977c96eUL, 0xbc90a31cUL, 0x72f654b1UL,\n+    0x3ff04e5fUL, 0x3aa0d08cUL, 0x3c84c379UL, 0xd3158574UL, 0x3ff059b0UL,\n+    0xa475b465UL, 0x3c8d73e2UL, 0x0e3c1f89UL, 0x3ff0650aUL, 0x5799c397UL,\n+    0xbc95cb7bUL, 0x29ddf6deUL, 0x3ff0706bUL, 0xe2b13c27UL, 0xbc8c91dfUL,\n+    0x2b72a836UL, 0x3ff07bd4UL, 0x54458700UL, 0x3c832334UL, 0x18759bc8UL,\n+    0x3ff08745UL, 0x4bb284ffUL, 0x3c6186beUL, 0xf66607e0UL, 0x3ff092bdUL,\n+    0x800a3fd1UL, 0xbc968063UL, 0xcac6f383UL, 0x3ff09e3eUL, 0x18316136UL,\n+    0x3c914878UL, 0x9b1f3919UL, 0x3ff0a9c7UL, 0x873d1d38UL, 0x3c85d16cUL,\n+    0x6cf9890fUL, 0x3ff0b558UL, 0x4adc610bUL, 0x3c98a62eUL, 0x45e46c85UL,\n+    0x3ff0c0f1UL, 0x06d21cefUL, 0x3c94f989UL, 0x2b7247f7UL, 0x3ff0cc92UL,\n+    0x16e24f71UL, 0x3c901edcUL, 0x23395decUL, 0x3ff0d83bUL, 0xe43f316aUL,\n+    0xbc9bc14dUL, 0x32d3d1a2UL, 0x3ff0e3ecUL, 0x27c57b52UL, 0x3c403a17UL,\n+    0x5fdfa9c5UL, 0x3ff0efa5UL, 0xbc54021bUL, 0xbc949db9UL, 0xaffed31bUL,\n+    0x3ff0fb66UL, 0xc44ebd7bUL, 0xbc6b9bedUL, 0x28d7233eUL, 0x3ff10730UL,\n+    0x1692fdd5UL, 0x3c8d46ebUL, 0xd0125b51UL, 0x3ff11301UL, 0x39449b3aUL,\n+    0xbc96c510UL, 0xab5e2ab6UL, 0x3ff11edbUL, 0xf703fb72UL, 0xbc9ca454UL,\n+    0xc06c31ccUL, 0x3ff12abdUL, 0xb36ca5c7UL, 0xbc51b514UL, 0x14f204abUL,\n+    0x3ff136a8UL, 0xba48dcf0UL, 0xbc67108fUL, 0xaea92de0UL, 0x3ff1429aUL,\n+    0x9af1369eUL, 0xbc932fbfUL, 0x934f312eUL, 0x3ff14e95UL, 0x39bf44abUL,\n+    0xbc8b91e8UL, 0xc8a58e51UL, 0x3ff15a98UL, 0xb9eeab0aUL, 0x3c82406aUL,\n+    0x5471c3c2UL, 0x3ff166a4UL, 0x82ea1a32UL, 0x3c58f23bUL, 0x3c7d517bUL,\n+    0x3ff172b8UL, 0xb9d78a76UL, 0xbc819041UL, 0x8695bbc0UL, 0x3ff17ed4UL,\n+    0xe2ac5a64UL, 0x3c709e3fUL, 0x388c8deaUL, 0x3ff18af9UL, 0xd1970f6cUL,\n+    0xbc911023UL, 0x58375d2fUL, 0x3ff19726UL, 0x85f17e08UL, 0x3c94aaddUL,\n+    0xeb6fcb75UL, 0x3ff1a35bUL, 0x7b4968e4UL, 0x3c8e5b4cUL, 0xf8138a1cUL,\n+    0x3ff1af99UL, 0xa4b69280UL, 0x3c97bf85UL, 0x84045cd4UL, 0x3ff1bbe0UL,\n+    0x352ef607UL, 0xbc995386UL, 0x95281c6bUL, 0x3ff1c82fUL, 0x8010f8c9UL,\n+    0x3c900977UL, 0x3168b9aaUL, 0x3ff1d487UL, 0x00a2643cUL, 0x3c9e016eUL,\n+    0x5eb44027UL, 0x3ff1e0e7UL, 0x088cb6deUL, 0xbc96fdd8UL, 0x22fcd91dUL,\n+    0x3ff1ed50UL, 0x027bb78cUL, 0xbc91df98UL, 0x8438ce4dUL, 0x3ff1f9c1UL,\n+    0xa097af5cUL, 0xbc9bf524UL, 0x88628cd6UL, 0x3ff2063bUL, 0x814a8495UL,\n+    0x3c8dc775UL, 0x3578a819UL, 0x3ff212beUL, 0x2cfcaac9UL, 0x3c93592dUL,\n+    0x917ddc96UL, 0x3ff21f49UL, 0x9494a5eeUL, 0x3c82a97eUL, 0xa27912d1UL,\n+    0x3ff22bddUL, 0x5577d69fUL, 0x3c8d34fbUL, 0x6e756238UL, 0x3ff2387aUL,\n+    0xb6c70573UL, 0x3c99b07eUL, 0xfb82140aUL, 0x3ff2451fUL, 0x911ca996UL,\n+    0x3c8acfccUL, 0x4fb2a63fUL, 0x3ff251ceUL, 0xbef4f4a4UL, 0x3c8ac155UL,\n+    0x711ece75UL, 0x3ff25e85UL, 0x4ac31b2cUL, 0x3c93e1a2UL, 0x65e27cddUL,\n+    0x3ff26b45UL, 0x9940e9d9UL, 0x3c82bd33UL, 0x341ddf29UL, 0x3ff2780eUL,\n+    0x05f9e76cUL, 0x3c9e067cUL, 0xe1f56381UL, 0x3ff284dfUL, 0x8c3f0d7eUL,\n+    0xbc9a4c3aUL, 0x7591bb70UL, 0x3ff291baUL, 0x28401cbdUL, 0xbc82cc72UL,\n+    0xf51fdee1UL, 0x3ff29e9dUL, 0xafad1255UL, 0x3c8612e8UL, 0x66d10f13UL,\n+    0x3ff2ab8aUL, 0x191690a7UL, 0xbc995743UL, 0xd0dad990UL, 0x3ff2b87fUL,\n+    0xd6381aa4UL, 0xbc410adcUL, 0x39771b2fUL, 0x3ff2c57eUL, 0xa6eb5124UL,\n+    0xbc950145UL, 0xa6e4030bUL, 0x3ff2d285UL, 0x54db41d5UL, 0x3c900247UL,\n+    0x1f641589UL, 0x3ff2df96UL, 0xfbbce198UL, 0x3c9d16cfUL, 0xa93e2f56UL,\n+    0x3ff2ecafUL, 0x45d52383UL, 0x3c71ca0fUL, 0x4abd886bUL, 0x3ff2f9d2UL,\n+    0x532bda93UL, 0xbc653c55UL, 0x0a31b715UL, 0x3ff306feUL, 0xd23182e4UL,\n+    0x3c86f46aUL, 0xedeeb2fdUL, 0x3ff31432UL, 0xf3f3fcd1UL, 0x3c8959a3UL,\n+    0xfc4cd831UL, 0x3ff32170UL, 0x8e18047cUL, 0x3c8a9ce7UL, 0x3ba8ea32UL,\n+    0x3ff32eb8UL, 0x3cb4f318UL, 0xbc9c45e8UL, 0xb26416ffUL, 0x3ff33c08UL,\n+    0x843659a6UL, 0x3c932721UL, 0x66e3fa2dUL, 0x3ff34962UL, 0x930881a4UL,\n+    0xbc835a75UL, 0x5f929ff1UL, 0x3ff356c5UL, 0x5c4e4628UL, 0xbc8b5ceeUL,\n+    0xa2de883bUL, 0x3ff36431UL, 0xa06cb85eUL, 0xbc8c3144UL, 0x373aa9cbUL,\n+    0x3ff371a7UL, 0xbf42eae2UL, 0xbc963aeaUL, 0x231e754aUL, 0x3ff37f26UL,\n+    0x9eceb23cUL, 0xbc99f5caUL, 0x6d05d866UL, 0x3ff38caeUL, 0x3c9904bdUL,\n+    0xbc9e958dUL, 0x1b7140efUL, 0x3ff39a40UL, 0xfc8e2934UL, 0xbc99a9a5UL,\n+    0x34e59ff7UL, 0x3ff3a7dbUL, 0xd661f5e3UL, 0xbc75e436UL, 0xbfec6cf4UL,\n+    0x3ff3b57fUL, 0xe26fff18UL, 0x3c954c66UL, 0xc313a8e5UL, 0x3ff3c32dUL,\n+    0x375d29c3UL, 0xbc9efff8UL, 0x44ede173UL, 0x3ff3d0e5UL, 0x8c284c71UL,\n+    0x3c7fe8d0UL, 0x4c123422UL, 0x3ff3dea6UL, 0x11f09ebcUL, 0x3c8ada09UL,\n+    0xdf1c5175UL, 0x3ff3ec70UL, 0x7b8c9bcaUL, 0xbc8af663UL, 0x04ac801cUL,\n+    0x3ff3fa45UL, 0xf956f9f3UL, 0xbc97d023UL, 0xc367a024UL, 0x3ff40822UL,\n+    0xb6f4d048UL, 0x3c8bddf8UL, 0x21f72e2aUL, 0x3ff4160aUL, 0x1c309278UL,\n+    0xbc5ef369UL, 0x2709468aUL, 0x3ff423fbUL, 0xc0b314ddUL, 0xbc98462dUL,\n+    0xd950a897UL, 0x3ff431f5UL, 0xe35f7999UL, 0xbc81c7ddUL, 0x3f84b9d4UL,\n+    0x3ff43ffaUL, 0x9704c003UL, 0x3c8880beUL, 0x6061892dUL, 0x3ff44e08UL,\n+    0x04ef80d0UL, 0x3c489b7aUL, 0x42a7d232UL, 0x3ff45c20UL, 0x82fb1f8eUL,\n+    0xbc686419UL, 0xed1d0057UL, 0x3ff46a41UL, 0xd1648a76UL, 0x3c9c944bUL,\n+    0x668b3237UL, 0x3ff4786dUL, 0xed445733UL, 0xbc9c20f0UL, 0xb5c13cd0UL,\n+    0x3ff486a2UL, 0xb69062f0UL, 0x3c73c1a3UL, 0xe192aed2UL, 0x3ff494e1UL,\n+    0x5e499ea0UL, 0xbc83b289UL, 0xf0d7d3deUL, 0x3ff4a32aUL, 0xf3d1be56UL,\n+    0x3c99cb62UL, 0xea6db7d7UL, 0x3ff4b17dUL, 0x7f2897f0UL, 0xbc8125b8UL,\n+    0xd5362a27UL, 0x3ff4bfdaUL, 0xafec42e2UL, 0x3c7d4397UL, 0xb817c114UL,\n+    0x3ff4ce41UL, 0x690abd5dUL, 0x3c905e29UL, 0x99fddd0dUL, 0x3ff4dcb2UL,\n+    0xbc6a7833UL, 0x3c98ecdbUL, 0x81d8abffUL, 0x3ff4eb2dUL, 0x2e5d7a52UL,\n+    0xbc95257dUL, 0x769d2ca7UL, 0x3ff4f9b2UL, 0xd25957e3UL, 0xbc94b309UL,\n+    0x7f4531eeUL, 0x3ff50841UL, 0x49b7465fUL, 0x3c7a249bUL, 0xa2cf6642UL,\n+    0x3ff516daUL, 0x69bd93efUL, 0xbc8f7685UL, 0xe83f4eefUL, 0x3ff5257dUL,\n+    0x43efef71UL, 0xbc7c998dUL, 0x569d4f82UL, 0x3ff5342bUL, 0x1db13cadUL,\n+    0xbc807abeUL, 0xf4f6ad27UL, 0x3ff542e2UL, 0x192d5f7eUL, 0x3c87926dUL,\n+    0xca5d920fUL, 0x3ff551a4UL, 0xefede59bUL, 0xbc8d689cUL, 0xdde910d2UL,\n+    0x3ff56070UL, 0x168eebf0UL, 0xbc90fb6eUL, 0x36b527daUL, 0x3ff56f47UL,\n+    0x011d93adUL, 0x3c99bb2cUL, 0xdbe2c4cfUL, 0x3ff57e27UL, 0x8a57b9c4UL,\n+    0xbc90b98cUL, 0xd497c7fdUL, 0x3ff58d12UL, 0x5b9a1de8UL, 0x3c8295e1UL,\n+    0x27ff07ccUL, 0x3ff59c08UL, 0xe467e60fUL, 0xbc97e2ceUL, 0xdd485429UL,\n+    0x3ff5ab07UL, 0x054647adUL, 0x3c96324cUL, 0xfba87a03UL, 0x3ff5ba11UL,\n+    0x4c233e1aUL, 0xbc9b77a1UL, 0x8a5946b7UL, 0x3ff5c926UL, 0x816986a2UL,\n+    0x3c3c4b1bUL, 0x90998b93UL, 0x3ff5d845UL, 0xa8b45643UL, 0xbc9cd6a7UL,\n+    0x15ad2148UL, 0x3ff5e76fUL, 0x3080e65eUL, 0x3c9ba6f9UL, 0x20dceb71UL,\n+    0x3ff5f6a3UL, 0xe3cdcf92UL, 0xbc89eaddUL, 0xb976dc09UL, 0x3ff605e1UL,\n+    0x9b56de47UL, 0xbc93e242UL, 0xe6cdf6f4UL, 0x3ff6152aUL, 0x4ab84c27UL,\n+    0x3c9e4b3eUL, 0xb03a5585UL, 0x3ff6247eUL, 0x7e40b497UL, 0xbc9383c1UL,\n+    0x1d1929fdUL, 0x3ff633ddUL, 0xbeb964e5UL, 0x3c984710UL, 0x34ccc320UL,\n+    0x3ff64346UL, 0x759d8933UL, 0xbc8c483cUL, 0xfebc8fb7UL, 0x3ff652b9UL,\n+    0xc9a73e09UL, 0xbc9ae3d5UL, 0x82552225UL, 0x3ff66238UL, 0x87591c34UL,\n+    0xbc9bb609UL, 0xc70833f6UL, 0x3ff671c1UL, 0x586c6134UL, 0xbc8e8732UL,\n+    0xd44ca973UL, 0x3ff68155UL, 0x44f73e65UL, 0x3c6038aeUL, 0xb19e9538UL,\n+    0x3ff690f4UL, 0x9aeb445dUL, 0x3c8804bdUL, 0x667f3bcdUL, 0x3ff6a09eUL,\n+    0x13b26456UL, 0xbc9bdd34UL, 0xfa75173eUL, 0x3ff6b052UL, 0x2c9a9d0eUL,\n+    0x3c7a38f5UL, 0x750bdabfUL, 0x3ff6c012UL, 0x67ff0b0dUL, 0xbc728956UL,\n+    0xddd47645UL, 0x3ff6cfdcUL, 0xb6f17309UL, 0x3c9c7aa9UL, 0x3c651a2fUL,\n+    0x3ff6dfb2UL, 0x683c88abUL, 0xbc6bbe3aUL, 0x98593ae5UL, 0x3ff6ef92UL,\n+    0x9e1ac8b2UL, 0xbc90b974UL, 0xf9519484UL, 0x3ff6ff7dUL, 0x25860ef6UL,\n+    0xbc883c0fUL, 0x66f42e87UL, 0x3ff70f74UL, 0xd45aa65fUL, 0x3c59d644UL,\n+    0xe8ec5f74UL, 0x3ff71f75UL, 0x86887a99UL, 0xbc816e47UL, 0x86ead08aUL,\n+    0x3ff72f82UL, 0x2cd62c72UL, 0xbc920aa0UL, 0x48a58174UL, 0x3ff73f9aUL,\n+    0x6c65d53cUL, 0xbc90a8d9UL, 0x35d7cbfdUL, 0x3ff74fbdUL, 0x618a6e1cUL,\n+    0x3c9047fdUL, 0x564267c9UL, 0x3ff75febUL, 0x57316dd3UL, 0xbc902459UL,\n+    0xb1ab6e09UL, 0x3ff77024UL, 0x169147f8UL, 0x3c9b7877UL, 0x4fde5d3fUL,\n+    0x3ff78069UL, 0x0a02162dUL, 0x3c9866b8UL, 0x38ac1cf6UL, 0x3ff790b9UL,\n+    0x62aadd3eUL, 0x3c9349a8UL, 0x73eb0187UL, 0x3ff7a114UL, 0xee04992fUL,\n+    0xbc841577UL, 0x0976cfdbUL, 0x3ff7b17bUL, 0x8468dc88UL, 0xbc9bebb5UL,\n+    0x0130c132UL, 0x3ff7c1edUL, 0xd1164dd6UL, 0x3c9f124cUL, 0x62ff86f0UL,\n+    0x3ff7d26aUL, 0xfb72b8b4UL, 0x3c91bddbUL, 0x36cf4e62UL, 0x3ff7e2f3UL,\n+    0xba15797eUL, 0x3c705d02UL, 0x8491c491UL, 0x3ff7f387UL, 0xcf9311aeUL,\n+    0xbc807f11UL, 0x543e1a12UL, 0x3ff80427UL, 0x626d972bUL, 0xbc927c86UL,\n+    0xadd106d9UL, 0x3ff814d2UL, 0x0d151d4dUL, 0x3c946437UL, 0x994cce13UL,\n+    0x3ff82589UL, 0xd41532d8UL, 0xbc9d4c1dUL, 0x1eb941f7UL, 0x3ff8364cUL,\n+    0x31df2bd5UL, 0x3c999b9aUL, 0x4623c7adUL, 0x3ff8471aUL, 0xa341cdfbUL,\n+    0xbc88d684UL, 0x179f5b21UL, 0x3ff857f4UL, 0xf8b216d0UL, 0xbc5ba748UL,\n+    0x9b4492edUL, 0x3ff868d9UL, 0x9bd4f6baUL, 0xbc9fc6f8UL, 0xd931a436UL,\n+    0x3ff879caUL, 0xd2db47bdUL, 0x3c85d2d7UL, 0xd98a6699UL, 0x3ff88ac7UL,\n+    0xf37cb53aUL, 0x3c9994c2UL, 0xa478580fUL, 0x3ff89bd0UL, 0x4475202aUL,\n+    0x3c9d5395UL, 0x422aa0dbUL, 0x3ff8ace5UL, 0x56864b27UL, 0x3c96e9f1UL,\n+    0xbad61778UL, 0x3ff8be05UL, 0xfc43446eUL, 0x3c9ecb5eUL, 0x16b5448cUL,\n+    0x3ff8cf32UL, 0x32e9e3aaUL, 0xbc70d55eUL, 0x5e0866d9UL, 0x3ff8e06aUL,\n+    0x6fc9b2e6UL, 0xbc97114aUL, 0x99157736UL, 0x3ff8f1aeUL, 0xa2e3976cUL,\n+    0x3c85cc13UL, 0xd0282c8aUL, 0x3ff902feUL, 0x85fe3fd2UL, 0x3c9592caUL,\n+    0x0b91ffc6UL, 0x3ff9145bUL, 0x2e582524UL, 0xbc9dd679UL, 0x53aa2fe2UL,\n+    0x3ff925c3UL, 0xa639db7fUL, 0xbc83455fUL, 0xb0cdc5e5UL, 0x3ff93737UL,\n+    0x81b57ebcUL, 0xbc675fc7UL, 0x2b5f98e5UL, 0x3ff948b8UL, 0x797d2d99UL,\n+    0xbc8dc3d6UL, 0xcbc8520fUL, 0x3ff95a44UL, 0x96a5f039UL, 0xbc764b7cUL,\n+    0x9a7670b3UL, 0x3ff96bddUL, 0x7f19c896UL, 0xbc5ba596UL, 0x9fde4e50UL,\n+    0x3ff97d82UL, 0x7c1b85d1UL, 0xbc9d185bUL, 0xe47a22a2UL, 0x3ff98f33UL,\n+    0xa24c78ecUL, 0x3c7cabdaUL, 0x70ca07baUL, 0x3ff9a0f1UL, 0x91cee632UL,\n+    0xbc9173bdUL, 0x4d53fe0dUL, 0x3ff9b2bbUL, 0x4df6d518UL, 0xbc9dd84eUL,\n+    0x82a3f090UL, 0x3ff9c491UL, 0xb071f2beUL, 0x3c7c7c46UL, 0x194bb8d5UL,\n+    0x3ff9d674UL, 0xa3dd8233UL, 0xbc9516beUL, 0x19e32323UL, 0x3ff9e863UL,\n+    0x78e64c6eUL, 0x3c7824caUL, 0x8d07f29eUL, 0x3ff9fa5eUL, 0xaaf1faceUL,\n+    0xbc84a9ceUL, 0x7b5de565UL, 0x3ffa0c66UL, 0x5d1cd533UL, 0xbc935949UL,\n+    0xed8eb8bbUL, 0x3ffa1e7aUL, 0xee8be70eUL, 0x3c9c6618UL, 0xec4a2d33UL,\n+    0x3ffa309bUL, 0x7ddc36abUL, 0x3c96305cUL, 0x80460ad8UL, 0x3ffa42c9UL,\n+    0x589fb120UL, 0xbc9aa780UL, 0xb23e255dUL, 0x3ffa5503UL, 0xdb8d41e1UL,\n+    0xbc9d2f6eUL, 0x8af46052UL, 0x3ffa674aUL, 0x30670366UL, 0x3c650f56UL,\n+    0x1330b358UL, 0x3ffa799eUL, 0xcac563c7UL, 0x3c9bcb7eUL, 0x53c12e59UL,\n+    0x3ffa8bfeUL, 0xb2ba15a9UL, 0xbc94f867UL, 0x5579fdbfUL, 0x3ffa9e6bUL,\n+    0x0ef7fd31UL, 0x3c90fac9UL, 0x21356ebaUL, 0x3ffab0e5UL, 0xdae94545UL,\n+    0x3c889c31UL, 0xbfd3f37aUL, 0x3ffac36bUL, 0xcae76cd0UL, 0xbc8f9234UL,\n+    0x3a3c2774UL, 0x3ffad5ffUL, 0xb6b1b8e5UL, 0x3c97ef3bUL, 0x995ad3adUL,\n+    0x3ffae89fUL, 0x345dcc81UL, 0x3c97a1cdUL, 0xe622f2ffUL, 0x3ffafb4cUL,\n+    0x0f315ecdUL, 0xbc94b2fcUL, 0x298db666UL, 0x3ffb0e07UL, 0x4c80e425UL,\n+    0xbc9bdef5UL, 0x6c9a8952UL, 0x3ffb20ceUL, 0x4a0756ccUL, 0x3c94dd02UL,\n+    0xb84f15fbUL, 0x3ffb33a2UL, 0x3084d708UL, 0xbc62805eUL, 0x15b749b1UL,\n+    0x3ffb4684UL, 0xe9df7c90UL, 0xbc7f763dUL, 0x8de5593aUL, 0x3ffb5972UL,\n+    0xbbba6de3UL, 0xbc9c71dfUL, 0x29f1c52aUL, 0x3ffb6c6eUL, 0x52883f6eUL,\n+    0x3c92a8f3UL, 0xf2fb5e47UL, 0x3ffb7f76UL, 0x7e54ac3bUL, 0xbc75584fUL,\n+    0xf22749e4UL, 0x3ffb928cUL, 0x54cb65c6UL, 0xbc9b7216UL, 0x30a1064aUL,\n+    0x3ffba5b0UL, 0x0e54292eUL, 0xbc9efcd3UL, 0xb79a6f1fUL, 0x3ffbb8e0UL,\n+    0xc9696205UL, 0xbc3f52d1UL, 0x904bc1d2UL, 0x3ffbcc1eUL, 0x7a2d9e84UL,\n+    0x3c823dd0UL, 0xc3f3a207UL, 0x3ffbdf69UL, 0x60ea5b53UL, 0xbc3c2623UL,\n+    0x5bd71e09UL, 0x3ffbf2c2UL, 0x3f6b9c73UL, 0xbc9efdcaUL, 0x6141b33dUL,\n+    0x3ffc0628UL, 0xa1fbca34UL, 0xbc8d8a5aUL, 0xdd85529cUL, 0x3ffc199bUL,\n+    0x895048ddUL, 0x3c811065UL, 0xd9fa652cUL, 0x3ffc2d1cUL, 0x17c8a5d7UL,\n+    0xbc96e516UL, 0x5fffd07aUL, 0x3ffc40abUL, 0xe083c60aUL, 0x3c9b4537UL,\n+    0x78fafb22UL, 0x3ffc5447UL, 0x2493b5afUL, 0x3c912f07UL, 0x2e57d14bUL,\n+    0x3ffc67f1UL, 0xff483cadUL, 0x3c92884dUL, 0x8988c933UL, 0x3ffc7ba8UL,\n+    0xbe255559UL, 0xbc8e76bbUL, 0x9406e7b5UL, 0x3ffc8f6dUL, 0x48805c44UL,\n+    0x3c71acbcUL, 0x5751c4dbUL, 0x3ffca340UL, 0xd10d08f5UL, 0xbc87f2beUL,\n+    0xdcef9069UL, 0x3ffcb720UL, 0xd1e949dbUL, 0x3c7503cbUL, 0x2e6d1675UL,\n+    0x3ffccb0fUL, 0x86009092UL, 0xbc7d220fUL, 0x555dc3faUL, 0x3ffcdf0bUL,\n+    0x53829d72UL, 0xbc8dd83bUL, 0x5b5bab74UL, 0x3ffcf315UL, 0xb86dff57UL,\n+    0xbc9a08e9UL, 0x4a07897cUL, 0x3ffd072dUL, 0x43797a9cUL, 0xbc9cbc37UL,\n+    0x2b08c968UL, 0x3ffd1b53UL, 0x219a36eeUL, 0x3c955636UL, 0x080d89f2UL,\n+    0x3ffd2f87UL, 0x719d8578UL, 0xbc9d487bUL, 0xeacaa1d6UL, 0x3ffd43c8UL,\n+    0xbf5a1614UL, 0x3c93db53UL, 0xdcfba487UL, 0x3ffd5818UL, 0xd75b3707UL,\n+    0x3c82ed02UL, 0xe862e6d3UL, 0x3ffd6c76UL, 0x4a8165a0UL, 0x3c5fe87aUL,\n+    0x16c98398UL, 0x3ffd80e3UL, 0x8beddfe8UL, 0xbc911ec1UL, 0x71ff6075UL,\n+    0x3ffd955dUL, 0xbb9af6beUL, 0x3c9a052dUL, 0x03db3285UL, 0x3ffda9e6UL,\n+    0x696db532UL, 0x3c9c2300UL, 0xd63a8315UL, 0x3ffdbe7cUL, 0x926b8be4UL,\n+    0xbc9b76f1UL, 0xf301b460UL, 0x3ffdd321UL, 0x78f018c3UL, 0x3c92da57UL,\n+    0x641c0658UL, 0x3ffde7d5UL, 0x8e79ba8fUL, 0xbc9ca552UL, 0x337b9b5fUL,\n+    0x3ffdfc97UL, 0x4f184b5cUL, 0xbc91a5cdUL, 0x6b197d17UL, 0x3ffe1167UL,\n+    0xbd5c7f44UL, 0xbc72b529UL, 0x14f5a129UL, 0x3ffe2646UL, 0x817a1496UL,\n+    0xbc97b627UL, 0x3b16ee12UL, 0x3ffe3b33UL, 0x31fdc68bUL, 0xbc99f4a4UL,\n+    0xe78b3ff6UL, 0x3ffe502eUL, 0x80a9cc8fUL, 0x3c839e89UL, 0x24676d76UL,\n+    0x3ffe6539UL, 0x7522b735UL, 0xbc863ff8UL, 0xfbc74c83UL, 0x3ffe7a51UL,\n+    0xca0c8de2UL, 0x3c92d522UL, 0x77cdb740UL, 0x3ffe8f79UL, 0x80b054b1UL,\n+    0xbc910894UL, 0xa2a490daUL, 0x3ffea4afUL, 0x179c2893UL, 0xbc9e9c23UL,\n+    0x867cca6eUL, 0x3ffeb9f4UL, 0x2293e4f2UL, 0x3c94832fUL, 0x2d8e67f1UL,\n+    0x3ffecf48UL, 0xb411ad8cUL, 0xbc9c93f3UL, 0xa2188510UL, 0x3ffee4aaUL,\n+    0xa487568dUL, 0x3c91c68dUL, 0xee615a27UL, 0x3ffefa1bUL, 0x86a4b6b0UL,\n+    0x3c9dc7f4UL, 0x1cb6412aUL, 0x3fff0f9cUL, 0x65181d45UL, 0xbc932200UL,\n+    0x376bba97UL, 0x3fff252bUL, 0xbf0d8e43UL, 0x3c93a1a5UL, 0x48dd7274UL,\n+    0x3fff3ac9UL, 0x3ed837deUL, 0xbc795a5aUL, 0x5b6e4540UL, 0x3fff5076UL,\n+    0x2dd8a18bUL, 0x3c99d3e1UL, 0x798844f8UL, 0x3fff6632UL, 0x3539343eUL,\n+    0x3c9fa37bUL, 0xad9cbe14UL, 0x3fff7bfdUL, 0xd006350aUL, 0xbc9dbb12UL,\n+    0x02243c89UL, 0x3fff91d8UL, 0xa779f689UL, 0xbc612ea8UL, 0x819e90d8UL,\n+    0x3fffa7c1UL, 0xf3a5931eUL, 0x3c874853UL, 0x3692d514UL, 0x3fffbdbaUL,\n+    0x15098eb6UL, 0xbc796773UL, 0x2b8f71f1UL, 0x3fffd3c2UL, 0x966579e7UL,\n+    0x3c62eb74UL, 0x6b2a23d9UL, 0x3fffe9d9UL, 0x7442fde3UL, 0x3c74a603UL,\n+    0xe78a6731UL, 0x3f55d87fUL, 0xd704a0c0UL, 0x3fac6b08UL, 0x6fba4e77UL,\n+    0x3f83b2abUL, 0xff82c58fUL, 0x3fcebfbdUL, 0xfefa39efUL, 0x3fe62e42UL,\n+    0x00000000UL, 0x00000000UL, 0xfefa39efUL, 0x3fe62e42UL, 0xfefa39efUL,\n+    0xbfe62e42UL, 0xf8000000UL, 0xffffffffUL, 0xf8000000UL, 0xffffffffUL,\n+    0x00000000UL, 0x80000000UL, 0x00000000UL, 0x00000000UL\n+\n+};\n+\n+ATTRIBUTE_ALIGNED(8) double _DOUBLE2 = 2.0;\n+ATTRIBUTE_ALIGNED(8) double _DOUBLE0 = 0.0;\n+ATTRIBUTE_ALIGNED(8) double _DOUBLE0DOT5 = 0.5;\n+\n+\/\/registers,\n+\/\/ input: xmm0, xmm1\n+\/\/ scratch: xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7\n+\/\/          eax, edx, ecx, ebx\n+\n+\/\/ Code generated by Intel C compiler for LIBM library\n+\n+void MacroAssembler::fast_pow(XMMRegister xmm0, XMMRegister xmm1, XMMRegister xmm2, XMMRegister xmm3, XMMRegister xmm4, XMMRegister xmm5, XMMRegister xmm6, XMMRegister xmm7, Register eax, Register ecx, Register edx, Register tmp) {\n+  Label L_2TAG_PACKET_0_0_2, L_2TAG_PACKET_1_0_2, L_2TAG_PACKET_2_0_2, L_2TAG_PACKET_3_0_2;\n+  Label L_2TAG_PACKET_4_0_2, L_2TAG_PACKET_5_0_2, L_2TAG_PACKET_6_0_2, L_2TAG_PACKET_7_0_2;\n+  Label L_2TAG_PACKET_8_0_2, L_2TAG_PACKET_9_0_2, L_2TAG_PACKET_10_0_2, L_2TAG_PACKET_11_0_2;\n+  Label L_2TAG_PACKET_12_0_2, L_2TAG_PACKET_13_0_2, L_2TAG_PACKET_14_0_2, L_2TAG_PACKET_15_0_2;\n+  Label L_2TAG_PACKET_16_0_2, L_2TAG_PACKET_17_0_2, L_2TAG_PACKET_18_0_2, L_2TAG_PACKET_19_0_2;\n+  Label L_2TAG_PACKET_20_0_2, L_2TAG_PACKET_21_0_2, L_2TAG_PACKET_22_0_2, L_2TAG_PACKET_23_0_2;\n+  Label L_2TAG_PACKET_24_0_2, L_2TAG_PACKET_25_0_2, L_2TAG_PACKET_26_0_2, L_2TAG_PACKET_27_0_2;\n+  Label L_2TAG_PACKET_28_0_2, L_2TAG_PACKET_29_0_2, L_2TAG_PACKET_30_0_2, L_2TAG_PACKET_31_0_2;\n+  Label L_2TAG_PACKET_32_0_2, L_2TAG_PACKET_33_0_2, L_2TAG_PACKET_34_0_2, L_2TAG_PACKET_35_0_2;\n+  Label L_2TAG_PACKET_36_0_2, L_2TAG_PACKET_37_0_2, L_2TAG_PACKET_38_0_2, L_2TAG_PACKET_39_0_2;\n+  Label L_2TAG_PACKET_40_0_2, L_2TAG_PACKET_41_0_2, L_2TAG_PACKET_42_0_2, L_2TAG_PACKET_43_0_2;\n+  Label L_2TAG_PACKET_44_0_2, L_2TAG_PACKET_45_0_2, L_2TAG_PACKET_46_0_2, L_2TAG_PACKET_47_0_2;\n+  Label L_2TAG_PACKET_48_0_2, L_2TAG_PACKET_49_0_2, L_2TAG_PACKET_50_0_2, L_2TAG_PACKET_51_0_2;\n+  Label L_2TAG_PACKET_52_0_2, L_2TAG_PACKET_53_0_2, L_2TAG_PACKET_54_0_2, L_2TAG_PACKET_55_0_2;\n+  Label L_2TAG_PACKET_56_0_2, L_2TAG_PACKET_57_0_2, L_2TAG_PACKET_58_0_2, start;\n+  Label L_NOT_DOUBLE2, L_NOT_DOUBLE0DOT5;\n+\n+  assert_different_registers(tmp, eax, ecx, edx);\n+\n+  address static_const_table_pow = (address)_static_const_table_pow;\n+  address DOUBLE2 = (address) &_DOUBLE2;\n+  address DOUBLE0 = (address) &_DOUBLE0;\n+  address DOUBLE0DOT5 = (address) &_DOUBLE0DOT5;\n+\n+  subl(rsp, 120);\n+  movl(Address(rsp, 64), tmp);\n+  lea(tmp, ExternalAddress(static_const_table_pow));\n+  movsd(xmm0, Address(rsp, 128));\n+  movsd(xmm1, Address(rsp, 136));\n+\n+  \/\/ Special case: pow(x, 2.0) => x * x\n+  ucomisd(xmm1, ExternalAddress(DOUBLE2));\n+  jccb(Assembler::notEqual, L_NOT_DOUBLE2);\n+  jccb(Assembler::parity, L_NOT_DOUBLE2);\n+  mulsd(xmm0, xmm0);\n+  jmp(L_2TAG_PACKET_21_0_2);\n+\n+  bind(L_NOT_DOUBLE2);\n+  \/\/ Special case: pow(x, 0.5) => sqrt(x)\n+  ucomisd(xmm1, ExternalAddress(DOUBLE0DOT5)); \/\/ For pow(x, y), check whether y == 0.5\n+  jccb(Assembler::notEqual, L_NOT_DOUBLE0DOT5);\n+  jccb(Assembler::parity, L_NOT_DOUBLE0DOT5);\n+  ucomisd(xmm0, ExternalAddress(DOUBLE0));\n+  \/\/ According to the API specs, pow(-0.0, 0.5) = 0.0 and sqrt(-0.0) = -0.0.\n+  \/\/ So pow(-0.0, 0.5) shouldn't be replaced with sqrt(-0.0).\n+  \/\/ -0.0\/+0.0 are both excluded since floating-point comparison doesn't distinguish -0.0 from +0.0.\n+  jccb(Assembler::belowEqual, L_NOT_DOUBLE0DOT5); \/\/ pow(x, 0.5) => sqrt(x) only for x > 0.0\n+  sqrtsd(xmm0, xmm0);\n+  jmp(L_2TAG_PACKET_21_0_2);\n+\n+  bind(L_NOT_DOUBLE0DOT5);\n+  xorpd(xmm2, xmm2);\n+  movl(eax, 16368);\n+  pinsrw(xmm2, eax, 3);\n+  movl(ecx, 1069088768);\n+  movdl(xmm7, ecx);\n+  movsd(Address(rsp, 16), xmm1);\n+  xorpd(xmm1, xmm1);\n+  movl(edx, 30704);\n+  pinsrw(xmm1, edx, 3);\n+  movsd(Address(rsp, 8), xmm0);\n+  movdqu(xmm3, xmm0);\n+  movl(edx, 8192);\n+  movdl(xmm4, edx);\n+  movdqu(xmm6, Address(tmp, 8240));\n+  pextrw(eax, xmm0, 3);\n+  por(xmm0, xmm2);\n+  psllq(xmm0, 5);\n+  movsd(xmm2, Address(tmp, 8256));\n+  psrlq(xmm0, 34);\n+  movl(edx, eax);\n+  andl(edx, 32752);\n+  subl(edx, 16368);\n+  movl(ecx, edx);\n+  sarl(edx, 31);\n+  addl(ecx, edx);\n+  xorl(ecx, edx);\n+  rcpss(xmm0, xmm0);\n+  psllq(xmm3, 12);\n+  addl(ecx, 16);\n+  bsrl(ecx, ecx);\n+  psrlq(xmm3, 12);\n+  movl(Address(rsp, 24), rsi);\n+  subl(eax, 16);\n+  cmpl(eax, 32736);\n+  jcc(Assembler::aboveEqual, L_2TAG_PACKET_0_0_2);\n+  movl(rsi, 0);\n+\n+  bind(L_2TAG_PACKET_1_0_2);\n+  mulss(xmm0, xmm7);\n+  movl(edx, -1);\n+  subl(ecx, 4);\n+  shll(edx);\n+  movdl(xmm5, edx);\n+  por(xmm3, xmm1);\n+  subl(eax, 16351);\n+  cmpl(eax, 1);\n+  jcc(Assembler::belowEqual, L_2TAG_PACKET_2_0_2);\n+  paddd(xmm0, xmm4);\n+  psllq(xmm5, 32);\n+  movdl(edx, xmm0);\n+  psllq(xmm0, 29);\n+  pand(xmm5, xmm3);\n+\n+  bind(L_2TAG_PACKET_3_0_2);\n+  pand(xmm0, xmm6);\n+  subsd(xmm3, xmm5);\n+  subl(eax, 1);\n+  sarl(eax, 4);\n+  cvtsi2sdl(xmm7, eax);\n+  mulpd(xmm5, xmm0);\n+\n+  bind(L_2TAG_PACKET_4_0_2);\n+  mulsd(xmm3, xmm0);\n+  movdqu(xmm1, Address(tmp, 8272));\n+  subsd(xmm5, xmm2);\n+  movdqu(xmm4, Address(tmp, 8288));\n+  movl(ecx, eax);\n+  sarl(eax, 31);\n+  addl(ecx, eax);\n+  xorl(eax, ecx);\n+  addl(eax, 1);\n+  bsrl(eax, eax);\n+  unpcklpd(xmm5, xmm3);\n+  movdqu(xmm6, Address(tmp, 8304));\n+  addsd(xmm3, xmm5);\n+  andl(edx, 16760832);\n+  shrl(edx, 10);\n+  addpd(xmm5, Address(tmp, edx, Address::times_1, -3616));\n+  movdqu(xmm0, Address(tmp, 8320));\n+  pshufd(xmm2, xmm3, 68);\n+  mulsd(xmm3, xmm3);\n+  mulpd(xmm1, xmm2);\n+  mulpd(xmm4, xmm2);\n+  addsd(xmm5, xmm7);\n+  mulsd(xmm2, xmm3);\n+  addpd(xmm6, xmm1);\n+  mulsd(xmm3, xmm3);\n+  addpd(xmm0, xmm4);\n+  movsd(xmm1, Address(rsp, 16));\n+  movzwl(ecx, Address(rsp, 22));\n+  pshufd(xmm7, xmm5, 238);\n+  movsd(xmm4, Address(tmp, 8368));\n+  mulpd(xmm6, xmm2);\n+  pshufd(xmm3, xmm3, 68);\n+  mulpd(xmm0, xmm2);\n+  shll(eax, 4);\n+  subl(eax, 15872);\n+  andl(ecx, 32752);\n+  addl(eax, ecx);\n+  mulpd(xmm3, xmm6);\n+  cmpl(eax, 624);\n+  jcc(Assembler::aboveEqual, L_2TAG_PACKET_5_0_2);\n+  xorpd(xmm6, xmm6);\n+  movl(edx, 17080);\n+  pinsrw(xmm6, edx, 3);\n+  movdqu(xmm2, xmm1);\n+  pand(xmm4, xmm1);\n+  subsd(xmm1, xmm4);\n+  mulsd(xmm4, xmm5);\n+  addsd(xmm0, xmm7);\n+  mulsd(xmm1, xmm5);\n+  movdqu(xmm7, xmm6);\n+  addsd(xmm6, xmm4);\n+  addpd(xmm3, xmm0);\n+  movdl(edx, xmm6);\n+  subsd(xmm6, xmm7);\n+  pshufd(xmm0, xmm3, 238);\n+  subsd(xmm4, xmm6);\n+  addsd(xmm0, xmm3);\n+  movl(ecx, edx);\n+  andl(edx, 255);\n+  addl(edx, edx);\n+  movdqu(xmm5, Address(tmp, edx, Address::times_8, 8384));\n+  addsd(xmm4, xmm1);\n+  mulsd(xmm2, xmm0);\n+  movdqu(xmm7, Address(tmp, 12480));\n+  movdqu(xmm3, Address(tmp, 12496));\n+  shll(ecx, 12);\n+  xorl(ecx, rsi);\n+  andl(ecx, -1048576);\n+  movdl(xmm6, ecx);\n+  addsd(xmm2, xmm4);\n+  movsd(xmm1, Address(tmp, 12512));\n+  pshufd(xmm0, xmm2, 68);\n+  pshufd(xmm4, xmm2, 68);\n+  mulpd(xmm0, xmm0);\n+  movl(rsi, Address(rsp, 24));\n+  mulpd(xmm7, xmm4);\n+  pshufd(xmm6, xmm6, 17);\n+  mulsd(xmm1, xmm2);\n+  mulsd(xmm0, xmm0);\n+  paddd(xmm5, xmm6);\n+  addpd(xmm3, xmm7);\n+  mulsd(xmm1, xmm5);\n+  pshufd(xmm6, xmm5, 238);\n+  mulpd(xmm0, xmm3);\n+  addsd(xmm1, xmm6);\n+  pshufd(xmm3, xmm0, 238);\n+  mulsd(xmm0, xmm5);\n+  mulsd(xmm3, xmm5);\n+  addsd(xmm0, xmm1);\n+  addsd(xmm0, xmm3);\n+  addsd(xmm0, xmm5);\n+  movsd(Address(rsp, 0), xmm0);\n+  fld_d(Address(rsp, 0));\n+  jmp(L_2TAG_PACKET_6_0_2);\n+\n+  bind(L_2TAG_PACKET_7_0_2);\n+  movsd(xmm0, Address(rsp, 128));\n+  movsd(xmm1, Address(rsp, 136));\n+  mulsd(xmm0, xmm1);\n+  movsd(Address(rsp, 0), xmm0);\n+  fld_d(Address(rsp, 0));\n+  jmp(L_2TAG_PACKET_6_0_2);\n+\n+  bind(L_2TAG_PACKET_0_0_2);\n+  addl(eax, 16);\n+  movl(edx, 32752);\n+  andl(edx, eax);\n+  cmpl(edx, 32752);\n+  jcc(Assembler::equal, L_2TAG_PACKET_8_0_2);\n+  testl(eax, 32768);\n+  jcc(Assembler::notEqual, L_2TAG_PACKET_9_0_2);\n+\n+  bind(L_2TAG_PACKET_10_0_2);\n+  movl(ecx, Address(rsp, 16));\n+  xorl(edx, edx);\n+  testl(ecx, ecx);\n+  movl(ecx, 1);\n+  cmovl(Assembler::notEqual, edx, ecx);\n+  orl(edx, Address(rsp, 20));\n+  cmpl(edx, 1072693248);\n+  jcc(Assembler::equal, L_2TAG_PACKET_7_0_2);\n+  movsd(xmm0, Address(rsp, 8));\n+  movsd(xmm3, Address(rsp, 8));\n+  movdl(edx, xmm3);\n+  psrlq(xmm3, 32);\n+  movdl(ecx, xmm3);\n+  orl(edx, ecx);\n+  cmpl(edx, 0);\n+  jcc(Assembler::equal, L_2TAG_PACKET_11_0_2);\n+  xorpd(xmm3, xmm3);\n+  movl(eax, 18416);\n+  pinsrw(xmm3, eax, 3);\n+  mulsd(xmm0, xmm3);\n+  xorpd(xmm2, xmm2);\n+  movl(eax, 16368);\n+  pinsrw(xmm2, eax, 3);\n+  movdqu(xmm3, xmm0);\n+  pextrw(eax, xmm0, 3);\n+  por(xmm0, xmm2);\n+  movl(ecx, 18416);\n+  psllq(xmm0, 5);\n+  movsd(xmm2, Address(tmp, 8256));\n+  psrlq(xmm0, 34);\n+  rcpss(xmm0, xmm0);\n+  psllq(xmm3, 12);\n+  movdqu(xmm6, Address(tmp, 8240));\n+  psrlq(xmm3, 12);\n+  mulss(xmm0, xmm7);\n+  movl(edx, -1024);\n+  movdl(xmm5, edx);\n+  por(xmm3, xmm1);\n+  paddd(xmm0, xmm4);\n+  psllq(xmm5, 32);\n+  movdl(edx, xmm0);\n+  psllq(xmm0, 29);\n+  pand(xmm5, xmm3);\n+  movl(rsi, 0);\n+  pand(xmm0, xmm6);\n+  subsd(xmm3, xmm5);\n+  andl(eax, 32752);\n+  subl(eax, 18416);\n+  sarl(eax, 4);\n+  cvtsi2sdl(xmm7, eax);\n+  mulpd(xmm5, xmm0);\n+  jmp(L_2TAG_PACKET_4_0_2);\n+\n+  bind(L_2TAG_PACKET_12_0_2);\n+  movl(ecx, Address(rsp, 16));\n+  xorl(edx, edx);\n+  testl(ecx, ecx);\n+  movl(ecx, 1);\n+  cmovl(Assembler::notEqual, edx, ecx);\n+  orl(edx, Address(rsp, 20));\n+  cmpl(edx, 1072693248);\n+  jcc(Assembler::equal, L_2TAG_PACKET_7_0_2);\n+  movsd(xmm0, Address(rsp, 8));\n+  movsd(xmm3, Address(rsp, 8));\n+  movdl(edx, xmm3);\n+  psrlq(xmm3, 32);\n+  movdl(ecx, xmm3);\n+  orl(edx, ecx);\n+  cmpl(edx, 0);\n+  jcc(Assembler::equal, L_2TAG_PACKET_11_0_2);\n+  xorpd(xmm3, xmm3);\n+  movl(eax, 18416);\n+  pinsrw(xmm3, eax, 3);\n+  mulsd(xmm0, xmm3);\n+  xorpd(xmm2, xmm2);\n+  movl(eax, 16368);\n+  pinsrw(xmm2, eax, 3);\n+  movdqu(xmm3, xmm0);\n+  pextrw(eax, xmm0, 3);\n+  por(xmm0, xmm2);\n+  movl(ecx, 18416);\n+  psllq(xmm0, 5);\n+  movsd(xmm2, Address(tmp, 8256));\n+  psrlq(xmm0, 34);\n+  rcpss(xmm0, xmm0);\n+  psllq(xmm3, 12);\n+  movdqu(xmm6, Address(tmp, 8240));\n+  psrlq(xmm3, 12);\n+  mulss(xmm0, xmm7);\n+  movl(edx, -1024);\n+  movdl(xmm5, edx);\n+  por(xmm3, xmm1);\n+  paddd(xmm0, xmm4);\n+  psllq(xmm5, 32);\n+  movdl(edx, xmm0);\n+  psllq(xmm0, 29);\n+  pand(xmm5, xmm3);\n+  movl(rsi, INT_MIN);\n+  pand(xmm0, xmm6);\n+  subsd(xmm3, xmm5);\n+  andl(eax, 32752);\n+  subl(eax, 18416);\n+  sarl(eax, 4);\n+  cvtsi2sdl(xmm7, eax);\n+  mulpd(xmm5, xmm0);\n+  jmp(L_2TAG_PACKET_4_0_2);\n+\n+  bind(L_2TAG_PACKET_5_0_2);\n+  cmpl(eax, 0);\n+  jcc(Assembler::less, L_2TAG_PACKET_13_0_2);\n+  cmpl(eax, 752);\n+  jcc(Assembler::aboveEqual, L_2TAG_PACKET_14_0_2);\n+\n+  bind(L_2TAG_PACKET_15_0_2);\n+  addsd(xmm0, xmm7);\n+  movsd(xmm2, Address(tmp, 12544));\n+  addpd(xmm3, xmm0);\n+  xorpd(xmm6, xmm6);\n+  movl(eax, 17080);\n+  pinsrw(xmm6, eax, 3);\n+  pshufd(xmm0, xmm3, 238);\n+  addsd(xmm0, xmm3);\n+  movdqu(xmm3, xmm5);\n+  addsd(xmm5, xmm0);\n+  movdqu(xmm4, xmm2);\n+  subsd(xmm3, xmm5);\n+  movdqu(xmm7, xmm5);\n+  pand(xmm5, xmm2);\n+  movdqu(xmm2, xmm1);\n+  pand(xmm4, xmm1);\n+  subsd(xmm7, xmm5);\n+  addsd(xmm0, xmm3);\n+  subsd(xmm1, xmm4);\n+  mulsd(xmm4, xmm5);\n+  addsd(xmm0, xmm7);\n+  mulsd(xmm2, xmm0);\n+  movdqu(xmm7, xmm6);\n+  mulsd(xmm1, xmm5);\n+  addsd(xmm6, xmm4);\n+  movdl(eax, xmm6);\n+  subsd(xmm6, xmm7);\n+  addsd(xmm2, xmm1);\n+  movdqu(xmm7, Address(tmp, 12480));\n+  movdqu(xmm3, Address(tmp, 12496));\n+  subsd(xmm4, xmm6);\n+  pextrw(edx, xmm6, 3);\n+  movl(ecx, eax);\n+  andl(eax, 255);\n+  addl(eax, eax);\n+  movdqu(xmm5, Address(tmp, eax, Address::times_8, 8384));\n+  addsd(xmm2, xmm4);\n+  sarl(ecx, 8);\n+  movl(eax, ecx);\n+  sarl(ecx, 1);\n+  subl(eax, ecx);\n+  shll(ecx, 20);\n+  xorl(ecx, rsi);\n+  movdl(xmm6, ecx);\n+  movsd(xmm1, Address(tmp, 12512));\n+  andl(edx, 32767);\n+  cmpl(edx, 16529);\n+  jcc(Assembler::above, L_2TAG_PACKET_14_0_2);\n+  pshufd(xmm0, xmm2, 68);\n+  pshufd(xmm4, xmm2, 68);\n+  mulpd(xmm0, xmm0);\n+  mulpd(xmm7, xmm4);\n+  pshufd(xmm6, xmm6, 17);\n+  mulsd(xmm1, xmm2);\n+  mulsd(xmm0, xmm0);\n+  paddd(xmm5, xmm6);\n+  addpd(xmm3, xmm7);\n+  mulsd(xmm1, xmm5);\n+  pshufd(xmm6, xmm5, 238);\n+  mulpd(xmm0, xmm3);\n+  addsd(xmm1, xmm6);\n+  pshufd(xmm3, xmm0, 238);\n+  mulsd(xmm0, xmm5);\n+  mulsd(xmm3, xmm5);\n+  shll(eax, 4);\n+  xorpd(xmm4, xmm4);\n+  addl(eax, 16368);\n+  pinsrw(xmm4, eax, 3);\n+  addsd(xmm0, xmm1);\n+  movl(rsi, Address(rsp, 24));\n+  addsd(xmm0, xmm3);\n+  movdqu(xmm1, xmm0);\n+  addsd(xmm0, xmm5);\n+  mulsd(xmm0, xmm4);\n+  pextrw(eax, xmm0, 3);\n+  andl(eax, 32752);\n+  jcc(Assembler::equal, L_2TAG_PACKET_16_0_2);\n+  cmpl(eax, 32752);\n+  jcc(Assembler::equal, L_2TAG_PACKET_17_0_2);\n+\n+  bind(L_2TAG_PACKET_18_0_2);\n+  movsd(Address(rsp, 0), xmm0);\n+  fld_d(Address(rsp, 0));\n+  jmp(L_2TAG_PACKET_6_0_2);\n+\n+  bind(L_2TAG_PACKET_8_0_2);\n+  movsd(xmm1, Address(rsp, 16));\n+  movsd(xmm0, Address(rsp, 8));\n+  movdqu(xmm2, xmm0);\n+  movdl(eax, xmm2);\n+  psrlq(xmm2, 20);\n+  movdl(edx, xmm2);\n+  orl(eax, edx);\n+  jcc(Assembler::equal, L_2TAG_PACKET_19_0_2);\n+  addsd(xmm0, xmm0);\n+  movdl(eax, xmm1);\n+  psrlq(xmm1, 32);\n+  movdl(edx, xmm1);\n+  movl(ecx, edx);\n+  addl(edx, edx);\n+  orl(eax, edx);\n+  jcc(Assembler::equal, L_2TAG_PACKET_20_0_2);\n+  jmp(L_2TAG_PACKET_18_0_2);\n+\n+  bind(L_2TAG_PACKET_20_0_2);\n+  xorpd(xmm0, xmm0);\n+  movl(eax, 16368);\n+  pinsrw(xmm0, eax, 3);\n+  movl(edx, 29);\n+  jmp(L_2TAG_PACKET_21_0_2);\n+\n+  bind(L_2TAG_PACKET_22_0_2);\n+  movsd(xmm0, Address(rsp, 16));\n+  addpd(xmm0, xmm0);\n+  jmp(L_2TAG_PACKET_18_0_2);\n+\n+  bind(L_2TAG_PACKET_19_0_2);\n+  movdl(eax, xmm1);\n+  movdqu(xmm2, xmm1);\n+  psrlq(xmm1, 32);\n+  movdl(edx, xmm1);\n+  movl(ecx, edx);\n+  addl(edx, edx);\n+  orl(eax, edx);\n+  jcc(Assembler::equal, L_2TAG_PACKET_23_0_2);\n+  pextrw(eax, xmm2, 3);\n+  andl(eax, 32752);\n+  cmpl(eax, 32752);\n+  jcc(Assembler::notEqual, L_2TAG_PACKET_24_0_2);\n+  movdl(eax, xmm2);\n+  psrlq(xmm2, 20);\n+  movdl(edx, xmm2);\n+  orl(eax, edx);\n+  jcc(Assembler::notEqual, L_2TAG_PACKET_22_0_2);\n+\n+  bind(L_2TAG_PACKET_24_0_2);\n+  pextrw(eax, xmm0, 3);\n+  testl(eax, 32768);\n+  jcc(Assembler::notEqual, L_2TAG_PACKET_25_0_2);\n+  testl(ecx, INT_MIN);\n+  jcc(Assembler::notEqual, L_2TAG_PACKET_26_0_2);\n+  jmp(L_2TAG_PACKET_18_0_2);\n+\n+  bind(L_2TAG_PACKET_27_0_2);\n+  movsd(xmm1, Address(rsp, 16));\n+  movdl(eax, xmm1);\n+  testl(eax, 1);\n+  jcc(Assembler::notEqual, L_2TAG_PACKET_28_0_2);\n+  testl(eax, 2);\n+  jcc(Assembler::notEqual, L_2TAG_PACKET_29_0_2);\n+  jmp(L_2TAG_PACKET_28_0_2);\n+\n+  bind(L_2TAG_PACKET_25_0_2);\n+  shrl(ecx, 20);\n+  andl(ecx, 2047);\n+  cmpl(ecx, 1075);\n+  jcc(Assembler::above, L_2TAG_PACKET_28_0_2);\n+  jcc(Assembler::equal, L_2TAG_PACKET_30_0_2);\n+  cmpl(ecx, 1074);\n+  jcc(Assembler::above, L_2TAG_PACKET_27_0_2);\n+  cmpl(ecx, 1023);\n+  jcc(Assembler::below, L_2TAG_PACKET_28_0_2);\n+  movsd(xmm1, Address(rsp, 16));\n+  movl(eax, 17208);\n+  xorpd(xmm3, xmm3);\n+  pinsrw(xmm3, eax, 3);\n+  movdqu(xmm4, xmm3);\n+  addsd(xmm3, xmm1);\n+  subsd(xmm4, xmm3);\n+  addsd(xmm1, xmm4);\n+  pextrw(eax, xmm1, 3);\n+  andl(eax, 32752);\n+  jcc(Assembler::notEqual, L_2TAG_PACKET_28_0_2);\n+  movdl(eax, xmm3);\n+  andl(eax, 1);\n+  jcc(Assembler::equal, L_2TAG_PACKET_28_0_2);\n+\n+  bind(L_2TAG_PACKET_29_0_2);\n+  movsd(xmm1, Address(rsp, 16));\n+  pextrw(eax, xmm1, 3);\n+  andl(eax, 32768);\n+  jcc(Assembler::equal, L_2TAG_PACKET_18_0_2);\n+  xorpd(xmm0, xmm0);\n+  movl(eax, 32768);\n+  pinsrw(xmm0, eax, 3);\n+  jmp(L_2TAG_PACKET_18_0_2);\n+\n+  bind(L_2TAG_PACKET_28_0_2);\n+  movsd(xmm1, Address(rsp, 16));\n+  pextrw(eax, xmm1, 3);\n+  andl(eax, 32768);\n+  jcc(Assembler::notEqual, L_2TAG_PACKET_26_0_2);\n+\n+  bind(L_2TAG_PACKET_31_0_2);\n+  xorpd(xmm0, xmm0);\n+  movl(eax, 32752);\n+  pinsrw(xmm0, eax, 3);\n+  jmp(L_2TAG_PACKET_18_0_2);\n+\n+  bind(L_2TAG_PACKET_30_0_2);\n+  movsd(xmm1, Address(rsp, 16));\n+  movdl(eax, xmm1);\n+  andl(eax, 1);\n+  jcc(Assembler::equal, L_2TAG_PACKET_28_0_2);\n+  jmp(L_2TAG_PACKET_29_0_2);\n+\n+  bind(L_2TAG_PACKET_32_0_2);\n+  movdl(eax, xmm1);\n+  psrlq(xmm1, 20);\n+  movdl(edx, xmm1);\n+  orl(eax, edx);\n+  jcc(Assembler::equal, L_2TAG_PACKET_33_0_2);\n+  movsd(xmm0, Address(rsp, 16));\n+  addsd(xmm0, xmm0);\n+  jmp(L_2TAG_PACKET_18_0_2);\n+\n+  bind(L_2TAG_PACKET_33_0_2);\n+  movsd(xmm0, Address(rsp, 8));\n+  pextrw(eax, xmm0, 3);\n+  cmpl(eax, 49136);\n+  jcc(Assembler::notEqual, L_2TAG_PACKET_34_0_2);\n+  movdl(ecx, xmm0);\n+  psrlq(xmm0, 20);\n+  movdl(edx, xmm0);\n+  orl(ecx, edx);\n+  jcc(Assembler::notEqual, L_2TAG_PACKET_34_0_2);\n+  xorpd(xmm0, xmm0);\n+  movl(eax, 32760);\n+  pinsrw(xmm0, eax, 3);\n+  jmp(L_2TAG_PACKET_18_0_2);\n+\n+  bind(L_2TAG_PACKET_34_0_2);\n+  movsd(xmm1, Address(rsp, 16));\n+  andl(eax, 32752);\n+  subl(eax, 16368);\n+  pextrw(edx, xmm1, 3);\n+  xorpd(xmm0, xmm0);\n+  xorl(eax, edx);\n+  andl(eax, 32768);\n+  jcc(Assembler::notEqual, L_2TAG_PACKET_18_0_2);\n+  movl(ecx, 32752);\n+  pinsrw(xmm0, ecx, 3);\n+  jmp(L_2TAG_PACKET_18_0_2);\n+\n+  bind(L_2TAG_PACKET_35_0_2);\n+  movdl(eax, xmm1);\n+  cmpl(edx, 17184);\n+  jcc(Assembler::above, L_2TAG_PACKET_36_0_2);\n+  testl(eax, 1);\n+  jcc(Assembler::notEqual, L_2TAG_PACKET_37_0_2);\n+  testl(eax, 2);\n+  jcc(Assembler::equal, L_2TAG_PACKET_38_0_2);\n+  jmp(L_2TAG_PACKET_39_0_2);\n+\n+  bind(L_2TAG_PACKET_36_0_2);\n+  testl(eax, 1);\n+  jcc(Assembler::equal, L_2TAG_PACKET_38_0_2);\n+  jmp(L_2TAG_PACKET_39_0_2);\n+\n+  bind(L_2TAG_PACKET_9_0_2);\n+  movsd(xmm2, Address(rsp, 8));\n+  movdl(eax, xmm2);\n+  psrlq(xmm2, 31);\n+  movdl(ecx, xmm2);\n+  orl(eax, ecx);\n+  jcc(Assembler::equal, L_2TAG_PACKET_11_0_2);\n+  movsd(xmm1, Address(rsp, 16));\n+  pextrw(edx, xmm1, 3);\n+  movdl(eax, xmm1);\n+  movdqu(xmm2, xmm1);\n+  psrlq(xmm2, 32);\n+  movdl(ecx, xmm2);\n+  addl(ecx, ecx);\n+  orl(ecx, eax);\n+  jcc(Assembler::equal, L_2TAG_PACKET_40_0_2);\n+  andl(edx, 32752);\n+  cmpl(edx, 32752);\n+  jcc(Assembler::equal, L_2TAG_PACKET_32_0_2);\n+  cmpl(edx, 17200);\n+  jcc(Assembler::above, L_2TAG_PACKET_38_0_2);\n+  cmpl(edx, 17184);\n+  jcc(Assembler::aboveEqual, L_2TAG_PACKET_35_0_2);\n+  cmpl(edx, 16368);\n+  jcc(Assembler::below, L_2TAG_PACKET_37_0_2);\n+  movl(eax, 17208);\n+  xorpd(xmm2, xmm2);\n+  pinsrw(xmm2, eax, 3);\n+  movdqu(xmm4, xmm2);\n+  addsd(xmm2, xmm1);\n+  subsd(xmm4, xmm2);\n+  addsd(xmm1, xmm4);\n+  pextrw(eax, xmm1, 3);\n+  andl(eax, 32767);\n+  jcc(Assembler::notEqual, L_2TAG_PACKET_37_0_2);\n+  movdl(eax, xmm2);\n+  andl(eax, 1);\n+  jcc(Assembler::equal, L_2TAG_PACKET_38_0_2);\n+\n+  bind(L_2TAG_PACKET_39_0_2);\n+  xorpd(xmm1, xmm1);\n+  movl(edx, 30704);\n+  pinsrw(xmm1, edx, 3);\n+  movsd(xmm2, Address(tmp, 8256));\n+  movsd(xmm4, Address(rsp, 8));\n+  pextrw(eax, xmm4, 3);\n+  movl(edx, 8192);\n+  movdl(xmm4, edx);\n+  andl(eax, 32767);\n+  subl(eax, 16);\n+  jcc(Assembler::less, L_2TAG_PACKET_12_0_2);\n+  movl(edx, eax);\n+  andl(edx, 32752);\n+  subl(edx, 16368);\n+  movl(ecx, edx);\n+  sarl(edx, 31);\n+  addl(ecx, edx);\n+  xorl(ecx, edx);\n+  addl(ecx, 16);\n+  bsrl(ecx, ecx);\n+  movl(rsi, INT_MIN);\n+  jmp(L_2TAG_PACKET_1_0_2);\n+\n+  bind(L_2TAG_PACKET_37_0_2);\n+  xorpd(xmm1, xmm1);\n+  movl(eax, 32752);\n+  pinsrw(xmm1, eax, 3);\n+  xorpd(xmm0, xmm0);\n+  mulsd(xmm0, xmm1);\n+  movl(edx, 28);\n+  jmp(L_2TAG_PACKET_21_0_2);\n+\n+  bind(L_2TAG_PACKET_38_0_2);\n+  xorpd(xmm1, xmm1);\n+  movl(edx, 30704);\n+  pinsrw(xmm1, edx, 3);\n+  movsd(xmm2, Address(tmp, 8256));\n+  movsd(xmm4, Address(rsp, 8));\n+  pextrw(eax, xmm4, 3);\n+  movl(edx, 8192);\n+  movdl(xmm4, edx);\n+  andl(eax, 32767);\n+  subl(eax, 16);\n+  jcc(Assembler::less, L_2TAG_PACKET_10_0_2);\n+  movl(edx, eax);\n+  andl(edx, 32752);\n+  subl(edx, 16368);\n+  movl(ecx, edx);\n+  sarl(edx, 31);\n+  addl(ecx, edx);\n+  xorl(ecx, edx);\n+  addl(ecx, 16);\n+  bsrl(ecx, ecx);\n+  movl(rsi, 0);\n+  jmp(L_2TAG_PACKET_1_0_2);\n+\n+  bind(L_2TAG_PACKET_23_0_2);\n+  xorpd(xmm0, xmm0);\n+  movl(eax, 16368);\n+  pinsrw(xmm0, eax, 3);\n+  jmp(L_2TAG_PACKET_18_0_2);\n+\n+  bind(L_2TAG_PACKET_26_0_2);\n+  xorpd(xmm0, xmm0);\n+  jmp(L_2TAG_PACKET_18_0_2);\n+\n+  bind(L_2TAG_PACKET_13_0_2);\n+  addl(eax, 384);\n+  cmpl(eax, 0);\n+  jcc(Assembler::less, L_2TAG_PACKET_41_0_2);\n+  mulsd(xmm5, xmm1);\n+  addsd(xmm0, xmm7);\n+  shrl(rsi, 31);\n+  addpd(xmm3, xmm0);\n+  pshufd(xmm0, xmm3, 238);\n+  addsd(xmm3, xmm0);\n+  movsd(xmm4, Address(tmp, rsi, Address::times_8, 12528));\n+  mulsd(xmm1, xmm3);\n+  xorpd(xmm0, xmm0);\n+  movl(eax, 16368);\n+  shll(rsi, 15);\n+  orl(eax, rsi);\n+  pinsrw(xmm0, eax, 3);\n+  addsd(xmm5, xmm1);\n+  movl(rsi, Address(rsp, 24));\n+  mulsd(xmm5, xmm4);\n+  addsd(xmm0, xmm5);\n+  jmp(L_2TAG_PACKET_18_0_2);\n+\n+  bind(L_2TAG_PACKET_41_0_2);\n+  movl(rsi, Address(rsp, 24));\n+  xorpd(xmm0, xmm0);\n+  movl(eax, 16368);\n+  pinsrw(xmm0, eax, 3);\n+  jmp(L_2TAG_PACKET_18_0_2);\n+\n+  bind(L_2TAG_PACKET_40_0_2);\n+  xorpd(xmm0, xmm0);\n+  movl(eax, 16368);\n+  pinsrw(xmm0, eax, 3);\n+  jmp(L_2TAG_PACKET_18_0_2);\n+\n+  bind(L_2TAG_PACKET_42_0_2);\n+  xorpd(xmm0, xmm0);\n+  movl(eax, 16368);\n+  pinsrw(xmm0, eax, 3);\n+  movl(edx, 26);\n+  jmp(L_2TAG_PACKET_21_0_2);\n+\n+  bind(L_2TAG_PACKET_11_0_2);\n+  movsd(xmm1, Address(rsp, 16));\n+  movdqu(xmm2, xmm1);\n+  pextrw(eax, xmm1, 3);\n+  andl(eax, 32752);\n+  cmpl(eax, 32752);\n+  jcc(Assembler::notEqual, L_2TAG_PACKET_43_0_2);\n+  movdl(eax, xmm2);\n+  psrlq(xmm2, 20);\n+  movdl(edx, xmm2);\n+  orl(eax, edx);\n+  jcc(Assembler::notEqual, L_2TAG_PACKET_22_0_2);\n+\n+  bind(L_2TAG_PACKET_43_0_2);\n+  movdl(eax, xmm1);\n+  psrlq(xmm1, 32);\n+  movdl(edx, xmm1);\n+  movl(ecx, edx);\n+  addl(edx, edx);\n+  orl(eax, edx);\n+  jcc(Assembler::equal, L_2TAG_PACKET_42_0_2);\n+  shrl(edx, 21);\n+  cmpl(edx, 1075);\n+  jcc(Assembler::above, L_2TAG_PACKET_44_0_2);\n+  jcc(Assembler::equal, L_2TAG_PACKET_45_0_2);\n+  cmpl(edx, 1023);\n+  jcc(Assembler::below, L_2TAG_PACKET_44_0_2);\n+  movsd(xmm1, Address(rsp, 16));\n+  movl(eax, 17208);\n+  xorpd(xmm3, xmm3);\n+  pinsrw(xmm3, eax, 3);\n+  movdqu(xmm4, xmm3);\n+  addsd(xmm3, xmm1);\n+  subsd(xmm4, xmm3);\n+  addsd(xmm1, xmm4);\n+  pextrw(eax, xmm1, 3);\n+  andl(eax, 32752);\n+  jcc(Assembler::notEqual, L_2TAG_PACKET_44_0_2);\n+  movdl(eax, xmm3);\n+  andl(eax, 1);\n+  jcc(Assembler::equal, L_2TAG_PACKET_44_0_2);\n+\n+  bind(L_2TAG_PACKET_46_0_2);\n+  movsd(xmm0, Address(rsp, 8));\n+  testl(ecx, INT_MIN);\n+  jcc(Assembler::notEqual, L_2TAG_PACKET_47_0_2);\n+  jmp(L_2TAG_PACKET_18_0_2);\n+\n+  bind(L_2TAG_PACKET_45_0_2);\n+  movsd(xmm1, Address(rsp, 16));\n+  movdl(eax, xmm1);\n+  testl(eax, 1);\n+  jcc(Assembler::notEqual, L_2TAG_PACKET_46_0_2);\n+\n+  bind(L_2TAG_PACKET_44_0_2);\n+  testl(ecx, INT_MIN);\n+  jcc(Assembler::equal, L_2TAG_PACKET_26_0_2);\n+  xorpd(xmm0, xmm0);\n+\n+  bind(L_2TAG_PACKET_47_0_2);\n+  movl(eax, 16368);\n+  xorpd(xmm1, xmm1);\n+  pinsrw(xmm1, eax, 3);\n+  divsd(xmm1, xmm0);\n+  movdqu(xmm0, xmm1);\n+  movl(edx, 27);\n+  jmp(L_2TAG_PACKET_21_0_2);\n+\n+  bind(L_2TAG_PACKET_14_0_2);\n+  movsd(xmm2, Address(rsp, 8));\n+  movsd(xmm6, Address(rsp, 16));\n+  pextrw(eax, xmm2, 3);\n+  pextrw(edx, xmm6, 3);\n+  movl(ecx, 32752);\n+  andl(ecx, edx);\n+  cmpl(ecx, 32752);\n+  jcc(Assembler::equal, L_2TAG_PACKET_48_0_2);\n+  andl(eax, 32752);\n+  subl(eax, 16368);\n+  xorl(edx, eax);\n+  testl(edx, 32768);\n+  jcc(Assembler::notEqual, L_2TAG_PACKET_49_0_2);\n+\n+  bind(L_2TAG_PACKET_50_0_2);\n+  movl(eax, 32736);\n+  pinsrw(xmm0, eax, 3);\n+  shrl(rsi, 16);\n+  orl(eax, rsi);\n+  pinsrw(xmm1, eax, 3);\n+  movl(rsi, Address(rsp, 24));\n+  mulsd(xmm0, xmm1);\n+\n+  bind(L_2TAG_PACKET_17_0_2);\n+  movl(edx, 24);\n+\n+  bind(L_2TAG_PACKET_21_0_2);\n+  movsd(Address(rsp, 0), xmm0);\n+  fld_d(Address(rsp, 0));\n+  jmp(L_2TAG_PACKET_6_0_2);\n+\n+  bind(L_2TAG_PACKET_49_0_2);\n+  movl(eax, 16);\n+  pinsrw(xmm0, eax, 3);\n+  mulsd(xmm0, xmm0);\n+  testl(rsi, INT_MIN);\n+  jcc(Assembler::equal, L_2TAG_PACKET_51_0_2);\n+  movsd(xmm2, Address(tmp, 12560));\n+  xorpd(xmm0, xmm2);\n+\n+  bind(L_2TAG_PACKET_51_0_2);\n+  movl(rsi, Address(rsp, 24));\n+  movl(edx, 25);\n+  jmp(L_2TAG_PACKET_21_0_2);\n+\n+  bind(L_2TAG_PACKET_16_0_2);\n+  pextrw(ecx, xmm5, 3);\n+  pextrw(edx, xmm4, 3);\n+  movl(eax, -1);\n+  andl(ecx, 32752);\n+  subl(ecx, 16368);\n+  andl(edx, 32752);\n+  addl(edx, ecx);\n+  movl(ecx, -31);\n+  sarl(edx, 4);\n+  subl(ecx, edx);\n+  jcc(Assembler::lessEqual, L_2TAG_PACKET_52_0_2);\n+  cmpl(ecx, 20);\n+  jcc(Assembler::above, L_2TAG_PACKET_53_0_2);\n+  shll(eax);\n+\n+  bind(L_2TAG_PACKET_52_0_2);\n+  movdl(xmm0, eax);\n+  psllq(xmm0, 32);\n+  pand(xmm0, xmm5);\n+  subsd(xmm5, xmm0);\n+  addsd(xmm5, xmm1);\n+  mulsd(xmm0, xmm4);\n+  mulsd(xmm5, xmm4);\n+  addsd(xmm0, xmm5);\n+\n+  bind(L_2TAG_PACKET_53_0_2);\n+  movl(edx, 25);\n+  jmp(L_2TAG_PACKET_21_0_2);\n+\n+  bind(L_2TAG_PACKET_2_0_2);\n+  movzwl(ecx, Address(rsp, 22));\n+  movl(edx, INT_MIN);\n+  movdl(xmm1, edx);\n+  xorpd(xmm7, xmm7);\n+  paddd(xmm0, xmm4);\n+  psllq(xmm5, 32);\n+  movdl(edx, xmm0);\n+  psllq(xmm0, 29);\n+  paddq(xmm1, xmm3);\n+  pand(xmm5, xmm1);\n+  andl(ecx, 32752);\n+  cmpl(ecx, 16560);\n+  jcc(Assembler::below, L_2TAG_PACKET_3_0_2);\n+  pand(xmm0, xmm6);\n+  subsd(xmm3, xmm5);\n+  addl(eax, 16351);\n+  shrl(eax, 4);\n+  subl(eax, 1022);\n+  cvtsi2sdl(xmm7, eax);\n+  mulpd(xmm5, xmm0);\n+  movsd(xmm4, Address(tmp, 0));\n+  mulsd(xmm3, xmm0);\n+  movsd(xmm6, Address(tmp, 0));\n+  subsd(xmm5, xmm2);\n+  movsd(xmm1, Address(tmp, 8));\n+  pshufd(xmm2, xmm3, 68);\n+  unpcklpd(xmm5, xmm3);\n+  addsd(xmm3, xmm5);\n+  movsd(xmm0, Address(tmp, 8));\n+  andl(edx, 16760832);\n+  shrl(edx, 10);\n+  addpd(xmm7, Address(tmp, edx, Address::times_1, -3616));\n+  mulsd(xmm4, xmm5);\n+  mulsd(xmm0, xmm5);\n+  mulsd(xmm6, xmm2);\n+  mulsd(xmm1, xmm2);\n+  movdqu(xmm2, xmm5);\n+  mulsd(xmm4, xmm5);\n+  addsd(xmm5, xmm0);\n+  movdqu(xmm0, xmm7);\n+  addsd(xmm2, xmm3);\n+  addsd(xmm7, xmm5);\n+  mulsd(xmm6, xmm2);\n+  subsd(xmm0, xmm7);\n+  movdqu(xmm2, xmm7);\n+  addsd(xmm7, xmm4);\n+  addsd(xmm0, xmm5);\n+  subsd(xmm2, xmm7);\n+  addsd(xmm4, xmm2);\n+  pshufd(xmm2, xmm5, 238);\n+  movdqu(xmm5, xmm7);\n+  addsd(xmm7, xmm2);\n+  addsd(xmm4, xmm0);\n+  movdqu(xmm0, Address(tmp, 8272));\n+  subsd(xmm5, xmm7);\n+  addsd(xmm6, xmm4);\n+  movdqu(xmm4, xmm7);\n+  addsd(xmm5, xmm2);\n+  addsd(xmm7, xmm1);\n+  movdqu(xmm2, Address(tmp, 8336));\n+  subsd(xmm4, xmm7);\n+  addsd(xmm6, xmm5);\n+  addsd(xmm4, xmm1);\n+  pshufd(xmm5, xmm7, 238);\n+  movdqu(xmm1, xmm7);\n+  addsd(xmm7, xmm5);\n+  subsd(xmm1, xmm7);\n+  addsd(xmm1, xmm5);\n+  movdqu(xmm5, Address(tmp, 8352));\n+  pshufd(xmm3, xmm3, 68);\n+  addsd(xmm6, xmm4);\n+  addsd(xmm6, xmm1);\n+  movdqu(xmm1, Address(tmp, 8304));\n+  mulpd(xmm0, xmm3);\n+  mulpd(xmm2, xmm3);\n+  pshufd(xmm4, xmm3, 68);\n+  mulpd(xmm3, xmm3);\n+  addpd(xmm0, xmm1);\n+  addpd(xmm5, xmm2);\n+  mulsd(xmm4, xmm3);\n+  movsd(xmm2, Address(tmp, 16));\n+  mulpd(xmm3, xmm3);\n+  movsd(xmm1, Address(rsp, 16));\n+  movzwl(ecx, Address(rsp, 22));\n+  mulpd(xmm0, xmm4);\n+  pextrw(eax, xmm7, 3);\n+  mulpd(xmm5, xmm4);\n+  mulpd(xmm0, xmm3);\n+  movsd(xmm4, Address(tmp, 8376));\n+  pand(xmm2, xmm7);\n+  addsd(xmm5, xmm6);\n+  subsd(xmm7, xmm2);\n+  addpd(xmm5, xmm0);\n+  andl(eax, 32752);\n+  subl(eax, 16368);\n+  andl(ecx, 32752);\n+  cmpl(ecx, 32752);\n+  jcc(Assembler::equal, L_2TAG_PACKET_48_0_2);\n+  addl(ecx, eax);\n+  cmpl(ecx, 16576);\n+  jcc(Assembler::aboveEqual, L_2TAG_PACKET_54_0_2);\n+  pshufd(xmm0, xmm5, 238);\n+  pand(xmm4, xmm1);\n+  movdqu(xmm3, xmm1);\n+  addsd(xmm5, xmm0);\n+  subsd(xmm1, xmm4);\n+  xorpd(xmm6, xmm6);\n+  movl(edx, 17080);\n+  pinsrw(xmm6, edx, 3);\n+  addsd(xmm7, xmm5);\n+  mulsd(xmm4, xmm2);\n+  mulsd(xmm1, xmm2);\n+  movdqu(xmm5, xmm6);\n+  mulsd(xmm3, xmm7);\n+  addsd(xmm6, xmm4);\n+  addsd(xmm1, xmm3);\n+  movdqu(xmm7, Address(tmp, 12480));\n+  movdl(edx, xmm6);\n+  subsd(xmm6, xmm5);\n+  movdqu(xmm3, Address(tmp, 12496));\n+  movsd(xmm2, Address(tmp, 12512));\n+  subsd(xmm4, xmm6);\n+  movl(ecx, edx);\n+  andl(edx, 255);\n+  addl(edx, edx);\n+  movdqu(xmm5, Address(tmp, edx, Address::times_8, 8384));\n+  addsd(xmm4, xmm1);\n+  pextrw(edx, xmm6, 3);\n+  shrl(ecx, 8);\n+  movl(eax, ecx);\n+  shrl(ecx, 1);\n+  subl(eax, ecx);\n+  shll(ecx, 20);\n+  movdl(xmm6, ecx);\n+  pshufd(xmm0, xmm4, 68);\n+  pshufd(xmm1, xmm4, 68);\n+  mulpd(xmm0, xmm0);\n+  mulpd(xmm7, xmm1);\n+  pshufd(xmm6, xmm6, 17);\n+  mulsd(xmm2, xmm4);\n+  andl(edx, 32767);\n+  cmpl(edx, 16529);\n+  jcc(Assembler::above, L_2TAG_PACKET_14_0_2);\n+  mulsd(xmm0, xmm0);\n+  paddd(xmm5, xmm6);\n+  addpd(xmm3, xmm7);\n+  mulsd(xmm2, xmm5);\n+  pshufd(xmm6, xmm5, 238);\n+  mulpd(xmm0, xmm3);\n+  addsd(xmm2, xmm6);\n+  pshufd(xmm3, xmm0, 238);\n+  addl(eax, 1023);\n+  shll(eax, 20);\n+  orl(eax, rsi);\n+  movdl(xmm4, eax);\n+  mulsd(xmm0, xmm5);\n+  mulsd(xmm3, xmm5);\n+  addsd(xmm0, xmm2);\n+  psllq(xmm4, 32);\n+  addsd(xmm0, xmm3);\n+  movdqu(xmm1, xmm0);\n+  addsd(xmm0, xmm5);\n+  movl(rsi, Address(rsp, 24));\n+  mulsd(xmm0, xmm4);\n+  pextrw(eax, xmm0, 3);\n+  andl(eax, 32752);\n+  jcc(Assembler::equal, L_2TAG_PACKET_16_0_2);\n+  cmpl(eax, 32752);\n+  jcc(Assembler::equal, L_2TAG_PACKET_17_0_2);\n+\n+  bind(L_2TAG_PACKET_55_0_2);\n+  movsd(Address(rsp, 0), xmm0);\n+  fld_d(Address(rsp, 0));\n+  jmp(L_2TAG_PACKET_6_0_2);\n+\n+  bind(L_2TAG_PACKET_48_0_2);\n+  movl(rsi, Address(rsp, 24));\n+\n+  bind(L_2TAG_PACKET_56_0_2);\n+  movsd(xmm0, Address(rsp, 8));\n+  movsd(xmm1, Address(rsp, 16));\n+  addsd(xmm1, xmm1);\n+  xorpd(xmm2, xmm2);\n+  movl(eax, 49136);\n+  pinsrw(xmm2, eax, 3);\n+  addsd(xmm2, xmm0);\n+  pextrw(eax, xmm2, 3);\n+  cmpl(eax, 0);\n+  jcc(Assembler::notEqual, L_2TAG_PACKET_57_0_2);\n+  xorpd(xmm0, xmm0);\n+  movl(eax, 32760);\n+  pinsrw(xmm0, eax, 3);\n+  jmp(L_2TAG_PACKET_18_0_2);\n+\n+  bind(L_2TAG_PACKET_57_0_2);\n+  movdl(edx, xmm1);\n+  movdqu(xmm3, xmm1);\n+  psrlq(xmm3, 20);\n+  movdl(ecx, xmm3);\n+  orl(ecx, edx);\n+  jcc(Assembler::equal, L_2TAG_PACKET_58_0_2);\n+  addsd(xmm1, xmm1);\n+  movdqu(xmm0, xmm1);\n+  jmp(L_2TAG_PACKET_18_0_2);\n+\n+  bind(L_2TAG_PACKET_58_0_2);\n+  pextrw(eax, xmm0, 3);\n+  andl(eax, 32752);\n+  pextrw(edx, xmm1, 3);\n+  xorpd(xmm0, xmm0);\n+  subl(eax, 16368);\n+  xorl(eax, edx);\n+  testl(eax, 32768);\n+  jcc(Assembler::notEqual, L_2TAG_PACKET_18_0_2);\n+  movl(edx, 32752);\n+  pinsrw(xmm0, edx, 3);\n+  jmp(L_2TAG_PACKET_18_0_2);\n+\n+  bind(L_2TAG_PACKET_54_0_2);\n+  pextrw(eax, xmm1, 3);\n+  pextrw(ecx, xmm2, 3);\n+  xorl(eax, ecx);\n+  testl(eax, 32768);\n+  jcc(Assembler::equal, L_2TAG_PACKET_50_0_2);\n+  jmp(L_2TAG_PACKET_49_0_2);\n+\n+  bind(L_2TAG_PACKET_6_0_2);\n+  movl(tmp, Address(rsp, 64));\n+\n+}\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86_32_pow.cpp","additions":1856,"deletions":0,"binary":false,"changes":1856,"status":"added"},{"patch":"@@ -0,0 +1,1743 @@\n+\/*\n+* Copyright (c) 2016, 2021, Intel Corporation. All rights reserved.\n+* Intel Math Library (LIBM) Source Code\n+*\n+* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+*\n+* This code is free software; you can redistribute it and\/or modify it\n+* under the terms of the GNU General Public License version 2 only, as\n+* published by the Free Software Foundation.\n+*\n+* This code is distributed in the hope that it will be useful, but WITHOUT\n+* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+* version 2 for more details (a copy is included in the LICENSE file that\n+* accompanied this code).\n+*\n+* You should have received a copy of the GNU General Public License version\n+* 2 along with this work; if not, write to the Free Software Foundation,\n+* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+*\n+* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+* or visit www.oracle.com if you need additional information or have any\n+* questions.\n+*\n+*\/\n+\n+#include \"precompiled.hpp\"\n+#include \"asm\/assembler.hpp\"\n+#include \"asm\/assembler.inline.hpp\"\n+#include \"macroAssembler_x86.hpp\"\n+#include \"runtime\/stubRoutines.hpp\"\n+#include \"stubRoutines_x86.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n+\n+\/******************************************************************************\/\n+\/\/                     ALGORITHM DESCRIPTION - SIN()\n+\/\/                     ---------------------\n+\/\/\n+\/\/     1. RANGE REDUCTION\n+\/\/\n+\/\/     We perform an initial range reduction from X to r with\n+\/\/\n+\/\/          X =~= N * pi\/32 + r\n+\/\/\n+\/\/     so that |r| <= pi\/64 + epsilon. We restrict inputs to those\n+\/\/     where |N| <= 932560. Beyond this, the range reduction is\n+\/\/     insufficiently accurate. For extremely small inputs,\n+\/\/     denormalization can occur internally, impacting performance.\n+\/\/     This means that the main path is actually only taken for\n+\/\/     2^-252 <= |X| < 90112.\n+\/\/\n+\/\/     To avoid branches, we perform the range reduction to full\n+\/\/     accuracy each time.\n+\/\/\n+\/\/          X - N * (P_1 + P_2 + P_3)\n+\/\/\n+\/\/     where P_1 and P_2 are 32-bit numbers (so multiplication by N\n+\/\/     is exact) and P_3 is a 53-bit number. Together, these\n+\/\/     approximate pi well enough for all cases in the restricted\n+\/\/     range.\n+\/\/\n+\/\/     The main reduction sequence is:\n+\/\/\n+\/\/             y = 32\/pi * x\n+\/\/             N = integer(y)\n+\/\/     (computed by adding and subtracting off SHIFTER)\n+\/\/\n+\/\/             m_1 = N * P_1\n+\/\/             m_2 = N * P_2\n+\/\/             r_1 = x - m_1\n+\/\/             r = r_1 - m_2\n+\/\/     (this r can be used for most of the calculation)\n+\/\/\n+\/\/             c_1 = r_1 - r\n+\/\/             m_3 = N * P_3\n+\/\/             c_2 = c_1 - m_2\n+\/\/             c = c_2 - m_3\n+\/\/\n+\/\/     2. MAIN ALGORITHM\n+\/\/\n+\/\/     The algorithm uses a table lookup based on B = M * pi \/ 32\n+\/\/     where M = N mod 64. The stored values are:\n+\/\/       sigma             closest power of 2 to cos(B)\n+\/\/       C_hl              53-bit cos(B) - sigma\n+\/\/       S_hi + S_lo       2 * 53-bit sin(B)\n+\/\/\n+\/\/     The computation is organized as follows:\n+\/\/\n+\/\/          sin(B + r + c) = [sin(B) + sigma * r] +\n+\/\/                           r * (cos(B) - sigma) +\n+\/\/                           sin(B) * [cos(r + c) - 1] +\n+\/\/                           cos(B) * [sin(r + c) - r]\n+\/\/\n+\/\/     which is approximately:\n+\/\/\n+\/\/          [S_hi + sigma * r] +\n+\/\/          C_hl * r +\n+\/\/          S_lo + S_hi * [(cos(r) - 1) - r * c] +\n+\/\/          (C_hl + sigma) * [(sin(r) - r) + c]\n+\/\/\n+\/\/     and this is what is actually computed. We separate this sum\n+\/\/     into four parts:\n+\/\/\n+\/\/          hi + med + pols + corr\n+\/\/\n+\/\/     where\n+\/\/\n+\/\/          hi       = S_hi + sigma r\n+\/\/          med      = C_hl * r\n+\/\/          pols     = S_hi * (cos(r) - 1) + (C_hl + sigma) * (sin(r) - r)\n+\/\/          corr     = S_lo + c * ((C_hl + sigma) - S_hi * r)\n+\/\/\n+\/\/     3. POLYNOMIAL\n+\/\/\n+\/\/     The polynomial S_hi * (cos(r) - 1) + (C_hl + sigma) *\n+\/\/     (sin(r) - r) can be rearranged freely, since it is quite\n+\/\/     small, so we exploit parallelism to the fullest.\n+\/\/\n+\/\/          psc4       =   SC_4 * r_1\n+\/\/          msc4       =   psc4 * r\n+\/\/          r2         =   r * r\n+\/\/          msc2       =   SC_2 * r2\n+\/\/          r4         =   r2 * r2\n+\/\/          psc3       =   SC_3 + msc4\n+\/\/          psc1       =   SC_1 + msc2\n+\/\/          msc3       =   r4 * psc3\n+\/\/          sincospols =   psc1 + msc3\n+\/\/          pols       =   sincospols *\n+\/\/                         <S_hi * r^2 | (C_hl + sigma) * r^3>\n+\/\/\n+\/\/     4. CORRECTION TERM\n+\/\/\n+\/\/     This is where the \"c\" component of the range reduction is\n+\/\/     taken into account; recall that just \"r\" is used for most of\n+\/\/     the calculation.\n+\/\/\n+\/\/          -c   = m_3 - c_2\n+\/\/          -d   = S_hi * r - (C_hl + sigma)\n+\/\/          corr = -c * -d + S_lo\n+\/\/\n+\/\/     5. COMPENSATED SUMMATIONS\n+\/\/\n+\/\/     The two successive compensated summations add up the high\n+\/\/     and medium parts, leaving just the low parts to add up at\n+\/\/     the end.\n+\/\/\n+\/\/          rs        =  sigma * r\n+\/\/          res_int   =  S_hi + rs\n+\/\/          k_0       =  S_hi - res_int\n+\/\/          k_2       =  k_0 + rs\n+\/\/          med       =  C_hl * r\n+\/\/          res_hi    =  res_int + med\n+\/\/          k_1       =  res_int - res_hi\n+\/\/          k_3       =  k_1 + med\n+\/\/\n+\/\/     6. FINAL SUMMATION\n+\/\/\n+\/\/     We now add up all the small parts:\n+\/\/\n+\/\/          res_lo = pols(hi) + pols(lo) + corr + k_1 + k_3\n+\/\/\n+\/\/     Now the overall result is just:\n+\/\/\n+\/\/          res_hi + res_lo\n+\/\/\n+\/\/     7. SMALL ARGUMENTS\n+\/\/\n+\/\/     If |x| < SNN (SNN meaning the smallest normal number), we\n+\/\/     simply perform 0.1111111 cdots 1111 * x. For SNN <= |x|, we\n+\/\/     do 2^-55 * (2^55 * x - x).\n+\/\/\n+\/\/ Special cases:\n+\/\/  sin(NaN) = quiet NaN, and raise invalid exception\n+\/\/  sin(INF) = NaN and raise invalid exception\n+\/\/  sin(+\/-0) = +\/-0\n+\/\/\n+\/******************************************************************************\/\n+\n+\/\/ The 32 bit code is at most SSE2 compliant\n+ATTRIBUTE_ALIGNED(8) juint _zero_none[] =\n+{\n+    0x00000000UL, 0x00000000UL, 0x00000000UL, 0xbff00000UL\n+};\n+\n+ATTRIBUTE_ALIGNED(4) juint __4onpi_d[] =\n+{\n+    0x6dc9c883UL, 0x3ff45f30UL\n+};\n+\n+ATTRIBUTE_ALIGNED(4) juint _TWO_32H[] =\n+{\n+    0x00000000UL, 0x41f80000UL\n+};\n+\n+ATTRIBUTE_ALIGNED(4) juint _pi04_3d[] =\n+{\n+    0x54442d00UL, 0x3fe921fbUL, 0x98cc5180UL, 0x3ce84698UL, 0xcbb5bf6cUL,\n+    0xb9dfc8f8UL\n+};\n+\n+ATTRIBUTE_ALIGNED(4) juint _pi04_5d[] =\n+{\n+    0x54400000UL, 0x3fe921fbUL, 0x1a600000UL, 0x3dc0b461UL, 0x2e000000UL,\n+    0x3b93198aUL, 0x25200000UL, 0x396b839aUL, 0x533e63a0UL, 0x37027044UL\n+};\n+\n+ATTRIBUTE_ALIGNED(4) juint _SCALE[] =\n+{\n+    0x00000000UL, 0x32600000UL\n+};\n+\n+ATTRIBUTE_ALIGNED(4) juint _zeros[] =\n+{\n+    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x80000000UL\n+};\n+\n+ATTRIBUTE_ALIGNED(4) juint _pi04_2d[] =\n+{\n+    0x54400000UL, 0x3fe921fbUL, 0x1a626331UL, 0x3dc0b461UL\n+};\n+\n+ATTRIBUTE_ALIGNED(4) juint _TWO_12H[] =\n+{\n+    0x00000000UL, 0x40b80000UL\n+};\n+\n+ATTRIBUTE_ALIGNED(2) jushort __4onpi_31l[] =\n+{\n+    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x836e, 0xa2f9,\n+    0x40d8, 0x0000, 0x0000, 0x0000, 0x2a50, 0x9c88, 0x40b7, 0x0000, 0x0000, 0x0000,\n+    0xabe8, 0xfe13, 0x4099, 0x0000, 0x0000, 0x0000, 0x6ee0, 0xfa9a, 0x4079, 0x0000,\n+    0x0000, 0x0000, 0x9580, 0xdb62, 0x4058, 0x0000, 0x0000, 0x0000, 0x1c82, 0xc9e2,\n+    0x403d, 0x0000, 0x0000, 0x0000, 0xb1c0, 0xff28, 0x4019, 0x0000, 0x0000, 0x0000,\n+    0xef14, 0xaf7a, 0x3ffe, 0x0000, 0x0000, 0x0000, 0x48dc, 0xc36e, 0x3fdf, 0x0000,\n+    0x0000, 0x0000, 0x3740, 0xe909, 0x3fbe, 0x0000, 0x0000, 0x0000, 0x924a, 0xb801,\n+    0x3fa2, 0x0000, 0x0000, 0x0000, 0x3a32, 0xdd41, 0x3f83, 0x0000, 0x0000, 0x0000,\n+    0x8778, 0x873f, 0x3f62, 0x0000, 0x0000, 0x0000, 0x1298, 0xb1cb, 0x3f44, 0x0000,\n+    0x0000, 0x0000, 0xa208, 0x9cfb, 0x3f26, 0x0000, 0x0000, 0x0000, 0xbaec, 0xd7d4,\n+    0x3f06, 0x0000, 0x0000, 0x0000, 0xd338, 0x8909, 0x3ee7, 0x0000, 0x0000, 0x0000,\n+    0x68b8, 0xe04d, 0x3ec7, 0x0000, 0x0000, 0x0000, 0x4e64, 0xdf90, 0x3eaa, 0x0000,\n+    0x0000, 0x0000, 0xc1a8, 0xeb1c, 0x3e89, 0x0000, 0x0000, 0x0000, 0x2720, 0xce7d,\n+    0x3e6a, 0x0000, 0x0000, 0x0000, 0x77b8, 0x8bf1, 0x3e4b, 0x0000, 0x0000, 0x0000,\n+    0xec7e, 0xe4a0, 0x3e2e, 0x0000, 0x0000, 0x0000, 0xffbc, 0xf12f, 0x3e0f, 0x0000,\n+    0x0000, 0x0000, 0xfdc0, 0xb301, 0x3deb, 0x0000, 0x0000, 0x0000, 0xc5ac, 0x9788,\n+    0x3dd1, 0x0000, 0x0000, 0x0000, 0x47da, 0x829b, 0x3db2, 0x0000, 0x0000, 0x0000,\n+    0xd9e4, 0xa6cf, 0x3d93, 0x0000, 0x0000, 0x0000, 0x36e8, 0xf961, 0x3d73, 0x0000,\n+    0x0000, 0x0000, 0xf668, 0xf463, 0x3d54, 0x0000, 0x0000, 0x0000, 0x5168, 0xf2ff,\n+    0x3d35, 0x0000, 0x0000, 0x0000, 0x758e, 0xea4f, 0x3d17, 0x0000, 0x0000, 0x0000,\n+    0xf17a, 0xebe5, 0x3cf8, 0x0000, 0x0000, 0x0000, 0x9cfa, 0x9e83, 0x3cd9, 0x0000,\n+    0x0000, 0x0000, 0xa4ba, 0xe294, 0x3cba, 0x0000, 0x0000, 0x0000, 0xd7ec, 0x9afe,\n+    0x3c9a, 0x0000, 0x0000, 0x0000, 0xae80, 0x8fc6, 0x3c79, 0x0000, 0x0000, 0x0000,\n+    0x3304, 0x8560, 0x3c5c, 0x0000, 0x0000, 0x0000, 0x6d70, 0xdf8f, 0x3c3b, 0x0000,\n+    0x0000, 0x0000, 0x3ef0, 0xafc3, 0x3c1e, 0x0000, 0x0000, 0x0000, 0xd0d8, 0x826b,\n+    0x3bfe, 0x0000, 0x0000, 0x0000, 0x1c80, 0xed4f, 0x3bdd, 0x0000, 0x0000, 0x0000,\n+    0x730c, 0xb0af, 0x3bc1, 0x0000, 0x0000, 0x0000, 0x6660, 0xc219, 0x3ba2, 0x0000,\n+    0x0000, 0x0000, 0x940c, 0xabe2, 0x3b83, 0x0000, 0x0000, 0x0000, 0xdffc, 0x8408,\n+    0x3b64, 0x0000, 0x0000, 0x0000, 0x6b98, 0xc402, 0x3b45, 0x0000, 0x0000, 0x0000,\n+    0x1818, 0x9cc4, 0x3b26, 0x0000, 0x0000, 0x0000, 0x5390, 0xaab6, 0x3b05, 0x0000,\n+    0x0000, 0x0000, 0xb070, 0xd464, 0x3ae9, 0x0000, 0x0000, 0x0000, 0x231a, 0x9ef0,\n+    0x3aca, 0x0000, 0x0000, 0x0000, 0x0670, 0xd1f1, 0x3aaa, 0x0000, 0x0000, 0x0000,\n+    0x7738, 0xd9f3, 0x3a8a, 0x0000, 0x0000, 0x0000, 0xa834, 0x8092, 0x3a6c, 0x0000,\n+    0x0000, 0x0000, 0xb45c, 0xce23, 0x3a4d, 0x0000, 0x0000, 0x0000, 0x36e8, 0xb0e5,\n+    0x3a2d, 0x0000, 0x0000, 0x0000, 0xd156, 0xaf44, 0x3a10, 0x0000, 0x0000, 0x0000,\n+    0x9f52, 0x8c82, 0x39f1, 0x0000, 0x0000, 0x0000, 0x829c, 0xff83, 0x39d1, 0x0000,\n+    0x0000, 0x0000, 0x7d06, 0xefc6, 0x39b3, 0x0000, 0x0000, 0x0000, 0x93e0, 0xb0b7,\n+    0x3992, 0x0000, 0x0000, 0x0000, 0xedde, 0xc193, 0x3975, 0x0000, 0x0000, 0x0000,\n+    0xbbc0, 0xcf49, 0x3952, 0x0000, 0x0000, 0x0000, 0xbdf0, 0xd63c, 0x3937, 0x0000,\n+    0x0000, 0x0000, 0x1f34, 0x9f3a, 0x3918, 0x0000, 0x0000, 0x0000, 0x3f8e, 0xe579,\n+    0x38f9, 0x0000, 0x0000, 0x0000, 0x90c8, 0xc3f8, 0x38d9, 0x0000, 0x0000, 0x0000,\n+    0x48c0, 0xf8f8, 0x38b7, 0x0000, 0x0000, 0x0000, 0xed56, 0xafa6, 0x389c, 0x0000,\n+    0x0000, 0x0000, 0x8218, 0xb969, 0x387d, 0x0000, 0x0000, 0x0000, 0x1852, 0xec57,\n+    0x385e, 0x0000, 0x0000, 0x0000, 0x670c, 0xd674, 0x383e, 0x0000, 0x0000, 0x0000,\n+    0xad40, 0xc2c4, 0x3820, 0x0000, 0x0000, 0x0000, 0x2e80, 0xa696, 0x3801, 0x0000,\n+    0x0000, 0x0000, 0xd800, 0xc467, 0x37dc, 0x0000, 0x0000, 0x0000, 0x3c72, 0xc5ae,\n+    0x37c3, 0x0000, 0x0000, 0x0000, 0xb006, 0xac69, 0x37a4, 0x0000, 0x0000, 0x0000,\n+    0x34a0, 0x8cdf, 0x3782, 0x0000, 0x0000, 0x0000, 0x9ed2, 0xd25e, 0x3766, 0x0000,\n+    0x0000, 0x0000, 0x6fec, 0xaaaa, 0x3747, 0x0000, 0x0000, 0x0000, 0x6040, 0xfb5c,\n+    0x3726, 0x0000, 0x0000, 0x0000, 0x764c, 0xa3fc, 0x3708, 0x0000, 0x0000, 0x0000,\n+    0xb254, 0x954e, 0x36e9, 0x0000, 0x0000, 0x0000, 0x3e1c, 0xf5dc, 0x36ca, 0x0000,\n+    0x0000, 0x0000, 0x7b06, 0xc635, 0x36ac, 0x0000, 0x0000, 0x0000, 0xa8ba, 0xd738,\n+    0x368d, 0x0000, 0x0000, 0x0000, 0x06cc, 0xb24e, 0x366d, 0x0000, 0x0000, 0x0000,\n+    0x7108, 0xac76, 0x364f, 0x0000, 0x0000, 0x0000, 0x2324, 0xa7cb, 0x3630, 0x0000,\n+    0x0000, 0x0000, 0xac40, 0xef15, 0x360f, 0x0000, 0x0000, 0x0000, 0xae46, 0xd516,\n+    0x35f2, 0x0000, 0x0000, 0x0000, 0x615e, 0xe003, 0x35d3, 0x0000, 0x0000, 0x0000,\n+    0x0cf0, 0xefe7, 0x35b1, 0x0000, 0x0000, 0x0000, 0xfb50, 0xf98c, 0x3595, 0x0000,\n+    0x0000, 0x0000, 0x0abc, 0xf333, 0x3575, 0x0000, 0x0000, 0x0000, 0xdd60, 0xca3f,\n+    0x3555, 0x0000, 0x0000, 0x0000, 0x7eb6, 0xd87f, 0x3538, 0x0000, 0x0000, 0x0000,\n+    0x44f4, 0xb291, 0x3519, 0x0000, 0x0000, 0x0000, 0xff80, 0xc982, 0x34f6, 0x0000,\n+    0x0000, 0x0000, 0x9de0, 0xd9b8, 0x34db, 0x0000, 0x0000, 0x0000, 0xcd42, 0x9366,\n+    0x34bc, 0x0000, 0x0000, 0x0000, 0xbef0, 0xfaee, 0x349d, 0x0000, 0x0000, 0x0000,\n+    0xdac4, 0xb6f1, 0x347d, 0x0000, 0x0000, 0x0000, 0xf140, 0x94de, 0x345d, 0x0000,\n+    0x0000, 0x0000, 0xa218, 0x8b4b, 0x343e, 0x0000, 0x0000, 0x0000, 0x6380, 0xa135,\n+    0x341e, 0x0000, 0x0000, 0x0000, 0xb184, 0x8cb2, 0x3402, 0x0000, 0x0000, 0x0000,\n+    0x196e, 0xdc61, 0x33e3, 0x0000, 0x0000, 0x0000, 0x0c00, 0xde05, 0x33c4, 0x0000,\n+    0x0000, 0x0000, 0xef9a, 0xbd38, 0x33a5, 0x0000, 0x0000, 0x0000, 0xc1a0, 0xdf00,\n+    0x3385, 0x0000, 0x0000, 0x0000, 0x1090, 0x9973, 0x3365, 0x0000, 0x0000, 0x0000,\n+    0x4882, 0x8301, 0x3348, 0x0000, 0x0000, 0x0000, 0x7abe, 0xadc7, 0x3329, 0x0000,\n+    0x0000, 0x0000, 0x7cba, 0xec2b, 0x330a, 0x0000, 0x0000, 0x0000, 0xa520, 0x8f21,\n+    0x32e9, 0x0000, 0x0000, 0x0000, 0x710c, 0x8d36, 0x32cc, 0x0000, 0x0000, 0x0000,\n+    0x5212, 0xc6ed, 0x32ad, 0x0000, 0x0000, 0x0000, 0x7308, 0xfd76, 0x328d, 0x0000,\n+    0x0000, 0x0000, 0x5014, 0xd548, 0x326f, 0x0000, 0x0000, 0x0000, 0xd3f2, 0xb499,\n+    0x3250, 0x0000, 0x0000, 0x0000, 0x7f74, 0xa606, 0x3230, 0x0000, 0x0000, 0x0000,\n+    0xf0a8, 0xd720, 0x3212, 0x0000, 0x0000, 0x0000, 0x185c, 0xe20f, 0x31f2, 0x0000,\n+    0x0000, 0x0000, 0xa5a8, 0x8738, 0x31d4, 0x0000, 0x0000, 0x0000, 0xdd74, 0xcafb,\n+    0x31b4, 0x0000, 0x0000, 0x0000, 0x98b6, 0xbd8e, 0x3196, 0x0000, 0x0000, 0x0000,\n+    0xe9de, 0x977f, 0x3177, 0x0000, 0x0000, 0x0000, 0x67c0, 0x818d, 0x3158, 0x0000,\n+    0x0000, 0x0000, 0xe52a, 0x9322, 0x3139, 0x0000, 0x0000, 0x0000, 0xe568, 0x9b6c,\n+    0x3119, 0x0000, 0x0000, 0x0000, 0x2358, 0xaa0a, 0x30fa, 0x0000, 0x0000, 0x0000,\n+    0xe480, 0xe13b, 0x30d9, 0x0000, 0x0000, 0x0000, 0x3024, 0x90a1, 0x30bd, 0x0000,\n+    0x0000, 0x0000, 0x9620, 0xda30, 0x309d, 0x0000, 0x0000, 0x0000, 0x898a, 0xb388,\n+    0x307f, 0x0000, 0x0000, 0x0000, 0xb24c, 0xc891, 0x3060, 0x0000, 0x0000, 0x0000,\n+    0x8056, 0xf98b, 0x3041, 0x0000, 0x0000, 0x0000, 0x72a4, 0xa1ea, 0x3021, 0x0000,\n+    0x0000, 0x0000, 0x6af8, 0x9488, 0x3001, 0x0000, 0x0000, 0x0000, 0xe00c, 0xdfcb,\n+    0x2fe4, 0x0000, 0x0000, 0x0000, 0xeeec, 0xc941, 0x2fc4, 0x0000, 0x0000, 0x0000,\n+    0x53e0, 0xe70f, 0x2fa4, 0x0000, 0x0000, 0x0000, 0x8f60, 0x9c07, 0x2f85, 0x0000,\n+    0x0000, 0x0000, 0xb328, 0xc3e7, 0x2f68, 0x0000, 0x0000, 0x0000, 0x9404, 0xf8c7,\n+    0x2f48, 0x0000, 0x0000, 0x0000, 0x38e0, 0xc99f, 0x2f29, 0x0000, 0x0000, 0x0000,\n+    0x9778, 0xd984, 0x2f09, 0x0000, 0x0000, 0x0000, 0xe700, 0xd142, 0x2eea, 0x0000,\n+    0x0000, 0x0000, 0xd904, 0x9443, 0x2ecd, 0x0000, 0x0000, 0x0000, 0xd4ba, 0xae7e,\n+    0x2eae, 0x0000, 0x0000, 0x0000, 0x8e5e, 0x8524, 0x2e8f, 0x0000, 0x0000, 0x0000,\n+    0xb550, 0xc9ed, 0x2e6e, 0x0000, 0x0000, 0x0000, 0x53b8, 0x8648, 0x2e51, 0x0000,\n+    0x0000, 0x0000, 0xdae4, 0x87f9, 0x2e32, 0x0000, 0x0000, 0x0000, 0x2942, 0xd966,\n+    0x2e13, 0x0000, 0x0000, 0x0000, 0x4f28, 0xcf3c, 0x2df3, 0x0000, 0x0000, 0x0000,\n+    0xfa40, 0xc4ef, 0x2dd1, 0x0000, 0x0000, 0x0000, 0x4424, 0xbca7, 0x2db5, 0x0000,\n+    0x0000, 0x0000, 0x2e62, 0xcdc5, 0x2d97, 0x0000, 0x0000, 0x0000, 0xed88, 0x996b,\n+    0x2d78, 0x0000, 0x0000, 0x0000, 0x7c30, 0xd97d, 0x2d56, 0x0000, 0x0000, 0x0000,\n+    0xed26, 0xbf6e, 0x2d3a, 0x0000, 0x0000, 0x0000, 0x2918, 0x921b, 0x2d1a, 0x0000,\n+    0x0000, 0x0000, 0x4e24, 0xe84e, 0x2cfb, 0x0000, 0x0000, 0x0000, 0x6dc0, 0x92ec,\n+    0x2cdd, 0x0000, 0x0000, 0x0000, 0x4f2c, 0xacf8, 0x2cbd, 0x0000, 0x0000, 0x0000,\n+    0xc634, 0xf094, 0x2c9e, 0x0000, 0x0000, 0x0000, 0xdc70, 0xe5d3, 0x2c7e, 0x0000,\n+    0x0000, 0x0000, 0x2180, 0xa600, 0x2c5b, 0x0000, 0x0000, 0x0000, 0x8480, 0xd680,\n+    0x2c3c, 0x0000, 0x0000, 0x0000, 0x8b24, 0xd63b, 0x2c22, 0x0000, 0x0000, 0x0000,\n+    0x02e0, 0xaa47, 0x2c00, 0x0000, 0x0000, 0x0000, 0x9ad0, 0xee84, 0x2be3, 0x0000,\n+    0x0000, 0x0000, 0xf7dc, 0xf699, 0x2bc6, 0x0000, 0x0000, 0x0000, 0xddde, 0xe490,\n+    0x2ba7, 0x0000, 0x0000, 0x0000, 0x34a0, 0xb4fd, 0x2b85, 0x0000, 0x0000, 0x0000,\n+    0x91b4, 0x8ef6, 0x2b68, 0x0000, 0x0000, 0x0000, 0xa3e0, 0xa2a7, 0x2b47, 0x0000,\n+    0x0000, 0x0000, 0xcce4, 0x82b3, 0x2b2a, 0x0000, 0x0000, 0x0000, 0xe4be, 0x8207,\n+    0x2b0c, 0x0000, 0x0000, 0x0000, 0x1d92, 0xab43, 0x2aed, 0x0000, 0x0000, 0x0000,\n+    0xe818, 0xf9f6, 0x2acd, 0x0000, 0x0000, 0x0000, 0xff12, 0xba80, 0x2aaf, 0x0000,\n+    0x0000, 0x0000, 0x5254, 0x8529, 0x2a90, 0x0000, 0x0000, 0x0000, 0x1b88, 0xe032,\n+    0x2a71, 0x0000, 0x0000, 0x0000, 0x3248, 0xd86d, 0x2a50, 0x0000, 0x0000, 0x0000,\n+    0x3140, 0xc9d5, 0x2a2e, 0x0000, 0x0000, 0x0000, 0x14e6, 0xbd47, 0x2a14, 0x0000,\n+    0x0000, 0x0000, 0x5c10, 0xe544, 0x29f4, 0x0000, 0x0000, 0x0000, 0x9f50, 0x90b6,\n+    0x29d4, 0x0000, 0x0000, 0x0000, 0x9850, 0xab55, 0x29b6, 0x0000, 0x0000, 0x0000,\n+    0x2750, 0x9d07, 0x2998, 0x0000, 0x0000, 0x0000, 0x6700, 0x8bbb, 0x2973, 0x0000,\n+    0x0000, 0x0000, 0x5dba, 0xed31, 0x295a, 0x0000, 0x0000, 0x0000, 0x61dc, 0x85fe,\n+    0x293a, 0x0000, 0x0000, 0x0000, 0x9ba2, 0xd6b4, 0x291c, 0x0000, 0x0000, 0x0000,\n+    0x2d30, 0xe3a5, 0x28fb, 0x0000, 0x0000, 0x0000, 0x6630, 0xb566, 0x28dd, 0x0000,\n+    0x0000, 0x0000, 0x5ad4, 0xa829, 0x28bf, 0x0000, 0x0000, 0x0000, 0x89d8, 0xe290,\n+    0x28a0, 0x0000, 0x0000, 0x0000, 0x3916, 0xc428, 0x2881, 0x0000, 0x0000, 0x0000,\n+    0x0490, 0xbea4, 0x2860, 0x0000, 0x0000, 0x0000, 0xee06, 0x80ee, 0x2843, 0x0000,\n+    0x0000, 0x0000, 0xfc00, 0xf327, 0x2820, 0x0000, 0x0000, 0x0000, 0xea40, 0xa871,\n+    0x2800, 0x0000, 0x0000, 0x0000, 0x63d8, 0x9c26, 0x27e4, 0x0000, 0x0000, 0x0000,\n+    0x07ba, 0xc0c9, 0x27c7, 0x0000, 0x0000, 0x0000, 0x3fa2, 0x9797, 0x27a8, 0x0000,\n+    0x0000, 0x0000, 0x21c6, 0xfeca, 0x2789, 0x0000, 0x0000, 0x0000, 0xde40, 0x860d,\n+    0x2768, 0x0000, 0x0000, 0x0000, 0x9cc8, 0x98ce, 0x2749, 0x0000, 0x0000, 0x0000,\n+    0x3778, 0xa31c, 0x272a, 0x0000, 0x0000, 0x0000, 0xe778, 0xf6e2, 0x270b, 0x0000,\n+    0x0000, 0x0000, 0x59b8, 0xf841, 0x26ed, 0x0000, 0x0000, 0x0000, 0x02e0, 0xad04,\n+    0x26cd, 0x0000, 0x0000, 0x0000, 0x5a92, 0x9380, 0x26b0, 0x0000, 0x0000, 0x0000,\n+    0xc740, 0x8886, 0x268d, 0x0000, 0x0000, 0x0000, 0x0680, 0xfaf8, 0x266c, 0x0000,\n+    0x0000, 0x0000, 0xfb60, 0x897f, 0x2653, 0x0000, 0x0000, 0x0000, 0x8760, 0xf903,\n+    0x2634, 0x0000, 0x0000, 0x0000, 0xad2a, 0xc2c8, 0x2615, 0x0000, 0x0000, 0x0000,\n+    0x2d86, 0x8aef, 0x25f6, 0x0000, 0x0000, 0x0000, 0x1ef4, 0xe627, 0x25d6, 0x0000,\n+    0x0000, 0x0000, 0x09e4, 0x8020, 0x25b7, 0x0000, 0x0000, 0x0000, 0x7548, 0xd227,\n+    0x2598, 0x0000, 0x0000, 0x0000, 0x75dc, 0xfb5b, 0x2579, 0x0000, 0x0000, 0x0000,\n+    0xea84, 0xc8b6, 0x255a, 0x0000, 0x0000, 0x0000, 0xe4d0, 0x8145, 0x253b, 0x0000,\n+    0x0000, 0x0000, 0x3640, 0x9768, 0x251c, 0x0000, 0x0000, 0x0000, 0x246a, 0xccec,\n+    0x24fe, 0x0000, 0x0000, 0x0000, 0x51d0, 0xa075, 0x24dd, 0x0000, 0x0000, 0x0000,\n+    0x4638, 0xa385, 0x24bf, 0x0000, 0x0000, 0x0000, 0xd788, 0xd776, 0x24a1, 0x0000,\n+    0x0000, 0x0000, 0x1370, 0x8997, 0x2482, 0x0000, 0x0000, 0x0000, 0x1e88, 0x9b67,\n+    0x2462, 0x0000, 0x0000, 0x0000, 0x6c08, 0xd975, 0x2444, 0x0000, 0x0000, 0x0000,\n+    0xfdb0, 0xcfc0, 0x2422, 0x0000, 0x0000, 0x0000, 0x3100, 0xc026, 0x2406, 0x0000,\n+    0x0000, 0x0000, 0xc5b4, 0xae64, 0x23e6, 0x0000, 0x0000, 0x0000, 0x2280, 0xf687,\n+    0x23c3, 0x0000, 0x0000, 0x0000, 0x2de0, 0x9006, 0x23a9, 0x0000, 0x0000, 0x0000,\n+    0x24bc, 0xf631, 0x238a, 0x0000, 0x0000, 0x0000, 0xb8d4, 0xa975, 0x236b, 0x0000,\n+    0x0000, 0x0000, 0xd9a4, 0xb949, 0x234b, 0x0000, 0x0000, 0x0000, 0xb54e, 0xbd39,\n+    0x232d, 0x0000, 0x0000, 0x0000, 0x4aac, 0x9a52, 0x230e, 0x0000, 0x0000, 0x0000,\n+    0xbbbc, 0xd085, 0x22ef, 0x0000, 0x0000, 0x0000, 0xdf18, 0xc633, 0x22cf, 0x0000,\n+    0x0000, 0x0000, 0x16d0, 0xeca5, 0x22af, 0x0000, 0x0000, 0x0000, 0xf2a0, 0xdf6f,\n+    0x228e, 0x0000, 0x0000, 0x0000, 0x8c44, 0xe86b, 0x2272, 0x0000, 0x0000, 0x0000,\n+    0x35c0, 0xbbf4, 0x2253, 0x0000, 0x0000, 0x0000, 0x0c40, 0xdafb, 0x2230, 0x0000,\n+    0x0000, 0x0000, 0x92dc, 0x9935, 0x2216, 0x0000, 0x0000, 0x0000, 0x0ca0, 0xbda6,\n+    0x21f3, 0x0000, 0x0000, 0x0000, 0x5958, 0xa6fd, 0x21d6, 0x0000, 0x0000, 0x0000,\n+    0xa3dc, 0x9d7f, 0x21b9, 0x0000, 0x0000, 0x0000, 0x79dc, 0xfcb5, 0x2199, 0x0000,\n+    0x0000, 0x0000, 0xf264, 0xcebb, 0x217b, 0x0000, 0x0000, 0x0000, 0x0abe, 0x8308,\n+    0x215c, 0x0000, 0x0000, 0x0000, 0x30ae, 0xb463, 0x213d, 0x0000, 0x0000, 0x0000,\n+    0x6228, 0xb040, 0x211c, 0x0000, 0x0000, 0x0000, 0xc9b2, 0xf43b, 0x20ff, 0x0000,\n+    0x0000, 0x0000, 0x3d8e, 0xa4b3, 0x20e0, 0x0000, 0x0000, 0x0000, 0x84e6, 0x8dab,\n+    0x20c1, 0x0000, 0x0000, 0x0000, 0xa124, 0x9b74, 0x20a1, 0x0000, 0x0000, 0x0000,\n+    0xc276, 0xd497, 0x2083, 0x0000, 0x0000, 0x0000, 0x6354, 0xa466, 0x2063, 0x0000,\n+    0x0000, 0x0000, 0x8654, 0xaf0a, 0x2044, 0x0000, 0x0000, 0x0000, 0x1d20, 0xfa5c,\n+    0x2024, 0x0000, 0x0000, 0x0000, 0xbcd0, 0xf3f0, 0x2004, 0x0000, 0x0000, 0x0000,\n+    0xedf0, 0xf0b6, 0x1fe7, 0x0000, 0x0000, 0x0000, 0x45bc, 0x9182, 0x1fc9, 0x0000,\n+    0x0000, 0x0000, 0xe254, 0xdc85, 0x1faa, 0x0000, 0x0000, 0x0000, 0xb898, 0xe9b1,\n+    0x1f8a, 0x0000, 0x0000, 0x0000, 0x0ebe, 0xe6f0, 0x1f6c, 0x0000, 0x0000, 0x0000,\n+    0xa9b8, 0xf584, 0x1f4c, 0x0000, 0x0000, 0x0000, 0x12e8, 0xdf6b, 0x1f2e, 0x0000,\n+    0x0000, 0x0000, 0x9f9e, 0xcd55, 0x1f0f, 0x0000, 0x0000, 0x0000, 0x05a0, 0xec3a,\n+    0x1eef, 0x0000, 0x0000, 0x0000, 0xd8e0, 0x96f8, 0x1ed1, 0x0000, 0x0000, 0x0000,\n+    0x3bd4, 0xccc6, 0x1eb1, 0x0000, 0x0000, 0x0000, 0x4910, 0xb87b, 0x1e93, 0x0000,\n+    0x0000, 0x0000, 0xbefc, 0xd40b, 0x1e73, 0x0000, 0x0000, 0x0000, 0x317e, 0xa406,\n+    0x1e55, 0x0000, 0x0000, 0x0000, 0x6bb2, 0xc2b2, 0x1e36, 0x0000, 0x0000, 0x0000,\n+    0xb87e, 0xbb78, 0x1e17, 0x0000, 0x0000, 0x0000, 0xa03c, 0xdbbd, 0x1df7, 0x0000,\n+    0x0000, 0x0000, 0x5b6c, 0xe3c8, 0x1dd9, 0x0000, 0x0000, 0x0000, 0x8968, 0xca8e,\n+    0x1dba, 0x0000, 0x0000, 0x0000, 0xc024, 0xe6ab, 0x1d9a, 0x0000, 0x0000, 0x0000,\n+    0x4110, 0xd4eb, 0x1d7a, 0x0000, 0x0000, 0x0000, 0xa168, 0xbdb5, 0x1d5d, 0x0000,\n+    0x0000, 0x0000, 0x012e, 0xa5fa, 0x1d3e, 0x0000, 0x0000, 0x0000, 0x6838, 0x9c1f,\n+    0x1d1e, 0x0000, 0x0000, 0x0000, 0xa158, 0xaa76, 0x1d00, 0x0000, 0x0000, 0x0000,\n+    0x090a, 0xbd95, 0x1ce1, 0x0000, 0x0000, 0x0000, 0xf73e, 0x8b6d, 0x1cc2, 0x0000,\n+    0x0000, 0x0000, 0x5fda, 0xbcbf, 0x1ca3, 0x0000, 0x0000, 0x0000, 0xdbe8, 0xb89f,\n+    0x1c84, 0x0000, 0x0000, 0x0000, 0x6e4c, 0x96c7, 0x1c64, 0x0000, 0x0000, 0x0000,\n+    0x19c2, 0xf2a4, 0x1c46, 0x0000, 0x0000, 0x0000, 0xb800, 0xf855, 0x1c1e, 0x0000,\n+    0x0000, 0x0000, 0x87fc, 0x85ff, 0x1c08, 0x0000, 0x0000, 0x0000, 0x1418, 0x839f,\n+    0x1be9, 0x0000, 0x0000, 0x0000, 0x6186, 0xd9d8, 0x1bca, 0x0000, 0x0000, 0x0000,\n+    0xf500, 0xabaa, 0x1ba6, 0x0000, 0x0000, 0x0000, 0x7b36, 0xdafe, 0x1b8c, 0x0000,\n+    0x0000, 0x0000, 0xf394, 0xe6d8, 0x1b6c, 0x0000, 0x0000, 0x0000, 0x6efc, 0x9e55,\n+    0x1b4e, 0x0000, 0x0000, 0x0000, 0x5e10, 0xc523, 0x1b2e, 0x0000, 0x0000, 0x0000,\n+    0x8210, 0xb6f9, 0x1b0d, 0x0000, 0x0000, 0x0000, 0x9ab0, 0x96e3, 0x1af1, 0x0000,\n+    0x0000, 0x0000, 0x3864, 0x92e7, 0x1ad1, 0x0000, 0x0000, 0x0000, 0x9878, 0xdc65,\n+    0x1ab1, 0x0000, 0x0000, 0x0000, 0xfa20, 0xd6cb, 0x1a94, 0x0000, 0x0000, 0x0000,\n+    0x6c00, 0xa4e4, 0x1a70, 0x0000, 0x0000, 0x0000, 0xab40, 0xb41b, 0x1a53, 0x0000,\n+    0x0000, 0x0000, 0x43a4, 0x8ede, 0x1a37, 0x0000, 0x0000, 0x0000, 0x22e0, 0x9314,\n+    0x1a15, 0x0000, 0x0000, 0x0000, 0x6170, 0xb949, 0x19f8, 0x0000, 0x0000, 0x0000,\n+    0x6b00, 0xe056, 0x19d8, 0x0000, 0x0000, 0x0000, 0x9ba8, 0xa94c, 0x19b9, 0x0000,\n+    0x0000, 0x0000, 0xfaa0, 0xaa16, 0x199b, 0x0000, 0x0000, 0x0000, 0x899a, 0xf627,\n+    0x197d, 0x0000, 0x0000, 0x0000, 0x9f20, 0xfb70, 0x195d, 0x0000, 0x0000, 0x0000,\n+    0xa4b8, 0xc176, 0x193e, 0x0000, 0x0000, 0x0000, 0xb21c, 0x85c3, 0x1920, 0x0000,\n+    0x0000, 0x0000, 0x50d2, 0x9b19, 0x1901, 0x0000, 0x0000, 0x0000, 0xd4b0, 0xb708,\n+    0x18e0, 0x0000, 0x0000, 0x0000, 0xfb88, 0xf510, 0x18c1, 0x0000, 0x0000, 0x0000,\n+    0x31ec, 0xdc8d, 0x18a3, 0x0000, 0x0000, 0x0000, 0x3c00, 0xbff9, 0x1885, 0x0000,\n+    0x0000, 0x0000, 0x5020, 0xc30b, 0x1862, 0x0000, 0x0000, 0x0000, 0xd4f0, 0xda0c,\n+    0x1844, 0x0000, 0x0000, 0x0000, 0x20d2, 0x99a5, 0x1828, 0x0000, 0x0000, 0x0000,\n+    0x852e, 0xd159, 0x1809, 0x0000, 0x0000, 0x0000, 0x7cd8, 0x97a1, 0x17e9, 0x0000,\n+    0x0000, 0x0000, 0x423a, 0x997b, 0x17cb, 0x0000, 0x0000, 0x0000, 0xc1c0, 0xbe7d,\n+    0x17a8, 0x0000, 0x0000, 0x0000, 0xe8bc, 0xdcdd, 0x178d, 0x0000, 0x0000, 0x0000,\n+    0x8b28, 0xae06, 0x176e, 0x0000, 0x0000, 0x0000, 0x102e, 0xb8d4, 0x174f, 0x0000,\n+    0x0000, 0x0000, 0xaa00, 0xaa5c, 0x172f, 0x0000, 0x0000, 0x0000, 0x51f0, 0x9fc0,\n+    0x170e, 0x0000, 0x0000, 0x0000, 0xf858, 0xe181, 0x16f2, 0x0000, 0x0000, 0x0000,\n+    0x91a8, 0x8162, 0x16d3, 0x0000, 0x0000, 0x0000, 0x5f40, 0xcb6f, 0x16b1, 0x0000,\n+    0x0000, 0x0000, 0xbb50, 0xe55f, 0x1693, 0x0000, 0x0000, 0x0000, 0xacd2, 0xd895,\n+    0x1676, 0x0000, 0x0000, 0x0000, 0xef30, 0x97bf, 0x1654, 0x0000, 0x0000, 0x0000,\n+    0xf700, 0xb3d7, 0x1633, 0x0000, 0x0000, 0x0000, 0x3454, 0xa7b5, 0x1619, 0x0000,\n+    0x0000, 0x0000, 0x6b00, 0xa929, 0x15f6, 0x0000, 0x0000, 0x0000, 0x9f04, 0x89f7,\n+    0x15db, 0x0000, 0x0000, 0x0000, 0xad78, 0xd985, 0x15bc, 0x0000, 0x0000, 0x0000,\n+    0xa46a, 0xae3f, 0x159d, 0x0000, 0x0000, 0x0000, 0x63a0, 0xd0da, 0x157c, 0x0000,\n+    0x0000, 0x0000, 0x5e90, 0x817d, 0x155e, 0x0000, 0x0000, 0x0000, 0x1494, 0xb13f,\n+    0x1540, 0x0000, 0x0000, 0x0000, 0x0090, 0x9c40, 0x1521, 0x0000, 0x0000, 0x0000,\n+    0xdd70, 0xcc86, 0x1500, 0x0000, 0x0000, 0x0000, 0x64f8, 0xdb6f, 0x14e1, 0x0000,\n+    0x0000, 0x0000, 0xe22c, 0xac17, 0x14c3, 0x0000, 0x0000, 0x0000, 0x60e0, 0xa9ad,\n+    0x14a3, 0x0000, 0x0000, 0x0000, 0x4640, 0xd658, 0x1481, 0x0000, 0x0000, 0x0000,\n+    0x6490, 0xa181, 0x1467, 0x0000, 0x0000, 0x0000, 0x1df4, 0xaaa2, 0x1447, 0x0000,\n+    0x0000, 0x0000, 0xb94a, 0x8f61, 0x1429, 0x0000, 0x0000, 0x0000, 0x5198, 0x9d83,\n+    0x1409, 0x0000, 0x0000, 0x0000, 0x0f7a, 0xa818, 0x13eb, 0x0000, 0x0000, 0x0000,\n+    0xc45e, 0xc06c, 0x13cc, 0x0000, 0x0000, 0x0000, 0x4ec0, 0xfa29, 0x13a8, 0x0000,\n+    0x0000, 0x0000, 0x6418, 0x8cad, 0x138c, 0x0000, 0x0000, 0x0000, 0xbcc8, 0xe7d1,\n+    0x136f, 0x0000, 0x0000, 0x0000, 0xc934, 0xf9b0, 0x134f, 0x0000, 0x0000, 0x0000,\n+    0x6ce0, 0x98df, 0x1331, 0x0000, 0x0000, 0x0000, 0x3516, 0xe5e9, 0x1312, 0x0000,\n+    0x0000, 0x0000, 0xc6c0, 0xef8b, 0x12ef, 0x0000, 0x0000, 0x0000, 0xaf02, 0x913d,\n+    0x12d4, 0x0000, 0x0000, 0x0000, 0xd230, 0xe1d5, 0x12b5, 0x0000, 0x0000, 0x0000,\n+    0xfba8, 0xc232, 0x1295, 0x0000, 0x0000, 0x0000, 0x7ba4, 0xabeb, 0x1277, 0x0000,\n+    0x0000, 0x0000, 0x6e5c, 0xc692, 0x1258, 0x0000, 0x0000, 0x0000, 0x76a2, 0x9756,\n+    0x1239, 0x0000, 0x0000, 0x0000, 0xe180, 0xe423, 0x1214, 0x0000, 0x0000, 0x0000,\n+    0x8c3c, 0x90f8, 0x11fb, 0x0000, 0x0000, 0x0000, 0x9f3c, 0x9fd2, 0x11dc, 0x0000,\n+    0x0000, 0x0000, 0x53e0, 0xb73e, 0x11bd, 0x0000, 0x0000, 0x0000, 0x45be, 0x88d6,\n+    0x119e, 0x0000, 0x0000, 0x0000, 0x111a, 0x8bc0, 0x117f, 0x0000, 0x0000, 0x0000,\n+    0xe26a, 0xd7ff, 0x1160, 0x0000, 0x0000, 0x0000, 0xfb60, 0xdd8d, 0x113f, 0x0000,\n+    0x0000, 0x0000, 0x9370, 0xc108, 0x1120, 0x0000, 0x0000, 0x0000, 0x9654, 0x8baf,\n+    0x1103, 0x0000, 0x0000, 0x0000, 0xd6ec, 0xd6b9, 0x10e4, 0x0000, 0x0000, 0x0000,\n+    0x23e4, 0xd7b7, 0x10c4, 0x0000, 0x0000, 0x0000, 0x1aa6, 0xa847, 0x10a6, 0x0000,\n+    0x0000, 0x0000, 0xbee6, 0x9fef, 0x1087, 0x0000, 0x0000, 0x0000, 0x26d0, 0xa6eb,\n+    0x1066, 0x0000, 0x0000, 0x0000, 0x5b86, 0xa880, 0x1049, 0x0000, 0x0000, 0x0000,\n+    0x125c, 0xd971, 0x1029, 0x0000, 0x0000, 0x0000, 0x1f78, 0x9d18, 0x100a, 0x0000,\n+    0x0000, 0x0000, 0x0e84, 0xb15b, 0x0feb, 0x0000, 0x0000, 0x0000, 0xd0c0, 0xc150,\n+    0x0fcc, 0x0000, 0x0000, 0x0000, 0xa330, 0xc40c, 0x0fad, 0x0000, 0x0000, 0x0000,\n+    0x5202, 0xfc2c, 0x0f8f, 0x0000, 0x0000, 0x0000, 0x3f7c, 0xecf5, 0x0f6f, 0x0000,\n+    0x0000, 0x0000, 0xef44, 0xfdfd, 0x0f50, 0x0000, 0x0000, 0x0000, 0x3f6c, 0xab1b,\n+    0x0f31, 0x0000, 0x0000, 0x0000, 0xf658, 0x89ec, 0x0f11, 0x0000, 0x0000, 0x0000,\n+    0xbfc8, 0x9ba8, 0x0ef4, 0x0000, 0x0000, 0x0000, 0x3d40, 0xbe21, 0x0ed5, 0x0000,\n+    0x0000, 0x0000, 0xbbc4, 0xc70d, 0x0eb6, 0x0000, 0x0000, 0x0000, 0x5158, 0xdb16,\n+    0x0e96, 0x0000, 0x0000, 0x0000, 0xb5a8, 0xa8d8, 0x0e78, 0x0000, 0x0000, 0x0000,\n+    0xcccc, 0xb40e, 0x0e58, 0x0000, 0x0000, 0x0000, 0x448c, 0xcb62, 0x0e3a, 0x0000,\n+    0x0000, 0x0000, 0xf12a, 0x8aed, 0x0e1b, 0x0000, 0x0000, 0x0000, 0x79d0, 0xc59c,\n+    0x0dfb, 0x0000, 0x0000, 0x0000, 0x06b4, 0xcdc9, 0x0ddd, 0x0000, 0x0000, 0x0000,\n+    0xae70, 0xa979, 0x0dbe, 0x0000, 0x0000, 0x0000, 0x317c, 0xa8fb, 0x0d9e, 0x0000,\n+    0x0000, 0x0000, 0x5fe0, 0x8a50, 0x0d7d, 0x0000, 0x0000, 0x0000, 0x70b6, 0xfdfa,\n+    0x0d61, 0x0000, 0x0000, 0x0000, 0x1640, 0x9dc7, 0x0d41, 0x0000, 0x0000, 0x0000,\n+    0x9a9c, 0xdc50, 0x0d23, 0x0000, 0x0000, 0x0000, 0x4fcc, 0x9a9b, 0x0d04, 0x0000,\n+    0x0000, 0x0000, 0x7e48, 0x8f77, 0x0ce5, 0x0000, 0x0000, 0x0000, 0x84e4, 0xd4b9,\n+    0x0cc6, 0x0000, 0x0000, 0x0000, 0x84e0, 0xbd10, 0x0ca6, 0x0000, 0x0000, 0x0000,\n+    0x1b0a, 0xc8d9, 0x0c88, 0x0000, 0x0000, 0x0000, 0x6a48, 0xfc81, 0x0c68, 0x0000,\n+    0x0000, 0x0000, 0x070a, 0xbef6, 0x0c4a, 0x0000, 0x0000, 0x0000, 0x8a70, 0xf096,\n+    0x0c2b, 0x0000, 0x0000, 0x0000, 0xecc2, 0xc994, 0x0c0c, 0x0000, 0x0000, 0x0000,\n+    0x1540, 0x9537, 0x0bea, 0x0000, 0x0000, 0x0000, 0x1b02, 0xab5b, 0x0bce, 0x0000,\n+    0x0000, 0x0000, 0x5dc0, 0xb0c8, 0x0bad, 0x0000, 0x0000, 0x0000, 0xc928, 0xe034,\n+    0x0b8f, 0x0000, 0x0000, 0x0000, 0x2d12, 0xb4b0, 0x0b71, 0x0000, 0x0000, 0x0000,\n+    0x8fc2, 0xbb94, 0x0b52, 0x0000, 0x0000, 0x0000, 0xe236, 0xe22f, 0x0b33, 0x0000,\n+    0x0000, 0x0000, 0xb97c, 0xbe9e, 0x0b13, 0x0000, 0x0000, 0x0000, 0xe1a6, 0xe16d,\n+    0x0af5, 0x0000, 0x0000, 0x0000, 0xd330, 0xbaf0, 0x0ad6, 0x0000, 0x0000, 0x0000,\n+    0xc0bc, 0xbbd0, 0x0ab7, 0x0000, 0x0000, 0x0000, 0x8e66, 0xdd9b, 0x0a98, 0x0000,\n+    0x0000, 0x0000, 0xc95c, 0xf799, 0x0a79, 0x0000, 0x0000, 0x0000, 0xdac0, 0xbe4c,\n+    0x0a55, 0x0000, 0x0000, 0x0000, 0xafc0, 0xc378, 0x0a37, 0x0000, 0x0000, 0x0000,\n+    0xa880, 0xe341, 0x0a19, 0x0000, 0x0000, 0x0000, 0xc242, 0x81f6, 0x09fd, 0x0000,\n+    0x0000, 0x0000, 0x7470, 0xc777, 0x09de, 0x0000, 0x0000, 0x0000, 0x62bc, 0xb684,\n+    0x09be, 0x0000, 0x0000, 0x0000, 0x43ac, 0x8c58, 0x099f, 0x0000, 0x0000, 0x0000,\n+    0xcc3c, 0xf9ac, 0x0981, 0x0000, 0x0000, 0x0000, 0x1526, 0xb670, 0x0962, 0x0000,\n+    0x0000, 0x0000, 0xc9fe, 0xdf50, 0x0943, 0x0000, 0x0000, 0x0000, 0x6ae6, 0xc065,\n+    0x0924, 0x0000, 0x0000, 0x0000, 0xb114, 0xcf29, 0x0905, 0x0000, 0x0000, 0x0000,\n+    0xd388, 0x922a, 0x08e4, 0x0000, 0x0000, 0x0000, 0xcf54, 0xb926, 0x08c7, 0x0000,\n+    0x0000, 0x0000, 0x3826, 0xe855, 0x08a8, 0x0000, 0x0000, 0x0000, 0xe7c8, 0x829b,\n+    0x0888, 0x0000, 0x0000, 0x0000, 0x546c, 0xa903, 0x086a, 0x0000, 0x0000, 0x0000,\n+    0x8768, 0x99cc, 0x0849, 0x0000, 0x0000, 0x0000, 0x00ac, 0xf529, 0x082b, 0x0000,\n+    0x0000, 0x0000, 0x2658, 0x9f0b, 0x080c, 0x0000, 0x0000, 0x0000, 0xfe5c, 0x9e21,\n+    0x07ee, 0x0000, 0x0000, 0x0000, 0x6da2, 0x9910, 0x07cf, 0x0000, 0x0000, 0x0000,\n+    0x9220, 0xf9b3, 0x07b0, 0x0000, 0x0000, 0x0000, 0x3d90, 0xa541, 0x0791, 0x0000,\n+    0x0000, 0x0000, 0x6e4c, 0xe7cc, 0x0771, 0x0000, 0x0000, 0x0000, 0xa8fa, 0xe80a,\n+    0x0753, 0x0000, 0x0000, 0x0000, 0x4e14, 0xc3a7, 0x0734, 0x0000, 0x0000, 0x0000,\n+    0xf7e0, 0xbad9, 0x0712, 0x0000, 0x0000, 0x0000, 0xfea0, 0xeff2, 0x06f5, 0x0000,\n+    0x0000, 0x0000, 0xcef6, 0xbd48, 0x06d7, 0x0000, 0x0000, 0x0000, 0x7544, 0xf559,\n+    0x06b7, 0x0000, 0x0000, 0x0000, 0x2388, 0xf655, 0x0698, 0x0000, 0x0000, 0x0000,\n+    0xe900, 0xad56, 0x0676, 0x0000, 0x0000, 0x0000, 0x2cc0, 0x8437, 0x0659, 0x0000,\n+    0x0000, 0x0000, 0x3068, 0xc544, 0x063b, 0x0000, 0x0000, 0x0000, 0xdc70, 0xe73c,\n+    0x061b, 0x0000, 0x0000, 0x0000, 0xee50, 0x9d49, 0x05fc, 0x0000, 0x0000, 0x0000,\n+    0x93d2, 0x81f6, 0x05df, 0x0000, 0x0000, 0x0000, 0x941c, 0xadff, 0x05bf, 0x0000,\n+    0x0000, 0x0000, 0x2ce2, 0x8e45, 0x05a1, 0x0000, 0x0000, 0x0000, 0x4a60, 0x95fd,\n+    0x0581, 0x0000, 0x0000, 0x0000, 0x79f8, 0xb83a, 0x0563, 0x0000, 0x0000, 0x0000,\n+    0xcb58, 0xa1f5, 0x0543, 0x0000, 0x0000, 0x0000, 0x2a3a, 0xdc36, 0x0525, 0x0000,\n+    0x0000, 0x0000, 0x14ee, 0x890e, 0x0506, 0x0000, 0x0000, 0x0000, 0x8f20, 0xc432,\n+    0x04e3, 0x0000, 0x0000, 0x0000, 0x8440, 0xb21d, 0x04c6, 0x0000, 0x0000, 0x0000,\n+    0x5430, 0xf698, 0x04a7, 0x0000, 0x0000, 0x0000, 0x04ae, 0x8b20, 0x048a, 0x0000,\n+    0x0000, 0x0000, 0x04d0, 0xe872, 0x046b, 0x0000, 0x0000, 0x0000, 0xc78e, 0x8893,\n+    0x044c, 0x0000, 0x0000, 0x0000, 0x0f78, 0x9895, 0x042b, 0x0000, 0x0000, 0x0000,\n+    0x11d4, 0xdf2e, 0x040d, 0x0000, 0x0000, 0x0000, 0xe84c, 0x89d5, 0x03ef, 0x0000,\n+    0x0000, 0x0000, 0xf7be, 0x8a67, 0x03d0, 0x0000, 0x0000, 0x0000, 0x95d0, 0xc906,\n+    0x03b1, 0x0000, 0x0000, 0x0000, 0x64ce, 0xd96c, 0x0392, 0x0000, 0x0000, 0x0000,\n+    0x97ba, 0xa16f, 0x0373, 0x0000, 0x0000, 0x0000, 0x463c, 0xc51a, 0x0354, 0x0000,\n+    0x0000, 0x0000, 0xef0a, 0xe93e, 0x0335, 0x0000, 0x0000, 0x0000, 0x526a, 0xa466,\n+    0x0316, 0x0000, 0x0000, 0x0000, 0x4140, 0xa94d, 0x02f5, 0x0000, 0x0000, 0x0000,\n+    0xb4ec, 0xce68, 0x02d8, 0x0000, 0x0000, 0x0000, 0x4fa2, 0x8490, 0x02b9, 0x0000,\n+    0x0000, 0x0000, 0x4e60, 0xca98, 0x0298, 0x0000, 0x0000, 0x0000, 0x08dc, 0xe09c,\n+    0x027a, 0x0000, 0x0000, 0x0000, 0x2b90, 0xc7e3, 0x025c, 0x0000, 0x0000, 0x0000,\n+    0x5a7c, 0xf8ef, 0x023c, 0x0000, 0x0000, 0x0000, 0x5022, 0x9d58, 0x021e, 0x0000,\n+    0x0000, 0x0000, 0x553a, 0xe242, 0x01ff, 0x0000, 0x0000, 0x0000, 0x7e6e, 0xb54d,\n+    0x01e0, 0x0000, 0x0000, 0x0000, 0xd2d4, 0xa88c, 0x01c1, 0x0000, 0x0000, 0x0000,\n+    0x75b6, 0xfe6d, 0x01a2, 0x0000, 0x0000, 0x0000, 0x3bb2, 0xf04c, 0x0183, 0x0000,\n+    0x0000, 0x0000, 0xc2d0, 0xc046, 0x0163, 0x0000, 0x0000, 0x0000, 0x250c, 0xf9d6,\n+    0x0145, 0x0000, 0x0000, 0x0000, 0xb7b4, 0x8a0d, 0x0126, 0x0000, 0x0000, 0x0000,\n+    0x1a72, 0xe4f5, 0x0107, 0x0000, 0x0000, 0x0000, 0x825c, 0xa9b8, 0x00e8, 0x0000,\n+    0x0000, 0x0000, 0x6c90, 0xc9ad, 0x00c6, 0x0000, 0x0000, 0x0000, 0x4d00, 0xd1bb,\n+    0x00aa, 0x0000, 0x0000, 0x0000, 0xa4a0, 0xee01, 0x0087, 0x0000, 0x0000, 0x0000,\n+    0x89a8, 0xbe9f, 0x006b, 0x0000, 0x0000, 0x0000, 0x038e, 0xc80c, 0x004d, 0x0000,\n+    0x0000, 0x0000, 0xfe26, 0x8384, 0x002e, 0x0000, 0x0000, 0x0000, 0xcd90, 0xca57,\n+    0x000e, 0x0000\n+};\n+\n+void MacroAssembler::libm_reduce_pi04l(Register eax, Register ecx, Register edx, Register ebx, Register esi, Register edi, Register ebp, Register esp) {\n+  Label B1_1, B1_2, B1_3, B1_4, B1_5, B1_6, B1_7, B1_8, B1_9, B1_10, B1_11, B1_12;\n+  Label B1_13, B1_14, B1_15;\n+\n+  assert_different_registers(ebx, eax, ecx, edx, esi, edi, ebp, esp);\n+\n+  address zero_none  = (address)_zero_none;\n+  address _4onpi_d   = (address)__4onpi_d;\n+  address TWO_32H    = (address)_TWO_32H;\n+  address pi04_3d    = (address)_pi04_3d;\n+  address pi04_5d    = (address)_pi04_5d;\n+  address SCALE      = (address)_SCALE;\n+  address zeros      = (address)_zeros;\n+  address pi04_2d    = (address)_pi04_2d;\n+  address TWO_12H    = (address)_TWO_12H;\n+  address _4onpi_31l = (address)__4onpi_31l;\n+\n+  bind(B1_1);\n+  push(ebp);\n+  movl(ebp, esp);\n+  andl(esp, -16);\n+  push(esi);\n+  push(edi);\n+  push(ebx);\n+  subl(esp, 20);\n+  movzwl(ebx, Address(ebp, 16));\n+  andl(ebx, 32767);\n+  movl(eax, Address(ebp, 20));\n+  cmpl(ebx, 16413);\n+  movl(esi, Address(ebp, 24));\n+  movl(Address(esp, 4), eax);\n+  jcc(Assembler::greaterEqual, B1_8);\n+\n+  bind(B1_2);\n+  fld_x(Address(ebp, 8));\n+  fld_d(ExternalAddress(_4onpi_d));    \/\/0x6dc9c883UL, 0x3ff45f30UL\n+  fmul(1);\n+  fstp_x(Address(esp, 8));\n+  movzwl(ecx, Address(esp, 16));\n+  negl(ecx);\n+  addl(ecx, 30);\n+  movl(eax, Address(esp, 12));\n+  shrl(eax);\n+  cmpl(Address(esp, 4), 0);\n+  jcc(Assembler::notEqual, B1_4);\n+\n+  bind(B1_3);\n+  lea(ecx, Address(eax, 1));\n+  andl(ecx, -2);\n+  jmp(B1_5);\n+\n+  bind(B1_4);\n+  movl(ecx, eax);\n+  addl(eax, Address(esp, 4));\n+  movl(edx, eax);\n+  andl(edx, 1);\n+  addl(ecx, edx);\n+\n+  bind(B1_5);\n+  fld_d(ExternalAddress(TWO_32H));    \/\/0x00000000UL, 0x41f80000UL\n+  cmpl(ebx, 16400);\n+  movl(Address(esp, 0), ecx);\n+  fild_s(Address(esp, 0));\n+  jcc(Assembler::greaterEqual, B1_7);\n+\n+  bind(B1_6);\n+  fld_d(ExternalAddress(pi04_3d));    \/\/0x54442d00UL, 0x3fe921fbUL\n+  fmul(1);\n+  fsubp(3);\n+  fxch(1);\n+  fmul(2);\n+  fld_s(2);\n+  fadd(1);\n+  fsubrp(1);\n+  fld_s(0);\n+  fxch(1);\n+  fsuba(3);\n+  fld_d(ExternalAddress(8 + pi04_3d));    \/\/0x98cc5180UL, 0x3ce84698UL\n+  fmul(3);\n+  fsuba(2);\n+  fxch(1);\n+  fsub(2);\n+  fsubrp(1);\n+  faddp(3);\n+  fld_d(ExternalAddress(16 + pi04_3d));    \/\/0xcbb5bf6cUL, 0xb9dfc8f8UL\n+  fmulp(2);\n+  fld_s(1);\n+  fsubr(1);\n+  fsuba(1);\n+  fxch(2);\n+  fsubp(1);\n+  faddp(2);\n+  fxch(1);\n+  jmp(B1_15);\n+\n+  bind(B1_7);\n+  fld_d(ExternalAddress(pi04_5d));    \/\/0x54400000UL, 0x3fe921fbUL\n+  fmul(1);\n+  fsubp(3);\n+  fxch(1);\n+  fmul(2);\n+  fld_s(2);\n+  fadd(1);\n+  fsubrp(1);\n+  fld_s(0);\n+  fxch(1);\n+  fsuba(3);\n+  fld_d(ExternalAddress(8 + pi04_5d));    \/\/0x1a600000UL, 0x3dc0b461UL\n+  fmul(3);\n+  fsuba(2);\n+  fxch(1);\n+  fsub(2);\n+  fsubrp(1);\n+  faddp(3);\n+  fld_d(ExternalAddress(16 + pi04_5d));    \/\/0x2e000000UL, 0x3b93198aUL\n+  fmul(2);\n+  fld_s(0);\n+  fsubr(2);\n+  fsuba(2);\n+  fxch(1);\n+  fsubp(2);\n+  fxch(1);\n+  faddp(3);\n+  fld_d(ExternalAddress(24 + pi04_5d));    \/\/0x25200000UL, 0x396b839aUL\n+  fmul(2);\n+  fld_s(0);\n+  fsubr(2);\n+  fsuba(2);\n+  fxch(1);\n+  fsubp(2);\n+  fxch(1);\n+  faddp(3);\n+  fld_d(ExternalAddress(32 + pi04_5d));    \/\/0x533e63a0UL, 0x37027044UL\n+  fmulp(2);\n+  fld_s(1);\n+  fsubr(1);\n+  fsuba(1);\n+  fxch(2);\n+  fsubp(1);\n+  faddp(2);\n+  fxch(1);\n+  jmp(B1_15);\n+\n+  bind(B1_8);\n+  fld_x(Address(ebp, 8));\n+  addl(ebx, -16417);\n+  fmul_d(as_Address(ExternalAddress(SCALE)));    \/\/0x00000000UL, 0x32600000UL\n+  movl(eax, -2078209981);\n+  imull(ebx);\n+  addl(edx, ebx);\n+  movl(ecx, ebx);\n+  sarl(edx, 4);\n+  sarl(ecx, 31);\n+  subl(edx, ecx);\n+  movl(eax, edx);\n+  shll(eax, 5);\n+  fstp_x(Address(ebp, 8));\n+  fld_x(Address(ebp, 8));\n+  subl(eax, edx);\n+  movl(Address(ebp, 8), 0);\n+  subl(ebx, eax);\n+  fld_x(Address(ebp, 8));\n+  cmpl(ebx, 17);\n+  fsuba(1);\n+  jcc(Assembler::less, B1_10);\n+\n+  bind(B1_9);\n+  lea(eax, Address(noreg, edx, Address::times_8));\n+  lea(ecx, Address(eax, edx, Address::times_4));\n+  incl(edx);\n+  fld_x(Address(_4onpi_31l, RelocationHolder::none).plus_disp(ecx, Address::times_1));\n+  fmul(2);\n+  fld_x(Address(12 + _4onpi_31l, RelocationHolder::none).plus_disp(ecx, Address::times_1));\n+  fmul(2);\n+  fld_s(0);\n+  fadd(2);\n+  fsuba(2);\n+  fxch(1);\n+  faddp(2);\n+  fld_s(1);\n+  fadd(1);\n+  fstp_x(Address(esp, 8));\n+  andl(Address(esp, 8), -16777216);\n+  fld_x(Address(esp, 8));\n+  fsubp(1);\n+  jmp(B1_11);\n+\n+  bind(B1_10);\n+  fld_d(ExternalAddress(zeros));    \/\/0x00000000UL, 0x00000000UL\n+  fld_s(0);\n+\n+  bind(B1_11);\n+  fld_s(0);\n+  lea(eax, Address(noreg, edx, Address::times_8));\n+  fld_s(3);\n+  lea(edx, Address(eax, edx, Address::times_4));\n+  fld_x(Address(_4onpi_31l, RelocationHolder::none).plus_disp(edx, Address::times_1));\n+  fmul(6);\n+  movl(Address(esp, 0), edx);\n+  fadda(2);\n+  fxch(2);\n+  fsuba(3);\n+  fxch(2);\n+  faddp(3);\n+  fxch(2);\n+  faddp(3);\n+  fld_x(Address(12 + _4onpi_31l, RelocationHolder::none).plus_disp(edx, Address::times_1));\n+  fmula(2);\n+  fld_s(2);\n+  fadd(2);\n+  fld_s(0);\n+  fxch(1);\n+  fsubra(3);\n+  fxch(3);\n+  fchs();\n+  faddp(4);\n+  fxch(3);\n+  faddp(4);\n+  fxch(2);\n+  fadd(3);\n+  fxch(2);\n+  fmul(5);\n+  fadda(2);\n+  fld_s(4);\n+  fld_x(Address(24 + _4onpi_31l, RelocationHolder::none).plus_disp(edx, Address::times_1));\n+  fmula(1);\n+  fxch(1);\n+  fadda(4);\n+  fxch(4);\n+  fstp_x(Address(esp, 8));\n+  movzwl(ebx, Address(esp, 16));\n+  andl(ebx, 32767);\n+  cmpl(ebx, 16415);\n+  jcc(Assembler::greaterEqual, B1_13);\n+\n+  bind(B1_12);\n+  negl(ebx);\n+  addl(ebx, 30);\n+  movl(ecx, ebx);\n+  movl(eax, Address(esp, 12));\n+  shrl(eax);\n+  shll(eax);\n+  movl(Address(esp, 12), eax);\n+  movl(Address(esp, 8), 0);\n+  shrl(eax);\n+  jmp(B1_14);\n+\n+  bind(B1_13);\n+  negl(ebx);\n+  addl(ebx, 30);\n+  movl(ecx, ebx);\n+  movl(edx, Address(esp, 8));\n+  shrl(edx);\n+  shll(edx);\n+  negl(ecx);\n+  movl(eax, Address(esp, 12));\n+  shll(eax);\n+  movl(ecx, ebx);\n+  movl(Address(esp, 8), edx);\n+  shrl(edx);\n+  orl(eax, edx);\n+\n+  bind(B1_14);\n+  fld_x(Address(esp, 8));\n+  addl(eax, Address(esp, 4));\n+  fsubp(3);\n+  fmul(6);\n+  fld_s(4);\n+  movl(edx, eax);\n+  andl(edx, 1);\n+  fadd(3);\n+  movl(ecx, Address(esp, 0));\n+  fsuba(3);\n+  fxch(3);\n+  faddp(5);\n+  fld_s(1);\n+  fxch(3);\n+  fadd_d(Address(zero_none, RelocationHolder::none).plus_disp(edx, Address::times_8));\n+  fadda(3);\n+  fsub(3);\n+  faddp(2);\n+  fxch(1);\n+  faddp(4);\n+  fld_s(2);\n+  fadd(2);\n+  fsuba(2);\n+  fxch(3);\n+  faddp(2);\n+  fxch(1);\n+  faddp(3);\n+  fld_s(0);\n+  fadd(2);\n+  fsuba(2);\n+  fxch(1);\n+  faddp(2);\n+  fxch(1);\n+  faddp(2);\n+  fld_s(2);\n+  fld_x(Address(36 + _4onpi_31l, RelocationHolder::none).plus_disp(ecx, Address::times_1));\n+  fmula(1);\n+  fld_s(1);\n+  fadd(3);\n+  fsuba(3);\n+  fxch(2);\n+  faddp(3);\n+  fxch(2);\n+  faddp(3);\n+  fxch(1);\n+  fmul(4);\n+  fld_s(0);\n+  fadd(2);\n+  fsuba(2);\n+  fxch(1);\n+  faddp(2);\n+  fxch(1);\n+  faddp(2);\n+  fld_s(2);\n+  fld_x(Address(48 + _4onpi_31l, RelocationHolder::none).plus_disp(ecx, Address::times_1));\n+  fmula(1);\n+  fld_s(1);\n+  fadd(3);\n+  fsuba(3);\n+  fxch(2);\n+  faddp(3);\n+  fxch(2);\n+  faddp(3);\n+  fld_s(3);\n+  fxch(2);\n+  fmul(5);\n+  fld_x(Address(60 + _4onpi_31l, RelocationHolder::none).plus_disp(ecx, Address::times_1));\n+  fmula(3);\n+  fxch(3);\n+  faddp(1);\n+  fld_s(0);\n+  fadd(2);\n+  fsuba(2);\n+  fxch(1);\n+  faddp(2);\n+  fxch(1);\n+  faddp(3);\n+  fld_s(3);\n+  fxch(2);\n+  fmul(5);\n+  fld_x(Address(72 + _4onpi_31l, RelocationHolder::none).plus_disp(ecx, Address::times_1));\n+  fmula(3);\n+  fxch(3);\n+  faddp(1);\n+  fld_s(0);\n+  fadd(2);\n+  fsuba(2);\n+  fxch(1);\n+  faddp(2);\n+  fxch(1);\n+  faddp(3);\n+  fxch(1);\n+  fmulp(4);\n+  fld_x(Address(84 + _4onpi_31l, RelocationHolder::none).plus_disp(ecx, Address::times_1));\n+  fmulp(3);\n+  fxch(2);\n+  faddp(3);\n+  fld_s(2);\n+  fadd(2);\n+  fld_d(ExternalAddress(TWO_32H));    \/\/0x00000000UL, 0x41f80000UL\n+  fmul(1);\n+  fadda(1);\n+  fsubp(1);\n+  fsuba(2);\n+  fxch(3);\n+  faddp(2);\n+  faddp(1);\n+  fld_d(ExternalAddress(pi04_2d));    \/\/0x54400000UL, 0x3fe921fbUL\n+  fld_s(0);\n+  fmul(2);\n+  fxch(2);\n+  fadd(3);\n+  fxch(1);\n+  fmulp(3);\n+  fmul_d(as_Address(ExternalAddress(8 + pi04_2d)));    \/\/0x1a626331UL, 0x3dc0b461UL\n+  faddp(1);\n+\n+  bind(B1_15);\n+  fld_d(ExternalAddress(TWO_12H));    \/\/0x00000000UL, 0x40b80000UL\n+  fld_s(2);\n+  fadd(2);\n+  fmula(1);\n+  fstp_x(Address(esp, 8));\n+  fld_x(Address(esp, 8));\n+  fadd(1);\n+  fsubrp(1);\n+  fst_d(Address(esi, 0));\n+  fsubp(2);\n+  faddp(1);\n+  fstp_d(Address(esi, 8));\n+  addl(esp, 20);\n+  pop(ebx);\n+  pop(edi);\n+  pop(esi);\n+  movl(esp, ebp);\n+  pop(ebp);\n+  ret(0);\n+}\n+\n+\n+ATTRIBUTE_ALIGNED(16) jushort _SP[] =\n+{\n+    0xaaab, 0xaaaa, 0xaaaa, 0xaaaa, 0xbffc, 0x0000, 0x8887, 0x8888, 0x8888, 0x8888,\n+    0x3ff8, 0x0000, 0xc527, 0x0d00, 0x00d0, 0xd00d, 0xbff2, 0x0000, 0x45f6, 0xb616,\n+    0x1d2a, 0xb8ef, 0x3fec, 0x0000, 0x825b, 0x3997, 0x2b3f, 0xd732, 0xbfe5, 0x0000,\n+    0xbf33, 0x8bb4, 0x2fda, 0xb092, 0x3fde, 0x0000, 0x44a6, 0xed1a, 0x29ef, 0xd73e,\n+    0xbfd6, 0x0000, 0x8610, 0x307f, 0x62a1, 0xc921, 0x3fce, 0x0000\n+};\n+\n+ATTRIBUTE_ALIGNED(16) jushort _CP[] =\n+{\n+    0x0000, 0x0000, 0x0000, 0x8000, 0xbffe, 0x0000, 0xaaa5, 0xaaaa, 0xaaaa, 0xaaaa,\n+    0x3ffa, 0x0000, 0x9c2f, 0x0b60, 0x60b6, 0xb60b, 0xbff5, 0x0000, 0xf024, 0x0cac,\n+    0x00d0, 0xd00d, 0x3fef, 0x0000, 0x03fe, 0x3f65, 0x7dbb, 0x93f2, 0xbfe9, 0x0000,\n+    0xd84d, 0xadee, 0xc698, 0x8f76, 0x3fe2, 0x0000, 0xdaba, 0xfe79, 0xea36, 0xc9c9,\n+    0xbfda, 0x0000, 0x3ac6, 0x0ba0, 0x07ce, 0xd585, 0x3fd2, 0x0000\n+};\n+\n+void MacroAssembler::libm_sincos_huge(XMMRegister xmm0, XMMRegister xmm1, Register eax, Register ecx, Register edx, Register ebx, Register esi, Register edi, Register ebp, Register esp) {\n+  Label B1_1, B1_2, B1_3, B1_4, B1_5, B1_6, B1_7, B1_8, B1_9, B1_10, B1_11, B1_12;\n+  Label B1_13, B1_14, B1_15, B1_16, B1_17, B1_18, B1_19, B1_20, B1_21, B1_22, B1_23;\n+  Label B1_24, B1_25, B1_26, B1_27, B1_28, B1_29, B1_30, B1_31, B1_32, B1_33, B1_34;\n+  Label B1_35, B1_36, B1_37, B1_38, B1_39, B1_40, B1_41, B1_42, B1_43, B1_46;\n+\n+  assert_different_registers(ebx, eax, ecx, edx, esi, edi, ebp, esp);\n+\n+  address CP = (address)_CP;\n+  address SP = (address)_SP;\n+\n+  bind(B1_1);\n+  push(ebp);\n+  movl(ebp, esp);\n+  andl(esp, -64);\n+  push(esi);\n+  push(edi);\n+  push(ebx);\n+  subl(esp, 52);\n+  movl(eax, Address(ebp, 16));\n+  movl(edx, Address(ebp, 20));\n+  movl(Address(esp, 32), eax);\n+  movl(Address(esp, 36), edx);\n+\n+  bind(B1_2);\n+  fnstcw(Address(esp, 30));\n+\n+  bind(B1_3);\n+  movsd(xmm1, Address(ebp, 8));\n+  movl(esi, Address(ebp, 12));\n+  movl(eax, esi);\n+  andl(eax, 2147483647);\n+  andps(xmm1, ExternalAddress(L_2IL0FLOATPACKET_0));    \/\/0xffffffffUL, 0x7fffffffUL, 0x00000000UL, 0x00000000UL\n+  shrl(esi, 31);\n+  movl(Address(esp, 40), eax);\n+  cmpl(eax, 1104150528);\n+  movsd(Address(ebp, 8), xmm1);\n+  jcc(Assembler::aboveEqual, B1_11);\n+\n+  bind(B1_4);\n+  movsd(xmm0, ExternalAddress(PI4_INV));    \/\/0x6dc9c883UL, 0x3ff45f30UL\n+  mulsd(xmm0, xmm1);\n+  movzwl(edx, Address(esp, 30));\n+  movl(eax, edx);\n+  andl(eax, 768);\n+  movsd(Address(esp, 0), xmm0);\n+  cmpl(eax, 768);\n+  jcc(Assembler::equal, B1_42);\n+\n+  bind(B1_5);\n+  orl(edx, -64768);\n+  movw(Address(esp, 28), edx);\n+\n+  bind(B1_6);\n+  fldcw(Address(esp, 28));\n+\n+  bind(B1_7);\n+  movsd(xmm1, Address(ebp, 8));\n+  movl(ebx, 1);\n+\n+  bind(B1_8);\n+  movl(Address(esp, 12), ebx);\n+  movl(ebx, Address(esp, 4));\n+  movl(eax, ebx);\n+  movl(Address(esp, 8), esi);\n+  movl(esi, ebx);\n+  shrl(esi, 20);\n+  andl(eax, 1048575);\n+  movl(ecx, esi);\n+  orl(eax, 1048576);\n+  negl(ecx);\n+  movl(edx, eax);\n+  addl(ecx, 19);\n+  addl(esi, 13);\n+  movl(Address(esp, 24), ecx);\n+  shrl(edx);\n+  movl(ecx, esi);\n+  shll(eax);\n+  movl(ecx, Address(esp, 24));\n+  movl(esi, Address(esp, 0));\n+  shrl(esi);\n+  orl(eax, esi);\n+  cmpl(ebx, 1094713344);\n+  movsd(Address(esp, 16), xmm1);\n+  fld_d(Address(esp, 16));\n+  cmov32(Assembler::below, eax, edx);\n+  movl(esi, Address(esp, 8));\n+  lea(edx, Address(eax, 1));\n+  movl(ebx, edx);\n+  andl(ebx, -2);\n+  movl(Address(esp, 16), ebx);\n+  fild_s(Address(esp, 16));\n+  movl(ebx, Address(esp, 12));\n+  cmpl(Address(esp, 40), 1094713344);\n+  jcc(Assembler::aboveEqual, B1_10);\n+\n+  bind(B1_9);\n+  fld_d(ExternalAddress(PI4X3));    \/\/0x54443000UL, 0xbfe921fbUL\n+  fmul(1);\n+  faddp(2);\n+  fld_d(ExternalAddress(PI4X3 + 8));    \/\/0x3b39a000UL, 0x3d373dcbUL\n+  fmul(1);\n+  faddp(2);\n+  fld_d(ExternalAddress(PI4X3 + 16));    \/\/0xe0e68948UL, 0xba845c06UL\n+  fmulp(1);\n+  faddp(1);\n+  jmp(B1_17);\n+\n+  bind(B1_10);\n+  fld_d(ExternalAddress(PI4X4));    \/\/0x54400000UL, 0xbfe921fbUL\n+  fmul(1);\n+  faddp(2);\n+  fld_d(ExternalAddress(PI4X4 + 8));    \/\/0x1a600000UL, 0xbdc0b461UL\n+  fmul(1);\n+  faddp(2);\n+  fld_d(ExternalAddress(PI4X4 + 16));    \/\/0x2e000000UL, 0xbb93198aUL\n+  fmul(1);\n+  faddp(2);\n+  fld_d(ExternalAddress(PI4X4 + 24));    \/\/0x252049c1UL, 0xb96b839aUL\n+  fmulp(1);\n+  faddp(1);\n+  jmp(B1_17);\n+\n+  bind(B1_11);\n+  movzwl(edx, Address(esp, 30));\n+  movl(eax, edx);\n+  andl(eax, 768);\n+  cmpl(eax, 768);\n+  jcc(Assembler::equal, B1_43);\n+  bind(B1_12);\n+  orl(edx, -64768);\n+  movw(Address(esp, 28), edx);\n+\n+  bind(B1_13);\n+  fldcw(Address(esp, 28));\n+\n+  bind(B1_14);\n+  movsd(xmm1, Address(ebp, 8));\n+  movl(ebx, 1);\n+\n+  bind(B1_15);\n+  movsd(Address(esp, 16), xmm1);\n+  fld_d(Address(esp, 16));\n+  addl(esp, -32);\n+  lea(eax, Address(esp, 32));\n+  fstp_x(Address(esp, 0));\n+  movl(Address(esp, 12), 0);\n+  movl(Address(esp, 16), eax);\n+  call(RuntimeAddress(CAST_FROM_FN_PTR(address, StubRoutines::dlibm_reduce_pi04l())));\n+\n+  bind(B1_46);\n+  addl(esp, 32);\n+\n+  bind(B1_16);\n+  fld_d(Address(esp, 0));\n+  lea(edx, Address(eax, 1));\n+  fld_d(Address(esp, 8));\n+  faddp(1);\n+\n+  bind(B1_17);\n+  movl(ecx, edx);\n+  addl(eax, 3);\n+  shrl(ecx, 2);\n+  andl(ecx, 1);\n+  shrl(eax, 2);\n+  xorl(esi, ecx);\n+  movl(ecx, Address(esp, 36));\n+  andl(eax, 1);\n+  andl(ecx, 3);\n+  cmpl(ecx, 3);\n+  jcc(Assembler::notEqual, B1_25);\n+\n+  bind(B1_18);\n+  fld_x(ExternalAddress(84 + SP));    \/\/0x8610, 0x307f, 0x62\n+  fld_s(1);\n+  fmul((2));\n+  testb(edx, 2);\n+  fmula((1));\n+  fld_x(ExternalAddress(72 + SP));    \/\/0x44a6, 0xed1a, 0x29\n+  faddp(2);\n+  fmula(1);\n+  fld_x(ExternalAddress(60 + SP));    \/\/0xbf33, 0x8bb4, 0x2f\n+  faddp(2);\n+  fmula(1);\n+  fld_x(ExternalAddress(48 + SP));    \/\/0x825b, 0x3997, 0x2b\n+  faddp(2);\n+  fmula(1);\n+  fld_x(ExternalAddress(36 + SP));    \/\/0x45f6, 0xb616, 0x1d\n+  faddp(2);\n+  fmula(1);\n+  fld_x(ExternalAddress(24 + SP));    \/\/0xc527, 0x0d00, 0x00\n+  faddp(2);\n+  fmula(1);\n+  fld_x(ExternalAddress(12 + SP));    \/\/0x8887, 0x8888, 0x88\n+  faddp(2);\n+  fmula(1);\n+  fld_x(ExternalAddress(SP));    \/\/0xaaab, 0xaaaa, 0xaa\n+  faddp(2);\n+  fmula(1);\n+  fld_x(ExternalAddress(84 + CP));    \/\/0x3ac6, 0x0ba0, 0x07\n+  fmul(1);\n+  fld_x(ExternalAddress(72 + CP));    \/\/0xdaba, 0xfe79, 0xea\n+  faddp(1);\n+  fmul(1);\n+  fld_x(ExternalAddress(62 + CP));    \/\/0xd84d, 0xadee, 0xc6\n+  faddp(1);\n+  fmul(1);\n+  fld_x(ExternalAddress(48 + CP));    \/\/0x03fe, 0x3f65, 0x7d\n+  faddp(1);\n+  fmul(1);\n+  fld_x(ExternalAddress(36 + CP));    \/\/0xf024, 0x0cac, 0x00\n+  faddp(1);\n+  fmul(1);\n+  fld_x(ExternalAddress(24 + CP));    \/\/0x9c2f, 0x0b60, 0x60\n+  faddp(1);\n+  fmul(1);\n+  fld_x(ExternalAddress(12 + CP));    \/\/0xaaa5, 0xaaaa, 0xaa\n+  faddp(1);\n+  fmul(1);\n+  fld_x(ExternalAddress(CP));    \/\/0x0000, 0x0000, 0x00\n+  faddp(1);\n+  fmulp(1);\n+  fld_d(Address(ONES, RelocationHolder::none).plus_disp(esi, Address::times_8));\n+  fld_d(Address(ONES, RelocationHolder::none).plus_disp(eax, Address::times_8));\n+  jcc(Assembler::equal, B1_22);\n+\n+  bind(B1_19);\n+  fmulp(4);\n+  testl(ebx, ebx);\n+  fxch(2);\n+  fmul(3);\n+  movl(eax, Address(esp, 2));\n+  faddp(3);\n+  fxch(2);\n+  fstp_d(Address(eax, 0));\n+  fmula(1);\n+  faddp(1);\n+  fstp_d(Address(eax, 8));\n+  jcc(Assembler::equal, B1_21);\n+\n+  bind(B1_20);\n+  fldcw(Address(esp, 30));\n+\n+  bind(B1_21);\n+  addl(esp, 52);\n+  pop(ebx);\n+  pop(edi);\n+  pop(esi);\n+  movl(esp, ebp);\n+  pop(ebp);\n+  ret(0);\n+\n+  bind(B1_22);\n+  fxch(1);\n+  fmulp(4);\n+  testl(ebx, ebx);\n+  fxch(2);\n+  fmul(3);\n+  movl(eax, Address(esp, 32));\n+  faddp(3);\n+  fxch(2);\n+  fstp_d(Address(eax, 8));\n+  fmula(1);\n+  faddp(1);\n+  fstp_d(Address(eax, 0));\n+  jcc(Assembler::equal, B1_24);\n+\n+  bind(B1_23);\n+  fldcw(Address(esp, 30));\n+\n+  bind(B1_24);\n+  addl(esp, 52);\n+  pop(ebx);\n+  pop(edi);\n+  pop(esi);\n+  movl(esp, ebp);\n+  pop(ebp);\n+  ret(0);\n+\n+  bind(B1_25);\n+  testb(Address(esp, 36), 2);\n+  jcc(Assembler::equal, B1_33);\n+\n+  bind(B1_26);\n+  fld_s(0);\n+  testb(edx, 2);\n+  fmul(1);\n+  fld_s(0);\n+  fmul(1);\n+  jcc(Assembler::equal, B1_30);\n+\n+  bind(B1_27);\n+  fstp_d(2);\n+  fld_x(ExternalAddress(84 + CP));    \/\/0x3ac6, 0x0ba0, 0x07\n+  testl(ebx, ebx);\n+  fmul(2);\n+  fld_x(ExternalAddress(72 + CP));    \/\/0xdaba, 0xfe79, 0xea\n+  fmul(3);\n+  fld_x(ExternalAddress(60 + CP));    \/\/0xd84d, 0xadee, 0xc6\n+  movl(eax, Address(rsp, 32));\n+  faddp(2);\n+  fxch(1);\n+  fmul(3);\n+  fld_x(ExternalAddress(48 + CP));    \/\/0x03fe, 0x3f65, 0x7d\n+  faddp(2);\n+  fxch(1);\n+  fmul(3);\n+  fld_x(ExternalAddress(36 + CP));    \/\/0xf024, 0x0cac, 0x00\n+  faddp(2);\n+  fxch(1);\n+  fmul(3);\n+  fld_x(ExternalAddress(24 + CP));    \/\/0x9c2f, 0x0b60, 0x60\n+  faddp(2);\n+  fxch(1);\n+  fmul(3);\n+  fld_x(ExternalAddress(12 + CP));    \/\/0xaaa5, 0xaaaa, 0xaa\n+  faddp(2);\n+  fxch(1);\n+  fmulp(3);\n+  fld_x(ExternalAddress(CP));    \/\/0x0000, 0x0000, 0x00\n+  faddp(1);\n+  fmulp(1);\n+  faddp(1);\n+  fld_d(Address(ONES, RelocationHolder::none).plus_disp(rsi, Address::times_8));\n+  fmula(1);\n+  faddp(1);\n+  fstp_d(Address(eax, 8));\n+  jcc(Assembler::equal, B1_29);\n+\n+  bind(B1_28);\n+  fldcw(Address(esp, 30));\n+\n+  bind(B1_29);\n+  addl(esp, 52);\n+  pop(ebx);\n+  pop(edi);\n+  pop(esi);\n+  movl(esp, ebp);\n+  pop(ebp);\n+  ret(0);\n+\n+  bind(B1_30);\n+  fld_x(ExternalAddress(84 + SP));    \/\/0x8610, 0x307f, 0x62\n+  testl(ebx, ebx);\n+  fmul(1);\n+  fld_x(ExternalAddress(72 + SP));    \/\/0x44a6, 0xed1a, 0x29\n+  fmul(2);\n+  fld_x(ExternalAddress(60 + SP));    \/\/0xbf33, 0x8bb4, 0x2f\n+  movl(eax, Address(rsp, 32));\n+  faddp(2);\n+  fxch(1);\n+  fmul(2);\n+  fld_x(ExternalAddress(48 + SP));    \/\/0x825b, 0x3997, 0x2b\n+  faddp(2);\n+  fxch(1);\n+  fmul(2);\n+  fld_x(ExternalAddress(36 + SP));    \/\/0x45f6, 0xb616, 0x1d\n+  faddp(2);\n+  fxch(1);\n+  fmul(2);\n+  fld_x(ExternalAddress(24 + SP));    \/\/0xc527, 0x0d00, 0x00\n+  faddp(2);\n+  fxch(1);\n+  fmul(2);\n+  fld_x(ExternalAddress(12 + SP));    \/\/0x8887, 0x8888, 0x88\n+  faddp(2);\n+  fxch(1);\n+  fmulp(2);\n+  fld_x(ExternalAddress(SP));    \/\/0xaaab, 0xaaaa, 0xaa\n+  faddp(1);\n+  fmulp(2);\n+  faddp(1);\n+  fld_d(Address(ONES, RelocationHolder::none).plus_disp(rsi, Address::times_8));\n+  fmulp(2);\n+  fmul(1);\n+  faddp(1);\n+  fstp_d(Address(eax, 8));\n+  jcc(Assembler::equal, B1_32);\n+\n+  bind(B1_31);\n+  fldcw(Address(esp, 30));\n+\n+  bind(B1_32);\n+  addl(esp, 52);\n+  pop(ebx);\n+  pop(edi);\n+  pop(esi);\n+  movl(esp, ebp);\n+  pop(ebp);\n+  ret(0);\n+\n+  bind(B1_33);\n+  testb(Address(esp, 36), 1);\n+  jcc(Assembler::equal, B1_41);\n+\n+  bind(B1_34);\n+  fld_s(0);\n+  testb(edx, 2);\n+  fmul(1);\n+  fld_s(0);\n+  fmul(1);\n+  jcc(Assembler::equal, B1_38);\n+\n+  bind(B1_35);\n+  fld_x(ExternalAddress(84 + SP));    \/\/0x8610, 0x307f, 0x62\n+  testl(ebx, ebx);\n+  fmul(1);\n+  fld_x(ExternalAddress(72 + SP));    \/\/0x44a6, 0xed1a, 0x29\n+  fmul(2);\n+  fld_x(ExternalAddress(60 + SP));    \/\/0xbf33, 0x8bb4, 0x2f\n+  faddp(2);\n+  fxch(1);\n+  fmul(2);\n+  fld_x(ExternalAddress(48 + SP));    \/\/0x825b, 0x3997, 0x2b\n+  faddp(2);\n+  fxch(1);\n+  fmul(2);\n+  fld_x(ExternalAddress(36 + SP));    \/\/0x45f6, 0xb616, 0x1d\n+  faddp(2);\n+  fxch(1);\n+  fmul(2);\n+  fld_x(ExternalAddress(24 + SP));    \/\/0xc527, 0x0d00, 0x00\n+  faddp(2);\n+  fxch(1);\n+  fmul(2);\n+  fld_x(ExternalAddress(12 + SP));    \/\/0x8887, 0x8888, 0x88\n+  faddp(2);\n+  fxch(1);\n+  fmulp(2);\n+  fld_x(ExternalAddress(SP));    \/\/0xaaab, 0xaaaa, 0xaa\n+  faddp(1);\n+  fmulp(2);\n+  faddp(1);\n+  fld_d(Address(ONES, RelocationHolder::none).plus_disp(eax, Address::times_8));\n+  fmulp(2);\n+  fmul(1);\n+  movl(eax, Address(esp, 32));\n+  faddp(1);\n+  fstp_d(Address(eax, 0));\n+  jcc(Assembler::equal, B1_37);\n+\n+  bind(B1_36);\n+  fldcw(Address(esp, 30));\n+\n+  bind(B1_37);\n+  addl(esp, 52);\n+  pop(ebx);\n+  pop(edi);\n+  pop(esi);\n+  movl(esp, ebp);\n+  pop(ebp);\n+  ret(0);\n+\n+  bind(B1_38);\n+  fstp_d(2);\n+  fld_x(ExternalAddress(84 + CP));    \/\/0x3ac6, 0x0ba0, 0x07\n+  testl(ebx, ebx);\n+  fmul(2);\n+  fld_x(ExternalAddress(72 + CP));    \/\/0xdaba, 0xfe79, 0xea\n+  fmul(3);\n+  fld_x(ExternalAddress(60 + CP));    \/\/0xd84d, 0xadee, 0xc6\n+  faddp(2);\n+  fxch(1);\n+  fmul(3);\n+  fld_x(ExternalAddress(48 + CP));    \/\/0x03fe, 0x3f65, 0x7d\n+  faddp(2);\n+  fxch(1);\n+  fmul(3);\n+  fld_x(ExternalAddress(36 + CP));    \/\/0xf024, 0x0cac, 0x00\n+  faddp(2);\n+  fxch(1);\n+  fmul(3);\n+  fld_x(ExternalAddress(24 + CP));    \/\/0x9c2f, 0x0b60, 0x60\n+  faddp(2);\n+  fxch(1);\n+  fmul(3);\n+  fld_x(ExternalAddress(12 + CP));    \/\/0xaaa5, 0xaaaa, 0xaa\n+  faddp(2);\n+  fxch(1);\n+  fmulp(3);\n+  fld_x(ExternalAddress(CP));    \/\/0x0000, 0x0000, 0x00\n+  faddp(1);\n+  fmulp(1);\n+  faddp(1);\n+  fld_d(Address(ONES, RelocationHolder::none).plus_disp(eax, Address::times_8));\n+  fmula(1);\n+  movl(eax, Address(esp, 32));\n+  faddp(1);\n+  fstp_d(Address(eax, 0));\n+  jcc(Assembler::equal, B1_40);\n+\n+  bind(B1_39);\n+  fldcw(Address(esp, 30));\n+  bind(B1_40);\n+  addl(esp, 52);\n+  pop(ebx);\n+  pop(edi);\n+  pop(esi);\n+  movl(esp, ebp);\n+  pop(ebp);\n+  ret(0);\n+  bind(B1_41);\n+  fstp_d(0);\n+  addl(esp, 52);\n+  pop(ebx);\n+  pop(edi);\n+  pop(esi);\n+  movl(esp, ebp);\n+  pop(ebp);\n+  ret(0);\n+  bind(B1_42);\n+  xorl(ebx, ebx);\n+  jmp(B1_8);\n+  bind(B1_43);\n+  xorl(ebx, ebx);\n+  jmp(B1_15);\n+}\n+\n+ATTRIBUTE_ALIGNED(16) juint _static_const_table_sin[] =\n+{\n+    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x00000000UL, 0x3ff00000UL, 0x176d6d31UL, 0xbf73b92eUL,\n+    0xbc29b42cUL, 0x3fb917a6UL, 0xe0000000UL, 0xbc3e2718UL, 0x00000000UL,\n+    0x3ff00000UL, 0x011469fbUL, 0xbf93ad06UL, 0x3c69a60bUL, 0x3fc8f8b8UL,\n+    0xc0000000UL, 0xbc626d19UL, 0x00000000UL, 0x3ff00000UL, 0x939d225aUL,\n+    0xbfa60beaUL, 0x2ed59f06UL, 0x3fd29406UL, 0xa0000000UL, 0xbc75d28dUL,\n+    0x00000000UL, 0x3ff00000UL, 0x866b95cfUL, 0xbfb37ca1UL, 0xa6aea963UL,\n+    0x3fd87de2UL, 0xe0000000UL, 0xbc672cedUL, 0x00000000UL, 0x3ff00000UL,\n+    0x73fa1279UL, 0xbfbe3a68UL, 0x3806f63bUL, 0x3fde2b5dUL, 0x20000000UL,\n+    0x3c5e0d89UL, 0x00000000UL, 0x3ff00000UL, 0x5bc57974UL, 0xbfc59267UL,\n+    0x39ae68c8UL, 0x3fe1c73bUL, 0x20000000UL, 0x3c8b25ddUL, 0x00000000UL,\n+    0x3ff00000UL, 0x53aba2fdUL, 0xbfcd0dfeUL, 0x25091dd6UL, 0x3fe44cf3UL,\n+    0x20000000UL, 0x3c68076aUL, 0x00000000UL, 0x3ff00000UL, 0x99fcef32UL,\n+    0x3fca8279UL, 0x667f3bcdUL, 0x3fe6a09eUL, 0x20000000UL, 0xbc8bdd34UL,\n+    0x00000000UL, 0x3fe00000UL, 0x94247758UL, 0x3fc133ccUL, 0x6b151741UL,\n+    0x3fe8bc80UL, 0x20000000UL, 0xbc82c5e1UL, 0x00000000UL, 0x3fe00000UL,\n+    0x9ae68c87UL, 0x3fac73b3UL, 0x290ea1a3UL, 0x3fea9b66UL, 0xe0000000UL,\n+    0x3c39f630UL, 0x00000000UL, 0x3fe00000UL, 0x7f909c4eUL, 0xbf9d4a2cUL,\n+    0xf180bdb1UL, 0x3fec38b2UL, 0x80000000UL, 0xbc76e0b1UL, 0x00000000UL,\n+    0x3fe00000UL, 0x65455a75UL, 0xbfbe0875UL, 0xcf328d46UL, 0x3fed906bUL,\n+    0x20000000UL, 0x3c7457e6UL, 0x00000000UL, 0x3fe00000UL, 0x76acf82dUL,\n+    0x3fa4a031UL, 0x56c62ddaUL, 0x3fee9f41UL, 0xe0000000UL, 0x3c8760b1UL,\n+    0x00000000UL, 0x3fd00000UL, 0x0e5967d5UL, 0xbfac1d1fUL, 0xcff75cb0UL,\n+    0x3fef6297UL, 0x20000000UL, 0x3c756217UL, 0x00000000UL, 0x3fd00000UL,\n+    0x0f592f50UL, 0xbf9ba165UL, 0xa3d12526UL, 0x3fefd88dUL, 0x40000000UL,\n+    0xbc887df6UL, 0x00000000UL, 0x3fc00000UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x0f592f50UL, 0x3f9ba165UL, 0xa3d12526UL, 0x3fefd88dUL,\n+    0x40000000UL, 0xbc887df6UL, 0x00000000UL, 0xbfc00000UL, 0x0e5967d5UL,\n+    0x3fac1d1fUL, 0xcff75cb0UL, 0x3fef6297UL, 0x20000000UL, 0x3c756217UL,\n+    0x00000000UL, 0xbfd00000UL, 0x76acf82dUL, 0xbfa4a031UL, 0x56c62ddaUL,\n+    0x3fee9f41UL, 0xe0000000UL, 0x3c8760b1UL, 0x00000000UL, 0xbfd00000UL,\n+    0x65455a75UL, 0x3fbe0875UL, 0xcf328d46UL, 0x3fed906bUL, 0x20000000UL,\n+    0x3c7457e6UL, 0x00000000UL, 0xbfe00000UL, 0x7f909c4eUL, 0x3f9d4a2cUL,\n+    0xf180bdb1UL, 0x3fec38b2UL, 0x80000000UL, 0xbc76e0b1UL, 0x00000000UL,\n+    0xbfe00000UL, 0x9ae68c87UL, 0xbfac73b3UL, 0x290ea1a3UL, 0x3fea9b66UL,\n+    0xe0000000UL, 0x3c39f630UL, 0x00000000UL, 0xbfe00000UL, 0x94247758UL,\n+    0xbfc133ccUL, 0x6b151741UL, 0x3fe8bc80UL, 0x20000000UL, 0xbc82c5e1UL,\n+    0x00000000UL, 0xbfe00000UL, 0x99fcef32UL, 0xbfca8279UL, 0x667f3bcdUL,\n+    0x3fe6a09eUL, 0x20000000UL, 0xbc8bdd34UL, 0x00000000UL, 0xbfe00000UL,\n+    0x53aba2fdUL, 0x3fcd0dfeUL, 0x25091dd6UL, 0x3fe44cf3UL, 0x20000000UL,\n+    0x3c68076aUL, 0x00000000UL, 0xbff00000UL, 0x5bc57974UL, 0x3fc59267UL,\n+    0x39ae68c8UL, 0x3fe1c73bUL, 0x20000000UL, 0x3c8b25ddUL, 0x00000000UL,\n+    0xbff00000UL, 0x73fa1279UL, 0x3fbe3a68UL, 0x3806f63bUL, 0x3fde2b5dUL,\n+    0x20000000UL, 0x3c5e0d89UL, 0x00000000UL, 0xbff00000UL, 0x866b95cfUL,\n+    0x3fb37ca1UL, 0xa6aea963UL, 0x3fd87de2UL, 0xe0000000UL, 0xbc672cedUL,\n+    0x00000000UL, 0xbff00000UL, 0x939d225aUL, 0x3fa60beaUL, 0x2ed59f06UL,\n+    0x3fd29406UL, 0xa0000000UL, 0xbc75d28dUL, 0x00000000UL, 0xbff00000UL,\n+    0x011469fbUL, 0x3f93ad06UL, 0x3c69a60bUL, 0x3fc8f8b8UL, 0xc0000000UL,\n+    0xbc626d19UL, 0x00000000UL, 0xbff00000UL, 0x176d6d31UL, 0x3f73b92eUL,\n+    0xbc29b42cUL, 0x3fb917a6UL, 0xe0000000UL, 0xbc3e2718UL, 0x00000000UL,\n+    0xbff00000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x00000000UL, 0x00000000UL, 0xbff00000UL, 0x176d6d31UL,\n+    0x3f73b92eUL, 0xbc29b42cUL, 0xbfb917a6UL, 0xe0000000UL, 0x3c3e2718UL,\n+    0x00000000UL, 0xbff00000UL, 0x011469fbUL, 0x3f93ad06UL, 0x3c69a60bUL,\n+    0xbfc8f8b8UL, 0xc0000000UL, 0x3c626d19UL, 0x00000000UL, 0xbff00000UL,\n+    0x939d225aUL, 0x3fa60beaUL, 0x2ed59f06UL, 0xbfd29406UL, 0xa0000000UL,\n+    0x3c75d28dUL, 0x00000000UL, 0xbff00000UL, 0x866b95cfUL, 0x3fb37ca1UL,\n+    0xa6aea963UL, 0xbfd87de2UL, 0xe0000000UL, 0x3c672cedUL, 0x00000000UL,\n+    0xbff00000UL, 0x73fa1279UL, 0x3fbe3a68UL, 0x3806f63bUL, 0xbfde2b5dUL,\n+    0x20000000UL, 0xbc5e0d89UL, 0x00000000UL, 0xbff00000UL, 0x5bc57974UL,\n+    0x3fc59267UL, 0x39ae68c8UL, 0xbfe1c73bUL, 0x20000000UL, 0xbc8b25ddUL,\n+    0x00000000UL, 0xbff00000UL, 0x53aba2fdUL, 0x3fcd0dfeUL, 0x25091dd6UL,\n+    0xbfe44cf3UL, 0x20000000UL, 0xbc68076aUL, 0x00000000UL, 0xbff00000UL,\n+    0x99fcef32UL, 0xbfca8279UL, 0x667f3bcdUL, 0xbfe6a09eUL, 0x20000000UL,\n+    0x3c8bdd34UL, 0x00000000UL, 0xbfe00000UL, 0x94247758UL, 0xbfc133ccUL,\n+    0x6b151741UL, 0xbfe8bc80UL, 0x20000000UL, 0x3c82c5e1UL, 0x00000000UL,\n+    0xbfe00000UL, 0x9ae68c87UL, 0xbfac73b3UL, 0x290ea1a3UL, 0xbfea9b66UL,\n+    0xe0000000UL, 0xbc39f630UL, 0x00000000UL, 0xbfe00000UL, 0x7f909c4eUL,\n+    0x3f9d4a2cUL, 0xf180bdb1UL, 0xbfec38b2UL, 0x80000000UL, 0x3c76e0b1UL,\n+    0x00000000UL, 0xbfe00000UL, 0x65455a75UL, 0x3fbe0875UL, 0xcf328d46UL,\n+    0xbfed906bUL, 0x20000000UL, 0xbc7457e6UL, 0x00000000UL, 0xbfe00000UL,\n+    0x76acf82dUL, 0xbfa4a031UL, 0x56c62ddaUL, 0xbfee9f41UL, 0xe0000000UL,\n+    0xbc8760b1UL, 0x00000000UL, 0xbfd00000UL, 0x0e5967d5UL, 0x3fac1d1fUL,\n+    0xcff75cb0UL, 0xbfef6297UL, 0x20000000UL, 0xbc756217UL, 0x00000000UL,\n+    0xbfd00000UL, 0x0f592f50UL, 0x3f9ba165UL, 0xa3d12526UL, 0xbfefd88dUL,\n+    0x40000000UL, 0x3c887df6UL, 0x00000000UL, 0xbfc00000UL, 0x00000000UL,\n+    0x00000000UL, 0x00000000UL, 0xbff00000UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x00000000UL, 0x0f592f50UL, 0xbf9ba165UL, 0xa3d12526UL,\n+    0xbfefd88dUL, 0x40000000UL, 0x3c887df6UL, 0x00000000UL, 0x3fc00000UL,\n+    0x0e5967d5UL, 0xbfac1d1fUL, 0xcff75cb0UL, 0xbfef6297UL, 0x20000000UL,\n+    0xbc756217UL, 0x00000000UL, 0x3fd00000UL, 0x76acf82dUL, 0x3fa4a031UL,\n+    0x56c62ddaUL, 0xbfee9f41UL, 0xe0000000UL, 0xbc8760b1UL, 0x00000000UL,\n+    0x3fd00000UL, 0x65455a75UL, 0xbfbe0875UL, 0xcf328d46UL, 0xbfed906bUL,\n+    0x20000000UL, 0xbc7457e6UL, 0x00000000UL, 0x3fe00000UL, 0x7f909c4eUL,\n+    0xbf9d4a2cUL, 0xf180bdb1UL, 0xbfec38b2UL, 0x80000000UL, 0x3c76e0b1UL,\n+    0x00000000UL, 0x3fe00000UL, 0x9ae68c87UL, 0x3fac73b3UL, 0x290ea1a3UL,\n+    0xbfea9b66UL, 0xe0000000UL, 0xbc39f630UL, 0x00000000UL, 0x3fe00000UL,\n+    0x94247758UL, 0x3fc133ccUL, 0x6b151741UL, 0xbfe8bc80UL, 0x20000000UL,\n+    0x3c82c5e1UL, 0x00000000UL, 0x3fe00000UL, 0x99fcef32UL, 0x3fca8279UL,\n+    0x667f3bcdUL, 0xbfe6a09eUL, 0x20000000UL, 0x3c8bdd34UL, 0x00000000UL,\n+    0x3fe00000UL, 0x53aba2fdUL, 0xbfcd0dfeUL, 0x25091dd6UL, 0xbfe44cf3UL,\n+    0x20000000UL, 0xbc68076aUL, 0x00000000UL, 0x3ff00000UL, 0x5bc57974UL,\n+    0xbfc59267UL, 0x39ae68c8UL, 0xbfe1c73bUL, 0x20000000UL, 0xbc8b25ddUL,\n+    0x00000000UL, 0x3ff00000UL, 0x73fa1279UL, 0xbfbe3a68UL, 0x3806f63bUL,\n+    0xbfde2b5dUL, 0x20000000UL, 0xbc5e0d89UL, 0x00000000UL, 0x3ff00000UL,\n+    0x866b95cfUL, 0xbfb37ca1UL, 0xa6aea963UL, 0xbfd87de2UL, 0xe0000000UL,\n+    0x3c672cedUL, 0x00000000UL, 0x3ff00000UL, 0x939d225aUL, 0xbfa60beaUL,\n+    0x2ed59f06UL, 0xbfd29406UL, 0xa0000000UL, 0x3c75d28dUL, 0x00000000UL,\n+    0x3ff00000UL, 0x011469fbUL, 0xbf93ad06UL, 0x3c69a60bUL, 0xbfc8f8b8UL,\n+    0xc0000000UL, 0x3c626d19UL, 0x00000000UL, 0x3ff00000UL, 0x176d6d31UL,\n+    0xbf73b92eUL, 0xbc29b42cUL, 0xbfb917a6UL, 0xe0000000UL, 0x3c3e2718UL,\n+    0x00000000UL, 0x3ff00000UL, 0x55555555UL, 0xbfc55555UL, 0x00000000UL,\n+    0xbfe00000UL, 0x11111111UL, 0x3f811111UL, 0x55555555UL, 0x3fa55555UL,\n+    0x1a01a01aUL, 0xbf2a01a0UL, 0x16c16c17UL, 0xbf56c16cUL, 0xa556c734UL,\n+    0x3ec71de3UL, 0x1a01a01aUL, 0x3efa01a0UL, 0x1a600000UL, 0x3d90b461UL,\n+    0x1a600000UL, 0x3d90b461UL, 0x54400000UL, 0x3fb921fbUL, 0x00000000UL,\n+    0x00000000UL, 0x2e037073UL, 0x3b63198aUL, 0x00000000UL, 0x00000000UL,\n+    0x6dc9c883UL, 0x40245f30UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n+    0x43380000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x43600000UL,\n+    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x3c800000UL, 0x00000000UL,\n+    0x00000000UL, 0xffffffffUL, 0x3fefffffUL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x80000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n+    0x80000000UL, 0x00000000UL, 0x80000000UL, 0x00000000UL, 0x3fe00000UL,\n+    0x00000000UL, 0x3fe00000UL\n+};\n+\n+void MacroAssembler::fast_sin(XMMRegister xmm0, XMMRegister xmm1, XMMRegister xmm2, XMMRegister xmm3,\n+                              XMMRegister xmm4, XMMRegister xmm5, XMMRegister xmm6, XMMRegister xmm7,\n+                              Register eax, Register ebx, Register edx) {\n+\n+  Label L_2TAG_PACKET_0_0_2, L_2TAG_PACKET_1_0_2, L_2TAG_PACKET_2_0_2, L_2TAG_PACKET_3_0_2;\n+  Label L_2TAG_PACKET_4_0_2;\n+\n+  assert_different_registers(eax, ebx, edx);\n+\n+  address static_const_table_sin = (address)_static_const_table_sin;\n+\n+  subl(rsp, 120);\n+  movl(Address(rsp, 56), ebx);\n+  lea(ebx, ExternalAddress(static_const_table_sin));\n+  movsd(xmm0, Address(rsp, 128));\n+  pextrw(eax, xmm0, 3);\n+  andl(eax, 32767);\n+  subl(eax, 12336);\n+  cmpl(eax, 4293);\n+  jcc(Assembler::above, L_2TAG_PACKET_0_0_2);\n+  movsd(xmm1, Address(ebx, 2160));\n+  mulsd(xmm1, xmm0);\n+  movsd(xmm5, Address(ebx, 2272));\n+  movdqu(xmm4, Address(ebx, 2256));\n+  pand(xmm4, xmm0);\n+  por(xmm5, xmm4);\n+  movsd(xmm3, Address(ebx, 2128));\n+  movdqu(xmm2, Address(ebx, 2112));\n+  addpd(xmm1, xmm5);\n+  cvttsd2sil(edx, xmm1);\n+  cvtsi2sdl(xmm1, edx);\n+  mulsd(xmm3, xmm1);\n+  unpcklpd(xmm1, xmm1);\n+  addl(edx, 1865216);\n+  movdqu(xmm4, xmm0);\n+  andl(edx, 63);\n+  movdqu(xmm5, Address(ebx, 2096));\n+  lea(eax, Address(ebx, 0));\n+  shll(edx, 5);\n+  addl(eax, edx);\n+  mulpd(xmm2, xmm1);\n+  subsd(xmm0, xmm3);\n+  mulsd(xmm1, Address(ebx, 2144));\n+  subsd(xmm4, xmm3);\n+  movsd(xmm7, Address(eax, 8));\n+  unpcklpd(xmm0, xmm0);\n+  movapd(xmm3, xmm4);\n+  subsd(xmm4, xmm2);\n+  mulpd(xmm5, xmm0);\n+  subpd(xmm0, xmm2);\n+  movdqu(xmm6, Address(ebx, 2064));\n+  mulsd(xmm7, xmm4);\n+  subsd(xmm3, xmm4);\n+  mulpd(xmm5, xmm0);\n+  mulpd(xmm0, xmm0);\n+  subsd(xmm3, xmm2);\n+  movdqu(xmm2, Address(eax, 0));\n+  subsd(xmm1, xmm3);\n+  movsd(xmm3, Address(eax, 24));\n+  addsd(xmm2, xmm3);\n+  subsd(xmm7, xmm2);\n+  mulsd(xmm2, xmm4);\n+  mulpd(xmm6, xmm0);\n+  mulsd(xmm3, xmm4);\n+  mulpd(xmm2, xmm0);\n+  mulpd(xmm0, xmm0);\n+  addpd(xmm5, Address(ebx, 2080));\n+  mulsd(xmm4, Address(eax, 0));\n+  addpd(xmm6, Address(ebx, 2048));\n+  mulpd(xmm5, xmm0);\n+  movapd(xmm0, xmm3);\n+  addsd(xmm3, Address(eax, 8));\n+  mulpd(xmm1, xmm7);\n+  movapd(xmm7, xmm4);\n+  addsd(xmm4, xmm3);\n+  addpd(xmm6, xmm5);\n+  movsd(xmm5, Address(eax, 8));\n+  subsd(xmm5, xmm3);\n+  subsd(xmm3, xmm4);\n+  addsd(xmm1, Address(eax, 16));\n+  mulpd(xmm6, xmm2);\n+  addsd(xmm5, xmm0);\n+  addsd(xmm3, xmm7);\n+  addsd(xmm1, xmm5);\n+  addsd(xmm1, xmm3);\n+  addsd(xmm1, xmm6);\n+  unpckhpd(xmm6, xmm6);\n+  addsd(xmm1, xmm6);\n+  addsd(xmm4, xmm1);\n+  movsd(Address(rsp, 0), xmm4);\n+  fld_d(Address(rsp, 0));\n+  jmp(L_2TAG_PACKET_1_0_2);\n+\n+  bind(L_2TAG_PACKET_0_0_2);\n+  jcc(Assembler::greater, L_2TAG_PACKET_2_0_2);\n+  shrl(eax, 4);\n+  cmpl(eax, 268434685);\n+  jcc(Assembler::notEqual, L_2TAG_PACKET_3_0_2);\n+  movsd(Address(rsp, 0), xmm0);\n+  fld_d(Address(rsp, 0));\n+  jmp(L_2TAG_PACKET_1_0_2);\n+\n+  bind(L_2TAG_PACKET_3_0_2);\n+  movsd(xmm3, Address(ebx, 2192));\n+  mulsd(xmm3, xmm0);\n+  subsd(xmm3, xmm0);\n+  mulsd(xmm3, Address(ebx, 2208));\n+  movsd(Address(rsp, 0), xmm0);\n+  fld_d(Address(rsp, 0));\n+  jmp(L_2TAG_PACKET_1_0_2);\n+\n+  bind(L_2TAG_PACKET_2_0_2);\n+  movl(eax, Address(rsp, 132));\n+  andl(eax, 2146435072);\n+  cmpl(eax, 2146435072);\n+  jcc(Assembler::equal, L_2TAG_PACKET_4_0_2);\n+  subl(rsp, 32);\n+  movsd(Address(rsp, 0), xmm0);\n+  lea(eax, Address(rsp, 40));\n+  movl(Address(rsp, 8), eax);\n+  movl(eax, 2);\n+  movl(Address(rsp, 12), eax);\n+  call(RuntimeAddress(CAST_FROM_FN_PTR(address, StubRoutines::dlibm_sin_cos_huge())));\n+  addl(rsp, 32);\n+  fld_d(Address(rsp, 16));\n+  jmp(L_2TAG_PACKET_1_0_2);\n+  bind(L_2TAG_PACKET_4_0_2);\n+  fld_d(Address(rsp, 128));\n+  fmul_d(Address(ebx, 2240));\n+  bind(L_2TAG_PACKET_1_0_2);\n+  movl(ebx, Address(rsp, 56));\n+}\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86_32_sin.cpp","additions":1743,"deletions":0,"binary":false,"changes":1743,"status":"added"},{"patch":"@@ -0,0 +1,1173 @@\n+\/*\n+* Copyright (c) 2016, 2021, Intel Corporation. All rights reserved.\n+* Intel Math Library (LIBM) Source Code\n+*\n+* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+*\n+* This code is free software; you can redistribute it and\/or modify it\n+* under the terms of the GNU General Public License version 2 only, as\n+* published by the Free Software Foundation.\n+*\n+* This code is distributed in the hope that it will be useful, but WITHOUT\n+* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+* version 2 for more details (a copy is included in the LICENSE file that\n+* accompanied this code).\n+*\n+* You should have received a copy of the GNU General Public License version\n+* 2 along with this work; if not, write to the Free Software Foundation,\n+* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+*\n+* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+* or visit www.oracle.com if you need additional information or have any\n+* questions.\n+*\n+*\/\n+\n+#include \"precompiled.hpp\"\n+#include \"asm\/assembler.hpp\"\n+#include \"asm\/assembler.inline.hpp\"\n+#include \"macroAssembler_x86.hpp\"\n+#include \"runtime\/stubRoutines.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n+\n+\/******************************************************************************\/\n+\/\/                     ALGORITHM DESCRIPTION - TAN()\n+\/\/                     ---------------------\n+\/\/\n+\/\/ Polynomials coefficients and other constants.\n+\/\/\n+\/\/ Note that in this algorithm, there is a different polynomial for\n+\/\/ each breakpoint, so there are 32 sets of polynomial coefficients\n+\/\/ as well as 32 instances of the other constants.\n+\/\/\n+\/\/ The polynomial coefficients and constants are offset from the start\n+\/\/ of the main block as follows:\n+\/\/\n+\/\/   0:  c8 | c0\n+\/\/  16:  c9 | c1\n+\/\/  32: c10 | c2\n+\/\/  48: c11 | c3\n+\/\/  64: c12 | c4\n+\/\/  80: c13 | c5\n+\/\/  96: c14 | c6\n+\/\/ 112: c15 | c7\n+\/\/ 128: T_hi\n+\/\/ 136: T_lo\n+\/\/ 144: Sigma\n+\/\/ 152: T_hl\n+\/\/ 160: Tau\n+\/\/ 168: Mask\n+\/\/ 176: (end of block)\n+\/\/\n+\/\/ The total table size is therefore 5632 bytes.\n+\/\/\n+\/\/ Note that c0 and c1 are always zero. We could try storing\n+\/\/ other constants here, and just loading the low part of the\n+\/\/ SIMD register in these cases, after ensuring the high part\n+\/\/ is zero.\n+\/\/\n+\/\/ The higher terms of the polynomial are computed in the *low*\n+\/\/ part of the SIMD register. This is so we can overlap the\n+\/\/ multiplication by r^8 and the unpacking of the other part.\n+\/\/\n+\/\/ The constants are:\n+\/\/ T_hi + T_lo = accurate constant term in power series\n+\/\/ Sigma + T_hl = accurate coefficient of r in power series (Sigma=1 bit)\n+\/\/ Tau = multiplier for the reciprocal, always -1 or 0\n+\/\/\n+\/\/ The basic reconstruction formula using these constants is:\n+\/\/\n+\/\/ High = tau * recip_hi + t_hi\n+\/\/ Med = (sgn * r + t_hl * r)_hi\n+\/\/ Low = (sgn * r + t_hl * r)_lo +\n+\/\/       tau * recip_lo + T_lo + (T_hl + sigma) * c + pol\n+\/\/\n+\/\/ where pol = c0 + c1 * r + c2 * r^2 + ... + c15 * r^15\n+\/\/\n+\/\/ (c0 = c1 = 0, but using them keeps SIMD regularity)\n+\/\/\n+\/\/ We then do a compensated sum High + Med, add the low parts together\n+\/\/ and then do the final sum.\n+\/\/\n+\/\/ Here recip_hi + recip_lo is an accurate reciprocal of the remainder\n+\/\/ modulo pi\/2\n+\/\/\n+\/\/ Special cases:\n+\/\/  tan(NaN) = quiet NaN, and raise invalid exception\n+\/\/  tan(INF) = NaN and raise invalid exception\n+\/\/  tan(+\/-0) = +\/-0\n+\/\/\n+\/******************************************************************************\/\n+\n+\/\/ The 32 bit code is at most SSE2 compliant\n+\n+ATTRIBUTE_ALIGNED(16) jushort _TP[] =\n+{\n+    0x4cd6, 0xaf6c, 0xc710, 0xc662, 0xbffd, 0x0000, 0x4b06, 0xb0ac, 0xd3b2, 0xcc2c,\n+    0x3ff9, 0x0000, 0x00e3, 0xc850, 0xaa28, 0x9533, 0xbff3, 0x0000, 0x2ff0, 0x466d,\n+    0x1a3b, 0xb266, 0x3fe5, 0x0000\n+};\n+\n+ATTRIBUTE_ALIGNED(16) jushort _TQ[] =\n+{\n+    0x399c, 0x8391, 0x154c, 0x94ca, 0xbfff, 0x0000, 0xb6a3, 0xc36a, 0x44e2, 0x8a2c,\n+    0x3ffe, 0x0000, 0xb70f, 0xd068, 0xa6ce, 0xe9dd, 0xbff9, 0x0000, 0x820f, 0x51ce,\n+    0x7d76, 0x9bff, 0x3ff3, 0x0000\n+};\n+\n+ATTRIBUTE_ALIGNED(16) jushort _GP[] =\n+{\n+    0xaaab, 0xaaaa, 0xaaaa, 0xaaaa, 0xbffd, 0x0000, 0xb62f, 0x0b60, 0x60b6, 0xb60b,\n+    0xbff9, 0x0000, 0xdfa7, 0x08aa, 0x55e0, 0x8ab3, 0xbff6, 0x0000, 0x85a0, 0xa819,\n+    0xbc99, 0xddeb, 0xbff2, 0x0000, 0x7065, 0x6a37, 0x795f, 0xb354, 0xbfef, 0x0000,\n+    0xa8f9, 0x83f1, 0x2ec8, 0x9140, 0xbfec, 0x0000, 0xf3ca, 0x8c96, 0x8e0b, 0xeb6d,\n+    0xbfe8, 0x0000, 0x355b, 0xd910, 0x67c9, 0xbed3, 0xbfe5, 0x0000, 0x286b, 0xb49e,\n+    0xb854, 0x9a98, 0xbfe2, 0x0000, 0x0871, 0x1a2f, 0x6477, 0xfcc4, 0xbfde, 0x0000,\n+    0xa559, 0x1da9, 0xaed2, 0xba76, 0xbfdb, 0x0000, 0x00a3, 0x7fea, 0x9bc3, 0xf205,\n+    0xbfd8, 0x0000\n+};\n+\n+void MacroAssembler::libm_tancot_huge(XMMRegister xmm0, XMMRegister xmm1, Register eax, Register ecx, Register edx, Register ebx, Register esi, Register edi, Register ebp, Register esp) {\n+  Label B1_1, B1_2, B1_3, B1_4, B1_5, B1_6, B1_7, B1_8, B1_9, B1_10, B1_11, B1_12;\n+  Label B1_13, B1_14, B1_15, B1_16, B1_17, B1_18, B1_19, B1_20, B1_21, B1_22, B1_23;\n+  Label B1_24, B1_25, B1_26, B1_27, B1_28, B1_29, B1_30, B1_31, B1_32, B1_33, B1_34;\n+  Label B1_35, B1_36, B1_37, B1_38, B1_39, B1_40, B1_43;\n+\n+  assert_different_registers(ebx, eax, ecx, edx, esi, edi, ebp, esp);\n+\n+  address TP = (address)_TP;\n+  address TQ = (address)_TQ;\n+  address GP = (address)_GP;\n+\n+  bind(B1_1);\n+  push(ebp);\n+  movl(ebp, esp);\n+  andl(esp, -64);\n+  push(esi);\n+  push(edi);\n+  push(ebx);\n+  subl(esp, 52);\n+  movl(eax, Address(ebp, 16));\n+  movl(ebx, Address(ebp, 20));\n+  movl(Address(esp, 40), eax);\n+\n+  bind(B1_2);\n+  fnstcw(Address(esp, 38));\n+\n+  bind(B1_3);\n+  movl(edx, Address(ebp, 12));\n+  movl(eax, edx);\n+  andl(eax, 2147483647);\n+  shrl(edx, 31);\n+  movl(Address(esp, 44), edx);\n+  cmpl(eax, 1104150528);\n+  jcc(Assembler::aboveEqual, B1_11);\n+\n+  bind(B1_4);\n+  movsd(xmm1, Address(ebp, 8));\n+  movzwl(ecx, Address(esp, 38));\n+  movl(edx, ecx);\n+  andl(edx, 768);\n+  andps(xmm1, ExternalAddress(L_2IL0FLOATPACKET_0));    \/\/0xffffffffUL, 0x7fffffffUL, 0x00000000UL, 0x00000000UL\n+  cmpl(edx, 768);\n+  movsd(xmm0, ExternalAddress(PI4_INV));    \/\/\/\/0x6dc9c883UL, 0x3ff45f30UL\n+  mulsd(xmm0, xmm1);\n+  movsd(Address(ebp, 8), xmm1);\n+  movsd(Address(esp, 0), xmm0);\n+  jcc(Assembler::equal, B1_39);\n+\n+  bind(B1_5);\n+  orl(ecx, -64768);\n+  movw(Address(esp, 36), ecx);\n+\n+  bind(B1_6);\n+  fldcw(Address(esp, 36));\n+\n+  bind(B1_7);\n+  movsd(xmm1, Address(ebp, 8));\n+  movl(edi, 1);\n+\n+  bind(B1_8);\n+  movl(Address(esp, 12), esi);\n+  movl(esi, Address(esp, 4));\n+  movl(edx, esi);\n+  movl(Address(esp, 24), edi);\n+  movl(edi, esi);\n+  shrl(edi, 20);\n+  andl(edx, 1048575);\n+  movl(ecx, edi);\n+  orl(edx, 1048576);\n+  negl(ecx);\n+  addl(edi, 13);\n+  movl(Address(esp, 8), ebx);\n+  addl(ecx, 19);\n+  movl(ebx, edx);\n+  movl(Address(esp, 28), ecx);\n+  shrl(ebx);\n+  movl(ecx, edi);\n+  shll(edx);\n+  movl(ecx, Address(esp, 28));\n+  movl(edi, Address(esp, 0));\n+  shrl(edi);\n+  orl(edx, edi);\n+  cmpl(esi, 1094713344);\n+  movsd(Address(esp, 16), xmm1);\n+  fld_d(Address(esp, 16));\n+  cmov32(Assembler::below, edx, ebx);\n+  movl(edi, Address(esp, 24));\n+  movl(esi, Address(esp, 12));\n+  lea(ebx, Address(edx, 1));\n+  andl(ebx, -2);\n+  movl(Address(esp, 16), ebx);\n+  cmpl(eax, 1094713344);\n+  fild_s(Address(esp, 16));\n+  movl(ebx, Address(esp, 8));\n+  jcc(Assembler::aboveEqual, B1_10);\n+\n+  bind(B1_9);\n+  fld_d(ExternalAddress(PI4X3));    \/\/0x54443000UL, 0xbfe921fbUL\n+  fmul(1);\n+  faddp(2);\n+  fld_d(ExternalAddress(PI4X3 + 8));    \/\/0x3b39a000UL, 0x3d373dcbUL\n+  fmul(1);\n+  faddp(2);\n+  fld_d(ExternalAddress(PI4X3 + 16));    \/\/0xe0e68948UL, 0xba845c06UL\n+  fmulp(1);\n+  faddp(1);\n+  jmp(B1_17);\n+\n+  bind(B1_10);\n+  fld_d(ExternalAddress(PI4X4));    \/\/0x54400000UL, 0xbfe921fbUL\n+  fmul(1);\n+  faddp(2);\n+  fld_d(ExternalAddress(PI4X4 + 8));    \/\/0x1a600000UL, 0xbdc0b461UL\n+  fmul(1);\n+  faddp(2);\n+  fld_d(ExternalAddress(PI4X4 + 16));    \/\/0x2e000000UL, 0xbb93198aUL\n+  fmul(1);\n+  faddp(2);\n+  fld_d(ExternalAddress(PI4X4 + 24));    \/\/0x252049c1UL, 0xb96b839aUL\n+  fmulp(1);\n+  faddp(1);\n+  jmp(B1_17);\n+\n+  bind(B1_11);\n+  movzwl(edx, Address(esp, 38));\n+  movl(eax, edx);\n+  andl(eax, 768);\n+  cmpl(eax, 768);\n+  jcc(Assembler::equal, B1_40);\n+\n+  bind(B1_12);\n+  orl(edx, -64768);\n+  movw(Address(esp, 36), edx);\n+\n+  bind(B1_13);\n+  fldcw(Address(esp, 36));\n+\n+  bind(B1_14);\n+  movl(edi, 1);\n+\n+  bind(B1_15);\n+  movsd(xmm0, Address(ebp, 8));\n+  addl(esp, -32);\n+  andps(xmm0, ExternalAddress(L_2IL0FLOATPACKET_0));    \/\/0xffffffffUL, 0x7fffffffUL, 0x00000000UL, 0x00000000UL\n+  lea(eax, Address(esp, 32));\n+  movsd(Address(eax, 16), xmm0);\n+  fld_d(Address(eax, 16));\n+  fstp_x(Address(esp, 0));\n+  movl(Address(esp, 12), 0);\n+  movl(Address(esp, 16), eax);\n+  call(RuntimeAddress(CAST_FROM_FN_PTR(address, StubRoutines::dlibm_reduce_pi04l())));\n+\n+  bind(B1_43);\n+  movl(edx, eax);\n+  addl(esp, 32);\n+\n+  bind(B1_16);\n+  fld_d(Address(esp, 0));\n+  fld_d(Address(esp, 8));\n+  faddp(1);\n+\n+  bind(B1_17);\n+  movl(eax, ebx);\n+  andl(eax, 3);\n+  cmpl(eax, 3);\n+  jcc(Assembler::notEqual, B1_24);\n+\n+  bind(B1_18);\n+  fld_d(ExternalAddress(ONES));\n+  incl(edx);\n+  fdiv(1);\n+  testb(edx, 2);\n+  fstp_x(Address(esp, 24));\n+  fld_s(0);\n+  fmul(1);\n+  fld_s(0);\n+  fmul(1);\n+  fld_x(ExternalAddress(36 + TP));    \/\/0x2ff0, 0x466d, 0x1a\n+  fmul(2);\n+  fld_x(ExternalAddress(24 + TP));    \/\/0x00e3, 0xc850, 0xaa\n+  faddp(1);\n+  fmul(2);\n+  fld_x(ExternalAddress(12 + TP));    \/\/0x4b06, 0xb0ac, 0xd3\n+  faddp(1);\n+  fmul(2);\n+  fld_x(ExternalAddress(36 + TQ));    \/\/0x820f, 0x51ce, 0x7d\n+  fmul(3);\n+  fld_x(ExternalAddress(24 + TQ));    \/\/0xb70f, 0xd068, 0xa6\n+  faddp(1);\n+  fmul(3);\n+  fld_x(ExternalAddress(12 + TQ));    \/\/0xb6a3, 0xc36a, 0x44\n+  faddp(1);\n+  fmul(3);\n+  fld_x(ExternalAddress(TQ));    \/\/0x399c, 0x8391, 0x15\n+  faddp(1);\n+  fld_x(ExternalAddress(TP));    \/\/0x4cd6, 0xaf6c, 0xc7\n+  faddp(2);\n+  fld_x(ExternalAddress(132 + GP));    \/\/0x00a3, 0x7fea, 0x9b\n+  fmul(3);\n+  fld_x(ExternalAddress(120 + GP));    \/\/0xa559, 0x1da9, 0xae\n+  fmul(4);\n+  fld_x(ExternalAddress(108 + GP));    \/\/0x0871, 0x1a2f, 0x64\n+  faddp(2);\n+  fxch(1);\n+  fmul(4);\n+  fld_x(ExternalAddress(96 + GP));    \/\/0x286b, 0xb49e, 0xb8\n+  faddp(2);\n+  fxch(1);\n+  fmul(4);\n+  fld_x(ExternalAddress(84 + GP));    \/\/0x355b, 0xd910, 0x67\n+  faddp(2);\n+  fxch(1);\n+  fmul(4);\n+  fld_x(ExternalAddress(72 + GP));    \/\/0x8c96, 0x8e0b, 0xeb\n+  faddp(2);\n+  fxch(1);\n+  fmul(4);\n+  fld_x(ExternalAddress(60 + GP));    \/\/0xa8f9, 0x83f1, 0x2e\n+  faddp(2);\n+  fxch(1);\n+  fmul(4);\n+  fld_x(ExternalAddress(48 + GP));    \/\/0x7065, 0x6a37, 0x79\n+  faddp(2);\n+  fxch(1);\n+  fmul(4);\n+  fld_x(ExternalAddress(36 + GP));    \/\/0x85a0, 0xa819, 0xbc\n+  faddp(2);\n+  fxch(1);\n+  fmul(4);\n+  fld_x(ExternalAddress(24 + GP));    \/\/0xdfa7, 0x08aa, 0x55\n+  faddp(2);\n+  fxch(1);\n+  fmulp(4);\n+  fld_x(ExternalAddress(12 + GP));    \/\/0xb62f, 0x0b60, 0x60\n+  faddp(1);\n+  fmul(4);\n+  fmul(5);\n+  fld_x(ExternalAddress(GP));    \/\/0xaaab, 0xaaaa, 0xaa\n+  faddp(4);\n+  fxch(3);\n+  fmul(5);\n+  faddp(3);\n+  jcc(Assembler::equal, B1_20);\n+\n+  bind(B1_19);\n+  fld_x(Address(esp, 24));\n+  fxch(1);\n+  fdivrp(2);\n+  fxch(1);\n+  fmulp(3);\n+  movl(eax, Address(esp, 44));\n+  xorl(eax, 1);\n+  fxch(2);\n+  fmul(3);\n+  fld_d(Address(ONES, RelocationHolder::none).plus_disp(eax, Address::times_8));\n+  fmula(2);\n+  fmula(3);\n+  fxch(3);\n+  faddp(2);\n+  fxch(1);\n+  fstp_d(Address(esp, 16));\n+  fmul(1);\n+  fxch(1);\n+  fmulp(2);\n+  movsd(xmm0, Address(esp, 16));\n+  faddp(1);\n+  fstp_d(Address(esp, 16));\n+  movsd(xmm1, Address(esp, 16));\n+  jmp(B1_21);\n+\n+  bind(B1_20);\n+  fdivrp(1);\n+  fmulp(2);\n+  fxch(1);\n+  fmul(2);\n+  movl(eax, Address(esp, 44));\n+  fld_d(Address(ONES, RelocationHolder::none).plus_disp(eax, Address::times_8));\n+  fmula(1);\n+  fmula(3);\n+  fxch(3);\n+  faddp(1);\n+  fstp_d(Address(esp, 16));\n+  fmul(1);\n+  fld_x(Address(esp, 24));\n+  fmulp(2);\n+  movsd(xmm0, Address(esp, 16));\n+  faddp(1);\n+  fstp_d(Address(esp, 16));\n+  movsd(xmm1, Address(esp, 16));\n+\n+  bind(B1_21);\n+  testl(edi, edi);\n+  jcc(Assembler::equal, B1_23);\n+\n+  bind(B1_22);\n+  fldcw(Address(esp, 38));\n+\n+  bind(B1_23);\n+  movl(eax, Address(esp, 40));\n+  movsd(Address(eax, 0), xmm0);\n+  movsd(Address(eax, 8), xmm1);\n+  addl(esp, 52);\n+  pop(ebx);\n+  pop(edi);\n+  pop(esi);\n+  movl(esp, ebp);\n+  pop(ebp);\n+  ret(0);\n+\n+  bind(B1_24);\n+  testb(ebx, 2);\n+  jcc(Assembler::equal, B1_31);\n+\n+  bind(B1_25);\n+  incl(edx);\n+  fld_s(0);\n+  fmul(1);\n+  testb(edx, 2);\n+  jcc(Assembler::equal, B1_27);\n+\n+  bind(B1_26);\n+  fld_d(ExternalAddress(ONES));\n+  fdiv(2);\n+  fld_s(1);\n+  fmul(2);\n+  fld_x(ExternalAddress(132 + GP));    \/\/0x00a3, 0x7fea, 0x9b\n+  fmul(1);\n+  fld_x(ExternalAddress(120 + GP));    \/\/0xa559, 0x1da9, 0xae\n+  fmul(2);\n+  fld_x(ExternalAddress(108 + GP));    \/\/0x67c9, 0xbed3, 0xbf\n+  movl(eax, Address(esp, 44));\n+  faddp(2);\n+  fxch(1);\n+  fmul(2);\n+  xorl(eax, 1);\n+  fld_x(ExternalAddress(96 + GP));    \/\/0x286b, 0xb49e, 0xb8\n+  faddp(2);\n+  fxch(1);\n+  fmul(2);\n+  fld_x(ExternalAddress(84 + GP));    \/\/0x355b, 0xd910, 0x67\n+  faddp(2);\n+  fxch(1);\n+  fmul(2);\n+  fld_x(ExternalAddress(72 + GP));    \/\/0xf3ca, 0x8c96, 0x8e\n+  faddp(2);\n+  fxch(1);\n+  fmul(2);\n+  fld_x(ExternalAddress(60 + GP));    \/\/0xa8f9, 0x83f1, 0x2e\n+  faddp(2);\n+  fxch(1);\n+  fmul(2);\n+  fld_x(ExternalAddress(48 + GP));    \/\/0x7065, 0x6a37, 0x79\n+  faddp(2);\n+  fxch(1);\n+  fmul(2);\n+  fld_x(ExternalAddress(36 + GP));    \/\/0x85a0, 0xa819, 0xbc\n+  faddp(2);\n+  fxch(1);\n+  fmul(2);\n+  fld_x(ExternalAddress(24 + GP));    \/\/0xdfa7, 0x08aa, 0x55\n+  faddp(2);\n+  fxch(1);\n+  fmulp(2);\n+  fld_x(ExternalAddress(12 + GP));    \/\/0xb62f, 0x0b60, 0x60\n+  faddp(1);\n+  fmulp(3);\n+  fld_x(ExternalAddress(GP));    \/\/0xaaab, 0xaaaa, 0xaa\n+  faddp(1);\n+  fmul(3);\n+  fxch(2);\n+  fmulp(3);\n+  fxch(1);\n+  faddp(2);\n+  fld_d(Address(ONES, RelocationHolder::none).plus_disp(eax, Address::times_8));\n+  fmula(2);\n+  fmulp(1);\n+  faddp(1);\n+  fstp_d(Address(esp, 16));\n+  movsd(xmm0, Address(esp, 16));\n+  jmp(B1_28);\n+\n+  bind(B1_27);\n+  fld_x(ExternalAddress(36 + TP));    \/\/0x2ff0, 0x466d, 0x1a\n+  fmul(1);\n+  fld_x(ExternalAddress(24 + TP));    \/\/0x00e3, 0xc850, 0xaa\n+  movl(eax, Address(esp, 44));\n+  faddp(1);\n+  fmul(1);\n+  fld_x(ExternalAddress(36 + TQ));    \/\/0x820f, 0x51ce, 0x7d\n+  fmul(2);\n+  fld_x(ExternalAddress(24 + TQ));    \/\/0xb70f, 0xd068, 0xa6\n+  faddp(1);\n+  fmul(2);\n+  fld_x(ExternalAddress(12 + TQ));    \/\/0xb6a3, 0xc36a, 0x44\n+  faddp(1);\n+  fmul(2);\n+  fld_x(ExternalAddress(TQ));    \/\/0x399c, 0x8391, 0x15\n+  faddp(1);\n+  fld_x(ExternalAddress(12 + TP));    \/\/0x4b06, 0xb0ac, 0xd3\n+  faddp(2);\n+  fxch(1);\n+  fmul(2);\n+  fld_x(ExternalAddress(TP));    \/\/0x4cd6, 0xaf6c, 0xc7\n+  faddp(1);\n+  fdivrp(1);\n+  fmulp(1);\n+  fmul(1);\n+  fld_d(Address(ONES, RelocationHolder::none).plus_disp(eax, Address::times_8));\n+  fmula(1);\n+  fmulp(2);\n+  faddp(1);\n+  fstp_d(Address(esp, 16));\n+  movsd(xmm0, Address(esp, 16));\n+\n+  bind(B1_28);\n+  testl(edi, edi);\n+  jcc(Assembler::equal, B1_30);\n+\n+  bind(B1_29);\n+  fldcw(Address(esp, 38));\n+\n+  bind(B1_30);\n+  movl(eax, Address(esp, 40));\n+  movsd(Address(eax, 0), xmm0);\n+  addl(esp, 52);\n+  pop(ebx);\n+  pop(edi);\n+  pop(esi);\n+  movl(esp, ebp);\n+  pop(ebp);\n+  ret(0);\n+\n+  bind(B1_31);\n+  testb(ebx, 1);\n+  jcc(Assembler::equal, B1_38);\n+\n+  bind(B1_32);\n+  incl(edx);\n+  fld_s(0);\n+  fmul(1);\n+  testb(edx, 2);\n+  jcc(Assembler::equal, B1_34);\n+\n+  bind(B1_33);\n+  fld_x(ExternalAddress(36 + TP));    \/\/0x2ff0, 0x466d, 0x1a\n+  fmul(1);\n+  fld_x(ExternalAddress(24 + TP));    \/\/0x00e3, 0xc850, 0xaa\n+  movl(eax, Address(esp, 44));\n+  faddp(1);\n+  fmul(1);\n+  xorl(eax, 1);\n+  fld_x(ExternalAddress(36 + TQ));    \/\/0x820f, 0x51ce, 0x7d\n+  fmul(2);\n+  fld_x(ExternalAddress(24 + TQ));    \/\/0xb70f, 0xd068, 0xa6\n+  faddp(1);\n+  fmul(2);\n+  fld_x(ExternalAddress(12 + TQ));    \/\/0xb6a3, 0xc36a, 0x44\n+  faddp(1);\n+  fmul(2);\n+  fld_x(ExternalAddress(TQ));    \/\/0x399c, 0x8391, 0x15\n+  faddp(1);\n+  fld_x(ExternalAddress(12 + TP));    \/\/0x4b06, 0xb0ac, 0xd3\n+  faddp(2);\n+  fxch(1);\n+  fmul(2);\n+  fld_x(ExternalAddress(TP));    \/\/0x4cd6, 0xaf6c, 0xc7\n+  faddp(1);\n+  fdivrp(1);\n+  fmulp(1);\n+  fmul(1);\n+  fld_d(Address(ONES, RelocationHolder::none).plus_disp(eax, Address::times_8));\n+  fmula(1);\n+  fmulp(2);\n+  faddp(1);\n+  fstp_d(Address(esp, 16));\n+  movsd(xmm0, Address(esp, 16));\n+  jmp(B1_35);\n+\n+  bind(B1_34);\n+  fld_d(ExternalAddress(ONES));\n+  fdiv(2);\n+  fld_s(1);\n+  fmul(2);\n+  fld_x(ExternalAddress(132 + GP));    \/\/0x00a3, 0x7fea, 0x9b\n+  fmul(1);\n+  fld_x(ExternalAddress(120 + GP));    \/\/0xa559, 0x1da9, 0xae\n+  fmul(2);\n+  fld_x(ExternalAddress(108 + GP));    \/\/0x67c9, 0xbed3, 0xbf\n+  movl(eax, Address(esp, 44));\n+  faddp(2);\n+  fxch(1);\n+  fmul(2);\n+  fld_x(ExternalAddress(96 + GP));    \/\/0x286b, 0xb49e, 0xb8\n+  faddp(2);\n+  fxch(1);\n+  fmul(2);\n+  fld_x(ExternalAddress(84 + GP));    \/\/0x355b, 0xd910, 0x67\n+  faddp(2);\n+  fxch(1);\n+  fmul(2);\n+  fld_x(ExternalAddress(72 + GP));    \/\/0xf3ca, 0x8c96, 0x8e\n+  faddp(2);\n+  fxch(1);\n+  fmul(2);\n+  fld_x(ExternalAddress(60 + GP));    \/\/0xa8f9, 0x83f1, 0x2e\n+  faddp(2);\n+  fxch(1);\n+  fmul(2);\n+  fld_x(ExternalAddress(48 + GP));    \/\/0x7065, 0x6a37, 0x79\n+  faddp(2);\n+  fxch(1);\n+  fmul(2);\n+  fld_x(ExternalAddress(36 + GP));    \/\/0x85a0, 0xa819, 0xbc\n+  faddp(2);\n+  fxch(1);\n+  fmul(2);\n+  fld_x(ExternalAddress(24 + GP));    \/\/0xdfa7, 0x08aa, 0x55\n+  faddp(2);\n+  fxch(1);\n+  fmulp(2);\n+  fld_x(ExternalAddress(12 + GP));    \/\/0xb62f, 0x0b60, 0x60\n+  faddp(1);\n+  fmulp(3);\n+  fld_x(ExternalAddress(GP));    \/\/0xaaab, 0xaaaa, 0xaa\n+  faddp(1);\n+  fmul(3);\n+  fxch(2);\n+  fmulp(3);\n+  fxch(1);\n+  faddp(2);\n+  fld_d(Address(ONES, RelocationHolder::none).plus_disp(eax, Address::times_8));\n+  fmula(2);\n+  fmulp(1);\n+  faddp(1);\n+  fstp_d(Address(esp, 16));\n+  movsd(xmm0, Address(esp, 16));\n+\n+  bind(B1_35);\n+  testl(edi, edi);\n+  jcc(Assembler::equal, B1_37);\n+\n+  bind(B1_36);\n+  fldcw(Address(esp, 38));\n+\n+  bind(B1_37);\n+  movl(eax, Address(esp, 40));\n+  movsd(Address(eax, 8), xmm0);\n+  addl(esp, 52);\n+  pop(ebx);\n+  pop(edi);\n+  pop(esi);\n+  mov(esp, ebp);\n+  pop(ebp);\n+  ret(0);\n+\n+  bind(B1_38);\n+  fstp_d(0);\n+  addl(esp, 52);\n+  pop(ebx);\n+  pop(edi);\n+  pop(esi);\n+  mov(esp, ebp);\n+  pop(ebp);\n+  ret(0);\n+\n+  bind(B1_39);\n+  xorl(edi, edi);\n+  jmp(B1_8);\n+\n+  bind(B1_40);\n+  xorl(edi, edi);\n+  jmp(B1_15);\n+}\n+\n+ATTRIBUTE_ALIGNED(16) juint _static_const_table_tan[] =\n+{\n+    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x882c10faUL,\n+    0x3f9664f4UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x00000000UL, 0x55e6c23dUL, 0x3f8226e3UL, 0x55555555UL,\n+    0x3fd55555UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n+    0x0e157de0UL, 0x3f6d6d3dUL, 0x11111111UL, 0x3fc11111UL, 0x00000000UL,\n+    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x452b75e3UL, 0x3f57da36UL,\n+    0x1ba1ba1cUL, 0x3faba1baUL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x4e435f9bUL,\n+    0x3f953f83UL, 0x00000000UL, 0x00000000UL, 0x3c6e8e46UL, 0x3f9b74eaUL,\n+    0x00000000UL, 0x00000000UL, 0xda5b7511UL, 0x3f85ad63UL, 0xdc230b9bUL,\n+    0x3fb97558UL, 0x26cb3788UL, 0x3f881308UL, 0x76fc4985UL, 0x3fd62ac9UL,\n+    0x77bb08baUL, 0x3f757c85UL, 0xb6247521UL, 0x3fb1381eUL, 0x5922170cUL,\n+    0x3f754e95UL, 0x8746482dUL, 0x3fc27f83UL, 0x11055b30UL, 0x3f64e391UL,\n+    0x3e666320UL, 0x3fa3e609UL, 0x0de9dae3UL, 0x3f6301dfUL, 0x1f1dca06UL,\n+    0x3fafa8aeUL, 0x8c5b2da2UL, 0x3fb936bbUL, 0x4e88f7a5UL, 0x3c587d05UL,\n+    0x00000000UL, 0x3ff00000UL, 0xa8935dd9UL, 0x3f83dde2UL, 0x00000000UL,\n+    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x5a279ea3UL, 0x3faa3407UL,\n+    0x00000000UL, 0x00000000UL, 0x432d65faUL, 0x3fa70153UL, 0x00000000UL,\n+    0x00000000UL, 0x891a4602UL, 0x3f9d03efUL, 0xd62ca5f8UL, 0x3fca77d9UL,\n+    0xb35f4628UL, 0x3f97a265UL, 0x433258faUL, 0x3fd8cf51UL, 0xb58fd909UL,\n+    0x3f8f88e3UL, 0x01771ceaUL, 0x3fc2b154UL, 0xf3562f8eUL, 0x3f888f57UL,\n+    0xc028a723UL, 0x3fc7370fUL, 0x20b7f9f0UL, 0x3f80f44cUL, 0x214368e9UL,\n+    0x3fb6dfaaUL, 0x28891863UL, 0x3f79b4b6UL, 0x172dbbf0UL, 0x3fb6cb8eUL,\n+    0xe0553158UL, 0x3fc975f5UL, 0x593fe814UL, 0x3c2ef5d3UL, 0x00000000UL,\n+    0x3ff00000UL, 0x03dec550UL, 0x3fa44203UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x00000000UL, 0x9314533eUL, 0x3fbb8ec5UL, 0x00000000UL,\n+    0x00000000UL, 0x09aa36d0UL, 0x3fb6d3f4UL, 0x00000000UL, 0x00000000UL,\n+    0xdcb427fdUL, 0x3fb13950UL, 0xd87ab0bbUL, 0x3fd5335eUL, 0xce0ae8a5UL,\n+    0x3fabb382UL, 0x79143126UL, 0x3fddba41UL, 0x5f2b28d4UL, 0x3fa552f1UL,\n+    0x59f21a6dUL, 0x3fd015abUL, 0x22c27d95UL, 0x3fa0e984UL, 0xe19fc6aaUL,\n+    0x3fd0576cUL, 0x8f2c2950UL, 0x3f9a4898UL, 0xc0b3f22cUL, 0x3fc59462UL,\n+    0x1883a4b8UL, 0x3f94b61cUL, 0x3f838640UL, 0x3fc30eb8UL, 0x355c63dcUL,\n+    0x3fd36a08UL, 0x1dce993dUL, 0xbc6d704dUL, 0x00000000UL, 0x3ff00000UL,\n+    0x2b82ab63UL, 0x3fb78e92UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x56f37042UL, 0x3fccfc56UL, 0x00000000UL, 0x00000000UL,\n+    0xaa563951UL, 0x3fc90125UL, 0x00000000UL, 0x00000000UL, 0x3d0e7c5dUL,\n+    0x3fc50533UL, 0x9bed9b2eUL, 0x3fdf0ed9UL, 0x5fe7c47cUL, 0x3fc1f250UL,\n+    0x96c125e5UL, 0x3fe2edd9UL, 0x5a02bbd8UL, 0x3fbe5c71UL, 0x86362c20UL,\n+    0x3fda08b7UL, 0x4b4435edUL, 0x3fb9d342UL, 0x4b494091UL, 0x3fd911bdUL,\n+    0xb56658beUL, 0x3fb5e4c7UL, 0x93a2fd76UL, 0x3fd3c092UL, 0xda271794UL,\n+    0x3fb29910UL, 0x3303df2bUL, 0x3fd189beUL, 0x99fcef32UL, 0x3fda8279UL,\n+    0xb68c1467UL, 0x3c708b2fUL, 0x00000000UL, 0x3ff00000UL, 0x980c4337UL,\n+    0x3fc5f619UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n+    0xcc03e501UL, 0x3fdff10fUL, 0x00000000UL, 0x00000000UL, 0x44a4e845UL,\n+    0x3fddb63bUL, 0x00000000UL, 0x00000000UL, 0x3768ad9fUL, 0x3fdb72a4UL,\n+    0x3dd01ccaUL, 0x3fe5fdb9UL, 0xa61d2811UL, 0x3fd972b2UL, 0x5645ad0bUL,\n+    0x3fe977f9UL, 0xd013b3abUL, 0x3fd78ca3UL, 0xbf0bf914UL, 0x3fe4f192UL,\n+    0x4d53e730UL, 0x3fd5d060UL, 0x3f8b9000UL, 0x3fe49933UL, 0xe2b82f08UL,\n+    0x3fd4322aUL, 0x5936a835UL, 0x3fe27ae1UL, 0xb1c61c9bUL, 0x3fd2b3fbUL,\n+    0xef478605UL, 0x3fe1659eUL, 0x190834ecUL, 0x3fe11ab7UL, 0xcdb625eaUL,\n+    0xbc8e564bUL, 0x00000000UL, 0x3ff00000UL, 0xb07217e3UL, 0x3fd248f1UL,\n+    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x2b2c49d0UL,\n+    0x3ff2de9cUL, 0x00000000UL, 0x00000000UL, 0x2655bc98UL, 0x3ff33e58UL,\n+    0x00000000UL, 0x00000000UL, 0xff691fa2UL, 0x3ff3972eUL, 0xe93463bdUL,\n+    0x3feeed87UL, 0x070e10a0UL, 0x3ff3f5b2UL, 0xf4d790a4UL, 0x3ff20c10UL,\n+    0xa04e8ea3UL, 0x3ff4541aUL, 0x386accd3UL, 0x3ff1369eUL, 0x222a66ddUL,\n+    0x3ff4b521UL, 0x22a9777eUL, 0x3ff20817UL, 0x52a04a6eUL, 0x3ff5178fUL,\n+    0xddaa0031UL, 0x3ff22137UL, 0x4447d47cUL, 0x3ff57c01UL, 0x1e9c7f1dUL,\n+    0x3ff29311UL, 0x2ab7f990UL, 0x3fe561b8UL, 0x209c7df1UL, 0x3c87a8c5UL,\n+    0x00000000UL, 0x3ff00000UL, 0x4170bcc6UL, 0x3fdc92d8UL, 0x00000000UL,\n+    0x00000000UL, 0x00000000UL, 0x00000000UL, 0xc7ab4d5aUL, 0x40085e24UL,\n+    0x00000000UL, 0x00000000UL, 0xe93ea75dUL, 0x400b963dUL, 0x00000000UL,\n+    0x00000000UL, 0x94a7f25aUL, 0x400f37e2UL, 0x4b6261cbUL, 0x3ff5f984UL,\n+    0x5a9dd812UL, 0x4011aab0UL, 0x74c30018UL, 0x3ffaf5a5UL, 0x7f2ce8e3UL,\n+    0x4013fe8bUL, 0xfe8e54faUL, 0x3ffd7334UL, 0x670d618dUL, 0x4016a10cUL,\n+    0x4db97058UL, 0x4000e012UL, 0x24df44ddUL, 0x40199c5fUL, 0x697d6eceUL,\n+    0x4003006eUL, 0x83298b82UL, 0x401cfc4dUL, 0x19d490d6UL, 0x40058c19UL,\n+    0x2ae42850UL, 0x3fea4300UL, 0x118e20e6UL, 0xbc7a6db8UL, 0x00000000UL,\n+    0x40000000UL, 0xe33345b8UL, 0xbfd4e526UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x00000000UL, 0x65965966UL, 0x40219659UL, 0x00000000UL,\n+    0x00000000UL, 0x882c10faUL, 0x402664f4UL, 0x00000000UL, 0x00000000UL,\n+    0x83cd3723UL, 0x402c8342UL, 0x00000000UL, 0x40000000UL, 0x55e6c23dUL,\n+    0x403226e3UL, 0x55555555UL, 0x40055555UL, 0x34451939UL, 0x40371c96UL,\n+    0xaaaaaaabUL, 0x400aaaaaUL, 0x0e157de0UL, 0x403d6d3dUL, 0x11111111UL,\n+    0x40111111UL, 0xa738201fUL, 0x4042bbceUL, 0x05b05b06UL, 0x4015b05bUL,\n+    0x452b75e3UL, 0x4047da36UL, 0x1ba1ba1cUL, 0x401ba1baUL, 0x00000000UL,\n+    0x3ff00000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x40000000UL,\n+    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x4f48b8d3UL, 0xbf33eaf9UL, 0x00000000UL, 0x00000000UL,\n+    0x0cf7586fUL, 0x3f20b8eaUL, 0x00000000UL, 0x00000000UL, 0xd0258911UL,\n+    0xbf0abaf3UL, 0x23e49fe9UL, 0xbfab5a8cUL, 0x2d53222eUL, 0x3ef60d15UL,\n+    0x21169451UL, 0x3fa172b2UL, 0xbb254dbcUL, 0xbee1d3b5UL, 0xdbf93b8eUL,\n+    0xbf84c7dbUL, 0x05b4630bUL, 0x3ecd3364UL, 0xee9aada7UL, 0x3f743924UL,\n+    0x794a8297UL, 0xbeb7b7b9UL, 0xe015f797UL, 0xbf5d41f5UL, 0xe41a4a56UL,\n+    0x3ea35dfbUL, 0xe4c2a251UL, 0x3f49a2abUL, 0x5af9e000UL, 0xbfce49ceUL,\n+    0x8c743719UL, 0x3d1eb860UL, 0x00000000UL, 0x00000000UL, 0x1b4863cfUL,\n+    0x3fd78294UL, 0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0xfffffff8UL,\n+    0x535ad890UL, 0xbf2b9320UL, 0x00000000UL, 0x00000000UL, 0x018fdf1fUL,\n+    0x3f16d61dUL, 0x00000000UL, 0x00000000UL, 0x0359f1beUL, 0xbf0139e4UL,\n+    0xa4317c6dUL, 0xbfa67e17UL, 0x82672d0fUL, 0x3eebb405UL, 0x2f1b621eUL,\n+    0x3f9f455bUL, 0x51ccf238UL, 0xbed55317UL, 0xf437b9acUL, 0xbf804beeUL,\n+    0xc791a2b5UL, 0x3ec0e993UL, 0x919a1db2UL, 0x3f7080c2UL, 0x336a5b0eUL,\n+    0xbeaa48a2UL, 0x0a268358UL, 0xbf55a443UL, 0xdfd978e4UL, 0x3e94b61fUL,\n+    0xd7767a58UL, 0x3f431806UL, 0x2aea0000UL, 0xbfc9bbe8UL, 0x7723ea61UL,\n+    0xbd3a2369UL, 0x00000000UL, 0x00000000UL, 0xdf7796ffUL, 0x3fd6e642UL,\n+    0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0xfffffff8UL, 0xb9ff07ceUL,\n+    0xbf231c78UL, 0x00000000UL, 0x00000000UL, 0xa5517182UL, 0x3f0ff0e0UL,\n+    0x00000000UL, 0x00000000UL, 0x790b4cbcUL, 0xbef66191UL, 0x848a46c6UL,\n+    0xbfa21ac0UL, 0xb16435faUL, 0x3ee1d3ecUL, 0x2a1aa832UL, 0x3f9c71eaUL,\n+    0xfdd299efUL, 0xbec9dd1aUL, 0x3f8dbaafUL, 0xbf793363UL, 0x309fc6eaUL,\n+    0x3eb415d6UL, 0xbee60471UL, 0x3f6b83baUL, 0x94a0a697UL, 0xbe9dae11UL,\n+    0x3e5c67b3UL, 0xbf4fd07bUL, 0x9a8f3e3eUL, 0x3e86bd75UL, 0xa4beb7a4UL,\n+    0x3f3d1eb1UL, 0x29cfc000UL, 0xbfc549ceUL, 0xbf159358UL, 0xbd397b33UL,\n+    0x00000000UL, 0x00000000UL, 0x871fee6cUL, 0x3fd666f0UL, 0x00000000UL,\n+    0x3ff00000UL, 0x00000000UL, 0xfffffff8UL, 0x7d98a556UL, 0xbf1a3958UL,\n+    0x00000000UL, 0x00000000UL, 0x9d88dc01UL, 0x3f0704c2UL, 0x00000000UL,\n+    0x00000000UL, 0x73742a2bUL, 0xbeed054aUL, 0x58844587UL, 0xbf9c2a13UL,\n+    0x55688a79UL, 0x3ed7a326UL, 0xee33f1d6UL, 0x3f9a48f4UL, 0xa8dc9888UL,\n+    0xbebf8939UL, 0xaad4b5b8UL, 0xbf72f746UL, 0x9102efa1UL, 0x3ea88f82UL,\n+    0xdabc29cfUL, 0x3f678228UL, 0x9289afb8UL, 0xbe90f456UL, 0x741fb4edUL,\n+    0xbf46f3a3UL, 0xa97f6663UL, 0x3e79b4bfUL, 0xca89ff3fUL, 0x3f36db70UL,\n+    0xa8a2a000UL, 0xbfc0ee13UL, 0x3da24be1UL, 0xbd338b9fUL, 0x00000000UL,\n+    0x00000000UL, 0x11cd6c69UL, 0x3fd601fdUL, 0x00000000UL, 0x3ff00000UL,\n+    0x00000000UL, 0xfffffff8UL, 0x1a154b97UL, 0xbf116b01UL, 0x00000000UL,\n+    0x00000000UL, 0x2d427630UL, 0x3f0147bfUL, 0x00000000UL, 0x00000000UL,\n+    0xb93820c8UL, 0xbee264d4UL, 0xbb6cbb18UL, 0xbf94ab8cUL, 0x888d4d92UL,\n+    0x3ed0568bUL, 0x60730f7cUL, 0x3f98b19bUL, 0xe4b1fb11UL, 0xbeb2f950UL,\n+    0x22cf9f74UL, 0xbf6b21cdUL, 0x4a3ff0a6UL, 0x3e9f499eUL, 0xfd2b83ceUL,\n+    0x3f64aad7UL, 0x637b73afUL, 0xbe83487cUL, 0xe522591aUL, 0xbf3fc092UL,\n+    0xa158e8bcUL, 0x3e6e3aaeUL, 0xe5e82ffaUL, 0x3f329d2fUL, 0xd636a000UL,\n+    0xbfb9477fUL, 0xc2c2d2bcUL, 0xbd135ef9UL, 0x00000000UL, 0x00000000UL,\n+    0xf2fdb123UL, 0x3fd5b566UL, 0x00000000UL, 0x3ff00000UL, 0x00000000UL,\n+    0xfffffff8UL, 0xc41acb64UL, 0xbf05448dUL, 0x00000000UL, 0x00000000UL,\n+    0xdbb03d6fUL, 0x3efb7ad2UL, 0x00000000UL, 0x00000000UL, 0x9e42962dUL,\n+    0xbed5aea5UL, 0x2579f8efUL, 0xbf8b2398UL, 0x288a1ed9UL, 0x3ec81441UL,\n+    0xb0198dc5UL, 0x3f979a3aUL, 0x2fdfe253UL, 0xbea57cd3UL, 0x5766336fUL,\n+    0xbf617caaUL, 0x600944c3UL, 0x3e954ed6UL, 0xa4e0aaf8UL, 0x3f62c646UL,\n+    0x6b8fb29cUL, 0xbe74e3a3UL, 0xdc4c0409UL, 0xbf33f952UL, 0x9bffe365UL,\n+    0x3e6301ecUL, 0xb8869e44UL, 0x3f2fc566UL, 0xe1e04000UL, 0xbfb0cc62UL,\n+    0x016b907fUL, 0xbd119cbcUL, 0x00000000UL, 0x00000000UL, 0xe6b9d8faUL,\n+    0x3fd57fb3UL, 0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0xfffffff8UL,\n+    0x5daf22a6UL, 0xbef429d7UL, 0x00000000UL, 0x00000000UL, 0x06bca545UL,\n+    0x3ef7a27dUL, 0x00000000UL, 0x00000000UL, 0x7211c19aUL, 0xbec41c3eUL,\n+    0x956ed53eUL, 0xbf7ae3f4UL, 0xee750e72UL, 0x3ec3901bUL, 0x91d443f5UL,\n+    0x3f96f713UL, 0x36661e6cUL, 0xbe936e09UL, 0x506f9381UL, 0xbf5122e8UL,\n+    0xcb6dd43fUL, 0x3e9041b9UL, 0x6698b2ffUL, 0x3f61b0c7UL, 0x576bf12bUL,\n+    0xbe625a8aUL, 0xe5a0e9dcUL, 0xbf23499dUL, 0x110384ddUL, 0x3e5b1c2cUL,\n+    0x68d43db6UL, 0x3f2cb899UL, 0x6ecac000UL, 0xbfa0c414UL, 0xcd7dd58cUL,\n+    0x3d13500fUL, 0x00000000UL, 0x00000000UL, 0x85a2c8fbUL, 0x3fd55fe0UL,\n+    0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0xfffffff8UL, 0x00000000UL,\n+    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x2bf70ebeUL, 0x3ef66a8fUL,\n+    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0xd644267fUL, 0x3ec22805UL, 0x16c16c17UL, 0x3f96c16cUL,\n+    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0xc4e09162UL,\n+    0x3e8d6db2UL, 0xbc011567UL, 0x3f61566aUL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x00000000UL, 0x1f79955cUL, 0x3e57da4eUL, 0x9334ef0bUL,\n+    0x3f2bbd77UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x00000000UL, 0x55555555UL, 0x3fd55555UL, 0x00000000UL,\n+    0x3ff00000UL, 0x00000000UL, 0xfffffff8UL, 0x5daf22a6UL, 0x3ef429d7UL,\n+    0x00000000UL, 0x00000000UL, 0x06bca545UL, 0x3ef7a27dUL, 0x00000000UL,\n+    0x00000000UL, 0x7211c19aUL, 0x3ec41c3eUL, 0x956ed53eUL, 0x3f7ae3f4UL,\n+    0xee750e72UL, 0x3ec3901bUL, 0x91d443f5UL, 0x3f96f713UL, 0x36661e6cUL,\n+    0x3e936e09UL, 0x506f9381UL, 0x3f5122e8UL, 0xcb6dd43fUL, 0x3e9041b9UL,\n+    0x6698b2ffUL, 0x3f61b0c7UL, 0x576bf12bUL, 0x3e625a8aUL, 0xe5a0e9dcUL,\n+    0x3f23499dUL, 0x110384ddUL, 0x3e5b1c2cUL, 0x68d43db6UL, 0x3f2cb899UL,\n+    0x6ecac000UL, 0x3fa0c414UL, 0xcd7dd58cUL, 0xbd13500fUL, 0x00000000UL,\n+    0x00000000UL, 0x85a2c8fbUL, 0x3fd55fe0UL, 0x00000000UL, 0x3ff00000UL,\n+    0x00000000UL, 0xfffffff8UL, 0xc41acb64UL, 0x3f05448dUL, 0x00000000UL,\n+    0x00000000UL, 0xdbb03d6fUL, 0x3efb7ad2UL, 0x00000000UL, 0x00000000UL,\n+    0x9e42962dUL, 0x3ed5aea5UL, 0x2579f8efUL, 0x3f8b2398UL, 0x288a1ed9UL,\n+    0x3ec81441UL, 0xb0198dc5UL, 0x3f979a3aUL, 0x2fdfe253UL, 0x3ea57cd3UL,\n+    0x5766336fUL, 0x3f617caaUL, 0x600944c3UL, 0x3e954ed6UL, 0xa4e0aaf8UL,\n+    0x3f62c646UL, 0x6b8fb29cUL, 0x3e74e3a3UL, 0xdc4c0409UL, 0x3f33f952UL,\n+    0x9bffe365UL, 0x3e6301ecUL, 0xb8869e44UL, 0x3f2fc566UL, 0xe1e04000UL,\n+    0x3fb0cc62UL, 0x016b907fUL, 0x3d119cbcUL, 0x00000000UL, 0x00000000UL,\n+    0xe6b9d8faUL, 0x3fd57fb3UL, 0x00000000UL, 0x3ff00000UL, 0x00000000UL,\n+    0xfffffff8UL, 0x1a154b97UL, 0x3f116b01UL, 0x00000000UL, 0x00000000UL,\n+    0x2d427630UL, 0x3f0147bfUL, 0x00000000UL, 0x00000000UL, 0xb93820c8UL,\n+    0x3ee264d4UL, 0xbb6cbb18UL, 0x3f94ab8cUL, 0x888d4d92UL, 0x3ed0568bUL,\n+    0x60730f7cUL, 0x3f98b19bUL, 0xe4b1fb11UL, 0x3eb2f950UL, 0x22cf9f74UL,\n+    0x3f6b21cdUL, 0x4a3ff0a6UL, 0x3e9f499eUL, 0xfd2b83ceUL, 0x3f64aad7UL,\n+    0x637b73afUL, 0x3e83487cUL, 0xe522591aUL, 0x3f3fc092UL, 0xa158e8bcUL,\n+    0x3e6e3aaeUL, 0xe5e82ffaUL, 0x3f329d2fUL, 0xd636a000UL, 0x3fb9477fUL,\n+    0xc2c2d2bcUL, 0x3d135ef9UL, 0x00000000UL, 0x00000000UL, 0xf2fdb123UL,\n+    0x3fd5b566UL, 0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0xfffffff8UL,\n+    0x7d98a556UL, 0x3f1a3958UL, 0x00000000UL, 0x00000000UL, 0x9d88dc01UL,\n+    0x3f0704c2UL, 0x00000000UL, 0x00000000UL, 0x73742a2bUL, 0x3eed054aUL,\n+    0x58844587UL, 0x3f9c2a13UL, 0x55688a79UL, 0x3ed7a326UL, 0xee33f1d6UL,\n+    0x3f9a48f4UL, 0xa8dc9888UL, 0x3ebf8939UL, 0xaad4b5b8UL, 0x3f72f746UL,\n+    0x9102efa1UL, 0x3ea88f82UL, 0xdabc29cfUL, 0x3f678228UL, 0x9289afb8UL,\n+    0x3e90f456UL, 0x741fb4edUL, 0x3f46f3a3UL, 0xa97f6663UL, 0x3e79b4bfUL,\n+    0xca89ff3fUL, 0x3f36db70UL, 0xa8a2a000UL, 0x3fc0ee13UL, 0x3da24be1UL,\n+    0x3d338b9fUL, 0x00000000UL, 0x00000000UL, 0x11cd6c69UL, 0x3fd601fdUL,\n+    0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0xfffffff8UL, 0xb9ff07ceUL,\n+    0x3f231c78UL, 0x00000000UL, 0x00000000UL, 0xa5517182UL, 0x3f0ff0e0UL,\n+    0x00000000UL, 0x00000000UL, 0x790b4cbcUL, 0x3ef66191UL, 0x848a46c6UL,\n+    0x3fa21ac0UL, 0xb16435faUL, 0x3ee1d3ecUL, 0x2a1aa832UL, 0x3f9c71eaUL,\n+    0xfdd299efUL, 0x3ec9dd1aUL, 0x3f8dbaafUL, 0x3f793363UL, 0x309fc6eaUL,\n+    0x3eb415d6UL, 0xbee60471UL, 0x3f6b83baUL, 0x94a0a697UL, 0x3e9dae11UL,\n+    0x3e5c67b3UL, 0x3f4fd07bUL, 0x9a8f3e3eUL, 0x3e86bd75UL, 0xa4beb7a4UL,\n+    0x3f3d1eb1UL, 0x29cfc000UL, 0x3fc549ceUL, 0xbf159358UL, 0x3d397b33UL,\n+    0x00000000UL, 0x00000000UL, 0x871fee6cUL, 0x3fd666f0UL, 0x00000000UL,\n+    0x3ff00000UL, 0x00000000UL, 0xfffffff8UL, 0x535ad890UL, 0x3f2b9320UL,\n+    0x00000000UL, 0x00000000UL, 0x018fdf1fUL, 0x3f16d61dUL, 0x00000000UL,\n+    0x00000000UL, 0x0359f1beUL, 0x3f0139e4UL, 0xa4317c6dUL, 0x3fa67e17UL,\n+    0x82672d0fUL, 0x3eebb405UL, 0x2f1b621eUL, 0x3f9f455bUL, 0x51ccf238UL,\n+    0x3ed55317UL, 0xf437b9acUL, 0x3f804beeUL, 0xc791a2b5UL, 0x3ec0e993UL,\n+    0x919a1db2UL, 0x3f7080c2UL, 0x336a5b0eUL, 0x3eaa48a2UL, 0x0a268358UL,\n+    0x3f55a443UL, 0xdfd978e4UL, 0x3e94b61fUL, 0xd7767a58UL, 0x3f431806UL,\n+    0x2aea0000UL, 0x3fc9bbe8UL, 0x7723ea61UL, 0x3d3a2369UL, 0x00000000UL,\n+    0x00000000UL, 0xdf7796ffUL, 0x3fd6e642UL, 0x00000000UL, 0x3ff00000UL,\n+    0x00000000UL, 0xfffffff8UL, 0x4f48b8d3UL, 0x3f33eaf9UL, 0x00000000UL,\n+    0x00000000UL, 0x0cf7586fUL, 0x3f20b8eaUL, 0x00000000UL, 0x00000000UL,\n+    0xd0258911UL, 0x3f0abaf3UL, 0x23e49fe9UL, 0x3fab5a8cUL, 0x2d53222eUL,\n+    0x3ef60d15UL, 0x21169451UL, 0x3fa172b2UL, 0xbb254dbcUL, 0x3ee1d3b5UL,\n+    0xdbf93b8eUL, 0x3f84c7dbUL, 0x05b4630bUL, 0x3ecd3364UL, 0xee9aada7UL,\n+    0x3f743924UL, 0x794a8297UL, 0x3eb7b7b9UL, 0xe015f797UL, 0x3f5d41f5UL,\n+    0xe41a4a56UL, 0x3ea35dfbUL, 0xe4c2a251UL, 0x3f49a2abUL, 0x5af9e000UL,\n+    0x3fce49ceUL, 0x8c743719UL, 0xbd1eb860UL, 0x00000000UL, 0x00000000UL,\n+    0x1b4863cfUL, 0x3fd78294UL, 0x00000000UL, 0x3ff00000UL, 0x00000000UL,\n+    0xfffffff8UL, 0x65965966UL, 0xc0219659UL, 0x00000000UL, 0x00000000UL,\n+    0x882c10faUL, 0x402664f4UL, 0x00000000UL, 0x00000000UL, 0x83cd3723UL,\n+    0xc02c8342UL, 0x00000000UL, 0xc0000000UL, 0x55e6c23dUL, 0x403226e3UL,\n+    0x55555555UL, 0x40055555UL, 0x34451939UL, 0xc0371c96UL, 0xaaaaaaabUL,\n+    0xc00aaaaaUL, 0x0e157de0UL, 0x403d6d3dUL, 0x11111111UL, 0x40111111UL,\n+    0xa738201fUL, 0xc042bbceUL, 0x05b05b06UL, 0xc015b05bUL, 0x452b75e3UL,\n+    0x4047da36UL, 0x1ba1ba1cUL, 0x401ba1baUL, 0x00000000UL, 0xbff00000UL,\n+    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x40000000UL, 0x00000000UL,\n+    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n+    0xc7ab4d5aUL, 0xc0085e24UL, 0x00000000UL, 0x00000000UL, 0xe93ea75dUL,\n+    0x400b963dUL, 0x00000000UL, 0x00000000UL, 0x94a7f25aUL, 0xc00f37e2UL,\n+    0x4b6261cbUL, 0xbff5f984UL, 0x5a9dd812UL, 0x4011aab0UL, 0x74c30018UL,\n+    0x3ffaf5a5UL, 0x7f2ce8e3UL, 0xc013fe8bUL, 0xfe8e54faUL, 0xbffd7334UL,\n+    0x670d618dUL, 0x4016a10cUL, 0x4db97058UL, 0x4000e012UL, 0x24df44ddUL,\n+    0xc0199c5fUL, 0x697d6eceUL, 0xc003006eUL, 0x83298b82UL, 0x401cfc4dUL,\n+    0x19d490d6UL, 0x40058c19UL, 0x2ae42850UL, 0xbfea4300UL, 0x118e20e6UL,\n+    0x3c7a6db8UL, 0x00000000UL, 0x40000000UL, 0xe33345b8UL, 0xbfd4e526UL,\n+    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x2b2c49d0UL,\n+    0xbff2de9cUL, 0x00000000UL, 0x00000000UL, 0x2655bc98UL, 0x3ff33e58UL,\n+    0x00000000UL, 0x00000000UL, 0xff691fa2UL, 0xbff3972eUL, 0xe93463bdUL,\n+    0xbfeeed87UL, 0x070e10a0UL, 0x3ff3f5b2UL, 0xf4d790a4UL, 0x3ff20c10UL,\n+    0xa04e8ea3UL, 0xbff4541aUL, 0x386accd3UL, 0xbff1369eUL, 0x222a66ddUL,\n+    0x3ff4b521UL, 0x22a9777eUL, 0x3ff20817UL, 0x52a04a6eUL, 0xbff5178fUL,\n+    0xddaa0031UL, 0xbff22137UL, 0x4447d47cUL, 0x3ff57c01UL, 0x1e9c7f1dUL,\n+    0x3ff29311UL, 0x2ab7f990UL, 0xbfe561b8UL, 0x209c7df1UL, 0xbc87a8c5UL,\n+    0x00000000UL, 0x3ff00000UL, 0x4170bcc6UL, 0x3fdc92d8UL, 0x00000000UL,\n+    0x00000000UL, 0x00000000UL, 0x00000000UL, 0xcc03e501UL, 0xbfdff10fUL,\n+    0x00000000UL, 0x00000000UL, 0x44a4e845UL, 0x3fddb63bUL, 0x00000000UL,\n+    0x00000000UL, 0x3768ad9fUL, 0xbfdb72a4UL, 0x3dd01ccaUL, 0xbfe5fdb9UL,\n+    0xa61d2811UL, 0x3fd972b2UL, 0x5645ad0bUL, 0x3fe977f9UL, 0xd013b3abUL,\n+    0xbfd78ca3UL, 0xbf0bf914UL, 0xbfe4f192UL, 0x4d53e730UL, 0x3fd5d060UL,\n+    0x3f8b9000UL, 0x3fe49933UL, 0xe2b82f08UL, 0xbfd4322aUL, 0x5936a835UL,\n+    0xbfe27ae1UL, 0xb1c61c9bUL, 0x3fd2b3fbUL, 0xef478605UL, 0x3fe1659eUL,\n+    0x190834ecUL, 0xbfe11ab7UL, 0xcdb625eaUL, 0x3c8e564bUL, 0x00000000UL,\n+    0x3ff00000UL, 0xb07217e3UL, 0x3fd248f1UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x00000000UL, 0x56f37042UL, 0xbfccfc56UL, 0x00000000UL,\n+    0x00000000UL, 0xaa563951UL, 0x3fc90125UL, 0x00000000UL, 0x00000000UL,\n+    0x3d0e7c5dUL, 0xbfc50533UL, 0x9bed9b2eUL, 0xbfdf0ed9UL, 0x5fe7c47cUL,\n+    0x3fc1f250UL, 0x96c125e5UL, 0x3fe2edd9UL, 0x5a02bbd8UL, 0xbfbe5c71UL,\n+    0x86362c20UL, 0xbfda08b7UL, 0x4b4435edUL, 0x3fb9d342UL, 0x4b494091UL,\n+    0x3fd911bdUL, 0xb56658beUL, 0xbfb5e4c7UL, 0x93a2fd76UL, 0xbfd3c092UL,\n+    0xda271794UL, 0x3fb29910UL, 0x3303df2bUL, 0x3fd189beUL, 0x99fcef32UL,\n+    0xbfda8279UL, 0xb68c1467UL, 0xbc708b2fUL, 0x00000000UL, 0x3ff00000UL,\n+    0x980c4337UL, 0x3fc5f619UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x9314533eUL, 0xbfbb8ec5UL, 0x00000000UL, 0x00000000UL,\n+    0x09aa36d0UL, 0x3fb6d3f4UL, 0x00000000UL, 0x00000000UL, 0xdcb427fdUL,\n+    0xbfb13950UL, 0xd87ab0bbUL, 0xbfd5335eUL, 0xce0ae8a5UL, 0x3fabb382UL,\n+    0x79143126UL, 0x3fddba41UL, 0x5f2b28d4UL, 0xbfa552f1UL, 0x59f21a6dUL,\n+    0xbfd015abUL, 0x22c27d95UL, 0x3fa0e984UL, 0xe19fc6aaUL, 0x3fd0576cUL,\n+    0x8f2c2950UL, 0xbf9a4898UL, 0xc0b3f22cUL, 0xbfc59462UL, 0x1883a4b8UL,\n+    0x3f94b61cUL, 0x3f838640UL, 0x3fc30eb8UL, 0x355c63dcUL, 0xbfd36a08UL,\n+    0x1dce993dUL, 0x3c6d704dUL, 0x00000000UL, 0x3ff00000UL, 0x2b82ab63UL,\n+    0x3fb78e92UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n+    0x5a279ea3UL, 0xbfaa3407UL, 0x00000000UL, 0x00000000UL, 0x432d65faUL,\n+    0x3fa70153UL, 0x00000000UL, 0x00000000UL, 0x891a4602UL, 0xbf9d03efUL,\n+    0xd62ca5f8UL, 0xbfca77d9UL, 0xb35f4628UL, 0x3f97a265UL, 0x433258faUL,\n+    0x3fd8cf51UL, 0xb58fd909UL, 0xbf8f88e3UL, 0x01771ceaUL, 0xbfc2b154UL,\n+    0xf3562f8eUL, 0x3f888f57UL, 0xc028a723UL, 0x3fc7370fUL, 0x20b7f9f0UL,\n+    0xbf80f44cUL, 0x214368e9UL, 0xbfb6dfaaUL, 0x28891863UL, 0x3f79b4b6UL,\n+    0x172dbbf0UL, 0x3fb6cb8eUL, 0xe0553158UL, 0xbfc975f5UL, 0x593fe814UL,\n+    0xbc2ef5d3UL, 0x00000000UL, 0x3ff00000UL, 0x03dec550UL, 0x3fa44203UL,\n+    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x4e435f9bUL,\n+    0xbf953f83UL, 0x00000000UL, 0x00000000UL, 0x3c6e8e46UL, 0x3f9b74eaUL,\n+    0x00000000UL, 0x00000000UL, 0xda5b7511UL, 0xbf85ad63UL, 0xdc230b9bUL,\n+    0xbfb97558UL, 0x26cb3788UL, 0x3f881308UL, 0x76fc4985UL, 0x3fd62ac9UL,\n+    0x77bb08baUL, 0xbf757c85UL, 0xb6247521UL, 0xbfb1381eUL, 0x5922170cUL,\n+    0x3f754e95UL, 0x8746482dUL, 0x3fc27f83UL, 0x11055b30UL, 0xbf64e391UL,\n+    0x3e666320UL, 0xbfa3e609UL, 0x0de9dae3UL, 0x3f6301dfUL, 0x1f1dca06UL,\n+    0x3fafa8aeUL, 0x8c5b2da2UL, 0xbfb936bbUL, 0x4e88f7a5UL, 0xbc587d05UL,\n+    0x00000000UL, 0x3ff00000UL, 0xa8935dd9UL, 0x3f83dde2UL, 0x00000000UL,\n+    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x6dc9c883UL, 0x3fe45f30UL,\n+    0x6dc9c883UL, 0x40245f30UL, 0x00000000UL, 0x43780000UL, 0x00000000UL,\n+    0x43380000UL, 0x54444000UL, 0x3fb921fbUL, 0x54440000UL, 0x3fb921fbUL,\n+    0x67674000UL, 0xbd32e7b9UL, 0x4c4c0000UL, 0x3d468c23UL, 0x3707344aUL,\n+    0x3aa8a2e0UL, 0x03707345UL, 0x3ae98a2eUL, 0x00000000UL, 0x80000000UL,\n+    0x00000000UL, 0x80000000UL, 0x676733afUL, 0x3d32e7b9UL, 0x00000000UL,\n+    0x00000000UL, 0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x7ff00000UL, 0x00000000UL, 0x00000000UL, 0xfffc0000UL,\n+    0xffffffffUL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x43600000UL,\n+    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x3c800000UL, 0x00000000UL,\n+    0x00000000UL, 0x00000000UL, 0x3ca00000UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x3fe00000UL, 0x00000000UL, 0x3fe00000UL, 0x00000000UL,\n+    0x40300000UL, 0x00000000UL, 0x3ff00000UL\n+};\n+\n+void MacroAssembler::fast_tan(XMMRegister xmm0, XMMRegister xmm1, XMMRegister xmm2, XMMRegister xmm3, XMMRegister xmm4, XMMRegister xmm5, XMMRegister xmm6, XMMRegister xmm7, Register eax, Register ecx, Register edx, Register tmp) {\n+\n+  Label L_2TAG_PACKET_0_0_2, L_2TAG_PACKET_1_0_2, L_2TAG_PACKET_2_0_2, L_2TAG_PACKET_3_0_2;\n+  Label L_2TAG_PACKET_4_0_2;\n+\n+  assert_different_registers(tmp, eax, ecx, edx);\n+\n+  address static_const_table_tan = (address)_static_const_table_tan;\n+\n+  subl(rsp, 120);\n+  movl(Address(rsp, 56), tmp);\n+  lea(tmp, ExternalAddress(static_const_table_tan));\n+  movsd(xmm0, Address(rsp, 128));\n+  pextrw(eax, xmm0, 3);\n+  andl(eax, 32767);\n+  subl(eax, 14368);\n+  cmpl(eax, 2216);\n+  jcc(Assembler::above, L_2TAG_PACKET_0_0_2);\n+  movdqu(xmm5, Address(tmp, 5840));\n+  movdqu(xmm6, Address(tmp, 5856));\n+  unpcklpd(xmm0, xmm0);\n+  movdqu(xmm4, Address(tmp, 5712));\n+  andpd(xmm4, xmm0);\n+  movdqu(xmm1, Address(tmp, 5632));\n+  mulpd(xmm1, xmm0);\n+  por(xmm5, xmm4);\n+  addpd(xmm1, xmm5);\n+  movdqu(xmm7, xmm1);\n+  unpckhpd(xmm7, xmm7);\n+  cvttsd2sil(edx, xmm7);\n+  cvttpd2dq(xmm1, xmm1);\n+  cvtdq2pd(xmm1, xmm1);\n+  mulpd(xmm1, xmm6);\n+  movdqu(xmm3, Address(tmp, 5664));\n+  movsd(xmm5, Address(tmp, 5728));\n+  addl(edx, 469248);\n+  movdqu(xmm4, Address(tmp, 5680));\n+  mulpd(xmm3, xmm1);\n+  andl(edx, 31);\n+  mulsd(xmm5, xmm1);\n+  movl(ecx, edx);\n+  mulpd(xmm4, xmm1);\n+  shll(ecx, 1);\n+  subpd(xmm0, xmm3);\n+  mulpd(xmm1, Address(tmp, 5696));\n+  addl(edx, ecx);\n+  shll(ecx, 2);\n+  addl(edx, ecx);\n+  addsd(xmm5, xmm0);\n+  movdqu(xmm2, xmm0);\n+  subpd(xmm0, xmm4);\n+  movsd(xmm6, Address(tmp, 5744));\n+  shll(edx, 4);\n+  lea(eax, Address(tmp, 0));\n+  andpd(xmm5, Address(tmp, 5776));\n+  movdqu(xmm3, xmm0);\n+  addl(eax, edx);\n+  subpd(xmm2, xmm0);\n+  unpckhpd(xmm0, xmm0);\n+  divsd(xmm6, xmm5);\n+  subpd(xmm2, xmm4);\n+  movdqu(xmm7, Address(eax, 16));\n+  subsd(xmm3, xmm5);\n+  mulpd(xmm7, xmm0);\n+  subpd(xmm2, xmm1);\n+  movdqu(xmm1, Address(eax, 48));\n+  mulpd(xmm1, xmm0);\n+  movdqu(xmm4, Address(eax, 96));\n+  mulpd(xmm4, xmm0);\n+  addsd(xmm2, xmm3);\n+  movdqu(xmm3, xmm0);\n+  mulpd(xmm0, xmm0);\n+  addpd(xmm7, Address(eax, 0));\n+  addpd(xmm1, Address(eax, 32));\n+  mulpd(xmm1, xmm0);\n+  addpd(xmm4, Address(eax, 80));\n+  addpd(xmm7, xmm1);\n+  movdqu(xmm1, Address(eax, 112));\n+  mulpd(xmm1, xmm0);\n+  mulpd(xmm0, xmm0);\n+  addpd(xmm4, xmm1);\n+  movdqu(xmm1, Address(eax, 64));\n+  mulpd(xmm1, xmm0);\n+  addpd(xmm7, xmm1);\n+  movdqu(xmm1, xmm3);\n+  mulpd(xmm3, xmm0);\n+  mulsd(xmm0, xmm0);\n+  mulpd(xmm1, Address(eax, 144));\n+  mulpd(xmm4, xmm3);\n+  movdqu(xmm3, xmm1);\n+  addpd(xmm7, xmm4);\n+  movdqu(xmm4, xmm1);\n+  mulsd(xmm0, xmm7);\n+  unpckhpd(xmm7, xmm7);\n+  addsd(xmm0, xmm7);\n+  unpckhpd(xmm1, xmm1);\n+  addsd(xmm3, xmm1);\n+  subsd(xmm4, xmm3);\n+  addsd(xmm1, xmm4);\n+  movdqu(xmm4, xmm2);\n+  movsd(xmm7, Address(eax, 144));\n+  unpckhpd(xmm2, xmm2);\n+  addsd(xmm7, Address(eax, 152));\n+  mulsd(xmm7, xmm2);\n+  addsd(xmm7, Address(eax, 136));\n+  addsd(xmm7, xmm1);\n+  addsd(xmm0, xmm7);\n+  movsd(xmm7, Address(tmp, 5744));\n+  mulsd(xmm4, xmm6);\n+  movsd(xmm2, Address(eax, 168));\n+  andpd(xmm2, xmm6);\n+  mulsd(xmm5, xmm2);\n+  mulsd(xmm6, Address(eax, 160));\n+  subsd(xmm7, xmm5);\n+  subsd(xmm2, Address(eax, 128));\n+  subsd(xmm7, xmm4);\n+  mulsd(xmm7, xmm6);\n+  movdqu(xmm4, xmm3);\n+  subsd(xmm3, xmm2);\n+  addsd(xmm2, xmm3);\n+  subsd(xmm4, xmm2);\n+  addsd(xmm0, xmm4);\n+  subsd(xmm0, xmm7);\n+  addsd(xmm0, xmm3);\n+  movsd(Address(rsp, 0), xmm0);\n+  fld_d(Address(rsp, 0));\n+  jmp(L_2TAG_PACKET_1_0_2);\n+\n+  bind(L_2TAG_PACKET_0_0_2);\n+  jcc(Assembler::greater, L_2TAG_PACKET_2_0_2);\n+  shrl(eax, 4);\n+  cmpl(eax, 268434558);\n+  jcc(Assembler::notEqual, L_2TAG_PACKET_3_0_2);\n+  movdqu(xmm3, xmm0);\n+  mulsd(xmm3, Address(tmp, 5808));\n+\n+  bind(L_2TAG_PACKET_3_0_2);\n+  movsd(xmm3, Address(tmp, 5792));\n+  mulsd(xmm3, xmm0);\n+  addsd(xmm3, xmm0);\n+  mulsd(xmm3, Address(tmp, 5808));\n+  movsd(Address(rsp, 0), xmm3);\n+  fld_d(Address(rsp, 0));\n+  jmp(L_2TAG_PACKET_1_0_2);\n+\n+  bind(L_2TAG_PACKET_2_0_2);\n+  movq(xmm7, Address(tmp, 5712));\n+  andpd(xmm7, xmm0);\n+  xorpd(xmm7, xmm0);\n+  ucomisd(xmm7, Address(tmp, 5760));\n+  jcc(Assembler::equal, L_2TAG_PACKET_4_0_2);\n+  subl(rsp, 32);\n+  movsd(Address(rsp, 0), xmm0);\n+  lea(eax, Address(rsp, 40));\n+  movl(Address(rsp, 8), eax);\n+  movl(eax, 2);\n+  movl(Address(rsp, 12), eax);\n+  call(RuntimeAddress(CAST_FROM_FN_PTR(address, StubRoutines::dlibm_tan_cot_huge())));\n+  addl(rsp, 32);\n+  fld_d(Address(rsp, 8));\n+  jmp(L_2TAG_PACKET_1_0_2);\n+\n+  bind(L_2TAG_PACKET_4_0_2);\n+  movq(Address(rsp, 0), xmm0);\n+  fld_d(Address(rsp, 0));\n+  fsub_d(Address(rsp, 0));\n+\n+  bind(L_2TAG_PACKET_1_0_2);\n+  movl(tmp, Address(rsp, 56));\n+}\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86_32_tan.cpp","additions":1173,"deletions":0,"binary":false,"changes":1173,"status":"added"},{"patch":"@@ -1,267 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#include \"precompiled.hpp\"\n-\n-#include \"macroAssembler_x86.hpp\"\n-\n-#ifdef _LP64\n-\n-ATTRIBUTE_ALIGNED(8) juint _ONE[] = {\n-    0x00000000UL, 0x3ff00000UL\n-};\n-address MacroAssembler::ONE = (address)_ONE;\n-\n-ATTRIBUTE_ALIGNED(16) juint _ONEHALF[] = {\n-    0x00000000UL, 0x3fe00000UL, 0x00000000UL, 0x3fe00000UL\n-};\n-address MacroAssembler::ONEHALF = (address)_ONEHALF;\n-\n-ATTRIBUTE_ALIGNED(8) juint _SIGN_MASK[] = {\n-    0x00000000UL, 0x80000000UL\n-};\n-address MacroAssembler::SIGN_MASK = (address)_SIGN_MASK;\n-\n-ATTRIBUTE_ALIGNED(8) juint _TWO_POW_55[] = {\n-    0x00000000UL, 0x43600000UL\n-};\n-address MacroAssembler::TWO_POW_55 = (address)_TWO_POW_55;\n-\n-ATTRIBUTE_ALIGNED(8) juint _TWO_POW_M55[] = {\n-    0x00000000UL, 0x3c800000UL\n-};\n-address MacroAssembler::TWO_POW_M55 = (address)_TWO_POW_M55;\n-\n-ATTRIBUTE_ALIGNED(16) juint _SHIFTER[] = {\n-    0x00000000UL, 0x43380000UL, 0x00000000UL, 0x43380000UL\n-};\n-address MacroAssembler::SHIFTER = (address)_SHIFTER;\n-\n-ATTRIBUTE_ALIGNED(4) juint _ZERO[] = {\n-    0x00000000UL, 0x00000000UL\n-};\n-address MacroAssembler::ZERO = (address)_ZERO;\n-\n-ATTRIBUTE_ALIGNED(16) juint _SC_1[] = {\n-    0x55555555UL, 0xbfc55555UL, 0x00000000UL, 0xbfe00000UL\n-};\n-address MacroAssembler::SC_1 = (address)_SC_1;\n-\n-ATTRIBUTE_ALIGNED(16) juint _SC_2[] = {\n-    0x11111111UL, 0x3f811111UL, 0x55555555UL, 0x3fa55555UL\n-};\n-address MacroAssembler::SC_2 = (address)_SC_2;\n-\n-ATTRIBUTE_ALIGNED(16) juint _SC_3[] = {\n-    0x1a01a01aUL, 0xbf2a01a0UL, 0x16c16c17UL, 0xbf56c16cUL\n-};\n-address MacroAssembler::SC_3 = (address)_SC_3;\n-\n-ATTRIBUTE_ALIGNED(16) juint _SC_4[] = {\n-    0xa556c734UL, 0x3ec71de3UL, 0x1a01a01aUL, 0x3efa01a0UL\n-};\n-address MacroAssembler::SC_4 = (address)_SC_4;\n-\n-ATTRIBUTE_ALIGNED(8) juint _PI_4[] = {\n-    0x40000000UL, 0x3fe921fbUL, 0x18469899UL, 0x3e64442dUL\n-};\n-address MacroAssembler::PI_4 = (address)_PI_4;\n-\n-ATTRIBUTE_ALIGNED(8) juint _PI32INV[] = {\n-    0x6dc9c883UL, 0x40245f30UL\n-};\n-address MacroAssembler::PI32INV = (address)_PI32INV;\n-\n-ATTRIBUTE_ALIGNED(8) juint _NEG_ZERO[] = {\n-    0x00000000UL, 0x80000000UL\n-};\n-address MacroAssembler::NEG_ZERO = (address)_NEG_ZERO;\n-\n-ATTRIBUTE_ALIGNED(8) juint _P_1[] = {\n-    0x54400000UL, 0x3fb921fbUL\n-};\n-address MacroAssembler::P_1 = (address)_P_1;\n-\n-ATTRIBUTE_ALIGNED(16) juint _P_2[] = {\n-    0x1a600000UL, 0x3d90b461UL, 0x1a600000UL, 0x3d90b461UL\n-};\n-address MacroAssembler::P_2 = (address)_P_2;\n-\n-ATTRIBUTE_ALIGNED(8) juint _P_3[] = {\n-    0x2e037073UL, 0x3b63198aUL\n-};\n-address MacroAssembler::P_3 = (address)_P_3;\n-\n-\n-ATTRIBUTE_ALIGNED(16) juint _PI_INV_TABLE[] = {\n-    0x00000000UL, 0x00000000UL, 0xa2f9836eUL, 0x4e441529UL, 0xfc2757d1UL,\n-    0xf534ddc0UL, 0xdb629599UL, 0x3c439041UL, 0xfe5163abUL, 0xdebbc561UL,\n-    0xb7246e3aUL, 0x424dd2e0UL, 0x06492eeaUL, 0x09d1921cUL, 0xfe1deb1cUL,\n-    0xb129a73eUL, 0xe88235f5UL, 0x2ebb4484UL, 0xe99c7026UL, 0xb45f7e41UL,\n-    0x3991d639UL, 0x835339f4UL, 0x9c845f8bUL, 0xbdf9283bUL, 0x1ff897ffUL,\n-    0xde05980fUL, 0xef2f118bUL, 0x5a0a6d1fUL, 0x6d367ecfUL, 0x27cb09b7UL,\n-    0x4f463f66UL, 0x9e5fea2dUL, 0x7527bac7UL, 0xebe5f17bUL, 0x3d0739f7UL,\n-    0x8a5292eaUL, 0x6bfb5fb1UL, 0x1f8d5d08UL, 0x56033046UL, 0xfc7b6babUL,\n-    0xf0cfbc21UL\n-};\n-address MacroAssembler::PI_INV_TABLE = (address)_PI_INV_TABLE;\n-\n-\n-ATTRIBUTE_ALIGNED(16) juint _Ctable[] = {\n-    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n-    0x00000000UL, 0x00000000UL, 0x3ff00000UL, 0x176d6d31UL, 0xbf73b92eUL,\n-    0xbc29b42cUL, 0x3fb917a6UL, 0xe0000000UL, 0xbc3e2718UL, 0x00000000UL,\n-    0x3ff00000UL, 0x011469fbUL, 0xbf93ad06UL, 0x3c69a60bUL, 0x3fc8f8b8UL,\n-    0xc0000000UL, 0xbc626d19UL, 0x00000000UL, 0x3ff00000UL, 0x939d225aUL,\n-    0xbfa60beaUL, 0x2ed59f06UL, 0x3fd29406UL, 0xa0000000UL, 0xbc75d28dUL,\n-    0x00000000UL, 0x3ff00000UL, 0x866b95cfUL, 0xbfb37ca1UL, 0xa6aea963UL,\n-    0x3fd87de2UL, 0xe0000000UL, 0xbc672cedUL, 0x00000000UL, 0x3ff00000UL,\n-    0x73fa1279UL, 0xbfbe3a68UL, 0x3806f63bUL, 0x3fde2b5dUL, 0x20000000UL,\n-    0x3c5e0d89UL, 0x00000000UL, 0x3ff00000UL, 0x5bc57974UL, 0xbfc59267UL,\n-    0x39ae68c8UL, 0x3fe1c73bUL, 0x20000000UL, 0x3c8b25ddUL, 0x00000000UL,\n-    0x3ff00000UL, 0x53aba2fdUL, 0xbfcd0dfeUL, 0x25091dd6UL, 0x3fe44cf3UL,\n-    0x20000000UL, 0x3c68076aUL, 0x00000000UL, 0x3ff00000UL, 0x99fcef32UL,\n-    0x3fca8279UL, 0x667f3bcdUL, 0x3fe6a09eUL, 0x20000000UL, 0xbc8bdd34UL,\n-    0x00000000UL, 0x3fe00000UL, 0x94247758UL, 0x3fc133ccUL, 0x6b151741UL,\n-    0x3fe8bc80UL, 0x20000000UL, 0xbc82c5e1UL, 0x00000000UL, 0x3fe00000UL,\n-    0x9ae68c87UL, 0x3fac73b3UL, 0x290ea1a3UL, 0x3fea9b66UL, 0xe0000000UL,\n-    0x3c39f630UL, 0x00000000UL, 0x3fe00000UL, 0x7f909c4eUL, 0xbf9d4a2cUL,\n-    0xf180bdb1UL, 0x3fec38b2UL, 0x80000000UL, 0xbc76e0b1UL, 0x00000000UL,\n-    0x3fe00000UL, 0x65455a75UL, 0xbfbe0875UL, 0xcf328d46UL, 0x3fed906bUL,\n-    0x20000000UL, 0x3c7457e6UL, 0x00000000UL, 0x3fe00000UL, 0x76acf82dUL,\n-    0x3fa4a031UL, 0x56c62ddaUL, 0x3fee9f41UL, 0xe0000000UL, 0x3c8760b1UL,\n-    0x00000000UL, 0x3fd00000UL, 0x0e5967d5UL, 0xbfac1d1fUL, 0xcff75cb0UL,\n-    0x3fef6297UL, 0x20000000UL, 0x3c756217UL, 0x00000000UL, 0x3fd00000UL,\n-    0x0f592f50UL, 0xbf9ba165UL, 0xa3d12526UL, 0x3fefd88dUL, 0x40000000UL,\n-    0xbc887df6UL, 0x00000000UL, 0x3fc00000UL, 0x00000000UL, 0x00000000UL,\n-    0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n-    0x00000000UL, 0x0f592f50UL, 0x3f9ba165UL, 0xa3d12526UL, 0x3fefd88dUL,\n-    0x40000000UL, 0xbc887df6UL, 0x00000000UL, 0xbfc00000UL, 0x0e5967d5UL,\n-    0x3fac1d1fUL, 0xcff75cb0UL, 0x3fef6297UL, 0x20000000UL, 0x3c756217UL,\n-    0x00000000UL, 0xbfd00000UL, 0x76acf82dUL, 0xbfa4a031UL, 0x56c62ddaUL,\n-    0x3fee9f41UL, 0xe0000000UL, 0x3c8760b1UL, 0x00000000UL, 0xbfd00000UL,\n-    0x65455a75UL, 0x3fbe0875UL, 0xcf328d46UL, 0x3fed906bUL, 0x20000000UL,\n-    0x3c7457e6UL, 0x00000000UL, 0xbfe00000UL, 0x7f909c4eUL, 0x3f9d4a2cUL,\n-    0xf180bdb1UL, 0x3fec38b2UL, 0x80000000UL, 0xbc76e0b1UL, 0x00000000UL,\n-    0xbfe00000UL, 0x9ae68c87UL, 0xbfac73b3UL, 0x290ea1a3UL, 0x3fea9b66UL,\n-    0xe0000000UL, 0x3c39f630UL, 0x00000000UL, 0xbfe00000UL, 0x94247758UL,\n-    0xbfc133ccUL, 0x6b151741UL, 0x3fe8bc80UL, 0x20000000UL, 0xbc82c5e1UL,\n-    0x00000000UL, 0xbfe00000UL, 0x99fcef32UL, 0xbfca8279UL, 0x667f3bcdUL,\n-    0x3fe6a09eUL, 0x20000000UL, 0xbc8bdd34UL, 0x00000000UL, 0xbfe00000UL,\n-    0x53aba2fdUL, 0x3fcd0dfeUL, 0x25091dd6UL, 0x3fe44cf3UL, 0x20000000UL,\n-    0x3c68076aUL, 0x00000000UL, 0xbff00000UL, 0x5bc57974UL, 0x3fc59267UL,\n-    0x39ae68c8UL, 0x3fe1c73bUL, 0x20000000UL, 0x3c8b25ddUL, 0x00000000UL,\n-    0xbff00000UL, 0x73fa1279UL, 0x3fbe3a68UL, 0x3806f63bUL, 0x3fde2b5dUL,\n-    0x20000000UL, 0x3c5e0d89UL, 0x00000000UL, 0xbff00000UL, 0x866b95cfUL,\n-    0x3fb37ca1UL, 0xa6aea963UL, 0x3fd87de2UL, 0xe0000000UL, 0xbc672cedUL,\n-    0x00000000UL, 0xbff00000UL, 0x939d225aUL, 0x3fa60beaUL, 0x2ed59f06UL,\n-    0x3fd29406UL, 0xa0000000UL, 0xbc75d28dUL, 0x00000000UL, 0xbff00000UL,\n-    0x011469fbUL, 0x3f93ad06UL, 0x3c69a60bUL, 0x3fc8f8b8UL, 0xc0000000UL,\n-    0xbc626d19UL, 0x00000000UL, 0xbff00000UL, 0x176d6d31UL, 0x3f73b92eUL,\n-    0xbc29b42cUL, 0x3fb917a6UL, 0xe0000000UL, 0xbc3e2718UL, 0x00000000UL,\n-    0xbff00000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n-    0x00000000UL, 0x00000000UL, 0x00000000UL, 0xbff00000UL, 0x176d6d31UL,\n-    0x3f73b92eUL, 0xbc29b42cUL, 0xbfb917a6UL, 0xe0000000UL, 0x3c3e2718UL,\n-    0x00000000UL, 0xbff00000UL, 0x011469fbUL, 0x3f93ad06UL, 0x3c69a60bUL,\n-    0xbfc8f8b8UL, 0xc0000000UL, 0x3c626d19UL, 0x00000000UL, 0xbff00000UL,\n-    0x939d225aUL, 0x3fa60beaUL, 0x2ed59f06UL, 0xbfd29406UL, 0xa0000000UL,\n-    0x3c75d28dUL, 0x00000000UL, 0xbff00000UL, 0x866b95cfUL, 0x3fb37ca1UL,\n-    0xa6aea963UL, 0xbfd87de2UL, 0xe0000000UL, 0x3c672cedUL, 0x00000000UL,\n-    0xbff00000UL, 0x73fa1279UL, 0x3fbe3a68UL, 0x3806f63bUL, 0xbfde2b5dUL,\n-    0x20000000UL, 0xbc5e0d89UL, 0x00000000UL, 0xbff00000UL, 0x5bc57974UL,\n-    0x3fc59267UL, 0x39ae68c8UL, 0xbfe1c73bUL, 0x20000000UL, 0xbc8b25ddUL,\n-    0x00000000UL, 0xbff00000UL, 0x53aba2fdUL, 0x3fcd0dfeUL, 0x25091dd6UL,\n-    0xbfe44cf3UL, 0x20000000UL, 0xbc68076aUL, 0x00000000UL, 0xbff00000UL,\n-    0x99fcef32UL, 0xbfca8279UL, 0x667f3bcdUL, 0xbfe6a09eUL, 0x20000000UL,\n-    0x3c8bdd34UL, 0x00000000UL, 0xbfe00000UL, 0x94247758UL, 0xbfc133ccUL,\n-    0x6b151741UL, 0xbfe8bc80UL, 0x20000000UL, 0x3c82c5e1UL, 0x00000000UL,\n-    0xbfe00000UL, 0x9ae68c87UL, 0xbfac73b3UL, 0x290ea1a3UL, 0xbfea9b66UL,\n-    0xe0000000UL, 0xbc39f630UL, 0x00000000UL, 0xbfe00000UL, 0x7f909c4eUL,\n-    0x3f9d4a2cUL, 0xf180bdb1UL, 0xbfec38b2UL, 0x80000000UL, 0x3c76e0b1UL,\n-    0x00000000UL, 0xbfe00000UL, 0x65455a75UL, 0x3fbe0875UL, 0xcf328d46UL,\n-    0xbfed906bUL, 0x20000000UL, 0xbc7457e6UL, 0x00000000UL, 0xbfe00000UL,\n-    0x76acf82dUL, 0xbfa4a031UL, 0x56c62ddaUL, 0xbfee9f41UL, 0xe0000000UL,\n-    0xbc8760b1UL, 0x00000000UL, 0xbfd00000UL, 0x0e5967d5UL, 0x3fac1d1fUL,\n-    0xcff75cb0UL, 0xbfef6297UL, 0x20000000UL, 0xbc756217UL, 0x00000000UL,\n-    0xbfd00000UL, 0x0f592f50UL, 0x3f9ba165UL, 0xa3d12526UL, 0xbfefd88dUL,\n-    0x40000000UL, 0x3c887df6UL, 0x00000000UL, 0xbfc00000UL, 0x00000000UL,\n-    0x00000000UL, 0x00000000UL, 0xbff00000UL, 0x00000000UL, 0x00000000UL,\n-    0x00000000UL, 0x00000000UL, 0x0f592f50UL, 0xbf9ba165UL, 0xa3d12526UL,\n-    0xbfefd88dUL, 0x40000000UL, 0x3c887df6UL, 0x00000000UL, 0x3fc00000UL,\n-    0x0e5967d5UL, 0xbfac1d1fUL, 0xcff75cb0UL, 0xbfef6297UL, 0x20000000UL,\n-    0xbc756217UL, 0x00000000UL, 0x3fd00000UL, 0x76acf82dUL, 0x3fa4a031UL,\n-    0x56c62ddaUL, 0xbfee9f41UL, 0xe0000000UL, 0xbc8760b1UL, 0x00000000UL,\n-    0x3fd00000UL, 0x65455a75UL, 0xbfbe0875UL, 0xcf328d46UL, 0xbfed906bUL,\n-    0x20000000UL, 0xbc7457e6UL, 0x00000000UL, 0x3fe00000UL, 0x7f909c4eUL,\n-    0xbf9d4a2cUL, 0xf180bdb1UL, 0xbfec38b2UL, 0x80000000UL, 0x3c76e0b1UL,\n-    0x00000000UL, 0x3fe00000UL, 0x9ae68c87UL, 0x3fac73b3UL, 0x290ea1a3UL,\n-    0xbfea9b66UL, 0xe0000000UL, 0xbc39f630UL, 0x00000000UL, 0x3fe00000UL,\n-    0x94247758UL, 0x3fc133ccUL, 0x6b151741UL, 0xbfe8bc80UL, 0x20000000UL,\n-    0x3c82c5e1UL, 0x00000000UL, 0x3fe00000UL, 0x99fcef32UL, 0x3fca8279UL,\n-    0x667f3bcdUL, 0xbfe6a09eUL, 0x20000000UL, 0x3c8bdd34UL, 0x00000000UL,\n-    0x3fe00000UL, 0x53aba2fdUL, 0xbfcd0dfeUL, 0x25091dd6UL, 0xbfe44cf3UL,\n-    0x20000000UL, 0xbc68076aUL, 0x00000000UL, 0x3ff00000UL, 0x5bc57974UL,\n-    0xbfc59267UL, 0x39ae68c8UL, 0xbfe1c73bUL, 0x20000000UL, 0xbc8b25ddUL,\n-    0x00000000UL, 0x3ff00000UL, 0x73fa1279UL, 0xbfbe3a68UL, 0x3806f63bUL,\n-    0xbfde2b5dUL, 0x20000000UL, 0xbc5e0d89UL, 0x00000000UL, 0x3ff00000UL,\n-    0x866b95cfUL, 0xbfb37ca1UL, 0xa6aea963UL, 0xbfd87de2UL, 0xe0000000UL,\n-    0x3c672cedUL, 0x00000000UL, 0x3ff00000UL, 0x939d225aUL, 0xbfa60beaUL,\n-    0x2ed59f06UL, 0xbfd29406UL, 0xa0000000UL, 0x3c75d28dUL, 0x00000000UL,\n-    0x3ff00000UL, 0x011469fbUL, 0xbf93ad06UL, 0x3c69a60bUL, 0xbfc8f8b8UL,\n-    0xc0000000UL, 0x3c626d19UL, 0x00000000UL, 0x3ff00000UL, 0x176d6d31UL,\n-    0xbf73b92eUL, 0xbc29b42cUL, 0xbfb917a6UL, 0xe0000000UL, 0x3c3e2718UL,\n-    0x00000000UL, 0x3ff00000UL\n-};\n-address MacroAssembler::Ctable = (address)_Ctable;\n-\n-#else \/\/ !_LP64\n-\n-ATTRIBUTE_ALIGNED(16) juint _ONES[] = {\n-    0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0xbff00000UL\n-};\n-address MacroAssembler::ONES = (address)_ONES;\n-\n-ATTRIBUTE_ALIGNED(16) juint _PI4_INV[] = {\n-    0x6dc9c883UL, 0x3ff45f30UL\n-};\n-address MacroAssembler::PI4_INV = (address)_PI4_INV;\n-\n-ATTRIBUTE_ALIGNED(16) juint _PI4X3[] = {\n-    0x54443000UL, 0xbfe921fbUL, 0x3b39a000UL, 0x3d373dcbUL, 0xe0e68948UL,\n-    0xba845c06UL\n-};\n-address MacroAssembler::PI4X3 = (address)_PI4X3;\n-\n-ATTRIBUTE_ALIGNED(16) juint _PI4X4[] = {\n-    0x54400000UL, 0xbfe921fbUL, 0x1a600000UL, 0xbdc0b461UL, 0x2e000000UL,\n-    0xbb93198aUL, 0x252049c1UL, 0xb96b839aUL\n-};\n-address MacroAssembler::PI4X4 = (address)_PI4X4;\n-\n-ATTRIBUTE_ALIGNED(16) juint _L_2IL0FLOATPACKET_0[] = {\n-    0xffffffffUL, 0x7fffffffUL, 0x00000000UL, 0x00000000UL\n-};\n-address MacroAssembler::L_2IL0FLOATPACKET_0 = (address)_L_2IL0FLOATPACKET_0;\n-\n-#endif \/\/ _LP64\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86_constants.cpp","additions":0,"deletions":267,"binary":false,"changes":267,"status":"deleted"},{"patch":"@@ -1,866 +0,0 @@\n-\/*\n-* Copyright (c) 2016, 2021, Intel Corporation. All rights reserved.\n-* Intel Math Library (LIBM) Source Code\n-*\n-* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-*\n-* This code is free software; you can redistribute it and\/or modify it\n-* under the terms of the GNU General Public License version 2 only, as\n-* published by the Free Software Foundation.\n-*\n-* This code is distributed in the hope that it will be useful, but WITHOUT\n-* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-* version 2 for more details (a copy is included in the LICENSE file that\n-* accompanied this code).\n-*\n-* You should have received a copy of the GNU General Public License version\n-* 2 along with this work; if not, write to the Free Software Foundation,\n-* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-*\n-* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-* or visit www.oracle.com if you need additional information or have any\n-* questions.\n-*\n-*\/\n-\n-#include \"precompiled.hpp\"\n-#include \"asm\/assembler.hpp\"\n-#include \"asm\/assembler.inline.hpp\"\n-#include \"macroAssembler_x86.hpp\"\n-#include \"runtime\/stubRoutines.hpp\"\n-#include \"utilities\/globalDefinitions.hpp\"\n-\n-\/******************************************************************************\/\n-\/\/                     ALGORITHM DESCRIPTION - COS()\n-\/\/                     ---------------------\n-\/\/\n-\/\/     1. RANGE REDUCTION\n-\/\/\n-\/\/     We perform an initial range reduction from X to r with\n-\/\/\n-\/\/          X =~= N * pi\/32 + r\n-\/\/\n-\/\/     so that |r| <= pi\/64 + epsilon. We restrict inputs to those\n-\/\/     where |N| <= 932560. Beyond this, the range reduction is\n-\/\/     insufficiently accurate. For extremely small inputs,\n-\/\/     denormalization can occur internally, impacting performance.\n-\/\/     This means that the main path is actually only taken for\n-\/\/     2^-252 <= |X| < 90112.\n-\/\/\n-\/\/     To avoid branches, we perform the range reduction to full\n-\/\/     accuracy each time.\n-\/\/\n-\/\/          X - N * (P_1 + P_2 + P_3)\n-\/\/\n-\/\/     where P_1 and P_2 are 32-bit numbers (so multiplication by N\n-\/\/     is exact) and P_3 is a 53-bit number. Together, these\n-\/\/     approximate pi well enough for all cases in the restricted\n-\/\/     range.\n-\/\/\n-\/\/     The main reduction sequence is:\n-\/\/\n-\/\/             y = 32\/pi * x\n-\/\/             N = integer(y)\n-\/\/     (computed by adding and subtracting off SHIFTER)\n-\/\/\n-\/\/             m_1 = N * P_1\n-\/\/             m_2 = N * P_2\n-\/\/             r_1 = x - m_1\n-\/\/             r = r_1 - m_2\n-\/\/     (this r can be used for most of the calculation)\n-\/\/\n-\/\/             c_1 = r_1 - r\n-\/\/             m_3 = N * P_3\n-\/\/             c_2 = c_1 - m_2\n-\/\/             c = c_2 - m_3\n-\/\/\n-\/\/     2. MAIN ALGORITHM\n-\/\/\n-\/\/     The algorithm uses a table lookup based on B = M * pi \/ 32\n-\/\/     where M = N mod 64. The stored values are:\n-\/\/       sigma             closest power of 2 to cos(B)\n-\/\/       C_hl              53-bit cos(B) - sigma\n-\/\/       S_hi + S_lo       2 * 53-bit sin(B)\n-\/\/\n-\/\/     The computation is organized as follows:\n-\/\/\n-\/\/          sin(B + r + c) = [sin(B) + sigma * r] +\n-\/\/                           r * (cos(B) - sigma) +\n-\/\/                           sin(B) * [cos(r + c) - 1] +\n-\/\/                           cos(B) * [sin(r + c) - r]\n-\/\/\n-\/\/     which is approximately:\n-\/\/\n-\/\/          [S_hi + sigma * r] +\n-\/\/          C_hl * r +\n-\/\/          S_lo + S_hi * [(cos(r) - 1) - r * c] +\n-\/\/          (C_hl + sigma) * [(sin(r) - r) + c]\n-\/\/\n-\/\/     and this is what is actually computed. We separate this sum\n-\/\/     into four parts:\n-\/\/\n-\/\/          hi + med + pols + corr\n-\/\/\n-\/\/     where\n-\/\/\n-\/\/          hi       = S_hi + sigma r\n-\/\/          med      = C_hl * r\n-\/\/          pols     = S_hi * (cos(r) - 1) + (C_hl + sigma) * (sin(r) - r)\n-\/\/          corr     = S_lo + c * ((C_hl + sigma) - S_hi * r)\n-\/\/\n-\/\/     3. POLYNOMIAL\n-\/\/\n-\/\/     The polynomial S_hi * (cos(r) - 1) + (C_hl + sigma) *\n-\/\/     (sin(r) - r) can be rearranged freely, since it is quite\n-\/\/     small, so we exploit parallelism to the fullest.\n-\/\/\n-\/\/          psc4       =   SC_4 * r_1\n-\/\/          msc4       =   psc4 * r\n-\/\/          r2         =   r * r\n-\/\/          msc2       =   SC_2 * r2\n-\/\/          r4         =   r2 * r2\n-\/\/          psc3       =   SC_3 + msc4\n-\/\/          psc1       =   SC_1 + msc2\n-\/\/          msc3       =   r4 * psc3\n-\/\/          sincospols =   psc1 + msc3\n-\/\/          pols       =   sincospols *\n-\/\/                         <S_hi * r^2 | (C_hl + sigma) * r^3>\n-\/\/\n-\/\/     4. CORRECTION TERM\n-\/\/\n-\/\/     This is where the \"c\" component of the range reduction is\n-\/\/     taken into account; recall that just \"r\" is used for most of\n-\/\/     the calculation.\n-\/\/\n-\/\/          -c   = m_3 - c_2\n-\/\/          -d   = S_hi * r - (C_hl + sigma)\n-\/\/          corr = -c * -d + S_lo\n-\/\/\n-\/\/     5. COMPENSATED SUMMATIONS\n-\/\/\n-\/\/     The two successive compensated summations add up the high\n-\/\/     and medium parts, leaving just the low parts to add up at\n-\/\/     the end.\n-\/\/\n-\/\/          rs        =  sigma * r\n-\/\/          res_int   =  S_hi + rs\n-\/\/          k_0       =  S_hi - res_int\n-\/\/          k_2       =  k_0 + rs\n-\/\/          med       =  C_hl * r\n-\/\/          res_hi    =  res_int + med\n-\/\/          k_1       =  res_int - res_hi\n-\/\/          k_3       =  k_1 + med\n-\/\/\n-\/\/     6. FINAL SUMMATION\n-\/\/\n-\/\/     We now add up all the small parts:\n-\/\/\n-\/\/          res_lo = pols(hi) + pols(lo) + corr + k_1 + k_3\n-\/\/\n-\/\/     Now the overall result is just:\n-\/\/\n-\/\/          res_hi + res_lo\n-\/\/\n-\/\/     7. SMALL ARGUMENTS\n-\/\/\n-\/\/     Inputs with |X| < 2^-252 are treated specially as\n-\/\/     1 - |x|.\n-\/\/\n-\/\/ Special cases:\n-\/\/  cos(NaN) = quiet NaN, and raise invalid exception\n-\/\/  cos(INF) = NaN and raise invalid exception\n-\/\/  cos(0) = 1\n-\/\/\n-\/******************************************************************************\/\n-\n-#ifdef _LP64\n-\/\/ The 64 bit code is at most SSE2 compliant\n-void MacroAssembler::fast_cos(XMMRegister xmm0, XMMRegister xmm1, XMMRegister xmm2, XMMRegister xmm3,\n-                              XMMRegister xmm4, XMMRegister xmm5, XMMRegister xmm6, XMMRegister xmm7,\n-                              Register eax, Register ecx, Register edx, Register r8,\n-                              Register  r9, Register r10, Register r11, Register tmp) {\n-  Label L_2TAG_PACKET_0_0_1, L_2TAG_PACKET_1_0_1, L_2TAG_PACKET_2_0_1, L_2TAG_PACKET_3_0_1;\n-  Label L_2TAG_PACKET_4_0_1, L_2TAG_PACKET_5_0_1, L_2TAG_PACKET_6_0_1, L_2TAG_PACKET_7_0_1;\n-  Label L_2TAG_PACKET_8_0_1, L_2TAG_PACKET_9_0_1, L_2TAG_PACKET_10_0_1, L_2TAG_PACKET_11_0_1;\n-  Label L_2TAG_PACKET_12_0_1, L_2TAG_PACKET_13_0_1, B1_2, B1_4, start;\n-\n-  assert_different_registers(eax, ecx, edx, r8, r9, r10, r11, tmp);\n-\n-  bind(start);\n-  push(rbx);\n-  subq(rsp, 16);\n-  movsd(Address(rsp, 8), xmm0);\n-\n-  bind(B1_2);\n-  movl(eax, Address(rsp, 12));\n-  movq(xmm1, ExternalAddress(PI32INV), tmp \/*rscratch*\/);    \/\/0x6dc9c883UL, 0x40245f30UL\n-  andl(eax, 2147418112);\n-  subl(eax, 808452096);\n-  cmpl(eax, 281346048);\n-  jcc(Assembler::above, L_2TAG_PACKET_0_0_1);\n-  mulsd(xmm1, xmm0);\n-  movdqu(xmm5, ExternalAddress(ONEHALF), tmp \/*rscratch*\/);    \/\/0x00000000UL, 0x3fe00000UL, 0x00000000UL, 0x3fe00000UL\n-  movq(xmm4, ExternalAddress(SIGN_MASK), tmp \/*rscratch*\/);    \/\/0x00000000UL, 0x80000000UL\n-  pand(xmm4, xmm0);\n-  por(xmm5, xmm4);\n-  addpd(xmm1, xmm5);\n-  cvttsd2sil(edx, xmm1);\n-  cvtsi2sdl(xmm1, edx);\n-  movdqu(xmm2, ExternalAddress(P_2), tmp \/*rscratch*\/);    \/\/0x1a600000UL, 0x3d90b461UL, 0x1a600000UL, 0x3d90b461UL\n-  movq(xmm3, ExternalAddress(P_1), tmp \/*rscratch*\/);    \/\/0x54400000UL, 0x3fb921fbUL\n-  mulsd(xmm3, xmm1);\n-  unpcklpd(xmm1, xmm1);\n-  addq(rdx, 1865232);\n-  movdqu(xmm4, xmm0);\n-  andq(rdx, 63);\n-  movdqu(xmm5, ExternalAddress(SC_4), tmp \/*rscratch*\/);    \/\/0xa556c734UL, 0x3ec71de3UL, 0x1a01a01aUL, 0x3efa01a0UL\n-  lea(rax, ExternalAddress(Ctable));\n-  shlq(rdx, 5);\n-  addq(rax, rdx);\n-  mulpd(xmm2, xmm1);\n-  subsd(xmm0, xmm3);\n-  mulsd(xmm1, ExternalAddress(P_3), tmp \/*rscratch*\/);    \/\/0x2e037073UL, 0x3b63198aUL\n-  subsd(xmm4, xmm3);\n-  movq(xmm7, Address(rax, 8));\n-  unpcklpd(xmm0, xmm0);\n-  movdqu(xmm3, xmm4);\n-  subsd(xmm4, xmm2);\n-  mulpd(xmm5, xmm0);\n-  subpd(xmm0, xmm2);\n-  movdqu(xmm6, ExternalAddress(SC_2), tmp \/*rscratch*\/);    \/\/0x11111111UL, 0x3f811111UL, 0x55555555UL, 0x3fa55555UL\n-  mulsd(xmm7, xmm4);\n-  subsd(xmm3, xmm4);\n-  mulpd(xmm5, xmm0);\n-  mulpd(xmm0, xmm0);\n-  subsd(xmm3, xmm2);\n-  movdqu(xmm2, Address(rax, 0));\n-  subsd(xmm1, xmm3);\n-  movq(xmm3, Address(rax, 24));\n-  addsd(xmm2, xmm3);\n-  subsd(xmm7, xmm2);\n-  mulsd(xmm2, xmm4);\n-  mulpd(xmm6, xmm0);\n-  mulsd(xmm3, xmm4);\n-  mulpd(xmm2, xmm0);\n-  mulpd(xmm0, xmm0);\n-  addpd(xmm5, ExternalAddress(SC_3), tmp \/*rscratch*\/);    \/\/0x1a01a01aUL, 0xbf2a01a0UL, 0x16c16c17UL, 0xbf56c16cUL\n-  mulsd(xmm4, Address(rax, 0));\n-  addpd(xmm6, ExternalAddress(SC_1), tmp \/*rscratch*\/);    \/\/0x55555555UL, 0xbfc55555UL, 0x00000000UL, 0xbfe00000UL\n-  mulpd(xmm5, xmm0);\n-  movdqu(xmm0, xmm3);\n-  addsd(xmm3, Address(rax, 8));\n-  mulpd(xmm1, xmm7);\n-  movdqu(xmm7, xmm4);\n-  addsd(xmm4, xmm3);\n-  addpd(xmm6, xmm5);\n-  movq(xmm5, Address(rax, 8));\n-  subsd(xmm5, xmm3);\n-  subsd(xmm3, xmm4);\n-  addsd(xmm1, Address(rax, 16));\n-  mulpd(xmm6, xmm2);\n-  addsd(xmm0, xmm5);\n-  addsd(xmm3, xmm7);\n-  addsd(xmm0, xmm1);\n-  addsd(xmm0, xmm3);\n-  addsd(xmm0, xmm6);\n-  unpckhpd(xmm6, xmm6);\n-  addsd(xmm0, xmm6);\n-  addsd(xmm0, xmm4);\n-  jmp(B1_4);\n-\n-  bind(L_2TAG_PACKET_0_0_1);\n-  jcc(Assembler::greater, L_2TAG_PACKET_1_0_1);\n-  pextrw(eax, xmm0, 3);\n-  andl(eax, 32767);\n-  pinsrw(xmm0, eax, 3);\n-  movq(xmm1, ExternalAddress(ONE), tmp \/*rscratch*\/); \/\/ 0x00000000UL, 0x3ff00000UL\n-  subsd(xmm1, xmm0);\n-  movdqu(xmm0, xmm1);\n-  jmp(B1_4);\n-\n-  bind(L_2TAG_PACKET_1_0_1);\n-  pextrw(eax, xmm0, 3);\n-  andl(eax, 32752);\n-  cmpl(eax, 32752);\n-  jcc(Assembler::equal, L_2TAG_PACKET_2_0_1);\n-  pextrw(ecx, xmm0, 3);\n-  andl(ecx, 32752);\n-  subl(ecx, 16224);\n-  shrl(ecx, 7);\n-  andl(ecx, 65532);\n-  lea(r11, ExternalAddress(PI_INV_TABLE));\n-  addq(rcx, r11);\n-  movdq(rax, xmm0);\n-  movl(r10, Address(rcx, 20));\n-  movl(r8, Address(rcx, 24));\n-  movl(edx, eax);\n-  shrq(rax, 21);\n-  orl(eax, INT_MIN);\n-  shrl(eax, 11);\n-  movl(r9, r10);\n-  imulq(r10, rdx);\n-  imulq(r9, rax);\n-  imulq(r8, rax);\n-  movl(rsi, Address(rcx, 16));\n-  movl(rdi, Address(rcx, 12));\n-  movl(r11, r10);\n-  shrq(r10, 32);\n-  addq(r9, r10);\n-  addq(r11, r8);\n-  movl(r8, r11);\n-  shrq(r11, 32);\n-  addq(r9, r11);\n-  movl(r10, rsi);\n-  imulq(rsi, rdx);\n-  imulq(r10, rax);\n-  movl(r11, rdi);\n-  imulq(rdi, rdx);\n-  movl(rbx, rsi);\n-  shrq(rsi, 32);\n-  addq(r9, rbx);\n-  movl(rbx, r9);\n-  shrq(r9, 32);\n-  addq(r10, rsi);\n-  addq(r10, r9);\n-  shlq(rbx, 32);\n-  orq(r8, rbx);\n-  imulq(r11, rax);\n-  movl(r9, Address(rcx, 8));\n-  movl(rsi, Address(rcx, 4));\n-  movl(rbx, rdi);\n-  shrq(rdi, 32);\n-  addq(r10, rbx);\n-  movl(rbx, r10);\n-  shrq(r10, 32);\n-  addq(r11, rdi);\n-  addq(r11, r10);\n-  movq(rdi, r9);\n-  imulq(r9, rdx);\n-  imulq(rdi, rax);\n-  movl(r10, r9);\n-  shrq(r9, 32);\n-  addq(r11, r10);\n-  movl(r10, r11);\n-  shrq(r11, 32);\n-  addq(rdi, r9);\n-  addq(rdi, r11);\n-  movq(r9, rsi);\n-  imulq(rsi, rdx);\n-  imulq(r9, rax);\n-  shlq(r10, 32);\n-  orq(r10, rbx);\n-  movl(eax, Address(rcx, 0));\n-  movl(r11, rsi);\n-  shrq(rsi, 32);\n-  addq(rdi, r11);\n-  movl(r11, rdi);\n-  shrq(rdi, 32);\n-  addq(r9, rsi);\n-  addq(r9, rdi);\n-  imulq(rdx, rax);\n-  pextrw(rbx, xmm0, 3);\n-  lea(rdi, ExternalAddress(PI_INV_TABLE));\n-  subq(rcx, rdi);\n-  addl(ecx, ecx);\n-  addl(ecx, ecx);\n-  addl(ecx, ecx);\n-  addl(ecx, 19);\n-  movl(rsi, 32768);\n-  andl(rsi, rbx);\n-  shrl(rbx, 4);\n-  andl(rbx, 2047);\n-  subl(rbx, 1023);\n-  subl(ecx, rbx);\n-  addq(r9, rdx);\n-  movl(edx, ecx);\n-  addl(edx, 32);\n-  cmpl(ecx, 1);\n-  jcc(Assembler::less, L_2TAG_PACKET_3_0_1);\n-  negl(ecx);\n-  addl(ecx, 29);\n-  shll(r9);\n-  movl(rdi, r9);\n-  andl(r9, 536870911);\n-  testl(r9, 268435456);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_4_0_1);\n-  shrl(r9);\n-  movl(rbx, 0);\n-  shlq(r9, 32);\n-  orq(r9, r11);\n-\n-  bind(L_2TAG_PACKET_5_0_1);\n-\n-  bind(L_2TAG_PACKET_6_0_1);\n-  cmpq(r9, 0);\n-  jcc(Assembler::equal, L_2TAG_PACKET_7_0_1);\n-\n-  bind(L_2TAG_PACKET_8_0_1);\n-  bsrq(r11, r9);\n-  movl(ecx, 29);\n-  subl(ecx, r11);\n-  jcc(Assembler::lessEqual, L_2TAG_PACKET_9_0_1);\n-  shlq(r9);\n-  movq(rax, r10);\n-  shlq(r10);\n-  addl(edx, ecx);\n-  negl(ecx);\n-  addl(ecx, 64);\n-  shrq(rax);\n-  shrq(r8);\n-  orq(r9, rax);\n-  orq(r10, r8);\n-\n-  bind(L_2TAG_PACKET_10_0_1);\n-  cvtsi2sdq(xmm0, r9);\n-  shrq(r10, 1);\n-  cvtsi2sdq(xmm3, r10);\n-  xorpd(xmm4, xmm4);\n-  shll(edx, 4);\n-  negl(edx);\n-  addl(edx, 16368);\n-  orl(edx, rsi);\n-  xorl(edx, rbx);\n-  pinsrw(xmm4, edx, 3);\n-  movq(xmm2, ExternalAddress(PI_4),     tmp \/*rscratch*\/); \/\/0x40000000UL, 0x3fe921fbUL, 0x18469899UL, 0x3e64442dUL\n-  movq(xmm6, ExternalAddress(PI_4 + 8), tmp \/*rscratch*\/); \/\/0x3fe921fbUL, 0x18469899UL, 0x3e64442dUL\n-  xorpd(xmm5, xmm5);\n-  subl(edx, 1008);\n-  pinsrw(xmm5, edx, 3);\n-  mulsd(xmm0, xmm4);\n-  shll(rsi, 16);\n-  sarl(rsi, 31);\n-  mulsd(xmm3, xmm5);\n-  movdqu(xmm1, xmm0);\n-  mulsd(xmm0, xmm2);\n-  shrl(rdi, 29);\n-  addsd(xmm1, xmm3);\n-  mulsd(xmm3, xmm2);\n-  addl(rdi, rsi);\n-  xorl(rdi, rsi);\n-  mulsd(xmm6, xmm1);\n-  movl(eax, rdi);\n-  addsd(xmm6, xmm3);\n-  movdqu(xmm2, xmm0);\n-  addsd(xmm0, xmm6);\n-  subsd(xmm2, xmm0);\n-  addsd(xmm6, xmm2);\n-\n-  bind(L_2TAG_PACKET_11_0_1);\n-  movq(xmm1, ExternalAddress(PI32INV), tmp \/*rscratch*\/);   \/\/0x6dc9c883UL, 0x40245f30UL\n-  mulsd(xmm1, xmm0);\n-  movq(xmm5, ExternalAddress(ONEHALF), tmp \/*rscratch*\/);   \/\/0x00000000UL, 0x3fe00000UL, 0x00000000UL, 0x3fe00000UL\n-  movq(xmm4, ExternalAddress(SIGN_MASK), tmp \/*rscratch*\/); \/\/0x00000000UL, 0x80000000UL\n-  pand(xmm4, xmm0);\n-  por(xmm5, xmm4);\n-  addpd(xmm1, xmm5);\n-  cvttsd2siq(rdx, xmm1);\n-  cvtsi2sdq(xmm1, rdx);\n-  movq(xmm3, ExternalAddress(P_1), tmp \/*rscratch*\/);    \/\/0x54400000UL, 0x3fb921fbUL\n-  movdqu(xmm2, ExternalAddress(P_2), tmp \/*rscratch*\/);    \/\/0x1a600000UL, 0x3d90b461UL, 0x1a600000UL, 0x3d90b461UL\n-  mulsd(xmm3, xmm1);\n-  unpcklpd(xmm1, xmm1);\n-  shll(eax, 3);\n-  addl(edx, 1865232);\n-  movdqu(xmm4, xmm0);\n-  addl(edx, eax);\n-  andl(edx, 63);\n-  movdqu(xmm5, ExternalAddress(SC_4), tmp \/*rscratch*\/);    \/\/0xa556c734UL, 0x3ec71de3UL, 0x1a01a01aUL, 0x3efa01a0UL\n-  lea(rax, ExternalAddress(Ctable));\n-  shll(edx, 5);\n-  addq(rax, rdx);\n-  mulpd(xmm2, xmm1);\n-  subsd(xmm0, xmm3);\n-  mulsd(xmm1, ExternalAddress(P_3), tmp \/*rscratch*\/);    \/\/0x2e037073UL, 0x3b63198aUL\n-  subsd(xmm4, xmm3);\n-  movq(xmm7, Address(rax, 8));\n-  unpcklpd(xmm0, xmm0);\n-  movdqu(xmm3, xmm4);\n-  subsd(xmm4, xmm2);\n-  mulpd(xmm5, xmm0);\n-  subpd(xmm0, xmm2);\n-  mulsd(xmm7, xmm4);\n-  subsd(xmm3, xmm4);\n-  mulpd(xmm5, xmm0);\n-  mulpd(xmm0, xmm0);\n-  subsd(xmm3, xmm2);\n-  movdqu(xmm2, Address(rax, 0));\n-  subsd(xmm1, xmm3);\n-  movq(xmm3, Address(rax, 24));\n-  addsd(xmm2, xmm3);\n-  subsd(xmm7, xmm2);\n-  subsd(xmm1, xmm6);\n-  movdqu(xmm6, ExternalAddress(SC_2), tmp \/*rscratch*\/);    \/\/0x11111111UL, 0x3f811111UL, 0x55555555UL, 0x3fa55555UL\n-  mulsd(xmm2, xmm4);\n-  mulpd(xmm6, xmm0);\n-  mulsd(xmm3, xmm4);\n-  mulpd(xmm2, xmm0);\n-  mulpd(xmm0, xmm0);\n-  addpd(xmm5, ExternalAddress(SC_3), tmp \/*rscratch*\/);    \/\/0x1a01a01aUL, 0xbf2a01a0UL, 0x16c16c17UL, 0xbf56c16cUL\n-  mulsd(xmm4, Address(rax, 0));\n-  addpd(xmm6, ExternalAddress(SC_1), tmp \/*rscratch*\/);    \/\/0x55555555UL, 0xbfc55555UL, 0x00000000UL, 0xbfe00000UL\n-  mulpd(xmm5, xmm0);\n-  movdqu(xmm0, xmm3);\n-  addsd(xmm3, Address(rax, 8));\n-  mulpd(xmm1, xmm7);\n-  movdqu(xmm7, xmm4);\n-  addsd(xmm4, xmm3);\n-  addpd(xmm6, xmm5);\n-  movq(xmm5, Address(rax, 8));\n-  subsd(xmm5, xmm3);\n-  subsd(xmm3, xmm4);\n-  addsd(xmm1, Address(rax, 16));\n-  mulpd(xmm6, xmm2);\n-  addsd(xmm5, xmm0);\n-  addsd(xmm3, xmm7);\n-  addsd(xmm1, xmm5);\n-  addsd(xmm1, xmm3);\n-  addsd(xmm1, xmm6);\n-  unpckhpd(xmm6, xmm6);\n-  movdqu(xmm0, xmm4);\n-  addsd(xmm1, xmm6);\n-  addsd(xmm0, xmm1);\n-  jmp(B1_4);\n-\n-  bind(L_2TAG_PACKET_7_0_1);\n-  addl(edx, 64);\n-  movq(r9, r10);\n-  movq(r10, r8);\n-  movl(r8, 0);\n-  cmpq(r9, 0);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_8_0_1);\n-  addl(edx, 64);\n-  movq(r9, r10);\n-  movq(r10, r8);\n-  cmpq(r9, 0);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_8_0_1);\n-  xorpd(xmm0, xmm0);\n-  xorpd(xmm6, xmm6);\n-  jmp(L_2TAG_PACKET_11_0_1);\n-\n-  bind(L_2TAG_PACKET_9_0_1);\n-  jcc(Assembler::equal, L_2TAG_PACKET_10_0_1);\n-  negl(ecx);\n-  shrq(r10);\n-  movq(rax, r9);\n-  shrq(r9);\n-  subl(edx, ecx);\n-  negl(ecx);\n-  addl(ecx, 64);\n-  shlq(rax);\n-  orq(r10, rax);\n-  jmp(L_2TAG_PACKET_10_0_1);\n-  bind(L_2TAG_PACKET_3_0_1);\n-  negl(ecx);\n-  shlq(r9, 32);\n-  orq(r9, r11);\n-  shlq(r9);\n-  movq(rdi, r9);\n-  testl(r9, INT_MIN);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_12_0_1);\n-  shrl(r9);\n-  movl(rbx, 0);\n-  shrq(rdi, 3);\n-  jmp(L_2TAG_PACKET_6_0_1);\n-\n-  bind(L_2TAG_PACKET_4_0_1);\n-  shrl(r9);\n-  movl(rbx, 536870912);\n-  shrl(rbx);\n-  shlq(r9, 32);\n-  orq(r9, r11);\n-  shlq(rbx, 32);\n-  addl(rdi, 536870912);\n-  movl(rcx, 0);\n-  movl(r11, 0);\n-  subq(rcx, r8);\n-  sbbq(r11, r10);\n-  sbbq(rbx, r9);\n-  movq(r8, rcx);\n-  movq(r10, r11);\n-  movq(r9, rbx);\n-  movl(rbx, 32768);\n-  jmp(L_2TAG_PACKET_5_0_1);\n-\n-  bind(L_2TAG_PACKET_12_0_1);\n-  shrl(r9);\n-  mov64(rbx, 0x100000000);\n-  shrq(rbx);\n-  movl(rcx, 0);\n-  movl(r11, 0);\n-  subq(rcx, r8);\n-  sbbq(r11, r10);\n-  sbbq(rbx, r9);\n-  movq(r8, rcx);\n-  movq(r10, r11);\n-  movq(r9, rbx);\n-  movl(rbx, 32768);\n-  shrq(rdi, 3);\n-  addl(rdi, 536870912);\n-  jmp(L_2TAG_PACKET_6_0_1);\n-\n-  bind(L_2TAG_PACKET_2_0_1);\n-  movsd(xmm0, Address(rsp, 8));\n-  mulsd(xmm0, ExternalAddress(NEG_ZERO), tmp \/*rscratch*\/);    \/\/0x00000000UL, 0x80000000UL\n-  movq(Address(rsp, 0), xmm0);\n-\n-  bind(L_2TAG_PACKET_13_0_1);\n-\n-  bind(B1_4);\n-  addq(rsp, 16);\n-  pop(rbx);\n-}\n-#else\n-\/\/ The 32 bit code is at most SSE2 compliant\n-\n-ATTRIBUTE_ALIGNED(16) juint _static_const_table_cos[] =\n-{\n-    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n-    0x00000000UL, 0x00000000UL, 0x3ff00000UL, 0x176d6d31UL, 0xbf73b92eUL,\n-    0xbc29b42cUL, 0x3fb917a6UL, 0xe0000000UL, 0xbc3e2718UL, 0x00000000UL,\n-    0x3ff00000UL, 0x011469fbUL, 0xbf93ad06UL, 0x3c69a60bUL, 0x3fc8f8b8UL,\n-    0xc0000000UL, 0xbc626d19UL, 0x00000000UL, 0x3ff00000UL, 0x939d225aUL,\n-    0xbfa60beaUL, 0x2ed59f06UL, 0x3fd29406UL, 0xa0000000UL, 0xbc75d28dUL,\n-    0x00000000UL, 0x3ff00000UL, 0x866b95cfUL, 0xbfb37ca1UL, 0xa6aea963UL,\n-    0x3fd87de2UL, 0xe0000000UL, 0xbc672cedUL, 0x00000000UL, 0x3ff00000UL,\n-    0x73fa1279UL, 0xbfbe3a68UL, 0x3806f63bUL, 0x3fde2b5dUL, 0x20000000UL,\n-    0x3c5e0d89UL, 0x00000000UL, 0x3ff00000UL, 0x5bc57974UL, 0xbfc59267UL,\n-    0x39ae68c8UL, 0x3fe1c73bUL, 0x20000000UL, 0x3c8b25ddUL, 0x00000000UL,\n-    0x3ff00000UL, 0x53aba2fdUL, 0xbfcd0dfeUL, 0x25091dd6UL, 0x3fe44cf3UL,\n-    0x20000000UL, 0x3c68076aUL, 0x00000000UL, 0x3ff00000UL, 0x99fcef32UL,\n-    0x3fca8279UL, 0x667f3bcdUL, 0x3fe6a09eUL, 0x20000000UL, 0xbc8bdd34UL,\n-    0x00000000UL, 0x3fe00000UL, 0x94247758UL, 0x3fc133ccUL, 0x6b151741UL,\n-    0x3fe8bc80UL, 0x20000000UL, 0xbc82c5e1UL, 0x00000000UL, 0x3fe00000UL,\n-    0x9ae68c87UL, 0x3fac73b3UL, 0x290ea1a3UL, 0x3fea9b66UL, 0xe0000000UL,\n-    0x3c39f630UL, 0x00000000UL, 0x3fe00000UL, 0x7f909c4eUL, 0xbf9d4a2cUL,\n-    0xf180bdb1UL, 0x3fec38b2UL, 0x80000000UL, 0xbc76e0b1UL, 0x00000000UL,\n-    0x3fe00000UL, 0x65455a75UL, 0xbfbe0875UL, 0xcf328d46UL, 0x3fed906bUL,\n-    0x20000000UL, 0x3c7457e6UL, 0x00000000UL, 0x3fe00000UL, 0x76acf82dUL,\n-    0x3fa4a031UL, 0x56c62ddaUL, 0x3fee9f41UL, 0xe0000000UL, 0x3c8760b1UL,\n-    0x00000000UL, 0x3fd00000UL, 0x0e5967d5UL, 0xbfac1d1fUL, 0xcff75cb0UL,\n-    0x3fef6297UL, 0x20000000UL, 0x3c756217UL, 0x00000000UL, 0x3fd00000UL,\n-    0x0f592f50UL, 0xbf9ba165UL, 0xa3d12526UL, 0x3fefd88dUL, 0x40000000UL,\n-    0xbc887df6UL, 0x00000000UL, 0x3fc00000UL, 0x00000000UL, 0x00000000UL,\n-    0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n-    0x00000000UL, 0x0f592f50UL, 0x3f9ba165UL, 0xa3d12526UL, 0x3fefd88dUL,\n-    0x40000000UL, 0xbc887df6UL, 0x00000000UL, 0xbfc00000UL, 0x0e5967d5UL,\n-    0x3fac1d1fUL, 0xcff75cb0UL, 0x3fef6297UL, 0x20000000UL, 0x3c756217UL,\n-    0x00000000UL, 0xbfd00000UL, 0x76acf82dUL, 0xbfa4a031UL, 0x56c62ddaUL,\n-    0x3fee9f41UL, 0xe0000000UL, 0x3c8760b1UL, 0x00000000UL, 0xbfd00000UL,\n-    0x65455a75UL, 0x3fbe0875UL, 0xcf328d46UL, 0x3fed906bUL, 0x20000000UL,\n-    0x3c7457e6UL, 0x00000000UL, 0xbfe00000UL, 0x7f909c4eUL, 0x3f9d4a2cUL,\n-    0xf180bdb1UL, 0x3fec38b2UL, 0x80000000UL, 0xbc76e0b1UL, 0x00000000UL,\n-    0xbfe00000UL, 0x9ae68c87UL, 0xbfac73b3UL, 0x290ea1a3UL, 0x3fea9b66UL,\n-    0xe0000000UL, 0x3c39f630UL, 0x00000000UL, 0xbfe00000UL, 0x94247758UL,\n-    0xbfc133ccUL, 0x6b151741UL, 0x3fe8bc80UL, 0x20000000UL, 0xbc82c5e1UL,\n-    0x00000000UL, 0xbfe00000UL, 0x99fcef32UL, 0xbfca8279UL, 0x667f3bcdUL,\n-    0x3fe6a09eUL, 0x20000000UL, 0xbc8bdd34UL, 0x00000000UL, 0xbfe00000UL,\n-    0x53aba2fdUL, 0x3fcd0dfeUL, 0x25091dd6UL, 0x3fe44cf3UL, 0x20000000UL,\n-    0x3c68076aUL, 0x00000000UL, 0xbff00000UL, 0x5bc57974UL, 0x3fc59267UL,\n-    0x39ae68c8UL, 0x3fe1c73bUL, 0x20000000UL, 0x3c8b25ddUL, 0x00000000UL,\n-    0xbff00000UL, 0x73fa1279UL, 0x3fbe3a68UL, 0x3806f63bUL, 0x3fde2b5dUL,\n-    0x20000000UL, 0x3c5e0d89UL, 0x00000000UL, 0xbff00000UL, 0x866b95cfUL,\n-    0x3fb37ca1UL, 0xa6aea963UL, 0x3fd87de2UL, 0xe0000000UL, 0xbc672cedUL,\n-    0x00000000UL, 0xbff00000UL, 0x939d225aUL, 0x3fa60beaUL, 0x2ed59f06UL,\n-    0x3fd29406UL, 0xa0000000UL, 0xbc75d28dUL, 0x00000000UL, 0xbff00000UL,\n-    0x011469fbUL, 0x3f93ad06UL, 0x3c69a60bUL, 0x3fc8f8b8UL, 0xc0000000UL,\n-    0xbc626d19UL, 0x00000000UL, 0xbff00000UL, 0x176d6d31UL, 0x3f73b92eUL,\n-    0xbc29b42cUL, 0x3fb917a6UL, 0xe0000000UL, 0xbc3e2718UL, 0x00000000UL,\n-    0xbff00000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n-    0x00000000UL, 0x00000000UL, 0x00000000UL, 0xbff00000UL, 0x176d6d31UL,\n-    0x3f73b92eUL, 0xbc29b42cUL, 0xbfb917a6UL, 0xe0000000UL, 0x3c3e2718UL,\n-    0x00000000UL, 0xbff00000UL, 0x011469fbUL, 0x3f93ad06UL, 0x3c69a60bUL,\n-    0xbfc8f8b8UL, 0xc0000000UL, 0x3c626d19UL, 0x00000000UL, 0xbff00000UL,\n-    0x939d225aUL, 0x3fa60beaUL, 0x2ed59f06UL, 0xbfd29406UL, 0xa0000000UL,\n-    0x3c75d28dUL, 0x00000000UL, 0xbff00000UL, 0x866b95cfUL, 0x3fb37ca1UL,\n-    0xa6aea963UL, 0xbfd87de2UL, 0xe0000000UL, 0x3c672cedUL, 0x00000000UL,\n-    0xbff00000UL, 0x73fa1279UL, 0x3fbe3a68UL, 0x3806f63bUL, 0xbfde2b5dUL,\n-    0x20000000UL, 0xbc5e0d89UL, 0x00000000UL, 0xbff00000UL, 0x5bc57974UL,\n-    0x3fc59267UL, 0x39ae68c8UL, 0xbfe1c73bUL, 0x20000000UL, 0xbc8b25ddUL,\n-    0x00000000UL, 0xbff00000UL, 0x53aba2fdUL, 0x3fcd0dfeUL, 0x25091dd6UL,\n-    0xbfe44cf3UL, 0x20000000UL, 0xbc68076aUL, 0x00000000UL, 0xbff00000UL,\n-    0x99fcef32UL, 0xbfca8279UL, 0x667f3bcdUL, 0xbfe6a09eUL, 0x20000000UL,\n-    0x3c8bdd34UL, 0x00000000UL, 0xbfe00000UL, 0x94247758UL, 0xbfc133ccUL,\n-    0x6b151741UL, 0xbfe8bc80UL, 0x20000000UL, 0x3c82c5e1UL, 0x00000000UL,\n-    0xbfe00000UL, 0x9ae68c87UL, 0xbfac73b3UL, 0x290ea1a3UL, 0xbfea9b66UL,\n-    0xe0000000UL, 0xbc39f630UL, 0x00000000UL, 0xbfe00000UL, 0x7f909c4eUL,\n-    0x3f9d4a2cUL, 0xf180bdb1UL, 0xbfec38b2UL, 0x80000000UL, 0x3c76e0b1UL,\n-    0x00000000UL, 0xbfe00000UL, 0x65455a75UL, 0x3fbe0875UL, 0xcf328d46UL,\n-    0xbfed906bUL, 0x20000000UL, 0xbc7457e6UL, 0x00000000UL, 0xbfe00000UL,\n-    0x76acf82dUL, 0xbfa4a031UL, 0x56c62ddaUL, 0xbfee9f41UL, 0xe0000000UL,\n-    0xbc8760b1UL, 0x00000000UL, 0xbfd00000UL, 0x0e5967d5UL, 0x3fac1d1fUL,\n-    0xcff75cb0UL, 0xbfef6297UL, 0x20000000UL, 0xbc756217UL, 0x00000000UL,\n-    0xbfd00000UL, 0x0f592f50UL, 0x3f9ba165UL, 0xa3d12526UL, 0xbfefd88dUL,\n-    0x40000000UL, 0x3c887df6UL, 0x00000000UL, 0xbfc00000UL, 0x00000000UL,\n-    0x00000000UL, 0x00000000UL, 0xbff00000UL, 0x00000000UL, 0x00000000UL,\n-    0x00000000UL, 0x00000000UL, 0x0f592f50UL, 0xbf9ba165UL, 0xa3d12526UL,\n-    0xbfefd88dUL, 0x40000000UL, 0x3c887df6UL, 0x00000000UL, 0x3fc00000UL,\n-    0x0e5967d5UL, 0xbfac1d1fUL, 0xcff75cb0UL, 0xbfef6297UL, 0x20000000UL,\n-    0xbc756217UL, 0x00000000UL, 0x3fd00000UL, 0x76acf82dUL, 0x3fa4a031UL,\n-    0x56c62ddaUL, 0xbfee9f41UL, 0xe0000000UL, 0xbc8760b1UL, 0x00000000UL,\n-    0x3fd00000UL, 0x65455a75UL, 0xbfbe0875UL, 0xcf328d46UL, 0xbfed906bUL,\n-    0x20000000UL, 0xbc7457e6UL, 0x00000000UL, 0x3fe00000UL, 0x7f909c4eUL,\n-    0xbf9d4a2cUL, 0xf180bdb1UL, 0xbfec38b2UL, 0x80000000UL, 0x3c76e0b1UL,\n-    0x00000000UL, 0x3fe00000UL, 0x9ae68c87UL, 0x3fac73b3UL, 0x290ea1a3UL,\n-    0xbfea9b66UL, 0xe0000000UL, 0xbc39f630UL, 0x00000000UL, 0x3fe00000UL,\n-    0x94247758UL, 0x3fc133ccUL, 0x6b151741UL, 0xbfe8bc80UL, 0x20000000UL,\n-    0x3c82c5e1UL, 0x00000000UL, 0x3fe00000UL, 0x99fcef32UL, 0x3fca8279UL,\n-    0x667f3bcdUL, 0xbfe6a09eUL, 0x20000000UL, 0x3c8bdd34UL, 0x00000000UL,\n-    0x3fe00000UL, 0x53aba2fdUL, 0xbfcd0dfeUL, 0x25091dd6UL, 0xbfe44cf3UL,\n-    0x20000000UL, 0xbc68076aUL, 0x00000000UL, 0x3ff00000UL, 0x5bc57974UL,\n-    0xbfc59267UL, 0x39ae68c8UL, 0xbfe1c73bUL, 0x20000000UL, 0xbc8b25ddUL,\n-    0x00000000UL, 0x3ff00000UL, 0x73fa1279UL, 0xbfbe3a68UL, 0x3806f63bUL,\n-    0xbfde2b5dUL, 0x20000000UL, 0xbc5e0d89UL, 0x00000000UL, 0x3ff00000UL,\n-    0x866b95cfUL, 0xbfb37ca1UL, 0xa6aea963UL, 0xbfd87de2UL, 0xe0000000UL,\n-    0x3c672cedUL, 0x00000000UL, 0x3ff00000UL, 0x939d225aUL, 0xbfa60beaUL,\n-    0x2ed59f06UL, 0xbfd29406UL, 0xa0000000UL, 0x3c75d28dUL, 0x00000000UL,\n-    0x3ff00000UL, 0x011469fbUL, 0xbf93ad06UL, 0x3c69a60bUL, 0xbfc8f8b8UL,\n-    0xc0000000UL, 0x3c626d19UL, 0x00000000UL, 0x3ff00000UL, 0x176d6d31UL,\n-    0xbf73b92eUL, 0xbc29b42cUL, 0xbfb917a6UL, 0xe0000000UL, 0x3c3e2718UL,\n-    0x00000000UL, 0x3ff00000UL, 0x55555555UL, 0xbfc55555UL, 0x00000000UL,\n-    0xbfe00000UL, 0x11111111UL, 0x3f811111UL, 0x55555555UL, 0x3fa55555UL,\n-    0x1a01a01aUL, 0xbf2a01a0UL, 0x16c16c17UL, 0xbf56c16cUL, 0xa556c734UL,\n-    0x3ec71de3UL, 0x1a01a01aUL, 0x3efa01a0UL, 0x1a600000UL, 0x3d90b461UL,\n-    0x1a600000UL, 0x3d90b461UL, 0x54400000UL, 0x3fb921fbUL, 0x00000000UL,\n-    0x00000000UL, 0x2e037073UL, 0x3b63198aUL, 0x00000000UL, 0x00000000UL,\n-    0x6dc9c883UL, 0x40245f30UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n-    0x43380000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x3ff00000UL,\n-    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x80000000UL, 0x00000000UL,\n-    0x00000000UL, 0x00000000UL, 0x80000000UL, 0x00000000UL, 0x00000000UL,\n-    0x00000000UL, 0x3fe00000UL, 0x00000000UL, 0x3fe00000UL\n-};\n-\/\/registers,\n-\/\/ input: (rbp + 8)\n-\/\/ scratch: xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7\n-\/\/          eax, ecx, edx, ebx (tmp)\n-\n-\/\/ Code generated by Intel C compiler for LIBM library\n-\n-void MacroAssembler::fast_cos(XMMRegister xmm0, XMMRegister xmm1, XMMRegister xmm2, XMMRegister xmm3,\n-                              XMMRegister xmm4, XMMRegister xmm5, XMMRegister xmm6, XMMRegister xmm7,\n-                              Register eax, Register ecx, Register edx, Register tmp) {\n-  Label L_2TAG_PACKET_0_0_2, L_2TAG_PACKET_1_0_2, L_2TAG_PACKET_2_0_2, L_2TAG_PACKET_3_0_2;\n-  Label start;\n-\n-  assert_different_registers(tmp, eax, ecx, edx);\n-\n-  address static_const_table_cos = (address)_static_const_table_cos;\n-\n-  bind(start);\n-  subl(rsp, 120);\n-  movl(Address(rsp, 56), tmp);\n-  lea(tmp, ExternalAddress(static_const_table_cos));\n-  movsd(xmm0, Address(rsp, 128));\n-  pextrw(eax, xmm0, 3);\n-  andl(eax, 32767);\n-  subl(eax, 12336);\n-  cmpl(eax, 4293);\n-  jcc(Assembler::above, L_2TAG_PACKET_0_0_2);\n-  movsd(xmm1, Address(tmp, 2160));\n-  mulsd(xmm1, xmm0);\n-  movdqu(xmm5, Address(tmp, 2240));\n-  movsd(xmm4, Address(tmp, 2224));\n-  pand(xmm4, xmm0);\n-  por(xmm5, xmm4);\n-  movsd(xmm3, Address(tmp, 2128));\n-  movdqu(xmm2, Address(tmp, 2112));\n-  addpd(xmm1, xmm5);\n-  cvttsd2sil(edx, xmm1);\n-  cvtsi2sdl(xmm1, edx);\n-  mulsd(xmm3, xmm1);\n-  unpcklpd(xmm1, xmm1);\n-  addl(edx, 1865232);\n-  movdqu(xmm4, xmm0);\n-  andl(edx, 63);\n-  movdqu(xmm5, Address(tmp, 2096));\n-  lea(eax, Address(tmp, 0));\n-  shll(edx, 5);\n-  addl(eax, edx);\n-  mulpd(xmm2, xmm1);\n-  subsd(xmm0, xmm3);\n-  mulsd(xmm1, Address(tmp, 2144));\n-  subsd(xmm4, xmm3);\n-  movsd(xmm7, Address(eax, 8));\n-  unpcklpd(xmm0, xmm0);\n-  movapd(xmm3, xmm4);\n-  subsd(xmm4, xmm2);\n-  mulpd(xmm5, xmm0);\n-  subpd(xmm0, xmm2);\n-  movdqu(xmm6, Address(tmp, 2064));\n-  mulsd(xmm7, xmm4);\n-  subsd(xmm3, xmm4);\n-  mulpd(xmm5, xmm0);\n-  mulpd(xmm0, xmm0);\n-  subsd(xmm3, xmm2);\n-  movdqu(xmm2, Address(eax, 0));\n-  subsd(xmm1, xmm3);\n-  movsd(xmm3, Address(eax, 24));\n-  addsd(xmm2, xmm3);\n-  subsd(xmm7, xmm2);\n-  mulsd(xmm2, xmm4);\n-  mulpd(xmm6, xmm0);\n-  mulsd(xmm3, xmm4);\n-  mulpd(xmm2, xmm0);\n-  mulpd(xmm0, xmm0);\n-  addpd(xmm5, Address(tmp, 2080));\n-  mulsd(xmm4, Address(eax, 0));\n-  addpd(xmm6, Address(tmp, 2048));\n-  mulpd(xmm5, xmm0);\n-  movapd(xmm0, xmm3);\n-  addsd(xmm3, Address(eax, 8));\n-  mulpd(xmm1, xmm7);\n-  movapd(xmm7, xmm4);\n-  addsd(xmm4, xmm3);\n-  addpd(xmm6, xmm5);\n-  movsd(xmm5, Address(eax, 8));\n-  subsd(xmm5, xmm3);\n-  subsd(xmm3, xmm4);\n-  addsd(xmm1, Address(eax, 16));\n-  mulpd(xmm6, xmm2);\n-  addsd(xmm5, xmm0);\n-  addsd(xmm3, xmm7);\n-  addsd(xmm1, xmm5);\n-  addsd(xmm1, xmm3);\n-  addsd(xmm1, xmm6);\n-  unpckhpd(xmm6, xmm6);\n-  addsd(xmm1, xmm6);\n-  addsd(xmm4, xmm1);\n-  movsd(Address(rsp, 0), xmm4);\n-  fld_d(Address(rsp, 0));\n-  jmp(L_2TAG_PACKET_1_0_2);\n-\n-  bind(L_2TAG_PACKET_0_0_2);\n-  jcc(Assembler::greater, L_2TAG_PACKET_2_0_2);\n-  pextrw(eax, xmm0, 3);\n-  andl(eax, 32767);\n-  pinsrw(xmm0, eax, 3);\n-  movsd(xmm1, Address(tmp, 2192));\n-  subsd(xmm1, xmm0);\n-  movsd(Address(rsp, 0), xmm1);\n-  fld_d(Address(rsp, 0));\n-  jmp(L_2TAG_PACKET_1_0_2);\n-\n-  bind(L_2TAG_PACKET_2_0_2);\n-  movl(eax, Address(rsp, 132));\n-  andl(eax, 2146435072);\n-  cmpl(eax, 2146435072);\n-  jcc(Assembler::equal, L_2TAG_PACKET_3_0_2);\n-  subl(rsp, 32);\n-  movsd(Address(rsp, 0), xmm0);\n-  lea(eax, Address(rsp, 40));\n-  movl(Address(rsp, 8), eax);\n-  movl(eax, 1);\n-  movl(Address(rsp, 12), eax);\n-  call(RuntimeAddress(CAST_FROM_FN_PTR(address, StubRoutines::dlibm_sin_cos_huge())));\n-  addl(rsp, 32);\n-  fld_d(Address(rsp, 8));\n-  jmp(L_2TAG_PACKET_1_0_2);\n-\n-  bind(L_2TAG_PACKET_3_0_2);\n-  fld_d(Address(rsp, 128));\n-  fmul_d(Address(tmp, 2208));\n-\n-  bind(L_2TAG_PACKET_1_0_2);\n-  movl(tmp, Address(rsp, 56));\n-}\n-#endif\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86_cos.cpp","additions":0,"deletions":866,"binary":false,"changes":866,"status":"deleted"},{"patch":"@@ -1,654 +0,0 @@\n-\/*\n-* Copyright (c) 2016, 2021, Intel Corporation. All rights reserved.\n-* Copyright (C) 2021 THL A29 Limited, a Tencent company. All rights reserved.\n-* Intel Math Library (LIBM) Source Code\n-*\n-* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-*\n-* This code is free software; you can redistribute it and\/or modify it\n-* under the terms of the GNU General Public License version 2 only, as\n-* published by the Free Software Foundation.\n-*\n-* This code is distributed in the hope that it will be useful, but WITHOUT\n-* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-* version 2 for more details (a copy is included in the LICENSE file that\n-* accompanied this code).\n-*\n-* You should have received a copy of the GNU General Public License version\n-* 2 along with this work; if not, write to the Free Software Foundation,\n-* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-*\n-* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-* or visit www.oracle.com if you need additional information or have any\n-* questions.\n-*\n-*\/\n-\n-#include \"precompiled.hpp\"\n-#include \"asm\/assembler.hpp\"\n-#include \"asm\/assembler.inline.hpp\"\n-#include \"macroAssembler_x86.hpp\"\n-#include \"runtime\/stubRoutines.hpp\"\n-#include \"utilities\/globalDefinitions.hpp\"\n-\n-\/******************************************************************************\/\n-\/\/                     ALGORITHM DESCRIPTION - EXP()\n-\/\/                     ---------------------\n-\/\/\n-\/\/ Description:\n-\/\/  Let K = 64 (table size).\n-\/\/        x    x\/log(2)     n\n-\/\/       e  = 2          = 2 * T[j] * (1 + P(y))\n-\/\/  where\n-\/\/       x = m*log(2)\/K + y,    y in [-log(2)\/K..log(2)\/K]\n-\/\/       m = n*K + j,           m,n,j - signed integer, j in [-K\/2..K\/2]\n-\/\/                  j\/K\n-\/\/       values of 2   are tabulated as T[j] = T_hi[j] ( 1 + T_lo[j]).\n-\/\/\n-\/\/       P(y) is a minimax polynomial approximation of exp(x)-1\n-\/\/       on small interval [-log(2)\/K..log(2)\/K] (were calculated by Maple V).\n-\/\/\n-\/\/  To avoid problems with arithmetic overflow and underflow,\n-\/\/            n                        n1  n2\n-\/\/  value of 2  is safely computed as 2 * 2 where n1 in [-BIAS\/2..BIAS\/2]\n-\/\/  where BIAS is a value of exponent bias.\n-\/\/\n-\/\/ Special cases:\n-\/\/  exp(NaN) = NaN\n-\/\/  exp(+INF) = +INF\n-\/\/  exp(-INF) = 0\n-\/\/  exp(x) = 1 for subnormals\n-\/\/  for finite argument, only exp(0)=1 is exact\n-\/\/  For IEEE double\n-\/\/    if x >  709.782712893383973096 then exp(x) overflow\n-\/\/    if x < -745.133219101941108420 then exp(x) underflow\n-\/\/\n-\/******************************************************************************\/\n-\n-#ifdef _LP64\n-\/\/ The 64 bit code is at most SSE2 compliant\n-ATTRIBUTE_ALIGNED(16) juint _cv[] =\n-{\n-    0x652b82feUL, 0x40571547UL, 0x652b82feUL, 0x40571547UL, 0xfefa0000UL,\n-    0x3f862e42UL, 0xfefa0000UL, 0x3f862e42UL, 0xbc9e3b3aUL, 0x3d1cf79aUL,\n-    0xbc9e3b3aUL, 0x3d1cf79aUL, 0xfffffffeUL, 0x3fdfffffUL, 0xfffffffeUL,\n-    0x3fdfffffUL, 0xe3289860UL, 0x3f56c15cUL, 0x555b9e25UL, 0x3fa55555UL,\n-    0xc090cf0fUL, 0x3f811115UL, 0x55548ba1UL, 0x3fc55555UL\n-};\n-\n-ATTRIBUTE_ALIGNED(16) juint _mmask[] =\n-{\n-    0xffffffc0UL, 0x00000000UL, 0xffffffc0UL, 0x00000000UL\n-};\n-\n-ATTRIBUTE_ALIGNED(16) juint _bias[] =\n-{\n-    0x0000ffc0UL, 0x00000000UL, 0x0000ffc0UL, 0x00000000UL\n-};\n-\n-ATTRIBUTE_ALIGNED(16) juint _Tbl_addr[] =\n-{\n-    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x0e03754dUL,\n-    0x3cad7bbfUL, 0x3e778060UL, 0x00002c9aUL, 0x3567f613UL, 0x3c8cd252UL,\n-    0xd3158574UL, 0x000059b0UL, 0x61e6c861UL, 0x3c60f74eUL, 0x18759bc8UL,\n-    0x00008745UL, 0x5d837b6cUL, 0x3c979aa6UL, 0x6cf9890fUL, 0x0000b558UL,\n-    0x702f9cd1UL, 0x3c3ebe3dUL, 0x32d3d1a2UL, 0x0000e3ecUL, 0x1e63bcd8UL,\n-    0x3ca3516eUL, 0xd0125b50UL, 0x00011301UL, 0x26f0387bUL, 0x3ca4c554UL,\n-    0xaea92ddfUL, 0x0001429aUL, 0x62523fb6UL, 0x3ca95153UL, 0x3c7d517aUL,\n-    0x000172b8UL, 0x3f1353bfUL, 0x3c8b898cUL, 0xeb6fcb75UL, 0x0001a35bUL,\n-    0x3e3a2f5fUL, 0x3c9aecf7UL, 0x3168b9aaUL, 0x0001d487UL, 0x44a6c38dUL,\n-    0x3c8a6f41UL, 0x88628cd6UL, 0x0002063bUL, 0xe3a8a894UL, 0x3c968efdUL,\n-    0x6e756238UL, 0x0002387aUL, 0x981fe7f2UL, 0x3c80472bUL, 0x65e27cddUL,\n-    0x00026b45UL, 0x6d09ab31UL, 0x3c82f7e1UL, 0xf51fdee1UL, 0x00029e9dUL,\n-    0x720c0ab3UL, 0x3c8b3782UL, 0xa6e4030bUL, 0x0002d285UL, 0x4db0abb6UL,\n-    0x3c834d75UL, 0x0a31b715UL, 0x000306feUL, 0x5dd3f84aUL, 0x3c8fdd39UL,\n-    0xb26416ffUL, 0x00033c08UL, 0xcc187d29UL, 0x3ca12f8cUL, 0x373aa9caUL,\n-    0x000371a7UL, 0x738b5e8bUL, 0x3ca7d229UL, 0x34e59ff6UL, 0x0003a7dbUL,\n-    0xa72a4c6dUL, 0x3c859f48UL, 0x4c123422UL, 0x0003dea6UL, 0x259d9205UL,\n-    0x3ca8b846UL, 0x21f72e29UL, 0x0004160aUL, 0x60c2ac12UL, 0x3c4363edUL,\n-    0x6061892dUL, 0x00044e08UL, 0xdaa10379UL, 0x3c6ecce1UL, 0xb5c13cd0UL,\n-    0x000486a2UL, 0xbb7aafb0UL, 0x3c7690ceUL, 0xd5362a27UL, 0x0004bfdaUL,\n-    0x9b282a09UL, 0x3ca083ccUL, 0x769d2ca6UL, 0x0004f9b2UL, 0xc1aae707UL,\n-    0x3ca509b0UL, 0x569d4f81UL, 0x0005342bUL, 0x18fdd78eUL, 0x3c933505UL,\n-    0x36b527daUL, 0x00056f47UL, 0xe21c5409UL, 0x3c9063e1UL, 0xdd485429UL,\n-    0x0005ab07UL, 0x2b64c035UL, 0x3c9432e6UL, 0x15ad2148UL, 0x0005e76fUL,\n-    0x99f08c0aUL, 0x3ca01284UL, 0xb03a5584UL, 0x0006247eUL, 0x0073dc06UL,\n-    0x3c99f087UL, 0x82552224UL, 0x00066238UL, 0x0da05571UL, 0x3c998d4dUL,\n-    0x667f3bccUL, 0x0006a09eUL, 0x86ce4786UL, 0x3ca52bb9UL, 0x3c651a2eUL,\n-    0x0006dfb2UL, 0x206f0dabUL, 0x3ca32092UL, 0xe8ec5f73UL, 0x00071f75UL,\n-    0x8e17a7a6UL, 0x3ca06122UL, 0x564267c8UL, 0x00075febUL, 0x461e9f86UL,\n-    0x3ca244acUL, 0x73eb0186UL, 0x0007a114UL, 0xabd66c55UL, 0x3c65ebe1UL,\n-    0x36cf4e62UL, 0x0007e2f3UL, 0xbbff67d0UL, 0x3c96fe9fUL, 0x994cce12UL,\n-    0x00082589UL, 0x14c801dfUL, 0x3c951f14UL, 0x9b4492ecUL, 0x000868d9UL,\n-    0xc1f0eab4UL, 0x3c8db72fUL, 0x422aa0dbUL, 0x0008ace5UL, 0x59f35f44UL,\n-    0x3c7bf683UL, 0x99157736UL, 0x0008f1aeUL, 0x9c06283cUL, 0x3ca360baUL,\n-    0xb0cdc5e4UL, 0x00093737UL, 0x20f962aaUL, 0x3c95e8d1UL, 0x9fde4e4fUL,\n-    0x00097d82UL, 0x2b91ce27UL, 0x3c71affcUL, 0x82a3f090UL, 0x0009c491UL,\n-    0x589a2ebdUL, 0x3c9b6d34UL, 0x7b5de564UL, 0x000a0c66UL, 0x9ab89880UL,\n-    0x3c95277cUL, 0xb23e255cUL, 0x000a5503UL, 0x6e735ab3UL, 0x3c846984UL,\n-    0x5579fdbfUL, 0x000a9e6bUL, 0x92cb3387UL, 0x3c8c1a77UL, 0x995ad3adUL,\n-    0x000ae89fUL, 0xdc2d1d96UL, 0x3ca22466UL, 0xb84f15faUL, 0x000b33a2UL,\n-    0xb19505aeUL, 0x3ca1112eUL, 0xf2fb5e46UL, 0x000b7f76UL, 0x0a5fddcdUL,\n-    0x3c74ffd7UL, 0x904bc1d2UL, 0x000bcc1eUL, 0x30af0cb3UL, 0x3c736eaeUL,\n-    0xdd85529cUL, 0x000c199bUL, 0xd10959acUL, 0x3c84e08fUL, 0x2e57d14bUL,\n-    0x000c67f1UL, 0x6c921968UL, 0x3c676b2cUL, 0xdcef9069UL, 0x000cb720UL,\n-    0x36df99b3UL, 0x3c937009UL, 0x4a07897bUL, 0x000d072dUL, 0xa63d07a7UL,\n-    0x3c74a385UL, 0xdcfba487UL, 0x000d5818UL, 0xd5c192acUL, 0x3c8e5a50UL,\n-    0x03db3285UL, 0x000da9e6UL, 0x1c4a9792UL, 0x3c98bb73UL, 0x337b9b5eUL,\n-    0x000dfc97UL, 0x603a88d3UL, 0x3c74b604UL, 0xe78b3ff6UL, 0x000e502eUL,\n-    0x92094926UL, 0x3c916f27UL, 0xa2a490d9UL, 0x000ea4afUL, 0x41aa2008UL,\n-    0x3c8ec3bcUL, 0xee615a27UL, 0x000efa1bUL, 0x31d185eeUL, 0x3c8a64a9UL,\n-    0x5b6e4540UL, 0x000f5076UL, 0x4d91cd9dUL, 0x3c77893bUL, 0x819e90d8UL,\n-    0x000fa7c1UL\n-};\n-\n-ATTRIBUTE_ALIGNED(16) juint _ALLONES[] =\n-{\n-    0xffffffffUL, 0xffffffffUL, 0xffffffffUL, 0xffffffffUL\n-};\n-\n-ATTRIBUTE_ALIGNED(16) juint _ebias[] =\n-{\n-    0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0x3ff00000UL\n-};\n-\n-ATTRIBUTE_ALIGNED(4) juint _XMAX[] =\n-{\n-    0xffffffffUL, 0x7fefffffUL\n-};\n-\n-ATTRIBUTE_ALIGNED(4) juint _XMIN[] =\n-{\n-    0x00000000UL, 0x00100000UL\n-};\n-\n-ATTRIBUTE_ALIGNED(4) juint _INF[] =\n-{\n-    0x00000000UL, 0x7ff00000UL\n-};\n-\n-\n-\n-\/\/ Registers:\n-\/\/ input: xmm0\n-\/\/ scratch: xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7\n-\/\/          rax, rdx, rcx, tmp - r11\n-\n-\/\/ Code generated by Intel C compiler for LIBM library\n-\n-void MacroAssembler::fast_exp(XMMRegister xmm0, XMMRegister xmm1, XMMRegister xmm2, XMMRegister xmm3,\n-                              XMMRegister xmm4, XMMRegister xmm5, XMMRegister xmm6, XMMRegister xmm7,\n-                              Register eax, Register ecx, Register edx, Register tmp) {\n-  Label L_2TAG_PACKET_0_0_2, L_2TAG_PACKET_1_0_2, L_2TAG_PACKET_2_0_2, L_2TAG_PACKET_3_0_2;\n-  Label L_2TAG_PACKET_4_0_2, L_2TAG_PACKET_5_0_2, L_2TAG_PACKET_6_0_2, L_2TAG_PACKET_7_0_2;\n-  Label L_2TAG_PACKET_8_0_2, L_2TAG_PACKET_9_0_2, L_2TAG_PACKET_10_0_2, L_2TAG_PACKET_11_0_2;\n-  Label L_2TAG_PACKET_12_0_2, B1_3, B1_5;\n-\n-  assert_different_registers(tmp, eax, ecx, edx);\n-\n-  address cv       = (address)_cv;\n-  address mmask    = (address)_mmask;\n-  address bias     = (address)_bias;\n-  address Tbl_addr = (address)_Tbl_addr;\n-  address ALLONES  = (address)_ALLONES;\n-  address ebias    = (address)_ebias;\n-  address XMAX     = (address)_XMAX;\n-  address XMIN     = (address)_XMIN;\n-  address INF      = (address)_INF;\n-\n-  subq(rsp, 24);\n-  movsd(Address(rsp, 8), xmm0);\n-  unpcklpd(xmm0, xmm0);\n-  movdqu(xmm1, ExternalAddress(cv),      tmp \/*rscratch*\/); \/\/ 0x652b82feUL, 0x40571547UL, 0x652b82feUL, 0x40571547UL\n-  movdqu(xmm2, ExternalAddress(cv + 16), tmp \/*rscratch*\/); \/\/ 0xfefa0000UL, 0x3f862e42UL, 0xfefa0000UL, 0x3f862e42UL\n-  movdqu(xmm3, ExternalAddress(cv + 32), tmp \/*rscratch*\/); \/\/ 0xbc9e3b3aUL, 0x3d1cf79aUL, 0xbc9e3b3aUL, 0x3d1cf79aUL\n-  movdqu(xmm6, ExternalAddress(SHIFTER), tmp \/*rscratch*\/); \/\/ 0x00000000UL, 0x43380000UL, 0x00000000UL, 0x43380000UL\n-  pextrw(eax, xmm0, 3);\n-  andl(eax, 32767);\n-  movl(edx, 16527);\n-  subl(edx, eax);\n-  subl(eax, 15504);\n-  orl(edx, eax);\n-  cmpl(edx, INT_MIN);\n-  jcc(Assembler::aboveEqual, L_2TAG_PACKET_0_0_2);\n-  mulpd(xmm1, xmm0);\n-  addpd(xmm1, xmm6);\n-  movapd(xmm7, xmm1);\n-  subpd(xmm1, xmm6);\n-  mulpd(xmm2, xmm1);\n-  movdqu(xmm4, ExternalAddress(cv + 64), tmp \/*rscratch*\/);  \/\/ 0xe3289860UL, 0x3f56c15cUL, 0x555b9e25UL, 0x3fa55555UL\n-  mulpd(xmm3, xmm1);\n-  movdqu(xmm5, ExternalAddress(cv + 80), tmp \/*rscratch*\/);  \/\/ 0xc090cf0fUL, 0x3f811115UL, 0x55548ba1UL, 0x3fc55555UL\n-  subpd(xmm0, xmm2);\n-  movdl(eax, xmm7);\n-  movl(ecx, eax);\n-  andl(ecx, 63);\n-  shll(ecx, 4);\n-  sarl(eax, 6);\n-  movl(edx, eax);\n-  movdqu(xmm6, ExternalAddress(mmask), tmp \/*rscratch*\/);    \/\/ 0xffffffc0UL, 0x00000000UL, 0xffffffc0UL, 0x00000000UL\n-  pand(xmm7, xmm6);\n-  movdqu(xmm6, ExternalAddress(bias), tmp \/*rscratch*\/);     \/\/ 0x0000ffc0UL, 0x00000000UL, 0x0000ffc0UL, 0x00000000UL\n-  paddq(xmm7, xmm6);\n-  psllq(xmm7, 46);\n-  subpd(xmm0, xmm3);\n-  lea(tmp, ExternalAddress(Tbl_addr));\n-  movdqu(xmm2, Address(ecx, tmp));\n-  mulpd(xmm4, xmm0);\n-  movapd(xmm6, xmm0);\n-  movapd(xmm1, xmm0);\n-  mulpd(xmm6, xmm6);\n-  mulpd(xmm0, xmm6);\n-  addpd(xmm5, xmm4);\n-  mulsd(xmm0, xmm6);\n-  mulpd(xmm6, ExternalAddress(cv + 48), tmp \/*rscratch*\/);     \/\/ 0xfffffffeUL, 0x3fdfffffUL, 0xfffffffeUL, 0x3fdfffffUL\n-  addsd(xmm1, xmm2);\n-  unpckhpd(xmm2, xmm2);\n-  mulpd(xmm0, xmm5);\n-  addsd(xmm1, xmm0);\n-  por(xmm2, xmm7);\n-  unpckhpd(xmm0, xmm0);\n-  addsd(xmm0, xmm1);\n-  addsd(xmm0, xmm6);\n-  addl(edx, 894);\n-  cmpl(edx, 1916);\n-  jcc(Assembler::above, L_2TAG_PACKET_1_0_2);\n-  mulsd(xmm0, xmm2);\n-  addsd(xmm0, xmm2);\n-  jmp(B1_5);\n-\n-  bind(L_2TAG_PACKET_1_0_2);\n-  xorpd(xmm3, xmm3);\n-  movdqu(xmm4, ExternalAddress(ALLONES), tmp \/*rscratch*\/);  \/\/ 0xffffffffUL, 0xffffffffUL, 0xffffffffUL, 0xffffffffUL\n-  movl(edx, -1022);\n-  subl(edx, eax);\n-  movdl(xmm5, edx);\n-  psllq(xmm4, xmm5);\n-  movl(ecx, eax);\n-  sarl(eax, 1);\n-  pinsrw(xmm3, eax, 3);\n-  movdqu(xmm6, ExternalAddress(ebias), tmp \/*rscratch*\/);    \/\/ 0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0x3ff00000UL\n-  psllq(xmm3, 4);\n-  psubd(xmm2, xmm3);\n-  mulsd(xmm0, xmm2);\n-  cmpl(edx, 52);\n-  jcc(Assembler::greater, L_2TAG_PACKET_2_0_2);\n-  pand(xmm4, xmm2);\n-  paddd(xmm3, xmm6);\n-  subsd(xmm2, xmm4);\n-  addsd(xmm0, xmm2);\n-  cmpl(ecx, 1023);\n-  jcc(Assembler::greaterEqual, L_2TAG_PACKET_3_0_2);\n-  pextrw(ecx, xmm0, 3);\n-  andl(ecx, 32768);\n-  orl(edx, ecx);\n-  cmpl(edx, 0);\n-  jcc(Assembler::equal, L_2TAG_PACKET_4_0_2);\n-  movapd(xmm6, xmm0);\n-  addsd(xmm0, xmm4);\n-  mulsd(xmm0, xmm3);\n-  pextrw(ecx, xmm0, 3);\n-  andl(ecx, 32752);\n-  cmpl(ecx, 0);\n-  jcc(Assembler::equal, L_2TAG_PACKET_5_0_2);\n-  jmp(B1_5);\n-\n-  bind(L_2TAG_PACKET_5_0_2);\n-  mulsd(xmm6, xmm3);\n-  mulsd(xmm4, xmm3);\n-  movdqu(xmm0, xmm6);\n-  pxor(xmm6, xmm4);\n-  psrad(xmm6, 31);\n-  pshufd(xmm6, xmm6, 85);\n-  psllq(xmm0, 1);\n-  psrlq(xmm0, 1);\n-  pxor(xmm0, xmm6);\n-  psrlq(xmm6, 63);\n-  paddq(xmm0, xmm6);\n-  paddq(xmm0, xmm4);\n-  movl(Address(rsp, 0), 15);\n-  jmp(L_2TAG_PACKET_6_0_2);\n-\n-  bind(L_2TAG_PACKET_4_0_2);\n-  addsd(xmm0, xmm4);\n-  mulsd(xmm0, xmm3);\n-  jmp(B1_5);\n-\n-  bind(L_2TAG_PACKET_3_0_2);\n-  addsd(xmm0, xmm4);\n-  mulsd(xmm0, xmm3);\n-  pextrw(ecx, xmm0, 3);\n-  andl(ecx, 32752);\n-  cmpl(ecx, 32752);\n-  jcc(Assembler::aboveEqual, L_2TAG_PACKET_7_0_2);\n-  jmp(B1_5);\n-\n-  bind(L_2TAG_PACKET_2_0_2);\n-  paddd(xmm3, xmm6);\n-  addpd(xmm0, xmm2);\n-  mulsd(xmm0, xmm3);\n-  movl(Address(rsp, 0), 15);\n-  jmp(L_2TAG_PACKET_6_0_2);\n-\n-  bind(L_2TAG_PACKET_8_0_2);\n-  cmpl(eax, 2146435072);\n-  jcc(Assembler::aboveEqual, L_2TAG_PACKET_9_0_2);\n-  movl(eax, Address(rsp, 12));\n-  cmpl(eax, INT_MIN);\n-  jcc(Assembler::aboveEqual, L_2TAG_PACKET_10_0_2);\n-  movsd(xmm0, ExternalAddress(XMAX), tmp \/*rscratch*\/);      \/\/ 0xffffffffUL, 0x7fefffffUL\n-  mulsd(xmm0, xmm0);\n-\n-  bind(L_2TAG_PACKET_7_0_2);\n-  movl(Address(rsp, 0), 14);\n-  jmp(L_2TAG_PACKET_6_0_2);\n-\n-  bind(L_2TAG_PACKET_10_0_2);\n-  movsd(xmm0, ExternalAddress(XMIN), tmp \/*rscratch*\/);      \/\/ 0x00000000UL, 0x00100000UL\n-  mulsd(xmm0, xmm0);\n-  movl(Address(rsp, 0), 15);\n-  jmp(L_2TAG_PACKET_6_0_2);\n-\n-  bind(L_2TAG_PACKET_9_0_2);\n-  movl(edx, Address(rsp, 8));\n-  cmpl(eax, 2146435072);\n-  jcc(Assembler::above, L_2TAG_PACKET_11_0_2);\n-  cmpl(edx, 0);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_11_0_2);\n-  movl(eax, Address(rsp, 12));\n-  cmpl(eax, 2146435072);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_12_0_2);\n-  movsd(xmm0, ExternalAddress(INF), tmp \/*rscratch*\/);       \/\/ 0x00000000UL, 0x7ff00000UL\n-  jmp(B1_5);\n-\n-  bind(L_2TAG_PACKET_12_0_2);\n-  movsd(xmm0, ExternalAddress(ZERO), tmp \/*rscratch*\/);      \/\/ 0x00000000UL, 0x00000000UL\n-  jmp(B1_5);\n-\n-  bind(L_2TAG_PACKET_11_0_2);\n-  movsd(xmm0, Address(rsp, 8));\n-  addsd(xmm0, xmm0);\n-  jmp(B1_5);\n-\n-  bind(L_2TAG_PACKET_0_0_2);\n-  movl(eax, Address(rsp, 12));\n-  andl(eax, 2147483647);\n-  cmpl(eax, 1083179008);\n-  jcc(Assembler::aboveEqual, L_2TAG_PACKET_8_0_2);\n-  movsd(Address(rsp, 8), xmm0);\n-  addsd(xmm0, ExternalAddress(ONE), tmp \/*rscratch*\/); \/\/ 0x00000000UL, 0x3ff00000UL\n-  jmp(B1_5);\n-\n-  bind(L_2TAG_PACKET_6_0_2);\n-  movq(Address(rsp, 16), xmm0);\n-\n-  bind(B1_3);\n-  movq(xmm0, Address(rsp, 16));\n-\n-  bind(B1_5);\n-  addq(rsp, 24);\n-}\n-#else\n-\/\/ The 32 bit code is at most SSE2 compliant\n-ATTRIBUTE_ALIGNED(16) juint _static_const_table[] =\n-{\n-    0x00000000UL, 0xfff00000UL, 0x00000000UL, 0xfff00000UL, 0xffffffc0UL,\n-    0x00000000UL, 0xffffffc0UL, 0x00000000UL, 0x0000ffc0UL, 0x00000000UL,\n-    0x0000ffc0UL, 0x00000000UL, 0x00000000UL, 0x43380000UL, 0x00000000UL,\n-    0x43380000UL, 0x652b82feUL, 0x40571547UL, 0x652b82feUL, 0x40571547UL,\n-    0xfefa0000UL, 0x3f862e42UL, 0xfefa0000UL, 0x3f862e42UL, 0xbc9e3b3aUL,\n-    0x3d1cf79aUL, 0xbc9e3b3aUL, 0x3d1cf79aUL, 0xfffffffeUL, 0x3fdfffffUL,\n-    0xfffffffeUL, 0x3fdfffffUL, 0xe3289860UL, 0x3f56c15cUL, 0x555b9e25UL,\n-    0x3fa55555UL, 0xc090cf0fUL, 0x3f811115UL, 0x55548ba1UL, 0x3fc55555UL,\n-    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x0e03754dUL,\n-    0x3cad7bbfUL, 0x3e778060UL, 0x00002c9aUL, 0x3567f613UL, 0x3c8cd252UL,\n-    0xd3158574UL, 0x000059b0UL, 0x61e6c861UL, 0x3c60f74eUL, 0x18759bc8UL,\n-    0x00008745UL, 0x5d837b6cUL, 0x3c979aa6UL, 0x6cf9890fUL, 0x0000b558UL,\n-    0x702f9cd1UL, 0x3c3ebe3dUL, 0x32d3d1a2UL, 0x0000e3ecUL, 0x1e63bcd8UL,\n-    0x3ca3516eUL, 0xd0125b50UL, 0x00011301UL, 0x26f0387bUL, 0x3ca4c554UL,\n-    0xaea92ddfUL, 0x0001429aUL, 0x62523fb6UL, 0x3ca95153UL, 0x3c7d517aUL,\n-    0x000172b8UL, 0x3f1353bfUL, 0x3c8b898cUL, 0xeb6fcb75UL, 0x0001a35bUL,\n-    0x3e3a2f5fUL, 0x3c9aecf7UL, 0x3168b9aaUL, 0x0001d487UL, 0x44a6c38dUL,\n-    0x3c8a6f41UL, 0x88628cd6UL, 0x0002063bUL, 0xe3a8a894UL, 0x3c968efdUL,\n-    0x6e756238UL, 0x0002387aUL, 0x981fe7f2UL, 0x3c80472bUL, 0x65e27cddUL,\n-    0x00026b45UL, 0x6d09ab31UL, 0x3c82f7e1UL, 0xf51fdee1UL, 0x00029e9dUL,\n-    0x720c0ab3UL, 0x3c8b3782UL, 0xa6e4030bUL, 0x0002d285UL, 0x4db0abb6UL,\n-    0x3c834d75UL, 0x0a31b715UL, 0x000306feUL, 0x5dd3f84aUL, 0x3c8fdd39UL,\n-    0xb26416ffUL, 0x00033c08UL, 0xcc187d29UL, 0x3ca12f8cUL, 0x373aa9caUL,\n-    0x000371a7UL, 0x738b5e8bUL, 0x3ca7d229UL, 0x34e59ff6UL, 0x0003a7dbUL,\n-    0xa72a4c6dUL, 0x3c859f48UL, 0x4c123422UL, 0x0003dea6UL, 0x259d9205UL,\n-    0x3ca8b846UL, 0x21f72e29UL, 0x0004160aUL, 0x60c2ac12UL, 0x3c4363edUL,\n-    0x6061892dUL, 0x00044e08UL, 0xdaa10379UL, 0x3c6ecce1UL, 0xb5c13cd0UL,\n-    0x000486a2UL, 0xbb7aafb0UL, 0x3c7690ceUL, 0xd5362a27UL, 0x0004bfdaUL,\n-    0x9b282a09UL, 0x3ca083ccUL, 0x769d2ca6UL, 0x0004f9b2UL, 0xc1aae707UL,\n-    0x3ca509b0UL, 0x569d4f81UL, 0x0005342bUL, 0x18fdd78eUL, 0x3c933505UL,\n-    0x36b527daUL, 0x00056f47UL, 0xe21c5409UL, 0x3c9063e1UL, 0xdd485429UL,\n-    0x0005ab07UL, 0x2b64c035UL, 0x3c9432e6UL, 0x15ad2148UL, 0x0005e76fUL,\n-    0x99f08c0aUL, 0x3ca01284UL, 0xb03a5584UL, 0x0006247eUL, 0x0073dc06UL,\n-    0x3c99f087UL, 0x82552224UL, 0x00066238UL, 0x0da05571UL, 0x3c998d4dUL,\n-    0x667f3bccUL, 0x0006a09eUL, 0x86ce4786UL, 0x3ca52bb9UL, 0x3c651a2eUL,\n-    0x0006dfb2UL, 0x206f0dabUL, 0x3ca32092UL, 0xe8ec5f73UL, 0x00071f75UL,\n-    0x8e17a7a6UL, 0x3ca06122UL, 0x564267c8UL, 0x00075febUL, 0x461e9f86UL,\n-    0x3ca244acUL, 0x73eb0186UL, 0x0007a114UL, 0xabd66c55UL, 0x3c65ebe1UL,\n-    0x36cf4e62UL, 0x0007e2f3UL, 0xbbff67d0UL, 0x3c96fe9fUL, 0x994cce12UL,\n-    0x00082589UL, 0x14c801dfUL, 0x3c951f14UL, 0x9b4492ecUL, 0x000868d9UL,\n-    0xc1f0eab4UL, 0x3c8db72fUL, 0x422aa0dbUL, 0x0008ace5UL, 0x59f35f44UL,\n-    0x3c7bf683UL, 0x99157736UL, 0x0008f1aeUL, 0x9c06283cUL, 0x3ca360baUL,\n-    0xb0cdc5e4UL, 0x00093737UL, 0x20f962aaUL, 0x3c95e8d1UL, 0x9fde4e4fUL,\n-    0x00097d82UL, 0x2b91ce27UL, 0x3c71affcUL, 0x82a3f090UL, 0x0009c491UL,\n-    0x589a2ebdUL, 0x3c9b6d34UL, 0x7b5de564UL, 0x000a0c66UL, 0x9ab89880UL,\n-    0x3c95277cUL, 0xb23e255cUL, 0x000a5503UL, 0x6e735ab3UL, 0x3c846984UL,\n-    0x5579fdbfUL, 0x000a9e6bUL, 0x92cb3387UL, 0x3c8c1a77UL, 0x995ad3adUL,\n-    0x000ae89fUL, 0xdc2d1d96UL, 0x3ca22466UL, 0xb84f15faUL, 0x000b33a2UL,\n-    0xb19505aeUL, 0x3ca1112eUL, 0xf2fb5e46UL, 0x000b7f76UL, 0x0a5fddcdUL,\n-    0x3c74ffd7UL, 0x904bc1d2UL, 0x000bcc1eUL, 0x30af0cb3UL, 0x3c736eaeUL,\n-    0xdd85529cUL, 0x000c199bUL, 0xd10959acUL, 0x3c84e08fUL, 0x2e57d14bUL,\n-    0x000c67f1UL, 0x6c921968UL, 0x3c676b2cUL, 0xdcef9069UL, 0x000cb720UL,\n-    0x36df99b3UL, 0x3c937009UL, 0x4a07897bUL, 0x000d072dUL, 0xa63d07a7UL,\n-    0x3c74a385UL, 0xdcfba487UL, 0x000d5818UL, 0xd5c192acUL, 0x3c8e5a50UL,\n-    0x03db3285UL, 0x000da9e6UL, 0x1c4a9792UL, 0x3c98bb73UL, 0x337b9b5eUL,\n-    0x000dfc97UL, 0x603a88d3UL, 0x3c74b604UL, 0xe78b3ff6UL, 0x000e502eUL,\n-    0x92094926UL, 0x3c916f27UL, 0xa2a490d9UL, 0x000ea4afUL, 0x41aa2008UL,\n-    0x3c8ec3bcUL, 0xee615a27UL, 0x000efa1bUL, 0x31d185eeUL, 0x3c8a64a9UL,\n-    0x5b6e4540UL, 0x000f5076UL, 0x4d91cd9dUL, 0x3c77893bUL, 0x819e90d8UL,\n-    0x000fa7c1UL, 0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0x7ff00000UL,\n-    0x00000000UL, 0x00000000UL, 0xffffffffUL, 0x7fefffffUL, 0x00000000UL,\n-    0x00100000UL\n-};\n-\n-\/\/registers,\n-\/\/ input: (rbp + 8)\n-\/\/ scratch: xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7\n-\/\/          rax, rdx, rcx, rbx (tmp)\n-\n-\/\/ Code generated by Intel C compiler for LIBM library\n-\n-void MacroAssembler::fast_exp(XMMRegister xmm0, XMMRegister xmm1, XMMRegister xmm2, XMMRegister xmm3,\n-                              XMMRegister xmm4, XMMRegister xmm5, XMMRegister xmm6, XMMRegister xmm7,\n-                              Register eax, Register ecx, Register edx, Register tmp) {\n-  Label L_2TAG_PACKET_0_0_2, L_2TAG_PACKET_1_0_2, L_2TAG_PACKET_2_0_2, L_2TAG_PACKET_3_0_2;\n-  Label L_2TAG_PACKET_4_0_2, L_2TAG_PACKET_5_0_2, L_2TAG_PACKET_6_0_2, L_2TAG_PACKET_7_0_2;\n-  Label L_2TAG_PACKET_8_0_2, L_2TAG_PACKET_9_0_2, L_2TAG_PACKET_10_0_2, L_2TAG_PACKET_11_0_2;\n-  Label L_2TAG_PACKET_12_0_2;\n-\n-  assert_different_registers(tmp, eax, ecx, edx);\n-  address static_const_table = (address)_static_const_table;\n-\n-  subl(rsp, 120);\n-  movl(Address(rsp, 64), tmp);\n-  lea(tmp, ExternalAddress(static_const_table));\n-  movsd(xmm0, Address(rsp, 128));\n-  unpcklpd(xmm0, xmm0);\n-  movdqu(xmm1, Address(tmp, 64));          \/\/ 0x652b82feUL, 0x40571547UL, 0x652b82feUL, 0x40571547UL\n-  movdqu(xmm6, Address(tmp, 48));          \/\/ 0x00000000UL, 0x43380000UL, 0x00000000UL, 0x43380000UL\n-  movdqu(xmm2, Address(tmp, 80));          \/\/ 0xfefa0000UL, 0x3f862e42UL, 0xfefa0000UL, 0x3f862e42UL\n-  movdqu(xmm3, Address(tmp, 96));          \/\/ 0xbc9e3b3aUL, 0x3d1cf79aUL, 0xbc9e3b3aUL, 0x3d1cf79aUL\n-  pextrw(eax, xmm0, 3);\n-  andl(eax, 32767);\n-  movl(edx, 16527);\n-  subl(edx, eax);\n-  subl(eax, 15504);\n-  orl(edx, eax);\n-  cmpl(edx, INT_MIN);\n-  jcc(Assembler::aboveEqual, L_2TAG_PACKET_0_0_2);\n-  mulpd(xmm1, xmm0);\n-  addpd(xmm1, xmm6);\n-  movapd(xmm7, xmm1);\n-  subpd(xmm1, xmm6);\n-  mulpd(xmm2, xmm1);\n-  movdqu(xmm4, Address(tmp, 128));         \/\/ 0xe3289860UL, 0x3f56c15cUL, 0x555b9e25UL, 0x3fa55555UL\n-  mulpd(xmm3, xmm1);\n-  movdqu(xmm5, Address(tmp, 144));         \/\/ 0xc090cf0fUL, 0x3f811115UL, 0x55548ba1UL, 0x3fc55555UL\n-  subpd(xmm0, xmm2);\n-  movdl(eax, xmm7);\n-  movl(ecx, eax);\n-  andl(ecx, 63);\n-  shll(ecx, 4);\n-  sarl(eax, 6);\n-  movl(edx, eax);\n-  movdqu(xmm6, Address(tmp, 16));          \/\/ 0xffffffc0UL, 0x00000000UL, 0xffffffc0UL, 0x00000000UL\n-  pand(xmm7, xmm6);\n-  movdqu(xmm6, Address(tmp, 32));          \/\/ 0x0000ffc0UL, 0x00000000UL, 0x0000ffc0UL, 0x00000000UL\n-  paddq(xmm7, xmm6);\n-  psllq(xmm7, 46);\n-  subpd(xmm0, xmm3);\n-  movdqu(xmm2, Address(tmp, ecx, Address::times_1, 160));\n-  mulpd(xmm4, xmm0);\n-  movapd(xmm6, xmm0);\n-  movapd(xmm1, xmm0);\n-  mulpd(xmm6, xmm6);\n-  mulpd(xmm0, xmm6);\n-  addpd(xmm5, xmm4);\n-  mulsd(xmm0, xmm6);\n-  mulpd(xmm6, Address(tmp, 112));          \/\/ 0xfffffffeUL, 0x3fdfffffUL, 0xfffffffeUL, 0x3fdfffffUL\n-  addsd(xmm1, xmm2);\n-  unpckhpd(xmm2, xmm2);\n-  mulpd(xmm0, xmm5);\n-  addsd(xmm1, xmm0);\n-  por(xmm2, xmm7);\n-  unpckhpd(xmm0, xmm0);\n-  addsd(xmm0, xmm1);\n-  addsd(xmm0, xmm6);\n-  addl(edx, 894);\n-  cmpl(edx, 1916);\n-  jcc(Assembler::above, L_2TAG_PACKET_1_0_2);\n-  mulsd(xmm0, xmm2);\n-  addsd(xmm0, xmm2);\n-  jmp(L_2TAG_PACKET_2_0_2);\n-\n-  bind(L_2TAG_PACKET_1_0_2);\n-  fnstcw(Address(rsp, 24));\n-  movzwl(edx, Address(rsp, 24));\n-  orl(edx, 768);\n-  movw(Address(rsp, 28), edx);\n-  fldcw(Address(rsp, 28));\n-  movl(edx, eax);\n-  sarl(eax, 1);\n-  subl(edx, eax);\n-  movdqu(xmm6, Address(tmp, 0));           \/\/ 0x00000000UL, 0xfff00000UL, 0x00000000UL, 0xfff00000UL\n-  pandn(xmm6, xmm2);\n-  addl(eax, 1023);\n-  movdl(xmm3, eax);\n-  psllq(xmm3, 52);\n-  por(xmm6, xmm3);\n-  addl(edx, 1023);\n-  movdl(xmm4, edx);\n-  psllq(xmm4, 52);\n-  movsd(Address(rsp, 8), xmm0);\n-  fld_d(Address(rsp, 8));\n-  movsd(Address(rsp, 16), xmm6);\n-  fld_d(Address(rsp, 16));\n-  fmula(1);\n-  faddp(1);\n-  movsd(Address(rsp, 8), xmm4);\n-  fld_d(Address(rsp, 8));\n-  fmulp(1);\n-  fstp_d(Address(rsp, 8));\n-  movsd(xmm0, Address(rsp, 8));\n-  fldcw(Address(rsp, 24));\n-  pextrw(ecx, xmm0, 3);\n-  andl(ecx, 32752);\n-  cmpl(ecx, 32752);\n-  jcc(Assembler::aboveEqual, L_2TAG_PACKET_3_0_2);\n-  cmpl(ecx, 0);\n-  jcc(Assembler::equal, L_2TAG_PACKET_4_0_2);\n-  jmp(L_2TAG_PACKET_2_0_2);\n-  cmpl(ecx, INT_MIN);\n-  jcc(Assembler::below, L_2TAG_PACKET_3_0_2);\n-  cmpl(ecx, -1064950997);\n-  jcc(Assembler::below, L_2TAG_PACKET_2_0_2);\n-  jcc(Assembler::above, L_2TAG_PACKET_4_0_2);\n-  movl(edx, Address(rsp, 128));\n-  cmpl(edx, -17155601);\n-  jcc(Assembler::below, L_2TAG_PACKET_2_0_2);\n-  jmp(L_2TAG_PACKET_4_0_2);\n-\n-  bind(L_2TAG_PACKET_3_0_2);\n-  movl(edx, 14);\n-  jmp(L_2TAG_PACKET_5_0_2);\n-\n-  bind(L_2TAG_PACKET_4_0_2);\n-  movl(edx, 15);\n-\n-  bind(L_2TAG_PACKET_5_0_2);\n-  movsd(Address(rsp, 0), xmm0);\n-  movsd(xmm0, Address(rsp, 128));\n-  fld_d(Address(rsp, 0));\n-  jmp(L_2TAG_PACKET_6_0_2);\n-\n-  bind(L_2TAG_PACKET_7_0_2);\n-  cmpl(eax, 2146435072);\n-  jcc(Assembler::aboveEqual, L_2TAG_PACKET_8_0_2);\n-  movl(eax, Address(rsp, 132));\n-  cmpl(eax, INT_MIN);\n-  jcc(Assembler::aboveEqual, L_2TAG_PACKET_9_0_2);\n-  movsd(xmm0, Address(tmp, 1208));         \/\/ 0xffffffffUL, 0x7fefffffUL\n-  mulsd(xmm0, xmm0);\n-  movl(edx, 14);\n-  jmp(L_2TAG_PACKET_5_0_2);\n-\n-  bind(L_2TAG_PACKET_9_0_2);\n-  movsd(xmm0, Address(tmp, 1216));\n-  mulsd(xmm0, xmm0);\n-  movl(edx, 15);\n-  jmp(L_2TAG_PACKET_5_0_2);\n-\n-  bind(L_2TAG_PACKET_8_0_2);\n-  movl(edx, Address(rsp, 128));\n-  cmpl(eax, 2146435072);\n-  jcc(Assembler::above, L_2TAG_PACKET_10_0_2);\n-  cmpl(edx, 0);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_10_0_2);\n-  movl(eax, Address(rsp, 132));\n-  cmpl(eax, 2146435072);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_11_0_2);\n-  movsd(xmm0, Address(tmp, 1192));         \/\/ 0x00000000UL, 0x7ff00000UL\n-  jmp(L_2TAG_PACKET_2_0_2);\n-\n-  bind(L_2TAG_PACKET_11_0_2);\n-  movsd(xmm0, Address(tmp, 1200));         \/\/ 0x00000000UL, 0x00000000UL\n-  jmp(L_2TAG_PACKET_2_0_2);\n-\n-  bind(L_2TAG_PACKET_10_0_2);\n-  movsd(xmm0, Address(rsp, 128));\n-  addsd(xmm0, xmm0);\n-  jmp(L_2TAG_PACKET_2_0_2);\n-\n-  bind(L_2TAG_PACKET_0_0_2);\n-  movl(eax, Address(rsp, 132));\n-  andl(eax, 2147483647);\n-  cmpl(eax, 1083179008);\n-  jcc(Assembler::aboveEqual, L_2TAG_PACKET_7_0_2);\n-  movsd(xmm0, Address(rsp, 128));\n-  addsd(xmm0, Address(tmp, 1184));         \/\/ 0x00000000UL, 0x3ff00000UL\n-  jmp(L_2TAG_PACKET_2_0_2);\n-\n-  bind(L_2TAG_PACKET_2_0_2);\n-  movsd(Address(rsp, 48), xmm0);\n-  fld_d(Address(rsp, 48));\n-\n-  bind(L_2TAG_PACKET_6_0_2);\n-  movl(tmp, Address(rsp, 64));\n-}\n-#endif\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86_exp.cpp","additions":0,"deletions":654,"binary":false,"changes":654,"status":"deleted"},{"patch":"@@ -1,651 +0,0 @@\n-\/*\n-* Copyright (c) 2016, 2021, Intel Corporation. All rights reserved.\n-* Copyright (C) 2021 THL A29 Limited, a Tencent company. All rights reserved.\n-* Intel Math Library (LIBM) Source Code\n-*\n-* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-*\n-* This code is free software; you can redistribute it and\/or modify it\n-* under the terms of the GNU General Public License version 2 only, as\n-* published by the Free Software Foundation.\n-*\n-* This code is distributed in the hope that it will be useful, but WITHOUT\n-* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-* version 2 for more details (a copy is included in the LICENSE file that\n-* accompanied this code).\n-*\n-* You should have received a copy of the GNU General Public License version\n-* 2 along with this work; if not, write to the Free Software Foundation,\n-* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-*\n-* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-* or visit www.oracle.com if you need additional information or have any\n-* questions.\n-*\n-*\/\n-\n-#include \"precompiled.hpp\"\n-#include \"asm\/assembler.hpp\"\n-#include \"asm\/assembler.inline.hpp\"\n-#include \"macroAssembler_x86.hpp\"\n-#include \"utilities\/globalDefinitions.hpp\"\n-\n-\/******************************************************************************\/\n-\/\/                     ALGORITHM DESCRIPTION - LOG()\n-\/\/                     ---------------------\n-\/\/\n-\/\/    x=2^k * mx, mx in [1,2)\n-\/\/\n-\/\/    Get B~1\/mx based on the output of rcpss instruction (B0)\n-\/\/    B = int((B0*2^7+0.5))\/2^7\n-\/\/\n-\/\/    Reduced argument: r=B*mx-1.0 (computed accurately in high and low parts)\n-\/\/\n-\/\/    Result:  k*log(2) - log(B) + p(r) if |x-1| >= small value (2^-6)  and\n-\/\/             p(r) is a degree 7 polynomial\n-\/\/             -log(B) read from data table (high, low parts)\n-\/\/             Result is formed from high and low parts\n-\/\/\n-\/\/ Special cases:\n-\/\/  log(NaN) = quiet NaN, and raise invalid exception\n-\/\/  log(+INF) = that INF\n-\/\/  log(0) = -INF with divide-by-zero exception raised\n-\/\/  log(1) = +0\n-\/\/  log(x) = NaN with invalid exception raised if x < -0, including -INF\n-\/\/\n-\/******************************************************************************\/\n-\n-#ifdef _LP64\n-\/\/ The 64 bit code is at most SSE2 compliant\n-ATTRIBUTE_ALIGNED(16) juint _L_tbl[] =\n-{\n-    0xfefa3800UL, 0x3fe62e42UL, 0x93c76730UL, 0x3d2ef357UL, 0xaa241800UL,\n-    0x3fe5ee82UL, 0x0cda46beUL, 0x3d220238UL, 0x5c364800UL, 0x3fe5af40UL,\n-    0xac10c9fbUL, 0x3d2dfa63UL, 0x26bb8c00UL, 0x3fe5707aUL, 0xff3303ddUL,\n-    0x3d09980bUL, 0x26867800UL, 0x3fe5322eUL, 0x5d257531UL, 0x3d05ccc4UL,\n-    0x835a5000UL, 0x3fe4f45aUL, 0x6d93b8fbUL, 0xbd2e6c51UL, 0x6f970c00UL,\n-    0x3fe4b6fdUL, 0xed4c541cUL, 0x3cef7115UL, 0x27e8a400UL, 0x3fe47a15UL,\n-    0xf94d60aaUL, 0xbd22cb6aUL, 0xf2f92400UL, 0x3fe43d9fUL, 0x481051f7UL,\n-    0xbcfd984fUL, 0x2125cc00UL, 0x3fe4019cUL, 0x30f0c74cUL, 0xbd26ce79UL,\n-    0x0c36c000UL, 0x3fe3c608UL, 0x7cfe13c2UL, 0xbd02b736UL, 0x17197800UL,\n-    0x3fe38ae2UL, 0xbb5569a4UL, 0xbd218b7aUL, 0xad9d8c00UL, 0x3fe35028UL,\n-    0x9527e6acUL, 0x3d10b83fUL, 0x44340800UL, 0x3fe315daUL, 0xc5a0ed9cUL,\n-    0xbd274e93UL, 0x57b0e000UL, 0x3fe2dbf5UL, 0x07b9dc11UL, 0xbd17a6e5UL,\n-    0x6d0ec000UL, 0x3fe2a278UL, 0xe797882dUL, 0x3d206d2bUL, 0x1134dc00UL,\n-    0x3fe26962UL, 0x05226250UL, 0xbd0b61f1UL, 0xd8bebc00UL, 0x3fe230b0UL,\n-    0x6e48667bUL, 0x3d12fc06UL, 0x5fc61800UL, 0x3fe1f863UL, 0xc9fe81d3UL,\n-    0xbd2a7242UL, 0x49ae6000UL, 0x3fe1c078UL, 0xed70e667UL, 0x3cccacdeUL,\n-    0x40f23c00UL, 0x3fe188eeUL, 0xf8ab4650UL, 0x3d14cc4eUL, 0xf6f29800UL,\n-    0x3fe151c3UL, 0xa293ae49UL, 0xbd2edd97UL, 0x23c75c00UL, 0x3fe11af8UL,\n-    0xbb9ddcb2UL, 0xbd258647UL, 0x8611cc00UL, 0x3fe0e489UL, 0x07801742UL,\n-    0x3d1c2998UL, 0xe2d05400UL, 0x3fe0ae76UL, 0x887e7e27UL, 0x3d1f486bUL,\n-    0x0533c400UL, 0x3fe078bfUL, 0x41edf5fdUL, 0x3d268122UL, 0xbe760400UL,\n-    0x3fe04360UL, 0xe79539e0UL, 0xbd04c45fUL, 0xe5b20800UL, 0x3fe00e5aUL,\n-    0xb1727b1cUL, 0xbd053ba3UL, 0xaf7a4800UL, 0x3fdfb358UL, 0x3c164935UL,\n-    0x3d0085faUL, 0xee031800UL, 0x3fdf4aa7UL, 0x6f014a8bUL, 0x3d12cde5UL,\n-    0x56b41000UL, 0x3fdee2a1UL, 0x5a470251UL, 0x3d2f27f4UL, 0xc3ddb000UL,\n-    0x3fde7b42UL, 0x5372bd08UL, 0xbd246550UL, 0x1a272800UL, 0x3fde148aUL,\n-    0x07322938UL, 0xbd1326b2UL, 0x484c9800UL, 0x3fddae75UL, 0x60dc616aUL,\n-    0xbd1ea42dUL, 0x46def800UL, 0x3fdd4902UL, 0xe9a767a8UL, 0x3d235bafUL,\n-    0x18064800UL, 0x3fdce42fUL, 0x3ec7a6b0UL, 0xbd0797c3UL, 0xc7455800UL,\n-    0x3fdc7ff9UL, 0xc15249aeUL, 0xbd29b6ddUL, 0x693fa000UL, 0x3fdc1c60UL,\n-    0x7fe8e180UL, 0x3d2cec80UL, 0x1b80e000UL, 0x3fdbb961UL, 0xf40a666dUL,\n-    0x3d27d85bUL, 0x04462800UL, 0x3fdb56faUL, 0x2d841995UL, 0x3d109525UL,\n-    0x5248d000UL, 0x3fdaf529UL, 0x52774458UL, 0xbd217cc5UL, 0x3c8ad800UL,\n-    0x3fda93edUL, 0xbea77a5dUL, 0x3d1e36f2UL, 0x0224f800UL, 0x3fda3344UL,\n-    0x7f9d79f5UL, 0x3d23c645UL, 0xea15f000UL, 0x3fd9d32bUL, 0x10d0c0b0UL,\n-    0xbd26279eUL, 0x43135800UL, 0x3fd973a3UL, 0xa502d9f0UL, 0xbd152313UL,\n-    0x635bf800UL, 0x3fd914a8UL, 0x2ee6307dUL, 0xbd1766b5UL, 0xa88b3000UL,\n-    0x3fd8b639UL, 0xe5e70470UL, 0xbd205ae1UL, 0x776dc800UL, 0x3fd85855UL,\n-    0x3333778aUL, 0x3d2fd56fUL, 0x3bd81800UL, 0x3fd7fafaUL, 0xc812566aUL,\n-    0xbd272090UL, 0x687cf800UL, 0x3fd79e26UL, 0x2efd1778UL, 0x3d29ec7dUL,\n-    0x76c67800UL, 0x3fd741d8UL, 0x49dc60b3UL, 0x3d2d8b09UL, 0xe6af1800UL,\n-    0x3fd6e60eUL, 0x7c222d87UL, 0x3d172165UL, 0x3e9c6800UL, 0x3fd68ac8UL,\n-    0x2756eba0UL, 0x3d20a0d3UL, 0x0b3ab000UL, 0x3fd63003UL, 0xe731ae00UL,\n-    0xbd2db623UL, 0xdf596000UL, 0x3fd5d5bdUL, 0x08a465dcUL, 0xbd0a0b2aUL,\n-    0x53c8d000UL, 0x3fd57bf7UL, 0xee5d40efUL, 0x3d1fadedUL, 0x0738a000UL,\n-    0x3fd522aeUL, 0x8164c759UL, 0x3d2ebe70UL, 0x9e173000UL, 0x3fd4c9e0UL,\n-    0x1b0ad8a4UL, 0xbd2e2089UL, 0xc271c800UL, 0x3fd4718dUL, 0x0967d675UL,\n-    0xbd2f27ceUL, 0x23d5e800UL, 0x3fd419b4UL, 0xec90e09dUL, 0x3d08e436UL,\n-    0x77333000UL, 0x3fd3c252UL, 0xb606bd5cUL, 0x3d183b54UL, 0x76be1000UL,\n-    0x3fd36b67UL, 0xb0f177c8UL, 0x3d116ecdUL, 0xe1d36000UL, 0x3fd314f1UL,\n-    0xd3213cb8UL, 0xbd28e27aUL, 0x7cdc9000UL, 0x3fd2bef0UL, 0x4a5004f4UL,\n-    0x3d2a9cfaUL, 0x1134d800UL, 0x3fd26962UL, 0xdf5bb3b6UL, 0x3d2c93c1UL,\n-    0x6d0eb800UL, 0x3fd21445UL, 0xba46baeaUL, 0x3d0a87deUL, 0x635a6800UL,\n-    0x3fd1bf99UL, 0x5147bdb7UL, 0x3d2ca6edUL, 0xcbacf800UL, 0x3fd16b5cUL,\n-    0xf7a51681UL, 0x3d2b9acdUL, 0x8227e800UL, 0x3fd1178eUL, 0x63a5f01cUL,\n-    0xbd2c210eUL, 0x67616000UL, 0x3fd0c42dUL, 0x163ceae9UL, 0x3d27188bUL,\n-    0x604d5800UL, 0x3fd07138UL, 0x16ed4e91UL, 0x3cf89cdbUL, 0x5626c800UL,\n-    0x3fd01eaeUL, 0x1485e94aUL, 0xbd16f08cUL, 0x6cb3b000UL, 0x3fcf991cUL,\n-    0xca0cdf30UL, 0x3d1bcbecUL, 0xe4dd0000UL, 0x3fcef5adUL, 0x65bb8e11UL,\n-    0xbcca2115UL, 0xffe71000UL, 0x3fce530eUL, 0x6041f430UL, 0x3cc21227UL,\n-    0xb0d49000UL, 0x3fcdb13dUL, 0xf715b035UL, 0xbd2aff2aUL, 0xf2656000UL,\n-    0x3fcd1037UL, 0x75b6f6e4UL, 0xbd084a7eUL, 0xc6f01000UL, 0x3fcc6ffbUL,\n-    0xc5962bd2UL, 0xbcf1ec72UL, 0x383be000UL, 0x3fcbd087UL, 0x595412b6UL,\n-    0xbd2d4bc4UL, 0x575bd000UL, 0x3fcb31d8UL, 0x4eace1aaUL, 0xbd0c358dUL,\n-    0x3c8ae000UL, 0x3fca93edUL, 0x50562169UL, 0xbd287243UL, 0x07089000UL,\n-    0x3fc9f6c4UL, 0x6865817aUL, 0x3d29904dUL, 0xdcf70000UL, 0x3fc95a5aUL,\n-    0x58a0ff6fUL, 0x3d07f228UL, 0xeb390000UL, 0x3fc8beafUL, 0xaae92cd1UL,\n-    0xbd073d54UL, 0x6551a000UL, 0x3fc823c1UL, 0x9a631e83UL, 0x3d1e0ddbUL,\n-    0x85445000UL, 0x3fc7898dUL, 0x70914305UL, 0xbd1c6610UL, 0x8b757000UL,\n-    0x3fc6f012UL, 0xe59c21e1UL, 0xbd25118dUL, 0xbe8c1000UL, 0x3fc6574eUL,\n-    0x2c3c2e78UL, 0x3d19cf8bUL, 0x6b544000UL, 0x3fc5bf40UL, 0xeb68981cUL,\n-    0xbd127023UL, 0xe4a1b000UL, 0x3fc527e5UL, 0xe5697dc7UL, 0x3d2633e8UL,\n-    0x8333b000UL, 0x3fc4913dUL, 0x54fdb678UL, 0x3d258379UL, 0xa5993000UL,\n-    0x3fc3fb45UL, 0x7e6a354dUL, 0xbd2cd1d8UL, 0xb0159000UL, 0x3fc365fcUL,\n-    0x234b7289UL, 0x3cc62fa8UL, 0x0c868000UL, 0x3fc2d161UL, 0xcb81b4a1UL,\n-    0x3d039d6cUL, 0x2a49c000UL, 0x3fc23d71UL, 0x8fd3df5cUL, 0x3d100d23UL,\n-    0x7e23f000UL, 0x3fc1aa2bUL, 0x44389934UL, 0x3d2ca78eUL, 0x8227e000UL,\n-    0x3fc1178eUL, 0xce2d07f2UL, 0x3d21ef78UL, 0xb59e4000UL, 0x3fc08598UL,\n-    0x7009902cUL, 0xbd27e5ddUL, 0x39dbe000UL, 0x3fbfe891UL, 0x4fa10afdUL,\n-    0xbd2534d6UL, 0x830a2000UL, 0x3fbec739UL, 0xafe645e0UL, 0xbd2dc068UL,\n-    0x63844000UL, 0x3fbda727UL, 0x1fa71733UL, 0x3d1a8940UL, 0x01bc4000UL,\n-    0x3fbc8858UL, 0xc65aacd3UL, 0x3d2646d1UL, 0x8dad6000UL, 0x3fbb6ac8UL,\n-    0x2bf768e5UL, 0xbd139080UL, 0x40b1c000UL, 0x3fba4e76UL, 0xb94407c8UL,\n-    0xbd0e42b6UL, 0x5d594000UL, 0x3fb9335eUL, 0x3abd47daUL, 0x3d23115cUL,\n-    0x2f40e000UL, 0x3fb8197eUL, 0xf96ffdf7UL, 0x3d0f80dcUL, 0x0aeac000UL,\n-    0x3fb700d3UL, 0xa99ded32UL, 0x3cec1e8dUL, 0x4d97a000UL, 0x3fb5e95aUL,\n-    0x3c5d1d1eUL, 0xbd2c6906UL, 0x5d208000UL, 0x3fb4d311UL, 0x82f4e1efUL,\n-    0xbcf53a25UL, 0xa7d1e000UL, 0x3fb3bdf5UL, 0xa5db4ed7UL, 0x3d2cc85eUL,\n-    0xa4472000UL, 0x3fb2aa04UL, 0xae9c697dUL, 0xbd20b6e8UL, 0xd1466000UL,\n-    0x3fb1973bUL, 0x560d9e9bUL, 0xbd25325dUL, 0xb59e4000UL, 0x3fb08598UL,\n-    0x7009902cUL, 0xbd17e5ddUL, 0xc006c000UL, 0x3faeea31UL, 0x4fc93b7bUL,\n-    0xbd0e113eUL, 0xcdddc000UL, 0x3faccb73UL, 0x47d82807UL, 0xbd1a68f2UL,\n-    0xd0fb0000UL, 0x3faaaef2UL, 0x353bb42eUL, 0x3d20fc1aUL, 0x149fc000UL,\n-    0x3fa894aaUL, 0xd05a267dUL, 0xbd197995UL, 0xf2d4c000UL, 0x3fa67c94UL,\n-    0xec19afa2UL, 0xbd029efbUL, 0xd42e0000UL, 0x3fa466aeUL, 0x75bdfd28UL,\n-    0xbd2c1673UL, 0x2f8d0000UL, 0x3fa252f3UL, 0xe021b67bUL, 0x3d283e9aUL,\n-    0x89e74000UL, 0x3fa0415dUL, 0x5cf1d753UL, 0x3d0111c0UL, 0xec148000UL,\n-    0x3f9c63d2UL, 0x3f9eb2f3UL, 0x3d2578c6UL, 0x28c90000UL, 0x3f984925UL,\n-    0x325a0c34UL, 0xbd2aa0baUL, 0x25980000UL, 0x3f9432a9UL, 0x928637feUL,\n-    0x3d098139UL, 0x58938000UL, 0x3f902056UL, 0x06e2f7d2UL, 0xbd23dc5bUL,\n-    0xa3890000UL, 0x3f882448UL, 0xda74f640UL, 0xbd275577UL, 0x75890000UL,\n-    0x3f801015UL, 0x999d2be8UL, 0xbd10c76bUL, 0x59580000UL, 0x3f700805UL,\n-    0xcb31c67bUL, 0x3d2166afUL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n-    0x80000000UL\n-};\n-\n-ATTRIBUTE_ALIGNED(16) juint _log2[] =\n-{\n-    0xfefa3800UL, 0x3fa62e42UL, 0x93c76730UL, 0x3ceef357UL\n-};\n-\n-ATTRIBUTE_ALIGNED(16) juint _coeff[] =\n-{\n-    0x92492492UL, 0x3fc24924UL, 0x00000000UL, 0xbfd00000UL, 0x3d6fb175UL,\n-    0xbfc5555eUL, 0x55555555UL, 0x3fd55555UL, 0x9999999aUL, 0x3fc99999UL,\n-    0x00000000UL, 0xbfe00000UL\n-};\n-\n-\/\/registers,\n-\/\/ input: xmm0\n-\/\/ scratch: xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7\n-\/\/          rax, rdx, rcx, r8, r11\n-\n-void MacroAssembler::fast_log(XMMRegister xmm0, XMMRegister xmm1, XMMRegister xmm2, XMMRegister xmm3,\n-                              XMMRegister xmm4, XMMRegister xmm5, XMMRegister xmm6, XMMRegister xmm7,\n-                              Register eax, Register ecx, Register edx, Register tmp1, Register tmp2) {\n-  Label L_2TAG_PACKET_0_0_2, L_2TAG_PACKET_1_0_2, L_2TAG_PACKET_2_0_2, L_2TAG_PACKET_3_0_2;\n-  Label L_2TAG_PACKET_4_0_2, L_2TAG_PACKET_5_0_2, L_2TAG_PACKET_6_0_2, L_2TAG_PACKET_7_0_2;\n-  Label L_2TAG_PACKET_8_0_2;\n-  Label B1_3, B1_5;\n-\n-  assert_different_registers(tmp1, tmp2, eax, ecx, edx);\n-  address L_tbl = (address)_L_tbl;\n-  address log2  = (address)_log2;\n-  address coeff = (address)_coeff;\n-\n-  subq(rsp, 24);\n-  movsd(Address(rsp, 0), xmm0);\n-  mov64(rax, 0x3ff0000000000000);\n-  movdq(xmm2, rax);\n-  mov64(rdx, 0x77f0000000000000);\n-  movdq(xmm3, rdx);\n-  movl(ecx, 32768);\n-  movdl(xmm4, rcx);\n-  mov64(tmp1, 0xffffe00000000000);\n-  movdq(xmm5, tmp1);\n-  movdqu(xmm1, xmm0);\n-  pextrw(eax, xmm0, 3);\n-  por(xmm0, xmm2);\n-  movl(ecx, 16352);\n-  psrlq(xmm0, 27);\n-  lea(tmp2, ExternalAddress(L_tbl));\n-  psrld(xmm0, 2);\n-  rcpps(xmm0, xmm0);\n-  psllq(xmm1, 12);\n-  pshufd(xmm6, xmm5, 228);\n-  psrlq(xmm1, 12);\n-  subl(eax, 16);\n-  cmpl(eax, 32736);\n-  jcc(Assembler::aboveEqual, L_2TAG_PACKET_0_0_2);\n-\n-  bind(L_2TAG_PACKET_1_0_2);\n-  paddd(xmm0, xmm4);\n-  por(xmm1, xmm3);\n-  movdl(edx, xmm0);\n-  psllq(xmm0, 29);\n-  pand(xmm5, xmm1);\n-  pand(xmm0, xmm6);\n-  subsd(xmm1, xmm5);\n-  mulpd(xmm5, xmm0);\n-  andl(eax, 32752);\n-  subl(eax, ecx);\n-  cvtsi2sdl(xmm7, eax);\n-  mulsd(xmm1, xmm0);\n-  movq(xmm6, ExternalAddress(log2), tmp1 \/*rscratch*\/);       \/\/ 0xfefa3800UL, 0x3fa62e42UL\n-  movdqu(xmm3, ExternalAddress(coeff), tmp1 \/*rscratch*\/);    \/\/ 0x92492492UL, 0x3fc24924UL, 0x00000000UL, 0xbfd00000UL\n-  subsd(xmm5, xmm2);\n-  andl(edx, 16711680);\n-  shrl(edx, 12);\n-  movdqu(xmm0, Address(tmp2, edx));\n-  movdqu(xmm4, ExternalAddress(coeff + 16), tmp1 \/*rscratch*\/); \/\/ 0x3d6fb175UL, 0xbfc5555eUL, 0x55555555UL, 0x3fd55555UL\n-  addsd(xmm1, xmm5);\n-  movdqu(xmm2, ExternalAddress(coeff + 32), tmp1 \/*rscratch*\/); \/\/ 0x9999999aUL, 0x3fc99999UL, 0x00000000UL, 0xbfe00000UL\n-  mulsd(xmm6, xmm7);\n-  if (VM_Version::supports_sse3()) {\n-    movddup(xmm5, xmm1);\n-  }\n-  else {\n-    movdqu(xmm5, xmm1);\n-    movlhps(xmm5, xmm5);\n-  }\n-  mulsd(xmm7, ExternalAddress(log2 + 8), tmp1 \/*rscratch*\/);    \/\/ 0x93c76730UL, 0x3ceef357UL\n-  mulsd(xmm3, xmm1);\n-  addsd(xmm0, xmm6);\n-  mulpd(xmm4, xmm5);\n-  mulpd(xmm5, xmm5);\n-  if (VM_Version::supports_sse3()) {\n-    movddup(xmm6, xmm0);\n-  }\n-  else {\n-    movdqu(xmm6, xmm0);\n-    movlhps(xmm6, xmm6);\n-  }\n-  addsd(xmm0, xmm1);\n-  addpd(xmm4, xmm2);\n-  mulpd(xmm3, xmm5);\n-  subsd(xmm6, xmm0);\n-  mulsd(xmm4, xmm1);\n-  pshufd(xmm2, xmm0, 238);\n-  addsd(xmm1, xmm6);\n-  mulsd(xmm5, xmm5);\n-  addsd(xmm7, xmm2);\n-  addpd(xmm4, xmm3);\n-  addsd(xmm1, xmm7);\n-  mulpd(xmm4, xmm5);\n-  addsd(xmm1, xmm4);\n-  pshufd(xmm5, xmm4, 238);\n-  addsd(xmm1, xmm5);\n-  addsd(xmm0, xmm1);\n-  jmp(B1_5);\n-\n-  bind(L_2TAG_PACKET_0_0_2);\n-  movq(xmm0, Address(rsp, 0));\n-  movq(xmm1, Address(rsp, 0));\n-  addl(eax, 16);\n-  cmpl(eax, 32768);\n-  jcc(Assembler::aboveEqual, L_2TAG_PACKET_2_0_2);\n-  cmpl(eax, 16);\n-  jcc(Assembler::below, L_2TAG_PACKET_3_0_2);\n-\n-  bind(L_2TAG_PACKET_4_0_2);\n-  addsd(xmm0, xmm0);\n-  jmp(B1_5);\n-\n-  bind(L_2TAG_PACKET_5_0_2);\n-  jcc(Assembler::above, L_2TAG_PACKET_4_0_2);\n-  cmpl(edx, 0);\n-  jcc(Assembler::above, L_2TAG_PACKET_4_0_2);\n-  jmp(L_2TAG_PACKET_6_0_2);\n-\n-  bind(L_2TAG_PACKET_3_0_2);\n-  xorpd(xmm1, xmm1);\n-  addsd(xmm1, xmm0);\n-  movdl(edx, xmm1);\n-  psrlq(xmm1, 32);\n-  movdl(ecx, xmm1);\n-  orl(edx, ecx);\n-  cmpl(edx, 0);\n-  jcc(Assembler::equal, L_2TAG_PACKET_7_0_2);\n-  xorpd(xmm1, xmm1);\n-  movl(eax, 18416);\n-  pinsrw(xmm1, eax, 3);\n-  mulsd(xmm0, xmm1);\n-  movdqu(xmm1, xmm0);\n-  pextrw(eax, xmm0, 3);\n-  por(xmm0, xmm2);\n-  psrlq(xmm0, 27);\n-  movl(ecx, 18416);\n-  psrld(xmm0, 2);\n-  rcpps(xmm0, xmm0);\n-  psllq(xmm1, 12);\n-  pshufd(xmm6, xmm5, 228);\n-  psrlq(xmm1, 12);\n-  jmp(L_2TAG_PACKET_1_0_2);\n-\n-  bind(L_2TAG_PACKET_2_0_2);\n-  movdl(edx, xmm1);\n-  psrlq(xmm1, 32);\n-  movdl(ecx, xmm1);\n-  addl(ecx, ecx);\n-  cmpl(ecx, -2097152);\n-  jcc(Assembler::aboveEqual, L_2TAG_PACKET_5_0_2);\n-  orl(edx, ecx);\n-  cmpl(edx, 0);\n-  jcc(Assembler::equal, L_2TAG_PACKET_7_0_2);\n-\n-  bind(L_2TAG_PACKET_6_0_2);\n-  xorpd(xmm1, xmm1);\n-  xorpd(xmm0, xmm0);\n-  movl(eax, 32752);\n-  pinsrw(xmm1, eax, 3);\n-  mulsd(xmm0, xmm1);\n-  movl(Address(rsp, 16), 3);\n-  jmp(L_2TAG_PACKET_8_0_2);\n-  bind(L_2TAG_PACKET_7_0_2);\n-  xorpd(xmm1, xmm1);\n-  xorpd(xmm0, xmm0);\n-  movl(eax, 49136);\n-  pinsrw(xmm0, eax, 3);\n-  divsd(xmm0, xmm1);\n-  movl(Address(rsp, 16), 2);\n-\n-  bind(L_2TAG_PACKET_8_0_2);\n-  movq(Address(rsp, 8), xmm0);\n-\n-  bind(B1_3);\n-  movq(xmm0, Address(rsp, 8));\n-\n-  bind(B1_5);\n-  addq(rsp, 24);\n-}\n-#else\n-\/\/ The 32 bit code is at most SSE2 compliant\n-ATTRIBUTE_ALIGNED(16) juint _static_const_table_log[] =\n-{\n-    0xfefa3800UL, 0x3fe62e42UL, 0x93c76730UL, 0x3d2ef357UL, 0xaa241800UL,\n-    0x3fe5ee82UL, 0x0cda46beUL, 0x3d220238UL, 0x5c364800UL, 0x3fe5af40UL,\n-    0xac10c9fbUL, 0x3d2dfa63UL, 0x26bb8c00UL, 0x3fe5707aUL, 0xff3303ddUL,\n-    0x3d09980bUL, 0x26867800UL, 0x3fe5322eUL, 0x5d257531UL, 0x3d05ccc4UL,\n-    0x835a5000UL, 0x3fe4f45aUL, 0x6d93b8fbUL, 0xbd2e6c51UL, 0x6f970c00UL,\n-    0x3fe4b6fdUL, 0xed4c541cUL, 0x3cef7115UL, 0x27e8a400UL, 0x3fe47a15UL,\n-    0xf94d60aaUL, 0xbd22cb6aUL, 0xf2f92400UL, 0x3fe43d9fUL, 0x481051f7UL,\n-    0xbcfd984fUL, 0x2125cc00UL, 0x3fe4019cUL, 0x30f0c74cUL, 0xbd26ce79UL,\n-    0x0c36c000UL, 0x3fe3c608UL, 0x7cfe13c2UL, 0xbd02b736UL, 0x17197800UL,\n-    0x3fe38ae2UL, 0xbb5569a4UL, 0xbd218b7aUL, 0xad9d8c00UL, 0x3fe35028UL,\n-    0x9527e6acUL, 0x3d10b83fUL, 0x44340800UL, 0x3fe315daUL, 0xc5a0ed9cUL,\n-    0xbd274e93UL, 0x57b0e000UL, 0x3fe2dbf5UL, 0x07b9dc11UL, 0xbd17a6e5UL,\n-    0x6d0ec000UL, 0x3fe2a278UL, 0xe797882dUL, 0x3d206d2bUL, 0x1134dc00UL,\n-    0x3fe26962UL, 0x05226250UL, 0xbd0b61f1UL, 0xd8bebc00UL, 0x3fe230b0UL,\n-    0x6e48667bUL, 0x3d12fc06UL, 0x5fc61800UL, 0x3fe1f863UL, 0xc9fe81d3UL,\n-    0xbd2a7242UL, 0x49ae6000UL, 0x3fe1c078UL, 0xed70e667UL, 0x3cccacdeUL,\n-    0x40f23c00UL, 0x3fe188eeUL, 0xf8ab4650UL, 0x3d14cc4eUL, 0xf6f29800UL,\n-    0x3fe151c3UL, 0xa293ae49UL, 0xbd2edd97UL, 0x23c75c00UL, 0x3fe11af8UL,\n-    0xbb9ddcb2UL, 0xbd258647UL, 0x8611cc00UL, 0x3fe0e489UL, 0x07801742UL,\n-    0x3d1c2998UL, 0xe2d05400UL, 0x3fe0ae76UL, 0x887e7e27UL, 0x3d1f486bUL,\n-    0x0533c400UL, 0x3fe078bfUL, 0x41edf5fdUL, 0x3d268122UL, 0xbe760400UL,\n-    0x3fe04360UL, 0xe79539e0UL, 0xbd04c45fUL, 0xe5b20800UL, 0x3fe00e5aUL,\n-    0xb1727b1cUL, 0xbd053ba3UL, 0xaf7a4800UL, 0x3fdfb358UL, 0x3c164935UL,\n-    0x3d0085faUL, 0xee031800UL, 0x3fdf4aa7UL, 0x6f014a8bUL, 0x3d12cde5UL,\n-    0x56b41000UL, 0x3fdee2a1UL, 0x5a470251UL, 0x3d2f27f4UL, 0xc3ddb000UL,\n-    0x3fde7b42UL, 0x5372bd08UL, 0xbd246550UL, 0x1a272800UL, 0x3fde148aUL,\n-    0x07322938UL, 0xbd1326b2UL, 0x484c9800UL, 0x3fddae75UL, 0x60dc616aUL,\n-    0xbd1ea42dUL, 0x46def800UL, 0x3fdd4902UL, 0xe9a767a8UL, 0x3d235bafUL,\n-    0x18064800UL, 0x3fdce42fUL, 0x3ec7a6b0UL, 0xbd0797c3UL, 0xc7455800UL,\n-    0x3fdc7ff9UL, 0xc15249aeUL, 0xbd29b6ddUL, 0x693fa000UL, 0x3fdc1c60UL,\n-    0x7fe8e180UL, 0x3d2cec80UL, 0x1b80e000UL, 0x3fdbb961UL, 0xf40a666dUL,\n-    0x3d27d85bUL, 0x04462800UL, 0x3fdb56faUL, 0x2d841995UL, 0x3d109525UL,\n-    0x5248d000UL, 0x3fdaf529UL, 0x52774458UL, 0xbd217cc5UL, 0x3c8ad800UL,\n-    0x3fda93edUL, 0xbea77a5dUL, 0x3d1e36f2UL, 0x0224f800UL, 0x3fda3344UL,\n-    0x7f9d79f5UL, 0x3d23c645UL, 0xea15f000UL, 0x3fd9d32bUL, 0x10d0c0b0UL,\n-    0xbd26279eUL, 0x43135800UL, 0x3fd973a3UL, 0xa502d9f0UL, 0xbd152313UL,\n-    0x635bf800UL, 0x3fd914a8UL, 0x2ee6307dUL, 0xbd1766b5UL, 0xa88b3000UL,\n-    0x3fd8b639UL, 0xe5e70470UL, 0xbd205ae1UL, 0x776dc800UL, 0x3fd85855UL,\n-    0x3333778aUL, 0x3d2fd56fUL, 0x3bd81800UL, 0x3fd7fafaUL, 0xc812566aUL,\n-    0xbd272090UL, 0x687cf800UL, 0x3fd79e26UL, 0x2efd1778UL, 0x3d29ec7dUL,\n-    0x76c67800UL, 0x3fd741d8UL, 0x49dc60b3UL, 0x3d2d8b09UL, 0xe6af1800UL,\n-    0x3fd6e60eUL, 0x7c222d87UL, 0x3d172165UL, 0x3e9c6800UL, 0x3fd68ac8UL,\n-    0x2756eba0UL, 0x3d20a0d3UL, 0x0b3ab000UL, 0x3fd63003UL, 0xe731ae00UL,\n-    0xbd2db623UL, 0xdf596000UL, 0x3fd5d5bdUL, 0x08a465dcUL, 0xbd0a0b2aUL,\n-    0x53c8d000UL, 0x3fd57bf7UL, 0xee5d40efUL, 0x3d1fadedUL, 0x0738a000UL,\n-    0x3fd522aeUL, 0x8164c759UL, 0x3d2ebe70UL, 0x9e173000UL, 0x3fd4c9e0UL,\n-    0x1b0ad8a4UL, 0xbd2e2089UL, 0xc271c800UL, 0x3fd4718dUL, 0x0967d675UL,\n-    0xbd2f27ceUL, 0x23d5e800UL, 0x3fd419b4UL, 0xec90e09dUL, 0x3d08e436UL,\n-    0x77333000UL, 0x3fd3c252UL, 0xb606bd5cUL, 0x3d183b54UL, 0x76be1000UL,\n-    0x3fd36b67UL, 0xb0f177c8UL, 0x3d116ecdUL, 0xe1d36000UL, 0x3fd314f1UL,\n-    0xd3213cb8UL, 0xbd28e27aUL, 0x7cdc9000UL, 0x3fd2bef0UL, 0x4a5004f4UL,\n-    0x3d2a9cfaUL, 0x1134d800UL, 0x3fd26962UL, 0xdf5bb3b6UL, 0x3d2c93c1UL,\n-    0x6d0eb800UL, 0x3fd21445UL, 0xba46baeaUL, 0x3d0a87deUL, 0x635a6800UL,\n-    0x3fd1bf99UL, 0x5147bdb7UL, 0x3d2ca6edUL, 0xcbacf800UL, 0x3fd16b5cUL,\n-    0xf7a51681UL, 0x3d2b9acdUL, 0x8227e800UL, 0x3fd1178eUL, 0x63a5f01cUL,\n-    0xbd2c210eUL, 0x67616000UL, 0x3fd0c42dUL, 0x163ceae9UL, 0x3d27188bUL,\n-    0x604d5800UL, 0x3fd07138UL, 0x16ed4e91UL, 0x3cf89cdbUL, 0x5626c800UL,\n-    0x3fd01eaeUL, 0x1485e94aUL, 0xbd16f08cUL, 0x6cb3b000UL, 0x3fcf991cUL,\n-    0xca0cdf30UL, 0x3d1bcbecUL, 0xe4dd0000UL, 0x3fcef5adUL, 0x65bb8e11UL,\n-    0xbcca2115UL, 0xffe71000UL, 0x3fce530eUL, 0x6041f430UL, 0x3cc21227UL,\n-    0xb0d49000UL, 0x3fcdb13dUL, 0xf715b035UL, 0xbd2aff2aUL, 0xf2656000UL,\n-    0x3fcd1037UL, 0x75b6f6e4UL, 0xbd084a7eUL, 0xc6f01000UL, 0x3fcc6ffbUL,\n-    0xc5962bd2UL, 0xbcf1ec72UL, 0x383be000UL, 0x3fcbd087UL, 0x595412b6UL,\n-    0xbd2d4bc4UL, 0x575bd000UL, 0x3fcb31d8UL, 0x4eace1aaUL, 0xbd0c358dUL,\n-    0x3c8ae000UL, 0x3fca93edUL, 0x50562169UL, 0xbd287243UL, 0x07089000UL,\n-    0x3fc9f6c4UL, 0x6865817aUL, 0x3d29904dUL, 0xdcf70000UL, 0x3fc95a5aUL,\n-    0x58a0ff6fUL, 0x3d07f228UL, 0xeb390000UL, 0x3fc8beafUL, 0xaae92cd1UL,\n-    0xbd073d54UL, 0x6551a000UL, 0x3fc823c1UL, 0x9a631e83UL, 0x3d1e0ddbUL,\n-    0x85445000UL, 0x3fc7898dUL, 0x70914305UL, 0xbd1c6610UL, 0x8b757000UL,\n-    0x3fc6f012UL, 0xe59c21e1UL, 0xbd25118dUL, 0xbe8c1000UL, 0x3fc6574eUL,\n-    0x2c3c2e78UL, 0x3d19cf8bUL, 0x6b544000UL, 0x3fc5bf40UL, 0xeb68981cUL,\n-    0xbd127023UL, 0xe4a1b000UL, 0x3fc527e5UL, 0xe5697dc7UL, 0x3d2633e8UL,\n-    0x8333b000UL, 0x3fc4913dUL, 0x54fdb678UL, 0x3d258379UL, 0xa5993000UL,\n-    0x3fc3fb45UL, 0x7e6a354dUL, 0xbd2cd1d8UL, 0xb0159000UL, 0x3fc365fcUL,\n-    0x234b7289UL, 0x3cc62fa8UL, 0x0c868000UL, 0x3fc2d161UL, 0xcb81b4a1UL,\n-    0x3d039d6cUL, 0x2a49c000UL, 0x3fc23d71UL, 0x8fd3df5cUL, 0x3d100d23UL,\n-    0x7e23f000UL, 0x3fc1aa2bUL, 0x44389934UL, 0x3d2ca78eUL, 0x8227e000UL,\n-    0x3fc1178eUL, 0xce2d07f2UL, 0x3d21ef78UL, 0xb59e4000UL, 0x3fc08598UL,\n-    0x7009902cUL, 0xbd27e5ddUL, 0x39dbe000UL, 0x3fbfe891UL, 0x4fa10afdUL,\n-    0xbd2534d6UL, 0x830a2000UL, 0x3fbec739UL, 0xafe645e0UL, 0xbd2dc068UL,\n-    0x63844000UL, 0x3fbda727UL, 0x1fa71733UL, 0x3d1a8940UL, 0x01bc4000UL,\n-    0x3fbc8858UL, 0xc65aacd3UL, 0x3d2646d1UL, 0x8dad6000UL, 0x3fbb6ac8UL,\n-    0x2bf768e5UL, 0xbd139080UL, 0x40b1c000UL, 0x3fba4e76UL, 0xb94407c8UL,\n-    0xbd0e42b6UL, 0x5d594000UL, 0x3fb9335eUL, 0x3abd47daUL, 0x3d23115cUL,\n-    0x2f40e000UL, 0x3fb8197eUL, 0xf96ffdf7UL, 0x3d0f80dcUL, 0x0aeac000UL,\n-    0x3fb700d3UL, 0xa99ded32UL, 0x3cec1e8dUL, 0x4d97a000UL, 0x3fb5e95aUL,\n-    0x3c5d1d1eUL, 0xbd2c6906UL, 0x5d208000UL, 0x3fb4d311UL, 0x82f4e1efUL,\n-    0xbcf53a25UL, 0xa7d1e000UL, 0x3fb3bdf5UL, 0xa5db4ed7UL, 0x3d2cc85eUL,\n-    0xa4472000UL, 0x3fb2aa04UL, 0xae9c697dUL, 0xbd20b6e8UL, 0xd1466000UL,\n-    0x3fb1973bUL, 0x560d9e9bUL, 0xbd25325dUL, 0xb59e4000UL, 0x3fb08598UL,\n-    0x7009902cUL, 0xbd17e5ddUL, 0xc006c000UL, 0x3faeea31UL, 0x4fc93b7bUL,\n-    0xbd0e113eUL, 0xcdddc000UL, 0x3faccb73UL, 0x47d82807UL, 0xbd1a68f2UL,\n-    0xd0fb0000UL, 0x3faaaef2UL, 0x353bb42eUL, 0x3d20fc1aUL, 0x149fc000UL,\n-    0x3fa894aaUL, 0xd05a267dUL, 0xbd197995UL, 0xf2d4c000UL, 0x3fa67c94UL,\n-    0xec19afa2UL, 0xbd029efbUL, 0xd42e0000UL, 0x3fa466aeUL, 0x75bdfd28UL,\n-    0xbd2c1673UL, 0x2f8d0000UL, 0x3fa252f3UL, 0xe021b67bUL, 0x3d283e9aUL,\n-    0x89e74000UL, 0x3fa0415dUL, 0x5cf1d753UL, 0x3d0111c0UL, 0xec148000UL,\n-    0x3f9c63d2UL, 0x3f9eb2f3UL, 0x3d2578c6UL, 0x28c90000UL, 0x3f984925UL,\n-    0x325a0c34UL, 0xbd2aa0baUL, 0x25980000UL, 0x3f9432a9UL, 0x928637feUL,\n-    0x3d098139UL, 0x58938000UL, 0x3f902056UL, 0x06e2f7d2UL, 0xbd23dc5bUL,\n-    0xa3890000UL, 0x3f882448UL, 0xda74f640UL, 0xbd275577UL, 0x75890000UL,\n-    0x3f801015UL, 0x999d2be8UL, 0xbd10c76bUL, 0x59580000UL, 0x3f700805UL,\n-    0xcb31c67bUL, 0x3d2166afUL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n-    0x80000000UL, 0xfefa3800UL, 0x3fa62e42UL, 0x93c76730UL, 0x3ceef357UL,\n-    0x92492492UL, 0x3fc24924UL, 0x00000000UL, 0xbfd00000UL, 0x3d6fb175UL,\n-    0xbfc5555eUL, 0x55555555UL, 0x3fd55555UL, 0x9999999aUL, 0x3fc99999UL,\n-    0x00000000UL, 0xbfe00000UL, 0x00000000UL, 0xffffe000UL, 0x00000000UL,\n-    0xffffe000UL\n-};\n-\/\/registers,\n-\/\/ input: xmm0\n-\/\/ scratch: xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7\n-\/\/          rax, rdx, rcx, rbx (tmp)\n-\n-void MacroAssembler::fast_log(XMMRegister xmm0, XMMRegister xmm1, XMMRegister xmm2, XMMRegister xmm3,\n-                              XMMRegister xmm4, XMMRegister xmm5, XMMRegister xmm6, XMMRegister xmm7,\n-                              Register eax, Register ecx, Register edx, Register tmp) {\n-  Label L_2TAG_PACKET_0_0_2, L_2TAG_PACKET_1_0_2, L_2TAG_PACKET_2_0_2, L_2TAG_PACKET_3_0_2;\n-  Label L_2TAG_PACKET_4_0_2, L_2TAG_PACKET_5_0_2, L_2TAG_PACKET_6_0_2, L_2TAG_PACKET_7_0_2;\n-  Label L_2TAG_PACKET_8_0_2, L_2TAG_PACKET_9_0_2;\n-  Label L_2TAG_PACKET_10_0_2;\n-\n-  assert_different_registers(tmp, eax, ecx, edx);\n-  address static_const_table = (address)_static_const_table_log;\n-\n-  subl(rsp, 104);\n-  movl(Address(rsp, 40), tmp);\n-  lea(tmp, ExternalAddress(static_const_table));\n-  xorpd(xmm2, xmm2);\n-  movl(eax, 16368);\n-  pinsrw(xmm2, eax, 3);\n-  xorpd(xmm3, xmm3);\n-  movl(edx, 30704);\n-  pinsrw(xmm3, edx, 3);\n-  movsd(xmm0, Address(rsp, 112));\n-  movapd(xmm1, xmm0);\n-  movl(ecx, 32768);\n-  movdl(xmm4, ecx);\n-  movsd(xmm5, Address(tmp, 2128));         \/\/ 0x00000000UL, 0xffffe000UL\n-  pextrw(eax, xmm0, 3);\n-  por(xmm0, xmm2);\n-  psllq(xmm0, 5);\n-  movl(ecx, 16352);\n-  psrlq(xmm0, 34);\n-  rcpss(xmm0, xmm0);\n-  psllq(xmm1, 12);\n-  pshufd(xmm6, xmm5, 228);\n-  psrlq(xmm1, 12);\n-  subl(eax, 16);\n-  cmpl(eax, 32736);\n-  jcc(Assembler::aboveEqual, L_2TAG_PACKET_0_0_2);\n-\n-  bind(L_2TAG_PACKET_1_0_2);\n-  paddd(xmm0, xmm4);\n-  por(xmm1, xmm3);\n-  movdl(edx, xmm0);\n-  psllq(xmm0, 29);\n-  pand(xmm5, xmm1);\n-  pand(xmm0, xmm6);\n-  subsd(xmm1, xmm5);\n-  mulpd(xmm5, xmm0);\n-  andl(eax, 32752);\n-  subl(eax, ecx);\n-  cvtsi2sdl(xmm7, eax);\n-  mulsd(xmm1, xmm0);\n-  movsd(xmm6, Address(tmp, 2064));         \/\/ 0xfefa3800UL, 0x3fa62e42UL\n-  movdqu(xmm3, Address(tmp, 2080));        \/\/ 0x92492492UL, 0x3fc24924UL, 0x00000000UL, 0xbfd00000UL\n-  subsd(xmm5, xmm2);\n-  andl(edx, 16711680);\n-  shrl(edx, 12);\n-  movdqu(xmm0, Address(tmp, edx));\n-  movdqu(xmm4, Address(tmp, 2096));        \/\/ 0x3d6fb175UL, 0xbfc5555eUL, 0x55555555UL, 0x3fd55555UL\n-  addsd(xmm1, xmm5);\n-  movdqu(xmm2, Address(tmp, 2112));        \/\/ 0x9999999aUL, 0x3fc99999UL, 0x00000000UL, 0xbfe00000UL\n-  mulsd(xmm6, xmm7);\n-  pshufd(xmm5, xmm1, 68);\n-  mulsd(xmm7, Address(tmp, 2072));         \/\/ 0x93c76730UL, 0x3ceef357UL, 0x92492492UL, 0x3fc24924UL\n-  mulsd(xmm3, xmm1);\n-  addsd(xmm0, xmm6);\n-  mulpd(xmm4, xmm5);\n-  mulpd(xmm5, xmm5);\n-  pshufd(xmm6, xmm0, 228);\n-  addsd(xmm0, xmm1);\n-  addpd(xmm4, xmm2);\n-  mulpd(xmm3, xmm5);\n-  subsd(xmm6, xmm0);\n-  mulsd(xmm4, xmm1);\n-  pshufd(xmm2, xmm0, 238);\n-  addsd(xmm1, xmm6);\n-  mulsd(xmm5, xmm5);\n-  addsd(xmm7, xmm2);\n-  addpd(xmm4, xmm3);\n-  addsd(xmm1, xmm7);\n-  mulpd(xmm4, xmm5);\n-  addsd(xmm1, xmm4);\n-  pshufd(xmm5, xmm4, 238);\n-  addsd(xmm1, xmm5);\n-  addsd(xmm0, xmm1);\n-  jmp(L_2TAG_PACKET_2_0_2);\n-\n-  bind(L_2TAG_PACKET_0_0_2);\n-  movsd(xmm0, Address(rsp, 112));\n-  movdqu(xmm1, xmm0);\n-  addl(eax, 16);\n-  cmpl(eax, 32768);\n-  jcc(Assembler::aboveEqual, L_2TAG_PACKET_3_0_2);\n-  cmpl(eax, 16);\n-  jcc(Assembler::below, L_2TAG_PACKET_4_0_2);\n-\n-  bind(L_2TAG_PACKET_5_0_2);\n-  addsd(xmm0, xmm0);\n-  jmp(L_2TAG_PACKET_2_0_2);\n-\n-  bind(L_2TAG_PACKET_6_0_2);\n-  jcc(Assembler::above, L_2TAG_PACKET_5_0_2);\n-  cmpl(edx, 0);\n-  jcc(Assembler::above, L_2TAG_PACKET_5_0_2);\n-  jmp(L_2TAG_PACKET_7_0_2);\n-\n-  bind(L_2TAG_PACKET_3_0_2);\n-  movdl(edx, xmm1);\n-  psrlq(xmm1, 32);\n-  movdl(ecx, xmm1);\n-  addl(ecx, ecx);\n-  cmpl(ecx, -2097152);\n-  jcc(Assembler::aboveEqual, L_2TAG_PACKET_6_0_2);\n-  orl(edx, ecx);\n-  cmpl(edx, 0);\n-  jcc(Assembler::equal, L_2TAG_PACKET_8_0_2);\n-\n-  bind(L_2TAG_PACKET_7_0_2);\n-  xorpd(xmm1, xmm1);\n-  xorpd(xmm0, xmm0);\n-  movl(eax, 32752);\n-  pinsrw(xmm1, eax, 3);\n-  movl(edx, 3);\n-  mulsd(xmm0, xmm1);\n-\n-  bind(L_2TAG_PACKET_9_0_2);\n-  movsd(Address(rsp, 0), xmm0);\n-  movsd(xmm0, Address(rsp, 112));\n-  fld_d(Address(rsp, 0));\n-  jmp(L_2TAG_PACKET_10_0_2);\n-\n-  bind(L_2TAG_PACKET_8_0_2);\n-  xorpd(xmm1, xmm1);\n-  xorpd(xmm0, xmm0);\n-  movl(eax, 49136);\n-  pinsrw(xmm0, eax, 3);\n-  divsd(xmm0, xmm1);\n-  movl(edx, 2);\n-  jmp(L_2TAG_PACKET_9_0_2);\n-\n-  bind(L_2TAG_PACKET_4_0_2);\n-  movdl(edx, xmm1);\n-  psrlq(xmm1, 32);\n-  movdl(ecx, xmm1);\n-  orl(edx, ecx);\n-  cmpl(edx, 0);\n-  jcc(Assembler::equal, L_2TAG_PACKET_8_0_2);\n-  xorpd(xmm1, xmm1);\n-  movl(eax, 18416);\n-  pinsrw(xmm1, eax, 3);\n-  mulsd(xmm0, xmm1);\n-  movapd(xmm1, xmm0);\n-  pextrw(eax, xmm0, 3);\n-  por(xmm0, xmm2);\n-  psllq(xmm0, 5);\n-  movl(ecx, 18416);\n-  psrlq(xmm0, 34);\n-  rcpss(xmm0, xmm0);\n-  psllq(xmm1, 12);\n-  pshufd(xmm6, xmm5, 228);\n-  psrlq(xmm1, 12);\n-  jmp(L_2TAG_PACKET_1_0_2);\n-\n-  bind(L_2TAG_PACKET_2_0_2);\n-  movsd(Address(rsp, 24), xmm0);\n-  fld_d(Address(rsp, 24));\n-\n-  bind(L_2TAG_PACKET_10_0_2);\n-  movl(tmp, Address(rsp, 40));\n-}\n-#endif\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86_log.cpp","additions":0,"deletions":651,"binary":false,"changes":651,"status":"deleted"},{"patch":"@@ -1,684 +0,0 @@\n-\/*\n-* Copyright (c) 2016, 2021, Intel Corporation. All rights reserved.\n-* Intel Math Library (LIBM) Source Code\n-*\n-* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-*\n-* This code is free software; you can redistribute it and\/or modify it\n-* under the terms of the GNU General Public License version 2 only, as\n-* published by the Free Software Foundation.\n-*\n-* This code is distributed in the hope that it will be useful, but WITHOUT\n-* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-* version 2 for more details (a copy is included in the LICENSE file that\n-* accompanied this code).\n-*\n-* You should have received a copy of the GNU General Public License version\n-* 2 along with this work; if not, write to the Free Software Foundation,\n-* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-*\n-* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-* or visit www.oracle.com if you need additional information or have any\n-* questions.\n-*\n-*\/\n-\n-#include \"precompiled.hpp\"\n-#include \"asm\/assembler.hpp\"\n-#include \"asm\/assembler.inline.hpp\"\n-#include \"macroAssembler_x86.hpp\"\n-#include \"runtime\/stubRoutines.hpp\"\n-#include \"utilities\/globalDefinitions.hpp\"\n-\n-\/******************************************************************************\/\n-\/\/                     ALGORITHM DESCRIPTION - LOG10()\n-\/\/                     ---------------------\n-\/\/\n-\/\/    Let x=2^k * mx, mx in [1,2)\n-\/\/\n-\/\/    Get B~1\/mx based on the output of rcpss instruction (B0)\n-\/\/    B = int((B0*LH*2^7+0.5))\/2^7\n-\/\/    LH is a short approximation for log10(e)\n-\/\/\n-\/\/    Reduced argument: r=B*mx-LH (computed accurately in high and low parts)\n-\/\/\n-\/\/    Result:  k*log10(2) - log(B) + p(r)\n-\/\/             p(r) is a degree 7 polynomial\n-\/\/             -log(B) read from data table (high, low parts)\n-\/\/             Result is formed from high and low parts\n-\/\/\n-\/\/ Special cases:\n-\/\/  log10(0) = -INF with divide-by-zero exception raised\n-\/\/  log10(1) = +0\n-\/\/  log10(x) = NaN with invalid exception raised if x < -0, including -INF\n-\/\/  log10(+INF) = +INF\n-\/\/\n-\/******************************************************************************\/\n-\n-#ifdef _LP64\n-\/\/ The 64 bit code is at most SSE2 compliant\n-ATTRIBUTE_ALIGNED(16) juint _HIGHSIGMASK_log10[] =\n-{\n-    0xf8000000UL, 0xffffffffUL, 0x00000000UL, 0xffffe000UL\n-};\n-\n-ATTRIBUTE_ALIGNED(16) juint _LOG10_E[] =\n-{\n-    0x00000000UL, 0x3fdbc000UL, 0xbf2e4108UL, 0x3f5a7a6cUL\n-};\n-\n-ATTRIBUTE_ALIGNED(16) juint _L_tbl_log10[] =\n-{\n-    0x509f7800UL, 0x3fd34413UL, 0x1f12b358UL, 0x3d1fef31UL, 0x80333400UL,\n-    0x3fd32418UL, 0xc671d9d0UL, 0xbcf542bfUL, 0x51195000UL, 0x3fd30442UL,\n-    0x78a4b0c3UL, 0x3d18216aUL, 0x6fc79400UL, 0x3fd2e490UL, 0x80fa389dUL,\n-    0xbc902869UL, 0x89d04000UL, 0x3fd2c502UL, 0x75c2f564UL, 0x3d040754UL,\n-    0x4ddd1c00UL, 0x3fd2a598UL, 0xd219b2c3UL, 0xbcfa1d84UL, 0x6baa7c00UL,\n-    0x3fd28651UL, 0xfd9abec1UL, 0x3d1be6d3UL, 0x94028800UL, 0x3fd2672dUL,\n-    0xe289a455UL, 0xbd1ede5eUL, 0x78b86400UL, 0x3fd2482cUL, 0x6734d179UL,\n-    0x3d1fe79bUL, 0xcca3c800UL, 0x3fd2294dUL, 0x981a40b8UL, 0xbced34eaUL,\n-    0x439c5000UL, 0x3fd20a91UL, 0xcc392737UL, 0xbd1a9cc3UL, 0x92752c00UL,\n-    0x3fd1ebf6UL, 0x03c9afe7UL, 0x3d1e98f8UL, 0x6ef8dc00UL, 0x3fd1cd7dUL,\n-    0x71dae7f4UL, 0x3d08a86cUL, 0x8fe4dc00UL, 0x3fd1af25UL, 0xee9185a1UL,\n-    0xbcff3412UL, 0xace59400UL, 0x3fd190eeUL, 0xc2cab353UL, 0x3cf17ed9UL,\n-    0x7e925000UL, 0x3fd172d8UL, 0x6952c1b2UL, 0x3cf1521cUL, 0xbe694400UL,\n-    0x3fd154e2UL, 0xcacb79caUL, 0xbd0bdc78UL, 0x26cbac00UL, 0x3fd1370dUL,\n-    0xf71f4de1UL, 0xbd01f8beUL, 0x72fa0800UL, 0x3fd11957UL, 0x55bf910bUL,\n-    0x3c946e2bUL, 0x5f106000UL, 0x3fd0fbc1UL, 0x39e639c1UL, 0x3d14a84bUL,\n-    0xa802a800UL, 0x3fd0de4aUL, 0xd3f31d5dUL, 0xbd178385UL, 0x0b992000UL,\n-    0x3fd0c0f3UL, 0x3843106fUL, 0xbd1f602fUL, 0x486ce800UL, 0x3fd0a3baUL,\n-    0x8819497cUL, 0x3cef987aUL, 0x1de49400UL, 0x3fd086a0UL, 0x1caa0467UL,\n-    0x3d0faec7UL, 0x4c30cc00UL, 0x3fd069a4UL, 0xa4424372UL, 0xbd1618fcUL,\n-    0x94490000UL, 0x3fd04cc6UL, 0x946517d2UL, 0xbd18384bUL, 0xb7e84000UL,\n-    0x3fd03006UL, 0xe0109c37UL, 0xbd19a6acUL, 0x798a0c00UL, 0x3fd01364UL,\n-    0x5121e864UL, 0xbd164cf7UL, 0x38ce8000UL, 0x3fcfedbfUL, 0x46214d1aUL,\n-    0xbcbbc402UL, 0xc8e62000UL, 0x3fcfb4efUL, 0xdab93203UL, 0x3d1e0176UL,\n-    0x2cb02800UL, 0x3fcf7c5aUL, 0x2a2ea8e4UL, 0xbcfec86aUL, 0xeeeaa000UL,\n-    0x3fcf43fdUL, 0xc18e49a4UL, 0x3cf110a8UL, 0x9bb6e800UL, 0x3fcf0bdaUL,\n-    0x923cc9c0UL, 0xbd15ce99UL, 0xc093f000UL, 0x3fced3efUL, 0x4d4b51e9UL,\n-    0x3d1a04c7UL, 0xec58f800UL, 0x3fce9c3cUL, 0x163cad59UL, 0x3cac8260UL,\n-    0x9a907000UL, 0x3fce2d7dUL, 0x3fa93646UL, 0x3ce4a1c0UL, 0x37311000UL,\n-    0x3fcdbf99UL, 0x32abd1fdUL, 0x3d07ea9dUL, 0x6744b800UL, 0x3fcd528cUL,\n-    0x4dcbdfd4UL, 0xbd1b08e2UL, 0xe36de800UL, 0x3fcce653UL, 0x0b7b7f7fUL,\n-    0xbd1b8f03UL, 0x77506800UL, 0x3fcc7aecUL, 0xa821c9fbUL, 0x3d13c163UL,\n-    0x00ff8800UL, 0x3fcc1053UL, 0x536bca76UL, 0xbd074ee5UL, 0x70719800UL,\n-    0x3fcba684UL, 0xd7da9b6bUL, 0xbd1fbf16UL, 0xc6f8d800UL, 0x3fcb3d7dUL,\n-    0xe2220bb3UL, 0x3d1a295dUL, 0x16c15800UL, 0x3fcad53cUL, 0xe724911eUL,\n-    0xbcf55822UL, 0x82533800UL, 0x3fca6dbcUL, 0x6d982371UL, 0x3cac567cUL,\n-    0x3c19e800UL, 0x3fca06fcUL, 0x84d17d80UL, 0x3d1da204UL, 0x85ef8000UL,\n-    0x3fc9a0f8UL, 0x54466a6aUL, 0xbd002204UL, 0xb0ac2000UL, 0x3fc93baeUL,\n-    0xd601fd65UL, 0x3d18840cUL, 0x1bb9b000UL, 0x3fc8d71cUL, 0x7bf58766UL,\n-    0xbd14f897UL, 0x34aae800UL, 0x3fc8733eUL, 0x3af6ac24UL, 0xbd0f5c45UL,\n-    0x76d68000UL, 0x3fc81012UL, 0x4303e1a1UL, 0xbd1f9a80UL, 0x6af57800UL,\n-    0x3fc7ad96UL, 0x43fbcb46UL, 0x3cf4c33eUL, 0xa6c51000UL, 0x3fc74bc7UL,\n-    0x70f0eac5UL, 0xbd192e3bUL, 0xccab9800UL, 0x3fc6eaa3UL, 0xc0093dfeUL,\n-    0xbd0faf15UL, 0x8b60b800UL, 0x3fc68a28UL, 0xde78d5fdUL, 0xbc9ea4eeUL,\n-    0x9d987000UL, 0x3fc62a53UL, 0x962bea6eUL, 0xbd194084UL, 0xc9b0e800UL,\n-    0x3fc5cb22UL, 0x888dd999UL, 0x3d1fe201UL, 0xe1634800UL, 0x3fc56c93UL,\n-    0x16ada7adUL, 0x3d1b1188UL, 0xc176c000UL, 0x3fc50ea4UL, 0x4159b5b5UL,\n-    0xbcf09c08UL, 0x51766000UL, 0x3fc4b153UL, 0x84393d23UL, 0xbcf6a89cUL,\n-    0x83695000UL, 0x3fc4549dUL, 0x9f0b8bbbUL, 0x3d1c4b8cUL, 0x538d5800UL,\n-    0x3fc3f881UL, 0xf49df747UL, 0x3cf89b99UL, 0xc8138000UL, 0x3fc39cfcUL,\n-    0xd503b834UL, 0xbd13b99fUL, 0xf0df0800UL, 0x3fc3420dUL, 0xf011b386UL,\n-    0xbd05d8beUL, 0xe7466800UL, 0x3fc2e7b2UL, 0xf39c7bc2UL, 0xbd1bb94eUL,\n-    0xcdd62800UL, 0x3fc28de9UL, 0x05e6d69bUL, 0xbd10ed05UL, 0xd015d800UL,\n-    0x3fc234b0UL, 0xe29b6c9dUL, 0xbd1ff967UL, 0x224ea800UL, 0x3fc1dc06UL,\n-    0x727711fcUL, 0xbcffb30dUL, 0x01540000UL, 0x3fc183e8UL, 0x39786c5aUL,\n-    0x3cc23f57UL, 0xb24d9800UL, 0x3fc12c54UL, 0xc905a342UL, 0x3d003a1dUL,\n-    0x82835800UL, 0x3fc0d54aUL, 0x9b9920c0UL, 0x3d03b25aUL, 0xc72ac000UL,\n-    0x3fc07ec7UL, 0x46f26a24UL, 0x3cf0fa41UL, 0xdd35d800UL, 0x3fc028caUL,\n-    0x41d9d6dcUL, 0x3d034a65UL, 0x52474000UL, 0x3fbfa6a4UL, 0x44f66449UL,\n-    0x3d19cad3UL, 0x2da3d000UL, 0x3fbefcb8UL, 0x67832999UL, 0x3d18400fUL,\n-    0x32a10000UL, 0x3fbe53ceUL, 0x9c0e3b1aUL, 0xbcff62fdUL, 0x556b7000UL,\n-    0x3fbdabe3UL, 0x02976913UL, 0xbcf8243bUL, 0x97e88000UL, 0x3fbd04f4UL,\n-    0xec793797UL, 0x3d1c0578UL, 0x09647000UL, 0x3fbc5effUL, 0x05fc0565UL,\n-    0xbd1d799eUL, 0xc6426000UL, 0x3fbbb9ffUL, 0x4625f5edUL, 0x3d1f5723UL,\n-    0xf7afd000UL, 0x3fbb15f3UL, 0xdd5aae61UL, 0xbd1a7e1eUL, 0xd358b000UL,\n-    0x3fba72d8UL, 0x3314e4d3UL, 0x3d17bc91UL, 0x9b1f5000UL, 0x3fb9d0abUL,\n-    0x9a4d514bUL, 0x3cf18c9bUL, 0x9cd4e000UL, 0x3fb92f69UL, 0x7e4496abUL,\n-    0x3cf1f96dUL, 0x31f4f000UL, 0x3fb88f10UL, 0xf56479e7UL, 0x3d165818UL,\n-    0xbf628000UL, 0x3fb7ef9cUL, 0x26bf486dUL, 0xbd1113a6UL, 0xb526b000UL,\n-    0x3fb7510cUL, 0x1a1c3384UL, 0x3ca9898dUL, 0x8e31e000UL, 0x3fb6b35dUL,\n-    0xb3875361UL, 0xbd0661acUL, 0xd01de000UL, 0x3fb6168cUL, 0x2a7cacfaUL,\n-    0xbd1bdf10UL, 0x0af23000UL, 0x3fb57a98UL, 0xff868816UL, 0x3cf046d0UL,\n-    0xd8ea0000UL, 0x3fb4df7cUL, 0x1515fbe7UL, 0xbd1fd529UL, 0xde3b2000UL,\n-    0x3fb44538UL, 0x6e59a132UL, 0x3d1faeeeUL, 0xc8df9000UL, 0x3fb3abc9UL,\n-    0xf1322361UL, 0xbd198807UL, 0x505f1000UL, 0x3fb3132dUL, 0x0888e6abUL,\n-    0x3d1e5380UL, 0x359bd000UL, 0x3fb27b61UL, 0xdfbcbb22UL, 0xbcfe2724UL,\n-    0x429ee000UL, 0x3fb1e463UL, 0x6eb4c58cUL, 0xbcfe4dd6UL, 0x4a673000UL,\n-    0x3fb14e31UL, 0x4ce1ac9bUL, 0x3d1ba691UL, 0x28b96000UL, 0x3fb0b8c9UL,\n-    0x8c7813b8UL, 0xbd0b3872UL, 0xc1f08000UL, 0x3fb02428UL, 0xc2bc8c2cUL,\n-    0x3cb5ea6bUL, 0x05a1a000UL, 0x3faf209cUL, 0x72e8f18eUL, 0xbce8df84UL,\n-    0xc0b5e000UL, 0x3fadfa6dUL, 0x9fdef436UL, 0x3d087364UL, 0xaf416000UL,\n-    0x3facd5c2UL, 0x1068c3a9UL, 0x3d0827e7UL, 0xdb356000UL, 0x3fabb296UL,\n-    0x120a34d3UL, 0x3d101a9fUL, 0x5dfea000UL, 0x3faa90e6UL, 0xdaded264UL,\n-    0xbd14c392UL, 0x6034c000UL, 0x3fa970adUL, 0x1c9d06a9UL, 0xbd1b705eUL,\n-    0x194c6000UL, 0x3fa851e8UL, 0x83996ad9UL, 0xbd0117bcUL, 0xcf4ac000UL,\n-    0x3fa73492UL, 0xb1a94a62UL, 0xbca5ea42UL, 0xd67b4000UL, 0x3fa618a9UL,\n-    0x75aed8caUL, 0xbd07119bUL, 0x9126c000UL, 0x3fa4fe29UL, 0x5291d533UL,\n-    0x3d12658fUL, 0x6f4d4000UL, 0x3fa3e50eUL, 0xcd2c5cd9UL, 0x3d1d5c70UL,\n-    0xee608000UL, 0x3fa2cd54UL, 0xd1008489UL, 0x3d1a4802UL, 0x9900e000UL,\n-    0x3fa1b6f9UL, 0x54fb5598UL, 0xbd16593fUL, 0x06bb6000UL, 0x3fa0a1f9UL,\n-    0x64ef57b4UL, 0xbd17636bUL, 0xb7940000UL, 0x3f9f1c9fUL, 0xee6a4737UL,\n-    0x3cb5d479UL, 0x91aa0000UL, 0x3f9cf7f5UL, 0x3a16373cUL, 0x3d087114UL,\n-    0x156b8000UL, 0x3f9ad5edUL, 0x836c554aUL, 0x3c6900b0UL, 0xd4764000UL,\n-    0x3f98b67fUL, 0xed12f17bUL, 0xbcffc974UL, 0x77dec000UL, 0x3f9699a7UL,\n-    0x232ce7eaUL, 0x3d1e35bbUL, 0xbfbf4000UL, 0x3f947f5dUL, 0xd84ffa6eUL,\n-    0x3d0e0a49UL, 0x82c7c000UL, 0x3f92679cUL, 0x8d170e90UL, 0xbd14d9f2UL,\n-    0xadd20000UL, 0x3f90525dUL, 0x86d9f88eUL, 0x3cdeb986UL, 0x86f10000UL,\n-    0x3f8c7f36UL, 0xb9e0a517UL, 0x3ce29faaUL, 0xb75c8000UL, 0x3f885e9eUL,\n-    0x542568cbUL, 0xbd1f7bdbUL, 0x46b30000UL, 0x3f8442e8UL, 0xb954e7d9UL,\n-    0x3d1e5287UL, 0xb7e60000UL, 0x3f802c07UL, 0x22da0b17UL, 0xbd19fb27UL,\n-    0x6c8b0000UL, 0x3f7833e3UL, 0x821271efUL, 0xbd190f96UL, 0x29910000UL,\n-    0x3f701936UL, 0xbc3491a5UL, 0xbd1bcf45UL, 0x354a0000UL, 0x3f600fe3UL,\n-    0xc0ff520aUL, 0xbd19d71cUL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n-    0x00000000UL\n-};\n-\n-ATTRIBUTE_ALIGNED(16) juint _log2_log10[] =\n-{\n-    0x509f7800UL, 0x3f934413UL, 0x1f12b358UL, 0x3cdfef31UL\n-};\n-\n-ATTRIBUTE_ALIGNED(16) juint _coeff_log10[] =\n-{\n-    0xc1a5f12eUL, 0x40358874UL, 0x64d4ef0dUL, 0xc0089309UL, 0x385593b1UL,\n-    0xc025c917UL, 0xdc963467UL, 0x3ffc6a02UL, 0x7f9d3aa1UL, 0x4016ab9fUL,\n-    0xdc77b115UL, 0xbff27af2UL\n-};\n-\n-\/\/ Registers:\n-\/\/ input: xmm0\n-\/\/ scratch: xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7\n-\/\/          rax, rdx, rcx, r11, tmp\n-\n-\/\/ Code generated by Intel C compiler for LIBM library\n-\n-void MacroAssembler::fast_log10(XMMRegister xmm0, XMMRegister xmm1, XMMRegister xmm2, XMMRegister xmm3,\n-                                XMMRegister xmm4, XMMRegister xmm5, XMMRegister xmm6, XMMRegister xmm7,\n-                                Register eax, Register ecx, Register edx, Register r11, Register tmp) {\n-  Label L_2TAG_PACKET_0_0_2, L_2TAG_PACKET_1_0_2, L_2TAG_PACKET_2_0_2, L_2TAG_PACKET_3_0_2;\n-  Label L_2TAG_PACKET_4_0_2, L_2TAG_PACKET_5_0_2, L_2TAG_PACKET_6_0_2, L_2TAG_PACKET_7_0_2;\n-  Label L_2TAG_PACKET_8_0_2, L_2TAG_PACKET_9_0_2, B1_2, B1_3, B1_5;\n-\n-  assert_different_registers(r11, eax, ecx, edx);\n-\n-  address HIGHSIGMASK = (address)_HIGHSIGMASK_log10;\n-  address LOG10_E = (address)_LOG10_E;\n-  address L_tbl = (address)_L_tbl_log10;\n-  address log2 = (address)_log2_log10;\n-  address coeff = (address)_coeff_log10;\n-\n-  subq(rsp, 24);\n-  movsd(Address(rsp, 0), xmm0);\n-\n-  bind(B1_2);\n-  xorpd(xmm2, xmm2);\n-  movl(eax, 16368);\n-  pinsrw(xmm2, eax, 3);\n-  movl(ecx, 1054736384);\n-  movdl(xmm7, ecx);\n-  xorpd(xmm3, xmm3);\n-  movl(edx, 30704);\n-  pinsrw(xmm3, edx, 3);\n-  movdqu(xmm1, xmm0);\n-  movl(edx, 32768);\n-  movdl(xmm4, edx);\n-  movdqu(xmm5, ExternalAddress(HIGHSIGMASK), tmp \/*rscratch*\/);    \/\/0xf8000000UL, 0xffffffffUL, 0x00000000UL, 0xffffe000UL\n-  pextrw(eax, xmm0, 3);\n-  por(xmm0, xmm2);\n-  movl(ecx, 16352);\n-  psrlq(xmm0, 27);\n-  movdqu(xmm2, ExternalAddress(LOG10_E), tmp \/*rscratch*\/);    \/\/0x00000000UL, 0x3fdbc000UL, 0xbf2e4108UL, 0x3f5a7a6cUL\n-  psrld(xmm0, 2);\n-  rcpps(xmm0, xmm0);\n-  psllq(xmm1, 12);\n-  pshufd(xmm6, xmm5, 78);\n-  psrlq(xmm1, 12);\n-  subl(eax, 16);\n-  cmpl(eax, 32736);\n-  jcc(Assembler::aboveEqual, L_2TAG_PACKET_0_0_2);\n-\n-  bind(L_2TAG_PACKET_1_0_2);\n-  mulss(xmm0, xmm7);\n-  por(xmm1, xmm3);\n-  lea(r11, ExternalAddress(L_tbl));\n-  andpd(xmm5, xmm1);\n-  paddd(xmm0, xmm4);\n-  subsd(xmm1, xmm5);\n-  movdl(edx, xmm0);\n-  psllq(xmm0, 29);\n-  andpd(xmm0, xmm6);\n-  andl(eax, 32752);\n-  subl(eax, ecx);\n-  cvtsi2sdl(xmm7, eax);\n-  mulpd(xmm5, xmm0);\n-  mulsd(xmm1, xmm0);\n-  movq(xmm6, ExternalAddress(log2), tmp \/*rscratch*\/);    \/\/0x509f7800UL, 0x3f934413UL, 0x1f12b358UL, 0x3cdfef31UL\n-  movdqu(xmm3, ExternalAddress(coeff), tmp \/*rscratch*\/);    \/\/0xc1a5f12eUL, 0x40358874UL, 0x64d4ef0dUL, 0xc0089309UL\n-  subsd(xmm5, xmm2);\n-  andl(edx, 16711680);\n-  shrl(edx, 12);\n-  movdqu(xmm0, Address(r11, rdx, Address::times_1, -1504));\n-  movdqu(xmm4, ExternalAddress(coeff + 16), tmp \/*rscratch*\/);    \/\/0x385593b1UL, 0xc025c917UL, 0xdc963467UL, 0x3ffc6a02UL\n-  addsd(xmm1, xmm5);\n-  movdqu(xmm2, ExternalAddress(coeff + 32), tmp \/*rscratch*\/);    \/\/0x7f9d3aa1UL, 0x4016ab9fUL, 0xdc77b115UL, 0xbff27af2UL\n-  mulsd(xmm6, xmm7);\n-  pshufd(xmm5, xmm1, 68);\n-  mulsd(xmm7, ExternalAddress(log2 + 8), tmp \/*rscratch*\/);    \/\/0x1f12b358UL, 0x3cdfef31UL\n-  mulsd(xmm3, xmm1);\n-  addsd(xmm0, xmm6);\n-  mulpd(xmm4, xmm5);\n-  movq(xmm6, ExternalAddress(LOG10_E + 8), tmp \/*rscratch*\/);    \/\/0xbf2e4108UL, 0x3f5a7a6cUL\n-  mulpd(xmm5, xmm5);\n-  addpd(xmm4, xmm2);\n-  mulpd(xmm3, xmm5);\n-  pshufd(xmm2, xmm0, 228);\n-  addsd(xmm0, xmm1);\n-  mulsd(xmm4, xmm1);\n-  subsd(xmm2, xmm0);\n-  mulsd(xmm6, xmm1);\n-  addsd(xmm1, xmm2);\n-  pshufd(xmm2, xmm0, 238);\n-  mulsd(xmm5, xmm5);\n-  addsd(xmm7, xmm2);\n-  addsd(xmm1, xmm6);\n-  addpd(xmm4, xmm3);\n-  addsd(xmm1, xmm7);\n-  mulpd(xmm4, xmm5);\n-  addsd(xmm1, xmm4);\n-  pshufd(xmm5, xmm4, 238);\n-  addsd(xmm1, xmm5);\n-  addsd(xmm0, xmm1);\n-  jmp(B1_5);\n-\n-  bind(L_2TAG_PACKET_0_0_2);\n-  movq(xmm0, Address(rsp, 0));\n-  movq(xmm1, Address(rsp, 0));\n-  addl(eax, 16);\n-  cmpl(eax, 32768);\n-  jcc(Assembler::aboveEqual, L_2TAG_PACKET_2_0_2);\n-  cmpl(eax, 16);\n-  jcc(Assembler::below, L_2TAG_PACKET_3_0_2);\n-\n-  bind(L_2TAG_PACKET_4_0_2);\n-  addsd(xmm0, xmm0);\n-  jmp(B1_5);\n-\n-  bind(L_2TAG_PACKET_5_0_2);\n-  jcc(Assembler::above, L_2TAG_PACKET_4_0_2);\n-  cmpl(edx, 0);\n-  jcc(Assembler::above, L_2TAG_PACKET_4_0_2);\n-  jmp(L_2TAG_PACKET_6_0_2);\n-\n-  bind(L_2TAG_PACKET_3_0_2);\n-  xorpd(xmm1, xmm1);\n-  addsd(xmm1, xmm0);\n-  movdl(edx, xmm1);\n-  psrlq(xmm1, 32);\n-  movdl(ecx, xmm1);\n-  orl(edx, ecx);\n-  cmpl(edx, 0);\n-  jcc(Assembler::equal, L_2TAG_PACKET_7_0_2);\n-  xorpd(xmm1, xmm1);\n-  movl(eax, 18416);\n-  pinsrw(xmm1, eax, 3);\n-  mulsd(xmm0, xmm1);\n-  xorpd(xmm2, xmm2);\n-  movl(eax, 16368);\n-  pinsrw(xmm2, eax, 3);\n-  movdqu(xmm1, xmm0);\n-  pextrw(eax, xmm0, 3);\n-  por(xmm0, xmm2);\n-  movl(ecx, 18416);\n-  psrlq(xmm0, 27);\n-  movdqu(xmm2, ExternalAddress(LOG10_E), tmp \/*rscratch*\/);    \/\/0x00000000UL, 0x3fdbc000UL, 0xbf2e4108UL, 0x3f5a7a6cUL\n-  psrld(xmm0, 2);\n-  rcpps(xmm0, xmm0);\n-  psllq(xmm1, 12);\n-  pshufd(xmm6, xmm5, 78);\n-  psrlq(xmm1, 12);\n-  jmp(L_2TAG_PACKET_1_0_2);\n-\n-  bind(L_2TAG_PACKET_2_0_2);\n-  movdl(edx, xmm1);\n-  psrlq(xmm1, 32);\n-  movdl(ecx, xmm1);\n-  addl(ecx, ecx);\n-  cmpl(ecx, -2097152);\n-  jcc(Assembler::aboveEqual, L_2TAG_PACKET_5_0_2);\n-  orl(edx, ecx);\n-  cmpl(edx, 0);\n-  jcc(Assembler::equal, L_2TAG_PACKET_7_0_2);\n-\n-  bind(L_2TAG_PACKET_6_0_2);\n-  xorpd(xmm1, xmm1);\n-  xorpd(xmm0, xmm0);\n-  movl(eax, 32752);\n-  pinsrw(xmm1, eax, 3);\n-  mulsd(xmm0, xmm1);\n-  movl(Address(rsp, 16), 9);\n-  jmp(L_2TAG_PACKET_8_0_2);\n-\n-  bind(L_2TAG_PACKET_7_0_2);\n-  xorpd(xmm1, xmm1);\n-  xorpd(xmm0, xmm0);\n-  movl(eax, 49136);\n-  pinsrw(xmm0, eax, 3);\n-  divsd(xmm0, xmm1);\n-  movl(Address(rsp, 16), 8);\n-\n-  bind(L_2TAG_PACKET_8_0_2);\n-  movq(Address(rsp, 8), xmm0);\n-\n-  bind(B1_3);\n-  movq(xmm0, Address(rsp, 8));\n-\n-  bind(L_2TAG_PACKET_9_0_2);\n-\n-  bind(B1_5);\n-  addq(rsp, 24);\n-\n-}\n-#else\n-\/\/ The 32 bit code is at most SSE2 compliant\n-ATTRIBUTE_ALIGNED(16) juint _static_const_table_log10[] =\n-{\n-    0x509f7800UL, 0x3fd34413UL, 0x1f12b358UL, 0x3d1fef31UL, 0x80333400UL,\n-    0x3fd32418UL, 0xc671d9d0UL, 0xbcf542bfUL, 0x51195000UL, 0x3fd30442UL,\n-    0x78a4b0c3UL, 0x3d18216aUL, 0x6fc79400UL, 0x3fd2e490UL, 0x80fa389dUL,\n-    0xbc902869UL, 0x89d04000UL, 0x3fd2c502UL, 0x75c2f564UL, 0x3d040754UL,\n-    0x4ddd1c00UL, 0x3fd2a598UL, 0xd219b2c3UL, 0xbcfa1d84UL, 0x6baa7c00UL,\n-    0x3fd28651UL, 0xfd9abec1UL, 0x3d1be6d3UL, 0x94028800UL, 0x3fd2672dUL,\n-    0xe289a455UL, 0xbd1ede5eUL, 0x78b86400UL, 0x3fd2482cUL, 0x6734d179UL,\n-    0x3d1fe79bUL, 0xcca3c800UL, 0x3fd2294dUL, 0x981a40b8UL, 0xbced34eaUL,\n-    0x439c5000UL, 0x3fd20a91UL, 0xcc392737UL, 0xbd1a9cc3UL, 0x92752c00UL,\n-    0x3fd1ebf6UL, 0x03c9afe7UL, 0x3d1e98f8UL, 0x6ef8dc00UL, 0x3fd1cd7dUL,\n-    0x71dae7f4UL, 0x3d08a86cUL, 0x8fe4dc00UL, 0x3fd1af25UL, 0xee9185a1UL,\n-    0xbcff3412UL, 0xace59400UL, 0x3fd190eeUL, 0xc2cab353UL, 0x3cf17ed9UL,\n-    0x7e925000UL, 0x3fd172d8UL, 0x6952c1b2UL, 0x3cf1521cUL, 0xbe694400UL,\n-    0x3fd154e2UL, 0xcacb79caUL, 0xbd0bdc78UL, 0x26cbac00UL, 0x3fd1370dUL,\n-    0xf71f4de1UL, 0xbd01f8beUL, 0x72fa0800UL, 0x3fd11957UL, 0x55bf910bUL,\n-    0x3c946e2bUL, 0x5f106000UL, 0x3fd0fbc1UL, 0x39e639c1UL, 0x3d14a84bUL,\n-    0xa802a800UL, 0x3fd0de4aUL, 0xd3f31d5dUL, 0xbd178385UL, 0x0b992000UL,\n-    0x3fd0c0f3UL, 0x3843106fUL, 0xbd1f602fUL, 0x486ce800UL, 0x3fd0a3baUL,\n-    0x8819497cUL, 0x3cef987aUL, 0x1de49400UL, 0x3fd086a0UL, 0x1caa0467UL,\n-    0x3d0faec7UL, 0x4c30cc00UL, 0x3fd069a4UL, 0xa4424372UL, 0xbd1618fcUL,\n-    0x94490000UL, 0x3fd04cc6UL, 0x946517d2UL, 0xbd18384bUL, 0xb7e84000UL,\n-    0x3fd03006UL, 0xe0109c37UL, 0xbd19a6acUL, 0x798a0c00UL, 0x3fd01364UL,\n-    0x5121e864UL, 0xbd164cf7UL, 0x38ce8000UL, 0x3fcfedbfUL, 0x46214d1aUL,\n-    0xbcbbc402UL, 0xc8e62000UL, 0x3fcfb4efUL, 0xdab93203UL, 0x3d1e0176UL,\n-    0x2cb02800UL, 0x3fcf7c5aUL, 0x2a2ea8e4UL, 0xbcfec86aUL, 0xeeeaa000UL,\n-    0x3fcf43fdUL, 0xc18e49a4UL, 0x3cf110a8UL, 0x9bb6e800UL, 0x3fcf0bdaUL,\n-    0x923cc9c0UL, 0xbd15ce99UL, 0xc093f000UL, 0x3fced3efUL, 0x4d4b51e9UL,\n-    0x3d1a04c7UL, 0xec58f800UL, 0x3fce9c3cUL, 0x163cad59UL, 0x3cac8260UL,\n-    0x9a907000UL, 0x3fce2d7dUL, 0x3fa93646UL, 0x3ce4a1c0UL, 0x37311000UL,\n-    0x3fcdbf99UL, 0x32abd1fdUL, 0x3d07ea9dUL, 0x6744b800UL, 0x3fcd528cUL,\n-    0x4dcbdfd4UL, 0xbd1b08e2UL, 0xe36de800UL, 0x3fcce653UL, 0x0b7b7f7fUL,\n-    0xbd1b8f03UL, 0x77506800UL, 0x3fcc7aecUL, 0xa821c9fbUL, 0x3d13c163UL,\n-    0x00ff8800UL, 0x3fcc1053UL, 0x536bca76UL, 0xbd074ee5UL, 0x70719800UL,\n-    0x3fcba684UL, 0xd7da9b6bUL, 0xbd1fbf16UL, 0xc6f8d800UL, 0x3fcb3d7dUL,\n-    0xe2220bb3UL, 0x3d1a295dUL, 0x16c15800UL, 0x3fcad53cUL, 0xe724911eUL,\n-    0xbcf55822UL, 0x82533800UL, 0x3fca6dbcUL, 0x6d982371UL, 0x3cac567cUL,\n-    0x3c19e800UL, 0x3fca06fcUL, 0x84d17d80UL, 0x3d1da204UL, 0x85ef8000UL,\n-    0x3fc9a0f8UL, 0x54466a6aUL, 0xbd002204UL, 0xb0ac2000UL, 0x3fc93baeUL,\n-    0xd601fd65UL, 0x3d18840cUL, 0x1bb9b000UL, 0x3fc8d71cUL, 0x7bf58766UL,\n-    0xbd14f897UL, 0x34aae800UL, 0x3fc8733eUL, 0x3af6ac24UL, 0xbd0f5c45UL,\n-    0x76d68000UL, 0x3fc81012UL, 0x4303e1a1UL, 0xbd1f9a80UL, 0x6af57800UL,\n-    0x3fc7ad96UL, 0x43fbcb46UL, 0x3cf4c33eUL, 0xa6c51000UL, 0x3fc74bc7UL,\n-    0x70f0eac5UL, 0xbd192e3bUL, 0xccab9800UL, 0x3fc6eaa3UL, 0xc0093dfeUL,\n-    0xbd0faf15UL, 0x8b60b800UL, 0x3fc68a28UL, 0xde78d5fdUL, 0xbc9ea4eeUL,\n-    0x9d987000UL, 0x3fc62a53UL, 0x962bea6eUL, 0xbd194084UL, 0xc9b0e800UL,\n-    0x3fc5cb22UL, 0x888dd999UL, 0x3d1fe201UL, 0xe1634800UL, 0x3fc56c93UL,\n-    0x16ada7adUL, 0x3d1b1188UL, 0xc176c000UL, 0x3fc50ea4UL, 0x4159b5b5UL,\n-    0xbcf09c08UL, 0x51766000UL, 0x3fc4b153UL, 0x84393d23UL, 0xbcf6a89cUL,\n-    0x83695000UL, 0x3fc4549dUL, 0x9f0b8bbbUL, 0x3d1c4b8cUL, 0x538d5800UL,\n-    0x3fc3f881UL, 0xf49df747UL, 0x3cf89b99UL, 0xc8138000UL, 0x3fc39cfcUL,\n-    0xd503b834UL, 0xbd13b99fUL, 0xf0df0800UL, 0x3fc3420dUL, 0xf011b386UL,\n-    0xbd05d8beUL, 0xe7466800UL, 0x3fc2e7b2UL, 0xf39c7bc2UL, 0xbd1bb94eUL,\n-    0xcdd62800UL, 0x3fc28de9UL, 0x05e6d69bUL, 0xbd10ed05UL, 0xd015d800UL,\n-    0x3fc234b0UL, 0xe29b6c9dUL, 0xbd1ff967UL, 0x224ea800UL, 0x3fc1dc06UL,\n-    0x727711fcUL, 0xbcffb30dUL, 0x01540000UL, 0x3fc183e8UL, 0x39786c5aUL,\n-    0x3cc23f57UL, 0xb24d9800UL, 0x3fc12c54UL, 0xc905a342UL, 0x3d003a1dUL,\n-    0x82835800UL, 0x3fc0d54aUL, 0x9b9920c0UL, 0x3d03b25aUL, 0xc72ac000UL,\n-    0x3fc07ec7UL, 0x46f26a24UL, 0x3cf0fa41UL, 0xdd35d800UL, 0x3fc028caUL,\n-    0x41d9d6dcUL, 0x3d034a65UL, 0x52474000UL, 0x3fbfa6a4UL, 0x44f66449UL,\n-    0x3d19cad3UL, 0x2da3d000UL, 0x3fbefcb8UL, 0x67832999UL, 0x3d18400fUL,\n-    0x32a10000UL, 0x3fbe53ceUL, 0x9c0e3b1aUL, 0xbcff62fdUL, 0x556b7000UL,\n-    0x3fbdabe3UL, 0x02976913UL, 0xbcf8243bUL, 0x97e88000UL, 0x3fbd04f4UL,\n-    0xec793797UL, 0x3d1c0578UL, 0x09647000UL, 0x3fbc5effUL, 0x05fc0565UL,\n-    0xbd1d799eUL, 0xc6426000UL, 0x3fbbb9ffUL, 0x4625f5edUL, 0x3d1f5723UL,\n-    0xf7afd000UL, 0x3fbb15f3UL, 0xdd5aae61UL, 0xbd1a7e1eUL, 0xd358b000UL,\n-    0x3fba72d8UL, 0x3314e4d3UL, 0x3d17bc91UL, 0x9b1f5000UL, 0x3fb9d0abUL,\n-    0x9a4d514bUL, 0x3cf18c9bUL, 0x9cd4e000UL, 0x3fb92f69UL, 0x7e4496abUL,\n-    0x3cf1f96dUL, 0x31f4f000UL, 0x3fb88f10UL, 0xf56479e7UL, 0x3d165818UL,\n-    0xbf628000UL, 0x3fb7ef9cUL, 0x26bf486dUL, 0xbd1113a6UL, 0xb526b000UL,\n-    0x3fb7510cUL, 0x1a1c3384UL, 0x3ca9898dUL, 0x8e31e000UL, 0x3fb6b35dUL,\n-    0xb3875361UL, 0xbd0661acUL, 0xd01de000UL, 0x3fb6168cUL, 0x2a7cacfaUL,\n-    0xbd1bdf10UL, 0x0af23000UL, 0x3fb57a98UL, 0xff868816UL, 0x3cf046d0UL,\n-    0xd8ea0000UL, 0x3fb4df7cUL, 0x1515fbe7UL, 0xbd1fd529UL, 0xde3b2000UL,\n-    0x3fb44538UL, 0x6e59a132UL, 0x3d1faeeeUL, 0xc8df9000UL, 0x3fb3abc9UL,\n-    0xf1322361UL, 0xbd198807UL, 0x505f1000UL, 0x3fb3132dUL, 0x0888e6abUL,\n-    0x3d1e5380UL, 0x359bd000UL, 0x3fb27b61UL, 0xdfbcbb22UL, 0xbcfe2724UL,\n-    0x429ee000UL, 0x3fb1e463UL, 0x6eb4c58cUL, 0xbcfe4dd6UL, 0x4a673000UL,\n-    0x3fb14e31UL, 0x4ce1ac9bUL, 0x3d1ba691UL, 0x28b96000UL, 0x3fb0b8c9UL,\n-    0x8c7813b8UL, 0xbd0b3872UL, 0xc1f08000UL, 0x3fb02428UL, 0xc2bc8c2cUL,\n-    0x3cb5ea6bUL, 0x05a1a000UL, 0x3faf209cUL, 0x72e8f18eUL, 0xbce8df84UL,\n-    0xc0b5e000UL, 0x3fadfa6dUL, 0x9fdef436UL, 0x3d087364UL, 0xaf416000UL,\n-    0x3facd5c2UL, 0x1068c3a9UL, 0x3d0827e7UL, 0xdb356000UL, 0x3fabb296UL,\n-    0x120a34d3UL, 0x3d101a9fUL, 0x5dfea000UL, 0x3faa90e6UL, 0xdaded264UL,\n-    0xbd14c392UL, 0x6034c000UL, 0x3fa970adUL, 0x1c9d06a9UL, 0xbd1b705eUL,\n-    0x194c6000UL, 0x3fa851e8UL, 0x83996ad9UL, 0xbd0117bcUL, 0xcf4ac000UL,\n-    0x3fa73492UL, 0xb1a94a62UL, 0xbca5ea42UL, 0xd67b4000UL, 0x3fa618a9UL,\n-    0x75aed8caUL, 0xbd07119bUL, 0x9126c000UL, 0x3fa4fe29UL, 0x5291d533UL,\n-    0x3d12658fUL, 0x6f4d4000UL, 0x3fa3e50eUL, 0xcd2c5cd9UL, 0x3d1d5c70UL,\n-    0xee608000UL, 0x3fa2cd54UL, 0xd1008489UL, 0x3d1a4802UL, 0x9900e000UL,\n-    0x3fa1b6f9UL, 0x54fb5598UL, 0xbd16593fUL, 0x06bb6000UL, 0x3fa0a1f9UL,\n-    0x64ef57b4UL, 0xbd17636bUL, 0xb7940000UL, 0x3f9f1c9fUL, 0xee6a4737UL,\n-    0x3cb5d479UL, 0x91aa0000UL, 0x3f9cf7f5UL, 0x3a16373cUL, 0x3d087114UL,\n-    0x156b8000UL, 0x3f9ad5edUL, 0x836c554aUL, 0x3c6900b0UL, 0xd4764000UL,\n-    0x3f98b67fUL, 0xed12f17bUL, 0xbcffc974UL, 0x77dec000UL, 0x3f9699a7UL,\n-    0x232ce7eaUL, 0x3d1e35bbUL, 0xbfbf4000UL, 0x3f947f5dUL, 0xd84ffa6eUL,\n-    0x3d0e0a49UL, 0x82c7c000UL, 0x3f92679cUL, 0x8d170e90UL, 0xbd14d9f2UL,\n-    0xadd20000UL, 0x3f90525dUL, 0x86d9f88eUL, 0x3cdeb986UL, 0x86f10000UL,\n-    0x3f8c7f36UL, 0xb9e0a517UL, 0x3ce29faaUL, 0xb75c8000UL, 0x3f885e9eUL,\n-    0x542568cbUL, 0xbd1f7bdbUL, 0x46b30000UL, 0x3f8442e8UL, 0xb954e7d9UL,\n-    0x3d1e5287UL, 0xb7e60000UL, 0x3f802c07UL, 0x22da0b17UL, 0xbd19fb27UL,\n-    0x6c8b0000UL, 0x3f7833e3UL, 0x821271efUL, 0xbd190f96UL, 0x29910000UL,\n-    0x3f701936UL, 0xbc3491a5UL, 0xbd1bcf45UL, 0x354a0000UL, 0x3f600fe3UL,\n-    0xc0ff520aUL, 0xbd19d71cUL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n-    0x00000000UL, 0x509f7800UL, 0x3f934413UL, 0x1f12b358UL, 0x3cdfef31UL,\n-    0xc1a5f12eUL, 0x40358874UL, 0x64d4ef0dUL, 0xc0089309UL, 0x385593b1UL,\n-    0xc025c917UL, 0xdc963467UL, 0x3ffc6a02UL, 0x7f9d3aa1UL, 0x4016ab9fUL,\n-    0xdc77b115UL, 0xbff27af2UL, 0xf8000000UL, 0xffffffffUL, 0x00000000UL,\n-    0xffffe000UL, 0x00000000UL, 0x3fdbc000UL, 0xbf2e4108UL, 0x3f5a7a6cUL\n-};\n-\/\/registers,\n-\/\/ input: xmm0\n-\/\/ scratch: xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7\n-\/\/          rax, rdx, rcx, rbx (tmp)\n-\n-void MacroAssembler::fast_log10(XMMRegister xmm0, XMMRegister xmm1, XMMRegister xmm2, XMMRegister xmm3,\n-                                XMMRegister xmm4, XMMRegister xmm5, XMMRegister xmm6, XMMRegister xmm7,\n-                                Register eax, Register ecx, Register edx, Register tmp) {\n-\n-  Label L_2TAG_PACKET_0_0_2, L_2TAG_PACKET_1_0_2, L_2TAG_PACKET_2_0_2, L_2TAG_PACKET_3_0_2;\n-  Label L_2TAG_PACKET_4_0_2, L_2TAG_PACKET_5_0_2, L_2TAG_PACKET_6_0_2, L_2TAG_PACKET_7_0_2;\n-  Label L_2TAG_PACKET_8_0_2, L_2TAG_PACKET_9_0_2, L_2TAG_PACKET_10_0_2;\n-\n-  assert_different_registers(tmp, eax, ecx, edx);\n-\n-  address static_const_table_log10 = (address)_static_const_table_log10;\n-\n-  subl(rsp, 104);\n-  movl(Address(rsp, 40), tmp);\n-  lea(tmp, ExternalAddress(static_const_table_log10));\n-  xorpd(xmm2, xmm2);\n-  movl(eax, 16368);\n-  pinsrw(xmm2, eax, 3);\n-  movl(ecx, 1054736384);\n-  movdl(xmm7, ecx);\n-  xorpd(xmm3, xmm3);\n-  movl(edx, 30704);\n-  pinsrw(xmm3, edx, 3);\n-  movsd(xmm0, Address(rsp, 112));\n-  movdqu(xmm1, xmm0);\n-  movl(edx, 32768);\n-  movdl(xmm4, edx);\n-  movdqu(xmm5, Address(tmp, 2128));    \/\/0x3ffc6a02UL, 0x7f9d3aa1UL, 0x4016ab9fUL, 0xdc77b115UL\n-  pextrw(eax, xmm0, 3);\n-  por(xmm0, xmm2);\n-  movl(ecx, 16352);\n-  psllq(xmm0, 5);\n-  movsd(xmm2, Address(tmp, 2144));    \/\/0xbff27af2UL, 0xf8000000UL, 0xffffffffUL, 0x00000000UL\n-  psrlq(xmm0, 34);\n-  rcpss(xmm0, xmm0);\n-  psllq(xmm1, 12);\n-  pshufd(xmm6, xmm5, 78);\n-  psrlq(xmm1, 12);\n-  subl(eax, 16);\n-  cmpl(eax, 32736);\n-  jcc(Assembler::aboveEqual, L_2TAG_PACKET_0_0_2);\n-\n-  bind(L_2TAG_PACKET_1_0_2);\n-  mulss(xmm0, xmm7);\n-  por(xmm1, xmm3);\n-  andpd(xmm5, xmm1);\n-  paddd(xmm0, xmm4);\n-  subsd(xmm1, xmm5);\n-  movdl(edx, xmm0);\n-  psllq(xmm0, 29);\n-  andpd(xmm0, xmm6);\n-  andl(eax, 32752);\n-  subl(eax, ecx);\n-  cvtsi2sdl(xmm7, eax);\n-  mulpd(xmm5, xmm0);\n-  mulsd(xmm1, xmm0);\n-  movsd(xmm6, Address(tmp, 2064));    \/\/0xbd19d71cUL, 0x00000000UL, 0x00000000UL, 0x00000000UL\n-  movdqu(xmm3, Address(tmp, 2080));    \/\/0x00000000UL, 0x509f7800UL, 0x3f934413UL, 0x1f12b358UL\n-  subsd(xmm5, xmm2);\n-  andl(edx, 16711680);\n-  shrl(edx, 12);\n-  movdqu(xmm0, Address(tmp, edx, Address::times_1, -1504));\n-  movdqu(xmm4, Address(tmp, 2096));    \/\/0x3cdfef31UL, 0xc1a5f12eUL, 0x40358874UL, 0x64d4ef0dUL\n-  addsd(xmm1, xmm5);\n-  movdqu(xmm2, Address(tmp, 2112));    \/\/0xc0089309UL, 0x385593b1UL, 0xc025c917UL, 0xdc963467UL\n-  mulsd(xmm6, xmm7);\n-  pshufd(xmm5, xmm1, 68);\n-  mulsd(xmm7, Address(tmp, 2072));    \/\/0x00000000UL, 0x00000000UL, 0x00000000UL, 0x509f7800UL\n-  mulsd(xmm3, xmm1);\n-  addsd(xmm0, xmm6);\n-  mulpd(xmm4, xmm5);\n-  movsd(xmm6, Address(tmp, 2152));    \/\/0xffffffffUL, 0x00000000UL, 0xffffe000UL, 0x00000000UL\n-  mulpd(xmm5, xmm5);\n-  addpd(xmm4, xmm2);\n-  mulpd(xmm3, xmm5);\n-  pshufd(xmm2, xmm0, 228);\n-  addsd(xmm0, xmm1);\n-  mulsd(xmm4, xmm1);\n-  subsd(xmm2, xmm0);\n-  mulsd(xmm6, xmm1);\n-  addsd(xmm1, xmm2);\n-  pshufd(xmm2, xmm0, 238);\n-  mulsd(xmm5, xmm5);\n-  addsd(xmm7, xmm2);\n-  addsd(xmm1, xmm6);\n-  addpd(xmm4, xmm3);\n-  addsd(xmm1, xmm7);\n-  mulpd(xmm4, xmm5);\n-  addsd(xmm1, xmm4);\n-  pshufd(xmm5, xmm4, 238);\n-  addsd(xmm1, xmm5);\n-  addsd(xmm0, xmm1);\n-  jmp(L_2TAG_PACKET_2_0_2);\n-\n-  bind(L_2TAG_PACKET_0_0_2);\n-  movsd(xmm0, Address(rsp, 112));    \/\/0xbcfa1d84UL, 0x6baa7c00UL, 0x3fd28651UL, 0xfd9abec1UL\n-  movdqu(xmm1, xmm0);\n-  addl(eax, 16);\n-  cmpl(eax, 32768);\n-  jcc(Assembler::aboveEqual, L_2TAG_PACKET_3_0_2);\n-  cmpl(eax, 16);\n-  jcc(Assembler::below, L_2TAG_PACKET_4_0_2);\n-\n-  bind(L_2TAG_PACKET_5_0_2);\n-  addsd(xmm0, xmm0);\n-  jmp(L_2TAG_PACKET_2_0_2);\n-\n-  bind(L_2TAG_PACKET_6_0_2);\n-  jcc(Assembler::above, L_2TAG_PACKET_5_0_2);\n-  cmpl(edx, 0);\n-  jcc(Assembler::above, L_2TAG_PACKET_5_0_2);\n-  jmp(L_2TAG_PACKET_7_0_2);\n-\n-  bind(L_2TAG_PACKET_3_0_2);\n-  movdl(edx, xmm1);\n-  psrlq(xmm1, 32);\n-  movdl(ecx, xmm1);\n-  addl(ecx, ecx);\n-  cmpl(ecx, -2097152);\n-  jcc(Assembler::aboveEqual, L_2TAG_PACKET_6_0_2);\n-  orl(edx, ecx);\n-  cmpl(edx, 0);\n-  jcc(Assembler::equal, L_2TAG_PACKET_8_0_2);\n-\n-  bind(L_2TAG_PACKET_7_0_2);\n-  xorpd(xmm1, xmm1);\n-  xorpd(xmm0, xmm0);\n-  movl(eax, 32752);\n-  pinsrw(xmm1, eax, 3);\n-  movl(edx, 9);\n-  mulsd(xmm0, xmm1);\n-\n-  bind(L_2TAG_PACKET_9_0_2);\n-  movsd(Address(rsp, 0), xmm0);\n-  movsd(xmm0, Address(rsp, 112));    \/\/0xbcfa1d84UL, 0x6baa7c00UL, 0x3fd28651UL, 0xfd9abec1UL\n-  fld_d(Address(rsp, 0));\n-  jmp(L_2TAG_PACKET_10_0_2);\n-\n-  bind(L_2TAG_PACKET_8_0_2);\n-  xorpd(xmm1, xmm1);\n-  xorpd(xmm0, xmm0);\n-  movl(eax, 49136);\n-  pinsrw(xmm0, eax, 3);\n-  divsd(xmm0, xmm1);\n-  movl(edx, 8);\n-  jmp(L_2TAG_PACKET_9_0_2);\n-\n-  bind(L_2TAG_PACKET_4_0_2);\n-  movdl(edx, xmm1);\n-  psrlq(xmm1, 32);\n-  movdl(ecx, xmm1);\n-  orl(edx, ecx);\n-  cmpl(edx, 0);\n-  jcc(Assembler::equal, L_2TAG_PACKET_8_0_2);\n-  xorpd(xmm1, xmm1);\n-  movl(eax, 18416);\n-  pinsrw(xmm1, eax, 3);\n-  mulsd(xmm0, xmm1);\n-  xorpd(xmm2, xmm2);\n-  movl(eax, 16368);\n-  pinsrw(xmm2, eax, 3);\n-  movdqu(xmm1, xmm0);\n-  pextrw(eax, xmm0, 3);\n-  por(xmm0, xmm2);\n-  movl(ecx, 18416);\n-  psllq(xmm0, 5);\n-  movsd(xmm2, Address(tmp, 2144));    \/\/0xbff27af2UL, 0xf8000000UL, 0xffffffffUL, 0x00000000UL\n-  psrlq(xmm0, 34);\n-  rcpss(xmm0, xmm0);\n-  psllq(xmm1, 12);\n-  pshufd(xmm6, xmm5, 78);\n-  psrlq(xmm1, 12);\n-  jmp(L_2TAG_PACKET_1_0_2);\n-\n-  bind(L_2TAG_PACKET_2_0_2);\n-  movsd(Address(rsp, 24), xmm0);\n-  fld_d(Address(rsp, 24));\n-\n-  bind(L_2TAG_PACKET_10_0_2);\n-  movl(tmp, Address(rsp, 40));\n-\n-}\n-#endif\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86_log10.cpp","additions":0,"deletions":684,"binary":false,"changes":684,"status":"deleted"},{"patch":"@@ -1,3653 +0,0 @@\n-\/*\n-* Copyright (c) 2016, 2021, Intel Corporation. All rights reserved.\n-* Copyright (C) 2021 THL A29 Limited, a Tencent company. All rights reserved.\n-* Intel Math Library (LIBM) Source Code\n-*\n-* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-*\n-* This code is free software; you can redistribute it and\/or modify it\n-* under the terms of the GNU General Public License version 2 only, as\n-* published by the Free Software Foundation.\n-*\n-* This code is distributed in the hope that it will be useful, but WITHOUT\n-* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-* version 2 for more details (a copy is included in the LICENSE file that\n-* accompanied this code).\n-*\n-* You should have received a copy of the GNU General Public License version\n-* 2 along with this work; if not, write to the Free Software Foundation,\n-* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-*\n-* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-* or visit www.oracle.com if you need additional information or have any\n-* questions.\n-*\n-*\/\n-\n-#include \"precompiled.hpp\"\n-#include \"asm\/assembler.hpp\"\n-#include \"asm\/assembler.inline.hpp\"\n-#include \"macroAssembler_x86.hpp\"\n-#include \"runtime\/stubRoutines.hpp\"\n-#include \"utilities\/globalDefinitions.hpp\"\n-\n-\/******************************************************************************\/\n-\/\/                     ALGORITHM DESCRIPTION  - POW()\n-\/\/                     ---------------------\n-\/\/\n-\/\/    Let x=2^k * mx, mx in [1,2)\n-\/\/\n-\/\/    log2(x) calculation:\n-\/\/\n-\/\/    Get B~1\/mx based on the output of rcpps instruction (B0)\n-\/\/    B = int((B0*LH*2^9+0.5))\/2^9\n-\/\/    LH is a short approximation for log2(e)\n-\/\/\n-\/\/    Reduced argument, scaled by LH:\n-\/\/                r=B*mx-LH (computed accurately in high and low parts)\n-\/\/\n-\/\/    log2(x) result:  k - log2(B) + p(r)\n-\/\/             p(r) is a degree 8 polynomial\n-\/\/             -log2(B) read from data table (high, low parts)\n-\/\/             log2(x) is formed from high and low parts\n-\/\/    For |x| in [1-1\/32, 1+1\/16), a slower but more accurate computation\n-\/\/    based om the same table design is performed.\n-\/\/\n-\/\/   Main path is taken if | floor(log2(|log2(|x|)|) + floor(log2|y|) | < 8,\n-\/\/   to filter out all potential OF\/UF cases.\n-\/\/   exp2(y*log2(x)) is computed using an 8-bit index table and a degree 5\n-\/\/   polynomial\n-\/\/\n-\/\/ Special cases:\n-\/\/  pow(-0,y) = -INF and raises the divide-by-zero exception for y an odd\n-\/\/  integer < 0.\n-\/\/  pow(-0,y) = +INF and raises the divide-by-zero exception for y < 0 and\n-\/\/  not an odd integer.\n-\/\/  pow(-0,y) = -0 for y an odd integer > 0.\n-\/\/  pow(-0,y) = +0 for y > 0 and not an odd integer.\n-\/\/  pow(-1,-INF) = NaN.\n-\/\/  pow(+1,y) = NaN for any y, even a NaN.\n-\/\/  pow(x,-0) = 1 for any x, even a NaN.\n-\/\/  pow(x,y) = a NaN and raises the invalid exception for finite x < 0 and\n-\/\/  finite non-integer y.\n-\/\/  pow(x,-INF) = +INF for |x|<1.\n-\/\/  pow(x,-INF) = +0 for |x|>1.\n-\/\/  pow(x,+INF) = +0 for |x|<1.\n-\/\/  pow(x,+INF) = +INF for |x|>1.\n-\/\/  pow(-INF,y) = -0 for y an odd integer < 0.\n-\/\/  pow(-INF,y) = +0 for y < 0 and not an odd integer.\n-\/\/  pow(-INF,y) = -INF for y an odd integer > 0.\n-\/\/  pow(-INF,y) = +INF for y > 0 and not an odd integer.\n-\/\/  pow(+INF,y) = +0 for y <0.\n-\/\/  pow(+INF,y) = +INF for y >0.\n-\/\/\n-\/******************************************************************************\/\n-\n-#ifdef _LP64\n-\/\/ The 64 bit code is at most SSE2 compliant\n-ATTRIBUTE_ALIGNED(16) juint _HIGHSIGMASK[] =\n-{\n-    0x00000000UL, 0xfffff800UL, 0x00000000UL, 0xfffff800UL\n-};\n-\n-ATTRIBUTE_ALIGNED(16) juint _LOG2_E[] =\n-{\n-    0x00000000UL, 0x3ff72000UL, 0x161bb241UL, 0xbf5dabe1UL\n-};\n-\n-ATTRIBUTE_ALIGNED(16) juint _HIGHMASK_Y[] =\n-{\n-    0x00000000UL, 0xfffffff8UL, 0x00000000UL, 0xffffffffUL\n-};\n-\n-ATTRIBUTE_ALIGNED(16) juint _T_exp[] =\n-{\n-    0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0x3b700000UL, 0xfa5abcbfUL,\n-    0x3ff00b1aUL, 0xa7609f71UL, 0xbc84f6b2UL, 0xa9fb3335UL, 0x3ff0163dUL,\n-    0x9ab8cdb7UL, 0x3c9b6129UL, 0x143b0281UL, 0x3ff02168UL, 0x0fc54eb6UL,\n-    0xbc82bf31UL, 0x3e778061UL, 0x3ff02c9aUL, 0x535b085dUL, 0xbc719083UL,\n-    0x2e11bbccUL, 0x3ff037d4UL, 0xeeade11aUL, 0x3c656811UL, 0xe86e7f85UL,\n-    0x3ff04315UL, 0x1977c96eUL, 0xbc90a31cUL, 0x72f654b1UL, 0x3ff04e5fUL,\n-    0x3aa0d08cUL, 0x3c84c379UL, 0xd3158574UL, 0x3ff059b0UL, 0xa475b465UL,\n-    0x3c8d73e2UL, 0x0e3c1f89UL, 0x3ff0650aUL, 0x5799c397UL, 0xbc95cb7bUL,\n-    0x29ddf6deUL, 0x3ff0706bUL, 0xe2b13c27UL, 0xbc8c91dfUL, 0x2b72a836UL,\n-    0x3ff07bd4UL, 0x54458700UL, 0x3c832334UL, 0x18759bc8UL, 0x3ff08745UL,\n-    0x4bb284ffUL, 0x3c6186beUL, 0xf66607e0UL, 0x3ff092bdUL, 0x800a3fd1UL,\n-    0xbc968063UL, 0xcac6f383UL, 0x3ff09e3eUL, 0x18316136UL, 0x3c914878UL,\n-    0x9b1f3919UL, 0x3ff0a9c7UL, 0x873d1d38UL, 0x3c85d16cUL, 0x6cf9890fUL,\n-    0x3ff0b558UL, 0x4adc610bUL, 0x3c98a62eUL, 0x45e46c85UL, 0x3ff0c0f1UL,\n-    0x06d21cefUL, 0x3c94f989UL, 0x2b7247f7UL, 0x3ff0cc92UL, 0x16e24f71UL,\n-    0x3c901edcUL, 0x23395decUL, 0x3ff0d83bUL, 0xe43f316aUL, 0xbc9bc14dUL,\n-    0x32d3d1a2UL, 0x3ff0e3ecUL, 0x27c57b52UL, 0x3c403a17UL, 0x5fdfa9c5UL,\n-    0x3ff0efa5UL, 0xbc54021bUL, 0xbc949db9UL, 0xaffed31bUL, 0x3ff0fb66UL,\n-    0xc44ebd7bUL, 0xbc6b9bedUL, 0x28d7233eUL, 0x3ff10730UL, 0x1692fdd5UL,\n-    0x3c8d46ebUL, 0xd0125b51UL, 0x3ff11301UL, 0x39449b3aUL, 0xbc96c510UL,\n-    0xab5e2ab6UL, 0x3ff11edbUL, 0xf703fb72UL, 0xbc9ca454UL, 0xc06c31ccUL,\n-    0x3ff12abdUL, 0xb36ca5c7UL, 0xbc51b514UL, 0x14f204abUL, 0x3ff136a8UL,\n-    0xba48dcf0UL, 0xbc67108fUL, 0xaea92de0UL, 0x3ff1429aUL, 0x9af1369eUL,\n-    0xbc932fbfUL, 0x934f312eUL, 0x3ff14e95UL, 0x39bf44abUL, 0xbc8b91e8UL,\n-    0xc8a58e51UL, 0x3ff15a98UL, 0xb9eeab0aUL, 0x3c82406aUL, 0x5471c3c2UL,\n-    0x3ff166a4UL, 0x82ea1a32UL, 0x3c58f23bUL, 0x3c7d517bUL, 0x3ff172b8UL,\n-    0xb9d78a76UL, 0xbc819041UL, 0x8695bbc0UL, 0x3ff17ed4UL, 0xe2ac5a64UL,\n-    0x3c709e3fUL, 0x388c8deaUL, 0x3ff18af9UL, 0xd1970f6cUL, 0xbc911023UL,\n-    0x58375d2fUL, 0x3ff19726UL, 0x85f17e08UL, 0x3c94aaddUL, 0xeb6fcb75UL,\n-    0x3ff1a35bUL, 0x7b4968e4UL, 0x3c8e5b4cUL, 0xf8138a1cUL, 0x3ff1af99UL,\n-    0xa4b69280UL, 0x3c97bf85UL, 0x84045cd4UL, 0x3ff1bbe0UL, 0x352ef607UL,\n-    0xbc995386UL, 0x95281c6bUL, 0x3ff1c82fUL, 0x8010f8c9UL, 0x3c900977UL,\n-    0x3168b9aaUL, 0x3ff1d487UL, 0x00a2643cUL, 0x3c9e016eUL, 0x5eb44027UL,\n-    0x3ff1e0e7UL, 0x088cb6deUL, 0xbc96fdd8UL, 0x22fcd91dUL, 0x3ff1ed50UL,\n-    0x027bb78cUL, 0xbc91df98UL, 0x8438ce4dUL, 0x3ff1f9c1UL, 0xa097af5cUL,\n-    0xbc9bf524UL, 0x88628cd6UL, 0x3ff2063bUL, 0x814a8495UL, 0x3c8dc775UL,\n-    0x3578a819UL, 0x3ff212beUL, 0x2cfcaac9UL, 0x3c93592dUL, 0x917ddc96UL,\n-    0x3ff21f49UL, 0x9494a5eeUL, 0x3c82a97eUL, 0xa27912d1UL, 0x3ff22bddUL,\n-    0x5577d69fUL, 0x3c8d34fbUL, 0x6e756238UL, 0x3ff2387aUL, 0xb6c70573UL,\n-    0x3c99b07eUL, 0xfb82140aUL, 0x3ff2451fUL, 0x911ca996UL, 0x3c8acfccUL,\n-    0x4fb2a63fUL, 0x3ff251ceUL, 0xbef4f4a4UL, 0x3c8ac155UL, 0x711ece75UL,\n-    0x3ff25e85UL, 0x4ac31b2cUL, 0x3c93e1a2UL, 0x65e27cddUL, 0x3ff26b45UL,\n-    0x9940e9d9UL, 0x3c82bd33UL, 0x341ddf29UL, 0x3ff2780eUL, 0x05f9e76cUL,\n-    0x3c9e067cUL, 0xe1f56381UL, 0x3ff284dfUL, 0x8c3f0d7eUL, 0xbc9a4c3aUL,\n-    0x7591bb70UL, 0x3ff291baUL, 0x28401cbdUL, 0xbc82cc72UL, 0xf51fdee1UL,\n-    0x3ff29e9dUL, 0xafad1255UL, 0x3c8612e8UL, 0x66d10f13UL, 0x3ff2ab8aUL,\n-    0x191690a7UL, 0xbc995743UL, 0xd0dad990UL, 0x3ff2b87fUL, 0xd6381aa4UL,\n-    0xbc410adcUL, 0x39771b2fUL, 0x3ff2c57eUL, 0xa6eb5124UL, 0xbc950145UL,\n-    0xa6e4030bUL, 0x3ff2d285UL, 0x54db41d5UL, 0x3c900247UL, 0x1f641589UL,\n-    0x3ff2df96UL, 0xfbbce198UL, 0x3c9d16cfUL, 0xa93e2f56UL, 0x3ff2ecafUL,\n-    0x45d52383UL, 0x3c71ca0fUL, 0x4abd886bUL, 0x3ff2f9d2UL, 0x532bda93UL,\n-    0xbc653c55UL, 0x0a31b715UL, 0x3ff306feUL, 0xd23182e4UL, 0x3c86f46aUL,\n-    0xedeeb2fdUL, 0x3ff31432UL, 0xf3f3fcd1UL, 0x3c8959a3UL, 0xfc4cd831UL,\n-    0x3ff32170UL, 0x8e18047cUL, 0x3c8a9ce7UL, 0x3ba8ea32UL, 0x3ff32eb8UL,\n-    0x3cb4f318UL, 0xbc9c45e8UL, 0xb26416ffUL, 0x3ff33c08UL, 0x843659a6UL,\n-    0x3c932721UL, 0x66e3fa2dUL, 0x3ff34962UL, 0x930881a4UL, 0xbc835a75UL,\n-    0x5f929ff1UL, 0x3ff356c5UL, 0x5c4e4628UL, 0xbc8b5ceeUL, 0xa2de883bUL,\n-    0x3ff36431UL, 0xa06cb85eUL, 0xbc8c3144UL, 0x373aa9cbUL, 0x3ff371a7UL,\n-    0xbf42eae2UL, 0xbc963aeaUL, 0x231e754aUL, 0x3ff37f26UL, 0x9eceb23cUL,\n-    0xbc99f5caUL, 0x6d05d866UL, 0x3ff38caeUL, 0x3c9904bdUL, 0xbc9e958dUL,\n-    0x1b7140efUL, 0x3ff39a40UL, 0xfc8e2934UL, 0xbc99a9a5UL, 0x34e59ff7UL,\n-    0x3ff3a7dbUL, 0xd661f5e3UL, 0xbc75e436UL, 0xbfec6cf4UL, 0x3ff3b57fUL,\n-    0xe26fff18UL, 0x3c954c66UL, 0xc313a8e5UL, 0x3ff3c32dUL, 0x375d29c3UL,\n-    0xbc9efff8UL, 0x44ede173UL, 0x3ff3d0e5UL, 0x8c284c71UL, 0x3c7fe8d0UL,\n-    0x4c123422UL, 0x3ff3dea6UL, 0x11f09ebcUL, 0x3c8ada09UL, 0xdf1c5175UL,\n-    0x3ff3ec70UL, 0x7b8c9bcaUL, 0xbc8af663UL, 0x04ac801cUL, 0x3ff3fa45UL,\n-    0xf956f9f3UL, 0xbc97d023UL, 0xc367a024UL, 0x3ff40822UL, 0xb6f4d048UL,\n-    0x3c8bddf8UL, 0x21f72e2aUL, 0x3ff4160aUL, 0x1c309278UL, 0xbc5ef369UL,\n-    0x2709468aUL, 0x3ff423fbUL, 0xc0b314ddUL, 0xbc98462dUL, 0xd950a897UL,\n-    0x3ff431f5UL, 0xe35f7999UL, 0xbc81c7ddUL, 0x3f84b9d4UL, 0x3ff43ffaUL,\n-    0x9704c003UL, 0x3c8880beUL, 0x6061892dUL, 0x3ff44e08UL, 0x04ef80d0UL,\n-    0x3c489b7aUL, 0x42a7d232UL, 0x3ff45c20UL, 0x82fb1f8eUL, 0xbc686419UL,\n-    0xed1d0057UL, 0x3ff46a41UL, 0xd1648a76UL, 0x3c9c944bUL, 0x668b3237UL,\n-    0x3ff4786dUL, 0xed445733UL, 0xbc9c20f0UL, 0xb5c13cd0UL, 0x3ff486a2UL,\n-    0xb69062f0UL, 0x3c73c1a3UL, 0xe192aed2UL, 0x3ff494e1UL, 0x5e499ea0UL,\n-    0xbc83b289UL, 0xf0d7d3deUL, 0x3ff4a32aUL, 0xf3d1be56UL, 0x3c99cb62UL,\n-    0xea6db7d7UL, 0x3ff4b17dUL, 0x7f2897f0UL, 0xbc8125b8UL, 0xd5362a27UL,\n-    0x3ff4bfdaUL, 0xafec42e2UL, 0x3c7d4397UL, 0xb817c114UL, 0x3ff4ce41UL,\n-    0x690abd5dUL, 0x3c905e29UL, 0x99fddd0dUL, 0x3ff4dcb2UL, 0xbc6a7833UL,\n-    0x3c98ecdbUL, 0x81d8abffUL, 0x3ff4eb2dUL, 0x2e5d7a52UL, 0xbc95257dUL,\n-    0x769d2ca7UL, 0x3ff4f9b2UL, 0xd25957e3UL, 0xbc94b309UL, 0x7f4531eeUL,\n-    0x3ff50841UL, 0x49b7465fUL, 0x3c7a249bUL, 0xa2cf6642UL, 0x3ff516daUL,\n-    0x69bd93efUL, 0xbc8f7685UL, 0xe83f4eefUL, 0x3ff5257dUL, 0x43efef71UL,\n-    0xbc7c998dUL, 0x569d4f82UL, 0x3ff5342bUL, 0x1db13cadUL, 0xbc807abeUL,\n-    0xf4f6ad27UL, 0x3ff542e2UL, 0x192d5f7eUL, 0x3c87926dUL, 0xca5d920fUL,\n-    0x3ff551a4UL, 0xefede59bUL, 0xbc8d689cUL, 0xdde910d2UL, 0x3ff56070UL,\n-    0x168eebf0UL, 0xbc90fb6eUL, 0x36b527daUL, 0x3ff56f47UL, 0x011d93adUL,\n-    0x3c99bb2cUL, 0xdbe2c4cfUL, 0x3ff57e27UL, 0x8a57b9c4UL, 0xbc90b98cUL,\n-    0xd497c7fdUL, 0x3ff58d12UL, 0x5b9a1de8UL, 0x3c8295e1UL, 0x27ff07ccUL,\n-    0x3ff59c08UL, 0xe467e60fUL, 0xbc97e2ceUL, 0xdd485429UL, 0x3ff5ab07UL,\n-    0x054647adUL, 0x3c96324cUL, 0xfba87a03UL, 0x3ff5ba11UL, 0x4c233e1aUL,\n-    0xbc9b77a1UL, 0x8a5946b7UL, 0x3ff5c926UL, 0x816986a2UL, 0x3c3c4b1bUL,\n-    0x90998b93UL, 0x3ff5d845UL, 0xa8b45643UL, 0xbc9cd6a7UL, 0x15ad2148UL,\n-    0x3ff5e76fUL, 0x3080e65eUL, 0x3c9ba6f9UL, 0x20dceb71UL, 0x3ff5f6a3UL,\n-    0xe3cdcf92UL, 0xbc89eaddUL, 0xb976dc09UL, 0x3ff605e1UL, 0x9b56de47UL,\n-    0xbc93e242UL, 0xe6cdf6f4UL, 0x3ff6152aUL, 0x4ab84c27UL, 0x3c9e4b3eUL,\n-    0xb03a5585UL, 0x3ff6247eUL, 0x7e40b497UL, 0xbc9383c1UL, 0x1d1929fdUL,\n-    0x3ff633ddUL, 0xbeb964e5UL, 0x3c984710UL, 0x34ccc320UL, 0x3ff64346UL,\n-    0x759d8933UL, 0xbc8c483cUL, 0xfebc8fb7UL, 0x3ff652b9UL, 0xc9a73e09UL,\n-    0xbc9ae3d5UL, 0x82552225UL, 0x3ff66238UL, 0x87591c34UL, 0xbc9bb609UL,\n-    0xc70833f6UL, 0x3ff671c1UL, 0x586c6134UL, 0xbc8e8732UL, 0xd44ca973UL,\n-    0x3ff68155UL, 0x44f73e65UL, 0x3c6038aeUL, 0xb19e9538UL, 0x3ff690f4UL,\n-    0x9aeb445dUL, 0x3c8804bdUL, 0x667f3bcdUL, 0x3ff6a09eUL, 0x13b26456UL,\n-    0xbc9bdd34UL, 0xfa75173eUL, 0x3ff6b052UL, 0x2c9a9d0eUL, 0x3c7a38f5UL,\n-    0x750bdabfUL, 0x3ff6c012UL, 0x67ff0b0dUL, 0xbc728956UL, 0xddd47645UL,\n-    0x3ff6cfdcUL, 0xb6f17309UL, 0x3c9c7aa9UL, 0x3c651a2fUL, 0x3ff6dfb2UL,\n-    0x683c88abUL, 0xbc6bbe3aUL, 0x98593ae5UL, 0x3ff6ef92UL, 0x9e1ac8b2UL,\n-    0xbc90b974UL, 0xf9519484UL, 0x3ff6ff7dUL, 0x25860ef6UL, 0xbc883c0fUL,\n-    0x66f42e87UL, 0x3ff70f74UL, 0xd45aa65fUL, 0x3c59d644UL, 0xe8ec5f74UL,\n-    0x3ff71f75UL, 0x86887a99UL, 0xbc816e47UL, 0x86ead08aUL, 0x3ff72f82UL,\n-    0x2cd62c72UL, 0xbc920aa0UL, 0x48a58174UL, 0x3ff73f9aUL, 0x6c65d53cUL,\n-    0xbc90a8d9UL, 0x35d7cbfdUL, 0x3ff74fbdUL, 0x618a6e1cUL, 0x3c9047fdUL,\n-    0x564267c9UL, 0x3ff75febUL, 0x57316dd3UL, 0xbc902459UL, 0xb1ab6e09UL,\n-    0x3ff77024UL, 0x169147f8UL, 0x3c9b7877UL, 0x4fde5d3fUL, 0x3ff78069UL,\n-    0x0a02162dUL, 0x3c9866b8UL, 0x38ac1cf6UL, 0x3ff790b9UL, 0x62aadd3eUL,\n-    0x3c9349a8UL, 0x73eb0187UL, 0x3ff7a114UL, 0xee04992fUL, 0xbc841577UL,\n-    0x0976cfdbUL, 0x3ff7b17bUL, 0x8468dc88UL, 0xbc9bebb5UL, 0x0130c132UL,\n-    0x3ff7c1edUL, 0xd1164dd6UL, 0x3c9f124cUL, 0x62ff86f0UL, 0x3ff7d26aUL,\n-    0xfb72b8b4UL, 0x3c91bddbUL, 0x36cf4e62UL, 0x3ff7e2f3UL, 0xba15797eUL,\n-    0x3c705d02UL, 0x8491c491UL, 0x3ff7f387UL, 0xcf9311aeUL, 0xbc807f11UL,\n-    0x543e1a12UL, 0x3ff80427UL, 0x626d972bUL, 0xbc927c86UL, 0xadd106d9UL,\n-    0x3ff814d2UL, 0x0d151d4dUL, 0x3c946437UL, 0x994cce13UL, 0x3ff82589UL,\n-    0xd41532d8UL, 0xbc9d4c1dUL, 0x1eb941f7UL, 0x3ff8364cUL, 0x31df2bd5UL,\n-    0x3c999b9aUL, 0x4623c7adUL, 0x3ff8471aUL, 0xa341cdfbUL, 0xbc88d684UL,\n-    0x179f5b21UL, 0x3ff857f4UL, 0xf8b216d0UL, 0xbc5ba748UL, 0x9b4492edUL,\n-    0x3ff868d9UL, 0x9bd4f6baUL, 0xbc9fc6f8UL, 0xd931a436UL, 0x3ff879caUL,\n-    0xd2db47bdUL, 0x3c85d2d7UL, 0xd98a6699UL, 0x3ff88ac7UL, 0xf37cb53aUL,\n-    0x3c9994c2UL, 0xa478580fUL, 0x3ff89bd0UL, 0x4475202aUL, 0x3c9d5395UL,\n-    0x422aa0dbUL, 0x3ff8ace5UL, 0x56864b27UL, 0x3c96e9f1UL, 0xbad61778UL,\n-    0x3ff8be05UL, 0xfc43446eUL, 0x3c9ecb5eUL, 0x16b5448cUL, 0x3ff8cf32UL,\n-    0x32e9e3aaUL, 0xbc70d55eUL, 0x5e0866d9UL, 0x3ff8e06aUL, 0x6fc9b2e6UL,\n-    0xbc97114aUL, 0x99157736UL, 0x3ff8f1aeUL, 0xa2e3976cUL, 0x3c85cc13UL,\n-    0xd0282c8aUL, 0x3ff902feUL, 0x85fe3fd2UL, 0x3c9592caUL, 0x0b91ffc6UL,\n-    0x3ff9145bUL, 0x2e582524UL, 0xbc9dd679UL, 0x53aa2fe2UL, 0x3ff925c3UL,\n-    0xa639db7fUL, 0xbc83455fUL, 0xb0cdc5e5UL, 0x3ff93737UL, 0x81b57ebcUL,\n-    0xbc675fc7UL, 0x2b5f98e5UL, 0x3ff948b8UL, 0x797d2d99UL, 0xbc8dc3d6UL,\n-    0xcbc8520fUL, 0x3ff95a44UL, 0x96a5f039UL, 0xbc764b7cUL, 0x9a7670b3UL,\n-    0x3ff96bddUL, 0x7f19c896UL, 0xbc5ba596UL, 0x9fde4e50UL, 0x3ff97d82UL,\n-    0x7c1b85d1UL, 0xbc9d185bUL, 0xe47a22a2UL, 0x3ff98f33UL, 0xa24c78ecUL,\n-    0x3c7cabdaUL, 0x70ca07baUL, 0x3ff9a0f1UL, 0x91cee632UL, 0xbc9173bdUL,\n-    0x4d53fe0dUL, 0x3ff9b2bbUL, 0x4df6d518UL, 0xbc9dd84eUL, 0x82a3f090UL,\n-    0x3ff9c491UL, 0xb071f2beUL, 0x3c7c7c46UL, 0x194bb8d5UL, 0x3ff9d674UL,\n-    0xa3dd8233UL, 0xbc9516beUL, 0x19e32323UL, 0x3ff9e863UL, 0x78e64c6eUL,\n-    0x3c7824caUL, 0x8d07f29eUL, 0x3ff9fa5eUL, 0xaaf1faceUL, 0xbc84a9ceUL,\n-    0x7b5de565UL, 0x3ffa0c66UL, 0x5d1cd533UL, 0xbc935949UL, 0xed8eb8bbUL,\n-    0x3ffa1e7aUL, 0xee8be70eUL, 0x3c9c6618UL, 0xec4a2d33UL, 0x3ffa309bUL,\n-    0x7ddc36abUL, 0x3c96305cUL, 0x80460ad8UL, 0x3ffa42c9UL, 0x589fb120UL,\n-    0xbc9aa780UL, 0xb23e255dUL, 0x3ffa5503UL, 0xdb8d41e1UL, 0xbc9d2f6eUL,\n-    0x8af46052UL, 0x3ffa674aUL, 0x30670366UL, 0x3c650f56UL, 0x1330b358UL,\n-    0x3ffa799eUL, 0xcac563c7UL, 0x3c9bcb7eUL, 0x53c12e59UL, 0x3ffa8bfeUL,\n-    0xb2ba15a9UL, 0xbc94f867UL, 0x5579fdbfUL, 0x3ffa9e6bUL, 0x0ef7fd31UL,\n-    0x3c90fac9UL, 0x21356ebaUL, 0x3ffab0e5UL, 0xdae94545UL, 0x3c889c31UL,\n-    0xbfd3f37aUL, 0x3ffac36bUL, 0xcae76cd0UL, 0xbc8f9234UL, 0x3a3c2774UL,\n-    0x3ffad5ffUL, 0xb6b1b8e5UL, 0x3c97ef3bUL, 0x995ad3adUL, 0x3ffae89fUL,\n-    0x345dcc81UL, 0x3c97a1cdUL, 0xe622f2ffUL, 0x3ffafb4cUL, 0x0f315ecdUL,\n-    0xbc94b2fcUL, 0x298db666UL, 0x3ffb0e07UL, 0x4c80e425UL, 0xbc9bdef5UL,\n-    0x6c9a8952UL, 0x3ffb20ceUL, 0x4a0756ccUL, 0x3c94dd02UL, 0xb84f15fbUL,\n-    0x3ffb33a2UL, 0x3084d708UL, 0xbc62805eUL, 0x15b749b1UL, 0x3ffb4684UL,\n-    0xe9df7c90UL, 0xbc7f763dUL, 0x8de5593aUL, 0x3ffb5972UL, 0xbbba6de3UL,\n-    0xbc9c71dfUL, 0x29f1c52aUL, 0x3ffb6c6eUL, 0x52883f6eUL, 0x3c92a8f3UL,\n-    0xf2fb5e47UL, 0x3ffb7f76UL, 0x7e54ac3bUL, 0xbc75584fUL, 0xf22749e4UL,\n-    0x3ffb928cUL, 0x54cb65c6UL, 0xbc9b7216UL, 0x30a1064aUL, 0x3ffba5b0UL,\n-    0x0e54292eUL, 0xbc9efcd3UL, 0xb79a6f1fUL, 0x3ffbb8e0UL, 0xc9696205UL,\n-    0xbc3f52d1UL, 0x904bc1d2UL, 0x3ffbcc1eUL, 0x7a2d9e84UL, 0x3c823dd0UL,\n-    0xc3f3a207UL, 0x3ffbdf69UL, 0x60ea5b53UL, 0xbc3c2623UL, 0x5bd71e09UL,\n-    0x3ffbf2c2UL, 0x3f6b9c73UL, 0xbc9efdcaUL, 0x6141b33dUL, 0x3ffc0628UL,\n-    0xa1fbca34UL, 0xbc8d8a5aUL, 0xdd85529cUL, 0x3ffc199bUL, 0x895048ddUL,\n-    0x3c811065UL, 0xd9fa652cUL, 0x3ffc2d1cUL, 0x17c8a5d7UL, 0xbc96e516UL,\n-    0x5fffd07aUL, 0x3ffc40abUL, 0xe083c60aUL, 0x3c9b4537UL, 0x78fafb22UL,\n-    0x3ffc5447UL, 0x2493b5afUL, 0x3c912f07UL, 0x2e57d14bUL, 0x3ffc67f1UL,\n-    0xff483cadUL, 0x3c92884dUL, 0x8988c933UL, 0x3ffc7ba8UL, 0xbe255559UL,\n-    0xbc8e76bbUL, 0x9406e7b5UL, 0x3ffc8f6dUL, 0x48805c44UL, 0x3c71acbcUL,\n-    0x5751c4dbUL, 0x3ffca340UL, 0xd10d08f5UL, 0xbc87f2beUL, 0xdcef9069UL,\n-    0x3ffcb720UL, 0xd1e949dbUL, 0x3c7503cbUL, 0x2e6d1675UL, 0x3ffccb0fUL,\n-    0x86009092UL, 0xbc7d220fUL, 0x555dc3faUL, 0x3ffcdf0bUL, 0x53829d72UL,\n-    0xbc8dd83bUL, 0x5b5bab74UL, 0x3ffcf315UL, 0xb86dff57UL, 0xbc9a08e9UL,\n-    0x4a07897cUL, 0x3ffd072dUL, 0x43797a9cUL, 0xbc9cbc37UL, 0x2b08c968UL,\n-    0x3ffd1b53UL, 0x219a36eeUL, 0x3c955636UL, 0x080d89f2UL, 0x3ffd2f87UL,\n-    0x719d8578UL, 0xbc9d487bUL, 0xeacaa1d6UL, 0x3ffd43c8UL, 0xbf5a1614UL,\n-    0x3c93db53UL, 0xdcfba487UL, 0x3ffd5818UL, 0xd75b3707UL, 0x3c82ed02UL,\n-    0xe862e6d3UL, 0x3ffd6c76UL, 0x4a8165a0UL, 0x3c5fe87aUL, 0x16c98398UL,\n-    0x3ffd80e3UL, 0x8beddfe8UL, 0xbc911ec1UL, 0x71ff6075UL, 0x3ffd955dUL,\n-    0xbb9af6beUL, 0x3c9a052dUL, 0x03db3285UL, 0x3ffda9e6UL, 0x696db532UL,\n-    0x3c9c2300UL, 0xd63a8315UL, 0x3ffdbe7cUL, 0x926b8be4UL, 0xbc9b76f1UL,\n-    0xf301b460UL, 0x3ffdd321UL, 0x78f018c3UL, 0x3c92da57UL, 0x641c0658UL,\n-    0x3ffde7d5UL, 0x8e79ba8fUL, 0xbc9ca552UL, 0x337b9b5fUL, 0x3ffdfc97UL,\n-    0x4f184b5cUL, 0xbc91a5cdUL, 0x6b197d17UL, 0x3ffe1167UL, 0xbd5c7f44UL,\n-    0xbc72b529UL, 0x14f5a129UL, 0x3ffe2646UL, 0x817a1496UL, 0xbc97b627UL,\n-    0x3b16ee12UL, 0x3ffe3b33UL, 0x31fdc68bUL, 0xbc99f4a4UL, 0xe78b3ff6UL,\n-    0x3ffe502eUL, 0x80a9cc8fUL, 0x3c839e89UL, 0x24676d76UL, 0x3ffe6539UL,\n-    0x7522b735UL, 0xbc863ff8UL, 0xfbc74c83UL, 0x3ffe7a51UL, 0xca0c8de2UL,\n-    0x3c92d522UL, 0x77cdb740UL, 0x3ffe8f79UL, 0x80b054b1UL, 0xbc910894UL,\n-    0xa2a490daUL, 0x3ffea4afUL, 0x179c2893UL, 0xbc9e9c23UL, 0x867cca6eUL,\n-    0x3ffeb9f4UL, 0x2293e4f2UL, 0x3c94832fUL, 0x2d8e67f1UL, 0x3ffecf48UL,\n-    0xb411ad8cUL, 0xbc9c93f3UL, 0xa2188510UL, 0x3ffee4aaUL, 0xa487568dUL,\n-    0x3c91c68dUL, 0xee615a27UL, 0x3ffefa1bUL, 0x86a4b6b0UL, 0x3c9dc7f4UL,\n-    0x1cb6412aUL, 0x3fff0f9cUL, 0x65181d45UL, 0xbc932200UL, 0x376bba97UL,\n-    0x3fff252bUL, 0xbf0d8e43UL, 0x3c93a1a5UL, 0x48dd7274UL, 0x3fff3ac9UL,\n-    0x3ed837deUL, 0xbc795a5aUL, 0x5b6e4540UL, 0x3fff5076UL, 0x2dd8a18bUL,\n-    0x3c99d3e1UL, 0x798844f8UL, 0x3fff6632UL, 0x3539343eUL, 0x3c9fa37bUL,\n-    0xad9cbe14UL, 0x3fff7bfdUL, 0xd006350aUL, 0xbc9dbb12UL, 0x02243c89UL,\n-    0x3fff91d8UL, 0xa779f689UL, 0xbc612ea8UL, 0x819e90d8UL, 0x3fffa7c1UL,\n-    0xf3a5931eUL, 0x3c874853UL, 0x3692d514UL, 0x3fffbdbaUL, 0x15098eb6UL,\n-    0xbc796773UL, 0x2b8f71f1UL, 0x3fffd3c2UL, 0x966579e7UL, 0x3c62eb74UL,\n-    0x6b2a23d9UL, 0x3fffe9d9UL, 0x7442fde3UL, 0x3c74a603UL\n-};\n-\n-ATTRIBUTE_ALIGNED(16) juint _e_coeff[] =\n-{\n-    0xe78a6731UL, 0x3f55d87fUL, 0xd704a0c0UL, 0x3fac6b08UL, 0x6fba4e77UL,\n-    0x3f83b2abUL, 0xff82c58fUL, 0x3fcebfbdUL, 0xfefa39efUL, 0x3fe62e42UL,\n-    0x00000000UL, 0x00000000UL\n-};\n-\n-ATTRIBUTE_ALIGNED(16) juint _coeff_h[] =\n-{\n-    0x00000000UL, 0xbfd61a00UL, 0x00000000UL, 0xbf5dabe1UL\n-};\n-\n-ATTRIBUTE_ALIGNED(16) juint _HIGHMASK_LOG_X[] =\n-{\n-    0xf8000000UL, 0xffffffffUL, 0x00000000UL, 0xfffff800UL\n-};\n-\n-ATTRIBUTE_ALIGNED(8) juint _HALFMASK[] =\n-{\n-    0xf8000000UL, 0xffffffffUL, 0xf8000000UL, 0xffffffffUL\n-};\n-\n-ATTRIBUTE_ALIGNED(16) juint _coeff_pow[] =\n-{\n-    0x6dc96112UL, 0xbf836578UL, 0xee241472UL, 0xbf9b0301UL, 0x9f95985aUL,\n-    0xbfb528dbUL, 0xb3841d2aUL, 0xbfd619b6UL, 0x518775e3UL, 0x3f9004f2UL,\n-    0xac8349bbUL, 0x3fa76c9bUL, 0x486ececcUL, 0x3fc4635eUL, 0x161bb241UL,\n-    0xbf5dabe1UL, 0x9f95985aUL, 0xbfb528dbUL, 0xf8b5787dUL, 0x3ef2531eUL,\n-    0x486ececbUL, 0x3fc4635eUL, 0x412055ccUL, 0xbdd61bb2UL\n-};\n-\n-ATTRIBUTE_ALIGNED(16) juint _L_tbl_pow[] =\n-{\n-    0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0x00000000UL, 0x20000000UL,\n-    0x3feff00aUL, 0x96621f95UL, 0x3e5b1856UL, 0xe0000000UL, 0x3fefe019UL,\n-    0xe5916f9eUL, 0xbe325278UL, 0x00000000UL, 0x3fefd02fUL, 0x859a1062UL,\n-    0x3e595fb7UL, 0xc0000000UL, 0x3fefc049UL, 0xb245f18fUL, 0xbe529c38UL,\n-    0xe0000000UL, 0x3fefb069UL, 0xad2880a7UL, 0xbe501230UL, 0x60000000UL,\n-    0x3fefa08fUL, 0xc8e72420UL, 0x3e597bd1UL, 0x80000000UL, 0x3fef90baUL,\n-    0xc30c4500UL, 0xbe5d6c75UL, 0xe0000000UL, 0x3fef80eaUL, 0x02c63f43UL,\n-    0x3e2e1318UL, 0xc0000000UL, 0x3fef7120UL, 0xb3d4ccccUL, 0xbe44c52aUL,\n-    0x00000000UL, 0x3fef615cUL, 0xdbd91397UL, 0xbe4e7d6cUL, 0xa0000000UL,\n-    0x3fef519cUL, 0x65c5cd68UL, 0xbe522dc8UL, 0xa0000000UL, 0x3fef41e2UL,\n-    0x46d1306cUL, 0xbe5a840eUL, 0xe0000000UL, 0x3fef322dUL, 0xd2980e94UL,\n-    0x3e5071afUL, 0xa0000000UL, 0x3fef227eUL, 0x773abadeUL, 0xbe5891e5UL,\n-    0xa0000000UL, 0x3fef12d4UL, 0xdc6bf46bUL, 0xbe5cccbeUL, 0xe0000000UL,\n-    0x3fef032fUL, 0xbc7247faUL, 0xbe2bab83UL, 0x80000000UL, 0x3feef390UL,\n-    0xbcaa1e46UL, 0xbe53bb3bUL, 0x60000000UL, 0x3feee3f6UL, 0x5f6c682dUL,\n-    0xbe54c619UL, 0x80000000UL, 0x3feed461UL, 0x5141e368UL, 0xbe4b6d86UL,\n-    0xe0000000UL, 0x3feec4d1UL, 0xec678f76UL, 0xbe369af6UL, 0x80000000UL,\n-    0x3feeb547UL, 0x41301f55UL, 0xbe2d4312UL, 0x60000000UL, 0x3feea5c2UL,\n-    0x676da6bdUL, 0xbe4d8dd0UL, 0x60000000UL, 0x3fee9642UL, 0x57a891c4UL,\n-    0x3e51f991UL, 0xa0000000UL, 0x3fee86c7UL, 0xe4eb491eUL, 0x3e579bf9UL,\n-    0x20000000UL, 0x3fee7752UL, 0xfddc4a2cUL, 0xbe3356e6UL, 0xc0000000UL,\n-    0x3fee67e1UL, 0xd75b5bf1UL, 0xbe449531UL, 0x80000000UL, 0x3fee5876UL,\n-    0xbd423b8eUL, 0x3df54fe4UL, 0x60000000UL, 0x3fee4910UL, 0x330e51b9UL,\n-    0x3e54289cUL, 0x80000000UL, 0x3fee39afUL, 0x8651a95fUL, 0xbe55aad6UL,\n-    0xa0000000UL, 0x3fee2a53UL, 0x5e98c708UL, 0xbe2fc4a9UL, 0xe0000000UL,\n-    0x3fee1afcUL, 0x0989328dUL, 0x3e23958cUL, 0x40000000UL, 0x3fee0babUL,\n-    0xee642abdUL, 0xbe425dd8UL, 0xa0000000UL, 0x3fedfc5eUL, 0xc394d236UL,\n-    0x3e526362UL, 0x20000000UL, 0x3feded17UL, 0xe104aa8eUL, 0x3e4ce247UL,\n-    0xc0000000UL, 0x3fedddd4UL, 0x265a9be4UL, 0xbe5bb77aUL, 0x40000000UL,\n-    0x3fedce97UL, 0x0ecac52fUL, 0x3e4a7cb1UL, 0xe0000000UL, 0x3fedbf5eUL,\n-    0x124cb3b8UL, 0x3e257024UL, 0x80000000UL, 0x3fedb02bUL, 0xe6d4febeUL,\n-    0xbe2033eeUL, 0x20000000UL, 0x3feda0fdUL, 0x39cca00eUL, 0xbe3ddabcUL,\n-    0xc0000000UL, 0x3fed91d3UL, 0xef8a552aUL, 0xbe543390UL, 0x40000000UL,\n-    0x3fed82afUL, 0xb8e85204UL, 0x3e513850UL, 0xe0000000UL, 0x3fed738fUL,\n-    0x3d59fe08UL, 0xbe5db728UL, 0x40000000UL, 0x3fed6475UL, 0x3aa7ead1UL,\n-    0x3e58804bUL, 0xc0000000UL, 0x3fed555fUL, 0xf8a35ba9UL, 0xbe5298b0UL,\n-    0x00000000UL, 0x3fed464fUL, 0x9a88dd15UL, 0x3e5a8cdbUL, 0x40000000UL,\n-    0x3fed3743UL, 0xb0b0a190UL, 0x3e598635UL, 0x80000000UL, 0x3fed283cUL,\n-    0xe2113295UL, 0xbe5c1119UL, 0x80000000UL, 0x3fed193aUL, 0xafbf1728UL,\n-    0xbe492e9cUL, 0x60000000UL, 0x3fed0a3dUL, 0xe4a4ccf3UL, 0x3e19b90eUL,\n-    0x20000000UL, 0x3fecfb45UL, 0xba3cbeb8UL, 0x3e406b50UL, 0xc0000000UL,\n-    0x3fecec51UL, 0x110f7dddUL, 0x3e0d6806UL, 0x40000000UL, 0x3fecdd63UL,\n-    0x7dd7d508UL, 0xbe5a8943UL, 0x80000000UL, 0x3fecce79UL, 0x9b60f271UL,\n-    0xbe50676aUL, 0x80000000UL, 0x3fecbf94UL, 0x0b9ad660UL, 0x3e59174fUL,\n-    0x60000000UL, 0x3fecb0b4UL, 0x00823d9cUL, 0x3e5bbf72UL, 0x20000000UL,\n-    0x3feca1d9UL, 0x38a6ec89UL, 0xbe4d38f9UL, 0x80000000UL, 0x3fec9302UL,\n-    0x3a0b7d8eUL, 0x3e53dbfdUL, 0xc0000000UL, 0x3fec8430UL, 0xc6826b34UL,\n-    0xbe27c5c9UL, 0xc0000000UL, 0x3fec7563UL, 0x0c706381UL, 0xbe593653UL,\n-    0x60000000UL, 0x3fec669bUL, 0x7df34ec7UL, 0x3e461ab5UL, 0xe0000000UL,\n-    0x3fec57d7UL, 0x40e5e7e8UL, 0xbe5c3daeUL, 0x00000000UL, 0x3fec4919UL,\n-    0x5602770fUL, 0xbe55219dUL, 0xc0000000UL, 0x3fec3a5eUL, 0xec7911ebUL,\n-    0x3e5a5d25UL, 0x60000000UL, 0x3fec2ba9UL, 0xb39ea225UL, 0xbe53c00bUL,\n-    0x80000000UL, 0x3fec1cf8UL, 0x967a212eUL, 0x3e5a8ddfUL, 0x60000000UL,\n-    0x3fec0e4cUL, 0x580798bdUL, 0x3e5f53abUL, 0x00000000UL, 0x3febffa5UL,\n-    0xb8282df6UL, 0xbe46b874UL, 0x20000000UL, 0x3febf102UL, 0xe33a6729UL,\n-    0x3e54963fUL, 0x00000000UL, 0x3febe264UL, 0x3b53e88aUL, 0xbe3adce1UL,\n-    0x60000000UL, 0x3febd3caUL, 0xc2585084UL, 0x3e5cde9fUL, 0x80000000UL,\n-    0x3febc535UL, 0xa335c5eeUL, 0xbe39fd9cUL, 0x20000000UL, 0x3febb6a5UL,\n-    0x7325b04dUL, 0x3e42ba15UL, 0x60000000UL, 0x3feba819UL, 0x1564540fUL,\n-    0x3e3a9f35UL, 0x40000000UL, 0x3feb9992UL, 0x83fff592UL, 0xbe5465ceUL,\n-    0xa0000000UL, 0x3feb8b0fUL, 0xb9da63d3UL, 0xbe4b1a0aUL, 0x80000000UL,\n-    0x3feb7c91UL, 0x6d6f1ea4UL, 0x3e557657UL, 0x00000000UL, 0x3feb6e18UL,\n-    0x5e80a1bfUL, 0x3e4ddbb6UL, 0x00000000UL, 0x3feb5fa3UL, 0x1c9eacb5UL,\n-    0x3e592877UL, 0xa0000000UL, 0x3feb5132UL, 0x6d40beb3UL, 0xbe51858cUL,\n-    0xa0000000UL, 0x3feb42c6UL, 0xd740c67bUL, 0x3e427ad2UL, 0x40000000UL,\n-    0x3feb345fUL, 0xa3e0cceeUL, 0xbe5c2fc4UL, 0x40000000UL, 0x3feb25fcUL,\n-    0x8e752b50UL, 0xbe3da3c2UL, 0xc0000000UL, 0x3feb179dUL, 0xa892e7deUL,\n-    0x3e1fb481UL, 0xc0000000UL, 0x3feb0943UL, 0x21ed71e9UL, 0xbe365206UL,\n-    0x20000000UL, 0x3feafaeeUL, 0x0e1380a3UL, 0x3e5c5b7bUL, 0x20000000UL,\n-    0x3feaec9dUL, 0x3c3d640eUL, 0xbe5dbbd0UL, 0x60000000UL, 0x3feade50UL,\n-    0x8f97a715UL, 0x3e3a8ec5UL, 0x20000000UL, 0x3fead008UL, 0x23ab2839UL,\n-    0x3e2fe98aUL, 0x40000000UL, 0x3feac1c4UL, 0xf4bbd50fUL, 0x3e54d8f6UL,\n-    0xe0000000UL, 0x3feab384UL, 0x14757c4dUL, 0xbe48774cUL, 0xc0000000UL,\n-    0x3feaa549UL, 0x7c7b0eeaUL, 0x3e5b51bbUL, 0x20000000UL, 0x3fea9713UL,\n-    0xf56f7013UL, 0x3e386200UL, 0xe0000000UL, 0x3fea88e0UL, 0xbe428ebeUL,\n-    0xbe514af5UL, 0xe0000000UL, 0x3fea7ab2UL, 0x8d0e4496UL, 0x3e4f9165UL,\n-    0x60000000UL, 0x3fea6c89UL, 0xdbacc5d5UL, 0xbe5c063bUL, 0x20000000UL,\n-    0x3fea5e64UL, 0x3f19d970UL, 0xbe5a0c8cUL, 0x20000000UL, 0x3fea5043UL,\n-    0x09ea3e6bUL, 0x3e5065dcUL, 0x80000000UL, 0x3fea4226UL, 0x78df246cUL,\n-    0x3e5e05f6UL, 0x40000000UL, 0x3fea340eUL, 0x4057d4a0UL, 0x3e431b2bUL,\n-    0x40000000UL, 0x3fea25faUL, 0x82867bb5UL, 0x3e4b76beUL, 0xa0000000UL,\n-    0x3fea17eaUL, 0x9436f40aUL, 0xbe5aad39UL, 0x20000000UL, 0x3fea09dfUL,\n-    0x4b5253b3UL, 0x3e46380bUL, 0x00000000UL, 0x3fe9fbd8UL, 0x8fc52466UL,\n-    0xbe386f9bUL, 0x20000000UL, 0x3fe9edd5UL, 0x22d3f344UL, 0xbe538347UL,\n-    0x60000000UL, 0x3fe9dfd6UL, 0x1ac33522UL, 0x3e5dbc53UL, 0x00000000UL,\n-    0x3fe9d1dcUL, 0xeabdff1dUL, 0x3e40fc0cUL, 0xe0000000UL, 0x3fe9c3e5UL,\n-    0xafd30e73UL, 0xbe585e63UL, 0xe0000000UL, 0x3fe9b5f3UL, 0xa52f226aUL,\n-    0xbe43e8f9UL, 0x20000000UL, 0x3fe9a806UL, 0xecb8698dUL, 0xbe515b36UL,\n-    0x80000000UL, 0x3fe99a1cUL, 0xf2b4e89dUL, 0x3e48b62bUL, 0x20000000UL,\n-    0x3fe98c37UL, 0x7c9a88fbUL, 0x3e44414cUL, 0x00000000UL, 0x3fe97e56UL,\n-    0xda015741UL, 0xbe5d13baUL, 0xe0000000UL, 0x3fe97078UL, 0x5fdace06UL,\n-    0x3e51b947UL, 0x00000000UL, 0x3fe962a0UL, 0x956ca094UL, 0x3e518785UL,\n-    0x40000000UL, 0x3fe954cbUL, 0x01164c1dUL, 0x3e5d5b57UL, 0xc0000000UL,\n-    0x3fe946faUL, 0xe63b3767UL, 0xbe4f84e7UL, 0x40000000UL, 0x3fe9392eUL,\n-    0xe57cc2a9UL, 0x3e34eda3UL, 0xe0000000UL, 0x3fe92b65UL, 0x8c75b544UL,\n-    0x3e5766a0UL, 0xc0000000UL, 0x3fe91da1UL, 0x37d1d087UL, 0xbe5e2ab1UL,\n-    0x80000000UL, 0x3fe90fe1UL, 0xa953dc20UL, 0x3e5fa1f3UL, 0x80000000UL,\n-    0x3fe90225UL, 0xdbd3f369UL, 0x3e47d6dbUL, 0xa0000000UL, 0x3fe8f46dUL,\n-    0x1c9be989UL, 0xbe5e2b0aUL, 0xa0000000UL, 0x3fe8e6b9UL, 0x3c93d76aUL,\n-    0x3e5c8618UL, 0xe0000000UL, 0x3fe8d909UL, 0x2182fc9aUL, 0xbe41aa9eUL,\n-    0x20000000UL, 0x3fe8cb5eUL, 0xe6b3539dUL, 0xbe530d19UL, 0x60000000UL,\n-    0x3fe8bdb6UL, 0x49e58cc3UL, 0xbe3bb374UL, 0xa0000000UL, 0x3fe8b012UL,\n-    0xa7cfeb8fUL, 0x3e56c412UL, 0x00000000UL, 0x3fe8a273UL, 0x8d52bc19UL,\n-    0x3e1429b8UL, 0x60000000UL, 0x3fe894d7UL, 0x4dc32c6cUL, 0xbe48604cUL,\n-    0xc0000000UL, 0x3fe8873fUL, 0x0c868e56UL, 0xbe564ee5UL, 0x00000000UL,\n-    0x3fe879acUL, 0x56aee828UL, 0x3e5e2fd8UL, 0x60000000UL, 0x3fe86c1cUL,\n-    0x7ceab8ecUL, 0x3e493365UL, 0xc0000000UL, 0x3fe85e90UL, 0x78d4dadcUL,\n-    0xbe4f7f25UL, 0x00000000UL, 0x3fe85109UL, 0x0ccd8280UL, 0x3e31e7a2UL,\n-    0x40000000UL, 0x3fe84385UL, 0x34ba4e15UL, 0x3e328077UL, 0x80000000UL,\n-    0x3fe83605UL, 0xa670975aUL, 0xbe53eee5UL, 0xa0000000UL, 0x3fe82889UL,\n-    0xf61b77b2UL, 0xbe43a20aUL, 0xa0000000UL, 0x3fe81b11UL, 0x13e6643bUL,\n-    0x3e5e5fe5UL, 0xc0000000UL, 0x3fe80d9dUL, 0x82cc94e8UL, 0xbe5ff1f9UL,\n-    0xa0000000UL, 0x3fe8002dUL, 0x8a0c9c5dUL, 0xbe42b0e7UL, 0x60000000UL,\n-    0x3fe7f2c1UL, 0x22a16f01UL, 0x3e5d9ea0UL, 0x20000000UL, 0x3fe7e559UL,\n-    0xc38cd451UL, 0x3e506963UL, 0xc0000000UL, 0x3fe7d7f4UL, 0x9902bc71UL,\n-    0x3e4503d7UL, 0x40000000UL, 0x3fe7ca94UL, 0xdef2a3c0UL, 0x3e3d98edUL,\n-    0xa0000000UL, 0x3fe7bd37UL, 0xed49abb0UL, 0x3e24c1ffUL, 0xe0000000UL,\n-    0x3fe7afdeUL, 0xe3b0be70UL, 0xbe40c467UL, 0x00000000UL, 0x3fe7a28aUL,\n-    0xaf9f193cUL, 0xbe5dff6cUL, 0xe0000000UL, 0x3fe79538UL, 0xb74cf6b6UL,\n-    0xbe258ed0UL, 0xa0000000UL, 0x3fe787ebUL, 0x1d9127c7UL, 0x3e345fb0UL,\n-    0x40000000UL, 0x3fe77aa2UL, 0x1028c21dUL, 0xbe4619bdUL, 0xa0000000UL,\n-    0x3fe76d5cUL, 0x7cb0b5e4UL, 0x3e40f1a2UL, 0xe0000000UL, 0x3fe7601aUL,\n-    0x2b1bc4adUL, 0xbe32e8bbUL, 0xe0000000UL, 0x3fe752dcUL, 0x6839f64eUL,\n-    0x3e41f57bUL, 0xc0000000UL, 0x3fe745a2UL, 0xc4121f7eUL, 0xbe52c40aUL,\n-    0x60000000UL, 0x3fe7386cUL, 0xd6852d72UL, 0xbe5c4e6bUL, 0xc0000000UL,\n-    0x3fe72b39UL, 0x91d690f7UL, 0xbe57f88fUL, 0xe0000000UL, 0x3fe71e0aUL,\n-    0x627a2159UL, 0xbe4425d5UL, 0xc0000000UL, 0x3fe710dfUL, 0x50a54033UL,\n-    0x3e422b7eUL, 0x60000000UL, 0x3fe703b8UL, 0x3b0b5f91UL, 0x3e5d3857UL,\n-    0xe0000000UL, 0x3fe6f694UL, 0x84d628a2UL, 0xbe51f090UL, 0x00000000UL,\n-    0x3fe6e975UL, 0x306d8894UL, 0xbe414d83UL, 0xe0000000UL, 0x3fe6dc58UL,\n-    0x30bf24aaUL, 0xbe4650caUL, 0x80000000UL, 0x3fe6cf40UL, 0xd4628d69UL,\n-    0xbe5db007UL, 0xc0000000UL, 0x3fe6c22bUL, 0xa2aae57bUL, 0xbe31d279UL,\n-    0xc0000000UL, 0x3fe6b51aUL, 0x860edf7eUL, 0xbe2d4c4aUL, 0x80000000UL,\n-    0x3fe6a80dUL, 0xf3559341UL, 0xbe5f7e98UL, 0xe0000000UL, 0x3fe69b03UL,\n-    0xa885899eUL, 0xbe5c2011UL, 0xe0000000UL, 0x3fe68dfdUL, 0x2bdc6d37UL,\n-    0x3e224a82UL, 0xa0000000UL, 0x3fe680fbUL, 0xc12ad1b9UL, 0xbe40cf56UL,\n-    0x00000000UL, 0x3fe673fdUL, 0x1bcdf659UL, 0xbdf52f2dUL, 0x00000000UL,\n-    0x3fe66702UL, 0x5df10408UL, 0x3e5663e0UL, 0xc0000000UL, 0x3fe65a0aUL,\n-    0xa4070568UL, 0xbe40b12fUL, 0x00000000UL, 0x3fe64d17UL, 0x71c54c47UL,\n-    0x3e5f5e8bUL, 0x00000000UL, 0x3fe64027UL, 0xbd4b7e83UL, 0x3e42ead6UL,\n-    0xa0000000UL, 0x3fe6333aUL, 0x61598bd2UL, 0xbe4c48d4UL, 0xc0000000UL,\n-    0x3fe62651UL, 0x6f538d61UL, 0x3e548401UL, 0xa0000000UL, 0x3fe6196cUL,\n-    0x14344120UL, 0xbe529af6UL, 0x00000000UL, 0x3fe60c8bUL, 0x5982c587UL,\n-    0xbe3e1e4fUL, 0x00000000UL, 0x3fe5ffadUL, 0xfe51d4eaUL, 0xbe4c897aUL,\n-    0x80000000UL, 0x3fe5f2d2UL, 0xfd46ebe1UL, 0x3e552e00UL, 0xa0000000UL,\n-    0x3fe5e5fbUL, 0xa4695699UL, 0x3e5ed471UL, 0x60000000UL, 0x3fe5d928UL,\n-    0x80d118aeUL, 0x3e456b61UL, 0xa0000000UL, 0x3fe5cc58UL, 0x304c330bUL,\n-    0x3e54dc29UL, 0x80000000UL, 0x3fe5bf8cUL, 0x0af2dedfUL, 0xbe3aa9bdUL,\n-    0xe0000000UL, 0x3fe5b2c3UL, 0x15fc9258UL, 0xbe479a37UL, 0xc0000000UL,\n-    0x3fe5a5feUL, 0x9292c7eaUL, 0x3e188650UL, 0x20000000UL, 0x3fe5993dUL,\n-    0x33b4d380UL, 0x3e5d6d93UL, 0x20000000UL, 0x3fe58c7fUL, 0x02fd16c7UL,\n-    0x3e2fe961UL, 0xa0000000UL, 0x3fe57fc4UL, 0x4a05edb6UL, 0xbe4d55b4UL,\n-    0xa0000000UL, 0x3fe5730dUL, 0x3d443abbUL, 0xbe5e6954UL, 0x00000000UL,\n-    0x3fe5665aUL, 0x024acfeaUL, 0x3e50e61bUL, 0x00000000UL, 0x3fe559aaUL,\n-    0xcc9edd09UL, 0xbe325403UL, 0x60000000UL, 0x3fe54cfdUL, 0x1fe26950UL,\n-    0x3e5d500eUL, 0x60000000UL, 0x3fe54054UL, 0x6c5ae164UL, 0xbe4a79b4UL,\n-    0xc0000000UL, 0x3fe533aeUL, 0x154b0287UL, 0xbe401571UL, 0xa0000000UL,\n-    0x3fe5270cUL, 0x0673f401UL, 0xbe56e56bUL, 0xe0000000UL, 0x3fe51a6dUL,\n-    0x751b639cUL, 0x3e235269UL, 0xa0000000UL, 0x3fe50dd2UL, 0x7c7b2bedUL,\n-    0x3ddec887UL, 0xc0000000UL, 0x3fe5013aUL, 0xafab4e17UL, 0x3e5e7575UL,\n-    0x60000000UL, 0x3fe4f4a6UL, 0x2e308668UL, 0x3e59aed6UL, 0x80000000UL,\n-    0x3fe4e815UL, 0xf33e2a76UL, 0xbe51f184UL, 0xe0000000UL, 0x3fe4db87UL,\n-    0x839f3e3eUL, 0x3e57db01UL, 0xc0000000UL, 0x3fe4cefdUL, 0xa9eda7bbUL,\n-    0x3e535e0fUL, 0x00000000UL, 0x3fe4c277UL, 0x2a8f66a5UL, 0x3e5ce451UL,\n-    0xc0000000UL, 0x3fe4b5f3UL, 0x05192456UL, 0xbe4e8518UL, 0xc0000000UL,\n-    0x3fe4a973UL, 0x4aa7cd1dUL, 0x3e46784aUL, 0x40000000UL, 0x3fe49cf7UL,\n-    0x8e23025eUL, 0xbe5749f2UL, 0x00000000UL, 0x3fe4907eUL, 0x18d30215UL,\n-    0x3e360f39UL, 0x20000000UL, 0x3fe48408UL, 0x63dcf2f3UL, 0x3e5e00feUL,\n-    0xc0000000UL, 0x3fe47795UL, 0x46182d09UL, 0xbe5173d9UL, 0xa0000000UL,\n-    0x3fe46b26UL, 0x8f0e62aaUL, 0xbe48f281UL, 0xe0000000UL, 0x3fe45ebaUL,\n-    0x5775c40cUL, 0xbe56aad4UL, 0x60000000UL, 0x3fe45252UL, 0x0fe25f69UL,\n-    0x3e48bd71UL, 0x40000000UL, 0x3fe445edUL, 0xe9989ec5UL, 0x3e590d97UL,\n-    0x80000000UL, 0x3fe4398bUL, 0xb3d9ffe3UL, 0x3e479dbcUL, 0x20000000UL,\n-    0x3fe42d2dUL, 0x388e4d2eUL, 0xbe5eed80UL, 0xe0000000UL, 0x3fe420d1UL,\n-    0x6f797c18UL, 0x3e554b4cUL, 0x20000000UL, 0x3fe4147aUL, 0x31048bb4UL,\n-    0xbe5b1112UL, 0x80000000UL, 0x3fe40825UL, 0x2efba4f9UL, 0x3e48ebc7UL,\n-    0x40000000UL, 0x3fe3fbd4UL, 0x50201119UL, 0x3e40b701UL, 0x40000000UL,\n-    0x3fe3ef86UL, 0x0a4db32cUL, 0x3e551de8UL, 0xa0000000UL, 0x3fe3e33bUL,\n-    0x0c9c148bUL, 0xbe50c1f6UL, 0x20000000UL, 0x3fe3d6f4UL, 0xc9129447UL,\n-    0x3e533fa0UL, 0x00000000UL, 0x3fe3cab0UL, 0xaae5b5a0UL, 0xbe22b68eUL,\n-    0x20000000UL, 0x3fe3be6fUL, 0x02305e8aUL, 0xbe54fc08UL, 0x60000000UL,\n-    0x3fe3b231UL, 0x7f908258UL, 0x3e57dc05UL, 0x00000000UL, 0x3fe3a5f7UL,\n-    0x1a09af78UL, 0x3e08038bUL, 0xe0000000UL, 0x3fe399bfUL, 0x490643c1UL,\n-    0xbe5dbe42UL, 0xe0000000UL, 0x3fe38d8bUL, 0x5e8ad724UL, 0xbe3c2b72UL,\n-    0x20000000UL, 0x3fe3815bUL, 0xc67196b6UL, 0x3e1713cfUL, 0xa0000000UL,\n-    0x3fe3752dUL, 0x6182e429UL, 0xbe3ec14cUL, 0x40000000UL, 0x3fe36903UL,\n-    0xab6eb1aeUL, 0x3e5a2cc5UL, 0x40000000UL, 0x3fe35cdcUL, 0xfe5dc064UL,\n-    0xbe5c5878UL, 0x40000000UL, 0x3fe350b8UL, 0x0ba6b9e4UL, 0x3e51619bUL,\n-    0x80000000UL, 0x3fe34497UL, 0x857761aaUL, 0x3e5fff53UL, 0x00000000UL,\n-    0x3fe3387aUL, 0xf872d68cUL, 0x3e484f4dUL, 0xa0000000UL, 0x3fe32c5fUL,\n-    0x087e97c2UL, 0x3e52842eUL, 0x80000000UL, 0x3fe32048UL, 0x73d6d0c0UL,\n-    0xbe503edfUL, 0x80000000UL, 0x3fe31434UL, 0x0c1456a1UL, 0xbe5f72adUL,\n-    0xa0000000UL, 0x3fe30823UL, 0x83a1a4d5UL, 0xbe5e65ccUL, 0xe0000000UL,\n-    0x3fe2fc15UL, 0x855a7390UL, 0xbe506438UL, 0x40000000UL, 0x3fe2f00bUL,\n-    0xa2898287UL, 0x3e3d22a2UL, 0xe0000000UL, 0x3fe2e403UL, 0x8b56f66fUL,\n-    0xbe5aa5fdUL, 0x80000000UL, 0x3fe2d7ffUL, 0x52db119aUL, 0x3e3a2e3dUL,\n-    0x60000000UL, 0x3fe2cbfeUL, 0xe2ddd4c0UL, 0xbe586469UL, 0x40000000UL,\n-    0x3fe2c000UL, 0x6b01bf10UL, 0x3e352b9dUL, 0x40000000UL, 0x3fe2b405UL,\n-    0xb07a1cdfUL, 0x3e5c5cdaUL, 0x80000000UL, 0x3fe2a80dUL, 0xc7b5f868UL,\n-    0xbe5668b3UL, 0xc0000000UL, 0x3fe29c18UL, 0x185edf62UL, 0xbe563d66UL,\n-    0x00000000UL, 0x3fe29027UL, 0xf729e1ccUL, 0x3e59a9a0UL, 0x80000000UL,\n-    0x3fe28438UL, 0x6433c727UL, 0xbe43cc89UL, 0x00000000UL, 0x3fe2784dUL,\n-    0x41782631UL, 0xbe30750cUL, 0xa0000000UL, 0x3fe26c64UL, 0x914911b7UL,\n-    0xbe58290eUL, 0x40000000UL, 0x3fe2607fUL, 0x3dcc73e1UL, 0xbe4269cdUL,\n-    0x00000000UL, 0x3fe2549dUL, 0x2751bf70UL, 0xbe5a6998UL, 0xc0000000UL,\n-    0x3fe248bdUL, 0x4248b9fbUL, 0xbe4ddb00UL, 0x80000000UL, 0x3fe23ce1UL,\n-    0xf35cf82fUL, 0x3e561b71UL, 0x60000000UL, 0x3fe23108UL, 0x8e481a2dUL,\n-    0x3e518fb9UL, 0x60000000UL, 0x3fe22532UL, 0x5ab96edcUL, 0xbe5fafc5UL,\n-    0x40000000UL, 0x3fe2195fUL, 0x80943911UL, 0xbe07f819UL, 0x40000000UL,\n-    0x3fe20d8fUL, 0x386f2d6cUL, 0xbe54ba8bUL, 0x40000000UL, 0x3fe201c2UL,\n-    0xf29664acUL, 0xbe5eb815UL, 0x20000000UL, 0x3fe1f5f8UL, 0x64f03390UL,\n-    0x3e5e320cUL, 0x20000000UL, 0x3fe1ea31UL, 0x747ff696UL, 0x3e5ef0a5UL,\n-    0x40000000UL, 0x3fe1de6dUL, 0x3e9ceb51UL, 0xbe5f8d27UL, 0x20000000UL,\n-    0x3fe1d2acUL, 0x4ae0b55eUL, 0x3e5faa21UL, 0x20000000UL, 0x3fe1c6eeUL,\n-    0x28569a5eUL, 0x3e598a4fUL, 0x20000000UL, 0x3fe1bb33UL, 0x54b33e07UL,\n-    0x3e46130aUL, 0x20000000UL, 0x3fe1af7bUL, 0x024f1078UL, 0xbe4dbf93UL,\n-    0x00000000UL, 0x3fe1a3c6UL, 0xb0783bfaUL, 0x3e419248UL, 0xe0000000UL,\n-    0x3fe19813UL, 0x2f02b836UL, 0x3e4e02b7UL, 0xc0000000UL, 0x3fe18c64UL,\n-    0x28dec9d4UL, 0x3e09064fUL, 0x80000000UL, 0x3fe180b8UL, 0x45cbf406UL,\n-    0x3e5b1f46UL, 0x40000000UL, 0x3fe1750fUL, 0x03d9964cUL, 0x3e5b0a79UL,\n-    0x00000000UL, 0x3fe16969UL, 0x8b5b882bUL, 0xbe238086UL, 0xa0000000UL,\n-    0x3fe15dc5UL, 0x73bad6f8UL, 0xbdf1fca4UL, 0x20000000UL, 0x3fe15225UL,\n-    0x5385769cUL, 0x3e5e8d76UL, 0xa0000000UL, 0x3fe14687UL, 0x1676dc6bUL,\n-    0x3e571d08UL, 0x20000000UL, 0x3fe13aedUL, 0xa8c41c7fUL, 0xbe598a25UL,\n-    0x60000000UL, 0x3fe12f55UL, 0xc4e1aaf0UL, 0x3e435277UL, 0xa0000000UL,\n-    0x3fe123c0UL, 0x403638e1UL, 0xbe21aa7cUL, 0xc0000000UL, 0x3fe1182eUL,\n-    0x557a092bUL, 0xbdd0116bUL, 0xc0000000UL, 0x3fe10c9fUL, 0x7d779f66UL,\n-    0x3e4a61baUL, 0xc0000000UL, 0x3fe10113UL, 0x2b09c645UL, 0xbe5d586eUL,\n-    0x20000000UL, 0x3fe0ea04UL, 0xea2cad46UL, 0x3e5aa97cUL, 0x20000000UL,\n-    0x3fe0d300UL, 0x23190e54UL, 0x3e50f1a7UL, 0xa0000000UL, 0x3fe0bc07UL,\n-    0x1379a5a6UL, 0xbe51619dUL, 0x60000000UL, 0x3fe0a51aUL, 0x926a3d4aUL,\n-    0x3e5cf019UL, 0xa0000000UL, 0x3fe08e38UL, 0xa8c24358UL, 0x3e35241eUL,\n-    0x20000000UL, 0x3fe07762UL, 0x24317e7aUL, 0x3e512cfaUL, 0x00000000UL,\n-    0x3fe06097UL, 0xfd9cf274UL, 0xbe55bef3UL, 0x00000000UL, 0x3fe049d7UL,\n-    0x3689b49dUL, 0xbe36d26dUL, 0x40000000UL, 0x3fe03322UL, 0xf72ef6c4UL,\n-    0xbe54cd08UL, 0xa0000000UL, 0x3fe01c78UL, 0x23702d2dUL, 0xbe5900bfUL,\n-    0x00000000UL, 0x3fe005daUL, 0x3f59c14cUL, 0x3e57d80bUL, 0x40000000UL,\n-    0x3fdfde8dUL, 0xad67766dUL, 0xbe57fad4UL, 0x40000000UL, 0x3fdfb17cUL,\n-    0x644f4ae7UL, 0x3e1ee43bUL, 0x40000000UL, 0x3fdf8481UL, 0x903234d2UL,\n-    0x3e501a86UL, 0x40000000UL, 0x3fdf579cUL, 0xafe9e509UL, 0xbe267c3eUL,\n-    0x00000000UL, 0x3fdf2acdUL, 0xb7dfda0bUL, 0xbe48149bUL, 0x40000000UL,\n-    0x3fdefe13UL, 0x3b94305eUL, 0x3e5f4ea7UL, 0x80000000UL, 0x3fded16fUL,\n-    0x5d95da61UL, 0xbe55c198UL, 0x00000000UL, 0x3fdea4e1UL, 0x406960c9UL,\n-    0xbdd99a19UL, 0x00000000UL, 0x3fde7868UL, 0xd22f3539UL, 0x3e470c78UL,\n-    0x80000000UL, 0x3fde4c04UL, 0x83eec535UL, 0xbe3e1232UL, 0x40000000UL,\n-    0x3fde1fb6UL, 0x3dfbffcbUL, 0xbe4b7d71UL, 0x40000000UL, 0x3fddf37dUL,\n-    0x7e1be4e0UL, 0xbe5b8f8fUL, 0x40000000UL, 0x3fddc759UL, 0x46dae887UL,\n-    0xbe350458UL, 0x80000000UL, 0x3fdd9b4aUL, 0xed6ecc49UL, 0xbe5f0045UL,\n-    0x80000000UL, 0x3fdd6f50UL, 0x2e9e883cUL, 0x3e2915daUL, 0x80000000UL,\n-    0x3fdd436bUL, 0xf0bccb32UL, 0x3e4a68c9UL, 0x80000000UL, 0x3fdd179bUL,\n-    0x9bbfc779UL, 0xbe54a26aUL, 0x00000000UL, 0x3fdcebe0UL, 0x7cea33abUL,\n-    0x3e43c6b7UL, 0x40000000UL, 0x3fdcc039UL, 0xe740fd06UL, 0x3e5526c2UL,\n-    0x40000000UL, 0x3fdc94a7UL, 0x9eadeb1aUL, 0xbe396d8dUL, 0xc0000000UL,\n-    0x3fdc6929UL, 0xf0a8f95aUL, 0xbe5c0ab2UL, 0x80000000UL, 0x3fdc3dc0UL,\n-    0x6ee2693bUL, 0x3e0992e6UL, 0xc0000000UL, 0x3fdc126bUL, 0x5ac6b581UL,\n-    0xbe2834b6UL, 0x40000000UL, 0x3fdbe72bUL, 0x8cc226ffUL, 0x3e3596a6UL,\n-    0x00000000UL, 0x3fdbbbffUL, 0xf92a74bbUL, 0x3e3c5813UL, 0x00000000UL,\n-    0x3fdb90e7UL, 0x479664c0UL, 0xbe50d644UL, 0x00000000UL, 0x3fdb65e3UL,\n-    0x5004975bUL, 0xbe55258fUL, 0x00000000UL, 0x3fdb3af3UL, 0xe4b23194UL,\n-    0xbe588407UL, 0xc0000000UL, 0x3fdb1016UL, 0xe65d4d0aUL, 0x3e527c26UL,\n-    0x80000000UL, 0x3fdae54eUL, 0x814fddd6UL, 0x3e5962a2UL, 0x40000000UL,\n-    0x3fdaba9aUL, 0xe19d0913UL, 0xbe562f4eUL, 0x80000000UL, 0x3fda8ff9UL,\n-    0x43cfd006UL, 0xbe4cfdebUL, 0x40000000UL, 0x3fda656cUL, 0x686f0a4eUL,\n-    0x3e5e47a8UL, 0xc0000000UL, 0x3fda3af2UL, 0x7200d410UL, 0x3e5e1199UL,\n-    0xc0000000UL, 0x3fda108cUL, 0xabd2266eUL, 0x3e5ee4d1UL, 0x40000000UL,\n-    0x3fd9e63aUL, 0x396f8f2cUL, 0x3e4dbffbUL, 0x00000000UL, 0x3fd9bbfbUL,\n-    0xe32b25ddUL, 0x3e5c3a54UL, 0x40000000UL, 0x3fd991cfUL, 0x431e4035UL,\n-    0xbe457925UL, 0x80000000UL, 0x3fd967b6UL, 0x7bed3dd3UL, 0x3e40c61dUL,\n-    0x00000000UL, 0x3fd93db1UL, 0xd7449365UL, 0x3e306419UL, 0x80000000UL,\n-    0x3fd913beUL, 0x1746e791UL, 0x3e56fcfcUL, 0x40000000UL, 0x3fd8e9dfUL,\n-    0xf3a9028bUL, 0xbe5041b9UL, 0xc0000000UL, 0x3fd8c012UL, 0x56840c50UL,\n-    0xbe26e20aUL, 0x40000000UL, 0x3fd89659UL, 0x19763102UL, 0xbe51f466UL,\n-    0x80000000UL, 0x3fd86cb2UL, 0x7032de7cUL, 0xbe4d298aUL, 0x80000000UL,\n-    0x3fd8431eUL, 0xdeb39fabUL, 0xbe4361ebUL, 0x40000000UL, 0x3fd8199dUL,\n-    0x5d01cbe0UL, 0xbe5425b3UL, 0x80000000UL, 0x3fd7f02eUL, 0x3ce99aa9UL,\n-    0x3e146fa8UL, 0x80000000UL, 0x3fd7c6d2UL, 0xd1a262b9UL, 0xbe5a1a69UL,\n-    0xc0000000UL, 0x3fd79d88UL, 0x8606c236UL, 0x3e423a08UL, 0x80000000UL,\n-    0x3fd77451UL, 0x8fd1e1b7UL, 0x3e5a6a63UL, 0xc0000000UL, 0x3fd74b2cUL,\n-    0xe491456aUL, 0x3e42c1caUL, 0x40000000UL, 0x3fd7221aUL, 0x4499a6d7UL,\n-    0x3e36a69aUL, 0x00000000UL, 0x3fd6f91aUL, 0x5237df94UL, 0xbe0f8f02UL,\n-    0x00000000UL, 0x3fd6d02cUL, 0xb6482c6eUL, 0xbe5abcf7UL, 0x00000000UL,\n-    0x3fd6a750UL, 0x1919fd61UL, 0xbe57ade2UL, 0x00000000UL, 0x3fd67e86UL,\n-    0xaa7a994dUL, 0xbe3f3fbdUL, 0x00000000UL, 0x3fd655ceUL, 0x67db014cUL,\n-    0x3e33c550UL, 0x00000000UL, 0x3fd62d28UL, 0xa82856b7UL, 0xbe1409d1UL,\n-    0xc0000000UL, 0x3fd60493UL, 0x1e6a300dUL, 0x3e55d899UL, 0x80000000UL,\n-    0x3fd5dc11UL, 0x1222bd5cUL, 0xbe35bfc0UL, 0xc0000000UL, 0x3fd5b3a0UL,\n-    0x6e8dc2d3UL, 0x3e5d4d79UL, 0x00000000UL, 0x3fd58b42UL, 0xe0e4ace6UL,\n-    0xbe517303UL, 0x80000000UL, 0x3fd562f4UL, 0xb306e0a8UL, 0x3e5edf0fUL,\n-    0xc0000000UL, 0x3fd53ab8UL, 0x6574bc54UL, 0x3e5ee859UL, 0x80000000UL,\n-    0x3fd5128eUL, 0xea902207UL, 0x3e5f6188UL, 0xc0000000UL, 0x3fd4ea75UL,\n-    0x9f911d79UL, 0x3e511735UL, 0x80000000UL, 0x3fd4c26eUL, 0xf9c77397UL,\n-    0xbe5b1643UL, 0x40000000UL, 0x3fd49a78UL, 0x15fc9258UL, 0x3e479a37UL,\n-    0x80000000UL, 0x3fd47293UL, 0xd5a04dd9UL, 0xbe426e56UL, 0xc0000000UL,\n-    0x3fd44abfUL, 0xe04042f5UL, 0x3e56f7c6UL, 0x40000000UL, 0x3fd422fdUL,\n-    0x1d8bf2c8UL, 0x3e5d8810UL, 0x00000000UL, 0x3fd3fb4cUL, 0x88a8ddeeUL,\n-    0xbe311454UL, 0xc0000000UL, 0x3fd3d3abUL, 0x3e3b5e47UL, 0xbe5d1b72UL,\n-    0x40000000UL, 0x3fd3ac1cUL, 0xc2ab5d59UL, 0x3e31b02bUL, 0xc0000000UL,\n-    0x3fd3849dUL, 0xd4e34b9eUL, 0x3e51cb2fUL, 0x40000000UL, 0x3fd35d30UL,\n-    0x177204fbUL, 0xbe2b8cd7UL, 0x80000000UL, 0x3fd335d3UL, 0xfcd38c82UL,\n-    0xbe4356e1UL, 0x80000000UL, 0x3fd30e87UL, 0x64f54accUL, 0xbe4e6224UL,\n-    0x00000000UL, 0x3fd2e74cUL, 0xaa7975d9UL, 0x3e5dc0feUL, 0x80000000UL,\n-    0x3fd2c021UL, 0x516dab3fUL, 0xbe50ffa3UL, 0x40000000UL, 0x3fd29907UL,\n-    0x2bfb7313UL, 0x3e5674a2UL, 0xc0000000UL, 0x3fd271fdUL, 0x0549fc99UL,\n-    0x3e385d29UL, 0xc0000000UL, 0x3fd24b04UL, 0x55b63073UL, 0xbe500c6dUL,\n-    0x00000000UL, 0x3fd2241cUL, 0x3f91953aUL, 0x3e389977UL, 0xc0000000UL,\n-    0x3fd1fd43UL, 0xa1543f71UL, 0xbe3487abUL, 0xc0000000UL, 0x3fd1d67bUL,\n-    0x4ec8867cUL, 0x3df6a2dcUL, 0x00000000UL, 0x3fd1afc4UL, 0x4328e3bbUL,\n-    0x3e41d9c0UL, 0x80000000UL, 0x3fd1891cUL, 0x2e1cda84UL, 0x3e3bdd87UL,\n-    0x40000000UL, 0x3fd16285UL, 0x4b5331aeUL, 0xbe53128eUL, 0x00000000UL,\n-    0x3fd13bfeUL, 0xb9aec164UL, 0xbe52ac98UL, 0xc0000000UL, 0x3fd11586UL,\n-    0xd91e1316UL, 0xbe350630UL, 0x80000000UL, 0x3fd0ef1fUL, 0x7cacc12cUL,\n-    0x3e3f5219UL, 0x40000000UL, 0x3fd0c8c8UL, 0xbce277b7UL, 0x3e3d30c0UL,\n-    0x00000000UL, 0x3fd0a281UL, 0x2a63447dUL, 0xbe541377UL, 0x80000000UL,\n-    0x3fd07c49UL, 0xfac483b5UL, 0xbe5772ecUL, 0xc0000000UL, 0x3fd05621UL,\n-    0x36b8a570UL, 0xbe4fd4bdUL, 0xc0000000UL, 0x3fd03009UL, 0xbae505f7UL,\n-    0xbe450388UL, 0x80000000UL, 0x3fd00a01UL, 0x3e35aeadUL, 0xbe5430fcUL,\n-    0x80000000UL, 0x3fcfc811UL, 0x707475acUL, 0x3e38806eUL, 0x80000000UL,\n-    0x3fcf7c3fUL, 0xc91817fcUL, 0xbe40cceaUL, 0x80000000UL, 0x3fcf308cUL,\n-    0xae05d5e9UL, 0xbe4919b8UL, 0x80000000UL, 0x3fcee4f8UL, 0xae6cc9e6UL,\n-    0xbe530b94UL, 0x00000000UL, 0x3fce9983UL, 0x1efe3e8eUL, 0x3e57747eUL,\n-    0x00000000UL, 0x3fce4e2dUL, 0xda78d9bfUL, 0xbe59a608UL, 0x00000000UL,\n-    0x3fce02f5UL, 0x8abe2c2eUL, 0x3e4a35adUL, 0x00000000UL, 0x3fcdb7dcUL,\n-    0x1495450dUL, 0xbe0872ccUL, 0x80000000UL, 0x3fcd6ce1UL, 0x86ee0ba0UL,\n-    0xbe4f59a0UL, 0x00000000UL, 0x3fcd2205UL, 0xe81ca888UL, 0x3e5402c3UL,\n-    0x00000000UL, 0x3fccd747UL, 0x3b4424b9UL, 0x3e5dfdc3UL, 0x80000000UL,\n-    0x3fcc8ca7UL, 0xd305b56cUL, 0x3e202da6UL, 0x00000000UL, 0x3fcc4226UL,\n-    0x399a6910UL, 0xbe482a1cUL, 0x80000000UL, 0x3fcbf7c2UL, 0x747f7938UL,\n-    0xbe587372UL, 0x80000000UL, 0x3fcbad7cUL, 0x6fc246a0UL, 0x3e50d83dUL,\n-    0x00000000UL, 0x3fcb6355UL, 0xee9e9be5UL, 0xbe5c35bdUL, 0x80000000UL,\n-    0x3fcb194aUL, 0x8416c0bcUL, 0x3e546d4fUL, 0x00000000UL, 0x3fcacf5eUL,\n-    0x49f7f08fUL, 0x3e56da76UL, 0x00000000UL, 0x3fca858fUL, 0x5dc30de2UL,\n-    0x3e5f390cUL, 0x00000000UL, 0x3fca3bdeUL, 0x950583b6UL, 0xbe5e4169UL,\n-    0x80000000UL, 0x3fc9f249UL, 0x33631553UL, 0x3e52aeb1UL, 0x00000000UL,\n-    0x3fc9a8d3UL, 0xde8795a6UL, 0xbe59a504UL, 0x00000000UL, 0x3fc95f79UL,\n-    0x076bf41eUL, 0x3e5122feUL, 0x80000000UL, 0x3fc9163cUL, 0x2914c8e7UL,\n-    0x3e3dd064UL, 0x00000000UL, 0x3fc8cd1dUL, 0x3a30eca3UL, 0xbe21b4aaUL,\n-    0x80000000UL, 0x3fc8841aUL, 0xb2a96650UL, 0xbe575444UL, 0x80000000UL,\n-    0x3fc83b34UL, 0x2376c0cbUL, 0xbe2a74c7UL, 0x80000000UL, 0x3fc7f26bUL,\n-    0xd8a0b653UL, 0xbe5181b6UL, 0x00000000UL, 0x3fc7a9bfUL, 0x32257882UL,\n-    0xbe4a78b4UL, 0x00000000UL, 0x3fc7612fUL, 0x1eee8bd9UL, 0xbe1bfe9dUL,\n-    0x80000000UL, 0x3fc718bbUL, 0x0c603cc4UL, 0x3e36fdc9UL, 0x80000000UL,\n-    0x3fc6d064UL, 0x3728b8cfUL, 0xbe1e542eUL, 0x80000000UL, 0x3fc68829UL,\n-    0xc79a4067UL, 0x3e5c380fUL, 0x00000000UL, 0x3fc6400bUL, 0xf69eac69UL,\n-    0x3e550a84UL, 0x80000000UL, 0x3fc5f808UL, 0xb7a780a4UL, 0x3e5d9224UL,\n-    0x80000000UL, 0x3fc5b022UL, 0xad9dfb1eUL, 0xbe55242fUL, 0x00000000UL,\n-    0x3fc56858UL, 0x659b18beUL, 0xbe4bfda3UL, 0x80000000UL, 0x3fc520a9UL,\n-    0x66ee3631UL, 0xbe57d769UL, 0x80000000UL, 0x3fc4d916UL, 0x1ec62819UL,\n-    0x3e2427f7UL, 0x80000000UL, 0x3fc4919fUL, 0xdec25369UL, 0xbe435431UL,\n-    0x00000000UL, 0x3fc44a44UL, 0xa8acfc4bUL, 0xbe3c62e8UL, 0x00000000UL,\n-    0x3fc40304UL, 0xcf1d3eabUL, 0xbdfba29fUL, 0x80000000UL, 0x3fc3bbdfUL,\n-    0x79aba3eaUL, 0xbdf1b7c8UL, 0x80000000UL, 0x3fc374d6UL, 0xb8d186daUL,\n-    0xbe5130cfUL, 0x80000000UL, 0x3fc32de8UL, 0x9d74f152UL, 0x3e2285b6UL,\n-    0x00000000UL, 0x3fc2e716UL, 0x50ae7ca9UL, 0xbe503920UL, 0x80000000UL,\n-    0x3fc2a05eUL, 0x6caed92eUL, 0xbe533924UL, 0x00000000UL, 0x3fc259c2UL,\n-    0x9cb5034eUL, 0xbe510e31UL, 0x80000000UL, 0x3fc21340UL, 0x12c4d378UL,\n-    0xbe540b43UL, 0x80000000UL, 0x3fc1ccd9UL, 0xcc418706UL, 0x3e59887aUL,\n-    0x00000000UL, 0x3fc1868eUL, 0x921f4106UL, 0xbe528e67UL, 0x80000000UL,\n-    0x3fc1405cUL, 0x3969441eUL, 0x3e5d8051UL, 0x00000000UL, 0x3fc0fa46UL,\n-    0xd941ef5bUL, 0x3e5f9079UL, 0x80000000UL, 0x3fc0b44aUL, 0x5a3e81b2UL,\n-    0xbe567691UL, 0x00000000UL, 0x3fc06e69UL, 0x9d66afe7UL, 0xbe4d43fbUL,\n-    0x00000000UL, 0x3fc028a2UL, 0x0a92a162UL, 0xbe52f394UL, 0x00000000UL,\n-    0x3fbfc5eaUL, 0x209897e5UL, 0x3e529e37UL, 0x00000000UL, 0x3fbf3ac5UL,\n-    0x8458bd7bUL, 0x3e582831UL, 0x00000000UL, 0x3fbeafd5UL, 0xb8d8b4b8UL,\n-    0xbe486b4aUL, 0x00000000UL, 0x3fbe2518UL, 0xe0a3b7b6UL, 0x3e5bafd2UL,\n-    0x00000000UL, 0x3fbd9a90UL, 0x2bf2710eUL, 0x3e383b2bUL, 0x00000000UL,\n-    0x3fbd103cUL, 0x73eb6ab7UL, 0xbe56d78dUL, 0x00000000UL, 0x3fbc861bUL,\n-    0x32ceaff5UL, 0xbe32dc5aUL, 0x00000000UL, 0x3fbbfc2eUL, 0xbee04cb7UL,\n-    0xbe4a71a4UL, 0x00000000UL, 0x3fbb7274UL, 0x35ae9577UL, 0x3e38142fUL,\n-    0x00000000UL, 0x3fbae8eeUL, 0xcbaddab4UL, 0xbe5490f0UL, 0x00000000UL,\n-    0x3fba5f9aUL, 0x95ce1114UL, 0x3e597c71UL, 0x00000000UL, 0x3fb9d67aUL,\n-    0x6d7c0f78UL, 0x3e3abc2dUL, 0x00000000UL, 0x3fb94d8dUL, 0x2841a782UL,\n-    0xbe566cbcUL, 0x00000000UL, 0x3fb8c4d2UL, 0x6ed429c6UL, 0xbe3cfff9UL,\n-    0x00000000UL, 0x3fb83c4aUL, 0xe4a49fbbUL, 0xbe552964UL, 0x00000000UL,\n-    0x3fb7b3f4UL, 0x2193d81eUL, 0xbe42fa72UL, 0x00000000UL, 0x3fb72bd0UL,\n-    0xdd70c122UL, 0x3e527a8cUL, 0x00000000UL, 0x3fb6a3dfUL, 0x03108a54UL,\n-    0xbe450393UL, 0x00000000UL, 0x3fb61c1fUL, 0x30ff7954UL, 0x3e565840UL,\n-    0x00000000UL, 0x3fb59492UL, 0xdedd460cUL, 0xbe5422b5UL, 0x00000000UL,\n-    0x3fb50d36UL, 0x950f9f45UL, 0xbe5313f6UL, 0x00000000UL, 0x3fb4860bUL,\n-    0x582cdcb1UL, 0x3e506d39UL, 0x00000000UL, 0x3fb3ff12UL, 0x7216d3a6UL,\n-    0x3e4aa719UL, 0x00000000UL, 0x3fb3784aUL, 0x57a423fdUL, 0x3e5a9b9fUL,\n-    0x00000000UL, 0x3fb2f1b4UL, 0x7a138b41UL, 0xbe50b418UL, 0x00000000UL,\n-    0x3fb26b4eUL, 0x2fbfd7eaUL, 0x3e23a53eUL, 0x00000000UL, 0x3fb1e519UL,\n-    0x18913ccbUL, 0x3e465fc1UL, 0x00000000UL, 0x3fb15f15UL, 0x7ea24e21UL,\n-    0x3e042843UL, 0x00000000UL, 0x3fb0d941UL, 0x7c6d9c77UL, 0x3e59f61eUL,\n-    0x00000000UL, 0x3fb0539eUL, 0x114efd44UL, 0x3e4ccab7UL, 0x00000000UL,\n-    0x3faf9c56UL, 0x1777f657UL, 0x3e552f65UL, 0x00000000UL, 0x3fae91d2UL,\n-    0xc317b86aUL, 0xbe5a61e0UL, 0x00000000UL, 0x3fad87acUL, 0xb7664efbUL,\n-    0xbe41f64eUL, 0x00000000UL, 0x3fac7de6UL, 0x5d3d03a9UL, 0x3e0807a0UL,\n-    0x00000000UL, 0x3fab7480UL, 0x743c38ebUL, 0xbe3726e1UL, 0x00000000UL,\n-    0x3faa6b78UL, 0x06a253f1UL, 0x3e5ad636UL, 0x00000000UL, 0x3fa962d0UL,\n-    0xa35f541bUL, 0x3e5a187aUL, 0x00000000UL, 0x3fa85a88UL, 0x4b86e446UL,\n-    0xbe508150UL, 0x00000000UL, 0x3fa7529cUL, 0x2589cacfUL, 0x3e52938aUL,\n-    0x00000000UL, 0x3fa64b10UL, 0xaf6b11f2UL, 0xbe3454cdUL, 0x00000000UL,\n-    0x3fa543e2UL, 0x97506fefUL, 0xbe5fdec5UL, 0x00000000UL, 0x3fa43d10UL,\n-    0xe75f7dd9UL, 0xbe388dd3UL, 0x00000000UL, 0x3fa3369cUL, 0xa4139632UL,\n-    0xbdea5177UL, 0x00000000UL, 0x3fa23086UL, 0x352d6f1eUL, 0xbe565ad6UL,\n-    0x00000000UL, 0x3fa12accUL, 0x77449eb7UL, 0xbe50d5c7UL, 0x00000000UL,\n-    0x3fa0256eUL, 0x7478da78UL, 0x3e404724UL, 0x00000000UL, 0x3f9e40dcUL,\n-    0xf59cef7fUL, 0xbe539d0aUL, 0x00000000UL, 0x3f9c3790UL, 0x1511d43cUL,\n-    0x3e53c2c8UL, 0x00000000UL, 0x3f9a2f00UL, 0x9b8bff3cUL, 0xbe43b3e1UL,\n-    0x00000000UL, 0x3f982724UL, 0xad1e22a5UL, 0x3e46f0bdUL, 0x00000000UL,\n-    0x3f962000UL, 0x130d9356UL, 0x3e475ba0UL, 0x00000000UL, 0x3f941994UL,\n-    0x8f86f883UL, 0xbe513d0bUL, 0x00000000UL, 0x3f9213dcUL, 0x914d0dc8UL,\n-    0xbe534335UL, 0x00000000UL, 0x3f900ed8UL, 0x2d73e5e7UL, 0xbe22ba75UL,\n-    0x00000000UL, 0x3f8c1510UL, 0xc5b7d70eUL, 0x3e599c5dUL, 0x00000000UL,\n-    0x3f880de0UL, 0x8a27857eUL, 0xbe3d28c8UL, 0x00000000UL, 0x3f840810UL,\n-    0xda767328UL, 0x3e531b3dUL, 0x00000000UL, 0x3f8003b0UL, 0x77bacaf3UL,\n-    0xbe5f04e3UL, 0x00000000UL, 0x3f780150UL, 0xdf4b0720UL, 0x3e5a8bffUL,\n-    0x00000000UL, 0x3f6ffc40UL, 0x34c48e71UL, 0xbe3fcd99UL, 0x00000000UL,\n-    0x3f5ff6c0UL, 0x1ad218afUL, 0xbe4c78a7UL, 0x00000000UL, 0x00000000UL,\n-    0x00000000UL, 0x80000000UL\n-};\n-\n-ATTRIBUTE_ALIGNED(8) juint _log2_pow[] =\n-{\n-    0xfefa39efUL, 0x3fe62e42UL, 0xfefa39efUL, 0xbfe62e42UL\n-};\n-\n-ATTRIBUTE_ALIGNED(8) juint _DOUBLE2[] =\n-{\n-    0x00000000UL, 0x40000000UL\n-};\n-\n-ATTRIBUTE_ALIGNED(8) juint _DOUBLE0[] =\n-{\n-    0x00000000UL, 0x00000000UL\n-};\n-\n-ATTRIBUTE_ALIGNED(8) juint _DOUBLE0DOT5[] =\n-{\n-    0x00000000UL, 0x3fe00000UL\n-};\n-\n-\/\/registers,\n-\/\/ input: xmm0, xmm1\n-\/\/ scratch: xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7\n-\/\/          rax, rdx, rcx, r8, r11\n-\n-\/\/ Code generated by Intel C compiler for LIBM library\n-\n-void MacroAssembler::fast_pow(XMMRegister xmm0, XMMRegister xmm1, XMMRegister xmm2, XMMRegister xmm3,\n-                              XMMRegister xmm4, XMMRegister xmm5, XMMRegister xmm6, XMMRegister xmm7,\n-                              Register eax, Register ecx, Register edx,\n-                              Register tmp1, Register tmp2, Register tmp3, Register tmp4) {\n-  Label L_2TAG_PACKET_0_0_2, L_2TAG_PACKET_1_0_2, L_2TAG_PACKET_2_0_2, L_2TAG_PACKET_3_0_2;\n-  Label L_2TAG_PACKET_4_0_2, L_2TAG_PACKET_5_0_2, L_2TAG_PACKET_6_0_2, L_2TAG_PACKET_7_0_2;\n-  Label L_2TAG_PACKET_8_0_2, L_2TAG_PACKET_9_0_2, L_2TAG_PACKET_10_0_2, L_2TAG_PACKET_11_0_2;\n-  Label L_2TAG_PACKET_12_0_2, L_2TAG_PACKET_13_0_2, L_2TAG_PACKET_14_0_2, L_2TAG_PACKET_15_0_2;\n-  Label L_2TAG_PACKET_16_0_2, L_2TAG_PACKET_17_0_2, L_2TAG_PACKET_18_0_2, L_2TAG_PACKET_19_0_2;\n-  Label L_2TAG_PACKET_20_0_2, L_2TAG_PACKET_21_0_2, L_2TAG_PACKET_22_0_2, L_2TAG_PACKET_23_0_2;\n-  Label L_2TAG_PACKET_24_0_2, L_2TAG_PACKET_25_0_2, L_2TAG_PACKET_26_0_2, L_2TAG_PACKET_27_0_2;\n-  Label L_2TAG_PACKET_28_0_2, L_2TAG_PACKET_29_0_2, L_2TAG_PACKET_30_0_2, L_2TAG_PACKET_31_0_2;\n-  Label L_2TAG_PACKET_32_0_2, L_2TAG_PACKET_33_0_2, L_2TAG_PACKET_34_0_2, L_2TAG_PACKET_35_0_2;\n-  Label L_2TAG_PACKET_36_0_2, L_2TAG_PACKET_37_0_2, L_2TAG_PACKET_38_0_2, L_2TAG_PACKET_39_0_2;\n-  Label L_2TAG_PACKET_40_0_2, L_2TAG_PACKET_41_0_2, L_2TAG_PACKET_42_0_2, L_2TAG_PACKET_43_0_2;\n-  Label L_2TAG_PACKET_44_0_2, L_2TAG_PACKET_45_0_2, L_2TAG_PACKET_46_0_2, L_2TAG_PACKET_47_0_2;\n-  Label L_2TAG_PACKET_48_0_2, L_2TAG_PACKET_49_0_2, L_2TAG_PACKET_50_0_2, L_2TAG_PACKET_51_0_2;\n-  Label L_2TAG_PACKET_52_0_2, L_2TAG_PACKET_53_0_2, L_2TAG_PACKET_54_0_2, L_2TAG_PACKET_55_0_2;\n-  Label L_2TAG_PACKET_56_0_2;\n-  Label B1_2, B1_3, B1_5;\n-  Label L_POW;\n-\n-  assert_different_registers(tmp1, tmp2, eax, ecx, edx);\n-  address HIGHSIGMASK = (address)_HIGHSIGMASK;\n-  address LOG2_E = (address)_LOG2_E;\n-  address coeff = (address)_coeff_pow;\n-  address L_tbl = (address)_L_tbl_pow;\n-  address HIGHMASK_Y = (address)_HIGHMASK_Y;\n-  address T_exp = (address)_T_exp;\n-  address e_coeff = (address)_e_coeff;\n-  address coeff_h = (address)_coeff_h;\n-  address HIGHMASK_LOG_X = (address)_HIGHMASK_LOG_X;\n-  address HALFMASK = (address)_HALFMASK;\n-  address log2 = (address)_log2_pow;\n-  address DOUBLE2 = (address)_DOUBLE2;\n-  address DOUBLE0 = (address)_DOUBLE0;\n-  address DOUBLE0DOT5 = (address)_DOUBLE0DOT5;\n-\n-  subq(rsp, 40);\n-  movsd(Address(rsp, 8), xmm0);\n-  movsd(Address(rsp, 16), xmm1);\n-\n-  \/\/ Special case: pow(x, 2.0) => x * x\n-  movdq(tmp1, xmm1);\n-  cmp64(tmp1, ExternalAddress(DOUBLE2), tmp2 \/*rscratch*\/);\n-  jccb(Assembler::notEqual, B1_2);\n-  mulsd(xmm0, xmm0);\n-  jmp(B1_5);\n-\n-  \/\/ Special case: pow(x, 0.5) => sqrt(x)\n-  bind(B1_2);\n-  cmp64(tmp1, ExternalAddress(DOUBLE0DOT5), tmp2 \/*rscratch*\/);\n-  jccb(Assembler::notEqual, L_POW); \/\/ For pow(x, y), check whether y == 0.5\n-  movdq(tmp2, xmm0);\n-  cmp64(tmp2, ExternalAddress(DOUBLE0), tmp3 \/*rscratch*\/);\n-  jccb(Assembler::less, L_POW); \/\/ pow(x, 0.5) => sqrt(x) only for x >= 0.0 or x is +inf\/NaN\n-  sqrtsd(xmm0, xmm0);\n-  jmp(B1_5);\n-\n-  bind(L_POW);\n-  pextrw(eax, xmm0, 3);\n-  xorpd(xmm2, xmm2);\n-  mov64(tmp2, 0x3ff0000000000000);\n-  movdq(xmm2, tmp2);\n-  movl(tmp1, 1069088768);\n-  movdq(xmm7, tmp1);\n-  xorpd(xmm1, xmm1);\n-  mov64(tmp3, 0x77f0000000000000);\n-  movdq(xmm1, tmp3);\n-  movdqu(xmm3, xmm0);\n-  movl(edx, 32752);\n-  andl(edx, eax);\n-  subl(edx, 16368);\n-  movl(ecx, edx);\n-  sarl(edx, 31);\n-  addl(ecx, edx);\n-  xorl(ecx, edx);\n-  por(xmm0, xmm2);\n-  movdqu(xmm6, ExternalAddress(HIGHSIGMASK), tmp2 \/*rscratch*\/);    \/\/0x00000000UL, 0xfffff800UL, 0x00000000UL, 0xfffff800UL\n-  psrlq(xmm0, 27);\n-  movq(xmm2, ExternalAddress(LOG2_E), tmp2 \/*rscratch*\/);    \/\/0x00000000UL, 0x3ff72000UL, 0x161bb241UL, 0xbf5dabe1UL\n-  psrld(xmm0, 2);\n-  addl(ecx, 16);\n-  bsrl(ecx, ecx);\n-  rcpps(xmm0, xmm0);\n-  psllq(xmm3, 12);\n-  movl(tmp4, 8192);\n-  movdq(xmm4, tmp4);\n-  psrlq(xmm3, 12);\n-  subl(eax, 16);\n-  cmpl(eax, 32736);\n-  jcc(Assembler::aboveEqual, L_2TAG_PACKET_0_0_2);\n-  movl(tmp1, 0);\n-\n-  bind(L_2TAG_PACKET_1_0_2);\n-  mulss(xmm0, xmm7);\n-  movl(edx, -1);\n-  subl(ecx, 4);\n-  shll(edx);\n-  shlq(edx, 32);\n-  movdq(xmm5, edx);\n-  por(xmm3, xmm1);\n-  subl(eax, 16351);\n-  cmpl(eax, 1);\n-  jcc(Assembler::belowEqual, L_2TAG_PACKET_2_0_2);\n-  paddd(xmm0, xmm4);\n-  pand(xmm5, xmm3);\n-  movdl(edx, xmm0);\n-  psllq(xmm0, 29);\n-\n-  bind(L_2TAG_PACKET_3_0_2);\n-  subsd(xmm3, xmm5);\n-  pand(xmm0, xmm6);\n-  subl(eax, 1);\n-  sarl(eax, 4);\n-  cvtsi2sdl(xmm7, eax);\n-  mulpd(xmm5, xmm0);\n-\n-  bind(L_2TAG_PACKET_4_0_2);\n-  mulsd(xmm3, xmm0);\n-  movdqu(xmm1, ExternalAddress(coeff), tmp2 \/*rscratch*\/);    \/\/0x6dc96112UL, 0xbf836578UL, 0xee241472UL, 0xbf9b0301UL\n-  lea(tmp4, ExternalAddress(L_tbl));\n-  subsd(xmm5, xmm2);\n-  movdqu(xmm4, ExternalAddress(coeff + 16), tmp2 \/*rscratch*\/);    \/\/0x9f95985aUL, 0xbfb528dbUL, 0xb3841d2aUL, 0xbfd619b6UL\n-  movl(ecx, eax);\n-  sarl(eax, 31);\n-  addl(ecx, eax);\n-  xorl(eax, ecx);\n-  addl(eax, 1);\n-  bsrl(eax, eax);\n-  unpcklpd(xmm5, xmm3);\n-  movdqu(xmm6, ExternalAddress(coeff + 32), tmp2 \/*rscratch*\/);    \/\/0x518775e3UL, 0x3f9004f2UL, 0xac8349bbUL, 0x3fa76c9bUL\n-  addsd(xmm3, xmm5);\n-  andl(edx, 16760832);\n-  shrl(edx, 10);\n-  addpd(xmm5, Address(tmp4, edx, Address::times_1, -3648));\n-  movdqu(xmm0, ExternalAddress(coeff + 48), tmp2 \/*rscratch*\/);    \/\/0x486ececcUL, 0x3fc4635eUL, 0x161bb241UL, 0xbf5dabe1UL\n-  pshufd(xmm2, xmm3, 68);\n-  mulsd(xmm3, xmm3);\n-  mulpd(xmm1, xmm2);\n-  mulpd(xmm4, xmm2);\n-  addsd(xmm5, xmm7);\n-  mulsd(xmm2, xmm3);\n-  addpd(xmm6, xmm1);\n-  mulsd(xmm3, xmm3);\n-  addpd(xmm0, xmm4);\n-  movq(xmm1, Address(rsp, 16));\n-  movw(ecx, Address(rsp, 22));\n-  pshufd(xmm7, xmm5, 238);\n-  movq(xmm4, ExternalAddress(HIGHMASK_Y), tmp2 \/*rscratch*\/);    \/\/0x00000000UL, 0xfffffff8UL, 0x00000000UL, 0xffffffffUL\n-  mulpd(xmm6, xmm2);\n-  pshufd(xmm3, xmm3, 68);\n-  mulpd(xmm0, xmm2);\n-  shll(eax, 4);\n-  subl(eax, 15872);\n-  andl(ecx, 32752);\n-  addl(eax, ecx);\n-  mulpd(xmm3, xmm6);\n-  cmpl(eax, 624);\n-  jcc(Assembler::aboveEqual, L_2TAG_PACKET_5_0_2);\n-  xorpd(xmm6, xmm6);\n-  movl(edx, 17080);\n-  pinsrw(xmm6, edx, 3);\n-  movdqu(xmm2, xmm1);\n-  pand(xmm4, xmm1);\n-  subsd(xmm1, xmm4);\n-  mulsd(xmm4, xmm5);\n-  addsd(xmm0, xmm7);\n-  mulsd(xmm1, xmm5);\n-  movdqu(xmm7, xmm6);\n-  addsd(xmm6, xmm4);\n-  lea(tmp4, ExternalAddress(T_exp));\n-  addpd(xmm3, xmm0);\n-  movdl(edx, xmm6);\n-  subsd(xmm6, xmm7);\n-  pshufd(xmm0, xmm3, 238);\n-  subsd(xmm4, xmm6);\n-  addsd(xmm0, xmm3);\n-  movl(ecx, edx);\n-  andl(edx, 255);\n-  addl(edx, edx);\n-  movdqu(xmm5, Address(tmp4, edx, Address::times_8, 0));\n-  addsd(xmm4, xmm1);\n-  mulsd(xmm2, xmm0);\n-  movdqu(xmm7, ExternalAddress(e_coeff),      tmp2 \/*rscratch*\/);    \/\/0xe78a6731UL, 0x3f55d87fUL, 0xd704a0c0UL, 0x3fac6b08UL\n-  movdqu(xmm3, ExternalAddress(e_coeff + 16), tmp2 \/*rscratch*\/);    \/\/0x6fba4e77UL, 0x3f83b2abUL, 0xff82c58fUL, 0x3fcebfbdUL\n-  shll(ecx, 12);\n-  xorl(ecx, tmp1);\n-  andl(rcx, -1048576);\n-  movdq(xmm6, rcx);\n-  addsd(xmm2, xmm4);\n-  mov64(tmp2, 0x3fe62e42fefa39ef);\n-  movdq(xmm1, tmp2);\n-  pshufd(xmm0, xmm2, 68);\n-  pshufd(xmm4, xmm2, 68);\n-  mulsd(xmm1, xmm2);\n-  pshufd(xmm6, xmm6, 17);\n-  mulpd(xmm0, xmm0);\n-  mulpd(xmm7, xmm4);\n-  paddd(xmm5, xmm6);\n-  mulsd(xmm1, xmm5);\n-  pshufd(xmm6, xmm5, 238);\n-  mulsd(xmm0, xmm0);\n-  addpd(xmm3, xmm7);\n-  addsd(xmm1, xmm6);\n-  mulpd(xmm0, xmm3);\n-  pshufd(xmm3, xmm0, 238);\n-  mulsd(xmm0, xmm5);\n-  mulsd(xmm3, xmm5);\n-  addsd(xmm0, xmm1);\n-  addsd(xmm0, xmm3);\n-  addsd(xmm0, xmm5);\n-  jmp(B1_5);\n-\n-  bind(L_2TAG_PACKET_0_0_2);\n-  addl(eax, 16);\n-  movl(edx, 32752);\n-  andl(edx, eax);\n-  cmpl(edx, 32752);\n-  jcc(Assembler::equal, L_2TAG_PACKET_6_0_2);\n-  testl(eax, 32768);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_7_0_2);\n-\n-  bind(L_2TAG_PACKET_8_0_2);\n-  movq(xmm0, Address(rsp, 8));\n-  movq(xmm3, Address(rsp, 8));\n-  movdl(edx, xmm3);\n-  psrlq(xmm3, 32);\n-  movdl(ecx, xmm3);\n-  orl(edx, ecx);\n-  cmpl(edx, 0);\n-  jcc(Assembler::equal, L_2TAG_PACKET_9_0_2);\n-  xorpd(xmm3, xmm3);\n-  movl(eax, 18416);\n-  pinsrw(xmm3, eax, 3);\n-  mulsd(xmm0, xmm3);\n-  xorpd(xmm2, xmm2);\n-  movl(eax, 16368);\n-  pinsrw(xmm2, eax, 3);\n-  movdqu(xmm3, xmm0);\n-  pextrw(eax, xmm0, 3);\n-  por(xmm0, xmm2);\n-  movl(ecx, 18416);\n-  psrlq(xmm0, 27);\n-  movq(xmm2, ExternalAddress(LOG2_E), tmp2 \/*rscratch*\/);    \/\/0x00000000UL, 0x3ff72000UL, 0x161bb241UL, 0xbf5dabe1UL\n-  psrld(xmm0, 2);\n-  rcpps(xmm0, xmm0);\n-  psllq(xmm3, 12);\n-  movdqu(xmm6, ExternalAddress(HIGHSIGMASK), tmp2 \/*rscratch*\/);    \/\/0x00000000UL, 0xfffff800UL, 0x00000000UL, 0xfffff800UL\n-  psrlq(xmm3, 12);\n-  mulss(xmm0, xmm7);\n-  movl(edx, -1024);\n-  movdl(xmm5, edx);\n-  por(xmm3, xmm1);\n-  paddd(xmm0, xmm4);\n-  psllq(xmm5, 32);\n-  movdl(edx, xmm0);\n-  psllq(xmm0, 29);\n-  pand(xmm5, xmm3);\n-  movl(tmp1, 0);\n-  pand(xmm0, xmm6);\n-  subsd(xmm3, xmm5);\n-  andl(eax, 32752);\n-  subl(eax, 18416);\n-  sarl(eax, 4);\n-  cvtsi2sdl(xmm7, eax);\n-  mulpd(xmm5, xmm0);\n-  jmp(L_2TAG_PACKET_4_0_2);\n-\n-  bind(L_2TAG_PACKET_10_0_2);\n-  movq(xmm0, Address(rsp, 8));\n-  movq(xmm3, Address(rsp, 8));\n-  movdl(edx, xmm3);\n-  psrlq(xmm3, 32);\n-  movdl(ecx, xmm3);\n-  orl(edx, ecx);\n-  cmpl(edx, 0);\n-  jcc(Assembler::equal, L_2TAG_PACKET_9_0_2);\n-  xorpd(xmm3, xmm3);\n-  movl(eax, 18416);\n-  pinsrw(xmm3, eax, 3);\n-  mulsd(xmm0, xmm3);\n-  xorpd(xmm2, xmm2);\n-  movl(eax, 16368);\n-  pinsrw(xmm2, eax, 3);\n-  movdqu(xmm3, xmm0);\n-  pextrw(eax, xmm0, 3);\n-  por(xmm0, xmm2);\n-  movl(ecx, 18416);\n-  psrlq(xmm0, 27);\n-  movq(xmm2, ExternalAddress(LOG2_E), tmp2 \/*rscratch*\/);    \/\/0x00000000UL, 0x3ff72000UL, 0x161bb241UL, 0xbf5dabe1UL\n-  psrld(xmm0, 2);\n-  rcpps(xmm0, xmm0);\n-  psllq(xmm3, 12);\n-  movdqu(xmm6, ExternalAddress(HIGHSIGMASK), tmp2 \/*rscratch*\/);    \/\/0x00000000UL, 0xfffff800UL, 0x00000000UL, 0xfffff800UL\n-  psrlq(xmm3, 12);\n-  mulss(xmm0, xmm7);\n-  movl(edx, -1024);\n-  movdl(xmm5, edx);\n-  por(xmm3, xmm1);\n-  paddd(xmm0, xmm4);\n-  psllq(xmm5, 32);\n-  movdl(edx, xmm0);\n-  psllq(xmm0, 29);\n-  pand(xmm5, xmm3);\n-  movl(tmp1, INT_MIN);\n-  pand(xmm0, xmm6);\n-  subsd(xmm3, xmm5);\n-  andl(eax, 32752);\n-  subl(eax, 18416);\n-  sarl(eax, 4);\n-  cvtsi2sdl(xmm7, eax);\n-  mulpd(xmm5, xmm0);\n-  jmp(L_2TAG_PACKET_4_0_2);\n-\n-  bind(L_2TAG_PACKET_5_0_2);\n-  cmpl(eax, 0);\n-  jcc(Assembler::less, L_2TAG_PACKET_11_0_2);\n-  cmpl(eax, 752);\n-  jcc(Assembler::aboveEqual, L_2TAG_PACKET_12_0_2);\n-  addsd(xmm0, xmm7);\n-  movq(xmm2, ExternalAddress(HALFMASK), tmp2 \/*rscratch*\/);    \/\/0xf8000000UL, 0xffffffffUL, 0xf8000000UL, 0xffffffffUL\n-  addpd(xmm3, xmm0);\n-  xorpd(xmm6, xmm6);\n-  movl(eax, 17080);\n-  pinsrw(xmm6, eax, 3);\n-  pshufd(xmm0, xmm3, 238);\n-  addsd(xmm0, xmm3);\n-  movdqu(xmm3, xmm5);\n-  addsd(xmm5, xmm0);\n-  movdqu(xmm4, xmm2);\n-  subsd(xmm3, xmm5);\n-  movdqu(xmm7, xmm5);\n-  pand(xmm5, xmm2);\n-  movdqu(xmm2, xmm1);\n-  pand(xmm4, xmm1);\n-  subsd(xmm7, xmm5);\n-  addsd(xmm0, xmm3);\n-  subsd(xmm1, xmm4);\n-  mulsd(xmm4, xmm5);\n-  addsd(xmm0, xmm7);\n-  mulsd(xmm2, xmm0);\n-  movdqu(xmm7, xmm6);\n-  mulsd(xmm1, xmm5);\n-  addsd(xmm6, xmm4);\n-  movdl(eax, xmm6);\n-  subsd(xmm6, xmm7);\n-  lea(tmp4, ExternalAddress(T_exp));\n-  addsd(xmm2, xmm1);\n-  movdqu(xmm7, ExternalAddress(e_coeff +  0), tmp2 \/*rscratch*\/);    \/\/0xe78a6731UL, 0x3f55d87fUL, 0xd704a0c0UL, 0x3fac6b08UL\n-  movdqu(xmm3, ExternalAddress(e_coeff + 16), tmp2 \/*rscratch*\/);    \/\/0x6fba4e77UL, 0x3f83b2abUL, 0xff82c58fUL, 0x3fcebfbdUL\n-  subsd(xmm4, xmm6);\n-  pextrw(edx, xmm6, 3);\n-  movl(ecx, eax);\n-  andl(eax, 255);\n-  addl(eax, eax);\n-  movdqu(xmm5, Address(tmp4, rax, Address::times_8, 0));\n-  addsd(xmm2, xmm4);\n-  sarl(ecx, 8);\n-  movl(eax, ecx);\n-  sarl(ecx, 1);\n-  subl(eax, ecx);\n-  shll(ecx, 20);\n-  xorl(ecx, tmp1);\n-  movdl(xmm6, ecx);\n-  movq(xmm1, ExternalAddress(e_coeff + 32), tmp2 \/*rscratch*\/);    \/\/0xfefa39efUL, 0x3fe62e42UL, 0x00000000UL, 0x00000000UL\n-  andl(edx, 32767);\n-  cmpl(edx, 16529);\n-  jcc(Assembler::above, L_2TAG_PACKET_12_0_2);\n-  pshufd(xmm0, xmm2, 68);\n-  pshufd(xmm4, xmm2, 68);\n-  mulpd(xmm0, xmm0);\n-  mulpd(xmm7, xmm4);\n-  pshufd(xmm6, xmm6, 17);\n-  mulsd(xmm1, xmm2);\n-  mulsd(xmm0, xmm0);\n-  paddd(xmm5, xmm6);\n-  addpd(xmm3, xmm7);\n-  mulsd(xmm1, xmm5);\n-  pshufd(xmm6, xmm5, 238);\n-  mulpd(xmm0, xmm3);\n-  addsd(xmm1, xmm6);\n-  pshufd(xmm3, xmm0, 238);\n-  mulsd(xmm0, xmm5);\n-  mulsd(xmm3, xmm5);\n-  shll(eax, 4);\n-  xorpd(xmm4, xmm4);\n-  addl(eax, 16368);\n-  pinsrw(xmm4, eax, 3);\n-  addsd(xmm0, xmm1);\n-  addsd(xmm0, xmm3);\n-  movdqu(xmm1, xmm0);\n-  addsd(xmm0, xmm5);\n-  mulsd(xmm0, xmm4);\n-  pextrw(eax, xmm0, 3);\n-  andl(eax, 32752);\n-  jcc(Assembler::equal, L_2TAG_PACKET_13_0_2);\n-  cmpl(eax, 32752);\n-  jcc(Assembler::equal, L_2TAG_PACKET_14_0_2);\n-  jmp(B1_5);\n-\n-  bind(L_2TAG_PACKET_6_0_2);\n-  movq(xmm1, Address(rsp, 16));\n-  movq(xmm0, Address(rsp, 8));\n-  movdqu(xmm2, xmm0);\n-  movdl(eax, xmm2);\n-  psrlq(xmm2, 20);\n-  movdl(edx, xmm2);\n-  orl(eax, edx);\n-  jcc(Assembler::equal, L_2TAG_PACKET_15_0_2);\n-  movdl(eax, xmm1);\n-  psrlq(xmm1, 32);\n-  movdl(edx, xmm1);\n-  movl(ecx, edx);\n-  addl(edx, edx);\n-  orl(eax, edx);\n-  jcc(Assembler::equal, L_2TAG_PACKET_16_0_2);\n-  addsd(xmm0, xmm0);\n-  jmp(B1_5);\n-\n-  bind(L_2TAG_PACKET_16_0_2);\n-  xorpd(xmm0, xmm0);\n-  movl(eax, 16368);\n-  pinsrw(xmm0, eax, 3);\n-  movl(Address(rsp, 0), 29);\n-  jmp(L_2TAG_PACKET_17_0_2);\n-\n-  bind(L_2TAG_PACKET_18_0_2);\n-  movq(xmm0, Address(rsp, 16));\n-  addpd(xmm0, xmm0);\n-  jmp(B1_5);\n-\n-  bind(L_2TAG_PACKET_15_0_2);\n-  movdl(eax, xmm1);\n-  movdqu(xmm2, xmm1);\n-  psrlq(xmm1, 32);\n-  movdl(edx, xmm1);\n-  movl(ecx, edx);\n-  addl(edx, edx);\n-  orl(eax, edx);\n-  jcc(Assembler::equal, L_2TAG_PACKET_19_0_2);\n-  pextrw(eax, xmm2, 3);\n-  andl(eax, 32752);\n-  cmpl(eax, 32752);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_20_0_2);\n-  movdl(eax, xmm2);\n-  psrlq(xmm2, 20);\n-  movdl(edx, xmm2);\n-  orl(eax, edx);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_18_0_2);\n-\n-  bind(L_2TAG_PACKET_20_0_2);\n-  pextrw(eax, xmm0, 3);\n-  testl(eax, 32768);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_21_0_2);\n-  testl(ecx, INT_MIN);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_22_0_2);\n-  jmp(B1_5);\n-\n-  bind(L_2TAG_PACKET_23_0_2);\n-  movq(xmm1, Address(rsp, 16));\n-  movdl(eax, xmm1);\n-  testl(eax, 1);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_24_0_2);\n-  testl(eax, 2);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_25_0_2);\n-  jmp(L_2TAG_PACKET_24_0_2);\n-\n-  bind(L_2TAG_PACKET_21_0_2);\n-  shrl(ecx, 20);\n-  andl(ecx, 2047);\n-  cmpl(ecx, 1075);\n-  jcc(Assembler::above, L_2TAG_PACKET_24_0_2);\n-  jcc(Assembler::equal, L_2TAG_PACKET_26_0_2);\n-  cmpl(ecx, 1074);\n-  jcc(Assembler::above, L_2TAG_PACKET_23_0_2);\n-  cmpl(ecx, 1023);\n-  jcc(Assembler::below, L_2TAG_PACKET_24_0_2);\n-  movq(xmm1, Address(rsp, 16));\n-  movl(eax, 17208);\n-  xorpd(xmm3, xmm3);\n-  pinsrw(xmm3, eax, 3);\n-  movdqu(xmm4, xmm3);\n-  addsd(xmm3, xmm1);\n-  subsd(xmm4, xmm3);\n-  addsd(xmm1, xmm4);\n-  pextrw(eax, xmm1, 3);\n-  andl(eax, 32752);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_24_0_2);\n-  movdl(eax, xmm3);\n-  andl(eax, 1);\n-  jcc(Assembler::equal, L_2TAG_PACKET_24_0_2);\n-\n-  bind(L_2TAG_PACKET_25_0_2);\n-  movq(xmm1, Address(rsp, 16));\n-  pextrw(eax, xmm1, 3);\n-  andl(eax, 32768);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_27_0_2);\n-  jmp(B1_5);\n-\n-  bind(L_2TAG_PACKET_27_0_2);\n-  xorpd(xmm0, xmm0);\n-  movl(eax, 32768);\n-  pinsrw(xmm0, eax, 3);\n-  jmp(B1_5);\n-\n-  bind(L_2TAG_PACKET_24_0_2);\n-  movq(xmm1, Address(rsp, 16));\n-  pextrw(eax, xmm1, 3);\n-  andl(eax, 32768);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_22_0_2);\n-  xorpd(xmm0, xmm0);\n-  movl(eax, 32752);\n-  pinsrw(xmm0, eax, 3);\n-  jmp(B1_5);\n-\n-  bind(L_2TAG_PACKET_26_0_2);\n-  movq(xmm1, Address(rsp, 16));\n-  movdl(eax, xmm1);\n-  andl(eax, 1);\n-  jcc(Assembler::equal, L_2TAG_PACKET_24_0_2);\n-  jmp(L_2TAG_PACKET_25_0_2);\n-\n-  bind(L_2TAG_PACKET_28_0_2);\n-  movdl(eax, xmm1);\n-  psrlq(xmm1, 20);\n-  movdl(edx, xmm1);\n-  orl(eax, edx);\n-  jcc(Assembler::equal, L_2TAG_PACKET_29_0_2);\n-  movq(xmm0, Address(rsp, 16));\n-  addsd(xmm0, xmm0);\n-  jmp(B1_5);\n-\n-  bind(L_2TAG_PACKET_29_0_2);\n-  movq(xmm0, Address(rsp, 8));\n-  pextrw(eax, xmm0, 3);\n-  cmpl(eax, 49136);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_30_0_2);\n-  movdl(ecx, xmm0);\n-  psrlq(xmm0, 20);\n-  movdl(edx, xmm0);\n-  orl(ecx, edx);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_30_0_2);\n-  xorpd(xmm0, xmm0);\n-  movl(eax, 32760);\n-  pinsrw(xmm0, eax, 3);\n-  jmp(B1_5);\n-\n-  bind(L_2TAG_PACKET_30_0_2);\n-  movq(xmm1, Address(rsp, 16));\n-  andl(eax, 32752);\n-  subl(eax, 16368);\n-  pextrw(edx, xmm1, 3);\n-  xorpd(xmm0, xmm0);\n-  xorl(eax, edx);\n-  andl(eax, 32768);\n-  jcc(Assembler::equal, L_2TAG_PACKET_31_0_2);\n-  jmp(B1_5);\n-\n-  bind(L_2TAG_PACKET_31_0_2);\n-  movl(ecx, 32752);\n-  pinsrw(xmm0, ecx, 3);\n-  jmp(B1_5);\n-\n-  bind(L_2TAG_PACKET_32_0_2);\n-  movdl(eax, xmm1);\n-  cmpl(edx, 17184);\n-  jcc(Assembler::above, L_2TAG_PACKET_33_0_2);\n-  testl(eax, 1);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_34_0_2);\n-  testl(eax, 2);\n-  jcc(Assembler::equal, L_2TAG_PACKET_35_0_2);\n-  jmp(L_2TAG_PACKET_36_0_2);\n-\n-  bind(L_2TAG_PACKET_33_0_2);\n-  testl(eax, 1);\n-  jcc(Assembler::equal, L_2TAG_PACKET_35_0_2);\n-  jmp(L_2TAG_PACKET_36_0_2);\n-\n-  bind(L_2TAG_PACKET_7_0_2);\n-  movq(xmm2, Address(rsp, 8));\n-  movdl(eax, xmm2);\n-  psrlq(xmm2, 31);\n-  movdl(ecx, xmm2);\n-  orl(eax, ecx);\n-  jcc(Assembler::equal, L_2TAG_PACKET_9_0_2);\n-  movq(xmm1, Address(rsp, 16));\n-  pextrw(edx, xmm1, 3);\n-  movdl(eax, xmm1);\n-  movdqu(xmm2, xmm1);\n-  psrlq(xmm2, 32);\n-  movdl(ecx, xmm2);\n-  addl(ecx, ecx);\n-  orl(ecx, eax);\n-  jcc(Assembler::equal, L_2TAG_PACKET_37_0_2);\n-  andl(edx, 32752);\n-  cmpl(edx, 32752);\n-  jcc(Assembler::equal, L_2TAG_PACKET_28_0_2);\n-  cmpl(edx, 17200);\n-  jcc(Assembler::above, L_2TAG_PACKET_35_0_2);\n-  cmpl(edx, 17184);\n-  jcc(Assembler::aboveEqual, L_2TAG_PACKET_32_0_2);\n-  cmpl(edx, 16368);\n-  jcc(Assembler::below, L_2TAG_PACKET_34_0_2);\n-  movl(eax, 17208);\n-  xorpd(xmm2, xmm2);\n-  pinsrw(xmm2, eax, 3);\n-  movdqu(xmm4, xmm2);\n-  addsd(xmm2, xmm1);\n-  subsd(xmm4, xmm2);\n-  addsd(xmm1, xmm4);\n-  pextrw(eax, xmm1, 3);\n-  andl(eax, 32767);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_34_0_2);\n-  movdl(eax, xmm2);\n-  andl(eax, 1);\n-  jcc(Assembler::equal, L_2TAG_PACKET_35_0_2);\n-\n-  bind(L_2TAG_PACKET_36_0_2);\n-  xorpd(xmm1, xmm1);\n-  movl(edx, 30704);\n-  pinsrw(xmm1, edx, 3);\n-  movq(xmm2, ExternalAddress(LOG2_E), tmp2 \/*rscratch*\/);    \/\/0x00000000UL, 0x3ff72000UL, 0x161bb241UL, 0xbf5dabe1UL\n-  movq(xmm4, Address(rsp, 8));\n-  pextrw(eax, xmm4, 3);\n-  movl(edx, 8192);\n-  movdl(xmm4, edx);\n-  andl(eax, 32767);\n-  subl(eax, 16);\n-  jcc(Assembler::less, L_2TAG_PACKET_10_0_2);\n-  movl(edx, eax);\n-  andl(edx, 32752);\n-  subl(edx, 16368);\n-  movl(ecx, edx);\n-  sarl(edx, 31);\n-  addl(ecx, edx);\n-  xorl(ecx, edx);\n-  addl(ecx, 16);\n-  bsrl(ecx, ecx);\n-  movl(tmp1, INT_MIN);\n-  jmp(L_2TAG_PACKET_1_0_2);\n-\n-  bind(L_2TAG_PACKET_34_0_2);\n-  xorpd(xmm1, xmm1);\n-  movl(eax, 32752);\n-  pinsrw(xmm1, eax, 3);\n-  xorpd(xmm0, xmm0);\n-  mulsd(xmm0, xmm1);\n-  movl(Address(rsp, 0), 28);\n-  jmp(L_2TAG_PACKET_17_0_2);\n-\n-  bind(L_2TAG_PACKET_35_0_2);\n-  xorpd(xmm1, xmm1);\n-  movl(edx, 30704);\n-  pinsrw(xmm1, edx, 3);\n-  movq(xmm2, ExternalAddress(LOG2_E), tmp2 \/*rscratch*\/);    \/\/0x00000000UL, 0x3ff72000UL, 0x161bb241UL, 0xbf5dabe1UL\n-  movq(xmm4, Address(rsp, 8));\n-  pextrw(eax, xmm4, 3);\n-  movl(edx, 8192);\n-  movdl(xmm4, edx);\n-  andl(eax, 32767);\n-  subl(eax, 16);\n-  jcc(Assembler::less, L_2TAG_PACKET_8_0_2);\n-  movl(edx, eax);\n-  andl(edx, 32752);\n-  subl(edx, 16368);\n-  movl(ecx, edx);\n-  sarl(edx, 31);\n-  addl(ecx, edx);\n-  xorl(ecx, edx);\n-  addl(ecx, 16);\n-  bsrl(ecx, ecx);\n-  movl(tmp1, 0);\n-  jmp(L_2TAG_PACKET_1_0_2);\n-\n-  bind(L_2TAG_PACKET_19_0_2);\n-  xorpd(xmm0, xmm0);\n-  movl(eax, 16368);\n-  pinsrw(xmm0, eax, 3);\n-  jmp(B1_5);\n-\n-  bind(L_2TAG_PACKET_22_0_2);\n-  xorpd(xmm0, xmm0);\n-  jmp(B1_5);\n-\n-  bind(L_2TAG_PACKET_11_0_2);\n-  addl(eax, 384);\n-  cmpl(eax, 0);\n-  jcc(Assembler::less, L_2TAG_PACKET_38_0_2);\n-  mulsd(xmm5, xmm1);\n-  addsd(xmm0, xmm7);\n-  shrl(tmp1, 31);\n-  addpd(xmm3, xmm0);\n-  pshufd(xmm0, xmm3, 238);\n-  addsd(xmm3, xmm0);\n-  lea(tmp4, ExternalAddress(log2));    \/\/0xfefa39efUL, 0x3fe62e42UL, 0xfefa39efUL, 0xbfe62e42UL\n-  movq(xmm4, Address(tmp4, tmp1, Address::times_8, 0));\n-  mulsd(xmm1, xmm3);\n-  xorpd(xmm0, xmm0);\n-  movl(eax, 16368);\n-  shll(tmp1, 15);\n-  orl(eax, tmp1);\n-  pinsrw(xmm0, eax, 3);\n-  addsd(xmm5, xmm1);\n-  mulsd(xmm5, xmm4);\n-  addsd(xmm0, xmm5);\n-  jmp(B1_5);\n-\n-  bind(L_2TAG_PACKET_38_0_2);\n-\n-  bind(L_2TAG_PACKET_37_0_2);\n-  xorpd(xmm0, xmm0);\n-  movl(eax, 16368);\n-  pinsrw(xmm0, eax, 3);\n-  jmp(B1_5);\n-\n-  bind(L_2TAG_PACKET_39_0_2);\n-  xorpd(xmm0, xmm0);\n-  movl(eax, 16368);\n-  pinsrw(xmm0, eax, 3);\n-  movl(Address(rsp, 0), 26);\n-  jmp(L_2TAG_PACKET_17_0_2);\n-\n-  bind(L_2TAG_PACKET_9_0_2);\n-  movq(xmm1, Address(rsp, 16));\n-  movdqu(xmm2, xmm1);\n-  pextrw(eax, xmm1, 3);\n-  andl(eax, 32752);\n-  cmpl(eax, 32752);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_40_0_2);\n-  movdl(eax, xmm2);\n-  psrlq(xmm2, 20);\n-  movdl(edx, xmm2);\n-  orl(eax, edx);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_18_0_2);\n-\n-  bind(L_2TAG_PACKET_40_0_2);\n-  movdl(eax, xmm1);\n-  psrlq(xmm1, 32);\n-  movdl(edx, xmm1);\n-  movl(ecx, edx);\n-  addl(edx, edx);\n-  orl(eax, edx);\n-  jcc(Assembler::equal, L_2TAG_PACKET_39_0_2);\n-  shrl(edx, 21);\n-  cmpl(edx, 1075);\n-  jcc(Assembler::above, L_2TAG_PACKET_41_0_2);\n-  jcc(Assembler::equal, L_2TAG_PACKET_42_0_2);\n-  cmpl(edx, 1023);\n-  jcc(Assembler::below, L_2TAG_PACKET_41_0_2);\n-  movq(xmm1, Address(rsp, 16));\n-  movl(eax, 17208);\n-  xorpd(xmm3, xmm3);\n-  pinsrw(xmm3, eax, 3);\n-  movdqu(xmm4, xmm3);\n-  addsd(xmm3, xmm1);\n-  subsd(xmm4, xmm3);\n-  addsd(xmm1, xmm4);\n-  pextrw(eax, xmm1, 3);\n-  andl(eax, 32752);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_41_0_2);\n-  movdl(eax, xmm3);\n-  andl(eax, 1);\n-  jcc(Assembler::equal, L_2TAG_PACKET_41_0_2);\n-\n-  bind(L_2TAG_PACKET_43_0_2);\n-  movq(xmm0, Address(rsp, 8));\n-  testl(ecx, INT_MIN);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_44_0_2);\n-  jmp(B1_5);\n-\n-  bind(L_2TAG_PACKET_42_0_2);\n-  movq(xmm1, Address(rsp, 16));\n-  movdl(eax, xmm1);\n-  testl(eax, 1);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_43_0_2);\n-\n-  bind(L_2TAG_PACKET_41_0_2);\n-  testl(ecx, INT_MIN);\n-  jcc(Assembler::equal, L_2TAG_PACKET_22_0_2);\n-  xorpd(xmm0, xmm0);\n-\n-  bind(L_2TAG_PACKET_44_0_2);\n-  movl(eax, 16368);\n-  xorpd(xmm1, xmm1);\n-  pinsrw(xmm1, eax, 3);\n-  divsd(xmm1, xmm0);\n-  movdqu(xmm0, xmm1);\n-  movl(Address(rsp, 0), 27);\n-  jmp(L_2TAG_PACKET_17_0_2);\n-\n-  bind(L_2TAG_PACKET_12_0_2);\n-  movq(xmm2, Address(rsp, 8));\n-  movq(xmm6, Address(rsp, 16));\n-  pextrw(eax, xmm2, 3);\n-  pextrw(edx, xmm6, 3);\n-  movl(ecx, 32752);\n-  andl(ecx, edx);\n-  cmpl(ecx, 32752);\n-  jcc(Assembler::equal, L_2TAG_PACKET_45_0_2);\n-  andl(eax, 32752);\n-  subl(eax, 16368);\n-  xorl(edx, eax);\n-  testl(edx, 32768);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_46_0_2);\n-\n-  bind(L_2TAG_PACKET_47_0_2);\n-  movl(eax, 32736);\n-  pinsrw(xmm0, eax, 3);\n-  shrl(tmp1, 16);\n-  orl(eax, tmp1);\n-  pinsrw(xmm1, eax, 3);\n-  mulsd(xmm0, xmm1);\n-\n-  bind(L_2TAG_PACKET_14_0_2);\n-  movl(Address(rsp, 0), 24);\n-  jmp(L_2TAG_PACKET_17_0_2);\n-\n-  bind(L_2TAG_PACKET_46_0_2);\n-  movl(eax, 16);\n-  pinsrw(xmm0, eax, 3);\n-  mulsd(xmm0, xmm0);\n-  testl(tmp1, INT_MIN);\n-  jcc(Assembler::equal, L_2TAG_PACKET_48_0_2);\n-  mov64(tmp2, 0x8000000000000000);\n-  movdq(xmm2, tmp2);\n-  xorpd(xmm0, xmm2);\n-\n-  bind(L_2TAG_PACKET_48_0_2);\n-  movl(Address(rsp, 0), 25);\n-  jmp(L_2TAG_PACKET_17_0_2);\n-\n-  bind(L_2TAG_PACKET_13_0_2);\n-  pextrw(ecx, xmm5, 3);\n-  pextrw(edx, xmm4, 3);\n-  movl(eax, -1);\n-  andl(ecx, 32752);\n-  subl(ecx, 16368);\n-  andl(edx, 32752);\n-  addl(edx, ecx);\n-  movl(ecx, -31);\n-  sarl(edx, 4);\n-  subl(ecx, edx);\n-  jcc(Assembler::lessEqual, L_2TAG_PACKET_49_0_2);\n-  cmpl(ecx, 20);\n-  jcc(Assembler::above, L_2TAG_PACKET_50_0_2);\n-  shll(eax);\n-\n-  bind(L_2TAG_PACKET_49_0_2);\n-  movdl(xmm0, eax);\n-  psllq(xmm0, 32);\n-  pand(xmm0, xmm5);\n-  subsd(xmm5, xmm0);\n-  addsd(xmm5, xmm1);\n-  mulsd(xmm0, xmm4);\n-  mulsd(xmm5, xmm4);\n-  addsd(xmm0, xmm5);\n-\n-  bind(L_2TAG_PACKET_50_0_2);\n-  jmp(L_2TAG_PACKET_48_0_2);\n-\n-  bind(L_2TAG_PACKET_2_0_2);\n-  movw(ecx, Address(rsp, 22));\n-  movl(edx, INT_MIN);\n-  movdl(xmm1, rdx);\n-  xorpd(xmm7, xmm7);\n-  paddd(xmm0, xmm4);\n-  movdl(edx, xmm0);\n-  psllq(xmm0, 29);\n-  paddq(xmm1, xmm3);\n-  pand(xmm5, xmm1);\n-  andl(ecx, 32752);\n-  cmpl(ecx, 16560);\n-  jcc(Assembler::less, L_2TAG_PACKET_3_0_2);\n-  pand(xmm0, xmm6);\n-  subsd(xmm3, xmm5);\n-  addl(eax, 16351);\n-  shrl(eax, 4);\n-  subl(eax, 1022);\n-  cvtsi2sdl(xmm7, eax);\n-  mulpd(xmm5, xmm0);\n-  lea(r11, ExternalAddress(L_tbl));\n-  movq(xmm4, ExternalAddress(coeff_h), tmp2 \/*rscratch*\/);    \/\/0x00000000UL, 0xbfd61a00UL, 0x00000000UL, 0xbf5dabe1UL\n-  mulsd(xmm3, xmm0);\n-  movq(xmm6, ExternalAddress(coeff_h), tmp2 \/*rscratch*\/);    \/\/0x00000000UL, 0xbfd61a00UL, 0x00000000UL, 0xbf5dabe1UL\n-  subsd(xmm5, xmm2);\n-  movq(xmm1, ExternalAddress(coeff_h + 8), tmp2 \/*rscratch*\/);    \/\/0x00000000UL, 0xbf5dabe1UL\n-  pshufd(xmm2, xmm3, 68);\n-  unpcklpd(xmm5, xmm3);\n-  addsd(xmm3, xmm5);\n-  movq(xmm0, ExternalAddress(coeff_h + 8), tmp2 \/*rscratch*\/);    \/\/0x00000000UL, 0xbf5dabe1UL\n-  andl(edx, 16760832);\n-  shrl(edx, 10);\n-  addpd(xmm7, Address(tmp4, edx, Address::times_1, -3648));\n-  mulsd(xmm4, xmm5);\n-  mulsd(xmm0, xmm5);\n-  mulsd(xmm6, xmm2);\n-  mulsd(xmm1, xmm2);\n-  movdqu(xmm2, xmm5);\n-  mulsd(xmm4, xmm5);\n-  addsd(xmm5, xmm0);\n-  movdqu(xmm0, xmm7);\n-  addsd(xmm2, xmm3);\n-  addsd(xmm7, xmm5);\n-  mulsd(xmm6, xmm2);\n-  subsd(xmm0, xmm7);\n-  movdqu(xmm2, xmm7);\n-  addsd(xmm7, xmm4);\n-  addsd(xmm0, xmm5);\n-  subsd(xmm2, xmm7);\n-  addsd(xmm4, xmm2);\n-  pshufd(xmm2, xmm5, 238);\n-  movdqu(xmm5, xmm7);\n-  addsd(xmm7, xmm2);\n-  addsd(xmm4, xmm0);\n-  movdqu(xmm0, ExternalAddress(coeff), tmp2 \/*rscratch*\/);    \/\/0x6dc96112UL, 0xbf836578UL, 0xee241472UL, 0xbf9b0301UL\n-  subsd(xmm5, xmm7);\n-  addsd(xmm6, xmm4);\n-  movdqu(xmm4, xmm7);\n-  addsd(xmm5, xmm2);\n-  addsd(xmm7, xmm1);\n-  movdqu(xmm2, ExternalAddress(coeff + 64), tmp2 \/*rscratch*\/);    \/\/0x486ececcUL, 0x3fc4635eUL, 0x161bb241UL, 0xbf5dabe1UL\n-  subsd(xmm4, xmm7);\n-  addsd(xmm6, xmm5);\n-  addsd(xmm4, xmm1);\n-  pshufd(xmm5, xmm7, 238);\n-  movapd(xmm1, xmm7);\n-  addsd(xmm7, xmm5);\n-  subsd(xmm1, xmm7);\n-  addsd(xmm1, xmm5);\n-  movdqu(xmm5, ExternalAddress(coeff + 80), tmp2 \/*rscratch*\/);    \/\/0x9f95985aUL, 0xbfb528dbUL, 0xf8b5787dUL, 0x3ef2531eUL\n-  pshufd(xmm3, xmm3, 68);\n-  addsd(xmm6, xmm4);\n-  addsd(xmm6, xmm1);\n-  movdqu(xmm1, ExternalAddress(coeff + 32), tmp2 \/*rscratch*\/);    \/\/0x9f95985aUL, 0xbfb528dbUL, 0xb3841d2aUL, 0xbfd619b6UL\n-  mulpd(xmm0, xmm3);\n-  mulpd(xmm2, xmm3);\n-  pshufd(xmm4, xmm3, 68);\n-  mulpd(xmm3, xmm3);\n-  addpd(xmm0, xmm1);\n-  addpd(xmm5, xmm2);\n-  mulsd(xmm4, xmm3);\n-  movq(xmm2, ExternalAddress(HIGHMASK_LOG_X), tmp2 \/*rscratch*\/);    \/\/0xf8000000UL, 0xffffffffUL, 0x00000000UL, 0xfffff800UL\n-  mulpd(xmm3, xmm3);\n-  movq(xmm1, Address(rsp, 16));\n-  movw(ecx, Address(rsp, 22));\n-  mulpd(xmm0, xmm4);\n-  pextrw(eax, xmm7, 3);\n-  mulpd(xmm5, xmm4);\n-  mulpd(xmm0, xmm3);\n-  movq(xmm4, ExternalAddress(HIGHMASK_Y + 8), tmp2 \/*rscratch*\/);    \/\/0x00000000UL, 0xffffffffUL\n-  pand(xmm2, xmm7);\n-  addsd(xmm5, xmm6);\n-  subsd(xmm7, xmm2);\n-  addpd(xmm5, xmm0);\n-  andl(eax, 32752);\n-  subl(eax, 16368);\n-  andl(ecx, 32752);\n-  cmpl(ecx, 32752);\n-  jcc(Assembler::equal, L_2TAG_PACKET_45_0_2);\n-  addl(ecx, eax);\n-  cmpl(ecx, 16576);\n-  jcc(Assembler::aboveEqual, L_2TAG_PACKET_51_0_2);\n-  pshufd(xmm0, xmm5, 238);\n-  pand(xmm4, xmm1);\n-  movdqu(xmm3, xmm1);\n-  addsd(xmm5, xmm0);\n-  subsd(xmm1, xmm4);\n-  xorpd(xmm6, xmm6);\n-  movl(edx, 17080);\n-  pinsrw(xmm6, edx, 3);\n-  addsd(xmm7, xmm5);\n-  mulsd(xmm4, xmm2);\n-  mulsd(xmm1, xmm2);\n-  movdqu(xmm5, xmm6);\n-  mulsd(xmm3, xmm7);\n-  addsd(xmm6, xmm4);\n-  addsd(xmm1, xmm3);\n-  movdqu(xmm7, ExternalAddress(e_coeff), tmp2 \/*rscratch*\/);    \/\/0xe78a6731UL, 0x3f55d87fUL, 0xd704a0c0UL, 0x3fac6b08UL\n-  movdl(edx, xmm6);\n-  subsd(xmm6, xmm5);\n-  lea(tmp4, ExternalAddress(T_exp));\n-  movdqu(xmm3, ExternalAddress(e_coeff + 16), tmp2 \/*rscratch*\/);    \/\/0x6fba4e77UL, 0x3f83b2abUL, 0xff82c58fUL, 0x3fcebfbdUL\n-  movq(xmm2, ExternalAddress(e_coeff + 32), tmp2 \/*rscratch*\/);    \/\/0xfefa39efUL, 0x3fe62e42UL, 0x00000000UL, 0x00000000UL\n-  subsd(xmm4, xmm6);\n-  movl(ecx, edx);\n-  andl(edx, 255);\n-  addl(edx, edx);\n-  movdqu(xmm5, Address(tmp4, edx, Address::times_8, 0));\n-  addsd(xmm4, xmm1);\n-  pextrw(edx, xmm6, 3);\n-  shrl(ecx, 8);\n-  movl(eax, ecx);\n-  shrl(ecx, 1);\n-  subl(eax, ecx);\n-  shll(ecx, 20);\n-  movdl(xmm6, ecx);\n-  pshufd(xmm0, xmm4, 68);\n-  pshufd(xmm1, xmm4, 68);\n-  mulpd(xmm0, xmm0);\n-  mulpd(xmm7, xmm1);\n-  pshufd(xmm6, xmm6, 17);\n-  mulsd(xmm2, xmm4);\n-  andl(edx, 32767);\n-  cmpl(edx, 16529);\n-  jcc(Assembler::above, L_2TAG_PACKET_12_0_2);\n-  mulsd(xmm0, xmm0);\n-  paddd(xmm5, xmm6);\n-  addpd(xmm3, xmm7);\n-  mulsd(xmm2, xmm5);\n-  pshufd(xmm6, xmm5, 238);\n-  mulpd(xmm0, xmm3);\n-  addsd(xmm2, xmm6);\n-  pshufd(xmm3, xmm0, 238);\n-  addl(eax, 1023);\n-  shll(eax, 20);\n-  orl(eax, tmp1);\n-  movdl(xmm4, eax);\n-  mulsd(xmm0, xmm5);\n-  mulsd(xmm3, xmm5);\n-  addsd(xmm0, xmm2);\n-  psllq(xmm4, 32);\n-  addsd(xmm0, xmm3);\n-  movdqu(xmm1, xmm0);\n-  addsd(xmm0, xmm5);\n-  mulsd(xmm0, xmm4);\n-  pextrw(eax, xmm0, 3);\n-  andl(eax, 32752);\n-  jcc(Assembler::equal, L_2TAG_PACKET_13_0_2);\n-  cmpl(eax, 32752);\n-  jcc(Assembler::equal, L_2TAG_PACKET_14_0_2);\n-\n-  bind(L_2TAG_PACKET_52_0_2);\n-  jmp(B1_5);\n-\n-  bind(L_2TAG_PACKET_45_0_2);\n-  movq(xmm0, Address(rsp, 8));\n-  xorpd(xmm2, xmm2);\n-  movl(eax, 49136);\n-  pinsrw(xmm2, eax, 3);\n-  addsd(xmm2, xmm0);\n-  pextrw(eax, xmm2, 3);\n-  cmpl(eax, 0);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_53_0_2);\n-  xorpd(xmm0, xmm0);\n-  movl(eax, 32760);\n-  pinsrw(xmm0, eax, 3);\n-  jmp(B1_5);\n-\n-  bind(L_2TAG_PACKET_53_0_2);\n-  movq(xmm1, Address(rsp, 16));\n-  movdl(edx, xmm1);\n-  movdqu(xmm3, xmm1);\n-  psrlq(xmm3, 20);\n-  movdl(ecx, xmm3);\n-  orl(ecx, edx);\n-  jcc(Assembler::equal, L_2TAG_PACKET_54_0_2);\n-  addsd(xmm1, xmm1);\n-  movdqu(xmm0, xmm1);\n-  jmp(B1_5);\n-\n-  bind(L_2TAG_PACKET_51_0_2);\n-  pextrw(eax, xmm1, 3);\n-  pextrw(ecx, xmm2, 3);\n-  xorl(eax, ecx);\n-  testl(eax, 32768);\n-  jcc(Assembler::equal, L_2TAG_PACKET_47_0_2);\n-  jmp(L_2TAG_PACKET_46_0_2);\n-\n-  bind(L_2TAG_PACKET_54_0_2);\n-  pextrw(eax, xmm0, 3);\n-  andl(eax, 32752);\n-  pextrw(edx, xmm1, 3);\n-  xorpd(xmm0, xmm0);\n-  subl(eax, 16368);\n-  xorl(eax, edx);\n-  testl(eax, 32768);\n-  jcc(Assembler::equal, L_2TAG_PACKET_55_0_2);\n-  jmp(B1_5);\n-\n-  bind(L_2TAG_PACKET_55_0_2);\n-  movl(edx, 32752);\n-  pinsrw(xmm0, edx, 3);\n-  jmp(B1_5);\n-\n-  bind(L_2TAG_PACKET_17_0_2);\n-  movq(Address(rsp, 24), xmm0);\n-\n-  bind(B1_3);\n-  movq(xmm0, Address(rsp, 24));\n-\n-  bind(L_2TAG_PACKET_56_0_2);\n-\n-  bind(B1_5);\n-  addq(rsp, 40);\n-}\n-#else\n-\/\/ The 32 bit code is at most SSE2 compliant\n-ATTRIBUTE_ALIGNED(16) juint _static_const_table_pow[] =\n-{\n-    0x00000000UL, 0xbfd61a00UL, 0x00000000UL, 0xbf5dabe1UL, 0xf8000000UL,\n-    0xffffffffUL, 0x00000000UL, 0xfffff800UL, 0x00000000UL, 0x3ff00000UL,\n-    0x00000000UL, 0x00000000UL, 0x20000000UL, 0x3feff00aUL, 0x96621f95UL,\n-    0x3e5b1856UL, 0xe0000000UL, 0x3fefe019UL, 0xe5916f9eUL, 0xbe325278UL,\n-    0x00000000UL, 0x3fefd02fUL, 0x859a1062UL, 0x3e595fb7UL, 0xc0000000UL,\n-    0x3fefc049UL, 0xb245f18fUL, 0xbe529c38UL, 0xe0000000UL, 0x3fefb069UL,\n-    0xad2880a7UL, 0xbe501230UL, 0x60000000UL, 0x3fefa08fUL, 0xc8e72420UL,\n-    0x3e597bd1UL, 0x80000000UL, 0x3fef90baUL, 0xc30c4500UL, 0xbe5d6c75UL,\n-    0xe0000000UL, 0x3fef80eaUL, 0x02c63f43UL, 0x3e2e1318UL, 0xc0000000UL,\n-    0x3fef7120UL, 0xb3d4ccccUL, 0xbe44c52aUL, 0x00000000UL, 0x3fef615cUL,\n-    0xdbd91397UL, 0xbe4e7d6cUL, 0xa0000000UL, 0x3fef519cUL, 0x65c5cd68UL,\n-    0xbe522dc8UL, 0xa0000000UL, 0x3fef41e2UL, 0x46d1306cUL, 0xbe5a840eUL,\n-    0xe0000000UL, 0x3fef322dUL, 0xd2980e94UL, 0x3e5071afUL, 0xa0000000UL,\n-    0x3fef227eUL, 0x773abadeUL, 0xbe5891e5UL, 0xa0000000UL, 0x3fef12d4UL,\n-    0xdc6bf46bUL, 0xbe5cccbeUL, 0xe0000000UL, 0x3fef032fUL, 0xbc7247faUL,\n-    0xbe2bab83UL, 0x80000000UL, 0x3feef390UL, 0xbcaa1e46UL, 0xbe53bb3bUL,\n-    0x60000000UL, 0x3feee3f6UL, 0x5f6c682dUL, 0xbe54c619UL, 0x80000000UL,\n-    0x3feed461UL, 0x5141e368UL, 0xbe4b6d86UL, 0xe0000000UL, 0x3feec4d1UL,\n-    0xec678f76UL, 0xbe369af6UL, 0x80000000UL, 0x3feeb547UL, 0x41301f55UL,\n-    0xbe2d4312UL, 0x60000000UL, 0x3feea5c2UL, 0x676da6bdUL, 0xbe4d8dd0UL,\n-    0x60000000UL, 0x3fee9642UL, 0x57a891c4UL, 0x3e51f991UL, 0xa0000000UL,\n-    0x3fee86c7UL, 0xe4eb491eUL, 0x3e579bf9UL, 0x20000000UL, 0x3fee7752UL,\n-    0xfddc4a2cUL, 0xbe3356e6UL, 0xc0000000UL, 0x3fee67e1UL, 0xd75b5bf1UL,\n-    0xbe449531UL, 0x80000000UL, 0x3fee5876UL, 0xbd423b8eUL, 0x3df54fe4UL,\n-    0x60000000UL, 0x3fee4910UL, 0x330e51b9UL, 0x3e54289cUL, 0x80000000UL,\n-    0x3fee39afUL, 0x8651a95fUL, 0xbe55aad6UL, 0xa0000000UL, 0x3fee2a53UL,\n-    0x5e98c708UL, 0xbe2fc4a9UL, 0xe0000000UL, 0x3fee1afcUL, 0x0989328dUL,\n-    0x3e23958cUL, 0x40000000UL, 0x3fee0babUL, 0xee642abdUL, 0xbe425dd8UL,\n-    0xa0000000UL, 0x3fedfc5eUL, 0xc394d236UL, 0x3e526362UL, 0x20000000UL,\n-    0x3feded17UL, 0xe104aa8eUL, 0x3e4ce247UL, 0xc0000000UL, 0x3fedddd4UL,\n-    0x265a9be4UL, 0xbe5bb77aUL, 0x40000000UL, 0x3fedce97UL, 0x0ecac52fUL,\n-    0x3e4a7cb1UL, 0xe0000000UL, 0x3fedbf5eUL, 0x124cb3b8UL, 0x3e257024UL,\n-    0x80000000UL, 0x3fedb02bUL, 0xe6d4febeUL, 0xbe2033eeUL, 0x20000000UL,\n-    0x3feda0fdUL, 0x39cca00eUL, 0xbe3ddabcUL, 0xc0000000UL, 0x3fed91d3UL,\n-    0xef8a552aUL, 0xbe543390UL, 0x40000000UL, 0x3fed82afUL, 0xb8e85204UL,\n-    0x3e513850UL, 0xe0000000UL, 0x3fed738fUL, 0x3d59fe08UL, 0xbe5db728UL,\n-    0x40000000UL, 0x3fed6475UL, 0x3aa7ead1UL, 0x3e58804bUL, 0xc0000000UL,\n-    0x3fed555fUL, 0xf8a35ba9UL, 0xbe5298b0UL, 0x00000000UL, 0x3fed464fUL,\n-    0x9a88dd15UL, 0x3e5a8cdbUL, 0x40000000UL, 0x3fed3743UL, 0xb0b0a190UL,\n-    0x3e598635UL, 0x80000000UL, 0x3fed283cUL, 0xe2113295UL, 0xbe5c1119UL,\n-    0x80000000UL, 0x3fed193aUL, 0xafbf1728UL, 0xbe492e9cUL, 0x60000000UL,\n-    0x3fed0a3dUL, 0xe4a4ccf3UL, 0x3e19b90eUL, 0x20000000UL, 0x3fecfb45UL,\n-    0xba3cbeb8UL, 0x3e406b50UL, 0xc0000000UL, 0x3fecec51UL, 0x110f7dddUL,\n-    0x3e0d6806UL, 0x40000000UL, 0x3fecdd63UL, 0x7dd7d508UL, 0xbe5a8943UL,\n-    0x80000000UL, 0x3fecce79UL, 0x9b60f271UL, 0xbe50676aUL, 0x80000000UL,\n-    0x3fecbf94UL, 0x0b9ad660UL, 0x3e59174fUL, 0x60000000UL, 0x3fecb0b4UL,\n-    0x00823d9cUL, 0x3e5bbf72UL, 0x20000000UL, 0x3feca1d9UL, 0x38a6ec89UL,\n-    0xbe4d38f9UL, 0x80000000UL, 0x3fec9302UL, 0x3a0b7d8eUL, 0x3e53dbfdUL,\n-    0xc0000000UL, 0x3fec8430UL, 0xc6826b34UL, 0xbe27c5c9UL, 0xc0000000UL,\n-    0x3fec7563UL, 0x0c706381UL, 0xbe593653UL, 0x60000000UL, 0x3fec669bUL,\n-    0x7df34ec7UL, 0x3e461ab5UL, 0xe0000000UL, 0x3fec57d7UL, 0x40e5e7e8UL,\n-    0xbe5c3daeUL, 0x00000000UL, 0x3fec4919UL, 0x5602770fUL, 0xbe55219dUL,\n-    0xc0000000UL, 0x3fec3a5eUL, 0xec7911ebUL, 0x3e5a5d25UL, 0x60000000UL,\n-    0x3fec2ba9UL, 0xb39ea225UL, 0xbe53c00bUL, 0x80000000UL, 0x3fec1cf8UL,\n-    0x967a212eUL, 0x3e5a8ddfUL, 0x60000000UL, 0x3fec0e4cUL, 0x580798bdUL,\n-    0x3e5f53abUL, 0x00000000UL, 0x3febffa5UL, 0xb8282df6UL, 0xbe46b874UL,\n-    0x20000000UL, 0x3febf102UL, 0xe33a6729UL, 0x3e54963fUL, 0x00000000UL,\n-    0x3febe264UL, 0x3b53e88aUL, 0xbe3adce1UL, 0x60000000UL, 0x3febd3caUL,\n-    0xc2585084UL, 0x3e5cde9fUL, 0x80000000UL, 0x3febc535UL, 0xa335c5eeUL,\n-    0xbe39fd9cUL, 0x20000000UL, 0x3febb6a5UL, 0x7325b04dUL, 0x3e42ba15UL,\n-    0x60000000UL, 0x3feba819UL, 0x1564540fUL, 0x3e3a9f35UL, 0x40000000UL,\n-    0x3feb9992UL, 0x83fff592UL, 0xbe5465ceUL, 0xa0000000UL, 0x3feb8b0fUL,\n-    0xb9da63d3UL, 0xbe4b1a0aUL, 0x80000000UL, 0x3feb7c91UL, 0x6d6f1ea4UL,\n-    0x3e557657UL, 0x00000000UL, 0x3feb6e18UL, 0x5e80a1bfUL, 0x3e4ddbb6UL,\n-    0x00000000UL, 0x3feb5fa3UL, 0x1c9eacb5UL, 0x3e592877UL, 0xa0000000UL,\n-    0x3feb5132UL, 0x6d40beb3UL, 0xbe51858cUL, 0xa0000000UL, 0x3feb42c6UL,\n-    0xd740c67bUL, 0x3e427ad2UL, 0x40000000UL, 0x3feb345fUL, 0xa3e0cceeUL,\n-    0xbe5c2fc4UL, 0x40000000UL, 0x3feb25fcUL, 0x8e752b50UL, 0xbe3da3c2UL,\n-    0xc0000000UL, 0x3feb179dUL, 0xa892e7deUL, 0x3e1fb481UL, 0xc0000000UL,\n-    0x3feb0943UL, 0x21ed71e9UL, 0xbe365206UL, 0x20000000UL, 0x3feafaeeUL,\n-    0x0e1380a3UL, 0x3e5c5b7bUL, 0x20000000UL, 0x3feaec9dUL, 0x3c3d640eUL,\n-    0xbe5dbbd0UL, 0x60000000UL, 0x3feade50UL, 0x8f97a715UL, 0x3e3a8ec5UL,\n-    0x20000000UL, 0x3fead008UL, 0x23ab2839UL, 0x3e2fe98aUL, 0x40000000UL,\n-    0x3feac1c4UL, 0xf4bbd50fUL, 0x3e54d8f6UL, 0xe0000000UL, 0x3feab384UL,\n-    0x14757c4dUL, 0xbe48774cUL, 0xc0000000UL, 0x3feaa549UL, 0x7c7b0eeaUL,\n-    0x3e5b51bbUL, 0x20000000UL, 0x3fea9713UL, 0xf56f7013UL, 0x3e386200UL,\n-    0xe0000000UL, 0x3fea88e0UL, 0xbe428ebeUL, 0xbe514af5UL, 0xe0000000UL,\n-    0x3fea7ab2UL, 0x8d0e4496UL, 0x3e4f9165UL, 0x60000000UL, 0x3fea6c89UL,\n-    0xdbacc5d5UL, 0xbe5c063bUL, 0x20000000UL, 0x3fea5e64UL, 0x3f19d970UL,\n-    0xbe5a0c8cUL, 0x20000000UL, 0x3fea5043UL, 0x09ea3e6bUL, 0x3e5065dcUL,\n-    0x80000000UL, 0x3fea4226UL, 0x78df246cUL, 0x3e5e05f6UL, 0x40000000UL,\n-    0x3fea340eUL, 0x4057d4a0UL, 0x3e431b2bUL, 0x40000000UL, 0x3fea25faUL,\n-    0x82867bb5UL, 0x3e4b76beUL, 0xa0000000UL, 0x3fea17eaUL, 0x9436f40aUL,\n-    0xbe5aad39UL, 0x20000000UL, 0x3fea09dfUL, 0x4b5253b3UL, 0x3e46380bUL,\n-    0x00000000UL, 0x3fe9fbd8UL, 0x8fc52466UL, 0xbe386f9bUL, 0x20000000UL,\n-    0x3fe9edd5UL, 0x22d3f344UL, 0xbe538347UL, 0x60000000UL, 0x3fe9dfd6UL,\n-    0x1ac33522UL, 0x3e5dbc53UL, 0x00000000UL, 0x3fe9d1dcUL, 0xeabdff1dUL,\n-    0x3e40fc0cUL, 0xe0000000UL, 0x3fe9c3e5UL, 0xafd30e73UL, 0xbe585e63UL,\n-    0xe0000000UL, 0x3fe9b5f3UL, 0xa52f226aUL, 0xbe43e8f9UL, 0x20000000UL,\n-    0x3fe9a806UL, 0xecb8698dUL, 0xbe515b36UL, 0x80000000UL, 0x3fe99a1cUL,\n-    0xf2b4e89dUL, 0x3e48b62bUL, 0x20000000UL, 0x3fe98c37UL, 0x7c9a88fbUL,\n-    0x3e44414cUL, 0x00000000UL, 0x3fe97e56UL, 0xda015741UL, 0xbe5d13baUL,\n-    0xe0000000UL, 0x3fe97078UL, 0x5fdace06UL, 0x3e51b947UL, 0x00000000UL,\n-    0x3fe962a0UL, 0x956ca094UL, 0x3e518785UL, 0x40000000UL, 0x3fe954cbUL,\n-    0x01164c1dUL, 0x3e5d5b57UL, 0xc0000000UL, 0x3fe946faUL, 0xe63b3767UL,\n-    0xbe4f84e7UL, 0x40000000UL, 0x3fe9392eUL, 0xe57cc2a9UL, 0x3e34eda3UL,\n-    0xe0000000UL, 0x3fe92b65UL, 0x8c75b544UL, 0x3e5766a0UL, 0xc0000000UL,\n-    0x3fe91da1UL, 0x37d1d087UL, 0xbe5e2ab1UL, 0x80000000UL, 0x3fe90fe1UL,\n-    0xa953dc20UL, 0x3e5fa1f3UL, 0x80000000UL, 0x3fe90225UL, 0xdbd3f369UL,\n-    0x3e47d6dbUL, 0xa0000000UL, 0x3fe8f46dUL, 0x1c9be989UL, 0xbe5e2b0aUL,\n-    0xa0000000UL, 0x3fe8e6b9UL, 0x3c93d76aUL, 0x3e5c8618UL, 0xe0000000UL,\n-    0x3fe8d909UL, 0x2182fc9aUL, 0xbe41aa9eUL, 0x20000000UL, 0x3fe8cb5eUL,\n-    0xe6b3539dUL, 0xbe530d19UL, 0x60000000UL, 0x3fe8bdb6UL, 0x49e58cc3UL,\n-    0xbe3bb374UL, 0xa0000000UL, 0x3fe8b012UL, 0xa7cfeb8fUL, 0x3e56c412UL,\n-    0x00000000UL, 0x3fe8a273UL, 0x8d52bc19UL, 0x3e1429b8UL, 0x60000000UL,\n-    0x3fe894d7UL, 0x4dc32c6cUL, 0xbe48604cUL, 0xc0000000UL, 0x3fe8873fUL,\n-    0x0c868e56UL, 0xbe564ee5UL, 0x00000000UL, 0x3fe879acUL, 0x56aee828UL,\n-    0x3e5e2fd8UL, 0x60000000UL, 0x3fe86c1cUL, 0x7ceab8ecUL, 0x3e493365UL,\n-    0xc0000000UL, 0x3fe85e90UL, 0x78d4dadcUL, 0xbe4f7f25UL, 0x00000000UL,\n-    0x3fe85109UL, 0x0ccd8280UL, 0x3e31e7a2UL, 0x40000000UL, 0x3fe84385UL,\n-    0x34ba4e15UL, 0x3e328077UL, 0x80000000UL, 0x3fe83605UL, 0xa670975aUL,\n-    0xbe53eee5UL, 0xa0000000UL, 0x3fe82889UL, 0xf61b77b2UL, 0xbe43a20aUL,\n-    0xa0000000UL, 0x3fe81b11UL, 0x13e6643bUL, 0x3e5e5fe5UL, 0xc0000000UL,\n-    0x3fe80d9dUL, 0x82cc94e8UL, 0xbe5ff1f9UL, 0xa0000000UL, 0x3fe8002dUL,\n-    0x8a0c9c5dUL, 0xbe42b0e7UL, 0x60000000UL, 0x3fe7f2c1UL, 0x22a16f01UL,\n-    0x3e5d9ea0UL, 0x20000000UL, 0x3fe7e559UL, 0xc38cd451UL, 0x3e506963UL,\n-    0xc0000000UL, 0x3fe7d7f4UL, 0x9902bc71UL, 0x3e4503d7UL, 0x40000000UL,\n-    0x3fe7ca94UL, 0xdef2a3c0UL, 0x3e3d98edUL, 0xa0000000UL, 0x3fe7bd37UL,\n-    0xed49abb0UL, 0x3e24c1ffUL, 0xe0000000UL, 0x3fe7afdeUL, 0xe3b0be70UL,\n-    0xbe40c467UL, 0x00000000UL, 0x3fe7a28aUL, 0xaf9f193cUL, 0xbe5dff6cUL,\n-    0xe0000000UL, 0x3fe79538UL, 0xb74cf6b6UL, 0xbe258ed0UL, 0xa0000000UL,\n-    0x3fe787ebUL, 0x1d9127c7UL, 0x3e345fb0UL, 0x40000000UL, 0x3fe77aa2UL,\n-    0x1028c21dUL, 0xbe4619bdUL, 0xa0000000UL, 0x3fe76d5cUL, 0x7cb0b5e4UL,\n-    0x3e40f1a2UL, 0xe0000000UL, 0x3fe7601aUL, 0x2b1bc4adUL, 0xbe32e8bbUL,\n-    0xe0000000UL, 0x3fe752dcUL, 0x6839f64eUL, 0x3e41f57bUL, 0xc0000000UL,\n-    0x3fe745a2UL, 0xc4121f7eUL, 0xbe52c40aUL, 0x60000000UL, 0x3fe7386cUL,\n-    0xd6852d72UL, 0xbe5c4e6bUL, 0xc0000000UL, 0x3fe72b39UL, 0x91d690f7UL,\n-    0xbe57f88fUL, 0xe0000000UL, 0x3fe71e0aUL, 0x627a2159UL, 0xbe4425d5UL,\n-    0xc0000000UL, 0x3fe710dfUL, 0x50a54033UL, 0x3e422b7eUL, 0x60000000UL,\n-    0x3fe703b8UL, 0x3b0b5f91UL, 0x3e5d3857UL, 0xe0000000UL, 0x3fe6f694UL,\n-    0x84d628a2UL, 0xbe51f090UL, 0x00000000UL, 0x3fe6e975UL, 0x306d8894UL,\n-    0xbe414d83UL, 0xe0000000UL, 0x3fe6dc58UL, 0x30bf24aaUL, 0xbe4650caUL,\n-    0x80000000UL, 0x3fe6cf40UL, 0xd4628d69UL, 0xbe5db007UL, 0xc0000000UL,\n-    0x3fe6c22bUL, 0xa2aae57bUL, 0xbe31d279UL, 0xc0000000UL, 0x3fe6b51aUL,\n-    0x860edf7eUL, 0xbe2d4c4aUL, 0x80000000UL, 0x3fe6a80dUL, 0xf3559341UL,\n-    0xbe5f7e98UL, 0xe0000000UL, 0x3fe69b03UL, 0xa885899eUL, 0xbe5c2011UL,\n-    0xe0000000UL, 0x3fe68dfdUL, 0x2bdc6d37UL, 0x3e224a82UL, 0xa0000000UL,\n-    0x3fe680fbUL, 0xc12ad1b9UL, 0xbe40cf56UL, 0x00000000UL, 0x3fe673fdUL,\n-    0x1bcdf659UL, 0xbdf52f2dUL, 0x00000000UL, 0x3fe66702UL, 0x5df10408UL,\n-    0x3e5663e0UL, 0xc0000000UL, 0x3fe65a0aUL, 0xa4070568UL, 0xbe40b12fUL,\n-    0x00000000UL, 0x3fe64d17UL, 0x71c54c47UL, 0x3e5f5e8bUL, 0x00000000UL,\n-    0x3fe64027UL, 0xbd4b7e83UL, 0x3e42ead6UL, 0xa0000000UL, 0x3fe6333aUL,\n-    0x61598bd2UL, 0xbe4c48d4UL, 0xc0000000UL, 0x3fe62651UL, 0x6f538d61UL,\n-    0x3e548401UL, 0xa0000000UL, 0x3fe6196cUL, 0x14344120UL, 0xbe529af6UL,\n-    0x00000000UL, 0x3fe60c8bUL, 0x5982c587UL, 0xbe3e1e4fUL, 0x00000000UL,\n-    0x3fe5ffadUL, 0xfe51d4eaUL, 0xbe4c897aUL, 0x80000000UL, 0x3fe5f2d2UL,\n-    0xfd46ebe1UL, 0x3e552e00UL, 0xa0000000UL, 0x3fe5e5fbUL, 0xa4695699UL,\n-    0x3e5ed471UL, 0x60000000UL, 0x3fe5d928UL, 0x80d118aeUL, 0x3e456b61UL,\n-    0xa0000000UL, 0x3fe5cc58UL, 0x304c330bUL, 0x3e54dc29UL, 0x80000000UL,\n-    0x3fe5bf8cUL, 0x0af2dedfUL, 0xbe3aa9bdUL, 0xe0000000UL, 0x3fe5b2c3UL,\n-    0x15fc9258UL, 0xbe479a37UL, 0xc0000000UL, 0x3fe5a5feUL, 0x9292c7eaUL,\n-    0x3e188650UL, 0x20000000UL, 0x3fe5993dUL, 0x33b4d380UL, 0x3e5d6d93UL,\n-    0x20000000UL, 0x3fe58c7fUL, 0x02fd16c7UL, 0x3e2fe961UL, 0xa0000000UL,\n-    0x3fe57fc4UL, 0x4a05edb6UL, 0xbe4d55b4UL, 0xa0000000UL, 0x3fe5730dUL,\n-    0x3d443abbUL, 0xbe5e6954UL, 0x00000000UL, 0x3fe5665aUL, 0x024acfeaUL,\n-    0x3e50e61bUL, 0x00000000UL, 0x3fe559aaUL, 0xcc9edd09UL, 0xbe325403UL,\n-    0x60000000UL, 0x3fe54cfdUL, 0x1fe26950UL, 0x3e5d500eUL, 0x60000000UL,\n-    0x3fe54054UL, 0x6c5ae164UL, 0xbe4a79b4UL, 0xc0000000UL, 0x3fe533aeUL,\n-    0x154b0287UL, 0xbe401571UL, 0xa0000000UL, 0x3fe5270cUL, 0x0673f401UL,\n-    0xbe56e56bUL, 0xe0000000UL, 0x3fe51a6dUL, 0x751b639cUL, 0x3e235269UL,\n-    0xa0000000UL, 0x3fe50dd2UL, 0x7c7b2bedUL, 0x3ddec887UL, 0xc0000000UL,\n-    0x3fe5013aUL, 0xafab4e17UL, 0x3e5e7575UL, 0x60000000UL, 0x3fe4f4a6UL,\n-    0x2e308668UL, 0x3e59aed6UL, 0x80000000UL, 0x3fe4e815UL, 0xf33e2a76UL,\n-    0xbe51f184UL, 0xe0000000UL, 0x3fe4db87UL, 0x839f3e3eUL, 0x3e57db01UL,\n-    0xc0000000UL, 0x3fe4cefdUL, 0xa9eda7bbUL, 0x3e535e0fUL, 0x00000000UL,\n-    0x3fe4c277UL, 0x2a8f66a5UL, 0x3e5ce451UL, 0xc0000000UL, 0x3fe4b5f3UL,\n-    0x05192456UL, 0xbe4e8518UL, 0xc0000000UL, 0x3fe4a973UL, 0x4aa7cd1dUL,\n-    0x3e46784aUL, 0x40000000UL, 0x3fe49cf7UL, 0x8e23025eUL, 0xbe5749f2UL,\n-    0x00000000UL, 0x3fe4907eUL, 0x18d30215UL, 0x3e360f39UL, 0x20000000UL,\n-    0x3fe48408UL, 0x63dcf2f3UL, 0x3e5e00feUL, 0xc0000000UL, 0x3fe47795UL,\n-    0x46182d09UL, 0xbe5173d9UL, 0xa0000000UL, 0x3fe46b26UL, 0x8f0e62aaUL,\n-    0xbe48f281UL, 0xe0000000UL, 0x3fe45ebaUL, 0x5775c40cUL, 0xbe56aad4UL,\n-    0x60000000UL, 0x3fe45252UL, 0x0fe25f69UL, 0x3e48bd71UL, 0x40000000UL,\n-    0x3fe445edUL, 0xe9989ec5UL, 0x3e590d97UL, 0x80000000UL, 0x3fe4398bUL,\n-    0xb3d9ffe3UL, 0x3e479dbcUL, 0x20000000UL, 0x3fe42d2dUL, 0x388e4d2eUL,\n-    0xbe5eed80UL, 0xe0000000UL, 0x3fe420d1UL, 0x6f797c18UL, 0x3e554b4cUL,\n-    0x20000000UL, 0x3fe4147aUL, 0x31048bb4UL, 0xbe5b1112UL, 0x80000000UL,\n-    0x3fe40825UL, 0x2efba4f9UL, 0x3e48ebc7UL, 0x40000000UL, 0x3fe3fbd4UL,\n-    0x50201119UL, 0x3e40b701UL, 0x40000000UL, 0x3fe3ef86UL, 0x0a4db32cUL,\n-    0x3e551de8UL, 0xa0000000UL, 0x3fe3e33bUL, 0x0c9c148bUL, 0xbe50c1f6UL,\n-    0x20000000UL, 0x3fe3d6f4UL, 0xc9129447UL, 0x3e533fa0UL, 0x00000000UL,\n-    0x3fe3cab0UL, 0xaae5b5a0UL, 0xbe22b68eUL, 0x20000000UL, 0x3fe3be6fUL,\n-    0x02305e8aUL, 0xbe54fc08UL, 0x60000000UL, 0x3fe3b231UL, 0x7f908258UL,\n-    0x3e57dc05UL, 0x00000000UL, 0x3fe3a5f7UL, 0x1a09af78UL, 0x3e08038bUL,\n-    0xe0000000UL, 0x3fe399bfUL, 0x490643c1UL, 0xbe5dbe42UL, 0xe0000000UL,\n-    0x3fe38d8bUL, 0x5e8ad724UL, 0xbe3c2b72UL, 0x20000000UL, 0x3fe3815bUL,\n-    0xc67196b6UL, 0x3e1713cfUL, 0xa0000000UL, 0x3fe3752dUL, 0x6182e429UL,\n-    0xbe3ec14cUL, 0x40000000UL, 0x3fe36903UL, 0xab6eb1aeUL, 0x3e5a2cc5UL,\n-    0x40000000UL, 0x3fe35cdcUL, 0xfe5dc064UL, 0xbe5c5878UL, 0x40000000UL,\n-    0x3fe350b8UL, 0x0ba6b9e4UL, 0x3e51619bUL, 0x80000000UL, 0x3fe34497UL,\n-    0x857761aaUL, 0x3e5fff53UL, 0x00000000UL, 0x3fe3387aUL, 0xf872d68cUL,\n-    0x3e484f4dUL, 0xa0000000UL, 0x3fe32c5fUL, 0x087e97c2UL, 0x3e52842eUL,\n-    0x80000000UL, 0x3fe32048UL, 0x73d6d0c0UL, 0xbe503edfUL, 0x80000000UL,\n-    0x3fe31434UL, 0x0c1456a1UL, 0xbe5f72adUL, 0xa0000000UL, 0x3fe30823UL,\n-    0x83a1a4d5UL, 0xbe5e65ccUL, 0xe0000000UL, 0x3fe2fc15UL, 0x855a7390UL,\n-    0xbe506438UL, 0x40000000UL, 0x3fe2f00bUL, 0xa2898287UL, 0x3e3d22a2UL,\n-    0xe0000000UL, 0x3fe2e403UL, 0x8b56f66fUL, 0xbe5aa5fdUL, 0x80000000UL,\n-    0x3fe2d7ffUL, 0x52db119aUL, 0x3e3a2e3dUL, 0x60000000UL, 0x3fe2cbfeUL,\n-    0xe2ddd4c0UL, 0xbe586469UL, 0x40000000UL, 0x3fe2c000UL, 0x6b01bf10UL,\n-    0x3e352b9dUL, 0x40000000UL, 0x3fe2b405UL, 0xb07a1cdfUL, 0x3e5c5cdaUL,\n-    0x80000000UL, 0x3fe2a80dUL, 0xc7b5f868UL, 0xbe5668b3UL, 0xc0000000UL,\n-    0x3fe29c18UL, 0x185edf62UL, 0xbe563d66UL, 0x00000000UL, 0x3fe29027UL,\n-    0xf729e1ccUL, 0x3e59a9a0UL, 0x80000000UL, 0x3fe28438UL, 0x6433c727UL,\n-    0xbe43cc89UL, 0x00000000UL, 0x3fe2784dUL, 0x41782631UL, 0xbe30750cUL,\n-    0xa0000000UL, 0x3fe26c64UL, 0x914911b7UL, 0xbe58290eUL, 0x40000000UL,\n-    0x3fe2607fUL, 0x3dcc73e1UL, 0xbe4269cdUL, 0x00000000UL, 0x3fe2549dUL,\n-    0x2751bf70UL, 0xbe5a6998UL, 0xc0000000UL, 0x3fe248bdUL, 0x4248b9fbUL,\n-    0xbe4ddb00UL, 0x80000000UL, 0x3fe23ce1UL, 0xf35cf82fUL, 0x3e561b71UL,\n-    0x60000000UL, 0x3fe23108UL, 0x8e481a2dUL, 0x3e518fb9UL, 0x60000000UL,\n-    0x3fe22532UL, 0x5ab96edcUL, 0xbe5fafc5UL, 0x40000000UL, 0x3fe2195fUL,\n-    0x80943911UL, 0xbe07f819UL, 0x40000000UL, 0x3fe20d8fUL, 0x386f2d6cUL,\n-    0xbe54ba8bUL, 0x40000000UL, 0x3fe201c2UL, 0xf29664acUL, 0xbe5eb815UL,\n-    0x20000000UL, 0x3fe1f5f8UL, 0x64f03390UL, 0x3e5e320cUL, 0x20000000UL,\n-    0x3fe1ea31UL, 0x747ff696UL, 0x3e5ef0a5UL, 0x40000000UL, 0x3fe1de6dUL,\n-    0x3e9ceb51UL, 0xbe5f8d27UL, 0x20000000UL, 0x3fe1d2acUL, 0x4ae0b55eUL,\n-    0x3e5faa21UL, 0x20000000UL, 0x3fe1c6eeUL, 0x28569a5eUL, 0x3e598a4fUL,\n-    0x20000000UL, 0x3fe1bb33UL, 0x54b33e07UL, 0x3e46130aUL, 0x20000000UL,\n-    0x3fe1af7bUL, 0x024f1078UL, 0xbe4dbf93UL, 0x00000000UL, 0x3fe1a3c6UL,\n-    0xb0783bfaUL, 0x3e419248UL, 0xe0000000UL, 0x3fe19813UL, 0x2f02b836UL,\n-    0x3e4e02b7UL, 0xc0000000UL, 0x3fe18c64UL, 0x28dec9d4UL, 0x3e09064fUL,\n-    0x80000000UL, 0x3fe180b8UL, 0x45cbf406UL, 0x3e5b1f46UL, 0x40000000UL,\n-    0x3fe1750fUL, 0x03d9964cUL, 0x3e5b0a79UL, 0x00000000UL, 0x3fe16969UL,\n-    0x8b5b882bUL, 0xbe238086UL, 0xa0000000UL, 0x3fe15dc5UL, 0x73bad6f8UL,\n-    0xbdf1fca4UL, 0x20000000UL, 0x3fe15225UL, 0x5385769cUL, 0x3e5e8d76UL,\n-    0xa0000000UL, 0x3fe14687UL, 0x1676dc6bUL, 0x3e571d08UL, 0x20000000UL,\n-    0x3fe13aedUL, 0xa8c41c7fUL, 0xbe598a25UL, 0x60000000UL, 0x3fe12f55UL,\n-    0xc4e1aaf0UL, 0x3e435277UL, 0xa0000000UL, 0x3fe123c0UL, 0x403638e1UL,\n-    0xbe21aa7cUL, 0xc0000000UL, 0x3fe1182eUL, 0x557a092bUL, 0xbdd0116bUL,\n-    0xc0000000UL, 0x3fe10c9fUL, 0x7d779f66UL, 0x3e4a61baUL, 0xc0000000UL,\n-    0x3fe10113UL, 0x2b09c645UL, 0xbe5d586eUL, 0x20000000UL, 0x3fe0ea04UL,\n-    0xea2cad46UL, 0x3e5aa97cUL, 0x20000000UL, 0x3fe0d300UL, 0x23190e54UL,\n-    0x3e50f1a7UL, 0xa0000000UL, 0x3fe0bc07UL, 0x1379a5a6UL, 0xbe51619dUL,\n-    0x60000000UL, 0x3fe0a51aUL, 0x926a3d4aUL, 0x3e5cf019UL, 0xa0000000UL,\n-    0x3fe08e38UL, 0xa8c24358UL, 0x3e35241eUL, 0x20000000UL, 0x3fe07762UL,\n-    0x24317e7aUL, 0x3e512cfaUL, 0x00000000UL, 0x3fe06097UL, 0xfd9cf274UL,\n-    0xbe55bef3UL, 0x00000000UL, 0x3fe049d7UL, 0x3689b49dUL, 0xbe36d26dUL,\n-    0x40000000UL, 0x3fe03322UL, 0xf72ef6c4UL, 0xbe54cd08UL, 0xa0000000UL,\n-    0x3fe01c78UL, 0x23702d2dUL, 0xbe5900bfUL, 0x00000000UL, 0x3fe005daUL,\n-    0x3f59c14cUL, 0x3e57d80bUL, 0x40000000UL, 0x3fdfde8dUL, 0xad67766dUL,\n-    0xbe57fad4UL, 0x40000000UL, 0x3fdfb17cUL, 0x644f4ae7UL, 0x3e1ee43bUL,\n-    0x40000000UL, 0x3fdf8481UL, 0x903234d2UL, 0x3e501a86UL, 0x40000000UL,\n-    0x3fdf579cUL, 0xafe9e509UL, 0xbe267c3eUL, 0x00000000UL, 0x3fdf2acdUL,\n-    0xb7dfda0bUL, 0xbe48149bUL, 0x40000000UL, 0x3fdefe13UL, 0x3b94305eUL,\n-    0x3e5f4ea7UL, 0x80000000UL, 0x3fded16fUL, 0x5d95da61UL, 0xbe55c198UL,\n-    0x00000000UL, 0x3fdea4e1UL, 0x406960c9UL, 0xbdd99a19UL, 0x00000000UL,\n-    0x3fde7868UL, 0xd22f3539UL, 0x3e470c78UL, 0x80000000UL, 0x3fde4c04UL,\n-    0x83eec535UL, 0xbe3e1232UL, 0x40000000UL, 0x3fde1fb6UL, 0x3dfbffcbUL,\n-    0xbe4b7d71UL, 0x40000000UL, 0x3fddf37dUL, 0x7e1be4e0UL, 0xbe5b8f8fUL,\n-    0x40000000UL, 0x3fddc759UL, 0x46dae887UL, 0xbe350458UL, 0x80000000UL,\n-    0x3fdd9b4aUL, 0xed6ecc49UL, 0xbe5f0045UL, 0x80000000UL, 0x3fdd6f50UL,\n-    0x2e9e883cUL, 0x3e2915daUL, 0x80000000UL, 0x3fdd436bUL, 0xf0bccb32UL,\n-    0x3e4a68c9UL, 0x80000000UL, 0x3fdd179bUL, 0x9bbfc779UL, 0xbe54a26aUL,\n-    0x00000000UL, 0x3fdcebe0UL, 0x7cea33abUL, 0x3e43c6b7UL, 0x40000000UL,\n-    0x3fdcc039UL, 0xe740fd06UL, 0x3e5526c2UL, 0x40000000UL, 0x3fdc94a7UL,\n-    0x9eadeb1aUL, 0xbe396d8dUL, 0xc0000000UL, 0x3fdc6929UL, 0xf0a8f95aUL,\n-    0xbe5c0ab2UL, 0x80000000UL, 0x3fdc3dc0UL, 0x6ee2693bUL, 0x3e0992e6UL,\n-    0xc0000000UL, 0x3fdc126bUL, 0x5ac6b581UL, 0xbe2834b6UL, 0x40000000UL,\n-    0x3fdbe72bUL, 0x8cc226ffUL, 0x3e3596a6UL, 0x00000000UL, 0x3fdbbbffUL,\n-    0xf92a74bbUL, 0x3e3c5813UL, 0x00000000UL, 0x3fdb90e7UL, 0x479664c0UL,\n-    0xbe50d644UL, 0x00000000UL, 0x3fdb65e3UL, 0x5004975bUL, 0xbe55258fUL,\n-    0x00000000UL, 0x3fdb3af3UL, 0xe4b23194UL, 0xbe588407UL, 0xc0000000UL,\n-    0x3fdb1016UL, 0xe65d4d0aUL, 0x3e527c26UL, 0x80000000UL, 0x3fdae54eUL,\n-    0x814fddd6UL, 0x3e5962a2UL, 0x40000000UL, 0x3fdaba9aUL, 0xe19d0913UL,\n-    0xbe562f4eUL, 0x80000000UL, 0x3fda8ff9UL, 0x43cfd006UL, 0xbe4cfdebUL,\n-    0x40000000UL, 0x3fda656cUL, 0x686f0a4eUL, 0x3e5e47a8UL, 0xc0000000UL,\n-    0x3fda3af2UL, 0x7200d410UL, 0x3e5e1199UL, 0xc0000000UL, 0x3fda108cUL,\n-    0xabd2266eUL, 0x3e5ee4d1UL, 0x40000000UL, 0x3fd9e63aUL, 0x396f8f2cUL,\n-    0x3e4dbffbUL, 0x00000000UL, 0x3fd9bbfbUL, 0xe32b25ddUL, 0x3e5c3a54UL,\n-    0x40000000UL, 0x3fd991cfUL, 0x431e4035UL, 0xbe457925UL, 0x80000000UL,\n-    0x3fd967b6UL, 0x7bed3dd3UL, 0x3e40c61dUL, 0x00000000UL, 0x3fd93db1UL,\n-    0xd7449365UL, 0x3e306419UL, 0x80000000UL, 0x3fd913beUL, 0x1746e791UL,\n-    0x3e56fcfcUL, 0x40000000UL, 0x3fd8e9dfUL, 0xf3a9028bUL, 0xbe5041b9UL,\n-    0xc0000000UL, 0x3fd8c012UL, 0x56840c50UL, 0xbe26e20aUL, 0x40000000UL,\n-    0x3fd89659UL, 0x19763102UL, 0xbe51f466UL, 0x80000000UL, 0x3fd86cb2UL,\n-    0x7032de7cUL, 0xbe4d298aUL, 0x80000000UL, 0x3fd8431eUL, 0xdeb39fabUL,\n-    0xbe4361ebUL, 0x40000000UL, 0x3fd8199dUL, 0x5d01cbe0UL, 0xbe5425b3UL,\n-    0x80000000UL, 0x3fd7f02eUL, 0x3ce99aa9UL, 0x3e146fa8UL, 0x80000000UL,\n-    0x3fd7c6d2UL, 0xd1a262b9UL, 0xbe5a1a69UL, 0xc0000000UL, 0x3fd79d88UL,\n-    0x8606c236UL, 0x3e423a08UL, 0x80000000UL, 0x3fd77451UL, 0x8fd1e1b7UL,\n-    0x3e5a6a63UL, 0xc0000000UL, 0x3fd74b2cUL, 0xe491456aUL, 0x3e42c1caUL,\n-    0x40000000UL, 0x3fd7221aUL, 0x4499a6d7UL, 0x3e36a69aUL, 0x00000000UL,\n-    0x3fd6f91aUL, 0x5237df94UL, 0xbe0f8f02UL, 0x00000000UL, 0x3fd6d02cUL,\n-    0xb6482c6eUL, 0xbe5abcf7UL, 0x00000000UL, 0x3fd6a750UL, 0x1919fd61UL,\n-    0xbe57ade2UL, 0x00000000UL, 0x3fd67e86UL, 0xaa7a994dUL, 0xbe3f3fbdUL,\n-    0x00000000UL, 0x3fd655ceUL, 0x67db014cUL, 0x3e33c550UL, 0x00000000UL,\n-    0x3fd62d28UL, 0xa82856b7UL, 0xbe1409d1UL, 0xc0000000UL, 0x3fd60493UL,\n-    0x1e6a300dUL, 0x3e55d899UL, 0x80000000UL, 0x3fd5dc11UL, 0x1222bd5cUL,\n-    0xbe35bfc0UL, 0xc0000000UL, 0x3fd5b3a0UL, 0x6e8dc2d3UL, 0x3e5d4d79UL,\n-    0x00000000UL, 0x3fd58b42UL, 0xe0e4ace6UL, 0xbe517303UL, 0x80000000UL,\n-    0x3fd562f4UL, 0xb306e0a8UL, 0x3e5edf0fUL, 0xc0000000UL, 0x3fd53ab8UL,\n-    0x6574bc54UL, 0x3e5ee859UL, 0x80000000UL, 0x3fd5128eUL, 0xea902207UL,\n-    0x3e5f6188UL, 0xc0000000UL, 0x3fd4ea75UL, 0x9f911d79UL, 0x3e511735UL,\n-    0x80000000UL, 0x3fd4c26eUL, 0xf9c77397UL, 0xbe5b1643UL, 0x40000000UL,\n-    0x3fd49a78UL, 0x15fc9258UL, 0x3e479a37UL, 0x80000000UL, 0x3fd47293UL,\n-    0xd5a04dd9UL, 0xbe426e56UL, 0xc0000000UL, 0x3fd44abfUL, 0xe04042f5UL,\n-    0x3e56f7c6UL, 0x40000000UL, 0x3fd422fdUL, 0x1d8bf2c8UL, 0x3e5d8810UL,\n-    0x00000000UL, 0x3fd3fb4cUL, 0x88a8ddeeUL, 0xbe311454UL, 0xc0000000UL,\n-    0x3fd3d3abUL, 0x3e3b5e47UL, 0xbe5d1b72UL, 0x40000000UL, 0x3fd3ac1cUL,\n-    0xc2ab5d59UL, 0x3e31b02bUL, 0xc0000000UL, 0x3fd3849dUL, 0xd4e34b9eUL,\n-    0x3e51cb2fUL, 0x40000000UL, 0x3fd35d30UL, 0x177204fbUL, 0xbe2b8cd7UL,\n-    0x80000000UL, 0x3fd335d3UL, 0xfcd38c82UL, 0xbe4356e1UL, 0x80000000UL,\n-    0x3fd30e87UL, 0x64f54accUL, 0xbe4e6224UL, 0x00000000UL, 0x3fd2e74cUL,\n-    0xaa7975d9UL, 0x3e5dc0feUL, 0x80000000UL, 0x3fd2c021UL, 0x516dab3fUL,\n-    0xbe50ffa3UL, 0x40000000UL, 0x3fd29907UL, 0x2bfb7313UL, 0x3e5674a2UL,\n-    0xc0000000UL, 0x3fd271fdUL, 0x0549fc99UL, 0x3e385d29UL, 0xc0000000UL,\n-    0x3fd24b04UL, 0x55b63073UL, 0xbe500c6dUL, 0x00000000UL, 0x3fd2241cUL,\n-    0x3f91953aUL, 0x3e389977UL, 0xc0000000UL, 0x3fd1fd43UL, 0xa1543f71UL,\n-    0xbe3487abUL, 0xc0000000UL, 0x3fd1d67bUL, 0x4ec8867cUL, 0x3df6a2dcUL,\n-    0x00000000UL, 0x3fd1afc4UL, 0x4328e3bbUL, 0x3e41d9c0UL, 0x80000000UL,\n-    0x3fd1891cUL, 0x2e1cda84UL, 0x3e3bdd87UL, 0x40000000UL, 0x3fd16285UL,\n-    0x4b5331aeUL, 0xbe53128eUL, 0x00000000UL, 0x3fd13bfeUL, 0xb9aec164UL,\n-    0xbe52ac98UL, 0xc0000000UL, 0x3fd11586UL, 0xd91e1316UL, 0xbe350630UL,\n-    0x80000000UL, 0x3fd0ef1fUL, 0x7cacc12cUL, 0x3e3f5219UL, 0x40000000UL,\n-    0x3fd0c8c8UL, 0xbce277b7UL, 0x3e3d30c0UL, 0x00000000UL, 0x3fd0a281UL,\n-    0x2a63447dUL, 0xbe541377UL, 0x80000000UL, 0x3fd07c49UL, 0xfac483b5UL,\n-    0xbe5772ecUL, 0xc0000000UL, 0x3fd05621UL, 0x36b8a570UL, 0xbe4fd4bdUL,\n-    0xc0000000UL, 0x3fd03009UL, 0xbae505f7UL, 0xbe450388UL, 0x80000000UL,\n-    0x3fd00a01UL, 0x3e35aeadUL, 0xbe5430fcUL, 0x80000000UL, 0x3fcfc811UL,\n-    0x707475acUL, 0x3e38806eUL, 0x80000000UL, 0x3fcf7c3fUL, 0xc91817fcUL,\n-    0xbe40cceaUL, 0x80000000UL, 0x3fcf308cUL, 0xae05d5e9UL, 0xbe4919b8UL,\n-    0x80000000UL, 0x3fcee4f8UL, 0xae6cc9e6UL, 0xbe530b94UL, 0x00000000UL,\n-    0x3fce9983UL, 0x1efe3e8eUL, 0x3e57747eUL, 0x00000000UL, 0x3fce4e2dUL,\n-    0xda78d9bfUL, 0xbe59a608UL, 0x00000000UL, 0x3fce02f5UL, 0x8abe2c2eUL,\n-    0x3e4a35adUL, 0x00000000UL, 0x3fcdb7dcUL, 0x1495450dUL, 0xbe0872ccUL,\n-    0x80000000UL, 0x3fcd6ce1UL, 0x86ee0ba0UL, 0xbe4f59a0UL, 0x00000000UL,\n-    0x3fcd2205UL, 0xe81ca888UL, 0x3e5402c3UL, 0x00000000UL, 0x3fccd747UL,\n-    0x3b4424b9UL, 0x3e5dfdc3UL, 0x80000000UL, 0x3fcc8ca7UL, 0xd305b56cUL,\n-    0x3e202da6UL, 0x00000000UL, 0x3fcc4226UL, 0x399a6910UL, 0xbe482a1cUL,\n-    0x80000000UL, 0x3fcbf7c2UL, 0x747f7938UL, 0xbe587372UL, 0x80000000UL,\n-    0x3fcbad7cUL, 0x6fc246a0UL, 0x3e50d83dUL, 0x00000000UL, 0x3fcb6355UL,\n-    0xee9e9be5UL, 0xbe5c35bdUL, 0x80000000UL, 0x3fcb194aUL, 0x8416c0bcUL,\n-    0x3e546d4fUL, 0x00000000UL, 0x3fcacf5eUL, 0x49f7f08fUL, 0x3e56da76UL,\n-    0x00000000UL, 0x3fca858fUL, 0x5dc30de2UL, 0x3e5f390cUL, 0x00000000UL,\n-    0x3fca3bdeUL, 0x950583b6UL, 0xbe5e4169UL, 0x80000000UL, 0x3fc9f249UL,\n-    0x33631553UL, 0x3e52aeb1UL, 0x00000000UL, 0x3fc9a8d3UL, 0xde8795a6UL,\n-    0xbe59a504UL, 0x00000000UL, 0x3fc95f79UL, 0x076bf41eUL, 0x3e5122feUL,\n-    0x80000000UL, 0x3fc9163cUL, 0x2914c8e7UL, 0x3e3dd064UL, 0x00000000UL,\n-    0x3fc8cd1dUL, 0x3a30eca3UL, 0xbe21b4aaUL, 0x80000000UL, 0x3fc8841aUL,\n-    0xb2a96650UL, 0xbe575444UL, 0x80000000UL, 0x3fc83b34UL, 0x2376c0cbUL,\n-    0xbe2a74c7UL, 0x80000000UL, 0x3fc7f26bUL, 0xd8a0b653UL, 0xbe5181b6UL,\n-    0x00000000UL, 0x3fc7a9bfUL, 0x32257882UL, 0xbe4a78b4UL, 0x00000000UL,\n-    0x3fc7612fUL, 0x1eee8bd9UL, 0xbe1bfe9dUL, 0x80000000UL, 0x3fc718bbUL,\n-    0x0c603cc4UL, 0x3e36fdc9UL, 0x80000000UL, 0x3fc6d064UL, 0x3728b8cfUL,\n-    0xbe1e542eUL, 0x80000000UL, 0x3fc68829UL, 0xc79a4067UL, 0x3e5c380fUL,\n-    0x00000000UL, 0x3fc6400bUL, 0xf69eac69UL, 0x3e550a84UL, 0x80000000UL,\n-    0x3fc5f808UL, 0xb7a780a4UL, 0x3e5d9224UL, 0x80000000UL, 0x3fc5b022UL,\n-    0xad9dfb1eUL, 0xbe55242fUL, 0x00000000UL, 0x3fc56858UL, 0x659b18beUL,\n-    0xbe4bfda3UL, 0x80000000UL, 0x3fc520a9UL, 0x66ee3631UL, 0xbe57d769UL,\n-    0x80000000UL, 0x3fc4d916UL, 0x1ec62819UL, 0x3e2427f7UL, 0x80000000UL,\n-    0x3fc4919fUL, 0xdec25369UL, 0xbe435431UL, 0x00000000UL, 0x3fc44a44UL,\n-    0xa8acfc4bUL, 0xbe3c62e8UL, 0x00000000UL, 0x3fc40304UL, 0xcf1d3eabUL,\n-    0xbdfba29fUL, 0x80000000UL, 0x3fc3bbdfUL, 0x79aba3eaUL, 0xbdf1b7c8UL,\n-    0x80000000UL, 0x3fc374d6UL, 0xb8d186daUL, 0xbe5130cfUL, 0x80000000UL,\n-    0x3fc32de8UL, 0x9d74f152UL, 0x3e2285b6UL, 0x00000000UL, 0x3fc2e716UL,\n-    0x50ae7ca9UL, 0xbe503920UL, 0x80000000UL, 0x3fc2a05eUL, 0x6caed92eUL,\n-    0xbe533924UL, 0x00000000UL, 0x3fc259c2UL, 0x9cb5034eUL, 0xbe510e31UL,\n-    0x80000000UL, 0x3fc21340UL, 0x12c4d378UL, 0xbe540b43UL, 0x80000000UL,\n-    0x3fc1ccd9UL, 0xcc418706UL, 0x3e59887aUL, 0x00000000UL, 0x3fc1868eUL,\n-    0x921f4106UL, 0xbe528e67UL, 0x80000000UL, 0x3fc1405cUL, 0x3969441eUL,\n-    0x3e5d8051UL, 0x00000000UL, 0x3fc0fa46UL, 0xd941ef5bUL, 0x3e5f9079UL,\n-    0x80000000UL, 0x3fc0b44aUL, 0x5a3e81b2UL, 0xbe567691UL, 0x00000000UL,\n-    0x3fc06e69UL, 0x9d66afe7UL, 0xbe4d43fbUL, 0x00000000UL, 0x3fc028a2UL,\n-    0x0a92a162UL, 0xbe52f394UL, 0x00000000UL, 0x3fbfc5eaUL, 0x209897e5UL,\n-    0x3e529e37UL, 0x00000000UL, 0x3fbf3ac5UL, 0x8458bd7bUL, 0x3e582831UL,\n-    0x00000000UL, 0x3fbeafd5UL, 0xb8d8b4b8UL, 0xbe486b4aUL, 0x00000000UL,\n-    0x3fbe2518UL, 0xe0a3b7b6UL, 0x3e5bafd2UL, 0x00000000UL, 0x3fbd9a90UL,\n-    0x2bf2710eUL, 0x3e383b2bUL, 0x00000000UL, 0x3fbd103cUL, 0x73eb6ab7UL,\n-    0xbe56d78dUL, 0x00000000UL, 0x3fbc861bUL, 0x32ceaff5UL, 0xbe32dc5aUL,\n-    0x00000000UL, 0x3fbbfc2eUL, 0xbee04cb7UL, 0xbe4a71a4UL, 0x00000000UL,\n-    0x3fbb7274UL, 0x35ae9577UL, 0x3e38142fUL, 0x00000000UL, 0x3fbae8eeUL,\n-    0xcbaddab4UL, 0xbe5490f0UL, 0x00000000UL, 0x3fba5f9aUL, 0x95ce1114UL,\n-    0x3e597c71UL, 0x00000000UL, 0x3fb9d67aUL, 0x6d7c0f78UL, 0x3e3abc2dUL,\n-    0x00000000UL, 0x3fb94d8dUL, 0x2841a782UL, 0xbe566cbcUL, 0x00000000UL,\n-    0x3fb8c4d2UL, 0x6ed429c6UL, 0xbe3cfff9UL, 0x00000000UL, 0x3fb83c4aUL,\n-    0xe4a49fbbUL, 0xbe552964UL, 0x00000000UL, 0x3fb7b3f4UL, 0x2193d81eUL,\n-    0xbe42fa72UL, 0x00000000UL, 0x3fb72bd0UL, 0xdd70c122UL, 0x3e527a8cUL,\n-    0x00000000UL, 0x3fb6a3dfUL, 0x03108a54UL, 0xbe450393UL, 0x00000000UL,\n-    0x3fb61c1fUL, 0x30ff7954UL, 0x3e565840UL, 0x00000000UL, 0x3fb59492UL,\n-    0xdedd460cUL, 0xbe5422b5UL, 0x00000000UL, 0x3fb50d36UL, 0x950f9f45UL,\n-    0xbe5313f6UL, 0x00000000UL, 0x3fb4860bUL, 0x582cdcb1UL, 0x3e506d39UL,\n-    0x00000000UL, 0x3fb3ff12UL, 0x7216d3a6UL, 0x3e4aa719UL, 0x00000000UL,\n-    0x3fb3784aUL, 0x57a423fdUL, 0x3e5a9b9fUL, 0x00000000UL, 0x3fb2f1b4UL,\n-    0x7a138b41UL, 0xbe50b418UL, 0x00000000UL, 0x3fb26b4eUL, 0x2fbfd7eaUL,\n-    0x3e23a53eUL, 0x00000000UL, 0x3fb1e519UL, 0x18913ccbUL, 0x3e465fc1UL,\n-    0x00000000UL, 0x3fb15f15UL, 0x7ea24e21UL, 0x3e042843UL, 0x00000000UL,\n-    0x3fb0d941UL, 0x7c6d9c77UL, 0x3e59f61eUL, 0x00000000UL, 0x3fb0539eUL,\n-    0x114efd44UL, 0x3e4ccab7UL, 0x00000000UL, 0x3faf9c56UL, 0x1777f657UL,\n-    0x3e552f65UL, 0x00000000UL, 0x3fae91d2UL, 0xc317b86aUL, 0xbe5a61e0UL,\n-    0x00000000UL, 0x3fad87acUL, 0xb7664efbUL, 0xbe41f64eUL, 0x00000000UL,\n-    0x3fac7de6UL, 0x5d3d03a9UL, 0x3e0807a0UL, 0x00000000UL, 0x3fab7480UL,\n-    0x743c38ebUL, 0xbe3726e1UL, 0x00000000UL, 0x3faa6b78UL, 0x06a253f1UL,\n-    0x3e5ad636UL, 0x00000000UL, 0x3fa962d0UL, 0xa35f541bUL, 0x3e5a187aUL,\n-    0x00000000UL, 0x3fa85a88UL, 0x4b86e446UL, 0xbe508150UL, 0x00000000UL,\n-    0x3fa7529cUL, 0x2589cacfUL, 0x3e52938aUL, 0x00000000UL, 0x3fa64b10UL,\n-    0xaf6b11f2UL, 0xbe3454cdUL, 0x00000000UL, 0x3fa543e2UL, 0x97506fefUL,\n-    0xbe5fdec5UL, 0x00000000UL, 0x3fa43d10UL, 0xe75f7dd9UL, 0xbe388dd3UL,\n-    0x00000000UL, 0x3fa3369cUL, 0xa4139632UL, 0xbdea5177UL, 0x00000000UL,\n-    0x3fa23086UL, 0x352d6f1eUL, 0xbe565ad6UL, 0x00000000UL, 0x3fa12accUL,\n-    0x77449eb7UL, 0xbe50d5c7UL, 0x00000000UL, 0x3fa0256eUL, 0x7478da78UL,\n-    0x3e404724UL, 0x00000000UL, 0x3f9e40dcUL, 0xf59cef7fUL, 0xbe539d0aUL,\n-    0x00000000UL, 0x3f9c3790UL, 0x1511d43cUL, 0x3e53c2c8UL, 0x00000000UL,\n-    0x3f9a2f00UL, 0x9b8bff3cUL, 0xbe43b3e1UL, 0x00000000UL, 0x3f982724UL,\n-    0xad1e22a5UL, 0x3e46f0bdUL, 0x00000000UL, 0x3f962000UL, 0x130d9356UL,\n-    0x3e475ba0UL, 0x00000000UL, 0x3f941994UL, 0x8f86f883UL, 0xbe513d0bUL,\n-    0x00000000UL, 0x3f9213dcUL, 0x914d0dc8UL, 0xbe534335UL, 0x00000000UL,\n-    0x3f900ed8UL, 0x2d73e5e7UL, 0xbe22ba75UL, 0x00000000UL, 0x3f8c1510UL,\n-    0xc5b7d70eUL, 0x3e599c5dUL, 0x00000000UL, 0x3f880de0UL, 0x8a27857eUL,\n-    0xbe3d28c8UL, 0x00000000UL, 0x3f840810UL, 0xda767328UL, 0x3e531b3dUL,\n-    0x00000000UL, 0x3f8003b0UL, 0x77bacaf3UL, 0xbe5f04e3UL, 0x00000000UL,\n-    0x3f780150UL, 0xdf4b0720UL, 0x3e5a8bffUL, 0x00000000UL, 0x3f6ffc40UL,\n-    0x34c48e71UL, 0xbe3fcd99UL, 0x00000000UL, 0x3f5ff6c0UL, 0x1ad218afUL,\n-    0xbe4c78a7UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x80000000UL,\n-    0x00000000UL, 0xfffff800UL, 0x00000000UL, 0xfffff800UL, 0x00000000UL,\n-    0x3ff72000UL, 0x161bb241UL, 0xbf5dabe1UL, 0x6dc96112UL, 0xbf836578UL,\n-    0xee241472UL, 0xbf9b0301UL, 0x9f95985aUL, 0xbfb528dbUL, 0xb3841d2aUL,\n-    0xbfd619b6UL, 0x518775e3UL, 0x3f9004f2UL, 0xac8349bbUL, 0x3fa76c9bUL,\n-    0x486ececcUL, 0x3fc4635eUL, 0x161bb241UL, 0xbf5dabe1UL, 0x9f95985aUL,\n-    0xbfb528dbUL, 0xf8b5787dUL, 0x3ef2531eUL, 0x486ececbUL, 0x3fc4635eUL,\n-    0x412055ccUL, 0xbdd61bb2UL, 0x00000000UL, 0xfffffff8UL, 0x00000000UL,\n-    0xffffffffUL, 0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0x3b700000UL,\n-    0xfa5abcbfUL, 0x3ff00b1aUL, 0xa7609f71UL, 0xbc84f6b2UL, 0xa9fb3335UL,\n-    0x3ff0163dUL, 0x9ab8cdb7UL, 0x3c9b6129UL, 0x143b0281UL, 0x3ff02168UL,\n-    0x0fc54eb6UL, 0xbc82bf31UL, 0x3e778061UL, 0x3ff02c9aUL, 0x535b085dUL,\n-    0xbc719083UL, 0x2e11bbccUL, 0x3ff037d4UL, 0xeeade11aUL, 0x3c656811UL,\n-    0xe86e7f85UL, 0x3ff04315UL, 0x1977c96eUL, 0xbc90a31cUL, 0x72f654b1UL,\n-    0x3ff04e5fUL, 0x3aa0d08cUL, 0x3c84c379UL, 0xd3158574UL, 0x3ff059b0UL,\n-    0xa475b465UL, 0x3c8d73e2UL, 0x0e3c1f89UL, 0x3ff0650aUL, 0x5799c397UL,\n-    0xbc95cb7bUL, 0x29ddf6deUL, 0x3ff0706bUL, 0xe2b13c27UL, 0xbc8c91dfUL,\n-    0x2b72a836UL, 0x3ff07bd4UL, 0x54458700UL, 0x3c832334UL, 0x18759bc8UL,\n-    0x3ff08745UL, 0x4bb284ffUL, 0x3c6186beUL, 0xf66607e0UL, 0x3ff092bdUL,\n-    0x800a3fd1UL, 0xbc968063UL, 0xcac6f383UL, 0x3ff09e3eUL, 0x18316136UL,\n-    0x3c914878UL, 0x9b1f3919UL, 0x3ff0a9c7UL, 0x873d1d38UL, 0x3c85d16cUL,\n-    0x6cf9890fUL, 0x3ff0b558UL, 0x4adc610bUL, 0x3c98a62eUL, 0x45e46c85UL,\n-    0x3ff0c0f1UL, 0x06d21cefUL, 0x3c94f989UL, 0x2b7247f7UL, 0x3ff0cc92UL,\n-    0x16e24f71UL, 0x3c901edcUL, 0x23395decUL, 0x3ff0d83bUL, 0xe43f316aUL,\n-    0xbc9bc14dUL, 0x32d3d1a2UL, 0x3ff0e3ecUL, 0x27c57b52UL, 0x3c403a17UL,\n-    0x5fdfa9c5UL, 0x3ff0efa5UL, 0xbc54021bUL, 0xbc949db9UL, 0xaffed31bUL,\n-    0x3ff0fb66UL, 0xc44ebd7bUL, 0xbc6b9bedUL, 0x28d7233eUL, 0x3ff10730UL,\n-    0x1692fdd5UL, 0x3c8d46ebUL, 0xd0125b51UL, 0x3ff11301UL, 0x39449b3aUL,\n-    0xbc96c510UL, 0xab5e2ab6UL, 0x3ff11edbUL, 0xf703fb72UL, 0xbc9ca454UL,\n-    0xc06c31ccUL, 0x3ff12abdUL, 0xb36ca5c7UL, 0xbc51b514UL, 0x14f204abUL,\n-    0x3ff136a8UL, 0xba48dcf0UL, 0xbc67108fUL, 0xaea92de0UL, 0x3ff1429aUL,\n-    0x9af1369eUL, 0xbc932fbfUL, 0x934f312eUL, 0x3ff14e95UL, 0x39bf44abUL,\n-    0xbc8b91e8UL, 0xc8a58e51UL, 0x3ff15a98UL, 0xb9eeab0aUL, 0x3c82406aUL,\n-    0x5471c3c2UL, 0x3ff166a4UL, 0x82ea1a32UL, 0x3c58f23bUL, 0x3c7d517bUL,\n-    0x3ff172b8UL, 0xb9d78a76UL, 0xbc819041UL, 0x8695bbc0UL, 0x3ff17ed4UL,\n-    0xe2ac5a64UL, 0x3c709e3fUL, 0x388c8deaUL, 0x3ff18af9UL, 0xd1970f6cUL,\n-    0xbc911023UL, 0x58375d2fUL, 0x3ff19726UL, 0x85f17e08UL, 0x3c94aaddUL,\n-    0xeb6fcb75UL, 0x3ff1a35bUL, 0x7b4968e4UL, 0x3c8e5b4cUL, 0xf8138a1cUL,\n-    0x3ff1af99UL, 0xa4b69280UL, 0x3c97bf85UL, 0x84045cd4UL, 0x3ff1bbe0UL,\n-    0x352ef607UL, 0xbc995386UL, 0x95281c6bUL, 0x3ff1c82fUL, 0x8010f8c9UL,\n-    0x3c900977UL, 0x3168b9aaUL, 0x3ff1d487UL, 0x00a2643cUL, 0x3c9e016eUL,\n-    0x5eb44027UL, 0x3ff1e0e7UL, 0x088cb6deUL, 0xbc96fdd8UL, 0x22fcd91dUL,\n-    0x3ff1ed50UL, 0x027bb78cUL, 0xbc91df98UL, 0x8438ce4dUL, 0x3ff1f9c1UL,\n-    0xa097af5cUL, 0xbc9bf524UL, 0x88628cd6UL, 0x3ff2063bUL, 0x814a8495UL,\n-    0x3c8dc775UL, 0x3578a819UL, 0x3ff212beUL, 0x2cfcaac9UL, 0x3c93592dUL,\n-    0x917ddc96UL, 0x3ff21f49UL, 0x9494a5eeUL, 0x3c82a97eUL, 0xa27912d1UL,\n-    0x3ff22bddUL, 0x5577d69fUL, 0x3c8d34fbUL, 0x6e756238UL, 0x3ff2387aUL,\n-    0xb6c70573UL, 0x3c99b07eUL, 0xfb82140aUL, 0x3ff2451fUL, 0x911ca996UL,\n-    0x3c8acfccUL, 0x4fb2a63fUL, 0x3ff251ceUL, 0xbef4f4a4UL, 0x3c8ac155UL,\n-    0x711ece75UL, 0x3ff25e85UL, 0x4ac31b2cUL, 0x3c93e1a2UL, 0x65e27cddUL,\n-    0x3ff26b45UL, 0x9940e9d9UL, 0x3c82bd33UL, 0x341ddf29UL, 0x3ff2780eUL,\n-    0x05f9e76cUL, 0x3c9e067cUL, 0xe1f56381UL, 0x3ff284dfUL, 0x8c3f0d7eUL,\n-    0xbc9a4c3aUL, 0x7591bb70UL, 0x3ff291baUL, 0x28401cbdUL, 0xbc82cc72UL,\n-    0xf51fdee1UL, 0x3ff29e9dUL, 0xafad1255UL, 0x3c8612e8UL, 0x66d10f13UL,\n-    0x3ff2ab8aUL, 0x191690a7UL, 0xbc995743UL, 0xd0dad990UL, 0x3ff2b87fUL,\n-    0xd6381aa4UL, 0xbc410adcUL, 0x39771b2fUL, 0x3ff2c57eUL, 0xa6eb5124UL,\n-    0xbc950145UL, 0xa6e4030bUL, 0x3ff2d285UL, 0x54db41d5UL, 0x3c900247UL,\n-    0x1f641589UL, 0x3ff2df96UL, 0xfbbce198UL, 0x3c9d16cfUL, 0xa93e2f56UL,\n-    0x3ff2ecafUL, 0x45d52383UL, 0x3c71ca0fUL, 0x4abd886bUL, 0x3ff2f9d2UL,\n-    0x532bda93UL, 0xbc653c55UL, 0x0a31b715UL, 0x3ff306feUL, 0xd23182e4UL,\n-    0x3c86f46aUL, 0xedeeb2fdUL, 0x3ff31432UL, 0xf3f3fcd1UL, 0x3c8959a3UL,\n-    0xfc4cd831UL, 0x3ff32170UL, 0x8e18047cUL, 0x3c8a9ce7UL, 0x3ba8ea32UL,\n-    0x3ff32eb8UL, 0x3cb4f318UL, 0xbc9c45e8UL, 0xb26416ffUL, 0x3ff33c08UL,\n-    0x843659a6UL, 0x3c932721UL, 0x66e3fa2dUL, 0x3ff34962UL, 0x930881a4UL,\n-    0xbc835a75UL, 0x5f929ff1UL, 0x3ff356c5UL, 0x5c4e4628UL, 0xbc8b5ceeUL,\n-    0xa2de883bUL, 0x3ff36431UL, 0xa06cb85eUL, 0xbc8c3144UL, 0x373aa9cbUL,\n-    0x3ff371a7UL, 0xbf42eae2UL, 0xbc963aeaUL, 0x231e754aUL, 0x3ff37f26UL,\n-    0x9eceb23cUL, 0xbc99f5caUL, 0x6d05d866UL, 0x3ff38caeUL, 0x3c9904bdUL,\n-    0xbc9e958dUL, 0x1b7140efUL, 0x3ff39a40UL, 0xfc8e2934UL, 0xbc99a9a5UL,\n-    0x34e59ff7UL, 0x3ff3a7dbUL, 0xd661f5e3UL, 0xbc75e436UL, 0xbfec6cf4UL,\n-    0x3ff3b57fUL, 0xe26fff18UL, 0x3c954c66UL, 0xc313a8e5UL, 0x3ff3c32dUL,\n-    0x375d29c3UL, 0xbc9efff8UL, 0x44ede173UL, 0x3ff3d0e5UL, 0x8c284c71UL,\n-    0x3c7fe8d0UL, 0x4c123422UL, 0x3ff3dea6UL, 0x11f09ebcUL, 0x3c8ada09UL,\n-    0xdf1c5175UL, 0x3ff3ec70UL, 0x7b8c9bcaUL, 0xbc8af663UL, 0x04ac801cUL,\n-    0x3ff3fa45UL, 0xf956f9f3UL, 0xbc97d023UL, 0xc367a024UL, 0x3ff40822UL,\n-    0xb6f4d048UL, 0x3c8bddf8UL, 0x21f72e2aUL, 0x3ff4160aUL, 0x1c309278UL,\n-    0xbc5ef369UL, 0x2709468aUL, 0x3ff423fbUL, 0xc0b314ddUL, 0xbc98462dUL,\n-    0xd950a897UL, 0x3ff431f5UL, 0xe35f7999UL, 0xbc81c7ddUL, 0x3f84b9d4UL,\n-    0x3ff43ffaUL, 0x9704c003UL, 0x3c8880beUL, 0x6061892dUL, 0x3ff44e08UL,\n-    0x04ef80d0UL, 0x3c489b7aUL, 0x42a7d232UL, 0x3ff45c20UL, 0x82fb1f8eUL,\n-    0xbc686419UL, 0xed1d0057UL, 0x3ff46a41UL, 0xd1648a76UL, 0x3c9c944bUL,\n-    0x668b3237UL, 0x3ff4786dUL, 0xed445733UL, 0xbc9c20f0UL, 0xb5c13cd0UL,\n-    0x3ff486a2UL, 0xb69062f0UL, 0x3c73c1a3UL, 0xe192aed2UL, 0x3ff494e1UL,\n-    0x5e499ea0UL, 0xbc83b289UL, 0xf0d7d3deUL, 0x3ff4a32aUL, 0xf3d1be56UL,\n-    0x3c99cb62UL, 0xea6db7d7UL, 0x3ff4b17dUL, 0x7f2897f0UL, 0xbc8125b8UL,\n-    0xd5362a27UL, 0x3ff4bfdaUL, 0xafec42e2UL, 0x3c7d4397UL, 0xb817c114UL,\n-    0x3ff4ce41UL, 0x690abd5dUL, 0x3c905e29UL, 0x99fddd0dUL, 0x3ff4dcb2UL,\n-    0xbc6a7833UL, 0x3c98ecdbUL, 0x81d8abffUL, 0x3ff4eb2dUL, 0x2e5d7a52UL,\n-    0xbc95257dUL, 0x769d2ca7UL, 0x3ff4f9b2UL, 0xd25957e3UL, 0xbc94b309UL,\n-    0x7f4531eeUL, 0x3ff50841UL, 0x49b7465fUL, 0x3c7a249bUL, 0xa2cf6642UL,\n-    0x3ff516daUL, 0x69bd93efUL, 0xbc8f7685UL, 0xe83f4eefUL, 0x3ff5257dUL,\n-    0x43efef71UL, 0xbc7c998dUL, 0x569d4f82UL, 0x3ff5342bUL, 0x1db13cadUL,\n-    0xbc807abeUL, 0xf4f6ad27UL, 0x3ff542e2UL, 0x192d5f7eUL, 0x3c87926dUL,\n-    0xca5d920fUL, 0x3ff551a4UL, 0xefede59bUL, 0xbc8d689cUL, 0xdde910d2UL,\n-    0x3ff56070UL, 0x168eebf0UL, 0xbc90fb6eUL, 0x36b527daUL, 0x3ff56f47UL,\n-    0x011d93adUL, 0x3c99bb2cUL, 0xdbe2c4cfUL, 0x3ff57e27UL, 0x8a57b9c4UL,\n-    0xbc90b98cUL, 0xd497c7fdUL, 0x3ff58d12UL, 0x5b9a1de8UL, 0x3c8295e1UL,\n-    0x27ff07ccUL, 0x3ff59c08UL, 0xe467e60fUL, 0xbc97e2ceUL, 0xdd485429UL,\n-    0x3ff5ab07UL, 0x054647adUL, 0x3c96324cUL, 0xfba87a03UL, 0x3ff5ba11UL,\n-    0x4c233e1aUL, 0xbc9b77a1UL, 0x8a5946b7UL, 0x3ff5c926UL, 0x816986a2UL,\n-    0x3c3c4b1bUL, 0x90998b93UL, 0x3ff5d845UL, 0xa8b45643UL, 0xbc9cd6a7UL,\n-    0x15ad2148UL, 0x3ff5e76fUL, 0x3080e65eUL, 0x3c9ba6f9UL, 0x20dceb71UL,\n-    0x3ff5f6a3UL, 0xe3cdcf92UL, 0xbc89eaddUL, 0xb976dc09UL, 0x3ff605e1UL,\n-    0x9b56de47UL, 0xbc93e242UL, 0xe6cdf6f4UL, 0x3ff6152aUL, 0x4ab84c27UL,\n-    0x3c9e4b3eUL, 0xb03a5585UL, 0x3ff6247eUL, 0x7e40b497UL, 0xbc9383c1UL,\n-    0x1d1929fdUL, 0x3ff633ddUL, 0xbeb964e5UL, 0x3c984710UL, 0x34ccc320UL,\n-    0x3ff64346UL, 0x759d8933UL, 0xbc8c483cUL, 0xfebc8fb7UL, 0x3ff652b9UL,\n-    0xc9a73e09UL, 0xbc9ae3d5UL, 0x82552225UL, 0x3ff66238UL, 0x87591c34UL,\n-    0xbc9bb609UL, 0xc70833f6UL, 0x3ff671c1UL, 0x586c6134UL, 0xbc8e8732UL,\n-    0xd44ca973UL, 0x3ff68155UL, 0x44f73e65UL, 0x3c6038aeUL, 0xb19e9538UL,\n-    0x3ff690f4UL, 0x9aeb445dUL, 0x3c8804bdUL, 0x667f3bcdUL, 0x3ff6a09eUL,\n-    0x13b26456UL, 0xbc9bdd34UL, 0xfa75173eUL, 0x3ff6b052UL, 0x2c9a9d0eUL,\n-    0x3c7a38f5UL, 0x750bdabfUL, 0x3ff6c012UL, 0x67ff0b0dUL, 0xbc728956UL,\n-    0xddd47645UL, 0x3ff6cfdcUL, 0xb6f17309UL, 0x3c9c7aa9UL, 0x3c651a2fUL,\n-    0x3ff6dfb2UL, 0x683c88abUL, 0xbc6bbe3aUL, 0x98593ae5UL, 0x3ff6ef92UL,\n-    0x9e1ac8b2UL, 0xbc90b974UL, 0xf9519484UL, 0x3ff6ff7dUL, 0x25860ef6UL,\n-    0xbc883c0fUL, 0x66f42e87UL, 0x3ff70f74UL, 0xd45aa65fUL, 0x3c59d644UL,\n-    0xe8ec5f74UL, 0x3ff71f75UL, 0x86887a99UL, 0xbc816e47UL, 0x86ead08aUL,\n-    0x3ff72f82UL, 0x2cd62c72UL, 0xbc920aa0UL, 0x48a58174UL, 0x3ff73f9aUL,\n-    0x6c65d53cUL, 0xbc90a8d9UL, 0x35d7cbfdUL, 0x3ff74fbdUL, 0x618a6e1cUL,\n-    0x3c9047fdUL, 0x564267c9UL, 0x3ff75febUL, 0x57316dd3UL, 0xbc902459UL,\n-    0xb1ab6e09UL, 0x3ff77024UL, 0x169147f8UL, 0x3c9b7877UL, 0x4fde5d3fUL,\n-    0x3ff78069UL, 0x0a02162dUL, 0x3c9866b8UL, 0x38ac1cf6UL, 0x3ff790b9UL,\n-    0x62aadd3eUL, 0x3c9349a8UL, 0x73eb0187UL, 0x3ff7a114UL, 0xee04992fUL,\n-    0xbc841577UL, 0x0976cfdbUL, 0x3ff7b17bUL, 0x8468dc88UL, 0xbc9bebb5UL,\n-    0x0130c132UL, 0x3ff7c1edUL, 0xd1164dd6UL, 0x3c9f124cUL, 0x62ff86f0UL,\n-    0x3ff7d26aUL, 0xfb72b8b4UL, 0x3c91bddbUL, 0x36cf4e62UL, 0x3ff7e2f3UL,\n-    0xba15797eUL, 0x3c705d02UL, 0x8491c491UL, 0x3ff7f387UL, 0xcf9311aeUL,\n-    0xbc807f11UL, 0x543e1a12UL, 0x3ff80427UL, 0x626d972bUL, 0xbc927c86UL,\n-    0xadd106d9UL, 0x3ff814d2UL, 0x0d151d4dUL, 0x3c946437UL, 0x994cce13UL,\n-    0x3ff82589UL, 0xd41532d8UL, 0xbc9d4c1dUL, 0x1eb941f7UL, 0x3ff8364cUL,\n-    0x31df2bd5UL, 0x3c999b9aUL, 0x4623c7adUL, 0x3ff8471aUL, 0xa341cdfbUL,\n-    0xbc88d684UL, 0x179f5b21UL, 0x3ff857f4UL, 0xf8b216d0UL, 0xbc5ba748UL,\n-    0x9b4492edUL, 0x3ff868d9UL, 0x9bd4f6baUL, 0xbc9fc6f8UL, 0xd931a436UL,\n-    0x3ff879caUL, 0xd2db47bdUL, 0x3c85d2d7UL, 0xd98a6699UL, 0x3ff88ac7UL,\n-    0xf37cb53aUL, 0x3c9994c2UL, 0xa478580fUL, 0x3ff89bd0UL, 0x4475202aUL,\n-    0x3c9d5395UL, 0x422aa0dbUL, 0x3ff8ace5UL, 0x56864b27UL, 0x3c96e9f1UL,\n-    0xbad61778UL, 0x3ff8be05UL, 0xfc43446eUL, 0x3c9ecb5eUL, 0x16b5448cUL,\n-    0x3ff8cf32UL, 0x32e9e3aaUL, 0xbc70d55eUL, 0x5e0866d9UL, 0x3ff8e06aUL,\n-    0x6fc9b2e6UL, 0xbc97114aUL, 0x99157736UL, 0x3ff8f1aeUL, 0xa2e3976cUL,\n-    0x3c85cc13UL, 0xd0282c8aUL, 0x3ff902feUL, 0x85fe3fd2UL, 0x3c9592caUL,\n-    0x0b91ffc6UL, 0x3ff9145bUL, 0x2e582524UL, 0xbc9dd679UL, 0x53aa2fe2UL,\n-    0x3ff925c3UL, 0xa639db7fUL, 0xbc83455fUL, 0xb0cdc5e5UL, 0x3ff93737UL,\n-    0x81b57ebcUL, 0xbc675fc7UL, 0x2b5f98e5UL, 0x3ff948b8UL, 0x797d2d99UL,\n-    0xbc8dc3d6UL, 0xcbc8520fUL, 0x3ff95a44UL, 0x96a5f039UL, 0xbc764b7cUL,\n-    0x9a7670b3UL, 0x3ff96bddUL, 0x7f19c896UL, 0xbc5ba596UL, 0x9fde4e50UL,\n-    0x3ff97d82UL, 0x7c1b85d1UL, 0xbc9d185bUL, 0xe47a22a2UL, 0x3ff98f33UL,\n-    0xa24c78ecUL, 0x3c7cabdaUL, 0x70ca07baUL, 0x3ff9a0f1UL, 0x91cee632UL,\n-    0xbc9173bdUL, 0x4d53fe0dUL, 0x3ff9b2bbUL, 0x4df6d518UL, 0xbc9dd84eUL,\n-    0x82a3f090UL, 0x3ff9c491UL, 0xb071f2beUL, 0x3c7c7c46UL, 0x194bb8d5UL,\n-    0x3ff9d674UL, 0xa3dd8233UL, 0xbc9516beUL, 0x19e32323UL, 0x3ff9e863UL,\n-    0x78e64c6eUL, 0x3c7824caUL, 0x8d07f29eUL, 0x3ff9fa5eUL, 0xaaf1faceUL,\n-    0xbc84a9ceUL, 0x7b5de565UL, 0x3ffa0c66UL, 0x5d1cd533UL, 0xbc935949UL,\n-    0xed8eb8bbUL, 0x3ffa1e7aUL, 0xee8be70eUL, 0x3c9c6618UL, 0xec4a2d33UL,\n-    0x3ffa309bUL, 0x7ddc36abUL, 0x3c96305cUL, 0x80460ad8UL, 0x3ffa42c9UL,\n-    0x589fb120UL, 0xbc9aa780UL, 0xb23e255dUL, 0x3ffa5503UL, 0xdb8d41e1UL,\n-    0xbc9d2f6eUL, 0x8af46052UL, 0x3ffa674aUL, 0x30670366UL, 0x3c650f56UL,\n-    0x1330b358UL, 0x3ffa799eUL, 0xcac563c7UL, 0x3c9bcb7eUL, 0x53c12e59UL,\n-    0x3ffa8bfeUL, 0xb2ba15a9UL, 0xbc94f867UL, 0x5579fdbfUL, 0x3ffa9e6bUL,\n-    0x0ef7fd31UL, 0x3c90fac9UL, 0x21356ebaUL, 0x3ffab0e5UL, 0xdae94545UL,\n-    0x3c889c31UL, 0xbfd3f37aUL, 0x3ffac36bUL, 0xcae76cd0UL, 0xbc8f9234UL,\n-    0x3a3c2774UL, 0x3ffad5ffUL, 0xb6b1b8e5UL, 0x3c97ef3bUL, 0x995ad3adUL,\n-    0x3ffae89fUL, 0x345dcc81UL, 0x3c97a1cdUL, 0xe622f2ffUL, 0x3ffafb4cUL,\n-    0x0f315ecdUL, 0xbc94b2fcUL, 0x298db666UL, 0x3ffb0e07UL, 0x4c80e425UL,\n-    0xbc9bdef5UL, 0x6c9a8952UL, 0x3ffb20ceUL, 0x4a0756ccUL, 0x3c94dd02UL,\n-    0xb84f15fbUL, 0x3ffb33a2UL, 0x3084d708UL, 0xbc62805eUL, 0x15b749b1UL,\n-    0x3ffb4684UL, 0xe9df7c90UL, 0xbc7f763dUL, 0x8de5593aUL, 0x3ffb5972UL,\n-    0xbbba6de3UL, 0xbc9c71dfUL, 0x29f1c52aUL, 0x3ffb6c6eUL, 0x52883f6eUL,\n-    0x3c92a8f3UL, 0xf2fb5e47UL, 0x3ffb7f76UL, 0x7e54ac3bUL, 0xbc75584fUL,\n-    0xf22749e4UL, 0x3ffb928cUL, 0x54cb65c6UL, 0xbc9b7216UL, 0x30a1064aUL,\n-    0x3ffba5b0UL, 0x0e54292eUL, 0xbc9efcd3UL, 0xb79a6f1fUL, 0x3ffbb8e0UL,\n-    0xc9696205UL, 0xbc3f52d1UL, 0x904bc1d2UL, 0x3ffbcc1eUL, 0x7a2d9e84UL,\n-    0x3c823dd0UL, 0xc3f3a207UL, 0x3ffbdf69UL, 0x60ea5b53UL, 0xbc3c2623UL,\n-    0x5bd71e09UL, 0x3ffbf2c2UL, 0x3f6b9c73UL, 0xbc9efdcaUL, 0x6141b33dUL,\n-    0x3ffc0628UL, 0xa1fbca34UL, 0xbc8d8a5aUL, 0xdd85529cUL, 0x3ffc199bUL,\n-    0x895048ddUL, 0x3c811065UL, 0xd9fa652cUL, 0x3ffc2d1cUL, 0x17c8a5d7UL,\n-    0xbc96e516UL, 0x5fffd07aUL, 0x3ffc40abUL, 0xe083c60aUL, 0x3c9b4537UL,\n-    0x78fafb22UL, 0x3ffc5447UL, 0x2493b5afUL, 0x3c912f07UL, 0x2e57d14bUL,\n-    0x3ffc67f1UL, 0xff483cadUL, 0x3c92884dUL, 0x8988c933UL, 0x3ffc7ba8UL,\n-    0xbe255559UL, 0xbc8e76bbUL, 0x9406e7b5UL, 0x3ffc8f6dUL, 0x48805c44UL,\n-    0x3c71acbcUL, 0x5751c4dbUL, 0x3ffca340UL, 0xd10d08f5UL, 0xbc87f2beUL,\n-    0xdcef9069UL, 0x3ffcb720UL, 0xd1e949dbUL, 0x3c7503cbUL, 0x2e6d1675UL,\n-    0x3ffccb0fUL, 0x86009092UL, 0xbc7d220fUL, 0x555dc3faUL, 0x3ffcdf0bUL,\n-    0x53829d72UL, 0xbc8dd83bUL, 0x5b5bab74UL, 0x3ffcf315UL, 0xb86dff57UL,\n-    0xbc9a08e9UL, 0x4a07897cUL, 0x3ffd072dUL, 0x43797a9cUL, 0xbc9cbc37UL,\n-    0x2b08c968UL, 0x3ffd1b53UL, 0x219a36eeUL, 0x3c955636UL, 0x080d89f2UL,\n-    0x3ffd2f87UL, 0x719d8578UL, 0xbc9d487bUL, 0xeacaa1d6UL, 0x3ffd43c8UL,\n-    0xbf5a1614UL, 0x3c93db53UL, 0xdcfba487UL, 0x3ffd5818UL, 0xd75b3707UL,\n-    0x3c82ed02UL, 0xe862e6d3UL, 0x3ffd6c76UL, 0x4a8165a0UL, 0x3c5fe87aUL,\n-    0x16c98398UL, 0x3ffd80e3UL, 0x8beddfe8UL, 0xbc911ec1UL, 0x71ff6075UL,\n-    0x3ffd955dUL, 0xbb9af6beUL, 0x3c9a052dUL, 0x03db3285UL, 0x3ffda9e6UL,\n-    0x696db532UL, 0x3c9c2300UL, 0xd63a8315UL, 0x3ffdbe7cUL, 0x926b8be4UL,\n-    0xbc9b76f1UL, 0xf301b460UL, 0x3ffdd321UL, 0x78f018c3UL, 0x3c92da57UL,\n-    0x641c0658UL, 0x3ffde7d5UL, 0x8e79ba8fUL, 0xbc9ca552UL, 0x337b9b5fUL,\n-    0x3ffdfc97UL, 0x4f184b5cUL, 0xbc91a5cdUL, 0x6b197d17UL, 0x3ffe1167UL,\n-    0xbd5c7f44UL, 0xbc72b529UL, 0x14f5a129UL, 0x3ffe2646UL, 0x817a1496UL,\n-    0xbc97b627UL, 0x3b16ee12UL, 0x3ffe3b33UL, 0x31fdc68bUL, 0xbc99f4a4UL,\n-    0xe78b3ff6UL, 0x3ffe502eUL, 0x80a9cc8fUL, 0x3c839e89UL, 0x24676d76UL,\n-    0x3ffe6539UL, 0x7522b735UL, 0xbc863ff8UL, 0xfbc74c83UL, 0x3ffe7a51UL,\n-    0xca0c8de2UL, 0x3c92d522UL, 0x77cdb740UL, 0x3ffe8f79UL, 0x80b054b1UL,\n-    0xbc910894UL, 0xa2a490daUL, 0x3ffea4afUL, 0x179c2893UL, 0xbc9e9c23UL,\n-    0x867cca6eUL, 0x3ffeb9f4UL, 0x2293e4f2UL, 0x3c94832fUL, 0x2d8e67f1UL,\n-    0x3ffecf48UL, 0xb411ad8cUL, 0xbc9c93f3UL, 0xa2188510UL, 0x3ffee4aaUL,\n-    0xa487568dUL, 0x3c91c68dUL, 0xee615a27UL, 0x3ffefa1bUL, 0x86a4b6b0UL,\n-    0x3c9dc7f4UL, 0x1cb6412aUL, 0x3fff0f9cUL, 0x65181d45UL, 0xbc932200UL,\n-    0x376bba97UL, 0x3fff252bUL, 0xbf0d8e43UL, 0x3c93a1a5UL, 0x48dd7274UL,\n-    0x3fff3ac9UL, 0x3ed837deUL, 0xbc795a5aUL, 0x5b6e4540UL, 0x3fff5076UL,\n-    0x2dd8a18bUL, 0x3c99d3e1UL, 0x798844f8UL, 0x3fff6632UL, 0x3539343eUL,\n-    0x3c9fa37bUL, 0xad9cbe14UL, 0x3fff7bfdUL, 0xd006350aUL, 0xbc9dbb12UL,\n-    0x02243c89UL, 0x3fff91d8UL, 0xa779f689UL, 0xbc612ea8UL, 0x819e90d8UL,\n-    0x3fffa7c1UL, 0xf3a5931eUL, 0x3c874853UL, 0x3692d514UL, 0x3fffbdbaUL,\n-    0x15098eb6UL, 0xbc796773UL, 0x2b8f71f1UL, 0x3fffd3c2UL, 0x966579e7UL,\n-    0x3c62eb74UL, 0x6b2a23d9UL, 0x3fffe9d9UL, 0x7442fde3UL, 0x3c74a603UL,\n-    0xe78a6731UL, 0x3f55d87fUL, 0xd704a0c0UL, 0x3fac6b08UL, 0x6fba4e77UL,\n-    0x3f83b2abUL, 0xff82c58fUL, 0x3fcebfbdUL, 0xfefa39efUL, 0x3fe62e42UL,\n-    0x00000000UL, 0x00000000UL, 0xfefa39efUL, 0x3fe62e42UL, 0xfefa39efUL,\n-    0xbfe62e42UL, 0xf8000000UL, 0xffffffffUL, 0xf8000000UL, 0xffffffffUL,\n-    0x00000000UL, 0x80000000UL, 0x00000000UL, 0x00000000UL\n-\n-};\n-\n-ATTRIBUTE_ALIGNED(8) double _DOUBLE2 = 2.0;\n-ATTRIBUTE_ALIGNED(8) double _DOUBLE0 = 0.0;\n-ATTRIBUTE_ALIGNED(8) double _DOUBLE0DOT5 = 0.5;\n-\n-\/\/registers,\n-\/\/ input: xmm0, xmm1\n-\/\/ scratch: xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7\n-\/\/          eax, edx, ecx, ebx\n-\n-\/\/ Code generated by Intel C compiler for LIBM library\n-\n-void MacroAssembler::fast_pow(XMMRegister xmm0, XMMRegister xmm1, XMMRegister xmm2, XMMRegister xmm3, XMMRegister xmm4, XMMRegister xmm5, XMMRegister xmm6, XMMRegister xmm7, Register eax, Register ecx, Register edx, Register tmp) {\n-  Label L_2TAG_PACKET_0_0_2, L_2TAG_PACKET_1_0_2, L_2TAG_PACKET_2_0_2, L_2TAG_PACKET_3_0_2;\n-  Label L_2TAG_PACKET_4_0_2, L_2TAG_PACKET_5_0_2, L_2TAG_PACKET_6_0_2, L_2TAG_PACKET_7_0_2;\n-  Label L_2TAG_PACKET_8_0_2, L_2TAG_PACKET_9_0_2, L_2TAG_PACKET_10_0_2, L_2TAG_PACKET_11_0_2;\n-  Label L_2TAG_PACKET_12_0_2, L_2TAG_PACKET_13_0_2, L_2TAG_PACKET_14_0_2, L_2TAG_PACKET_15_0_2;\n-  Label L_2TAG_PACKET_16_0_2, L_2TAG_PACKET_17_0_2, L_2TAG_PACKET_18_0_2, L_2TAG_PACKET_19_0_2;\n-  Label L_2TAG_PACKET_20_0_2, L_2TAG_PACKET_21_0_2, L_2TAG_PACKET_22_0_2, L_2TAG_PACKET_23_0_2;\n-  Label L_2TAG_PACKET_24_0_2, L_2TAG_PACKET_25_0_2, L_2TAG_PACKET_26_0_2, L_2TAG_PACKET_27_0_2;\n-  Label L_2TAG_PACKET_28_0_2, L_2TAG_PACKET_29_0_2, L_2TAG_PACKET_30_0_2, L_2TAG_PACKET_31_0_2;\n-  Label L_2TAG_PACKET_32_0_2, L_2TAG_PACKET_33_0_2, L_2TAG_PACKET_34_0_2, L_2TAG_PACKET_35_0_2;\n-  Label L_2TAG_PACKET_36_0_2, L_2TAG_PACKET_37_0_2, L_2TAG_PACKET_38_0_2, L_2TAG_PACKET_39_0_2;\n-  Label L_2TAG_PACKET_40_0_2, L_2TAG_PACKET_41_0_2, L_2TAG_PACKET_42_0_2, L_2TAG_PACKET_43_0_2;\n-  Label L_2TAG_PACKET_44_0_2, L_2TAG_PACKET_45_0_2, L_2TAG_PACKET_46_0_2, L_2TAG_PACKET_47_0_2;\n-  Label L_2TAG_PACKET_48_0_2, L_2TAG_PACKET_49_0_2, L_2TAG_PACKET_50_0_2, L_2TAG_PACKET_51_0_2;\n-  Label L_2TAG_PACKET_52_0_2, L_2TAG_PACKET_53_0_2, L_2TAG_PACKET_54_0_2, L_2TAG_PACKET_55_0_2;\n-  Label L_2TAG_PACKET_56_0_2, L_2TAG_PACKET_57_0_2, L_2TAG_PACKET_58_0_2, start;\n-  Label L_NOT_DOUBLE2, L_NOT_DOUBLE0DOT5;\n-\n-  assert_different_registers(tmp, eax, ecx, edx);\n-\n-  address static_const_table_pow = (address)_static_const_table_pow;\n-  address DOUBLE2 = (address) &_DOUBLE2;\n-  address DOUBLE0 = (address) &_DOUBLE0;\n-  address DOUBLE0DOT5 = (address) &_DOUBLE0DOT5;\n-\n-  subl(rsp, 120);\n-  movl(Address(rsp, 64), tmp);\n-  lea(tmp, ExternalAddress(static_const_table_pow));\n-  movsd(xmm0, Address(rsp, 128));\n-  movsd(xmm1, Address(rsp, 136));\n-\n-  \/\/ Special case: pow(x, 2.0) => x * x\n-  ucomisd(xmm1, ExternalAddress(DOUBLE2));\n-  jccb(Assembler::notEqual, L_NOT_DOUBLE2);\n-  jccb(Assembler::parity, L_NOT_DOUBLE2);\n-  mulsd(xmm0, xmm0);\n-  jmp(L_2TAG_PACKET_21_0_2);\n-\n-  bind(L_NOT_DOUBLE2);\n-  \/\/ Special case: pow(x, 0.5) => sqrt(x)\n-  ucomisd(xmm1, ExternalAddress(DOUBLE0DOT5)); \/\/ For pow(x, y), check whether y == 0.5\n-  jccb(Assembler::notEqual, L_NOT_DOUBLE0DOT5);\n-  jccb(Assembler::parity, L_NOT_DOUBLE0DOT5);\n-  ucomisd(xmm0, ExternalAddress(DOUBLE0));\n-  \/\/ According to the API specs, pow(-0.0, 0.5) = 0.0 and sqrt(-0.0) = -0.0.\n-  \/\/ So pow(-0.0, 0.5) shouldn't be replaced with sqrt(-0.0).\n-  \/\/ -0.0\/+0.0 are both excluded since floating-point comparison doesn't distinguish -0.0 from +0.0.\n-  jccb(Assembler::belowEqual, L_NOT_DOUBLE0DOT5); \/\/ pow(x, 0.5) => sqrt(x) only for x > 0.0\n-  sqrtsd(xmm0, xmm0);\n-  jmp(L_2TAG_PACKET_21_0_2);\n-\n-  bind(L_NOT_DOUBLE0DOT5);\n-  xorpd(xmm2, xmm2);\n-  movl(eax, 16368);\n-  pinsrw(xmm2, eax, 3);\n-  movl(ecx, 1069088768);\n-  movdl(xmm7, ecx);\n-  movsd(Address(rsp, 16), xmm1);\n-  xorpd(xmm1, xmm1);\n-  movl(edx, 30704);\n-  pinsrw(xmm1, edx, 3);\n-  movsd(Address(rsp, 8), xmm0);\n-  movdqu(xmm3, xmm0);\n-  movl(edx, 8192);\n-  movdl(xmm4, edx);\n-  movdqu(xmm6, Address(tmp, 8240));\n-  pextrw(eax, xmm0, 3);\n-  por(xmm0, xmm2);\n-  psllq(xmm0, 5);\n-  movsd(xmm2, Address(tmp, 8256));\n-  psrlq(xmm0, 34);\n-  movl(edx, eax);\n-  andl(edx, 32752);\n-  subl(edx, 16368);\n-  movl(ecx, edx);\n-  sarl(edx, 31);\n-  addl(ecx, edx);\n-  xorl(ecx, edx);\n-  rcpss(xmm0, xmm0);\n-  psllq(xmm3, 12);\n-  addl(ecx, 16);\n-  bsrl(ecx, ecx);\n-  psrlq(xmm3, 12);\n-  movl(Address(rsp, 24), rsi);\n-  subl(eax, 16);\n-  cmpl(eax, 32736);\n-  jcc(Assembler::aboveEqual, L_2TAG_PACKET_0_0_2);\n-  movl(rsi, 0);\n-\n-  bind(L_2TAG_PACKET_1_0_2);\n-  mulss(xmm0, xmm7);\n-  movl(edx, -1);\n-  subl(ecx, 4);\n-  shll(edx);\n-  movdl(xmm5, edx);\n-  por(xmm3, xmm1);\n-  subl(eax, 16351);\n-  cmpl(eax, 1);\n-  jcc(Assembler::belowEqual, L_2TAG_PACKET_2_0_2);\n-  paddd(xmm0, xmm4);\n-  psllq(xmm5, 32);\n-  movdl(edx, xmm0);\n-  psllq(xmm0, 29);\n-  pand(xmm5, xmm3);\n-\n-  bind(L_2TAG_PACKET_3_0_2);\n-  pand(xmm0, xmm6);\n-  subsd(xmm3, xmm5);\n-  subl(eax, 1);\n-  sarl(eax, 4);\n-  cvtsi2sdl(xmm7, eax);\n-  mulpd(xmm5, xmm0);\n-\n-  bind(L_2TAG_PACKET_4_0_2);\n-  mulsd(xmm3, xmm0);\n-  movdqu(xmm1, Address(tmp, 8272));\n-  subsd(xmm5, xmm2);\n-  movdqu(xmm4, Address(tmp, 8288));\n-  movl(ecx, eax);\n-  sarl(eax, 31);\n-  addl(ecx, eax);\n-  xorl(eax, ecx);\n-  addl(eax, 1);\n-  bsrl(eax, eax);\n-  unpcklpd(xmm5, xmm3);\n-  movdqu(xmm6, Address(tmp, 8304));\n-  addsd(xmm3, xmm5);\n-  andl(edx, 16760832);\n-  shrl(edx, 10);\n-  addpd(xmm5, Address(tmp, edx, Address::times_1, -3616));\n-  movdqu(xmm0, Address(tmp, 8320));\n-  pshufd(xmm2, xmm3, 68);\n-  mulsd(xmm3, xmm3);\n-  mulpd(xmm1, xmm2);\n-  mulpd(xmm4, xmm2);\n-  addsd(xmm5, xmm7);\n-  mulsd(xmm2, xmm3);\n-  addpd(xmm6, xmm1);\n-  mulsd(xmm3, xmm3);\n-  addpd(xmm0, xmm4);\n-  movsd(xmm1, Address(rsp, 16));\n-  movzwl(ecx, Address(rsp, 22));\n-  pshufd(xmm7, xmm5, 238);\n-  movsd(xmm4, Address(tmp, 8368));\n-  mulpd(xmm6, xmm2);\n-  pshufd(xmm3, xmm3, 68);\n-  mulpd(xmm0, xmm2);\n-  shll(eax, 4);\n-  subl(eax, 15872);\n-  andl(ecx, 32752);\n-  addl(eax, ecx);\n-  mulpd(xmm3, xmm6);\n-  cmpl(eax, 624);\n-  jcc(Assembler::aboveEqual, L_2TAG_PACKET_5_0_2);\n-  xorpd(xmm6, xmm6);\n-  movl(edx, 17080);\n-  pinsrw(xmm6, edx, 3);\n-  movdqu(xmm2, xmm1);\n-  pand(xmm4, xmm1);\n-  subsd(xmm1, xmm4);\n-  mulsd(xmm4, xmm5);\n-  addsd(xmm0, xmm7);\n-  mulsd(xmm1, xmm5);\n-  movdqu(xmm7, xmm6);\n-  addsd(xmm6, xmm4);\n-  addpd(xmm3, xmm0);\n-  movdl(edx, xmm6);\n-  subsd(xmm6, xmm7);\n-  pshufd(xmm0, xmm3, 238);\n-  subsd(xmm4, xmm6);\n-  addsd(xmm0, xmm3);\n-  movl(ecx, edx);\n-  andl(edx, 255);\n-  addl(edx, edx);\n-  movdqu(xmm5, Address(tmp, edx, Address::times_8, 8384));\n-  addsd(xmm4, xmm1);\n-  mulsd(xmm2, xmm0);\n-  movdqu(xmm7, Address(tmp, 12480));\n-  movdqu(xmm3, Address(tmp, 12496));\n-  shll(ecx, 12);\n-  xorl(ecx, rsi);\n-  andl(ecx, -1048576);\n-  movdl(xmm6, ecx);\n-  addsd(xmm2, xmm4);\n-  movsd(xmm1, Address(tmp, 12512));\n-  pshufd(xmm0, xmm2, 68);\n-  pshufd(xmm4, xmm2, 68);\n-  mulpd(xmm0, xmm0);\n-  movl(rsi, Address(rsp, 24));\n-  mulpd(xmm7, xmm4);\n-  pshufd(xmm6, xmm6, 17);\n-  mulsd(xmm1, xmm2);\n-  mulsd(xmm0, xmm0);\n-  paddd(xmm5, xmm6);\n-  addpd(xmm3, xmm7);\n-  mulsd(xmm1, xmm5);\n-  pshufd(xmm6, xmm5, 238);\n-  mulpd(xmm0, xmm3);\n-  addsd(xmm1, xmm6);\n-  pshufd(xmm3, xmm0, 238);\n-  mulsd(xmm0, xmm5);\n-  mulsd(xmm3, xmm5);\n-  addsd(xmm0, xmm1);\n-  addsd(xmm0, xmm3);\n-  addsd(xmm0, xmm5);\n-  movsd(Address(rsp, 0), xmm0);\n-  fld_d(Address(rsp, 0));\n-  jmp(L_2TAG_PACKET_6_0_2);\n-\n-  bind(L_2TAG_PACKET_7_0_2);\n-  movsd(xmm0, Address(rsp, 128));\n-  movsd(xmm1, Address(rsp, 136));\n-  mulsd(xmm0, xmm1);\n-  movsd(Address(rsp, 0), xmm0);\n-  fld_d(Address(rsp, 0));\n-  jmp(L_2TAG_PACKET_6_0_2);\n-\n-  bind(L_2TAG_PACKET_0_0_2);\n-  addl(eax, 16);\n-  movl(edx, 32752);\n-  andl(edx, eax);\n-  cmpl(edx, 32752);\n-  jcc(Assembler::equal, L_2TAG_PACKET_8_0_2);\n-  testl(eax, 32768);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_9_0_2);\n-\n-  bind(L_2TAG_PACKET_10_0_2);\n-  movl(ecx, Address(rsp, 16));\n-  xorl(edx, edx);\n-  testl(ecx, ecx);\n-  movl(ecx, 1);\n-  cmovl(Assembler::notEqual, edx, ecx);\n-  orl(edx, Address(rsp, 20));\n-  cmpl(edx, 1072693248);\n-  jcc(Assembler::equal, L_2TAG_PACKET_7_0_2);\n-  movsd(xmm0, Address(rsp, 8));\n-  movsd(xmm3, Address(rsp, 8));\n-  movdl(edx, xmm3);\n-  psrlq(xmm3, 32);\n-  movdl(ecx, xmm3);\n-  orl(edx, ecx);\n-  cmpl(edx, 0);\n-  jcc(Assembler::equal, L_2TAG_PACKET_11_0_2);\n-  xorpd(xmm3, xmm3);\n-  movl(eax, 18416);\n-  pinsrw(xmm3, eax, 3);\n-  mulsd(xmm0, xmm3);\n-  xorpd(xmm2, xmm2);\n-  movl(eax, 16368);\n-  pinsrw(xmm2, eax, 3);\n-  movdqu(xmm3, xmm0);\n-  pextrw(eax, xmm0, 3);\n-  por(xmm0, xmm2);\n-  movl(ecx, 18416);\n-  psllq(xmm0, 5);\n-  movsd(xmm2, Address(tmp, 8256));\n-  psrlq(xmm0, 34);\n-  rcpss(xmm0, xmm0);\n-  psllq(xmm3, 12);\n-  movdqu(xmm6, Address(tmp, 8240));\n-  psrlq(xmm3, 12);\n-  mulss(xmm0, xmm7);\n-  movl(edx, -1024);\n-  movdl(xmm5, edx);\n-  por(xmm3, xmm1);\n-  paddd(xmm0, xmm4);\n-  psllq(xmm5, 32);\n-  movdl(edx, xmm0);\n-  psllq(xmm0, 29);\n-  pand(xmm5, xmm3);\n-  movl(rsi, 0);\n-  pand(xmm0, xmm6);\n-  subsd(xmm3, xmm5);\n-  andl(eax, 32752);\n-  subl(eax, 18416);\n-  sarl(eax, 4);\n-  cvtsi2sdl(xmm7, eax);\n-  mulpd(xmm5, xmm0);\n-  jmp(L_2TAG_PACKET_4_0_2);\n-\n-  bind(L_2TAG_PACKET_12_0_2);\n-  movl(ecx, Address(rsp, 16));\n-  xorl(edx, edx);\n-  testl(ecx, ecx);\n-  movl(ecx, 1);\n-  cmovl(Assembler::notEqual, edx, ecx);\n-  orl(edx, Address(rsp, 20));\n-  cmpl(edx, 1072693248);\n-  jcc(Assembler::equal, L_2TAG_PACKET_7_0_2);\n-  movsd(xmm0, Address(rsp, 8));\n-  movsd(xmm3, Address(rsp, 8));\n-  movdl(edx, xmm3);\n-  psrlq(xmm3, 32);\n-  movdl(ecx, xmm3);\n-  orl(edx, ecx);\n-  cmpl(edx, 0);\n-  jcc(Assembler::equal, L_2TAG_PACKET_11_0_2);\n-  xorpd(xmm3, xmm3);\n-  movl(eax, 18416);\n-  pinsrw(xmm3, eax, 3);\n-  mulsd(xmm0, xmm3);\n-  xorpd(xmm2, xmm2);\n-  movl(eax, 16368);\n-  pinsrw(xmm2, eax, 3);\n-  movdqu(xmm3, xmm0);\n-  pextrw(eax, xmm0, 3);\n-  por(xmm0, xmm2);\n-  movl(ecx, 18416);\n-  psllq(xmm0, 5);\n-  movsd(xmm2, Address(tmp, 8256));\n-  psrlq(xmm0, 34);\n-  rcpss(xmm0, xmm0);\n-  psllq(xmm3, 12);\n-  movdqu(xmm6, Address(tmp, 8240));\n-  psrlq(xmm3, 12);\n-  mulss(xmm0, xmm7);\n-  movl(edx, -1024);\n-  movdl(xmm5, edx);\n-  por(xmm3, xmm1);\n-  paddd(xmm0, xmm4);\n-  psllq(xmm5, 32);\n-  movdl(edx, xmm0);\n-  psllq(xmm0, 29);\n-  pand(xmm5, xmm3);\n-  movl(rsi, INT_MIN);\n-  pand(xmm0, xmm6);\n-  subsd(xmm3, xmm5);\n-  andl(eax, 32752);\n-  subl(eax, 18416);\n-  sarl(eax, 4);\n-  cvtsi2sdl(xmm7, eax);\n-  mulpd(xmm5, xmm0);\n-  jmp(L_2TAG_PACKET_4_0_2);\n-\n-  bind(L_2TAG_PACKET_5_0_2);\n-  cmpl(eax, 0);\n-  jcc(Assembler::less, L_2TAG_PACKET_13_0_2);\n-  cmpl(eax, 752);\n-  jcc(Assembler::aboveEqual, L_2TAG_PACKET_14_0_2);\n-\n-  bind(L_2TAG_PACKET_15_0_2);\n-  addsd(xmm0, xmm7);\n-  movsd(xmm2, Address(tmp, 12544));\n-  addpd(xmm3, xmm0);\n-  xorpd(xmm6, xmm6);\n-  movl(eax, 17080);\n-  pinsrw(xmm6, eax, 3);\n-  pshufd(xmm0, xmm3, 238);\n-  addsd(xmm0, xmm3);\n-  movdqu(xmm3, xmm5);\n-  addsd(xmm5, xmm0);\n-  movdqu(xmm4, xmm2);\n-  subsd(xmm3, xmm5);\n-  movdqu(xmm7, xmm5);\n-  pand(xmm5, xmm2);\n-  movdqu(xmm2, xmm1);\n-  pand(xmm4, xmm1);\n-  subsd(xmm7, xmm5);\n-  addsd(xmm0, xmm3);\n-  subsd(xmm1, xmm4);\n-  mulsd(xmm4, xmm5);\n-  addsd(xmm0, xmm7);\n-  mulsd(xmm2, xmm0);\n-  movdqu(xmm7, xmm6);\n-  mulsd(xmm1, xmm5);\n-  addsd(xmm6, xmm4);\n-  movdl(eax, xmm6);\n-  subsd(xmm6, xmm7);\n-  addsd(xmm2, xmm1);\n-  movdqu(xmm7, Address(tmp, 12480));\n-  movdqu(xmm3, Address(tmp, 12496));\n-  subsd(xmm4, xmm6);\n-  pextrw(edx, xmm6, 3);\n-  movl(ecx, eax);\n-  andl(eax, 255);\n-  addl(eax, eax);\n-  movdqu(xmm5, Address(tmp, eax, Address::times_8, 8384));\n-  addsd(xmm2, xmm4);\n-  sarl(ecx, 8);\n-  movl(eax, ecx);\n-  sarl(ecx, 1);\n-  subl(eax, ecx);\n-  shll(ecx, 20);\n-  xorl(ecx, rsi);\n-  movdl(xmm6, ecx);\n-  movsd(xmm1, Address(tmp, 12512));\n-  andl(edx, 32767);\n-  cmpl(edx, 16529);\n-  jcc(Assembler::above, L_2TAG_PACKET_14_0_2);\n-  pshufd(xmm0, xmm2, 68);\n-  pshufd(xmm4, xmm2, 68);\n-  mulpd(xmm0, xmm0);\n-  mulpd(xmm7, xmm4);\n-  pshufd(xmm6, xmm6, 17);\n-  mulsd(xmm1, xmm2);\n-  mulsd(xmm0, xmm0);\n-  paddd(xmm5, xmm6);\n-  addpd(xmm3, xmm7);\n-  mulsd(xmm1, xmm5);\n-  pshufd(xmm6, xmm5, 238);\n-  mulpd(xmm0, xmm3);\n-  addsd(xmm1, xmm6);\n-  pshufd(xmm3, xmm0, 238);\n-  mulsd(xmm0, xmm5);\n-  mulsd(xmm3, xmm5);\n-  shll(eax, 4);\n-  xorpd(xmm4, xmm4);\n-  addl(eax, 16368);\n-  pinsrw(xmm4, eax, 3);\n-  addsd(xmm0, xmm1);\n-  movl(rsi, Address(rsp, 24));\n-  addsd(xmm0, xmm3);\n-  movdqu(xmm1, xmm0);\n-  addsd(xmm0, xmm5);\n-  mulsd(xmm0, xmm4);\n-  pextrw(eax, xmm0, 3);\n-  andl(eax, 32752);\n-  jcc(Assembler::equal, L_2TAG_PACKET_16_0_2);\n-  cmpl(eax, 32752);\n-  jcc(Assembler::equal, L_2TAG_PACKET_17_0_2);\n-\n-  bind(L_2TAG_PACKET_18_0_2);\n-  movsd(Address(rsp, 0), xmm0);\n-  fld_d(Address(rsp, 0));\n-  jmp(L_2TAG_PACKET_6_0_2);\n-\n-  bind(L_2TAG_PACKET_8_0_2);\n-  movsd(xmm1, Address(rsp, 16));\n-  movsd(xmm0, Address(rsp, 8));\n-  movdqu(xmm2, xmm0);\n-  movdl(eax, xmm2);\n-  psrlq(xmm2, 20);\n-  movdl(edx, xmm2);\n-  orl(eax, edx);\n-  jcc(Assembler::equal, L_2TAG_PACKET_19_0_2);\n-  addsd(xmm0, xmm0);\n-  movdl(eax, xmm1);\n-  psrlq(xmm1, 32);\n-  movdl(edx, xmm1);\n-  movl(ecx, edx);\n-  addl(edx, edx);\n-  orl(eax, edx);\n-  jcc(Assembler::equal, L_2TAG_PACKET_20_0_2);\n-  jmp(L_2TAG_PACKET_18_0_2);\n-\n-  bind(L_2TAG_PACKET_20_0_2);\n-  xorpd(xmm0, xmm0);\n-  movl(eax, 16368);\n-  pinsrw(xmm0, eax, 3);\n-  movl(edx, 29);\n-  jmp(L_2TAG_PACKET_21_0_2);\n-\n-  bind(L_2TAG_PACKET_22_0_2);\n-  movsd(xmm0, Address(rsp, 16));\n-  addpd(xmm0, xmm0);\n-  jmp(L_2TAG_PACKET_18_0_2);\n-\n-  bind(L_2TAG_PACKET_19_0_2);\n-  movdl(eax, xmm1);\n-  movdqu(xmm2, xmm1);\n-  psrlq(xmm1, 32);\n-  movdl(edx, xmm1);\n-  movl(ecx, edx);\n-  addl(edx, edx);\n-  orl(eax, edx);\n-  jcc(Assembler::equal, L_2TAG_PACKET_23_0_2);\n-  pextrw(eax, xmm2, 3);\n-  andl(eax, 32752);\n-  cmpl(eax, 32752);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_24_0_2);\n-  movdl(eax, xmm2);\n-  psrlq(xmm2, 20);\n-  movdl(edx, xmm2);\n-  orl(eax, edx);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_22_0_2);\n-\n-  bind(L_2TAG_PACKET_24_0_2);\n-  pextrw(eax, xmm0, 3);\n-  testl(eax, 32768);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_25_0_2);\n-  testl(ecx, INT_MIN);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_26_0_2);\n-  jmp(L_2TAG_PACKET_18_0_2);\n-\n-  bind(L_2TAG_PACKET_27_0_2);\n-  movsd(xmm1, Address(rsp, 16));\n-  movdl(eax, xmm1);\n-  testl(eax, 1);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_28_0_2);\n-  testl(eax, 2);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_29_0_2);\n-  jmp(L_2TAG_PACKET_28_0_2);\n-\n-  bind(L_2TAG_PACKET_25_0_2);\n-  shrl(ecx, 20);\n-  andl(ecx, 2047);\n-  cmpl(ecx, 1075);\n-  jcc(Assembler::above, L_2TAG_PACKET_28_0_2);\n-  jcc(Assembler::equal, L_2TAG_PACKET_30_0_2);\n-  cmpl(ecx, 1074);\n-  jcc(Assembler::above, L_2TAG_PACKET_27_0_2);\n-  cmpl(ecx, 1023);\n-  jcc(Assembler::below, L_2TAG_PACKET_28_0_2);\n-  movsd(xmm1, Address(rsp, 16));\n-  movl(eax, 17208);\n-  xorpd(xmm3, xmm3);\n-  pinsrw(xmm3, eax, 3);\n-  movdqu(xmm4, xmm3);\n-  addsd(xmm3, xmm1);\n-  subsd(xmm4, xmm3);\n-  addsd(xmm1, xmm4);\n-  pextrw(eax, xmm1, 3);\n-  andl(eax, 32752);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_28_0_2);\n-  movdl(eax, xmm3);\n-  andl(eax, 1);\n-  jcc(Assembler::equal, L_2TAG_PACKET_28_0_2);\n-\n-  bind(L_2TAG_PACKET_29_0_2);\n-  movsd(xmm1, Address(rsp, 16));\n-  pextrw(eax, xmm1, 3);\n-  andl(eax, 32768);\n-  jcc(Assembler::equal, L_2TAG_PACKET_18_0_2);\n-  xorpd(xmm0, xmm0);\n-  movl(eax, 32768);\n-  pinsrw(xmm0, eax, 3);\n-  jmp(L_2TAG_PACKET_18_0_2);\n-\n-  bind(L_2TAG_PACKET_28_0_2);\n-  movsd(xmm1, Address(rsp, 16));\n-  pextrw(eax, xmm1, 3);\n-  andl(eax, 32768);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_26_0_2);\n-\n-  bind(L_2TAG_PACKET_31_0_2);\n-  xorpd(xmm0, xmm0);\n-  movl(eax, 32752);\n-  pinsrw(xmm0, eax, 3);\n-  jmp(L_2TAG_PACKET_18_0_2);\n-\n-  bind(L_2TAG_PACKET_30_0_2);\n-  movsd(xmm1, Address(rsp, 16));\n-  movdl(eax, xmm1);\n-  andl(eax, 1);\n-  jcc(Assembler::equal, L_2TAG_PACKET_28_0_2);\n-  jmp(L_2TAG_PACKET_29_0_2);\n-\n-  bind(L_2TAG_PACKET_32_0_2);\n-  movdl(eax, xmm1);\n-  psrlq(xmm1, 20);\n-  movdl(edx, xmm1);\n-  orl(eax, edx);\n-  jcc(Assembler::equal, L_2TAG_PACKET_33_0_2);\n-  movsd(xmm0, Address(rsp, 16));\n-  addsd(xmm0, xmm0);\n-  jmp(L_2TAG_PACKET_18_0_2);\n-\n-  bind(L_2TAG_PACKET_33_0_2);\n-  movsd(xmm0, Address(rsp, 8));\n-  pextrw(eax, xmm0, 3);\n-  cmpl(eax, 49136);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_34_0_2);\n-  movdl(ecx, xmm0);\n-  psrlq(xmm0, 20);\n-  movdl(edx, xmm0);\n-  orl(ecx, edx);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_34_0_2);\n-  xorpd(xmm0, xmm0);\n-  movl(eax, 32760);\n-  pinsrw(xmm0, eax, 3);\n-  jmp(L_2TAG_PACKET_18_0_2);\n-\n-  bind(L_2TAG_PACKET_34_0_2);\n-  movsd(xmm1, Address(rsp, 16));\n-  andl(eax, 32752);\n-  subl(eax, 16368);\n-  pextrw(edx, xmm1, 3);\n-  xorpd(xmm0, xmm0);\n-  xorl(eax, edx);\n-  andl(eax, 32768);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_18_0_2);\n-  movl(ecx, 32752);\n-  pinsrw(xmm0, ecx, 3);\n-  jmp(L_2TAG_PACKET_18_0_2);\n-\n-  bind(L_2TAG_PACKET_35_0_2);\n-  movdl(eax, xmm1);\n-  cmpl(edx, 17184);\n-  jcc(Assembler::above, L_2TAG_PACKET_36_0_2);\n-  testl(eax, 1);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_37_0_2);\n-  testl(eax, 2);\n-  jcc(Assembler::equal, L_2TAG_PACKET_38_0_2);\n-  jmp(L_2TAG_PACKET_39_0_2);\n-\n-  bind(L_2TAG_PACKET_36_0_2);\n-  testl(eax, 1);\n-  jcc(Assembler::equal, L_2TAG_PACKET_38_0_2);\n-  jmp(L_2TAG_PACKET_39_0_2);\n-\n-  bind(L_2TAG_PACKET_9_0_2);\n-  movsd(xmm2, Address(rsp, 8));\n-  movdl(eax, xmm2);\n-  psrlq(xmm2, 31);\n-  movdl(ecx, xmm2);\n-  orl(eax, ecx);\n-  jcc(Assembler::equal, L_2TAG_PACKET_11_0_2);\n-  movsd(xmm1, Address(rsp, 16));\n-  pextrw(edx, xmm1, 3);\n-  movdl(eax, xmm1);\n-  movdqu(xmm2, xmm1);\n-  psrlq(xmm2, 32);\n-  movdl(ecx, xmm2);\n-  addl(ecx, ecx);\n-  orl(ecx, eax);\n-  jcc(Assembler::equal, L_2TAG_PACKET_40_0_2);\n-  andl(edx, 32752);\n-  cmpl(edx, 32752);\n-  jcc(Assembler::equal, L_2TAG_PACKET_32_0_2);\n-  cmpl(edx, 17200);\n-  jcc(Assembler::above, L_2TAG_PACKET_38_0_2);\n-  cmpl(edx, 17184);\n-  jcc(Assembler::aboveEqual, L_2TAG_PACKET_35_0_2);\n-  cmpl(edx, 16368);\n-  jcc(Assembler::below, L_2TAG_PACKET_37_0_2);\n-  movl(eax, 17208);\n-  xorpd(xmm2, xmm2);\n-  pinsrw(xmm2, eax, 3);\n-  movdqu(xmm4, xmm2);\n-  addsd(xmm2, xmm1);\n-  subsd(xmm4, xmm2);\n-  addsd(xmm1, xmm4);\n-  pextrw(eax, xmm1, 3);\n-  andl(eax, 32767);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_37_0_2);\n-  movdl(eax, xmm2);\n-  andl(eax, 1);\n-  jcc(Assembler::equal, L_2TAG_PACKET_38_0_2);\n-\n-  bind(L_2TAG_PACKET_39_0_2);\n-  xorpd(xmm1, xmm1);\n-  movl(edx, 30704);\n-  pinsrw(xmm1, edx, 3);\n-  movsd(xmm2, Address(tmp, 8256));\n-  movsd(xmm4, Address(rsp, 8));\n-  pextrw(eax, xmm4, 3);\n-  movl(edx, 8192);\n-  movdl(xmm4, edx);\n-  andl(eax, 32767);\n-  subl(eax, 16);\n-  jcc(Assembler::less, L_2TAG_PACKET_12_0_2);\n-  movl(edx, eax);\n-  andl(edx, 32752);\n-  subl(edx, 16368);\n-  movl(ecx, edx);\n-  sarl(edx, 31);\n-  addl(ecx, edx);\n-  xorl(ecx, edx);\n-  addl(ecx, 16);\n-  bsrl(ecx, ecx);\n-  movl(rsi, INT_MIN);\n-  jmp(L_2TAG_PACKET_1_0_2);\n-\n-  bind(L_2TAG_PACKET_37_0_2);\n-  xorpd(xmm1, xmm1);\n-  movl(eax, 32752);\n-  pinsrw(xmm1, eax, 3);\n-  xorpd(xmm0, xmm0);\n-  mulsd(xmm0, xmm1);\n-  movl(edx, 28);\n-  jmp(L_2TAG_PACKET_21_0_2);\n-\n-  bind(L_2TAG_PACKET_38_0_2);\n-  xorpd(xmm1, xmm1);\n-  movl(edx, 30704);\n-  pinsrw(xmm1, edx, 3);\n-  movsd(xmm2, Address(tmp, 8256));\n-  movsd(xmm4, Address(rsp, 8));\n-  pextrw(eax, xmm4, 3);\n-  movl(edx, 8192);\n-  movdl(xmm4, edx);\n-  andl(eax, 32767);\n-  subl(eax, 16);\n-  jcc(Assembler::less, L_2TAG_PACKET_10_0_2);\n-  movl(edx, eax);\n-  andl(edx, 32752);\n-  subl(edx, 16368);\n-  movl(ecx, edx);\n-  sarl(edx, 31);\n-  addl(ecx, edx);\n-  xorl(ecx, edx);\n-  addl(ecx, 16);\n-  bsrl(ecx, ecx);\n-  movl(rsi, 0);\n-  jmp(L_2TAG_PACKET_1_0_2);\n-\n-  bind(L_2TAG_PACKET_23_0_2);\n-  xorpd(xmm0, xmm0);\n-  movl(eax, 16368);\n-  pinsrw(xmm0, eax, 3);\n-  jmp(L_2TAG_PACKET_18_0_2);\n-\n-  bind(L_2TAG_PACKET_26_0_2);\n-  xorpd(xmm0, xmm0);\n-  jmp(L_2TAG_PACKET_18_0_2);\n-\n-  bind(L_2TAG_PACKET_13_0_2);\n-  addl(eax, 384);\n-  cmpl(eax, 0);\n-  jcc(Assembler::less, L_2TAG_PACKET_41_0_2);\n-  mulsd(xmm5, xmm1);\n-  addsd(xmm0, xmm7);\n-  shrl(rsi, 31);\n-  addpd(xmm3, xmm0);\n-  pshufd(xmm0, xmm3, 238);\n-  addsd(xmm3, xmm0);\n-  movsd(xmm4, Address(tmp, rsi, Address::times_8, 12528));\n-  mulsd(xmm1, xmm3);\n-  xorpd(xmm0, xmm0);\n-  movl(eax, 16368);\n-  shll(rsi, 15);\n-  orl(eax, rsi);\n-  pinsrw(xmm0, eax, 3);\n-  addsd(xmm5, xmm1);\n-  movl(rsi, Address(rsp, 24));\n-  mulsd(xmm5, xmm4);\n-  addsd(xmm0, xmm5);\n-  jmp(L_2TAG_PACKET_18_0_2);\n-\n-  bind(L_2TAG_PACKET_41_0_2);\n-  movl(rsi, Address(rsp, 24));\n-  xorpd(xmm0, xmm0);\n-  movl(eax, 16368);\n-  pinsrw(xmm0, eax, 3);\n-  jmp(L_2TAG_PACKET_18_0_2);\n-\n-  bind(L_2TAG_PACKET_40_0_2);\n-  xorpd(xmm0, xmm0);\n-  movl(eax, 16368);\n-  pinsrw(xmm0, eax, 3);\n-  jmp(L_2TAG_PACKET_18_0_2);\n-\n-  bind(L_2TAG_PACKET_42_0_2);\n-  xorpd(xmm0, xmm0);\n-  movl(eax, 16368);\n-  pinsrw(xmm0, eax, 3);\n-  movl(edx, 26);\n-  jmp(L_2TAG_PACKET_21_0_2);\n-\n-  bind(L_2TAG_PACKET_11_0_2);\n-  movsd(xmm1, Address(rsp, 16));\n-  movdqu(xmm2, xmm1);\n-  pextrw(eax, xmm1, 3);\n-  andl(eax, 32752);\n-  cmpl(eax, 32752);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_43_0_2);\n-  movdl(eax, xmm2);\n-  psrlq(xmm2, 20);\n-  movdl(edx, xmm2);\n-  orl(eax, edx);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_22_0_2);\n-\n-  bind(L_2TAG_PACKET_43_0_2);\n-  movdl(eax, xmm1);\n-  psrlq(xmm1, 32);\n-  movdl(edx, xmm1);\n-  movl(ecx, edx);\n-  addl(edx, edx);\n-  orl(eax, edx);\n-  jcc(Assembler::equal, L_2TAG_PACKET_42_0_2);\n-  shrl(edx, 21);\n-  cmpl(edx, 1075);\n-  jcc(Assembler::above, L_2TAG_PACKET_44_0_2);\n-  jcc(Assembler::equal, L_2TAG_PACKET_45_0_2);\n-  cmpl(edx, 1023);\n-  jcc(Assembler::below, L_2TAG_PACKET_44_0_2);\n-  movsd(xmm1, Address(rsp, 16));\n-  movl(eax, 17208);\n-  xorpd(xmm3, xmm3);\n-  pinsrw(xmm3, eax, 3);\n-  movdqu(xmm4, xmm3);\n-  addsd(xmm3, xmm1);\n-  subsd(xmm4, xmm3);\n-  addsd(xmm1, xmm4);\n-  pextrw(eax, xmm1, 3);\n-  andl(eax, 32752);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_44_0_2);\n-  movdl(eax, xmm3);\n-  andl(eax, 1);\n-  jcc(Assembler::equal, L_2TAG_PACKET_44_0_2);\n-\n-  bind(L_2TAG_PACKET_46_0_2);\n-  movsd(xmm0, Address(rsp, 8));\n-  testl(ecx, INT_MIN);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_47_0_2);\n-  jmp(L_2TAG_PACKET_18_0_2);\n-\n-  bind(L_2TAG_PACKET_45_0_2);\n-  movsd(xmm1, Address(rsp, 16));\n-  movdl(eax, xmm1);\n-  testl(eax, 1);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_46_0_2);\n-\n-  bind(L_2TAG_PACKET_44_0_2);\n-  testl(ecx, INT_MIN);\n-  jcc(Assembler::equal, L_2TAG_PACKET_26_0_2);\n-  xorpd(xmm0, xmm0);\n-\n-  bind(L_2TAG_PACKET_47_0_2);\n-  movl(eax, 16368);\n-  xorpd(xmm1, xmm1);\n-  pinsrw(xmm1, eax, 3);\n-  divsd(xmm1, xmm0);\n-  movdqu(xmm0, xmm1);\n-  movl(edx, 27);\n-  jmp(L_2TAG_PACKET_21_0_2);\n-\n-  bind(L_2TAG_PACKET_14_0_2);\n-  movsd(xmm2, Address(rsp, 8));\n-  movsd(xmm6, Address(rsp, 16));\n-  pextrw(eax, xmm2, 3);\n-  pextrw(edx, xmm6, 3);\n-  movl(ecx, 32752);\n-  andl(ecx, edx);\n-  cmpl(ecx, 32752);\n-  jcc(Assembler::equal, L_2TAG_PACKET_48_0_2);\n-  andl(eax, 32752);\n-  subl(eax, 16368);\n-  xorl(edx, eax);\n-  testl(edx, 32768);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_49_0_2);\n-\n-  bind(L_2TAG_PACKET_50_0_2);\n-  movl(eax, 32736);\n-  pinsrw(xmm0, eax, 3);\n-  shrl(rsi, 16);\n-  orl(eax, rsi);\n-  pinsrw(xmm1, eax, 3);\n-  movl(rsi, Address(rsp, 24));\n-  mulsd(xmm0, xmm1);\n-\n-  bind(L_2TAG_PACKET_17_0_2);\n-  movl(edx, 24);\n-\n-  bind(L_2TAG_PACKET_21_0_2);\n-  movsd(Address(rsp, 0), xmm0);\n-  fld_d(Address(rsp, 0));\n-  jmp(L_2TAG_PACKET_6_0_2);\n-\n-  bind(L_2TAG_PACKET_49_0_2);\n-  movl(eax, 16);\n-  pinsrw(xmm0, eax, 3);\n-  mulsd(xmm0, xmm0);\n-  testl(rsi, INT_MIN);\n-  jcc(Assembler::equal, L_2TAG_PACKET_51_0_2);\n-  movsd(xmm2, Address(tmp, 12560));\n-  xorpd(xmm0, xmm2);\n-\n-  bind(L_2TAG_PACKET_51_0_2);\n-  movl(rsi, Address(rsp, 24));\n-  movl(edx, 25);\n-  jmp(L_2TAG_PACKET_21_0_2);\n-\n-  bind(L_2TAG_PACKET_16_0_2);\n-  pextrw(ecx, xmm5, 3);\n-  pextrw(edx, xmm4, 3);\n-  movl(eax, -1);\n-  andl(ecx, 32752);\n-  subl(ecx, 16368);\n-  andl(edx, 32752);\n-  addl(edx, ecx);\n-  movl(ecx, -31);\n-  sarl(edx, 4);\n-  subl(ecx, edx);\n-  jcc(Assembler::lessEqual, L_2TAG_PACKET_52_0_2);\n-  cmpl(ecx, 20);\n-  jcc(Assembler::above, L_2TAG_PACKET_53_0_2);\n-  shll(eax);\n-\n-  bind(L_2TAG_PACKET_52_0_2);\n-  movdl(xmm0, eax);\n-  psllq(xmm0, 32);\n-  pand(xmm0, xmm5);\n-  subsd(xmm5, xmm0);\n-  addsd(xmm5, xmm1);\n-  mulsd(xmm0, xmm4);\n-  mulsd(xmm5, xmm4);\n-  addsd(xmm0, xmm5);\n-\n-  bind(L_2TAG_PACKET_53_0_2);\n-  movl(edx, 25);\n-  jmp(L_2TAG_PACKET_21_0_2);\n-\n-  bind(L_2TAG_PACKET_2_0_2);\n-  movzwl(ecx, Address(rsp, 22));\n-  movl(edx, INT_MIN);\n-  movdl(xmm1, edx);\n-  xorpd(xmm7, xmm7);\n-  paddd(xmm0, xmm4);\n-  psllq(xmm5, 32);\n-  movdl(edx, xmm0);\n-  psllq(xmm0, 29);\n-  paddq(xmm1, xmm3);\n-  pand(xmm5, xmm1);\n-  andl(ecx, 32752);\n-  cmpl(ecx, 16560);\n-  jcc(Assembler::below, L_2TAG_PACKET_3_0_2);\n-  pand(xmm0, xmm6);\n-  subsd(xmm3, xmm5);\n-  addl(eax, 16351);\n-  shrl(eax, 4);\n-  subl(eax, 1022);\n-  cvtsi2sdl(xmm7, eax);\n-  mulpd(xmm5, xmm0);\n-  movsd(xmm4, Address(tmp, 0));\n-  mulsd(xmm3, xmm0);\n-  movsd(xmm6, Address(tmp, 0));\n-  subsd(xmm5, xmm2);\n-  movsd(xmm1, Address(tmp, 8));\n-  pshufd(xmm2, xmm3, 68);\n-  unpcklpd(xmm5, xmm3);\n-  addsd(xmm3, xmm5);\n-  movsd(xmm0, Address(tmp, 8));\n-  andl(edx, 16760832);\n-  shrl(edx, 10);\n-  addpd(xmm7, Address(tmp, edx, Address::times_1, -3616));\n-  mulsd(xmm4, xmm5);\n-  mulsd(xmm0, xmm5);\n-  mulsd(xmm6, xmm2);\n-  mulsd(xmm1, xmm2);\n-  movdqu(xmm2, xmm5);\n-  mulsd(xmm4, xmm5);\n-  addsd(xmm5, xmm0);\n-  movdqu(xmm0, xmm7);\n-  addsd(xmm2, xmm3);\n-  addsd(xmm7, xmm5);\n-  mulsd(xmm6, xmm2);\n-  subsd(xmm0, xmm7);\n-  movdqu(xmm2, xmm7);\n-  addsd(xmm7, xmm4);\n-  addsd(xmm0, xmm5);\n-  subsd(xmm2, xmm7);\n-  addsd(xmm4, xmm2);\n-  pshufd(xmm2, xmm5, 238);\n-  movdqu(xmm5, xmm7);\n-  addsd(xmm7, xmm2);\n-  addsd(xmm4, xmm0);\n-  movdqu(xmm0, Address(tmp, 8272));\n-  subsd(xmm5, xmm7);\n-  addsd(xmm6, xmm4);\n-  movdqu(xmm4, xmm7);\n-  addsd(xmm5, xmm2);\n-  addsd(xmm7, xmm1);\n-  movdqu(xmm2, Address(tmp, 8336));\n-  subsd(xmm4, xmm7);\n-  addsd(xmm6, xmm5);\n-  addsd(xmm4, xmm1);\n-  pshufd(xmm5, xmm7, 238);\n-  movdqu(xmm1, xmm7);\n-  addsd(xmm7, xmm5);\n-  subsd(xmm1, xmm7);\n-  addsd(xmm1, xmm5);\n-  movdqu(xmm5, Address(tmp, 8352));\n-  pshufd(xmm3, xmm3, 68);\n-  addsd(xmm6, xmm4);\n-  addsd(xmm6, xmm1);\n-  movdqu(xmm1, Address(tmp, 8304));\n-  mulpd(xmm0, xmm3);\n-  mulpd(xmm2, xmm3);\n-  pshufd(xmm4, xmm3, 68);\n-  mulpd(xmm3, xmm3);\n-  addpd(xmm0, xmm1);\n-  addpd(xmm5, xmm2);\n-  mulsd(xmm4, xmm3);\n-  movsd(xmm2, Address(tmp, 16));\n-  mulpd(xmm3, xmm3);\n-  movsd(xmm1, Address(rsp, 16));\n-  movzwl(ecx, Address(rsp, 22));\n-  mulpd(xmm0, xmm4);\n-  pextrw(eax, xmm7, 3);\n-  mulpd(xmm5, xmm4);\n-  mulpd(xmm0, xmm3);\n-  movsd(xmm4, Address(tmp, 8376));\n-  pand(xmm2, xmm7);\n-  addsd(xmm5, xmm6);\n-  subsd(xmm7, xmm2);\n-  addpd(xmm5, xmm0);\n-  andl(eax, 32752);\n-  subl(eax, 16368);\n-  andl(ecx, 32752);\n-  cmpl(ecx, 32752);\n-  jcc(Assembler::equal, L_2TAG_PACKET_48_0_2);\n-  addl(ecx, eax);\n-  cmpl(ecx, 16576);\n-  jcc(Assembler::aboveEqual, L_2TAG_PACKET_54_0_2);\n-  pshufd(xmm0, xmm5, 238);\n-  pand(xmm4, xmm1);\n-  movdqu(xmm3, xmm1);\n-  addsd(xmm5, xmm0);\n-  subsd(xmm1, xmm4);\n-  xorpd(xmm6, xmm6);\n-  movl(edx, 17080);\n-  pinsrw(xmm6, edx, 3);\n-  addsd(xmm7, xmm5);\n-  mulsd(xmm4, xmm2);\n-  mulsd(xmm1, xmm2);\n-  movdqu(xmm5, xmm6);\n-  mulsd(xmm3, xmm7);\n-  addsd(xmm6, xmm4);\n-  addsd(xmm1, xmm3);\n-  movdqu(xmm7, Address(tmp, 12480));\n-  movdl(edx, xmm6);\n-  subsd(xmm6, xmm5);\n-  movdqu(xmm3, Address(tmp, 12496));\n-  movsd(xmm2, Address(tmp, 12512));\n-  subsd(xmm4, xmm6);\n-  movl(ecx, edx);\n-  andl(edx, 255);\n-  addl(edx, edx);\n-  movdqu(xmm5, Address(tmp, edx, Address::times_8, 8384));\n-  addsd(xmm4, xmm1);\n-  pextrw(edx, xmm6, 3);\n-  shrl(ecx, 8);\n-  movl(eax, ecx);\n-  shrl(ecx, 1);\n-  subl(eax, ecx);\n-  shll(ecx, 20);\n-  movdl(xmm6, ecx);\n-  pshufd(xmm0, xmm4, 68);\n-  pshufd(xmm1, xmm4, 68);\n-  mulpd(xmm0, xmm0);\n-  mulpd(xmm7, xmm1);\n-  pshufd(xmm6, xmm6, 17);\n-  mulsd(xmm2, xmm4);\n-  andl(edx, 32767);\n-  cmpl(edx, 16529);\n-  jcc(Assembler::above, L_2TAG_PACKET_14_0_2);\n-  mulsd(xmm0, xmm0);\n-  paddd(xmm5, xmm6);\n-  addpd(xmm3, xmm7);\n-  mulsd(xmm2, xmm5);\n-  pshufd(xmm6, xmm5, 238);\n-  mulpd(xmm0, xmm3);\n-  addsd(xmm2, xmm6);\n-  pshufd(xmm3, xmm0, 238);\n-  addl(eax, 1023);\n-  shll(eax, 20);\n-  orl(eax, rsi);\n-  movdl(xmm4, eax);\n-  mulsd(xmm0, xmm5);\n-  mulsd(xmm3, xmm5);\n-  addsd(xmm0, xmm2);\n-  psllq(xmm4, 32);\n-  addsd(xmm0, xmm3);\n-  movdqu(xmm1, xmm0);\n-  addsd(xmm0, xmm5);\n-  movl(rsi, Address(rsp, 24));\n-  mulsd(xmm0, xmm4);\n-  pextrw(eax, xmm0, 3);\n-  andl(eax, 32752);\n-  jcc(Assembler::equal, L_2TAG_PACKET_16_0_2);\n-  cmpl(eax, 32752);\n-  jcc(Assembler::equal, L_2TAG_PACKET_17_0_2);\n-\n-  bind(L_2TAG_PACKET_55_0_2);\n-  movsd(Address(rsp, 0), xmm0);\n-  fld_d(Address(rsp, 0));\n-  jmp(L_2TAG_PACKET_6_0_2);\n-\n-  bind(L_2TAG_PACKET_48_0_2);\n-  movl(rsi, Address(rsp, 24));\n-\n-  bind(L_2TAG_PACKET_56_0_2);\n-  movsd(xmm0, Address(rsp, 8));\n-  movsd(xmm1, Address(rsp, 16));\n-  addsd(xmm1, xmm1);\n-  xorpd(xmm2, xmm2);\n-  movl(eax, 49136);\n-  pinsrw(xmm2, eax, 3);\n-  addsd(xmm2, xmm0);\n-  pextrw(eax, xmm2, 3);\n-  cmpl(eax, 0);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_57_0_2);\n-  xorpd(xmm0, xmm0);\n-  movl(eax, 32760);\n-  pinsrw(xmm0, eax, 3);\n-  jmp(L_2TAG_PACKET_18_0_2);\n-\n-  bind(L_2TAG_PACKET_57_0_2);\n-  movdl(edx, xmm1);\n-  movdqu(xmm3, xmm1);\n-  psrlq(xmm3, 20);\n-  movdl(ecx, xmm3);\n-  orl(ecx, edx);\n-  jcc(Assembler::equal, L_2TAG_PACKET_58_0_2);\n-  addsd(xmm1, xmm1);\n-  movdqu(xmm0, xmm1);\n-  jmp(L_2TAG_PACKET_18_0_2);\n-\n-  bind(L_2TAG_PACKET_58_0_2);\n-  pextrw(eax, xmm0, 3);\n-  andl(eax, 32752);\n-  pextrw(edx, xmm1, 3);\n-  xorpd(xmm0, xmm0);\n-  subl(eax, 16368);\n-  xorl(eax, edx);\n-  testl(eax, 32768);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_18_0_2);\n-  movl(edx, 32752);\n-  pinsrw(xmm0, edx, 3);\n-  jmp(L_2TAG_PACKET_18_0_2);\n-\n-  bind(L_2TAG_PACKET_54_0_2);\n-  pextrw(eax, xmm1, 3);\n-  pextrw(ecx, xmm2, 3);\n-  xorl(eax, ecx);\n-  testl(eax, 32768);\n-  jcc(Assembler::equal, L_2TAG_PACKET_50_0_2);\n-  jmp(L_2TAG_PACKET_49_0_2);\n-\n-  bind(L_2TAG_PACKET_6_0_2);\n-  movl(tmp, Address(rsp, 64));\n-\n-}\n-#endif\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86_pow.cpp","additions":0,"deletions":3653,"binary":false,"changes":3653,"status":"deleted"},{"patch":"@@ -1,2203 +0,0 @@\n-\/*\n-* Copyright (c) 2016, 2021, Intel Corporation. All rights reserved.\n-* Intel Math Library (LIBM) Source Code\n-*\n-* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-*\n-* This code is free software; you can redistribute it and\/or modify it\n-* under the terms of the GNU General Public License version 2 only, as\n-* published by the Free Software Foundation.\n-*\n-* This code is distributed in the hope that it will be useful, but WITHOUT\n-* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-* version 2 for more details (a copy is included in the LICENSE file that\n-* accompanied this code).\n-*\n-* You should have received a copy of the GNU General Public License version\n-* 2 along with this work; if not, write to the Free Software Foundation,\n-* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-*\n-* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-* or visit www.oracle.com if you need additional information or have any\n-* questions.\n-*\n-*\/\n-\n-#include \"precompiled.hpp\"\n-#include \"asm\/assembler.hpp\"\n-#include \"asm\/assembler.inline.hpp\"\n-#include \"macroAssembler_x86.hpp\"\n-#include \"runtime\/stubRoutines.hpp\"\n-#include \"stubRoutines_x86.hpp\"\n-#include \"utilities\/globalDefinitions.hpp\"\n-\n-\/******************************************************************************\/\n-\/\/                     ALGORITHM DESCRIPTION - SIN()\n-\/\/                     ---------------------\n-\/\/\n-\/\/     1. RANGE REDUCTION\n-\/\/\n-\/\/     We perform an initial range reduction from X to r with\n-\/\/\n-\/\/          X =~= N * pi\/32 + r\n-\/\/\n-\/\/     so that |r| <= pi\/64 + epsilon. We restrict inputs to those\n-\/\/     where |N| <= 932560. Beyond this, the range reduction is\n-\/\/     insufficiently accurate. For extremely small inputs,\n-\/\/     denormalization can occur internally, impacting performance.\n-\/\/     This means that the main path is actually only taken for\n-\/\/     2^-252 <= |X| < 90112.\n-\/\/\n-\/\/     To avoid branches, we perform the range reduction to full\n-\/\/     accuracy each time.\n-\/\/\n-\/\/          X - N * (P_1 + P_2 + P_3)\n-\/\/\n-\/\/     where P_1 and P_2 are 32-bit numbers (so multiplication by N\n-\/\/     is exact) and P_3 is a 53-bit number. Together, these\n-\/\/     approximate pi well enough for all cases in the restricted\n-\/\/     range.\n-\/\/\n-\/\/     The main reduction sequence is:\n-\/\/\n-\/\/             y = 32\/pi * x\n-\/\/             N = integer(y)\n-\/\/     (computed by adding and subtracting off SHIFTER)\n-\/\/\n-\/\/             m_1 = N * P_1\n-\/\/             m_2 = N * P_2\n-\/\/             r_1 = x - m_1\n-\/\/             r = r_1 - m_2\n-\/\/     (this r can be used for most of the calculation)\n-\/\/\n-\/\/             c_1 = r_1 - r\n-\/\/             m_3 = N * P_3\n-\/\/             c_2 = c_1 - m_2\n-\/\/             c = c_2 - m_3\n-\/\/\n-\/\/     2. MAIN ALGORITHM\n-\/\/\n-\/\/     The algorithm uses a table lookup based on B = M * pi \/ 32\n-\/\/     where M = N mod 64. The stored values are:\n-\/\/       sigma             closest power of 2 to cos(B)\n-\/\/       C_hl              53-bit cos(B) - sigma\n-\/\/       S_hi + S_lo       2 * 53-bit sin(B)\n-\/\/\n-\/\/     The computation is organized as follows:\n-\/\/\n-\/\/          sin(B + r + c) = [sin(B) + sigma * r] +\n-\/\/                           r * (cos(B) - sigma) +\n-\/\/                           sin(B) * [cos(r + c) - 1] +\n-\/\/                           cos(B) * [sin(r + c) - r]\n-\/\/\n-\/\/     which is approximately:\n-\/\/\n-\/\/          [S_hi + sigma * r] +\n-\/\/          C_hl * r +\n-\/\/          S_lo + S_hi * [(cos(r) - 1) - r * c] +\n-\/\/          (C_hl + sigma) * [(sin(r) - r) + c]\n-\/\/\n-\/\/     and this is what is actually computed. We separate this sum\n-\/\/     into four parts:\n-\/\/\n-\/\/          hi + med + pols + corr\n-\/\/\n-\/\/     where\n-\/\/\n-\/\/          hi       = S_hi + sigma r\n-\/\/          med      = C_hl * r\n-\/\/          pols     = S_hi * (cos(r) - 1) + (C_hl + sigma) * (sin(r) - r)\n-\/\/          corr     = S_lo + c * ((C_hl + sigma) - S_hi * r)\n-\/\/\n-\/\/     3. POLYNOMIAL\n-\/\/\n-\/\/     The polynomial S_hi * (cos(r) - 1) + (C_hl + sigma) *\n-\/\/     (sin(r) - r) can be rearranged freely, since it is quite\n-\/\/     small, so we exploit parallelism to the fullest.\n-\/\/\n-\/\/          psc4       =   SC_4 * r_1\n-\/\/          msc4       =   psc4 * r\n-\/\/          r2         =   r * r\n-\/\/          msc2       =   SC_2 * r2\n-\/\/          r4         =   r2 * r2\n-\/\/          psc3       =   SC_3 + msc4\n-\/\/          psc1       =   SC_1 + msc2\n-\/\/          msc3       =   r4 * psc3\n-\/\/          sincospols =   psc1 + msc3\n-\/\/          pols       =   sincospols *\n-\/\/                         <S_hi * r^2 | (C_hl + sigma) * r^3>\n-\/\/\n-\/\/     4. CORRECTION TERM\n-\/\/\n-\/\/     This is where the \"c\" component of the range reduction is\n-\/\/     taken into account; recall that just \"r\" is used for most of\n-\/\/     the calculation.\n-\/\/\n-\/\/          -c   = m_3 - c_2\n-\/\/          -d   = S_hi * r - (C_hl + sigma)\n-\/\/          corr = -c * -d + S_lo\n-\/\/\n-\/\/     5. COMPENSATED SUMMATIONS\n-\/\/\n-\/\/     The two successive compensated summations add up the high\n-\/\/     and medium parts, leaving just the low parts to add up at\n-\/\/     the end.\n-\/\/\n-\/\/          rs        =  sigma * r\n-\/\/          res_int   =  S_hi + rs\n-\/\/          k_0       =  S_hi - res_int\n-\/\/          k_2       =  k_0 + rs\n-\/\/          med       =  C_hl * r\n-\/\/          res_hi    =  res_int + med\n-\/\/          k_1       =  res_int - res_hi\n-\/\/          k_3       =  k_1 + med\n-\/\/\n-\/\/     6. FINAL SUMMATION\n-\/\/\n-\/\/     We now add up all the small parts:\n-\/\/\n-\/\/          res_lo = pols(hi) + pols(lo) + corr + k_1 + k_3\n-\/\/\n-\/\/     Now the overall result is just:\n-\/\/\n-\/\/          res_hi + res_lo\n-\/\/\n-\/\/     7. SMALL ARGUMENTS\n-\/\/\n-\/\/     If |x| < SNN (SNN meaning the smallest normal number), we\n-\/\/     simply perform 0.1111111 cdots 1111 * x. For SNN <= |x|, we\n-\/\/     do 2^-55 * (2^55 * x - x).\n-\/\/\n-\/\/ Special cases:\n-\/\/  sin(NaN) = quiet NaN, and raise invalid exception\n-\/\/  sin(INF) = NaN and raise invalid exception\n-\/\/  sin(+\/-0) = +\/-0\n-\/\/\n-\/******************************************************************************\/\n-\n-#ifdef _LP64\n-\/\/ The 64 bit code is at most SSE2 compliant\n-ATTRIBUTE_ALIGNED(8) juint _ALL_ONES[] =\n-{\n-    0xffffffffUL, 0x3fefffffUL\n-};\n-\n-void MacroAssembler::fast_sin(XMMRegister xmm0, XMMRegister xmm1, XMMRegister xmm2, XMMRegister xmm3,\n-                              XMMRegister xmm4, XMMRegister xmm5, XMMRegister xmm6, XMMRegister xmm7,\n-                              Register eax, Register ebx, Register ecx, Register edx, Register tmp) {\n-  Label L_2TAG_PACKET_0_0_1, L_2TAG_PACKET_1_0_1, L_2TAG_PACKET_2_0_1, L_2TAG_PACKET_3_0_1;\n-  Label L_2TAG_PACKET_4_0_1, L_2TAG_PACKET_5_0_1, L_2TAG_PACKET_6_0_1, L_2TAG_PACKET_7_0_1;\n-  Label L_2TAG_PACKET_8_0_1, L_2TAG_PACKET_9_0_1, L_2TAG_PACKET_10_0_1, L_2TAG_PACKET_11_0_1;\n-  Label L_2TAG_PACKET_13_0_1, L_2TAG_PACKET_14_0_1;\n-  Label L_2TAG_PACKET_12_0_1, B1_4;\n-\n-  assert_different_registers(tmp, eax, ebx, ecx, edx);\n-\n-  address ALL_ONES = (address)_ALL_ONES;\n-\n-  push(rbx);\n-  subq(rsp, 16);\n-  movsd(Address(rsp, 8), xmm0);\n-  movl(eax, Address(rsp, 12));\n-  movq(xmm1, ExternalAddress(PI32INV), tmp \/*rscratch*\/); \/\/0x6dc9c883UL, 0x40245f30UL\n-  movq(xmm2, ExternalAddress(SHIFTER), tmp \/*rscratch*\/); \/\/0x00000000UL, 0x43380000UL\n-  andl(eax, 2147418112);\n-  subl(eax, 808452096);\n-  cmpl(eax, 281346048);\n-  jcc(Assembler::above, L_2TAG_PACKET_0_0_1);\n-  mulsd(xmm1, xmm0);\n-  movdqu(xmm5, ExternalAddress(ONEHALF), tmp \/*rscratch*\/); \/\/0x00000000UL, 0x3fe00000UL, 0x00000000UL, 0x3fe00000UL\n-  movq(xmm4, ExternalAddress(SIGN_MASK), tmp \/*rscratch*\/); \/\/0x00000000UL, 0x80000000UL\n-  pand(xmm4, xmm0);\n-  por(xmm5, xmm4);\n-  addpd(xmm1, xmm5);\n-  cvttsd2sil(edx, xmm1);\n-  cvtsi2sdl(xmm1, edx);\n-  movdqu(xmm6, ExternalAddress(P_2), tmp \/*rscratch*\/); \/\/0x1a600000UL, 0x3d90b461UL, 0x1a600000UL, 0x3d90b461UL\n-  mov64(r8, 0x3fb921fb54400000);\n-  movdq(xmm3, r8);\n-  movdqu(xmm5, ExternalAddress(SC_4), tmp \/*rscratch*\/); \/\/0xa556c734UL, 0x3ec71de3UL, 0x1a01a01aUL, 0x3efa01a0UL\n-  pshufd(xmm4, xmm0, 68);\n-  mulsd(xmm3, xmm1);\n-  if (VM_Version::supports_sse3()) {\n-    movddup(xmm1, xmm1);\n-  } else {\n-    movlhps(xmm1, xmm1);\n-  }\n-  andl(edx, 63);\n-  shll(edx, 5);\n-  lea(rax, ExternalAddress(Ctable));\n-  addq(rax, rdx);\n-  mulpd(xmm6, xmm1);\n-  mulsd(xmm1, ExternalAddress(P_3), tmp \/*rscratch*\/); \/\/0x2e037073UL, 0x3b63198aUL\n-  subsd(xmm4, xmm3);\n-  movq(xmm7, Address(rax, 8));\n-  subsd(xmm0, xmm3);\n-  if (VM_Version::supports_sse3()) {\n-    movddup(xmm3, xmm4);\n-  } else {\n-    movdqu(xmm3, xmm4);\n-    movlhps(xmm3, xmm3);\n-  }\n-  subsd(xmm4, xmm6);\n-  pshufd(xmm0, xmm0, 68);\n-  movdqu(xmm2, Address(rax, 0));\n-  mulpd(xmm5, xmm0);\n-  subpd(xmm0, xmm6);\n-  mulsd(xmm7, xmm4);\n-  subsd(xmm3, xmm4);\n-  mulpd(xmm5, xmm0);\n-  mulpd(xmm0, xmm0);\n-  subsd(xmm3, xmm6);\n-  movdqu(xmm6, ExternalAddress(SC_2), tmp \/*rscratch*\/); \/\/0x11111111UL, 0x3f811111UL, 0x55555555UL, 0x3fa55555UL\n-  subsd(xmm1, xmm3);\n-  movq(xmm3, Address(rax, 24));\n-  addsd(xmm2, xmm3);\n-  subsd(xmm7, xmm2);\n-  mulsd(xmm2, xmm4);\n-  mulpd(xmm6, xmm0);\n-  mulsd(xmm3, xmm4);\n-  mulpd(xmm2, xmm0);\n-  mulpd(xmm0, xmm0);\n-  addpd(xmm5, ExternalAddress(SC_3), tmp \/*rscratch*\/); \/\/0x1a01a01aUL, 0xbf2a01a0UL, 0x16c16c17UL, 0xbf56c16cUL\n-  mulsd(xmm4, Address(rax, 0));\n-  addpd(xmm6, ExternalAddress(SC_1), tmp \/*rscratch*\/); \/\/0x55555555UL, 0xbfc55555UL, 0x00000000UL, 0xbfe00000UL\n-  mulpd(xmm5, xmm0);\n-  movdqu(xmm0, xmm3);\n-  addsd(xmm3, Address(rax, 8));\n-  mulpd(xmm1, xmm7);\n-  movdqu(xmm7, xmm4);\n-  addsd(xmm4, xmm3);\n-  addpd(xmm6, xmm5);\n-  movq(xmm5, Address(rax, 8));\n-  subsd(xmm5, xmm3);\n-  subsd(xmm3, xmm4);\n-  addsd(xmm1, Address(rax, 16));\n-  mulpd(xmm6, xmm2);\n-  addsd(xmm5, xmm0);\n-  addsd(xmm3, xmm7);\n-  addsd(xmm1, xmm5);\n-  addsd(xmm1, xmm3);\n-  addsd(xmm1, xmm6);\n-  unpckhpd(xmm6, xmm6);\n-  movdqu(xmm0, xmm4);\n-  addsd(xmm1, xmm6);\n-  addsd(xmm0, xmm1);\n-  jmp(B1_4);\n-\n-  bind(L_2TAG_PACKET_0_0_1);\n-  jcc(Assembler::greater, L_2TAG_PACKET_1_0_1);\n-  shrl(eax, 20);\n-  cmpl(eax, 3325);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_2_0_1);\n-  mulsd(xmm0, ExternalAddress(ALL_ONES), tmp \/*rscratch*\/); \/\/0xffffffffUL, 0x3fefffffUL\n-  jmp(B1_4);\n-\n-  bind(L_2TAG_PACKET_2_0_1);\n-  movq(xmm3, ExternalAddress(TWO_POW_55), tmp \/*rscratch*\/); \/\/0x00000000UL, 0x43600000UL\n-  mulsd(xmm3, xmm0);\n-  subsd(xmm3, xmm0);\n-  mulsd(xmm3, ExternalAddress(TWO_POW_M55), tmp \/*rscratch*\/); \/\/0x00000000UL, 0x3c800000UL\n-  jmp(B1_4);\n-\n-  bind(L_2TAG_PACKET_1_0_1);\n-  pextrw(eax, xmm0, 3);\n-  andl(eax, 32752);\n-  cmpl(eax, 32752);\n-  jcc(Assembler::equal, L_2TAG_PACKET_3_0_1);\n-  pextrw(ecx, xmm0, 3);\n-  andl(ecx, 32752);\n-  subl(ecx, 16224);\n-  shrl(ecx, 7);\n-  andl(ecx, 65532);\n-  lea(r11, ExternalAddress(PI_INV_TABLE));\n-  addq(rcx, r11);\n-  movdq(rax, xmm0);\n-  movl(r10, Address(rcx, 20));\n-  movl(r8, Address(rcx, 24));\n-  movl(edx, eax);\n-  shrq(rax, 21);\n-  orl(eax, INT_MIN);\n-  shrl(eax, 11);\n-  movl(r9, r10);\n-  imulq(r10, rdx);\n-  imulq(r9, rax);\n-  imulq(r8, rax);\n-  movl(rsi, Address(rcx, 16));\n-  movl(rdi, Address(rcx, 12));\n-  movl(r11, r10);\n-  shrq(r10, 32);\n-  addq(r9, r10);\n-  addq(r11, r8);\n-  movl(r8, r11);\n-  shrq(r11, 32);\n-  addq(r9, r11);\n-  movl(r10, rsi);\n-  imulq(rsi, rdx);\n-  imulq(r10, rax);\n-  movl(r11, rdi);\n-  imulq(rdi, rdx);\n-  movl(ebx, rsi);\n-  shrq(rsi, 32);\n-  addq(r9, rbx);\n-  movl(ebx, r9);\n-  shrq(r9, 32);\n-  addq(r10, rsi);\n-  addq(r10, r9);\n-  shlq(rbx, 32);\n-  orq(r8, rbx);\n-  imulq(r11, rax);\n-  movl(r9, Address(rcx, 8));\n-  movl(rsi, Address(rcx, 4));\n-  movl(ebx, rdi);\n-  shrq(rdi, 32);\n-  addq(r10, rbx);\n-  movl(ebx, r10);\n-  shrq(r10, 32);\n-  addq(r11, rdi);\n-  addq(r11, r10);\n-  movq(rdi, r9);\n-  imulq(r9, rdx);\n-  imulq(rdi, rax);\n-  movl(r10, r9);\n-  shrq(r9, 32);\n-  addq(r11, r10);\n-  movl(r10, r11);\n-  shrq(r11, 32);\n-  addq(rdi, r9);\n-  addq(rdi, r11);\n-  movq(r9, rsi);\n-  imulq(rsi, rdx);\n-  imulq(r9, rax);\n-  shlq(r10, 32);\n-  orq(r10, rbx);\n-  movl(eax, Address(rcx, 0));\n-  movl(r11, rsi);\n-  shrq(rsi, 32);\n-  addq(rdi, r11);\n-  movl(r11, rdi);\n-  shrq(rdi, 32);\n-  addq(r9, rsi);\n-  addq(r9, rdi);\n-  imulq(rdx, rax);\n-  pextrw(ebx, xmm0, 3);\n-  lea(rdi, ExternalAddress(PI_INV_TABLE));\n-  subq(rcx, rdi);\n-  addl(ecx, ecx);\n-  addl(ecx, ecx);\n-  addl(ecx, ecx);\n-  addl(ecx, 19);\n-  movl(rsi, 32768);\n-  andl(rsi, ebx);\n-  shrl(ebx, 4);\n-  andl(ebx, 2047);\n-  subl(ebx, 1023);\n-  subl(ecx, ebx);\n-  addq(r9, rdx);\n-  movl(edx, ecx);\n-  addl(edx, 32);\n-  cmpl(ecx, 1);\n-  jcc(Assembler::less, L_2TAG_PACKET_4_0_1);\n-  negl(ecx);\n-  addl(ecx, 29);\n-  shll(r9);\n-  movl(rdi, r9);\n-  andl(r9, 536870911);\n-  testl(r9, 268435456);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_5_0_1);\n-  shrl(r9);\n-  movl(ebx, 0);\n-  shlq(r9, 32);\n-  orq(r9, r11);\n-\n-  bind(L_2TAG_PACKET_6_0_1);\n-\n-  bind(L_2TAG_PACKET_7_0_1);\n-\n-  cmpq(r9, 0);\n-  jcc(Assembler::equal, L_2TAG_PACKET_8_0_1);\n-\n-  bind(L_2TAG_PACKET_9_0_1);\n-  bsrq(r11, r9);\n-  movl(ecx, 29);\n-  subl(ecx, r11);\n-  jcc(Assembler::lessEqual, L_2TAG_PACKET_10_0_1);\n-  shlq(r9);\n-  movq(rax, r10);\n-  shlq(r10);\n-  addl(edx, ecx);\n-  negl(ecx);\n-  addl(ecx, 64);\n-  shrq(rax);\n-  shrq(r8);\n-  orq(r9, rax);\n-  orq(r10, r8);\n-\n-  bind(L_2TAG_PACKET_11_0_1);\n-  cvtsi2sdq(xmm0, r9);\n-  shrq(r10, 1);\n-  cvtsi2sdq(xmm3, r10);\n-  xorpd(xmm4, xmm4);\n-  shll(edx, 4);\n-  negl(edx);\n-  addl(edx, 16368);\n-  orl(edx, rsi);\n-  xorl(edx, ebx);\n-  pinsrw(xmm4, edx, 3);\n-  movq(xmm2, ExternalAddress(PI_4),     tmp \/*rscratch*\/); \/\/0x40000000UL, 0x3fe921fbUL, 0x18469899UL, 0x3e64442dUL\n-  movq(xmm6, ExternalAddress(PI_4 + 8), tmp \/*rscratch*\/); \/\/0x3fe921fbUL, 0x18469899UL, 0x3e64442dUL\n-  xorpd(xmm5, xmm5);\n-  subl(edx, 1008);\n-  pinsrw(xmm5, edx, 3);\n-  mulsd(xmm0, xmm4);\n-  shll(rsi, 16);\n-  sarl(rsi, 31);\n-  mulsd(xmm3, xmm5);\n-  movdqu(xmm1, xmm0);\n-  mulsd(xmm0, xmm2);\n-  shrl(rdi, 29);\n-  addsd(xmm1, xmm3);\n-  mulsd(xmm3, xmm2);\n-  addl(rdi, rsi);\n-  xorl(rdi, rsi);\n-  mulsd(xmm6, xmm1);\n-  movl(eax, rdi);\n-  addsd(xmm6, xmm3);\n-  movdqu(xmm2, xmm0);\n-  addsd(xmm0, xmm6);\n-  subsd(xmm2, xmm0);\n-  addsd(xmm6, xmm2);\n-\n-  bind(L_2TAG_PACKET_12_0_1);\n-  movq(xmm1, ExternalAddress(PI32INV), tmp \/*rscratch*\/);    \/\/0x6dc9c883UL, 0x40245f30UL\n-  mulsd(xmm1, xmm0);\n-  movq(xmm5, ExternalAddress(ONEHALF), tmp \/*rscratch*\/);    \/\/0x00000000UL, 0x3fe00000UL, 0x00000000UL, 0x3fe00000UL\n-  movq(xmm4, ExternalAddress(SIGN_MASK), tmp \/*rscratch*\/);  \/\/0x00000000UL, 0x80000000UL\n-  pand(xmm4, xmm0);\n-  por(xmm5, xmm4);\n-  addpd(xmm1, xmm5);\n-  cvttsd2sil(edx, xmm1);\n-  cvtsi2sdl(xmm1, edx);\n-  movq(xmm3, ExternalAddress(P_1), tmp \/*rscratch*\/);      \/\/0x54400000UL, 0x3fb921fbUL\n-  movdqu(xmm2, ExternalAddress(P_2), tmp \/*rscratch*\/);    \/\/0x1a600000UL, 0x3d90b461UL, 0x1a600000UL, 0x3d90b461UL\n-  mulsd(xmm3, xmm1);\n-  unpcklpd(xmm1, xmm1);\n-  shll(eax, 3);\n-  addl(edx, 1865216);\n-  movdqu(xmm4, xmm0);\n-  addl(edx, eax);\n-  andl(edx, 63);\n-  movdqu(xmm5, ExternalAddress(SC_4), tmp \/*rscratch*\/);    \/\/0x54400000UL, 0x3fb921fbUL\n-  lea(rax, ExternalAddress(Ctable));\n-  shll(edx, 5);\n-  addq(rax, rdx);\n-  mulpd(xmm2, xmm1);\n-  subsd(xmm0, xmm3);\n-  mulsd(xmm1, ExternalAddress(P_3), tmp \/*rscratch*\/);    \/\/0x2e037073UL, 0x3b63198aUL\n-  subsd(xmm4, xmm3);\n-  movq(xmm7, Address(rax, 8));\n-  unpcklpd(xmm0, xmm0);\n-  movdqu(xmm3, xmm4);\n-  subsd(xmm4, xmm2);\n-  mulpd(xmm5, xmm0);\n-  subpd(xmm0, xmm2);\n-  mulsd(xmm7, xmm4);\n-  subsd(xmm3, xmm4);\n-  mulpd(xmm5, xmm0);\n-  mulpd(xmm0, xmm0);\n-  subsd(xmm3, xmm2);\n-  movdqu(xmm2, Address(rax, 0));\n-  subsd(xmm1, xmm3);\n-  movq(xmm3, Address(rax, 24));\n-  addsd(xmm2, xmm3);\n-  subsd(xmm7, xmm2);\n-  subsd(xmm1, xmm6);\n-  movdqu(xmm6, ExternalAddress(SC_2), tmp \/*rscratch*\/);    \/\/0x11111111UL, 0x3f811111UL, 0x55555555UL, 0x3fa55555UL\n-  mulsd(xmm2, xmm4);\n-  mulpd(xmm6, xmm0);\n-  mulsd(xmm3, xmm4);\n-  mulpd(xmm2, xmm0);\n-  mulpd(xmm0, xmm0);\n-  addpd(xmm5, ExternalAddress(SC_3), tmp \/*rscratch*\/);    \/\/0x1a01a01aUL, 0xbf2a01a0UL, 0x16c16c17UL, 0xbf56c16cUL\n-  mulsd(xmm4, Address(rax, 0));\n-  addpd(xmm6, ExternalAddress(SC_1), tmp \/*rscratch*\/);    \/\/0x55555555UL, 0xbfc55555UL, 0x00000000UL, 0xbfe00000UL\n-  mulpd(xmm5, xmm0);\n-  movdqu(xmm0, xmm3);\n-  addsd(xmm3, Address(rax, 8));\n-  mulpd(xmm1, xmm7);\n-  movdqu(xmm7, xmm4);\n-  addsd(xmm4, xmm3);\n-  addpd(xmm6, xmm5);\n-  movq(xmm5, Address(rax, 8));\n-  subsd(xmm5, xmm3);\n-  subsd(xmm3, xmm4);\n-  addsd(xmm1, Address(rax, 16));\n-  mulpd(xmm6, xmm2);\n-  addsd(xmm5, xmm0);\n-  addsd(xmm3, xmm7);\n-  addsd(xmm1, xmm5);\n-  addsd(xmm1, xmm3);\n-  addsd(xmm1, xmm6);\n-  unpckhpd(xmm6, xmm6);\n-  movdqu(xmm0, xmm4);\n-  addsd(xmm1, xmm6);\n-  addsd(xmm0, xmm1);\n-  jmp(B1_4);\n-\n-  bind(L_2TAG_PACKET_8_0_1);\n-  addl(edx, 64);\n-  movq(r9, r10);\n-  movq(r10, r8);\n-  movl(r8, 0);\n-  cmpq(r9, 0);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_9_0_1);\n-  addl(edx, 64);\n-  movq(r9, r10);\n-  movq(r10, r8);\n-  cmpq(r9, 0);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_9_0_1);\n-  xorpd(xmm0, xmm0);\n-  xorpd(xmm6, xmm6);\n-  jmp(L_2TAG_PACKET_12_0_1);\n-\n-  bind(L_2TAG_PACKET_10_0_1);\n-  jcc(Assembler::equal, L_2TAG_PACKET_11_0_1);\n-  negl(ecx);\n-  shrq(r10);\n-  movq(rax, r9);\n-  shrq(r9);\n-  subl(edx, ecx);\n-  negl(ecx);\n-  addl(ecx, 64);\n-  shlq(rax);\n-  orq(r10, rax);\n-  jmp(L_2TAG_PACKET_11_0_1);\n-\n-  bind(L_2TAG_PACKET_4_0_1);\n-  negl(ecx);\n-  shlq(r9, 32);\n-  orq(r9, r11);\n-  shlq(r9);\n-  movq(rdi, r9);\n-  testl(r9, INT_MIN);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_13_0_1);\n-  shrl(r9);\n-  movl(ebx, 0);\n-  shrq(rdi, 3);\n-  jmp(L_2TAG_PACKET_7_0_1);\n-\n-  bind(L_2TAG_PACKET_5_0_1);\n-  shrl(r9);\n-  movl(ebx, 536870912);\n-  shrl(ebx);\n-  shlq(r9, 32);\n-  orq(r9, r11);\n-  shlq(rbx, 32);\n-  addl(rdi, 536870912);\n-  movl(rcx, 0);\n-  movl(r11, 0);\n-  subq(rcx, r8);\n-  sbbq(r11, r10);\n-  sbbq(rbx, r9);\n-  movq(r8, rcx);\n-  movq(r10, r11);\n-  movq(r9, rbx);\n-  movl(ebx, 32768);\n-  jmp(L_2TAG_PACKET_6_0_1);\n-\n-  bind(L_2TAG_PACKET_13_0_1);\n-  shrl(r9);\n-  mov64(rbx, 0x100000000);\n-  shrq(rbx);\n-  movl(rcx, 0);\n-  movl(r11, 0);\n-  subq(rcx, r8);\n-  sbbq(r11, r10);\n-  sbbq(rbx, r9);\n-  movq(r8, rcx);\n-  movq(r10, r11);\n-  movq(r9, rbx);\n-  movl(ebx, 32768);\n-  shrq(rdi, 3);\n-  addl(rdi, 536870912);\n-  jmp(L_2TAG_PACKET_7_0_1);\n-\n-  bind(L_2TAG_PACKET_3_0_1);\n-  movq(xmm0, Address(rsp, 8));\n-  mulsd(xmm0, ExternalAddress(NEG_ZERO), tmp \/*rscratch*\/);    \/\/0x00000000UL, 0x80000000UL\n-  movq(Address(rsp, 0), xmm0);\n-\n-  bind(L_2TAG_PACKET_14_0_1);\n-\n-  bind(B1_4);\n-  addq(rsp, 16);\n-  pop(rbx);\n-}\n-#else\n-\/\/ The 32 bit code is at most SSE2 compliant\n-ATTRIBUTE_ALIGNED(8) juint _zero_none[] =\n-{\n-    0x00000000UL, 0x00000000UL, 0x00000000UL, 0xbff00000UL\n-};\n-\n-ATTRIBUTE_ALIGNED(4) juint __4onpi_d[] =\n-{\n-    0x6dc9c883UL, 0x3ff45f30UL\n-};\n-\n-ATTRIBUTE_ALIGNED(4) juint _TWO_32H[] =\n-{\n-    0x00000000UL, 0x41f80000UL\n-};\n-\n-ATTRIBUTE_ALIGNED(4) juint _pi04_3d[] =\n-{\n-    0x54442d00UL, 0x3fe921fbUL, 0x98cc5180UL, 0x3ce84698UL, 0xcbb5bf6cUL,\n-    0xb9dfc8f8UL\n-};\n-\n-ATTRIBUTE_ALIGNED(4) juint _pi04_5d[] =\n-{\n-    0x54400000UL, 0x3fe921fbUL, 0x1a600000UL, 0x3dc0b461UL, 0x2e000000UL,\n-    0x3b93198aUL, 0x25200000UL, 0x396b839aUL, 0x533e63a0UL, 0x37027044UL\n-};\n-\n-ATTRIBUTE_ALIGNED(4) juint _SCALE[] =\n-{\n-    0x00000000UL, 0x32600000UL\n-};\n-\n-ATTRIBUTE_ALIGNED(4) juint _zeros[] =\n-{\n-    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x80000000UL\n-};\n-\n-ATTRIBUTE_ALIGNED(4) juint _pi04_2d[] =\n-{\n-    0x54400000UL, 0x3fe921fbUL, 0x1a626331UL, 0x3dc0b461UL\n-};\n-\n-ATTRIBUTE_ALIGNED(4) juint _TWO_12H[] =\n-{\n-    0x00000000UL, 0x40b80000UL\n-};\n-\n-ATTRIBUTE_ALIGNED(2) jushort __4onpi_31l[] =\n-{\n-    0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x836e, 0xa2f9,\n-    0x40d8, 0x0000, 0x0000, 0x0000, 0x2a50, 0x9c88, 0x40b7, 0x0000, 0x0000, 0x0000,\n-    0xabe8, 0xfe13, 0x4099, 0x0000, 0x0000, 0x0000, 0x6ee0, 0xfa9a, 0x4079, 0x0000,\n-    0x0000, 0x0000, 0x9580, 0xdb62, 0x4058, 0x0000, 0x0000, 0x0000, 0x1c82, 0xc9e2,\n-    0x403d, 0x0000, 0x0000, 0x0000, 0xb1c0, 0xff28, 0x4019, 0x0000, 0x0000, 0x0000,\n-    0xef14, 0xaf7a, 0x3ffe, 0x0000, 0x0000, 0x0000, 0x48dc, 0xc36e, 0x3fdf, 0x0000,\n-    0x0000, 0x0000, 0x3740, 0xe909, 0x3fbe, 0x0000, 0x0000, 0x0000, 0x924a, 0xb801,\n-    0x3fa2, 0x0000, 0x0000, 0x0000, 0x3a32, 0xdd41, 0x3f83, 0x0000, 0x0000, 0x0000,\n-    0x8778, 0x873f, 0x3f62, 0x0000, 0x0000, 0x0000, 0x1298, 0xb1cb, 0x3f44, 0x0000,\n-    0x0000, 0x0000, 0xa208, 0x9cfb, 0x3f26, 0x0000, 0x0000, 0x0000, 0xbaec, 0xd7d4,\n-    0x3f06, 0x0000, 0x0000, 0x0000, 0xd338, 0x8909, 0x3ee7, 0x0000, 0x0000, 0x0000,\n-    0x68b8, 0xe04d, 0x3ec7, 0x0000, 0x0000, 0x0000, 0x4e64, 0xdf90, 0x3eaa, 0x0000,\n-    0x0000, 0x0000, 0xc1a8, 0xeb1c, 0x3e89, 0x0000, 0x0000, 0x0000, 0x2720, 0xce7d,\n-    0x3e6a, 0x0000, 0x0000, 0x0000, 0x77b8, 0x8bf1, 0x3e4b, 0x0000, 0x0000, 0x0000,\n-    0xec7e, 0xe4a0, 0x3e2e, 0x0000, 0x0000, 0x0000, 0xffbc, 0xf12f, 0x3e0f, 0x0000,\n-    0x0000, 0x0000, 0xfdc0, 0xb301, 0x3deb, 0x0000, 0x0000, 0x0000, 0xc5ac, 0x9788,\n-    0x3dd1, 0x0000, 0x0000, 0x0000, 0x47da, 0x829b, 0x3db2, 0x0000, 0x0000, 0x0000,\n-    0xd9e4, 0xa6cf, 0x3d93, 0x0000, 0x0000, 0x0000, 0x36e8, 0xf961, 0x3d73, 0x0000,\n-    0x0000, 0x0000, 0xf668, 0xf463, 0x3d54, 0x0000, 0x0000, 0x0000, 0x5168, 0xf2ff,\n-    0x3d35, 0x0000, 0x0000, 0x0000, 0x758e, 0xea4f, 0x3d17, 0x0000, 0x0000, 0x0000,\n-    0xf17a, 0xebe5, 0x3cf8, 0x0000, 0x0000, 0x0000, 0x9cfa, 0x9e83, 0x3cd9, 0x0000,\n-    0x0000, 0x0000, 0xa4ba, 0xe294, 0x3cba, 0x0000, 0x0000, 0x0000, 0xd7ec, 0x9afe,\n-    0x3c9a, 0x0000, 0x0000, 0x0000, 0xae80, 0x8fc6, 0x3c79, 0x0000, 0x0000, 0x0000,\n-    0x3304, 0x8560, 0x3c5c, 0x0000, 0x0000, 0x0000, 0x6d70, 0xdf8f, 0x3c3b, 0x0000,\n-    0x0000, 0x0000, 0x3ef0, 0xafc3, 0x3c1e, 0x0000, 0x0000, 0x0000, 0xd0d8, 0x826b,\n-    0x3bfe, 0x0000, 0x0000, 0x0000, 0x1c80, 0xed4f, 0x3bdd, 0x0000, 0x0000, 0x0000,\n-    0x730c, 0xb0af, 0x3bc1, 0x0000, 0x0000, 0x0000, 0x6660, 0xc219, 0x3ba2, 0x0000,\n-    0x0000, 0x0000, 0x940c, 0xabe2, 0x3b83, 0x0000, 0x0000, 0x0000, 0xdffc, 0x8408,\n-    0x3b64, 0x0000, 0x0000, 0x0000, 0x6b98, 0xc402, 0x3b45, 0x0000, 0x0000, 0x0000,\n-    0x1818, 0x9cc4, 0x3b26, 0x0000, 0x0000, 0x0000, 0x5390, 0xaab6, 0x3b05, 0x0000,\n-    0x0000, 0x0000, 0xb070, 0xd464, 0x3ae9, 0x0000, 0x0000, 0x0000, 0x231a, 0x9ef0,\n-    0x3aca, 0x0000, 0x0000, 0x0000, 0x0670, 0xd1f1, 0x3aaa, 0x0000, 0x0000, 0x0000,\n-    0x7738, 0xd9f3, 0x3a8a, 0x0000, 0x0000, 0x0000, 0xa834, 0x8092, 0x3a6c, 0x0000,\n-    0x0000, 0x0000, 0xb45c, 0xce23, 0x3a4d, 0x0000, 0x0000, 0x0000, 0x36e8, 0xb0e5,\n-    0x3a2d, 0x0000, 0x0000, 0x0000, 0xd156, 0xaf44, 0x3a10, 0x0000, 0x0000, 0x0000,\n-    0x9f52, 0x8c82, 0x39f1, 0x0000, 0x0000, 0x0000, 0x829c, 0xff83, 0x39d1, 0x0000,\n-    0x0000, 0x0000, 0x7d06, 0xefc6, 0x39b3, 0x0000, 0x0000, 0x0000, 0x93e0, 0xb0b7,\n-    0x3992, 0x0000, 0x0000, 0x0000, 0xedde, 0xc193, 0x3975, 0x0000, 0x0000, 0x0000,\n-    0xbbc0, 0xcf49, 0x3952, 0x0000, 0x0000, 0x0000, 0xbdf0, 0xd63c, 0x3937, 0x0000,\n-    0x0000, 0x0000, 0x1f34, 0x9f3a, 0x3918, 0x0000, 0x0000, 0x0000, 0x3f8e, 0xe579,\n-    0x38f9, 0x0000, 0x0000, 0x0000, 0x90c8, 0xc3f8, 0x38d9, 0x0000, 0x0000, 0x0000,\n-    0x48c0, 0xf8f8, 0x38b7, 0x0000, 0x0000, 0x0000, 0xed56, 0xafa6, 0x389c, 0x0000,\n-    0x0000, 0x0000, 0x8218, 0xb969, 0x387d, 0x0000, 0x0000, 0x0000, 0x1852, 0xec57,\n-    0x385e, 0x0000, 0x0000, 0x0000, 0x670c, 0xd674, 0x383e, 0x0000, 0x0000, 0x0000,\n-    0xad40, 0xc2c4, 0x3820, 0x0000, 0x0000, 0x0000, 0x2e80, 0xa696, 0x3801, 0x0000,\n-    0x0000, 0x0000, 0xd800, 0xc467, 0x37dc, 0x0000, 0x0000, 0x0000, 0x3c72, 0xc5ae,\n-    0x37c3, 0x0000, 0x0000, 0x0000, 0xb006, 0xac69, 0x37a4, 0x0000, 0x0000, 0x0000,\n-    0x34a0, 0x8cdf, 0x3782, 0x0000, 0x0000, 0x0000, 0x9ed2, 0xd25e, 0x3766, 0x0000,\n-    0x0000, 0x0000, 0x6fec, 0xaaaa, 0x3747, 0x0000, 0x0000, 0x0000, 0x6040, 0xfb5c,\n-    0x3726, 0x0000, 0x0000, 0x0000, 0x764c, 0xa3fc, 0x3708, 0x0000, 0x0000, 0x0000,\n-    0xb254, 0x954e, 0x36e9, 0x0000, 0x0000, 0x0000, 0x3e1c, 0xf5dc, 0x36ca, 0x0000,\n-    0x0000, 0x0000, 0x7b06, 0xc635, 0x36ac, 0x0000, 0x0000, 0x0000, 0xa8ba, 0xd738,\n-    0x368d, 0x0000, 0x0000, 0x0000, 0x06cc, 0xb24e, 0x366d, 0x0000, 0x0000, 0x0000,\n-    0x7108, 0xac76, 0x364f, 0x0000, 0x0000, 0x0000, 0x2324, 0xa7cb, 0x3630, 0x0000,\n-    0x0000, 0x0000, 0xac40, 0xef15, 0x360f, 0x0000, 0x0000, 0x0000, 0xae46, 0xd516,\n-    0x35f2, 0x0000, 0x0000, 0x0000, 0x615e, 0xe003, 0x35d3, 0x0000, 0x0000, 0x0000,\n-    0x0cf0, 0xefe7, 0x35b1, 0x0000, 0x0000, 0x0000, 0xfb50, 0xf98c, 0x3595, 0x0000,\n-    0x0000, 0x0000, 0x0abc, 0xf333, 0x3575, 0x0000, 0x0000, 0x0000, 0xdd60, 0xca3f,\n-    0x3555, 0x0000, 0x0000, 0x0000, 0x7eb6, 0xd87f, 0x3538, 0x0000, 0x0000, 0x0000,\n-    0x44f4, 0xb291, 0x3519, 0x0000, 0x0000, 0x0000, 0xff80, 0xc982, 0x34f6, 0x0000,\n-    0x0000, 0x0000, 0x9de0, 0xd9b8, 0x34db, 0x0000, 0x0000, 0x0000, 0xcd42, 0x9366,\n-    0x34bc, 0x0000, 0x0000, 0x0000, 0xbef0, 0xfaee, 0x349d, 0x0000, 0x0000, 0x0000,\n-    0xdac4, 0xb6f1, 0x347d, 0x0000, 0x0000, 0x0000, 0xf140, 0x94de, 0x345d, 0x0000,\n-    0x0000, 0x0000, 0xa218, 0x8b4b, 0x343e, 0x0000, 0x0000, 0x0000, 0x6380, 0xa135,\n-    0x341e, 0x0000, 0x0000, 0x0000, 0xb184, 0x8cb2, 0x3402, 0x0000, 0x0000, 0x0000,\n-    0x196e, 0xdc61, 0x33e3, 0x0000, 0x0000, 0x0000, 0x0c00, 0xde05, 0x33c4, 0x0000,\n-    0x0000, 0x0000, 0xef9a, 0xbd38, 0x33a5, 0x0000, 0x0000, 0x0000, 0xc1a0, 0xdf00,\n-    0x3385, 0x0000, 0x0000, 0x0000, 0x1090, 0x9973, 0x3365, 0x0000, 0x0000, 0x0000,\n-    0x4882, 0x8301, 0x3348, 0x0000, 0x0000, 0x0000, 0x7abe, 0xadc7, 0x3329, 0x0000,\n-    0x0000, 0x0000, 0x7cba, 0xec2b, 0x330a, 0x0000, 0x0000, 0x0000, 0xa520, 0x8f21,\n-    0x32e9, 0x0000, 0x0000, 0x0000, 0x710c, 0x8d36, 0x32cc, 0x0000, 0x0000, 0x0000,\n-    0x5212, 0xc6ed, 0x32ad, 0x0000, 0x0000, 0x0000, 0x7308, 0xfd76, 0x328d, 0x0000,\n-    0x0000, 0x0000, 0x5014, 0xd548, 0x326f, 0x0000, 0x0000, 0x0000, 0xd3f2, 0xb499,\n-    0x3250, 0x0000, 0x0000, 0x0000, 0x7f74, 0xa606, 0x3230, 0x0000, 0x0000, 0x0000,\n-    0xf0a8, 0xd720, 0x3212, 0x0000, 0x0000, 0x0000, 0x185c, 0xe20f, 0x31f2, 0x0000,\n-    0x0000, 0x0000, 0xa5a8, 0x8738, 0x31d4, 0x0000, 0x0000, 0x0000, 0xdd74, 0xcafb,\n-    0x31b4, 0x0000, 0x0000, 0x0000, 0x98b6, 0xbd8e, 0x3196, 0x0000, 0x0000, 0x0000,\n-    0xe9de, 0x977f, 0x3177, 0x0000, 0x0000, 0x0000, 0x67c0, 0x818d, 0x3158, 0x0000,\n-    0x0000, 0x0000, 0xe52a, 0x9322, 0x3139, 0x0000, 0x0000, 0x0000, 0xe568, 0x9b6c,\n-    0x3119, 0x0000, 0x0000, 0x0000, 0x2358, 0xaa0a, 0x30fa, 0x0000, 0x0000, 0x0000,\n-    0xe480, 0xe13b, 0x30d9, 0x0000, 0x0000, 0x0000, 0x3024, 0x90a1, 0x30bd, 0x0000,\n-    0x0000, 0x0000, 0x9620, 0xda30, 0x309d, 0x0000, 0x0000, 0x0000, 0x898a, 0xb388,\n-    0x307f, 0x0000, 0x0000, 0x0000, 0xb24c, 0xc891, 0x3060, 0x0000, 0x0000, 0x0000,\n-    0x8056, 0xf98b, 0x3041, 0x0000, 0x0000, 0x0000, 0x72a4, 0xa1ea, 0x3021, 0x0000,\n-    0x0000, 0x0000, 0x6af8, 0x9488, 0x3001, 0x0000, 0x0000, 0x0000, 0xe00c, 0xdfcb,\n-    0x2fe4, 0x0000, 0x0000, 0x0000, 0xeeec, 0xc941, 0x2fc4, 0x0000, 0x0000, 0x0000,\n-    0x53e0, 0xe70f, 0x2fa4, 0x0000, 0x0000, 0x0000, 0x8f60, 0x9c07, 0x2f85, 0x0000,\n-    0x0000, 0x0000, 0xb328, 0xc3e7, 0x2f68, 0x0000, 0x0000, 0x0000, 0x9404, 0xf8c7,\n-    0x2f48, 0x0000, 0x0000, 0x0000, 0x38e0, 0xc99f, 0x2f29, 0x0000, 0x0000, 0x0000,\n-    0x9778, 0xd984, 0x2f09, 0x0000, 0x0000, 0x0000, 0xe700, 0xd142, 0x2eea, 0x0000,\n-    0x0000, 0x0000, 0xd904, 0x9443, 0x2ecd, 0x0000, 0x0000, 0x0000, 0xd4ba, 0xae7e,\n-    0x2eae, 0x0000, 0x0000, 0x0000, 0x8e5e, 0x8524, 0x2e8f, 0x0000, 0x0000, 0x0000,\n-    0xb550, 0xc9ed, 0x2e6e, 0x0000, 0x0000, 0x0000, 0x53b8, 0x8648, 0x2e51, 0x0000,\n-    0x0000, 0x0000, 0xdae4, 0x87f9, 0x2e32, 0x0000, 0x0000, 0x0000, 0x2942, 0xd966,\n-    0x2e13, 0x0000, 0x0000, 0x0000, 0x4f28, 0xcf3c, 0x2df3, 0x0000, 0x0000, 0x0000,\n-    0xfa40, 0xc4ef, 0x2dd1, 0x0000, 0x0000, 0x0000, 0x4424, 0xbca7, 0x2db5, 0x0000,\n-    0x0000, 0x0000, 0x2e62, 0xcdc5, 0x2d97, 0x0000, 0x0000, 0x0000, 0xed88, 0x996b,\n-    0x2d78, 0x0000, 0x0000, 0x0000, 0x7c30, 0xd97d, 0x2d56, 0x0000, 0x0000, 0x0000,\n-    0xed26, 0xbf6e, 0x2d3a, 0x0000, 0x0000, 0x0000, 0x2918, 0x921b, 0x2d1a, 0x0000,\n-    0x0000, 0x0000, 0x4e24, 0xe84e, 0x2cfb, 0x0000, 0x0000, 0x0000, 0x6dc0, 0x92ec,\n-    0x2cdd, 0x0000, 0x0000, 0x0000, 0x4f2c, 0xacf8, 0x2cbd, 0x0000, 0x0000, 0x0000,\n-    0xc634, 0xf094, 0x2c9e, 0x0000, 0x0000, 0x0000, 0xdc70, 0xe5d3, 0x2c7e, 0x0000,\n-    0x0000, 0x0000, 0x2180, 0xa600, 0x2c5b, 0x0000, 0x0000, 0x0000, 0x8480, 0xd680,\n-    0x2c3c, 0x0000, 0x0000, 0x0000, 0x8b24, 0xd63b, 0x2c22, 0x0000, 0x0000, 0x0000,\n-    0x02e0, 0xaa47, 0x2c00, 0x0000, 0x0000, 0x0000, 0x9ad0, 0xee84, 0x2be3, 0x0000,\n-    0x0000, 0x0000, 0xf7dc, 0xf699, 0x2bc6, 0x0000, 0x0000, 0x0000, 0xddde, 0xe490,\n-    0x2ba7, 0x0000, 0x0000, 0x0000, 0x34a0, 0xb4fd, 0x2b85, 0x0000, 0x0000, 0x0000,\n-    0x91b4, 0x8ef6, 0x2b68, 0x0000, 0x0000, 0x0000, 0xa3e0, 0xa2a7, 0x2b47, 0x0000,\n-    0x0000, 0x0000, 0xcce4, 0x82b3, 0x2b2a, 0x0000, 0x0000, 0x0000, 0xe4be, 0x8207,\n-    0x2b0c, 0x0000, 0x0000, 0x0000, 0x1d92, 0xab43, 0x2aed, 0x0000, 0x0000, 0x0000,\n-    0xe818, 0xf9f6, 0x2acd, 0x0000, 0x0000, 0x0000, 0xff12, 0xba80, 0x2aaf, 0x0000,\n-    0x0000, 0x0000, 0x5254, 0x8529, 0x2a90, 0x0000, 0x0000, 0x0000, 0x1b88, 0xe032,\n-    0x2a71, 0x0000, 0x0000, 0x0000, 0x3248, 0xd86d, 0x2a50, 0x0000, 0x0000, 0x0000,\n-    0x3140, 0xc9d5, 0x2a2e, 0x0000, 0x0000, 0x0000, 0x14e6, 0xbd47, 0x2a14, 0x0000,\n-    0x0000, 0x0000, 0x5c10, 0xe544, 0x29f4, 0x0000, 0x0000, 0x0000, 0x9f50, 0x90b6,\n-    0x29d4, 0x0000, 0x0000, 0x0000, 0x9850, 0xab55, 0x29b6, 0x0000, 0x0000, 0x0000,\n-    0x2750, 0x9d07, 0x2998, 0x0000, 0x0000, 0x0000, 0x6700, 0x8bbb, 0x2973, 0x0000,\n-    0x0000, 0x0000, 0x5dba, 0xed31, 0x295a, 0x0000, 0x0000, 0x0000, 0x61dc, 0x85fe,\n-    0x293a, 0x0000, 0x0000, 0x0000, 0x9ba2, 0xd6b4, 0x291c, 0x0000, 0x0000, 0x0000,\n-    0x2d30, 0xe3a5, 0x28fb, 0x0000, 0x0000, 0x0000, 0x6630, 0xb566, 0x28dd, 0x0000,\n-    0x0000, 0x0000, 0x5ad4, 0xa829, 0x28bf, 0x0000, 0x0000, 0x0000, 0x89d8, 0xe290,\n-    0x28a0, 0x0000, 0x0000, 0x0000, 0x3916, 0xc428, 0x2881, 0x0000, 0x0000, 0x0000,\n-    0x0490, 0xbea4, 0x2860, 0x0000, 0x0000, 0x0000, 0xee06, 0x80ee, 0x2843, 0x0000,\n-    0x0000, 0x0000, 0xfc00, 0xf327, 0x2820, 0x0000, 0x0000, 0x0000, 0xea40, 0xa871,\n-    0x2800, 0x0000, 0x0000, 0x0000, 0x63d8, 0x9c26, 0x27e4, 0x0000, 0x0000, 0x0000,\n-    0x07ba, 0xc0c9, 0x27c7, 0x0000, 0x0000, 0x0000, 0x3fa2, 0x9797, 0x27a8, 0x0000,\n-    0x0000, 0x0000, 0x21c6, 0xfeca, 0x2789, 0x0000, 0x0000, 0x0000, 0xde40, 0x860d,\n-    0x2768, 0x0000, 0x0000, 0x0000, 0x9cc8, 0x98ce, 0x2749, 0x0000, 0x0000, 0x0000,\n-    0x3778, 0xa31c, 0x272a, 0x0000, 0x0000, 0x0000, 0xe778, 0xf6e2, 0x270b, 0x0000,\n-    0x0000, 0x0000, 0x59b8, 0xf841, 0x26ed, 0x0000, 0x0000, 0x0000, 0x02e0, 0xad04,\n-    0x26cd, 0x0000, 0x0000, 0x0000, 0x5a92, 0x9380, 0x26b0, 0x0000, 0x0000, 0x0000,\n-    0xc740, 0x8886, 0x268d, 0x0000, 0x0000, 0x0000, 0x0680, 0xfaf8, 0x266c, 0x0000,\n-    0x0000, 0x0000, 0xfb60, 0x897f, 0x2653, 0x0000, 0x0000, 0x0000, 0x8760, 0xf903,\n-    0x2634, 0x0000, 0x0000, 0x0000, 0xad2a, 0xc2c8, 0x2615, 0x0000, 0x0000, 0x0000,\n-    0x2d86, 0x8aef, 0x25f6, 0x0000, 0x0000, 0x0000, 0x1ef4, 0xe627, 0x25d6, 0x0000,\n-    0x0000, 0x0000, 0x09e4, 0x8020, 0x25b7, 0x0000, 0x0000, 0x0000, 0x7548, 0xd227,\n-    0x2598, 0x0000, 0x0000, 0x0000, 0x75dc, 0xfb5b, 0x2579, 0x0000, 0x0000, 0x0000,\n-    0xea84, 0xc8b6, 0x255a, 0x0000, 0x0000, 0x0000, 0xe4d0, 0x8145, 0x253b, 0x0000,\n-    0x0000, 0x0000, 0x3640, 0x9768, 0x251c, 0x0000, 0x0000, 0x0000, 0x246a, 0xccec,\n-    0x24fe, 0x0000, 0x0000, 0x0000, 0x51d0, 0xa075, 0x24dd, 0x0000, 0x0000, 0x0000,\n-    0x4638, 0xa385, 0x24bf, 0x0000, 0x0000, 0x0000, 0xd788, 0xd776, 0x24a1, 0x0000,\n-    0x0000, 0x0000, 0x1370, 0x8997, 0x2482, 0x0000, 0x0000, 0x0000, 0x1e88, 0x9b67,\n-    0x2462, 0x0000, 0x0000, 0x0000, 0x6c08, 0xd975, 0x2444, 0x0000, 0x0000, 0x0000,\n-    0xfdb0, 0xcfc0, 0x2422, 0x0000, 0x0000, 0x0000, 0x3100, 0xc026, 0x2406, 0x0000,\n-    0x0000, 0x0000, 0xc5b4, 0xae64, 0x23e6, 0x0000, 0x0000, 0x0000, 0x2280, 0xf687,\n-    0x23c3, 0x0000, 0x0000, 0x0000, 0x2de0, 0x9006, 0x23a9, 0x0000, 0x0000, 0x0000,\n-    0x24bc, 0xf631, 0x238a, 0x0000, 0x0000, 0x0000, 0xb8d4, 0xa975, 0x236b, 0x0000,\n-    0x0000, 0x0000, 0xd9a4, 0xb949, 0x234b, 0x0000, 0x0000, 0x0000, 0xb54e, 0xbd39,\n-    0x232d, 0x0000, 0x0000, 0x0000, 0x4aac, 0x9a52, 0x230e, 0x0000, 0x0000, 0x0000,\n-    0xbbbc, 0xd085, 0x22ef, 0x0000, 0x0000, 0x0000, 0xdf18, 0xc633, 0x22cf, 0x0000,\n-    0x0000, 0x0000, 0x16d0, 0xeca5, 0x22af, 0x0000, 0x0000, 0x0000, 0xf2a0, 0xdf6f,\n-    0x228e, 0x0000, 0x0000, 0x0000, 0x8c44, 0xe86b, 0x2272, 0x0000, 0x0000, 0x0000,\n-    0x35c0, 0xbbf4, 0x2253, 0x0000, 0x0000, 0x0000, 0x0c40, 0xdafb, 0x2230, 0x0000,\n-    0x0000, 0x0000, 0x92dc, 0x9935, 0x2216, 0x0000, 0x0000, 0x0000, 0x0ca0, 0xbda6,\n-    0x21f3, 0x0000, 0x0000, 0x0000, 0x5958, 0xa6fd, 0x21d6, 0x0000, 0x0000, 0x0000,\n-    0xa3dc, 0x9d7f, 0x21b9, 0x0000, 0x0000, 0x0000, 0x79dc, 0xfcb5, 0x2199, 0x0000,\n-    0x0000, 0x0000, 0xf264, 0xcebb, 0x217b, 0x0000, 0x0000, 0x0000, 0x0abe, 0x8308,\n-    0x215c, 0x0000, 0x0000, 0x0000, 0x30ae, 0xb463, 0x213d, 0x0000, 0x0000, 0x0000,\n-    0x6228, 0xb040, 0x211c, 0x0000, 0x0000, 0x0000, 0xc9b2, 0xf43b, 0x20ff, 0x0000,\n-    0x0000, 0x0000, 0x3d8e, 0xa4b3, 0x20e0, 0x0000, 0x0000, 0x0000, 0x84e6, 0x8dab,\n-    0x20c1, 0x0000, 0x0000, 0x0000, 0xa124, 0x9b74, 0x20a1, 0x0000, 0x0000, 0x0000,\n-    0xc276, 0xd497, 0x2083, 0x0000, 0x0000, 0x0000, 0x6354, 0xa466, 0x2063, 0x0000,\n-    0x0000, 0x0000, 0x8654, 0xaf0a, 0x2044, 0x0000, 0x0000, 0x0000, 0x1d20, 0xfa5c,\n-    0x2024, 0x0000, 0x0000, 0x0000, 0xbcd0, 0xf3f0, 0x2004, 0x0000, 0x0000, 0x0000,\n-    0xedf0, 0xf0b6, 0x1fe7, 0x0000, 0x0000, 0x0000, 0x45bc, 0x9182, 0x1fc9, 0x0000,\n-    0x0000, 0x0000, 0xe254, 0xdc85, 0x1faa, 0x0000, 0x0000, 0x0000, 0xb898, 0xe9b1,\n-    0x1f8a, 0x0000, 0x0000, 0x0000, 0x0ebe, 0xe6f0, 0x1f6c, 0x0000, 0x0000, 0x0000,\n-    0xa9b8, 0xf584, 0x1f4c, 0x0000, 0x0000, 0x0000, 0x12e8, 0xdf6b, 0x1f2e, 0x0000,\n-    0x0000, 0x0000, 0x9f9e, 0xcd55, 0x1f0f, 0x0000, 0x0000, 0x0000, 0x05a0, 0xec3a,\n-    0x1eef, 0x0000, 0x0000, 0x0000, 0xd8e0, 0x96f8, 0x1ed1, 0x0000, 0x0000, 0x0000,\n-    0x3bd4, 0xccc6, 0x1eb1, 0x0000, 0x0000, 0x0000, 0x4910, 0xb87b, 0x1e93, 0x0000,\n-    0x0000, 0x0000, 0xbefc, 0xd40b, 0x1e73, 0x0000, 0x0000, 0x0000, 0x317e, 0xa406,\n-    0x1e55, 0x0000, 0x0000, 0x0000, 0x6bb2, 0xc2b2, 0x1e36, 0x0000, 0x0000, 0x0000,\n-    0xb87e, 0xbb78, 0x1e17, 0x0000, 0x0000, 0x0000, 0xa03c, 0xdbbd, 0x1df7, 0x0000,\n-    0x0000, 0x0000, 0x5b6c, 0xe3c8, 0x1dd9, 0x0000, 0x0000, 0x0000, 0x8968, 0xca8e,\n-    0x1dba, 0x0000, 0x0000, 0x0000, 0xc024, 0xe6ab, 0x1d9a, 0x0000, 0x0000, 0x0000,\n-    0x4110, 0xd4eb, 0x1d7a, 0x0000, 0x0000, 0x0000, 0xa168, 0xbdb5, 0x1d5d, 0x0000,\n-    0x0000, 0x0000, 0x012e, 0xa5fa, 0x1d3e, 0x0000, 0x0000, 0x0000, 0x6838, 0x9c1f,\n-    0x1d1e, 0x0000, 0x0000, 0x0000, 0xa158, 0xaa76, 0x1d00, 0x0000, 0x0000, 0x0000,\n-    0x090a, 0xbd95, 0x1ce1, 0x0000, 0x0000, 0x0000, 0xf73e, 0x8b6d, 0x1cc2, 0x0000,\n-    0x0000, 0x0000, 0x5fda, 0xbcbf, 0x1ca3, 0x0000, 0x0000, 0x0000, 0xdbe8, 0xb89f,\n-    0x1c84, 0x0000, 0x0000, 0x0000, 0x6e4c, 0x96c7, 0x1c64, 0x0000, 0x0000, 0x0000,\n-    0x19c2, 0xf2a4, 0x1c46, 0x0000, 0x0000, 0x0000, 0xb800, 0xf855, 0x1c1e, 0x0000,\n-    0x0000, 0x0000, 0x87fc, 0x85ff, 0x1c08, 0x0000, 0x0000, 0x0000, 0x1418, 0x839f,\n-    0x1be9, 0x0000, 0x0000, 0x0000, 0x6186, 0xd9d8, 0x1bca, 0x0000, 0x0000, 0x0000,\n-    0xf500, 0xabaa, 0x1ba6, 0x0000, 0x0000, 0x0000, 0x7b36, 0xdafe, 0x1b8c, 0x0000,\n-    0x0000, 0x0000, 0xf394, 0xe6d8, 0x1b6c, 0x0000, 0x0000, 0x0000, 0x6efc, 0x9e55,\n-    0x1b4e, 0x0000, 0x0000, 0x0000, 0x5e10, 0xc523, 0x1b2e, 0x0000, 0x0000, 0x0000,\n-    0x8210, 0xb6f9, 0x1b0d, 0x0000, 0x0000, 0x0000, 0x9ab0, 0x96e3, 0x1af1, 0x0000,\n-    0x0000, 0x0000, 0x3864, 0x92e7, 0x1ad1, 0x0000, 0x0000, 0x0000, 0x9878, 0xdc65,\n-    0x1ab1, 0x0000, 0x0000, 0x0000, 0xfa20, 0xd6cb, 0x1a94, 0x0000, 0x0000, 0x0000,\n-    0x6c00, 0xa4e4, 0x1a70, 0x0000, 0x0000, 0x0000, 0xab40, 0xb41b, 0x1a53, 0x0000,\n-    0x0000, 0x0000, 0x43a4, 0x8ede, 0x1a37, 0x0000, 0x0000, 0x0000, 0x22e0, 0x9314,\n-    0x1a15, 0x0000, 0x0000, 0x0000, 0x6170, 0xb949, 0x19f8, 0x0000, 0x0000, 0x0000,\n-    0x6b00, 0xe056, 0x19d8, 0x0000, 0x0000, 0x0000, 0x9ba8, 0xa94c, 0x19b9, 0x0000,\n-    0x0000, 0x0000, 0xfaa0, 0xaa16, 0x199b, 0x0000, 0x0000, 0x0000, 0x899a, 0xf627,\n-    0x197d, 0x0000, 0x0000, 0x0000, 0x9f20, 0xfb70, 0x195d, 0x0000, 0x0000, 0x0000,\n-    0xa4b8, 0xc176, 0x193e, 0x0000, 0x0000, 0x0000, 0xb21c, 0x85c3, 0x1920, 0x0000,\n-    0x0000, 0x0000, 0x50d2, 0x9b19, 0x1901, 0x0000, 0x0000, 0x0000, 0xd4b0, 0xb708,\n-    0x18e0, 0x0000, 0x0000, 0x0000, 0xfb88, 0xf510, 0x18c1, 0x0000, 0x0000, 0x0000,\n-    0x31ec, 0xdc8d, 0x18a3, 0x0000, 0x0000, 0x0000, 0x3c00, 0xbff9, 0x1885, 0x0000,\n-    0x0000, 0x0000, 0x5020, 0xc30b, 0x1862, 0x0000, 0x0000, 0x0000, 0xd4f0, 0xda0c,\n-    0x1844, 0x0000, 0x0000, 0x0000, 0x20d2, 0x99a5, 0x1828, 0x0000, 0x0000, 0x0000,\n-    0x852e, 0xd159, 0x1809, 0x0000, 0x0000, 0x0000, 0x7cd8, 0x97a1, 0x17e9, 0x0000,\n-    0x0000, 0x0000, 0x423a, 0x997b, 0x17cb, 0x0000, 0x0000, 0x0000, 0xc1c0, 0xbe7d,\n-    0x17a8, 0x0000, 0x0000, 0x0000, 0xe8bc, 0xdcdd, 0x178d, 0x0000, 0x0000, 0x0000,\n-    0x8b28, 0xae06, 0x176e, 0x0000, 0x0000, 0x0000, 0x102e, 0xb8d4, 0x174f, 0x0000,\n-    0x0000, 0x0000, 0xaa00, 0xaa5c, 0x172f, 0x0000, 0x0000, 0x0000, 0x51f0, 0x9fc0,\n-    0x170e, 0x0000, 0x0000, 0x0000, 0xf858, 0xe181, 0x16f2, 0x0000, 0x0000, 0x0000,\n-    0x91a8, 0x8162, 0x16d3, 0x0000, 0x0000, 0x0000, 0x5f40, 0xcb6f, 0x16b1, 0x0000,\n-    0x0000, 0x0000, 0xbb50, 0xe55f, 0x1693, 0x0000, 0x0000, 0x0000, 0xacd2, 0xd895,\n-    0x1676, 0x0000, 0x0000, 0x0000, 0xef30, 0x97bf, 0x1654, 0x0000, 0x0000, 0x0000,\n-    0xf700, 0xb3d7, 0x1633, 0x0000, 0x0000, 0x0000, 0x3454, 0xa7b5, 0x1619, 0x0000,\n-    0x0000, 0x0000, 0x6b00, 0xa929, 0x15f6, 0x0000, 0x0000, 0x0000, 0x9f04, 0x89f7,\n-    0x15db, 0x0000, 0x0000, 0x0000, 0xad78, 0xd985, 0x15bc, 0x0000, 0x0000, 0x0000,\n-    0xa46a, 0xae3f, 0x159d, 0x0000, 0x0000, 0x0000, 0x63a0, 0xd0da, 0x157c, 0x0000,\n-    0x0000, 0x0000, 0x5e90, 0x817d, 0x155e, 0x0000, 0x0000, 0x0000, 0x1494, 0xb13f,\n-    0x1540, 0x0000, 0x0000, 0x0000, 0x0090, 0x9c40, 0x1521, 0x0000, 0x0000, 0x0000,\n-    0xdd70, 0xcc86, 0x1500, 0x0000, 0x0000, 0x0000, 0x64f8, 0xdb6f, 0x14e1, 0x0000,\n-    0x0000, 0x0000, 0xe22c, 0xac17, 0x14c3, 0x0000, 0x0000, 0x0000, 0x60e0, 0xa9ad,\n-    0x14a3, 0x0000, 0x0000, 0x0000, 0x4640, 0xd658, 0x1481, 0x0000, 0x0000, 0x0000,\n-    0x6490, 0xa181, 0x1467, 0x0000, 0x0000, 0x0000, 0x1df4, 0xaaa2, 0x1447, 0x0000,\n-    0x0000, 0x0000, 0xb94a, 0x8f61, 0x1429, 0x0000, 0x0000, 0x0000, 0x5198, 0x9d83,\n-    0x1409, 0x0000, 0x0000, 0x0000, 0x0f7a, 0xa818, 0x13eb, 0x0000, 0x0000, 0x0000,\n-    0xc45e, 0xc06c, 0x13cc, 0x0000, 0x0000, 0x0000, 0x4ec0, 0xfa29, 0x13a8, 0x0000,\n-    0x0000, 0x0000, 0x6418, 0x8cad, 0x138c, 0x0000, 0x0000, 0x0000, 0xbcc8, 0xe7d1,\n-    0x136f, 0x0000, 0x0000, 0x0000, 0xc934, 0xf9b0, 0x134f, 0x0000, 0x0000, 0x0000,\n-    0x6ce0, 0x98df, 0x1331, 0x0000, 0x0000, 0x0000, 0x3516, 0xe5e9, 0x1312, 0x0000,\n-    0x0000, 0x0000, 0xc6c0, 0xef8b, 0x12ef, 0x0000, 0x0000, 0x0000, 0xaf02, 0x913d,\n-    0x12d4, 0x0000, 0x0000, 0x0000, 0xd230, 0xe1d5, 0x12b5, 0x0000, 0x0000, 0x0000,\n-    0xfba8, 0xc232, 0x1295, 0x0000, 0x0000, 0x0000, 0x7ba4, 0xabeb, 0x1277, 0x0000,\n-    0x0000, 0x0000, 0x6e5c, 0xc692, 0x1258, 0x0000, 0x0000, 0x0000, 0x76a2, 0x9756,\n-    0x1239, 0x0000, 0x0000, 0x0000, 0xe180, 0xe423, 0x1214, 0x0000, 0x0000, 0x0000,\n-    0x8c3c, 0x90f8, 0x11fb, 0x0000, 0x0000, 0x0000, 0x9f3c, 0x9fd2, 0x11dc, 0x0000,\n-    0x0000, 0x0000, 0x53e0, 0xb73e, 0x11bd, 0x0000, 0x0000, 0x0000, 0x45be, 0x88d6,\n-    0x119e, 0x0000, 0x0000, 0x0000, 0x111a, 0x8bc0, 0x117f, 0x0000, 0x0000, 0x0000,\n-    0xe26a, 0xd7ff, 0x1160, 0x0000, 0x0000, 0x0000, 0xfb60, 0xdd8d, 0x113f, 0x0000,\n-    0x0000, 0x0000, 0x9370, 0xc108, 0x1120, 0x0000, 0x0000, 0x0000, 0x9654, 0x8baf,\n-    0x1103, 0x0000, 0x0000, 0x0000, 0xd6ec, 0xd6b9, 0x10e4, 0x0000, 0x0000, 0x0000,\n-    0x23e4, 0xd7b7, 0x10c4, 0x0000, 0x0000, 0x0000, 0x1aa6, 0xa847, 0x10a6, 0x0000,\n-    0x0000, 0x0000, 0xbee6, 0x9fef, 0x1087, 0x0000, 0x0000, 0x0000, 0x26d0, 0xa6eb,\n-    0x1066, 0x0000, 0x0000, 0x0000, 0x5b86, 0xa880, 0x1049, 0x0000, 0x0000, 0x0000,\n-    0x125c, 0xd971, 0x1029, 0x0000, 0x0000, 0x0000, 0x1f78, 0x9d18, 0x100a, 0x0000,\n-    0x0000, 0x0000, 0x0e84, 0xb15b, 0x0feb, 0x0000, 0x0000, 0x0000, 0xd0c0, 0xc150,\n-    0x0fcc, 0x0000, 0x0000, 0x0000, 0xa330, 0xc40c, 0x0fad, 0x0000, 0x0000, 0x0000,\n-    0x5202, 0xfc2c, 0x0f8f, 0x0000, 0x0000, 0x0000, 0x3f7c, 0xecf5, 0x0f6f, 0x0000,\n-    0x0000, 0x0000, 0xef44, 0xfdfd, 0x0f50, 0x0000, 0x0000, 0x0000, 0x3f6c, 0xab1b,\n-    0x0f31, 0x0000, 0x0000, 0x0000, 0xf658, 0x89ec, 0x0f11, 0x0000, 0x0000, 0x0000,\n-    0xbfc8, 0x9ba8, 0x0ef4, 0x0000, 0x0000, 0x0000, 0x3d40, 0xbe21, 0x0ed5, 0x0000,\n-    0x0000, 0x0000, 0xbbc4, 0xc70d, 0x0eb6, 0x0000, 0x0000, 0x0000, 0x5158, 0xdb16,\n-    0x0e96, 0x0000, 0x0000, 0x0000, 0xb5a8, 0xa8d8, 0x0e78, 0x0000, 0x0000, 0x0000,\n-    0xcccc, 0xb40e, 0x0e58, 0x0000, 0x0000, 0x0000, 0x448c, 0xcb62, 0x0e3a, 0x0000,\n-    0x0000, 0x0000, 0xf12a, 0x8aed, 0x0e1b, 0x0000, 0x0000, 0x0000, 0x79d0, 0xc59c,\n-    0x0dfb, 0x0000, 0x0000, 0x0000, 0x06b4, 0xcdc9, 0x0ddd, 0x0000, 0x0000, 0x0000,\n-    0xae70, 0xa979, 0x0dbe, 0x0000, 0x0000, 0x0000, 0x317c, 0xa8fb, 0x0d9e, 0x0000,\n-    0x0000, 0x0000, 0x5fe0, 0x8a50, 0x0d7d, 0x0000, 0x0000, 0x0000, 0x70b6, 0xfdfa,\n-    0x0d61, 0x0000, 0x0000, 0x0000, 0x1640, 0x9dc7, 0x0d41, 0x0000, 0x0000, 0x0000,\n-    0x9a9c, 0xdc50, 0x0d23, 0x0000, 0x0000, 0x0000, 0x4fcc, 0x9a9b, 0x0d04, 0x0000,\n-    0x0000, 0x0000, 0x7e48, 0x8f77, 0x0ce5, 0x0000, 0x0000, 0x0000, 0x84e4, 0xd4b9,\n-    0x0cc6, 0x0000, 0x0000, 0x0000, 0x84e0, 0xbd10, 0x0ca6, 0x0000, 0x0000, 0x0000,\n-    0x1b0a, 0xc8d9, 0x0c88, 0x0000, 0x0000, 0x0000, 0x6a48, 0xfc81, 0x0c68, 0x0000,\n-    0x0000, 0x0000, 0x070a, 0xbef6, 0x0c4a, 0x0000, 0x0000, 0x0000, 0x8a70, 0xf096,\n-    0x0c2b, 0x0000, 0x0000, 0x0000, 0xecc2, 0xc994, 0x0c0c, 0x0000, 0x0000, 0x0000,\n-    0x1540, 0x9537, 0x0bea, 0x0000, 0x0000, 0x0000, 0x1b02, 0xab5b, 0x0bce, 0x0000,\n-    0x0000, 0x0000, 0x5dc0, 0xb0c8, 0x0bad, 0x0000, 0x0000, 0x0000, 0xc928, 0xe034,\n-    0x0b8f, 0x0000, 0x0000, 0x0000, 0x2d12, 0xb4b0, 0x0b71, 0x0000, 0x0000, 0x0000,\n-    0x8fc2, 0xbb94, 0x0b52, 0x0000, 0x0000, 0x0000, 0xe236, 0xe22f, 0x0b33, 0x0000,\n-    0x0000, 0x0000, 0xb97c, 0xbe9e, 0x0b13, 0x0000, 0x0000, 0x0000, 0xe1a6, 0xe16d,\n-    0x0af5, 0x0000, 0x0000, 0x0000, 0xd330, 0xbaf0, 0x0ad6, 0x0000, 0x0000, 0x0000,\n-    0xc0bc, 0xbbd0, 0x0ab7, 0x0000, 0x0000, 0x0000, 0x8e66, 0xdd9b, 0x0a98, 0x0000,\n-    0x0000, 0x0000, 0xc95c, 0xf799, 0x0a79, 0x0000, 0x0000, 0x0000, 0xdac0, 0xbe4c,\n-    0x0a55, 0x0000, 0x0000, 0x0000, 0xafc0, 0xc378, 0x0a37, 0x0000, 0x0000, 0x0000,\n-    0xa880, 0xe341, 0x0a19, 0x0000, 0x0000, 0x0000, 0xc242, 0x81f6, 0x09fd, 0x0000,\n-    0x0000, 0x0000, 0x7470, 0xc777, 0x09de, 0x0000, 0x0000, 0x0000, 0x62bc, 0xb684,\n-    0x09be, 0x0000, 0x0000, 0x0000, 0x43ac, 0x8c58, 0x099f, 0x0000, 0x0000, 0x0000,\n-    0xcc3c, 0xf9ac, 0x0981, 0x0000, 0x0000, 0x0000, 0x1526, 0xb670, 0x0962, 0x0000,\n-    0x0000, 0x0000, 0xc9fe, 0xdf50, 0x0943, 0x0000, 0x0000, 0x0000, 0x6ae6, 0xc065,\n-    0x0924, 0x0000, 0x0000, 0x0000, 0xb114, 0xcf29, 0x0905, 0x0000, 0x0000, 0x0000,\n-    0xd388, 0x922a, 0x08e4, 0x0000, 0x0000, 0x0000, 0xcf54, 0xb926, 0x08c7, 0x0000,\n-    0x0000, 0x0000, 0x3826, 0xe855, 0x08a8, 0x0000, 0x0000, 0x0000, 0xe7c8, 0x829b,\n-    0x0888, 0x0000, 0x0000, 0x0000, 0x546c, 0xa903, 0x086a, 0x0000, 0x0000, 0x0000,\n-    0x8768, 0x99cc, 0x0849, 0x0000, 0x0000, 0x0000, 0x00ac, 0xf529, 0x082b, 0x0000,\n-    0x0000, 0x0000, 0x2658, 0x9f0b, 0x080c, 0x0000, 0x0000, 0x0000, 0xfe5c, 0x9e21,\n-    0x07ee, 0x0000, 0x0000, 0x0000, 0x6da2, 0x9910, 0x07cf, 0x0000, 0x0000, 0x0000,\n-    0x9220, 0xf9b3, 0x07b0, 0x0000, 0x0000, 0x0000, 0x3d90, 0xa541, 0x0791, 0x0000,\n-    0x0000, 0x0000, 0x6e4c, 0xe7cc, 0x0771, 0x0000, 0x0000, 0x0000, 0xa8fa, 0xe80a,\n-    0x0753, 0x0000, 0x0000, 0x0000, 0x4e14, 0xc3a7, 0x0734, 0x0000, 0x0000, 0x0000,\n-    0xf7e0, 0xbad9, 0x0712, 0x0000, 0x0000, 0x0000, 0xfea0, 0xeff2, 0x06f5, 0x0000,\n-    0x0000, 0x0000, 0xcef6, 0xbd48, 0x06d7, 0x0000, 0x0000, 0x0000, 0x7544, 0xf559,\n-    0x06b7, 0x0000, 0x0000, 0x0000, 0x2388, 0xf655, 0x0698, 0x0000, 0x0000, 0x0000,\n-    0xe900, 0xad56, 0x0676, 0x0000, 0x0000, 0x0000, 0x2cc0, 0x8437, 0x0659, 0x0000,\n-    0x0000, 0x0000, 0x3068, 0xc544, 0x063b, 0x0000, 0x0000, 0x0000, 0xdc70, 0xe73c,\n-    0x061b, 0x0000, 0x0000, 0x0000, 0xee50, 0x9d49, 0x05fc, 0x0000, 0x0000, 0x0000,\n-    0x93d2, 0x81f6, 0x05df, 0x0000, 0x0000, 0x0000, 0x941c, 0xadff, 0x05bf, 0x0000,\n-    0x0000, 0x0000, 0x2ce2, 0x8e45, 0x05a1, 0x0000, 0x0000, 0x0000, 0x4a60, 0x95fd,\n-    0x0581, 0x0000, 0x0000, 0x0000, 0x79f8, 0xb83a, 0x0563, 0x0000, 0x0000, 0x0000,\n-    0xcb58, 0xa1f5, 0x0543, 0x0000, 0x0000, 0x0000, 0x2a3a, 0xdc36, 0x0525, 0x0000,\n-    0x0000, 0x0000, 0x14ee, 0x890e, 0x0506, 0x0000, 0x0000, 0x0000, 0x8f20, 0xc432,\n-    0x04e3, 0x0000, 0x0000, 0x0000, 0x8440, 0xb21d, 0x04c6, 0x0000, 0x0000, 0x0000,\n-    0x5430, 0xf698, 0x04a7, 0x0000, 0x0000, 0x0000, 0x04ae, 0x8b20, 0x048a, 0x0000,\n-    0x0000, 0x0000, 0x04d0, 0xe872, 0x046b, 0x0000, 0x0000, 0x0000, 0xc78e, 0x8893,\n-    0x044c, 0x0000, 0x0000, 0x0000, 0x0f78, 0x9895, 0x042b, 0x0000, 0x0000, 0x0000,\n-    0x11d4, 0xdf2e, 0x040d, 0x0000, 0x0000, 0x0000, 0xe84c, 0x89d5, 0x03ef, 0x0000,\n-    0x0000, 0x0000, 0xf7be, 0x8a67, 0x03d0, 0x0000, 0x0000, 0x0000, 0x95d0, 0xc906,\n-    0x03b1, 0x0000, 0x0000, 0x0000, 0x64ce, 0xd96c, 0x0392, 0x0000, 0x0000, 0x0000,\n-    0x97ba, 0xa16f, 0x0373, 0x0000, 0x0000, 0x0000, 0x463c, 0xc51a, 0x0354, 0x0000,\n-    0x0000, 0x0000, 0xef0a, 0xe93e, 0x0335, 0x0000, 0x0000, 0x0000, 0x526a, 0xa466,\n-    0x0316, 0x0000, 0x0000, 0x0000, 0x4140, 0xa94d, 0x02f5, 0x0000, 0x0000, 0x0000,\n-    0xb4ec, 0xce68, 0x02d8, 0x0000, 0x0000, 0x0000, 0x4fa2, 0x8490, 0x02b9, 0x0000,\n-    0x0000, 0x0000, 0x4e60, 0xca98, 0x0298, 0x0000, 0x0000, 0x0000, 0x08dc, 0xe09c,\n-    0x027a, 0x0000, 0x0000, 0x0000, 0x2b90, 0xc7e3, 0x025c, 0x0000, 0x0000, 0x0000,\n-    0x5a7c, 0xf8ef, 0x023c, 0x0000, 0x0000, 0x0000, 0x5022, 0x9d58, 0x021e, 0x0000,\n-    0x0000, 0x0000, 0x553a, 0xe242, 0x01ff, 0x0000, 0x0000, 0x0000, 0x7e6e, 0xb54d,\n-    0x01e0, 0x0000, 0x0000, 0x0000, 0xd2d4, 0xa88c, 0x01c1, 0x0000, 0x0000, 0x0000,\n-    0x75b6, 0xfe6d, 0x01a2, 0x0000, 0x0000, 0x0000, 0x3bb2, 0xf04c, 0x0183, 0x0000,\n-    0x0000, 0x0000, 0xc2d0, 0xc046, 0x0163, 0x0000, 0x0000, 0x0000, 0x250c, 0xf9d6,\n-    0x0145, 0x0000, 0x0000, 0x0000, 0xb7b4, 0x8a0d, 0x0126, 0x0000, 0x0000, 0x0000,\n-    0x1a72, 0xe4f5, 0x0107, 0x0000, 0x0000, 0x0000, 0x825c, 0xa9b8, 0x00e8, 0x0000,\n-    0x0000, 0x0000, 0x6c90, 0xc9ad, 0x00c6, 0x0000, 0x0000, 0x0000, 0x4d00, 0xd1bb,\n-    0x00aa, 0x0000, 0x0000, 0x0000, 0xa4a0, 0xee01, 0x0087, 0x0000, 0x0000, 0x0000,\n-    0x89a8, 0xbe9f, 0x006b, 0x0000, 0x0000, 0x0000, 0x038e, 0xc80c, 0x004d, 0x0000,\n-    0x0000, 0x0000, 0xfe26, 0x8384, 0x002e, 0x0000, 0x0000, 0x0000, 0xcd90, 0xca57,\n-    0x000e, 0x0000\n-};\n-\n-void MacroAssembler::libm_reduce_pi04l(Register eax, Register ecx, Register edx, Register ebx, Register esi, Register edi, Register ebp, Register esp) {\n-  Label B1_1, B1_2, B1_3, B1_4, B1_5, B1_6, B1_7, B1_8, B1_9, B1_10, B1_11, B1_12;\n-  Label B1_13, B1_14, B1_15;\n-\n-  assert_different_registers(ebx, eax, ecx, edx, esi, edi, ebp, esp);\n-\n-  address zero_none  = (address)_zero_none;\n-  address _4onpi_d   = (address)__4onpi_d;\n-  address TWO_32H    = (address)_TWO_32H;\n-  address pi04_3d    = (address)_pi04_3d;\n-  address pi04_5d    = (address)_pi04_5d;\n-  address SCALE      = (address)_SCALE;\n-  address zeros      = (address)_zeros;\n-  address pi04_2d    = (address)_pi04_2d;\n-  address TWO_12H    = (address)_TWO_12H;\n-  address _4onpi_31l = (address)__4onpi_31l;\n-\n-  bind(B1_1);\n-  push(ebp);\n-  movl(ebp, esp);\n-  andl(esp, -16);\n-  push(esi);\n-  push(edi);\n-  push(ebx);\n-  subl(esp, 20);\n-  movzwl(ebx, Address(ebp, 16));\n-  andl(ebx, 32767);\n-  movl(eax, Address(ebp, 20));\n-  cmpl(ebx, 16413);\n-  movl(esi, Address(ebp, 24));\n-  movl(Address(esp, 4), eax);\n-  jcc(Assembler::greaterEqual, B1_8);\n-\n-  bind(B1_2);\n-  fld_x(Address(ebp, 8));\n-  fld_d(ExternalAddress(_4onpi_d));    \/\/0x6dc9c883UL, 0x3ff45f30UL\n-  fmul(1);\n-  fstp_x(Address(esp, 8));\n-  movzwl(ecx, Address(esp, 16));\n-  negl(ecx);\n-  addl(ecx, 30);\n-  movl(eax, Address(esp, 12));\n-  shrl(eax);\n-  cmpl(Address(esp, 4), 0);\n-  jcc(Assembler::notEqual, B1_4);\n-\n-  bind(B1_3);\n-  lea(ecx, Address(eax, 1));\n-  andl(ecx, -2);\n-  jmp(B1_5);\n-\n-  bind(B1_4);\n-  movl(ecx, eax);\n-  addl(eax, Address(esp, 4));\n-  movl(edx, eax);\n-  andl(edx, 1);\n-  addl(ecx, edx);\n-\n-  bind(B1_5);\n-  fld_d(ExternalAddress(TWO_32H));    \/\/0x00000000UL, 0x41f80000UL\n-  cmpl(ebx, 16400);\n-  movl(Address(esp, 0), ecx);\n-  fild_s(Address(esp, 0));\n-  jcc(Assembler::greaterEqual, B1_7);\n-\n-  bind(B1_6);\n-  fld_d(ExternalAddress(pi04_3d));    \/\/0x54442d00UL, 0x3fe921fbUL\n-  fmul(1);\n-  fsubp(3);\n-  fxch(1);\n-  fmul(2);\n-  fld_s(2);\n-  fadd(1);\n-  fsubrp(1);\n-  fld_s(0);\n-  fxch(1);\n-  fsuba(3);\n-  fld_d(ExternalAddress(8 + pi04_3d));    \/\/0x98cc5180UL, 0x3ce84698UL\n-  fmul(3);\n-  fsuba(2);\n-  fxch(1);\n-  fsub(2);\n-  fsubrp(1);\n-  faddp(3);\n-  fld_d(ExternalAddress(16 + pi04_3d));    \/\/0xcbb5bf6cUL, 0xb9dfc8f8UL\n-  fmulp(2);\n-  fld_s(1);\n-  fsubr(1);\n-  fsuba(1);\n-  fxch(2);\n-  fsubp(1);\n-  faddp(2);\n-  fxch(1);\n-  jmp(B1_15);\n-\n-  bind(B1_7);\n-  fld_d(ExternalAddress(pi04_5d));    \/\/0x54400000UL, 0x3fe921fbUL\n-  fmul(1);\n-  fsubp(3);\n-  fxch(1);\n-  fmul(2);\n-  fld_s(2);\n-  fadd(1);\n-  fsubrp(1);\n-  fld_s(0);\n-  fxch(1);\n-  fsuba(3);\n-  fld_d(ExternalAddress(8 + pi04_5d));    \/\/0x1a600000UL, 0x3dc0b461UL\n-  fmul(3);\n-  fsuba(2);\n-  fxch(1);\n-  fsub(2);\n-  fsubrp(1);\n-  faddp(3);\n-  fld_d(ExternalAddress(16 + pi04_5d));    \/\/0x2e000000UL, 0x3b93198aUL\n-  fmul(2);\n-  fld_s(0);\n-  fsubr(2);\n-  fsuba(2);\n-  fxch(1);\n-  fsubp(2);\n-  fxch(1);\n-  faddp(3);\n-  fld_d(ExternalAddress(24 + pi04_5d));    \/\/0x25200000UL, 0x396b839aUL\n-  fmul(2);\n-  fld_s(0);\n-  fsubr(2);\n-  fsuba(2);\n-  fxch(1);\n-  fsubp(2);\n-  fxch(1);\n-  faddp(3);\n-  fld_d(ExternalAddress(32 + pi04_5d));    \/\/0x533e63a0UL, 0x37027044UL\n-  fmulp(2);\n-  fld_s(1);\n-  fsubr(1);\n-  fsuba(1);\n-  fxch(2);\n-  fsubp(1);\n-  faddp(2);\n-  fxch(1);\n-  jmp(B1_15);\n-\n-  bind(B1_8);\n-  fld_x(Address(ebp, 8));\n-  addl(ebx, -16417);\n-  fmul_d(as_Address(ExternalAddress(SCALE)));    \/\/0x00000000UL, 0x32600000UL\n-  movl(eax, -2078209981);\n-  imull(ebx);\n-  addl(edx, ebx);\n-  movl(ecx, ebx);\n-  sarl(edx, 4);\n-  sarl(ecx, 31);\n-  subl(edx, ecx);\n-  movl(eax, edx);\n-  shll(eax, 5);\n-  fstp_x(Address(ebp, 8));\n-  fld_x(Address(ebp, 8));\n-  subl(eax, edx);\n-  movl(Address(ebp, 8), 0);\n-  subl(ebx, eax);\n-  fld_x(Address(ebp, 8));\n-  cmpl(ebx, 17);\n-  fsuba(1);\n-  jcc(Assembler::less, B1_10);\n-\n-  bind(B1_9);\n-  lea(eax, Address(noreg, edx, Address::times_8));\n-  lea(ecx, Address(eax, edx, Address::times_4));\n-  incl(edx);\n-  fld_x(Address(_4onpi_31l, RelocationHolder::none).plus_disp(ecx, Address::times_1));\n-  fmul(2);\n-  fld_x(Address(12 + _4onpi_31l, RelocationHolder::none).plus_disp(ecx, Address::times_1));\n-  fmul(2);\n-  fld_s(0);\n-  fadd(2);\n-  fsuba(2);\n-  fxch(1);\n-  faddp(2);\n-  fld_s(1);\n-  fadd(1);\n-  fstp_x(Address(esp, 8));\n-  andl(Address(esp, 8), -16777216);\n-  fld_x(Address(esp, 8));\n-  fsubp(1);\n-  jmp(B1_11);\n-\n-  bind(B1_10);\n-  fld_d(ExternalAddress(zeros));    \/\/0x00000000UL, 0x00000000UL\n-  fld_s(0);\n-\n-  bind(B1_11);\n-  fld_s(0);\n-  lea(eax, Address(noreg, edx, Address::times_8));\n-  fld_s(3);\n-  lea(edx, Address(eax, edx, Address::times_4));\n-  fld_x(Address(_4onpi_31l, RelocationHolder::none).plus_disp(edx, Address::times_1));\n-  fmul(6);\n-  movl(Address(esp, 0), edx);\n-  fadda(2);\n-  fxch(2);\n-  fsuba(3);\n-  fxch(2);\n-  faddp(3);\n-  fxch(2);\n-  faddp(3);\n-  fld_x(Address(12 + _4onpi_31l, RelocationHolder::none).plus_disp(edx, Address::times_1));\n-  fmula(2);\n-  fld_s(2);\n-  fadd(2);\n-  fld_s(0);\n-  fxch(1);\n-  fsubra(3);\n-  fxch(3);\n-  fchs();\n-  faddp(4);\n-  fxch(3);\n-  faddp(4);\n-  fxch(2);\n-  fadd(3);\n-  fxch(2);\n-  fmul(5);\n-  fadda(2);\n-  fld_s(4);\n-  fld_x(Address(24 + _4onpi_31l, RelocationHolder::none).plus_disp(edx, Address::times_1));\n-  fmula(1);\n-  fxch(1);\n-  fadda(4);\n-  fxch(4);\n-  fstp_x(Address(esp, 8));\n-  movzwl(ebx, Address(esp, 16));\n-  andl(ebx, 32767);\n-  cmpl(ebx, 16415);\n-  jcc(Assembler::greaterEqual, B1_13);\n-\n-  bind(B1_12);\n-  negl(ebx);\n-  addl(ebx, 30);\n-  movl(ecx, ebx);\n-  movl(eax, Address(esp, 12));\n-  shrl(eax);\n-  shll(eax);\n-  movl(Address(esp, 12), eax);\n-  movl(Address(esp, 8), 0);\n-  shrl(eax);\n-  jmp(B1_14);\n-\n-  bind(B1_13);\n-  negl(ebx);\n-  addl(ebx, 30);\n-  movl(ecx, ebx);\n-  movl(edx, Address(esp, 8));\n-  shrl(edx);\n-  shll(edx);\n-  negl(ecx);\n-  movl(eax, Address(esp, 12));\n-  shll(eax);\n-  movl(ecx, ebx);\n-  movl(Address(esp, 8), edx);\n-  shrl(edx);\n-  orl(eax, edx);\n-\n-  bind(B1_14);\n-  fld_x(Address(esp, 8));\n-  addl(eax, Address(esp, 4));\n-  fsubp(3);\n-  fmul(6);\n-  fld_s(4);\n-  movl(edx, eax);\n-  andl(edx, 1);\n-  fadd(3);\n-  movl(ecx, Address(esp, 0));\n-  fsuba(3);\n-  fxch(3);\n-  faddp(5);\n-  fld_s(1);\n-  fxch(3);\n-  fadd_d(Address(zero_none, RelocationHolder::none).plus_disp(edx, Address::times_8));\n-  fadda(3);\n-  fsub(3);\n-  faddp(2);\n-  fxch(1);\n-  faddp(4);\n-  fld_s(2);\n-  fadd(2);\n-  fsuba(2);\n-  fxch(3);\n-  faddp(2);\n-  fxch(1);\n-  faddp(3);\n-  fld_s(0);\n-  fadd(2);\n-  fsuba(2);\n-  fxch(1);\n-  faddp(2);\n-  fxch(1);\n-  faddp(2);\n-  fld_s(2);\n-  fld_x(Address(36 + _4onpi_31l, RelocationHolder::none).plus_disp(ecx, Address::times_1));\n-  fmula(1);\n-  fld_s(1);\n-  fadd(3);\n-  fsuba(3);\n-  fxch(2);\n-  faddp(3);\n-  fxch(2);\n-  faddp(3);\n-  fxch(1);\n-  fmul(4);\n-  fld_s(0);\n-  fadd(2);\n-  fsuba(2);\n-  fxch(1);\n-  faddp(2);\n-  fxch(1);\n-  faddp(2);\n-  fld_s(2);\n-  fld_x(Address(48 + _4onpi_31l, RelocationHolder::none).plus_disp(ecx, Address::times_1));\n-  fmula(1);\n-  fld_s(1);\n-  fadd(3);\n-  fsuba(3);\n-  fxch(2);\n-  faddp(3);\n-  fxch(2);\n-  faddp(3);\n-  fld_s(3);\n-  fxch(2);\n-  fmul(5);\n-  fld_x(Address(60 + _4onpi_31l, RelocationHolder::none).plus_disp(ecx, Address::times_1));\n-  fmula(3);\n-  fxch(3);\n-  faddp(1);\n-  fld_s(0);\n-  fadd(2);\n-  fsuba(2);\n-  fxch(1);\n-  faddp(2);\n-  fxch(1);\n-  faddp(3);\n-  fld_s(3);\n-  fxch(2);\n-  fmul(5);\n-  fld_x(Address(72 + _4onpi_31l, RelocationHolder::none).plus_disp(ecx, Address::times_1));\n-  fmula(3);\n-  fxch(3);\n-  faddp(1);\n-  fld_s(0);\n-  fadd(2);\n-  fsuba(2);\n-  fxch(1);\n-  faddp(2);\n-  fxch(1);\n-  faddp(3);\n-  fxch(1);\n-  fmulp(4);\n-  fld_x(Address(84 + _4onpi_31l, RelocationHolder::none).plus_disp(ecx, Address::times_1));\n-  fmulp(3);\n-  fxch(2);\n-  faddp(3);\n-  fld_s(2);\n-  fadd(2);\n-  fld_d(ExternalAddress(TWO_32H));    \/\/0x00000000UL, 0x41f80000UL\n-  fmul(1);\n-  fadda(1);\n-  fsubp(1);\n-  fsuba(2);\n-  fxch(3);\n-  faddp(2);\n-  faddp(1);\n-  fld_d(ExternalAddress(pi04_2d));    \/\/0x54400000UL, 0x3fe921fbUL\n-  fld_s(0);\n-  fmul(2);\n-  fxch(2);\n-  fadd(3);\n-  fxch(1);\n-  fmulp(3);\n-  fmul_d(as_Address(ExternalAddress(8 + pi04_2d)));    \/\/0x1a626331UL, 0x3dc0b461UL\n-  faddp(1);\n-\n-  bind(B1_15);\n-  fld_d(ExternalAddress(TWO_12H));    \/\/0x00000000UL, 0x40b80000UL\n-  fld_s(2);\n-  fadd(2);\n-  fmula(1);\n-  fstp_x(Address(esp, 8));\n-  fld_x(Address(esp, 8));\n-  fadd(1);\n-  fsubrp(1);\n-  fst_d(Address(esi, 0));\n-  fsubp(2);\n-  faddp(1);\n-  fstp_d(Address(esi, 8));\n-  addl(esp, 20);\n-  pop(ebx);\n-  pop(edi);\n-  pop(esi);\n-  movl(esp, ebp);\n-  pop(ebp);\n-  ret(0);\n-}\n-\n-\n-ATTRIBUTE_ALIGNED(16) jushort _SP[] =\n-{\n-    0xaaab, 0xaaaa, 0xaaaa, 0xaaaa, 0xbffc, 0x0000, 0x8887, 0x8888, 0x8888, 0x8888,\n-    0x3ff8, 0x0000, 0xc527, 0x0d00, 0x00d0, 0xd00d, 0xbff2, 0x0000, 0x45f6, 0xb616,\n-    0x1d2a, 0xb8ef, 0x3fec, 0x0000, 0x825b, 0x3997, 0x2b3f, 0xd732, 0xbfe5, 0x0000,\n-    0xbf33, 0x8bb4, 0x2fda, 0xb092, 0x3fde, 0x0000, 0x44a6, 0xed1a, 0x29ef, 0xd73e,\n-    0xbfd6, 0x0000, 0x8610, 0x307f, 0x62a1, 0xc921, 0x3fce, 0x0000\n-};\n-\n-ATTRIBUTE_ALIGNED(16) jushort _CP[] =\n-{\n-    0x0000, 0x0000, 0x0000, 0x8000, 0xbffe, 0x0000, 0xaaa5, 0xaaaa, 0xaaaa, 0xaaaa,\n-    0x3ffa, 0x0000, 0x9c2f, 0x0b60, 0x60b6, 0xb60b, 0xbff5, 0x0000, 0xf024, 0x0cac,\n-    0x00d0, 0xd00d, 0x3fef, 0x0000, 0x03fe, 0x3f65, 0x7dbb, 0x93f2, 0xbfe9, 0x0000,\n-    0xd84d, 0xadee, 0xc698, 0x8f76, 0x3fe2, 0x0000, 0xdaba, 0xfe79, 0xea36, 0xc9c9,\n-    0xbfda, 0x0000, 0x3ac6, 0x0ba0, 0x07ce, 0xd585, 0x3fd2, 0x0000\n-};\n-\n-void MacroAssembler::libm_sincos_huge(XMMRegister xmm0, XMMRegister xmm1, Register eax, Register ecx, Register edx, Register ebx, Register esi, Register edi, Register ebp, Register esp) {\n-  Label B1_1, B1_2, B1_3, B1_4, B1_5, B1_6, B1_7, B1_8, B1_9, B1_10, B1_11, B1_12;\n-  Label B1_13, B1_14, B1_15, B1_16, B1_17, B1_18, B1_19, B1_20, B1_21, B1_22, B1_23;\n-  Label B1_24, B1_25, B1_26, B1_27, B1_28, B1_29, B1_30, B1_31, B1_32, B1_33, B1_34;\n-  Label B1_35, B1_36, B1_37, B1_38, B1_39, B1_40, B1_41, B1_42, B1_43, B1_46;\n-\n-  assert_different_registers(ebx, eax, ecx, edx, esi, edi, ebp, esp);\n-\n-  address CP = (address)_CP;\n-  address SP = (address)_SP;\n-\n-  bind(B1_1);\n-  push(ebp);\n-  movl(ebp, esp);\n-  andl(esp, -64);\n-  push(esi);\n-  push(edi);\n-  push(ebx);\n-  subl(esp, 52);\n-  movl(eax, Address(ebp, 16));\n-  movl(edx, Address(ebp, 20));\n-  movl(Address(esp, 32), eax);\n-  movl(Address(esp, 36), edx);\n-\n-  bind(B1_2);\n-  fnstcw(Address(esp, 30));\n-\n-  bind(B1_3);\n-  movsd(xmm1, Address(ebp, 8));\n-  movl(esi, Address(ebp, 12));\n-  movl(eax, esi);\n-  andl(eax, 2147483647);\n-  andps(xmm1, ExternalAddress(L_2IL0FLOATPACKET_0));    \/\/0xffffffffUL, 0x7fffffffUL, 0x00000000UL, 0x00000000UL\n-  shrl(esi, 31);\n-  movl(Address(esp, 40), eax);\n-  cmpl(eax, 1104150528);\n-  movsd(Address(ebp, 8), xmm1);\n-  jcc(Assembler::aboveEqual, B1_11);\n-\n-  bind(B1_4);\n-  movsd(xmm0, ExternalAddress(PI4_INV));    \/\/0x6dc9c883UL, 0x3ff45f30UL\n-  mulsd(xmm0, xmm1);\n-  movzwl(edx, Address(esp, 30));\n-  movl(eax, edx);\n-  andl(eax, 768);\n-  movsd(Address(esp, 0), xmm0);\n-  cmpl(eax, 768);\n-  jcc(Assembler::equal, B1_42);\n-\n-  bind(B1_5);\n-  orl(edx, -64768);\n-  movw(Address(esp, 28), edx);\n-\n-  bind(B1_6);\n-  fldcw(Address(esp, 28));\n-\n-  bind(B1_7);\n-  movsd(xmm1, Address(ebp, 8));\n-  movl(ebx, 1);\n-\n-  bind(B1_8);\n-  movl(Address(esp, 12), ebx);\n-  movl(ebx, Address(esp, 4));\n-  movl(eax, ebx);\n-  movl(Address(esp, 8), esi);\n-  movl(esi, ebx);\n-  shrl(esi, 20);\n-  andl(eax, 1048575);\n-  movl(ecx, esi);\n-  orl(eax, 1048576);\n-  negl(ecx);\n-  movl(edx, eax);\n-  addl(ecx, 19);\n-  addl(esi, 13);\n-  movl(Address(esp, 24), ecx);\n-  shrl(edx);\n-  movl(ecx, esi);\n-  shll(eax);\n-  movl(ecx, Address(esp, 24));\n-  movl(esi, Address(esp, 0));\n-  shrl(esi);\n-  orl(eax, esi);\n-  cmpl(ebx, 1094713344);\n-  movsd(Address(esp, 16), xmm1);\n-  fld_d(Address(esp, 16));\n-  cmov32(Assembler::below, eax, edx);\n-  movl(esi, Address(esp, 8));\n-  lea(edx, Address(eax, 1));\n-  movl(ebx, edx);\n-  andl(ebx, -2);\n-  movl(Address(esp, 16), ebx);\n-  fild_s(Address(esp, 16));\n-  movl(ebx, Address(esp, 12));\n-  cmpl(Address(esp, 40), 1094713344);\n-  jcc(Assembler::aboveEqual, B1_10);\n-\n-  bind(B1_9);\n-  fld_d(ExternalAddress(PI4X3));    \/\/0x54443000UL, 0xbfe921fbUL\n-  fmul(1);\n-  faddp(2);\n-  fld_d(ExternalAddress(PI4X3 + 8));    \/\/0x3b39a000UL, 0x3d373dcbUL\n-  fmul(1);\n-  faddp(2);\n-  fld_d(ExternalAddress(PI4X3 + 16));    \/\/0xe0e68948UL, 0xba845c06UL\n-  fmulp(1);\n-  faddp(1);\n-  jmp(B1_17);\n-\n-  bind(B1_10);\n-  fld_d(ExternalAddress(PI4X4));    \/\/0x54400000UL, 0xbfe921fbUL\n-  fmul(1);\n-  faddp(2);\n-  fld_d(ExternalAddress(PI4X4 + 8));    \/\/0x1a600000UL, 0xbdc0b461UL\n-  fmul(1);\n-  faddp(2);\n-  fld_d(ExternalAddress(PI4X4 + 16));    \/\/0x2e000000UL, 0xbb93198aUL\n-  fmul(1);\n-  faddp(2);\n-  fld_d(ExternalAddress(PI4X4 + 24));    \/\/0x252049c1UL, 0xb96b839aUL\n-  fmulp(1);\n-  faddp(1);\n-  jmp(B1_17);\n-\n-  bind(B1_11);\n-  movzwl(edx, Address(esp, 30));\n-  movl(eax, edx);\n-  andl(eax, 768);\n-  cmpl(eax, 768);\n-  jcc(Assembler::equal, B1_43);\n-  bind(B1_12);\n-  orl(edx, -64768);\n-  movw(Address(esp, 28), edx);\n-\n-  bind(B1_13);\n-  fldcw(Address(esp, 28));\n-\n-  bind(B1_14);\n-  movsd(xmm1, Address(ebp, 8));\n-  movl(ebx, 1);\n-\n-  bind(B1_15);\n-  movsd(Address(esp, 16), xmm1);\n-  fld_d(Address(esp, 16));\n-  addl(esp, -32);\n-  lea(eax, Address(esp, 32));\n-  fstp_x(Address(esp, 0));\n-  movl(Address(esp, 12), 0);\n-  movl(Address(esp, 16), eax);\n-  call(RuntimeAddress(CAST_FROM_FN_PTR(address, StubRoutines::dlibm_reduce_pi04l())));\n-\n-  bind(B1_46);\n-  addl(esp, 32);\n-\n-  bind(B1_16);\n-  fld_d(Address(esp, 0));\n-  lea(edx, Address(eax, 1));\n-  fld_d(Address(esp, 8));\n-  faddp(1);\n-\n-  bind(B1_17);\n-  movl(ecx, edx);\n-  addl(eax, 3);\n-  shrl(ecx, 2);\n-  andl(ecx, 1);\n-  shrl(eax, 2);\n-  xorl(esi, ecx);\n-  movl(ecx, Address(esp, 36));\n-  andl(eax, 1);\n-  andl(ecx, 3);\n-  cmpl(ecx, 3);\n-  jcc(Assembler::notEqual, B1_25);\n-\n-  bind(B1_18);\n-  fld_x(ExternalAddress(84 + SP));    \/\/0x8610, 0x307f, 0x62\n-  fld_s(1);\n-  fmul((2));\n-  testb(edx, 2);\n-  fmula((1));\n-  fld_x(ExternalAddress(72 + SP));    \/\/0x44a6, 0xed1a, 0x29\n-  faddp(2);\n-  fmula(1);\n-  fld_x(ExternalAddress(60 + SP));    \/\/0xbf33, 0x8bb4, 0x2f\n-  faddp(2);\n-  fmula(1);\n-  fld_x(ExternalAddress(48 + SP));    \/\/0x825b, 0x3997, 0x2b\n-  faddp(2);\n-  fmula(1);\n-  fld_x(ExternalAddress(36 + SP));    \/\/0x45f6, 0xb616, 0x1d\n-  faddp(2);\n-  fmula(1);\n-  fld_x(ExternalAddress(24 + SP));    \/\/0xc527, 0x0d00, 0x00\n-  faddp(2);\n-  fmula(1);\n-  fld_x(ExternalAddress(12 + SP));    \/\/0x8887, 0x8888, 0x88\n-  faddp(2);\n-  fmula(1);\n-  fld_x(ExternalAddress(SP));    \/\/0xaaab, 0xaaaa, 0xaa\n-  faddp(2);\n-  fmula(1);\n-  fld_x(ExternalAddress(84 + CP));    \/\/0x3ac6, 0x0ba0, 0x07\n-  fmul(1);\n-  fld_x(ExternalAddress(72 + CP));    \/\/0xdaba, 0xfe79, 0xea\n-  faddp(1);\n-  fmul(1);\n-  fld_x(ExternalAddress(62 + CP));    \/\/0xd84d, 0xadee, 0xc6\n-  faddp(1);\n-  fmul(1);\n-  fld_x(ExternalAddress(48 + CP));    \/\/0x03fe, 0x3f65, 0x7d\n-  faddp(1);\n-  fmul(1);\n-  fld_x(ExternalAddress(36 + CP));    \/\/0xf024, 0x0cac, 0x00\n-  faddp(1);\n-  fmul(1);\n-  fld_x(ExternalAddress(24 + CP));    \/\/0x9c2f, 0x0b60, 0x60\n-  faddp(1);\n-  fmul(1);\n-  fld_x(ExternalAddress(12 + CP));    \/\/0xaaa5, 0xaaaa, 0xaa\n-  faddp(1);\n-  fmul(1);\n-  fld_x(ExternalAddress(CP));    \/\/0x0000, 0x0000, 0x00\n-  faddp(1);\n-  fmulp(1);\n-  fld_d(Address(ONES, RelocationHolder::none).plus_disp(esi, Address::times_8));\n-  fld_d(Address(ONES, RelocationHolder::none).plus_disp(eax, Address::times_8));\n-  jcc(Assembler::equal, B1_22);\n-\n-  bind(B1_19);\n-  fmulp(4);\n-  testl(ebx, ebx);\n-  fxch(2);\n-  fmul(3);\n-  movl(eax, Address(esp, 2));\n-  faddp(3);\n-  fxch(2);\n-  fstp_d(Address(eax, 0));\n-  fmula(1);\n-  faddp(1);\n-  fstp_d(Address(eax, 8));\n-  jcc(Assembler::equal, B1_21);\n-\n-  bind(B1_20);\n-  fldcw(Address(esp, 30));\n-\n-  bind(B1_21);\n-  addl(esp, 52);\n-  pop(ebx);\n-  pop(edi);\n-  pop(esi);\n-  movl(esp, ebp);\n-  pop(ebp);\n-  ret(0);\n-\n-  bind(B1_22);\n-  fxch(1);\n-  fmulp(4);\n-  testl(ebx, ebx);\n-  fxch(2);\n-  fmul(3);\n-  movl(eax, Address(esp, 32));\n-  faddp(3);\n-  fxch(2);\n-  fstp_d(Address(eax, 8));\n-  fmula(1);\n-  faddp(1);\n-  fstp_d(Address(eax, 0));\n-  jcc(Assembler::equal, B1_24);\n-\n-  bind(B1_23);\n-  fldcw(Address(esp, 30));\n-\n-  bind(B1_24);\n-  addl(esp, 52);\n-  pop(ebx);\n-  pop(edi);\n-  pop(esi);\n-  movl(esp, ebp);\n-  pop(ebp);\n-  ret(0);\n-\n-  bind(B1_25);\n-  testb(Address(esp, 36), 2);\n-  jcc(Assembler::equal, B1_33);\n-\n-  bind(B1_26);\n-  fld_s(0);\n-  testb(edx, 2);\n-  fmul(1);\n-  fld_s(0);\n-  fmul(1);\n-  jcc(Assembler::equal, B1_30);\n-\n-  bind(B1_27);\n-  fstp_d(2);\n-  fld_x(ExternalAddress(84 + CP));    \/\/0x3ac6, 0x0ba0, 0x07\n-  testl(ebx, ebx);\n-  fmul(2);\n-  fld_x(ExternalAddress(72 + CP));    \/\/0xdaba, 0xfe79, 0xea\n-  fmul(3);\n-  fld_x(ExternalAddress(60 + CP));    \/\/0xd84d, 0xadee, 0xc6\n-  movl(eax, Address(rsp, 32));\n-  faddp(2);\n-  fxch(1);\n-  fmul(3);\n-  fld_x(ExternalAddress(48 + CP));    \/\/0x03fe, 0x3f65, 0x7d\n-  faddp(2);\n-  fxch(1);\n-  fmul(3);\n-  fld_x(ExternalAddress(36 + CP));    \/\/0xf024, 0x0cac, 0x00\n-  faddp(2);\n-  fxch(1);\n-  fmul(3);\n-  fld_x(ExternalAddress(24 + CP));    \/\/0x9c2f, 0x0b60, 0x60\n-  faddp(2);\n-  fxch(1);\n-  fmul(3);\n-  fld_x(ExternalAddress(12 + CP));    \/\/0xaaa5, 0xaaaa, 0xaa\n-  faddp(2);\n-  fxch(1);\n-  fmulp(3);\n-  fld_x(ExternalAddress(CP));    \/\/0x0000, 0x0000, 0x00\n-  faddp(1);\n-  fmulp(1);\n-  faddp(1);\n-  fld_d(Address(ONES, RelocationHolder::none).plus_disp(rsi, Address::times_8));\n-  fmula(1);\n-  faddp(1);\n-  fstp_d(Address(eax, 8));\n-  jcc(Assembler::equal, B1_29);\n-\n-  bind(B1_28);\n-  fldcw(Address(esp, 30));\n-\n-  bind(B1_29);\n-  addl(esp, 52);\n-  pop(ebx);\n-  pop(edi);\n-  pop(esi);\n-  movl(esp, ebp);\n-  pop(ebp);\n-  ret(0);\n-\n-  bind(B1_30);\n-  fld_x(ExternalAddress(84 + SP));    \/\/0x8610, 0x307f, 0x62\n-  testl(ebx, ebx);\n-  fmul(1);\n-  fld_x(ExternalAddress(72 + SP));    \/\/0x44a6, 0xed1a, 0x29\n-  fmul(2);\n-  fld_x(ExternalAddress(60 + SP));    \/\/0xbf33, 0x8bb4, 0x2f\n-  movl(eax, Address(rsp, 32));\n-  faddp(2);\n-  fxch(1);\n-  fmul(2);\n-  fld_x(ExternalAddress(48 + SP));    \/\/0x825b, 0x3997, 0x2b\n-  faddp(2);\n-  fxch(1);\n-  fmul(2);\n-  fld_x(ExternalAddress(36 + SP));    \/\/0x45f6, 0xb616, 0x1d\n-  faddp(2);\n-  fxch(1);\n-  fmul(2);\n-  fld_x(ExternalAddress(24 + SP));    \/\/0xc527, 0x0d00, 0x00\n-  faddp(2);\n-  fxch(1);\n-  fmul(2);\n-  fld_x(ExternalAddress(12 + SP));    \/\/0x8887, 0x8888, 0x88\n-  faddp(2);\n-  fxch(1);\n-  fmulp(2);\n-  fld_x(ExternalAddress(SP));    \/\/0xaaab, 0xaaaa, 0xaa\n-  faddp(1);\n-  fmulp(2);\n-  faddp(1);\n-  fld_d(Address(ONES, RelocationHolder::none).plus_disp(rsi, Address::times_8));\n-  fmulp(2);\n-  fmul(1);\n-  faddp(1);\n-  fstp_d(Address(eax, 8));\n-  jcc(Assembler::equal, B1_32);\n-\n-  bind(B1_31);\n-  fldcw(Address(esp, 30));\n-\n-  bind(B1_32);\n-  addl(esp, 52);\n-  pop(ebx);\n-  pop(edi);\n-  pop(esi);\n-  movl(esp, ebp);\n-  pop(ebp);\n-  ret(0);\n-\n-  bind(B1_33);\n-  testb(Address(esp, 36), 1);\n-  jcc(Assembler::equal, B1_41);\n-\n-  bind(B1_34);\n-  fld_s(0);\n-  testb(edx, 2);\n-  fmul(1);\n-  fld_s(0);\n-  fmul(1);\n-  jcc(Assembler::equal, B1_38);\n-\n-  bind(B1_35);\n-  fld_x(ExternalAddress(84 + SP));    \/\/0x8610, 0x307f, 0x62\n-  testl(ebx, ebx);\n-  fmul(1);\n-  fld_x(ExternalAddress(72 + SP));    \/\/0x44a6, 0xed1a, 0x29\n-  fmul(2);\n-  fld_x(ExternalAddress(60 + SP));    \/\/0xbf33, 0x8bb4, 0x2f\n-  faddp(2);\n-  fxch(1);\n-  fmul(2);\n-  fld_x(ExternalAddress(48 + SP));    \/\/0x825b, 0x3997, 0x2b\n-  faddp(2);\n-  fxch(1);\n-  fmul(2);\n-  fld_x(ExternalAddress(36 + SP));    \/\/0x45f6, 0xb616, 0x1d\n-  faddp(2);\n-  fxch(1);\n-  fmul(2);\n-  fld_x(ExternalAddress(24 + SP));    \/\/0xc527, 0x0d00, 0x00\n-  faddp(2);\n-  fxch(1);\n-  fmul(2);\n-  fld_x(ExternalAddress(12 + SP));    \/\/0x8887, 0x8888, 0x88\n-  faddp(2);\n-  fxch(1);\n-  fmulp(2);\n-  fld_x(ExternalAddress(SP));    \/\/0xaaab, 0xaaaa, 0xaa\n-  faddp(1);\n-  fmulp(2);\n-  faddp(1);\n-  fld_d(Address(ONES, RelocationHolder::none).plus_disp(eax, Address::times_8));\n-  fmulp(2);\n-  fmul(1);\n-  movl(eax, Address(esp, 32));\n-  faddp(1);\n-  fstp_d(Address(eax, 0));\n-  jcc(Assembler::equal, B1_37);\n-\n-  bind(B1_36);\n-  fldcw(Address(esp, 30));\n-\n-  bind(B1_37);\n-  addl(esp, 52);\n-  pop(ebx);\n-  pop(edi);\n-  pop(esi);\n-  movl(esp, ebp);\n-  pop(ebp);\n-  ret(0);\n-\n-  bind(B1_38);\n-  fstp_d(2);\n-  fld_x(ExternalAddress(84 + CP));    \/\/0x3ac6, 0x0ba0, 0x07\n-  testl(ebx, ebx);\n-  fmul(2);\n-  fld_x(ExternalAddress(72 + CP));    \/\/0xdaba, 0xfe79, 0xea\n-  fmul(3);\n-  fld_x(ExternalAddress(60 + CP));    \/\/0xd84d, 0xadee, 0xc6\n-  faddp(2);\n-  fxch(1);\n-  fmul(3);\n-  fld_x(ExternalAddress(48 + CP));    \/\/0x03fe, 0x3f65, 0x7d\n-  faddp(2);\n-  fxch(1);\n-  fmul(3);\n-  fld_x(ExternalAddress(36 + CP));    \/\/0xf024, 0x0cac, 0x00\n-  faddp(2);\n-  fxch(1);\n-  fmul(3);\n-  fld_x(ExternalAddress(24 + CP));    \/\/0x9c2f, 0x0b60, 0x60\n-  faddp(2);\n-  fxch(1);\n-  fmul(3);\n-  fld_x(ExternalAddress(12 + CP));    \/\/0xaaa5, 0xaaaa, 0xaa\n-  faddp(2);\n-  fxch(1);\n-  fmulp(3);\n-  fld_x(ExternalAddress(CP));    \/\/0x0000, 0x0000, 0x00\n-  faddp(1);\n-  fmulp(1);\n-  faddp(1);\n-  fld_d(Address(ONES, RelocationHolder::none).plus_disp(eax, Address::times_8));\n-  fmula(1);\n-  movl(eax, Address(esp, 32));\n-  faddp(1);\n-  fstp_d(Address(eax, 0));\n-  jcc(Assembler::equal, B1_40);\n-\n-  bind(B1_39);\n-  fldcw(Address(esp, 30));\n-  bind(B1_40);\n-  addl(esp, 52);\n-  pop(ebx);\n-  pop(edi);\n-  pop(esi);\n-  movl(esp, ebp);\n-  pop(ebp);\n-  ret(0);\n-  bind(B1_41);\n-  fstp_d(0);\n-  addl(esp, 52);\n-  pop(ebx);\n-  pop(edi);\n-  pop(esi);\n-  movl(esp, ebp);\n-  pop(ebp);\n-  ret(0);\n-  bind(B1_42);\n-  xorl(ebx, ebx);\n-  jmp(B1_8);\n-  bind(B1_43);\n-  xorl(ebx, ebx);\n-  jmp(B1_15);\n-}\n-\n-ATTRIBUTE_ALIGNED(16) juint _static_const_table_sin[] =\n-{\n-    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n-    0x00000000UL, 0x00000000UL, 0x3ff00000UL, 0x176d6d31UL, 0xbf73b92eUL,\n-    0xbc29b42cUL, 0x3fb917a6UL, 0xe0000000UL, 0xbc3e2718UL, 0x00000000UL,\n-    0x3ff00000UL, 0x011469fbUL, 0xbf93ad06UL, 0x3c69a60bUL, 0x3fc8f8b8UL,\n-    0xc0000000UL, 0xbc626d19UL, 0x00000000UL, 0x3ff00000UL, 0x939d225aUL,\n-    0xbfa60beaUL, 0x2ed59f06UL, 0x3fd29406UL, 0xa0000000UL, 0xbc75d28dUL,\n-    0x00000000UL, 0x3ff00000UL, 0x866b95cfUL, 0xbfb37ca1UL, 0xa6aea963UL,\n-    0x3fd87de2UL, 0xe0000000UL, 0xbc672cedUL, 0x00000000UL, 0x3ff00000UL,\n-    0x73fa1279UL, 0xbfbe3a68UL, 0x3806f63bUL, 0x3fde2b5dUL, 0x20000000UL,\n-    0x3c5e0d89UL, 0x00000000UL, 0x3ff00000UL, 0x5bc57974UL, 0xbfc59267UL,\n-    0x39ae68c8UL, 0x3fe1c73bUL, 0x20000000UL, 0x3c8b25ddUL, 0x00000000UL,\n-    0x3ff00000UL, 0x53aba2fdUL, 0xbfcd0dfeUL, 0x25091dd6UL, 0x3fe44cf3UL,\n-    0x20000000UL, 0x3c68076aUL, 0x00000000UL, 0x3ff00000UL, 0x99fcef32UL,\n-    0x3fca8279UL, 0x667f3bcdUL, 0x3fe6a09eUL, 0x20000000UL, 0xbc8bdd34UL,\n-    0x00000000UL, 0x3fe00000UL, 0x94247758UL, 0x3fc133ccUL, 0x6b151741UL,\n-    0x3fe8bc80UL, 0x20000000UL, 0xbc82c5e1UL, 0x00000000UL, 0x3fe00000UL,\n-    0x9ae68c87UL, 0x3fac73b3UL, 0x290ea1a3UL, 0x3fea9b66UL, 0xe0000000UL,\n-    0x3c39f630UL, 0x00000000UL, 0x3fe00000UL, 0x7f909c4eUL, 0xbf9d4a2cUL,\n-    0xf180bdb1UL, 0x3fec38b2UL, 0x80000000UL, 0xbc76e0b1UL, 0x00000000UL,\n-    0x3fe00000UL, 0x65455a75UL, 0xbfbe0875UL, 0xcf328d46UL, 0x3fed906bUL,\n-    0x20000000UL, 0x3c7457e6UL, 0x00000000UL, 0x3fe00000UL, 0x76acf82dUL,\n-    0x3fa4a031UL, 0x56c62ddaUL, 0x3fee9f41UL, 0xe0000000UL, 0x3c8760b1UL,\n-    0x00000000UL, 0x3fd00000UL, 0x0e5967d5UL, 0xbfac1d1fUL, 0xcff75cb0UL,\n-    0x3fef6297UL, 0x20000000UL, 0x3c756217UL, 0x00000000UL, 0x3fd00000UL,\n-    0x0f592f50UL, 0xbf9ba165UL, 0xa3d12526UL, 0x3fefd88dUL, 0x40000000UL,\n-    0xbc887df6UL, 0x00000000UL, 0x3fc00000UL, 0x00000000UL, 0x00000000UL,\n-    0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n-    0x00000000UL, 0x0f592f50UL, 0x3f9ba165UL, 0xa3d12526UL, 0x3fefd88dUL,\n-    0x40000000UL, 0xbc887df6UL, 0x00000000UL, 0xbfc00000UL, 0x0e5967d5UL,\n-    0x3fac1d1fUL, 0xcff75cb0UL, 0x3fef6297UL, 0x20000000UL, 0x3c756217UL,\n-    0x00000000UL, 0xbfd00000UL, 0x76acf82dUL, 0xbfa4a031UL, 0x56c62ddaUL,\n-    0x3fee9f41UL, 0xe0000000UL, 0x3c8760b1UL, 0x00000000UL, 0xbfd00000UL,\n-    0x65455a75UL, 0x3fbe0875UL, 0xcf328d46UL, 0x3fed906bUL, 0x20000000UL,\n-    0x3c7457e6UL, 0x00000000UL, 0xbfe00000UL, 0x7f909c4eUL, 0x3f9d4a2cUL,\n-    0xf180bdb1UL, 0x3fec38b2UL, 0x80000000UL, 0xbc76e0b1UL, 0x00000000UL,\n-    0xbfe00000UL, 0x9ae68c87UL, 0xbfac73b3UL, 0x290ea1a3UL, 0x3fea9b66UL,\n-    0xe0000000UL, 0x3c39f630UL, 0x00000000UL, 0xbfe00000UL, 0x94247758UL,\n-    0xbfc133ccUL, 0x6b151741UL, 0x3fe8bc80UL, 0x20000000UL, 0xbc82c5e1UL,\n-    0x00000000UL, 0xbfe00000UL, 0x99fcef32UL, 0xbfca8279UL, 0x667f3bcdUL,\n-    0x3fe6a09eUL, 0x20000000UL, 0xbc8bdd34UL, 0x00000000UL, 0xbfe00000UL,\n-    0x53aba2fdUL, 0x3fcd0dfeUL, 0x25091dd6UL, 0x3fe44cf3UL, 0x20000000UL,\n-    0x3c68076aUL, 0x00000000UL, 0xbff00000UL, 0x5bc57974UL, 0x3fc59267UL,\n-    0x39ae68c8UL, 0x3fe1c73bUL, 0x20000000UL, 0x3c8b25ddUL, 0x00000000UL,\n-    0xbff00000UL, 0x73fa1279UL, 0x3fbe3a68UL, 0x3806f63bUL, 0x3fde2b5dUL,\n-    0x20000000UL, 0x3c5e0d89UL, 0x00000000UL, 0xbff00000UL, 0x866b95cfUL,\n-    0x3fb37ca1UL, 0xa6aea963UL, 0x3fd87de2UL, 0xe0000000UL, 0xbc672cedUL,\n-    0x00000000UL, 0xbff00000UL, 0x939d225aUL, 0x3fa60beaUL, 0x2ed59f06UL,\n-    0x3fd29406UL, 0xa0000000UL, 0xbc75d28dUL, 0x00000000UL, 0xbff00000UL,\n-    0x011469fbUL, 0x3f93ad06UL, 0x3c69a60bUL, 0x3fc8f8b8UL, 0xc0000000UL,\n-    0xbc626d19UL, 0x00000000UL, 0xbff00000UL, 0x176d6d31UL, 0x3f73b92eUL,\n-    0xbc29b42cUL, 0x3fb917a6UL, 0xe0000000UL, 0xbc3e2718UL, 0x00000000UL,\n-    0xbff00000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n-    0x00000000UL, 0x00000000UL, 0x00000000UL, 0xbff00000UL, 0x176d6d31UL,\n-    0x3f73b92eUL, 0xbc29b42cUL, 0xbfb917a6UL, 0xe0000000UL, 0x3c3e2718UL,\n-    0x00000000UL, 0xbff00000UL, 0x011469fbUL, 0x3f93ad06UL, 0x3c69a60bUL,\n-    0xbfc8f8b8UL, 0xc0000000UL, 0x3c626d19UL, 0x00000000UL, 0xbff00000UL,\n-    0x939d225aUL, 0x3fa60beaUL, 0x2ed59f06UL, 0xbfd29406UL, 0xa0000000UL,\n-    0x3c75d28dUL, 0x00000000UL, 0xbff00000UL, 0x866b95cfUL, 0x3fb37ca1UL,\n-    0xa6aea963UL, 0xbfd87de2UL, 0xe0000000UL, 0x3c672cedUL, 0x00000000UL,\n-    0xbff00000UL, 0x73fa1279UL, 0x3fbe3a68UL, 0x3806f63bUL, 0xbfde2b5dUL,\n-    0x20000000UL, 0xbc5e0d89UL, 0x00000000UL, 0xbff00000UL, 0x5bc57974UL,\n-    0x3fc59267UL, 0x39ae68c8UL, 0xbfe1c73bUL, 0x20000000UL, 0xbc8b25ddUL,\n-    0x00000000UL, 0xbff00000UL, 0x53aba2fdUL, 0x3fcd0dfeUL, 0x25091dd6UL,\n-    0xbfe44cf3UL, 0x20000000UL, 0xbc68076aUL, 0x00000000UL, 0xbff00000UL,\n-    0x99fcef32UL, 0xbfca8279UL, 0x667f3bcdUL, 0xbfe6a09eUL, 0x20000000UL,\n-    0x3c8bdd34UL, 0x00000000UL, 0xbfe00000UL, 0x94247758UL, 0xbfc133ccUL,\n-    0x6b151741UL, 0xbfe8bc80UL, 0x20000000UL, 0x3c82c5e1UL, 0x00000000UL,\n-    0xbfe00000UL, 0x9ae68c87UL, 0xbfac73b3UL, 0x290ea1a3UL, 0xbfea9b66UL,\n-    0xe0000000UL, 0xbc39f630UL, 0x00000000UL, 0xbfe00000UL, 0x7f909c4eUL,\n-    0x3f9d4a2cUL, 0xf180bdb1UL, 0xbfec38b2UL, 0x80000000UL, 0x3c76e0b1UL,\n-    0x00000000UL, 0xbfe00000UL, 0x65455a75UL, 0x3fbe0875UL, 0xcf328d46UL,\n-    0xbfed906bUL, 0x20000000UL, 0xbc7457e6UL, 0x00000000UL, 0xbfe00000UL,\n-    0x76acf82dUL, 0xbfa4a031UL, 0x56c62ddaUL, 0xbfee9f41UL, 0xe0000000UL,\n-    0xbc8760b1UL, 0x00000000UL, 0xbfd00000UL, 0x0e5967d5UL, 0x3fac1d1fUL,\n-    0xcff75cb0UL, 0xbfef6297UL, 0x20000000UL, 0xbc756217UL, 0x00000000UL,\n-    0xbfd00000UL, 0x0f592f50UL, 0x3f9ba165UL, 0xa3d12526UL, 0xbfefd88dUL,\n-    0x40000000UL, 0x3c887df6UL, 0x00000000UL, 0xbfc00000UL, 0x00000000UL,\n-    0x00000000UL, 0x00000000UL, 0xbff00000UL, 0x00000000UL, 0x00000000UL,\n-    0x00000000UL, 0x00000000UL, 0x0f592f50UL, 0xbf9ba165UL, 0xa3d12526UL,\n-    0xbfefd88dUL, 0x40000000UL, 0x3c887df6UL, 0x00000000UL, 0x3fc00000UL,\n-    0x0e5967d5UL, 0xbfac1d1fUL, 0xcff75cb0UL, 0xbfef6297UL, 0x20000000UL,\n-    0xbc756217UL, 0x00000000UL, 0x3fd00000UL, 0x76acf82dUL, 0x3fa4a031UL,\n-    0x56c62ddaUL, 0xbfee9f41UL, 0xe0000000UL, 0xbc8760b1UL, 0x00000000UL,\n-    0x3fd00000UL, 0x65455a75UL, 0xbfbe0875UL, 0xcf328d46UL, 0xbfed906bUL,\n-    0x20000000UL, 0xbc7457e6UL, 0x00000000UL, 0x3fe00000UL, 0x7f909c4eUL,\n-    0xbf9d4a2cUL, 0xf180bdb1UL, 0xbfec38b2UL, 0x80000000UL, 0x3c76e0b1UL,\n-    0x00000000UL, 0x3fe00000UL, 0x9ae68c87UL, 0x3fac73b3UL, 0x290ea1a3UL,\n-    0xbfea9b66UL, 0xe0000000UL, 0xbc39f630UL, 0x00000000UL, 0x3fe00000UL,\n-    0x94247758UL, 0x3fc133ccUL, 0x6b151741UL, 0xbfe8bc80UL, 0x20000000UL,\n-    0x3c82c5e1UL, 0x00000000UL, 0x3fe00000UL, 0x99fcef32UL, 0x3fca8279UL,\n-    0x667f3bcdUL, 0xbfe6a09eUL, 0x20000000UL, 0x3c8bdd34UL, 0x00000000UL,\n-    0x3fe00000UL, 0x53aba2fdUL, 0xbfcd0dfeUL, 0x25091dd6UL, 0xbfe44cf3UL,\n-    0x20000000UL, 0xbc68076aUL, 0x00000000UL, 0x3ff00000UL, 0x5bc57974UL,\n-    0xbfc59267UL, 0x39ae68c8UL, 0xbfe1c73bUL, 0x20000000UL, 0xbc8b25ddUL,\n-    0x00000000UL, 0x3ff00000UL, 0x73fa1279UL, 0xbfbe3a68UL, 0x3806f63bUL,\n-    0xbfde2b5dUL, 0x20000000UL, 0xbc5e0d89UL, 0x00000000UL, 0x3ff00000UL,\n-    0x866b95cfUL, 0xbfb37ca1UL, 0xa6aea963UL, 0xbfd87de2UL, 0xe0000000UL,\n-    0x3c672cedUL, 0x00000000UL, 0x3ff00000UL, 0x939d225aUL, 0xbfa60beaUL,\n-    0x2ed59f06UL, 0xbfd29406UL, 0xa0000000UL, 0x3c75d28dUL, 0x00000000UL,\n-    0x3ff00000UL, 0x011469fbUL, 0xbf93ad06UL, 0x3c69a60bUL, 0xbfc8f8b8UL,\n-    0xc0000000UL, 0x3c626d19UL, 0x00000000UL, 0x3ff00000UL, 0x176d6d31UL,\n-    0xbf73b92eUL, 0xbc29b42cUL, 0xbfb917a6UL, 0xe0000000UL, 0x3c3e2718UL,\n-    0x00000000UL, 0x3ff00000UL, 0x55555555UL, 0xbfc55555UL, 0x00000000UL,\n-    0xbfe00000UL, 0x11111111UL, 0x3f811111UL, 0x55555555UL, 0x3fa55555UL,\n-    0x1a01a01aUL, 0xbf2a01a0UL, 0x16c16c17UL, 0xbf56c16cUL, 0xa556c734UL,\n-    0x3ec71de3UL, 0x1a01a01aUL, 0x3efa01a0UL, 0x1a600000UL, 0x3d90b461UL,\n-    0x1a600000UL, 0x3d90b461UL, 0x54400000UL, 0x3fb921fbUL, 0x00000000UL,\n-    0x00000000UL, 0x2e037073UL, 0x3b63198aUL, 0x00000000UL, 0x00000000UL,\n-    0x6dc9c883UL, 0x40245f30UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n-    0x43380000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x43600000UL,\n-    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x3c800000UL, 0x00000000UL,\n-    0x00000000UL, 0xffffffffUL, 0x3fefffffUL, 0x00000000UL, 0x00000000UL,\n-    0x00000000UL, 0x80000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n-    0x80000000UL, 0x00000000UL, 0x80000000UL, 0x00000000UL, 0x3fe00000UL,\n-    0x00000000UL, 0x3fe00000UL\n-};\n-\n-void MacroAssembler::fast_sin(XMMRegister xmm0, XMMRegister xmm1, XMMRegister xmm2, XMMRegister xmm3,\n-                              XMMRegister xmm4, XMMRegister xmm5, XMMRegister xmm6, XMMRegister xmm7,\n-                              Register eax, Register ebx, Register edx) {\n-\n-  Label L_2TAG_PACKET_0_0_2, L_2TAG_PACKET_1_0_2, L_2TAG_PACKET_2_0_2, L_2TAG_PACKET_3_0_2;\n-  Label L_2TAG_PACKET_4_0_2;\n-\n-  assert_different_registers(eax, ebx, edx);\n-\n-  address static_const_table_sin = (address)_static_const_table_sin;\n-\n-  subl(rsp, 120);\n-  movl(Address(rsp, 56), ebx);\n-  lea(ebx, ExternalAddress(static_const_table_sin));\n-  movsd(xmm0, Address(rsp, 128));\n-  pextrw(eax, xmm0, 3);\n-  andl(eax, 32767);\n-  subl(eax, 12336);\n-  cmpl(eax, 4293);\n-  jcc(Assembler::above, L_2TAG_PACKET_0_0_2);\n-  movsd(xmm1, Address(ebx, 2160));\n-  mulsd(xmm1, xmm0);\n-  movsd(xmm5, Address(ebx, 2272));\n-  movdqu(xmm4, Address(ebx, 2256));\n-  pand(xmm4, xmm0);\n-  por(xmm5, xmm4);\n-  movsd(xmm3, Address(ebx, 2128));\n-  movdqu(xmm2, Address(ebx, 2112));\n-  addpd(xmm1, xmm5);\n-  cvttsd2sil(edx, xmm1);\n-  cvtsi2sdl(xmm1, edx);\n-  mulsd(xmm3, xmm1);\n-  unpcklpd(xmm1, xmm1);\n-  addl(edx, 1865216);\n-  movdqu(xmm4, xmm0);\n-  andl(edx, 63);\n-  movdqu(xmm5, Address(ebx, 2096));\n-  lea(eax, Address(ebx, 0));\n-  shll(edx, 5);\n-  addl(eax, edx);\n-  mulpd(xmm2, xmm1);\n-  subsd(xmm0, xmm3);\n-  mulsd(xmm1, Address(ebx, 2144));\n-  subsd(xmm4, xmm3);\n-  movsd(xmm7, Address(eax, 8));\n-  unpcklpd(xmm0, xmm0);\n-  movapd(xmm3, xmm4);\n-  subsd(xmm4, xmm2);\n-  mulpd(xmm5, xmm0);\n-  subpd(xmm0, xmm2);\n-  movdqu(xmm6, Address(ebx, 2064));\n-  mulsd(xmm7, xmm4);\n-  subsd(xmm3, xmm4);\n-  mulpd(xmm5, xmm0);\n-  mulpd(xmm0, xmm0);\n-  subsd(xmm3, xmm2);\n-  movdqu(xmm2, Address(eax, 0));\n-  subsd(xmm1, xmm3);\n-  movsd(xmm3, Address(eax, 24));\n-  addsd(xmm2, xmm3);\n-  subsd(xmm7, xmm2);\n-  mulsd(xmm2, xmm4);\n-  mulpd(xmm6, xmm0);\n-  mulsd(xmm3, xmm4);\n-  mulpd(xmm2, xmm0);\n-  mulpd(xmm0, xmm0);\n-  addpd(xmm5, Address(ebx, 2080));\n-  mulsd(xmm4, Address(eax, 0));\n-  addpd(xmm6, Address(ebx, 2048));\n-  mulpd(xmm5, xmm0);\n-  movapd(xmm0, xmm3);\n-  addsd(xmm3, Address(eax, 8));\n-  mulpd(xmm1, xmm7);\n-  movapd(xmm7, xmm4);\n-  addsd(xmm4, xmm3);\n-  addpd(xmm6, xmm5);\n-  movsd(xmm5, Address(eax, 8));\n-  subsd(xmm5, xmm3);\n-  subsd(xmm3, xmm4);\n-  addsd(xmm1, Address(eax, 16));\n-  mulpd(xmm6, xmm2);\n-  addsd(xmm5, xmm0);\n-  addsd(xmm3, xmm7);\n-  addsd(xmm1, xmm5);\n-  addsd(xmm1, xmm3);\n-  addsd(xmm1, xmm6);\n-  unpckhpd(xmm6, xmm6);\n-  addsd(xmm1, xmm6);\n-  addsd(xmm4, xmm1);\n-  movsd(Address(rsp, 0), xmm4);\n-  fld_d(Address(rsp, 0));\n-  jmp(L_2TAG_PACKET_1_0_2);\n-\n-  bind(L_2TAG_PACKET_0_0_2);\n-  jcc(Assembler::greater, L_2TAG_PACKET_2_0_2);\n-  shrl(eax, 4);\n-  cmpl(eax, 268434685);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_3_0_2);\n-  movsd(Address(rsp, 0), xmm0);\n-  fld_d(Address(rsp, 0));\n-  jmp(L_2TAG_PACKET_1_0_2);\n-\n-  bind(L_2TAG_PACKET_3_0_2);\n-  movsd(xmm3, Address(ebx, 2192));\n-  mulsd(xmm3, xmm0);\n-  subsd(xmm3, xmm0);\n-  mulsd(xmm3, Address(ebx, 2208));\n-  movsd(Address(rsp, 0), xmm0);\n-  fld_d(Address(rsp, 0));\n-  jmp(L_2TAG_PACKET_1_0_2);\n-\n-  bind(L_2TAG_PACKET_2_0_2);\n-  movl(eax, Address(rsp, 132));\n-  andl(eax, 2146435072);\n-  cmpl(eax, 2146435072);\n-  jcc(Assembler::equal, L_2TAG_PACKET_4_0_2);\n-  subl(rsp, 32);\n-  movsd(Address(rsp, 0), xmm0);\n-  lea(eax, Address(rsp, 40));\n-  movl(Address(rsp, 8), eax);\n-  movl(eax, 2);\n-  movl(Address(rsp, 12), eax);\n-  call(RuntimeAddress(CAST_FROM_FN_PTR(address, StubRoutines::dlibm_sin_cos_huge())));\n-  addl(rsp, 32);\n-  fld_d(Address(rsp, 16));\n-  jmp(L_2TAG_PACKET_1_0_2);\n-  bind(L_2TAG_PACKET_4_0_2);\n-  fld_d(Address(rsp, 128));\n-  fmul_d(Address(ebx, 2240));\n-  bind(L_2TAG_PACKET_1_0_2);\n-  movl(ebx, Address(rsp, 56));\n-}\n-#endif \/\/ _LP64\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86_sin.cpp","additions":0,"deletions":2203,"binary":false,"changes":2203,"status":"deleted"},{"patch":"@@ -1,2093 +0,0 @@\n-\/*\n-* Copyright (c) 2016, 2021, Intel Corporation. All rights reserved.\n-* Intel Math Library (LIBM) Source Code\n-*\n-* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-*\n-* This code is free software; you can redistribute it and\/or modify it\n-* under the terms of the GNU General Public License version 2 only, as\n-* published by the Free Software Foundation.\n-*\n-* This code is distributed in the hope that it will be useful, but WITHOUT\n-* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-* version 2 for more details (a copy is included in the LICENSE file that\n-* accompanied this code).\n-*\n-* You should have received a copy of the GNU General Public License version\n-* 2 along with this work; if not, write to the Free Software Foundation,\n-* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-*\n-* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-* or visit www.oracle.com if you need additional information or have any\n-* questions.\n-*\n-*\/\n-\n-#include \"precompiled.hpp\"\n-#include \"asm\/assembler.hpp\"\n-#include \"asm\/assembler.inline.hpp\"\n-#include \"macroAssembler_x86.hpp\"\n-#include \"runtime\/stubRoutines.hpp\"\n-#include \"utilities\/globalDefinitions.hpp\"\n-\n-\/******************************************************************************\/\n-\/\/                     ALGORITHM DESCRIPTION - TAN()\n-\/\/                     ---------------------\n-\/\/\n-\/\/ Polynomials coefficients and other constants.\n-\/\/\n-\/\/ Note that in this algorithm, there is a different polynomial for\n-\/\/ each breakpoint, so there are 32 sets of polynomial coefficients\n-\/\/ as well as 32 instances of the other constants.\n-\/\/\n-\/\/ The polynomial coefficients and constants are offset from the start\n-\/\/ of the main block as follows:\n-\/\/\n-\/\/   0:  c8 | c0\n-\/\/  16:  c9 | c1\n-\/\/  32: c10 | c2\n-\/\/  48: c11 | c3\n-\/\/  64: c12 | c4\n-\/\/  80: c13 | c5\n-\/\/  96: c14 | c6\n-\/\/ 112: c15 | c7\n-\/\/ 128: T_hi\n-\/\/ 136: T_lo\n-\/\/ 144: Sigma\n-\/\/ 152: T_hl\n-\/\/ 160: Tau\n-\/\/ 168: Mask\n-\/\/ 176: (end of block)\n-\/\/\n-\/\/ The total table size is therefore 5632 bytes.\n-\/\/\n-\/\/ Note that c0 and c1 are always zero. We could try storing\n-\/\/ other constants here, and just loading the low part of the\n-\/\/ SIMD register in these cases, after ensuring the high part\n-\/\/ is zero.\n-\/\/\n-\/\/ The higher terms of the polynomial are computed in the *low*\n-\/\/ part of the SIMD register. This is so we can overlap the\n-\/\/ multiplication by r^8 and the unpacking of the other part.\n-\/\/\n-\/\/ The constants are:\n-\/\/ T_hi + T_lo = accurate constant term in power series\n-\/\/ Sigma + T_hl = accurate coefficient of r in power series (Sigma=1 bit)\n-\/\/ Tau = multiplier for the reciprocal, always -1 or 0\n-\/\/\n-\/\/ The basic reconstruction formula using these constants is:\n-\/\/\n-\/\/ High = tau * recip_hi + t_hi\n-\/\/ Med = (sgn * r + t_hl * r)_hi\n-\/\/ Low = (sgn * r + t_hl * r)_lo +\n-\/\/       tau * recip_lo + T_lo + (T_hl + sigma) * c + pol\n-\/\/\n-\/\/ where pol = c0 + c1 * r + c2 * r^2 + ... + c15 * r^15\n-\/\/\n-\/\/ (c0 = c1 = 0, but using them keeps SIMD regularity)\n-\/\/\n-\/\/ We then do a compensated sum High + Med, add the low parts together\n-\/\/ and then do the final sum.\n-\/\/\n-\/\/ Here recip_hi + recip_lo is an accurate reciprocal of the remainder\n-\/\/ modulo pi\/2\n-\/\/\n-\/\/ Special cases:\n-\/\/  tan(NaN) = quiet NaN, and raise invalid exception\n-\/\/  tan(INF) = NaN and raise invalid exception\n-\/\/  tan(+\/-0) = +\/-0\n-\/\/\n-\/******************************************************************************\/\n-\n-#ifdef _LP64\n-\/\/ The 64 bit code is at most SSE2 compliant\n-\n-ATTRIBUTE_ALIGNED(16) juint _MUL16[] =\n-{\n-    0x00000000UL, 0x40300000UL, 0x00000000UL, 0x3ff00000UL\n-};\n-\n-ATTRIBUTE_ALIGNED(16) juint _sign_mask_tan[] =\n-{\n-    0x00000000UL, 0x80000000UL, 0x00000000UL, 0x80000000UL\n-};\n-\n-ATTRIBUTE_ALIGNED(16) juint _PI32INV_tan[] =\n-{\n-    0x6dc9c883UL, 0x3fe45f30UL, 0x6dc9c883UL, 0x40245f30UL\n-};\n-\n-ATTRIBUTE_ALIGNED(16) juint _P_1_tan[] =\n-{\n-    0x54444000UL, 0x3fb921fbUL, 0x54440000UL, 0x3fb921fbUL\n-};\n-\n-ATTRIBUTE_ALIGNED(16) juint _P_2_tan[] =\n-{\n-    0x67674000UL, 0xbd32e7b9UL, 0x4c4c0000UL, 0x3d468c23UL\n-};\n-\n-ATTRIBUTE_ALIGNED(16) juint _P_3_tan[] =\n-{\n-    0x3707344aUL, 0x3aa8a2e0UL, 0x03707345UL, 0x3ae98a2eUL\n-};\n-\n-ATTRIBUTE_ALIGNED(16) juint _Ctable_tan[] =\n-{\n-    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x882c10faUL,\n-    0x3f9664f4UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n-    0x00000000UL, 0x00000000UL, 0x55e6c23dUL, 0x3f8226e3UL, 0x55555555UL,\n-    0x3fd55555UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n-    0x0e157de0UL, 0x3f6d6d3dUL, 0x11111111UL, 0x3fc11111UL, 0x00000000UL,\n-    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x452b75e3UL, 0x3f57da36UL,\n-    0x1ba1ba1cUL, 0x3faba1baUL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n-    0x00000000UL, 0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0x00000000UL,\n-    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x4e435f9bUL,\n-    0x3f953f83UL, 0x00000000UL, 0x00000000UL, 0x3c6e8e46UL, 0x3f9b74eaUL,\n-    0x00000000UL, 0x00000000UL, 0xda5b7511UL, 0x3f85ad63UL, 0xdc230b9bUL,\n-    0x3fb97558UL, 0x26cb3788UL, 0x3f881308UL, 0x76fc4985UL, 0x3fd62ac9UL,\n-    0x77bb08baUL, 0x3f757c85UL, 0xb6247521UL, 0x3fb1381eUL, 0x5922170cUL,\n-    0x3f754e95UL, 0x8746482dUL, 0x3fc27f83UL, 0x11055b30UL, 0x3f64e391UL,\n-    0x3e666320UL, 0x3fa3e609UL, 0x0de9dae3UL, 0x3f6301dfUL, 0x1f1dca06UL,\n-    0x3fafa8aeUL, 0x8c5b2da2UL, 0x3fb936bbUL, 0x4e88f7a5UL, 0x3c587d05UL,\n-    0x00000000UL, 0x3ff00000UL, 0xa8935dd9UL, 0x3f83dde2UL, 0x00000000UL,\n-    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x5a279ea3UL, 0x3faa3407UL,\n-    0x00000000UL, 0x00000000UL, 0x432d65faUL, 0x3fa70153UL, 0x00000000UL,\n-    0x00000000UL, 0x891a4602UL, 0x3f9d03efUL, 0xd62ca5f8UL, 0x3fca77d9UL,\n-    0xb35f4628UL, 0x3f97a265UL, 0x433258faUL, 0x3fd8cf51UL, 0xb58fd909UL,\n-    0x3f8f88e3UL, 0x01771ceaUL, 0x3fc2b154UL, 0xf3562f8eUL, 0x3f888f57UL,\n-    0xc028a723UL, 0x3fc7370fUL, 0x20b7f9f0UL, 0x3f80f44cUL, 0x214368e9UL,\n-    0x3fb6dfaaUL, 0x28891863UL, 0x3f79b4b6UL, 0x172dbbf0UL, 0x3fb6cb8eUL,\n-    0xe0553158UL, 0x3fc975f5UL, 0x593fe814UL, 0x3c2ef5d3UL, 0x00000000UL,\n-    0x3ff00000UL, 0x03dec550UL, 0x3fa44203UL, 0x00000000UL, 0x00000000UL,\n-    0x00000000UL, 0x00000000UL, 0x9314533eUL, 0x3fbb8ec5UL, 0x00000000UL,\n-    0x00000000UL, 0x09aa36d0UL, 0x3fb6d3f4UL, 0x00000000UL, 0x00000000UL,\n-    0xdcb427fdUL, 0x3fb13950UL, 0xd87ab0bbUL, 0x3fd5335eUL, 0xce0ae8a5UL,\n-    0x3fabb382UL, 0x79143126UL, 0x3fddba41UL, 0x5f2b28d4UL, 0x3fa552f1UL,\n-    0x59f21a6dUL, 0x3fd015abUL, 0x22c27d95UL, 0x3fa0e984UL, 0xe19fc6aaUL,\n-    0x3fd0576cUL, 0x8f2c2950UL, 0x3f9a4898UL, 0xc0b3f22cUL, 0x3fc59462UL,\n-    0x1883a4b8UL, 0x3f94b61cUL, 0x3f838640UL, 0x3fc30eb8UL, 0x355c63dcUL,\n-    0x3fd36a08UL, 0x1dce993dUL, 0xbc6d704dUL, 0x00000000UL, 0x3ff00000UL,\n-    0x2b82ab63UL, 0x3fb78e92UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n-    0x00000000UL, 0x56f37042UL, 0x3fccfc56UL, 0x00000000UL, 0x00000000UL,\n-    0xaa563951UL, 0x3fc90125UL, 0x00000000UL, 0x00000000UL, 0x3d0e7c5dUL,\n-    0x3fc50533UL, 0x9bed9b2eUL, 0x3fdf0ed9UL, 0x5fe7c47cUL, 0x3fc1f250UL,\n-    0x96c125e5UL, 0x3fe2edd9UL, 0x5a02bbd8UL, 0x3fbe5c71UL, 0x86362c20UL,\n-    0x3fda08b7UL, 0x4b4435edUL, 0x3fb9d342UL, 0x4b494091UL, 0x3fd911bdUL,\n-    0xb56658beUL, 0x3fb5e4c7UL, 0x93a2fd76UL, 0x3fd3c092UL, 0xda271794UL,\n-    0x3fb29910UL, 0x3303df2bUL, 0x3fd189beUL, 0x99fcef32UL, 0x3fda8279UL,\n-    0xb68c1467UL, 0x3c708b2fUL, 0x00000000UL, 0x3ff00000UL, 0x980c4337UL,\n-    0x3fc5f619UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n-    0xcc03e501UL, 0x3fdff10fUL, 0x00000000UL, 0x00000000UL, 0x44a4e845UL,\n-    0x3fddb63bUL, 0x00000000UL, 0x00000000UL, 0x3768ad9fUL, 0x3fdb72a4UL,\n-    0x3dd01ccaUL, 0x3fe5fdb9UL, 0xa61d2811UL, 0x3fd972b2UL, 0x5645ad0bUL,\n-    0x3fe977f9UL, 0xd013b3abUL, 0x3fd78ca3UL, 0xbf0bf914UL, 0x3fe4f192UL,\n-    0x4d53e730UL, 0x3fd5d060UL, 0x3f8b9000UL, 0x3fe49933UL, 0xe2b82f08UL,\n-    0x3fd4322aUL, 0x5936a835UL, 0x3fe27ae1UL, 0xb1c61c9bUL, 0x3fd2b3fbUL,\n-    0xef478605UL, 0x3fe1659eUL, 0x190834ecUL, 0x3fe11ab7UL, 0xcdb625eaUL,\n-    0xbc8e564bUL, 0x00000000UL, 0x3ff00000UL, 0xb07217e3UL, 0x3fd248f1UL,\n-    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x2b2c49d0UL,\n-    0x3ff2de9cUL, 0x00000000UL, 0x00000000UL, 0x2655bc98UL, 0x3ff33e58UL,\n-    0x00000000UL, 0x00000000UL, 0xff691fa2UL, 0x3ff3972eUL, 0xe93463bdUL,\n-    0x3feeed87UL, 0x070e10a0UL, 0x3ff3f5b2UL, 0xf4d790a4UL, 0x3ff20c10UL,\n-    0xa04e8ea3UL, 0x3ff4541aUL, 0x386accd3UL, 0x3ff1369eUL, 0x222a66ddUL,\n-    0x3ff4b521UL, 0x22a9777eUL, 0x3ff20817UL, 0x52a04a6eUL, 0x3ff5178fUL,\n-    0xddaa0031UL, 0x3ff22137UL, 0x4447d47cUL, 0x3ff57c01UL, 0x1e9c7f1dUL,\n-    0x3ff29311UL, 0x2ab7f990UL, 0x3fe561b8UL, 0x209c7df1UL, 0x3c87a8c5UL,\n-    0x00000000UL, 0x3ff00000UL, 0x4170bcc6UL, 0x3fdc92d8UL, 0x00000000UL,\n-    0x00000000UL, 0x00000000UL, 0x00000000UL, 0xc7ab4d5aUL, 0x40085e24UL,\n-    0x00000000UL, 0x00000000UL, 0xe93ea75dUL, 0x400b963dUL, 0x00000000UL,\n-    0x00000000UL, 0x94a7f25aUL, 0x400f37e2UL, 0x4b6261cbUL, 0x3ff5f984UL,\n-    0x5a9dd812UL, 0x4011aab0UL, 0x74c30018UL, 0x3ffaf5a5UL, 0x7f2ce8e3UL,\n-    0x4013fe8bUL, 0xfe8e54faUL, 0x3ffd7334UL, 0x670d618dUL, 0x4016a10cUL,\n-    0x4db97058UL, 0x4000e012UL, 0x24df44ddUL, 0x40199c5fUL, 0x697d6eceUL,\n-    0x4003006eUL, 0x83298b82UL, 0x401cfc4dUL, 0x19d490d6UL, 0x40058c19UL,\n-    0x2ae42850UL, 0x3fea4300UL, 0x118e20e6UL, 0xbc7a6db8UL, 0x00000000UL,\n-    0x40000000UL, 0xe33345b8UL, 0xbfd4e526UL, 0x00000000UL, 0x00000000UL,\n-    0x00000000UL, 0x00000000UL, 0x65965966UL, 0x40219659UL, 0x00000000UL,\n-    0x00000000UL, 0x882c10faUL, 0x402664f4UL, 0x00000000UL, 0x00000000UL,\n-    0x83cd3723UL, 0x402c8342UL, 0x00000000UL, 0x40000000UL, 0x55e6c23dUL,\n-    0x403226e3UL, 0x55555555UL, 0x40055555UL, 0x34451939UL, 0x40371c96UL,\n-    0xaaaaaaabUL, 0x400aaaaaUL, 0x0e157de0UL, 0x403d6d3dUL, 0x11111111UL,\n-    0x40111111UL, 0xa738201fUL, 0x4042bbceUL, 0x05b05b06UL, 0x4015b05bUL,\n-    0x452b75e3UL, 0x4047da36UL, 0x1ba1ba1cUL, 0x401ba1baUL, 0x00000000UL,\n-    0x3ff00000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x40000000UL,\n-    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n-    0x00000000UL, 0x4f48b8d3UL, 0xbf33eaf9UL, 0x00000000UL, 0x00000000UL,\n-    0x0cf7586fUL, 0x3f20b8eaUL, 0x00000000UL, 0x00000000UL, 0xd0258911UL,\n-    0xbf0abaf3UL, 0x23e49fe9UL, 0xbfab5a8cUL, 0x2d53222eUL, 0x3ef60d15UL,\n-    0x21169451UL, 0x3fa172b2UL, 0xbb254dbcUL, 0xbee1d3b5UL, 0xdbf93b8eUL,\n-    0xbf84c7dbUL, 0x05b4630bUL, 0x3ecd3364UL, 0xee9aada7UL, 0x3f743924UL,\n-    0x794a8297UL, 0xbeb7b7b9UL, 0xe015f797UL, 0xbf5d41f5UL, 0xe41a4a56UL,\n-    0x3ea35dfbUL, 0xe4c2a251UL, 0x3f49a2abUL, 0x5af9e000UL, 0xbfce49ceUL,\n-    0x8c743719UL, 0x3d1eb860UL, 0x00000000UL, 0x00000000UL, 0x1b4863cfUL,\n-    0x3fd78294UL, 0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0xfffffff8UL,\n-    0x535ad890UL, 0xbf2b9320UL, 0x00000000UL, 0x00000000UL, 0x018fdf1fUL,\n-    0x3f16d61dUL, 0x00000000UL, 0x00000000UL, 0x0359f1beUL, 0xbf0139e4UL,\n-    0xa4317c6dUL, 0xbfa67e17UL, 0x82672d0fUL, 0x3eebb405UL, 0x2f1b621eUL,\n-    0x3f9f455bUL, 0x51ccf238UL, 0xbed55317UL, 0xf437b9acUL, 0xbf804beeUL,\n-    0xc791a2b5UL, 0x3ec0e993UL, 0x919a1db2UL, 0x3f7080c2UL, 0x336a5b0eUL,\n-    0xbeaa48a2UL, 0x0a268358UL, 0xbf55a443UL, 0xdfd978e4UL, 0x3e94b61fUL,\n-    0xd7767a58UL, 0x3f431806UL, 0x2aea0000UL, 0xbfc9bbe8UL, 0x7723ea61UL,\n-    0xbd3a2369UL, 0x00000000UL, 0x00000000UL, 0xdf7796ffUL, 0x3fd6e642UL,\n-    0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0xfffffff8UL, 0xb9ff07ceUL,\n-    0xbf231c78UL, 0x00000000UL, 0x00000000UL, 0xa5517182UL, 0x3f0ff0e0UL,\n-    0x00000000UL, 0x00000000UL, 0x790b4cbcUL, 0xbef66191UL, 0x848a46c6UL,\n-    0xbfa21ac0UL, 0xb16435faUL, 0x3ee1d3ecUL, 0x2a1aa832UL, 0x3f9c71eaUL,\n-    0xfdd299efUL, 0xbec9dd1aUL, 0x3f8dbaafUL, 0xbf793363UL, 0x309fc6eaUL,\n-    0x3eb415d6UL, 0xbee60471UL, 0x3f6b83baUL, 0x94a0a697UL, 0xbe9dae11UL,\n-    0x3e5c67b3UL, 0xbf4fd07bUL, 0x9a8f3e3eUL, 0x3e86bd75UL, 0xa4beb7a4UL,\n-    0x3f3d1eb1UL, 0x29cfc000UL, 0xbfc549ceUL, 0xbf159358UL, 0xbd397b33UL,\n-    0x00000000UL, 0x00000000UL, 0x871fee6cUL, 0x3fd666f0UL, 0x00000000UL,\n-    0x3ff00000UL, 0x00000000UL, 0xfffffff8UL, 0x7d98a556UL, 0xbf1a3958UL,\n-    0x00000000UL, 0x00000000UL, 0x9d88dc01UL, 0x3f0704c2UL, 0x00000000UL,\n-    0x00000000UL, 0x73742a2bUL, 0xbeed054aUL, 0x58844587UL, 0xbf9c2a13UL,\n-    0x55688a79UL, 0x3ed7a326UL, 0xee33f1d6UL, 0x3f9a48f4UL, 0xa8dc9888UL,\n-    0xbebf8939UL, 0xaad4b5b8UL, 0xbf72f746UL, 0x9102efa1UL, 0x3ea88f82UL,\n-    0xdabc29cfUL, 0x3f678228UL, 0x9289afb8UL, 0xbe90f456UL, 0x741fb4edUL,\n-    0xbf46f3a3UL, 0xa97f6663UL, 0x3e79b4bfUL, 0xca89ff3fUL, 0x3f36db70UL,\n-    0xa8a2a000UL, 0xbfc0ee13UL, 0x3da24be1UL, 0xbd338b9fUL, 0x00000000UL,\n-    0x00000000UL, 0x11cd6c69UL, 0x3fd601fdUL, 0x00000000UL, 0x3ff00000UL,\n-    0x00000000UL, 0xfffffff8UL, 0x1a154b97UL, 0xbf116b01UL, 0x00000000UL,\n-    0x00000000UL, 0x2d427630UL, 0x3f0147bfUL, 0x00000000UL, 0x00000000UL,\n-    0xb93820c8UL, 0xbee264d4UL, 0xbb6cbb18UL, 0xbf94ab8cUL, 0x888d4d92UL,\n-    0x3ed0568bUL, 0x60730f7cUL, 0x3f98b19bUL, 0xe4b1fb11UL, 0xbeb2f950UL,\n-    0x22cf9f74UL, 0xbf6b21cdUL, 0x4a3ff0a6UL, 0x3e9f499eUL, 0xfd2b83ceUL,\n-    0x3f64aad7UL, 0x637b73afUL, 0xbe83487cUL, 0xe522591aUL, 0xbf3fc092UL,\n-    0xa158e8bcUL, 0x3e6e3aaeUL, 0xe5e82ffaUL, 0x3f329d2fUL, 0xd636a000UL,\n-    0xbfb9477fUL, 0xc2c2d2bcUL, 0xbd135ef9UL, 0x00000000UL, 0x00000000UL,\n-    0xf2fdb123UL, 0x3fd5b566UL, 0x00000000UL, 0x3ff00000UL, 0x00000000UL,\n-    0xfffffff8UL, 0xc41acb64UL, 0xbf05448dUL, 0x00000000UL, 0x00000000UL,\n-    0xdbb03d6fUL, 0x3efb7ad2UL, 0x00000000UL, 0x00000000UL, 0x9e42962dUL,\n-    0xbed5aea5UL, 0x2579f8efUL, 0xbf8b2398UL, 0x288a1ed9UL, 0x3ec81441UL,\n-    0xb0198dc5UL, 0x3f979a3aUL, 0x2fdfe253UL, 0xbea57cd3UL, 0x5766336fUL,\n-    0xbf617caaUL, 0x600944c3UL, 0x3e954ed6UL, 0xa4e0aaf8UL, 0x3f62c646UL,\n-    0x6b8fb29cUL, 0xbe74e3a3UL, 0xdc4c0409UL, 0xbf33f952UL, 0x9bffe365UL,\n-    0x3e6301ecUL, 0xb8869e44UL, 0x3f2fc566UL, 0xe1e04000UL, 0xbfb0cc62UL,\n-    0x016b907fUL, 0xbd119cbcUL, 0x00000000UL, 0x00000000UL, 0xe6b9d8faUL,\n-    0x3fd57fb3UL, 0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0xfffffff8UL,\n-    0x5daf22a6UL, 0xbef429d7UL, 0x00000000UL, 0x00000000UL, 0x06bca545UL,\n-    0x3ef7a27dUL, 0x00000000UL, 0x00000000UL, 0x7211c19aUL, 0xbec41c3eUL,\n-    0x956ed53eUL, 0xbf7ae3f4UL, 0xee750e72UL, 0x3ec3901bUL, 0x91d443f5UL,\n-    0x3f96f713UL, 0x36661e6cUL, 0xbe936e09UL, 0x506f9381UL, 0xbf5122e8UL,\n-    0xcb6dd43fUL, 0x3e9041b9UL, 0x6698b2ffUL, 0x3f61b0c7UL, 0x576bf12bUL,\n-    0xbe625a8aUL, 0xe5a0e9dcUL, 0xbf23499dUL, 0x110384ddUL, 0x3e5b1c2cUL,\n-    0x68d43db6UL, 0x3f2cb899UL, 0x6ecac000UL, 0xbfa0c414UL, 0xcd7dd58cUL,\n-    0x3d13500fUL, 0x00000000UL, 0x00000000UL, 0x85a2c8fbUL, 0x3fd55fe0UL,\n-    0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0xfffffff8UL, 0x00000000UL,\n-    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x2bf70ebeUL, 0x3ef66a8fUL,\n-    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n-    0x00000000UL, 0xd644267fUL, 0x3ec22805UL, 0x16c16c17UL, 0x3f96c16cUL,\n-    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0xc4e09162UL,\n-    0x3e8d6db2UL, 0xbc011567UL, 0x3f61566aUL, 0x00000000UL, 0x00000000UL,\n-    0x00000000UL, 0x00000000UL, 0x1f79955cUL, 0x3e57da4eUL, 0x9334ef0bUL,\n-    0x3f2bbd77UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n-    0x00000000UL, 0x00000000UL, 0x55555555UL, 0x3fd55555UL, 0x00000000UL,\n-    0x3ff00000UL, 0x00000000UL, 0xfffffff8UL, 0x5daf22a6UL, 0x3ef429d7UL,\n-    0x00000000UL, 0x00000000UL, 0x06bca545UL, 0x3ef7a27dUL, 0x00000000UL,\n-    0x00000000UL, 0x7211c19aUL, 0x3ec41c3eUL, 0x956ed53eUL, 0x3f7ae3f4UL,\n-    0xee750e72UL, 0x3ec3901bUL, 0x91d443f5UL, 0x3f96f713UL, 0x36661e6cUL,\n-    0x3e936e09UL, 0x506f9381UL, 0x3f5122e8UL, 0xcb6dd43fUL, 0x3e9041b9UL,\n-    0x6698b2ffUL, 0x3f61b0c7UL, 0x576bf12bUL, 0x3e625a8aUL, 0xe5a0e9dcUL,\n-    0x3f23499dUL, 0x110384ddUL, 0x3e5b1c2cUL, 0x68d43db6UL, 0x3f2cb899UL,\n-    0x6ecac000UL, 0x3fa0c414UL, 0xcd7dd58cUL, 0xbd13500fUL, 0x00000000UL,\n-    0x00000000UL, 0x85a2c8fbUL, 0x3fd55fe0UL, 0x00000000UL, 0x3ff00000UL,\n-    0x00000000UL, 0xfffffff8UL, 0xc41acb64UL, 0x3f05448dUL, 0x00000000UL,\n-    0x00000000UL, 0xdbb03d6fUL, 0x3efb7ad2UL, 0x00000000UL, 0x00000000UL,\n-    0x9e42962dUL, 0x3ed5aea5UL, 0x2579f8efUL, 0x3f8b2398UL, 0x288a1ed9UL,\n-    0x3ec81441UL, 0xb0198dc5UL, 0x3f979a3aUL, 0x2fdfe253UL, 0x3ea57cd3UL,\n-    0x5766336fUL, 0x3f617caaUL, 0x600944c3UL, 0x3e954ed6UL, 0xa4e0aaf8UL,\n-    0x3f62c646UL, 0x6b8fb29cUL, 0x3e74e3a3UL, 0xdc4c0409UL, 0x3f33f952UL,\n-    0x9bffe365UL, 0x3e6301ecUL, 0xb8869e44UL, 0x3f2fc566UL, 0xe1e04000UL,\n-    0x3fb0cc62UL, 0x016b907fUL, 0x3d119cbcUL, 0x00000000UL, 0x00000000UL,\n-    0xe6b9d8faUL, 0x3fd57fb3UL, 0x00000000UL, 0x3ff00000UL, 0x00000000UL,\n-    0xfffffff8UL, 0x1a154b97UL, 0x3f116b01UL, 0x00000000UL, 0x00000000UL,\n-    0x2d427630UL, 0x3f0147bfUL, 0x00000000UL, 0x00000000UL, 0xb93820c8UL,\n-    0x3ee264d4UL, 0xbb6cbb18UL, 0x3f94ab8cUL, 0x888d4d92UL, 0x3ed0568bUL,\n-    0x60730f7cUL, 0x3f98b19bUL, 0xe4b1fb11UL, 0x3eb2f950UL, 0x22cf9f74UL,\n-    0x3f6b21cdUL, 0x4a3ff0a6UL, 0x3e9f499eUL, 0xfd2b83ceUL, 0x3f64aad7UL,\n-    0x637b73afUL, 0x3e83487cUL, 0xe522591aUL, 0x3f3fc092UL, 0xa158e8bcUL,\n-    0x3e6e3aaeUL, 0xe5e82ffaUL, 0x3f329d2fUL, 0xd636a000UL, 0x3fb9477fUL,\n-    0xc2c2d2bcUL, 0x3d135ef9UL, 0x00000000UL, 0x00000000UL, 0xf2fdb123UL,\n-    0x3fd5b566UL, 0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0xfffffff8UL,\n-    0x7d98a556UL, 0x3f1a3958UL, 0x00000000UL, 0x00000000UL, 0x9d88dc01UL,\n-    0x3f0704c2UL, 0x00000000UL, 0x00000000UL, 0x73742a2bUL, 0x3eed054aUL,\n-    0x58844587UL, 0x3f9c2a13UL, 0x55688a79UL, 0x3ed7a326UL, 0xee33f1d6UL,\n-    0x3f9a48f4UL, 0xa8dc9888UL, 0x3ebf8939UL, 0xaad4b5b8UL, 0x3f72f746UL,\n-    0x9102efa1UL, 0x3ea88f82UL, 0xdabc29cfUL, 0x3f678228UL, 0x9289afb8UL,\n-    0x3e90f456UL, 0x741fb4edUL, 0x3f46f3a3UL, 0xa97f6663UL, 0x3e79b4bfUL,\n-    0xca89ff3fUL, 0x3f36db70UL, 0xa8a2a000UL, 0x3fc0ee13UL, 0x3da24be1UL,\n-    0x3d338b9fUL, 0x00000000UL, 0x00000000UL, 0x11cd6c69UL, 0x3fd601fdUL,\n-    0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0xfffffff8UL, 0xb9ff07ceUL,\n-    0x3f231c78UL, 0x00000000UL, 0x00000000UL, 0xa5517182UL, 0x3f0ff0e0UL,\n-    0x00000000UL, 0x00000000UL, 0x790b4cbcUL, 0x3ef66191UL, 0x848a46c6UL,\n-    0x3fa21ac0UL, 0xb16435faUL, 0x3ee1d3ecUL, 0x2a1aa832UL, 0x3f9c71eaUL,\n-    0xfdd299efUL, 0x3ec9dd1aUL, 0x3f8dbaafUL, 0x3f793363UL, 0x309fc6eaUL,\n-    0x3eb415d6UL, 0xbee60471UL, 0x3f6b83baUL, 0x94a0a697UL, 0x3e9dae11UL,\n-    0x3e5c67b3UL, 0x3f4fd07bUL, 0x9a8f3e3eUL, 0x3e86bd75UL, 0xa4beb7a4UL,\n-    0x3f3d1eb1UL, 0x29cfc000UL, 0x3fc549ceUL, 0xbf159358UL, 0x3d397b33UL,\n-    0x00000000UL, 0x00000000UL, 0x871fee6cUL, 0x3fd666f0UL, 0x00000000UL,\n-    0x3ff00000UL, 0x00000000UL, 0xfffffff8UL, 0x535ad890UL, 0x3f2b9320UL,\n-    0x00000000UL, 0x00000000UL, 0x018fdf1fUL, 0x3f16d61dUL, 0x00000000UL,\n-    0x00000000UL, 0x0359f1beUL, 0x3f0139e4UL, 0xa4317c6dUL, 0x3fa67e17UL,\n-    0x82672d0fUL, 0x3eebb405UL, 0x2f1b621eUL, 0x3f9f455bUL, 0x51ccf238UL,\n-    0x3ed55317UL, 0xf437b9acUL, 0x3f804beeUL, 0xc791a2b5UL, 0x3ec0e993UL,\n-    0x919a1db2UL, 0x3f7080c2UL, 0x336a5b0eUL, 0x3eaa48a2UL, 0x0a268358UL,\n-    0x3f55a443UL, 0xdfd978e4UL, 0x3e94b61fUL, 0xd7767a58UL, 0x3f431806UL,\n-    0x2aea0000UL, 0x3fc9bbe8UL, 0x7723ea61UL, 0x3d3a2369UL, 0x00000000UL,\n-    0x00000000UL, 0xdf7796ffUL, 0x3fd6e642UL, 0x00000000UL, 0x3ff00000UL,\n-    0x00000000UL, 0xfffffff8UL, 0x4f48b8d3UL, 0x3f33eaf9UL, 0x00000000UL,\n-    0x00000000UL, 0x0cf7586fUL, 0x3f20b8eaUL, 0x00000000UL, 0x00000000UL,\n-    0xd0258911UL, 0x3f0abaf3UL, 0x23e49fe9UL, 0x3fab5a8cUL, 0x2d53222eUL,\n-    0x3ef60d15UL, 0x21169451UL, 0x3fa172b2UL, 0xbb254dbcUL, 0x3ee1d3b5UL,\n-    0xdbf93b8eUL, 0x3f84c7dbUL, 0x05b4630bUL, 0x3ecd3364UL, 0xee9aada7UL,\n-    0x3f743924UL, 0x794a8297UL, 0x3eb7b7b9UL, 0xe015f797UL, 0x3f5d41f5UL,\n-    0xe41a4a56UL, 0x3ea35dfbUL, 0xe4c2a251UL, 0x3f49a2abUL, 0x5af9e000UL,\n-    0x3fce49ceUL, 0x8c743719UL, 0xbd1eb860UL, 0x00000000UL, 0x00000000UL,\n-    0x1b4863cfUL, 0x3fd78294UL, 0x00000000UL, 0x3ff00000UL, 0x00000000UL,\n-    0xfffffff8UL, 0x65965966UL, 0xc0219659UL, 0x00000000UL, 0x00000000UL,\n-    0x882c10faUL, 0x402664f4UL, 0x00000000UL, 0x00000000UL, 0x83cd3723UL,\n-    0xc02c8342UL, 0x00000000UL, 0xc0000000UL, 0x55e6c23dUL, 0x403226e3UL,\n-    0x55555555UL, 0x40055555UL, 0x34451939UL, 0xc0371c96UL, 0xaaaaaaabUL,\n-    0xc00aaaaaUL, 0x0e157de0UL, 0x403d6d3dUL, 0x11111111UL, 0x40111111UL,\n-    0xa738201fUL, 0xc042bbceUL, 0x05b05b06UL, 0xc015b05bUL, 0x452b75e3UL,\n-    0x4047da36UL, 0x1ba1ba1cUL, 0x401ba1baUL, 0x00000000UL, 0xbff00000UL,\n-    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x40000000UL, 0x00000000UL,\n-    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n-    0xc7ab4d5aUL, 0xc0085e24UL, 0x00000000UL, 0x00000000UL, 0xe93ea75dUL,\n-    0x400b963dUL, 0x00000000UL, 0x00000000UL, 0x94a7f25aUL, 0xc00f37e2UL,\n-    0x4b6261cbUL, 0xbff5f984UL, 0x5a9dd812UL, 0x4011aab0UL, 0x74c30018UL,\n-    0x3ffaf5a5UL, 0x7f2ce8e3UL, 0xc013fe8bUL, 0xfe8e54faUL, 0xbffd7334UL,\n-    0x670d618dUL, 0x4016a10cUL, 0x4db97058UL, 0x4000e012UL, 0x24df44ddUL,\n-    0xc0199c5fUL, 0x697d6eceUL, 0xc003006eUL, 0x83298b82UL, 0x401cfc4dUL,\n-    0x19d490d6UL, 0x40058c19UL, 0x2ae42850UL, 0xbfea4300UL, 0x118e20e6UL,\n-    0x3c7a6db8UL, 0x00000000UL, 0x40000000UL, 0xe33345b8UL, 0xbfd4e526UL,\n-    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x2b2c49d0UL,\n-    0xbff2de9cUL, 0x00000000UL, 0x00000000UL, 0x2655bc98UL, 0x3ff33e58UL,\n-    0x00000000UL, 0x00000000UL, 0xff691fa2UL, 0xbff3972eUL, 0xe93463bdUL,\n-    0xbfeeed87UL, 0x070e10a0UL, 0x3ff3f5b2UL, 0xf4d790a4UL, 0x3ff20c10UL,\n-    0xa04e8ea3UL, 0xbff4541aUL, 0x386accd3UL, 0xbff1369eUL, 0x222a66ddUL,\n-    0x3ff4b521UL, 0x22a9777eUL, 0x3ff20817UL, 0x52a04a6eUL, 0xbff5178fUL,\n-    0xddaa0031UL, 0xbff22137UL, 0x4447d47cUL, 0x3ff57c01UL, 0x1e9c7f1dUL,\n-    0x3ff29311UL, 0x2ab7f990UL, 0xbfe561b8UL, 0x209c7df1UL, 0xbc87a8c5UL,\n-    0x00000000UL, 0x3ff00000UL, 0x4170bcc6UL, 0x3fdc92d8UL, 0x00000000UL,\n-    0x00000000UL, 0x00000000UL, 0x00000000UL, 0xcc03e501UL, 0xbfdff10fUL,\n-    0x00000000UL, 0x00000000UL, 0x44a4e845UL, 0x3fddb63bUL, 0x00000000UL,\n-    0x00000000UL, 0x3768ad9fUL, 0xbfdb72a4UL, 0x3dd01ccaUL, 0xbfe5fdb9UL,\n-    0xa61d2811UL, 0x3fd972b2UL, 0x5645ad0bUL, 0x3fe977f9UL, 0xd013b3abUL,\n-    0xbfd78ca3UL, 0xbf0bf914UL, 0xbfe4f192UL, 0x4d53e730UL, 0x3fd5d060UL,\n-    0x3f8b9000UL, 0x3fe49933UL, 0xe2b82f08UL, 0xbfd4322aUL, 0x5936a835UL,\n-    0xbfe27ae1UL, 0xb1c61c9bUL, 0x3fd2b3fbUL, 0xef478605UL, 0x3fe1659eUL,\n-    0x190834ecUL, 0xbfe11ab7UL, 0xcdb625eaUL, 0x3c8e564bUL, 0x00000000UL,\n-    0x3ff00000UL, 0xb07217e3UL, 0x3fd248f1UL, 0x00000000UL, 0x00000000UL,\n-    0x00000000UL, 0x00000000UL, 0x56f37042UL, 0xbfccfc56UL, 0x00000000UL,\n-    0x00000000UL, 0xaa563951UL, 0x3fc90125UL, 0x00000000UL, 0x00000000UL,\n-    0x3d0e7c5dUL, 0xbfc50533UL, 0x9bed9b2eUL, 0xbfdf0ed9UL, 0x5fe7c47cUL,\n-    0x3fc1f250UL, 0x96c125e5UL, 0x3fe2edd9UL, 0x5a02bbd8UL, 0xbfbe5c71UL,\n-    0x86362c20UL, 0xbfda08b7UL, 0x4b4435edUL, 0x3fb9d342UL, 0x4b494091UL,\n-    0x3fd911bdUL, 0xb56658beUL, 0xbfb5e4c7UL, 0x93a2fd76UL, 0xbfd3c092UL,\n-    0xda271794UL, 0x3fb29910UL, 0x3303df2bUL, 0x3fd189beUL, 0x99fcef32UL,\n-    0xbfda8279UL, 0xb68c1467UL, 0xbc708b2fUL, 0x00000000UL, 0x3ff00000UL,\n-    0x980c4337UL, 0x3fc5f619UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n-    0x00000000UL, 0x9314533eUL, 0xbfbb8ec5UL, 0x00000000UL, 0x00000000UL,\n-    0x09aa36d0UL, 0x3fb6d3f4UL, 0x00000000UL, 0x00000000UL, 0xdcb427fdUL,\n-    0xbfb13950UL, 0xd87ab0bbUL, 0xbfd5335eUL, 0xce0ae8a5UL, 0x3fabb382UL,\n-    0x79143126UL, 0x3fddba41UL, 0x5f2b28d4UL, 0xbfa552f1UL, 0x59f21a6dUL,\n-    0xbfd015abUL, 0x22c27d95UL, 0x3fa0e984UL, 0xe19fc6aaUL, 0x3fd0576cUL,\n-    0x8f2c2950UL, 0xbf9a4898UL, 0xc0b3f22cUL, 0xbfc59462UL, 0x1883a4b8UL,\n-    0x3f94b61cUL, 0x3f838640UL, 0x3fc30eb8UL, 0x355c63dcUL, 0xbfd36a08UL,\n-    0x1dce993dUL, 0x3c6d704dUL, 0x00000000UL, 0x3ff00000UL, 0x2b82ab63UL,\n-    0x3fb78e92UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n-    0x5a279ea3UL, 0xbfaa3407UL, 0x00000000UL, 0x00000000UL, 0x432d65faUL,\n-    0x3fa70153UL, 0x00000000UL, 0x00000000UL, 0x891a4602UL, 0xbf9d03efUL,\n-    0xd62ca5f8UL, 0xbfca77d9UL, 0xb35f4628UL, 0x3f97a265UL, 0x433258faUL,\n-    0x3fd8cf51UL, 0xb58fd909UL, 0xbf8f88e3UL, 0x01771ceaUL, 0xbfc2b154UL,\n-    0xf3562f8eUL, 0x3f888f57UL, 0xc028a723UL, 0x3fc7370fUL, 0x20b7f9f0UL,\n-    0xbf80f44cUL, 0x214368e9UL, 0xbfb6dfaaUL, 0x28891863UL, 0x3f79b4b6UL,\n-    0x172dbbf0UL, 0x3fb6cb8eUL, 0xe0553158UL, 0xbfc975f5UL, 0x593fe814UL,\n-    0xbc2ef5d3UL, 0x00000000UL, 0x3ff00000UL, 0x03dec550UL, 0x3fa44203UL,\n-    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x4e435f9bUL,\n-    0xbf953f83UL, 0x00000000UL, 0x00000000UL, 0x3c6e8e46UL, 0x3f9b74eaUL,\n-    0x00000000UL, 0x00000000UL, 0xda5b7511UL, 0xbf85ad63UL, 0xdc230b9bUL,\n-    0xbfb97558UL, 0x26cb3788UL, 0x3f881308UL, 0x76fc4985UL, 0x3fd62ac9UL,\n-    0x77bb08baUL, 0xbf757c85UL, 0xb6247521UL, 0xbfb1381eUL, 0x5922170cUL,\n-    0x3f754e95UL, 0x8746482dUL, 0x3fc27f83UL, 0x11055b30UL, 0xbf64e391UL,\n-    0x3e666320UL, 0xbfa3e609UL, 0x0de9dae3UL, 0x3f6301dfUL, 0x1f1dca06UL,\n-    0x3fafa8aeUL, 0x8c5b2da2UL, 0xbfb936bbUL, 0x4e88f7a5UL, 0xbc587d05UL,\n-    0x00000000UL, 0x3ff00000UL, 0xa8935dd9UL, 0x3f83dde2UL, 0x00000000UL,\n-    0x00000000UL, 0x00000000UL, 0x00000000UL\n-};\n-\n-ATTRIBUTE_ALIGNED(16) juint _MASK_35_tan[] =\n-{\n-    0xfffc0000UL, 0xffffffffUL, 0x00000000UL, 0x00000000UL\n-};\n-\n-ATTRIBUTE_ALIGNED(16) juint _Q_11_tan[] =\n-{\n-    0xb8fe4d77UL, 0x3f82609aUL\n-};\n-\n-ATTRIBUTE_ALIGNED(16) juint _Q_9_tan[] =\n-{\n-    0xbf847a43UL, 0x3f9664a0UL\n-};\n-\n-ATTRIBUTE_ALIGNED(16) juint _Q_7_tan[] =\n-{\n-    0x52c4c8abUL, 0x3faba1baUL\n-};\n-\n-ATTRIBUTE_ALIGNED(16) juint _Q_5_tan[] =\n-{\n-    0x11092746UL, 0x3fc11111UL\n-};\n-\n-ATTRIBUTE_ALIGNED(16) juint _Q_3_tan[] =\n-{\n-    0x55555612UL, 0x3fd55555UL\n-};\n-\n-ATTRIBUTE_ALIGNED(8) juint _PI_4_tan[] =\n-{\n-    0x00000000UL, 0x3fe921fbUL, 0x4611a626UL, 0x3e85110bUL\n-};\n-\n-ATTRIBUTE_ALIGNED(8) juint _QQ_2_tan[] =\n-{\n-    0x676733afUL, 0x3d32e7b9UL\n-};\n-\n-void MacroAssembler::fast_tan(XMMRegister xmm0, XMMRegister xmm1, XMMRegister xmm2, XMMRegister xmm3,\n-                              XMMRegister xmm4, XMMRegister xmm5, XMMRegister xmm6, XMMRegister xmm7,\n-                              Register eax, Register ecx, Register edx, Register r8, Register r9,\n-                              Register r10, Register r11, Register tmp) {\n-\n-  Label L_2TAG_PACKET_0_0_1, L_2TAG_PACKET_1_0_1, L_2TAG_PACKET_2_0_1, L_2TAG_PACKET_3_0_1;\n-  Label L_2TAG_PACKET_4_0_1, L_2TAG_PACKET_5_0_1, L_2TAG_PACKET_6_0_1, L_2TAG_PACKET_7_0_1;\n-  Label L_2TAG_PACKET_8_0_1, L_2TAG_PACKET_9_0_1, L_2TAG_PACKET_10_0_1, L_2TAG_PACKET_11_0_1;\n-  Label L_2TAG_PACKET_12_0_1, L_2TAG_PACKET_13_0_1, L_2TAG_PACKET_14_0_1, B1_2, B1_4;\n-\n-  assert_different_registers(eax, ecx, edx, r8, r9, r10, r11, tmp);\n-\n-  address MUL16     = (address)_MUL16;\n-  address sign_mask = (address)_sign_mask_tan;\n-  address PI32INV   = (address)_PI32INV_tan;\n-  address P_1       = (address)_P_1_tan;\n-  address P_2       = (address)_P_2_tan;\n-  address P_3       = (address)_P_3_tan;\n-  address Ctable    = (address)_Ctable_tan;\n-  address MASK_35   = (address)_MASK_35_tan;\n-  address Q_11      = (address)_Q_11_tan;\n-  address Q_9       = (address)_Q_9_tan;\n-  address Q_7       = (address)_Q_7_tan;\n-  address Q_5       = (address)_Q_5_tan;\n-  address Q_3       = (address)_Q_3_tan;\n-  address PI_4      = (address)_PI_4_tan;\n-  address QQ_2      = (address)_QQ_2_tan;\n-\n-  push(rbx);\n-  subq(rsp, 16);\n-  movsd(Address(rsp, 8), xmm0);\n-\n-  bind(B1_2);\n-  pextrw(eax, xmm0, 3);\n-  andl(eax, 32767);\n-  subl(eax, 16314);\n-  cmpl(eax, 270);\n-  jcc(Assembler::above, L_2TAG_PACKET_0_0_1);\n-  movdqu(xmm5, ExternalAddress(ONEHALF), tmp \/*rscratch*\/);    \/\/0x00000000UL, 0x3fe00000UL, 0x00000000UL, 0x3fe00000UL\n-  movdqu(xmm6, ExternalAddress(MUL16), tmp \/*rscratch*\/);    \/\/0x00000000UL, 0x40300000UL, 0x00000000UL, 0x3ff00000UL\n-  unpcklpd(xmm0, xmm0);\n-  movdqu(xmm4, ExternalAddress(sign_mask), tmp \/*rscratch*\/);    \/\/0x00000000UL, 0x80000000UL, 0x00000000UL, 0x80000000UL\n-  andpd(xmm4, xmm0);\n-  movdqu(xmm1, ExternalAddress(PI32INV), tmp \/*rscratch*\/);    \/\/0x6dc9c883UL, 0x3fe45f30UL, 0x6dc9c883UL, 0x40245f30UL\n-  mulpd(xmm1, xmm0);\n-  por(xmm5, xmm4);\n-  addpd(xmm1, xmm5);\n-  movdqu(xmm7, xmm1);\n-  unpckhpd(xmm7, xmm7);\n-  cvttsd2sil(edx, xmm7);\n-  cvttpd2dq(xmm1, xmm1);\n-  cvtdq2pd(xmm1, xmm1);\n-  mulpd(xmm1, xmm6);\n-  movdqu(xmm3, ExternalAddress(P_1), tmp \/*rscratch*\/);    \/\/0x54444000UL, 0x3fb921fbUL, 0x54440000UL, 0x3fb921fbUL\n-  movq(xmm5, ExternalAddress(QQ_2), tmp \/*rscratch*\/);    \/\/0x676733afUL, 0x3d32e7b9UL\n-  addq(rdx, 469248);\n-  movdqu(xmm4, ExternalAddress(P_2), tmp \/*rscratch*\/);    \/\/0x67674000UL, 0xbd32e7b9UL, 0x4c4c0000UL, 0x3d468c23UL\n-  mulpd(xmm3, xmm1);\n-  andq(rdx, 31);\n-  mulsd(xmm5, xmm1);\n-  movq(rcx, rdx);\n-  mulpd(xmm4, xmm1);\n-  shlq(rcx, 1);\n-  subpd(xmm0, xmm3);\n-  mulpd(xmm1, ExternalAddress(P_3), tmp \/*rscratch*\/);    \/\/0x3707344aUL, 0x3aa8a2e0UL, 0x03707345UL, 0x3ae98a2eUL\n-  addq(rdx, rcx);\n-  shlq(rcx, 2);\n-  addq(rdx, rcx);\n-  addsd(xmm5, xmm0);\n-  movdqu(xmm2, xmm0);\n-  subpd(xmm0, xmm4);\n-  movq(xmm6, ExternalAddress(ONE), tmp \/*rscratch*\/);    \/\/0x00000000UL, 0x3ff00000UL\n-  shlq(rdx, 4);\n-  lea(rax, ExternalAddress(Ctable));\n-  andpd(xmm5, ExternalAddress(MASK_35), tmp \/*rscratch*\/);    \/\/0xfffc0000UL, 0xffffffffUL, 0x00000000UL, 0x00000000UL\n-  movdqu(xmm3, xmm0);\n-  addq(rax, rdx);\n-  subpd(xmm2, xmm0);\n-  unpckhpd(xmm0, xmm0);\n-  divsd(xmm6, xmm5);\n-  subpd(xmm2, xmm4);\n-  movdqu(xmm7, Address(rax, 16));\n-  subsd(xmm3, xmm5);\n-  mulpd(xmm7, xmm0);\n-  subpd(xmm2, xmm1);\n-  movdqu(xmm1, Address(rax, 48));\n-  mulpd(xmm1, xmm0);\n-  movdqu(xmm4, Address(rax, 96));\n-  mulpd(xmm4, xmm0);\n-  addsd(xmm2, xmm3);\n-  movdqu(xmm3, xmm0);\n-  mulpd(xmm0, xmm0);\n-  addpd(xmm7, Address(rax, 0));\n-  addpd(xmm1, Address(rax, 32));\n-  mulpd(xmm1, xmm0);\n-  addpd(xmm4, Address(rax, 80));\n-  addpd(xmm7, xmm1);\n-  movdqu(xmm1, Address(rax, 112));\n-  mulpd(xmm1, xmm0);\n-  mulpd(xmm0, xmm0);\n-  addpd(xmm4, xmm1);\n-  movdqu(xmm1, Address(rax, 64));\n-  mulpd(xmm1, xmm0);\n-  addpd(xmm7, xmm1);\n-  movdqu(xmm1, xmm3);\n-  mulpd(xmm3, xmm0);\n-  mulsd(xmm0, xmm0);\n-  mulpd(xmm1, Address(rax, 144));\n-  mulpd(xmm4, xmm3);\n-  movdqu(xmm3, xmm1);\n-  addpd(xmm7, xmm4);\n-  movdqu(xmm4, xmm1);\n-  mulsd(xmm0, xmm7);\n-  unpckhpd(xmm7, xmm7);\n-  addsd(xmm0, xmm7);\n-  unpckhpd(xmm1, xmm1);\n-  addsd(xmm3, xmm1);\n-  subsd(xmm4, xmm3);\n-  addsd(xmm1, xmm4);\n-  movdqu(xmm4, xmm2);\n-  movq(xmm7, Address(rax, 144));\n-  unpckhpd(xmm2, xmm2);\n-  addsd(xmm7, Address(rax, 152));\n-  mulsd(xmm7, xmm2);\n-  addsd(xmm7, Address(rax, 136));\n-  addsd(xmm7, xmm1);\n-  addsd(xmm0, xmm7);\n-  movq(xmm7, ExternalAddress(ONE), tmp \/*rscratch*\/);    \/\/0x00000000UL, 0x3ff00000UL\n-  mulsd(xmm4, xmm6);\n-  movq(xmm2, Address(rax, 168));\n-  andpd(xmm2, xmm6);\n-  mulsd(xmm5, xmm2);\n-  mulsd(xmm6, Address(rax, 160));\n-  subsd(xmm7, xmm5);\n-  subsd(xmm2, Address(rax, 128));\n-  subsd(xmm7, xmm4);\n-  mulsd(xmm7, xmm6);\n-  movdqu(xmm4, xmm3);\n-  subsd(xmm3, xmm2);\n-  addsd(xmm2, xmm3);\n-  subsd(xmm4, xmm2);\n-  addsd(xmm0, xmm4);\n-  subsd(xmm0, xmm7);\n-  addsd(xmm0, xmm3);\n-  jmp(B1_4);\n-\n-  bind(L_2TAG_PACKET_0_0_1);\n-  jcc(Assembler::greater, L_2TAG_PACKET_1_0_1);\n-  pextrw(eax, xmm0, 3);\n-  movl(edx, eax);\n-  andl(eax, 32752);\n-  jcc(Assembler::equal, L_2TAG_PACKET_2_0_1);\n-  andl(edx, 32767);\n-  cmpl(edx, 15904);\n-  jcc(Assembler::below, L_2TAG_PACKET_3_0_1);\n-  movdqu(xmm2, xmm0);\n-  movdqu(xmm3, xmm0);\n-  movq(xmm1, ExternalAddress(Q_11), tmp \/*rscratch*\/);    \/\/0xb8fe4d77UL, 0x3f82609aUL\n-  mulsd(xmm2, xmm0);\n-  mulsd(xmm3, xmm2);\n-  mulsd(xmm1, xmm2);\n-  addsd(xmm1, ExternalAddress(Q_9), tmp \/*rscratch*\/);    \/\/0xbf847a43UL, 0x3f9664a0UL\n-  mulsd(xmm1, xmm2);\n-  addsd(xmm1, ExternalAddress(Q_7), tmp \/*rscratch*\/);    \/\/0x52c4c8abUL, 0x3faba1baUL\n-  mulsd(xmm1, xmm2);\n-  addsd(xmm1, ExternalAddress(Q_5), tmp \/*rscratch*\/);    \/\/0x11092746UL, 0x3fc11111UL\n-  mulsd(xmm1, xmm2);\n-  addsd(xmm1, ExternalAddress(Q_3), tmp \/*rscratch*\/);    \/\/0x55555612UL, 0x3fd55555UL\n-  mulsd(xmm1, xmm3);\n-  addsd(xmm0, xmm1);\n-  jmp(B1_4);\n-\n-  bind(L_2TAG_PACKET_3_0_1);\n-  movq(xmm3, ExternalAddress(TWO_POW_55), tmp \/*rscratch*\/);    \/\/0x00000000UL, 0x43600000UL\n-  mulsd(xmm3, xmm0);\n-  addsd(xmm0, xmm3);\n-  mulsd(xmm0, ExternalAddress(TWO_POW_M55), tmp \/*rscratch*\/);    \/\/0x00000000UL, 0x3c800000UL\n-  jmp(B1_4);\n-\n-  bind(L_2TAG_PACKET_2_0_1);\n-  movdqu(xmm1, xmm0);\n-  mulsd(xmm1, xmm1);\n-  jmp(B1_4);\n-\n-  bind(L_2TAG_PACKET_1_0_1);\n-  pextrw(eax, xmm0, 3);\n-  andl(eax, 32752);\n-  cmpl(eax, 32752);\n-  jcc(Assembler::equal, L_2TAG_PACKET_4_0_1);\n-  pextrw(ecx, xmm0, 3);\n-  andl(ecx, 32752);\n-  subl(ecx, 16224);\n-  shrl(ecx, 7);\n-  andl(ecx, 65532);\n-  lea(r11, ExternalAddress(PI_INV_TABLE));\n-  addq(rcx, r11);\n-  movdq(rax, xmm0);\n-  movl(r10, Address(rcx, 20));\n-  movl(r8, Address(rcx, 24));\n-  movl(edx, eax);\n-  shrq(rax, 21);\n-  orl(eax, INT_MIN);\n-  shrl(eax, 11);\n-  movl(r9, r10);\n-  imulq(r10, rdx);\n-  imulq(r9, rax);\n-  imulq(r8, rax);\n-  movl(rsi, Address(rcx, 16));\n-  movl(rdi, Address(rcx, 12));\n-  movl(r11, r10);\n-  shrq(r10, 32);\n-  addq(r9, r10);\n-  addq(r11, r8);\n-  movl(r8, r11);\n-  shrq(r11, 32);\n-  addq(r9, r11);\n-  movl(r10, rsi);\n-  imulq(rsi, rdx);\n-  imulq(r10, rax);\n-  movl(r11, rdi);\n-  imulq(rdi, rdx);\n-  movl(rbx, rsi);\n-  shrq(rsi, 32);\n-  addq(r9, rbx);\n-  movl(rbx, r9);\n-  shrq(r9, 32);\n-  addq(r10, rsi);\n-  addq(r10, r9);\n-  shlq(rbx, 32);\n-  orq(r8, rbx);\n-  imulq(r11, rax);\n-  movl(r9, Address(rcx, 8));\n-  movl(rsi, Address(rcx, 4));\n-  movl(rbx, rdi);\n-  shrq(rdi, 32);\n-  addq(r10, rbx);\n-  movl(rbx, r10);\n-  shrq(r10, 32);\n-  addq(r11, rdi);\n-  addq(r11, r10);\n-  movq(rdi, r9);\n-  imulq(r9, rdx);\n-  imulq(rdi, rax);\n-  movl(r10, r9);\n-  shrq(r9, 32);\n-  addq(r11, r10);\n-  movl(r10, r11);\n-  shrq(r11, 32);\n-  addq(rdi, r9);\n-  addq(rdi, r11);\n-  movq(r9, rsi);\n-  imulq(rsi, rdx);\n-  imulq(r9, rax);\n-  shlq(r10, 32);\n-  orq(r10, rbx);\n-  movl(eax, Address(rcx, 0));\n-  movl(r11, rsi);\n-  shrq(rsi, 32);\n-  addq(rdi, r11);\n-  movl(r11, rdi);\n-  shrq(rdi, 32);\n-  addq(r9, rsi);\n-  addq(r9, rdi);\n-  imulq(rdx, rax);\n-  pextrw(rbx, xmm0, 3);\n-  lea(rdi, ExternalAddress(PI_INV_TABLE));\n-  subq(rcx, rdi);\n-  addl(ecx, ecx);\n-  addl(ecx, ecx);\n-  addl(ecx, ecx);\n-  addl(ecx, 19);\n-  movl(rsi, 32768);\n-  andl(rsi, rbx);\n-  shrl(rbx, 4);\n-  andl(rbx, 2047);\n-  subl(rbx, 1023);\n-  subl(ecx, rbx);\n-  addq(r9, rdx);\n-  movl(edx, ecx);\n-  addl(edx, 32);\n-  cmpl(ecx, 0);\n-  jcc(Assembler::less, L_2TAG_PACKET_5_0_1);\n-  negl(ecx);\n-  addl(ecx, 29);\n-  shll(r9);\n-  movl(rdi, r9);\n-  andl(r9, 1073741823);\n-  testl(r9, 536870912);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_6_0_1);\n-  shrl(r9);\n-  movl(rbx, 0);\n-  shlq(r9, 32);\n-  orq(r9, r11);\n-\n-  bind(L_2TAG_PACKET_7_0_1);\n-\n-  bind(L_2TAG_PACKET_8_0_1);\n-  cmpq(r9, 0);\n-  jcc(Assembler::equal, L_2TAG_PACKET_9_0_1);\n-\n-  bind(L_2TAG_PACKET_10_0_1);\n-  bsrq(r11, r9);\n-  movl(ecx, 29);\n-  subl(ecx, r11);\n-  jcc(Assembler::lessEqual, L_2TAG_PACKET_11_0_1);\n-  shlq(r9);\n-  movq(rax, r10);\n-  shlq(r10);\n-  addl(edx, ecx);\n-  negl(ecx);\n-  addl(ecx, 64);\n-  shrq(rax);\n-  shrq(r8);\n-  orq(r9, rax);\n-  orq(r10, r8);\n-\n-  bind(L_2TAG_PACKET_12_0_1);\n-  cvtsi2sdq(xmm0, r9);\n-  shrq(r10, 1);\n-  cvtsi2sdq(xmm3, r10);\n-  xorpd(xmm4, xmm4);\n-  shll(edx, 4);\n-  negl(edx);\n-  addl(edx, 16368);\n-  orl(edx, rsi);\n-  xorl(edx, rbx);\n-  pinsrw(xmm4, edx, 3);\n-  movq(xmm2, ExternalAddress(PI_4),     tmp \/*rscratch*\/);    \/\/0x00000000UL, 0x3fe921fbUL, 0x4611a626UL, 0x3e85110bUL\n-  movq(xmm7, ExternalAddress(PI_4 + 8), tmp \/*rscratch*\/);    \/\/0x3fe921fbUL, 0x4611a626UL, 0x3e85110bUL\n-  xorpd(xmm5, xmm5);\n-  subl(edx, 1008);\n-  pinsrw(xmm5, edx, 3);\n-  mulsd(xmm0, xmm4);\n-  shll(rsi, 16);\n-  sarl(rsi, 31);\n-  mulsd(xmm3, xmm5);\n-  movdqu(xmm1, xmm0);\n-  mulsd(xmm0, xmm2);\n-  shrl(rdi, 30);\n-  addsd(xmm1, xmm3);\n-  mulsd(xmm3, xmm2);\n-  addl(rdi, rsi);\n-  xorl(rdi, rsi);\n-  mulsd(xmm7, xmm1);\n-  movl(eax, rdi);\n-  addsd(xmm7, xmm3);\n-  movdqu(xmm2, xmm0);\n-  addsd(xmm0, xmm7);\n-  subsd(xmm2, xmm0);\n-  addsd(xmm7, xmm2);\n-  movdqu(xmm1, ExternalAddress(PI32INV), tmp \/*rscratch*\/);    \/\/0x6dc9c883UL, 0x3fe45f30UL, 0x6dc9c883UL, 0x40245f30UL\n-  if (VM_Version::supports_sse3()) {\n-    movddup(xmm0, xmm0);\n-  }\n-  else {\n-    movlhps(xmm0, xmm0);\n-  }\n-  movdqu(xmm4, ExternalAddress(sign_mask), tmp \/*rscratch*\/);    \/\/0x00000000UL, 0x80000000UL, 0x00000000UL, 0x80000000UL\n-  andpd(xmm4, xmm0);\n-  mulpd(xmm1, xmm0);\n-  if (VM_Version::supports_sse3()) {\n-    movddup(xmm7, xmm7);\n-  }\n-  else {\n-    movlhps(xmm7, xmm7);\n-  }\n-  movdqu(xmm5, ExternalAddress(ONEHALF), tmp \/*rscratch*\/);    \/\/0x00000000UL, 0x3fe00000UL, 0x00000000UL, 0x3fe00000UL\n-  movdqu(xmm6, ExternalAddress(MUL16), tmp \/*rscratch*\/);    \/\/0x00000000UL, 0x40300000UL, 0x00000000UL, 0x3ff00000UL\n-  por(xmm5, xmm4);\n-  addpd(xmm1, xmm5);\n-  movdqu(xmm5, xmm1);\n-  unpckhpd(xmm5, xmm5);\n-  cvttsd2sil(edx, xmm5);\n-  cvttpd2dq(xmm1, xmm1);\n-  cvtdq2pd(xmm1, xmm1);\n-  mulpd(xmm1, xmm6);\n-  movdqu(xmm3, ExternalAddress(P_1), tmp \/*rscratch*\/);    \/\/0x54444000UL, 0x3fb921fbUL, 0x54440000UL, 0x3fb921fbUL\n-  movq(xmm5, ExternalAddress(QQ_2), tmp \/*rscratch*\/);    \/\/0x676733afUL, 0x3d32e7b9UL\n-  shll(eax, 4);\n-  addl(edx, 469248);\n-  movdqu(xmm4, ExternalAddress(P_2), tmp \/*rscratch*\/);    \/\/0x67674000UL, 0xbd32e7b9UL, 0x4c4c0000UL, 0x3d468c23UL\n-  mulpd(xmm3, xmm1);\n-  addl(edx, eax);\n-  andl(edx, 31);\n-  mulsd(xmm5, xmm1);\n-  movl(ecx, edx);\n-  mulpd(xmm4, xmm1);\n-  shll(ecx, 1);\n-  subpd(xmm0, xmm3);\n-  mulpd(xmm1, ExternalAddress(P_3), tmp \/*rscratch*\/);    \/\/0x3707344aUL, 0x3aa8a2e0UL, 0x03707345UL, 0x3ae98a2eUL\n-  addl(edx, ecx);\n-  shll(ecx, 2);\n-  addl(edx, ecx);\n-  addsd(xmm5, xmm0);\n-  movdqu(xmm2, xmm0);\n-  subpd(xmm0, xmm4);\n-  movq(xmm6, ExternalAddress(ONE), tmp \/*rscratch*\/);    \/\/0x00000000UL, 0x3ff00000UL\n-  shll(edx, 4);\n-  lea(rax, ExternalAddress(Ctable));\n-  andpd(xmm5, ExternalAddress(MASK_35), tmp \/*rscratch*\/);    \/\/0xfffc0000UL, 0xffffffffUL, 0x00000000UL, 0x00000000UL\n-  movdqu(xmm3, xmm0);\n-  addq(rax, rdx);\n-  subpd(xmm2, xmm0);\n-  unpckhpd(xmm0, xmm0);\n-  divsd(xmm6, xmm5);\n-  subpd(xmm2, xmm4);\n-  subsd(xmm3, xmm5);\n-  subpd(xmm2, xmm1);\n-  movdqu(xmm1, Address(rax, 48));\n-  addpd(xmm2, xmm7);\n-  movdqu(xmm7, Address(rax, 16));\n-  mulpd(xmm7, xmm0);\n-  movdqu(xmm4, Address(rax, 96));\n-  mulpd(xmm1, xmm0);\n-  mulpd(xmm4, xmm0);\n-  addsd(xmm2, xmm3);\n-  movdqu(xmm3, xmm0);\n-  mulpd(xmm0, xmm0);\n-  addpd(xmm7, Address(rax, 0));\n-  addpd(xmm1, Address(rax, 32));\n-  mulpd(xmm1, xmm0);\n-  addpd(xmm4, Address(rax, 80));\n-  addpd(xmm7, xmm1);\n-  movdqu(xmm1, Address(rax, 112));\n-  mulpd(xmm1, xmm0);\n-  mulpd(xmm0, xmm0);\n-  addpd(xmm4, xmm1);\n-  movdqu(xmm1, Address(rax, 64));\n-  mulpd(xmm1, xmm0);\n-  addpd(xmm7, xmm1);\n-  movdqu(xmm1, xmm3);\n-  mulpd(xmm3, xmm0);\n-  mulsd(xmm0, xmm0);\n-  mulpd(xmm1, Address(rax, 144));\n-  mulpd(xmm4, xmm3);\n-  movdqu(xmm3, xmm1);\n-  addpd(xmm7, xmm4);\n-  movdqu(xmm4, xmm1);\n-  mulsd(xmm0, xmm7);\n-  unpckhpd(xmm7, xmm7);\n-  addsd(xmm0, xmm7);\n-  unpckhpd(xmm1, xmm1);\n-  addsd(xmm3, xmm1);\n-  subsd(xmm4, xmm3);\n-  addsd(xmm1, xmm4);\n-  movdqu(xmm4, xmm2);\n-  movq(xmm7, Address(rax, 144));\n-  unpckhpd(xmm2, xmm2);\n-  addsd(xmm7, Address(rax, 152));\n-  mulsd(xmm7, xmm2);\n-  addsd(xmm7, Address(rax, 136));\n-  addsd(xmm7, xmm1);\n-  addsd(xmm0, xmm7);\n-  movq(xmm7, ExternalAddress(ONE), tmp \/*rscratch*\/);    \/\/0x00000000UL, 0x3ff00000UL\n-  mulsd(xmm4, xmm6);\n-  movq(xmm2, Address(rax, 168));\n-  andpd(xmm2, xmm6);\n-  mulsd(xmm5, xmm2);\n-  mulsd(xmm6, Address(rax, 160));\n-  subsd(xmm7, xmm5);\n-  subsd(xmm2, Address(rax, 128));\n-  subsd(xmm7, xmm4);\n-  mulsd(xmm7, xmm6);\n-  movdqu(xmm4, xmm3);\n-  subsd(xmm3, xmm2);\n-  addsd(xmm2, xmm3);\n-  subsd(xmm4, xmm2);\n-  addsd(xmm0, xmm4);\n-  subsd(xmm0, xmm7);\n-  addsd(xmm0, xmm3);\n-  jmp(B1_4);\n-\n-  bind(L_2TAG_PACKET_9_0_1);\n-  addl(edx, 64);\n-  movq(r9, r10);\n-  movq(r10, r8);\n-  movl(r8, 0);\n-  cmpq(r9, 0);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_10_0_1);\n-  addl(edx, 64);\n-  movq(r9, r10);\n-  movq(r10, r8);\n-  cmpq(r9, 0);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_10_0_1);\n-  jmp(L_2TAG_PACKET_12_0_1);\n-\n-  bind(L_2TAG_PACKET_11_0_1);\n-  jcc(Assembler::equal, L_2TAG_PACKET_12_0_1);\n-  negl(ecx);\n-  shrq(r10);\n-  movq(rax, r9);\n-  shrq(r9);\n-  subl(edx, ecx);\n-  negl(ecx);\n-  addl(ecx, 64);\n-  shlq(rax);\n-  orq(r10, rax);\n-  jmp(L_2TAG_PACKET_12_0_1);\n-\n-  bind(L_2TAG_PACKET_5_0_1);\n-  notl(ecx);\n-  shlq(r9, 32);\n-  orq(r9, r11);\n-  shlq(r9);\n-  movq(rdi, r9);\n-  testl(r9, INT_MIN);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_13_0_1);\n-  shrl(r9);\n-  movl(rbx, 0);\n-  shrq(rdi, 2);\n-  jmp(L_2TAG_PACKET_8_0_1);\n-\n-  bind(L_2TAG_PACKET_6_0_1);\n-  shrl(r9);\n-  movl(rbx, 1073741824);\n-  shrl(rbx);\n-  shlq(r9, 32);\n-  orq(r9, r11);\n-  shlq(rbx, 32);\n-  addl(rdi, 1073741824);\n-  movl(rcx, 0);\n-  movl(r11, 0);\n-  subq(rcx, r8);\n-  sbbq(r11, r10);\n-  sbbq(rbx, r9);\n-  movq(r8, rcx);\n-  movq(r10, r11);\n-  movq(r9, rbx);\n-  movl(rbx, 32768);\n-  jmp(L_2TAG_PACKET_7_0_1);\n-\n-  bind(L_2TAG_PACKET_13_0_1);\n-  shrl(r9);\n-  mov64(rbx, 0x100000000);\n-  shrq(rbx);\n-  movl(rcx, 0);\n-  movl(r11, 0);\n-  subq(rcx, r8);\n-  sbbq(r11, r10);\n-  sbbq(rbx, r9);\n-  movq(r8, rcx);\n-  movq(r10, r11);\n-  movq(r9, rbx);\n-  movl(rbx, 32768);\n-  shrq(rdi, 2);\n-  addl(rdi, 1073741824);\n-  jmp(L_2TAG_PACKET_8_0_1);\n-\n-  bind(L_2TAG_PACKET_4_0_1);\n-  movq(xmm0, Address(rsp, 8));\n-  mulsd(xmm0, ExternalAddress(NEG_ZERO), tmp \/*rscratch*\/);    \/\/0x00000000UL, 0x80000000UL\n-  movq(Address(rsp, 0), xmm0);\n-\n-  bind(L_2TAG_PACKET_14_0_1);\n-\n-  bind(B1_4);\n-  addq(rsp, 16);\n-  pop(rbx);\n-}\n-#else\n-\/\/ The 32 bit code is at most SSE2 compliant\n-\n-ATTRIBUTE_ALIGNED(16) jushort _TP[] =\n-{\n-    0x4cd6, 0xaf6c, 0xc710, 0xc662, 0xbffd, 0x0000, 0x4b06, 0xb0ac, 0xd3b2, 0xcc2c,\n-    0x3ff9, 0x0000, 0x00e3, 0xc850, 0xaa28, 0x9533, 0xbff3, 0x0000, 0x2ff0, 0x466d,\n-    0x1a3b, 0xb266, 0x3fe5, 0x0000\n-};\n-\n-ATTRIBUTE_ALIGNED(16) jushort _TQ[] =\n-{\n-    0x399c, 0x8391, 0x154c, 0x94ca, 0xbfff, 0x0000, 0xb6a3, 0xc36a, 0x44e2, 0x8a2c,\n-    0x3ffe, 0x0000, 0xb70f, 0xd068, 0xa6ce, 0xe9dd, 0xbff9, 0x0000, 0x820f, 0x51ce,\n-    0x7d76, 0x9bff, 0x3ff3, 0x0000\n-};\n-\n-ATTRIBUTE_ALIGNED(16) jushort _GP[] =\n-{\n-    0xaaab, 0xaaaa, 0xaaaa, 0xaaaa, 0xbffd, 0x0000, 0xb62f, 0x0b60, 0x60b6, 0xb60b,\n-    0xbff9, 0x0000, 0xdfa7, 0x08aa, 0x55e0, 0x8ab3, 0xbff6, 0x0000, 0x85a0, 0xa819,\n-    0xbc99, 0xddeb, 0xbff2, 0x0000, 0x7065, 0x6a37, 0x795f, 0xb354, 0xbfef, 0x0000,\n-    0xa8f9, 0x83f1, 0x2ec8, 0x9140, 0xbfec, 0x0000, 0xf3ca, 0x8c96, 0x8e0b, 0xeb6d,\n-    0xbfe8, 0x0000, 0x355b, 0xd910, 0x67c9, 0xbed3, 0xbfe5, 0x0000, 0x286b, 0xb49e,\n-    0xb854, 0x9a98, 0xbfe2, 0x0000, 0x0871, 0x1a2f, 0x6477, 0xfcc4, 0xbfde, 0x0000,\n-    0xa559, 0x1da9, 0xaed2, 0xba76, 0xbfdb, 0x0000, 0x00a3, 0x7fea, 0x9bc3, 0xf205,\n-    0xbfd8, 0x0000\n-};\n-\n-void MacroAssembler::libm_tancot_huge(XMMRegister xmm0, XMMRegister xmm1, Register eax, Register ecx, Register edx, Register ebx, Register esi, Register edi, Register ebp, Register esp) {\n-  Label B1_1, B1_2, B1_3, B1_4, B1_5, B1_6, B1_7, B1_8, B1_9, B1_10, B1_11, B1_12;\n-  Label B1_13, B1_14, B1_15, B1_16, B1_17, B1_18, B1_19, B1_20, B1_21, B1_22, B1_23;\n-  Label B1_24, B1_25, B1_26, B1_27, B1_28, B1_29, B1_30, B1_31, B1_32, B1_33, B1_34;\n-  Label B1_35, B1_36, B1_37, B1_38, B1_39, B1_40, B1_43;\n-\n-  assert_different_registers(ebx, eax, ecx, edx, esi, edi, ebp, esp);\n-\n-  address TP = (address)_TP;\n-  address TQ = (address)_TQ;\n-  address GP = (address)_GP;\n-\n-  bind(B1_1);\n-  push(ebp);\n-  movl(ebp, esp);\n-  andl(esp, -64);\n-  push(esi);\n-  push(edi);\n-  push(ebx);\n-  subl(esp, 52);\n-  movl(eax, Address(ebp, 16));\n-  movl(ebx, Address(ebp, 20));\n-  movl(Address(esp, 40), eax);\n-\n-  bind(B1_2);\n-  fnstcw(Address(esp, 38));\n-\n-  bind(B1_3);\n-  movl(edx, Address(ebp, 12));\n-  movl(eax, edx);\n-  andl(eax, 2147483647);\n-  shrl(edx, 31);\n-  movl(Address(esp, 44), edx);\n-  cmpl(eax, 1104150528);\n-  jcc(Assembler::aboveEqual, B1_11);\n-\n-  bind(B1_4);\n-  movsd(xmm1, Address(ebp, 8));\n-  movzwl(ecx, Address(esp, 38));\n-  movl(edx, ecx);\n-  andl(edx, 768);\n-  andps(xmm1, ExternalAddress(L_2IL0FLOATPACKET_0));    \/\/0xffffffffUL, 0x7fffffffUL, 0x00000000UL, 0x00000000UL\n-  cmpl(edx, 768);\n-  movsd(xmm0, ExternalAddress(PI4_INV));    \/\/\/\/0x6dc9c883UL, 0x3ff45f30UL\n-  mulsd(xmm0, xmm1);\n-  movsd(Address(ebp, 8), xmm1);\n-  movsd(Address(esp, 0), xmm0);\n-  jcc(Assembler::equal, B1_39);\n-\n-  bind(B1_5);\n-  orl(ecx, -64768);\n-  movw(Address(esp, 36), ecx);\n-\n-  bind(B1_6);\n-  fldcw(Address(esp, 36));\n-\n-  bind(B1_7);\n-  movsd(xmm1, Address(ebp, 8));\n-  movl(edi, 1);\n-\n-  bind(B1_8);\n-  movl(Address(esp, 12), esi);\n-  movl(esi, Address(esp, 4));\n-  movl(edx, esi);\n-  movl(Address(esp, 24), edi);\n-  movl(edi, esi);\n-  shrl(edi, 20);\n-  andl(edx, 1048575);\n-  movl(ecx, edi);\n-  orl(edx, 1048576);\n-  negl(ecx);\n-  addl(edi, 13);\n-  movl(Address(esp, 8), ebx);\n-  addl(ecx, 19);\n-  movl(ebx, edx);\n-  movl(Address(esp, 28), ecx);\n-  shrl(ebx);\n-  movl(ecx, edi);\n-  shll(edx);\n-  movl(ecx, Address(esp, 28));\n-  movl(edi, Address(esp, 0));\n-  shrl(edi);\n-  orl(edx, edi);\n-  cmpl(esi, 1094713344);\n-  movsd(Address(esp, 16), xmm1);\n-  fld_d(Address(esp, 16));\n-  cmov32(Assembler::below, edx, ebx);\n-  movl(edi, Address(esp, 24));\n-  movl(esi, Address(esp, 12));\n-  lea(ebx, Address(edx, 1));\n-  andl(ebx, -2);\n-  movl(Address(esp, 16), ebx);\n-  cmpl(eax, 1094713344);\n-  fild_s(Address(esp, 16));\n-  movl(ebx, Address(esp, 8));\n-  jcc(Assembler::aboveEqual, B1_10);\n-\n-  bind(B1_9);\n-  fld_d(ExternalAddress(PI4X3));    \/\/0x54443000UL, 0xbfe921fbUL\n-  fmul(1);\n-  faddp(2);\n-  fld_d(ExternalAddress(PI4X3 + 8));    \/\/0x3b39a000UL, 0x3d373dcbUL\n-  fmul(1);\n-  faddp(2);\n-  fld_d(ExternalAddress(PI4X3 + 16));    \/\/0xe0e68948UL, 0xba845c06UL\n-  fmulp(1);\n-  faddp(1);\n-  jmp(B1_17);\n-\n-  bind(B1_10);\n-  fld_d(ExternalAddress(PI4X4));    \/\/0x54400000UL, 0xbfe921fbUL\n-  fmul(1);\n-  faddp(2);\n-  fld_d(ExternalAddress(PI4X4 + 8));    \/\/0x1a600000UL, 0xbdc0b461UL\n-  fmul(1);\n-  faddp(2);\n-  fld_d(ExternalAddress(PI4X4 + 16));    \/\/0x2e000000UL, 0xbb93198aUL\n-  fmul(1);\n-  faddp(2);\n-  fld_d(ExternalAddress(PI4X4 + 24));    \/\/0x252049c1UL, 0xb96b839aUL\n-  fmulp(1);\n-  faddp(1);\n-  jmp(B1_17);\n-\n-  bind(B1_11);\n-  movzwl(edx, Address(esp, 38));\n-  movl(eax, edx);\n-  andl(eax, 768);\n-  cmpl(eax, 768);\n-  jcc(Assembler::equal, B1_40);\n-\n-  bind(B1_12);\n-  orl(edx, -64768);\n-  movw(Address(esp, 36), edx);\n-\n-  bind(B1_13);\n-  fldcw(Address(esp, 36));\n-\n-  bind(B1_14);\n-  movl(edi, 1);\n-\n-  bind(B1_15);\n-  movsd(xmm0, Address(ebp, 8));\n-  addl(esp, -32);\n-  andps(xmm0, ExternalAddress(L_2IL0FLOATPACKET_0));    \/\/0xffffffffUL, 0x7fffffffUL, 0x00000000UL, 0x00000000UL\n-  lea(eax, Address(esp, 32));\n-  movsd(Address(eax, 16), xmm0);\n-  fld_d(Address(eax, 16));\n-  fstp_x(Address(esp, 0));\n-  movl(Address(esp, 12), 0);\n-  movl(Address(esp, 16), eax);\n-  call(RuntimeAddress(CAST_FROM_FN_PTR(address, StubRoutines::dlibm_reduce_pi04l())));\n-\n-  bind(B1_43);\n-  movl(edx, eax);\n-  addl(esp, 32);\n-\n-  bind(B1_16);\n-  fld_d(Address(esp, 0));\n-  fld_d(Address(esp, 8));\n-  faddp(1);\n-\n-  bind(B1_17);\n-  movl(eax, ebx);\n-  andl(eax, 3);\n-  cmpl(eax, 3);\n-  jcc(Assembler::notEqual, B1_24);\n-\n-  bind(B1_18);\n-  fld_d(ExternalAddress(ONES));\n-  incl(edx);\n-  fdiv(1);\n-  testb(edx, 2);\n-  fstp_x(Address(esp, 24));\n-  fld_s(0);\n-  fmul(1);\n-  fld_s(0);\n-  fmul(1);\n-  fld_x(ExternalAddress(36 + TP));    \/\/0x2ff0, 0x466d, 0x1a\n-  fmul(2);\n-  fld_x(ExternalAddress(24 + TP));    \/\/0x00e3, 0xc850, 0xaa\n-  faddp(1);\n-  fmul(2);\n-  fld_x(ExternalAddress(12 + TP));    \/\/0x4b06, 0xb0ac, 0xd3\n-  faddp(1);\n-  fmul(2);\n-  fld_x(ExternalAddress(36 + TQ));    \/\/0x820f, 0x51ce, 0x7d\n-  fmul(3);\n-  fld_x(ExternalAddress(24 + TQ));    \/\/0xb70f, 0xd068, 0xa6\n-  faddp(1);\n-  fmul(3);\n-  fld_x(ExternalAddress(12 + TQ));    \/\/0xb6a3, 0xc36a, 0x44\n-  faddp(1);\n-  fmul(3);\n-  fld_x(ExternalAddress(TQ));    \/\/0x399c, 0x8391, 0x15\n-  faddp(1);\n-  fld_x(ExternalAddress(TP));    \/\/0x4cd6, 0xaf6c, 0xc7\n-  faddp(2);\n-  fld_x(ExternalAddress(132 + GP));    \/\/0x00a3, 0x7fea, 0x9b\n-  fmul(3);\n-  fld_x(ExternalAddress(120 + GP));    \/\/0xa559, 0x1da9, 0xae\n-  fmul(4);\n-  fld_x(ExternalAddress(108 + GP));    \/\/0x0871, 0x1a2f, 0x64\n-  faddp(2);\n-  fxch(1);\n-  fmul(4);\n-  fld_x(ExternalAddress(96 + GP));    \/\/0x286b, 0xb49e, 0xb8\n-  faddp(2);\n-  fxch(1);\n-  fmul(4);\n-  fld_x(ExternalAddress(84 + GP));    \/\/0x355b, 0xd910, 0x67\n-  faddp(2);\n-  fxch(1);\n-  fmul(4);\n-  fld_x(ExternalAddress(72 + GP));    \/\/0x8c96, 0x8e0b, 0xeb\n-  faddp(2);\n-  fxch(1);\n-  fmul(4);\n-  fld_x(ExternalAddress(60 + GP));    \/\/0xa8f9, 0x83f1, 0x2e\n-  faddp(2);\n-  fxch(1);\n-  fmul(4);\n-  fld_x(ExternalAddress(48 + GP));    \/\/0x7065, 0x6a37, 0x79\n-  faddp(2);\n-  fxch(1);\n-  fmul(4);\n-  fld_x(ExternalAddress(36 + GP));    \/\/0x85a0, 0xa819, 0xbc\n-  faddp(2);\n-  fxch(1);\n-  fmul(4);\n-  fld_x(ExternalAddress(24 + GP));    \/\/0xdfa7, 0x08aa, 0x55\n-  faddp(2);\n-  fxch(1);\n-  fmulp(4);\n-  fld_x(ExternalAddress(12 + GP));    \/\/0xb62f, 0x0b60, 0x60\n-  faddp(1);\n-  fmul(4);\n-  fmul(5);\n-  fld_x(ExternalAddress(GP));    \/\/0xaaab, 0xaaaa, 0xaa\n-  faddp(4);\n-  fxch(3);\n-  fmul(5);\n-  faddp(3);\n-  jcc(Assembler::equal, B1_20);\n-\n-  bind(B1_19);\n-  fld_x(Address(esp, 24));\n-  fxch(1);\n-  fdivrp(2);\n-  fxch(1);\n-  fmulp(3);\n-  movl(eax, Address(esp, 44));\n-  xorl(eax, 1);\n-  fxch(2);\n-  fmul(3);\n-  fld_d(Address(ONES, RelocationHolder::none).plus_disp(eax, Address::times_8));\n-  fmula(2);\n-  fmula(3);\n-  fxch(3);\n-  faddp(2);\n-  fxch(1);\n-  fstp_d(Address(esp, 16));\n-  fmul(1);\n-  fxch(1);\n-  fmulp(2);\n-  movsd(xmm0, Address(esp, 16));\n-  faddp(1);\n-  fstp_d(Address(esp, 16));\n-  movsd(xmm1, Address(esp, 16));\n-  jmp(B1_21);\n-\n-  bind(B1_20);\n-  fdivrp(1);\n-  fmulp(2);\n-  fxch(1);\n-  fmul(2);\n-  movl(eax, Address(esp, 44));\n-  fld_d(Address(ONES, RelocationHolder::none).plus_disp(eax, Address::times_8));\n-  fmula(1);\n-  fmula(3);\n-  fxch(3);\n-  faddp(1);\n-  fstp_d(Address(esp, 16));\n-  fmul(1);\n-  fld_x(Address(esp, 24));\n-  fmulp(2);\n-  movsd(xmm0, Address(esp, 16));\n-  faddp(1);\n-  fstp_d(Address(esp, 16));\n-  movsd(xmm1, Address(esp, 16));\n-\n-  bind(B1_21);\n-  testl(edi, edi);\n-  jcc(Assembler::equal, B1_23);\n-\n-  bind(B1_22);\n-  fldcw(Address(esp, 38));\n-\n-  bind(B1_23);\n-  movl(eax, Address(esp, 40));\n-  movsd(Address(eax, 0), xmm0);\n-  movsd(Address(eax, 8), xmm1);\n-  addl(esp, 52);\n-  pop(ebx);\n-  pop(edi);\n-  pop(esi);\n-  movl(esp, ebp);\n-  pop(ebp);\n-  ret(0);\n-\n-  bind(B1_24);\n-  testb(ebx, 2);\n-  jcc(Assembler::equal, B1_31);\n-\n-  bind(B1_25);\n-  incl(edx);\n-  fld_s(0);\n-  fmul(1);\n-  testb(edx, 2);\n-  jcc(Assembler::equal, B1_27);\n-\n-  bind(B1_26);\n-  fld_d(ExternalAddress(ONES));\n-  fdiv(2);\n-  fld_s(1);\n-  fmul(2);\n-  fld_x(ExternalAddress(132 + GP));    \/\/0x00a3, 0x7fea, 0x9b\n-  fmul(1);\n-  fld_x(ExternalAddress(120 + GP));    \/\/0xa559, 0x1da9, 0xae\n-  fmul(2);\n-  fld_x(ExternalAddress(108 + GP));    \/\/0x67c9, 0xbed3, 0xbf\n-  movl(eax, Address(esp, 44));\n-  faddp(2);\n-  fxch(1);\n-  fmul(2);\n-  xorl(eax, 1);\n-  fld_x(ExternalAddress(96 + GP));    \/\/0x286b, 0xb49e, 0xb8\n-  faddp(2);\n-  fxch(1);\n-  fmul(2);\n-  fld_x(ExternalAddress(84 + GP));    \/\/0x355b, 0xd910, 0x67\n-  faddp(2);\n-  fxch(1);\n-  fmul(2);\n-  fld_x(ExternalAddress(72 + GP));    \/\/0xf3ca, 0x8c96, 0x8e\n-  faddp(2);\n-  fxch(1);\n-  fmul(2);\n-  fld_x(ExternalAddress(60 + GP));    \/\/0xa8f9, 0x83f1, 0x2e\n-  faddp(2);\n-  fxch(1);\n-  fmul(2);\n-  fld_x(ExternalAddress(48 + GP));    \/\/0x7065, 0x6a37, 0x79\n-  faddp(2);\n-  fxch(1);\n-  fmul(2);\n-  fld_x(ExternalAddress(36 + GP));    \/\/0x85a0, 0xa819, 0xbc\n-  faddp(2);\n-  fxch(1);\n-  fmul(2);\n-  fld_x(ExternalAddress(24 + GP));    \/\/0xdfa7, 0x08aa, 0x55\n-  faddp(2);\n-  fxch(1);\n-  fmulp(2);\n-  fld_x(ExternalAddress(12 + GP));    \/\/0xb62f, 0x0b60, 0x60\n-  faddp(1);\n-  fmulp(3);\n-  fld_x(ExternalAddress(GP));    \/\/0xaaab, 0xaaaa, 0xaa\n-  faddp(1);\n-  fmul(3);\n-  fxch(2);\n-  fmulp(3);\n-  fxch(1);\n-  faddp(2);\n-  fld_d(Address(ONES, RelocationHolder::none).plus_disp(eax, Address::times_8));\n-  fmula(2);\n-  fmulp(1);\n-  faddp(1);\n-  fstp_d(Address(esp, 16));\n-  movsd(xmm0, Address(esp, 16));\n-  jmp(B1_28);\n-\n-  bind(B1_27);\n-  fld_x(ExternalAddress(36 + TP));    \/\/0x2ff0, 0x466d, 0x1a\n-  fmul(1);\n-  fld_x(ExternalAddress(24 + TP));    \/\/0x00e3, 0xc850, 0xaa\n-  movl(eax, Address(esp, 44));\n-  faddp(1);\n-  fmul(1);\n-  fld_x(ExternalAddress(36 + TQ));    \/\/0x820f, 0x51ce, 0x7d\n-  fmul(2);\n-  fld_x(ExternalAddress(24 + TQ));    \/\/0xb70f, 0xd068, 0xa6\n-  faddp(1);\n-  fmul(2);\n-  fld_x(ExternalAddress(12 + TQ));    \/\/0xb6a3, 0xc36a, 0x44\n-  faddp(1);\n-  fmul(2);\n-  fld_x(ExternalAddress(TQ));    \/\/0x399c, 0x8391, 0x15\n-  faddp(1);\n-  fld_x(ExternalAddress(12 + TP));    \/\/0x4b06, 0xb0ac, 0xd3\n-  faddp(2);\n-  fxch(1);\n-  fmul(2);\n-  fld_x(ExternalAddress(TP));    \/\/0x4cd6, 0xaf6c, 0xc7\n-  faddp(1);\n-  fdivrp(1);\n-  fmulp(1);\n-  fmul(1);\n-  fld_d(Address(ONES, RelocationHolder::none).plus_disp(eax, Address::times_8));\n-  fmula(1);\n-  fmulp(2);\n-  faddp(1);\n-  fstp_d(Address(esp, 16));\n-  movsd(xmm0, Address(esp, 16));\n-\n-  bind(B1_28);\n-  testl(edi, edi);\n-  jcc(Assembler::equal, B1_30);\n-\n-  bind(B1_29);\n-  fldcw(Address(esp, 38));\n-\n-  bind(B1_30);\n-  movl(eax, Address(esp, 40));\n-  movsd(Address(eax, 0), xmm0);\n-  addl(esp, 52);\n-  pop(ebx);\n-  pop(edi);\n-  pop(esi);\n-  movl(esp, ebp);\n-  pop(ebp);\n-  ret(0);\n-\n-  bind(B1_31);\n-  testb(ebx, 1);\n-  jcc(Assembler::equal, B1_38);\n-\n-  bind(B1_32);\n-  incl(edx);\n-  fld_s(0);\n-  fmul(1);\n-  testb(edx, 2);\n-  jcc(Assembler::equal, B1_34);\n-\n-  bind(B1_33);\n-  fld_x(ExternalAddress(36 + TP));    \/\/0x2ff0, 0x466d, 0x1a\n-  fmul(1);\n-  fld_x(ExternalAddress(24 + TP));    \/\/0x00e3, 0xc850, 0xaa\n-  movl(eax, Address(esp, 44));\n-  faddp(1);\n-  fmul(1);\n-  xorl(eax, 1);\n-  fld_x(ExternalAddress(36 + TQ));    \/\/0x820f, 0x51ce, 0x7d\n-  fmul(2);\n-  fld_x(ExternalAddress(24 + TQ));    \/\/0xb70f, 0xd068, 0xa6\n-  faddp(1);\n-  fmul(2);\n-  fld_x(ExternalAddress(12 + TQ));    \/\/0xb6a3, 0xc36a, 0x44\n-  faddp(1);\n-  fmul(2);\n-  fld_x(ExternalAddress(TQ));    \/\/0x399c, 0x8391, 0x15\n-  faddp(1);\n-  fld_x(ExternalAddress(12 + TP));    \/\/0x4b06, 0xb0ac, 0xd3\n-  faddp(2);\n-  fxch(1);\n-  fmul(2);\n-  fld_x(ExternalAddress(TP));    \/\/0x4cd6, 0xaf6c, 0xc7\n-  faddp(1);\n-  fdivrp(1);\n-  fmulp(1);\n-  fmul(1);\n-  fld_d(Address(ONES, RelocationHolder::none).plus_disp(eax, Address::times_8));\n-  fmula(1);\n-  fmulp(2);\n-  faddp(1);\n-  fstp_d(Address(esp, 16));\n-  movsd(xmm0, Address(esp, 16));\n-  jmp(B1_35);\n-\n-  bind(B1_34);\n-  fld_d(ExternalAddress(ONES));\n-  fdiv(2);\n-  fld_s(1);\n-  fmul(2);\n-  fld_x(ExternalAddress(132 + GP));    \/\/0x00a3, 0x7fea, 0x9b\n-  fmul(1);\n-  fld_x(ExternalAddress(120 + GP));    \/\/0xa559, 0x1da9, 0xae\n-  fmul(2);\n-  fld_x(ExternalAddress(108 + GP));    \/\/0x67c9, 0xbed3, 0xbf\n-  movl(eax, Address(esp, 44));\n-  faddp(2);\n-  fxch(1);\n-  fmul(2);\n-  fld_x(ExternalAddress(96 + GP));    \/\/0x286b, 0xb49e, 0xb8\n-  faddp(2);\n-  fxch(1);\n-  fmul(2);\n-  fld_x(ExternalAddress(84 + GP));    \/\/0x355b, 0xd910, 0x67\n-  faddp(2);\n-  fxch(1);\n-  fmul(2);\n-  fld_x(ExternalAddress(72 + GP));    \/\/0xf3ca, 0x8c96, 0x8e\n-  faddp(2);\n-  fxch(1);\n-  fmul(2);\n-  fld_x(ExternalAddress(60 + GP));    \/\/0xa8f9, 0x83f1, 0x2e\n-  faddp(2);\n-  fxch(1);\n-  fmul(2);\n-  fld_x(ExternalAddress(48 + GP));    \/\/0x7065, 0x6a37, 0x79\n-  faddp(2);\n-  fxch(1);\n-  fmul(2);\n-  fld_x(ExternalAddress(36 + GP));    \/\/0x85a0, 0xa819, 0xbc\n-  faddp(2);\n-  fxch(1);\n-  fmul(2);\n-  fld_x(ExternalAddress(24 + GP));    \/\/0xdfa7, 0x08aa, 0x55\n-  faddp(2);\n-  fxch(1);\n-  fmulp(2);\n-  fld_x(ExternalAddress(12 + GP));    \/\/0xb62f, 0x0b60, 0x60\n-  faddp(1);\n-  fmulp(3);\n-  fld_x(ExternalAddress(GP));    \/\/0xaaab, 0xaaaa, 0xaa\n-  faddp(1);\n-  fmul(3);\n-  fxch(2);\n-  fmulp(3);\n-  fxch(1);\n-  faddp(2);\n-  fld_d(Address(ONES, RelocationHolder::none).plus_disp(eax, Address::times_8));\n-  fmula(2);\n-  fmulp(1);\n-  faddp(1);\n-  fstp_d(Address(esp, 16));\n-  movsd(xmm0, Address(esp, 16));\n-\n-  bind(B1_35);\n-  testl(edi, edi);\n-  jcc(Assembler::equal, B1_37);\n-\n-  bind(B1_36);\n-  fldcw(Address(esp, 38));\n-\n-  bind(B1_37);\n-  movl(eax, Address(esp, 40));\n-  movsd(Address(eax, 8), xmm0);\n-  addl(esp, 52);\n-  pop(ebx);\n-  pop(edi);\n-  pop(esi);\n-  mov(esp, ebp);\n-  pop(ebp);\n-  ret(0);\n-\n-  bind(B1_38);\n-  fstp_d(0);\n-  addl(esp, 52);\n-  pop(ebx);\n-  pop(edi);\n-  pop(esi);\n-  mov(esp, ebp);\n-  pop(ebp);\n-  ret(0);\n-\n-  bind(B1_39);\n-  xorl(edi, edi);\n-  jmp(B1_8);\n-\n-  bind(B1_40);\n-  xorl(edi, edi);\n-  jmp(B1_15);\n-}\n-\n-ATTRIBUTE_ALIGNED(16) juint _static_const_table_tan[] =\n-{\n-    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x882c10faUL,\n-    0x3f9664f4UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n-    0x00000000UL, 0x00000000UL, 0x55e6c23dUL, 0x3f8226e3UL, 0x55555555UL,\n-    0x3fd55555UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n-    0x0e157de0UL, 0x3f6d6d3dUL, 0x11111111UL, 0x3fc11111UL, 0x00000000UL,\n-    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x452b75e3UL, 0x3f57da36UL,\n-    0x1ba1ba1cUL, 0x3faba1baUL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n-    0x00000000UL, 0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0x00000000UL,\n-    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x4e435f9bUL,\n-    0x3f953f83UL, 0x00000000UL, 0x00000000UL, 0x3c6e8e46UL, 0x3f9b74eaUL,\n-    0x00000000UL, 0x00000000UL, 0xda5b7511UL, 0x3f85ad63UL, 0xdc230b9bUL,\n-    0x3fb97558UL, 0x26cb3788UL, 0x3f881308UL, 0x76fc4985UL, 0x3fd62ac9UL,\n-    0x77bb08baUL, 0x3f757c85UL, 0xb6247521UL, 0x3fb1381eUL, 0x5922170cUL,\n-    0x3f754e95UL, 0x8746482dUL, 0x3fc27f83UL, 0x11055b30UL, 0x3f64e391UL,\n-    0x3e666320UL, 0x3fa3e609UL, 0x0de9dae3UL, 0x3f6301dfUL, 0x1f1dca06UL,\n-    0x3fafa8aeUL, 0x8c5b2da2UL, 0x3fb936bbUL, 0x4e88f7a5UL, 0x3c587d05UL,\n-    0x00000000UL, 0x3ff00000UL, 0xa8935dd9UL, 0x3f83dde2UL, 0x00000000UL,\n-    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x5a279ea3UL, 0x3faa3407UL,\n-    0x00000000UL, 0x00000000UL, 0x432d65faUL, 0x3fa70153UL, 0x00000000UL,\n-    0x00000000UL, 0x891a4602UL, 0x3f9d03efUL, 0xd62ca5f8UL, 0x3fca77d9UL,\n-    0xb35f4628UL, 0x3f97a265UL, 0x433258faUL, 0x3fd8cf51UL, 0xb58fd909UL,\n-    0x3f8f88e3UL, 0x01771ceaUL, 0x3fc2b154UL, 0xf3562f8eUL, 0x3f888f57UL,\n-    0xc028a723UL, 0x3fc7370fUL, 0x20b7f9f0UL, 0x3f80f44cUL, 0x214368e9UL,\n-    0x3fb6dfaaUL, 0x28891863UL, 0x3f79b4b6UL, 0x172dbbf0UL, 0x3fb6cb8eUL,\n-    0xe0553158UL, 0x3fc975f5UL, 0x593fe814UL, 0x3c2ef5d3UL, 0x00000000UL,\n-    0x3ff00000UL, 0x03dec550UL, 0x3fa44203UL, 0x00000000UL, 0x00000000UL,\n-    0x00000000UL, 0x00000000UL, 0x9314533eUL, 0x3fbb8ec5UL, 0x00000000UL,\n-    0x00000000UL, 0x09aa36d0UL, 0x3fb6d3f4UL, 0x00000000UL, 0x00000000UL,\n-    0xdcb427fdUL, 0x3fb13950UL, 0xd87ab0bbUL, 0x3fd5335eUL, 0xce0ae8a5UL,\n-    0x3fabb382UL, 0x79143126UL, 0x3fddba41UL, 0x5f2b28d4UL, 0x3fa552f1UL,\n-    0x59f21a6dUL, 0x3fd015abUL, 0x22c27d95UL, 0x3fa0e984UL, 0xe19fc6aaUL,\n-    0x3fd0576cUL, 0x8f2c2950UL, 0x3f9a4898UL, 0xc0b3f22cUL, 0x3fc59462UL,\n-    0x1883a4b8UL, 0x3f94b61cUL, 0x3f838640UL, 0x3fc30eb8UL, 0x355c63dcUL,\n-    0x3fd36a08UL, 0x1dce993dUL, 0xbc6d704dUL, 0x00000000UL, 0x3ff00000UL,\n-    0x2b82ab63UL, 0x3fb78e92UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n-    0x00000000UL, 0x56f37042UL, 0x3fccfc56UL, 0x00000000UL, 0x00000000UL,\n-    0xaa563951UL, 0x3fc90125UL, 0x00000000UL, 0x00000000UL, 0x3d0e7c5dUL,\n-    0x3fc50533UL, 0x9bed9b2eUL, 0x3fdf0ed9UL, 0x5fe7c47cUL, 0x3fc1f250UL,\n-    0x96c125e5UL, 0x3fe2edd9UL, 0x5a02bbd8UL, 0x3fbe5c71UL, 0x86362c20UL,\n-    0x3fda08b7UL, 0x4b4435edUL, 0x3fb9d342UL, 0x4b494091UL, 0x3fd911bdUL,\n-    0xb56658beUL, 0x3fb5e4c7UL, 0x93a2fd76UL, 0x3fd3c092UL, 0xda271794UL,\n-    0x3fb29910UL, 0x3303df2bUL, 0x3fd189beUL, 0x99fcef32UL, 0x3fda8279UL,\n-    0xb68c1467UL, 0x3c708b2fUL, 0x00000000UL, 0x3ff00000UL, 0x980c4337UL,\n-    0x3fc5f619UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n-    0xcc03e501UL, 0x3fdff10fUL, 0x00000000UL, 0x00000000UL, 0x44a4e845UL,\n-    0x3fddb63bUL, 0x00000000UL, 0x00000000UL, 0x3768ad9fUL, 0x3fdb72a4UL,\n-    0x3dd01ccaUL, 0x3fe5fdb9UL, 0xa61d2811UL, 0x3fd972b2UL, 0x5645ad0bUL,\n-    0x3fe977f9UL, 0xd013b3abUL, 0x3fd78ca3UL, 0xbf0bf914UL, 0x3fe4f192UL,\n-    0x4d53e730UL, 0x3fd5d060UL, 0x3f8b9000UL, 0x3fe49933UL, 0xe2b82f08UL,\n-    0x3fd4322aUL, 0x5936a835UL, 0x3fe27ae1UL, 0xb1c61c9bUL, 0x3fd2b3fbUL,\n-    0xef478605UL, 0x3fe1659eUL, 0x190834ecUL, 0x3fe11ab7UL, 0xcdb625eaUL,\n-    0xbc8e564bUL, 0x00000000UL, 0x3ff00000UL, 0xb07217e3UL, 0x3fd248f1UL,\n-    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x2b2c49d0UL,\n-    0x3ff2de9cUL, 0x00000000UL, 0x00000000UL, 0x2655bc98UL, 0x3ff33e58UL,\n-    0x00000000UL, 0x00000000UL, 0xff691fa2UL, 0x3ff3972eUL, 0xe93463bdUL,\n-    0x3feeed87UL, 0x070e10a0UL, 0x3ff3f5b2UL, 0xf4d790a4UL, 0x3ff20c10UL,\n-    0xa04e8ea3UL, 0x3ff4541aUL, 0x386accd3UL, 0x3ff1369eUL, 0x222a66ddUL,\n-    0x3ff4b521UL, 0x22a9777eUL, 0x3ff20817UL, 0x52a04a6eUL, 0x3ff5178fUL,\n-    0xddaa0031UL, 0x3ff22137UL, 0x4447d47cUL, 0x3ff57c01UL, 0x1e9c7f1dUL,\n-    0x3ff29311UL, 0x2ab7f990UL, 0x3fe561b8UL, 0x209c7df1UL, 0x3c87a8c5UL,\n-    0x00000000UL, 0x3ff00000UL, 0x4170bcc6UL, 0x3fdc92d8UL, 0x00000000UL,\n-    0x00000000UL, 0x00000000UL, 0x00000000UL, 0xc7ab4d5aUL, 0x40085e24UL,\n-    0x00000000UL, 0x00000000UL, 0xe93ea75dUL, 0x400b963dUL, 0x00000000UL,\n-    0x00000000UL, 0x94a7f25aUL, 0x400f37e2UL, 0x4b6261cbUL, 0x3ff5f984UL,\n-    0x5a9dd812UL, 0x4011aab0UL, 0x74c30018UL, 0x3ffaf5a5UL, 0x7f2ce8e3UL,\n-    0x4013fe8bUL, 0xfe8e54faUL, 0x3ffd7334UL, 0x670d618dUL, 0x4016a10cUL,\n-    0x4db97058UL, 0x4000e012UL, 0x24df44ddUL, 0x40199c5fUL, 0x697d6eceUL,\n-    0x4003006eUL, 0x83298b82UL, 0x401cfc4dUL, 0x19d490d6UL, 0x40058c19UL,\n-    0x2ae42850UL, 0x3fea4300UL, 0x118e20e6UL, 0xbc7a6db8UL, 0x00000000UL,\n-    0x40000000UL, 0xe33345b8UL, 0xbfd4e526UL, 0x00000000UL, 0x00000000UL,\n-    0x00000000UL, 0x00000000UL, 0x65965966UL, 0x40219659UL, 0x00000000UL,\n-    0x00000000UL, 0x882c10faUL, 0x402664f4UL, 0x00000000UL, 0x00000000UL,\n-    0x83cd3723UL, 0x402c8342UL, 0x00000000UL, 0x40000000UL, 0x55e6c23dUL,\n-    0x403226e3UL, 0x55555555UL, 0x40055555UL, 0x34451939UL, 0x40371c96UL,\n-    0xaaaaaaabUL, 0x400aaaaaUL, 0x0e157de0UL, 0x403d6d3dUL, 0x11111111UL,\n-    0x40111111UL, 0xa738201fUL, 0x4042bbceUL, 0x05b05b06UL, 0x4015b05bUL,\n-    0x452b75e3UL, 0x4047da36UL, 0x1ba1ba1cUL, 0x401ba1baUL, 0x00000000UL,\n-    0x3ff00000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x40000000UL,\n-    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n-    0x00000000UL, 0x4f48b8d3UL, 0xbf33eaf9UL, 0x00000000UL, 0x00000000UL,\n-    0x0cf7586fUL, 0x3f20b8eaUL, 0x00000000UL, 0x00000000UL, 0xd0258911UL,\n-    0xbf0abaf3UL, 0x23e49fe9UL, 0xbfab5a8cUL, 0x2d53222eUL, 0x3ef60d15UL,\n-    0x21169451UL, 0x3fa172b2UL, 0xbb254dbcUL, 0xbee1d3b5UL, 0xdbf93b8eUL,\n-    0xbf84c7dbUL, 0x05b4630bUL, 0x3ecd3364UL, 0xee9aada7UL, 0x3f743924UL,\n-    0x794a8297UL, 0xbeb7b7b9UL, 0xe015f797UL, 0xbf5d41f5UL, 0xe41a4a56UL,\n-    0x3ea35dfbUL, 0xe4c2a251UL, 0x3f49a2abUL, 0x5af9e000UL, 0xbfce49ceUL,\n-    0x8c743719UL, 0x3d1eb860UL, 0x00000000UL, 0x00000000UL, 0x1b4863cfUL,\n-    0x3fd78294UL, 0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0xfffffff8UL,\n-    0x535ad890UL, 0xbf2b9320UL, 0x00000000UL, 0x00000000UL, 0x018fdf1fUL,\n-    0x3f16d61dUL, 0x00000000UL, 0x00000000UL, 0x0359f1beUL, 0xbf0139e4UL,\n-    0xa4317c6dUL, 0xbfa67e17UL, 0x82672d0fUL, 0x3eebb405UL, 0x2f1b621eUL,\n-    0x3f9f455bUL, 0x51ccf238UL, 0xbed55317UL, 0xf437b9acUL, 0xbf804beeUL,\n-    0xc791a2b5UL, 0x3ec0e993UL, 0x919a1db2UL, 0x3f7080c2UL, 0x336a5b0eUL,\n-    0xbeaa48a2UL, 0x0a268358UL, 0xbf55a443UL, 0xdfd978e4UL, 0x3e94b61fUL,\n-    0xd7767a58UL, 0x3f431806UL, 0x2aea0000UL, 0xbfc9bbe8UL, 0x7723ea61UL,\n-    0xbd3a2369UL, 0x00000000UL, 0x00000000UL, 0xdf7796ffUL, 0x3fd6e642UL,\n-    0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0xfffffff8UL, 0xb9ff07ceUL,\n-    0xbf231c78UL, 0x00000000UL, 0x00000000UL, 0xa5517182UL, 0x3f0ff0e0UL,\n-    0x00000000UL, 0x00000000UL, 0x790b4cbcUL, 0xbef66191UL, 0x848a46c6UL,\n-    0xbfa21ac0UL, 0xb16435faUL, 0x3ee1d3ecUL, 0x2a1aa832UL, 0x3f9c71eaUL,\n-    0xfdd299efUL, 0xbec9dd1aUL, 0x3f8dbaafUL, 0xbf793363UL, 0x309fc6eaUL,\n-    0x3eb415d6UL, 0xbee60471UL, 0x3f6b83baUL, 0x94a0a697UL, 0xbe9dae11UL,\n-    0x3e5c67b3UL, 0xbf4fd07bUL, 0x9a8f3e3eUL, 0x3e86bd75UL, 0xa4beb7a4UL,\n-    0x3f3d1eb1UL, 0x29cfc000UL, 0xbfc549ceUL, 0xbf159358UL, 0xbd397b33UL,\n-    0x00000000UL, 0x00000000UL, 0x871fee6cUL, 0x3fd666f0UL, 0x00000000UL,\n-    0x3ff00000UL, 0x00000000UL, 0xfffffff8UL, 0x7d98a556UL, 0xbf1a3958UL,\n-    0x00000000UL, 0x00000000UL, 0x9d88dc01UL, 0x3f0704c2UL, 0x00000000UL,\n-    0x00000000UL, 0x73742a2bUL, 0xbeed054aUL, 0x58844587UL, 0xbf9c2a13UL,\n-    0x55688a79UL, 0x3ed7a326UL, 0xee33f1d6UL, 0x3f9a48f4UL, 0xa8dc9888UL,\n-    0xbebf8939UL, 0xaad4b5b8UL, 0xbf72f746UL, 0x9102efa1UL, 0x3ea88f82UL,\n-    0xdabc29cfUL, 0x3f678228UL, 0x9289afb8UL, 0xbe90f456UL, 0x741fb4edUL,\n-    0xbf46f3a3UL, 0xa97f6663UL, 0x3e79b4bfUL, 0xca89ff3fUL, 0x3f36db70UL,\n-    0xa8a2a000UL, 0xbfc0ee13UL, 0x3da24be1UL, 0xbd338b9fUL, 0x00000000UL,\n-    0x00000000UL, 0x11cd6c69UL, 0x3fd601fdUL, 0x00000000UL, 0x3ff00000UL,\n-    0x00000000UL, 0xfffffff8UL, 0x1a154b97UL, 0xbf116b01UL, 0x00000000UL,\n-    0x00000000UL, 0x2d427630UL, 0x3f0147bfUL, 0x00000000UL, 0x00000000UL,\n-    0xb93820c8UL, 0xbee264d4UL, 0xbb6cbb18UL, 0xbf94ab8cUL, 0x888d4d92UL,\n-    0x3ed0568bUL, 0x60730f7cUL, 0x3f98b19bUL, 0xe4b1fb11UL, 0xbeb2f950UL,\n-    0x22cf9f74UL, 0xbf6b21cdUL, 0x4a3ff0a6UL, 0x3e9f499eUL, 0xfd2b83ceUL,\n-    0x3f64aad7UL, 0x637b73afUL, 0xbe83487cUL, 0xe522591aUL, 0xbf3fc092UL,\n-    0xa158e8bcUL, 0x3e6e3aaeUL, 0xe5e82ffaUL, 0x3f329d2fUL, 0xd636a000UL,\n-    0xbfb9477fUL, 0xc2c2d2bcUL, 0xbd135ef9UL, 0x00000000UL, 0x00000000UL,\n-    0xf2fdb123UL, 0x3fd5b566UL, 0x00000000UL, 0x3ff00000UL, 0x00000000UL,\n-    0xfffffff8UL, 0xc41acb64UL, 0xbf05448dUL, 0x00000000UL, 0x00000000UL,\n-    0xdbb03d6fUL, 0x3efb7ad2UL, 0x00000000UL, 0x00000000UL, 0x9e42962dUL,\n-    0xbed5aea5UL, 0x2579f8efUL, 0xbf8b2398UL, 0x288a1ed9UL, 0x3ec81441UL,\n-    0xb0198dc5UL, 0x3f979a3aUL, 0x2fdfe253UL, 0xbea57cd3UL, 0x5766336fUL,\n-    0xbf617caaUL, 0x600944c3UL, 0x3e954ed6UL, 0xa4e0aaf8UL, 0x3f62c646UL,\n-    0x6b8fb29cUL, 0xbe74e3a3UL, 0xdc4c0409UL, 0xbf33f952UL, 0x9bffe365UL,\n-    0x3e6301ecUL, 0xb8869e44UL, 0x3f2fc566UL, 0xe1e04000UL, 0xbfb0cc62UL,\n-    0x016b907fUL, 0xbd119cbcUL, 0x00000000UL, 0x00000000UL, 0xe6b9d8faUL,\n-    0x3fd57fb3UL, 0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0xfffffff8UL,\n-    0x5daf22a6UL, 0xbef429d7UL, 0x00000000UL, 0x00000000UL, 0x06bca545UL,\n-    0x3ef7a27dUL, 0x00000000UL, 0x00000000UL, 0x7211c19aUL, 0xbec41c3eUL,\n-    0x956ed53eUL, 0xbf7ae3f4UL, 0xee750e72UL, 0x3ec3901bUL, 0x91d443f5UL,\n-    0x3f96f713UL, 0x36661e6cUL, 0xbe936e09UL, 0x506f9381UL, 0xbf5122e8UL,\n-    0xcb6dd43fUL, 0x3e9041b9UL, 0x6698b2ffUL, 0x3f61b0c7UL, 0x576bf12bUL,\n-    0xbe625a8aUL, 0xe5a0e9dcUL, 0xbf23499dUL, 0x110384ddUL, 0x3e5b1c2cUL,\n-    0x68d43db6UL, 0x3f2cb899UL, 0x6ecac000UL, 0xbfa0c414UL, 0xcd7dd58cUL,\n-    0x3d13500fUL, 0x00000000UL, 0x00000000UL, 0x85a2c8fbUL, 0x3fd55fe0UL,\n-    0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0xfffffff8UL, 0x00000000UL,\n-    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x2bf70ebeUL, 0x3ef66a8fUL,\n-    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n-    0x00000000UL, 0xd644267fUL, 0x3ec22805UL, 0x16c16c17UL, 0x3f96c16cUL,\n-    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0xc4e09162UL,\n-    0x3e8d6db2UL, 0xbc011567UL, 0x3f61566aUL, 0x00000000UL, 0x00000000UL,\n-    0x00000000UL, 0x00000000UL, 0x1f79955cUL, 0x3e57da4eUL, 0x9334ef0bUL,\n-    0x3f2bbd77UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n-    0x00000000UL, 0x00000000UL, 0x55555555UL, 0x3fd55555UL, 0x00000000UL,\n-    0x3ff00000UL, 0x00000000UL, 0xfffffff8UL, 0x5daf22a6UL, 0x3ef429d7UL,\n-    0x00000000UL, 0x00000000UL, 0x06bca545UL, 0x3ef7a27dUL, 0x00000000UL,\n-    0x00000000UL, 0x7211c19aUL, 0x3ec41c3eUL, 0x956ed53eUL, 0x3f7ae3f4UL,\n-    0xee750e72UL, 0x3ec3901bUL, 0x91d443f5UL, 0x3f96f713UL, 0x36661e6cUL,\n-    0x3e936e09UL, 0x506f9381UL, 0x3f5122e8UL, 0xcb6dd43fUL, 0x3e9041b9UL,\n-    0x6698b2ffUL, 0x3f61b0c7UL, 0x576bf12bUL, 0x3e625a8aUL, 0xe5a0e9dcUL,\n-    0x3f23499dUL, 0x110384ddUL, 0x3e5b1c2cUL, 0x68d43db6UL, 0x3f2cb899UL,\n-    0x6ecac000UL, 0x3fa0c414UL, 0xcd7dd58cUL, 0xbd13500fUL, 0x00000000UL,\n-    0x00000000UL, 0x85a2c8fbUL, 0x3fd55fe0UL, 0x00000000UL, 0x3ff00000UL,\n-    0x00000000UL, 0xfffffff8UL, 0xc41acb64UL, 0x3f05448dUL, 0x00000000UL,\n-    0x00000000UL, 0xdbb03d6fUL, 0x3efb7ad2UL, 0x00000000UL, 0x00000000UL,\n-    0x9e42962dUL, 0x3ed5aea5UL, 0x2579f8efUL, 0x3f8b2398UL, 0x288a1ed9UL,\n-    0x3ec81441UL, 0xb0198dc5UL, 0x3f979a3aUL, 0x2fdfe253UL, 0x3ea57cd3UL,\n-    0x5766336fUL, 0x3f617caaUL, 0x600944c3UL, 0x3e954ed6UL, 0xa4e0aaf8UL,\n-    0x3f62c646UL, 0x6b8fb29cUL, 0x3e74e3a3UL, 0xdc4c0409UL, 0x3f33f952UL,\n-    0x9bffe365UL, 0x3e6301ecUL, 0xb8869e44UL, 0x3f2fc566UL, 0xe1e04000UL,\n-    0x3fb0cc62UL, 0x016b907fUL, 0x3d119cbcUL, 0x00000000UL, 0x00000000UL,\n-    0xe6b9d8faUL, 0x3fd57fb3UL, 0x00000000UL, 0x3ff00000UL, 0x00000000UL,\n-    0xfffffff8UL, 0x1a154b97UL, 0x3f116b01UL, 0x00000000UL, 0x00000000UL,\n-    0x2d427630UL, 0x3f0147bfUL, 0x00000000UL, 0x00000000UL, 0xb93820c8UL,\n-    0x3ee264d4UL, 0xbb6cbb18UL, 0x3f94ab8cUL, 0x888d4d92UL, 0x3ed0568bUL,\n-    0x60730f7cUL, 0x3f98b19bUL, 0xe4b1fb11UL, 0x3eb2f950UL, 0x22cf9f74UL,\n-    0x3f6b21cdUL, 0x4a3ff0a6UL, 0x3e9f499eUL, 0xfd2b83ceUL, 0x3f64aad7UL,\n-    0x637b73afUL, 0x3e83487cUL, 0xe522591aUL, 0x3f3fc092UL, 0xa158e8bcUL,\n-    0x3e6e3aaeUL, 0xe5e82ffaUL, 0x3f329d2fUL, 0xd636a000UL, 0x3fb9477fUL,\n-    0xc2c2d2bcUL, 0x3d135ef9UL, 0x00000000UL, 0x00000000UL, 0xf2fdb123UL,\n-    0x3fd5b566UL, 0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0xfffffff8UL,\n-    0x7d98a556UL, 0x3f1a3958UL, 0x00000000UL, 0x00000000UL, 0x9d88dc01UL,\n-    0x3f0704c2UL, 0x00000000UL, 0x00000000UL, 0x73742a2bUL, 0x3eed054aUL,\n-    0x58844587UL, 0x3f9c2a13UL, 0x55688a79UL, 0x3ed7a326UL, 0xee33f1d6UL,\n-    0x3f9a48f4UL, 0xa8dc9888UL, 0x3ebf8939UL, 0xaad4b5b8UL, 0x3f72f746UL,\n-    0x9102efa1UL, 0x3ea88f82UL, 0xdabc29cfUL, 0x3f678228UL, 0x9289afb8UL,\n-    0x3e90f456UL, 0x741fb4edUL, 0x3f46f3a3UL, 0xa97f6663UL, 0x3e79b4bfUL,\n-    0xca89ff3fUL, 0x3f36db70UL, 0xa8a2a000UL, 0x3fc0ee13UL, 0x3da24be1UL,\n-    0x3d338b9fUL, 0x00000000UL, 0x00000000UL, 0x11cd6c69UL, 0x3fd601fdUL,\n-    0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0xfffffff8UL, 0xb9ff07ceUL,\n-    0x3f231c78UL, 0x00000000UL, 0x00000000UL, 0xa5517182UL, 0x3f0ff0e0UL,\n-    0x00000000UL, 0x00000000UL, 0x790b4cbcUL, 0x3ef66191UL, 0x848a46c6UL,\n-    0x3fa21ac0UL, 0xb16435faUL, 0x3ee1d3ecUL, 0x2a1aa832UL, 0x3f9c71eaUL,\n-    0xfdd299efUL, 0x3ec9dd1aUL, 0x3f8dbaafUL, 0x3f793363UL, 0x309fc6eaUL,\n-    0x3eb415d6UL, 0xbee60471UL, 0x3f6b83baUL, 0x94a0a697UL, 0x3e9dae11UL,\n-    0x3e5c67b3UL, 0x3f4fd07bUL, 0x9a8f3e3eUL, 0x3e86bd75UL, 0xa4beb7a4UL,\n-    0x3f3d1eb1UL, 0x29cfc000UL, 0x3fc549ceUL, 0xbf159358UL, 0x3d397b33UL,\n-    0x00000000UL, 0x00000000UL, 0x871fee6cUL, 0x3fd666f0UL, 0x00000000UL,\n-    0x3ff00000UL, 0x00000000UL, 0xfffffff8UL, 0x535ad890UL, 0x3f2b9320UL,\n-    0x00000000UL, 0x00000000UL, 0x018fdf1fUL, 0x3f16d61dUL, 0x00000000UL,\n-    0x00000000UL, 0x0359f1beUL, 0x3f0139e4UL, 0xa4317c6dUL, 0x3fa67e17UL,\n-    0x82672d0fUL, 0x3eebb405UL, 0x2f1b621eUL, 0x3f9f455bUL, 0x51ccf238UL,\n-    0x3ed55317UL, 0xf437b9acUL, 0x3f804beeUL, 0xc791a2b5UL, 0x3ec0e993UL,\n-    0x919a1db2UL, 0x3f7080c2UL, 0x336a5b0eUL, 0x3eaa48a2UL, 0x0a268358UL,\n-    0x3f55a443UL, 0xdfd978e4UL, 0x3e94b61fUL, 0xd7767a58UL, 0x3f431806UL,\n-    0x2aea0000UL, 0x3fc9bbe8UL, 0x7723ea61UL, 0x3d3a2369UL, 0x00000000UL,\n-    0x00000000UL, 0xdf7796ffUL, 0x3fd6e642UL, 0x00000000UL, 0x3ff00000UL,\n-    0x00000000UL, 0xfffffff8UL, 0x4f48b8d3UL, 0x3f33eaf9UL, 0x00000000UL,\n-    0x00000000UL, 0x0cf7586fUL, 0x3f20b8eaUL, 0x00000000UL, 0x00000000UL,\n-    0xd0258911UL, 0x3f0abaf3UL, 0x23e49fe9UL, 0x3fab5a8cUL, 0x2d53222eUL,\n-    0x3ef60d15UL, 0x21169451UL, 0x3fa172b2UL, 0xbb254dbcUL, 0x3ee1d3b5UL,\n-    0xdbf93b8eUL, 0x3f84c7dbUL, 0x05b4630bUL, 0x3ecd3364UL, 0xee9aada7UL,\n-    0x3f743924UL, 0x794a8297UL, 0x3eb7b7b9UL, 0xe015f797UL, 0x3f5d41f5UL,\n-    0xe41a4a56UL, 0x3ea35dfbUL, 0xe4c2a251UL, 0x3f49a2abUL, 0x5af9e000UL,\n-    0x3fce49ceUL, 0x8c743719UL, 0xbd1eb860UL, 0x00000000UL, 0x00000000UL,\n-    0x1b4863cfUL, 0x3fd78294UL, 0x00000000UL, 0x3ff00000UL, 0x00000000UL,\n-    0xfffffff8UL, 0x65965966UL, 0xc0219659UL, 0x00000000UL, 0x00000000UL,\n-    0x882c10faUL, 0x402664f4UL, 0x00000000UL, 0x00000000UL, 0x83cd3723UL,\n-    0xc02c8342UL, 0x00000000UL, 0xc0000000UL, 0x55e6c23dUL, 0x403226e3UL,\n-    0x55555555UL, 0x40055555UL, 0x34451939UL, 0xc0371c96UL, 0xaaaaaaabUL,\n-    0xc00aaaaaUL, 0x0e157de0UL, 0x403d6d3dUL, 0x11111111UL, 0x40111111UL,\n-    0xa738201fUL, 0xc042bbceUL, 0x05b05b06UL, 0xc015b05bUL, 0x452b75e3UL,\n-    0x4047da36UL, 0x1ba1ba1cUL, 0x401ba1baUL, 0x00000000UL, 0xbff00000UL,\n-    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x40000000UL, 0x00000000UL,\n-    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n-    0xc7ab4d5aUL, 0xc0085e24UL, 0x00000000UL, 0x00000000UL, 0xe93ea75dUL,\n-    0x400b963dUL, 0x00000000UL, 0x00000000UL, 0x94a7f25aUL, 0xc00f37e2UL,\n-    0x4b6261cbUL, 0xbff5f984UL, 0x5a9dd812UL, 0x4011aab0UL, 0x74c30018UL,\n-    0x3ffaf5a5UL, 0x7f2ce8e3UL, 0xc013fe8bUL, 0xfe8e54faUL, 0xbffd7334UL,\n-    0x670d618dUL, 0x4016a10cUL, 0x4db97058UL, 0x4000e012UL, 0x24df44ddUL,\n-    0xc0199c5fUL, 0x697d6eceUL, 0xc003006eUL, 0x83298b82UL, 0x401cfc4dUL,\n-    0x19d490d6UL, 0x40058c19UL, 0x2ae42850UL, 0xbfea4300UL, 0x118e20e6UL,\n-    0x3c7a6db8UL, 0x00000000UL, 0x40000000UL, 0xe33345b8UL, 0xbfd4e526UL,\n-    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x2b2c49d0UL,\n-    0xbff2de9cUL, 0x00000000UL, 0x00000000UL, 0x2655bc98UL, 0x3ff33e58UL,\n-    0x00000000UL, 0x00000000UL, 0xff691fa2UL, 0xbff3972eUL, 0xe93463bdUL,\n-    0xbfeeed87UL, 0x070e10a0UL, 0x3ff3f5b2UL, 0xf4d790a4UL, 0x3ff20c10UL,\n-    0xa04e8ea3UL, 0xbff4541aUL, 0x386accd3UL, 0xbff1369eUL, 0x222a66ddUL,\n-    0x3ff4b521UL, 0x22a9777eUL, 0x3ff20817UL, 0x52a04a6eUL, 0xbff5178fUL,\n-    0xddaa0031UL, 0xbff22137UL, 0x4447d47cUL, 0x3ff57c01UL, 0x1e9c7f1dUL,\n-    0x3ff29311UL, 0x2ab7f990UL, 0xbfe561b8UL, 0x209c7df1UL, 0xbc87a8c5UL,\n-    0x00000000UL, 0x3ff00000UL, 0x4170bcc6UL, 0x3fdc92d8UL, 0x00000000UL,\n-    0x00000000UL, 0x00000000UL, 0x00000000UL, 0xcc03e501UL, 0xbfdff10fUL,\n-    0x00000000UL, 0x00000000UL, 0x44a4e845UL, 0x3fddb63bUL, 0x00000000UL,\n-    0x00000000UL, 0x3768ad9fUL, 0xbfdb72a4UL, 0x3dd01ccaUL, 0xbfe5fdb9UL,\n-    0xa61d2811UL, 0x3fd972b2UL, 0x5645ad0bUL, 0x3fe977f9UL, 0xd013b3abUL,\n-    0xbfd78ca3UL, 0xbf0bf914UL, 0xbfe4f192UL, 0x4d53e730UL, 0x3fd5d060UL,\n-    0x3f8b9000UL, 0x3fe49933UL, 0xe2b82f08UL, 0xbfd4322aUL, 0x5936a835UL,\n-    0xbfe27ae1UL, 0xb1c61c9bUL, 0x3fd2b3fbUL, 0xef478605UL, 0x3fe1659eUL,\n-    0x190834ecUL, 0xbfe11ab7UL, 0xcdb625eaUL, 0x3c8e564bUL, 0x00000000UL,\n-    0x3ff00000UL, 0xb07217e3UL, 0x3fd248f1UL, 0x00000000UL, 0x00000000UL,\n-    0x00000000UL, 0x00000000UL, 0x56f37042UL, 0xbfccfc56UL, 0x00000000UL,\n-    0x00000000UL, 0xaa563951UL, 0x3fc90125UL, 0x00000000UL, 0x00000000UL,\n-    0x3d0e7c5dUL, 0xbfc50533UL, 0x9bed9b2eUL, 0xbfdf0ed9UL, 0x5fe7c47cUL,\n-    0x3fc1f250UL, 0x96c125e5UL, 0x3fe2edd9UL, 0x5a02bbd8UL, 0xbfbe5c71UL,\n-    0x86362c20UL, 0xbfda08b7UL, 0x4b4435edUL, 0x3fb9d342UL, 0x4b494091UL,\n-    0x3fd911bdUL, 0xb56658beUL, 0xbfb5e4c7UL, 0x93a2fd76UL, 0xbfd3c092UL,\n-    0xda271794UL, 0x3fb29910UL, 0x3303df2bUL, 0x3fd189beUL, 0x99fcef32UL,\n-    0xbfda8279UL, 0xb68c1467UL, 0xbc708b2fUL, 0x00000000UL, 0x3ff00000UL,\n-    0x980c4337UL, 0x3fc5f619UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n-    0x00000000UL, 0x9314533eUL, 0xbfbb8ec5UL, 0x00000000UL, 0x00000000UL,\n-    0x09aa36d0UL, 0x3fb6d3f4UL, 0x00000000UL, 0x00000000UL, 0xdcb427fdUL,\n-    0xbfb13950UL, 0xd87ab0bbUL, 0xbfd5335eUL, 0xce0ae8a5UL, 0x3fabb382UL,\n-    0x79143126UL, 0x3fddba41UL, 0x5f2b28d4UL, 0xbfa552f1UL, 0x59f21a6dUL,\n-    0xbfd015abUL, 0x22c27d95UL, 0x3fa0e984UL, 0xe19fc6aaUL, 0x3fd0576cUL,\n-    0x8f2c2950UL, 0xbf9a4898UL, 0xc0b3f22cUL, 0xbfc59462UL, 0x1883a4b8UL,\n-    0x3f94b61cUL, 0x3f838640UL, 0x3fc30eb8UL, 0x355c63dcUL, 0xbfd36a08UL,\n-    0x1dce993dUL, 0x3c6d704dUL, 0x00000000UL, 0x3ff00000UL, 0x2b82ab63UL,\n-    0x3fb78e92UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n-    0x5a279ea3UL, 0xbfaa3407UL, 0x00000000UL, 0x00000000UL, 0x432d65faUL,\n-    0x3fa70153UL, 0x00000000UL, 0x00000000UL, 0x891a4602UL, 0xbf9d03efUL,\n-    0xd62ca5f8UL, 0xbfca77d9UL, 0xb35f4628UL, 0x3f97a265UL, 0x433258faUL,\n-    0x3fd8cf51UL, 0xb58fd909UL, 0xbf8f88e3UL, 0x01771ceaUL, 0xbfc2b154UL,\n-    0xf3562f8eUL, 0x3f888f57UL, 0xc028a723UL, 0x3fc7370fUL, 0x20b7f9f0UL,\n-    0xbf80f44cUL, 0x214368e9UL, 0xbfb6dfaaUL, 0x28891863UL, 0x3f79b4b6UL,\n-    0x172dbbf0UL, 0x3fb6cb8eUL, 0xe0553158UL, 0xbfc975f5UL, 0x593fe814UL,\n-    0xbc2ef5d3UL, 0x00000000UL, 0x3ff00000UL, 0x03dec550UL, 0x3fa44203UL,\n-    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x4e435f9bUL,\n-    0xbf953f83UL, 0x00000000UL, 0x00000000UL, 0x3c6e8e46UL, 0x3f9b74eaUL,\n-    0x00000000UL, 0x00000000UL, 0xda5b7511UL, 0xbf85ad63UL, 0xdc230b9bUL,\n-    0xbfb97558UL, 0x26cb3788UL, 0x3f881308UL, 0x76fc4985UL, 0x3fd62ac9UL,\n-    0x77bb08baUL, 0xbf757c85UL, 0xb6247521UL, 0xbfb1381eUL, 0x5922170cUL,\n-    0x3f754e95UL, 0x8746482dUL, 0x3fc27f83UL, 0x11055b30UL, 0xbf64e391UL,\n-    0x3e666320UL, 0xbfa3e609UL, 0x0de9dae3UL, 0x3f6301dfUL, 0x1f1dca06UL,\n-    0x3fafa8aeUL, 0x8c5b2da2UL, 0xbfb936bbUL, 0x4e88f7a5UL, 0xbc587d05UL,\n-    0x00000000UL, 0x3ff00000UL, 0xa8935dd9UL, 0x3f83dde2UL, 0x00000000UL,\n-    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x6dc9c883UL, 0x3fe45f30UL,\n-    0x6dc9c883UL, 0x40245f30UL, 0x00000000UL, 0x43780000UL, 0x00000000UL,\n-    0x43380000UL, 0x54444000UL, 0x3fb921fbUL, 0x54440000UL, 0x3fb921fbUL,\n-    0x67674000UL, 0xbd32e7b9UL, 0x4c4c0000UL, 0x3d468c23UL, 0x3707344aUL,\n-    0x3aa8a2e0UL, 0x03707345UL, 0x3ae98a2eUL, 0x00000000UL, 0x80000000UL,\n-    0x00000000UL, 0x80000000UL, 0x676733afUL, 0x3d32e7b9UL, 0x00000000UL,\n-    0x00000000UL, 0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0x00000000UL,\n-    0x00000000UL, 0x7ff00000UL, 0x00000000UL, 0x00000000UL, 0xfffc0000UL,\n-    0xffffffffUL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x43600000UL,\n-    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x3c800000UL, 0x00000000UL,\n-    0x00000000UL, 0x00000000UL, 0x3ca00000UL, 0x00000000UL, 0x00000000UL,\n-    0x00000000UL, 0x3fe00000UL, 0x00000000UL, 0x3fe00000UL, 0x00000000UL,\n-    0x40300000UL, 0x00000000UL, 0x3ff00000UL\n-};\n-\n-void MacroAssembler::fast_tan(XMMRegister xmm0, XMMRegister xmm1, XMMRegister xmm2, XMMRegister xmm3, XMMRegister xmm4, XMMRegister xmm5, XMMRegister xmm6, XMMRegister xmm7, Register eax, Register ecx, Register edx, Register tmp) {\n-\n-  Label L_2TAG_PACKET_0_0_2, L_2TAG_PACKET_1_0_2, L_2TAG_PACKET_2_0_2, L_2TAG_PACKET_3_0_2;\n-  Label L_2TAG_PACKET_4_0_2;\n-\n-  assert_different_registers(tmp, eax, ecx, edx);\n-\n-  address static_const_table_tan = (address)_static_const_table_tan;\n-\n-  subl(rsp, 120);\n-  movl(Address(rsp, 56), tmp);\n-  lea(tmp, ExternalAddress(static_const_table_tan));\n-  movsd(xmm0, Address(rsp, 128));\n-  pextrw(eax, xmm0, 3);\n-  andl(eax, 32767);\n-  subl(eax, 14368);\n-  cmpl(eax, 2216);\n-  jcc(Assembler::above, L_2TAG_PACKET_0_0_2);\n-  movdqu(xmm5, Address(tmp, 5840));\n-  movdqu(xmm6, Address(tmp, 5856));\n-  unpcklpd(xmm0, xmm0);\n-  movdqu(xmm4, Address(tmp, 5712));\n-  andpd(xmm4, xmm0);\n-  movdqu(xmm1, Address(tmp, 5632));\n-  mulpd(xmm1, xmm0);\n-  por(xmm5, xmm4);\n-  addpd(xmm1, xmm5);\n-  movdqu(xmm7, xmm1);\n-  unpckhpd(xmm7, xmm7);\n-  cvttsd2sil(edx, xmm7);\n-  cvttpd2dq(xmm1, xmm1);\n-  cvtdq2pd(xmm1, xmm1);\n-  mulpd(xmm1, xmm6);\n-  movdqu(xmm3, Address(tmp, 5664));\n-  movsd(xmm5, Address(tmp, 5728));\n-  addl(edx, 469248);\n-  movdqu(xmm4, Address(tmp, 5680));\n-  mulpd(xmm3, xmm1);\n-  andl(edx, 31);\n-  mulsd(xmm5, xmm1);\n-  movl(ecx, edx);\n-  mulpd(xmm4, xmm1);\n-  shll(ecx, 1);\n-  subpd(xmm0, xmm3);\n-  mulpd(xmm1, Address(tmp, 5696));\n-  addl(edx, ecx);\n-  shll(ecx, 2);\n-  addl(edx, ecx);\n-  addsd(xmm5, xmm0);\n-  movdqu(xmm2, xmm0);\n-  subpd(xmm0, xmm4);\n-  movsd(xmm6, Address(tmp, 5744));\n-  shll(edx, 4);\n-  lea(eax, Address(tmp, 0));\n-  andpd(xmm5, Address(tmp, 5776));\n-  movdqu(xmm3, xmm0);\n-  addl(eax, edx);\n-  subpd(xmm2, xmm0);\n-  unpckhpd(xmm0, xmm0);\n-  divsd(xmm6, xmm5);\n-  subpd(xmm2, xmm4);\n-  movdqu(xmm7, Address(eax, 16));\n-  subsd(xmm3, xmm5);\n-  mulpd(xmm7, xmm0);\n-  subpd(xmm2, xmm1);\n-  movdqu(xmm1, Address(eax, 48));\n-  mulpd(xmm1, xmm0);\n-  movdqu(xmm4, Address(eax, 96));\n-  mulpd(xmm4, xmm0);\n-  addsd(xmm2, xmm3);\n-  movdqu(xmm3, xmm0);\n-  mulpd(xmm0, xmm0);\n-  addpd(xmm7, Address(eax, 0));\n-  addpd(xmm1, Address(eax, 32));\n-  mulpd(xmm1, xmm0);\n-  addpd(xmm4, Address(eax, 80));\n-  addpd(xmm7, xmm1);\n-  movdqu(xmm1, Address(eax, 112));\n-  mulpd(xmm1, xmm0);\n-  mulpd(xmm0, xmm0);\n-  addpd(xmm4, xmm1);\n-  movdqu(xmm1, Address(eax, 64));\n-  mulpd(xmm1, xmm0);\n-  addpd(xmm7, xmm1);\n-  movdqu(xmm1, xmm3);\n-  mulpd(xmm3, xmm0);\n-  mulsd(xmm0, xmm0);\n-  mulpd(xmm1, Address(eax, 144));\n-  mulpd(xmm4, xmm3);\n-  movdqu(xmm3, xmm1);\n-  addpd(xmm7, xmm4);\n-  movdqu(xmm4, xmm1);\n-  mulsd(xmm0, xmm7);\n-  unpckhpd(xmm7, xmm7);\n-  addsd(xmm0, xmm7);\n-  unpckhpd(xmm1, xmm1);\n-  addsd(xmm3, xmm1);\n-  subsd(xmm4, xmm3);\n-  addsd(xmm1, xmm4);\n-  movdqu(xmm4, xmm2);\n-  movsd(xmm7, Address(eax, 144));\n-  unpckhpd(xmm2, xmm2);\n-  addsd(xmm7, Address(eax, 152));\n-  mulsd(xmm7, xmm2);\n-  addsd(xmm7, Address(eax, 136));\n-  addsd(xmm7, xmm1);\n-  addsd(xmm0, xmm7);\n-  movsd(xmm7, Address(tmp, 5744));\n-  mulsd(xmm4, xmm6);\n-  movsd(xmm2, Address(eax, 168));\n-  andpd(xmm2, xmm6);\n-  mulsd(xmm5, xmm2);\n-  mulsd(xmm6, Address(eax, 160));\n-  subsd(xmm7, xmm5);\n-  subsd(xmm2, Address(eax, 128));\n-  subsd(xmm7, xmm4);\n-  mulsd(xmm7, xmm6);\n-  movdqu(xmm4, xmm3);\n-  subsd(xmm3, xmm2);\n-  addsd(xmm2, xmm3);\n-  subsd(xmm4, xmm2);\n-  addsd(xmm0, xmm4);\n-  subsd(xmm0, xmm7);\n-  addsd(xmm0, xmm3);\n-  movsd(Address(rsp, 0), xmm0);\n-  fld_d(Address(rsp, 0));\n-  jmp(L_2TAG_PACKET_1_0_2);\n-\n-  bind(L_2TAG_PACKET_0_0_2);\n-  jcc(Assembler::greater, L_2TAG_PACKET_2_0_2);\n-  shrl(eax, 4);\n-  cmpl(eax, 268434558);\n-  jcc(Assembler::notEqual, L_2TAG_PACKET_3_0_2);\n-  movdqu(xmm3, xmm0);\n-  mulsd(xmm3, Address(tmp, 5808));\n-\n-  bind(L_2TAG_PACKET_3_0_2);\n-  movsd(xmm3, Address(tmp, 5792));\n-  mulsd(xmm3, xmm0);\n-  addsd(xmm3, xmm0);\n-  mulsd(xmm3, Address(tmp, 5808));\n-  movsd(Address(rsp, 0), xmm3);\n-  fld_d(Address(rsp, 0));\n-  jmp(L_2TAG_PACKET_1_0_2);\n-\n-  bind(L_2TAG_PACKET_2_0_2);\n-  movq(xmm7, Address(tmp, 5712));\n-  andpd(xmm7, xmm0);\n-  xorpd(xmm7, xmm0);\n-  ucomisd(xmm7, Address(tmp, 5760));\n-  jcc(Assembler::equal, L_2TAG_PACKET_4_0_2);\n-  subl(rsp, 32);\n-  movsd(Address(rsp, 0), xmm0);\n-  lea(eax, Address(rsp, 40));\n-  movl(Address(rsp, 8), eax);\n-  movl(eax, 2);\n-  movl(Address(rsp, 12), eax);\n-  call(RuntimeAddress(CAST_FROM_FN_PTR(address, StubRoutines::dlibm_tan_cot_huge())));\n-  addl(rsp, 32);\n-  fld_d(Address(rsp, 8));\n-  jmp(L_2TAG_PACKET_1_0_2);\n-\n-  bind(L_2TAG_PACKET_4_0_2);\n-  movq(Address(rsp, 0), xmm0);\n-  fld_d(Address(rsp, 0));\n-  fsub_d(Address(rsp, 0));\n-\n-  bind(L_2TAG_PACKET_1_0_2);\n-  movl(tmp, Address(rsp, 56));\n-}\n-#endif\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86_tan.cpp","additions":0,"deletions":2093,"binary":false,"changes":2093,"status":"deleted"},{"patch":"@@ -27,2 +27,1 @@\n-#include \"asm\/macroAssembler.inline.hpp\"\n-#include \"ci\/ciUtilities.hpp\"\n+#include \"classfile\/vmIntrinsics.hpp\"\n@@ -34,1 +33,0 @@\n-#include \"interpreter\/interpreter.hpp\"\n@@ -36,3 +34,0 @@\n-#include \"nativeInst_x86.hpp\"\n-#include \"oops\/instanceOop.hpp\"\n-#include \"oops\/method.hpp\"\n@@ -40,1 +35,0 @@\n-#include \"oops\/oop.inline.hpp\"\n@@ -42,1 +36,0 @@\n-#include \"prims\/methodHandles.hpp\"\n@@ -44,4 +37,0 @@\n-#include \"runtime\/continuation.hpp\"\n-#include \"runtime\/continuationEntry.inline.hpp\"\n-#include \"runtime\/frame.inline.hpp\"\n-#include \"runtime\/handles.inline.hpp\"\n@@ -50,1 +39,0 @@\n-#include \"runtime\/stubCodeGenerator.hpp\"\n@@ -52,0 +40,1 @@\n+#include \"stubGenerator_x86_64.hpp\"\n@@ -65,1 +54,0 @@\n-\/\/ Declaration and definition of StubGenerator (no .hpp file).\n@@ -71,1 +59,0 @@\n-#define a__ ((Assembler*)_masm)->\n@@ -77,1 +64,1 @@\n-#endif\n+#endif \/\/ PRODUCT\n@@ -80,6 +67,0 @@\n-const int MXCSR_MASK = 0xFFC0;  \/\/ Mask out any pending exceptions\n-\n-\/\/ Stub Code definitions\n-\n-class StubGenerator: public StubCodeGenerator {\n- private:\n@@ -90,3 +71,0 @@\n-  void inc_counter_np(int& counter, Register rscratch) {\n-    __ incrementl(ExternalAddress((address)&counter), rscratch);\n-  }\n@@ -94,75 +72,2 @@\n-  BLOCK_COMMENT(\"inc_counter \" #counter); \\\n-  inc_counter_np(counter, rscratch);\n-#endif\n-\n-  \/\/ Call stubs are used to call Java from C\n-  \/\/\n-  \/\/ Linux Arguments:\n-  \/\/    c_rarg0:   call wrapper address                   address\n-  \/\/    c_rarg1:   result                                 address\n-  \/\/    c_rarg2:   result type                            BasicType\n-  \/\/    c_rarg3:   method                                 Method*\n-  \/\/    c_rarg4:   (interpreter) entry point              address\n-  \/\/    c_rarg5:   parameters                             intptr_t*\n-  \/\/    16(rbp): parameter size (in words)              int\n-  \/\/    24(rbp): thread                                 Thread*\n-  \/\/\n-  \/\/     [ return_from_Java     ] <--- rsp\n-  \/\/     [ argument word n      ]\n-  \/\/      ...\n-  \/\/ -12 [ argument word 1      ]\n-  \/\/ -11 [ saved r15            ] <--- rsp_after_call\n-  \/\/ -10 [ saved r14            ]\n-  \/\/  -9 [ saved r13            ]\n-  \/\/  -8 [ saved r12            ]\n-  \/\/  -7 [ saved rbx            ]\n-  \/\/  -6 [ call wrapper         ]\n-  \/\/  -5 [ result               ]\n-  \/\/  -4 [ result type          ]\n-  \/\/  -3 [ method               ]\n-  \/\/  -2 [ entry point          ]\n-  \/\/  -1 [ parameters           ]\n-  \/\/   0 [ saved rbp            ] <--- rbp\n-  \/\/   1 [ return address       ]\n-  \/\/   2 [ parameter size       ]\n-  \/\/   3 [ thread               ]\n-  \/\/\n-  \/\/ Windows Arguments:\n-  \/\/    c_rarg0:   call wrapper address                   address\n-  \/\/    c_rarg1:   result                                 address\n-  \/\/    c_rarg2:   result type                            BasicType\n-  \/\/    c_rarg3:   method                                 Method*\n-  \/\/    48(rbp): (interpreter) entry point              address\n-  \/\/    56(rbp): parameters                             intptr_t*\n-  \/\/    64(rbp): parameter size (in words)              int\n-  \/\/    72(rbp): thread                                 Thread*\n-  \/\/\n-  \/\/     [ return_from_Java     ] <--- rsp\n-  \/\/     [ argument word n      ]\n-  \/\/      ...\n-  \/\/ -60 [ argument word 1      ]\n-  \/\/ -59 [ saved xmm31          ] <--- rsp after_call\n-  \/\/     [ saved xmm16-xmm30    ] (EVEX enabled, else the space is blank)\n-  \/\/ -27 [ saved xmm15          ]\n-  \/\/     [ saved xmm7-xmm14     ]\n-  \/\/  -9 [ saved xmm6           ] (each xmm register takes 2 slots)\n-  \/\/  -7 [ saved r15            ]\n-  \/\/  -6 [ saved r14            ]\n-  \/\/  -5 [ saved r13            ]\n-  \/\/  -4 [ saved r12            ]\n-  \/\/  -3 [ saved rdi            ]\n-  \/\/  -2 [ saved rsi            ]\n-  \/\/  -1 [ saved rbx            ]\n-  \/\/   0 [ saved rbp            ] <--- rbp\n-  \/\/   1 [ return address       ]\n-  \/\/   2 [ call wrapper         ]\n-  \/\/   3 [ result               ]\n-  \/\/   4 [ result type          ]\n-  \/\/   5 [ method               ]\n-  \/\/   6 [ entry point          ]\n-  \/\/   7 [ parameters           ]\n-  \/\/   8 [ parameter size       ]\n-  \/\/   9 [ thread               ]\n-  \/\/\n-  \/\/    Windows reserves the callers stack space for arguments 1-4.\n-  \/\/    We spill c_rarg0-c_rarg3 to this space.\n+BLOCK_COMMENT(\"inc_counter \" #counter); \\\n+inc_counter_np(_masm, counter, rscratch);\n@@ -170,44 +75,3 @@\n-  \/\/ Call stub stack layout word offsets from rbp\n-  enum call_stub_layout {\n-#ifdef _WIN64\n-    xmm_save_first     = 6,  \/\/ save from xmm6\n-    xmm_save_last      = 31, \/\/ to xmm31\n-    xmm_save_base      = -9,\n-    rsp_after_call_off = xmm_save_base - 2 * (xmm_save_last - xmm_save_first), \/\/ -27\n-    r15_off            = -7,\n-    r14_off            = -6,\n-    r13_off            = -5,\n-    r12_off            = -4,\n-    rdi_off            = -3,\n-    rsi_off            = -2,\n-    rbx_off            = -1,\n-    rbp_off            =  0,\n-    retaddr_off        =  1,\n-    call_wrapper_off   =  2,\n-    result_off         =  3,\n-    result_type_off    =  4,\n-    method_off         =  5,\n-    entry_point_off    =  6,\n-    parameters_off     =  7,\n-    parameter_size_off =  8,\n-    thread_off         =  9\n-#else\n-    rsp_after_call_off = -12,\n-    mxcsr_off          = rsp_after_call_off,\n-    r15_off            = -11,\n-    r14_off            = -10,\n-    r13_off            = -9,\n-    r12_off            = -8,\n-    rbx_off            = -7,\n-    call_wrapper_off   = -6,\n-    result_off         = -5,\n-    result_type_off    = -4,\n-    method_off         = -3,\n-    entry_point_off    = -2,\n-    parameters_off     = -1,\n-    rbp_off            =  0,\n-    retaddr_off        =  1,\n-    parameter_size_off =  2,\n-    thread_off         =  3\n-#endif\n-  };\n+static void inc_counter_np(MacroAssembler* _masm, int& counter, Register rscratch) {\n+  __ incrementl(ExternalAddress((address)&counter), rscratch);\n+}\n@@ -215,4 +79,11 @@\n-#ifdef _WIN64\n-  Address xmm_save(int reg) {\n-    assert(reg >= xmm_save_first && reg <= xmm_save_last, \"XMM register number out of range\");\n-    return Address(rbp, (xmm_save_base - (reg - xmm_save_first) * 2) * wordSize);\n+#if COMPILER2_OR_JVMCI\n+static int& get_profile_ctr(int shift) {\n+  if (shift == 0) {\n+    return SharedRuntime::_jbyte_array_copy_ctr;\n+  } else if (shift == 1) {\n+    return SharedRuntime::_jshort_array_copy_ctr;\n+  } else if (shift == 2) {\n+    return SharedRuntime::_jint_array_copy_ctr;\n+  } else {\n+    assert(shift == 3, \"\");\n+    return SharedRuntime::_jlong_array_copy_ctr;\n@@ -220,1 +91,74 @@\n-#endif\n+}\n+#endif \/\/ COMPILER2_OR_JVMCI\n+#endif \/\/ !PRODUCT\n+\n+\/\/\n+\/\/ Linux Arguments:\n+\/\/    c_rarg0:   call wrapper address                   address\n+\/\/    c_rarg1:   result                                 address\n+\/\/    c_rarg2:   result type                            BasicType\n+\/\/    c_rarg3:   method                                 Method*\n+\/\/    c_rarg4:   (interpreter) entry point              address\n+\/\/    c_rarg5:   parameters                             intptr_t*\n+\/\/    16(rbp): parameter size (in words)              int\n+\/\/    24(rbp): thread                                 Thread*\n+\/\/\n+\/\/     [ return_from_Java     ] <--- rsp\n+\/\/     [ argument word n      ]\n+\/\/      ...\n+\/\/ -12 [ argument word 1      ]\n+\/\/ -11 [ saved r15            ] <--- rsp_after_call\n+\/\/ -10 [ saved r14            ]\n+\/\/  -9 [ saved r13            ]\n+\/\/  -8 [ saved r12            ]\n+\/\/  -7 [ saved rbx            ]\n+\/\/  -6 [ call wrapper         ]\n+\/\/  -5 [ result               ]\n+\/\/  -4 [ result type          ]\n+\/\/  -3 [ method               ]\n+\/\/  -2 [ entry point          ]\n+\/\/  -1 [ parameters           ]\n+\/\/   0 [ saved rbp            ] <--- rbp\n+\/\/   1 [ return address       ]\n+\/\/   2 [ parameter size       ]\n+\/\/   3 [ thread               ]\n+\/\/\n+\/\/ Windows Arguments:\n+\/\/    c_rarg0:   call wrapper address                   address\n+\/\/    c_rarg1:   result                                 address\n+\/\/    c_rarg2:   result type                            BasicType\n+\/\/    c_rarg3:   method                                 Method*\n+\/\/    48(rbp): (interpreter) entry point              address\n+\/\/    56(rbp): parameters                             intptr_t*\n+\/\/    64(rbp): parameter size (in words)              int\n+\/\/    72(rbp): thread                                 Thread*\n+\/\/\n+\/\/     [ return_from_Java     ] <--- rsp\n+\/\/     [ argument word n      ]\n+\/\/      ...\n+\/\/ -60 [ argument word 1      ]\n+\/\/ -59 [ saved xmm31          ] <--- rsp after_call\n+\/\/     [ saved xmm16-xmm30    ] (EVEX enabled, else the space is blank)\n+\/\/ -27 [ saved xmm15          ]\n+\/\/     [ saved xmm7-xmm14     ]\n+\/\/  -9 [ saved xmm6           ] (each xmm register takes 2 slots)\n+\/\/  -7 [ saved r15            ]\n+\/\/  -6 [ saved r14            ]\n+\/\/  -5 [ saved r13            ]\n+\/\/  -4 [ saved r12            ]\n+\/\/  -3 [ saved rdi            ]\n+\/\/  -2 [ saved rsi            ]\n+\/\/  -1 [ saved rbx            ]\n+\/\/   0 [ saved rbp            ] <--- rbp\n+\/\/   1 [ return address       ]\n+\/\/   2 [ call wrapper         ]\n+\/\/   3 [ result               ]\n+\/\/   4 [ result type          ]\n+\/\/   5 [ method               ]\n+\/\/   6 [ entry point          ]\n+\/\/   7 [ parameters           ]\n+\/\/   8 [ parameter size       ]\n+\/\/   9 [ thread               ]\n+\/\/\n+\/\/    Windows reserves the callers stack space for arguments 1-4.\n+\/\/    We spill c_rarg0-c_rarg3 to this space.\n@@ -222,32 +166,85 @@\n-  address generate_call_stub(address& return_address) {\n-    assert((int)frame::entry_frame_after_call_words == -(int)rsp_after_call_off + 1 &&\n-           (int)frame::entry_frame_call_wrapper_offset == (int)call_wrapper_off,\n-           \"adjust this code\");\n-    StubCodeMark mark(this, \"StubRoutines\", \"call_stub\");\n-    address start = __ pc();\n-\n-    \/\/ same as in generate_catch_exception()!\n-    const Address rsp_after_call(rbp, rsp_after_call_off * wordSize);\n-\n-    const Address call_wrapper  (rbp, call_wrapper_off   * wordSize);\n-    const Address result        (rbp, result_off         * wordSize);\n-    const Address result_type   (rbp, result_type_off    * wordSize);\n-    const Address method        (rbp, method_off         * wordSize);\n-    const Address entry_point   (rbp, entry_point_off    * wordSize);\n-    const Address parameters    (rbp, parameters_off     * wordSize);\n-    const Address parameter_size(rbp, parameter_size_off * wordSize);\n-\n-    \/\/ same as in generate_catch_exception()!\n-    const Address thread        (rbp, thread_off         * wordSize);\n-\n-    const Address r15_save(rbp, r15_off * wordSize);\n-    const Address r14_save(rbp, r14_off * wordSize);\n-    const Address r13_save(rbp, r13_off * wordSize);\n-    const Address r12_save(rbp, r12_off * wordSize);\n-    const Address rbx_save(rbp, rbx_off * wordSize);\n-\n-    \/\/ stub code\n-    __ enter();\n-    __ subptr(rsp, -rsp_after_call_off * wordSize);\n-\n-    \/\/ save register parameters\n+\/\/ Call stub stack layout word offsets from rbp\n+#ifdef _WIN64\n+enum call_stub_layout {\n+  xmm_save_first     = 6,  \/\/ save from xmm6\n+  xmm_save_last      = 31, \/\/ to xmm31\n+  xmm_save_base      = -9,\n+  rsp_after_call_off = xmm_save_base - 2 * (xmm_save_last - xmm_save_first), \/\/ -27\n+  r15_off            = -7,\n+  r14_off            = -6,\n+  r13_off            = -5,\n+  r12_off            = -4,\n+  rdi_off            = -3,\n+  rsi_off            = -2,\n+  rbx_off            = -1,\n+  rbp_off            =  0,\n+  retaddr_off        =  1,\n+  call_wrapper_off   =  2,\n+  result_off         =  3,\n+  result_type_off    =  4,\n+  method_off         =  5,\n+  entry_point_off    =  6,\n+  parameters_off     =  7,\n+  parameter_size_off =  8,\n+  thread_off         =  9\n+};\n+\n+static Address xmm_save(int reg) {\n+  assert(reg >= xmm_save_first && reg <= xmm_save_last, \"XMM register number out of range\");\n+  return Address(rbp, (xmm_save_base - (reg - xmm_save_first) * 2) * wordSize);\n+}\n+#else \/\/ !_WIN64\n+enum call_stub_layout {\n+  rsp_after_call_off = -12,\n+  mxcsr_off          = rsp_after_call_off,\n+  r15_off            = -11,\n+  r14_off            = -10,\n+  r13_off            = -9,\n+  r12_off            = -8,\n+  rbx_off            = -7,\n+  call_wrapper_off   = -6,\n+  result_off         = -5,\n+  result_type_off    = -4,\n+  method_off         = -3,\n+  entry_point_off    = -2,\n+  parameters_off     = -1,\n+  rbp_off            =  0,\n+  retaddr_off        =  1,\n+  parameter_size_off =  2,\n+  thread_off         =  3\n+};\n+#endif \/\/ _WIN64\n+\n+address StubGenerator::generate_call_stub(address& return_address) {\n+\n+  assert((int)frame::entry_frame_after_call_words == -(int)rsp_after_call_off + 1 &&\n+         (int)frame::entry_frame_call_wrapper_offset == (int)call_wrapper_off,\n+         \"adjust this code\");\n+  StubCodeMark mark(this, \"StubRoutines\", \"call_stub\");\n+  address start = __ pc();\n+\n+  \/\/ same as in generate_catch_exception()!\n+  const Address rsp_after_call(rbp, rsp_after_call_off * wordSize);\n+\n+  const Address call_wrapper  (rbp, call_wrapper_off   * wordSize);\n+  const Address result        (rbp, result_off         * wordSize);\n+  const Address result_type   (rbp, result_type_off    * wordSize);\n+  const Address method        (rbp, method_off         * wordSize);\n+  const Address entry_point   (rbp, entry_point_off    * wordSize);\n+  const Address parameters    (rbp, parameters_off     * wordSize);\n+  const Address parameter_size(rbp, parameter_size_off * wordSize);\n+\n+  \/\/ same as in generate_catch_exception()!\n+  const Address thread        (rbp, thread_off         * wordSize);\n+\n+  const Address r15_save(rbp, r15_off * wordSize);\n+  const Address r14_save(rbp, r14_off * wordSize);\n+  const Address r13_save(rbp, r13_off * wordSize);\n+  const Address r12_save(rbp, r12_off * wordSize);\n+  const Address rbx_save(rbp, rbx_off * wordSize);\n+\n+  \/\/ stub code\n+  __ enter();\n+  __ subptr(rsp, -rsp_after_call_off * wordSize);\n+\n+  \/\/ save register parameters\n@@ -255,2 +252,2 @@\n-    __ movptr(parameters,   c_rarg5); \/\/ parameters\n-    __ movptr(entry_point,  c_rarg4); \/\/ entry_point\n+  __ movptr(parameters,   c_rarg5); \/\/ parameters\n+  __ movptr(entry_point,  c_rarg4); \/\/ entry_point\n@@ -259,4 +256,4 @@\n-    __ movptr(method,       c_rarg3); \/\/ method\n-    __ movl(result_type,  c_rarg2);   \/\/ result type\n-    __ movptr(result,       c_rarg1); \/\/ result\n-    __ movptr(call_wrapper, c_rarg0); \/\/ call wrapper\n+  __ movptr(method,       c_rarg3); \/\/ method\n+  __ movl(result_type,  c_rarg2);   \/\/ result type\n+  __ movptr(result,       c_rarg1); \/\/ result\n+  __ movptr(call_wrapper, c_rarg0); \/\/ call wrapper\n@@ -264,6 +261,6 @@\n-    \/\/ save regs belonging to calling function\n-    __ movptr(rbx_save, rbx);\n-    __ movptr(r12_save, r12);\n-    __ movptr(r13_save, r13);\n-    __ movptr(r14_save, r14);\n-    __ movptr(r15_save, r15);\n+  \/\/ save regs belonging to calling function\n+  __ movptr(rbx_save, rbx);\n+  __ movptr(r12_save, r12);\n+  __ movptr(r13_save, r13);\n+  __ movptr(r14_save, r14);\n+  __ movptr(r15_save, r15);\n@@ -272,3 +269,7 @@\n-    int last_reg = 15;\n-    if (UseAVX > 2) {\n-      last_reg = 31;\n+  int last_reg = 15;\n+  if (UseAVX > 2) {\n+    last_reg = 31;\n+  }\n+  if (VM_Version::supports_evex()) {\n+    for (int i = xmm_save_first; i <= last_reg; i++) {\n+      __ vextractf32x4(xmm_save(i), as_XMMRegister(i), 0);\n@@ -276,8 +277,3 @@\n-    if (VM_Version::supports_evex()) {\n-      for (int i = xmm_save_first; i <= last_reg; i++) {\n-        __ vextractf32x4(xmm_save(i), as_XMMRegister(i), 0);\n-      }\n-    } else {\n-      for (int i = xmm_save_first; i <= last_reg; i++) {\n-        __ movdqu(xmm_save(i), as_XMMRegister(i));\n-      }\n+  } else {\n+    for (int i = xmm_save_first; i <= last_reg; i++) {\n+      __ movdqu(xmm_save(i), as_XMMRegister(i));\n@@ -285,0 +281,1 @@\n+  }\n@@ -286,2 +283,2 @@\n-    const Address rdi_save(rbp, rdi_off * wordSize);\n-    const Address rsi_save(rbp, rsi_off * wordSize);\n+  const Address rdi_save(rbp, rdi_off * wordSize);\n+  const Address rsi_save(rbp, rsi_off * wordSize);\n@@ -289,2 +286,2 @@\n-    __ movptr(rsi_save, rsi);\n-    __ movptr(rdi_save, rdi);\n+  __ movptr(rsi_save, rsi);\n+  __ movptr(rdi_save, rdi);\n@@ -292,12 +289,12 @@\n-    const Address mxcsr_save(rbp, mxcsr_off * wordSize);\n-    {\n-      Label skip_ldmx;\n-      __ stmxcsr(mxcsr_save);\n-      __ movl(rax, mxcsr_save);\n-      __ andl(rax, MXCSR_MASK);    \/\/ Only check control and mask bits\n-      ExternalAddress mxcsr_std(StubRoutines::x86::addr_mxcsr_std());\n-      __ cmp32(rax, mxcsr_std, rscratch1);\n-      __ jcc(Assembler::equal, skip_ldmx);\n-      __ ldmxcsr(mxcsr_std, rscratch1);\n-      __ bind(skip_ldmx);\n-    }\n+  const Address mxcsr_save(rbp, mxcsr_off * wordSize);\n+  {\n+    Label skip_ldmx;\n+    __ stmxcsr(mxcsr_save);\n+    __ movl(rax, mxcsr_save);\n+    __ andl(rax, 0xFFC0); \/\/ Mask out any pending exceptions (only check control and mask bits)\n+    ExternalAddress mxcsr_std(StubRoutines::x86::addr_mxcsr_std());\n+    __ cmp32(rax, mxcsr_std, rscratch1);\n+    __ jcc(Assembler::equal, skip_ldmx);\n+    __ ldmxcsr(mxcsr_std, rscratch1);\n+    __ bind(skip_ldmx);\n+  }\n@@ -306,3 +303,3 @@\n-    \/\/ Load up thread register\n-    __ movptr(r15_thread, thread);\n-    __ reinit_heapbase();\n+  \/\/ Load up thread register\n+  __ movptr(r15_thread, thread);\n+  __ reinit_heapbase();\n@@ -311,8 +308,8 @@\n-    \/\/ make sure we have no pending exceptions\n-    {\n-      Label L;\n-      __ cmpptr(Address(r15_thread, Thread::pending_exception_offset()), NULL_WORD);\n-      __ jcc(Assembler::equal, L);\n-      __ stop(\"StubRoutines::call_stub: entered with pending exception\");\n-      __ bind(L);\n-    }\n+  \/\/ make sure we have no pending exceptions\n+  {\n+    Label L;\n+    __ cmpptr(Address(r15_thread, Thread::pending_exception_offset()), NULL_WORD);\n+    __ jcc(Assembler::equal, L);\n+    __ stop(\"StubRoutines::call_stub: entered with pending exception\");\n+    __ bind(L);\n+  }\n@@ -321,49 +318,49 @@\n-    \/\/ pass parameters if any\n-    BLOCK_COMMENT(\"pass parameters if any\");\n-    Label parameters_done;\n-    __ movl(c_rarg3, parameter_size);\n-    __ testl(c_rarg3, c_rarg3);\n-    __ jcc(Assembler::zero, parameters_done);\n-\n-    Label loop;\n-    __ movptr(c_rarg2, parameters);       \/\/ parameter pointer\n-    __ movl(c_rarg1, c_rarg3);            \/\/ parameter counter is in c_rarg1\n-    __ BIND(loop);\n-    __ movptr(rax, Address(c_rarg2, 0));\/\/ get parameter\n-    __ addptr(c_rarg2, wordSize);       \/\/ advance to next parameter\n-    __ decrementl(c_rarg1);             \/\/ decrement counter\n-    __ push(rax);                       \/\/ pass parameter\n-    __ jcc(Assembler::notZero, loop);\n-\n-    \/\/ call Java function\n-    __ BIND(parameters_done);\n-    __ movptr(rbx, method);             \/\/ get Method*\n-    __ movptr(c_rarg1, entry_point);    \/\/ get entry_point\n-    __ mov(r13, rsp);                   \/\/ set sender sp\n-    BLOCK_COMMENT(\"call Java function\");\n-    __ call(c_rarg1);\n-\n-    BLOCK_COMMENT(\"call_stub_return_address:\");\n-    return_address = __ pc();\n-\n-    \/\/ store result depending on type (everything that is not\n-    \/\/ T_OBJECT, T_LONG, T_FLOAT or T_DOUBLE is treated as T_INT)\n-    __ movptr(c_rarg0, result);\n-    Label is_long, is_float, is_double, exit;\n-    __ movl(c_rarg1, result_type);\n-    __ cmpl(c_rarg1, T_OBJECT);\n-    __ jcc(Assembler::equal, is_long);\n-    __ cmpl(c_rarg1, T_LONG);\n-    __ jcc(Assembler::equal, is_long);\n-    __ cmpl(c_rarg1, T_FLOAT);\n-    __ jcc(Assembler::equal, is_float);\n-    __ cmpl(c_rarg1, T_DOUBLE);\n-    __ jcc(Assembler::equal, is_double);\n-\n-    \/\/ handle T_INT case\n-    __ movl(Address(c_rarg0, 0), rax);\n-\n-    __ BIND(exit);\n-\n-    \/\/ pop parameters\n-    __ lea(rsp, rsp_after_call);\n+  \/\/ pass parameters if any\n+  BLOCK_COMMENT(\"pass parameters if any\");\n+  Label parameters_done;\n+  __ movl(c_rarg3, parameter_size);\n+  __ testl(c_rarg3, c_rarg3);\n+  __ jcc(Assembler::zero, parameters_done);\n+\n+  Label loop;\n+  __ movptr(c_rarg2, parameters);       \/\/ parameter pointer\n+  __ movl(c_rarg1, c_rarg3);            \/\/ parameter counter is in c_rarg1\n+  __ BIND(loop);\n+  __ movptr(rax, Address(c_rarg2, 0));\/\/ get parameter\n+  __ addptr(c_rarg2, wordSize);       \/\/ advance to next parameter\n+  __ decrementl(c_rarg1);             \/\/ decrement counter\n+  __ push(rax);                       \/\/ pass parameter\n+  __ jcc(Assembler::notZero, loop);\n+\n+  \/\/ call Java function\n+  __ BIND(parameters_done);\n+  __ movptr(rbx, method);             \/\/ get Method*\n+  __ movptr(c_rarg1, entry_point);    \/\/ get entry_point\n+  __ mov(r13, rsp);                   \/\/ set sender sp\n+  BLOCK_COMMENT(\"call Java function\");\n+  __ call(c_rarg1);\n+\n+  BLOCK_COMMENT(\"call_stub_return_address:\");\n+  return_address = __ pc();\n+\n+  \/\/ store result depending on type (everything that is not\n+  \/\/ T_OBJECT, T_LONG, T_FLOAT or T_DOUBLE is treated as T_INT)\n+  __ movptr(c_rarg0, result);\n+  Label is_long, is_float, is_double, exit;\n+  __ movl(c_rarg1, result_type);\n+  __ cmpl(c_rarg1, T_OBJECT);\n+  __ jcc(Assembler::equal, is_long);\n+  __ cmpl(c_rarg1, T_LONG);\n+  __ jcc(Assembler::equal, is_long);\n+  __ cmpl(c_rarg1, T_FLOAT);\n+  __ jcc(Assembler::equal, is_float);\n+  __ cmpl(c_rarg1, T_DOUBLE);\n+  __ jcc(Assembler::equal, is_double);\n+\n+  \/\/ handle T_INT case\n+  __ movl(Address(c_rarg0, 0), rax);\n+\n+  __ BIND(exit);\n+\n+  \/\/ pop parameters\n+  __ lea(rsp, rsp_after_call);\n@@ -372,17 +369,17 @@\n-    \/\/ verify that threads correspond\n-    {\n-     Label L1, L2, L3;\n-      __ cmpptr(r15_thread, thread);\n-      __ jcc(Assembler::equal, L1);\n-      __ stop(\"StubRoutines::call_stub: r15_thread is corrupted\");\n-      __ bind(L1);\n-      __ get_thread(rbx);\n-      __ cmpptr(r15_thread, thread);\n-      __ jcc(Assembler::equal, L2);\n-      __ stop(\"StubRoutines::call_stub: r15_thread is modified by call\");\n-      __ bind(L2);\n-      __ cmpptr(r15_thread, rbx);\n-      __ jcc(Assembler::equal, L3);\n-      __ stop(\"StubRoutines::call_stub: threads must correspond\");\n-      __ bind(L3);\n-    }\n+  \/\/ verify that threads correspond\n+  {\n+   Label L1, L2, L3;\n+    __ cmpptr(r15_thread, thread);\n+    __ jcc(Assembler::equal, L1);\n+    __ stop(\"StubRoutines::call_stub: r15_thread is corrupted\");\n+    __ bind(L1);\n+    __ get_thread(rbx);\n+    __ cmpptr(r15_thread, thread);\n+    __ jcc(Assembler::equal, L2);\n+    __ stop(\"StubRoutines::call_stub: r15_thread is modified by call\");\n+    __ bind(L2);\n+    __ cmpptr(r15_thread, rbx);\n+    __ jcc(Assembler::equal, L3);\n+    __ stop(\"StubRoutines::call_stub: threads must correspond\");\n+    __ bind(L3);\n+  }\n@@ -391,1 +388,1 @@\n-    __ pop_cont_fastpath();\n+  __ pop_cont_fastpath();\n@@ -393,1 +390,1 @@\n-    \/\/ restore regs belonging to calling function\n+  \/\/ restore regs belonging to calling function\n@@ -395,9 +392,8 @@\n-    \/\/ emit the restores for xmm regs\n-    if (VM_Version::supports_evex()) {\n-      for (int i = xmm_save_first; i <= last_reg; i++) {\n-        __ vinsertf32x4(as_XMMRegister(i), as_XMMRegister(i), xmm_save(i), 0);\n-      }\n-    } else {\n-      for (int i = xmm_save_first; i <= last_reg; i++) {\n-        __ movdqu(as_XMMRegister(i), xmm_save(i));\n-      }\n+  \/\/ emit the restores for xmm regs\n+  if (VM_Version::supports_evex()) {\n+    for (int i = xmm_save_first; i <= last_reg; i++) {\n+      __ vinsertf32x4(as_XMMRegister(i), as_XMMRegister(i), xmm_save(i), 0);\n+    }\n+  } else {\n+    for (int i = xmm_save_first; i <= last_reg; i++) {\n+      __ movdqu(as_XMMRegister(i), xmm_save(i));\n@@ -405,0 +401,1 @@\n+  }\n@@ -406,5 +403,5 @@\n-    __ movptr(r15, r15_save);\n-    __ movptr(r14, r14_save);\n-    __ movptr(r13, r13_save);\n-    __ movptr(r12, r12_save);\n-    __ movptr(rbx, rbx_save);\n+  __ movptr(r15, r15_save);\n+  __ movptr(r14, r14_save);\n+  __ movptr(r13, r13_save);\n+  __ movptr(r12, r12_save);\n+  __ movptr(rbx, rbx_save);\n@@ -413,2 +410,2 @@\n-    __ movptr(rdi, rdi_save);\n-    __ movptr(rsi, rsi_save);\n+  __ movptr(rdi, rdi_save);\n+  __ movptr(rsi, rsi_save);\n@@ -416,1 +413,1 @@\n-    __ ldmxcsr(mxcsr_save);\n+  __ ldmxcsr(mxcsr_save);\n@@ -419,2 +416,2 @@\n-    \/\/ restore rsp\n-    __ addptr(rsp, -rsp_after_call_off * wordSize);\n+  \/\/ restore rsp\n+  __ addptr(rsp, -rsp_after_call_off * wordSize);\n@@ -422,4 +419,4 @@\n-    \/\/ return\n-    __ vzeroupper();\n-    __ pop(rbp);\n-    __ ret(0);\n+  \/\/ return\n+  __ vzeroupper();\n+  __ pop(rbp);\n+  __ ret(0);\n@@ -427,4 +424,4 @@\n-    \/\/ handle return types different from T_INT\n-    __ BIND(is_long);\n-    __ movq(Address(c_rarg0, 0), rax);\n-    __ jmp(exit);\n+  \/\/ handle return types different from T_INT\n+  __ BIND(is_long);\n+  __ movq(Address(c_rarg0, 0), rax);\n+  __ jmp(exit);\n@@ -432,3 +429,3 @@\n-    __ BIND(is_float);\n-    __ movflt(Address(c_rarg0, 0), xmm0);\n-    __ jmp(exit);\n+  __ BIND(is_float);\n+  __ movflt(Address(c_rarg0, 0), xmm0);\n+  __ jmp(exit);\n@@ -436,3 +433,3 @@\n-    __ BIND(is_double);\n-    __ movdbl(Address(c_rarg0, 0), xmm0);\n-    __ jmp(exit);\n+  __ BIND(is_double);\n+  __ movdbl(Address(c_rarg0, 0), xmm0);\n+  __ jmp(exit);\n@@ -440,2 +437,2 @@\n-    return start;\n-  }\n+  return start;\n+}\n@@ -443,11 +440,11 @@\n-  \/\/ Return point for a Java call if there's an exception thrown in\n-  \/\/ Java code.  The exception is caught and transformed into a\n-  \/\/ pending exception stored in JavaThread that can be tested from\n-  \/\/ within the VM.\n-  \/\/\n-  \/\/ Note: Usually the parameters are removed by the callee. In case\n-  \/\/ of an exception crossing an activation frame boundary, that is\n-  \/\/ not the case if the callee is compiled code => need to setup the\n-  \/\/ rsp.\n-  \/\/\n-  \/\/ rax: exception oop\n+\/\/ Return point for a Java call if there's an exception thrown in\n+\/\/ Java code.  The exception is caught and transformed into a\n+\/\/ pending exception stored in JavaThread that can be tested from\n+\/\/ within the VM.\n+\/\/\n+\/\/ Note: Usually the parameters are removed by the callee. In case\n+\/\/ of an exception crossing an activation frame boundary, that is\n+\/\/ not the case if the callee is compiled code => need to setup the\n+\/\/ rsp.\n+\/\/\n+\/\/ rax: exception oop\n@@ -455,3 +452,3 @@\n-  address generate_catch_exception() {\n-    StubCodeMark mark(this, \"StubRoutines\", \"catch_exception\");\n-    address start = __ pc();\n+address StubGenerator::generate_catch_exception() {\n+  StubCodeMark mark(this, \"StubRoutines\", \"catch_exception\");\n+  address start = __ pc();\n@@ -459,3 +456,3 @@\n-    \/\/ same as in generate_call_stub():\n-    const Address rsp_after_call(rbp, rsp_after_call_off * wordSize);\n-    const Address thread        (rbp, thread_off         * wordSize);\n+  \/\/ same as in generate_call_stub():\n+  const Address rsp_after_call(rbp, rsp_after_call_off * wordSize);\n+  const Address thread        (rbp, thread_off         * wordSize);\n@@ -464,17 +461,17 @@\n-    \/\/ verify that threads correspond\n-    {\n-      Label L1, L2, L3;\n-      __ cmpptr(r15_thread, thread);\n-      __ jcc(Assembler::equal, L1);\n-      __ stop(\"StubRoutines::catch_exception: r15_thread is corrupted\");\n-      __ bind(L1);\n-      __ get_thread(rbx);\n-      __ cmpptr(r15_thread, thread);\n-      __ jcc(Assembler::equal, L2);\n-      __ stop(\"StubRoutines::catch_exception: r15_thread is modified by call\");\n-      __ bind(L2);\n-      __ cmpptr(r15_thread, rbx);\n-      __ jcc(Assembler::equal, L3);\n-      __ stop(\"StubRoutines::catch_exception: threads must correspond\");\n-      __ bind(L3);\n-    }\n+  \/\/ verify that threads correspond\n+  {\n+    Label L1, L2, L3;\n+    __ cmpptr(r15_thread, thread);\n+    __ jcc(Assembler::equal, L1);\n+    __ stop(\"StubRoutines::catch_exception: r15_thread is corrupted\");\n+    __ bind(L1);\n+    __ get_thread(rbx);\n+    __ cmpptr(r15_thread, thread);\n+    __ jcc(Assembler::equal, L2);\n+    __ stop(\"StubRoutines::catch_exception: r15_thread is modified by call\");\n+    __ bind(L2);\n+    __ cmpptr(r15_thread, rbx);\n+    __ jcc(Assembler::equal, L3);\n+    __ stop(\"StubRoutines::catch_exception: threads must correspond\");\n+    __ bind(L3);\n+  }\n@@ -483,2 +480,2 @@\n-    \/\/ set pending exception\n-    __ verify_oop(rax);\n+  \/\/ set pending exception\n+  __ verify_oop(rax);\n@@ -486,4 +483,4 @@\n-    __ movptr(Address(r15_thread, Thread::pending_exception_offset()), rax);\n-    __ lea(rscratch1, ExternalAddress((address)__FILE__));\n-    __ movptr(Address(r15_thread, Thread::exception_file_offset()), rscratch1);\n-    __ movl(Address(r15_thread, Thread::exception_line_offset()), (int)  __LINE__);\n+  __ movptr(Address(r15_thread, Thread::pending_exception_offset()), rax);\n+  __ lea(rscratch1, ExternalAddress((address)__FILE__));\n+  __ movptr(Address(r15_thread, Thread::exception_file_offset()), rscratch1);\n+  __ movl(Address(r15_thread, Thread::exception_line_offset()), (int)  __LINE__);\n@@ -491,4 +488,4 @@\n-    \/\/ complete return to VM\n-    assert(StubRoutines::_call_stub_return_address != NULL,\n-           \"_call_stub_return_address must have been generated before\");\n-    __ jump(RuntimeAddress(StubRoutines::_call_stub_return_address));\n+  \/\/ complete return to VM\n+  assert(StubRoutines::_call_stub_return_address != NULL,\n+         \"_call_stub_return_address must have been generated before\");\n+  __ jump(RuntimeAddress(StubRoutines::_call_stub_return_address));\n@@ -496,2 +493,2 @@\n-    return start;\n-  }\n+  return start;\n+}\n@@ -499,10 +496,10 @@\n-  \/\/ Continuation point for runtime calls returning with a pending\n-  \/\/ exception.  The pending exception check happened in the runtime\n-  \/\/ or native call stub.  The pending exception in Thread is\n-  \/\/ converted into a Java-level exception.\n-  \/\/\n-  \/\/ Contract with Java-level exception handlers:\n-  \/\/ rax: exception\n-  \/\/ rdx: throwing pc\n-  \/\/\n-  \/\/ NOTE: At entry of this stub, exception-pc must be on stack !!\n+\/\/ Continuation point for runtime calls returning with a pending\n+\/\/ exception.  The pending exception check happened in the runtime\n+\/\/ or native call stub.  The pending exception in Thread is\n+\/\/ converted into a Java-level exception.\n+\/\/\n+\/\/ Contract with Java-level exception handlers:\n+\/\/ rax: exception\n+\/\/ rdx: throwing pc\n+\/\/\n+\/\/ NOTE: At entry of this stub, exception-pc must be on stack !!\n@@ -510,3 +507,3 @@\n-  address generate_forward_exception() {\n-    StubCodeMark mark(this, \"StubRoutines\", \"forward exception\");\n-    address start = __ pc();\n+address StubGenerator::generate_forward_exception() {\n+  StubCodeMark mark(this, \"StubRoutines\", \"forward exception\");\n+  address start = __ pc();\n@@ -514,8 +511,8 @@\n-    \/\/ Upon entry, the sp points to the return address returning into\n-    \/\/ Java (interpreted or compiled) code; i.e., the return address\n-    \/\/ becomes the throwing pc.\n-    \/\/\n-    \/\/ Arguments pushed before the runtime call are still on the stack\n-    \/\/ but the exception handler will reset the stack pointer ->\n-    \/\/ ignore them.  A potential result in registers can be ignored as\n-    \/\/ well.\n+  \/\/ Upon entry, the sp points to the return address returning into\n+  \/\/ Java (interpreted or compiled) code; i.e., the return address\n+  \/\/ becomes the throwing pc.\n+  \/\/\n+  \/\/ Arguments pushed before the runtime call are still on the stack\n+  \/\/ but the exception handler will reset the stack pointer ->\n+  \/\/ ignore them.  A potential result in registers can be ignored as\n+  \/\/ well.\n@@ -524,8 +521,8 @@\n-    \/\/ make sure this code is only executed if there is a pending exception\n-    {\n-      Label L;\n-      __ cmpptr(Address(r15_thread, Thread::pending_exception_offset()), NULL_WORD);\n-      __ jcc(Assembler::notEqual, L);\n-      __ stop(\"StubRoutines::forward exception: no pending exception (1)\");\n-      __ bind(L);\n-    }\n+  \/\/ make sure this code is only executed if there is a pending exception\n+  {\n+    Label L;\n+    __ cmpptr(Address(r15_thread, Thread::pending_exception_offset()), NULL_WORD);\n+    __ jcc(Assembler::notEqual, L);\n+    __ stop(\"StubRoutines::forward exception: no pending exception (1)\");\n+    __ bind(L);\n+  }\n@@ -534,7 +531,7 @@\n-    \/\/ compute exception handler into rbx\n-    __ movptr(c_rarg0, Address(rsp, 0));\n-    BLOCK_COMMENT(\"call exception_handler_for_return_address\");\n-    __ call_VM_leaf(CAST_FROM_FN_PTR(address,\n-                         SharedRuntime::exception_handler_for_return_address),\n-                    r15_thread, c_rarg0);\n-    __ mov(rbx, rax);\n+  \/\/ compute exception handler into rbx\n+  __ movptr(c_rarg0, Address(rsp, 0));\n+  BLOCK_COMMENT(\"call exception_handler_for_return_address\");\n+  __ call_VM_leaf(CAST_FROM_FN_PTR(address,\n+                       SharedRuntime::exception_handler_for_return_address),\n+                  r15_thread, c_rarg0);\n+  __ mov(rbx, rax);\n@@ -542,4 +539,4 @@\n-    \/\/ setup rax & rdx, remove return address & clear pending exception\n-    __ pop(rdx);\n-    __ movptr(rax, Address(r15_thread, Thread::pending_exception_offset()));\n-    __ movptr(Address(r15_thread, Thread::pending_exception_offset()), NULL_WORD);\n+  \/\/ setup rax & rdx, remove return address & clear pending exception\n+  __ pop(rdx);\n+  __ movptr(rax, Address(r15_thread, Thread::pending_exception_offset()));\n+  __ movptr(Address(r15_thread, Thread::pending_exception_offset()), NULL_WORD);\n@@ -548,8 +545,8 @@\n-    \/\/ make sure exception is set\n-    {\n-      Label L;\n-      __ testptr(rax, rax);\n-      __ jcc(Assembler::notEqual, L);\n-      __ stop(\"StubRoutines::forward exception: no pending exception (2)\");\n-      __ bind(L);\n-    }\n+  \/\/ make sure exception is set\n+  {\n+    Label L;\n+    __ testptr(rax, rax);\n+    __ jcc(Assembler::notEqual, L);\n+    __ stop(\"StubRoutines::forward exception: no pending exception (2)\");\n+    __ bind(L);\n+  }\n@@ -558,9 +555,6 @@\n-    \/\/ continue at exception handler (return address removed)\n-    \/\/ rax: exception\n-    \/\/ rbx: exception handler\n-    \/\/ rdx: throwing pc\n-    __ verify_oop(rax);\n-    __ jmp(rbx);\n-\n-    return start;\n-  }\n+  \/\/ continue at exception handler (return address removed)\n+  \/\/ rax: exception\n+  \/\/ rbx: exception handler\n+  \/\/ rdx: throwing pc\n+  __ verify_oop(rax);\n+  __ jmp(rbx);\n@@ -568,10 +562,2 @@\n-  \/\/ Support for intptr_t OrderAccess::fence()\n-  \/\/\n-  \/\/ Arguments :\n-  \/\/\n-  \/\/ Result:\n-  address generate_orderaccess_fence() {\n-    StubCodeMark mark(this, \"StubRoutines\", \"orderaccess_fence\");\n-    address start = __ pc();\n-    __ membar(Assembler::StoreLoad);\n-    __ ret(0);\n+  return start;\n+}\n@@ -579,2 +565,8 @@\n-    return start;\n-  }\n+\/\/ Support for intptr_t OrderAccess::fence()\n+\/\/\n+\/\/ Arguments :\n+\/\/\n+\/\/ Result:\n+address StubGenerator::generate_orderaccess_fence() {\n+  StubCodeMark mark(this, \"StubRoutines\", \"orderaccess_fence\");\n+  address start = __ pc();\n@@ -582,0 +574,2 @@\n+  __ membar(Assembler::StoreLoad);\n+  __ ret(0);\n@@ -583,11 +577,2 @@\n-  \/\/ Support for intptr_t get_previous_sp()\n-  \/\/\n-  \/\/ This routine is used to find the previous stack pointer for the\n-  \/\/ caller.\n-  address generate_get_previous_sp() {\n-    StubCodeMark mark(this, \"StubRoutines\", \"get_previous_sp\");\n-    address start = __ pc();\n-\n-    __ movptr(rax, rsp);\n-    __ addptr(rax, 8); \/\/ return address is at the top of the stack.\n-    __ ret(0);\n+  return start;\n+}\n@@ -595,2 +580,0 @@\n-    return start;\n-  }\n@@ -598,32 +581,7 @@\n-  \/\/----------------------------------------------------------------------------------------------------\n-  \/\/ Support for void verify_mxcsr()\n-  \/\/\n-  \/\/ This routine is used with -Xcheck:jni to verify that native\n-  \/\/ JNI code does not return to Java code without restoring the\n-  \/\/ MXCSR register to our expected state.\n-\n-  address generate_verify_mxcsr() {\n-    StubCodeMark mark(this, \"StubRoutines\", \"verify_mxcsr\");\n-    address start = __ pc();\n-\n-    const Address mxcsr_save(rsp, 0);\n-\n-    if (CheckJNICalls) {\n-      Label ok_ret;\n-      ExternalAddress mxcsr_std(StubRoutines::x86::addr_mxcsr_std());\n-      __ push(rax);\n-      __ subptr(rsp, wordSize);      \/\/ allocate a temp location\n-      __ stmxcsr(mxcsr_save);\n-      __ movl(rax, mxcsr_save);\n-      __ andl(rax, MXCSR_MASK);    \/\/ Only check control and mask bits\n-      __ cmp32(rax, mxcsr_std, rscratch1);\n-      __ jcc(Assembler::equal, ok_ret);\n-\n-      __ warn(\"MXCSR changed by native JNI code, use -XX:+RestoreMXCSROnJNICall\");\n-\n-      __ ldmxcsr(mxcsr_std, rscratch1);\n-\n-      __ bind(ok_ret);\n-      __ addptr(rsp, wordSize);\n-      __ pop(rax);\n-    }\n+\/\/ Support for intptr_t get_previous_sp()\n+\/\/\n+\/\/ This routine is used to find the previous stack pointer for the\n+\/\/ caller.\n+address StubGenerator::generate_get_previous_sp() {\n+  StubCodeMark mark(this, \"StubRoutines\", \"get_previous_sp\");\n+  address start = __ pc();\n@@ -631,1 +589,3 @@\n-    __ ret(0);\n+  __ movptr(rax, rsp);\n+  __ addptr(rax, 8); \/\/ return address is at the top of the stack.\n+  __ ret(0);\n@@ -633,2 +593,2 @@\n-    return start;\n-  }\n+  return start;\n+}\n@@ -636,3 +596,6 @@\n-  address generate_f2i_fixup() {\n-    StubCodeMark mark(this, \"StubRoutines\", \"f2i_fixup\");\n-    Address inout(rsp, 5 * wordSize); \/\/ return address + 4 saves\n+\/\/----------------------------------------------------------------------------------------------------\n+\/\/ Support for void verify_mxcsr()\n+\/\/\n+\/\/ This routine is used with -Xcheck:jni to verify that native\n+\/\/ JNI code does not return to Java code without restoring the\n+\/\/ MXCSR register to our expected state.\n@@ -640,1 +603,3 @@\n-    address start = __ pc();\n+address StubGenerator::generate_verify_mxcsr() {\n+  StubCodeMark mark(this, \"StubRoutines\", \"verify_mxcsr\");\n+  address start = __ pc();\n@@ -642,1 +607,1 @@\n-    Label L;\n+  const Address mxcsr_save(rsp, 0);\n@@ -644,0 +609,3 @@\n+  if (CheckJNICalls) {\n+    Label ok_ret;\n+    ExternalAddress mxcsr_std(StubRoutines::x86::addr_mxcsr_std());\n@@ -645,15 +613,6 @@\n-    __ push(c_rarg3);\n-    __ push(c_rarg2);\n-    __ push(c_rarg1);\n-\n-    __ movl(rax, 0x7f800000);\n-    __ xorl(c_rarg3, c_rarg3);\n-    __ movl(c_rarg2, inout);\n-    __ movl(c_rarg1, c_rarg2);\n-    __ andl(c_rarg1, 0x7fffffff);\n-    __ cmpl(rax, c_rarg1); \/\/ NaN? -> 0\n-    __ jcc(Assembler::negative, L);\n-    __ testl(c_rarg2, c_rarg2); \/\/ signed ? min_jint : max_jint\n-    __ movl(c_rarg3, 0x80000000);\n-    __ movl(rax, 0x7fffffff);\n-    __ cmovl(Assembler::positive, c_rarg3, rax);\n+    __ subptr(rsp, wordSize);      \/\/ allocate a temp location\n+    __ stmxcsr(mxcsr_save);\n+    __ movl(rax, mxcsr_save);\n+    __ andl(rax, 0xFFC0); \/\/ Mask out any pending exceptions (only check control and mask bits)\n+    __ cmp32(rax, mxcsr_std, rscratch1);\n+    __ jcc(Assembler::equal, ok_ret);\n@@ -661,2 +620,1 @@\n-    __ bind(L);\n-    __ movptr(inout, c_rarg3);\n+    __ warn(\"MXCSR changed by native JNI code, use -XX:+RestoreMXCSROnJNICall\");\n@@ -664,3 +622,4 @@\n-    __ pop(c_rarg1);\n-    __ pop(c_rarg2);\n-    __ pop(c_rarg3);\n+    __ ldmxcsr(mxcsr_std, rscratch1);\n+\n+    __ bind(ok_ret);\n+    __ addptr(rsp, wordSize);\n@@ -668,0 +627,1 @@\n+  }\n@@ -669,1 +629,1 @@\n-    __ ret(0);\n+  __ ret(0);\n@@ -671,2 +631,2 @@\n-    return start;\n-  }\n+  return start;\n+}\n@@ -674,4 +634,3 @@\n-  address generate_f2l_fixup() {\n-    StubCodeMark mark(this, \"StubRoutines\", \"f2l_fixup\");\n-    Address inout(rsp, 5 * wordSize); \/\/ return address + 4 saves\n-    address start = __ pc();\n+address StubGenerator::generate_f2i_fixup() {\n+  StubCodeMark mark(this, \"StubRoutines\", \"f2i_fixup\");\n+  Address inout(rsp, 5 * wordSize); \/\/ return address + 4 saves\n@@ -679,1 +638,1 @@\n-    Label L;\n+  address start = __ pc();\n@@ -681,16 +640,1 @@\n-    __ push(rax);\n-    __ push(c_rarg3);\n-    __ push(c_rarg2);\n-    __ push(c_rarg1);\n-\n-    __ movl(rax, 0x7f800000);\n-    __ xorl(c_rarg3, c_rarg3);\n-    __ movl(c_rarg2, inout);\n-    __ movl(c_rarg1, c_rarg2);\n-    __ andl(c_rarg1, 0x7fffffff);\n-    __ cmpl(rax, c_rarg1); \/\/ NaN? -> 0\n-    __ jcc(Assembler::negative, L);\n-    __ testl(c_rarg2, c_rarg2); \/\/ signed ? min_jlong : max_jlong\n-    __ mov64(c_rarg3, 0x8000000000000000);\n-    __ mov64(rax, 0x7fffffffffffffff);\n-    __ cmov(Assembler::positive, c_rarg3, rax);\n+  Label L;\n@@ -698,2 +642,4 @@\n-    __ bind(L);\n-    __ movptr(inout, c_rarg3);\n+  __ push(rax);\n+  __ push(c_rarg3);\n+  __ push(c_rarg2);\n+  __ push(c_rarg1);\n@@ -701,4 +647,11 @@\n-    __ pop(c_rarg1);\n-    __ pop(c_rarg2);\n-    __ pop(c_rarg3);\n-    __ pop(rax);\n+  __ movl(rax, 0x7f800000);\n+  __ xorl(c_rarg3, c_rarg3);\n+  __ movl(c_rarg2, inout);\n+  __ movl(c_rarg1, c_rarg2);\n+  __ andl(c_rarg1, 0x7fffffff);\n+  __ cmpl(rax, c_rarg1); \/\/ NaN? -> 0\n+  __ jcc(Assembler::negative, L);\n+  __ testl(c_rarg2, c_rarg2); \/\/ signed ? min_jint : max_jint\n+  __ movl(c_rarg3, 0x80000000);\n+  __ movl(rax, 0x7fffffff);\n+  __ cmovl(Assembler::positive, c_rarg3, rax);\n@@ -706,1 +659,2 @@\n-    __ ret(0);\n+  __ bind(L);\n+  __ movptr(inout, c_rarg3);\n@@ -708,2 +662,4 @@\n-    return start;\n-  }\n+  __ pop(c_rarg1);\n+  __ pop(c_rarg2);\n+  __ pop(c_rarg3);\n+  __ pop(rax);\n@@ -711,3 +667,1 @@\n-  address generate_d2i_fixup() {\n-    StubCodeMark mark(this, \"StubRoutines\", \"d2i_fixup\");\n-    Address inout(rsp, 6 * wordSize); \/\/ return address + 5 saves\n+  __ ret(0);\n@@ -715,1 +669,2 @@\n-    address start = __ pc();\n+  return start;\n+}\n@@ -717,1 +672,4 @@\n-    Label L;\n+address StubGenerator::generate_f2l_fixup() {\n+  StubCodeMark mark(this, \"StubRoutines\", \"f2l_fixup\");\n+  Address inout(rsp, 5 * wordSize); \/\/ return address + 4 saves\n+  address start = __ pc();\n@@ -719,24 +677,1 @@\n-    __ push(rax);\n-    __ push(c_rarg3);\n-    __ push(c_rarg2);\n-    __ push(c_rarg1);\n-    __ push(c_rarg0);\n-\n-    __ movl(rax, 0x7ff00000);\n-    __ movq(c_rarg2, inout);\n-    __ movl(c_rarg3, c_rarg2);\n-    __ mov(c_rarg1, c_rarg2);\n-    __ mov(c_rarg0, c_rarg2);\n-    __ negl(c_rarg3);\n-    __ shrptr(c_rarg1, 0x20);\n-    __ orl(c_rarg3, c_rarg2);\n-    __ andl(c_rarg1, 0x7fffffff);\n-    __ xorl(c_rarg2, c_rarg2);\n-    __ shrl(c_rarg3, 0x1f);\n-    __ orl(c_rarg1, c_rarg3);\n-    __ cmpl(rax, c_rarg1);\n-    __ jcc(Assembler::negative, L); \/\/ NaN -> 0\n-    __ testptr(c_rarg0, c_rarg0); \/\/ signed ? min_jint : max_jint\n-    __ movl(c_rarg2, 0x80000000);\n-    __ movl(rax, 0x7fffffff);\n-    __ cmov(Assembler::positive, c_rarg2, rax);\n+  Label L;\n@@ -744,2 +679,4 @@\n-    __ bind(L);\n-    __ movptr(inout, c_rarg2);\n+  __ push(rax);\n+  __ push(c_rarg3);\n+  __ push(c_rarg2);\n+  __ push(c_rarg1);\n@@ -747,5 +684,11 @@\n-    __ pop(c_rarg0);\n-    __ pop(c_rarg1);\n-    __ pop(c_rarg2);\n-    __ pop(c_rarg3);\n-    __ pop(rax);\n+  __ movl(rax, 0x7f800000);\n+  __ xorl(c_rarg3, c_rarg3);\n+  __ movl(c_rarg2, inout);\n+  __ movl(c_rarg1, c_rarg2);\n+  __ andl(c_rarg1, 0x7fffffff);\n+  __ cmpl(rax, c_rarg1); \/\/ NaN? -> 0\n+  __ jcc(Assembler::negative, L);\n+  __ testl(c_rarg2, c_rarg2); \/\/ signed ? min_jlong : max_jlong\n+  __ mov64(c_rarg3, 0x8000000000000000);\n+  __ mov64(rax, 0x7fffffffffffffff);\n+  __ cmov(Assembler::positive, c_rarg3, rax);\n@@ -753,1 +696,2 @@\n-    __ ret(0);\n+  __ bind(L);\n+  __ movptr(inout, c_rarg3);\n@@ -755,2 +699,4 @@\n-    return start;\n-  }\n+  __ pop(c_rarg1);\n+  __ pop(c_rarg2);\n+  __ pop(c_rarg3);\n+  __ pop(rax);\n@@ -758,3 +704,1 @@\n-  address generate_d2l_fixup() {\n-    StubCodeMark mark(this, \"StubRoutines\", \"d2l_fixup\");\n-    Address inout(rsp, 6 * wordSize); \/\/ return address + 5 saves\n+  __ ret(0);\n@@ -762,1 +706,2 @@\n-    address start = __ pc();\n+  return start;\n+}\n@@ -764,1 +709,43 @@\n-    Label L;\n+address StubGenerator::generate_d2i_fixup() {\n+  StubCodeMark mark(this, \"StubRoutines\", \"d2i_fixup\");\n+  Address inout(rsp, 6 * wordSize); \/\/ return address + 5 saves\n+\n+  address start = __ pc();\n+\n+  Label L;\n+\n+  __ push(rax);\n+  __ push(c_rarg3);\n+  __ push(c_rarg2);\n+  __ push(c_rarg1);\n+  __ push(c_rarg0);\n+\n+  __ movl(rax, 0x7ff00000);\n+  __ movq(c_rarg2, inout);\n+  __ movl(c_rarg3, c_rarg2);\n+  __ mov(c_rarg1, c_rarg2);\n+  __ mov(c_rarg0, c_rarg2);\n+  __ negl(c_rarg3);\n+  __ shrptr(c_rarg1, 0x20);\n+  __ orl(c_rarg3, c_rarg2);\n+  __ andl(c_rarg1, 0x7fffffff);\n+  __ xorl(c_rarg2, c_rarg2);\n+  __ shrl(c_rarg3, 0x1f);\n+  __ orl(c_rarg1, c_rarg3);\n+  __ cmpl(rax, c_rarg1);\n+  __ jcc(Assembler::negative, L); \/\/ NaN -> 0\n+  __ testptr(c_rarg0, c_rarg0); \/\/ signed ? min_jint : max_jint\n+  __ movl(c_rarg2, 0x80000000);\n+  __ movl(rax, 0x7fffffff);\n+  __ cmov(Assembler::positive, c_rarg2, rax);\n+\n+  __ bind(L);\n+  __ movptr(inout, c_rarg2);\n+\n+  __ pop(c_rarg0);\n+  __ pop(c_rarg1);\n+  __ pop(c_rarg2);\n+  __ pop(c_rarg3);\n+  __ pop(rax);\n+\n+  __ ret(0);\n@@ -766,24 +753,2 @@\n-    __ push(rax);\n-    __ push(c_rarg3);\n-    __ push(c_rarg2);\n-    __ push(c_rarg1);\n-    __ push(c_rarg0);\n-\n-    __ movl(rax, 0x7ff00000);\n-    __ movq(c_rarg2, inout);\n-    __ movl(c_rarg3, c_rarg2);\n-    __ mov(c_rarg1, c_rarg2);\n-    __ mov(c_rarg0, c_rarg2);\n-    __ negl(c_rarg3);\n-    __ shrptr(c_rarg1, 0x20);\n-    __ orl(c_rarg3, c_rarg2);\n-    __ andl(c_rarg1, 0x7fffffff);\n-    __ xorl(c_rarg2, c_rarg2);\n-    __ shrl(c_rarg3, 0x1f);\n-    __ orl(c_rarg1, c_rarg3);\n-    __ cmpl(rax, c_rarg1);\n-    __ jcc(Assembler::negative, L); \/\/ NaN -> 0\n-    __ testq(c_rarg0, c_rarg0); \/\/ signed ? min_jlong : max_jlong\n-    __ mov64(c_rarg2, 0x8000000000000000);\n-    __ mov64(rax, 0x7fffffffffffffff);\n-    __ cmovq(Assembler::positive, c_rarg2, rax);\n+  return start;\n+}\n@@ -791,2 +756,43 @@\n-    __ bind(L);\n-    __ movq(inout, c_rarg2);\n+address StubGenerator::generate_d2l_fixup() {\n+  StubCodeMark mark(this, \"StubRoutines\", \"d2l_fixup\");\n+  Address inout(rsp, 6 * wordSize); \/\/ return address + 5 saves\n+\n+  address start = __ pc();\n+\n+  Label L;\n+\n+  __ push(rax);\n+  __ push(c_rarg3);\n+  __ push(c_rarg2);\n+  __ push(c_rarg1);\n+  __ push(c_rarg0);\n+\n+  __ movl(rax, 0x7ff00000);\n+  __ movq(c_rarg2, inout);\n+  __ movl(c_rarg3, c_rarg2);\n+  __ mov(c_rarg1, c_rarg2);\n+  __ mov(c_rarg0, c_rarg2);\n+  __ negl(c_rarg3);\n+  __ shrptr(c_rarg1, 0x20);\n+  __ orl(c_rarg3, c_rarg2);\n+  __ andl(c_rarg1, 0x7fffffff);\n+  __ xorl(c_rarg2, c_rarg2);\n+  __ shrl(c_rarg3, 0x1f);\n+  __ orl(c_rarg1, c_rarg3);\n+  __ cmpl(rax, c_rarg1);\n+  __ jcc(Assembler::negative, L); \/\/ NaN -> 0\n+  __ testq(c_rarg0, c_rarg0); \/\/ signed ? min_jlong : max_jlong\n+  __ mov64(c_rarg2, 0x8000000000000000);\n+  __ mov64(rax, 0x7fffffffffffffff);\n+  __ cmovq(Assembler::positive, c_rarg2, rax);\n+\n+  __ bind(L);\n+  __ movq(inout, c_rarg2);\n+\n+  __ pop(c_rarg0);\n+  __ pop(c_rarg1);\n+  __ pop(c_rarg2);\n+  __ pop(c_rarg3);\n+  __ pop(rax);\n+\n+  __ ret(0);\n@@ -794,5 +800,2 @@\n-    __ pop(c_rarg0);\n-    __ pop(c_rarg1);\n-    __ pop(c_rarg2);\n-    __ pop(c_rarg3);\n-    __ pop(rax);\n+  return start;\n+}\n@@ -800,1 +803,4 @@\n-    __ ret(0);\n+address StubGenerator::generate_count_leading_zeros_lut(const char *stub_name) {\n+  __ align64();\n+  StubCodeMark mark(this, \"StubRoutines\", stub_name);\n+  address start = __ pc();\n@@ -802,2 +808,8 @@\n-    return start;\n-  }\n+  __ emit_data64(0x0101010102020304, relocInfo::none);\n+  __ emit_data64(0x0000000000000000, relocInfo::none);\n+  __ emit_data64(0x0101010102020304, relocInfo::none);\n+  __ emit_data64(0x0000000000000000, relocInfo::none);\n+  __ emit_data64(0x0101010102020304, relocInfo::none);\n+  __ emit_data64(0x0000000000000000, relocInfo::none);\n+  __ emit_data64(0x0101010102020304, relocInfo::none);\n+  __ emit_data64(0x0000000000000000, relocInfo::none);\n@@ -805,208 +817,2 @@\n-  address generate_count_leading_zeros_lut(const char *stub_name) {\n-    __ align64();\n-    StubCodeMark mark(this, \"StubRoutines\", stub_name);\n-    address start = __ pc();\n-    __ emit_data64(0x0101010102020304, relocInfo::none);\n-    __ emit_data64(0x0000000000000000, relocInfo::none);\n-    __ emit_data64(0x0101010102020304, relocInfo::none);\n-    __ emit_data64(0x0000000000000000, relocInfo::none);\n-    __ emit_data64(0x0101010102020304, relocInfo::none);\n-    __ emit_data64(0x0000000000000000, relocInfo::none);\n-    __ emit_data64(0x0101010102020304, relocInfo::none);\n-    __ emit_data64(0x0000000000000000, relocInfo::none);\n-    return start;\n-  }\n-\n-  address generate_popcount_avx_lut(const char *stub_name) {\n-    __ align64();\n-    StubCodeMark mark(this, \"StubRoutines\", stub_name);\n-    address start = __ pc();\n-    __ emit_data64(0x0302020102010100, relocInfo::none);\n-    __ emit_data64(0x0403030203020201, relocInfo::none);\n-    __ emit_data64(0x0302020102010100, relocInfo::none);\n-    __ emit_data64(0x0403030203020201, relocInfo::none);\n-    __ emit_data64(0x0302020102010100, relocInfo::none);\n-    __ emit_data64(0x0403030203020201, relocInfo::none);\n-    __ emit_data64(0x0302020102010100, relocInfo::none);\n-    __ emit_data64(0x0403030203020201, relocInfo::none);\n-    return start;\n-  }\n-\n-  address generate_iota_indices(const char *stub_name) {\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", stub_name);\n-    address start = __ pc();\n-    __ emit_data64(0x0706050403020100, relocInfo::none);\n-    __ emit_data64(0x0F0E0D0C0B0A0908, relocInfo::none);\n-    __ emit_data64(0x1716151413121110, relocInfo::none);\n-    __ emit_data64(0x1F1E1D1C1B1A1918, relocInfo::none);\n-    __ emit_data64(0x2726252423222120, relocInfo::none);\n-    __ emit_data64(0x2F2E2D2C2B2A2928, relocInfo::none);\n-    __ emit_data64(0x3736353433323130, relocInfo::none);\n-    __ emit_data64(0x3F3E3D3C3B3A3938, relocInfo::none);\n-    return start;\n-  }\n-\n-  address generate_vector_reverse_bit_lut(const char *stub_name) {\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", stub_name);\n-    address start = __ pc();\n-    __ emit_data64(0x0E060A020C040800, relocInfo::none);\n-    __ emit_data64(0x0F070B030D050901, relocInfo::none);\n-    __ emit_data64(0x0E060A020C040800, relocInfo::none);\n-    __ emit_data64(0x0F070B030D050901, relocInfo::none);\n-    __ emit_data64(0x0E060A020C040800, relocInfo::none);\n-    __ emit_data64(0x0F070B030D050901, relocInfo::none);\n-    __ emit_data64(0x0E060A020C040800, relocInfo::none);\n-    __ emit_data64(0x0F070B030D050901, relocInfo::none);\n-    return start;\n-  }\n-\n-  address generate_vector_reverse_byte_perm_mask_long(const char *stub_name) {\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", stub_name);\n-    address start = __ pc();\n-    __ emit_data64(0x0001020304050607, relocInfo::none);\n-    __ emit_data64(0x08090A0B0C0D0E0F, relocInfo::none);\n-    __ emit_data64(0x0001020304050607, relocInfo::none);\n-    __ emit_data64(0x08090A0B0C0D0E0F, relocInfo::none);\n-    __ emit_data64(0x0001020304050607, relocInfo::none);\n-    __ emit_data64(0x08090A0B0C0D0E0F, relocInfo::none);\n-    __ emit_data64(0x0001020304050607, relocInfo::none);\n-    __ emit_data64(0x08090A0B0C0D0E0F, relocInfo::none);\n-    return start;\n-  }\n-\n-  address generate_vector_reverse_byte_perm_mask_int(const char *stub_name) {\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", stub_name);\n-    address start = __ pc();\n-    __ emit_data64(0x0405060700010203, relocInfo::none);\n-    __ emit_data64(0x0C0D0E0F08090A0B, relocInfo::none);\n-    __ emit_data64(0x0405060700010203, relocInfo::none);\n-    __ emit_data64(0x0C0D0E0F08090A0B, relocInfo::none);\n-    __ emit_data64(0x0405060700010203, relocInfo::none);\n-    __ emit_data64(0x0C0D0E0F08090A0B, relocInfo::none);\n-    __ emit_data64(0x0405060700010203, relocInfo::none);\n-    __ emit_data64(0x0C0D0E0F08090A0B, relocInfo::none);\n-    return start;\n-  }\n-\n-  address generate_vector_reverse_byte_perm_mask_short(const char *stub_name) {\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", stub_name);\n-    address start = __ pc();\n-    __ emit_data64(0x0607040502030001, relocInfo::none);\n-    __ emit_data64(0x0E0F0C0D0A0B0809, relocInfo::none);\n-    __ emit_data64(0x0607040502030001, relocInfo::none);\n-    __ emit_data64(0x0E0F0C0D0A0B0809, relocInfo::none);\n-    __ emit_data64(0x0607040502030001, relocInfo::none);\n-    __ emit_data64(0x0E0F0C0D0A0B0809, relocInfo::none);\n-    __ emit_data64(0x0607040502030001, relocInfo::none);\n-    __ emit_data64(0x0E0F0C0D0A0B0809, relocInfo::none);\n-    return start;\n-  }\n-\n-  address generate_vector_byte_shuffle_mask(const char *stub_name) {\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", stub_name);\n-    address start = __ pc();\n-    __ emit_data64(0x7070707070707070, relocInfo::none);\n-    __ emit_data64(0x7070707070707070, relocInfo::none);\n-    __ emit_data64(0xF0F0F0F0F0F0F0F0, relocInfo::none);\n-    __ emit_data64(0xF0F0F0F0F0F0F0F0, relocInfo::none);\n-    return start;\n-  }\n-\n-  address generate_fp_mask(const char *stub_name, int64_t mask) {\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", stub_name);\n-    address start = __ pc();\n-\n-    __ emit_data64( mask, relocInfo::none );\n-    __ emit_data64( mask, relocInfo::none );\n-\n-    return start;\n-  }\n-\n-  address generate_vector_mask(const char *stub_name, int64_t mask) {\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", stub_name);\n-    address start = __ pc();\n-\n-    __ emit_data64(mask, relocInfo::none);\n-    __ emit_data64(mask, relocInfo::none);\n-    __ emit_data64(mask, relocInfo::none);\n-    __ emit_data64(mask, relocInfo::none);\n-    __ emit_data64(mask, relocInfo::none);\n-    __ emit_data64(mask, relocInfo::none);\n-    __ emit_data64(mask, relocInfo::none);\n-    __ emit_data64(mask, relocInfo::none);\n-\n-    return start;\n-  }\n-\n-  address generate_vector_byte_perm_mask(const char *stub_name) {\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", stub_name);\n-    address start = __ pc();\n-\n-    __ emit_data64(0x0000000000000001, relocInfo::none);\n-    __ emit_data64(0x0000000000000003, relocInfo::none);\n-    __ emit_data64(0x0000000000000005, relocInfo::none);\n-    __ emit_data64(0x0000000000000007, relocInfo::none);\n-    __ emit_data64(0x0000000000000000, relocInfo::none);\n-    __ emit_data64(0x0000000000000002, relocInfo::none);\n-    __ emit_data64(0x0000000000000004, relocInfo::none);\n-    __ emit_data64(0x0000000000000006, relocInfo::none);\n-\n-    return start;\n-  }\n-\n-  address generate_vector_fp_mask(const char *stub_name, int64_t mask) {\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", stub_name);\n-    address start = __ pc();\n-\n-    __ emit_data64(mask, relocInfo::none);\n-    __ emit_data64(mask, relocInfo::none);\n-    __ emit_data64(mask, relocInfo::none);\n-    __ emit_data64(mask, relocInfo::none);\n-    __ emit_data64(mask, relocInfo::none);\n-    __ emit_data64(mask, relocInfo::none);\n-    __ emit_data64(mask, relocInfo::none);\n-    __ emit_data64(mask, relocInfo::none);\n-\n-    return start;\n-  }\n-\n-  address generate_vector_custom_i32(const char *stub_name, Assembler::AvxVectorLen len,\n-                                     int32_t val0, int32_t val1, int32_t val2, int32_t val3,\n-                                     int32_t val4 = 0, int32_t val5 = 0, int32_t val6 = 0, int32_t val7 = 0,\n-                                     int32_t val8 = 0, int32_t val9 = 0, int32_t val10 = 0, int32_t val11 = 0,\n-                                     int32_t val12 = 0, int32_t val13 = 0, int32_t val14 = 0, int32_t val15 = 0) {\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", stub_name);\n-    address start = __ pc();\n-\n-    assert(len != Assembler::AVX_NoVec, \"vector len must be specified\");\n-    __ emit_data(val0, relocInfo::none, 0);\n-    __ emit_data(val1, relocInfo::none, 0);\n-    __ emit_data(val2, relocInfo::none, 0);\n-    __ emit_data(val3, relocInfo::none, 0);\n-    if (len >= Assembler::AVX_256bit) {\n-      __ emit_data(val4, relocInfo::none, 0);\n-      __ emit_data(val5, relocInfo::none, 0);\n-      __ emit_data(val6, relocInfo::none, 0);\n-      __ emit_data(val7, relocInfo::none, 0);\n-      if (len >= Assembler::AVX_512bit) {\n-        __ emit_data(val8, relocInfo::none, 0);\n-        __ emit_data(val9, relocInfo::none, 0);\n-        __ emit_data(val10, relocInfo::none, 0);\n-        __ emit_data(val11, relocInfo::none, 0);\n-        __ emit_data(val12, relocInfo::none, 0);\n-        __ emit_data(val13, relocInfo::none, 0);\n-        __ emit_data(val14, relocInfo::none, 0);\n-        __ emit_data(val15, relocInfo::none, 0);\n-      }\n-    }\n+  return start;\n+}\n@@ -1014,2 +820,4 @@\n-    return start;\n-  }\n+address StubGenerator::generate_popcount_avx_lut(const char *stub_name) {\n+  __ align64();\n+  StubCodeMark mark(this, \"StubRoutines\", stub_name);\n+  address start = __ pc();\n@@ -1017,48 +825,8 @@\n-  \/\/ Non-destructive plausibility checks for oops\n-  \/\/\n-  \/\/ Arguments:\n-  \/\/    all args on stack!\n-  \/\/\n-  \/\/ Stack after saving c_rarg3:\n-  \/\/    [tos + 0]: saved c_rarg3\n-  \/\/    [tos + 1]: saved c_rarg2\n-  \/\/    [tos + 2]: saved r12 (several TemplateTable methods use it)\n-  \/\/    [tos + 3]: saved flags\n-  \/\/    [tos + 4]: return address\n-  \/\/  * [tos + 5]: error message (char*)\n-  \/\/  * [tos + 6]: object to verify (oop)\n-  \/\/  * [tos + 7]: saved rax - saved by caller and bashed\n-  \/\/  * [tos + 8]: saved r10 (rscratch1) - saved by caller\n-  \/\/  * = popped on exit\n-  address generate_verify_oop() {\n-    StubCodeMark mark(this, \"StubRoutines\", \"verify_oop\");\n-    address start = __ pc();\n-\n-    Label exit, error;\n-\n-    __ pushf();\n-    __ incrementl(ExternalAddress((address) StubRoutines::verify_oop_count_addr()), rscratch1);\n-\n-    __ push(r12);\n-\n-    \/\/ save c_rarg2 and c_rarg3\n-    __ push(c_rarg2);\n-    __ push(c_rarg3);\n-\n-    enum {\n-           \/\/ After previous pushes.\n-           oop_to_verify = 6 * wordSize,\n-           saved_rax     = 7 * wordSize,\n-           saved_r10     = 8 * wordSize,\n-\n-           \/\/ Before the call to MacroAssembler::debug(), see below.\n-           return_addr   = 16 * wordSize,\n-           error_msg     = 17 * wordSize\n-    };\n-\n-    \/\/ get object\n-    __ movptr(rax, Address(rsp, oop_to_verify));\n-\n-    \/\/ make sure object is 'reasonable'\n-    __ testptr(rax, rax);\n-    __ jcc(Assembler::zero, exit); \/\/ if obj is NULL it is OK\n+  __ emit_data64(0x0302020102010100, relocInfo::none);\n+  __ emit_data64(0x0403030203020201, relocInfo::none);\n+  __ emit_data64(0x0302020102010100, relocInfo::none);\n+  __ emit_data64(0x0403030203020201, relocInfo::none);\n+  __ emit_data64(0x0302020102010100, relocInfo::none);\n+  __ emit_data64(0x0403030203020201, relocInfo::none);\n+  __ emit_data64(0x0302020102010100, relocInfo::none);\n+  __ emit_data64(0x0403030203020201, relocInfo::none);\n@@ -1066,7 +834,2 @@\n-#if INCLUDE_ZGC\n-    if (UseZGC) {\n-      \/\/ Check if metadata bits indicate a bad oop\n-      __ testptr(rax, Address(r15_thread, ZThreadLocalData::address_bad_mask_offset()));\n-      __ jcc(Assembler::notZero, error);\n-    }\n-#endif\n+  return start;\n+}\n@@ -1074,7 +837,4 @@\n-    \/\/ Check if the oop is in the right area of memory\n-    __ movptr(c_rarg2, rax);\n-    __ movptr(c_rarg3, (intptr_t) Universe::verify_oop_mask());\n-    __ andptr(c_rarg2, c_rarg3);\n-    __ movptr(c_rarg3, (intptr_t) Universe::verify_oop_bits());\n-    __ cmpptr(c_rarg2, c_rarg3);\n-    __ jcc(Assembler::notZero, error);\n+address StubGenerator::generate_iota_indices(const char *stub_name) {\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", stub_name);\n+  address start = __ pc();\n@@ -1082,50 +842,8 @@\n-    \/\/ make sure klass is 'reasonable', which is not zero.\n-    __ load_klass(rax, rax, rscratch1);  \/\/ get klass\n-    __ testptr(rax, rax);\n-    __ jcc(Assembler::zero, error); \/\/ if klass is NULL it is broken\n-\n-    \/\/ return if everything seems ok\n-    __ bind(exit);\n-    __ movptr(rax, Address(rsp, saved_rax));     \/\/ get saved rax back\n-    __ movptr(rscratch1, Address(rsp, saved_r10)); \/\/ get saved r10 back\n-    __ pop(c_rarg3);                             \/\/ restore c_rarg3\n-    __ pop(c_rarg2);                             \/\/ restore c_rarg2\n-    __ pop(r12);                                 \/\/ restore r12\n-    __ popf();                                   \/\/ restore flags\n-    __ ret(4 * wordSize);                        \/\/ pop caller saved stuff\n-\n-    \/\/ handle errors\n-    __ bind(error);\n-    __ movptr(rax, Address(rsp, saved_rax));     \/\/ get saved rax back\n-    __ movptr(rscratch1, Address(rsp, saved_r10)); \/\/ get saved r10 back\n-    __ pop(c_rarg3);                             \/\/ get saved c_rarg3 back\n-    __ pop(c_rarg2);                             \/\/ get saved c_rarg2 back\n-    __ pop(r12);                                 \/\/ get saved r12 back\n-    __ popf();                                   \/\/ get saved flags off stack --\n-                                                 \/\/ will be ignored\n-\n-    __ pusha();                                  \/\/ push registers\n-                                                 \/\/ (rip is already\n-                                                 \/\/ already pushed)\n-    \/\/ debug(char* msg, int64_t pc, int64_t regs[])\n-    \/\/ We've popped the registers we'd saved (c_rarg3, c_rarg2 and flags), and\n-    \/\/ pushed all the registers, so now the stack looks like:\n-    \/\/     [tos +  0] 16 saved registers\n-    \/\/     [tos + 16] return address\n-    \/\/   * [tos + 17] error message (char*)\n-    \/\/   * [tos + 18] object to verify (oop)\n-    \/\/   * [tos + 19] saved rax - saved by caller and bashed\n-    \/\/   * [tos + 20] saved r10 (rscratch1) - saved by caller\n-    \/\/   * = popped on exit\n-\n-    __ movptr(c_rarg0, Address(rsp, error_msg));    \/\/ pass address of error message\n-    __ movptr(c_rarg1, Address(rsp, return_addr));  \/\/ pass return address\n-    __ movq(c_rarg2, rsp);                          \/\/ pass address of regs on stack\n-    __ mov(r12, rsp);                               \/\/ remember rsp\n-    __ subptr(rsp, frame::arg_reg_save_area_bytes); \/\/ windows\n-    __ andptr(rsp, -16);                            \/\/ align stack as required by ABI\n-    BLOCK_COMMENT(\"call MacroAssembler::debug\");\n-    __ call(RuntimeAddress(CAST_FROM_FN_PTR(address, MacroAssembler::debug64)));\n-    __ hlt();\n-    return start;\n-  }\n+  __ emit_data64(0x0706050403020100, relocInfo::none);\n+  __ emit_data64(0x0F0E0D0C0B0A0908, relocInfo::none);\n+  __ emit_data64(0x1716151413121110, relocInfo::none);\n+  __ emit_data64(0x1F1E1D1C1B1A1918, relocInfo::none);\n+  __ emit_data64(0x2726252423222120, relocInfo::none);\n+  __ emit_data64(0x2F2E2D2C2B2A2928, relocInfo::none);\n+  __ emit_data64(0x3736353433323130, relocInfo::none);\n+  __ emit_data64(0x3F3E3D3C3B3A3938, relocInfo::none);\n@@ -1133,19 +851,2 @@\n-  \/\/\n-  \/\/ Verify that a register contains clean 32-bits positive value\n-  \/\/ (high 32-bits are 0) so it could be used in 64-bits shifts.\n-  \/\/\n-  \/\/  Input:\n-  \/\/    Rint  -  32-bits value\n-  \/\/    Rtmp  -  scratch\n-  \/\/\n-  void assert_clean_int(Register Rint, Register Rtmp) {\n-#ifdef ASSERT\n-    Label L;\n-    assert_different_registers(Rtmp, Rint);\n-    __ movslq(Rtmp, Rint);\n-    __ cmpq(Rtmp, Rint);\n-    __ jcc(Assembler::equal, L);\n-    __ stop(\"high 32-bits of int value are not 0\");\n-    __ bind(L);\n-#endif\n-  }\n+  return start;\n+}\n@@ -1153,36 +854,4 @@\n-  \/\/  Generate overlap test for array copy stubs\n-  \/\/\n-  \/\/  Input:\n-  \/\/     c_rarg0 - from\n-  \/\/     c_rarg1 - to\n-  \/\/     c_rarg2 - element count\n-  \/\/\n-  \/\/  Output:\n-  \/\/     rax   - &from[element count - 1]\n-  \/\/\n-  void array_overlap_test(address no_overlap_target, Address::ScaleFactor sf) {\n-    assert(no_overlap_target != NULL, \"must be generated\");\n-    array_overlap_test(no_overlap_target, NULL, sf);\n-  }\n-  void array_overlap_test(Label& L_no_overlap, Address::ScaleFactor sf) {\n-    array_overlap_test(NULL, &L_no_overlap, sf);\n-  }\n-  void array_overlap_test(address no_overlap_target, Label* NOLp, Address::ScaleFactor sf) {\n-    const Register from     = c_rarg0;\n-    const Register to       = c_rarg1;\n-    const Register count    = c_rarg2;\n-    const Register end_from = rax;\n-\n-    __ cmpptr(to, from);\n-    __ lea(end_from, Address(from, count, sf, 0));\n-    if (NOLp == NULL) {\n-      ExternalAddress no_overlap(no_overlap_target);\n-      __ jump_cc(Assembler::belowEqual, no_overlap);\n-      __ cmpptr(to, end_from);\n-      __ jump_cc(Assembler::aboveEqual, no_overlap);\n-    } else {\n-      __ jcc(Assembler::belowEqual, (*NOLp));\n-      __ cmpptr(to, end_from);\n-      __ jcc(Assembler::aboveEqual, (*NOLp));\n-    }\n-  }\n+address StubGenerator::generate_vector_reverse_bit_lut(const char *stub_name) {\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", stub_name);\n+  address start = __ pc();\n@@ -1190,12 +859,8 @@\n-  \/\/ Shuffle first three arg regs on Windows into Linux\/Solaris locations.\n-  \/\/\n-  \/\/ Outputs:\n-  \/\/    rdi - rcx\n-  \/\/    rsi - rdx\n-  \/\/    rdx - r8\n-  \/\/    rcx - r9\n-  \/\/\n-  \/\/ Registers r9 and r10 are used to save rdi and rsi on Windows, which latter\n-  \/\/ are non-volatile.  r9 and r10 should not be used by the caller.\n-  \/\/\n-  DEBUG_ONLY(bool regs_in_thread;)\n+  __ emit_data64(0x0E060A020C040800, relocInfo::none);\n+  __ emit_data64(0x0F070B030D050901, relocInfo::none);\n+  __ emit_data64(0x0E060A020C040800, relocInfo::none);\n+  __ emit_data64(0x0F070B030D050901, relocInfo::none);\n+  __ emit_data64(0x0E060A020C040800, relocInfo::none);\n+  __ emit_data64(0x0F070B030D050901, relocInfo::none);\n+  __ emit_data64(0x0E060A020C040800, relocInfo::none);\n+  __ emit_data64(0x0F070B030D050901, relocInfo::none);\n@@ -1203,22 +868,2 @@\n-  void setup_arg_regs(int nargs = 3) {\n-    const Register saved_rdi = r9;\n-    const Register saved_rsi = r10;\n-    assert(nargs == 3 || nargs == 4, \"else fix\");\n-#ifdef _WIN64\n-    assert(c_rarg0 == rcx && c_rarg1 == rdx && c_rarg2 == r8 && c_rarg3 == r9,\n-           \"unexpected argument registers\");\n-    if (nargs >= 4)\n-      __ mov(rax, r9);  \/\/ r9 is also saved_rdi\n-    __ movptr(saved_rdi, rdi);\n-    __ movptr(saved_rsi, rsi);\n-    __ mov(rdi, rcx); \/\/ c_rarg0\n-    __ mov(rsi, rdx); \/\/ c_rarg1\n-    __ mov(rdx, r8);  \/\/ c_rarg2\n-    if (nargs >= 4)\n-      __ mov(rcx, rax); \/\/ c_rarg3 (via rax)\n-#else\n-    assert(c_rarg0 == rdi && c_rarg1 == rsi && c_rarg2 == rdx && c_rarg3 == rcx,\n-           \"unexpected argument registers\");\n-#endif\n-    DEBUG_ONLY(regs_in_thread = false;)\n-  }\n+  return start;\n+}\n@@ -1226,9 +871,4 @@\n-  void restore_arg_regs() {\n-    assert(!regs_in_thread, \"wrong call to restore_arg_regs\");\n-    const Register saved_rdi = r9;\n-    const Register saved_rsi = r10;\n-#ifdef _WIN64\n-    __ movptr(rdi, saved_rdi);\n-    __ movptr(rsi, saved_rsi);\n-#endif\n-  }\n+address StubGenerator::generate_vector_reverse_byte_perm_mask_long(const char *stub_name) {\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", stub_name);\n+  address start = __ pc();\n@@ -1236,21 +876,8 @@\n-  \/\/ This is used in places where r10 is a scratch register, and can\n-  \/\/ be adapted if r9 is needed also.\n-  void setup_arg_regs_using_thread() {\n-    const Register saved_r15 = r9;\n-#ifdef _WIN64\n-    __ mov(saved_r15, r15);  \/\/ r15 is callee saved and needs to be restored\n-    __ get_thread(r15_thread);\n-    assert(c_rarg0 == rcx && c_rarg1 == rdx && c_rarg2 == r8 && c_rarg3 == r9,\n-           \"unexpected argument registers\");\n-    __ movptr(Address(r15_thread, in_bytes(JavaThread::windows_saved_rdi_offset())), rdi);\n-    __ movptr(Address(r15_thread, in_bytes(JavaThread::windows_saved_rsi_offset())), rsi);\n-\n-    __ mov(rdi, rcx); \/\/ c_rarg0\n-    __ mov(rsi, rdx); \/\/ c_rarg1\n-    __ mov(rdx, r8);  \/\/ c_rarg2\n-#else\n-    assert(c_rarg0 == rdi && c_rarg1 == rsi && c_rarg2 == rdx && c_rarg3 == rcx,\n-           \"unexpected argument registers\");\n-#endif\n-    DEBUG_ONLY(regs_in_thread = true;)\n-  }\n+  __ emit_data64(0x0001020304050607, relocInfo::none);\n+  __ emit_data64(0x08090A0B0C0D0E0F, relocInfo::none);\n+  __ emit_data64(0x0001020304050607, relocInfo::none);\n+  __ emit_data64(0x08090A0B0C0D0E0F, relocInfo::none);\n+  __ emit_data64(0x0001020304050607, relocInfo::none);\n+  __ emit_data64(0x08090A0B0C0D0E0F, relocInfo::none);\n+  __ emit_data64(0x0001020304050607, relocInfo::none);\n+  __ emit_data64(0x08090A0B0C0D0E0F, relocInfo::none);\n@@ -1258,10 +885,2 @@\n-  void restore_arg_regs_using_thread() {\n-    assert(regs_in_thread, \"wrong call to restore_arg_regs\");\n-    const Register saved_r15 = r9;\n-#ifdef _WIN64\n-    __ get_thread(r15_thread);\n-    __ movptr(rsi, Address(r15_thread, in_bytes(JavaThread::windows_saved_rsi_offset())));\n-    __ movptr(rdi, Address(r15_thread, in_bytes(JavaThread::windows_saved_rdi_offset())));\n-    __ mov(r15, saved_r15);  \/\/ r15 is callee saved and needs to be restored\n-#endif\n-  }\n+  return start;\n+}\n@@ -1269,34 +888,4 @@\n-  \/\/ Copy big chunks forward\n-  \/\/\n-  \/\/ Inputs:\n-  \/\/   end_from     - source arrays end address\n-  \/\/   end_to       - destination array end address\n-  \/\/   qword_count  - 64-bits element count, negative\n-  \/\/   to           - scratch\n-  \/\/   L_copy_bytes - entry label\n-  \/\/   L_copy_8_bytes  - exit  label\n-  \/\/\n-  void copy_bytes_forward(Register end_from, Register end_to,\n-                             Register qword_count, Register to,\n-                             Label& L_copy_bytes, Label& L_copy_8_bytes) {\n-    DEBUG_ONLY(__ stop(\"enter at entry label, not here\"));\n-    Label L_loop;\n-    __ align(OptoLoopAlignment);\n-    if (UseUnalignedLoadStores) {\n-      Label L_end;\n-      __ BIND(L_loop);\n-      if (UseAVX >= 2) {\n-        __ vmovdqu(xmm0, Address(end_from, qword_count, Address::times_8, -56));\n-        __ vmovdqu(Address(end_to, qword_count, Address::times_8, -56), xmm0);\n-        __ vmovdqu(xmm1, Address(end_from, qword_count, Address::times_8, -24));\n-        __ vmovdqu(Address(end_to, qword_count, Address::times_8, -24), xmm1);\n-      } else {\n-        __ movdqu(xmm0, Address(end_from, qword_count, Address::times_8, -56));\n-        __ movdqu(Address(end_to, qword_count, Address::times_8, -56), xmm0);\n-        __ movdqu(xmm1, Address(end_from, qword_count, Address::times_8, -40));\n-        __ movdqu(Address(end_to, qword_count, Address::times_8, -40), xmm1);\n-        __ movdqu(xmm2, Address(end_from, qword_count, Address::times_8, -24));\n-        __ movdqu(Address(end_to, qword_count, Address::times_8, -24), xmm2);\n-        __ movdqu(xmm3, Address(end_from, qword_count, Address::times_8, - 8));\n-        __ movdqu(Address(end_to, qword_count, Address::times_8, - 8), xmm3);\n-      }\n+address StubGenerator::generate_vector_reverse_byte_perm_mask_int(const char *stub_name) {\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", stub_name);\n+  address start = __ pc();\n@@ -1304,36 +893,8 @@\n-      __ BIND(L_copy_bytes);\n-      __ addptr(qword_count, 8);\n-      __ jcc(Assembler::lessEqual, L_loop);\n-      __ subptr(qword_count, 4);  \/\/ sub(8) and add(4)\n-      __ jccb(Assembler::greater, L_end);\n-      \/\/ Copy trailing 32 bytes\n-      if (UseAVX >= 2) {\n-        __ vmovdqu(xmm0, Address(end_from, qword_count, Address::times_8, -24));\n-        __ vmovdqu(Address(end_to, qword_count, Address::times_8, -24), xmm0);\n-      } else {\n-        __ movdqu(xmm0, Address(end_from, qword_count, Address::times_8, -24));\n-        __ movdqu(Address(end_to, qword_count, Address::times_8, -24), xmm0);\n-        __ movdqu(xmm1, Address(end_from, qword_count, Address::times_8, - 8));\n-        __ movdqu(Address(end_to, qword_count, Address::times_8, - 8), xmm1);\n-      }\n-      __ addptr(qword_count, 4);\n-      __ BIND(L_end);\n-    } else {\n-      \/\/ Copy 32-bytes per iteration\n-      __ BIND(L_loop);\n-      __ movq(to, Address(end_from, qword_count, Address::times_8, -24));\n-      __ movq(Address(end_to, qword_count, Address::times_8, -24), to);\n-      __ movq(to, Address(end_from, qword_count, Address::times_8, -16));\n-      __ movq(Address(end_to, qword_count, Address::times_8, -16), to);\n-      __ movq(to, Address(end_from, qword_count, Address::times_8, - 8));\n-      __ movq(Address(end_to, qword_count, Address::times_8, - 8), to);\n-      __ movq(to, Address(end_from, qword_count, Address::times_8, - 0));\n-      __ movq(Address(end_to, qword_count, Address::times_8, - 0), to);\n-\n-      __ BIND(L_copy_bytes);\n-      __ addptr(qword_count, 4);\n-      __ jcc(Assembler::lessEqual, L_loop);\n-    }\n-    __ subptr(qword_count, 4);\n-    __ jcc(Assembler::less, L_copy_8_bytes); \/\/ Copy trailing qwords\n-  }\n+  __ emit_data64(0x0405060700010203, relocInfo::none);\n+  __ emit_data64(0x0C0D0E0F08090A0B, relocInfo::none);\n+  __ emit_data64(0x0405060700010203, relocInfo::none);\n+  __ emit_data64(0x0C0D0E0F08090A0B, relocInfo::none);\n+  __ emit_data64(0x0405060700010203, relocInfo::none);\n+  __ emit_data64(0x0C0D0E0F08090A0B, relocInfo::none);\n+  __ emit_data64(0x0405060700010203, relocInfo::none);\n+  __ emit_data64(0x0C0D0E0F08090A0B, relocInfo::none);\n@@ -1341,34 +902,2 @@\n-  \/\/ Copy big chunks backward\n-  \/\/\n-  \/\/ Inputs:\n-  \/\/   from         - source arrays address\n-  \/\/   dest         - destination array address\n-  \/\/   qword_count  - 64-bits element count\n-  \/\/   to           - scratch\n-  \/\/   L_copy_bytes - entry label\n-  \/\/   L_copy_8_bytes  - exit  label\n-  \/\/\n-  void copy_bytes_backward(Register from, Register dest,\n-                              Register qword_count, Register to,\n-                              Label& L_copy_bytes, Label& L_copy_8_bytes) {\n-    DEBUG_ONLY(__ stop(\"enter at entry label, not here\"));\n-    Label L_loop;\n-    __ align(OptoLoopAlignment);\n-    if (UseUnalignedLoadStores) {\n-      Label L_end;\n-      __ BIND(L_loop);\n-      if (UseAVX >= 2) {\n-        __ vmovdqu(xmm0, Address(from, qword_count, Address::times_8, 32));\n-        __ vmovdqu(Address(dest, qword_count, Address::times_8, 32), xmm0);\n-        __ vmovdqu(xmm1, Address(from, qword_count, Address::times_8,  0));\n-        __ vmovdqu(Address(dest, qword_count, Address::times_8,  0), xmm1);\n-      } else {\n-        __ movdqu(xmm0, Address(from, qword_count, Address::times_8, 48));\n-        __ movdqu(Address(dest, qword_count, Address::times_8, 48), xmm0);\n-        __ movdqu(xmm1, Address(from, qword_count, Address::times_8, 32));\n-        __ movdqu(Address(dest, qword_count, Address::times_8, 32), xmm1);\n-        __ movdqu(xmm2, Address(from, qword_count, Address::times_8, 16));\n-        __ movdqu(Address(dest, qword_count, Address::times_8, 16), xmm2);\n-        __ movdqu(xmm3, Address(from, qword_count, Address::times_8,  0));\n-        __ movdqu(Address(dest, qword_count, Address::times_8,  0), xmm3);\n-      }\n+  return start;\n+}\n@@ -1376,3 +905,4 @@\n-      __ BIND(L_copy_bytes);\n-      __ subptr(qword_count, 8);\n-      __ jcc(Assembler::greaterEqual, L_loop);\n+address StubGenerator::generate_vector_reverse_byte_perm_mask_short(const char *stub_name) {\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", stub_name);\n+  address start = __ pc();\n@@ -1380,46 +910,8 @@\n-      __ addptr(qword_count, 4);  \/\/ add(8) and sub(4)\n-      __ jccb(Assembler::less, L_end);\n-      \/\/ Copy trailing 32 bytes\n-      if (UseAVX >= 2) {\n-        __ vmovdqu(xmm0, Address(from, qword_count, Address::times_8, 0));\n-        __ vmovdqu(Address(dest, qword_count, Address::times_8, 0), xmm0);\n-      } else {\n-        __ movdqu(xmm0, Address(from, qword_count, Address::times_8, 16));\n-        __ movdqu(Address(dest, qword_count, Address::times_8, 16), xmm0);\n-        __ movdqu(xmm1, Address(from, qword_count, Address::times_8,  0));\n-        __ movdqu(Address(dest, qword_count, Address::times_8,  0), xmm1);\n-      }\n-      __ subptr(qword_count, 4);\n-      __ BIND(L_end);\n-    } else {\n-      \/\/ Copy 32-bytes per iteration\n-      __ BIND(L_loop);\n-      __ movq(to, Address(from, qword_count, Address::times_8, 24));\n-      __ movq(Address(dest, qword_count, Address::times_8, 24), to);\n-      __ movq(to, Address(from, qword_count, Address::times_8, 16));\n-      __ movq(Address(dest, qword_count, Address::times_8, 16), to);\n-      __ movq(to, Address(from, qword_count, Address::times_8,  8));\n-      __ movq(Address(dest, qword_count, Address::times_8,  8), to);\n-      __ movq(to, Address(from, qword_count, Address::times_8,  0));\n-      __ movq(Address(dest, qword_count, Address::times_8,  0), to);\n-\n-      __ BIND(L_copy_bytes);\n-      __ subptr(qword_count, 4);\n-      __ jcc(Assembler::greaterEqual, L_loop);\n-    }\n-    __ addptr(qword_count, 4);\n-    __ jcc(Assembler::greater, L_copy_8_bytes); \/\/ Copy trailing qwords\n-  }\n-\n-#ifndef PRODUCT\n-    int& get_profile_ctr(int shift) {\n-      if ( 0 == shift)\n-        return SharedRuntime::_jbyte_array_copy_ctr;\n-      else if(1 == shift)\n-        return SharedRuntime::_jshort_array_copy_ctr;\n-      else if(2 == shift)\n-        return SharedRuntime::_jint_array_copy_ctr;\n-      else\n-        return SharedRuntime::_jlong_array_copy_ctr;\n-    }\n-#endif\n+  __ emit_data64(0x0607040502030001, relocInfo::none);\n+  __ emit_data64(0x0E0F0C0D0A0B0809, relocInfo::none);\n+  __ emit_data64(0x0607040502030001, relocInfo::none);\n+  __ emit_data64(0x0E0F0C0D0A0B0809, relocInfo::none);\n+  __ emit_data64(0x0607040502030001, relocInfo::none);\n+  __ emit_data64(0x0E0F0C0D0A0B0809, relocInfo::none);\n+  __ emit_data64(0x0607040502030001, relocInfo::none);\n+  __ emit_data64(0x0E0F0C0D0A0B0809, relocInfo::none);\n@@ -1427,9 +919,2 @@\n-  void setup_argument_regs(BasicType type) {\n-    if (type == T_BYTE || type == T_SHORT) {\n-      setup_arg_regs(); \/\/ from => rdi, to => rsi, count => rdx\n-                        \/\/ r9 and r10 may be used to save non-volatile registers\n-    } else {\n-      setup_arg_regs_using_thread(); \/\/ from => rdi, to => rsi, count => rdx\n-                                     \/\/ r9 is used to save r15_thread\n-    }\n-  }\n+  return start;\n+}\n@@ -1437,7 +922,4 @@\n-  void restore_argument_regs(BasicType type) {\n-    if (type == T_BYTE || type == T_SHORT) {\n-      restore_arg_regs();\n-    } else {\n-      restore_arg_regs_using_thread();\n-    }\n-  }\n+address StubGenerator::generate_vector_byte_shuffle_mask(const char *stub_name) {\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", stub_name);\n+  address start = __ pc();\n@@ -1445,23 +927,40 @@\n-#if COMPILER2_OR_JVMCI\n-  \/\/ Note: Following rules apply to AVX3 optimized arraycopy stubs:-\n-  \/\/ - If target supports AVX3 features (BW+VL+F) then implementation uses 32 byte vectors (YMMs)\n-  \/\/   for both special cases (various small block sizes) and aligned copy loop. This is the\n-  \/\/   default configuration.\n-  \/\/ - If copy length is above AVX3Threshold, then implementation use 64 byte vectors (ZMMs)\n-  \/\/   for main copy loop (and subsequent tail) since bulk of the cycles will be consumed in it.\n-  \/\/ - If user forces MaxVectorSize=32 then above 4096 bytes its seen that REP MOVs shows a\n-  \/\/   better performance for disjoint copies. For conjoint\/backward copy vector based\n-  \/\/   copy performs better.\n-  \/\/ - If user sets AVX3Threshold=0, then special cases for small blocks sizes operate over\n-  \/\/   64 byte vector registers (ZMMs).\n-\n-  \/\/ Inputs:\n-  \/\/   c_rarg0   - source array address\n-  \/\/   c_rarg1   - destination array address\n-  \/\/   c_rarg2   - element count, treated as ssize_t, can be zero\n-  \/\/\n-  \/\/\n-  \/\/ Side Effects:\n-  \/\/   disjoint_copy_avx3_masked is set to the no-overlap entry point\n-  \/\/   used by generate_conjoint_[byte\/int\/short\/long]_copy().\n-  \/\/\n+  __ emit_data64(0x7070707070707070, relocInfo::none);\n+  __ emit_data64(0x7070707070707070, relocInfo::none);\n+  __ emit_data64(0xF0F0F0F0F0F0F0F0, relocInfo::none);\n+  __ emit_data64(0xF0F0F0F0F0F0F0F0, relocInfo::none);\n+\n+  return start;\n+}\n+\n+address StubGenerator::generate_fp_mask(const char *stub_name, int64_t mask) {\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", stub_name);\n+  address start = __ pc();\n+\n+  __ emit_data64( mask, relocInfo::none );\n+  __ emit_data64( mask, relocInfo::none );\n+\n+  return start;\n+}\n+\n+address StubGenerator::generate_vector_mask(const char *stub_name, int64_t mask) {\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", stub_name);\n+  address start = __ pc();\n+\n+  __ emit_data64(mask, relocInfo::none);\n+  __ emit_data64(mask, relocInfo::none);\n+  __ emit_data64(mask, relocInfo::none);\n+  __ emit_data64(mask, relocInfo::none);\n+  __ emit_data64(mask, relocInfo::none);\n+  __ emit_data64(mask, relocInfo::none);\n+  __ emit_data64(mask, relocInfo::none);\n+  __ emit_data64(mask, relocInfo::none);\n+\n+  return start;\n+}\n+\n+address StubGenerator::generate_vector_byte_perm_mask(const char *stub_name) {\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", stub_name);\n+  address start = __ pc();\n@@ -1469,26 +968,57 @@\n-  address generate_disjoint_copy_avx3_masked(address* entry, const char *name, int shift,\n-                                             bool aligned, bool is_oop, bool dest_uninitialized) {\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", name);\n-    address start = __ pc();\n-    int avx3threshold = VM_Version::avx3_threshold();\n-    bool use64byteVector = (MaxVectorSize > 32) && (avx3threshold == 0);\n-    Label L_main_loop, L_main_loop_64bytes, L_tail, L_tail64, L_exit, L_entry;\n-    Label L_repmovs, L_main_pre_loop, L_main_pre_loop_64bytes, L_pre_main_post_64;\n-    const Register from        = rdi;  \/\/ source array address\n-    const Register to          = rsi;  \/\/ destination array address\n-    const Register count       = rdx;  \/\/ elements count\n-    const Register temp1       = r8;\n-    const Register temp2       = r11;\n-    const Register temp3       = rax;\n-    const Register temp4       = rcx;\n-    \/\/ End pointers are inclusive, and if count is not zero they point\n-    \/\/ to the last unit copied:  end_to[0] := end_from[0]\n-\n-    __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    assert_clean_int(c_rarg2, rax);    \/\/ Make sure 'count' is clean int.\n-\n-    if (entry != NULL) {\n-      *entry = __ pc();\n-       \/\/ caller can pass a 64-bit byte count here (from Unsafe.copyMemory)\n-      BLOCK_COMMENT(\"Entry:\");\n+  __ emit_data64(0x0000000000000001, relocInfo::none);\n+  __ emit_data64(0x0000000000000003, relocInfo::none);\n+  __ emit_data64(0x0000000000000005, relocInfo::none);\n+  __ emit_data64(0x0000000000000007, relocInfo::none);\n+  __ emit_data64(0x0000000000000000, relocInfo::none);\n+  __ emit_data64(0x0000000000000002, relocInfo::none);\n+  __ emit_data64(0x0000000000000004, relocInfo::none);\n+  __ emit_data64(0x0000000000000006, relocInfo::none);\n+\n+  return start;\n+}\n+\n+address StubGenerator::generate_vector_fp_mask(const char *stub_name, int64_t mask) {\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", stub_name);\n+  address start = __ pc();\n+\n+  __ emit_data64(mask, relocInfo::none);\n+  __ emit_data64(mask, relocInfo::none);\n+  __ emit_data64(mask, relocInfo::none);\n+  __ emit_data64(mask, relocInfo::none);\n+  __ emit_data64(mask, relocInfo::none);\n+  __ emit_data64(mask, relocInfo::none);\n+  __ emit_data64(mask, relocInfo::none);\n+  __ emit_data64(mask, relocInfo::none);\n+\n+  return start;\n+}\n+\n+address StubGenerator::generate_vector_custom_i32(const char *stub_name, Assembler::AvxVectorLen len,\n+                                   int32_t val0, int32_t val1, int32_t val2, int32_t val3,\n+                                   int32_t val4, int32_t val5, int32_t val6, int32_t val7,\n+                                   int32_t val8, int32_t val9, int32_t val10, int32_t val11,\n+                                   int32_t val12, int32_t val13, int32_t val14, int32_t val15) {\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", stub_name);\n+  address start = __ pc();\n+\n+  assert(len != Assembler::AVX_NoVec, \"vector len must be specified\");\n+  __ emit_data(val0, relocInfo::none, 0);\n+  __ emit_data(val1, relocInfo::none, 0);\n+  __ emit_data(val2, relocInfo::none, 0);\n+  __ emit_data(val3, relocInfo::none, 0);\n+  if (len >= Assembler::AVX_256bit) {\n+    __ emit_data(val4, relocInfo::none, 0);\n+    __ emit_data(val5, relocInfo::none, 0);\n+    __ emit_data(val6, relocInfo::none, 0);\n+    __ emit_data(val7, relocInfo::none, 0);\n+    if (len >= Assembler::AVX_512bit) {\n+      __ emit_data(val8, relocInfo::none, 0);\n+      __ emit_data(val9, relocInfo::none, 0);\n+      __ emit_data(val10, relocInfo::none, 0);\n+      __ emit_data(val11, relocInfo::none, 0);\n+      __ emit_data(val12, relocInfo::none, 0);\n+      __ emit_data(val13, relocInfo::none, 0);\n+      __ emit_data(val14, relocInfo::none, 0);\n+      __ emit_data(val15, relocInfo::none, 0);\n@@ -1496,0 +1026,52 @@\n+  }\n+  return start;\n+}\n+\n+\/\/ Non-destructive plausibility checks for oops\n+\/\/\n+\/\/ Arguments:\n+\/\/    all args on stack!\n+\/\/\n+\/\/ Stack after saving c_rarg3:\n+\/\/    [tos + 0]: saved c_rarg3\n+\/\/    [tos + 1]: saved c_rarg2\n+\/\/    [tos + 2]: saved r12 (several TemplateTable methods use it)\n+\/\/    [tos + 3]: saved flags\n+\/\/    [tos + 4]: return address\n+\/\/  * [tos + 5]: error message (char*)\n+\/\/  * [tos + 6]: object to verify (oop)\n+\/\/  * [tos + 7]: saved rax - saved by caller and bashed\n+\/\/  * [tos + 8]: saved r10 (rscratch1) - saved by caller\n+\/\/  * = popped on exit\n+address StubGenerator::generate_verify_oop() {\n+  StubCodeMark mark(this, \"StubRoutines\", \"verify_oop\");\n+  address start = __ pc();\n+\n+  Label exit, error;\n+\n+  __ pushf();\n+  __ incrementl(ExternalAddress((address) StubRoutines::verify_oop_count_addr()), rscratch1);\n+\n+  __ push(r12);\n+\n+  \/\/ save c_rarg2 and c_rarg3\n+  __ push(c_rarg2);\n+  __ push(c_rarg3);\n+\n+  enum {\n+    \/\/ After previous pushes.\n+    oop_to_verify = 6 * wordSize,\n+    saved_rax     = 7 * wordSize,\n+    saved_r10     = 8 * wordSize,\n+\n+    \/\/ Before the call to MacroAssembler::debug(), see below.\n+    return_addr   = 16 * wordSize,\n+    error_msg     = 17 * wordSize\n+  };\n+\n+  \/\/ get object\n+  __ movptr(rax, Address(rsp, oop_to_verify));\n+\n+  \/\/ make sure object is 'reasonable'\n+  __ testptr(rax, rax);\n+  __ jcc(Assembler::zero, exit); \/\/ if obj is NULL it is OK\n@@ -1497,2 +1079,7 @@\n-    BasicType type_vec[] = { T_BYTE,  T_SHORT,  T_INT,   T_LONG};\n-    BasicType type = is_oop ? T_OBJECT : type_vec[shift];\n+#if INCLUDE_ZGC\n+  if (UseZGC) {\n+    \/\/ Check if metadata bits indicate a bad oop\n+    __ testptr(rax, Address(r15_thread, ZThreadLocalData::address_bad_mask_offset()));\n+    __ jcc(Assembler::notZero, error);\n+  }\n+#endif\n@@ -1500,1 +1087,56 @@\n-    setup_argument_regs(type);\n+  \/\/ Check if the oop is in the right area of memory\n+  __ movptr(c_rarg2, rax);\n+  __ movptr(c_rarg3, (intptr_t) Universe::verify_oop_mask());\n+  __ andptr(c_rarg2, c_rarg3);\n+  __ movptr(c_rarg3, (intptr_t) Universe::verify_oop_bits());\n+  __ cmpptr(c_rarg2, c_rarg3);\n+  __ jcc(Assembler::notZero, error);\n+\n+  \/\/ make sure klass is 'reasonable', which is not zero.\n+  __ load_klass(rax, rax, rscratch1);  \/\/ get klass\n+  __ testptr(rax, rax);\n+  __ jcc(Assembler::zero, error); \/\/ if klass is NULL it is broken\n+\n+  \/\/ return if everything seems ok\n+  __ bind(exit);\n+  __ movptr(rax, Address(rsp, saved_rax));     \/\/ get saved rax back\n+  __ movptr(rscratch1, Address(rsp, saved_r10)); \/\/ get saved r10 back\n+  __ pop(c_rarg3);                             \/\/ restore c_rarg3\n+  __ pop(c_rarg2);                             \/\/ restore c_rarg2\n+  __ pop(r12);                                 \/\/ restore r12\n+  __ popf();                                   \/\/ restore flags\n+  __ ret(4 * wordSize);                        \/\/ pop caller saved stuff\n+\n+  \/\/ handle errors\n+  __ bind(error);\n+  __ movptr(rax, Address(rsp, saved_rax));     \/\/ get saved rax back\n+  __ movptr(rscratch1, Address(rsp, saved_r10)); \/\/ get saved r10 back\n+  __ pop(c_rarg3);                             \/\/ get saved c_rarg3 back\n+  __ pop(c_rarg2);                             \/\/ get saved c_rarg2 back\n+  __ pop(r12);                                 \/\/ get saved r12 back\n+  __ popf();                                   \/\/ get saved flags off stack --\n+                                               \/\/ will be ignored\n+\n+  __ pusha();                                  \/\/ push registers\n+                                               \/\/ (rip is already\n+                                               \/\/ already pushed)\n+  \/\/ debug(char* msg, int64_t pc, int64_t regs[])\n+  \/\/ We've popped the registers we'd saved (c_rarg3, c_rarg2 and flags), and\n+  \/\/ pushed all the registers, so now the stack looks like:\n+  \/\/     [tos +  0] 16 saved registers\n+  \/\/     [tos + 16] return address\n+  \/\/   * [tos + 17] error message (char*)\n+  \/\/   * [tos + 18] object to verify (oop)\n+  \/\/   * [tos + 19] saved rax - saved by caller and bashed\n+  \/\/   * [tos + 20] saved r10 (rscratch1) - saved by caller\n+  \/\/   * = popped on exit\n+\n+  __ movptr(c_rarg0, Address(rsp, error_msg));    \/\/ pass address of error message\n+  __ movptr(c_rarg1, Address(rsp, return_addr));  \/\/ pass return address\n+  __ movq(c_rarg2, rsp);                          \/\/ pass address of regs on stack\n+  __ mov(r12, rsp);                               \/\/ remember rsp\n+  __ subptr(rsp, frame::arg_reg_save_area_bytes); \/\/ windows\n+  __ andptr(rsp, -16);                            \/\/ align stack as required by ABI\n+  BLOCK_COMMENT(\"call MacroAssembler::debug\");\n+  __ call(RuntimeAddress(CAST_FROM_FN_PTR(address, MacroAssembler::debug64)));\n+  __ hlt();\n@@ -1502,3 +1144,179 @@\n-    DecoratorSet decorators = IN_HEAP | IS_ARRAY | ARRAYCOPY_DISJOINT;\n-    if (dest_uninitialized) {\n-      decorators |= IS_DEST_UNINITIALIZED;\n+  return start;\n+}\n+\n+\/\/\n+\/\/ Verify that a register contains clean 32-bits positive value\n+\/\/ (high 32-bits are 0) so it could be used in 64-bits shifts.\n+\/\/\n+\/\/  Input:\n+\/\/    Rint  -  32-bits value\n+\/\/    Rtmp  -  scratch\n+\/\/\n+void StubGenerator::assert_clean_int(Register Rint, Register Rtmp) {\n+#ifdef ASSERT\n+  Label L;\n+  assert_different_registers(Rtmp, Rint);\n+  __ movslq(Rtmp, Rint);\n+  __ cmpq(Rtmp, Rint);\n+  __ jcc(Assembler::equal, L);\n+  __ stop(\"high 32-bits of int value are not 0\");\n+  __ bind(L);\n+#endif\n+}\n+\n+\/\/  Generate overlap test for array copy stubs\n+\/\/\n+\/\/  Input:\n+\/\/     c_rarg0 - from\n+\/\/     c_rarg1 - to\n+\/\/     c_rarg2 - element count\n+\/\/\n+\/\/  Output:\n+\/\/     rax   - &from[element count - 1]\n+\/\/\n+void StubGenerator::array_overlap_test(address no_overlap_target, Label* NOLp, Address::ScaleFactor sf) {\n+  const Register from     = c_rarg0;\n+  const Register to       = c_rarg1;\n+  const Register count    = c_rarg2;\n+  const Register end_from = rax;\n+\n+  __ cmpptr(to, from);\n+  __ lea(end_from, Address(from, count, sf, 0));\n+  if (NOLp == NULL) {\n+    ExternalAddress no_overlap(no_overlap_target);\n+    __ jump_cc(Assembler::belowEqual, no_overlap);\n+    __ cmpptr(to, end_from);\n+    __ jump_cc(Assembler::aboveEqual, no_overlap);\n+  } else {\n+    __ jcc(Assembler::belowEqual, (*NOLp));\n+    __ cmpptr(to, end_from);\n+    __ jcc(Assembler::aboveEqual, (*NOLp));\n+  }\n+}\n+\n+\/\/ Shuffle first three arg regs on Windows into Linux\/Solaris locations.\n+\/\/\n+\/\/ Outputs:\n+\/\/    rdi - rcx\n+\/\/    rsi - rdx\n+\/\/    rdx - r8\n+\/\/    rcx - r9\n+\/\/\n+\/\/ Registers r9 and r10 are used to save rdi and rsi on Windows, which latter\n+\/\/ are non-volatile.  r9 and r10 should not be used by the caller.\n+\/\/\n+void StubGenerator::setup_arg_regs(int nargs) {\n+  const Register saved_rdi = r9;\n+  const Register saved_rsi = r10;\n+  assert(nargs == 3 || nargs == 4, \"else fix\");\n+#ifdef _WIN64\n+  assert(c_rarg0 == rcx && c_rarg1 == rdx && c_rarg2 == r8 && c_rarg3 == r9,\n+         \"unexpected argument registers\");\n+  if (nargs >= 4)\n+    __ mov(rax, r9);  \/\/ r9 is also saved_rdi\n+  __ movptr(saved_rdi, rdi);\n+  __ movptr(saved_rsi, rsi);\n+  __ mov(rdi, rcx); \/\/ c_rarg0\n+  __ mov(rsi, rdx); \/\/ c_rarg1\n+  __ mov(rdx, r8);  \/\/ c_rarg2\n+  if (nargs >= 4)\n+    __ mov(rcx, rax); \/\/ c_rarg3 (via rax)\n+#else\n+  assert(c_rarg0 == rdi && c_rarg1 == rsi && c_rarg2 == rdx && c_rarg3 == rcx,\n+         \"unexpected argument registers\");\n+#endif\n+  DEBUG_ONLY(_regs_in_thread = false;)\n+}\n+\n+void StubGenerator::restore_arg_regs() {\n+  assert(!_regs_in_thread, \"wrong call to restore_arg_regs\");\n+  const Register saved_rdi = r9;\n+  const Register saved_rsi = r10;\n+#ifdef _WIN64\n+  __ movptr(rdi, saved_rdi);\n+  __ movptr(rsi, saved_rsi);\n+#endif\n+}\n+\n+\/\/ This is used in places where r10 is a scratch register, and can\n+\/\/ be adapted if r9 is needed also.\n+void StubGenerator::setup_arg_regs_using_thread() {\n+  const Register saved_r15 = r9;\n+#ifdef _WIN64\n+  __ mov(saved_r15, r15);  \/\/ r15 is callee saved and needs to be restored\n+  __ get_thread(r15_thread);\n+  assert(c_rarg0 == rcx && c_rarg1 == rdx && c_rarg2 == r8 && c_rarg3 == r9,\n+         \"unexpected argument registers\");\n+  __ movptr(Address(r15_thread, in_bytes(JavaThread::windows_saved_rdi_offset())), rdi);\n+  __ movptr(Address(r15_thread, in_bytes(JavaThread::windows_saved_rsi_offset())), rsi);\n+\n+  __ mov(rdi, rcx); \/\/ c_rarg0\n+  __ mov(rsi, rdx); \/\/ c_rarg1\n+  __ mov(rdx, r8);  \/\/ c_rarg2\n+#else\n+  assert(c_rarg0 == rdi && c_rarg1 == rsi && c_rarg2 == rdx && c_rarg3 == rcx,\n+         \"unexpected argument registers\");\n+#endif\n+  DEBUG_ONLY(_regs_in_thread = true;)\n+}\n+\n+void StubGenerator::restore_arg_regs_using_thread() {\n+  assert(_regs_in_thread, \"wrong call to restore_arg_regs\");\n+  const Register saved_r15 = r9;\n+#ifdef _WIN64\n+  __ get_thread(r15_thread);\n+  __ movptr(rsi, Address(r15_thread, in_bytes(JavaThread::windows_saved_rsi_offset())));\n+  __ movptr(rdi, Address(r15_thread, in_bytes(JavaThread::windows_saved_rdi_offset())));\n+  __ mov(r15, saved_r15);  \/\/ r15 is callee saved and needs to be restored\n+#endif\n+}\n+\n+\/\/ Copy big chunks forward\n+\/\/\n+\/\/ Inputs:\n+\/\/   end_from     - source arrays end address\n+\/\/   end_to       - destination array end address\n+\/\/   qword_count  - 64-bits element count, negative\n+\/\/   to           - scratch\n+\/\/   L_copy_bytes - entry label\n+\/\/   L_copy_8_bytes  - exit  label\n+\/\/\n+void StubGenerator::copy_bytes_forward(Register end_from, Register end_to,\n+                                       Register qword_count, Register to,\n+                                       Label& L_copy_bytes, Label& L_copy_8_bytes) {\n+  DEBUG_ONLY(__ stop(\"enter at entry label, not here\"));\n+  Label L_loop;\n+  __ align(OptoLoopAlignment);\n+  if (UseUnalignedLoadStores) {\n+    Label L_end;\n+    __ BIND(L_loop);\n+    if (UseAVX >= 2) {\n+      __ vmovdqu(xmm0, Address(end_from, qword_count, Address::times_8, -56));\n+      __ vmovdqu(Address(end_to, qword_count, Address::times_8, -56), xmm0);\n+      __ vmovdqu(xmm1, Address(end_from, qword_count, Address::times_8, -24));\n+      __ vmovdqu(Address(end_to, qword_count, Address::times_8, -24), xmm1);\n+    } else {\n+      __ movdqu(xmm0, Address(end_from, qword_count, Address::times_8, -56));\n+      __ movdqu(Address(end_to, qword_count, Address::times_8, -56), xmm0);\n+      __ movdqu(xmm1, Address(end_from, qword_count, Address::times_8, -40));\n+      __ movdqu(Address(end_to, qword_count, Address::times_8, -40), xmm1);\n+      __ movdqu(xmm2, Address(end_from, qword_count, Address::times_8, -24));\n+      __ movdqu(Address(end_to, qword_count, Address::times_8, -24), xmm2);\n+      __ movdqu(xmm3, Address(end_from, qword_count, Address::times_8, - 8));\n+      __ movdqu(Address(end_to, qword_count, Address::times_8, - 8), xmm3);\n+    }\n+\n+    __ BIND(L_copy_bytes);\n+    __ addptr(qword_count, 8);\n+    __ jcc(Assembler::lessEqual, L_loop);\n+    __ subptr(qword_count, 4);  \/\/ sub(8) and add(4)\n+    __ jccb(Assembler::greater, L_end);\n+    \/\/ Copy trailing 32 bytes\n+    if (UseAVX >= 2) {\n+      __ vmovdqu(xmm0, Address(end_from, qword_count, Address::times_8, -24));\n+      __ vmovdqu(Address(end_to, qword_count, Address::times_8, -24), xmm0);\n+    } else {\n+      __ movdqu(xmm0, Address(end_from, qword_count, Address::times_8, -24));\n+      __ movdqu(Address(end_to, qword_count, Address::times_8, -24), xmm0);\n+      __ movdqu(xmm1, Address(end_from, qword_count, Address::times_8, - 8));\n+      __ movdqu(Address(end_to, qword_count, Address::times_8, - 8), xmm1);\n@@ -1506,2 +1324,72 @@\n-    if (aligned) {\n-      decorators |= ARRAYCOPY_ALIGNED;\n+    __ addptr(qword_count, 4);\n+    __ BIND(L_end);\n+  } else {\n+    \/\/ Copy 32-bytes per iteration\n+    __ BIND(L_loop);\n+    __ movq(to, Address(end_from, qword_count, Address::times_8, -24));\n+    __ movq(Address(end_to, qword_count, Address::times_8, -24), to);\n+    __ movq(to, Address(end_from, qword_count, Address::times_8, -16));\n+    __ movq(Address(end_to, qword_count, Address::times_8, -16), to);\n+    __ movq(to, Address(end_from, qword_count, Address::times_8, - 8));\n+    __ movq(Address(end_to, qword_count, Address::times_8, - 8), to);\n+    __ movq(to, Address(end_from, qword_count, Address::times_8, - 0));\n+    __ movq(Address(end_to, qword_count, Address::times_8, - 0), to);\n+\n+    __ BIND(L_copy_bytes);\n+    __ addptr(qword_count, 4);\n+    __ jcc(Assembler::lessEqual, L_loop);\n+  }\n+  __ subptr(qword_count, 4);\n+  __ jcc(Assembler::less, L_copy_8_bytes); \/\/ Copy trailing qwords\n+}\n+\n+\/\/ Copy big chunks backward\n+\/\/\n+\/\/ Inputs:\n+\/\/   from         - source arrays address\n+\/\/   dest         - destination array address\n+\/\/   qword_count  - 64-bits element count\n+\/\/   to           - scratch\n+\/\/   L_copy_bytes - entry label\n+\/\/   L_copy_8_bytes  - exit  label\n+\/\/\n+void StubGenerator::copy_bytes_backward(Register from, Register dest,\n+                                        Register qword_count, Register to,\n+                                        Label& L_copy_bytes, Label& L_copy_8_bytes) {\n+  DEBUG_ONLY(__ stop(\"enter at entry label, not here\"));\n+  Label L_loop;\n+  __ align(OptoLoopAlignment);\n+  if (UseUnalignedLoadStores) {\n+    Label L_end;\n+    __ BIND(L_loop);\n+    if (UseAVX >= 2) {\n+      __ vmovdqu(xmm0, Address(from, qword_count, Address::times_8, 32));\n+      __ vmovdqu(Address(dest, qword_count, Address::times_8, 32), xmm0);\n+      __ vmovdqu(xmm1, Address(from, qword_count, Address::times_8,  0));\n+      __ vmovdqu(Address(dest, qword_count, Address::times_8,  0), xmm1);\n+    } else {\n+      __ movdqu(xmm0, Address(from, qword_count, Address::times_8, 48));\n+      __ movdqu(Address(dest, qword_count, Address::times_8, 48), xmm0);\n+      __ movdqu(xmm1, Address(from, qword_count, Address::times_8, 32));\n+      __ movdqu(Address(dest, qword_count, Address::times_8, 32), xmm1);\n+      __ movdqu(xmm2, Address(from, qword_count, Address::times_8, 16));\n+      __ movdqu(Address(dest, qword_count, Address::times_8, 16), xmm2);\n+      __ movdqu(xmm3, Address(from, qword_count, Address::times_8,  0));\n+      __ movdqu(Address(dest, qword_count, Address::times_8,  0), xmm3);\n+    }\n+\n+    __ BIND(L_copy_bytes);\n+    __ subptr(qword_count, 8);\n+    __ jcc(Assembler::greaterEqual, L_loop);\n+\n+    __ addptr(qword_count, 4);  \/\/ add(8) and sub(4)\n+    __ jccb(Assembler::less, L_end);\n+    \/\/ Copy trailing 32 bytes\n+    if (UseAVX >= 2) {\n+      __ vmovdqu(xmm0, Address(from, qword_count, Address::times_8, 0));\n+      __ vmovdqu(Address(dest, qword_count, Address::times_8, 0), xmm0);\n+    } else {\n+      __ movdqu(xmm0, Address(from, qword_count, Address::times_8, 16));\n+      __ movdqu(Address(dest, qword_count, Address::times_8, 16), xmm0);\n+      __ movdqu(xmm1, Address(from, qword_count, Address::times_8,  0));\n+      __ movdqu(Address(dest, qword_count, Address::times_8,  0), xmm1);\n@@ -1509,2 +1397,21 @@\n-    BarrierSetAssembler *bs = BarrierSet::barrier_set()->barrier_set_assembler();\n-    bs->arraycopy_prologue(_masm, decorators, type, from, to, count);\n+    __ subptr(qword_count, 4);\n+    __ BIND(L_end);\n+  } else {\n+    \/\/ Copy 32-bytes per iteration\n+    __ BIND(L_loop);\n+    __ movq(to, Address(from, qword_count, Address::times_8, 24));\n+    __ movq(Address(dest, qword_count, Address::times_8, 24), to);\n+    __ movq(to, Address(from, qword_count, Address::times_8, 16));\n+    __ movq(Address(dest, qword_count, Address::times_8, 16), to);\n+    __ movq(to, Address(from, qword_count, Address::times_8,  8));\n+    __ movq(Address(dest, qword_count, Address::times_8,  8), to);\n+    __ movq(to, Address(from, qword_count, Address::times_8,  0));\n+    __ movq(Address(dest, qword_count, Address::times_8,  0), to);\n+\n+    __ BIND(L_copy_bytes);\n+    __ subptr(qword_count, 4);\n+    __ jcc(Assembler::greaterEqual, L_loop);\n+  }\n+  __ addptr(qword_count, 4);\n+  __ jcc(Assembler::greater, L_copy_8_bytes); \/\/ Copy trailing qwords\n+}\n@@ -1512,4 +1419,9 @@\n-    {\n-      \/\/ Type(shift)           byte(0), short(1), int(2),   long(3)\n-      int loop_size[]        = { 192,     96,       48,      24};\n-      int threshold[]        = { 4096,    2048,     1024,    512};\n+void StubGenerator::setup_argument_regs(BasicType type) {\n+  if (type == T_BYTE || type == T_SHORT) {\n+    setup_arg_regs(); \/\/ from => rdi, to => rsi, count => rdx\n+                      \/\/ r9 and r10 may be used to save non-volatile registers\n+  } else {\n+    setup_arg_regs_using_thread(); \/\/ from => rdi, to => rsi, count => rdx\n+                                   \/\/ r9 is used to save r15_thread\n+  }\n+}\n@@ -1517,3 +1429,7 @@\n-      \/\/ UnsafeCopyMemory page error: continue after ucm\n-      UnsafeCopyMemoryMark ucmm(this, !is_oop && !aligned, true);\n-      \/\/ 'from', 'to' and 'count' are now valid\n+void StubGenerator::restore_argument_regs(BasicType type) {\n+  if (type == T_BYTE || type == T_SHORT) {\n+    restore_arg_regs();\n+  } else {\n+    restore_arg_regs_using_thread();\n+  }\n+}\n@@ -1521,4 +1437,52 @@\n-      \/\/ temp1 holds remaining count and temp4 holds running count used to compute\n-      \/\/ next address offset for start of to\/from addresses (temp4 * scale).\n-      __ mov64(temp4, 0);\n-      __ movq(temp1, count);\n+#if COMPILER2_OR_JVMCI\n+\/\/ Note: Following rules apply to AVX3 optimized arraycopy stubs:-\n+\/\/ - If target supports AVX3 features (BW+VL+F) then implementation uses 32 byte vectors (YMMs)\n+\/\/   for both special cases (various small block sizes) and aligned copy loop. This is the\n+\/\/   default configuration.\n+\/\/ - If copy length is above AVX3Threshold, then implementation use 64 byte vectors (ZMMs)\n+\/\/   for main copy loop (and subsequent tail) since bulk of the cycles will be consumed in it.\n+\/\/ - If user forces MaxVectorSize=32 then above 4096 bytes its seen that REP MOVs shows a\n+\/\/   better performance for disjoint copies. For conjoint\/backward copy vector based\n+\/\/   copy performs better.\n+\/\/ - If user sets AVX3Threshold=0, then special cases for small blocks sizes operate over\n+\/\/   64 byte vector registers (ZMMs).\n+\n+\/\/ Inputs:\n+\/\/   c_rarg0   - source array address\n+\/\/   c_rarg1   - destination array address\n+\/\/   c_rarg2   - element count, treated as ssize_t, can be zero\n+\/\/\n+\/\/\n+\/\/ Side Effects:\n+\/\/   disjoint_copy_avx3_masked is set to the no-overlap entry point\n+\/\/   used by generate_conjoint_[byte\/int\/short\/long]_copy().\n+\/\/\n+address StubGenerator::generate_disjoint_copy_avx3_masked(address* entry, const char *name,\n+                                                          int shift, bool aligned, bool is_oop,\n+                                                          bool dest_uninitialized) {\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", name);\n+  address start = __ pc();\n+\n+  int avx3threshold = VM_Version::avx3_threshold();\n+  bool use64byteVector = (MaxVectorSize > 32) && (avx3threshold == 0);\n+  Label L_main_loop, L_main_loop_64bytes, L_tail, L_tail64, L_exit, L_entry;\n+  Label L_repmovs, L_main_pre_loop, L_main_pre_loop_64bytes, L_pre_main_post_64;\n+  const Register from        = rdi;  \/\/ source array address\n+  const Register to          = rsi;  \/\/ destination array address\n+  const Register count       = rdx;  \/\/ elements count\n+  const Register temp1       = r8;\n+  const Register temp2       = r11;\n+  const Register temp3       = rax;\n+  const Register temp4       = rcx;\n+  \/\/ End pointers are inclusive, and if count is not zero they point\n+  \/\/ to the last unit copied:  end_to[0] := end_from[0]\n+\n+  __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  assert_clean_int(c_rarg2, rax);    \/\/ Make sure 'count' is clean int.\n+\n+  if (entry != NULL) {\n+    *entry = __ pc();\n+     \/\/ caller can pass a 64-bit byte count here (from Unsafe.copyMemory)\n+    BLOCK_COMMENT(\"Entry:\");\n+  }\n@@ -1526,4 +1490,2 @@\n-      \/\/ Zero length check.\n-      __ BIND(L_tail);\n-      __ cmpq(temp1, 0);\n-      __ jcc(Assembler::lessEqual, L_exit);\n+  BasicType type_vec[] = { T_BYTE,  T_SHORT,  T_INT,   T_LONG};\n+  BasicType type = is_oop ? T_OBJECT : type_vec[shift];\n@@ -1531,3 +1493,1 @@\n-      \/\/ Special cases using 32 byte [masked] vector copy operations.\n-      __ arraycopy_avx3_special_cases(xmm1, k2, from, to, temp1, shift,\n-                                      temp4, temp3, use64byteVector, L_entry, L_exit);\n+  setup_argument_regs(type);\n@@ -1535,14 +1495,9 @@\n-      \/\/ PRE-MAIN-POST loop for aligned copy.\n-      __ BIND(L_entry);\n-\n-      if (avx3threshold != 0) {\n-        __ cmpq(count, threshold[shift]);\n-        if (MaxVectorSize == 64) {\n-          \/\/ Copy using 64 byte vectors.\n-          __ jcc(Assembler::greaterEqual, L_pre_main_post_64);\n-        } else {\n-          assert(MaxVectorSize < 64, \"vector size should be < 64 bytes\");\n-          \/\/ REP MOVS offer a faster copy path.\n-          __ jcc(Assembler::greaterEqual, L_repmovs);\n-        }\n-      }\n+  DecoratorSet decorators = IN_HEAP | IS_ARRAY | ARRAYCOPY_DISJOINT;\n+  if (dest_uninitialized) {\n+    decorators |= IS_DEST_UNINITIALIZED;\n+  }\n+  if (aligned) {\n+    decorators |= ARRAYCOPY_ALIGNED;\n+  }\n+  BarrierSetAssembler *bs = BarrierSet::barrier_set()->barrier_set_assembler();\n+  bs->arraycopy_prologue(_masm, decorators, type, from, to, count);\n@@ -1550,5 +1505,18 @@\n-      if ((MaxVectorSize < 64)  || (avx3threshold != 0)) {\n-        \/\/ Partial copy to make dst address 32 byte aligned.\n-        __ movq(temp2, to);\n-        __ andq(temp2, 31);\n-        __ jcc(Assembler::equal, L_main_pre_loop);\n+  {\n+    \/\/ Type(shift)           byte(0), short(1), int(2),   long(3)\n+    int loop_size[]        = { 192,     96,       48,      24};\n+    int threshold[]        = { 4096,    2048,     1024,    512};\n+\n+    \/\/ UnsafeCopyMemory page error: continue after ucm\n+    UnsafeCopyMemoryMark ucmm(this, !is_oop && !aligned, true);\n+    \/\/ 'from', 'to' and 'count' are now valid\n+\n+    \/\/ temp1 holds remaining count and temp4 holds running count used to compute\n+    \/\/ next address offset for start of to\/from addresses (temp4 * scale).\n+    __ mov64(temp4, 0);\n+    __ movq(temp1, count);\n+\n+    \/\/ Zero length check.\n+    __ BIND(L_tail);\n+    __ cmpq(temp1, 0);\n+    __ jcc(Assembler::lessEqual, L_exit);\n@@ -1556,10 +1524,3 @@\n-        __ negptr(temp2);\n-        __ addq(temp2, 32);\n-        if (shift) {\n-          __ shrq(temp2, shift);\n-        }\n-        __ movq(temp3, temp2);\n-        __ copy32_masked_avx(to, from, xmm1, k2, temp3, temp4, temp1, shift);\n-        __ movq(temp4, temp2);\n-        __ movq(temp1, count);\n-        __ subq(temp1, temp2);\n+    \/\/ Special cases using 32 byte [masked] vector copy operations.\n+    __ arraycopy_avx3_special_cases(xmm1, k2, from, to, temp1, shift,\n+                                    temp4, temp3, use64byteVector, L_entry, L_exit);\n@@ -1567,2 +1528,2 @@\n-        __ cmpq(temp1, loop_size[shift]);\n-        __ jcc(Assembler::less, L_tail);\n+    \/\/ PRE-MAIN-POST loop for aligned copy.\n+    __ BIND(L_entry);\n@@ -1570,2 +1531,11 @@\n-        __ BIND(L_main_pre_loop);\n-        __ subq(temp1, loop_size[shift]);\n+    if (avx3threshold != 0) {\n+      __ cmpq(count, threshold[shift]);\n+      if (MaxVectorSize == 64) {\n+        \/\/ Copy using 64 byte vectors.\n+        __ jcc(Assembler::greaterEqual, L_pre_main_post_64);\n+      } else {\n+        assert(MaxVectorSize < 64, \"vector size should be < 64 bytes\");\n+        \/\/ REP MOVS offer a faster copy path.\n+        __ jcc(Assembler::greaterEqual, L_repmovs);\n+      }\n+    }\n@@ -1573,9 +1543,5 @@\n-        \/\/ Main loop with aligned copy block size of 192 bytes at 32 byte granularity.\n-        __ align32();\n-        __ BIND(L_main_loop);\n-           __ copy64_avx(to, from, temp4, xmm1, false, shift, 0);\n-           __ copy64_avx(to, from, temp4, xmm1, false, shift, 64);\n-           __ copy64_avx(to, from, temp4, xmm1, false, shift, 128);\n-           __ addptr(temp4, loop_size[shift]);\n-           __ subq(temp1, loop_size[shift]);\n-           __ jcc(Assembler::greater, L_main_loop);\n+    if ((MaxVectorSize < 64)  || (avx3threshold != 0)) {\n+      \/\/ Partial copy to make dst address 32 byte aligned.\n+      __ movq(temp2, to);\n+      __ andq(temp2, 31);\n+      __ jcc(Assembler::equal, L_main_pre_loop);\n@@ -1583,1 +1549,10 @@\n-        __ addq(temp1, loop_size[shift]);\n+      __ negptr(temp2);\n+      __ addq(temp2, 32);\n+      if (shift) {\n+        __ shrq(temp2, shift);\n+      }\n+      __ movq(temp3, temp2);\n+      __ copy32_masked_avx(to, from, xmm1, k2, temp3, temp4, temp1, shift);\n+      __ movq(temp4, temp2);\n+      __ movq(temp1, count);\n+      __ subq(temp1, temp2);\n@@ -1585,2 +1560,2 @@\n-        \/\/ Tail loop.\n-        __ jmp(L_tail);\n+      __ cmpq(temp1, loop_size[shift]);\n+      __ jcc(Assembler::less, L_tail);\n@@ -1588,26 +1563,2 @@\n-        __ BIND(L_repmovs);\n-          __ movq(temp2, temp1);\n-          \/\/ Swap to(RSI) and from(RDI) addresses to comply with REP MOVs semantics.\n-          __ movq(temp3, to);\n-          __ movq(to,  from);\n-          __ movq(from, temp3);\n-          \/\/ Save to\/from for restoration post rep_mov.\n-          __ movq(temp1, to);\n-          __ movq(temp3, from);\n-          if(shift < 3) {\n-            __ shrq(temp2, 3-shift);     \/\/ quad word count\n-          }\n-          __ movq(temp4 , temp2);        \/\/ move quad ward count into temp4(RCX).\n-          __ rep_mov();\n-          __ shlq(temp2, 3);             \/\/ convert quad words into byte count.\n-          if(shift) {\n-            __ shrq(temp2, shift);       \/\/ type specific count.\n-          }\n-          \/\/ Restore original addresses in to\/from.\n-          __ movq(to, temp3);\n-          __ movq(from, temp1);\n-          __ movq(temp4, temp2);\n-          __ movq(temp1, count);\n-          __ subq(temp1, temp2);         \/\/ tailing part (less than a quad ward size).\n-          __ jmp(L_tail);\n-      }\n+      __ BIND(L_main_pre_loop);\n+      __ subq(temp1, loop_size[shift]);\n@@ -1615,11 +1566,32 @@\n-      if (MaxVectorSize > 32) {\n-        __ BIND(L_pre_main_post_64);\n-        \/\/ Partial copy to make dst address 64 byte aligned.\n-        __ movq(temp2, to);\n-        __ andq(temp2, 63);\n-        __ jcc(Assembler::equal, L_main_pre_loop_64bytes);\n-\n-        __ negptr(temp2);\n-        __ addq(temp2, 64);\n-        if (shift) {\n-          __ shrq(temp2, shift);\n+      \/\/ Main loop with aligned copy block size of 192 bytes at 32 byte granularity.\n+      __ align32();\n+      __ BIND(L_main_loop);\n+         __ copy64_avx(to, from, temp4, xmm1, false, shift, 0);\n+         __ copy64_avx(to, from, temp4, xmm1, false, shift, 64);\n+         __ copy64_avx(to, from, temp4, xmm1, false, shift, 128);\n+         __ addptr(temp4, loop_size[shift]);\n+         __ subq(temp1, loop_size[shift]);\n+         __ jcc(Assembler::greater, L_main_loop);\n+\n+      __ addq(temp1, loop_size[shift]);\n+\n+      \/\/ Tail loop.\n+      __ jmp(L_tail);\n+\n+      __ BIND(L_repmovs);\n+        __ movq(temp2, temp1);\n+        \/\/ Swap to(RSI) and from(RDI) addresses to comply with REP MOVs semantics.\n+        __ movq(temp3, to);\n+        __ movq(to,  from);\n+        __ movq(from, temp3);\n+        \/\/ Save to\/from for restoration post rep_mov.\n+        __ movq(temp1, to);\n+        __ movq(temp3, from);\n+        if(shift < 3) {\n+          __ shrq(temp2, 3-shift);     \/\/ quad word count\n+        }\n+        __ movq(temp4 , temp2);        \/\/ move quad ward count into temp4(RCX).\n+        __ rep_mov();\n+        __ shlq(temp2, 3);             \/\/ convert quad words into byte count.\n+        if(shift) {\n+          __ shrq(temp2, shift);       \/\/ type specific count.\n@@ -1627,2 +1599,3 @@\n-        __ movq(temp3, temp2);\n-        __ copy64_masked_avx(to, from, xmm1, k2, temp3, temp4, temp1, shift, 0 , true);\n+        \/\/ Restore original addresses in to\/from.\n+        __ movq(to, temp3);\n+        __ movq(from, temp1);\n@@ -1631,31 +1604,2 @@\n-        __ subq(temp1, temp2);\n-\n-        __ cmpq(temp1, loop_size[shift]);\n-        __ jcc(Assembler::less, L_tail64);\n-\n-        __ BIND(L_main_pre_loop_64bytes);\n-        __ subq(temp1, loop_size[shift]);\n-\n-        \/\/ Main loop with aligned copy block size of 192 bytes at\n-        \/\/ 64 byte copy granularity.\n-        __ align32();\n-        __ BIND(L_main_loop_64bytes);\n-           __ copy64_avx(to, from, temp4, xmm1, false, shift, 0 , true);\n-           __ copy64_avx(to, from, temp4, xmm1, false, shift, 64, true);\n-           __ copy64_avx(to, from, temp4, xmm1, false, shift, 128, true);\n-           __ addptr(temp4, loop_size[shift]);\n-           __ subq(temp1, loop_size[shift]);\n-           __ jcc(Assembler::greater, L_main_loop_64bytes);\n-\n-        __ addq(temp1, loop_size[shift]);\n-        \/\/ Zero length check.\n-        __ jcc(Assembler::lessEqual, L_exit);\n-\n-        __ BIND(L_tail64);\n-\n-        \/\/ Tail handling using 64 byte [masked] vector copy operations.\n-        use64byteVector = true;\n-        __ arraycopy_avx3_special_cases(xmm1, k2, from, to, temp1, shift,\n-                                        temp4, temp3, use64byteVector, L_entry, L_exit);\n-      }\n-      __ BIND(L_exit);\n+        __ subq(temp1, temp2);         \/\/ tailing part (less than a quad ward size).\n+        __ jmp(L_tail);\n@@ -1664,5 +1608,45 @@\n-    address ucme_exit_pc = __ pc();\n-    \/\/ When called from generic_arraycopy r11 contains specific values\n-    \/\/ used during arraycopy epilogue, re-initializing r11.\n-    if (is_oop) {\n-      __ movq(r11, shift == 3 ? count : to);\n+    if (MaxVectorSize > 32) {\n+      __ BIND(L_pre_main_post_64);\n+      \/\/ Partial copy to make dst address 64 byte aligned.\n+      __ movq(temp2, to);\n+      __ andq(temp2, 63);\n+      __ jcc(Assembler::equal, L_main_pre_loop_64bytes);\n+\n+      __ negptr(temp2);\n+      __ addq(temp2, 64);\n+      if (shift) {\n+        __ shrq(temp2, shift);\n+      }\n+      __ movq(temp3, temp2);\n+      __ copy64_masked_avx(to, from, xmm1, k2, temp3, temp4, temp1, shift, 0 , true);\n+      __ movq(temp4, temp2);\n+      __ movq(temp1, count);\n+      __ subq(temp1, temp2);\n+\n+      __ cmpq(temp1, loop_size[shift]);\n+      __ jcc(Assembler::less, L_tail64);\n+\n+      __ BIND(L_main_pre_loop_64bytes);\n+      __ subq(temp1, loop_size[shift]);\n+\n+      \/\/ Main loop with aligned copy block size of 192 bytes at\n+      \/\/ 64 byte copy granularity.\n+      __ align32();\n+      __ BIND(L_main_loop_64bytes);\n+         __ copy64_avx(to, from, temp4, xmm1, false, shift, 0 , true);\n+         __ copy64_avx(to, from, temp4, xmm1, false, shift, 64, true);\n+         __ copy64_avx(to, from, temp4, xmm1, false, shift, 128, true);\n+         __ addptr(temp4, loop_size[shift]);\n+         __ subq(temp1, loop_size[shift]);\n+         __ jcc(Assembler::greater, L_main_loop_64bytes);\n+\n+      __ addq(temp1, loop_size[shift]);\n+      \/\/ Zero length check.\n+      __ jcc(Assembler::lessEqual, L_exit);\n+\n+      __ BIND(L_tail64);\n+\n+      \/\/ Tail handling using 64 byte [masked] vector copy operations.\n+      use64byteVector = true;\n+      __ arraycopy_avx3_special_cases(xmm1, k2, from, to, temp1, shift,\n+                                      temp4, temp3, use64byteVector, L_entry, L_exit);\n@@ -1670,8 +1654,1 @@\n-    bs->arraycopy_epilogue(_masm, decorators, type, from, to, count);\n-    restore_argument_regs(type);\n-    INC_COUNTER_NP(get_profile_ctr(shift), rscratch1); \/\/ Update counter after rscratch1 is free\n-    __ xorptr(rax, rax); \/\/ return 0\n-    __ vzeroupper();\n-    __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    __ ret(0);\n-    return start;\n+    __ BIND(L_exit);\n@@ -1680,36 +1657,13 @@\n-  \/\/ Inputs:\n-  \/\/   c_rarg0   - source array address\n-  \/\/   c_rarg1   - destination array address\n-  \/\/   c_rarg2   - element count, treated as ssize_t, can be zero\n-  \/\/\n-  \/\/\n-  address generate_conjoint_copy_avx3_masked(address* entry, const char *name, int shift,\n-                                             address nooverlap_target, bool aligned, bool is_oop,\n-                                             bool dest_uninitialized) {\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", name);\n-    address start = __ pc();\n-\n-    int avx3threshold = VM_Version::avx3_threshold();\n-    bool use64byteVector = (MaxVectorSize > 32) && (avx3threshold == 0);\n-\n-    Label L_main_pre_loop, L_main_pre_loop_64bytes, L_pre_main_post_64;\n-    Label L_main_loop, L_main_loop_64bytes, L_tail, L_tail64, L_exit, L_entry;\n-    const Register from        = rdi;  \/\/ source array address\n-    const Register to          = rsi;  \/\/ destination array address\n-    const Register count       = rdx;  \/\/ elements count\n-    const Register temp1       = r8;\n-    const Register temp2       = rcx;\n-    const Register temp3       = r11;\n-    const Register temp4       = rax;\n-    \/\/ End pointers are inclusive, and if count is not zero they point\n-    \/\/ to the last unit copied:  end_to[0] := end_from[0]\n-\n-    __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    assert_clean_int(c_rarg2, rax);    \/\/ Make sure 'count' is clean int.\n-\n-    if (entry != NULL) {\n-      *entry = __ pc();\n-       \/\/ caller can pass a 64-bit byte count here (from Unsafe.copyMemory)\n-      BLOCK_COMMENT(\"Entry:\");\n-    }\n+  address ucme_exit_pc = __ pc();\n+  \/\/ When called from generic_arraycopy r11 contains specific values\n+  \/\/ used during arraycopy epilogue, re-initializing r11.\n+  if (is_oop) {\n+    __ movq(r11, shift == 3 ? count : to);\n+  }\n+  bs->arraycopy_epilogue(_masm, decorators, type, from, to, count);\n+  restore_argument_regs(type);\n+  INC_COUNTER_NP(get_profile_ctr(shift), rscratch1); \/\/ Update counter after rscratch1 is free\n+  __ xorptr(rax, rax); \/\/ return 0\n+  __ vzeroupper();\n+  __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ ret(0);\n@@ -1717,1 +1671,2 @@\n-    array_overlap_test(nooverlap_target, (Address::ScaleFactor)(shift));\n+  return start;\n+}\n@@ -1719,2 +1674,35 @@\n-    BasicType type_vec[] = { T_BYTE,  T_SHORT,  T_INT,   T_LONG};\n-    BasicType type = is_oop ? T_OBJECT : type_vec[shift];\n+\/\/ Inputs:\n+\/\/   c_rarg0   - source array address\n+\/\/   c_rarg1   - destination array address\n+\/\/   c_rarg2   - element count, treated as ssize_t, can be zero\n+\/\/\n+address StubGenerator::generate_conjoint_copy_avx3_masked(address* entry, const char *name, int shift,\n+                                                          address nooverlap_target, bool aligned,\n+                                                          bool is_oop, bool dest_uninitialized) {\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", name);\n+  address start = __ pc();\n+\n+  int avx3threshold = VM_Version::avx3_threshold();\n+  bool use64byteVector = (MaxVectorSize > 32) && (avx3threshold == 0);\n+\n+  Label L_main_pre_loop, L_main_pre_loop_64bytes, L_pre_main_post_64;\n+  Label L_main_loop, L_main_loop_64bytes, L_tail, L_tail64, L_exit, L_entry;\n+  const Register from        = rdi;  \/\/ source array address\n+  const Register to          = rsi;  \/\/ destination array address\n+  const Register count       = rdx;  \/\/ elements count\n+  const Register temp1       = r8;\n+  const Register temp2       = rcx;\n+  const Register temp3       = r11;\n+  const Register temp4       = rax;\n+  \/\/ End pointers are inclusive, and if count is not zero they point\n+  \/\/ to the last unit copied:  end_to[0] := end_from[0]\n+\n+  __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  assert_clean_int(c_rarg2, rax);    \/\/ Make sure 'count' is clean int.\n+\n+  if (entry != NULL) {\n+    *entry = __ pc();\n+     \/\/ caller can pass a 64-bit byte count here (from Unsafe.copyMemory)\n+    BLOCK_COMMENT(\"Entry:\");\n+  }\n@@ -1722,1 +1710,1 @@\n-    setup_argument_regs(type);\n+  array_overlap_test(nooverlap_target, (Address::ScaleFactor)(shift));\n@@ -1724,20 +1712,2 @@\n-    DecoratorSet decorators = IN_HEAP | IS_ARRAY;\n-    if (dest_uninitialized) {\n-      decorators |= IS_DEST_UNINITIALIZED;\n-    }\n-    if (aligned) {\n-      decorators |= ARRAYCOPY_ALIGNED;\n-    }\n-    BarrierSetAssembler *bs = BarrierSet::barrier_set()->barrier_set_assembler();\n-    bs->arraycopy_prologue(_masm, decorators, type, from, to, count);\n-    {\n-      \/\/ Type(shift)       byte(0), short(1), int(2),   long(3)\n-      int loop_size[]   = { 192,     96,       48,      24};\n-      int threshold[]   = { 4096,    2048,     1024,    512};\n-\n-      \/\/ UnsafeCopyMemory page error: continue after ucm\n-      UnsafeCopyMemoryMark ucmm(this, !is_oop && !aligned, true);\n-      \/\/ 'from', 'to' and 'count' are now valid\n-\n-      \/\/ temp1 holds remaining count.\n-      __ movq(temp1, count);\n+  BasicType type_vec[] = { T_BYTE,  T_SHORT,  T_INT,   T_LONG};\n+  BasicType type = is_oop ? T_OBJECT : type_vec[shift];\n@@ -1745,4 +1715,1 @@\n-      \/\/ Zero length check.\n-      __ BIND(L_tail);\n-      __ cmpq(temp1, 0);\n-      __ jcc(Assembler::lessEqual, L_exit);\n+  setup_argument_regs(type);\n@@ -1750,5 +1717,13 @@\n-      __ mov64(temp2, 0);\n-      __ movq(temp3, temp1);\n-      \/\/ Special cases using 32 byte [masked] vector copy operations.\n-      __ arraycopy_avx3_special_cases_conjoint(xmm1, k2, from, to, temp2, temp3, temp1, shift,\n-                                               temp4, use64byteVector, L_entry, L_exit);\n+  DecoratorSet decorators = IN_HEAP | IS_ARRAY;\n+  if (dest_uninitialized) {\n+    decorators |= IS_DEST_UNINITIALIZED;\n+  }\n+  if (aligned) {\n+    decorators |= ARRAYCOPY_ALIGNED;\n+  }\n+  BarrierSetAssembler *bs = BarrierSet::barrier_set()->barrier_set_assembler();\n+  bs->arraycopy_prologue(_masm, decorators, type, from, to, count);\n+  {\n+    \/\/ Type(shift)       byte(0), short(1), int(2),   long(3)\n+    int loop_size[]   = { 192,     96,       48,      24};\n+    int threshold[]   = { 4096,    2048,     1024,    512};\n@@ -1756,2 +1731,3 @@\n-      \/\/ PRE-MAIN-POST loop for aligned copy.\n-      __ BIND(L_entry);\n+    \/\/ UnsafeCopyMemory page error: continue after ucm\n+    UnsafeCopyMemoryMark ucmm(this, !is_oop && !aligned, true);\n+    \/\/ 'from', 'to' and 'count' are now valid\n@@ -1759,4 +1735,2 @@\n-      if ((MaxVectorSize > 32) && (avx3threshold != 0)) {\n-        __ cmpq(temp1, threshold[shift]);\n-        __ jcc(Assembler::greaterEqual, L_pre_main_post_64);\n-      }\n+    \/\/ temp1 holds remaining count.\n+    __ movq(temp1, count);\n@@ -1764,5 +1738,4 @@\n-      if ((MaxVectorSize < 64)  || (avx3threshold != 0)) {\n-        \/\/ Partial copy to make dst address 32 byte aligned.\n-        __ leaq(temp2, Address(to, temp1, (Address::ScaleFactor)(shift), 0));\n-        __ andq(temp2, 31);\n-        __ jcc(Assembler::equal, L_main_pre_loop);\n+    \/\/ Zero length check.\n+    __ BIND(L_tail);\n+    __ cmpq(temp1, 0);\n+    __ jcc(Assembler::lessEqual, L_exit);\n@@ -1770,5 +1743,5 @@\n-        if (shift) {\n-          __ shrq(temp2, shift);\n-        }\n-        __ subq(temp1, temp2);\n-        __ copy32_masked_avx(to, from, xmm1, k2, temp2, temp1, temp3, shift);\n+    __ mov64(temp2, 0);\n+    __ movq(temp3, temp1);\n+    \/\/ Special cases using 32 byte [masked] vector copy operations.\n+    __ arraycopy_avx3_special_cases_conjoint(xmm1, k2, from, to, temp2, temp3, temp1, shift,\n+                                             temp4, use64byteVector, L_entry, L_exit);\n@@ -1776,2 +1749,2 @@\n-        __ cmpq(temp1, loop_size[shift]);\n-        __ jcc(Assembler::less, L_tail);\n+    \/\/ PRE-MAIN-POST loop for aligned copy.\n+    __ BIND(L_entry);\n@@ -1779,1 +1752,4 @@\n-        __ BIND(L_main_pre_loop);\n+    if ((MaxVectorSize > 32) && (avx3threshold != 0)) {\n+      __ cmpq(temp1, threshold[shift]);\n+      __ jcc(Assembler::greaterEqual, L_pre_main_post_64);\n+    }\n@@ -1781,9 +1757,5 @@\n-        \/\/ Main loop with aligned copy block size of 192 bytes at 32 byte granularity.\n-        __ align32();\n-        __ BIND(L_main_loop);\n-           __ copy64_avx(to, from, temp1, xmm1, true, shift, -64);\n-           __ copy64_avx(to, from, temp1, xmm1, true, shift, -128);\n-           __ copy64_avx(to, from, temp1, xmm1, true, shift, -192);\n-           __ subptr(temp1, loop_size[shift]);\n-           __ cmpq(temp1, loop_size[shift]);\n-           __ jcc(Assembler::greater, L_main_loop);\n+    if ((MaxVectorSize < 64)  || (avx3threshold != 0)) {\n+      \/\/ Partial copy to make dst address 32 byte aligned.\n+      __ leaq(temp2, Address(to, temp1, (Address::ScaleFactor)(shift), 0));\n+      __ andq(temp2, 31);\n+      __ jcc(Assembler::equal, L_main_pre_loop);\n@@ -1791,2 +1763,2 @@\n-        \/\/ Tail loop.\n-        __ jmp(L_tail);\n+      if (shift) {\n+        __ shrq(temp2, shift);\n@@ -1794,0 +1766,2 @@\n+      __ subq(temp1, temp2);\n+      __ copy32_masked_avx(to, from, xmm1, k2, temp2, temp1, temp3, shift);\n@@ -1795,6 +1769,2 @@\n-      if (MaxVectorSize > 32) {\n-        __ BIND(L_pre_main_post_64);\n-        \/\/ Partial copy to make dst address 64 byte aligned.\n-        __ leaq(temp2, Address(to, temp1, (Address::ScaleFactor)(shift), 0));\n-        __ andq(temp2, 63);\n-        __ jcc(Assembler::equal, L_main_pre_loop_64bytes);\n+      __ cmpq(temp1, loop_size[shift]);\n+      __ jcc(Assembler::less, L_tail);\n@@ -1802,34 +1772,25 @@\n-        if (shift) {\n-          __ shrq(temp2, shift);\n-        }\n-        __ subq(temp1, temp2);\n-        __ copy64_masked_avx(to, from, xmm1, k2, temp2, temp1, temp3, shift, 0 , true);\n-\n-        __ cmpq(temp1, loop_size[shift]);\n-        __ jcc(Assembler::less, L_tail64);\n-\n-        __ BIND(L_main_pre_loop_64bytes);\n-\n-        \/\/ Main loop with aligned copy block size of 192 bytes at\n-        \/\/ 64 byte copy granularity.\n-        __ align32();\n-        __ BIND(L_main_loop_64bytes);\n-           __ copy64_avx(to, from, temp1, xmm1, true, shift, -64 , true);\n-           __ copy64_avx(to, from, temp1, xmm1, true, shift, -128, true);\n-           __ copy64_avx(to, from, temp1, xmm1, true, shift, -192, true);\n-           __ subq(temp1, loop_size[shift]);\n-           __ cmpq(temp1, loop_size[shift]);\n-           __ jcc(Assembler::greater, L_main_loop_64bytes);\n-\n-        \/\/ Zero length check.\n-        __ cmpq(temp1, 0);\n-        __ jcc(Assembler::lessEqual, L_exit);\n-\n-        __ BIND(L_tail64);\n-\n-        \/\/ Tail handling using 64 byte [masked] vector copy operations.\n-        use64byteVector = true;\n-        __ mov64(temp2, 0);\n-        __ movq(temp3, temp1);\n-        __ arraycopy_avx3_special_cases_conjoint(xmm1, k2, from, to, temp2, temp3, temp1, shift,\n-                                                 temp4, use64byteVector, L_entry, L_exit);\n+      __ BIND(L_main_pre_loop);\n+\n+      \/\/ Main loop with aligned copy block size of 192 bytes at 32 byte granularity.\n+      __ align32();\n+      __ BIND(L_main_loop);\n+         __ copy64_avx(to, from, temp1, xmm1, true, shift, -64);\n+         __ copy64_avx(to, from, temp1, xmm1, true, shift, -128);\n+         __ copy64_avx(to, from, temp1, xmm1, true, shift, -192);\n+         __ subptr(temp1, loop_size[shift]);\n+         __ cmpq(temp1, loop_size[shift]);\n+         __ jcc(Assembler::greater, L_main_loop);\n+\n+      \/\/ Tail loop.\n+      __ jmp(L_tail);\n+    }\n+\n+    if (MaxVectorSize > 32) {\n+      __ BIND(L_pre_main_post_64);\n+      \/\/ Partial copy to make dst address 64 byte aligned.\n+      __ leaq(temp2, Address(to, temp1, (Address::ScaleFactor)(shift), 0));\n+      __ andq(temp2, 63);\n+      __ jcc(Assembler::equal, L_main_pre_loop_64bytes);\n+\n+      if (shift) {\n+        __ shrq(temp2, shift);\n@@ -1837,7 +1798,31 @@\n-      __ BIND(L_exit);\n-    }\n-    address ucme_exit_pc = __ pc();\n-    \/\/ When called from generic_arraycopy r11 contains specific values\n-    \/\/ used during arraycopy epilogue, re-initializing r11.\n-    if(is_oop) {\n-      __ movq(r11, count);\n+      __ subq(temp1, temp2);\n+      __ copy64_masked_avx(to, from, xmm1, k2, temp2, temp1, temp3, shift, 0 , true);\n+\n+      __ cmpq(temp1, loop_size[shift]);\n+      __ jcc(Assembler::less, L_tail64);\n+\n+      __ BIND(L_main_pre_loop_64bytes);\n+\n+      \/\/ Main loop with aligned copy block size of 192 bytes at\n+      \/\/ 64 byte copy granularity.\n+      __ align32();\n+      __ BIND(L_main_loop_64bytes);\n+         __ copy64_avx(to, from, temp1, xmm1, true, shift, -64 , true);\n+         __ copy64_avx(to, from, temp1, xmm1, true, shift, -128, true);\n+         __ copy64_avx(to, from, temp1, xmm1, true, shift, -192, true);\n+         __ subq(temp1, loop_size[shift]);\n+         __ cmpq(temp1, loop_size[shift]);\n+         __ jcc(Assembler::greater, L_main_loop_64bytes);\n+\n+      \/\/ Zero length check.\n+      __ cmpq(temp1, 0);\n+      __ jcc(Assembler::lessEqual, L_exit);\n+\n+      __ BIND(L_tail64);\n+\n+      \/\/ Tail handling using 64 byte [masked] vector copy operations.\n+      use64byteVector = true;\n+      __ mov64(temp2, 0);\n+      __ movq(temp3, temp1);\n+      __ arraycopy_avx3_special_cases_conjoint(xmm1, k2, from, to, temp2, temp3, temp1, shift,\n+                                               temp4, use64byteVector, L_entry, L_exit);\n@@ -1845,8 +1830,7 @@\n-    bs->arraycopy_epilogue(_masm, decorators, type, from, to, count);\n-    restore_argument_regs(type);\n-    INC_COUNTER_NP(get_profile_ctr(shift), rscratch1); \/\/ Update counter after rscratch1 is free\n-    __ xorptr(rax, rax); \/\/ return 0\n-    __ vzeroupper();\n-    __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    __ ret(0);\n-    return start;\n+    __ BIND(L_exit);\n+  }\n+  address ucme_exit_pc = __ pc();\n+  \/\/ When called from generic_arraycopy r11 contains specific values\n+  \/\/ used during arraycopy epilogue, re-initializing r11.\n+  if(is_oop) {\n+    __ movq(r11, count);\n@@ -1854,0 +1838,10 @@\n+  bs->arraycopy_epilogue(_masm, decorators, type, from, to, count);\n+  restore_argument_regs(type);\n+  INC_COUNTER_NP(get_profile_ctr(shift), rscratch1); \/\/ Update counter after rscratch1 is free\n+  __ xorptr(rax, rax); \/\/ return 0\n+  __ vzeroupper();\n+  __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ ret(0);\n+\n+  return start;\n+}\n@@ -1857,20 +1851,20 @@\n-  \/\/ Arguments:\n-  \/\/   aligned - true => Input and output aligned on a HeapWord == 8-byte boundary\n-  \/\/             ignored\n-  \/\/   name    - stub name string\n-  \/\/\n-  \/\/ Inputs:\n-  \/\/   c_rarg0   - source array address\n-  \/\/   c_rarg1   - destination array address\n-  \/\/   c_rarg2   - element count, treated as ssize_t, can be zero\n-  \/\/\n-  \/\/ If 'from' and\/or 'to' are aligned on 4-, 2-, or 1-byte boundaries,\n-  \/\/ we let the hardware handle it.  The one to eight bytes within words,\n-  \/\/ dwords or qwords that span cache line boundaries will still be loaded\n-  \/\/ and stored atomically.\n-  \/\/\n-  \/\/ Side Effects:\n-  \/\/   disjoint_byte_copy_entry is set to the no-overlap entry point\n-  \/\/   used by generate_conjoint_byte_copy().\n-  \/\/\n-  address generate_disjoint_byte_copy(bool aligned, address* entry, const char *name) {\n+\/\/ Arguments:\n+\/\/   aligned - true => Input and output aligned on a HeapWord == 8-byte boundary\n+\/\/             ignored\n+\/\/   name    - stub name string\n+\/\/\n+\/\/ Inputs:\n+\/\/   c_rarg0   - source array address\n+\/\/   c_rarg1   - destination array address\n+\/\/   c_rarg2   - element count, treated as ssize_t, can be zero\n+\/\/\n+\/\/ If 'from' and\/or 'to' are aligned on 4-, 2-, or 1-byte boundaries,\n+\/\/ we let the hardware handle it.  The one to eight bytes within words,\n+\/\/ dwords or qwords that span cache line boundaries will still be loaded\n+\/\/ and stored atomically.\n+\/\/\n+\/\/ Side Effects:\n+\/\/   disjoint_byte_copy_entry is set to the no-overlap entry point\n+\/\/   used by generate_conjoint_byte_copy().\n+\/\/\n+address StubGenerator::generate_disjoint_byte_copy(bool aligned, address* entry, const char *name) {\n@@ -1878,4 +1872,4 @@\n-    if (VM_Version::supports_avx512vlbw() && VM_Version::supports_bmi2() && MaxVectorSize  >= 32) {\n-       return generate_disjoint_copy_avx3_masked(entry, \"jbyte_disjoint_arraycopy_avx3\", 0,\n-                                                 aligned, false, false);\n-    }\n+  if (VM_Version::supports_avx512vlbw() && VM_Version::supports_bmi2() && MaxVectorSize  >= 32) {\n+     return generate_disjoint_copy_avx3_masked(entry, \"jbyte_disjoint_arraycopy_avx3\", 0,\n+                                               aligned, false, false);\n+  }\n@@ -1883,34 +1877,24 @@\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", name);\n-    address start = __ pc();\n-\n-    Label L_copy_bytes, L_copy_8_bytes, L_copy_4_bytes, L_copy_2_bytes;\n-    Label L_copy_byte, L_exit;\n-    const Register from        = rdi;  \/\/ source array address\n-    const Register to          = rsi;  \/\/ destination array address\n-    const Register count       = rdx;  \/\/ elements count\n-    const Register byte_count  = rcx;\n-    const Register qword_count = count;\n-    const Register end_from    = from; \/\/ source array end address\n-    const Register end_to      = to;   \/\/ destination array end address\n-    \/\/ End pointers are inclusive, and if count is not zero they point\n-    \/\/ to the last unit copied:  end_to[0] := end_from[0]\n-\n-    __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    assert_clean_int(c_rarg2, rax);    \/\/ Make sure 'count' is clean int.\n-\n-    if (entry != NULL) {\n-      *entry = __ pc();\n-       \/\/ caller can pass a 64-bit byte count here (from Unsafe.copyMemory)\n-      BLOCK_COMMENT(\"Entry:\");\n-    }\n-\n-    setup_arg_regs(); \/\/ from => rdi, to => rsi, count => rdx\n-                      \/\/ r9 and r10 may be used to save non-volatile registers\n-\n-    {\n-      \/\/ UnsafeCopyMemory page error: continue after ucm\n-      UnsafeCopyMemoryMark ucmm(this, !aligned, true);\n-      \/\/ 'from', 'to' and 'count' are now valid\n-      __ movptr(byte_count, count);\n-      __ shrptr(count, 3); \/\/ count => qword_count\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", name);\n+  address start = __ pc();\n+\n+  Label L_copy_bytes, L_copy_8_bytes, L_copy_4_bytes, L_copy_2_bytes;\n+  Label L_copy_byte, L_exit;\n+  const Register from        = rdi;  \/\/ source array address\n+  const Register to          = rsi;  \/\/ destination array address\n+  const Register count       = rdx;  \/\/ elements count\n+  const Register byte_count  = rcx;\n+  const Register qword_count = count;\n+  const Register end_from    = from; \/\/ source array end address\n+  const Register end_to      = to;   \/\/ destination array end address\n+  \/\/ End pointers are inclusive, and if count is not zero they point\n+  \/\/ to the last unit copied:  end_to[0] := end_from[0]\n+\n+  __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  assert_clean_int(c_rarg2, rax);    \/\/ Make sure 'count' is clean int.\n+\n+  if (entry != NULL) {\n+    *entry = __ pc();\n+     \/\/ caller can pass a 64-bit byte count here (from Unsafe.copyMemory)\n+    BLOCK_COMMENT(\"Entry:\");\n+  }\n@@ -1918,5 +1902,2 @@\n-      \/\/ Copy from low to high addresses.  Use 'to' as scratch.\n-      __ lea(end_from, Address(from, qword_count, Address::times_8, -8));\n-      __ lea(end_to,   Address(to,   qword_count, Address::times_8, -8));\n-      __ negptr(qword_count); \/\/ make the count negative\n-      __ jmp(L_copy_bytes);\n+  setup_arg_regs(); \/\/ from => rdi, to => rsi, count => rdx\n+                    \/\/ r9 and r10 may be used to save non-volatile registers\n@@ -1924,1 +1905,14 @@\n-      \/\/ Copy trailing qwords\n+  {\n+    \/\/ UnsafeCopyMemory page error: continue after ucm\n+    UnsafeCopyMemoryMark ucmm(this, !aligned, true);\n+    \/\/ 'from', 'to' and 'count' are now valid\n+    __ movptr(byte_count, count);\n+    __ shrptr(count, 3); \/\/ count => qword_count\n+\n+    \/\/ Copy from low to high addresses.  Use 'to' as scratch.\n+    __ lea(end_from, Address(from, qword_count, Address::times_8, -8));\n+    __ lea(end_to,   Address(to,   qword_count, Address::times_8, -8));\n+    __ negptr(qword_count); \/\/ make the count negative\n+    __ jmp(L_copy_bytes);\n+\n+    \/\/ Copy trailing qwords\n@@ -1926,4 +1920,4 @@\n-      __ movq(rax, Address(end_from, qword_count, Address::times_8, 8));\n-      __ movq(Address(end_to, qword_count, Address::times_8, 8), rax);\n-      __ increment(qword_count);\n-      __ jcc(Assembler::notZero, L_copy_8_bytes);\n+    __ movq(rax, Address(end_from, qword_count, Address::times_8, 8));\n+    __ movq(Address(end_to, qword_count, Address::times_8, 8), rax);\n+    __ increment(qword_count);\n+    __ jcc(Assembler::notZero, L_copy_8_bytes);\n@@ -1931,1 +1925,1 @@\n-      \/\/ Check for and copy trailing dword\n+    \/\/ Check for and copy trailing dword\n@@ -1933,4 +1927,4 @@\n-      __ testl(byte_count, 4);\n-      __ jccb(Assembler::zero, L_copy_2_bytes);\n-      __ movl(rax, Address(end_from, 8));\n-      __ movl(Address(end_to, 8), rax);\n+    __ testl(byte_count, 4);\n+    __ jccb(Assembler::zero, L_copy_2_bytes);\n+    __ movl(rax, Address(end_from, 8));\n+    __ movl(Address(end_to, 8), rax);\n@@ -1938,2 +1932,2 @@\n-      __ addptr(end_from, 4);\n-      __ addptr(end_to, 4);\n+    __ addptr(end_from, 4);\n+    __ addptr(end_to, 4);\n@@ -1941,1 +1935,1 @@\n-      \/\/ Check for and copy trailing word\n+    \/\/ Check for and copy trailing word\n@@ -1943,4 +1937,4 @@\n-      __ testl(byte_count, 2);\n-      __ jccb(Assembler::zero, L_copy_byte);\n-      __ movw(rax, Address(end_from, 8));\n-      __ movw(Address(end_to, 8), rax);\n+    __ testl(byte_count, 2);\n+    __ jccb(Assembler::zero, L_copy_byte);\n+    __ movw(rax, Address(end_from, 8));\n+    __ movw(Address(end_to, 8), rax);\n@@ -1948,2 +1942,2 @@\n-      __ addptr(end_from, 2);\n-      __ addptr(end_to, 2);\n+    __ addptr(end_from, 2);\n+    __ addptr(end_to, 2);\n@@ -1951,1 +1945,1 @@\n-      \/\/ Check for and copy trailing byte\n+    \/\/ Check for and copy trailing byte\n@@ -1953,5 +1947,5 @@\n-      __ testl(byte_count, 1);\n-      __ jccb(Assembler::zero, L_exit);\n-      __ movb(rax, Address(end_from, 8));\n-      __ movb(Address(end_to, 8), rax);\n-    }\n+    __ testl(byte_count, 1);\n+    __ jccb(Assembler::zero, L_exit);\n+    __ movb(rax, Address(end_from, 8));\n+    __ movb(Address(end_to, 8), rax);\n+  }\n@@ -1959,7 +1953,7 @@\n-    address ucme_exit_pc = __ pc();\n-    restore_arg_regs();\n-    INC_COUNTER_NP(SharedRuntime::_jbyte_array_copy_ctr, rscratch1); \/\/ Update counter after rscratch1 is free\n-    __ xorptr(rax, rax); \/\/ return 0\n-    __ vzeroupper();\n-    __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    __ ret(0);\n+  address ucme_exit_pc = __ pc();\n+  restore_arg_regs();\n+  INC_COUNTER_NP(SharedRuntime::_jbyte_array_copy_ctr, rscratch1); \/\/ Update counter after rscratch1 is free\n+  __ xorptr(rax, rax); \/\/ return 0\n+  __ vzeroupper();\n+  __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ ret(0);\n@@ -1967,7 +1961,5 @@\n-    {\n-      UnsafeCopyMemoryMark ucmm(this, !aligned, false, ucme_exit_pc);\n-      \/\/ Copy in multi-bytes chunks\n-      copy_bytes_forward(end_from, end_to, qword_count, rax, L_copy_bytes, L_copy_8_bytes);\n-      __ jmp(L_copy_4_bytes);\n-    }\n-    return start;\n+  {\n+    UnsafeCopyMemoryMark ucmm(this, !aligned, false, ucme_exit_pc);\n+    \/\/ Copy in multi-bytes chunks\n+    copy_bytes_forward(end_from, end_to, qword_count, rax, L_copy_bytes, L_copy_8_bytes);\n+    __ jmp(L_copy_4_bytes);\n@@ -1975,0 +1967,2 @@\n+  return start;\n+}\n@@ -1976,17 +1970,17 @@\n-  \/\/ Arguments:\n-  \/\/   aligned - true => Input and output aligned on a HeapWord == 8-byte boundary\n-  \/\/             ignored\n-  \/\/   name    - stub name string\n-  \/\/\n-  \/\/ Inputs:\n-  \/\/   c_rarg0   - source array address\n-  \/\/   c_rarg1   - destination array address\n-  \/\/   c_rarg2   - element count, treated as ssize_t, can be zero\n-  \/\/\n-  \/\/ If 'from' and\/or 'to' are aligned on 4-, 2-, or 1-byte boundaries,\n-  \/\/ we let the hardware handle it.  The one to eight bytes within words,\n-  \/\/ dwords or qwords that span cache line boundaries will still be loaded\n-  \/\/ and stored atomically.\n-  \/\/\n-  address generate_conjoint_byte_copy(bool aligned, address nooverlap_target,\n-                                      address* entry, const char *name) {\n+\/\/ Arguments:\n+\/\/   aligned - true => Input and output aligned on a HeapWord == 8-byte boundary\n+\/\/             ignored\n+\/\/   name    - stub name string\n+\/\/\n+\/\/ Inputs:\n+\/\/   c_rarg0   - source array address\n+\/\/   c_rarg1   - destination array address\n+\/\/   c_rarg2   - element count, treated as ssize_t, can be zero\n+\/\/\n+\/\/ If 'from' and\/or 'to' are aligned on 4-, 2-, or 1-byte boundaries,\n+\/\/ we let the hardware handle it.  The one to eight bytes within words,\n+\/\/ dwords or qwords that span cache line boundaries will still be loaded\n+\/\/ and stored atomically.\n+\/\/\n+address StubGenerator::generate_conjoint_byte_copy(bool aligned, address nooverlap_target,\n+                                                   address* entry, const char *name) {\n@@ -1994,4 +1988,4 @@\n-    if (VM_Version::supports_avx512vlbw() && VM_Version::supports_bmi2() && MaxVectorSize  >= 32) {\n-       return generate_conjoint_copy_avx3_masked(entry, \"jbyte_conjoint_arraycopy_avx3\", 0,\n-                                                 nooverlap_target, aligned, false, false);\n-    }\n+  if (VM_Version::supports_avx512vlbw() && VM_Version::supports_bmi2() && MaxVectorSize  >= 32) {\n+     return generate_conjoint_copy_avx3_masked(entry, \"jbyte_conjoint_arraycopy_avx3\", 0,\n+                                               nooverlap_target, aligned, false, false);\n+  }\n@@ -1999,32 +1993,19 @@\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", name);\n-    address start = __ pc();\n-\n-    Label L_copy_bytes, L_copy_8_bytes, L_copy_4_bytes, L_copy_2_bytes;\n-    const Register from        = rdi;  \/\/ source array address\n-    const Register to          = rsi;  \/\/ destination array address\n-    const Register count       = rdx;  \/\/ elements count\n-    const Register byte_count  = rcx;\n-    const Register qword_count = count;\n-\n-    __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    assert_clean_int(c_rarg2, rax);    \/\/ Make sure 'count' is clean int.\n-\n-    if (entry != NULL) {\n-      *entry = __ pc();\n-      \/\/ caller can pass a 64-bit byte count here (from Unsafe.copyMemory)\n-      BLOCK_COMMENT(\"Entry:\");\n-    }\n-\n-    array_overlap_test(nooverlap_target, Address::times_1);\n-    setup_arg_regs(); \/\/ from => rdi, to => rsi, count => rdx\n-                      \/\/ r9 and r10 may be used to save non-volatile registers\n-\n-    {\n-      \/\/ UnsafeCopyMemory page error: continue after ucm\n-      UnsafeCopyMemoryMark ucmm(this, !aligned, true);\n-      \/\/ 'from', 'to' and 'count' are now valid\n-      __ movptr(byte_count, count);\n-      __ shrptr(count, 3);   \/\/ count => qword_count\n-\n-      \/\/ Copy from high to low addresses.\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", name);\n+  address start = __ pc();\n+\n+  Label L_copy_bytes, L_copy_8_bytes, L_copy_4_bytes, L_copy_2_bytes;\n+  const Register from        = rdi;  \/\/ source array address\n+  const Register to          = rsi;  \/\/ destination array address\n+  const Register count       = rdx;  \/\/ elements count\n+  const Register byte_count  = rcx;\n+  const Register qword_count = count;\n+\n+  __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  assert_clean_int(c_rarg2, rax);    \/\/ Make sure 'count' is clean int.\n+\n+  if (entry != NULL) {\n+    *entry = __ pc();\n+    \/\/ caller can pass a 64-bit byte count here (from Unsafe.copyMemory)\n+    BLOCK_COMMENT(\"Entry:\");\n+  }\n@@ -2032,6 +2013,3 @@\n-      \/\/ Check for and copy trailing byte\n-      __ testl(byte_count, 1);\n-      __ jcc(Assembler::zero, L_copy_2_bytes);\n-      __ movb(rax, Address(from, byte_count, Address::times_1, -1));\n-      __ movb(Address(to, byte_count, Address::times_1, -1), rax);\n-      __ decrement(byte_count); \/\/ Adjust for possible trailing word\n+  array_overlap_test(nooverlap_target, Address::times_1);\n+  setup_arg_regs(); \/\/ from => rdi, to => rsi, count => rdx\n+                    \/\/ r9 and r10 may be used to save non-volatile registers\n@@ -2039,1 +2017,17 @@\n-      \/\/ Check for and copy trailing word\n+  {\n+    \/\/ UnsafeCopyMemory page error: continue after ucm\n+    UnsafeCopyMemoryMark ucmm(this, !aligned, true);\n+    \/\/ 'from', 'to' and 'count' are now valid\n+    __ movptr(byte_count, count);\n+    __ shrptr(count, 3);   \/\/ count => qword_count\n+\n+    \/\/ Copy from high to low addresses.\n+\n+    \/\/ Check for and copy trailing byte\n+    __ testl(byte_count, 1);\n+    __ jcc(Assembler::zero, L_copy_2_bytes);\n+    __ movb(rax, Address(from, byte_count, Address::times_1, -1));\n+    __ movb(Address(to, byte_count, Address::times_1, -1), rax);\n+    __ decrement(byte_count); \/\/ Adjust for possible trailing word\n+\n+    \/\/ Check for and copy trailing word\n@@ -2041,4 +2035,4 @@\n-      __ testl(byte_count, 2);\n-      __ jcc(Assembler::zero, L_copy_4_bytes);\n-      __ movw(rax, Address(from, byte_count, Address::times_1, -2));\n-      __ movw(Address(to, byte_count, Address::times_1, -2), rax);\n+    __ testl(byte_count, 2);\n+    __ jcc(Assembler::zero, L_copy_4_bytes);\n+    __ movw(rax, Address(from, byte_count, Address::times_1, -2));\n+    __ movw(Address(to, byte_count, Address::times_1, -2), rax);\n@@ -2046,1 +2040,1 @@\n-      \/\/ Check for and copy trailing dword\n+    \/\/ Check for and copy trailing dword\n@@ -2048,5 +2042,5 @@\n-      __ testl(byte_count, 4);\n-      __ jcc(Assembler::zero, L_copy_bytes);\n-      __ movl(rax, Address(from, qword_count, Address::times_8));\n-      __ movl(Address(to, qword_count, Address::times_8), rax);\n-      __ jmp(L_copy_bytes);\n+    __ testl(byte_count, 4);\n+    __ jcc(Assembler::zero, L_copy_bytes);\n+    __ movl(rax, Address(from, qword_count, Address::times_8));\n+    __ movl(Address(to, qword_count, Address::times_8), rax);\n+    __ jmp(L_copy_bytes);\n@@ -2054,1 +2048,1 @@\n-      \/\/ Copy trailing qwords\n+    \/\/ Copy trailing qwords\n@@ -2056,24 +2050,11 @@\n-      __ movq(rax, Address(from, qword_count, Address::times_8, -8));\n-      __ movq(Address(to, qword_count, Address::times_8, -8), rax);\n-      __ decrement(qword_count);\n-      __ jcc(Assembler::notZero, L_copy_8_bytes);\n-    }\n-    restore_arg_regs();\n-    INC_COUNTER_NP(SharedRuntime::_jbyte_array_copy_ctr, rscratch1); \/\/ Update counter after rscratch1 is free\n-    __ xorptr(rax, rax); \/\/ return 0\n-    __ vzeroupper();\n-    __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    __ ret(0);\n-\n-    {\n-      \/\/ UnsafeCopyMemory page error: continue after ucm\n-      UnsafeCopyMemoryMark ucmm(this, !aligned, true);\n-      \/\/ Copy in multi-bytes chunks\n-      copy_bytes_backward(from, to, qword_count, rax, L_copy_bytes, L_copy_8_bytes);\n-    }\n-    restore_arg_regs();\n-    INC_COUNTER_NP(SharedRuntime::_jbyte_array_copy_ctr, rscratch1); \/\/ Update counter after rscratch1 is free\n-    __ xorptr(rax, rax); \/\/ return 0\n-    __ vzeroupper();\n-    __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    __ ret(0);\n+    __ movq(rax, Address(from, qword_count, Address::times_8, -8));\n+    __ movq(Address(to, qword_count, Address::times_8, -8), rax);\n+    __ decrement(qword_count);\n+    __ jcc(Assembler::notZero, L_copy_8_bytes);\n+  }\n+  restore_arg_regs();\n+  INC_COUNTER_NP(SharedRuntime::_jbyte_array_copy_ctr, rscratch1); \/\/ Update counter after rscratch1 is free\n+  __ xorptr(rax, rax); \/\/ return 0\n+  __ vzeroupper();\n+  __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ ret(0);\n@@ -2081,1 +2062,5 @@\n-    return start;\n+  {\n+    \/\/ UnsafeCopyMemory page error: continue after ucm\n+    UnsafeCopyMemoryMark ucmm(this, !aligned, true);\n+    \/\/ Copy in multi-bytes chunks\n+    copy_bytes_backward(from, to, qword_count, rax, L_copy_bytes, L_copy_8_bytes);\n@@ -2083,0 +2068,6 @@\n+  restore_arg_regs();\n+  INC_COUNTER_NP(SharedRuntime::_jbyte_array_copy_ctr, rscratch1); \/\/ Update counter after rscratch1 is free\n+  __ xorptr(rax, rax); \/\/ return 0\n+  __ vzeroupper();\n+  __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ ret(0);\n@@ -2084,20 +2075,23 @@\n-  \/\/ Arguments:\n-  \/\/   aligned - true => Input and output aligned on a HeapWord == 8-byte boundary\n-  \/\/             ignored\n-  \/\/   name    - stub name string\n-  \/\/\n-  \/\/ Inputs:\n-  \/\/   c_rarg0   - source array address\n-  \/\/   c_rarg1   - destination array address\n-  \/\/   c_rarg2   - element count, treated as ssize_t, can be zero\n-  \/\/\n-  \/\/ If 'from' and\/or 'to' are aligned on 4- or 2-byte boundaries, we\n-  \/\/ let the hardware handle it.  The two or four words within dwords\n-  \/\/ or qwords that span cache line boundaries will still be loaded\n-  \/\/ and stored atomically.\n-  \/\/\n-  \/\/ Side Effects:\n-  \/\/   disjoint_short_copy_entry is set to the no-overlap entry point\n-  \/\/   used by generate_conjoint_short_copy().\n-  \/\/\n-  address generate_disjoint_short_copy(bool aligned, address *entry, const char *name) {\n+  return start;\n+}\n+\n+\/\/ Arguments:\n+\/\/   aligned - true => Input and output aligned on a HeapWord == 8-byte boundary\n+\/\/             ignored\n+\/\/   name    - stub name string\n+\/\/\n+\/\/ Inputs:\n+\/\/   c_rarg0   - source array address\n+\/\/   c_rarg1   - destination array address\n+\/\/   c_rarg2   - element count, treated as ssize_t, can be zero\n+\/\/\n+\/\/ If 'from' and\/or 'to' are aligned on 4- or 2-byte boundaries, we\n+\/\/ let the hardware handle it.  The two or four words within dwords\n+\/\/ or qwords that span cache line boundaries will still be loaded\n+\/\/ and stored atomically.\n+\/\/\n+\/\/ Side Effects:\n+\/\/   disjoint_short_copy_entry is set to the no-overlap entry point\n+\/\/   used by generate_conjoint_short_copy().\n+\/\/\n+address StubGenerator::generate_disjoint_short_copy(bool aligned, address *entry, const char *name) {\n@@ -2105,4 +2099,4 @@\n-    if (VM_Version::supports_avx512vlbw() && VM_Version::supports_bmi2() && MaxVectorSize  >= 32) {\n-       return generate_disjoint_copy_avx3_masked(entry, \"jshort_disjoint_arraycopy_avx3\", 1,\n-                                                 aligned, false, false);\n-    }\n+  if (VM_Version::supports_avx512vlbw() && VM_Version::supports_bmi2() && MaxVectorSize  >= 32) {\n+     return generate_disjoint_copy_avx3_masked(entry, \"jshort_disjoint_arraycopy_avx3\", 1,\n+                                               aligned, false, false);\n+  }\n@@ -2111,33 +2105,23 @@\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", name);\n-    address start = __ pc();\n-\n-    Label L_copy_bytes, L_copy_8_bytes, L_copy_4_bytes,L_copy_2_bytes,L_exit;\n-    const Register from        = rdi;  \/\/ source array address\n-    const Register to          = rsi;  \/\/ destination array address\n-    const Register count       = rdx;  \/\/ elements count\n-    const Register word_count  = rcx;\n-    const Register qword_count = count;\n-    const Register end_from    = from; \/\/ source array end address\n-    const Register end_to      = to;   \/\/ destination array end address\n-    \/\/ End pointers are inclusive, and if count is not zero they point\n-    \/\/ to the last unit copied:  end_to[0] := end_from[0]\n-\n-    __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    assert_clean_int(c_rarg2, rax);    \/\/ Make sure 'count' is clean int.\n-\n-    if (entry != NULL) {\n-      *entry = __ pc();\n-      \/\/ caller can pass a 64-bit byte count here (from Unsafe.copyMemory)\n-      BLOCK_COMMENT(\"Entry:\");\n-    }\n-\n-    setup_arg_regs(); \/\/ from => rdi, to => rsi, count => rdx\n-                      \/\/ r9 and r10 may be used to save non-volatile registers\n-\n-    {\n-      \/\/ UnsafeCopyMemory page error: continue after ucm\n-      UnsafeCopyMemoryMark ucmm(this, !aligned, true);\n-      \/\/ 'from', 'to' and 'count' are now valid\n-      __ movptr(word_count, count);\n-      __ shrptr(count, 2); \/\/ count => qword_count\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", name);\n+  address start = __ pc();\n+\n+  Label L_copy_bytes, L_copy_8_bytes, L_copy_4_bytes,L_copy_2_bytes,L_exit;\n+  const Register from        = rdi;  \/\/ source array address\n+  const Register to          = rsi;  \/\/ destination array address\n+  const Register count       = rdx;  \/\/ elements count\n+  const Register word_count  = rcx;\n+  const Register qword_count = count;\n+  const Register end_from    = from; \/\/ source array end address\n+  const Register end_to      = to;   \/\/ destination array end address\n+  \/\/ End pointers are inclusive, and if count is not zero they point\n+  \/\/ to the last unit copied:  end_to[0] := end_from[0]\n+\n+  __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  assert_clean_int(c_rarg2, rax);    \/\/ Make sure 'count' is clean int.\n+\n+  if (entry != NULL) {\n+    *entry = __ pc();\n+    \/\/ caller can pass a 64-bit byte count here (from Unsafe.copyMemory)\n+    BLOCK_COMMENT(\"Entry:\");\n+  }\n@@ -2145,5 +2129,2 @@\n-      \/\/ Copy from low to high addresses.  Use 'to' as scratch.\n-      __ lea(end_from, Address(from, qword_count, Address::times_8, -8));\n-      __ lea(end_to,   Address(to,   qword_count, Address::times_8, -8));\n-      __ negptr(qword_count);\n-      __ jmp(L_copy_bytes);\n+  setup_arg_regs(); \/\/ from => rdi, to => rsi, count => rdx\n+                    \/\/ r9 and r10 may be used to save non-volatile registers\n@@ -2151,1 +2132,14 @@\n-      \/\/ Copy trailing qwords\n+  {\n+    \/\/ UnsafeCopyMemory page error: continue after ucm\n+    UnsafeCopyMemoryMark ucmm(this, !aligned, true);\n+    \/\/ 'from', 'to' and 'count' are now valid\n+    __ movptr(word_count, count);\n+    __ shrptr(count, 2); \/\/ count => qword_count\n+\n+    \/\/ Copy from low to high addresses.  Use 'to' as scratch.\n+    __ lea(end_from, Address(from, qword_count, Address::times_8, -8));\n+    __ lea(end_to,   Address(to,   qword_count, Address::times_8, -8));\n+    __ negptr(qword_count);\n+    __ jmp(L_copy_bytes);\n+\n+    \/\/ Copy trailing qwords\n@@ -2153,4 +2147,4 @@\n-      __ movq(rax, Address(end_from, qword_count, Address::times_8, 8));\n-      __ movq(Address(end_to, qword_count, Address::times_8, 8), rax);\n-      __ increment(qword_count);\n-      __ jcc(Assembler::notZero, L_copy_8_bytes);\n+    __ movq(rax, Address(end_from, qword_count, Address::times_8, 8));\n+    __ movq(Address(end_to, qword_count, Address::times_8, 8), rax);\n+    __ increment(qword_count);\n+    __ jcc(Assembler::notZero, L_copy_8_bytes);\n@@ -2158,2 +2152,2 @@\n-      \/\/ Original 'dest' is trashed, so we can't use it as a\n-      \/\/ base register for a possible trailing word copy\n+    \/\/ Original 'dest' is trashed, so we can't use it as a\n+    \/\/ base register for a possible trailing word copy\n@@ -2161,1 +2155,1 @@\n-      \/\/ Check for and copy trailing dword\n+    \/\/ Check for and copy trailing dword\n@@ -2163,4 +2157,4 @@\n-      __ testl(word_count, 2);\n-      __ jccb(Assembler::zero, L_copy_2_bytes);\n-      __ movl(rax, Address(end_from, 8));\n-      __ movl(Address(end_to, 8), rax);\n+    __ testl(word_count, 2);\n+    __ jccb(Assembler::zero, L_copy_2_bytes);\n+    __ movl(rax, Address(end_from, 8));\n+    __ movl(Address(end_to, 8), rax);\n@@ -2168,2 +2162,2 @@\n-      __ addptr(end_from, 4);\n-      __ addptr(end_to, 4);\n+    __ addptr(end_from, 4);\n+    __ addptr(end_to, 4);\n@@ -2171,1 +2165,1 @@\n-      \/\/ Check for and copy trailing word\n+    \/\/ Check for and copy trailing word\n@@ -2173,5 +2167,5 @@\n-      __ testl(word_count, 1);\n-      __ jccb(Assembler::zero, L_exit);\n-      __ movw(rax, Address(end_from, 8));\n-      __ movw(Address(end_to, 8), rax);\n-    }\n+    __ testl(word_count, 1);\n+    __ jccb(Assembler::zero, L_exit);\n+    __ movw(rax, Address(end_from, 8));\n+    __ movw(Address(end_to, 8), rax);\n+  }\n@@ -2179,14 +2173,7 @@\n-    address ucme_exit_pc = __ pc();\n-    restore_arg_regs();\n-    INC_COUNTER_NP(SharedRuntime::_jshort_array_copy_ctr, rscratch1); \/\/ Update counter after rscratch1 is free\n-    __ xorptr(rax, rax); \/\/ return 0\n-    __ vzeroupper();\n-    __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    __ ret(0);\n-\n-    {\n-      UnsafeCopyMemoryMark ucmm(this, !aligned, false, ucme_exit_pc);\n-      \/\/ Copy in multi-bytes chunks\n-      copy_bytes_forward(end_from, end_to, qword_count, rax, L_copy_bytes, L_copy_8_bytes);\n-      __ jmp(L_copy_4_bytes);\n-    }\n+  address ucme_exit_pc = __ pc();\n+  restore_arg_regs();\n+  INC_COUNTER_NP(SharedRuntime::_jshort_array_copy_ctr, rscratch1); \/\/ Update counter after rscratch1 is free\n+  __ xorptr(rax, rax); \/\/ return 0\n+  __ vzeroupper();\n+  __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ ret(0);\n@@ -2194,1 +2181,5 @@\n-    return start;\n+  {\n+    UnsafeCopyMemoryMark ucmm(this, !aligned, false, ucme_exit_pc);\n+    \/\/ Copy in multi-bytes chunks\n+    copy_bytes_forward(end_from, end_to, qword_count, rax, L_copy_bytes, L_copy_8_bytes);\n+    __ jmp(L_copy_4_bytes);\n@@ -2197,4 +2188,2 @@\n-  address generate_fill(BasicType t, bool aligned, const char *name) {\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", name);\n-    address start = __ pc();\n+  return start;\n+}\n@@ -2202,1 +2191,4 @@\n-    BLOCK_COMMENT(\"Entry:\");\n+address StubGenerator::generate_fill(BasicType t, bool aligned, const char *name) {\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", name);\n+  address start = __ pc();\n@@ -2204,4 +2196,1 @@\n-    const Register to       = c_rarg0;  \/\/ destination array address\n-    const Register value    = c_rarg1;  \/\/ value\n-    const Register count    = c_rarg2;  \/\/ elements count\n-    __ mov(r11, count);\n+  BLOCK_COMMENT(\"Entry:\");\n@@ -2209,1 +2198,4 @@\n-    __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  const Register to       = c_rarg0;  \/\/ destination array address\n+  const Register value    = c_rarg1;  \/\/ value\n+  const Register count    = c_rarg2;  \/\/ elements count\n+  __ mov(r11, count);\n@@ -2211,1 +2203,1 @@\n-    __ generate_fill(t, aligned, to, value, r11, rax, xmm0);\n+  __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n@@ -2213,5 +2205,1 @@\n-    __ vzeroupper();\n-    __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    __ ret(0);\n-    return start;\n-  }\n+  __ generate_fill(t, aligned, to, value, r11, rax, xmm0);\n@@ -2219,17 +2207,24 @@\n-  \/\/ Arguments:\n-  \/\/   aligned - true => Input and output aligned on a HeapWord == 8-byte boundary\n-  \/\/             ignored\n-  \/\/   name    - stub name string\n-  \/\/\n-  \/\/ Inputs:\n-  \/\/   c_rarg0   - source array address\n-  \/\/   c_rarg1   - destination array address\n-  \/\/   c_rarg2   - element count, treated as ssize_t, can be zero\n-  \/\/\n-  \/\/ If 'from' and\/or 'to' are aligned on 4- or 2-byte boundaries, we\n-  \/\/ let the hardware handle it.  The two or four words within dwords\n-  \/\/ or qwords that span cache line boundaries will still be loaded\n-  \/\/ and stored atomically.\n-  \/\/\n-  address generate_conjoint_short_copy(bool aligned, address nooverlap_target,\n-                                       address *entry, const char *name) {\n+  __ vzeroupper();\n+  __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ ret(0);\n+\n+  return start;\n+}\n+\n+\/\/ Arguments:\n+\/\/   aligned - true => Input and output aligned on a HeapWord == 8-byte boundary\n+\/\/             ignored\n+\/\/   name    - stub name string\n+\/\/\n+\/\/ Inputs:\n+\/\/   c_rarg0   - source array address\n+\/\/   c_rarg1   - destination array address\n+\/\/   c_rarg2   - element count, treated as ssize_t, can be zero\n+\/\/\n+\/\/ If 'from' and\/or 'to' are aligned on 4- or 2-byte boundaries, we\n+\/\/ let the hardware handle it.  The two or four words within dwords\n+\/\/ or qwords that span cache line boundaries will still be loaded\n+\/\/ and stored atomically.\n+\/\/\n+address StubGenerator::generate_conjoint_short_copy(bool aligned, address nooverlap_target,\n+                                                    address *entry, const char *name) {\n@@ -2237,4 +2232,4 @@\n-    if (VM_Version::supports_avx512vlbw() && VM_Version::supports_bmi2() && MaxVectorSize  >= 32) {\n-       return generate_conjoint_copy_avx3_masked(entry, \"jshort_conjoint_arraycopy_avx3\", 1,\n-                                                 nooverlap_target, aligned, false, false);\n-    }\n+  if (VM_Version::supports_avx512vlbw() && VM_Version::supports_bmi2() && MaxVectorSize  >= 32) {\n+     return generate_conjoint_copy_avx3_masked(entry, \"jshort_conjoint_arraycopy_avx3\", 1,\n+                                               nooverlap_target, aligned, false, false);\n+  }\n@@ -2242,19 +2237,19 @@\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", name);\n-    address start = __ pc();\n-\n-    Label L_copy_bytes, L_copy_8_bytes, L_copy_4_bytes;\n-    const Register from        = rdi;  \/\/ source array address\n-    const Register to          = rsi;  \/\/ destination array address\n-    const Register count       = rdx;  \/\/ elements count\n-    const Register word_count  = rcx;\n-    const Register qword_count = count;\n-\n-    __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    assert_clean_int(c_rarg2, rax);    \/\/ Make sure 'count' is clean int.\n-\n-    if (entry != NULL) {\n-      *entry = __ pc();\n-      \/\/ caller can pass a 64-bit byte count here (from Unsafe.copyMemory)\n-      BLOCK_COMMENT(\"Entry:\");\n-    }\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", name);\n+  address start = __ pc();\n+\n+  Label L_copy_bytes, L_copy_8_bytes, L_copy_4_bytes;\n+  const Register from        = rdi;  \/\/ source array address\n+  const Register to          = rsi;  \/\/ destination array address\n+  const Register count       = rdx;  \/\/ elements count\n+  const Register word_count  = rcx;\n+  const Register qword_count = count;\n+\n+  __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  assert_clean_int(c_rarg2, rax);    \/\/ Make sure 'count' is clean int.\n+\n+  if (entry != NULL) {\n+    *entry = __ pc();\n+    \/\/ caller can pass a 64-bit byte count here (from Unsafe.copyMemory)\n+    BLOCK_COMMENT(\"Entry:\");\n+  }\n@@ -2262,3 +2257,3 @@\n-    array_overlap_test(nooverlap_target, Address::times_2);\n-    setup_arg_regs(); \/\/ from => rdi, to => rsi, count => rdx\n-                      \/\/ r9 and r10 may be used to save non-volatile registers\n+  array_overlap_test(nooverlap_target, Address::times_2);\n+  setup_arg_regs(); \/\/ from => rdi, to => rsi, count => rdx\n+                    \/\/ r9 and r10 may be used to save non-volatile registers\n@@ -2266,6 +2261,6 @@\n-    {\n-      \/\/ UnsafeCopyMemory page error: continue after ucm\n-      UnsafeCopyMemoryMark ucmm(this, !aligned, true);\n-      \/\/ 'from', 'to' and 'count' are now valid\n-      __ movptr(word_count, count);\n-      __ shrptr(count, 2); \/\/ count => qword_count\n+  {\n+    \/\/ UnsafeCopyMemory page error: continue after ucm\n+    UnsafeCopyMemoryMark ucmm(this, !aligned, true);\n+    \/\/ 'from', 'to' and 'count' are now valid\n+    __ movptr(word_count, count);\n+    __ shrptr(count, 2); \/\/ count => qword_count\n@@ -2273,1 +2268,1 @@\n-      \/\/ Copy from high to low addresses.  Use 'to' as scratch.\n+    \/\/ Copy from high to low addresses.  Use 'to' as scratch.\n@@ -2275,5 +2270,5 @@\n-      \/\/ Check for and copy trailing word\n-      __ testl(word_count, 1);\n-      __ jccb(Assembler::zero, L_copy_4_bytes);\n-      __ movw(rax, Address(from, word_count, Address::times_2, -2));\n-      __ movw(Address(to, word_count, Address::times_2, -2), rax);\n+    \/\/ Check for and copy trailing word\n+    __ testl(word_count, 1);\n+    __ jccb(Assembler::zero, L_copy_4_bytes);\n+    __ movw(rax, Address(from, word_count, Address::times_2, -2));\n+    __ movw(Address(to, word_count, Address::times_2, -2), rax);\n@@ -2281,1 +2276,1 @@\n-     \/\/ Check for and copy trailing dword\n+   \/\/ Check for and copy trailing dword\n@@ -2283,5 +2278,5 @@\n-      __ testl(word_count, 2);\n-      __ jcc(Assembler::zero, L_copy_bytes);\n-      __ movl(rax, Address(from, qword_count, Address::times_8));\n-      __ movl(Address(to, qword_count, Address::times_8), rax);\n-      __ jmp(L_copy_bytes);\n+    __ testl(word_count, 2);\n+    __ jcc(Assembler::zero, L_copy_bytes);\n+    __ movl(rax, Address(from, qword_count, Address::times_8));\n+    __ movl(Address(to, qword_count, Address::times_8), rax);\n+    __ jmp(L_copy_bytes);\n@@ -2289,1 +2284,1 @@\n-      \/\/ Copy trailing qwords\n+    \/\/ Copy trailing qwords\n@@ -2291,24 +2286,11 @@\n-      __ movq(rax, Address(from, qword_count, Address::times_8, -8));\n-      __ movq(Address(to, qword_count, Address::times_8, -8), rax);\n-      __ decrement(qword_count);\n-      __ jcc(Assembler::notZero, L_copy_8_bytes);\n-    }\n-    restore_arg_regs();\n-    INC_COUNTER_NP(SharedRuntime::_jshort_array_copy_ctr, rscratch1); \/\/ Update counter after rscratch1 is free\n-    __ xorptr(rax, rax); \/\/ return 0\n-    __ vzeroupper();\n-    __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    __ ret(0);\n-\n-    {\n-      \/\/ UnsafeCopyMemory page error: continue after ucm\n-      UnsafeCopyMemoryMark ucmm(this, !aligned, true);\n-      \/\/ Copy in multi-bytes chunks\n-      copy_bytes_backward(from, to, qword_count, rax, L_copy_bytes, L_copy_8_bytes);\n-    }\n-    restore_arg_regs();\n-    INC_COUNTER_NP(SharedRuntime::_jshort_array_copy_ctr, rscratch1); \/\/ Update counter after rscratch1 is free\n-    __ xorptr(rax, rax); \/\/ return 0\n-    __ vzeroupper();\n-    __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    __ ret(0);\n+    __ movq(rax, Address(from, qword_count, Address::times_8, -8));\n+    __ movq(Address(to, qword_count, Address::times_8, -8), rax);\n+    __ decrement(qword_count);\n+    __ jcc(Assembler::notZero, L_copy_8_bytes);\n+  }\n+  restore_arg_regs();\n+  INC_COUNTER_NP(SharedRuntime::_jshort_array_copy_ctr, rscratch1); \/\/ Update counter after rscratch1 is free\n+  __ xorptr(rax, rax); \/\/ return 0\n+  __ vzeroupper();\n+  __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ ret(0);\n@@ -2316,1 +2298,5 @@\n-    return start;\n+  {\n+    \/\/ UnsafeCopyMemory page error: continue after ucm\n+    UnsafeCopyMemoryMark ucmm(this, !aligned, true);\n+    \/\/ Copy in multi-bytes chunks\n+    copy_bytes_backward(from, to, qword_count, rax, L_copy_bytes, L_copy_8_bytes);\n@@ -2318,0 +2304,6 @@\n+  restore_arg_regs();\n+  INC_COUNTER_NP(SharedRuntime::_jshort_array_copy_ctr, rscratch1); \/\/ Update counter after rscratch1 is free\n+  __ xorptr(rax, rax); \/\/ return 0\n+  __ vzeroupper();\n+  __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ ret(0);\n@@ -2319,21 +2311,24 @@\n-  \/\/ Arguments:\n-  \/\/   aligned - true => Input and output aligned on a HeapWord == 8-byte boundary\n-  \/\/             ignored\n-  \/\/   is_oop  - true => oop array, so generate store check code\n-  \/\/   name    - stub name string\n-  \/\/\n-  \/\/ Inputs:\n-  \/\/   c_rarg0   - source array address\n-  \/\/   c_rarg1   - destination array address\n-  \/\/   c_rarg2   - element count, treated as ssize_t, can be zero\n-  \/\/\n-  \/\/ If 'from' and\/or 'to' are aligned on 4-byte boundaries, we let\n-  \/\/ the hardware handle it.  The two dwords within qwords that span\n-  \/\/ cache line boundaries will still be loaded and stored atomically.\n-  \/\/\n-  \/\/ Side Effects:\n-  \/\/   disjoint_int_copy_entry is set to the no-overlap entry point\n-  \/\/   used by generate_conjoint_int_oop_copy().\n-  \/\/\n-  address generate_disjoint_int_oop_copy(bool aligned, bool is_oop, address* entry,\n-                                         const char *name, bool dest_uninitialized = false) {\n+  return start;\n+}\n+\n+\/\/ Arguments:\n+\/\/   aligned - true => Input and output aligned on a HeapWord == 8-byte boundary\n+\/\/             ignored\n+\/\/   is_oop  - true => oop array, so generate store check code\n+\/\/   name    - stub name string\n+\/\/\n+\/\/ Inputs:\n+\/\/   c_rarg0   - source array address\n+\/\/   c_rarg1   - destination array address\n+\/\/   c_rarg2   - element count, treated as ssize_t, can be zero\n+\/\/\n+\/\/ If 'from' and\/or 'to' are aligned on 4-byte boundaries, we let\n+\/\/ the hardware handle it.  The two dwords within qwords that span\n+\/\/ cache line boundaries will still be loaded and stored atomically.\n+\/\/\n+\/\/ Side Effects:\n+\/\/   disjoint_int_copy_entry is set to the no-overlap entry point\n+\/\/   used by generate_conjoint_int_oop_copy().\n+\/\/\n+address StubGenerator::generate_disjoint_int_oop_copy(bool aligned, bool is_oop, address* entry,\n+                                                      const char *name, bool dest_uninitialized) {\n@@ -2341,4 +2336,4 @@\n-    if (VM_Version::supports_avx512vlbw() && VM_Version::supports_bmi2() && MaxVectorSize  >= 32) {\n-       return generate_disjoint_copy_avx3_masked(entry, \"jint_disjoint_arraycopy_avx3\", 2,\n-                                                 aligned, is_oop, dest_uninitialized);\n-    }\n+  if (VM_Version::supports_avx512vlbw() && VM_Version::supports_bmi2() && MaxVectorSize  >= 32) {\n+     return generate_disjoint_copy_avx3_masked(entry, \"jint_disjoint_arraycopy_avx3\", 2,\n+                                               aligned, is_oop, dest_uninitialized);\n+  }\n@@ -2347,34 +2342,23 @@\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", name);\n-    address start = __ pc();\n-\n-    Label L_copy_bytes, L_copy_8_bytes, L_copy_4_bytes, L_exit;\n-    const Register from        = rdi;  \/\/ source array address\n-    const Register to          = rsi;  \/\/ destination array address\n-    const Register count       = rdx;  \/\/ elements count\n-    const Register dword_count = rcx;\n-    const Register qword_count = count;\n-    const Register end_from    = from; \/\/ source array end address\n-    const Register end_to      = to;   \/\/ destination array end address\n-    \/\/ End pointers are inclusive, and if count is not zero they point\n-    \/\/ to the last unit copied:  end_to[0] := end_from[0]\n-\n-    __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    assert_clean_int(c_rarg2, rax);    \/\/ Make sure 'count' is clean int.\n-\n-    if (entry != NULL) {\n-      *entry = __ pc();\n-      \/\/ caller can pass a 64-bit byte count here (from Unsafe.copyMemory)\n-      BLOCK_COMMENT(\"Entry:\");\n-    }\n-\n-    setup_arg_regs_using_thread(); \/\/ from => rdi, to => rsi, count => rdx\n-                                   \/\/ r9 is used to save r15_thread\n-\n-    DecoratorSet decorators = IN_HEAP | IS_ARRAY | ARRAYCOPY_DISJOINT;\n-    if (dest_uninitialized) {\n-      decorators |= IS_DEST_UNINITIALIZED;\n-    }\n-    if (aligned) {\n-      decorators |= ARRAYCOPY_ALIGNED;\n-    }\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", name);\n+  address start = __ pc();\n+\n+  Label L_copy_bytes, L_copy_8_bytes, L_copy_4_bytes, L_exit;\n+  const Register from        = rdi;  \/\/ source array address\n+  const Register to          = rsi;  \/\/ destination array address\n+  const Register count       = rdx;  \/\/ elements count\n+  const Register dword_count = rcx;\n+  const Register qword_count = count;\n+  const Register end_from    = from; \/\/ source array end address\n+  const Register end_to      = to;   \/\/ destination array end address\n+  \/\/ End pointers are inclusive, and if count is not zero they point\n+  \/\/ to the last unit copied:  end_to[0] := end_from[0]\n+\n+  __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  assert_clean_int(c_rarg2, rax);    \/\/ Make sure 'count' is clean int.\n+\n+  if (entry != NULL) {\n+    *entry = __ pc();\n+    \/\/ caller can pass a 64-bit byte count here (from Unsafe.copyMemory)\n+    BLOCK_COMMENT(\"Entry:\");\n+  }\n@@ -2382,3 +2366,2 @@\n-    BasicType type = is_oop ? T_OBJECT : T_INT;\n-    BarrierSetAssembler *bs = BarrierSet::barrier_set()->barrier_set_assembler();\n-    bs->arraycopy_prologue(_masm, decorators, type, from, to, count);\n+  setup_arg_regs_using_thread(); \/\/ from => rdi, to => rsi, count => rdx\n+                                 \/\/ r9 is used to save r15_thread\n@@ -2386,6 +2369,7 @@\n-    {\n-      \/\/ UnsafeCopyMemory page error: continue after ucm\n-      UnsafeCopyMemoryMark ucmm(this, !is_oop && !aligned, true);\n-      \/\/ 'from', 'to' and 'count' are now valid\n-      __ movptr(dword_count, count);\n-      __ shrptr(count, 1); \/\/ count => qword_count\n+  DecoratorSet decorators = IN_HEAP | IS_ARRAY | ARRAYCOPY_DISJOINT;\n+  if (dest_uninitialized) {\n+    decorators |= IS_DEST_UNINITIALIZED;\n+  }\n+  if (aligned) {\n+    decorators |= ARRAYCOPY_ALIGNED;\n+  }\n@@ -2393,5 +2377,3 @@\n-      \/\/ Copy from low to high addresses.  Use 'to' as scratch.\n-      __ lea(end_from, Address(from, qword_count, Address::times_8, -8));\n-      __ lea(end_to,   Address(to,   qword_count, Address::times_8, -8));\n-      __ negptr(qword_count);\n-      __ jmp(L_copy_bytes);\n+  BasicType type = is_oop ? T_OBJECT : T_INT;\n+  BarrierSetAssembler *bs = BarrierSet::barrier_set()->barrier_set_assembler();\n+  bs->arraycopy_prologue(_masm, decorators, type, from, to, count);\n@@ -2399,1 +2381,14 @@\n-      \/\/ Copy trailing qwords\n+  {\n+    \/\/ UnsafeCopyMemory page error: continue after ucm\n+    UnsafeCopyMemoryMark ucmm(this, !is_oop && !aligned, true);\n+    \/\/ 'from', 'to' and 'count' are now valid\n+    __ movptr(dword_count, count);\n+    __ shrptr(count, 1); \/\/ count => qword_count\n+\n+    \/\/ Copy from low to high addresses.  Use 'to' as scratch.\n+    __ lea(end_from, Address(from, qword_count, Address::times_8, -8));\n+    __ lea(end_to,   Address(to,   qword_count, Address::times_8, -8));\n+    __ negptr(qword_count);\n+    __ jmp(L_copy_bytes);\n+\n+    \/\/ Copy trailing qwords\n@@ -2401,4 +2396,4 @@\n-      __ movq(rax, Address(end_from, qword_count, Address::times_8, 8));\n-      __ movq(Address(end_to, qword_count, Address::times_8, 8), rax);\n-      __ increment(qword_count);\n-      __ jcc(Assembler::notZero, L_copy_8_bytes);\n+    __ movq(rax, Address(end_from, qword_count, Address::times_8, 8));\n+    __ movq(Address(end_to, qword_count, Address::times_8, 8), rax);\n+    __ increment(qword_count);\n+    __ jcc(Assembler::notZero, L_copy_8_bytes);\n@@ -2406,1 +2401,1 @@\n-      \/\/ Check for and copy trailing dword\n+    \/\/ Check for and copy trailing dword\n@@ -2408,5 +2403,5 @@\n-      __ testl(dword_count, 1); \/\/ Only byte test since the value is 0 or 1\n-      __ jccb(Assembler::zero, L_exit);\n-      __ movl(rax, Address(end_from, 8));\n-      __ movl(Address(end_to, 8), rax);\n-    }\n+    __ testl(dword_count, 1); \/\/ Only byte test since the value is 0 or 1\n+    __ jccb(Assembler::zero, L_exit);\n+    __ movl(rax, Address(end_from, 8));\n+    __ movl(Address(end_to, 8), rax);\n+  }\n@@ -2414,8 +2409,8 @@\n-    address ucme_exit_pc = __ pc();\n-    bs->arraycopy_epilogue(_masm, decorators, type, from, to, dword_count);\n-    restore_arg_regs_using_thread();\n-    INC_COUNTER_NP(SharedRuntime::_jint_array_copy_ctr, rscratch1); \/\/ Update counter after rscratch1 is free\n-    __ vzeroupper();\n-    __ xorptr(rax, rax); \/\/ return 0\n-    __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    __ ret(0);\n+  address ucme_exit_pc = __ pc();\n+  bs->arraycopy_epilogue(_masm, decorators, type, from, to, dword_count);\n+  restore_arg_regs_using_thread();\n+  INC_COUNTER_NP(SharedRuntime::_jint_array_copy_ctr, rscratch1); \/\/ Update counter after rscratch1 is free\n+  __ vzeroupper();\n+  __ xorptr(rax, rax); \/\/ return 0\n+  __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ ret(0);\n@@ -2423,6 +2418,9 @@\n-    {\n-      UnsafeCopyMemoryMark ucmm(this, !is_oop && !aligned, false, ucme_exit_pc);\n-      \/\/ Copy in multi-bytes chunks\n-      copy_bytes_forward(end_from, end_to, qword_count, rax, L_copy_bytes, L_copy_8_bytes);\n-      __ jmp(L_copy_4_bytes);\n-    }\n+  {\n+    UnsafeCopyMemoryMark ucmm(this, !is_oop && !aligned, false, ucme_exit_pc);\n+    \/\/ Copy in multi-bytes chunks\n+    copy_bytes_forward(end_from, end_to, qword_count, rax, L_copy_bytes, L_copy_8_bytes);\n+    __ jmp(L_copy_4_bytes);\n+  }\n+\n+  return start;\n+}\n@@ -2430,1 +2428,42 @@\n-    return start;\n+\/\/ Arguments:\n+\/\/   aligned - true => Input and output aligned on a HeapWord == 8-byte boundary\n+\/\/             ignored\n+\/\/   is_oop  - true => oop array, so generate store check code\n+\/\/   name    - stub name string\n+\/\/\n+\/\/ Inputs:\n+\/\/   c_rarg0   - source array address\n+\/\/   c_rarg1   - destination array address\n+\/\/   c_rarg2   - element count, treated as ssize_t, can be zero\n+\/\/\n+\/\/ If 'from' and\/or 'to' are aligned on 4-byte boundaries, we let\n+\/\/ the hardware handle it.  The two dwords within qwords that span\n+\/\/ cache line boundaries will still be loaded and stored atomically.\n+\/\/\n+address StubGenerator::generate_conjoint_int_oop_copy(bool aligned, bool is_oop, address nooverlap_target,\n+                                                      address *entry, const char *name,\n+                                                      bool dest_uninitialized) {\n+#if COMPILER2_OR_JVMCI\n+  if (VM_Version::supports_avx512vlbw() && VM_Version::supports_bmi2() && MaxVectorSize  >= 32) {\n+     return generate_conjoint_copy_avx3_masked(entry, \"jint_conjoint_arraycopy_avx3\", 2,\n+                                               nooverlap_target, aligned, is_oop, dest_uninitialized);\n+  }\n+#endif\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", name);\n+  address start = __ pc();\n+\n+  Label L_copy_bytes, L_copy_8_bytes, L_exit;\n+  const Register from        = rdi;  \/\/ source array address\n+  const Register to          = rsi;  \/\/ destination array address\n+  const Register count       = rdx;  \/\/ elements count\n+  const Register dword_count = rcx;\n+  const Register qword_count = count;\n+\n+  __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  assert_clean_int(c_rarg2, rax);    \/\/ Make sure 'count' is clean int.\n+\n+  if (entry != NULL) {\n+    *entry = __ pc();\n+     \/\/ caller can pass a 64-bit byte count here (from Unsafe.copyMemory)\n+    BLOCK_COMMENT(\"Entry:\");\n@@ -2433,18 +2472,87 @@\n-  \/\/ Arguments:\n-  \/\/   aligned - true => Input and output aligned on a HeapWord == 8-byte boundary\n-  \/\/             ignored\n-  \/\/   is_oop  - true => oop array, so generate store check code\n-  \/\/   name    - stub name string\n-  \/\/\n-  \/\/ Inputs:\n-  \/\/   c_rarg0   - source array address\n-  \/\/   c_rarg1   - destination array address\n-  \/\/   c_rarg2   - element count, treated as ssize_t, can be zero\n-  \/\/\n-  \/\/ If 'from' and\/or 'to' are aligned on 4-byte boundaries, we let\n-  \/\/ the hardware handle it.  The two dwords within qwords that span\n-  \/\/ cache line boundaries will still be loaded and stored atomically.\n-  \/\/\n-  address generate_conjoint_int_oop_copy(bool aligned, bool is_oop, address nooverlap_target,\n-                                         address *entry, const char *name,\n-                                         bool dest_uninitialized = false) {\n+  array_overlap_test(nooverlap_target, Address::times_4);\n+  setup_arg_regs_using_thread(); \/\/ from => rdi, to => rsi, count => rdx\n+                                 \/\/ r9 is used to save r15_thread\n+\n+  DecoratorSet decorators = IN_HEAP | IS_ARRAY;\n+  if (dest_uninitialized) {\n+    decorators |= IS_DEST_UNINITIALIZED;\n+  }\n+  if (aligned) {\n+    decorators |= ARRAYCOPY_ALIGNED;\n+  }\n+\n+  BasicType type = is_oop ? T_OBJECT : T_INT;\n+  BarrierSetAssembler *bs = BarrierSet::barrier_set()->barrier_set_assembler();\n+  \/\/ no registers are destroyed by this call\n+  bs->arraycopy_prologue(_masm, decorators, type, from, to, count);\n+\n+  assert_clean_int(count, rax); \/\/ Make sure 'count' is clean int.\n+  {\n+    \/\/ UnsafeCopyMemory page error: continue after ucm\n+    UnsafeCopyMemoryMark ucmm(this, !is_oop && !aligned, true);\n+    \/\/ 'from', 'to' and 'count' are now valid\n+    __ movptr(dword_count, count);\n+    __ shrptr(count, 1); \/\/ count => qword_count\n+\n+    \/\/ Copy from high to low addresses.  Use 'to' as scratch.\n+\n+    \/\/ Check for and copy trailing dword\n+    __ testl(dword_count, 1);\n+    __ jcc(Assembler::zero, L_copy_bytes);\n+    __ movl(rax, Address(from, dword_count, Address::times_4, -4));\n+    __ movl(Address(to, dword_count, Address::times_4, -4), rax);\n+    __ jmp(L_copy_bytes);\n+\n+    \/\/ Copy trailing qwords\n+    __ BIND(L_copy_8_bytes);\n+    __ movq(rax, Address(from, qword_count, Address::times_8, -8));\n+    __ movq(Address(to, qword_count, Address::times_8, -8), rax);\n+    __ decrement(qword_count);\n+    __ jcc(Assembler::notZero, L_copy_8_bytes);\n+  }\n+  if (is_oop) {\n+    __ jmp(L_exit);\n+  }\n+  restore_arg_regs_using_thread();\n+  INC_COUNTER_NP(SharedRuntime::_jint_array_copy_ctr, rscratch1); \/\/ Update counter after rscratch1 is free\n+  __ xorptr(rax, rax); \/\/ return 0\n+  __ vzeroupper();\n+  __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ ret(0);\n+\n+  {\n+    \/\/ UnsafeCopyMemory page error: continue after ucm\n+    UnsafeCopyMemoryMark ucmm(this, !is_oop && !aligned, true);\n+    \/\/ Copy in multi-bytes chunks\n+    copy_bytes_backward(from, to, qword_count, rax, L_copy_bytes, L_copy_8_bytes);\n+  }\n+\n+  __ BIND(L_exit);\n+  bs->arraycopy_epilogue(_masm, decorators, type, from, to, dword_count);\n+  restore_arg_regs_using_thread();\n+  INC_COUNTER_NP(SharedRuntime::_jint_array_copy_ctr, rscratch1); \/\/ Update counter after rscratch1 is free\n+  __ xorptr(rax, rax); \/\/ return 0\n+  __ vzeroupper();\n+  __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ ret(0);\n+\n+  return start;\n+}\n+\n+\/\/ Arguments:\n+\/\/   aligned - true => Input and output aligned on a HeapWord boundary == 8 bytes\n+\/\/             ignored\n+\/\/   is_oop  - true => oop array, so generate store check code\n+\/\/   name    - stub name string\n+\/\/\n+\/\/ Inputs:\n+\/\/   c_rarg0   - source array address\n+\/\/   c_rarg1   - destination array address\n+\/\/   c_rarg2   - element count, treated as ssize_t, can be zero\n+\/\/\n+ \/\/ Side Effects:\n+\/\/   disjoint_oop_copy_entry or disjoint_long_copy_entry is set to the\n+\/\/   no-overlap entry point used by generate_conjoint_long_oop_copy().\n+\/\/\n+address StubGenerator::generate_disjoint_long_oop_copy(bool aligned, bool is_oop, address *entry,\n+                                                       const char *name, bool dest_uninitialized) {\n@@ -2452,4 +2560,4 @@\n-    if (VM_Version::supports_avx512vlbw() && VM_Version::supports_bmi2() && MaxVectorSize  >= 32) {\n-       return generate_conjoint_copy_avx3_masked(entry, \"jint_conjoint_arraycopy_avx3\", 2,\n-                                                 nooverlap_target, aligned, is_oop, dest_uninitialized);\n-    }\n+  if (VM_Version::supports_avx512vlbw() && VM_Version::supports_bmi2() && MaxVectorSize  >= 32) {\n+     return generate_disjoint_copy_avx3_masked(entry, \"jlong_disjoint_arraycopy_avx3\", 3,\n+                                               aligned, is_oop, dest_uninitialized);\n+  }\n@@ -2457,19 +2565,23 @@\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", name);\n-    address start = __ pc();\n-\n-    Label L_copy_bytes, L_copy_8_bytes, L_exit;\n-    const Register from        = rdi;  \/\/ source array address\n-    const Register to          = rsi;  \/\/ destination array address\n-    const Register count       = rdx;  \/\/ elements count\n-    const Register dword_count = rcx;\n-    const Register qword_count = count;\n-\n-    __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    assert_clean_int(c_rarg2, rax);    \/\/ Make sure 'count' is clean int.\n-\n-    if (entry != NULL) {\n-      *entry = __ pc();\n-       \/\/ caller can pass a 64-bit byte count here (from Unsafe.copyMemory)\n-      BLOCK_COMMENT(\"Entry:\");\n-    }\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", name);\n+  address start = __ pc();\n+\n+  Label L_copy_bytes, L_copy_8_bytes, L_exit;\n+  const Register from        = rdi;  \/\/ source array address\n+  const Register to          = rsi;  \/\/ destination array address\n+  const Register qword_count = rdx;  \/\/ elements count\n+  const Register end_from    = from; \/\/ source array end address\n+  const Register end_to      = rcx;  \/\/ destination array end address\n+  const Register saved_count = r11;\n+  \/\/ End pointers are inclusive, and if count is not zero they point\n+  \/\/ to the last unit copied:  end_to[0] := end_from[0]\n+\n+  __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  \/\/ Save no-overlap entry point for generate_conjoint_long_oop_copy()\n+  assert_clean_int(c_rarg2, rax);    \/\/ Make sure 'count' is clean int.\n+\n+  if (entry != NULL) {\n+    *entry = __ pc();\n+    \/\/ caller can pass a 64-bit byte count here (from Unsafe.copyMemory)\n+    BLOCK_COMMENT(\"Entry:\");\n+  }\n@@ -2477,2 +2589,1 @@\n-    array_overlap_test(nooverlap_target, Address::times_4);\n-    setup_arg_regs_using_thread(); \/\/ from => rdi, to => rsi, count => rdx\n+  setup_arg_regs_using_thread(); \/\/ from => rdi, to => rsi, count => rdx\n@@ -2480,0 +2591,1 @@\n+  \/\/ 'from', 'to' and 'qword_count' are now valid\n@@ -2481,7 +2593,7 @@\n-    DecoratorSet decorators = IN_HEAP | IS_ARRAY;\n-    if (dest_uninitialized) {\n-      decorators |= IS_DEST_UNINITIALIZED;\n-    }\n-    if (aligned) {\n-      decorators |= ARRAYCOPY_ALIGNED;\n-    }\n+  DecoratorSet decorators = IN_HEAP | IS_ARRAY | ARRAYCOPY_DISJOINT;\n+  if (dest_uninitialized) {\n+    decorators |= IS_DEST_UNINITIALIZED;\n+  }\n+  if (aligned) {\n+    decorators |= ARRAYCOPY_ALIGNED;\n+  }\n@@ -2489,23 +2601,14 @@\n-    BasicType type = is_oop ? T_OBJECT : T_INT;\n-    BarrierSetAssembler *bs = BarrierSet::barrier_set()->barrier_set_assembler();\n-    \/\/ no registers are destroyed by this call\n-    bs->arraycopy_prologue(_masm, decorators, type, from, to, count);\n-\n-    assert_clean_int(count, rax); \/\/ Make sure 'count' is clean int.\n-    {\n-      \/\/ UnsafeCopyMemory page error: continue after ucm\n-      UnsafeCopyMemoryMark ucmm(this, !is_oop && !aligned, true);\n-      \/\/ 'from', 'to' and 'count' are now valid\n-      __ movptr(dword_count, count);\n-      __ shrptr(count, 1); \/\/ count => qword_count\n-\n-      \/\/ Copy from high to low addresses.  Use 'to' as scratch.\n-\n-      \/\/ Check for and copy trailing dword\n-      __ testl(dword_count, 1);\n-      __ jcc(Assembler::zero, L_copy_bytes);\n-      __ movl(rax, Address(from, dword_count, Address::times_4, -4));\n-      __ movl(Address(to, dword_count, Address::times_4, -4), rax);\n-      __ jmp(L_copy_bytes);\n-\n-      \/\/ Copy trailing qwords\n+  BasicType type = is_oop ? T_OBJECT : T_LONG;\n+  BarrierSetAssembler *bs = BarrierSet::barrier_set()->barrier_set_assembler();\n+  bs->arraycopy_prologue(_masm, decorators, type, from, to, qword_count);\n+  {\n+    \/\/ UnsafeCopyMemory page error: continue after ucm\n+    UnsafeCopyMemoryMark ucmm(this, !is_oop && !aligned, true);\n+\n+    \/\/ Copy from low to high addresses.  Use 'to' as scratch.\n+    __ lea(end_from, Address(from, qword_count, Address::times_8, -8));\n+    __ lea(end_to,   Address(to,   qword_count, Address::times_8, -8));\n+    __ negptr(qword_count);\n+    __ jmp(L_copy_bytes);\n+\n+    \/\/ Copy trailing qwords\n@@ -2513,8 +2616,8 @@\n-      __ movq(rax, Address(from, qword_count, Address::times_8, -8));\n-      __ movq(Address(to, qword_count, Address::times_8, -8), rax);\n-      __ decrement(qword_count);\n-      __ jcc(Assembler::notZero, L_copy_8_bytes);\n-    }\n-    if (is_oop) {\n-      __ jmp(L_exit);\n-    }\n+    __ movq(rax, Address(end_from, qword_count, Address::times_8, 8));\n+    __ movq(Address(end_to, qword_count, Address::times_8, 8), rax);\n+    __ increment(qword_count);\n+    __ jcc(Assembler::notZero, L_copy_8_bytes);\n+  }\n+  if (is_oop) {\n+    __ jmp(L_exit);\n+  } else {\n@@ -2522,1 +2625,1 @@\n-    INC_COUNTER_NP(SharedRuntime::_jint_array_copy_ctr, rscratch1); \/\/ Update counter after rscratch1 is free\n+    INC_COUNTER_NP(SharedRuntime::_jlong_array_copy_ctr, rscratch1); \/\/ Update counter after rscratch1 is free\n@@ -2527,0 +2630,1 @@\n+  }\n@@ -2528,6 +2632,6 @@\n-    {\n-      \/\/ UnsafeCopyMemory page error: continue after ucm\n-      UnsafeCopyMemoryMark ucmm(this, !is_oop && !aligned, true);\n-      \/\/ Copy in multi-bytes chunks\n-      copy_bytes_backward(from, to, qword_count, rax, L_copy_bytes, L_copy_8_bytes);\n-    }\n+  {\n+    \/\/ UnsafeCopyMemory page error: continue after ucm\n+    UnsafeCopyMemoryMark ucmm(this, !is_oop && !aligned, true);\n+    \/\/ Copy in multi-bytes chunks\n+    copy_bytes_forward(end_from, end_to, qword_count, rax, L_copy_bytes, L_copy_8_bytes);\n+  }\n@@ -2536,7 +2640,9 @@\n-    bs->arraycopy_epilogue(_masm, decorators, type, from, to, dword_count);\n-    restore_arg_regs_using_thread();\n-    INC_COUNTER_NP(SharedRuntime::_jint_array_copy_ctr, rscratch1); \/\/ Update counter after rscratch1 is free\n-    __ xorptr(rax, rax); \/\/ return 0\n-    __ vzeroupper();\n-    __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    __ ret(0);\n+  bs->arraycopy_epilogue(_masm, decorators, type, from, to, qword_count);\n+  restore_arg_regs_using_thread();\n+  INC_COUNTER_NP(is_oop ? SharedRuntime::_oop_array_copy_ctr :\n+                          SharedRuntime::_jlong_array_copy_ctr,\n+                 rscratch1); \/\/ Update counter after rscratch1 is free\n+  __ vzeroupper();\n+  __ xorptr(rax, rax); \/\/ return 0\n+  __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ ret(0);\n@@ -2544,2 +2650,2 @@\n-    return start;\n-  }\n+  return start;\n+}\n@@ -2547,17 +2653,14 @@\n-  \/\/ Arguments:\n-  \/\/   aligned - true => Input and output aligned on a HeapWord boundary == 8 bytes\n-  \/\/             ignored\n-  \/\/   is_oop  - true => oop array, so generate store check code\n-  \/\/   name    - stub name string\n-  \/\/\n-  \/\/ Inputs:\n-  \/\/   c_rarg0   - source array address\n-  \/\/   c_rarg1   - destination array address\n-  \/\/   c_rarg2   - element count, treated as ssize_t, can be zero\n-  \/\/\n- \/\/ Side Effects:\n-  \/\/   disjoint_oop_copy_entry or disjoint_long_copy_entry is set to the\n-  \/\/   no-overlap entry point used by generate_conjoint_long_oop_copy().\n-  \/\/\n-  address generate_disjoint_long_oop_copy(bool aligned, bool is_oop, address *entry,\n-                                          const char *name, bool dest_uninitialized = false) {\n+\/\/ Arguments:\n+\/\/   aligned - true => Input and output aligned on a HeapWord boundary == 8 bytes\n+\/\/             ignored\n+\/\/   is_oop  - true => oop array, so generate store check code\n+\/\/   name    - stub name string\n+\/\/\n+\/\/ Inputs:\n+\/\/   c_rarg0   - source array address\n+\/\/   c_rarg1   - destination array address\n+\/\/   c_rarg2   - element count, treated as ssize_t, can be zero\n+\/\/\n+address StubGenerator::generate_conjoint_long_oop_copy(bool aligned, bool is_oop, address nooverlap_target,\n+                                                       address *entry, const char *name,\n+                                                       bool dest_uninitialized) {\n@@ -2565,4 +2668,4 @@\n-    if (VM_Version::supports_avx512vlbw() && VM_Version::supports_bmi2() && MaxVectorSize  >= 32) {\n-       return generate_disjoint_copy_avx3_masked(entry, \"jlong_disjoint_arraycopy_avx3\", 3,\n-                                                 aligned, is_oop, dest_uninitialized);\n-    }\n+  if (VM_Version::supports_avx512vlbw() && VM_Version::supports_bmi2() && MaxVectorSize  >= 32) {\n+     return generate_conjoint_copy_avx3_masked(entry, \"jlong_conjoint_arraycopy_avx3\", 3,\n+                                               nooverlap_target, aligned, is_oop, dest_uninitialized);\n+  }\n@@ -2570,35 +2673,18 @@\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", name);\n-    address start = __ pc();\n-\n-    Label L_copy_bytes, L_copy_8_bytes, L_exit;\n-    const Register from        = rdi;  \/\/ source array address\n-    const Register to          = rsi;  \/\/ destination array address\n-    const Register qword_count = rdx;  \/\/ elements count\n-    const Register end_from    = from; \/\/ source array end address\n-    const Register end_to      = rcx;  \/\/ destination array end address\n-    const Register saved_count = r11;\n-    \/\/ End pointers are inclusive, and if count is not zero they point\n-    \/\/ to the last unit copied:  end_to[0] := end_from[0]\n-\n-    __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    \/\/ Save no-overlap entry point for generate_conjoint_long_oop_copy()\n-    assert_clean_int(c_rarg2, rax);    \/\/ Make sure 'count' is clean int.\n-\n-    if (entry != NULL) {\n-      *entry = __ pc();\n-      \/\/ caller can pass a 64-bit byte count here (from Unsafe.copyMemory)\n-      BLOCK_COMMENT(\"Entry:\");\n-    }\n-\n-    setup_arg_regs_using_thread(); \/\/ from => rdi, to => rsi, count => rdx\n-                                     \/\/ r9 is used to save r15_thread\n-    \/\/ 'from', 'to' and 'qword_count' are now valid\n-\n-    DecoratorSet decorators = IN_HEAP | IS_ARRAY | ARRAYCOPY_DISJOINT;\n-    if (dest_uninitialized) {\n-      decorators |= IS_DEST_UNINITIALIZED;\n-    }\n-    if (aligned) {\n-      decorators |= ARRAYCOPY_ALIGNED;\n-    }\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", name);\n+  address start = __ pc();\n+\n+  Label L_copy_bytes, L_copy_8_bytes, L_exit;\n+  const Register from        = rdi;  \/\/ source array address\n+  const Register to          = rsi;  \/\/ destination array address\n+  const Register qword_count = rdx;  \/\/ elements count\n+  const Register saved_count = rcx;\n+\n+  __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  assert_clean_int(c_rarg2, rax);    \/\/ Make sure 'count' is clean int.\n+\n+  if (entry != NULL) {\n+    *entry = __ pc();\n+    \/\/ caller can pass a 64-bit byte count here (from Unsafe.copyMemory)\n+    BLOCK_COMMENT(\"Entry:\");\n+  }\n@@ -2606,6 +2692,4 @@\n-    BasicType type = is_oop ? T_OBJECT : T_LONG;\n-    BarrierSetAssembler *bs = BarrierSet::barrier_set()->barrier_set_assembler();\n-    bs->arraycopy_prologue(_masm, decorators, type, from, to, qword_count);\n-    {\n-      \/\/ UnsafeCopyMemory page error: continue after ucm\n-      UnsafeCopyMemoryMark ucmm(this, !is_oop && !aligned, true);\n+  array_overlap_test(nooverlap_target, Address::times_8);\n+  setup_arg_regs_using_thread(); \/\/ from => rdi, to => rsi, count => rdx\n+                                 \/\/ r9 is used to save r15_thread\n+  \/\/ 'from', 'to' and 'qword_count' are now valid\n@@ -2613,5 +2697,7 @@\n-      \/\/ Copy from low to high addresses.  Use 'to' as scratch.\n-      __ lea(end_from, Address(from, qword_count, Address::times_8, -8));\n-      __ lea(end_to,   Address(to,   qword_count, Address::times_8, -8));\n-      __ negptr(qword_count);\n-      __ jmp(L_copy_bytes);\n+  DecoratorSet decorators = IN_HEAP | IS_ARRAY;\n+  if (dest_uninitialized) {\n+    decorators |= IS_DEST_UNINITIALIZED;\n+  }\n+  if (aligned) {\n+    decorators |= ARRAYCOPY_ALIGNED;\n+  }\n@@ -2619,17 +2705,6 @@\n-      \/\/ Copy trailing qwords\n-    __ BIND(L_copy_8_bytes);\n-      __ movq(rax, Address(end_from, qword_count, Address::times_8, 8));\n-      __ movq(Address(end_to, qword_count, Address::times_8, 8), rax);\n-      __ increment(qword_count);\n-      __ jcc(Assembler::notZero, L_copy_8_bytes);\n-    }\n-    if (is_oop) {\n-      __ jmp(L_exit);\n-    } else {\n-      restore_arg_regs_using_thread();\n-      INC_COUNTER_NP(SharedRuntime::_jlong_array_copy_ctr, rscratch1); \/\/ Update counter after rscratch1 is free\n-      __ xorptr(rax, rax); \/\/ return 0\n-      __ vzeroupper();\n-      __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n-      __ ret(0);\n-    }\n+  BasicType type = is_oop ? T_OBJECT : T_LONG;\n+  BarrierSetAssembler *bs = BarrierSet::barrier_set()->barrier_set_assembler();\n+  bs->arraycopy_prologue(_masm, decorators, type, from, to, qword_count);\n+  {\n+    \/\/ UnsafeCopyMemory page error: continue after ucm\n+    UnsafeCopyMemoryMark ucmm(this, !is_oop && !aligned, true);\n@@ -2637,6 +2712,1 @@\n-    {\n-      \/\/ UnsafeCopyMemory page error: continue after ucm\n-      UnsafeCopyMemoryMark ucmm(this, !is_oop && !aligned, true);\n-      \/\/ Copy in multi-bytes chunks\n-      copy_bytes_forward(end_from, end_to, qword_count, rax, L_copy_bytes, L_copy_8_bytes);\n-    }\n+    __ jmp(L_copy_bytes);\n@@ -2644,2 +2714,10 @@\n-    __ BIND(L_exit);\n-    bs->arraycopy_epilogue(_masm, decorators, type, from, to, qword_count);\n+    \/\/ Copy trailing qwords\n+    __ BIND(L_copy_8_bytes);\n+    __ movq(rax, Address(from, qword_count, Address::times_8, -8));\n+    __ movq(Address(to, qword_count, Address::times_8, -8), rax);\n+    __ decrement(qword_count);\n+    __ jcc(Assembler::notZero, L_copy_8_bytes);\n+  }\n+  if (is_oop) {\n+    __ jmp(L_exit);\n+  } else {\n@@ -2647,4 +2725,1 @@\n-    INC_COUNTER_NP(is_oop ? SharedRuntime::_oop_array_copy_ctr :\n-                            SharedRuntime::_jlong_array_copy_ctr,\n-                   rscratch1); \/\/ Update counter after rscratch1 is free\n-    __ vzeroupper();\n+    INC_COUNTER_NP(SharedRuntime::_jlong_array_copy_ctr, rscratch1); \/\/ Update counter after rscratch1 is free\n@@ -2652,0 +2727,1 @@\n+    __ vzeroupper();\n@@ -2654,0 +2730,4 @@\n+  }\n+  {\n+    \/\/ UnsafeCopyMemory page error: continue after ucm\n+    UnsafeCopyMemoryMark ucmm(this, !is_oop && !aligned, true);\n@@ -2655,1 +2735,2 @@\n-    return start;\n+    \/\/ Copy in multi-bytes chunks\n+    copy_bytes_backward(from, to, qword_count, rax, L_copy_bytes, L_copy_8_bytes);\n@@ -2657,0 +2738,10 @@\n+  __ BIND(L_exit);\n+  bs->arraycopy_epilogue(_masm, decorators, type, from, to, qword_count);\n+  restore_arg_regs_using_thread();\n+  INC_COUNTER_NP(is_oop ? SharedRuntime::_oop_array_copy_ctr :\n+                          SharedRuntime::_jlong_array_copy_ctr,\n+                 rscratch1); \/\/ Update counter after rscratch1 is free\n+  __ vzeroupper();\n+  __ xorptr(rax, rax); \/\/ return 0\n+  __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ ret(0);\n@@ -2658,38 +2749,2 @@\n-  \/\/ Arguments:\n-  \/\/   aligned - true => Input and output aligned on a HeapWord boundary == 8 bytes\n-  \/\/             ignored\n-  \/\/   is_oop  - true => oop array, so generate store check code\n-  \/\/   name    - stub name string\n-  \/\/\n-  \/\/ Inputs:\n-  \/\/   c_rarg0   - source array address\n-  \/\/   c_rarg1   - destination array address\n-  \/\/   c_rarg2   - element count, treated as ssize_t, can be zero\n-  \/\/\n-  address generate_conjoint_long_oop_copy(bool aligned, bool is_oop,\n-                                          address nooverlap_target, address *entry,\n-                                          const char *name, bool dest_uninitialized = false) {\n-#if COMPILER2_OR_JVMCI\n-    if (VM_Version::supports_avx512vlbw() && VM_Version::supports_bmi2() && MaxVectorSize  >= 32) {\n-       return generate_conjoint_copy_avx3_masked(entry, \"jlong_conjoint_arraycopy_avx3\", 3,\n-                                                 nooverlap_target, aligned, is_oop, dest_uninitialized);\n-    }\n-#endif\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", name);\n-    address start = __ pc();\n-\n-    Label L_copy_bytes, L_copy_8_bytes, L_exit;\n-    const Register from        = rdi;  \/\/ source array address\n-    const Register to          = rsi;  \/\/ destination array address\n-    const Register qword_count = rdx;  \/\/ elements count\n-    const Register saved_count = rcx;\n-\n-    __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    assert_clean_int(c_rarg2, rax);    \/\/ Make sure 'count' is clean int.\n-\n-    if (entry != NULL) {\n-      *entry = __ pc();\n-      \/\/ caller can pass a 64-bit byte count here (from Unsafe.copyMemory)\n-      BLOCK_COMMENT(\"Entry:\");\n-    }\n+  return start;\n+}\n@@ -2697,4 +2752,0 @@\n-    array_overlap_test(nooverlap_target, Address::times_8);\n-    setup_arg_regs_using_thread(); \/\/ from => rdi, to => rsi, count => rdx\n-                                   \/\/ r9 is used to save r15_thread\n-    \/\/ 'from', 'to' and 'qword_count' are now valid\n@@ -2702,7 +2753,7 @@\n-    DecoratorSet decorators = IN_HEAP | IS_ARRAY;\n-    if (dest_uninitialized) {\n-      decorators |= IS_DEST_UNINITIALIZED;\n-    }\n-    if (aligned) {\n-      decorators |= ARRAYCOPY_ALIGNED;\n-    }\n+\/\/ Helper for generating a dynamic type check.\n+\/\/ Smashes no registers.\n+void StubGenerator::generate_type_check(Register sub_klass,\n+                                        Register super_check_offset,\n+                                        Register super_klass,\n+                                        Label& L_success) {\n+  assert_different_registers(sub_klass, super_check_offset, super_klass);\n@@ -2710,6 +2761,1 @@\n-    BasicType type = is_oop ? T_OBJECT : T_LONG;\n-    BarrierSetAssembler *bs = BarrierSet::barrier_set()->barrier_set_assembler();\n-    bs->arraycopy_prologue(_masm, decorators, type, from, to, qword_count);\n-    {\n-      \/\/ UnsafeCopyMemory page error: continue after ucm\n-      UnsafeCopyMemoryMark ucmm(this, !is_oop && !aligned, true);\n+  BLOCK_COMMENT(\"type_check:\");\n@@ -2717,1 +2763,1 @@\n-      __ jmp(L_copy_bytes);\n+  Label L_miss;\n@@ -2719,20 +2765,3 @@\n-      \/\/ Copy trailing qwords\n-    __ BIND(L_copy_8_bytes);\n-      __ movq(rax, Address(from, qword_count, Address::times_8, -8));\n-      __ movq(Address(to, qword_count, Address::times_8, -8), rax);\n-      __ decrement(qword_count);\n-      __ jcc(Assembler::notZero, L_copy_8_bytes);\n-    }\n-    if (is_oop) {\n-      __ jmp(L_exit);\n-    } else {\n-      restore_arg_regs_using_thread();\n-      INC_COUNTER_NP(SharedRuntime::_jlong_array_copy_ctr, rscratch1); \/\/ Update counter after rscratch1 is free\n-      __ xorptr(rax, rax); \/\/ return 0\n-      __ vzeroupper();\n-      __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n-      __ ret(0);\n-    }\n-    {\n-      \/\/ UnsafeCopyMemory page error: continue after ucm\n-      UnsafeCopyMemoryMark ucmm(this, !is_oop && !aligned, true);\n+  __ check_klass_subtype_fast_path(sub_klass, super_klass, noreg,        &L_success, &L_miss, NULL,\n+                                   super_check_offset);\n+  __ check_klass_subtype_slow_path(sub_klass, super_klass, noreg, noreg, &L_success, NULL);\n@@ -2740,13 +2769,3 @@\n-      \/\/ Copy in multi-bytes chunks\n-      copy_bytes_backward(from, to, qword_count, rax, L_copy_bytes, L_copy_8_bytes);\n-    }\n-    __ BIND(L_exit);\n-    bs->arraycopy_epilogue(_masm, decorators, type, from, to, qword_count);\n-    restore_arg_regs_using_thread();\n-    INC_COUNTER_NP(is_oop ? SharedRuntime::_oop_array_copy_ctr :\n-                            SharedRuntime::_jlong_array_copy_ctr,\n-                   rscratch1); \/\/ Update counter after rscratch1 is free\n-    __ vzeroupper();\n-    __ xorptr(rax, rax); \/\/ return 0\n-    __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    __ ret(0);\n+  \/\/ Fall through on failure!\n+  __ BIND(L_miss);\n+}\n@@ -2754,2 +2773,17 @@\n-    return start;\n-  }\n+\/\/  Generate checkcasting array copy stub\n+\/\/\n+\/\/  Input:\n+\/\/    c_rarg0   - source array address\n+\/\/    c_rarg1   - destination array address\n+\/\/    c_rarg2   - element count, treated as ssize_t, can be zero\n+\/\/    c_rarg3   - size_t ckoff (super_check_offset)\n+\/\/ not Win64\n+\/\/    c_rarg4   - oop ckval (super_klass)\n+\/\/ Win64\n+\/\/    rsp+40    - oop ckval (super_klass)\n+\/\/\n+\/\/  Output:\n+\/\/    rax ==  0  -  success\n+\/\/    rax == -1^K - failure, where K is partial transfer count\n+\/\/\n+address StubGenerator::generate_checkcast_copy(const char *name, address *entry, bool dest_uninitialized) {\n@@ -2757,0 +2791,1 @@\n+  Label L_load_element, L_store_element, L_do_card_marks, L_done;\n@@ -2758,7 +2793,6 @@\n-  \/\/ Helper for generating a dynamic type check.\n-  \/\/ Smashes no registers.\n-  void generate_type_check(Register sub_klass,\n-                           Register super_check_offset,\n-                           Register super_klass,\n-                           Label& L_success) {\n-    assert_different_registers(sub_klass, super_check_offset, super_klass);\n+  \/\/ Input registers (after setup_arg_regs)\n+  const Register from        = rdi;   \/\/ source array address\n+  const Register to          = rsi;   \/\/ destination array address\n+  const Register length      = rdx;   \/\/ elements count\n+  const Register ckoff       = rcx;   \/\/ super_check_offset\n+  const Register ckval       = r8;    \/\/ super_klass\n@@ -2766,1 +2800,7 @@\n-    BLOCK_COMMENT(\"type_check:\");\n+  \/\/ Registers used as temps (r13, r14 are save-on-entry)\n+  const Register end_from    = from;  \/\/ source array end address\n+  const Register end_to      = r13;   \/\/ destination array end address\n+  const Register count       = rdx;   \/\/ -(count_remaining)\n+  const Register r14_length  = r14;   \/\/ saved copy of length\n+  \/\/ End pointers are inclusive, and if length is not zero they point\n+  \/\/ to the last unit copied:  end_to[0] := end_from[0]\n@@ -2768,1 +2808,2 @@\n-    Label L_miss;\n+  const Register rax_oop    = rax;    \/\/ actual oop copied\n+  const Register r11_klass  = r11;    \/\/ oop._klass\n@@ -2770,3 +2811,6 @@\n-    __ check_klass_subtype_fast_path(sub_klass, super_klass, noreg,        &L_success, &L_miss, NULL,\n-                                     super_check_offset);\n-    __ check_klass_subtype_slow_path(sub_klass, super_klass, noreg, noreg, &L_success, NULL);\n+  \/\/---------------------------------------------------------------\n+  \/\/ Assembler stub will be used for this call to arraycopy\n+  \/\/ if the two arrays are subtypes of Object[] but the\n+  \/\/ destination array type is not equal to or a supertype\n+  \/\/ of the source type.  Each element must be separately\n+  \/\/ checked.\n@@ -2774,3 +2818,3 @@\n-    \/\/ Fall through on failure!\n-    __ BIND(L_miss);\n-  }\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", name);\n+  address start = __ pc();\n@@ -2778,52 +2822,1 @@\n-  \/\/\n-  \/\/  Generate checkcasting array copy stub\n-  \/\/\n-  \/\/  Input:\n-  \/\/    c_rarg0   - source array address\n-  \/\/    c_rarg1   - destination array address\n-  \/\/    c_rarg2   - element count, treated as ssize_t, can be zero\n-  \/\/    c_rarg3   - size_t ckoff (super_check_offset)\n-  \/\/ not Win64\n-  \/\/    c_rarg4   - oop ckval (super_klass)\n-  \/\/ Win64\n-  \/\/    rsp+40    - oop ckval (super_klass)\n-  \/\/\n-  \/\/  Output:\n-  \/\/    rax ==  0  -  success\n-  \/\/    rax == -1^K - failure, where K is partial transfer count\n-  \/\/\n-  address generate_checkcast_copy(const char *name, address *entry,\n-                                  bool dest_uninitialized = false) {\n-\n-    Label L_load_element, L_store_element, L_do_card_marks, L_done;\n-\n-    \/\/ Input registers (after setup_arg_regs)\n-    const Register from        = rdi;   \/\/ source array address\n-    const Register to          = rsi;   \/\/ destination array address\n-    const Register length      = rdx;   \/\/ elements count\n-    const Register ckoff       = rcx;   \/\/ super_check_offset\n-    const Register ckval       = r8;    \/\/ super_klass\n-\n-    \/\/ Registers used as temps (r13, r14 are save-on-entry)\n-    const Register end_from    = from;  \/\/ source array end address\n-    const Register end_to      = r13;   \/\/ destination array end address\n-    const Register count       = rdx;   \/\/ -(count_remaining)\n-    const Register r14_length  = r14;   \/\/ saved copy of length\n-    \/\/ End pointers are inclusive, and if length is not zero they point\n-    \/\/ to the last unit copied:  end_to[0] := end_from[0]\n-\n-    const Register rax_oop    = rax;    \/\/ actual oop copied\n-    const Register r11_klass  = r11;    \/\/ oop._klass\n-\n-    \/\/---------------------------------------------------------------\n-    \/\/ Assembler stub will be used for this call to arraycopy\n-    \/\/ if the two arrays are subtypes of Object[] but the\n-    \/\/ destination array type is not equal to or a supertype\n-    \/\/ of the source type.  Each element must be separately\n-    \/\/ checked.\n-\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", name);\n-    address start = __ pc();\n-\n-    __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n@@ -2832,7 +2825,7 @@\n-    \/\/ caller guarantees that the arrays really are different\n-    \/\/ otherwise, we would have to make conjoint checks\n-    { Label L;\n-      array_overlap_test(L, TIMES_OOP);\n-      __ stop(\"checkcast_copy within a single array\");\n-      __ bind(L);\n-    }\n+  \/\/ caller guarantees that the arrays really are different\n+  \/\/ otherwise, we would have to make conjoint checks\n+  { Label L;\n+    array_overlap_test(L, TIMES_OOP);\n+    __ stop(\"checkcast_copy within a single array\");\n+    __ bind(L);\n+  }\n@@ -2841,3 +2834,3 @@\n-    setup_arg_regs(4); \/\/ from => rdi, to => rsi, length => rdx\n-                       \/\/ ckoff => rcx, ckval => r8\n-                       \/\/ r9 and r10 may be used to save non-volatile registers\n+  setup_arg_regs(4); \/\/ from => rdi, to => rsi, length => rdx\n+                     \/\/ ckoff => rcx, ckval => r8\n+                     \/\/ r9 and r10 may be used to save non-volatile registers\n@@ -2845,2 +2838,2 @@\n-    \/\/ last argument (#4) is on stack on Win64\n-    __ movptr(ckval, Address(rsp, 6 * wordSize));\n+  \/\/ last argument (#4) is on stack on Win64\n+  __ movptr(ckval, Address(rsp, 6 * wordSize));\n@@ -2849,5 +2842,5 @@\n-    \/\/ Caller of this entry point must set up the argument registers.\n-    if (entry != NULL) {\n-      *entry = __ pc();\n-      BLOCK_COMMENT(\"Entry:\");\n-    }\n+  \/\/ Caller of this entry point must set up the argument registers.\n+  if (entry != NULL) {\n+    *entry = __ pc();\n+    BLOCK_COMMENT(\"Entry:\");\n+  }\n@@ -2855,11 +2848,11 @@\n-    \/\/ allocate spill slots for r13, r14\n-    enum {\n-      saved_r13_offset,\n-      saved_r14_offset,\n-      saved_r10_offset,\n-      saved_rbp_offset\n-    };\n-    __ subptr(rsp, saved_rbp_offset * wordSize);\n-    __ movptr(Address(rsp, saved_r13_offset * wordSize), r13);\n-    __ movptr(Address(rsp, saved_r14_offset * wordSize), r14);\n-    __ movptr(Address(rsp, saved_r10_offset * wordSize), r10);\n+  \/\/ allocate spill slots for r13, r14\n+  enum {\n+    saved_r13_offset,\n+    saved_r14_offset,\n+    saved_r10_offset,\n+    saved_rbp_offset\n+  };\n+  __ subptr(rsp, saved_rbp_offset * wordSize);\n+  __ movptr(Address(rsp, saved_r13_offset * wordSize), r13);\n+  __ movptr(Address(rsp, saved_r14_offset * wordSize), r14);\n+  __ movptr(Address(rsp, saved_r10_offset * wordSize), r10);\n@@ -2868,6 +2861,6 @@\n-      Label L2;\n-      __ get_thread(r14);\n-      __ cmpptr(r15_thread, r14);\n-      __ jcc(Assembler::equal, L2);\n-      __ stop(\"StubRoutines::call_stub: r15_thread is modified by call\");\n-      __ bind(L2);\n+    Label L2;\n+    __ get_thread(r14);\n+    __ cmpptr(r15_thread, r14);\n+    __ jcc(Assembler::equal, L2);\n+    __ stop(\"StubRoutines::call_stub: r15_thread is modified by call\");\n+    __ bind(L2);\n@@ -2876,3 +2869,3 @@\n-    \/\/ check that int operands are properly extended to size_t\n-    assert_clean_int(length, rax);\n-    assert_clean_int(ckoff, rax);\n+  \/\/ check that int operands are properly extended to size_t\n+  assert_clean_int(length, rax);\n+  assert_clean_int(ckoff, rax);\n@@ -2881,10 +2874,10 @@\n-    BLOCK_COMMENT(\"assert consistent ckoff\/ckval\");\n-    \/\/ The ckoff and ckval must be mutually consistent,\n-    \/\/ even though caller generates both.\n-    { Label L;\n-      int sco_offset = in_bytes(Klass::super_check_offset_offset());\n-      __ cmpl(ckoff, Address(ckval, sco_offset));\n-      __ jcc(Assembler::equal, L);\n-      __ stop(\"super_check_offset inconsistent\");\n-      __ bind(L);\n-    }\n+  BLOCK_COMMENT(\"assert consistent ckoff\/ckval\");\n+  \/\/ The ckoff and ckval must be mutually consistent,\n+  \/\/ even though caller generates both.\n+  { Label L;\n+    int sco_offset = in_bytes(Klass::super_check_offset_offset());\n+    __ cmpl(ckoff, Address(ckval, sco_offset));\n+    __ jcc(Assembler::equal, L);\n+    __ stop(\"super_check_offset inconsistent\");\n+    __ bind(L);\n+  }\n@@ -2893,78 +2886,6 @@\n-    \/\/ Loop-invariant addresses.  They are exclusive end pointers.\n-    Address end_from_addr(from, length, TIMES_OOP, 0);\n-    Address   end_to_addr(to,   length, TIMES_OOP, 0);\n-    \/\/ Loop-variant addresses.  They assume post-incremented count < 0.\n-    Address from_element_addr(end_from, count, TIMES_OOP, 0);\n-    Address   to_element_addr(end_to,   count, TIMES_OOP, 0);\n-\n-    DecoratorSet decorators = IN_HEAP | IS_ARRAY | ARRAYCOPY_CHECKCAST | ARRAYCOPY_DISJOINT;\n-    if (dest_uninitialized) {\n-      decorators |= IS_DEST_UNINITIALIZED;\n-    }\n-\n-    BasicType type = T_OBJECT;\n-    BarrierSetAssembler *bs = BarrierSet::barrier_set()->barrier_set_assembler();\n-    bs->arraycopy_prologue(_masm, decorators, type, from, to, count);\n-\n-    \/\/ Copy from low to high addresses, indexed from the end of each array.\n-    __ lea(end_from, end_from_addr);\n-    __ lea(end_to,   end_to_addr);\n-    __ movptr(r14_length, length);        \/\/ save a copy of the length\n-    assert(length == count, \"\");          \/\/ else fix next line:\n-    __ negptr(count);                     \/\/ negate and test the length\n-    __ jcc(Assembler::notZero, L_load_element);\n-\n-    \/\/ Empty array:  Nothing to do.\n-    __ xorptr(rax, rax);                  \/\/ return 0 on (trivial) success\n-    __ jmp(L_done);\n-\n-    \/\/ ======== begin loop ========\n-    \/\/ (Loop is rotated; its entry is L_load_element.)\n-    \/\/ Loop control:\n-    \/\/   for (count = -count; count != 0; count++)\n-    \/\/ Base pointers src, dst are biased by 8*(count-1),to last element.\n-    __ align(OptoLoopAlignment);\n-\n-    __ BIND(L_store_element);\n-    __ store_heap_oop(to_element_addr, rax_oop, noreg, noreg, noreg, AS_RAW);  \/\/ store the oop\n-    __ increment(count);               \/\/ increment the count toward zero\n-    __ jcc(Assembler::zero, L_do_card_marks);\n-\n-    \/\/ ======== loop entry is here ========\n-    __ BIND(L_load_element);\n-    __ load_heap_oop(rax_oop, from_element_addr, noreg, noreg, AS_RAW); \/\/ load the oop\n-    __ testptr(rax_oop, rax_oop);\n-    __ jcc(Assembler::zero, L_store_element);\n-\n-    __ load_klass(r11_klass, rax_oop, rscratch1);\/\/ query the object klass\n-    generate_type_check(r11_klass, ckoff, ckval, L_store_element);\n-    \/\/ ======== end loop ========\n-\n-    \/\/ It was a real error; we must depend on the caller to finish the job.\n-    \/\/ Register rdx = -1 * number of *remaining* oops, r14 = *total* oops.\n-    \/\/ Emit GC store barriers for the oops we have copied (r14 + rdx),\n-    \/\/ and report their number to the caller.\n-    assert_different_registers(rax, r14_length, count, to, end_to, rcx, rscratch1);\n-    Label L_post_barrier;\n-    __ addptr(r14_length, count);     \/\/ K = (original - remaining) oops\n-    __ movptr(rax, r14_length);       \/\/ save the value\n-    __ notptr(rax);                   \/\/ report (-1^K) to caller (does not affect flags)\n-    __ jccb(Assembler::notZero, L_post_barrier);\n-    __ jmp(L_done); \/\/ K == 0, nothing was copied, skip post barrier\n-\n-    \/\/ Come here on success only.\n-    __ BIND(L_do_card_marks);\n-    __ xorptr(rax, rax);              \/\/ return 0 on success\n-\n-    __ BIND(L_post_barrier);\n-    bs->arraycopy_epilogue(_masm, decorators, type, from, to, r14_length);\n-\n-    \/\/ Common exit point (success or failure).\n-    __ BIND(L_done);\n-    __ movptr(r13, Address(rsp, saved_r13_offset * wordSize));\n-    __ movptr(r14, Address(rsp, saved_r14_offset * wordSize));\n-    __ movptr(r10, Address(rsp, saved_r10_offset * wordSize));\n-    restore_arg_regs();\n-    INC_COUNTER_NP(SharedRuntime::_checkcast_array_copy_ctr, rscratch1); \/\/ Update counter after rscratch1 is free\n-    __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    __ ret(0);\n+  \/\/ Loop-invariant addresses.  They are exclusive end pointers.\n+  Address end_from_addr(from, length, TIMES_OOP, 0);\n+  Address   end_to_addr(to,   length, TIMES_OOP, 0);\n+  \/\/ Loop-variant addresses.  They assume post-incremented count < 0.\n+  Address from_element_addr(end_from, count, TIMES_OOP, 0);\n+  Address   to_element_addr(end_to,   count, TIMES_OOP, 0);\n@@ -2972,1 +2893,3 @@\n-    return start;\n+  DecoratorSet decorators = IN_HEAP | IS_ARRAY | ARRAYCOPY_CHECKCAST | ARRAYCOPY_DISJOINT;\n+  if (dest_uninitialized) {\n+    decorators |= IS_DEST_UNINITIALIZED;\n@@ -2975,18 +2898,66 @@\n-  \/\/\n-  \/\/  Generate 'unsafe' array copy stub\n-  \/\/  Though just as safe as the other stubs, it takes an unscaled\n-  \/\/  size_t argument instead of an element count.\n-  \/\/\n-  \/\/  Input:\n-  \/\/    c_rarg0   - source array address\n-  \/\/    c_rarg1   - destination array address\n-  \/\/    c_rarg2   - byte count, treated as ssize_t, can be zero\n-  \/\/\n-  \/\/ Examines the alignment of the operands and dispatches\n-  \/\/ to a long, int, short, or byte copy loop.\n-  \/\/\n-  address generate_unsafe_copy(const char *name,\n-                               address byte_copy_entry, address short_copy_entry,\n-                               address int_copy_entry, address long_copy_entry) {\n-\n-    Label L_long_aligned, L_int_aligned, L_short_aligned;\n+  BasicType type = T_OBJECT;\n+  BarrierSetAssembler *bs = BarrierSet::barrier_set()->barrier_set_assembler();\n+  bs->arraycopy_prologue(_masm, decorators, type, from, to, count);\n+\n+  \/\/ Copy from low to high addresses, indexed from the end of each array.\n+  __ lea(end_from, end_from_addr);\n+  __ lea(end_to,   end_to_addr);\n+  __ movptr(r14_length, length);        \/\/ save a copy of the length\n+  assert(length == count, \"\");          \/\/ else fix next line:\n+  __ negptr(count);                     \/\/ negate and test the length\n+  __ jcc(Assembler::notZero, L_load_element);\n+\n+  \/\/ Empty array:  Nothing to do.\n+  __ xorptr(rax, rax);                  \/\/ return 0 on (trivial) success\n+  __ jmp(L_done);\n+\n+  \/\/ ======== begin loop ========\n+  \/\/ (Loop is rotated; its entry is L_load_element.)\n+  \/\/ Loop control:\n+  \/\/   for (count = -count; count != 0; count++)\n+  \/\/ Base pointers src, dst are biased by 8*(count-1),to last element.\n+  __ align(OptoLoopAlignment);\n+\n+  __ BIND(L_store_element);\n+  __ store_heap_oop(to_element_addr, rax_oop, noreg, noreg, noreg, AS_RAW);  \/\/ store the oop\n+  __ increment(count);               \/\/ increment the count toward zero\n+  __ jcc(Assembler::zero, L_do_card_marks);\n+\n+  \/\/ ======== loop entry is here ========\n+  __ BIND(L_load_element);\n+  __ load_heap_oop(rax_oop, from_element_addr, noreg, noreg, AS_RAW); \/\/ load the oop\n+  __ testptr(rax_oop, rax_oop);\n+  __ jcc(Assembler::zero, L_store_element);\n+\n+  __ load_klass(r11_klass, rax_oop, rscratch1);\/\/ query the object klass\n+  generate_type_check(r11_klass, ckoff, ckval, L_store_element);\n+  \/\/ ======== end loop ========\n+\n+  \/\/ It was a real error; we must depend on the caller to finish the job.\n+  \/\/ Register rdx = -1 * number of *remaining* oops, r14 = *total* oops.\n+  \/\/ Emit GC store barriers for the oops we have copied (r14 + rdx),\n+  \/\/ and report their number to the caller.\n+  assert_different_registers(rax, r14_length, count, to, end_to, rcx, rscratch1);\n+  Label L_post_barrier;\n+  __ addptr(r14_length, count);     \/\/ K = (original - remaining) oops\n+  __ movptr(rax, r14_length);       \/\/ save the value\n+  __ notptr(rax);                   \/\/ report (-1^K) to caller (does not affect flags)\n+  __ jccb(Assembler::notZero, L_post_barrier);\n+  __ jmp(L_done); \/\/ K == 0, nothing was copied, skip post barrier\n+\n+  \/\/ Come here on success only.\n+  __ BIND(L_do_card_marks);\n+  __ xorptr(rax, rax);              \/\/ return 0 on success\n+\n+  __ BIND(L_post_barrier);\n+  bs->arraycopy_epilogue(_masm, decorators, type, from, to, r14_length);\n+\n+  \/\/ Common exit point (success or failure).\n+  __ BIND(L_done);\n+  __ movptr(r13, Address(rsp, saved_r13_offset * wordSize));\n+  __ movptr(r14, Address(rsp, saved_r14_offset * wordSize));\n+  __ movptr(r10, Address(rsp, saved_r10_offset * wordSize));\n+  restore_arg_regs();\n+  INC_COUNTER_NP(SharedRuntime::_checkcast_array_copy_ctr, rscratch1); \/\/ Update counter after rscratch1 is free\n+  __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ ret(0);\n@@ -2994,7 +2965,2 @@\n-    \/\/ Input registers (before setup_arg_regs)\n-    const Register from        = c_rarg0;  \/\/ source array address\n-    const Register to          = c_rarg1;  \/\/ destination array address\n-    const Register size        = c_rarg2;  \/\/ byte count (size_t)\n-\n-    \/\/ Register used as a temp\n-    const Register bits        = rax;      \/\/ test copy of low bits\n+  return start;\n+}\n@@ -3002,3 +2968,15 @@\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", name);\n-    address start = __ pc();\n+\/\/  Generate 'unsafe' array copy stub\n+\/\/  Though just as safe as the other stubs, it takes an unscaled\n+\/\/  size_t argument instead of an element count.\n+\/\/\n+\/\/  Input:\n+\/\/    c_rarg0   - source array address\n+\/\/    c_rarg1   - destination array address\n+\/\/    c_rarg2   - byte count, treated as ssize_t, can be zero\n+\/\/\n+\/\/ Examines the alignment of the operands and dispatches\n+\/\/ to a long, int, short, or byte copy loop.\n+\/\/\n+address StubGenerator::generate_unsafe_copy(const char *name,\n+                                            address byte_copy_entry, address short_copy_entry,\n+                                            address int_copy_entry, address long_copy_entry) {\n@@ -3006,1 +2984,1 @@\n-    __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  Label L_long_aligned, L_int_aligned, L_short_aligned;\n@@ -3008,2 +2986,4 @@\n-    \/\/ bump this on entry, not on exit:\n-    INC_COUNTER_NP(SharedRuntime::_unsafe_array_copy_ctr, rscratch1);\n+  \/\/ Input registers (before setup_arg_regs)\n+  const Register from        = c_rarg0;  \/\/ source array address\n+  const Register to          = c_rarg1;  \/\/ destination array address\n+  const Register size        = c_rarg2;  \/\/ byte count (size_t)\n@@ -3011,3 +2991,2 @@\n-    __ mov(bits, from);\n-    __ orptr(bits, to);\n-    __ orptr(bits, size);\n+  \/\/ Register used as a temp\n+  const Register bits        = rax;      \/\/ test copy of low bits\n@@ -3015,2 +2994,3 @@\n-    __ testb(bits, BytesPerLong-1);\n-    __ jccb(Assembler::zero, L_long_aligned);\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", name);\n+  address start = __ pc();\n@@ -3018,2 +2998,1 @@\n-    __ testb(bits, BytesPerInt-1);\n-    __ jccb(Assembler::zero, L_int_aligned);\n+  __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n@@ -3021,2 +3000,2 @@\n-    __ testb(bits, BytesPerShort-1);\n-    __ jump_cc(Assembler::notZero, RuntimeAddress(byte_copy_entry));\n+  \/\/ bump this on entry, not on exit:\n+  INC_COUNTER_NP(SharedRuntime::_unsafe_array_copy_ctr, rscratch1);\n@@ -3024,3 +3003,3 @@\n-    __ BIND(L_short_aligned);\n-    __ shrptr(size, LogBytesPerShort); \/\/ size => short_count\n-    __ jump(RuntimeAddress(short_copy_entry));\n+  __ mov(bits, from);\n+  __ orptr(bits, to);\n+  __ orptr(bits, size);\n@@ -3028,3 +3007,2 @@\n-    __ BIND(L_int_aligned);\n-    __ shrptr(size, LogBytesPerInt); \/\/ size => int_count\n-    __ jump(RuntimeAddress(int_copy_entry));\n+  __ testb(bits, BytesPerLong-1);\n+  __ jccb(Assembler::zero, L_long_aligned);\n@@ -3032,3 +3010,2 @@\n-    __ BIND(L_long_aligned);\n-    __ shrptr(size, LogBytesPerLong); \/\/ size => qword_count\n-    __ jump(RuntimeAddress(long_copy_entry));\n+  __ testb(bits, BytesPerInt-1);\n+  __ jccb(Assembler::zero, L_int_aligned);\n@@ -3036,2 +3013,2 @@\n-    return start;\n-  }\n+  __ testb(bits, BytesPerShort-1);\n+  __ jump_cc(Assembler::notZero, RuntimeAddress(byte_copy_entry));\n@@ -3039,11 +3016,3 @@\n-  \/\/ Perform range checks on the proposed arraycopy.\n-  \/\/ Kills temp, but nothing else.\n-  \/\/ Also, clean the sign bits of src_pos and dst_pos.\n-  void arraycopy_range_checks(Register src,     \/\/ source array oop (c_rarg0)\n-                              Register src_pos, \/\/ source position (c_rarg1)\n-                              Register dst,     \/\/ destination array oo (c_rarg2)\n-                              Register dst_pos, \/\/ destination position (c_rarg3)\n-                              Register length,\n-                              Register temp,\n-                              Label& L_failed) {\n-    BLOCK_COMMENT(\"arraycopy_range_checks:\");\n+  __ BIND(L_short_aligned);\n+  __ shrptr(size, LogBytesPerShort); \/\/ size => short_count\n+  __ jump(RuntimeAddress(short_copy_entry));\n@@ -3051,5 +3020,3 @@\n-    \/\/  if (src_pos + length > arrayOop(src)->length())  FAIL;\n-    __ movl(temp, length);\n-    __ addl(temp, src_pos);             \/\/ src_pos + length\n-    __ cmpl(temp, Address(src, arrayOopDesc::length_offset_in_bytes()));\n-    __ jcc(Assembler::above, L_failed);\n+  __ BIND(L_int_aligned);\n+  __ shrptr(size, LogBytesPerInt); \/\/ size => int_count\n+  __ jump(RuntimeAddress(int_copy_entry));\n@@ -3057,5 +3024,3 @@\n-    \/\/  if (dst_pos + length > arrayOop(dst)->length())  FAIL;\n-    __ movl(temp, length);\n-    __ addl(temp, dst_pos);             \/\/ dst_pos + length\n-    __ cmpl(temp, Address(dst, arrayOopDesc::length_offset_in_bytes()));\n-    __ jcc(Assembler::above, L_failed);\n+  __ BIND(L_long_aligned);\n+  __ shrptr(size, LogBytesPerLong); \/\/ size => qword_count\n+  __ jump(RuntimeAddress(long_copy_entry));\n@@ -3063,4 +3028,2 @@\n-    \/\/ Have to clean up high 32-bits of 'src_pos' and 'dst_pos'.\n-    \/\/ Move with sign extension can be used since they are positive.\n-    __ movslq(src_pos, src_pos);\n-    __ movslq(dst_pos, dst_pos);\n+  return start;\n+}\n@@ -3068,2 +3031,31 @@\n-    BLOCK_COMMENT(\"arraycopy_range_checks done\");\n-  }\n+\/\/ Perform range checks on the proposed arraycopy.\n+\/\/ Kills temp, but nothing else.\n+\/\/ Also, clean the sign bits of src_pos and dst_pos.\n+void StubGenerator::arraycopy_range_checks(Register src,     \/\/ source array oop (c_rarg0)\n+                                           Register src_pos, \/\/ source position (c_rarg1)\n+                                           Register dst,     \/\/ destination array oo (c_rarg2)\n+                                           Register dst_pos, \/\/ destination position (c_rarg3)\n+                                           Register length,\n+                                           Register temp,\n+                                           Label& L_failed) {\n+  BLOCK_COMMENT(\"arraycopy_range_checks:\");\n+\n+  \/\/  if (src_pos + length > arrayOop(src)->length())  FAIL;\n+  __ movl(temp, length);\n+  __ addl(temp, src_pos);             \/\/ src_pos + length\n+  __ cmpl(temp, Address(src, arrayOopDesc::length_offset_in_bytes()));\n+  __ jcc(Assembler::above, L_failed);\n+\n+  \/\/  if (dst_pos + length > arrayOop(dst)->length())  FAIL;\n+  __ movl(temp, length);\n+  __ addl(temp, dst_pos);             \/\/ dst_pos + length\n+  __ cmpl(temp, Address(dst, arrayOopDesc::length_offset_in_bytes()));\n+  __ jcc(Assembler::above, L_failed);\n+\n+  \/\/ Have to clean up high 32-bits of 'src_pos' and 'dst_pos'.\n+  \/\/ Move with sign extension can be used since they are positive.\n+  __ movslq(src_pos, src_pos);\n+  __ movslq(dst_pos, dst_pos);\n+\n+  BLOCK_COMMENT(\"arraycopy_range_checks done\");\n+}\n@@ -3071,30 +3063,29 @@\n-  \/\/\n-  \/\/  Generate generic array copy stubs\n-  \/\/\n-  \/\/  Input:\n-  \/\/    c_rarg0    -  src oop\n-  \/\/    c_rarg1    -  src_pos (32-bits)\n-  \/\/    c_rarg2    -  dst oop\n-  \/\/    c_rarg3    -  dst_pos (32-bits)\n-  \/\/ not Win64\n-  \/\/    c_rarg4    -  element count (32-bits)\n-  \/\/ Win64\n-  \/\/    rsp+40     -  element count (32-bits)\n-  \/\/\n-  \/\/  Output:\n-  \/\/    rax ==  0  -  success\n-  \/\/    rax == -1^K - failure, where K is partial transfer count\n-  \/\/\n-  address generate_generic_copy(const char *name,\n-                                address byte_copy_entry, address short_copy_entry,\n-                                address int_copy_entry, address oop_copy_entry,\n-                                address long_copy_entry, address checkcast_copy_entry) {\n-\n-    Label L_failed, L_failed_0, L_objArray;\n-    Label L_copy_shorts, L_copy_ints, L_copy_longs;\n-\n-    \/\/ Input registers\n-    const Register src        = c_rarg0;  \/\/ source array oop\n-    const Register src_pos    = c_rarg1;  \/\/ source position\n-    const Register dst        = c_rarg2;  \/\/ destination array oop\n-    const Register dst_pos    = c_rarg3;  \/\/ destination position\n+\/\/  Generate generic array copy stubs\n+\/\/\n+\/\/  Input:\n+\/\/    c_rarg0    -  src oop\n+\/\/    c_rarg1    -  src_pos (32-bits)\n+\/\/    c_rarg2    -  dst oop\n+\/\/    c_rarg3    -  dst_pos (32-bits)\n+\/\/ not Win64\n+\/\/    c_rarg4    -  element count (32-bits)\n+\/\/ Win64\n+\/\/    rsp+40     -  element count (32-bits)\n+\/\/\n+\/\/  Output:\n+\/\/    rax ==  0  -  success\n+\/\/    rax == -1^K - failure, where K is partial transfer count\n+\/\/\n+address StubGenerator::generate_generic_copy(const char *name,\n+                                             address byte_copy_entry, address short_copy_entry,\n+                                             address int_copy_entry, address oop_copy_entry,\n+                                             address long_copy_entry, address checkcast_copy_entry) {\n+\n+  Label L_failed, L_failed_0, L_objArray;\n+  Label L_copy_shorts, L_copy_ints, L_copy_longs;\n+\n+  \/\/ Input registers\n+  const Register src        = c_rarg0;  \/\/ source array oop\n+  const Register src_pos    = c_rarg1;  \/\/ source position\n+  const Register dst        = c_rarg2;  \/\/ destination array oop\n+  const Register dst_pos    = c_rarg3;  \/\/ destination position\n@@ -3102,2 +3093,2 @@\n-    const Register length     = c_rarg4;\n-    const Register rklass_tmp = r9;  \/\/ load_klass\n+  const Register length     = c_rarg4;\n+  const Register rklass_tmp = r9;  \/\/ load_klass\n@@ -3105,2 +3096,2 @@\n-    const Address  length(rsp, 7 * wordSize);  \/\/ elements count is on stack on Win64\n-    const Register rklass_tmp = rdi;  \/\/ load_klass\n+  const Address  length(rsp, 7 * wordSize);  \/\/ elements count is on stack on Win64\n+  const Register rklass_tmp = rdi;  \/\/ load_klass\n@@ -3109,7 +3100,7 @@\n-    { int modulus = CodeEntryAlignment;\n-      int target  = modulus - 5; \/\/ 5 = sizeof jmp(L_failed)\n-      int advance = target - (__ offset() % modulus);\n-      if (advance < 0)  advance += modulus;\n-      if (advance > 0)  __ nop(advance);\n-    }\n-    StubCodeMark mark(this, \"StubRoutines\", name);\n+  { int modulus = CodeEntryAlignment;\n+    int target  = modulus - 5; \/\/ 5 = sizeof jmp(L_failed)\n+    int advance = target - (__ offset() % modulus);\n+    if (advance < 0)  advance += modulus;\n+    if (advance > 0)  __ nop(advance);\n+  }\n+  StubCodeMark mark(this, \"StubRoutines\", name);\n@@ -3117,4 +3108,4 @@\n-    \/\/ Short-hop target to L_failed.  Makes for denser prologue code.\n-    __ BIND(L_failed_0);\n-    __ jmp(L_failed);\n-    assert(__ offset() % CodeEntryAlignment == 0, \"no further alignment needed\");\n+  \/\/ Short-hop target to L_failed.  Makes for denser prologue code.\n+  __ BIND(L_failed_0);\n+  __ jmp(L_failed);\n+  assert(__ offset() % CodeEntryAlignment == 0, \"no further alignment needed\");\n@@ -3122,2 +3113,2 @@\n-    __ align(CodeEntryAlignment);\n-    address start = __ pc();\n+  __ align(CodeEntryAlignment);\n+  address start = __ pc();\n@@ -3125,1 +3116,1 @@\n-    __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n@@ -3128,1 +3119,1 @@\n-    __ push(rklass_tmp); \/\/ rdi is callee-save on Windows\n+  __ push(rklass_tmp); \/\/ rdi is callee-save on Windows\n@@ -3131,2 +3122,2 @@\n-    \/\/ bump this on entry, not on exit:\n-    INC_COUNTER_NP(SharedRuntime::_generic_array_copy_ctr, rscratch1);\n+  \/\/ bump this on entry, not on exit:\n+  INC_COUNTER_NP(SharedRuntime::_generic_array_copy_ctr, rscratch1);\n@@ -3134,13 +3125,13 @@\n-    \/\/-----------------------------------------------------------------------\n-    \/\/ Assembler stub will be used for this call to arraycopy\n-    \/\/ if the following conditions are met:\n-    \/\/\n-    \/\/ (1) src and dst must not be null.\n-    \/\/ (2) src_pos must not be negative.\n-    \/\/ (3) dst_pos must not be negative.\n-    \/\/ (4) length  must not be negative.\n-    \/\/ (5) src klass and dst klass should be the same and not NULL.\n-    \/\/ (6) src and dst should be arrays.\n-    \/\/ (7) src_pos + length must not exceed length of src.\n-    \/\/ (8) dst_pos + length must not exceed length of dst.\n-    \/\/\n+  \/\/-----------------------------------------------------------------------\n+  \/\/ Assembler stub will be used for this call to arraycopy\n+  \/\/ if the following conditions are met:\n+  \/\/\n+  \/\/ (1) src and dst must not be null.\n+  \/\/ (2) src_pos must not be negative.\n+  \/\/ (3) dst_pos must not be negative.\n+  \/\/ (4) length  must not be negative.\n+  \/\/ (5) src klass and dst klass should be the same and not NULL.\n+  \/\/ (6) src and dst should be arrays.\n+  \/\/ (7) src_pos + length must not exceed length of src.\n+  \/\/ (8) dst_pos + length must not exceed length of dst.\n+  \/\/\n@@ -3148,36 +3139,36 @@\n-    \/\/  if (src == NULL) return -1;\n-    __ testptr(src, src);         \/\/ src oop\n-    size_t j1off = __ offset();\n-    __ jccb(Assembler::zero, L_failed_0);\n-\n-    \/\/  if (src_pos < 0) return -1;\n-    __ testl(src_pos, src_pos); \/\/ src_pos (32-bits)\n-    __ jccb(Assembler::negative, L_failed_0);\n-\n-    \/\/  if (dst == NULL) return -1;\n-    __ testptr(dst, dst);         \/\/ dst oop\n-    __ jccb(Assembler::zero, L_failed_0);\n-\n-    \/\/  if (dst_pos < 0) return -1;\n-    __ testl(dst_pos, dst_pos); \/\/ dst_pos (32-bits)\n-    size_t j4off = __ offset();\n-    __ jccb(Assembler::negative, L_failed_0);\n-\n-    \/\/ The first four tests are very dense code,\n-    \/\/ but not quite dense enough to put four\n-    \/\/ jumps in a 16-byte instruction fetch buffer.\n-    \/\/ That's good, because some branch predicters\n-    \/\/ do not like jumps so close together.\n-    \/\/ Make sure of this.\n-    guarantee(((j1off ^ j4off) & ~15) != 0, \"I$ line of 1st & 4th jumps\");\n-\n-    \/\/ registers used as temp\n-    const Register r11_length    = r11; \/\/ elements count to copy\n-    const Register r10_src_klass = r10; \/\/ array klass\n-\n-    \/\/  if (length < 0) return -1;\n-    __ movl(r11_length, length);        \/\/ length (elements count, 32-bits value)\n-    __ testl(r11_length, r11_length);\n-    __ jccb(Assembler::negative, L_failed_0);\n-\n-    __ load_klass(r10_src_klass, src, rklass_tmp);\n+  \/\/  if (src == NULL) return -1;\n+  __ testptr(src, src);         \/\/ src oop\n+  size_t j1off = __ offset();\n+  __ jccb(Assembler::zero, L_failed_0);\n+\n+  \/\/  if (src_pos < 0) return -1;\n+  __ testl(src_pos, src_pos); \/\/ src_pos (32-bits)\n+  __ jccb(Assembler::negative, L_failed_0);\n+\n+  \/\/  if (dst == NULL) return -1;\n+  __ testptr(dst, dst);         \/\/ dst oop\n+  __ jccb(Assembler::zero, L_failed_0);\n+\n+  \/\/  if (dst_pos < 0) return -1;\n+  __ testl(dst_pos, dst_pos); \/\/ dst_pos (32-bits)\n+  size_t j4off = __ offset();\n+  __ jccb(Assembler::negative, L_failed_0);\n+\n+  \/\/ The first four tests are very dense code,\n+  \/\/ but not quite dense enough to put four\n+  \/\/ jumps in a 16-byte instruction fetch buffer.\n+  \/\/ That's good, because some branch predicters\n+  \/\/ do not like jumps so close together.\n+  \/\/ Make sure of this.\n+  guarantee(((j1off ^ j4off) & ~15) != 0, \"I$ line of 1st & 4th jumps\");\n+\n+  \/\/ registers used as temp\n+  const Register r11_length    = r11; \/\/ elements count to copy\n+  const Register r10_src_klass = r10; \/\/ array klass\n+\n+  \/\/  if (length < 0) return -1;\n+  __ movl(r11_length, length);        \/\/ length (elements count, 32-bits value)\n+  __ testl(r11_length, r11_length);\n+  __ jccb(Assembler::negative, L_failed_0);\n+\n+  __ load_klass(r10_src_klass, src, rklass_tmp);\n@@ -3185,14 +3176,14 @@\n-    \/\/  assert(src->klass() != NULL);\n-    {\n-      BLOCK_COMMENT(\"assert klasses not null {\");\n-      Label L1, L2;\n-      __ testptr(r10_src_klass, r10_src_klass);\n-      __ jcc(Assembler::notZero, L2);   \/\/ it is broken if klass is NULL\n-      __ bind(L1);\n-      __ stop(\"broken null klass\");\n-      __ bind(L2);\n-      __ load_klass(rax, dst, rklass_tmp);\n-      __ cmpq(rax, 0);\n-      __ jcc(Assembler::equal, L1);     \/\/ this would be broken also\n-      BLOCK_COMMENT(\"} assert klasses not null done\");\n-    }\n+  \/\/  assert(src->klass() != NULL);\n+  {\n+    BLOCK_COMMENT(\"assert klasses not null {\");\n+    Label L1, L2;\n+    __ testptr(r10_src_klass, r10_src_klass);\n+    __ jcc(Assembler::notZero, L2);   \/\/ it is broken if klass is NULL\n+    __ bind(L1);\n+    __ stop(\"broken null klass\");\n+    __ bind(L2);\n+    __ load_klass(rax, dst, rklass_tmp);\n+    __ cmpq(rax, 0);\n+    __ jcc(Assembler::equal, L1);     \/\/ this would be broken also\n+    BLOCK_COMMENT(\"} assert klasses not null done\");\n+  }\n@@ -3201,7 +3192,7 @@\n-    \/\/ Load layout helper (32-bits)\n-    \/\/\n-    \/\/  |array_tag|     | header_size | element_type |     |log2_element_size|\n-    \/\/ 32        30    24            16              8     2                 0\n-    \/\/\n-    \/\/   array_tag: typeArray = 0x3, objArray = 0x2, non-array = 0x0\n-    \/\/\n+  \/\/ Load layout helper (32-bits)\n+  \/\/\n+  \/\/  |array_tag|     | header_size | element_type |     |log2_element_size|\n+  \/\/ 32        30    24            16              8     2                 0\n+  \/\/\n+  \/\/   array_tag: typeArray = 0x3, objArray = 0x2, non-array = 0x0\n+  \/\/\n@@ -3209,1 +3200,1 @@\n-    const int lh_offset = in_bytes(Klass::layout_helper_offset());\n+  const int lh_offset = in_bytes(Klass::layout_helper_offset());\n@@ -3211,4 +3202,4 @@\n-    \/\/ Handle objArrays completely differently...\n-    const jint objArray_lh = Klass::array_layout_helper(T_OBJECT);\n-    __ cmpl(Address(r10_src_klass, lh_offset), objArray_lh);\n-    __ jcc(Assembler::equal, L_objArray);\n+  \/\/ Handle objArrays completely differently...\n+  const jint objArray_lh = Klass::array_layout_helper(T_OBJECT);\n+  __ cmpl(Address(r10_src_klass, lh_offset), objArray_lh);\n+  __ jcc(Assembler::equal, L_objArray);\n@@ -3216,4 +3207,4 @@\n-    \/\/  if (src->klass() != dst->klass()) return -1;\n-    __ load_klass(rax, dst, rklass_tmp);\n-    __ cmpq(r10_src_klass, rax);\n-    __ jcc(Assembler::notEqual, L_failed);\n+  \/\/  if (src->klass() != dst->klass()) return -1;\n+  __ load_klass(rax, dst, rklass_tmp);\n+  __ cmpq(r10_src_klass, rax);\n+  __ jcc(Assembler::notEqual, L_failed);\n@@ -3221,2 +3212,2 @@\n-    const Register rax_lh = rax;  \/\/ layout helper\n-    __ movl(rax_lh, Address(r10_src_klass, lh_offset));\n+  const Register rax_lh = rax;  \/\/ layout helper\n+  __ movl(rax_lh, Address(r10_src_klass, lh_offset));\n@@ -3224,3 +3215,3 @@\n-    \/\/  if (!src->is_Array()) return -1;\n-    __ cmpl(rax_lh, Klass::_lh_neutral_value);\n-    __ jcc(Assembler::greaterEqual, L_failed);\n+  \/\/  if (!src->is_Array()) return -1;\n+  __ cmpl(rax_lh, Klass::_lh_neutral_value);\n+  __ jcc(Assembler::greaterEqual, L_failed);\n@@ -3228,1 +3219,1 @@\n-    \/\/ At this point, it is known to be a typeArray (array_tag 0x3).\n+  \/\/ At this point, it is known to be a typeArray (array_tag 0x3).\n@@ -3230,9 +3221,9 @@\n-    {\n-      BLOCK_COMMENT(\"assert primitive array {\");\n-      Label L;\n-      __ cmpl(rax_lh, (Klass::_lh_array_tag_type_value << Klass::_lh_array_tag_shift));\n-      __ jcc(Assembler::greaterEqual, L);\n-      __ stop(\"must be a primitive array\");\n-      __ bind(L);\n-      BLOCK_COMMENT(\"} assert primitive array done\");\n-    }\n+  {\n+    BLOCK_COMMENT(\"assert primitive array {\");\n+    Label L;\n+    __ cmpl(rax_lh, (Klass::_lh_array_tag_type_value << Klass::_lh_array_tag_shift));\n+    __ jcc(Assembler::greaterEqual, L);\n+    __ stop(\"must be a primitive array\");\n+    __ bind(L);\n+    BLOCK_COMMENT(\"} assert primitive array done\");\n+  }\n@@ -3241,2 +3232,2 @@\n-    arraycopy_range_checks(src, src_pos, dst, dst_pos, r11_length,\n-                           r10, L_failed);\n+  arraycopy_range_checks(src, src_pos, dst, dst_pos, r11_length,\n+                         r10, L_failed);\n@@ -3244,5 +3235,5 @@\n-    \/\/ TypeArrayKlass\n-    \/\/\n-    \/\/ src_addr = (src + array_header_in_bytes()) + (src_pos << log2elemsize);\n-    \/\/ dst_addr = (dst + array_header_in_bytes()) + (dst_pos << log2elemsize);\n-    \/\/\n+  \/\/ TypeArrayKlass\n+  \/\/\n+  \/\/ src_addr = (src + array_header_in_bytes()) + (src_pos << log2elemsize);\n+  \/\/ dst_addr = (dst + array_header_in_bytes()) + (dst_pos << log2elemsize);\n+  \/\/\n@@ -3250,2 +3241,2 @@\n-    const Register r10_offset = r10;    \/\/ array offset\n-    const Register rax_elsize = rax_lh; \/\/ element size\n+  const Register r10_offset = r10;    \/\/ array offset\n+  const Register rax_elsize = rax_lh; \/\/ element size\n@@ -3253,7 +3244,7 @@\n-    __ movl(r10_offset, rax_lh);\n-    __ shrl(r10_offset, Klass::_lh_header_size_shift);\n-    __ andptr(r10_offset, Klass::_lh_header_size_mask);   \/\/ array_offset\n-    __ addptr(src, r10_offset);           \/\/ src array offset\n-    __ addptr(dst, r10_offset);           \/\/ dst array offset\n-    BLOCK_COMMENT(\"choose copy loop based on element size\");\n-    __ andl(rax_lh, Klass::_lh_log2_element_size_mask); \/\/ rax_lh -> rax_elsize\n+  __ movl(r10_offset, rax_lh);\n+  __ shrl(r10_offset, Klass::_lh_header_size_shift);\n+  __ andptr(r10_offset, Klass::_lh_header_size_mask);   \/\/ array_offset\n+  __ addptr(src, r10_offset);           \/\/ src array offset\n+  __ addptr(dst, r10_offset);           \/\/ dst array offset\n+  BLOCK_COMMENT(\"choose copy loop based on element size\");\n+  __ andl(rax_lh, Klass::_lh_log2_element_size_mask); \/\/ rax_lh -> rax_elsize\n@@ -3262,1 +3253,1 @@\n-    __ pop(rklass_tmp); \/\/ Restore callee-save rdi\n+  __ pop(rklass_tmp); \/\/ Restore callee-save rdi\n@@ -3265,32 +3256,32 @@\n-    \/\/ next registers should be set before the jump to corresponding stub\n-    const Register from     = c_rarg0;  \/\/ source array address\n-    const Register to       = c_rarg1;  \/\/ destination array address\n-    const Register count    = c_rarg2;  \/\/ elements count\n-\n-    \/\/ 'from', 'to', 'count' registers should be set in such order\n-    \/\/ since they are the same as 'src', 'src_pos', 'dst'.\n-\n-    __ cmpl(rax_elsize, 0);\n-    __ jccb(Assembler::notEqual, L_copy_shorts);\n-    __ lea(from, Address(src, src_pos, Address::times_1, 0));\/\/ src_addr\n-    __ lea(to,   Address(dst, dst_pos, Address::times_1, 0));\/\/ dst_addr\n-    __ movl2ptr(count, r11_length); \/\/ length\n-    __ jump(RuntimeAddress(byte_copy_entry));\n-\n-  __ BIND(L_copy_shorts);\n-    __ cmpl(rax_elsize, LogBytesPerShort);\n-    __ jccb(Assembler::notEqual, L_copy_ints);\n-    __ lea(from, Address(src, src_pos, Address::times_2, 0));\/\/ src_addr\n-    __ lea(to,   Address(dst, dst_pos, Address::times_2, 0));\/\/ dst_addr\n-    __ movl2ptr(count, r11_length); \/\/ length\n-    __ jump(RuntimeAddress(short_copy_entry));\n-\n-  __ BIND(L_copy_ints);\n-    __ cmpl(rax_elsize, LogBytesPerInt);\n-    __ jccb(Assembler::notEqual, L_copy_longs);\n-    __ lea(from, Address(src, src_pos, Address::times_4, 0));\/\/ src_addr\n-    __ lea(to,   Address(dst, dst_pos, Address::times_4, 0));\/\/ dst_addr\n-    __ movl2ptr(count, r11_length); \/\/ length\n-    __ jump(RuntimeAddress(int_copy_entry));\n-\n-  __ BIND(L_copy_longs);\n+  \/\/ next registers should be set before the jump to corresponding stub\n+  const Register from     = c_rarg0;  \/\/ source array address\n+  const Register to       = c_rarg1;  \/\/ destination array address\n+  const Register count    = c_rarg2;  \/\/ elements count\n+\n+  \/\/ 'from', 'to', 'count' registers should be set in such order\n+  \/\/ since they are the same as 'src', 'src_pos', 'dst'.\n+\n+  __ cmpl(rax_elsize, 0);\n+  __ jccb(Assembler::notEqual, L_copy_shorts);\n+  __ lea(from, Address(src, src_pos, Address::times_1, 0));\/\/ src_addr\n+  __ lea(to,   Address(dst, dst_pos, Address::times_1, 0));\/\/ dst_addr\n+  __ movl2ptr(count, r11_length); \/\/ length\n+  __ jump(RuntimeAddress(byte_copy_entry));\n+\n+__ BIND(L_copy_shorts);\n+  __ cmpl(rax_elsize, LogBytesPerShort);\n+  __ jccb(Assembler::notEqual, L_copy_ints);\n+  __ lea(from, Address(src, src_pos, Address::times_2, 0));\/\/ src_addr\n+  __ lea(to,   Address(dst, dst_pos, Address::times_2, 0));\/\/ dst_addr\n+  __ movl2ptr(count, r11_length); \/\/ length\n+  __ jump(RuntimeAddress(short_copy_entry));\n+\n+__ BIND(L_copy_ints);\n+  __ cmpl(rax_elsize, LogBytesPerInt);\n+  __ jccb(Assembler::notEqual, L_copy_longs);\n+  __ lea(from, Address(src, src_pos, Address::times_4, 0));\/\/ src_addr\n+  __ lea(to,   Address(dst, dst_pos, Address::times_4, 0));\/\/ dst_addr\n+  __ movl2ptr(count, r11_length); \/\/ length\n+  __ jump(RuntimeAddress(int_copy_entry));\n+\n+__ BIND(L_copy_longs);\n@@ -3298,9 +3289,9 @@\n-    {\n-      BLOCK_COMMENT(\"assert long copy {\");\n-      Label L;\n-      __ cmpl(rax_elsize, LogBytesPerLong);\n-      __ jcc(Assembler::equal, L);\n-      __ stop(\"must be long copy, but elsize is wrong\");\n-      __ bind(L);\n-      BLOCK_COMMENT(\"} assert long copy done\");\n-    }\n+  {\n+    BLOCK_COMMENT(\"assert long copy {\");\n+    Label L;\n+    __ cmpl(rax_elsize, LogBytesPerLong);\n+    __ jcc(Assembler::equal, L);\n+    __ stop(\"must be long copy, but elsize is wrong\");\n+    __ bind(L);\n+    BLOCK_COMMENT(\"} assert long copy done\");\n+  }\n@@ -3308,8 +3299,29 @@\n-    __ lea(from, Address(src, src_pos, Address::times_8, 0));\/\/ src_addr\n-    __ lea(to,   Address(dst, dst_pos, Address::times_8, 0));\/\/ dst_addr\n-    __ movl2ptr(count, r11_length); \/\/ length\n-    __ jump(RuntimeAddress(long_copy_entry));\n-\n-    \/\/ ObjArrayKlass\n-  __ BIND(L_objArray);\n-    \/\/ live at this point:  r10_src_klass, r11_length, src[_pos], dst[_pos]\n+  __ lea(from, Address(src, src_pos, Address::times_8, 0));\/\/ src_addr\n+  __ lea(to,   Address(dst, dst_pos, Address::times_8, 0));\/\/ dst_addr\n+  __ movl2ptr(count, r11_length); \/\/ length\n+  __ jump(RuntimeAddress(long_copy_entry));\n+\n+  \/\/ ObjArrayKlass\n+__ BIND(L_objArray);\n+  \/\/ live at this point:  r10_src_klass, r11_length, src[_pos], dst[_pos]\n+\n+  Label L_plain_copy, L_checkcast_copy;\n+  \/\/  test array classes for subtyping\n+  __ load_klass(rax, dst, rklass_tmp);\n+  __ cmpq(r10_src_klass, rax); \/\/ usual case is exact equality\n+  __ jcc(Assembler::notEqual, L_checkcast_copy);\n+\n+  \/\/ Identically typed arrays can be copied without element-wise checks.\n+  arraycopy_range_checks(src, src_pos, dst, dst_pos, r11_length,\n+                         r10, L_failed);\n+\n+  __ lea(from, Address(src, src_pos, TIMES_OOP,\n+               arrayOopDesc::base_offset_in_bytes(T_OBJECT))); \/\/ src_addr\n+  __ lea(to,   Address(dst, dst_pos, TIMES_OOP,\n+               arrayOopDesc::base_offset_in_bytes(T_OBJECT))); \/\/ dst_addr\n+  __ movl2ptr(count, r11_length); \/\/ length\n+__ BIND(L_plain_copy);\n+#ifdef _WIN64\n+  __ pop(rklass_tmp); \/\/ Restore callee-save rdi\n+#endif\n+  __ jump(RuntimeAddress(oop_copy_entry));\n@@ -3317,5 +3329,6 @@\n-    Label L_plain_copy, L_checkcast_copy;\n-    \/\/  test array classes for subtyping\n-    __ load_klass(rax, dst, rklass_tmp);\n-    __ cmpq(r10_src_klass, rax); \/\/ usual case is exact equality\n-    __ jcc(Assembler::notEqual, L_checkcast_copy);\n+__ BIND(L_checkcast_copy);\n+  \/\/ live at this point:  r10_src_klass, r11_length, rax (dst_klass)\n+  {\n+    \/\/ Before looking at dst.length, make sure dst is also an objArray.\n+    __ cmpl(Address(rax, lh_offset), objArray_lh);\n+    __ jcc(Assembler::notEqual, L_failed);\n@@ -3323,1 +3336,1 @@\n-    \/\/ Identically typed arrays can be copied without element-wise checks.\n+    \/\/ It is safe to examine both src.length and dst.length.\n@@ -3325,1 +3338,4 @@\n-                           r10, L_failed);\n+                           rax, L_failed);\n+\n+    const Register r11_dst_klass = r11;\n+    __ load_klass(r11_dst_klass, dst, rklass_tmp); \/\/ reload\n@@ -3327,0 +3343,1 @@\n+    \/\/ Marshal the base address arguments now, freeing registers.\n@@ -3328,1 +3345,1 @@\n-                 arrayOopDesc::base_offset_in_bytes(T_OBJECT))); \/\/ src_addr\n+                 arrayOopDesc::base_offset_in_bytes(T_OBJECT)));\n@@ -3330,44 +3347,18 @@\n-                 arrayOopDesc::base_offset_in_bytes(T_OBJECT))); \/\/ dst_addr\n-    __ movl2ptr(count, r11_length); \/\/ length\n-  __ BIND(L_plain_copy);\n-#ifdef _WIN64\n-    __ pop(rklass_tmp); \/\/ Restore callee-save rdi\n-#endif\n-    __ jump(RuntimeAddress(oop_copy_entry));\n-\n-  __ BIND(L_checkcast_copy);\n-    \/\/ live at this point:  r10_src_klass, r11_length, rax (dst_klass)\n-    {\n-      \/\/ Before looking at dst.length, make sure dst is also an objArray.\n-      __ cmpl(Address(rax, lh_offset), objArray_lh);\n-      __ jcc(Assembler::notEqual, L_failed);\n-\n-      \/\/ It is safe to examine both src.length and dst.length.\n-      arraycopy_range_checks(src, src_pos, dst, dst_pos, r11_length,\n-                             rax, L_failed);\n-\n-      const Register r11_dst_klass = r11;\n-      __ load_klass(r11_dst_klass, dst, rklass_tmp); \/\/ reload\n-\n-      \/\/ Marshal the base address arguments now, freeing registers.\n-      __ lea(from, Address(src, src_pos, TIMES_OOP,\n-                   arrayOopDesc::base_offset_in_bytes(T_OBJECT)));\n-      __ lea(to,   Address(dst, dst_pos, TIMES_OOP,\n-                   arrayOopDesc::base_offset_in_bytes(T_OBJECT)));\n-      __ movl(count, length);           \/\/ length (reloaded)\n-      Register sco_temp = c_rarg3;      \/\/ this register is free now\n-      assert_different_registers(from, to, count, sco_temp,\n-                                 r11_dst_klass, r10_src_klass);\n-      assert_clean_int(count, sco_temp);\n-\n-      \/\/ Generate the type check.\n-      const int sco_offset = in_bytes(Klass::super_check_offset_offset());\n-      __ movl(sco_temp, Address(r11_dst_klass, sco_offset));\n-      assert_clean_int(sco_temp, rax);\n-      generate_type_check(r10_src_klass, sco_temp, r11_dst_klass, L_plain_copy);\n-\n-      \/\/ Fetch destination element klass from the ObjArrayKlass header.\n-      int ek_offset = in_bytes(ObjArrayKlass::element_klass_offset());\n-      __ movptr(r11_dst_klass, Address(r11_dst_klass, ek_offset));\n-      __ movl(  sco_temp,      Address(r11_dst_klass, sco_offset));\n-      assert_clean_int(sco_temp, rax);\n+                 arrayOopDesc::base_offset_in_bytes(T_OBJECT)));\n+    __ movl(count, length);           \/\/ length (reloaded)\n+    Register sco_temp = c_rarg3;      \/\/ this register is free now\n+    assert_different_registers(from, to, count, sco_temp,\n+                               r11_dst_klass, r10_src_klass);\n+    assert_clean_int(count, sco_temp);\n+\n+    \/\/ Generate the type check.\n+    const int sco_offset = in_bytes(Klass::super_check_offset_offset());\n+    __ movl(sco_temp, Address(r11_dst_klass, sco_offset));\n+    assert_clean_int(sco_temp, rax);\n+    generate_type_check(r10_src_klass, sco_temp, r11_dst_klass, L_plain_copy);\n+\n+    \/\/ Fetch destination element klass from the ObjArrayKlass header.\n+    int ek_offset = in_bytes(ObjArrayKlass::element_klass_offset());\n+    __ movptr(r11_dst_klass, Address(r11_dst_klass, ek_offset));\n+    __ movl(  sco_temp,      Address(r11_dst_klass, sco_offset));\n+    assert_clean_int(sco_temp, rax);\n@@ -3376,1 +3367,1 @@\n-      __ pop(rklass_tmp); \/\/ Restore callee-save rdi\n+    __ pop(rklass_tmp); \/\/ Restore callee-save rdi\n@@ -3379,7 +3370,7 @@\n-      \/\/ the checkcast_copy loop needs two extra arguments:\n-      assert(c_rarg3 == sco_temp, \"#3 already in place\");\n-      \/\/ Set up arguments for checkcast_copy_entry.\n-      setup_arg_regs(4);\n-      __ movptr(r8, r11_dst_klass);  \/\/ dst.klass.element_klass, r8 is c_rarg4 on Linux\/Solaris\n-      __ jump(RuntimeAddress(checkcast_copy_entry));\n-    }\n+    \/\/ the checkcast_copy loop needs two extra arguments:\n+    assert(c_rarg3 == sco_temp, \"#3 already in place\");\n+    \/\/ Set up arguments for checkcast_copy_entry.\n+    setup_arg_regs(4);\n+    __ movptr(r8, r11_dst_klass);  \/\/ dst.klass.element_klass, r8 is c_rarg4 on Linux\/Solaris\n+    __ jump(RuntimeAddress(checkcast_copy_entry));\n+  }\n@@ -3387,1 +3378,1 @@\n-  __ BIND(L_failed);\n+__ BIND(L_failed);\n@@ -3389,1 +3380,1 @@\n-    __ pop(rklass_tmp); \/\/ Restore callee-save rdi\n+  __ pop(rklass_tmp); \/\/ Restore callee-save rdi\n@@ -3391,4 +3382,4 @@\n-    __ xorptr(rax, rax);\n-    __ notptr(rax); \/\/ return -1\n-    __ leave();   \/\/ required for proper stackwalking of RuntimeStub frame\n-    __ ret(0);\n+  __ xorptr(rax, rax);\n+  __ notptr(rax); \/\/ return -1\n+  __ leave();   \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ ret(0);\n@@ -3396,2 +3387,2 @@\n-    return start;\n-  }\n+  return start;\n+}\n@@ -3399,2 +3390,2 @@\n-  address generate_data_cache_writeback() {\n-    const Register src        = c_rarg0;  \/\/ source address\n+address StubGenerator::generate_data_cache_writeback() {\n+  const Register src        = c_rarg0;  \/\/ source address\n@@ -3402,1 +3393,1 @@\n-    __ align(CodeEntryAlignment);\n+  __ align(CodeEntryAlignment);\n@@ -3404,1 +3395,1 @@\n-    StubCodeMark mark(this, \"StubRoutines\", \"_data_cache_writeback\");\n+  StubCodeMark mark(this, \"StubRoutines\", \"_data_cache_writeback\");\n@@ -3406,5 +3397,1 @@\n-    address start = __ pc();\n-    __ enter();\n-    __ cache_wb(Address(src, 0));\n-    __ leave();\n-    __ ret(0);\n+  address start = __ pc();\n@@ -3412,2 +3399,4 @@\n-    return start;\n-  }\n+  __ enter();\n+  __ cache_wb(Address(src, 0));\n+  __ leave();\n+  __ ret(0);\n@@ -3415,2 +3404,2 @@\n-  address generate_data_cache_writeback_sync() {\n-    const Register is_pre    = c_rarg0;  \/\/ pre or post sync\n+  return start;\n+}\n@@ -3418,1 +3407,2 @@\n-    __ align(CodeEntryAlignment);\n+address StubGenerator::generate_data_cache_writeback_sync() {\n+  const Register is_pre    = c_rarg0;  \/\/ pre or post sync\n@@ -3420,1 +3410,1 @@\n-    StubCodeMark mark(this, \"StubRoutines\", \"_data_cache_writeback_sync\");\n+  __ align(CodeEntryAlignment);\n@@ -3422,2 +3412,1 @@\n-    \/\/ pre wbsync is a no-op\n-    \/\/ post wbsync translates to an sfence\n+  StubCodeMark mark(this, \"StubRoutines\", \"_data_cache_writeback_sync\");\n@@ -3425,9 +3414,2 @@\n-    Label skip;\n-    address start = __ pc();\n-    __ enter();\n-    __ cmpl(is_pre, 0);\n-    __ jcc(Assembler::notEqual, skip);\n-    __ cache_wbsync(false);\n-    __ bind(skip);\n-    __ leave();\n-    __ ret(0);\n+  \/\/ pre wbsync is a no-op\n+  \/\/ post wbsync translates to an sfence\n@@ -3435,56 +3417,2 @@\n-    return start;\n-  }\n-\n-  void generate_arraycopy_stubs() {\n-    address entry;\n-    address entry_jbyte_arraycopy;\n-    address entry_jshort_arraycopy;\n-    address entry_jint_arraycopy;\n-    address entry_oop_arraycopy;\n-    address entry_jlong_arraycopy;\n-    address entry_checkcast_arraycopy;\n-\n-    StubRoutines::_jbyte_disjoint_arraycopy  = generate_disjoint_byte_copy(false, &entry,\n-                                                                           \"jbyte_disjoint_arraycopy\");\n-    StubRoutines::_jbyte_arraycopy           = generate_conjoint_byte_copy(false, entry, &entry_jbyte_arraycopy,\n-                                                                           \"jbyte_arraycopy\");\n-\n-    StubRoutines::_jshort_disjoint_arraycopy = generate_disjoint_short_copy(false, &entry,\n-                                                                            \"jshort_disjoint_arraycopy\");\n-    StubRoutines::_jshort_arraycopy          = generate_conjoint_short_copy(false, entry, &entry_jshort_arraycopy,\n-                                                                            \"jshort_arraycopy\");\n-\n-    StubRoutines::_jint_disjoint_arraycopy   = generate_disjoint_int_oop_copy(false, false, &entry,\n-                                                                              \"jint_disjoint_arraycopy\");\n-    StubRoutines::_jint_arraycopy            = generate_conjoint_int_oop_copy(false, false, entry,\n-                                                                              &entry_jint_arraycopy, \"jint_arraycopy\");\n-\n-    StubRoutines::_jlong_disjoint_arraycopy  = generate_disjoint_long_oop_copy(false, false, &entry,\n-                                                                               \"jlong_disjoint_arraycopy\");\n-    StubRoutines::_jlong_arraycopy           = generate_conjoint_long_oop_copy(false, false, entry,\n-                                                                               &entry_jlong_arraycopy, \"jlong_arraycopy\");\n-\n-\n-    if (UseCompressedOops) {\n-      StubRoutines::_oop_disjoint_arraycopy  = generate_disjoint_int_oop_copy(false, true, &entry,\n-                                                                              \"oop_disjoint_arraycopy\");\n-      StubRoutines::_oop_arraycopy           = generate_conjoint_int_oop_copy(false, true, entry,\n-                                                                              &entry_oop_arraycopy, \"oop_arraycopy\");\n-      StubRoutines::_oop_disjoint_arraycopy_uninit  = generate_disjoint_int_oop_copy(false, true, &entry,\n-                                                                                     \"oop_disjoint_arraycopy_uninit\",\n-                                                                                     \/*dest_uninitialized*\/true);\n-      StubRoutines::_oop_arraycopy_uninit           = generate_conjoint_int_oop_copy(false, true, entry,\n-                                                                                     NULL, \"oop_arraycopy_uninit\",\n-                                                                                     \/*dest_uninitialized*\/true);\n-    } else {\n-      StubRoutines::_oop_disjoint_arraycopy  = generate_disjoint_long_oop_copy(false, true, &entry,\n-                                                                               \"oop_disjoint_arraycopy\");\n-      StubRoutines::_oop_arraycopy           = generate_conjoint_long_oop_copy(false, true, entry,\n-                                                                               &entry_oop_arraycopy, \"oop_arraycopy\");\n-      StubRoutines::_oop_disjoint_arraycopy_uninit  = generate_disjoint_long_oop_copy(false, true, &entry,\n-                                                                                      \"oop_disjoint_arraycopy_uninit\",\n-                                                                                      \/*dest_uninitialized*\/true);\n-      StubRoutines::_oop_arraycopy_uninit           = generate_conjoint_long_oop_copy(false, true, entry,\n-                                                                                      NULL, \"oop_arraycopy_uninit\",\n-                                                                                      \/*dest_uninitialized*\/true);\n-    }\n+  Label skip;\n+  address start = __ pc();\n@@ -3492,65 +3420,7 @@\n-    StubRoutines::_checkcast_arraycopy        = generate_checkcast_copy(\"checkcast_arraycopy\", &entry_checkcast_arraycopy);\n-    StubRoutines::_checkcast_arraycopy_uninit = generate_checkcast_copy(\"checkcast_arraycopy_uninit\", NULL,\n-                                                                        \/*dest_uninitialized*\/true);\n-\n-    StubRoutines::_unsafe_arraycopy    = generate_unsafe_copy(\"unsafe_arraycopy\",\n-                                                              entry_jbyte_arraycopy,\n-                                                              entry_jshort_arraycopy,\n-                                                              entry_jint_arraycopy,\n-                                                              entry_jlong_arraycopy);\n-    StubRoutines::_generic_arraycopy   = generate_generic_copy(\"generic_arraycopy\",\n-                                                               entry_jbyte_arraycopy,\n-                                                               entry_jshort_arraycopy,\n-                                                               entry_jint_arraycopy,\n-                                                               entry_oop_arraycopy,\n-                                                               entry_jlong_arraycopy,\n-                                                               entry_checkcast_arraycopy);\n-\n-    StubRoutines::_jbyte_fill = generate_fill(T_BYTE, false, \"jbyte_fill\");\n-    StubRoutines::_jshort_fill = generate_fill(T_SHORT, false, \"jshort_fill\");\n-    StubRoutines::_jint_fill = generate_fill(T_INT, false, \"jint_fill\");\n-    StubRoutines::_arrayof_jbyte_fill = generate_fill(T_BYTE, true, \"arrayof_jbyte_fill\");\n-    StubRoutines::_arrayof_jshort_fill = generate_fill(T_SHORT, true, \"arrayof_jshort_fill\");\n-    StubRoutines::_arrayof_jint_fill = generate_fill(T_INT, true, \"arrayof_jint_fill\");\n-\n-    \/\/ We don't generate specialized code for HeapWord-aligned source\n-    \/\/ arrays, so just use the code we've already generated\n-    StubRoutines::_arrayof_jbyte_disjoint_arraycopy  = StubRoutines::_jbyte_disjoint_arraycopy;\n-    StubRoutines::_arrayof_jbyte_arraycopy           = StubRoutines::_jbyte_arraycopy;\n-\n-    StubRoutines::_arrayof_jshort_disjoint_arraycopy = StubRoutines::_jshort_disjoint_arraycopy;\n-    StubRoutines::_arrayof_jshort_arraycopy          = StubRoutines::_jshort_arraycopy;\n-\n-    StubRoutines::_arrayof_jint_disjoint_arraycopy   = StubRoutines::_jint_disjoint_arraycopy;\n-    StubRoutines::_arrayof_jint_arraycopy            = StubRoutines::_jint_arraycopy;\n-\n-    StubRoutines::_arrayof_jlong_disjoint_arraycopy  = StubRoutines::_jlong_disjoint_arraycopy;\n-    StubRoutines::_arrayof_jlong_arraycopy           = StubRoutines::_jlong_arraycopy;\n-\n-    StubRoutines::_arrayof_oop_disjoint_arraycopy    = StubRoutines::_oop_disjoint_arraycopy;\n-    StubRoutines::_arrayof_oop_arraycopy             = StubRoutines::_oop_arraycopy;\n-\n-    StubRoutines::_arrayof_oop_disjoint_arraycopy_uninit    = StubRoutines::_oop_disjoint_arraycopy_uninit;\n-    StubRoutines::_arrayof_oop_arraycopy_uninit             = StubRoutines::_oop_arraycopy_uninit;\n-  }\n-\n-  \/\/ AES intrinsic stubs\n-  enum {AESBlockSize = 16};\n-\n-  address generate_key_shuffle_mask() {\n-    __ align(16);\n-    StubCodeMark mark(this, \"StubRoutines\", \"key_shuffle_mask\");\n-    address start = __ pc();\n-    __ emit_data64( 0x0405060700010203, relocInfo::none );\n-    __ emit_data64( 0x0c0d0e0f08090a0b, relocInfo::none );\n-    return start;\n-  }\n-\n-  address generate_counter_shuffle_mask() {\n-    __ align(16);\n-    StubCodeMark mark(this, \"StubRoutines\", \"counter_shuffle_mask\");\n-    address start = __ pc();\n-    __ emit_data64(0x08090a0b0c0d0e0f, relocInfo::none);\n-    __ emit_data64(0x0001020304050607, relocInfo::none);\n-    return start;\n-  }\n+  __ enter();\n+  __ cmpl(is_pre, 0);\n+  __ jcc(Assembler::notEqual, skip);\n+  __ cache_wbsync(false);\n+  __ bind(skip);\n+  __ leave();\n+  __ ret(0);\n@@ -3558,10 +3428,2 @@\n-  \/\/ Utility routine for loading a 128-bit key word in little endian format\n-  \/\/ can optionally specify that the shuffle mask is already in an xmmregister\n-  void load_key(XMMRegister xmmdst, Register key, int offset, XMMRegister xmm_shuf_mask = xnoreg) {\n-    __ movdqu(xmmdst, Address(key, offset));\n-    if (xmm_shuf_mask != xnoreg) {\n-      __ pshufb(xmmdst, xmm_shuf_mask);\n-    } else {\n-      __ pshufb(xmmdst, ExternalAddress(StubRoutines::x86::key_shuffle_mask_addr()));\n-    }\n-  }\n+  return start;\n+}\n@@ -3569,10 +3431,50 @@\n-  \/\/ Utility routine for increase 128bit counter (iv in CTR mode)\n-  void inc_counter(Register reg, XMMRegister xmmdst, int inc_delta, Label& next_block) {\n-    __ pextrq(reg, xmmdst, 0x0);\n-    __ addq(reg, inc_delta);\n-    __ pinsrq(xmmdst, reg, 0x0);\n-    __ jcc(Assembler::carryClear, next_block); \/\/ jump if no carry\n-    __ pextrq(reg, xmmdst, 0x01); \/\/ Carry\n-    __ addq(reg, 0x01);\n-    __ pinsrq(xmmdst, reg, 0x01); \/\/Carry end\n-    __ BIND(next_block);          \/\/ next instruction\n+void StubGenerator::generate_arraycopy_stubs() {\n+  address entry;\n+  address entry_jbyte_arraycopy;\n+  address entry_jshort_arraycopy;\n+  address entry_jint_arraycopy;\n+  address entry_oop_arraycopy;\n+  address entry_jlong_arraycopy;\n+  address entry_checkcast_arraycopy;\n+\n+  StubRoutines::_jbyte_disjoint_arraycopy  = generate_disjoint_byte_copy(false, &entry,\n+                                                                         \"jbyte_disjoint_arraycopy\");\n+  StubRoutines::_jbyte_arraycopy           = generate_conjoint_byte_copy(false, entry, &entry_jbyte_arraycopy,\n+                                                                         \"jbyte_arraycopy\");\n+\n+  StubRoutines::_jshort_disjoint_arraycopy = generate_disjoint_short_copy(false, &entry,\n+                                                                          \"jshort_disjoint_arraycopy\");\n+  StubRoutines::_jshort_arraycopy          = generate_conjoint_short_copy(false, entry, &entry_jshort_arraycopy,\n+                                                                          \"jshort_arraycopy\");\n+\n+  StubRoutines::_jint_disjoint_arraycopy   = generate_disjoint_int_oop_copy(false, false, &entry,\n+                                                                            \"jint_disjoint_arraycopy\");\n+  StubRoutines::_jint_arraycopy            = generate_conjoint_int_oop_copy(false, false, entry,\n+                                                                            &entry_jint_arraycopy, \"jint_arraycopy\");\n+\n+  StubRoutines::_jlong_disjoint_arraycopy  = generate_disjoint_long_oop_copy(false, false, &entry,\n+                                                                             \"jlong_disjoint_arraycopy\");\n+  StubRoutines::_jlong_arraycopy           = generate_conjoint_long_oop_copy(false, false, entry,\n+                                                                             &entry_jlong_arraycopy, \"jlong_arraycopy\");\n+  if (UseCompressedOops) {\n+    StubRoutines::_oop_disjoint_arraycopy  = generate_disjoint_int_oop_copy(false, true, &entry,\n+                                                                            \"oop_disjoint_arraycopy\");\n+    StubRoutines::_oop_arraycopy           = generate_conjoint_int_oop_copy(false, true, entry,\n+                                                                            &entry_oop_arraycopy, \"oop_arraycopy\");\n+    StubRoutines::_oop_disjoint_arraycopy_uninit  = generate_disjoint_int_oop_copy(false, true, &entry,\n+                                                                                   \"oop_disjoint_arraycopy_uninit\",\n+                                                                                   \/*dest_uninitialized*\/true);\n+    StubRoutines::_oop_arraycopy_uninit           = generate_conjoint_int_oop_copy(false, true, entry,\n+                                                                                   NULL, \"oop_arraycopy_uninit\",\n+                                                                                   \/*dest_uninitialized*\/true);\n+  } else {\n+    StubRoutines::_oop_disjoint_arraycopy  = generate_disjoint_long_oop_copy(false, true, &entry,\n+                                                                             \"oop_disjoint_arraycopy\");\n+    StubRoutines::_oop_arraycopy           = generate_conjoint_long_oop_copy(false, true, entry,\n+                                                                             &entry_oop_arraycopy, \"oop_arraycopy\");\n+    StubRoutines::_oop_disjoint_arraycopy_uninit  = generate_disjoint_long_oop_copy(false, true, &entry,\n+                                                                                    \"oop_disjoint_arraycopy_uninit\",\n+                                                                                    \/*dest_uninitialized*\/true);\n+    StubRoutines::_oop_arraycopy_uninit           = generate_conjoint_long_oop_copy(false, true, entry,\n+                                                                                    NULL, \"oop_arraycopy_uninit\",\n+                                                                                    \/*dest_uninitialized*\/true);\n@@ -3581,40 +3483,44 @@\n-  \/\/ Arguments:\n-  \/\/\n-  \/\/ Inputs:\n-  \/\/   c_rarg0   - source byte array address\n-  \/\/   c_rarg1   - destination byte array address\n-  \/\/   c_rarg2   - K (key) in little endian int array\n-  \/\/\n-  address generate_aescrypt_encryptBlock() {\n-    assert(UseAES, \"need AES instructions and misaligned SSE support\");\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", \"aescrypt_encryptBlock\");\n-    Label L_doLast;\n-    address start = __ pc();\n-\n-    const Register from        = c_rarg0;  \/\/ source array address\n-    const Register to          = c_rarg1;  \/\/ destination array address\n-    const Register key         = c_rarg2;  \/\/ key array address\n-    const Register keylen      = rax;\n-\n-    const XMMRegister xmm_result = xmm0;\n-    const XMMRegister xmm_key_shuf_mask = xmm1;\n-    \/\/ On win64 xmm6-xmm15 must be preserved so don't use them.\n-    const XMMRegister xmm_temp1  = xmm2;\n-    const XMMRegister xmm_temp2  = xmm3;\n-    const XMMRegister xmm_temp3  = xmm4;\n-    const XMMRegister xmm_temp4  = xmm5;\n-\n-    __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n-\n-    \/\/ keylen could be only {11, 13, 15} * 4 = {44, 52, 60}\n-    __ movl(keylen, Address(key, arrayOopDesc::length_offset_in_bytes() - arrayOopDesc::base_offset_in_bytes(T_INT)));\n-\n-    __ movdqu(xmm_key_shuf_mask, ExternalAddress(StubRoutines::x86::key_shuffle_mask_addr()));\n-    __ movdqu(xmm_result, Address(from, 0));  \/\/ get 16 bytes of input\n-\n-    \/\/ For encryption, the java expanded key ordering is just what we need\n-    \/\/ we don't know if the key is aligned, hence not using load-execute form\n-\n-    load_key(xmm_temp1, key, 0x00, xmm_key_shuf_mask);\n-    __ pxor(xmm_result, xmm_temp1);\n+  StubRoutines::_checkcast_arraycopy        = generate_checkcast_copy(\"checkcast_arraycopy\", &entry_checkcast_arraycopy);\n+  StubRoutines::_checkcast_arraycopy_uninit = generate_checkcast_copy(\"checkcast_arraycopy_uninit\", NULL,\n+                                                                      \/*dest_uninitialized*\/true);\n+\n+  StubRoutines::_unsafe_arraycopy    = generate_unsafe_copy(\"unsafe_arraycopy\",\n+                                                            entry_jbyte_arraycopy,\n+                                                            entry_jshort_arraycopy,\n+                                                            entry_jint_arraycopy,\n+                                                            entry_jlong_arraycopy);\n+  StubRoutines::_generic_arraycopy   = generate_generic_copy(\"generic_arraycopy\",\n+                                                             entry_jbyte_arraycopy,\n+                                                             entry_jshort_arraycopy,\n+                                                             entry_jint_arraycopy,\n+                                                             entry_oop_arraycopy,\n+                                                             entry_jlong_arraycopy,\n+                                                             entry_checkcast_arraycopy);\n+\n+  StubRoutines::_jbyte_fill = generate_fill(T_BYTE, false, \"jbyte_fill\");\n+  StubRoutines::_jshort_fill = generate_fill(T_SHORT, false, \"jshort_fill\");\n+  StubRoutines::_jint_fill = generate_fill(T_INT, false, \"jint_fill\");\n+  StubRoutines::_arrayof_jbyte_fill = generate_fill(T_BYTE, true, \"arrayof_jbyte_fill\");\n+  StubRoutines::_arrayof_jshort_fill = generate_fill(T_SHORT, true, \"arrayof_jshort_fill\");\n+  StubRoutines::_arrayof_jint_fill = generate_fill(T_INT, true, \"arrayof_jint_fill\");\n+\n+  \/\/ We don't generate specialized code for HeapWord-aligned source\n+  \/\/ arrays, so just use the code we've already generated\n+  StubRoutines::_arrayof_jbyte_disjoint_arraycopy  = StubRoutines::_jbyte_disjoint_arraycopy;\n+  StubRoutines::_arrayof_jbyte_arraycopy           = StubRoutines::_jbyte_arraycopy;\n+\n+  StubRoutines::_arrayof_jshort_disjoint_arraycopy = StubRoutines::_jshort_disjoint_arraycopy;\n+  StubRoutines::_arrayof_jshort_arraycopy          = StubRoutines::_jshort_arraycopy;\n+\n+  StubRoutines::_arrayof_jint_disjoint_arraycopy   = StubRoutines::_jint_disjoint_arraycopy;\n+  StubRoutines::_arrayof_jint_arraycopy            = StubRoutines::_jint_arraycopy;\n+\n+  StubRoutines::_arrayof_jlong_disjoint_arraycopy  = StubRoutines::_jlong_disjoint_arraycopy;\n+  StubRoutines::_arrayof_jlong_arraycopy           = StubRoutines::_jlong_arraycopy;\n+\n+  StubRoutines::_arrayof_oop_disjoint_arraycopy    = StubRoutines::_oop_disjoint_arraycopy;\n+  StubRoutines::_arrayof_oop_arraycopy             = StubRoutines::_oop_arraycopy;\n+\n+  StubRoutines::_arrayof_oop_disjoint_arraycopy_uninit    = StubRoutines::_oop_disjoint_arraycopy_uninit;\n+  StubRoutines::_arrayof_oop_arraycopy_uninit             = StubRoutines::_oop_arraycopy_uninit;\n+}\n@@ -3622,4 +3528,1 @@\n-    load_key(xmm_temp1, key, 0x10, xmm_key_shuf_mask);\n-    load_key(xmm_temp2, key, 0x20, xmm_key_shuf_mask);\n-    load_key(xmm_temp3, key, 0x30, xmm_key_shuf_mask);\n-    load_key(xmm_temp4, key, 0x40, xmm_key_shuf_mask);\n+\/\/ AES intrinsic stubs\n@@ -3627,4 +3530,4 @@\n-    __ aesenc(xmm_result, xmm_temp1);\n-    __ aesenc(xmm_result, xmm_temp2);\n-    __ aesenc(xmm_result, xmm_temp3);\n-    __ aesenc(xmm_result, xmm_temp4);\n+address StubGenerator::generate_key_shuffle_mask() {\n+  __ align(16);\n+  StubCodeMark mark(this, \"StubRoutines\", \"key_shuffle_mask\");\n+  address start = __ pc();\n@@ -3632,4 +3535,2 @@\n-    load_key(xmm_temp1, key, 0x50, xmm_key_shuf_mask);\n-    load_key(xmm_temp2, key, 0x60, xmm_key_shuf_mask);\n-    load_key(xmm_temp3, key, 0x70, xmm_key_shuf_mask);\n-    load_key(xmm_temp4, key, 0x80, xmm_key_shuf_mask);\n+  __ emit_data64( 0x0405060700010203, relocInfo::none );\n+  __ emit_data64( 0x0c0d0e0f08090a0b, relocInfo::none );\n@@ -3637,4 +3538,2 @@\n-    __ aesenc(xmm_result, xmm_temp1);\n-    __ aesenc(xmm_result, xmm_temp2);\n-    __ aesenc(xmm_result, xmm_temp3);\n-    __ aesenc(xmm_result, xmm_temp4);\n+  return start;\n+}\n@@ -3642,2 +3541,4 @@\n-    load_key(xmm_temp1, key, 0x90, xmm_key_shuf_mask);\n-    load_key(xmm_temp2, key, 0xa0, xmm_key_shuf_mask);\n+address StubGenerator::generate_counter_shuffle_mask() {\n+  __ align(16);\n+  StubCodeMark mark(this, \"StubRoutines\", \"counter_shuffle_mask\");\n+  address start = __ pc();\n@@ -3645,2 +3546,2 @@\n-    __ cmpl(keylen, 44);\n-    __ jccb(Assembler::equal, L_doLast);\n+  __ emit_data64(0x08090a0b0c0d0e0f, relocInfo::none);\n+  __ emit_data64(0x0001020304050607, relocInfo::none);\n@@ -3648,2 +3549,2 @@\n-    __ aesenc(xmm_result, xmm_temp1);\n-    __ aesenc(xmm_result, xmm_temp2);\n+  return start;\n+}\n@@ -3651,2 +3552,10 @@\n-    load_key(xmm_temp1, key, 0xb0, xmm_key_shuf_mask);\n-    load_key(xmm_temp2, key, 0xc0, xmm_key_shuf_mask);\n+\/\/ Utility routine for loading a 128-bit key word in little endian format\n+\/\/ can optionally specify that the shuffle mask is already in an xmmregister\n+void StubGenerator::load_key(XMMRegister xmmdst, Register key, int offset, XMMRegister xmm_shuf_mask) {\n+  __ movdqu(xmmdst, Address(key, offset));\n+  if (xmm_shuf_mask != xnoreg) {\n+    __ pshufb(xmmdst, xmm_shuf_mask);\n+  } else {\n+    __ pshufb(xmmdst, ExternalAddress(StubRoutines::x86::key_shuffle_mask_addr()));\n+  }\n+}\n@@ -3654,2 +3563,11 @@\n-    __ cmpl(keylen, 52);\n-    __ jccb(Assembler::equal, L_doLast);\n+\/\/ Utility routine for increase 128bit counter (iv in CTR mode)\n+void StubGenerator::inc_counter(Register reg, XMMRegister xmmdst, int inc_delta, Label& next_block) {\n+  __ pextrq(reg, xmmdst, 0x0);\n+  __ addq(reg, inc_delta);\n+  __ pinsrq(xmmdst, reg, 0x0);\n+  __ jcc(Assembler::carryClear, next_block); \/\/ jump if no carry\n+  __ pextrq(reg, xmmdst, 0x01); \/\/ Carry\n+  __ addq(reg, 0x01);\n+  __ pinsrq(xmmdst, reg, 0x01); \/\/Carry end\n+  __ BIND(next_block);          \/\/ next instruction\n+}\n@@ -3657,2 +3575,13 @@\n-    __ aesenc(xmm_result, xmm_temp1);\n-    __ aesenc(xmm_result, xmm_temp2);\n+\/\/ Arguments:\n+\/\/\n+\/\/ Inputs:\n+\/\/   c_rarg0   - source byte array address\n+\/\/   c_rarg1   - destination byte array address\n+\/\/   c_rarg2   - K (key) in little endian int array\n+\/\/\n+address StubGenerator::generate_aescrypt_encryptBlock() {\n+  assert(UseAES, \"need AES instructions and misaligned SSE support\");\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", \"aescrypt_encryptBlock\");\n+  Label L_doLast;\n+  address start = __ pc();\n@@ -3660,2 +3589,4 @@\n-    load_key(xmm_temp1, key, 0xd0, xmm_key_shuf_mask);\n-    load_key(xmm_temp2, key, 0xe0, xmm_key_shuf_mask);\n+  const Register from        = c_rarg0;  \/\/ source array address\n+  const Register to          = c_rarg1;  \/\/ destination array address\n+  const Register key         = c_rarg2;  \/\/ key array address\n+  const Register keylen      = rax;\n@@ -3663,7 +3594,7 @@\n-    __ BIND(L_doLast);\n-    __ aesenc(xmm_result, xmm_temp1);\n-    __ aesenclast(xmm_result, xmm_temp2);\n-    __ movdqu(Address(to, 0), xmm_result);        \/\/ store the result\n-    __ xorptr(rax, rax); \/\/ return 0\n-    __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    __ ret(0);\n+  const XMMRegister xmm_result = xmm0;\n+  const XMMRegister xmm_key_shuf_mask = xmm1;\n+  \/\/ On win64 xmm6-xmm15 must be preserved so don't use them.\n+  const XMMRegister xmm_temp1  = xmm2;\n+  const XMMRegister xmm_temp2  = xmm3;\n+  const XMMRegister xmm_temp3  = xmm4;\n+  const XMMRegister xmm_temp4  = xmm5;\n@@ -3671,2 +3602,1 @@\n-    return start;\n-  }\n+  __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n@@ -3674,0 +3604,2 @@\n+  \/\/ keylen could be only {11, 13, 15} * 4 = {44, 52, 60}\n+  __ movl(keylen, Address(key, arrayOopDesc::length_offset_in_bytes() - arrayOopDesc::base_offset_in_bytes(T_INT)));\n@@ -3675,18 +3607,2 @@\n-  \/\/ Arguments:\n-  \/\/\n-  \/\/ Inputs:\n-  \/\/   c_rarg0   - source byte array address\n-  \/\/   c_rarg1   - destination byte array address\n-  \/\/   c_rarg2   - K (key) in little endian int array\n-  \/\/\n-  address generate_aescrypt_decryptBlock() {\n-    assert(UseAES, \"need AES instructions and misaligned SSE support\");\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", \"aescrypt_decryptBlock\");\n-    Label L_doLast;\n-    address start = __ pc();\n-\n-    const Register from        = c_rarg0;  \/\/ source array address\n-    const Register to          = c_rarg1;  \/\/ destination array address\n-    const Register key         = c_rarg2;  \/\/ key array address\n-    const Register keylen      = rax;\n+  __ movdqu(xmm_key_shuf_mask, ExternalAddress(StubRoutines::x86::key_shuffle_mask_addr()));\n+  __ movdqu(xmm_result, Address(from, 0));  \/\/ get 16 bytes of input\n@@ -3694,7 +3610,2 @@\n-    const XMMRegister xmm_result = xmm0;\n-    const XMMRegister xmm_key_shuf_mask = xmm1;\n-    \/\/ On win64 xmm6-xmm15 must be preserved so don't use them.\n-    const XMMRegister xmm_temp1  = xmm2;\n-    const XMMRegister xmm_temp2  = xmm3;\n-    const XMMRegister xmm_temp3  = xmm4;\n-    const XMMRegister xmm_temp4  = xmm5;\n+  \/\/ For encryption, the java expanded key ordering is just what we need\n+  \/\/ we don't know if the key is aligned, hence not using load-execute form\n@@ -3702,1 +3613,2 @@\n-    __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  load_key(xmm_temp1, key, 0x00, xmm_key_shuf_mask);\n+  __ pxor(xmm_result, xmm_temp1);\n@@ -3704,2 +3616,4 @@\n-    \/\/ keylen could be only {11, 13, 15} * 4 = {44, 52, 60}\n-    __ movl(keylen, Address(key, arrayOopDesc::length_offset_in_bytes() - arrayOopDesc::base_offset_in_bytes(T_INT)));\n+  load_key(xmm_temp1, key, 0x10, xmm_key_shuf_mask);\n+  load_key(xmm_temp2, key, 0x20, xmm_key_shuf_mask);\n+  load_key(xmm_temp3, key, 0x30, xmm_key_shuf_mask);\n+  load_key(xmm_temp4, key, 0x40, xmm_key_shuf_mask);\n@@ -3707,2 +3621,4 @@\n-    __ movdqu(xmm_key_shuf_mask, ExternalAddress(StubRoutines::x86::key_shuffle_mask_addr()));\n-    __ movdqu(xmm_result, Address(from, 0));\n+  __ aesenc(xmm_result, xmm_temp1);\n+  __ aesenc(xmm_result, xmm_temp2);\n+  __ aesenc(xmm_result, xmm_temp3);\n+  __ aesenc(xmm_result, xmm_temp4);\n@@ -3710,7 +3626,4 @@\n-    \/\/ for decryption java expanded key ordering is rotated one position from what we want\n-    \/\/ so we start from 0x10 here and hit 0x00 last\n-    \/\/ we don't know if the key is aligned, hence not using load-execute form\n-    load_key(xmm_temp1, key, 0x10, xmm_key_shuf_mask);\n-    load_key(xmm_temp2, key, 0x20, xmm_key_shuf_mask);\n-    load_key(xmm_temp3, key, 0x30, xmm_key_shuf_mask);\n-    load_key(xmm_temp4, key, 0x40, xmm_key_shuf_mask);\n+  load_key(xmm_temp1, key, 0x50, xmm_key_shuf_mask);\n+  load_key(xmm_temp2, key, 0x60, xmm_key_shuf_mask);\n+  load_key(xmm_temp3, key, 0x70, xmm_key_shuf_mask);\n+  load_key(xmm_temp4, key, 0x80, xmm_key_shuf_mask);\n@@ -3718,4 +3631,4 @@\n-    __ pxor  (xmm_result, xmm_temp1);\n-    __ aesdec(xmm_result, xmm_temp2);\n-    __ aesdec(xmm_result, xmm_temp3);\n-    __ aesdec(xmm_result, xmm_temp4);\n+  __ aesenc(xmm_result, xmm_temp1);\n+  __ aesenc(xmm_result, xmm_temp2);\n+  __ aesenc(xmm_result, xmm_temp3);\n+  __ aesenc(xmm_result, xmm_temp4);\n@@ -3723,4 +3636,2 @@\n-    load_key(xmm_temp1, key, 0x50, xmm_key_shuf_mask);\n-    load_key(xmm_temp2, key, 0x60, xmm_key_shuf_mask);\n-    load_key(xmm_temp3, key, 0x70, xmm_key_shuf_mask);\n-    load_key(xmm_temp4, key, 0x80, xmm_key_shuf_mask);\n+  load_key(xmm_temp1, key, 0x90, xmm_key_shuf_mask);\n+  load_key(xmm_temp2, key, 0xa0, xmm_key_shuf_mask);\n@@ -3728,4 +3639,2 @@\n-    __ aesdec(xmm_result, xmm_temp1);\n-    __ aesdec(xmm_result, xmm_temp2);\n-    __ aesdec(xmm_result, xmm_temp3);\n-    __ aesdec(xmm_result, xmm_temp4);\n+  __ cmpl(keylen, 44);\n+  __ jccb(Assembler::equal, L_doLast);\n@@ -3733,3 +3642,2 @@\n-    load_key(xmm_temp1, key, 0x90, xmm_key_shuf_mask);\n-    load_key(xmm_temp2, key, 0xa0, xmm_key_shuf_mask);\n-    load_key(xmm_temp3, key, 0x00, xmm_key_shuf_mask);\n+  __ aesenc(xmm_result, xmm_temp1);\n+  __ aesenc(xmm_result, xmm_temp2);\n@@ -3737,2 +3645,2 @@\n-    __ cmpl(keylen, 44);\n-    __ jccb(Assembler::equal, L_doLast);\n+  load_key(xmm_temp1, key, 0xb0, xmm_key_shuf_mask);\n+  load_key(xmm_temp2, key, 0xc0, xmm_key_shuf_mask);\n@@ -3740,2 +3648,2 @@\n-    __ aesdec(xmm_result, xmm_temp1);\n-    __ aesdec(xmm_result, xmm_temp2);\n+  __ cmpl(keylen, 52);\n+  __ jccb(Assembler::equal, L_doLast);\n@@ -3743,2 +3651,2 @@\n-    load_key(xmm_temp1, key, 0xb0, xmm_key_shuf_mask);\n-    load_key(xmm_temp2, key, 0xc0, xmm_key_shuf_mask);\n+  __ aesenc(xmm_result, xmm_temp1);\n+  __ aesenc(xmm_result, xmm_temp2);\n@@ -3746,2 +3654,2 @@\n-    __ cmpl(keylen, 52);\n-    __ jccb(Assembler::equal, L_doLast);\n+  load_key(xmm_temp1, key, 0xd0, xmm_key_shuf_mask);\n+  load_key(xmm_temp2, key, 0xe0, xmm_key_shuf_mask);\n@@ -3749,2 +3657,7 @@\n-    __ aesdec(xmm_result, xmm_temp1);\n-    __ aesdec(xmm_result, xmm_temp2);\n+  __ BIND(L_doLast);\n+  __ aesenc(xmm_result, xmm_temp1);\n+  __ aesenclast(xmm_result, xmm_temp2);\n+  __ movdqu(Address(to, 0), xmm_result);        \/\/ store the result\n+  __ xorptr(rax, rax); \/\/ return 0\n+  __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ ret(0);\n@@ -3752,2 +3665,2 @@\n-    load_key(xmm_temp1, key, 0xd0, xmm_key_shuf_mask);\n-    load_key(xmm_temp2, key, 0xe0, xmm_key_shuf_mask);\n+  return start;\n+}\n@@ -3755,3 +3668,0 @@\n-    __ BIND(L_doLast);\n-    __ aesdec(xmm_result, xmm_temp1);\n-    __ aesdec(xmm_result, xmm_temp2);\n@@ -3759,6 +3669,90 @@\n-    \/\/ for decryption the aesdeclast operation is always on key+0x00\n-    __ aesdeclast(xmm_result, xmm_temp3);\n-    __ movdqu(Address(to, 0), xmm_result);  \/\/ store the result\n-    __ xorptr(rax, rax); \/\/ return 0\n-    __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    __ ret(0);\n+\/\/ Arguments:\n+\/\/\n+\/\/ Inputs:\n+\/\/   c_rarg0   - source byte array address\n+\/\/   c_rarg1   - destination byte array address\n+\/\/   c_rarg2   - K (key) in little endian int array\n+\/\/\n+address StubGenerator::generate_aescrypt_decryptBlock() {\n+  assert(UseAES, \"need AES instructions and misaligned SSE support\");\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", \"aescrypt_decryptBlock\");\n+  Label L_doLast;\n+  address start = __ pc();\n+\n+  const Register from        = c_rarg0;  \/\/ source array address\n+  const Register to          = c_rarg1;  \/\/ destination array address\n+  const Register key         = c_rarg2;  \/\/ key array address\n+  const Register keylen      = rax;\n+\n+  const XMMRegister xmm_result = xmm0;\n+  const XMMRegister xmm_key_shuf_mask = xmm1;\n+  \/\/ On win64 xmm6-xmm15 must be preserved so don't use them.\n+  const XMMRegister xmm_temp1  = xmm2;\n+  const XMMRegister xmm_temp2  = xmm3;\n+  const XMMRegister xmm_temp3  = xmm4;\n+  const XMMRegister xmm_temp4  = xmm5;\n+\n+  __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+\n+  \/\/ keylen could be only {11, 13, 15} * 4 = {44, 52, 60}\n+  __ movl(keylen, Address(key, arrayOopDesc::length_offset_in_bytes() - arrayOopDesc::base_offset_in_bytes(T_INT)));\n+\n+  __ movdqu(xmm_key_shuf_mask, ExternalAddress(StubRoutines::x86::key_shuffle_mask_addr()));\n+  __ movdqu(xmm_result, Address(from, 0));\n+\n+  \/\/ for decryption java expanded key ordering is rotated one position from what we want\n+  \/\/ so we start from 0x10 here and hit 0x00 last\n+  \/\/ we don't know if the key is aligned, hence not using load-execute form\n+  load_key(xmm_temp1, key, 0x10, xmm_key_shuf_mask);\n+  load_key(xmm_temp2, key, 0x20, xmm_key_shuf_mask);\n+  load_key(xmm_temp3, key, 0x30, xmm_key_shuf_mask);\n+  load_key(xmm_temp4, key, 0x40, xmm_key_shuf_mask);\n+\n+  __ pxor  (xmm_result, xmm_temp1);\n+  __ aesdec(xmm_result, xmm_temp2);\n+  __ aesdec(xmm_result, xmm_temp3);\n+  __ aesdec(xmm_result, xmm_temp4);\n+\n+  load_key(xmm_temp1, key, 0x50, xmm_key_shuf_mask);\n+  load_key(xmm_temp2, key, 0x60, xmm_key_shuf_mask);\n+  load_key(xmm_temp3, key, 0x70, xmm_key_shuf_mask);\n+  load_key(xmm_temp4, key, 0x80, xmm_key_shuf_mask);\n+\n+  __ aesdec(xmm_result, xmm_temp1);\n+  __ aesdec(xmm_result, xmm_temp2);\n+  __ aesdec(xmm_result, xmm_temp3);\n+  __ aesdec(xmm_result, xmm_temp4);\n+\n+  load_key(xmm_temp1, key, 0x90, xmm_key_shuf_mask);\n+  load_key(xmm_temp2, key, 0xa0, xmm_key_shuf_mask);\n+  load_key(xmm_temp3, key, 0x00, xmm_key_shuf_mask);\n+\n+  __ cmpl(keylen, 44);\n+  __ jccb(Assembler::equal, L_doLast);\n+\n+  __ aesdec(xmm_result, xmm_temp1);\n+  __ aesdec(xmm_result, xmm_temp2);\n+\n+  load_key(xmm_temp1, key, 0xb0, xmm_key_shuf_mask);\n+  load_key(xmm_temp2, key, 0xc0, xmm_key_shuf_mask);\n+\n+  __ cmpl(keylen, 52);\n+  __ jccb(Assembler::equal, L_doLast);\n+\n+  __ aesdec(xmm_result, xmm_temp1);\n+  __ aesdec(xmm_result, xmm_temp2);\n+\n+  load_key(xmm_temp1, key, 0xd0, xmm_key_shuf_mask);\n+  load_key(xmm_temp2, key, 0xe0, xmm_key_shuf_mask);\n+\n+  __ BIND(L_doLast);\n+  __ aesdec(xmm_result, xmm_temp1);\n+  __ aesdec(xmm_result, xmm_temp2);\n+\n+  \/\/ for decryption the aesdeclast operation is always on key+0x00\n+  __ aesdeclast(xmm_result, xmm_temp3);\n+  __ movdqu(Address(to, 0), xmm_result);  \/\/ store the result\n+  __ xorptr(rax, rax); \/\/ return 0\n+  __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ ret(0);\n@@ -3766,2 +3760,2 @@\n-    return start;\n-  }\n+  return start;\n+}\n@@ -3770,24 +3764,24 @@\n-  \/\/ Arguments:\n-  \/\/\n-  \/\/ Inputs:\n-  \/\/   c_rarg0   - source byte array address\n-  \/\/   c_rarg1   - destination byte array address\n-  \/\/   c_rarg2   - K (key) in little endian int array\n-  \/\/   c_rarg3   - r vector byte array address\n-  \/\/   c_rarg4   - input length\n-  \/\/\n-  \/\/ Output:\n-  \/\/   rax       - input length\n-  \/\/\n-  address generate_cipherBlockChaining_encryptAESCrypt() {\n-    assert(UseAES, \"need AES instructions and misaligned SSE support\");\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", \"cipherBlockChaining_encryptAESCrypt\");\n-    address start = __ pc();\n-\n-    Label L_exit, L_key_192_256, L_key_256, L_loopTop_128, L_loopTop_192, L_loopTop_256;\n-    const Register from        = c_rarg0;  \/\/ source array address\n-    const Register to          = c_rarg1;  \/\/ destination array address\n-    const Register key         = c_rarg2;  \/\/ key array address\n-    const Register rvec        = c_rarg3;  \/\/ r byte array initialized from initvector array address\n-                                           \/\/ and left with the results of the last encryption block\n+\/\/ Arguments:\n+\/\/\n+\/\/ Inputs:\n+\/\/   c_rarg0   - source byte array address\n+\/\/   c_rarg1   - destination byte array address\n+\/\/   c_rarg2   - K (key) in little endian int array\n+\/\/   c_rarg3   - r vector byte array address\n+\/\/   c_rarg4   - input length\n+\/\/\n+\/\/ Output:\n+\/\/   rax       - input length\n+\/\/\n+address StubGenerator::generate_cipherBlockChaining_encryptAESCrypt() {\n+  assert(UseAES, \"need AES instructions and misaligned SSE support\");\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", \"cipherBlockChaining_encryptAESCrypt\");\n+  address start = __ pc();\n+\n+  Label L_exit, L_key_192_256, L_key_256, L_loopTop_128, L_loopTop_192, L_loopTop_256;\n+  const Register from        = c_rarg0;  \/\/ source array address\n+  const Register to          = c_rarg1;  \/\/ destination array address\n+  const Register key         = c_rarg2;  \/\/ key array address\n+  const Register rvec        = c_rarg3;  \/\/ r byte array initialized from initvector array address\n+                                         \/\/ and left with the results of the last encryption block\n@@ -3795,1 +3789,1 @@\n-    const Register len_reg     = c_rarg4;  \/\/ src len (must be multiple of blocksize 16)\n+  const Register len_reg     = c_rarg4;  \/\/ src len (must be multiple of blocksize 16)\n@@ -3797,2 +3791,2 @@\n-    const Address  len_mem(rbp, 6 * wordSize);  \/\/ length is on stack on Win64\n-    const Register len_reg     = r11;      \/\/ pick the volatile windows register\n+  const Address  len_mem(rbp, 6 * wordSize);  \/\/ length is on stack on Win64\n+  const Register len_reg     = r11;      \/\/ pick the volatile windows register\n@@ -3800,15 +3794,15 @@\n-    const Register pos         = rax;\n-\n-    \/\/ xmm register assignments for the loops below\n-    const XMMRegister xmm_result = xmm0;\n-    const XMMRegister xmm_temp   = xmm1;\n-    \/\/ keys 0-10 preloaded into xmm2-xmm12\n-    const int XMM_REG_NUM_KEY_FIRST = 2;\n-    const int XMM_REG_NUM_KEY_LAST  = 15;\n-    const XMMRegister xmm_key0   = as_XMMRegister(XMM_REG_NUM_KEY_FIRST);\n-    const XMMRegister xmm_key10  = as_XMMRegister(XMM_REG_NUM_KEY_FIRST+10);\n-    const XMMRegister xmm_key11  = as_XMMRegister(XMM_REG_NUM_KEY_FIRST+11);\n-    const XMMRegister xmm_key12  = as_XMMRegister(XMM_REG_NUM_KEY_FIRST+12);\n-    const XMMRegister xmm_key13  = as_XMMRegister(XMM_REG_NUM_KEY_FIRST+13);\n-\n-    __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  const Register pos         = rax;\n+\n+  \/\/ xmm register assignments for the loops below\n+  const XMMRegister xmm_result = xmm0;\n+  const XMMRegister xmm_temp   = xmm1;\n+  \/\/ keys 0-10 preloaded into xmm2-xmm12\n+  const int XMM_REG_NUM_KEY_FIRST = 2;\n+  const int XMM_REG_NUM_KEY_LAST  = 15;\n+  const XMMRegister xmm_key0   = as_XMMRegister(XMM_REG_NUM_KEY_FIRST);\n+  const XMMRegister xmm_key10  = as_XMMRegister(XMM_REG_NUM_KEY_FIRST+10);\n+  const XMMRegister xmm_key11  = as_XMMRegister(XMM_REG_NUM_KEY_FIRST+11);\n+  const XMMRegister xmm_key12  = as_XMMRegister(XMM_REG_NUM_KEY_FIRST+12);\n+  const XMMRegister xmm_key13  = as_XMMRegister(XMM_REG_NUM_KEY_FIRST+13);\n+\n+  __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n@@ -3817,2 +3811,2 @@\n-    \/\/ on win64, fill len_reg from stack position\n-    __ movl(len_reg, len_mem);\n+  \/\/ on win64, fill len_reg from stack position\n+  __ movl(len_reg, len_mem);\n@@ -3820,1 +3814,1 @@\n-    __ push(len_reg); \/\/ Save\n+  __ push(len_reg); \/\/ Save\n@@ -3823,31 +3817,31 @@\n-    const XMMRegister xmm_key_shuf_mask = xmm_temp;  \/\/ used temporarily to swap key bytes up front\n-    __ movdqu(xmm_key_shuf_mask, ExternalAddress(StubRoutines::x86::key_shuffle_mask_addr()));\n-    \/\/ load up xmm regs xmm2 thru xmm12 with key 0x00 - 0xa0\n-    for (int rnum = XMM_REG_NUM_KEY_FIRST, offset = 0x00; rnum <= XMM_REG_NUM_KEY_FIRST+10; rnum++) {\n-      load_key(as_XMMRegister(rnum), key, offset, xmm_key_shuf_mask);\n-      offset += 0x10;\n-    }\n-    __ movdqu(xmm_result, Address(rvec, 0x00));   \/\/ initialize xmm_result with r vec\n-\n-    \/\/ now split to different paths depending on the keylen (len in ints of AESCrypt.KLE array (52=192, or 60=256))\n-    __ movl(rax, Address(key, arrayOopDesc::length_offset_in_bytes() - arrayOopDesc::base_offset_in_bytes(T_INT)));\n-    __ cmpl(rax, 44);\n-    __ jcc(Assembler::notEqual, L_key_192_256);\n-\n-    \/\/ 128 bit code follows here\n-    __ movptr(pos, 0);\n-    __ align(OptoLoopAlignment);\n-\n-    __ BIND(L_loopTop_128);\n-    __ movdqu(xmm_temp, Address(from, pos, Address::times_1, 0));   \/\/ get next 16 bytes of input\n-    __ pxor  (xmm_result, xmm_temp);               \/\/ xor with the current r vector\n-    __ pxor  (xmm_result, xmm_key0);               \/\/ do the aes rounds\n-    for (int rnum = XMM_REG_NUM_KEY_FIRST + 1; rnum <= XMM_REG_NUM_KEY_FIRST + 9; rnum++) {\n-      __ aesenc(xmm_result, as_XMMRegister(rnum));\n-    }\n-    __ aesenclast(xmm_result, xmm_key10);\n-    __ movdqu(Address(to, pos, Address::times_1, 0), xmm_result);     \/\/ store into the next 16 bytes of output\n-    \/\/ no need to store r to memory until we exit\n-    __ addptr(pos, AESBlockSize);\n-    __ subptr(len_reg, AESBlockSize);\n-    __ jcc(Assembler::notEqual, L_loopTop_128);\n+  const XMMRegister xmm_key_shuf_mask = xmm_temp;  \/\/ used temporarily to swap key bytes up front\n+  __ movdqu(xmm_key_shuf_mask, ExternalAddress(StubRoutines::x86::key_shuffle_mask_addr()));\n+  \/\/ load up xmm regs xmm2 thru xmm12 with key 0x00 - 0xa0\n+  for (int rnum = XMM_REG_NUM_KEY_FIRST, offset = 0x00; rnum <= XMM_REG_NUM_KEY_FIRST+10; rnum++) {\n+    load_key(as_XMMRegister(rnum), key, offset, xmm_key_shuf_mask);\n+    offset += 0x10;\n+  }\n+  __ movdqu(xmm_result, Address(rvec, 0x00));   \/\/ initialize xmm_result with r vec\n+\n+  \/\/ now split to different paths depending on the keylen (len in ints of AESCrypt.KLE array (52=192, or 60=256))\n+  __ movl(rax, Address(key, arrayOopDesc::length_offset_in_bytes() - arrayOopDesc::base_offset_in_bytes(T_INT)));\n+  __ cmpl(rax, 44);\n+  __ jcc(Assembler::notEqual, L_key_192_256);\n+\n+  \/\/ 128 bit code follows here\n+  __ movptr(pos, 0);\n+  __ align(OptoLoopAlignment);\n+\n+  __ BIND(L_loopTop_128);\n+  __ movdqu(xmm_temp, Address(from, pos, Address::times_1, 0));   \/\/ get next 16 bytes of input\n+  __ pxor  (xmm_result, xmm_temp);               \/\/ xor with the current r vector\n+  __ pxor  (xmm_result, xmm_key0);               \/\/ do the aes rounds\n+  for (int rnum = XMM_REG_NUM_KEY_FIRST + 1; rnum <= XMM_REG_NUM_KEY_FIRST + 9; rnum++) {\n+    __ aesenc(xmm_result, as_XMMRegister(rnum));\n+  }\n+  __ aesenclast(xmm_result, xmm_key10);\n+  __ movdqu(Address(to, pos, Address::times_1, 0), xmm_result);     \/\/ store into the next 16 bytes of output\n+  \/\/ no need to store r to memory until we exit\n+  __ addptr(pos, AESBlockSize);\n+  __ subptr(len_reg, AESBlockSize);\n+  __ jcc(Assembler::notEqual, L_loopTop_128);\n@@ -3855,2 +3849,2 @@\n-    __ BIND(L_exit);\n-    __ movdqu(Address(rvec, 0), xmm_result);     \/\/ final value of r stored in rvec of CipherBlockChaining object\n+  __ BIND(L_exit);\n+  __ movdqu(Address(rvec, 0), xmm_result);     \/\/ final value of r stored in rvec of CipherBlockChaining object\n@@ -3859,56 +3853,24 @@\n-    __ movl(rax, len_mem);\n-#else\n-    __ pop(rax); \/\/ return length\n-#endif\n-    __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    __ ret(0);\n-\n-    __ BIND(L_key_192_256);\n-    \/\/ here rax = len in ints of AESCrypt.KLE array (52=192, or 60=256)\n-    load_key(xmm_key11, key, 0xb0, xmm_key_shuf_mask);\n-    load_key(xmm_key12, key, 0xc0, xmm_key_shuf_mask);\n-    __ cmpl(rax, 52);\n-    __ jcc(Assembler::notEqual, L_key_256);\n-\n-    \/\/ 192-bit code follows here (could be changed to use more xmm registers)\n-    __ movptr(pos, 0);\n-    __ align(OptoLoopAlignment);\n-\n-    __ BIND(L_loopTop_192);\n-    __ movdqu(xmm_temp, Address(from, pos, Address::times_1, 0));   \/\/ get next 16 bytes of input\n-    __ pxor  (xmm_result, xmm_temp);               \/\/ xor with the current r vector\n-    __ pxor  (xmm_result, xmm_key0);               \/\/ do the aes rounds\n-    for (int rnum = XMM_REG_NUM_KEY_FIRST + 1; rnum  <= XMM_REG_NUM_KEY_FIRST + 11; rnum++) {\n-      __ aesenc(xmm_result, as_XMMRegister(rnum));\n-    }\n-    __ aesenclast(xmm_result, xmm_key12);\n-    __ movdqu(Address(to, pos, Address::times_1, 0), xmm_result);     \/\/ store into the next 16 bytes of output\n-    \/\/ no need to store r to memory until we exit\n-    __ addptr(pos, AESBlockSize);\n-    __ subptr(len_reg, AESBlockSize);\n-    __ jcc(Assembler::notEqual, L_loopTop_192);\n-    __ jmp(L_exit);\n-\n-    __ BIND(L_key_256);\n-    \/\/ 256-bit code follows here (could be changed to use more xmm registers)\n-    load_key(xmm_key13, key, 0xd0, xmm_key_shuf_mask);\n-    __ movptr(pos, 0);\n-    __ align(OptoLoopAlignment);\n-\n-    __ BIND(L_loopTop_256);\n-    __ movdqu(xmm_temp, Address(from, pos, Address::times_1, 0));   \/\/ get next 16 bytes of input\n-    __ pxor  (xmm_result, xmm_temp);               \/\/ xor with the current r vector\n-    __ pxor  (xmm_result, xmm_key0);               \/\/ do the aes rounds\n-    for (int rnum = XMM_REG_NUM_KEY_FIRST + 1; rnum  <= XMM_REG_NUM_KEY_FIRST + 13; rnum++) {\n-      __ aesenc(xmm_result, as_XMMRegister(rnum));\n-    }\n-    load_key(xmm_temp, key, 0xe0);\n-    __ aesenclast(xmm_result, xmm_temp);\n-    __ movdqu(Address(to, pos, Address::times_1, 0), xmm_result);     \/\/ store into the next 16 bytes of output\n-    \/\/ no need to store r to memory until we exit\n-    __ addptr(pos, AESBlockSize);\n-    __ subptr(len_reg, AESBlockSize);\n-    __ jcc(Assembler::notEqual, L_loopTop_256);\n-    __ jmp(L_exit);\n-\n-    return start;\n+  __ movl(rax, len_mem);\n+#else\n+  __ pop(rax); \/\/ return length\n+#endif\n+  __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ ret(0);\n+\n+  __ BIND(L_key_192_256);\n+  \/\/ here rax = len in ints of AESCrypt.KLE array (52=192, or 60=256)\n+  load_key(xmm_key11, key, 0xb0, xmm_key_shuf_mask);\n+  load_key(xmm_key12, key, 0xc0, xmm_key_shuf_mask);\n+  __ cmpl(rax, 52);\n+  __ jcc(Assembler::notEqual, L_key_256);\n+\n+  \/\/ 192-bit code follows here (could be changed to use more xmm registers)\n+  __ movptr(pos, 0);\n+  __ align(OptoLoopAlignment);\n+\n+  __ BIND(L_loopTop_192);\n+  __ movdqu(xmm_temp, Address(from, pos, Address::times_1, 0));   \/\/ get next 16 bytes of input\n+  __ pxor  (xmm_result, xmm_temp);               \/\/ xor with the current r vector\n+  __ pxor  (xmm_result, xmm_key0);               \/\/ do the aes rounds\n+  for (int rnum = XMM_REG_NUM_KEY_FIRST + 1; rnum  <= XMM_REG_NUM_KEY_FIRST + 11; rnum++) {\n+    __ aesenc(xmm_result, as_XMMRegister(rnum));\n@@ -3916,0 +3878,29 @@\n+  __ aesenclast(xmm_result, xmm_key12);\n+  __ movdqu(Address(to, pos, Address::times_1, 0), xmm_result);     \/\/ store into the next 16 bytes of output\n+  \/\/ no need to store r to memory until we exit\n+  __ addptr(pos, AESBlockSize);\n+  __ subptr(len_reg, AESBlockSize);\n+  __ jcc(Assembler::notEqual, L_loopTop_192);\n+  __ jmp(L_exit);\n+\n+  __ BIND(L_key_256);\n+  \/\/ 256-bit code follows here (could be changed to use more xmm registers)\n+  load_key(xmm_key13, key, 0xd0, xmm_key_shuf_mask);\n+  __ movptr(pos, 0);\n+  __ align(OptoLoopAlignment);\n+\n+  __ BIND(L_loopTop_256);\n+  __ movdqu(xmm_temp, Address(from, pos, Address::times_1, 0));   \/\/ get next 16 bytes of input\n+  __ pxor  (xmm_result, xmm_temp);               \/\/ xor with the current r vector\n+  __ pxor  (xmm_result, xmm_key0);               \/\/ do the aes rounds\n+  for (int rnum = XMM_REG_NUM_KEY_FIRST + 1; rnum  <= XMM_REG_NUM_KEY_FIRST + 13; rnum++) {\n+    __ aesenc(xmm_result, as_XMMRegister(rnum));\n+  }\n+  load_key(xmm_temp, key, 0xe0);\n+  __ aesenclast(xmm_result, xmm_temp);\n+  __ movdqu(Address(to, pos, Address::times_1, 0), xmm_result);     \/\/ store into the next 16 bytes of output\n+  \/\/ no need to store r to memory until we exit\n+  __ addptr(pos, AESBlockSize);\n+  __ subptr(len_reg, AESBlockSize);\n+  __ jcc(Assembler::notEqual, L_loopTop_256);\n+  __ jmp(L_exit);\n@@ -3917,26 +3908,29 @@\n-  \/\/ This is a version of CBC\/AES Decrypt which does 4 blocks in a loop at a time\n-  \/\/ to hide instruction latency\n-  \/\/\n-  \/\/ Arguments:\n-  \/\/\n-  \/\/ Inputs:\n-  \/\/   c_rarg0   - source byte array address\n-  \/\/   c_rarg1   - destination byte array address\n-  \/\/   c_rarg2   - K (key) in little endian int array\n-  \/\/   c_rarg3   - r vector byte array address\n-  \/\/   c_rarg4   - input length\n-  \/\/\n-  \/\/ Output:\n-  \/\/   rax       - input length\n-  \/\/\n-  address generate_cipherBlockChaining_decryptAESCrypt_Parallel() {\n-    assert(UseAES, \"need AES instructions and misaligned SSE support\");\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", \"cipherBlockChaining_decryptAESCrypt\");\n-    address start = __ pc();\n-\n-    const Register from        = c_rarg0;  \/\/ source array address\n-    const Register to          = c_rarg1;  \/\/ destination array address\n-    const Register key         = c_rarg2;  \/\/ key array address\n-    const Register rvec        = c_rarg3;  \/\/ r byte array initialized from initvector array address\n-                                           \/\/ and left with the results of the last encryption block\n+  return start;\n+}\n+\n+\/\/ This is a version of CBC\/AES Decrypt which does 4 blocks in a loop at a time\n+\/\/ to hide instruction latency\n+\/\/\n+\/\/ Arguments:\n+\/\/\n+\/\/ Inputs:\n+\/\/   c_rarg0   - source byte array address\n+\/\/   c_rarg1   - destination byte array address\n+\/\/   c_rarg2   - K (key) in little endian int array\n+\/\/   c_rarg3   - r vector byte array address\n+\/\/   c_rarg4   - input length\n+\/\/\n+\/\/ Output:\n+\/\/   rax       - input length\n+\/\/\n+address StubGenerator::generate_cipherBlockChaining_decryptAESCrypt_Parallel() {\n+  assert(UseAES, \"need AES instructions and misaligned SSE support\");\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", \"cipherBlockChaining_decryptAESCrypt\");\n+  address start = __ pc();\n+\n+  const Register from        = c_rarg0;  \/\/ source array address\n+  const Register to          = c_rarg1;  \/\/ destination array address\n+  const Register key         = c_rarg2;  \/\/ key array address\n+  const Register rvec        = c_rarg3;  \/\/ r byte array initialized from initvector array address\n+                                         \/\/ and left with the results of the last encryption block\n@@ -3944,1 +3938,1 @@\n-    const Register len_reg     = c_rarg4;  \/\/ src len (must be multiple of blocksize 16)\n+  const Register len_reg     = c_rarg4;  \/\/ src len (must be multiple of blocksize 16)\n@@ -3946,2 +3940,2 @@\n-    const Address  len_mem(rbp, 6 * wordSize);  \/\/ length is on stack on Win64\n-    const Register len_reg     = r11;      \/\/ pick the volatile windows register\n+  const Address  len_mem(rbp, 6 * wordSize);  \/\/ length is on stack on Win64\n+  const Register len_reg     = r11;      \/\/ pick the volatile windows register\n@@ -3949,1 +3943,1 @@\n-    const Register pos         = rax;\n+  const Register pos         = rax;\n@@ -3951,2 +3945,2 @@\n-    const int PARALLEL_FACTOR = 4;\n-    const int ROUNDS[3] = { 10, 12, 14 }; \/\/ aes rounds for key128, key192, key256\n+  const int PARALLEL_FACTOR = 4;\n+  const int ROUNDS[3] = { 10, 12, 14 }; \/\/ aes rounds for key128, key192, key256\n@@ -3954,6 +3948,6 @@\n-    Label L_exit;\n-    Label L_singleBlock_loopTopHead[3]; \/\/ 128, 192, 256\n-    Label L_singleBlock_loopTopHead2[3]; \/\/ 128, 192, 256\n-    Label L_singleBlock_loopTop[3]; \/\/ 128, 192, 256\n-    Label L_multiBlock_loopTopHead[3]; \/\/ 128, 192, 256\n-    Label L_multiBlock_loopTop[3]; \/\/ 128, 192, 256\n+  Label L_exit;\n+  Label L_singleBlock_loopTopHead[3]; \/\/ 128, 192, 256\n+  Label L_singleBlock_loopTopHead2[3]; \/\/ 128, 192, 256\n+  Label L_singleBlock_loopTop[3]; \/\/ 128, 192, 256\n+  Label L_multiBlock_loopTopHead[3]; \/\/ 128, 192, 256\n+  Label L_multiBlock_loopTop[3]; \/\/ 128, 192, 256\n@@ -3961,5 +3955,5 @@\n-    \/\/ keys 0-10 preloaded into xmm5-xmm15\n-    const int XMM_REG_NUM_KEY_FIRST = 5;\n-    const int XMM_REG_NUM_KEY_LAST  = 15;\n-    const XMMRegister xmm_key_first = as_XMMRegister(XMM_REG_NUM_KEY_FIRST);\n-    const XMMRegister xmm_key_last  = as_XMMRegister(XMM_REG_NUM_KEY_LAST);\n+  \/\/ keys 0-10 preloaded into xmm5-xmm15\n+  const int XMM_REG_NUM_KEY_FIRST = 5;\n+  const int XMM_REG_NUM_KEY_LAST  = 15;\n+  const XMMRegister xmm_key_first = as_XMMRegister(XMM_REG_NUM_KEY_FIRST);\n+  const XMMRegister xmm_key_last  = as_XMMRegister(XMM_REG_NUM_KEY_LAST);\n@@ -3967,1 +3961,1 @@\n-    __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n@@ -3970,2 +3964,2 @@\n-    \/\/ on win64, fill len_reg from stack position\n-    __ movl(len_reg, len_mem);\n+  \/\/ on win64, fill len_reg from stack position\n+  __ movl(len_reg, len_mem);\n@@ -3973,1 +3967,1 @@\n-    __ push(len_reg); \/\/ Save\n+  __ push(len_reg); \/\/ Save\n@@ -3975,11 +3969,11 @@\n-    __ push(rbx);\n-    \/\/ the java expanded key ordering is rotated one position from what we want\n-    \/\/ so we start from 0x10 here and hit 0x00 last\n-    const XMMRegister xmm_key_shuf_mask = xmm1;  \/\/ used temporarily to swap key bytes up front\n-    __ movdqu(xmm_key_shuf_mask, ExternalAddress(StubRoutines::x86::key_shuffle_mask_addr()));\n-    \/\/ load up xmm regs 5 thru 15 with key 0x10 - 0xa0 - 0x00\n-    for (int rnum = XMM_REG_NUM_KEY_FIRST, offset = 0x10; rnum < XMM_REG_NUM_KEY_LAST; rnum++) {\n-      load_key(as_XMMRegister(rnum), key, offset, xmm_key_shuf_mask);\n-      offset += 0x10;\n-    }\n-    load_key(xmm_key_last, key, 0x00, xmm_key_shuf_mask);\n+  __ push(rbx);\n+  \/\/ the java expanded key ordering is rotated one position from what we want\n+  \/\/ so we start from 0x10 here and hit 0x00 last\n+  const XMMRegister xmm_key_shuf_mask = xmm1;  \/\/ used temporarily to swap key bytes up front\n+  __ movdqu(xmm_key_shuf_mask, ExternalAddress(StubRoutines::x86::key_shuffle_mask_addr()));\n+  \/\/ load up xmm regs 5 thru 15 with key 0x10 - 0xa0 - 0x00\n+  for (int rnum = XMM_REG_NUM_KEY_FIRST, offset = 0x10; rnum < XMM_REG_NUM_KEY_LAST; rnum++) {\n+    load_key(as_XMMRegister(rnum), key, offset, xmm_key_shuf_mask);\n+    offset += 0x10;\n+  }\n+  load_key(xmm_key_last, key, 0x00, xmm_key_shuf_mask);\n@@ -3987,1 +3981,1 @@\n-    const XMMRegister xmm_prev_block_cipher = xmm1;  \/\/ holds cipher of previous block\n+  const XMMRegister xmm_prev_block_cipher = xmm1;  \/\/ holds cipher of previous block\n@@ -3989,5 +3983,5 @@\n-    \/\/ registers holding the four results in the parallelized loop\n-    const XMMRegister xmm_result0 = xmm0;\n-    const XMMRegister xmm_result1 = xmm2;\n-    const XMMRegister xmm_result2 = xmm3;\n-    const XMMRegister xmm_result3 = xmm4;\n+  \/\/ registers holding the four results in the parallelized loop\n+  const XMMRegister xmm_result0 = xmm0;\n+  const XMMRegister xmm_result1 = xmm2;\n+  const XMMRegister xmm_result2 = xmm3;\n+  const XMMRegister xmm_result3 = xmm4;\n@@ -3995,1 +3989,1 @@\n-    __ movdqu(xmm_prev_block_cipher, Address(rvec, 0x00));   \/\/ initialize with initial rvec\n+  __ movdqu(xmm_prev_block_cipher, Address(rvec, 0x00));   \/\/ initialize with initial rvec\n@@ -3997,1 +3991,1 @@\n-    __ xorptr(pos, pos);\n+  __ xorptr(pos, pos);\n@@ -3999,6 +3993,6 @@\n-    \/\/ now split to different paths depending on the keylen (len in ints of AESCrypt.KLE array (52=192, or 60=256))\n-    __ movl(rbx, Address(key, arrayOopDesc::length_offset_in_bytes() - arrayOopDesc::base_offset_in_bytes(T_INT)));\n-    __ cmpl(rbx, 52);\n-    __ jcc(Assembler::equal, L_multiBlock_loopTopHead[1]);\n-    __ cmpl(rbx, 60);\n-    __ jcc(Assembler::equal, L_multiBlock_loopTopHead[2]);\n+  \/\/ now split to different paths depending on the keylen (len in ints of AESCrypt.KLE array (52=192, or 60=256))\n+  __ movl(rbx, Address(key, arrayOopDesc::length_offset_in_bytes() - arrayOopDesc::base_offset_in_bytes(T_INT)));\n+  __ cmpl(rbx, 52);\n+  __ jcc(Assembler::equal, L_multiBlock_loopTopHead[1]);\n+  __ cmpl(rbx, 60);\n+  __ jcc(Assembler::equal, L_multiBlock_loopTopHead[2]);\n@@ -4007,32 +4001,8 @@\n-  __ opc(xmm_result0, src_reg);         \\\n-  __ opc(xmm_result1, src_reg);         \\\n-  __ opc(xmm_result2, src_reg);         \\\n-  __ opc(xmm_result3, src_reg);         \\\n-\n-    for (int k = 0; k < 3; ++k) {\n-      __ BIND(L_multiBlock_loopTopHead[k]);\n-      if (k != 0) {\n-        __ cmpptr(len_reg, PARALLEL_FACTOR * AESBlockSize); \/\/ see if at least 4 blocks left\n-        __ jcc(Assembler::less, L_singleBlock_loopTopHead2[k]);\n-      }\n-      if (k == 1) {\n-        __ subptr(rsp, 6 * wordSize);\n-        __ movdqu(Address(rsp, 0), xmm15); \/\/save last_key from xmm15\n-        load_key(xmm15, key, 0xb0); \/\/ 0xb0; 192-bit key goes up to 0xc0\n-        __ movdqu(Address(rsp, 2 * wordSize), xmm15);\n-        load_key(xmm1, key, 0xc0);  \/\/ 0xc0;\n-        __ movdqu(Address(rsp, 4 * wordSize), xmm1);\n-      } else if (k == 2) {\n-        __ subptr(rsp, 10 * wordSize);\n-        __ movdqu(Address(rsp, 0), xmm15); \/\/save last_key from xmm15\n-        load_key(xmm15, key, 0xd0); \/\/ 0xd0; 256-bit key goes up to 0xe0\n-        __ movdqu(Address(rsp, 6 * wordSize), xmm15);\n-        load_key(xmm1, key, 0xe0);  \/\/ 0xe0;\n-        __ movdqu(Address(rsp, 8 * wordSize), xmm1);\n-        load_key(xmm15, key, 0xb0); \/\/ 0xb0;\n-        __ movdqu(Address(rsp, 2 * wordSize), xmm15);\n-        load_key(xmm1, key, 0xc0);  \/\/ 0xc0;\n-        __ movdqu(Address(rsp, 4 * wordSize), xmm1);\n-      }\n-      __ align(OptoLoopAlignment);\n-      __ BIND(L_multiBlock_loopTop[k]);\n+__ opc(xmm_result0, src_reg);         \\\n+__ opc(xmm_result1, src_reg);         \\\n+__ opc(xmm_result2, src_reg);         \\\n+__ opc(xmm_result3, src_reg);         \\\n+\n+  for (int k = 0; k < 3; ++k) {\n+    __ BIND(L_multiBlock_loopTopHead[k]);\n+    if (k != 0) {\n@@ -4040,11 +4010,25 @@\n-      __ jcc(Assembler::less, L_singleBlock_loopTopHead[k]);\n-\n-      if  (k != 0) {\n-        __ movdqu(xmm15, Address(rsp, 2 * wordSize));\n-        __ movdqu(xmm1, Address(rsp, 4 * wordSize));\n-      }\n-\n-      __ movdqu(xmm_result0, Address(from, pos, Address::times_1, 0 * AESBlockSize)); \/\/ get next 4 blocks into xmmresult registers\n-      __ movdqu(xmm_result1, Address(from, pos, Address::times_1, 1 * AESBlockSize));\n-      __ movdqu(xmm_result2, Address(from, pos, Address::times_1, 2 * AESBlockSize));\n-      __ movdqu(xmm_result3, Address(from, pos, Address::times_1, 3 * AESBlockSize));\n+      __ jcc(Assembler::less, L_singleBlock_loopTopHead2[k]);\n+    }\n+    if (k == 1) {\n+      __ subptr(rsp, 6 * wordSize);\n+      __ movdqu(Address(rsp, 0), xmm15); \/\/save last_key from xmm15\n+      load_key(xmm15, key, 0xb0); \/\/ 0xb0; 192-bit key goes up to 0xc0\n+      __ movdqu(Address(rsp, 2 * wordSize), xmm15);\n+      load_key(xmm1, key, 0xc0);  \/\/ 0xc0;\n+      __ movdqu(Address(rsp, 4 * wordSize), xmm1);\n+    } else if (k == 2) {\n+      __ subptr(rsp, 10 * wordSize);\n+      __ movdqu(Address(rsp, 0), xmm15); \/\/save last_key from xmm15\n+      load_key(xmm15, key, 0xd0); \/\/ 0xd0; 256-bit key goes up to 0xe0\n+      __ movdqu(Address(rsp, 6 * wordSize), xmm15);\n+      load_key(xmm1, key, 0xe0);  \/\/ 0xe0;\n+      __ movdqu(Address(rsp, 8 * wordSize), xmm1);\n+      load_key(xmm15, key, 0xb0); \/\/ 0xb0;\n+      __ movdqu(Address(rsp, 2 * wordSize), xmm15);\n+      load_key(xmm1, key, 0xc0);  \/\/ 0xc0;\n+      __ movdqu(Address(rsp, 4 * wordSize), xmm1);\n+    }\n+    __ align(OptoLoopAlignment);\n+    __ BIND(L_multiBlock_loopTop[k]);\n+    __ cmpptr(len_reg, PARALLEL_FACTOR * AESBlockSize); \/\/ see if at least 4 blocks left\n+    __ jcc(Assembler::less, L_singleBlock_loopTopHead[k]);\n@@ -4052,27 +4036,4 @@\n-      DoFour(pxor, xmm_key_first);\n-      if (k == 0) {\n-        for (int rnum = 1; rnum < ROUNDS[k]; rnum++) {\n-          DoFour(aesdec, as_XMMRegister(rnum + XMM_REG_NUM_KEY_FIRST));\n-        }\n-        DoFour(aesdeclast, xmm_key_last);\n-      } else if (k == 1) {\n-        for (int rnum = 1; rnum <= ROUNDS[k]-2; rnum++) {\n-          DoFour(aesdec, as_XMMRegister(rnum + XMM_REG_NUM_KEY_FIRST));\n-        }\n-        __ movdqu(xmm_key_last, Address(rsp, 0)); \/\/ xmm15 needs to be loaded again.\n-        DoFour(aesdec, xmm1);  \/\/ key : 0xc0\n-        __ movdqu(xmm_prev_block_cipher, Address(rvec, 0x00));  \/\/ xmm1 needs to be loaded again\n-        DoFour(aesdeclast, xmm_key_last);\n-      } else if (k == 2) {\n-        for (int rnum = 1; rnum <= ROUNDS[k] - 4; rnum++) {\n-          DoFour(aesdec, as_XMMRegister(rnum + XMM_REG_NUM_KEY_FIRST));\n-        }\n-        DoFour(aesdec, xmm1);  \/\/ key : 0xc0\n-        __ movdqu(xmm15, Address(rsp, 6 * wordSize));\n-        __ movdqu(xmm1, Address(rsp, 8 * wordSize));\n-        DoFour(aesdec, xmm15);  \/\/ key : 0xd0\n-        __ movdqu(xmm_key_last, Address(rsp, 0)); \/\/ xmm15 needs to be loaded again.\n-        DoFour(aesdec, xmm1);  \/\/ key : 0xe0\n-        __ movdqu(xmm_prev_block_cipher, Address(rvec, 0x00));  \/\/ xmm1 needs to be loaded again\n-        DoFour(aesdeclast, xmm_key_last);\n-      }\n+    if  (k != 0) {\n+      __ movdqu(xmm15, Address(rsp, 2 * wordSize));\n+      __ movdqu(xmm1, Address(rsp, 4 * wordSize));\n+    }\n@@ -4080,12 +4041,4 @@\n-      \/\/ for each result, xor with the r vector of previous cipher block\n-      __ pxor(xmm_result0, xmm_prev_block_cipher);\n-      __ movdqu(xmm_prev_block_cipher, Address(from, pos, Address::times_1, 0 * AESBlockSize));\n-      __ pxor(xmm_result1, xmm_prev_block_cipher);\n-      __ movdqu(xmm_prev_block_cipher, Address(from, pos, Address::times_1, 1 * AESBlockSize));\n-      __ pxor(xmm_result2, xmm_prev_block_cipher);\n-      __ movdqu(xmm_prev_block_cipher, Address(from, pos, Address::times_1, 2 * AESBlockSize));\n-      __ pxor(xmm_result3, xmm_prev_block_cipher);\n-      __ movdqu(xmm_prev_block_cipher, Address(from, pos, Address::times_1, 3 * AESBlockSize));   \/\/ this will carry over to next set of blocks\n-      if (k != 0) {\n-        __ movdqu(Address(rvec, 0x00), xmm_prev_block_cipher);\n-      }\n+    __ movdqu(xmm_result0, Address(from, pos, Address::times_1, 0 * AESBlockSize)); \/\/ get next 4 blocks into xmmresult registers\n+    __ movdqu(xmm_result1, Address(from, pos, Address::times_1, 1 * AESBlockSize));\n+    __ movdqu(xmm_result2, Address(from, pos, Address::times_1, 2 * AESBlockSize));\n+    __ movdqu(xmm_result3, Address(from, pos, Address::times_1, 3 * AESBlockSize));\n@@ -4093,32 +4046,4 @@\n-      __ movdqu(Address(to, pos, Address::times_1, 0 * AESBlockSize), xmm_result0);     \/\/ store 4 results into the next 64 bytes of output\n-      __ movdqu(Address(to, pos, Address::times_1, 1 * AESBlockSize), xmm_result1);\n-      __ movdqu(Address(to, pos, Address::times_1, 2 * AESBlockSize), xmm_result2);\n-      __ movdqu(Address(to, pos, Address::times_1, 3 * AESBlockSize), xmm_result3);\n-\n-      __ addptr(pos, PARALLEL_FACTOR * AESBlockSize);\n-      __ subptr(len_reg, PARALLEL_FACTOR * AESBlockSize);\n-      __ jmp(L_multiBlock_loopTop[k]);\n-\n-      \/\/ registers used in the non-parallelized loops\n-      \/\/ xmm register assignments for the loops below\n-      const XMMRegister xmm_result = xmm0;\n-      const XMMRegister xmm_prev_block_cipher_save = xmm2;\n-      const XMMRegister xmm_key11 = xmm3;\n-      const XMMRegister xmm_key12 = xmm4;\n-      const XMMRegister key_tmp = xmm4;\n-\n-      __ BIND(L_singleBlock_loopTopHead[k]);\n-      if (k == 1) {\n-        __ addptr(rsp, 6 * wordSize);\n-      } else if (k == 2) {\n-        __ addptr(rsp, 10 * wordSize);\n-      }\n-      __ cmpptr(len_reg, 0); \/\/ any blocks left??\n-      __ jcc(Assembler::equal, L_exit);\n-      __ BIND(L_singleBlock_loopTopHead2[k]);\n-      if (k == 1) {\n-        load_key(xmm_key11, key, 0xb0); \/\/ 0xb0; 192-bit key goes up to 0xc0\n-        load_key(xmm_key12, key, 0xc0); \/\/ 0xc0; 192-bit key goes up to 0xc0\n-      }\n-      if (k == 2) {\n-        load_key(xmm_key11, key, 0xb0); \/\/ 0xb0; 256-bit key goes up to 0xe0\n+    DoFour(pxor, xmm_key_first);\n+    if (k == 0) {\n+      for (int rnum = 1; rnum < ROUNDS[k]; rnum++) {\n+        DoFour(aesdec, as_XMMRegister(rnum + XMM_REG_NUM_KEY_FIRST));\n@@ -4126,7 +4051,4 @@\n-      __ align(OptoLoopAlignment);\n-      __ BIND(L_singleBlock_loopTop[k]);\n-      __ movdqu(xmm_result, Address(from, pos, Address::times_1, 0)); \/\/ get next 16 bytes of cipher input\n-      __ movdqa(xmm_prev_block_cipher_save, xmm_result); \/\/ save for next r vector\n-      __ pxor(xmm_result, xmm_key_first); \/\/ do the aes dec rounds\n-      for (int rnum = 1; rnum <= 9 ; rnum++) {\n-          __ aesdec(xmm_result, as_XMMRegister(rnum + XMM_REG_NUM_KEY_FIRST));\n+      DoFour(aesdeclast, xmm_key_last);\n+    } else if (k == 1) {\n+      for (int rnum = 1; rnum <= ROUNDS[k]-2; rnum++) {\n+        DoFour(aesdec, as_XMMRegister(rnum + XMM_REG_NUM_KEY_FIRST));\n@@ -4134,3 +4056,7 @@\n-      if (k == 1) {\n-        __ aesdec(xmm_result, xmm_key11);\n-        __ aesdec(xmm_result, xmm_key12);\n+      __ movdqu(xmm_key_last, Address(rsp, 0)); \/\/ xmm15 needs to be loaded again.\n+      DoFour(aesdec, xmm1);  \/\/ key : 0xc0\n+      __ movdqu(xmm_prev_block_cipher, Address(rvec, 0x00));  \/\/ xmm1 needs to be loaded again\n+      DoFour(aesdeclast, xmm_key_last);\n+    } else if (k == 2) {\n+      for (int rnum = 1; rnum <= ROUNDS[k] - 4; rnum++) {\n+        DoFour(aesdec, as_XMMRegister(rnum + XMM_REG_NUM_KEY_FIRST));\n@@ -4138,22 +4064,90 @@\n-      if (k == 2) {\n-        __ aesdec(xmm_result, xmm_key11);\n-        load_key(key_tmp, key, 0xc0);\n-        __ aesdec(xmm_result, key_tmp);\n-        load_key(key_tmp, key, 0xd0);\n-        __ aesdec(xmm_result, key_tmp);\n-        load_key(key_tmp, key, 0xe0);\n-        __ aesdec(xmm_result, key_tmp);\n-      }\n-\n-      __ aesdeclast(xmm_result, xmm_key_last); \/\/ xmm15 always came from key+0\n-      __ pxor(xmm_result, xmm_prev_block_cipher); \/\/ xor with the current r vector\n-      __ movdqu(Address(to, pos, Address::times_1, 0), xmm_result); \/\/ store into the next 16 bytes of output\n-      \/\/ no need to store r to memory until we exit\n-      __ movdqa(xmm_prev_block_cipher, xmm_prev_block_cipher_save); \/\/ set up next r vector with cipher input from this block\n-      __ addptr(pos, AESBlockSize);\n-      __ subptr(len_reg, AESBlockSize);\n-      __ jcc(Assembler::notEqual, L_singleBlock_loopTop[k]);\n-      if (k != 2) {\n-        __ jmp(L_exit);\n-      }\n-    } \/\/for 128\/192\/256\n+      DoFour(aesdec, xmm1);  \/\/ key : 0xc0\n+      __ movdqu(xmm15, Address(rsp, 6 * wordSize));\n+      __ movdqu(xmm1, Address(rsp, 8 * wordSize));\n+      DoFour(aesdec, xmm15);  \/\/ key : 0xd0\n+      __ movdqu(xmm_key_last, Address(rsp, 0)); \/\/ xmm15 needs to be loaded again.\n+      DoFour(aesdec, xmm1);  \/\/ key : 0xe0\n+      __ movdqu(xmm_prev_block_cipher, Address(rvec, 0x00));  \/\/ xmm1 needs to be loaded again\n+      DoFour(aesdeclast, xmm_key_last);\n+    }\n+\n+    \/\/ for each result, xor with the r vector of previous cipher block\n+    __ pxor(xmm_result0, xmm_prev_block_cipher);\n+    __ movdqu(xmm_prev_block_cipher, Address(from, pos, Address::times_1, 0 * AESBlockSize));\n+    __ pxor(xmm_result1, xmm_prev_block_cipher);\n+    __ movdqu(xmm_prev_block_cipher, Address(from, pos, Address::times_1, 1 * AESBlockSize));\n+    __ pxor(xmm_result2, xmm_prev_block_cipher);\n+    __ movdqu(xmm_prev_block_cipher, Address(from, pos, Address::times_1, 2 * AESBlockSize));\n+    __ pxor(xmm_result3, xmm_prev_block_cipher);\n+    __ movdqu(xmm_prev_block_cipher, Address(from, pos, Address::times_1, 3 * AESBlockSize));   \/\/ this will carry over to next set of blocks\n+    if (k != 0) {\n+      __ movdqu(Address(rvec, 0x00), xmm_prev_block_cipher);\n+    }\n+\n+    __ movdqu(Address(to, pos, Address::times_1, 0 * AESBlockSize), xmm_result0);     \/\/ store 4 results into the next 64 bytes of output\n+    __ movdqu(Address(to, pos, Address::times_1, 1 * AESBlockSize), xmm_result1);\n+    __ movdqu(Address(to, pos, Address::times_1, 2 * AESBlockSize), xmm_result2);\n+    __ movdqu(Address(to, pos, Address::times_1, 3 * AESBlockSize), xmm_result3);\n+\n+    __ addptr(pos, PARALLEL_FACTOR * AESBlockSize);\n+    __ subptr(len_reg, PARALLEL_FACTOR * AESBlockSize);\n+    __ jmp(L_multiBlock_loopTop[k]);\n+\n+    \/\/ registers used in the non-parallelized loops\n+    \/\/ xmm register assignments for the loops below\n+    const XMMRegister xmm_result = xmm0;\n+    const XMMRegister xmm_prev_block_cipher_save = xmm2;\n+    const XMMRegister xmm_key11 = xmm3;\n+    const XMMRegister xmm_key12 = xmm4;\n+    const XMMRegister key_tmp = xmm4;\n+\n+    __ BIND(L_singleBlock_loopTopHead[k]);\n+    if (k == 1) {\n+      __ addptr(rsp, 6 * wordSize);\n+    } else if (k == 2) {\n+      __ addptr(rsp, 10 * wordSize);\n+    }\n+    __ cmpptr(len_reg, 0); \/\/ any blocks left??\n+    __ jcc(Assembler::equal, L_exit);\n+    __ BIND(L_singleBlock_loopTopHead2[k]);\n+    if (k == 1) {\n+      load_key(xmm_key11, key, 0xb0); \/\/ 0xb0; 192-bit key goes up to 0xc0\n+      load_key(xmm_key12, key, 0xc0); \/\/ 0xc0; 192-bit key goes up to 0xc0\n+    }\n+    if (k == 2) {\n+      load_key(xmm_key11, key, 0xb0); \/\/ 0xb0; 256-bit key goes up to 0xe0\n+    }\n+    __ align(OptoLoopAlignment);\n+    __ BIND(L_singleBlock_loopTop[k]);\n+    __ movdqu(xmm_result, Address(from, pos, Address::times_1, 0)); \/\/ get next 16 bytes of cipher input\n+    __ movdqa(xmm_prev_block_cipher_save, xmm_result); \/\/ save for next r vector\n+    __ pxor(xmm_result, xmm_key_first); \/\/ do the aes dec rounds\n+    for (int rnum = 1; rnum <= 9 ; rnum++) {\n+        __ aesdec(xmm_result, as_XMMRegister(rnum + XMM_REG_NUM_KEY_FIRST));\n+    }\n+    if (k == 1) {\n+      __ aesdec(xmm_result, xmm_key11);\n+      __ aesdec(xmm_result, xmm_key12);\n+    }\n+    if (k == 2) {\n+      __ aesdec(xmm_result, xmm_key11);\n+      load_key(key_tmp, key, 0xc0);\n+      __ aesdec(xmm_result, key_tmp);\n+      load_key(key_tmp, key, 0xd0);\n+      __ aesdec(xmm_result, key_tmp);\n+      load_key(key_tmp, key, 0xe0);\n+      __ aesdec(xmm_result, key_tmp);\n+    }\n+\n+    __ aesdeclast(xmm_result, xmm_key_last); \/\/ xmm15 always came from key+0\n+    __ pxor(xmm_result, xmm_prev_block_cipher); \/\/ xor with the current r vector\n+    __ movdqu(Address(to, pos, Address::times_1, 0), xmm_result); \/\/ store into the next 16 bytes of output\n+    \/\/ no need to store r to memory until we exit\n+    __ movdqa(xmm_prev_block_cipher, xmm_prev_block_cipher_save); \/\/ set up next r vector with cipher input from this block\n+    __ addptr(pos, AESBlockSize);\n+    __ subptr(len_reg, AESBlockSize);\n+    __ jcc(Assembler::notEqual, L_singleBlock_loopTop[k]);\n+    if (k != 2) {\n+      __ jmp(L_exit);\n+    }\n+  } \/\/for 128\/192\/256\n@@ -4161,3 +4155,3 @@\n-    __ BIND(L_exit);\n-    __ movdqu(Address(rvec, 0), xmm_prev_block_cipher);     \/\/ final value of r stored in rvec of CipherBlockChaining object\n-    __ pop(rbx);\n+  __ BIND(L_exit);\n+  __ movdqu(Address(rvec, 0), xmm_prev_block_cipher);     \/\/ final value of r stored in rvec of CipherBlockChaining object\n+  __ pop(rbx);\n@@ -4165,1 +4159,1 @@\n-    __ movl(rax, len_mem);\n+  __ movl(rax, len_mem);\n@@ -4167,1 +4161,1 @@\n-    __ pop(rax); \/\/ return length\n+  __ pop(rax); \/\/ return length\n@@ -4169,3 +4163,4 @@\n-    __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    __ ret(0);\n-    return start;\n+  __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ ret(0);\n+\n+  return start;\n@@ -4174,14 +4169,16 @@\n-  address generate_electronicCodeBook_encryptAESCrypt() {\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", \"electronicCodeBook_encryptAESCrypt\");\n-    address start = __ pc();\n-    const Register from = c_rarg0;  \/\/ source array address\n-    const Register to = c_rarg1;  \/\/ destination array address\n-    const Register key = c_rarg2;  \/\/ key array address\n-    const Register len = c_rarg3;  \/\/ src len (must be multiple of blocksize 16)\n-    __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    __ aesecb_encrypt(from, to, key, len);\n-    __ vzeroupper();\n-    __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    __ ret(0);\n-    return start;\n+address StubGenerator::generate_electronicCodeBook_encryptAESCrypt() {\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", \"electronicCodeBook_encryptAESCrypt\");\n+  address start = __ pc();\n+\n+  const Register from = c_rarg0;  \/\/ source array address\n+  const Register to = c_rarg1;  \/\/ destination array address\n+  const Register key = c_rarg2;  \/\/ key array address\n+  const Register len = c_rarg3;  \/\/ src len (must be multiple of blocksize 16)\n+  __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ aesecb_encrypt(from, to, key, len);\n+  __ vzeroupper();\n+  __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ ret(0);\n+\n+  return start;\n@@ -4190,42 +4187,14 @@\n-  address generate_electronicCodeBook_decryptAESCrypt() {\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", \"electronicCodeBook_decryptAESCrypt\");\n-    address start = __ pc();\n-    const Register from = c_rarg0;  \/\/ source array address\n-    const Register to = c_rarg1;  \/\/ destination array address\n-    const Register key = c_rarg2;  \/\/ key array address\n-    const Register len = c_rarg3;  \/\/ src len (must be multiple of blocksize 16)\n-    __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    __ aesecb_decrypt(from, to, key, len);\n-    __ vzeroupper();\n-    __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    __ ret(0);\n-    return start;\n-  }\n-\n-  \/\/ ofs and limit are use for multi-block byte array.\n-  \/\/ int com.sun.security.provider.MD5.implCompress(byte[] b, int ofs)\n-  address generate_md5_implCompress(bool multi_block, const char *name) {\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", name);\n-    address start = __ pc();\n-\n-    const Register buf_param = r15;\n-    const Address state_param(rsp, 0 * wordSize);\n-    const Address ofs_param  (rsp, 1 * wordSize    );\n-    const Address limit_param(rsp, 1 * wordSize + 4);\n-\n-    __ enter();\n-    __ push(rbx);\n-    __ push(rdi);\n-    __ push(rsi);\n-    __ push(r15);\n-    __ subptr(rsp, 2 * wordSize);\n-\n-    __ movptr(buf_param, c_rarg0);\n-    __ movptr(state_param, c_rarg1);\n-    if (multi_block) {\n-      __ movl(ofs_param, c_rarg2);\n-      __ movl(limit_param, c_rarg3);\n-    }\n-    __ fast_md5(buf_param, state_param, ofs_param, limit_param, multi_block);\n+address StubGenerator::generate_electronicCodeBook_decryptAESCrypt() {\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", \"electronicCodeBook_decryptAESCrypt\");\n+  address start = __ pc();\n+\n+  const Register from = c_rarg0;  \/\/ source array address\n+  const Register to = c_rarg1;  \/\/ destination array address\n+  const Register key = c_rarg2;  \/\/ key array address\n+  const Register len = c_rarg3;  \/\/ src len (must be multiple of blocksize 16)\n+  __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ aesecb_decrypt(from, to, key, len);\n+  __ vzeroupper();\n+  __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ ret(0);\n@@ -4233,9 +4202,2 @@\n-    __ addptr(rsp, 2 * wordSize);\n-    __ pop(r15);\n-    __ pop(rsi);\n-    __ pop(rdi);\n-    __ pop(rbx);\n-    __ leave();\n-    __ ret(0);\n-    return start;\n-  }\n+  return start;\n+}\n@@ -4243,7 +4205,24 @@\n-  address generate_upper_word_mask() {\n-    __ align64();\n-    StubCodeMark mark(this, \"StubRoutines\", \"upper_word_mask\");\n-    address start = __ pc();\n-    __ emit_data64(0x0000000000000000, relocInfo::none);\n-    __ emit_data64(0xFFFFFFFF00000000, relocInfo::none);\n-    return start;\n+\/\/ ofs and limit are use for multi-block byte array.\n+\/\/ int com.sun.security.provider.MD5.implCompress(byte[] b, int ofs)\n+address StubGenerator::generate_md5_implCompress(bool multi_block, const char *name) {\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", name);\n+  address start = __ pc();\n+\n+  const Register buf_param = r15;\n+  const Address state_param(rsp, 0 * wordSize);\n+  const Address ofs_param  (rsp, 1 * wordSize    );\n+  const Address limit_param(rsp, 1 * wordSize + 4);\n+\n+  __ enter();\n+  __ push(rbx);\n+  __ push(rdi);\n+  __ push(rsi);\n+  __ push(r15);\n+  __ subptr(rsp, 2 * wordSize);\n+\n+  __ movptr(buf_param, c_rarg0);\n+  __ movptr(state_param, c_rarg1);\n+  if (multi_block) {\n+    __ movl(ofs_param, c_rarg2);\n+    __ movl(limit_param, c_rarg3);\n@@ -4251,0 +4230,1 @@\n+  __ fast_md5(buf_param, state_param, ofs_param, limit_param, multi_block);\n@@ -4252,8 +4232,21 @@\n-  address generate_shuffle_byte_flip_mask() {\n-    __ align64();\n-    StubCodeMark mark(this, \"StubRoutines\", \"shuffle_byte_flip_mask\");\n-    address start = __ pc();\n-    __ emit_data64(0x08090a0b0c0d0e0f, relocInfo::none);\n-    __ emit_data64(0x0001020304050607, relocInfo::none);\n-    return start;\n-  }\n+  __ addptr(rsp, 2 * wordSize);\n+  __ pop(r15);\n+  __ pop(rsi);\n+  __ pop(rdi);\n+  __ pop(rbx);\n+  __ leave();\n+  __ ret(0);\n+\n+  return start;\n+}\n+\n+address StubGenerator::generate_upper_word_mask() {\n+  __ align64();\n+  StubCodeMark mark(this, \"StubRoutines\", \"upper_word_mask\");\n+  address start = __ pc();\n+\n+  __ emit_data64(0x0000000000000000, relocInfo::none);\n+  __ emit_data64(0xFFFFFFFF00000000, relocInfo::none);\n+\n+  return start;\n+}\n@@ -4261,6 +4254,4 @@\n-  \/\/ ofs and limit are use for multi-block byte array.\n-  \/\/ int com.sun.security.provider.DigestBase.implCompressMultiBlock(byte[] b, int ofs, int limit)\n-  address generate_sha1_implCompress(bool multi_block, const char *name) {\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", name);\n-    address start = __ pc();\n+address StubGenerator::generate_shuffle_byte_flip_mask() {\n+  __ align64();\n+  StubCodeMark mark(this, \"StubRoutines\", \"shuffle_byte_flip_mask\");\n+  address start = __ pc();\n@@ -4268,4 +4259,2 @@\n-    Register buf = c_rarg0;\n-    Register state = c_rarg1;\n-    Register ofs = c_rarg2;\n-    Register limit = c_rarg3;\n+  __ emit_data64(0x08090a0b0c0d0e0f, relocInfo::none);\n+  __ emit_data64(0x0001020304050607, relocInfo::none);\n@@ -4273,4 +4262,2 @@\n-    const XMMRegister abcd = xmm0;\n-    const XMMRegister e0 = xmm1;\n-    const XMMRegister e1 = xmm2;\n-    const XMMRegister msg0 = xmm3;\n+  return start;\n+}\n@@ -4278,4 +4265,6 @@\n-    const XMMRegister msg1 = xmm4;\n-    const XMMRegister msg2 = xmm5;\n-    const XMMRegister msg3 = xmm6;\n-    const XMMRegister shuf_mask = xmm7;\n+\/\/ ofs and limit are use for multi-block byte array.\n+\/\/ int com.sun.security.provider.DigestBase.implCompressMultiBlock(byte[] b, int ofs, int limit)\n+address StubGenerator::generate_sha1_implCompress(bool multi_block, const char *name) {\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", name);\n+  address start = __ pc();\n@@ -4283,1 +4272,4 @@\n-    __ enter();\n+  Register buf = c_rarg0;\n+  Register state = c_rarg1;\n+  Register ofs = c_rarg2;\n+  Register limit = c_rarg3;\n@@ -4285,1 +4277,4 @@\n-    __ subptr(rsp, 4 * wordSize);\n+  const XMMRegister abcd = xmm0;\n+  const XMMRegister e0 = xmm1;\n+  const XMMRegister e1 = xmm2;\n+  const XMMRegister msg0 = xmm3;\n@@ -4287,2 +4282,4 @@\n-    __ fast_sha1(abcd, e0, e1, msg0, msg1, msg2, msg3, shuf_mask,\n-      buf, state, ofs, limit, rsp, multi_block);\n+  const XMMRegister msg1 = xmm4;\n+  const XMMRegister msg2 = xmm5;\n+  const XMMRegister msg3 = xmm6;\n+  const XMMRegister shuf_mask = xmm7;\n@@ -4290,1 +4287,1 @@\n-    __ addptr(rsp, 4 * wordSize);\n+  __ enter();\n@@ -4292,4 +4289,1 @@\n-    __ leave();\n-    __ ret(0);\n-    return start;\n-  }\n+  __ subptr(rsp, 4 * wordSize);\n@@ -4297,6 +4291,2 @@\n-  address generate_pshuffle_byte_flip_mask() {\n-    __ align64();\n-    StubCodeMark mark(this, \"StubRoutines\", \"pshuffle_byte_flip_mask\");\n-    address start = __ pc();\n-    __ emit_data64(0x0405060700010203, relocInfo::none);\n-    __ emit_data64(0x0c0d0e0f08090a0b, relocInfo::none);\n+  __ fast_sha1(abcd, e0, e1, msg0, msg1, msg2, msg3, shuf_mask,\n+    buf, state, ofs, limit, rsp, multi_block);\n@@ -4304,14 +4294,15 @@\n-    if (VM_Version::supports_avx2()) {\n-      __ emit_data64(0x0405060700010203, relocInfo::none); \/\/ second copy\n-      __ emit_data64(0x0c0d0e0f08090a0b, relocInfo::none);\n-      \/\/ _SHUF_00BA\n-      __ emit_data64(0x0b0a090803020100, relocInfo::none);\n-      __ emit_data64(0xFFFFFFFFFFFFFFFF, relocInfo::none);\n-      __ emit_data64(0x0b0a090803020100, relocInfo::none);\n-      __ emit_data64(0xFFFFFFFFFFFFFFFF, relocInfo::none);\n-      \/\/ _SHUF_DC00\n-      __ emit_data64(0xFFFFFFFFFFFFFFFF, relocInfo::none);\n-      __ emit_data64(0x0b0a090803020100, relocInfo::none);\n-      __ emit_data64(0xFFFFFFFFFFFFFFFF, relocInfo::none);\n-      __ emit_data64(0x0b0a090803020100, relocInfo::none);\n-    }\n+  __ addptr(rsp, 4 * wordSize);\n+\n+  __ leave();\n+  __ ret(0);\n+\n+  return start;\n+}\n+\n+address StubGenerator::generate_pshuffle_byte_flip_mask() {\n+  __ align64();\n+  StubCodeMark mark(this, \"StubRoutines\", \"pshuffle_byte_flip_mask\");\n+  address start = __ pc();\n+\n+  __ emit_data64(0x0405060700010203, relocInfo::none);\n+  __ emit_data64(0x0c0d0e0f08090a0b, relocInfo::none);\n@@ -4319,1 +4310,13 @@\n-    return start;\n+  if (VM_Version::supports_avx2()) {\n+    __ emit_data64(0x0405060700010203, relocInfo::none); \/\/ second copy\n+    __ emit_data64(0x0c0d0e0f08090a0b, relocInfo::none);\n+    \/\/ _SHUF_00BA\n+    __ emit_data64(0x0b0a090803020100, relocInfo::none);\n+    __ emit_data64(0xFFFFFFFFFFFFFFFF, relocInfo::none);\n+    __ emit_data64(0x0b0a090803020100, relocInfo::none);\n+    __ emit_data64(0xFFFFFFFFFFFFFFFF, relocInfo::none);\n+    \/\/ _SHUF_DC00\n+    __ emit_data64(0xFFFFFFFFFFFFFFFF, relocInfo::none);\n+    __ emit_data64(0x0b0a090803020100, relocInfo::none);\n+    __ emit_data64(0xFFFFFFFFFFFFFFFF, relocInfo::none);\n+    __ emit_data64(0x0b0a090803020100, relocInfo::none);\n@@ -4322,15 +4325,8 @@\n-  \/\/Mask for byte-swapping a couple of qwords in an XMM register using (v)pshufb.\n-  address generate_pshuffle_byte_flip_mask_sha512() {\n-    __ align32();\n-    StubCodeMark mark(this, \"StubRoutines\", \"pshuffle_byte_flip_mask_sha512\");\n-    address start = __ pc();\n-    if (VM_Version::supports_avx2()) {\n-      __ emit_data64(0x0001020304050607, relocInfo::none); \/\/ PSHUFFLE_BYTE_FLIP_MASK\n-      __ emit_data64(0x08090a0b0c0d0e0f, relocInfo::none);\n-      __ emit_data64(0x1011121314151617, relocInfo::none);\n-      __ emit_data64(0x18191a1b1c1d1e1f, relocInfo::none);\n-      __ emit_data64(0x0000000000000000, relocInfo::none); \/\/MASK_YMM_LO\n-      __ emit_data64(0x0000000000000000, relocInfo::none);\n-      __ emit_data64(0xFFFFFFFFFFFFFFFF, relocInfo::none);\n-      __ emit_data64(0xFFFFFFFFFFFFFFFF, relocInfo::none);\n-    }\n+  return start;\n+}\n+\n+\/\/Mask for byte-swapping a couple of qwords in an XMM register using (v)pshufb.\n+address StubGenerator::generate_pshuffle_byte_flip_mask_sha512() {\n+  __ align32();\n+  StubCodeMark mark(this, \"StubRoutines\", \"pshuffle_byte_flip_mask_sha512\");\n+  address start = __ pc();\n@@ -4338,1 +4334,9 @@\n-    return start;\n+  if (VM_Version::supports_avx2()) {\n+    __ emit_data64(0x0001020304050607, relocInfo::none); \/\/ PSHUFFLE_BYTE_FLIP_MASK\n+    __ emit_data64(0x08090a0b0c0d0e0f, relocInfo::none);\n+    __ emit_data64(0x1011121314151617, relocInfo::none);\n+    __ emit_data64(0x18191a1b1c1d1e1f, relocInfo::none);\n+    __ emit_data64(0x0000000000000000, relocInfo::none); \/\/MASK_YMM_LO\n+    __ emit_data64(0x0000000000000000, relocInfo::none);\n+    __ emit_data64(0xFFFFFFFFFFFFFFFF, relocInfo::none);\n+    __ emit_data64(0xFFFFFFFFFFFFFFFF, relocInfo::none);\n@@ -4341,0 +4345,3 @@\n+  return start;\n+}\n+\n@@ -4343,39 +4350,33 @@\n-  address generate_sha256_implCompress(bool multi_block, const char *name) {\n-    assert(VM_Version::supports_sha() || VM_Version::supports_avx2(), \"\");\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", name);\n-    address start = __ pc();\n-\n-    Register buf = c_rarg0;\n-    Register state = c_rarg1;\n-    Register ofs = c_rarg2;\n-    Register limit = c_rarg3;\n-\n-    const XMMRegister msg = xmm0;\n-    const XMMRegister state0 = xmm1;\n-    const XMMRegister state1 = xmm2;\n-    const XMMRegister msgtmp0 = xmm3;\n-\n-    const XMMRegister msgtmp1 = xmm4;\n-    const XMMRegister msgtmp2 = xmm5;\n-    const XMMRegister msgtmp3 = xmm6;\n-    const XMMRegister msgtmp4 = xmm7;\n-\n-    const XMMRegister shuf_mask = xmm8;\n-\n-    __ enter();\n-\n-    __ subptr(rsp, 4 * wordSize);\n-\n-    if (VM_Version::supports_sha()) {\n-      __ fast_sha256(msg, state0, state1, msgtmp0, msgtmp1, msgtmp2, msgtmp3, msgtmp4,\n-        buf, state, ofs, limit, rsp, multi_block, shuf_mask);\n-    } else if (VM_Version::supports_avx2()) {\n-      __ sha256_AVX2(msg, state0, state1, msgtmp0, msgtmp1, msgtmp2, msgtmp3, msgtmp4,\n-        buf, state, ofs, limit, rsp, multi_block, shuf_mask);\n-    }\n-    __ addptr(rsp, 4 * wordSize);\n-    __ vzeroupper();\n-    __ leave();\n-    __ ret(0);\n-    return start;\n+address StubGenerator::generate_sha256_implCompress(bool multi_block, const char *name) {\n+  assert(VM_Version::supports_sha() || VM_Version::supports_avx2(), \"\");\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", name);\n+  address start = __ pc();\n+\n+  Register buf = c_rarg0;\n+  Register state = c_rarg1;\n+  Register ofs = c_rarg2;\n+  Register limit = c_rarg3;\n+\n+  const XMMRegister msg = xmm0;\n+  const XMMRegister state0 = xmm1;\n+  const XMMRegister state1 = xmm2;\n+  const XMMRegister msgtmp0 = xmm3;\n+\n+  const XMMRegister msgtmp1 = xmm4;\n+  const XMMRegister msgtmp2 = xmm5;\n+  const XMMRegister msgtmp3 = xmm6;\n+  const XMMRegister msgtmp4 = xmm7;\n+\n+  const XMMRegister shuf_mask = xmm8;\n+\n+  __ enter();\n+\n+  __ subptr(rsp, 4 * wordSize);\n+\n+  if (VM_Version::supports_sha()) {\n+    __ fast_sha256(msg, state0, state1, msgtmp0, msgtmp1, msgtmp2, msgtmp3, msgtmp4,\n+      buf, state, ofs, limit, rsp, multi_block, shuf_mask);\n+  } else if (VM_Version::supports_avx2()) {\n+    __ sha256_AVX2(msg, state0, state1, msgtmp0, msgtmp1, msgtmp2, msgtmp3, msgtmp4,\n+      buf, state, ofs, limit, rsp, multi_block, shuf_mask);\n@@ -4383,0 +4384,7 @@\n+  __ addptr(rsp, 4 * wordSize);\n+  __ vzeroupper();\n+  __ leave();\n+  __ ret(0);\n+\n+  return start;\n+}\n@@ -4384,6 +4392,6 @@\n-  address generate_sha512_implCompress(bool multi_block, const char *name) {\n-    assert(VM_Version::supports_avx2(), \"\");\n-    assert(VM_Version::supports_bmi2(), \"\");\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", name);\n-    address start = __ pc();\n+address StubGenerator::generate_sha512_implCompress(bool multi_block, const char *name) {\n+  assert(VM_Version::supports_avx2(), \"\");\n+  assert(VM_Version::supports_bmi2(), \"\");\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", name);\n+  address start = __ pc();\n@@ -4391,4 +4399,4 @@\n-    Register buf = c_rarg0;\n-    Register state = c_rarg1;\n-    Register ofs = c_rarg2;\n-    Register limit = c_rarg3;\n+  Register buf = c_rarg0;\n+  Register state = c_rarg1;\n+  Register ofs = c_rarg2;\n+  Register limit = c_rarg3;\n@@ -4396,8 +4404,8 @@\n-    const XMMRegister msg = xmm0;\n-    const XMMRegister state0 = xmm1;\n-    const XMMRegister state1 = xmm2;\n-    const XMMRegister msgtmp0 = xmm3;\n-    const XMMRegister msgtmp1 = xmm4;\n-    const XMMRegister msgtmp2 = xmm5;\n-    const XMMRegister msgtmp3 = xmm6;\n-    const XMMRegister msgtmp4 = xmm7;\n+  const XMMRegister msg = xmm0;\n+  const XMMRegister state0 = xmm1;\n+  const XMMRegister state1 = xmm2;\n+  const XMMRegister msgtmp0 = xmm3;\n+  const XMMRegister msgtmp1 = xmm4;\n+  const XMMRegister msgtmp2 = xmm5;\n+  const XMMRegister msgtmp3 = xmm6;\n+  const XMMRegister msgtmp4 = xmm7;\n@@ -4405,1 +4413,1 @@\n-    const XMMRegister shuf_mask = xmm8;\n+  const XMMRegister shuf_mask = xmm8;\n@@ -4407,1 +4415,1 @@\n-    __ enter();\n+  __ enter();\n@@ -4409,2 +4417,2 @@\n-    __ sha512_AVX2(msg, state0, state1, msgtmp0, msgtmp1, msgtmp2, msgtmp3, msgtmp4,\n-    buf, state, ofs, limit, rsp, multi_block, shuf_mask);\n+  __ sha512_AVX2(msg, state0, state1, msgtmp0, msgtmp1, msgtmp2, msgtmp3, msgtmp4,\n+  buf, state, ofs, limit, rsp, multi_block, shuf_mask);\n@@ -4412,23 +4420,26 @@\n-    __ vzeroupper();\n-    __ leave();\n-    __ ret(0);\n-    return start;\n-  }\n-\n-  address ghash_polynomial512_addr() {\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", \"_ghash_poly512_addr\");\n-    address start = __ pc();\n-    __ emit_data64(0x00000001C2000000, relocInfo::none); \/\/ POLY for reduction\n-    __ emit_data64(0xC200000000000000, relocInfo::none);\n-    __ emit_data64(0x00000001C2000000, relocInfo::none);\n-    __ emit_data64(0xC200000000000000, relocInfo::none);\n-    __ emit_data64(0x00000001C2000000, relocInfo::none);\n-    __ emit_data64(0xC200000000000000, relocInfo::none);\n-    __ emit_data64(0x00000001C2000000, relocInfo::none);\n-    __ emit_data64(0xC200000000000000, relocInfo::none);\n-    __ emit_data64(0x0000000000000001, relocInfo::none); \/\/ POLY\n-    __ emit_data64(0xC200000000000000, relocInfo::none);\n-    __ emit_data64(0x0000000000000001, relocInfo::none); \/\/ TWOONE\n-    __ emit_data64(0x0000000100000000, relocInfo::none);\n-    return start;\n+  __ vzeroupper();\n+  __ leave();\n+  __ ret(0);\n+\n+  return start;\n+}\n+\n+address StubGenerator::ghash_polynomial512_addr() {\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", \"_ghash_poly512_addr\");\n+  address start = __ pc();\n+\n+  __ emit_data64(0x00000001C2000000, relocInfo::none); \/\/ POLY for reduction\n+  __ emit_data64(0xC200000000000000, relocInfo::none);\n+  __ emit_data64(0x00000001C2000000, relocInfo::none);\n+  __ emit_data64(0xC200000000000000, relocInfo::none);\n+  __ emit_data64(0x00000001C2000000, relocInfo::none);\n+  __ emit_data64(0xC200000000000000, relocInfo::none);\n+  __ emit_data64(0x00000001C2000000, relocInfo::none);\n+  __ emit_data64(0xC200000000000000, relocInfo::none);\n+  __ emit_data64(0x0000000000000001, relocInfo::none); \/\/ POLY\n+  __ emit_data64(0xC200000000000000, relocInfo::none);\n+  __ emit_data64(0x0000000000000001, relocInfo::none); \/\/ TWOONE\n+  __ emit_data64(0x0000000100000000, relocInfo::none);\n+\n+  return start;\n@@ -4437,20 +4448,24 @@\n-  \/\/ Vector AES Galois Counter Mode implementation. Parameters:\n-  \/\/ Windows regs            |  Linux regs\n-  \/\/ in = c_rarg0 (rcx)      |  c_rarg0 (rsi)\n-  \/\/ len = c_rarg1 (rdx)     |  c_rarg1 (rdi)\n-  \/\/ ct = c_rarg2 (r8)       |  c_rarg2 (rdx)\n-  \/\/ out = c_rarg3 (r9)      |  c_rarg3 (rcx)\n-  \/\/ key = r10               |  c_rarg4 (r8)\n-  \/\/ state = r13             |  c_rarg5 (r9)\n-  \/\/ subkeyHtbl = r14        |  r11\n-  \/\/ counter = rsi           |  r12\n-  \/\/ return - number of processed bytes\n-  address generate_galoisCounterMode_AESCrypt() {\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", \"galoisCounterMode_AESCrypt\");\n-    address start = __ pc();\n-    const Register in = c_rarg0;\n-    const Register len = c_rarg1;\n-    const Register ct = c_rarg2;\n-    const Register out = c_rarg3;\n-    \/\/ and updated with the incremented counter in the end\n+\/\/ Vector AES Galois Counter Mode implementation.\n+\/\/\n+\/\/ Inputs:           Windows    |   Linux\n+\/\/   in         = rcx (c_rarg0) | rsi (c_rarg0)\n+\/\/   len        = rdx (c_rarg1) | rdi (c_rarg1)\n+\/\/   ct         = r8  (c_rarg2) | rdx (c_rarg2)\n+\/\/   out        = r9  (c_rarg3) | rcx (c_rarg3)\n+\/\/   key        = r10           | r8  (c_rarg4)\n+\/\/   state      = r13           | r9  (c_rarg5)\n+\/\/   subkeyHtbl = r14           | r11\n+\/\/   counter    = rsi           | r12\n+\/\/\n+\/\/ Output:\n+\/\/   rax - number of processed bytes\n+address StubGenerator::generate_galoisCounterMode_AESCrypt() {\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", \"galoisCounterMode_AESCrypt\");\n+  address start = __ pc();\n+\n+  const Register in = c_rarg0;\n+  const Register len = c_rarg1;\n+  const Register ct = c_rarg2;\n+  const Register out = c_rarg3;\n+  \/\/ and updated with the incremented counter in the end\n@@ -4458,7 +4473,7 @@\n-    const Register key = c_rarg4;\n-    const Register state = c_rarg5;\n-    const Address subkeyH_mem(rbp, 2 * wordSize);\n-    const Register subkeyHtbl = r11;\n-    const Register avx512_subkeyHtbl = r13;\n-    const Address counter_mem(rbp, 3 * wordSize);\n-    const Register counter = r12;\n+  const Register key = c_rarg4;\n+  const Register state = c_rarg5;\n+  const Address subkeyH_mem(rbp, 2 * wordSize);\n+  const Register subkeyHtbl = r11;\n+  const Register avx512_subkeyHtbl = r13;\n+  const Address counter_mem(rbp, 3 * wordSize);\n+  const Register counter = r12;\n@@ -4466,9 +4481,9 @@\n-    const Address key_mem(rbp, 6 * wordSize);\n-    const Register key = r10;\n-    const Address state_mem(rbp, 7 * wordSize);\n-    const Register state = r13;\n-    const Address subkeyH_mem(rbp, 8 * wordSize);\n-    const Register subkeyHtbl = r14;\n-    const Register avx512_subkeyHtbl = r12;\n-    const Address counter_mem(rbp, 9 * wordSize);\n-    const Register counter = rsi;\n+  const Address key_mem(rbp, 6 * wordSize);\n+  const Register key = r10;\n+  const Address state_mem(rbp, 7 * wordSize);\n+  const Register state = r13;\n+  const Address subkeyH_mem(rbp, 8 * wordSize);\n+  const Register subkeyHtbl = r14;\n+  const Register avx512_subkeyHtbl = r12;\n+  const Address counter_mem(rbp, 9 * wordSize);\n+  const Register counter = rsi;\n@@ -4476,7 +4491,7 @@\n-    __ enter();\n-   \/\/ Save state before entering routine\n-    __ push(r12);\n-    __ push(r13);\n-    __ push(r14);\n-    __ push(r15);\n-    __ push(rbx);\n+  __ enter();\n+ \/\/ Save state before entering routine\n+  __ push(r12);\n+  __ push(r13);\n+  __ push(r14);\n+  __ push(r15);\n+  __ push(rbx);\n@@ -4484,4 +4499,4 @@\n-    \/\/ on win64, fill len_reg from stack position\n-    __ push(rsi);\n-    __ movptr(key, key_mem);\n-    __ movptr(state, state_mem);\n+  \/\/ on win64, fill len_reg from stack position\n+  __ push(rsi);\n+  __ movptr(key, key_mem);\n+  __ movptr(state, state_mem);\n@@ -4489,2 +4504,2 @@\n-    __ movptr(subkeyHtbl, subkeyH_mem);\n-    __ movptr(counter, counter_mem);\n+  __ movptr(subkeyHtbl, subkeyH_mem);\n+  __ movptr(counter, counter_mem);\n@@ -4492,2 +4507,2 @@\n-    __ push(rbp);\n-    __ movq(rbp, rsp);\n+  __ push(rbp);\n+  __ movq(rbp, rsp);\n@@ -4495,3 +4510,3 @@\n-    __ andq(rsp, -64);\n-    __ subptr(rsp, 96 * longSize); \/\/ Create space on the stack for htbl entries\n-    __ movptr(avx512_subkeyHtbl, rsp);\n+  __ andq(rsp, -64);\n+  __ subptr(rsp, 96 * longSize); \/\/ Create space on the stack for htbl entries\n+  __ movptr(avx512_subkeyHtbl, rsp);\n@@ -4499,2 +4514,2 @@\n-    __ aesgcm_encrypt(in, len, ct, out, key, state, subkeyHtbl, avx512_subkeyHtbl, counter);\n-    __ vzeroupper();\n+  __ aesgcm_encrypt(in, len, ct, out, key, state, subkeyHtbl, avx512_subkeyHtbl, counter);\n+  __ vzeroupper();\n@@ -4502,2 +4517,2 @@\n-    __ movq(rsp, rbp);\n-    __ pop(rbp);\n+  __ movq(rsp, rbp);\n+  __ pop(rbp);\n@@ -4505,1 +4520,1 @@\n-    \/\/ Restore state before leaving routine\n+  \/\/ Restore state before leaving routine\n@@ -4507,1 +4522,1 @@\n-    __ pop(rsi);\n+  __ pop(rsi);\n@@ -4509,5 +4524,5 @@\n-    __ pop(rbx);\n-    __ pop(r15);\n-    __ pop(r14);\n-    __ pop(r13);\n-    __ pop(r12);\n+  __ pop(rbx);\n+  __ pop(r15);\n+  __ pop(r14);\n+  __ pop(r13);\n+  __ pop(r12);\n@@ -4515,4 +4530,2 @@\n-    __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    __ ret(0);\n-     return start;\n-  }\n+  __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ ret(0);\n@@ -4520,55 +4533,60 @@\n-  \/\/ This mask is used for incrementing counter value(linc0, linc4, etc.)\n-  address counter_mask_addr() {\n-    __ align64();\n-    StubCodeMark mark(this, \"StubRoutines\", \"counter_mask_addr\");\n-    address start = __ pc();\n-    __ emit_data64(0x08090a0b0c0d0e0f, relocInfo::none);\/\/lbswapmask\n-    __ emit_data64(0x0001020304050607, relocInfo::none);\n-    __ emit_data64(0x08090a0b0c0d0e0f, relocInfo::none);\n-    __ emit_data64(0x0001020304050607, relocInfo::none);\n-    __ emit_data64(0x08090a0b0c0d0e0f, relocInfo::none);\n-    __ emit_data64(0x0001020304050607, relocInfo::none);\n-    __ emit_data64(0x08090a0b0c0d0e0f, relocInfo::none);\n-    __ emit_data64(0x0001020304050607, relocInfo::none);\n-    __ emit_data64(0x0000000000000000, relocInfo::none);\/\/linc0 = counter_mask_addr+64\n-    __ emit_data64(0x0000000000000000, relocInfo::none);\n-    __ emit_data64(0x0000000000000001, relocInfo::none);\/\/counter_mask_addr() + 80\n-    __ emit_data64(0x0000000000000000, relocInfo::none);\n-    __ emit_data64(0x0000000000000002, relocInfo::none);\n-    __ emit_data64(0x0000000000000000, relocInfo::none);\n-    __ emit_data64(0x0000000000000003, relocInfo::none);\n-    __ emit_data64(0x0000000000000000, relocInfo::none);\n-    __ emit_data64(0x0000000000000004, relocInfo::none);\/\/linc4 = counter_mask_addr() + 128\n-    __ emit_data64(0x0000000000000000, relocInfo::none);\n-    __ emit_data64(0x0000000000000004, relocInfo::none);\n-    __ emit_data64(0x0000000000000000, relocInfo::none);\n-    __ emit_data64(0x0000000000000004, relocInfo::none);\n-    __ emit_data64(0x0000000000000000, relocInfo::none);\n-    __ emit_data64(0x0000000000000004, relocInfo::none);\n-    __ emit_data64(0x0000000000000000, relocInfo::none);\n-    __ emit_data64(0x0000000000000008, relocInfo::none);\/\/linc8 = counter_mask_addr() + 192\n-    __ emit_data64(0x0000000000000000, relocInfo::none);\n-    __ emit_data64(0x0000000000000008, relocInfo::none);\n-    __ emit_data64(0x0000000000000000, relocInfo::none);\n-    __ emit_data64(0x0000000000000008, relocInfo::none);\n-    __ emit_data64(0x0000000000000000, relocInfo::none);\n-    __ emit_data64(0x0000000000000008, relocInfo::none);\n-    __ emit_data64(0x0000000000000000, relocInfo::none);\n-    __ emit_data64(0x0000000000000020, relocInfo::none);\/\/linc32 = counter_mask_addr() + 256\n-    __ emit_data64(0x0000000000000000, relocInfo::none);\n-    __ emit_data64(0x0000000000000020, relocInfo::none);\n-    __ emit_data64(0x0000000000000000, relocInfo::none);\n-    __ emit_data64(0x0000000000000020, relocInfo::none);\n-    __ emit_data64(0x0000000000000000, relocInfo::none);\n-    __ emit_data64(0x0000000000000020, relocInfo::none);\n-    __ emit_data64(0x0000000000000000, relocInfo::none);\n-    __ emit_data64(0x0000000000000010, relocInfo::none);\/\/linc16 = counter_mask_addr() + 320\n-    __ emit_data64(0x0000000000000000, relocInfo::none);\n-    __ emit_data64(0x0000000000000010, relocInfo::none);\n-    __ emit_data64(0x0000000000000000, relocInfo::none);\n-    __ emit_data64(0x0000000000000010, relocInfo::none);\n-    __ emit_data64(0x0000000000000000, relocInfo::none);\n-    __ emit_data64(0x0000000000000010, relocInfo::none);\n-    __ emit_data64(0x0000000000000000, relocInfo::none);\n-    return start;\n-  }\n+  return start;\n+}\n+\n+\/\/ This mask is used for incrementing counter value(linc0, linc4, etc.)\n+address StubGenerator::counter_mask_addr() {\n+  __ align64();\n+  StubCodeMark mark(this, \"StubRoutines\", \"counter_mask_addr\");\n+  address start = __ pc();\n+\n+  __ emit_data64(0x08090a0b0c0d0e0f, relocInfo::none);\/\/lbswapmask\n+  __ emit_data64(0x0001020304050607, relocInfo::none);\n+  __ emit_data64(0x08090a0b0c0d0e0f, relocInfo::none);\n+  __ emit_data64(0x0001020304050607, relocInfo::none);\n+  __ emit_data64(0x08090a0b0c0d0e0f, relocInfo::none);\n+  __ emit_data64(0x0001020304050607, relocInfo::none);\n+  __ emit_data64(0x08090a0b0c0d0e0f, relocInfo::none);\n+  __ emit_data64(0x0001020304050607, relocInfo::none);\n+  __ emit_data64(0x0000000000000000, relocInfo::none);\/\/linc0 = counter_mask_addr+64\n+  __ emit_data64(0x0000000000000000, relocInfo::none);\n+  __ emit_data64(0x0000000000000001, relocInfo::none);\/\/counter_mask_addr() + 80\n+  __ emit_data64(0x0000000000000000, relocInfo::none);\n+  __ emit_data64(0x0000000000000002, relocInfo::none);\n+  __ emit_data64(0x0000000000000000, relocInfo::none);\n+  __ emit_data64(0x0000000000000003, relocInfo::none);\n+  __ emit_data64(0x0000000000000000, relocInfo::none);\n+  __ emit_data64(0x0000000000000004, relocInfo::none);\/\/linc4 = counter_mask_addr() + 128\n+  __ emit_data64(0x0000000000000000, relocInfo::none);\n+  __ emit_data64(0x0000000000000004, relocInfo::none);\n+  __ emit_data64(0x0000000000000000, relocInfo::none);\n+  __ emit_data64(0x0000000000000004, relocInfo::none);\n+  __ emit_data64(0x0000000000000000, relocInfo::none);\n+  __ emit_data64(0x0000000000000004, relocInfo::none);\n+  __ emit_data64(0x0000000000000000, relocInfo::none);\n+  __ emit_data64(0x0000000000000008, relocInfo::none);\/\/linc8 = counter_mask_addr() + 192\n+  __ emit_data64(0x0000000000000000, relocInfo::none);\n+  __ emit_data64(0x0000000000000008, relocInfo::none);\n+  __ emit_data64(0x0000000000000000, relocInfo::none);\n+  __ emit_data64(0x0000000000000008, relocInfo::none);\n+  __ emit_data64(0x0000000000000000, relocInfo::none);\n+  __ emit_data64(0x0000000000000008, relocInfo::none);\n+  __ emit_data64(0x0000000000000000, relocInfo::none);\n+  __ emit_data64(0x0000000000000020, relocInfo::none);\/\/linc32 = counter_mask_addr() + 256\n+  __ emit_data64(0x0000000000000000, relocInfo::none);\n+  __ emit_data64(0x0000000000000020, relocInfo::none);\n+  __ emit_data64(0x0000000000000000, relocInfo::none);\n+  __ emit_data64(0x0000000000000020, relocInfo::none);\n+  __ emit_data64(0x0000000000000000, relocInfo::none);\n+  __ emit_data64(0x0000000000000020, relocInfo::none);\n+  __ emit_data64(0x0000000000000000, relocInfo::none);\n+  __ emit_data64(0x0000000000000010, relocInfo::none);\/\/linc16 = counter_mask_addr() + 320\n+  __ emit_data64(0x0000000000000000, relocInfo::none);\n+  __ emit_data64(0x0000000000000010, relocInfo::none);\n+  __ emit_data64(0x0000000000000000, relocInfo::none);\n+  __ emit_data64(0x0000000000000010, relocInfo::none);\n+  __ emit_data64(0x0000000000000000, relocInfo::none);\n+  __ emit_data64(0x0000000000000010, relocInfo::none);\n+  __ emit_data64(0x0000000000000000, relocInfo::none);\n+\n+  return start;\n+}\n@@ -4577,9 +4595,10 @@\n-  address generate_counterMode_VectorAESCrypt()  {\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", \"counterMode_AESCrypt\");\n-    address start = __ pc();\n-    const Register from = c_rarg0; \/\/ source array address\n-    const Register to = c_rarg1; \/\/ destination array address\n-    const Register key = c_rarg2; \/\/ key array address r8\n-    const Register counter = c_rarg3; \/\/ counter byte array initialized from counter array address\n-    \/\/ and updated with the incremented counter in the end\n+address StubGenerator::generate_counterMode_VectorAESCrypt()  {\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", \"counterMode_AESCrypt\");\n+  address start = __ pc();\n+\n+  const Register from = c_rarg0; \/\/ source array address\n+  const Register to = c_rarg1; \/\/ destination array address\n+  const Register key = c_rarg2; \/\/ key array address r8\n+  const Register counter = c_rarg3; \/\/ counter byte array initialized from counter array address\n+  \/\/ and updated with the incremented counter in the end\n@@ -4587,5 +4606,5 @@\n-    const Register len_reg = c_rarg4;\n-    const Register saved_encCounter_start = c_rarg5;\n-    const Register used_addr = r10;\n-    const Address  used_mem(rbp, 2 * wordSize);\n-    const Register used = r11;\n+  const Register len_reg = c_rarg4;\n+  const Register saved_encCounter_start = c_rarg5;\n+  const Register used_addr = r10;\n+  const Address  used_mem(rbp, 2 * wordSize);\n+  const Register used = r11;\n@@ -4593,7 +4612,7 @@\n-    const Address len_mem(rbp, 6 * wordSize); \/\/ length is on stack on Win64\n-    const Address saved_encCounter_mem(rbp, 7 * wordSize); \/\/ saved encrypted counter is on stack on Win64\n-    const Address used_mem(rbp, 8 * wordSize); \/\/ used length is on stack on Win64\n-    const Register len_reg = r10; \/\/ pick the first volatile windows register\n-    const Register saved_encCounter_start = r11;\n-    const Register used_addr = r13;\n-    const Register used = r14;\n+  const Address len_mem(rbp, 6 * wordSize); \/\/ length is on stack on Win64\n+  const Address saved_encCounter_mem(rbp, 7 * wordSize); \/\/ saved encrypted counter is on stack on Win64\n+  const Address used_mem(rbp, 8 * wordSize); \/\/ used length is on stack on Win64\n+  const Register len_reg = r10; \/\/ pick the first volatile windows register\n+  const Register saved_encCounter_start = r11;\n+  const Register used_addr = r13;\n+  const Register used = r14;\n@@ -4601,6 +4620,6 @@\n-    __ enter();\n-   \/\/ Save state before entering routine\n-    __ push(r12);\n-    __ push(r13);\n-    __ push(r14);\n-    __ push(r15);\n+  __ enter();\n+ \/\/ Save state before entering routine\n+  __ push(r12);\n+  __ push(r13);\n+  __ push(r14);\n+  __ push(r15);\n@@ -4608,5 +4627,5 @@\n-    \/\/ on win64, fill len_reg from stack position\n-    __ movl(len_reg, len_mem);\n-    __ movptr(saved_encCounter_start, saved_encCounter_mem);\n-    __ movptr(used_addr, used_mem);\n-    __ movl(used, Address(used_addr, 0));\n+  \/\/ on win64, fill len_reg from stack position\n+  __ movl(len_reg, len_mem);\n+  __ movptr(saved_encCounter_start, saved_encCounter_mem);\n+  __ movptr(used_addr, used_mem);\n+  __ movl(used, Address(used_addr, 0));\n@@ -4614,3 +4633,3 @@\n-    __ push(len_reg); \/\/ Save\n-    __ movptr(used_addr, used_mem);\n-    __ movl(used, Address(used_addr, 0));\n+  __ push(len_reg); \/\/ Save\n+  __ movptr(used_addr, used_mem);\n+  __ movl(used, Address(used_addr, 0));\n@@ -4618,5 +4637,5 @@\n-    __ push(rbx);\n-    __ aesctr_encrypt(from, to, key, counter, len_reg, used, used_addr, saved_encCounter_start);\n-    __ vzeroupper();\n-    \/\/ Restore state before leaving routine\n-    __ pop(rbx);\n+  __ push(rbx);\n+  __ aesctr_encrypt(from, to, key, counter, len_reg, used, used_addr, saved_encCounter_start);\n+  __ vzeroupper();\n+  \/\/ Restore state before leaving routine\n+  __ pop(rbx);\n@@ -4624,1 +4643,1 @@\n-    __ movl(rax, len_mem); \/\/ return length\n+  __ movl(rax, len_mem); \/\/ return length\n@@ -4626,1 +4645,1 @@\n-    __ pop(rax); \/\/ return length\n+  __ pop(rax); \/\/ return length\n@@ -4628,4 +4647,4 @@\n-    __ pop(r15);\n-    __ pop(r14);\n-    __ pop(r13);\n-    __ pop(r12);\n+  __ pop(r15);\n+  __ pop(r14);\n+  __ pop(r13);\n+  __ pop(r12);\n@@ -4633,4 +4652,2 @@\n-    __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    __ ret(0);\n-    return start;\n-  }\n+  __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ ret(0);\n@@ -4638,32 +4655,36 @@\n-  \/\/ This is a version of CTR\/AES crypt which does 6 blocks in a loop at a time\n-  \/\/ to hide instruction latency\n-  \/\/\n-  \/\/ Arguments:\n-  \/\/\n-  \/\/ Inputs:\n-  \/\/   c_rarg0   - source byte array address\n-  \/\/   c_rarg1   - destination byte array address\n-  \/\/   c_rarg2   - K (key) in little endian int array\n-  \/\/   c_rarg3   - counter vector byte array address\n-  \/\/   Linux\n-  \/\/     c_rarg4   -          input length\n-  \/\/     c_rarg5   -          saved encryptedCounter start\n-  \/\/     rbp + 6 * wordSize - saved used length\n-  \/\/   Windows\n-  \/\/     rbp + 6 * wordSize - input length\n-  \/\/     rbp + 7 * wordSize - saved encryptedCounter start\n-  \/\/     rbp + 8 * wordSize - saved used length\n-  \/\/\n-  \/\/ Output:\n-  \/\/   rax       - input length\n-  \/\/\n-  address generate_counterMode_AESCrypt_Parallel() {\n-    assert(UseAES, \"need AES instructions and misaligned SSE support\");\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", \"counterMode_AESCrypt\");\n-    address start = __ pc();\n-    const Register from = c_rarg0; \/\/ source array address\n-    const Register to = c_rarg1; \/\/ destination array address\n-    const Register key = c_rarg2; \/\/ key array address\n-    const Register counter = c_rarg3; \/\/ counter byte array initialized from counter array address\n-                                      \/\/ and updated with the incremented counter in the end\n+  return start;\n+}\n+\n+\/\/ This is a version of CTR\/AES crypt which does 6 blocks in a loop at a time\n+\/\/ to hide instruction latency\n+\/\/\n+\/\/ Arguments:\n+\/\/\n+\/\/ Inputs:\n+\/\/   c_rarg0   - source byte array address\n+\/\/   c_rarg1   - destination byte array address\n+\/\/   c_rarg2   - K (key) in little endian int array\n+\/\/   c_rarg3   - counter vector byte array address\n+\/\/   Linux\n+\/\/     c_rarg4   -          input length\n+\/\/     c_rarg5   -          saved encryptedCounter start\n+\/\/     rbp + 6 * wordSize - saved used length\n+\/\/   Windows\n+\/\/     rbp + 6 * wordSize - input length\n+\/\/     rbp + 7 * wordSize - saved encryptedCounter start\n+\/\/     rbp + 8 * wordSize - saved used length\n+\/\/\n+\/\/ Output:\n+\/\/   rax       - input length\n+\/\/\n+address StubGenerator::generate_counterMode_AESCrypt_Parallel() {\n+  assert(UseAES, \"need AES instructions and misaligned SSE support\");\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", \"counterMode_AESCrypt\");\n+  address start = __ pc();\n+\n+  const Register from = c_rarg0; \/\/ source array address\n+  const Register to = c_rarg1; \/\/ destination array address\n+  const Register key = c_rarg2; \/\/ key array address\n+  const Register counter = c_rarg3; \/\/ counter byte array initialized from counter array address\n+                                    \/\/ and updated with the incremented counter in the end\n@@ -4671,5 +4692,5 @@\n-    const Register len_reg = c_rarg4;\n-    const Register saved_encCounter_start = c_rarg5;\n-    const Register used_addr = r10;\n-    const Address  used_mem(rbp, 2 * wordSize);\n-    const Register used = r11;\n+  const Register len_reg = c_rarg4;\n+  const Register saved_encCounter_start = c_rarg5;\n+  const Register used_addr = r10;\n+  const Address  used_mem(rbp, 2 * wordSize);\n+  const Register used = r11;\n@@ -4677,7 +4698,7 @@\n-    const Address len_mem(rbp, 6 * wordSize); \/\/ length is on stack on Win64\n-    const Address saved_encCounter_mem(rbp, 7 * wordSize); \/\/ length is on stack on Win64\n-    const Address used_mem(rbp, 8 * wordSize); \/\/ length is on stack on Win64\n-    const Register len_reg = r10; \/\/ pick the first volatile windows register\n-    const Register saved_encCounter_start = r11;\n-    const Register used_addr = r13;\n-    const Register used = r14;\n+  const Address len_mem(rbp, 6 * wordSize); \/\/ length is on stack on Win64\n+  const Address saved_encCounter_mem(rbp, 7 * wordSize); \/\/ length is on stack on Win64\n+  const Address used_mem(rbp, 8 * wordSize); \/\/ length is on stack on Win64\n+  const Register len_reg = r10; \/\/ pick the first volatile windows register\n+  const Register saved_encCounter_start = r11;\n+  const Register used_addr = r13;\n+  const Register used = r14;\n@@ -4685,38 +4706,38 @@\n-    const Register pos = rax;\n-\n-    const int PARALLEL_FACTOR = 6;\n-    const XMMRegister xmm_counter_shuf_mask = xmm0;\n-    const XMMRegister xmm_key_shuf_mask = xmm1; \/\/ used temporarily to swap key bytes up front\n-    const XMMRegister xmm_curr_counter = xmm2;\n-\n-    const XMMRegister xmm_key_tmp0 = xmm3;\n-    const XMMRegister xmm_key_tmp1 = xmm4;\n-\n-    \/\/ registers holding the four results in the parallelized loop\n-    const XMMRegister xmm_result0 = xmm5;\n-    const XMMRegister xmm_result1 = xmm6;\n-    const XMMRegister xmm_result2 = xmm7;\n-    const XMMRegister xmm_result3 = xmm8;\n-    const XMMRegister xmm_result4 = xmm9;\n-    const XMMRegister xmm_result5 = xmm10;\n-\n-    const XMMRegister xmm_from0 = xmm11;\n-    const XMMRegister xmm_from1 = xmm12;\n-    const XMMRegister xmm_from2 = xmm13;\n-    const XMMRegister xmm_from3 = xmm14; \/\/the last one is xmm14. we have to preserve it on WIN64.\n-    const XMMRegister xmm_from4 = xmm3; \/\/reuse xmm3~4. Because xmm_key_tmp0~1 are useless when loading input text\n-    const XMMRegister xmm_from5 = xmm4;\n-\n-    \/\/for key_128, key_192, key_256\n-    const int rounds[3] = {10, 12, 14};\n-    Label L_exit_preLoop, L_preLoop_start;\n-    Label L_multiBlock_loopTop[3];\n-    Label L_singleBlockLoopTop[3];\n-    Label L__incCounter[3][6]; \/\/for 6 blocks\n-    Label L__incCounter_single[3]; \/\/for single block, key128, key192, key256\n-    Label L_processTail_insr[3], L_processTail_4_insr[3], L_processTail_2_insr[3], L_processTail_1_insr[3], L_processTail_exit_insr[3];\n-    Label L_processTail_4_extr[3], L_processTail_2_extr[3], L_processTail_1_extr[3], L_processTail_exit_extr[3];\n-\n-    Label L_exit;\n-\n-    __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  const Register pos = rax;\n+\n+  const int PARALLEL_FACTOR = 6;\n+  const XMMRegister xmm_counter_shuf_mask = xmm0;\n+  const XMMRegister xmm_key_shuf_mask = xmm1; \/\/ used temporarily to swap key bytes up front\n+  const XMMRegister xmm_curr_counter = xmm2;\n+\n+  const XMMRegister xmm_key_tmp0 = xmm3;\n+  const XMMRegister xmm_key_tmp1 = xmm4;\n+\n+  \/\/ registers holding the four results in the parallelized loop\n+  const XMMRegister xmm_result0 = xmm5;\n+  const XMMRegister xmm_result1 = xmm6;\n+  const XMMRegister xmm_result2 = xmm7;\n+  const XMMRegister xmm_result3 = xmm8;\n+  const XMMRegister xmm_result4 = xmm9;\n+  const XMMRegister xmm_result5 = xmm10;\n+\n+  const XMMRegister xmm_from0 = xmm11;\n+  const XMMRegister xmm_from1 = xmm12;\n+  const XMMRegister xmm_from2 = xmm13;\n+  const XMMRegister xmm_from3 = xmm14; \/\/the last one is xmm14. we have to preserve it on WIN64.\n+  const XMMRegister xmm_from4 = xmm3; \/\/reuse xmm3~4. Because xmm_key_tmp0~1 are useless when loading input text\n+  const XMMRegister xmm_from5 = xmm4;\n+\n+  \/\/for key_128, key_192, key_256\n+  const int rounds[3] = {10, 12, 14};\n+  Label L_exit_preLoop, L_preLoop_start;\n+  Label L_multiBlock_loopTop[3];\n+  Label L_singleBlockLoopTop[3];\n+  Label L__incCounter[3][6]; \/\/for 6 blocks\n+  Label L__incCounter_single[3]; \/\/for single block, key128, key192, key256\n+  Label L_processTail_insr[3], L_processTail_4_insr[3], L_processTail_2_insr[3], L_processTail_1_insr[3], L_processTail_exit_insr[3];\n+  Label L_processTail_4_extr[3], L_processTail_2_extr[3], L_processTail_1_extr[3], L_processTail_exit_extr[3];\n+\n+  Label L_exit;\n+\n+  __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n@@ -4725,14 +4746,14 @@\n-    \/\/ allocate spill slots for r13, r14\n-    enum {\n-        saved_r13_offset,\n-        saved_r14_offset\n-    };\n-    __ subptr(rsp, 2 * wordSize);\n-    __ movptr(Address(rsp, saved_r13_offset * wordSize), r13);\n-    __ movptr(Address(rsp, saved_r14_offset * wordSize), r14);\n-\n-    \/\/ on win64, fill len_reg from stack position\n-    __ movl(len_reg, len_mem);\n-    __ movptr(saved_encCounter_start, saved_encCounter_mem);\n-    __ movptr(used_addr, used_mem);\n-    __ movl(used, Address(used_addr, 0));\n+  \/\/ allocate spill slots for r13, r14\n+  enum {\n+      saved_r13_offset,\n+      saved_r14_offset\n+  };\n+  __ subptr(rsp, 2 * wordSize);\n+  __ movptr(Address(rsp, saved_r13_offset * wordSize), r13);\n+  __ movptr(Address(rsp, saved_r14_offset * wordSize), r14);\n+\n+  \/\/ on win64, fill len_reg from stack position\n+  __ movl(len_reg, len_mem);\n+  __ movptr(saved_encCounter_start, saved_encCounter_mem);\n+  __ movptr(used_addr, used_mem);\n+  __ movl(used, Address(used_addr, 0));\n@@ -4740,3 +4761,3 @@\n-    __ push(len_reg); \/\/ Save\n-    __ movptr(used_addr, used_mem);\n-    __ movl(used, Address(used_addr, 0));\n+  __ push(len_reg); \/\/ Save\n+  __ movptr(used_addr, used_mem);\n+  __ movl(used, Address(used_addr, 0));\n@@ -4745,31 +4766,31 @@\n-    __ push(rbx); \/\/ Save RBX\n-    __ movdqu(xmm_curr_counter, Address(counter, 0x00)); \/\/ initialize counter with initial counter\n-    __ movdqu(xmm_counter_shuf_mask, ExternalAddress(StubRoutines::x86::counter_shuffle_mask_addr()), pos); \/\/ pos as scratch\n-    __ pshufb(xmm_curr_counter, xmm_counter_shuf_mask); \/\/counter is shuffled\n-    __ movptr(pos, 0);\n-\n-    \/\/ Use the partially used encrpyted counter from last invocation\n-    __ BIND(L_preLoop_start);\n-    __ cmpptr(used, 16);\n-    __ jcc(Assembler::aboveEqual, L_exit_preLoop);\n-      __ cmpptr(len_reg, 0);\n-      __ jcc(Assembler::lessEqual, L_exit_preLoop);\n-      __ movb(rbx, Address(saved_encCounter_start, used));\n-      __ xorb(rbx, Address(from, pos));\n-      __ movb(Address(to, pos), rbx);\n-      __ addptr(pos, 1);\n-      __ addptr(used, 1);\n-      __ subptr(len_reg, 1);\n-\n-    __ jmp(L_preLoop_start);\n-\n-    __ BIND(L_exit_preLoop);\n-    __ movl(Address(used_addr, 0), used);\n-\n-    \/\/ key length could be only {11, 13, 15} * 4 = {44, 52, 60}\n-    __ movdqu(xmm_key_shuf_mask, ExternalAddress(StubRoutines::x86::key_shuffle_mask_addr()), rbx); \/\/ rbx as scratch\n-    __ movl(rbx, Address(key, arrayOopDesc::length_offset_in_bytes() - arrayOopDesc::base_offset_in_bytes(T_INT)));\n-    __ cmpl(rbx, 52);\n-    __ jcc(Assembler::equal, L_multiBlock_loopTop[1]);\n-    __ cmpl(rbx, 60);\n-    __ jcc(Assembler::equal, L_multiBlock_loopTop[2]);\n+  __ push(rbx); \/\/ Save RBX\n+  __ movdqu(xmm_curr_counter, Address(counter, 0x00)); \/\/ initialize counter with initial counter\n+  __ movdqu(xmm_counter_shuf_mask, ExternalAddress(StubRoutines::x86::counter_shuffle_mask_addr()), pos); \/\/ pos as scratch\n+  __ pshufb(xmm_curr_counter, xmm_counter_shuf_mask); \/\/counter is shuffled\n+  __ movptr(pos, 0);\n+\n+  \/\/ Use the partially used encrpyted counter from last invocation\n+  __ BIND(L_preLoop_start);\n+  __ cmpptr(used, 16);\n+  __ jcc(Assembler::aboveEqual, L_exit_preLoop);\n+    __ cmpptr(len_reg, 0);\n+    __ jcc(Assembler::lessEqual, L_exit_preLoop);\n+    __ movb(rbx, Address(saved_encCounter_start, used));\n+    __ xorb(rbx, Address(from, pos));\n+    __ movb(Address(to, pos), rbx);\n+    __ addptr(pos, 1);\n+    __ addptr(used, 1);\n+    __ subptr(len_reg, 1);\n+\n+  __ jmp(L_preLoop_start);\n+\n+  __ BIND(L_exit_preLoop);\n+  __ movl(Address(used_addr, 0), used);\n+\n+  \/\/ key length could be only {11, 13, 15} * 4 = {44, 52, 60}\n+  __ movdqu(xmm_key_shuf_mask, ExternalAddress(StubRoutines::x86::key_shuffle_mask_addr()), rbx); \/\/ rbx as scratch\n+  __ movl(rbx, Address(key, arrayOopDesc::length_offset_in_bytes() - arrayOopDesc::base_offset_in_bytes(T_INT)));\n+  __ cmpl(rbx, 52);\n+  __ jcc(Assembler::equal, L_multiBlock_loopTop[1]);\n+  __ cmpl(rbx, 60);\n+  __ jcc(Assembler::equal, L_multiBlock_loopTop[2]);\n@@ -4778,41 +4799,39 @@\n-    __ opc(xmm_result0, src_reg);              \\\n-    __ opc(xmm_result1, src_reg);              \\\n-    __ opc(xmm_result2, src_reg);              \\\n-    __ opc(xmm_result3, src_reg);              \\\n-    __ opc(xmm_result4, src_reg);              \\\n-    __ opc(xmm_result5, src_reg);\n-\n-    \/\/ k == 0 :  generate code for key_128\n-    \/\/ k == 1 :  generate code for key_192\n-    \/\/ k == 2 :  generate code for key_256\n-    for (int k = 0; k < 3; ++k) {\n-      \/\/multi blocks starts here\n-      __ align(OptoLoopAlignment);\n-      __ BIND(L_multiBlock_loopTop[k]);\n-      __ cmpptr(len_reg, PARALLEL_FACTOR * AESBlockSize); \/\/ see if at least PARALLEL_FACTOR blocks left\n-      __ jcc(Assembler::less, L_singleBlockLoopTop[k]);\n-      load_key(xmm_key_tmp0, key, 0x00, xmm_key_shuf_mask);\n-\n-      \/\/load, then increase counters\n-      CTR_DoSix(movdqa, xmm_curr_counter);\n-      inc_counter(rbx, xmm_result1, 0x01, L__incCounter[k][0]);\n-      inc_counter(rbx, xmm_result2, 0x02, L__incCounter[k][1]);\n-      inc_counter(rbx, xmm_result3, 0x03, L__incCounter[k][2]);\n-      inc_counter(rbx, xmm_result4, 0x04, L__incCounter[k][3]);\n-      inc_counter(rbx, xmm_result5,  0x05, L__incCounter[k][4]);\n-      inc_counter(rbx, xmm_curr_counter, 0x06, L__incCounter[k][5]);\n-      CTR_DoSix(pshufb, xmm_counter_shuf_mask); \/\/ after increased, shuffled counters back for PXOR\n-      CTR_DoSix(pxor, xmm_key_tmp0);   \/\/PXOR with Round 0 key\n-\n-      \/\/load two ROUND_KEYs at a time\n-      for (int i = 1; i < rounds[k]; ) {\n-        load_key(xmm_key_tmp1, key, (0x10 * i), xmm_key_shuf_mask);\n-        load_key(xmm_key_tmp0, key, (0x10 * (i+1)), xmm_key_shuf_mask);\n-        CTR_DoSix(aesenc, xmm_key_tmp1);\n-        i++;\n-        if (i != rounds[k]) {\n-          CTR_DoSix(aesenc, xmm_key_tmp0);\n-        } else {\n-          CTR_DoSix(aesenclast, xmm_key_tmp0);\n-        }\n-        i++;\n+  __ opc(xmm_result0, src_reg);              \\\n+  __ opc(xmm_result1, src_reg);              \\\n+  __ opc(xmm_result2, src_reg);              \\\n+  __ opc(xmm_result3, src_reg);              \\\n+  __ opc(xmm_result4, src_reg);              \\\n+  __ opc(xmm_result5, src_reg);\n+\n+  \/\/ k == 0 :  generate code for key_128\n+  \/\/ k == 1 :  generate code for key_192\n+  \/\/ k == 2 :  generate code for key_256\n+  for (int k = 0; k < 3; ++k) {\n+    \/\/multi blocks starts here\n+    __ align(OptoLoopAlignment);\n+    __ BIND(L_multiBlock_loopTop[k]);\n+    __ cmpptr(len_reg, PARALLEL_FACTOR * AESBlockSize); \/\/ see if at least PARALLEL_FACTOR blocks left\n+    __ jcc(Assembler::less, L_singleBlockLoopTop[k]);\n+    load_key(xmm_key_tmp0, key, 0x00, xmm_key_shuf_mask);\n+\n+    \/\/load, then increase counters\n+    CTR_DoSix(movdqa, xmm_curr_counter);\n+    inc_counter(rbx, xmm_result1, 0x01, L__incCounter[k][0]);\n+    inc_counter(rbx, xmm_result2, 0x02, L__incCounter[k][1]);\n+    inc_counter(rbx, xmm_result3, 0x03, L__incCounter[k][2]);\n+    inc_counter(rbx, xmm_result4, 0x04, L__incCounter[k][3]);\n+    inc_counter(rbx, xmm_result5,  0x05, L__incCounter[k][4]);\n+    inc_counter(rbx, xmm_curr_counter, 0x06, L__incCounter[k][5]);\n+    CTR_DoSix(pshufb, xmm_counter_shuf_mask); \/\/ after increased, shuffled counters back for PXOR\n+    CTR_DoSix(pxor, xmm_key_tmp0);   \/\/PXOR with Round 0 key\n+\n+    \/\/load two ROUND_KEYs at a time\n+    for (int i = 1; i < rounds[k]; ) {\n+      load_key(xmm_key_tmp1, key, (0x10 * i), xmm_key_shuf_mask);\n+      load_key(xmm_key_tmp0, key, (0x10 * (i+1)), xmm_key_shuf_mask);\n+      CTR_DoSix(aesenc, xmm_key_tmp1);\n+      i++;\n+      if (i != rounds[k]) {\n+        CTR_DoSix(aesenc, xmm_key_tmp0);\n+      } else {\n+        CTR_DoSix(aesenclast, xmm_key_tmp0);\n@@ -4820,2 +4839,48 @@\n-\n-      \/\/ get next PARALLEL_FACTOR blocks into xmm_result registers\n+      i++;\n+    }\n+\n+    \/\/ get next PARALLEL_FACTOR blocks into xmm_result registers\n+    __ movdqu(xmm_from0, Address(from, pos, Address::times_1, 0 * AESBlockSize));\n+    __ movdqu(xmm_from1, Address(from, pos, Address::times_1, 1 * AESBlockSize));\n+    __ movdqu(xmm_from2, Address(from, pos, Address::times_1, 2 * AESBlockSize));\n+    __ movdqu(xmm_from3, Address(from, pos, Address::times_1, 3 * AESBlockSize));\n+    __ movdqu(xmm_from4, Address(from, pos, Address::times_1, 4 * AESBlockSize));\n+    __ movdqu(xmm_from5, Address(from, pos, Address::times_1, 5 * AESBlockSize));\n+\n+    __ pxor(xmm_result0, xmm_from0);\n+    __ pxor(xmm_result1, xmm_from1);\n+    __ pxor(xmm_result2, xmm_from2);\n+    __ pxor(xmm_result3, xmm_from3);\n+    __ pxor(xmm_result4, xmm_from4);\n+    __ pxor(xmm_result5, xmm_from5);\n+\n+    \/\/ store 6 results into the next 64 bytes of output\n+    __ movdqu(Address(to, pos, Address::times_1, 0 * AESBlockSize), xmm_result0);\n+    __ movdqu(Address(to, pos, Address::times_1, 1 * AESBlockSize), xmm_result1);\n+    __ movdqu(Address(to, pos, Address::times_1, 2 * AESBlockSize), xmm_result2);\n+    __ movdqu(Address(to, pos, Address::times_1, 3 * AESBlockSize), xmm_result3);\n+    __ movdqu(Address(to, pos, Address::times_1, 4 * AESBlockSize), xmm_result4);\n+    __ movdqu(Address(to, pos, Address::times_1, 5 * AESBlockSize), xmm_result5);\n+\n+    __ addptr(pos, PARALLEL_FACTOR * AESBlockSize); \/\/ increase the length of crypt text\n+    __ subptr(len_reg, PARALLEL_FACTOR * AESBlockSize); \/\/ decrease the remaining length\n+    __ jmp(L_multiBlock_loopTop[k]);\n+\n+    \/\/ singleBlock starts here\n+    __ align(OptoLoopAlignment);\n+    __ BIND(L_singleBlockLoopTop[k]);\n+    __ cmpptr(len_reg, 0);\n+    __ jcc(Assembler::lessEqual, L_exit);\n+    load_key(xmm_key_tmp0, key, 0x00, xmm_key_shuf_mask);\n+    __ movdqa(xmm_result0, xmm_curr_counter);\n+    inc_counter(rbx, xmm_curr_counter, 0x01, L__incCounter_single[k]);\n+    __ pshufb(xmm_result0, xmm_counter_shuf_mask);\n+    __ pxor(xmm_result0, xmm_key_tmp0);\n+    for (int i = 1; i < rounds[k]; i++) {\n+      load_key(xmm_key_tmp0, key, (0x10 * i), xmm_key_shuf_mask);\n+      __ aesenc(xmm_result0, xmm_key_tmp0);\n+    }\n+    load_key(xmm_key_tmp0, key, (rounds[k] * 0x10), xmm_key_shuf_mask);\n+    __ aesenclast(xmm_result0, xmm_key_tmp0);\n+    __ cmpptr(len_reg, AESBlockSize);\n+    __ jcc(Assembler::less, L_processTail_insr[k]);\n@@ -4823,6 +4888,0 @@\n-      __ movdqu(xmm_from1, Address(from, pos, Address::times_1, 1 * AESBlockSize));\n-      __ movdqu(xmm_from2, Address(from, pos, Address::times_1, 2 * AESBlockSize));\n-      __ movdqu(xmm_from3, Address(from, pos, Address::times_1, 3 * AESBlockSize));\n-      __ movdqu(xmm_from4, Address(from, pos, Address::times_1, 4 * AESBlockSize));\n-      __ movdqu(xmm_from5, Address(from, pos, Address::times_1, 5 * AESBlockSize));\n-\n@@ -4830,7 +4889,0 @@\n-      __ pxor(xmm_result1, xmm_from1);\n-      __ pxor(xmm_result2, xmm_from2);\n-      __ pxor(xmm_result3, xmm_from3);\n-      __ pxor(xmm_result4, xmm_from4);\n-      __ pxor(xmm_result5, xmm_from5);\n-\n-      \/\/ store 6 results into the next 64 bytes of output\n@@ -4838,90 +4890,58 @@\n-      __ movdqu(Address(to, pos, Address::times_1, 1 * AESBlockSize), xmm_result1);\n-      __ movdqu(Address(to, pos, Address::times_1, 2 * AESBlockSize), xmm_result2);\n-      __ movdqu(Address(to, pos, Address::times_1, 3 * AESBlockSize), xmm_result3);\n-      __ movdqu(Address(to, pos, Address::times_1, 4 * AESBlockSize), xmm_result4);\n-      __ movdqu(Address(to, pos, Address::times_1, 5 * AESBlockSize), xmm_result5);\n-\n-      __ addptr(pos, PARALLEL_FACTOR * AESBlockSize); \/\/ increase the length of crypt text\n-      __ subptr(len_reg, PARALLEL_FACTOR * AESBlockSize); \/\/ decrease the remaining length\n-      __ jmp(L_multiBlock_loopTop[k]);\n-\n-      \/\/ singleBlock starts here\n-      __ align(OptoLoopAlignment);\n-      __ BIND(L_singleBlockLoopTop[k]);\n-      __ cmpptr(len_reg, 0);\n-      __ jcc(Assembler::lessEqual, L_exit);\n-      load_key(xmm_key_tmp0, key, 0x00, xmm_key_shuf_mask);\n-      __ movdqa(xmm_result0, xmm_curr_counter);\n-      inc_counter(rbx, xmm_curr_counter, 0x01, L__incCounter_single[k]);\n-      __ pshufb(xmm_result0, xmm_counter_shuf_mask);\n-      __ pxor(xmm_result0, xmm_key_tmp0);\n-      for (int i = 1; i < rounds[k]; i++) {\n-        load_key(xmm_key_tmp0, key, (0x10 * i), xmm_key_shuf_mask);\n-        __ aesenc(xmm_result0, xmm_key_tmp0);\n-      }\n-      load_key(xmm_key_tmp0, key, (rounds[k] * 0x10), xmm_key_shuf_mask);\n-      __ aesenclast(xmm_result0, xmm_key_tmp0);\n-      __ cmpptr(len_reg, AESBlockSize);\n-      __ jcc(Assembler::less, L_processTail_insr[k]);\n-        __ movdqu(xmm_from0, Address(from, pos, Address::times_1, 0 * AESBlockSize));\n-        __ pxor(xmm_result0, xmm_from0);\n-        __ movdqu(Address(to, pos, Address::times_1, 0 * AESBlockSize), xmm_result0);\n-        __ addptr(pos, AESBlockSize);\n-        __ subptr(len_reg, AESBlockSize);\n-        __ jmp(L_singleBlockLoopTop[k]);\n-      __ BIND(L_processTail_insr[k]);                               \/\/ Process the tail part of the input array\n-        __ addptr(pos, len_reg);                                    \/\/ 1. Insert bytes from src array into xmm_from0 register\n-        __ testptr(len_reg, 8);\n-        __ jcc(Assembler::zero, L_processTail_4_insr[k]);\n-          __ subptr(pos,8);\n-          __ pinsrq(xmm_from0, Address(from, pos), 0);\n-        __ BIND(L_processTail_4_insr[k]);\n-        __ testptr(len_reg, 4);\n-        __ jcc(Assembler::zero, L_processTail_2_insr[k]);\n-          __ subptr(pos,4);\n-          __ pslldq(xmm_from0, 4);\n-          __ pinsrd(xmm_from0, Address(from, pos), 0);\n-        __ BIND(L_processTail_2_insr[k]);\n-        __ testptr(len_reg, 2);\n-        __ jcc(Assembler::zero, L_processTail_1_insr[k]);\n-          __ subptr(pos, 2);\n-          __ pslldq(xmm_from0, 2);\n-          __ pinsrw(xmm_from0, Address(from, pos), 0);\n-        __ BIND(L_processTail_1_insr[k]);\n-        __ testptr(len_reg, 1);\n-        __ jcc(Assembler::zero, L_processTail_exit_insr[k]);\n-          __ subptr(pos, 1);\n-          __ pslldq(xmm_from0, 1);\n-          __ pinsrb(xmm_from0, Address(from, pos), 0);\n-        __ BIND(L_processTail_exit_insr[k]);\n-\n-        __ movdqu(Address(saved_encCounter_start, 0), xmm_result0);  \/\/ 2. Perform pxor of the encrypted counter and plaintext Bytes.\n-        __ pxor(xmm_result0, xmm_from0);                             \/\/    Also the encrypted counter is saved for next invocation.\n-\n-        __ testptr(len_reg, 8);\n-        __ jcc(Assembler::zero, L_processTail_4_extr[k]);            \/\/ 3. Extract bytes from xmm_result0 into the dest. array\n-          __ pextrq(Address(to, pos), xmm_result0, 0);\n-          __ psrldq(xmm_result0, 8);\n-          __ addptr(pos, 8);\n-        __ BIND(L_processTail_4_extr[k]);\n-        __ testptr(len_reg, 4);\n-        __ jcc(Assembler::zero, L_processTail_2_extr[k]);\n-          __ pextrd(Address(to, pos), xmm_result0, 0);\n-          __ psrldq(xmm_result0, 4);\n-          __ addptr(pos, 4);\n-        __ BIND(L_processTail_2_extr[k]);\n-        __ testptr(len_reg, 2);\n-        __ jcc(Assembler::zero, L_processTail_1_extr[k]);\n-          __ pextrw(Address(to, pos), xmm_result0, 0);\n-          __ psrldq(xmm_result0, 2);\n-          __ addptr(pos, 2);\n-        __ BIND(L_processTail_1_extr[k]);\n-        __ testptr(len_reg, 1);\n-        __ jcc(Assembler::zero, L_processTail_exit_extr[k]);\n-          __ pextrb(Address(to, pos), xmm_result0, 0);\n-\n-        __ BIND(L_processTail_exit_extr[k]);\n-        __ movl(Address(used_addr, 0), len_reg);\n-        __ jmp(L_exit);\n-\n-    }\n+      __ addptr(pos, AESBlockSize);\n+      __ subptr(len_reg, AESBlockSize);\n+      __ jmp(L_singleBlockLoopTop[k]);\n+    __ BIND(L_processTail_insr[k]);                               \/\/ Process the tail part of the input array\n+      __ addptr(pos, len_reg);                                    \/\/ 1. Insert bytes from src array into xmm_from0 register\n+      __ testptr(len_reg, 8);\n+      __ jcc(Assembler::zero, L_processTail_4_insr[k]);\n+        __ subptr(pos,8);\n+        __ pinsrq(xmm_from0, Address(from, pos), 0);\n+      __ BIND(L_processTail_4_insr[k]);\n+      __ testptr(len_reg, 4);\n+      __ jcc(Assembler::zero, L_processTail_2_insr[k]);\n+        __ subptr(pos,4);\n+        __ pslldq(xmm_from0, 4);\n+        __ pinsrd(xmm_from0, Address(from, pos), 0);\n+      __ BIND(L_processTail_2_insr[k]);\n+      __ testptr(len_reg, 2);\n+      __ jcc(Assembler::zero, L_processTail_1_insr[k]);\n+        __ subptr(pos, 2);\n+        __ pslldq(xmm_from0, 2);\n+        __ pinsrw(xmm_from0, Address(from, pos), 0);\n+      __ BIND(L_processTail_1_insr[k]);\n+      __ testptr(len_reg, 1);\n+      __ jcc(Assembler::zero, L_processTail_exit_insr[k]);\n+        __ subptr(pos, 1);\n+        __ pslldq(xmm_from0, 1);\n+        __ pinsrb(xmm_from0, Address(from, pos), 0);\n+      __ BIND(L_processTail_exit_insr[k]);\n+\n+      __ movdqu(Address(saved_encCounter_start, 0), xmm_result0);  \/\/ 2. Perform pxor of the encrypted counter and plaintext Bytes.\n+      __ pxor(xmm_result0, xmm_from0);                             \/\/    Also the encrypted counter is saved for next invocation.\n+\n+      __ testptr(len_reg, 8);\n+      __ jcc(Assembler::zero, L_processTail_4_extr[k]);            \/\/ 3. Extract bytes from xmm_result0 into the dest. array\n+        __ pextrq(Address(to, pos), xmm_result0, 0);\n+        __ psrldq(xmm_result0, 8);\n+        __ addptr(pos, 8);\n+      __ BIND(L_processTail_4_extr[k]);\n+      __ testptr(len_reg, 4);\n+      __ jcc(Assembler::zero, L_processTail_2_extr[k]);\n+        __ pextrd(Address(to, pos), xmm_result0, 0);\n+        __ psrldq(xmm_result0, 4);\n+        __ addptr(pos, 4);\n+      __ BIND(L_processTail_2_extr[k]);\n+      __ testptr(len_reg, 2);\n+      __ jcc(Assembler::zero, L_processTail_1_extr[k]);\n+        __ pextrw(Address(to, pos), xmm_result0, 0);\n+        __ psrldq(xmm_result0, 2);\n+        __ addptr(pos, 2);\n+      __ BIND(L_processTail_1_extr[k]);\n+      __ testptr(len_reg, 1);\n+      __ jcc(Assembler::zero, L_processTail_exit_extr[k]);\n+        __ pextrb(Address(to, pos), xmm_result0, 0);\n+\n+      __ BIND(L_processTail_exit_extr[k]);\n+      __ movl(Address(used_addr, 0), len_reg);\n+      __ jmp(L_exit);\n+  }\n@@ -4929,4 +4949,4 @@\n-    __ BIND(L_exit);\n-    __ pshufb(xmm_curr_counter, xmm_counter_shuf_mask); \/\/counter is shuffled back.\n-    __ movdqu(Address(counter, 0), xmm_curr_counter); \/\/save counter back\n-    __ pop(rbx); \/\/ pop the saved RBX.\n+  __ BIND(L_exit);\n+  __ pshufb(xmm_curr_counter, xmm_counter_shuf_mask); \/\/counter is shuffled back.\n+  __ movdqu(Address(counter, 0), xmm_curr_counter); \/\/save counter back\n+  __ pop(rbx); \/\/ pop the saved RBX.\n@@ -4934,4 +4954,4 @@\n-    __ movl(rax, len_mem);\n-    __ movptr(r13, Address(rsp, saved_r13_offset * wordSize));\n-    __ movptr(r14, Address(rsp, saved_r14_offset * wordSize));\n-    __ addptr(rsp, 2 * wordSize);\n+  __ movl(rax, len_mem);\n+  __ movptr(r13, Address(rsp, saved_r13_offset * wordSize));\n+  __ movptr(r14, Address(rsp, saved_r14_offset * wordSize));\n+  __ addptr(rsp, 2 * wordSize);\n@@ -4939,1 +4959,1 @@\n-    __ pop(rax); \/\/ return 'len'\n+  __ pop(rax); \/\/ return 'len'\n@@ -4941,4 +4961,2 @@\n-    __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    __ ret(0);\n-    return start;\n-  }\n+  __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ ret(0);\n@@ -4946,1 +4964,4 @@\n-void roundDec(XMMRegister xmm_reg) {\n+  return start;\n+}\n+\n+void StubGenerator::roundDec(XMMRegister xmm_reg) {\n@@ -4957,1 +4978,1 @@\n-void roundDeclast(XMMRegister xmm_reg) {\n+void StubGenerator::roundDeclast(XMMRegister xmm_reg) {\n@@ -4968,8 +4989,337 @@\n-void ev_load_key(XMMRegister xmmdst, Register key, int offset, XMMRegister xmm_shuf_mask = xnoreg) {\n-  __ movdqu(xmmdst, Address(key, offset));\n-  if (xmm_shuf_mask != xnoreg) {\n-    __ pshufb(xmmdst, xmm_shuf_mask);\n-  } else {\n-    __ pshufb(xmmdst, ExternalAddress(StubRoutines::x86::key_shuffle_mask_addr()));\n-  }\n-  __ evshufi64x2(xmmdst, xmmdst, xmmdst, 0x0, Assembler::AVX_512bit);\n+void StubGenerator::ev_load_key(XMMRegister xmmdst, Register key, int offset, XMMRegister xmm_shuf_mask) {\n+  __ movdqu(xmmdst, Address(key, offset));\n+  if (xmm_shuf_mask != xnoreg) {\n+    __ pshufb(xmmdst, xmm_shuf_mask);\n+  } else {\n+    __ pshufb(xmmdst, ExternalAddress(StubRoutines::x86::key_shuffle_mask_addr()));\n+  }\n+  __ evshufi64x2(xmmdst, xmmdst, xmmdst, 0x0, Assembler::AVX_512bit);\n+}\n+\n+address StubGenerator::generate_cipherBlockChaining_decryptVectorAESCrypt() {\n+  assert(VM_Version::supports_avx512_vaes(), \"need AES instructions and misaligned SSE support\");\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", \"cipherBlockChaining_decryptAESCrypt\");\n+  address start = __ pc();\n+\n+  const Register from = c_rarg0;  \/\/ source array address\n+  const Register to = c_rarg1;  \/\/ destination array address\n+  const Register key = c_rarg2;  \/\/ key array address\n+  const Register rvec = c_rarg3;  \/\/ r byte array initialized from initvector array address\n+  \/\/ and left with the results of the last encryption block\n+#ifndef _WIN64\n+  const Register len_reg = c_rarg4;  \/\/ src len (must be multiple of blocksize 16)\n+#else\n+  const Address  len_mem(rbp, 6 * wordSize);  \/\/ length is on stack on Win64\n+  const Register len_reg = r11;      \/\/ pick the volatile windows register\n+#endif\n+\n+  Label Loop, Loop1, L_128, L_256, L_192, KEY_192, KEY_256, Loop2, Lcbc_dec_rem_loop,\n+        Lcbc_dec_rem_last, Lcbc_dec_ret, Lcbc_dec_rem, Lcbc_exit;\n+\n+  __ enter();\n+\n+#ifdef _WIN64\n+\/\/ on win64, fill len_reg from stack position\n+  __ movl(len_reg, len_mem);\n+#else\n+  __ push(len_reg); \/\/ Save\n+#endif\n+  __ push(rbx);\n+  __ vzeroupper();\n+\n+  \/\/ Temporary variable declaration for swapping key bytes\n+  const XMMRegister xmm_key_shuf_mask = xmm1;\n+  __ movdqu(xmm_key_shuf_mask, ExternalAddress(StubRoutines::x86::key_shuffle_mask_addr()));\n+\n+  \/\/ Calculate number of rounds from key size: 44 for 10-rounds, 52 for 12-rounds, 60 for 14-rounds\n+  const Register rounds = rbx;\n+  __ movl(rounds, Address(key, arrayOopDesc::length_offset_in_bytes() - arrayOopDesc::base_offset_in_bytes(T_INT)));\n+\n+  const XMMRegister IV = xmm0;\n+  \/\/ Load IV and broadcast value to 512-bits\n+  __ evbroadcasti64x2(IV, Address(rvec, 0), Assembler::AVX_512bit);\n+\n+  \/\/ Temporary variables for storing round keys\n+  const XMMRegister RK0 = xmm30;\n+  const XMMRegister RK1 = xmm9;\n+  const XMMRegister RK2 = xmm18;\n+  const XMMRegister RK3 = xmm19;\n+  const XMMRegister RK4 = xmm20;\n+  const XMMRegister RK5 = xmm21;\n+  const XMMRegister RK6 = xmm22;\n+  const XMMRegister RK7 = xmm23;\n+  const XMMRegister RK8 = xmm24;\n+  const XMMRegister RK9 = xmm25;\n+  const XMMRegister RK10 = xmm26;\n+\n+  \/\/ Load and shuffle key\n+  \/\/ the java expanded key ordering is rotated one position from what we want\n+  \/\/ so we start from 1*16 here and hit 0*16 last\n+  ev_load_key(RK1, key, 1 * 16, xmm_key_shuf_mask);\n+  ev_load_key(RK2, key, 2 * 16, xmm_key_shuf_mask);\n+  ev_load_key(RK3, key, 3 * 16, xmm_key_shuf_mask);\n+  ev_load_key(RK4, key, 4 * 16, xmm_key_shuf_mask);\n+  ev_load_key(RK5, key, 5 * 16, xmm_key_shuf_mask);\n+  ev_load_key(RK6, key, 6 * 16, xmm_key_shuf_mask);\n+  ev_load_key(RK7, key, 7 * 16, xmm_key_shuf_mask);\n+  ev_load_key(RK8, key, 8 * 16, xmm_key_shuf_mask);\n+  ev_load_key(RK9, key, 9 * 16, xmm_key_shuf_mask);\n+  ev_load_key(RK10, key, 10 * 16, xmm_key_shuf_mask);\n+  ev_load_key(RK0, key, 0*16, xmm_key_shuf_mask);\n+\n+  \/\/ Variables for storing source cipher text\n+  const XMMRegister S0 = xmm10;\n+  const XMMRegister S1 = xmm11;\n+  const XMMRegister S2 = xmm12;\n+  const XMMRegister S3 = xmm13;\n+  const XMMRegister S4 = xmm14;\n+  const XMMRegister S5 = xmm15;\n+  const XMMRegister S6 = xmm16;\n+  const XMMRegister S7 = xmm17;\n+\n+  \/\/ Variables for storing decrypted text\n+  const XMMRegister B0 = xmm1;\n+  const XMMRegister B1 = xmm2;\n+  const XMMRegister B2 = xmm3;\n+  const XMMRegister B3 = xmm4;\n+  const XMMRegister B4 = xmm5;\n+  const XMMRegister B5 = xmm6;\n+  const XMMRegister B6 = xmm7;\n+  const XMMRegister B7 = xmm8;\n+\n+  __ cmpl(rounds, 44);\n+  __ jcc(Assembler::greater, KEY_192);\n+  __ jmp(Loop);\n+\n+  __ BIND(KEY_192);\n+  const XMMRegister RK11 = xmm27;\n+  const XMMRegister RK12 = xmm28;\n+  ev_load_key(RK11, key, 11*16, xmm_key_shuf_mask);\n+  ev_load_key(RK12, key, 12*16, xmm_key_shuf_mask);\n+\n+  __ cmpl(rounds, 52);\n+  __ jcc(Assembler::greater, KEY_256);\n+  __ jmp(Loop);\n+\n+  __ BIND(KEY_256);\n+  const XMMRegister RK13 = xmm29;\n+  const XMMRegister RK14 = xmm31;\n+  ev_load_key(RK13, key, 13*16, xmm_key_shuf_mask);\n+  ev_load_key(RK14, key, 14*16, xmm_key_shuf_mask);\n+\n+  __ BIND(Loop);\n+  __ cmpl(len_reg, 512);\n+  __ jcc(Assembler::below, Lcbc_dec_rem);\n+  __ BIND(Loop1);\n+  __ subl(len_reg, 512);\n+  __ evmovdquq(S0, Address(from, 0 * 64), Assembler::AVX_512bit);\n+  __ evmovdquq(S1, Address(from, 1 * 64), Assembler::AVX_512bit);\n+  __ evmovdquq(S2, Address(from, 2 * 64), Assembler::AVX_512bit);\n+  __ evmovdquq(S3, Address(from, 3 * 64), Assembler::AVX_512bit);\n+  __ evmovdquq(S4, Address(from, 4 * 64), Assembler::AVX_512bit);\n+  __ evmovdquq(S5, Address(from, 5 * 64), Assembler::AVX_512bit);\n+  __ evmovdquq(S6, Address(from, 6 * 64), Assembler::AVX_512bit);\n+  __ evmovdquq(S7, Address(from, 7 * 64), Assembler::AVX_512bit);\n+  __ leaq(from, Address(from, 8 * 64));\n+\n+  __ evpxorq(B0, S0, RK1, Assembler::AVX_512bit);\n+  __ evpxorq(B1, S1, RK1, Assembler::AVX_512bit);\n+  __ evpxorq(B2, S2, RK1, Assembler::AVX_512bit);\n+  __ evpxorq(B3, S3, RK1, Assembler::AVX_512bit);\n+  __ evpxorq(B4, S4, RK1, Assembler::AVX_512bit);\n+  __ evpxorq(B5, S5, RK1, Assembler::AVX_512bit);\n+  __ evpxorq(B6, S6, RK1, Assembler::AVX_512bit);\n+  __ evpxorq(B7, S7, RK1, Assembler::AVX_512bit);\n+\n+  __ evalignq(IV, S0, IV, 0x06);\n+  __ evalignq(S0, S1, S0, 0x06);\n+  __ evalignq(S1, S2, S1, 0x06);\n+  __ evalignq(S2, S3, S2, 0x06);\n+  __ evalignq(S3, S4, S3, 0x06);\n+  __ evalignq(S4, S5, S4, 0x06);\n+  __ evalignq(S5, S6, S5, 0x06);\n+  __ evalignq(S6, S7, S6, 0x06);\n+\n+  roundDec(RK2);\n+  roundDec(RK3);\n+  roundDec(RK4);\n+  roundDec(RK5);\n+  roundDec(RK6);\n+  roundDec(RK7);\n+  roundDec(RK8);\n+  roundDec(RK9);\n+  roundDec(RK10);\n+\n+  __ cmpl(rounds, 44);\n+  __ jcc(Assembler::belowEqual, L_128);\n+  roundDec(RK11);\n+  roundDec(RK12);\n+\n+  __ cmpl(rounds, 52);\n+  __ jcc(Assembler::belowEqual, L_192);\n+  roundDec(RK13);\n+  roundDec(RK14);\n+\n+  __ BIND(L_256);\n+  roundDeclast(RK0);\n+  __ jmp(Loop2);\n+\n+  __ BIND(L_128);\n+  roundDeclast(RK0);\n+  __ jmp(Loop2);\n+\n+  __ BIND(L_192);\n+  roundDeclast(RK0);\n+\n+  __ BIND(Loop2);\n+  __ evpxorq(B0, B0, IV, Assembler::AVX_512bit);\n+  __ evpxorq(B1, B1, S0, Assembler::AVX_512bit);\n+  __ evpxorq(B2, B2, S1, Assembler::AVX_512bit);\n+  __ evpxorq(B3, B3, S2, Assembler::AVX_512bit);\n+  __ evpxorq(B4, B4, S3, Assembler::AVX_512bit);\n+  __ evpxorq(B5, B5, S4, Assembler::AVX_512bit);\n+  __ evpxorq(B6, B6, S5, Assembler::AVX_512bit);\n+  __ evpxorq(B7, B7, S6, Assembler::AVX_512bit);\n+  __ evmovdquq(IV, S7, Assembler::AVX_512bit);\n+\n+  __ evmovdquq(Address(to, 0 * 64), B0, Assembler::AVX_512bit);\n+  __ evmovdquq(Address(to, 1 * 64), B1, Assembler::AVX_512bit);\n+  __ evmovdquq(Address(to, 2 * 64), B2, Assembler::AVX_512bit);\n+  __ evmovdquq(Address(to, 3 * 64), B3, Assembler::AVX_512bit);\n+  __ evmovdquq(Address(to, 4 * 64), B4, Assembler::AVX_512bit);\n+  __ evmovdquq(Address(to, 5 * 64), B5, Assembler::AVX_512bit);\n+  __ evmovdquq(Address(to, 6 * 64), B6, Assembler::AVX_512bit);\n+  __ evmovdquq(Address(to, 7 * 64), B7, Assembler::AVX_512bit);\n+  __ leaq(to, Address(to, 8 * 64));\n+  __ jmp(Loop);\n+\n+  __ BIND(Lcbc_dec_rem);\n+  __ evshufi64x2(IV, IV, IV, 0x03, Assembler::AVX_512bit);\n+\n+  __ BIND(Lcbc_dec_rem_loop);\n+  __ subl(len_reg, 16);\n+  __ jcc(Assembler::carrySet, Lcbc_dec_ret);\n+\n+  __ movdqu(S0, Address(from, 0));\n+  __ evpxorq(B0, S0, RK1, Assembler::AVX_512bit);\n+  __ vaesdec(B0, B0, RK2, Assembler::AVX_512bit);\n+  __ vaesdec(B0, B0, RK3, Assembler::AVX_512bit);\n+  __ vaesdec(B0, B0, RK4, Assembler::AVX_512bit);\n+  __ vaesdec(B0, B0, RK5, Assembler::AVX_512bit);\n+  __ vaesdec(B0, B0, RK6, Assembler::AVX_512bit);\n+  __ vaesdec(B0, B0, RK7, Assembler::AVX_512bit);\n+  __ vaesdec(B0, B0, RK8, Assembler::AVX_512bit);\n+  __ vaesdec(B0, B0, RK9, Assembler::AVX_512bit);\n+  __ vaesdec(B0, B0, RK10, Assembler::AVX_512bit);\n+  __ cmpl(rounds, 44);\n+  __ jcc(Assembler::belowEqual, Lcbc_dec_rem_last);\n+\n+  __ vaesdec(B0, B0, RK11, Assembler::AVX_512bit);\n+  __ vaesdec(B0, B0, RK12, Assembler::AVX_512bit);\n+  __ cmpl(rounds, 52);\n+  __ jcc(Assembler::belowEqual, Lcbc_dec_rem_last);\n+\n+  __ vaesdec(B0, B0, RK13, Assembler::AVX_512bit);\n+  __ vaesdec(B0, B0, RK14, Assembler::AVX_512bit);\n+\n+  __ BIND(Lcbc_dec_rem_last);\n+  __ vaesdeclast(B0, B0, RK0, Assembler::AVX_512bit);\n+\n+  __ evpxorq(B0, B0, IV, Assembler::AVX_512bit);\n+  __ evmovdquq(IV, S0, Assembler::AVX_512bit);\n+  __ movdqu(Address(to, 0), B0);\n+  __ leaq(from, Address(from, 16));\n+  __ leaq(to, Address(to, 16));\n+  __ jmp(Lcbc_dec_rem_loop);\n+\n+  __ BIND(Lcbc_dec_ret);\n+  __ movdqu(Address(rvec, 0), IV);\n+\n+  \/\/ Zero out the round keys\n+  __ evpxorq(RK0, RK0, RK0, Assembler::AVX_512bit);\n+  __ evpxorq(RK1, RK1, RK1, Assembler::AVX_512bit);\n+  __ evpxorq(RK2, RK2, RK2, Assembler::AVX_512bit);\n+  __ evpxorq(RK3, RK3, RK3, Assembler::AVX_512bit);\n+  __ evpxorq(RK4, RK4, RK4, Assembler::AVX_512bit);\n+  __ evpxorq(RK5, RK5, RK5, Assembler::AVX_512bit);\n+  __ evpxorq(RK6, RK6, RK6, Assembler::AVX_512bit);\n+  __ evpxorq(RK7, RK7, RK7, Assembler::AVX_512bit);\n+  __ evpxorq(RK8, RK8, RK8, Assembler::AVX_512bit);\n+  __ evpxorq(RK9, RK9, RK9, Assembler::AVX_512bit);\n+  __ evpxorq(RK10, RK10, RK10, Assembler::AVX_512bit);\n+  __ cmpl(rounds, 44);\n+  __ jcc(Assembler::belowEqual, Lcbc_exit);\n+  __ evpxorq(RK11, RK11, RK11, Assembler::AVX_512bit);\n+  __ evpxorq(RK12, RK12, RK12, Assembler::AVX_512bit);\n+  __ cmpl(rounds, 52);\n+  __ jcc(Assembler::belowEqual, Lcbc_exit);\n+  __ evpxorq(RK13, RK13, RK13, Assembler::AVX_512bit);\n+  __ evpxorq(RK14, RK14, RK14, Assembler::AVX_512bit);\n+\n+  __ BIND(Lcbc_exit);\n+  __ vzeroupper();\n+  __ pop(rbx);\n+#ifdef _WIN64\n+  __ movl(rax, len_mem);\n+#else\n+  __ pop(rax); \/\/ return length\n+#endif\n+  __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ ret(0);\n+\n+  return start;\n+}\n+\n+\/\/ Polynomial x^128+x^127+x^126+x^121+1\n+address StubGenerator::ghash_polynomial_addr() {\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", \"_ghash_poly_addr\");\n+  address start = __ pc();\n+\n+  __ emit_data64(0x0000000000000001, relocInfo::none);\n+  __ emit_data64(0xc200000000000000, relocInfo::none);\n+\n+  return start;\n+}\n+\n+address StubGenerator::ghash_shufflemask_addr() {\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", \"_ghash_shuffmask_addr\");\n+  address start = __ pc();\n+\n+  __ emit_data64(0x0f0f0f0f0f0f0f0f, relocInfo::none);\n+  __ emit_data64(0x0f0f0f0f0f0f0f0f, relocInfo::none);\n+\n+  return start;\n+}\n+\n+\/\/ Ghash single and multi block operations using AVX instructions\n+address StubGenerator::generate_avx_ghash_processBlocks() {\n+  __ align(CodeEntryAlignment);\n+\n+  StubCodeMark mark(this, \"StubRoutines\", \"ghash_processBlocks\");\n+  address start = __ pc();\n+\n+  \/\/ arguments\n+  const Register state = c_rarg0;\n+  const Register htbl = c_rarg1;\n+  const Register data = c_rarg2;\n+  const Register blocks = c_rarg3;\n+  __ enter();\n+ \/\/ Save state before entering routine\n+  __ avx_ghash(state, htbl, data, blocks);\n+  __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ ret(0);\n+\n+  return start;\n+}\n+\n+\/\/ byte swap x86 long\n+address StubGenerator::generate_ghash_long_swap_mask() {\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", \"ghash_long_swap_mask\");\n+  address start = __ pc();\n+\n+  __ emit_data64(0x0f0e0d0c0b0a0908, relocInfo::none );\n+  __ emit_data64(0x0706050403020100, relocInfo::none );\n@@ -4977,0 +5327,1 @@\n+return start;\n@@ -4979,17 +5330,5 @@\n-address generate_cipherBlockChaining_decryptVectorAESCrypt() {\n-    assert(VM_Version::supports_avx512_vaes(), \"need AES instructions and misaligned SSE support\");\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", \"cipherBlockChaining_decryptAESCrypt\");\n-    address start = __ pc();\n-\n-    const Register from = c_rarg0;  \/\/ source array address\n-    const Register to = c_rarg1;  \/\/ destination array address\n-    const Register key = c_rarg2;  \/\/ key array address\n-    const Register rvec = c_rarg3;  \/\/ r byte array initialized from initvector array address\n-    \/\/ and left with the results of the last encryption block\n-#ifndef _WIN64\n-    const Register len_reg = c_rarg4;  \/\/ src len (must be multiple of blocksize 16)\n-#else\n-    const Address  len_mem(rbp, 6 * wordSize);  \/\/ length is on stack on Win64\n-    const Register len_reg = r11;      \/\/ pick the volatile windows register\n-#endif\n+\/\/ byte swap x86 byte array\n+address StubGenerator::generate_ghash_byte_swap_mask() {\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", \"ghash_byte_swap_mask\");\n+  address start = __ pc();\n@@ -4997,2 +5336,2 @@\n-    Label Loop, Loop1, L_128, L_256, L_192, KEY_192, KEY_256, Loop2, Lcbc_dec_rem_loop,\n-          Lcbc_dec_rem_last, Lcbc_dec_ret, Lcbc_dec_rem, Lcbc_exit;\n+  __ emit_data64(0x08090a0b0c0d0e0f, relocInfo::none );\n+  __ emit_data64(0x0001020304050607, relocInfo::none );\n@@ -5000,1 +5339,2 @@\n-    __ enter();\n+return start;\n+}\n@@ -5002,8 +5342,6 @@\n-#ifdef _WIN64\n-  \/\/ on win64, fill len_reg from stack position\n-    __ movl(len_reg, len_mem);\n-#else\n-    __ push(len_reg); \/\/ Save\n-#endif\n-    __ push(rbx);\n-    __ vzeroupper();\n+\/* Single and multi-block ghash operations *\/\n+address StubGenerator::generate_ghash_processBlocks() {\n+  __ align(CodeEntryAlignment);\n+  Label L_ghash_loop, L_exit;\n+  StubCodeMark mark(this, \"StubRoutines\", \"ghash_processBlocks\");\n+  address start = __ pc();\n@@ -5011,241 +5349,4 @@\n-    \/\/ Temporary variable declaration for swapping key bytes\n-    const XMMRegister xmm_key_shuf_mask = xmm1;\n-    __ movdqu(xmm_key_shuf_mask, ExternalAddress(StubRoutines::x86::key_shuffle_mask_addr()));\n-\n-    \/\/ Calculate number of rounds from key size: 44 for 10-rounds, 52 for 12-rounds, 60 for 14-rounds\n-    const Register rounds = rbx;\n-    __ movl(rounds, Address(key, arrayOopDesc::length_offset_in_bytes() - arrayOopDesc::base_offset_in_bytes(T_INT)));\n-\n-    const XMMRegister IV = xmm0;\n-    \/\/ Load IV and broadcast value to 512-bits\n-    __ evbroadcasti64x2(IV, Address(rvec, 0), Assembler::AVX_512bit);\n-\n-    \/\/ Temporary variables for storing round keys\n-    const XMMRegister RK0 = xmm30;\n-    const XMMRegister RK1 = xmm9;\n-    const XMMRegister RK2 = xmm18;\n-    const XMMRegister RK3 = xmm19;\n-    const XMMRegister RK4 = xmm20;\n-    const XMMRegister RK5 = xmm21;\n-    const XMMRegister RK6 = xmm22;\n-    const XMMRegister RK7 = xmm23;\n-    const XMMRegister RK8 = xmm24;\n-    const XMMRegister RK9 = xmm25;\n-    const XMMRegister RK10 = xmm26;\n-\n-     \/\/ Load and shuffle key\n-    \/\/ the java expanded key ordering is rotated one position from what we want\n-    \/\/ so we start from 1*16 here and hit 0*16 last\n-    ev_load_key(RK1, key, 1 * 16, xmm_key_shuf_mask);\n-    ev_load_key(RK2, key, 2 * 16, xmm_key_shuf_mask);\n-    ev_load_key(RK3, key, 3 * 16, xmm_key_shuf_mask);\n-    ev_load_key(RK4, key, 4 * 16, xmm_key_shuf_mask);\n-    ev_load_key(RK5, key, 5 * 16, xmm_key_shuf_mask);\n-    ev_load_key(RK6, key, 6 * 16, xmm_key_shuf_mask);\n-    ev_load_key(RK7, key, 7 * 16, xmm_key_shuf_mask);\n-    ev_load_key(RK8, key, 8 * 16, xmm_key_shuf_mask);\n-    ev_load_key(RK9, key, 9 * 16, xmm_key_shuf_mask);\n-    ev_load_key(RK10, key, 10 * 16, xmm_key_shuf_mask);\n-    ev_load_key(RK0, key, 0*16, xmm_key_shuf_mask);\n-\n-    \/\/ Variables for storing source cipher text\n-    const XMMRegister S0 = xmm10;\n-    const XMMRegister S1 = xmm11;\n-    const XMMRegister S2 = xmm12;\n-    const XMMRegister S3 = xmm13;\n-    const XMMRegister S4 = xmm14;\n-    const XMMRegister S5 = xmm15;\n-    const XMMRegister S6 = xmm16;\n-    const XMMRegister S7 = xmm17;\n-\n-    \/\/ Variables for storing decrypted text\n-    const XMMRegister B0 = xmm1;\n-    const XMMRegister B1 = xmm2;\n-    const XMMRegister B2 = xmm3;\n-    const XMMRegister B3 = xmm4;\n-    const XMMRegister B4 = xmm5;\n-    const XMMRegister B5 = xmm6;\n-    const XMMRegister B6 = xmm7;\n-    const XMMRegister B7 = xmm8;\n-\n-    __ cmpl(rounds, 44);\n-    __ jcc(Assembler::greater, KEY_192);\n-    __ jmp(Loop);\n-\n-    __ BIND(KEY_192);\n-    const XMMRegister RK11 = xmm27;\n-    const XMMRegister RK12 = xmm28;\n-    ev_load_key(RK11, key, 11*16, xmm_key_shuf_mask);\n-    ev_load_key(RK12, key, 12*16, xmm_key_shuf_mask);\n-\n-    __ cmpl(rounds, 52);\n-    __ jcc(Assembler::greater, KEY_256);\n-    __ jmp(Loop);\n-\n-    __ BIND(KEY_256);\n-    const XMMRegister RK13 = xmm29;\n-    const XMMRegister RK14 = xmm31;\n-    ev_load_key(RK13, key, 13*16, xmm_key_shuf_mask);\n-    ev_load_key(RK14, key, 14*16, xmm_key_shuf_mask);\n-\n-    __ BIND(Loop);\n-    __ cmpl(len_reg, 512);\n-    __ jcc(Assembler::below, Lcbc_dec_rem);\n-    __ BIND(Loop1);\n-    __ subl(len_reg, 512);\n-    __ evmovdquq(S0, Address(from, 0 * 64), Assembler::AVX_512bit);\n-    __ evmovdquq(S1, Address(from, 1 * 64), Assembler::AVX_512bit);\n-    __ evmovdquq(S2, Address(from, 2 * 64), Assembler::AVX_512bit);\n-    __ evmovdquq(S3, Address(from, 3 * 64), Assembler::AVX_512bit);\n-    __ evmovdquq(S4, Address(from, 4 * 64), Assembler::AVX_512bit);\n-    __ evmovdquq(S5, Address(from, 5 * 64), Assembler::AVX_512bit);\n-    __ evmovdquq(S6, Address(from, 6 * 64), Assembler::AVX_512bit);\n-    __ evmovdquq(S7, Address(from, 7 * 64), Assembler::AVX_512bit);\n-    __ leaq(from, Address(from, 8 * 64));\n-\n-    __ evpxorq(B0, S0, RK1, Assembler::AVX_512bit);\n-    __ evpxorq(B1, S1, RK1, Assembler::AVX_512bit);\n-    __ evpxorq(B2, S2, RK1, Assembler::AVX_512bit);\n-    __ evpxorq(B3, S3, RK1, Assembler::AVX_512bit);\n-    __ evpxorq(B4, S4, RK1, Assembler::AVX_512bit);\n-    __ evpxorq(B5, S5, RK1, Assembler::AVX_512bit);\n-    __ evpxorq(B6, S6, RK1, Assembler::AVX_512bit);\n-    __ evpxorq(B7, S7, RK1, Assembler::AVX_512bit);\n-\n-    __ evalignq(IV, S0, IV, 0x06);\n-    __ evalignq(S0, S1, S0, 0x06);\n-    __ evalignq(S1, S2, S1, 0x06);\n-    __ evalignq(S2, S3, S2, 0x06);\n-    __ evalignq(S3, S4, S3, 0x06);\n-    __ evalignq(S4, S5, S4, 0x06);\n-    __ evalignq(S5, S6, S5, 0x06);\n-    __ evalignq(S6, S7, S6, 0x06);\n-\n-    roundDec(RK2);\n-    roundDec(RK3);\n-    roundDec(RK4);\n-    roundDec(RK5);\n-    roundDec(RK6);\n-    roundDec(RK7);\n-    roundDec(RK8);\n-    roundDec(RK9);\n-    roundDec(RK10);\n-\n-    __ cmpl(rounds, 44);\n-    __ jcc(Assembler::belowEqual, L_128);\n-    roundDec(RK11);\n-    roundDec(RK12);\n-\n-    __ cmpl(rounds, 52);\n-    __ jcc(Assembler::belowEqual, L_192);\n-    roundDec(RK13);\n-    roundDec(RK14);\n-\n-    __ BIND(L_256);\n-    roundDeclast(RK0);\n-    __ jmp(Loop2);\n-\n-    __ BIND(L_128);\n-    roundDeclast(RK0);\n-    __ jmp(Loop2);\n-\n-    __ BIND(L_192);\n-    roundDeclast(RK0);\n-\n-    __ BIND(Loop2);\n-    __ evpxorq(B0, B0, IV, Assembler::AVX_512bit);\n-    __ evpxorq(B1, B1, S0, Assembler::AVX_512bit);\n-    __ evpxorq(B2, B2, S1, Assembler::AVX_512bit);\n-    __ evpxorq(B3, B3, S2, Assembler::AVX_512bit);\n-    __ evpxorq(B4, B4, S3, Assembler::AVX_512bit);\n-    __ evpxorq(B5, B5, S4, Assembler::AVX_512bit);\n-    __ evpxorq(B6, B6, S5, Assembler::AVX_512bit);\n-    __ evpxorq(B7, B7, S6, Assembler::AVX_512bit);\n-    __ evmovdquq(IV, S7, Assembler::AVX_512bit);\n-\n-    __ evmovdquq(Address(to, 0 * 64), B0, Assembler::AVX_512bit);\n-    __ evmovdquq(Address(to, 1 * 64), B1, Assembler::AVX_512bit);\n-    __ evmovdquq(Address(to, 2 * 64), B2, Assembler::AVX_512bit);\n-    __ evmovdquq(Address(to, 3 * 64), B3, Assembler::AVX_512bit);\n-    __ evmovdquq(Address(to, 4 * 64), B4, Assembler::AVX_512bit);\n-    __ evmovdquq(Address(to, 5 * 64), B5, Assembler::AVX_512bit);\n-    __ evmovdquq(Address(to, 6 * 64), B6, Assembler::AVX_512bit);\n-    __ evmovdquq(Address(to, 7 * 64), B7, Assembler::AVX_512bit);\n-    __ leaq(to, Address(to, 8 * 64));\n-    __ jmp(Loop);\n-\n-    __ BIND(Lcbc_dec_rem);\n-    __ evshufi64x2(IV, IV, IV, 0x03, Assembler::AVX_512bit);\n-\n-    __ BIND(Lcbc_dec_rem_loop);\n-    __ subl(len_reg, 16);\n-    __ jcc(Assembler::carrySet, Lcbc_dec_ret);\n-\n-    __ movdqu(S0, Address(from, 0));\n-    __ evpxorq(B0, S0, RK1, Assembler::AVX_512bit);\n-    __ vaesdec(B0, B0, RK2, Assembler::AVX_512bit);\n-    __ vaesdec(B0, B0, RK3, Assembler::AVX_512bit);\n-    __ vaesdec(B0, B0, RK4, Assembler::AVX_512bit);\n-    __ vaesdec(B0, B0, RK5, Assembler::AVX_512bit);\n-    __ vaesdec(B0, B0, RK6, Assembler::AVX_512bit);\n-    __ vaesdec(B0, B0, RK7, Assembler::AVX_512bit);\n-    __ vaesdec(B0, B0, RK8, Assembler::AVX_512bit);\n-    __ vaesdec(B0, B0, RK9, Assembler::AVX_512bit);\n-    __ vaesdec(B0, B0, RK10, Assembler::AVX_512bit);\n-    __ cmpl(rounds, 44);\n-    __ jcc(Assembler::belowEqual, Lcbc_dec_rem_last);\n-\n-    __ vaesdec(B0, B0, RK11, Assembler::AVX_512bit);\n-    __ vaesdec(B0, B0, RK12, Assembler::AVX_512bit);\n-    __ cmpl(rounds, 52);\n-    __ jcc(Assembler::belowEqual, Lcbc_dec_rem_last);\n-\n-    __ vaesdec(B0, B0, RK13, Assembler::AVX_512bit);\n-    __ vaesdec(B0, B0, RK14, Assembler::AVX_512bit);\n-\n-    __ BIND(Lcbc_dec_rem_last);\n-    __ vaesdeclast(B0, B0, RK0, Assembler::AVX_512bit);\n-\n-    __ evpxorq(B0, B0, IV, Assembler::AVX_512bit);\n-    __ evmovdquq(IV, S0, Assembler::AVX_512bit);\n-    __ movdqu(Address(to, 0), B0);\n-    __ leaq(from, Address(from, 16));\n-    __ leaq(to, Address(to, 16));\n-    __ jmp(Lcbc_dec_rem_loop);\n-\n-    __ BIND(Lcbc_dec_ret);\n-    __ movdqu(Address(rvec, 0), IV);\n-\n-    \/\/ Zero out the round keys\n-    __ evpxorq(RK0, RK0, RK0, Assembler::AVX_512bit);\n-    __ evpxorq(RK1, RK1, RK1, Assembler::AVX_512bit);\n-    __ evpxorq(RK2, RK2, RK2, Assembler::AVX_512bit);\n-    __ evpxorq(RK3, RK3, RK3, Assembler::AVX_512bit);\n-    __ evpxorq(RK4, RK4, RK4, Assembler::AVX_512bit);\n-    __ evpxorq(RK5, RK5, RK5, Assembler::AVX_512bit);\n-    __ evpxorq(RK6, RK6, RK6, Assembler::AVX_512bit);\n-    __ evpxorq(RK7, RK7, RK7, Assembler::AVX_512bit);\n-    __ evpxorq(RK8, RK8, RK8, Assembler::AVX_512bit);\n-    __ evpxorq(RK9, RK9, RK9, Assembler::AVX_512bit);\n-    __ evpxorq(RK10, RK10, RK10, Assembler::AVX_512bit);\n-    __ cmpl(rounds, 44);\n-    __ jcc(Assembler::belowEqual, Lcbc_exit);\n-    __ evpxorq(RK11, RK11, RK11, Assembler::AVX_512bit);\n-    __ evpxorq(RK12, RK12, RK12, Assembler::AVX_512bit);\n-    __ cmpl(rounds, 52);\n-    __ jcc(Assembler::belowEqual, Lcbc_exit);\n-    __ evpxorq(RK13, RK13, RK13, Assembler::AVX_512bit);\n-    __ evpxorq(RK14, RK14, RK14, Assembler::AVX_512bit);\n-\n-    __ BIND(Lcbc_exit);\n-    __ vzeroupper();\n-    __ pop(rbx);\n-#ifdef _WIN64\n-    __ movl(rax, len_mem);\n-#else\n-    __ pop(rax); \/\/ return length\n-#endif\n-    __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    __ ret(0);\n-    return start;\n-}\n+  const Register state        = c_rarg0;\n+  const Register subkeyH      = c_rarg1;\n+  const Register data         = c_rarg2;\n+  const Register blocks       = c_rarg3;\n@@ -5253,8 +5354,116 @@\n-\/\/ Polynomial x^128+x^127+x^126+x^121+1\n-address ghash_polynomial_addr() {\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", \"_ghash_poly_addr\");\n-    address start = __ pc();\n-    __ emit_data64(0x0000000000000001, relocInfo::none);\n-    __ emit_data64(0xc200000000000000, relocInfo::none);\n-    return start;\n+  const XMMRegister xmm_temp0 = xmm0;\n+  const XMMRegister xmm_temp1 = xmm1;\n+  const XMMRegister xmm_temp2 = xmm2;\n+  const XMMRegister xmm_temp3 = xmm3;\n+  const XMMRegister xmm_temp4 = xmm4;\n+  const XMMRegister xmm_temp5 = xmm5;\n+  const XMMRegister xmm_temp6 = xmm6;\n+  const XMMRegister xmm_temp7 = xmm7;\n+  const XMMRegister xmm_temp8 = xmm8;\n+  const XMMRegister xmm_temp9 = xmm9;\n+  const XMMRegister xmm_temp10 = xmm10;\n+\n+  __ enter();\n+\n+  __ movdqu(xmm_temp10, ExternalAddress(StubRoutines::x86::ghash_long_swap_mask_addr()));\n+\n+  __ movdqu(xmm_temp0, Address(state, 0));\n+  __ pshufb(xmm_temp0, xmm_temp10);\n+\n+\n+  __ BIND(L_ghash_loop);\n+  __ movdqu(xmm_temp2, Address(data, 0));\n+  __ pshufb(xmm_temp2, ExternalAddress(StubRoutines::x86::ghash_byte_swap_mask_addr()));\n+\n+  __ movdqu(xmm_temp1, Address(subkeyH, 0));\n+  __ pshufb(xmm_temp1, xmm_temp10);\n+\n+  __ pxor(xmm_temp0, xmm_temp2);\n+\n+  \/\/\n+  \/\/ Multiply with the hash key\n+  \/\/\n+  __ movdqu(xmm_temp3, xmm_temp0);\n+  __ pclmulqdq(xmm_temp3, xmm_temp1, 0);      \/\/ xmm3 holds a0*b0\n+  __ movdqu(xmm_temp4, xmm_temp0);\n+  __ pclmulqdq(xmm_temp4, xmm_temp1, 16);     \/\/ xmm4 holds a0*b1\n+\n+  __ movdqu(xmm_temp5, xmm_temp0);\n+  __ pclmulqdq(xmm_temp5, xmm_temp1, 1);      \/\/ xmm5 holds a1*b0\n+  __ movdqu(xmm_temp6, xmm_temp0);\n+  __ pclmulqdq(xmm_temp6, xmm_temp1, 17);     \/\/ xmm6 holds a1*b1\n+\n+  __ pxor(xmm_temp4, xmm_temp5);      \/\/ xmm4 holds a0*b1 + a1*b0\n+\n+  __ movdqu(xmm_temp5, xmm_temp4);    \/\/ move the contents of xmm4 to xmm5\n+  __ psrldq(xmm_temp4, 8);    \/\/ shift by xmm4 64 bits to the right\n+  __ pslldq(xmm_temp5, 8);    \/\/ shift by xmm5 64 bits to the left\n+  __ pxor(xmm_temp3, xmm_temp5);\n+  __ pxor(xmm_temp6, xmm_temp4);      \/\/ Register pair <xmm6:xmm3> holds the result\n+                                      \/\/ of the carry-less multiplication of\n+                                      \/\/ xmm0 by xmm1.\n+\n+  \/\/ We shift the result of the multiplication by one bit position\n+  \/\/ to the left to cope for the fact that the bits are reversed.\n+  __ movdqu(xmm_temp7, xmm_temp3);\n+  __ movdqu(xmm_temp8, xmm_temp6);\n+  __ pslld(xmm_temp3, 1);\n+  __ pslld(xmm_temp6, 1);\n+  __ psrld(xmm_temp7, 31);\n+  __ psrld(xmm_temp8, 31);\n+  __ movdqu(xmm_temp9, xmm_temp7);\n+  __ pslldq(xmm_temp8, 4);\n+  __ pslldq(xmm_temp7, 4);\n+  __ psrldq(xmm_temp9, 12);\n+  __ por(xmm_temp3, xmm_temp7);\n+  __ por(xmm_temp6, xmm_temp8);\n+  __ por(xmm_temp6, xmm_temp9);\n+\n+  \/\/\n+  \/\/ First phase of the reduction\n+  \/\/\n+  \/\/ Move xmm3 into xmm7, xmm8, xmm9 in order to perform the shifts\n+  \/\/ independently.\n+  __ movdqu(xmm_temp7, xmm_temp3);\n+  __ movdqu(xmm_temp8, xmm_temp3);\n+  __ movdqu(xmm_temp9, xmm_temp3);\n+  __ pslld(xmm_temp7, 31);    \/\/ packed right shift shifting << 31\n+  __ pslld(xmm_temp8, 30);    \/\/ packed right shift shifting << 30\n+  __ pslld(xmm_temp9, 25);    \/\/ packed right shift shifting << 25\n+  __ pxor(xmm_temp7, xmm_temp8);      \/\/ xor the shifted versions\n+  __ pxor(xmm_temp7, xmm_temp9);\n+  __ movdqu(xmm_temp8, xmm_temp7);\n+  __ pslldq(xmm_temp7, 12);\n+  __ psrldq(xmm_temp8, 4);\n+  __ pxor(xmm_temp3, xmm_temp7);      \/\/ first phase of the reduction complete\n+\n+  \/\/\n+  \/\/ Second phase of the reduction\n+  \/\/\n+  \/\/ Make 3 copies of xmm3 in xmm2, xmm4, xmm5 for doing these\n+  \/\/ shift operations.\n+  __ movdqu(xmm_temp2, xmm_temp3);\n+  __ movdqu(xmm_temp4, xmm_temp3);\n+  __ movdqu(xmm_temp5, xmm_temp3);\n+  __ psrld(xmm_temp2, 1);     \/\/ packed left shifting >> 1\n+  __ psrld(xmm_temp4, 2);     \/\/ packed left shifting >> 2\n+  __ psrld(xmm_temp5, 7);     \/\/ packed left shifting >> 7\n+  __ pxor(xmm_temp2, xmm_temp4);      \/\/ xor the shifted versions\n+  __ pxor(xmm_temp2, xmm_temp5);\n+  __ pxor(xmm_temp2, xmm_temp8);\n+  __ pxor(xmm_temp3, xmm_temp2);\n+  __ pxor(xmm_temp6, xmm_temp3);      \/\/ the result is in xmm6\n+\n+  __ decrement(blocks);\n+  __ jcc(Assembler::zero, L_exit);\n+  __ movdqu(xmm_temp0, xmm_temp6);\n+  __ addptr(data, 16);\n+  __ jmp(L_ghash_loop);\n+\n+  __ BIND(L_exit);\n+  __ pshufb(xmm_temp6, xmm_temp10);          \/\/ Byte swap 16-byte result\n+  __ movdqu(Address(state, 0), xmm_temp6);   \/\/ store the result\n+  __ leave();\n+  __ ret(0);\n+\n+  return start;\n@@ -5263,7 +5472,17 @@\n-address ghash_shufflemask_addr() {\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", \"_ghash_shuffmask_addr\");\n-    address start = __ pc();\n-    __ emit_data64(0x0f0f0f0f0f0f0f0f, relocInfo::none);\n-    __ emit_data64(0x0f0f0f0f0f0f0f0f, relocInfo::none);\n-    return start;\n+address StubGenerator::base64_shuffle_addr() {\n+  __ align64();\n+  StubCodeMark mark(this, \"StubRoutines\", \"shuffle_base64\");\n+  address start = __ pc();\n+\n+  assert(((unsigned long long)start & 0x3f) == 0,\n+         \"Alignment problem (0x%08llx)\", (unsigned long long)start);\n+  __ emit_data64(0x0405030401020001, relocInfo::none);\n+  __ emit_data64(0x0a0b090a07080607, relocInfo::none);\n+  __ emit_data64(0x10110f100d0e0c0d, relocInfo::none);\n+  __ emit_data64(0x1617151613141213, relocInfo::none);\n+  __ emit_data64(0x1c1d1b1c191a1819, relocInfo::none);\n+  __ emit_data64(0x222321221f201e1f, relocInfo::none);\n+  __ emit_data64(0x2829272825262425, relocInfo::none);\n+  __ emit_data64(0x2e2f2d2e2b2c2a2b, relocInfo::none);\n+\n+  return start;\n@@ -5272,18 +5491,11 @@\n-\/\/ Ghash single and multi block operations using AVX instructions\n-address generate_avx_ghash_processBlocks() {\n-    __ align(CodeEntryAlignment);\n-\n-    StubCodeMark mark(this, \"StubRoutines\", \"ghash_processBlocks\");\n-    address start = __ pc();\n-\n-    \/\/ arguments\n-    const Register state = c_rarg0;\n-    const Register htbl = c_rarg1;\n-    const Register data = c_rarg2;\n-    const Register blocks = c_rarg3;\n-    __ enter();\n-   \/\/ Save state before entering routine\n-    __ avx_ghash(state, htbl, data, blocks);\n-    __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    __ ret(0);\n-    return start;\n+address StubGenerator::base64_avx2_shuffle_addr() {\n+  __ align32();\n+  StubCodeMark mark(this, \"StubRoutines\", \"avx2_shuffle_base64\");\n+  address start = __ pc();\n+\n+  __ emit_data64(0x0809070805060405, relocInfo::none);\n+  __ emit_data64(0x0e0f0d0e0b0c0a0b, relocInfo::none);\n+  __ emit_data64(0x0405030401020001, relocInfo::none);\n+  __ emit_data64(0x0a0b090a07080607, relocInfo::none);\n+\n+  return start;\n@@ -5292,7 +5504,10 @@\n-  \/\/ byte swap x86 long\n-  address generate_ghash_long_swap_mask() {\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", \"ghash_long_swap_mask\");\n-    address start = __ pc();\n-    __ emit_data64(0x0f0e0d0c0b0a0908, relocInfo::none );\n-    __ emit_data64(0x0706050403020100, relocInfo::none );\n+address StubGenerator::base64_avx2_input_mask_addr() {\n+  __ align32();\n+  StubCodeMark mark(this, \"StubRoutines\", \"avx2_input_mask_base64\");\n+  address start = __ pc();\n+\n+  __ emit_data64(0x8000000000000000, relocInfo::none);\n+  __ emit_data64(0x8000000080000000, relocInfo::none);\n+  __ emit_data64(0x8000000080000000, relocInfo::none);\n+  __ emit_data64(0x8000000080000000, relocInfo::none);\n+\n@@ -5300,1 +5515,17 @@\n-  }\n+}\n+\n+address StubGenerator::base64_avx2_lut_addr() {\n+  __ align32();\n+  StubCodeMark mark(this, \"StubRoutines\", \"avx2_lut_base64\");\n+  address start = __ pc();\n+\n+  __ emit_data64(0xfcfcfcfcfcfc4741, relocInfo::none);\n+  __ emit_data64(0x0000f0edfcfcfcfc, relocInfo::none);\n+  __ emit_data64(0xfcfcfcfcfcfc4741, relocInfo::none);\n+  __ emit_data64(0x0000f0edfcfcfcfc, relocInfo::none);\n+\n+  \/\/ URL LUT\n+  __ emit_data64(0xfcfcfcfcfcfc4741, relocInfo::none);\n+  __ emit_data64(0x000020effcfcfcfc, relocInfo::none);\n+  __ emit_data64(0xfcfcfcfcfcfc4741, relocInfo::none);\n+  __ emit_data64(0x000020effcfcfcfc, relocInfo::none);\n@@ -5302,7 +5533,0 @@\n-  \/\/ byte swap x86 byte array\n-  address generate_ghash_byte_swap_mask() {\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", \"ghash_byte_swap_mask\");\n-    address start = __ pc();\n-    __ emit_data64(0x08090a0b0c0d0e0f, relocInfo::none );\n-    __ emit_data64(0x0001020304050607, relocInfo::none );\n@@ -5310,1 +5534,26 @@\n-  }\n+}\n+\n+address StubGenerator::base64_encoding_table_addr() {\n+  __ align64();\n+  StubCodeMark mark(this, \"StubRoutines\", \"encoding_table_base64\");\n+  address start = __ pc();\n+\n+  assert(((unsigned long long)start & 0x3f) == 0, \"Alignment problem (0x%08llx)\", (unsigned long long)start);\n+  __ emit_data64(0x4847464544434241, relocInfo::none);\n+  __ emit_data64(0x504f4e4d4c4b4a49, relocInfo::none);\n+  __ emit_data64(0x5857565554535251, relocInfo::none);\n+  __ emit_data64(0x6665646362615a59, relocInfo::none);\n+  __ emit_data64(0x6e6d6c6b6a696867, relocInfo::none);\n+  __ emit_data64(0x767574737271706f, relocInfo::none);\n+  __ emit_data64(0x333231307a797877, relocInfo::none);\n+  __ emit_data64(0x2f2b393837363534, relocInfo::none);\n+\n+  \/\/ URL table\n+  __ emit_data64(0x4847464544434241, relocInfo::none);\n+  __ emit_data64(0x504f4e4d4c4b4a49, relocInfo::none);\n+  __ emit_data64(0x5857565554535251, relocInfo::none);\n+  __ emit_data64(0x6665646362615a59, relocInfo::none);\n+  __ emit_data64(0x6e6d6c6b6a696867, relocInfo::none);\n+  __ emit_data64(0x767574737271706f, relocInfo::none);\n+  __ emit_data64(0x333231307a797877, relocInfo::none);\n+  __ emit_data64(0x5f2d393837363534, relocInfo::none);\n@@ -5312,6 +5561,2 @@\n-  \/* Single and multi-block ghash operations *\/\n-  address generate_ghash_processBlocks() {\n-    __ align(CodeEntryAlignment);\n-    Label L_ghash_loop, L_exit;\n-    StubCodeMark mark(this, \"StubRoutines\", \"ghash_processBlocks\");\n-    address start = __ pc();\n+  return start;\n+}\n@@ -5319,4 +5564,23 @@\n-    const Register state        = c_rarg0;\n-    const Register subkeyH      = c_rarg1;\n-    const Register data         = c_rarg2;\n-    const Register blocks       = c_rarg3;\n+\/\/ Code for generating Base64 encoding.\n+\/\/ Intrinsic function prototype in Base64.java:\n+\/\/ private void encodeBlock(byte[] src, int sp, int sl, byte[] dst, int dp,\n+\/\/ boolean isURL) {\n+address StubGenerator::generate_base64_encodeBlock()\n+{\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", \"implEncode\");\n+  address start = __ pc();\n+\n+  __ enter();\n+\n+  \/\/ Save callee-saved registers before using them\n+  __ push(r12);\n+  __ push(r13);\n+  __ push(r14);\n+  __ push(r15);\n+\n+  \/\/ arguments\n+  const Register source = c_rarg0;       \/\/ Source Array\n+  const Register start_offset = c_rarg1; \/\/ start offset\n+  const Register end_offset = c_rarg2;   \/\/ end offset\n+  const Register dest = c_rarg3;   \/\/ destination array\n@@ -5324,11 +5588,11 @@\n-    const XMMRegister xmm_temp0 = xmm0;\n-    const XMMRegister xmm_temp1 = xmm1;\n-    const XMMRegister xmm_temp2 = xmm2;\n-    const XMMRegister xmm_temp3 = xmm3;\n-    const XMMRegister xmm_temp4 = xmm4;\n-    const XMMRegister xmm_temp5 = xmm5;\n-    const XMMRegister xmm_temp6 = xmm6;\n-    const XMMRegister xmm_temp7 = xmm7;\n-    const XMMRegister xmm_temp8 = xmm8;\n-    const XMMRegister xmm_temp9 = xmm9;\n-    const XMMRegister xmm_temp10 = xmm10;\n+#ifndef _WIN64\n+  const Register dp = c_rarg4;    \/\/ Position for writing to dest array\n+  const Register isURL = c_rarg5; \/\/ Base64 or URL character set\n+#else\n+  const Address dp_mem(rbp, 6 * wordSize); \/\/ length is on stack on Win64\n+  const Address isURL_mem(rbp, 7 * wordSize);\n+  const Register isURL = r10; \/\/ pick the volatile windows register\n+  const Register dp = r12;\n+  __ movl(dp, dp_mem);\n+  __ movl(isURL, isURL_mem);\n+#endif\n@@ -5336,1 +5600,26 @@\n-    __ enter();\n+  const Register length = r14;\n+  const Register encode_table = r13;\n+  Label L_process3, L_exit, L_processdata, L_vbmiLoop, L_not512, L_32byteLoop;\n+\n+  \/\/ calculate length from offsets\n+  __ movl(length, end_offset);\n+  __ subl(length, start_offset);\n+  __ cmpl(length, 0);\n+  __ jcc(Assembler::lessEqual, L_exit);\n+\n+  \/\/ Code for 512-bit VBMI encoding.  Encodes 48 input bytes into 64\n+  \/\/ output bytes. We read 64 input bytes and ignore the last 16, so be\n+  \/\/ sure not to read past the end of the input buffer.\n+  if (VM_Version::supports_avx512_vbmi()) {\n+    __ cmpl(length, 64); \/\/ Do not overrun input buffer.\n+    __ jcc(Assembler::below, L_not512);\n+\n+    __ shll(isURL, 6); \/\/ index into decode table based on isURL\n+    __ lea(encode_table, ExternalAddress(StubRoutines::x86::base64_encoding_table_addr()));\n+    __ addptr(encode_table, isURL);\n+    __ shrl(isURL, 6); \/\/ restore isURL\n+\n+    __ mov64(rax, 0x3036242a1016040aull); \/\/ Shifts\n+    __ evmovdquq(xmm3, ExternalAddress(StubRoutines::x86::base64_shuffle_addr()), Assembler::AVX_512bit, r15);\n+    __ evmovdquq(xmm2, Address(encode_table, 0), Assembler::AVX_512bit);\n+    __ evpbroadcastq(xmm1, rax, Assembler::AVX_512bit);\n@@ -5338,1 +5627,2 @@\n-    __ movdqu(xmm_temp10, ExternalAddress(StubRoutines::x86::ghash_long_swap_mask_addr()));\n+    __ align32();\n+    __ BIND(L_vbmiLoop);\n@@ -5340,2 +5630,2 @@\n-    __ movdqu(xmm_temp0, Address(state, 0));\n-    __ pshufb(xmm_temp0, xmm_temp10);\n+    __ vpermb(xmm0, xmm3, Address(source, start_offset), Assembler::AVX_512bit);\n+    __ subl(length, 48);\n@@ -5343,0 +5633,4 @@\n+    \/\/ Put the input bytes into the proper lanes for writing, then\n+    \/\/ encode them.\n+    __ evpmultishiftqb(xmm0, xmm1, xmm0, Assembler::AVX_512bit);\n+    __ vpermb(xmm0, xmm0, xmm2, Assembler::AVX_512bit);\n@@ -5344,3 +5638,2 @@\n-    __ BIND(L_ghash_loop);\n-    __ movdqu(xmm_temp2, Address(data, 0));\n-    __ pshufb(xmm_temp2, ExternalAddress(StubRoutines::x86::ghash_byte_swap_mask_addr()));\n+    \/\/ Write to destination\n+    __ evmovdquq(Address(dest, dp), xmm0, Assembler::AVX_512bit);\n@@ -5348,2 +5641,4 @@\n-    __ movdqu(xmm_temp1, Address(subkeyH, 0));\n-    __ pshufb(xmm_temp1, xmm_temp10);\n+    __ addptr(dest, 64);\n+    __ addptr(source, 48);\n+    __ cmpl(length, 64);\n+    __ jcc(Assembler::aboveEqual, L_vbmiLoop);\n@@ -5351,1 +5646,2 @@\n-    __ pxor(xmm_temp0, xmm_temp2);\n+    __ vzeroupper();\n+  }\n@@ -5353,0 +5649,34 @@\n+  __ BIND(L_not512);\n+  if (VM_Version::supports_avx2()\n+      && VM_Version::supports_avx512vlbw()) {\n+    \/*\n+    ** This AVX2 encoder is based off the paper at:\n+    **      https:\/\/dl.acm.org\/doi\/10.1145\/3132709\n+    **\n+    ** We use AVX2 SIMD instructions to encode 24 bytes into 32\n+    ** output bytes.\n+    **\n+    *\/\n+    \/\/ Lengths under 32 bytes are done with scalar routine\n+    __ cmpl(length, 31);\n+    __ jcc(Assembler::belowEqual, L_process3);\n+\n+    \/\/ Set up supporting constant table data\n+    __ vmovdqu(xmm9, ExternalAddress(StubRoutines::x86::base64_avx2_shuffle_addr()), rax);\n+    \/\/ 6-bit mask for 2nd and 4th (and multiples) 6-bit values\n+    __ movl(rax, 0x0fc0fc00);\n+    __ vmovdqu(xmm1, ExternalAddress(StubRoutines::x86::base64_avx2_input_mask_addr()), rax);\n+    __ evpbroadcastd(xmm8, rax, Assembler::AVX_256bit);\n+\n+    \/\/ Multiplication constant for \"shifting\" right by 6 and 10\n+    \/\/ bits\n+    __ movl(rax, 0x04000040);\n+\n+    __ subl(length, 24);\n+    __ evpbroadcastd(xmm7, rax, Assembler::AVX_256bit);\n+\n+    \/\/ For the first load, we mask off reading of the first 4\n+    \/\/ bytes into the register. This is so we can get 4 3-byte\n+    \/\/ chunks into each lane of the register, avoiding having to\n+    \/\/ handle end conditions.  We then shuffle these bytes into a\n+    \/\/ specific order so that manipulation is easier.\n@@ -5354,1 +5684,1 @@\n-    \/\/ Multiply with the hash key\n+    \/\/ The initial read loads the XMM register like this:\n@@ -5356,36 +5686,5 @@\n-    __ movdqu(xmm_temp3, xmm_temp0);\n-    __ pclmulqdq(xmm_temp3, xmm_temp1, 0);      \/\/ xmm3 holds a0*b0\n-    __ movdqu(xmm_temp4, xmm_temp0);\n-    __ pclmulqdq(xmm_temp4, xmm_temp1, 16);     \/\/ xmm4 holds a0*b1\n-\n-    __ movdqu(xmm_temp5, xmm_temp0);\n-    __ pclmulqdq(xmm_temp5, xmm_temp1, 1);      \/\/ xmm5 holds a1*b0\n-    __ movdqu(xmm_temp6, xmm_temp0);\n-    __ pclmulqdq(xmm_temp6, xmm_temp1, 17);     \/\/ xmm6 holds a1*b1\n-\n-    __ pxor(xmm_temp4, xmm_temp5);      \/\/ xmm4 holds a0*b1 + a1*b0\n-\n-    __ movdqu(xmm_temp5, xmm_temp4);    \/\/ move the contents of xmm4 to xmm5\n-    __ psrldq(xmm_temp4, 8);    \/\/ shift by xmm4 64 bits to the right\n-    __ pslldq(xmm_temp5, 8);    \/\/ shift by xmm5 64 bits to the left\n-    __ pxor(xmm_temp3, xmm_temp5);\n-    __ pxor(xmm_temp6, xmm_temp4);      \/\/ Register pair <xmm6:xmm3> holds the result\n-                                        \/\/ of the carry-less multiplication of\n-                                        \/\/ xmm0 by xmm1.\n-\n-    \/\/ We shift the result of the multiplication by one bit position\n-    \/\/ to the left to cope for the fact that the bits are reversed.\n-    __ movdqu(xmm_temp7, xmm_temp3);\n-    __ movdqu(xmm_temp8, xmm_temp6);\n-    __ pslld(xmm_temp3, 1);\n-    __ pslld(xmm_temp6, 1);\n-    __ psrld(xmm_temp7, 31);\n-    __ psrld(xmm_temp8, 31);\n-    __ movdqu(xmm_temp9, xmm_temp7);\n-    __ pslldq(xmm_temp8, 4);\n-    __ pslldq(xmm_temp7, 4);\n-    __ psrldq(xmm_temp9, 12);\n-    __ por(xmm_temp3, xmm_temp7);\n-    __ por(xmm_temp6, xmm_temp8);\n-    __ por(xmm_temp6, xmm_temp9);\n-\n+    \/\/ Lower 128-bit lane:\n+    \/\/ +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+\n+    \/\/ | XX | XX | XX | XX | A0 | A1 | A2 | B0 | B1 | B2 | C0 | C1\n+    \/\/ | C2 | D0 | D1 | D2 |\n+    \/\/ +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+\n@@ -5393,1 +5692,5 @@\n-    \/\/ First phase of the reduction\n+    \/\/ Upper 128-bit lane:\n+    \/\/ +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+\n+    \/\/ | E0 | E1 | E2 | F0 | F1 | F2 | G0 | G1 | G2 | H0 | H1 | H2\n+    \/\/ | XX | XX | XX | XX |\n+    \/\/ +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+\n@@ -5395,15 +5698,32 @@\n-    \/\/ Move xmm3 into xmm7, xmm8, xmm9 in order to perform the shifts\n-    \/\/ independently.\n-    __ movdqu(xmm_temp7, xmm_temp3);\n-    __ movdqu(xmm_temp8, xmm_temp3);\n-    __ movdqu(xmm_temp9, xmm_temp3);\n-    __ pslld(xmm_temp7, 31);    \/\/ packed right shift shifting << 31\n-    __ pslld(xmm_temp8, 30);    \/\/ packed right shift shifting << 30\n-    __ pslld(xmm_temp9, 25);    \/\/ packed right shift shifting << 25\n-    __ pxor(xmm_temp7, xmm_temp8);      \/\/ xor the shifted versions\n-    __ pxor(xmm_temp7, xmm_temp9);\n-    __ movdqu(xmm_temp8, xmm_temp7);\n-    __ pslldq(xmm_temp7, 12);\n-    __ psrldq(xmm_temp8, 4);\n-    __ pxor(xmm_temp3, xmm_temp7);      \/\/ first phase of the reduction complete\n-\n+    \/\/ Where A0 is the first input byte, B0 is the fourth, etc.\n+    \/\/ The alphabetical significance denotes the 3 bytes to be\n+    \/\/ consumed and encoded into 4 bytes.\n+    \/\/\n+    \/\/ We then shuffle the register so each 32-bit word contains\n+    \/\/ the sequence:\n+    \/\/    A1 A0 A2 A1, B1, B0, B2, B1, etc.\n+    \/\/ Each of these byte sequences are then manipulated into 4\n+    \/\/ 6-bit values ready for encoding.\n+    \/\/\n+    \/\/ If we focus on one set of 3-byte chunks, changing the\n+    \/\/ nomenclature such that A0 => a, A1 => b, and A2 => c, we\n+    \/\/ shuffle such that each 24-bit chunk contains:\n+    \/\/\n+    \/\/ b7 b6 b5 b4 b3 b2 b1 b0 | a7 a6 a5 a4 a3 a2 a1 a0 | c7 c6\n+    \/\/ c5 c4 c3 c2 c1 c0 | b7 b6 b5 b4 b3 b2 b1 b0\n+    \/\/ Explain this step.\n+    \/\/ b3 b2 b1 b0 c5 c4 c3 c2 | c1 c0 d5 d4 d3 d2 d1 d0 | a5 a4\n+    \/\/ a3 a2 a1 a0 b5 b4 | b3 b2 b1 b0 c5 c4 c3 c2\n+    \/\/\n+    \/\/ W first and off all but bits 4-9 and 16-21 (c5..c0 and\n+    \/\/ a5..a0) and shift them using a vector multiplication\n+    \/\/ operation (vpmulhuw) which effectively shifts c right by 6\n+    \/\/ bits and a right by 10 bits.  We similarly mask bits 10-15\n+    \/\/ (d5..d0) and 22-27 (b5..b0) and shift them left by 8 and 4\n+    \/\/ bits respectively.  This is done using vpmullw.  We end up\n+    \/\/ with 4 6-bit values, thus splitting the 3 input bytes,\n+    \/\/ ready for encoding:\n+    \/\/    0 0 d5..d0 0 0 c5..c0 0 0 b5..b0 0 0 a5..a0\n+    \/\/\n+    \/\/ For translation, we recognize that there are 5 distinct\n+    \/\/ ranges of legal Base64 characters as below:\n@@ -5411,1 +5731,9 @@\n-    \/\/ Second phase of the reduction\n+    \/\/   +-------------+-------------+------------+\n+    \/\/   | 6-bit value | ASCII range |   offset   |\n+    \/\/   +-------------+-------------+------------+\n+    \/\/   |    0..25    |    A..Z     |     65     |\n+    \/\/   |   26..51    |    a..z     |     71     |\n+    \/\/   |   52..61    |    0..9     |     -4     |\n+    \/\/   |     62      |   + or -    | -19 or -17 |\n+    \/\/   |     63      |   \/ or _    | -16 or 32  |\n+    \/\/   +-------------+-------------+------------+\n@@ -5413,19 +5741,72 @@\n-    \/\/ Make 3 copies of xmm3 in xmm2, xmm4, xmm5 for doing these\n-    \/\/ shift operations.\n-    __ movdqu(xmm_temp2, xmm_temp3);\n-    __ movdqu(xmm_temp4, xmm_temp3);\n-    __ movdqu(xmm_temp5, xmm_temp3);\n-    __ psrld(xmm_temp2, 1);     \/\/ packed left shifting >> 1\n-    __ psrld(xmm_temp4, 2);     \/\/ packed left shifting >> 2\n-    __ psrld(xmm_temp5, 7);     \/\/ packed left shifting >> 7\n-    __ pxor(xmm_temp2, xmm_temp4);      \/\/ xor the shifted versions\n-    __ pxor(xmm_temp2, xmm_temp5);\n-    __ pxor(xmm_temp2, xmm_temp8);\n-    __ pxor(xmm_temp3, xmm_temp2);\n-    __ pxor(xmm_temp6, xmm_temp3);      \/\/ the result is in xmm6\n-\n-    __ decrement(blocks);\n-    __ jcc(Assembler::zero, L_exit);\n-    __ movdqu(xmm_temp0, xmm_temp6);\n-    __ addptr(data, 16);\n-    __ jmp(L_ghash_loop);\n+    \/\/ We note that vpshufb does a parallel lookup in a\n+    \/\/ destination register using the lower 4 bits of bytes from a\n+    \/\/ source register.  If we use a saturated subtraction and\n+    \/\/ subtract 51 from each 6-bit value, bytes from [0,51]\n+    \/\/ saturate to 0, and [52,63] map to a range of [1,12].  We\n+    \/\/ distinguish the [0,25] and [26,51] ranges by assigning a\n+    \/\/ value of 13 for all 6-bit values less than 26.  We end up\n+    \/\/ with:\n+    \/\/\n+    \/\/   +-------------+-------------+------------+\n+    \/\/   | 6-bit value |   Reduced   |   offset   |\n+    \/\/   +-------------+-------------+------------+\n+    \/\/   |    0..25    |     13      |     65     |\n+    \/\/   |   26..51    |      0      |     71     |\n+    \/\/   |   52..61    |    0..9     |     -4     |\n+    \/\/   |     62      |     11      | -19 or -17 |\n+    \/\/   |     63      |     12      | -16 or 32  |\n+    \/\/   +-------------+-------------+------------+\n+    \/\/\n+    \/\/ We then use a final vpshufb to add the appropriate offset,\n+    \/\/ translating the bytes.\n+    \/\/\n+    \/\/ Load input bytes - only 28 bytes.  Mask the first load to\n+    \/\/ not load into the full register.\n+    __ vpmaskmovd(xmm1, xmm1, Address(source, start_offset, Address::times_1, -4), Assembler::AVX_256bit);\n+\n+    \/\/ Move 3-byte chunks of input (12 bytes) into 16 bytes,\n+    \/\/ ordering by:\n+    \/\/   1, 0, 2, 1; 4, 3, 5, 4; etc.  This groups 6-bit chunks\n+    \/\/   for easy masking\n+    __ vpshufb(xmm1, xmm1, xmm9, Assembler::AVX_256bit);\n+\n+    __ addl(start_offset, 24);\n+\n+    \/\/ Load masking register for first and third (and multiples)\n+    \/\/ 6-bit values.\n+    __ movl(rax, 0x003f03f0);\n+    __ evpbroadcastd(xmm6, rax, Assembler::AVX_256bit);\n+    \/\/ Multiplication constant for \"shifting\" left by 4 and 8 bits\n+    __ movl(rax, 0x01000010);\n+    __ evpbroadcastd(xmm5, rax, Assembler::AVX_256bit);\n+\n+    \/\/ Isolate 6-bit chunks of interest\n+    __ vpand(xmm0, xmm8, xmm1, Assembler::AVX_256bit);\n+\n+    \/\/ Load constants for encoding\n+    __ movl(rax, 0x19191919);\n+    __ evpbroadcastd(xmm3, rax, Assembler::AVX_256bit);\n+    __ movl(rax, 0x33333333);\n+    __ evpbroadcastd(xmm4, rax, Assembler::AVX_256bit);\n+\n+    \/\/ Shift output bytes 0 and 2 into proper lanes\n+    __ vpmulhuw(xmm2, xmm0, xmm7, Assembler::AVX_256bit);\n+\n+    \/\/ Mask and shift output bytes 1 and 3 into proper lanes and\n+    \/\/ combine\n+    __ vpand(xmm0, xmm6, xmm1, Assembler::AVX_256bit);\n+    __ vpmullw(xmm0, xmm5, xmm0, Assembler::AVX_256bit);\n+    __ vpor(xmm0, xmm0, xmm2, Assembler::AVX_256bit);\n+\n+    \/\/ Find out which are 0..25.  This indicates which input\n+    \/\/ values fall in the range of 'A'-'Z', which require an\n+    \/\/ additional offset (see comments above)\n+    __ vpcmpgtb(xmm2, xmm0, xmm3, Assembler::AVX_256bit);\n+    __ vpsubusb(xmm1, xmm0, xmm4, Assembler::AVX_256bit);\n+    __ vpsubb(xmm1, xmm1, xmm2, Assembler::AVX_256bit);\n+\n+    \/\/ Load the proper lookup table\n+    __ lea(r11, ExternalAddress(StubRoutines::x86::base64_avx2_lut_addr()));\n+    __ movl(r15, isURL);\n+    __ shll(r15, 5);\n+    __ vmovdqu(xmm2, Address(r11, r15));\n@@ -5433,7 +5814,5 @@\n-    __ BIND(L_exit);\n-    __ pshufb(xmm_temp6, xmm_temp10);          \/\/ Byte swap 16-byte result\n-    __ movdqu(Address(state, 0), xmm_temp6);   \/\/ store the result\n-    __ leave();\n-    __ ret(0);\n-    return start;\n-  }\n+    \/\/ Shuffle the offsets based on the range calculation done\n+    \/\/ above. This allows us to add the correct offset to the\n+    \/\/ 6-bit value corresponding to the range documented above.\n+    __ vpshufb(xmm1, xmm2, xmm1, Assembler::AVX_256bit);\n+    __ vpaddb(xmm0, xmm1, xmm0, Assembler::AVX_256bit);\n@@ -5441,29 +5820,6 @@\n-  address base64_shuffle_addr()\n-  {\n-    __ align64();\n-    StubCodeMark mark(this, \"StubRoutines\", \"shuffle_base64\");\n-    address start = __ pc();\n-    assert(((unsigned long long)start & 0x3f) == 0,\n-           \"Alignment problem (0x%08llx)\", (unsigned long long)start);\n-    __ emit_data64(0x0405030401020001, relocInfo::none);\n-    __ emit_data64(0x0a0b090a07080607, relocInfo::none);\n-    __ emit_data64(0x10110f100d0e0c0d, relocInfo::none);\n-    __ emit_data64(0x1617151613141213, relocInfo::none);\n-    __ emit_data64(0x1c1d1b1c191a1819, relocInfo::none);\n-    __ emit_data64(0x222321221f201e1f, relocInfo::none);\n-    __ emit_data64(0x2829272825262425, relocInfo::none);\n-    __ emit_data64(0x2e2f2d2e2b2c2a2b, relocInfo::none);\n-    return start;\n-  }\n-\n-  address base64_avx2_shuffle_addr()\n-  {\n-    __ align32();\n-    StubCodeMark mark(this, \"StubRoutines\", \"avx2_shuffle_base64\");\n-    address start = __ pc();\n-    __ emit_data64(0x0809070805060405, relocInfo::none);\n-    __ emit_data64(0x0e0f0d0e0b0c0a0b, relocInfo::none);\n-    __ emit_data64(0x0405030401020001, relocInfo::none);\n-    __ emit_data64(0x0a0b090a07080607, relocInfo::none);\n-    return start;\n-  }\n+    \/\/ Store the encoded bytes\n+    __ vmovdqu(Address(dest, dp), xmm0);\n+    __ addl(dp, 32);\n+\n+    __ cmpl(length, 31);\n+    __ jcc(Assembler::belowEqual, L_process3);\n@@ -5471,2 +5827,0 @@\n-  address base64_avx2_input_mask_addr()\n-  {\n@@ -5474,7 +5828,36 @@\n-    StubCodeMark mark(this, \"StubRoutines\", \"avx2_input_mask_base64\");\n-    address start = __ pc();\n-    __ emit_data64(0x8000000000000000, relocInfo::none);\n-    __ emit_data64(0x8000000080000000, relocInfo::none);\n-    __ emit_data64(0x8000000080000000, relocInfo::none);\n-    __ emit_data64(0x8000000080000000, relocInfo::none);\n-    return start;\n+    __ BIND(L_32byteLoop);\n+\n+    \/\/ Get next 32 bytes\n+    __ vmovdqu(xmm1, Address(source, start_offset, Address::times_1, -4));\n+\n+    __ subl(length, 24);\n+    __ addl(start_offset, 24);\n+\n+    \/\/ This logic is identical to the above, with only constant\n+    \/\/ register loads removed.  Shuffle the input, mask off 6-bit\n+    \/\/ chunks, shift them into place, then add the offset to\n+    \/\/ encode.\n+    __ vpshufb(xmm1, xmm1, xmm9, Assembler::AVX_256bit);\n+\n+    __ vpand(xmm0, xmm8, xmm1, Assembler::AVX_256bit);\n+    __ vpmulhuw(xmm10, xmm0, xmm7, Assembler::AVX_256bit);\n+    __ vpand(xmm0, xmm6, xmm1, Assembler::AVX_256bit);\n+    __ vpmullw(xmm0, xmm5, xmm0, Assembler::AVX_256bit);\n+    __ vpor(xmm0, xmm0, xmm10, Assembler::AVX_256bit);\n+    __ vpcmpgtb(xmm10, xmm0, xmm3, Assembler::AVX_256bit);\n+    __ vpsubusb(xmm1, xmm0, xmm4, Assembler::AVX_256bit);\n+    __ vpsubb(xmm1, xmm1, xmm10, Assembler::AVX_256bit);\n+    __ vpshufb(xmm1, xmm2, xmm1, Assembler::AVX_256bit);\n+    __ vpaddb(xmm0, xmm1, xmm0, Assembler::AVX_256bit);\n+\n+    \/\/ Store the encoded bytes\n+    __ vmovdqu(Address(dest, dp), xmm0);\n+    __ addl(dp, 32);\n+\n+    __ cmpl(length, 31);\n+    __ jcc(Assembler::above, L_32byteLoop);\n+\n+    __ BIND(L_process3);\n+    __ vzeroupper();\n+  } else {\n+    __ BIND(L_process3);\n@@ -5483,67 +5866,2 @@\n-  address base64_avx2_lut_addr()\n-  {\n-    __ align32();\n-    StubCodeMark mark(this, \"StubRoutines\", \"avx2_lut_base64\");\n-    address start = __ pc();\n-    __ emit_data64(0xfcfcfcfcfcfc4741, relocInfo::none);\n-    __ emit_data64(0x0000f0edfcfcfcfc, relocInfo::none);\n-    __ emit_data64(0xfcfcfcfcfcfc4741, relocInfo::none);\n-    __ emit_data64(0x0000f0edfcfcfcfc, relocInfo::none);\n-\n-    \/\/ URL LUT\n-    __ emit_data64(0xfcfcfcfcfcfc4741, relocInfo::none);\n-    __ emit_data64(0x000020effcfcfcfc, relocInfo::none);\n-    __ emit_data64(0xfcfcfcfcfcfc4741, relocInfo::none);\n-    __ emit_data64(0x000020effcfcfcfc, relocInfo::none);\n-    return start;\n-  }\n-\n-  address base64_encoding_table_addr()\n-  {\n-    __ align64();\n-    StubCodeMark mark(this, \"StubRoutines\", \"encoding_table_base64\");\n-    address start = __ pc();\n-    assert(((unsigned long long)start & 0x3f) == 0, \"Alignment problem (0x%08llx)\", (unsigned long long)start);\n-    __ emit_data64(0x4847464544434241, relocInfo::none);\n-    __ emit_data64(0x504f4e4d4c4b4a49, relocInfo::none);\n-    __ emit_data64(0x5857565554535251, relocInfo::none);\n-    __ emit_data64(0x6665646362615a59, relocInfo::none);\n-    __ emit_data64(0x6e6d6c6b6a696867, relocInfo::none);\n-    __ emit_data64(0x767574737271706f, relocInfo::none);\n-    __ emit_data64(0x333231307a797877, relocInfo::none);\n-    __ emit_data64(0x2f2b393837363534, relocInfo::none);\n-\n-    \/\/ URL table\n-    __ emit_data64(0x4847464544434241, relocInfo::none);\n-    __ emit_data64(0x504f4e4d4c4b4a49, relocInfo::none);\n-    __ emit_data64(0x5857565554535251, relocInfo::none);\n-    __ emit_data64(0x6665646362615a59, relocInfo::none);\n-    __ emit_data64(0x6e6d6c6b6a696867, relocInfo::none);\n-    __ emit_data64(0x767574737271706f, relocInfo::none);\n-    __ emit_data64(0x333231307a797877, relocInfo::none);\n-    __ emit_data64(0x5f2d393837363534, relocInfo::none);\n-    return start;\n-  }\n-\n-  \/\/ Code for generating Base64 encoding.\n-  \/\/ Intrinsic function prototype in Base64.java:\n-  \/\/ private void encodeBlock(byte[] src, int sp, int sl, byte[] dst, int dp,\n-  \/\/ boolean isURL) {\n-  address generate_base64_encodeBlock()\n-  {\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", \"implEncode\");\n-    address start = __ pc();\n-    __ enter();\n-\n-    \/\/ Save callee-saved registers before using them\n-    __ push(r12);\n-    __ push(r13);\n-    __ push(r14);\n-    __ push(r15);\n-\n-    \/\/ arguments\n-    const Register source = c_rarg0;       \/\/ Source Array\n-    const Register start_offset = c_rarg1; \/\/ start offset\n-    const Register end_offset = c_rarg2;   \/\/ end offset\n-    const Register dest = c_rarg3;   \/\/ destination array\n+  __ cmpl(length, 3);\n+  __ jcc(Assembler::below, L_exit);\n@@ -5551,11 +5869,5 @@\n-#ifndef _WIN64\n-    const Register dp = c_rarg4;    \/\/ Position for writing to dest array\n-    const Register isURL = c_rarg5; \/\/ Base64 or URL character set\n-#else\n-    const Address dp_mem(rbp, 6 * wordSize); \/\/ length is on stack on Win64\n-    const Address isURL_mem(rbp, 7 * wordSize);\n-    const Register isURL = r10; \/\/ pick the volatile windows register\n-    const Register dp = r12;\n-    __ movl(dp, dp_mem);\n-    __ movl(isURL, isURL_mem);\n-#endif\n+  \/\/ Load the encoding table based on isURL\n+  __ lea(r11, ExternalAddress(StubRoutines::x86::base64_encoding_table_addr()));\n+  __ movl(r15, isURL);\n+  __ shll(r15, 6);\n+  __ addptr(r11, r15);\n@@ -5563,3 +5875,1 @@\n-    const Register length = r14;\n-    const Register encode_table = r13;\n-    Label L_process3, L_exit, L_processdata, L_vbmiLoop, L_not512, L_32byteLoop;\n+  __ BIND(L_processdata);\n@@ -5567,5 +5877,4 @@\n-    \/\/ calculate length from offsets\n-    __ movl(length, end_offset);\n-    __ subl(length, start_offset);\n-    __ cmpl(length, 0);\n-    __ jcc(Assembler::lessEqual, L_exit);\n+  \/\/ Load 3 bytes\n+  __ load_unsigned_byte(r15, Address(source, start_offset));\n+  __ load_unsigned_byte(r10, Address(source, start_offset, Address::times_1, 1));\n+  __ load_unsigned_byte(r13, Address(source, start_offset, Address::times_1, 2));\n@@ -5573,6 +5882,4 @@\n-    \/\/ Code for 512-bit VBMI encoding.  Encodes 48 input bytes into 64\n-    \/\/ output bytes. We read 64 input bytes and ignore the last 16, so be\n-    \/\/ sure not to read past the end of the input buffer.\n-    if (VM_Version::supports_avx512_vbmi()) {\n-      __ cmpl(length, 64); \/\/ Do not overrun input buffer.\n-      __ jcc(Assembler::below, L_not512);\n+  \/\/ Build a 32-bit word with bytes 1, 2, 0, 1\n+  __ movl(rax, r10);\n+  __ shll(r10, 24);\n+  __ orl(rax, r10);\n@@ -5580,4 +5887,1 @@\n-      __ shll(isURL, 6); \/\/ index into decode table based on isURL\n-      __ lea(encode_table, ExternalAddress(StubRoutines::x86::base64_encoding_table_addr()));\n-      __ addptr(encode_table, isURL);\n-      __ shrl(isURL, 6); \/\/ restore isURL\n+  __ subl(length, 3);\n@@ -5585,4 +5889,3 @@\n-      __ mov64(rax, 0x3036242a1016040aull); \/\/ Shifts\n-      __ evmovdquq(xmm3, ExternalAddress(StubRoutines::x86::base64_shuffle_addr()), Assembler::AVX_512bit, r15);\n-      __ evmovdquq(xmm2, Address(encode_table, 0), Assembler::AVX_512bit);\n-      __ evpbroadcastq(xmm1, rax, Assembler::AVX_512bit);\n+  __ shll(r15, 8);\n+  __ shll(r13, 16);\n+  __ orl(rax, r15);\n@@ -5590,2 +5893,1 @@\n-      __ align32();\n-      __ BIND(L_vbmiLoop);\n+  __ addl(start_offset, 3);\n@@ -5593,2 +5895,6 @@\n-      __ vpermb(xmm0, xmm3, Address(source, start_offset), Assembler::AVX_512bit);\n-      __ subl(length, 48);\n+  __ orl(rax, r13);\n+  \/\/ At this point, rax contains | byte1 | byte2 | byte0 | byte1\n+  \/\/ r13 has byte2 << 16 - need low-order 6 bits to translate.\n+  \/\/ This translated byte is the fourth output byte.\n+  __ shrl(r13, 16);\n+  __ andl(r13, 0x3f);\n@@ -5596,4 +5902,3 @@\n-      \/\/ Put the input bytes into the proper lanes for writing, then\n-      \/\/ encode them.\n-      __ evpmultishiftqb(xmm0, xmm1, xmm0, Assembler::AVX_512bit);\n-      __ vpermb(xmm0, xmm0, xmm2, Assembler::AVX_512bit);\n+  \/\/ The high-order 6 bits of r15 (byte0) is translated.\n+  \/\/ The translated byte is the first output byte.\n+  __ shrl(r15, 10);\n@@ -5601,2 +5906,2 @@\n-      \/\/ Write to destination\n-      __ evmovdquq(Address(dest, dp), xmm0, Assembler::AVX_512bit);\n+  __ load_unsigned_byte(r13, Address(r11, r13));\n+  __ load_unsigned_byte(r15, Address(r11, r15));\n@@ -5604,4 +5909,1 @@\n-      __ addptr(dest, 64);\n-      __ addptr(source, 48);\n-      __ cmpl(length, 64);\n-      __ jcc(Assembler::aboveEqual, L_vbmiLoop);\n+  __ movb(Address(dest, dp, Address::times_1, 3), r13);\n@@ -5609,2 +5911,5 @@\n-      __ vzeroupper();\n-    }\n+  \/\/ Extract high-order 4 bits of byte1 and low-order 2 bits of byte0.\n+  \/\/ This translated byte is the second output byte.\n+  __ shrl(rax, 4);\n+  __ movl(r10, rax);\n+  __ andl(rax, 0x3f);\n@@ -5612,177 +5917,1 @@\n-    __ BIND(L_not512);\n-    if (VM_Version::supports_avx2()\n-        && VM_Version::supports_avx512vlbw()) {\n-      \/*\n-      ** This AVX2 encoder is based off the paper at:\n-      **      https:\/\/dl.acm.org\/doi\/10.1145\/3132709\n-      **\n-      ** We use AVX2 SIMD instructions to encode 24 bytes into 32\n-      ** output bytes.\n-      **\n-      *\/\n-      \/\/ Lengths under 32 bytes are done with scalar routine\n-      __ cmpl(length, 31);\n-      __ jcc(Assembler::belowEqual, L_process3);\n-\n-      \/\/ Set up supporting constant table data\n-      __ vmovdqu(xmm9, ExternalAddress(StubRoutines::x86::base64_avx2_shuffle_addr()), rax);\n-      \/\/ 6-bit mask for 2nd and 4th (and multiples) 6-bit values\n-      __ movl(rax, 0x0fc0fc00);\n-      __ vmovdqu(xmm1, ExternalAddress(StubRoutines::x86::base64_avx2_input_mask_addr()), rax);\n-      __ evpbroadcastd(xmm8, rax, Assembler::AVX_256bit);\n-\n-      \/\/ Multiplication constant for \"shifting\" right by 6 and 10\n-      \/\/ bits\n-      __ movl(rax, 0x04000040);\n-\n-      __ subl(length, 24);\n-      __ evpbroadcastd(xmm7, rax, Assembler::AVX_256bit);\n-\n-      \/\/ For the first load, we mask off reading of the first 4\n-      \/\/ bytes into the register. This is so we can get 4 3-byte\n-      \/\/ chunks into each lane of the register, avoiding having to\n-      \/\/ handle end conditions.  We then shuffle these bytes into a\n-      \/\/ specific order so that manipulation is easier.\n-      \/\/\n-      \/\/ The initial read loads the XMM register like this:\n-      \/\/\n-      \/\/ Lower 128-bit lane:\n-      \/\/ +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+\n-      \/\/ | XX | XX | XX | XX | A0 | A1 | A2 | B0 | B1 | B2 | C0 | C1\n-      \/\/ | C2 | D0 | D1 | D2 |\n-      \/\/ +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+\n-      \/\/\n-      \/\/ Upper 128-bit lane:\n-      \/\/ +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+\n-      \/\/ | E0 | E1 | E2 | F0 | F1 | F2 | G0 | G1 | G2 | H0 | H1 | H2\n-      \/\/ | XX | XX | XX | XX |\n-      \/\/ +----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+----+\n-      \/\/\n-      \/\/ Where A0 is the first input byte, B0 is the fourth, etc.\n-      \/\/ The alphabetical significance denotes the 3 bytes to be\n-      \/\/ consumed and encoded into 4 bytes.\n-      \/\/\n-      \/\/ We then shuffle the register so each 32-bit word contains\n-      \/\/ the sequence:\n-      \/\/    A1 A0 A2 A1, B1, B0, B2, B1, etc.\n-      \/\/ Each of these byte sequences are then manipulated into 4\n-      \/\/ 6-bit values ready for encoding.\n-      \/\/\n-      \/\/ If we focus on one set of 3-byte chunks, changing the\n-      \/\/ nomenclature such that A0 => a, A1 => b, and A2 => c, we\n-      \/\/ shuffle such that each 24-bit chunk contains:\n-      \/\/\n-      \/\/ b7 b6 b5 b4 b3 b2 b1 b0 | a7 a6 a5 a4 a3 a2 a1 a0 | c7 c6\n-      \/\/ c5 c4 c3 c2 c1 c0 | b7 b6 b5 b4 b3 b2 b1 b0\n-      \/\/ Explain this step.\n-      \/\/ b3 b2 b1 b0 c5 c4 c3 c2 | c1 c0 d5 d4 d3 d2 d1 d0 | a5 a4\n-      \/\/ a3 a2 a1 a0 b5 b4 | b3 b2 b1 b0 c5 c4 c3 c2\n-      \/\/\n-      \/\/ W first and off all but bits 4-9 and 16-21 (c5..c0 and\n-      \/\/ a5..a0) and shift them using a vector multiplication\n-      \/\/ operation (vpmulhuw) which effectively shifts c right by 6\n-      \/\/ bits and a right by 10 bits.  We similarly mask bits 10-15\n-      \/\/ (d5..d0) and 22-27 (b5..b0) and shift them left by 8 and 4\n-      \/\/ bits respectively.  This is done using vpmullw.  We end up\n-      \/\/ with 4 6-bit values, thus splitting the 3 input bytes,\n-      \/\/ ready for encoding:\n-      \/\/    0 0 d5..d0 0 0 c5..c0 0 0 b5..b0 0 0 a5..a0\n-      \/\/\n-      \/\/ For translation, we recognize that there are 5 distinct\n-      \/\/ ranges of legal Base64 characters as below:\n-      \/\/\n-      \/\/   +-------------+-------------+------------+\n-      \/\/   | 6-bit value | ASCII range |   offset   |\n-      \/\/   +-------------+-------------+------------+\n-      \/\/   |    0..25    |    A..Z     |     65     |\n-      \/\/   |   26..51    |    a..z     |     71     |\n-      \/\/   |   52..61    |    0..9     |     -4     |\n-      \/\/   |     62      |   + or -    | -19 or -17 |\n-      \/\/   |     63      |   \/ or _    | -16 or 32  |\n-      \/\/   +-------------+-------------+------------+\n-      \/\/\n-      \/\/ We note that vpshufb does a parallel lookup in a\n-      \/\/ destination register using the lower 4 bits of bytes from a\n-      \/\/ source register.  If we use a saturated subtraction and\n-      \/\/ subtract 51 from each 6-bit value, bytes from [0,51]\n-      \/\/ saturate to 0, and [52,63] map to a range of [1,12].  We\n-      \/\/ distinguish the [0,25] and [26,51] ranges by assigning a\n-      \/\/ value of 13 for all 6-bit values less than 26.  We end up\n-      \/\/ with:\n-      \/\/\n-      \/\/   +-------------+-------------+------------+\n-      \/\/   | 6-bit value |   Reduced   |   offset   |\n-      \/\/   +-------------+-------------+------------+\n-      \/\/   |    0..25    |     13      |     65     |\n-      \/\/   |   26..51    |      0      |     71     |\n-      \/\/   |   52..61    |    0..9     |     -4     |\n-      \/\/   |     62      |     11      | -19 or -17 |\n-      \/\/   |     63      |     12      | -16 or 32  |\n-      \/\/   +-------------+-------------+------------+\n-      \/\/\n-      \/\/ We then use a final vpshufb to add the appropriate offset,\n-      \/\/ translating the bytes.\n-      \/\/\n-      \/\/ Load input bytes - only 28 bytes.  Mask the first load to\n-      \/\/ not load into the full register.\n-      __ vpmaskmovd(xmm1, xmm1, Address(source, start_offset, Address::times_1, -4), Assembler::AVX_256bit);\n-\n-      \/\/ Move 3-byte chunks of input (12 bytes) into 16 bytes,\n-      \/\/ ordering by:\n-      \/\/   1, 0, 2, 1; 4, 3, 5, 4; etc.  This groups 6-bit chunks\n-      \/\/   for easy masking\n-      __ vpshufb(xmm1, xmm1, xmm9, Assembler::AVX_256bit);\n-\n-      __ addl(start_offset, 24);\n-\n-      \/\/ Load masking register for first and third (and multiples)\n-      \/\/ 6-bit values.\n-      __ movl(rax, 0x003f03f0);\n-      __ evpbroadcastd(xmm6, rax, Assembler::AVX_256bit);\n-      \/\/ Multiplication constant for \"shifting\" left by 4 and 8 bits\n-      __ movl(rax, 0x01000010);\n-      __ evpbroadcastd(xmm5, rax, Assembler::AVX_256bit);\n-\n-      \/\/ Isolate 6-bit chunks of interest\n-      __ vpand(xmm0, xmm8, xmm1, Assembler::AVX_256bit);\n-\n-      \/\/ Load constants for encoding\n-      __ movl(rax, 0x19191919);\n-      __ evpbroadcastd(xmm3, rax, Assembler::AVX_256bit);\n-      __ movl(rax, 0x33333333);\n-      __ evpbroadcastd(xmm4, rax, Assembler::AVX_256bit);\n-\n-      \/\/ Shift output bytes 0 and 2 into proper lanes\n-      __ vpmulhuw(xmm2, xmm0, xmm7, Assembler::AVX_256bit);\n-\n-      \/\/ Mask and shift output bytes 1 and 3 into proper lanes and\n-      \/\/ combine\n-      __ vpand(xmm0, xmm6, xmm1, Assembler::AVX_256bit);\n-      __ vpmullw(xmm0, xmm5, xmm0, Assembler::AVX_256bit);\n-      __ vpor(xmm0, xmm0, xmm2, Assembler::AVX_256bit);\n-\n-      \/\/ Find out which are 0..25.  This indicates which input\n-      \/\/ values fall in the range of 'A'-'Z', which require an\n-      \/\/ additional offset (see comments above)\n-      __ vpcmpgtb(xmm2, xmm0, xmm3, Assembler::AVX_256bit);\n-      __ vpsubusb(xmm1, xmm0, xmm4, Assembler::AVX_256bit);\n-      __ vpsubb(xmm1, xmm1, xmm2, Assembler::AVX_256bit);\n-\n-      \/\/ Load the proper lookup table\n-      __ lea(r11, ExternalAddress(StubRoutines::x86::base64_avx2_lut_addr()));\n-      __ movl(r15, isURL);\n-      __ shll(r15, 5);\n-      __ vmovdqu(xmm2, Address(r11, r15));\n-\n-      \/\/ Shuffle the offsets based on the range calculation done\n-      \/\/ above. This allows us to add the correct offset to the\n-      \/\/ 6-bit value corresponding to the range documented above.\n-      __ vpshufb(xmm1, xmm2, xmm1, Assembler::AVX_256bit);\n-      __ vpaddb(xmm0, xmm1, xmm0, Assembler::AVX_256bit);\n-\n-      \/\/ Store the encoded bytes\n-      __ vmovdqu(Address(dest, dp), xmm0);\n-      __ addl(dp, 32);\n-\n-      __ cmpl(length, 31);\n-      __ jcc(Assembler::belowEqual, L_process3);\n+  __ movb(Address(dest, dp, Address::times_1, 0), r15);\n@@ -5790,38 +5919,1 @@\n-      __ align32();\n-      __ BIND(L_32byteLoop);\n-\n-      \/\/ Get next 32 bytes\n-      __ vmovdqu(xmm1, Address(source, start_offset, Address::times_1, -4));\n-\n-      __ subl(length, 24);\n-      __ addl(start_offset, 24);\n-\n-      \/\/ This logic is identical to the above, with only constant\n-      \/\/ register loads removed.  Shuffle the input, mask off 6-bit\n-      \/\/ chunks, shift them into place, then add the offset to\n-      \/\/ encode.\n-      __ vpshufb(xmm1, xmm1, xmm9, Assembler::AVX_256bit);\n-\n-      __ vpand(xmm0, xmm8, xmm1, Assembler::AVX_256bit);\n-      __ vpmulhuw(xmm10, xmm0, xmm7, Assembler::AVX_256bit);\n-      __ vpand(xmm0, xmm6, xmm1, Assembler::AVX_256bit);\n-      __ vpmullw(xmm0, xmm5, xmm0, Assembler::AVX_256bit);\n-      __ vpor(xmm0, xmm0, xmm10, Assembler::AVX_256bit);\n-      __ vpcmpgtb(xmm10, xmm0, xmm3, Assembler::AVX_256bit);\n-      __ vpsubusb(xmm1, xmm0, xmm4, Assembler::AVX_256bit);\n-      __ vpsubb(xmm1, xmm1, xmm10, Assembler::AVX_256bit);\n-      __ vpshufb(xmm1, xmm2, xmm1, Assembler::AVX_256bit);\n-      __ vpaddb(xmm0, xmm1, xmm0, Assembler::AVX_256bit);\n-\n-      \/\/ Store the encoded bytes\n-      __ vmovdqu(Address(dest, dp), xmm0);\n-      __ addl(dp, 32);\n-\n-      __ cmpl(length, 31);\n-      __ jcc(Assembler::above, L_32byteLoop);\n-\n-      __ BIND(L_process3);\n-      __ vzeroupper();\n-    } else {\n-      __ BIND(L_process3);\n-    }\n+  __ load_unsigned_byte(rax, Address(r11, rax));\n@@ -5829,2 +5921,4 @@\n-    __ cmpl(length, 3);\n-    __ jcc(Assembler::below, L_exit);\n+  \/\/ Extract low-order 2 bits of byte1 and high-order 4 bits of byte2.\n+  \/\/ This translated byte is the third output byte.\n+  __ shrl(r10, 18);\n+  __ andl(r10, 0x3f);\n@@ -5832,5 +5926,1 @@\n-    \/\/ Load the encoding table based on isURL\n-    __ lea(r11, ExternalAddress(StubRoutines::x86::base64_encoding_table_addr()));\n-    __ movl(r15, isURL);\n-    __ shll(r15, 6);\n-    __ addptr(r11, r15);\n+  __ load_unsigned_byte(r10, Address(r11, r10));\n@@ -5838,1 +5928,14 @@\n-    __ BIND(L_processdata);\n+  __ movb(Address(dest, dp, Address::times_1, 1), rax);\n+  __ movb(Address(dest, dp, Address::times_1, 2), r10);\n+\n+  __ addl(dp, 4);\n+  __ cmpl(length, 3);\n+  __ jcc(Assembler::aboveEqual, L_processdata);\n+\n+  __ BIND(L_exit);\n+  __ pop(r15);\n+  __ pop(r14);\n+  __ pop(r13);\n+  __ pop(r12);\n+  __ leave();\n+  __ ret(0);\n@@ -5840,4 +5943,2 @@\n-    \/\/ Load 3 bytes\n-    __ load_unsigned_byte(r15, Address(source, start_offset));\n-    __ load_unsigned_byte(r10, Address(source, start_offset, Address::times_1, 1));\n-    __ load_unsigned_byte(r13, Address(source, start_offset, Address::times_1, 2));\n+  return start;\n+}\n@@ -5845,4 +5946,19 @@\n-    \/\/ Build a 32-bit word with bytes 1, 2, 0, 1\n-    __ movl(rax, r10);\n-    __ shll(r10, 24);\n-    __ orl(rax, r10);\n+\/\/ base64 AVX512vbmi tables\n+address StubGenerator::base64_vbmi_lookup_lo_addr() {\n+  __ align64();\n+  StubCodeMark mark(this, \"StubRoutines\", \"lookup_lo_base64\");\n+  address start = __ pc();\n+\n+  assert(((unsigned long long)start & 0x3f) == 0,\n+         \"Alignment problem (0x%08llx)\", (unsigned long long)start);\n+  __ emit_data64(0x8080808080808080, relocInfo::none);\n+  __ emit_data64(0x8080808080808080, relocInfo::none);\n+  __ emit_data64(0x8080808080808080, relocInfo::none);\n+  __ emit_data64(0x8080808080808080, relocInfo::none);\n+  __ emit_data64(0x8080808080808080, relocInfo::none);\n+  __ emit_data64(0x3f8080803e808080, relocInfo::none);\n+  __ emit_data64(0x3b3a393837363534, relocInfo::none);\n+  __ emit_data64(0x8080808080803d3c, relocInfo::none);\n+\n+  return start;\n+}\n@@ -5850,1 +5966,15 @@\n-    __ subl(length, 3);\n+address StubGenerator::base64_vbmi_lookup_hi_addr() {\n+  __ align64();\n+  StubCodeMark mark(this, \"StubRoutines\", \"lookup_hi_base64\");\n+  address start = __ pc();\n+\n+  assert(((unsigned long long)start & 0x3f) == 0,\n+         \"Alignment problem (0x%08llx)\", (unsigned long long)start);\n+  __ emit_data64(0x0605040302010080, relocInfo::none);\n+  __ emit_data64(0x0e0d0c0b0a090807, relocInfo::none);\n+  __ emit_data64(0x161514131211100f, relocInfo::none);\n+  __ emit_data64(0x8080808080191817, relocInfo::none);\n+  __ emit_data64(0x201f1e1d1c1b1a80, relocInfo::none);\n+  __ emit_data64(0x2827262524232221, relocInfo::none);\n+  __ emit_data64(0x302f2e2d2c2b2a29, relocInfo::none);\n+  __ emit_data64(0x8080808080333231, relocInfo::none);\n@@ -5852,3 +5982,17 @@\n-    __ shll(r15, 8);\n-    __ shll(r13, 16);\n-    __ orl(rax, r15);\n+  return start;\n+}\n+address StubGenerator::base64_vbmi_lookup_lo_url_addr() {\n+  __ align64();\n+  StubCodeMark mark(this, \"StubRoutines\", \"lookup_lo_base64url\");\n+  address start = __ pc();\n+\n+  assert(((unsigned long long)start & 0x3f) == 0,\n+         \"Alignment problem (0x%08llx)\", (unsigned long long)start);\n+  __ emit_data64(0x8080808080808080, relocInfo::none);\n+  __ emit_data64(0x8080808080808080, relocInfo::none);\n+  __ emit_data64(0x8080808080808080, relocInfo::none);\n+  __ emit_data64(0x8080808080808080, relocInfo::none);\n+  __ emit_data64(0x8080808080808080, relocInfo::none);\n+  __ emit_data64(0x80803e8080808080, relocInfo::none);\n+  __ emit_data64(0x3b3a393837363534, relocInfo::none);\n+  __ emit_data64(0x8080808080803d3c, relocInfo::none);\n@@ -5856,1 +6000,2 @@\n-    __ addl(start_offset, 3);\n+  return start;\n+}\n@@ -5858,6 +6003,15 @@\n-    __ orl(rax, r13);\n-    \/\/ At this point, rax contains | byte1 | byte2 | byte0 | byte1\n-    \/\/ r13 has byte2 << 16 - need low-order 6 bits to translate.\n-    \/\/ This translated byte is the fourth output byte.\n-    __ shrl(r13, 16);\n-    __ andl(r13, 0x3f);\n+address StubGenerator::base64_vbmi_lookup_hi_url_addr() {\n+  __ align64();\n+  StubCodeMark mark(this, \"StubRoutines\", \"lookup_hi_base64url\");\n+  address start = __ pc();\n+\n+  assert(((unsigned long long)start & 0x3f) == 0,\n+         \"Alignment problem (0x%08llx)\", (unsigned long long)start);\n+  __ emit_data64(0x0605040302010080, relocInfo::none);\n+  __ emit_data64(0x0e0d0c0b0a090807, relocInfo::none);\n+  __ emit_data64(0x161514131211100f, relocInfo::none);\n+  __ emit_data64(0x3f80808080191817, relocInfo::none);\n+  __ emit_data64(0x201f1e1d1c1b1a80, relocInfo::none);\n+  __ emit_data64(0x2827262524232221, relocInfo::none);\n+  __ emit_data64(0x302f2e2d2c2b2a29, relocInfo::none);\n+  __ emit_data64(0x8080808080333231, relocInfo::none);\n@@ -5865,3 +6019,2 @@\n-    \/\/ The high-order 6 bits of r15 (byte0) is translated.\n-    \/\/ The translated byte is the first output byte.\n-    __ shrl(r15, 10);\n+  return start;\n+}\n@@ -5869,2 +6022,15 @@\n-    __ load_unsigned_byte(r13, Address(r11, r13));\n-    __ load_unsigned_byte(r15, Address(r11, r15));\n+address StubGenerator::base64_vbmi_pack_vec_addr() {\n+  __ align64();\n+  StubCodeMark mark(this, \"StubRoutines\", \"pack_vec_base64\");\n+  address start = __ pc();\n+\n+  assert(((unsigned long long)start & 0x3f) == 0,\n+         \"Alignment problem (0x%08llx)\", (unsigned long long)start);\n+  __ emit_data64(0x090a040506000102, relocInfo::none);\n+  __ emit_data64(0x161011120c0d0e08, relocInfo::none);\n+  __ emit_data64(0x1c1d1e18191a1415, relocInfo::none);\n+  __ emit_data64(0x292a242526202122, relocInfo::none);\n+  __ emit_data64(0x363031322c2d2e28, relocInfo::none);\n+  __ emit_data64(0x3c3d3e38393a3435, relocInfo::none);\n+  __ emit_data64(0x0000000000000000, relocInfo::none);\n+  __ emit_data64(0x0000000000000000, relocInfo::none);\n@@ -5872,1 +6038,2 @@\n-    __ movb(Address(dest, dp, Address::times_1, 3), r13);\n+  return start;\n+}\n@@ -5874,5 +6041,15 @@\n-    \/\/ Extract high-order 4 bits of byte1 and low-order 2 bits of byte0.\n-    \/\/ This translated byte is the second output byte.\n-    __ shrl(rax, 4);\n-    __ movl(r10, rax);\n-    __ andl(rax, 0x3f);\n+address StubGenerator::base64_vbmi_join_0_1_addr() {\n+  __ align64();\n+  StubCodeMark mark(this, \"StubRoutines\", \"join_0_1_base64\");\n+  address start = __ pc();\n+\n+  assert(((unsigned long long)start & 0x3f) == 0,\n+         \"Alignment problem (0x%08llx)\", (unsigned long long)start);\n+  __ emit_data64(0x090a040506000102, relocInfo::none);\n+  __ emit_data64(0x161011120c0d0e08, relocInfo::none);\n+  __ emit_data64(0x1c1d1e18191a1415, relocInfo::none);\n+  __ emit_data64(0x292a242526202122, relocInfo::none);\n+  __ emit_data64(0x363031322c2d2e28, relocInfo::none);\n+  __ emit_data64(0x3c3d3e38393a3435, relocInfo::none);\n+  __ emit_data64(0x494a444546404142, relocInfo::none);\n+  __ emit_data64(0x565051524c4d4e48, relocInfo::none);\n@@ -5880,1 +6057,2 @@\n-    __ movb(Address(dest, dp, Address::times_1, 0), r15);\n+  return start;\n+}\n@@ -5882,1 +6060,15 @@\n-    __ load_unsigned_byte(rax, Address(r11, rax));\n+address StubGenerator::base64_vbmi_join_1_2_addr() {\n+  __ align64();\n+  StubCodeMark mark(this, \"StubRoutines\", \"join_1_2_base64\");\n+  address start = __ pc();\n+\n+  assert(((unsigned long long)start & 0x3f) == 0,\n+         \"Alignment problem (0x%08llx)\", (unsigned long long)start);\n+  __ emit_data64(0x1c1d1e18191a1415, relocInfo::none);\n+  __ emit_data64(0x292a242526202122, relocInfo::none);\n+  __ emit_data64(0x363031322c2d2e28, relocInfo::none);\n+  __ emit_data64(0x3c3d3e38393a3435, relocInfo::none);\n+  __ emit_data64(0x494a444546404142, relocInfo::none);\n+  __ emit_data64(0x565051524c4d4e48, relocInfo::none);\n+  __ emit_data64(0x5c5d5e58595a5455, relocInfo::none);\n+  __ emit_data64(0x696a646566606162, relocInfo::none);\n@@ -5884,4 +6076,2 @@\n-    \/\/ Extract low-order 2 bits of byte1 and high-order 4 bits of byte2.\n-    \/\/ This translated byte is the third output byte.\n-    __ shrl(r10, 18);\n-    __ andl(r10, 0x3f);\n+  return start;\n+}\n@@ -5889,1 +6079,15 @@\n-    __ load_unsigned_byte(r10, Address(r11, r10));\n+address StubGenerator::base64_vbmi_join_2_3_addr() {\n+  __ align64();\n+  StubCodeMark mark(this, \"StubRoutines\", \"join_2_3_base64\");\n+  address start = __ pc();\n+\n+  assert(((unsigned long long)start & 0x3f) == 0,\n+         \"Alignment problem (0x%08llx)\", (unsigned long long)start);\n+  __ emit_data64(0x363031322c2d2e28, relocInfo::none);\n+  __ emit_data64(0x3c3d3e38393a3435, relocInfo::none);\n+  __ emit_data64(0x494a444546404142, relocInfo::none);\n+  __ emit_data64(0x565051524c4d4e48, relocInfo::none);\n+  __ emit_data64(0x5c5d5e58595a5455, relocInfo::none);\n+  __ emit_data64(0x696a646566606162, relocInfo::none);\n+  __ emit_data64(0x767071726c6d6e68, relocInfo::none);\n+  __ emit_data64(0x7c7d7e78797a7475, relocInfo::none);\n@@ -5891,2 +6095,2 @@\n-    __ movb(Address(dest, dp, Address::times_1, 1), rax);\n-    __ movb(Address(dest, dp, Address::times_1, 2), r10);\n+  return start;\n+}\n@@ -5894,3 +6098,70 @@\n-    __ addl(dp, 4);\n-    __ cmpl(length, 3);\n-    __ jcc(Assembler::aboveEqual, L_processdata);\n+address StubGenerator::base64_decoding_table_addr() {\n+  StubCodeMark mark(this, \"StubRoutines\", \"decoding_table_base64\");\n+  address start = __ pc();\n+\n+  __ emit_data64(0xffffffffffffffff, relocInfo::none);\n+  __ emit_data64(0xffffffffffffffff, relocInfo::none);\n+  __ emit_data64(0xffffffffffffffff, relocInfo::none);\n+  __ emit_data64(0xffffffffffffffff, relocInfo::none);\n+  __ emit_data64(0xffffffffffffffff, relocInfo::none);\n+  __ emit_data64(0x3fffffff3effffff, relocInfo::none);\n+  __ emit_data64(0x3b3a393837363534, relocInfo::none);\n+  __ emit_data64(0xffffffffffff3d3c, relocInfo::none);\n+  __ emit_data64(0x06050403020100ff, relocInfo::none);\n+  __ emit_data64(0x0e0d0c0b0a090807, relocInfo::none);\n+  __ emit_data64(0x161514131211100f, relocInfo::none);\n+  __ emit_data64(0xffffffffff191817, relocInfo::none);\n+  __ emit_data64(0x201f1e1d1c1b1aff, relocInfo::none);\n+  __ emit_data64(0x2827262524232221, relocInfo::none);\n+  __ emit_data64(0x302f2e2d2c2b2a29, relocInfo::none);\n+  __ emit_data64(0xffffffffff333231, relocInfo::none);\n+  __ emit_data64(0xffffffffffffffff, relocInfo::none);\n+  __ emit_data64(0xffffffffffffffff, relocInfo::none);\n+  __ emit_data64(0xffffffffffffffff, relocInfo::none);\n+  __ emit_data64(0xffffffffffffffff, relocInfo::none);\n+  __ emit_data64(0xffffffffffffffff, relocInfo::none);\n+  __ emit_data64(0xffffffffffffffff, relocInfo::none);\n+  __ emit_data64(0xffffffffffffffff, relocInfo::none);\n+  __ emit_data64(0xffffffffffffffff, relocInfo::none);\n+  __ emit_data64(0xffffffffffffffff, relocInfo::none);\n+  __ emit_data64(0xffffffffffffffff, relocInfo::none);\n+  __ emit_data64(0xffffffffffffffff, relocInfo::none);\n+  __ emit_data64(0xffffffffffffffff, relocInfo::none);\n+  __ emit_data64(0xffffffffffffffff, relocInfo::none);\n+  __ emit_data64(0xffffffffffffffff, relocInfo::none);\n+  __ emit_data64(0xffffffffffffffff, relocInfo::none);\n+  __ emit_data64(0xffffffffffffffff, relocInfo::none);\n+\n+  \/\/ URL table\n+  __ emit_data64(0xffffffffffffffff, relocInfo::none);\n+  __ emit_data64(0xffffffffffffffff, relocInfo::none);\n+  __ emit_data64(0xffffffffffffffff, relocInfo::none);\n+  __ emit_data64(0xffffffffffffffff, relocInfo::none);\n+  __ emit_data64(0xffffffffffffffff, relocInfo::none);\n+  __ emit_data64(0xffff3effffffffff, relocInfo::none);\n+  __ emit_data64(0x3b3a393837363534, relocInfo::none);\n+  __ emit_data64(0xffffffffffff3d3c, relocInfo::none);\n+  __ emit_data64(0x06050403020100ff, relocInfo::none);\n+  __ emit_data64(0x0e0d0c0b0a090807, relocInfo::none);\n+  __ emit_data64(0x161514131211100f, relocInfo::none);\n+  __ emit_data64(0x3fffffffff191817, relocInfo::none);\n+  __ emit_data64(0x201f1e1d1c1b1aff, relocInfo::none);\n+  __ emit_data64(0x2827262524232221, relocInfo::none);\n+  __ emit_data64(0x302f2e2d2c2b2a29, relocInfo::none);\n+  __ emit_data64(0xffffffffff333231, relocInfo::none);\n+  __ emit_data64(0xffffffffffffffff, relocInfo::none);\n+  __ emit_data64(0xffffffffffffffff, relocInfo::none);\n+  __ emit_data64(0xffffffffffffffff, relocInfo::none);\n+  __ emit_data64(0xffffffffffffffff, relocInfo::none);\n+  __ emit_data64(0xffffffffffffffff, relocInfo::none);\n+  __ emit_data64(0xffffffffffffffff, relocInfo::none);\n+  __ emit_data64(0xffffffffffffffff, relocInfo::none);\n+  __ emit_data64(0xffffffffffffffff, relocInfo::none);\n+  __ emit_data64(0xffffffffffffffff, relocInfo::none);\n+  __ emit_data64(0xffffffffffffffff, relocInfo::none);\n+  __ emit_data64(0xffffffffffffffff, relocInfo::none);\n+  __ emit_data64(0xffffffffffffffff, relocInfo::none);\n+  __ emit_data64(0xffffffffffffffff, relocInfo::none);\n+  __ emit_data64(0xffffffffffffffff, relocInfo::none);\n+  __ emit_data64(0xffffffffffffffff, relocInfo::none);\n+  __ emit_data64(0xffffffffffffffff, relocInfo::none);\n@@ -5898,217 +6169,2 @@\n-    __ BIND(L_exit);\n-    __ pop(r15);\n-    __ pop(r14);\n-    __ pop(r13);\n-    __ pop(r12);\n-    __ leave();\n-    __ ret(0);\n-    return start;\n-  }\n-\n-  \/\/ base64 AVX512vbmi tables\n-  address base64_vbmi_lookup_lo_addr() {\n-    __ align64();\n-    StubCodeMark mark(this, \"StubRoutines\", \"lookup_lo_base64\");\n-    address start = __ pc();\n-    assert(((unsigned long long)start & 0x3f) == 0,\n-           \"Alignment problem (0x%08llx)\", (unsigned long long)start);\n-    __ emit_data64(0x8080808080808080, relocInfo::none);\n-    __ emit_data64(0x8080808080808080, relocInfo::none);\n-    __ emit_data64(0x8080808080808080, relocInfo::none);\n-    __ emit_data64(0x8080808080808080, relocInfo::none);\n-    __ emit_data64(0x8080808080808080, relocInfo::none);\n-    __ emit_data64(0x3f8080803e808080, relocInfo::none);\n-    __ emit_data64(0x3b3a393837363534, relocInfo::none);\n-    __ emit_data64(0x8080808080803d3c, relocInfo::none);\n-    return start;\n-  }\n-\n-  address base64_vbmi_lookup_hi_addr() {\n-    __ align64();\n-    StubCodeMark mark(this, \"StubRoutines\", \"lookup_hi_base64\");\n-    address start = __ pc();\n-    assert(((unsigned long long)start & 0x3f) == 0,\n-           \"Alignment problem (0x%08llx)\", (unsigned long long)start);\n-    __ emit_data64(0x0605040302010080, relocInfo::none);\n-    __ emit_data64(0x0e0d0c0b0a090807, relocInfo::none);\n-    __ emit_data64(0x161514131211100f, relocInfo::none);\n-    __ emit_data64(0x8080808080191817, relocInfo::none);\n-    __ emit_data64(0x201f1e1d1c1b1a80, relocInfo::none);\n-    __ emit_data64(0x2827262524232221, relocInfo::none);\n-    __ emit_data64(0x302f2e2d2c2b2a29, relocInfo::none);\n-    __ emit_data64(0x8080808080333231, relocInfo::none);\n-    return start;\n-  }\n-  address base64_vbmi_lookup_lo_url_addr() {\n-    __ align64();\n-    StubCodeMark mark(this, \"StubRoutines\", \"lookup_lo_base64url\");\n-    address start = __ pc();\n-    assert(((unsigned long long)start & 0x3f) == 0,\n-           \"Alignment problem (0x%08llx)\", (unsigned long long)start);\n-    __ emit_data64(0x8080808080808080, relocInfo::none);\n-    __ emit_data64(0x8080808080808080, relocInfo::none);\n-    __ emit_data64(0x8080808080808080, relocInfo::none);\n-    __ emit_data64(0x8080808080808080, relocInfo::none);\n-    __ emit_data64(0x8080808080808080, relocInfo::none);\n-    __ emit_data64(0x80803e8080808080, relocInfo::none);\n-    __ emit_data64(0x3b3a393837363534, relocInfo::none);\n-    __ emit_data64(0x8080808080803d3c, relocInfo::none);\n-    return start;\n-  }\n-\n-  address base64_vbmi_lookup_hi_url_addr() {\n-    __ align64();\n-    StubCodeMark mark(this, \"StubRoutines\", \"lookup_hi_base64url\");\n-    address start = __ pc();\n-    assert(((unsigned long long)start & 0x3f) == 0,\n-           \"Alignment problem (0x%08llx)\", (unsigned long long)start);\n-    __ emit_data64(0x0605040302010080, relocInfo::none);\n-    __ emit_data64(0x0e0d0c0b0a090807, relocInfo::none);\n-    __ emit_data64(0x161514131211100f, relocInfo::none);\n-    __ emit_data64(0x3f80808080191817, relocInfo::none);\n-    __ emit_data64(0x201f1e1d1c1b1a80, relocInfo::none);\n-    __ emit_data64(0x2827262524232221, relocInfo::none);\n-    __ emit_data64(0x302f2e2d2c2b2a29, relocInfo::none);\n-    __ emit_data64(0x8080808080333231, relocInfo::none);\n-    return start;\n-  }\n-\n-  address base64_vbmi_pack_vec_addr() {\n-    __ align64();\n-    StubCodeMark mark(this, \"StubRoutines\", \"pack_vec_base64\");\n-    address start = __ pc();\n-    assert(((unsigned long long)start & 0x3f) == 0,\n-           \"Alignment problem (0x%08llx)\", (unsigned long long)start);\n-    __ emit_data64(0x090a040506000102, relocInfo::none);\n-    __ emit_data64(0x161011120c0d0e08, relocInfo::none);\n-    __ emit_data64(0x1c1d1e18191a1415, relocInfo::none);\n-    __ emit_data64(0x292a242526202122, relocInfo::none);\n-    __ emit_data64(0x363031322c2d2e28, relocInfo::none);\n-    __ emit_data64(0x3c3d3e38393a3435, relocInfo::none);\n-    __ emit_data64(0x0000000000000000, relocInfo::none);\n-    __ emit_data64(0x0000000000000000, relocInfo::none);\n-    return start;\n-  }\n-\n-  address base64_vbmi_join_0_1_addr() {\n-    __ align64();\n-    StubCodeMark mark(this, \"StubRoutines\", \"join_0_1_base64\");\n-    address start = __ pc();\n-    assert(((unsigned long long)start & 0x3f) == 0,\n-           \"Alignment problem (0x%08llx)\", (unsigned long long)start);\n-    __ emit_data64(0x090a040506000102, relocInfo::none);\n-    __ emit_data64(0x161011120c0d0e08, relocInfo::none);\n-    __ emit_data64(0x1c1d1e18191a1415, relocInfo::none);\n-    __ emit_data64(0x292a242526202122, relocInfo::none);\n-    __ emit_data64(0x363031322c2d2e28, relocInfo::none);\n-    __ emit_data64(0x3c3d3e38393a3435, relocInfo::none);\n-    __ emit_data64(0x494a444546404142, relocInfo::none);\n-    __ emit_data64(0x565051524c4d4e48, relocInfo::none);\n-    return start;\n-  }\n-\n-  address base64_vbmi_join_1_2_addr() {\n-    __ align64();\n-    StubCodeMark mark(this, \"StubRoutines\", \"join_1_2_base64\");\n-    address start = __ pc();\n-    assert(((unsigned long long)start & 0x3f) == 0,\n-           \"Alignment problem (0x%08llx)\", (unsigned long long)start);\n-    __ emit_data64(0x1c1d1e18191a1415, relocInfo::none);\n-    __ emit_data64(0x292a242526202122, relocInfo::none);\n-    __ emit_data64(0x363031322c2d2e28, relocInfo::none);\n-    __ emit_data64(0x3c3d3e38393a3435, relocInfo::none);\n-    __ emit_data64(0x494a444546404142, relocInfo::none);\n-    __ emit_data64(0x565051524c4d4e48, relocInfo::none);\n-    __ emit_data64(0x5c5d5e58595a5455, relocInfo::none);\n-    __ emit_data64(0x696a646566606162, relocInfo::none);\n-    return start;\n-  }\n-\n-  address base64_vbmi_join_2_3_addr() {\n-    __ align64();\n-    StubCodeMark mark(this, \"StubRoutines\", \"join_2_3_base64\");\n-    address start = __ pc();\n-    assert(((unsigned long long)start & 0x3f) == 0,\n-           \"Alignment problem (0x%08llx)\", (unsigned long long)start);\n-    __ emit_data64(0x363031322c2d2e28, relocInfo::none);\n-    __ emit_data64(0x3c3d3e38393a3435, relocInfo::none);\n-    __ emit_data64(0x494a444546404142, relocInfo::none);\n-    __ emit_data64(0x565051524c4d4e48, relocInfo::none);\n-    __ emit_data64(0x5c5d5e58595a5455, relocInfo::none);\n-    __ emit_data64(0x696a646566606162, relocInfo::none);\n-    __ emit_data64(0x767071726c6d6e68, relocInfo::none);\n-    __ emit_data64(0x7c7d7e78797a7475, relocInfo::none);\n-    return start;\n-  }\n-\n-  address base64_decoding_table_addr() {\n-    StubCodeMark mark(this, \"StubRoutines\", \"decoding_table_base64\");\n-    address start = __ pc();\n-    __ emit_data64(0xffffffffffffffff, relocInfo::none);\n-    __ emit_data64(0xffffffffffffffff, relocInfo::none);\n-    __ emit_data64(0xffffffffffffffff, relocInfo::none);\n-    __ emit_data64(0xffffffffffffffff, relocInfo::none);\n-    __ emit_data64(0xffffffffffffffff, relocInfo::none);\n-    __ emit_data64(0x3fffffff3effffff, relocInfo::none);\n-    __ emit_data64(0x3b3a393837363534, relocInfo::none);\n-    __ emit_data64(0xffffffffffff3d3c, relocInfo::none);\n-    __ emit_data64(0x06050403020100ff, relocInfo::none);\n-    __ emit_data64(0x0e0d0c0b0a090807, relocInfo::none);\n-    __ emit_data64(0x161514131211100f, relocInfo::none);\n-    __ emit_data64(0xffffffffff191817, relocInfo::none);\n-    __ emit_data64(0x201f1e1d1c1b1aff, relocInfo::none);\n-    __ emit_data64(0x2827262524232221, relocInfo::none);\n-    __ emit_data64(0x302f2e2d2c2b2a29, relocInfo::none);\n-    __ emit_data64(0xffffffffff333231, relocInfo::none);\n-    __ emit_data64(0xffffffffffffffff, relocInfo::none);\n-    __ emit_data64(0xffffffffffffffff, relocInfo::none);\n-    __ emit_data64(0xffffffffffffffff, relocInfo::none);\n-    __ emit_data64(0xffffffffffffffff, relocInfo::none);\n-    __ emit_data64(0xffffffffffffffff, relocInfo::none);\n-    __ emit_data64(0xffffffffffffffff, relocInfo::none);\n-    __ emit_data64(0xffffffffffffffff, relocInfo::none);\n-    __ emit_data64(0xffffffffffffffff, relocInfo::none);\n-    __ emit_data64(0xffffffffffffffff, relocInfo::none);\n-    __ emit_data64(0xffffffffffffffff, relocInfo::none);\n-    __ emit_data64(0xffffffffffffffff, relocInfo::none);\n-    __ emit_data64(0xffffffffffffffff, relocInfo::none);\n-    __ emit_data64(0xffffffffffffffff, relocInfo::none);\n-    __ emit_data64(0xffffffffffffffff, relocInfo::none);\n-    __ emit_data64(0xffffffffffffffff, relocInfo::none);\n-    __ emit_data64(0xffffffffffffffff, relocInfo::none);\n-\n-    \/\/ URL table\n-    __ emit_data64(0xffffffffffffffff, relocInfo::none);\n-    __ emit_data64(0xffffffffffffffff, relocInfo::none);\n-    __ emit_data64(0xffffffffffffffff, relocInfo::none);\n-    __ emit_data64(0xffffffffffffffff, relocInfo::none);\n-    __ emit_data64(0xffffffffffffffff, relocInfo::none);\n-    __ emit_data64(0xffff3effffffffff, relocInfo::none);\n-    __ emit_data64(0x3b3a393837363534, relocInfo::none);\n-    __ emit_data64(0xffffffffffff3d3c, relocInfo::none);\n-    __ emit_data64(0x06050403020100ff, relocInfo::none);\n-    __ emit_data64(0x0e0d0c0b0a090807, relocInfo::none);\n-    __ emit_data64(0x161514131211100f, relocInfo::none);\n-    __ emit_data64(0x3fffffffff191817, relocInfo::none);\n-    __ emit_data64(0x201f1e1d1c1b1aff, relocInfo::none);\n-    __ emit_data64(0x2827262524232221, relocInfo::none);\n-    __ emit_data64(0x302f2e2d2c2b2a29, relocInfo::none);\n-    __ emit_data64(0xffffffffff333231, relocInfo::none);\n-    __ emit_data64(0xffffffffffffffff, relocInfo::none);\n-    __ emit_data64(0xffffffffffffffff, relocInfo::none);\n-    __ emit_data64(0xffffffffffffffff, relocInfo::none);\n-    __ emit_data64(0xffffffffffffffff, relocInfo::none);\n-    __ emit_data64(0xffffffffffffffff, relocInfo::none);\n-    __ emit_data64(0xffffffffffffffff, relocInfo::none);\n-    __ emit_data64(0xffffffffffffffff, relocInfo::none);\n-    __ emit_data64(0xffffffffffffffff, relocInfo::none);\n-    __ emit_data64(0xffffffffffffffff, relocInfo::none);\n-    __ emit_data64(0xffffffffffffffff, relocInfo::none);\n-    __ emit_data64(0xffffffffffffffff, relocInfo::none);\n-    __ emit_data64(0xffffffffffffffff, relocInfo::none);\n-    __ emit_data64(0xffffffffffffffff, relocInfo::none);\n-    __ emit_data64(0xffffffffffffffff, relocInfo::none);\n-    __ emit_data64(0xffffffffffffffff, relocInfo::none);\n-    __ emit_data64(0xffffffffffffffff, relocInfo::none);\n-    return start;\n-  }\n+  return start;\n+}\n@@ -6123,19 +6179,20 @@\n-  address generate_base64_decodeBlock() {\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", \"implDecode\");\n-    address start = __ pc();\n-    __ enter();\n-\n-    \/\/ Save callee-saved registers before using them\n-    __ push(r12);\n-    __ push(r13);\n-    __ push(r14);\n-    __ push(r15);\n-    __ push(rbx);\n-\n-    \/\/ arguments\n-    const Register source = c_rarg0; \/\/ Source Array\n-    const Register start_offset = c_rarg1; \/\/ start offset\n-    const Register end_offset = c_rarg2; \/\/ end offset\n-    const Register dest = c_rarg3; \/\/ destination array\n-    const Register isMIME = rbx;\n+address StubGenerator::generate_base64_decodeBlock() {\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", \"implDecode\");\n+  address start = __ pc();\n+\n+  __ enter();\n+\n+  \/\/ Save callee-saved registers before using them\n+  __ push(r12);\n+  __ push(r13);\n+  __ push(r14);\n+  __ push(r15);\n+  __ push(rbx);\n+\n+  \/\/ arguments\n+  const Register source = c_rarg0; \/\/ Source Array\n+  const Register start_offset = c_rarg1; \/\/ start offset\n+  const Register end_offset = c_rarg2; \/\/ end offset\n+  const Register dest = c_rarg3; \/\/ destination array\n+  const Register isMIME = rbx;\n@@ -6144,3 +6201,3 @@\n-    const Register dp = c_rarg4;  \/\/ Position for writing to dest array\n-    const Register isURL = c_rarg5;\/\/ Base64 or URL character set\n-    __ movl(isMIME, Address(rbp, 2 * wordSize));\n+  const Register dp = c_rarg4;  \/\/ Position for writing to dest array\n+  const Register isURL = c_rarg5;\/\/ Base64 or URL character set\n+  __ movl(isMIME, Address(rbp, 2 * wordSize));\n@@ -6148,7 +6205,7 @@\n-    const Address  dp_mem(rbp, 6 * wordSize);  \/\/ length is on stack on Win64\n-    const Address isURL_mem(rbp, 7 * wordSize);\n-    const Register isURL = r10;      \/\/ pick the volatile windows register\n-    const Register dp = r12;\n-    __ movl(dp, dp_mem);\n-    __ movl(isURL, isURL_mem);\n-    __ movl(isMIME, Address(rbp, 8 * wordSize));\n+  const Address  dp_mem(rbp, 6 * wordSize);  \/\/ length is on stack on Win64\n+  const Address isURL_mem(rbp, 7 * wordSize);\n+  const Register isURL = r10;      \/\/ pick the volatile windows register\n+  const Register dp = r12;\n+  __ movl(dp, dp_mem);\n+  __ movl(isURL, isURL_mem);\n+  __ movl(isMIME, Address(rbp, 8 * wordSize));\n@@ -6157,79 +6214,79 @@\n-    const XMMRegister lookup_lo = xmm5;\n-    const XMMRegister lookup_hi = xmm6;\n-    const XMMRegister errorvec = xmm7;\n-    const XMMRegister pack16_op = xmm9;\n-    const XMMRegister pack32_op = xmm8;\n-    const XMMRegister input0 = xmm3;\n-    const XMMRegister input1 = xmm20;\n-    const XMMRegister input2 = xmm21;\n-    const XMMRegister input3 = xmm19;\n-    const XMMRegister join01 = xmm12;\n-    const XMMRegister join12 = xmm11;\n-    const XMMRegister join23 = xmm10;\n-    const XMMRegister translated0 = xmm2;\n-    const XMMRegister translated1 = xmm1;\n-    const XMMRegister translated2 = xmm0;\n-    const XMMRegister translated3 = xmm4;\n-\n-    const XMMRegister merged0 = xmm2;\n-    const XMMRegister merged1 = xmm1;\n-    const XMMRegister merged2 = xmm0;\n-    const XMMRegister merged3 = xmm4;\n-    const XMMRegister merge_ab_bc0 = xmm2;\n-    const XMMRegister merge_ab_bc1 = xmm1;\n-    const XMMRegister merge_ab_bc2 = xmm0;\n-    const XMMRegister merge_ab_bc3 = xmm4;\n-\n-    const XMMRegister pack24bits = xmm4;\n-\n-    const Register length = r14;\n-    const Register output_size = r13;\n-    const Register output_mask = r15;\n-    const KRegister input_mask = k1;\n-\n-    const XMMRegister input_initial_valid_b64 = xmm0;\n-    const XMMRegister tmp = xmm10;\n-    const XMMRegister mask = xmm0;\n-    const XMMRegister invalid_b64 = xmm1;\n-\n-    Label L_process256, L_process64, L_process64Loop, L_exit, L_processdata, L_loadURL;\n-    Label L_continue, L_finalBit, L_padding, L_donePadding, L_bruteForce;\n-    Label L_forceLoop, L_bottomLoop, L_checkMIME, L_exit_no_vzero;\n-\n-    \/\/ calculate length from offsets\n-    __ movl(length, end_offset);\n-    __ subl(length, start_offset);\n-    __ push(dest);          \/\/ Save for return value calc\n-\n-    \/\/ If AVX512 VBMI not supported, just compile non-AVX code\n-    if(VM_Version::supports_avx512_vbmi() &&\n-       VM_Version::supports_avx512bw()) {\n-      __ cmpl(length, 128);     \/\/ 128-bytes is break-even for AVX-512\n-      __ jcc(Assembler::lessEqual, L_bruteForce);\n-\n-      __ cmpl(isMIME, 0);\n-      __ jcc(Assembler::notEqual, L_bruteForce);\n-\n-      \/\/ Load lookup tables based on isURL\n-      __ cmpl(isURL, 0);\n-      __ jcc(Assembler::notZero, L_loadURL);\n-\n-      __ evmovdquq(lookup_lo, ExternalAddress(StubRoutines::x86::base64_vbmi_lookup_lo_addr()), Assembler::AVX_512bit, r13);\n-      __ evmovdquq(lookup_hi, ExternalAddress(StubRoutines::x86::base64_vbmi_lookup_hi_addr()), Assembler::AVX_512bit, r13);\n-\n-      __ BIND(L_continue);\n-\n-      __ movl(r15, 0x01400140);\n-      __ evpbroadcastd(pack16_op, r15, Assembler::AVX_512bit);\n-\n-      __ movl(r15, 0x00011000);\n-      __ evpbroadcastd(pack32_op, r15, Assembler::AVX_512bit);\n-\n-      __ cmpl(length, 0xff);\n-      __ jcc(Assembler::lessEqual, L_process64);\n-\n-      \/\/ load masks required for decoding data\n-      __ BIND(L_processdata);\n-      __ evmovdquq(join01, ExternalAddress(StubRoutines::x86::base64_vbmi_join_0_1_addr()), Assembler::AVX_512bit,r13);\n-      __ evmovdquq(join12, ExternalAddress(StubRoutines::x86::base64_vbmi_join_1_2_addr()), Assembler::AVX_512bit, r13);\n-      __ evmovdquq(join23, ExternalAddress(StubRoutines::x86::base64_vbmi_join_2_3_addr()), Assembler::AVX_512bit, r13);\n+  const XMMRegister lookup_lo = xmm5;\n+  const XMMRegister lookup_hi = xmm6;\n+  const XMMRegister errorvec = xmm7;\n+  const XMMRegister pack16_op = xmm9;\n+  const XMMRegister pack32_op = xmm8;\n+  const XMMRegister input0 = xmm3;\n+  const XMMRegister input1 = xmm20;\n+  const XMMRegister input2 = xmm21;\n+  const XMMRegister input3 = xmm19;\n+  const XMMRegister join01 = xmm12;\n+  const XMMRegister join12 = xmm11;\n+  const XMMRegister join23 = xmm10;\n+  const XMMRegister translated0 = xmm2;\n+  const XMMRegister translated1 = xmm1;\n+  const XMMRegister translated2 = xmm0;\n+  const XMMRegister translated3 = xmm4;\n+\n+  const XMMRegister merged0 = xmm2;\n+  const XMMRegister merged1 = xmm1;\n+  const XMMRegister merged2 = xmm0;\n+  const XMMRegister merged3 = xmm4;\n+  const XMMRegister merge_ab_bc0 = xmm2;\n+  const XMMRegister merge_ab_bc1 = xmm1;\n+  const XMMRegister merge_ab_bc2 = xmm0;\n+  const XMMRegister merge_ab_bc3 = xmm4;\n+\n+  const XMMRegister pack24bits = xmm4;\n+\n+  const Register length = r14;\n+  const Register output_size = r13;\n+  const Register output_mask = r15;\n+  const KRegister input_mask = k1;\n+\n+  const XMMRegister input_initial_valid_b64 = xmm0;\n+  const XMMRegister tmp = xmm10;\n+  const XMMRegister mask = xmm0;\n+  const XMMRegister invalid_b64 = xmm1;\n+\n+  Label L_process256, L_process64, L_process64Loop, L_exit, L_processdata, L_loadURL;\n+  Label L_continue, L_finalBit, L_padding, L_donePadding, L_bruteForce;\n+  Label L_forceLoop, L_bottomLoop, L_checkMIME, L_exit_no_vzero;\n+\n+  \/\/ calculate length from offsets\n+  __ movl(length, end_offset);\n+  __ subl(length, start_offset);\n+  __ push(dest);          \/\/ Save for return value calc\n+\n+  \/\/ If AVX512 VBMI not supported, just compile non-AVX code\n+  if(VM_Version::supports_avx512_vbmi() &&\n+     VM_Version::supports_avx512bw()) {\n+    __ cmpl(length, 128);     \/\/ 128-bytes is break-even for AVX-512\n+    __ jcc(Assembler::lessEqual, L_bruteForce);\n+\n+    __ cmpl(isMIME, 0);\n+    __ jcc(Assembler::notEqual, L_bruteForce);\n+\n+    \/\/ Load lookup tables based on isURL\n+    __ cmpl(isURL, 0);\n+    __ jcc(Assembler::notZero, L_loadURL);\n+\n+    __ evmovdquq(lookup_lo, ExternalAddress(StubRoutines::x86::base64_vbmi_lookup_lo_addr()), Assembler::AVX_512bit, r13);\n+    __ evmovdquq(lookup_hi, ExternalAddress(StubRoutines::x86::base64_vbmi_lookup_hi_addr()), Assembler::AVX_512bit, r13);\n+\n+    __ BIND(L_continue);\n+\n+    __ movl(r15, 0x01400140);\n+    __ evpbroadcastd(pack16_op, r15, Assembler::AVX_512bit);\n+\n+    __ movl(r15, 0x00011000);\n+    __ evpbroadcastd(pack32_op, r15, Assembler::AVX_512bit);\n+\n+    __ cmpl(length, 0xff);\n+    __ jcc(Assembler::lessEqual, L_process64);\n+\n+    \/\/ load masks required for decoding data\n+    __ BIND(L_processdata);\n+    __ evmovdquq(join01, ExternalAddress(StubRoutines::x86::base64_vbmi_join_0_1_addr()), Assembler::AVX_512bit,r13);\n+    __ evmovdquq(join12, ExternalAddress(StubRoutines::x86::base64_vbmi_join_1_2_addr()), Assembler::AVX_512bit, r13);\n+    __ evmovdquq(join23, ExternalAddress(StubRoutines::x86::base64_vbmi_join_2_3_addr()), Assembler::AVX_512bit, r13);\n@@ -6237,84 +6294,74 @@\n-      __ align32();\n-      __ BIND(L_process256);\n-      \/\/ Grab input data\n-      __ evmovdquq(input0, Address(source, start_offset, Address::times_1, 0x00), Assembler::AVX_512bit);\n-      __ evmovdquq(input1, Address(source, start_offset, Address::times_1, 0x40), Assembler::AVX_512bit);\n-      __ evmovdquq(input2, Address(source, start_offset, Address::times_1, 0x80), Assembler::AVX_512bit);\n-      __ evmovdquq(input3, Address(source, start_offset, Address::times_1, 0xc0), Assembler::AVX_512bit);\n-\n-      \/\/ Copy the low part of the lookup table into the destination of the permutation\n-      __ evmovdquq(translated0, lookup_lo, Assembler::AVX_512bit);\n-      __ evmovdquq(translated1, lookup_lo, Assembler::AVX_512bit);\n-      __ evmovdquq(translated2, lookup_lo, Assembler::AVX_512bit);\n-      __ evmovdquq(translated3, lookup_lo, Assembler::AVX_512bit);\n-\n-      \/\/ Translate the base64 input into \"decoded\" bytes\n-      __ evpermt2b(translated0, input0, lookup_hi, Assembler::AVX_512bit);\n-      __ evpermt2b(translated1, input1, lookup_hi, Assembler::AVX_512bit);\n-      __ evpermt2b(translated2, input2, lookup_hi, Assembler::AVX_512bit);\n-      __ evpermt2b(translated3, input3, lookup_hi, Assembler::AVX_512bit);\n-\n-      \/\/ OR all of the translations together to check for errors (high-order bit of byte set)\n-      __ vpternlogd(input0, 0xfe, input1, input2, Assembler::AVX_512bit);\n-\n-      __ vpternlogd(input3, 0xfe, translated0, translated1, Assembler::AVX_512bit);\n-      __ vpternlogd(input0, 0xfe, translated2, translated3, Assembler::AVX_512bit);\n-      __ vpor(errorvec, input3, input0, Assembler::AVX_512bit);\n-\n-      \/\/ Check if there was an error - if so, try 64-byte chunks\n-      __ evpmovb2m(k3, errorvec, Assembler::AVX_512bit);\n-      __ kortestql(k3, k3);\n-      __ jcc(Assembler::notZero, L_process64);\n-\n-      \/\/ The merging and shuffling happens here\n-      \/\/ We multiply each byte pair [00dddddd | 00cccccc | 00bbbbbb | 00aaaaaa]\n-      \/\/ Multiply [00cccccc] by 2^6 added to [00dddddd] to get [0000cccc | ccdddddd]\n-      \/\/ The pack16_op is a vector of 0x01400140, so multiply D by 1 and C by 0x40\n-      __ vpmaddubsw(merge_ab_bc0, translated0, pack16_op, Assembler::AVX_512bit);\n-      __ vpmaddubsw(merge_ab_bc1, translated1, pack16_op, Assembler::AVX_512bit);\n-      __ vpmaddubsw(merge_ab_bc2, translated2, pack16_op, Assembler::AVX_512bit);\n-      __ vpmaddubsw(merge_ab_bc3, translated3, pack16_op, Assembler::AVX_512bit);\n-\n-      \/\/ Now do the same with packed 16-bit values.\n-      \/\/ We start with [0000cccc | ccdddddd | 0000aaaa | aabbbbbb]\n-      \/\/ pack32_op is 0x00011000 (2^12, 1), so this multiplies [0000aaaa | aabbbbbb] by 2^12\n-      \/\/ and adds [0000cccc | ccdddddd] to yield [00000000 | aaaaaabb | bbbbcccc | ccdddddd]\n-      __ vpmaddwd(merged0, merge_ab_bc0, pack32_op, Assembler::AVX_512bit);\n-      __ vpmaddwd(merged1, merge_ab_bc1, pack32_op, Assembler::AVX_512bit);\n-      __ vpmaddwd(merged2, merge_ab_bc2, pack32_op, Assembler::AVX_512bit);\n-      __ vpmaddwd(merged3, merge_ab_bc3, pack32_op, Assembler::AVX_512bit);\n-\n-      \/\/ The join vectors specify which byte from which vector goes into the outputs\n-      \/\/ One of every 4 bytes in the extended vector is zero, so we pack them into their\n-      \/\/ final positions in the register for storing (256 bytes in, 192 bytes out)\n-      __ evpermt2b(merged0, join01, merged1, Assembler::AVX_512bit);\n-      __ evpermt2b(merged1, join12, merged2, Assembler::AVX_512bit);\n-      __ evpermt2b(merged2, join23, merged3, Assembler::AVX_512bit);\n-\n-      \/\/ Store result\n-      __ evmovdquq(Address(dest, dp, Address::times_1, 0x00), merged0, Assembler::AVX_512bit);\n-      __ evmovdquq(Address(dest, dp, Address::times_1, 0x40), merged1, Assembler::AVX_512bit);\n-      __ evmovdquq(Address(dest, dp, Address::times_1, 0x80), merged2, Assembler::AVX_512bit);\n-\n-      __ addptr(source, 0x100);\n-      __ addptr(dest, 0xc0);\n-      __ subl(length, 0x100);\n-      __ cmpl(length, 64 * 4);\n-      __ jcc(Assembler::greaterEqual, L_process256);\n-\n-      \/\/ At this point, we've decoded 64 * 4 * n bytes.\n-      \/\/ The remaining length will be <= 64 * 4 - 1.\n-      \/\/ UNLESS there was an error decoding the first 256-byte chunk.  In this\n-      \/\/ case, the length will be arbitrarily long.\n-      \/\/\n-      \/\/ Note that this will be the path for MIME-encoded strings.\n-\n-      __ BIND(L_process64);\n-\n-      __ evmovdquq(pack24bits, ExternalAddress(StubRoutines::x86::base64_vbmi_pack_vec_addr()), Assembler::AVX_512bit, r13);\n-\n-      __ cmpl(length, 63);\n-      __ jcc(Assembler::lessEqual, L_finalBit);\n-\n-      __ mov64(rax, 0x0000ffffffffffff);\n-      __ kmovql(k2, rax);\n+    __ align32();\n+    __ BIND(L_process256);\n+    \/\/ Grab input data\n+    __ evmovdquq(input0, Address(source, start_offset, Address::times_1, 0x00), Assembler::AVX_512bit);\n+    __ evmovdquq(input1, Address(source, start_offset, Address::times_1, 0x40), Assembler::AVX_512bit);\n+    __ evmovdquq(input2, Address(source, start_offset, Address::times_1, 0x80), Assembler::AVX_512bit);\n+    __ evmovdquq(input3, Address(source, start_offset, Address::times_1, 0xc0), Assembler::AVX_512bit);\n+\n+    \/\/ Copy the low part of the lookup table into the destination of the permutation\n+    __ evmovdquq(translated0, lookup_lo, Assembler::AVX_512bit);\n+    __ evmovdquq(translated1, lookup_lo, Assembler::AVX_512bit);\n+    __ evmovdquq(translated2, lookup_lo, Assembler::AVX_512bit);\n+    __ evmovdquq(translated3, lookup_lo, Assembler::AVX_512bit);\n+\n+    \/\/ Translate the base64 input into \"decoded\" bytes\n+    __ evpermt2b(translated0, input0, lookup_hi, Assembler::AVX_512bit);\n+    __ evpermt2b(translated1, input1, lookup_hi, Assembler::AVX_512bit);\n+    __ evpermt2b(translated2, input2, lookup_hi, Assembler::AVX_512bit);\n+    __ evpermt2b(translated3, input3, lookup_hi, Assembler::AVX_512bit);\n+\n+    \/\/ OR all of the translations together to check for errors (high-order bit of byte set)\n+    __ vpternlogd(input0, 0xfe, input1, input2, Assembler::AVX_512bit);\n+\n+    __ vpternlogd(input3, 0xfe, translated0, translated1, Assembler::AVX_512bit);\n+    __ vpternlogd(input0, 0xfe, translated2, translated3, Assembler::AVX_512bit);\n+    __ vpor(errorvec, input3, input0, Assembler::AVX_512bit);\n+\n+    \/\/ Check if there was an error - if so, try 64-byte chunks\n+    __ evpmovb2m(k3, errorvec, Assembler::AVX_512bit);\n+    __ kortestql(k3, k3);\n+    __ jcc(Assembler::notZero, L_process64);\n+\n+    \/\/ The merging and shuffling happens here\n+    \/\/ We multiply each byte pair [00dddddd | 00cccccc | 00bbbbbb | 00aaaaaa]\n+    \/\/ Multiply [00cccccc] by 2^6 added to [00dddddd] to get [0000cccc | ccdddddd]\n+    \/\/ The pack16_op is a vector of 0x01400140, so multiply D by 1 and C by 0x40\n+    __ vpmaddubsw(merge_ab_bc0, translated0, pack16_op, Assembler::AVX_512bit);\n+    __ vpmaddubsw(merge_ab_bc1, translated1, pack16_op, Assembler::AVX_512bit);\n+    __ vpmaddubsw(merge_ab_bc2, translated2, pack16_op, Assembler::AVX_512bit);\n+    __ vpmaddubsw(merge_ab_bc3, translated3, pack16_op, Assembler::AVX_512bit);\n+\n+    \/\/ Now do the same with packed 16-bit values.\n+    \/\/ We start with [0000cccc | ccdddddd | 0000aaaa | aabbbbbb]\n+    \/\/ pack32_op is 0x00011000 (2^12, 1), so this multiplies [0000aaaa | aabbbbbb] by 2^12\n+    \/\/ and adds [0000cccc | ccdddddd] to yield [00000000 | aaaaaabb | bbbbcccc | ccdddddd]\n+    __ vpmaddwd(merged0, merge_ab_bc0, pack32_op, Assembler::AVX_512bit);\n+    __ vpmaddwd(merged1, merge_ab_bc1, pack32_op, Assembler::AVX_512bit);\n+    __ vpmaddwd(merged2, merge_ab_bc2, pack32_op, Assembler::AVX_512bit);\n+    __ vpmaddwd(merged3, merge_ab_bc3, pack32_op, Assembler::AVX_512bit);\n+\n+    \/\/ The join vectors specify which byte from which vector goes into the outputs\n+    \/\/ One of every 4 bytes in the extended vector is zero, so we pack them into their\n+    \/\/ final positions in the register for storing (256 bytes in, 192 bytes out)\n+    __ evpermt2b(merged0, join01, merged1, Assembler::AVX_512bit);\n+    __ evpermt2b(merged1, join12, merged2, Assembler::AVX_512bit);\n+    __ evpermt2b(merged2, join23, merged3, Assembler::AVX_512bit);\n+\n+    \/\/ Store result\n+    __ evmovdquq(Address(dest, dp, Address::times_1, 0x00), merged0, Assembler::AVX_512bit);\n+    __ evmovdquq(Address(dest, dp, Address::times_1, 0x40), merged1, Assembler::AVX_512bit);\n+    __ evmovdquq(Address(dest, dp, Address::times_1, 0x80), merged2, Assembler::AVX_512bit);\n+\n+    __ addptr(source, 0x100);\n+    __ addptr(dest, 0xc0);\n+    __ subl(length, 0x100);\n+    __ cmpl(length, 64 * 4);\n+    __ jcc(Assembler::greaterEqual, L_process256);\n+\n+    \/\/ At this point, we've decoded 64 * 4 * n bytes.\n+    \/\/ The remaining length will be <= 64 * 4 - 1.\n+    \/\/ UNLESS there was an error decoding the first 256-byte chunk.  In this\n+    \/\/ case, the length will be arbitrarily long.\n+    \/\/\n+    \/\/ Note that this will be the path for MIME-encoded strings.\n@@ -6322,2 +6369,1 @@\n-      __ align32();\n-      __ BIND(L_process64Loop);\n+    __ BIND(L_process64);\n@@ -6325,1 +6371,1 @@\n-      \/\/ Handle first 64-byte block\n+    __ evmovdquq(pack24bits, ExternalAddress(StubRoutines::x86::base64_vbmi_pack_vec_addr()), Assembler::AVX_512bit, r13);\n@@ -6327,3 +6373,2 @@\n-      __ evmovdquq(input0, Address(source, start_offset), Assembler::AVX_512bit);\n-      __ evmovdquq(translated0, lookup_lo, Assembler::AVX_512bit);\n-      __ evpermt2b(translated0, input0, lookup_hi, Assembler::AVX_512bit);\n+    __ cmpl(length, 63);\n+    __ jcc(Assembler::lessEqual, L_finalBit);\n@@ -6331,1 +6376,2 @@\n-      __ vpor(errorvec, translated0, input0, Assembler::AVX_512bit);\n+    __ mov64(rax, 0x0000ffffffffffff);\n+    __ kmovql(k2, rax);\n@@ -6333,4 +6379,2 @@\n-      \/\/ Check for error and bomb out before updating dest\n-      __ evpmovb2m(k3, errorvec, Assembler::AVX_512bit);\n-      __ kortestql(k3, k3);\n-      __ jcc(Assembler::notZero, L_exit);\n+    __ align32();\n+    __ BIND(L_process64Loop);\n@@ -6338,4 +6382,1 @@\n-      \/\/ Pack output register, selecting correct byte ordering\n-      __ vpmaddubsw(merge_ab_bc0, translated0, pack16_op, Assembler::AVX_512bit);\n-      __ vpmaddwd(merged0, merge_ab_bc0, pack32_op, Assembler::AVX_512bit);\n-      __ vpermb(merged0, pack24bits, merged0, Assembler::AVX_512bit);\n+    \/\/ Handle first 64-byte block\n@@ -6343,1 +6384,3 @@\n-      __ evmovdqub(Address(dest, dp), k2, merged0, true, Assembler::AVX_512bit);\n+    __ evmovdquq(input0, Address(source, start_offset), Assembler::AVX_512bit);\n+    __ evmovdquq(translated0, lookup_lo, Assembler::AVX_512bit);\n+    __ evpermt2b(translated0, input0, lookup_hi, Assembler::AVX_512bit);\n@@ -6345,3 +6388,1 @@\n-      __ subl(length, 64);\n-      __ addptr(source, 64);\n-      __ addptr(dest, 48);\n+    __ vpor(errorvec, translated0, input0, Assembler::AVX_512bit);\n@@ -6349,2 +6390,4 @@\n-      __ cmpl(length, 64);\n-      __ jcc(Assembler::greaterEqual, L_process64Loop);\n+    \/\/ Check for error and bomb out before updating dest\n+    __ evpmovb2m(k3, errorvec, Assembler::AVX_512bit);\n+    __ kortestql(k3, k3);\n+    __ jcc(Assembler::notZero, L_exit);\n@@ -6352,2 +6395,4 @@\n-      __ cmpl(length, 0);\n-      __ jcc(Assembler::lessEqual, L_exit);\n+    \/\/ Pack output register, selecting correct byte ordering\n+    __ vpmaddubsw(merge_ab_bc0, translated0, pack16_op, Assembler::AVX_512bit);\n+    __ vpmaddwd(merged0, merge_ab_bc0, pack32_op, Assembler::AVX_512bit);\n+    __ vpermb(merged0, pack24bits, merged0, Assembler::AVX_512bit);\n@@ -6355,102 +6400,1 @@\n-      __ BIND(L_finalBit);\n-      \/\/ Now have 1 to 63 bytes left to decode\n-\n-      \/\/ I was going to let Java take care of the final fragment\n-      \/\/ however it will repeatedly call this routine for every 4 bytes\n-      \/\/ of input data, so handle the rest here.\n-      __ movq(rax, -1);\n-      __ bzhiq(rax, rax, length);    \/\/ Input mask in rax\n-\n-      __ movl(output_size, length);\n-      __ shrl(output_size, 2);   \/\/ Find (len \/ 4) * 3 (output length)\n-      __ lea(output_size, Address(output_size, output_size, Address::times_2, 0));\n-      \/\/ output_size in r13\n-\n-      \/\/ Strip pad characters, if any, and adjust length and mask\n-      __ cmpb(Address(source, length, Address::times_1, -1), '=');\n-      __ jcc(Assembler::equal, L_padding);\n-\n-      __ BIND(L_donePadding);\n-\n-      \/\/ Output size is (64 - output_size), output mask is (all 1s >> output_size).\n-      __ kmovql(input_mask, rax);\n-      __ movq(output_mask, -1);\n-      __ bzhiq(output_mask, output_mask, output_size);\n-\n-      \/\/ Load initial input with all valid base64 characters.  Will be used\n-      \/\/ in merging source bytes to avoid masking when determining if an error occurred.\n-      __ movl(rax, 0x61616161);\n-      __ evpbroadcastd(input_initial_valid_b64, rax, Assembler::AVX_512bit);\n-\n-      \/\/ A register containing all invalid base64 decoded values\n-      __ movl(rax, 0x80808080);\n-      __ evpbroadcastd(invalid_b64, rax, Assembler::AVX_512bit);\n-\n-      \/\/ input_mask is in k1\n-      \/\/ output_size is in r13\n-      \/\/ output_mask is in r15\n-      \/\/ zmm0 - free\n-      \/\/ zmm1 - 0x00011000\n-      \/\/ zmm2 - 0x01400140\n-      \/\/ zmm3 - errorvec\n-      \/\/ zmm4 - pack vector\n-      \/\/ zmm5 - lookup_lo\n-      \/\/ zmm6 - lookup_hi\n-      \/\/ zmm7 - errorvec\n-      \/\/ zmm8 - 0x61616161\n-      \/\/ zmm9 - 0x80808080\n-\n-      \/\/ Load only the bytes from source, merging into our \"fully-valid\" register\n-      __ evmovdqub(input_initial_valid_b64, input_mask, Address(source, start_offset, Address::times_1, 0x0), true, Assembler::AVX_512bit);\n-\n-      \/\/ Decode all bytes within our merged input\n-      __ evmovdquq(tmp, lookup_lo, Assembler::AVX_512bit);\n-      __ evpermt2b(tmp, input_initial_valid_b64, lookup_hi, Assembler::AVX_512bit);\n-      __ vporq(mask, tmp, input_initial_valid_b64, Assembler::AVX_512bit);\n-\n-      \/\/ Check for error.  Compare (decoded | initial) to all invalid.\n-      \/\/ If any bytes have their high-order bit set, then we have an error.\n-      __ evptestmb(k2, mask, invalid_b64, Assembler::AVX_512bit);\n-      __ kortestql(k2, k2);\n-\n-      \/\/ If we have an error, use the brute force loop to decode what we can (4-byte chunks).\n-      __ jcc(Assembler::notZero, L_bruteForce);\n-\n-      \/\/ Shuffle output bytes\n-      __ vpmaddubsw(tmp, tmp, pack16_op, Assembler::AVX_512bit);\n-      __ vpmaddwd(tmp, tmp, pack32_op, Assembler::AVX_512bit);\n-\n-      __ vpermb(tmp, pack24bits, tmp, Assembler::AVX_512bit);\n-      __ kmovql(k1, output_mask);\n-      __ evmovdqub(Address(dest, dp), k1, tmp, true, Assembler::AVX_512bit);\n-\n-      __ addptr(dest, output_size);\n-\n-      __ BIND(L_exit);\n-      __ vzeroupper();\n-      __ pop(rax);             \/\/ Get original dest value\n-      __ subptr(dest, rax);      \/\/ Number of bytes converted\n-      __ movptr(rax, dest);\n-      __ pop(rbx);\n-      __ pop(r15);\n-      __ pop(r14);\n-      __ pop(r13);\n-      __ pop(r12);\n-      __ leave();\n-      __ ret(0);\n-\n-      __ BIND(L_loadURL);\n-      __ evmovdquq(lookup_lo, ExternalAddress(StubRoutines::x86::base64_vbmi_lookup_lo_url_addr()), Assembler::AVX_512bit, r13);\n-      __ evmovdquq(lookup_hi, ExternalAddress(StubRoutines::x86::base64_vbmi_lookup_hi_url_addr()), Assembler::AVX_512bit, r13);\n-      __ jmp(L_continue);\n-\n-      __ BIND(L_padding);\n-      __ decrementq(output_size, 1);\n-      __ shrq(rax, 1);\n-\n-      __ cmpb(Address(source, length, Address::times_1, -2), '=');\n-      __ jcc(Assembler::notEqual, L_donePadding);\n-\n-      __ decrementq(output_size, 1);\n-      __ shrq(rax, 1);\n-      __ jmp(L_donePadding);\n+    __ evmovdqub(Address(dest, dp), k2, merged0, true, Assembler::AVX_512bit);\n@@ -6458,37 +6402,3 @@\n-      __ align32();\n-      __ BIND(L_bruteForce);\n-    }   \/\/ End of if(avx512_vbmi)\n-\n-    \/\/ Use non-AVX code to decode 4-byte chunks into 3 bytes of output\n-\n-    \/\/ Register state (Linux):\n-    \/\/ r12-15 - saved on stack\n-    \/\/ rdi - src\n-    \/\/ rsi - sp\n-    \/\/ rdx - sl\n-    \/\/ rcx - dst\n-    \/\/ r8 - dp\n-    \/\/ r9 - isURL\n-\n-    \/\/ Register state (Windows):\n-    \/\/ r12-15 - saved on stack\n-    \/\/ rcx - src\n-    \/\/ rdx - sp\n-    \/\/ r8 - sl\n-    \/\/ r9 - dst\n-    \/\/ r12 - dp\n-    \/\/ r10 - isURL\n-\n-    \/\/ Registers (common):\n-    \/\/ length (r14) - bytes in src\n-\n-    const Register decode_table = r11;\n-    const Register out_byte_count = rbx;\n-    const Register byte1 = r13;\n-    const Register byte2 = r15;\n-    const Register byte3 = WINDOWS_ONLY(r8) NOT_WINDOWS(rdx);\n-    const Register byte4 = WINDOWS_ONLY(r10) NOT_WINDOWS(r9);\n-\n-    __ shrl(length, 2);    \/\/ Multiple of 4 bytes only - length is # 4-byte chunks\n-    __ cmpl(length, 0);\n-    __ jcc(Assembler::lessEqual, L_exit_no_vzero);\n+    __ subl(length, 64);\n+    __ addptr(source, 64);\n+    __ addptr(dest, 48);\n@@ -6496,3 +6406,2 @@\n-    __ shll(isURL, 8);    \/\/ index into decode table based on isURL\n-    __ lea(decode_table, ExternalAddress(StubRoutines::x86::base64_decoding_table_addr()));\n-    __ addptr(decode_table, isURL);\n+    __ cmpl(length, 64);\n+    __ jcc(Assembler::greaterEqual, L_process64Loop);\n@@ -6500,1 +6409,2 @@\n-    __ jmp(L_bottomLoop);\n+    __ cmpl(length, 0);\n+    __ jcc(Assembler::lessEqual, L_exit);\n@@ -6502,38 +6412,76 @@\n-    __ align32();\n-    __ BIND(L_forceLoop);\n-    __ shll(byte1, 18);\n-    __ shll(byte2, 12);\n-    __ shll(byte3, 6);\n-    __ orl(byte1, byte2);\n-    __ orl(byte1, byte3);\n-    __ orl(byte1, byte4);\n-\n-    __ addptr(source, 4);\n-\n-    __ movb(Address(dest, dp, Address::times_1, 2), byte1);\n-    __ shrl(byte1, 8);\n-    __ movb(Address(dest, dp, Address::times_1, 1), byte1);\n-    __ shrl(byte1, 8);\n-    __ movb(Address(dest, dp, Address::times_1, 0), byte1);\n-\n-    __ addptr(dest, 3);\n-    __ decrementl(length, 1);\n-    __ jcc(Assembler::zero, L_exit_no_vzero);\n-\n-    __ BIND(L_bottomLoop);\n-    __ load_unsigned_byte(byte1, Address(source, start_offset, Address::times_1, 0x00));\n-    __ load_unsigned_byte(byte2, Address(source, start_offset, Address::times_1, 0x01));\n-    __ load_signed_byte(byte1, Address(decode_table, byte1));\n-    __ load_signed_byte(byte2, Address(decode_table, byte2));\n-    __ load_unsigned_byte(byte3, Address(source, start_offset, Address::times_1, 0x02));\n-    __ load_unsigned_byte(byte4, Address(source, start_offset, Address::times_1, 0x03));\n-    __ load_signed_byte(byte3, Address(decode_table, byte3));\n-    __ load_signed_byte(byte4, Address(decode_table, byte4));\n-\n-    __ mov(rax, byte1);\n-    __ orl(rax, byte2);\n-    __ orl(rax, byte3);\n-    __ orl(rax, byte4);\n-    __ jcc(Assembler::positive, L_forceLoop);\n-\n-    __ BIND(L_exit_no_vzero);\n+    __ BIND(L_finalBit);\n+    \/\/ Now have 1 to 63 bytes left to decode\n+\n+    \/\/ I was going to let Java take care of the final fragment\n+    \/\/ however it will repeatedly call this routine for every 4 bytes\n+    \/\/ of input data, so handle the rest here.\n+    __ movq(rax, -1);\n+    __ bzhiq(rax, rax, length);    \/\/ Input mask in rax\n+\n+    __ movl(output_size, length);\n+    __ shrl(output_size, 2);   \/\/ Find (len \/ 4) * 3 (output length)\n+    __ lea(output_size, Address(output_size, output_size, Address::times_2, 0));\n+    \/\/ output_size in r13\n+\n+    \/\/ Strip pad characters, if any, and adjust length and mask\n+    __ cmpb(Address(source, length, Address::times_1, -1), '=');\n+    __ jcc(Assembler::equal, L_padding);\n+\n+    __ BIND(L_donePadding);\n+\n+    \/\/ Output size is (64 - output_size), output mask is (all 1s >> output_size).\n+    __ kmovql(input_mask, rax);\n+    __ movq(output_mask, -1);\n+    __ bzhiq(output_mask, output_mask, output_size);\n+\n+    \/\/ Load initial input with all valid base64 characters.  Will be used\n+    \/\/ in merging source bytes to avoid masking when determining if an error occurred.\n+    __ movl(rax, 0x61616161);\n+    __ evpbroadcastd(input_initial_valid_b64, rax, Assembler::AVX_512bit);\n+\n+    \/\/ A register containing all invalid base64 decoded values\n+    __ movl(rax, 0x80808080);\n+    __ evpbroadcastd(invalid_b64, rax, Assembler::AVX_512bit);\n+\n+    \/\/ input_mask is in k1\n+    \/\/ output_size is in r13\n+    \/\/ output_mask is in r15\n+    \/\/ zmm0 - free\n+    \/\/ zmm1 - 0x00011000\n+    \/\/ zmm2 - 0x01400140\n+    \/\/ zmm3 - errorvec\n+    \/\/ zmm4 - pack vector\n+    \/\/ zmm5 - lookup_lo\n+    \/\/ zmm6 - lookup_hi\n+    \/\/ zmm7 - errorvec\n+    \/\/ zmm8 - 0x61616161\n+    \/\/ zmm9 - 0x80808080\n+\n+    \/\/ Load only the bytes from source, merging into our \"fully-valid\" register\n+    __ evmovdqub(input_initial_valid_b64, input_mask, Address(source, start_offset, Address::times_1, 0x0), true, Assembler::AVX_512bit);\n+\n+    \/\/ Decode all bytes within our merged input\n+    __ evmovdquq(tmp, lookup_lo, Assembler::AVX_512bit);\n+    __ evpermt2b(tmp, input_initial_valid_b64, lookup_hi, Assembler::AVX_512bit);\n+    __ vporq(mask, tmp, input_initial_valid_b64, Assembler::AVX_512bit);\n+\n+    \/\/ Check for error.  Compare (decoded | initial) to all invalid.\n+    \/\/ If any bytes have their high-order bit set, then we have an error.\n+    __ evptestmb(k2, mask, invalid_b64, Assembler::AVX_512bit);\n+    __ kortestql(k2, k2);\n+\n+    \/\/ If we have an error, use the brute force loop to decode what we can (4-byte chunks).\n+    __ jcc(Assembler::notZero, L_bruteForce);\n+\n+    \/\/ Shuffle output bytes\n+    __ vpmaddubsw(tmp, tmp, pack16_op, Assembler::AVX_512bit);\n+    __ vpmaddwd(tmp, tmp, pack32_op, Assembler::AVX_512bit);\n+\n+    __ vpermb(tmp, pack24bits, tmp, Assembler::AVX_512bit);\n+    __ kmovql(k1, output_mask);\n+    __ evmovdqub(Address(dest, dp), k1, tmp, true, Assembler::AVX_512bit);\n+\n+    __ addptr(dest, output_size);\n+\n+    __ BIND(L_exit);\n+    __ vzeroupper();\n@@ -6551,49 +6499,4 @@\n-    return start;\n-  }\n-\n-\n-  \/**\n-   *  Arguments:\n-   *\n-   * Inputs:\n-   *   c_rarg0   - int crc\n-   *   c_rarg1   - byte* buf\n-   *   c_rarg2   - int length\n-   *\n-   * Output:\n-   *       rax   - int crc result\n-   *\/\n-  address generate_updateBytesCRC32() {\n-    assert(UseCRC32Intrinsics, \"need AVX and CLMUL instructions\");\n-\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", \"updateBytesCRC32\");\n-\n-    address start = __ pc();\n-    \/\/ Win64: rcx, rdx, r8, r9 (c_rarg0, c_rarg1, ...)\n-    \/\/ Unix:  rdi, rsi, rdx, rcx, r8, r9 (c_rarg0, c_rarg1, ...)\n-    \/\/ rscratch1: r10\n-    const Register crc   = c_rarg0;  \/\/ crc\n-    const Register buf   = c_rarg1;  \/\/ source java byte array address\n-    const Register len   = c_rarg2;  \/\/ length\n-    const Register table = c_rarg3;  \/\/ crc_table address (reuse register)\n-    const Register tmp1   = r11;\n-    const Register tmp2   = r10;\n-    assert_different_registers(crc, buf, len, table, tmp1, tmp2, rax);\n-\n-    BLOCK_COMMENT(\"Entry:\");\n-    __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n-\n-    if (VM_Version::supports_sse4_1() && VM_Version::supports_avx512_vpclmulqdq() &&\n-        VM_Version::supports_avx512bw() &&\n-        VM_Version::supports_avx512vl()) {\n-        \/\/ The constants used in the CRC32 algorithm requires the 1's compliment of the initial crc value.\n-        \/\/ However, the constant table for CRC32-C assumes the original crc value.  Account for this\n-        \/\/ difference before calling and after returning.\n-      __ lea(table, ExternalAddress(StubRoutines::x86::crc_table_avx512_addr()));\n-      __ notl(crc);\n-      __ kernel_crc32_avx512(crc, buf, len, table, tmp1, tmp2);\n-      __ notl(crc);\n-    } else {\n-      __ kernel_crc32(crc, buf, len, table, tmp1);\n-    }\n+    __ BIND(L_loadURL);\n+    __ evmovdquq(lookup_lo, ExternalAddress(StubRoutines::x86::base64_vbmi_lookup_lo_url_addr()), Assembler::AVX_512bit, r13);\n+    __ evmovdquq(lookup_hi, ExternalAddress(StubRoutines::x86::base64_vbmi_lookup_hi_url_addr()), Assembler::AVX_512bit, r13);\n+    __ jmp(L_continue);\n@@ -6601,4 +6504,3 @@\n-    __ movl(rax, crc);\n-    __ vzeroupper();\n-    __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    __ ret(0);\n+    __ BIND(L_padding);\n+    __ decrementq(output_size, 1);\n+    __ shrq(rax, 1);\n@@ -6606,146 +6508,2 @@\n-    return start;\n-  }\n-\n-  \/**\n-  *  Arguments:\n-  *\n-  * Inputs:\n-  *   c_rarg0   - int crc\n-  *   c_rarg1   - byte* buf\n-  *   c_rarg2   - long length\n-  *   c_rarg3   - table_start - optional (present only when doing a library_call,\n-  *              not used by x86 algorithm)\n-  *\n-  * Output:\n-  *       rax   - int crc result\n-  *\/\n-  address generate_updateBytesCRC32C(bool is_pclmulqdq_supported) {\n-      assert(UseCRC32CIntrinsics, \"need SSE4_2\");\n-      __ align(CodeEntryAlignment);\n-      StubCodeMark mark(this, \"StubRoutines\", \"updateBytesCRC32C\");\n-      address start = __ pc();\n-      \/\/reg.arg        int#0        int#1        int#2        int#3        int#4        int#5        float regs\n-      \/\/Windows        RCX          RDX          R8           R9           none         none         XMM0..XMM3\n-      \/\/Lin \/ Sol      RDI          RSI          RDX          RCX          R8           R9           XMM0..XMM7\n-      const Register crc = c_rarg0;  \/\/ crc\n-      const Register buf = c_rarg1;  \/\/ source java byte array address\n-      const Register len = c_rarg2;  \/\/ length\n-      const Register a = rax;\n-      const Register j = r9;\n-      const Register k = r10;\n-      const Register l = r11;\n-#ifdef _WIN64\n-      const Register y = rdi;\n-      const Register z = rsi;\n-#else\n-      const Register y = rcx;\n-      const Register z = r8;\n-#endif\n-      assert_different_registers(crc, buf, len, a, j, k, l, y, z);\n-\n-      BLOCK_COMMENT(\"Entry:\");\n-      __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n-      if (VM_Version::supports_sse4_1() && VM_Version::supports_avx512_vpclmulqdq() &&\n-          VM_Version::supports_avx512bw() &&\n-          VM_Version::supports_avx512vl()) {\n-        __ lea(j, ExternalAddress(StubRoutines::x86::crc32c_table_avx512_addr()));\n-        __ kernel_crc32_avx512(crc, buf, len, j, l, k);\n-      } else {\n-#ifdef _WIN64\n-        __ push(y);\n-        __ push(z);\n-#endif\n-        __ crc32c_ipl_alg2_alt2(crc, buf, len,\n-                                a, j, k,\n-                                l, y, z,\n-                                c_farg0, c_farg1, c_farg2,\n-                                is_pclmulqdq_supported);\n-#ifdef _WIN64\n-        __ pop(z);\n-        __ pop(y);\n-#endif\n-      }\n-      __ movl(rax, crc);\n-      __ vzeroupper();\n-      __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n-      __ ret(0);\n-\n-      return start;\n-  }\n-\n-\n-  \/***\n-   *  Arguments:\n-   *\n-   *  Inputs:\n-   *   c_rarg0   - int   adler\n-   *   c_rarg1   - byte* buff\n-   *   c_rarg2   - int   len\n-   *\n-   * Output:\n-   *   rax   - int adler result\n-   *\/\n-\n-  address generate_updateBytesAdler32() {\n-      assert(UseAdler32Intrinsics, \"need AVX2\");\n-\n-      __ align(CodeEntryAlignment);\n-      StubCodeMark mark(this, \"StubRoutines\", \"updateBytesAdler32\");\n-\n-      address start = __ pc();\n-\n-      const Register data = r9;\n-      const Register size = r10;\n-\n-      const XMMRegister yshuf0 = xmm6;\n-      const XMMRegister yshuf1 = xmm7;\n-      assert_different_registers(c_rarg0, c_rarg1, c_rarg2, data, size);\n-\n-      BLOCK_COMMENT(\"Entry:\");\n-      __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n-\n-      __ vmovdqu(yshuf0, ExternalAddress((address) StubRoutines::x86::_adler32_shuf0_table), r9);\n-      __ vmovdqu(yshuf1, ExternalAddress((address) StubRoutines::x86::_adler32_shuf1_table), r9);\n-      __ movptr(data, c_rarg1); \/\/data\n-      __ movl(size, c_rarg2); \/\/length\n-      __ updateBytesAdler32(c_rarg0, data, size, yshuf0, yshuf1, ExternalAddress((address) StubRoutines::x86::_adler32_ascale_table));\n-      __ leave();\n-      __ ret(0);\n-      return start;\n-  }\n-\n-  \/**\n-   *  Arguments:\n-   *\n-   *  Input:\n-   *    c_rarg0   - x address\n-   *    c_rarg1   - x length\n-   *    c_rarg2   - y address\n-   *    c_rarg3   - y length\n-   * not Win64\n-   *    c_rarg4   - z address\n-   *    c_rarg5   - z length\n-   * Win64\n-   *    rsp+40    - z address\n-   *    rsp+48    - z length\n-   *\/\n-  address generate_multiplyToLen() {\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", \"multiplyToLen\");\n-\n-    address start = __ pc();\n-    \/\/ Win64: rcx, rdx, r8, r9 (c_rarg0, c_rarg1, ...)\n-    \/\/ Unix:  rdi, rsi, rdx, rcx, r8, r9 (c_rarg0, c_rarg1, ...)\n-    const Register x     = rdi;\n-    const Register xlen  = rax;\n-    const Register y     = rsi;\n-    const Register ylen  = rcx;\n-    const Register z     = r8;\n-    const Register zlen  = r11;\n-\n-    \/\/ Next registers will be saved on stack in multiply_to_len().\n-    const Register tmp1  = r12;\n-    const Register tmp2  = r13;\n-    const Register tmp3  = r14;\n-    const Register tmp4  = r15;\n-    const Register tmp5  = rbx;\n+    __ cmpb(Address(source, length, Address::times_1, -2), '=');\n+    __ jcc(Assembler::notEqual, L_donePadding);\n@@ -6753,2 +6511,3 @@\n-    BLOCK_COMMENT(\"Entry:\");\n-    __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+    __ decrementq(output_size, 1);\n+    __ shrq(rax, 1);\n+    __ jmp(L_donePadding);\n@@ -6756,11 +6515,92 @@\n-#ifndef _WIN64\n-    __ movptr(zlen, r9); \/\/ Save r9 in r11 - zlen\n-#endif\n-    setup_arg_regs(4); \/\/ x => rdi, xlen => rsi, y => rdx\n-                       \/\/ ylen => rcx, z => r8, zlen => r11\n-                       \/\/ r9 and r10 may be used to save non-volatile registers\n-#ifdef _WIN64\n-    \/\/ last 2 arguments (#4, #5) are on stack on Win64\n-    __ movptr(z, Address(rsp, 6 * wordSize));\n-    __ movptr(zlen, Address(rsp, 7 * wordSize));\n-#endif\n+    __ align32();\n+    __ BIND(L_bruteForce);\n+  }   \/\/ End of if(avx512_vbmi)\n+\n+  \/\/ Use non-AVX code to decode 4-byte chunks into 3 bytes of output\n+\n+  \/\/ Register state (Linux):\n+  \/\/ r12-15 - saved on stack\n+  \/\/ rdi - src\n+  \/\/ rsi - sp\n+  \/\/ rdx - sl\n+  \/\/ rcx - dst\n+  \/\/ r8 - dp\n+  \/\/ r9 - isURL\n+\n+  \/\/ Register state (Windows):\n+  \/\/ r12-15 - saved on stack\n+  \/\/ rcx - src\n+  \/\/ rdx - sp\n+  \/\/ r8 - sl\n+  \/\/ r9 - dst\n+  \/\/ r12 - dp\n+  \/\/ r10 - isURL\n+\n+  \/\/ Registers (common):\n+  \/\/ length (r14) - bytes in src\n+\n+  const Register decode_table = r11;\n+  const Register out_byte_count = rbx;\n+  const Register byte1 = r13;\n+  const Register byte2 = r15;\n+  const Register byte3 = WIN64_ONLY(r8) NOT_WIN64(rdx);\n+  const Register byte4 = WIN64_ONLY(r10) NOT_WIN64(r9);\n+\n+  __ shrl(length, 2);    \/\/ Multiple of 4 bytes only - length is # 4-byte chunks\n+  __ cmpl(length, 0);\n+  __ jcc(Assembler::lessEqual, L_exit_no_vzero);\n+\n+  __ shll(isURL, 8);    \/\/ index into decode table based on isURL\n+  __ lea(decode_table, ExternalAddress(StubRoutines::x86::base64_decoding_table_addr()));\n+  __ addptr(decode_table, isURL);\n+\n+  __ jmp(L_bottomLoop);\n+\n+  __ align32();\n+  __ BIND(L_forceLoop);\n+  __ shll(byte1, 18);\n+  __ shll(byte2, 12);\n+  __ shll(byte3, 6);\n+  __ orl(byte1, byte2);\n+  __ orl(byte1, byte3);\n+  __ orl(byte1, byte4);\n+\n+  __ addptr(source, 4);\n+\n+  __ movb(Address(dest, dp, Address::times_1, 2), byte1);\n+  __ shrl(byte1, 8);\n+  __ movb(Address(dest, dp, Address::times_1, 1), byte1);\n+  __ shrl(byte1, 8);\n+  __ movb(Address(dest, dp, Address::times_1, 0), byte1);\n+\n+  __ addptr(dest, 3);\n+  __ decrementl(length, 1);\n+  __ jcc(Assembler::zero, L_exit_no_vzero);\n+\n+  __ BIND(L_bottomLoop);\n+  __ load_unsigned_byte(byte1, Address(source, start_offset, Address::times_1, 0x00));\n+  __ load_unsigned_byte(byte2, Address(source, start_offset, Address::times_1, 0x01));\n+  __ load_signed_byte(byte1, Address(decode_table, byte1));\n+  __ load_signed_byte(byte2, Address(decode_table, byte2));\n+  __ load_unsigned_byte(byte3, Address(source, start_offset, Address::times_1, 0x02));\n+  __ load_unsigned_byte(byte4, Address(source, start_offset, Address::times_1, 0x03));\n+  __ load_signed_byte(byte3, Address(decode_table, byte3));\n+  __ load_signed_byte(byte4, Address(decode_table, byte4));\n+\n+  __ mov(rax, byte1);\n+  __ orl(rax, byte2);\n+  __ orl(rax, byte3);\n+  __ orl(rax, byte4);\n+  __ jcc(Assembler::positive, L_forceLoop);\n+\n+  __ BIND(L_exit_no_vzero);\n+  __ pop(rax);             \/\/ Get original dest value\n+  __ subptr(dest, rax);      \/\/ Number of bytes converted\n+  __ movptr(rax, dest);\n+  __ pop(rbx);\n+  __ pop(r15);\n+  __ pop(r14);\n+  __ pop(r13);\n+  __ pop(r12);\n+  __ leave();\n+  __ ret(0);\n@@ -6768,3 +6608,2 @@\n-    __ movptr(xlen, rsi);\n-    __ movptr(y,    rdx);\n-    __ multiply_to_len(x, xlen, y, ylen, z, zlen, tmp1, tmp2, tmp3, tmp4, tmp5);\n+  return start;\n+}\n@@ -6772,1 +6611,0 @@\n-    restore_arg_regs();\n@@ -6774,2 +6612,46 @@\n-    __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    __ ret(0);\n+\/**\n+ *  Arguments:\n+ *\n+ * Inputs:\n+ *   c_rarg0   - int crc\n+ *   c_rarg1   - byte* buf\n+ *   c_rarg2   - int length\n+ *\n+ * Output:\n+ *       rax   - int crc result\n+ *\/\n+address StubGenerator::generate_updateBytesCRC32() {\n+  assert(UseCRC32Intrinsics, \"need AVX and CLMUL instructions\");\n+\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", \"updateBytesCRC32\");\n+\n+  address start = __ pc();\n+\n+  \/\/ Win64: rcx, rdx, r8, r9 (c_rarg0, c_rarg1, ...)\n+  \/\/ Unix:  rdi, rsi, rdx, rcx, r8, r9 (c_rarg0, c_rarg1, ...)\n+  \/\/ rscratch1: r10\n+  const Register crc   = c_rarg0;  \/\/ crc\n+  const Register buf   = c_rarg1;  \/\/ source java byte array address\n+  const Register len   = c_rarg2;  \/\/ length\n+  const Register table = c_rarg3;  \/\/ crc_table address (reuse register)\n+  const Register tmp1   = r11;\n+  const Register tmp2   = r10;\n+  assert_different_registers(crc, buf, len, table, tmp1, tmp2, rax);\n+\n+  BLOCK_COMMENT(\"Entry:\");\n+  __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+\n+  if (VM_Version::supports_sse4_1() && VM_Version::supports_avx512_vpclmulqdq() &&\n+      VM_Version::supports_avx512bw() &&\n+      VM_Version::supports_avx512vl()) {\n+      \/\/ The constants used in the CRC32 algorithm requires the 1's compliment of the initial crc value.\n+      \/\/ However, the constant table for CRC32-C assumes the original crc value.  Account for this\n+      \/\/ difference before calling and after returning.\n+    __ lea(table, ExternalAddress(StubRoutines::x86::crc_table_avx512_addr()));\n+    __ notl(crc);\n+    __ kernel_crc32_avx512(crc, buf, len, table, tmp1, tmp2);\n+    __ notl(crc);\n+  } else {\n+    __ kernel_crc32(crc, buf, len, table, tmp1);\n+  }\n@@ -6777,19 +6659,4 @@\n-    return start;\n-  }\n-\n-  \/**\n-  *  Arguments:\n-  *\n-  *  Input:\n-  *    c_rarg0   - obja     address\n-  *    c_rarg1   - objb     address\n-  *    c_rarg3   - length   length\n-  *    c_rarg4   - scale    log2_array_indxscale\n-  *\n-  *  Output:\n-  *        rax   - int >= mismatched index, < 0 bitwise complement of tail\n-  *\/\n-  address generate_vectorizedMismatch() {\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", \"vectorizedMismatch\");\n-    address start = __ pc();\n+  __ movl(rax, crc);\n+  __ vzeroupper();\n+  __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ ret(0);\n@@ -6797,2 +6664,2 @@\n-    BLOCK_COMMENT(\"Entry:\");\n-    __ enter();\n+  return start;\n+}\n@@ -6800,9 +6667,35 @@\n-#ifdef _WIN64  \/\/ Win64: rcx, rdx, r8, r9 (c_rarg0, c_rarg1, ...)\n-    const Register scale = c_rarg0;  \/\/rcx, will exchange with r9\n-    const Register objb = c_rarg1;   \/\/rdx\n-    const Register length = c_rarg2; \/\/r8\n-    const Register obja = c_rarg3;   \/\/r9\n-    __ xchgq(obja, scale);  \/\/now obja and scale contains the correct contents\n-\n-    const Register tmp1 = r10;\n-    const Register tmp2 = r11;\n+\/**\n+*  Arguments:\n+*\n+* Inputs:\n+*   c_rarg0   - int crc\n+*   c_rarg1   - byte* buf\n+*   c_rarg2   - long length\n+*   c_rarg3   - table_start - optional (present only when doing a library_call,\n+*              not used by x86 algorithm)\n+*\n+* Output:\n+*       rax   - int crc result\n+*\/\n+address StubGenerator::generate_updateBytesCRC32C(bool is_pclmulqdq_supported) {\n+  assert(UseCRC32CIntrinsics, \"need SSE4_2\");\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", \"updateBytesCRC32C\");\n+  address start = __ pc();\n+\n+  \/\/reg.arg        int#0        int#1        int#2        int#3        int#4        int#5        float regs\n+  \/\/Windows        RCX          RDX          R8           R9           none         none         XMM0..XMM3\n+  \/\/Lin \/ Sol      RDI          RSI          RDX          RCX          R8           R9           XMM0..XMM7\n+  const Register crc = c_rarg0;  \/\/ crc\n+  const Register buf = c_rarg1;  \/\/ source java byte array address\n+  const Register len = c_rarg2;  \/\/ length\n+  const Register a = rax;\n+  const Register j = r9;\n+  const Register k = r10;\n+  const Register l = r11;\n+#ifdef _WIN64\n+  const Register y = rdi;\n+  const Register z = rsi;\n+#else\n+  const Register y = rcx;\n+  const Register z = r8;\n@@ -6810,7 +6703,22 @@\n-#ifndef _WIN64 \/\/ Unix:  rdi, rsi, rdx, rcx, r8, r9 (c_rarg0, c_rarg1, ...)\n-    const Register obja = c_rarg0;   \/\/U:rdi\n-    const Register objb = c_rarg1;   \/\/U:rsi\n-    const Register length = c_rarg2; \/\/U:rdx\n-    const Register scale = c_rarg3;  \/\/U:rcx\n-    const Register tmp1 = r8;\n-    const Register tmp2 = r9;\n+  assert_different_registers(crc, buf, len, a, j, k, l, y, z);\n+\n+  BLOCK_COMMENT(\"Entry:\");\n+  __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  if (VM_Version::supports_sse4_1() && VM_Version::supports_avx512_vpclmulqdq() &&\n+      VM_Version::supports_avx512bw() &&\n+      VM_Version::supports_avx512vl()) {\n+    __ lea(j, ExternalAddress(StubRoutines::x86::crc32c_table_avx512_addr()));\n+    __ kernel_crc32_avx512(crc, buf, len, j, l, k);\n+  } else {\n+#ifdef _WIN64\n+    __ push(y);\n+    __ push(z);\n+#endif\n+    __ crc32c_ipl_alg2_alt2(crc, buf, len,\n+                            a, j, k,\n+                            l, y, z,\n+                            c_farg0, c_farg1, c_farg2,\n+                            is_pclmulqdq_supported);\n+#ifdef _WIN64\n+    __ pop(z);\n+    __ pop(y);\n@@ -6818,12 +6726,0 @@\n-    const Register result = rax; \/\/return value\n-    const XMMRegister vec0 = xmm0;\n-    const XMMRegister vec1 = xmm1;\n-    const XMMRegister vec2 = xmm2;\n-\n-    __ vectorized_mismatch(obja, objb, length, scale, result, tmp1, tmp2, vec0, vec1, vec2);\n-\n-    __ vzeroupper();\n-    __ leave();\n-    __ ret(0);\n-\n-    return start;\n@@ -6831,0 +6727,4 @@\n+  __ movl(rax, crc);\n+  __ vzeroupper();\n+  __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ ret(0);\n@@ -6832,37 +6732,2 @@\n-\/**\n-   *  Arguments:\n-   *\n-  \/\/  Input:\n-  \/\/    c_rarg0   - x address\n-  \/\/    c_rarg1   - x length\n-  \/\/    c_rarg2   - z address\n-  \/\/    c_rarg3   - z length\n-   *\n-   *\/\n-  address generate_squareToLen() {\n-\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", \"squareToLen\");\n-\n-    address start = __ pc();\n-    \/\/ Win64: rcx, rdx, r8, r9 (c_rarg0, c_rarg1, ...)\n-    \/\/ Unix:  rdi, rsi, rdx, rcx (c_rarg0, c_rarg1, ...)\n-    const Register x      = rdi;\n-    const Register len    = rsi;\n-    const Register z      = r8;\n-    const Register zlen   = rcx;\n-\n-   const Register tmp1      = r12;\n-   const Register tmp2      = r13;\n-   const Register tmp3      = r14;\n-   const Register tmp4      = r15;\n-   const Register tmp5      = rbx;\n-\n-    BLOCK_COMMENT(\"Entry:\");\n-    __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n-\n-    setup_arg_regs(4); \/\/ x => rdi, len => rsi, z => rdx\n-                       \/\/ zlen => rcx\n-                       \/\/ r9 and r10 may be used to save non-volatile registers\n-    __ movptr(r8, rdx);\n-    __ square_to_len(x, len, z, zlen, tmp1, tmp2, tmp3, tmp4, tmp5, rdx, rax);\n+  return start;\n+}\n@@ -6870,1 +6735,0 @@\n-    restore_arg_regs();\n@@ -6872,2 +6736,11 @@\n-    __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    __ ret(0);\n+\/***\n+ *  Arguments:\n+ *\n+ *  Inputs:\n+ *   c_rarg0   - int   adler\n+ *   c_rarg1   - byte* buff\n+ *   c_rarg2   - int   len\n+ *\n+ * Output:\n+ *   rax   - int adler result\n+ *\/\n@@ -6875,2 +6748,2 @@\n-    return start;\n-  }\n+address StubGenerator::generate_updateBytesAdler32() {\n+  assert(UseAdler32Intrinsics, \"need AVX2\");\n@@ -6878,3 +6751,3 @@\n-  address generate_method_entry_barrier() {\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", \"nmethod_entry_barrier\");\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", \"updateBytesAdler32\");\n+  address start = __ pc();\n@@ -6882,1 +6755,2 @@\n-    Label deoptimize_label;\n+  const Register data = r9;\n+  const Register size = r10;\n@@ -6884,1 +6758,3 @@\n-    address start = __ pc();\n+  const XMMRegister yshuf0 = xmm6;\n+  const XMMRegister yshuf1 = xmm7;\n+  assert_different_registers(c_rarg0, c_rarg1, c_rarg2, data, size);\n@@ -6886,1 +6762,2 @@\n-    __ push(-1); \/\/ cookie, this is used for writing the new rsp when deoptimizing\n+  BLOCK_COMMENT(\"Entry:\");\n+  __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n@@ -6888,43 +6765,7 @@\n-    BLOCK_COMMENT(\"Entry:\");\n-    __ enter(); \/\/ save rbp\n-\n-    \/\/ save c_rarg0, because we want to use that value.\n-    \/\/ We could do without it but then we depend on the number of slots used by pusha\n-    __ push(c_rarg0);\n-\n-    __ lea(c_rarg0, Address(rsp, wordSize * 3)); \/\/ 1 for cookie, 1 for rbp, 1 for c_rarg0 - this should be the return address\n-\n-    __ pusha();\n-\n-    \/\/ The method may have floats as arguments, and we must spill them before calling\n-    \/\/ the VM runtime.\n-    assert(Argument::n_float_register_parameters_j == 8, \"Assumption\");\n-    const int xmm_size = wordSize * 2;\n-    const int xmm_spill_size = xmm_size * Argument::n_float_register_parameters_j;\n-    __ subptr(rsp, xmm_spill_size);\n-    __ movdqu(Address(rsp, xmm_size * 7), xmm7);\n-    __ movdqu(Address(rsp, xmm_size * 6), xmm6);\n-    __ movdqu(Address(rsp, xmm_size * 5), xmm5);\n-    __ movdqu(Address(rsp, xmm_size * 4), xmm4);\n-    __ movdqu(Address(rsp, xmm_size * 3), xmm3);\n-    __ movdqu(Address(rsp, xmm_size * 2), xmm2);\n-    __ movdqu(Address(rsp, xmm_size * 1), xmm1);\n-    __ movdqu(Address(rsp, xmm_size * 0), xmm0);\n-\n-    __ call_VM_leaf(CAST_FROM_FN_PTR(address, static_cast<int (*)(address*)>(BarrierSetNMethod::nmethod_stub_entry_barrier)), 1);\n-\n-    __ movdqu(xmm0, Address(rsp, xmm_size * 0));\n-    __ movdqu(xmm1, Address(rsp, xmm_size * 1));\n-    __ movdqu(xmm2, Address(rsp, xmm_size * 2));\n-    __ movdqu(xmm3, Address(rsp, xmm_size * 3));\n-    __ movdqu(xmm4, Address(rsp, xmm_size * 4));\n-    __ movdqu(xmm5, Address(rsp, xmm_size * 5));\n-    __ movdqu(xmm6, Address(rsp, xmm_size * 6));\n-    __ movdqu(xmm7, Address(rsp, xmm_size * 7));\n-    __ addptr(rsp, xmm_spill_size);\n-\n-    __ cmpl(rax, 1); \/\/ 1 means deoptimize\n-    __ jcc(Assembler::equal, deoptimize_label);\n-\n-    __ popa();\n-    __ pop(c_rarg0);\n+  __ vmovdqu(yshuf0, ExternalAddress((address) StubRoutines::x86::_adler32_shuf0_table), r9);\n+  __ vmovdqu(yshuf1, ExternalAddress((address) StubRoutines::x86::_adler32_shuf1_table), r9);\n+  __ movptr(data, c_rarg1); \/\/data\n+  __ movl(size, c_rarg2); \/\/length\n+  __ updateBytesAdler32(c_rarg0, data, size, yshuf0, yshuf1, ExternalAddress((address) StubRoutines::x86::_adler32_ascale_table));\n+  __ leave();\n+  __ ret(0);\n@@ -6932,1 +6773,2 @@\n-    __ leave();\n+  return start;\n+}\n@@ -6934,2 +6776,38 @@\n-    __ addptr(rsp, 1 * wordSize); \/\/ cookie\n-    __ ret(0);\n+\/**\n+ *  Arguments:\n+ *\n+ *  Input:\n+ *    c_rarg0   - x address\n+ *    c_rarg1   - x length\n+ *    c_rarg2   - y address\n+ *    c_rarg3   - y length\n+ * not Win64\n+ *    c_rarg4   - z address\n+ *    c_rarg5   - z length\n+ * Win64\n+ *    rsp+40    - z address\n+ *    rsp+48    - z length\n+ *\/\n+address StubGenerator::generate_multiplyToLen() {\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", \"multiplyToLen\");\n+  address start = __ pc();\n+\n+  \/\/ Win64: rcx, rdx, r8, r9 (c_rarg0, c_rarg1, ...)\n+  \/\/ Unix:  rdi, rsi, rdx, rcx, r8, r9 (c_rarg0, c_rarg1, ...)\n+  const Register x     = rdi;\n+  const Register xlen  = rax;\n+  const Register y     = rsi;\n+  const Register ylen  = rcx;\n+  const Register z     = r8;\n+  const Register zlen  = r11;\n+\n+  \/\/ Next registers will be saved on stack in multiply_to_len().\n+  const Register tmp1  = r12;\n+  const Register tmp2  = r13;\n+  const Register tmp3  = r14;\n+  const Register tmp4  = r15;\n+  const Register tmp5  = rbx;\n+\n+  BLOCK_COMMENT(\"Entry:\");\n+  __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n@@ -6937,0 +6815,11 @@\n+#ifndef _WIN64\n+  __ movptr(zlen, r9); \/\/ Save r9 in r11 - zlen\n+#endif\n+  setup_arg_regs(4); \/\/ x => rdi, xlen => rsi, y => rdx\n+                     \/\/ ylen => rcx, z => r8, zlen => r11\n+                     \/\/ r9 and r10 may be used to save non-volatile registers\n+#ifdef _WIN64\n+  \/\/ last 2 arguments (#4, #5) are on stack on Win64\n+  __ movptr(z, Address(rsp, 6 * wordSize));\n+  __ movptr(zlen, Address(rsp, 7 * wordSize));\n+#endif\n@@ -6938,1 +6827,3 @@\n-    __ BIND(deoptimize_label);\n+  __ movptr(xlen, rsi);\n+  __ movptr(y,    rdx);\n+  __ multiply_to_len(x, xlen, y, ylen, z, zlen, tmp1, tmp2, tmp3, tmp4, tmp5);\n@@ -6940,2 +6831,1 @@\n-    __ popa();\n-    __ pop(c_rarg0);\n+  restore_arg_regs();\n@@ -6943,1 +6833,2 @@\n-    __ leave();\n+  __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ ret(0);\n@@ -6945,42 +6836,2 @@\n-    \/\/ this can be taken out, but is good for verification purposes. getting a SIGSEGV\n-    \/\/ here while still having a correct stack is valuable\n-    __ testptr(rsp, Address(rsp, 0));\n-\n-    __ movptr(rsp, Address(rsp, 0)); \/\/ new rsp was written in the barrier\n-    __ jmp(Address(rsp, -1 * wordSize)); \/\/ jmp target should be callers verified_entry_point\n-\n-    return start;\n-  }\n-\n-   \/**\n-   *  Arguments:\n-   *\n-   *  Input:\n-   *    c_rarg0   - out address\n-   *    c_rarg1   - in address\n-   *    c_rarg2   - offset\n-   *    c_rarg3   - len\n-   * not Win64\n-   *    c_rarg4   - k\n-   * Win64\n-   *    rsp+40    - k\n-   *\/\n-  address generate_mulAdd() {\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", \"mulAdd\");\n-\n-    address start = __ pc();\n-    \/\/ Win64: rcx, rdx, r8, r9 (c_rarg0, c_rarg1, ...)\n-    \/\/ Unix:  rdi, rsi, rdx, rcx, r8, r9 (c_rarg0, c_rarg1, ...)\n-    const Register out     = rdi;\n-    const Register in      = rsi;\n-    const Register offset  = r11;\n-    const Register len     = rcx;\n-    const Register k       = r8;\n-\n-    \/\/ Next registers will be saved on stack in mul_add().\n-    const Register tmp1  = r12;\n-    const Register tmp2  = r13;\n-    const Register tmp3  = r14;\n-    const Register tmp4  = r15;\n-    const Register tmp5  = rbx;\n+  return start;\n+}\n@@ -6988,2 +6839,19 @@\n-    BLOCK_COMMENT(\"Entry:\");\n-    __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+\/**\n+*  Arguments:\n+*\n+*  Input:\n+*    c_rarg0   - obja     address\n+*    c_rarg1   - objb     address\n+*    c_rarg3   - length   length\n+*    c_rarg4   - scale    log2_array_indxscale\n+*\n+*  Output:\n+*        rax   - int >= mismatched index, < 0 bitwise complement of tail\n+*\/\n+address StubGenerator::generate_vectorizedMismatch() {\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", \"vectorizedMismatch\");\n+  address start = __ pc();\n+\n+  BLOCK_COMMENT(\"Entry:\");\n+  __ enter();\n@@ -6991,6 +6859,9 @@\n-    setup_arg_regs(4); \/\/ out => rdi, in => rsi, offset => rdx\n-                       \/\/ len => rcx, k => r8\n-                       \/\/ r9 and r10 may be used to save non-volatile registers\n-#ifdef _WIN64\n-    \/\/ last argument is on stack on Win64\n-    __ movl(k, Address(rsp, 6 * wordSize));\n+#ifdef _WIN64  \/\/ Win64: rcx, rdx, r8, r9 (c_rarg0, c_rarg1, ...)\n+  const Register scale = c_rarg0;  \/\/rcx, will exchange with r9\n+  const Register objb = c_rarg1;   \/\/rdx\n+  const Register length = c_rarg2; \/\/r8\n+  const Register obja = c_rarg3;   \/\/r9\n+  __ xchgq(obja, scale);  \/\/now obja and scale contains the correct contents\n+\n+  const Register tmp1 = r10;\n+  const Register tmp2 = r11;\n@@ -6998,4 +6869,12 @@\n-    __ movptr(r11, rdx);  \/\/ move offset in rdx to offset(r11)\n-    __ mul_add(out, in, offset, len, k, tmp1, tmp2, tmp3, tmp4, tmp5, rdx, rax);\n-\n-    restore_arg_regs();\n+#ifndef _WIN64 \/\/ Unix:  rdi, rsi, rdx, rcx, r8, r9 (c_rarg0, c_rarg1, ...)\n+  const Register obja = c_rarg0;   \/\/U:rdi\n+  const Register objb = c_rarg1;   \/\/U:rsi\n+  const Register length = c_rarg2; \/\/U:rdx\n+  const Register scale = c_rarg3;  \/\/U:rcx\n+  const Register tmp1 = r8;\n+  const Register tmp2 = r9;\n+#endif\n+  const Register result = rax; \/\/return value\n+  const XMMRegister vec0 = xmm0;\n+  const XMMRegister vec1 = xmm1;\n+  const XMMRegister vec2 = xmm2;\n@@ -7003,2 +6882,1 @@\n-    __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    __ ret(0);\n+  __ vectorized_mismatch(obja, objb, length, scale, result, tmp1, tmp2, vec0, vec1, vec2);\n@@ -7006,2 +6884,3 @@\n-    return start;\n-  }\n+  __ vzeroupper();\n+  __ leave();\n+  __ ret(0);\n@@ -7009,3 +6888,2 @@\n-  address generate_bigIntegerRightShift() {\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this, \"StubRoutines\", \"bigIntegerRightShiftWorker\");\n+  return start;\n+}\n@@ -7013,8 +6891,11 @@\n-    address start = __ pc();\n-    Label Shift512Loop, ShiftTwo, ShiftTwoLoop, ShiftOne, Exit;\n-    \/\/ For Unix, the arguments are as follows: rdi, rsi, rdx, rcx, r8.\n-    const Register newArr = rdi;\n-    const Register oldArr = rsi;\n-    const Register newIdx = rdx;\n-    const Register shiftCount = rcx;  \/\/ It was intentional to have shiftCount in rcx since it is used implicitly for shift.\n-    const Register totalNumIter = r8;\n+\/**\n+ *  Arguments:\n+ *\n+\/\/  Input:\n+\/\/    c_rarg0   - x address\n+\/\/    c_rarg1   - x length\n+\/\/    c_rarg2   - z address\n+\/\/    c_rarg3   - z length\n+ *\n+ *\/\n+address StubGenerator::generate_squareToLen() {\n@@ -7022,8 +6903,3 @@\n-    \/\/ For windows, we use r9 and r10 as temps to save rdi and rsi. Thus we cannot allocate them for our temps.\n-    \/\/ For everything else, we prefer using r9 and r10 since we do not have to save them before use.\n-    const Register tmp1 = r11;                    \/\/ Caller save.\n-    const Register tmp2 = rax;                    \/\/ Caller save.\n-    const Register tmp3 = WINDOWS_ONLY(r12) NOT_WINDOWS(r9);   \/\/ Windows: Callee save. Linux: Caller save.\n-    const Register tmp4 = WINDOWS_ONLY(r13) NOT_WINDOWS(r10);  \/\/ Windows: Callee save. Linux: Caller save.\n-    const Register tmp5 = r14;                    \/\/ Callee save.\n-    const Register tmp6 = r15;\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", \"squareToLen\");\n+  address start = __ pc();\n@@ -7031,3 +6907,6 @@\n-    const XMMRegister x0 = xmm0;\n-    const XMMRegister x1 = xmm1;\n-    const XMMRegister x2 = xmm2;\n+  \/\/ Win64: rcx, rdx, r8, r9 (c_rarg0, c_rarg1, ...)\n+  \/\/ Unix:  rdi, rsi, rdx, rcx (c_rarg0, c_rarg1, ...)\n+  const Register x      = rdi;\n+  const Register len    = rsi;\n+  const Register z      = r8;\n+  const Register zlen   = rcx;\n@@ -7035,2 +6914,5 @@\n-    BLOCK_COMMENT(\"Entry:\");\n-    __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+ const Register tmp1      = r12;\n+ const Register tmp2      = r13;\n+ const Register tmp3      = r14;\n+ const Register tmp4      = r15;\n+ const Register tmp5      = rbx;\n@@ -7038,30 +6920,2 @@\n-#ifdef _WINDOWS\n-    setup_arg_regs(4);\n-    \/\/ For windows, since last argument is on stack, we need to move it to the appropriate register.\n-    __ movl(totalNumIter, Address(rsp, 6 * wordSize));\n-    \/\/ Save callee save registers.\n-    __ push(tmp3);\n-    __ push(tmp4);\n-#endif\n-    __ push(tmp5);\n-\n-    \/\/ Rename temps used throughout the code.\n-    const Register idx = tmp1;\n-    const Register nIdx = tmp2;\n-\n-    __ xorl(idx, idx);\n-\n-    \/\/ Start right shift from end of the array.\n-    \/\/ For example, if #iteration = 4 and newIdx = 1\n-    \/\/ then dest[4] = src[4] >> shiftCount  | src[3] <<< (shiftCount - 32)\n-    \/\/ if #iteration = 4 and newIdx = 0\n-    \/\/ then dest[3] = src[4] >> shiftCount  | src[3] <<< (shiftCount - 32)\n-    __ movl(idx, totalNumIter);\n-    __ movl(nIdx, idx);\n-    __ addl(nIdx, newIdx);\n-\n-    \/\/ If vectorization is enabled, check if the number of iterations is at least 64\n-    \/\/ If not, then go to ShifTwo processing 2 iterations\n-    if (VM_Version::supports_avx512_vbmi2()) {\n-      __ cmpptr(totalNumIter, (AVX3Threshold\/64));\n-      __ jcc(Assembler::less, ShiftTwo);\n+  BLOCK_COMMENT(\"Entry:\");\n+  __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n@@ -7069,98 +6923,5 @@\n-      if (AVX3Threshold < 16 * 64) {\n-        __ cmpl(totalNumIter, 16);\n-        __ jcc(Assembler::less, ShiftTwo);\n-      }\n-      __ evpbroadcastd(x0, shiftCount, Assembler::AVX_512bit);\n-      __ subl(idx, 16);\n-      __ subl(nIdx, 16);\n-      __ BIND(Shift512Loop);\n-      __ evmovdqul(x2, Address(oldArr, idx, Address::times_4, 4), Assembler::AVX_512bit);\n-      __ evmovdqul(x1, Address(oldArr, idx, Address::times_4), Assembler::AVX_512bit);\n-      __ vpshrdvd(x2, x1, x0, Assembler::AVX_512bit);\n-      __ evmovdqul(Address(newArr, nIdx, Address::times_4), x2, Assembler::AVX_512bit);\n-      __ subl(nIdx, 16);\n-      __ subl(idx, 16);\n-      __ jcc(Assembler::greaterEqual, Shift512Loop);\n-      __ addl(idx, 16);\n-      __ addl(nIdx, 16);\n-    }\n-    __ BIND(ShiftTwo);\n-    __ cmpl(idx, 2);\n-    __ jcc(Assembler::less, ShiftOne);\n-    __ subl(idx, 2);\n-    __ subl(nIdx, 2);\n-    __ BIND(ShiftTwoLoop);\n-    __ movl(tmp5, Address(oldArr, idx, Address::times_4, 8));\n-    __ movl(tmp4, Address(oldArr, idx, Address::times_4, 4));\n-    __ movl(tmp3, Address(oldArr, idx, Address::times_4));\n-    __ shrdl(tmp5, tmp4);\n-    __ shrdl(tmp4, tmp3);\n-    __ movl(Address(newArr, nIdx, Address::times_4, 4), tmp5);\n-    __ movl(Address(newArr, nIdx, Address::times_4), tmp4);\n-    __ subl(nIdx, 2);\n-    __ subl(idx, 2);\n-    __ jcc(Assembler::greaterEqual, ShiftTwoLoop);\n-    __ addl(idx, 2);\n-    __ addl(nIdx, 2);\n-\n-    \/\/ Do the last iteration\n-    __ BIND(ShiftOne);\n-    __ cmpl(idx, 1);\n-    __ jcc(Assembler::less, Exit);\n-    __ subl(idx, 1);\n-    __ subl(nIdx, 1);\n-    __ movl(tmp4, Address(oldArr, idx, Address::times_4, 4));\n-    __ movl(tmp3, Address(oldArr, idx, Address::times_4));\n-    __ shrdl(tmp4, tmp3);\n-    __ movl(Address(newArr, nIdx, Address::times_4), tmp4);\n-    __ BIND(Exit);\n-    __ vzeroupper();\n-    \/\/ Restore callee save registers.\n-    __ pop(tmp5);\n-#ifdef _WINDOWS\n-    __ pop(tmp4);\n-    __ pop(tmp3);\n-    restore_arg_regs();\n-#endif\n-    __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    __ ret(0);\n-    return start;\n-  }\n-\n-   \/**\n-   *  Arguments:\n-   *\n-   *  Input:\n-   *    c_rarg0   - newArr address\n-   *    c_rarg1   - oldArr address\n-   *    c_rarg2   - newIdx\n-   *    c_rarg3   - shiftCount\n-   * not Win64\n-   *    c_rarg4   - numIter\n-   * Win64\n-   *    rsp40    - numIter\n-   *\/\n-  address generate_bigIntegerLeftShift() {\n-    __ align(CodeEntryAlignment);\n-    StubCodeMark mark(this,  \"StubRoutines\", \"bigIntegerLeftShiftWorker\");\n-    address start = __ pc();\n-    Label Shift512Loop, ShiftTwo, ShiftTwoLoop, ShiftOne, Exit;\n-    \/\/ For Unix, the arguments are as follows: rdi, rsi, rdx, rcx, r8.\n-    const Register newArr = rdi;\n-    const Register oldArr = rsi;\n-    const Register newIdx = rdx;\n-    const Register shiftCount = rcx;  \/\/ It was intentional to have shiftCount in rcx since it is used implicitly for shift.\n-    const Register totalNumIter = r8;\n-    \/\/ For windows, we use r9 and r10 as temps to save rdi and rsi. Thus we cannot allocate them for our temps.\n-    \/\/ For everything else, we prefer using r9 and r10 since we do not have to save them before use.\n-    const Register tmp1 = r11;                    \/\/ Caller save.\n-    const Register tmp2 = rax;                    \/\/ Caller save.\n-    const Register tmp3 = WINDOWS_ONLY(r12) NOT_WINDOWS(r9);   \/\/ Windows: Callee save. Linux: Caller save.\n-    const Register tmp4 = WINDOWS_ONLY(r13) NOT_WINDOWS(r10);  \/\/ Windows: Callee save. Linux: Caller save.\n-    const Register tmp5 = r14;                    \/\/ Callee save.\n-\n-    const XMMRegister x0 = xmm0;\n-    const XMMRegister x1 = xmm1;\n-    const XMMRegister x2 = xmm2;\n-    BLOCK_COMMENT(\"Entry:\");\n-    __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  setup_arg_regs(4); \/\/ x => rdi, len => rsi, z => rdx\n+                     \/\/ zlen => rcx\n+                     \/\/ r9 and r10 may be used to save non-volatile registers\n+  __ movptr(r8, rdx);\n+  __ square_to_len(x, len, z, zlen, tmp1, tmp2, tmp3, tmp4, tmp5, rdx, rax);\n@@ -7168,25 +6929,1 @@\n-#ifdef _WINDOWS\n-    setup_arg_regs(4);\n-    \/\/ For windows, since last argument is on stack, we need to move it to the appropriate register.\n-    __ movl(totalNumIter, Address(rsp, 6 * wordSize));\n-    \/\/ Save callee save registers.\n-    __ push(tmp3);\n-    __ push(tmp4);\n-#endif\n-    __ push(tmp5);\n-\n-    \/\/ Rename temps used throughout the code\n-    const Register idx = tmp1;\n-    const Register numIterTmp = tmp2;\n-\n-    \/\/ Start idx from zero.\n-    __ xorl(idx, idx);\n-    \/\/ Compute interior pointer for new array. We do this so that we can use same index for both old and new arrays.\n-    __ lea(newArr, Address(newArr, newIdx, Address::times_4));\n-    __ movl(numIterTmp, totalNumIter);\n-\n-    \/\/ If vectorization is enabled, check if the number of iterations is at least 64\n-    \/\/ If not, then go to ShiftTwo shifting two numbers at a time\n-    if (VM_Version::supports_avx512_vbmi2()) {\n-      __ cmpl(totalNumIter, (AVX3Threshold\/64));\n-      __ jcc(Assembler::less, ShiftTwo);\n+  restore_arg_regs();\n@@ -7194,57 +6931,2 @@\n-      if (AVX3Threshold < 16 * 64) {\n-        __ cmpl(totalNumIter, 16);\n-        __ jcc(Assembler::less, ShiftTwo);\n-      }\n-      __ evpbroadcastd(x0, shiftCount, Assembler::AVX_512bit);\n-      __ subl(numIterTmp, 16);\n-      __ BIND(Shift512Loop);\n-      __ evmovdqul(x1, Address(oldArr, idx, Address::times_4), Assembler::AVX_512bit);\n-      __ evmovdqul(x2, Address(oldArr, idx, Address::times_4, 0x4), Assembler::AVX_512bit);\n-      __ vpshldvd(x1, x2, x0, Assembler::AVX_512bit);\n-      __ evmovdqul(Address(newArr, idx, Address::times_4), x1, Assembler::AVX_512bit);\n-      __ addl(idx, 16);\n-      __ subl(numIterTmp, 16);\n-      __ jcc(Assembler::greaterEqual, Shift512Loop);\n-      __ addl(numIterTmp, 16);\n-    }\n-    __ BIND(ShiftTwo);\n-    __ cmpl(totalNumIter, 1);\n-    __ jcc(Assembler::less, Exit);\n-    __ movl(tmp3, Address(oldArr, idx, Address::times_4));\n-    __ subl(numIterTmp, 2);\n-    __ jcc(Assembler::less, ShiftOne);\n-\n-    __ BIND(ShiftTwoLoop);\n-    __ movl(tmp4, Address(oldArr, idx, Address::times_4, 0x4));\n-    __ movl(tmp5, Address(oldArr, idx, Address::times_4, 0x8));\n-    __ shldl(tmp3, tmp4);\n-    __ shldl(tmp4, tmp5);\n-    __ movl(Address(newArr, idx, Address::times_4), tmp3);\n-    __ movl(Address(newArr, idx, Address::times_4, 0x4), tmp4);\n-    __ movl(tmp3, tmp5);\n-    __ addl(idx, 2);\n-    __ subl(numIterTmp, 2);\n-    __ jcc(Assembler::greaterEqual, ShiftTwoLoop);\n-\n-    \/\/ Do the last iteration\n-    __ BIND(ShiftOne);\n-    __ addl(numIterTmp, 2);\n-    __ cmpl(numIterTmp, 1);\n-    __ jcc(Assembler::less, Exit);\n-    __ movl(tmp4, Address(oldArr, idx, Address::times_4, 0x4));\n-    __ shldl(tmp3, tmp4);\n-    __ movl(Address(newArr, idx, Address::times_4), tmp3);\n-\n-    __ BIND(Exit);\n-    __ vzeroupper();\n-    \/\/ Restore callee save registers.\n-    __ pop(tmp5);\n-#ifdef _WINDOWS\n-    __ pop(tmp4);\n-    __ pop(tmp3);\n-    restore_arg_regs();\n-#endif\n-    __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    __ ret(0);\n-    return start;\n-  }\n+  __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ ret(0);\n@@ -7252,2 +6934,2 @@\n-  address generate_libmExp() {\n-    StubCodeMark mark(this, \"StubRoutines\", \"libmExp\");\n+  return start;\n+}\n@@ -7255,1 +6937,4 @@\n-    address start = __ pc();\n+address StubGenerator::generate_method_entry_barrier() {\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", \"nmethod_entry_barrier\");\n+  address start = __ pc();\n@@ -7257,2 +6942,1 @@\n-    BLOCK_COMMENT(\"Entry:\");\n-    __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  Label deoptimize_label;\n@@ -7260,2 +6944,1 @@\n-    __ fast_exp(xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7,\n-                rax, rcx, rdx, r11);\n+  __ push(-1); \/\/ cookie, this is used for writing the new rsp when deoptimizing\n@@ -7263,2 +6946,2 @@\n-    __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    __ ret(0);\n+  BLOCK_COMMENT(\"Entry:\");\n+  __ enter(); \/\/ save rbp\n@@ -7266,1 +6949,3 @@\n-    return start;\n+  \/\/ save c_rarg0, because we want to use that value.\n+  \/\/ We could do without it but then we depend on the number of slots used by pusha\n+  __ push(c_rarg0);\n@@ -7268,1 +6953,1 @@\n-  }\n+  __ lea(c_rarg0, Address(rsp, wordSize * 3)); \/\/ 1 for cookie, 1 for rbp, 1 for c_rarg0 - this should be the return address\n@@ -7270,2 +6955,1 @@\n-  address generate_libmLog() {\n-    StubCodeMark mark(this, \"StubRoutines\", \"libmLog\");\n+  __ pusha();\n@@ -7273,1 +6957,14 @@\n-    address start = __ pc();\n+  \/\/ The method may have floats as arguments, and we must spill them before calling\n+  \/\/ the VM runtime.\n+  assert(Argument::n_float_register_parameters_j == 8, \"Assumption\");\n+  const int xmm_size = wordSize * 2;\n+  const int xmm_spill_size = xmm_size * Argument::n_float_register_parameters_j;\n+  __ subptr(rsp, xmm_spill_size);\n+  __ movdqu(Address(rsp, xmm_size * 7), xmm7);\n+  __ movdqu(Address(rsp, xmm_size * 6), xmm6);\n+  __ movdqu(Address(rsp, xmm_size * 5), xmm5);\n+  __ movdqu(Address(rsp, xmm_size * 4), xmm4);\n+  __ movdqu(Address(rsp, xmm_size * 3), xmm3);\n+  __ movdqu(Address(rsp, xmm_size * 2), xmm2);\n+  __ movdqu(Address(rsp, xmm_size * 1), xmm1);\n+  __ movdqu(Address(rsp, xmm_size * 0), xmm0);\n@@ -7275,2 +6972,1 @@\n-    BLOCK_COMMENT(\"Entry:\");\n-    __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ call_VM_leaf(CAST_FROM_FN_PTR(address, static_cast<int (*)(address*)>(BarrierSetNMethod::nmethod_stub_entry_barrier)), 1);\n@@ -7278,2 +6974,9 @@\n-    __ fast_log(xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7,\n-                rax, rcx, rdx, r11, r8);\n+  __ movdqu(xmm0, Address(rsp, xmm_size * 0));\n+  __ movdqu(xmm1, Address(rsp, xmm_size * 1));\n+  __ movdqu(xmm2, Address(rsp, xmm_size * 2));\n+  __ movdqu(xmm3, Address(rsp, xmm_size * 3));\n+  __ movdqu(xmm4, Address(rsp, xmm_size * 4));\n+  __ movdqu(xmm5, Address(rsp, xmm_size * 5));\n+  __ movdqu(xmm6, Address(rsp, xmm_size * 6));\n+  __ movdqu(xmm7, Address(rsp, xmm_size * 7));\n+  __ addptr(rsp, xmm_spill_size);\n@@ -7281,2 +6984,2 @@\n-    __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    __ ret(0);\n+  __ cmpl(rax, 1); \/\/ 1 means deoptimize\n+  __ jcc(Assembler::equal, deoptimize_label);\n@@ -7284,1 +6987,2 @@\n-    return start;\n+  __ popa();\n+  __ pop(c_rarg0);\n@@ -7286,1 +6990,1 @@\n-  }\n+  __ leave();\n@@ -7288,2 +6992,2 @@\n-  address generate_libmLog10() {\n-    StubCodeMark mark(this, \"StubRoutines\", \"libmLog10\");\n+  __ addptr(rsp, 1 * wordSize); \/\/ cookie\n+  __ ret(0);\n@@ -7291,1 +6995,0 @@\n-    address start = __ pc();\n@@ -7293,2 +6996,1 @@\n-    BLOCK_COMMENT(\"Entry:\");\n-    __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ BIND(deoptimize_label);\n@@ -7296,2 +6998,2 @@\n-    __ fast_log10(xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7,\n-                  rax, rcx, rdx, r11, r8);\n+  __ popa();\n+  __ pop(c_rarg0);\n@@ -7299,2 +7001,1 @@\n-    __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    __ ret(0);\n+  __ leave();\n@@ -7302,1 +7003,3 @@\n-    return start;\n+  \/\/ this can be taken out, but is good for verification purposes. getting a SIGSEGV\n+  \/\/ here while still having a correct stack is valuable\n+  __ testptr(rsp, Address(rsp, 0));\n@@ -7304,1 +7007,2 @@\n-  }\n+  __ movptr(rsp, Address(rsp, 0)); \/\/ new rsp was written in the barrier\n+  __ jmp(Address(rsp, -1 * wordSize)); \/\/ jmp target should be callers verified_entry_point\n@@ -7306,2 +7010,2 @@\n-  address generate_libmPow() {\n-    StubCodeMark mark(this, \"StubRoutines\", \"libmPow\");\n+  return start;\n+}\n@@ -7309,1 +7013,45 @@\n-    address start = __ pc();\n+ \/**\n+ *  Arguments:\n+ *\n+ *  Input:\n+ *    c_rarg0   - out address\n+ *    c_rarg1   - in address\n+ *    c_rarg2   - offset\n+ *    c_rarg3   - len\n+ * not Win64\n+ *    c_rarg4   - k\n+ * Win64\n+ *    rsp+40    - k\n+ *\/\n+address StubGenerator::generate_mulAdd() {\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", \"mulAdd\");\n+  address start = __ pc();\n+\n+  \/\/ Win64: rcx, rdx, r8, r9 (c_rarg0, c_rarg1, ...)\n+  \/\/ Unix:  rdi, rsi, rdx, rcx, r8, r9 (c_rarg0, c_rarg1, ...)\n+  const Register out     = rdi;\n+  const Register in      = rsi;\n+  const Register offset  = r11;\n+  const Register len     = rcx;\n+  const Register k       = r8;\n+\n+  \/\/ Next registers will be saved on stack in mul_add().\n+  const Register tmp1  = r12;\n+  const Register tmp2  = r13;\n+  const Register tmp3  = r14;\n+  const Register tmp4  = r15;\n+  const Register tmp5  = rbx;\n+\n+  BLOCK_COMMENT(\"Entry:\");\n+  __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+\n+  setup_arg_regs(4); \/\/ out => rdi, in => rsi, offset => rdx\n+                     \/\/ len => rcx, k => r8\n+                     \/\/ r9 and r10 may be used to save non-volatile registers\n+#ifdef _WIN64\n+  \/\/ last argument is on stack on Win64\n+  __ movl(k, Address(rsp, 6 * wordSize));\n+#endif\n+  __ movptr(r11, rdx);  \/\/ move offset in rdx to offset(r11)\n+  __ mul_add(out, in, offset, len, k, tmp1, tmp2, tmp3, tmp4, tmp5, rdx, rax);\n@@ -7311,2 +7059,1 @@\n-    BLOCK_COMMENT(\"Entry:\");\n-    __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  restore_arg_regs();\n@@ -7314,2 +7061,2 @@\n-    __ fast_pow(xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7,\n-                rax, rcx, rdx, r8, r9, r10, r11);\n+  __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ ret(0);\n@@ -7317,2 +7064,2 @@\n-    __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    __ ret(0);\n+  return start;\n+}\n@@ -7320,1 +7067,28 @@\n-    return start;\n+address StubGenerator::generate_bigIntegerRightShift() {\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this, \"StubRoutines\", \"bigIntegerRightShiftWorker\");\n+  address start = __ pc();\n+\n+  Label Shift512Loop, ShiftTwo, ShiftTwoLoop, ShiftOne, Exit;\n+  \/\/ For Unix, the arguments are as follows: rdi, rsi, rdx, rcx, r8.\n+  const Register newArr = rdi;\n+  const Register oldArr = rsi;\n+  const Register newIdx = rdx;\n+  const Register shiftCount = rcx;  \/\/ It was intentional to have shiftCount in rcx since it is used implicitly for shift.\n+  const Register totalNumIter = r8;\n+\n+  \/\/ For windows, we use r9 and r10 as temps to save rdi and rsi. Thus we cannot allocate them for our temps.\n+  \/\/ For everything else, we prefer using r9 and r10 since we do not have to save them before use.\n+  const Register tmp1 = r11;                    \/\/ Caller save.\n+  const Register tmp2 = rax;                    \/\/ Caller save.\n+  const Register tmp3 = WIN64_ONLY(r12) NOT_WIN64(r9);   \/\/ Windows: Callee save. Linux: Caller save.\n+  const Register tmp4 = WIN64_ONLY(r13) NOT_WIN64(r10);  \/\/ Windows: Callee save. Linux: Caller save.\n+  const Register tmp5 = r14;                    \/\/ Callee save.\n+  const Register tmp6 = r15;\n+\n+  const XMMRegister x0 = xmm0;\n+  const XMMRegister x1 = xmm1;\n+  const XMMRegister x2 = xmm2;\n+\n+  BLOCK_COMMENT(\"Entry:\");\n+  __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n@@ -7322,0 +7096,48 @@\n+#ifdef _WIN64\n+  setup_arg_regs(4);\n+  \/\/ For windows, since last argument is on stack, we need to move it to the appropriate register.\n+  __ movl(totalNumIter, Address(rsp, 6 * wordSize));\n+  \/\/ Save callee save registers.\n+  __ push(tmp3);\n+  __ push(tmp4);\n+#endif\n+  __ push(tmp5);\n+\n+  \/\/ Rename temps used throughout the code.\n+  const Register idx = tmp1;\n+  const Register nIdx = tmp2;\n+\n+  __ xorl(idx, idx);\n+\n+  \/\/ Start right shift from end of the array.\n+  \/\/ For example, if #iteration = 4 and newIdx = 1\n+  \/\/ then dest[4] = src[4] >> shiftCount  | src[3] <<< (shiftCount - 32)\n+  \/\/ if #iteration = 4 and newIdx = 0\n+  \/\/ then dest[3] = src[4] >> shiftCount  | src[3] <<< (shiftCount - 32)\n+  __ movl(idx, totalNumIter);\n+  __ movl(nIdx, idx);\n+  __ addl(nIdx, newIdx);\n+\n+  \/\/ If vectorization is enabled, check if the number of iterations is at least 64\n+  \/\/ If not, then go to ShifTwo processing 2 iterations\n+  if (VM_Version::supports_avx512_vbmi2()) {\n+    __ cmpptr(totalNumIter, (AVX3Threshold\/64));\n+    __ jcc(Assembler::less, ShiftTwo);\n+\n+    if (AVX3Threshold < 16 * 64) {\n+      __ cmpl(totalNumIter, 16);\n+      __ jcc(Assembler::less, ShiftTwo);\n+    }\n+    __ evpbroadcastd(x0, shiftCount, Assembler::AVX_512bit);\n+    __ subl(idx, 16);\n+    __ subl(nIdx, 16);\n+    __ BIND(Shift512Loop);\n+    __ evmovdqul(x2, Address(oldArr, idx, Address::times_4, 4), Assembler::AVX_512bit);\n+    __ evmovdqul(x1, Address(oldArr, idx, Address::times_4), Assembler::AVX_512bit);\n+    __ vpshrdvd(x2, x1, x0, Assembler::AVX_512bit);\n+    __ evmovdqul(Address(newArr, nIdx, Address::times_4), x2, Assembler::AVX_512bit);\n+    __ subl(nIdx, 16);\n+    __ subl(idx, 16);\n+    __ jcc(Assembler::greaterEqual, Shift512Loop);\n+    __ addl(idx, 16);\n+    __ addl(nIdx, 16);\n@@ -7323,0 +7145,40 @@\n+  __ BIND(ShiftTwo);\n+  __ cmpl(idx, 2);\n+  __ jcc(Assembler::less, ShiftOne);\n+  __ subl(idx, 2);\n+  __ subl(nIdx, 2);\n+  __ BIND(ShiftTwoLoop);\n+  __ movl(tmp5, Address(oldArr, idx, Address::times_4, 8));\n+  __ movl(tmp4, Address(oldArr, idx, Address::times_4, 4));\n+  __ movl(tmp3, Address(oldArr, idx, Address::times_4));\n+  __ shrdl(tmp5, tmp4);\n+  __ shrdl(tmp4, tmp3);\n+  __ movl(Address(newArr, nIdx, Address::times_4, 4), tmp5);\n+  __ movl(Address(newArr, nIdx, Address::times_4), tmp4);\n+  __ subl(nIdx, 2);\n+  __ subl(idx, 2);\n+  __ jcc(Assembler::greaterEqual, ShiftTwoLoop);\n+  __ addl(idx, 2);\n+  __ addl(nIdx, 2);\n+\n+  \/\/ Do the last iteration\n+  __ BIND(ShiftOne);\n+  __ cmpl(idx, 1);\n+  __ jcc(Assembler::less, Exit);\n+  __ subl(idx, 1);\n+  __ subl(nIdx, 1);\n+  __ movl(tmp4, Address(oldArr, idx, Address::times_4, 4));\n+  __ movl(tmp3, Address(oldArr, idx, Address::times_4));\n+  __ shrdl(tmp4, tmp3);\n+  __ movl(Address(newArr, nIdx, Address::times_4), tmp4);\n+  __ BIND(Exit);\n+  __ vzeroupper();\n+  \/\/ Restore callee save registers.\n+  __ pop(tmp5);\n+#ifdef _WIN64\n+  __ pop(tmp4);\n+  __ pop(tmp3);\n+  restore_arg_regs();\n+#endif\n+  __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ ret(0);\n@@ -7324,4 +7186,2 @@\n-  address generate_libmSin() {\n-    StubCodeMark mark(this, \"StubRoutines\", \"libmSin\");\n-\n-    address start = __ pc();\n+  return start;\n+}\n@@ -7329,2 +7189,38 @@\n-    BLOCK_COMMENT(\"Entry:\");\n-    __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+ \/**\n+ *  Arguments:\n+ *\n+ *  Input:\n+ *    c_rarg0   - newArr address\n+ *    c_rarg1   - oldArr address\n+ *    c_rarg2   - newIdx\n+ *    c_rarg3   - shiftCount\n+ * not Win64\n+ *    c_rarg4   - numIter\n+ * Win64\n+ *    rsp40    - numIter\n+ *\/\n+address StubGenerator::generate_bigIntegerLeftShift() {\n+  __ align(CodeEntryAlignment);\n+  StubCodeMark mark(this,  \"StubRoutines\", \"bigIntegerLeftShiftWorker\");\n+  address start = __ pc();\n+\n+  Label Shift512Loop, ShiftTwo, ShiftTwoLoop, ShiftOne, Exit;\n+  \/\/ For Unix, the arguments are as follows: rdi, rsi, rdx, rcx, r8.\n+  const Register newArr = rdi;\n+  const Register oldArr = rsi;\n+  const Register newIdx = rdx;\n+  const Register shiftCount = rcx;  \/\/ It was intentional to have shiftCount in rcx since it is used implicitly for shift.\n+  const Register totalNumIter = r8;\n+  \/\/ For windows, we use r9 and r10 as temps to save rdi and rsi. Thus we cannot allocate them for our temps.\n+  \/\/ For everything else, we prefer using r9 and r10 since we do not have to save them before use.\n+  const Register tmp1 = r11;                    \/\/ Caller save.\n+  const Register tmp2 = rax;                    \/\/ Caller save.\n+  const Register tmp3 = WIN64_ONLY(r12) NOT_WIN64(r9);   \/\/ Windows: Callee save. Linux: Caller save.\n+  const Register tmp4 = WIN64_ONLY(r13) NOT_WIN64(r10);  \/\/ Windows: Callee save. Linux: Caller save.\n+  const Register tmp5 = r14;                    \/\/ Callee save.\n+\n+  const XMMRegister x0 = xmm0;\n+  const XMMRegister x1 = xmm1;\n+  const XMMRegister x2 = xmm2;\n+  BLOCK_COMMENT(\"Entry:\");\n+  __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n@@ -7333,2 +7229,6 @@\n-    __ push(rsi);\n-    __ push(rdi);\n+  setup_arg_regs(4);\n+  \/\/ For windows, since last argument is on stack, we need to move it to the appropriate register.\n+  __ movl(totalNumIter, Address(rsp, 6 * wordSize));\n+  \/\/ Save callee save registers.\n+  __ push(tmp3);\n+  __ push(tmp4);\n@@ -7336,2 +7236,66 @@\n-    __ fast_sin(xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7,\n-                rax, rbx, rcx, rdx, r8);\n+  __ push(tmp5);\n+\n+  \/\/ Rename temps used throughout the code\n+  const Register idx = tmp1;\n+  const Register numIterTmp = tmp2;\n+\n+  \/\/ Start idx from zero.\n+  __ xorl(idx, idx);\n+  \/\/ Compute interior pointer for new array. We do this so that we can use same index for both old and new arrays.\n+  __ lea(newArr, Address(newArr, newIdx, Address::times_4));\n+  __ movl(numIterTmp, totalNumIter);\n+\n+  \/\/ If vectorization is enabled, check if the number of iterations is at least 64\n+  \/\/ If not, then go to ShiftTwo shifting two numbers at a time\n+  if (VM_Version::supports_avx512_vbmi2()) {\n+    __ cmpl(totalNumIter, (AVX3Threshold\/64));\n+    __ jcc(Assembler::less, ShiftTwo);\n+\n+    if (AVX3Threshold < 16 * 64) {\n+      __ cmpl(totalNumIter, 16);\n+      __ jcc(Assembler::less, ShiftTwo);\n+    }\n+    __ evpbroadcastd(x0, shiftCount, Assembler::AVX_512bit);\n+    __ subl(numIterTmp, 16);\n+    __ BIND(Shift512Loop);\n+    __ evmovdqul(x1, Address(oldArr, idx, Address::times_4), Assembler::AVX_512bit);\n+    __ evmovdqul(x2, Address(oldArr, idx, Address::times_4, 0x4), Assembler::AVX_512bit);\n+    __ vpshldvd(x1, x2, x0, Assembler::AVX_512bit);\n+    __ evmovdqul(Address(newArr, idx, Address::times_4), x1, Assembler::AVX_512bit);\n+    __ addl(idx, 16);\n+    __ subl(numIterTmp, 16);\n+    __ jcc(Assembler::greaterEqual, Shift512Loop);\n+    __ addl(numIterTmp, 16);\n+  }\n+  __ BIND(ShiftTwo);\n+  __ cmpl(totalNumIter, 1);\n+  __ jcc(Assembler::less, Exit);\n+  __ movl(tmp3, Address(oldArr, idx, Address::times_4));\n+  __ subl(numIterTmp, 2);\n+  __ jcc(Assembler::less, ShiftOne);\n+\n+  __ BIND(ShiftTwoLoop);\n+  __ movl(tmp4, Address(oldArr, idx, Address::times_4, 0x4));\n+  __ movl(tmp5, Address(oldArr, idx, Address::times_4, 0x8));\n+  __ shldl(tmp3, tmp4);\n+  __ shldl(tmp4, tmp5);\n+  __ movl(Address(newArr, idx, Address::times_4), tmp3);\n+  __ movl(Address(newArr, idx, Address::times_4, 0x4), tmp4);\n+  __ movl(tmp3, tmp5);\n+  __ addl(idx, 2);\n+  __ subl(numIterTmp, 2);\n+  __ jcc(Assembler::greaterEqual, ShiftTwoLoop);\n+\n+  \/\/ Do the last iteration\n+  __ BIND(ShiftOne);\n+  __ addl(numIterTmp, 2);\n+  __ cmpl(numIterTmp, 1);\n+  __ jcc(Assembler::less, Exit);\n+  __ movl(tmp4, Address(oldArr, idx, Address::times_4, 0x4));\n+  __ shldl(tmp3, tmp4);\n+  __ movl(Address(newArr, idx, Address::times_4), tmp3);\n+\n+  __ BIND(Exit);\n+  __ vzeroupper();\n+  \/\/ Restore callee save registers.\n+  __ pop(tmp5);\n@@ -7339,2 +7303,3 @@\n-    __ pop(rdi);\n-    __ pop(rsi);\n+  __ pop(tmp4);\n+  __ pop(tmp3);\n+  restore_arg_regs();\n@@ -7342,0 +7307,2 @@\n+  __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ ret(0);\n@@ -7343,4 +7310,2 @@\n-    __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    __ ret(0);\n-\n-    return start;\n+  return start;\n+}\n@@ -7348,0 +7313,23 @@\n+void StubGenerator::generate_libm_stubs() {\n+  if (UseLibmIntrinsic && InlineIntrinsics) {\n+    if (vmIntrinsics::is_intrinsic_available(vmIntrinsics::_dsin)) {\n+      StubRoutines::_dsin = generate_libmSin(); \/\/ from stubGenerator_x86_64_sin.cpp\n+    }\n+    if (vmIntrinsics::is_intrinsic_available(vmIntrinsics::_dcos)) {\n+      StubRoutines::_dcos = generate_libmCos(); \/\/ from stubGenerator_x86_64_cos.cpp\n+    }\n+    if (vmIntrinsics::is_intrinsic_available(vmIntrinsics::_dtan)) {\n+      StubRoutines::_dtan = generate_libmTan();\n+    }\n+    if (vmIntrinsics::is_intrinsic_available(vmIntrinsics::_dexp)) {\n+      StubRoutines::_dexp = generate_libmExp();\n+    }\n+    if (vmIntrinsics::is_intrinsic_available(vmIntrinsics::_dpow)) {\n+      StubRoutines::_dpow = generate_libmPow();\n+    }\n+    if (vmIntrinsics::is_intrinsic_available(vmIntrinsics::_dlog)) {\n+      StubRoutines::_dlog = generate_libmLog();\n+    }\n+    if (vmIntrinsics::is_intrinsic_available(vmIntrinsics::_dlog10)) {\n+      StubRoutines::_dlog10 = generate_libmLog10();\n+    }\n@@ -7349,0 +7337,1 @@\n+}\n@@ -7350,2 +7339,0 @@\n-  address generate_libmCos() {\n-    StubCodeMark mark(this, \"StubRoutines\", \"libmCos\");\n@@ -7353,1 +7340,2 @@\n-    address start = __ pc();\n+address StubGenerator::generate_cont_thaw(const char* label, Continuation::thaw_kind kind) {\n+  if (!Continuations::enabled()) return nullptr;\n@@ -7355,2 +7343,2 @@\n-    BLOCK_COMMENT(\"Entry:\");\n-    __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  bool return_barrier = Continuation::is_thaw_return_barrier(kind);\n+  bool return_barrier_exception = Continuation::is_thaw_return_barrier_exception(kind);\n@@ -7358,6 +7346,2 @@\n-#ifdef _WIN64\n-    __ push(rsi);\n-    __ push(rdi);\n-#endif\n-    __ fast_cos(xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7,\n-                rax, rcx, rdx, r8, r9, r10, r11, rbx);\n+  StubCodeMark mark(this, \"StubRoutines\", label);\n+  address start = __ pc();\n@@ -7365,4 +7349,1 @@\n-#ifdef _WIN64\n-    __ pop(rdi);\n-    __ pop(rsi);\n-#endif\n+  \/\/ TODO: Handle Valhalla return types. May require generating different return barriers.\n@@ -7370,2 +7351,7 @@\n-    __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    __ ret(0);\n+  if (!return_barrier) {\n+    \/\/ Pop return address. If we don't do this, we get a drift,\n+    \/\/ where the bottom-most frozen frame continuously grows.\n+    __ pop(c_rarg3);\n+  } else {\n+    __ movptr(rsp, Address(r15_thread, JavaThread::cont_entry_offset()));\n+  }\n@@ -7373,1 +7359,9 @@\n-    return start;\n+#ifdef ASSERT\n+  {\n+    Label L_good_sp;\n+    __ cmpptr(rsp, Address(r15_thread, JavaThread::cont_entry_offset()));\n+    __ jcc(Assembler::equal, L_good_sp);\n+    __ stop(\"Incorrect rsp at thaw entry\");\n+    __ BIND(L_good_sp);\n+  }\n+#endif \/\/ ASSERT\n@@ -7375,0 +7369,4 @@\n+  if (return_barrier) {\n+    \/\/ Preserve possible return value from a method returning to the return barrier.\n+    __ push(rax);\n+    __ push_d(xmm0);\n@@ -7377,2 +7375,4 @@\n-  address generate_libmTan() {\n-    StubCodeMark mark(this, \"StubRoutines\", \"libmTan\");\n+  __ movptr(c_rarg0, r15_thread);\n+  __ movptr(c_rarg1, (return_barrier ? 1 : 0));\n+  __ call_VM_leaf(CAST_FROM_FN_PTR(address, Continuation::prepare_thaw), 2);\n+  __ movptr(rbx, rax);\n@@ -7380,1 +7380,6 @@\n-    address start = __ pc();\n+  if (return_barrier) {\n+    \/\/ Restore return value from a method returning to the return barrier.\n+    \/\/ No safepoint in the call to thaw, so even an oop return value should be OK.\n+    __ pop_d(xmm0);\n+    __ pop(rax);\n+  }\n@@ -7382,2 +7387,9 @@\n-    BLOCK_COMMENT(\"Entry:\");\n-    __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+#ifdef ASSERT\n+  {\n+    Label L_good_sp;\n+    __ cmpptr(rsp, Address(r15_thread, JavaThread::cont_entry_offset()));\n+    __ jcc(Assembler::equal, L_good_sp);\n+    __ stop(\"Incorrect rsp after prepare thaw\");\n+    __ BIND(L_good_sp);\n+  }\n+#endif \/\/ ASSERT\n@@ -7385,6 +7397,6 @@\n-#ifdef _WIN64\n-    __ push(rsi);\n-    __ push(rdi);\n-#endif\n-    __ fast_tan(xmm0, xmm1, xmm2, xmm3, xmm4, xmm5, xmm6, xmm7,\n-                rax, rcx, rdx, r8, r9, r10, r11, rbx);\n+  \/\/ rbx contains the size of the frames to thaw, 0 if overflow or no more frames\n+  Label L_thaw_success;\n+  __ testptr(rbx, rbx);\n+  __ jccb(Assembler::notZero, L_thaw_success);\n+  __ jump(ExternalAddress(StubRoutines::throw_StackOverflowError_entry()));\n+  __ bind(L_thaw_success);\n@@ -7392,4 +7404,3 @@\n-#ifdef _WIN64\n-    __ pop(rdi);\n-    __ pop(rsi);\n-#endif\n+  \/\/ Make room for the thawed frames and align the stack.\n+  __ subptr(rsp, rbx);\n+  __ andptr(rsp, -StackAlignmentInBytes);\n@@ -7397,2 +7408,5 @@\n-    __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n-    __ ret(0);\n+  if (return_barrier) {\n+    \/\/ Preserve possible return value from a method returning to the return barrier. (Again.)\n+    __ push(rax);\n+    __ push_d(xmm0);\n+  }\n@@ -7400,1 +7414,5 @@\n-    return start;\n+  \/\/ If we want, we can templatize thaw by kind, and have three different entries.\n+  __ movptr(c_rarg0, r15_thread);\n+  __ movptr(c_rarg1, kind);\n+  __ call_VM_leaf(Continuation::thaw_entry(), 2);\n+  __ movptr(rbx, rax);\n@@ -7402,0 +7420,8 @@\n+  if (return_barrier) {\n+    \/\/ Restore return value from a method returning to the return barrier. (Again.)\n+    \/\/ No safepoint in the call to thaw, so even an oop return value should be OK.\n+    __ pop_d(xmm0);\n+    __ pop(rax);\n+  } else {\n+    \/\/ Return 0 (success) from doYield.\n+    __ xorptr(rax, rax);\n@@ -7404,2 +7430,4 @@\n-  address generate_cont_thaw(const char* label, Continuation::thaw_kind kind) {\n-    if (!Continuations::enabled()) return nullptr;\n+  \/\/ After thawing, rbx is the SP of the yielding frame.\n+  \/\/ Move there, and then to saved RBP slot.\n+  __ movptr(rsp, rbx);\n+  __ subptr(rsp, 2*wordSize);\n@@ -7407,2 +7435,3 @@\n-    bool return_barrier = Continuation::is_thaw_return_barrier(kind);\n-    bool return_barrier_exception = Continuation::is_thaw_return_barrier_exception(kind);\n+  if (return_barrier_exception) {\n+    __ movptr(c_rarg0, r15_thread);\n+    __ movptr(c_rarg1, Address(rsp, wordSize)); \/\/ return address\n@@ -7410,2 +7439,2 @@\n-    StubCodeMark mark(this, \"StubRoutines\", label);\n-    address start = __ pc();\n+    \/\/ rax still holds the original exception oop, save it before the call\n+    __ push(rax);\n@@ -7413,1 +7442,2 @@\n-    \/\/ TODO: Handle Valhalla return types. May require generating different return barriers.\n+    __ call_VM_leaf(CAST_FROM_FN_PTR(address, SharedRuntime::exception_handler_for_return_address), 2);\n+    __ movptr(rbx, rax);\n@@ -7415,7 +7445,14 @@\n-    if (!return_barrier) {\n-      \/\/ Pop return address. If we don't do this, we get a drift,\n-      \/\/ where the bottom-most frozen frame continuously grows.\n-      __ pop(c_rarg3);\n-    } else {\n-      __ movptr(rsp, Address(r15_thread, JavaThread::cont_entry_offset()));\n-    }\n+    \/\/ Continue at exception handler:\n+    \/\/   rax: exception oop\n+    \/\/   rbx: exception handler\n+    \/\/   rdx: exception pc\n+    __ pop(rax);\n+    __ verify_oop(rax);\n+    __ pop(rbp); \/\/ pop out RBP here too\n+    __ pop(rdx);\n+    __ jmp(rbx);\n+  } else {\n+    \/\/ We are \"returning\" into the topmost thawed frame; see Thaw::push_return_frame\n+    __ pop(rbp);\n+    __ ret(0);\n+  }\n@@ -7423,9 +7460,2 @@\n-#ifdef ASSERT\n-    {\n-      Label L_good_sp;\n-      __ cmpptr(rsp, Address(r15_thread, JavaThread::cont_entry_offset()));\n-      __ jcc(Assembler::equal, L_good_sp);\n-      __ stop(\"Incorrect rsp at thaw entry\");\n-      __ BIND(L_good_sp);\n-    }\n-#endif\n+  return start;\n+}\n@@ -7433,5 +7463,3 @@\n-    if (return_barrier) {\n-      \/\/ Preserve possible return value from a method returning to the return barrier.\n-      __ push(rax);\n-      __ push_d(xmm0);\n-    }\n+address StubGenerator::generate_cont_thaw() {\n+  return generate_cont_thaw(\"Cont thaw\", Continuation::thaw_top);\n+}\n@@ -7439,4 +7467,1 @@\n-    __ movptr(c_rarg0, r15_thread);\n-    __ movptr(c_rarg1, (return_barrier ? 1 : 0));\n-    __ call_VM_leaf(CAST_FROM_FN_PTR(address, Continuation::prepare_thaw), 2);\n-    __ movptr(rbx, rax);\n+\/\/ TODO: will probably need multiple return barriers depending on return type\n@@ -7444,6 +7469,3 @@\n-    if (return_barrier) {\n-      \/\/ Restore return value from a method returning to the return barrier.\n-      \/\/ No safepoint in the call to thaw, so even an oop return value should be OK.\n-      __ pop_d(xmm0);\n-      __ pop(rax);\n-    }\n+address StubGenerator::generate_cont_returnBarrier() {\n+  return generate_cont_thaw(\"Cont thaw return barrier\", Continuation::thaw_return_barrier);\n+}\n@@ -7451,9 +7473,3 @@\n-#ifdef ASSERT\n-    {\n-      Label L_good_sp;\n-      __ cmpptr(rsp, Address(r15_thread, JavaThread::cont_entry_offset()));\n-      __ jcc(Assembler::equal, L_good_sp);\n-      __ stop(\"Incorrect rsp after prepare thaw\");\n-      __ BIND(L_good_sp);\n-    }\n-#endif\n+address StubGenerator::generate_cont_returnBarrier_exception() {\n+  return generate_cont_thaw(\"Cont thaw return barrier exception\", Continuation::thaw_return_barrier_exception);\n+}\n@@ -7461,16 +7477,1 @@\n-    \/\/ rbx contains the size of the frames to thaw, 0 if overflow or no more frames\n-    Label L_thaw_success;\n-    __ testptr(rbx, rbx);\n-    __ jccb(Assembler::notZero, L_thaw_success);\n-    __ jump(ExternalAddress(StubRoutines::throw_StackOverflowError_entry()));\n-    __ bind(L_thaw_success);\n-\n-    \/\/ Make room for the thawed frames and align the stack.\n-    __ subptr(rsp, rbx);\n-    __ andptr(rsp, -StackAlignmentInBytes);\n-\n-    if (return_barrier) {\n-      \/\/ Preserve possible return value from a method returning to the return barrier. (Again.)\n-      __ push(rax);\n-      __ push_d(xmm0);\n-    }\n+#if INCLUDE_JFR\n@@ -7478,5 +7479,11 @@\n-    \/\/ If we want, we can templatize thaw by kind, and have three different entries.\n-    __ movptr(c_rarg0, r15_thread);\n-    __ movptr(c_rarg1, kind);\n-    __ call_VM_leaf(Continuation::thaw_entry(), 2);\n-    __ movptr(rbx, rax);\n+\/\/ For c2: c_rarg0 is junk, call to runtime to write a checkpoint.\n+\/\/ It returns a jobject handle to the event writer.\n+\/\/ The handle is dereferenced and the return value is the event writer oop.\n+RuntimeStub* StubGenerator::generate_jfr_write_checkpoint() {\n+  enum layout {\n+    rbp_off,\n+    rbpH_off,\n+    return_off,\n+    return_off2,\n+    framesize \/\/ inclusive of return address\n+  };\n@@ -7484,9 +7491,3 @@\n-    if (return_barrier) {\n-      \/\/ Restore return value from a method returning to the return barrier. (Again.)\n-      \/\/ No safepoint in the call to thaw, so even an oop return value should be OK.\n-      __ pop_d(xmm0);\n-      __ pop(rax);\n-    } else {\n-      \/\/ Return 0 (success) from doYield.\n-      __ xorptr(rax, rax);\n-    }\n+  CodeBuffer code(\"jfr_write_checkpoint\", 512, 64);\n+  MacroAssembler* _masm = new MacroAssembler(&code);\n+  address start = __ pc();\n@@ -7494,29 +7495,2 @@\n-    \/\/ After thawing, rbx is the SP of the yielding frame.\n-    \/\/ Move there, and then to saved RBP slot.\n-    __ movptr(rsp, rbx);\n-    __ subptr(rsp, 2*wordSize);\n-\n-    if (return_barrier_exception) {\n-      __ movptr(c_rarg0, r15_thread);\n-      __ movptr(c_rarg1, Address(rsp, wordSize)); \/\/ return address\n-\n-      \/\/ rax still holds the original exception oop, save it before the call\n-      __ push(rax);\n-\n-      __ call_VM_leaf(CAST_FROM_FN_PTR(address, SharedRuntime::exception_handler_for_return_address), 2);\n-      __ movptr(rbx, rax);\n-\n-      \/\/ Continue at exception handler:\n-      \/\/   rax: exception oop\n-      \/\/   rbx: exception handler\n-      \/\/   rdx: exception pc\n-      __ pop(rax);\n-      __ verify_oop(rax);\n-      __ pop(rbp); \/\/ pop out RBP here too\n-      __ pop(rdx);\n-      __ jmp(rbx);\n-    } else {\n-      \/\/ We are \"returning\" into the topmost thawed frame; see Thaw::push_return_frame\n-      __ pop(rbp);\n-      __ ret(0);\n-    }\n+  __ enter();\n+  address the_pc = __ pc();\n@@ -7524,2 +7498,1 @@\n-    return start;\n-  }\n+  int frame_complete = the_pc - start;\n@@ -7527,3 +7500,4 @@\n-  address generate_cont_thaw() {\n-    return generate_cont_thaw(\"Cont thaw\", Continuation::thaw_top);\n-  }\n+  __ set_last_Java_frame(rsp, rbp, the_pc, rscratch1);\n+  __ movptr(c_rarg0, r15_thread);\n+  __ call_VM_leaf(CAST_FROM_FN_PTR(address, JfrIntrinsicSupport::write_checkpoint), 1);\n+  __ reset_last_Java_frame(true);\n@@ -7531,1 +7505,4 @@\n-  \/\/ TODO: will probably need multiple return barriers depending on return type\n+  \/\/ rax is jobject handle result, unpack and process it through a barrier.\n+  Label L_null_jobject;\n+  __ testptr(rax, rax);\n+  __ jcc(Assembler::zero, L_null_jobject);\n@@ -7533,3 +7510,2 @@\n-  address generate_cont_returnBarrier() {\n-    return generate_cont_thaw(\"Cont thaw return barrier\", Continuation::thaw_return_barrier);\n-  }\n+  BarrierSetAssembler* bs = BarrierSet::barrier_set()->barrier_set_assembler();\n+  bs->load_at(_masm, ACCESS_READ | IN_NATIVE, T_OBJECT, rax, Address(rax, 0), c_rarg0, r15_thread);\n@@ -7537,3 +7513,1 @@\n-  address generate_cont_returnBarrier_exception() {\n-    return generate_cont_thaw(\"Cont thaw return barrier exception\", Continuation::thaw_return_barrier_exception);\n-  }\n+  __ bind(L_null_jobject);\n@@ -7541,1 +7515,2 @@\n-#if INCLUDE_JFR\n+  __ leave();\n+  __ ret(0);\n@@ -7543,11 +7518,3 @@\n-  \/\/ For c2: c_rarg0 is junk, call to runtime to write a checkpoint.\n-  \/\/ It returns a jobject handle to the event writer.\n-  \/\/ The handle is dereferenced and the return value is the event writer oop.\n-  RuntimeStub* generate_jfr_write_checkpoint() {\n-    enum layout {\n-      rbp_off,\n-      rbpH_off,\n-      return_off,\n-      return_off2,\n-      framesize \/\/ inclusive of return address\n-    };\n+  OopMapSet* oop_maps = new OopMapSet();\n+  OopMap* map = new OopMap(framesize, 1);\n+  oop_maps->add_gc_map(frame_complete, map);\n@@ -7555,2 +7522,9 @@\n-    CodeBuffer code(\"jfr_write_checkpoint\", 512, 64);\n-    MacroAssembler* _masm = new MacroAssembler(&code);\n+  RuntimeStub* stub =\n+    RuntimeStub::new_runtime_stub(code.name(),\n+                                  &code,\n+                                  frame_complete,\n+                                  (framesize >> (LogBytesPerWord - LogBytesPerInt)),\n+                                  oop_maps,\n+                                  false);\n+  return stub;\n+}\n@@ -7558,3 +7532,1 @@\n-    address start = __ pc();\n-    __ enter();\n-    address the_pc = __ pc();\n+#endif \/\/ INCLUDE_JFR\n@@ -7562,1 +7534,30 @@\n-    int frame_complete = the_pc - start;\n+\/\/ Continuation point for throwing of implicit exceptions that are\n+\/\/ not handled in the current activation. Fabricates an exception\n+\/\/ oop and initiates normal exception dispatching in this\n+\/\/ frame. Since we need to preserve callee-saved values (currently\n+\/\/ only for C2, but done for C1 as well) we need a callee-saved oop\n+\/\/ map and therefore have to make these stubs into RuntimeStubs\n+\/\/ rather than BufferBlobs.  If the compiler needs all registers to\n+\/\/ be preserved between the fault point and the exception handler\n+\/\/ then it must assume responsibility for that in\n+\/\/ AbstractCompiler::continuation_for_implicit_null_exception or\n+\/\/ continuation_for_implicit_division_by_zero_exception. All other\n+\/\/ implicit exceptions (e.g., NullPointerException or\n+\/\/ AbstractMethodError on entry) are either at call sites or\n+\/\/ otherwise assume that stack unwinding will be initiated, so\n+\/\/ caller saved registers were assumed volatile in the compiler.\n+address StubGenerator::generate_throw_exception(const char* name,\n+                                                address runtime_entry,\n+                                                Register arg1,\n+                                                Register arg2) {\n+  \/\/ Information about frame layout at time of blocking runtime call.\n+  \/\/ Note that we only have to preserve callee-saved registers since\n+  \/\/ the compilers are responsible for supplying a continuation point\n+  \/\/ if they expect all registers to be preserved.\n+  enum layout {\n+    rbp_off = frame::arg_reg_save_area_bytes\/BytesPerInt,\n+    rbp_off2,\n+    return_off,\n+    return_off2,\n+    framesize \/\/ inclusive of return address\n+  };\n@@ -7564,4 +7565,2 @@\n-    __ set_last_Java_frame(rsp, rbp, the_pc, rscratch1);\n-    __ movptr(c_rarg0, r15_thread);\n-    __ call_VM_leaf(CAST_FROM_FN_PTR(address, JfrIntrinsicSupport::write_checkpoint), 1);\n-    __ reset_last_Java_frame(true);\n+  int insts_size = 512;\n+  int locs_size  = 64;\n@@ -7569,4 +7568,3 @@\n-    \/\/ rax is jobject handle result, unpack and process it through a barrier.\n-    Label L_null_jobject;\n-    __ testptr(rax, rax);\n-    __ jcc(Assembler::zero, L_null_jobject);\n+  CodeBuffer code(name, insts_size, locs_size);\n+  OopMapSet* oop_maps  = new OopMapSet();\n+  MacroAssembler* _masm = new MacroAssembler(&code);\n@@ -7574,2 +7572,1 @@\n-    BarrierSetAssembler* bs = BarrierSet::barrier_set()->barrier_set_assembler();\n-    bs->load_at(_masm, ACCESS_READ | IN_NATIVE, T_OBJECT, rax, Address(rax, 0), c_rarg0, r15_thread);\n+  address start = __ pc();\n@@ -7577,1 +7574,4 @@\n-    __ bind(L_null_jobject);\n+  \/\/ This is an inlined and slightly modified version of call_VM\n+  \/\/ which has the ability to fetch the return PC out of\n+  \/\/ thread-local storage and also sets up last_Java_sp slightly\n+  \/\/ differently than the real call_VM\n@@ -7579,2 +7579,1 @@\n-    __ leave();\n-    __ ret(0);\n+  __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n@@ -7582,3 +7581,1 @@\n-    OopMapSet* oop_maps = new OopMapSet();\n-    OopMap* map = new OopMap(framesize, 1);\n-    oop_maps->add_gc_map(frame_complete, map);\n+  assert(is_even(framesize\/2), \"sp not 16-byte aligned\");\n@@ -7586,9 +7583,2 @@\n-    RuntimeStub* stub =\n-      RuntimeStub::new_runtime_stub(code.name(),\n-                                    &code,\n-                                    frame_complete,\n-                                    (framesize >> (LogBytesPerWord - LogBytesPerInt)),\n-                                    oop_maps,\n-                                    false);\n-    return stub;\n-  }\n+  \/\/ return address and rbp are already in place\n+  __ subptr(rsp, (framesize-4) << LogBytesPerInt); \/\/ prolog\n@@ -7596,1 +7586,1 @@\n-#endif \/\/ INCLUDE_JFR\n+  int frame_complete = __ pc() - start;\n@@ -7598,73 +7588,16 @@\n-#undef __\n-#define __ masm->\n-\n-  \/\/ Continuation point for throwing of implicit exceptions that are\n-  \/\/ not handled in the current activation. Fabricates an exception\n-  \/\/ oop and initiates normal exception dispatching in this\n-  \/\/ frame. Since we need to preserve callee-saved values (currently\n-  \/\/ only for C2, but done for C1 as well) we need a callee-saved oop\n-  \/\/ map and therefore have to make these stubs into RuntimeStubs\n-  \/\/ rather than BufferBlobs.  If the compiler needs all registers to\n-  \/\/ be preserved between the fault point and the exception handler\n-  \/\/ then it must assume responsibility for that in\n-  \/\/ AbstractCompiler::continuation_for_implicit_null_exception or\n-  \/\/ continuation_for_implicit_division_by_zero_exception. All other\n-  \/\/ implicit exceptions (e.g., NullPointerException or\n-  \/\/ AbstractMethodError on entry) are either at call sites or\n-  \/\/ otherwise assume that stack unwinding will be initiated, so\n-  \/\/ caller saved registers were assumed volatile in the compiler.\n-  address generate_throw_exception(const char* name,\n-                                   address runtime_entry,\n-                                   Register arg1 = noreg,\n-                                   Register arg2 = noreg) {\n-    \/\/ Information about frame layout at time of blocking runtime call.\n-    \/\/ Note that we only have to preserve callee-saved registers since\n-    \/\/ the compilers are responsible for supplying a continuation point\n-    \/\/ if they expect all registers to be preserved.\n-    enum layout {\n-      rbp_off = frame::arg_reg_save_area_bytes\/BytesPerInt,\n-      rbp_off2,\n-      return_off,\n-      return_off2,\n-      framesize \/\/ inclusive of return address\n-    };\n-\n-    int insts_size = 512;\n-    int locs_size  = 64;\n-\n-    CodeBuffer code(name, insts_size, locs_size);\n-    OopMapSet* oop_maps  = new OopMapSet();\n-    MacroAssembler* masm = new MacroAssembler(&code);\n-\n-    address start = __ pc();\n-\n-    \/\/ This is an inlined and slightly modified version of call_VM\n-    \/\/ which has the ability to fetch the return PC out of\n-    \/\/ thread-local storage and also sets up last_Java_sp slightly\n-    \/\/ differently than the real call_VM\n-\n-    __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n-\n-    assert(is_even(framesize\/2), \"sp not 16-byte aligned\");\n-\n-    \/\/ return address and rbp are already in place\n-    __ subptr(rsp, (framesize-4) << LogBytesPerInt); \/\/ prolog\n-\n-    int frame_complete = __ pc() - start;\n-\n-    \/\/ Set up last_Java_sp and last_Java_fp\n-    address the_pc = __ pc();\n-    __ set_last_Java_frame(rsp, rbp, the_pc, rscratch1);\n-    __ andptr(rsp, -(StackAlignmentInBytes));    \/\/ Align stack\n-\n-    \/\/ Call runtime\n-    if (arg1 != noreg) {\n-      assert(arg2 != c_rarg1, \"clobbered\");\n-      __ movptr(c_rarg1, arg1);\n-    }\n-    if (arg2 != noreg) {\n-      __ movptr(c_rarg2, arg2);\n-    }\n-    __ movptr(c_rarg0, r15_thread);\n-    BLOCK_COMMENT(\"call runtime_entry\");\n-    __ call(RuntimeAddress(runtime_entry));\n+  \/\/ Set up last_Java_sp and last_Java_fp\n+  address the_pc = __ pc();\n+  __ set_last_Java_frame(rsp, rbp, the_pc, rscratch1);\n+  __ andptr(rsp, -(StackAlignmentInBytes));    \/\/ Align stack\n+\n+  \/\/ Call runtime\n+  if (arg1 != noreg) {\n+    assert(arg2 != c_rarg1, \"clobbered\");\n+    __ movptr(c_rarg1, arg1);\n+  }\n+  if (arg2 != noreg) {\n+    __ movptr(c_rarg2, arg2);\n+  }\n+  __ movptr(c_rarg0, r15_thread);\n+  BLOCK_COMMENT(\"call runtime_entry\");\n+  __ call(RuntimeAddress(runtime_entry));\n@@ -7672,2 +7605,2 @@\n-    \/\/ Generate oop map\n-    OopMap* map = new OopMap(framesize, 0);\n+  \/\/ Generate oop map\n+  OopMap* map = new OopMap(framesize, 0);\n@@ -7675,1 +7608,1 @@\n-    oop_maps->add_gc_map(the_pc - start, map);\n+  oop_maps->add_gc_map(the_pc - start, map);\n@@ -7677,1 +7610,1 @@\n-    __ reset_last_Java_frame(true);\n+  __ reset_last_Java_frame(true);\n@@ -7679,1 +7612,1 @@\n-    __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n@@ -7681,1 +7614,1 @@\n-    \/\/ check for pending exceptions\n+  \/\/ check for pending exceptions\n@@ -7683,5 +7616,5 @@\n-    Label L;\n-    __ cmpptr(Address(r15_thread, Thread::pending_exception_offset()), NULL_WORD);\n-    __ jcc(Assembler::notEqual, L);\n-    __ should_not_reach_here();\n-    __ bind(L);\n+  Label L;\n+  __ cmpptr(Address(r15_thread, Thread::pending_exception_offset()), NULL_WORD);\n+  __ jcc(Assembler::notEqual, L);\n+  __ should_not_reach_here();\n+  __ bind(L);\n@@ -7689,73 +7622,1 @@\n-    __ jump(RuntimeAddress(StubRoutines::forward_exception_entry()));\n-\n-\n-    \/\/ codeBlob framesize is in words (not VMRegImpl::slot_size)\n-    RuntimeStub* stub =\n-      RuntimeStub::new_runtime_stub(name,\n-                                    &code,\n-                                    frame_complete,\n-                                    (framesize >> (LogBytesPerWord - LogBytesPerInt)),\n-                                    oop_maps, false);\n-    return stub->entry_point();\n-  }\n-\n-  void create_control_words() {\n-    \/\/ Round to nearest, 64-bit mode, exceptions masked\n-    StubRoutines::x86::_mxcsr_std = 0x1F80;\n-  }\n-\n-  \/\/ Initialization\n-  void generate_initial() {\n-    \/\/ Generates all stubs and initializes the entry points\n-\n-    \/\/ This platform-specific settings are needed by generate_call_stub()\n-    create_control_words();\n-\n-    \/\/ entry points that exist in all platforms Note: This is code\n-    \/\/ that could be shared among different platforms - however the\n-    \/\/ benefit seems to be smaller than the disadvantage of having a\n-    \/\/ much more complicated generator structure. See also comment in\n-    \/\/ stubRoutines.hpp.\n-\n-    StubRoutines::_forward_exception_entry = generate_forward_exception();\n-\n-    StubRoutines::_call_stub_entry =\n-      generate_call_stub(StubRoutines::_call_stub_return_address);\n-\n-    \/\/ is referenced by megamorphic call\n-    StubRoutines::_catch_exception_entry = generate_catch_exception();\n-\n-    \/\/ atomic calls\n-    StubRoutines::_fence_entry                = generate_orderaccess_fence();\n-\n-    \/\/ platform dependent\n-    StubRoutines::x86::_get_previous_sp_entry = generate_get_previous_sp();\n-\n-    StubRoutines::x86::_verify_mxcsr_entry    = generate_verify_mxcsr();\n-\n-    StubRoutines::x86::_f2i_fixup             = generate_f2i_fixup();\n-    StubRoutines::x86::_f2l_fixup             = generate_f2l_fixup();\n-    StubRoutines::x86::_d2i_fixup             = generate_d2i_fixup();\n-    StubRoutines::x86::_d2l_fixup             = generate_d2l_fixup();\n-\n-    StubRoutines::x86::_float_sign_mask       = generate_fp_mask(\"float_sign_mask\",  0x7FFFFFFF7FFFFFFF);\n-    StubRoutines::x86::_float_sign_flip       = generate_fp_mask(\"float_sign_flip\",  0x8000000080000000);\n-    StubRoutines::x86::_double_sign_mask      = generate_fp_mask(\"double_sign_mask\", 0x7FFFFFFFFFFFFFFF);\n-    StubRoutines::x86::_double_sign_flip      = generate_fp_mask(\"double_sign_flip\", 0x8000000000000000);\n-\n-    \/\/ Build this early so it's available for the interpreter.\n-    StubRoutines::_throw_StackOverflowError_entry =\n-      generate_throw_exception(\"StackOverflowError throw_exception\",\n-                               CAST_FROM_FN_PTR(address,\n-                                                SharedRuntime::\n-                                                throw_StackOverflowError));\n-    StubRoutines::_throw_delayed_StackOverflowError_entry =\n-      generate_throw_exception(\"delayed StackOverflowError throw_exception\",\n-                               CAST_FROM_FN_PTR(address,\n-                                                SharedRuntime::\n-                                                throw_delayed_StackOverflowError));\n-    if (UseCRC32Intrinsics) {\n-      \/\/ set table address before stub generation which use it\n-      StubRoutines::_crc_table_adr = (address)StubRoutines::x86::_crc_table;\n-      StubRoutines::_updateBytesCRC32 = generate_updateBytesCRC32();\n-    }\n+  __ jump(RuntimeAddress(StubRoutines::forward_exception_entry()));\n@@ -7763,6 +7624,0 @@\n-    if (UseCRC32CIntrinsics) {\n-      bool supports_clmul = VM_Version::supports_clmul();\n-      StubRoutines::x86::generate_CRC32C_table(supports_clmul);\n-      StubRoutines::_crc32c_table_addr = (address)StubRoutines::x86::_crc32c_table;\n-      StubRoutines::_updateBytesCRC32C = generate_updateBytesCRC32C(supports_clmul);\n-    }\n@@ -7770,3 +7625,9 @@\n-    if (UseAdler32Intrinsics) {\n-       StubRoutines::_updateBytesAdler32 = generate_updateBytesAdler32();\n-    }\n+  \/\/ codeBlob framesize is in words (not VMRegImpl::slot_size)\n+  RuntimeStub* stub =\n+    RuntimeStub::new_runtime_stub(name,\n+                                  &code,\n+                                  frame_complete,\n+                                  (framesize >> (LogBytesPerWord - LogBytesPerInt)),\n+                                  oop_maps, false);\n+  return stub->entry_point();\n+}\n@@ -7774,23 +7635,59 @@\n-    if (UseLibmIntrinsic && InlineIntrinsics) {\n-      if (vmIntrinsics::is_intrinsic_available(vmIntrinsics::_dexp)) {\n-        StubRoutines::_dexp = generate_libmExp();\n-      }\n-      if (vmIntrinsics::is_intrinsic_available(vmIntrinsics::_dlog)) {\n-        StubRoutines::_dlog = generate_libmLog();\n-      }\n-      if (vmIntrinsics::is_intrinsic_available(vmIntrinsics::_dlog10)) {\n-        StubRoutines::_dlog10 = generate_libmLog10();\n-      }\n-      if (vmIntrinsics::is_intrinsic_available(vmIntrinsics::_dpow)) {\n-        StubRoutines::_dpow = generate_libmPow();\n-      }\n-      if (vmIntrinsics::is_intrinsic_available(vmIntrinsics::_dsin)) {\n-        StubRoutines::_dsin = generate_libmSin();\n-      }\n-      if (vmIntrinsics::is_intrinsic_available(vmIntrinsics::_dcos)) {\n-        StubRoutines::_dcos = generate_libmCos();\n-      }\n-      if (vmIntrinsics::is_intrinsic_available(vmIntrinsics::_dtan)) {\n-        StubRoutines::_dtan = generate_libmTan();\n-      }\n-    }\n+void StubGenerator::create_control_words() {\n+  \/\/ Round to nearest, 64-bit mode, exceptions masked\n+  StubRoutines::x86::_mxcsr_std = 0x1F80;\n+}\n+\n+\/\/ Initialization\n+void StubGenerator::generate_initial() {\n+  \/\/ Generates all stubs and initializes the entry points\n+\n+  \/\/ This platform-specific settings are needed by generate_call_stub()\n+  create_control_words();\n+\n+  \/\/ entry points that exist in all platforms Note: This is code\n+  \/\/ that could be shared among different platforms - however the\n+  \/\/ benefit seems to be smaller than the disadvantage of having a\n+  \/\/ much more complicated generator structure. See also comment in\n+  \/\/ stubRoutines.hpp.\n+\n+  StubRoutines::_forward_exception_entry = generate_forward_exception();\n+\n+  StubRoutines::_call_stub_entry =\n+    generate_call_stub(StubRoutines::_call_stub_return_address);\n+\n+  \/\/ is referenced by megamorphic call\n+  StubRoutines::_catch_exception_entry = generate_catch_exception();\n+\n+  \/\/ atomic calls\n+  StubRoutines::_fence_entry                = generate_orderaccess_fence();\n+\n+  \/\/ platform dependent\n+  StubRoutines::x86::_get_previous_sp_entry = generate_get_previous_sp();\n+\n+  StubRoutines::x86::_verify_mxcsr_entry    = generate_verify_mxcsr();\n+\n+  StubRoutines::x86::_f2i_fixup             = generate_f2i_fixup();\n+  StubRoutines::x86::_f2l_fixup             = generate_f2l_fixup();\n+  StubRoutines::x86::_d2i_fixup             = generate_d2i_fixup();\n+  StubRoutines::x86::_d2l_fixup             = generate_d2l_fixup();\n+\n+  StubRoutines::x86::_float_sign_mask       = generate_fp_mask(\"float_sign_mask\",  0x7FFFFFFF7FFFFFFF);\n+  StubRoutines::x86::_float_sign_flip       = generate_fp_mask(\"float_sign_flip\",  0x8000000080000000);\n+  StubRoutines::x86::_double_sign_mask      = generate_fp_mask(\"double_sign_mask\", 0x7FFFFFFFFFFFFFFF);\n+  StubRoutines::x86::_double_sign_flip      = generate_fp_mask(\"double_sign_flip\", 0x8000000000000000);\n+\n+  \/\/ Build this early so it's available for the interpreter.\n+  StubRoutines::_throw_StackOverflowError_entry =\n+    generate_throw_exception(\"StackOverflowError throw_exception\",\n+                             CAST_FROM_FN_PTR(address,\n+                                              SharedRuntime::\n+                                              throw_StackOverflowError));\n+  StubRoutines::_throw_delayed_StackOverflowError_entry =\n+    generate_throw_exception(\"delayed StackOverflowError throw_exception\",\n+                             CAST_FROM_FN_PTR(address,\n+                                              SharedRuntime::\n+                                              throw_delayed_StackOverflowError));\n+  if (UseCRC32Intrinsics) {\n+    \/\/ set table address before stub generation which use it\n+    StubRoutines::_crc_table_adr = (address)StubRoutines::x86::_crc_table;\n+    StubRoutines::_updateBytesCRC32 = generate_updateBytesCRC32();\n@@ -7799,65 +7696,82 @@\n-  void generate_phase1() {\n-    \/\/ Continuation stubs:\n-    StubRoutines::_cont_thaw          = generate_cont_thaw();\n-    StubRoutines::_cont_returnBarrier = generate_cont_returnBarrier();\n-    StubRoutines::_cont_returnBarrierExc = generate_cont_returnBarrier_exception();\n-\n-    JFR_ONLY(StubRoutines::_jfr_write_checkpoint_stub = generate_jfr_write_checkpoint();)\n-    JFR_ONLY(StubRoutines::_jfr_write_checkpoint = StubRoutines::_jfr_write_checkpoint_stub->entry_point();)\n-  }\n-\n-  void generate_all() {\n-    \/\/ Generates all stubs and initializes the entry points\n-\n-    \/\/ These entry points require SharedInfo::stack0 to be set up in\n-    \/\/ non-core builds and need to be relocatable, so they each\n-    \/\/ fabricate a RuntimeStub internally.\n-    StubRoutines::_throw_AbstractMethodError_entry =\n-      generate_throw_exception(\"AbstractMethodError throw_exception\",\n-                               CAST_FROM_FN_PTR(address,\n-                                                SharedRuntime::\n-                                                throw_AbstractMethodError));\n-\n-    StubRoutines::_throw_IncompatibleClassChangeError_entry =\n-      generate_throw_exception(\"IncompatibleClassChangeError throw_exception\",\n-                               CAST_FROM_FN_PTR(address,\n-                                                SharedRuntime::\n-                                                throw_IncompatibleClassChangeError));\n-\n-    StubRoutines::_throw_NullPointerException_at_call_entry =\n-      generate_throw_exception(\"NullPointerException at call throw_exception\",\n-                               CAST_FROM_FN_PTR(address,\n-                                                SharedRuntime::\n-                                                throw_NullPointerException_at_call));\n-\n-    \/\/ entry points that are platform specific\n-    StubRoutines::x86::_vector_float_sign_mask = generate_vector_mask(\"vector_float_sign_mask\", 0x7FFFFFFF7FFFFFFF);\n-    StubRoutines::x86::_vector_float_sign_flip = generate_vector_mask(\"vector_float_sign_flip\", 0x8000000080000000);\n-    StubRoutines::x86::_vector_double_sign_mask = generate_vector_mask(\"vector_double_sign_mask\", 0x7FFFFFFFFFFFFFFF);\n-    StubRoutines::x86::_vector_double_sign_flip = generate_vector_mask(\"vector_double_sign_flip\", 0x8000000000000000);\n-    StubRoutines::x86::_vector_all_bits_set = generate_vector_mask(\"vector_all_bits_set\", 0xFFFFFFFFFFFFFFFF);\n-    StubRoutines::x86::_vector_int_mask_cmp_bits = generate_vector_mask(\"vector_int_mask_cmp_bits\", 0x0000000100000001);\n-    StubRoutines::x86::_vector_short_to_byte_mask = generate_vector_mask(\"vector_short_to_byte_mask\", 0x00ff00ff00ff00ff);\n-    StubRoutines::x86::_vector_byte_perm_mask = generate_vector_byte_perm_mask(\"vector_byte_perm_mask\");\n-    StubRoutines::x86::_vector_int_to_byte_mask = generate_vector_mask(\"vector_int_to_byte_mask\", 0x000000ff000000ff);\n-    StubRoutines::x86::_vector_int_to_short_mask = generate_vector_mask(\"vector_int_to_short_mask\", 0x0000ffff0000ffff);\n-    StubRoutines::x86::_vector_32_bit_mask = generate_vector_custom_i32(\"vector_32_bit_mask\", Assembler::AVX_512bit,\n-                                                                        0xFFFFFFFF, 0, 0, 0);\n-    StubRoutines::x86::_vector_64_bit_mask = generate_vector_custom_i32(\"vector_64_bit_mask\", Assembler::AVX_512bit,\n-                                                                        0xFFFFFFFF, 0xFFFFFFFF, 0, 0);\n-    StubRoutines::x86::_vector_int_shuffle_mask = generate_vector_mask(\"vector_int_shuffle_mask\", 0x0302010003020100);\n-    StubRoutines::x86::_vector_byte_shuffle_mask = generate_vector_byte_shuffle_mask(\"vector_byte_shuffle_mask\");\n-    StubRoutines::x86::_vector_short_shuffle_mask = generate_vector_mask(\"vector_short_shuffle_mask\", 0x0100010001000100);\n-    StubRoutines::x86::_vector_long_shuffle_mask = generate_vector_mask(\"vector_long_shuffle_mask\", 0x0000000100000000);\n-    StubRoutines::x86::_vector_long_sign_mask = generate_vector_mask(\"vector_long_sign_mask\", 0x8000000000000000);\n-    StubRoutines::x86::_vector_iota_indices = generate_iota_indices(\"iota_indices\");\n-    StubRoutines::x86::_vector_count_leading_zeros_lut = generate_count_leading_zeros_lut(\"count_leading_zeros_lut\");\n-    StubRoutines::x86::_vector_reverse_bit_lut = generate_vector_reverse_bit_lut(\"reverse_bit_lut\");\n-    StubRoutines::x86::_vector_reverse_byte_perm_mask_long = generate_vector_reverse_byte_perm_mask_long(\"perm_mask_long\");\n-    StubRoutines::x86::_vector_reverse_byte_perm_mask_int = generate_vector_reverse_byte_perm_mask_int(\"perm_mask_int\");\n-    StubRoutines::x86::_vector_reverse_byte_perm_mask_short = generate_vector_reverse_byte_perm_mask_short(\"perm_mask_short\");\n-\n-    if (VM_Version::supports_avx2() && !VM_Version::supports_avx512_vpopcntdq()) {\n-      \/\/ lut implementation influenced by counting 1s algorithm from section 5-1 of Hackers' Delight.\n-      StubRoutines::x86::_vector_popcount_lut = generate_popcount_avx_lut(\"popcount_lut\");\n-    }\n+  if (UseCRC32CIntrinsics) {\n+    bool supports_clmul = VM_Version::supports_clmul();\n+    StubRoutines::x86::generate_CRC32C_table(supports_clmul);\n+    StubRoutines::_crc32c_table_addr = (address)StubRoutines::x86::_crc32c_table;\n+    StubRoutines::_updateBytesCRC32C = generate_updateBytesCRC32C(supports_clmul);\n+  }\n+\n+  if (UseAdler32Intrinsics) {\n+     StubRoutines::_updateBytesAdler32 = generate_updateBytesAdler32();\n+  }\n+}\n+\n+void StubGenerator::generate_phase1() {\n+  \/\/ Continuation stubs:\n+  StubRoutines::_cont_thaw          = generate_cont_thaw();\n+  StubRoutines::_cont_returnBarrier = generate_cont_returnBarrier();\n+  StubRoutines::_cont_returnBarrierExc = generate_cont_returnBarrier_exception();\n+\n+  JFR_ONLY(StubRoutines::_jfr_write_checkpoint_stub = generate_jfr_write_checkpoint();)\n+  JFR_ONLY(StubRoutines::_jfr_write_checkpoint = StubRoutines::_jfr_write_checkpoint_stub->entry_point();)\n+}\n+\n+void StubGenerator::generate_all() {\n+  \/\/ Generates all stubs and initializes the entry points\n+\n+  \/\/ These entry points require SharedInfo::stack0 to be set up in\n+  \/\/ non-core builds and need to be relocatable, so they each\n+  \/\/ fabricate a RuntimeStub internally.\n+  StubRoutines::_throw_AbstractMethodError_entry =\n+    generate_throw_exception(\"AbstractMethodError throw_exception\",\n+                             CAST_FROM_FN_PTR(address,\n+                                              SharedRuntime::\n+                                              throw_AbstractMethodError));\n+\n+  StubRoutines::_throw_IncompatibleClassChangeError_entry =\n+    generate_throw_exception(\"IncompatibleClassChangeError throw_exception\",\n+                             CAST_FROM_FN_PTR(address,\n+                                              SharedRuntime::\n+                                              throw_IncompatibleClassChangeError));\n+\n+  StubRoutines::_throw_NullPointerException_at_call_entry =\n+    generate_throw_exception(\"NullPointerException at call throw_exception\",\n+                             CAST_FROM_FN_PTR(address,\n+                                              SharedRuntime::\n+                                              throw_NullPointerException_at_call));\n+\n+  \/\/ entry points that are platform specific\n+  StubRoutines::x86::_vector_float_sign_mask = generate_vector_mask(\"vector_float_sign_mask\", 0x7FFFFFFF7FFFFFFF);\n+  StubRoutines::x86::_vector_float_sign_flip = generate_vector_mask(\"vector_float_sign_flip\", 0x8000000080000000);\n+  StubRoutines::x86::_vector_double_sign_mask = generate_vector_mask(\"vector_double_sign_mask\", 0x7FFFFFFFFFFFFFFF);\n+  StubRoutines::x86::_vector_double_sign_flip = generate_vector_mask(\"vector_double_sign_flip\", 0x8000000000000000);\n+  StubRoutines::x86::_vector_all_bits_set = generate_vector_mask(\"vector_all_bits_set\", 0xFFFFFFFFFFFFFFFF);\n+  StubRoutines::x86::_vector_int_mask_cmp_bits = generate_vector_mask(\"vector_int_mask_cmp_bits\", 0x0000000100000001);\n+  StubRoutines::x86::_vector_short_to_byte_mask = generate_vector_mask(\"vector_short_to_byte_mask\", 0x00ff00ff00ff00ff);\n+  StubRoutines::x86::_vector_byte_perm_mask = generate_vector_byte_perm_mask(\"vector_byte_perm_mask\");\n+  StubRoutines::x86::_vector_int_to_byte_mask = generate_vector_mask(\"vector_int_to_byte_mask\", 0x000000ff000000ff);\n+  StubRoutines::x86::_vector_int_to_short_mask = generate_vector_mask(\"vector_int_to_short_mask\", 0x0000ffff0000ffff);\n+  StubRoutines::x86::_vector_32_bit_mask = generate_vector_custom_i32(\"vector_32_bit_mask\", Assembler::AVX_512bit,\n+                                                                      0xFFFFFFFF, 0, 0, 0);\n+  StubRoutines::x86::_vector_64_bit_mask = generate_vector_custom_i32(\"vector_64_bit_mask\", Assembler::AVX_512bit,\n+                                                                      0xFFFFFFFF, 0xFFFFFFFF, 0, 0);\n+  StubRoutines::x86::_vector_int_shuffle_mask = generate_vector_mask(\"vector_int_shuffle_mask\", 0x0302010003020100);\n+  StubRoutines::x86::_vector_byte_shuffle_mask = generate_vector_byte_shuffle_mask(\"vector_byte_shuffle_mask\");\n+  StubRoutines::x86::_vector_short_shuffle_mask = generate_vector_mask(\"vector_short_shuffle_mask\", 0x0100010001000100);\n+  StubRoutines::x86::_vector_long_shuffle_mask = generate_vector_mask(\"vector_long_shuffle_mask\", 0x0000000100000000);\n+  StubRoutines::x86::_vector_long_sign_mask = generate_vector_mask(\"vector_long_sign_mask\", 0x8000000000000000);\n+  StubRoutines::x86::_vector_iota_indices = generate_iota_indices(\"iota_indices\");\n+  StubRoutines::x86::_vector_count_leading_zeros_lut = generate_count_leading_zeros_lut(\"count_leading_zeros_lut\");\n+  StubRoutines::x86::_vector_reverse_bit_lut = generate_vector_reverse_bit_lut(\"reverse_bit_lut\");\n+  StubRoutines::x86::_vector_reverse_byte_perm_mask_long = generate_vector_reverse_byte_perm_mask_long(\"perm_mask_long\");\n+  StubRoutines::x86::_vector_reverse_byte_perm_mask_int = generate_vector_reverse_byte_perm_mask_int(\"perm_mask_int\");\n+  StubRoutines::x86::_vector_reverse_byte_perm_mask_short = generate_vector_reverse_byte_perm_mask_short(\"perm_mask_short\");\n+\n+  if (VM_Version::supports_avx2() && !VM_Version::supports_avx512_vpopcntdq()) {\n+    \/\/ lut implementation influenced by counting 1s algorithm from section 5-1 of Hackers' Delight.\n+    StubRoutines::x86::_vector_popcount_lut = generate_popcount_avx_lut(\"popcount_lut\");\n+  }\n+\n+  \/\/ support for verify_oop (must happen after universe_init)\n+  if (VerifyOops) {\n+    StubRoutines::_verify_oop_subroutine_entry = generate_verify_oop();\n+  }\n@@ -7865,3 +7779,23 @@\n-    \/\/ support for verify_oop (must happen after universe_init)\n-    if (VerifyOops) {\n-      StubRoutines::_verify_oop_subroutine_entry = generate_verify_oop();\n+  \/\/ data cache line writeback\n+  StubRoutines::_data_cache_writeback = generate_data_cache_writeback();\n+  StubRoutines::_data_cache_writeback_sync = generate_data_cache_writeback_sync();\n+\n+  \/\/ arraycopy stubs used by compilers\n+  generate_arraycopy_stubs();\n+\n+  \/\/ don't bother generating these AES intrinsic stubs unless global flag is set\n+  if (UseAESIntrinsics) {\n+    StubRoutines::x86::_key_shuffle_mask_addr = generate_key_shuffle_mask();  \/\/ needed by the others\n+    StubRoutines::_aescrypt_encryptBlock = generate_aescrypt_encryptBlock();\n+    StubRoutines::_aescrypt_decryptBlock = generate_aescrypt_decryptBlock();\n+    StubRoutines::_cipherBlockChaining_encryptAESCrypt = generate_cipherBlockChaining_encryptAESCrypt();\n+    if (VM_Version::supports_avx512_vaes() &&  VM_Version::supports_avx512vl() && VM_Version::supports_avx512dq() ) {\n+      StubRoutines::_cipherBlockChaining_decryptAESCrypt = generate_cipherBlockChaining_decryptVectorAESCrypt();\n+      StubRoutines::_electronicCodeBook_encryptAESCrypt = generate_electronicCodeBook_encryptAESCrypt();\n+      StubRoutines::_electronicCodeBook_decryptAESCrypt = generate_electronicCodeBook_decryptAESCrypt();\n+      StubRoutines::x86::_counter_mask_addr = counter_mask_addr();\n+      StubRoutines::x86::_ghash_poly512_addr = ghash_polynomial512_addr();\n+      StubRoutines::x86::_ghash_long_swap_mask_addr = generate_ghash_long_swap_mask();\n+      StubRoutines::_galoisCounterMode_AESCrypt = generate_galoisCounterMode_AESCrypt();\n+    } else {\n+      StubRoutines::_cipherBlockChaining_decryptAESCrypt = generate_cipherBlockChaining_decryptAESCrypt_Parallel();\n@@ -7869,0 +7803,1 @@\n+  }\n@@ -7870,17 +7805,3 @@\n-    \/\/ data cache line writeback\n-    StubRoutines::_data_cache_writeback = generate_data_cache_writeback();\n-    StubRoutines::_data_cache_writeback_sync = generate_data_cache_writeback_sync();\n-\n-    \/\/ arraycopy stubs used by compilers\n-    generate_arraycopy_stubs();\n-\n-    \/\/ don't bother generating these AES intrinsic stubs unless global flag is set\n-    if (UseAESIntrinsics) {\n-      StubRoutines::x86::_key_shuffle_mask_addr = generate_key_shuffle_mask();  \/\/ needed by the others\n-      StubRoutines::_aescrypt_encryptBlock = generate_aescrypt_encryptBlock();\n-      StubRoutines::_aescrypt_decryptBlock = generate_aescrypt_decryptBlock();\n-      StubRoutines::_cipherBlockChaining_encryptAESCrypt = generate_cipherBlockChaining_encryptAESCrypt();\n-      if (VM_Version::supports_avx512_vaes() &&  VM_Version::supports_avx512vl() && VM_Version::supports_avx512dq() ) {\n-        StubRoutines::_cipherBlockChaining_decryptAESCrypt = generate_cipherBlockChaining_decryptVectorAESCrypt();\n-        StubRoutines::_electronicCodeBook_encryptAESCrypt = generate_electronicCodeBook_encryptAESCrypt();\n-        StubRoutines::_electronicCodeBook_decryptAESCrypt = generate_electronicCodeBook_decryptAESCrypt();\n+  if (UseAESCTRIntrinsics) {\n+    if (VM_Version::supports_avx512_vaes() && VM_Version::supports_avx512bw() && VM_Version::supports_avx512vl()) {\n+      if (StubRoutines::x86::_counter_mask_addr == NULL) {\n@@ -7888,5 +7809,0 @@\n-        StubRoutines::x86::_ghash_poly512_addr = ghash_polynomial512_addr();\n-        StubRoutines::x86::_ghash_long_swap_mask_addr = generate_ghash_long_swap_mask();\n-        StubRoutines::_galoisCounterMode_AESCrypt = generate_galoisCounterMode_AESCrypt();\n-      } else {\n-        StubRoutines::_cipherBlockChaining_decryptAESCrypt = generate_cipherBlockChaining_decryptAESCrypt_Parallel();\n@@ -7894,0 +7810,4 @@\n+      StubRoutines::_counterMode_AESCrypt = generate_counterMode_VectorAESCrypt();\n+    } else {\n+      StubRoutines::x86::_counter_shuffle_mask_addr = generate_counter_shuffle_mask();\n+      StubRoutines::_counterMode_AESCrypt = generate_counterMode_AESCrypt_Parallel();\n@@ -7895,0 +7815,1 @@\n+  }\n@@ -7896,11 +7817,29 @@\n-    if (UseAESCTRIntrinsics) {\n-      if (VM_Version::supports_avx512_vaes() && VM_Version::supports_avx512bw() && VM_Version::supports_avx512vl()) {\n-        if (StubRoutines::x86::_counter_mask_addr == NULL) {\n-          StubRoutines::x86::_counter_mask_addr = counter_mask_addr();\n-        }\n-        StubRoutines::_counterMode_AESCrypt = generate_counterMode_VectorAESCrypt();\n-      } else {\n-        StubRoutines::x86::_counter_shuffle_mask_addr = generate_counter_shuffle_mask();\n-        StubRoutines::_counterMode_AESCrypt = generate_counterMode_AESCrypt_Parallel();\n-      }\n-    }\n+  if (UseMD5Intrinsics) {\n+    StubRoutines::_md5_implCompress = generate_md5_implCompress(false, \"md5_implCompress\");\n+    StubRoutines::_md5_implCompressMB = generate_md5_implCompress(true, \"md5_implCompressMB\");\n+  }\n+  if (UseSHA1Intrinsics) {\n+    StubRoutines::x86::_upper_word_mask_addr = generate_upper_word_mask();\n+    StubRoutines::x86::_shuffle_byte_flip_mask_addr = generate_shuffle_byte_flip_mask();\n+    StubRoutines::_sha1_implCompress = generate_sha1_implCompress(false, \"sha1_implCompress\");\n+    StubRoutines::_sha1_implCompressMB = generate_sha1_implCompress(true, \"sha1_implCompressMB\");\n+  }\n+  if (UseSHA256Intrinsics) {\n+    StubRoutines::x86::_k256_adr = (address)StubRoutines::x86::_k256;\n+    char* dst = (char*)StubRoutines::x86::_k256_W;\n+    char* src = (char*)StubRoutines::x86::_k256;\n+    for (int ii = 0; ii < 16; ++ii) {\n+      memcpy(dst + 32 * ii,      src + 16 * ii, 16);\n+      memcpy(dst + 32 * ii + 16, src + 16 * ii, 16);\n+    }\n+    StubRoutines::x86::_k256_W_adr = (address)StubRoutines::x86::_k256_W;\n+    StubRoutines::x86::_pshuffle_byte_flip_mask_addr = generate_pshuffle_byte_flip_mask();\n+    StubRoutines::_sha256_implCompress = generate_sha256_implCompress(false, \"sha256_implCompress\");\n+    StubRoutines::_sha256_implCompressMB = generate_sha256_implCompress(true, \"sha256_implCompressMB\");\n+  }\n+  if (UseSHA512Intrinsics) {\n+    StubRoutines::x86::_k512_W_addr = (address)StubRoutines::x86::_k512_W;\n+    StubRoutines::x86::_pshuffle_byte_flip_mask_addr_sha512 = generate_pshuffle_byte_flip_mask_sha512();\n+    StubRoutines::_sha512_implCompress = generate_sha512_implCompress(false, \"sha512_implCompress\");\n+    StubRoutines::_sha512_implCompressMB = generate_sha512_implCompress(true, \"sha512_implCompressMB\");\n+  }\n@@ -7908,22 +7847,4 @@\n-    if (UseMD5Intrinsics) {\n-      StubRoutines::_md5_implCompress = generate_md5_implCompress(false, \"md5_implCompress\");\n-      StubRoutines::_md5_implCompressMB = generate_md5_implCompress(true, \"md5_implCompressMB\");\n-    }\n-    if (UseSHA1Intrinsics) {\n-      StubRoutines::x86::_upper_word_mask_addr = generate_upper_word_mask();\n-      StubRoutines::x86::_shuffle_byte_flip_mask_addr = generate_shuffle_byte_flip_mask();\n-      StubRoutines::_sha1_implCompress = generate_sha1_implCompress(false, \"sha1_implCompress\");\n-      StubRoutines::_sha1_implCompressMB = generate_sha1_implCompress(true, \"sha1_implCompressMB\");\n-    }\n-    if (UseSHA256Intrinsics) {\n-      StubRoutines::x86::_k256_adr = (address)StubRoutines::x86::_k256;\n-      char* dst = (char*)StubRoutines::x86::_k256_W;\n-      char* src = (char*)StubRoutines::x86::_k256;\n-      for (int ii = 0; ii < 16; ++ii) {\n-        memcpy(dst + 32 * ii,      src + 16 * ii, 16);\n-        memcpy(dst + 32 * ii + 16, src + 16 * ii, 16);\n-      }\n-      StubRoutines::x86::_k256_W_adr = (address)StubRoutines::x86::_k256_W;\n-      StubRoutines::x86::_pshuffle_byte_flip_mask_addr = generate_pshuffle_byte_flip_mask();\n-      StubRoutines::_sha256_implCompress = generate_sha256_implCompress(false, \"sha256_implCompress\");\n-      StubRoutines::_sha256_implCompressMB = generate_sha256_implCompress(true, \"sha256_implCompressMB\");\n+  \/\/ Generate GHASH intrinsics code\n+  if (UseGHASHIntrinsics) {\n+    if (StubRoutines::x86::_ghash_long_swap_mask_addr == NULL) {\n+      StubRoutines::x86::_ghash_long_swap_mask_addr = generate_ghash_long_swap_mask();\n@@ -7931,20 +7852,7 @@\n-    if (UseSHA512Intrinsics) {\n-      StubRoutines::x86::_k512_W_addr = (address)StubRoutines::x86::_k512_W;\n-      StubRoutines::x86::_pshuffle_byte_flip_mask_addr_sha512 = generate_pshuffle_byte_flip_mask_sha512();\n-      StubRoutines::_sha512_implCompress = generate_sha512_implCompress(false, \"sha512_implCompress\");\n-      StubRoutines::_sha512_implCompressMB = generate_sha512_implCompress(true, \"sha512_implCompressMB\");\n-    }\n-\n-    \/\/ Generate GHASH intrinsics code\n-    if (UseGHASHIntrinsics) {\n-      if (StubRoutines::x86::_ghash_long_swap_mask_addr == NULL) {\n-        StubRoutines::x86::_ghash_long_swap_mask_addr = generate_ghash_long_swap_mask();\n-      }\n-    StubRoutines::x86::_ghash_byte_swap_mask_addr = generate_ghash_byte_swap_mask();\n-      if (VM_Version::supports_avx()) {\n-        StubRoutines::x86::_ghash_shuffmask_addr = ghash_shufflemask_addr();\n-        StubRoutines::x86::_ghash_poly_addr = ghash_polynomial_addr();\n-        StubRoutines::_ghash_processBlocks = generate_avx_ghash_processBlocks();\n-      } else {\n-        StubRoutines::_ghash_processBlocks = generate_ghash_processBlocks();\n-      }\n+  StubRoutines::x86::_ghash_byte_swap_mask_addr = generate_ghash_byte_swap_mask();\n+    if (VM_Version::supports_avx()) {\n+      StubRoutines::x86::_ghash_shuffmask_addr = ghash_shufflemask_addr();\n+      StubRoutines::x86::_ghash_poly_addr = ghash_polynomial_addr();\n+      StubRoutines::_ghash_processBlocks = generate_avx_ghash_processBlocks();\n+    } else {\n+      StubRoutines::_ghash_processBlocks = generate_ghash_processBlocks();\n@@ -7952,0 +7860,1 @@\n+  }\n@@ -7954,23 +7863,7 @@\n-    if (UseBASE64Intrinsics) {\n-      if(VM_Version::supports_avx2() &&\n-         VM_Version::supports_avx512bw() &&\n-         VM_Version::supports_avx512vl()) {\n-        StubRoutines::x86::_avx2_shuffle_base64 = base64_avx2_shuffle_addr();\n-        StubRoutines::x86::_avx2_input_mask_base64 = base64_avx2_input_mask_addr();\n-        StubRoutines::x86::_avx2_lut_base64 = base64_avx2_lut_addr();\n-      }\n-      StubRoutines::x86::_encoding_table_base64 = base64_encoding_table_addr();\n-      if (VM_Version::supports_avx512_vbmi()) {\n-        StubRoutines::x86::_shuffle_base64 = base64_shuffle_addr();\n-        StubRoutines::x86::_lookup_lo_base64 = base64_vbmi_lookup_lo_addr();\n-        StubRoutines::x86::_lookup_hi_base64 = base64_vbmi_lookup_hi_addr();\n-        StubRoutines::x86::_lookup_lo_base64url = base64_vbmi_lookup_lo_url_addr();\n-        StubRoutines::x86::_lookup_hi_base64url = base64_vbmi_lookup_hi_url_addr();\n-        StubRoutines::x86::_pack_vec_base64 = base64_vbmi_pack_vec_addr();\n-        StubRoutines::x86::_join_0_1_base64 = base64_vbmi_join_0_1_addr();\n-        StubRoutines::x86::_join_1_2_base64 = base64_vbmi_join_1_2_addr();\n-        StubRoutines::x86::_join_2_3_base64 = base64_vbmi_join_2_3_addr();\n-      }\n-      StubRoutines::x86::_decoding_table_base64 = base64_decoding_table_addr();\n-      StubRoutines::_base64_encodeBlock = generate_base64_encodeBlock();\n-      StubRoutines::_base64_decodeBlock = generate_base64_decodeBlock();\n+  if (UseBASE64Intrinsics) {\n+    if(VM_Version::supports_avx2() &&\n+       VM_Version::supports_avx512bw() &&\n+       VM_Version::supports_avx512vl()) {\n+      StubRoutines::x86::_avx2_shuffle_base64 = base64_avx2_shuffle_addr();\n+      StubRoutines::x86::_avx2_input_mask_base64 = base64_avx2_input_mask_addr();\n+      StubRoutines::x86::_avx2_lut_base64 = base64_avx2_lut_addr();\n@@ -7978,0 +7871,16 @@\n+    StubRoutines::x86::_encoding_table_base64 = base64_encoding_table_addr();\n+    if (VM_Version::supports_avx512_vbmi()) {\n+      StubRoutines::x86::_shuffle_base64 = base64_shuffle_addr();\n+      StubRoutines::x86::_lookup_lo_base64 = base64_vbmi_lookup_lo_addr();\n+      StubRoutines::x86::_lookup_hi_base64 = base64_vbmi_lookup_hi_addr();\n+      StubRoutines::x86::_lookup_lo_base64url = base64_vbmi_lookup_lo_url_addr();\n+      StubRoutines::x86::_lookup_hi_base64url = base64_vbmi_lookup_hi_url_addr();\n+      StubRoutines::x86::_pack_vec_base64 = base64_vbmi_pack_vec_addr();\n+      StubRoutines::x86::_join_0_1_base64 = base64_vbmi_join_0_1_addr();\n+      StubRoutines::x86::_join_1_2_base64 = base64_vbmi_join_1_2_addr();\n+      StubRoutines::x86::_join_2_3_base64 = base64_vbmi_join_2_3_addr();\n+    }\n+    StubRoutines::x86::_decoding_table_base64 = base64_decoding_table_addr();\n+    StubRoutines::_base64_encodeBlock = generate_base64_encodeBlock();\n+    StubRoutines::_base64_decodeBlock = generate_base64_decodeBlock();\n+  }\n@@ -7979,4 +7888,4 @@\n-    BarrierSetNMethod* bs_nm = BarrierSet::barrier_set()->barrier_set_nmethod();\n-    if (bs_nm != NULL) {\n-      StubRoutines::x86::_method_entry_barrier = generate_method_entry_barrier();\n-    }\n+  BarrierSetNMethod* bs_nm = BarrierSet::barrier_set()->barrier_set_nmethod();\n+  if (bs_nm != NULL) {\n+    StubRoutines::x86::_method_entry_barrier = generate_method_entry_barrier();\n+  }\n@@ -7984,21 +7893,21 @@\n-    if (UseMultiplyToLenIntrinsic) {\n-      StubRoutines::_multiplyToLen = generate_multiplyToLen();\n-    }\n-    if (UseSquareToLenIntrinsic) {\n-      StubRoutines::_squareToLen = generate_squareToLen();\n-    }\n-    if (UseMulAddIntrinsic) {\n-      StubRoutines::_mulAdd = generate_mulAdd();\n-    }\n-    if (VM_Version::supports_avx512_vbmi2()) {\n-      StubRoutines::_bigIntegerRightShiftWorker = generate_bigIntegerRightShift();\n-      StubRoutines::_bigIntegerLeftShiftWorker = generate_bigIntegerLeftShift();\n-    }\n-    if (UseMontgomeryMultiplyIntrinsic) {\n-      StubRoutines::_montgomeryMultiply\n-        = CAST_FROM_FN_PTR(address, SharedRuntime::montgomery_multiply);\n-    }\n-    if (UseMontgomerySquareIntrinsic) {\n-      StubRoutines::_montgomerySquare\n-        = CAST_FROM_FN_PTR(address, SharedRuntime::montgomery_square);\n-    }\n+  if (UseMultiplyToLenIntrinsic) {\n+    StubRoutines::_multiplyToLen = generate_multiplyToLen();\n+  }\n+  if (UseSquareToLenIntrinsic) {\n+    StubRoutines::_squareToLen = generate_squareToLen();\n+  }\n+  if (UseMulAddIntrinsic) {\n+    StubRoutines::_mulAdd = generate_mulAdd();\n+  }\n+  if (VM_Version::supports_avx512_vbmi2()) {\n+    StubRoutines::_bigIntegerRightShiftWorker = generate_bigIntegerRightShift();\n+    StubRoutines::_bigIntegerLeftShiftWorker = generate_bigIntegerLeftShift();\n+  }\n+  if (UseMontgomeryMultiplyIntrinsic) {\n+    StubRoutines::_montgomeryMultiply\n+      = CAST_FROM_FN_PTR(address, SharedRuntime::montgomery_multiply);\n+  }\n+  if (UseMontgomerySquareIntrinsic) {\n+    StubRoutines::_montgomerySquare\n+      = CAST_FROM_FN_PTR(address, SharedRuntime::montgomery_square);\n+  }\n@@ -8006,39 +7915,25 @@\n-    \/\/ Get svml stub routine addresses\n-    void *libjsvml = NULL;\n-    char ebuf[1024];\n-    char dll_name[JVM_MAXPATHLEN];\n-    if (os::dll_locate_lib(dll_name, sizeof(dll_name), Arguments::get_dll_dir(), \"jsvml\")) {\n-      libjsvml = os::dll_load(dll_name, ebuf, sizeof ebuf);\n-    }\n-    if (libjsvml != NULL) {\n-      \/\/ SVML method naming convention\n-      \/\/   All the methods are named as __jsvml_op<T><N>_ha_<VV>\n-      \/\/   Where:\n-      \/\/      ha stands for high accuracy\n-      \/\/      <T> is optional to indicate float\/double\n-      \/\/              Set to f for vector float operation\n-      \/\/              Omitted for vector double operation\n-      \/\/      <N> is the number of elements in the vector\n-      \/\/              1, 2, 4, 8, 16\n-      \/\/              e.g. 128 bit float vector has 4 float elements\n-      \/\/      <VV> indicates the avx\/sse level:\n-      \/\/              z0 is AVX512, l9 is AVX2, e9 is AVX1 and ex is for SSE2\n-      \/\/      e.g. __jsvml_expf16_ha_z0 is the method for computing 16 element vector float exp using AVX 512 insns\n-      \/\/           __jsvml_exp8_ha_z0 is the method for computing 8 element vector double exp using AVX 512 insns\n-\n-      log_info(library)(\"Loaded library %s, handle \" INTPTR_FORMAT, JNI_LIB_PREFIX \"jsvml\" JNI_LIB_SUFFIX, p2i(libjsvml));\n-      if (UseAVX > 2) {\n-        for (int op = 0; op < VectorSupport::NUM_SVML_OP; op++) {\n-          int vop = VectorSupport::VECTOR_OP_SVML_START + op;\n-          if ((!VM_Version::supports_avx512dq()) &&\n-              (vop == VectorSupport::VECTOR_OP_LOG || vop == VectorSupport::VECTOR_OP_LOG10 || vop == VectorSupport::VECTOR_OP_POW)) {\n-            continue;\n-          }\n-          snprintf(ebuf, sizeof(ebuf), \"__jsvml_%sf16_ha_z0\", VectorSupport::svmlname[op]);\n-          StubRoutines::_vector_f_math[VectorSupport::VEC_SIZE_512][op] = (address)os::dll_lookup(libjsvml, ebuf);\n-\n-          snprintf(ebuf, sizeof(ebuf), \"__jsvml_%s8_ha_z0\", VectorSupport::svmlname[op]);\n-          StubRoutines::_vector_d_math[VectorSupport::VEC_SIZE_512][op] = (address)os::dll_lookup(libjsvml, ebuf);\n-        }\n-      }\n-      const char* avx_sse_str = (UseAVX >= 2) ? \"l9\" : ((UseAVX == 1) ? \"e9\" : \"ex\");\n+  \/\/ Get svml stub routine addresses\n+  void *libjsvml = NULL;\n+  char ebuf[1024];\n+  char dll_name[JVM_MAXPATHLEN];\n+  if (os::dll_locate_lib(dll_name, sizeof(dll_name), Arguments::get_dll_dir(), \"jsvml\")) {\n+    libjsvml = os::dll_load(dll_name, ebuf, sizeof ebuf);\n+  }\n+  if (libjsvml != NULL) {\n+    \/\/ SVML method naming convention\n+    \/\/   All the methods are named as __jsvml_op<T><N>_ha_<VV>\n+    \/\/   Where:\n+    \/\/      ha stands for high accuracy\n+    \/\/      <T> is optional to indicate float\/double\n+    \/\/              Set to f for vector float operation\n+    \/\/              Omitted for vector double operation\n+    \/\/      <N> is the number of elements in the vector\n+    \/\/              1, 2, 4, 8, 16\n+    \/\/              e.g. 128 bit float vector has 4 float elements\n+    \/\/      <VV> indicates the avx\/sse level:\n+    \/\/              z0 is AVX512, l9 is AVX2, e9 is AVX1 and ex is for SSE2\n+    \/\/      e.g. __jsvml_expf16_ha_z0 is the method for computing 16 element vector float exp using AVX 512 insns\n+    \/\/           __jsvml_exp8_ha_z0 is the method for computing 8 element vector double exp using AVX 512 insns\n+\n+    log_info(library)(\"Loaded library %s, handle \" INTPTR_FORMAT, JNI_LIB_PREFIX \"jsvml\" JNI_LIB_SUFFIX, p2i(libjsvml));\n+    if (UseAVX > 2) {\n@@ -8047,1 +7942,2 @@\n-        if (vop == VectorSupport::VECTOR_OP_POW) {\n+        if ((!VM_Version::supports_avx512dq()) &&\n+            (vop == VectorSupport::VECTOR_OP_LOG || vop == VectorSupport::VECTOR_OP_LOG10 || vop == VectorSupport::VECTOR_OP_POW)) {\n@@ -8050,2 +7946,2 @@\n-        snprintf(ebuf, sizeof(ebuf), \"__jsvml_%sf4_ha_%s\", VectorSupport::svmlname[op], avx_sse_str);\n-        StubRoutines::_vector_f_math[VectorSupport::VEC_SIZE_64][op] = (address)os::dll_lookup(libjsvml, ebuf);\n+        snprintf(ebuf, sizeof(ebuf), \"__jsvml_%sf16_ha_z0\", VectorSupport::svmlname[op]);\n+        StubRoutines::_vector_f_math[VectorSupport::VEC_SIZE_512][op] = (address)os::dll_lookup(libjsvml, ebuf);\n@@ -8053,2 +7949,12 @@\n-        snprintf(ebuf, sizeof(ebuf), \"__jsvml_%sf4_ha_%s\", VectorSupport::svmlname[op], avx_sse_str);\n-        StubRoutines::_vector_f_math[VectorSupport::VEC_SIZE_128][op] = (address)os::dll_lookup(libjsvml, ebuf);\n+        snprintf(ebuf, sizeof(ebuf), \"__jsvml_%s8_ha_z0\", VectorSupport::svmlname[op]);\n+        StubRoutines::_vector_d_math[VectorSupport::VEC_SIZE_512][op] = (address)os::dll_lookup(libjsvml, ebuf);\n+      }\n+    }\n+    const char* avx_sse_str = (UseAVX >= 2) ? \"l9\" : ((UseAVX == 1) ? \"e9\" : \"ex\");\n+    for (int op = 0; op < VectorSupport::NUM_SVML_OP; op++) {\n+      int vop = VectorSupport::VECTOR_OP_SVML_START + op;\n+      if (vop == VectorSupport::VECTOR_OP_POW) {\n+        continue;\n+      }\n+      snprintf(ebuf, sizeof(ebuf), \"__jsvml_%sf4_ha_%s\", VectorSupport::svmlname[op], avx_sse_str);\n+      StubRoutines::_vector_f_math[VectorSupport::VEC_SIZE_64][op] = (address)os::dll_lookup(libjsvml, ebuf);\n@@ -8056,2 +7962,2 @@\n-        snprintf(ebuf, sizeof(ebuf), \"__jsvml_%sf8_ha_%s\", VectorSupport::svmlname[op], avx_sse_str);\n-        StubRoutines::_vector_f_math[VectorSupport::VEC_SIZE_256][op] = (address)os::dll_lookup(libjsvml, ebuf);\n+      snprintf(ebuf, sizeof(ebuf), \"__jsvml_%sf4_ha_%s\", VectorSupport::svmlname[op], avx_sse_str);\n+      StubRoutines::_vector_f_math[VectorSupport::VEC_SIZE_128][op] = (address)os::dll_lookup(libjsvml, ebuf);\n@@ -8059,2 +7965,2 @@\n-        snprintf(ebuf, sizeof(ebuf), \"__jsvml_%s1_ha_%s\", VectorSupport::svmlname[op], avx_sse_str);\n-        StubRoutines::_vector_d_math[VectorSupport::VEC_SIZE_64][op] = (address)os::dll_lookup(libjsvml, ebuf);\n+      snprintf(ebuf, sizeof(ebuf), \"__jsvml_%sf8_ha_%s\", VectorSupport::svmlname[op], avx_sse_str);\n+      StubRoutines::_vector_f_math[VectorSupport::VEC_SIZE_256][op] = (address)os::dll_lookup(libjsvml, ebuf);\n@@ -8062,2 +7968,2 @@\n-        snprintf(ebuf, sizeof(ebuf), \"__jsvml_%s2_ha_%s\", VectorSupport::svmlname[op], avx_sse_str);\n-        StubRoutines::_vector_d_math[VectorSupport::VEC_SIZE_128][op] = (address)os::dll_lookup(libjsvml, ebuf);\n+      snprintf(ebuf, sizeof(ebuf), \"__jsvml_%s1_ha_%s\", VectorSupport::svmlname[op], avx_sse_str);\n+      StubRoutines::_vector_d_math[VectorSupport::VEC_SIZE_64][op] = (address)os::dll_lookup(libjsvml, ebuf);\n@@ -8065,5 +7971,2 @@\n-        snprintf(ebuf, sizeof(ebuf), \"__jsvml_%s4_ha_%s\", VectorSupport::svmlname[op], avx_sse_str);\n-        StubRoutines::_vector_d_math[VectorSupport::VEC_SIZE_256][op] = (address)os::dll_lookup(libjsvml, ebuf);\n-      }\n-    }\n-#endif \/\/ COMPILER2\n+      snprintf(ebuf, sizeof(ebuf), \"__jsvml_%s2_ha_%s\", VectorSupport::svmlname[op], avx_sse_str);\n+      StubRoutines::_vector_d_math[VectorSupport::VEC_SIZE_128][op] = (address)os::dll_lookup(libjsvml, ebuf);\n@@ -8071,2 +7974,2 @@\n-    if (UseVectorizedMismatchIntrinsic) {\n-      StubRoutines::_vectorizedMismatch = generate_vectorizedMismatch();\n+      snprintf(ebuf, sizeof(ebuf), \"__jsvml_%s4_ha_%s\", VectorSupport::svmlname[op], avx_sse_str);\n+      StubRoutines::_vector_d_math[VectorSupport::VEC_SIZE_256][op] = (address)os::dll_lookup(libjsvml, ebuf);\n@@ -8075,0 +7978,1 @@\n+#endif \/\/ COMPILER2\n@@ -8076,9 +7980,2 @@\n- public:\n-  StubGenerator(CodeBuffer* code, int phase) : StubCodeGenerator(code) {\n-    if (phase == 0) {\n-      generate_initial();\n-    } else if (phase == 1) {\n-      generate_phase1(); \/\/ stubs that must be available for the interpreter\n-    } else {\n-      generate_all();\n-    }\n+  if (UseVectorizedMismatchIntrinsic) {\n+    StubRoutines::_vectorizedMismatch = generate_vectorizedMismatch();\n@@ -8086,1 +7983,1 @@\n-}; \/\/ end class declaration\n+}\n@@ -8088,1 +7985,0 @@\n-#define UCM_TABLE_MAX_ENTRIES 16\n@@ -8091,1 +7987,1 @@\n-    UnsafeCopyMemory::create_table(UCM_TABLE_MAX_ENTRIES);\n+    UnsafeCopyMemory::create_table(16);\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":7046,"deletions":7150,"binary":false,"changes":14196,"status":"modified"},{"patch":"@@ -0,0 +1,481 @@\n+\/*\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef CPU_X86_STUBGENERATOR_X86_64_HPP\n+#define CPU_X86_STUBGENERATOR_X86_64_HPP\n+\n+#include \"code\/codeBlob.hpp\"\n+#include \"runtime\/continuation.hpp\"\n+#include \"runtime\/stubCodeGenerator.hpp\"\n+\n+\/\/ Stub Code definitions\n+\n+class StubGenerator: public StubCodeGenerator {\n+ private:\n+\n+  \/\/ Call stubs are used to call Java from C.\n+  address generate_call_stub(address& return_address);\n+\n+  \/\/ Return point for a Java call if there's an exception thrown in\n+  \/\/ Java code.  The exception is caught and transformed into a\n+  \/\/ pending exception stored in JavaThread that can be tested from\n+  \/\/ within the VM.\n+  \/\/\n+  \/\/ Note: Usually the parameters are removed by the callee. In case\n+  \/\/ of an exception crossing an activation frame boundary, that is\n+  \/\/ not the case if the callee is compiled code => need to setup the\n+  \/\/ rsp.\n+  \/\/\n+  \/\/ rax: exception oop\n+\n+  address generate_catch_exception();\n+\n+  \/\/ Continuation point for runtime calls returning with a pending\n+  \/\/ exception.  The pending exception check happened in the runtime\n+  \/\/ or native call stub.  The pending exception in Thread is\n+  \/\/ converted into a Java-level exception.\n+  \/\/\n+  \/\/ Contract with Java-level exception handlers:\n+  \/\/ rax: exception\n+  \/\/ rdx: throwing pc\n+  \/\/\n+  \/\/ NOTE: At entry of this stub, exception-pc must be on stack !!\n+\n+  address generate_forward_exception();\n+\n+  \/\/ Support for intptr_t OrderAccess::fence()\n+  address generate_orderaccess_fence();\n+\n+  \/\/ Support for intptr_t get_previous_sp()\n+  \/\/\n+  \/\/ This routine is used to find the previous stack pointer for the\n+  \/\/ caller.\n+  address generate_get_previous_sp();\n+\n+  \/\/----------------------------------------------------------------------------------------------------\n+  \/\/ Support for void verify_mxcsr()\n+  \/\/\n+  \/\/ This routine is used with -Xcheck:jni to verify that native\n+  \/\/ JNI code does not return to Java code without restoring the\n+  \/\/ MXCSR register to our expected state.\n+\n+  address generate_verify_mxcsr();\n+\n+  address generate_f2i_fixup();\n+  address generate_f2l_fixup();\n+  address generate_d2i_fixup();\n+  address generate_d2l_fixup();\n+\n+  address generate_count_leading_zeros_lut(const char *stub_name);\n+  address generate_popcount_avx_lut(const char *stub_name);\n+  address generate_iota_indices(const char *stub_name);\n+  address generate_vector_reverse_bit_lut(const char *stub_name);\n+\n+  address generate_vector_reverse_byte_perm_mask_long(const char *stub_name);\n+  address generate_vector_reverse_byte_perm_mask_int(const char *stub_name);\n+  address generate_vector_reverse_byte_perm_mask_short(const char *stub_name);\n+  address generate_vector_byte_shuffle_mask(const char *stub_name);\n+\n+  address generate_fp_mask(const char *stub_name, int64_t mask);\n+\n+  address generate_vector_mask(const char *stub_name, int64_t mask);\n+\n+  address generate_vector_byte_perm_mask(const char *stub_name);\n+\n+  address generate_vector_fp_mask(const char *stub_name, int64_t mask);\n+\n+  address generate_vector_custom_i32(const char *stub_name, Assembler::AvxVectorLen len,\n+                                     int32_t val0, int32_t val1, int32_t val2, int32_t val3,\n+                                     int32_t val4 = 0, int32_t val5 = 0, int32_t val6 = 0, int32_t val7 = 0,\n+                                     int32_t val8 = 0, int32_t val9 = 0, int32_t val10 = 0, int32_t val11 = 0,\n+                                     int32_t val12 = 0, int32_t val13 = 0, int32_t val14 = 0, int32_t val15 = 0);\n+\n+  \/\/ Non-destructive plausibility checks for oops\n+  address generate_verify_oop();\n+\n+  \/\/ Verify that a register contains clean 32-bits positive value\n+  \/\/ (high 32-bits are 0) so it could be used in 64-bits shifts.\n+  void assert_clean_int(Register Rint, Register Rtmp);\n+\n+  \/\/  Generate overlap test for array copy stubs\n+  void array_overlap_test(address no_overlap_target, Label* NOLp, Address::ScaleFactor sf);\n+\n+  void array_overlap_test(address no_overlap_target, Address::ScaleFactor sf) {\n+    assert(no_overlap_target != NULL, \"must be generated\");\n+    array_overlap_test(no_overlap_target, NULL, sf);\n+  }\n+  void array_overlap_test(Label& L_no_overlap, Address::ScaleFactor sf) {\n+    array_overlap_test(NULL, &L_no_overlap, sf);\n+  }\n+\n+\n+  \/\/ Shuffle first three arg regs on Windows into Linux\/Solaris locations.\n+  void setup_arg_regs(int nargs = 3);\n+  void restore_arg_regs();\n+\n+#ifdef ASSERT\n+  bool _regs_in_thread;\n+#endif\n+\n+  \/\/ This is used in places where r10 is a scratch register, and can\n+  \/\/ be adapted if r9 is needed also.\n+  void setup_arg_regs_using_thread();\n+\n+  void restore_arg_regs_using_thread();\n+\n+  \/\/ Copy big chunks forward\n+  void copy_bytes_forward(Register end_from, Register end_to,\n+                          Register qword_count, Register to,\n+                          Label& L_copy_bytes, Label& L_copy_8_bytes);\n+\n+  \/\/ Copy big chunks backward\n+  void copy_bytes_backward(Register from, Register dest,\n+                           Register qword_count, Register to,\n+                           Label& L_copy_bytes, Label& L_copy_8_bytes);\n+\n+  void setup_argument_regs(BasicType type);\n+\n+  void restore_argument_regs(BasicType type);\n+\n+#if COMPILER2_OR_JVMCI\n+  \/\/ Following rules apply to AVX3 optimized arraycopy stubs:\n+  \/\/ - If target supports AVX3 features (BW+VL+F) then implementation uses 32 byte vectors (YMMs)\n+  \/\/   for both special cases (various small block sizes) and aligned copy loop. This is the\n+  \/\/   default configuration.\n+  \/\/ - If copy length is above AVX3Threshold, then implementation use 64 byte vectors (ZMMs)\n+  \/\/   for main copy loop (and subsequent tail) since bulk of the cycles will be consumed in it.\n+  \/\/ - If user forces MaxVectorSize=32 then above 4096 bytes its seen that REP MOVs shows a\n+  \/\/   better performance for disjoint copies. For conjoint\/backward copy vector based\n+  \/\/   copy performs better.\n+  \/\/ - If user sets AVX3Threshold=0, then special cases for small blocks sizes operate over\n+  \/\/   64 byte vector registers (ZMMs).\n+\n+  address generate_disjoint_copy_avx3_masked(address* entry, const char *name, int shift,\n+                                             bool aligned, bool is_oop, bool dest_uninitialized);\n+\n+  address generate_conjoint_copy_avx3_masked(address* entry, const char *name, int shift,\n+                                             address nooverlap_target, bool aligned, bool is_oop,\n+                                             bool dest_uninitialized);\n+\n+#endif \/\/ COMPILER2_OR_JVMCI\n+\n+  address generate_disjoint_byte_copy(bool aligned, address* entry, const char *name);\n+\n+  address generate_conjoint_byte_copy(bool aligned, address nooverlap_target,\n+                                      address* entry, const char *name);\n+\n+  address generate_disjoint_short_copy(bool aligned, address *entry, const char *name);\n+\n+  address generate_fill(BasicType t, bool aligned, const char *name);\n+\n+  address generate_conjoint_short_copy(bool aligned, address nooverlap_target,\n+                                       address *entry, const char *name);\n+  address generate_disjoint_int_oop_copy(bool aligned, bool is_oop, address* entry,\n+                                         const char *name, bool dest_uninitialized = false);\n+  address generate_conjoint_int_oop_copy(bool aligned, bool is_oop, address nooverlap_target,\n+                                         address *entry, const char *name,\n+                                         bool dest_uninitialized = false);\n+  address generate_disjoint_long_oop_copy(bool aligned, bool is_oop, address *entry,\n+                                          const char *name, bool dest_uninitialized = false);\n+  address generate_conjoint_long_oop_copy(bool aligned, bool is_oop,\n+                                          address nooverlap_target, address *entry,\n+                                          const char *name, bool dest_uninitialized = false);\n+\n+  \/\/ Helper for generating a dynamic type check.\n+  \/\/ Smashes no registers.\n+  void generate_type_check(Register sub_klass,\n+                           Register super_check_offset,\n+                           Register super_klass,\n+                           Label& L_success);\n+\n+  \/\/ Generate checkcasting array copy stub\n+  address generate_checkcast_copy(const char *name, address *entry,\n+                                  bool dest_uninitialized = false);\n+\n+  \/\/ Generate 'unsafe' array copy stub\n+  \/\/ Though just as safe as the other stubs, it takes an unscaled\n+  \/\/ size_t argument instead of an element count.\n+  \/\/\n+  \/\/ Examines the alignment of the operands and dispatches\n+  \/\/ to a long, int, short, or byte copy loop.\n+  address generate_unsafe_copy(const char *name,\n+                               address byte_copy_entry, address short_copy_entry,\n+                               address int_copy_entry, address long_copy_entry);\n+\n+  \/\/ Perform range checks on the proposed arraycopy.\n+  \/\/ Kills temp, but nothing else.\n+  \/\/ Also, clean the sign bits of src_pos and dst_pos.\n+  void arraycopy_range_checks(Register src,     \/\/ source array oop (c_rarg0)\n+                              Register src_pos, \/\/ source position (c_rarg1)\n+                              Register dst,     \/\/ destination array oo (c_rarg2)\n+                              Register dst_pos, \/\/ destination position (c_rarg3)\n+                              Register length,\n+                              Register temp,\n+                              Label& L_failed);\n+\n+  \/\/ Generate generic array copy stubs\n+  address generate_generic_copy(const char *name,\n+                                address byte_copy_entry, address short_copy_entry,\n+                                address int_copy_entry, address oop_copy_entry,\n+                                address long_copy_entry, address checkcast_copy_entry);\n+\n+  address generate_data_cache_writeback();\n+\n+  address generate_data_cache_writeback_sync();\n+\n+  void generate_arraycopy_stubs();\n+\n+  \/\/ AES intrinsic stubs\n+\n+  enum {\n+    AESBlockSize = 16\n+  };\n+\n+  address generate_key_shuffle_mask();\n+\n+  address generate_counter_shuffle_mask();\n+\n+  \/\/ Utility routine for loading a 128-bit key word in little endian format\n+  \/\/ can optionally specify that the shuffle mask is already in an xmmregister\n+  void load_key(XMMRegister xmmdst, Register key, int offset, XMMRegister xmm_shuf_mask = xnoreg);\n+\n+  \/\/ Utility routine for increase 128bit counter (iv in CTR mode)\n+  void inc_counter(Register reg, XMMRegister xmmdst, int inc_delta, Label& next_block);\n+\n+  address generate_aescrypt_encryptBlock();\n+\n+  address generate_aescrypt_decryptBlock();\n+\n+  address generate_cipherBlockChaining_encryptAESCrypt();\n+\n+  \/\/ A version of CBC\/AES Decrypt which does 4 blocks in a loop at a time\n+  \/\/ to hide instruction latency\n+  address generate_cipherBlockChaining_decryptAESCrypt_Parallel();\n+\n+  address generate_electronicCodeBook_encryptAESCrypt();\n+\n+  address generate_electronicCodeBook_decryptAESCrypt();\n+\n+  \/\/ ofs and limit are use for multi-block byte array.\n+  \/\/ int com.sun.security.provider.MD5.implCompress(byte[] b, int ofs)\n+  address generate_md5_implCompress(bool multi_block, const char *name);\n+\n+  address generate_upper_word_mask();\n+\n+  address generate_shuffle_byte_flip_mask();\n+\n+  \/\/ ofs and limit are use for multi-block byte array.\n+  \/\/ int com.sun.security.provider.DigestBase.implCompressMultiBlock(byte[] b, int ofs, int limit)\n+  address generate_sha1_implCompress(bool multi_block, const char *name);\n+\n+  address generate_pshuffle_byte_flip_mask();\n+\n+  \/\/ Mask for byte-swapping a couple of qwords in an XMM register using (v)pshufb.\n+  address generate_pshuffle_byte_flip_mask_sha512();\n+\n+  \/\/ ofs and limit are use for multi-block byte array.\n+  \/\/ int com.sun.security.provider.DigestBase.implCompressMultiBlock(byte[] b, int ofs, int limit)\n+  address generate_sha256_implCompress(bool multi_block, const char *name);\n+  address generate_sha512_implCompress(bool multi_block, const char *name);\n+\n+  address ghash_polynomial512_addr();\n+\n+  \/\/ Vector AES Galois Counter Mode implementation\n+  address generate_galoisCounterMode_AESCrypt();\n+\n+  \/\/ This mask is used for incrementing counter value(linc0, linc4, etc.)\n+  address counter_mask_addr();\n+\n+ \/\/ Vector AES Counter implementation\n+  address generate_counterMode_VectorAESCrypt();\n+\n+  \/\/ This is a version of CTR\/AES crypt which does 6 blocks in a loop at a time\n+  \/\/ to hide instruction latency\n+  address generate_counterMode_AESCrypt_Parallel();\n+\n+  void roundDec(XMMRegister xmm_reg);\n+\n+  void roundDeclast(XMMRegister xmm_reg);\n+\n+  void ev_load_key(XMMRegister xmmdst, Register key, int offset, XMMRegister xmm_shuf_mask = xnoreg);\n+\n+  address generate_cipherBlockChaining_decryptVectorAESCrypt();\n+\n+  \/\/ Polynomial x^128+x^127+x^126+x^121+1\n+  address ghash_polynomial_addr();\n+\n+  address ghash_shufflemask_addr();\n+\n+  \/\/ Ghash single and multi block operations using AVX instructions\n+  address generate_avx_ghash_processBlocks();\n+\n+  \/\/ byte swap x86 long\n+  address generate_ghash_long_swap_mask();\n+\n+  \/\/ byte swap x86 byte array\n+  address generate_ghash_byte_swap_mask();\n+\n+  \/\/ Single and multi-block ghash operations\n+  address generate_ghash_processBlocks();\n+\n+  address base64_shuffle_addr();\n+  address base64_avx2_shuffle_addr();\n+  address base64_avx2_input_mask_addr();\n+  address base64_avx2_lut_addr();\n+  address base64_encoding_table_addr();\n+\n+  \/\/ Code for generating Base64 encoding.\n+  \/\/ Intrinsic function prototype in Base64.java:\n+  \/\/ private void encodeBlock(byte[] src, int sp, int sl, byte[] dst, int dp, boolean isURL)\n+  address generate_base64_encodeBlock();\n+\n+  \/\/ base64 AVX512vbmi tables\n+  address base64_vbmi_lookup_lo_addr();\n+  address base64_vbmi_lookup_hi_addr();\n+  address base64_vbmi_lookup_lo_url_addr();\n+  address base64_vbmi_lookup_hi_url_addr();\n+  address base64_vbmi_pack_vec_addr();\n+  address base64_vbmi_join_0_1_addr();\n+  address base64_vbmi_join_1_2_addr();\n+  address base64_vbmi_join_2_3_addr();\n+  address base64_decoding_table_addr();\n+\n+  \/\/ Code for generating Base64 decoding.\n+  \/\/\n+  \/\/ Based on the article (and associated code) from https:\/\/arxiv.org\/abs\/1910.05109.\n+  \/\/\n+  \/\/ Intrinsic function prototype in Base64.java:\n+  \/\/ private void decodeBlock(byte[] src, int sp, int sl, byte[] dst, int dp, boolean isURL, isMIME);\n+  address generate_base64_decodeBlock();\n+\n+  address generate_updateBytesCRC32();\n+  address generate_updateBytesCRC32C(bool is_pclmulqdq_supported);\n+\n+  address generate_updateBytesAdler32();\n+\n+  address generate_multiplyToLen();\n+\n+  address generate_vectorizedMismatch();\n+\n+  address generate_squareToLen();\n+\n+  address generate_method_entry_barrier();\n+\n+  address generate_mulAdd();\n+\n+  address generate_bigIntegerRightShift();\n+  address generate_bigIntegerLeftShift();\n+\n+\n+  \/\/ Libm trigonometric stubs\n+\n+  address generate_libmSin();\n+  address generate_libmCos();\n+  address generate_libmTan();\n+  address generate_libmExp();\n+  address generate_libmPow();\n+  address generate_libmLog();\n+  address generate_libmLog10();\n+\n+  \/\/ Shared constants\n+  static address ZERO;\n+  static address NEG_ZERO;\n+  static address ONE;\n+  static address ONEHALF;\n+  static address SIGN_MASK;\n+  static address TWO_POW_55;\n+  static address TWO_POW_M55;\n+  static address SHIFTER;\n+  static address PI32INV;\n+  static address PI_INV_TABLE;\n+  static address Ctable;\n+  static address SC_1;\n+  static address SC_2;\n+  static address SC_3;\n+  static address SC_4;\n+  static address PI_4;\n+  static address P_1;\n+  static address P_3;\n+  static address P_2;\n+\n+  void generate_libm_stubs();\n+\n+\n+  address generate_cont_thaw(const char* label, Continuation::thaw_kind kind);\n+  address generate_cont_thaw();\n+\n+  \/\/ TODO: will probably need multiple return barriers depending on return type\n+  address generate_cont_returnBarrier();\n+  address generate_cont_returnBarrier_exception();\n+\n+#if INCLUDE_JFR\n+\n+  \/\/ For c2: c_rarg0 is junk, call to runtime to write a checkpoint.\n+  \/\/ It returns a jobject handle to the event writer.\n+  \/\/ The handle is dereferenced and the return value is the event writer oop.\n+  RuntimeStub* generate_jfr_write_checkpoint();\n+\n+#endif \/\/ INCLUDE_JFR\n+\n+  \/\/ Continuation point for throwing of implicit exceptions that are\n+  \/\/ not handled in the current activation. Fabricates an exception\n+  \/\/ oop and initiates normal exception dispatching in this\n+  \/\/ frame. Since we need to preserve callee-saved values (currently\n+  \/\/ only for C2, but done for C1 as well) we need a callee-saved oop\n+  \/\/ map and therefore have to make these stubs into RuntimeStubs\n+  \/\/ rather than BufferBlobs.  If the compiler needs all registers to\n+  \/\/ be preserved between the fault point and the exception handler\n+  \/\/ then it must assume responsibility for that in\n+  \/\/ AbstractCompiler::continuation_for_implicit_null_exception or\n+  \/\/ continuation_for_implicit_division_by_zero_exception. All other\n+  \/\/ implicit exceptions (e.g., NullPointerException or\n+  \/\/ AbstractMethodError on entry) are either at call sites or\n+  \/\/ otherwise assume that stack unwinding will be initiated, so\n+  \/\/ caller saved registers were assumed volatile in the compiler.\n+  address generate_throw_exception(const char* name,\n+                                   address runtime_entry,\n+                                   Register arg1 = noreg,\n+                                   Register arg2 = noreg);\n+\n+  void create_control_words();\n+\n+  \/\/ Initialization\n+  void generate_initial();\n+  void generate_phase1();\n+  void generate_all();\n+\n+ public:\n+  StubGenerator(CodeBuffer* code, int phase) : StubCodeGenerator(code) {\n+    DEBUG_ONLY( _regs_in_thread = false; )\n+    if (phase == 0) {\n+      generate_initial();\n+    } else if (phase == 1) {\n+      generate_phase1(); \/\/ stubs that must be available for the interpreter\n+    } else {\n+      generate_all();\n+    }\n+  }\n+};\n+\n+#endif \/\/ CPU_X86_STUBGENERATOR_X86_64_HPP\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.hpp","additions":481,"deletions":0,"binary":false,"changes":481,"status":"added"},{"patch":"@@ -0,0 +1,236 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"stubGenerator_x86_64.hpp\"\n+\n+\/\/ Constants for libm trigonometric stubs\n+\n+ATTRIBUTE_ALIGNED(8) juint _ONE[] = {\n+    0x00000000UL, 0x3ff00000UL\n+};\n+address StubGenerator::ONE = (address)_ONE;\n+\n+ATTRIBUTE_ALIGNED(16) juint _ONEHALF[] = {\n+    0x00000000UL, 0x3fe00000UL, 0x00000000UL, 0x3fe00000UL\n+};\n+address StubGenerator::ONEHALF = (address)_ONEHALF;\n+\n+ATTRIBUTE_ALIGNED(8) juint _SIGN_MASK[] = {\n+    0x00000000UL, 0x80000000UL\n+};\n+address StubGenerator::SIGN_MASK = (address)_SIGN_MASK;\n+\n+ATTRIBUTE_ALIGNED(8) juint _TWO_POW_55[] = {\n+    0x00000000UL, 0x43600000UL\n+};\n+address StubGenerator::TWO_POW_55 = (address)_TWO_POW_55;\n+\n+ATTRIBUTE_ALIGNED(8) juint _TWO_POW_M55[] = {\n+    0x00000000UL, 0x3c800000UL\n+};\n+address StubGenerator::TWO_POW_M55 = (address)_TWO_POW_M55;\n+\n+ATTRIBUTE_ALIGNED(16) juint _SHIFTER[] = {\n+    0x00000000UL, 0x43380000UL, 0x00000000UL, 0x43380000UL\n+};\n+address StubGenerator::SHIFTER = (address)_SHIFTER;\n+\n+ATTRIBUTE_ALIGNED(4) juint _ZERO[] = {\n+    0x00000000UL, 0x00000000UL\n+};\n+address StubGenerator::ZERO = (address)_ZERO;\n+\n+ATTRIBUTE_ALIGNED(16) juint _SC_1[] = {\n+    0x55555555UL, 0xbfc55555UL, 0x00000000UL, 0xbfe00000UL\n+};\n+address StubGenerator::SC_1 = (address)_SC_1;\n+\n+ATTRIBUTE_ALIGNED(16) juint _SC_2[] = {\n+    0x11111111UL, 0x3f811111UL, 0x55555555UL, 0x3fa55555UL\n+};\n+address StubGenerator::SC_2 = (address)_SC_2;\n+\n+ATTRIBUTE_ALIGNED(16) juint _SC_3[] = {\n+    0x1a01a01aUL, 0xbf2a01a0UL, 0x16c16c17UL, 0xbf56c16cUL\n+};\n+address StubGenerator::SC_3 = (address)_SC_3;\n+\n+ATTRIBUTE_ALIGNED(16) juint _SC_4[] = {\n+    0xa556c734UL, 0x3ec71de3UL, 0x1a01a01aUL, 0x3efa01a0UL\n+};\n+address StubGenerator::SC_4 = (address)_SC_4;\n+\n+ATTRIBUTE_ALIGNED(8) juint _PI_4[] = {\n+    0x40000000UL, 0x3fe921fbUL, 0x18469899UL, 0x3e64442dUL\n+};\n+address StubGenerator::PI_4 = (address)_PI_4;\n+\n+ATTRIBUTE_ALIGNED(8) juint _PI32INV[] = {\n+    0x6dc9c883UL, 0x40245f30UL\n+};\n+address StubGenerator::PI32INV = (address)_PI32INV;\n+\n+ATTRIBUTE_ALIGNED(8) juint _NEG_ZERO[] = {\n+    0x00000000UL, 0x80000000UL\n+};\n+address StubGenerator::NEG_ZERO = (address)_NEG_ZERO;\n+\n+ATTRIBUTE_ALIGNED(8) juint _P_1[] = {\n+    0x54400000UL, 0x3fb921fbUL\n+};\n+address StubGenerator::P_1 = (address)_P_1;\n+\n+ATTRIBUTE_ALIGNED(16) juint _P_2[] = {\n+    0x1a600000UL, 0x3d90b461UL, 0x1a600000UL, 0x3d90b461UL\n+};\n+address StubGenerator::P_2 = (address)_P_2;\n+\n+ATTRIBUTE_ALIGNED(8) juint _P_3[] = {\n+    0x2e037073UL, 0x3b63198aUL\n+};\n+address StubGenerator::P_3 = (address)_P_3;\n+\n+\n+ATTRIBUTE_ALIGNED(16) juint _PI_INV_TABLE[] = {\n+    0x00000000UL, 0x00000000UL, 0xa2f9836eUL, 0x4e441529UL, 0xfc2757d1UL,\n+    0xf534ddc0UL, 0xdb629599UL, 0x3c439041UL, 0xfe5163abUL, 0xdebbc561UL,\n+    0xb7246e3aUL, 0x424dd2e0UL, 0x06492eeaUL, 0x09d1921cUL, 0xfe1deb1cUL,\n+    0xb129a73eUL, 0xe88235f5UL, 0x2ebb4484UL, 0xe99c7026UL, 0xb45f7e41UL,\n+    0x3991d639UL, 0x835339f4UL, 0x9c845f8bUL, 0xbdf9283bUL, 0x1ff897ffUL,\n+    0xde05980fUL, 0xef2f118bUL, 0x5a0a6d1fUL, 0x6d367ecfUL, 0x27cb09b7UL,\n+    0x4f463f66UL, 0x9e5fea2dUL, 0x7527bac7UL, 0xebe5f17bUL, 0x3d0739f7UL,\n+    0x8a5292eaUL, 0x6bfb5fb1UL, 0x1f8d5d08UL, 0x56033046UL, 0xfc7b6babUL,\n+    0xf0cfbc21UL\n+};\n+address StubGenerator::PI_INV_TABLE = (address)_PI_INV_TABLE;\n+\n+\n+ATTRIBUTE_ALIGNED(16) juint _Ctable[] = {\n+    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x00000000UL, 0x3ff00000UL, 0x176d6d31UL, 0xbf73b92eUL,\n+    0xbc29b42cUL, 0x3fb917a6UL, 0xe0000000UL, 0xbc3e2718UL, 0x00000000UL,\n+    0x3ff00000UL, 0x011469fbUL, 0xbf93ad06UL, 0x3c69a60bUL, 0x3fc8f8b8UL,\n+    0xc0000000UL, 0xbc626d19UL, 0x00000000UL, 0x3ff00000UL, 0x939d225aUL,\n+    0xbfa60beaUL, 0x2ed59f06UL, 0x3fd29406UL, 0xa0000000UL, 0xbc75d28dUL,\n+    0x00000000UL, 0x3ff00000UL, 0x866b95cfUL, 0xbfb37ca1UL, 0xa6aea963UL,\n+    0x3fd87de2UL, 0xe0000000UL, 0xbc672cedUL, 0x00000000UL, 0x3ff00000UL,\n+    0x73fa1279UL, 0xbfbe3a68UL, 0x3806f63bUL, 0x3fde2b5dUL, 0x20000000UL,\n+    0x3c5e0d89UL, 0x00000000UL, 0x3ff00000UL, 0x5bc57974UL, 0xbfc59267UL,\n+    0x39ae68c8UL, 0x3fe1c73bUL, 0x20000000UL, 0x3c8b25ddUL, 0x00000000UL,\n+    0x3ff00000UL, 0x53aba2fdUL, 0xbfcd0dfeUL, 0x25091dd6UL, 0x3fe44cf3UL,\n+    0x20000000UL, 0x3c68076aUL, 0x00000000UL, 0x3ff00000UL, 0x99fcef32UL,\n+    0x3fca8279UL, 0x667f3bcdUL, 0x3fe6a09eUL, 0x20000000UL, 0xbc8bdd34UL,\n+    0x00000000UL, 0x3fe00000UL, 0x94247758UL, 0x3fc133ccUL, 0x6b151741UL,\n+    0x3fe8bc80UL, 0x20000000UL, 0xbc82c5e1UL, 0x00000000UL, 0x3fe00000UL,\n+    0x9ae68c87UL, 0x3fac73b3UL, 0x290ea1a3UL, 0x3fea9b66UL, 0xe0000000UL,\n+    0x3c39f630UL, 0x00000000UL, 0x3fe00000UL, 0x7f909c4eUL, 0xbf9d4a2cUL,\n+    0xf180bdb1UL, 0x3fec38b2UL, 0x80000000UL, 0xbc76e0b1UL, 0x00000000UL,\n+    0x3fe00000UL, 0x65455a75UL, 0xbfbe0875UL, 0xcf328d46UL, 0x3fed906bUL,\n+    0x20000000UL, 0x3c7457e6UL, 0x00000000UL, 0x3fe00000UL, 0x76acf82dUL,\n+    0x3fa4a031UL, 0x56c62ddaUL, 0x3fee9f41UL, 0xe0000000UL, 0x3c8760b1UL,\n+    0x00000000UL, 0x3fd00000UL, 0x0e5967d5UL, 0xbfac1d1fUL, 0xcff75cb0UL,\n+    0x3fef6297UL, 0x20000000UL, 0x3c756217UL, 0x00000000UL, 0x3fd00000UL,\n+    0x0f592f50UL, 0xbf9ba165UL, 0xa3d12526UL, 0x3fefd88dUL, 0x40000000UL,\n+    0xbc887df6UL, 0x00000000UL, 0x3fc00000UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x0f592f50UL, 0x3f9ba165UL, 0xa3d12526UL, 0x3fefd88dUL,\n+    0x40000000UL, 0xbc887df6UL, 0x00000000UL, 0xbfc00000UL, 0x0e5967d5UL,\n+    0x3fac1d1fUL, 0xcff75cb0UL, 0x3fef6297UL, 0x20000000UL, 0x3c756217UL,\n+    0x00000000UL, 0xbfd00000UL, 0x76acf82dUL, 0xbfa4a031UL, 0x56c62ddaUL,\n+    0x3fee9f41UL, 0xe0000000UL, 0x3c8760b1UL, 0x00000000UL, 0xbfd00000UL,\n+    0x65455a75UL, 0x3fbe0875UL, 0xcf328d46UL, 0x3fed906bUL, 0x20000000UL,\n+    0x3c7457e6UL, 0x00000000UL, 0xbfe00000UL, 0x7f909c4eUL, 0x3f9d4a2cUL,\n+    0xf180bdb1UL, 0x3fec38b2UL, 0x80000000UL, 0xbc76e0b1UL, 0x00000000UL,\n+    0xbfe00000UL, 0x9ae68c87UL, 0xbfac73b3UL, 0x290ea1a3UL, 0x3fea9b66UL,\n+    0xe0000000UL, 0x3c39f630UL, 0x00000000UL, 0xbfe00000UL, 0x94247758UL,\n+    0xbfc133ccUL, 0x6b151741UL, 0x3fe8bc80UL, 0x20000000UL, 0xbc82c5e1UL,\n+    0x00000000UL, 0xbfe00000UL, 0x99fcef32UL, 0xbfca8279UL, 0x667f3bcdUL,\n+    0x3fe6a09eUL, 0x20000000UL, 0xbc8bdd34UL, 0x00000000UL, 0xbfe00000UL,\n+    0x53aba2fdUL, 0x3fcd0dfeUL, 0x25091dd6UL, 0x3fe44cf3UL, 0x20000000UL,\n+    0x3c68076aUL, 0x00000000UL, 0xbff00000UL, 0x5bc57974UL, 0x3fc59267UL,\n+    0x39ae68c8UL, 0x3fe1c73bUL, 0x20000000UL, 0x3c8b25ddUL, 0x00000000UL,\n+    0xbff00000UL, 0x73fa1279UL, 0x3fbe3a68UL, 0x3806f63bUL, 0x3fde2b5dUL,\n+    0x20000000UL, 0x3c5e0d89UL, 0x00000000UL, 0xbff00000UL, 0x866b95cfUL,\n+    0x3fb37ca1UL, 0xa6aea963UL, 0x3fd87de2UL, 0xe0000000UL, 0xbc672cedUL,\n+    0x00000000UL, 0xbff00000UL, 0x939d225aUL, 0x3fa60beaUL, 0x2ed59f06UL,\n+    0x3fd29406UL, 0xa0000000UL, 0xbc75d28dUL, 0x00000000UL, 0xbff00000UL,\n+    0x011469fbUL, 0x3f93ad06UL, 0x3c69a60bUL, 0x3fc8f8b8UL, 0xc0000000UL,\n+    0xbc626d19UL, 0x00000000UL, 0xbff00000UL, 0x176d6d31UL, 0x3f73b92eUL,\n+    0xbc29b42cUL, 0x3fb917a6UL, 0xe0000000UL, 0xbc3e2718UL, 0x00000000UL,\n+    0xbff00000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x00000000UL, 0x00000000UL, 0xbff00000UL, 0x176d6d31UL,\n+    0x3f73b92eUL, 0xbc29b42cUL, 0xbfb917a6UL, 0xe0000000UL, 0x3c3e2718UL,\n+    0x00000000UL, 0xbff00000UL, 0x011469fbUL, 0x3f93ad06UL, 0x3c69a60bUL,\n+    0xbfc8f8b8UL, 0xc0000000UL, 0x3c626d19UL, 0x00000000UL, 0xbff00000UL,\n+    0x939d225aUL, 0x3fa60beaUL, 0x2ed59f06UL, 0xbfd29406UL, 0xa0000000UL,\n+    0x3c75d28dUL, 0x00000000UL, 0xbff00000UL, 0x866b95cfUL, 0x3fb37ca1UL,\n+    0xa6aea963UL, 0xbfd87de2UL, 0xe0000000UL, 0x3c672cedUL, 0x00000000UL,\n+    0xbff00000UL, 0x73fa1279UL, 0x3fbe3a68UL, 0x3806f63bUL, 0xbfde2b5dUL,\n+    0x20000000UL, 0xbc5e0d89UL, 0x00000000UL, 0xbff00000UL, 0x5bc57974UL,\n+    0x3fc59267UL, 0x39ae68c8UL, 0xbfe1c73bUL, 0x20000000UL, 0xbc8b25ddUL,\n+    0x00000000UL, 0xbff00000UL, 0x53aba2fdUL, 0x3fcd0dfeUL, 0x25091dd6UL,\n+    0xbfe44cf3UL, 0x20000000UL, 0xbc68076aUL, 0x00000000UL, 0xbff00000UL,\n+    0x99fcef32UL, 0xbfca8279UL, 0x667f3bcdUL, 0xbfe6a09eUL, 0x20000000UL,\n+    0x3c8bdd34UL, 0x00000000UL, 0xbfe00000UL, 0x94247758UL, 0xbfc133ccUL,\n+    0x6b151741UL, 0xbfe8bc80UL, 0x20000000UL, 0x3c82c5e1UL, 0x00000000UL,\n+    0xbfe00000UL, 0x9ae68c87UL, 0xbfac73b3UL, 0x290ea1a3UL, 0xbfea9b66UL,\n+    0xe0000000UL, 0xbc39f630UL, 0x00000000UL, 0xbfe00000UL, 0x7f909c4eUL,\n+    0x3f9d4a2cUL, 0xf180bdb1UL, 0xbfec38b2UL, 0x80000000UL, 0x3c76e0b1UL,\n+    0x00000000UL, 0xbfe00000UL, 0x65455a75UL, 0x3fbe0875UL, 0xcf328d46UL,\n+    0xbfed906bUL, 0x20000000UL, 0xbc7457e6UL, 0x00000000UL, 0xbfe00000UL,\n+    0x76acf82dUL, 0xbfa4a031UL, 0x56c62ddaUL, 0xbfee9f41UL, 0xe0000000UL,\n+    0xbc8760b1UL, 0x00000000UL, 0xbfd00000UL, 0x0e5967d5UL, 0x3fac1d1fUL,\n+    0xcff75cb0UL, 0xbfef6297UL, 0x20000000UL, 0xbc756217UL, 0x00000000UL,\n+    0xbfd00000UL, 0x0f592f50UL, 0x3f9ba165UL, 0xa3d12526UL, 0xbfefd88dUL,\n+    0x40000000UL, 0x3c887df6UL, 0x00000000UL, 0xbfc00000UL, 0x00000000UL,\n+    0x00000000UL, 0x00000000UL, 0xbff00000UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x00000000UL, 0x0f592f50UL, 0xbf9ba165UL, 0xa3d12526UL,\n+    0xbfefd88dUL, 0x40000000UL, 0x3c887df6UL, 0x00000000UL, 0x3fc00000UL,\n+    0x0e5967d5UL, 0xbfac1d1fUL, 0xcff75cb0UL, 0xbfef6297UL, 0x20000000UL,\n+    0xbc756217UL, 0x00000000UL, 0x3fd00000UL, 0x76acf82dUL, 0x3fa4a031UL,\n+    0x56c62ddaUL, 0xbfee9f41UL, 0xe0000000UL, 0xbc8760b1UL, 0x00000000UL,\n+    0x3fd00000UL, 0x65455a75UL, 0xbfbe0875UL, 0xcf328d46UL, 0xbfed906bUL,\n+    0x20000000UL, 0xbc7457e6UL, 0x00000000UL, 0x3fe00000UL, 0x7f909c4eUL,\n+    0xbf9d4a2cUL, 0xf180bdb1UL, 0xbfec38b2UL, 0x80000000UL, 0x3c76e0b1UL,\n+    0x00000000UL, 0x3fe00000UL, 0x9ae68c87UL, 0x3fac73b3UL, 0x290ea1a3UL,\n+    0xbfea9b66UL, 0xe0000000UL, 0xbc39f630UL, 0x00000000UL, 0x3fe00000UL,\n+    0x94247758UL, 0x3fc133ccUL, 0x6b151741UL, 0xbfe8bc80UL, 0x20000000UL,\n+    0x3c82c5e1UL, 0x00000000UL, 0x3fe00000UL, 0x99fcef32UL, 0x3fca8279UL,\n+    0x667f3bcdUL, 0xbfe6a09eUL, 0x20000000UL, 0x3c8bdd34UL, 0x00000000UL,\n+    0x3fe00000UL, 0x53aba2fdUL, 0xbfcd0dfeUL, 0x25091dd6UL, 0xbfe44cf3UL,\n+    0x20000000UL, 0xbc68076aUL, 0x00000000UL, 0x3ff00000UL, 0x5bc57974UL,\n+    0xbfc59267UL, 0x39ae68c8UL, 0xbfe1c73bUL, 0x20000000UL, 0xbc8b25ddUL,\n+    0x00000000UL, 0x3ff00000UL, 0x73fa1279UL, 0xbfbe3a68UL, 0x3806f63bUL,\n+    0xbfde2b5dUL, 0x20000000UL, 0xbc5e0d89UL, 0x00000000UL, 0x3ff00000UL,\n+    0x866b95cfUL, 0xbfb37ca1UL, 0xa6aea963UL, 0xbfd87de2UL, 0xe0000000UL,\n+    0x3c672cedUL, 0x00000000UL, 0x3ff00000UL, 0x939d225aUL, 0xbfa60beaUL,\n+    0x2ed59f06UL, 0xbfd29406UL, 0xa0000000UL, 0x3c75d28dUL, 0x00000000UL,\n+    0x3ff00000UL, 0x011469fbUL, 0xbf93ad06UL, 0x3c69a60bUL, 0xbfc8f8b8UL,\n+    0xc0000000UL, 0x3c626d19UL, 0x00000000UL, 0x3ff00000UL, 0x176d6d31UL,\n+    0xbf73b92eUL, 0xbc29b42cUL, 0xbfb917a6UL, 0xe0000000UL, 0x3c3e2718UL,\n+    0x00000000UL, 0x3ff00000UL\n+};\n+address StubGenerator::Ctable = (address)_Ctable;\n+\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_constants.cpp","additions":236,"deletions":0,"binary":false,"changes":236,"status":"added"},{"patch":"@@ -0,0 +1,625 @@\n+\/*\n+ *  Copyright (c) 2016, 2021, Intel Corporation. All rights reserved.\n+ * Intel Math Library (LIBM) Source Code\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"macroAssembler_x86.hpp\"\n+#include \"stubGenerator_x86_64.hpp\"\n+\n+\/******************************************************************************\/\n+\/\/                     ALGORITHM DESCRIPTION - COS()\n+\/\/                     ---------------------\n+\/\/\n+\/\/     1. RANGE REDUCTION\n+\/\/\n+\/\/     We perform an initial range reduction from X to r with\n+\/\/\n+\/\/          X =~= N * pi\/32 + r\n+\/\/\n+\/\/     so that |r| <= pi\/64 + epsilon. We restrict inputs to those\n+\/\/     where |N| <= 932560. Beyond this, the range reduction is\n+\/\/     insufficiently accurate. For extremely small inputs,\n+\/\/     denormalization can occur internally, impacting performance.\n+\/\/     This means that the main path is actually only taken for\n+\/\/     2^-252 <= |X| < 90112.\n+\/\/\n+\/\/     To avoid branches, we perform the range reduction to full\n+\/\/     accuracy each time.\n+\/\/\n+\/\/          X - N * (P_1 + P_2 + P_3)\n+\/\/\n+\/\/     where P_1 and P_2 are 32-bit numbers (so multiplication by N\n+\/\/     is exact) and P_3 is a 53-bit number. Together, these\n+\/\/     approximate pi well enough for all cases in the restricted\n+\/\/     range.\n+\/\/\n+\/\/     The main reduction sequence is:\n+\/\/\n+\/\/             y = 32\/pi * x\n+\/\/             N = integer(y)\n+\/\/     (computed by adding and subtracting off SHIFTER)\n+\/\/\n+\/\/             m_1 = N * P_1\n+\/\/             m_2 = N * P_2\n+\/\/             r_1 = x - m_1\n+\/\/             r = r_1 - m_2\n+\/\/     (this r can be used for most of the calculation)\n+\/\/\n+\/\/             c_1 = r_1 - r\n+\/\/             m_3 = N * P_3\n+\/\/             c_2 = c_1 - m_2\n+\/\/             c = c_2 - m_3\n+\/\/\n+\/\/     2. MAIN ALGORITHM\n+\/\/\n+\/\/     The algorithm uses a table lookup based on B = M * pi \/ 32\n+\/\/     where M = N mod 64. The stored values are:\n+\/\/       sigma             closest power of 2 to cos(B)\n+\/\/       C_hl              53-bit cos(B) - sigma\n+\/\/       S_hi + S_lo       2 * 53-bit sin(B)\n+\/\/\n+\/\/     The computation is organized as follows:\n+\/\/\n+\/\/          sin(B + r + c) = [sin(B) + sigma * r] +\n+\/\/                           r * (cos(B) - sigma) +\n+\/\/                           sin(B) * [cos(r + c) - 1] +\n+\/\/                           cos(B) * [sin(r + c) - r]\n+\/\/\n+\/\/     which is approximately:\n+\/\/\n+\/\/          [S_hi + sigma * r] +\n+\/\/          C_hl * r +\n+\/\/          S_lo + S_hi * [(cos(r) - 1) - r * c] +\n+\/\/          (C_hl + sigma) * [(sin(r) - r) + c]\n+\/\/\n+\/\/     and this is what is actually computed. We separate this sum\n+\/\/     into four parts:\n+\/\/\n+\/\/          hi + med + pols + corr\n+\/\/\n+\/\/     where\n+\/\/\n+\/\/          hi       = S_hi + sigma r\n+\/\/          med      = C_hl * r\n+\/\/          pols     = S_hi * (cos(r) - 1) + (C_hl + sigma) * (sin(r) - r)\n+\/\/          corr     = S_lo + c * ((C_hl + sigma) - S_hi * r)\n+\/\/\n+\/\/     3. POLYNOMIAL\n+\/\/\n+\/\/     The polynomial S_hi * (cos(r) - 1) + (C_hl + sigma) *\n+\/\/     (sin(r) - r) can be rearranged freely, since it is quite\n+\/\/     small, so we exploit parallelism to the fullest.\n+\/\/\n+\/\/          psc4       =   SC_4 * r_1\n+\/\/          msc4       =   psc4 * r\n+\/\/          r2         =   r * r\n+\/\/          msc2       =   SC_2 * r2\n+\/\/          r4         =   r2 * r2\n+\/\/          psc3       =   SC_3 + msc4\n+\/\/          psc1       =   SC_1 + msc2\n+\/\/          msc3       =   r4 * psc3\n+\/\/          sincospols =   psc1 + msc3\n+\/\/          pols       =   sincospols *\n+\/\/                         <S_hi * r^2 | (C_hl + sigma) * r^3>\n+\/\/\n+\/\/     4. CORRECTION TERM\n+\/\/\n+\/\/     This is where the \"c\" component of the range reduction is\n+\/\/     taken into account; recall that just \"r\" is used for most of\n+\/\/     the calculation.\n+\/\/\n+\/\/          -c   = m_3 - c_2\n+\/\/          -d   = S_hi * r - (C_hl + sigma)\n+\/\/          corr = -c * -d + S_lo\n+\/\/\n+\/\/     5. COMPENSATED SUMMATIONS\n+\/\/\n+\/\/     The two successive compensated summations add up the high\n+\/\/     and medium parts, leaving just the low parts to add up at\n+\/\/     the end.\n+\/\/\n+\/\/          rs        =  sigma * r\n+\/\/          res_int   =  S_hi + rs\n+\/\/          k_0       =  S_hi - res_int\n+\/\/          k_2       =  k_0 + rs\n+\/\/          med       =  C_hl * r\n+\/\/          res_hi    =  res_int + med\n+\/\/          k_1       =  res_int - res_hi\n+\/\/          k_3       =  k_1 + med\n+\/\/\n+\/\/     6. FINAL SUMMATION\n+\/\/\n+\/\/     We now add up all the small parts:\n+\/\/\n+\/\/          res_lo = pols(hi) + pols(lo) + corr + k_1 + k_3\n+\/\/\n+\/\/     Now the overall result is just:\n+\/\/\n+\/\/          res_hi + res_lo\n+\/\/\n+\/\/     7. SMALL ARGUMENTS\n+\/\/\n+\/\/     Inputs with |X| < 2^-252 are treated specially as\n+\/\/     1 - |x|.\n+\/\/\n+\/\/ Special cases:\n+\/\/  cos(NaN) = quiet NaN, and raise invalid exception\n+\/\/  cos(INF) = NaN and raise invalid exception\n+\/\/  cos(0) = 1\n+\/\/\n+\/******************************************************************************\/\n+\n+#define __ _masm->\n+\n+address StubGenerator::generate_libmCos() {\n+  StubCodeMark mark(this, \"StubRoutines\", \"libmCos\");\n+  address start = __ pc();\n+\n+  Label L_2TAG_PACKET_0_0_1, L_2TAG_PACKET_1_0_1, L_2TAG_PACKET_2_0_1, L_2TAG_PACKET_3_0_1;\n+  Label L_2TAG_PACKET_4_0_1, L_2TAG_PACKET_5_0_1, L_2TAG_PACKET_6_0_1, L_2TAG_PACKET_7_0_1;\n+  Label L_2TAG_PACKET_8_0_1, L_2TAG_PACKET_9_0_1, L_2TAG_PACKET_10_0_1, L_2TAG_PACKET_11_0_1;\n+  Label L_2TAG_PACKET_12_0_1, L_2TAG_PACKET_13_0_1, B1_2, B1_4;\n+\n+  __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+\n+#ifdef _WIN64\n+  __ push(rsi);\n+  __ push(rdi);\n+#endif\n+\n+  __ push(rbx);\n+  __ subq(rsp, 16);\n+  __ movsd(Address(rsp, 8), xmm0);\n+\n+  __ bind(B1_2);\n+  __ movl(rax, Address(rsp, 12));\n+  __ movq(xmm1, ExternalAddress(PI32INV), rbx \/*rscratch*\/);    \/\/0x6dc9c883UL, 0x40245f30UL\n+  __ andl(rax, 2147418112);\n+  __ subl(rax, 808452096);\n+  __ cmpl(rax, 281346048);\n+  __ jcc(Assembler::above, L_2TAG_PACKET_0_0_1);\n+  __ mulsd(xmm1, xmm0);\n+  __ movdqu(xmm5, ExternalAddress(ONEHALF), rbx \/*rscratch*\/);    \/\/0x00000000UL, 0x3fe00000UL, 0x00000000UL, 0x3fe00000UL\n+  __ movq(xmm4, ExternalAddress(SIGN_MASK), rbx \/*rscratch*\/);    \/\/0x00000000UL, 0x80000000UL\n+  __ pand(xmm4, xmm0);\n+  __ por(xmm5, xmm4);\n+  __ addpd(xmm1, xmm5);\n+  __ cvttsd2sil(rdx, xmm1);\n+  __ cvtsi2sdl(xmm1, rdx);\n+  __ movdqu(xmm2, ExternalAddress(P_2), rbx \/*rscratch*\/);    \/\/0x1a600000UL, 0x3d90b461UL, 0x1a600000UL, 0x3d90b461UL\n+  __ movq(xmm3, ExternalAddress(P_1), rbx \/*rscratch*\/);    \/\/0x54400000UL, 0x3fb921fbUL\n+  __ mulsd(xmm3, xmm1);\n+  __ unpcklpd(xmm1, xmm1);\n+  __ addq(rdx, 1865232);\n+  __ movdqu(xmm4, xmm0);\n+  __ andq(rdx, 63);\n+  __ movdqu(xmm5, ExternalAddress(SC_4), rbx \/*rscratch*\/);    \/\/0xa556c734UL, 0x3ec71de3UL, 0x1a01a01aUL, 0x3efa01a0UL\n+  __ lea(rax, ExternalAddress(Ctable));\n+  __ shlq(rdx, 5);\n+  __ addq(rax, rdx);\n+  __ mulpd(xmm2, xmm1);\n+  __ subsd(xmm0, xmm3);\n+  __ mulsd(xmm1, ExternalAddress(P_3), rbx \/*rscratch*\/);    \/\/0x2e037073UL, 0x3b63198aUL\n+  __ subsd(xmm4, xmm3);\n+  __ movq(xmm7, Address(rax, 8));\n+  __ unpcklpd(xmm0, xmm0);\n+  __ movdqu(xmm3, xmm4);\n+  __ subsd(xmm4, xmm2);\n+  __ mulpd(xmm5, xmm0);\n+  __ subpd(xmm0, xmm2);\n+  __ movdqu(xmm6, ExternalAddress(SC_2), rbx \/*rscratch*\/);    \/\/0x11111111UL, 0x3f811111UL, 0x55555555UL, 0x3fa55555UL\n+  __ mulsd(xmm7, xmm4);\n+  __ subsd(xmm3, xmm4);\n+  __ mulpd(xmm5, xmm0);\n+  __ mulpd(xmm0, xmm0);\n+  __ subsd(xmm3, xmm2);\n+  __ movdqu(xmm2, Address(rax, 0));\n+  __ subsd(xmm1, xmm3);\n+  __ movq(xmm3, Address(rax, 24));\n+  __ addsd(xmm2, xmm3);\n+  __ subsd(xmm7, xmm2);\n+  __ mulsd(xmm2, xmm4);\n+  __ mulpd(xmm6, xmm0);\n+  __ mulsd(xmm3, xmm4);\n+  __ mulpd(xmm2, xmm0);\n+  __ mulpd(xmm0, xmm0);\n+  __ addpd(xmm5, ExternalAddress(SC_3), rbx \/*rscratch*\/);    \/\/0x1a01a01aUL, 0xbf2a01a0UL, 0x16c16c17UL, 0xbf56c16cUL\n+  __ mulsd(xmm4, Address(rax, 0));\n+  __ addpd(xmm6, ExternalAddress(SC_1), rbx \/*rscratch*\/);    \/\/0x55555555UL, 0xbfc55555UL, 0x00000000UL, 0xbfe00000UL\n+  __ mulpd(xmm5, xmm0);\n+  __ movdqu(xmm0, xmm3);\n+  __ addsd(xmm3, Address(rax, 8));\n+  __ mulpd(xmm1, xmm7);\n+  __ movdqu(xmm7, xmm4);\n+  __ addsd(xmm4, xmm3);\n+  __ addpd(xmm6, xmm5);\n+  __ movq(xmm5, Address(rax, 8));\n+  __ subsd(xmm5, xmm3);\n+  __ subsd(xmm3, xmm4);\n+  __ addsd(xmm1, Address(rax, 16));\n+  __ mulpd(xmm6, xmm2);\n+  __ addsd(xmm0, xmm5);\n+  __ addsd(xmm3, xmm7);\n+  __ addsd(xmm0, xmm1);\n+  __ addsd(xmm0, xmm3);\n+  __ addsd(xmm0, xmm6);\n+  __ unpckhpd(xmm6, xmm6);\n+  __ addsd(xmm0, xmm6);\n+  __ addsd(xmm0, xmm4);\n+  __ jmp(B1_4);\n+\n+  __ bind(L_2TAG_PACKET_0_0_1);\n+  __ jcc(Assembler::greater, L_2TAG_PACKET_1_0_1);\n+  __ pextrw(rax, xmm0, 3);\n+  __ andl(rax, 32767);\n+  __ pinsrw(xmm0, rax, 3);\n+  __ movq(xmm1, ExternalAddress(ONE), rbx \/*rscratch*\/); \/\/ 0x00000000UL, 0x3ff00000UL\n+  __ subsd(xmm1, xmm0);\n+  __ movdqu(xmm0, xmm1);\n+  __ jmp(B1_4);\n+\n+  __ bind(L_2TAG_PACKET_1_0_1);\n+  __ pextrw(rax, xmm0, 3);\n+  __ andl(rax, 32752);\n+  __ cmpl(rax, 32752);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_2_0_1);\n+  __ pextrw(rcx, xmm0, 3);\n+  __ andl(rcx, 32752);\n+  __ subl(rcx, 16224);\n+  __ shrl(rcx, 7);\n+  __ andl(rcx, 65532);\n+  __ lea(r11, ExternalAddress(PI_INV_TABLE));\n+  __ addq(rcx, r11);\n+  __ movdq(rax, xmm0);\n+  __ movl(r10, Address(rcx, 20));\n+  __ movl(r8, Address(rcx, 24));\n+  __ movl(rdx, rax);\n+  __ shrq(rax, 21);\n+  __ orl(rax, INT_MIN);\n+  __ shrl(rax, 11);\n+  __ movl(r9, r10);\n+  __ imulq(r10, rdx);\n+  __ imulq(r9, rax);\n+  __ imulq(r8, rax);\n+  __ movl(rsi, Address(rcx, 16));\n+  __ movl(rdi, Address(rcx, 12));\n+  __ movl(r11, r10);\n+  __ shrq(r10, 32);\n+  __ addq(r9, r10);\n+  __ addq(r11, r8);\n+  __ movl(r8, r11);\n+  __ shrq(r11, 32);\n+  __ addq(r9, r11);\n+  __ movl(r10, rsi);\n+  __ imulq(rsi, rdx);\n+  __ imulq(r10, rax);\n+  __ movl(r11, rdi);\n+  __ imulq(rdi, rdx);\n+  __ movl(rbx, rsi);\n+  __ shrq(rsi, 32);\n+  __ addq(r9, rbx);\n+  __ movl(rbx, r9);\n+  __ shrq(r9, 32);\n+  __ addq(r10, rsi);\n+  __ addq(r10, r9);\n+  __ shlq(rbx, 32);\n+  __ orq(r8, rbx);\n+  __ imulq(r11, rax);\n+  __ movl(r9, Address(rcx, 8));\n+  __ movl(rsi, Address(rcx, 4));\n+  __ movl(rbx, rdi);\n+  __ shrq(rdi, 32);\n+  __ addq(r10, rbx);\n+  __ movl(rbx, r10);\n+  __ shrq(r10, 32);\n+  __ addq(r11, rdi);\n+  __ addq(r11, r10);\n+  __ movq(rdi, r9);\n+  __ imulq(r9, rdx);\n+  __ imulq(rdi, rax);\n+  __ movl(r10, r9);\n+  __ shrq(r9, 32);\n+  __ addq(r11, r10);\n+  __ movl(r10, r11);\n+  __ shrq(r11, 32);\n+  __ addq(rdi, r9);\n+  __ addq(rdi, r11);\n+  __ movq(r9, rsi);\n+  __ imulq(rsi, rdx);\n+  __ imulq(r9, rax);\n+  __ shlq(r10, 32);\n+  __ orq(r10, rbx);\n+  __ movl(rax, Address(rcx, 0));\n+  __ movl(r11, rsi);\n+  __ shrq(rsi, 32);\n+  __ addq(rdi, r11);\n+  __ movl(r11, rdi);\n+  __ shrq(rdi, 32);\n+  __ addq(r9, rsi);\n+  __ addq(r9, rdi);\n+  __ imulq(rdx, rax);\n+  __ pextrw(rbx, xmm0, 3);\n+  __ lea(rdi, ExternalAddress(PI_INV_TABLE));\n+  __ subq(rcx, rdi);\n+  __ addl(rcx, rcx);\n+  __ addl(rcx, rcx);\n+  __ addl(rcx, rcx);\n+  __ addl(rcx, 19);\n+  __ movl(rsi, 32768);\n+  __ andl(rsi, rbx);\n+  __ shrl(rbx, 4);\n+  __ andl(rbx, 2047);\n+  __ subl(rbx, 1023);\n+  __ subl(rcx, rbx);\n+  __ addq(r9, rdx);\n+  __ movl(rdx, rcx);\n+  __ addl(rdx, 32);\n+  __ cmpl(rcx, 1);\n+  __ jcc(Assembler::less, L_2TAG_PACKET_3_0_1);\n+  __ negl(rcx);\n+  __ addl(rcx, 29);\n+  __ shll(r9);\n+  __ movl(rdi, r9);\n+  __ andl(r9, 536870911);\n+  __ testl(r9, 268435456);\n+  __ jcc(Assembler::notEqual, L_2TAG_PACKET_4_0_1);\n+  __ shrl(r9);\n+  __ movl(rbx, 0);\n+  __ shlq(r9, 32);\n+  __ orq(r9, r11);\n+\n+  __ bind(L_2TAG_PACKET_5_0_1);\n+\n+  __ bind(L_2TAG_PACKET_6_0_1);\n+  __ cmpq(r9, 0);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_7_0_1);\n+\n+  __ bind(L_2TAG_PACKET_8_0_1);\n+  __ bsrq(r11, r9);\n+  __ movl(rcx, 29);\n+  __ subl(rcx, r11);\n+  __ jcc(Assembler::lessEqual, L_2TAG_PACKET_9_0_1);\n+  __ shlq(r9);\n+  __ movq(rax, r10);\n+  __ shlq(r10);\n+  __ addl(rdx, rcx);\n+  __ negl(rcx);\n+  __ addl(rcx, 64);\n+  __ shrq(rax);\n+  __ shrq(r8);\n+  __ orq(r9, rax);\n+  __ orq(r10, r8);\n+\n+  __ bind(L_2TAG_PACKET_10_0_1);\n+  __ cvtsi2sdq(xmm0, r9);\n+  __ shrq(r10, 1);\n+  __ cvtsi2sdq(xmm3, r10);\n+  __ xorpd(xmm4, xmm4);\n+  __ shll(rdx, 4);\n+  __ negl(rdx);\n+  __ addl(rdx, 16368);\n+  __ orl(rdx, rsi);\n+  __ xorl(rdx, rbx);\n+  __ pinsrw(xmm4, rdx, 3);\n+  __ movq(xmm2, ExternalAddress(PI_4),     rbx \/*rscratch*\/); \/\/0x40000000UL, 0x3fe921fbUL, 0x18469899UL, 0x3e64442dUL\n+  __ movq(xmm6, ExternalAddress(PI_4 + 8), rbx \/*rscratch*\/); \/\/0x3fe921fbUL, 0x18469899UL, 0x3e64442dUL\n+  __ xorpd(xmm5, xmm5);\n+  __ subl(rdx, 1008);\n+  __ pinsrw(xmm5, rdx, 3);\n+  __ mulsd(xmm0, xmm4);\n+  __ shll(rsi, 16);\n+  __ sarl(rsi, 31);\n+  __ mulsd(xmm3, xmm5);\n+  __ movdqu(xmm1, xmm0);\n+  __ mulsd(xmm0, xmm2);\n+  __ shrl(rdi, 29);\n+  __ addsd(xmm1, xmm3);\n+  __ mulsd(xmm3, xmm2);\n+  __ addl(rdi, rsi);\n+  __ xorl(rdi, rsi);\n+  __ mulsd(xmm6, xmm1);\n+  __ movl(rax, rdi);\n+  __ addsd(xmm6, xmm3);\n+  __ movdqu(xmm2, xmm0);\n+  __ addsd(xmm0, xmm6);\n+  __ subsd(xmm2, xmm0);\n+  __ addsd(xmm6, xmm2);\n+\n+  __ bind(L_2TAG_PACKET_11_0_1);\n+  __ movq(xmm1, ExternalAddress(PI32INV), rbx \/*rscratch*\/);   \/\/0x6dc9c883UL, 0x40245f30UL\n+  __ mulsd(xmm1, xmm0);\n+  __ movq(xmm5, ExternalAddress(ONEHALF), rbx \/*rscratch*\/);   \/\/0x00000000UL, 0x3fe00000UL, 0x00000000UL, 0x3fe00000UL\n+  __ movq(xmm4, ExternalAddress(SIGN_MASK), rbx \/*rscratch*\/); \/\/0x00000000UL, 0x80000000UL\n+  __ pand(xmm4, xmm0);\n+  __ por(xmm5, xmm4);\n+  __ addpd(xmm1, xmm5);\n+  __ cvttsd2siq(rdx, xmm1);\n+  __ cvtsi2sdq(xmm1, rdx);\n+  __ movq(xmm3, ExternalAddress(P_1), rbx \/*rscratch*\/);    \/\/0x54400000UL, 0x3fb921fbUL\n+  __ movdqu(xmm2, ExternalAddress(P_2), rbx \/*rscratch*\/);    \/\/0x1a600000UL, 0x3d90b461UL, 0x1a600000UL, 0x3d90b461UL\n+  __ mulsd(xmm3, xmm1);\n+  __ unpcklpd(xmm1, xmm1);\n+  __ shll(rax, 3);\n+  __ addl(rdx, 1865232);\n+  __ movdqu(xmm4, xmm0);\n+  __ addl(rdx, rax);\n+  __ andl(rdx, 63);\n+  __ movdqu(xmm5, ExternalAddress(SC_4), rbx \/*rscratch*\/);    \/\/0xa556c734UL, 0x3ec71de3UL, 0x1a01a01aUL, 0x3efa01a0UL\n+  __ lea(rax, ExternalAddress(Ctable));\n+  __ shll(rdx, 5);\n+  __ addq(rax, rdx);\n+  __ mulpd(xmm2, xmm1);\n+  __ subsd(xmm0, xmm3);\n+  __ mulsd(xmm1, ExternalAddress(P_3), rbx \/*rscratch*\/);    \/\/0x2e037073UL, 0x3b63198aUL\n+  __ subsd(xmm4, xmm3);\n+  __ movq(xmm7, Address(rax, 8));\n+  __ unpcklpd(xmm0, xmm0);\n+  __ movdqu(xmm3, xmm4);\n+  __ subsd(xmm4, xmm2);\n+  __ mulpd(xmm5, xmm0);\n+  __ subpd(xmm0, xmm2);\n+  __ mulsd(xmm7, xmm4);\n+  __ subsd(xmm3, xmm4);\n+  __ mulpd(xmm5, xmm0);\n+  __ mulpd(xmm0, xmm0);\n+  __ subsd(xmm3, xmm2);\n+  __ movdqu(xmm2, Address(rax, 0));\n+  __ subsd(xmm1, xmm3);\n+  __ movq(xmm3, Address(rax, 24));\n+  __ addsd(xmm2, xmm3);\n+  __ subsd(xmm7, xmm2);\n+  __ subsd(xmm1, xmm6);\n+  __ movdqu(xmm6, ExternalAddress(SC_2), rbx \/*rscratch*\/);    \/\/0x11111111UL, 0x3f811111UL, 0x55555555UL, 0x3fa55555UL\n+  __ mulsd(xmm2, xmm4);\n+  __ mulpd(xmm6, xmm0);\n+  __ mulsd(xmm3, xmm4);\n+  __ mulpd(xmm2, xmm0);\n+  __ mulpd(xmm0, xmm0);\n+  __ addpd(xmm5, ExternalAddress(SC_3), rbx \/*rscratch*\/);    \/\/0x1a01a01aUL, 0xbf2a01a0UL, 0x16c16c17UL, 0xbf56c16cUL\n+  __ mulsd(xmm4, Address(rax, 0));\n+  __ addpd(xmm6, ExternalAddress(SC_1), rbx \/*rscratch*\/);    \/\/0x55555555UL, 0xbfc55555UL, 0x00000000UL, 0xbfe00000UL\n+  __ mulpd(xmm5, xmm0);\n+  __ movdqu(xmm0, xmm3);\n+  __ addsd(xmm3, Address(rax, 8));\n+  __ mulpd(xmm1, xmm7);\n+  __ movdqu(xmm7, xmm4);\n+  __ addsd(xmm4, xmm3);\n+  __ addpd(xmm6, xmm5);\n+  __ movq(xmm5, Address(rax, 8));\n+  __ subsd(xmm5, xmm3);\n+  __ subsd(xmm3, xmm4);\n+  __ addsd(xmm1, Address(rax, 16));\n+  __ mulpd(xmm6, xmm2);\n+  __ addsd(xmm5, xmm0);\n+  __ addsd(xmm3, xmm7);\n+  __ addsd(xmm1, xmm5);\n+  __ addsd(xmm1, xmm3);\n+  __ addsd(xmm1, xmm6);\n+  __ unpckhpd(xmm6, xmm6);\n+  __ movdqu(xmm0, xmm4);\n+  __ addsd(xmm1, xmm6);\n+  __ addsd(xmm0, xmm1);\n+  __ jmp(B1_4);\n+\n+  __ bind(L_2TAG_PACKET_7_0_1);\n+  __ addl(rdx, 64);\n+  __ movq(r9, r10);\n+  __ movq(r10, r8);\n+  __ movl(r8, 0);\n+  __ cmpq(r9, 0);\n+  __ jcc(Assembler::notEqual, L_2TAG_PACKET_8_0_1);\n+  __ addl(rdx, 64);\n+  __ movq(r9, r10);\n+  __ movq(r10, r8);\n+  __ cmpq(r9, 0);\n+  __ jcc(Assembler::notEqual, L_2TAG_PACKET_8_0_1);\n+  __ xorpd(xmm0, xmm0);\n+  __ xorpd(xmm6, xmm6);\n+  __ jmp(L_2TAG_PACKET_11_0_1);\n+\n+  __ bind(L_2TAG_PACKET_9_0_1);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_10_0_1);\n+  __ negl(rcx);\n+  __ shrq(r10);\n+  __ movq(rax, r9);\n+  __ shrq(r9);\n+  __ subl(rdx, rcx);\n+  __ negl(rcx);\n+  __ addl(rcx, 64);\n+  __ shlq(rax);\n+  __ orq(r10, rax);\n+  __ jmp(L_2TAG_PACKET_10_0_1);\n+  __ bind(L_2TAG_PACKET_3_0_1);\n+  __ negl(rcx);\n+  __ shlq(r9, 32);\n+  __ orq(r9, r11);\n+  __ shlq(r9);\n+  __ movq(rdi, r9);\n+  __ testl(r9, INT_MIN);\n+  __ jcc(Assembler::notEqual, L_2TAG_PACKET_12_0_1);\n+  __ shrl(r9);\n+  __ movl(rbx, 0);\n+  __ shrq(rdi, 3);\n+  __ jmp(L_2TAG_PACKET_6_0_1);\n+\n+  __ bind(L_2TAG_PACKET_4_0_1);\n+  __ shrl(r9);\n+  __ movl(rbx, 536870912);\n+  __ shrl(rbx);\n+  __ shlq(r9, 32);\n+  __ orq(r9, r11);\n+  __ shlq(rbx, 32);\n+  __ addl(rdi, 536870912);\n+  __ movl(rcx, 0);\n+  __ movl(r11, 0);\n+  __ subq(rcx, r8);\n+  __ sbbq(r11, r10);\n+  __ sbbq(rbx, r9);\n+  __ movq(r8, rcx);\n+  __ movq(r10, r11);\n+  __ movq(r9, rbx);\n+  __ movl(rbx, 32768);\n+  __ jmp(L_2TAG_PACKET_5_0_1);\n+\n+  __ bind(L_2TAG_PACKET_12_0_1);\n+  __ shrl(r9);\n+  __ mov64(rbx, 0x100000000);\n+  __ shrq(rbx);\n+  __ movl(rcx, 0);\n+  __ movl(r11, 0);\n+  __ subq(rcx, r8);\n+  __ sbbq(r11, r10);\n+  __ sbbq(rbx, r9);\n+  __ movq(r8, rcx);\n+  __ movq(r10, r11);\n+  __ movq(r9, rbx);\n+  __ movl(rbx, 32768);\n+  __ shrq(rdi, 3);\n+  __ addl(rdi, 536870912);\n+  __ jmp(L_2TAG_PACKET_6_0_1);\n+\n+  __ bind(L_2TAG_PACKET_2_0_1);\n+  __ movsd(xmm0, Address(rsp, 8));\n+  __ mulsd(xmm0, ExternalAddress(NEG_ZERO), rbx \/*rscratch*\/);    \/\/0x00000000UL, 0x80000000UL\n+  __ movq(Address(rsp, 0), xmm0);\n+\n+  __ bind(L_2TAG_PACKET_13_0_1);\n+\n+  __ bind(B1_4);\n+  __ addq(rsp, 16);\n+  __ pop(rbx);\n+\n+#ifdef _WIN64\n+  __ pop(rdi);\n+  __ pop(rsi);\n+#endif\n+\n+  __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ ret(0);\n+\n+  return start;\n+}\n+\n+#undef __\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_cos.cpp","additions":625,"deletions":0,"binary":false,"changes":625,"status":"added"},{"patch":"@@ -0,0 +1,387 @@\n+\/*\n+* Copyright (c) 2016, 2021, Intel Corporation. All rights reserved.\n+* Copyright (C) 2021 THL A29 Limited, a Tencent company. All rights reserved.\n+* Intel Math Library (LIBM) Source Code\n+*\n+* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+*\n+* This code is free software; you can redistribute it and\/or modify it\n+* under the terms of the GNU General Public License version 2 only, as\n+* published by the Free Software Foundation.\n+*\n+* This code is distributed in the hope that it will be useful, but WITHOUT\n+* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+* version 2 for more details (a copy is included in the LICENSE file that\n+* accompanied this code).\n+*\n+* You should have received a copy of the GNU General Public License version\n+* 2 along with this work; if not, write to the Free Software Foundation,\n+* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+*\n+* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+* or visit www.oracle.com if you need additional information or have any\n+* questions.\n+*\n+*\/\n+\n+#include \"precompiled.hpp\"\n+#include \"macroAssembler_x86.hpp\"\n+#include \"stubGenerator_x86_64.hpp\"\n+\n+\/******************************************************************************\/\n+\/\/                     ALGORITHM DESCRIPTION - EXP()\n+\/\/                     ---------------------\n+\/\/\n+\/\/ Description:\n+\/\/  Let K = 64 (table size).\n+\/\/        x    x\/log(2)     n\n+\/\/       e  = 2          = 2 * T[j] * (1 + P(y))\n+\/\/  where\n+\/\/       x = m*log(2)\/K + y,    y in [-log(2)\/K..log(2)\/K]\n+\/\/       m = n*K + j,           m,n,j - signed integer, j in [-K\/2..K\/2]\n+\/\/                  j\/K\n+\/\/       values of 2   are tabulated as T[j] = T_hi[j] ( 1 + T_lo[j]).\n+\/\/\n+\/\/       P(y) is a minimax polynomial approximation of exp(x)-1\n+\/\/       on small interval [-log(2)\/K..log(2)\/K] (were calculated by Maple V).\n+\/\/\n+\/\/  To avoid problems with arithmetic overflow and underflow,\n+\/\/            n                        n1  n2\n+\/\/  value of 2  is safely computed as 2 * 2 where n1 in [-BIAS\/2..BIAS\/2]\n+\/\/  where BIAS is a value of exponent bias.\n+\/\/\n+\/\/ Special cases:\n+\/\/  exp(NaN) = NaN\n+\/\/  exp(+INF) = +INF\n+\/\/  exp(-INF) = 0\n+\/\/  exp(x) = 1 for subnormals\n+\/\/  for finite argument, only exp(0)=1 is exact\n+\/\/  For IEEE double\n+\/\/    if x >  709.782712893383973096 then exp(x) overflow\n+\/\/    if x < -745.133219101941108420 then exp(x) underflow\n+\/\/\n+\/******************************************************************************\/\n+\n+ATTRIBUTE_ALIGNED(16) juint _cv[] =\n+{\n+    0x652b82feUL, 0x40571547UL, 0x652b82feUL, 0x40571547UL, 0xfefa0000UL,\n+    0x3f862e42UL, 0xfefa0000UL, 0x3f862e42UL, 0xbc9e3b3aUL, 0x3d1cf79aUL,\n+    0xbc9e3b3aUL, 0x3d1cf79aUL, 0xfffffffeUL, 0x3fdfffffUL, 0xfffffffeUL,\n+    0x3fdfffffUL, 0xe3289860UL, 0x3f56c15cUL, 0x555b9e25UL, 0x3fa55555UL,\n+    0xc090cf0fUL, 0x3f811115UL, 0x55548ba1UL, 0x3fc55555UL\n+};\n+\n+ATTRIBUTE_ALIGNED(16) juint _mmask[] =\n+{\n+    0xffffffc0UL, 0x00000000UL, 0xffffffc0UL, 0x00000000UL\n+};\n+\n+ATTRIBUTE_ALIGNED(16) juint _bias[] =\n+{\n+    0x0000ffc0UL, 0x00000000UL, 0x0000ffc0UL, 0x00000000UL\n+};\n+\n+ATTRIBUTE_ALIGNED(16) juint _Tbl_addr[] =\n+{\n+    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x0e03754dUL,\n+    0x3cad7bbfUL, 0x3e778060UL, 0x00002c9aUL, 0x3567f613UL, 0x3c8cd252UL,\n+    0xd3158574UL, 0x000059b0UL, 0x61e6c861UL, 0x3c60f74eUL, 0x18759bc8UL,\n+    0x00008745UL, 0x5d837b6cUL, 0x3c979aa6UL, 0x6cf9890fUL, 0x0000b558UL,\n+    0x702f9cd1UL, 0x3c3ebe3dUL, 0x32d3d1a2UL, 0x0000e3ecUL, 0x1e63bcd8UL,\n+    0x3ca3516eUL, 0xd0125b50UL, 0x00011301UL, 0x26f0387bUL, 0x3ca4c554UL,\n+    0xaea92ddfUL, 0x0001429aUL, 0x62523fb6UL, 0x3ca95153UL, 0x3c7d517aUL,\n+    0x000172b8UL, 0x3f1353bfUL, 0x3c8b898cUL, 0xeb6fcb75UL, 0x0001a35bUL,\n+    0x3e3a2f5fUL, 0x3c9aecf7UL, 0x3168b9aaUL, 0x0001d487UL, 0x44a6c38dUL,\n+    0x3c8a6f41UL, 0x88628cd6UL, 0x0002063bUL, 0xe3a8a894UL, 0x3c968efdUL,\n+    0x6e756238UL, 0x0002387aUL, 0x981fe7f2UL, 0x3c80472bUL, 0x65e27cddUL,\n+    0x00026b45UL, 0x6d09ab31UL, 0x3c82f7e1UL, 0xf51fdee1UL, 0x00029e9dUL,\n+    0x720c0ab3UL, 0x3c8b3782UL, 0xa6e4030bUL, 0x0002d285UL, 0x4db0abb6UL,\n+    0x3c834d75UL, 0x0a31b715UL, 0x000306feUL, 0x5dd3f84aUL, 0x3c8fdd39UL,\n+    0xb26416ffUL, 0x00033c08UL, 0xcc187d29UL, 0x3ca12f8cUL, 0x373aa9caUL,\n+    0x000371a7UL, 0x738b5e8bUL, 0x3ca7d229UL, 0x34e59ff6UL, 0x0003a7dbUL,\n+    0xa72a4c6dUL, 0x3c859f48UL, 0x4c123422UL, 0x0003dea6UL, 0x259d9205UL,\n+    0x3ca8b846UL, 0x21f72e29UL, 0x0004160aUL, 0x60c2ac12UL, 0x3c4363edUL,\n+    0x6061892dUL, 0x00044e08UL, 0xdaa10379UL, 0x3c6ecce1UL, 0xb5c13cd0UL,\n+    0x000486a2UL, 0xbb7aafb0UL, 0x3c7690ceUL, 0xd5362a27UL, 0x0004bfdaUL,\n+    0x9b282a09UL, 0x3ca083ccUL, 0x769d2ca6UL, 0x0004f9b2UL, 0xc1aae707UL,\n+    0x3ca509b0UL, 0x569d4f81UL, 0x0005342bUL, 0x18fdd78eUL, 0x3c933505UL,\n+    0x36b527daUL, 0x00056f47UL, 0xe21c5409UL, 0x3c9063e1UL, 0xdd485429UL,\n+    0x0005ab07UL, 0x2b64c035UL, 0x3c9432e6UL, 0x15ad2148UL, 0x0005e76fUL,\n+    0x99f08c0aUL, 0x3ca01284UL, 0xb03a5584UL, 0x0006247eUL, 0x0073dc06UL,\n+    0x3c99f087UL, 0x82552224UL, 0x00066238UL, 0x0da05571UL, 0x3c998d4dUL,\n+    0x667f3bccUL, 0x0006a09eUL, 0x86ce4786UL, 0x3ca52bb9UL, 0x3c651a2eUL,\n+    0x0006dfb2UL, 0x206f0dabUL, 0x3ca32092UL, 0xe8ec5f73UL, 0x00071f75UL,\n+    0x8e17a7a6UL, 0x3ca06122UL, 0x564267c8UL, 0x00075febUL, 0x461e9f86UL,\n+    0x3ca244acUL, 0x73eb0186UL, 0x0007a114UL, 0xabd66c55UL, 0x3c65ebe1UL,\n+    0x36cf4e62UL, 0x0007e2f3UL, 0xbbff67d0UL, 0x3c96fe9fUL, 0x994cce12UL,\n+    0x00082589UL, 0x14c801dfUL, 0x3c951f14UL, 0x9b4492ecUL, 0x000868d9UL,\n+    0xc1f0eab4UL, 0x3c8db72fUL, 0x422aa0dbUL, 0x0008ace5UL, 0x59f35f44UL,\n+    0x3c7bf683UL, 0x99157736UL, 0x0008f1aeUL, 0x9c06283cUL, 0x3ca360baUL,\n+    0xb0cdc5e4UL, 0x00093737UL, 0x20f962aaUL, 0x3c95e8d1UL, 0x9fde4e4fUL,\n+    0x00097d82UL, 0x2b91ce27UL, 0x3c71affcUL, 0x82a3f090UL, 0x0009c491UL,\n+    0x589a2ebdUL, 0x3c9b6d34UL, 0x7b5de564UL, 0x000a0c66UL, 0x9ab89880UL,\n+    0x3c95277cUL, 0xb23e255cUL, 0x000a5503UL, 0x6e735ab3UL, 0x3c846984UL,\n+    0x5579fdbfUL, 0x000a9e6bUL, 0x92cb3387UL, 0x3c8c1a77UL, 0x995ad3adUL,\n+    0x000ae89fUL, 0xdc2d1d96UL, 0x3ca22466UL, 0xb84f15faUL, 0x000b33a2UL,\n+    0xb19505aeUL, 0x3ca1112eUL, 0xf2fb5e46UL, 0x000b7f76UL, 0x0a5fddcdUL,\n+    0x3c74ffd7UL, 0x904bc1d2UL, 0x000bcc1eUL, 0x30af0cb3UL, 0x3c736eaeUL,\n+    0xdd85529cUL, 0x000c199bUL, 0xd10959acUL, 0x3c84e08fUL, 0x2e57d14bUL,\n+    0x000c67f1UL, 0x6c921968UL, 0x3c676b2cUL, 0xdcef9069UL, 0x000cb720UL,\n+    0x36df99b3UL, 0x3c937009UL, 0x4a07897bUL, 0x000d072dUL, 0xa63d07a7UL,\n+    0x3c74a385UL, 0xdcfba487UL, 0x000d5818UL, 0xd5c192acUL, 0x3c8e5a50UL,\n+    0x03db3285UL, 0x000da9e6UL, 0x1c4a9792UL, 0x3c98bb73UL, 0x337b9b5eUL,\n+    0x000dfc97UL, 0x603a88d3UL, 0x3c74b604UL, 0xe78b3ff6UL, 0x000e502eUL,\n+    0x92094926UL, 0x3c916f27UL, 0xa2a490d9UL, 0x000ea4afUL, 0x41aa2008UL,\n+    0x3c8ec3bcUL, 0xee615a27UL, 0x000efa1bUL, 0x31d185eeUL, 0x3c8a64a9UL,\n+    0x5b6e4540UL, 0x000f5076UL, 0x4d91cd9dUL, 0x3c77893bUL, 0x819e90d8UL,\n+    0x000fa7c1UL\n+};\n+\n+ATTRIBUTE_ALIGNED(16) juint _ALLONES[] =\n+{\n+    0xffffffffUL, 0xffffffffUL, 0xffffffffUL, 0xffffffffUL\n+};\n+\n+ATTRIBUTE_ALIGNED(16) juint _ebias[] =\n+{\n+    0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0x3ff00000UL\n+};\n+\n+ATTRIBUTE_ALIGNED(4) juint _XMAX[] =\n+{\n+    0xffffffffUL, 0x7fefffffUL\n+};\n+\n+ATTRIBUTE_ALIGNED(4) juint _XMIN[] =\n+{\n+    0x00000000UL, 0x00100000UL\n+};\n+\n+ATTRIBUTE_ALIGNED(4) juint _INF[] =\n+{\n+    0x00000000UL, 0x7ff00000UL\n+};\n+\n+#define __ _masm->\n+\n+address StubGenerator::generate_libmExp() {\n+  StubCodeMark mark(this, \"StubRoutines\", \"libmExp\");\n+  address start = __ pc();\n+\n+  Label L_2TAG_PACKET_0_0_2, L_2TAG_PACKET_1_0_2, L_2TAG_PACKET_2_0_2, L_2TAG_PACKET_3_0_2;\n+  Label L_2TAG_PACKET_4_0_2, L_2TAG_PACKET_5_0_2, L_2TAG_PACKET_6_0_2, L_2TAG_PACKET_7_0_2;\n+  Label L_2TAG_PACKET_8_0_2, L_2TAG_PACKET_9_0_2, L_2TAG_PACKET_10_0_2, L_2TAG_PACKET_11_0_2;\n+  Label L_2TAG_PACKET_12_0_2, B1_3, B1_5;\n+\n+  address cv       = (address)_cv;\n+  address mmask    = (address)_mmask;\n+  address bias     = (address)_bias;\n+  address Tbl_addr = (address)_Tbl_addr;\n+  address ALLONES  = (address)_ALLONES;\n+  address ebias    = (address)_ebias;\n+  address XMAX     = (address)_XMAX;\n+  address XMIN     = (address)_XMIN;\n+  address INF      = (address)_INF;\n+\n+  __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+\n+  __ subq(rsp, 24);\n+  __ movsd(Address(rsp, 8), xmm0);\n+  __ unpcklpd(xmm0, xmm0);\n+  __ movdqu(xmm1, ExternalAddress(cv),      r11 \/*rscratch*\/); \/\/ 0x652b82feUL, 0x40571547UL, 0x652b82feUL, 0x40571547UL\n+  __ movdqu(xmm2, ExternalAddress(cv + 16), r11 \/*rscratch*\/); \/\/ 0xfefa0000UL, 0x3f862e42UL, 0xfefa0000UL, 0x3f862e42UL\n+  __ movdqu(xmm3, ExternalAddress(cv + 32), r11 \/*rscratch*\/); \/\/ 0xbc9e3b3aUL, 0x3d1cf79aUL, 0xbc9e3b3aUL, 0x3d1cf79aUL\n+  __ movdqu(xmm6, ExternalAddress(SHIFTER), r11 \/*rscratch*\/); \/\/ 0x00000000UL, 0x43380000UL, 0x00000000UL, 0x43380000UL\n+  __ pextrw(rax, xmm0, 3);\n+  __ andl(rax, 32767);\n+  __ movl(rdx, 16527);\n+  __ subl(rdx, rax);\n+  __ subl(rax, 15504);\n+  __ orl(rdx, rax);\n+  __ cmpl(rdx, INT_MIN);\n+  __ jcc(Assembler::aboveEqual, L_2TAG_PACKET_0_0_2);\n+  __ mulpd(xmm1, xmm0);\n+  __ addpd(xmm1, xmm6);\n+  __ movapd(xmm7, xmm1);\n+  __ subpd(xmm1, xmm6);\n+  __ mulpd(xmm2, xmm1);\n+  __ movdqu(xmm4, ExternalAddress(cv + 64), r11 \/*rscratch*\/);  \/\/ 0xe3289860UL, 0x3f56c15cUL, 0x555b9e25UL, 0x3fa55555UL\n+  __ mulpd(xmm3, xmm1);\n+  __ movdqu(xmm5, ExternalAddress(cv + 80), r11 \/*rscratch*\/);  \/\/ 0xc090cf0fUL, 0x3f811115UL, 0x55548ba1UL, 0x3fc55555UL\n+  __ subpd(xmm0, xmm2);\n+  __ movdl(rax, xmm7);\n+  __ movl(rcx, rax);\n+  __ andl(rcx, 63);\n+  __ shll(rcx, 4);\n+  __ sarl(rax, 6);\n+  __ movl(rdx, rax);\n+  __ movdqu(xmm6, ExternalAddress(mmask), r11 \/*rscratch*\/);    \/\/ 0xffffffc0UL, 0x00000000UL, 0xffffffc0UL, 0x00000000UL\n+  __ pand(xmm7, xmm6);\n+  __ movdqu(xmm6, ExternalAddress(bias), r11 \/*rscratch*\/);     \/\/ 0x0000ffc0UL, 0x00000000UL, 0x0000ffc0UL, 0x00000000UL\n+  __ paddq(xmm7, xmm6);\n+  __ psllq(xmm7, 46);\n+  __ subpd(xmm0, xmm3);\n+  __ lea(r11, ExternalAddress(Tbl_addr));\n+  __ movdqu(xmm2, Address(rcx, r11));\n+  __ mulpd(xmm4, xmm0);\n+  __ movapd(xmm6, xmm0);\n+  __ movapd(xmm1, xmm0);\n+  __ mulpd(xmm6, xmm6);\n+  __ mulpd(xmm0, xmm6);\n+  __ addpd(xmm5, xmm4);\n+  __ mulsd(xmm0, xmm6);\n+  __ mulpd(xmm6, ExternalAddress(cv + 48), r11 \/*rscratch*\/);     \/\/ 0xfffffffeUL, 0x3fdfffffUL, 0xfffffffeUL, 0x3fdfffffUL\n+  __ addsd(xmm1, xmm2);\n+  __ unpckhpd(xmm2, xmm2);\n+  __ mulpd(xmm0, xmm5);\n+  __ addsd(xmm1, xmm0);\n+  __ por(xmm2, xmm7);\n+  __ unpckhpd(xmm0, xmm0);\n+  __ addsd(xmm0, xmm1);\n+  __ addsd(xmm0, xmm6);\n+  __ addl(rdx, 894);\n+  __ cmpl(rdx, 1916);\n+  __ jcc(Assembler::above, L_2TAG_PACKET_1_0_2);\n+  __ mulsd(xmm0, xmm2);\n+  __ addsd(xmm0, xmm2);\n+  __ jmp(B1_5);\n+\n+  __ bind(L_2TAG_PACKET_1_0_2);\n+  __ xorpd(xmm3, xmm3);\n+  __ movdqu(xmm4, ExternalAddress(ALLONES), r11 \/*rscratch*\/);  \/\/ 0xffffffffUL, 0xffffffffUL, 0xffffffffUL, 0xffffffffUL\n+  __ movl(rdx, -1022);\n+  __ subl(rdx, rax);\n+  __ movdl(xmm5, rdx);\n+  __ psllq(xmm4, xmm5);\n+  __ movl(rcx, rax);\n+  __ sarl(rax, 1);\n+  __ pinsrw(xmm3, rax, 3);\n+  __ movdqu(xmm6, ExternalAddress(ebias), r11 \/*rscratch*\/);    \/\/ 0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0x3ff00000UL\n+  __ psllq(xmm3, 4);\n+  __ psubd(xmm2, xmm3);\n+  __ mulsd(xmm0, xmm2);\n+  __ cmpl(rdx, 52);\n+  __ jcc(Assembler::greater, L_2TAG_PACKET_2_0_2);\n+  __ pand(xmm4, xmm2);\n+  __ paddd(xmm3, xmm6);\n+  __ subsd(xmm2, xmm4);\n+  __ addsd(xmm0, xmm2);\n+  __ cmpl(rcx, 1023);\n+  __ jcc(Assembler::greaterEqual, L_2TAG_PACKET_3_0_2);\n+  __ pextrw(rcx, xmm0, 3);\n+  __ andl(rcx, 32768);\n+  __ orl(rdx, rcx);\n+  __ cmpl(rdx, 0);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_4_0_2);\n+  __ movapd(xmm6, xmm0);\n+  __ addsd(xmm0, xmm4);\n+  __ mulsd(xmm0, xmm3);\n+  __ pextrw(rcx, xmm0, 3);\n+  __ andl(rcx, 32752);\n+  __ cmpl(rcx, 0);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_5_0_2);\n+  __ jmp(B1_5);\n+\n+  __ bind(L_2TAG_PACKET_5_0_2);\n+  __ mulsd(xmm6, xmm3);\n+  __ mulsd(xmm4, xmm3);\n+  __ movdqu(xmm0, xmm6);\n+  __ pxor(xmm6, xmm4);\n+  __ psrad(xmm6, 31);\n+  __ pshufd(xmm6, xmm6, 85);\n+  __ psllq(xmm0, 1);\n+  __ psrlq(xmm0, 1);\n+  __ pxor(xmm0, xmm6);\n+  __ psrlq(xmm6, 63);\n+  __ paddq(xmm0, xmm6);\n+  __ paddq(xmm0, xmm4);\n+  __ movl(Address(rsp, 0), 15);\n+  __ jmp(L_2TAG_PACKET_6_0_2);\n+\n+  __ bind(L_2TAG_PACKET_4_0_2);\n+  __ addsd(xmm0, xmm4);\n+  __ mulsd(xmm0, xmm3);\n+  __ jmp(B1_5);\n+\n+  __ bind(L_2TAG_PACKET_3_0_2);\n+  __ addsd(xmm0, xmm4);\n+  __ mulsd(xmm0, xmm3);\n+  __ pextrw(rcx, xmm0, 3);\n+  __ andl(rcx, 32752);\n+  __ cmpl(rcx, 32752);\n+  __ jcc(Assembler::aboveEqual, L_2TAG_PACKET_7_0_2);\n+  __ jmp(B1_5);\n+\n+  __ bind(L_2TAG_PACKET_2_0_2);\n+  __ paddd(xmm3, xmm6);\n+  __ addpd(xmm0, xmm2);\n+  __ mulsd(xmm0, xmm3);\n+  __ movl(Address(rsp, 0), 15);\n+  __ jmp(L_2TAG_PACKET_6_0_2);\n+\n+  __ bind(L_2TAG_PACKET_8_0_2);\n+  __ cmpl(rax, 2146435072);\n+  __ jcc(Assembler::aboveEqual, L_2TAG_PACKET_9_0_2);\n+  __ movl(rax, Address(rsp, 12));\n+  __ cmpl(rax, INT_MIN);\n+  __ jcc(Assembler::aboveEqual, L_2TAG_PACKET_10_0_2);\n+  __ movsd(xmm0, ExternalAddress(XMAX), r11 \/*rscratch*\/);      \/\/ 0xffffffffUL, 0x7fefffffUL\n+  __ mulsd(xmm0, xmm0);\n+\n+  __ bind(L_2TAG_PACKET_7_0_2);\n+  __ movl(Address(rsp, 0), 14);\n+  __ jmp(L_2TAG_PACKET_6_0_2);\n+\n+  __ bind(L_2TAG_PACKET_10_0_2);\n+  __ movsd(xmm0, ExternalAddress(XMIN), r11 \/*rscratch*\/);      \/\/ 0x00000000UL, 0x00100000UL\n+  __ mulsd(xmm0, xmm0);\n+  __ movl(Address(rsp, 0), 15);\n+  __ jmp(L_2TAG_PACKET_6_0_2);\n+\n+  __ bind(L_2TAG_PACKET_9_0_2);\n+  __ movl(rdx, Address(rsp, 8));\n+  __ cmpl(rax, 2146435072);\n+  __ jcc(Assembler::above, L_2TAG_PACKET_11_0_2);\n+  __ cmpl(rdx, 0);\n+  __ jcc(Assembler::notEqual, L_2TAG_PACKET_11_0_2);\n+  __ movl(rax, Address(rsp, 12));\n+  __ cmpl(rax, 2146435072);\n+  __ jcc(Assembler::notEqual, L_2TAG_PACKET_12_0_2);\n+  __ movsd(xmm0, ExternalAddress(INF), r11 \/*rscratch*\/);       \/\/ 0x00000000UL, 0x7ff00000UL\n+  __ jmp(B1_5);\n+\n+  __ bind(L_2TAG_PACKET_12_0_2);\n+  __ movsd(xmm0, ExternalAddress(ZERO), r11 \/*rscratch*\/);      \/\/ 0x00000000UL, 0x00000000UL\n+  __ jmp(B1_5);\n+\n+  __ bind(L_2TAG_PACKET_11_0_2);\n+  __ movsd(xmm0, Address(rsp, 8));\n+  __ addsd(xmm0, xmm0);\n+  __ jmp(B1_5);\n+\n+  __ bind(L_2TAG_PACKET_0_0_2);\n+  __ movl(rax, Address(rsp, 12));\n+  __ andl(rax, 2147483647);\n+  __ cmpl(rax, 1083179008);\n+  __ jcc(Assembler::aboveEqual, L_2TAG_PACKET_8_0_2);\n+  __ movsd(Address(rsp, 8), xmm0);\n+  __ addsd(xmm0, ExternalAddress(ONE), r11 \/*rscratch*\/); \/\/ 0x00000000UL, 0x3ff00000UL\n+  __ jmp(B1_5);\n+\n+  __ bind(L_2TAG_PACKET_6_0_2);\n+  __ movq(Address(rsp, 16), xmm0);\n+\n+  __ bind(B1_3);\n+  __ movq(xmm0, Address(rsp, 16));\n+\n+  __ bind(B1_5);\n+  __ addq(rsp, 24);\n+\n+  __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ ret(0);\n+\n+  return start;\n+}\n+\n+#undef __\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_exp.cpp","additions":387,"deletions":0,"binary":false,"changes":387,"status":"added"},{"patch":"@@ -0,0 +1,709 @@\n+\/*\n+* Copyright (c) 2016, 2021, Intel Corporation. All rights reserved.\n+* Copyright (C) 2021 THL A29 Limited, a Tencent company. All rights reserved.\n+* Intel Math Library (LIBM) Source Code\n+*\n+* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+*\n+* This code is free software; you can redistribute it and\/or modify it\n+* under the terms of the GNU General Public License version 2 only, as\n+* published by the Free Software Foundation.\n+*\n+* This code is distributed in the hope that it will be useful, but WITHOUT\n+* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+* version 2 for more details (a copy is included in the LICENSE file that\n+* accompanied this code).\n+*\n+* You should have received a copy of the GNU General Public License version\n+* 2 along with this work; if not, write to the Free Software Foundation,\n+* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+*\n+* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+* or visit www.oracle.com if you need additional information or have any\n+* questions.\n+*\n+*\/\n+\n+#include \"precompiled.hpp\"\n+#include \"macroAssembler_x86.hpp\"\n+#include \"stubGenerator_x86_64.hpp\"\n+\n+\/******************************************************************************\/\n+\/\/                     ALGORITHM DESCRIPTION - LOG()\n+\/\/                     ---------------------\n+\/\/\n+\/\/    x=2^k * mx, mx in [1,2)\n+\/\/\n+\/\/    Get B~1\/mx based on the output of rcpss instruction (B0)\n+\/\/    B = int((B0*2^7+0.5))\/2^7\n+\/\/\n+\/\/    Reduced argument: r=B*mx-1.0 (computed accurately in high and low parts)\n+\/\/\n+\/\/    Result:  k*log(2) - log(B) + p(r) if |x-1| >= small value (2^-6)  and\n+\/\/             p(r) is a degree 7 polynomial\n+\/\/             -log(B) read from data table (high, low parts)\n+\/\/             Result is formed from high and low parts\n+\/\/\n+\/\/ Special cases:\n+\/\/  log(NaN) = quiet NaN, and raise invalid exception\n+\/\/  log(+INF) = that INF\n+\/\/  log(0) = -INF with divide-by-zero exception raised\n+\/\/  log(1) = +0\n+\/\/  log(x) = NaN with invalid exception raised if x < -0, including -INF\n+\/\/\n+\/******************************************************************************\/\n+\n+ATTRIBUTE_ALIGNED(16) juint _L_tbl[] =\n+{\n+    0xfefa3800UL, 0x3fe62e42UL, 0x93c76730UL, 0x3d2ef357UL, 0xaa241800UL,\n+    0x3fe5ee82UL, 0x0cda46beUL, 0x3d220238UL, 0x5c364800UL, 0x3fe5af40UL,\n+    0xac10c9fbUL, 0x3d2dfa63UL, 0x26bb8c00UL, 0x3fe5707aUL, 0xff3303ddUL,\n+    0x3d09980bUL, 0x26867800UL, 0x3fe5322eUL, 0x5d257531UL, 0x3d05ccc4UL,\n+    0x835a5000UL, 0x3fe4f45aUL, 0x6d93b8fbUL, 0xbd2e6c51UL, 0x6f970c00UL,\n+    0x3fe4b6fdUL, 0xed4c541cUL, 0x3cef7115UL, 0x27e8a400UL, 0x3fe47a15UL,\n+    0xf94d60aaUL, 0xbd22cb6aUL, 0xf2f92400UL, 0x3fe43d9fUL, 0x481051f7UL,\n+    0xbcfd984fUL, 0x2125cc00UL, 0x3fe4019cUL, 0x30f0c74cUL, 0xbd26ce79UL,\n+    0x0c36c000UL, 0x3fe3c608UL, 0x7cfe13c2UL, 0xbd02b736UL, 0x17197800UL,\n+    0x3fe38ae2UL, 0xbb5569a4UL, 0xbd218b7aUL, 0xad9d8c00UL, 0x3fe35028UL,\n+    0x9527e6acUL, 0x3d10b83fUL, 0x44340800UL, 0x3fe315daUL, 0xc5a0ed9cUL,\n+    0xbd274e93UL, 0x57b0e000UL, 0x3fe2dbf5UL, 0x07b9dc11UL, 0xbd17a6e5UL,\n+    0x6d0ec000UL, 0x3fe2a278UL, 0xe797882dUL, 0x3d206d2bUL, 0x1134dc00UL,\n+    0x3fe26962UL, 0x05226250UL, 0xbd0b61f1UL, 0xd8bebc00UL, 0x3fe230b0UL,\n+    0x6e48667bUL, 0x3d12fc06UL, 0x5fc61800UL, 0x3fe1f863UL, 0xc9fe81d3UL,\n+    0xbd2a7242UL, 0x49ae6000UL, 0x3fe1c078UL, 0xed70e667UL, 0x3cccacdeUL,\n+    0x40f23c00UL, 0x3fe188eeUL, 0xf8ab4650UL, 0x3d14cc4eUL, 0xf6f29800UL,\n+    0x3fe151c3UL, 0xa293ae49UL, 0xbd2edd97UL, 0x23c75c00UL, 0x3fe11af8UL,\n+    0xbb9ddcb2UL, 0xbd258647UL, 0x8611cc00UL, 0x3fe0e489UL, 0x07801742UL,\n+    0x3d1c2998UL, 0xe2d05400UL, 0x3fe0ae76UL, 0x887e7e27UL, 0x3d1f486bUL,\n+    0x0533c400UL, 0x3fe078bfUL, 0x41edf5fdUL, 0x3d268122UL, 0xbe760400UL,\n+    0x3fe04360UL, 0xe79539e0UL, 0xbd04c45fUL, 0xe5b20800UL, 0x3fe00e5aUL,\n+    0xb1727b1cUL, 0xbd053ba3UL, 0xaf7a4800UL, 0x3fdfb358UL, 0x3c164935UL,\n+    0x3d0085faUL, 0xee031800UL, 0x3fdf4aa7UL, 0x6f014a8bUL, 0x3d12cde5UL,\n+    0x56b41000UL, 0x3fdee2a1UL, 0x5a470251UL, 0x3d2f27f4UL, 0xc3ddb000UL,\n+    0x3fde7b42UL, 0x5372bd08UL, 0xbd246550UL, 0x1a272800UL, 0x3fde148aUL,\n+    0x07322938UL, 0xbd1326b2UL, 0x484c9800UL, 0x3fddae75UL, 0x60dc616aUL,\n+    0xbd1ea42dUL, 0x46def800UL, 0x3fdd4902UL, 0xe9a767a8UL, 0x3d235bafUL,\n+    0x18064800UL, 0x3fdce42fUL, 0x3ec7a6b0UL, 0xbd0797c3UL, 0xc7455800UL,\n+    0x3fdc7ff9UL, 0xc15249aeUL, 0xbd29b6ddUL, 0x693fa000UL, 0x3fdc1c60UL,\n+    0x7fe8e180UL, 0x3d2cec80UL, 0x1b80e000UL, 0x3fdbb961UL, 0xf40a666dUL,\n+    0x3d27d85bUL, 0x04462800UL, 0x3fdb56faUL, 0x2d841995UL, 0x3d109525UL,\n+    0x5248d000UL, 0x3fdaf529UL, 0x52774458UL, 0xbd217cc5UL, 0x3c8ad800UL,\n+    0x3fda93edUL, 0xbea77a5dUL, 0x3d1e36f2UL, 0x0224f800UL, 0x3fda3344UL,\n+    0x7f9d79f5UL, 0x3d23c645UL, 0xea15f000UL, 0x3fd9d32bUL, 0x10d0c0b0UL,\n+    0xbd26279eUL, 0x43135800UL, 0x3fd973a3UL, 0xa502d9f0UL, 0xbd152313UL,\n+    0x635bf800UL, 0x3fd914a8UL, 0x2ee6307dUL, 0xbd1766b5UL, 0xa88b3000UL,\n+    0x3fd8b639UL, 0xe5e70470UL, 0xbd205ae1UL, 0x776dc800UL, 0x3fd85855UL,\n+    0x3333778aUL, 0x3d2fd56fUL, 0x3bd81800UL, 0x3fd7fafaUL, 0xc812566aUL,\n+    0xbd272090UL, 0x687cf800UL, 0x3fd79e26UL, 0x2efd1778UL, 0x3d29ec7dUL,\n+    0x76c67800UL, 0x3fd741d8UL, 0x49dc60b3UL, 0x3d2d8b09UL, 0xe6af1800UL,\n+    0x3fd6e60eUL, 0x7c222d87UL, 0x3d172165UL, 0x3e9c6800UL, 0x3fd68ac8UL,\n+    0x2756eba0UL, 0x3d20a0d3UL, 0x0b3ab000UL, 0x3fd63003UL, 0xe731ae00UL,\n+    0xbd2db623UL, 0xdf596000UL, 0x3fd5d5bdUL, 0x08a465dcUL, 0xbd0a0b2aUL,\n+    0x53c8d000UL, 0x3fd57bf7UL, 0xee5d40efUL, 0x3d1fadedUL, 0x0738a000UL,\n+    0x3fd522aeUL, 0x8164c759UL, 0x3d2ebe70UL, 0x9e173000UL, 0x3fd4c9e0UL,\n+    0x1b0ad8a4UL, 0xbd2e2089UL, 0xc271c800UL, 0x3fd4718dUL, 0x0967d675UL,\n+    0xbd2f27ceUL, 0x23d5e800UL, 0x3fd419b4UL, 0xec90e09dUL, 0x3d08e436UL,\n+    0x77333000UL, 0x3fd3c252UL, 0xb606bd5cUL, 0x3d183b54UL, 0x76be1000UL,\n+    0x3fd36b67UL, 0xb0f177c8UL, 0x3d116ecdUL, 0xe1d36000UL, 0x3fd314f1UL,\n+    0xd3213cb8UL, 0xbd28e27aUL, 0x7cdc9000UL, 0x3fd2bef0UL, 0x4a5004f4UL,\n+    0x3d2a9cfaUL, 0x1134d800UL, 0x3fd26962UL, 0xdf5bb3b6UL, 0x3d2c93c1UL,\n+    0x6d0eb800UL, 0x3fd21445UL, 0xba46baeaUL, 0x3d0a87deUL, 0x635a6800UL,\n+    0x3fd1bf99UL, 0x5147bdb7UL, 0x3d2ca6edUL, 0xcbacf800UL, 0x3fd16b5cUL,\n+    0xf7a51681UL, 0x3d2b9acdUL, 0x8227e800UL, 0x3fd1178eUL, 0x63a5f01cUL,\n+    0xbd2c210eUL, 0x67616000UL, 0x3fd0c42dUL, 0x163ceae9UL, 0x3d27188bUL,\n+    0x604d5800UL, 0x3fd07138UL, 0x16ed4e91UL, 0x3cf89cdbUL, 0x5626c800UL,\n+    0x3fd01eaeUL, 0x1485e94aUL, 0xbd16f08cUL, 0x6cb3b000UL, 0x3fcf991cUL,\n+    0xca0cdf30UL, 0x3d1bcbecUL, 0xe4dd0000UL, 0x3fcef5adUL, 0x65bb8e11UL,\n+    0xbcca2115UL, 0xffe71000UL, 0x3fce530eUL, 0x6041f430UL, 0x3cc21227UL,\n+    0xb0d49000UL, 0x3fcdb13dUL, 0xf715b035UL, 0xbd2aff2aUL, 0xf2656000UL,\n+    0x3fcd1037UL, 0x75b6f6e4UL, 0xbd084a7eUL, 0xc6f01000UL, 0x3fcc6ffbUL,\n+    0xc5962bd2UL, 0xbcf1ec72UL, 0x383be000UL, 0x3fcbd087UL, 0x595412b6UL,\n+    0xbd2d4bc4UL, 0x575bd000UL, 0x3fcb31d8UL, 0x4eace1aaUL, 0xbd0c358dUL,\n+    0x3c8ae000UL, 0x3fca93edUL, 0x50562169UL, 0xbd287243UL, 0x07089000UL,\n+    0x3fc9f6c4UL, 0x6865817aUL, 0x3d29904dUL, 0xdcf70000UL, 0x3fc95a5aUL,\n+    0x58a0ff6fUL, 0x3d07f228UL, 0xeb390000UL, 0x3fc8beafUL, 0xaae92cd1UL,\n+    0xbd073d54UL, 0x6551a000UL, 0x3fc823c1UL, 0x9a631e83UL, 0x3d1e0ddbUL,\n+    0x85445000UL, 0x3fc7898dUL, 0x70914305UL, 0xbd1c6610UL, 0x8b757000UL,\n+    0x3fc6f012UL, 0xe59c21e1UL, 0xbd25118dUL, 0xbe8c1000UL, 0x3fc6574eUL,\n+    0x2c3c2e78UL, 0x3d19cf8bUL, 0x6b544000UL, 0x3fc5bf40UL, 0xeb68981cUL,\n+    0xbd127023UL, 0xe4a1b000UL, 0x3fc527e5UL, 0xe5697dc7UL, 0x3d2633e8UL,\n+    0x8333b000UL, 0x3fc4913dUL, 0x54fdb678UL, 0x3d258379UL, 0xa5993000UL,\n+    0x3fc3fb45UL, 0x7e6a354dUL, 0xbd2cd1d8UL, 0xb0159000UL, 0x3fc365fcUL,\n+    0x234b7289UL, 0x3cc62fa8UL, 0x0c868000UL, 0x3fc2d161UL, 0xcb81b4a1UL,\n+    0x3d039d6cUL, 0x2a49c000UL, 0x3fc23d71UL, 0x8fd3df5cUL, 0x3d100d23UL,\n+    0x7e23f000UL, 0x3fc1aa2bUL, 0x44389934UL, 0x3d2ca78eUL, 0x8227e000UL,\n+    0x3fc1178eUL, 0xce2d07f2UL, 0x3d21ef78UL, 0xb59e4000UL, 0x3fc08598UL,\n+    0x7009902cUL, 0xbd27e5ddUL, 0x39dbe000UL, 0x3fbfe891UL, 0x4fa10afdUL,\n+    0xbd2534d6UL, 0x830a2000UL, 0x3fbec739UL, 0xafe645e0UL, 0xbd2dc068UL,\n+    0x63844000UL, 0x3fbda727UL, 0x1fa71733UL, 0x3d1a8940UL, 0x01bc4000UL,\n+    0x3fbc8858UL, 0xc65aacd3UL, 0x3d2646d1UL, 0x8dad6000UL, 0x3fbb6ac8UL,\n+    0x2bf768e5UL, 0xbd139080UL, 0x40b1c000UL, 0x3fba4e76UL, 0xb94407c8UL,\n+    0xbd0e42b6UL, 0x5d594000UL, 0x3fb9335eUL, 0x3abd47daUL, 0x3d23115cUL,\n+    0x2f40e000UL, 0x3fb8197eUL, 0xf96ffdf7UL, 0x3d0f80dcUL, 0x0aeac000UL,\n+    0x3fb700d3UL, 0xa99ded32UL, 0x3cec1e8dUL, 0x4d97a000UL, 0x3fb5e95aUL,\n+    0x3c5d1d1eUL, 0xbd2c6906UL, 0x5d208000UL, 0x3fb4d311UL, 0x82f4e1efUL,\n+    0xbcf53a25UL, 0xa7d1e000UL, 0x3fb3bdf5UL, 0xa5db4ed7UL, 0x3d2cc85eUL,\n+    0xa4472000UL, 0x3fb2aa04UL, 0xae9c697dUL, 0xbd20b6e8UL, 0xd1466000UL,\n+    0x3fb1973bUL, 0x560d9e9bUL, 0xbd25325dUL, 0xb59e4000UL, 0x3fb08598UL,\n+    0x7009902cUL, 0xbd17e5ddUL, 0xc006c000UL, 0x3faeea31UL, 0x4fc93b7bUL,\n+    0xbd0e113eUL, 0xcdddc000UL, 0x3faccb73UL, 0x47d82807UL, 0xbd1a68f2UL,\n+    0xd0fb0000UL, 0x3faaaef2UL, 0x353bb42eUL, 0x3d20fc1aUL, 0x149fc000UL,\n+    0x3fa894aaUL, 0xd05a267dUL, 0xbd197995UL, 0xf2d4c000UL, 0x3fa67c94UL,\n+    0xec19afa2UL, 0xbd029efbUL, 0xd42e0000UL, 0x3fa466aeUL, 0x75bdfd28UL,\n+    0xbd2c1673UL, 0x2f8d0000UL, 0x3fa252f3UL, 0xe021b67bUL, 0x3d283e9aUL,\n+    0x89e74000UL, 0x3fa0415dUL, 0x5cf1d753UL, 0x3d0111c0UL, 0xec148000UL,\n+    0x3f9c63d2UL, 0x3f9eb2f3UL, 0x3d2578c6UL, 0x28c90000UL, 0x3f984925UL,\n+    0x325a0c34UL, 0xbd2aa0baUL, 0x25980000UL, 0x3f9432a9UL, 0x928637feUL,\n+    0x3d098139UL, 0x58938000UL, 0x3f902056UL, 0x06e2f7d2UL, 0xbd23dc5bUL,\n+    0xa3890000UL, 0x3f882448UL, 0xda74f640UL, 0xbd275577UL, 0x75890000UL,\n+    0x3f801015UL, 0x999d2be8UL, 0xbd10c76bUL, 0x59580000UL, 0x3f700805UL,\n+    0xcb31c67bUL, 0x3d2166afUL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n+    0x80000000UL\n+};\n+\n+ATTRIBUTE_ALIGNED(16) juint _log2[] =\n+{\n+    0xfefa3800UL, 0x3fa62e42UL, 0x93c76730UL, 0x3ceef357UL\n+};\n+\n+ATTRIBUTE_ALIGNED(16) juint _coeff[] =\n+{\n+    0x92492492UL, 0x3fc24924UL, 0x00000000UL, 0xbfd00000UL, 0x3d6fb175UL,\n+    0xbfc5555eUL, 0x55555555UL, 0x3fd55555UL, 0x9999999aUL, 0x3fc99999UL,\n+    0x00000000UL, 0xbfe00000UL\n+};\n+\n+#define __ _masm->\n+\n+address StubGenerator::generate_libmLog() {\n+  StubCodeMark mark(this, \"StubRoutines\", \"libmLog\");\n+  address start = __ pc();\n+\n+  Label L_2TAG_PACKET_0_0_2, L_2TAG_PACKET_1_0_2, L_2TAG_PACKET_2_0_2, L_2TAG_PACKET_3_0_2;\n+  Label L_2TAG_PACKET_4_0_2, L_2TAG_PACKET_5_0_2, L_2TAG_PACKET_6_0_2, L_2TAG_PACKET_7_0_2;\n+  Label L_2TAG_PACKET_8_0_2;\n+  Label B1_3, B1_5;\n+\n+  address L_tbl = (address)_L_tbl;\n+  address log2  = (address)_log2;\n+  address coeff = (address)_coeff;\n+\n+  __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+\n+  __ subq(rsp, 24);\n+  __ movsd(Address(rsp, 0), xmm0);\n+  __ mov64(rax, 0x3ff0000000000000);\n+  __ movdq(xmm2, rax);\n+  __ mov64(rdx, 0x77f0000000000000);\n+  __ movdq(xmm3, rdx);\n+  __ movl(rcx, 32768);\n+  __ movdl(xmm4, rcx);\n+  __ mov64(r11, 0xffffe00000000000);\n+  __ movdq(xmm5, r11);\n+  __ movdqu(xmm1, xmm0);\n+  __ pextrw(rax, xmm0, 3);\n+  __ por(xmm0, xmm2);\n+  __ movl(rcx, 16352);\n+  __ psrlq(xmm0, 27);\n+  __ lea(r8, ExternalAddress(L_tbl));\n+  __ psrld(xmm0, 2);\n+  __ rcpps(xmm0, xmm0);\n+  __ psllq(xmm1, 12);\n+  __ pshufd(xmm6, xmm5, 228);\n+  __ psrlq(xmm1, 12);\n+  __ subl(rax, 16);\n+  __ cmpl(rax, 32736);\n+  __ jcc(Assembler::aboveEqual, L_2TAG_PACKET_0_0_2);\n+\n+  __ bind(L_2TAG_PACKET_1_0_2);\n+  __ paddd(xmm0, xmm4);\n+  __ por(xmm1, xmm3);\n+  __ movdl(rdx, xmm0);\n+  __ psllq(xmm0, 29);\n+  __ pand(xmm5, xmm1);\n+  __ pand(xmm0, xmm6);\n+  __ subsd(xmm1, xmm5);\n+  __ mulpd(xmm5, xmm0);\n+  __ andl(rax, 32752);\n+  __ subl(rax, rcx);\n+  __ cvtsi2sdl(xmm7, rax);\n+  __ mulsd(xmm1, xmm0);\n+  __ movq(xmm6, ExternalAddress(log2), r11 \/*rscratch*\/);       \/\/ 0xfefa3800UL, 0x3fa62e42UL\n+  __ movdqu(xmm3, ExternalAddress(coeff), r11 \/*rscratch*\/);    \/\/ 0x92492492UL, 0x3fc24924UL, 0x00000000UL, 0xbfd00000UL\n+  __ subsd(xmm5, xmm2);\n+  __ andl(rdx, 16711680);\n+  __ shrl(rdx, 12);\n+  __ movdqu(xmm0, Address(r8, rdx));\n+  __ movdqu(xmm4, ExternalAddress(coeff + 16), r11 \/*rscratch*\/); \/\/ 0x3d6fb175UL, 0xbfc5555eUL, 0x55555555UL, 0x3fd55555UL\n+  __ addsd(xmm1, xmm5);\n+  __ movdqu(xmm2, ExternalAddress(coeff + 32), r11 \/*rscratch*\/); \/\/ 0x9999999aUL, 0x3fc99999UL, 0x00000000UL, 0xbfe00000UL\n+  __ mulsd(xmm6, xmm7);\n+  if (VM_Version::supports_sse3()) {\n+    __ movddup(xmm5, xmm1);\n+  }\n+  else {\n+    __ movdqu(xmm5, xmm1);\n+    __ movlhps(xmm5, xmm5);\n+  }\n+  __ mulsd(xmm7, ExternalAddress(log2 + 8), r11 \/*rscratch*\/);    \/\/ 0x93c76730UL, 0x3ceef357UL\n+  __ mulsd(xmm3, xmm1);\n+  __ addsd(xmm0, xmm6);\n+  __ mulpd(xmm4, xmm5);\n+  __ mulpd(xmm5, xmm5);\n+  if (VM_Version::supports_sse3()) {\n+    __ movddup(xmm6, xmm0);\n+  }\n+  else {\n+    __ movdqu(xmm6, xmm0);\n+    __ movlhps(xmm6, xmm6);\n+  }\n+  __ addsd(xmm0, xmm1);\n+  __ addpd(xmm4, xmm2);\n+  __ mulpd(xmm3, xmm5);\n+  __ subsd(xmm6, xmm0);\n+  __ mulsd(xmm4, xmm1);\n+  __ pshufd(xmm2, xmm0, 238);\n+  __ addsd(xmm1, xmm6);\n+  __ mulsd(xmm5, xmm5);\n+  __ addsd(xmm7, xmm2);\n+  __ addpd(xmm4, xmm3);\n+  __ addsd(xmm1, xmm7);\n+  __ mulpd(xmm4, xmm5);\n+  __ addsd(xmm1, xmm4);\n+  __ pshufd(xmm5, xmm4, 238);\n+  __ addsd(xmm1, xmm5);\n+  __ addsd(xmm0, xmm1);\n+  __ jmp(B1_5);\n+\n+  __ bind(L_2TAG_PACKET_0_0_2);\n+  __ movq(xmm0, Address(rsp, 0));\n+  __ movq(xmm1, Address(rsp, 0));\n+  __ addl(rax, 16);\n+  __ cmpl(rax, 32768);\n+  __ jcc(Assembler::aboveEqual, L_2TAG_PACKET_2_0_2);\n+  __ cmpl(rax, 16);\n+  __ jcc(Assembler::below, L_2TAG_PACKET_3_0_2);\n+\n+  __ bind(L_2TAG_PACKET_4_0_2);\n+  __ addsd(xmm0, xmm0);\n+  __ jmp(B1_5);\n+\n+  __ bind(L_2TAG_PACKET_5_0_2);\n+  __ jcc(Assembler::above, L_2TAG_PACKET_4_0_2);\n+  __ cmpl(rdx, 0);\n+  __ jcc(Assembler::above, L_2TAG_PACKET_4_0_2);\n+  __ jmp(L_2TAG_PACKET_6_0_2);\n+\n+  __ bind(L_2TAG_PACKET_3_0_2);\n+  __ xorpd(xmm1, xmm1);\n+  __ addsd(xmm1, xmm0);\n+  __ movdl(rdx, xmm1);\n+  __ psrlq(xmm1, 32);\n+  __ movdl(rcx, xmm1);\n+  __ orl(rdx, rcx);\n+  __ cmpl(rdx, 0);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_7_0_2);\n+  __ xorpd(xmm1, xmm1);\n+  __ movl(rax, 18416);\n+  __ pinsrw(xmm1, rax, 3);\n+  __ mulsd(xmm0, xmm1);\n+  __ movdqu(xmm1, xmm0);\n+  __ pextrw(rax, xmm0, 3);\n+  __ por(xmm0, xmm2);\n+  __ psrlq(xmm0, 27);\n+  __ movl(rcx, 18416);\n+  __ psrld(xmm0, 2);\n+  __ rcpps(xmm0, xmm0);\n+  __ psllq(xmm1, 12);\n+  __ pshufd(xmm6, xmm5, 228);\n+  __ psrlq(xmm1, 12);\n+  __ jmp(L_2TAG_PACKET_1_0_2);\n+\n+  __ bind(L_2TAG_PACKET_2_0_2);\n+  __ movdl(rdx, xmm1);\n+  __ psrlq(xmm1, 32);\n+  __ movdl(rcx, xmm1);\n+  __ addl(rcx, rcx);\n+  __ cmpl(rcx, -2097152);\n+  __ jcc(Assembler::aboveEqual, L_2TAG_PACKET_5_0_2);\n+  __ orl(rdx, rcx);\n+  __ cmpl(rdx, 0);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_7_0_2);\n+\n+  __ bind(L_2TAG_PACKET_6_0_2);\n+  __ xorpd(xmm1, xmm1);\n+  __ xorpd(xmm0, xmm0);\n+  __ movl(rax, 32752);\n+  __ pinsrw(xmm1, rax, 3);\n+  __ mulsd(xmm0, xmm1);\n+  __ movl(Address(rsp, 16), 3);\n+  __ jmp(L_2TAG_PACKET_8_0_2);\n+  __ bind(L_2TAG_PACKET_7_0_2);\n+  __ xorpd(xmm1, xmm1);\n+  __ xorpd(xmm0, xmm0);\n+  __ movl(rax, 49136);\n+  __ pinsrw(xmm0, rax, 3);\n+  __ divsd(xmm0, xmm1);\n+  __ movl(Address(rsp, 16), 2);\n+\n+  __ bind(L_2TAG_PACKET_8_0_2);\n+  __ movq(Address(rsp, 8), xmm0);\n+\n+  __ bind(B1_3);\n+  __ movq(xmm0, Address(rsp, 8));\n+\n+  __ bind(B1_5);\n+  __ addq(rsp, 24);\n+\n+  __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ ret(0);\n+\n+  return start;\n+}\n+\n+\/******************************************************************************\/\n+\/\/                     ALGORITHM DESCRIPTION - LOG10()\n+\/\/                     ---------------------\n+\/\/\n+\/\/    Let x=2^k * mx, mx in [1,2)\n+\/\/\n+\/\/    Get B~1\/mx based on the output of rcpss instruction (B0)\n+\/\/    B = int((B0*LH*2^7+0.5))\/2^7\n+\/\/    LH is a short approximation for log10(e)\n+\/\/\n+\/\/    Reduced argument: r=B*mx-LH (computed accurately in high and low parts)\n+\/\/\n+\/\/    Result:  k*log10(2) - log(B) + p(r)\n+\/\/             p(r) is a degree 7 polynomial\n+\/\/             -log(B) read from data table (high, low parts)\n+\/\/             Result is formed from high and low parts\n+\/\/\n+\/\/ Special cases:\n+\/\/  log10(0) = -INF with divide-by-zero exception raised\n+\/\/  log10(1) = +0\n+\/\/  log10(x) = NaN with invalid exception raised if x < -0, including -INF\n+\/\/  log10(+INF) = +INF\n+\/\/\n+\/******************************************************************************\/\n+\n+ATTRIBUTE_ALIGNED(16) juint _HIGHSIGMASK_log10[] = {\n+    0xf8000000UL, 0xffffffffUL, 0x00000000UL, 0xffffe000UL\n+};\n+\n+ATTRIBUTE_ALIGNED(16) juint _LOG10_E[] = {\n+    0x00000000UL, 0x3fdbc000UL, 0xbf2e4108UL, 0x3f5a7a6cUL\n+};\n+\n+ATTRIBUTE_ALIGNED(16) juint _L_tbl_log10[] = {\n+    0x509f7800UL, 0x3fd34413UL, 0x1f12b358UL, 0x3d1fef31UL, 0x80333400UL,\n+    0x3fd32418UL, 0xc671d9d0UL, 0xbcf542bfUL, 0x51195000UL, 0x3fd30442UL,\n+    0x78a4b0c3UL, 0x3d18216aUL, 0x6fc79400UL, 0x3fd2e490UL, 0x80fa389dUL,\n+    0xbc902869UL, 0x89d04000UL, 0x3fd2c502UL, 0x75c2f564UL, 0x3d040754UL,\n+    0x4ddd1c00UL, 0x3fd2a598UL, 0xd219b2c3UL, 0xbcfa1d84UL, 0x6baa7c00UL,\n+    0x3fd28651UL, 0xfd9abec1UL, 0x3d1be6d3UL, 0x94028800UL, 0x3fd2672dUL,\n+    0xe289a455UL, 0xbd1ede5eUL, 0x78b86400UL, 0x3fd2482cUL, 0x6734d179UL,\n+    0x3d1fe79bUL, 0xcca3c800UL, 0x3fd2294dUL, 0x981a40b8UL, 0xbced34eaUL,\n+    0x439c5000UL, 0x3fd20a91UL, 0xcc392737UL, 0xbd1a9cc3UL, 0x92752c00UL,\n+    0x3fd1ebf6UL, 0x03c9afe7UL, 0x3d1e98f8UL, 0x6ef8dc00UL, 0x3fd1cd7dUL,\n+    0x71dae7f4UL, 0x3d08a86cUL, 0x8fe4dc00UL, 0x3fd1af25UL, 0xee9185a1UL,\n+    0xbcff3412UL, 0xace59400UL, 0x3fd190eeUL, 0xc2cab353UL, 0x3cf17ed9UL,\n+    0x7e925000UL, 0x3fd172d8UL, 0x6952c1b2UL, 0x3cf1521cUL, 0xbe694400UL,\n+    0x3fd154e2UL, 0xcacb79caUL, 0xbd0bdc78UL, 0x26cbac00UL, 0x3fd1370dUL,\n+    0xf71f4de1UL, 0xbd01f8beUL, 0x72fa0800UL, 0x3fd11957UL, 0x55bf910bUL,\n+    0x3c946e2bUL, 0x5f106000UL, 0x3fd0fbc1UL, 0x39e639c1UL, 0x3d14a84bUL,\n+    0xa802a800UL, 0x3fd0de4aUL, 0xd3f31d5dUL, 0xbd178385UL, 0x0b992000UL,\n+    0x3fd0c0f3UL, 0x3843106fUL, 0xbd1f602fUL, 0x486ce800UL, 0x3fd0a3baUL,\n+    0x8819497cUL, 0x3cef987aUL, 0x1de49400UL, 0x3fd086a0UL, 0x1caa0467UL,\n+    0x3d0faec7UL, 0x4c30cc00UL, 0x3fd069a4UL, 0xa4424372UL, 0xbd1618fcUL,\n+    0x94490000UL, 0x3fd04cc6UL, 0x946517d2UL, 0xbd18384bUL, 0xb7e84000UL,\n+    0x3fd03006UL, 0xe0109c37UL, 0xbd19a6acUL, 0x798a0c00UL, 0x3fd01364UL,\n+    0x5121e864UL, 0xbd164cf7UL, 0x38ce8000UL, 0x3fcfedbfUL, 0x46214d1aUL,\n+    0xbcbbc402UL, 0xc8e62000UL, 0x3fcfb4efUL, 0xdab93203UL, 0x3d1e0176UL,\n+    0x2cb02800UL, 0x3fcf7c5aUL, 0x2a2ea8e4UL, 0xbcfec86aUL, 0xeeeaa000UL,\n+    0x3fcf43fdUL, 0xc18e49a4UL, 0x3cf110a8UL, 0x9bb6e800UL, 0x3fcf0bdaUL,\n+    0x923cc9c0UL, 0xbd15ce99UL, 0xc093f000UL, 0x3fced3efUL, 0x4d4b51e9UL,\n+    0x3d1a04c7UL, 0xec58f800UL, 0x3fce9c3cUL, 0x163cad59UL, 0x3cac8260UL,\n+    0x9a907000UL, 0x3fce2d7dUL, 0x3fa93646UL, 0x3ce4a1c0UL, 0x37311000UL,\n+    0x3fcdbf99UL, 0x32abd1fdUL, 0x3d07ea9dUL, 0x6744b800UL, 0x3fcd528cUL,\n+    0x4dcbdfd4UL, 0xbd1b08e2UL, 0xe36de800UL, 0x3fcce653UL, 0x0b7b7f7fUL,\n+    0xbd1b8f03UL, 0x77506800UL, 0x3fcc7aecUL, 0xa821c9fbUL, 0x3d13c163UL,\n+    0x00ff8800UL, 0x3fcc1053UL, 0x536bca76UL, 0xbd074ee5UL, 0x70719800UL,\n+    0x3fcba684UL, 0xd7da9b6bUL, 0xbd1fbf16UL, 0xc6f8d800UL, 0x3fcb3d7dUL,\n+    0xe2220bb3UL, 0x3d1a295dUL, 0x16c15800UL, 0x3fcad53cUL, 0xe724911eUL,\n+    0xbcf55822UL, 0x82533800UL, 0x3fca6dbcUL, 0x6d982371UL, 0x3cac567cUL,\n+    0x3c19e800UL, 0x3fca06fcUL, 0x84d17d80UL, 0x3d1da204UL, 0x85ef8000UL,\n+    0x3fc9a0f8UL, 0x54466a6aUL, 0xbd002204UL, 0xb0ac2000UL, 0x3fc93baeUL,\n+    0xd601fd65UL, 0x3d18840cUL, 0x1bb9b000UL, 0x3fc8d71cUL, 0x7bf58766UL,\n+    0xbd14f897UL, 0x34aae800UL, 0x3fc8733eUL, 0x3af6ac24UL, 0xbd0f5c45UL,\n+    0x76d68000UL, 0x3fc81012UL, 0x4303e1a1UL, 0xbd1f9a80UL, 0x6af57800UL,\n+    0x3fc7ad96UL, 0x43fbcb46UL, 0x3cf4c33eUL, 0xa6c51000UL, 0x3fc74bc7UL,\n+    0x70f0eac5UL, 0xbd192e3bUL, 0xccab9800UL, 0x3fc6eaa3UL, 0xc0093dfeUL,\n+    0xbd0faf15UL, 0x8b60b800UL, 0x3fc68a28UL, 0xde78d5fdUL, 0xbc9ea4eeUL,\n+    0x9d987000UL, 0x3fc62a53UL, 0x962bea6eUL, 0xbd194084UL, 0xc9b0e800UL,\n+    0x3fc5cb22UL, 0x888dd999UL, 0x3d1fe201UL, 0xe1634800UL, 0x3fc56c93UL,\n+    0x16ada7adUL, 0x3d1b1188UL, 0xc176c000UL, 0x3fc50ea4UL, 0x4159b5b5UL,\n+    0xbcf09c08UL, 0x51766000UL, 0x3fc4b153UL, 0x84393d23UL, 0xbcf6a89cUL,\n+    0x83695000UL, 0x3fc4549dUL, 0x9f0b8bbbUL, 0x3d1c4b8cUL, 0x538d5800UL,\n+    0x3fc3f881UL, 0xf49df747UL, 0x3cf89b99UL, 0xc8138000UL, 0x3fc39cfcUL,\n+    0xd503b834UL, 0xbd13b99fUL, 0xf0df0800UL, 0x3fc3420dUL, 0xf011b386UL,\n+    0xbd05d8beUL, 0xe7466800UL, 0x3fc2e7b2UL, 0xf39c7bc2UL, 0xbd1bb94eUL,\n+    0xcdd62800UL, 0x3fc28de9UL, 0x05e6d69bUL, 0xbd10ed05UL, 0xd015d800UL,\n+    0x3fc234b0UL, 0xe29b6c9dUL, 0xbd1ff967UL, 0x224ea800UL, 0x3fc1dc06UL,\n+    0x727711fcUL, 0xbcffb30dUL, 0x01540000UL, 0x3fc183e8UL, 0x39786c5aUL,\n+    0x3cc23f57UL, 0xb24d9800UL, 0x3fc12c54UL, 0xc905a342UL, 0x3d003a1dUL,\n+    0x82835800UL, 0x3fc0d54aUL, 0x9b9920c0UL, 0x3d03b25aUL, 0xc72ac000UL,\n+    0x3fc07ec7UL, 0x46f26a24UL, 0x3cf0fa41UL, 0xdd35d800UL, 0x3fc028caUL,\n+    0x41d9d6dcUL, 0x3d034a65UL, 0x52474000UL, 0x3fbfa6a4UL, 0x44f66449UL,\n+    0x3d19cad3UL, 0x2da3d000UL, 0x3fbefcb8UL, 0x67832999UL, 0x3d18400fUL,\n+    0x32a10000UL, 0x3fbe53ceUL, 0x9c0e3b1aUL, 0xbcff62fdUL, 0x556b7000UL,\n+    0x3fbdabe3UL, 0x02976913UL, 0xbcf8243bUL, 0x97e88000UL, 0x3fbd04f4UL,\n+    0xec793797UL, 0x3d1c0578UL, 0x09647000UL, 0x3fbc5effUL, 0x05fc0565UL,\n+    0xbd1d799eUL, 0xc6426000UL, 0x3fbbb9ffUL, 0x4625f5edUL, 0x3d1f5723UL,\n+    0xf7afd000UL, 0x3fbb15f3UL, 0xdd5aae61UL, 0xbd1a7e1eUL, 0xd358b000UL,\n+    0x3fba72d8UL, 0x3314e4d3UL, 0x3d17bc91UL, 0x9b1f5000UL, 0x3fb9d0abUL,\n+    0x9a4d514bUL, 0x3cf18c9bUL, 0x9cd4e000UL, 0x3fb92f69UL, 0x7e4496abUL,\n+    0x3cf1f96dUL, 0x31f4f000UL, 0x3fb88f10UL, 0xf56479e7UL, 0x3d165818UL,\n+    0xbf628000UL, 0x3fb7ef9cUL, 0x26bf486dUL, 0xbd1113a6UL, 0xb526b000UL,\n+    0x3fb7510cUL, 0x1a1c3384UL, 0x3ca9898dUL, 0x8e31e000UL, 0x3fb6b35dUL,\n+    0xb3875361UL, 0xbd0661acUL, 0xd01de000UL, 0x3fb6168cUL, 0x2a7cacfaUL,\n+    0xbd1bdf10UL, 0x0af23000UL, 0x3fb57a98UL, 0xff868816UL, 0x3cf046d0UL,\n+    0xd8ea0000UL, 0x3fb4df7cUL, 0x1515fbe7UL, 0xbd1fd529UL, 0xde3b2000UL,\n+    0x3fb44538UL, 0x6e59a132UL, 0x3d1faeeeUL, 0xc8df9000UL, 0x3fb3abc9UL,\n+    0xf1322361UL, 0xbd198807UL, 0x505f1000UL, 0x3fb3132dUL, 0x0888e6abUL,\n+    0x3d1e5380UL, 0x359bd000UL, 0x3fb27b61UL, 0xdfbcbb22UL, 0xbcfe2724UL,\n+    0x429ee000UL, 0x3fb1e463UL, 0x6eb4c58cUL, 0xbcfe4dd6UL, 0x4a673000UL,\n+    0x3fb14e31UL, 0x4ce1ac9bUL, 0x3d1ba691UL, 0x28b96000UL, 0x3fb0b8c9UL,\n+    0x8c7813b8UL, 0xbd0b3872UL, 0xc1f08000UL, 0x3fb02428UL, 0xc2bc8c2cUL,\n+    0x3cb5ea6bUL, 0x05a1a000UL, 0x3faf209cUL, 0x72e8f18eUL, 0xbce8df84UL,\n+    0xc0b5e000UL, 0x3fadfa6dUL, 0x9fdef436UL, 0x3d087364UL, 0xaf416000UL,\n+    0x3facd5c2UL, 0x1068c3a9UL, 0x3d0827e7UL, 0xdb356000UL, 0x3fabb296UL,\n+    0x120a34d3UL, 0x3d101a9fUL, 0x5dfea000UL, 0x3faa90e6UL, 0xdaded264UL,\n+    0xbd14c392UL, 0x6034c000UL, 0x3fa970adUL, 0x1c9d06a9UL, 0xbd1b705eUL,\n+    0x194c6000UL, 0x3fa851e8UL, 0x83996ad9UL, 0xbd0117bcUL, 0xcf4ac000UL,\n+    0x3fa73492UL, 0xb1a94a62UL, 0xbca5ea42UL, 0xd67b4000UL, 0x3fa618a9UL,\n+    0x75aed8caUL, 0xbd07119bUL, 0x9126c000UL, 0x3fa4fe29UL, 0x5291d533UL,\n+    0x3d12658fUL, 0x6f4d4000UL, 0x3fa3e50eUL, 0xcd2c5cd9UL, 0x3d1d5c70UL,\n+    0xee608000UL, 0x3fa2cd54UL, 0xd1008489UL, 0x3d1a4802UL, 0x9900e000UL,\n+    0x3fa1b6f9UL, 0x54fb5598UL, 0xbd16593fUL, 0x06bb6000UL, 0x3fa0a1f9UL,\n+    0x64ef57b4UL, 0xbd17636bUL, 0xb7940000UL, 0x3f9f1c9fUL, 0xee6a4737UL,\n+    0x3cb5d479UL, 0x91aa0000UL, 0x3f9cf7f5UL, 0x3a16373cUL, 0x3d087114UL,\n+    0x156b8000UL, 0x3f9ad5edUL, 0x836c554aUL, 0x3c6900b0UL, 0xd4764000UL,\n+    0x3f98b67fUL, 0xed12f17bUL, 0xbcffc974UL, 0x77dec000UL, 0x3f9699a7UL,\n+    0x232ce7eaUL, 0x3d1e35bbUL, 0xbfbf4000UL, 0x3f947f5dUL, 0xd84ffa6eUL,\n+    0x3d0e0a49UL, 0x82c7c000UL, 0x3f92679cUL, 0x8d170e90UL, 0xbd14d9f2UL,\n+    0xadd20000UL, 0x3f90525dUL, 0x86d9f88eUL, 0x3cdeb986UL, 0x86f10000UL,\n+    0x3f8c7f36UL, 0xb9e0a517UL, 0x3ce29faaUL, 0xb75c8000UL, 0x3f885e9eUL,\n+    0x542568cbUL, 0xbd1f7bdbUL, 0x46b30000UL, 0x3f8442e8UL, 0xb954e7d9UL,\n+    0x3d1e5287UL, 0xb7e60000UL, 0x3f802c07UL, 0x22da0b17UL, 0xbd19fb27UL,\n+    0x6c8b0000UL, 0x3f7833e3UL, 0x821271efUL, 0xbd190f96UL, 0x29910000UL,\n+    0x3f701936UL, 0xbc3491a5UL, 0xbd1bcf45UL, 0x354a0000UL, 0x3f600fe3UL,\n+    0xc0ff520aUL, 0xbd19d71cUL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL\n+};\n+\n+ATTRIBUTE_ALIGNED(16) juint _log2_log10[] =\n+{\n+    0x509f7800UL, 0x3f934413UL, 0x1f12b358UL, 0x3cdfef31UL\n+};\n+\n+ATTRIBUTE_ALIGNED(16) juint _coeff_log10[] =\n+{\n+    0xc1a5f12eUL, 0x40358874UL, 0x64d4ef0dUL, 0xc0089309UL, 0x385593b1UL,\n+    0xc025c917UL, 0xdc963467UL, 0x3ffc6a02UL, 0x7f9d3aa1UL, 0x4016ab9fUL,\n+    0xdc77b115UL, 0xbff27af2UL\n+};\n+\n+address StubGenerator::generate_libmLog10() {\n+  StubCodeMark mark(this, \"StubRoutines\", \"libmLog10\");\n+  address start = __ pc();\n+\n+  Label L_2TAG_PACKET_0_0_2, L_2TAG_PACKET_1_0_2, L_2TAG_PACKET_2_0_2, L_2TAG_PACKET_3_0_2;\n+  Label L_2TAG_PACKET_4_0_2, L_2TAG_PACKET_5_0_2, L_2TAG_PACKET_6_0_2, L_2TAG_PACKET_7_0_2;\n+  Label L_2TAG_PACKET_8_0_2, L_2TAG_PACKET_9_0_2, B1_2, B1_3, B1_5;\n+\n+  address HIGHSIGMASK = (address)_HIGHSIGMASK_log10;\n+  address LOG10_E = (address)_LOG10_E;\n+  address L_tbl = (address)_L_tbl_log10;\n+  address log2 = (address)_log2_log10;\n+  address coeff = (address)_coeff_log10;\n+\n+  __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+\n+  __ subq(rsp, 24);\n+  __ movsd(Address(rsp, 0), xmm0);\n+\n+  __ bind(B1_2);\n+  __ xorpd(xmm2, xmm2);\n+  __ movl(rax, 16368);\n+  __ pinsrw(xmm2, rax, 3);\n+  __ movl(rcx, 1054736384);\n+  __ movdl(xmm7, rcx);\n+  __ xorpd(xmm3, xmm3);\n+  __ movl(rdx, 30704);\n+  __ pinsrw(xmm3, rdx, 3);\n+  __ movdqu(xmm1, xmm0);\n+  __ movl(rdx, 32768);\n+  __ movdl(xmm4, rdx);\n+  __ movdqu(xmm5, ExternalAddress(HIGHSIGMASK), r8 \/*rscratch*\/);    \/\/0xf8000000UL, 0xffffffffUL, 0x00000000UL, 0xffffe000UL\n+  __ pextrw(rax, xmm0, 3);\n+  __ por(xmm0, xmm2);\n+  __ movl(rcx, 16352);\n+  __ psrlq(xmm0, 27);\n+  __ movdqu(xmm2, ExternalAddress(LOG10_E), r8 \/*rscratch*\/);    \/\/0x00000000UL, 0x3fdbc000UL, 0xbf2e4108UL, 0x3f5a7a6cUL\n+  __ psrld(xmm0, 2);\n+  __ rcpps(xmm0, xmm0);\n+  __ psllq(xmm1, 12);\n+  __ pshufd(xmm6, xmm5, 78);\n+  __ psrlq(xmm1, 12);\n+  __ subl(rax, 16);\n+  __ cmpl(rax, 32736);\n+  __ jcc(Assembler::aboveEqual, L_2TAG_PACKET_0_0_2);\n+\n+  __ bind(L_2TAG_PACKET_1_0_2);\n+  __ mulss(xmm0, xmm7);\n+  __ por(xmm1, xmm3);\n+  __ lea(r11, ExternalAddress(L_tbl));\n+  __ andpd(xmm5, xmm1);\n+  __ paddd(xmm0, xmm4);\n+  __ subsd(xmm1, xmm5);\n+  __ movdl(rdx, xmm0);\n+  __ psllq(xmm0, 29);\n+  __ andpd(xmm0, xmm6);\n+  __ andl(rax, 32752);\n+  __ subl(rax, rcx);\n+  __ cvtsi2sdl(xmm7, rax);\n+  __ mulpd(xmm5, xmm0);\n+  __ mulsd(xmm1, xmm0);\n+  __ movq(xmm6, ExternalAddress(log2), r8 \/*rscratch*\/);    \/\/0x509f7800UL, 0x3f934413UL, 0x1f12b358UL, 0x3cdfef31UL\n+  __ movdqu(xmm3, ExternalAddress(coeff), r8 \/*rscratch*\/);    \/\/0xc1a5f12eUL, 0x40358874UL, 0x64d4ef0dUL, 0xc0089309UL\n+  __ subsd(xmm5, xmm2);\n+  __ andl(rdx, 16711680);\n+  __ shrl(rdx, 12);\n+  __ movdqu(xmm0, Address(r11, rdx, Address::times_1, -1504));\n+  __ movdqu(xmm4, ExternalAddress(coeff + 16), r8 \/*rscratch*\/);    \/\/0x385593b1UL, 0xc025c917UL, 0xdc963467UL, 0x3ffc6a02UL\n+  __ addsd(xmm1, xmm5);\n+  __ movdqu(xmm2, ExternalAddress(coeff + 32), r8 \/*rscratch*\/);    \/\/0x7f9d3aa1UL, 0x4016ab9fUL, 0xdc77b115UL, 0xbff27af2UL\n+  __ mulsd(xmm6, xmm7);\n+  __ pshufd(xmm5, xmm1, 68);\n+  __ mulsd(xmm7, ExternalAddress(log2 + 8), r8 \/*rscratch*\/);    \/\/0x1f12b358UL, 0x3cdfef31UL\n+  __ mulsd(xmm3, xmm1);\n+  __ addsd(xmm0, xmm6);\n+  __ mulpd(xmm4, xmm5);\n+  __ movq(xmm6, ExternalAddress(LOG10_E + 8), r8 \/*rscratch*\/);    \/\/0xbf2e4108UL, 0x3f5a7a6cUL\n+  __ mulpd(xmm5, xmm5);\n+  __ addpd(xmm4, xmm2);\n+  __ mulpd(xmm3, xmm5);\n+  __ pshufd(xmm2, xmm0, 228);\n+  __ addsd(xmm0, xmm1);\n+  __ mulsd(xmm4, xmm1);\n+  __ subsd(xmm2, xmm0);\n+  __ mulsd(xmm6, xmm1);\n+  __ addsd(xmm1, xmm2);\n+  __ pshufd(xmm2, xmm0, 238);\n+  __ mulsd(xmm5, xmm5);\n+  __ addsd(xmm7, xmm2);\n+  __ addsd(xmm1, xmm6);\n+  __ addpd(xmm4, xmm3);\n+  __ addsd(xmm1, xmm7);\n+  __ mulpd(xmm4, xmm5);\n+  __ addsd(xmm1, xmm4);\n+  __ pshufd(xmm5, xmm4, 238);\n+  __ addsd(xmm1, xmm5);\n+  __ addsd(xmm0, xmm1);\n+  __ jmp(B1_5);\n+\n+  __ bind(L_2TAG_PACKET_0_0_2);\n+  __ movq(xmm0, Address(rsp, 0));\n+  __ movq(xmm1, Address(rsp, 0));\n+  __ addl(rax, 16);\n+  __ cmpl(rax, 32768);\n+  __ jcc(Assembler::aboveEqual, L_2TAG_PACKET_2_0_2);\n+  __ cmpl(rax, 16);\n+  __ jcc(Assembler::below, L_2TAG_PACKET_3_0_2);\n+\n+  __ bind(L_2TAG_PACKET_4_0_2);\n+  __ addsd(xmm0, xmm0);\n+  __ jmp(B1_5);\n+\n+  __ bind(L_2TAG_PACKET_5_0_2);\n+  __ jcc(Assembler::above, L_2TAG_PACKET_4_0_2);\n+  __ cmpl(rdx, 0);\n+  __ jcc(Assembler::above, L_2TAG_PACKET_4_0_2);\n+  __ jmp(L_2TAG_PACKET_6_0_2);\n+\n+  __ bind(L_2TAG_PACKET_3_0_2);\n+  __ xorpd(xmm1, xmm1);\n+  __ addsd(xmm1, xmm0);\n+  __ movdl(rdx, xmm1);\n+  __ psrlq(xmm1, 32);\n+  __ movdl(rcx, xmm1);\n+  __ orl(rdx, rcx);\n+  __ cmpl(rdx, 0);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_7_0_2);\n+  __ xorpd(xmm1, xmm1);\n+  __ movl(rax, 18416);\n+  __ pinsrw(xmm1, rax, 3);\n+  __ mulsd(xmm0, xmm1);\n+  __ xorpd(xmm2, xmm2);\n+  __ movl(rax, 16368);\n+  __ pinsrw(xmm2, rax, 3);\n+  __ movdqu(xmm1, xmm0);\n+  __ pextrw(rax, xmm0, 3);\n+  __ por(xmm0, xmm2);\n+  __ movl(rcx, 18416);\n+  __ psrlq(xmm0, 27);\n+  __ movdqu(xmm2, ExternalAddress(LOG10_E), r8 \/*rscratch*\/);    \/\/0x00000000UL, 0x3fdbc000UL, 0xbf2e4108UL, 0x3f5a7a6cUL\n+  __ psrld(xmm0, 2);\n+  __ rcpps(xmm0, xmm0);\n+  __ psllq(xmm1, 12);\n+  __ pshufd(xmm6, xmm5, 78);\n+  __ psrlq(xmm1, 12);\n+  __ jmp(L_2TAG_PACKET_1_0_2);\n+\n+  __ bind(L_2TAG_PACKET_2_0_2);\n+  __ movdl(rdx, xmm1);\n+  __ psrlq(xmm1, 32);\n+  __ movdl(rcx, xmm1);\n+  __ addl(rcx, rcx);\n+  __ cmpl(rcx, -2097152);\n+  __ jcc(Assembler::aboveEqual, L_2TAG_PACKET_5_0_2);\n+  __ orl(rdx, rcx);\n+  __ cmpl(rdx, 0);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_7_0_2);\n+\n+  __ bind(L_2TAG_PACKET_6_0_2);\n+  __ xorpd(xmm1, xmm1);\n+  __ xorpd(xmm0, xmm0);\n+  __ movl(rax, 32752);\n+  __ pinsrw(xmm1, rax, 3);\n+  __ mulsd(xmm0, xmm1);\n+  __ movl(Address(rsp, 16), 9);\n+  __ jmp(L_2TAG_PACKET_8_0_2);\n+\n+  __ bind(L_2TAG_PACKET_7_0_2);\n+  __ xorpd(xmm1, xmm1);\n+  __ xorpd(xmm0, xmm0);\n+  __ movl(rax, 49136);\n+  __ pinsrw(xmm0, rax, 3);\n+  __ divsd(xmm0, xmm1);\n+  __ movl(Address(rsp, 16), 8);\n+\n+  __ bind(L_2TAG_PACKET_8_0_2);\n+  __ movq(Address(rsp, 8), xmm0);\n+\n+  __ bind(B1_3);\n+  __ movq(xmm0, Address(rsp, 8));\n+\n+  __ bind(L_2TAG_PACKET_9_0_2);\n+\n+  __ bind(B1_5);\n+  __ addq(rsp, 24);\n+\n+  __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ ret(0);\n+\n+  return start;\n+}\n+\n+#undef __\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_log.cpp","additions":709,"deletions":0,"binary":false,"changes":709,"status":"added"},{"patch":"@@ -0,0 +1,1865 @@\n+\/*\n+* Copyright (c) 2016, 2021, Intel Corporation. All rights reserved.\n+* Copyright (C) 2021 THL A29 Limited, a Tencent company. All rights reserved.\n+* Intel Math Library (LIBM) Source Code\n+*\n+* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+*\n+* This code is free software; you can redistribute it and\/or modify it\n+* under the terms of the GNU General Public License version 2 only, as\n+* published by the Free Software Foundation.\n+*\n+* This code is distributed in the hope that it will be useful, but WITHOUT\n+* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+* version 2 for more details (a copy is included in the LICENSE file that\n+* accompanied this code).\n+*\n+* You should have received a copy of the GNU General Public License version\n+* 2 along with this work; if not, write to the Free Software Foundation,\n+* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+*\n+* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+* or visit www.oracle.com if you need additional information or have any\n+* questions.\n+*\n+*\/\n+\n+#include \"precompiled.hpp\"\n+#include \"macroAssembler_x86.hpp\"\n+#include \"stubGenerator_x86_64.hpp\"\n+\n+\/******************************************************************************\/\n+\/\/                     ALGORITHM DESCRIPTION  - POW()\n+\/\/                     ---------------------\n+\/\/\n+\/\/    Let x=2^k * mx, mx in [1,2)\n+\/\/\n+\/\/    log2(x) calculation:\n+\/\/\n+\/\/    Get B~1\/mx based on the output of rcpps instruction (B0)\n+\/\/    B = int((B0*LH*2^9+0.5))\/2^9\n+\/\/    LH is a short approximation for log2(e)\n+\/\/\n+\/\/    Reduced argument, scaled by LH:\n+\/\/                r=B*mx-LH (computed accurately in high and low parts)\n+\/\/\n+\/\/    log2(x) result:  k - log2(B) + p(r)\n+\/\/             p(r) is a degree 8 polynomial\n+\/\/             -log2(B) read from data table (high, low parts)\n+\/\/             log2(x) is formed from high and low parts\n+\/\/    For |x| in [1-1\/32, 1+1\/16), a slower but more accurate computation\n+\/\/    based om the same table design is performed.\n+\/\/\n+\/\/   Main path is taken if | floor(log2(|log2(|x|)|) + floor(log2|y|) | < 8,\n+\/\/   to filter out all potential OF\/UF cases.\n+\/\/   exp2(y*log2(x)) is computed using an 8-bit index table and a degree 5\n+\/\/   polynomial\n+\/\/\n+\/\/ Special cases:\n+\/\/  pow(-0,y) = -INF and raises the divide-by-zero exception for y an odd\n+\/\/  integer < 0.\n+\/\/  pow(-0,y) = +INF and raises the divide-by-zero exception for y < 0 and\n+\/\/  not an odd integer.\n+\/\/  pow(-0,y) = -0 for y an odd integer > 0.\n+\/\/  pow(-0,y) = +0 for y > 0 and not an odd integer.\n+\/\/  pow(-1,-INF) = NaN.\n+\/\/  pow(+1,y) = NaN for any y, even a NaN.\n+\/\/  pow(x,-0) = 1 for any x, even a NaN.\n+\/\/  pow(x,y) = a NaN and raises the invalid exception for finite x < 0 and\n+\/\/  finite non-integer y.\n+\/\/  pow(x,-INF) = +INF for |x|<1.\n+\/\/  pow(x,-INF) = +0 for |x|>1.\n+\/\/  pow(x,+INF) = +0 for |x|<1.\n+\/\/  pow(x,+INF) = +INF for |x|>1.\n+\/\/  pow(-INF,y) = -0 for y an odd integer < 0.\n+\/\/  pow(-INF,y) = +0 for y < 0 and not an odd integer.\n+\/\/  pow(-INF,y) = -INF for y an odd integer > 0.\n+\/\/  pow(-INF,y) = +INF for y > 0 and not an odd integer.\n+\/\/  pow(+INF,y) = +0 for y <0.\n+\/\/  pow(+INF,y) = +INF for y >0.\n+\/\/\n+\/******************************************************************************\/\n+\n+ATTRIBUTE_ALIGNED(16) juint _HIGHSIGMASK[] = {\n+    0x00000000UL, 0xfffff800UL, 0x00000000UL, 0xfffff800UL\n+};\n+\n+ATTRIBUTE_ALIGNED(16) juint _LOG2_E[] = {\n+    0x00000000UL, 0x3ff72000UL, 0x161bb241UL, 0xbf5dabe1UL\n+};\n+\n+ATTRIBUTE_ALIGNED(16) juint _HIGHMASK_Y[] = {\n+    0x00000000UL, 0xfffffff8UL, 0x00000000UL, 0xffffffffUL\n+};\n+\n+ATTRIBUTE_ALIGNED(16) juint _T_exp[] = {\n+    0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0x3b700000UL, 0xfa5abcbfUL,\n+    0x3ff00b1aUL, 0xa7609f71UL, 0xbc84f6b2UL, 0xa9fb3335UL, 0x3ff0163dUL,\n+    0x9ab8cdb7UL, 0x3c9b6129UL, 0x143b0281UL, 0x3ff02168UL, 0x0fc54eb6UL,\n+    0xbc82bf31UL, 0x3e778061UL, 0x3ff02c9aUL, 0x535b085dUL, 0xbc719083UL,\n+    0x2e11bbccUL, 0x3ff037d4UL, 0xeeade11aUL, 0x3c656811UL, 0xe86e7f85UL,\n+    0x3ff04315UL, 0x1977c96eUL, 0xbc90a31cUL, 0x72f654b1UL, 0x3ff04e5fUL,\n+    0x3aa0d08cUL, 0x3c84c379UL, 0xd3158574UL, 0x3ff059b0UL, 0xa475b465UL,\n+    0x3c8d73e2UL, 0x0e3c1f89UL, 0x3ff0650aUL, 0x5799c397UL, 0xbc95cb7bUL,\n+    0x29ddf6deUL, 0x3ff0706bUL, 0xe2b13c27UL, 0xbc8c91dfUL, 0x2b72a836UL,\n+    0x3ff07bd4UL, 0x54458700UL, 0x3c832334UL, 0x18759bc8UL, 0x3ff08745UL,\n+    0x4bb284ffUL, 0x3c6186beUL, 0xf66607e0UL, 0x3ff092bdUL, 0x800a3fd1UL,\n+    0xbc968063UL, 0xcac6f383UL, 0x3ff09e3eUL, 0x18316136UL, 0x3c914878UL,\n+    0x9b1f3919UL, 0x3ff0a9c7UL, 0x873d1d38UL, 0x3c85d16cUL, 0x6cf9890fUL,\n+    0x3ff0b558UL, 0x4adc610bUL, 0x3c98a62eUL, 0x45e46c85UL, 0x3ff0c0f1UL,\n+    0x06d21cefUL, 0x3c94f989UL, 0x2b7247f7UL, 0x3ff0cc92UL, 0x16e24f71UL,\n+    0x3c901edcUL, 0x23395decUL, 0x3ff0d83bUL, 0xe43f316aUL, 0xbc9bc14dUL,\n+    0x32d3d1a2UL, 0x3ff0e3ecUL, 0x27c57b52UL, 0x3c403a17UL, 0x5fdfa9c5UL,\n+    0x3ff0efa5UL, 0xbc54021bUL, 0xbc949db9UL, 0xaffed31bUL, 0x3ff0fb66UL,\n+    0xc44ebd7bUL, 0xbc6b9bedUL, 0x28d7233eUL, 0x3ff10730UL, 0x1692fdd5UL,\n+    0x3c8d46ebUL, 0xd0125b51UL, 0x3ff11301UL, 0x39449b3aUL, 0xbc96c510UL,\n+    0xab5e2ab6UL, 0x3ff11edbUL, 0xf703fb72UL, 0xbc9ca454UL, 0xc06c31ccUL,\n+    0x3ff12abdUL, 0xb36ca5c7UL, 0xbc51b514UL, 0x14f204abUL, 0x3ff136a8UL,\n+    0xba48dcf0UL, 0xbc67108fUL, 0xaea92de0UL, 0x3ff1429aUL, 0x9af1369eUL,\n+    0xbc932fbfUL, 0x934f312eUL, 0x3ff14e95UL, 0x39bf44abUL, 0xbc8b91e8UL,\n+    0xc8a58e51UL, 0x3ff15a98UL, 0xb9eeab0aUL, 0x3c82406aUL, 0x5471c3c2UL,\n+    0x3ff166a4UL, 0x82ea1a32UL, 0x3c58f23bUL, 0x3c7d517bUL, 0x3ff172b8UL,\n+    0xb9d78a76UL, 0xbc819041UL, 0x8695bbc0UL, 0x3ff17ed4UL, 0xe2ac5a64UL,\n+    0x3c709e3fUL, 0x388c8deaUL, 0x3ff18af9UL, 0xd1970f6cUL, 0xbc911023UL,\n+    0x58375d2fUL, 0x3ff19726UL, 0x85f17e08UL, 0x3c94aaddUL, 0xeb6fcb75UL,\n+    0x3ff1a35bUL, 0x7b4968e4UL, 0x3c8e5b4cUL, 0xf8138a1cUL, 0x3ff1af99UL,\n+    0xa4b69280UL, 0x3c97bf85UL, 0x84045cd4UL, 0x3ff1bbe0UL, 0x352ef607UL,\n+    0xbc995386UL, 0x95281c6bUL, 0x3ff1c82fUL, 0x8010f8c9UL, 0x3c900977UL,\n+    0x3168b9aaUL, 0x3ff1d487UL, 0x00a2643cUL, 0x3c9e016eUL, 0x5eb44027UL,\n+    0x3ff1e0e7UL, 0x088cb6deUL, 0xbc96fdd8UL, 0x22fcd91dUL, 0x3ff1ed50UL,\n+    0x027bb78cUL, 0xbc91df98UL, 0x8438ce4dUL, 0x3ff1f9c1UL, 0xa097af5cUL,\n+    0xbc9bf524UL, 0x88628cd6UL, 0x3ff2063bUL, 0x814a8495UL, 0x3c8dc775UL,\n+    0x3578a819UL, 0x3ff212beUL, 0x2cfcaac9UL, 0x3c93592dUL, 0x917ddc96UL,\n+    0x3ff21f49UL, 0x9494a5eeUL, 0x3c82a97eUL, 0xa27912d1UL, 0x3ff22bddUL,\n+    0x5577d69fUL, 0x3c8d34fbUL, 0x6e756238UL, 0x3ff2387aUL, 0xb6c70573UL,\n+    0x3c99b07eUL, 0xfb82140aUL, 0x3ff2451fUL, 0x911ca996UL, 0x3c8acfccUL,\n+    0x4fb2a63fUL, 0x3ff251ceUL, 0xbef4f4a4UL, 0x3c8ac155UL, 0x711ece75UL,\n+    0x3ff25e85UL, 0x4ac31b2cUL, 0x3c93e1a2UL, 0x65e27cddUL, 0x3ff26b45UL,\n+    0x9940e9d9UL, 0x3c82bd33UL, 0x341ddf29UL, 0x3ff2780eUL, 0x05f9e76cUL,\n+    0x3c9e067cUL, 0xe1f56381UL, 0x3ff284dfUL, 0x8c3f0d7eUL, 0xbc9a4c3aUL,\n+    0x7591bb70UL, 0x3ff291baUL, 0x28401cbdUL, 0xbc82cc72UL, 0xf51fdee1UL,\n+    0x3ff29e9dUL, 0xafad1255UL, 0x3c8612e8UL, 0x66d10f13UL, 0x3ff2ab8aUL,\n+    0x191690a7UL, 0xbc995743UL, 0xd0dad990UL, 0x3ff2b87fUL, 0xd6381aa4UL,\n+    0xbc410adcUL, 0x39771b2fUL, 0x3ff2c57eUL, 0xa6eb5124UL, 0xbc950145UL,\n+    0xa6e4030bUL, 0x3ff2d285UL, 0x54db41d5UL, 0x3c900247UL, 0x1f641589UL,\n+    0x3ff2df96UL, 0xfbbce198UL, 0x3c9d16cfUL, 0xa93e2f56UL, 0x3ff2ecafUL,\n+    0x45d52383UL, 0x3c71ca0fUL, 0x4abd886bUL, 0x3ff2f9d2UL, 0x532bda93UL,\n+    0xbc653c55UL, 0x0a31b715UL, 0x3ff306feUL, 0xd23182e4UL, 0x3c86f46aUL,\n+    0xedeeb2fdUL, 0x3ff31432UL, 0xf3f3fcd1UL, 0x3c8959a3UL, 0xfc4cd831UL,\n+    0x3ff32170UL, 0x8e18047cUL, 0x3c8a9ce7UL, 0x3ba8ea32UL, 0x3ff32eb8UL,\n+    0x3cb4f318UL, 0xbc9c45e8UL, 0xb26416ffUL, 0x3ff33c08UL, 0x843659a6UL,\n+    0x3c932721UL, 0x66e3fa2dUL, 0x3ff34962UL, 0x930881a4UL, 0xbc835a75UL,\n+    0x5f929ff1UL, 0x3ff356c5UL, 0x5c4e4628UL, 0xbc8b5ceeUL, 0xa2de883bUL,\n+    0x3ff36431UL, 0xa06cb85eUL, 0xbc8c3144UL, 0x373aa9cbUL, 0x3ff371a7UL,\n+    0xbf42eae2UL, 0xbc963aeaUL, 0x231e754aUL, 0x3ff37f26UL, 0x9eceb23cUL,\n+    0xbc99f5caUL, 0x6d05d866UL, 0x3ff38caeUL, 0x3c9904bdUL, 0xbc9e958dUL,\n+    0x1b7140efUL, 0x3ff39a40UL, 0xfc8e2934UL, 0xbc99a9a5UL, 0x34e59ff7UL,\n+    0x3ff3a7dbUL, 0xd661f5e3UL, 0xbc75e436UL, 0xbfec6cf4UL, 0x3ff3b57fUL,\n+    0xe26fff18UL, 0x3c954c66UL, 0xc313a8e5UL, 0x3ff3c32dUL, 0x375d29c3UL,\n+    0xbc9efff8UL, 0x44ede173UL, 0x3ff3d0e5UL, 0x8c284c71UL, 0x3c7fe8d0UL,\n+    0x4c123422UL, 0x3ff3dea6UL, 0x11f09ebcUL, 0x3c8ada09UL, 0xdf1c5175UL,\n+    0x3ff3ec70UL, 0x7b8c9bcaUL, 0xbc8af663UL, 0x04ac801cUL, 0x3ff3fa45UL,\n+    0xf956f9f3UL, 0xbc97d023UL, 0xc367a024UL, 0x3ff40822UL, 0xb6f4d048UL,\n+    0x3c8bddf8UL, 0x21f72e2aUL, 0x3ff4160aUL, 0x1c309278UL, 0xbc5ef369UL,\n+    0x2709468aUL, 0x3ff423fbUL, 0xc0b314ddUL, 0xbc98462dUL, 0xd950a897UL,\n+    0x3ff431f5UL, 0xe35f7999UL, 0xbc81c7ddUL, 0x3f84b9d4UL, 0x3ff43ffaUL,\n+    0x9704c003UL, 0x3c8880beUL, 0x6061892dUL, 0x3ff44e08UL, 0x04ef80d0UL,\n+    0x3c489b7aUL, 0x42a7d232UL, 0x3ff45c20UL, 0x82fb1f8eUL, 0xbc686419UL,\n+    0xed1d0057UL, 0x3ff46a41UL, 0xd1648a76UL, 0x3c9c944bUL, 0x668b3237UL,\n+    0x3ff4786dUL, 0xed445733UL, 0xbc9c20f0UL, 0xb5c13cd0UL, 0x3ff486a2UL,\n+    0xb69062f0UL, 0x3c73c1a3UL, 0xe192aed2UL, 0x3ff494e1UL, 0x5e499ea0UL,\n+    0xbc83b289UL, 0xf0d7d3deUL, 0x3ff4a32aUL, 0xf3d1be56UL, 0x3c99cb62UL,\n+    0xea6db7d7UL, 0x3ff4b17dUL, 0x7f2897f0UL, 0xbc8125b8UL, 0xd5362a27UL,\n+    0x3ff4bfdaUL, 0xafec42e2UL, 0x3c7d4397UL, 0xb817c114UL, 0x3ff4ce41UL,\n+    0x690abd5dUL, 0x3c905e29UL, 0x99fddd0dUL, 0x3ff4dcb2UL, 0xbc6a7833UL,\n+    0x3c98ecdbUL, 0x81d8abffUL, 0x3ff4eb2dUL, 0x2e5d7a52UL, 0xbc95257dUL,\n+    0x769d2ca7UL, 0x3ff4f9b2UL, 0xd25957e3UL, 0xbc94b309UL, 0x7f4531eeUL,\n+    0x3ff50841UL, 0x49b7465fUL, 0x3c7a249bUL, 0xa2cf6642UL, 0x3ff516daUL,\n+    0x69bd93efUL, 0xbc8f7685UL, 0xe83f4eefUL, 0x3ff5257dUL, 0x43efef71UL,\n+    0xbc7c998dUL, 0x569d4f82UL, 0x3ff5342bUL, 0x1db13cadUL, 0xbc807abeUL,\n+    0xf4f6ad27UL, 0x3ff542e2UL, 0x192d5f7eUL, 0x3c87926dUL, 0xca5d920fUL,\n+    0x3ff551a4UL, 0xefede59bUL, 0xbc8d689cUL, 0xdde910d2UL, 0x3ff56070UL,\n+    0x168eebf0UL, 0xbc90fb6eUL, 0x36b527daUL, 0x3ff56f47UL, 0x011d93adUL,\n+    0x3c99bb2cUL, 0xdbe2c4cfUL, 0x3ff57e27UL, 0x8a57b9c4UL, 0xbc90b98cUL,\n+    0xd497c7fdUL, 0x3ff58d12UL, 0x5b9a1de8UL, 0x3c8295e1UL, 0x27ff07ccUL,\n+    0x3ff59c08UL, 0xe467e60fUL, 0xbc97e2ceUL, 0xdd485429UL, 0x3ff5ab07UL,\n+    0x054647adUL, 0x3c96324cUL, 0xfba87a03UL, 0x3ff5ba11UL, 0x4c233e1aUL,\n+    0xbc9b77a1UL, 0x8a5946b7UL, 0x3ff5c926UL, 0x816986a2UL, 0x3c3c4b1bUL,\n+    0x90998b93UL, 0x3ff5d845UL, 0xa8b45643UL, 0xbc9cd6a7UL, 0x15ad2148UL,\n+    0x3ff5e76fUL, 0x3080e65eUL, 0x3c9ba6f9UL, 0x20dceb71UL, 0x3ff5f6a3UL,\n+    0xe3cdcf92UL, 0xbc89eaddUL, 0xb976dc09UL, 0x3ff605e1UL, 0x9b56de47UL,\n+    0xbc93e242UL, 0xe6cdf6f4UL, 0x3ff6152aUL, 0x4ab84c27UL, 0x3c9e4b3eUL,\n+    0xb03a5585UL, 0x3ff6247eUL, 0x7e40b497UL, 0xbc9383c1UL, 0x1d1929fdUL,\n+    0x3ff633ddUL, 0xbeb964e5UL, 0x3c984710UL, 0x34ccc320UL, 0x3ff64346UL,\n+    0x759d8933UL, 0xbc8c483cUL, 0xfebc8fb7UL, 0x3ff652b9UL, 0xc9a73e09UL,\n+    0xbc9ae3d5UL, 0x82552225UL, 0x3ff66238UL, 0x87591c34UL, 0xbc9bb609UL,\n+    0xc70833f6UL, 0x3ff671c1UL, 0x586c6134UL, 0xbc8e8732UL, 0xd44ca973UL,\n+    0x3ff68155UL, 0x44f73e65UL, 0x3c6038aeUL, 0xb19e9538UL, 0x3ff690f4UL,\n+    0x9aeb445dUL, 0x3c8804bdUL, 0x667f3bcdUL, 0x3ff6a09eUL, 0x13b26456UL,\n+    0xbc9bdd34UL, 0xfa75173eUL, 0x3ff6b052UL, 0x2c9a9d0eUL, 0x3c7a38f5UL,\n+    0x750bdabfUL, 0x3ff6c012UL, 0x67ff0b0dUL, 0xbc728956UL, 0xddd47645UL,\n+    0x3ff6cfdcUL, 0xb6f17309UL, 0x3c9c7aa9UL, 0x3c651a2fUL, 0x3ff6dfb2UL,\n+    0x683c88abUL, 0xbc6bbe3aUL, 0x98593ae5UL, 0x3ff6ef92UL, 0x9e1ac8b2UL,\n+    0xbc90b974UL, 0xf9519484UL, 0x3ff6ff7dUL, 0x25860ef6UL, 0xbc883c0fUL,\n+    0x66f42e87UL, 0x3ff70f74UL, 0xd45aa65fUL, 0x3c59d644UL, 0xe8ec5f74UL,\n+    0x3ff71f75UL, 0x86887a99UL, 0xbc816e47UL, 0x86ead08aUL, 0x3ff72f82UL,\n+    0x2cd62c72UL, 0xbc920aa0UL, 0x48a58174UL, 0x3ff73f9aUL, 0x6c65d53cUL,\n+    0xbc90a8d9UL, 0x35d7cbfdUL, 0x3ff74fbdUL, 0x618a6e1cUL, 0x3c9047fdUL,\n+    0x564267c9UL, 0x3ff75febUL, 0x57316dd3UL, 0xbc902459UL, 0xb1ab6e09UL,\n+    0x3ff77024UL, 0x169147f8UL, 0x3c9b7877UL, 0x4fde5d3fUL, 0x3ff78069UL,\n+    0x0a02162dUL, 0x3c9866b8UL, 0x38ac1cf6UL, 0x3ff790b9UL, 0x62aadd3eUL,\n+    0x3c9349a8UL, 0x73eb0187UL, 0x3ff7a114UL, 0xee04992fUL, 0xbc841577UL,\n+    0x0976cfdbUL, 0x3ff7b17bUL, 0x8468dc88UL, 0xbc9bebb5UL, 0x0130c132UL,\n+    0x3ff7c1edUL, 0xd1164dd6UL, 0x3c9f124cUL, 0x62ff86f0UL, 0x3ff7d26aUL,\n+    0xfb72b8b4UL, 0x3c91bddbUL, 0x36cf4e62UL, 0x3ff7e2f3UL, 0xba15797eUL,\n+    0x3c705d02UL, 0x8491c491UL, 0x3ff7f387UL, 0xcf9311aeUL, 0xbc807f11UL,\n+    0x543e1a12UL, 0x3ff80427UL, 0x626d972bUL, 0xbc927c86UL, 0xadd106d9UL,\n+    0x3ff814d2UL, 0x0d151d4dUL, 0x3c946437UL, 0x994cce13UL, 0x3ff82589UL,\n+    0xd41532d8UL, 0xbc9d4c1dUL, 0x1eb941f7UL, 0x3ff8364cUL, 0x31df2bd5UL,\n+    0x3c999b9aUL, 0x4623c7adUL, 0x3ff8471aUL, 0xa341cdfbUL, 0xbc88d684UL,\n+    0x179f5b21UL, 0x3ff857f4UL, 0xf8b216d0UL, 0xbc5ba748UL, 0x9b4492edUL,\n+    0x3ff868d9UL, 0x9bd4f6baUL, 0xbc9fc6f8UL, 0xd931a436UL, 0x3ff879caUL,\n+    0xd2db47bdUL, 0x3c85d2d7UL, 0xd98a6699UL, 0x3ff88ac7UL, 0xf37cb53aUL,\n+    0x3c9994c2UL, 0xa478580fUL, 0x3ff89bd0UL, 0x4475202aUL, 0x3c9d5395UL,\n+    0x422aa0dbUL, 0x3ff8ace5UL, 0x56864b27UL, 0x3c96e9f1UL, 0xbad61778UL,\n+    0x3ff8be05UL, 0xfc43446eUL, 0x3c9ecb5eUL, 0x16b5448cUL, 0x3ff8cf32UL,\n+    0x32e9e3aaUL, 0xbc70d55eUL, 0x5e0866d9UL, 0x3ff8e06aUL, 0x6fc9b2e6UL,\n+    0xbc97114aUL, 0x99157736UL, 0x3ff8f1aeUL, 0xa2e3976cUL, 0x3c85cc13UL,\n+    0xd0282c8aUL, 0x3ff902feUL, 0x85fe3fd2UL, 0x3c9592caUL, 0x0b91ffc6UL,\n+    0x3ff9145bUL, 0x2e582524UL, 0xbc9dd679UL, 0x53aa2fe2UL, 0x3ff925c3UL,\n+    0xa639db7fUL, 0xbc83455fUL, 0xb0cdc5e5UL, 0x3ff93737UL, 0x81b57ebcUL,\n+    0xbc675fc7UL, 0x2b5f98e5UL, 0x3ff948b8UL, 0x797d2d99UL, 0xbc8dc3d6UL,\n+    0xcbc8520fUL, 0x3ff95a44UL, 0x96a5f039UL, 0xbc764b7cUL, 0x9a7670b3UL,\n+    0x3ff96bddUL, 0x7f19c896UL, 0xbc5ba596UL, 0x9fde4e50UL, 0x3ff97d82UL,\n+    0x7c1b85d1UL, 0xbc9d185bUL, 0xe47a22a2UL, 0x3ff98f33UL, 0xa24c78ecUL,\n+    0x3c7cabdaUL, 0x70ca07baUL, 0x3ff9a0f1UL, 0x91cee632UL, 0xbc9173bdUL,\n+    0x4d53fe0dUL, 0x3ff9b2bbUL, 0x4df6d518UL, 0xbc9dd84eUL, 0x82a3f090UL,\n+    0x3ff9c491UL, 0xb071f2beUL, 0x3c7c7c46UL, 0x194bb8d5UL, 0x3ff9d674UL,\n+    0xa3dd8233UL, 0xbc9516beUL, 0x19e32323UL, 0x3ff9e863UL, 0x78e64c6eUL,\n+    0x3c7824caUL, 0x8d07f29eUL, 0x3ff9fa5eUL, 0xaaf1faceUL, 0xbc84a9ceUL,\n+    0x7b5de565UL, 0x3ffa0c66UL, 0x5d1cd533UL, 0xbc935949UL, 0xed8eb8bbUL,\n+    0x3ffa1e7aUL, 0xee8be70eUL, 0x3c9c6618UL, 0xec4a2d33UL, 0x3ffa309bUL,\n+    0x7ddc36abUL, 0x3c96305cUL, 0x80460ad8UL, 0x3ffa42c9UL, 0x589fb120UL,\n+    0xbc9aa780UL, 0xb23e255dUL, 0x3ffa5503UL, 0xdb8d41e1UL, 0xbc9d2f6eUL,\n+    0x8af46052UL, 0x3ffa674aUL, 0x30670366UL, 0x3c650f56UL, 0x1330b358UL,\n+    0x3ffa799eUL, 0xcac563c7UL, 0x3c9bcb7eUL, 0x53c12e59UL, 0x3ffa8bfeUL,\n+    0xb2ba15a9UL, 0xbc94f867UL, 0x5579fdbfUL, 0x3ffa9e6bUL, 0x0ef7fd31UL,\n+    0x3c90fac9UL, 0x21356ebaUL, 0x3ffab0e5UL, 0xdae94545UL, 0x3c889c31UL,\n+    0xbfd3f37aUL, 0x3ffac36bUL, 0xcae76cd0UL, 0xbc8f9234UL, 0x3a3c2774UL,\n+    0x3ffad5ffUL, 0xb6b1b8e5UL, 0x3c97ef3bUL, 0x995ad3adUL, 0x3ffae89fUL,\n+    0x345dcc81UL, 0x3c97a1cdUL, 0xe622f2ffUL, 0x3ffafb4cUL, 0x0f315ecdUL,\n+    0xbc94b2fcUL, 0x298db666UL, 0x3ffb0e07UL, 0x4c80e425UL, 0xbc9bdef5UL,\n+    0x6c9a8952UL, 0x3ffb20ceUL, 0x4a0756ccUL, 0x3c94dd02UL, 0xb84f15fbUL,\n+    0x3ffb33a2UL, 0x3084d708UL, 0xbc62805eUL, 0x15b749b1UL, 0x3ffb4684UL,\n+    0xe9df7c90UL, 0xbc7f763dUL, 0x8de5593aUL, 0x3ffb5972UL, 0xbbba6de3UL,\n+    0xbc9c71dfUL, 0x29f1c52aUL, 0x3ffb6c6eUL, 0x52883f6eUL, 0x3c92a8f3UL,\n+    0xf2fb5e47UL, 0x3ffb7f76UL, 0x7e54ac3bUL, 0xbc75584fUL, 0xf22749e4UL,\n+    0x3ffb928cUL, 0x54cb65c6UL, 0xbc9b7216UL, 0x30a1064aUL, 0x3ffba5b0UL,\n+    0x0e54292eUL, 0xbc9efcd3UL, 0xb79a6f1fUL, 0x3ffbb8e0UL, 0xc9696205UL,\n+    0xbc3f52d1UL, 0x904bc1d2UL, 0x3ffbcc1eUL, 0x7a2d9e84UL, 0x3c823dd0UL,\n+    0xc3f3a207UL, 0x3ffbdf69UL, 0x60ea5b53UL, 0xbc3c2623UL, 0x5bd71e09UL,\n+    0x3ffbf2c2UL, 0x3f6b9c73UL, 0xbc9efdcaUL, 0x6141b33dUL, 0x3ffc0628UL,\n+    0xa1fbca34UL, 0xbc8d8a5aUL, 0xdd85529cUL, 0x3ffc199bUL, 0x895048ddUL,\n+    0x3c811065UL, 0xd9fa652cUL, 0x3ffc2d1cUL, 0x17c8a5d7UL, 0xbc96e516UL,\n+    0x5fffd07aUL, 0x3ffc40abUL, 0xe083c60aUL, 0x3c9b4537UL, 0x78fafb22UL,\n+    0x3ffc5447UL, 0x2493b5afUL, 0x3c912f07UL, 0x2e57d14bUL, 0x3ffc67f1UL,\n+    0xff483cadUL, 0x3c92884dUL, 0x8988c933UL, 0x3ffc7ba8UL, 0xbe255559UL,\n+    0xbc8e76bbUL, 0x9406e7b5UL, 0x3ffc8f6dUL, 0x48805c44UL, 0x3c71acbcUL,\n+    0x5751c4dbUL, 0x3ffca340UL, 0xd10d08f5UL, 0xbc87f2beUL, 0xdcef9069UL,\n+    0x3ffcb720UL, 0xd1e949dbUL, 0x3c7503cbUL, 0x2e6d1675UL, 0x3ffccb0fUL,\n+    0x86009092UL, 0xbc7d220fUL, 0x555dc3faUL, 0x3ffcdf0bUL, 0x53829d72UL,\n+    0xbc8dd83bUL, 0x5b5bab74UL, 0x3ffcf315UL, 0xb86dff57UL, 0xbc9a08e9UL,\n+    0x4a07897cUL, 0x3ffd072dUL, 0x43797a9cUL, 0xbc9cbc37UL, 0x2b08c968UL,\n+    0x3ffd1b53UL, 0x219a36eeUL, 0x3c955636UL, 0x080d89f2UL, 0x3ffd2f87UL,\n+    0x719d8578UL, 0xbc9d487bUL, 0xeacaa1d6UL, 0x3ffd43c8UL, 0xbf5a1614UL,\n+    0x3c93db53UL, 0xdcfba487UL, 0x3ffd5818UL, 0xd75b3707UL, 0x3c82ed02UL,\n+    0xe862e6d3UL, 0x3ffd6c76UL, 0x4a8165a0UL, 0x3c5fe87aUL, 0x16c98398UL,\n+    0x3ffd80e3UL, 0x8beddfe8UL, 0xbc911ec1UL, 0x71ff6075UL, 0x3ffd955dUL,\n+    0xbb9af6beUL, 0x3c9a052dUL, 0x03db3285UL, 0x3ffda9e6UL, 0x696db532UL,\n+    0x3c9c2300UL, 0xd63a8315UL, 0x3ffdbe7cUL, 0x926b8be4UL, 0xbc9b76f1UL,\n+    0xf301b460UL, 0x3ffdd321UL, 0x78f018c3UL, 0x3c92da57UL, 0x641c0658UL,\n+    0x3ffde7d5UL, 0x8e79ba8fUL, 0xbc9ca552UL, 0x337b9b5fUL, 0x3ffdfc97UL,\n+    0x4f184b5cUL, 0xbc91a5cdUL, 0x6b197d17UL, 0x3ffe1167UL, 0xbd5c7f44UL,\n+    0xbc72b529UL, 0x14f5a129UL, 0x3ffe2646UL, 0x817a1496UL, 0xbc97b627UL,\n+    0x3b16ee12UL, 0x3ffe3b33UL, 0x31fdc68bUL, 0xbc99f4a4UL, 0xe78b3ff6UL,\n+    0x3ffe502eUL, 0x80a9cc8fUL, 0x3c839e89UL, 0x24676d76UL, 0x3ffe6539UL,\n+    0x7522b735UL, 0xbc863ff8UL, 0xfbc74c83UL, 0x3ffe7a51UL, 0xca0c8de2UL,\n+    0x3c92d522UL, 0x77cdb740UL, 0x3ffe8f79UL, 0x80b054b1UL, 0xbc910894UL,\n+    0xa2a490daUL, 0x3ffea4afUL, 0x179c2893UL, 0xbc9e9c23UL, 0x867cca6eUL,\n+    0x3ffeb9f4UL, 0x2293e4f2UL, 0x3c94832fUL, 0x2d8e67f1UL, 0x3ffecf48UL,\n+    0xb411ad8cUL, 0xbc9c93f3UL, 0xa2188510UL, 0x3ffee4aaUL, 0xa487568dUL,\n+    0x3c91c68dUL, 0xee615a27UL, 0x3ffefa1bUL, 0x86a4b6b0UL, 0x3c9dc7f4UL,\n+    0x1cb6412aUL, 0x3fff0f9cUL, 0x65181d45UL, 0xbc932200UL, 0x376bba97UL,\n+    0x3fff252bUL, 0xbf0d8e43UL, 0x3c93a1a5UL, 0x48dd7274UL, 0x3fff3ac9UL,\n+    0x3ed837deUL, 0xbc795a5aUL, 0x5b6e4540UL, 0x3fff5076UL, 0x2dd8a18bUL,\n+    0x3c99d3e1UL, 0x798844f8UL, 0x3fff6632UL, 0x3539343eUL, 0x3c9fa37bUL,\n+    0xad9cbe14UL, 0x3fff7bfdUL, 0xd006350aUL, 0xbc9dbb12UL, 0x02243c89UL,\n+    0x3fff91d8UL, 0xa779f689UL, 0xbc612ea8UL, 0x819e90d8UL, 0x3fffa7c1UL,\n+    0xf3a5931eUL, 0x3c874853UL, 0x3692d514UL, 0x3fffbdbaUL, 0x15098eb6UL,\n+    0xbc796773UL, 0x2b8f71f1UL, 0x3fffd3c2UL, 0x966579e7UL, 0x3c62eb74UL,\n+    0x6b2a23d9UL, 0x3fffe9d9UL, 0x7442fde3UL, 0x3c74a603UL\n+};\n+\n+ATTRIBUTE_ALIGNED(16) juint _e_coeff[] = {\n+    0xe78a6731UL, 0x3f55d87fUL, 0xd704a0c0UL, 0x3fac6b08UL, 0x6fba4e77UL,\n+    0x3f83b2abUL, 0xff82c58fUL, 0x3fcebfbdUL, 0xfefa39efUL, 0x3fe62e42UL,\n+    0x00000000UL, 0x00000000UL\n+};\n+\n+ATTRIBUTE_ALIGNED(16) juint _coeff_h[] = {\n+    0x00000000UL, 0xbfd61a00UL, 0x00000000UL, 0xbf5dabe1UL\n+};\n+\n+ATTRIBUTE_ALIGNED(16) juint _HIGHMASK_LOG_X[] = {\n+    0xf8000000UL, 0xffffffffUL, 0x00000000UL, 0xfffff800UL\n+};\n+\n+ATTRIBUTE_ALIGNED(8) juint _HALFMASK[] = {\n+    0xf8000000UL, 0xffffffffUL, 0xf8000000UL, 0xffffffffUL\n+};\n+\n+ATTRIBUTE_ALIGNED(16) juint _coeff_pow[] = {\n+    0x6dc96112UL, 0xbf836578UL, 0xee241472UL, 0xbf9b0301UL, 0x9f95985aUL,\n+    0xbfb528dbUL, 0xb3841d2aUL, 0xbfd619b6UL, 0x518775e3UL, 0x3f9004f2UL,\n+    0xac8349bbUL, 0x3fa76c9bUL, 0x486ececcUL, 0x3fc4635eUL, 0x161bb241UL,\n+    0xbf5dabe1UL, 0x9f95985aUL, 0xbfb528dbUL, 0xf8b5787dUL, 0x3ef2531eUL,\n+    0x486ececbUL, 0x3fc4635eUL, 0x412055ccUL, 0xbdd61bb2UL\n+};\n+\n+ATTRIBUTE_ALIGNED(16) juint _L_tbl_pow[] = {\n+    0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0x00000000UL, 0x20000000UL,\n+    0x3feff00aUL, 0x96621f95UL, 0x3e5b1856UL, 0xe0000000UL, 0x3fefe019UL,\n+    0xe5916f9eUL, 0xbe325278UL, 0x00000000UL, 0x3fefd02fUL, 0x859a1062UL,\n+    0x3e595fb7UL, 0xc0000000UL, 0x3fefc049UL, 0xb245f18fUL, 0xbe529c38UL,\n+    0xe0000000UL, 0x3fefb069UL, 0xad2880a7UL, 0xbe501230UL, 0x60000000UL,\n+    0x3fefa08fUL, 0xc8e72420UL, 0x3e597bd1UL, 0x80000000UL, 0x3fef90baUL,\n+    0xc30c4500UL, 0xbe5d6c75UL, 0xe0000000UL, 0x3fef80eaUL, 0x02c63f43UL,\n+    0x3e2e1318UL, 0xc0000000UL, 0x3fef7120UL, 0xb3d4ccccUL, 0xbe44c52aUL,\n+    0x00000000UL, 0x3fef615cUL, 0xdbd91397UL, 0xbe4e7d6cUL, 0xa0000000UL,\n+    0x3fef519cUL, 0x65c5cd68UL, 0xbe522dc8UL, 0xa0000000UL, 0x3fef41e2UL,\n+    0x46d1306cUL, 0xbe5a840eUL, 0xe0000000UL, 0x3fef322dUL, 0xd2980e94UL,\n+    0x3e5071afUL, 0xa0000000UL, 0x3fef227eUL, 0x773abadeUL, 0xbe5891e5UL,\n+    0xa0000000UL, 0x3fef12d4UL, 0xdc6bf46bUL, 0xbe5cccbeUL, 0xe0000000UL,\n+    0x3fef032fUL, 0xbc7247faUL, 0xbe2bab83UL, 0x80000000UL, 0x3feef390UL,\n+    0xbcaa1e46UL, 0xbe53bb3bUL, 0x60000000UL, 0x3feee3f6UL, 0x5f6c682dUL,\n+    0xbe54c619UL, 0x80000000UL, 0x3feed461UL, 0x5141e368UL, 0xbe4b6d86UL,\n+    0xe0000000UL, 0x3feec4d1UL, 0xec678f76UL, 0xbe369af6UL, 0x80000000UL,\n+    0x3feeb547UL, 0x41301f55UL, 0xbe2d4312UL, 0x60000000UL, 0x3feea5c2UL,\n+    0x676da6bdUL, 0xbe4d8dd0UL, 0x60000000UL, 0x3fee9642UL, 0x57a891c4UL,\n+    0x3e51f991UL, 0xa0000000UL, 0x3fee86c7UL, 0xe4eb491eUL, 0x3e579bf9UL,\n+    0x20000000UL, 0x3fee7752UL, 0xfddc4a2cUL, 0xbe3356e6UL, 0xc0000000UL,\n+    0x3fee67e1UL, 0xd75b5bf1UL, 0xbe449531UL, 0x80000000UL, 0x3fee5876UL,\n+    0xbd423b8eUL, 0x3df54fe4UL, 0x60000000UL, 0x3fee4910UL, 0x330e51b9UL,\n+    0x3e54289cUL, 0x80000000UL, 0x3fee39afUL, 0x8651a95fUL, 0xbe55aad6UL,\n+    0xa0000000UL, 0x3fee2a53UL, 0x5e98c708UL, 0xbe2fc4a9UL, 0xe0000000UL,\n+    0x3fee1afcUL, 0x0989328dUL, 0x3e23958cUL, 0x40000000UL, 0x3fee0babUL,\n+    0xee642abdUL, 0xbe425dd8UL, 0xa0000000UL, 0x3fedfc5eUL, 0xc394d236UL,\n+    0x3e526362UL, 0x20000000UL, 0x3feded17UL, 0xe104aa8eUL, 0x3e4ce247UL,\n+    0xc0000000UL, 0x3fedddd4UL, 0x265a9be4UL, 0xbe5bb77aUL, 0x40000000UL,\n+    0x3fedce97UL, 0x0ecac52fUL, 0x3e4a7cb1UL, 0xe0000000UL, 0x3fedbf5eUL,\n+    0x124cb3b8UL, 0x3e257024UL, 0x80000000UL, 0x3fedb02bUL, 0xe6d4febeUL,\n+    0xbe2033eeUL, 0x20000000UL, 0x3feda0fdUL, 0x39cca00eUL, 0xbe3ddabcUL,\n+    0xc0000000UL, 0x3fed91d3UL, 0xef8a552aUL, 0xbe543390UL, 0x40000000UL,\n+    0x3fed82afUL, 0xb8e85204UL, 0x3e513850UL, 0xe0000000UL, 0x3fed738fUL,\n+    0x3d59fe08UL, 0xbe5db728UL, 0x40000000UL, 0x3fed6475UL, 0x3aa7ead1UL,\n+    0x3e58804bUL, 0xc0000000UL, 0x3fed555fUL, 0xf8a35ba9UL, 0xbe5298b0UL,\n+    0x00000000UL, 0x3fed464fUL, 0x9a88dd15UL, 0x3e5a8cdbUL, 0x40000000UL,\n+    0x3fed3743UL, 0xb0b0a190UL, 0x3e598635UL, 0x80000000UL, 0x3fed283cUL,\n+    0xe2113295UL, 0xbe5c1119UL, 0x80000000UL, 0x3fed193aUL, 0xafbf1728UL,\n+    0xbe492e9cUL, 0x60000000UL, 0x3fed0a3dUL, 0xe4a4ccf3UL, 0x3e19b90eUL,\n+    0x20000000UL, 0x3fecfb45UL, 0xba3cbeb8UL, 0x3e406b50UL, 0xc0000000UL,\n+    0x3fecec51UL, 0x110f7dddUL, 0x3e0d6806UL, 0x40000000UL, 0x3fecdd63UL,\n+    0x7dd7d508UL, 0xbe5a8943UL, 0x80000000UL, 0x3fecce79UL, 0x9b60f271UL,\n+    0xbe50676aUL, 0x80000000UL, 0x3fecbf94UL, 0x0b9ad660UL, 0x3e59174fUL,\n+    0x60000000UL, 0x3fecb0b4UL, 0x00823d9cUL, 0x3e5bbf72UL, 0x20000000UL,\n+    0x3feca1d9UL, 0x38a6ec89UL, 0xbe4d38f9UL, 0x80000000UL, 0x3fec9302UL,\n+    0x3a0b7d8eUL, 0x3e53dbfdUL, 0xc0000000UL, 0x3fec8430UL, 0xc6826b34UL,\n+    0xbe27c5c9UL, 0xc0000000UL, 0x3fec7563UL, 0x0c706381UL, 0xbe593653UL,\n+    0x60000000UL, 0x3fec669bUL, 0x7df34ec7UL, 0x3e461ab5UL, 0xe0000000UL,\n+    0x3fec57d7UL, 0x40e5e7e8UL, 0xbe5c3daeUL, 0x00000000UL, 0x3fec4919UL,\n+    0x5602770fUL, 0xbe55219dUL, 0xc0000000UL, 0x3fec3a5eUL, 0xec7911ebUL,\n+    0x3e5a5d25UL, 0x60000000UL, 0x3fec2ba9UL, 0xb39ea225UL, 0xbe53c00bUL,\n+    0x80000000UL, 0x3fec1cf8UL, 0x967a212eUL, 0x3e5a8ddfUL, 0x60000000UL,\n+    0x3fec0e4cUL, 0x580798bdUL, 0x3e5f53abUL, 0x00000000UL, 0x3febffa5UL,\n+    0xb8282df6UL, 0xbe46b874UL, 0x20000000UL, 0x3febf102UL, 0xe33a6729UL,\n+    0x3e54963fUL, 0x00000000UL, 0x3febe264UL, 0x3b53e88aUL, 0xbe3adce1UL,\n+    0x60000000UL, 0x3febd3caUL, 0xc2585084UL, 0x3e5cde9fUL, 0x80000000UL,\n+    0x3febc535UL, 0xa335c5eeUL, 0xbe39fd9cUL, 0x20000000UL, 0x3febb6a5UL,\n+    0x7325b04dUL, 0x3e42ba15UL, 0x60000000UL, 0x3feba819UL, 0x1564540fUL,\n+    0x3e3a9f35UL, 0x40000000UL, 0x3feb9992UL, 0x83fff592UL, 0xbe5465ceUL,\n+    0xa0000000UL, 0x3feb8b0fUL, 0xb9da63d3UL, 0xbe4b1a0aUL, 0x80000000UL,\n+    0x3feb7c91UL, 0x6d6f1ea4UL, 0x3e557657UL, 0x00000000UL, 0x3feb6e18UL,\n+    0x5e80a1bfUL, 0x3e4ddbb6UL, 0x00000000UL, 0x3feb5fa3UL, 0x1c9eacb5UL,\n+    0x3e592877UL, 0xa0000000UL, 0x3feb5132UL, 0x6d40beb3UL, 0xbe51858cUL,\n+    0xa0000000UL, 0x3feb42c6UL, 0xd740c67bUL, 0x3e427ad2UL, 0x40000000UL,\n+    0x3feb345fUL, 0xa3e0cceeUL, 0xbe5c2fc4UL, 0x40000000UL, 0x3feb25fcUL,\n+    0x8e752b50UL, 0xbe3da3c2UL, 0xc0000000UL, 0x3feb179dUL, 0xa892e7deUL,\n+    0x3e1fb481UL, 0xc0000000UL, 0x3feb0943UL, 0x21ed71e9UL, 0xbe365206UL,\n+    0x20000000UL, 0x3feafaeeUL, 0x0e1380a3UL, 0x3e5c5b7bUL, 0x20000000UL,\n+    0x3feaec9dUL, 0x3c3d640eUL, 0xbe5dbbd0UL, 0x60000000UL, 0x3feade50UL,\n+    0x8f97a715UL, 0x3e3a8ec5UL, 0x20000000UL, 0x3fead008UL, 0x23ab2839UL,\n+    0x3e2fe98aUL, 0x40000000UL, 0x3feac1c4UL, 0xf4bbd50fUL, 0x3e54d8f6UL,\n+    0xe0000000UL, 0x3feab384UL, 0x14757c4dUL, 0xbe48774cUL, 0xc0000000UL,\n+    0x3feaa549UL, 0x7c7b0eeaUL, 0x3e5b51bbUL, 0x20000000UL, 0x3fea9713UL,\n+    0xf56f7013UL, 0x3e386200UL, 0xe0000000UL, 0x3fea88e0UL, 0xbe428ebeUL,\n+    0xbe514af5UL, 0xe0000000UL, 0x3fea7ab2UL, 0x8d0e4496UL, 0x3e4f9165UL,\n+    0x60000000UL, 0x3fea6c89UL, 0xdbacc5d5UL, 0xbe5c063bUL, 0x20000000UL,\n+    0x3fea5e64UL, 0x3f19d970UL, 0xbe5a0c8cUL, 0x20000000UL, 0x3fea5043UL,\n+    0x09ea3e6bUL, 0x3e5065dcUL, 0x80000000UL, 0x3fea4226UL, 0x78df246cUL,\n+    0x3e5e05f6UL, 0x40000000UL, 0x3fea340eUL, 0x4057d4a0UL, 0x3e431b2bUL,\n+    0x40000000UL, 0x3fea25faUL, 0x82867bb5UL, 0x3e4b76beUL, 0xa0000000UL,\n+    0x3fea17eaUL, 0x9436f40aUL, 0xbe5aad39UL, 0x20000000UL, 0x3fea09dfUL,\n+    0x4b5253b3UL, 0x3e46380bUL, 0x00000000UL, 0x3fe9fbd8UL, 0x8fc52466UL,\n+    0xbe386f9bUL, 0x20000000UL, 0x3fe9edd5UL, 0x22d3f344UL, 0xbe538347UL,\n+    0x60000000UL, 0x3fe9dfd6UL, 0x1ac33522UL, 0x3e5dbc53UL, 0x00000000UL,\n+    0x3fe9d1dcUL, 0xeabdff1dUL, 0x3e40fc0cUL, 0xe0000000UL, 0x3fe9c3e5UL,\n+    0xafd30e73UL, 0xbe585e63UL, 0xe0000000UL, 0x3fe9b5f3UL, 0xa52f226aUL,\n+    0xbe43e8f9UL, 0x20000000UL, 0x3fe9a806UL, 0xecb8698dUL, 0xbe515b36UL,\n+    0x80000000UL, 0x3fe99a1cUL, 0xf2b4e89dUL, 0x3e48b62bUL, 0x20000000UL,\n+    0x3fe98c37UL, 0x7c9a88fbUL, 0x3e44414cUL, 0x00000000UL, 0x3fe97e56UL,\n+    0xda015741UL, 0xbe5d13baUL, 0xe0000000UL, 0x3fe97078UL, 0x5fdace06UL,\n+    0x3e51b947UL, 0x00000000UL, 0x3fe962a0UL, 0x956ca094UL, 0x3e518785UL,\n+    0x40000000UL, 0x3fe954cbUL, 0x01164c1dUL, 0x3e5d5b57UL, 0xc0000000UL,\n+    0x3fe946faUL, 0xe63b3767UL, 0xbe4f84e7UL, 0x40000000UL, 0x3fe9392eUL,\n+    0xe57cc2a9UL, 0x3e34eda3UL, 0xe0000000UL, 0x3fe92b65UL, 0x8c75b544UL,\n+    0x3e5766a0UL, 0xc0000000UL, 0x3fe91da1UL, 0x37d1d087UL, 0xbe5e2ab1UL,\n+    0x80000000UL, 0x3fe90fe1UL, 0xa953dc20UL, 0x3e5fa1f3UL, 0x80000000UL,\n+    0x3fe90225UL, 0xdbd3f369UL, 0x3e47d6dbUL, 0xa0000000UL, 0x3fe8f46dUL,\n+    0x1c9be989UL, 0xbe5e2b0aUL, 0xa0000000UL, 0x3fe8e6b9UL, 0x3c93d76aUL,\n+    0x3e5c8618UL, 0xe0000000UL, 0x3fe8d909UL, 0x2182fc9aUL, 0xbe41aa9eUL,\n+    0x20000000UL, 0x3fe8cb5eUL, 0xe6b3539dUL, 0xbe530d19UL, 0x60000000UL,\n+    0x3fe8bdb6UL, 0x49e58cc3UL, 0xbe3bb374UL, 0xa0000000UL, 0x3fe8b012UL,\n+    0xa7cfeb8fUL, 0x3e56c412UL, 0x00000000UL, 0x3fe8a273UL, 0x8d52bc19UL,\n+    0x3e1429b8UL, 0x60000000UL, 0x3fe894d7UL, 0x4dc32c6cUL, 0xbe48604cUL,\n+    0xc0000000UL, 0x3fe8873fUL, 0x0c868e56UL, 0xbe564ee5UL, 0x00000000UL,\n+    0x3fe879acUL, 0x56aee828UL, 0x3e5e2fd8UL, 0x60000000UL, 0x3fe86c1cUL,\n+    0x7ceab8ecUL, 0x3e493365UL, 0xc0000000UL, 0x3fe85e90UL, 0x78d4dadcUL,\n+    0xbe4f7f25UL, 0x00000000UL, 0x3fe85109UL, 0x0ccd8280UL, 0x3e31e7a2UL,\n+    0x40000000UL, 0x3fe84385UL, 0x34ba4e15UL, 0x3e328077UL, 0x80000000UL,\n+    0x3fe83605UL, 0xa670975aUL, 0xbe53eee5UL, 0xa0000000UL, 0x3fe82889UL,\n+    0xf61b77b2UL, 0xbe43a20aUL, 0xa0000000UL, 0x3fe81b11UL, 0x13e6643bUL,\n+    0x3e5e5fe5UL, 0xc0000000UL, 0x3fe80d9dUL, 0x82cc94e8UL, 0xbe5ff1f9UL,\n+    0xa0000000UL, 0x3fe8002dUL, 0x8a0c9c5dUL, 0xbe42b0e7UL, 0x60000000UL,\n+    0x3fe7f2c1UL, 0x22a16f01UL, 0x3e5d9ea0UL, 0x20000000UL, 0x3fe7e559UL,\n+    0xc38cd451UL, 0x3e506963UL, 0xc0000000UL, 0x3fe7d7f4UL, 0x9902bc71UL,\n+    0x3e4503d7UL, 0x40000000UL, 0x3fe7ca94UL, 0xdef2a3c0UL, 0x3e3d98edUL,\n+    0xa0000000UL, 0x3fe7bd37UL, 0xed49abb0UL, 0x3e24c1ffUL, 0xe0000000UL,\n+    0x3fe7afdeUL, 0xe3b0be70UL, 0xbe40c467UL, 0x00000000UL, 0x3fe7a28aUL,\n+    0xaf9f193cUL, 0xbe5dff6cUL, 0xe0000000UL, 0x3fe79538UL, 0xb74cf6b6UL,\n+    0xbe258ed0UL, 0xa0000000UL, 0x3fe787ebUL, 0x1d9127c7UL, 0x3e345fb0UL,\n+    0x40000000UL, 0x3fe77aa2UL, 0x1028c21dUL, 0xbe4619bdUL, 0xa0000000UL,\n+    0x3fe76d5cUL, 0x7cb0b5e4UL, 0x3e40f1a2UL, 0xe0000000UL, 0x3fe7601aUL,\n+    0x2b1bc4adUL, 0xbe32e8bbUL, 0xe0000000UL, 0x3fe752dcUL, 0x6839f64eUL,\n+    0x3e41f57bUL, 0xc0000000UL, 0x3fe745a2UL, 0xc4121f7eUL, 0xbe52c40aUL,\n+    0x60000000UL, 0x3fe7386cUL, 0xd6852d72UL, 0xbe5c4e6bUL, 0xc0000000UL,\n+    0x3fe72b39UL, 0x91d690f7UL, 0xbe57f88fUL, 0xe0000000UL, 0x3fe71e0aUL,\n+    0x627a2159UL, 0xbe4425d5UL, 0xc0000000UL, 0x3fe710dfUL, 0x50a54033UL,\n+    0x3e422b7eUL, 0x60000000UL, 0x3fe703b8UL, 0x3b0b5f91UL, 0x3e5d3857UL,\n+    0xe0000000UL, 0x3fe6f694UL, 0x84d628a2UL, 0xbe51f090UL, 0x00000000UL,\n+    0x3fe6e975UL, 0x306d8894UL, 0xbe414d83UL, 0xe0000000UL, 0x3fe6dc58UL,\n+    0x30bf24aaUL, 0xbe4650caUL, 0x80000000UL, 0x3fe6cf40UL, 0xd4628d69UL,\n+    0xbe5db007UL, 0xc0000000UL, 0x3fe6c22bUL, 0xa2aae57bUL, 0xbe31d279UL,\n+    0xc0000000UL, 0x3fe6b51aUL, 0x860edf7eUL, 0xbe2d4c4aUL, 0x80000000UL,\n+    0x3fe6a80dUL, 0xf3559341UL, 0xbe5f7e98UL, 0xe0000000UL, 0x3fe69b03UL,\n+    0xa885899eUL, 0xbe5c2011UL, 0xe0000000UL, 0x3fe68dfdUL, 0x2bdc6d37UL,\n+    0x3e224a82UL, 0xa0000000UL, 0x3fe680fbUL, 0xc12ad1b9UL, 0xbe40cf56UL,\n+    0x00000000UL, 0x3fe673fdUL, 0x1bcdf659UL, 0xbdf52f2dUL, 0x00000000UL,\n+    0x3fe66702UL, 0x5df10408UL, 0x3e5663e0UL, 0xc0000000UL, 0x3fe65a0aUL,\n+    0xa4070568UL, 0xbe40b12fUL, 0x00000000UL, 0x3fe64d17UL, 0x71c54c47UL,\n+    0x3e5f5e8bUL, 0x00000000UL, 0x3fe64027UL, 0xbd4b7e83UL, 0x3e42ead6UL,\n+    0xa0000000UL, 0x3fe6333aUL, 0x61598bd2UL, 0xbe4c48d4UL, 0xc0000000UL,\n+    0x3fe62651UL, 0x6f538d61UL, 0x3e548401UL, 0xa0000000UL, 0x3fe6196cUL,\n+    0x14344120UL, 0xbe529af6UL, 0x00000000UL, 0x3fe60c8bUL, 0x5982c587UL,\n+    0xbe3e1e4fUL, 0x00000000UL, 0x3fe5ffadUL, 0xfe51d4eaUL, 0xbe4c897aUL,\n+    0x80000000UL, 0x3fe5f2d2UL, 0xfd46ebe1UL, 0x3e552e00UL, 0xa0000000UL,\n+    0x3fe5e5fbUL, 0xa4695699UL, 0x3e5ed471UL, 0x60000000UL, 0x3fe5d928UL,\n+    0x80d118aeUL, 0x3e456b61UL, 0xa0000000UL, 0x3fe5cc58UL, 0x304c330bUL,\n+    0x3e54dc29UL, 0x80000000UL, 0x3fe5bf8cUL, 0x0af2dedfUL, 0xbe3aa9bdUL,\n+    0xe0000000UL, 0x3fe5b2c3UL, 0x15fc9258UL, 0xbe479a37UL, 0xc0000000UL,\n+    0x3fe5a5feUL, 0x9292c7eaUL, 0x3e188650UL, 0x20000000UL, 0x3fe5993dUL,\n+    0x33b4d380UL, 0x3e5d6d93UL, 0x20000000UL, 0x3fe58c7fUL, 0x02fd16c7UL,\n+    0x3e2fe961UL, 0xa0000000UL, 0x3fe57fc4UL, 0x4a05edb6UL, 0xbe4d55b4UL,\n+    0xa0000000UL, 0x3fe5730dUL, 0x3d443abbUL, 0xbe5e6954UL, 0x00000000UL,\n+    0x3fe5665aUL, 0x024acfeaUL, 0x3e50e61bUL, 0x00000000UL, 0x3fe559aaUL,\n+    0xcc9edd09UL, 0xbe325403UL, 0x60000000UL, 0x3fe54cfdUL, 0x1fe26950UL,\n+    0x3e5d500eUL, 0x60000000UL, 0x3fe54054UL, 0x6c5ae164UL, 0xbe4a79b4UL,\n+    0xc0000000UL, 0x3fe533aeUL, 0x154b0287UL, 0xbe401571UL, 0xa0000000UL,\n+    0x3fe5270cUL, 0x0673f401UL, 0xbe56e56bUL, 0xe0000000UL, 0x3fe51a6dUL,\n+    0x751b639cUL, 0x3e235269UL, 0xa0000000UL, 0x3fe50dd2UL, 0x7c7b2bedUL,\n+    0x3ddec887UL, 0xc0000000UL, 0x3fe5013aUL, 0xafab4e17UL, 0x3e5e7575UL,\n+    0x60000000UL, 0x3fe4f4a6UL, 0x2e308668UL, 0x3e59aed6UL, 0x80000000UL,\n+    0x3fe4e815UL, 0xf33e2a76UL, 0xbe51f184UL, 0xe0000000UL, 0x3fe4db87UL,\n+    0x839f3e3eUL, 0x3e57db01UL, 0xc0000000UL, 0x3fe4cefdUL, 0xa9eda7bbUL,\n+    0x3e535e0fUL, 0x00000000UL, 0x3fe4c277UL, 0x2a8f66a5UL, 0x3e5ce451UL,\n+    0xc0000000UL, 0x3fe4b5f3UL, 0x05192456UL, 0xbe4e8518UL, 0xc0000000UL,\n+    0x3fe4a973UL, 0x4aa7cd1dUL, 0x3e46784aUL, 0x40000000UL, 0x3fe49cf7UL,\n+    0x8e23025eUL, 0xbe5749f2UL, 0x00000000UL, 0x3fe4907eUL, 0x18d30215UL,\n+    0x3e360f39UL, 0x20000000UL, 0x3fe48408UL, 0x63dcf2f3UL, 0x3e5e00feUL,\n+    0xc0000000UL, 0x3fe47795UL, 0x46182d09UL, 0xbe5173d9UL, 0xa0000000UL,\n+    0x3fe46b26UL, 0x8f0e62aaUL, 0xbe48f281UL, 0xe0000000UL, 0x3fe45ebaUL,\n+    0x5775c40cUL, 0xbe56aad4UL, 0x60000000UL, 0x3fe45252UL, 0x0fe25f69UL,\n+    0x3e48bd71UL, 0x40000000UL, 0x3fe445edUL, 0xe9989ec5UL, 0x3e590d97UL,\n+    0x80000000UL, 0x3fe4398bUL, 0xb3d9ffe3UL, 0x3e479dbcUL, 0x20000000UL,\n+    0x3fe42d2dUL, 0x388e4d2eUL, 0xbe5eed80UL, 0xe0000000UL, 0x3fe420d1UL,\n+    0x6f797c18UL, 0x3e554b4cUL, 0x20000000UL, 0x3fe4147aUL, 0x31048bb4UL,\n+    0xbe5b1112UL, 0x80000000UL, 0x3fe40825UL, 0x2efba4f9UL, 0x3e48ebc7UL,\n+    0x40000000UL, 0x3fe3fbd4UL, 0x50201119UL, 0x3e40b701UL, 0x40000000UL,\n+    0x3fe3ef86UL, 0x0a4db32cUL, 0x3e551de8UL, 0xa0000000UL, 0x3fe3e33bUL,\n+    0x0c9c148bUL, 0xbe50c1f6UL, 0x20000000UL, 0x3fe3d6f4UL, 0xc9129447UL,\n+    0x3e533fa0UL, 0x00000000UL, 0x3fe3cab0UL, 0xaae5b5a0UL, 0xbe22b68eUL,\n+    0x20000000UL, 0x3fe3be6fUL, 0x02305e8aUL, 0xbe54fc08UL, 0x60000000UL,\n+    0x3fe3b231UL, 0x7f908258UL, 0x3e57dc05UL, 0x00000000UL, 0x3fe3a5f7UL,\n+    0x1a09af78UL, 0x3e08038bUL, 0xe0000000UL, 0x3fe399bfUL, 0x490643c1UL,\n+    0xbe5dbe42UL, 0xe0000000UL, 0x3fe38d8bUL, 0x5e8ad724UL, 0xbe3c2b72UL,\n+    0x20000000UL, 0x3fe3815bUL, 0xc67196b6UL, 0x3e1713cfUL, 0xa0000000UL,\n+    0x3fe3752dUL, 0x6182e429UL, 0xbe3ec14cUL, 0x40000000UL, 0x3fe36903UL,\n+    0xab6eb1aeUL, 0x3e5a2cc5UL, 0x40000000UL, 0x3fe35cdcUL, 0xfe5dc064UL,\n+    0xbe5c5878UL, 0x40000000UL, 0x3fe350b8UL, 0x0ba6b9e4UL, 0x3e51619bUL,\n+    0x80000000UL, 0x3fe34497UL, 0x857761aaUL, 0x3e5fff53UL, 0x00000000UL,\n+    0x3fe3387aUL, 0xf872d68cUL, 0x3e484f4dUL, 0xa0000000UL, 0x3fe32c5fUL,\n+    0x087e97c2UL, 0x3e52842eUL, 0x80000000UL, 0x3fe32048UL, 0x73d6d0c0UL,\n+    0xbe503edfUL, 0x80000000UL, 0x3fe31434UL, 0x0c1456a1UL, 0xbe5f72adUL,\n+    0xa0000000UL, 0x3fe30823UL, 0x83a1a4d5UL, 0xbe5e65ccUL, 0xe0000000UL,\n+    0x3fe2fc15UL, 0x855a7390UL, 0xbe506438UL, 0x40000000UL, 0x3fe2f00bUL,\n+    0xa2898287UL, 0x3e3d22a2UL, 0xe0000000UL, 0x3fe2e403UL, 0x8b56f66fUL,\n+    0xbe5aa5fdUL, 0x80000000UL, 0x3fe2d7ffUL, 0x52db119aUL, 0x3e3a2e3dUL,\n+    0x60000000UL, 0x3fe2cbfeUL, 0xe2ddd4c0UL, 0xbe586469UL, 0x40000000UL,\n+    0x3fe2c000UL, 0x6b01bf10UL, 0x3e352b9dUL, 0x40000000UL, 0x3fe2b405UL,\n+    0xb07a1cdfUL, 0x3e5c5cdaUL, 0x80000000UL, 0x3fe2a80dUL, 0xc7b5f868UL,\n+    0xbe5668b3UL, 0xc0000000UL, 0x3fe29c18UL, 0x185edf62UL, 0xbe563d66UL,\n+    0x00000000UL, 0x3fe29027UL, 0xf729e1ccUL, 0x3e59a9a0UL, 0x80000000UL,\n+    0x3fe28438UL, 0x6433c727UL, 0xbe43cc89UL, 0x00000000UL, 0x3fe2784dUL,\n+    0x41782631UL, 0xbe30750cUL, 0xa0000000UL, 0x3fe26c64UL, 0x914911b7UL,\n+    0xbe58290eUL, 0x40000000UL, 0x3fe2607fUL, 0x3dcc73e1UL, 0xbe4269cdUL,\n+    0x00000000UL, 0x3fe2549dUL, 0x2751bf70UL, 0xbe5a6998UL, 0xc0000000UL,\n+    0x3fe248bdUL, 0x4248b9fbUL, 0xbe4ddb00UL, 0x80000000UL, 0x3fe23ce1UL,\n+    0xf35cf82fUL, 0x3e561b71UL, 0x60000000UL, 0x3fe23108UL, 0x8e481a2dUL,\n+    0x3e518fb9UL, 0x60000000UL, 0x3fe22532UL, 0x5ab96edcUL, 0xbe5fafc5UL,\n+    0x40000000UL, 0x3fe2195fUL, 0x80943911UL, 0xbe07f819UL, 0x40000000UL,\n+    0x3fe20d8fUL, 0x386f2d6cUL, 0xbe54ba8bUL, 0x40000000UL, 0x3fe201c2UL,\n+    0xf29664acUL, 0xbe5eb815UL, 0x20000000UL, 0x3fe1f5f8UL, 0x64f03390UL,\n+    0x3e5e320cUL, 0x20000000UL, 0x3fe1ea31UL, 0x747ff696UL, 0x3e5ef0a5UL,\n+    0x40000000UL, 0x3fe1de6dUL, 0x3e9ceb51UL, 0xbe5f8d27UL, 0x20000000UL,\n+    0x3fe1d2acUL, 0x4ae0b55eUL, 0x3e5faa21UL, 0x20000000UL, 0x3fe1c6eeUL,\n+    0x28569a5eUL, 0x3e598a4fUL, 0x20000000UL, 0x3fe1bb33UL, 0x54b33e07UL,\n+    0x3e46130aUL, 0x20000000UL, 0x3fe1af7bUL, 0x024f1078UL, 0xbe4dbf93UL,\n+    0x00000000UL, 0x3fe1a3c6UL, 0xb0783bfaUL, 0x3e419248UL, 0xe0000000UL,\n+    0x3fe19813UL, 0x2f02b836UL, 0x3e4e02b7UL, 0xc0000000UL, 0x3fe18c64UL,\n+    0x28dec9d4UL, 0x3e09064fUL, 0x80000000UL, 0x3fe180b8UL, 0x45cbf406UL,\n+    0x3e5b1f46UL, 0x40000000UL, 0x3fe1750fUL, 0x03d9964cUL, 0x3e5b0a79UL,\n+    0x00000000UL, 0x3fe16969UL, 0x8b5b882bUL, 0xbe238086UL, 0xa0000000UL,\n+    0x3fe15dc5UL, 0x73bad6f8UL, 0xbdf1fca4UL, 0x20000000UL, 0x3fe15225UL,\n+    0x5385769cUL, 0x3e5e8d76UL, 0xa0000000UL, 0x3fe14687UL, 0x1676dc6bUL,\n+    0x3e571d08UL, 0x20000000UL, 0x3fe13aedUL, 0xa8c41c7fUL, 0xbe598a25UL,\n+    0x60000000UL, 0x3fe12f55UL, 0xc4e1aaf0UL, 0x3e435277UL, 0xa0000000UL,\n+    0x3fe123c0UL, 0x403638e1UL, 0xbe21aa7cUL, 0xc0000000UL, 0x3fe1182eUL,\n+    0x557a092bUL, 0xbdd0116bUL, 0xc0000000UL, 0x3fe10c9fUL, 0x7d779f66UL,\n+    0x3e4a61baUL, 0xc0000000UL, 0x3fe10113UL, 0x2b09c645UL, 0xbe5d586eUL,\n+    0x20000000UL, 0x3fe0ea04UL, 0xea2cad46UL, 0x3e5aa97cUL, 0x20000000UL,\n+    0x3fe0d300UL, 0x23190e54UL, 0x3e50f1a7UL, 0xa0000000UL, 0x3fe0bc07UL,\n+    0x1379a5a6UL, 0xbe51619dUL, 0x60000000UL, 0x3fe0a51aUL, 0x926a3d4aUL,\n+    0x3e5cf019UL, 0xa0000000UL, 0x3fe08e38UL, 0xa8c24358UL, 0x3e35241eUL,\n+    0x20000000UL, 0x3fe07762UL, 0x24317e7aUL, 0x3e512cfaUL, 0x00000000UL,\n+    0x3fe06097UL, 0xfd9cf274UL, 0xbe55bef3UL, 0x00000000UL, 0x3fe049d7UL,\n+    0x3689b49dUL, 0xbe36d26dUL, 0x40000000UL, 0x3fe03322UL, 0xf72ef6c4UL,\n+    0xbe54cd08UL, 0xa0000000UL, 0x3fe01c78UL, 0x23702d2dUL, 0xbe5900bfUL,\n+    0x00000000UL, 0x3fe005daUL, 0x3f59c14cUL, 0x3e57d80bUL, 0x40000000UL,\n+    0x3fdfde8dUL, 0xad67766dUL, 0xbe57fad4UL, 0x40000000UL, 0x3fdfb17cUL,\n+    0x644f4ae7UL, 0x3e1ee43bUL, 0x40000000UL, 0x3fdf8481UL, 0x903234d2UL,\n+    0x3e501a86UL, 0x40000000UL, 0x3fdf579cUL, 0xafe9e509UL, 0xbe267c3eUL,\n+    0x00000000UL, 0x3fdf2acdUL, 0xb7dfda0bUL, 0xbe48149bUL, 0x40000000UL,\n+    0x3fdefe13UL, 0x3b94305eUL, 0x3e5f4ea7UL, 0x80000000UL, 0x3fded16fUL,\n+    0x5d95da61UL, 0xbe55c198UL, 0x00000000UL, 0x3fdea4e1UL, 0x406960c9UL,\n+    0xbdd99a19UL, 0x00000000UL, 0x3fde7868UL, 0xd22f3539UL, 0x3e470c78UL,\n+    0x80000000UL, 0x3fde4c04UL, 0x83eec535UL, 0xbe3e1232UL, 0x40000000UL,\n+    0x3fde1fb6UL, 0x3dfbffcbUL, 0xbe4b7d71UL, 0x40000000UL, 0x3fddf37dUL,\n+    0x7e1be4e0UL, 0xbe5b8f8fUL, 0x40000000UL, 0x3fddc759UL, 0x46dae887UL,\n+    0xbe350458UL, 0x80000000UL, 0x3fdd9b4aUL, 0xed6ecc49UL, 0xbe5f0045UL,\n+    0x80000000UL, 0x3fdd6f50UL, 0x2e9e883cUL, 0x3e2915daUL, 0x80000000UL,\n+    0x3fdd436bUL, 0xf0bccb32UL, 0x3e4a68c9UL, 0x80000000UL, 0x3fdd179bUL,\n+    0x9bbfc779UL, 0xbe54a26aUL, 0x00000000UL, 0x3fdcebe0UL, 0x7cea33abUL,\n+    0x3e43c6b7UL, 0x40000000UL, 0x3fdcc039UL, 0xe740fd06UL, 0x3e5526c2UL,\n+    0x40000000UL, 0x3fdc94a7UL, 0x9eadeb1aUL, 0xbe396d8dUL, 0xc0000000UL,\n+    0x3fdc6929UL, 0xf0a8f95aUL, 0xbe5c0ab2UL, 0x80000000UL, 0x3fdc3dc0UL,\n+    0x6ee2693bUL, 0x3e0992e6UL, 0xc0000000UL, 0x3fdc126bUL, 0x5ac6b581UL,\n+    0xbe2834b6UL, 0x40000000UL, 0x3fdbe72bUL, 0x8cc226ffUL, 0x3e3596a6UL,\n+    0x00000000UL, 0x3fdbbbffUL, 0xf92a74bbUL, 0x3e3c5813UL, 0x00000000UL,\n+    0x3fdb90e7UL, 0x479664c0UL, 0xbe50d644UL, 0x00000000UL, 0x3fdb65e3UL,\n+    0x5004975bUL, 0xbe55258fUL, 0x00000000UL, 0x3fdb3af3UL, 0xe4b23194UL,\n+    0xbe588407UL, 0xc0000000UL, 0x3fdb1016UL, 0xe65d4d0aUL, 0x3e527c26UL,\n+    0x80000000UL, 0x3fdae54eUL, 0x814fddd6UL, 0x3e5962a2UL, 0x40000000UL,\n+    0x3fdaba9aUL, 0xe19d0913UL, 0xbe562f4eUL, 0x80000000UL, 0x3fda8ff9UL,\n+    0x43cfd006UL, 0xbe4cfdebUL, 0x40000000UL, 0x3fda656cUL, 0x686f0a4eUL,\n+    0x3e5e47a8UL, 0xc0000000UL, 0x3fda3af2UL, 0x7200d410UL, 0x3e5e1199UL,\n+    0xc0000000UL, 0x3fda108cUL, 0xabd2266eUL, 0x3e5ee4d1UL, 0x40000000UL,\n+    0x3fd9e63aUL, 0x396f8f2cUL, 0x3e4dbffbUL, 0x00000000UL, 0x3fd9bbfbUL,\n+    0xe32b25ddUL, 0x3e5c3a54UL, 0x40000000UL, 0x3fd991cfUL, 0x431e4035UL,\n+    0xbe457925UL, 0x80000000UL, 0x3fd967b6UL, 0x7bed3dd3UL, 0x3e40c61dUL,\n+    0x00000000UL, 0x3fd93db1UL, 0xd7449365UL, 0x3e306419UL, 0x80000000UL,\n+    0x3fd913beUL, 0x1746e791UL, 0x3e56fcfcUL, 0x40000000UL, 0x3fd8e9dfUL,\n+    0xf3a9028bUL, 0xbe5041b9UL, 0xc0000000UL, 0x3fd8c012UL, 0x56840c50UL,\n+    0xbe26e20aUL, 0x40000000UL, 0x3fd89659UL, 0x19763102UL, 0xbe51f466UL,\n+    0x80000000UL, 0x3fd86cb2UL, 0x7032de7cUL, 0xbe4d298aUL, 0x80000000UL,\n+    0x3fd8431eUL, 0xdeb39fabUL, 0xbe4361ebUL, 0x40000000UL, 0x3fd8199dUL,\n+    0x5d01cbe0UL, 0xbe5425b3UL, 0x80000000UL, 0x3fd7f02eUL, 0x3ce99aa9UL,\n+    0x3e146fa8UL, 0x80000000UL, 0x3fd7c6d2UL, 0xd1a262b9UL, 0xbe5a1a69UL,\n+    0xc0000000UL, 0x3fd79d88UL, 0x8606c236UL, 0x3e423a08UL, 0x80000000UL,\n+    0x3fd77451UL, 0x8fd1e1b7UL, 0x3e5a6a63UL, 0xc0000000UL, 0x3fd74b2cUL,\n+    0xe491456aUL, 0x3e42c1caUL, 0x40000000UL, 0x3fd7221aUL, 0x4499a6d7UL,\n+    0x3e36a69aUL, 0x00000000UL, 0x3fd6f91aUL, 0x5237df94UL, 0xbe0f8f02UL,\n+    0x00000000UL, 0x3fd6d02cUL, 0xb6482c6eUL, 0xbe5abcf7UL, 0x00000000UL,\n+    0x3fd6a750UL, 0x1919fd61UL, 0xbe57ade2UL, 0x00000000UL, 0x3fd67e86UL,\n+    0xaa7a994dUL, 0xbe3f3fbdUL, 0x00000000UL, 0x3fd655ceUL, 0x67db014cUL,\n+    0x3e33c550UL, 0x00000000UL, 0x3fd62d28UL, 0xa82856b7UL, 0xbe1409d1UL,\n+    0xc0000000UL, 0x3fd60493UL, 0x1e6a300dUL, 0x3e55d899UL, 0x80000000UL,\n+    0x3fd5dc11UL, 0x1222bd5cUL, 0xbe35bfc0UL, 0xc0000000UL, 0x3fd5b3a0UL,\n+    0x6e8dc2d3UL, 0x3e5d4d79UL, 0x00000000UL, 0x3fd58b42UL, 0xe0e4ace6UL,\n+    0xbe517303UL, 0x80000000UL, 0x3fd562f4UL, 0xb306e0a8UL, 0x3e5edf0fUL,\n+    0xc0000000UL, 0x3fd53ab8UL, 0x6574bc54UL, 0x3e5ee859UL, 0x80000000UL,\n+    0x3fd5128eUL, 0xea902207UL, 0x3e5f6188UL, 0xc0000000UL, 0x3fd4ea75UL,\n+    0x9f911d79UL, 0x3e511735UL, 0x80000000UL, 0x3fd4c26eUL, 0xf9c77397UL,\n+    0xbe5b1643UL, 0x40000000UL, 0x3fd49a78UL, 0x15fc9258UL, 0x3e479a37UL,\n+    0x80000000UL, 0x3fd47293UL, 0xd5a04dd9UL, 0xbe426e56UL, 0xc0000000UL,\n+    0x3fd44abfUL, 0xe04042f5UL, 0x3e56f7c6UL, 0x40000000UL, 0x3fd422fdUL,\n+    0x1d8bf2c8UL, 0x3e5d8810UL, 0x00000000UL, 0x3fd3fb4cUL, 0x88a8ddeeUL,\n+    0xbe311454UL, 0xc0000000UL, 0x3fd3d3abUL, 0x3e3b5e47UL, 0xbe5d1b72UL,\n+    0x40000000UL, 0x3fd3ac1cUL, 0xc2ab5d59UL, 0x3e31b02bUL, 0xc0000000UL,\n+    0x3fd3849dUL, 0xd4e34b9eUL, 0x3e51cb2fUL, 0x40000000UL, 0x3fd35d30UL,\n+    0x177204fbUL, 0xbe2b8cd7UL, 0x80000000UL, 0x3fd335d3UL, 0xfcd38c82UL,\n+    0xbe4356e1UL, 0x80000000UL, 0x3fd30e87UL, 0x64f54accUL, 0xbe4e6224UL,\n+    0x00000000UL, 0x3fd2e74cUL, 0xaa7975d9UL, 0x3e5dc0feUL, 0x80000000UL,\n+    0x3fd2c021UL, 0x516dab3fUL, 0xbe50ffa3UL, 0x40000000UL, 0x3fd29907UL,\n+    0x2bfb7313UL, 0x3e5674a2UL, 0xc0000000UL, 0x3fd271fdUL, 0x0549fc99UL,\n+    0x3e385d29UL, 0xc0000000UL, 0x3fd24b04UL, 0x55b63073UL, 0xbe500c6dUL,\n+    0x00000000UL, 0x3fd2241cUL, 0x3f91953aUL, 0x3e389977UL, 0xc0000000UL,\n+    0x3fd1fd43UL, 0xa1543f71UL, 0xbe3487abUL, 0xc0000000UL, 0x3fd1d67bUL,\n+    0x4ec8867cUL, 0x3df6a2dcUL, 0x00000000UL, 0x3fd1afc4UL, 0x4328e3bbUL,\n+    0x3e41d9c0UL, 0x80000000UL, 0x3fd1891cUL, 0x2e1cda84UL, 0x3e3bdd87UL,\n+    0x40000000UL, 0x3fd16285UL, 0x4b5331aeUL, 0xbe53128eUL, 0x00000000UL,\n+    0x3fd13bfeUL, 0xb9aec164UL, 0xbe52ac98UL, 0xc0000000UL, 0x3fd11586UL,\n+    0xd91e1316UL, 0xbe350630UL, 0x80000000UL, 0x3fd0ef1fUL, 0x7cacc12cUL,\n+    0x3e3f5219UL, 0x40000000UL, 0x3fd0c8c8UL, 0xbce277b7UL, 0x3e3d30c0UL,\n+    0x00000000UL, 0x3fd0a281UL, 0x2a63447dUL, 0xbe541377UL, 0x80000000UL,\n+    0x3fd07c49UL, 0xfac483b5UL, 0xbe5772ecUL, 0xc0000000UL, 0x3fd05621UL,\n+    0x36b8a570UL, 0xbe4fd4bdUL, 0xc0000000UL, 0x3fd03009UL, 0xbae505f7UL,\n+    0xbe450388UL, 0x80000000UL, 0x3fd00a01UL, 0x3e35aeadUL, 0xbe5430fcUL,\n+    0x80000000UL, 0x3fcfc811UL, 0x707475acUL, 0x3e38806eUL, 0x80000000UL,\n+    0x3fcf7c3fUL, 0xc91817fcUL, 0xbe40cceaUL, 0x80000000UL, 0x3fcf308cUL,\n+    0xae05d5e9UL, 0xbe4919b8UL, 0x80000000UL, 0x3fcee4f8UL, 0xae6cc9e6UL,\n+    0xbe530b94UL, 0x00000000UL, 0x3fce9983UL, 0x1efe3e8eUL, 0x3e57747eUL,\n+    0x00000000UL, 0x3fce4e2dUL, 0xda78d9bfUL, 0xbe59a608UL, 0x00000000UL,\n+    0x3fce02f5UL, 0x8abe2c2eUL, 0x3e4a35adUL, 0x00000000UL, 0x3fcdb7dcUL,\n+    0x1495450dUL, 0xbe0872ccUL, 0x80000000UL, 0x3fcd6ce1UL, 0x86ee0ba0UL,\n+    0xbe4f59a0UL, 0x00000000UL, 0x3fcd2205UL, 0xe81ca888UL, 0x3e5402c3UL,\n+    0x00000000UL, 0x3fccd747UL, 0x3b4424b9UL, 0x3e5dfdc3UL, 0x80000000UL,\n+    0x3fcc8ca7UL, 0xd305b56cUL, 0x3e202da6UL, 0x00000000UL, 0x3fcc4226UL,\n+    0x399a6910UL, 0xbe482a1cUL, 0x80000000UL, 0x3fcbf7c2UL, 0x747f7938UL,\n+    0xbe587372UL, 0x80000000UL, 0x3fcbad7cUL, 0x6fc246a0UL, 0x3e50d83dUL,\n+    0x00000000UL, 0x3fcb6355UL, 0xee9e9be5UL, 0xbe5c35bdUL, 0x80000000UL,\n+    0x3fcb194aUL, 0x8416c0bcUL, 0x3e546d4fUL, 0x00000000UL, 0x3fcacf5eUL,\n+    0x49f7f08fUL, 0x3e56da76UL, 0x00000000UL, 0x3fca858fUL, 0x5dc30de2UL,\n+    0x3e5f390cUL, 0x00000000UL, 0x3fca3bdeUL, 0x950583b6UL, 0xbe5e4169UL,\n+    0x80000000UL, 0x3fc9f249UL, 0x33631553UL, 0x3e52aeb1UL, 0x00000000UL,\n+    0x3fc9a8d3UL, 0xde8795a6UL, 0xbe59a504UL, 0x00000000UL, 0x3fc95f79UL,\n+    0x076bf41eUL, 0x3e5122feUL, 0x80000000UL, 0x3fc9163cUL, 0x2914c8e7UL,\n+    0x3e3dd064UL, 0x00000000UL, 0x3fc8cd1dUL, 0x3a30eca3UL, 0xbe21b4aaUL,\n+    0x80000000UL, 0x3fc8841aUL, 0xb2a96650UL, 0xbe575444UL, 0x80000000UL,\n+    0x3fc83b34UL, 0x2376c0cbUL, 0xbe2a74c7UL, 0x80000000UL, 0x3fc7f26bUL,\n+    0xd8a0b653UL, 0xbe5181b6UL, 0x00000000UL, 0x3fc7a9bfUL, 0x32257882UL,\n+    0xbe4a78b4UL, 0x00000000UL, 0x3fc7612fUL, 0x1eee8bd9UL, 0xbe1bfe9dUL,\n+    0x80000000UL, 0x3fc718bbUL, 0x0c603cc4UL, 0x3e36fdc9UL, 0x80000000UL,\n+    0x3fc6d064UL, 0x3728b8cfUL, 0xbe1e542eUL, 0x80000000UL, 0x3fc68829UL,\n+    0xc79a4067UL, 0x3e5c380fUL, 0x00000000UL, 0x3fc6400bUL, 0xf69eac69UL,\n+    0x3e550a84UL, 0x80000000UL, 0x3fc5f808UL, 0xb7a780a4UL, 0x3e5d9224UL,\n+    0x80000000UL, 0x3fc5b022UL, 0xad9dfb1eUL, 0xbe55242fUL, 0x00000000UL,\n+    0x3fc56858UL, 0x659b18beUL, 0xbe4bfda3UL, 0x80000000UL, 0x3fc520a9UL,\n+    0x66ee3631UL, 0xbe57d769UL, 0x80000000UL, 0x3fc4d916UL, 0x1ec62819UL,\n+    0x3e2427f7UL, 0x80000000UL, 0x3fc4919fUL, 0xdec25369UL, 0xbe435431UL,\n+    0x00000000UL, 0x3fc44a44UL, 0xa8acfc4bUL, 0xbe3c62e8UL, 0x00000000UL,\n+    0x3fc40304UL, 0xcf1d3eabUL, 0xbdfba29fUL, 0x80000000UL, 0x3fc3bbdfUL,\n+    0x79aba3eaUL, 0xbdf1b7c8UL, 0x80000000UL, 0x3fc374d6UL, 0xb8d186daUL,\n+    0xbe5130cfUL, 0x80000000UL, 0x3fc32de8UL, 0x9d74f152UL, 0x3e2285b6UL,\n+    0x00000000UL, 0x3fc2e716UL, 0x50ae7ca9UL, 0xbe503920UL, 0x80000000UL,\n+    0x3fc2a05eUL, 0x6caed92eUL, 0xbe533924UL, 0x00000000UL, 0x3fc259c2UL,\n+    0x9cb5034eUL, 0xbe510e31UL, 0x80000000UL, 0x3fc21340UL, 0x12c4d378UL,\n+    0xbe540b43UL, 0x80000000UL, 0x3fc1ccd9UL, 0xcc418706UL, 0x3e59887aUL,\n+    0x00000000UL, 0x3fc1868eUL, 0x921f4106UL, 0xbe528e67UL, 0x80000000UL,\n+    0x3fc1405cUL, 0x3969441eUL, 0x3e5d8051UL, 0x00000000UL, 0x3fc0fa46UL,\n+    0xd941ef5bUL, 0x3e5f9079UL, 0x80000000UL, 0x3fc0b44aUL, 0x5a3e81b2UL,\n+    0xbe567691UL, 0x00000000UL, 0x3fc06e69UL, 0x9d66afe7UL, 0xbe4d43fbUL,\n+    0x00000000UL, 0x3fc028a2UL, 0x0a92a162UL, 0xbe52f394UL, 0x00000000UL,\n+    0x3fbfc5eaUL, 0x209897e5UL, 0x3e529e37UL, 0x00000000UL, 0x3fbf3ac5UL,\n+    0x8458bd7bUL, 0x3e582831UL, 0x00000000UL, 0x3fbeafd5UL, 0xb8d8b4b8UL,\n+    0xbe486b4aUL, 0x00000000UL, 0x3fbe2518UL, 0xe0a3b7b6UL, 0x3e5bafd2UL,\n+    0x00000000UL, 0x3fbd9a90UL, 0x2bf2710eUL, 0x3e383b2bUL, 0x00000000UL,\n+    0x3fbd103cUL, 0x73eb6ab7UL, 0xbe56d78dUL, 0x00000000UL, 0x3fbc861bUL,\n+    0x32ceaff5UL, 0xbe32dc5aUL, 0x00000000UL, 0x3fbbfc2eUL, 0xbee04cb7UL,\n+    0xbe4a71a4UL, 0x00000000UL, 0x3fbb7274UL, 0x35ae9577UL, 0x3e38142fUL,\n+    0x00000000UL, 0x3fbae8eeUL, 0xcbaddab4UL, 0xbe5490f0UL, 0x00000000UL,\n+    0x3fba5f9aUL, 0x95ce1114UL, 0x3e597c71UL, 0x00000000UL, 0x3fb9d67aUL,\n+    0x6d7c0f78UL, 0x3e3abc2dUL, 0x00000000UL, 0x3fb94d8dUL, 0x2841a782UL,\n+    0xbe566cbcUL, 0x00000000UL, 0x3fb8c4d2UL, 0x6ed429c6UL, 0xbe3cfff9UL,\n+    0x00000000UL, 0x3fb83c4aUL, 0xe4a49fbbUL, 0xbe552964UL, 0x00000000UL,\n+    0x3fb7b3f4UL, 0x2193d81eUL, 0xbe42fa72UL, 0x00000000UL, 0x3fb72bd0UL,\n+    0xdd70c122UL, 0x3e527a8cUL, 0x00000000UL, 0x3fb6a3dfUL, 0x03108a54UL,\n+    0xbe450393UL, 0x00000000UL, 0x3fb61c1fUL, 0x30ff7954UL, 0x3e565840UL,\n+    0x00000000UL, 0x3fb59492UL, 0xdedd460cUL, 0xbe5422b5UL, 0x00000000UL,\n+    0x3fb50d36UL, 0x950f9f45UL, 0xbe5313f6UL, 0x00000000UL, 0x3fb4860bUL,\n+    0x582cdcb1UL, 0x3e506d39UL, 0x00000000UL, 0x3fb3ff12UL, 0x7216d3a6UL,\n+    0x3e4aa719UL, 0x00000000UL, 0x3fb3784aUL, 0x57a423fdUL, 0x3e5a9b9fUL,\n+    0x00000000UL, 0x3fb2f1b4UL, 0x7a138b41UL, 0xbe50b418UL, 0x00000000UL,\n+    0x3fb26b4eUL, 0x2fbfd7eaUL, 0x3e23a53eUL, 0x00000000UL, 0x3fb1e519UL,\n+    0x18913ccbUL, 0x3e465fc1UL, 0x00000000UL, 0x3fb15f15UL, 0x7ea24e21UL,\n+    0x3e042843UL, 0x00000000UL, 0x3fb0d941UL, 0x7c6d9c77UL, 0x3e59f61eUL,\n+    0x00000000UL, 0x3fb0539eUL, 0x114efd44UL, 0x3e4ccab7UL, 0x00000000UL,\n+    0x3faf9c56UL, 0x1777f657UL, 0x3e552f65UL, 0x00000000UL, 0x3fae91d2UL,\n+    0xc317b86aUL, 0xbe5a61e0UL, 0x00000000UL, 0x3fad87acUL, 0xb7664efbUL,\n+    0xbe41f64eUL, 0x00000000UL, 0x3fac7de6UL, 0x5d3d03a9UL, 0x3e0807a0UL,\n+    0x00000000UL, 0x3fab7480UL, 0x743c38ebUL, 0xbe3726e1UL, 0x00000000UL,\n+    0x3faa6b78UL, 0x06a253f1UL, 0x3e5ad636UL, 0x00000000UL, 0x3fa962d0UL,\n+    0xa35f541bUL, 0x3e5a187aUL, 0x00000000UL, 0x3fa85a88UL, 0x4b86e446UL,\n+    0xbe508150UL, 0x00000000UL, 0x3fa7529cUL, 0x2589cacfUL, 0x3e52938aUL,\n+    0x00000000UL, 0x3fa64b10UL, 0xaf6b11f2UL, 0xbe3454cdUL, 0x00000000UL,\n+    0x3fa543e2UL, 0x97506fefUL, 0xbe5fdec5UL, 0x00000000UL, 0x3fa43d10UL,\n+    0xe75f7dd9UL, 0xbe388dd3UL, 0x00000000UL, 0x3fa3369cUL, 0xa4139632UL,\n+    0xbdea5177UL, 0x00000000UL, 0x3fa23086UL, 0x352d6f1eUL, 0xbe565ad6UL,\n+    0x00000000UL, 0x3fa12accUL, 0x77449eb7UL, 0xbe50d5c7UL, 0x00000000UL,\n+    0x3fa0256eUL, 0x7478da78UL, 0x3e404724UL, 0x00000000UL, 0x3f9e40dcUL,\n+    0xf59cef7fUL, 0xbe539d0aUL, 0x00000000UL, 0x3f9c3790UL, 0x1511d43cUL,\n+    0x3e53c2c8UL, 0x00000000UL, 0x3f9a2f00UL, 0x9b8bff3cUL, 0xbe43b3e1UL,\n+    0x00000000UL, 0x3f982724UL, 0xad1e22a5UL, 0x3e46f0bdUL, 0x00000000UL,\n+    0x3f962000UL, 0x130d9356UL, 0x3e475ba0UL, 0x00000000UL, 0x3f941994UL,\n+    0x8f86f883UL, 0xbe513d0bUL, 0x00000000UL, 0x3f9213dcUL, 0x914d0dc8UL,\n+    0xbe534335UL, 0x00000000UL, 0x3f900ed8UL, 0x2d73e5e7UL, 0xbe22ba75UL,\n+    0x00000000UL, 0x3f8c1510UL, 0xc5b7d70eUL, 0x3e599c5dUL, 0x00000000UL,\n+    0x3f880de0UL, 0x8a27857eUL, 0xbe3d28c8UL, 0x00000000UL, 0x3f840810UL,\n+    0xda767328UL, 0x3e531b3dUL, 0x00000000UL, 0x3f8003b0UL, 0x77bacaf3UL,\n+    0xbe5f04e3UL, 0x00000000UL, 0x3f780150UL, 0xdf4b0720UL, 0x3e5a8bffUL,\n+    0x00000000UL, 0x3f6ffc40UL, 0x34c48e71UL, 0xbe3fcd99UL, 0x00000000UL,\n+    0x3f5ff6c0UL, 0x1ad218afUL, 0xbe4c78a7UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x80000000UL\n+};\n+\n+ATTRIBUTE_ALIGNED(8) juint _log2_pow[] = {\n+    0xfefa39efUL, 0x3fe62e42UL, 0xfefa39efUL, 0xbfe62e42UL\n+};\n+\n+ATTRIBUTE_ALIGNED(8) juint _DOUBLE2[] = {\n+    0x00000000UL, 0x40000000UL\n+};\n+\n+ATTRIBUTE_ALIGNED(8) juint _DOUBLE0[] = {\n+    0x00000000UL, 0x00000000UL\n+};\n+\n+ATTRIBUTE_ALIGNED(8) juint _DOUBLE0DOT5[] = {\n+    0x00000000UL, 0x3fe00000UL\n+};\n+\n+#define __ _masm->\n+\n+address StubGenerator::generate_libmPow() {\n+  StubCodeMark mark(this, \"StubRoutines\", \"libmPow\");\n+  address start = __ pc();\n+\n+  Label L_2TAG_PACKET_0_0_2, L_2TAG_PACKET_1_0_2, L_2TAG_PACKET_2_0_2, L_2TAG_PACKET_3_0_2;\n+  Label L_2TAG_PACKET_4_0_2, L_2TAG_PACKET_5_0_2, L_2TAG_PACKET_6_0_2, L_2TAG_PACKET_7_0_2;\n+  Label L_2TAG_PACKET_8_0_2, L_2TAG_PACKET_9_0_2, L_2TAG_PACKET_10_0_2, L_2TAG_PACKET_11_0_2;\n+  Label L_2TAG_PACKET_12_0_2, L_2TAG_PACKET_13_0_2, L_2TAG_PACKET_14_0_2, L_2TAG_PACKET_15_0_2;\n+  Label L_2TAG_PACKET_16_0_2, L_2TAG_PACKET_17_0_2, L_2TAG_PACKET_18_0_2, L_2TAG_PACKET_19_0_2;\n+  Label L_2TAG_PACKET_20_0_2, L_2TAG_PACKET_21_0_2, L_2TAG_PACKET_22_0_2, L_2TAG_PACKET_23_0_2;\n+  Label L_2TAG_PACKET_24_0_2, L_2TAG_PACKET_25_0_2, L_2TAG_PACKET_26_0_2, L_2TAG_PACKET_27_0_2;\n+  Label L_2TAG_PACKET_28_0_2, L_2TAG_PACKET_29_0_2, L_2TAG_PACKET_30_0_2, L_2TAG_PACKET_31_0_2;\n+  Label L_2TAG_PACKET_32_0_2, L_2TAG_PACKET_33_0_2, L_2TAG_PACKET_34_0_2, L_2TAG_PACKET_35_0_2;\n+  Label L_2TAG_PACKET_36_0_2, L_2TAG_PACKET_37_0_2, L_2TAG_PACKET_38_0_2, L_2TAG_PACKET_39_0_2;\n+  Label L_2TAG_PACKET_40_0_2, L_2TAG_PACKET_41_0_2, L_2TAG_PACKET_42_0_2, L_2TAG_PACKET_43_0_2;\n+  Label L_2TAG_PACKET_44_0_2, L_2TAG_PACKET_45_0_2, L_2TAG_PACKET_46_0_2, L_2TAG_PACKET_47_0_2;\n+  Label L_2TAG_PACKET_48_0_2, L_2TAG_PACKET_49_0_2, L_2TAG_PACKET_50_0_2, L_2TAG_PACKET_51_0_2;\n+  Label L_2TAG_PACKET_52_0_2, L_2TAG_PACKET_53_0_2, L_2TAG_PACKET_54_0_2, L_2TAG_PACKET_55_0_2;\n+  Label L_2TAG_PACKET_56_0_2;\n+  Label B1_2, B1_3, B1_5;\n+  Label L_POW;\n+\n+  address HIGHSIGMASK    = (address)_HIGHSIGMASK;\n+  address LOG2_E         = (address)_LOG2_E;\n+  address coeff          = (address)_coeff_pow;\n+  address L_tbl          = (address)_L_tbl_pow;\n+  address HIGHMASK_Y     = (address)_HIGHMASK_Y;\n+  address T_exp          = (address)_T_exp;\n+  address e_coeff        = (address)_e_coeff;\n+  address coeff_h        = (address)_coeff_h;\n+  address HIGHMASK_LOG_X = (address)_HIGHMASK_LOG_X;\n+  address HALFMASK       = (address)_HALFMASK;\n+  address log2           = (address)_log2_pow;\n+  address DOUBLE2        = (address)_DOUBLE2;\n+  address DOUBLE0        = (address)_DOUBLE0;\n+  address DOUBLE0DOT5    = (address)_DOUBLE0DOT5;\n+\n+  __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+\n+  __ subq(rsp, 40);\n+  __ movsd(Address(rsp, 8), xmm0);\n+  __ movsd(Address(rsp, 16), xmm1);\n+\n+  \/\/ Special case: pow(x, 2.0) => x * x\n+  __ movdq(r8, xmm1);\n+  __ cmp64(r8, ExternalAddress(DOUBLE2), r9 \/*rscratch*\/);\n+  __ jccb(Assembler::notEqual, B1_2);\n+  __ mulsd(xmm0, xmm0);\n+  __ jmp(B1_5);\n+\n+  \/\/ Special case: pow(x, 0.5) => sqrt(x)\n+  __ bind(B1_2);\n+  __ cmp64(r8, ExternalAddress(DOUBLE0DOT5), r9 \/*rscratch*\/);\n+  __ jccb(Assembler::notEqual, L_POW); \/\/ For pow(x, y), check whether y == 0.5\n+  __ movdq(r9, xmm0);\n+  __ cmp64(r9, ExternalAddress(DOUBLE0), r10 \/*rscratch*\/);\n+  __ jccb(Assembler::less, L_POW); \/\/ pow(x, 0.5) => sqrt(x) only for x >= 0.0 or x is +inf\/NaN\n+  __ sqrtsd(xmm0, xmm0);\n+  __ jmp(B1_5);\n+\n+  __ bind(L_POW);\n+  __ pextrw(rax, xmm0, 3);\n+  __ xorpd(xmm2, xmm2);\n+  __ mov64(r9, 0x3ff0000000000000);\n+  __ movdq(xmm2, r9);\n+  __ movl(r8, 1069088768);\n+  __ movdq(xmm7, r8);\n+  __ xorpd(xmm1, xmm1);\n+  __ mov64(r10, 0x77f0000000000000);\n+  __ movdq(xmm1, r10);\n+  __ movdqu(xmm3, xmm0);\n+  __ movl(rdx, 32752);\n+  __ andl(rdx, rax);\n+  __ subl(rdx, 16368);\n+  __ movl(rcx, rdx);\n+  __ sarl(rdx, 31);\n+  __ addl(rcx, rdx);\n+  __ xorl(rcx, rdx);\n+  __ por(xmm0, xmm2);\n+  __ movdqu(xmm6, ExternalAddress(HIGHSIGMASK), r9 \/*rscratch*\/);    \/\/0x00000000UL, 0xfffff800UL, 0x00000000UL, 0xfffff800UL\n+  __ psrlq(xmm0, 27);\n+  __ movq(xmm2, ExternalAddress(LOG2_E), r9 \/*rscratch*\/);    \/\/0x00000000UL, 0x3ff72000UL, 0x161bb241UL, 0xbf5dabe1UL\n+  __ psrld(xmm0, 2);\n+  __ addl(rcx, 16);\n+  __ bsrl(rcx, rcx);\n+  __ rcpps(xmm0, xmm0);\n+  __ psllq(xmm3, 12);\n+  __ movl(r11, 8192);\n+  __ movdq(xmm4, r11);\n+  __ psrlq(xmm3, 12);\n+  __ subl(rax, 16);\n+  __ cmpl(rax, 32736);\n+  __ jcc(Assembler::aboveEqual, L_2TAG_PACKET_0_0_2);\n+  __ movl(r8, 0);\n+\n+  __ bind(L_2TAG_PACKET_1_0_2);\n+  __ mulss(xmm0, xmm7);\n+  __ movl(rdx, -1);\n+  __ subl(rcx, 4);\n+  __ shll(rdx);\n+  __ shlq(rdx, 32);\n+  __ movdq(xmm5, rdx);\n+  __ por(xmm3, xmm1);\n+  __ subl(rax, 16351);\n+  __ cmpl(rax, 1);\n+  __ jcc(Assembler::belowEqual, L_2TAG_PACKET_2_0_2);\n+  __ paddd(xmm0, xmm4);\n+  __ pand(xmm5, xmm3);\n+  __ movdl(rdx, xmm0);\n+  __ psllq(xmm0, 29);\n+\n+  __ bind(L_2TAG_PACKET_3_0_2);\n+  __ subsd(xmm3, xmm5);\n+  __ pand(xmm0, xmm6);\n+  __ subl(rax, 1);\n+  __ sarl(rax, 4);\n+  __ cvtsi2sdl(xmm7, rax);\n+  __ mulpd(xmm5, xmm0);\n+\n+  __ bind(L_2TAG_PACKET_4_0_2);\n+  __ mulsd(xmm3, xmm0);\n+  __ movdqu(xmm1, ExternalAddress(coeff), r9 \/*rscratch*\/);    \/\/0x6dc96112UL, 0xbf836578UL, 0xee241472UL, 0xbf9b0301UL\n+  __ lea(r11, ExternalAddress(L_tbl));\n+  __ subsd(xmm5, xmm2);\n+  __ movdqu(xmm4, ExternalAddress(coeff + 16), r9 \/*rscratch*\/);    \/\/0x9f95985aUL, 0xbfb528dbUL, 0xb3841d2aUL, 0xbfd619b6UL\n+  __ movl(rcx, rax);\n+  __ sarl(rax, 31);\n+  __ addl(rcx, rax);\n+  __ xorl(rax, rcx);\n+  __ addl(rax, 1);\n+  __ bsrl(rax, rax);\n+  __ unpcklpd(xmm5, xmm3);\n+  __ movdqu(xmm6, ExternalAddress(coeff + 32), r9 \/*rscratch*\/);    \/\/0x518775e3UL, 0x3f9004f2UL, 0xac8349bbUL, 0x3fa76c9bUL\n+  __ addsd(xmm3, xmm5);\n+  __ andl(rdx, 16760832);\n+  __ shrl(rdx, 10);\n+  __ addpd(xmm5, Address(r11, rdx, Address::times_1, -3648));\n+  __ movdqu(xmm0, ExternalAddress(coeff + 48), r9 \/*rscratch*\/);    \/\/0x486ececcUL, 0x3fc4635eUL, 0x161bb241UL, 0xbf5dabe1UL\n+  __ pshufd(xmm2, xmm3, 68);\n+  __ mulsd(xmm3, xmm3);\n+  __ mulpd(xmm1, xmm2);\n+  __ mulpd(xmm4, xmm2);\n+  __ addsd(xmm5, xmm7);\n+  __ mulsd(xmm2, xmm3);\n+  __ addpd(xmm6, xmm1);\n+  __ mulsd(xmm3, xmm3);\n+  __ addpd(xmm0, xmm4);\n+  __ movq(xmm1, Address(rsp, 16));\n+  __ movw(rcx, Address(rsp, 22));\n+  __ pshufd(xmm7, xmm5, 238);\n+  __ movq(xmm4, ExternalAddress(HIGHMASK_Y), r9 \/*rscratch*\/);    \/\/0x00000000UL, 0xfffffff8UL, 0x00000000UL, 0xffffffffUL\n+  __ mulpd(xmm6, xmm2);\n+  __ pshufd(xmm3, xmm3, 68);\n+  __ mulpd(xmm0, xmm2);\n+  __ shll(rax, 4);\n+  __ subl(rax, 15872);\n+  __ andl(rcx, 32752);\n+  __ addl(rax, rcx);\n+  __ mulpd(xmm3, xmm6);\n+  __ cmpl(rax, 624);\n+  __ jcc(Assembler::aboveEqual, L_2TAG_PACKET_5_0_2);\n+  __ xorpd(xmm6, xmm6);\n+  __ movl(rdx, 17080);\n+  __ pinsrw(xmm6, rdx, 3);\n+  __ movdqu(xmm2, xmm1);\n+  __ pand(xmm4, xmm1);\n+  __ subsd(xmm1, xmm4);\n+  __ mulsd(xmm4, xmm5);\n+  __ addsd(xmm0, xmm7);\n+  __ mulsd(xmm1, xmm5);\n+  __ movdqu(xmm7, xmm6);\n+  __ addsd(xmm6, xmm4);\n+  __ lea(r11, ExternalAddress(T_exp));\n+  __ addpd(xmm3, xmm0);\n+  __ movdl(rdx, xmm6);\n+  __ subsd(xmm6, xmm7);\n+  __ pshufd(xmm0, xmm3, 238);\n+  __ subsd(xmm4, xmm6);\n+  __ addsd(xmm0, xmm3);\n+  __ movl(rcx, rdx);\n+  __ andl(rdx, 255);\n+  __ addl(rdx, rdx);\n+  __ movdqu(xmm5, Address(r11, rdx, Address::times_8, 0));\n+  __ addsd(xmm4, xmm1);\n+  __ mulsd(xmm2, xmm0);\n+  __ movdqu(xmm7, ExternalAddress(e_coeff),      r9 \/*rscratch*\/);    \/\/0xe78a6731UL, 0x3f55d87fUL, 0xd704a0c0UL, 0x3fac6b08UL\n+  __ movdqu(xmm3, ExternalAddress(e_coeff + 16), r9 \/*rscratch*\/);    \/\/0x6fba4e77UL, 0x3f83b2abUL, 0xff82c58fUL, 0x3fcebfbdUL\n+  __ shll(rcx, 12);\n+  __ xorl(rcx, r8);\n+  __ andl(rcx, -1048576);\n+  __ movdq(xmm6, rcx);\n+  __ addsd(xmm2, xmm4);\n+  __ mov64(r9, 0x3fe62e42fefa39ef);\n+  __ movdq(xmm1, r9);\n+  __ pshufd(xmm0, xmm2, 68);\n+  __ pshufd(xmm4, xmm2, 68);\n+  __ mulsd(xmm1, xmm2);\n+  __ pshufd(xmm6, xmm6, 17);\n+  __ mulpd(xmm0, xmm0);\n+  __ mulpd(xmm7, xmm4);\n+  __ paddd(xmm5, xmm6);\n+  __ mulsd(xmm1, xmm5);\n+  __ pshufd(xmm6, xmm5, 238);\n+  __ mulsd(xmm0, xmm0);\n+  __ addpd(xmm3, xmm7);\n+  __ addsd(xmm1, xmm6);\n+  __ mulpd(xmm0, xmm3);\n+  __ pshufd(xmm3, xmm0, 238);\n+  __ mulsd(xmm0, xmm5);\n+  __ mulsd(xmm3, xmm5);\n+  __ addsd(xmm0, xmm1);\n+  __ addsd(xmm0, xmm3);\n+  __ addsd(xmm0, xmm5);\n+  __ jmp(B1_5);\n+\n+  __ bind(L_2TAG_PACKET_0_0_2);\n+  __ addl(rax, 16);\n+  __ movl(rdx, 32752);\n+  __ andl(rdx, rax);\n+  __ cmpl(rdx, 32752);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_6_0_2);\n+  __ testl(rax, 32768);\n+  __ jcc(Assembler::notEqual, L_2TAG_PACKET_7_0_2);\n+\n+  __ bind(L_2TAG_PACKET_8_0_2);\n+  __ movq(xmm0, Address(rsp, 8));\n+  __ movq(xmm3, Address(rsp, 8));\n+  __ movdl(rdx, xmm3);\n+  __ psrlq(xmm3, 32);\n+  __ movdl(rcx, xmm3);\n+  __ orl(rdx, rcx);\n+  __ cmpl(rdx, 0);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_9_0_2);\n+  __ xorpd(xmm3, xmm3);\n+  __ movl(rax, 18416);\n+  __ pinsrw(xmm3, rax, 3);\n+  __ mulsd(xmm0, xmm3);\n+  __ xorpd(xmm2, xmm2);\n+  __ movl(rax, 16368);\n+  __ pinsrw(xmm2, rax, 3);\n+  __ movdqu(xmm3, xmm0);\n+  __ pextrw(rax, xmm0, 3);\n+  __ por(xmm0, xmm2);\n+  __ movl(rcx, 18416);\n+  __ psrlq(xmm0, 27);\n+  __ movq(xmm2, ExternalAddress(LOG2_E), r9 \/*rscratch*\/);    \/\/0x00000000UL, 0x3ff72000UL, 0x161bb241UL, 0xbf5dabe1UL\n+  __ psrld(xmm0, 2);\n+  __ rcpps(xmm0, xmm0);\n+  __ psllq(xmm3, 12);\n+  __ movdqu(xmm6, ExternalAddress(HIGHSIGMASK), r9 \/*rscratch*\/);    \/\/0x00000000UL, 0xfffff800UL, 0x00000000UL, 0xfffff800UL\n+  __ psrlq(xmm3, 12);\n+  __ mulss(xmm0, xmm7);\n+  __ movl(rdx, -1024);\n+  __ movdl(xmm5, rdx);\n+  __ por(xmm3, xmm1);\n+  __ paddd(xmm0, xmm4);\n+  __ psllq(xmm5, 32);\n+  __ movdl(rdx, xmm0);\n+  __ psllq(xmm0, 29);\n+  __ pand(xmm5, xmm3);\n+  __ movl(r8, 0);\n+  __ pand(xmm0, xmm6);\n+  __ subsd(xmm3, xmm5);\n+  __ andl(rax, 32752);\n+  __ subl(rax, 18416);\n+  __ sarl(rax, 4);\n+  __ cvtsi2sdl(xmm7, rax);\n+  __ mulpd(xmm5, xmm0);\n+  __ jmp(L_2TAG_PACKET_4_0_2);\n+\n+  __ bind(L_2TAG_PACKET_10_0_2);\n+  __ movq(xmm0, Address(rsp, 8));\n+  __ movq(xmm3, Address(rsp, 8));\n+  __ movdl(rdx, xmm3);\n+  __ psrlq(xmm3, 32);\n+  __ movdl(rcx, xmm3);\n+  __ orl(rdx, rcx);\n+  __ cmpl(rdx, 0);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_9_0_2);\n+  __ xorpd(xmm3, xmm3);\n+  __ movl(rax, 18416);\n+  __ pinsrw(xmm3, rax, 3);\n+  __ mulsd(xmm0, xmm3);\n+  __ xorpd(xmm2, xmm2);\n+  __ movl(rax, 16368);\n+  __ pinsrw(xmm2, rax, 3);\n+  __ movdqu(xmm3, xmm0);\n+  __ pextrw(rax, xmm0, 3);\n+  __ por(xmm0, xmm2);\n+  __ movl(rcx, 18416);\n+  __ psrlq(xmm0, 27);\n+  __ movq(xmm2, ExternalAddress(LOG2_E), r9 \/*rscratch*\/);    \/\/0x00000000UL, 0x3ff72000UL, 0x161bb241UL, 0xbf5dabe1UL\n+  __ psrld(xmm0, 2);\n+  __ rcpps(xmm0, xmm0);\n+  __ psllq(xmm3, 12);\n+  __ movdqu(xmm6, ExternalAddress(HIGHSIGMASK), r9 \/*rscratch*\/);    \/\/0x00000000UL, 0xfffff800UL, 0x00000000UL, 0xfffff800UL\n+  __ psrlq(xmm3, 12);\n+  __ mulss(xmm0, xmm7);\n+  __ movl(rdx, -1024);\n+  __ movdl(xmm5, rdx);\n+  __ por(xmm3, xmm1);\n+  __ paddd(xmm0, xmm4);\n+  __ psllq(xmm5, 32);\n+  __ movdl(rdx, xmm0);\n+  __ psllq(xmm0, 29);\n+  __ pand(xmm5, xmm3);\n+  __ movl(r8, INT_MIN);\n+  __ pand(xmm0, xmm6);\n+  __ subsd(xmm3, xmm5);\n+  __ andl(rax, 32752);\n+  __ subl(rax, 18416);\n+  __ sarl(rax, 4);\n+  __ cvtsi2sdl(xmm7, rax);\n+  __ mulpd(xmm5, xmm0);\n+  __ jmp(L_2TAG_PACKET_4_0_2);\n+\n+  __ bind(L_2TAG_PACKET_5_0_2);\n+  __ cmpl(rax, 0);\n+  __ jcc(Assembler::less, L_2TAG_PACKET_11_0_2);\n+  __ cmpl(rax, 752);\n+  __ jcc(Assembler::aboveEqual, L_2TAG_PACKET_12_0_2);\n+  __ addsd(xmm0, xmm7);\n+  __ movq(xmm2, ExternalAddress(HALFMASK), r9 \/*rscratch*\/);    \/\/0xf8000000UL, 0xffffffffUL, 0xf8000000UL, 0xffffffffUL\n+  __ addpd(xmm3, xmm0);\n+  __ xorpd(xmm6, xmm6);\n+  __ movl(rax, 17080);\n+  __ pinsrw(xmm6, rax, 3);\n+  __ pshufd(xmm0, xmm3, 238);\n+  __ addsd(xmm0, xmm3);\n+  __ movdqu(xmm3, xmm5);\n+  __ addsd(xmm5, xmm0);\n+  __ movdqu(xmm4, xmm2);\n+  __ subsd(xmm3, xmm5);\n+  __ movdqu(xmm7, xmm5);\n+  __ pand(xmm5, xmm2);\n+  __ movdqu(xmm2, xmm1);\n+  __ pand(xmm4, xmm1);\n+  __ subsd(xmm7, xmm5);\n+  __ addsd(xmm0, xmm3);\n+  __ subsd(xmm1, xmm4);\n+  __ mulsd(xmm4, xmm5);\n+  __ addsd(xmm0, xmm7);\n+  __ mulsd(xmm2, xmm0);\n+  __ movdqu(xmm7, xmm6);\n+  __ mulsd(xmm1, xmm5);\n+  __ addsd(xmm6, xmm4);\n+  __ movdl(rax, xmm6);\n+  __ subsd(xmm6, xmm7);\n+  __ lea(r11, ExternalAddress(T_exp));\n+  __ addsd(xmm2, xmm1);\n+  __ movdqu(xmm7, ExternalAddress(e_coeff +  0), r9 \/*rscratch*\/);    \/\/0xe78a6731UL, 0x3f55d87fUL, 0xd704a0c0UL, 0x3fac6b08UL\n+  __ movdqu(xmm3, ExternalAddress(e_coeff + 16), r9 \/*rscratch*\/);    \/\/0x6fba4e77UL, 0x3f83b2abUL, 0xff82c58fUL, 0x3fcebfbdUL\n+  __ subsd(xmm4, xmm6);\n+  __ pextrw(rdx, xmm6, 3);\n+  __ movl(rcx, rax);\n+  __ andl(rax, 255);\n+  __ addl(rax, rax);\n+  __ movdqu(xmm5, Address(r11, rax, Address::times_8, 0));\n+  __ addsd(xmm2, xmm4);\n+  __ sarl(rcx, 8);\n+  __ movl(rax, rcx);\n+  __ sarl(rcx, 1);\n+  __ subl(rax, rcx);\n+  __ shll(rcx, 20);\n+  __ xorl(rcx, r8);\n+  __ movdl(xmm6, rcx);\n+  __ movq(xmm1, ExternalAddress(e_coeff + 32), r9 \/*rscratch*\/);    \/\/0xfefa39efUL, 0x3fe62e42UL, 0x00000000UL, 0x00000000UL\n+  __ andl(rdx, 32767);\n+  __ cmpl(rdx, 16529);\n+  __ jcc(Assembler::above, L_2TAG_PACKET_12_0_2);\n+  __ pshufd(xmm0, xmm2, 68);\n+  __ pshufd(xmm4, xmm2, 68);\n+  __ mulpd(xmm0, xmm0);\n+  __ mulpd(xmm7, xmm4);\n+  __ pshufd(xmm6, xmm6, 17);\n+  __ mulsd(xmm1, xmm2);\n+  __ mulsd(xmm0, xmm0);\n+  __ paddd(xmm5, xmm6);\n+  __ addpd(xmm3, xmm7);\n+  __ mulsd(xmm1, xmm5);\n+  __ pshufd(xmm6, xmm5, 238);\n+  __ mulpd(xmm0, xmm3);\n+  __ addsd(xmm1, xmm6);\n+  __ pshufd(xmm3, xmm0, 238);\n+  __ mulsd(xmm0, xmm5);\n+  __ mulsd(xmm3, xmm5);\n+  __ shll(rax, 4);\n+  __ xorpd(xmm4, xmm4);\n+  __ addl(rax, 16368);\n+  __ pinsrw(xmm4, rax, 3);\n+  __ addsd(xmm0, xmm1);\n+  __ addsd(xmm0, xmm3);\n+  __ movdqu(xmm1, xmm0);\n+  __ addsd(xmm0, xmm5);\n+  __ mulsd(xmm0, xmm4);\n+  __ pextrw(rax, xmm0, 3);\n+  __ andl(rax, 32752);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_13_0_2);\n+  __ cmpl(rax, 32752);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_14_0_2);\n+  __ jmp(B1_5);\n+\n+  __ bind(L_2TAG_PACKET_6_0_2);\n+  __ movq(xmm1, Address(rsp, 16));\n+  __ movq(xmm0, Address(rsp, 8));\n+  __ movdqu(xmm2, xmm0);\n+  __ movdl(rax, xmm2);\n+  __ psrlq(xmm2, 20);\n+  __ movdl(rdx, xmm2);\n+  __ orl(rax, rdx);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_15_0_2);\n+  __ movdl(rax, xmm1);\n+  __ psrlq(xmm1, 32);\n+  __ movdl(rdx, xmm1);\n+  __ movl(rcx, rdx);\n+  __ addl(rdx, rdx);\n+  __ orl(rax, rdx);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_16_0_2);\n+  __ addsd(xmm0, xmm0);\n+  __ jmp(B1_5);\n+\n+  __ bind(L_2TAG_PACKET_16_0_2);\n+  __ xorpd(xmm0, xmm0);\n+  __ movl(rax, 16368);\n+  __ pinsrw(xmm0, rax, 3);\n+  __ movl(Address(rsp, 0), 29);\n+  __ jmp(L_2TAG_PACKET_17_0_2);\n+\n+  __ bind(L_2TAG_PACKET_18_0_2);\n+  __ movq(xmm0, Address(rsp, 16));\n+  __ addpd(xmm0, xmm0);\n+  __ jmp(B1_5);\n+\n+  __ bind(L_2TAG_PACKET_15_0_2);\n+  __ movdl(rax, xmm1);\n+  __ movdqu(xmm2, xmm1);\n+  __ psrlq(xmm1, 32);\n+  __ movdl(rdx, xmm1);\n+  __ movl(rcx, rdx);\n+  __ addl(rdx, rdx);\n+  __ orl(rax, rdx);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_19_0_2);\n+  __ pextrw(rax, xmm2, 3);\n+  __ andl(rax, 32752);\n+  __ cmpl(rax, 32752);\n+  __ jcc(Assembler::notEqual, L_2TAG_PACKET_20_0_2);\n+  __ movdl(rax, xmm2);\n+  __ psrlq(xmm2, 20);\n+  __ movdl(rdx, xmm2);\n+  __ orl(rax, rdx);\n+  __ jcc(Assembler::notEqual, L_2TAG_PACKET_18_0_2);\n+\n+  __ bind(L_2TAG_PACKET_20_0_2);\n+  __ pextrw(rax, xmm0, 3);\n+  __ testl(rax, 32768);\n+  __ jcc(Assembler::notEqual, L_2TAG_PACKET_21_0_2);\n+  __ testl(rcx, INT_MIN);\n+  __ jcc(Assembler::notEqual, L_2TAG_PACKET_22_0_2);\n+  __ jmp(B1_5);\n+\n+  __ bind(L_2TAG_PACKET_23_0_2);\n+  __ movq(xmm1, Address(rsp, 16));\n+  __ movdl(rax, xmm1);\n+  __ testl(rax, 1);\n+  __ jcc(Assembler::notEqual, L_2TAG_PACKET_24_0_2);\n+  __ testl(rax, 2);\n+  __ jcc(Assembler::notEqual, L_2TAG_PACKET_25_0_2);\n+  __ jmp(L_2TAG_PACKET_24_0_2);\n+\n+  __ bind(L_2TAG_PACKET_21_0_2);\n+  __ shrl(rcx, 20);\n+  __ andl(rcx, 2047);\n+  __ cmpl(rcx, 1075);\n+  __ jcc(Assembler::above, L_2TAG_PACKET_24_0_2);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_26_0_2);\n+  __ cmpl(rcx, 1074);\n+  __ jcc(Assembler::above, L_2TAG_PACKET_23_0_2);\n+  __ cmpl(rcx, 1023);\n+  __ jcc(Assembler::below, L_2TAG_PACKET_24_0_2);\n+  __ movq(xmm1, Address(rsp, 16));\n+  __ movl(rax, 17208);\n+  __ xorpd(xmm3, xmm3);\n+  __ pinsrw(xmm3, rax, 3);\n+  __ movdqu(xmm4, xmm3);\n+  __ addsd(xmm3, xmm1);\n+  __ subsd(xmm4, xmm3);\n+  __ addsd(xmm1, xmm4);\n+  __ pextrw(rax, xmm1, 3);\n+  __ andl(rax, 32752);\n+  __ jcc(Assembler::notEqual, L_2TAG_PACKET_24_0_2);\n+  __ movdl(rax, xmm3);\n+  __ andl(rax, 1);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_24_0_2);\n+\n+  __ bind(L_2TAG_PACKET_25_0_2);\n+  __ movq(xmm1, Address(rsp, 16));\n+  __ pextrw(rax, xmm1, 3);\n+  __ andl(rax, 32768);\n+  __ jcc(Assembler::notEqual, L_2TAG_PACKET_27_0_2);\n+  __ jmp(B1_5);\n+\n+  __ bind(L_2TAG_PACKET_27_0_2);\n+  __ xorpd(xmm0, xmm0);\n+  __ movl(rax, 32768);\n+  __ pinsrw(xmm0, rax, 3);\n+  __ jmp(B1_5);\n+\n+  __ bind(L_2TAG_PACKET_24_0_2);\n+  __ movq(xmm1, Address(rsp, 16));\n+  __ pextrw(rax, xmm1, 3);\n+  __ andl(rax, 32768);\n+  __ jcc(Assembler::notEqual, L_2TAG_PACKET_22_0_2);\n+  __ xorpd(xmm0, xmm0);\n+  __ movl(rax, 32752);\n+  __ pinsrw(xmm0, rax, 3);\n+  __ jmp(B1_5);\n+\n+  __ bind(L_2TAG_PACKET_26_0_2);\n+  __ movq(xmm1, Address(rsp, 16));\n+  __ movdl(rax, xmm1);\n+  __ andl(rax, 1);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_24_0_2);\n+  __ jmp(L_2TAG_PACKET_25_0_2);\n+\n+  __ bind(L_2TAG_PACKET_28_0_2);\n+  __ movdl(rax, xmm1);\n+  __ psrlq(xmm1, 20);\n+  __ movdl(rdx, xmm1);\n+  __ orl(rax, rdx);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_29_0_2);\n+  __ movq(xmm0, Address(rsp, 16));\n+  __ addsd(xmm0, xmm0);\n+  __ jmp(B1_5);\n+\n+  __ bind(L_2TAG_PACKET_29_0_2);\n+  __ movq(xmm0, Address(rsp, 8));\n+  __ pextrw(rax, xmm0, 3);\n+  __ cmpl(rax, 49136);\n+  __ jcc(Assembler::notEqual, L_2TAG_PACKET_30_0_2);\n+  __ movdl(rcx, xmm0);\n+  __ psrlq(xmm0, 20);\n+  __ movdl(rdx, xmm0);\n+  __ orl(rcx, rdx);\n+  __ jcc(Assembler::notEqual, L_2TAG_PACKET_30_0_2);\n+  __ xorpd(xmm0, xmm0);\n+  __ movl(rax, 32760);\n+  __ pinsrw(xmm0, rax, 3);\n+  __ jmp(B1_5);\n+\n+  __ bind(L_2TAG_PACKET_30_0_2);\n+  __ movq(xmm1, Address(rsp, 16));\n+  __ andl(rax, 32752);\n+  __ subl(rax, 16368);\n+  __ pextrw(rdx, xmm1, 3);\n+  __ xorpd(xmm0, xmm0);\n+  __ xorl(rax, rdx);\n+  __ andl(rax, 32768);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_31_0_2);\n+  __ jmp(B1_5);\n+\n+  __ bind(L_2TAG_PACKET_31_0_2);\n+  __ movl(rcx, 32752);\n+  __ pinsrw(xmm0, rcx, 3);\n+  __ jmp(B1_5);\n+\n+  __ bind(L_2TAG_PACKET_32_0_2);\n+  __ movdl(rax, xmm1);\n+  __ cmpl(rdx, 17184);\n+  __ jcc(Assembler::above, L_2TAG_PACKET_33_0_2);\n+  __ testl(rax, 1);\n+  __ jcc(Assembler::notEqual, L_2TAG_PACKET_34_0_2);\n+  __ testl(rax, 2);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_35_0_2);\n+  __ jmp(L_2TAG_PACKET_36_0_2);\n+\n+  __ bind(L_2TAG_PACKET_33_0_2);\n+  __ testl(rax, 1);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_35_0_2);\n+  __ jmp(L_2TAG_PACKET_36_0_2);\n+\n+  __ bind(L_2TAG_PACKET_7_0_2);\n+  __ movq(xmm2, Address(rsp, 8));\n+  __ movdl(rax, xmm2);\n+  __ psrlq(xmm2, 31);\n+  __ movdl(rcx, xmm2);\n+  __ orl(rax, rcx);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_9_0_2);\n+  __ movq(xmm1, Address(rsp, 16));\n+  __ pextrw(rdx, xmm1, 3);\n+  __ movdl(rax, xmm1);\n+  __ movdqu(xmm2, xmm1);\n+  __ psrlq(xmm2, 32);\n+  __ movdl(rcx, xmm2);\n+  __ addl(rcx, rcx);\n+  __ orl(rcx, rax);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_37_0_2);\n+  __ andl(rdx, 32752);\n+  __ cmpl(rdx, 32752);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_28_0_2);\n+  __ cmpl(rdx, 17200);\n+  __ jcc(Assembler::above, L_2TAG_PACKET_35_0_2);\n+  __ cmpl(rdx, 17184);\n+  __ jcc(Assembler::aboveEqual, L_2TAG_PACKET_32_0_2);\n+  __ cmpl(rdx, 16368);\n+  __ jcc(Assembler::below, L_2TAG_PACKET_34_0_2);\n+  __ movl(rax, 17208);\n+  __ xorpd(xmm2, xmm2);\n+  __ pinsrw(xmm2, rax, 3);\n+  __ movdqu(xmm4, xmm2);\n+  __ addsd(xmm2, xmm1);\n+  __ subsd(xmm4, xmm2);\n+  __ addsd(xmm1, xmm4);\n+  __ pextrw(rax, xmm1, 3);\n+  __ andl(rax, 32767);\n+  __ jcc(Assembler::notEqual, L_2TAG_PACKET_34_0_2);\n+  __ movdl(rax, xmm2);\n+  __ andl(rax, 1);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_35_0_2);\n+\n+  __ bind(L_2TAG_PACKET_36_0_2);\n+  __ xorpd(xmm1, xmm1);\n+  __ movl(rdx, 30704);\n+  __ pinsrw(xmm1, rdx, 3);\n+  __ movq(xmm2, ExternalAddress(LOG2_E), r9 \/*rscratch*\/);    \/\/0x00000000UL, 0x3ff72000UL, 0x161bb241UL, 0xbf5dabe1UL\n+  __ movq(xmm4, Address(rsp, 8));\n+  __ pextrw(rax, xmm4, 3);\n+  __ movl(rdx, 8192);\n+  __ movdl(xmm4, rdx);\n+  __ andl(rax, 32767);\n+  __ subl(rax, 16);\n+  __ jcc(Assembler::less, L_2TAG_PACKET_10_0_2);\n+  __ movl(rdx, rax);\n+  __ andl(rdx, 32752);\n+  __ subl(rdx, 16368);\n+  __ movl(rcx, rdx);\n+  __ sarl(rdx, 31);\n+  __ addl(rcx, rdx);\n+  __ xorl(rcx, rdx);\n+  __ addl(rcx, 16);\n+  __ bsrl(rcx, rcx);\n+  __ movl(r8, INT_MIN);\n+  __ jmp(L_2TAG_PACKET_1_0_2);\n+\n+  __ bind(L_2TAG_PACKET_34_0_2);\n+  __ xorpd(xmm1, xmm1);\n+  __ movl(rax, 32752);\n+  __ pinsrw(xmm1, rax, 3);\n+  __ xorpd(xmm0, xmm0);\n+  __ mulsd(xmm0, xmm1);\n+  __ movl(Address(rsp, 0), 28);\n+  __ jmp(L_2TAG_PACKET_17_0_2);\n+\n+  __ bind(L_2TAG_PACKET_35_0_2);\n+  __ xorpd(xmm1, xmm1);\n+  __ movl(rdx, 30704);\n+  __ pinsrw(xmm1, rdx, 3);\n+  __ movq(xmm2, ExternalAddress(LOG2_E), r9 \/*rscratch*\/);    \/\/0x00000000UL, 0x3ff72000UL, 0x161bb241UL, 0xbf5dabe1UL\n+  __ movq(xmm4, Address(rsp, 8));\n+  __ pextrw(rax, xmm4, 3);\n+  __ movl(rdx, 8192);\n+  __ movdl(xmm4, rdx);\n+  __ andl(rax, 32767);\n+  __ subl(rax, 16);\n+  __ jcc(Assembler::less, L_2TAG_PACKET_8_0_2);\n+  __ movl(rdx, rax);\n+  __ andl(rdx, 32752);\n+  __ subl(rdx, 16368);\n+  __ movl(rcx, rdx);\n+  __ sarl(rdx, 31);\n+  __ addl(rcx, rdx);\n+  __ xorl(rcx, rdx);\n+  __ addl(rcx, 16);\n+  __ bsrl(rcx, rcx);\n+  __ movl(r8, 0);\n+  __ jmp(L_2TAG_PACKET_1_0_2);\n+\n+  __ bind(L_2TAG_PACKET_19_0_2);\n+  __ xorpd(xmm0, xmm0);\n+  __ movl(rax, 16368);\n+  __ pinsrw(xmm0, rax, 3);\n+  __ jmp(B1_5);\n+\n+  __ bind(L_2TAG_PACKET_22_0_2);\n+  __ xorpd(xmm0, xmm0);\n+  __ jmp(B1_5);\n+\n+  __ bind(L_2TAG_PACKET_11_0_2);\n+  __ addl(rax, 384);\n+  __ cmpl(rax, 0);\n+  __ jcc(Assembler::less, L_2TAG_PACKET_38_0_2);\n+  __ mulsd(xmm5, xmm1);\n+  __ addsd(xmm0, xmm7);\n+  __ shrl(r8, 31);\n+  __ addpd(xmm3, xmm0);\n+  __ pshufd(xmm0, xmm3, 238);\n+  __ addsd(xmm3, xmm0);\n+  __ lea(r11, ExternalAddress(log2));    \/\/0xfefa39efUL, 0x3fe62e42UL, 0xfefa39efUL, 0xbfe62e42UL\n+  __ movq(xmm4, Address(r11, r8, Address::times_8, 0));\n+  __ mulsd(xmm1, xmm3);\n+  __ xorpd(xmm0, xmm0);\n+  __ movl(rax, 16368);\n+  __ shll(r8, 15);\n+  __ orl(rax, r8);\n+  __ pinsrw(xmm0, rax, 3);\n+  __ addsd(xmm5, xmm1);\n+  __ mulsd(xmm5, xmm4);\n+  __ addsd(xmm0, xmm5);\n+  __ jmp(B1_5);\n+\n+  __ bind(L_2TAG_PACKET_38_0_2);\n+\n+  __ bind(L_2TAG_PACKET_37_0_2);\n+  __ xorpd(xmm0, xmm0);\n+  __ movl(rax, 16368);\n+  __ pinsrw(xmm0, rax, 3);\n+  __ jmp(B1_5);\n+\n+  __ bind(L_2TAG_PACKET_39_0_2);\n+  __ xorpd(xmm0, xmm0);\n+  __ movl(rax, 16368);\n+  __ pinsrw(xmm0, rax, 3);\n+  __ movl(Address(rsp, 0), 26);\n+  __ jmp(L_2TAG_PACKET_17_0_2);\n+\n+  __ bind(L_2TAG_PACKET_9_0_2);\n+  __ movq(xmm1, Address(rsp, 16));\n+  __ movdqu(xmm2, xmm1);\n+  __ pextrw(rax, xmm1, 3);\n+  __ andl(rax, 32752);\n+  __ cmpl(rax, 32752);\n+  __ jcc(Assembler::notEqual, L_2TAG_PACKET_40_0_2);\n+  __ movdl(rax, xmm2);\n+  __ psrlq(xmm2, 20);\n+  __ movdl(rdx, xmm2);\n+  __ orl(rax, rdx);\n+  __ jcc(Assembler::notEqual, L_2TAG_PACKET_18_0_2);\n+\n+  __ bind(L_2TAG_PACKET_40_0_2);\n+  __ movdl(rax, xmm1);\n+  __ psrlq(xmm1, 32);\n+  __ movdl(rdx, xmm1);\n+  __ movl(rcx, rdx);\n+  __ addl(rdx, rdx);\n+  __ orl(rax, rdx);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_39_0_2);\n+  __ shrl(rdx, 21);\n+  __ cmpl(rdx, 1075);\n+  __ jcc(Assembler::above, L_2TAG_PACKET_41_0_2);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_42_0_2);\n+  __ cmpl(rdx, 1023);\n+  __ jcc(Assembler::below, L_2TAG_PACKET_41_0_2);\n+  __ movq(xmm1, Address(rsp, 16));\n+  __ movl(rax, 17208);\n+  __ xorpd(xmm3, xmm3);\n+  __ pinsrw(xmm3, rax, 3);\n+  __ movdqu(xmm4, xmm3);\n+  __ addsd(xmm3, xmm1);\n+  __ subsd(xmm4, xmm3);\n+  __ addsd(xmm1, xmm4);\n+  __ pextrw(rax, xmm1, 3);\n+  __ andl(rax, 32752);\n+  __ jcc(Assembler::notEqual, L_2TAG_PACKET_41_0_2);\n+  __ movdl(rax, xmm3);\n+  __ andl(rax, 1);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_41_0_2);\n+\n+  __ bind(L_2TAG_PACKET_43_0_2);\n+  __ movq(xmm0, Address(rsp, 8));\n+  __ testl(rcx, INT_MIN);\n+  __ jcc(Assembler::notEqual, L_2TAG_PACKET_44_0_2);\n+  __ jmp(B1_5);\n+\n+  __ bind(L_2TAG_PACKET_42_0_2);\n+  __ movq(xmm1, Address(rsp, 16));\n+  __ movdl(rax, xmm1);\n+  __ testl(rax, 1);\n+  __ jcc(Assembler::notEqual, L_2TAG_PACKET_43_0_2);\n+\n+  __ bind(L_2TAG_PACKET_41_0_2);\n+  __ testl(rcx, INT_MIN);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_22_0_2);\n+  __ xorpd(xmm0, xmm0);\n+\n+  __ bind(L_2TAG_PACKET_44_0_2);\n+  __ movl(rax, 16368);\n+  __ xorpd(xmm1, xmm1);\n+  __ pinsrw(xmm1, rax, 3);\n+  __ divsd(xmm1, xmm0);\n+  __ movdqu(xmm0, xmm1);\n+  __ movl(Address(rsp, 0), 27);\n+  __ jmp(L_2TAG_PACKET_17_0_2);\n+\n+  __ bind(L_2TAG_PACKET_12_0_2);\n+  __ movq(xmm2, Address(rsp, 8));\n+  __ movq(xmm6, Address(rsp, 16));\n+  __ pextrw(rax, xmm2, 3);\n+  __ pextrw(rdx, xmm6, 3);\n+  __ movl(rcx, 32752);\n+  __ andl(rcx, rdx);\n+  __ cmpl(rcx, 32752);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_45_0_2);\n+  __ andl(rax, 32752);\n+  __ subl(rax, 16368);\n+  __ xorl(rdx, rax);\n+  __ testl(rdx, 32768);\n+  __ jcc(Assembler::notEqual, L_2TAG_PACKET_46_0_2);\n+\n+  __ bind(L_2TAG_PACKET_47_0_2);\n+  __ movl(rax, 32736);\n+  __ pinsrw(xmm0, rax, 3);\n+  __ shrl(r8, 16);\n+  __ orl(rax, r8);\n+  __ pinsrw(xmm1, rax, 3);\n+  __ mulsd(xmm0, xmm1);\n+\n+  __ bind(L_2TAG_PACKET_14_0_2);\n+  __ movl(Address(rsp, 0), 24);\n+  __ jmp(L_2TAG_PACKET_17_0_2);\n+\n+  __ bind(L_2TAG_PACKET_46_0_2);\n+  __ movl(rax, 16);\n+  __ pinsrw(xmm0, rax, 3);\n+  __ mulsd(xmm0, xmm0);\n+  __ testl(r8, INT_MIN);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_48_0_2);\n+  __ mov64(r9, 0x8000000000000000);\n+  __ movdq(xmm2, r9);\n+  __ xorpd(xmm0, xmm2);\n+\n+  __ bind(L_2TAG_PACKET_48_0_2);\n+  __ movl(Address(rsp, 0), 25);\n+  __ jmp(L_2TAG_PACKET_17_0_2);\n+\n+  __ bind(L_2TAG_PACKET_13_0_2);\n+  __ pextrw(rcx, xmm5, 3);\n+  __ pextrw(rdx, xmm4, 3);\n+  __ movl(rax, -1);\n+  __ andl(rcx, 32752);\n+  __ subl(rcx, 16368);\n+  __ andl(rdx, 32752);\n+  __ addl(rdx, rcx);\n+  __ movl(rcx, -31);\n+  __ sarl(rdx, 4);\n+  __ subl(rcx, rdx);\n+  __ jcc(Assembler::lessEqual, L_2TAG_PACKET_49_0_2);\n+  __ cmpl(rcx, 20);\n+  __ jcc(Assembler::above, L_2TAG_PACKET_50_0_2);\n+  __ shll(rax);\n+\n+  __ bind(L_2TAG_PACKET_49_0_2);\n+  __ movdl(xmm0, rax);\n+  __ psllq(xmm0, 32);\n+  __ pand(xmm0, xmm5);\n+  __ subsd(xmm5, xmm0);\n+  __ addsd(xmm5, xmm1);\n+  __ mulsd(xmm0, xmm4);\n+  __ mulsd(xmm5, xmm4);\n+  __ addsd(xmm0, xmm5);\n+\n+  __ bind(L_2TAG_PACKET_50_0_2);\n+  __ jmp(L_2TAG_PACKET_48_0_2);\n+\n+  __ bind(L_2TAG_PACKET_2_0_2);\n+  __ movw(rcx, Address(rsp, 22));\n+  __ movl(rdx, INT_MIN);\n+  __ movdl(xmm1, rdx);\n+  __ xorpd(xmm7, xmm7);\n+  __ paddd(xmm0, xmm4);\n+  __ movdl(rdx, xmm0);\n+  __ psllq(xmm0, 29);\n+  __ paddq(xmm1, xmm3);\n+  __ pand(xmm5, xmm1);\n+  __ andl(rcx, 32752);\n+  __ cmpl(rcx, 16560);\n+  __ jcc(Assembler::less, L_2TAG_PACKET_3_0_2);\n+  __ pand(xmm0, xmm6);\n+  __ subsd(xmm3, xmm5);\n+  __ addl(rax, 16351);\n+  __ shrl(rax, 4);\n+  __ subl(rax, 1022);\n+  __ cvtsi2sdl(xmm7, rax);\n+  __ mulpd(xmm5, xmm0);\n+  __ lea(r11, ExternalAddress(L_tbl));\n+  __ movq(xmm4, ExternalAddress(coeff_h), r9 \/*rscratch*\/);    \/\/0x00000000UL, 0xbfd61a00UL, 0x00000000UL, 0xbf5dabe1UL\n+  __ mulsd(xmm3, xmm0);\n+  __ movq(xmm6, ExternalAddress(coeff_h), r9 \/*rscratch*\/);    \/\/0x00000000UL, 0xbfd61a00UL, 0x00000000UL, 0xbf5dabe1UL\n+  __ subsd(xmm5, xmm2);\n+  __ movq(xmm1, ExternalAddress(coeff_h + 8), r9 \/*rscratch*\/);    \/\/0x00000000UL, 0xbf5dabe1UL\n+  __ pshufd(xmm2, xmm3, 68);\n+  __ unpcklpd(xmm5, xmm3);\n+  __ addsd(xmm3, xmm5);\n+  __ movq(xmm0, ExternalAddress(coeff_h + 8), r9 \/*rscratch*\/);    \/\/0x00000000UL, 0xbf5dabe1UL\n+  __ andl(rdx, 16760832);\n+  __ shrl(rdx, 10);\n+  __ addpd(xmm7, Address(r11, rdx, Address::times_1, -3648));\n+  __ mulsd(xmm4, xmm5);\n+  __ mulsd(xmm0, xmm5);\n+  __ mulsd(xmm6, xmm2);\n+  __ mulsd(xmm1, xmm2);\n+  __ movdqu(xmm2, xmm5);\n+  __ mulsd(xmm4, xmm5);\n+  __ addsd(xmm5, xmm0);\n+  __ movdqu(xmm0, xmm7);\n+  __ addsd(xmm2, xmm3);\n+  __ addsd(xmm7, xmm5);\n+  __ mulsd(xmm6, xmm2);\n+  __ subsd(xmm0, xmm7);\n+  __ movdqu(xmm2, xmm7);\n+  __ addsd(xmm7, xmm4);\n+  __ addsd(xmm0, xmm5);\n+  __ subsd(xmm2, xmm7);\n+  __ addsd(xmm4, xmm2);\n+  __ pshufd(xmm2, xmm5, 238);\n+  __ movdqu(xmm5, xmm7);\n+  __ addsd(xmm7, xmm2);\n+  __ addsd(xmm4, xmm0);\n+  __ movdqu(xmm0, ExternalAddress(coeff), r9 \/*rscratch*\/);    \/\/0x6dc96112UL, 0xbf836578UL, 0xee241472UL, 0xbf9b0301UL\n+  __ subsd(xmm5, xmm7);\n+  __ addsd(xmm6, xmm4);\n+  __ movdqu(xmm4, xmm7);\n+  __ addsd(xmm5, xmm2);\n+  __ addsd(xmm7, xmm1);\n+  __ movdqu(xmm2, ExternalAddress(coeff + 64), r9 \/*rscratch*\/);    \/\/0x486ececcUL, 0x3fc4635eUL, 0x161bb241UL, 0xbf5dabe1UL\n+  __ subsd(xmm4, xmm7);\n+  __ addsd(xmm6, xmm5);\n+  __ addsd(xmm4, xmm1);\n+  __ pshufd(xmm5, xmm7, 238);\n+  __ movapd(xmm1, xmm7);\n+  __ addsd(xmm7, xmm5);\n+  __ subsd(xmm1, xmm7);\n+  __ addsd(xmm1, xmm5);\n+  __ movdqu(xmm5, ExternalAddress(coeff + 80), r9 \/*rscratch*\/);    \/\/0x9f95985aUL, 0xbfb528dbUL, 0xf8b5787dUL, 0x3ef2531eUL\n+  __ pshufd(xmm3, xmm3, 68);\n+  __ addsd(xmm6, xmm4);\n+  __ addsd(xmm6, xmm1);\n+  __ movdqu(xmm1, ExternalAddress(coeff + 32), r9 \/*rscratch*\/);    \/\/0x9f95985aUL, 0xbfb528dbUL, 0xb3841d2aUL, 0xbfd619b6UL\n+  __ mulpd(xmm0, xmm3);\n+  __ mulpd(xmm2, xmm3);\n+  __ pshufd(xmm4, xmm3, 68);\n+  __ mulpd(xmm3, xmm3);\n+  __ addpd(xmm0, xmm1);\n+  __ addpd(xmm5, xmm2);\n+  __ mulsd(xmm4, xmm3);\n+  __ movq(xmm2, ExternalAddress(HIGHMASK_LOG_X), r9 \/*rscratch*\/);    \/\/0xf8000000UL, 0xffffffffUL, 0x00000000UL, 0xfffff800UL\n+  __ mulpd(xmm3, xmm3);\n+  __ movq(xmm1, Address(rsp, 16));\n+  __ movw(rcx, Address(rsp, 22));\n+  __ mulpd(xmm0, xmm4);\n+  __ pextrw(rax, xmm7, 3);\n+  __ mulpd(xmm5, xmm4);\n+  __ mulpd(xmm0, xmm3);\n+  __ movq(xmm4, ExternalAddress(HIGHMASK_Y + 8), r9 \/*rscratch*\/);    \/\/0x00000000UL, 0xffffffffUL\n+  __ pand(xmm2, xmm7);\n+  __ addsd(xmm5, xmm6);\n+  __ subsd(xmm7, xmm2);\n+  __ addpd(xmm5, xmm0);\n+  __ andl(rax, 32752);\n+  __ subl(rax, 16368);\n+  __ andl(rcx, 32752);\n+  __ cmpl(rcx, 32752);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_45_0_2);\n+  __ addl(rcx, rax);\n+  __ cmpl(rcx, 16576);\n+  __ jcc(Assembler::aboveEqual, L_2TAG_PACKET_51_0_2);\n+  __ pshufd(xmm0, xmm5, 238);\n+  __ pand(xmm4, xmm1);\n+  __ movdqu(xmm3, xmm1);\n+  __ addsd(xmm5, xmm0);\n+  __ subsd(xmm1, xmm4);\n+  __ xorpd(xmm6, xmm6);\n+  __ movl(rdx, 17080);\n+  __ pinsrw(xmm6, rdx, 3);\n+  __ addsd(xmm7, xmm5);\n+  __ mulsd(xmm4, xmm2);\n+  __ mulsd(xmm1, xmm2);\n+  __ movdqu(xmm5, xmm6);\n+  __ mulsd(xmm3, xmm7);\n+  __ addsd(xmm6, xmm4);\n+  __ addsd(xmm1, xmm3);\n+  __ movdqu(xmm7, ExternalAddress(e_coeff), r9 \/*rscratch*\/);    \/\/0xe78a6731UL, 0x3f55d87fUL, 0xd704a0c0UL, 0x3fac6b08UL\n+  __ movdl(rdx, xmm6);\n+  __ subsd(xmm6, xmm5);\n+  __ lea(r11, ExternalAddress(T_exp));\n+  __ movdqu(xmm3, ExternalAddress(e_coeff + 16), r9 \/*rscratch*\/);    \/\/0x6fba4e77UL, 0x3f83b2abUL, 0xff82c58fUL, 0x3fcebfbdUL\n+  __ movq(xmm2, ExternalAddress(e_coeff + 32), r9 \/*rscratch*\/);    \/\/0xfefa39efUL, 0x3fe62e42UL, 0x00000000UL, 0x00000000UL\n+  __ subsd(xmm4, xmm6);\n+  __ movl(rcx, rdx);\n+  __ andl(rdx, 255);\n+  __ addl(rdx, rdx);\n+  __ movdqu(xmm5, Address(r11, rdx, Address::times_8, 0));\n+  __ addsd(xmm4, xmm1);\n+  __ pextrw(rdx, xmm6, 3);\n+  __ shrl(rcx, 8);\n+  __ movl(rax, rcx);\n+  __ shrl(rcx, 1);\n+  __ subl(rax, rcx);\n+  __ shll(rcx, 20);\n+  __ movdl(xmm6, rcx);\n+  __ pshufd(xmm0, xmm4, 68);\n+  __ pshufd(xmm1, xmm4, 68);\n+  __ mulpd(xmm0, xmm0);\n+  __ mulpd(xmm7, xmm1);\n+  __ pshufd(xmm6, xmm6, 17);\n+  __ mulsd(xmm2, xmm4);\n+  __ andl(rdx, 32767);\n+  __ cmpl(rdx, 16529);\n+  __ jcc(Assembler::above, L_2TAG_PACKET_12_0_2);\n+  __ mulsd(xmm0, xmm0);\n+  __ paddd(xmm5, xmm6);\n+  __ addpd(xmm3, xmm7);\n+  __ mulsd(xmm2, xmm5);\n+  __ pshufd(xmm6, xmm5, 238);\n+  __ mulpd(xmm0, xmm3);\n+  __ addsd(xmm2, xmm6);\n+  __ pshufd(xmm3, xmm0, 238);\n+  __ addl(rax, 1023);\n+  __ shll(rax, 20);\n+  __ orl(rax, r8);\n+  __ movdl(xmm4, rax);\n+  __ mulsd(xmm0, xmm5);\n+  __ mulsd(xmm3, xmm5);\n+  __ addsd(xmm0, xmm2);\n+  __ psllq(xmm4, 32);\n+  __ addsd(xmm0, xmm3);\n+  __ movdqu(xmm1, xmm0);\n+  __ addsd(xmm0, xmm5);\n+  __ mulsd(xmm0, xmm4);\n+  __ pextrw(rax, xmm0, 3);\n+  __ andl(rax, 32752);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_13_0_2);\n+  __ cmpl(rax, 32752);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_14_0_2);\n+\n+  __ bind(L_2TAG_PACKET_52_0_2);\n+  __ jmp(B1_5);\n+\n+  __ bind(L_2TAG_PACKET_45_0_2);\n+  __ movq(xmm0, Address(rsp, 8));\n+  __ xorpd(xmm2, xmm2);\n+  __ movl(rax, 49136);\n+  __ pinsrw(xmm2, rax, 3);\n+  __ addsd(xmm2, xmm0);\n+  __ pextrw(rax, xmm2, 3);\n+  __ cmpl(rax, 0);\n+  __ jcc(Assembler::notEqual, L_2TAG_PACKET_53_0_2);\n+  __ xorpd(xmm0, xmm0);\n+  __ movl(rax, 32760);\n+  __ pinsrw(xmm0, rax, 3);\n+  __ jmp(B1_5);\n+\n+  __ bind(L_2TAG_PACKET_53_0_2);\n+  __ movq(xmm1, Address(rsp, 16));\n+  __ movdl(rdx, xmm1);\n+  __ movdqu(xmm3, xmm1);\n+  __ psrlq(xmm3, 20);\n+  __ movdl(rcx, xmm3);\n+  __ orl(rcx, rdx);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_54_0_2);\n+  __ addsd(xmm1, xmm1);\n+  __ movdqu(xmm0, xmm1);\n+  __ jmp(B1_5);\n+\n+  __ bind(L_2TAG_PACKET_51_0_2);\n+  __ pextrw(rax, xmm1, 3);\n+  __ pextrw(rcx, xmm2, 3);\n+  __ xorl(rax, rcx);\n+  __ testl(rax, 32768);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_47_0_2);\n+  __ jmp(L_2TAG_PACKET_46_0_2);\n+\n+  __ bind(L_2TAG_PACKET_54_0_2);\n+  __ pextrw(rax, xmm0, 3);\n+  __ andl(rax, 32752);\n+  __ pextrw(rdx, xmm1, 3);\n+  __ xorpd(xmm0, xmm0);\n+  __ subl(rax, 16368);\n+  __ xorl(rax, rdx);\n+  __ testl(rax, 32768);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_55_0_2);\n+  __ jmp(B1_5);\n+\n+  __ bind(L_2TAG_PACKET_55_0_2);\n+  __ movl(rdx, 32752);\n+  __ pinsrw(xmm0, rdx, 3);\n+  __ jmp(B1_5);\n+\n+  __ bind(L_2TAG_PACKET_17_0_2);\n+  __ movq(Address(rsp, 24), xmm0);\n+\n+  __ bind(B1_3);\n+  __ movq(xmm0, Address(rsp, 24));\n+\n+  __ bind(L_2TAG_PACKET_56_0_2);\n+\n+  __ bind(B1_5);\n+  __ addq(rsp, 40);\n+\n+  __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ ret(0);\n+\n+  return start;\n+}\n+\n+#undef __\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_pow.cpp","additions":1865,"deletions":0,"binary":false,"changes":1865,"status":"added"},{"patch":"@@ -0,0 +1,651 @@\n+\/*\n+ * Copyright (c) 2016, 2021, Intel Corporation. All rights reserved.\n+ * Intel Math Library (LIBM) Source Code\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"macroAssembler_x86.hpp\"\n+#include \"stubGenerator_x86_64.hpp\"\n+\n+\/******************************************************************************\/\n+\/\/                     ALGORITHM DESCRIPTION - SIN()\n+\/\/                     ---------------------\n+\/\/\n+\/\/     1. RANGE REDUCTION\n+\/\/\n+\/\/     We perform an initial range reduction from X to r with\n+\/\/\n+\/\/          X =~= N * pi\/32 + r\n+\/\/\n+\/\/     so that |r| <= pi\/64 + epsilon. We restrict inputs to those\n+\/\/     where |N| <= 932560. Beyond this, the range reduction is\n+\/\/     insufficiently accurate. For extremely small inputs,\n+\/\/     denormalization can occur internally, impacting performance.\n+\/\/     This means that the main path is actually only taken for\n+\/\/     2^-252 <= |X| < 90112.\n+\/\/\n+\/\/     To avoid branches, we perform the range reduction to full\n+\/\/     accuracy each time.\n+\/\/\n+\/\/          X - N * (P_1 + P_2 + P_3)\n+\/\/\n+\/\/     where P_1 and P_2 are 32-bit numbers (so multiplication by N\n+\/\/     is exact) and P_3 is a 53-bit number. Together, these\n+\/\/     approximate pi well enough for all cases in the restricted\n+\/\/     range.\n+\/\/\n+\/\/     The main reduction sequence is:\n+\/\/\n+\/\/             y = 32\/pi * x\n+\/\/             N = integer(y)\n+\/\/     (computed by adding and subtracting off SHIFTER)\n+\/\/\n+\/\/             m_1 = N * P_1\n+\/\/             m_2 = N * P_2\n+\/\/             r_1 = x - m_1\n+\/\/             r = r_1 - m_2\n+\/\/     (this r can be used for most of the calculation)\n+\/\/\n+\/\/             c_1 = r_1 - r\n+\/\/             m_3 = N * P_3\n+\/\/             c_2 = c_1 - m_2\n+\/\/             c = c_2 - m_3\n+\/\/\n+\/\/     2. MAIN ALGORITHM\n+\/\/\n+\/\/     The algorithm uses a table lookup based on B = M * pi \/ 32\n+\/\/     where M = N mod 64. The stored values are:\n+\/\/       sigma             closest power of 2 to cos(B)\n+\/\/       C_hl              53-bit cos(B) - sigma\n+\/\/       S_hi + S_lo       2 * 53-bit sin(B)\n+\/\/\n+\/\/     The computation is organized as follows:\n+\/\/\n+\/\/          sin(B + r + c) = [sin(B) + sigma * r] +\n+\/\/                           r * (cos(B) - sigma) +\n+\/\/                           sin(B) * [cos(r + c) - 1] +\n+\/\/                           cos(B) * [sin(r + c) - r]\n+\/\/\n+\/\/     which is approximately:\n+\/\/\n+\/\/          [S_hi + sigma * r] +\n+\/\/          C_hl * r +\n+\/\/          S_lo + S_hi * [(cos(r) - 1) - r * c] +\n+\/\/          (C_hl + sigma) * [(sin(r) - r) + c]\n+\/\/\n+\/\/     and this is what is actually computed. We separate this sum\n+\/\/     into four parts:\n+\/\/\n+\/\/          hi + med + pols + corr\n+\/\/\n+\/\/     where\n+\/\/\n+\/\/          hi       = S_hi + sigma r\n+\/\/          med      = C_hl * r\n+\/\/          pols     = S_hi * (cos(r) - 1) + (C_hl + sigma) * (sin(r) - r)\n+\/\/          corr     = S_lo + c * ((C_hl + sigma) - S_hi * r)\n+\/\/\n+\/\/     3. POLYNOMIAL\n+\/\/\n+\/\/     The polynomial S_hi * (cos(r) - 1) + (C_hl + sigma) *\n+\/\/     (sin(r) - r) can be rearranged freely, since it is quite\n+\/\/     small, so we exploit parallelism to the fullest.\n+\/\/\n+\/\/          psc4       =   SC_4 * r_1\n+\/\/          msc4       =   psc4 * r\n+\/\/          r2         =   r * r\n+\/\/          msc2       =   SC_2 * r2\n+\/\/          r4         =   r2 * r2\n+\/\/          psc3       =   SC_3 + msc4\n+\/\/          psc1       =   SC_1 + msc2\n+\/\/          msc3       =   r4 * psc3\n+\/\/          sincospols =   psc1 + msc3\n+\/\/          pols       =   sincospols *\n+\/\/                         <S_hi * r^2 | (C_hl + sigma) * r^3>\n+\/\/\n+\/\/     4. CORRECTION TERM\n+\/\/\n+\/\/     This is where the \"c\" component of the range reduction is\n+\/\/     taken into account; recall that just \"r\" is used for most of\n+\/\/     the calculation.\n+\/\/\n+\/\/          -c   = m_3 - c_2\n+\/\/          -d   = S_hi * r - (C_hl + sigma)\n+\/\/          corr = -c * -d + S_lo\n+\/\/\n+\/\/     5. COMPENSATED SUMMATIONS\n+\/\/\n+\/\/     The two successive compensated summations add up the high\n+\/\/     and medium parts, leaving just the low parts to add up at\n+\/\/     the end.\n+\/\/\n+\/\/          rs        =  sigma * r\n+\/\/          res_int   =  S_hi + rs\n+\/\/          k_0       =  S_hi - res_int\n+\/\/          k_2       =  k_0 + rs\n+\/\/          med       =  C_hl * r\n+\/\/          res_hi    =  res_int + med\n+\/\/          k_1       =  res_int - res_hi\n+\/\/          k_3       =  k_1 + med\n+\/\/\n+\/\/     6. FINAL SUMMATION\n+\/\/\n+\/\/     We now add up all the small parts:\n+\/\/\n+\/\/          res_lo = pols(hi) + pols(lo) + corr + k_1 + k_3\n+\/\/\n+\/\/     Now the overall result is just:\n+\/\/\n+\/\/          res_hi + res_lo\n+\/\/\n+\/\/     7. SMALL ARGUMENTS\n+\/\/\n+\/\/     If |x| < SNN (SNN meaning the smallest normal number), we\n+\/\/     simply perform 0.1111111 cdots 1111 * x. For SNN <= |x|, we\n+\/\/     do 2^-55 * (2^55 * x - x).\n+\/\/\n+\/\/ Special cases:\n+\/\/  sin(NaN) = quiet NaN, and raise invalid exception\n+\/\/  sin(INF) = NaN and raise invalid exception\n+\/\/  sin(+\/-0) = +\/-0\n+\/\/\n+\/******************************************************************************\/\n+\n+\/\/ The 64 bit code is at most SSE2 compliant\n+ATTRIBUTE_ALIGNED(8) juint _ALL_ONES[] =\n+{\n+    0xffffffffUL, 0x3fefffffUL\n+};\n+\n+#define __ _masm->\n+\n+address StubGenerator::generate_libmSin() {\n+  StubCodeMark mark(this, \"StubRoutines\", \"libmSin\");\n+  address start = __ pc();\n+\n+  Label L_2TAG_PACKET_0_0_1, L_2TAG_PACKET_1_0_1, L_2TAG_PACKET_2_0_1, L_2TAG_PACKET_3_0_1;\n+  Label L_2TAG_PACKET_4_0_1, L_2TAG_PACKET_5_0_1, L_2TAG_PACKET_6_0_1, L_2TAG_PACKET_7_0_1;\n+  Label L_2TAG_PACKET_8_0_1, L_2TAG_PACKET_9_0_1, L_2TAG_PACKET_10_0_1, L_2TAG_PACKET_11_0_1;\n+  Label L_2TAG_PACKET_13_0_1, L_2TAG_PACKET_14_0_1;\n+  Label L_2TAG_PACKET_12_0_1, B1_4;\n+\n+  address ALL_ONES = (address)_ALL_ONES;\n+\n+  __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+\n+#ifdef _WIN64\n+  __ push(rsi);\n+  __ push(rdi);\n+#endif\n+\n+  __ push(rbx);\n+  __ subq(rsp, 16);\n+  __ movsd(Address(rsp, 8), xmm0);\n+  __ movl(rax, Address(rsp, 12));\n+  __ movq(xmm1, ExternalAddress(PI32INV), r8 \/*rscratch*\/); \/\/0x6dc9c883UL, 0x40245f30UL\n+  __ movq(xmm2, ExternalAddress(SHIFTER), r8 \/*rscratch*\/); \/\/0x00000000UL, 0x43380000UL\n+  __ andl(rax, 2147418112);\n+  __ subl(rax, 808452096);\n+  __ cmpl(rax, 281346048);\n+  __ jcc(Assembler::above, L_2TAG_PACKET_0_0_1);\n+  __ mulsd(xmm1, xmm0);\n+  __ movdqu(xmm5, ExternalAddress(ONEHALF), r8 \/*rscratch*\/); \/\/0x00000000UL, 0x3fe00000UL, 0x00000000UL, 0x3fe00000UL\n+  __ movq(xmm4, ExternalAddress(SIGN_MASK), r8 \/*rscratch*\/); \/\/0x00000000UL, 0x80000000UL\n+  __ pand(xmm4, xmm0);\n+  __ por(xmm5, xmm4);\n+  __ addpd(xmm1, xmm5);\n+  __ cvttsd2sil(rdx, xmm1);\n+  __ cvtsi2sdl(xmm1, rdx);\n+  __ movdqu(xmm6, ExternalAddress(P_2), r8 \/*rscratch*\/); \/\/0x1a600000UL, 0x3d90b461UL, 0x1a600000UL, 0x3d90b461UL\n+  __ mov64(r8, 0x3fb921fb54400000);\n+  __ movdq(xmm3, r8);\n+  __ movdqu(xmm5, ExternalAddress(SC_4), r8 \/*rscratch*\/); \/\/0xa556c734UL, 0x3ec71de3UL, 0x1a01a01aUL, 0x3efa01a0UL\n+  __ pshufd(xmm4, xmm0, 68);\n+  __ mulsd(xmm3, xmm1);\n+  if (VM_Version::supports_sse3()) {\n+    __ movddup(xmm1, xmm1);\n+  } else {\n+    __ movlhps(xmm1, xmm1);\n+  }\n+  __ andl(rdx, 63);\n+  __ shll(rdx, 5);\n+  __ lea(rax, ExternalAddress(Ctable));\n+  __ addq(rax, rdx);\n+  __ mulpd(xmm6, xmm1);\n+  __ mulsd(xmm1, ExternalAddress(P_3), r8 \/*rscratch*\/); \/\/0x2e037073UL, 0x3b63198aUL\n+  __ subsd(xmm4, xmm3);\n+  __ movq(xmm7, Address(rax, 8));\n+  __ subsd(xmm0, xmm3);\n+  if (VM_Version::supports_sse3()) {\n+    __ movddup(xmm3, xmm4);\n+  } else {\n+    __ movdqu(xmm3, xmm4);\n+    __ movlhps(xmm3, xmm3);\n+  }\n+  __ subsd(xmm4, xmm6);\n+  __ pshufd(xmm0, xmm0, 68);\n+  __ movdqu(xmm2, Address(rax, 0));\n+  __ mulpd(xmm5, xmm0);\n+  __ subpd(xmm0, xmm6);\n+  __ mulsd(xmm7, xmm4);\n+  __ subsd(xmm3, xmm4);\n+  __ mulpd(xmm5, xmm0);\n+  __ mulpd(xmm0, xmm0);\n+  __ subsd(xmm3, xmm6);\n+  __ movdqu(xmm6, ExternalAddress(SC_2), r8 \/*rscratch*\/); \/\/0x11111111UL, 0x3f811111UL, 0x55555555UL, 0x3fa55555UL\n+  __ subsd(xmm1, xmm3);\n+  __ movq(xmm3, Address(rax, 24));\n+  __ addsd(xmm2, xmm3);\n+  __ subsd(xmm7, xmm2);\n+  __ mulsd(xmm2, xmm4);\n+  __ mulpd(xmm6, xmm0);\n+  __ mulsd(xmm3, xmm4);\n+  __ mulpd(xmm2, xmm0);\n+  __ mulpd(xmm0, xmm0);\n+  __ addpd(xmm5, ExternalAddress(SC_3), r8 \/*rscratch*\/); \/\/0x1a01a01aUL, 0xbf2a01a0UL, 0x16c16c17UL, 0xbf56c16cUL\n+  __ mulsd(xmm4, Address(rax, 0));\n+  __ addpd(xmm6, ExternalAddress(SC_1), r8 \/*rscratch*\/); \/\/0x55555555UL, 0xbfc55555UL, 0x00000000UL, 0xbfe00000UL\n+  __ mulpd(xmm5, xmm0);\n+  __ movdqu(xmm0, xmm3);\n+  __ addsd(xmm3, Address(rax, 8));\n+  __ mulpd(xmm1, xmm7);\n+  __ movdqu(xmm7, xmm4);\n+  __ addsd(xmm4, xmm3);\n+  __ addpd(xmm6, xmm5);\n+  __ movq(xmm5, Address(rax, 8));\n+  __ subsd(xmm5, xmm3);\n+  __ subsd(xmm3, xmm4);\n+  __ addsd(xmm1, Address(rax, 16));\n+  __ mulpd(xmm6, xmm2);\n+  __ addsd(xmm5, xmm0);\n+  __ addsd(xmm3, xmm7);\n+  __ addsd(xmm1, xmm5);\n+  __ addsd(xmm1, xmm3);\n+  __ addsd(xmm1, xmm6);\n+  __ unpckhpd(xmm6, xmm6);\n+  __ movdqu(xmm0, xmm4);\n+  __ addsd(xmm1, xmm6);\n+  __ addsd(xmm0, xmm1);\n+  __ jmp(B1_4);\n+\n+  __ bind(L_2TAG_PACKET_0_0_1);\n+  __ jcc(Assembler::greater, L_2TAG_PACKET_1_0_1);\n+  __ shrl(rax, 20);\n+  __ cmpl(rax, 3325);\n+  __ jcc(Assembler::notEqual, L_2TAG_PACKET_2_0_1);\n+  __ mulsd(xmm0, ExternalAddress(ALL_ONES), r8 \/*rscratch*\/); \/\/0xffffffffUL, 0x3fefffffUL\n+  __ jmp(B1_4);\n+\n+  __ bind(L_2TAG_PACKET_2_0_1);\n+  __ movq(xmm3, ExternalAddress(TWO_POW_55), r8 \/*rscratch*\/); \/\/0x00000000UL, 0x43600000UL\n+  __ mulsd(xmm3, xmm0);\n+  __ subsd(xmm3, xmm0);\n+  __ mulsd(xmm3, ExternalAddress(TWO_POW_M55), r8 \/*rscratch*\/); \/\/0x00000000UL, 0x3c800000UL\n+  __ jmp(B1_4);\n+\n+  __ bind(L_2TAG_PACKET_1_0_1);\n+  __ pextrw(rax, xmm0, 3);\n+  __ andl(rax, 32752);\n+  __ cmpl(rax, 32752);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_3_0_1);\n+  __ pextrw(rcx, xmm0, 3);\n+  __ andl(rcx, 32752);\n+  __ subl(rcx, 16224);\n+  __ shrl(rcx, 7);\n+  __ andl(rcx, 65532);\n+  __ lea(r11, ExternalAddress(PI_INV_TABLE));\n+  __ addq(rcx, r11);\n+  __ movdq(rax, xmm0);\n+  __ movl(r10, Address(rcx, 20));\n+  __ movl(r8, Address(rcx, 24));\n+  __ movl(rdx, rax);\n+  __ shrq(rax, 21);\n+  __ orl(rax, INT_MIN);\n+  __ shrl(rax, 11);\n+  __ movl(r9, r10);\n+  __ imulq(r10, rdx);\n+  __ imulq(r9, rax);\n+  __ imulq(r8, rax);\n+  __ movl(rsi, Address(rcx, 16));\n+  __ movl(rdi, Address(rcx, 12));\n+  __ movl(r11, r10);\n+  __ shrq(r10, 32);\n+  __ addq(r9, r10);\n+  __ addq(r11, r8);\n+  __ movl(r8, r11);\n+  __ shrq(r11, 32);\n+  __ addq(r9, r11);\n+  __ movl(r10, rsi);\n+  __ imulq(rsi, rdx);\n+  __ imulq(r10, rax);\n+  __ movl(r11, rdi);\n+  __ imulq(rdi, rdx);\n+  __ movl(rbx, rsi);\n+  __ shrq(rsi, 32);\n+  __ addq(r9, rbx);\n+  __ movl(rbx, r9);\n+  __ shrq(r9, 32);\n+  __ addq(r10, rsi);\n+  __ addq(r10, r9);\n+  __ shlq(rbx, 32);\n+  __ orq(r8, rbx);\n+  __ imulq(r11, rax);\n+  __ movl(r9, Address(rcx, 8));\n+  __ movl(rsi, Address(rcx, 4));\n+  __ movl(rbx, rdi);\n+  __ shrq(rdi, 32);\n+  __ addq(r10, rbx);\n+  __ movl(rbx, r10);\n+  __ shrq(r10, 32);\n+  __ addq(r11, rdi);\n+  __ addq(r11, r10);\n+  __ movq(rdi, r9);\n+  __ imulq(r9, rdx);\n+  __ imulq(rdi, rax);\n+  __ movl(r10, r9);\n+  __ shrq(r9, 32);\n+  __ addq(r11, r10);\n+  __ movl(r10, r11);\n+  __ shrq(r11, 32);\n+  __ addq(rdi, r9);\n+  __ addq(rdi, r11);\n+  __ movq(r9, rsi);\n+  __ imulq(rsi, rdx);\n+  __ imulq(r9, rax);\n+  __ shlq(r10, 32);\n+  __ orq(r10, rbx);\n+  __ movl(rax, Address(rcx, 0));\n+  __ movl(r11, rsi);\n+  __ shrq(rsi, 32);\n+  __ addq(rdi, r11);\n+  __ movl(r11, rdi);\n+  __ shrq(rdi, 32);\n+  __ addq(r9, rsi);\n+  __ addq(r9, rdi);\n+  __ imulq(rdx, rax);\n+  __ pextrw(rbx, xmm0, 3);\n+  __ lea(rdi, ExternalAddress(PI_INV_TABLE));\n+  __ subq(rcx, rdi);\n+  __ addl(rcx, rcx);\n+  __ addl(rcx, rcx);\n+  __ addl(rcx, rcx);\n+  __ addl(rcx, 19);\n+  __ movl(rsi, 32768);\n+  __ andl(rsi, rbx);\n+  __ shrl(rbx, 4);\n+  __ andl(rbx, 2047);\n+  __ subl(rbx, 1023);\n+  __ subl(rcx, rbx);\n+  __ addq(r9, rdx);\n+  __ movl(rdx, rcx);\n+  __ addl(rdx, 32);\n+  __ cmpl(rcx, 1);\n+  __ jcc(Assembler::less, L_2TAG_PACKET_4_0_1);\n+  __ negl(rcx);\n+  __ addl(rcx, 29);\n+  __ shll(r9);\n+  __ movl(rdi, r9);\n+  __ andl(r9, 536870911);\n+  __ testl(r9, 268435456);\n+  __ jcc(Assembler::notEqual, L_2TAG_PACKET_5_0_1);\n+  __ shrl(r9);\n+  __ movl(rbx, 0);\n+  __ shlq(r9, 32);\n+  __ orq(r9, r11);\n+\n+  __ bind(L_2TAG_PACKET_6_0_1);\n+\n+  __ bind(L_2TAG_PACKET_7_0_1);\n+\n+  __ cmpq(r9, 0);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_8_0_1);\n+\n+  __ bind(L_2TAG_PACKET_9_0_1);\n+  __ bsrq(r11, r9);\n+  __ movl(rcx, 29);\n+  __ subl(rcx, r11);\n+  __ jcc(Assembler::lessEqual, L_2TAG_PACKET_10_0_1);\n+  __ shlq(r9);\n+  __ movq(rax, r10);\n+  __ shlq(r10);\n+  __ addl(rdx, rcx);\n+  __ negl(rcx);\n+  __ addl(rcx, 64);\n+  __ shrq(rax);\n+  __ shrq(r8);\n+  __ orq(r9, rax);\n+  __ orq(r10, r8);\n+\n+  __ bind(L_2TAG_PACKET_11_0_1);\n+  __ cvtsi2sdq(xmm0, r9);\n+  __ shrq(r10, 1);\n+  __ cvtsi2sdq(xmm3, r10);\n+  __ xorpd(xmm4, xmm4);\n+  __ shll(rdx, 4);\n+  __ negl(rdx);\n+  __ addl(rdx, 16368);\n+  __ orl(rdx, rsi);\n+  __ xorl(rdx, rbx);\n+  __ pinsrw(xmm4, rdx, 3);\n+  __ movq(xmm2, ExternalAddress(PI_4),     r8 \/*rscratch*\/); \/\/0x40000000UL, 0x3fe921fbUL, 0x18469899UL, 0x3e64442dUL\n+  __ movq(xmm6, ExternalAddress(PI_4 + 8), r8 \/*rscratch*\/); \/\/0x3fe921fbUL, 0x18469899UL, 0x3e64442dUL\n+  __ xorpd(xmm5, xmm5);\n+  __ subl(rdx, 1008);\n+  __ pinsrw(xmm5, rdx, 3);\n+  __ mulsd(xmm0, xmm4);\n+  __ shll(rsi, 16);\n+  __ sarl(rsi, 31);\n+  __ mulsd(xmm3, xmm5);\n+  __ movdqu(xmm1, xmm0);\n+  __ mulsd(xmm0, xmm2);\n+  __ shrl(rdi, 29);\n+  __ addsd(xmm1, xmm3);\n+  __ mulsd(xmm3, xmm2);\n+  __ addl(rdi, rsi);\n+  __ xorl(rdi, rsi);\n+  __ mulsd(xmm6, xmm1);\n+  __ movl(rax, rdi);\n+  __ addsd(xmm6, xmm3);\n+  __ movdqu(xmm2, xmm0);\n+  __ addsd(xmm0, xmm6);\n+  __ subsd(xmm2, xmm0);\n+  __ addsd(xmm6, xmm2);\n+\n+  __ bind(L_2TAG_PACKET_12_0_1);\n+  __ movq(xmm1, ExternalAddress(PI32INV), r8 \/*rscratch*\/);    \/\/0x6dc9c883UL, 0x40245f30UL\n+  __ mulsd(xmm1, xmm0);\n+  __ movq(xmm5, ExternalAddress(ONEHALF), r8 \/*rscratch*\/);    \/\/0x00000000UL, 0x3fe00000UL, 0x00000000UL, 0x3fe00000UL\n+  __ movq(xmm4, ExternalAddress(SIGN_MASK), r8 \/*rscratch*\/);  \/\/0x00000000UL, 0x80000000UL\n+  __ pand(xmm4, xmm0);\n+  __ por(xmm5, xmm4);\n+  __ addpd(xmm1, xmm5);\n+  __ cvttsd2sil(rdx, xmm1);\n+  __ cvtsi2sdl(xmm1, rdx);\n+  __ movq(xmm3, ExternalAddress(P_1), r8 \/*rscratch*\/);      \/\/0x54400000UL, 0x3fb921fbUL\n+  __ movdqu(xmm2, ExternalAddress(P_2), r8 \/*rscratch*\/);    \/\/0x1a600000UL, 0x3d90b461UL, 0x1a600000UL, 0x3d90b461UL\n+  __ mulsd(xmm3, xmm1);\n+  __ unpcklpd(xmm1, xmm1);\n+  __ shll(rax, 3);\n+  __ addl(rdx, 1865216);\n+  __ movdqu(xmm4, xmm0);\n+  __ addl(rdx, rax);\n+  __ andl(rdx, 63);\n+  __ movdqu(xmm5, ExternalAddress(SC_4), r8 \/*rscratch*\/);    \/\/0x54400000UL, 0x3fb921fbUL\n+  __ lea(rax, ExternalAddress(Ctable));\n+  __ shll(rdx, 5);\n+  __ addq(rax, rdx);\n+  __ mulpd(xmm2, xmm1);\n+  __ subsd(xmm0, xmm3);\n+  __ mulsd(xmm1, ExternalAddress(P_3), r8 \/*rscratch*\/);    \/\/0x2e037073UL, 0x3b63198aUL\n+  __ subsd(xmm4, xmm3);\n+  __ movq(xmm7, Address(rax, 8));\n+  __ unpcklpd(xmm0, xmm0);\n+  __ movdqu(xmm3, xmm4);\n+  __ subsd(xmm4, xmm2);\n+  __ mulpd(xmm5, xmm0);\n+  __ subpd(xmm0, xmm2);\n+  __ mulsd(xmm7, xmm4);\n+  __ subsd(xmm3, xmm4);\n+  __ mulpd(xmm5, xmm0);\n+  __ mulpd(xmm0, xmm0);\n+  __ subsd(xmm3, xmm2);\n+  __ movdqu(xmm2, Address(rax, 0));\n+  __ subsd(xmm1, xmm3);\n+  __ movq(xmm3, Address(rax, 24));\n+  __ addsd(xmm2, xmm3);\n+  __ subsd(xmm7, xmm2);\n+  __ subsd(xmm1, xmm6);\n+  __ movdqu(xmm6, ExternalAddress(SC_2), r8 \/*rscratch*\/);    \/\/0x11111111UL, 0x3f811111UL, 0x55555555UL, 0x3fa55555UL\n+  __ mulsd(xmm2, xmm4);\n+  __ mulpd(xmm6, xmm0);\n+  __ mulsd(xmm3, xmm4);\n+  __ mulpd(xmm2, xmm0);\n+  __ mulpd(xmm0, xmm0);\n+  __ addpd(xmm5, ExternalAddress(SC_3), r8 \/*rscratch*\/);    \/\/0x1a01a01aUL, 0xbf2a01a0UL, 0x16c16c17UL, 0xbf56c16cUL\n+  __ mulsd(xmm4, Address(rax, 0));\n+  __ addpd(xmm6, ExternalAddress(SC_1), r8 \/*rscratch*\/);    \/\/0x55555555UL, 0xbfc55555UL, 0x00000000UL, 0xbfe00000UL\n+  __ mulpd(xmm5, xmm0);\n+  __ movdqu(xmm0, xmm3);\n+  __ addsd(xmm3, Address(rax, 8));\n+  __ mulpd(xmm1, xmm7);\n+  __ movdqu(xmm7, xmm4);\n+  __ addsd(xmm4, xmm3);\n+  __ addpd(xmm6, xmm5);\n+  __ movq(xmm5, Address(rax, 8));\n+  __ subsd(xmm5, xmm3);\n+  __ subsd(xmm3, xmm4);\n+  __ addsd(xmm1, Address(rax, 16));\n+  __ mulpd(xmm6, xmm2);\n+  __ addsd(xmm5, xmm0);\n+  __ addsd(xmm3, xmm7);\n+  __ addsd(xmm1, xmm5);\n+  __ addsd(xmm1, xmm3);\n+  __ addsd(xmm1, xmm6);\n+  __ unpckhpd(xmm6, xmm6);\n+  __ movdqu(xmm0, xmm4);\n+  __ addsd(xmm1, xmm6);\n+  __ addsd(xmm0, xmm1);\n+  __ jmp(B1_4);\n+\n+  __ bind(L_2TAG_PACKET_8_0_1);\n+  __ addl(rdx, 64);\n+  __ movq(r9, r10);\n+  __ movq(r10, r8);\n+  __ movl(r8, 0);\n+  __ cmpq(r9, 0);\n+  __ jcc(Assembler::notEqual, L_2TAG_PACKET_9_0_1);\n+  __ addl(rdx, 64);\n+  __ movq(r9, r10);\n+  __ movq(r10, r8);\n+  __ cmpq(r9, 0);\n+  __ jcc(Assembler::notEqual, L_2TAG_PACKET_9_0_1);\n+  __ xorpd(xmm0, xmm0);\n+  __ xorpd(xmm6, xmm6);\n+  __ jmp(L_2TAG_PACKET_12_0_1);\n+\n+  __ bind(L_2TAG_PACKET_10_0_1);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_11_0_1);\n+  __ negl(rcx);\n+  __ shrq(r10);\n+  __ movq(rax, r9);\n+  __ shrq(r9);\n+  __ subl(rdx, rcx);\n+  __ negl(rcx);\n+  __ addl(rcx, 64);\n+  __ shlq(rax);\n+  __ orq(r10, rax);\n+  __ jmp(L_2TAG_PACKET_11_0_1);\n+\n+  __ bind(L_2TAG_PACKET_4_0_1);\n+  __ negl(rcx);\n+  __ shlq(r9, 32);\n+  __ orq(r9, r11);\n+  __ shlq(r9);\n+  __ movq(rdi, r9);\n+  __ testl(r9, INT_MIN);\n+  __ jcc(Assembler::notEqual, L_2TAG_PACKET_13_0_1);\n+  __ shrl(r9);\n+  __ movl(rbx, 0);\n+  __ shrq(rdi, 3);\n+  __ jmp(L_2TAG_PACKET_7_0_1);\n+\n+  __ bind(L_2TAG_PACKET_5_0_1);\n+  __ shrl(r9);\n+  __ movl(rbx, 536870912);\n+  __ shrl(rbx);\n+  __ shlq(r9, 32);\n+  __ orq(r9, r11);\n+  __ shlq(rbx, 32);\n+  __ addl(rdi, 536870912);\n+  __ movl(rcx, 0);\n+  __ movl(r11, 0);\n+  __ subq(rcx, r8);\n+  __ sbbq(r11, r10);\n+  __ sbbq(rbx, r9);\n+  __ movq(r8, rcx);\n+  __ movq(r10, r11);\n+  __ movq(r9, rbx);\n+  __ movl(rbx, 32768);\n+  __ jmp(L_2TAG_PACKET_6_0_1);\n+\n+  __ bind(L_2TAG_PACKET_13_0_1);\n+  __ shrl(r9);\n+  __ mov64(rbx, 0x100000000);\n+  __ shrq(rbx);\n+  __ movl(rcx, 0);\n+  __ movl(r11, 0);\n+  __ subq(rcx, r8);\n+  __ sbbq(r11, r10);\n+  __ sbbq(rbx, r9);\n+  __ movq(r8, rcx);\n+  __ movq(r10, r11);\n+  __ movq(r9, rbx);\n+  __ movl(rbx, 32768);\n+  __ shrq(rdi, 3);\n+  __ addl(rdi, 536870912);\n+  __ jmp(L_2TAG_PACKET_7_0_1);\n+\n+  __ bind(L_2TAG_PACKET_3_0_1);\n+  __ movq(xmm0, Address(rsp, 8));\n+  __ mulsd(xmm0, ExternalAddress(NEG_ZERO), r8 \/*rscratch*\/);    \/\/0x00000000UL, 0x80000000UL\n+  __ movq(Address(rsp, 0), xmm0);\n+\n+  __ bind(L_2TAG_PACKET_14_0_1);\n+\n+  __ bind(B1_4);\n+  __ addq(rsp, 16);\n+  __ pop(rbx);\n+\n+#ifdef _WIN64\n+  __ pop(rdi);\n+  __ pop(rsi);\n+#endif\n+\n+  __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ ret(0);\n+\n+  return start;\n+}\n+\n+#undef __\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_sin.cpp","additions":651,"deletions":0,"binary":false,"changes":651,"status":"added"},{"patch":"@@ -0,0 +1,1031 @@\n+\/*\n+* Copyright (c) 2016, 2021, Intel Corporation. All rights reserved.\n+* Intel Math Library (LIBM) Source Code\n+*\n+* DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+*\n+* This code is free software; you can redistribute it and\/or modify it\n+* under the terms of the GNU General Public License version 2 only, as\n+* published by the Free Software Foundation.\n+*\n+* This code is distributed in the hope that it will be useful, but WITHOUT\n+* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+* version 2 for more details (a copy is included in the LICENSE file that\n+* accompanied this code).\n+*\n+* You should have received a copy of the GNU General Public License version\n+* 2 along with this work; if not, write to the Free Software Foundation,\n+* Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+*\n+* Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+* or visit www.oracle.com if you need additional information or have any\n+* questions.\n+*\n+*\/\n+\n+#include \"precompiled.hpp\"\n+#include \"macroAssembler_x86.hpp\"\n+#include \"stubGenerator_x86_64.hpp\"\n+\n+\/******************************************************************************\/\n+\/\/                     ALGORITHM DESCRIPTION - TAN()\n+\/\/                     ---------------------\n+\/\/\n+\/\/ Polynomials coefficients and other constants.\n+\/\/\n+\/\/ Note that in this algorithm, there is a different polynomial for\n+\/\/ each breakpoint, so there are 32 sets of polynomial coefficients\n+\/\/ as well as 32 instances of the other constants.\n+\/\/\n+\/\/ The polynomial coefficients and constants are offset from the start\n+\/\/ of the main block as follows:\n+\/\/\n+\/\/   0:  c8 | c0\n+\/\/  16:  c9 | c1\n+\/\/  32: c10 | c2\n+\/\/  48: c11 | c3\n+\/\/  64: c12 | c4\n+\/\/  80: c13 | c5\n+\/\/  96: c14 | c6\n+\/\/ 112: c15 | c7\n+\/\/ 128: T_hi\n+\/\/ 136: T_lo\n+\/\/ 144: Sigma\n+\/\/ 152: T_hl\n+\/\/ 160: Tau\n+\/\/ 168: Mask\n+\/\/ 176: (end of block)\n+\/\/\n+\/\/ The total table size is therefore 5632 bytes.\n+\/\/\n+\/\/ Note that c0 and c1 are always zero. We could try storing\n+\/\/ other constants here, and just loading the low part of the\n+\/\/ SIMD register in these cases, after ensuring the high part\n+\/\/ is zero.\n+\/\/\n+\/\/ The higher terms of the polynomial are computed in the *low*\n+\/\/ part of the SIMD register. This is so we can overlap the\n+\/\/ multiplication by r^8 and the unpacking of the other part.\n+\/\/\n+\/\/ The constants are:\n+\/\/ T_hi + T_lo = accurate constant term in power series\n+\/\/ Sigma + T_hl = accurate coefficient of r in power series (Sigma=1 bit)\n+\/\/ Tau = multiplier for the reciprocal, always -1 or 0\n+\/\/\n+\/\/ The basic reconstruction formula using these constants is:\n+\/\/\n+\/\/ High = tau * recip_hi + t_hi\n+\/\/ Med = (sgn * r + t_hl * r)_hi\n+\/\/ Low = (sgn * r + t_hl * r)_lo +\n+\/\/       tau * recip_lo + T_lo + (T_hl + sigma) * c + pol\n+\/\/\n+\/\/ where pol = c0 + c1 * r + c2 * r^2 + ... + c15 * r^15\n+\/\/\n+\/\/ (c0 = c1 = 0, but using them keeps SIMD regularity)\n+\/\/\n+\/\/ We then do a compensated sum High + Med, add the low parts together\n+\/\/ and then do the final sum.\n+\/\/\n+\/\/ Here recip_hi + recip_lo is an accurate reciprocal of the remainder\n+\/\/ modulo pi\/2\n+\/\/\n+\/\/ Special cases:\n+\/\/  tan(NaN) = quiet NaN, and raise invalid exception\n+\/\/  tan(INF) = NaN and raise invalid exception\n+\/\/  tan(+\/-0) = +\/-0\n+\/\/\n+\/******************************************************************************\/\n+\n+ATTRIBUTE_ALIGNED(16) juint _MUL16[] =\n+{\n+    0x00000000UL, 0x40300000UL, 0x00000000UL, 0x3ff00000UL\n+};\n+\n+ATTRIBUTE_ALIGNED(16) juint _sign_mask_tan[] =\n+{\n+    0x00000000UL, 0x80000000UL, 0x00000000UL, 0x80000000UL\n+};\n+\n+ATTRIBUTE_ALIGNED(16) juint _PI32INV_tan[] =\n+{\n+    0x6dc9c883UL, 0x3fe45f30UL, 0x6dc9c883UL, 0x40245f30UL\n+};\n+\n+ATTRIBUTE_ALIGNED(16) juint _P_1_tan[] =\n+{\n+    0x54444000UL, 0x3fb921fbUL, 0x54440000UL, 0x3fb921fbUL\n+};\n+\n+ATTRIBUTE_ALIGNED(16) juint _P_2_tan[] =\n+{\n+    0x67674000UL, 0xbd32e7b9UL, 0x4c4c0000UL, 0x3d468c23UL\n+};\n+\n+ATTRIBUTE_ALIGNED(16) juint _P_3_tan[] =\n+{\n+    0x3707344aUL, 0x3aa8a2e0UL, 0x03707345UL, 0x3ae98a2eUL\n+};\n+\n+ATTRIBUTE_ALIGNED(16) juint _Ctable_tan[] =\n+{\n+    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x882c10faUL,\n+    0x3f9664f4UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x00000000UL, 0x55e6c23dUL, 0x3f8226e3UL, 0x55555555UL,\n+    0x3fd55555UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n+    0x0e157de0UL, 0x3f6d6d3dUL, 0x11111111UL, 0x3fc11111UL, 0x00000000UL,\n+    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x452b75e3UL, 0x3f57da36UL,\n+    0x1ba1ba1cUL, 0x3faba1baUL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x4e435f9bUL,\n+    0x3f953f83UL, 0x00000000UL, 0x00000000UL, 0x3c6e8e46UL, 0x3f9b74eaUL,\n+    0x00000000UL, 0x00000000UL, 0xda5b7511UL, 0x3f85ad63UL, 0xdc230b9bUL,\n+    0x3fb97558UL, 0x26cb3788UL, 0x3f881308UL, 0x76fc4985UL, 0x3fd62ac9UL,\n+    0x77bb08baUL, 0x3f757c85UL, 0xb6247521UL, 0x3fb1381eUL, 0x5922170cUL,\n+    0x3f754e95UL, 0x8746482dUL, 0x3fc27f83UL, 0x11055b30UL, 0x3f64e391UL,\n+    0x3e666320UL, 0x3fa3e609UL, 0x0de9dae3UL, 0x3f6301dfUL, 0x1f1dca06UL,\n+    0x3fafa8aeUL, 0x8c5b2da2UL, 0x3fb936bbUL, 0x4e88f7a5UL, 0x3c587d05UL,\n+    0x00000000UL, 0x3ff00000UL, 0xa8935dd9UL, 0x3f83dde2UL, 0x00000000UL,\n+    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x5a279ea3UL, 0x3faa3407UL,\n+    0x00000000UL, 0x00000000UL, 0x432d65faUL, 0x3fa70153UL, 0x00000000UL,\n+    0x00000000UL, 0x891a4602UL, 0x3f9d03efUL, 0xd62ca5f8UL, 0x3fca77d9UL,\n+    0xb35f4628UL, 0x3f97a265UL, 0x433258faUL, 0x3fd8cf51UL, 0xb58fd909UL,\n+    0x3f8f88e3UL, 0x01771ceaUL, 0x3fc2b154UL, 0xf3562f8eUL, 0x3f888f57UL,\n+    0xc028a723UL, 0x3fc7370fUL, 0x20b7f9f0UL, 0x3f80f44cUL, 0x214368e9UL,\n+    0x3fb6dfaaUL, 0x28891863UL, 0x3f79b4b6UL, 0x172dbbf0UL, 0x3fb6cb8eUL,\n+    0xe0553158UL, 0x3fc975f5UL, 0x593fe814UL, 0x3c2ef5d3UL, 0x00000000UL,\n+    0x3ff00000UL, 0x03dec550UL, 0x3fa44203UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x00000000UL, 0x9314533eUL, 0x3fbb8ec5UL, 0x00000000UL,\n+    0x00000000UL, 0x09aa36d0UL, 0x3fb6d3f4UL, 0x00000000UL, 0x00000000UL,\n+    0xdcb427fdUL, 0x3fb13950UL, 0xd87ab0bbUL, 0x3fd5335eUL, 0xce0ae8a5UL,\n+    0x3fabb382UL, 0x79143126UL, 0x3fddba41UL, 0x5f2b28d4UL, 0x3fa552f1UL,\n+    0x59f21a6dUL, 0x3fd015abUL, 0x22c27d95UL, 0x3fa0e984UL, 0xe19fc6aaUL,\n+    0x3fd0576cUL, 0x8f2c2950UL, 0x3f9a4898UL, 0xc0b3f22cUL, 0x3fc59462UL,\n+    0x1883a4b8UL, 0x3f94b61cUL, 0x3f838640UL, 0x3fc30eb8UL, 0x355c63dcUL,\n+    0x3fd36a08UL, 0x1dce993dUL, 0xbc6d704dUL, 0x00000000UL, 0x3ff00000UL,\n+    0x2b82ab63UL, 0x3fb78e92UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x56f37042UL, 0x3fccfc56UL, 0x00000000UL, 0x00000000UL,\n+    0xaa563951UL, 0x3fc90125UL, 0x00000000UL, 0x00000000UL, 0x3d0e7c5dUL,\n+    0x3fc50533UL, 0x9bed9b2eUL, 0x3fdf0ed9UL, 0x5fe7c47cUL, 0x3fc1f250UL,\n+    0x96c125e5UL, 0x3fe2edd9UL, 0x5a02bbd8UL, 0x3fbe5c71UL, 0x86362c20UL,\n+    0x3fda08b7UL, 0x4b4435edUL, 0x3fb9d342UL, 0x4b494091UL, 0x3fd911bdUL,\n+    0xb56658beUL, 0x3fb5e4c7UL, 0x93a2fd76UL, 0x3fd3c092UL, 0xda271794UL,\n+    0x3fb29910UL, 0x3303df2bUL, 0x3fd189beUL, 0x99fcef32UL, 0x3fda8279UL,\n+    0xb68c1467UL, 0x3c708b2fUL, 0x00000000UL, 0x3ff00000UL, 0x980c4337UL,\n+    0x3fc5f619UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n+    0xcc03e501UL, 0x3fdff10fUL, 0x00000000UL, 0x00000000UL, 0x44a4e845UL,\n+    0x3fddb63bUL, 0x00000000UL, 0x00000000UL, 0x3768ad9fUL, 0x3fdb72a4UL,\n+    0x3dd01ccaUL, 0x3fe5fdb9UL, 0xa61d2811UL, 0x3fd972b2UL, 0x5645ad0bUL,\n+    0x3fe977f9UL, 0xd013b3abUL, 0x3fd78ca3UL, 0xbf0bf914UL, 0x3fe4f192UL,\n+    0x4d53e730UL, 0x3fd5d060UL, 0x3f8b9000UL, 0x3fe49933UL, 0xe2b82f08UL,\n+    0x3fd4322aUL, 0x5936a835UL, 0x3fe27ae1UL, 0xb1c61c9bUL, 0x3fd2b3fbUL,\n+    0xef478605UL, 0x3fe1659eUL, 0x190834ecUL, 0x3fe11ab7UL, 0xcdb625eaUL,\n+    0xbc8e564bUL, 0x00000000UL, 0x3ff00000UL, 0xb07217e3UL, 0x3fd248f1UL,\n+    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x2b2c49d0UL,\n+    0x3ff2de9cUL, 0x00000000UL, 0x00000000UL, 0x2655bc98UL, 0x3ff33e58UL,\n+    0x00000000UL, 0x00000000UL, 0xff691fa2UL, 0x3ff3972eUL, 0xe93463bdUL,\n+    0x3feeed87UL, 0x070e10a0UL, 0x3ff3f5b2UL, 0xf4d790a4UL, 0x3ff20c10UL,\n+    0xa04e8ea3UL, 0x3ff4541aUL, 0x386accd3UL, 0x3ff1369eUL, 0x222a66ddUL,\n+    0x3ff4b521UL, 0x22a9777eUL, 0x3ff20817UL, 0x52a04a6eUL, 0x3ff5178fUL,\n+    0xddaa0031UL, 0x3ff22137UL, 0x4447d47cUL, 0x3ff57c01UL, 0x1e9c7f1dUL,\n+    0x3ff29311UL, 0x2ab7f990UL, 0x3fe561b8UL, 0x209c7df1UL, 0x3c87a8c5UL,\n+    0x00000000UL, 0x3ff00000UL, 0x4170bcc6UL, 0x3fdc92d8UL, 0x00000000UL,\n+    0x00000000UL, 0x00000000UL, 0x00000000UL, 0xc7ab4d5aUL, 0x40085e24UL,\n+    0x00000000UL, 0x00000000UL, 0xe93ea75dUL, 0x400b963dUL, 0x00000000UL,\n+    0x00000000UL, 0x94a7f25aUL, 0x400f37e2UL, 0x4b6261cbUL, 0x3ff5f984UL,\n+    0x5a9dd812UL, 0x4011aab0UL, 0x74c30018UL, 0x3ffaf5a5UL, 0x7f2ce8e3UL,\n+    0x4013fe8bUL, 0xfe8e54faUL, 0x3ffd7334UL, 0x670d618dUL, 0x4016a10cUL,\n+    0x4db97058UL, 0x4000e012UL, 0x24df44ddUL, 0x40199c5fUL, 0x697d6eceUL,\n+    0x4003006eUL, 0x83298b82UL, 0x401cfc4dUL, 0x19d490d6UL, 0x40058c19UL,\n+    0x2ae42850UL, 0x3fea4300UL, 0x118e20e6UL, 0xbc7a6db8UL, 0x00000000UL,\n+    0x40000000UL, 0xe33345b8UL, 0xbfd4e526UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x00000000UL, 0x65965966UL, 0x40219659UL, 0x00000000UL,\n+    0x00000000UL, 0x882c10faUL, 0x402664f4UL, 0x00000000UL, 0x00000000UL,\n+    0x83cd3723UL, 0x402c8342UL, 0x00000000UL, 0x40000000UL, 0x55e6c23dUL,\n+    0x403226e3UL, 0x55555555UL, 0x40055555UL, 0x34451939UL, 0x40371c96UL,\n+    0xaaaaaaabUL, 0x400aaaaaUL, 0x0e157de0UL, 0x403d6d3dUL, 0x11111111UL,\n+    0x40111111UL, 0xa738201fUL, 0x4042bbceUL, 0x05b05b06UL, 0x4015b05bUL,\n+    0x452b75e3UL, 0x4047da36UL, 0x1ba1ba1cUL, 0x401ba1baUL, 0x00000000UL,\n+    0x3ff00000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x40000000UL,\n+    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x4f48b8d3UL, 0xbf33eaf9UL, 0x00000000UL, 0x00000000UL,\n+    0x0cf7586fUL, 0x3f20b8eaUL, 0x00000000UL, 0x00000000UL, 0xd0258911UL,\n+    0xbf0abaf3UL, 0x23e49fe9UL, 0xbfab5a8cUL, 0x2d53222eUL, 0x3ef60d15UL,\n+    0x21169451UL, 0x3fa172b2UL, 0xbb254dbcUL, 0xbee1d3b5UL, 0xdbf93b8eUL,\n+    0xbf84c7dbUL, 0x05b4630bUL, 0x3ecd3364UL, 0xee9aada7UL, 0x3f743924UL,\n+    0x794a8297UL, 0xbeb7b7b9UL, 0xe015f797UL, 0xbf5d41f5UL, 0xe41a4a56UL,\n+    0x3ea35dfbUL, 0xe4c2a251UL, 0x3f49a2abUL, 0x5af9e000UL, 0xbfce49ceUL,\n+    0x8c743719UL, 0x3d1eb860UL, 0x00000000UL, 0x00000000UL, 0x1b4863cfUL,\n+    0x3fd78294UL, 0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0xfffffff8UL,\n+    0x535ad890UL, 0xbf2b9320UL, 0x00000000UL, 0x00000000UL, 0x018fdf1fUL,\n+    0x3f16d61dUL, 0x00000000UL, 0x00000000UL, 0x0359f1beUL, 0xbf0139e4UL,\n+    0xa4317c6dUL, 0xbfa67e17UL, 0x82672d0fUL, 0x3eebb405UL, 0x2f1b621eUL,\n+    0x3f9f455bUL, 0x51ccf238UL, 0xbed55317UL, 0xf437b9acUL, 0xbf804beeUL,\n+    0xc791a2b5UL, 0x3ec0e993UL, 0x919a1db2UL, 0x3f7080c2UL, 0x336a5b0eUL,\n+    0xbeaa48a2UL, 0x0a268358UL, 0xbf55a443UL, 0xdfd978e4UL, 0x3e94b61fUL,\n+    0xd7767a58UL, 0x3f431806UL, 0x2aea0000UL, 0xbfc9bbe8UL, 0x7723ea61UL,\n+    0xbd3a2369UL, 0x00000000UL, 0x00000000UL, 0xdf7796ffUL, 0x3fd6e642UL,\n+    0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0xfffffff8UL, 0xb9ff07ceUL,\n+    0xbf231c78UL, 0x00000000UL, 0x00000000UL, 0xa5517182UL, 0x3f0ff0e0UL,\n+    0x00000000UL, 0x00000000UL, 0x790b4cbcUL, 0xbef66191UL, 0x848a46c6UL,\n+    0xbfa21ac0UL, 0xb16435faUL, 0x3ee1d3ecUL, 0x2a1aa832UL, 0x3f9c71eaUL,\n+    0xfdd299efUL, 0xbec9dd1aUL, 0x3f8dbaafUL, 0xbf793363UL, 0x309fc6eaUL,\n+    0x3eb415d6UL, 0xbee60471UL, 0x3f6b83baUL, 0x94a0a697UL, 0xbe9dae11UL,\n+    0x3e5c67b3UL, 0xbf4fd07bUL, 0x9a8f3e3eUL, 0x3e86bd75UL, 0xa4beb7a4UL,\n+    0x3f3d1eb1UL, 0x29cfc000UL, 0xbfc549ceUL, 0xbf159358UL, 0xbd397b33UL,\n+    0x00000000UL, 0x00000000UL, 0x871fee6cUL, 0x3fd666f0UL, 0x00000000UL,\n+    0x3ff00000UL, 0x00000000UL, 0xfffffff8UL, 0x7d98a556UL, 0xbf1a3958UL,\n+    0x00000000UL, 0x00000000UL, 0x9d88dc01UL, 0x3f0704c2UL, 0x00000000UL,\n+    0x00000000UL, 0x73742a2bUL, 0xbeed054aUL, 0x58844587UL, 0xbf9c2a13UL,\n+    0x55688a79UL, 0x3ed7a326UL, 0xee33f1d6UL, 0x3f9a48f4UL, 0xa8dc9888UL,\n+    0xbebf8939UL, 0xaad4b5b8UL, 0xbf72f746UL, 0x9102efa1UL, 0x3ea88f82UL,\n+    0xdabc29cfUL, 0x3f678228UL, 0x9289afb8UL, 0xbe90f456UL, 0x741fb4edUL,\n+    0xbf46f3a3UL, 0xa97f6663UL, 0x3e79b4bfUL, 0xca89ff3fUL, 0x3f36db70UL,\n+    0xa8a2a000UL, 0xbfc0ee13UL, 0x3da24be1UL, 0xbd338b9fUL, 0x00000000UL,\n+    0x00000000UL, 0x11cd6c69UL, 0x3fd601fdUL, 0x00000000UL, 0x3ff00000UL,\n+    0x00000000UL, 0xfffffff8UL, 0x1a154b97UL, 0xbf116b01UL, 0x00000000UL,\n+    0x00000000UL, 0x2d427630UL, 0x3f0147bfUL, 0x00000000UL, 0x00000000UL,\n+    0xb93820c8UL, 0xbee264d4UL, 0xbb6cbb18UL, 0xbf94ab8cUL, 0x888d4d92UL,\n+    0x3ed0568bUL, 0x60730f7cUL, 0x3f98b19bUL, 0xe4b1fb11UL, 0xbeb2f950UL,\n+    0x22cf9f74UL, 0xbf6b21cdUL, 0x4a3ff0a6UL, 0x3e9f499eUL, 0xfd2b83ceUL,\n+    0x3f64aad7UL, 0x637b73afUL, 0xbe83487cUL, 0xe522591aUL, 0xbf3fc092UL,\n+    0xa158e8bcUL, 0x3e6e3aaeUL, 0xe5e82ffaUL, 0x3f329d2fUL, 0xd636a000UL,\n+    0xbfb9477fUL, 0xc2c2d2bcUL, 0xbd135ef9UL, 0x00000000UL, 0x00000000UL,\n+    0xf2fdb123UL, 0x3fd5b566UL, 0x00000000UL, 0x3ff00000UL, 0x00000000UL,\n+    0xfffffff8UL, 0xc41acb64UL, 0xbf05448dUL, 0x00000000UL, 0x00000000UL,\n+    0xdbb03d6fUL, 0x3efb7ad2UL, 0x00000000UL, 0x00000000UL, 0x9e42962dUL,\n+    0xbed5aea5UL, 0x2579f8efUL, 0xbf8b2398UL, 0x288a1ed9UL, 0x3ec81441UL,\n+    0xb0198dc5UL, 0x3f979a3aUL, 0x2fdfe253UL, 0xbea57cd3UL, 0x5766336fUL,\n+    0xbf617caaUL, 0x600944c3UL, 0x3e954ed6UL, 0xa4e0aaf8UL, 0x3f62c646UL,\n+    0x6b8fb29cUL, 0xbe74e3a3UL, 0xdc4c0409UL, 0xbf33f952UL, 0x9bffe365UL,\n+    0x3e6301ecUL, 0xb8869e44UL, 0x3f2fc566UL, 0xe1e04000UL, 0xbfb0cc62UL,\n+    0x016b907fUL, 0xbd119cbcUL, 0x00000000UL, 0x00000000UL, 0xe6b9d8faUL,\n+    0x3fd57fb3UL, 0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0xfffffff8UL,\n+    0x5daf22a6UL, 0xbef429d7UL, 0x00000000UL, 0x00000000UL, 0x06bca545UL,\n+    0x3ef7a27dUL, 0x00000000UL, 0x00000000UL, 0x7211c19aUL, 0xbec41c3eUL,\n+    0x956ed53eUL, 0xbf7ae3f4UL, 0xee750e72UL, 0x3ec3901bUL, 0x91d443f5UL,\n+    0x3f96f713UL, 0x36661e6cUL, 0xbe936e09UL, 0x506f9381UL, 0xbf5122e8UL,\n+    0xcb6dd43fUL, 0x3e9041b9UL, 0x6698b2ffUL, 0x3f61b0c7UL, 0x576bf12bUL,\n+    0xbe625a8aUL, 0xe5a0e9dcUL, 0xbf23499dUL, 0x110384ddUL, 0x3e5b1c2cUL,\n+    0x68d43db6UL, 0x3f2cb899UL, 0x6ecac000UL, 0xbfa0c414UL, 0xcd7dd58cUL,\n+    0x3d13500fUL, 0x00000000UL, 0x00000000UL, 0x85a2c8fbUL, 0x3fd55fe0UL,\n+    0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0xfffffff8UL, 0x00000000UL,\n+    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x2bf70ebeUL, 0x3ef66a8fUL,\n+    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0xd644267fUL, 0x3ec22805UL, 0x16c16c17UL, 0x3f96c16cUL,\n+    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0xc4e09162UL,\n+    0x3e8d6db2UL, 0xbc011567UL, 0x3f61566aUL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x00000000UL, 0x1f79955cUL, 0x3e57da4eUL, 0x9334ef0bUL,\n+    0x3f2bbd77UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x00000000UL, 0x55555555UL, 0x3fd55555UL, 0x00000000UL,\n+    0x3ff00000UL, 0x00000000UL, 0xfffffff8UL, 0x5daf22a6UL, 0x3ef429d7UL,\n+    0x00000000UL, 0x00000000UL, 0x06bca545UL, 0x3ef7a27dUL, 0x00000000UL,\n+    0x00000000UL, 0x7211c19aUL, 0x3ec41c3eUL, 0x956ed53eUL, 0x3f7ae3f4UL,\n+    0xee750e72UL, 0x3ec3901bUL, 0x91d443f5UL, 0x3f96f713UL, 0x36661e6cUL,\n+    0x3e936e09UL, 0x506f9381UL, 0x3f5122e8UL, 0xcb6dd43fUL, 0x3e9041b9UL,\n+    0x6698b2ffUL, 0x3f61b0c7UL, 0x576bf12bUL, 0x3e625a8aUL, 0xe5a0e9dcUL,\n+    0x3f23499dUL, 0x110384ddUL, 0x3e5b1c2cUL, 0x68d43db6UL, 0x3f2cb899UL,\n+    0x6ecac000UL, 0x3fa0c414UL, 0xcd7dd58cUL, 0xbd13500fUL, 0x00000000UL,\n+    0x00000000UL, 0x85a2c8fbUL, 0x3fd55fe0UL, 0x00000000UL, 0x3ff00000UL,\n+    0x00000000UL, 0xfffffff8UL, 0xc41acb64UL, 0x3f05448dUL, 0x00000000UL,\n+    0x00000000UL, 0xdbb03d6fUL, 0x3efb7ad2UL, 0x00000000UL, 0x00000000UL,\n+    0x9e42962dUL, 0x3ed5aea5UL, 0x2579f8efUL, 0x3f8b2398UL, 0x288a1ed9UL,\n+    0x3ec81441UL, 0xb0198dc5UL, 0x3f979a3aUL, 0x2fdfe253UL, 0x3ea57cd3UL,\n+    0x5766336fUL, 0x3f617caaUL, 0x600944c3UL, 0x3e954ed6UL, 0xa4e0aaf8UL,\n+    0x3f62c646UL, 0x6b8fb29cUL, 0x3e74e3a3UL, 0xdc4c0409UL, 0x3f33f952UL,\n+    0x9bffe365UL, 0x3e6301ecUL, 0xb8869e44UL, 0x3f2fc566UL, 0xe1e04000UL,\n+    0x3fb0cc62UL, 0x016b907fUL, 0x3d119cbcUL, 0x00000000UL, 0x00000000UL,\n+    0xe6b9d8faUL, 0x3fd57fb3UL, 0x00000000UL, 0x3ff00000UL, 0x00000000UL,\n+    0xfffffff8UL, 0x1a154b97UL, 0x3f116b01UL, 0x00000000UL, 0x00000000UL,\n+    0x2d427630UL, 0x3f0147bfUL, 0x00000000UL, 0x00000000UL, 0xb93820c8UL,\n+    0x3ee264d4UL, 0xbb6cbb18UL, 0x3f94ab8cUL, 0x888d4d92UL, 0x3ed0568bUL,\n+    0x60730f7cUL, 0x3f98b19bUL, 0xe4b1fb11UL, 0x3eb2f950UL, 0x22cf9f74UL,\n+    0x3f6b21cdUL, 0x4a3ff0a6UL, 0x3e9f499eUL, 0xfd2b83ceUL, 0x3f64aad7UL,\n+    0x637b73afUL, 0x3e83487cUL, 0xe522591aUL, 0x3f3fc092UL, 0xa158e8bcUL,\n+    0x3e6e3aaeUL, 0xe5e82ffaUL, 0x3f329d2fUL, 0xd636a000UL, 0x3fb9477fUL,\n+    0xc2c2d2bcUL, 0x3d135ef9UL, 0x00000000UL, 0x00000000UL, 0xf2fdb123UL,\n+    0x3fd5b566UL, 0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0xfffffff8UL,\n+    0x7d98a556UL, 0x3f1a3958UL, 0x00000000UL, 0x00000000UL, 0x9d88dc01UL,\n+    0x3f0704c2UL, 0x00000000UL, 0x00000000UL, 0x73742a2bUL, 0x3eed054aUL,\n+    0x58844587UL, 0x3f9c2a13UL, 0x55688a79UL, 0x3ed7a326UL, 0xee33f1d6UL,\n+    0x3f9a48f4UL, 0xa8dc9888UL, 0x3ebf8939UL, 0xaad4b5b8UL, 0x3f72f746UL,\n+    0x9102efa1UL, 0x3ea88f82UL, 0xdabc29cfUL, 0x3f678228UL, 0x9289afb8UL,\n+    0x3e90f456UL, 0x741fb4edUL, 0x3f46f3a3UL, 0xa97f6663UL, 0x3e79b4bfUL,\n+    0xca89ff3fUL, 0x3f36db70UL, 0xa8a2a000UL, 0x3fc0ee13UL, 0x3da24be1UL,\n+    0x3d338b9fUL, 0x00000000UL, 0x00000000UL, 0x11cd6c69UL, 0x3fd601fdUL,\n+    0x00000000UL, 0x3ff00000UL, 0x00000000UL, 0xfffffff8UL, 0xb9ff07ceUL,\n+    0x3f231c78UL, 0x00000000UL, 0x00000000UL, 0xa5517182UL, 0x3f0ff0e0UL,\n+    0x00000000UL, 0x00000000UL, 0x790b4cbcUL, 0x3ef66191UL, 0x848a46c6UL,\n+    0x3fa21ac0UL, 0xb16435faUL, 0x3ee1d3ecUL, 0x2a1aa832UL, 0x3f9c71eaUL,\n+    0xfdd299efUL, 0x3ec9dd1aUL, 0x3f8dbaafUL, 0x3f793363UL, 0x309fc6eaUL,\n+    0x3eb415d6UL, 0xbee60471UL, 0x3f6b83baUL, 0x94a0a697UL, 0x3e9dae11UL,\n+    0x3e5c67b3UL, 0x3f4fd07bUL, 0x9a8f3e3eUL, 0x3e86bd75UL, 0xa4beb7a4UL,\n+    0x3f3d1eb1UL, 0x29cfc000UL, 0x3fc549ceUL, 0xbf159358UL, 0x3d397b33UL,\n+    0x00000000UL, 0x00000000UL, 0x871fee6cUL, 0x3fd666f0UL, 0x00000000UL,\n+    0x3ff00000UL, 0x00000000UL, 0xfffffff8UL, 0x535ad890UL, 0x3f2b9320UL,\n+    0x00000000UL, 0x00000000UL, 0x018fdf1fUL, 0x3f16d61dUL, 0x00000000UL,\n+    0x00000000UL, 0x0359f1beUL, 0x3f0139e4UL, 0xa4317c6dUL, 0x3fa67e17UL,\n+    0x82672d0fUL, 0x3eebb405UL, 0x2f1b621eUL, 0x3f9f455bUL, 0x51ccf238UL,\n+    0x3ed55317UL, 0xf437b9acUL, 0x3f804beeUL, 0xc791a2b5UL, 0x3ec0e993UL,\n+    0x919a1db2UL, 0x3f7080c2UL, 0x336a5b0eUL, 0x3eaa48a2UL, 0x0a268358UL,\n+    0x3f55a443UL, 0xdfd978e4UL, 0x3e94b61fUL, 0xd7767a58UL, 0x3f431806UL,\n+    0x2aea0000UL, 0x3fc9bbe8UL, 0x7723ea61UL, 0x3d3a2369UL, 0x00000000UL,\n+    0x00000000UL, 0xdf7796ffUL, 0x3fd6e642UL, 0x00000000UL, 0x3ff00000UL,\n+    0x00000000UL, 0xfffffff8UL, 0x4f48b8d3UL, 0x3f33eaf9UL, 0x00000000UL,\n+    0x00000000UL, 0x0cf7586fUL, 0x3f20b8eaUL, 0x00000000UL, 0x00000000UL,\n+    0xd0258911UL, 0x3f0abaf3UL, 0x23e49fe9UL, 0x3fab5a8cUL, 0x2d53222eUL,\n+    0x3ef60d15UL, 0x21169451UL, 0x3fa172b2UL, 0xbb254dbcUL, 0x3ee1d3b5UL,\n+    0xdbf93b8eUL, 0x3f84c7dbUL, 0x05b4630bUL, 0x3ecd3364UL, 0xee9aada7UL,\n+    0x3f743924UL, 0x794a8297UL, 0x3eb7b7b9UL, 0xe015f797UL, 0x3f5d41f5UL,\n+    0xe41a4a56UL, 0x3ea35dfbUL, 0xe4c2a251UL, 0x3f49a2abUL, 0x5af9e000UL,\n+    0x3fce49ceUL, 0x8c743719UL, 0xbd1eb860UL, 0x00000000UL, 0x00000000UL,\n+    0x1b4863cfUL, 0x3fd78294UL, 0x00000000UL, 0x3ff00000UL, 0x00000000UL,\n+    0xfffffff8UL, 0x65965966UL, 0xc0219659UL, 0x00000000UL, 0x00000000UL,\n+    0x882c10faUL, 0x402664f4UL, 0x00000000UL, 0x00000000UL, 0x83cd3723UL,\n+    0xc02c8342UL, 0x00000000UL, 0xc0000000UL, 0x55e6c23dUL, 0x403226e3UL,\n+    0x55555555UL, 0x40055555UL, 0x34451939UL, 0xc0371c96UL, 0xaaaaaaabUL,\n+    0xc00aaaaaUL, 0x0e157de0UL, 0x403d6d3dUL, 0x11111111UL, 0x40111111UL,\n+    0xa738201fUL, 0xc042bbceUL, 0x05b05b06UL, 0xc015b05bUL, 0x452b75e3UL,\n+    0x4047da36UL, 0x1ba1ba1cUL, 0x401ba1baUL, 0x00000000UL, 0xbff00000UL,\n+    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x40000000UL, 0x00000000UL,\n+    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n+    0xc7ab4d5aUL, 0xc0085e24UL, 0x00000000UL, 0x00000000UL, 0xe93ea75dUL,\n+    0x400b963dUL, 0x00000000UL, 0x00000000UL, 0x94a7f25aUL, 0xc00f37e2UL,\n+    0x4b6261cbUL, 0xbff5f984UL, 0x5a9dd812UL, 0x4011aab0UL, 0x74c30018UL,\n+    0x3ffaf5a5UL, 0x7f2ce8e3UL, 0xc013fe8bUL, 0xfe8e54faUL, 0xbffd7334UL,\n+    0x670d618dUL, 0x4016a10cUL, 0x4db97058UL, 0x4000e012UL, 0x24df44ddUL,\n+    0xc0199c5fUL, 0x697d6eceUL, 0xc003006eUL, 0x83298b82UL, 0x401cfc4dUL,\n+    0x19d490d6UL, 0x40058c19UL, 0x2ae42850UL, 0xbfea4300UL, 0x118e20e6UL,\n+    0x3c7a6db8UL, 0x00000000UL, 0x40000000UL, 0xe33345b8UL, 0xbfd4e526UL,\n+    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x2b2c49d0UL,\n+    0xbff2de9cUL, 0x00000000UL, 0x00000000UL, 0x2655bc98UL, 0x3ff33e58UL,\n+    0x00000000UL, 0x00000000UL, 0xff691fa2UL, 0xbff3972eUL, 0xe93463bdUL,\n+    0xbfeeed87UL, 0x070e10a0UL, 0x3ff3f5b2UL, 0xf4d790a4UL, 0x3ff20c10UL,\n+    0xa04e8ea3UL, 0xbff4541aUL, 0x386accd3UL, 0xbff1369eUL, 0x222a66ddUL,\n+    0x3ff4b521UL, 0x22a9777eUL, 0x3ff20817UL, 0x52a04a6eUL, 0xbff5178fUL,\n+    0xddaa0031UL, 0xbff22137UL, 0x4447d47cUL, 0x3ff57c01UL, 0x1e9c7f1dUL,\n+    0x3ff29311UL, 0x2ab7f990UL, 0xbfe561b8UL, 0x209c7df1UL, 0xbc87a8c5UL,\n+    0x00000000UL, 0x3ff00000UL, 0x4170bcc6UL, 0x3fdc92d8UL, 0x00000000UL,\n+    0x00000000UL, 0x00000000UL, 0x00000000UL, 0xcc03e501UL, 0xbfdff10fUL,\n+    0x00000000UL, 0x00000000UL, 0x44a4e845UL, 0x3fddb63bUL, 0x00000000UL,\n+    0x00000000UL, 0x3768ad9fUL, 0xbfdb72a4UL, 0x3dd01ccaUL, 0xbfe5fdb9UL,\n+    0xa61d2811UL, 0x3fd972b2UL, 0x5645ad0bUL, 0x3fe977f9UL, 0xd013b3abUL,\n+    0xbfd78ca3UL, 0xbf0bf914UL, 0xbfe4f192UL, 0x4d53e730UL, 0x3fd5d060UL,\n+    0x3f8b9000UL, 0x3fe49933UL, 0xe2b82f08UL, 0xbfd4322aUL, 0x5936a835UL,\n+    0xbfe27ae1UL, 0xb1c61c9bUL, 0x3fd2b3fbUL, 0xef478605UL, 0x3fe1659eUL,\n+    0x190834ecUL, 0xbfe11ab7UL, 0xcdb625eaUL, 0x3c8e564bUL, 0x00000000UL,\n+    0x3ff00000UL, 0xb07217e3UL, 0x3fd248f1UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x00000000UL, 0x56f37042UL, 0xbfccfc56UL, 0x00000000UL,\n+    0x00000000UL, 0xaa563951UL, 0x3fc90125UL, 0x00000000UL, 0x00000000UL,\n+    0x3d0e7c5dUL, 0xbfc50533UL, 0x9bed9b2eUL, 0xbfdf0ed9UL, 0x5fe7c47cUL,\n+    0x3fc1f250UL, 0x96c125e5UL, 0x3fe2edd9UL, 0x5a02bbd8UL, 0xbfbe5c71UL,\n+    0x86362c20UL, 0xbfda08b7UL, 0x4b4435edUL, 0x3fb9d342UL, 0x4b494091UL,\n+    0x3fd911bdUL, 0xb56658beUL, 0xbfb5e4c7UL, 0x93a2fd76UL, 0xbfd3c092UL,\n+    0xda271794UL, 0x3fb29910UL, 0x3303df2bUL, 0x3fd189beUL, 0x99fcef32UL,\n+    0xbfda8279UL, 0xb68c1467UL, 0xbc708b2fUL, 0x00000000UL, 0x3ff00000UL,\n+    0x980c4337UL, 0x3fc5f619UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n+    0x00000000UL, 0x9314533eUL, 0xbfbb8ec5UL, 0x00000000UL, 0x00000000UL,\n+    0x09aa36d0UL, 0x3fb6d3f4UL, 0x00000000UL, 0x00000000UL, 0xdcb427fdUL,\n+    0xbfb13950UL, 0xd87ab0bbUL, 0xbfd5335eUL, 0xce0ae8a5UL, 0x3fabb382UL,\n+    0x79143126UL, 0x3fddba41UL, 0x5f2b28d4UL, 0xbfa552f1UL, 0x59f21a6dUL,\n+    0xbfd015abUL, 0x22c27d95UL, 0x3fa0e984UL, 0xe19fc6aaUL, 0x3fd0576cUL,\n+    0x8f2c2950UL, 0xbf9a4898UL, 0xc0b3f22cUL, 0xbfc59462UL, 0x1883a4b8UL,\n+    0x3f94b61cUL, 0x3f838640UL, 0x3fc30eb8UL, 0x355c63dcUL, 0xbfd36a08UL,\n+    0x1dce993dUL, 0x3c6d704dUL, 0x00000000UL, 0x3ff00000UL, 0x2b82ab63UL,\n+    0x3fb78e92UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL,\n+    0x5a279ea3UL, 0xbfaa3407UL, 0x00000000UL, 0x00000000UL, 0x432d65faUL,\n+    0x3fa70153UL, 0x00000000UL, 0x00000000UL, 0x891a4602UL, 0xbf9d03efUL,\n+    0xd62ca5f8UL, 0xbfca77d9UL, 0xb35f4628UL, 0x3f97a265UL, 0x433258faUL,\n+    0x3fd8cf51UL, 0xb58fd909UL, 0xbf8f88e3UL, 0x01771ceaUL, 0xbfc2b154UL,\n+    0xf3562f8eUL, 0x3f888f57UL, 0xc028a723UL, 0x3fc7370fUL, 0x20b7f9f0UL,\n+    0xbf80f44cUL, 0x214368e9UL, 0xbfb6dfaaUL, 0x28891863UL, 0x3f79b4b6UL,\n+    0x172dbbf0UL, 0x3fb6cb8eUL, 0xe0553158UL, 0xbfc975f5UL, 0x593fe814UL,\n+    0xbc2ef5d3UL, 0x00000000UL, 0x3ff00000UL, 0x03dec550UL, 0x3fa44203UL,\n+    0x00000000UL, 0x00000000UL, 0x00000000UL, 0x00000000UL, 0x4e435f9bUL,\n+    0xbf953f83UL, 0x00000000UL, 0x00000000UL, 0x3c6e8e46UL, 0x3f9b74eaUL,\n+    0x00000000UL, 0x00000000UL, 0xda5b7511UL, 0xbf85ad63UL, 0xdc230b9bUL,\n+    0xbfb97558UL, 0x26cb3788UL, 0x3f881308UL, 0x76fc4985UL, 0x3fd62ac9UL,\n+    0x77bb08baUL, 0xbf757c85UL, 0xb6247521UL, 0xbfb1381eUL, 0x5922170cUL,\n+    0x3f754e95UL, 0x8746482dUL, 0x3fc27f83UL, 0x11055b30UL, 0xbf64e391UL,\n+    0x3e666320UL, 0xbfa3e609UL, 0x0de9dae3UL, 0x3f6301dfUL, 0x1f1dca06UL,\n+    0x3fafa8aeUL, 0x8c5b2da2UL, 0xbfb936bbUL, 0x4e88f7a5UL, 0xbc587d05UL,\n+    0x00000000UL, 0x3ff00000UL, 0xa8935dd9UL, 0x3f83dde2UL, 0x00000000UL,\n+    0x00000000UL, 0x00000000UL, 0x00000000UL\n+};\n+\n+ATTRIBUTE_ALIGNED(16) juint _MASK_35_tan[] =\n+{\n+    0xfffc0000UL, 0xffffffffUL, 0x00000000UL, 0x00000000UL\n+};\n+\n+ATTRIBUTE_ALIGNED(16) juint _Q_11_tan[] =\n+{\n+    0xb8fe4d77UL, 0x3f82609aUL\n+};\n+\n+ATTRIBUTE_ALIGNED(16) juint _Q_9_tan[] =\n+{\n+    0xbf847a43UL, 0x3f9664a0UL\n+};\n+\n+ATTRIBUTE_ALIGNED(16) juint _Q_7_tan[] =\n+{\n+    0x52c4c8abUL, 0x3faba1baUL\n+};\n+\n+ATTRIBUTE_ALIGNED(16) juint _Q_5_tan[] =\n+{\n+    0x11092746UL, 0x3fc11111UL\n+};\n+\n+ATTRIBUTE_ALIGNED(16) juint _Q_3_tan[] =\n+{\n+    0x55555612UL, 0x3fd55555UL\n+};\n+\n+ATTRIBUTE_ALIGNED(8) juint _PI_4_tan[] =\n+{\n+    0x00000000UL, 0x3fe921fbUL, 0x4611a626UL, 0x3e85110bUL\n+};\n+\n+ATTRIBUTE_ALIGNED(8) juint _QQ_2_tan[] =\n+{\n+    0x676733afUL, 0x3d32e7b9UL\n+};\n+\n+#define __ _masm->\n+\n+address StubGenerator::generate_libmTan() {\n+  StubCodeMark mark(this, \"StubRoutines\", \"libmTan\");\n+  address start = __ pc();\n+\n+  Label L_2TAG_PACKET_0_0_1, L_2TAG_PACKET_1_0_1, L_2TAG_PACKET_2_0_1, L_2TAG_PACKET_3_0_1;\n+  Label L_2TAG_PACKET_4_0_1, L_2TAG_PACKET_5_0_1, L_2TAG_PACKET_6_0_1, L_2TAG_PACKET_7_0_1;\n+  Label L_2TAG_PACKET_8_0_1, L_2TAG_PACKET_9_0_1, L_2TAG_PACKET_10_0_1, L_2TAG_PACKET_11_0_1;\n+  Label L_2TAG_PACKET_12_0_1, L_2TAG_PACKET_13_0_1, L_2TAG_PACKET_14_0_1, B1_2, B1_4;\n+\n+  address MUL16     = (address)_MUL16;\n+  address sign_mask = (address)_sign_mask_tan;\n+  address PI32INV   = (address)_PI32INV_tan;\n+  address P_1       = (address)_P_1_tan;\n+  address P_2       = (address)_P_2_tan;\n+  address P_3       = (address)_P_3_tan;\n+  address Ctable    = (address)_Ctable_tan;\n+  address MASK_35   = (address)_MASK_35_tan;\n+  address Q_11      = (address)_Q_11_tan;\n+  address Q_9       = (address)_Q_9_tan;\n+  address Q_7       = (address)_Q_7_tan;\n+  address Q_5       = (address)_Q_5_tan;\n+  address Q_3       = (address)_Q_3_tan;\n+  address PI_4      = (address)_PI_4_tan;\n+  address QQ_2      = (address)_QQ_2_tan;\n+\n+  __ enter(); \/\/ required for proper stackwalking of RuntimeStub frame\n+\n+#ifdef _WIN64\n+  __ push(rsi);\n+  __ push(rdi);\n+#endif\n+\n+  __ push(rbx);\n+  __ subq(rsp, 16);\n+  __ movsd(Address(rsp, 8), xmm0);\n+\n+  __ bind(B1_2);\n+  __ pextrw(rax, xmm0, 3);\n+  __ andl(rax, 32767);\n+  __ subl(rax, 16314);\n+  __ cmpl(rax, 270);\n+  __ jcc(Assembler::above, L_2TAG_PACKET_0_0_1);\n+  __ movdqu(xmm5, ExternalAddress(ONEHALF), rbx \/*rscratch*\/);    \/\/0x00000000UL, 0x3fe00000UL, 0x00000000UL, 0x3fe00000UL\n+  __ movdqu(xmm6, ExternalAddress(MUL16), rbx \/*rscratch*\/);    \/\/0x00000000UL, 0x40300000UL, 0x00000000UL, 0x3ff00000UL\n+  __ unpcklpd(xmm0, xmm0);\n+  __ movdqu(xmm4, ExternalAddress(sign_mask), rbx \/*rscratch*\/);    \/\/0x00000000UL, 0x80000000UL, 0x00000000UL, 0x80000000UL\n+  __ andpd(xmm4, xmm0);\n+  __ movdqu(xmm1, ExternalAddress(PI32INV), rbx \/*rscratch*\/);    \/\/0x6dc9c883UL, 0x3fe45f30UL, 0x6dc9c883UL, 0x40245f30UL\n+  __ mulpd(xmm1, xmm0);\n+  __ por(xmm5, xmm4);\n+  __ addpd(xmm1, xmm5);\n+  __ movdqu(xmm7, xmm1);\n+  __ unpckhpd(xmm7, xmm7);\n+  __ cvttsd2sil(rdx, xmm7);\n+  __ cvttpd2dq(xmm1, xmm1);\n+  __ cvtdq2pd(xmm1, xmm1);\n+  __ mulpd(xmm1, xmm6);\n+  __ movdqu(xmm3, ExternalAddress(P_1), rbx \/*rscratch*\/);    \/\/0x54444000UL, 0x3fb921fbUL, 0x54440000UL, 0x3fb921fbUL\n+  __ movq(xmm5, ExternalAddress(QQ_2), rbx \/*rscratch*\/);    \/\/0x676733afUL, 0x3d32e7b9UL\n+  __ addq(rdx, 469248);\n+  __ movdqu(xmm4, ExternalAddress(P_2), rbx \/*rscratch*\/);    \/\/0x67674000UL, 0xbd32e7b9UL, 0x4c4c0000UL, 0x3d468c23UL\n+  __ mulpd(xmm3, xmm1);\n+  __ andq(rdx, 31);\n+  __ mulsd(xmm5, xmm1);\n+  __ movq(rcx, rdx);\n+  __ mulpd(xmm4, xmm1);\n+  __ shlq(rcx, 1);\n+  __ subpd(xmm0, xmm3);\n+  __ mulpd(xmm1, ExternalAddress(P_3), rbx \/*rscratch*\/);    \/\/0x3707344aUL, 0x3aa8a2e0UL, 0x03707345UL, 0x3ae98a2eUL\n+  __ addq(rdx, rcx);\n+  __ shlq(rcx, 2);\n+  __ addq(rdx, rcx);\n+  __ addsd(xmm5, xmm0);\n+  __ movdqu(xmm2, xmm0);\n+  __ subpd(xmm0, xmm4);\n+  __ movq(xmm6, ExternalAddress(ONE), rbx \/*rscratch*\/);    \/\/0x00000000UL, 0x3ff00000UL\n+  __ shlq(rdx, 4);\n+  __ lea(rax, ExternalAddress(Ctable));\n+  __ andpd(xmm5, ExternalAddress(MASK_35), rbx \/*rscratch*\/);    \/\/0xfffc0000UL, 0xffffffffUL, 0x00000000UL, 0x00000000UL\n+  __ movdqu(xmm3, xmm0);\n+  __ addq(rax, rdx);\n+  __ subpd(xmm2, xmm0);\n+  __ unpckhpd(xmm0, xmm0);\n+  __ divsd(xmm6, xmm5);\n+  __ subpd(xmm2, xmm4);\n+  __ movdqu(xmm7, Address(rax, 16));\n+  __ subsd(xmm3, xmm5);\n+  __ mulpd(xmm7, xmm0);\n+  __ subpd(xmm2, xmm1);\n+  __ movdqu(xmm1, Address(rax, 48));\n+  __ mulpd(xmm1, xmm0);\n+  __ movdqu(xmm4, Address(rax, 96));\n+  __ mulpd(xmm4, xmm0);\n+  __ addsd(xmm2, xmm3);\n+  __ movdqu(xmm3, xmm0);\n+  __ mulpd(xmm0, xmm0);\n+  __ addpd(xmm7, Address(rax, 0));\n+  __ addpd(xmm1, Address(rax, 32));\n+  __ mulpd(xmm1, xmm0);\n+  __ addpd(xmm4, Address(rax, 80));\n+  __ addpd(xmm7, xmm1);\n+  __ movdqu(xmm1, Address(rax, 112));\n+  __ mulpd(xmm1, xmm0);\n+  __ mulpd(xmm0, xmm0);\n+  __ addpd(xmm4, xmm1);\n+  __ movdqu(xmm1, Address(rax, 64));\n+  __ mulpd(xmm1, xmm0);\n+  __ addpd(xmm7, xmm1);\n+  __ movdqu(xmm1, xmm3);\n+  __ mulpd(xmm3, xmm0);\n+  __ mulsd(xmm0, xmm0);\n+  __ mulpd(xmm1, Address(rax, 144));\n+  __ mulpd(xmm4, xmm3);\n+  __ movdqu(xmm3, xmm1);\n+  __ addpd(xmm7, xmm4);\n+  __ movdqu(xmm4, xmm1);\n+  __ mulsd(xmm0, xmm7);\n+  __ unpckhpd(xmm7, xmm7);\n+  __ addsd(xmm0, xmm7);\n+  __ unpckhpd(xmm1, xmm1);\n+  __ addsd(xmm3, xmm1);\n+  __ subsd(xmm4, xmm3);\n+  __ addsd(xmm1, xmm4);\n+  __ movdqu(xmm4, xmm2);\n+  __ movq(xmm7, Address(rax, 144));\n+  __ unpckhpd(xmm2, xmm2);\n+  __ addsd(xmm7, Address(rax, 152));\n+  __ mulsd(xmm7, xmm2);\n+  __ addsd(xmm7, Address(rax, 136));\n+  __ addsd(xmm7, xmm1);\n+  __ addsd(xmm0, xmm7);\n+  __ movq(xmm7, ExternalAddress(ONE), rbx \/*rscratch*\/);    \/\/0x00000000UL, 0x3ff00000UL\n+  __ mulsd(xmm4, xmm6);\n+  __ movq(xmm2, Address(rax, 168));\n+  __ andpd(xmm2, xmm6);\n+  __ mulsd(xmm5, xmm2);\n+  __ mulsd(xmm6, Address(rax, 160));\n+  __ subsd(xmm7, xmm5);\n+  __ subsd(xmm2, Address(rax, 128));\n+  __ subsd(xmm7, xmm4);\n+  __ mulsd(xmm7, xmm6);\n+  __ movdqu(xmm4, xmm3);\n+  __ subsd(xmm3, xmm2);\n+  __ addsd(xmm2, xmm3);\n+  __ subsd(xmm4, xmm2);\n+  __ addsd(xmm0, xmm4);\n+  __ subsd(xmm0, xmm7);\n+  __ addsd(xmm0, xmm3);\n+  __ jmp(B1_4);\n+\n+  __ bind(L_2TAG_PACKET_0_0_1);\n+  __ jcc(Assembler::greater, L_2TAG_PACKET_1_0_1);\n+  __ pextrw(rax, xmm0, 3);\n+  __ movl(rdx, rax);\n+  __ andl(rax, 32752);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_2_0_1);\n+  __ andl(rdx, 32767);\n+  __ cmpl(rdx, 15904);\n+  __ jcc(Assembler::below, L_2TAG_PACKET_3_0_1);\n+  __ movdqu(xmm2, xmm0);\n+  __ movdqu(xmm3, xmm0);\n+  __ movq(xmm1, ExternalAddress(Q_11), rbx \/*rscratch*\/);    \/\/0xb8fe4d77UL, 0x3f82609aUL\n+  __ mulsd(xmm2, xmm0);\n+  __ mulsd(xmm3, xmm2);\n+  __ mulsd(xmm1, xmm2);\n+  __ addsd(xmm1, ExternalAddress(Q_9), rbx \/*rscratch*\/);    \/\/0xbf847a43UL, 0x3f9664a0UL\n+  __ mulsd(xmm1, xmm2);\n+  __ addsd(xmm1, ExternalAddress(Q_7), rbx \/*rscratch*\/);    \/\/0x52c4c8abUL, 0x3faba1baUL\n+  __ mulsd(xmm1, xmm2);\n+  __ addsd(xmm1, ExternalAddress(Q_5), rbx \/*rscratch*\/);    \/\/0x11092746UL, 0x3fc11111UL\n+  __ mulsd(xmm1, xmm2);\n+  __ addsd(xmm1, ExternalAddress(Q_3), rbx \/*rscratch*\/);    \/\/0x55555612UL, 0x3fd55555UL\n+  __ mulsd(xmm1, xmm3);\n+  __ addsd(xmm0, xmm1);\n+  __ jmp(B1_4);\n+\n+  __ bind(L_2TAG_PACKET_3_0_1);\n+  __ movq(xmm3, ExternalAddress(TWO_POW_55), rbx \/*rscratch*\/);    \/\/0x00000000UL, 0x43600000UL\n+  __ mulsd(xmm3, xmm0);\n+  __ addsd(xmm0, xmm3);\n+  __ mulsd(xmm0, ExternalAddress(TWO_POW_M55), rbx \/*rscratch*\/);    \/\/0x00000000UL, 0x3c800000UL\n+  __ jmp(B1_4);\n+\n+  __ bind(L_2TAG_PACKET_2_0_1);\n+  __ movdqu(xmm1, xmm0);\n+  __ mulsd(xmm1, xmm1);\n+  __ jmp(B1_4);\n+\n+  __ bind(L_2TAG_PACKET_1_0_1);\n+  __ pextrw(rax, xmm0, 3);\n+  __ andl(rax, 32752);\n+  __ cmpl(rax, 32752);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_4_0_1);\n+  __ pextrw(rcx, xmm0, 3);\n+  __ andl(rcx, 32752);\n+  __ subl(rcx, 16224);\n+  __ shrl(rcx, 7);\n+  __ andl(rcx, 65532);\n+  __ lea(r11, ExternalAddress(PI_INV_TABLE));\n+  __ addq(rcx, r11);\n+  __ movdq(rax, xmm0);\n+  __ movl(r10, Address(rcx, 20));\n+  __ movl(r8, Address(rcx, 24));\n+  __ movl(rdx, rax);\n+  __ shrq(rax, 21);\n+  __ orl(rax, INT_MIN);\n+  __ shrl(rax, 11);\n+  __ movl(r9, r10);\n+  __ imulq(r10, rdx);\n+  __ imulq(r9, rax);\n+  __ imulq(r8, rax);\n+  __ movl(rsi, Address(rcx, 16));\n+  __ movl(rdi, Address(rcx, 12));\n+  __ movl(r11, r10);\n+  __ shrq(r10, 32);\n+  __ addq(r9, r10);\n+  __ addq(r11, r8);\n+  __ movl(r8, r11);\n+  __ shrq(r11, 32);\n+  __ addq(r9, r11);\n+  __ movl(r10, rsi);\n+  __ imulq(rsi, rdx);\n+  __ imulq(r10, rax);\n+  __ movl(r11, rdi);\n+  __ imulq(rdi, rdx);\n+  __ movl(rbx, rsi);\n+  __ shrq(rsi, 32);\n+  __ addq(r9, rbx);\n+  __ movl(rbx, r9);\n+  __ shrq(r9, 32);\n+  __ addq(r10, rsi);\n+  __ addq(r10, r9);\n+  __ shlq(rbx, 32);\n+  __ orq(r8, rbx);\n+  __ imulq(r11, rax);\n+  __ movl(r9, Address(rcx, 8));\n+  __ movl(rsi, Address(rcx, 4));\n+  __ movl(rbx, rdi);\n+  __ shrq(rdi, 32);\n+  __ addq(r10, rbx);\n+  __ movl(rbx, r10);\n+  __ shrq(r10, 32);\n+  __ addq(r11, rdi);\n+  __ addq(r11, r10);\n+  __ movq(rdi, r9);\n+  __ imulq(r9, rdx);\n+  __ imulq(rdi, rax);\n+  __ movl(r10, r9);\n+  __ shrq(r9, 32);\n+  __ addq(r11, r10);\n+  __ movl(r10, r11);\n+  __ shrq(r11, 32);\n+  __ addq(rdi, r9);\n+  __ addq(rdi, r11);\n+  __ movq(r9, rsi);\n+  __ imulq(rsi, rdx);\n+  __ imulq(r9, rax);\n+  __ shlq(r10, 32);\n+  __ orq(r10, rbx);\n+  __ movl(rax, Address(rcx, 0));\n+  __ movl(r11, rsi);\n+  __ shrq(rsi, 32);\n+  __ addq(rdi, r11);\n+  __ movl(r11, rdi);\n+  __ shrq(rdi, 32);\n+  __ addq(r9, rsi);\n+  __ addq(r9, rdi);\n+  __ imulq(rdx, rax);\n+  __ pextrw(rbx, xmm0, 3);\n+  __ lea(rdi, ExternalAddress(PI_INV_TABLE));\n+  __ subq(rcx, rdi);\n+  __ addl(rcx, rcx);\n+  __ addl(rcx, rcx);\n+  __ addl(rcx, rcx);\n+  __ addl(rcx, 19);\n+  __ movl(rsi, 32768);\n+  __ andl(rsi, rbx);\n+  __ shrl(rbx, 4);\n+  __ andl(rbx, 2047);\n+  __ subl(rbx, 1023);\n+  __ subl(rcx, rbx);\n+  __ addq(r9, rdx);\n+  __ movl(rdx, rcx);\n+  __ addl(rdx, 32);\n+  __ cmpl(rcx, 0);\n+  __ jcc(Assembler::less, L_2TAG_PACKET_5_0_1);\n+  __ negl(rcx);\n+  __ addl(rcx, 29);\n+  __ shll(r9);\n+  __ movl(rdi, r9);\n+  __ andl(r9, 1073741823);\n+  __ testl(r9, 536870912);\n+  __ jcc(Assembler::notEqual, L_2TAG_PACKET_6_0_1);\n+  __ shrl(r9);\n+  __ movl(rbx, 0);\n+  __ shlq(r9, 32);\n+  __ orq(r9, r11);\n+\n+  __ bind(L_2TAG_PACKET_7_0_1);\n+\n+  __ bind(L_2TAG_PACKET_8_0_1);\n+  __ cmpq(r9, 0);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_9_0_1);\n+\n+  __ bind(L_2TAG_PACKET_10_0_1);\n+  __ bsrq(r11, r9);\n+  __ movl(rcx, 29);\n+  __ subl(rcx, r11);\n+  __ jcc(Assembler::lessEqual, L_2TAG_PACKET_11_0_1);\n+  __ shlq(r9);\n+  __ movq(rax, r10);\n+  __ shlq(r10);\n+  __ addl(rdx, rcx);\n+  __ negl(rcx);\n+  __ addl(rcx, 64);\n+  __ shrq(rax);\n+  __ shrq(r8);\n+  __ orq(r9, rax);\n+  __ orq(r10, r8);\n+\n+  __ bind(L_2TAG_PACKET_12_0_1);\n+  __ cvtsi2sdq(xmm0, r9);\n+  __ shrq(r10, 1);\n+  __ cvtsi2sdq(xmm3, r10);\n+  __ xorpd(xmm4, xmm4);\n+  __ shll(rdx, 4);\n+  __ negl(rdx);\n+  __ addl(rdx, 16368);\n+  __ orl(rdx, rsi);\n+  __ xorl(rdx, rbx);\n+  __ pinsrw(xmm4, rdx, 3);\n+  __ movq(xmm2, ExternalAddress(PI_4),     rbx \/*rscratch*\/);    \/\/0x00000000UL, 0x3fe921fbUL, 0x4611a626UL, 0x3e85110bUL\n+  __ movq(xmm7, ExternalAddress(PI_4 + 8), rbx \/*rscratch*\/);    \/\/0x3fe921fbUL, 0x4611a626UL, 0x3e85110bUL\n+  __ xorpd(xmm5, xmm5);\n+  __ subl(rdx, 1008);\n+  __ pinsrw(xmm5, rdx, 3);\n+  __ mulsd(xmm0, xmm4);\n+  __ shll(rsi, 16);\n+  __ sarl(rsi, 31);\n+  __ mulsd(xmm3, xmm5);\n+  __ movdqu(xmm1, xmm0);\n+  __ mulsd(xmm0, xmm2);\n+  __ shrl(rdi, 30);\n+  __ addsd(xmm1, xmm3);\n+  __ mulsd(xmm3, xmm2);\n+  __ addl(rdi, rsi);\n+  __ xorl(rdi, rsi);\n+  __ mulsd(xmm7, xmm1);\n+  __ movl(rax, rdi);\n+  __ addsd(xmm7, xmm3);\n+  __ movdqu(xmm2, xmm0);\n+  __ addsd(xmm0, xmm7);\n+  __ subsd(xmm2, xmm0);\n+  __ addsd(xmm7, xmm2);\n+  __ movdqu(xmm1, ExternalAddress(PI32INV), rbx \/*rscratch*\/);    \/\/0x6dc9c883UL, 0x3fe45f30UL, 0x6dc9c883UL, 0x40245f30UL\n+  if (VM_Version::supports_sse3()) {\n+    __ movddup(xmm0, xmm0);\n+  } else {\n+    __ movlhps(xmm0, xmm0);\n+  }\n+  __ movdqu(xmm4, ExternalAddress(sign_mask), rbx \/*rscratch*\/);    \/\/0x00000000UL, 0x80000000UL, 0x00000000UL, 0x80000000UL\n+  __ andpd(xmm4, xmm0);\n+  __ mulpd(xmm1, xmm0);\n+  if (VM_Version::supports_sse3()) {\n+    __ movddup(xmm7, xmm7);\n+  }\n+  else {\n+    __ movlhps(xmm7, xmm7);\n+  }\n+  __ movdqu(xmm5, ExternalAddress(ONEHALF), rbx \/*rscratch*\/);    \/\/0x00000000UL, 0x3fe00000UL, 0x00000000UL, 0x3fe00000UL\n+  __ movdqu(xmm6, ExternalAddress(MUL16), rbx \/*rscratch*\/);    \/\/0x00000000UL, 0x40300000UL, 0x00000000UL, 0x3ff00000UL\n+  __ por(xmm5, xmm4);\n+  __ addpd(xmm1, xmm5);\n+  __ movdqu(xmm5, xmm1);\n+  __ unpckhpd(xmm5, xmm5);\n+  __ cvttsd2sil(rdx, xmm5);\n+  __ cvttpd2dq(xmm1, xmm1);\n+  __ cvtdq2pd(xmm1, xmm1);\n+  __ mulpd(xmm1, xmm6);\n+  __ movdqu(xmm3, ExternalAddress(P_1), rbx \/*rscratch*\/);    \/\/0x54444000UL, 0x3fb921fbUL, 0x54440000UL, 0x3fb921fbUL\n+  __ movq(xmm5, ExternalAddress(QQ_2), rbx \/*rscratch*\/);    \/\/0x676733afUL, 0x3d32e7b9UL\n+  __ shll(rax, 4);\n+  __ addl(rdx, 469248);\n+  __ movdqu(xmm4, ExternalAddress(P_2), rbx \/*rscratch*\/);    \/\/0x67674000UL, 0xbd32e7b9UL, 0x4c4c0000UL, 0x3d468c23UL\n+  __ mulpd(xmm3, xmm1);\n+  __ addl(rdx, rax);\n+  __ andl(rdx, 31);\n+  __ mulsd(xmm5, xmm1);\n+  __ movl(rcx, rdx);\n+  __ mulpd(xmm4, xmm1);\n+  __ shll(rcx, 1);\n+  __ subpd(xmm0, xmm3);\n+  __ mulpd(xmm1, ExternalAddress(P_3), rbx \/*rscratch*\/);    \/\/0x3707344aUL, 0x3aa8a2e0UL, 0x03707345UL, 0x3ae98a2eUL\n+  __ addl(rdx, rcx);\n+  __ shll(rcx, 2);\n+  __ addl(rdx, rcx);\n+  __ addsd(xmm5, xmm0);\n+  __ movdqu(xmm2, xmm0);\n+  __ subpd(xmm0, xmm4);\n+  __ movq(xmm6, ExternalAddress(ONE), rbx \/*rscratch*\/);    \/\/0x00000000UL, 0x3ff00000UL\n+  __ shll(rdx, 4);\n+  __ lea(rax, ExternalAddress(Ctable));\n+  __ andpd(xmm5, ExternalAddress(MASK_35), rbx \/*rscratch*\/);    \/\/0xfffc0000UL, 0xffffffffUL, 0x00000000UL, 0x00000000UL\n+  __ movdqu(xmm3, xmm0);\n+  __ addq(rax, rdx);\n+  __ subpd(xmm2, xmm0);\n+  __ unpckhpd(xmm0, xmm0);\n+  __ divsd(xmm6, xmm5);\n+  __ subpd(xmm2, xmm4);\n+  __ subsd(xmm3, xmm5);\n+  __ subpd(xmm2, xmm1);\n+  __ movdqu(xmm1, Address(rax, 48));\n+  __ addpd(xmm2, xmm7);\n+  __ movdqu(xmm7, Address(rax, 16));\n+  __ mulpd(xmm7, xmm0);\n+  __ movdqu(xmm4, Address(rax, 96));\n+  __ mulpd(xmm1, xmm0);\n+  __ mulpd(xmm4, xmm0);\n+  __ addsd(xmm2, xmm3);\n+  __ movdqu(xmm3, xmm0);\n+  __ mulpd(xmm0, xmm0);\n+  __ addpd(xmm7, Address(rax, 0));\n+  __ addpd(xmm1, Address(rax, 32));\n+  __ mulpd(xmm1, xmm0);\n+  __ addpd(xmm4, Address(rax, 80));\n+  __ addpd(xmm7, xmm1);\n+  __ movdqu(xmm1, Address(rax, 112));\n+  __ mulpd(xmm1, xmm0);\n+  __ mulpd(xmm0, xmm0);\n+  __ addpd(xmm4, xmm1);\n+  __ movdqu(xmm1, Address(rax, 64));\n+  __ mulpd(xmm1, xmm0);\n+  __ addpd(xmm7, xmm1);\n+  __ movdqu(xmm1, xmm3);\n+  __ mulpd(xmm3, xmm0);\n+  __ mulsd(xmm0, xmm0);\n+  __ mulpd(xmm1, Address(rax, 144));\n+  __ mulpd(xmm4, xmm3);\n+  __ movdqu(xmm3, xmm1);\n+  __ addpd(xmm7, xmm4);\n+  __ movdqu(xmm4, xmm1);\n+  __ mulsd(xmm0, xmm7);\n+  __ unpckhpd(xmm7, xmm7);\n+  __ addsd(xmm0, xmm7);\n+  __ unpckhpd(xmm1, xmm1);\n+  __ addsd(xmm3, xmm1);\n+  __ subsd(xmm4, xmm3);\n+  __ addsd(xmm1, xmm4);\n+  __ movdqu(xmm4, xmm2);\n+  __ movq(xmm7, Address(rax, 144));\n+  __ unpckhpd(xmm2, xmm2);\n+  __ addsd(xmm7, Address(rax, 152));\n+  __ mulsd(xmm7, xmm2);\n+  __ addsd(xmm7, Address(rax, 136));\n+  __ addsd(xmm7, xmm1);\n+  __ addsd(xmm0, xmm7);\n+  __ movq(xmm7, ExternalAddress(ONE), rbx \/*rscratch*\/);    \/\/0x00000000UL, 0x3ff00000UL\n+  __ mulsd(xmm4, xmm6);\n+  __ movq(xmm2, Address(rax, 168));\n+  __ andpd(xmm2, xmm6);\n+  __ mulsd(xmm5, xmm2);\n+  __ mulsd(xmm6, Address(rax, 160));\n+  __ subsd(xmm7, xmm5);\n+  __ subsd(xmm2, Address(rax, 128));\n+  __ subsd(xmm7, xmm4);\n+  __ mulsd(xmm7, xmm6);\n+  __ movdqu(xmm4, xmm3);\n+  __ subsd(xmm3, xmm2);\n+  __ addsd(xmm2, xmm3);\n+  __ subsd(xmm4, xmm2);\n+  __ addsd(xmm0, xmm4);\n+  __ subsd(xmm0, xmm7);\n+  __ addsd(xmm0, xmm3);\n+  __ jmp(B1_4);\n+\n+  __ bind(L_2TAG_PACKET_9_0_1);\n+  __ addl(rdx, 64);\n+  __ movq(r9, r10);\n+  __ movq(r10, r8);\n+  __ movl(r8, 0);\n+  __ cmpq(r9, 0);\n+  __ jcc(Assembler::notEqual, L_2TAG_PACKET_10_0_1);\n+  __ addl(rdx, 64);\n+  __ movq(r9, r10);\n+  __ movq(r10, r8);\n+  __ cmpq(r9, 0);\n+  __ jcc(Assembler::notEqual, L_2TAG_PACKET_10_0_1);\n+  __ jmp(L_2TAG_PACKET_12_0_1);\n+\n+  __ bind(L_2TAG_PACKET_11_0_1);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_12_0_1);\n+  __ negl(rcx);\n+  __ shrq(r10);\n+  __ movq(rax, r9);\n+  __ shrq(r9);\n+  __ subl(rdx, rcx);\n+  __ negl(rcx);\n+  __ addl(rcx, 64);\n+  __ shlq(rax);\n+  __ orq(r10, rax);\n+  __ jmp(L_2TAG_PACKET_12_0_1);\n+\n+  __ bind(L_2TAG_PACKET_5_0_1);\n+  __ notl(rcx);\n+  __ shlq(r9, 32);\n+  __ orq(r9, r11);\n+  __ shlq(r9);\n+  __ movq(rdi, r9);\n+  __ testl(r9, INT_MIN);\n+  __ jcc(Assembler::notEqual, L_2TAG_PACKET_13_0_1);\n+  __ shrl(r9);\n+  __ movl(rbx, 0);\n+  __ shrq(rdi, 2);\n+  __ jmp(L_2TAG_PACKET_8_0_1);\n+\n+  __ bind(L_2TAG_PACKET_6_0_1);\n+  __ shrl(r9);\n+  __ movl(rbx, 1073741824);\n+  __ shrl(rbx);\n+  __ shlq(r9, 32);\n+  __ orq(r9, r11);\n+  __ shlq(rbx, 32);\n+  __ addl(rdi, 1073741824);\n+  __ movl(rcx, 0);\n+  __ movl(r11, 0);\n+  __ subq(rcx, r8);\n+  __ sbbq(r11, r10);\n+  __ sbbq(rbx, r9);\n+  __ movq(r8, rcx);\n+  __ movq(r10, r11);\n+  __ movq(r9, rbx);\n+  __ movl(rbx, 32768);\n+  __ jmp(L_2TAG_PACKET_7_0_1);\n+\n+  __ bind(L_2TAG_PACKET_13_0_1);\n+  __ shrl(r9);\n+  __ mov64(rbx, 0x100000000);\n+  __ shrq(rbx);\n+  __ movl(rcx, 0);\n+  __ movl(r11, 0);\n+  __ subq(rcx, r8);\n+  __ sbbq(r11, r10);\n+  __ sbbq(rbx, r9);\n+  __ movq(r8, rcx);\n+  __ movq(r10, r11);\n+  __ movq(r9, rbx);\n+  __ movl(rbx, 32768);\n+  __ shrq(rdi, 2);\n+  __ addl(rdi, 1073741824);\n+  __ jmp(L_2TAG_PACKET_8_0_1);\n+\n+  __ bind(L_2TAG_PACKET_4_0_1);\n+  __ movq(xmm0, Address(rsp, 8));\n+  __ mulsd(xmm0, ExternalAddress(NEG_ZERO), rbx \/*rscratch*\/);    \/\/0x00000000UL, 0x80000000UL\n+  __ movq(Address(rsp, 0), xmm0);\n+\n+  __ bind(L_2TAG_PACKET_14_0_1);\n+\n+  __ bind(B1_4);\n+  __ addq(rsp, 16);\n+  __ pop(rbx);\n+\n+#ifdef _WIN64\n+  __ pop(rdi);\n+  __ pop(rsi);\n+#endif\n+\n+  __ leave(); \/\/ required for proper stackwalking of RuntimeStub frame\n+  __ ret(0);\n+\n+  return start;\n+}\n+\n+#undef __\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_tan.cpp","additions":1031,"deletions":0,"binary":false,"changes":1031,"status":"added"}]}