{"files":[{"patch":"@@ -131,2 +131,2 @@\n-void InterpreterRuntime::set_bcp_and_mdp(address bcp, JavaThread *thread) {\n-  LastFrameAccessor last_frame(thread);\n+void InterpreterRuntime::set_bcp_and_mdp(address bcp, JavaThread* current) {\n+  LastFrameAccessor last_frame(current);\n@@ -158,2 +158,2 @@\n-    oop java_class = klass->java_mirror();\n-    thread->set_vm_result(java_class);\n+  oop java_class = klass->java_mirror();\n+  thread->set_vm_result(java_class);\n@@ -313,2 +313,2 @@\n-void InterpreterRuntime::note_trap_inner(JavaThread* thread, int reason,\n-                                         const methodHandle& trap_method, int trap_bci, TRAPS) {\n+void InterpreterRuntime::note_trap_inner(JavaThread* current, int reason,\n+                                         const methodHandle& trap_method, int trap_bci) {\n@@ -318,0 +318,2 @@\n+      ExceptionMark em(current);\n+      JavaThread* THREAD = current; \/\/ for exception macros\n@@ -338,1 +340,1 @@\n-void InterpreterRuntime::note_trap(JavaThread* thread, int reason, TRAPS) {\n+void InterpreterRuntime::note_trap(JavaThread* current, int reason) {\n@@ -340,2 +342,2 @@\n-  LastFrameAccessor last_frame(thread);\n-  methodHandle trap_method(thread, last_frame.method());\n+  LastFrameAccessor last_frame(current);\n+  methodHandle trap_method(current, last_frame.method());\n@@ -343,1 +345,1 @@\n-  note_trap_inner(thread, reason, trap_method, trap_bci, THREAD);\n+  note_trap_inner(current, reason, trap_method, trap_bci);\n@@ -380,1 +382,1 @@\n-          Universe::delayed_stack_overflow_error_message());\n+                                   Universe::delayed_stack_overflow_error_message());\n@@ -391,1 +393,1 @@\n-      note_trap(thread, Deoptimization::Reason_div0_check, CHECK);\n+      note_trap(thread, Deoptimization::Reason_div0_check);\n@@ -393,1 +395,1 @@\n-      note_trap(thread, Deoptimization::Reason_null_check, CHECK);\n+      note_trap(thread, Deoptimization::Reason_null_check);\n@@ -409,1 +411,1 @@\n-    note_trap(thread, Deoptimization::Reason_class_check, CHECK);\n+    note_trap(thread, Deoptimization::Reason_class_check);\n@@ -423,1 +425,1 @@\n-    note_trap(thread, Deoptimization::Reason_range_check, CHECK);\n+    note_trap(thread, Deoptimization::Reason_range_check);\n@@ -438,1 +440,1 @@\n-    note_trap(thread, Deoptimization::Reason_class_check, CHECK);\n+    note_trap(thread, Deoptimization::Reason_class_check);\n@@ -527,1 +529,1 @@\n-      h_exception = Handle(THREAD, PENDING_EXCEPTION);\n+      h_exception = Handle(thread, PENDING_EXCEPTION);\n@@ -562,1 +564,1 @@\n-    h_method->interpreter_throwout_increment(THREAD);\n+    h_method->interpreter_throwout_increment(thread);\n@@ -587,1 +589,1 @@\n-  assert(thread->has_pending_exception(), \"must only ne called if there's an exception pending\");\n+  assert(thread->has_pending_exception(), \"must only be called if there's an exception pending\");\n@@ -645,1 +647,0 @@\n-  Thread* THREAD = thread;\n@@ -657,0 +658,1 @@\n+    Thread* THREAD = thread;\n@@ -801,1 +803,0 @@\n-  Thread* THREAD = thread;\n@@ -828,0 +829,1 @@\n+    Thread* THREAD = thread;\n@@ -900,1 +902,0 @@\n-  Thread* THREAD = thread;\n@@ -909,0 +910,1 @@\n+    Thread* THREAD = thread;\n@@ -920,1 +922,0 @@\n-  Thread* THREAD = thread;\n@@ -930,0 +931,1 @@\n+    Thread* THREAD = thread;\n@@ -972,1 +974,1 @@\n-nmethod* InterpreterRuntime::frequency_counter_overflow(JavaThread* thread, address branch_bcp) {\n+nmethod* InterpreterRuntime::frequency_counter_overflow(JavaThread* current, address branch_bcp) {\n@@ -974,1 +976,1 @@\n-  nmethod* nm = frequency_counter_overflow_inner(thread, branch_bcp);\n+  nmethod* nm = frequency_counter_overflow_inner(current, branch_bcp);\n@@ -982,1 +984,1 @@\n-    LastFrameAccessor last_frame(thread);\n+    LastFrameAccessor last_frame(current);\n@@ -994,1 +996,1 @@\n-  if (nm != NULL && thread->is_interp_only_mode()) {\n+  if (nm != NULL && current->is_interp_only_mode()) {\n@@ -1025,1 +1027,1 @@\n-  nmethod* osr_nm = CompilationPolicy::event(method, method, branch_bci, bci, CompLevel_none, NULL, THREAD);\n+  nmethod* osr_nm = CompilationPolicy::event(method, method, branch_bci, bci, CompLevel_none, NULL, CHECK_NULL);\n@@ -1048,1 +1050,1 @@\n-          objects_to_revoke->append(Handle(THREAD, kptr->obj()));\n+          objects_to_revoke->append(Handle(thread, kptr->obj()));\n@@ -1103,1 +1105,1 @@\n-  MutexLocker ml(RetData_lock);\n+  MutexLocker ml(thread, RetData_lock);\n@@ -1115,1 +1117,1 @@\n-  MethodCounters* mcs = Method::build_method_counters(m, thread);\n+  MethodCounters* mcs = Method::build_method_counters(m, THREAD);\n@@ -1159,1 +1161,1 @@\n-ConstantPoolCacheEntry *cp_entry))\n+                                                      ConstantPoolCacheEntry *cp_entry))\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":34,"deletions":32,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -48,4 +48,4 @@\n-  static void      set_bcp_and_mdp(address bcp, JavaThread*thread);\n-  static void      note_trap_inner(JavaThread* thread, int reason,\n-                                   const methodHandle& trap_method, int trap_bci, TRAPS);\n-  static void      note_trap(JavaThread *thread, int reason, TRAPS);\n+  static void      set_bcp_and_mdp(address bcp, JavaThread* current);\n+  static void      note_trap_inner(JavaThread* current, int reason,\n+                                   const methodHandle& trap_method, int trap_bci);\n+  static void      note_trap(JavaThread *current, int reason);\n@@ -153,1 +153,1 @@\n-  static nmethod* frequency_counter_overflow(JavaThread* thread, address branch_bcp);\n+  static nmethod* frequency_counter_overflow(JavaThread* current, address branch_bcp);\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -579,1 +579,1 @@\n-    mh->log_touched(CHECK_NULL);\n+    mh->log_touched(THREAD);\n@@ -2378,1 +2378,1 @@\n-void Method::log_touched(TRAPS) {\n+void Method::log_touched(Thread* current) {\n@@ -2390,1 +2390,1 @@\n-  MutexLocker ml(THREAD, TouchedMethodLog_lock);\n+  MutexLocker ml(current, TouchedMethodLog_lock);\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -239,2 +239,2 @@\n-  void incr_number_of_breakpoints(TRAPS)         {\n-    MethodCounters* mcs = get_method_counters(CHECK);\n+  void incr_number_of_breakpoints(Thread* current)         {\n+    MethodCounters* mcs = get_method_counters(current);\n@@ -245,2 +245,2 @@\n-  void decr_number_of_breakpoints(TRAPS)         {\n-    MethodCounters* mcs = get_method_counters(CHECK);\n+  void decr_number_of_breakpoints(Thread* current)         {\n+    MethodCounters* mcs = get_method_counters(current);\n@@ -295,2 +295,2 @@\n-  void interpreter_throwout_increment(TRAPS) {\n-    MethodCounters* mcs = get_method_counters(CHECK);\n+  void interpreter_throwout_increment(Thread* current) {\n+    MethodCounters* mcs = get_method_counters(current);\n@@ -688,1 +688,1 @@\n-  void log_touched(TRAPS);\n+  void log_touched(Thread* current);\n@@ -947,1 +947,1 @@\n-  MethodCounters* get_method_counters(TRAPS) {\n+  MethodCounters* get_method_counters(Thread* current) {\n@@ -949,0 +949,1 @@\n+      Thread* THREAD = current;\n","filename":"src\/hotspot\/share\/oops\/method.hpp","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -1052,2 +1052,3 @@\n-Handle SharedRuntime::find_callee_info(JavaThread* thread, Bytecodes::Code& bc, CallInfo& callinfo, TRAPS) {\n-  ResourceMark rm(THREAD);\n+Handle SharedRuntime::find_callee_info(Bytecodes::Code& bc, CallInfo& callinfo, TRAPS) {\n+  JavaThread* thread = THREAD->as_Java_thread();\n+  ResourceMark rm(thread);\n@@ -1058,1 +1059,1 @@\n-  return find_callee_info_helper(thread, vfst, bc, callinfo, THREAD);\n+  return find_callee_info_helper(vfst, bc, callinfo, THREAD);\n@@ -1077,2 +1078,1 @@\n-Handle SharedRuntime::find_callee_info_helper(JavaThread* thread,\n-                                              vframeStream& vfst,\n+Handle SharedRuntime::find_callee_info_helper(vframeStream& vfst,\n@@ -1081,0 +1081,1 @@\n+  JavaThread* thread = THREAD->as_Java_thread();\n@@ -1087,1 +1088,1 @@\n-  methodHandle caller(THREAD, vfst.method());\n+  methodHandle caller(thread, vfst.method());\n@@ -1094,1 +1095,1 @@\n-  methodHandle attached_method(THREAD, extract_attached_method(vfst));\n+  methodHandle attached_method(thread, extract_attached_method(vfst));\n@@ -1151,1 +1152,1 @@\n-    receiver = Handle(THREAD, callerFrame.retrieve_receiver(&reg_map2));\n+    receiver = Handle(thread, callerFrame.retrieve_receiver(&reg_map2));\n@@ -1164,1 +1165,1 @@\n-    constantPoolHandle constants(THREAD, caller->constants());\n+    constantPoolHandle constants(thread, caller->constants());\n@@ -1179,1 +1180,1 @@\n-      constantPoolHandle constants(THREAD, caller->constants());\n+      constantPoolHandle constants(thread, caller->constants());\n@@ -1198,2 +1199,3 @@\n-methodHandle SharedRuntime::find_callee_method(JavaThread* thread, TRAPS) {\n-  ResourceMark rm(THREAD);\n+methodHandle SharedRuntime::find_callee_method(TRAPS) {\n+  JavaThread* thread = THREAD->as_Java_thread();\n+  ResourceMark rm(thread);\n@@ -1215,1 +1217,1 @@\n-    callee_method = methodHandle(THREAD, fr.entry_frame_call_wrapper()->callee_method());\n+    callee_method = methodHandle(thread, fr.entry_frame_call_wrapper()->callee_method());\n@@ -1219,2 +1221,2 @@\n-    find_callee_info_helper(thread, vfst, bc, callinfo, CHECK_(methodHandle()));\n-    callee_method = methodHandle(THREAD, callinfo.selected_method());\n+    find_callee_info_helper(vfst, bc, callinfo, CHECK_(methodHandle()));\n+    callee_method = methodHandle(thread, callinfo.selected_method());\n@@ -1227,3 +1229,1 @@\n-methodHandle SharedRuntime::resolve_helper(JavaThread *thread,\n-                                           bool is_virtual,\n-                                           bool is_optimized, TRAPS) {\n+methodHandle SharedRuntime::resolve_helper(bool is_virtual, bool is_optimized, TRAPS) {\n@@ -1231,1 +1231,1 @@\n-  callee_method = resolve_sub_helper(thread, is_virtual, is_optimized, THREAD);\n+  callee_method = resolve_sub_helper(is_virtual, is_optimized, THREAD);\n@@ -1248,1 +1248,1 @@\n-      callee_method = resolve_sub_helper(thread, is_virtual, is_optimized, THREAD);\n+      callee_method = resolve_sub_helper(is_virtual, is_optimized, THREAD);\n@@ -1339,4 +1339,2 @@\n-methodHandle SharedRuntime::resolve_sub_helper(JavaThread *thread,\n-                                               bool is_virtual,\n-                                               bool is_optimized, TRAPS) {\n-\n+methodHandle SharedRuntime::resolve_sub_helper(bool is_virtual, bool is_optimized, TRAPS) {\n+  JavaThread* thread = THREAD->as_Java_thread();\n@@ -1361,1 +1359,1 @@\n-  Handle receiver = find_callee_info(thread, invoke_code,\n+  Handle receiver = find_callee_info(invoke_code,\n@@ -1363,1 +1361,1 @@\n-  methodHandle callee_method(THREAD, call_info.selected_method());\n+  methodHandle callee_method(thread, call_info.selected_method());\n@@ -1452,1 +1450,1 @@\n-    callee_method = SharedRuntime::handle_ic_miss_helper(thread, CHECK_NULL);\n+    callee_method = SharedRuntime::handle_ic_miss_helper(CHECK_NULL);\n@@ -1503,1 +1501,1 @@\n-    callee_method = SharedRuntime::reresolve_call_site(thread, CHECK_NULL);\n+    callee_method = SharedRuntime::reresolve_call_site(CHECK_NULL);\n@@ -1547,1 +1545,1 @@\n-    callee_method = SharedRuntime::resolve_helper(thread, false, false, CHECK_NULL);\n+    callee_method = SharedRuntime::resolve_helper(false, false, CHECK_NULL);\n@@ -1560,1 +1558,1 @@\n-    callee_method = SharedRuntime::resolve_helper(thread, true, false, CHECK_NULL);\n+    callee_method = SharedRuntime::resolve_helper(true, false, CHECK_NULL);\n@@ -1574,1 +1572,1 @@\n-    callee_method = SharedRuntime::resolve_helper(thread, true, true, CHECK_NULL);\n+    callee_method = SharedRuntime::resolve_helper(true, true, CHECK_NULL);\n@@ -1662,1 +1660,2 @@\n-methodHandle SharedRuntime::handle_ic_miss_helper(JavaThread *thread, TRAPS) {\n+methodHandle SharedRuntime::handle_ic_miss_helper(TRAPS) {\n+  JavaThread* thread = THREAD->as_Java_thread();\n@@ -1669,1 +1668,1 @@\n-  Handle receiver = find_callee_info(thread, bc, call_info,\n+  Handle receiver = find_callee_info(bc, call_info,\n@@ -1682,1 +1681,1 @@\n-    methodHandle callee_method = SharedRuntime::reresolve_call_site(thread, CHECK_(methodHandle()));\n+    methodHandle callee_method = SharedRuntime::reresolve_call_site(CHECK_(methodHandle()));\n@@ -1769,1 +1768,2 @@\n-methodHandle SharedRuntime::reresolve_call_site(JavaThread *thread, TRAPS) {\n+methodHandle SharedRuntime::reresolve_call_site(TRAPS) {\n+  JavaThread* thread = THREAD->as_Java_thread();\n@@ -1853,1 +1853,1 @@\n-  methodHandle callee_method = find_callee_method(thread, CHECK_(methodHandle()));\n+  methodHandle callee_method = find_callee_method(CHECK_(methodHandle()));\n@@ -2124,1 +2124,1 @@\n-  Handle h_obj(THREAD, obj);\n+  Handle h_obj(thread, obj);\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":37,"deletions":37,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -55,3 +55,1 @@\n-  static methodHandle resolve_sub_helper(JavaThread *thread,\n-                                         bool is_virtual,\n-                                         bool is_optimized, TRAPS);\n+  static methodHandle resolve_sub_helper(bool is_virtual, bool is_optimized, TRAPS);\n@@ -319,3 +317,1 @@\n-  static methodHandle resolve_helper(JavaThread *thread,\n-                                     bool is_virtual,\n-                                     bool is_optimized, TRAPS);\n+  static methodHandle resolve_helper(bool is_virtual, bool is_optimized, TRAPS);\n@@ -335,1 +331,1 @@\n-  static methodHandle reresolve_call_site(JavaThread *thread, TRAPS);\n+  static methodHandle reresolve_call_site(TRAPS);\n@@ -339,1 +335,1 @@\n-  static methodHandle handle_ic_miss_helper(JavaThread* thread, TRAPS);\n+  static methodHandle handle_ic_miss_helper(TRAPS);\n@@ -342,1 +338,1 @@\n-  static methodHandle find_callee_method(JavaThread* thread, TRAPS);\n+  static methodHandle find_callee_method(TRAPS);\n@@ -349,2 +345,1 @@\n-  static Handle find_callee_info(JavaThread* thread,\n-                                 Bytecodes::Code& bc,\n+  static Handle find_callee_info(Bytecodes::Code& bc,\n@@ -352,2 +347,1 @@\n-  static Handle find_callee_info_helper(JavaThread* thread,\n-                                        vframeStream& vfst,\n+  static Handle find_callee_info_helper(vframeStream& vfst,\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.hpp","additions":7,"deletions":13,"binary":false,"changes":20,"status":"modified"}]}