{"files":[{"patch":"@@ -31,0 +31,2 @@\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.VarHandle;\n@@ -36,0 +38,10 @@\n+    private static final VarHandle ACCESSOR_GENERATED;\n+    static {\n+        try {\n+            ACCESSOR_GENERATED = MethodHandles.lookup().findVarHandle(\n+                NativeMethodAccessorImpl.class, \"accessorGenerated\", boolean.class);\n+        } catch (Exception e) {\n+            throw new ExceptionInInitializerError(e);\n+        }\n+    }\n+\n@@ -39,0 +51,1 @@\n+    boolean accessorGenerated;\n@@ -52,10 +65,21 @@\n-                && !ReflectUtil.isVMAnonymousClass(method.getDeclaringClass())) {\n-            MethodAccessorImpl acc = (MethodAccessorImpl)\n-                new MethodAccessorGenerator().\n-                    generateMethod(method.getDeclaringClass(),\n-                                   method.getName(),\n-                                   method.getParameterTypes(),\n-                                   method.getReturnType(),\n-                                   method.getExceptionTypes(),\n-                                   method.getModifiers());\n-            parent.setDelegate(acc);\n+                && !ReflectUtil.isVMAnonymousClass(method.getDeclaringClass())\n+                && ACCESSOR_GENERATED.compareAndSet(this, false, true)) {\n+            boolean succ = false;\n+            try {\n+                MethodAccessorImpl acc = (MethodAccessorImpl)\n+                    new MethodAccessorGenerator().\n+                        generateMethod(method.getDeclaringClass(),\n+                                       method.getName(),\n+                                       method.getParameterTypes(),\n+                                       method.getReturnType(),\n+                                       method.getExceptionTypes(),\n+                                       method.getModifiers());\n+                parent.setDelegate(acc);\n+                succ = true;\n+            } finally {\n+                if (succ == false) {\n+                    \/\/ in case exception happens in generateMethod\n+                    \/\/ restore accessorGenerated flag to false\n+                    ACCESSOR_GENERATED.set(this, false);\n+                }\n+            }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/NativeMethodAccessorImpl.java","additions":34,"deletions":10,"binary":false,"changes":44,"status":"modified"}]}