{"files":[{"patch":"@@ -1763,1 +1763,1 @@\n-      subs(zr, rscratch1, vmIntrinsics::_compiledLambdaForm);\n+      subs(zr, rscratch1, static_cast<int>(vmIntrinsics::_compiledLambdaForm));\n","filename":"src\/hotspot\/cpu\/aarch64\/interp_masm_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -417,1 +417,1 @@\n-      fatal(\"unexpected intrinsic %d: %s\", iid, vmIntrinsics::name_at(iid));\n+      fatal(\"unexpected intrinsic %d: %s\", vmIntrinsics::as_int(iid), vmIntrinsics::name_at(iid));\n","filename":"src\/hotspot\/cpu\/aarch64\/methodHandles_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1199,1 +1199,1 @@\n-    fatal(\"unexpected intrinsic id %d\", iid);\n+    fatal(\"unexpected intrinsic id %d\", vmIntrinsics::as_int(iid));\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -437,1 +437,1 @@\n-      fatal(\"unexpected intrinsic %d: %s\", iid, vmIntrinsics::name_at(iid));\n+      fatal(\"unexpected intrinsic %d: %s\", vmIntrinsics::as_int(iid), vmIntrinsics::name_at(iid));\n","filename":"src\/hotspot\/cpu\/arm\/methodHandles_arm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -704,1 +704,1 @@\n-    fatal(\"unexpected intrinsic id %d\", iid);\n+    fatal(\"unexpected intrinsic id %d\", vmIntrinsics::as_int(iid));\n","filename":"src\/hotspot\/cpu\/arm\/sharedRuntime_arm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1922,1 +1922,1 @@\n-      cmpwi(CCR1, tmp2, vmIntrinsics::_compiledLambdaForm);\n+      cmpwi(CCR1, tmp2, static_cast<int>(vmIntrinsics::_compiledLambdaForm));\n","filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -451,1 +451,1 @@\n-      fatal(\"unexpected intrinsic %d: %s\", iid, vmIntrinsics::name_at(iid));\n+      fatal(\"unexpected intrinsic %d: %s\", vmIntrinsics::as_int(iid), vmIntrinsics::name_at(iid));\n","filename":"src\/hotspot\/cpu\/ppc\/methodHandles_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1624,1 +1624,1 @@\n-    fatal(\"unexpected intrinsic id %d\", iid);\n+    fatal(\"unexpected intrinsic id %d\", vmIntrinsics::as_int(iid));\n","filename":"src\/hotspot\/cpu\/ppc\/sharedRuntime_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1809,1 +1809,1 @@\n-        z_cli(Method::intrinsic_id_offset_in_bytes(), tmp, vmIntrinsics::_compiledLambdaForm);\n+        z_cli(Method::intrinsic_id_offset_in_bytes(), tmp, static_cast<int>(vmIntrinsics::_compiledLambdaForm));\n@@ -1813,1 +1813,1 @@\n-        z_chi(tmp, vmIntrinsics::_compiledLambdaForm);\n+        z_chi(tmp, static_cast<int>(vmIntrinsics::_compiledLambdaForm));\n","filename":"src\/hotspot\/cpu\/s390\/interp_masm_s390.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -525,1 +525,1 @@\n-      fatal(\"unexpected intrinsic %d: %s\", iid, vmIntrinsics::name_at(iid));\n+      fatal(\"unexpected intrinsic %d: %s\", vmIntrinsics::as_int(iid), vmIntrinsics::name_at(iid));\n","filename":"src\/hotspot\/cpu\/s390\/methodHandles_s390.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -193,1 +193,1 @@\n-      cmpw(Address(tmp, Method::intrinsic_id_offset_in_bytes()), vmIntrinsics::_compiledLambdaForm);\n+      cmpw(Address(tmp, Method::intrinsic_id_offset_in_bytes()), static_cast<int>(vmIntrinsics::_compiledLambdaForm));\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -471,1 +471,1 @@\n-      fatal(\"unexpected intrinsic %d: %s\", iid, vmIntrinsics::name_at(iid));\n+      fatal(\"unexpected intrinsic %d: %s\", vmIntrinsics::as_int(iid), vmIntrinsics::name_at(iid));\n","filename":"src\/hotspot\/cpu\/x86\/methodHandles_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1635,1 +1635,1 @@\n-    fatal(\"unexpected intrinsic id %d\", iid);\n+    fatal(\"unexpected intrinsic id %d\", vmIntrinsics::as_int(iid));\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4133,1 +4133,1 @@\n-    fatal(\"unexpected intrinsic %d: %s\", iid, vmIntrinsics::name_at(iid));\n+    fatal(\"unexpected intrinsic %d: %s\", vmIntrinsics::as_int(iid), vmIntrinsics::name_at(iid));\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -1105,1 +1105,1 @@\n-      tty->print_cr(\"Eliminated Intrinsic %d's null check for value %d\", x->id(), recv->id());\n+      tty->print_cr(\"Eliminated Intrinsic %d's null check for value %d\", vmIntrinsics::as_int(x->id()), recv->id());\n@@ -1111,1 +1111,1 @@\n-      tty->print_cr(\"Intrinsic %d of value %d proves value to be non-null\", x->id(), recv->id());\n+      tty->print_cr(\"Intrinsic %d of value %d proves value to be non-null\", vmIntrinsics::as_int(x->id()), recv->id());\n","filename":"src\/hotspot\/share\/c1\/c1_Optimizer.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"classfile\/vmSymbols.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/classFileError.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -5290,1 +5290,2 @@\n-      for (int id = vmIntrinsics::FIRST_ID; id < (int)vmIntrinsics::ID_LIMIT; ++id) {\n+      for (vmIntrinsicsIterator it = vmIntrinsicsRange.begin(); it != vmIntrinsicsRange.end(); ++it) {\n+        vmIntrinsicID id = *it;\n@@ -5298,1 +5299,1 @@\n-        if (vmIntrinsics::class_for(vmIntrinsics::ID_from(id)) == klass_id) {\n+        if (vmIntrinsics::class_for(id) == klass_id) {\n@@ -5314,2 +5315,1 @@\n-                        vmIntrinsics::short_name_as_C_string(vmIntrinsics::ID_from(id),\n-                                                             buf, sizeof(buf)),\n+                        vmIntrinsics::short_name_as_C_string(id, buf, sizeof(buf)),\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+#include \"classfile\/vmSymbols.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/classListParser.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"classfile\/vmSymbols.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/defaultMethods.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"classfile\/vmSymbols.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/packageEntry.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"classfile\/vmSymbols.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/stackMapFrame.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2517,1 +2517,1 @@\n-Method* SystemDictionary::find_method_handle_intrinsic(vmIntrinsics::ID iid,\n+Method* SystemDictionary::find_method_handle_intrinsic(vmIntrinsicID iid,\n@@ -2521,0 +2521,1 @@\n+  const int iid_as_int = vmIntrinsics::as_int(iid);\n@@ -2524,1 +2525,1 @@\n-         \"must be a known MH intrinsic iid=%d: %s\", iid, vmIntrinsics::name_at(iid));\n+         \"must be a known MH intrinsic iid=%d: %s\", iid_as_int, vmIntrinsics::name_at(iid));\n@@ -2526,1 +2527,1 @@\n-  unsigned int hash  = invoke_method_table()->compute_hash(signature, iid);\n+  unsigned int hash  = invoke_method_table()->compute_hash(signature, iid_as_int);\n@@ -2528,1 +2529,1 @@\n-  SymbolPropertyEntry* spe = invoke_method_table()->find_entry(index, hash, signature, iid);\n+  SymbolPropertyEntry* spe = invoke_method_table()->find_entry(index, hash, signature, iid_as_int);\n@@ -2547,1 +2548,1 @@\n-      spe = invoke_method_table()->find_entry(index, hash, signature, iid);\n+      spe = invoke_method_table()->find_entry(index, hash, signature, iid_as_int);\n@@ -2549,1 +2550,1 @@\n-        spe = invoke_method_table()->add_entry(index, hash, signature, iid);\n+        spe = invoke_method_table()->add_entry(index, hash, signature, iid_as_int);\n@@ -2700,1 +2701,1 @@\n-  vmIntrinsics::ID null_iid = vmIntrinsics::_none;  \/\/ distinct from all method handle invoker intrinsics\n+  int null_iid = vmIntrinsics::as_int(vmIntrinsics::_none);  \/\/ distinct from all method handle invoker intrinsics\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"utilities\/vmEnums.hpp\"\n@@ -465,1 +466,1 @@\n-  static Method* find_method_handle_intrinsic(vmIntrinsics::ID iid,\n+  static Method* find_method_handle_intrinsic(vmIntrinsicID iid,\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"classfile\/vmSymbols.hpp\"\n","filename":"src\/hotspot\/share\/classfile\/verificationType.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -569,2 +569,2 @@\n-static const char* vm_intrinsic_name_table[vmIntrinsics::ID_LIMIT];\n-static TriBoolArray<vmIntrinsics::ID_LIMIT, int> vm_intrinsic_control_words;\n+static const char* vm_intrinsic_name_table[vmIntrinsics::number_of_intrinsics()];\n+static TriBoolArray<(size_t)vmIntrinsics::number_of_intrinsics(), int> vm_intrinsic_control_words;\n@@ -572,1 +572,1 @@\n-static void init_vm_intrinsic_name_table() {\n+void vmIntrinsics::init_vm_intrinsic_name_table() {\n@@ -575,2 +575,4 @@\n-  for (int index = vmIntrinsics::FIRST_ID; index < vmIntrinsics::ID_LIMIT; index++) {\n-    nt[index] = string;\n+\n+  for (vmIntrinsicsIterator it = vmIntrinsicsRange.begin(); it != vmIntrinsicsRange.end(); ++it) {\n+    vmIntrinsicID index = *it;\n+    nt[as_int(index)] = string;\n@@ -580,2 +582,2 @@\n-  assert(!strcmp(nt[vmIntrinsics::_hashCode], \"_hashCode\"), \"lined up\");\n-  nt[vmIntrinsics::_none] = \"_none\";\n+  assert(!strcmp(nt[as_int(vmIntrinsics::_hashCode)], \"_hashCode\"), \"lined up\");\n+  nt[as_int(vmIntrinsics::_none)] = \"_none\";\n@@ -586,1 +588,1 @@\n-  if (nt[_none] == NULL) {\n+  if (nt[as_int(_none)] == NULL) {\n@@ -590,2 +592,2 @@\n-  if ((uint)id < (uint)ID_LIMIT)\n-    return vm_intrinsic_name_table[(uint)id];\n+  if (id < ID_LIMIT)\n+    return vm_intrinsic_name_table[as_int(id)];\n@@ -598,1 +600,1 @@\n-  if (nt[_none] == NULL) {\n+  if (nt[as_int(_none)] == NULL) {\n@@ -602,3 +604,4 @@\n-  for (int index = FIRST_ID; index < ID_LIMIT; ++index) {\n-    if (0 == strcmp(name, nt[index])) {\n-      return ID_from(index);\n+  for (vmIntrinsicsIterator it = vmIntrinsicsRange.begin(); it != vmIntrinsicsRange.end(); ++it) {\n+    vmIntrinsicID index = *it;\n+    if (0 == strcmp(name, nt[as_int(index)])) {\n+      return index;\n@@ -620,1 +623,1 @@\n-  if (vm_intrinsic_control_words[_none].is_default()) {\n+  if (vm_intrinsic_control_words[as_int(_none)].is_default()) {\n@@ -625,1 +628,1 @@\n-        vm_intrinsic_control_words[id] = iter.is_enabled() && !disabled_by_jvm_flags(id);\n+        vm_intrinsic_control_words[as_int(id)] = iter.is_enabled() && !disabled_by_jvm_flags(id);\n@@ -634,1 +637,1 @@\n-        vm_intrinsic_control_words[id] = false;\n+        vm_intrinsic_control_words[as_int(id)] = false;\n@@ -638,1 +641,1 @@\n-    vm_intrinsic_control_words[_none] = true;\n+    vm_intrinsic_control_words[as_int(_none)] = true;\n@@ -641,1 +644,1 @@\n-  TriBool b = vm_intrinsic_control_words[id];\n+  TriBool b = vm_intrinsic_control_words[as_int(id)];\n@@ -644,1 +647,1 @@\n-    b = vm_intrinsic_control_words[id] = !disabled_by_jvm_flags(id);\n+    b = vm_intrinsic_control_words[as_int(id)] = !disabled_by_jvm_flags(id);\n@@ -709,1 +712,1 @@\n-static const jlong intrinsic_info_array[vmIntrinsics::ID_LIMIT+1] = {\n+static const jlong intrinsic_info_array[vmIntrinsics::number_of_intrinsics()+1] = {\n@@ -715,1 +718,1 @@\n-    0\n+  0\n@@ -720,1 +723,1 @@\n-  return intrinsic_info_array[vmIntrinsics::ID_from((int)id)];\n+  return intrinsic_info_array[vmIntrinsics::as_int(id)];\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.cpp","additions":26,"deletions":23,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"utilities\/enumIterator.hpp\"\n@@ -1012,0 +1013,7 @@\n+#define VM_INTRINSIC_ID_ENUM(id, klass, name, sig, flags)  id,\n+#define VM_INTRINSICS_CONST(id, klass, name, sig, flags)   static const vmIntrinsicID id = vmIntrinsicID::id;\n+#define __IGNORE_CLASS(id, name)                      \/*ignored*\/\n+#define __IGNORE_NAME(id, name)                       \/*ignored*\/\n+#define __IGNORE_SIGNATURE(id, name)                  \/*ignored*\/\n+#define __IGNORE_ALIAS(id, name)                      \/*ignored*\/\n+\n@@ -1013,0 +1021,20 @@\n+enum class vmIntrinsicID : int {\n+  _none = 0,                      \/\/ not an intrinsic (default answer)\n+\n+  VM_INTRINSICS_DO(VM_INTRINSIC_ID_ENUM,\n+                   __IGNORE_CLASS, __IGNORE_NAME, __IGNORE_SIGNATURE, __IGNORE_ALIAS)\n+\n+  ID_LIMIT,\n+  LAST_COMPILER_INLINE = _VectorScatterOp,\n+  FIRST_MH_SIG_POLY    = _invokeGeneric,\n+  FIRST_MH_STATIC      = _linkToVirtual,\n+  LAST_MH_SIG_POLY     = _linkToInterface,\n+\n+  FIRST_ID = _none + 1,\n+  LAST_ID = ID_LIMIT - 1,\n+};\n+\n+ENUMERATOR_RANGE(vmIntrinsicID, vmIntrinsicID::FIRST_ID, vmIntrinsicID::LAST_ID)\n+constexpr EnumRange<vmIntrinsicID> vmIntrinsicsRange; \/\/ the default range of all valid vmIntrinsicIDs\n+using vmIntrinsicsIterator = EnumIterator<vmIntrinsicID>; \/\/ convenience\n+\n@@ -1018,9 +1046,1 @@\n-  \/\/ Accessing\n-  enum ID {\n-    _none = 0,                      \/\/ not an intrinsic (default answer)\n-\n-    #define VM_INTRINSIC_ENUM(id, klass, name, sig, flags)  id,\n-    #define __IGNORE_CLASS(id, name)                      \/*ignored*\/\n-    #define __IGNORE_NAME(id, name)                       \/*ignored*\/\n-    #define __IGNORE_SIGNATURE(id, name)                  \/*ignored*\/\n-    #define __IGNORE_ALIAS(id, name)                      \/*ignored*\/\n+  typedef vmIntrinsicID ID;\n@@ -1028,7 +1048,8 @@\n-    VM_INTRINSICS_DO(VM_INTRINSIC_ENUM,\n-                     __IGNORE_CLASS, __IGNORE_NAME, __IGNORE_SIGNATURE, __IGNORE_ALIAS)\n-    #undef VM_INTRINSIC_ENUM\n-    #undef __IGNORE_CLASS\n-    #undef __IGNORE_NAME\n-    #undef __IGNORE_SIGNATURE\n-    #undef __IGNORE_ALIAS\n+  \/\/ Convenient access of vmIntrinsicID::FOO as vmIntrinsics::FOO\n+  static const ID _none                = vmIntrinsicID::_none;\n+  static const ID ID_LIMIT             = vmIntrinsicID::ID_LIMIT;\n+  static const ID LAST_COMPILER_INLINE = vmIntrinsicID::LAST_COMPILER_INLINE;\n+  static const ID FIRST_MH_SIG_POLY    = vmIntrinsicID::FIRST_MH_SIG_POLY;\n+  static const ID FIRST_MH_STATIC      = vmIntrinsicID::FIRST_MH_STATIC;\n+  static const ID LAST_MH_SIG_POLY     = vmIntrinsicID::LAST_MH_SIG_POLY;\n+  static const ID FIRST_ID             = vmIntrinsicID::FIRST_ID;\n@@ -1036,8 +1057,2 @@\n-    ID_LIMIT,\n-    LAST_COMPILER_INLINE = _VectorScatterOp,\n-    FIRST_MH_SIG_POLY    = _invokeGeneric,\n-    FIRST_MH_STATIC      = _linkToVirtual,\n-    LAST_MH_SIG_POLY     = _linkToInterface,\n-\n-    FIRST_ID = _none + 1\n-  };\n+  VM_INTRINSICS_DO(VM_INTRINSICS_CONST,\n+                   __IGNORE_CLASS, __IGNORE_NAME, __IGNORE_SIGNATURE, __IGNORE_ALIAS)\n@@ -1060,0 +1075,14 @@\n+\n+  \/\/ Convert an arbitrary vmIntrinsicID to int (checks validity):\n+  \/\/    vmIntrinsicID x = ...; int n = vmIntrinsics::as_int(x);\n+  \/\/ Convert a known vmIntrinsicID to int (no need for validity check):\n+  \/\/    int n = static_cast<int>(vmIntrinsicID::_invokeGeneric);\n+  static constexpr int as_int(vmIntrinsicID id) {\n+    assert(is_valid_id(id), \"must be\");\n+    return static_cast<int>(id);\n+  }\n+\n+  static constexpr int number_of_intrinsics() {\n+    return static_cast<int>(ID_LIMIT);\n+  }\n+\n@@ -1061,4 +1090,11 @@\n-  static ID ID_from(int raw_id) {\n-    assert(raw_id >= (int)_none && raw_id < (int)ID_LIMIT,\n-           \"must be a valid intrinsic ID\");\n-    return (ID)raw_id;\n+  static constexpr bool is_valid_id(int raw_id) {\n+    return (raw_id >= static_cast<int>(_none) && raw_id < static_cast<int>(ID_LIMIT));\n+  }\n+\n+  static constexpr bool is_valid_id(ID id) {\n+    return is_valid_id(static_cast<int>(id));\n+  }\n+\n+  static constexpr ID ID_from(int raw_id) {\n+    assert(is_valid_id(raw_id), \"must be a valid intrinsic ID\");\n+    return static_cast<ID>(raw_id);\n@@ -1077,0 +1113,1 @@\n+  static void init_vm_intrinsic_name_table();\n@@ -1142,0 +1179,7 @@\n+#undef VM_INTRINSIC_ENUM\n+#undef VM_INTRINSICS_CONST\n+#undef __IGNORE_CLASS\n+#undef __IGNORE_NAME\n+#undef __IGNORE_SIGNATURE\n+#undef __IGNORE_ALIAS\n+\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":72,"deletions":28,"binary":false,"changes":100,"status":"modified"},{"patch":"@@ -244,1 +244,1 @@\n-      _intrinsic_control_words[id] = iter.is_enabled();\n+      _intrinsic_control_words[vmIntrinsics::as_int(id)] = iter.is_enabled();\n@@ -253,1 +253,1 @@\n-      _intrinsic_control_words[id] = false;\n+      _intrinsic_control_words[vmIntrinsics::as_int(id)] = false;\n@@ -384,1 +384,1 @@\n-          set.cloned()->_intrinsic_control_words[id] = iter.is_enabled();\n+          set.cloned()->_intrinsic_control_words[vmIntrinsics::as_int(id)] = iter.is_enabled();\n@@ -404,1 +404,1 @@\n-          set.cloned()->_intrinsic_control_words[id] = false;\n+          set.cloned()->_intrinsic_control_words[vmIntrinsics::as_int(id)] = false;\n@@ -503,1 +503,1 @@\n-  TriBool b = _intrinsic_control_words[id];\n+  TriBool b = _intrinsic_control_words[vmIntrinsics::as_int(id)];\n","filename":"src\/hotspot\/share\/compiler\/compilerDirectives.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-  TriBoolArray<vmIntrinsics::ID_LIMIT, int> _intrinsic_control_words;\n+  TriBoolArray<(size_t)vmIntrinsics::number_of_intrinsics(), int> _intrinsic_control_words;\n","filename":"src\/hotspot\/share\/compiler\/compilerDirectives.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"classfile\/vmSymbols.hpp\"\n","filename":"src\/hotspot\/share\/compiler\/methodMatcher.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -117,2 +117,3 @@\n-    MethodKind kind = (MethodKind)( method_handle_invoke_FIRST +\n-                                    ((int)id - vmIntrinsics::FIRST_MH_SIG_POLY) );\n+    MethodKind kind = (MethodKind)(method_handle_invoke_FIRST +\n+                                   vmIntrinsics::as_int(id) -\n+                                   static_cast<int>(vmIntrinsics::FIRST_MH_SIG_POLY));\n","filename":"src\/hotspot\/share\/interpreter\/abstractInterpreter.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"classfile\/vmIntrinsics.hpp\"\n@@ -67,2 +68,2 @@\n-                                                                   + (vmIntrinsics::LAST_MH_SIG_POLY\n-                                                                      - vmIntrinsics::FIRST_MH_SIG_POLY)),\n+                                                                   + (static_cast<int>(vmIntrinsics::LAST_MH_SIG_POLY)\n+                                                                      - static_cast<int>(vmIntrinsics::FIRST_MH_SIG_POLY))),\n@@ -97,1 +98,1 @@\n-      return (vmIntrinsics::ID)( vmIntrinsics::FIRST_MH_SIG_POLY + (kind - method_handle_invoke_FIRST) );\n+      return vmIntrinsics::ID_from(static_cast<int>(vmIntrinsics::FIRST_MH_SIG_POLY) + (kind - method_handle_invoke_FIRST));\n","filename":"src\/hotspot\/share\/interpreter\/abstractInterpreter.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"classfile\/vmSymbols.hpp\"\n","filename":"src\/hotspot\/share\/interpreter\/bytecodeUtils.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"classfile\/vmSymbols.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/checkpoint\/objectSampleDescription.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"classfile\/vmSymbols.hpp\"\n","filename":"src\/hotspot\/share\/jfr\/recorder\/service\/jfrRecorderThread.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -164,1 +164,2 @@\n-  JVMCIObjectArray vmIntrinsics = JVMCIENV->new_VMIntrinsicMethod_array(vmIntrinsics::ID_LIMIT - 1, JVMCI_CHECK_NULL);\n+  int len = vmIntrinsics::number_of_intrinsics() - 1; \/\/ Exclude vmIntrinsics::_none, which is 0\n+  JVMCIObjectArray vmIntrinsics = JVMCIENV->new_VMIntrinsicMethod_array(len, JVMCI_CHECK_NULL);\n@@ -182,0 +183,1 @@\n+  \/\/ VM_INTRINSICS_DO does *not* iterate over vmIntrinsics::_none\n@@ -185,1 +187,0 @@\n-  assert(index == vmIntrinsics::ID_LIMIT - 1, \"must be\");\n@@ -187,0 +188,1 @@\n+  assert(index == len, \"must be\");\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVMInit.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"classfile\/altHashing.hpp\"\n@@ -33,1 +34,1 @@\n-#include \"classfile\/altHashing.hpp\"\n+#include \"classfile\/vmSymbols.hpp\"\n","filename":"src\/hotspot\/share\/memory\/filemap.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+#include \"classfile\/vmSymbols.hpp\"\n","filename":"src\/hotspot\/share\/memory\/metaspaceShared.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"classfile\/vmSymbols.hpp\"\n","filename":"src\/hotspot\/share\/oops\/generateOopMap.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"classfile\/vmSymbols.hpp\"\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.inline.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1635,1 +1635,1 @@\n-  assert(_intrinsic_id == vmIntrinsics::_none, \"do this just once\");\n+  assert(_intrinsic_id == static_cast<int>(vmIntrinsics::_none), \"do this just once\");\n@@ -2362,1 +2362,1 @@\n-    st->print_cr(\" - intrinsic id:      %d %s\", intrinsic_id(), vmIntrinsics::name_at(intrinsic_id()));\n+    st->print_cr(\" - intrinsic id:      %d %s\", vmIntrinsics::as_int(intrinsic_id()), vmIntrinsics::name_at(intrinsic_id()));\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-#include \"classfile\/vmSymbols.hpp\"\n@@ -772,1 +771,1 @@\n-  static methodHandle make_method_handle_intrinsic(vmIntrinsics::ID iid, \/\/ _invokeBasic, _linkToVirtual\n+  static methodHandle make_method_handle_intrinsic(vmIntrinsicID iid, \/\/ _invokeBasic, _linkToVirtual\n@@ -869,2 +868,2 @@\n-  vmIntrinsics::ID intrinsic_id() const          { return (vmIntrinsics::ID) _intrinsic_id;           }\n-  void     set_intrinsic_id(vmIntrinsics::ID id) {                           _intrinsic_id = (u2) id; }\n+  vmIntrinsicID intrinsic_id() const          { return (vmIntrinsicID) _intrinsic_id;           }\n+  void     set_intrinsic_id(vmIntrinsicID id) {                           _intrinsic_id = (u2) id; }\n","filename":"src\/hotspot\/share\/oops\/method.hpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -993,1 +993,1 @@\n-    fatal(\"unexpected intrinsic %d: %s\", iid, vmIntrinsics::name_at(iid));\n+    fatal(\"unexpected intrinsic %d: %s\", vmIntrinsics::as_int(iid), vmIntrinsics::name_at(iid));\n","filename":"src\/hotspot\/share\/opto\/callGenerator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -172,2 +172,6 @@\n-juint  Compile::_intrinsic_hist_count[vmIntrinsics::ID_LIMIT] = {0};\n-jubyte Compile::_intrinsic_hist_flags[vmIntrinsics::ID_LIMIT] = {0};\n+juint  Compile::_intrinsic_hist_count[vmIntrinsics::number_of_intrinsics()] = {0};\n+jubyte Compile::_intrinsic_hist_flags[vmIntrinsics::number_of_intrinsics()] = {0};\n+\n+inline int as_int(vmIntrinsics::ID id) {\n+  return vmIntrinsics::as_int(id);\n+}\n@@ -177,1 +181,1 @@\n-  int oflags = _intrinsic_hist_flags[id];\n+  int oflags = _intrinsic_hist_flags[as_int(id)];\n@@ -184,1 +188,1 @@\n-    juint count = (_intrinsic_hist_count[id] += 1);\n+    juint count = (_intrinsic_hist_count[as_int(id)] += 1);\n@@ -189,1 +193,1 @@\n-    _intrinsic_hist_count[vmIntrinsics::_none] += 1;\n+    _intrinsic_hist_count[as_int(vmIntrinsics::_none)] += 1;\n@@ -205,1 +209,1 @@\n-    _intrinsic_hist_flags[id] = (jubyte) (oflags | flags);\n+    _intrinsic_hist_flags[as_int(id)] = (jubyte) (oflags | flags);\n@@ -208,1 +212,1 @@\n-  _intrinsic_hist_flags[vmIntrinsics::_none] |= (jubyte) flags;\n+  _intrinsic_hist_flags[as_int(vmIntrinsics::_none)] |= (jubyte) flags;\n@@ -229,1 +233,1 @@\n-  juint total = _intrinsic_hist_count[vmIntrinsics::_none];\n+  juint total = _intrinsic_hist_count[as_int(vmIntrinsics::_none)];\n@@ -233,4 +237,4 @@\n-  for (int index = 1 + (int)vmIntrinsics::_none; index < (int)vmIntrinsics::ID_LIMIT; index++) {\n-    vmIntrinsics::ID id = (vmIntrinsics::ID) index;\n-    int   flags = _intrinsic_hist_flags[id];\n-    juint count = _intrinsic_hist_count[id];\n+  for (vmIntrinsicsIterator it = vmIntrinsicsRange.begin(); it != vmIntrinsicsRange.end(); ++it) {\n+    vmIntrinsicID id = *it;\n+    int   flags = _intrinsic_hist_flags[as_int(id)];\n+    juint count = _intrinsic_hist_count[as_int(id)];\n@@ -241,1 +245,1 @@\n-  PRINT_STAT_LINE(\"total\", total, format_flags(_intrinsic_hist_flags[vmIntrinsics::_none], flagsbuf));\n+  PRINT_STAT_LINE(\"total\", total, format_flags(_intrinsic_hist_flags[as_int(vmIntrinsics::_none)], flagsbuf));\n@@ -256,1 +260,1 @@\n-  if (_intrinsic_hist_flags[vmIntrinsics::_none] != 0) {\n+  if (_intrinsic_hist_flags[as_int(vmIntrinsics::_none)] != 0) {\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":18,"deletions":14,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -1081,2 +1081,2 @@\n-  static juint  _intrinsic_hist_count[vmIntrinsics::ID_LIMIT];\n-  static jubyte _intrinsic_hist_flags[vmIntrinsics::ID_LIMIT];\n+  static juint  _intrinsic_hist_count[];\n+  static jubyte _intrinsic_hist_flags[];\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -673,1 +673,1 @@\n-                    vmIntrinsics::name_at(intrinsic_id()), intrinsic_id());\n+                    vmIntrinsics::name_at(intrinsic_id()), vmIntrinsics::as_int(intrinsic_id()));\n@@ -709,1 +709,1 @@\n-                    vmIntrinsics::name_at(intrinsic_id()), intrinsic_id());\n+                    vmIntrinsics::name_at(intrinsic_id()), vmIntrinsics::as_int(intrinsic_id()));\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -116,1 +116,1 @@\n-    fatal(\"unexpected intrinsic %d: %s\", iid, vmIntrinsics::name_at(iid));\n+    fatal(\"unexpected intrinsic %d: %s\", vmIntrinsics::as_int(iid), vmIntrinsics::name_at(iid));\n","filename":"src\/hotspot\/share\/opto\/library_call.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -422,1 +422,1 @@\n-  assert(is_signature_polymorphic_intrinsic(iid), \"%d %s\", iid, vmIntrinsics::name_at(iid));\n+  assert(is_signature_polymorphic_intrinsic(iid), \"%d %s\", vmIntrinsics::as_int(iid), vmIntrinsics::name_at(iid));\n@@ -430,1 +430,1 @@\n-    fatal(\"unexpected intrinsic id: %d %s\", iid, vmIntrinsics::name_at(iid));\n+    fatal(\"unexpected intrinsic id: %d %s\", vmIntrinsics::as_int(iid), vmIntrinsics::name_at(iid));\n@@ -456,1 +456,1 @@\n-    fatal(\"unexpected intrinsic id: %d %s\", iid, vmIntrinsics::name_at(iid));\n+    fatal(\"unexpected intrinsic id: %d %s\", vmIntrinsics::as_int(iid), vmIntrinsics::name_at(iid));\n","filename":"src\/hotspot\/share\/prims\/methodHandles.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"classfile\/vmSymbols.hpp\"\n","filename":"src\/hotspot\/share\/prims\/vectorSupport.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"classfile\/vmSymbols.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/monitorDeflationThread.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"classfile\/vmSymbols.hpp\"\n","filename":"src\/hotspot\/share\/runtime\/signature.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+enum class vmIntrinsicID : int;\n","filename":"src\/hotspot\/share\/utilities\/vmEnums.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}