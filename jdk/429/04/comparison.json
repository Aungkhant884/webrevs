{"files":[{"patch":"@@ -29,1 +29,4 @@\n-import java.util.*;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.List;\n+import java.util.ListIterator;\n@@ -34,6 +37,7 @@\n- * occurs after the exchange handler returns.  Filters\n- * are organised in chains, and are associated with HttpContext instances.\n- * <p>\n- * Each Filter in the chain, invokes the next filter within its own\n- * doFilter() implementation. The final Filter in the chain invokes the applications\n- * exchange handler.\n+ * occurs after the exchange handler returns. Filters are organised in chains,\n+ * and are associated with {@link HttpContext} instances.\n+ *\n+ * <p> Each {@code Filter} in the chain, invokes the next filter within its own\n+ * {@link #doFilter(HttpExchange, Chain)} implementation. The final {@code Filter}\n+ * in the chain invokes the applications exchange handler.\n+ *\n@@ -50,3 +54,3 @@\n-     * a chain of filters associated with a HttpServer.\n-     * Each filter in the chain is given one of these\n-     * so it can invoke the next filter in the chain\n+     * A chain of filters associated with a {@link HttpServer}.\n+     * Each filter in the chain is given one of these so it can invoke the\n+     * next filter in the chain.\n@@ -55,2 +59,4 @@\n-        \/* the last element in the chain must invoke the users\n-         * handler\n+\n+        \/**\n+         * The last element in the chain must invoke the user's\n+         * handler.\n@@ -64,3 +70,3 @@\n-         * @param filters The filters that make up the Chain\n-         * @param handler The HttpHandler that will be invoked after the final\n-         *                Filter has finished\n+         * @param filters the filters that make up the {@code Chain}\n+         * @param handler the {@link HttpHandler} that will be invoked after\n+         *                the final {@code Filter} has finished\n@@ -74,9 +80,9 @@\n-         * calls the next filter in the chain, or else\n-         * the users exchange handler, if this is the\n-         * final filter in the chain. The Filter may decide\n-         * to terminate the chain, by not calling this method.\n-         * In this case, the filter <b>must<\/b> send the\n-         * response to the request, because the application's\n-         * exchange handler will not be invoked.\n-         * @param exchange the HttpExchange\n-         * @throws IOException let exceptions pass up the stack\n+         * Calls the next filter in the chain, or else the users exchange\n+         * handler, if this is the final filter in the chain. The {@code Filter}\n+         * may decide to terminate the chain, by not calling this method.\n+         * In this case, the filter <b>must<\/b> send the response to the\n+         * request, because the application's {@linkplain HttpExchange exchange}\n+         * handler will not be invoked.\n+         *\n+         * @param exchange the {@code HttpExchange}\n+         * @throws IOException if an I\/O error occurs\n@@ -98,16 +104,0 @@\n-     * <ul><li>examine or modify the request headers<\/li>\n-     * <li>filter the request body or the response body, by creating suitable\n-     * filter streams and calling\n-     * {@link HttpExchange#setStreams(InputStream,OutputStream)}<\/li>\n-     * <li>set attribute Objects in the exchange, which other filters or the\n-     * exchange handler can access.<\/li>\n-     * <li>decide to either<ol>\n-     * <li>invoke the next filter in the chain, by calling\n-     * {@link Filter.Chain#doFilter(HttpExchange)}<\/li>\n-     * <li>terminate the chain of invocation, by <b>not<\/b> calling\n-     * {@link Filter.Chain#doFilter(HttpExchange)}<\/li><\/ol>\n-     * <li>if option 1. above taken, then when doFilter() returns all subsequent\n-     * filters in the Chain have been called, and the response headers can be\n-     * examined or modified.<\/li>\n-     * <li>if option 2. above taken, then this Filter must use the HttpExchange\n-     * to send back an appropriate response<\/li><\/ul>\n@@ -115,4 +105,26 @@\n-     * @param exchange the {@code HttpExchange} to be filtered.\n-     * @param chain the Chain which allows the next filter to be invoked.\n-     * @throws IOException may be thrown by any filter module, and if\n-     *          caught, must be rethrown again.\n+     * <ul>\n+     *     <li> Examine or modify the request headers.\n+     *     <li> Filter the request body or the response body, by creating suitable\n+     *     filter streams and calling {@link HttpExchange#setStreams(InputStream, OutputStream)}.\n+     *     <li> Set attribute objects in the exchange, which other filters or\n+     *     the exchange handler can access.\n+     *     <li> Decide to either:\n+     *\n+     *     <ol>\n+     *         <li> Invoke the next filter in the chain, by calling\n+     *         {@link Filter.Chain#doFilter(HttpExchange)}.\n+     *         <li> Terminate the chain of invocation, by <b>not<\/b> calling\n+     *         {@link Filter.Chain#doFilter(HttpExchange)}.\n+     *     <\/ol>\n+     *\n+     *     <li> If option 1. above is taken, then when doFilter() returns all subsequent\n+     *     filters in the Chain have been called, and the response headers can be\n+     *     examined or modified.\n+     *     <li> If option 2. above is taken, then this Filter must use the HttpExchange\n+     *     to send back an appropriate response.\n+     * <\/ul>\n+     *\n+     * @param exchange the {@code HttpExchange} to be filtered\n+     * @param chain the {@code Chain} which allows the next filter to be invoked\n+     * @throws IOException may be thrown by any filter module, and if caught,\n+     * must be rethrown again\n@@ -125,2 +137,3 @@\n-     * returns a short description of this Filter\n-     * @return a string describing the Filter\n+     * Returns a short description of this {@code Filter}.\n+     *\n+     * @return a {@code String} describing the {@code Filter}\n","filename":"src\/jdk.httpserver\/share\/classes\/com\/sun\/net\/httpserver\/Filter.java","additions":59,"deletions":46,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -28,1 +28,6 @@\n-import java.util.*;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n@@ -31,4 +36,4 @@\n- * HTTP request and response headers are represented by this class which implements\n- * the interface\n- * {@link java.util.Map}{@literal <}{@link java.lang.String}, {@link java.util.List}\n- * {@literal <}{@link java.lang.String}{@literal >>}.\n+ * HTTP request and response headers are represented by this class which\n+ * implements the interface\n+ * {@link java.util.Map}{@literal <}{@link java.lang.String},\n+ * {@link java.util.List} {@literal <}{@link java.lang.String}{@literal >>}.\n@@ -39,2 +44,2 @@\n- * <p>\n- * For example, if a response header instance contains\n+ *\n+ * <p> For example, if a response header instance contains\n@@ -43,0 +48,1 @@\n+ *\n@@ -47,3 +53,4 @@\n- * <p>\n- * All the normal {@link java.util.Map} methods are provided, but the following\n- * additional convenience methods are most likely to be used:\n+ *\n+ * All the normal {@link java.util.Map} methods are provided, but the\n+ * following additional convenience methods are most likely to be used:\n+ *\n@@ -51,11 +58,16 @@\n- * <li>{@link #getFirst(String)} returns a single valued header or the first value of\n- * a multi-valued header.<\/li>\n- * <li>{@link #add(String,String)} adds the given header value to the list for the given key<\/li>\n- * <li>{@link #set(String,String)} sets the given header field to the single value given\n- * overwriting any existing values in the value list.\n- * <\/ul><p>\n- * All methods in this class accept <code>null<\/code> values for keys and values. However, null\n- * keys will never will be present in HTTP request headers, and will not be output\/sent in response headers.\n- * Null values can be represented as either a null entry for the key (i.e. the list is null) or\n- * where the key has a list, but one (or more) of the list's values is null. Null values are output\n- * as a header line containing the key but no associated value.\n+ *     <li>{@link #getFirst(String)} returns a single valued header or the first\n+ *     value of a multi-valued header.\n+ *     <li>{@link #add(String,String)} adds the given header value to the list\n+ *     for the given key.\n+ *     <li>{@link #set(String,String)} sets the given header field to the single\n+ *     value given overwriting any existing values in the value list.\n+ * <\/ul>\n+ *\n+ * <p> All methods in this class accept {@code null} values for keys and values.\n+ * However, {@code null} keys will never will be present in HTTP request\n+ * headers, and will not be output\/sent in response headers. Null values can be\n+ * represented as either a {@code null} entry for the key (i.e. the list is\n+ * {@code null}) or where the key has a list, but one (or more) of the list's\n+ * values is {@code null}. Null values are output as a header line containing\n+ * the key but no associated value.\n+ *\n@@ -69,1 +81,1 @@\n-        * Creates an empty instance of Headers.\n+        * Creates an empty instance of {@code Headers}.\n@@ -73,3 +85,4 @@\n-        \/* Normalize the key by converting to following form.\n-         * First char upper case, rest lower case.\n-         * key is presumed to be ASCII\n+        \/**\n+         * Normalize the key by converting to following form.\n+         * First {@code char} upper case, rest lower case.\n+         * key is presumed to be {@code ASCII}.\n@@ -123,2 +136,3 @@\n-         * returns the first value from the List of String values\n-         * for the given key (if at least one exists).\n+         * Returns the first value from the {@link List} of {@code String}\n+         * values for the given key (if at least one exists).\n+         *\n@@ -126,1 +140,1 @@\n-         * @return the first string value associated with the key\n+         * @return the first {@code String} value associated with the key\n@@ -143,3 +157,3 @@\n-         * adds the given value to the list of headers\n-         * for the given key. If the mapping does not\n-         * already exist, then it is created\n+         * Adds the given value to the list of headers for the given key. If\n+         * the mapping does not already exist, then it is created.\n+         *\n@@ -147,1 +161,1 @@\n-         * @param value the header value to add to the header\n+         * @param value the value to add to the header\n@@ -185,3 +199,3 @@\n-         * sets the given value as the sole header value\n-         * for the given key. If the mapping does not\n-         * already exist, then it is created\n+         * Sets the given value as the sole header value for the given\n+         * key. If the mapping does not already exist, then it is created.\n+         *\n@@ -189,1 +203,1 @@\n-         * @param value the header value to set.\n+         * @param value the header value to set\n","filename":"src\/jdk.httpserver\/share\/classes\/com\/sun\/net\/httpserver\/Headers.java","additions":50,"deletions":36,"binary":false,"changes":86,"status":"modified"}]}