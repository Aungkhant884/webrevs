{"files":[{"patch":"@@ -132,7 +132,0 @@\n-inline void FreezeBase::prepare_freeze_interpreted_top_frame(const frame& f) {\n-  intptr_t* lspp = f.addr_at(frame::interpreter_frame_last_sp_offset);\n-\n-  if (*lspp == 0)\n-    *lspp = f.unextended_sp() - f.fp();\n-}\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/continuationFreezeThaw_aarch64.inline.hpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -469,1 +469,1 @@\n-  __ lea(esp, Address(rfp, rscratch1, Address::lsl(3)));\n+  __ lea(esp, Address(rfp, rscratch1, Address::lsl(Interpreter::logStackElementSize)));\n@@ -526,1 +526,1 @@\n-  __ lea(esp, Address(rfp, rscratch1, Address::lsl(3)));\n+  __ lea(esp, Address(rfp, rscratch1, Address::lsl(Interpreter::logStackElementSize)));\n@@ -1873,1 +1873,1 @@\n-  __ lea(esp, Address(rfp, rscratch1, Address::lsl(3)));\n+  __ lea(esp, Address(rfp, rscratch1, Address::lsl(Interpreter::logStackElementSize)));\n","filename":"src\/hotspot\/cpu\/aarch64\/templateInterpreterGenerator_aarch64.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -51,4 +51,0 @@\n-inline void FreezeBase::prepare_freeze_interpreted_top_frame(const frame& f) {\n-  Unimplemented();\n-}\n-\n","filename":"src\/hotspot\/cpu\/arm\/continuationFreezeThaw_arm.inline.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -74,4 +74,0 @@\n-inline void FreezeBase::prepare_freeze_interpreted_top_frame(const frame& f) {\n-  \/\/ nothing to do\n-}\n-\n","filename":"src\/hotspot\/cpu\/ppc\/continuationFreezeThaw_ppc.inline.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1997,2 +1997,2 @@\n-  sub(R11_scratch1, R1_SP, esp); \/\/ esp contains fp\n-  sradi(R11_scratch1, R11_scratch1, Interpreter::logStackElementSize);\n+  subf(Rtemp2, esp, R1_SP); \/\/ esp contains fp\n+  sradi(Rtemp2, Rtemp2, Interpreter::logStackElementSize);\n@@ -2000,1 +2000,1 @@\n-  std(R11_scratch1, _ijava_state_neg(top_frame_sp), esp); \/\/ esp contains fp\n+  std(Rtemp2, _ijava_state_neg(top_frame_sp), esp); \/\/ esp contains fp\n","filename":"src\/hotspot\/cpu\/ppc\/interp_masm_ppc_64.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1064,1 +1064,0 @@\n-  __ subf(R12_scratch2, Rtop_frame_size, R1_SP);\n@@ -1066,1 +1065,1 @@\n-  __ sub(R12_scratch2, R12_scratch2, R1_SP);\n+  __ neg(R12_scratch2, Rtop_frame_size);\n","filename":"src\/hotspot\/cpu\/ppc\/templateInterpreterGenerator_ppc.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -130,7 +130,0 @@\n-inline void FreezeBase::prepare_freeze_interpreted_top_frame(const frame& f) {\n-  intptr_t* lspp = f.addr_at(frame::interpreter_frame_last_sp_offset);\n-\n-  if (*lspp == 0)\n-    *lspp = f.unextended_sp() - f.fp();\n-}\n-\n","filename":"src\/hotspot\/cpu\/riscv\/continuationFreezeThaw_riscv.inline.hpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -430,1 +430,1 @@\n-  __ shadd(esp, t0, fp,  t1,  LogBytesPerWord);\n+  __ shadd(esp, t0, fp,  t0,  LogBytesPerWord);\n@@ -488,1 +488,1 @@\n-  __ shadd(esp, t0, fp,  t1,  LogBytesPerWord);\n+  __ shadd(esp, t0, fp,  t0,  LogBytesPerWord);\n@@ -1610,1 +1610,1 @@\n-  __ shadd(esp, t0, fp,  t1,  LogBytesPerWord);\n+  __ shadd(esp, t0, fp,  t0,  LogBytesPerWord);\n","filename":"src\/hotspot\/cpu\/riscv\/templateInterpreterGenerator_riscv.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -51,4 +51,0 @@\n-inline void FreezeBase::prepare_freeze_interpreted_top_frame(const frame& f) {\n-  Unimplemented();\n-}\n-\n","filename":"src\/hotspot\/cpu\/s390\/continuationFreezeThaw_s390.inline.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -129,7 +129,0 @@\n-inline void FreezeBase::prepare_freeze_interpreted_top_frame(const frame& f) {\n-  intptr_t* lspp = f.addr_at(frame::interpreter_frame_last_sp_offset);\n-\n-  if (*lspp == 0)\n-    *lspp = f.unextended_sp() - f.fp();\n-}\n-\n","filename":"src\/hotspot\/cpu\/x86\/continuationFreezeThaw_x86.inline.hpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -51,4 +51,0 @@\n-inline void FreezeBase::prepare_freeze_interpreted_top_frame(const frame& f) {\n-  Unimplemented();\n-}\n-\n","filename":"src\/hotspot\/cpu\/zero\/continuationFreezeThaw_zero.inline.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -435,1 +435,0 @@\n-  static inline void prepare_freeze_interpreted_top_frame(const frame& f);\n@@ -812,6 +811,3 @@\n-    if (top) {\n-      if (_preempt && f.interpreter_frame_method()->is_native()) {\n-        \/\/ int native entry\n-        return freeze_pinned_native;\n-      }\n-      prepare_freeze_interpreted_top_frame(f);\n+    if (_preempt && top && f.interpreter_frame_method()->is_native()) {\n+      \/\/ int native entry\n+      return freeze_pinned_native;\n@@ -819,0 +815,1 @@\n+\n","filename":"src\/hotspot\/share\/runtime\/continuationFreezeThaw.cpp","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1624,2 +1624,1 @@\n-      if (on_heap\n-          && *fv.location != 0 && *fv.location > -100 && *fv.location < 100\n+      if (*fv.location != 0 && *fv.location > -100 && *fv.location < 100\n","filename":"src\/hotspot\/share\/runtime\/frame.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}