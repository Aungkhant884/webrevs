{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,1 @@\n+#include \"classfile\/javaClasses.hpp\"\n@@ -242,0 +243,14 @@\n+#ifdef ASSERT\n+\n+\/\/ ON_WEAK barriers should only ever be applied to j.l.r.Reference.referents.\n+void ZBarrier::verify_on_weak(volatile oop* referent_addr) {\n+  if (referent_addr != NULL) {\n+    uintptr_t base = (uintptr_t)referent_addr - java_lang_ref_Reference::referent_offset();\n+    oop obj = cast_to_oop(base);\n+    assert(oopDesc::is_oop(obj), \"Verification failed for: ref \" PTR_FORMAT \" obj: \" PTR_FORMAT, (uintptr_t)referent_addr, base);\n+    assert(java_lang_ref_Reference::is_referent_field(obj, java_lang_ref_Reference::referent_offset()), \"Sanity\");\n+  }\n+}\n+\n+#endif\n+\n","filename":"src\/hotspot\/share\/gc\/z\/zBarrier.cpp","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,0 +78,2 @@\n+  static void verify_on_weak(volatile oop* referent_addr) NOT_DEBUG_RETURN;\n+\n","filename":"src\/hotspot\/share\/gc\/z\/zBarrier.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-#include \"classfile\/javaClasses.hpp\"\n@@ -245,12 +244,0 @@\n-\/\/ ON_WEAK barriers should only ever be applied to j.l.r.Reference.referents.\n-inline void verify_on_weak(volatile oop* referent_addr) {\n-#ifdef ASSERT\n-  if (referent_addr != NULL) {\n-    uintptr_t base = (uintptr_t)referent_addr - java_lang_ref_Reference::referent_offset();\n-    oop obj = cast_to_oop(base);\n-    assert(oopDesc::is_oop(obj), \"Verification failed for: ref \" PTR_FORMAT \" obj: \" PTR_FORMAT, (uintptr_t)referent_addr, base);\n-    assert(java_lang_ref_Reference::is_referent_field(obj, java_lang_ref_Reference::referent_offset()), \"Sanity\");\n-  }\n-#endif\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/z\/zBarrier.inline.hpp","additions":1,"deletions":14,"binary":false,"changes":15,"status":"modified"}]}