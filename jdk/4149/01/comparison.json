{"files":[{"patch":"@@ -76,1 +76,0 @@\n-  \/\/ Copy class version\n","filename":"src\/hotspot\/share\/oops\/constantPool.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1855,3 +1855,6 @@\n-  \/\/ Save fields from the old_cp.\n-  merge_cp->copy_fields(old_cp());\n-  scratch_cp->copy_fields(old_cp());\n+  \/\/ Set dynamic constants attribute from the original CP.\n+  if (old_cp->has_dynamic_constant()) {\n+    scratch_cp->set_has_dynamic_constant();\n+  }\n+  \/\/ Copy attributes from scratch_cp to merge_cp\n+  merge_cp->copy_fields(scratch_cp());\n@@ -4399,0 +4402,10 @@\n+  \/\/ Replace minor version number of class file\n+  u2 old_minor_version = the_class->constants()->minor_version();\n+  the_class->constants()->set_minor_version(scratch_class->constants()->minor_version());\n+  scratch_class->constants()->set_minor_version(old_minor_version);\n+\n+  \/\/ Replace major version number of class file\n+  u2 old_major_version = the_class->constants()->major_version();\n+  the_class->constants()->set_major_version(scratch_class->constants()->major_version());\n+  scratch_class->constants()->set_major_version(old_major_version);\n+\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,102 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8267555\n+ * @requires vm.jvmti\n+ * @summary Class redefinition with a different class file version\n+ * @library \/test\/lib\n+ * @compile TestClassOld.jasm TestClassNew.jasm\n+ * @run main RedefineClassHelper\n+ * @run main\/othervm -javaagent:redefineagent.jar ClassVersionAfterRedefine\n+ *\/\n+\n+import java.io.InputStream;\n+import java.lang.reflect.Method;\n+\n+import static jdk.test.lib.Asserts.assertTrue;\n+\n+public class ClassVersionAfterRedefine extends ClassLoader {\n+\n+    private static String myName = ClassVersionAfterRedefine.class.getName();\n+\n+    private static byte[] getBytecodes(String name) throws Exception {\n+        InputStream is = ClassVersionAfterRedefine.class.getResourceAsStream(name + \".class\");\n+        byte[] buf = is.readAllBytes();\n+        System.out.println(\"sizeof(\" + name + \".class) == \" + buf.length);\n+        return buf;\n+    }\n+\n+    private static int getStringIndex(String needle, byte[] buf) {\n+        return getStringIndex(needle, buf, 0);\n+    }\n+\n+    private static int getStringIndex(String needle, byte[] buf, int offset) {\n+        outer:\n+        for (int i = offset; i < buf.length - offset - needle.length(); i++) {\n+            for (int j = 0; j < needle.length(); j++) {\n+                if (buf[i + j] != (byte)needle.charAt(j)) continue outer;\n+            }\n+            return i;\n+        }\n+        return 0;\n+    }\n+\n+    private static void replaceString(byte[] buf, String name, int index) {\n+        for (int i = index; i < index + name.length(); i++) {\n+            buf[i] = (byte)name.charAt(i - index);\n+        }\n+    }\n+\n+    private static void replaceAllStrings(byte[] buf, String oldString, String newString) throws Exception {\n+        assertTrue(oldString.length() == newString.length(), \"must have same length\");\n+        int index = -1;\n+        while ((index = getStringIndex(oldString, buf, index + 1)) != 0) {\n+            replaceString(buf, newString, index);\n+        }\n+    }\n+\n+    public static void main(String[] s) throws Exception {\n+\n+        byte[] buf = getBytecodes(\"TestClassOld\");\n+        \/\/ Poor man's renaming of class \"TestClassOld\" to \"TestClassXXX\"\n+        replaceAllStrings(buf, \"TestClassOld\", \"TestClassXXX\");\n+        ClassVersionAfterRedefine cvar = new ClassVersionAfterRedefine();\n+        Class<?> old = cvar.defineClass(null, buf, 0, buf.length);\n+        Method foo = old.getMethod(\"foo\");\n+        Object result = foo.invoke(null);\n+        assertTrue(\"java-lang-String\".equals(result));\n+        System.out.println(old.getSimpleName() + \".foo() = \" + result);\n+\n+        buf = getBytecodes(\"TestClassNew\");\n+        \/\/ Rename class \"TestClassNew\" to \"TestClassXXX\" so we can use it for\n+        \/\/ redefining the original version of \"TestClassXXX\" (i.e. \"TestClassOld\").\n+        replaceAllStrings(buf, \"TestClassNew\", \"TestClassXXX\");\n+        \/\/ Now redine the original version of \"TestClassXXX\" (i.e. \"TestClassOld\").\n+        RedefineClassHelper.redefineClass(old, buf);\n+        result = foo.invoke(null);\n+        assertTrue(\"java.lang.String\".equals(result));\n+        System.out.println(old.getSimpleName() + \".foo() = \" + result);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/ClassVersionAfterRedefine.java","additions":102,"deletions":0,"binary":false,"changes":102,"status":"added"},{"patch":"@@ -0,0 +1,45 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+super public final class TestClassNew version 49:0 {\n+\n+    public Method \"<init>\":\"()V\" stack 1 locals 1 {\n+        aload_0;\n+        invokespecial    Method java\/lang\/Object.\"<init>\":\"()V\";\n+        return;\n+    }\n+\n+    public static Method foo:\"()Ljava\/lang\/String;\" stack 1 locals 1 {\n+        ldc            class  java\/lang\/String;\n+        invokevirtual  Method java\/lang\/Class.getName:\"()Ljava\/lang\/String;\";\n+        areturn;\n+    }\n+\n+    public static Method main:\"([Ljava\/lang\/String;)V\" stack 2 locals 2 {\n+        getstatic      Field  java\/lang\/System.out:\"Ljava\/io\/PrintStream;\";\n+        invokestatic   Method TestClassNew.foo:\"()Ljava\/lang\/String;\";\n+        invokevirtual  Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\";\n+        return;\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/TestClassNew.jasm","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+super public final class TestClassOld version 48:0 {\n+\n+    public Method \"<init>\":\"()V\" stack 1 locals 1 {\n+        aload_0;\n+        invokespecial    Method java\/lang\/Object.\"<init>\":\"()V\";\n+        return;\n+    }\n+\n+    public static Method foo:\"()Ljava\/lang\/String;\" stack 1 locals 1 {\n+        ldc            String \"java-lang-String\";\n+        areturn;\n+    }\n+\n+    public static Method main:\"([Ljava\/lang\/String;)V\" stack 2 locals 2 {\n+        getstatic      Field java\/lang\/System.out:\"Ljava\/io\/PrintStream;\";\n+        invokestatic   Method TestClassOld.foo:\"()Ljava\/lang\/String;\";\n+        invokevirtual  Method java\/io\/PrintStream.println:\"(Ljava\/lang\/String;)V\";\n+        return;\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/RedefineClasses\/TestClassOld.jasm","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"}]}