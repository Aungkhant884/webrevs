{"files":[{"patch":"@@ -28,1 +28,1 @@\n-void ZLargePages::initialize_platform() {\n+void ZLargePages::pd_initialize() {\n","filename":"src\/hotspot\/os\/bsd\/gc\/z\/zLargePages_bsd.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-void ZNUMA::initialize_platform() {\n+void ZNUMA::pd_initialize() {\n","filename":"src\/hotspot\/os\/bsd\/gc\/z\/zNUMA_bsd.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-void ZLargePages::initialize_platform() {\n+void ZLargePages::pd_initialize() {\n","filename":"src\/hotspot\/os\/linux\/gc\/z\/zLargePages_linux.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-void ZNUMA::initialize_platform() {\n+void ZNUMA::pd_initialize() {\n","filename":"src\/hotspot\/os\/linux\/gc\/z\/zNUMA_linux.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-void ZInitialize::initialize_os() {\n+void ZInitialize::pd_initialize() {\n","filename":"src\/hotspot\/os\/posix\/gc\/z\/zInitialize_posix.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-void ZVirtualMemoryManager::initialize_os() {\n+void ZVirtualMemoryManager::pd_initialize() {\n@@ -36,8 +36,3 @@\n-static void unmap(uintptr_t start, size_t size) {\n-  const int res = munmap((void*)start, size);\n-  assert(res == 0, \"Failed to unmap memory\");\n-}\n-\n-static bool map(uintptr_t start, size_t size) {\n-  const void* const res = mmap((void*)start, size, PROT_NONE, MAP_ANONYMOUS|MAP_PRIVATE|MAP_NORESERVE, -1, 0);\n-  if (res == MAP_FAILED) {\n+bool ZVirtualMemoryManager::pd_reserve(uintptr_t addr, size_t size) {\n+  const uintptr_t res = (uintptr_t)mmap((void*)addr, size, PROT_NONE, MAP_ANONYMOUS|MAP_PRIVATE|MAP_NORESERVE, -1, 0);\n+  if (res == (uintptr_t)MAP_FAILED) {\n@@ -48,1 +43,1 @@\n-  if ((uintptr_t)res != start) {\n+  if (res != addr) {\n@@ -50,1 +45,1 @@\n-    unmap((uintptr_t)res, size);\n+    munmap((void*)res, size);\n@@ -58,27 +53,3 @@\n-bool ZVirtualMemoryManager::reserve_contiguous_platform(uintptr_t start, size_t size) {\n-  \/\/ Reserve address views\n-  const uintptr_t marked0 = ZAddress::marked0(start);\n-  const uintptr_t marked1 = ZAddress::marked1(start);\n-  const uintptr_t remapped = ZAddress::remapped(start);\n-\n-  if (!map(marked0, size)) {\n-    return false;\n-  }\n-\n-  if (!map(marked1, size)) {\n-    unmap(marked0, size);\n-    return false;\n-  }\n-\n-  if (!map(remapped, size)) {\n-    unmap(marked0, size);\n-    unmap(marked1, size);\n-    return false;\n-  }\n-\n-  \/\/ Register address views with native memory tracker\n-  nmt_reserve(marked0, size);\n-  nmt_reserve(marked1, size);\n-  nmt_reserve(remapped, size);\n-\n-  return true;\n+void ZVirtualMemoryManager::pd_unreserve(uintptr_t addr, size_t size) {\n+  const int res = munmap((void*)addr, size);\n+  assert(res == 0, \"Failed to unmap memory\");\n","filename":"src\/hotspot\/os\/posix\/gc\/z\/zVirtualMemory_posix.cpp","additions":9,"deletions":38,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-void ZInitialize::initialize_os() {\n+void ZInitialize::pd_initialize() {\n","filename":"src\/hotspot\/os\/windows\/gc\/z\/zInitialize_windows.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-void ZLargePages::initialize_platform() {\n+void ZLargePages::pd_initialize() {\n","filename":"src\/hotspot\/os\/windows\/gc\/z\/zLargePages_windows.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-void ZNUMA::initialize_platform() {\n+void ZNUMA::pd_initialize() {\n","filename":"src\/hotspot\/os\/windows\/gc\/z\/zNUMA_windows.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-void ZVirtualMemoryManager::initialize_os() {\n+void ZVirtualMemoryManager::pd_initialize() {\n@@ -119,7 +119,2 @@\n-bool ZVirtualMemoryManager::reserve_contiguous_platform(uintptr_t start, size_t size) {\n-  assert(is_aligned(size, ZGranuleSize), \"Must be granule aligned\");\n-\n-  \/\/ Reserve address views\n-  const uintptr_t marked0 = ZAddress::marked0(start);\n-  const uintptr_t marked1 = ZAddress::marked1(start);\n-  const uintptr_t remapped = ZAddress::remapped(start);\n+bool ZVirtualMemoryManager::pd_reserve(uintptr_t addr, size_t size) {\n+  uintptr_t res = ZMapper::reserve(addr, size);\n@@ -127,20 +122,3 @@\n-  \/\/ Reserve address space\n-  if (ZMapper::reserve(marked0, size) != marked0) {\n-    return false;\n-  }\n-\n-  if (ZMapper::reserve(marked1, size) != marked1) {\n-    ZMapper::unreserve(marked0, size);\n-    return false;\n-  }\n-\n-  if (ZMapper::reserve(remapped, size) != remapped) {\n-    ZMapper::unreserve(marked0, size);\n-    ZMapper::unreserve(marked1, size);\n-    return false;\n-  }\n-\n-  \/\/ Register address views with native memory tracker\n-  nmt_reserve(marked0, size);\n-  nmt_reserve(marked1, size);\n-  nmt_reserve(remapped, size);\n+  assert(res == addr || res == NULL, \"Should not reserve other memory than requested\");\n+  return res == addr;\n+}\n@@ -148,1 +126,2 @@\n-  return true;\n+void ZVirtualMemoryManager::pd_unreserve(uintptr_t addr, size_t size) {\n+  ZMapper::unreserve(addr, size);\n","filename":"src\/hotspot\/os\/windows\/gc\/z\/zVirtualMemory_windows.cpp","additions":8,"deletions":29,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-  initialize_os();\n+  pd_initialize();\n","filename":"src\/hotspot\/share\/gc\/z\/zInitialize.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-  void initialize_os();\n+  void pd_initialize();\n","filename":"src\/hotspot\/share\/gc\/z\/zInitialize.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-  initialize_platform();\n+  pd_initialize();\n","filename":"src\/hotspot\/share\/gc\/z\/zLargePages.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-  static void initialize_platform();\n+  static void pd_initialize();\n","filename":"src\/hotspot\/share\/gc\/z\/zLargePages.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-  initialize_platform();\n+  pd_initialize();\n","filename":"src\/hotspot\/share\/gc\/z\/zNUMA.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-  static void initialize_platform();\n+  static void pd_initialize();\n","filename":"src\/hotspot\/share\/gc\/z\/zNUMA.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"gc\/z\/zAddress.inline.hpp\"\n@@ -30,1 +31,0 @@\n-#include \"utilities\/debug.hpp\"\n@@ -32,0 +32,1 @@\n+#include \"utilities\/debug.hpp\"\n@@ -50,2 +51,2 @@\n-  \/\/ Initialize OS specific parts\n-  initialize_os();\n+  \/\/ Initialize platform specific parts\n+  pd_initialize();\n@@ -65,3 +66,1 @@\n-  if (reserve_contiguous_platform(start, size)) {\n-    \/\/ Make the address range free\n-    _manager.free(start, size);\n+  if (reserve_contiguous(start, size)) {\n@@ -102,0 +101,35 @@\n+bool ZVirtualMemoryManager::reserve_contiguous(uintptr_t start, size_t size) {\n+  assert(is_aligned(size, ZGranuleSize), \"Must be granule aligned\");\n+\n+  \/\/ Reserve address views\n+  const uintptr_t marked0 = ZAddress::marked0(start);\n+  const uintptr_t marked1 = ZAddress::marked1(start);\n+  const uintptr_t remapped = ZAddress::remapped(start);\n+\n+  \/\/ Reserve address space\n+  if (!pd_reserve(marked0, size)) {\n+    return false;\n+  }\n+\n+  if (!pd_reserve(marked1, size)) {\n+    pd_unreserve(marked0, size);\n+    return false;\n+  }\n+\n+  if (!pd_reserve(remapped, size)) {\n+    pd_unreserve(marked0, size);\n+    pd_unreserve(marked1, size);\n+    return false;\n+  }\n+\n+  \/\/ Register address views with native memory tracker\n+  nmt_reserve(marked0, size);\n+  nmt_reserve(marked1, size);\n+  nmt_reserve(remapped, size);\n+\n+  \/\/ Make the address range free\n+  _manager.free(start, size);\n+\n+  return true;\n+}\n+\n@@ -108,4 +142,1 @@\n-    if (reserve_contiguous_platform(start, size)) {\n-      \/\/ Make the address range free\n-      _manager.free(start, size);\n-\n+    if (reserve_contiguous(start, size)) {\n","filename":"src\/hotspot\/share\/gc\/z\/zVirtualMemory.cpp","additions":41,"deletions":10,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -53,1 +53,4 @@\n-  void initialize_os();\n+  \/\/ Platform specific implementation\n+  void pd_initialize();\n+  bool pd_reserve(uintptr_t addr, size_t size);\n+  void pd_unreserve(uintptr_t addr, size_t size);\n@@ -55,1 +58,1 @@\n-  bool reserve_contiguous_platform(uintptr_t start, size_t size);\n+  bool reserve_contiguous(uintptr_t start, size_t size);\n","filename":"src\/hotspot\/share\/gc\/z\/zVirtualMemory.hpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"}]}