{"files":[{"patch":"@@ -816,1 +816,0 @@\n-\n@@ -818,21 +817,0 @@\n-  if ((cause == GCCause::_wb_young_gc) ||\n-      (cause == GCCause::_gc_locker)) {\n-    \/\/ Young collection for WhiteBox or GCLocker.\n-    collect(cause, YoungGen);\n-  } else {\n-#ifdef ASSERT\n-  if (cause == GCCause::_scavenge_alot) {\n-    \/\/ Young collection only.\n-    collect(cause, YoungGen);\n-  } else {\n-    \/\/ Stop-the-world full collection.\n-    collect(cause, OldGen);\n-  }\n-#else\n-    \/\/ Stop-the-world full collection.\n-    collect(cause, OldGen);\n-#endif\n-  }\n-}\n-\n-void GenCollectedHeap::collect(GCCause::Cause cause, GenerationType max_generation) {\n@@ -856,0 +834,9 @@\n+  bool should_run_young_gc =  (cause == GCCause::_wb_young_gc)\n+                           || (cause == GCCause::_gc_locker)\n+                DEBUG_ONLY(|| (cause == GCCause::_scavenge_alot))\n+                           ;\n+\n+  const GenerationType max_generation = should_run_young_gc\n+                                      ? YoungGen\n+                                      : OldGen;\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.cpp","additions":9,"deletions":22,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -189,4 +189,0 @@\n-  \/\/ Perform a full collection of generations up to and including max_generation.\n-  \/\/ Mostly used for testing purposes. Caller does not hold the Heap_lock on entry.\n-  void collect(GCCause::Cause cause, GenerationType max_generation);\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"}]}