{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,0 @@\n-    native static void setSysCnt();\n@@ -67,1 +66,0 @@\n-        setSysCnt();\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/GetAllThreads\/allthr001.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n- * @run main\/othervm\/native -agentlib:allthr001 nsk.jvmti.GetAllThreads.allthr001 5\n+ * @run main\/othervm\/native -agentlib:allthr001=printdump nsk.jvmti.GetAllThreads.allthr001 5\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/GetAllThreads\/allthr001\/TestDescription.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,5 @@\n+typedef struct  {\n+    info expected;\n+    info unexpected;\n+} threadInfo;\n+\n@@ -47,7 +52,18 @@\n-static jvmtiThreadInfo inf;\n-static int sys_cnt;\n-static const char *names0[] = { \"main\" };\n-static const char *names1[] = { \"main\", \"thread1\" };\n-static const char *names2[] = { \"main\", \"Thread-\" };\n-static info thrInfo[] = {\n-    { 1, names0 }, { 1, names0 }, { 2, names1 }, { 1, names0 }, { 2, names2 }\n+\n+static const char main_name[] = \"main\";\n+static const char thread1_name[] = \"thread1\";\n+static const char sys_thread_name[] = \"SysThread\";\n+\n+static const char *main_only[] = { main_name };\n+static const char *thr1_only[] = { thread1_name };\n+static const char *sys_only[] = { sys_thread_name };\n+static const char *main_thr1[] = { main_name, thread1_name };\n+static const char *main_sys[] = { main_name, sys_thread_name };\n+static const char *thr1_sys[] = { thread1_name, sys_thread_name };\n+\n+static threadInfo thrInfo[] = {\n+    {{1, main_only},    {2, thr1_sys}},\n+    {{1, main_only},    {2, thr1_sys}},\n+    {{2, main_thr1},    {1, sys_only}},\n+    {{1, main_only},    {2, thr1_sys}},\n+    {{2, main_sys},     {1, thr1_only}}\n@@ -61,2 +77,4 @@\n-    cid = env->GetMethodID(thrClass, \"<init>\", \"()V\");\n-    res = env->NewObject(thrClass, cid);\n+    cid = env->GetMethodID(thrClass, \"<init>\", \"(Ljava\/lang\/String;)V\");\n+    jstring thread_name = env->NewStringUTF(sys_thread_name);\n+    res = env->NewObject(thrClass, cid, thread_name);\n+    env->DeleteLocalRef(thread_name);\n@@ -152,0 +170,10 @@\n+void release(JNIEnv *env, jvmtiThreadInfo *info) {\n+    jvmti->Deallocate((unsigned char *)info->name);\n+    if (info->thread_group != NULL) {\n+        env->DeleteLocalRef(info->thread_group);\n+    }\n+    if (info->context_class_loader != NULL) {\n+        env->DeleteLocalRef(info->context_class_loader);\n+    }\n+}\n+\n@@ -157,1 +185,2 @@\n-    int num_unexpected = 0;\n+    int expected = 0;\n+    jvmtiThreadInfo inf;\n@@ -199,0 +228,1 @@\n+    \/\/ check unexpected threads\n@@ -200,2 +230,9 @@\n-        if (!isThreadExpected(jvmti, threads[i])) {\n-            num_unexpected++;\n+        err = jvmti->GetThreadInfo(threads[i], &inf);\n+        if (err != JVMTI_ERROR_NONE) {\n+            printf(\"Failed to get thread info: %s (%d)\\n\",\n+                   TranslateError(err), err);\n+            result = STATUS_FAILED;\n+            return;\n+        }\n+        if (printdump == JNI_TRUE) {\n+            printf(\" >>> %s\", inf.name);\n@@ -203,0 +240,8 @@\n+        for (j = 0, found = 0; j < thrInfo[ind].unexpected.cnt && !found; j++) {\n+            found = (inf.name != NULL && strcmp(inf.name, thrInfo[ind].unexpected.thrNames[j]) == 0);\n+        }\n+        if (found) {\n+            printf(\"Point %d: detected unexpected thread %s\\n\", ind, inf.name);\n+            result = STATUS_FAILED;\n+        }\n+        release(env, &inf);\n@@ -204,6 +249,2 @@\n-\n-    if (threadsCount - num_unexpected != thrInfo[ind].cnt + sys_cnt) {\n-        printf(\"Point %d: number of threads expected: %d, got: %d\\n\",\n-            ind, thrInfo[ind].cnt + sys_cnt, threadsCount - num_unexpected);\n-        result = STATUS_FAILED;\n-        return;\n+    if (printdump == JNI_TRUE) {\n+        printf(\"\\n\");\n@@ -212,1 +253,2 @@\n-    for (i = 0; i < thrInfo[ind].cnt; i++) {\n+    \/\/ verify all expected threads are present\n+    for (i = 0; i < thrInfo[ind].expected.cnt; i++) {\n@@ -221,10 +263,2 @@\n-            if (printdump == JNI_TRUE) {\n-                printf(\" >>> %s\", inf.name);\n-            }\n-            found = (inf.name != NULL &&\n-                     strstr(inf.name, thrInfo[ind].thrNames[i]) == inf.name &&\n-                     (ind == 4 || strlen(inf.name) ==\n-                      strlen(thrInfo[ind].thrNames[i])));\n-        }\n-        if (printdump == JNI_TRUE) {\n-            printf(\"\\n\");\n+            found = (inf.name != NULL && strcmp(inf.name, thrInfo[ind].expected.thrNames[j]) == 0);\n+            release(env, &inf);\n@@ -234,1 +268,1 @@\n-                   ind, thrInfo[ind].thrNames[i]);\n+                   ind, thrInfo[ind].expected.thrNames[i]);\n@@ -268,27 +302,0 @@\n-JNIEXPORT void JNICALL Java_nsk_jvmti_GetAllThreads_allthr001_setSysCnt(JNIEnv *env, jclass cls) {\n-    jint threadsCount = -1;\n-    jthread *threads;\n-    jvmtiError err;\n-    int i;\n-\n-    err = jvmti->GetAllThreads(&threadsCount, &threads);\n-    if (err != JVMTI_ERROR_NONE) {\n-        printf(\"Failed to get all threads (count): %s (%d)\\n\",\n-               TranslateError(err), err);\n-        result = STATUS_FAILED;\n-        return;\n-    }\n-\n-    sys_cnt = threadsCount - 1;\n-\n-    for (i = 0; i < threadsCount; i++) {\n-        if (!isThreadExpected(jvmti, threads[i])) {\n-            sys_cnt--;\n-        }\n-    }\n-\n-    if (printdump == JNI_TRUE) {\n-        printf(\" >>> number of system threads: %d\\n\", sys_cnt);\n-    }\n-}\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/GetAllThreads\/allthr001\/allthr001.cpp","additions":65,"deletions":58,"binary":false,"changes":123,"status":"modified"}]}