{"files":[{"patch":"@@ -1873,0 +1873,1 @@\n+  unsigned points[max_attempts];\n@@ -1889,1 +1890,0 @@\n-    unsigned random_points[max_attempts];\n@@ -1896,1 +1896,1 @@\n-      random_points[i] = (i * stepsize) + deviation;\n+      points[i] = (i * stepsize) + deviation;\n@@ -1905,1 +1905,1 @@\n-      shuffle_fisher_yates(random_points, num_attempts, frand);\n+      shuffle_fisher_yates(points, num_attempts, frand);\n@@ -1914,14 +1914,1 @@\n-      hemi_split(random_points, num_attempts);\n-    }\n-\n-    DEBUG_ONLY(print_points(\"after hemi split\", random_points, num_attempts);)\n-\n-    \/\/ Now reserve\n-    for (unsigned i = 0; result == nullptr && i < num_attempts; i++) {\n-      const unsigned candidate_offset = random_points[i];\n-      char* const candidate = lo_att + candidate_offset * alignment_adjusted;\n-      assert(candidate <= hi_att, \"Invalid offset %u (\" ARGSFMT \")\", candidate_offset, ARGSFMTARGS);\n-      result = os::pd_attempt_reserve_memory_at(candidate, bytes, false);\n-      if (!result) {\n-        log_trace(os, map)(\"Failed to attach at \" PTR_FORMAT, p2i(candidate));\n-      }\n+      hemi_split(points, num_attempts);\n@@ -1930,1 +1917,0 @@\n-\n@@ -1932,1 +1918,0 @@\n-\n@@ -1937,16 +1922,2 @@\n-    const size_t stepsize_bytes = stepsize * alignment_adjusted;\n-    char* candidate_lo = lo_att;\n-    char* candidate_hi = hi_att;\n-    bool lo = true;\n-    while (result == nullptr && candidate_lo <= candidate_hi) {\n-      char* candidate = lo ? candidate_lo : candidate_hi;\n-      result = os::pd_attempt_reserve_memory_at(candidate, bytes, false);\n-      if (result == nullptr) {\n-        log_trace(os, map)(\"Nope: \" PTR_FORMAT, p2i(candidate));\n-      }\n-      if (lo) {\n-        candidate_lo += stepsize_bytes;\n-      } else {\n-        candidate_hi -= stepsize_bytes;\n-      }\n-      lo = !lo;\n+    for (unsigned i = 0; i < num_attempts; i++) {\n+      points[i] = (i * stepsize);\n@@ -1954,0 +1925,2 @@\n+    hemi_split(points, num_attempts);\n+  }\n@@ -1955,1 +1928,1 @@\n-    int which = 0;\n+  DEBUG_ONLY(print_points(\"before reserve\", points, num_attempts);)\n@@ -1957,0 +1930,9 @@\n+  \/\/ Now reserve\n+  for (unsigned i = 0; result == nullptr && i < num_attempts; i++) {\n+    const unsigned candidate_offset = points[i];\n+    char* const candidate = lo_att + candidate_offset * alignment_adjusted;\n+    assert(candidate <= hi_att, \"Invalid offset %u (\" ARGSFMT \")\", candidate_offset, ARGSFMTARGS);\n+    result = os::pd_attempt_reserve_memory_at(candidate, bytes, false);\n+    if (!result) {\n+      log_trace(os, map)(\"Failed to attach at \" PTR_FORMAT, p2i(candidate));\n+    }\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":18,"deletions":36,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -33,0 +33,2 @@\n+\n+#define LOG_PLEASE\n@@ -158,2 +160,2 @@\n-    log_trace(os, map)(\"SpaceWithHole: [\" PTR_FORMAT \" ... [\" PTR_FORMAT \" ... \" PTR_FORMAT \") ... \" PTR_FORMAT \")\",\n-                       p2i(base()), p2i(hole()), p2i(hole_end()), p2i(end()));\n+    LOG_HERE(\"SpaceWithHole: [\" PTR_FORMAT \" ... [\" PTR_FORMAT \" ... \" PTR_FORMAT \") ... \" PTR_FORMAT \")\",\n+             p2i(base()), p2i(hole()), p2i(hole_end()), p2i(end()));\n","filename":"test\/hotspot\/gtest\/runtime\/test_os_reserve_between.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}