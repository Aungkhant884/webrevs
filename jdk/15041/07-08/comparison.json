{"files":[{"patch":"@@ -1332,5 +1332,5 @@\n-      \/\/ case we reserve whereever, but the start address needs to be encodable as narrow Klass encoding base\n-      \/\/ since the archived heap objects contain nKlass IDs precalculated toward the start of the shared Metaspace.\n-      \/\/ The \"cds_runtime\" parameter expresses that.\n-      constexpr bool cds_runtime = true;\n-      total_space_rs = Metaspace::reserve_address_space_for_compressed_classes(total_range_size, cds_runtime);\n+      \/\/ case we reserve whereever possible, but the start address needs to be encodable as narrow Klass\n+      \/\/ encoding base since the archived heap objects contain nKlass IDs precalculated toward the start\n+      \/\/ of the shared Metaspace. That prevents us from using zero-based encoding and therefore we won't\n+      \/\/ try allocating in low-address regions.\n+      total_space_rs = Metaspace::reserve_address_space_for_compressed_classes(total_range_size, false \/* try_in_low_address_ranges *\/);\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -585,5 +585,3 @@\n-\/\/ Reserve a range of memory that is to contain narrow Klass IDs. If \"cds_runtime\"\n-\/\/ is true, the memory must be located at an address that can be directly used as\n-\/\/ encoding base, otherwise the API has more leeway (e.g. optimizing reservation\n-\/\/ for zero-based encoding).\n-ReservedSpace Metaspace::reserve_address_space_for_compressed_classes(size_t size, bool cds_runtime) {\n+\/\/ Reserve a range of memory that is to contain narrow Klass IDs. If \"try_in_low_address_ranges\"\n+\/\/ is true, we will attempt to reserve memory suitable for zero-based encoding.\n+ReservedSpace Metaspace::reserve_address_space_for_compressed_classes(size_t size, bool try_in_low_address_ranges) {\n@@ -594,5 +592,0 @@\n-  \/\/ At CDS runtime, there is no need bothering with low-address reservation since we cannot set\n-  \/\/ the encoding base to zero anyway: the encoding base has to be the base of the mapped archive\n-  \/\/ (ultimately, the start address of the region we are reserving here).\n-  const bool try_in_low_address_ranges = !cds_runtime;\n-\n@@ -803,1 +796,1 @@\n-      rs = Metaspace::reserve_address_space_for_compressed_classes(size, false);\n+      rs = Metaspace::reserve_address_space_for_compressed_classes(size, true);\n","filename":"src\/hotspot\/share\/memory\/metaspace.cpp","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -77,4 +77,3 @@\n-  \/\/ Reserve a range of memory that is to contain narrow Klass IDs. If \"cds_runtime\" is true,\n-  \/\/ the memory must be located at an address that can be directly used as encoding base,\n-  \/\/ otherwise the API has more leeway (e.g. optimizing reservation for zero-based encoding).\n-  static ReservedSpace reserve_address_space_for_compressed_classes(size_t size, bool cds_runtime);\n+  \/\/ Reserve a range of memory that is to contain narrow Klass IDs. If \"try_in_low_address_ranges\"\n+  \/\/ is true, we will attempt to reserve memory suitable for zero-based encoding.\n+  static ReservedSpace reserve_address_space_for_compressed_classes(size_t size, bool try_in_low_address_ranges);\n","filename":"src\/hotspot\/share\/memory\/metaspace.hpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1858,1 +1858,1 @@\n-\/\/ Given an address range [min, max), attempts to reserve memory within this area, with the given alignmend.\n+\/\/ Given an address range [min, max), attempts to reserve memory within this area, with the given alignment.\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -443,1 +443,1 @@\n-  \/\/ Given an address range [min, max), attempts to reserve memory within this area, with the given alignmend.\n+  \/\/ Given an address range [min, max), attempts to reserve memory within this area, with the given alignment.\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}