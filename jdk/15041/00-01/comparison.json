{"files":[{"patch":"@@ -4220,9 +4220,8 @@\n-  \/\/ Determined by sysctl vm.mmap_min_addr. The usual value is 64*k. Kernel prevents\n-  \/\/ mappings below that point. Reason is to improve safety in case of accidental\n-  \/\/ NULL-pointer derefs.\n-  \/\/ Note that this value is rarely changed from its default, and in experiments we\n-  \/\/ found when increasing it (e.g. to 4G to mirror MacOS PAGEZERO protection) that\n-  \/\/ things break left and right (outside the JDK). So we spare the time and complexity\n-  \/\/ of retrieving vm.mmap_min_addr and instead return a sensible default that gives us\n-  \/\/ good protection against NULL references while still leaving enough of the lower\n-  \/\/ 4G addressable.\n+  \/\/ Determined by sysctl vm.mmap_min_addr. The usual value is 64 KB. Kernel prevents\n+  \/\/ mappings below that point. The reason for this forbidden zone is to improve safety\n+  \/\/ in case of NULL pointer dereferences.\n+  \/\/ This value is rarely changed from its default, and instead of retrieving the\n+  \/\/ parameter, we save a syscall and just return a sensible default. That default\n+  \/\/ is chosen to be somewhat larger than the typical 64 KB for increased protection\n+  \/\/ against NULL pointer dereferences: 16 MB is comfortably larger than any fixed-sized\n+  \/\/ structure we use but still affords us most of the valuable low-address space.\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -1332,1 +1332,0 @@\n-      const bool strict_base = true;\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -585,1 +585,1 @@\n-\/\/ Reserve a range of memory that is to contain narrow Klass IDs. If \"strict_base\"\n+\/\/ Reserve a range of memory that is to contain narrow Klass IDs. If \"cds_runtime\"\n@@ -589,1 +589,1 @@\n-ReservedSpace Metaspace::reserve_address_space_for_compressed_classes(size_t size, bool strict_base) {\n+ReservedSpace Metaspace::reserve_address_space_for_compressed_classes(size_t size, bool cds_runtime) {\n@@ -596,1 +596,1 @@\n-  const bool try_in_low_address_ranges = !strict_base;\n+  const bool try_in_low_address_ranges = !cds_runtime;\n@@ -614,8 +614,12 @@\n-    \/\/ an optimized start address that:\n-    \/\/ - only has bits set in the third quadrant, to use a single 16-bit move\n-    \/\/ - additionally, has the low LogKlassAlignmentInBytes of the third quadrant\n-    \/\/   set to 9, to be able to apply the right-shifted base with a single 16-bit\n-    \/\/   move.\n-    \/\/ That leaves 13 bits (32 GB - 256 TB). This gets cut down by many kernels to\n-    \/\/ 128 TB. Still, it leaves us with a value range of 12 bits for randomness.\n-    constexpr int lo_zero_bits = (sizeof(narrowKlass) * 8) + LogKlassAlignmentInBytes;\n+    \/\/ an optimized start address that is amenable to most JITs.\n+    \/\/ Architectures have differing opinions of what constitutes a \"good\" base,\n+    \/\/ and some (aarch64) have hard limitations. But many of them (aarch64, s390, ppc)\n+    \/\/ use 16-bit moves, if possible, to load the encoding base as immediates. Those\n+    \/\/ that don't (riscv, x64) could potentially benefit in the future from that as\n+    \/\/ well (e.g. by having to encode shorter immediates).\n+    \/\/ Therefore we try here for an address that, taken as encoding base, when\n+    \/\/ right-shifted by LogKlassAlignmentInBytes, has only 1s in the third 16-bit quadrant.\n+\n+    \/\/ Number of least significant bits that should be zero\n+    constexpr int lo_zero_bits = 32 + LogKlassAlignmentInBytes;\n+    \/\/ Number of most significant bits that should be zero\n","filename":"src\/hotspot\/share\/memory\/metaspace.cpp","additions":15,"deletions":11,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-  \/\/ Reserve a range of memory that is to contain narrow Klass IDs. If \"strict_base\" is true,\n+  \/\/ Reserve a range of memory that is to contain narrow Klass IDs. If \"cds_runtime\" is true,\n@@ -80,1 +80,1 @@\n-  static ReservedSpace reserve_address_space_for_compressed_classes(size_t size, bool strict_base);\n+  static ReservedSpace reserve_address_space_for_compressed_classes(size_t size, bool cds_runtime);\n","filename":"src\/hotspot\/share\/memory\/metaspace.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1787,0 +1787,24 @@\n+\/\/ Helper for os::attempt_reserve_memory_between\n+\/\/ Given an array of things, shuffle them (Fisher-Yates)\n+template <typename T>\n+static void shuffle_fisher_yates(T* arr, unsigned num, FastRandom& frand) {\n+  for (unsigned i = num - 1; i >= 1; i--) {\n+    unsigned j = frand.next() % i;\n+    swap(arr[i], arr[j]);\n+  }\n+}\n+\n+\/\/ Helper for os::attempt_reserve_memory_between\n+\/\/ Given an array of things, do a hemisphere split such that the resulting\n+\/\/ order is: [first, last, first + 1, last - 1, ...]\n+template <typename T>\n+static void hemi_split(T* arr, unsigned num) {\n+  T tmp[num];\n+  for (unsigned i = 0; i < num; i++) {\n+    tmp[i] = arr[i];\n+  }\n+  for (unsigned i = 0; i < num; i++) {\n+    arr[i] = is_even(i) ? tmp[i \/ 2] : tmp[num - (i \/ 2) - 1];\n+  }\n+}\n+\n@@ -1881,4 +1905,1 @@\n-      for (unsigned i = num_attempts - 1; i >= 1; i--) {\n-        unsigned j = frand.next() % i;\n-        swap(random_points[i], random_points[j]);\n-      }\n+      shuffle_fisher_yates(random_points, num_attempts, frand);\n@@ -1893,8 +1914,1 @@\n-      unsigned tmp[max_attempts];\n-      for (unsigned i = 0; i < num_attempts; i++) {\n-        tmp[i] = random_points[i];\n-      }\n-      for (unsigned i = 0; i < num_attempts; i++) {\n-        random_points[i] =\n-            is_even(i) ? tmp[i \/ 2] : tmp[num_attempts - (i \/ 2) - 1];\n-      }\n+      hemi_split(random_points, num_attempts);\n@@ -1906,1 +1920,0 @@\n-    const unsigned allowed_deviation = stepsize \/ 8;\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":26,"deletions":13,"binary":false,"changes":39,"status":"modified"}]}