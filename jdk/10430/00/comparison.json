{"files":[{"patch":"@@ -364,1 +364,2 @@\n-                           char jvmcfg[],  jint so_jvmcfg) {\n+                           char jvmcfg[],  jint so_jvmcfg,\n+                           char **orig_argv) {\n","filename":"src\/java.base\/macosx\/native\/libjli\/java_md_macosx.m","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+    char** argv = NULL;\n@@ -174,1 +175,2 @@\n-                   const_cpwildcard, const_javaw, 0);\n+                   const_cpwildcard, const_javaw, 0,\n+                   argv);\n","filename":"src\/java.base\/share\/native\/launcher\/main.c","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -89,9 +89,1 @@\n-    \/\/ No expansion for relaunch\n-    if (argsCount != 1) {\n-        relaunch = JNI_TRUE;\n-        stopExpansion = JNI_TRUE;\n-        argsCount = 1;\n-    } else {\n-        stopExpansion = disableArgFile;\n-    }\n-\n+    stopExpansion = disableArgFile;\n@@ -475,4 +467,0 @@\n-    if (relaunch) {\n-        return JNI_FALSE;\n-    }\n-\n","filename":"src\/java.base\/share\/native\/libjli\/args.c","additions":1,"deletions":13,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -237,1 +237,2 @@\n-        jint ergo                               \/* unused *\/\n+        jint ergo,                              \/* unused *\/\n+        char **orig_argv                        \/* original argv as it was passed to main *\/\n@@ -286,1 +287,2 @@\n-                               jvmcfg,  sizeof(jvmcfg));\n+                               jvmcfg,  sizeof(jvmcfg),\n+                               orig_argv);\n","filename":"src\/java.base\/share\/native\/libjli\/java.c","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -100,1 +100,2 @@\n-        jint     ergo_class                     \/* ergnomics policy *\/\n+        jint     ergo_class,                    \/* ergnomics policy *\/\n+        char** orig_argv                        \/* main args unprocessed *\/\n@@ -133,1 +134,2 @@\n-                                char *jvmcfg,  jint so_jvmcfg);\n+                                char *jvmcfg,  jint so_jvmcfg,\n+                                char **orig_argv);\n","filename":"src\/java.base\/share\/native\/libjli\/java.h","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -298,1 +298,2 @@\n-                           char jvmcfg[],  jint so_jvmcfg) {\n+                           char jvmcfg[],  jint so_jvmcfg,\n+                           char **orig_argv) {\n@@ -453,1 +454,1 @@\n-            execve(newexec, argv, newenvp);\n+            execve(newexec, orig_argv, newenvp);\n@@ -455,1 +456,1 @@\n-            execv(newexec, argv);\n+            execv(newexec, orig_argv);\n","filename":"src\/java.base\/unix\/native\/libjli\/java_md.c","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -161,1 +161,2 @@\n-                           char *jvmcfg,  jint so_jvmcfg) {\n+                           char *jvmcfg,  jint so_jvmcfg,\n+                           char **orig_argv) {\n@@ -163,0 +164,1 @@\n+    (void) orig_argv; \/* Not used under Windows *\/\n","filename":"src\/java.base\/windows\/native\/libjli\/java_md.c","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,1 +43,2 @@\n-                   0, 0, 0, 0);\n+                   0, 0, 0, 0,\n+                   argv);\n","filename":"test\/jdk\/tools\/launcher\/exeJliLaunchTest.c","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}