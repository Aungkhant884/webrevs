{"files":[{"patch":"@@ -1411,1 +1411,1 @@\n-        if (dir != null && FilePane.usesShellFolder(fc)) {\n+        if (dir != null) {\n@@ -1413,11 +1413,7 @@\n-                ShellFolder shellFolder = ShellFolder.getShellFolder(dir);\n-\n-                if (shellFolder.isLink()) {\n-                    File linkedTo = shellFolder.getLinkLocation();\n-\n-                    \/\/ If linkedTo is null we try to use dir\n-                    if (linkedTo != null) {\n-                        if (fc.isTraversable(linkedTo)) {\n-                            dir = linkedTo;\n-                        } else {\n-                            return;\n+                File linkedTo = null;\n+                if (FilePane.usesShellFolder(fc)) {\n+                    ShellFolder shellFolder = ShellFolder.getShellFolder(dir);\n+                    if (shellFolder.isLink()) {\n+                        linkedTo = shellFolder.getLinkLocation();\n+                        if (linkedTo == null) {\n+                            dir = shellFolder;\n@@ -1425,0 +1421,7 @@\n+                    }\n+                } else if ( fc.getFileSystemView().isLink(dir)){\n+                    linkedTo = fc.getFileSystemView().getLinkLocation(dir);\n+                }\n+                if (linkedTo != null) {\n+                    if (fc.isTraversable(linkedTo)) {\n+                        dir = linkedTo;\n@@ -1426,1 +1429,1 @@\n-                        dir = shellFolder;\n+                        return;\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/basic\/BasicFileChooserUI.java","additions":16,"deletions":13,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -0,0 +1,218 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.IOException;\n+import java.lang.reflect.InvocationTargetException;\n+\n+import javax.swing.JFrame;\n+import javax.swing.JFileChooser;\n+import javax.swing.SwingUtilities;\n+import javax.swing.Icon;\n+import javax.swing.WindowConstants;\n+import javax.swing.filechooser.FileSystemView;\n+\n+\/*\n+ * @test\n+ * @bug 8296198\n+ * @key headful\n+ * @requires (os.family == \"windows\")\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @summary Test to check if the Link to a folder is traversable with custom\n+ * FileSystemView is valid on ValueChanged property listener.\n+ * @run main\/manual CustomFSVLinkTest\n+ *\/\n+public class CustomFSVLinkTest {\n+    static JFrame frame;\n+    static JFileChooser jfc;\n+\n+    static PassFailJFrame passFailJFrame;\n+\n+    public static void main(String[] args) throws Exception {\n+        SwingUtilities.invokeAndWait(new Runnable() {\n+            public void run() {\n+                try {\n+                    initialize();\n+                } catch (InterruptedException | InvocationTargetException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            }\n+        });\n+        passFailJFrame.awaitAndCheck();\n+    }\n+\n+    static void initialize() throws InterruptedException, InvocationTargetException {\n+        \/\/Initialize the components\n+        final String INSTRUCTIONS = \"\"\"\n+                Instructions to Test:\n+                1. Create a link to a any valid folder.\n+                2. Navigate to the linked folder through the link created\n+                (From FileChooser).\n+                3. If \"link\" can't be traversed or if its absolute path is null\n+                   click FAIL. If \"link\" can be traversed then click PASS.\n+                \"\"\";\n+        frame = new JFrame(\"JFileChooser Link test\");\n+        jfc = new JFileChooser(new MyFileSystemView());\n+        passFailJFrame = new PassFailJFrame(\"Test Instructions\", INSTRUCTIONS, 5L, 8, 40);\n+\n+        PassFailJFrame.addTestWindow(frame);\n+        PassFailJFrame.positionTestWindow(frame, PassFailJFrame.Position.HORIZONTAL);\n+        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);\n+        jfc.setDialogType(JFileChooser.CUSTOM_DIALOG);\n+\n+        frame.add(jfc, BorderLayout.CENTER);\n+        frame.pack();\n+        frame.setVisible(true);\n+    }\n+\n+    private static class MyFileSystemView extends FileSystemView {\n+        FileSystemView delegate;\n+\n+        MyFileSystemView() {\n+            delegate = FileSystemView.getFileSystemView();\n+        }\n+\n+        @Override\n+        public File createNewFolder(File containingDir) throws IOException {\n+            return delegate.createNewFolder(containingDir);\n+        }\n+\n+        @Override\n+        public boolean isRoot(File f) {\n+            return delegate.isRoot(f);\n+        }\n+\n+        @Override\n+        public Boolean isTraversable(File f) {\n+            return delegate.isTraversable(f);\n+        }\n+\n+        @Override\n+        public String getSystemDisplayName(File f) {\n+            return delegate.getSystemDisplayName(f);\n+        }\n+\n+        @Override\n+        public String getSystemTypeDescription(File f) {\n+            return delegate.getSystemTypeDescription(f);\n+        }\n+\n+        @Override\n+        public Icon getSystemIcon(File f) {\n+            return delegate.getSystemIcon(f);\n+        }\n+\n+        @Override\n+        public boolean isParent(File folder, File file) {\n+            return delegate.isParent(folder, file);\n+        }\n+\n+        @Override\n+        public File getChild(File parent, String fileName) {\n+            return delegate.getChild(parent, fileName);\n+        }\n+\n+        @Override\n+        public boolean isFileSystem(File f) {\n+            return delegate.isFileSystem(f);\n+        }\n+\n+        @Override\n+        public boolean isHiddenFile(File f) {\n+            return delegate.isHiddenFile(f);\n+        }\n+\n+        @Override\n+        public boolean isFileSystemRoot(File dir) {\n+            return delegate.isFileSystemRoot(dir);\n+        }\n+\n+        @Override\n+        public boolean isDrive(File dir) {\n+            return delegate.isDrive(dir);\n+        }\n+\n+        @Override\n+        public boolean isFloppyDrive(File dir) {\n+            return delegate.isFloppyDrive(dir);\n+        }\n+\n+        @Override\n+        public boolean isComputerNode(File dir) {\n+            return delegate.isComputerNode(dir);\n+        }\n+\n+        @Override\n+        public File[] getRoots() {\n+            return delegate.getRoots();\n+        }\n+\n+        @Override\n+        public File getHomeDirectory() {\n+            return delegate.getHomeDirectory();\n+        }\n+\n+        @Override\n+        public File getDefaultDirectory() {\n+            return delegate.getDefaultDirectory();\n+        }\n+\n+        @Override\n+        public File createFileObject(File dir, String filename) {\n+            return delegate.createFileObject(dir, filename);\n+        }\n+\n+        @Override\n+        public File createFileObject(String path) {\n+            return delegate.createFileObject(path);\n+        }\n+\n+        @Override\n+        public File[] getFiles(File dir, boolean useFileHiding) {\n+            return delegate.getFiles(dir, useFileHiding);\n+        }\n+\n+        @Override\n+        public File getParentDirectory(File dir) {\n+            return delegate.getParentDirectory(dir);\n+        }\n+\n+        @Override\n+        public File[] getChooserComboBoxFiles() {\n+            return delegate.getChooserComboBoxFiles();\n+        }\n+\n+        @Override\n+        public boolean isLink(File file) {\n+            return delegate.isLink(file);\n+        }\n+\n+        @Override\n+        public File getLinkLocation(File file) throws FileNotFoundException {\n+            return delegate.getLinkLocation(file);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/FileSystemView\/CustomFSVLinkTest.java","additions":218,"deletions":0,"binary":false,"changes":218,"status":"added"}]}