{"files":[{"patch":"@@ -1299,0 +1299,4 @@\n+                if (prevOutput instanceof RedirectPipeImpl redir) {\n+                    \/\/ Wrap the fd so it can be closed\n+                    new Process.PipeInputStream(redir.getFd()).close();\n+                }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ProcessBuilder.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,140 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.File;\n+import java.io.FileDescriptor;\n+import java.io.FileInputStream;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.FilterInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.Reader;\n+import java.io.UncheckedIOException;\n+import java.io.Writer;\n+import java.lang.reflect.Field;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\/*\n+ * @test\n+ * @bug 8289643\n+ * @requires (os.family == \"linux\" & !vm.musl)\n+ * @summary file descriptor leak with ProcessBuilder.startPipeline\n+ * @run testng PipelineLeaksFD\n+ *\/\n+\n+@Test\n+public class PipelineLeaksFD {\n+\n+    @DataProvider\n+    public Object[][] builders() {\n+        return new Object[][]{\n+                {new ProcessBuilder(\"cat\")},\n+                {new ProcessBuilder(\"cat\"),\n+                        new ProcessBuilder(\"cat\")},\n+                {new ProcessBuilder(\"cat\"),\n+                        new ProcessBuilder(\"cat\"),\n+                        new ProcessBuilder(\"cat\"),\n+                        new ProcessBuilder(\"cat\"),\n+                        new ProcessBuilder(\"cat\")},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"builders\")\n+    void checkForLeaks(ProcessBuilder[] builders) throws IOException {\n+\n+        Set<PipeRecord> pipesBefore = myPipes();\n+        System.out.println(pipesBefore);\n+\n+        List<ProcessBuilder> processBuilders = Arrays.asList(builders);\n+        List<Process> processes = ProcessBuilder.startPipeline(processBuilders);\n+\n+        OutputStream out = processes.get(0).getOutputStream();\n+        out.write('a');\n+        out.close();\n+\n+        Process last = processes.get(processes.size() - 1);\n+        try (InputStream inputStream = last.getInputStream()) {\n+            byte[] bytes = inputStream.readAllBytes();\n+            Assert.assertEquals(bytes.length, 1, \"Bytes read\");\n+        }\n+\n+        processes.forEach(p -> waitForQuiet(p));\n+\n+        Set<PipeRecord> pipesAfter = myPipes();\n+        if (!pipesBefore.equals(pipesAfter)) {\n+            System.out.println(\"pipesBefore: \" + pipesBefore);\n+            System.out.println(\"pipesAfter: \" + pipesAfter);\n+            Assert.fail(\"More or fewer pipes\");\n+        }\n+    }\n+\n+    static void waitForQuiet(Process p) {\n+        try {\n+            int st = p.waitFor();\n+            if (st != 0) {\n+                System.out.println(\"non-zero exit status: \" + p);\n+            }\n+        } catch (InterruptedException ie) {\n+        }\n+    }\n+\n+    static Set<PipeRecord> myPipes() {\n+        Map<Path, Path> pipes = new HashMap<>();\n+        Path path = Path.of(\"\/proc\/\" + ProcessHandle.current().pid() + \"\/fd\");\n+        try {\n+            Stream<Path> s = Files.walk(path);\n+            return s.filter(Files::isSymbolicLink)\n+                    .map(p -> {\n+                        try {\n+                            return new PipeRecord(p, Files.readSymbolicLink(p));\n+                        } catch (IOException ioe) {\n+                        }\n+                        return new PipeRecord(p, null);\n+                    })\n+                    .filter(p1 -> p1.link().toString().startsWith(\"pipe:\"))\n+                    .collect(Collectors.toSet());\n+        } catch (IOException ex) {\n+            ex.printStackTrace();\n+        }\n+        return null;\n+    }\n+\n+    record PipeRecord(Path fd, Path link) {};\n+}\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/PipelineLeaksFD.java","additions":140,"deletions":0,"binary":false,"changes":140,"status":"added"}]}