{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,3 @@\n+import java.lang.reflect.Field;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -1299,0 +1302,5 @@\n+                if (prevOutput instanceof RedirectPipeImpl redir) {\n+                    debugFD(redir.getFd());\n+                    \/\/ Wrap the fd so it can be closed\n+                    new Process.PipeInputStream(redir.getFd()).close();\n+                }\n@@ -1316,0 +1324,20 @@\n+\n+    \/**\n+     * For debugging, print the symbolic link of the fd\n+     * @param fd a FileDescriptor\n+     *\/\n+    static void debugFD(FileDescriptor fileDesc) {\n+        if (System.getProperty(\"DEBUG\") != null) {\n+            try {\n+                Field fFd = FileDescriptor.class.getDeclaredField(\"fd\");\n+                fFd.setAccessible(true);\n+                int fd = fFd.getInt(fileDesc);\n+                Path p = Path.of(\"\/proc\/\" + ProcessHandle.current().pid() + \"\/fd\/\" + fd);\n+                Path link = Files.readSymbolicLink(p);\n+                System.out.println(\"PROC: \" + p + \": \" + link);\n+            } catch (Exception ex) {\n+                ex.printStackTrace();\n+                return;\n+            }\n+        }\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ProcessBuilder.java","additions":29,"deletions":1,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -0,0 +1,138 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+\/*\n+ * @test\n+ * @bug 8289643\n+ * @requires (os.family == \"linux\" & !vm.musl)\n+ * @summary file descriptor leak with ProcessBuilder.startPipeline\n+ * @run testng\/othervm -DDEBUG PipelineLeaksFD\n+ *\/\n+\n+@Test\n+public class PipelineLeaksFD {\n+    @DataProvider\n+    public Object[][] builders() {\n+        return new Object[][]{\n+                {List.of(new ProcessBuilder(\"cat\"))},\n+                {List.of(new ProcessBuilder(\"cat\"),\n+                        new ProcessBuilder(\"cat\"))},\n+                {List.of(new ProcessBuilder(\"cat\"),\n+                        new ProcessBuilder(\"cat\"),\n+                        new ProcessBuilder(\"cat\"),\n+                        new ProcessBuilder(\"cat\"),\n+                        new ProcessBuilder(\"cat\"))},\n+        };\n+    }\n+\n+    @Test(dataProvider = \"builders\")\n+    void checkForLeaks(List<ProcessBuilder> builders) throws IOException {\n+\n+        Set<PipeRecord> pipesBefore = myPipes();\n+        if (pipesBefore.size() < 3) {\n+            System.out.println(pipesBefore);\n+            Assert.fail(\"There should be at least 3 pipes before, (0, 1, 2)\");\n+        }\n+\n+        List<Process> processes = ProcessBuilder.startPipeline(builders);\n+\n+        OutputStream out = processes.get(0).getOutputStream();\n+        out.write('a');\n+        out.close();\n+\n+        Process last = processes.get(processes.size() - 1);\n+        try (InputStream inputStream = last.getInputStream()) {\n+            byte[] bytes = inputStream.readAllBytes();\n+            Assert.assertEquals(bytes.length, 1, \"Bytes read\");\n+        }\n+\n+        processes.forEach(p -> waitForQuiet(p));\n+\n+        Set<PipeRecord> pipesAfter = myPipes();\n+        printPipes(pipesAfter, \"DEBUG: All Pipes After\");\n+        if (!pipesBefore.equals(pipesAfter)) {\n+            Set<PipeRecord> missing = new HashSet<>(pipesBefore);\n+            missing.removeAll(pipesAfter);\n+            printPipes(missing, \"Missing from pipesAfter\");\n+            Set<PipeRecord> extra = new HashSet<>(pipesAfter);\n+            extra.removeAll(pipesBefore);\n+            printPipes(extra, \"Extra pipes in pipesAfter\");\n+            Assert.fail(\"More or fewer pipes than expected\");\n+        }\n+    }\n+\n+    static void printPipes(Set<PipeRecord> pipes, String label) {\n+        System.out.printf(\"%s: [%d]%n\", label, pipes.size());\n+        pipes.forEach(r -> System.out.printf(\"%20s: %20s%n\", r.fd(), r.link()));\n+    }\n+\n+    static void waitForQuiet(Process p) {\n+        try {\n+            int st = p.waitFor();\n+            if (st != 0) {\n+                System.out.println(\"non-zero exit status: \" + p);\n+            }\n+        } catch (InterruptedException ie) {\n+        }\n+    }\n+\n+    \/**\n+     * Collect a Set of pairs of \/proc fd paths and the symbol links that are pipes.\n+     * @return A set of PipeRecords, possibly empty\n+     * @throws IOException if reading the directory entries of \"\/proc\/<pid>\/fd\/*\" fails\n+     *\/\n+    static Set<PipeRecord> myPipes() throws IOException {\n+        Path path = Path.of(\"\/proc\/\" + ProcessHandle.current().pid() + \"\/fd\");\n+        Set<PipeRecord> pipes = new HashSet<>();\n+        try (DirectoryStream<Path> s = Files.newDirectoryStream(path)) {\n+            s.forEach(p -> {\n+                try {\n+                     if (Files.isSymbolicLink(p)) {\n+                         Path link = Files.readSymbolicLink(p);\n+                         if (link.toString().startsWith(\"pipe:\")) {\n+                             pipes.add(new PipeRecord(p, link));\n+                         }\n+                     }\n+                 } catch (IOException ioe) {\n+                 }\n+            });\n+        }\n+        return pipes;\n+    }\n+\n+    record PipeRecord(Path fd, Path link) { };\n+}\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/PipelineLeaksFD.java","additions":138,"deletions":0,"binary":false,"changes":138,"status":"added"}]}