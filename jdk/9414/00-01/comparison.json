{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ProcessBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,6 +24,4 @@\n-import java.io.File;\n-import java.io.FileDescriptor;\n-import java.io.FileInputStream;\n-import java.io.FileReader;\n-import java.io.FileWriter;\n-import java.io.FilterInputStream;\n+import org.testng.Assert;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n@@ -33,4 +31,0 @@\n-import java.io.Reader;\n-import java.io.UncheckedIOException;\n-import java.io.Writer;\n-import java.lang.reflect.Field;\n@@ -39,4 +33,1 @@\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.HashMap;\n-import java.util.LinkedList;\n+import java.util.HashSet;\n@@ -44,2 +35,0 @@\n-import java.util.Map;\n-import java.util.Objects;\n@@ -50,4 +39,0 @@\n-import org.testng.Assert;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n-\n@@ -59,1 +44,1 @@\n- * @run testng PipelineLeaksFD\n+ * @run testng\/othervm PipelineLeaksFD\n@@ -64,1 +49,0 @@\n-\n@@ -68,4 +52,4 @@\n-                {new ProcessBuilder(\"cat\")},\n-                {new ProcessBuilder(\"cat\"),\n-                        new ProcessBuilder(\"cat\")},\n-                {new ProcessBuilder(\"cat\"),\n+                {List.of(new ProcessBuilder(\"cat\"))},\n+                {List.of(new ProcessBuilder(\"cat\"),\n+                        new ProcessBuilder(\"cat\"))},\n+                {List.of(new ProcessBuilder(\"cat\"),\n@@ -75,1 +59,1 @@\n-                        new ProcessBuilder(\"cat\")},\n+                        new ProcessBuilder(\"cat\"))},\n@@ -80,1 +64,1 @@\n-    void checkForLeaks(ProcessBuilder[] builders) throws IOException {\n+    void checkForLeaks(List<ProcessBuilder> builders) throws IOException {\n@@ -83,1 +67,4 @@\n-        System.out.println(pipesBefore);\n+        if (pipesBefore.size() < 3) {\n+            System.out.println(pipesBefore);\n+            Assert.fail(\"There should be at least 3 pipes before, (0, 1, 2)\");\n+        }\n@@ -85,2 +72,1 @@\n-        List<ProcessBuilder> processBuilders = Arrays.asList(builders);\n-        List<Process> processes = ProcessBuilder.startPipeline(processBuilders);\n+        List<Process> processes = ProcessBuilder.startPipeline(builders);\n@@ -102,3 +88,7 @@\n-            System.out.println(\"pipesBefore: \" + pipesBefore);\n-            System.out.println(\"pipesAfter: \" + pipesAfter);\n-            Assert.fail(\"More or fewer pipes\");\n+            Set<PipeRecord> missing = new HashSet<>(pipesBefore);\n+            missing.removeAll(pipesAfter);\n+            printPipes(missing, \"Missing from pipesAfter\");\n+            Set<PipeRecord> extra = new HashSet<>(pipesAfter);\n+            extra.removeAll(pipesBefore);\n+            printPipes(extra, \"Extra pipes in pipesAfter\");\n+            Assert.fail(\"More or fewer pipes than expected\");\n@@ -108,0 +98,5 @@\n+    static void printPipes(Set<PipeRecord> pipes, String label) {\n+        System.out.printf(\"%s: [%d]%n\", label, pipes.size());\n+        pipes.forEach(r -> System.out.printf(\"%20s: %20s%n\", r.fd(), r.link()));\n+    }\n+\n@@ -118,2 +113,6 @@\n-    static Set<PipeRecord> myPipes() {\n-        Map<Path, Path> pipes = new HashMap<>();\n+    \/**\n+     * Collect a Set of pairs of \/proc fd paths and the symbol links that are pipes.\n+     * @return A set of PipeRecords, possibly empty\n+     * @throws IOException if reading the directory entries of \"\/proc\/<pid>\/fd\/*\" fails\n+     *\/\n+    static Set<PipeRecord> myPipes() throws IOException {\n@@ -121,16 +120,12 @@\n-        try {\n-            Stream<Path> s = Files.walk(path);\n-            return s.filter(Files::isSymbolicLink)\n-                    .map(p -> {\n-                        try {\n-                            return new PipeRecord(p, Files.readSymbolicLink(p));\n-                        } catch (IOException ioe) {\n-                        }\n-                        return new PipeRecord(p, null);\n-                    })\n-                    .filter(p1 -> p1.link().toString().startsWith(\"pipe:\"))\n-                    .collect(Collectors.toSet());\n-        } catch (IOException ex) {\n-            ex.printStackTrace();\n-        }\n-        return null;\n+        Stream<Path> s = Files.walk(path);\n+        return s.filter(Files::isSymbolicLink)\n+                .map(p -> {\n+                    try {\n+                        return new PipeRecord(p, Files.readSymbolicLink(p));\n+                    } catch (IOException ioe) {\n+                    }\n+                    return new PipeRecord(p, null);\n+                })\n+                .filter(p1 -> p1.link().toString().startsWith(\"pipe:\"))\n+                .collect(Collectors.toSet());\n+\n@@ -139,1 +134,1 @@\n-    record PipeRecord(Path fd, Path link) {};\n+    record PipeRecord(Path fd, Path link) { };\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/PipelineLeaksFD.java","additions":48,"deletions":53,"binary":false,"changes":101,"status":"modified"}]}