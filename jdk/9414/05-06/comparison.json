{"files":[{"patch":"@@ -33,3 +33,0 @@\n-import java.lang.reflect.Field;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n@@ -1303,1 +1300,0 @@\n-                    debugFD(redir.getFd());\n@@ -1324,20 +1320,0 @@\n-\n-    \/**\n-     * For debugging, print the symbolic link of the fd\n-     * @param fd a FileDescriptor\n-     *\/\n-    static void debugFD(FileDescriptor fileDesc) {\n-        if (System.getProperty(\"DEBUG\") != null) {\n-            try {\n-                Field fFd = FileDescriptor.class.getDeclaredField(\"fd\");\n-                fFd.setAccessible(true);\n-                int fd = fFd.getInt(fileDesc);\n-                Path p = Path.of(\"\/proc\/\" + ProcessHandle.current().pid() + \"\/fd\/\" + fd);\n-                Path link = Files.readSymbolicLink(p);\n-                System.out.println(\"PROC: \" + p + \": \" + link);\n-            } catch (Exception ex) {\n-                ex.printStackTrace();\n-                return;\n-            }\n-        }\n-    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ProcessBuilder.java","additions":0,"deletions":24,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.io.File;\n@@ -31,1 +32,0 @@\n-import java.nio.file.DirectoryStream;\n@@ -78,1 +78,2 @@\n-        try (InputStream inputStream = last.getInputStream()) {\n+        try (InputStream inputStream = last.getInputStream();\n+             InputStream errorStream = last.getErrorStream()) {\n@@ -80,1 +81,3 @@\n-            Assert.assertEquals(bytes.length, 1, \"Bytes read\");\n+            Assert.assertEquals(bytes.length, 1, \"stdout bytes read\");\n+            byte[] errBytes = errorStream.readAllBytes();\n+            Assert.assertEquals(errBytes.length, 0, \"stderr bytes read\");\n@@ -100,1 +103,1 @@\n-        pipes.forEach(r -> System.out.printf(\"%20s: %20s%n\", r.fd(), r.link()));\n+        pipes.forEach(r -> System.out.printf(\"%-20s: %s%n\", r.fd(), r.link()));\n@@ -118,1 +121,1 @@\n-    static Set<PipeRecord> myPipes() throws IOException {\n+    static Set<PipeRecord> myPipes() {\n@@ -121,2 +124,3 @@\n-        try (DirectoryStream<Path> s = Files.newDirectoryStream(path)) {\n-            s.forEach(p -> {\n+        File[] files = path.toFile().listFiles(f -> Files.isSymbolicLink(f.toPath()));\n+        if (files != null) {\n+            for (File file : files) {\n@@ -124,9 +128,7 @@\n-                     if (Files.isSymbolicLink(p)) {\n-                         Path link = Files.readSymbolicLink(p);\n-                         if (link.toString().startsWith(\"pipe:\")) {\n-                             pipes.add(new PipeRecord(p, link));\n-                         }\n-                     }\n-                 } catch (IOException ioe) {\n-                 }\n-            });\n+                    Path link = Files.readSymbolicLink(file.toPath());\n+                    if (link.toString().startsWith(\"pipe:\")) {\n+                        pipes.add(new PipeRecord(file.toPath(), link));\n+                    }\n+                } catch (IOException ioe) {\n+                }\n+            }\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/PipelineLeaksFD.java","additions":18,"deletions":16,"binary":false,"changes":34,"status":"modified"}]}