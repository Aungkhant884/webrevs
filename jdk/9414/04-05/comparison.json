{"files":[{"patch":"@@ -33,0 +33,3 @@\n+import java.lang.reflect.Field;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -1300,0 +1303,1 @@\n+                    debugFD(redir.getFd());\n@@ -1320,0 +1324,20 @@\n+\n+    \/**\n+     * For debugging, print the symbolic link of the fd\n+     * @param fd a FileDescriptor\n+     *\/\n+    static void debugFD(FileDescriptor fileDesc) {\n+        if (System.getProperty(\"DEBUG\") != null) {\n+            try {\n+                Field fFd = FileDescriptor.class.getDeclaredField(\"fd\");\n+                fFd.setAccessible(true);\n+                int fd = fFd.getInt(fileDesc);\n+                Path p = Path.of(\"\/proc\/\" + ProcessHandle.current().pid() + \"\/fd\/\" + fd);\n+                Path link = Files.readSymbolicLink(p);\n+                System.out.println(\"PROC: \" + p + \": \" + link);\n+            } catch (Exception ex) {\n+                ex.printStackTrace();\n+                return;\n+            }\n+        }\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ProcessBuilder.java","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n- * @run testng\/othervm PipelineLeaksFD\n+ * @run testng\/othervm -DDEBUG PipelineLeaksFD\n@@ -86,0 +86,1 @@\n+        printPipes(pipesAfter, \"DEBUG: All Pipes After\");\n","filename":"test\/jdk\/java\/lang\/ProcessBuilder\/PipelineLeaksFD.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}