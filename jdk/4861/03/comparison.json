{"files":[{"patch":"@@ -56,0 +56,1 @@\n+    private static native String[] getCupsDefaultPrinters();\n@@ -80,0 +81,1 @@\n+    private static String domainSocketPathname = null;\n@@ -99,0 +101,7 @@\n+           \/\/ Is this a local domain socket pathname?\n+           if (cupsServer != null && cupsServer.startsWith(\"\/\")) {\n+               if (isSandboxedApp()) {\n+                   domainSocketPathname = cupsServer;\n+               }\n+               cupsServer = \"localhost\";\n+           }\n@@ -384,0 +393,14 @@\n+\n+        if (getDomainSocketPathname() != null) {\n+            String[] printerNames = getCupsDefaultPrinters();\n+            if (printerNames != null && printerNames.length > 0) {\n+                String[] printerURIs = new String[printerNames.length];\n+                for (int i=0; i< printerNames.length; i++) {\n+                    printerURIs[i] = String.format(\"ipp:\/\/%s:%d\/printers\/%s\",\n+                            getServer(), getPort(), printerNames[i]);\n+                }\n+                return printerURIs;\n+            }\n+            return null;\n+        }\n+\n@@ -467,0 +490,17 @@\n+    \/**\n+     * Returns CUPS domain socket pathname.\n+     *\/\n+    private static String getDomainSocketPathname() {\n+        return domainSocketPathname;\n+    }\n+\n+    private static boolean isSandboxedApp() {\n+        if (PrintServiceLookupProvider.isMac()) {\n+            return java.security.AccessController\n+                    .doPrivileged((java.security.PrivilegedAction<Boolean>) () ->\n+                            System.getenv(\"APP_SANDBOX_CONTAINER_ID\") != null);\n+        }\n+        return false;\n+    }\n+\n+\n@@ -473,3 +513,9 @@\n-            IPPPrintService.debug_println(debugPrefix+\"CUPS server \"+getServer()+\n-                                          \" port \"+getPort());\n-            return canConnect(getServer(), getPort());\n+            String server = getDomainSocketPathname() != null\n+                    ? getDomainSocketPathname()\n+                    : getServer();\n+            IPPPrintService.debug_println(debugPrefix+\"CUPS server \"+server+\n+                                          \" port \"+getPort()+\n+                                          (getDomainSocketPathname() != null\n+                                                  ? \" use domain socket pathname\"\n+                                                  : \"\"));\n+            return canConnect(server, getPort());\n","filename":"src\/java.desktop\/unix\/classes\/sun\/print\/CUPSPrinter.java","additions":49,"deletions":3,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -175,6 +175,1 @@\n-        \/\/ Is this a local domain socket?\n-        if (strncmp(server, \"\/\", 1) == 0) {\n-            cServer = JNU_NewStringPlatform(env, \"localhost\");\n-        } else {\n-            cServer = JNU_NewStringPlatform(env, server);\n-        }\n+        cServer = JNU_NewStringPlatform(env, server);\n@@ -222,0 +217,54 @@\n+\/*\n+ * Returns list of default local printers\n+ *\/\n+JNIEXPORT jobjectArray JNICALL\n+Java_sun_print_CUPSPrinter_getCupsDefaultPrinters(JNIEnv *env,\n+                                                        jobject printObj)\n+{\n+    cups_dest_t *dests;\n+    int i, j, num_dests;\n+    jstring utf_str;\n+    jclass cls;\n+    jobjectArray nameArray = NULL;\n+\n+    cls = (*env)->FindClass(env, \"java\/lang\/String\");\n+    CHECK_NULL_RETURN(cls, NULL);\n+\n+    num_dests = j2d_cupsGetDests(&dests);\n+\n+    if (dests == NULL) {\n+        return NULL;\n+    }\n+\n+    nameArray = (*env)->NewObjectArray(env, num_dests, cls, NULL);\n+    if (nameArray == NULL) {\n+        j2d_cupsFreeDests(num_dests, dests);\n+        DPRINTF(\"CUPSfuncs::bad alloc new array\\n\", \"\")\n+        (*env)->ExceptionClear(env);\n+        JNU_ThrowOutOfMemoryError(env, \"OutOfMemoryError\");\n+        return NULL;\n+    }\n+\n+    for (i = 0; i < num_dests; i++) {\n+            utf_str = JNU_NewStringPlatform(env, dests[i].name);\n+            if (utf_str == NULL) {\n+                for (j = i - 1; j >= 0; j--) {\n+                    utf_str = (*env)->GetObjectArrayElement(env, nameArray, j);\n+                    (*env)->SetObjectArrayElement(env, nameArray, j, NULL);\n+                    (*env)->DeleteLocalRef(env, utf_str);\n+                    utf_str = NULL;\n+                }\n+                j2d_cupsFreeDests(num_dests, dests);\n+                (*env)->DeleteLocalRef(env, nameArray);\n+                DPRINTF(\"CUPSfuncs::bad alloc new string ->name\\n\", \"\")\n+                JNU_ThrowOutOfMemoryError(env, \"OutOfMemoryError\");\n+                return NULL;\n+            }\n+            (*env)->SetObjectArrayElement(env, nameArray, i, utf_str);\n+            (*env)->DeleteLocalRef(env, utf_str);\n+    }\n+\n+    j2d_cupsFreeDests(num_dests, dests);\n+    return nameArray;\n+}\n+\n","filename":"src\/java.desktop\/unix\/native\/common\/awt\/CUPSfuncs.c","additions":55,"deletions":6,"binary":false,"changes":61,"status":"modified"}]}