{"files":[{"patch":"@@ -4044,3 +4044,1 @@\n-  index = new AddPNode(base, base, index);\n-  _igvn.register_new_node_with_optimizer(index);\n-  Node* from = new AddPNode(base, index, offset);\n+  Node* from = new AddPNode(base, base, index);\n@@ -4048,0 +4046,9 @@\n+  \/\/ For normal array fills, C2 uses two AddP nodes for array element\n+  \/\/ addressing. But for array fills with Unsafe call, there's only one\n+  \/\/ AddP node adding an absolute offset, so we do a NULL check here.\n+  assert(offset != NULL || C->has_unsafe_access(),\n+         \"Only array fills with unsafe have no extra offset\");\n+  if (offset != NULL) {\n+    from = new AddPNode(base, from, offset);\n+    _igvn.register_new_node_with_optimizer(from);\n+  }\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2022, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8283408\n+ * @summary Fill a byte array with Java Unsafe API\n+ * @run main\/othervm -XX:+OptimizeFill compiler.loopopts.FillArrayWithUnsafe\n+ *\/\n+\n+package compiler.loopopts;\n+\n+import java.lang.reflect.Field;\n+\n+import sun.misc.Unsafe;\n+\n+public class FillArrayWithUnsafe {\n+\n+    private static Unsafe unsafe;\n+\n+    public static void main(String[] args) throws Exception {\n+        Class klass = Unsafe.class;\n+        Field field = klass.getDeclaredField(\"theUnsafe\");\n+        field.setAccessible(true);\n+        unsafe = (Unsafe) field.get(null);\n+\n+        byte[] buffer;\n+        \/\/ Make sure method newByteArray is compiled by C2\n+        for (int i = 0; i < 50000; i++) {\n+            buffer = newByteArray(100, (byte) 0x80);\n+        }\n+    }\n+\n+    public static byte[] newByteArray(int size, byte val) {\n+        byte[] arr = new byte[size];\n+        int offset = unsafe.arrayBaseOffset(byte[].class);\n+        for (int i = offset; i < offset + size; i++) {\n+             unsafe.putByte(arr, i, val);\n+        }\n+        return arr;\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/FillArrayWithUnsafe.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"}]}