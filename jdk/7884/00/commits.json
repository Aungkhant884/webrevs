[{"commit":{"message":"8283408: Fix a C2 crash when filling arrays with unsafe\n\nWe recently found a segmentation fault issue in C2 compiler with some\ncode that uses Java Unsafe API to initialize an array in a loop. It can\nbe reproduced by below code snippet compiled by C2 on AArch64. It's also\nreproducible on x86 with an additional VM option \"-XX:+OptimizeFill\".\n\n  byte[] arr = new byte[size];\n  int offset = unsafe.arrayBaseOffset(byte[].class);\n  for (int i = offset; i < offset + size; i++) {\n    unsafe.putByte(arr, i, val);\n  }\n\nThis issue is caused by a NULL pointer in a C2 loop optimization phase\ncalled intrinsify_fill. In this phase, array filling loop patterns are\nrecognized and replaced by some intrinsics. But filling operations with\nUnsafe API call are not handled very well. From C2 mid-end's point of\nview, a difference between an Unsafe call and a normal array access like\n`arr[i] = val` is element addressing. For normal array accesses, C2 uses\ntwo AddP nodes for computing an element's address - one for adding array\nheader size and another for adding the element's relative offset from\nthe header. But Unsafe calls may have only one AddP node for adding an\nabsolute offset of an element from the array base. In current code, the\nintrinsify_fill phase creates an AddP node but with NULL input for above\ncase and eventually causes a segmentation fault.\n\nIn this patch, we add a check to allow one AddP node in array filling\npatterns to be optional. After this fix, the case above can be optimized\nby intrinsify_fill as well. We know that the Unsafe call is rarely used\nin Java application code and developers should use it at their own risk.\nBut we still propose this fix because C2 crashes even Unsafe is used in\na correct way.\n\nJtreg hotspot::hotspot_all_no_apps, jdk::tier1~3 and langtools::tier1\nare tested and no issue is found. We also create a new jtreg case within\nthis patch."},"files":[{"filename":"src\/hotspot\/share\/opto\/loopTransform.cpp"},{"filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/FillArrayWithUnsafe.java"}],"sha":"040da679f7c8983731b1e52966a5efef15800891"}]