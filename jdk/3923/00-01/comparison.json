{"files":[{"patch":"@@ -28,1 +28,3 @@\n- *          read the request body and sends back a reply with no content\n+ *          read the request body and sends back a reply with no content, or when\n+ *          the client closes its outputstream while the server tries to drains\n+ *          its content.\n@@ -76,1 +78,3 @@\n-    public static void main(String[] args) throws Exception {\n+    @Test\n+    public void testSendResponse() throws Exception {\n+        System.out.println(\"testSendResponse()\");\n@@ -106,1 +110,1 @@\n-            runRawSocketHttpClient(loopback, server.getAddress().getPort());\n+            runRawSocketHttpClient(loopback, server.getAddress().getPort(), -1);\n@@ -115,1 +119,48 @@\n-    static void runRawSocketHttpClient(InetAddress address, int port)\n+    @Test\n+    public void testCloseOutputStream() throws Exception {\n+        System.out.println(\"testCloseOutputStream()\");\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        HttpServer server = HttpServer.create(new InetSocketAddress(loopback, 0), 0);\n+        ExecutorService executor = Executors.newCachedThreadPool(new ServerThreadFactory());\n+        server.setExecutor(executor);\n+        try {\n+            server.createContext(someContext, new HttpHandler() {\n+                @Override\n+                public void handle(HttpExchange msg) throws IOException {\n+                    System.err.println(\"Handling request: \" + msg.getRequestURI());\n+                    byte[] reply = \"Here is my reply!\".getBytes(UTF_8);\n+                    try {\n+                        BufferedReader r = new BufferedReader(new InputStreamReader(msg.getRequestBody()));\n+                        r.read();\n+                        try {\n+                            msg.sendResponseHeaders(msgCode, reply.length == 0 ? -1 : reply.length);\n+                            msg.getResponseBody().write(reply);\n+                            \/\/r.close();\n+                            \/\/ msg.close();\n+                            msg.getResponseBody().close();\n+                            \/\/ give time to the WriteFinished event to get executed\n+                            \/\/ before the input stream gets drained...\n+                            \/\/ this should trigger the assertion too\n+                            Thread.sleep(50);\n+                        } catch(IOException | InterruptedException ie) {\n+                            ie.printStackTrace();\n+                        }\n+                    } finally {\n+                        System.err.println(\"Request handled: \" + msg.getRequestURI());\n+                    }\n+                }\n+            });\n+            server.start();\n+            System.out.println(\"Server started at port \"\n+                    + server.getAddress().getPort());\n+\n+            runRawSocketHttpClient(loopback, server.getAddress().getPort(), 64 * 1024 + 16);\n+        } finally {\n+            System.out.println(\"shutting server down\");\n+            executor.shutdown();\n+            server.stop(0);\n+        }\n+        System.out.println(\"Server finished.\");\n+    }\n+\n+    static void runRawSocketHttpClient(InetAddress address, int port, int contentLength)\n@@ -128,0 +179,2 @@\n+            if (contentLength <= 0)\n+                contentLength = body.getBytes(UTF_8).length;\n@@ -135,1 +188,1 @@\n-            writer.print(\"Content-Length: \" + body.getBytes(UTF_8).length + CRLF);\n+            writer.print(\"Content-Length: \" + contentLength + CRLF);\n@@ -156,3 +209,10 @@\n-            \/\/ give time to the server to fail before closing the\n-            \/\/ connection.\n-            Thread.sleep(1000);\n+            \/\/ give time to the server to try & drain its input stream\n+            Thread.sleep(500);\n+            \/\/ closes the client outputstream while the server is draining\n+            \/\/ it\n+            if (writer != null) {\n+                writer.close();\n+            }\n+            \/\/ give time to the server to trigger its assertion\n+            \/\/ error before closing the connection\n+            Thread.sleep(500);\n@@ -165,3 +225,0 @@\n-            if (writer != null) {\n-                writer.close();\n-            }\n@@ -179,4 +236,0 @@\n-    @Test\n-    public void test() throws Exception {\n-        main(new String[0]);\n-    }\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/InputNotRead.java","additions":68,"deletions":15,"binary":false,"changes":83,"status":"modified"}]}