{"files":[{"patch":"@@ -28,0 +28,1 @@\n+#include \"metaprogramming\/enableIf.hpp\"\n@@ -31,1 +32,2 @@\n-\/\/ unsigned count_trailing_zeros(uintx x)\n+\/\/ unsigned count_trailing_zeros(T x)\n+\n@@ -36,0 +38,2 @@\n+\/\/ We implement and support variants for 8, 16, 32 and 64 bit integral types.\n+\n@@ -43,4 +47,6 @@\n-inline unsigned count_trailing_zeros(uintx x) {\n-  STATIC_ASSERT(sizeof(unsigned long) == sizeof(uintx));\n-  assert(x != 0, \"precondition\");\n-  return __builtin_ctzl(x);\n+inline unsigned count_trailing_zeros_32(uint32_t x) {\n+  return __builtin_ctz(x);\n+}\n+\n+inline unsigned count_trailing_zeros_64(uint64_t x) {\n+  return __builtin_ctzll(x);\n@@ -62,2 +68,7 @@\n-inline unsigned count_trailing_zeros(uintx x) {\n-  assert(x != 0, \"precondition\");\n+inline unsigned count_trailing_zeros_32(uint32_t x) {\n+  unsigned long index;\n+  _BitScanForward(&index, x);\n+  return index;\n+}\n+\n+inline unsigned count_trailing_zeros_64(uint64_t x) {\n@@ -68,1 +79,6 @@\n-  _BitScanForward(&index, x);\n+  if (_BitScanForward(&index, (uint32_t)x) == 0) {\n+    \/\/ no bit found? If so, try the upper dword. Otherwise index already contains the result\n+    _BitScanForward(&index, x >> 32);\n+    assert(index > 0, \"invariant since x != 0\");\n+    index += 32;\n+  }\n@@ -80,5 +96,1 @@\n-inline unsigned count_trailing_zeros(uintx x) {\n-  assert(x != 0, \"precondition\");\n-#ifdef _LP64\n-  return __cnttz8(x);\n-#else\n+inline unsigned count_trailing_zeros_32(uint32_t x) {\n@@ -86,1 +98,4 @@\n-#endif\n+}\n+\n+inline unsigned count_trailing_zeros_64(uint64_t x) {\n+  return __cnttz8(x);\n@@ -97,0 +112,11 @@\n+template<typename T,\n+         ENABLE_IF(std::is_integral<T>::value),\n+         ENABLE_IF(sizeof(T) <= sizeof(uint64_t))>\n+inline unsigned count_trailing_zeros(T x) {\n+  assert(x != 0, \"precondition\");\n+  return (sizeof(x) <= sizeof(uint32_t)) ?\n+         count_trailing_zeros_32(x) :\n+         count_trailing_zeros_64(x);\n+}\n+\n+\n","filename":"src\/hotspot\/share\/utilities\/count_trailing_zeros.hpp","additions":40,"deletions":14,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -30,1 +30,2 @@\n-TEST(count_trailing_zeros, one_or_two_set_bits) {\n+\n+template <typename T> static void test_one_or_two_set_bits() {\n@@ -32,1 +33,2 @@\n-  for (uintx ix = 1; ix != 0; ix <<= 1, ++i) {\n+  unsigned max = sizeof(T) * BitsPerByte;\n+  for (T ix = T(1); i < max; ix <<= 1, ++i) {\n@@ -34,2 +36,2 @@\n-    for (uintx jx = 1; jx != 0; jx <<= 1, ++j) {\n-      uintx value = ix | jx;\n+    for (T jx = T(1); j < max; jx <<= 1, ++j) {\n+      T value = ix | jx;\n@@ -42,2 +44,13 @@\n-TEST(count_trailing_zeros, high_zeros_low_ones) {\n-  uintx value = ~(uintx)0;\n+TEST(count_trailing_zeros, one_or_two_set_bits) {\n+  test_one_or_two_set_bits<int8_t>();\n+  test_one_or_two_set_bits<int16_t>();\n+  test_one_or_two_set_bits<int32_t>();\n+  test_one_or_two_set_bits<int64_t>();\n+  test_one_or_two_set_bits<uint8_t>();\n+  test_one_or_two_set_bits<uint16_t>();\n+  test_one_or_two_set_bits<uint32_t>();\n+  test_one_or_two_set_bits<uint64_t>();\n+}\n+\n+template <typename T> static void test_high_zeros_low_ones() {\n+  T value = std::numeric_limits<T>::max();\n@@ -50,1 +63,12 @@\n-TEST(count_trailing_zeros, high_ones_low_zeros) {\n+TEST(count_trailing_zeros, high_zeros_low_ones) {\n+  test_high_zeros_low_ones<int8_t>();\n+  test_high_zeros_low_ones<int16_t>();\n+  test_high_zeros_low_ones<int32_t>();\n+  test_high_zeros_low_ones<int64_t>();\n+  test_high_zeros_low_ones<uint8_t>();\n+  test_high_zeros_low_ones<uint16_t>();\n+  test_high_zeros_low_ones<uint32_t>();\n+  test_high_zeros_low_ones<uint64_t>();\n+}\n+\n+template <typename T> static void test_high_ones_low_zeros() {\n@@ -52,2 +76,3 @@\n-  uintx value = ~(uintx)0;\n-  for ( ; value != 0; value <<= 1, ++i) {\n+  T value = ~T(0);\n+  unsigned max = sizeof(T) * BitsPerByte;\n+  for ( ; i < max; value <<= 1, ++i) {\n@@ -58,0 +83,11 @@\n+\n+TEST(count_trailing_zeros, high_ones_low_zeros) {\n+  test_high_ones_low_zeros<int8_t>();\n+  test_high_ones_low_zeros<int16_t>();\n+  test_high_ones_low_zeros<int32_t>();\n+  test_high_ones_low_zeros<int64_t>();\n+  test_high_ones_low_zeros<uint8_t>();\n+  test_high_ones_low_zeros<uint16_t>();\n+  test_high_ones_low_zeros<uint32_t>();\n+  test_high_ones_low_zeros<uint64_t>();\n+}\n","filename":"test\/hotspot\/gtest\/utilities\/test_count_trailing_zeros.cpp","additions":45,"deletions":9,"binary":false,"changes":54,"status":"modified"}]}