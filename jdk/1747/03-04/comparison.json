{"files":[{"patch":"@@ -28,1 +28,1 @@\n-#include \"metaprogramming\/conditional.hpp\"\n+#include \"metaprogramming\/enableIf.hpp\"\n@@ -39,1 +39,0 @@\n-template <typename T, size_t n> struct CountTrailingZerosImpl;\n@@ -43,6 +42,8 @@\n-template <typename T> unsigned count_trailing_zeros(T v) {\n-  assert(v != 0, \"precondition\");\n-\n-  \/\/ Widen subword types to uint32_t\n-  typedef typename Conditional<(sizeof(T) < sizeof(uint32_t)), uint32_t, T>::type P;\n-  return CountTrailingZerosImpl<T, sizeof(P)>::doit(static_cast<P>(v));\n+template<typename T,\n+         ENABLE_IF(std::is_integral<T>::value),\n+         ENABLE_IF(sizeof(T) <= sizeof(uint64_t))>\n+inline unsigned count_trailing_zeros(T x) {\n+  assert(x != 0, \"precondition\");\n+  return (sizeof(x) <= sizeof(uint32_t)) ?\n+         count_trailing_zeros_32(x) :\n+         count_trailing_zeros_64(x);\n@@ -56,5 +57,3 @@\n-template <typename T> struct CountTrailingZerosImpl<T, 4> {\n-  static unsigned doit(T v) {\n-    return __builtin_ctz((uint32_t)v);\n-  }\n-};\n+inline unsigned count_trailing_zeros_32(uint32_t x) {\n+  return __builtin_ctz(x);\n+}\n@@ -62,5 +61,3 @@\n-template <typename T> struct CountTrailingZerosImpl<T, 8> {\n-  static unsigned doit(T v) {\n-    return __builtin_ctzll((uint64_t)v);\n-  }\n-};\n+inline unsigned count_trailing_zeros_64(uint64_t x) {\n+  return __builtin_ctzll(x);\n+}\n@@ -81,7 +78,5 @@\n-template <typename T> struct CountTrailingZerosImpl<T, 4> {\n-  static unsigned doit(T v) {\n-    unsigned long index;\n-    _BitScanForward(&index, v);\n-    return index;\n-  }\n-};\n+inline unsigned count_trailing_zeros_32(uint32_t x) {\n+  unsigned long index;\n+  _BitScanForward(&index, x);\n+  return index;\n+}\n@@ -89,3 +84,2 @@\n-template <typename T> struct CountTrailingZerosImpl<T, 8> {\n-  static unsigned doit(T v) {\n-    unsigned long index;\n+inline unsigned count_trailing_zeros_64(uint64_t x) {\n+  unsigned long index;\n@@ -93,1 +87,1 @@\n-    _BitScanForward64(&index, v);\n+  _BitScanForward64(&index, x);\n@@ -95,8 +89,5 @@\n-    if (_BitScanForward(&index, (uint32_t)v) == 0) {\n-      \/\/ no bit found? If so, try the upper dword. Otherwise index already contains the result\n-      _BitScanForward(&index, ((uint64_t)v) >> 32);\n-      assert(index > 0, \"invariant since v != 0\");\n-      index += 32;\n-    }\n-#endif\n-    return index;\n+  if (_BitScanForward(&index, (uint32_t)x) == 0) {\n+    \/\/ no bit found? If so, try the upper dword. Otherwise index already contains the result\n+    _BitScanForward(&index, x >> 32);\n+    assert(index > 0, \"invariant since x != 0\");\n+    index += 32;\n@@ -104,1 +95,3 @@\n-};\n+#endif\n+  return index;\n+}\n@@ -113,5 +106,3 @@\n-template <typename T> struct CountTrailingZerosImpl<T, 4> {\n-  static unsigned doit(T v) {\n-    return __cnttz4((uint32_t)v);\n-  }\n-};\n+inline unsigned count_trailing_zeros_32(uint32_t x) {\n+  return __cnttz4(x);\n+}\n@@ -119,5 +110,3 @@\n-template <typename T> struct CountTrailingZerosImpl<T, 8> {\n-  static unsigned doit(T v) {\n-    return __cnttz8((uint64_t)v);\n-  }\n-};\n+inline unsigned count_trailing_zeros_64(uint64_t x) {\n+  return __cnttz8(x);\n+}\n","filename":"src\/hotspot\/share\/utilities\/count_trailing_zeros.hpp","additions":37,"deletions":48,"binary":false,"changes":85,"status":"modified"}]}