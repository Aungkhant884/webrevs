{"files":[{"patch":"@@ -280,2 +280,15 @@\n-            Bound *newBound = new Bound(new_lower, bound->lower_instr(), new_upper, bound->upper_instr());\n-            _bound = newBound;\n+            \/\/ The following deduction is wrong, because (lower - const + const) and\n+            \/\/ (upper -  const + const) may overflow\/underflow:\n+            \/\/\n+            \/\/   lower - const <= x <= upper - const\n+            \/\/   lower <= x + const <= upper\n+            \/\/ e.g.\n+            \/\/    -3 <= x     <= min_jint - 3\n+            \/\/    0  <= x + 3 <= min_jint    (wrong)\n+            if (bound->upper_instr() != nullptr || bound->lower_instr() != nullptr) {\n+              \/\/ may overflow\n+              _bound = new Bound();\n+            } else {\n+              Bound *newBound = new Bound(new_lower, bound->lower_instr(), new_upper, bound->upper_instr());\n+              _bound = newBound;\n+            }\n","filename":"src\/hotspot\/share\/c1\/c1_RangeCheckElimination.cpp","additions":15,"deletions":2,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2023, Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8311010\n+ * @summary C1 array access causes SIGSEGV due to lack of range check\n+ * @requires vm.compiler1.enabled\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:TieredStopAtLevel=1 -XX:+TieredCompilation -XX:+RangeCheckElimination\n+ *                   -XX:CompileCommand=compileonly,*RangeCheckOverflow.test\n+ *                   compiler.c1.RangeCheckOverflow\n+ *\/\n+\n+package compiler.c1;\n+\n+public class RangeCheckOverflow {\n+    static int b = 0;\n+\n+    private static void test() {\n+        int[] a = { 11 } ;\n+        for (int i = -1; i <= 0; i++) {\n+            for (int j = -3; j <= 2147483646 * i - 3; j++) {\n+                b += a[j + 3];\n+            }\n+        }\n+    }\n+    public static void main(String... args) {\n+        try {\n+            test();\n+        } catch(ArrayIndexOutOfBoundsException e) {\n+            System.out.println(\"Expected\");\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c1\/RangeCheckOverflow.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"}]}