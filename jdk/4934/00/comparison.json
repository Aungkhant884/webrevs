{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,38 +66,0 @@\n-    \/**\n-     * Return the X509CRLs matching this selector. The selector must be\n-     * an X509CRLSelector with certificateChecking set.\n-     *\/\n-    public static Collection<X509CRL> getCRLs(X509CRLSelector selector,\n-            boolean signFlag, PublicKey prevKey, String provider,\n-            List<CertStore> certStores, boolean[] reasonsMask,\n-            Set<TrustAnchor> trustAnchors, Date validity, String variant)\n-            throws CertStoreException\n-    {\n-        return getCRLs(selector, signFlag, prevKey, null, provider, certStores,\n-                reasonsMask, trustAnchors, validity, variant, null);\n-    }\n-    \/**\n-     * Return the X509CRLs matching this selector. The selector must be\n-     * an X509CRLSelector with certificateChecking set.\n-     *\/\n-    \/\/ Called by com.sun.deploy.security.RevocationChecker\n-    public static Collection<X509CRL> getCRLs(X509CRLSelector selector,\n-                                              boolean signFlag,\n-                                              PublicKey prevKey,\n-                                              String provider,\n-                                              List<CertStore> certStores,\n-                                              boolean[] reasonsMask,\n-                                              Set<TrustAnchor> trustAnchors,\n-                                              Date validity)\n-        throws CertStoreException\n-    {\n-        if (trustAnchors.isEmpty()) {\n-            throw new CertStoreException(\n-                \"at least one TrustAnchor must be specified\");\n-        }\n-        TrustAnchor anchor = trustAnchors.iterator().next();\n-        return getCRLs(selector, signFlag, prevKey, null, provider, certStores,\n-                reasonsMask, trustAnchors, validity,\n-                Validator.VAR_PLUGIN_CODE_SIGNING, anchor);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/DistributionPointFetcher.java","additions":1,"deletions":39,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-import java.util.Collections;\n@@ -101,61 +100,0 @@\n-\n-    \/**\n-     * Obtains the revocation status of a certificate using OCSP.\n-     *\n-     * @param cert the certificate to be checked\n-     * @param issuerCert the issuer certificate\n-     * @param responderURI the URI of the OCSP responder\n-     * @param responderCert the OCSP responder's certificate\n-     * @param date the time the validity of the OCSP responder's certificate\n-     *    should be checked against. If null, the current time is used.\n-     * @return the RevocationStatus\n-     * @throws IOException if there is an exception connecting to or\n-     *    communicating with the OCSP responder\n-     * @throws CertPathValidatorException if an exception occurs while\n-     *    encoding the OCSP Request or validating the OCSP Response\n-     *\/\n-\n-    \/\/ Called by com.sun.deploy.security.TrustDecider\n-    public static RevocationStatus check(X509Certificate cert,\n-                                         X509Certificate issuerCert,\n-                                         URI responderURI,\n-                                         X509Certificate responderCert,\n-                                         Date date)\n-        throws IOException, CertPathValidatorException\n-    {\n-        return check(cert, issuerCert, responderURI, responderCert, date,\n-                     Collections.<Extension>emptyList(),\n-                     Validator.VAR_PLUGIN_CODE_SIGNING);\n-    }\n-\n-\n-    public static RevocationStatus check(X509Certificate cert,\n-            X509Certificate issuerCert, URI responderURI,\n-            X509Certificate responderCert, Date date, List<Extension> extensions,\n-            String variant)\n-        throws IOException, CertPathValidatorException\n-    {\n-        return check(cert, responderURI, null, issuerCert, responderCert, date,\n-                extensions, variant);\n-    }\n-\n-    public static RevocationStatus check(X509Certificate cert,\n-            URI responderURI, TrustAnchor anchor, X509Certificate issuerCert,\n-            X509Certificate responderCert, Date date,\n-            List<Extension> extensions, String variant)\n-            throws IOException, CertPathValidatorException\n-    {\n-        CertId certId;\n-        try {\n-            X509CertImpl certImpl = X509CertImpl.toImpl(cert);\n-            certId = new CertId(issuerCert, certImpl.getSerialNumberObject());\n-        } catch (CertificateException | IOException e) {\n-            throw new CertPathValidatorException\n-                (\"Exception while encoding OCSPRequest\", e);\n-        }\n-        OCSPResponse ocspResponse = check(Collections.singletonList(certId),\n-                responderURI, new OCSPResponse.IssuerInfo(anchor, issuerCert),\n-                responderCert, date, extensions, variant);\n-        return (RevocationStatus) ocspResponse.getSingleResponse(certId);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/OCSP.java","additions":0,"deletions":62,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -162,2 +162,1 @@\n-                    (variant.equals(Validator.VAR_CODE_SIGNING) ||\n-                     variant.equals(Validator.VAR_PLUGIN_CODE_SIGNING))) {\n+                    variant.equals(Validator.VAR_CODE_SIGNING)) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/PKIX.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -808,1 +808,0 @@\n-                            variant.equals(Validator.VAR_PLUGIN_CODE_SIGNING) ||\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/DisabledAlgorithmConstraints.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,4 +56,0 @@\n- * <li>Plugin code signing. WebStart and Plugin require their own variant\n- * which is equivalent to VAR_CODE_SIGNING with additional checks for\n- * compatibility\/special cases. See also PKIXValidator.\n- *\n@@ -159,2 +155,0 @@\n-        } else if (variant.equals(Validator.VAR_PLUGIN_CODE_SIGNING)) {\n-            checkCodeSigning(chain[0], exts);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/validator\/EndEntityChecker.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import java.util.*;\n-\n@@ -32,1 +30,1 @@\n-\n+import java.util.*;\n@@ -84,2 +82,0 @@\n-    private final boolean plugin;\n-\n@@ -107,1 +103,0 @@\n-        plugin = variant.equals(VAR_PLUGIN_CODE_SIGNING);\n@@ -129,2 +124,0 @@\n-        plugin = variant.equals(VAR_PLUGIN_CODE_SIGNING);\n-\n@@ -273,2 +266,1 @@\n-        if (trustedSubjects.containsKey(issuer) &&\n-                isSignatureValid(trustedSubjects.get(issuer), last)) {\n+        if (trustedSubjects.containsKey(issuer)) {\n@@ -278,26 +270,0 @@\n-        \/\/ don't fallback to builder if called from plugin\/webstart\n-        if (plugin) {\n-            \/\/ Validate chain even if no trust anchor is found. This\n-            \/\/ allows plugin\/webstart to make sure the chain is\n-            \/\/ otherwise valid\n-            if (chain.length > 1) {\n-                X509Certificate[] newChain =\n-                    new X509Certificate[chain.length-1];\n-                System.arraycopy(chain, 0, newChain, 0, newChain.length);\n-\n-                \/\/ temporarily set last cert as sole trust anchor\n-                try {\n-                    pkixParameters.setTrustAnchors\n-                        (Collections.singleton(new TrustAnchor\n-                            (chain[chain.length-1], null)));\n-                } catch (InvalidAlgorithmParameterException iape) {\n-                    \/\/ should never occur, but ...\n-                    throw new CertificateException(iape);\n-                }\n-                doValidate(newChain, pkixParameters);\n-            }\n-            \/\/ if the rest of the chain is valid, throw exception\n-            \/\/ indicating no trust anchor was found\n-            throw new ValidatorException\n-                (ValidatorException.T_NO_TRUST_ANCHOR);\n-        }\n@@ -305,1 +271,0 @@\n-\n@@ -309,16 +274,0 @@\n-    private boolean isSignatureValid(List<PublicKey> keys,\n-            X509Certificate sub) {\n-        if (plugin) {\n-            for (PublicKey key: keys) {\n-                try {\n-                    sub.verify(key);\n-                    return true;\n-                } catch (Exception ex) {\n-                    continue;\n-                }\n-            }\n-            return false;\n-        }\n-        return true; \/\/ only check if PLUGIN is set\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/validator\/PKIXValidator.java","additions":3,"deletions":54,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,1 +67,0 @@\n- * <li>VAR_PLUGIN_CODE_SIGNING (Plugin\/WebStart code signing specific checks).\n@@ -139,7 +138,0 @@\n-    \/**\n-     * Constant for a Code Signing variant of a validator for use by\n-     * the J2SE Plugin\/WebStart code.\n-     * @see #getInstance\n-     *\/\n-    public static final String VAR_PLUGIN_CODE_SIGNING = \"plugin code signing\";\n-\n@@ -178,0 +170,3 @@\n+        if (variant == null) {\n+            throw new NullPointerException(\"variant cannot be null\");\n+        }\n@@ -194,0 +189,3 @@\n+        if (variant == null) {\n+            throw new NullPointerException(\"variant cannot be null\");\n+        }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/validator\/Validator.java","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"}]}