{"files":[{"patch":"@@ -1116,1 +1116,1 @@\n-  G1FullCollector collector(this, explicit_gc, do_clear_all_soft_refs, do_maximum_compaction);\n+  G1FullGCMark gc_mark;\n@@ -1118,0 +1118,1 @@\n+  G1FullCollector collector(this, explicit_gc, do_clear_all_soft_refs, do_maximum_compaction);\n@@ -3045,4 +3046,0 @@\n-  \/\/ Verification may use the gang workers, so they must be set up before.\n-  \/\/ Individual parallel phases may override this.\n-  set_young_collection_default_active_worker_threads();\n-\n@@ -3058,2 +3055,0 @@\n-    \/\/ Young GC internal pause timing\n-    G1YoungGCNotifyPauseMark npm;\n@@ -3066,1 +3061,2 @@\n-\n+    \/\/ Create the heap printer before internal pause timing to have\n+    \/\/ heap information printed as last part of detailed GC log.\n@@ -3068,0 +3064,6 @@\n+    \/\/ Young GC internal pause timing\n+    G1YoungGCNotifyPauseMark npm;\n+\n+    \/\/ Verification may use the gang workers, so they must be set up before.\n+    \/\/ Individual parallel phases may override this.\n+    set_young_collection_default_active_worker_threads();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+#include \"gc\/shared\/gcId.hpp\"\n+#include \"gc\/shared\/gcTraceTime.hpp\"\n@@ -58,0 +60,9 @@\n+\/\/ Full GC Mark that holds GC id and CPU time trace. Needs to be separate\n+\/\/ from the G1FullCollector and G1FullGCScope to get consistent logging.\n+class G1FullGCMark : StackObj {\n+  GCIdMark       _gc_id;\n+  GCTraceCPUTime _cpu_time;\n+public:\n+  G1FullGCMark() : _gc_id(), _cpu_time() { }\n+};\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.hpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n-    _gc_id(),\n@@ -50,1 +49,0 @@\n-    _cpu_time(),\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCScope.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,2 +31,0 @@\n-#include \"gc\/shared\/gcId.hpp\"\n-#include \"gc\/shared\/gcTraceTime.hpp\"\n@@ -54,1 +52,0 @@\n-  GCIdMark                _gc_id;\n@@ -59,1 +56,0 @@\n-  GCTraceCPUTime          _cpu_time;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCScope.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -76,1 +76,0 @@\n-        \/\/   Humongous Regions: f->g\n@@ -82,0 +81,1 @@\n+        \/\/   Humongous Regions: f->g\n@@ -90,3 +90,3 @@\n-            int total = Integer.parseInt(getSumValue(lines[i + 3]));\n-            int candidate = Integer.parseInt(getSumValue(lines[i + 4]));\n-            int reclaimed = Integer.parseInt(getSumValue(lines[i + 5]));\n+            int total = Integer.parseInt(getSumValue(lines[i + 2]));\n+            int candidate = Integer.parseInt(getSumValue(lines[i + 3]));\n+            int reclaimed = Integer.parseInt(getSumValue(lines[i + 4]));\n@@ -94,2 +94,2 @@\n-            int before = Integer.parseInt(lines[i].substring(0, 1));\n-            int after = Integer.parseInt(lines[i].substring(3, 4));\n+            int before = Integer.parseInt(lines[i + 5].substring(0, 1));\n+            int after = Integer.parseInt(lines[i + 5].substring(3, 4));\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestEagerReclaimHumongousRegionsLog.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}