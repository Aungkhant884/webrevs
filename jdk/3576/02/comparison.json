{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,4 +26,5 @@\n- * @bug 8167108\n- * @summary Stress test java.lang.Thread.suspend() at thread exit.\n- * @run main\/othervm -Xlog:thread+smr=debug SuspendAtExit\n- * @run main\/othervm -Xlog:thread+smr=debug -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=1 -XX:+HandshakeALot SuspendAtExit\n+ * @bug 8167108 8265240\n+ * @summary Stress test SuspendThread at thread exit.\n+ * @requires vm.jvmti\n+ * @run main\/othervm\/native -agentlib:SuspendAtExit SuspendAtExit\n+ * @run main\/othervm\/native -agentlib:SuspendAtExit -XX:+UnlockDiagnosticVMOptions -XX:GuaranteedSafepointInterval=1 -XX:+HandshakeALot SuspendAtExit\n@@ -35,2 +36,3 @@\n-    final static int N_THREADS = 32;\n-    final static int N_LATE_CALLS = 10000;\n+    private final static String AGENT_LIB = \"SuspendAtExit\";\n+    private final static int DEF_TIME_MAX = 30;  \/\/ default max # secs to test\n+    private final static int JVMTI_ERROR_THREAD_NOT_ALIVE = 15;\n@@ -41,0 +43,5 @@\n+    private static void log(String msg) { System.out.println(msg); }\n+\n+    native static int resumeThread(SuspendAtExit thr);\n+    native static int suspendThread(SuspendAtExit thr);\n+\n@@ -46,2 +53,1 @@\n-            \/\/ Wait for main thread to interrupt us so we\n-            \/\/ can race to exit.\n+            \/\/ Wait for main thread to tell us to race to the exit.\n@@ -50,1 +56,1 @@\n-            \/\/ ignore because we expect one\n+            throw new RuntimeException(\"Unexpected: \" + e);\n@@ -55,1 +61,8 @@\n-        SuspendAtExit threads[] = new SuspendAtExit[N_THREADS];\n+        try {\n+            System.loadLibrary(AGENT_LIB);\n+            log(\"Loaded library: \" + AGENT_LIB);\n+        } catch (UnsatisfiedLinkError ule) {\n+            log(\"Failed to load library: \" + AGENT_LIB);\n+            log(\"java.library.path: \" + System.getProperty(\"java.library.path\"));\n+            throw ule;\n+        }\n@@ -57,4 +70,4 @@\n-        for (int i = 0; i < N_THREADS; i++ ) {\n-            threads[i] = new SuspendAtExit();\n-            int late_count = 1;\n-            threads[i].start();\n+        int timeMax = 0;\n+        if (args.length == 0) {\n+            timeMax = DEF_TIME_MAX;\n+        } else {\n@@ -62,2 +75,8 @@\n-                \/\/ Wait for the worker thread to get going.\n-                threads[i].startSyncObj.await();\n+                timeMax = Integer.parseUnsignedInt(args[0]);\n+            } catch (NumberFormatException nfe) {\n+                System.err.println(\"'\" + args[0] + \"': invalid timeMax value.\");\n+                    usage();\n+            }\n+        }\n+\n+        System.out.println(\"About to execute for \" + timeMax + \" seconds.\");\n@@ -65,6 +84,4 @@\n-                \/\/ This interrupt() call will break the worker out\n-                \/\/ of the exitSyncObj.await() call and the suspend()\n-                \/\/ calls will come in during thread exit.\n-                threads[i].interrupt();\n-                for (; late_count <= N_LATE_CALLS; late_count++) {\n-                    threads[i].suspend();\n+        long count = 0;\n+        long start_time = System.currentTimeMillis();\n+        while (System.currentTimeMillis() < start_time + (timeMax * 1000)) {\n+            count++;\n@@ -72,2 +89,14 @@\n-                    if (!threads[i].isAlive()) {\n-                        \/\/ Done with Thread.suspend() calls since\n+            int retCode;\n+            SuspendAtExit thread = new SuspendAtExit();\n+            thread.start();\n+            try {\n+                \/\/ Wait for the worker thread to get going.\n+                thread.startSyncObj.await();\n+                \/\/ Tell the worker thread to race to the exit and the\n+                \/\/ SuspendThread() calls will come in during thread exit.\n+                thread.exitSyncObj.countDown();\n+                while (true) {\n+                    retCode = suspendThread(thread);\n+\n+                    if (retCode == JVMTI_ERROR_THREAD_NOT_ALIVE) {\n+                        \/\/ Done with SuspendThread() calls since\n@@ -76,0 +105,19 @@\n+                    } else if (retCode != 0) {\n+                        throw new RuntimeException(\"thread \" + thread.getName()\n+                                                   + \": suspendThread() \" +\n+                                                   \"retCode=\" + retCode +\n+                                                   \": unexpected value.\");\n+                    }\n+\n+                    if (!thread.isAlive()) {\n+                        throw new RuntimeException(\"thread \" + thread.getName()\n+                                                   + \": is not alive \" +\n+                                                   \"after successful \" +\n+                                                   \"suspendThread().\");\n+                    }\n+                    retCode = resumeThread(thread);\n+                    if (retCode != 0) {\n+                        throw new RuntimeException(\"thread \" + thread.getName()\n+                                                   + \": resumeThread() \" +\n+                                                   \"retCode=\" + retCode +\n+                                                   \": unexpected value.\");\n@@ -77,1 +125,0 @@\n-                    threads[i].resume();\n@@ -80,1 +127,1 @@\n-                throw new Error(\"Unexpected: \" + e);\n+                throw new RuntimeException(\"Unexpected: \" + e);\n@@ -83,8 +130,0 @@\n-            System.out.println(\"INFO: thread #\" + i + \": made \" + late_count +\n-                               \" late calls to java.lang.Thread.suspend()\");\n-            System.out.println(\"INFO: thread #\" + i + \": N_LATE_CALLS==\" +\n-                               N_LATE_CALLS + \" value is \" +\n-                               ((late_count >= N_LATE_CALLS) ? \"NOT \" : \"\") +\n-                               \"large enough to cause a Thread.suspend() \" +\n-                               \"call after thread exit.\");\n-\n@@ -92,1 +131,1 @@\n-                threads[i].join();\n+                thread.join();\n@@ -94,1 +133,1 @@\n-                throw new Error(\"Unexpected: \" + e);\n+                throw new RuntimeException(\"Unexpected: \" + e);\n@@ -96,5 +135,13 @@\n-            threads[i].suspend();\n-            threads[i].resume();\n-            if (threads[i].isAlive()) {\n-                throw new Error(\"Expected !Thread.isAlive() after thread #\" +\n-                                i + \" has been join()'ed\");\n+            retCode = suspendThread(thread);\n+            if (retCode != JVMTI_ERROR_THREAD_NOT_ALIVE) {\n+                throw new RuntimeException(\"thread \" + thread.getName() +\n+                                           \": suspendThread() \" +\n+                                           \"retCode=\" + retCode +\n+                                           \": unexpected value.\");\n+            }\n+            retCode = resumeThread(thread);\n+            if (retCode != JVMTI_ERROR_THREAD_NOT_ALIVE) {\n+                throw new RuntimeException(\"thread \" + thread.getName() +\n+                                           \": suspendThread() \" +\n+                                           \"retCode=\" + retCode +\n+                                           \": unexpected value.\");\n@@ -104,0 +151,3 @@\n+        System.out.println(\"Executed \" + count + \" loops in \" + timeMax +\n+                           \" seconds.\");\n+\n@@ -110,0 +160,9 @@\n+\n+    public static void usage() {\n+        System.err.println(\"Usage: \" + AGENT_LIB + \" [time_max]\");\n+        System.err.println(\"where:\");\n+        System.err.println(\"    time_max ::= max looping time in seconds\");\n+        System.err.println(\"                 (default is \" + DEF_TIME_MAX +\n+                           \" seconds)\");\n+        System.exit(1);\n+    }\n","filename":"test\/hotspot\/jtreg\/runtime\/Thread\/SuspendAtExit.java","additions":101,"deletions":42,"binary":false,"changes":143,"status":"modified"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <string.h>\n+#include \"jvmti.h\"\n+\n+extern \"C\" {\n+\n+static jvmtiEnv* jvmti = NULL;\n+\n+#define LOG(...) \\\n+  do { \\\n+    printf(__VA_ARGS__); \\\n+    printf(\"\\n\"); \\\n+    fflush(stdout); \\\n+  } while (0)\n+\n+JNIEXPORT jint JNICALL\n+Java_SuspendAtExit_suspendThread(JNIEnv *jni, jclass cls, jthread thr) {\n+  return jvmti->SuspendThread(thr);\n+}\n+\n+JNIEXPORT jint JNICALL\n+Java_SuspendAtExit_resumeThread(JNIEnv *jni, jclass cls, jthread thr) {\n+  return jvmti->ResumeThread(thr);\n+}\n+\n+\n+\/** Agent library initialization. *\/\n+\n+JNIEXPORT jint JNICALL\n+Agent_OnLoad(JavaVM *jvm, char *options, void *reserved) {\n+  LOG(\"\\nAgent_OnLoad started\");\n+\n+  \/\/ create JVMTI environment\n+  if (jvm->GetEnv((void **) (&jvmti), JVMTI_VERSION) != JNI_OK) {\n+    return JNI_ERR;\n+  }\n+\n+  \/\/ add specific capabilities for suspending thread\n+  jvmtiCapabilities suspendCaps;\n+  memset(&suspendCaps, 0, sizeof(suspendCaps));\n+  suspendCaps.can_suspend = 1;\n+\n+  jvmtiError err = jvmti->AddCapabilities(&suspendCaps);\n+  if (err != JVMTI_ERROR_NONE) {\n+    return JNI_ERR;\n+  }\n+  LOG(\"Agent_OnLoad finished\\n\");\n+  return JNI_OK;\n+}\n+\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/Thread\/libSuspendAtExit.cpp","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"}]}