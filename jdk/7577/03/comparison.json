{"files":[{"patch":"@@ -0,0 +1,198 @@\n+\/*\n+ * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.GridLayout;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.stream.Collectors;\n+import javax.swing.InputVerifier;\n+import javax.swing.JComponent;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JTextField;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UIManager.LookAndFeelInfo;\n+import javax.swing.UnsupportedLookAndFeelException;\n+\n+import static javax.swing.UIManager.getInstalledLookAndFeels;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4532513\n+ * @summary Verifies that DefaultCaret doesn't requests focus in mouseClick and mousePressed\n+ *          causing the associated input verifier to fire twice.\n+ * @run main DefaultCaretRequestsFocusTest\n+ *\/\n+public class DefaultCaretRequestsFocusTest {\n+\n+    private static JTextField jTextField1;\n+    private static JTextField jTextField2;\n+    private static JTextField jTextField3;\n+    private static JFrame frame;\n+    private static Robot robot;\n+    private static volatile int shouldYieldFocusCount;\n+\n+    public static void main(String[] args) throws Exception {\n+        runTest();\n+    }\n+\n+    public static void runTest() throws Exception {\n+        robot = new Robot();\n+        robot.setAutoWaitForIdle(true);\n+        robot.setAutoDelay(200);\n+\n+        List<String> lafs = Arrays.stream(getInstalledLookAndFeels())\n+                                  .map(LookAndFeelInfo::getClassName)\n+                                  .collect(Collectors.toList());\n+        for (final String laf : lafs) {\n+            try {\n+                AtomicBoolean lafSetSuccess = new AtomicBoolean(false);\n+                SwingUtilities.invokeAndWait(() -> {\n+                    lafSetSuccess.set(setLookAndFeel(laf));\n+                    if (lafSetSuccess.get()) {\n+                        createUI();\n+                    }\n+                });\n+                if (!lafSetSuccess.get()) {\n+                    continue;\n+                }\n+                robot.waitForIdle();\n+\n+                AtomicReference<Point> jTextField1LocRef = new AtomicReference<>();\n+                AtomicReference<Point> jTextField2LocRef = new AtomicReference<>();\n+                SwingUtilities.invokeAndWait(() -> {\n+                    jTextField1LocRef.set(jTextField1.getLocationOnScreen());\n+                    jTextField2LocRef.set(jTextField2.getLocationOnScreen());\n+                });\n+                final Point jTextField1Loc = jTextField1LocRef.get();\n+                final Point jTextField2Loc = jTextField2LocRef.get();\n+\n+                shouldYieldFocusCount = 0;\n+\n+                \/\/ Click on TextField2\n+                robot.mouseMove(jTextField2Loc.x + 5, jTextField2Loc.y + 5);\n+                robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+                robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+                typeSomeText();\n+\n+                \/\/ Click on TextField1\n+                robot.mouseMove(jTextField1Loc.x + 5, jTextField1Loc.y + 5);\n+                robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+                robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+                robot.keyPress(KeyEvent.VK_ENTER);\n+                robot.keyRelease(KeyEvent.VK_ENTER);\n+\n+                typeSomeText();\n+\n+                if (shouldYieldFocusCount == 1) {\n+                    System.out.println(\"Test passed for \" + laf);\n+                } else {\n+                    throw new RuntimeException(\"Test failed for \" + laf\n+                            + \" as InputVerifier.shouldYieldFocus() getting called \" + shouldYieldFocusCount\n+                            + \" times on jTextField2, but it is expected to call only once.\");\n+                }\n+\n+            } finally {\n+                SwingUtilities.invokeAndWait(DefaultCaretRequestsFocusTest::disposeFrame);\n+            }\n+        }\n+\n+    }\n+\n+    private static void typeSomeText() {\n+        robot.keyPress(KeyEvent.VK_T);\n+        robot.keyRelease(KeyEvent.VK_T);\n+        robot.keyPress(KeyEvent.VK_E);\n+        robot.keyRelease(KeyEvent.VK_E);\n+        robot.keyPress(KeyEvent.VK_X);\n+        robot.keyRelease(KeyEvent.VK_X);\n+        robot.keyPress(KeyEvent.VK_T);\n+        robot.keyRelease(KeyEvent.VK_T);\n+\n+    }\n+\n+    private static void createUI() {\n+        frame = new JFrame();\n+        jTextField1 = new JTextField(6);\n+        jTextField2 = new JTextField(6);\n+        jTextField3 = new JTextField(6);\n+        JPanel panel = new JPanel();\n+        panel.setLayout(new GridLayout(3, 1));\n+        panel.add(jTextField1);\n+        panel.add(jTextField2);\n+        panel.add(jTextField3);\n+\n+        InputVerifier iv = new InputVerifier() {\n+            public boolean verify(JComponent input) {\n+                System.out.println(\"InputVerifier.verify() called\");\n+                return false;\n+            }\n+\n+            public boolean shouldYieldFocus(JComponent input) {\n+                ++shouldYieldFocusCount;\n+                System.out.println(\"InputVerifier.shouldYieldFocus() called \" + shouldYieldFocusCount);\n+                return false;\n+            }\n+        };\n+\n+        jTextField2.setInputVerifier(iv);\n+\n+        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n+        frame.add(panel);\n+        frame.pack();\n+        frame.setAlwaysOnTop(true);\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+\n+    private static boolean setLookAndFeel(String lafName) {\n+        try {\n+            UIManager.setLookAndFeel(lafName);\n+        } catch (UnsupportedLookAndFeelException ignored) {\n+            System.out.println(\"Ignoring Unsupported laf : \" + lafName);\n+            return false;\n+        } catch (ClassNotFoundException | InstantiationException\n+                | IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return true;\n+    }\n+\n+    private static void disposeFrame() {\n+        if (frame != null) {\n+            frame.dispose();\n+            frame = null;\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/javax\/swing\/JTextField\/4532513\/DefaultCaretRequestsFocusTest.java","additions":198,"deletions":0,"binary":false,"changes":198,"status":"added"}]}