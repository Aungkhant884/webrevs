{"files":[{"patch":"@@ -454,1 +454,0 @@\n-  int      compiled_invocation_count() const    { return _compiled_invocation_count;  }\n@@ -459,1 +458,0 @@\n-  int      compiled_invocation_count() const    { return 0; }\n@@ -727,1 +725,0 @@\n-  static ByteSize compiled_invocation_counter_offset() { return byte_offset_of(Method, _compiled_invocation_count); }\n","filename":"src\/hotspot\/share\/oops\/method.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -100,3 +100,4 @@\n-  \/\/ %%% there can be 32-bit overflow here\n-  return ((*b)->invocation_count() + (*b)->compiled_invocation_count())\n-       - ((*a)->invocation_count() + (*a)->compiled_invocation_count());\n+  \/\/ invocation_count() may have overflowed already. Interpret it's result\n+  \/\/ as unsigned int to shift the limit of meaningles results by a factor of 2.\n+  return ((uint32_t)(*b)->invocation_count() + (*b)->compiled_invocation_count64())\n+       - ((uint32_t)(*a)->invocation_count() + (*a)->compiled_invocation_count64());\n@@ -154,1 +155,1 @@\n-  if (m->invocation_count() + m->compiled_invocation_count() >= 1 ) {\n+  if ((uint32_t)m->invocation_count() + m->compiled_invocation_count64() >= 1 ) {\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"}]}