{"files":[{"patch":"@@ -496,0 +496,1 @@\n+  \/\/---<  compose+print method return type, klass, name, and signature  >---\n@@ -510,3 +511,24 @@\n-  tty->print_cr (\"  interpreter_invocation_count: %8d \", interpreter_invocation_count());\n-  tty->print_cr (\"  invocation_counter:           %8d \", invocation_count());\n-  tty->print_cr (\"  backedge_counter:             %8d \", backedge_count());\n+  \/\/ Internal counting is based on signed int counters. They tend to\n+  \/\/ overflow with longer-running workloads on fast machines. To shift\n+  \/\/ the overflow limit, we interpret the return value as unsigned int.\n+  \/\/ This is ok because counters are unsigned by nature, and it gives us\n+  \/\/ another factor of 2 before the counter values become meaningless.\n+  \/\/ Print a \"overflow\" notification to create awareness.\n+  const char* addMsg;\n+  unsigned int maxInt = (1U<<31) - 1;\n+  unsigned int iic    = (unsigned int)interpreter_invocation_count();\n+  addMsg = (iic > maxInt) ? \"counter in overflow\" : \"\";\n+  tty->print_cr (\"  interpreter_invocation_count: \" UINT32_FORMAT_W(11) \" %s\", iic, addMsg);\n+  unsigned int ic     = (unsigned int)invocation_count();\n+  addMsg = (ic  > maxInt) ? \"counter in overflow\" : \"\";\n+  tty->print_cr (\"  invocation_counter:           \" UINT32_FORMAT_W(11) \" %s\", ic, addMsg);\n+  unsigned int bec    = (unsigned int)backedge_count();\n+  addMsg = (bec > maxInt) ? \"counter in overflow\" : \"\";\n+  tty->print_cr (\"  backedge_counter:             \" UINT32_FORMAT_W(11) \" %s\", bec, addMsg);\n+\n+  if (method_data() != NULL) {\n+    unsigned int dcc    = (unsigned int)method_data()->decompile_count();\n+    addMsg = (dcc > maxInt) ? \"counter in overflow\" : \"\";\n+    tty->print_cr (\"  decompile_count:              \" UINT32_FORMAT_W(11)\" %s\", dcc, addMsg);\n+  }\n+\n@@ -515,1 +537,1 @@\n-    tty->print_cr (\"  compiled_invocation_count: %8d \", compiled_invocation_count());\n+    tty->print_cr (\"  compiled_invocation_count:    \" INT64_FORMAT_W(11), compiled_invocation_count64());\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":26,"deletions":4,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -101,1 +101,16 @@\n-  int               _compiled_invocation_count;  \/\/ Number of nmethod invocations so far (for perf. debugging)\n+  union {\n+    int64_t _compiled_invocation_count64;\n+#if defined(VM_LITTLE_ENDIAN)\n+    struct {\n+      int     _compiled_invocation_count;  \/\/ Number of nmethod invocations so far (for perf. debugging)\n+                                           \/\/ Must preserve this as int. Is used outside the jdk by SA.\n+      int     _cic_high;\n+    };\n+#else\n+    struct {\n+      int     _cic_high;\n+      int     _compiled_invocation_count;  \/\/ Number of nmethod invocations so far (for perf. debugging)\n+                                           \/\/ Must preserve this as int. Is used outside the jdk by SA.\n+    };\n+#endif\n+  };\n@@ -439,2 +454,2 @@\n-  int  compiled_invocation_count() const        { return _compiled_invocation_count;  }\n-  void set_compiled_invocation_count(int count) { _compiled_invocation_count = count; }\n+  int64_t  compiled_invocation_count64() const  { return _compiled_invocation_count64;}\n+  void set_compiled_invocation_count(int count) { _compiled_invocation_count64 = (int64_t)count; }\n@@ -443,1 +458,1 @@\n-  int  compiled_invocation_count() const        { return 0;  }\n+  int64_t  compiled_invocation_count64() const  { return 0; }\n@@ -710,1 +725,1 @@\n-  static ByteSize compiled_invocation_counter_offset() { return byte_offset_of(Method, _compiled_invocation_count); }\n+  static ByteSize compiled_invocation_counter_offset64() { return byte_offset_of(Method, _compiled_invocation_count64); }\n","filename":"src\/hotspot\/share\/oops\/method.hpp","additions":20,"deletions":5,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -1051,2 +1051,2 @@\n-        Node* adr2 = basic_plus_adr(adr1, adr1, in_bytes(Method::compiled_invocation_counter_offset()));\n-        increment_counter(adr2);\n+        Node* adr2 = basic_plus_adr(adr1, adr1, in_bytes(Method::compiled_invocation_counter_offset64()));\n+        increment_counter64(adr2);\n@@ -1056,2 +1056,2 @@\n-      case Bytecodes::_invokevirtual:   increment_counter(SharedRuntime::nof_inlined_calls_addr()); break;\n-      case Bytecodes::_invokeinterface: increment_counter(SharedRuntime::nof_inlined_interface_calls_addr()); break;\n+      case Bytecodes::_invokevirtual:   increment_counter64(SharedRuntime::nof_inlined_calls_addr()); break;\n+      case Bytecodes::_invokeinterface: increment_counter64(SharedRuntime::nof_inlined_interface_calls_addr()); break;\n@@ -1060,1 +1060,1 @@\n-      case Bytecodes::_invokespecial:   increment_counter(SharedRuntime::nof_inlined_static_calls_addr()); break;\n+      case Bytecodes::_invokespecial:   increment_counter64(SharedRuntime::nof_inlined_static_calls_addr()); break;\n@@ -1065,2 +1065,2 @@\n-      case Bytecodes::_invokevirtual:   increment_counter(SharedRuntime::nof_normal_calls_addr()); break;\n-      case Bytecodes::_invokeinterface: increment_counter(SharedRuntime::nof_interface_calls_addr()); break;\n+      case Bytecodes::_invokevirtual:   increment_counter64(SharedRuntime::nof_normal_calls_addr()); break;\n+      case Bytecodes::_invokeinterface: increment_counter64(SharedRuntime::nof_interface_calls_addr()); break;\n@@ -1069,1 +1069,1 @@\n-      case Bytecodes::_invokespecial:   increment_counter(SharedRuntime::nof_static_calls_addr()); break;\n+      case Bytecodes::_invokespecial:   increment_counter64(SharedRuntime::nof_static_calls_addr()); break;\n","filename":"src\/hotspot\/share\/opto\/doCall.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2000,0 +2000,5 @@\n+void GraphKit::increment_counter64(address counter_addr) {\n+  Node* adr1 = makecon(TypeRawPtr::make(counter_addr));\n+  increment_counter64(adr1);\n+}\n+\n@@ -2008,0 +2013,8 @@\n+void GraphKit::increment_counter64(Node* counter_addr) {\n+  int adr_type = Compile::AliasIdxRaw;\n+  Node* ctrl = control();\n+  Node* cnt  = make_load(ctrl, counter_addr, TypeLong::LONG, T_LONG, adr_type, MemNode::unordered);\n+  Node* incr = _gvn.transform(new AddLNode(cnt, _gvn.longcon(1)));\n+  store_to_memory(ctrl, counter_addr, incr, T_LONG, adr_type, MemNode::unordered);\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -724,0 +724,2 @@\n+  void increment_counter64(address counter_addr); \/\/ increment a debug counter (64bit)\n+  void increment_counter64(Node*   counter_addr); \/\/ increment a debug counter (64bit)\n","filename":"src\/hotspot\/share\/opto\/graphKit.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -100,3 +100,4 @@\n-  \/\/ %%% there can be 32-bit overflow here\n-  return ((*b)->invocation_count() + (*b)->compiled_invocation_count())\n-       - ((*a)->invocation_count() + (*a)->compiled_invocation_count());\n+  \/\/ invocation_count() may have overflowed already. Interpret it's result\n+  \/\/ as unsigned int to shift the limit of meaningles results by a factor of 2.\n+  return ((uint32_t)(*b)->invocation_count() + (*b)->compiled_invocation_count64())\n+       - ((uint32_t)(*a)->invocation_count() + (*a)->compiled_invocation_count64());\n@@ -154,1 +155,1 @@\n-  if (m->invocation_count() + m->compiled_invocation_count() >= 1 ) {\n+  if ((uint32_t)m->invocation_count() + m->compiled_invocation_count64() >= 1 ) {\n@@ -160,2 +161,3 @@\n-\n-\n+\/\/ Invocation count accumulators should be unsigned long to shift the\n+\/\/ overflow border. Longer-running workloads tend to create invocation\n+\/\/ counts which already overflow 32-bit counters for individual methods.\n@@ -172,2 +174,9 @@\n-  unsigned total = 0, int_total = 0, comp_total = 0, static_total = 0, final_total = 0,\n-      synch_total = 0, nativ_total = 0, acces_total = 0;\n+  uint64_t total        = 0,\n+           int_total    = 0,\n+           comp_total   = 0,\n+           special_total= 0,\n+           static_total = 0,\n+           final_total  = 0,\n+           synch_total  = 0,\n+           native_total = 0,\n+           access_total = 0;\n@@ -175,0 +184,3 @@\n+    \/\/ Counter values returned from getter methods are signed int.\n+    \/\/ To shift the overflow border by a factor of two, we interpret\n+    \/\/ them here as unsigned long. A counter can't be negative anyway.\n@@ -176,9 +188,10 @@\n-    int c = m->invocation_count() + m->compiled_invocation_count();\n-    if (c >= MethodHistogramCutoff) m->print_invocation_count();\n-    int_total  += m->invocation_count();\n-    comp_total += m->compiled_invocation_count();\n-    if (m->is_final())        final_total  += c;\n-    if (m->is_static())       static_total += c;\n-    if (m->is_synchronized()) synch_total  += c;\n-    if (m->is_native())       nativ_total  += c;\n-    if (m->is_accessor())     acces_total  += c;\n+    uint64_t iic = (uint64_t)m->invocation_count();\n+    uint64_t cic = m->compiled_invocation_count64();\n+    if ((iic + cic) >= (uint64_t)MethodHistogramCutoff) m->print_invocation_count();\n+    int_total  += iic;\n+    comp_total += cic;\n+    if (m->is_final())        final_total  += iic + cic;\n+    if (m->is_static())       static_total += iic + cic;\n+    if (m->is_synchronized()) synch_total  += iic + cic;\n+    if (m->is_native())       native_total += iic + cic;\n+    if (m->is_accessor())     access_total += iic + cic;\n@@ -188,9 +201,12 @@\n-  tty->print_cr(\"Invocations summary:\");\n-  tty->print_cr(\"\\t%9d (%4.1f%%) interpreted\",  int_total,    100.0 * int_total    \/ total);\n-  tty->print_cr(\"\\t%9d (%4.1f%%) compiled\",     comp_total,   100.0 * comp_total   \/ total);\n-  tty->print_cr(\"\\t%9d (100%%)  total\",         total);\n-  tty->print_cr(\"\\t%9d (%4.1f%%) synchronized\", synch_total,  100.0 * synch_total  \/ total);\n-  tty->print_cr(\"\\t%9d (%4.1f%%) final\",        final_total,  100.0 * final_total  \/ total);\n-  tty->print_cr(\"\\t%9d (%4.1f%%) static\",       static_total, 100.0 * static_total \/ total);\n-  tty->print_cr(\"\\t%9d (%4.1f%%) native\",       nativ_total,  100.0 * nativ_total  \/ total);\n-  tty->print_cr(\"\\t%9d (%4.1f%%) accessor\",     acces_total,  100.0 * acces_total  \/ total);\n+  special_total = final_total + static_total +synch_total + native_total + access_total;\n+  tty->print_cr(\"Invocations summary for %d methods:\", collected_invoked_methods->length());\n+  tty->print_cr(\"\\t\" UINT64_FORMAT_W(12) \" (100%%)  total\",           total);\n+  tty->print_cr(\"\\t\" UINT64_FORMAT_W(12) \" (%4.1f%%) |- interpreted\", int_total,     100.0 * int_total    \/ total);\n+  tty->print_cr(\"\\t\" UINT64_FORMAT_W(12) \" (%4.1f%%) |- compiled\",    comp_total,    100.0 * comp_total   \/ total);\n+  tty->print_cr(\"\\t\" UINT64_FORMAT_W(12) \" (%4.1f%%) |- special methods (interpreted and compiled)\",\n+                                                                         special_total, 100.0 * special_total\/ total);\n+  tty->print_cr(\"\\t\" UINT64_FORMAT_W(12) \" (%4.1f%%)    |- synchronized\",synch_total,   100.0 * synch_total  \/ total);\n+  tty->print_cr(\"\\t\" UINT64_FORMAT_W(12) \" (%4.1f%%)    |- final\",       final_total,   100.0 * final_total  \/ total);\n+  tty->print_cr(\"\\t\" UINT64_FORMAT_W(12) \" (%4.1f%%)    |- static\",      static_total,  100.0 * static_total \/ total);\n+  tty->print_cr(\"\\t\" UINT64_FORMAT_W(12) \" (%4.1f%%)    |- native\",      native_total,  100.0 * native_total \/ total);\n+  tty->print_cr(\"\\t\" UINT64_FORMAT_W(12) \" (%4.1f%%)    |- accessor\",    access_total,  100.0 * access_total \/ total);\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":42,"deletions":26,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -146,10 +146,10 @@\n-int SharedRuntime::_nof_normal_calls = 0;\n-int SharedRuntime::_nof_optimized_calls = 0;\n-int SharedRuntime::_nof_inlined_calls = 0;\n-int SharedRuntime::_nof_megamorphic_calls = 0;\n-int SharedRuntime::_nof_static_calls = 0;\n-int SharedRuntime::_nof_inlined_static_calls = 0;\n-int SharedRuntime::_nof_interface_calls = 0;\n-int SharedRuntime::_nof_optimized_interface_calls = 0;\n-int SharedRuntime::_nof_inlined_interface_calls = 0;\n-int SharedRuntime::_nof_megamorphic_interface_calls = 0;\n+int64_t SharedRuntime::_nof_normal_calls = 0;\n+int64_t SharedRuntime::_nof_optimized_calls = 0;\n+int64_t SharedRuntime::_nof_inlined_calls = 0;\n+int SharedRuntime::_nof_megamorphic_calls = 0;     \/\/ asm adaptations required\n+int64_t SharedRuntime::_nof_static_calls = 0;\n+int64_t SharedRuntime::_nof_inlined_static_calls = 0;\n+int64_t SharedRuntime::_nof_interface_calls = 0;\n+int64_t SharedRuntime::_nof_optimized_interface_calls = 0;\n+int64_t SharedRuntime::_nof_inlined_interface_calls = 0;\n+int64_t SharedRuntime::_nof_megamorphic_interface_calls = 0;\n@@ -2206,0 +2206,4 @@\n+inline double percent(int64_t x, int64_t y) {\n+  return 100.0 * x \/ MAX2(y, (int64_t)1);\n+}\n+\n@@ -2210,4 +2214,6 @@\n-  static int _arity_histogram[MAX_ARITY];     \/\/ histogram of #args\n-  static int _size_histogram[MAX_ARITY];      \/\/ histogram of arg size in words\n-  static int _max_arity;                      \/\/ max. arity seen\n-  static int _max_size;                       \/\/ max. arg size seen\n+  static uint64_t _arity_histogram[MAX_ARITY]; \/\/ histogram of #args\n+  static uint64_t _size_histogram[MAX_ARITY];  \/\/ histogram of arg size in words\n+  static uint64_t _total_compiled_calls;\n+  static uint64_t _max_compiled_calls_per_method;\n+  static int _max_arity;                       \/\/ max. arity seen\n+  static int _max_size;                        \/\/ max. arg size seen\n@@ -2223,1 +2229,3 @@\n-      int count = method->compiled_invocation_count();\n+      uint64_t count = (uint64_t)method->compiled_invocation_count64();\n+      _max_compiled_calls_per_method = count > _max_compiled_calls_per_method ? count : _max_compiled_calls_per_method;\n+      _total_compiled_calls    += count;\n@@ -2231,3 +2239,2 @@\n-  void print_histogram_helper(int n, int* histo, const char* name) {\n-    const int N = MIN2(5, n);\n-    tty->print_cr(\"\\nHistogram of call arity (incl. rcvr, calls to compiled methods only):\");\n+  void print_histogram_helper(int n, uint64_t* histo, const char* name) {\n+    const int N = MIN2(9, n);\n@@ -2236,7 +2243,14 @@\n-    int i;\n-    for (i = 0; i <= n; i++) { sum += histo[i]; weighted_sum += i*histo[i]; }\n-    double rest = sum;\n-    double percent = sum \/ 100;\n-    for (i = 0; i <= N; i++) {\n-      rest -= histo[i];\n-      tty->print_cr(\"%4d: %7d (%5.1f%%)\", i, histo[i], histo[i] \/ percent);\n+    for (int i = 0; i <= n; i++) { sum += histo[i]; weighted_sum += i*histo[i]; }\n+    if (sum >= 1.0) { \/\/ prevent divide by zero or divide overflow\n+      double rest = sum;\n+      double percent = sum \/ 100;\n+      for (int i = 0; i <= N; i++) {\n+        rest -= histo[i];\n+        tty->print_cr(\"%4d: \" UINT64_FORMAT_W(12) \" (%5.1f%%)\", i, histo[i], histo[i] \/ percent);\n+      }\n+      tty->print_cr(\"rest: \" INT64_FORMAT_W(12) \" (%5.1f%%)\", (int64_t)rest, rest \/ percent);\n+      tty->print_cr(\"(avg. %s = %3.1f, max = %d)\", name, weighted_sum \/ sum, n);\n+      tty->print_cr(\"(total # of compiled calls = \" INT64_FORMAT_W(14) \")\", _total_compiled_calls);\n+      tty->print_cr(\"(max # of compiled calls   = \" INT64_FORMAT_W(14) \")\", _max_compiled_calls_per_method);\n+    } else {\n+      tty->print_cr(\"Histogram generation failed for %s. n = %d, sum = %7.5f\", name, n, sum);\n@@ -2244,2 +2258,0 @@\n-    tty->print_cr(\"rest: %7d (%5.1f%%))\", (int)rest, rest \/ percent);\n-    tty->print_cr(\"(avg. %s = %3.1f, max = %d)\", name, weighted_sum \/ sum, n);\n@@ -2251,1 +2263,1 @@\n-    tty->print_cr(\"\\nSame for parameter size (in words):\");\n+    tty->print_cr(\"\\nHistogram of parameter block size (in words, incl. rcvr):\");\n@@ -2263,0 +2275,2 @@\n+    _total_compiled_calls = 0;\n+    _max_compiled_calls_per_method = 0;\n@@ -2269,2 +2283,4 @@\n-int MethodArityHistogram::_arity_histogram[MethodArityHistogram::MAX_ARITY];\n-int MethodArityHistogram::_size_histogram[MethodArityHistogram::MAX_ARITY];\n+uint64_t MethodArityHistogram::_arity_histogram[MethodArityHistogram::MAX_ARITY];\n+uint64_t MethodArityHistogram::_size_histogram[MethodArityHistogram::MAX_ARITY];\n+uint64_t MethodArityHistogram::_total_compiled_calls;\n+uint64_t MethodArityHistogram::_max_compiled_calls_per_method;\n@@ -2274,1 +2290,1 @@\n-void SharedRuntime::print_call_statistics(int comp_total) {\n+void SharedRuntime::print_call_statistics(uint64_t comp_total) {\n@@ -2276,16 +2292,16 @@\n-  int total  = _nof_normal_calls + _nof_interface_calls + _nof_static_calls;\n-  int mono_c = _nof_normal_calls - _nof_optimized_calls - _nof_megamorphic_calls;\n-  int mono_i = _nof_interface_calls - _nof_optimized_interface_calls - _nof_megamorphic_interface_calls;\n-  tty->print_cr(\"\\t%9d   (%4.1f%%) total non-inlined   \", total, percent(total, total));\n-  tty->print_cr(\"\\t%9d   (%4.1f%%) virtual calls       \", _nof_normal_calls, percent(_nof_normal_calls, total));\n-  tty->print_cr(\"\\t  %9d  (%3.0f%%)   inlined          \", _nof_inlined_calls, percent(_nof_inlined_calls, _nof_normal_calls));\n-  tty->print_cr(\"\\t  %9d  (%3.0f%%)   optimized        \", _nof_optimized_calls, percent(_nof_optimized_calls, _nof_normal_calls));\n-  tty->print_cr(\"\\t  %9d  (%3.0f%%)   monomorphic      \", mono_c, percent(mono_c, _nof_normal_calls));\n-  tty->print_cr(\"\\t  %9d  (%3.0f%%)   megamorphic      \", _nof_megamorphic_calls, percent(_nof_megamorphic_calls, _nof_normal_calls));\n-  tty->print_cr(\"\\t%9d   (%4.1f%%) interface calls     \", _nof_interface_calls, percent(_nof_interface_calls, total));\n-  tty->print_cr(\"\\t  %9d  (%3.0f%%)   inlined          \", _nof_inlined_interface_calls, percent(_nof_inlined_interface_calls, _nof_interface_calls));\n-  tty->print_cr(\"\\t  %9d  (%3.0f%%)   optimized        \", _nof_optimized_interface_calls, percent(_nof_optimized_interface_calls, _nof_interface_calls));\n-  tty->print_cr(\"\\t  %9d  (%3.0f%%)   monomorphic      \", mono_i, percent(mono_i, _nof_interface_calls));\n-  tty->print_cr(\"\\t  %9d  (%3.0f%%)   megamorphic      \", _nof_megamorphic_interface_calls, percent(_nof_megamorphic_interface_calls, _nof_interface_calls));\n-  tty->print_cr(\"\\t%9d   (%4.1f%%) static\/special calls\", _nof_static_calls, percent(_nof_static_calls, total));\n-  tty->print_cr(\"\\t  %9d  (%3.0f%%)   inlined          \", _nof_inlined_static_calls, percent(_nof_inlined_static_calls, _nof_static_calls));\n+  int64_t total  = _nof_normal_calls + _nof_interface_calls + _nof_static_calls;\n+  int64_t mono_c = _nof_normal_calls - _nof_optimized_calls - (int64_t)_nof_megamorphic_calls;\n+  int64_t mono_i = _nof_interface_calls - _nof_optimized_interface_calls - _nof_megamorphic_interface_calls;\n+  tty->print_cr(\"\\t\" INT64_FORMAT_W(12) \" (100%%)  total non-inlined   \", total);\n+  tty->print_cr(\"\\t\" INT64_FORMAT_W(12) \" (%4.1f%%) |- virtual calls       \", _nof_normal_calls, percent(_nof_normal_calls, total));\n+  tty->print_cr(\"\\t\" INT64_FORMAT_W(12) \" (%4.0f%%) |  |- inlined          \", _nof_inlined_calls, percent(_nof_inlined_calls, _nof_normal_calls));\n+  tty->print_cr(\"\\t\" INT64_FORMAT_W(12) \" (%4.0f%%) |  |- optimized        \", _nof_optimized_calls, percent(_nof_optimized_calls, _nof_normal_calls));\n+  tty->print_cr(\"\\t\" INT64_FORMAT_W(12) \" (%4.0f%%) |  |- monomorphic      \", mono_c, percent(mono_c, _nof_normal_calls));\n+  tty->print_cr(\"\\t\" INT32_FORMAT_W(12) \" (%4.0f%%) |  |- megamorphic      \", _nof_megamorphic_calls, percent((int64_t)_nof_megamorphic_calls, _nof_normal_calls));\n+  tty->print_cr(\"\\t\" INT64_FORMAT_W(12) \" (%4.1f%%) |- interface calls     \", _nof_interface_calls, percent(_nof_interface_calls, total));\n+  tty->print_cr(\"\\t\" INT64_FORMAT_W(12) \" (%4.0f%%) |  |- inlined          \", _nof_inlined_interface_calls, percent(_nof_inlined_interface_calls, _nof_interface_calls));\n+  tty->print_cr(\"\\t\" INT64_FORMAT_W(12) \" (%4.0f%%) |  |- optimized        \", _nof_optimized_interface_calls, percent(_nof_optimized_interface_calls, _nof_interface_calls));\n+  tty->print_cr(\"\\t\" INT64_FORMAT_W(12) \" (%4.0f%%) |  |- monomorphic      \", mono_i, percent(mono_i, _nof_interface_calls));\n+  tty->print_cr(\"\\t\" INT64_FORMAT_W(12) \" (%4.0f%%) |  |- megamorphic      \", _nof_megamorphic_interface_calls, percent(_nof_megamorphic_interface_calls, _nof_interface_calls));\n+  tty->print_cr(\"\\t\" INT64_FORMAT_W(12) \" (%4.1f%%) |- static\/special calls\", _nof_static_calls, percent(_nof_static_calls, total));\n+  tty->print_cr(\"\\t\" INT64_FORMAT_W(12) \" (%4.0f%%) |  |- inlined          \", _nof_inlined_static_calls, percent(_nof_inlined_static_calls, _nof_static_calls));\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":63,"deletions":47,"binary":false,"changes":110,"status":"modified"},{"patch":"@@ -568,5 +568,5 @@\n-  static int     _nof_normal_calls;              \/\/ total # of calls\n-  static int     _nof_optimized_calls;           \/\/ total # of statically-bound calls\n-  static int     _nof_inlined_calls;             \/\/ total # of inlined normal calls\n-  static int     _nof_static_calls;              \/\/ total # of calls to static methods or super methods (invokespecial)\n-  static int     _nof_inlined_static_calls;      \/\/ total # of inlined static calls\n+  static int64_t _nof_normal_calls;               \/\/ total # of calls\n+  static int64_t _nof_optimized_calls;            \/\/ total # of statically-bound calls\n+  static int64_t _nof_inlined_calls;              \/\/ total # of inlined normal calls\n+  static int64_t _nof_static_calls;               \/\/ total # of calls to static methods or super methods (invokespecial)\n+  static int64_t _nof_inlined_static_calls;       \/\/ total # of inlined static calls\n@@ -574,4 +574,4 @@\n-  static int     _nof_interface_calls;           \/\/ total # of compiled calls\n-  static int     _nof_optimized_interface_calls; \/\/ total # of statically-bound interface calls\n-  static int     _nof_inlined_interface_calls;   \/\/ total # of inlined interface calls\n-  static int     _nof_megamorphic_interface_calls;\/\/ total # of megamorphic interface calls\n+  static int64_t _nof_interface_calls;            \/\/ total # of compiled calls\n+  static int64_t _nof_optimized_interface_calls;  \/\/ total # of statically-bound interface calls\n+  static int64_t _nof_inlined_interface_calls;    \/\/ total # of inlined interface calls\n+  static int64_t _nof_megamorphic_interface_calls;\/\/ total # of megamorphic interface calls\n@@ -589,1 +589,1 @@\n-  static void print_call_statistics(int comp_total);\n+  static void print_call_statistics(uint64_t comp_total);\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.hpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"}]}