{"files":[{"patch":"@@ -83,1 +83,1 @@\n-    __ incrementq(ExternalAddress((address) SharedRuntime::nof_megamorphic_calls_addr()));\n+    __ incrementl(ExternalAddress((address) SharedRuntime::nof_megamorphic_calls_addr()));\n@@ -175,1 +175,1 @@\n-    __ incrementq(ExternalAddress((address) SharedRuntime::nof_megamorphic_calls_addr()));\n+    __ incrementl(ExternalAddress((address) SharedRuntime::nof_megamorphic_calls_addr()));\n","filename":"src\/hotspot\/cpu\/x86\/vtableStubs_x86_32.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1052,1 +1052,1 @@\n-        increment_counter64(adr2);\n+        increment_counter(adr2);\n@@ -1056,2 +1056,2 @@\n-      case Bytecodes::_invokevirtual:   increment_counter64(SharedRuntime::nof_inlined_calls_addr()); break;\n-      case Bytecodes::_invokeinterface: increment_counter64(SharedRuntime::nof_inlined_interface_calls_addr()); break;\n+      case Bytecodes::_invokevirtual:   increment_counter(SharedRuntime::nof_inlined_calls_addr()); break;\n+      case Bytecodes::_invokeinterface: increment_counter(SharedRuntime::nof_inlined_interface_calls_addr()); break;\n@@ -1060,1 +1060,1 @@\n-      case Bytecodes::_invokespecial:   increment_counter64(SharedRuntime::nof_inlined_static_calls_addr()); break;\n+      case Bytecodes::_invokespecial:   increment_counter(SharedRuntime::nof_inlined_static_calls_addr()); break;\n@@ -1065,2 +1065,2 @@\n-      case Bytecodes::_invokevirtual:   increment_counter64(SharedRuntime::nof_normal_calls_addr()); break;\n-      case Bytecodes::_invokeinterface: increment_counter64(SharedRuntime::nof_interface_calls_addr()); break;\n+      case Bytecodes::_invokevirtual:   increment_counter(SharedRuntime::nof_normal_calls_addr()); break;\n+      case Bytecodes::_invokeinterface: increment_counter(SharedRuntime::nof_interface_calls_addr()); break;\n@@ -1069,1 +1069,1 @@\n-      case Bytecodes::_invokespecial:   increment_counter64(SharedRuntime::nof_static_calls_addr()); break;\n+      case Bytecodes::_invokespecial:   increment_counter(SharedRuntime::nof_static_calls_addr()); break;\n","filename":"src\/hotspot\/share\/opto\/doCall.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2000,5 +2000,0 @@\n-void GraphKit::increment_counter64(address counter_addr) {\n-  Node* adr1 = makecon(TypeRawPtr::make(counter_addr));\n-  increment_counter64(adr1);\n-}\n-\n@@ -2006,8 +2001,0 @@\n-  int adr_type = Compile::AliasIdxRaw;\n-  Node* ctrl = control();\n-  Node* cnt  = make_load(ctrl, counter_addr, TypeInt::INT, T_INT, adr_type, MemNode::unordered);\n-  Node* incr = _gvn.transform(new AddINode(cnt, _gvn.intcon(1)));\n-  store_to_memory(ctrl, counter_addr, incr, T_INT, adr_type, MemNode::unordered);\n-}\n-\n-void GraphKit::increment_counter64(Node* counter_addr) {\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":0,"deletions":13,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -724,2 +724,0 @@\n-  void increment_counter64(address counter_addr); \/\/ increment a debug counter (64bit)\n-  void increment_counter64(Node*   counter_addr); \/\/ increment a debug counter (64bit)\n","filename":"src\/hotspot\/share\/opto\/graphKit.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -99,4 +99,4 @@\n-  \/\/ invocation_count() may have overflowed already. Interpret it's result\n-  \/\/ as unsigned int to shift the limit of meaningles results by a factor of 2.\n-  return ((uint32_t)(*b)->invocation_count() + (*b)->compiled_invocation_count())\n-       - ((uint32_t)(*a)->invocation_count() + (*a)->compiled_invocation_count());\n+  \/\/ invocation_count() may have overflowed already. Interpret it's result as\n+  \/\/ unsigned int to shift the limit of meaningless results by a factor of 2.\n+  return (int32_t)(((uint32_t)(*b)->invocation_count() + (*b)->compiled_invocation_count())\n+                 - ((uint32_t)(*a)->invocation_count() + (*a)->compiled_invocation_count()));\n@@ -154,1 +154,1 @@\n-  if ((uint32_t)m->invocation_count() + m->compiled_invocation_count() >= 1 ) {\n+  if ((uint32_t)m->invocation_count() + m->compiled_invocation_count() >= 1) {\n@@ -188,1 +188,1 @@\n-    uint64_t cic = m->compiled_invocation_count();\n+    uint64_t cic = (uint64_t)m->compiled_invocation_count();\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}