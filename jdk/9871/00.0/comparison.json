{"files":[{"patch":"@@ -1574,1 +1574,0 @@\n-  init_req( ValidLengthTest    , topnode);\n@@ -1601,0 +1600,48 @@\n+\/\/=============================================================================\n+Node* AllocateArrayNode::Ideal(PhaseGVN *phase, bool can_reshape) {\n+  if (remove_dead_region(phase, can_reshape))  return this;\n+  \/\/ Don't bother trying to transform a dead node\n+  if (in(0) && in(0)->is_top())  return NULL;\n+\n+  const Type* type = phase->type(Ideal_length());\n+  if (type->isa_int() && type->is_int()->_hi < 0) {\n+    if (can_reshape) {\n+      PhaseIterGVN *igvn = phase->is_IterGVN();\n+      \/\/ Unreachable fall through path (negative array length),\n+      \/\/ the allocation can only throw so disconnect it.\n+      Node* proj = proj_out_or_null(TypeFunc::Control);\n+      Node* catchproj = NULL;\n+      if (proj != NULL) {\n+        for (DUIterator_Fast imax, i = proj->fast_outs(imax); i < imax; i++) {\n+          Node *cn = proj->fast_out(i);\n+          if (cn->is_Catch()) {\n+            catchproj = cn->as_Multi()->proj_out_or_null(CatchProjNode::fall_through_index);\n+            break;\n+          }\n+        }\n+      }\n+      if (catchproj != NULL && catchproj->outcnt() > 0 &&\n+          (catchproj->outcnt() > 1 ||\n+           catchproj->unique_out()->Opcode() != Op_Halt)) {\n+        assert(catchproj->is_CatchProj(), \"must be a CatchProjNode\");\n+        Node* nproj = catchproj->clone();\n+        igvn->register_new_node_with_optimizer(nproj);\n+\n+        Node *frame = new ParmNode( phase->C->start(), TypeFunc::FramePtr );\n+        frame = phase->transform(frame);\n+        \/\/ Halt & Catch Fire\n+        Node* halt = new HaltNode(nproj, frame, \"unexpected negative array length\");\n+        phase->C->root()->add_req(halt);\n+        phase->transform(halt);\n+\n+        igvn->replace_node(catchproj, phase->C->top());\n+        return this;\n+      }\n+    } else {\n+      \/\/ Can't correct it during regular GVN so register for IGVN\n+      phase->C->record_for_igvn(this);\n+    }\n+  }\n+  return NULL;\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/callnode.cpp","additions":48,"deletions":1,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -879,1 +879,0 @@\n-    ValidLengthTest,\n@@ -889,1 +888,0 @@\n-    fields[ValidLengthTest] = TypeInt::BOOL;\n@@ -984,2 +982,4 @@\n-  AllocateArrayNode(Compile* C, const TypeFunc* atype, Node* ctrl, Node* mem, Node* abio, Node* size, Node* klass_node,\n-                    Node* initial_test, Node* count_val, Node* valid_length_test)\n+  AllocateArrayNode(Compile* C, const TypeFunc *atype, Node *ctrl, Node *mem, Node *abio,\n+                    Node* size, Node* klass_node, Node* initial_test,\n+                    Node* count_val\n+                    )\n@@ -991,1 +991,0 @@\n-    set_req(AllocateNode::ValidLengthTest, valid_length_test);\n@@ -994,0 +993,1 @@\n+  virtual Node *Ideal(PhaseGVN *phase, bool can_reshape);\n","filename":"src\/hotspot\/share\/opto\/callnode.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -3992,1 +3992,1 @@\n-          CallNode* call = n->in(0)->in(0)->as_Call();\n+          CallNode *call = n->in(0)->in(0)->as_Call();\n@@ -4001,1 +4001,1 @@\n-            Node* arg0 = call->in(TypeFunc::Parms);\n+            Node *arg0 = call->in(TypeFunc::Parms);\n@@ -4006,3 +4006,4 @@\n-          } else if (call->entry_point() == OptoRuntime::new_array_Java() ||\n-                     call->entry_point() == OptoRuntime::new_array_nozero_Java()) {\n-            \/\/ Check for illegal array length. In such case, the optimizer has\n+          } else if (call->entry_point() == OptoRuntime::new_array_Java() &&\n+                     call->req() > TypeFunc::Parms+1 &&\n+                     call->is_CallStaticJava()) {\n+            \/\/ Check for negative array length. In such case, the optimizer has\n@@ -4011,5 +4012,3 @@\n-            assert(call->is_CallStaticJava(), \"static call expected\");\n-            assert(call->req() == call->jvms()->endoff() + 1, \"missing extra input\");\n-            Node* valid_length_test = call->in(call->req()-1);\n-            call->del_req(call->req()-1);\n-            if (valid_length_test->find_int_con(1) == 0) {\n+            Node *arg1 = call->in(TypeFunc::Parms+1);\n+            if (arg1->is_Type() &&\n+                arg1->as_Type()->type()->join(TypeInt::POS)->empty()) {\n@@ -4018,2 +4017,0 @@\n-            assert(n->outcnt() == required_outcnt, \"malformed control flow\");\n-            continue;\n@@ -4028,8 +4025,0 @@\n-    } else if (n->is_PCTable() && n->in(0) && n->in(0)->in(0) && n->in(0)->in(0)->is_Call()) {\n-      CallNode* call = n->in(0)->in(0)->as_Call();\n-      if (call->entry_point() == OptoRuntime::new_array_Java() ||\n-          call->entry_point() == OptoRuntime::new_array_nozero_Java()) {\n-        assert(call->is_CallStaticJava(), \"static call expected\");\n-        assert(call->req() == call->jvms()->endoff() + 1, \"missing extra input\");\n-        call->del_req(call->req()-1); \/\/ valid length test useless now\n-      }\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":9,"deletions":20,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2604,3 +2604,1 @@\n-  Node* norm = new CatchProjNode(catc, CatchProjNode::fall_through_index, CatchProjNode::no_handler_bci);\n-  _gvn.set_type_bottom(norm);\n-  C->record_for_igvn(norm);\n+  Node* norm = _gvn.transform( new CatchProjNode(catc, CatchProjNode::fall_through_index, CatchProjNode::no_handler_bci) );\n@@ -3857,9 +3855,0 @@\n-  const TypeOopPtr* ary_type = _gvn.type(klass_node)->is_klassptr()->as_instance_type();\n-  Node* valid_length_test = _gvn.intcon(1);\n-  if (ary_type->isa_aryptr()) {\n-    BasicType bt = ary_type->isa_aryptr()->elem()->array_element_basic_type();\n-    jint max = TypeAryPtr::max_array_length(bt);\n-    Node* valid_length_cmp  = _gvn.transform(new CmpUNode(length, intcon(max)));\n-    valid_length_test = _gvn.transform(new BoolNode(valid_length_cmp, BoolTest::le));\n-  }\n-\n@@ -3872,1 +3861,1 @@\n-                            length, valid_length_test);\n+                            length);\n@@ -3879,0 +3868,1 @@\n+  const TypeOopPtr* ary_type = _gvn.type(klass_node)->is_klassptr()->as_instance_type();\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":3,"deletions":13,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1195,2 +1195,1 @@\n-            address slow_call_address,  \/\/ Address of slow call\n-            Node* valid_length_test \/\/ whether length is valid or not\n+            address slow_call_address  \/\/ Address of slow call\n@@ -1381,6 +1380,0 @@\n-  \/\/ For array allocations, copy the valid length check to the call node so Compile::final_graph_reshaping() can verify\n-  \/\/ that the call has the expected number of CatchProj nodes (in case the allocation always fails and the fallthrough\n-  \/\/ path dies).\n-  if (valid_length_test != NULL) {\n-    call->add_req(valid_length_test);\n-  }\n@@ -1873,1 +1866,1 @@\n-                         OptoRuntime::new_instance_Java(), NULL);\n+                         OptoRuntime::new_instance_Java());\n@@ -1878,1 +1871,0 @@\n-  Node* valid_length_test = alloc->in(AllocateNode::ValidLengthTest);\n@@ -1893,1 +1885,1 @@\n-                         slow_call_address, valid_length_test);\n+                         slow_call_address);\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -94,2 +94,2 @@\n-                              address slow_call_address,\n-                              Node* valid_length_test);\n+                              address slow_call_address);\n+  void yank_initalize_node(InitializeNode* node);\n","filename":"src\/hotspot\/share\/opto\/macro.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}