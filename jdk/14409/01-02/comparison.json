{"files":[{"patch":"@@ -28,1 +28,2 @@\n- * @summary Test VarHandle::isAccessModeSupported on indirect VarHandle produced by MethodHandles.filterCoordinates\n+ * @summary Test VarHandle::isAccessModeSupported on indirect VarHandle\n+ *          produced by MethodHandles.filterCoordinates\n@@ -44,1 +45,2 @@\n-        var addOne = lookup.bind((IntUnaryOperator) a -> a + 1, \"applyAsInt\", MethodType.methodType(int.class, int.class));\n+        var addOne = lookup.bind((IntUnaryOperator) a -> a + 1, \"applyAsInt\",\n+                MethodType.methodType(int.class, int.class));\n@@ -48,1 +50,2 @@\n-            assertEquals(intArrayVh.isAccessModeSupported(mode), offsetIntArrayVh.isAccessModeSupported(mode), mode.toString());\n+            assertEquals(intArrayVh.isAccessModeSupported(mode),\n+                    offsetIntArrayVh.isAccessModeSupported(mode), mode.toString());\n@@ -55,1 +58,2 @@\n-            assertEquals(stringArrayVh.isAccessModeSupported(mode), offsetStringArrayVh.isAccessModeSupported(mode), mode.toString());\n+            assertEquals(stringArrayVh.isAccessModeSupported(mode),\n+                    offsetStringArrayVh.isAccessModeSupported(mode), mode.toString());\n","filename":"test\/jdk\/java\/lang\/invoke\/VarHandles\/IndirectVarHandleTest.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"}]}