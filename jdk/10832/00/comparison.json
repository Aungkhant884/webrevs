{"files":[{"patch":"@@ -135,3 +135,0 @@\n-  assert(action != PlaceholderTable::LOAD_INSTANCE || seen == NULL,\n-         \"Only one LOAD_INSTANCE allowed at a time\");\n-\n","filename":"src\/hotspot\/share\/classfile\/placeholders.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -513,0 +513,3 @@\n+  assert(EnableWaitForParallelLoad,\n+         \"Only called when enabling legacy parallel class loading logic \"\n+         \"for non-parallel capable class loaders\");\n@@ -547,3 +550,5 @@\n-\/\/ parallelCapable class loaders do NOT wait for parallel superclass loads to complete\n-\/\/ Serial class loaders and bootstrap classloader do wait for superclass loads\n-static bool should_wait_for_loading(Handle class_loader) {\n+\/\/ Bootstrap and non-parallel capable class loaders use the LOAD_INSTANCE placeholder to\n+\/\/ wait for parallel class loading and to check for circularity error for Xcomp when loading\n+\/\/ signature classes.\n+\/\/ parallelCapable class loaders do NOT wait for parallel loads to complete\n+static bool needs_load_placeholder(Handle class_loader) {\n@@ -586,1 +591,0 @@\n-        oldprobe = NULL;  \/\/ Other thread could delete this placeholder entry\n@@ -590,1 +594,1 @@\n-        } else {\n+        } else if (EnableWaitForParallelLoad) {\n@@ -592,0 +596,2 @@\n+        } else {\n+          return NULL;\n@@ -717,1 +723,1 @@\n-      if (should_wait_for_loading(class_loader)) {\n+      if (needs_load_placeholder(class_loader)) {\n@@ -731,2 +737,3 @@\n-        } else if (should_wait_for_loading(class_loader)) {\n-          \/\/ Add the LOAD_INSTANCE token. Threads will wait on loading to complete for this thread.\n+        } else if (needs_load_placeholder(class_loader)) {\n+          \/\/ Add the LOAD_INSTANCE token. Threads will wait on loading to complete for this thread,\n+          \/\/ and check for ClassCircularityError with -Xcomp.\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":15,"deletions":8,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -541,0 +541,1 @@\n+  { \"EnableWaitForParallelLoad\",    JDK_Version::jdk(20), JDK_Version::jdk(21), JDK_Version::jdk(22) },\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -683,0 +683,4 @@\n+  product(bool, EnableWaitForParallelLoad, false,                           \\\n+          \"(Deprecated) Enable legacy parallel classloading logic for \"     \\\n+          \"class loaders not registered as parallel capable\")               \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -64,0 +64,1 @@\n+            {\"EnableWaitForParallelLoad\", \"false\"},\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/VMDeprecatedOptions.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -84,1 +84,1 @@\n-                wait();  \/\/ Give up lock before request to load B\n+                wait(200);  \/\/ Give up lock before request to load B\n","filename":"test\/hotspot\/jtreg\/runtime\/ParallelLoad\/ParallelSuper\/MyLoader.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n- * @run main\/othervm ParallelSuperTest -parallel\n+ * @run main\/othervm -XX:+EnableWaitForParallelLoad ParallelSuperTest -parallel\n","filename":"test\/hotspot\/jtreg\/runtime\/ParallelLoad\/ParallelSuper\/ParallelSuperTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}