{"files":[{"patch":"@@ -5608,0 +5608,31 @@\n+    private static CharPredicate and(CharPredicate p1, CharPredicate p2,\n+                                     boolean bmpChar) {\n+        if (bmpChar) {\n+            return (BmpCharPredicate)(ch -> p1.is(ch) && p2.is(ch));\n+        } else {\n+            return (CharPredicate)(ch -> p1.is(ch) && p2.is(ch));\n+        }\n+    }\n+\n+    private static CharPredicate union(CharPredicate p1, CharPredicate p2,\n+                                       boolean bmpChar) {\n+        if (bmpChar) {\n+            return (BmpCharPredicate)(ch -> p1.is(ch) || p2.is(ch));\n+        } else {\n+            return (CharPredicate)(ch -> p1.is(ch) || p2.is(ch));\n+        }\n+    }\n+\n+    private static CharPredicate union(CharPredicate p1, CharPredicate p2,\n+                                       CharPredicate p3, boolean bmpChar) {\n+        if (bmpChar) {\n+            return (BmpCharPredicate)(ch -> p1.is(ch) || p2.is(ch) || p3.is(ch));\n+        } else {\n+            return (CharPredicate)(ch -> p1.is(ch) || p2.is(ch) || p3.is(ch));\n+        }\n+    }\n+\n+    private static CharPredicate negate(CharPredicate p1) {\n+        return (CharPredicate)(ch -> !p1.is(ch));\n+    }\n+\n@@ -5613,1 +5644,1 @@\n-            return ch -> is(ch) && p.is(ch);\n+            return Pattern.and(this, p, false);\n@@ -5616,1 +5647,1 @@\n-            return ch -> is(ch) || p.is(ch);\n+            return Pattern.union(this, p, false);\n@@ -5620,1 +5651,1 @@\n-            return ch -> is(ch) || p1.is(ch) || p2.is(ch);\n+            return Pattern.union(this, p1, p2, false);\n@@ -5623,1 +5654,1 @@\n-            return ch -> !is(ch);\n+            return Pattern.negate(this);\n@@ -5630,3 +5661,1 @@\n-            if (p instanceof BmpCharPredicate)\n-                return (BmpCharPredicate)(ch -> is(ch) && p.is(ch));\n-            return ch -> is(ch) && p.is(ch);\n+            return Pattern.and(this, p, p instanceof BmpCharPredicate);\n@@ -5635,17 +5664,7 @@\n-            if (p instanceof BmpCharPredicate)\n-                return (BmpCharPredicate)(ch -> is(ch) || p.is(ch));\n-            return ch -> is(ch) || p.is(ch);\n-        }\n-        static CharPredicate union(CharPredicate... predicates) {\n-            CharPredicate cp = ch -> {\n-                for (CharPredicate p : predicates) {\n-                    if (!p.is(ch))\n-                        return false;\n-                }\n-                return true;\n-            };\n-            for (CharPredicate p : predicates) {\n-                if (! (p instanceof BmpCharPredicate))\n-                    return cp;\n-            }\n-            return (BmpCharPredicate)cp;\n+            return Pattern.union(this, p, p instanceof BmpCharPredicate);\n+        }\n+        default CharPredicate union(CharPredicate p1,\n+                                    CharPredicate p2) {\n+            return Pattern.union(this, p1, p2,\n+                                 p1 instanceof BmpCharPredicate &&\n+                                 p2 instanceof BmpCharPredicate);\n","filename":"src\/java.base\/share\/classes\/java\/util\/regex\/Pattern.java","additions":43,"deletions":24,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.java.util.regex;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.regex.Pattern;\n+import java.util.regex.Matcher;\n+\n+@State(Scope.Benchmark)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Fork(value=1, jvmArgs= {\"-showversion\", \"-XX:+UseSerialGC\"})\n+@Warmup(iterations = 1, time = 10, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 3, time = 10, timeUnit = TimeUnit.SECONDS)\n+public class FindPattern {\n+    @Param({\"[^A-Za-z0-9]\", \"[A-Za-z0-9]\"})\n+    static String patternString;\n+    @Param({\"abcdefghijklmnop1234567890ABCDEFGHIJKLMNOP\",\n+            \",,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\"})\n+    static String text;\n+    static Pattern pattern;\n+\n+    @Setup(Level.Trial)\n+    public void setupTrial() {\n+        pattern = Pattern.compile(patternString);\n+    }\n+\n+    @Benchmark\n+    @BenchmarkMode(Mode.AverageTime)\n+    public int testFind() {\n+        int counter = 0;\n+        Matcher m = pattern.matcher(text);\n+        while (m.find()) {\n+            counter++;\n+        }\n+        return counter;\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/util\/regex\/FindPattern.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"}]}