{"files":[{"patch":"@@ -586,1 +586,1 @@\n-  inline void atomic_copy64(const volatile void *src, volatile void *dst) {\n+  static inline void atomic_copy64(const volatile void *src, volatile void *dst) {\n","filename":"src\/hotspot\/os_cpu\/bsd_aarch64\/os_bsd_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -437,1 +437,1 @@\n-  inline void atomic_copy64(const volatile void *src, volatile void *dst) {\n+  static inline void atomic_copy64(const volatile void *src, volatile void *dst) {\n","filename":"src\/hotspot\/os_cpu\/linux_aarch64\/os_linux_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"memory\/allStatic.hpp\"\n@@ -33,16 +34,15 @@\n-struct arm_atomic_funcs {\n-  int64_t (*cmpxchg_long_func)(int64_t compare_value,\n-                               int64_t exchange_value,\n-                               volatile int64_t *dest);\n-\n-  int64_t (*load_long_func)(const volatile int64_t*);\n-\n-  void (*store_long_func)(int64_t, volatile int64_t*);\n-\n-  int32_t  (*add_func)(int32_t add_value, volatile int32_t *dest);\n-\n-  int32_t  (*xchg_func)(int32_t exchange_value, volatile int32_t *dest);\n-\n-  int32_t  (*cmpxchg_func)(int32_t compare_value,\n-                           int32_t exchange_value,\n-                           volatile int32_t *dest);\n+class ARMAtomicFuncs : AllStatic {\n+public:\n+  typedef int64_t (*cmpxchg_long_func_t)(int64_t, int64_t, volatile int64_t*);\n+  typedef int64_t (*load_long_func_t)(const volatile int64_t*);\n+  typedef void (*store_long_func_t)(int64_t, volatile int64_t*);\n+  typedef int32_t  (*atomic_add_func_t)(int32_t add_value, volatile int32_t *dest);\n+  typedef int32_t  (*atomic_xchg_func_t)(int32_t exchange_value, volatile int32_t *dest);\n+  typedef int32_t (*cmpxchg_func_t)(int32_t, int32_t, volatile int32_t*);\n+\n+  static cmpxchg_long_func_t  _cmpxchg_long_func;\n+  static load_long_func_t     _load_long_func;\n+  static store_long_func_t    _store_long_func;\n+  static atomic_add_func_t    _add_func;\n+  static atomic_xchg_func_t   _xchg_func;\n+  static cmpxchg_func_t       _cmpxchg_func;\n@@ -65,2 +65,0 @@\n-extern arm_atomic_funcs _arm_atomic;\n-\n@@ -86,1 +84,1 @@\n-    (*_arm_atomic.load_long_func)(reinterpret_cast<const volatile int64_t*>(src)));\n+    (*ARMAtomicFuncs::_load_long_func)(reinterpret_cast<const volatile int64_t*>(src)));\n@@ -94,1 +92,1 @@\n-  (*_arm_atomic.store_long_func)(\n+  (*ARMAtomicFuncs::_store_long_func)(\n@@ -120,1 +118,1 @@\n-  return add_using_helper<int32_t>(_arm_atomic.add_func, dest, add_value);\n+  return add_using_helper<int32_t>(ARMAtomicFuncs::_add_func, dest, add_value);\n@@ -130,1 +128,1 @@\n-  return xchg_using_helper<int32_t>(_arm_atomic.xchg_func, dest, exchange_value);\n+  return xchg_using_helper<int32_t>(ARMAtomicFuncs::_xchg_func, dest, exchange_value);\n@@ -145,1 +143,1 @@\n-  return (*_arm_atomic.cmpxchg_func)(compare_value, exchange_value, dest);\n+  return (*ARMAtomicFuncs::_cmpxchg_func)(compare_value, exchange_value, dest);\n@@ -153,1 +151,1 @@\n-  return (*_arm_atomic.cmpxchg_long_func)(compare_value, exchange_value, dest);\n+  return (*ARMAtomicFuncs::_cmpxchg_long_func)(compare_value, exchange_value, dest);\n","filename":"src\/hotspot\/os_cpu\/linux_arm\/atomic_linux_arm.hpp","additions":22,"deletions":24,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -164,1 +164,1 @@\n-        fp += os::C_frame_offset;\n+        fp += C_frame_offset;\n@@ -202,1 +202,1 @@\n-    return frame(fr->sender_sp(), fr->link() + os::C_frame_offset, pc);\n+    return frame(fr->sender_sp(), fr->link() + C_frame_offset, pc);\n@@ -221,1 +221,1 @@\n-  frame myframe((intptr_t*)os::current_stack_pointer(), fp + os::C_frame_offset,\n+  frame myframe((intptr_t*)os::current_stack_pointer(), fp + C_frame_offset,\n@@ -504,9 +504,0 @@\n-arm_atomic_funcs _arm_atomic = {\n-  arm_atomic_funcs::cmpxchg_long_bootstrap,\n-  arm_atomic_funcs::load_long_bootstrap,\n-  arm_atomic_funcs::store_long_bootstrap,\n-  arm_atomic_funcs::add_bootstrap,\n-  arm_atomic_funcs::xchg_bootstrap,\n-  arm_atomic_funcs::cmpxchg_bootstrap,\n-};\n-typedef int64_t cmpxchg_long_func_t(int64_t, int64_t, volatile int64_t*);\n@@ -514,1 +505,8 @@\n-int64_t arm_atomic_funcs::cmpxchg_long_bootstrap(int64_t compare_value, int64_t exchange_value, volatile int64_t* dest) {\n+ARMAtomicFuncs::cmpxchg_long_func_t ARMAtomicFuncs::_cmpxchg_long_func = ARMAtomicFuncs::cmpxchg_long_bootstrap;\n+ARMAtomicFuncs::load_long_func_t    ARMAtomicFuncs::_load_long_func    = ARMAtomicFuncs::load_long_bootstrap;\n+ARMAtomicFuncs::store_long_func_t   ARMAtomicFuncs::_store_long_func   = ARMAtomicFuncs::store_long_bootstrap;\n+ARMAtomicFuncs::atomic_add_func_t   ARMAtomicFuncs::_add_func          = ARMAtomicFuncs::add_bootstrap;\n+ARMAtomicFuncs::atomic_xchg_func_t  ARMAtomicFuncs::_xchg_func         = ARMAtomicFuncs::xchg_bootstrap;\n+ARMAtomicFuncs::cmpxchg_func_t      ARMAtomicFuncs::_cmpxchg_func      = ARMAtomicFuncs::cmpxchg_bootstrap;\n+\n+int64_t ARMAtomicFuncs::cmpxchg_long_bootstrap(int64_t compare_value, int64_t exchange_value, volatile int64_t* dest) {\n@@ -516,1 +514,1 @@\n-  cmpxchg_long_func_t* func = CAST_TO_FN_PTR(cmpxchg_long_func_t*, StubRoutines::atomic_cmpxchg_long_entry());\n+  cmpxchg_long_func_t func = CAST_TO_FN_PTR(cmpxchg_long_func_t, StubRoutines::atomic_cmpxchg_long_entry());\n@@ -519,1 +517,1 @@\n-    _arm_atomic.cmpxchg_long_func = func;\n+    _cmpxchg_long_func = func;\n@@ -529,1 +527,0 @@\n-typedef int64_t load_long_func_t(const volatile int64_t*);\n@@ -531,1 +528,1 @@\n-int64_t arm_atomic_funcs::load_long_bootstrap(const volatile int64_t* src) {\n+int64_t ARMAtomicFuncs::load_long_bootstrap(const volatile int64_t* src) {\n@@ -533,1 +530,1 @@\n-  load_long_func_t* func = CAST_TO_FN_PTR(load_long_func_t*, StubRoutines::atomic_load_long_entry());\n+  load_long_func_t func = CAST_TO_FN_PTR(load_long_func_t, StubRoutines::atomic_load_long_entry());\n@@ -536,1 +533,1 @@\n-    _arm_atomic.load_long_func = func;\n+    _load_long_func = func;\n@@ -545,3 +542,1 @@\n-typedef void store_long_func_t(int64_t, volatile int64_t*);\n-\n-void arm_atomic_funcs::store_long_bootstrap(int64_t val, volatile int64_t* dest) {\n+void ARMAtomicFuncs::store_long_bootstrap(int64_t val, volatile int64_t* dest) {\n@@ -549,1 +544,1 @@\n-  store_long_func_t* func = CAST_TO_FN_PTR(store_long_func_t*, StubRoutines::atomic_store_long_entry());\n+  store_long_func_t func = CAST_TO_FN_PTR(store_long_func_t, StubRoutines::atomic_store_long_entry());\n@@ -552,1 +547,1 @@\n-    _arm_atomic.store_long_func = func;\n+    _store_long_func = func;\n@@ -560,5 +555,3 @@\n-typedef int32_t  atomic_add_func_t(int32_t add_value, volatile int32_t *dest);\n-\n-int32_t  arm_atomic_funcs::add_bootstrap(int32_t add_value, volatile int32_t *dest) {\n-  atomic_add_func_t * func = CAST_TO_FN_PTR(atomic_add_func_t*,\n-                                            StubRoutines::atomic_add_entry());\n+int32_t ARMAtomicFuncs::add_bootstrap(int32_t add_value, volatile int32_t *dest) {\n+  atomic_add_func_t func = CAST_TO_FN_PTR(atomic_add_func_t,\n+                                          StubRoutines::atomic_add_entry());\n@@ -566,1 +559,1 @@\n-    _arm_atomic.add_func = func;\n+    _add_func = func;\n@@ -575,5 +568,3 @@\n-typedef int32_t  atomic_xchg_func_t(int32_t exchange_value, volatile int32_t *dest);\n-\n-int32_t  arm_atomic_funcs::xchg_bootstrap(int32_t exchange_value, volatile int32_t *dest) {\n-  atomic_xchg_func_t * func = CAST_TO_FN_PTR(atomic_xchg_func_t*,\n-                                            StubRoutines::atomic_xchg_entry());\n+int32_t ARMAtomicFuncs::xchg_bootstrap(int32_t exchange_value, volatile int32_t *dest) {\n+  atomic_xchg_func_t func = CAST_TO_FN_PTR(atomic_xchg_func_t,\n+                                           StubRoutines::atomic_xchg_entry());\n@@ -581,1 +572,1 @@\n-    _arm_atomic.xchg_func = func;\n+    _xchg_func = func;\n@@ -590,3 +581,1 @@\n-typedef int32_t cmpxchg_func_t(int32_t, int32_t, volatile int32_t*);\n-\n-int32_t arm_atomic_funcs::cmpxchg_bootstrap(int32_t compare_value, int32_t exchange_value, volatile int32_t* dest) {\n+int32_t ARMAtomicFuncs::cmpxchg_bootstrap(int32_t compare_value, int32_t exchange_value, volatile int32_t* dest) {\n@@ -594,1 +583,1 @@\n-  cmpxchg_func_t* func = CAST_TO_FN_PTR(cmpxchg_func_t*, StubRoutines::atomic_cmpxchg_entry());\n+  cmpxchg_func_t func = CAST_TO_FN_PTR(cmpxchg_func_t, StubRoutines::atomic_cmpxchg_entry());\n@@ -597,1 +586,1 @@\n-    _arm_atomic.cmpxchg_func = func;\n+    _cmpxchg_func = func;\n","filename":"src\/hotspot\/os_cpu\/linux_arm\/os_linux_arm.cpp","additions":30,"deletions":41,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -435,1 +435,1 @@\n-  inline void atomic_copy64(const volatile void *src, volatile void *dst) {\n+  static inline void atomic_copy64(const volatile void *src, volatile void *dst) {\n","filename":"src\/hotspot\/os_cpu\/linux_riscv\/os_linux_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}