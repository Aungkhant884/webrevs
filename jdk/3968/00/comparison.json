{"files":[{"patch":"@@ -224,0 +224,10 @@\n+    \/\/ JDK-8265705\n+    \/\/ This is a temporary fix for aarch64: there, if the range-to-be-encoded is located\n+    \/\/  below 32g, either encoding base should be zero or base should be aligned to 4G\n+    \/\/  and shift should be zero. The simplest way to fix this for now is to force\n+    \/\/  shift to zero for both runtime and dumptime.\n+    \/\/ Note however that this is not a perfect solution. Ideally this whole function\n+    \/\/  should be CDS agnostic, that would simplify it - and testing - alot. See JDK-8267141\n+    \/\/  for details.\n+    AARCH64_ONLY(shift = 0);\n+\n","filename":"src\/hotspot\/share\/oops\/compressedOops.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @bug 8265705\n@@ -50,0 +51,2 @@\n+        \"0x500000000\",        \/\/ (20g) below 32g at a 4g aligned address, but cannot be expressed with a logical\n+                              \/\/    immediate on aarch64 (0x5_0000_0000) (see JDK-8265705)\n@@ -58,11 +61,19 @@\n-        for (String testEntry : testTable) {\n-            String filename = \"SharedBaseAddress\" + testEntry + \".jsa\";\n-            System.out.println(\"sharedBaseAddress = \" + testEntry);\n-            CDSOptions opts = (new CDSOptions())\n-                .setArchiveName(filename)\n-                .addPrefix(\"-XX:SharedBaseAddress=\" + testEntry)\n-                .addPrefix(\"-Xlog:cds=debug\")\n-                .addPrefix(\"-Xlog:cds+reloc=debug\")\n-                .addPrefix(\"-Xlog:nmt=debug\")\n-                .addPrefix(\"-Xlog:os=debug\")\n-                .addPrefix(\"-XX:NativeMemoryTracking=detail\");\n+        for (int run = 0; run < 2; run ++) {\n+            \/\/ We run twice:\n+            \/\/ Once, where we want to increase the chance that mapping the generated archive at the designated base\n+            \/\/ succeeds, to test Klass pointer encoding at that weird location. We do this by sizing heap + class space\n+            \/\/ small, and by switching off compressed oops.\n+            \/\/ On the second run, we don't do this but instead go with default parameters. This is more of a test of\n+            \/\/ CDS' ability to recover if mapping at runtime fails.\n+            for (String testEntry : testTable) {\n+                String filename = \"SharedBaseAddress-base\" + testEntry + \"-run\" + run + \".jsa\";\n+                System.out.println(\"sharedBaseAddress = \" + testEntry);\n+                CDSOptions opts = (new CDSOptions())\n+                        .setArchiveName(filename)\n+                        .addPrefix(\"-XX:SharedBaseAddress=\" + testEntry)\n+                        .addPrefix(\"-Xlog:cds=debug\")\n+                        .addPrefix(\"-Xlog:cds+reloc=debug\")\n+                        .addPrefix(\"-Xlog:nmt=debug\")\n+                        .addPrefix(\"-Xlog:os=debug\")\n+                        .addPrefix(\"-Xlog:gc+metaspace\")\n+                        .addPrefix(\"-XX:NativeMemoryTracking=detail\");\n@@ -70,6 +81,12 @@\n-            CDSTestUtils.createArchiveAndCheck(opts);\n-            OutputAnalyzer out = CDSTestUtils.runWithArchiveAndCheck(opts);\n-            if (testEntry.equals(\"0\")) {\n-              out.shouldContain(\"Archive(s) were created with -XX:SharedBaseAddress=0. Always map at os-selected address.\")\n-                 .shouldContain(\"Try to map archive(s) at an alternative address\")\n-                 .shouldNotMatch(failedPattern);\n+                if (run == 0) {\n+                    opts.addPrefix(\"-Xmx128m\")\n+                        .addPrefix(\"-XX:CompressedClassSpaceSize=32m\")\n+                        .addPrefix(\"-XX:-UseCompressedOops\");\n+                }\n+                CDSTestUtils.createArchiveAndCheck(opts);\n+                OutputAnalyzer out = CDSTestUtils.runWithArchiveAndCheck(opts);\n+                if (testEntry.equals(\"0\")) {\n+                    out.shouldContain(\"Archive(s) were created with -XX:SharedBaseAddress=0. Always map at os-selected address.\")\n+                            .shouldContain(\"Try to map archive(s) at an alternative address\")\n+                            .shouldNotMatch(failedPattern);\n+                }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/SharedBaseAddress.java","additions":34,"deletions":17,"binary":false,"changes":51,"status":"modified"}]}