{"files":[{"patch":"@@ -140,1 +140,1 @@\n-     * MemoryLayout arrayLayout = MemoryLayout.sequenceLayout(-1,\n+     * SequenceLayout arrayLayout = MemoryLayout.sequenceLayout(-1,\n@@ -154,0 +154,16 @@\n+     * Additionally, the values of {@code x}, {@code y} and {@code z} are constrained as follows:\n+     * <ul>\n+     *     <li>{@code 0 <= x < arrayLayout.elementCount() }<\/li>\n+     *     <li>{@code 0 <= y < 10 }<\/li>\n+     *     <li>{@code 0 <= z < 20 }<\/li>\n+     * <\/ul>\n+     * <p>\n+     * Consider the following access expressions:\n+     * {@snippet lang=java :\n+     * int value1 = arrayHandle.get(10, 2, 4); \/\/ ok, accessed offset = 8176\n+     * int value2 = arrayHandle.get(0, 0, 30); \/\/ out of bounds value for z\n+     * }\n+     * In the first case, access is well-formed, as the values for {@code x}, {@code y} and {@code z} conform to\n+     * the bounds specified above. In the second case, access fails with {@link IndexOutOfBoundsException},\n+     * as the value for {@code z} is outside its specified bounds.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/ValueLayout.java","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"}]}