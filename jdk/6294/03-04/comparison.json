{"files":[{"patch":"@@ -3045,1 +3045,0 @@\n-\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,7 +29,7 @@\n-\/\/ arith_op sub functions\n-void arith_op_single_cpu(LIR_Code code, LIR_Opr left, LIR_Opr right, LIR_Opr dest);\n-void arith_op_double_cpu(LIR_Code code, LIR_Opr left, LIR_Opr right, LIR_Opr dest);\n-void arith_op_single_fpu(LIR_Code code, LIR_Opr left, LIR_Opr right, LIR_Opr dest);\n-void arith_op_double_fpu(LIR_Code code, LIR_Opr left, LIR_Opr right, LIR_Opr dest);\n-void arith_op_single_cpu_right_constant(LIR_Code code, LIR_Opr left, LIR_Opr right, Register lreg, Register dreg);\n-void arithmetic_idiv(LIR_Op3* op, bool is_irem);\n+  \/\/ arith_op sub functions\n+  void arith_op_single_cpu(LIR_Code code, LIR_Opr left, LIR_Opr right, LIR_Opr dest);\n+  void arith_op_double_cpu(LIR_Code code, LIR_Opr left, LIR_Opr right, LIR_Opr dest);\n+  void arith_op_single_fpu(LIR_Code code, LIR_Opr left, LIR_Opr right, LIR_Opr dest);\n+  void arith_op_double_fpu(LIR_Code code, LIR_Opr left, LIR_Opr right, LIR_Opr dest);\n+  void arith_op_single_cpu_right_constant(LIR_Code code, LIR_Opr left, LIR_Opr right, Register lreg, Register dreg);\n+  void arithmetic_idiv(LIR_Op3* op, bool is_irem);\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_arith_riscv.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+\n@@ -50,0 +51,1 @@\n+\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_arraycopy_riscv.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -193,1 +193,0 @@\n-\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -146,0 +146,5 @@\n+inline intptr_t* frame::link_or_null() const {\n+  intptr_t** ptr = (intptr_t **)addr_at(link_offset);\n+  return os::is_readable_pointer(ptr) ? *ptr : NULL;\n+}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/frame_riscv.inline.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -98,0 +98,1 @@\n+\n","filename":"src\/hotspot\/cpu\/riscv\/globals_riscv.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -151,1 +151,1 @@\n-\/\/ Load float value from 'address'. The value is loaded onto the FPU register v0.\n+  \/\/ Load float value from 'address'. The value is loaded onto the FPU register v0.\n","filename":"src\/hotspot\/cpu\/riscv\/interp_masm_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -857,0 +857,1 @@\n+\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -245,1 +245,0 @@\n-\n","filename":"src\/hotspot\/cpu\/riscv\/methodHandles_riscv.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -320,60 +320,0 @@\n-\/\/ A set of registers\n-template<class RegImpl>\n-class AbstractRegSet {\n-  uint32_t _bitset;\n-\n-public:\n-  AbstractRegSet(uint32_t bitset) : _bitset(bitset) { }\n-\n-  AbstractRegSet() : _bitset(0) { }\n-\n-  AbstractRegSet(RegImpl r1) : _bitset(1 << r1->encoding()) { }\n-\n-  AbstractRegSet operator+(const AbstractRegSet aSet) const {\n-    AbstractRegSet result(_bitset | aSet._bitset);\n-    return result;\n-  }\n-\n-  AbstractRegSet operator-(const AbstractRegSet aSet) const {\n-    AbstractRegSet result(_bitset & ~aSet._bitset);\n-    return result;\n-  }\n-\n-  AbstractRegSet &operator+=(const AbstractRegSet aSet) {\n-    *this = *this + aSet;\n-    return *this;\n-  }\n-\n-  AbstractRegSet &operator-=(const AbstractRegSet aSet) {\n-    *this = *this - aSet;\n-    return *this;\n-  }\n-\n-  static AbstractRegSet of(RegImpl r1) {\n-    return AbstractRegSet(r1);\n-  }\n-\n-  static AbstractRegSet of(RegImpl r1, RegImpl r2) {\n-    return of(r1) + r2;\n-  }\n-\n-  static AbstractRegSet of(RegImpl r1, RegImpl r2, RegImpl r3) {\n-    return of(r1, r2) + r3;\n-  }\n-\n-  static AbstractRegSet of(RegImpl r1, RegImpl r2, RegImpl r3, RegImpl r4) {\n-    return of(r1, r2, r3) + r4;\n-  }\n-\n-  static AbstractRegSet range(RegImpl start, RegImpl end) {\n-    uint32_t bits = ~0;\n-    bits <<= start->encoding();\n-    bits <<= (31 - end->encoding());\n-    bits >>= (31 - end->encoding());\n-\n-    return AbstractRegSet(bits);\n-  }\n-\n-  uint32_t bits() const { return _bitset; }\n-};\n-\n","filename":"src\/hotspot\/cpu\/riscv\/register_riscv.hpp","additions":0,"deletions":60,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -1798,0 +1798,1 @@\n+\n@@ -1800,0 +1801,1 @@\n+    case Op_CountPositives:\n@@ -1801,0 +1803,1 @@\n+\n@@ -1803,0 +1806,1 @@\n+\n@@ -1806,0 +1810,1 @@\n+\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -455,1 +455,0 @@\n-\n","filename":"src\/hotspot\/cpu\/riscv\/templateTable_riscv.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -306,1 +306,0 @@\n-\n","filename":"src\/hotspot\/os_cpu\/linux_riscv\/os_linux_riscv.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}