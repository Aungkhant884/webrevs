{"files":[{"patch":"@@ -1514,1 +1514,1 @@\n-                        \/\/ Found a wrong record component: save it so that we can remove it later.\n+                        \/\/ Found a record component with an erroneous type: save it so that it can be removed later.\n@@ -1526,1 +1526,1 @@\n-                \/\/ Found a wrong record component: remove it and create a new one.\n+                \/\/ Found a record component with an erroneous type: remove it and create a new one\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symbol.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,0 +28,4 @@\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.jdeps\/com.sun.tools.classfile\n@@ -29,1 +33,1 @@\n- * @compile -processor GenerateTypeProcessor RecordComponentTypeTest.java\n+ * @run main RecordComponentTypeTest\n@@ -32,3 +36,133 @@\n-public record RecordComponentTypeTest(\n-        GeneratedType generatedType\n-) { }\n+import com.sun.tools.classfile.*;\n+\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import toolbox.JavacTask;\n+import toolbox.TestRunner;\n+import toolbox.ToolBox;\n+import toolbox.Task;\n+\n+public class RecordComponentTypeTest extends TestRunner {\n+\n+    ToolBox tb;\n+    ClassFile cf;\n+\n+    public RecordComponentTypeTest() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        RecordComponentTypeTest t = new RecordComponentTypeTest();\n+        t.runTests();\n+    }\n+\n+    @Test\n+    public void testRecordComponentUsingGeneratedType() throws Exception {\n+        String code = \"public record RecordComponentUsingGeneratedType(GeneratedType generatedType) { }\";\n+        Path curPath = Path.of(\".\");\n+\n+        \/\/ Have no annotation processor.\n+        List<String> output = new JavacTask(tb)\n+                .sources(code)\n+                .outdir(curPath)\n+                .options(\"-XDrawDiagnostics\")\n+                .run(Task.Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+        List<String> expected = Arrays.asList(\n+                \"RecordComponentUsingGeneratedType.java:1:49: compiler.err.cant.resolve.location: kindname.class, \" +\n+                \"GeneratedType, , , (compiler.misc.location: kindname.class, RecordComponentUsingGeneratedType, null)\",\n+                \"1 error\");\n+        tb.checkEqual(expected, output);\n+\n+        \/\/ Have annotation processor, and processor generates expected type.\n+        new JavacTask(tb)\n+                .sources(code)\n+                .options(\"-processor\", \"GenerateTypeProcessor\")\n+                .outdir(curPath)\n+                .run();\n+    }\n+\n+    @Test\n+    public void testRecordComponentUsingUnknownType() throws Exception {\n+        String code = \"public record RecordComponentUsingUnknownType(UnknownType unknownType) { }\";\n+        Path curPath = Path.of(\".\");\n+\n+        \/\/ Have no annotation processor.\n+        List<String> output = new JavacTask(tb)\n+                .sources(code)\n+                .outdir(curPath)\n+                .options(\"-XDrawDiagnostics\")\n+                .run(Task.Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+        List<String> expected = Arrays.asList(\n+                \"RecordComponentUsingUnknownType.java:1:47: compiler.err.cant.resolve.location: kindname.class, \" +\n+                \"UnknownType, , , (compiler.misc.location: kindname.class, RecordComponentUsingUnknownType, null)\",\n+                \"1 error\");\n+        tb.checkEqual(expected, output);\n+\n+        \/\/ Have annotation processor, but processor doesn't generate the expected type.\n+        List<String> output2 = new JavacTask(tb)\n+                .sources(code)\n+                .outdir(curPath)\n+                .options(\"-XDrawDiagnostics\", \"-processor\", \"GenerateTypeProcessor\")\n+                .run(Task.Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+        List<String> expected2 = Arrays.asList(\n+                \"RecordComponentUsingUnknownType.java:1:47: compiler.err.cant.resolve.location: kindname.class, \" +\n+                \"UnknownType, , , (compiler.misc.location: kindname.class, RecordComponentUsingUnknownType, null)\",\n+                \"1 error\");\n+        tb.checkEqual(expected2, output2);\n+    }\n+\n+\n+    @Test\n+    public void testRecordComponentUsingGeneratedTypeWithAnnotation() throws Exception {\n+        String code = \"\"\"\n+                import java.lang.annotation.Retention;\n+                import java.lang.annotation.RetentionPolicy;\n+                public record RecordComponentUsingGeneratedTypeWithAnnotation(@TestAnnotation GeneratedType generatedType) { }\n+\n+                @Retention(RetentionPolicy.RUNTIME)\n+                @interface TestAnnotation { }\n+                \"\"\";\n+        Path curPath = Path.of(\".\");\n+        new JavacTask(tb)\n+                .sources(code)\n+                .options(\"-processor\", \"GenerateTypeProcessor\")\n+                .outdir(curPath)\n+                .run();\n+        cf = ClassFile.read(curPath.resolve(\"RecordComponentUsingGeneratedTypeWithAnnotation.class\"));\n+\n+        for (Field field : cf.fields) {\n+            if (\"generatedType\".equals(field.getName(cf.constant_pool))) {\n+                checkRuntimeVisibleAnnotation(field.attributes);\n+            }\n+        }\n+\n+        for (Method method : cf.methods) {\n+            if (\"generatedType\".equals(method.getName(cf.constant_pool))) {\n+                checkRuntimeVisibleAnnotation(method.attributes);\n+            }\n+        }\n+    }\n+\n+    private void checkRuntimeVisibleAnnotation(Attributes attributes) throws Exception {\n+        RuntimeVisibleAnnotations_attribute annotations =\n+                (RuntimeVisibleAnnotations_attribute) attributes.get(Attribute.RuntimeVisibleAnnotations);\n+        boolean hasAnnotation = false;\n+        for (Annotation annotation : annotations.annotations) {\n+            if (\"LTestAnnotation;\".equals(cf.constant_pool.getUTF8Value(annotation.type_index))) {\n+                hasAnnotation = true;\n+            }\n+        }\n+        if (!hasAnnotation) {\n+            throw new AssertionError(\"Expected RuntimeVisibleAnnotation doesn't appear\");\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/records\/recordComponent\/RecordComponentTypeTest.java","additions":138,"deletions":4,"binary":false,"changes":142,"status":"modified"}]}