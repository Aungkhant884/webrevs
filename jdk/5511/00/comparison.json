{"files":[{"patch":"@@ -1507,0 +1507,1 @@\n+            RecordComponent toRemove = null;\n@@ -1512,1 +1513,9 @@\n-                    return rc;\n+                    if (rc.type.hasTag(TypeTag.ERROR) && !var.sym.type.hasTag(TypeTag.ERROR)) {\n+                        \/\/ Found a wrong record component: save it so that we can remove it later.\n+                        \/\/ If the class type of the record component is generated by annotation processor, it should\n+                        \/\/ use the new actual class type and symbol instead of the old dummy ErrorType.\n+                        \/\/ toRemove = rc;\n+                    } else {\n+                        \/\/ Found a good record component: just return.\n+                        return rc;\n+                    }\n@@ -1516,1 +1525,6 @@\n-            if (addIfMissing) {\n+            if (toRemove != null) {\n+                \/\/ Found a wrong record component: remove it and create a new one.\n+                recordComponents = List.filter(recordComponents, toRemove);\n+                recordComponents = recordComponents.append(rc = new RecordComponent(var.sym, annotations));\n+            } else if (addIfMissing) {\n+                \/\/ Didn't find the record component: create one.\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symbol.java","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.annotation.processing.AbstractProcessor;\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.annotation.processing.SupportedAnnotationTypes;\n+import javax.lang.model.SourceVersion;\n+import javax.lang.model.element.TypeElement;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Set;\n+\n+@SupportedAnnotationTypes(\"*\")\n+public class GenerateTypeProcessor extends AbstractProcessor {\n+\n+    private String code = \"public class GeneratedType { }\";\n+\n+    private boolean firstTime = true;\n+\n+    @Override\n+    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+        \/\/ Create a new class: GeneratedType\n+        if (firstTime) {\n+            try (OutputStream out =\n+                         processingEnv.getFiler().createSourceFile(\"GeneratedType\").openOutputStream()) {\n+                out.write(code.getBytes());\n+            } catch (IOException ex) {\n+                ex.printStackTrace();\n+            }\n+            firstTime = false;\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public SourceVersion getSupportedSourceVersion() {\n+        return SourceVersion.latest();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/records\/recordComponent\/GenerateTypeProcessor.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -0,0 +1,34 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8273408\n+ * @summary The compiler shouldn't crash when record component uses the class generated by the annotation processor.\n+ * @compile GenerateTypeProcessor.java\n+ * @compile -processor GenerateTypeProcessor RecordComponentTypeTest.java\n+ *\/\n+\n+public record RecordComponentTypeTest(\n+        GeneratedType generatedType\n+) { }\n","filename":"test\/langtools\/tools\/javac\/records\/recordComponent\/RecordComponentTypeTest.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"}]}