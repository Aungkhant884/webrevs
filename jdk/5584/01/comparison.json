{"files":[{"patch":"@@ -1132,0 +1132,1 @@\n+    mapinfo->set_header_base_archive_path_offset();\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,9 +34,11 @@\n-  { \"CDSFileMapHeaderBase::_magic\",           offset_of(CDSFileMapHeaderBase, _magic)           },\n-  { \"CDSFileMapHeaderBase::_crc\",             offset_of(CDSFileMapHeaderBase, _crc)             },\n-  { \"CDSFileMapHeaderBase::_version\",         offset_of(CDSFileMapHeaderBase, _version)         },\n-  { \"CDSFileMapHeaderBase::_space[0]\",        offset_of(CDSFileMapHeaderBase, _space)           },\n-  { \"FileMapHeader::_jvm_ident\",              offset_of(FileMapHeader, _jvm_ident)              },\n-  { \"FileMapHeader::_base_archive_name_size\", offset_of(FileMapHeader, _base_archive_name_size) },\n-  { \"CDSFileMapRegion::_crc\",                 offset_of(CDSFileMapRegion, _crc)                 },\n-  { \"CDSFileMapRegion::_used\",                offset_of(CDSFileMapRegion, _used)                },\n-  { \"DynamicArchiveHeader::_base_region_crc\", offset_of(DynamicArchiveHeader, _base_region_crc) }\n+  { \"CDSFileMapHeaderBase::_magic\",                     offset_of(CDSFileMapHeaderBase, _magic)             },\n+  { \"CDSFileMapHeaderBase::_crc\",                       offset_of(CDSFileMapHeaderBase, _crc)               },\n+  { \"CDSFileMapHeaderBase::_version\",                   offset_of(CDSFileMapHeaderBase, _version)           },\n+  { \"CDSFileMapHeaderBase::_space[0]\",                  offset_of(CDSFileMapHeaderBase, _space)             },\n+  { \"CDSFileMapHeaderBase::_header_size\",               offset_of(CDSFileMapHeaderBase, _header_size)       },\n+  { \"CDSFileMapHeaderBase::_base_archive_path_offset\",  offset_of(FileMapHeader, _base_archive_path_offset) },\n+  { \"FileMapHeader::_jvm_ident\",                        offset_of(FileMapHeader, _jvm_ident)                },\n+  { \"FileMapHeader::_base_archive_name_size\",           offset_of(FileMapHeader, _base_archive_name_size)   },\n+  { \"CDSFileMapRegion::_crc\",                           offset_of(CDSFileMapRegion, _crc)                   },\n+  { \"CDSFileMapRegion::_used\",                          offset_of(CDSFileMapRegion, _used)                  },\n+  { \"DynamicArchiveHeader::_base_region_crc\",           offset_of(DynamicArchiveHeader, _base_region_crc)   }\n","filename":"src\/hotspot\/share\/cds\/cdsConstants.cpp","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -328,1 +328,1 @@\n-                         \" [\" SIZE_FORMAT \" bytes header, \" SIZE_FORMAT \" bytes total]\",\n+                         \" [\" UINT32_FORMAT \" bytes header, \" SIZE_FORMAT \" bytes total]\",\n","filename":"src\/hotspot\/share\/cds\/dynamicArchive.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-  _header->set_header_size(header_size);\n+  _header->set_header_size((unsigned int)header_size);\n@@ -248,1 +248,2 @@\n-  \/\/ the following 2 fields will be set in write_header for dynamic archive header\n+  \/\/ the following 3 fields will be set in ArchiveBuilder::write_archive for dynamic archive header\n+  _base_archive_path_offset = 0;\n@@ -271,1 +272,1 @@\n-  st->print_cr(\"- header_size:                    \" SIZE_FORMAT, _header_size);\n+  st->print_cr(\"- header_size:                    \" UINT32_FORMAT, _header_size);\n@@ -288,0 +289,1 @@\n+  st->print_cr(\"- base_archive_path_offset:       \" UINT32_FORMAT, _base_archive_path_offset);\n@@ -1057,1 +1059,1 @@\n-                                                    int* size, char** base_archive_name) {\n+                                                    char** base_archive_name) {\n@@ -1060,1 +1062,0 @@\n-    *size = 0;\n@@ -1063,1 +1064,0 @@\n-\n@@ -1067,1 +1067,1 @@\n-  size_t n = os::read(fd, dynamic_header, (unsigned int)sz);\n+  size_t n = os::read(fd, (void*)dynamic_header, (unsigned int)sz);\n@@ -1076,1 +1076,0 @@\n-    *size = 0;\n@@ -1111,3 +1110,3 @@\n-  size_t sz = is_static() ? sizeof(FileMapHeader) : sizeof(DynamicArchiveHeader);\n-  size_t n = os::read(fd, header(), (unsigned int)sz);\n-  if (n != sz) {\n+  size_t runtime_header_size = is_static() ? sizeof(FileMapHeader) : sizeof(DynamicArchiveHeader);\n+  size_t n = os::read(fd, header(), (unsigned int)runtime_header_size);\n+  if (n != runtime_header_size) {\n@@ -1138,3 +1137,3 @@\n-  if (header()->header_size() != sz) {\n-    log_info(cds)(\"_header_size expected: \" SIZE_FORMAT, sz);\n-    log_info(cds)(\"               actual: \" SIZE_FORMAT, header()->header_size());\n+  if (header()->header_size() != (unsigned int)runtime_header_size) {\n+    log_info(cds)(\"_header_size expected: \" SIZE_FORMAT, runtime_header_size);\n+    log_info(cds)(\"               actual: \" UINT32_FORMAT, header()->header_size());\n@@ -1145,0 +1144,16 @@\n+  if (is_static()) {\n+    if (header()->base_archive_path_offset() != 0) {\n+      log_info(cds)(\"_base_archive_path_offset = \" UINT32_FORMAT, header()->base_archive_path_offset());\n+      fail_continue(\"_base_archive_path_offset should be 0\");\n+      return false;\n+    }\n+  } else {\n+    if (header()->base_archive_path_offset() != header()->header_size()) {\n+      log_info(cds)(\"_base_archive_path_offset should be equal to _header_size:\");\n+      log_info(cds)(\"  _base_archive_path_offset = \" UINT32_FORMAT, header()->base_archive_path_offset());\n+      log_info(cds)(\"  _header_size              = \" UINT32_FORMAT, header()->header_size());\n+      fail_continue(\"_base_archive_path_offset should be equal to _header_size\");\n+      return false;\n+    }\n+  }\n+\n@@ -2350,0 +2365,9 @@\n+void FileMapHeader::set_base_archive_path_offset() {\n+  if (_magic == CDS_ARCHIVE_MAGIC) {\n+    _base_archive_path_offset = 0;\n+  } else {\n+    assert(_magic == CDS_DYNAMIC_ARCHIVE_MAGIC, \"Must be dynamic archive\");\n+    _base_archive_path_offset = sizeof(DynamicArchiveHeader);\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":38,"deletions":14,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -187,2 +187,0 @@\n-  size_t _header_size;\n-\n@@ -256,1 +254,2 @@\n-  size_t header_size()                     const { return _header_size; }\n+  unsigned int header_size()               const { return _header_size; }\n+  unsigned int base_archive_path_offset()  const { return _base_archive_path_offset; }\n@@ -290,0 +289,1 @@\n+  void set_base_archive_path_offset();\n@@ -292,1 +292,1 @@\n-  void set_header_size(size_t s)                 { _header_size = s; }\n+  void set_header_size(unsigned int s)           { _header_size = s; }\n@@ -366,1 +366,1 @@\n-                                                int* size, char** base_archive_name);\n+                                                char** base_archive_name);\n@@ -401,0 +401,1 @@\n+  void   set_header_base_archive_path_offset()               { header()->set_base_archive_path_offset(); }\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-#define CURRENT_CDS_ARCHIVE_VERSION 11\n+#define CURRENT_CDS_ARCHIVE_VERSION 12\n@@ -63,0 +63,2 @@\n+\/\/ The declaration of the following 5 fields must never be changed\n+\/\/ in any future versions of HotSpot\n@@ -67,0 +69,7 @@\n+  unsigned int _header_size;     \/\/ total size of the header, in bytes\n+  \/\/ This field is present with (_version >= 12). Its declaration\n+  \/\/ must never be changed in any future versions of HotSpot.\n+  \/\/ If this is a dynamic archive, (((char*)this) + _base_archive_path_offset)\n+  \/\/ stores a 0-terminated string for the pathname of the base archive.\n+  \/\/ If this is a static archive, this field is 0.\n+  unsigned int _base_archive_path_offset;\n","filename":"src\/hotspot\/share\/include\/cds.h","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -3534,1 +3534,0 @@\n-        int name_size;\n@@ -3536,1 +3535,1 @@\n-          FileMapInfo::get_base_archive_name_from_header(temp_archive_path, &name_size, &SharedArchivePath);\n+          FileMapInfo::get_base_archive_name_from_header(temp_archive_path, &SharedArchivePath);\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -61,0 +61,2 @@\n+        \"_base_archive_path_offset should be 0\",\n+        \"The shared archive file has an incorrect header size.\",\n@@ -216,0 +218,1 @@\n+        \/\/ modify contents in random area\n@@ -221,0 +224,7 @@\n+\n+        \/\/ modify _base_archive_path_offet to not zero\n+        System.out.println(\"\\n8. modify _base_archive_path_offset to not zero\\n\");\n+        String baseArchivePathOffset = startNewArchive(\"base-arhive-path-offset\");\n+        copiedJsa = CDSArchiveUtils.copyArchiveFile(orgJsaFile, baseArchivePathOffset);\n+        CDSArchiveUtils.modifyHeaderIntField(copiedJsa, CDSArchiveUtils.offsetBaseArchivePathOffset, 1024);\n+        testAndCheck(verifyExecArgs);\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/SharedArchiveConsistency.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -55,0 +55,19 @@\n+    static void runTwo(String base, String top,\n+                       String jarName, String mainClassName, int exitValue,\n+                       String ... checkMessages) throws Exception {\n+        run2(base, top,\n+             \"-Xlog:cds\",\n+             \"-Xlog:cds+dynamic=debug\",\n+             \"-XX:+VerifySharedSpaces\",\n+             \"-cp\",\n+             jarName,\n+             mainClassName)\n+            .assertAbnormalExit(output -> {\n+                for (String s : checkMessages) {\n+                    output.shouldContain(s);\n+                }\n+                output.shouldHaveExitValue(exitValue);\n+            });\n+\n+    }\n+\n@@ -72,0 +91,1 @@\n+        System.out.println(\"\\n1. Modify the CRC values in the header of the top archive\");\n@@ -76,10 +96,52 @@\n-        run2(baseArchiveName, modTop,\n-            \"-Xlog:class+load\",\n-            \"-Xlog:cds+dynamic=debug,cds=debug\",\n-            \"-XX:+VerifySharedSpaces\",\n-            \"-cp\", appJar, mainClass)\n-            .assertAbnormalExit(output -> {\n-                    output.shouldContain(\"Header checksum verification failed\")\n-                          .shouldContain(\"Unable to use shared archive\")\n-                          .shouldHaveExitValue(1);\n-                });\n+        runTwo(baseArchiveName, modTop,\n+               appJar, mainClass, 1,\n+               new String[] {\"Header checksum verification failed\",\n+                             \"Unable to use shared archive\"});\n+\n+        \/\/ Make header size biger than the archive size\n+        System.out.println(\"\\n2. Make header size biger than the archive size\");\n+        String largerHeaderSize = getNewArchiveName(\"largerHeaderSize\");\n+        copiedJsa = CDSArchiveUtils.copyArchiveFile(jsa, largerHeaderSize);\n+        CDSArchiveUtils.modifyHeaderIntField(copiedJsa, CDSArchiveUtils.offsetHeaderSize,  (int)copiedJsa.length() + 1024);\n+\n+        runTwo(baseArchiveName, largerHeaderSize,\n+               appJar, mainClass, 1,\n+               new String[] {\"The shared archive file has an incorrect header size.\",\n+                             \"Unable to use shared archive\"});\n+\n+        \/\/ Make base archive path offset beyond of header size\n+        System.out.println(\"\\n3. Make base archive path offset beyond of header size.\");\n+        String wrongBaseArchivePathOffset = getNewArchiveName(\"wrongBaseArchivePathOffset\");\n+        copiedJsa = CDSArchiveUtils.copyArchiveFile(jsa, wrongBaseArchivePathOffset);\n+        int fileHeaderSize = (int)CDSArchiveUtils.fileHeaderSize(copiedJsa);\n+        CDSArchiveUtils.modifyHeaderIntField(copiedJsa, CDSArchiveUtils.offsetBaseArchivePathOffset,  fileHeaderSize + 1024);\n+        runTwo(baseArchiveName, largerHeaderSize,\n+               appJar, mainClass, 1,\n+               new String[] {\"The shared archive file has an incorrect header size.\",\n+                             \"Unable to use shared archive\"});\n+\n+        \/\/ Make base archive path offset points to middle of name size\n+        System.out.println(\"\\n4. Make base archive path offset points to middle of name size\");\n+        String wrongBasePathOffset = getNewArchiveName(\"wrongBasePathOffset\");\n+        copiedJsa = CDSArchiveUtils.copyArchiveFile(jsa, wrongBasePathOffset);\n+        int baseArchiveNameSize = CDSArchiveUtils.baseArchiveNameSize(copiedJsa);\n+        CDSArchiveUtils.modifyHeaderIntField(copiedJsa, CDSArchiveUtils.offsetBaseArchivePathOffset,\n+                                             CDSArchiveUtils.offsetBaseArchivePathOffset + baseArchiveNameSize\/2);\n+\n+        runTwo(baseArchiveName, wrongBasePathOffset,\n+               appJar, mainClass, 1,\n+               new String[] {\"_base_archive_path_offset should be equal to _header_size\",\n+                             \"Unable to use shared archive\"});\n+\n+        \/\/ Make base archive name not terminated with '\\0'\n+        System.out.println(\"\\n5. Make base archive name not terminated with '\\0'\");\n+        String wrongBaseName = getNewArchiveName(\"wrongBaseName\");\n+        copiedJsa = CDSArchiveUtils.copyArchiveFile(jsa, wrongBaseName);\n+        baseArchiveNameSize = CDSArchiveUtils.baseArchiveNameSize(copiedJsa);\n+        CDSArchiveUtils.modifyHeaderIntField(copiedJsa, CDSArchiveUtils.offsetBaseArchiveNameSize, baseArchiveNameSize - 2);\n+\n+        runTwo(baseArchiveName, wrongBaseName,\n+               appJar, mainClass, 1,\n+               new String[] {\"Error occurred during initialization of VM\",\n+                             \"Header checksum verification failed.\",\n+                             \"Unable to use shared archive\"});\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/ArchiveConsistency.java","additions":72,"deletions":10,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -49,5 +49,7 @@\n-    public static int offsetMagic;                \/\/ CDSFileMapHeaderBase::_magic\n-    public static int offsetVersion;              \/\/ CDSFileMapHeaderBase::_version\n-    public static int offsetJvmIdent;             \/\/ FileMapHeader::_jvm_ident\n-    public static int offsetBaseArchiveNameSize;  \/\/ FileMapHeader::_base_archive_name_size\n-    public static int spOffsetCrc;                \/\/ CDSFileMapRegion::_crc\n+    public static int offsetMagic;                \/\/ offset of CDSFileMapHeaderBase::_magic\n+    public static int offsetVersion;              \/\/ offset of CDSFileMapHeaderBase::_version\n+    public static int offsetHeaderSize;           \/\/ offset of CDSFileMapHeaderBase::_header_size\n+    public static int offsetBaseArchivePathOffset;\/\/ offset of CDSFileMapHeaderBase::_base_archive_path_offset\n+    public static int offsetJvmIdent;             \/\/ offset of FileMapHeader::_jvm_ident\n+    public static int offsetBaseArchiveNameSize;  \/\/ offset of FileMapHeader::_base_archive_name_size\n+    public static int spOffsetCrc;                \/\/ offset of CDSFileMapRegion::_crc\n@@ -85,0 +87,1 @@\n+            offsetHeaderSize = wb.getCDSOffsetForName(\"CDSFileMapHeaderBase::_header_size\");\n@@ -86,0 +89,1 @@\n+            offsetBaseArchivePathOffset = wb.getCDSOffsetForName(\"CDSFileMapHeaderBase::_base_archive_path_offset\");\n@@ -93,0 +97,1 @@\n+            \/\/ following two sizes are runtime values\n@@ -115,0 +120,1 @@\n+      int  headerSize = (int)readInt(jsaFile, offsetHeaderSize, 4);\n@@ -116,1 +122,1 @@\n-          return alignUpWithAlignment((long)staticArchiveHeaderSize);\n+          return alignUpWithAlignment((long)headerSize);\n@@ -118,3 +124,7 @@\n-          \/\/ dynamic archive store base archive name after header, so we count it in header size.\n-          int baseArchiveNameSize = (int)readInt(jsaFile, (long)offsetBaseArchiveNameSize, 4);\n-          return alignUpWithAlignment((long)dynamicArchiveHeaderSize + baseArchiveNameSize);\n+          \/\/ dynamic archive store base archive name at offsetBaseArchivePathOffset, the header size\n+          \/\/ should be offsetBaseArchivePath + archive name length.\n+          if (offsetBaseArchivePathOffset == 0) {\n+              throw new RuntimeException(\"Dynamic archive without base archive\");\n+          }\n+          long fileHeaderSize = alignUpWithAlignment(headerSize + baseArchiveNameSize(jsaFile));\n+          return fileHeaderSize;\n@@ -126,0 +136,4 @@\n+    public static int baseArchiveNameSize(File jsaFile) throws Exception {\n+       return (int)readInt(jsaFile, offsetBaseArchiveNameSize, 4);\n+    }\n+\n@@ -265,0 +279,4 @@\n+    public static void modifyFileHeaderSize(File jsaFile, int newHeaderSize) throws Exception {\n+        modifyHeaderIntField(jsaFile, offsetHeaderSize, newHeaderSize);\n+    }\n+\n","filename":"test\/lib\/jdk\/test\/lib\/cds\/CDSArchiveUtils.java","additions":27,"deletions":9,"binary":false,"changes":36,"status":"modified"}]}