{"files":[{"patch":"@@ -1133,1 +1133,1 @@\n-    mapinfo->set_header_base_archive_name_size(strlen(Arguments::GetSharedArchivePath()) + 1);\n+    mapinfo->set_header_base_archive_name_size((unsigned int)strlen(Arguments::GetSharedArchivePath()) + 1);\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -290,1 +290,1 @@\n-  st->print_cr(\"- base_archive_name_size:         \" SIZE_FORMAT, _base_archive_name_size);\n+  st->print_cr(\"- base_archive_name_size:         \" UINT32_FORMAT, _base_archive_name_size);\n@@ -1036,0 +1036,1 @@\n+\n@@ -1044,0 +1045,6 @@\n+    if (static_header->base_archive_path_offset() != 0) {\n+      log_info(cds)(\"_base_archive_path_offset should be 0\");\n+      log_info(cds)(\"_base_archive_path_offset = \" UINT32_FORMAT,\n+                    static_header->base_archive_path_offset());\n+      return false;\n+    }\n@@ -1052,0 +1059,24 @@\n+    if (dynamic_header->base_archive_path_offset() != dynamic_header->header_size()) {\n+      log_info(cds)(\"_base_archive_path_offset should be equal to _header_size:\");\n+      log_info(cds)(\"  _base_archive_path_offset = \" UINT32_FORMAT, dynamic_header->base_archive_path_offset());\n+      log_info(cds)(\"  _header_size              = \" UINT32_FORMAT, dynamic_header->header_size());\n+      return false;\n+    }\n+    unsigned int name_size = dynamic_header->base_archive_name_size();\n+    char* base_name = (char*)os::malloc(name_size, mtInternal);\n+    n = os::read(fd, base_name, name_size);\n+    if (n != name_size) {\n+      log_info(cds)(\"Read base archive name from %s failed\", archive_name);\n+      os::free(header);\n+      os::free(base_name);\n+      os::close(fd);\n+      return false;\n+    }\n+    if (!os::file_exists(base_name)) {\n+      log_info(cds)(\"Base archive %s does not exist\", base_name);\n+      os::free(header);\n+      os::free(base_name);\n+      os::close(fd);\n+      return false;\n+    }\n+    os::free(base_name);\n@@ -1100,0 +1131,8 @@\n+    if (!os::file_exists(*base_archive_name)) {\n+      log_info(cds)(\"Base archive file does not exist.\");\n+      FREE_C_HEAP_ARRAY(char, *base_archive_name);\n+      *base_archive_name = NULL;\n+      os::free(dynamic_header);\n+      os::close(fd);\n+      return false;\n+    }\n@@ -1144,16 +1183,0 @@\n-  if (is_static()) {\n-    if (header()->base_archive_path_offset() != 0) {\n-      log_info(cds)(\"_base_archive_path_offset = \" UINT32_FORMAT, header()->base_archive_path_offset());\n-      fail_continue(\"_base_archive_path_offset should be 0\");\n-      return false;\n-    }\n-  } else {\n-    if (header()->base_archive_path_offset() != header()->header_size()) {\n-      log_info(cds)(\"_base_archive_path_offset should be equal to _header_size:\");\n-      log_info(cds)(\"  _base_archive_path_offset = \" UINT32_FORMAT, header()->base_archive_path_offset());\n-      log_info(cds)(\"  _header_size              = \" UINT32_FORMAT, header()->header_size());\n-      fail_continue(\"_base_archive_path_offset should be equal to _header_size\");\n-      return false;\n-    }\n-  }\n-\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":40,"deletions":17,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -211,2 +211,0 @@\n-  \/\/ size of the base archive name including NULL terminator\n-  size_t _base_archive_name_size;\n@@ -256,0 +254,1 @@\n+  unsigned int base_archive_name_size()    const { return _base_archive_name_size; }\n@@ -271,1 +270,0 @@\n-  size_t base_archive_name_size()          const { return _base_archive_name_size; }\n@@ -289,0 +287,1 @@\n+  void set_header_size(unsigned int s)           { _header_size = s; }\n@@ -290,1 +289,1 @@\n-  void set_base_archive_name_size(size_t s)      { _base_archive_name_size = s; }\n+  void set_base_archive_name_size(unsigned int s) { _base_archive_name_size = s; }\n@@ -292,1 +291,0 @@\n-  void set_header_size(unsigned int s)           { _header_size = s; }\n@@ -401,3 +399,3 @@\n-  void   set_header_base_archive_path_offset()               { header()->set_base_archive_path_offset(); }\n-  void   set_header_base_archive_name_size(size_t size)      { header()->set_base_archive_name_size(size); }\n-  void   set_header_base_archive_is_default(bool is_default) { header()->set_base_archive_is_default(is_default); }\n+  void   set_header_base_archive_path_offset()                { header()->set_base_archive_path_offset(); }\n+  void   set_header_base_archive_name_size(unsigned int size) { header()->set_base_archive_name_size(size); }\n+  void   set_header_base_archive_is_default(bool is_default)  { header()->set_base_archive_is_default(is_default); }\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -76,0 +76,2 @@\n+  \/\/ size of the base archive name including NULL terminator\n+  unsigned int _base_archive_name_size;\n","filename":"src\/hotspot\/share\/include\/cds.h","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-        \"_base_archive_path_offset should be 0\",\n+        \"UseSharedSpaces: Header checksum verification failed.\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/SharedArchiveConsistency.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -109,1 +109,1 @@\n-               new String[] {\"The shared archive file has an incorrect header size.\",\n+               new String[] {\"_base_archive_path_offset should be equal to _header_size\",\n@@ -120,1 +120,1 @@\n-               new String[] {\"The shared archive file has an incorrect header size.\",\n+               new String[] {\"_base_archive_path_offset should be equal to _header_size\",\n@@ -146,1 +146,1 @@\n-                             \"Header checksum verification failed.\",\n+                             \"Read base archive name from \" + wrongBaseName + \" failed\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/ArchiveConsistency.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}