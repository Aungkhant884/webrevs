{"files":[{"patch":"@@ -1132,0 +1132,1 @@\n+    mapinfo->set_header_base_archive_path_offset();\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,9 +34,10 @@\n-  { \"CDSFileMapHeaderBase::_magic\",           offset_of(CDSFileMapHeaderBase, _magic)           },\n-  { \"CDSFileMapHeaderBase::_crc\",             offset_of(CDSFileMapHeaderBase, _crc)             },\n-  { \"CDSFileMapHeaderBase::_version\",         offset_of(CDSFileMapHeaderBase, _version)         },\n-  { \"CDSFileMapHeaderBase::_space[0]\",        offset_of(CDSFileMapHeaderBase, _space)           },\n-  { \"FileMapHeader::_jvm_ident\",              offset_of(FileMapHeader, _jvm_ident)              },\n-  { \"FileMapHeader::_base_archive_name_size\", offset_of(FileMapHeader, _base_archive_name_size) },\n-  { \"CDSFileMapRegion::_crc\",                 offset_of(CDSFileMapRegion, _crc)                 },\n-  { \"CDSFileMapRegion::_used\",                offset_of(CDSFileMapRegion, _used)                },\n-  { \"DynamicArchiveHeader::_base_region_crc\", offset_of(DynamicArchiveHeader, _base_region_crc) }\n+  { \"CDSFileMapHeaderBase::_magic\",                     offset_of(CDSFileMapHeaderBase, _magic)             },\n+  { \"CDSFileMapHeaderBase::_crc\",                       offset_of(CDSFileMapHeaderBase, _crc)               },\n+  { \"CDSFileMapHeaderBase::_version\",                   offset_of(CDSFileMapHeaderBase, _version)           },\n+  { \"CDSFileMapHeaderBase::_space[0]\",                  offset_of(CDSFileMapHeaderBase, _space)             },\n+  { \"CDSFileMapHeaderBase::_base_archive_path_offset\",  offset_of(FileMapHeader, _base_archive_path_offset) },\n+  { \"FileMapHeader::_jvm_ident\",                        offset_of(FileMapHeader, _jvm_ident)                },\n+  { \"FileMapHeader::_base_archive_name_size\",           offset_of(FileMapHeader, _base_archive_name_size)   },\n+  { \"CDSFileMapRegion::_crc\",                           offset_of(CDSFileMapRegion, _crc)                   },\n+  { \"CDSFileMapRegion::_used\",                          offset_of(CDSFileMapRegion, _used)                  },\n+  { \"DynamicArchiveHeader::_base_region_crc\",           offset_of(DynamicArchiveHeader, _base_region_crc)   }\n","filename":"src\/hotspot\/share\/cds\/cdsConstants.cpp","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -248,1 +248,2 @@\n-  \/\/ the following 2 fields will be set in write_header for dynamic archive header\n+  \/\/ the following 3 fields will be set in ArchiveBuilder::write_archive for dynamic archive header\n+  _base_archive_path_offset = 0;\n@@ -288,0 +289,1 @@\n+  st->print_cr(\"- base_archive_path_offset:         \" INT32_FORMAT, _base_archive_path_offset);\n@@ -1057,1 +1059,1 @@\n-                                                    int* size, char** base_archive_name) {\n+                                                    char** base_archive_name) {\n@@ -1060,1 +1062,0 @@\n-    *size = 0;\n@@ -1063,1 +1064,0 @@\n-\n@@ -1067,1 +1067,1 @@\n-  size_t n = os::read(fd, dynamic_header, (unsigned int)sz);\n+  size_t n = os::read(fd, (void*)dynamic_header, (unsigned int)sz);\n@@ -1076,1 +1076,0 @@\n-    *size = 0;\n@@ -2350,0 +2349,9 @@\n+void FileMapHeader::set_base_archive_path_offset() {\n+  if (_magic == CDS_ARCHIVE_MAGIC) {\n+    _base_archive_path_offset = 0;\n+  } else {\n+    assert(_magic == CDS_DYNAMIC_ARCHIVE_MAGIC, \"Must be dynamic archive\");\n+    _base_archive_path_offset = sizeof(DynamicArchiveHeader);\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":14,"deletions":6,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -290,0 +290,1 @@\n+  void set_base_archive_path_offset();\n@@ -366,1 +367,1 @@\n-                                                int* size, char** base_archive_name);\n+                                                char** base_archive_name);\n@@ -401,0 +402,1 @@\n+  void   set_header_base_archive_path_offset()               { header()->set_base_archive_path_offset(); }\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -67,0 +67,5 @@\n+  int _base_archive_path_offset; \/\/ This field is present with (_version >= 12). It's declaration\n+                                 \/\/ must never be changed in any future versions of HotSpot.\n+                                 \/\/ If this is a dynamic archive, (((char*)this) + _base_archive_path_offset)\n+                                 \/\/ stores a 0-terminated string for the pathname of the base archive.\n+                                 \/\/ If this is a static archive, this field is 0.\n","filename":"src\/hotspot\/share\/include\/cds.h","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -3534,1 +3534,0 @@\n-        int name_size;\n@@ -3536,1 +3535,1 @@\n-          FileMapInfo::get_base_archive_name_from_header(temp_archive_path, &name_size, &SharedArchivePath);\n+          FileMapInfo::get_base_archive_name_from_header(temp_archive_path, &SharedArchivePath);\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+    public static int offsetBaseArchivePathOffset;\/\/ CDSFileMapHeaderBase::_base_archive_path_offset\n@@ -86,0 +87,1 @@\n+            offsetBaseArchivePathOffset = wb.getCDSOffsetForName(\"CDSFileMapHeaderBase::_base_archive_path_offset\");\n@@ -118,3 +120,8 @@\n-          \/\/ dynamic archive store base archive name after header, so we count it in header size.\n-          int baseArchiveNameSize = (int)readInt(jsaFile, (long)offsetBaseArchiveNameSize, 4);\n-          return alignUpWithAlignment((long)dynamicArchiveHeaderSize + baseArchiveNameSize);\n+          \/\/ dynamic archive store base archive name at offsetBaseArchivePathOffset, the header size\n+          \/\/ should be offsetBaseArchivePath + archive name length.\n+          if (offsetBaseArchivePathOffset == 0) {\n+              throw new RuntimeException(\"Dynamic archive without base archive\");\n+          }\n+          int baseArchiveNameSize = (int)readInt(jsaFile, offsetBaseArchiveNameSize, 4);\n+          long fileHeaderSize = alignUpWithAlignment((long)offsetBaseArchivePathOffset + baseArchiveNameSize);\n+          return fileHeaderSize;\n","filename":"test\/lib\/jdk\/test\/lib\/cds\/CDSArchiveUtils.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"}]}