{"files":[{"patch":"@@ -471,2 +471,0 @@\n-void Canonicalizer::do_IfInstanceOf(IfInstanceOf*    x) {}\n-\n@@ -799,17 +797,0 @@\n-    } else if (l->as_InstanceOf() != NULL) {\n-      \/\/ NOTE: Code permanently disabled for now since it leaves the old InstanceOf\n-      \/\/       instruction in the graph (it is pinned). Need to fix this at some point.\n-      \/\/       It should also be left in the graph when generating a profiled method version or Goto\n-      \/\/       has to know that it was an InstanceOf.\n-      return;\n-      \/\/ pattern: If ((obj instanceof klass) cond rc) => simplify to: IfInstanceOf or: Goto\n-      InstanceOf* inst = l->as_InstanceOf();\n-      BlockBegin* is_inst_sux = x->sux_for(is_true(1, x->cond(), rc)); \/\/ successor for instanceof == 1\n-      BlockBegin* no_inst_sux = x->sux_for(is_true(0, x->cond(), rc)); \/\/ successor for instanceof == 0\n-      if (is_inst_sux == no_inst_sux && inst->is_loaded()) {\n-        \/\/ both successors identical and klass is loaded => simplify to: Goto\n-        set_canonical(new Goto(is_inst_sux, x->state_before(), x->is_safepoint()));\n-      } else {\n-        \/\/ successors differ => simplify to: IfInstanceOf\n-        set_canonical(new IfInstanceOf(inst->klass(), inst->obj(), true, inst->state_before()->bci(), is_inst_sux, no_inst_sux));\n-      }\n","filename":"src\/hotspot\/share\/c1\/c1_Canonicalizer.cpp","additions":0,"deletions":19,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -78,1 +78,0 @@\n-  virtual void do_IfInstanceOf   (IfInstanceOf*    x);\n","filename":"src\/hotspot\/share\/c1\/c1_Canonicalizer.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -90,1 +90,0 @@\n-class       IfInstanceOf;\n@@ -191,1 +190,0 @@\n-  virtual void do_IfInstanceOf   (IfInstanceOf*    x) = 0;\n@@ -569,1 +567,0 @@\n-  virtual IfInstanceOf*     as_IfInstanceOf()    { return NULL; }\n@@ -2037,54 +2034,0 @@\n-LEAF(IfInstanceOf, BlockEnd)\n- private:\n-  ciKlass* _klass;\n-  Value    _obj;\n-  bool     _test_is_instance;                    \/\/ jump if instance\n-  int      _instanceof_bci;\n-\n- public:\n-  IfInstanceOf(ciKlass* klass, Value obj, bool test_is_instance, int instanceof_bci, BlockBegin* tsux, BlockBegin* fsux)\n-  : BlockEnd(illegalType, NULL, false) \/\/ temporary set to false\n-  , _klass(klass)\n-  , _obj(obj)\n-  , _test_is_instance(test_is_instance)\n-  , _instanceof_bci(instanceof_bci)\n-  {\n-    ASSERT_VALUES\n-    assert(instanceof_bci >= 0, \"illegal bci\");\n-    BlockList* s = new BlockList(2);\n-    s->append(tsux);\n-    s->append(fsux);\n-    set_sux(s);\n-  }\n-\n-  \/\/ accessors\n-  \/\/\n-  \/\/ Note 1: If test_is_instance() is true, IfInstanceOf tests if obj *is* an\n-  \/\/         instance of klass; otherwise it tests if it is *not* and instance\n-  \/\/         of klass.\n-  \/\/\n-  \/\/ Note 2: IfInstanceOf instructions are created by combining an InstanceOf\n-  \/\/         and an If instruction. The IfInstanceOf bci() corresponds to the\n-  \/\/         bci that the If would have had; the (this->) instanceof_bci() is\n-  \/\/         the bci of the original InstanceOf instruction.\n-  ciKlass* klass() const                         { return _klass; }\n-  Value obj() const                              { return _obj; }\n-  int instanceof_bci() const                     { return _instanceof_bci; }\n-  bool test_is_instance() const                  { return _test_is_instance; }\n-  BlockBegin* sux_for(bool is_true) const        { return sux_at(is_true ? 0 : 1); }\n-  BlockBegin* tsux() const                       { return sux_for(true); }\n-  BlockBegin* fsux() const                       { return sux_for(false); }\n-\n-  \/\/ manipulation\n-  void swap_sux() {\n-    assert(number_of_sux() == 2, \"wrong number of successors\");\n-    BlockList* s = sux();\n-    BlockBegin* t = s->at(0); s->at_put(0, s->at(1)); s->at_put(1, t);\n-    _test_is_instance = !_test_is_instance;\n-  }\n-\n-  \/\/ generic\n-  virtual void input_values_do(ValueVisitor* f)   { BlockEnd::input_values_do(f); f->visit(&_obj); }\n-};\n-\n-\n","filename":"src\/hotspot\/share\/c1\/c1_Instruction.hpp","additions":0,"deletions":57,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -743,5 +743,0 @@\n-void InstructionPrinter::do_IfInstanceOf(IfInstanceOf* x) {\n-  output()->print(\"<IfInstanceOf>\");\n-}\n-\n-\n","filename":"src\/hotspot\/share\/c1\/c1_InstructionPrinter.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -118,1 +118,0 @@\n-  virtual void do_IfInstanceOf   (IfInstanceOf*    x);\n","filename":"src\/hotspot\/share\/c1\/c1_InstructionPrinter.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1189,5 +1189,0 @@\n-void LIRGenerator::do_IfInstanceOf(IfInstanceOf* x) {\n-  Unimplemented();\n-}\n-\n-\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -578,1 +578,0 @@\n-  virtual void do_IfInstanceOf   (IfInstanceOf*    x);\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -524,1 +524,0 @@\n-  void do_IfInstanceOf   (IfInstanceOf*    x);\n@@ -710,1 +709,0 @@\n-void NullCheckVisitor::do_IfInstanceOf   (IfInstanceOf*    x) {}\n","filename":"src\/hotspot\/share\/c1\/c1_Optimizer.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -158,1 +158,0 @@\n-    void do_IfInstanceOf   (IfInstanceOf*    x) { \/* nothing to do *\/ };\n","filename":"src\/hotspot\/share\/c1\/c1_RangeCheckElimination.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -197,1 +197,0 @@\n-  void do_IfInstanceOf   (IfInstanceOf*    x) { \/* nothing to do *\/ }\n","filename":"src\/hotspot\/share\/c1\/c1_ValueMap.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}