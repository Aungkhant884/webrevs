{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,2 +48,8 @@\n-     * The type may be a {@code DeclaredType} or {@code TypeVariable}.\n-     * Returns {@code null} if the type is not one with a\n+     * The type may be one of:\n+     * <ul>\n+     * <li>a {@link DeclaredType}\n+     * <li>a {@link TypeVariable}\n+     * <li>a pseudo-type for a {@linkplain TypeKind#PACKAGE package} or\n+     * {@linkplain TypeKind#MODULE module}\n+     * <\/ul>\n+     * The method returns {@code null} if the type is not one with a\n@@ -51,0 +57,9 @@\n+     * Types <em>without<\/em> corresponding elements include:\n+     * <ul>\n+     * <li>{@linkplain TypeKind#isPrimitive() primitive types}\n+     * <li>{@linkplain TypeKind#EXECUTABLE executable types}\n+     * <li>{@linkplain TypeKind#NONE \"none\"} pseudo-types\n+     * <li>{@linkplain TypeKind#NULL null types}\n+     * <li>{@link TypeKind#VOID void}\n+     * <li>{@linkplain TypeKind#WILDCARD wildcard type argument}\n+     * <\/ul>\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/Types.java","additions":18,"deletions":3,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -79,0 +79,2 @@\n+            case PACKAGE:\n+            case MODULE:\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/model\/JavacTypes.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8300857\n+ * @summary Test Types.asElement in cases specified to return null\n+ * @library \/tools\/javac\/lib\n+ * @build   JavacTestingAbstractProcessor TestAsElement\n+ * @compile -processor TestAsElement -proc:only TestAsElement.java\n+ *\/\n+\n+import java.util.*;\n+import javax.annotation.processing.*;\n+import javax.lang.model.element.Element;\n+import javax.lang.model.element.TypeElement;\n+import javax.lang.model.type.TypeKind;\n+import javax.lang.model.type.TypeMirror;\n+import javax.lang.model.util.ElementFilter;\n+import javax.lang.model.util.Types;\n+import static java.util.Objects.*;\n+\n+\/**\n+ * Verify various kinds of TypeMirror have a null corresponding element.\n+ *\/\n+public class TestAsElement extends JavacTestingAbstractProcessor {\n+    public boolean process(Set<? extends TypeElement> annotations,\n+                           RoundEnvironment roundEnv) {\n+        if (!roundEnv.processingOver()) {\n+            testNullCases();\n+            testRoundTripCases();\n+\n+        }\n+        return true;\n+    }\n+\n+    private void testNullCases() {\n+        \/\/ Test all primitive types\n+        for (TypeKind typeKind : TypeKind.values()) {\n+            if (typeKind.isPrimitive() ) {\n+                expectNullAsElement(typeUtils.getPrimitiveType(typeKind));\n+            }\n+        }\n+        expectNullAsElement(typeUtils.getNoType(TypeKind.VOID));\n+        expectNullAsElement(typeUtils.getNoType(TypeKind.NONE));\n+        expectNullAsElement(typeUtils.getNullType());\n+\n+        Element objectElement = eltUtils.getTypeElement(\"java.lang.Object\");\n+        expectNullAsElement(typeUtils.getWildcardType(objectElement.asType(), null));\n+\n+        \/\/ Loop over the ExecutableTypes for Object's methods\n+        for(var methodElt : ElementFilter.methodsIn(objectElement.getEnclosedElements())) {\n+            expectNullAsElement(methodElt.asType());\n+        }\n+    }\n+\n+    private void expectNullAsElement(TypeMirror typeMirror) {\n+        var e = typeUtils.asElement(typeMirror);\n+        if (e != null) {\n+            throw new RuntimeException(\"Unexpected non-null value \" + e);\n+        }\n+    }\n+\n+    private void testRoundTripCases() {\n+        expectRoundTrip(eltUtils.getTypeElement(\"java.lang.String\"));\n+        expectRoundTrip(eltUtils.getPackageElement(\"java.lang\"));\n+        expectRoundTrip(eltUtils.getModuleElement(\"java.base\"));\n+    }\n+\n+    private void expectRoundTrip(Element e) {\n+        var type = e.asType();\n+\n+        if (! typeUtils.asElement(type).equals(e)) {\n+            throw new RuntimeException(\"Did not see round trip elt -> type -> elt on \" + e);\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/util\/types\/TestAsElement.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"}]}