{"files":[{"patch":"@@ -11302,2 +11302,1 @@\n-                         iRegIorL2I src1, iRegIorL2I src2, immI_M1 m1,\n-                         rFlagsReg cr) %{\n+                         iRegIorL2I src1, iRegIorL2I src2, immI_M1 m1) %{\n@@ -11321,2 +11320,1 @@\n-                         iRegL src1, iRegL src2, immL_M1 m1,\n-                         rFlagsReg cr) %{\n+                         iRegL src1, iRegL src2, immL_M1 m1) %{\n@@ -11340,2 +11338,1 @@\n-                         iRegIorL2I src1, iRegIorL2I src2, immI_M1 m1,\n-                         rFlagsReg cr) %{\n+                         iRegIorL2I src1, iRegIorL2I src2, immI_M1 m1) %{\n@@ -11359,2 +11356,1 @@\n-                         iRegL src1, iRegL src2, immL_M1 m1,\n-                         rFlagsReg cr) %{\n+                         iRegL src1, iRegL src2, immL_M1 m1) %{\n@@ -11378,2 +11374,1 @@\n-                         iRegIorL2I src1, iRegIorL2I src2, immI_M1 m1,\n-                         rFlagsReg cr) %{\n+                         iRegIorL2I src1, iRegIorL2I src2, immI_M1 m1) %{\n@@ -11397,2 +11392,1 @@\n-                         iRegL src1, iRegL src2, immL_M1 m1,\n-                         rFlagsReg cr) %{\n+                         iRegL src1, iRegL src2, immL_M1 m1) %{\n@@ -11415,0 +11409,1 @@\n+\/\/ val & (-1 ^ (val >>> shift)) ==> bicw\n@@ -11417,1 +11412,1 @@\n-                         immI src3, immI_M1 src4, rFlagsReg cr) %{\n+                         immI src3, immI_M1 src4) %{\n@@ -11435,0 +11430,1 @@\n+\/\/ val & (-1 ^ (val >>> shift)) ==> bic\n@@ -11437,1 +11433,1 @@\n-                         immI src3, immL_M1 src4, rFlagsReg cr) %{\n+                         immI src3, immL_M1 src4) %{\n@@ -11455,0 +11451,1 @@\n+\/\/ val & (-1 ^ (val >> shift)) ==> bicw\n@@ -11457,1 +11454,1 @@\n-                         immI src3, immI_M1 src4, rFlagsReg cr) %{\n+                         immI src3, immI_M1 src4) %{\n@@ -11475,0 +11472,1 @@\n+\/\/ val & (-1 ^ (val >> shift)) ==> bic\n@@ -11477,1 +11475,1 @@\n-                         immI src3, immL_M1 src4, rFlagsReg cr) %{\n+                         immI src3, immL_M1 src4) %{\n@@ -11495,0 +11493,43 @@\n+\/\/ val & (-1 ^ (val ror shift)) ==> bicw\n+instruct AndI_reg_RotateRight_not_reg(iRegINoSp dst,\n+                         iRegIorL2I src1, iRegIorL2I src2,\n+                         immI src3, immI_M1 src4) %{\n+  match(Set dst (AndI src1 (XorI(RotateRight src2 src3) src4)));\n+  ins_cost(1.9 * INSN_COST);\n+  format %{ \"bicw  $dst, $src1, $src2, ROR $src3\" %}\n+\n+  ins_encode %{\n+    __ bicw(as_Register($dst$$reg),\n+              as_Register($src1$$reg),\n+              as_Register($src2$$reg),\n+              Assembler::ROR,\n+              $src3$$constant & 0x1f);\n+  %}\n+\n+  ins_pipe(ialu_reg_reg_shift);\n+%}\n+\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+\/\/ val & (-1 ^ (val ror shift)) ==> bic\n+instruct AndL_reg_RotateRight_not_reg(iRegLNoSp dst,\n+                         iRegL src1, iRegL src2,\n+                         immI src3, immL_M1 src4) %{\n+  match(Set dst (AndL src1 (XorL(RotateRight src2 src3) src4)));\n+  ins_cost(1.9 * INSN_COST);\n+  format %{ \"bic  $dst, $src1, $src2, ROR $src3\" %}\n+\n+  ins_encode %{\n+    __ bic(as_Register($dst$$reg),\n+              as_Register($src1$$reg),\n+              as_Register($src2$$reg),\n+              Assembler::ROR,\n+              $src3$$constant & 0x3f);\n+  %}\n+\n+  ins_pipe(ialu_reg_reg_shift);\n+%}\n+\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+\/\/ val & (-1 ^ (val << shift)) ==> bicw\n@@ -11497,1 +11538,1 @@\n-                         immI src3, immI_M1 src4, rFlagsReg cr) %{\n+                         immI src3, immI_M1 src4) %{\n@@ -11515,0 +11556,1 @@\n+\/\/ val & (-1 ^ (val << shift)) ==> bic\n@@ -11517,1 +11559,1 @@\n-                         immI src3, immL_M1 src4, rFlagsReg cr) %{\n+                         immI src3, immL_M1 src4) %{\n@@ -11535,0 +11577,1 @@\n+\/\/ val ^ (-1 ^ (val >>> shift)) ==> eonw\n@@ -11537,1 +11580,1 @@\n-                         immI src3, immI_M1 src4, rFlagsReg cr) %{\n+                         immI src3, immI_M1 src4) %{\n@@ -11555,0 +11598,1 @@\n+\/\/ val ^ (-1 ^ (val >>> shift)) ==> eon\n@@ -11557,1 +11601,1 @@\n-                         immI src3, immL_M1 src4, rFlagsReg cr) %{\n+                         immI src3, immL_M1 src4) %{\n@@ -11575,0 +11619,1 @@\n+\/\/ val ^ (-1 ^ (val >> shift)) ==> eonw\n@@ -11577,1 +11622,1 @@\n-                         immI src3, immI_M1 src4, rFlagsReg cr) %{\n+                         immI src3, immI_M1 src4) %{\n@@ -11595,0 +11640,1 @@\n+\/\/ val ^ (-1 ^ (val >> shift)) ==> eon\n@@ -11597,1 +11643,1 @@\n-                         immI src3, immL_M1 src4, rFlagsReg cr) %{\n+                         immI src3, immL_M1 src4) %{\n@@ -11615,0 +11661,43 @@\n+\/\/ val ^ (-1 ^ (val ror shift)) ==> eonw\n+instruct XorI_reg_RotateRight_not_reg(iRegINoSp dst,\n+                         iRegIorL2I src1, iRegIorL2I src2,\n+                         immI src3, immI_M1 src4) %{\n+  match(Set dst (XorI src4 (XorI(RotateRight src2 src3) src1)));\n+  ins_cost(1.9 * INSN_COST);\n+  format %{ \"eonw  $dst, $src1, $src2, ROR $src3\" %}\n+\n+  ins_encode %{\n+    __ eonw(as_Register($dst$$reg),\n+              as_Register($src1$$reg),\n+              as_Register($src2$$reg),\n+              Assembler::ROR,\n+              $src3$$constant & 0x1f);\n+  %}\n+\n+  ins_pipe(ialu_reg_reg_shift);\n+%}\n+\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+\/\/ val ^ (-1 ^ (val ror shift)) ==> eon\n+instruct XorL_reg_RotateRight_not_reg(iRegLNoSp dst,\n+                         iRegL src1, iRegL src2,\n+                         immI src3, immL_M1 src4) %{\n+  match(Set dst (XorL src4 (XorL(RotateRight src2 src3) src1)));\n+  ins_cost(1.9 * INSN_COST);\n+  format %{ \"eon  $dst, $src1, $src2, ROR $src3\" %}\n+\n+  ins_encode %{\n+    __ eon(as_Register($dst$$reg),\n+              as_Register($src1$$reg),\n+              as_Register($src2$$reg),\n+              Assembler::ROR,\n+              $src3$$constant & 0x3f);\n+  %}\n+\n+  ins_pipe(ialu_reg_reg_shift);\n+%}\n+\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+\/\/ val ^ (-1 ^ (val << shift)) ==> eonw\n@@ -11617,1 +11706,1 @@\n-                         immI src3, immI_M1 src4, rFlagsReg cr) %{\n+                         immI src3, immI_M1 src4) %{\n@@ -11635,0 +11724,1 @@\n+\/\/ val ^ (-1 ^ (val << shift)) ==> eon\n@@ -11637,1 +11727,1 @@\n-                         immI src3, immL_M1 src4, rFlagsReg cr) %{\n+                         immI src3, immL_M1 src4) %{\n@@ -11655,0 +11745,1 @@\n+\/\/ val | (-1 ^ (val >>> shift)) ==> ornw\n@@ -11657,1 +11748,1 @@\n-                         immI src3, immI_M1 src4, rFlagsReg cr) %{\n+                         immI src3, immI_M1 src4) %{\n@@ -11675,0 +11766,1 @@\n+\/\/ val | (-1 ^ (val >>> shift)) ==> orn\n@@ -11677,1 +11769,1 @@\n-                         immI src3, immL_M1 src4, rFlagsReg cr) %{\n+                         immI src3, immL_M1 src4) %{\n@@ -11695,0 +11787,1 @@\n+\/\/ val | (-1 ^ (val >> shift)) ==> ornw\n@@ -11697,1 +11790,1 @@\n-                         immI src3, immI_M1 src4, rFlagsReg cr) %{\n+                         immI src3, immI_M1 src4) %{\n@@ -11715,0 +11808,1 @@\n+\/\/ val | (-1 ^ (val >> shift)) ==> orn\n@@ -11717,1 +11811,1 @@\n-                         immI src3, immL_M1 src4, rFlagsReg cr) %{\n+                         immI src3, immL_M1 src4) %{\n@@ -11735,0 +11829,43 @@\n+\/\/ val | (-1 ^ (val ror shift)) ==> ornw\n+instruct OrI_reg_RotateRight_not_reg(iRegINoSp dst,\n+                         iRegIorL2I src1, iRegIorL2I src2,\n+                         immI src3, immI_M1 src4) %{\n+  match(Set dst (OrI src1 (XorI(RotateRight src2 src3) src4)));\n+  ins_cost(1.9 * INSN_COST);\n+  format %{ \"ornw  $dst, $src1, $src2, ROR $src3\" %}\n+\n+  ins_encode %{\n+    __ ornw(as_Register($dst$$reg),\n+              as_Register($src1$$reg),\n+              as_Register($src2$$reg),\n+              Assembler::ROR,\n+              $src3$$constant & 0x1f);\n+  %}\n+\n+  ins_pipe(ialu_reg_reg_shift);\n+%}\n+\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+\/\/ val | (-1 ^ (val ror shift)) ==> orn\n+instruct OrL_reg_RotateRight_not_reg(iRegLNoSp dst,\n+                         iRegL src1, iRegL src2,\n+                         immI src3, immL_M1 src4) %{\n+  match(Set dst (OrL src1 (XorL(RotateRight src2 src3) src4)));\n+  ins_cost(1.9 * INSN_COST);\n+  format %{ \"orn  $dst, $src1, $src2, ROR $src3\" %}\n+\n+  ins_encode %{\n+    __ orn(as_Register($dst$$reg),\n+              as_Register($src1$$reg),\n+              as_Register($src2$$reg),\n+              Assembler::ROR,\n+              $src3$$constant & 0x3f);\n+  %}\n+\n+  ins_pipe(ialu_reg_reg_shift);\n+%}\n+\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+\/\/ val | (-1 ^ (val << shift)) ==> ornw\n@@ -11737,1 +11874,1 @@\n-                         immI src3, immI_M1 src4, rFlagsReg cr) %{\n+                         immI src3, immI_M1 src4) %{\n@@ -11755,0 +11892,1 @@\n+\/\/ val | (-1 ^ (val << shift)) ==> orn\n@@ -11757,1 +11895,1 @@\n-                         immI src3, immL_M1 src4, rFlagsReg cr) %{\n+                         immI src3, immL_M1 src4) %{\n@@ -11777,1 +11915,1 @@\n-                         immI src3, rFlagsReg cr) %{\n+                         immI src3) %{\n@@ -11798,1 +11936,1 @@\n-                         immI src3, rFlagsReg cr) %{\n+                         immI src3) %{\n@@ -11819,1 +11957,1 @@\n-                         immI src3, rFlagsReg cr) %{\n+                         immI src3) %{\n@@ -11840,1 +11978,1 @@\n-                         immI src3, rFlagsReg cr) %{\n+                         immI src3) %{\n@@ -11861,1 +11999,1 @@\n-                         immI src3, rFlagsReg cr) %{\n+                         immI src3) %{\n@@ -11882,1 +12020,1 @@\n-                         immI src3, rFlagsReg cr) %{\n+                         immI src3) %{\n@@ -11899,0 +12037,42 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+instruct AndI_reg_RotateRight_reg(iRegINoSp dst,\n+                         iRegIorL2I src1, iRegIorL2I src2,\n+                         immI src3) %{\n+  match(Set dst (AndI src1 (RotateRight src2 src3)));\n+\n+  ins_cost(1.9 * INSN_COST);\n+  format %{ \"andw  $dst, $src1, $src2, ROR $src3\" %}\n+\n+  ins_encode %{\n+    __ andw(as_Register($dst$$reg),\n+              as_Register($src1$$reg),\n+              as_Register($src2$$reg),\n+              Assembler::ROR,\n+              $src3$$constant & 0x1f);\n+  %}\n+\n+  ins_pipe(ialu_reg_reg_shift);\n+%}\n+\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+instruct AndL_reg_RotateRight_reg(iRegLNoSp dst,\n+                         iRegL src1, iRegL src2,\n+                         immI src3) %{\n+  match(Set dst (AndL src1 (RotateRight src2 src3)));\n+\n+  ins_cost(1.9 * INSN_COST);\n+  format %{ \"andr  $dst, $src1, $src2, ROR $src3\" %}\n+\n+  ins_encode %{\n+    __ andr(as_Register($dst$$reg),\n+              as_Register($src1$$reg),\n+              as_Register($src2$$reg),\n+              Assembler::ROR,\n+              $src3$$constant & 0x3f);\n+  %}\n+\n+  ins_pipe(ialu_reg_reg_shift);\n+%}\n+\n@@ -11903,1 +12083,1 @@\n-                         immI src3, rFlagsReg cr) %{\n+                         immI src3) %{\n@@ -11924,1 +12104,1 @@\n-                         immI src3, rFlagsReg cr) %{\n+                         immI src3) %{\n@@ -11945,1 +12125,1 @@\n-                         immI src3, rFlagsReg cr) %{\n+                         immI src3) %{\n@@ -11966,1 +12146,1 @@\n-                         immI src3, rFlagsReg cr) %{\n+                         immI src3) %{\n@@ -11987,1 +12167,1 @@\n-                         immI src3, rFlagsReg cr) %{\n+                         immI src3) %{\n@@ -12008,1 +12188,1 @@\n-                         immI src3, rFlagsReg cr) %{\n+                         immI src3) %{\n@@ -12025,0 +12205,42 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+instruct XorI_reg_RotateRight_reg(iRegINoSp dst,\n+                         iRegIorL2I src1, iRegIorL2I src2,\n+                         immI src3) %{\n+  match(Set dst (XorI src1 (RotateRight src2 src3)));\n+\n+  ins_cost(1.9 * INSN_COST);\n+  format %{ \"eorw  $dst, $src1, $src2, ROR $src3\" %}\n+\n+  ins_encode %{\n+    __ eorw(as_Register($dst$$reg),\n+              as_Register($src1$$reg),\n+              as_Register($src2$$reg),\n+              Assembler::ROR,\n+              $src3$$constant & 0x1f);\n+  %}\n+\n+  ins_pipe(ialu_reg_reg_shift);\n+%}\n+\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+instruct XorL_reg_RotateRight_reg(iRegLNoSp dst,\n+                         iRegL src1, iRegL src2,\n+                         immI src3) %{\n+  match(Set dst (XorL src1 (RotateRight src2 src3)));\n+\n+  ins_cost(1.9 * INSN_COST);\n+  format %{ \"eor  $dst, $src1, $src2, ROR $src3\" %}\n+\n+  ins_encode %{\n+    __ eor(as_Register($dst$$reg),\n+              as_Register($src1$$reg),\n+              as_Register($src2$$reg),\n+              Assembler::ROR,\n+              $src3$$constant & 0x3f);\n+  %}\n+\n+  ins_pipe(ialu_reg_reg_shift);\n+%}\n+\n@@ -12029,1 +12251,1 @@\n-                         immI src3, rFlagsReg cr) %{\n+                         immI src3) %{\n@@ -12050,1 +12272,1 @@\n-                         immI src3, rFlagsReg cr) %{\n+                         immI src3) %{\n@@ -12071,1 +12293,1 @@\n-                         immI src3, rFlagsReg cr) %{\n+                         immI src3) %{\n@@ -12092,1 +12314,1 @@\n-                         immI src3, rFlagsReg cr) %{\n+                         immI src3) %{\n@@ -12113,1 +12335,1 @@\n-                         immI src3, rFlagsReg cr) %{\n+                         immI src3) %{\n@@ -12134,1 +12356,1 @@\n-                         immI src3, rFlagsReg cr) %{\n+                         immI src3) %{\n@@ -12151,0 +12373,42 @@\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+instruct OrI_reg_RotateRight_reg(iRegINoSp dst,\n+                         iRegIorL2I src1, iRegIorL2I src2,\n+                         immI src3) %{\n+  match(Set dst (OrI src1 (RotateRight src2 src3)));\n+\n+  ins_cost(1.9 * INSN_COST);\n+  format %{ \"orrw  $dst, $src1, $src2, ROR $src3\" %}\n+\n+  ins_encode %{\n+    __ orrw(as_Register($dst$$reg),\n+              as_Register($src1$$reg),\n+              as_Register($src2$$reg),\n+              Assembler::ROR,\n+              $src3$$constant & 0x1f);\n+  %}\n+\n+  ins_pipe(ialu_reg_reg_shift);\n+%}\n+\n+\/\/ This pattern is automatically generated from aarch64_ad.m4\n+\/\/ DO NOT EDIT ANYTHING IN THIS SECTION OF THE FILE\n+instruct OrL_reg_RotateRight_reg(iRegLNoSp dst,\n+                         iRegL src1, iRegL src2,\n+                         immI src3) %{\n+  match(Set dst (OrL src1 (RotateRight src2 src3)));\n+\n+  ins_cost(1.9 * INSN_COST);\n+  format %{ \"orr  $dst, $src1, $src2, ROR $src3\" %}\n+\n+  ins_encode %{\n+    __ orr(as_Register($dst$$reg),\n+              as_Register($src1$$reg),\n+              as_Register($src2$$reg),\n+              Assembler::ROR,\n+              $src3$$constant & 0x3f);\n+  %}\n+\n+  ins_pipe(ialu_reg_reg_shift);\n+%}\n+\n@@ -12155,1 +12419,1 @@\n-                         immI src3, rFlagsReg cr) %{\n+                         immI src3) %{\n@@ -12176,1 +12440,1 @@\n-                         immI src3, rFlagsReg cr) %{\n+                         immI src3) %{\n@@ -12197,1 +12461,1 @@\n-                         immI src3, rFlagsReg cr) %{\n+                         immI src3) %{\n@@ -12218,1 +12482,1 @@\n-                         immI src3, rFlagsReg cr) %{\n+                         immI src3) %{\n@@ -12239,1 +12503,1 @@\n-                         immI src3, rFlagsReg cr) %{\n+                         immI src3) %{\n@@ -12260,1 +12524,1 @@\n-                         immI src3, rFlagsReg cr) %{\n+                         immI src3) %{\n@@ -12281,1 +12545,1 @@\n-                         immI src3, rFlagsReg cr) %{\n+                         immI src3) %{\n@@ -12302,1 +12566,1 @@\n-                         immI src3, rFlagsReg cr) %{\n+                         immI src3) %{\n@@ -12323,1 +12587,1 @@\n-                         immI src3, rFlagsReg cr) %{\n+                         immI src3) %{\n@@ -12344,1 +12608,1 @@\n-                         immI src3, rFlagsReg cr) %{\n+                         immI src3) %{\n@@ -12365,1 +12629,1 @@\n-                         immI src3, rFlagsReg cr) %{\n+                         immI src3) %{\n@@ -12386,1 +12650,1 @@\n-                         immI src3, rFlagsReg cr) %{\n+                         immI src3) %{\n@@ -12403,1 +12667,0 @@\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":324,"deletions":61,"binary":false,"changes":385,"status":"modified"},{"patch":"@@ -38,2 +38,2 @@\n-                         immI src3, rFlagsReg cr) %{\n-  match(Set dst ($2$1 src1 ($4$1 src2 src3)));\n+                         immI src3) %{\n+  match(Set dst ($2$1 src1 (ifelse($4, RotateRight, $4, $4$1) src2 src3)));\n@@ -59,2 +59,1 @@\n-                         iReg$1`'ORL2I($1) src1, iReg$1`'ORL2I($1) src2, imm$1_M1 m1,\n-                         rFlagsReg cr) %{\n+                         iReg$1`'ORL2I($1) src1, iReg$1`'ORL2I($1) src2, imm$1_M1 m1) %{\n@@ -82,0 +81,1 @@\n+\/\/ val ifelse($2, Xor, ^, $2, And, &, |) (-1 ^ (val ifelse($4, RShift, >>, $4, LShift, <<, $4, URShift, >>>, ror) shift)) ==> $3\n@@ -84,1 +84,1 @@\n-                         immI src3, imm$1_M1 src4, rFlagsReg cr) %{\n+                         immI src3, imm$1_M1 src4) %{\n@@ -88,2 +88,2 @@\n-    match(Set dst ($2$1 src4 (Xor$1($4$1 src2 src3) src1)));,\n-    match(Set dst ($2$1 src1 (Xor$1($4$1 src2 src3) src4)));)\n+    match(Set dst ($2$1 src4 (Xor$1(ifelse($4, RotateRight, $4, $4$1) src2 src3) src1)));,\n+    match(Set dst ($2$1 src1 (Xor$1(ifelse($4, RotateRight, $4, $4$1) src2 src3) src4)));)\n@@ -134,2 +134,2 @@\n-`INVERTED_SHIFT_INSN(I, $1, $2w, $3, $4, ~0, int)\n-INVERTED_SHIFT_INSN(L, $1, $2, $3, $4, ~0l, jlong)')dnl\n+`INVERTED_SHIFT_INSN(I, $1, $2w, $3, $4)\n+INVERTED_SHIFT_INSN(L, $1, $2, $3, $4)')dnl\n@@ -137,1 +137,1 @@\n-define(`ALL_SHIFT_KINDS',\n+define(`ALL_SHIFT_KINDS_WITHOUT_ROR',\n@@ -142,0 +142,4 @@\n+define(`ALL_SHIFT_KINDS',\n+`ALL_SHIFT_KINDS_WITHOUT_ROR($1, $2)\n+BOTH_SHIFT_INSNS($1, $2, RotateRight, ROR)')dnl\n+dnl\n@@ -145,0 +149,1 @@\n+BOTH_INVERTED_SHIFT_INSNS($1, $2, RotateRight, ROR)\n@@ -158,2 +163,2 @@\n-ALL_SHIFT_KINDS(Add, add)\n-ALL_SHIFT_KINDS(Sub, sub)\n+ALL_SHIFT_KINDS_WITHOUT_ROR(Add, add)\n+ALL_SHIFT_KINDS_WITHOUT_ROR(Sub, sub)\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_ad.m4","additions":17,"deletions":12,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2012, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -335,0 +335,15 @@\n+  \/\/ Convert (x >>> rshift) + (x << lshift) into RotateRight(x, rshift)\n+  if (Matcher::match_rule_supported(Op_RotateRight) &&\n+      ((op1 == Op_URShiftI && op2 == Op_LShiftI) || (op1 == Op_LShiftI && op2 == Op_URShiftI)) &&\n+      in(1)->in(1) == in(2)->in(1)) {\n+    Node* rshift = op1 == Op_URShiftI ? in(1)->in(2) : in(2)->in(2);\n+    Node* lshift = op1 == Op_URShiftI ? in(2)->in(2) : in(1)->in(2);\n+    const TypeInt* rshift_t = phase->type(rshift)->isa_int();\n+    const TypeInt* lshift_t = phase->type(lshift)->isa_int();\n+    if (lshift_t != NULL && lshift_t->is_con() &&\n+        rshift_t != NULL && rshift_t->is_con() &&\n+        ((lshift_t->get_con() & 0x1F) == (32 - (rshift_t->get_con() & 0x1F)))) {\n+      return new RotateRightNode(in(1)->in(1), phase->intcon(rshift_t->get_con() & 0x1F), TypeInt::INT);\n+    }\n+  }\n+\n@@ -451,0 +466,16 @@\n+  \/\/ Convert (x >>> rshift) + (x << lshift) into RotateRight(x, rshift)\n+  if (Matcher::match_rule_supported(Op_RotateRight) &&\n+      ((op1 == Op_URShiftL && op2 == Op_LShiftL) || (op1 == Op_LShiftL && op2 == Op_URShiftL)) &&\n+      in(1)->in(1) == in(2)->in(1)) {\n+    Node* rshift = op1 == Op_URShiftL ? in(1)->in(2) : in(2)->in(2);\n+    Node* lshift = op1 == Op_URShiftL ? in(2)->in(2) : in(1)->in(2);\n+    const TypeInt* rshift_t = phase->type(rshift)->isa_int();\n+    const TypeInt* lshift_t = phase->type(lshift)->isa_int();\n+    if (lshift_t != NULL && lshift_t->is_con() &&\n+        rshift_t != NULL && rshift_t->is_con() &&\n+        ((lshift_t->get_con() & 0x3F) == (64 - (rshift_t->get_con() & 0x3F)))) {\n+      return new RotateRightNode(in(1)->in(1), phase->intcon(rshift_t->get_con() & 0x3F), TypeLong::LONG);\n+    }\n+  }\n+\n+\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":32,"deletions":1,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,0 @@\n- * @requires vm.compiler2.enabled\n- *\n@@ -33,1 +31,0 @@\n- *\n@@ -35,1 +32,0 @@\n-\n@@ -38,4 +34,0 @@\n-import java.util.Arrays;\n-import java.util.Random;\n-import jdk.test.lib.Utils;\n-\n@@ -43,3 +35,0 @@\n-    static int ITERS = 500000;\n-    static int SIZE  = 32;\n-    static Random rand;\n@@ -47,1 +36,100 @@\n-    static final int [] ref_rol_int = {1073741824,2147483647,-1847483168,-762700135,617181014,1499775590,770793873,-921711375,1843194553,618929189,543569581,-1524383055,-1358287055,-2015951670,1688073778,687346128,2069534693,-649937276,-1986172760,-1935023546,1291562794,-1493576900,1682263699,807071113,888440312,1299098553,1799312476,745578744,762073952,-1048231621,479680827,403988906};\n+    static final int ITERS = 500000;\n+    static final int[] INT_VALUES = {Integer.MIN_VALUE, Integer.MAX_VALUE, 0, 1, 2, 3, 5, 8, 13};\n+    static final long[] LONG_VALUES = {Long.MIN_VALUE, Long.MAX_VALUE, 0L, 1L, 2L, 3L, 5L, 8L, 13L};\n+\n+    \/\/ expected resules\n+    static final int[] TEST_ROR_OR_INT_1_EXPECTED = {1073741824, -1073741825, 0, -2147483648, 1, -2147483647, -2147483646, 4, -2147483642};\n+\n+    static final int[] TEST_ROR_OR_INT_16_EXPECTED = {32768, -32769, 0, 65536, 131072, 196608, 327680, 524288, 851968};\n+\n+    static final int[] TEST_ROR_OR_INT_31_EXPECTED = {1, -2, 0, 2, 4, 6, 10, 16, 26};\n+\n+    static final int[] TEST_ROR_OR_INT_32_EXPECTED = {-2147483648, 2147483647, 0, 1, 2, 3, 5, 8, 13};\n+\n+    static final long[] TEST_ROR_OR_LONG_1_EXPECTED = {4611686018427387904L, -4611686018427387905L, 0L, -9223372036854775808L, 1L, -9223372036854775807L, -9223372036854775806L, 4L, -9223372036854775802L};\n+\n+    static final long[] TEST_ROR_OR_LONG_16_EXPECTED = {140737488355328L, -140737488355329L, 0L, 281474976710656L, 562949953421312L, 844424930131968L, 1407374883553280L, 2251799813685248L, 3659174697238528L};\n+\n+    static final long[] TEST_ROR_OR_LONG_63_EXPECTED = {1L, -2L, 0L, 2L, 4L, 6L, 10L, 16L, 26L};\n+\n+    static final long[] TEST_ROR_OR_LONG_64_EXPECTED = {-9223372036854775808L, 9223372036854775807L, 0L, 1L, 2L, 3L, 5L, 8L, 13L};\n+\n+    static final int[] TEST_ROR_ADD_INT_1_EXPECTED = TEST_ROR_OR_INT_1_EXPECTED;\n+\n+    static final int[] TEST_ROR_ADD_INT_16_EXPECTED = TEST_ROR_OR_INT_16_EXPECTED;\n+\n+    static final int[] TEST_ROR_ADD_INT_31_EXPECTED = TEST_ROR_OR_INT_31_EXPECTED;\n+\n+    static final int[] TEST_ROR_ADD_INT_32_EXPECTED = {0, -2, 0, 2, 4, 6, 10, 16, 26};\n+\n+    static final long[] TEST_ROR_ADD_LONG_1_EXPECTED = TEST_ROR_OR_LONG_1_EXPECTED;\n+\n+    static final long[] TEST_ROR_ADD_LONG_16_EXPECTED = TEST_ROR_OR_LONG_16_EXPECTED;\n+\n+    static final long[] TEST_ROR_ADD_LONG_63_EXPECTED = TEST_ROR_OR_LONG_63_EXPECTED;\n+\n+    static final long[] TEST_ROR_ADD_LONG_64_EXPECTED = {0L, -2L, 0L, 2L, 4L, 6L, 10L, 16L, 26L};\n+\n+    \/\/ eor shift expected\n+    static final int[] TEST_EOR_ROR_SHIFT_1_INT_EXPECTED = {-1073741824, -1073741824, 0, -2147483647, 3, -2147483646, -2147483641, 12, -2147483637};\n+\n+    static final int[] TEST_EOR_ROR_SHIFT_16_INT_EXPECTED = {-2147450880, -2147450880, 0, 65537, 131074, 196611, 327685, 524296, 851981};\n+\n+    static final int[] TEST_EOR_ROR_SHIFT_31_INT_EXPECTED = {-2147483647, -2147483647, 0, 3, 6, 5, 15, 24, 23};\n+\n+    static final int[] TEST_EOR_ROR_SHIFT_32_INT_EXPECTED = {0, 0, 0, 0, 0, 0, 0, 0, 0};\n+\n+    static final long[] TEST_EOR_ROR_SHIFT_1_LONG_EXPECTED = {-4611686018427387904L, -4611686018427387904L, 0L, -9223372036854775807L, 3L, -9223372036854775806L, -9223372036854775801L, 12L, -9223372036854775797L};\n+\n+    static final long[] TEST_EOR_ROR_SHIFT_16_LONG_EXPECTED = {-9223231299366420480L, -9223231299366420480L, 0L, 281474976710657L, 562949953421314L, 844424930131971L, 1407374883553285L, 2251799813685256L, 3659174697238541L};\n+\n+    static final long[] TEST_EOR_ROR_SHIFT_63_LONG_EXPECTED = {-9223372036854775807L, -9223372036854775807L, 0L, 3L, 6L, 5L, 15L, 24L, 23L};\n+\n+    static final long[] TEST_EOR_ROR_SHIFT_64_LONG_EXPECTED = {0, 0, 0, 0, 0, 0, 0, 0, 0};\n+\n+    \/\/ and shift expected\n+    static final int[] TEST_AND_ROR_SHIFT_1_INT_EXPECTED = {0, 1073741823, 0, 0, 0, 1, 0, 0, 4};\n+\n+    static final int[] TEST_AND_ROR_SHIFT_16_INT_EXPECTED = {0, 2147450879, 0, 0, 0, 0, 0, 0, 0};\n+\n+    static final int[] TEST_AND_ROR_SHIFT_31_INT_EXPECTED = {0, 2147483646, 0, 0, 0, 2, 0, 0, 8};\n+\n+    static final int[] TEST_AND_ROR_SHIFT_32_INT_EXPECTED = {-2147483648, 2147483647, 0, 1, 2, 3, 5, 8, 13};\n+\n+    static final long[] TEST_AND_ROR_SHIFT_1_LONG_EXPECTED = {0L, 4611686018427387903L, 0L, 0L, 0L, 1L, 0L, 0L, 4L};\n+\n+    static final long[] TEST_AND_ROR_SHIFT_16_LONG_EXPECTED = {0L, 9223231299366420479L, 0L, 0L, 0L, 0L, 0L, 0L, 0L};\n+\n+    static final long[] TEST_AND_ROR_SHIFT_63_LONG_EXPECTED = {0L, 9223372036854775806L, 0L, 0L, 0L, 2L, 0L, 0L, 8L};\n+\n+    static final long[] TEST_AND_ROR_SHIFT_64_LONG_EXPECTED = {-9223372036854775808L, 9223372036854775807L, 0L, 1L, 2L, 3L, 5L, 8L, 13L};\n+\n+    \/\/ or shift expected\n+    static final int[] TEST_OR_ROR_SHIFT_1_INT_EXPECTED = {-1073741824, -1, 0, -2147483647, 3, -2147483645, -2147483641, 12, -2147483633};\n+\n+    static final int[] TEST_OR_ROR_SHIFT_16_INT_EXPECTED = {-2147450880, -1, 0, 65537, 131074, 196611, 327685, 524296, 851981};\n+\n+    static final int[] TEST_OR_ROR_SHIFT_31_INT_EXPECTED = {-2147483647, -1, 0, 3, 6, 7, 15, 24, 31};\n+\n+    static final int[] TEST_OR_ROR_SHIFT_32_INT_EXPECTED = {-2147483648, 2147483647, 0, 1, 2, 3, 5, 8, 13};\n+\n+    static final long[] TEST_OR_ROR_SHIFT_1_LONG_EXPECTED = {-4611686018427387904L, -1L, 0L, -9223372036854775807L, 3L, -9223372036854775805L, -9223372036854775801L, 12L, -9223372036854775793L};\n+\n+    static final long[] TEST_OR_ROR_SHIFT_16_LONG_EXPECTED = {-9223231299366420480L, -1L, 0L, 281474976710657L, 562949953421314L, 844424930131971L, 1407374883553285L, 2251799813685256L, 3659174697238541L};\n+\n+    static final long[] TEST_OR_ROR_SHIFT_63_LONG_EXPECTED = {-9223372036854775807L, -1L, 0L, 3L, 6L, 7L, 15L, 24L, 31L};\n+\n+    static final long[] TEST_OR_ROR_SHIFT_64_LONG_EXPECTED = {-9223372036854775808L, 9223372036854775807L, 0L, 1L, 2L, 3L, 5L, 8L, 13L};\n+\n+    \/\/ eon shift expected\n+    static final int[] TEST_EON_ROR_SHIFT_1_INT_EXPECTED = {1073741823, 1073741823, -1, 2147483646, -4, 2147483645, 2147483640, -13, 2147483636};\n+\n+    static final int[] TEST_EON_ROR_SHIFT_16_INT_EXPECTED = {2147450879, 2147450879, -1, -65538, -131075, -196612, -327686, -524297, -851982};\n+\n+    static final int[] TEST_EON_ROR_SHIFT_31_INT_EXPECTED = {2147483646, 2147483646, -1, -4, -7, -6, -16, -25, -24};\n+\n+    static final int[] TEST_EON_ROR_SHIFT_32_INT_EXPECTED = {-1, -1, -1, -1, -1, -1, -1, -1, -1};\n+\n+    static final long[] TEST_EON_ROR_SHIFT_1_LONG_EXPECTED = {4611686018427387903L, 4611686018427387903L, -1L, 9223372036854775806L, -4L, 9223372036854775805L, 9223372036854775800L, -13L, 9223372036854775796L};\n+\n+    static final long[] TEST_EON_ROR_SHIFT_16_LONG_EXPECTED = {9223231299366420479L, 9223231299366420479L, -1L, -281474976710658L, -562949953421315L, -844424930131972L, -1407374883553286L, -2251799813685257L, -3659174697238542L};\n@@ -49,1 +137,1 @@\n-    static final int [] ref_ror_int = {1,2147483647,-1847483168,1244166759,1284961634,1704135065,770793873,-53535600,-1217156379,118049081,1667944966,1766387884,-960747332,849475009,2106366247,-532201309,-111225179,-1590275921,1733962274,-1851577736,1055640211,1872573386,356142481,1649149627,1025605133,1537928787,1799312476,-131305312,190518488,82773525,1321674198,-2126112095};\n+    static final long[] TEST_EON_ROR_SHIFT_63_LONG_EXPECTED = {9223372036854775806L, 9223372036854775806L, -1L, -4L, -7L, -6L, -16L, -25L, -24L};\n@@ -51,1 +139,1 @@\n-    static final long [] ref_rol_long = {4611686018427387904L,9223372036854775807L,-3965526468698771170L,-4285866096636113521L,7635506276746300070L,5413117018148508287L,1868037460083876000L,-3244573585138770353L,7136025216317516898L,-4913621043675642569L,-6391133452542036978L,3902621950534797292L,-4632945906580257763L,4947809816008258399L,5235987658397734862L,2619582334080606650L,1815014778597694835L,-2451797983190531776L,-12499474356882106L,-8308822678069541478L,8441313153103433409L,3994820770127321462L,3403550366464210270L,-5787882067214947834L,-3689654055874130041L,-589861354719079036L,6641098980367723810L,763129181839551415L,4389436227302949880L,-8023110070632385182L,-8486732357167672789L,7236425339463197932L};\n+    static final long[] TEST_EON_ROR_SHIFT_64_LONG_EXPECTED = {-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L};\n@@ -53,1 +141,2 @@\n-    static final long [] ref_ror_long = {1L,9223372036854775807L,-3965526468698771170L,1303279687165097535L,-6959108088026060186L,681250795361731838L,3705372465420868140L,-8117671657526198993L,-335604442896202624L,-3176041913244586253L,-2152781018329716108L,975655487633699323L,8574521504761035792L,-5473888690750018935L,1581768605333334728L,7674419410656225425L,6685114322387540375L,5780227587575757360L,-799966358840454721L,8284086884492323912L,5288463661042741341L,912426852973757747L,-11970671133582816L,-344117270115783853L,-2106591766031512621L,-857638554601955011L,6641098980367723810L,-5257223391402178581L,1097359056825737470L,-4640791861453503840L,8696676574724001348L,-6526192196514797544L};\n+    \/\/ bic shift expected\n+    static final int[] TEST_BIC_ROR_SHIFT_1_INT_EXPECTED = {-2147483648, 1073741824, 0, 1, 2, 2, 5, 8, 9};\n@@ -55,1 +144,1 @@\n-    static final int [] ref_int_rol_shift_1 = {1,-2,600000961,1244166759,642480817,161047955,-1021158430,-2014938908,-1427785869,-467917532,857429648,-1524383055,1807911884,1884072061,845454838,1040479242,1471523198,1301556200,-1713993080,-1641781046,-809831772,-1713031218,-1529278125,-1361538303,1602441032,-689259628,-696342344,93197343,762073952,352644870,1972613577,223396003};\n+    static final int[] TEST_BIC_ROR_SHIFT_16_INT_EXPECTED = {-2147483648, 32768, 0, 1, 2, 3, 5, 8, 13};\n@@ -57,1 +146,1 @@\n-    static final int [] ref_int_rol_shift_127 = {1073741824 ,-1073741825 ,1223742064 ,-762700135 ,1234362028 ,-1033479836 ,-1329031432 ,570007097 ,-356946468 ,956762441 ,214357412 ,1766387884 ,451977971 ,1544759839 ,-1936119939 ,-1887363838 ,-1779602849 ,325389050 ,645243554 ,-1484187086 ,871283881 ,-1501999629 ,-382319532 ,1807099072 ,400610258 ,901426917 ,899656238 ,-1050442489 ,190518488 ,-2059322431 ,1566895218 ,-1017892824};\n+    static final int[] TEST_BIC_ROR_SHIFT_31_INT_EXPECTED = {-2147483648, 1, 0, 1, 2, 1, 5, 8, 5};\n@@ -59,1 +148,1 @@\n-    static final int [] ref_int_rol_shift_128 = {-2147483648 ,2147483647 ,-1847483168 ,-1525400269 ,-1826243240 ,-2066959671 ,1636904433 ,1140014194 ,-713892935 ,1913524882 ,428714824 ,-762191528 ,903955942 ,-1205447618 ,422727419 ,520239621 ,735761599 ,650778100 ,1290487108 ,1326593125 ,1742567762 ,1290968039 ,-764639063 ,-680769152 ,801220516 ,1802853834 ,1799312476 ,-2100884977 ,381036976 ,176322435 ,-1161176860 ,-2035785647};\n+    static final int[] TEST_BIC_ROR_SHIFT_32_INT_EXPECTED = {0, 0, 0, 0, 0, 0, 0, 0, 0};\n@@ -61,1 +150,1 @@\n-    static final int [] ref_int_rol_shift_M128 = {-2147483648 ,2147483647 ,-1847483168 ,-1525400269 ,-1826243240 ,-2066959671 ,1636904433 ,1140014194 ,-713892935 ,1913524882 ,428714824 ,-762191528 ,903955942 ,-1205447618 ,422727419 ,520239621 ,735761599 ,650778100 ,1290487108 ,1326593125 ,1742567762 ,1290968039 ,-764639063 ,-680769152 ,801220516 ,1802853834 ,1799312476 ,-2100884977 ,381036976 ,176322435 ,-1161176860 ,-2035785647};\n+    static final long[] TEST_BIC_ROR_SHIFT_1_LONG_EXPECTED = {-9223372036854775808L, 4611686018427387904L, 0L, 1L, 2L, 2L, 5L, 8L, 9L};\n@@ -63,1 +152,1 @@\n-    static final int [] ref_int_rol_shift_M129 = {1073741824 ,-1073741825 ,1223742064 ,-762700135 ,1234362028 ,-1033479836 ,-1329031432 ,570007097 ,-356946468 ,956762441 ,214357412 ,1766387884 ,451977971 ,1544759839 ,-1936119939 ,-1887363838 ,-1779602849 ,325389050 ,645243554 ,-1484187086 ,871283881 ,-1501999629 ,-382319532 ,1807099072 ,400610258 ,901426917 ,899656238 ,-1050442489 ,190518488 ,-2059322431 ,1566895218 ,-1017892824};\n+    static final long[] TEST_BIC_ROR_SHIFT_16_LONG_EXPECTED = {-9223372036854775808L, 140737488355328L, 0L, 1L, 2L, 3L, 5L, 8L, 13L};\n@@ -65,1 +154,1 @@\n-    static final int [] ref_int_ror_shift_1 = {1073741824,-1073741825,1223742064,-762700135,1234362028,-1033479836,-1329031432,570007097,-356946468,956762441,214357412,1766387884,451977971,1544759839,-1936119939,-1887363838,-1779602849,325389050,645243554,-1484187086,871283881,-1501999629,-382319532,1807099072,400610258,901426917,899656238,-1050442489,190518488,-2059322431,1566895218,-1017892824};\n+    static final long[] TEST_BIC_ROR_SHIFT_63_LONG_EXPECTED = {-9223372036854775808L, 1L, 0L, 1L, 2L, 1L, 5L, 8L, 5L};\n@@ -67,1 +156,1 @@\n-    static final int [] ref_int_ror_shift_127 = {1 ,-2 ,600000961 ,1244166759 ,642480817 ,161047955 ,-1021158430 ,-2014938908 ,-1427785869 ,-467917532 ,857429648 ,-1524383055 ,1807911884 ,1884072061 ,845454838 ,1040479242 ,1471523198 ,1301556200 ,-1713993080 ,-1641781046 ,-809831772 ,-1713031218 ,-1529278125 ,-1361538303 ,1602441032 ,-689259628 ,-696342344 ,93197343 ,762073952 ,352644870 ,1972613577 ,223396003};\n+    static final long[] TEST_BIC_ROR_SHIFT_64_LONG_EXPECTED = {0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L};\n@@ -69,1 +158,2 @@\n-    static final int [] ref_int_ror_shift_128 = {-2147483648 ,2147483647 ,-1847483168 ,-1525400269 ,-1826243240 ,-2066959671 ,1636904433 ,1140014194 ,-713892935 ,1913524882 ,428714824 ,-762191528 ,903955942 ,-1205447618 ,422727419 ,520239621 ,735761599 ,650778100 ,1290487108 ,1326593125 ,1742567762 ,1290968039 ,-764639063 ,-680769152 ,801220516 ,1802853834 ,1799312476 ,-2100884977 ,381036976 ,176322435 ,-1161176860 ,-2035785647};\n+    \/\/ orn shift expected\n+    static final int[] TEST_ORN_ROR_SHIFT_1_INT_EXPECTED = {-1073741825, 2147483647, -1, 2147483647, -2, 2147483647, 2147483645, -5, 2147483645};\n@@ -71,1 +161,1 @@\n-    static final int [] ref_int_ror_shift_M128 = {-2147483648 ,2147483647 ,-1847483168 ,-1525400269 ,-1826243240 ,-2066959671 ,1636904433 ,1140014194 ,-713892935 ,1913524882 ,428714824 ,-762191528 ,903955942 ,-1205447618 ,422727419 ,520239621 ,735761599 ,650778100 ,1290487108 ,1326593125 ,1742567762 ,1290968039 ,-764639063 ,-680769152 ,801220516 ,1802853834 ,1799312476 ,-2100884977 ,381036976 ,176322435 ,-1161176860 ,-2035785647};\n+    static final int[] TEST_ORN_ROR_SHIFT_16_INT_EXPECTED = {-32769, 2147483647, -1, -65537, -131073, -196609, -327681, -524289, -851969};\n@@ -73,1 +163,1 @@\n-    static final int [] ref_int_ror_shift_M129 = {1 ,-2 ,600000961 ,1244166759 ,642480817 ,161047955 ,-1021158430 ,-2014938908 ,-1427785869 ,-467917532 ,857429648 ,-1524383055 ,1807911884 ,1884072061 ,845454838 ,1040479242 ,1471523198 ,1301556200 ,-1713993080 ,-1641781046 ,-809831772 ,-1713031218 ,-1529278125 ,-1361538303 ,1602441032 ,-689259628 ,-696342344 ,93197343 ,762073952 ,352644870 ,1972613577 ,223396003};\n+    static final int[] TEST_ORN_ROR_SHIFT_31_INT_EXPECTED = {-2, 2147483647, -1, -3, -5, -5, -11, -17, -19};\n@@ -75,0 +165,1 @@\n+    static final int[] TEST_ORN_ROR_SHIFT_32_INT_EXPECTED = {-1, -1, -1, -1, -1, -1, -1, -1, -1};\n@@ -76,2 +167,1 @@\n-    static final long [] ref_long_rol_shift_1 = {\n-1L,-2L,-7931052937397542339L,1303279687165097535L,5608201114852140040L,359735415298403453L,4701815018953926360L,8969694797557082089L,324535527229983777L,-3508390168714987589L,-8153196119534272952L,-5889362595358906884L,8065135560209711367L,-3515635332702993867L,-3582426625105780649L,1632572717772861065L,3572202937482896855L,-7534931108784269461L,8161459789691976885L,5213383633793760703L,5933801933688073239L,-6730200469375698045L,6308363257973444605L,-3098812595652498694L,-541332749731694416L,9008962398204287055L,6200852250644175020L,5992317991244719550L,1486051504252676350L,-6863599526811956670L,5846438278934178867L,2838151117945983671L};\n+    static final long[] TEST_ORN_ROR_SHIFT_1_LONG_EXPECTED = {-4611686018427387905L, 9223372036854775807L, -1L, 9223372036854775807L, -2L, 9223372036854775807L, 9223372036854775805L, -5L, 9223372036854775805L};\n@@ -79,1 +169,1 @@\n-    static final long [] ref_long_rol_shift_127 = {4611686018427387904L,-4611686018427387905L,7240608802505390223L,-4285866096636113521L,1402050278713035010L,4701619872251988767L,1175453754738481590L,6854109717816658426L,4692819900234883848L,-877097542178746898L,2573386988543819666L,3139345369587661183L,-2595402128374960063L,8344463203679027341L,-895606656276445163L,5019829197870603170L,-3718635284056663691L,-1883732777196067366L,6652050965850382125L,-3308340109978947729L,-3128235535005369595L,-1682550117343924512L,6188776832920749055L,-5386389167340512578L,4476352830994464300L,-2359445418876316141L,1550213062661043755L,-7725292539043595921L,-8851859160791606721L,-6327585900130377072L,-3150076448693843188L,-3902148238940891987L};\n+    static final long[] TEST_ORN_ROR_SHIFT_16_LONG_EXPECTED = {-140737488355329L, 9223372036854775807L, -1L, -281474976710657L, -562949953421313L, -844424930131969L, -1407374883553281L, -2251799813685249L, -3659174697238529L};\n@@ -81,1 +171,1 @@\n-    static final long [] ref_long_rol_shift_128 = {-9223372036854775808L,9223372036854775807L,-3965526468698771170L,-8571732193272227041L,2804100557426070020L,-9043504329205574082L,2350907509476963180L,-4738524638076234764L,-9061104273239783920L,-1754195084357493795L,5146773977087639332L,6278690739175322366L,-5190804256749920125L,-1757817666351496934L,-1791213312552890325L,-8407085677968345276L,-7437270568113327381L,-3767465554392134731L,-5142642142008787366L,-6616680219957895457L,-6256471070010739189L,-3365100234687849023L,-6069190407868053506L,7673965739028526461L,8952705661988928600L,-4718890837752632281L,3100426125322087510L,2996158995622359775L,743025752126338175L,5791572273448797473L,-6300152897387686375L,-7804296477881783973L};\n+    static final long[] TEST_ORN_ROR_SHIFT_63_LONG_EXPECTED = {-2L, 9223372036854775807L, -1L, -3L, -5L, -5L, -11L, -17L, -19L};\n@@ -83,1 +173,1 @@\n-    static final long [] ref_long_rol_shift_M128 = {-9223372036854775808L,9223372036854775807L,-3965526468698771170L,-8571732193272227041L,2804100557426070020L,-9043504329205574082L,2350907509476963180L,-4738524638076234764L,-9061104273239783920L,-1754195084357493795L,5146773977087639332L,6278690739175322366L,-5190804256749920125L,-1757817666351496934L,-1791213312552890325L,-8407085677968345276L,-7437270568113327381L,-3767465554392134731L,-5142642142008787366L,-6616680219957895457L,-6256471070010739189L,-3365100234687849023L,-6069190407868053506L,7673965739028526461L,8952705661988928600L,-4718890837752632281L,3100426125322087510L,2996158995622359775L,743025752126338175L,5791572273448797473L,-6300152897387686375L,-7804296477881783973L};\n+    static final long[] TEST_ORN_ROR_SHIFT_64_LONG_EXPECTED = {-1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L, -1L};\n@@ -85,0 +175,1 @@\n+    static final int[] TEST_ROR_INT_API_1_EXPECTED = TEST_ROR_OR_INT_1_EXPECTED;\n@@ -86,1 +177,1 @@\n-    static final long [] ref_long_rol_shift_M129 = {4611686018427387904L,-4611686018427387905L,7240608802505390223L,-4285866096636113521L,1402050278713035010L,4701619872251988767L,1175453754738481590L,6854109717816658426L,4692819900234883848L,-877097542178746898L,2573386988543819666L,3139345369587661183L,-2595402128374960063L,8344463203679027341L,-895606656276445163L,5019829197870603170L,-3718635284056663691L,-1883732777196067366L,6652050965850382125L,-3308340109978947729L,-3128235535005369595L,-1682550117343924512L,6188776832920749055L,-5386389167340512578L,4476352830994464300L,-2359445418876316141L,1550213062661043755L,-7725292539043595921L,-8851859160791606721L,-6327585900130377072L,-3150076448693843188L,-3902148238940891987L};\n+    static final int[] TEST_ROR_INT_API_16_EXPECTED = TEST_ROR_OR_INT_16_EXPECTED;\n@@ -88,1 +179,1 @@\n-    static final long [] ref_long_ror_shift_1 = {4611686018427387904L,-4611686018427387905L,7240608802505390223L,-4285866096636113521L,1402050278713035010L,4701619872251988767L,1175453754738481590L,6854109717816658426L,4692819900234883848L,-877097542178746898L,2573386988543819666L,3139345369587661183L,-2595402128374960063L,8344463203679027341L,-895606656276445163L,5019829197870603170L,-3718635284056663691L,-1883732777196067366L,6652050965850382125L,-3308340109978947729L,-3128235535005369595L,-1682550117343924512L,6188776832920749055L,-5386389167340512578L,4476352830994464300L,-2359445418876316141L,1550213062661043755L,-7725292539043595921L,-8851859160791606721L,-6327585900130377072L,-3150076448693843188L,-3902148238940891987L};\n+    static final int[] TEST_ROR_INT_API_31_EXPECTED = TEST_ROR_OR_INT_31_EXPECTED;\n@@ -90,1 +181,1 @@\n-    static final long [] ref_long_ror_shift_127 = {1L,-2L,-7931052937397542339L,1303279687165097535L,5608201114852140040L,359735415298403453L,4701815018953926360L,8969694797557082089L,324535527229983777L,-3508390168714987589L,-8153196119534272952L,-5889362595358906884L,8065135560209711367L,-3515635332702993867L,-3582426625105780649L,1632572717772861065L,3572202937482896855L,-7534931108784269461L,8161459789691976885L,5213383633793760703L,5933801933688073239L,-6730200469375698045L,6308363257973444605L,-3098812595652498694L,-541332749731694416L,9008962398204287055L,6200852250644175020L,5992317991244719550L,1486051504252676350L,-6863599526811956670L,5846438278934178867L,2838151117945983671L};\n+    static final int[] TEST_ROR_INT_API_32_EXPECTED = TEST_ROR_OR_INT_32_EXPECTED;\n@@ -92,0 +183,1 @@\n+    static final long[] TEST_ROR_LONG_API_1_EXPECTED = TEST_ROR_OR_LONG_1_EXPECTED;\n@@ -93,1 +185,1 @@\n-    static final long [] ref_long_ror_shift_128 = {-9223372036854775808L,9223372036854775807L,-3965526468698771170L,-8571732193272227041L,2804100557426070020L,-9043504329205574082L,2350907509476963180L,-4738524638076234764L,-9061104273239783920L,-1754195084357493795L,5146773977087639332L,6278690739175322366L,-5190804256749920125L,-1757817666351496934L,-1791213312552890325L,-8407085677968345276L,-7437270568113327381L,-3767465554392134731L,-5142642142008787366L,-6616680219957895457L,-6256471070010739189L,-3365100234687849023L,-6069190407868053506L,7673965739028526461L,8952705661988928600L,-4718890837752632281L,3100426125322087510L,2996158995622359775L,743025752126338175L,5791572273448797473L,-6300152897387686375L,-7804296477881783973L};\n+    static final long[] TEST_ROR_LONG_API_16_EXPECTED = TEST_ROR_OR_LONG_16_EXPECTED;\n@@ -95,0 +187,1 @@\n+    static final long[] TEST_ROR_LONG_API_63_EXPECTED = TEST_ROR_OR_LONG_63_EXPECTED;\n@@ -96,1 +189,1 @@\n-    static final long [] ref_long_ror_shift_M128 = {-9223372036854775808L,9223372036854775807L,-3965526468698771170L,-8571732193272227041L,2804100557426070020L,-9043504329205574082L,2350907509476963180L,-4738524638076234764L,-9061104273239783920L,-1754195084357493795L,5146773977087639332L,6278690739175322366L,-5190804256749920125L,-1757817666351496934L,-1791213312552890325L,-8407085677968345276L,-7437270568113327381L,-3767465554392134731L,-5142642142008787366L,-6616680219957895457L,-6256471070010739189L,-3365100234687849023L,-6069190407868053506L,7673965739028526461L,8952705661988928600L,-4718890837752632281L,3100426125322087510L,2996158995622359775L,743025752126338175L,5791572273448797473L,-6300152897387686375L,-7804296477881783973L};\n+    static final long[] TEST_ROR_LONG_API_64_EXPECTED = TEST_ROR_OR_LONG_64_EXPECTED;\n@@ -98,1 +191,1 @@\n-    static final long [] ref_long_ror_shift_M129 = {1L,-2L,-7931052937397542339L,1303279687165097535L,5608201114852140040L,359735415298403453L,4701815018953926360L,8969694797557082089L,324535527229983777L,-3508390168714987589L,-8153196119534272952L,-5889362595358906884L,8065135560209711367L,-3515635332702993867L,-3582426625105780649L,1632572717772861065L,3572202937482896855L,-7534931108784269461L,8161459789691976885L,5213383633793760703L,5933801933688073239L,-6730200469375698045L,6308363257973444605L,-3098812595652498694L,-541332749731694416L,9008962398204287055L,6200852250644175020L,5992317991244719550L,1486051504252676350L,-6863599526811956670L,5846438278934178867L,2838151117945983671L};\n+    static final int[] TEST_ROL_INT_API_1_EXPECTED = {1, -2, 0, 2, 4, 6, 10, 16, 26};\n@@ -100,0 +193,15 @@\n+    static final int[] TEST_ROL_INT_API_16_EXPECTED = {32768, -32769, 0, 65536, 131072, 196608, 327680, 524288, 851968};\n+\n+    static final int[] TEST_ROL_INT_API_31_EXPECTED = {1073741824, -1073741825, 0, -2147483648, 1, -2147483647, -2147483646, 4, -2147483642};\n+\n+    static final int[] TEST_ROL_INT_API_32_EXPECTED = {-2147483648, 2147483647, 0, 1, 2, 3, 5, 8, 13};\n+\n+    static final long[] TEST_ROL_LONG_API_1_EXPECTED = {1L, -2L, 0L, 2L, 4L, 6L, 10L, 16L, 26L};\n+\n+    static final long[] TEST_ROL_LONG_API_16_EXPECTED = {32768L, -32769L, 0L, 65536L, 131072L, 196608L, 327680L, 524288L, 851968L};\n+\n+    static final long[] TEST_ROL_LONG_API_63_EXPECTED = {4611686018427387904L, -4611686018427387905L, 0L, -9223372036854775808L, 1L, -9223372036854775807L, -9223372036854775806L, 4L, -9223372036854775802L};\n+\n+    static final long[] TEST_ROL_LONG_API_64_EXPECTED = {-9223372036854775808L, 9223372036854775807L, 0L, 1L, 2L, 3L, 5L, 8L, 13L};\n+\n+    \/\/ verify\n@@ -101,183 +209,294 @@\n-      if (ref != actual) {\n-        System.err.println(text + \" \" +  ref + \" != \" + actual);\n-        throw new Error(\"Fail\");\n-      }\n-    }\n-\n-    public static int [] init_shift_vector(Random rand) {\n-      int [] vec_int = new int [SIZE];\n-      vec_int[0] = 127;\n-      vec_int[1] = -128;\n-      vec_int[2] = 128;\n-      vec_int[3] = -129;\n-      for (int i = 4 ; i < SIZE ; i++) {\n-        vec_int[i] = rand.nextInt(256);\n-      }\n-      return vec_int;\n-    }\n-\n-    public static int [] init_int_vector() {\n-      int [] vec_int = new int [SIZE];\n-      vec_int[0] = Integer.MIN_VALUE;\n-      vec_int[1] = Integer.MAX_VALUE;\n-      for (int i = 2 ; i < SIZE ; i++) {\n-        vec_int[i] = rand.nextInt();\n-      }\n-      return vec_int;\n-    }\n-\n-    public static long [] init_long_vector() {\n-      long [] vec_long = new long [SIZE];\n-      vec_long[0] = Long.MIN_VALUE;\n-      vec_long[1] = Long.MAX_VALUE;\n-      for (int i = 2 ; i < SIZE ; i++) {\n-        vec_long[i] = rand.nextLong();\n-      }\n-      return vec_long;\n-    }\n-\n-    public static void test_rol_int(int val, int shift, int index) {\n-      int actual = Integer.rotateLeft(val, shift);\n-      verify(\"Integer.rotateLeft shift = \" + shift, ref_rol_int[index], actual);\n-      actual = (val << shift) | (val >>> -shift);\n-      verify(\"Pattern1 integer rotateLeft shift = \" + shift, ref_rol_int[index], actual);\n-      actual = (val << shift) | (val >>> 32-shift);\n-      verify(\"Pattern2 integer rotateLeft shift = \" + shift, ref_rol_int[index], actual);\n-    }\n-\n-    public static void test_ror_int(int val, int shift, int index) {\n-      int actual = Integer.rotateRight(val, shift);\n-      verify(\"Integer.rotateRight shift = \" + shift, ref_ror_int[index], actual);\n-      actual = (val >>> shift) | (val <<-shift);\n-      verify(\"Pattern1 integer rotateRight shift = \" + shift, ref_ror_int[index], actual);\n-      actual = (val >>> shift) | (val <<-32-shift);\n-      verify(\"Pattern2 integer rotateRight shift = \" + shift, ref_ror_int[index], actual);\n-    }\n-\n-    public static void test_rol_long(long val, int shift, int index) {\n-      long actual = Long.rotateLeft(val, shift);\n-      verify(\"Long.rotateLeft shift = \" + shift, ref_rol_long[index], actual);\n-      actual =  (val << shift) | (val >>>-shift);\n-      verify(\"Pattern1 long rotateLeft shift = \" + shift, ref_rol_long[index], actual);\n-      actual =  (val << shift) | (val >>>64-shift);\n-      verify(\"Pattern2 long rotateLeft shift = \" + shift, ref_rol_long[index], actual);\n-    }\n-\n-    public static void test_ror_long(long val, int shift, int index) {\n-      long actual = Long.rotateRight(val, shift);\n-      verify(\"Long.rotateRight shift = \" + shift, ref_ror_long[index], actual);\n-      actual =  (val >>> shift) | (val <<-shift);\n-      verify(\"Pattern1 long rotateRight shift = \" + shift, ref_ror_long[index], actual);\n-      actual =  (val >>> shift) | (val <<64-shift);\n-      verify(\"Pattern2 long rotateRight shift = \" + shift, ref_ror_long[index], actual);\n-    }\n-\n-    public static void test_rol_int_const(int val, int index) {\n-      int res1 = Integer.rotateLeft(val, 1);\n-      verify(\"Constant integer rotateLeft shift = 1\", res1 , ref_int_rol_shift_1[index]);\n-      int res2 = (val << 1) | (val >>> -1);\n-      verify(\"Constant integer rotateLeft shift = 1\", res2 , ref_int_rol_shift_1[index]);\n-\n-      res1 = Integer.rotateLeft(val, 127);\n-      verify(\"Constant integer rotateLeft shift = 127\", res1 , ref_int_rol_shift_127[index]);\n-      res2 = (val << 127) | (val >>> -127);\n-      verify(\"Constant integer rotateLeft shift = 127\", res2 , ref_int_rol_shift_127[index]);\n-\n-      res1 = Integer.rotateLeft(val, 128);\n-      verify(\"Constant integer rotateLeft shift = 128\", res1 , ref_int_rol_shift_128[index]);\n-      res2 = (val << 128) | (val >>> -128);\n-      verify(\"Constant integer rotateLeft pattern = 128\", res2 , ref_int_rol_shift_128[index]);\n-\n-      res1 = Integer.rotateLeft(val, -128);\n-      verify(\"Constant integer rotateLeft shift = -128\", res1 , ref_int_rol_shift_M128[index]);\n-      res2 = (val << -128) | (val >>> 128);\n-      verify(\"Constant integer rotateLeft pattern = 128\", res2 , ref_int_rol_shift_M128[index]);\n-\n-      res1 = Integer.rotateLeft(val, -129);\n-      verify(\"Constant integer rotateLeft shift = -129\", res1 , ref_int_rol_shift_M129[index]);\n-      res2 = (val << -129) | (val >>> 129);\n-      verify(\"Constant integer rotateLeft pattern = 129\", res2 , ref_int_rol_shift_M129[index]);\n-    }\n-\n-    public static void test_ror_int_const(int val, int index) {\n-      int res1 = Integer.rotateRight(val, 1);\n-      verify(\"Constant integer rotateRight shift = 1\", res1 , ref_int_ror_shift_1[index]);\n-      int res2 = (val >>> 1) | (val << -1);\n-      verify(\"Constant integer rotateRight pattern = 1\", res2 , ref_int_ror_shift_1[index]);\n-\n-      res1 = Integer.rotateRight(val, 127);\n-      verify(\"Constant integer rotateRight shift = 127\", res1 , ref_int_ror_shift_127[index]);\n-      res2 = (val >>> 127) | (val << -127);\n-      verify(\"Constant integer rotateRight pattern = 127\", res2 , ref_int_ror_shift_127[index]);\n-\n-      res1 = Integer.rotateRight(val, 128);\n-      verify(\"Constant integer rotateRight shift = 128\", res1 , ref_int_ror_shift_128[index]);\n-      res2 = (val >>> 128) | (val << -128);\n-      verify(\"Constant integer rotateRight pattern = 128\", res2 , ref_int_ror_shift_128[index]);\n-\n-      res1 = Integer.rotateRight(val, -128);\n-      verify(\"Constant integer rotateRight shift = -128\", res1 , ref_int_ror_shift_M128[index]);\n-      res2 = (val >>> -128) | (val << 128);\n-      verify(\"Constant integer rotateRight pattern = 128\", res2 , ref_int_ror_shift_M128[index]);\n-\n-      res1 = Integer.rotateRight(val, -129);\n-      verify(\"Constant integer rotateRight shift = -129\", res1 , ref_int_ror_shift_M129[index]);\n-      res2 = (val >>> -129) | (val << 129);\n-      verify(\"Constant integer rotateRight pattern = 129\", res2 , ref_int_ror_shift_M129[index]);\n-    }\n-\n-    public static void test_rol_long_const(long val, int index) {\n-      long res1 = Long.rotateLeft(val, 1);\n-      verify(\"Constant long rotateLeft shift = 1\", res1 , ref_long_rol_shift_1[index]);\n-      long res2 = (val << 1) | (val >>> -1);\n-      verify(\"Constant long rotateLeft pattern = 1\", res2 , ref_long_rol_shift_1[index]);\n-\n-      res1 = Long.rotateLeft(val, 127);\n-      verify(\"Constant long rotateLeft shift = 127\", res1 , ref_long_rol_shift_127[index]);\n-      res2 = (val << 127) | (val >>> -127);\n-      verify(\"Constant long rotateLeft pattern = 127\", res2 , ref_long_rol_shift_127[index]);\n-\n-      res1 = Long.rotateLeft(val, 128);\n-      verify(\"Constant long rotateLeft shift = 128\", res1 , ref_long_rol_shift_128[index]);\n-      res2 = (val << 128) | (val >>> -128);\n-      verify(\"Constant long rotateLeft pattern = 128\", res2 , ref_long_rol_shift_128[index]);\n-\n-      res1 = Long.rotateLeft(val, -128);\n-      verify(\"Constant long rotateLeft shift = -128\", res1 , ref_long_rol_shift_M128[index]);\n-      res2 = (val << -128) | (val >>> 128);\n-      verify(\"Constant long rotateLeft pattern = 128\", res2 , ref_long_rol_shift_M128[index]);\n-\n-      res1 = Long.rotateLeft(val, -129);\n-      verify(\"Constant long rotateLeft shift = -129\", res1 , ref_long_rol_shift_M129[index]);\n-      res2 = (val << -129) | (val >>> 129);\n-      verify(\"Constant long rotateLeft pattern = 129\", res2 , ref_long_rol_shift_M129[index]);\n-    }\n-\n-    public static void test_ror_long_const(long val, int index) {\n-      long res1 = Long.rotateRight(val, 1);\n-      verify(\"Constant long rotateRight shift = 1\", res1 , ref_long_ror_shift_1[index]);\n-      long res2 = (val >>> 1) | (val << -1);\n-      verify(\"Constant long rotateRight pattern = 1\", res2 , ref_long_ror_shift_1[index]);\n-\n-      res1 = Long.rotateRight(val, 127);\n-      verify(\"Constant long rotateRight shift = 127\", res1 , ref_long_ror_shift_127[index]);\n-      res2 = (val >>> 127) | (val << -127);\n-      verify(\"Constant long rotateRight pattern = 127\", res2 , ref_long_ror_shift_127[index]);\n-\n-      res1 = Long.rotateRight(val, 128);\n-      verify(\"Constant long rotateRight shift = 128\", res1 , ref_long_ror_shift_128[index]);\n-      res2 = (val >>> 128) | (val << -128);\n-      verify(\"Constant long rotateRight pattern = 128\", res2 , ref_long_ror_shift_128[index]);\n-\n-      res1 = Long.rotateRight(val, -128);\n-      verify(\"Constant long rotateRight shift = -128\", res1 , ref_long_ror_shift_M128[index]);\n-      res2 = (val >>> -128) | (val << 128);\n-      verify(\"Constant long rotateRight pattern = 128\", res2 , ref_long_ror_shift_M128[index]);\n-\n-      res1 = Long.rotateRight(val, -129);\n-      verify(\"Constant long rotateRight shift = -129\", res1 , ref_long_ror_shift_M129[index]);\n-      res2 = (val >>> -129) | (val << 129);\n-      verify(\"Constant long rotateRight pattern = 129\", res2 , ref_long_ror_shift_M129[index]);\n-    }\n-\n-    public static void test_rol_int_zero(int val) {\n+        if (ref != actual) {\n+            System.err.println(text + \" \" + ref + \" != \" + actual);\n+            throw new Error(\"Fail\");\n+        }\n+    }\n+\n+    static void verify(String text, int ref, int actual) {\n+        if (ref != actual) {\n+            System.err.println(text + \" \" + ref + \" != \" + actual);\n+            throw new Error(\"Fail\");\n+        }\n+    }\n+\n+    \/\/ ror test constant\n+    public static int testRorOrInt1(int val) {\n+        return (val >>> 1) | (val << (32 - 1));\n+    }\n+\n+    public static int testRorOrInt16(int val) {\n+        return (val >>> 16) | (val << (32 - 16));\n+    }\n+\n+    public static int testRorOrInt31(int val) {\n+        return (val >>> 31) | (val << (32 - 31));\n+    }\n+\n+    public static int testRorOrInt32(int val) {\n+        return (val >>> 32) | (val << (32 - 32));\n+    }\n+\n+    public static long testRorOrLong1(long val) {\n+        return (val >>> 1) | (val << (64 - 1));\n+    }\n+\n+    public static long testRorOrLong16(long val) {\n+        return (val >>> 16) | (val << (64 - 16));\n+    }\n+\n+    public static long testRorOrLong63(long val) {\n+        return (val >>> 63) | (val << (64 - 63));\n+    }\n+\n+    public static long testRorOrLong64(long val) {\n+        return (val >>> 64) | (val << (64 - 64));\n+    }\n+\n+    public static int testRorAddInt1(int val) {\n+        return (val >>> 1) + (val << (32 - 1));\n+    }\n+\n+    public static int testRorAddInt16(int val) {\n+        return (val >>> 16) + (val << (32 - 16));\n+    }\n+\n+    public static int testRorAddInt31(int val) {\n+        return (val >>> 31) + (val << (32 - 31));\n+    }\n+\n+    public static int testRorAddInt32(int val) {\n+        return (val >>> 32) + (val << (32 - 32));\n+    }\n+\n+    public static long testRorAddLong1(long val) {\n+        return (val >>> 1) + (val << (64 - 1));\n+    }\n+\n+    public static long testRorAddLong16(long val) {\n+        return (val >>> 16) + (val << (64 - 16));\n+    }\n+\n+    public static long testRorAddLong63(long val) {\n+        return (val >>> 63) + (val << (64 - 63));\n+    }\n+\n+    public static long testRorAddLong64(long val) {\n+        return (val >>> 64) + (val << (64 - 64));\n+    }\n+\n+    \/\/ eor(ROR shift)\n+    public static int testRorOrInt1Eor(int val) {\n+        return val ^ ((val >>> 1) | (val << (32 - 1)));\n+    }\n+\n+    public static int testRorOrInt16Eor(int val) {\n+        return val ^ ((val >>> 16) | (val << (32 - 16)));\n+    }\n+\n+    public static int testRorOrInt31Eor(int val) {\n+        return val ^ ((val >>> 31) | (val << (32 - 31)));\n+    }\n+\n+    public static int testRorOrInt32Eor(int val) {\n+        return val ^ ((val >>> 32) | (val << (32 - 32)));\n+    }\n+\n+    public static long testRorOrLong1Eor(long val) {\n+        return val ^ ((val >>> 1) | (val << (64 - 1)));\n+    }\n+\n+    public static long testRorOrLong16Eor(long val) {\n+        return val ^ ((val >>> 16) | (val << (64 - 16)));\n+    }\n+\n+    public static long testRorOrLong63Eor(long val) {\n+        return val ^ ((val >>> 63) | (val << (64 - 63)));\n+    }\n+\n+    public static long testRorOrLong64Eor(long val) {\n+        return val ^ ((val >>> 64) | (val << (64 - 64)));\n+    }\n+\n+    \/\/ and(ROR shift)\n+    public static int testRorOrInt1And(int val) {\n+        return val & ((val >>> 1) | (val << (32 - 1)));\n+    }\n+\n+    public static int testRorOrInt16And(int val) {\n+        return val & ((val >>> 16) | (val << (32 - 16)));\n+    }\n+\n+    public static int testRorOrInt31And(int val) {\n+        return val & ((val >>> 31) | (val << (32 - 31)));\n+    }\n+\n+    public static int testRorOrInt32And(int val) {\n+        return val & ((val >>> 32) | (val << (32 - 32)));\n+    }\n+\n+    public static long testRorOrLong1And(long val) {\n+        return val & ((val >>> 1) | (val << (64 - 1)));\n+    }\n+\n+    public static long testRorOrLong16And(long val) {\n+        return val & ((val >>> 16) | (val << (64 - 16)));\n+    }\n+\n+    public static long testRorOrLong63And(long val) {\n+        return val & ((val >>> 63) | (val << (64 - 63)));\n+    }\n+\n+    public static long testRorOrLong64And(long val) {\n+        return val & ((val >>> 64) | (val << (64 - 64)));\n+    }\n+\n+    \/\/ or(ROR shift)\n+    public static int testRorOrInt1Or(int val) {\n+        return val | ((val >>> 1) | (val << (32 - 1)));\n+    }\n+\n+    public static int testRorOrInt16Or(int val) {\n+        return val | ((val >>> 16) | (val << (32 - 16)));\n+    }\n+\n+    public static int testRorOrInt31Or(int val) {\n+        return val | ((val >>> 31) | (val << (32 - 31)));\n+    }\n+\n+    public static int testRorOrInt32Or(int val) {\n+        return val | ((val >>> 32) | (val << (32 - 32)));\n+    }\n+\n+    public static long testRorOrLong1Or(long val) {\n+        return val | ((val >>> 1) | (val << (64 - 1)));\n+    }\n+\n+    public static long testRorOrLong16Or(long val) {\n+        return val | ((val >>> 16) | (val << (64 - 16)));\n+    }\n+\n+    public static long testRorOrLong63Or(long val) {\n+        return val | ((val >>> 63) | (val << (64 - 63)));\n+    }\n+\n+    public static long testRorOrLong64Or(long val) {\n+        return val | ((val >>> 64) | (val << (64 - 64)));\n+    }\n+\n+    \/\/ eon (ROR shift)\n+    public static int testRorOrInt1Eon(int val) {\n+        return val ^ (-1 ^ ((val >>> 1) | (val << (32 - 1))));\n+    }\n+\n+    public static int testRorOrInt16Eon(int val) {\n+        return val ^ (-1 ^ ((val >>> 16) | (val << (32 - 16))));\n+    }\n+\n+    public static int testRorOrInt31Eon(int val) {\n+        return val ^ (-1 ^ ((val >>> 31) | (val << (32 - 31))));\n+    }\n+\n+    public static int testRorOrInt32Eon(int val) {\n+        return val ^ (-1 ^ ((val >>> 32) | (val << (32 - 32))));\n+    }\n+\n+    public static long testRorOrLong1Eon(long val) {\n+        return val ^ (-1 ^ ((val >>> 1) | (val << (64 - 1))));\n+    }\n+\n+    public static long testRorOrLong16Eon(long val) {\n+        return val ^ (-1 ^ ((val >>> 16) | (val << (64 - 16))));\n+    }\n+\n+    public static long testRorOrLong63Eon(long val) {\n+        return val ^ (-1 ^ ((val >>> 63) | (val << (64 - 63))));\n+    }\n+\n+    public static long testRorOrLong64Eon(long val) {\n+        return val ^ (-1 ^ ((val >>> 64) | (val << (64 - 64))));\n+    }\n+\n+    \/\/ and (ROR shift)\n+    public static int testRorOrInt1Bic(int val) {\n+        return val & (-1 ^ ((val >>> 1) | (val << (32 - 1))));\n+    }\n+\n+    public static int testRorOrInt16Bic(int val) {\n+        return val & (-1 ^ ((val >>> 16) | (val << (32 - 16))));\n+    }\n+\n+    public static int testRorOrInt31Bic(int val) {\n+        return val & (-1 ^ ((val >>> 31) | (val << (32 - 31))));\n+    }\n+\n+    public static int testRorOrInt32Bic(int val) {\n+        return val & (-1 ^ ((val >>> 32) | (val << (32 - 32))));\n+    }\n+\n+    public static long testRorOrLong1Bic(long val) {\n+        return val & (-1 ^ ((val >>> 1) | (val << (64 - 1))));\n+    }\n+\n+    public static long testRorOrLong16Bic(long val) {\n+        return val & (-1 ^ ((val >>> 16) | (val << (64 - 16))));\n+    }\n+\n+    public static long testRorOrLong63Bic(long val) {\n+        return val & (-1 ^ ((val >>> 63) | (val << (64 - 63))));\n+    }\n+\n+    public static long testRorOrLong64Bic(long val) {\n+        return val & (-1 ^ ((val >>> 64) | (val << (64 - 64))));\n+    }\n+\n+    \/\/ or (ROR shift)\n+    public static int testRorOrInt1Orn(int val) {\n+        return val | (-1 ^ ((val >>> 1) | (val << (32 - 1))));\n+    }\n+\n+    public static int testRorOrInt16Orn(int val) {\n+        return val | (-1 ^ ((val >>> 16) | (val << (32 - 16))));\n+    }\n+\n+    public static int testRorOrInt31Orn(int val) {\n+        return val | (-1 ^ ((val >>> 31) | (val << (32 - 31))));\n+    }\n+\n+    public static int testRorOrInt32Orn(int val) {\n+        return val | (-1 ^ ((val >>> 32) | (val << (32 - 32))));\n+    }\n+\n+    public static long testRorOrLong1Orn(long val) {\n+        return val | (-1 ^ ((val >>> 1) | (val << (64 - 1))));\n+    }\n+\n+    public static long testRorOrLong16Orn(long val) {\n+        return val | (-1 ^ ((val >>> 16) | (val << (64 - 16))));\n+    }\n+\n+    public static long testRorOrLong63Orn(long val) {\n+        return val | (-1 ^ ((val >>> 63) | (val << (64 - 63))));\n+    }\n+\n+    public static long testRorOrLong64Orn(long val) {\n+        return val | (-1 ^ ((val >>> 64) | (val << (64 - 64))));\n+    }\n+\n+    \/\/ test rotate API\n+    public static int testRorIntApi(int val, int distance) {\n+        return Integer.rotateRight(val, distance);\n+    }\n+\n+    public static long testRorLongApi(long val, int distance) {\n+        return Long.rotateRight(val, distance);\n+    }\n+\n+    public static int testRolIntApi(int val, int distance) {\n+        return Integer.rotateLeft(val, distance);\n+    }\n+\n+    public static long testRolLongApi(long val, int distance) {\n+        return Long.rotateLeft(val, distance);\n+    }\n+\n+    public static void testRolIntZero(int val) {\n@@ -297,1 +516,1 @@\n-    public static void test_rol_long_zero(long val) {\n+    public static void testRolLongZero(long val) {\n@@ -311,1 +530,1 @@\n-    public static void test_ror_int_zero(int val) {\n+    public static void testRorIntZero(int val) {\n@@ -325,1 +544,1 @@\n-    public static void test_ror_long_zero(long val) {\n+    public static void testRorLongZero(long val) {\n@@ -339,24 +558,116 @@\n-    public static void main(String args[]) throws Exception {\n-      rand = new Random(8248830);\n-\n-      int [] test_int = init_int_vector();\n-      long [] test_long = init_long_vector();\n-      int [] shift_vec = init_shift_vector(rand);\n-\n-      try {\n-        for (int i = 0  ; i < ITERS; i++) {\n-          for (int j = 0 ; j <  SIZE ; j++) {\n-            test_rol_int(test_int[j], shift_vec[j], j);\n-            test_ror_int(test_int[j], shift_vec[j], j);\n-            test_rol_long(test_long[j], shift_vec[j], j);\n-            test_ror_long(test_long[j], shift_vec[j], j);\n-\n-            test_rol_int_const(test_int[j], j);\n-            test_ror_int_const(test_int[j], j);\n-            test_rol_long_const(test_long[j], j);\n-            test_ror_long_const(test_long[j], j);\n-          }\n-          test_rol_int_zero(i);\n-          test_rol_long_zero(i);\n-          test_ror_int_zero(i);\n-          test_ror_long_zero(i);\n+    public static void main(String[] args) {\n+        try {\n+            for (int count = 0; count < ITERS; count++) {\n+                for (int i = 0; i < INT_VALUES.length; i++) {\n+                    int val = INT_VALUES[i];\n+                    verify(\"testRorOrInt1(\" + val + \")\", testRorOrInt1(val), TEST_ROR_OR_INT_1_EXPECTED[i]);\n+                    verify(\"testRorOrInt16(\" + val + \")\", testRorOrInt16(val), TEST_ROR_OR_INT_16_EXPECTED[i]);\n+                    verify(\"testRorOrInt31(\" + val + \")\", testRorOrInt31(val), TEST_ROR_OR_INT_31_EXPECTED[i]);\n+                    verify(\"testRorOrInt32(\" + val + \")\", testRorOrInt32(val), TEST_ROR_OR_INT_32_EXPECTED[i]);\n+\n+                    verify(\"testRorAddInt1(\" + val + \")\", testRorAddInt1(val), TEST_ROR_ADD_INT_1_EXPECTED[i]);\n+                    verify(\"testRorAddInt16(\" + val + \")\", testRorAddInt16(val), TEST_ROR_ADD_INT_16_EXPECTED[i]);\n+                    verify(\"testRorAddInt31(\" + val + \")\", testRorAddInt31(val), TEST_ROR_ADD_INT_31_EXPECTED[i]);\n+                    verify(\"testRorAddInt32(\" + val + \")\", testRorAddInt32(val), TEST_ROR_ADD_INT_32_EXPECTED[i]);\n+\n+                    verify(\"testRorOrInt1Eor(\" + val + \")\", testRorOrInt1Eor(val), TEST_EOR_ROR_SHIFT_1_INT_EXPECTED[i]);\n+                    verify(\"testRorOrInt16Eor(\" + val + \")\", testRorOrInt16Eor(val), TEST_EOR_ROR_SHIFT_16_INT_EXPECTED[i]);\n+                    verify(\"testRorOrInt31Eor(\" + val + \")\", testRorOrInt31Eor(val), TEST_EOR_ROR_SHIFT_31_INT_EXPECTED[i]);\n+                    verify(\"testRorOrInt32Eor(\" + val + \")\", testRorOrInt32Eor(val), TEST_EOR_ROR_SHIFT_32_INT_EXPECTED[i]);\n+\n+                    verify(\"testRorOrInt1And(\" + val + \")\", testRorOrInt1And(val), TEST_AND_ROR_SHIFT_1_INT_EXPECTED[i]);\n+                    verify(\"testRorOrInt16And(\" + val + \")\", testRorOrInt16And(val), TEST_AND_ROR_SHIFT_16_INT_EXPECTED[i]);\n+                    verify(\"testRorOrInt31And(\" + val + \")\", testRorOrInt31And(val), TEST_AND_ROR_SHIFT_31_INT_EXPECTED[i]);\n+                    verify(\"testRorOrInt32And(\" + val + \")\", testRorOrInt32And(val), TEST_AND_ROR_SHIFT_32_INT_EXPECTED[i]);\n+\n+                    verify(\"testRorOrInt1Or(\" + val + \")\", testRorOrInt1Or(val), TEST_OR_ROR_SHIFT_1_INT_EXPECTED[i]);\n+                    verify(\"testRorOrInt16Or(\" + val + \")\", testRorOrInt16Or(val), TEST_OR_ROR_SHIFT_16_INT_EXPECTED[i]);\n+                    verify(\"testRorOrInt31Or(\" + val + \")\", testRorOrInt31Or(val), TEST_OR_ROR_SHIFT_31_INT_EXPECTED[i]);\n+                    verify(\"testRorOrInt32Or(\" + val + \")\", testRorOrInt32Or(val), TEST_OR_ROR_SHIFT_32_INT_EXPECTED[i]);\n+\n+                    verify(\"testRorOrInt1Eon(\" + val + \")\", testRorOrInt1Eon(val), TEST_EON_ROR_SHIFT_1_INT_EXPECTED[i]);\n+                    verify(\"testRorOrInt16Eon(\" + val + \")\", testRorOrInt16Eon(val), TEST_EON_ROR_SHIFT_16_INT_EXPECTED[i]);\n+                    verify(\"testRorOrInt31Eon(\" + val + \")\", testRorOrInt31Eon(val), TEST_EON_ROR_SHIFT_31_INT_EXPECTED[i]);\n+                    verify(\"testRorOrInt32Eon(\" + val + \")\", testRorOrInt32Eon(val), TEST_EON_ROR_SHIFT_32_INT_EXPECTED[i]);\n+\n+                    verify(\"testRorOrInt1Bic(\" + val + \")\", testRorOrInt1Bic(val), TEST_BIC_ROR_SHIFT_1_INT_EXPECTED[i]);\n+                    verify(\"testRorOrInt16Bic(\" + val + \")\", testRorOrInt16Bic(val), TEST_BIC_ROR_SHIFT_16_INT_EXPECTED[i]);\n+                    verify(\"testRorOrInt31Bic(\" + val + \")\", testRorOrInt31Bic(val), TEST_BIC_ROR_SHIFT_31_INT_EXPECTED[i]);\n+                    verify(\"testRorOrInt32Bic(\" + val + \")\", testRorOrInt32Bic(val), TEST_BIC_ROR_SHIFT_32_INT_EXPECTED[i]);\n+\n+                    verify(\"testRorOrInt1Orn(\" + val + \")\", testRorOrInt1Orn(val), TEST_ORN_ROR_SHIFT_1_INT_EXPECTED[i]);\n+                    verify(\"testRorOrInt16Orn(\" + val + \")\", testRorOrInt16Orn(val), TEST_ORN_ROR_SHIFT_16_INT_EXPECTED[i]);\n+                    verify(\"testRorOrInt31Orn(\" + val + \")\", testRorOrInt31Orn(val), TEST_ORN_ROR_SHIFT_31_INT_EXPECTED[i]);\n+                    verify(\"testRorOrInt32Orn(\" + val + \")\", testRorOrInt32Orn(val), TEST_ORN_ROR_SHIFT_32_INT_EXPECTED[i]);\n+\n+                    verify(\"testRorIntApi(\" + val + \", 1)\", testRorIntApi(val, 1), TEST_ROR_INT_API_1_EXPECTED[i]);\n+                    verify(\"testRorIntApi(\" + val + \", 16)\", testRorIntApi(val, 16), TEST_ROR_INT_API_16_EXPECTED[i]);\n+                    verify(\"testRorIntApi(\" + val + \", 31)\", testRorIntApi(val, 31), TEST_ROR_INT_API_31_EXPECTED[i]);\n+                    verify(\"testRorIntApi(\" + val + \", 32)\", testRorIntApi(val, 32), TEST_ROR_INT_API_32_EXPECTED[i]);\n+                    verify(\"testRolIntApi(\" + val + \", 1)\", testRolIntApi(val, 1), TEST_ROL_INT_API_1_EXPECTED[i]);\n+                    verify(\"testRolIntApi(\" + val + \", 16)\", testRolIntApi(val, 16), TEST_ROL_INT_API_16_EXPECTED[i]);\n+                    verify(\"testRolIntApi(\" + val + \", 31)\", testRolIntApi(val, 31), TEST_ROL_INT_API_31_EXPECTED[i]);\n+                    verify(\"testRolIntApi(\" + val + \", 32)\", testRolIntApi(val, 32), TEST_ROL_INT_API_32_EXPECTED[i]);\n+\n+                    testRolIntZero(val);\n+                    testRorIntZero(val);\n+                }\n+\n+                for (int i = 0; i < LONG_VALUES.length; i++) {\n+                    long val = LONG_VALUES[i];\n+                    verify(\"testRorOrLong1(\" + val + \")\", testRorOrLong1(val), TEST_ROR_OR_LONG_1_EXPECTED[i]);\n+                    verify(\"testRorOrLong16(\" + val + \")\", testRorOrLong16(val), TEST_ROR_OR_LONG_16_EXPECTED[i]);\n+                    verify(\"testRorOrLong63(\" + val + \")\", testRorOrLong63(val), TEST_ROR_OR_LONG_63_EXPECTED[i]);\n+                    verify(\"testRorOrLong64(\" + val + \")\", testRorOrLong64(val), TEST_ROR_OR_LONG_64_EXPECTED[i]);\n+\n+                    verify(\"testRorAddLong1(\" + val + \")\", testRorAddLong1(val), TEST_ROR_ADD_LONG_1_EXPECTED[i]);\n+                    verify(\"testRorAddLong16(\" + val + \")\", testRorAddLong16(val), TEST_ROR_ADD_LONG_16_EXPECTED[i]);\n+                    verify(\"testRorAddLong63(\" + val + \")\", testRorAddLong63(val), TEST_ROR_ADD_LONG_63_EXPECTED[i]);\n+                    verify(\"testRorAddLong64(\" + val + \")\", testRorAddLong64(val), TEST_ROR_ADD_LONG_64_EXPECTED[i]);\n+\n+                    verify(\"testRorOrLong1Eor(\" + val + \")\", testRorOrLong1Eor(val), TEST_EOR_ROR_SHIFT_1_LONG_EXPECTED[i]);\n+                    verify(\"testRorOrLong16Eor(\" + val + \")\", testRorOrLong16Eor(val), TEST_EOR_ROR_SHIFT_16_LONG_EXPECTED[i]);\n+                    verify(\"testRorOrLong63Eor(\" + val + \")\", testRorOrLong63Eor(val), TEST_EOR_ROR_SHIFT_63_LONG_EXPECTED[i]);\n+                    verify(\"testRorOrLong64Eor(\" + val + \")\", testRorOrLong64Eor(val), TEST_EOR_ROR_SHIFT_64_LONG_EXPECTED[i]);\n+\n+                    verify(\"testRorOrLong1And(\" + val + \")\", testRorOrLong1And(val), TEST_AND_ROR_SHIFT_1_LONG_EXPECTED[i]);\n+                    verify(\"testRorOrLong16And(\" + val + \")\", testRorOrLong16And(val), TEST_AND_ROR_SHIFT_16_LONG_EXPECTED[i]);\n+                    verify(\"testRorOrLong63And(\" + val + \")\", testRorOrLong63And(val), TEST_AND_ROR_SHIFT_63_LONG_EXPECTED[i]);\n+                    verify(\"testRorOrLong64And(\" + val + \")\", testRorOrLong64And(val), TEST_AND_ROR_SHIFT_64_LONG_EXPECTED[i]);\n+\n+                    verify(\"testRorOrLong1Or(\" + val + \")\", testRorOrLong1Or(val), TEST_OR_ROR_SHIFT_1_LONG_EXPECTED[i]);\n+                    verify(\"testRorOrLong16Or(\" + val + \")\", testRorOrLong16Or(val), TEST_OR_ROR_SHIFT_16_LONG_EXPECTED[i]);\n+                    verify(\"testRorOrLong63Or(\" + val + \")\", testRorOrLong63Or(val), TEST_OR_ROR_SHIFT_63_LONG_EXPECTED[i]);\n+                    verify(\"testRorOrLong64Or(\" + val + \")\", testRorOrLong64Or(val), TEST_OR_ROR_SHIFT_64_LONG_EXPECTED[i]);\n+\n+                    verify(\"testRorOrLong1Eon(\" + val + \")\", testRorOrLong1Eon(val), TEST_EON_ROR_SHIFT_1_LONG_EXPECTED[i]);\n+                    verify(\"testRorOrLong16Eon(\" + val + \")\", testRorOrLong16Eon(val), TEST_EON_ROR_SHIFT_16_LONG_EXPECTED[i]);\n+                    verify(\"testRorOrLong63Eon(\" + val + \")\", testRorOrLong63Eon(val), TEST_EON_ROR_SHIFT_63_LONG_EXPECTED[i]);\n+                    verify(\"testRorOrLong64Eon(\" + val + \")\", testRorOrLong64Eon(val), TEST_EON_ROR_SHIFT_64_LONG_EXPECTED[i]);\n+\n+                    verify(\"testRorOrLong1Bic(\" + val + \")\", testRorOrLong1Bic(val), TEST_BIC_ROR_SHIFT_1_LONG_EXPECTED[i]);\n+                    verify(\"testRorOrLong16Bic(\" + val + \")\", testRorOrLong16Bic(val), TEST_BIC_ROR_SHIFT_16_LONG_EXPECTED[i]);\n+                    verify(\"testRorOrLong63Bic(\" + val + \")\", testRorOrLong63Bic(val), TEST_BIC_ROR_SHIFT_63_LONG_EXPECTED[i]);\n+                    verify(\"testRorOrLong64Bic(\" + val + \")\", testRorOrLong64Bic(val), TEST_BIC_ROR_SHIFT_64_LONG_EXPECTED[i]);\n+\n+                    verify(\"testRorOrLong1Orn(\" + val + \")\", testRorOrLong1Orn(val), TEST_ORN_ROR_SHIFT_1_LONG_EXPECTED[i]);\n+                    verify(\"testRorOrLong16Orn(\" + val + \")\", testRorOrLong16Orn(val), TEST_ORN_ROR_SHIFT_16_LONG_EXPECTED[i]);\n+                    verify(\"testRorOrLong63Orn(\" + val + \")\", testRorOrLong63Orn(val), TEST_ORN_ROR_SHIFT_63_LONG_EXPECTED[i]);\n+                    verify(\"testRorOrLong64Orn(\" + val + \")\", testRorOrLong64Orn(val), TEST_ORN_ROR_SHIFT_64_LONG_EXPECTED[i]);\n+\n+                    verify(\"testRorLongApi(\" + val + \", 1)\", testRorLongApi(val, 1), TEST_ROR_LONG_API_1_EXPECTED[i]);\n+                    verify(\"testRorLongApi(\" + val + \", 16)\", testRorLongApi(val, 16), TEST_ROR_LONG_API_16_EXPECTED[i]);\n+                    verify(\"testRorLongApi(\" + val + \", 63)\", testRorLongApi(val, 63), TEST_ROR_LONG_API_63_EXPECTED[i]);\n+                    verify(\"testRorLongApi(\" + val + \", 64)\", testRorLongApi(val, 64), TEST_ROR_LONG_API_64_EXPECTED[i]);\n+                    verify(\"testRolLongApi(\" + val + \", 1)\", testRolLongApi(val, 1), TEST_ROL_LONG_API_1_EXPECTED[i]);\n+                    verify(\"testRolLongApi(\" + val + \", 16)\", testRolLongApi(val, 16), TEST_ROL_LONG_API_16_EXPECTED[i]);\n+                    verify(\"testRolLongApi(\" + val + \", 63)\", testRolLongApi(val, 63), TEST_ROL_LONG_API_63_EXPECTED[i]);\n+                    verify(\"testRolLongApi(\" + val + \", 64)\", testRolLongApi(val, 64), TEST_ROL_LONG_API_64_EXPECTED[i]);\n+\n+                    testRolLongZero(i);\n+                    testRorLongZero(i);\n+                }\n+            }\n+            System.out.println(\"test status : PASS\");\n+        } catch (Exception e) {\n+            System.out.println(e.getMessage());\n@@ -364,4 +675,0 @@\n-        System.out.println(\"test status : PASS\");\n-      } catch (Exception e) {\n-        System.out.println(e.getMessage());\n-      }\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/TestRotate.java","additions":558,"deletions":251,"binary":false,"changes":809,"status":"modified"},{"patch":"@@ -0,0 +1,108 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.vm.compiler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.CompilerControl;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Benchmark)\n+@Fork(value = 3)\n+@Measurement(iterations = 5, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n+@Warmup(iterations = 5, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n+@CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+public class Rotation {\n+\n+    private static final int COUNT = 5000;\n+\n+    @State(Scope.Benchmark)\n+    public static class MyState {\n+        public int xi = 10;\n+        public int yi = 24;\n+    }\n+\n+    @Benchmark\n+    public void xorRotateRight(MyState s, Blackhole blackhole) {\n+        int x = s.xi;\n+        int y = s.yi;\n+        for (int i = 0; i < COUNT; i++) {\n+            y = x ^ ((y >>> 5) | (y << -5));\n+        }\n+        blackhole.consume(y);\n+    }\n+\n+    @Benchmark\n+    public void bicRotateRight(MyState s, Blackhole blackhole) {\n+        int x = s.xi;\n+        int y = s.yi;\n+        for (int i = 0; i < COUNT; i++) {\n+            y = x & (-1 ^ ((y >>> 5) | (y << -5)));\n+        }\n+        blackhole.consume(y);\n+    }\n+\n+    @Benchmark\n+    public void eonRotateRight(MyState s, Blackhole blackhole) {\n+        int x = s.xi;\n+        int y = s.yi;\n+        for (int i = 0; i < COUNT; i++) {\n+            y = x ^ (-1 ^ ((y >>> 5) | (y << -5)));\n+        }\n+        blackhole.consume(y);\n+    }\n+\n+    @Benchmark\n+    public void ornRotateRight(MyState s, Blackhole blackhole) {\n+        int x = s.xi;\n+        int y = s.yi;\n+        for (int i = 0; i < COUNT; i++) {\n+            y = x | (-1 ^ ((y >>> 5) | (y << -5)));\n+        }\n+        blackhole.consume(y);\n+    }\n+\n+    @Benchmark\n+    public void andRotateRight(MyState s, Blackhole blackhole) {\n+        int x = s.xi;\n+        int y = s.yi;\n+        for (int i = 0; i < COUNT; i++) {\n+            y = x & ((y >>> 5) | (y << -5));\n+        }\n+        blackhole.consume(y);\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/Rotation.java","additions":108,"deletions":0,"binary":false,"changes":108,"status":"added"}]}