{"files":[{"patch":"@@ -338,9 +338,11 @@\n-      in(1)->in(1) == in(2)->in(1)) {\n-    Node* rshift = op1 == Op_URShiftI ? in(1)->in(2) : in(2)->in(2);\n-    Node* lshift = op1 == Op_URShiftI ? in(2)->in(2) : in(1)->in(2);\n-    const TypeInt* rshift_t = phase->type(rshift)->isa_int();\n-    const TypeInt* lshift_t = phase->type(lshift)->isa_int();\n-    if (lshift_t != NULL && lshift_t->is_con() &&\n-        rshift_t != NULL && rshift_t->is_con() &&\n-        ((lshift_t->get_con() & 0x1F) == (32 - (rshift_t->get_con() & 0x1F)))) {\n-      return new RotateRightNode(in(1)->in(1), phase->intcon(rshift_t->get_con() & 0x1F), TypeInt::INT);\n+      in1->in(1) != NULL && in1->in(1) == in2->in(1)) {\n+    Node* rshift = op1 == Op_URShiftI ? in1->in(2) : in2->in(2);\n+    Node* lshift = op1 == Op_URShiftI ? in2->in(2) : in1->in(2);\n+    if (rshift != NULL && lshift != NULL) {\n+      const TypeInt* rshift_t = phase->type(rshift)->isa_int();\n+      const TypeInt* lshift_t = phase->type(lshift)->isa_int();\n+      if (lshift_t != NULL && lshift_t->is_con() &&\n+          rshift_t != NULL && rshift_t->is_con() &&\n+          ((lshift_t->get_con() & 0x1F) == (32 - (rshift_t->get_con() & 0x1F)))) {\n+        return new RotateRightNode(in1->in(1), phase->intcon(rshift_t->get_con() & 0x1F), TypeInt::INT);\n+      }\n@@ -469,9 +471,11 @@\n-      in(1)->in(1) == in(2)->in(1)) {\n-    Node* rshift = op1 == Op_URShiftL ? in(1)->in(2) : in(2)->in(2);\n-    Node* lshift = op1 == Op_URShiftL ? in(2)->in(2) : in(1)->in(2);\n-    const TypeInt* rshift_t = phase->type(rshift)->isa_int();\n-    const TypeInt* lshift_t = phase->type(lshift)->isa_int();\n-    if (lshift_t != NULL && lshift_t->is_con() &&\n-        rshift_t != NULL && rshift_t->is_con() &&\n-        ((lshift_t->get_con() & 0x3F) == (64 - (rshift_t->get_con() & 0x3F)))) {\n-      return new RotateRightNode(in(1)->in(1), phase->intcon(rshift_t->get_con() & 0x3F), TypeLong::LONG);\n+      in1->in(1) != NULL && in1->in(1) == in2->in(1)) {\n+    Node* rshift = op1 == Op_URShiftL ? in1->in(2) : in2->in(2);\n+    Node* lshift = op1 == Op_URShiftL ? in2->in(2) : in1->in(2);\n+    if (rshift != NULL && lshift != NULL) {\n+      const TypeInt* rshift_t = phase->type(rshift)->isa_int();\n+      const TypeInt* lshift_t = phase->type(lshift)->isa_int();\n+      if (lshift_t != NULL && lshift_t->is_con() &&\n+          rshift_t != NULL && rshift_t->is_con() &&\n+          ((lshift_t->get_con() & 0x3F) == (64 - (rshift_t->get_con() & 0x3F)))) {\n+        return new RotateRightNode(in1->in(1), phase->intcon(rshift_t->get_con() & 0x3F), TypeLong::LONG);\n+      }\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":22,"deletions":18,"binary":false,"changes":40,"status":"modified"}]}