[{"commit":{"message":"8256438: AArch64: Implement match rules with ROR shift register value\n\nThis patch transforms '(x >>> rshift) + (x << lshift)' into\n'RotateRight(x, rshift)' during GVN phase when both the shift exponents\nare constants and their sum equals to the number of bits for the type\nof shift base.\n\nThis patch implements some new match rules for AArch64 instructions\nwhich can take ROR as the optional shift. Such instructions are 'and',\n'or', 'eor', 'eon', 'bic' and 'orn'.\n\n  ror     w11, w2, #5\n  eor     w0, w1, w11\n\nWith this patch, above code could be optimized to below:\n\n  eor     w0, w1, w2, ror #5\n\nFinally, the patch refactors TestRotate.java[1][2].\n\nTested jtreg TestRotate.java, hotspot::hotspot_all_no_apps,\njdk::jdk_core, langtools::tier1.\n\n[1] https:\/\/bugs.openjdk.java.net\/browse\/JDK-8252776\n[2] https:\/\/mail.openjdk.java.net\/pipermail\/hotspot-compiler-dev\/2020-September\/039911.html\n\nChange-Id: I70842bcdb7cbc31bdf261c3223ea882076c2c66b"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64_ad.m4"},{"filename":"src\/hotspot\/share\/opto\/addnode.cpp"},{"filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/TestRotate.java"}],"sha":"6135975de50629f04a237fd0c6247265cc9c6465"}]