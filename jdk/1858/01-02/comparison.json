{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/TestRotate.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,108 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, Arm Limited. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.vm.compiler;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.CompilerControl;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Benchmark)\n+@Fork(value = 3)\n+@Measurement(iterations = 5, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n+@Warmup(iterations = 5, time = 1000, timeUnit = TimeUnit.MILLISECONDS)\n+@CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+public class Rotation {\n+\n+    private static final int COUNT = 5000;\n+\n+    @State(Scope.Benchmark)\n+    public static class MyState {\n+        public int xi = 10;\n+        public int yi = 24;\n+    }\n+\n+    @Benchmark\n+    public void xorRotateRight(MyState s, Blackhole blackhole) {\n+        int x = s.xi;\n+        int y = s.yi;\n+        for (int i = 0; i < COUNT; i++) {\n+            y = x ^ ((y >>> 5) | (y << -5));\n+        }\n+        blackhole.consume(y);\n+    }\n+\n+    @Benchmark\n+    public void bicRotateRight(MyState s, Blackhole blackhole) {\n+        int x = s.xi;\n+        int y = s.yi;\n+        for (int i = 0; i < COUNT; i++) {\n+            y = x & (-1 ^ ((y >>> 5) | (y << -5)));\n+        }\n+        blackhole.consume(y);\n+    }\n+\n+    @Benchmark\n+    public void eonRotateRight(MyState s, Blackhole blackhole) {\n+        int x = s.xi;\n+        int y = s.yi;\n+        for (int i = 0; i < COUNT; i++) {\n+            y = x ^ (-1 ^ ((y >>> 5) | (y << -5)));\n+        }\n+        blackhole.consume(y);\n+    }\n+\n+    @Benchmark\n+    public void ornRotateRight(MyState s, Blackhole blackhole) {\n+        int x = s.xi;\n+        int y = s.yi;\n+        for (int i = 0; i < COUNT; i++) {\n+            y = x | (-1 ^ ((y >>> 5) | (y << -5)));\n+        }\n+        blackhole.consume(y);\n+    }\n+\n+    @Benchmark\n+    public void andRotateRight(MyState s, Blackhole blackhole) {\n+        int x = s.xi;\n+        int y = s.yi;\n+        for (int i = 0; i < COUNT; i++) {\n+            y = x & ((y >>> 5) | (y << -5));\n+        }\n+        blackhole.consume(y);\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/Rotation.java","additions":108,"deletions":0,"binary":false,"changes":108,"status":"added"}]}