{"files":[{"patch":"@@ -310,4 +310,4 @@\n-  \/\/ Plain insert.\n-  template <typename LOOKUP_FUNC>\n-  bool internal_insert(Thread* thread, LOOKUP_FUNC& lookup_f, const VALUE& value,\n-                       bool* grow_hint, bool* clean_hint);\n+  \/\/ Insert and get current value.\n+  template <typename LOOKUP_FUNC, typename FOUND_FUNC>\n+  bool internal_insert_get(Thread* thread, LOOKUP_FUNC& lookup_f, const VALUE& value,\n+                           FOUND_FUNC& foundf, bool* grow_hint, bool* clean_hint);\n@@ -408,1 +408,12 @@\n-    return internal_insert(thread, lookup_f, value, grow_hint, clean_hint);\n+    struct NOP {\n+        void operator()(...) const {}\n+    } nop;\n+    return internal_insert_get(thread, lookup_f, value, nop, grow_hint, clean_hint);\n+  }\n+\n+  \/\/ Returns true if the item was inserted, duplicates are found with\n+  \/\/ LOOKUP_FUNC then FOUND_FUNC is called.\n+  template <typename LOOKUP_FUNC, typename FOUND_FUNC>\n+  bool insert_get(Thread* thread, LOOKUP_FUNC& lookup_f, VALUE& value, FOUND_FUNC& foundf,\n+                  bool* grow_hint = NULL, bool* clean_hint = NULL) {\n+    return internal_insert_get(thread, lookup_f, value, foundf, grow_hint, clean_hint);\n","filename":"src\/hotspot\/share\/utilities\/concurrentHashTable.hpp","additions":16,"deletions":5,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -869,1 +869,1 @@\n-template <typename LOOKUP_FUNC>\n+template <typename LOOKUP_FUNC, typename FOUND_FUNC>\n@@ -871,2 +871,2 @@\n-  internal_insert(Thread* thread, LOOKUP_FUNC& lookup_f, const VALUE& value,\n-                  bool* grow_hint, bool* clean_hint)\n+  internal_insert_get(Thread* thread, LOOKUP_FUNC& lookup_f, const VALUE& value,\n+                      FOUND_FUNC& foundf, bool* grow_hint, bool* clean_hint)\n@@ -891,0 +891,1 @@\n+          foundf(new_node->value());\n@@ -900,0 +901,1 @@\n+        foundf(old->value());\n","filename":"src\/hotspot\/share\/utilities\/concurrentHashTable.inline.hpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -109,0 +109,13 @@\n+static void cht_insert_get(Thread* thr) {\n+  uintptr_t val = 0x2;\n+  SimpleTestLookup stl(val);\n+  SimpleTestTable* cht = new SimpleTestTable();\n+  ValueGet vg;\n+  EXPECT_TRUE(cht->insert_get(thr, stl, val, vg)) << \"Insert unique value failed.\";\n+  EXPECT_EQ(val, vg.get_value()) << \"Getting an inserted value failed.\";\n+  ValueGet vg_dup;\n+  EXPECT_FALSE(cht->insert_get(thr, stl, val, vg_dup)) << \"Insert duplicate value succeeded.\";\n+  EXPECT_EQ(val, vg_dup.get_value()) << \"Getting an existing value failed.\";\n+  delete cht;\n+}\n+\n@@ -385,0 +398,4 @@\n+TEST_VM(ConcurrentHashTable, basic_insert_get) {\n+  nomt_test_doer(cht_insert_get);\n+}\n+\n","filename":"test\/hotspot\/gtest\/utilities\/test_concurrentHashtable.cpp","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"}]}