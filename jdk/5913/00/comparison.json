{"files":[{"patch":"@@ -0,0 +1,216 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8272908\n+ * @summary Verify signature KeyInfo\n+ * @library \/test\/lib\n+ * @modules java.xml.crypto\/com.sun.org.apache.xml.internal.security\n+ *          java.xml.crypto\/com.sun.org.apache.xml.internal.security.c14n\n+ *          java.xml.crypto\/com.sun.org.apache.xml.internal.security.signature\n+ *          java.xml.crypto\/com.sun.org.apache.xml.internal.security.utils\n+ *          java.xml.crypto\/com.sun.org.apache.xml.internal.security.keys\n+ *          java.xml.crypto\/com.sun.org.apache.xml.internal.security.keys.content.keyvalues\n+ *          java.xml.crypto\/com.sun.org.apache.xml.internal.security.keys.content\n+ *          java.xml.crypto\/com.sun.org.apache.xml.internal.security.exceptions\n+ * @run main\/othervm SignatureKeyInfo\n+ *\/\n+\n+import com.sun.org.apache.xml.internal.security.Init;\n+import com.sun.org.apache.xml.internal.security.exceptions.XMLSecurityException;\n+import com.sun.org.apache.xml.internal.security.keys.KeyInfo;\n+import com.sun.org.apache.xml.internal.security.keys.content.PGPData;\n+import com.sun.org.apache.xml.internal.security.keys.content.RetrievalMethod;\n+import com.sun.org.apache.xml.internal.security.keys.content.SPKIData;\n+import com.sun.org.apache.xml.internal.security.signature.XMLSignature;\n+import com.sun.org.apache.xml.internal.security.utils.Constants;\n+import com.sun.org.apache.xml.internal.security.utils.XMLUtils;\n+import com.sun.org.apache.xml.internal.security.utils.ElementProxy;\n+import com.sun.org.apache.xml.internal.security.keys.content.keyvalues.RSAKeyValue;\n+import com.sun.org.apache.xml.internal.security.keys.content.keyvalues.DSAKeyValue;\n+\n+import jdk.test.lib.Asserts;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.NodeList;\n+\n+\n+import javax.xml.crypto.dsig.CanonicalizationMethod;\n+import javax.xml.crypto.dsig.SignatureMethod;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import java.io.File;\n+import java.math.BigInteger;\n+import java.security.*;\n+\n+import static jdk.test.lib.Asserts.assertEquals;\n+\n+public class SignatureKeyInfo {\n+\n+    private final static String DIR = System.getProperty(\"test.src\", \".\");\n+    private static DocumentBuilderFactory dbf = null;\n+    private static Document doc;\n+\n+    private static final String NAME = \"testName\";\n+    private static final String TEXT = \"testText\";\n+    private static final String NS = Constants.SignatureSpecNS;\n+    private static final String RSA = \"RSA\";\n+    private static final String DSA = \"DSA\";\n+    private static final String FILE_TO_SIGN = \"signature-enveloping-hmac-sha1.xml\";\n+    private static final String FILE_TO_VERIFY = \"signature-enveloping-hmac-sha1-keyinfo.xml\";\n+    private static final int FIRST_EL = 0;\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        Init.init();\n+        dbf = DocumentBuilderFactory.newInstance();\n+        dbf.setNamespaceAware(true);\n+        dbf.setValidating(false);\n+        verifyXmlKeyInfo();\n+        sign(RSA);\n+        sign(DSA);\n+    }\n+\n+    private static void sign(String algorithm) throws Exception {\n+        File file = new File(DIR, FILE_TO_SIGN);\n+\n+        doc = dbf.newDocumentBuilder().parse(file);\n+\n+        KeyPair kp = getKeyPair(algorithm);\n+\n+        String signMethod = RSA.equals(algorithm) ? SignatureMethod.RSA_SHA256\n+                : SignatureMethod.DSA_SHA256;\n+\n+        XMLSignature signature = new XMLSignature(doc, null,\n+                signMethod, CanonicalizationMethod.INCLUSIVE);\n+\n+        signature.addKeyInfo(kp.getPublic());\n+        KeyInfo keyInfo = signature.getKeyInfo();\n+        addKeyInfoData(keyInfo, algorithm);\n+        signature.sign(kp.getPrivate());\n+    }\n+\n+    private static Element getSignElement() throws Exception {\n+        NodeList nl =\n+                doc.getElementsByTagNameNS(NS, \"Signature\");\n+        if (nl.getLength() == 0) {\n+            throw new Exception(\"Could not find signature Element\");\n+        }\n+\n+        return (Element) nl.item(FIRST_EL);\n+    }\n+\n+    private static void addKeyInfoData(KeyInfo keyInfo, String algorithm) throws Exception {\n+        KeyPair keyPair = getKeyPair(algorithm);\n+\n+        if (algorithm.equals(RSA)) {\n+            RSAKeyValue rsaKeyValue = new RSAKeyValue(doc, keyPair.getPublic());\n+            keyInfo.add(rsaKeyValue);\n+        } else {\n+            DSAKeyValue dsaKeyValue = new DSAKeyValue(doc, keyPair.getPublic());\n+            keyInfo.add(dsaKeyValue);\n+        }\n+\n+        Element elpgp= doc.createElementNS(NS, Constants._TAG_PGPDATA);\n+        Element elrm= doc.createElementNS(NS, Constants._TAG_RETRIEVALMETHOD);\n+        Element elspki= doc.createElementNS(NS, Constants._TAG_SPKIDATA);\n+        keyInfo.add(new PGPData(elpgp, NS));\n+        keyInfo.add(new RetrievalMethod(elrm, NS));\n+        keyInfo.add(new SPKIData(elspki, NS));\n+\n+        keyInfo.setId(TEXT);\n+        keyInfo.addKeyName(TEXT);\n+        keyInfo.add(keyPair.getPublic());\n+        keyInfo.addKeyValue(keyPair.getPublic());\n+        keyInfo.addDEREncodedKeyValue(keyPair.getPublic());\n+        keyInfo.addKeyInfoReference(NS);\n+        keyInfo.addMgmtData(TEXT);\n+\n+        Element e = XMLUtils.createElementInSignatureSpace(doc, NAME);\n+        keyInfo.addKeyValue(e);\n+        keyInfo.addUnknownElement(e);\n+        keyInfo.addText(TEXT);\n+        keyInfo.addTextElement(TEXT, NAME);\n+        keyInfo.addBigIntegerElement(BigInteger.valueOf(12345), NAME);\n+        keyInfo.addBase64Text(TEXT.getBytes());\n+        keyInfo.addBase64Element(TEXT.getBytes(), NAME);\n+\n+        verifyKeyInfoData(keyInfo, algorithm);\n+    }\n+\n+    private static KeyPair getKeyPair(String algorithm) throws NoSuchAlgorithmException {\n+        KeyPairGenerator keyGen = KeyPairGenerator.getInstance(algorithm);\n+        keyGen.initialize(2048);\n+\n+        return keyGen.genKeyPair();\n+    }\n+\n+    private static void verifyKeyInfoData(KeyInfo keyInfo, String algorithm)\n+            throws XMLSecurityException {\n+        Asserts.assertTrue(keyInfo.containsKeyName());\n+        verifyElementText(keyInfo.itemKeyName(FIRST_EL));\n+        Asserts.assertTrue(keyInfo.containsKeyValue());\n+        verifyElementNS(keyInfo.itemKeyValue(FIRST_EL).getBaseNamespace());\n+\n+        Asserts.assertTrue(keyInfo.containsKeyInfoReference());\n+        verifyElementNS(keyInfo.itemKeyInfoReference(FIRST_EL).getURI());\n+        Asserts.assertTrue(keyInfo.containsDEREncodedKeyValue());\n+        Asserts.assertTrue(keyInfo.containsMgmtData());\n+        verifyElementText(keyInfo.itemMgmtData(FIRST_EL));\n+        Asserts.assertEquals(TEXT, keyInfo.getId());\n+\n+        Asserts.assertTrue(keyInfo.containsPGPData());\n+        verifyElementNS(keyInfo.itemPGPData(FIRST_EL).getBaseNamespace());\n+\n+        Asserts.assertTrue(keyInfo.containsRetrievalMethod());\n+        verifyElementNS(keyInfo.itemRetrievalMethod(FIRST_EL).getBaseNamespace());\n+        Asserts.assertTrue(keyInfo.containsSPKIData());\n+        verifyElementNS(keyInfo.itemSPKIData(FIRST_EL).getBaseNamespace());\n+\n+        Asserts.assertTrue(keyInfo.containsUnknownElement());\n+        Asserts.assertEquals(NAME, keyInfo.itemUnknownElement(13).getLocalName());\n+\n+        Asserts.assertFalse(keyInfo.isEmpty());\n+        Asserts.assertEquals(algorithm, keyInfo.getPublicKey().getAlgorithm());\n+    }\n+\n+    private static void verifyXmlKeyInfo() throws Exception {\n+        File file = new File(DIR, FILE_TO_VERIFY);\n+\n+        doc = dbf.newDocumentBuilder().parse(file);\n+        Element sigElement = getSignElement();\n+        XMLSignature signature = new XMLSignature\n+                (sigElement, file.toURI().toString());\n+\n+        KeyInfo keyInfo = signature.getKeyInfo();\n+        assertEquals(TEXT, keyInfo.itemMgmtData(FIRST_EL).getMgmtData());\n+    }\n+\n+    private static void verifyElementText(ElementProxy elementProxy) {\n+        Asserts.assertEquals(TEXT, elementProxy.getTextFromTextChild());\n+    }\n+\n+    private static void verifyElementNS(String actualNs) {\n+        Asserts.assertEquals(NS, actualNs);\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/com\/sun\/org\/apache\/xml\/internal\/security\/SignatureKeyInfo.java","additions":216,"deletions":0,"binary":false,"changes":216,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,0 +50,1 @@\n+import static java.nio.charset.StandardCharsets.US_ASCII;\n@@ -67,1 +68,5 @@\n-        generate_hmac_sha1_40();\n+\n+        \/\/ There are multiple validations regarding hmac min output length, therefore\n+        \/\/ checking different values will exercise multiple code blocks\n+        generate_hmac_sha1(40);\n+        generate_hmac_sha1(128);\n@@ -89,1 +94,1 @@\n-        SecretKey sk = signature.createSecretKey(\"secret\".getBytes(\"ASCII\"));\n+        SecretKey sk = signature.createSecretKey(\"secret\".getBytes(US_ASCII));\n@@ -109,2 +114,2 @@\n-    private static void generate_hmac_sha1_40() throws Exception {\n-        System.out.println(\"Generating \");\n+    private static void generate_hmac_sha1(int hmacOutputLength) throws Exception {\n+        System.out.println(\"Generating \" + hmacOutputLength);\n@@ -115,1 +120,1 @@\n-            (doc, null, XMLSignature.ALGO_ID_MAC_HMAC_SHA1, 40,\n+            (doc, null, XMLSignature.ALGO_ID_MAC_HMAC_SHA1, hmacOutputLength,\n@@ -117,1 +122,1 @@\n-            sig.sign(getSecretKey(\"secret\".getBytes(\"ASCII\")));\n+            sig.sign(getSecretKey(\"secret\".getBytes(US_ASCII)));\n","filename":"test\/jdk\/com\/sun\/org\/apache\/xml\/internal\/security\/TruncateHMAC.java","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,25 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<Signature xmlns=\"http:\/\/www.w3.org\/2000\/09\/xmldsig#\">\n+  <SignedInfo>\n+    <CanonicalizationMethod Algorithm=\"http:\/\/www.w3.org\/TR\/2001\/REC-xml-c14n-20010315\" \/>\n+    <SignatureMethod Algorithm=\"http:\/\/www.w3.org\/2000\/09\/xmldsig#hmac-sha1\" \/>\n+    <Reference URI=\"#object\">\n+      <DigestMethod Algorithm=\"http:\/\/www.w3.org\/2000\/09\/xmldsig#sha1\" \/>\n+      <DigestValue>7\/XTsHaBSOnJ\/jXD5v0zL6VKYsk=<\/DigestValue>\n+    <\/Reference>\n+  <\/SignedInfo>\n+  <SignatureValue>\n+    JElPttIT4Am7Q+MNoMyv+WDfAZw=\n+  <\/SignatureValue>\n+  <KeyInfo>\n+    <MgmtData>testText<\/MgmtData>\n+    <KeyValue>\n+      <ECKeyValue xmlns=\"http:\/\/www.w3.org\/2009\/xmldsig11#\">\n+        <NamedCurve URI=\"urn:oid:1.2.840.10045.3.1.7\"\/>\n+        <PublicKey>BAds672US3sCYunM2k2bEQLbuRxdQlNTvq+5fitOpDMe0mBdZV4J3yZaG0taziYIuAT9GJGfds+q\n+          xtXOCNWe\/60=<\/PublicKey>\n+      <\/ECKeyValue>\n+    <\/KeyValue>\n+  <\/KeyInfo>\n+  <Object Id=\"object\">some text<\/Object>\n+<\/Signature>\n\\ No newline at end of file\n","filename":"test\/jdk\/com\/sun\/org\/apache\/xml\/internal\/security\/signature-enveloping-hmac-sha1-keyinfo.xml","additions":25,"deletions":0,"binary":false,"changes":25,"status":"added"}]}