{"files":[{"patch":"@@ -25,0 +25,2 @@\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n@@ -28,0 +30,2 @@\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n@@ -29,0 +33,1 @@\n+import java.util.concurrent.atomic.AtomicReference;\n@@ -41,0 +46,1 @@\n+\n@@ -53,1 +59,1 @@\n-    private static final int MENU = KeyEvent.VK_F;\n+    private static final int FILE_MENU = KeyEvent.VK_F;\n@@ -57,1 +63,2 @@\n-    private static volatile boolean menuSelected;\n+    private static CountDownLatch listGainedFocusLatch;\n+    private static CountDownLatch menuSelectedEventLatch;\n@@ -68,1 +75,3 @@\n-        final boolean isAMac = System.getProperty(\"os.name\").toLowerCase().contains(\"os x\");\n+        final boolean isMac = System.getProperty(\"os.name\")\n+                                    .toLowerCase()\n+                                    .contains(\"os x\");\n@@ -74,0 +83,2 @@\n+            listGainedFocusLatch = new CountDownLatch(1);\n+            menuSelectedEventLatch = new CountDownLatch(1);\n@@ -87,9 +98,3 @@\n-                \/\/ Request for focus and wait until the list has focus.\n-                SwingUtilities.invokeAndWait(() -> list.requestFocusInWindow());\n-                int waitCount = 0;\n-                while (!isFocusOwner()) {\n-                    robot.delay(100);\n-                    waitCount++;\n-                    if (waitCount > 20) {\n-                        throw new RuntimeException(\"Waited for long, but can't get focus for list\");\n-                    }\n+                \/\/ Wait until the list gains focus.\n+                if (!listGainedFocusLatch.await(3, TimeUnit.SECONDS)) {\n+                    throw new RuntimeException(\"Waited for long, but can't gain focus for list\");\n@@ -99,2 +104,1 @@\n-                robot.keyPress(KeyEvent.VK_B);\n-                robot.keyRelease(KeyEvent.VK_B);\n+                hitKeys(KeyEvent.VK_B);\n@@ -102,3 +106,5 @@\n-                \/\/ Assertion check to verify that selected node is 'bill'\n-                String elementSel = list.getSelectedValue();\n-                if (!\"bill\".equals(elementSel)) {\n+                \/\/ Assertion check to verify that the selected node is 'bill'\n+                AtomicReference<String> elementSel = new AtomicReference<>();\n+                SwingUtilities.invokeAndWait(() -> elementSel.set(list.getSelectedValue()));\n+                final String elementSelBefore = elementSel.get();\n+                if (!\"bill\".equals(elementSelBefore)) {\n@@ -111,1 +117,0 @@\n-                menuSelected = false;\n@@ -113,13 +118,5 @@\n-                \/\/ For most of the OS its ALT+F, except non Nimbus LnFs in Mac, here its ALT+CNTRL+F.\n-                if (isAMac && !laf.contains(\"Nimbus\")) {\n-                    robot.keyPress(KeyEvent.VK_ALT);\n-                    robot.keyPress(KeyEvent.VK_CONTROL);\n-                    robot.keyPress(MENU);\n-                    robot.keyRelease(KeyEvent.VK_ALT);\n-                    robot.keyRelease(KeyEvent.VK_CONTROL);\n-                    robot.keyRelease(MENU);\n-                }else{\n-                    robot.keyPress(KeyEvent.VK_ALT);\n-                    robot.keyPress(MENU);\n-                    robot.keyRelease(KeyEvent.VK_ALT);\n-                    robot.keyRelease(MENU);\n+                \/\/ For most of the OS its ALT+F, except for non Nimbus LnFs in Mac where it is ALT+CNTRL+F.\n+                if (isMac && !laf.contains(\"Nimbus\")) {\n+                    hitKeys(KeyEvent.VK_ALT, KeyEvent.VK_CONTROL, FILE_MENU);\n+                } else {\n+                    hitKeys(KeyEvent.VK_ALT, FILE_MENU);\n@@ -128,7 +125,3 @@\n-                waitCount = 0;\n-                while (!menuSelected) {\n-                    robot.delay(100);\n-                    waitCount++;\n-                    if (waitCount > 20) {\n-                        throw new RuntimeException(\"Can't select menu using mnemonics for \" + laf);\n-                    }\n+                \/\/ Wait until the menu got selected.\n+                if (!menuSelectedEventLatch.await(3, TimeUnit.SECONDS)) {\n+                    throw new RuntimeException(\"Waited for long, but can't select menu using mnemonics for \" + laf);\n@@ -137,2 +130,1 @@\n-                robot.keyPress(KeyEvent.VK_ENTER);\n-                robot.keyRelease(KeyEvent.VK_ENTER);\n+                hitKeys(KeyEvent.VK_ENTER);\n@@ -140,1 +132,2 @@\n-                String elementSelAfter = list.getSelectedValue();\n+                AtomicReference<String> elementSelAfter = new AtomicReference<>();\n+                SwingUtilities.invokeAndWait(() -> elementSelAfter.set(list.getSelectedValue()));\n@@ -143,1 +136,1 @@\n-                if (!elementSel.equals(elementSelAfter)) {\n+                if (!elementSelBefore.equals(elementSelAfter.get())) {\n@@ -157,4 +150,8 @@\n-    private static boolean isFocusOwner() throws Exception {\n-        AtomicBoolean isFocusOwner = new AtomicBoolean(false);\n-        SwingUtilities.invokeAndWait(() -> isFocusOwner.set(list.isFocusOwner()));\n-        return isFocusOwner.get();\n+    private static void hitKeys(int... keys) {\n+        for (int key : keys) {\n+            robot.keyPress(key);\n+        }\n+\n+        for (int i = keys.length - 1; i >= 0; i--) {\n+            robot.keyRelease(keys[i]);\n+        }\n@@ -165,1 +162,7 @@\n-        list = new JList(new String[]{\"anaheim\", \"bill\", \"chicago\", \"dingo\", \"ernie\", \"freak\"});\n+        list = new JList<>(new String[]{\"anaheim\", \"bill\", \"chicago\", \"dingo\", \"ernie\", \"freak\"});\n+        list.addFocusListener(new FocusAdapter() {\n+            @Override\n+            public void focusGained(FocusEvent e) {\n+                listGainedFocusLatch.countDown();\n+            }\n+        });\n@@ -167,1 +170,1 @@\n-        menu.setMnemonic(MENU);\n+        menu.setMnemonic(FILE_MENU);\n@@ -171,12 +174,13 @@\n-                                 @Override\n-                                 public void menuSelected(MenuEvent e) {\n-                                     menuSelected = true;\n-                                 }\n-                                 @Override\n-                                 public void menuDeselected(MenuEvent e) {\n-                                 }\n-                                 @Override\n-                                 public void menuCanceled(MenuEvent e) {\n-                                 }\n-                             }\n-        );\n+            @Override\n+            public void menuSelected(MenuEvent e) {\n+                menuSelectedEventLatch.countDown();\n+            }\n+\n+            @Override\n+            public void menuDeselected(MenuEvent e) {\n+            }\n+\n+            @Override\n+            public void menuCanceled(MenuEvent e) {\n+            }\n+        });\n@@ -189,1 +193,1 @@\n-        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);\n@@ -194,1 +198,0 @@\n-\n","filename":"test\/jdk\/javax\/swing\/JList\/4618767\/JListSelectedElementTest.java","additions":65,"deletions":62,"binary":false,"changes":127,"status":"modified"}]}