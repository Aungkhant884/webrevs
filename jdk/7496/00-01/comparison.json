{"files":[{"patch":"@@ -28,0 +28,1 @@\n+import java.util.concurrent.atomic.AtomicBoolean;\n@@ -36,1 +37,3 @@\n-\n+import javax.swing.UnsupportedLookAndFeelException;\n+import javax.swing.event.MenuEvent;\n+import javax.swing.event.MenuListener;\n@@ -51,1 +54,0 @@\n-\n@@ -55,0 +57,1 @@\n+    private static volatile boolean menuSelected;\n@@ -72,3 +75,1 @@\n-                SwingUtilities.invokeAndWait(() -> frame = new JFrame());\n-                robot.waitForIdle();\n-\n+                AtomicBoolean lafSetSuccess = new AtomicBoolean(false);\n@@ -76,2 +77,4 @@\n-                    setLookAndFeel(laf);\n-                    createUI();\n+                    lafSetSuccess.set(setLookAndFeel(laf));\n+                    if (lafSetSuccess.get()) {\n+                        createUI();\n+                    }\n@@ -79,0 +82,15 @@\n+                if (!lafSetSuccess.get()) {\n+                    continue;\n+                }\n+                robot.waitForIdle();\n+\n+                \/\/ Request for focus and wait until the list has focus.\n+                SwingUtilities.invokeAndWait(() -> list.requestFocusInWindow());\n+                int waitCount = 0;\n+                while (!isFocusOwner()) {\n+                    robot.delay(100);\n+                    waitCount++;\n+                    if (waitCount > 20) {\n+                        throw new RuntimeException(\"Waited for long, but can't get focus for list\");\n+                    }\n+                }\n@@ -80,1 +98,1 @@\n-                \/\/ Select element named as bill\n+                \/\/ Select element named as 'bill'\n@@ -89,1 +107,1 @@\n-                            + \" is not the expected value 'bill'\"\n+                            + \" is not the expected one 'bill'\"\n@@ -93,2 +111,4 @@\n-                \/\/Now operate Menu using Mnemonics ALT+M\n-                if (isAMac && laf.contains(\"Nimbus\")) {\n+                menuSelected = false;\n+                \/\/ Now operate Menu using Mnemonics, different key combinations for different OS.\n+                \/\/ For most of the OS its ALT+F, except non Nimbus LnFs in Mac, here its ALT+CNTRL+F.\n+                if (isAMac && !laf.contains(\"Nimbus\")) {\n@@ -96,0 +116,1 @@\n+                    robot.keyPress(KeyEvent.VK_CONTROL);\n@@ -98,0 +119,1 @@\n+                    robot.keyRelease(KeyEvent.VK_CONTROL);\n@@ -99,1 +121,1 @@\n-                } else {\n+                }else{\n@@ -101,1 +123,0 @@\n-                    robot.keyPress(KeyEvent.VK_CONTROL);\n@@ -104,1 +125,0 @@\n-                    robot.keyRelease(KeyEvent.VK_CONTROL);\n@@ -108,1 +128,9 @@\n-                robot.delay(500);\n+                waitCount = 0;\n+                while (!menuSelected) {\n+                    robot.delay(100);\n+                    waitCount++;\n+                    if (waitCount > 20) {\n+                        throw new RuntimeException(\"Can't select menu using mnemonics for \" + laf);\n+                    }\n+                }\n+\n@@ -129,0 +157,6 @@\n+    private static boolean isFocusOwner() throws Exception {\n+        AtomicBoolean isFocusOwner = new AtomicBoolean(false);\n+        SwingUtilities.invokeAndWait(() -> isFocusOwner.set(list.isFocusOwner()));\n+        return isFocusOwner.get();\n+    }\n+\n@@ -130,0 +164,1 @@\n+        frame = new JFrame();\n@@ -131,1 +166,0 @@\n-\n@@ -134,1 +168,0 @@\n-\n@@ -137,0 +170,13 @@\n+        menu.addMenuListener(new MenuListener() {\n+                                 @Override\n+                                 public void menuSelected(MenuEvent e) {\n+                                     menuSelected = true;\n+                                 }\n+                                 @Override\n+                                 public void menuDeselected(MenuEvent e) {\n+                                 }\n+                                 @Override\n+                                 public void menuCanceled(MenuEvent e) {\n+                                 }\n+                             }\n+        );\n@@ -148,0 +194,1 @@\n+\n@@ -150,1 +197,1 @@\n-    private static void setLookAndFeel(final String laf) {\n+    private static boolean setLookAndFeel(String lafName) {\n@@ -152,3 +199,6 @@\n-            UIManager.setLookAndFeel(laf);\n-            System.out.println(\"LookAndFeel: \" + laf);\n-        } catch (Exception e) {\n+            UIManager.setLookAndFeel(lafName);\n+        } catch (UnsupportedLookAndFeelException ignored) {\n+            System.out.println(\"Ignoring Unsupported L&F: \" + lafName);\n+            return false;\n+        } catch (ClassNotFoundException | InstantiationException\n+                | IllegalAccessException e) {\n@@ -157,0 +207,1 @@\n+        return true;\n","filename":"test\/jdk\/javax\/swing\/JList\/4618767\/JListSelectedElementTest.java","additions":72,"deletions":21,"binary":false,"changes":93,"status":"modified"}]}