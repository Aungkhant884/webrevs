{"files":[{"patch":"@@ -0,0 +1,217 @@\n+\/*\n+ * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Robot;\n+import java.awt.event.KeyEvent;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.stream.Collectors;\n+import javax.swing.JFrame;\n+import javax.swing.JList;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UnsupportedLookAndFeelException;\n+import javax.swing.event.MenuEvent;\n+import javax.swing.event.MenuListener;\n+\n+import static javax.swing.UIManager.getInstalledLookAndFeels;\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 4618767\n+ * @summary Typing a letter while a JList has focus now makes the selection jump to the item whose text\n+ *          starts with that letter even though that letter is accompanied by modifier keys such as ALT or CTRL.\n+ * @run main JListSelectedElementTest\n+ *\/\n+public class JListSelectedElementTest {\n+\n+    private static final int MENU = KeyEvent.VK_F;\n+    private static JFrame frame;\n+    private static JList<String> list;\n+    private static Robot robot;\n+    private static volatile boolean menuSelected;\n+\n+    public static void main(String[] args) throws Exception {\n+        runTest();\n+    }\n+\n+    public static void runTest() throws Exception {\n+        robot = new Robot();\n+        robot.setAutoWaitForIdle(true);\n+        robot.setAutoDelay(200);\n+\n+        final boolean isAMac = System.getProperty(\"os.name\").toLowerCase().contains(\"os x\");\n+\n+        List<String> lafs = Arrays.stream(getInstalledLookAndFeels())\n+                                  .map(UIManager.LookAndFeelInfo::getClassName)\n+                                  .collect(Collectors.toList());\n+        for (final String laf : lafs) {\n+            try {\n+                AtomicBoolean lafSetSuccess = new AtomicBoolean(false);\n+                SwingUtilities.invokeAndWait(() -> {\n+                    lafSetSuccess.set(setLookAndFeel(laf));\n+                    if (lafSetSuccess.get()) {\n+                        createUI();\n+                    }\n+                });\n+                if (!lafSetSuccess.get()) {\n+                    continue;\n+                }\n+                robot.waitForIdle();\n+\n+                \/\/ Request for focus and wait until the list has focus.\n+                SwingUtilities.invokeAndWait(() -> list.requestFocusInWindow());\n+                int waitCount = 0;\n+                while (!isFocusOwner()) {\n+                    robot.delay(100);\n+                    waitCount++;\n+                    if (waitCount > 20) {\n+                        throw new RuntimeException(\"Waited for long, but can't get focus for list\");\n+                    }\n+                }\n+\n+                \/\/ Select element named as 'bill'\n+                robot.keyPress(KeyEvent.VK_B);\n+                robot.keyRelease(KeyEvent.VK_B);\n+\n+                \/\/ Assertion check to verify that selected node is 'bill'\n+                String elementSel = list.getSelectedValue();\n+                if (!\"bill\".equals(elementSel)) {\n+                    throw new RuntimeException(\"Test failed for \" + laf\n+                            + \" as the list element selected: \" + elementSel\n+                            + \" is not the expected one 'bill'\"\n+                    );\n+                }\n+\n+                menuSelected = false;\n+                \/\/ Now operate Menu using Mnemonics, different key combinations for different OS.\n+                \/\/ For most of the OS its ALT+F, except non Nimbus LnFs in Mac, here its ALT+CNTRL+F.\n+                if (isAMac && !laf.contains(\"Nimbus\")) {\n+                    robot.keyPress(KeyEvent.VK_ALT);\n+                    robot.keyPress(KeyEvent.VK_CONTROL);\n+                    robot.keyPress(MENU);\n+                    robot.keyRelease(KeyEvent.VK_ALT);\n+                    robot.keyRelease(KeyEvent.VK_CONTROL);\n+                    robot.keyRelease(MENU);\n+                }else{\n+                    robot.keyPress(KeyEvent.VK_ALT);\n+                    robot.keyPress(MENU);\n+                    robot.keyRelease(KeyEvent.VK_ALT);\n+                    robot.keyRelease(MENU);\n+                }\n+\n+                waitCount = 0;\n+                while (!menuSelected) {\n+                    robot.delay(100);\n+                    waitCount++;\n+                    if (waitCount > 20) {\n+                        throw new RuntimeException(\"Can't select menu using mnemonics for \" + laf);\n+                    }\n+                }\n+\n+                robot.keyPress(KeyEvent.VK_ENTER);\n+                robot.keyRelease(KeyEvent.VK_ENTER);\n+\n+                String elementSelAfter = list.getSelectedValue();\n+\n+                \/\/ As per the fix of BugID 4618767, the list element selection should not change\n+                if (!elementSel.equals(elementSelAfter)) {\n+                    throw new RuntimeException(\"Test failed for \" + laf\n+                            + \" as list.getSelectedValue() before = \" + elementSel\n+                            + \" not equal to list.getSelectedValue() after pressing Enter = \" + elementSelAfter\n+                    );\n+                }\n+                System.out.println(\"Test passed for laf: \" + laf);\n+\n+            } finally {\n+                SwingUtilities.invokeAndWait(JListSelectedElementTest::disposeFrame);\n+            }\n+        }\n+    }\n+\n+    private static boolean isFocusOwner() throws Exception {\n+        AtomicBoolean isFocusOwner = new AtomicBoolean(false);\n+        SwingUtilities.invokeAndWait(() -> isFocusOwner.set(list.isFocusOwner()));\n+        return isFocusOwner.get();\n+    }\n+\n+    private static void createUI() {\n+        frame = new JFrame();\n+        list = new JList(new String[]{\"anaheim\", \"bill\", \"chicago\", \"dingo\", \"ernie\", \"freak\"});\n+        JMenu menu = new JMenu(\"File\");\n+        menu.setMnemonic(MENU);\n+        JMenuItem menuItem = new JMenuItem(\"Dummy\");\n+        menu.add(menuItem);\n+        menu.addMenuListener(new MenuListener() {\n+                                 @Override\n+                                 public void menuSelected(MenuEvent e) {\n+                                     menuSelected = true;\n+                                 }\n+                                 @Override\n+                                 public void menuDeselected(MenuEvent e) {\n+                                 }\n+                                 @Override\n+                                 public void menuCanceled(MenuEvent e) {\n+                                 }\n+                             }\n+        );\n+\n+        JMenuBar menuBar = new JMenuBar();\n+        menuBar.add(menu);\n+\n+        frame.setJMenuBar(menuBar);\n+        frame.setContentPane(list);\n+        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+        frame.pack();\n+        frame.setAlwaysOnTop(true);\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+\n+    }\n+\n+    private static boolean setLookAndFeel(String lafName) {\n+        try {\n+            UIManager.setLookAndFeel(lafName);\n+        } catch (UnsupportedLookAndFeelException ignored) {\n+            System.out.println(\"Ignoring Unsupported L&F: \" + lafName);\n+            return false;\n+        } catch (ClassNotFoundException | InstantiationException\n+                | IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+        return true;\n+    }\n+\n+    private static void disposeFrame() {\n+        if (frame != null) {\n+            frame.dispose();\n+            frame = null;\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/javax\/swing\/JList\/4618767\/JListSelectedElementTest.java","additions":217,"deletions":0,"binary":false,"changes":217,"status":"added"}]}