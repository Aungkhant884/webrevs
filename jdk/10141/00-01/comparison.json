{"files":[{"patch":"@@ -888,1 +888,1 @@\n-         \"incorrect test - result=%d, p=\" PTR_FORMAT, result, p2i((void*)p));\n+         \"incorrect test - result=%d, p=\" PTR_FORMAT, result, p2i(p));\n","filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -57,2 +57,2 @@\n-  assert(is_object_aligned(result), \"address not aligned: \" PTR_FORMAT, p2i((void*) result));\n-  assert(Universe::is_in_heap(result), \"object not in heap \" PTR_FORMAT, p2i((void*) result));\n+  assert(is_object_aligned(result), \"address not aligned: \" PTR_FORMAT, p2i(result));\n+  assert(Universe::is_in_heap(result), \"object not in heap \" PTR_FORMAT, p2i(result));\n@@ -68,2 +68,2 @@\n-  assert(is_object_aligned(v), \"address not aligned: \" PTR_FORMAT, p2i((void*)v));\n-  assert(is_in(v), \"address not in heap range: \" PTR_FORMAT, p2i((void*)v));\n+  assert(is_object_aligned(v), \"address not aligned: \" PTR_FORMAT, p2i(v));\n+  assert(is_in(v), \"address not in heap range: \" PTR_FORMAT, p2i(v));\n@@ -82,1 +82,1 @@\n-  assert(Universe::is_in_heap(v), \"object not in heap \" PTR_FORMAT, p2i((void*) v));\n+  assert(Universe::is_in_heap(v), \"object not in heap \" PTR_FORMAT, p2i(v));\n@@ -87,1 +87,1 @@\n-  assert(Universe::is_in_heap_or_null(v), \"object not in heap \" PTR_FORMAT, p2i((void*) v));\n+  assert(Universe::is_in_heap_or_null(v), \"object not in heap \" PTR_FORMAT, p2i(v));\n@@ -125,1 +125,1 @@\n-  return (Klass*)(void*)((uintptr_t)narrow_base +((uintptr_t)v << shift()));\n+  return (Klass*)((uintptr_t)narrow_base +((uintptr_t)v << shift()));\n@@ -135,1 +135,1 @@\n-  assert(check_alignment(result), \"address not aligned: \" PTR_FORMAT, p2i((void*) result));\n+  assert(check_alignment(result), \"address not aligned: \" PTR_FORMAT, p2i(result));\n@@ -150,1 +150,1 @@\n-  uint64_t pd = (uint64_t)(pointer_delta((void*)v, narrow_base, 1));\n+  uint64_t pd = (uint64_t)(pointer_delta(v, narrow_base, 1));\n","filename":"src\/hotspot\/share\/oops\/compressedOops.inline.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -434,1 +434,1 @@\n-  st->print(\" - method:       \" PTR_FORMAT \" \", p2i((address)m));\n+  st->print(\" - method:       \" PTR_FORMAT \" \", p2i(m));\n","filename":"src\/hotspot\/share\/oops\/constMethod.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -243,1 +243,1 @@\n-               p2i((oopDesc*)c), p2i(c->start_address()), p2i(c->end_address()), c->identity_hash());\n+               p2i(c), p2i(c->start_address()), p2i(c->end_address()), c->identity_hash());\n@@ -245,1 +245,1 @@\n-               c->requires_barriers(), c->is_gc_mode(), c->has_bitmap(), p2i((oopDesc*)c->parent()));\n+               c->requires_barriers(), c->is_gc_mode(), c->has_bitmap(), p2i(c->parent()));\n","filename":"src\/hotspot\/share\/oops\/instanceStackChunkKlass.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -136,1 +136,1 @@\n-  guarantee(oopDesc::is_oop_or_null(obj), \"invalid oop: \" PTR_FORMAT, p2i((oopDesc*) obj));\n+  guarantee(oopDesc::is_oop_or_null(obj), \"invalid oop: \" PTR_FORMAT, p2i(obj));\n","filename":"src\/hotspot\/share\/oops\/oop.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-  st->print(\"RecordComponent(\" INTPTR_FORMAT \")\", p2i(this));\n+  st->print(\"RecordComponent(\" PTR_FORMAT \")\", p2i(this));\n","filename":"src\/hotspot\/share\/oops\/recordComponent.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -399,1 +399,1 @@\n-    assert(obj == nullptr || dbg_is_good_oop(obj), \"p: \" PTR_FORMAT \" obj: \" PTR_FORMAT, p2i(p), p2i((oopDesc*)obj));\n+    assert(obj == nullptr || dbg_is_good_oop(obj), \"p: \" PTR_FORMAT \" obj: \" PTR_FORMAT, p2i(p), p2i(obj));\n@@ -464,1 +464,1 @@\n-    assert(obj == nullptr || dbg_is_good_oop(obj), \"p: \" PTR_FORMAT \" obj: \" PTR_FORMAT, p2i(p), p2i((oopDesc*)obj));\n+    assert(obj == nullptr || dbg_is_good_oop(obj), \"p: \" PTR_FORMAT \" obj: \" PTR_FORMAT, p2i(p), p2i(obj));\n","filename":"src\/hotspot\/share\/oops\/stackChunkOop.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -156,1 +156,1 @@\n-  st.print(\"%s%s> (\" INTPTR_FORMAT \") \\n\"\n+  st.print(\"%s%s> (\" PTR_FORMAT \") \\n\"\n","filename":"src\/hotspot\/share\/utilities\/events.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -152,1 +152,1 @@\n-      out->print(\"Thread \" INTPTR_FORMAT \" \", p2i(e.thread));\n+      out->print(\"Thread \" PTR_FORMAT \" \", p2i(e.thread));\n","filename":"src\/hotspot\/share\/utilities\/events.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -432,1 +432,1 @@\n-        ls->print_cr(\"bootstrap method invocation wraps BSME around \" PTR_FORMAT, p2i((void *)exception));\n+        ls->print_cr(\"bootstrap method invocation wraps BSME around \" PTR_FORMAT, p2i(exception));\n@@ -440,1 +440,1 @@\n-      ls->print_cr(\"%s throws BSME for \" PTR_FORMAT, is_indy ? \"invokedynamic\" : \"dynamic constant\", p2i((void *)exception));\n+      ls->print_cr(\"%s throws BSME for \" PTR_FORMAT, is_indy ? \"invokedynamic\" : \"dynamic constant\", p2i(exception));\n","filename":"src\/hotspot\/share\/utilities\/exceptions.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}