{"files":[{"patch":"@@ -130,2 +130,1 @@\n-    \/** Flag bit 21 is available. (used earlier to tag compiler-generated abstract methods that implement\n-     *  an interface method (Miranda methods)).\n+    \/** Flag is set for ClassSymbols that are being compiled from source.\n@@ -133,0 +132,1 @@\n+    public static final int FROM_SOURCE      = 1<<21; \/\/ClassSymbols\n@@ -485,0 +485,1 @@\n+        FROM_SOURCE(Flags.FROM_SOURCE),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Flags.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -676,1 +676,2 @@\n-        } else if ((c.name != name || c.owner != owner) && owner.kind == TYP && c.owner.kind == PCK) {\n+        } else if ((c.name != name || c.owner != owner) && owner.kind == TYP &&\n+                   c.owner.kind == PCK && ((c.flags_field & FROM_SOURCE) == 0)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symtab.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -497,1 +497,1 @@\n-        c.flags_field = chk.checkFlags(tree.pos(), tree.mods.flags, c, tree);\n+        c.flags_field = chk.checkFlags(tree.pos(), tree.mods.flags, c, tree) | FROM_SOURCE;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Enter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -2594,1 +2594,1 @@\n-                if (c == outer) {\n+                if (c == outer && member.owner == c) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,107 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 7194212\n+ * @summary Ensure InnerClasses attribute does not overwrite flags\n+ *          for source based classes\n+ * @library \/tools\/lib\n+ * @modules\n+ *      jdk.compiler\/com.sun.tools.javac.api\n+ *      jdk.compiler\/com.sun.tools.javac.main\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run main T7194212\n+ *\/\n+\n+import toolbox.JavacTask;\n+import toolbox.TestRunner;\n+import toolbox.ToolBox;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+public class T7194212 extends TestRunner {\n+\n+    protected ToolBox tb;\n+\n+    T7194212() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        T7194212 t = new T7194212();\n+        t.runTests();\n+    }\n+\n+    \/**\n+     * Run all methods annotated with @Test, and throw an exception if any\n+     * errors are reported..\n+     *\n+     * @throws Exception if any errors occurred\n+     *\/\n+    protected void runTests() throws Exception {\n+        runTests(m -> new Object[] { Paths.get(m.getName()) });\n+    }\n+\n+    @Test\n+    public void testSourceClassFileClash(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        tb.writeJavaFiles(src, \"\"\"\n+                                public class Outer {\n+                                    public class Inner { }\n+                                }\n+                                \"\"\");\n+\n+        Path classes = base.resolve(\"classes\");\n+\n+        Files.createDirectories(classes);\n+\n+        new JavacTask(tb)\n+                .outdir(classes)\n+                .files(tb.findJavaFiles(src))\n+                .run()\n+                .writeAll();\n+\n+        Path test = base.resolve(\"test\");\n+        tb.writeJavaFiles(test, \"\"\"\n+                                 public class Outer$Inner extends Outer { }\n+                                 \"\"\",\n+                                 \"\"\"\n+                                 public class Test extends Outer { }\n+                                 \"\"\");\n+\n+        Path testClasses = base.resolve(\"test-classes\");\n+\n+        Files.createDirectories(testClasses);\n+\n+        new JavacTask(tb)\n+                .options(\"-classpath\", classes.toString())\n+                .outdir(testClasses)\n+                .files(tb.findJavaFiles(test))\n+                .run()\n+                .writeAll();\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/flow\/T7194212.java","additions":107,"deletions":0,"binary":false,"changes":107,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -755,1 +755,1 @@\n-                Pattern.compile(\"(?:public\\\\s+)?(?:class|enum|interface|record)\\\\s+(\\\\w+)\");\n+                Pattern.compile(\"(?:public\\\\s+)?(?:class|enum|interface|record)\\\\s+((\\\\w|\\\\$)+)\");\n","filename":"test\/langtools\/tools\/lib\/toolbox\/ToolBox.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}