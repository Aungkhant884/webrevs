{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -171,2 +171,2 @@\n-                if (a instanceof Attribute.Compound)\n-                    compounds = compounds.append((Attribute.Compound)a);\n+                if (a instanceof Attribute.Compound attributeCompound)\n+                    compounds = compounds.append(attributeCompound);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/AnnoConstruct.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -90,2 +90,2 @@\n-            if (value instanceof String)\n-                return v.visitString((String) value, p);\n+            if (value instanceof String str)\n+                return v.visitString(str, p);\n@@ -201,6 +201,4 @@\n-                        && val.snd instanceof Array) {\n-                    Array arr = (Array) val.snd;\n-                    if (arr.values.length != 0\n-                            && arr.values[0] instanceof Attribute.TypeCompound)\n-                        return (Attribute.TypeCompound) arr.values[0];\n-                }\n+                        && val.snd instanceof Array arr\n+                        && arr.values.length != 0\n+                        && arr.values[0] instanceof Attribute.TypeCompound compound)\n+                        return compound;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Attribute.java","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -212,2 +212,2 @@\n-        if (fm instanceof DelegatingJavaFileManager) {\n-            fm = ((DelegatingJavaFileManager) fm).getBaseFileManager();\n+        if (fm instanceof DelegatingJavaFileManager delegatingJavaFileManager) {\n+            fm = delegatingJavaFileManager.getBaseFileManager();\n@@ -215,3 +215,2 @@\n-        if (fm instanceof JavacFileManager) {\n-            JavacFileManager jfm = (JavacFileManager) fm;\n-            useCtProps = jfm.isDefaultBootClassPath() && jfm.isSymbolFileEnabled();\n+        if (fm instanceof JavacFileManager javacFileManager) {\n+            useCtProps = javacFileManager.isDefaultBootClassPath() && javacFileManager.isSymbolFileEnabled();\n@@ -645,2 +644,1 @@\n-            if (fileManager instanceof StandardJavaFileManager) {\n-                StandardJavaFileManager fm = (StandardJavaFileManager)fileManager;\n+            if (fileManager instanceof StandardJavaFileManager standardJavaFileManager) {\n@@ -649,1 +647,1 @@\n-                    for (Path sourcePath : fm.getLocationAsPaths(SOURCE_PATH)) {\n+                    for (Path sourcePath : standardJavaFileManager.getLocationAsPaths(SOURCE_PATH)) {\n@@ -655,1 +653,1 @@\n-                    for (Path classPath : fm.getLocationAsPaths(CLASS_PATH)) {\n+                    for (Path classPath : standardJavaFileManager.getLocationAsPaths(CLASS_PATH)) {\n@@ -662,1 +660,1 @@\n-                    for (Path platformPath : fm.getLocationAsPaths(PLATFORM_CLASS_PATH)) {\n+                    for (Path platformPath : standardJavaFileManager.getLocationAsPaths(PLATFORM_CLASS_PATH)) {\n@@ -665,1 +663,1 @@\n-                    for (Path classPath : fm.getLocationAsPaths(CLASS_PATH)) {\n+                    for (Path classPath : standardJavaFileManager.getLocationAsPaths(CLASS_PATH)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/ClassFinder.java","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -266,5 +266,3 @@\n-            if (!(obj instanceof ProvidesDirective)) {\n-                return false;\n-            }\n-            ProvidesDirective other = (ProvidesDirective)obj;\n-            return service == other.service && impls.equals(other.impls);\n+            return (obj instanceof ProvidesDirective directive)\n+                    && service == directive.service\n+                    && impls.equals(directive.impls);\n@@ -362,5 +360,2 @@\n-            if (!(obj instanceof UsesDirective)) {\n-                return false;\n-            }\n-            UsesDirective other = (UsesDirective)obj;\n-            return service == other.service;\n+            return (obj instanceof UsesDirective directive)\n+                    && service == directive.service;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Directive.java","additions":6,"deletions":11,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -756,2 +756,2 @@\n-            if (impScope instanceof FilterImportScope && impScope.owner.kind == Kind.TYP &&\n-                ((FilterImportScope) impScope).isStaticallyImported()) {\n+            if (impScope instanceof FilterImportScope filterImportScope && impScope.owner.kind == Kind.TYP &&\n+                    filterImportScope.isStaticallyImported()) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Scope.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1423,7 +1423,6 @@\n-            if (type instanceof ClassType) {\n-                ClassType t = (ClassType)type;\n-                if (t.interfaces_field == null) \/\/ FIXME: shouldn't be null\n-                    t.interfaces_field = List.nil();\n-                if (t.all_interfaces_field != null)\n-                    return Type.getModelTypes(t.all_interfaces_field);\n-                return t.interfaces_field;\n+            if (type instanceof ClassType classType) {\n+                if (classType.interfaces_field == null) \/\/ FIXME: shouldn't be null\n+                    classType.interfaces_field = List.nil();\n+                if (classType.all_interfaces_field != null)\n+                    return Type.getModelTypes(classType.all_interfaces_field);\n+                return classType.interfaces_field;\n@@ -1438,4 +1437,3 @@\n-            if (type instanceof ClassType) {\n-                ClassType t = (ClassType)type;\n-                if (t.supertype_field == null) \/\/ FIXME: shouldn't be null\n-                    t.supertype_field = Type.noType;\n+            if (type instanceof ClassType classType) {\n+                if (classType.supertype_field == null) \/\/ FIXME: shouldn't be null\n+                    classType.supertype_field = Type.noType;\n@@ -1443,1 +1441,1 @@\n-                return t.isInterface()\n+                return classType.isInterface()\n@@ -1445,1 +1443,1 @@\n-                    : t.supertype_field.getModelType();\n+                    : classType.supertype_field.getModelType();\n@@ -1588,9 +1586,8 @@\n-            if (type instanceof ClassType) {\n-                ClassType t = (ClassType)type;\n-                t.setEnclosingType(Type.noType);\n-                t.rank_field = -1;\n-                t.typarams_field = null;\n-                t.allparams_field = null;\n-                t.supertype_field = null;\n-                t.interfaces_field = null;\n-                t.all_interfaces_field = null;\n+            if (type instanceof ClassType classType) {\n+                classType.setEnclosingType(Type.noType);\n+                classType.rank_field = -1;\n+                classType.typarams_field = null;\n+                classType.allparams_field = null;\n+                classType.supertype_field = null;\n+                classType.interfaces_field = null;\n+                classType.all_interfaces_field = null;\n@@ -1757,1 +1754,1 @@\n-            } else if (data instanceof Callable<?>) {\n+            } else if (data instanceof Callable<?> callableData) {\n@@ -1760,1 +1757,0 @@\n-                Callable<?> eval = (Callable<?>)data;\n@@ -1763,1 +1759,1 @@\n-                    data = eval.call();\n+                    data = callableData.call();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symbol.java","additions":21,"deletions":25,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -279,2 +279,1 @@\n-                            val.snd instanceof Attribute.Array) {\n-                        Attribute.Array arr = (Attribute.Array) val.snd;\n+                            val.snd instanceof Attribute.Array arr) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/SymbolMetadata.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1362,7 +1362,2 @@\n-            if (obj instanceof ArrayType) {\n-                ArrayType that = (ArrayType)obj;\n-                return this == that ||\n-                        elemtype.equals(that.elemtype);\n-            }\n-\n-            return false;\n+            return (obj instanceof ArrayType arrayType)\n+                    && (this == arrayType || elemtype.equals(arrayType.elemtype));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Type.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -106,5 +106,3 @@\n-            if (! (other instanceof TypePathEntry)) {\n-                return false;\n-            }\n-            TypePathEntry tpe = (TypePathEntry) other;\n-            return this.tag == tpe.tag && this.arg == tpe.arg;\n+            return (other instanceof TypePathEntry entry)\n+                    && this.tag == entry.tag\n+                    && this.arg == entry.arg;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/TypeAnnotationPosition.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -158,1 +158,1 @@\n-        if (!(atValue instanceof Attribute.Array)) {\n+        if (!(atValue instanceof Attribute.Array arrayVal)) {\n@@ -162,1 +162,1 @@\n-        List<Attribute> targets = ((Array)atValue).getValue();\n+        List<Attribute> targets = arrayVal.getValue();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/TypeAnnotations.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3164,6 +3164,3 @@\n-                if (obj instanceof Entry) {\n-                    Entry e = (Entry)obj;\n-                    return e.msym == msym && isSameType(site, e.site);\n-                } else {\n-                    return false;\n-                }\n+                return (obj instanceof Entry entry)\n+                        && entry.msym == msym\n+                        && isSameType(site, entry.site);\n@@ -3853,5 +3850,3 @@\n-                if (!(obj instanceof TypePair))\n-                    return false;\n-                TypePair typePair = (TypePair)obj;\n-                return isSameType(t1, typePair.t1)\n-                    && isSameType(t2, typePair.t2);\n+                return (obj instanceof TypePair typePair)\n+                        && isSameType(t1, typePair.t1)\n+                        && isSameType(t2, typePair.t2);\n@@ -4880,2 +4875,2 @@\n-            return (obj instanceof UniqueType) &&\n-                types.isSameType(type, ((UniqueType)obj).type);\n+            return (obj instanceof UniqueType uniqueType) &&\n+                    types.isSameType(type, uniqueType.type);\n@@ -5035,2 +5030,2 @@\n-            if (value != null && value instanceof Attribute.Enum) {\n-                Name levelName = ((Attribute.Enum)value).value.name;\n+            if (value != null && value instanceof Attribute.Enum attributeEnum) {\n+                Name levelName = attributeEnum.value.name;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":10,"deletions":15,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -407,7 +407,3 @@\n-            if (attr instanceof Attribute.Constant) {\n-                Attribute.Constant v = (Attribute.Constant) attr;\n-                if (v.type == syms.booleanType && ((Integer) v.value) != 0) {\n-                    return true;\n-                }\n-            }\n-            return false;\n+            return (attr instanceof Attribute.Constant constant)\n+                    && constant.type == syms.booleanType\n+                    && ((Integer) constant.value) != 0;\n@@ -450,1 +446,1 @@\n-        if (a.attribute == null || a.type == null || !(a.attribute instanceof Attribute.TypeCompound)) {\n+        if (a.attribute == null || a.type == null || !(a.attribute instanceof Attribute.TypeCompound typeCompound)) {\n@@ -461,1 +457,1 @@\n-            return (Attribute.TypeCompound)a.attribute;\n+            return typeCompound;\n@@ -914,1 +910,1 @@\n-        if (!(p.snd instanceof Attribute.Class)) { \/\/ check that the value of \"value\" is an Attribute.Class\n+        if (!(p.snd instanceof Attribute.Class attributeClass)) { \/\/ check that the value of \"value\" is an Attribute.Class\n@@ -919,1 +915,1 @@\n-        return ((Attribute.Class)p.snd).getValue();\n+        return attributeClass.getValue();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Annotate.java","additions":8,"deletions":12,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -754,6 +754,3 @@\n-            if (obj instanceof UniquePos) {\n-                UniquePos that = (UniquePos)obj;\n-                return pos == that.pos && source == that.source;\n-            } else {\n-                return false;\n-            }\n+            return (obj instanceof UniquePos uniquePos)\n+                    && pos == uniquePos.pos\n+                    && source == uniquePos.source;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/ArgumentAttr.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -433,2 +433,2 @@\n-            if (ae.getCause() instanceof BreakAttr) {\n-                return ((BreakAttr)(ae.getCause())).env;\n+            if (ae.getCause() instanceof BreakAttr breakAttr) {\n+                return breakAttr.env;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -246,2 +246,2 @@\n-                if (a instanceof JCDiagnostic) {\n-                    diags = diags.prepend((JCDiagnostic) a);\n+                if (a instanceof JCDiagnostic diagnostic) {\n+                    diags = diags.prepend(diagnostic);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/AttrRecover.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -320,1 +320,1 @@\n-        if (found instanceof Type && ((Type)found).hasTag(VOID)) {\n+        if (found instanceof Type type && type.hasTag(VOID)) {\n@@ -325,1 +325,1 @@\n-        return types.createErrorType(found instanceof Type ? (Type)found : syms.errType);\n+        return types.createErrorType(found instanceof Type type ? type : syms.errType);\n@@ -1340,2 +1340,1 @@\n-                    if (tree.init instanceof JCNewClass &&\n-                        ((JCNewClass) tree.init).def != null) {\n+                    if (tree.init instanceof JCNewClass newClass && newClass.def != null) {\n@@ -3171,1 +3170,1 @@\n-                if (!(app instanceof Attribute.Enum)) {\n+                if (!(app instanceof Attribute.Enum attributeEnum)) {\n@@ -3174,2 +3173,1 @@\n-                Attribute.Enum e = (Attribute.Enum)app;\n-                containerTargets.add(e.value.name);\n+                containerTargets.add(attributeEnum.value.name);\n@@ -3186,1 +3184,1 @@\n-                if (!(app instanceof Attribute.Enum)) {\n+                if (!(app instanceof Attribute.Enum attributeEnum)) {\n@@ -3189,2 +3187,1 @@\n-                Attribute.Enum e = (Attribute.Enum)app;\n-                containedTargets.add(e.value.name);\n+                containedTargets.add(attributeEnum.value.name);\n@@ -3314,1 +3311,1 @@\n-                if (!(app instanceof Attribute.Enum)) {\n+                if (!(app instanceof Attribute.Enum attributeEnum)) {\n@@ -3317,2 +3314,1 @@\n-                Attribute.Enum e = (Attribute.Enum) app;\n-                targets[i] = e.value.name;\n+                targets[i] = attributeEnum.value.name;\n@@ -3346,1 +3342,1 @@\n-                if (!(app instanceof Attribute.Enum)) {\n+                if (!(app instanceof Attribute.Enum attributeEnum)) {\n@@ -3350,2 +3346,1 @@\n-                Attribute.Enum e = (Attribute.Enum) app;\n-                targets[i] = e.value.name;\n+                targets[i] = attributeEnum.value.name;\n@@ -3415,2 +3410,1 @@\n-        if (!(atValue instanceof Attribute.Array)) return null; \/\/ error recovery\n-        return (Attribute.Array) atValue;\n+        return (atValue instanceof Attribute.Array attributeArray) ? attributeArray : null;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":12,"deletions":18,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -752,5 +752,4 @@\n-                if (resource instanceof JCVariableDecl) {\n-                    JCVariableDecl vdecl = (JCVariableDecl) resource;\n-                    visitVarDef(vdecl);\n-                } else if (resource instanceof JCExpression) {\n-                    scan((JCExpression) resource);\n+                if (resource instanceof JCVariableDecl variableDecl) {\n+                    visitVarDef(variableDecl);\n+                } else if (resource instanceof JCExpression expression) {\n+                    scan(expression);\n@@ -946,2 +945,1 @@\n-                if (exit instanceof ThrownPendingExit) {\n-                    ThrownPendingExit thrownExit = (ThrownPendingExit) exit;\n+                if (exit instanceof ThrownPendingExit thrownExit) {\n@@ -1225,5 +1223,4 @@\n-                if (resource instanceof JCVariableDecl) {\n-                    JCVariableDecl vdecl = (JCVariableDecl) resource;\n-                    visitVarDef(vdecl);\n-                } else if (resource instanceof JCExpression) {\n-                    scan((JCExpression) resource);\n+                if (resource instanceof JCVariableDecl variableDecl) {\n+                    visitVarDef(variableDecl);\n+                } else if (resource instanceof JCExpression expression) {\n+                    scan(expression);\n@@ -2435,7 +2432,6 @@\n-                if (resource instanceof JCVariableDecl) {\n-                    JCVariableDecl vdecl = (JCVariableDecl) resource;\n-                    visitVarDef(vdecl);\n-                    unrefdResources.enter(vdecl.sym);\n-                    resourceVarDecls.append(vdecl);\n-                } else if (resource instanceof JCExpression) {\n-                    scanExpr((JCExpression) resource);\n+                if (resource instanceof JCVariableDecl variableDecl) {\n+                    visitVarDef(variableDecl);\n+                    unrefdResources.enter(variableDecl.sym);\n+                    resourceVarDecls.append(variableDecl);\n+                } else if (resource instanceof JCExpression expression) {\n+                    scanExpr(expression);\n@@ -2498,3 +2494,3 @@\n-                        if (exit instanceof AssignPendingExit) {\n-                            ((AssignPendingExit) exit).exit_inits.orSet(inits);\n-                            ((AssignPendingExit) exit).exit_uninits.andSet(uninits);\n+                        if (exit instanceof AssignPendingExit assignPendingExit) {\n+                            assignPendingExit.exit_inits.orSet(inits);\n+                            assignPendingExit.exit_uninits.andSet(uninits);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Flow.java","additions":18,"deletions":22,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -1205,8 +1205,4 @@\n-            if (!(o instanceof IncorporationBinaryOp)) {\n-                return false;\n-            } else {\n-                IncorporationBinaryOp that = (IncorporationBinaryOp)o;\n-                return opKind == that.opKind &&\n-                        types.isSameType(op1, that.op1) &&\n-                        types.isSameType(op2, that.op2);\n-            }\n+            return (o instanceof IncorporationBinaryOp incorporationBinaryOp)\n+                    && opKind == incorporationBinaryOp.opKind\n+                    && types.isSameType(op1, incorporationBinaryOp.op1)\n+                    && types.isSameType(op2, incorporationBinaryOp.op2);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Infer.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -200,6 +200,3 @@\n-            if (!(o instanceof DedupedLambda)) {\n-                return false;\n-            }\n-            DedupedLambda that = (DedupedLambda) o;\n-            return types.isSameType(symbol.asType(), that.symbol.asType())\n-                    && new TreeDiffer(symbol.params(), that.symbol.params()).scan(tree, that.tree);\n+            return (o instanceof DedupedLambda dedupedLambda)\n+                    && types.isSameType(symbol.asType(), dedupedLambda.symbol.asType())\n+                    && new TreeDiffer(symbol.params(), dedupedLambda.symbol.params()).scan(tree, dedupedLambda.tree);\n@@ -1561,4 +1558,1 @@\n-            LambdaTranslationContext ltc = (context != null && context instanceof LambdaTranslationContext)?\n-                    (LambdaTranslationContext)context :\n-                    null;\n-            if (ltc != null) {\n+            if (context != null && context instanceof LambdaTranslationContext lambdaContext) {\n@@ -1566,1 +1560,1 @@\n-                    ltc.addSymbol(tree.sym, LOCAL_VAR);\n+                    lambdaContext.addSymbol(tree.sym, LOCAL_VAR);\n@@ -1770,4 +1764,1 @@\n-            LambdaTranslationContext lambdaContext =\n-                    context instanceof LambdaTranslationContext ?\n-                            (LambdaTranslationContext) context : null;\n-            return lambdaContext != null\n+            return (context instanceof LambdaTranslationContext lambdaContext)\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/LambdaToMethod.java","additions":7,"deletions":16,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1606,5 +1606,4 @@\n-        if (resource instanceof JCVariableDecl) {\n-            JCVariableDecl var = (JCVariableDecl) resource;\n-            resourceUse = make.Ident(var.sym).setType(resource.type);\n-            resourceNonNull = var.init != null && TreeInfo.skipParens(var.init).hasTag(NEWCLASS);\n-            stats.add(var);\n+        if (resource instanceof JCVariableDecl variableDecl) {\n+            resourceUse = make.Ident(variableDecl.sym).setType(resource.type);\n+            resourceNonNull = variableDecl.init != null && TreeInfo.skipParens(variableDecl.init).hasTag(NEWCLASS);\n+            stats.add(variableDecl);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1602,1 +1602,1 @@\n-                    if (bestSoFar instanceof AccessError) {\n+                    if (bestSoFar instanceof AccessError accessError) {\n@@ -1606,2 +1606,2 @@\n-                        currentResolutionContext.addInapplicableCandidate(((AccessError) bestSoFar).sym,\n-                                ((AccessError) bestSoFar).getDiagnostic(JCDiagnostic.DiagnosticType.FRAGMENT, null, null, site, null, argtypes, typeargtypes));\n+                        currentResolutionContext.addInapplicableCandidate(accessError.sym,\n+                                accessError.getDiagnostic(JCDiagnostic.DiagnosticType.FRAGMENT, null, null, site, null, argtypes, typeargtypes));\n@@ -1634,1 +1634,1 @@\n-            } else if (bestSoFar.kind == HIDDEN && bestSoFar instanceof AccessError) {\n+            } else if (bestSoFar.kind == HIDDEN && bestSoFar instanceof AccessError accessError) {\n@@ -1637,2 +1637,2 @@\n-                currentResolutionContext.addInapplicableCandidate(((AccessError) bestSoFar).sym,\n-                        ((AccessError) bestSoFar).getDiagnostic(JCDiagnostic.DiagnosticType.FRAGMENT, null, null, site, null, argtypes, typeargtypes));\n+                currentResolutionContext.addInapplicableCandidate(accessError.sym,\n+                        accessError.getDiagnostic(JCDiagnostic.DiagnosticType.FRAGMENT, null, null, site, null, argtypes, typeargtypes));\n@@ -4844,4 +4844,4 @@\n-                if (o instanceof Type) {\n-                    return ((Type)o).containsAny(ts);\n-                } else if (o instanceof JCDiagnostic) {\n-                    return containsAny((JCDiagnostic)o, ts);\n+                if (o instanceof Type type) {\n+                    return type.containsAny(ts);\n+                } else if (o instanceof JCDiagnostic diagnostic) {\n+                    return containsAny(diagnostic, ts);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -832,1 +832,1 @@\n-                    if (v instanceof Integer && !var.type.getTag().checkRange((Integer) v)) {\n+                    if (v instanceof Integer intVal && !var.type.getTag().checkRange(intVal)) {\n@@ -1432,3 +1432,2 @@\n-                        if (v.fst == names.value && v.snd instanceof Attribute.Constant) {\n-                            Attribute.Constant c = (Attribute.Constant)v.snd;\n-                            if (c.type == syms.intType && ((Integer)c.value) > profile.value) {\n+                        if (v.fst == names.value && v.snd instanceof Attribute.Constant constant) {\n+                            if (constant.type == syms.intType && ((Integer) constant.value) > profile.value) {\n@@ -1463,3 +1462,2 @@\n-                if (v.fst == attribute && v.snd instanceof Attribute.Constant) {\n-                    Attribute.Constant c = (Attribute.Constant)v.snd;\n-                    if (c.type == syms.booleanType && ((Integer)c.value) != 0) {\n+                if (v.fst == attribute && v.snd instanceof Attribute.Constant constant) {\n+                    if (constant.type == syms.booleanType && ((Integer) constant.value) != 0) {\n@@ -2054,1 +2052,1 @@\n-            if (t instanceof ProxyType) {\n+            if (t instanceof ProxyType proxyType) {\n@@ -2059,1 +2057,1 @@\n-                    return ((ProxyType) t).resolve();\n+                    return proxyType.resolve();\n@@ -2128,3 +2126,2 @@\n-                        if (forRemoval instanceof Attribute.Constant) {\n-                            Attribute.Constant c = (Attribute.Constant) forRemoval;\n-                            if (c.type == syms.booleanType && ((Integer) c.value) != 0) {\n+                        if (forRemoval instanceof Attribute.Constant constant) {\n+                            if (constant.type == syms.booleanType && ((Integer) constant.value) != 0) {\n@@ -2814,6 +2811,2 @@\n-\n-            if (!(other instanceof SourceFileObject))\n-                return false;\n-\n-            SourceFileObject o = (SourceFileObject) other;\n-            return name.equals(o.name);\n+            return (other instanceof SourceFileObject sourceFileObject)\n+                    && name.equals(sourceFileObject.name);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":11,"deletions":18,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -533,2 +533,2 @@\n-            !(constValue instanceof String) ||\n-            ((String)constValue).length() < PoolWriter.MAX_STRING_LENGTH)\n+            !(constValue instanceof String str) ||\n+            str.length() < PoolWriter.MAX_STRING_LENGTH)\n@@ -827,2 +827,2 @@\n-            if (tree.sym.owner instanceof ClassSymbol) {\n-                poolWriter.putClass((ClassSymbol)tree.sym.owner);\n+            if (tree.sym.owner instanceof ClassSymbol classSymbol) {\n+                poolWriter.putClass(classSymbol);\n@@ -891,2 +891,2 @@\n-                sym instanceof DynamicVarSymbol &&\n-                ((DynamicVarSymbol)sym).isDynamic();\n+                sym instanceof DynamicVarSymbol dynamicVarSymbol &&\n+                dynamicVarSymbol.isDynamic();\n@@ -1670,3 +1670,2 @@\n-                if (alt instanceof JCAnnotatedType) {\n-                    JCAnnotatedType a = (JCAnnotatedType)alt;\n-                    res = res.prepend(new Pair<>(annotate.fromAnnotations(a.annotations), alt));\n+                if (alt instanceof JCAnnotatedType annotatedType) {\n+                    res = res.prepend(new Pair<>(annotate.fromAnnotations(annotatedType.annotations), alt));\n@@ -2035,1 +2034,1 @@\n-                l instanceof LocalItem &&\n+                l instanceof LocalItem localItem &&\n@@ -2041,1 +2040,1 @@\n-                ((LocalItem)l).incr(ival);\n+                localItem.incr(ival);\n@@ -2076,1 +2075,1 @@\n-                if (od instanceof LocalItem &&\n+                if (od instanceof LocalItem localItem &&\n@@ -2078,1 +2077,1 @@\n-                    ((LocalItem)od).incr(tree.hasTag(PREINC) ? 1 : -1);\n+                    localItem.incr(tree.hasTag(PREINC) ? 1 : -1);\n@@ -2094,1 +2093,1 @@\n-                if (od instanceof LocalItem &&\n+                if (od instanceof LocalItem localItem &&\n@@ -2097,1 +2096,1 @@\n-                    ((LocalItem)od).incr(tree.hasTag(POSTINC) ? 1 : -1);\n+                    localItem.incr(tree.hasTag(POSTINC) ? 1 : -1);\n@@ -2181,2 +2180,2 @@\n-                rhs.type.constValue() instanceof Number &&\n-                ((Number) rhs.type.constValue()).intValue() == 0) {\n+                    rhs.type.constValue() instanceof Number number &&\n+                    number.intValue() == 0) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Gen.java","additions":16,"deletions":17,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -190,7 +190,3 @@\n-                if (obj instanceof BsmKey) {\n-                    BsmKey other = (BsmKey)obj;\n-                    return Objects.equals(bsmKey, other.bsmKey) &&\n-                            Objects.equals(staticArgKeys, other.staticArgKeys);\n-                } else {\n-                    return false;\n-                }\n+                return (obj instanceof BsmKey key)\n+                        && Objects.equals(bsmKey, key.bsmKey)\n+                        && Objects.equals(staticArgKeys, key.staticArgKeys);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/PoolConstant.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -166,10 +166,10 @@\n-        if (o instanceof Integer) {\n-            return putConstant(LoadableConstant.Int((int)o));\n-        } else if (o instanceof Float) {\n-            return putConstant(LoadableConstant.Float((float)o));\n-        } else if (o instanceof Long) {\n-            return putConstant(LoadableConstant.Long((long)o));\n-        } else if (o instanceof Double) {\n-            return putConstant(LoadableConstant.Double((double)o));\n-        } else if (o instanceof String) {\n-            return putConstant(LoadableConstant.String((String)o));\n+        if (o instanceof Integer intVal) {\n+            return putConstant(LoadableConstant.Int(intVal));\n+        } else if (o instanceof Float floatVal) {\n+            return putConstant(LoadableConstant.Float(floatVal));\n+        } else if (o instanceof Long longVal) {\n+            return putConstant(LoadableConstant.Long(longVal));\n+        } else if (o instanceof Double doubleVal) {\n+            return putConstant(LoadableConstant.Double(doubleVal));\n+        } else if (o instanceof String strVal) {\n+            return putConstant(LoadableConstant.String(strVal));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/PoolWriter.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -3587,2 +3587,2 @@\n-                if (def instanceof JCExpressionStatement)\n-                    def = ((JCExpressionStatement)def).expr;\n+                if (def instanceof JCExpressionStatement statement)\n+                    def = statement.expr;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,2 +77,1 @@\n-        if (input instanceof CharBuffer) {\n-            CharBuffer buf = (CharBuffer) input;\n+        if (input instanceof CharBuffer charBuffer) {\n@@ -80,1 +79,1 @@\n-                return new Scanner(this, new JavadocTokenizer(this, buf));\n+                return new Scanner(this, new JavadocTokenizer(this, charBuffer));\n@@ -82,1 +81,1 @@\n-                return new Scanner(this, buf);\n+                return new Scanner(this, charBuffer);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/ScannerFactory.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -545,2 +545,2 @@\n-        if (fileObject instanceof JavaFileObject)\n-            return new FilerOutputJavaFileObject(msym, null, (JavaFileObject)fileObject);\n+        if (fileObject instanceof JavaFileObject javaFileObject)\n+            return new FilerOutputJavaFileObject(msym, null, javaFileObject);\n@@ -552,3 +552,2 @@\n-        if (location instanceof StandardLocation) {\n-            StandardLocation stdLoc = (StandardLocation) location;\n-            if (!stdLoc.isOutputLocation())\n+        if (location instanceof StandardLocation standardLocation) {\n+            if (!standardLocation.isOutputLocation())\n@@ -556,1 +555,1 @@\n-                                                   stdLoc);\n+                                                    standardLocation);\n@@ -892,1 +891,1 @@\n-            if (!(fileObject instanceof JavaFileObject))\n+            if (!(fileObject instanceof JavaFileObject javaFileObject))\n@@ -894,1 +893,0 @@\n-            JavaFileObject javaFileObject = (JavaFileObject)fileObject;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/processing\/JavacFiler.java","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -289,2 +289,2 @@\n-                if (processorClassLoader != null && processorClassLoader instanceof Closeable) {\n-                    compiler.closeables = compiler.closeables.prepend((Closeable) processorClassLoader);\n+                if (processorClassLoader != null && processorClassLoader instanceof Closeable closeable) {\n+                    compiler.closeables = compiler.closeables.prepend(closeable);\n@@ -379,2 +379,1 @@\n-        if (fileManager instanceof JavacFileManager) {\n-            StandardJavaFileManager standardFileManager = (JavacFileManager) fileManager;\n+        if (fileManager instanceof JavacFileManager standardFileManager) {\n@@ -883,2 +882,2 @@\n-                processorIterator instanceof ServiceIterator) {\n-                ((ServiceIterator) processorIterator).close();\n+                processorIterator instanceof ServiceIterator serviceIterator) {\n+                serviceIterator.close();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/processing\/JavacProcessingEnvironment.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"}]}