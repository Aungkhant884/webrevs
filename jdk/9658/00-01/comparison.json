{"files":[{"patch":"@@ -28,0 +28,1 @@\n+import nsk.share.gc.gp.GarbageUtils;\n@@ -42,1 +43,1 @@\n-        byte[] rezerve = new byte[1024 * 1024];\n+        byte[] rezerve = new byte[1024];\n@@ -51,1 +52,3 @@\n-            WhiteBox.getWhiteBox().fullGC();\n+            \/\/ Use only 30% of the heap.\n+            final long testMemory = 3 * Runtime.getRuntime().maxMemory() \/ 10;\n+            GarbageUtils.engageGC(getExecutionController(), testMemory);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/lock\/LockerTest.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * @run main\/othervm\/native -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI gc.lock.LockerTest -lockers jni\n+ * @run main\/othervm\/native -Xbootclasspath\/a:. -Xlog:gc=debug:gc.log -XX:+HeapDumpOnOutOfMemoryError -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI gc.lock.LockerTest -lockers jni -t 1\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/lock\/jni\/jnilock001\/TestDescription.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * @run main\/othervm\/native -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI gc.lock.LockerTest -lockers jniGlobalRef\n+ * @run main\/othervm\/native -Xbootclasspath\/a:. -Xlog:gc=debug:gc.log -XX:+HeapDumpOnOutOfMemoryError -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI gc.lock.LockerTest -lockers jniGlobalRef -t 1\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/lock\/jniref\/jniglobalreflock01\/TestDescription.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * @run main\/othervm\/native -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI gc.lock.LockerTest -lockers jniLocalRef\n+ * @run main\/othervm\/native -Xbootclasspath\/a:. -Xlog:gc=debug:gc.log -XX:+HeapDumpOnOutOfMemoryError -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI gc.lock.LockerTest -lockers jniLocalRef -t 1\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/lock\/jniref\/jnilocalreflock01\/TestDescription.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * @run main\/othervm\/native -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI gc.lock.LockerTest -lockers jniRef\n+ * @run main\/othervm\/native -Xbootclasspath\/a:. -Xlog:gc=debug:gc.log -XX:+HeapDumpOnOutOfMemoryError -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI gc.lock.LockerTest -lockers jniRef -t 1\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/lock\/jniref\/jnireflock01\/TestDescription.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * @run main\/othervm\/native -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI gc.lock.LockerTest -lockers jniWeakGlobalRef\n+ * @run main\/othervm\/native -Xbootclasspath\/a:. -Xlog:gc=debug:gc.log -XX:+HeapDumpOnOutOfMemoryError -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI gc.lock.LockerTest -lockers jniWeakGlobalRef -t 1\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/lock\/jniref\/jniweakglobalreflock01\/TestDescription.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * @run main\/othervm\/native -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -agentlib:JVMTIAllocLocker gc.lock.LockerTest -lockers jvmtiAlloc\n+ * @run main\/othervm\/native -Xbootclasspath\/a:. -Xlog:gc=debug:gc.log -XX:+HeapDumpOnOutOfMemoryError -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -agentlib:JVMTIAllocLocker gc.lock.LockerTest -lockers jvmtiAlloc -t 1\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/lock\/jvmti\/alloc\/jvmtialloclock01\/TestDescription.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n- * @run main\/othervm\/native -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI gc.lock.LockerTest -lockers malloc\n+ * @run main\/othervm\/native -Xbootclasspath\/a:. -Xlog:gc=debug:gc.log -XX:+HeapDumpOnOutOfMemoryError -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI gc.lock.LockerTest -lockers malloc -t 1\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/lock\/malloc\/malloclock01\/TestDescription.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+import jdk.test.whitebox.WhiteBox;\n@@ -89,0 +90,16 @@\n+        public static void engageGC(ExecutionController stresser, long testMemory) {\n+            \/\/ Number of Young GC iterations before triggering full GC.\n+            final long YOUNG_GC_ITERATIONS = 100;\n+            final long memChunk = testMemory \/ YOUNG_GC_ITERATIONS;\n+            int iteration = 0;\n+\n+            while (stresser.continueExecution()) {\n+                while (iteration++ < YOUNG_GC_ITERATIONS) {\n+                    byteArrayProducer.create(memChunk);\n+                    WhiteBox.getWhiteBox().youngGC();\n+                }\n+                iteration = 0;\n+                WhiteBox.getWhiteBox().fullGC();\n+            }\n+        }\n+\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/gc\/gp\/GarbageUtils.java","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"}]}