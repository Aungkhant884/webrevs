{"files":[{"patch":"@@ -175,1 +175,1 @@\n-  static bool platform_print_native_stack(outputStream* st, const void* context, char *buf, int buf_size);\n+  static bool platform_print_native_stack(outputStream* st, const void* context, char *buf, int buf_size, address& lastpc);\n","filename":"src\/hotspot\/os\/aix\/os_aix.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-                                          char *buf, int buf_size);\n+                                          char *buf, int buf_size, address& lastpc);\n","filename":"src\/hotspot\/os\/windows\/os_windows.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -519,1 +519,1 @@\n-bool os::Aix::platform_print_native_stack(outputStream* st, const void* context, char *buf, int buf_size) {\n+bool os::Aix::platform_print_native_stack(outputStream* st, const void* context, char *buf, int buf_size, address& lastpc) {\n","filename":"src\/hotspot\/os_cpu\/aix_ppc\/os_aix_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-                                            char *buf, int buf_size) {\n-  return os::Aix::platform_print_native_stack(st, context, buf, buf_size);\n+                                            char *buf, int buf_size, address& lastpc) {\n+  return os::Aix::platform_print_native_stack(st, context, buf, buf_size, lastpc);\n","filename":"src\/hotspot\/os_cpu\/aix_ppc\/os_aix_ppc.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -227,1 +227,1 @@\n-                                            char *buf, int buf_size)\n+                                            char *buf, int buf_size, address& lastpc)\n@@ -248,1 +248,1 @@\n-  address lastpc = 0;\n+  address lastpc_internal = 0;\n@@ -255,1 +255,1 @@\n-      if (count == 2 && lastpc == pc) {\n+      if (count == 2 && lastpc_internal == pc) {\n@@ -271,1 +271,1 @@\n-      lastpc = pc;\n+      lastpc_internal = pc;\n@@ -277,0 +277,1 @@\n+      lastpc = lastpc_internal;\n","filename":"src\/hotspot\/os_cpu\/windows_x86\/os_windows_x86.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -34,2 +34,2 @@\n-                                     char *buf, int buf_size) {\n-  return os::win32::platform_print_native_stack(st, context, buf, buf_size);\n+                                     char *buf, int buf_size, address& lastpc) {\n+  return os::win32::platform_print_native_stack(st, context, buf, buf_size, lastpc);\n","filename":"src\/hotspot\/os_cpu\/windows_x86\/os_windows_x86.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1011,1 +1011,1 @@\n-                                                 char *buf, int buf_size);\n+                                                 char *buf, int buf_size, address& lastpc);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-                                     char *buf, int buf_size) {\n+                                     char *buf, int buf_size, address& lastpc) {\n","filename":"src\/hotspot\/share\/runtime\/os.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -657,1 +657,2 @@\n-  if (os::platform_print_native_stack(tty, nullptr, buf, sizeof(buf))) {\n+  address lastpc = nullptr;\n+  if (os::platform_print_native_stack(tty, nullptr, buf, sizeof(buf), lastpc)) {\n","filename":"src\/hotspot\/share\/utilities\/debug.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -390,0 +390,21 @@\n+\/\/ Like above, but only try to figure out a short name. Return nullptr if not found.\n+static const char* find_code_name(address pc) {\n+  if (Interpreter::contains(pc)) {\n+    InterpreterCodelet* codelet = Interpreter::codelet_containing(pc);\n+    if (codelet != nullptr) {\n+      return codelet->description();\n+    }\n+  } else {\n+    StubCodeDesc* desc = StubCodeDesc::desc_for(pc);\n+    if (desc != nullptr) {\n+      return desc->name();\n+    } else {\n+      CodeBlob* cb = CodeCache::find_blob(pc);\n+      if (cb != nullptr) {\n+        return cb->name();\n+      }\n+    }\n+  }\n+  return nullptr;\n+}\n+\n@@ -678,0 +699,4 @@\n+  \/\/ Native stack trace may get stuck. We try to handle the last pc if it\n+  \/\/ belongs to VM generated code.\n+  address lastpc = nullptr;\n+\n@@ -966,1 +991,1 @@\n-    if (os::platform_print_native_stack(st, _context, buf, sizeof(buf))) {\n+    if (os::platform_print_native_stack(st, _context, buf, sizeof(buf), lastpc)) {\n@@ -969,0 +994,7 @@\n+      \/\/ Stack walking may get stuck. Try to find the calling code.\n+      if (lastpc != nullptr) {\n+        const char* name = find_code_name(lastpc);\n+        if (name != nullptr) {\n+          st->print_cr(\"the last pc belongs to %s (will be printed below)\", name);\n+        }\n+      }\n@@ -1073,0 +1105,7 @@\n+      \/\/ Check if a pc was found by native stack trace above.\n+      if (lastpc != nullptr) {\n+        if (print_code(st, _thread, lastpc, true, printed, printed_capacity)) {\n+          printed_len++;\n+        }\n+      }\n+\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":40,"deletions":1,"binary":false,"changes":41,"status":"modified"}]}