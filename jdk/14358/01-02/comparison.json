{"files":[{"patch":"@@ -390,0 +390,21 @@\n+\/\/ Like above, but only try to figure out a short name. Return nullptr if not found.\n+static const char* find_code_name(address pc) {\n+  if (Interpreter::contains(pc)) {\n+    InterpreterCodelet* codelet = Interpreter::codelet_containing(pc);\n+    if (codelet != nullptr) {\n+      return codelet->description();\n+    }\n+  } else {\n+    StubCodeDesc* desc = StubCodeDesc::desc_for(pc);\n+    if (desc != nullptr) {\n+      return desc->name();\n+    } else {\n+      CodeBlob* cb = CodeCache::find_blob(pc);\n+      if (cb != nullptr) {\n+        return cb->name();\n+      }\n+    }\n+  }\n+  return nullptr;\n+}\n+\n@@ -678,5 +699,3 @@\n-  \/\/ keep track of which code has already been printed\n-  const int printed_capacity = max_error_log_print_code;\n-  address printed[printed_capacity];\n-  printed[0] = nullptr;\n-  int printed_len = 0;\n+  \/\/ Native stack trace may get stuck. We try to handle the last pc if it\n+  \/\/ belongs to VM generated code.\n+  address lastpc = nullptr;\n@@ -972,1 +991,0 @@\n-    address lastpc = nullptr;\n@@ -976,1 +994,1 @@\n-      \/\/ Stack walking may get stuck. Try to print the calling code.\n+      \/\/ Stack walking may get stuck. Try to find the calling code.\n@@ -978,5 +996,3 @@\n-        st->print_cr(\"called by the following code:\");\n-        if (print_code(st, _thread, lastpc, true, printed, printed_capacity)) {\n-          printed_len++;\n-        } else {\n-          st->print_cr(\"no VM gerenated code\");\n+        const char* name = find_code_name(lastpc);\n+        if (name != nullptr) {\n+          st->print_cr(\"the last pc belongs to %s (will be printed below)\", name);\n@@ -1079,0 +1095,4 @@\n+    const int printed_capacity = max_error_log_print_code;\n+    address printed[printed_capacity];\n+    printed[0] = nullptr;\n+    int printed_len = 0;\n@@ -1085,0 +1105,7 @@\n+      \/\/ Check if a pc was found by native stack trace above.\n+      if (lastpc != nullptr) {\n+        if (print_code(st, _thread, lastpc, true, printed, printed_capacity)) {\n+          printed_len++;\n+        }\n+      }\n+\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":39,"deletions":12,"binary":false,"changes":51,"status":"modified"}]}