{"files":[{"patch":"@@ -1196,1 +1196,3 @@\n-  assert(Universe::heap()->is_gc_active() || Thread::current()->is_ConcurrentGC_thread(),\n+  assert(Universe::heap()->is_gc_active() ||\n+         Thread::current()->is_ConcurrentGC_thread() ||\n+         Thread::current()->is_Worker_thread(),\n@@ -1236,1 +1238,3 @@\n-  assert(SafepointSynchronize::is_at_safepoint() || Thread::current()->is_ConcurrentGC_thread(),\n+  assert(SafepointSynchronize::is_at_safepoint() ||\n+         Thread::current()->is_ConcurrentGC_thread() ||\n+         Thread::current()->is_Worker_thread(),\n@@ -1557,1 +1561,3 @@\n-  DEBUG_ONLY(bool called_by_gc = Universe::heap()->is_gc_active() || Thread::current()->is_ConcurrentGC_thread();)\n+  DEBUG_ONLY(bool called_by_gc = Universe::heap()->is_gc_active() ||\n+                                 Thread::current()->is_ConcurrentGC_thread() ||\n+                                 Thread::current()->is_Worker_thread();)\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1686,2 +1686,1 @@\n-  _workers = new WorkGang(\"GC Thread\", ParallelGCThreads,\n-                          false \/* are_ConcurrentGC_threads *\/);\n+  _workers = new WorkGang(\"GC Thread\", ParallelGCThreads);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -435,1 +435,1 @@\n-  _concurrent_workers = new WorkGang(\"G1 Conc\", _max_concurrent_workers, true);\n+  _concurrent_workers = new WorkGang(\"G1 Conc\", _max_concurrent_workers);\n@@ -897,1 +897,0 @@\n-    assert(Thread::current()->is_ConcurrentGC_thread(), \"Not a concurrent GC thread\");\n@@ -982,3 +981,0 @@\n-    assert(Thread::current()->is_ConcurrentGC_thread(),\n-           \"this should only be done by a conc GC thread\");\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -121,3 +121,1 @@\n-    _workers(\"GC Thread\",\n-             ParallelGCThreads,\n-             false \/* are_ConcurrentGC_threads *\/) { }\n+    _workers(\"GC Thread\", ParallelGCThreads) { }\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.hpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"utilities\/debug.hpp\"\n@@ -45,0 +46,5 @@\n+  static ConcurrentGCThread* cast(Thread* t) {\n+    assert(t->is_ConcurrentGC_thread(), \"incorrect cast to ConcurrentGCThread\");\n+    return static_cast<ConcurrentGCThread*>(t);\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/concurrentGCThread.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n-WorkGang::WorkGang(const char* name, uint workers, bool are_ConcurrentGC_threads) :\n+WorkGang::WorkGang(const char* name, uint workers) :\n@@ -125,1 +125,0 @@\n-    _are_ConcurrentGC_threads(are_ConcurrentGC_threads),\n","filename":"src\/hotspot\/share\/gc\/shared\/workgroup.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -97,3 +97,0 @@\n-  \/\/ Initialize only instance data.\n-  const bool _are_ConcurrentGC_threads;\n-\n@@ -118,1 +115,1 @@\n-  WorkGang(const char* name, uint workers, bool are_ConcurrentGC_threads);\n+  WorkGang(const char* name, uint workers);\n@@ -125,2 +122,0 @@\n-  bool are_ConcurrentGC_threads() const { return _are_ConcurrentGC_threads; }\n-\n@@ -216,3 +211,0 @@\n-  \/\/ Predicate for Thread\n-  bool is_ConcurrentGC_thread() const override { return gang()->are_ConcurrentGC_threads(); }\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/workgroup.hpp","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -498,2 +498,1 @@\n-  _workers = new ShenandoahWorkGang(\"Shenandoah GC Threads\", _max_workers,\n-                            \/* are_ConcurrentGC_threads *\/ true);\n+  _workers = new ShenandoahWorkGang(\"Shenandoah GC Threads\", _max_workers);\n@@ -508,2 +507,1 @@\n-                                                ParallelGCThreads,\n-                 \/* are_ConcurrentGC_threads *\/ false);\n+                                                ParallelGCThreads);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -114,3 +114,1 @@\n-  assert(!Thread::current()->is_Worker_thread() &&\n-              (Thread::current()->is_VM_thread() ||\n-               Thread::current()->is_ConcurrentGC_thread()),\n+  assert(Thread::current()->is_VM_thread() || Thread::current()->is_ConcurrentGC_thread(),\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahUtils.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -59,3 +59,2 @@\n-           uint workers,\n-           bool are_ConcurrentGC_threads) :\n-    WorkGang(name, workers, are_ConcurrentGC_threads), _initialize_gclab(false) {\n+           uint workers) :\n+    WorkGang(name, workers), _initialize_gclab(false) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahWorkGroup.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -83,2 +83,2 @@\n-    if (thread->is_ConcurrentGC_thread() && !thread->is_Worker_thread()) {\n-      static_cast<ConcurrentGCThread*>(thread)->stop();\n+    if (thread->is_ConcurrentGC_thread()) {\n+      ConcurrentGCThread::cast(thread)->stop();\n","filename":"src\/hotspot\/share\/gc\/z\/zCollectedHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -62,2 +62,1 @@\n-             ParallelGCThreads,\n-             false \/* are_ConcurrentGC_threads *\/) {\n+             ParallelGCThreads) {\n","filename":"src\/hotspot\/share\/gc\/z\/zRuntimeWorkers.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -66,2 +66,1 @@\n-             UseDynamicNumberOfGCThreads ? ConcGCThreads : MAX2(ConcGCThreads, ParallelGCThreads),\n-             true \/* are_ConcurrentGC_threads *\/) {\n+             UseDynamicNumberOfGCThreads ? ConcGCThreads : MAX2(ConcGCThreads, ParallelGCThreads)) {\n","filename":"src\/hotspot\/share\/gc\/z\/zWorkers.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-      _work_gang = new WorkGang(\"G1 Small Workers\", MaxWorkers, false);\n+      _work_gang = new WorkGang(\"G1 Small Workers\", MaxWorkers);\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_g1BatchedGangTask.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-      _workers = new WorkGang(\"G1CardSetTest Work Gang\", _max_workers, false);\n+      _workers = new WorkGang(\"G1CardSetTest Work Gang\", _max_workers);\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_g1CardSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-      _work_gang = new WorkGang(\"G1 Small Workers\", MaxWorkers, false);\n+      _work_gang = new WorkGang(\"G1 Small Workers\", MaxWorkers);\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_stressCommitUncommit.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -881,3 +881,1 @@\n-    _workers = new WorkGang(\"OopStorageTestParIteration workers\",\n-                            _max_workers,\n-                            false);\n+    _workers = new WorkGang(\"OopStorageTestParIteration workers\", _max_workers);\n","filename":"test\/hotspot\/gtest\/gc\/shared\/test_oopStorage.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -79,3 +79,1 @@\n-    WorkGang* wg = new WorkGang(\"OopStorageParIterPerf workers\",\n-                                _num_workers,\n-                                false);\n+    WorkGang* wg = new WorkGang(\"OopStorageParIterPerf workers\", _num_workers);\n","filename":"test\/hotspot\/gtest\/gc\/shared\/test_oopStorage_parperf.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"}]}