{"files":[{"patch":"@@ -183,0 +183,1 @@\n+  assert(word_size > 0, \"allocating zero words?\");\n@@ -191,3 +192,1 @@\n-  if (bytes == 0) {\n-    return true;\n-  }\n+  assert(bytes > 0, \"precondition\");\n@@ -204,7 +203,5 @@\n-  if (aligned_bytes == 0){\n-    \/\/ The alignment caused the number of bytes to wrap.  An expand_by(0) will\n-    \/\/ return true with the implication that and expansion was done when it\n-    \/\/ was not.  A call to expand implies a best effort to expand by \"bytes\"\n-    \/\/ but not a guarantee.  Align down to give a best effort.  This is likely\n-    \/\/ the most that the generation can expand since it has some capacity to\n-    \/\/ start with.\n+  if (aligned_bytes == 0) {\n+    \/\/ The alignment caused the number of bytes to wrap.  A call to expand\n+    \/\/ implies a best effort to expand by \"bytes\" but not a guarantee.  Align\n+    \/\/ down to give a best effort.  This is likely the most that the generation\n+    \/\/ can expand since it has some capacity to start with.\n@@ -234,3 +231,1 @@\n-  if (bytes == 0) {\n-    return true;  \/\/ That's what virtual_space()->expand_by(0) would return\n-  }\n+  assert(bytes > 0, \"precondition\");\n","filename":"src\/hotspot\/share\/gc\/parallel\/psOldGen.cpp","additions":8,"deletions":13,"binary":false,"changes":21,"status":"modified"}]}