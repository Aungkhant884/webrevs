{"files":[{"patch":"@@ -182,2 +182,3 @@\n-HeapWord* PSOldGen::expand_and_cas_allocate(size_t word_size) {\n-  expand(word_size*HeapWordSize);\n+bool PSOldGen::expand_for_allocate(size_t word_size) {\n+  assert(word_size > 0, \"allocating zero words?\");\n+  bool result = expand(word_size*HeapWordSize);\n@@ -187,1 +188,1 @@\n-  return cas_allocate_noexpand(word_size);\n+  return result;\n@@ -190,4 +191,2 @@\n-void PSOldGen::expand(size_t bytes) {\n-  if (bytes == 0) {\n-    return;\n-  }\n+bool PSOldGen::expand(size_t bytes) {\n+  assert(bytes > 0, \"precondition\");\n@@ -204,7 +203,5 @@\n-  if (aligned_bytes == 0){\n-    \/\/ The alignment caused the number of bytes to wrap.  An expand_by(0) will\n-    \/\/ return true with the implication that and expansion was done when it\n-    \/\/ was not.  A call to expand implies a best effort to expand by \"bytes\"\n-    \/\/ but not a guarantee.  Align down to give a best effort.  This is likely\n-    \/\/ the most that the generation can expand since it has some capacity to\n-    \/\/ start with.\n+  if (aligned_bytes == 0) {\n+    \/\/ The alignment caused the number of bytes to wrap.  A call to expand\n+    \/\/ implies a best effort to expand by \"bytes\" but not a guarantee.  Align\n+    \/\/ down to give a best effort.  This is likely the most that the generation\n+    \/\/ can expand since it has some capacity to start with.\n@@ -228,0 +225,1 @@\n+  return success;\n@@ -233,3 +231,1 @@\n-  if (bytes == 0) {\n-    return true;  \/\/ That's what virtual_space()->expand_by(0) would return\n-  }\n+  assert(bytes > 0, \"precondition\");\n@@ -272,1 +268,1 @@\n-  bool result = true;\n+  bool result = false;\n","filename":"src\/hotspot\/share\/gc\/parallel\/psOldGen.cpp","additions":14,"deletions":18,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -82,2 +82,2 @@\n-  HeapWord* expand_and_cas_allocate(size_t word_size);\n-  void expand(size_t bytes);\n+  bool expand_for_allocate(size_t word_size);\n+  bool expand(size_t bytes);\n@@ -138,2 +138,6 @@\n-    HeapWord* res = cas_allocate_noexpand(word_size);\n-    return (res == NULL) ? expand_and_cas_allocate(word_size) : res;\n+    HeapWord* res;\n+    do {\n+      res = cas_allocate_noexpand(word_size);\n+      \/\/ Retry failed allocation if expand succeeds.\n+    } while ((res == nullptr) && expand_for_allocate(word_size));\n+    return res;\n","filename":"src\/hotspot\/share\/gc\/parallel\/psOldGen.hpp","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"}]}