{"files":[{"patch":"@@ -32,0 +32,1 @@\n+import java.math.BigInteger;\n@@ -147,1 +148,0 @@\n-\/\/            System.out.println(prefix + \"avail: \" + available);\n@@ -151,1 +151,1 @@\n-            if ((tag & 0x1f) == 0x1f) {\n+            if (tagType(tag) == 0x1f) {\n@@ -169,1 +169,1 @@\n-                            \", Range of length error: \" + len + \"bytes\");\n+                            \", Range of length error: \" + len + \" bytes\" + System.lineSeparator());\n@@ -175,1 +175,1 @@\n-                    len = (len << 8) | (0xff & inc);\n+                    len = (len << 8) | inc;\n@@ -179,5 +179,3 @@\n-                \/\/ Tag with Indefinite-length; note the tag and continue parsing tags.\n-                out.append(prefix).append(tagName(tag)).append(\": INDEFINITE-LENGTH CONTENT\\n\");\n-                continue;\n-            }\n-            if (available < 0 && origAvailable < 0) {\n+                \/\/ Tag with Indefinite-length; flag the length as unknown\n+                len = -1;\n+            } else if (available < 0 && origAvailable < 0) {\n@@ -190,1 +188,1 @@\n-                    out.append(\"END-OF-CONTENT \");\n+                    out.append(\"END-OF-CONTENT \" + System.lineSeparator());\n@@ -192,1 +190,1 @@\n-                    return available;\n+                    return 0;          \/\/ unknown, but nothing left\n@@ -197,1 +195,1 @@\n-                            out.append(String.format(\"BYTE %d, \", in.readByte()));\n+                            out.append(String.format(\"BYTE %d. \", in.readByte()));\n@@ -201,1 +199,1 @@\n-                            out.append(String.format(\"SHORT %d, \", in.readShort()));\n+                            out.append(String.format(\"SHORT %d. \", in.readShort()));\n@@ -205,1 +203,1 @@\n-                            out.append(String.format(\"INTEGER %d, \", in.readInt()));\n+                            out.append(String.format(\"INTEGER %d. \", in.readInt()));\n@@ -209,1 +207,1 @@\n-                            out.append(String.format(\"LONG %d, \", in.readLong()));\n+                            out.append(String.format(\"LONG %d. \", in.readLong()));\n@@ -213,1 +211,6 @@\n-                            formatBytes(in, out, len);\n+                            byte[] bytes = new byte[len];\n+                            int l = in.read(bytes);\n+                            BigInteger big = new BigInteger(bytes);\n+                            out.append(\"BIG INTEGER [\" + len + \"] \");\n+                            out.append(big.toString());\n+                            out.append(\".\");\n@@ -228,0 +231,1 @@\n+                case TAG_OctetString:\n@@ -236,2 +240,2 @@\n-                    byte[] buf = new byte[Math.min(64, len)];\n-                    final int l = in.read(buf, 0, buf.length);\n+                    byte[] buf = new byte[Math.min(32, len)];\n+                    int l = in.read(buf, 0, buf.length);\n@@ -241,1 +245,1 @@\n-                        for (int i = 0; i < len; i++) {\n+                        for (int i = 0; i < l; i++) {\n@@ -253,2 +257,3 @@\n-                    if (l < len) {\n-                        in.skip(len - l);   \/\/ skip the rest\n+                    \/\/ Skip the rest\n+                    while (l < len) {\n+                        l += (int)in.skip(len - l);\n@@ -283,1 +288,0 @@\n-                case TAG_OctetString:\n@@ -286,2 +290,5 @@\n-                    in.skip(len);\n-                    available -= len;\n+                    do {\n+                        var skipped = in.skip(len);\n+                        len -= skipped;\n+                        available -= skipped;\n+                    } while (len > 0);\n@@ -294,0 +301,1 @@\n+                        String lenStr = (len < 0) ? \"INDEFINITE\" : Integer.toString(len);\n@@ -296,1 +304,1 @@\n-                            out.append(String.format(\"APPLICATION %d. [%d] {\\n\", tag & 0x1f, len));\n+                            out.append(String.format(\"APPLICATION %d. [%s] {%n\", tagType(tag), lenStr));\n@@ -298,1 +306,1 @@\n-                            out.append(String.format(\"%s [%d]\\n\", tagName(tag), len));\n+                            out.append(String.format(\"%s [%s]%n\", tagName(tag), lenStr));\n@@ -312,1 +320,1 @@\n-            out.append(\"\\n\");   \/\/ End with EOL\n+            out.append(System.lineSeparator());   \/\/ End with EOL\n@@ -353,1 +361,1 @@\n-        String tagString = (isConstructed(tag) ? \"CONSTRUCTED \"  : \"\") + tagNames[tag & 0x1f];\n+        String tagString = (isConstructed(tag) ? \"CONSTRUCTED \"  : \"\") + tagNames[tagType(tag)];\n@@ -469,0 +477,5 @@\n+    private int tagType(int tag) {\n+        return tag & TAG_MASK;\n+    }\n+\n+    private static final byte TAG_MASK = 0x1f;\n@@ -582,1 +595,4 @@\n-                fmt.annotate(dis, System.out);\n+                HexPrinter p = HexPrinter.simple()\n+                        .dest(System.out)\n+                        .formatter(ASN1Formatter.formatter(), \"; \", 100);\n+                p.format(dis);\n@@ -601,1 +617,1 @@\n-        if (line1.contains(\"CERTIFICATE\")) {\n+        if (line1.startsWith(\"-----\") && line1.endsWith(\"-----\")) {\n","filename":"test\/lib\/jdk\/test\/lib\/hexdump\/ASN1Formatter.java","additions":46,"deletions":30,"binary":false,"changes":76,"status":"modified"}]}