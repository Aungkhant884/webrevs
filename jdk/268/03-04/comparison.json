{"files":[{"patch":"@@ -104,0 +104,16 @@\n+    @Test\n+    static void testIndefinate() {\n+        byte[] bytes = {0x24, (byte) 0x80, 4, 2, 'a', 'b', 4, 2, 'c', 'd', 0, 0};\n+        HexPrinter p = HexPrinter.simple()\n+                .formatter(ASN1Formatter.formatter(), \"; \", 100);\n+        String result = p.toString(bytes);\n+        System.out.println(result);\n+\n+        Assert.assertEquals(result.lines().filter(s -> s.contains(\"OCTET STRING [INDEFINITE]\")).count(),\n+                1, \"Indefinite length\");\n+        Assert.assertEquals(result.lines().filter(s -> s.contains(\";   OCTET STRING [2]\")).count(),\n+                2, \"Octet Sequences\");\n+        Assert.assertEquals(result.lines().filter(s -> s.contains(\";   END-OF-CONTENT\")).count(),\n+                1, \"end of content\");\n+    }\n+\n","filename":"test\/lib-test\/jdk\/test\/lib\/hexdump\/ASN1FormatterTest.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -147,1 +147,1 @@\n-        while (available != 0) {\n+        while (available != 0 || origAvailable < 0) {\n@@ -176,1 +176,1 @@\n-                    available -= nbytes;\n+                    available -= 1;\n@@ -309,1 +309,3 @@\n-                        available -= len - remaining;\n+                        if (len > 0) {\n+                            available -= len - remaining;\n+                        }\n","filename":"test\/lib\/jdk\/test\/lib\/hexdump\/ASN1Formatter.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"}]}