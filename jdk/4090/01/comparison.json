{"files":[{"patch":"@@ -28,0 +28,1 @@\n+#include \"logging\/log.hpp\"\n@@ -41,1 +42,3 @@\n-      os::release_memory_special(_ptr, _size);\n+      if (_ptr != NULL) {\n+        os::release_memory_special(_ptr, _size);\n+      }\n@@ -68,1 +71,1 @@\n-  if (result != NULL) {\n+  if (result == NULL) {\n@@ -72,1 +75,1 @@\n-  MemoryReleaser mr(result, large_allocation_size);\n+  MemoryReleaser m1(result, large_allocation_size);\n@@ -74,2 +77,1 @@\n-  \/\/ allocate another page within the recently allocated memory area which seems to be a good location. At least\n-  \/\/ we managed to get it once.\n+  \/\/ Reserve another page within the recently allocated memory area. This should fail\n@@ -79,5 +81,7 @@\n-  if (actual_location != NULL) {\n-      \/\/ failed to allocate memory, skipping the test\n-      return;\n-  }\n-  MemoryReleaser mr2(actual_location, expected_allocation_size);\n+  EXPECT_TRUE(actual_location == NULL) << \"Should not be allowed to reserve within present reservation\";\n+\n+  \/\/ Instead try reserving after the first reservation.\n+  expected_location = result + large_allocation_size;\n+  actual_location = os::reserve_memory_special(expected_allocation_size, os::large_page_size(), os::large_page_size(), expected_location, false);\n+  EXPECT_TRUE(actual_location == NULL || actual_location == expected_location) << \"Reservation must either fail or be at requested location\";\n+  MemoryReleaser m2(actual_location, os::large_page_size());\n@@ -85,2 +89,7 @@\n-  EXPECT_EQ(expected_location, actual_location)\n-        << \"Failed to allocate memory at requested location \" << expected_location << \" of size \" << expected_allocation_size;\n+  \/\/ Now try to do a reservation with a larger alignment.\n+  const size_t alignment = os::large_page_size() * 2;\n+  const size_t new_large_size = alignment * 4;\n+  char* aligned_request = os::reserve_memory_special(new_large_size, alignment, os::large_page_size(), NULL, false);\n+  EXPECT_TRUE(aligned_request != NULL) << \"Unexpected reservation failure, canâ€™t verify correct alignment\";\n+  EXPECT_TRUE(is_aligned(aligned_request, alignment)) << \"Returned address must be aligned\";\n+  MemoryReleaser m3(aligned_request, new_large_size);\n","filename":"test\/hotspot\/gtest\/runtime\/test_os_windows.cpp","additions":21,"deletions":12,"binary":false,"changes":33,"status":"modified"}]}