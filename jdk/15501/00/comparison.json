{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -134,0 +134,4 @@\n+            \/\/ First ensure source can be read\n+            source.getFileSystem().provider().checkAccess(source,\n+                                                          AccessMode.READ);\n+\n","filename":"src\/java.base\/share\/classes\/java\/nio\/file\/CopyMoveHelper.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.nio.file.AccessMode;\n@@ -916,0 +917,3 @@\n+            } else if (!sourceAttrs.isSymbolicLink() || flags.followLinks) {\n+                \/\/ Ensure source can be read\n+                provider.checkAccess(source, AccessMode.READ);\n@@ -1040,0 +1044,4 @@\n+            else if (!sourceAttrs.isSymbolicLink() || flags.followLinks)\n+                \/\/ Ensure source can be read\n+                provider.checkAccess(source, AccessMode.READ);\n+\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileSystem.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -498,1 +498,1 @@\n-                \"not supported when creating symbolic link\");\n+                \" not supported when creating symbolic link\");\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixFileSystemProvider.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,1 +25,2 @@\n- * @bug 4313887 6838333 6917021 7006126 6950237 8006645 8201407 8264744 8267820\n+ * @bug 4313887 6838333 6917021 7006126 6950237 8006645 8073061 8201407 8264744\n+ *      8267820\n@@ -38,1 +39,0 @@\n-import static java.nio.file.StandardCopyOption.*;\n@@ -40,0 +40,1 @@\n+import static java.nio.file.StandardCopyOption.*;\n@@ -817,0 +818,19 @@\n+        \/**\n+         * Test: ensure target not deleted if source permissions are zero\n+         *\/\n+        source = createSourceFile(dir1);\n+        if (getFileStore(source).supportsFileAttributeView(\"posix\")) {\n+            Files.setPosixFilePermissions(source, Set.of());\n+            target = getTargetFile(dir2);\n+            createFile(target);\n+            try {\n+                Files.copy(source, target, REPLACE_EXISTING);\n+                throw new RuntimeException(\"AccessDeniedException not thrown\");\n+            } catch (AccessDeniedException expected) {\n+            }\n+            if (!Files.exists(target))\n+                throw new RuntimeException(\"target deleted\");\n+            delete(target);\n+        }\n+        delete(source);\n+\n","filename":"test\/jdk\/java\/nio\/file\/Files\/CopyAndMove.java","additions":22,"deletions":2,"binary":false,"changes":24,"status":"modified"}]}