{"files":[{"patch":"@@ -2802,1 +2802,1 @@\n-                    if(index <= 0) {\n+                    if (index <= 0) {\n","filename":"src\/java.base\/share\/classes\/java\/util\/Formatter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,0 +63,6 @@\n+        int index = getIndex();\n+\n+        if (index == Integer.MIN_VALUE) {\n+           return \"Format argument index value is invalid.\";\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/IllegalFormatArgumentIndexException.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-     * @{code int}, then will return {@code Integer.MIN_VALUE}.\n+     * {@code int}, then will return {@code Integer.MIN_VALUE}.\n","filename":"src\/java.base\/share\/classes\/java\/util\/IllegalFormatPrecisionException.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,98 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8253459\n- *\/\n-\n-import java.util.*;\n-\n-public class ArgumentIndexException {\n-\n-    public static void main(String[] args) {\n-\n-        testZeroIndex();\n-        nonRepresentableIntTest();\n-        testZeroWidthTest();\n-        nonRepresentableWidthTest();\n-        nonRepresentablePrecisionTest();\n-\n-\n-    }\n-\n-    private static void testZeroIndex() {\n-        try {\n-            String r = String.format(\"%0$s\", \"A\", \"B\");\n-        } catch (IllegalFormatException e) {\n-            if(e.getMessage().equals(\"Illegal format argument index = 0\")){\n-                return;\n-            }\n-        }\n-        throw new RuntimeException(\"Expected IllegalFormatException for zero argument index.\");\n-    }\n-\n-    private static void nonRepresentableIntTest() {\n-        try {\n-            String r = String.format(\"%2147483648$s\", \"A\", \"B\");\n-        } catch (IllegalFormatException e) {\n-            if(e.getMessage().equals(\"Illegal format argument index = \" + Integer.MIN_VALUE)){\n-                return;\n-            }\n-        }\n-        throw new RuntimeException(\"Expected IllegalFormatException for non-representable integral index.\");\n-    }\n-\n-    private static void testZeroWidthTest() {\n-        try {\n-            String r = String.format(\"%0s\", \"A\", \"B\");\n-        } catch (IllegalFormatException e) {\n-            \/\/Captures the existing functionality. This is not a parsable format string.\n-            return;\n-        }\n-        throw new RuntimeException(\"Expected IllegalFormatException for zero width.\");\n-    }\n-\n-    private static void nonRepresentableWidthTest() {\n-        try {\n-            String r = String.format(\"%2147483648s\", \"A\", \"B\");\n-        } catch (IllegalFormatWidthException e) {\n-            if (e.getMessage().equals(Integer.toString(Integer.MIN_VALUE))) {\n-                return;\n-            }\n-        }\n-        throw new RuntimeException(\"Expected IllegalFormatException for non-representable width.\");\n-    }\n-\n-    private static void nonRepresentablePrecisionTest() {\n-        try {\n-            String r = String.format(\"%.2147483648s\", \"A\", \"B\");\n-        } catch (IllegalFormatException e) {\n-            if(e.getMessage().equals(Integer.toString(Integer.MIN_VALUE))){\n-                return;\n-            }\n-        }\n-        throw new RuntimeException(\"Expected IllegalFormatException for non-representable precision.\");\n-    }\n-\n-}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/util\/IllegalFormatException\/ArgumentIndexException.java","additions":0,"deletions":98,"binary":false,"changes":98,"status":"deleted"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8253459\n+ * @run testng TestFormatSpecifierBounds\n+ *\/\n+\n+import java.util.*;\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.*;\n+\n+@Test\n+public class TestFormatSpecifierBounds {\n+\n+    public void testZeroIndex() {\n+        IllegalFormatException e = expectThrows(IllegalFormatException.class, () -> {\n+            String r = String.format(\"%0$s\", \"A\", \"B\");\n+        });\n+        assertEquals(e.getMessage(), \"Illegal format argument index = 0\");\n+    }\n+\n+    public void testNonRepresentableIntIndex() {\n+        IllegalFormatException e = expectThrows(IllegalFormatException.class, () -> {\n+            String r = String.format(\"%2147483648$s\", \"A\", \"B\");\n+        });\n+        \/\/assertEquals(e.getMessage(), \"Illegal format argument index = \" + Integer.MIN_VALUE);\n+        assertEquals(e.getMessage(), \"Illegal format argument index. Argument index too large.\");\n+    }\n+\n+    public void testZeroWidth() {\n+        assertThrows(IllegalFormatException.class, () -> {\n+            String r = String.format(\"%0s\", \"A\", \"B\");\n+        });\n+    }\n+\n+    public void testNonRepresentableWidth() {\n+        IllegalFormatException e = expectThrows(IllegalFormatException.class, () -> {\n+            String r = String.format(\"%2147483648s\", \"A\", \"B\");\n+        });\n+        assertEquals(e.getMessage(), Integer.toString(Integer.MIN_VALUE));\n+    }\n+\n+    public void testNonRepresentablePrecision() {\n+        IllegalFormatException e = expectThrows(IllegalFormatException.class, () -> {\n+            String r = String.format(\"%.2147483648s\", \"A\", \"B\");\n+        });\n+        assertEquals(e.getMessage(), Integer.toString(Integer.MIN_VALUE));\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/IllegalFormatException\/TestFormatSpecifierBounds.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"}]}