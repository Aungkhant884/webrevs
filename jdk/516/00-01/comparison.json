{"files":[{"patch":"@@ -29,2 +29,4 @@\n- * Unchecked exception thrown when the argument index is too large or too small\n- * to be represented by an int type or the value is otherwise unsupported.\n+ * Unchecked exception thrown when the argument index is not within the valid\n+ * range of supported argument index values. If an index value isn't\n+ * representable by an {@code int} type, then the value\n+ * {@code Integer.MIN_VALUE} will be used in the exception.\n@@ -51,0 +53,2 @@\n+     * Returns {@code Integer.MIN_VALUE} if the illegal index is not\n+     * representable by an integer type.\n","filename":"src\/java.base\/share\/classes\/java\/util\/IllegalFormatArgumentIndexException.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -31,1 +31,3 @@\n- * otherwise unsupported.\n+ * otherwise unsupported. If the precision is not representable by an\n+ * {@code int} type, then the value {@code Integer.MIN_VALUE} will be used\n+ * in the exception.\n@@ -53,1 +55,2 @@\n-     * Returns the precision\n+     * Returns the precision. If the precision isn't representable by an\n+     * integer type, then will return {@code Integer.MIN_VALUE}.\n","filename":"src\/java.base\/share\/classes\/java\/util\/IllegalFormatPrecisionException.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -30,1 +30,3 @@\n- * than {@code -1} or is otherwise unsupported.\n+ * than {@code -1} or is otherwise unsupported. If a given format width is not\n+ * representable by an {@code int} type, then the value\n+ * {@code Integer.MIN_VALUE} will be used in the exception.\n@@ -52,1 +54,2 @@\n-     * Returns the width\n+     * Returns the width. If the width is not representable by an integer type,\n+     * then returns {@code Integer.MIN_VALUE}.\n","filename":"src\/java.base\/share\/classes\/java\/util\/IllegalFormatWidthException.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"}]}