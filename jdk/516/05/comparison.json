{"files":[{"patch":"@@ -695,1 +695,2 @@\n- * respectively will be thrown.\n+ * respectively will be thrown. Similarly, values of zero for an argument\n+ * index will result in an {@link IllegalFormatException}.\n@@ -701,0 +702,15 @@\n+ * <p> Values of <i>precision<\/i> must be in the range zero to\n+ * {@link Integer#MAX_VALUE}, inclusive, otherwise\n+ * {@link IllegalFormatPrecisionException} is thrown.<\/p>\n+ *\n+ * <p> Values of <i>width<\/i> must be in the range one to\n+ * {@link Integer#MAX_VALUE}, inclusive, otherwise\n+ * {@link IllegalFormatWidthException} will be thrown\n+ * Note that widths can appear to have a negative value, but the negative sign\n+ * is a <i>flag<\/i>. For example in the format string {@code \"%-20s\"} the\n+ * <i>width<\/i> is <i>20<\/i> and the <i>flag<\/i> is \"-\".<\/p>\n+ *\n+ * <p> Values of <i>index<\/i> must be in the range one to\n+ * {@link Integer#MAX_VALUE}, inclusive, otherwise\n+ * {@link IllegalFormatException} will be thrown.<\/p>\n+ *\n@@ -2786,0 +2802,3 @@\n+                    if(index <= 0) {\n+                       throw new IllegalFormatArgumentIndexException(index);\n+                    }\n@@ -2787,1 +2806,1 @@\n-                    assert(false);\n+                    throw new IllegalFormatArgumentIndexException(Integer.MIN_VALUE);\n@@ -2814,1 +2833,1 @@\n-                    assert(false);\n+                    throw new IllegalFormatWidthException(Integer.MIN_VALUE);\n@@ -2829,1 +2848,1 @@\n-                    assert(false);\n+                    throw new IllegalFormatPrecisionException(Integer.MIN_VALUE);\n","filename":"src\/java.base\/share\/classes\/java\/util\/Formatter.java","additions":23,"deletions":4,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.util;\n+\n+\/**\n+ * Unchecked exception thrown when the argument index is not within the valid\n+ * range of supported argument index values. If an index value isn't\n+ * representable by an {@code int} type, then the value\n+ * {@code Integer.MIN_VALUE} will be used in the exception.\n+ *\n+ * @since 16\n+ *\/\n+class IllegalFormatArgumentIndexException extends IllegalFormatException {\n+\n+    @java.io.Serial\n+    private static final long serialVersionUID = 4191767811181838112L;\n+\n+    private final int illegalIndex;\n+\n+    \/**\n+     * Constructs an instance of this class with the specified argument index\n+     * @param index The value of a corresponding illegal argument index.\n+     *\/\n+    public IllegalFormatArgumentIndexException(int index) {\n+        illegalIndex = index;\n+    }\n+\n+    \/**\n+     * Gets the value of the illegal index.\n+     * Returns {@code Integer.MIN_VALUE} if the illegal index is not\n+     * representable by an integer type.\n+     * @return the illegal index value\n+     *\/\n+    public int getIndex() {\n+        return illegalIndex;\n+    }\n+\n+}\n","filename":"src\/java.base\/share\/classes\/java\/util\/IllegalFormatArgumentIndexException.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"},{"patch":"@@ -31,1 +31,3 @@\n- * otherwise unsupported.\n+ * otherwise unsupported. If the precision is not representable by an\n+ * {@code int} type, then the value {@code Integer.MIN_VALUE} will be used\n+ * in the exception.\n@@ -53,1 +55,2 @@\n-     * Returns the precision\n+     * Returns the precision. If the precision isn't representable by an\n+     * integer type, then will return {@code Integer.MIN_VALUE}.\n","filename":"src\/java.base\/share\/classes\/java\/util\/IllegalFormatPrecisionException.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -30,1 +30,3 @@\n- * than {@code -1} or is otherwise unsupported.\n+ * than {@code -1} or is otherwise unsupported. If a given format width is not\n+ * representable by an {@code int} type, then the value\n+ * {@code Integer.MIN_VALUE} will be used in the exception.\n@@ -52,1 +54,2 @@\n-     * Returns the width\n+     * Returns the width. If the width is not representable by an integer type,\n+     * then returns {@code Integer.MIN_VALUE}.\n","filename":"src\/java.base\/share\/classes\/java\/util\/IllegalFormatWidthException.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"}]}