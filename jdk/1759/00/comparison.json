{"files":[{"patch":"@@ -2813,0 +2813,7 @@\n+            if (key == CSS.Attribute.FONT_SIZE && !isDefined(key)) {\n+                \/\/ CSS.FontSize represents a specified value and we need\n+                \/\/ to inherit a computed value so don't resolve percentage\n+                \/\/ value from parent.\n+                return FONT_SIZE_INHERIT;\n+            }\n+\n@@ -3409,0 +3416,9 @@\n+    \/**\n+     * Proxy value to compute inherited {@code font-size}.\n+     *\n+     * @see  <a href=\"https:\/\/www.w3.org\/TR\/CSS2\/cascade.html\">Assigning\n+     *          property values, Cascading, and Inheritance<\/a>\n+     *\/\n+    static final Object FONT_SIZE_INHERIT =\n+            new CSS().new FontSize().parseCssValue(\"100%\");\n+\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/html\/StyleSheet.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,116 @@\n+\/*\n+ * <Copyright>\n+ *\/\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import javax.swing.JEditorPane;\n+import javax.swing.SwingUtilities;\n+import javax.swing.text.GlyphView;\n+import javax.swing.text.View;\n+\n+\/*\n+ * @test\n+ * @key headless\n+ * @bug 8257665\n+ * @summary  Tests inherited font-size with parent percentage specification.\n+ * @run main bug8257665\n+ *\/\n+public class bug8257665 {\n+\n+    private static String text =\n+            \"<html><head><style>\" +\n+            \"body { font-size: 14 }\" +\n+            \"div span { font-size: 150% }\" +\n+            \"span { font-size: 200% }\" +\n+            \"h2, .h2 { font-size: 150% }\" +\n+            \"<\/style><\/head><body>\" +\n+\n+            \"<h2>Foo<\/h2>\" +\n+            \"<div class=h2>Bar<\/div>\" +\n+            \"<ol class=h2><li>Baz<\/li><\/ol>\" +\n+            \"<table class=h2><tr><td>Qux<\/td><\/tr><\/table>\" +\n+            \"<table><thead class=h2><tr><th>Qux<\/th><\/tr><\/thead><\/table>\" +\n+            \"<table><tr class=h2><td>Qux<\/td><\/tr><\/table>\" +\n+            \"<table><tr><td class=h2>Qux<\/td><\/tr><\/table>\" +\n+            \"<div><span>Quux<\/span><\/div>\" +\n+\n+            \"<\/body><\/html>\";\n+\n+    private static int expectedFontSize = 21;\n+    private static int expectedAssertions = 8;\n+\n+    private JEditorPane editor;\n+\n+    public void setUp() {\n+        editor = new JEditorPane();\n+        editor.setContentType(\"text\/html\");\n+        editor.setText(text);\n+\n+        View rootView = editor.getUI().getRootView(editor);\n+        rootView.setSize(Integer.MAX_VALUE, Integer.MAX_VALUE); \/\/ layout\n+    }\n+\n+    public void run() {\n+        int count = forEachTextRun(editor.getUI()\n+                .getRootView(editor), this::assertFontSize);\n+        if (count != expectedAssertions) {\n+            throw new AssertionError(\"assertion count expected [\"\n+                    + expectedAssertions + \"] but found [\" + count + \"]\");\n+        }\n+    }\n+\n+    private int forEachTextRun(View view, Consumer<GlyphView> action) {\n+        int tested = 0;\n+        for (int i = 0; i < view.getViewCount(); i++) {\n+            View child = view.getView(i);\n+            if (child instanceof GlyphView) {\n+                if (child.getElement()\n+                        .getAttributes().getAttribute(\"CR\") == Boolean.TRUE) {\n+                    continue;\n+                }\n+                action.accept((GlyphView) child);\n+                tested += 1;\n+            } else {\n+                tested += forEachTextRun(child, action);\n+            }\n+        }\n+        return tested;\n+    }\n+\n+    private void assertFontSize(GlyphView child) {\n+        printSource(child);\n+        int actualFontSize = child.getFont().getSize();\n+        if (actualFontSize != expectedFontSize) {\n+            throw new AssertionError(\"font size expected [\"\n+                    + expectedFontSize + \"] but found [\" + actualFontSize +\"]\");\n+        }\n+    }\n+\n+    private void printSource(View textRun) {\n+        try {\n+            editor.getEditorKit().write(System.out,\n+                    editor.getDocument(), textRun.getStartOffset(),\n+                    textRun.getEndOffset() - textRun.getStartOffset());\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Throwable {\n+        bug8257665 test = new bug8257665();\n+        AtomicReference<Throwable> failure = new AtomicReference<>();\n+        SwingUtilities.invokeAndWait(() -> {\n+            try {\n+                test.setUp();\n+                test.run();\n+            } catch (Throwable e) {\n+                failure.set(e);\n+            }\n+        });\n+        if (failure.get() != null) {\n+            throw failure.get();\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/javax\/swing\/text\/html\/StyleSheet\/bug8257665.java","additions":116,"deletions":0,"binary":false,"changes":116,"status":"added"}]}