{"files":[{"patch":"@@ -1731,0 +1731,13 @@\n+    \/**\n+     * Proxy value to compute inherited {@code font-size}.\n+     *\n+     * @see  <a href=\"https:\/\/www.w3.org\/TR\/CSS2\/cascade.html\">Assigning\n+     *          property values, Cascading, and Inheritance<\/a>\n+     *\/\n+    private Object fontSizeInherit() {\n+        if (fontSizeInherit == null) {\n+            fontSizeInherit = css.new FontSize().parseCssValue(\"100%\");\n+        }\n+        return fontSizeInherit;\n+    }\n+\n@@ -2813,0 +2826,7 @@\n+            if (key == CSS.Attribute.FONT_SIZE && !isDefined(key)) {\n+                \/\/ CSS.FontSize represents a specified value and we need\n+                \/\/ to inherit a computed value so don't resolve percentage\n+                \/\/ value from parent.\n+                return fontSizeInherit();\n+            }\n+\n@@ -3209,0 +3229,2 @@\n+    private transient Object fontSizeInherit;\n+\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/text\/html\/StyleSheet.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -0,0 +1,156 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Component;\n+import java.awt.Graphics;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.function.Consumer;\n+import javax.imageio.ImageIO;\n+import javax.swing.JEditorPane;\n+import javax.swing.SwingUtilities;\n+import javax.swing.text.GlyphView;\n+import javax.swing.text.View;\n+\n+\/*\n+ * @test\n+ * @bug 8257664\n+ * @summary  Tests inherited font-size with parent percentage specification.\n+ * @run main TestWrongCSSFontSize\n+ *\/\n+public class TestWrongCSSFontSize {\n+\n+    private static String text =\n+            \"<html><head><style>\" +\n+            \"body { font-size: 14 }\" +\n+            \"div span { font-size: 150% }\" +\n+            \"span { font-size: 200% }\" +\n+            \"h2, .h2 { font-size: 150% }\" +\n+            \"<\/style><\/head><body>\" +\n+\n+            \"<h2>Foo<\/h2>\" +\n+            \"<div class=h2>Bar<\/div>\" +\n+            \"<ol class=h2><li>Baz<\/li><\/ol>\" +\n+            \"<table class=h2><tr><td>Qux<\/td><\/tr><\/table>\" +\n+            \"<table><thead class=h2><tr><th>Qux<\/th><\/tr><\/thead><\/table>\" +\n+            \"<table><tr class=h2><td>Qux<\/td><\/tr><\/table>\" +\n+            \"<table><tr><td class=h2>Qux<\/td><\/tr><\/table>\" +\n+            \"<div><span>Quux<\/span><\/div>\" +\n+\n+            \"<\/body><\/html>\";\n+\n+    private static int expectedFontSize = 21;\n+    private static int expectedAssertions = 8;\n+\n+    private JEditorPane editor;\n+\n+    public void setUp() {\n+        editor = new JEditorPane();\n+        editor.setContentType(\"text\/html\");\n+        editor.setText(text);\n+        editor.setSize(editor.getPreferredSize()); \/\/ layout\n+    }\n+\n+    public void run() {\n+        int count = forEachTextRun(editor.getUI()\n+                .getRootView(editor), this::assertFontSize);\n+        if (count != expectedAssertions) {\n+            throw new AssertionError(\"assertion count expected [\"\n+                    + expectedAssertions + \"] but found [\" + count + \"]\");\n+        }\n+    }\n+\n+    private int forEachTextRun(View view, Consumer<GlyphView> action) {\n+        int tested = 0;\n+        for (int i = 0; i < view.getViewCount(); i++) {\n+            View child = view.getView(i);\n+            if (child instanceof GlyphView) {\n+                if (child.getElement()\n+                        .getAttributes().getAttribute(\"CR\") == Boolean.TRUE) {\n+                    continue;\n+                }\n+                action.accept((GlyphView) child);\n+                tested += 1;\n+            } else {\n+                tested += forEachTextRun(child, action);\n+            }\n+        }\n+        return tested;\n+    }\n+\n+    private void assertFontSize(GlyphView child) {\n+        printSource(child);\n+        int actualFontSize = child.getFont().getSize();\n+        if (actualFontSize != expectedFontSize) {\n+            throw new AssertionError(\"font size expected [\"\n+                    + expectedFontSize + \"] but found [\" + actualFontSize +\"]\");\n+        }\n+    }\n+\n+    private void printSource(View textRun) {\n+        try {\n+            editor.getEditorKit().write(System.out,\n+                    editor.getDocument(), textRun.getStartOffset(),\n+                    textRun.getEndOffset() - textRun.getStartOffset());\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    private static void captureImage(Component comp, String path) {\n+        try {\n+            BufferedImage capture = new BufferedImage(comp.getWidth(),\n+                    comp.getHeight(), BufferedImage.TYPE_INT_ARGB);\n+            Graphics g = capture.getGraphics();\n+            comp.paint(g);\n+            g.dispose();\n+\n+            ImageIO.write(capture, \"png\", new File(path));\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Throwable {\n+        TestWrongCSSFontSize test = new TestWrongCSSFontSize();\n+        AtomicReference<Throwable> failure = new AtomicReference<>();\n+        SwingUtilities.invokeAndWait(() -> {\n+            try {\n+                test.setUp();\n+                test.run();\n+            } catch (Throwable e) {\n+                failure.set(e);\n+            } finally {\n+                if (args.length == 1) {\n+                    captureImage(test.editor, args[0]);\n+                }\n+            }\n+        });\n+        if (failure.get() != null) {\n+            throw failure.get();\n+        }\n+    }\n+\n+}\n","filename":"test\/jdk\/javax\/swing\/text\/html\/StyleSheet\/TestWrongCSSFontSize.java","additions":156,"deletions":0,"binary":false,"changes":156,"status":"added"}]}