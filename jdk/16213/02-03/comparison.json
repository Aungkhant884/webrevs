{"files":[{"patch":"@@ -100,0 +100,15 @@\n+     * <p>\n+     * Note: While this method is useful in conjunction with method references,\n+     * care should be taken as code may become incompatible if an overload is\n+     * later added to the method reference. Here is an example for Function\n+     * showing the general problem (String::toLower has several overloads):\n+     * {@snippet :\n+     * \/\/ Works because the type is explicitly declared\n+     * Function<String, String> f0 = String::toLowerCase;\n+     * \/\/ Works because the type is explicitly declared\n+     * Function<String, String> f1 = Function.of(String::toLowerCase);\n+     * \/\/ Works because an override is explicitly picked by the lambda\n+     * var f2 = Function.of((String s) -> s.toLowerCase());\n+     * \/\/ Does NOT work as toLowerCase cannot be resolved\n+     * \/\/ var f3 = Function.of(String::toLowerCase);\n+     * }\n","filename":"src\/java.base\/share\/classes\/java\/util\/function\/BiConsumer.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -89,0 +89,15 @@\n+     * <p>\n+     * Note: While this method is useful in conjunction with method references,\n+     * care should be taken as code may become incompatible if an overload is\n+     * later added to the method reference. Here is an example for Function\n+     * showing the general problem (String::toLower has several overloads):\n+     * {@snippet :\n+     * \/\/ Works because the type is explicitly declared\n+     * Function<String, String> f0 = String::toLowerCase;\n+     * \/\/ Works because the type is explicitly declared\n+     * Function<String, String> f1 = Function.of(String::toLowerCase);\n+     * \/\/ Works because an override is explicitly picked by the lambda\n+     * var f2 = Function.of((String s) -> s.toLowerCase());\n+     * \/\/ Does NOT work as toLowerCase cannot be resolved\n+     * \/\/ var f3 = Function.of(String::toLowerCase);\n+     * }\n","filename":"src\/java.base\/share\/classes\/java\/util\/function\/BiFunction.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -124,0 +124,15 @@\n+     * <p>\n+     * Note: While this method is useful in conjunction with method references,\n+     * care should be taken as code may become incompatible if an overload is\n+     * later added to the method reference. Here is an example for Function\n+     * showing the general problem (String::toLower has several overloads):\n+     * {@snippet :\n+     * \/\/ Works because the type is explicitly declared\n+     * Function<String, String> f0 = String::toLowerCase;\n+     * \/\/ Works because the type is explicitly declared\n+     * Function<String, String> f1 = Function.of(String::toLowerCase);\n+     * \/\/ Works because an override is explicitly picked by the lambda\n+     * var f2 = Function.of((String s) -> s.toLowerCase());\n+     * \/\/ Does NOT work as toLowerCase cannot be resolved\n+     * \/\/ var f3 = Function.of(String::toLowerCase);\n+     * }\n","filename":"src\/java.base\/share\/classes\/java\/util\/function\/BiPredicate.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -93,0 +93,15 @@\n+     * <p>\n+     * Note: While this method is useful in conjunction with method references,\n+     * care should be taken as code may become incompatible if an overload is\n+     * later added to the method reference. Here is an example for Function\n+     * showing the general problem (String::toLower has several overloads):\n+     * {@snippet :\n+     * \/\/ Works because the type is explicitly declared\n+     * Function<String, String> f0 = String::toLowerCase;\n+     * \/\/ Works because the type is explicitly declared\n+     * Function<String, String> f1 = Function.of(String::toLowerCase);\n+     * \/\/ Works because an override is explicitly picked by the lambda\n+     * var f2 = Function.of((String s) -> s.toLowerCase());\n+     * \/\/ Does NOT work as toLowerCase cannot be resolved\n+     * \/\/ var f3 = Function.of(String::toLowerCase);\n+     * }\n","filename":"src\/java.base\/share\/classes\/java\/util\/function\/BinaryOperator.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -85,0 +85,15 @@\n+     * <p>\n+     * Note: While this method is useful in conjunction with method references,\n+     * care should be taken as code may become incompatible if an overload is\n+     * later added to the method reference. Here is an example for Function\n+     * showing the general problem (String::toLower has several overloads):\n+     * {@snippet :\n+     * \/\/ Works because the type is explicitly declared\n+     * Function<String, String> f0 = String::toLowerCase;\n+     * \/\/ Works because the type is explicitly declared\n+     * Function<String, String> f1 = Function.of(String::toLowerCase);\n+     * \/\/ Works because an override is explicitly picked by the lambda\n+     * var f2 = Function.of((String s) -> s.toLowerCase());\n+     * \/\/ Does NOT work as toLowerCase cannot be resolved\n+     * \/\/ var f3 = Function.of(String::toLowerCase);\n+     * }\n","filename":"src\/java.base\/share\/classes\/java\/util\/function\/Consumer.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -117,0 +117,15 @@\n+     * <p>\n+     * Note: While this method is useful in conjunction with method references,\n+     * care should be taken as code may become incompatible if an overload is\n+     * later added to the method reference. Here is an example for Function\n+     * showing the general problem (String::toLower has several overloads):\n+     * {@snippet :\n+     * \/\/ Works because the type is explicitly declared\n+     * Function<String, String> f0 = String::toLowerCase;\n+     * \/\/ Works because the type is explicitly declared\n+     * Function<String, String> f1 = Function.of(String::toLowerCase);\n+     * \/\/ Works because an override is explicitly picked by the lambda\n+     * var f2 = Function.of((String s) -> s.toLowerCase());\n+     * \/\/ Does NOT work as toLowerCase cannot be resolved\n+     * \/\/ var f3 = Function.of(String::toLowerCase);\n+     * }\n","filename":"src\/java.base\/share\/classes\/java\/util\/function\/Function.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -157,0 +157,15 @@\n+     * <p>\n+     * Note: While this method is useful in conjunction with method references,\n+     * care should be taken as code may become incompatible if an overload is\n+     * later added to the method reference. Here is an example for Function\n+     * showing the general problem (String::toLower has several overloads):\n+     * {@snippet :\n+     * \/\/ Works because the type is explicitly declared\n+     * Function<String, String> f0 = String::toLowerCase;\n+     * \/\/ Works because the type is explicitly declared\n+     * Function<String, String> f1 = Function.of(String::toLowerCase);\n+     * \/\/ Works because an override is explicitly picked by the lambda\n+     * var f2 = Function.of((String s) -> s.toLowerCase());\n+     * \/\/ Does NOT work as toLowerCase cannot be resolved\n+     * \/\/ var f3 = Function.of(String::toLowerCase);\n+     * }\n","filename":"src\/java.base\/share\/classes\/java\/util\/function\/Predicate.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -89,1 +89,15 @@\n-     *\n+     * <p>\n+     * Note: While this method is useful in conjunction with method references,\n+     * care should be taken as code may become incompatible if an overload is\n+     * later added to the method reference. Here is an example for Function\n+     * showing the general problem (String::toLower has several overloads):\n+     * {@snippet :\n+     * \/\/ Works because the type is explicitly declared\n+     * Function<String, String> f0 = String::toLowerCase;\n+     * \/\/ Works because the type is explicitly declared\n+     * Function<String, String> f1 = Function.of(String::toLowerCase);\n+     * \/\/ Works because an override is explicitly picked by the lambda\n+     * var f2 = Function.of((String s) -> s.toLowerCase());\n+     * \/\/ Does NOT work as toLowerCase cannot be resolved\n+     * \/\/ var f3 = Function.of(String::toLowerCase);\n+     * }\n","filename":"src\/java.base\/share\/classes\/java\/util\/function\/UnaryOperator.java","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -182,0 +182,13 @@\n+    @Test\n+    void compatibility() {\n+        \/\/ Works because the type is explicitly declared\n+        Function<String, String> f0 = String::toLowerCase;\n+        \/\/ Works because the type is explicitly declared\n+        Function<String, String> f1 = Function.of(String::toLowerCase);\n+        \/\/ Works because an override is explicitly picked by the lambda\n+        var f2 = Function.of((String s) -> s.toLowerCase());\n+        \/\/ Does NOT work as toLowerCase cannot be resolved\n+        \/\/ var f3 = Function.of(String::toLowerCase);\n+    }\n+\n+\n","filename":"test\/jdk\/java\/util\/function\/CapturingFactoriesTest.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"}]}