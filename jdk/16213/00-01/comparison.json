{"files":[{"patch":"@@ -104,2 +104,3 @@\n-    static <T, U> BiConsumer<T, U> of(BiConsumer<T, U> uncaptured) {\n-        return Objects.requireNonNull(uncaptured);\n+    @SuppressWarnings(\"unchecked\")\n+    static <T, U> BiConsumer<T, U> of(BiConsumer<? super T, ? super U> uncaptured) {\n+        return (BiConsumer<T, U>) Objects.requireNonNull(uncaptured);\n","filename":"src\/java.base\/share\/classes\/java\/util\/function\/BiConsumer.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -94,2 +94,3 @@\n-    static <T, U, R> BiFunction<T, U, R> of(BiFunction<T, U, R> uncaptured) {\n-        return Objects.requireNonNull(uncaptured);\n+    @SuppressWarnings(\"unchecked\")\n+    static <T, U, R> BiFunction<T, U, R> of(BiFunction<? super T, ? super U, ? extends R> uncaptured) {\n+        return (BiFunction<T, U, R>) Objects.requireNonNull(uncaptured);\n","filename":"src\/java.base\/share\/classes\/java\/util\/function\/BiFunction.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -128,2 +128,3 @@\n-    static <T, U> BiPredicate<T, U> of(BiPredicate<T, U> uncaptured) {\n-        return Objects.requireNonNull(uncaptured);\n+    @SuppressWarnings(\"unchecked\")\n+    static <T, U> BiPredicate<T, U> of(BiPredicate<? super T, ? super U> uncaptured) {\n+        return (BiPredicate<T, U>) Objects.requireNonNull(uncaptured);\n","filename":"src\/java.base\/share\/classes\/java\/util\/function\/BiPredicate.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -87,2 +87,3 @@\n-    static <T> Consumer<T> of(Consumer<T> uncaptured) {\n-        return Objects.requireNonNull(uncaptured);\n+    @SuppressWarnings(\"unchecked\")\n+    static <T> Consumer<T> of(Consumer<? super T> uncaptured) {\n+        return (Consumer<T>) Objects.requireNonNull(uncaptured);\n","filename":"src\/java.base\/share\/classes\/java\/util\/function\/Consumer.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -121,2 +121,3 @@\n-    static <T, R> Function<T, R> of(Function<T, R> uncaptured) {\n-        return Objects.requireNonNull(uncaptured);\n+    @SuppressWarnings(\"unchecked\")\n+    static <T, R> Function<T, R> of(Function<? super T, ? extends R> uncaptured) {\n+        return (Function<T, R>) Objects.requireNonNull(uncaptured);\n","filename":"src\/java.base\/share\/classes\/java\/util\/function\/Function.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -160,2 +160,3 @@\n-    static <T> Predicate<T> of(Predicate<T> uncaptured) {\n-        return Objects.requireNonNull(uncaptured);\n+    @SuppressWarnings(\"unchecked\")\n+    static <T> Predicate<T> of(Predicate<? super T> uncaptured) {\n+        return (Predicate<T>) Objects.requireNonNull(uncaptured);\n","filename":"src\/java.base\/share\/classes\/java\/util\/function\/Predicate.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-import java.util.logging.Logger;\n@@ -168,0 +167,15 @@\n+\n+    @Test\n+    void coVariants() {\n+        var function = Function.of(Number::toString);                \/\/ Function<Number, String>\n+        Function<Integer, String> sFunction = Function.of(function); \/\/ Function<String, String>\n+        var sFunction2 = Function.of(function);                      \/\/ Function<Number, String>\n+    }\n+\n+    @Test\n+    void contraVariants() {\n+        var function = Function.of(Object::toString);                \/\/ Function<Object, String>\n+        Function<String, String> sFunction = Function.of(function);  \/\/ Function<String, String>\n+        var sFunction2 = Function.of(function);                      \/\/ Function<Object, String>\n+    }\n+\n","filename":"test\/jdk\/java\/util\/function\/CapturingFactoriesTest.java","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"}]}