{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import java.net.URISyntaxException;\n@@ -34,1 +33,0 @@\n-import java.util.HashMap;\n@@ -111,0 +109,2 @@\n+        isCatalogInstance = true;\n+\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/catalog\/CatalogImpl.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,6 @@\n+    \/\/Indicates whether this is the Catalog instance (vs a Catalog entry)\n+    boolean isCatalogInstance = false;\n+\n+    \/\/Indicates a continuous session, should not reset state\n+    boolean shouldKeepState = false;\n+\n@@ -167,0 +173,10 @@\n+\n+    \/**\n+     * Resets the state of the Catalog instance, allowing it to be reused.\n+     *\/\n+    private void resetOnStart() {\n+        if (isCatalogInstance && !shouldKeepState) {\n+            reset();\n+        }\n+    }\n+\n@@ -231,0 +247,1 @@\n+        resetOnStart();\n@@ -299,0 +316,1 @@\n+        resetOnStart();\n@@ -329,0 +347,45 @@\n+    \/**\n+     * Attempt to find a matching entry in the catalog by publicId or systemId.\n+     *\n+     * <p>\n+     * The resolution follows the following rules determined by the prefer\n+     * setting:\n+     *\n+     * prefer \"system\": attempts to resolve with a system entry; attempts to\n+     * resolve with a public entry when only publicId is specified.\n+     *\n+     * prefer \"public\": attempts to resolve with a system entry; attempts to\n+     * resolve with a public entry if no matching system entry is found.\n+     *\n+     * If no match is found, continue searching uri entries.\n+     *\n+     * @param publicId The public identifier of the external entity being\n+     * referenced.\n+     *\n+     * @param systemId The system identifier of the external entity being\n+     * referenced.\n+     *\n+     * @return the resolved systemId if a match is found, null otherwise\n+     *\/\n+    String resolve(String publicId, String systemId) {\n+        String resolvedSystemId = null;\n+        shouldKeepState = true;\n+        if (systemId != null) {\n+            \/*\n+             If a system identifier is specified, it is used no matter how\n+             prefer is set.\n+             *\/\n+            resolvedSystemId = matchSystem(systemId);\n+        }\n+\n+        if (resolvedSystemId == null && publicId != null) {\n+            resolvedSystemId = matchPublic(publicId);\n+        }\n+\n+        if (resolvedSystemId == null && systemId != null) {\n+            resolvedSystemId = matchURI(systemId);\n+        }\n+        shouldKeepState = false;\n+        return resolvedSystemId;\n+    }\n+\n@@ -343,0 +406,1 @@\n+        resetOnStart();\n@@ -402,0 +466,1 @@\n+        resetOnStart();\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/catalog\/GroupEntry.java","additions":66,"deletions":1,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,2 +77,0 @@\n-        String resolvedSystemId = null;\n-\n@@ -81,15 +79,1 @@\n-        if (systemId != null) {\n-            \/*\n-             If a system identifier is specified, it is used no matter how\n-             prefer is set.\n-             *\/\n-            resolvedSystemId = catalog.matchSystem(systemId);\n-        }\n-\n-        if (resolvedSystemId == null && publicId != null) {\n-            resolvedSystemId = catalog.matchPublic(publicId);\n-        }\n-\n-        if (resolvedSystemId == null && systemId != null) {\n-            resolvedSystemId = catalog.matchURI(systemId);\n-        }\n+        String resolvedSystemId = catalog.resolve(publicId, systemId);\n","filename":"src\/java.xml\/share\/classes\/javax\/xml\/catalog\/Util.java","additions":2,"deletions":18,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -0,0 +1,126 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package catalog;\n+\n+import java.net.URI;\n+import javax.xml.catalog.Catalog;\n+import javax.xml.catalog.CatalogFeatures;\n+import javax.xml.catalog.CatalogManager;\n+import org.testng.Assert;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+\/*\n+ * @test\n+ * @bug 8253569\n+ * @library \/javax\/xml\/jaxp\/libs \/javax\/xml\/jaxp\/unittest\n+ * @run testng catalog.CatalogReuseTest\n+ * @summary Verifies that a catalog can be reused.\n+ *\/\n+public class CatalogReuseTest extends CatalogSupportBase {\n+    static final CatalogFeatures FEATURES_STRICT = CatalogFeatures.builder().\n+            with(CatalogFeatures.Feature.RESOLVE, \"strict\").build();\n+\n+    \/*\n+        DataProvider: reuses a catalog. The length of the URIs is in descending order.\n+        Data columns: catalog, uri, expected\n+     *\/\n+    @DataProvider(name = \"dataWithCatalogD\")\n+    public Object[][] dataWithCatalogD() {\n+        Catalog c = getCatalog();\n+        return new Object[][]{\n+            {c, \"http:\/\/entailments\/example.org\/A\/B\/derived.ttl\", \"derived\/A\/B\/derived.ttl\"},\n+            {c, \"http:\/\/example.org\/A\/B.owl\", \"sources\/A\/B.owl\"},\n+         };\n+    }\n+\n+    \/*\n+        DataProvider: reuses a catalog. The length of the URIs is in ascending order.\n+        Data columns: catalog, uri, expected\n+     *\/\n+    @DataProvider(name = \"dataWithCatalogA\")\n+    public Object[][] dataWithCatalogA() {\n+        Catalog c = getCatalog();\n+        return new Object[][]{\n+            {c, \"http:\/\/example.org\/A\/B.owl\", \"sources\/A\/B.owl\"},\n+            {c, \"http:\/\/entailments\/example.org\/A\/B\/derived.ttl\", \"derived\/A\/B\/derived.ttl\"},\n+         };\n+    }\n+\n+    \/*\n+        DataProvider: provides no catalog. A new catalog will be created for each test.\n+        Data columns: uri, expected\n+     *\/\n+    @DataProvider(name = \"dataWithoutCatalog\")\n+    public Object[][] dataWithoutCatalog() {\n+        return new Object[][]{\n+            {\"http:\/\/entailments\/example.org\/A\/B\/derived.ttl\", \"derived\/A\/B\/derived.ttl\"},\n+            {\"http:\/\/example.org\/A\/B.owl\", \"sources\/A\/B.owl\"},\n+         };\n+    }\n+\n+    \/*\n+     * Initializing fields\n+     *\/\n+    @BeforeClass\n+    public void setUpClass() throws Exception {\n+        super.setUp();\n+    }\n+\n+    \/*\n+     * Verifies that a Catalog object can be reused, that no state data are\n+     * in the way of a subsequent matching attempt.\n+    *\/\n+    @Test(dataProvider = \"dataWithCatalogD\")\n+    public void testD(Catalog c, String uri, String expected) throws Exception {\n+        String m = c.matchURI(uri);\n+        Assert.assertTrue(m.endsWith(expected), \"Expected: \" + expected);\n+    }\n+\n+    \/*\n+     * Verifies that a Catalog object can be reused.\n+    *\/\n+    @Test(dataProvider = \"dataWithCatalogA\")\n+    public void testA(Catalog c, String uri, String expected) throws Exception {\n+        String m = c.matchURI(uri);\n+        Assert.assertTrue(m.endsWith(expected), \"Expected: \" + expected);\n+    }\n+\n+    \/*\n+     * Verifies that a match is found in a newly created Catalog.\n+    *\/\n+    @Test(dataProvider = \"dataWithoutCatalog\")\n+    public void testNew(String uri, String expected) throws Exception {\n+        Catalog c = getCatalog();\n+        String m = c.matchURI(uri);\n+        Assert.assertTrue(m.endsWith(expected), \"Expected: \" + expected);\n+\n+    }\n+\n+    private Catalog getCatalog() {\n+        String uri = \"file:\/\/\" + slash + filepath + \"\/catalogReuse.xml\";\n+        Catalog c = CatalogManager.catalog(FEATURES_STRICT, uri != null? URI.create(uri) : null);\n+        return c;\n+    }\n+}\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/catalog\/CatalogReuseTest.java","additions":126,"deletions":0,"binary":false,"changes":126,"status":"added"},{"patch":"@@ -0,0 +1,5 @@\n+<?xml version='1.0'?>\n+<catalog xmlns=\"urn:oasis:names:tc:entity:xmlns:xml:catalog\" prefer=\"public\">\n+    <rewriteURI uriStartString=\"http:\/\/entailments\/example.org\/\" rewritePrefix=\"derived\/\"\/>\n+    <rewriteURI uriStartString=\"http:\/\/example.org\/\" rewritePrefix=\"sources\/\"\/>\n+<\/catalog>\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/catalog\/catalogReuse.xml","additions":5,"deletions":0,"binary":false,"changes":5,"status":"added"}]}