{"files":[{"patch":"@@ -29,6 +29,1 @@\n-import java.util.Map;\n-import java.util.List;\n-import java.util.HashMap;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.LinkedHashMap;\n+import java.util.*;\n@@ -84,2 +79,2 @@\n-    private Map<Integer, SNIServerName> sniNames = null;\n-    private Map<Integer, SNIMatcher> sniMatchers = null;\n+    private List<SNIServerName> sniNames = null;        \/\/ immutable list\n+    private Collection<SNIMatcher> sniMatchers = null;  \/\/ immutable collection\n@@ -334,8 +329,15 @@\n-        if (serverNames != null) {\n-            if (!serverNames.isEmpty()) {\n-                sniNames = new LinkedHashMap<>(serverNames.size());\n-                for (SNIServerName serverName : serverNames) {\n-                    if (sniNames.put(serverName.getType(),\n-                                                serverName) != null) {\n-                        throw new IllegalArgumentException(\n-                                    \"Duplicated server name of type \" +\n+        if (this.sniNames == serverNames) {\n+            return;\n+        }\n+\n+        if (serverNames == null) {\n+            sniNames = null;\n+        } else if (serverNames.isEmpty()) {\n+            sniNames = Collections.emptyList();\n+        } else {\n+            List<Integer> sniTypes = new ArrayList<>(serverNames.size());\n+            List<SNIServerName> sniValues = new ArrayList<>(serverNames.size());\n+            for (SNIServerName serverName : serverNames) {\n+                if (sniTypes.contains(serverName.getType())) {\n+                    throw new IllegalArgumentException(\n+                            \"Duplicated server name of type \" +\n@@ -343,1 +345,3 @@\n-                    }\n+                } else {\n+                    sniTypes.add(serverName.getType());\n+                    sniValues.add(serverName);\n@@ -345,2 +349,0 @@\n-            } else {\n-                sniNames = Collections.<Integer, SNIServerName>emptyMap();\n@@ -348,2 +350,2 @@\n-        } else {\n-            sniNames = null;\n+\n+            sniNames = Collections.unmodifiableList(sniValues);\n@@ -391,9 +393,1 @@\n-        if (sniNames != null) {\n-            if (!sniNames.isEmpty()) {\n-                return List.copyOf(sniNames.values());\n-            } else {\n-                return Collections.<SNIServerName>emptyList();\n-            }\n-        }\n-\n-        return null;\n+        return sniNames;\n@@ -427,10 +421,19 @@\n-        if (matchers != null) {\n-            if (!matchers.isEmpty()) {\n-                sniMatchers = new HashMap<>(matchers.size());\n-                for (SNIMatcher matcher : matchers) {\n-                    if (sniMatchers.put(matcher.getType(),\n-                                                matcher) != null) {\n-                        throw new IllegalArgumentException(\n-                                    \"Duplicated server name of type \" +\n-                                    matcher.getType());\n-                    }\n+        if (this.sniMatchers == matchers) {\n+            return;\n+        }\n+\n+        if (matchers == null) {\n+            this.sniMatchers = null;\n+        } else if (matchers.isEmpty()) {\n+            sniMatchers = Collections.emptyList();\n+        } else {\n+            List<Integer> matcherTypes = new ArrayList<>(matchers.size());\n+            List<SNIMatcher> matcherValues = new ArrayList<>(matchers.size());\n+            for (SNIMatcher matcher : matchers) {\n+                if (matcherTypes.contains(matcher.getType())) {\n+                    throw new IllegalArgumentException(\n+                                \"Duplicated server name of type \" +\n+                                matcher.getType());\n+                } else {\n+                    matcherTypes.add(matcher.getType());\n+                    matcherValues.add(matcher);\n@@ -438,2 +441,0 @@\n-            } else {\n-                sniMatchers = Collections.<Integer, SNIMatcher>emptyMap();\n@@ -441,2 +442,2 @@\n-        } else {\n-            sniMatchers = null;\n+\n+            this.sniMatchers = Collections.unmodifiableList(matcherValues);\n@@ -465,9 +466,1 @@\n-        if (sniMatchers != null) {\n-            if (!sniMatchers.isEmpty()) {\n-                return List.copyOf(sniMatchers.values());\n-            } else {\n-                return Collections.<SNIMatcher>emptyList();\n-            }\n-        }\n-\n-        return null;\n+        return sniMatchers;\n","filename":"src\/java.base\/share\/classes\/javax\/net\/ssl\/SSLParameters.java","additions":46,"deletions":53,"binary":false,"changes":99,"status":"modified"}]}