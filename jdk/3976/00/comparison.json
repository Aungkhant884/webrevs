{"files":[{"patch":"@@ -187,1 +187,1 @@\n-        synchronized (loadedLibraryNames) {\n+        synchronized (getNativeLibraryLock(name)) {\n@@ -204,3 +204,4 @@\n-             * We use a static stack to hold the list of libraries we are\n-             * loading because this can happen only when called by the\n-             * same thread because this block is synchronous.\n+             * We use a static thread-local stack to hold the list of libraries we are\n+             * loading, so that {@code getFromClass()} method would report\n+             * the correct {@code fromClass} to the calling JNI_OnLoad\/JNI_OnUnload.\n+             * Since the stack is thread-local, each thread maintains its own stack.\n@@ -209,2 +210,3 @@\n-             * immediately return success; otherwise, we raise\n-             * UnsatisfiedLinkError.\n+             * immediately return success to avoid infinite recursion;\n+             * if the pending load is from a different class loader,\n+             * we raise UnsatisfiedLinkError.\n@@ -212,1 +214,1 @@\n-            for (NativeLibraryImpl lib : nativeLibraryContext) {\n+            for (NativeLibraryImpl lib : nativeLibraryContext()) {\n@@ -225,1 +227,1 @@\n-            nativeLibraryContext.push(lib);\n+            nativeLibraryContext().push(lib);\n@@ -244,1 +246,1 @@\n-                nativeLibraryContext.pop();\n+                nativeLibraryContext().pop();\n@@ -297,1 +299,1 @@\n-        synchronized (loadedLibraryNames) {\n+        synchronized (getNativeLibraryLock(lib.name())) {\n@@ -431,1 +433,1 @@\n-            synchronized (loadedLibraryNames) {\n+            synchronized (getNativeLibraryLock(name)) {\n@@ -436,1 +438,1 @@\n-                nativeLibraryContext.push(UNLOADER);\n+                nativeLibraryContext().push(UNLOADER);\n@@ -440,1 +442,1 @@\n-                    nativeLibraryContext.pop();\n+                    nativeLibraryContext().pop();\n@@ -459,3 +461,24 @@\n-    \/\/ This also serves as the lock to obtain nativeLibraries\n-    \/\/ and write to nativeLibraryContext.\n-    private static final Set<String> loadedLibraryNames = new HashSet<>();\n+    private static final Set<String> loadedLibraryNames =\n+            ConcurrentHashMap.newKeySet();\n+\n+    \/\/ Maps native library name to the corresponding lock object\n+    private static final Map<String, Object> nativeLibraryLockMap =\n+            new ConcurrentHashMap<>();\n+\n+    private static Object getNativeLibraryLock(String libraryName) {\n+        Object newLock = new Object();\n+        Object lock = nativeLibraryLockMap.putIfAbsent(libraryName, newLock);\n+        if (lock == null) {\n+            lock = newLock;\n+        }\n+        return lock;\n+    }\n+\n+    \/\/ thread local native libraries stack\n+    private static final ThreadLocal<Deque<NativeLibraryImpl>> nativeLibraryThreadContext =\n+            new ThreadLocal<Deque<NativeLibraryImpl>>() {\n+                @Override\n+                protected Deque<NativeLibraryImpl> initialValue() {\n+                    return new ArrayDeque<>(8);\n+                }\n+            };\n@@ -464,1 +487,3 @@\n-    private static Deque<NativeLibraryImpl> nativeLibraryContext = new ArrayDeque<>(8);\n+    private static Deque<NativeLibraryImpl> nativeLibraryContext() {\n+        return nativeLibraryThreadContext.get();\n+    }\n@@ -469,1 +494,1 @@\n-        if (nativeLibraryContext.isEmpty()) { \/\/ only default library\n+        if (nativeLibraryContext().isEmpty()) { \/\/ only default library\n@@ -472,1 +497,1 @@\n-        return nativeLibraryContext.peek().fromClass;\n+        return nativeLibraryContext().peek().fromClass;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/loader\/NativeLibraries.java","additions":44,"deletions":19,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, BELLSOFT. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.File;\n+\n+\/*\n+ * Class1 loads a native library that calls ClassLoader.findClass in JNI_OnLoad.\n+ * Class1 runs concurrently with another thread that opens a signed jar file.\n+ *\/\n+class Class1 {\n+    static {\n+        System.loadLibrary(\"loadLibraryDeadlock\");\n+        System.out.println(\"Signed jar loaded from native library.\");\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/loadLibraryDeadlock\/Class1.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, BELLSOFT. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * LoadLibraryDeadlock class triggers the deadlock between the two\n+ * lock objects - ZipFile object and ClassLoader.loadedLibraryNames hashmap.\n+ * Thread #2 loads a signed jar which leads to acquiring the lock objects in\n+ * natural order (ZipFile then HashMap) - loading a signed jar may involve\n+ * Providers initialization. Providers may load native libraries.\n+ * Thread #1 acquires the locks in reverse order, first entering loadLibrary\n+ * called from Class1, then acquiring ZipFile during the search for a class\n+ * triggered from JNI.\n+ *\/\n+import java.security.*;\n+import java.lang.*;\n+\n+public class LoadLibraryDeadlock {\n+\n+    public static void main(String[] args) {\n+        Thread t1 = new Thread() {\n+            public void run() {\n+                try {\n+                    \/\/ an instance of unsigned class that loads a native library\n+                    Class c1 = Class.forName(\"Class1\");\n+                    Object o = c1.newInstance();\n+                } catch (ClassNotFoundException |\n+                         InstantiationException |\n+                         IllegalAccessException ignore) {\n+                    System.out.println(\"Class Class1 not found.\");\n+                }\n+            }\n+        };\n+        Thread t2 = new Thread() {\n+            public void run() {\n+                try {\n+                    \/\/ load a class from a signed jar, which locks the JarFile\n+                    Class c2 = Class.forName(\"p.Class2\");\n+                    System.out.println(\"Signed jar loaded.\");\n+                } catch (ClassNotFoundException ignore) {\n+                    System.out.println(\"Class Class2 not found.\");\n+                }\n+            }\n+        };\n+        t2.start();\n+        t1.start();\n+        try {\n+            t1.join();\n+            t2.join();\n+        } catch (InterruptedException ignore) {\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/loadLibraryDeadlock\/LoadLibraryDeadlock.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,241 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, BELLSOFT. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8266310\n+ * @summary deadlock while loading the JNI code\n+ * @library \/test\/lib\n+ * @build LoadLibraryDeadlock Class1 p.Class2\n+ * @run main\/othervm\/native -Xcheck:jni TestLoadLibraryDeadlock\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.JDKToolFinder;\n+import jdk.test.lib.process.*;\n+\n+import java.lang.ProcessBuilder;\n+import java.lang.Process;\n+import java.io.*;\n+import java.util.*;\n+import java.util.concurrent.*;\n+import java.nio.charset.StandardCharsets;\n+\n+public class TestLoadLibraryDeadlock {\n+\n+    private static final String KEYSTORE = \"keystore.jks\";\n+    private static final String STOREPASS = \"changeit\";\n+    private static final String KEYPASS = \"changeit\";\n+    private static final String ALIAS = \"test\";\n+    private static final String DNAME = \"CN=test\";\n+    private static final String VALIDITY = \"366\";\n+\n+    private static String testClassPath = System.getProperty(\"test.classes\");\n+    private static String testLibraryPath = System.getProperty(\"test.nativepath\");\n+    private static String classPathSeparator = System.getProperty(\"path.separator\");\n+\n+    private static OutputAnalyzer runCommand(File workingDirectory, String... commands) throws Throwable {\n+        ProcessBuilder pb = new ProcessBuilder(commands);\n+        pb.directory(workingDirectory);\n+        System.out.println(\"COMMAND: \" + String.join(\" \", commands));\n+        return ProcessTools.executeProcess(pb);\n+    }\n+\n+    private static OutputAnalyzer runCommandInTestClassPath(String... commands) throws Throwable {\n+        return runCommand(new File(testClassPath), commands);\n+    }\n+\n+    private static OutputAnalyzer genKey() throws Throwable {\n+        runCommandInTestClassPath(\"rm\", \"-f\", KEYSTORE);\n+        String keytool = JDKToolFinder.getJDKTool(\"keytool\");\n+        return runCommandInTestClassPath(keytool,\n+                \"-storepass\", STOREPASS,\n+                \"-keypass\", KEYPASS,\n+                \"-keystore\", KEYSTORE,\n+                \"-keyalg\", \"rsa\", \"-keysize\", \"2048\",\n+                \"-genkeypair\",\n+                \"-alias\", ALIAS,\n+                \"-dname\", DNAME,\n+                \"-validity\", VALIDITY\n+        );\n+    }\n+\n+    private static OutputAnalyzer createJar(String outputJar, String... classes) throws Throwable {\n+        String jar = JDKToolFinder.getJDKTool(\"jar\");\n+        List<String> commands = new ArrayList<String>();\n+        Collections.addAll(commands, jar, \"cvf\", outputJar);\n+        Collections.addAll(commands, classes);\n+        return runCommandInTestClassPath(commands.toArray(new String[0]));\n+    }\n+\n+    private static OutputAnalyzer signJar(String jarToSign) throws Throwable {\n+        String jarsigner = JDKToolFinder.getJDKTool(\"jarsigner\");\n+        return runCommandInTestClassPath(jarsigner,\n+                \"-keystore\", KEYSTORE,\n+                \"-storepass\", STOREPASS,\n+                jarToSign, ALIAS\n+        );\n+    }\n+\n+    private static Process runJavaCommand(String... command) throws Throwable {\n+        String java = JDKToolFinder.getJDKTool(\"java\");\n+        List<String> commands = new ArrayList<String>();\n+        Collections.addAll(commands, java);\n+        Collections.addAll(commands, command);\n+        System.out.println(\"COMMAND: \" + String.join(\" \", commands));\n+        return new ProcessBuilder(commands.toArray(new String[0]))\n+                .redirectErrorStream(true)\n+                .directory(new File(testClassPath))\n+                .start();\n+    }\n+\n+    private static OutputAnalyzer jcmd(long pid, String command) throws Throwable {\n+        String jcmd = JDKToolFinder.getJDKTool(\"jcmd\");\n+        return runCommandInTestClassPath(jcmd,\n+                String.valueOf(pid),\n+                command\n+        );\n+    }\n+\n+    private static String readAvailable(final InputStream is) throws Throwable {\n+        final List<String> list = Collections.synchronizedList(new ArrayList<String>());\n+        ExecutorService executor = Executors.newFixedThreadPool(2);\n+        Future<String> future = executor.submit(new Callable<String>() {\n+            public String call() {\n+                String result = new String();\n+                BufferedReader reader = new BufferedReader(new InputStreamReader(is));\n+                try {\n+                    while(true) {\n+                        String s = reader.readLine();\n+                        if (s.length() > 0) {\n+                            list.add(s);\n+                            result += s + \"\\n\";\n+                        }\n+                    }\n+                } catch (IOException ignore) {}\n+                return result;\n+            }\n+        });\n+        try {\n+            return future.get(1000, TimeUnit.MILLISECONDS);\n+        } catch (Exception ignoreAll) {\n+            future.cancel(true);\n+            return String.join(\"\\n\", list);\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Throwable {\n+        genKey()\n+                .shouldHaveExitValue(0);\n+\n+        runCommandInTestClassPath(\"rm\", \"-f\", \"*.jar\")\n+                .shouldHaveExitValue(0);\n+\n+        createJar(\"a.jar\",\n+                \"LoadLibraryDeadlock.class\",\n+                \"LoadLibraryDeadlock$1.class\",\n+                \"LoadLibraryDeadlock$2.class\")\n+                .shouldHaveExitValue(0);\n+\n+        createJar(\"b.jar\",\n+                \"Class1.class\")\n+                .shouldHaveExitValue(0);\n+\n+        createJar(\"c.jar\",\n+                \"p\/Class2.class\")\n+                .shouldHaveExitValue(0);\n+\n+        signJar(\"c.jar\")\n+                .shouldHaveExitValue(0);\n+\n+        \/\/ load trigger class\n+        Process process = runJavaCommand(\"-cp\",\n+                \"a.jar\" + classPathSeparator +\n+                \"b.jar\" + classPathSeparator +\n+                \"c.jar\",\n+                \"-Djava.library.path=\" + testLibraryPath,\n+                \"LoadLibraryDeadlock\");\n+\n+        \/\/ wait for a while to grab some output\n+        process.waitFor(5, TimeUnit.SECONDS);\n+\n+        \/\/ dump available output\n+        String output = readAvailable(process.getInputStream());\n+        OutputAnalyzer outputAnalyzer = new OutputAnalyzer(output);\n+        outputAnalyzer\n+                .asLines().stream()\n+                .forEach(s -> System.out.println(s));\n+\n+        \/\/ if the process is still running, get the thread dump\n+        OutputAnalyzer outputAnalyzerJcmd = jcmd(process.pid(), \"Thread.print\");\n+        outputAnalyzerJcmd\n+                .asLines().stream()\n+                .forEach(s -> System.out.println(s));\n+\n+        Asserts.assertTrue(outputAnalyzerJcmd\n+                .asLines().stream()\n+                .filter(s -> s.contains(\"Java-level deadlock\"))\n+                .count() == 0,\n+                \"Found a deadlock.\");\n+\n+        \/\/ if no deadlock, make sure all components have been loaded\n+        Asserts.assertTrue(outputAnalyzer\n+                .asLines().stream()\n+                .filter(s -> s.contains(\"Class Class1 not found.\"))\n+                .count() == 0,\n+                \"Unable to load class. Class1 not found.\");\n+\n+        Asserts.assertTrue(outputAnalyzer\n+                .asLines().stream()\n+                .filter(s -> s.contains(\"Class Class2 not found.\"))\n+                .count() == 0,\n+                \"Unable to load class. Class2 not found.\");\n+\n+        Asserts.assertTrue(outputAnalyzer\n+                .asLines().stream()\n+                .filter(s -> s.contains(\"Native library loaded.\"))\n+                .count() > 0,\n+                \"Unable to load native library.\");\n+\n+        Asserts.assertTrue(outputAnalyzer\n+                .asLines().stream()\n+                .filter(s -> s.contains(\"Signed jar loaded.\"))\n+                .count() > 0,\n+                \"Unable to load signed jar.\");\n+\n+        Asserts.assertTrue(outputAnalyzer\n+                .asLines().stream()\n+                .filter(s -> s.contains(\"Signed jar loaded from native library.\"))\n+                .count() > 0,\n+                \"Unable to load signed jar from native library.\");\n+\n+        if (!process.waitFor(5, TimeUnit.SECONDS)) {\n+            \/\/ if process is still frozen, fail the test even though\n+            \/\/ the \"deadlock\" text hasn't been found\n+            process.destroyForcibly();\n+            Asserts.assertTrue(process.waitFor() == 0,\n+                    \"Process frozen.\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/loadLibraryDeadlock\/TestLoadLibraryDeadlock.java","additions":241,"deletions":0,"binary":false,"changes":241,"status":"added"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, BELLSOFT. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <stdio.h>\n+#include \"jni.h\"\n+\n+\/*\n+ * JNI library that loads an arbitrary class from a (signed) jar.\n+ * This triggers the search in jars, and the lock in ZipFile is being acquired\n+ * as a result.\n+ *\/\n+JNIEXPORT jint JNICALL\n+JNI_OnLoad(JavaVM *vm, void *reserved)\n+{\n+    JNIEnv *env;\n+    jclass cl;\n+\n+    printf(\"Native library loaded.\\n\");\n+    fflush(stdout);\n+\n+    if ((*vm)->GetEnv(vm, (void**) &env, JNI_VERSION_1_2) != JNI_OK) {\n+        return JNI_EVERSION; \/* JNI version not supported *\/\n+    }\n+\n+    \/\/ find any class which triggers the search in jars\n+    cl = (*env)->FindClass(env, \"p\/Class2\");\n+\n+    return JNI_VERSION_1_2;\n+}\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/loadLibraryDeadlock\/libloadLibraryDeadlock.c","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, BELLSOFT. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * Class2 is loaded from Thread #2 that checks jar signature and from\n+ * Thread #1 that loads a native library.\n+ *\/\n+package p;\n+\n+class Class2 {}\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/loadLibraryDeadlock\/p\/Class2.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"}]}