{"files":[{"patch":"@@ -44,1 +44,1 @@\n-                    Class c1 = Class.forName(\"Class1\");\n+                    Class<?> c1 = Class.forName(\"Class1\");\n@@ -58,1 +58,1 @@\n-                    Class c2 = Class.forName(\"p.Class2\");\n+                    Class<?> c2 = Class.forName(\"p.Class2\");\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/loadLibraryDeadlock\/LoadLibraryDeadlock.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+import java.util.spi.ToolProvider;\n@@ -49,0 +50,3 @@\n+    private static final ToolProvider JAR = ToolProvider.findFirst(\"jar\")\n+            .orElseThrow(() -> new RuntimeException(\"ToolProvider for jar not found\"));\n+\n@@ -87,6 +91,9 @@\n-    private static OutputAnalyzer createJar(String outputJar, String... classes) throws Throwable {\n-        String jar = JDKToolFinder.getJDKTool(\"jar\");\n-        List<String> commands = new ArrayList<>();\n-        Collections.addAll(commands, jar, \"cvf\", outputJar);\n-        Collections.addAll(commands, classes);\n-        return runCommandInTestClassPath(commands.toArray(new String[0]));\n+    private static void createJar(String outputJar, String... classes) throws Throwable {\n+        List<String> args = new ArrayList<>();\n+        Collections.addAll(args, \"cvf\", Paths.get(testClassPath, outputJar).toString());\n+        for (String c : classes) {\n+            Collections.addAll(args, \"-C\", testClassPath, c);\n+        }\n+        if (JAR.run(System.out, System.err, args.toArray(new String[0])) != 0) {\n+            throw new RuntimeException(\"jar operation failed\");\n+        }\n@@ -178,2 +185,1 @@\n-                \"LoadLibraryDeadlock$2.class\")\n-                .shouldHaveExitValue(0);\n+                \"LoadLibraryDeadlock$2.class\");\n@@ -182,2 +188,1 @@\n-                \"Class1.class\")\n-                .shouldHaveExitValue(0);\n+                \"Class1.class\");\n@@ -186,2 +191,1 @@\n-                \"p\/Class2.class\")\n-                .shouldHaveExitValue(0);\n+                \"p\/Class2.class\");\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/loadLibraryDeadlock\/TestLoadLibraryDeadlock.java","additions":16,"deletions":12,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-                Class clazz = findLoadedClass(name);\n+                Class<?> clazz = findLoadedClass(name);\n@@ -149,1 +149,1 @@\n-        WeakReference<Class> wClass = new WeakReference<>(clazz);\n+        WeakReference<Class<?>> wClass = new WeakReference<>(clazz);\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/loadLibraryUnload\/LoadLibraryUnload.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,5 +37,2 @@\n-        try {\n-            System.loadLibrary(\"loadLibraryUnload\");\n-            System.out.println(\"Native library loaded from Class1.\");\n-        } catch (Exception ignore) {\n-        }\n+        System.loadLibrary(\"loadLibraryUnload\");\n+        System.out.println(\"Native library loaded from Class1.\");\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/loadLibraryUnload\/p\/Class1.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"}]}