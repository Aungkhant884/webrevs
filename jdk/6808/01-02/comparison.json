{"files":[{"patch":"@@ -1,216 +0,0 @@\n-\/*\n- * Copyright (C) 2021 THL A29 Limited, a Tencent company. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package compiler.vectorapi;\n-\n-import java.util.Random;\n-\n-import jdk.incubator.vector.VectorSpecies;\n-import jdk.incubator.vector.ByteVector;\n-import jdk.incubator.vector.DoubleVector;\n-import jdk.incubator.vector.FloatVector;\n-import jdk.incubator.vector.IntVector;\n-import jdk.incubator.vector.LongVector;\n-import jdk.incubator.vector.ShortVector;\n-import jdk.incubator.vector.VectorMask;\n-import jdk.test.lib.Utils;\n-\n-import org.testng.annotations.Test;\n-\n-\/**\n- * @test\n- * @bug 8278584\n- * @library \/test\/lib\n- * @summary Test the codegen for VectorMask.fromLong\n- * @modules jdk.incubator.vector\n- *\n- * @run testng\/othervm -XX:CompileThreshold=100 compiler.vectorapi.VectorLongToMaskTest\n- *\/\n-\n-\n-public class VectorLongToMaskTest{\n-\n-    private static final int NUM_ITER = 5000;\n-    private static final Random rd = Utils.getRandomInstance();\n-\n-    private static VectorMask<Byte>    bmask;\n-    private static VectorMask<Short>   smask;\n-    private static VectorMask<Integer> imask;\n-    private static VectorMask<Long>    lmask;\n-    private static VectorMask<Float>   fmask;\n-    private static VectorMask<Double>  dmask;\n-\n-    public static void testByte64(long val) {\n-        VectorSpecies<Byte> SPECIES = ByteVector.SPECIES_64;\n-        bmask = VectorMask.fromLong(SPECIES, val);\n-    }\n-\n-    public static void testByte128(long val) {\n-        VectorSpecies<Byte> SPECIES = ByteVector.SPECIES_128;\n-        bmask = VectorMask.fromLong(SPECIES, val);\n-    }\n-\n-    public static void testByte256(long val) {\n-        VectorSpecies<Byte> SPECIES = ByteVector.SPECIES_256;\n-        bmask = VectorMask.fromLong(SPECIES, val);\n-    }\n-\n-    public static void testByte512(long val) {\n-        VectorSpecies<Byte> SPECIES = ByteVector.SPECIES_512;\n-        bmask = VectorMask.fromLong(SPECIES, val);\n-    }\n-\n-    public static void testShort64(long val) {\n-        VectorSpecies<Short> SPECIES = ShortVector.SPECIES_64;\n-        smask = VectorMask.fromLong(SPECIES, val);\n-    }\n-\n-    public static void testShort128(long val) {\n-        VectorSpecies<Short> SPECIES = ShortVector.SPECIES_128;\n-        smask = VectorMask.fromLong(SPECIES, val);\n-    }\n-\n-    public static void testShort256(long val) {\n-        VectorSpecies<Short> SPECIES = ShortVector.SPECIES_256;\n-        smask = VectorMask.fromLong(SPECIES, val);\n-    }\n-\n-    public static void testShort512(long val) {\n-        VectorSpecies<Short> SPECIES = ShortVector.SPECIES_512;\n-        smask = VectorMask.fromLong(SPECIES, val);\n-    }\n-\n-    public static void testInteger64(long val) {\n-        VectorSpecies<Integer> SPECIES = IntVector.SPECIES_64;\n-        imask = VectorMask.fromLong(SPECIES, val);\n-    }\n-\n-    public static void testInteger128(long val) {\n-        VectorSpecies<Integer> SPECIES = IntVector.SPECIES_128;\n-        imask = VectorMask.fromLong(SPECIES, val);\n-    }\n-\n-    public static void testInteger256(long val) {\n-        VectorSpecies<Integer> SPECIES = IntVector.SPECIES_256;\n-        imask = VectorMask.fromLong(SPECIES, val);\n-    }\n-\n-    public static void testInteger512(long val) {\n-        VectorSpecies<Integer> SPECIES = IntVector.SPECIES_512;\n-        imask = VectorMask.fromLong(SPECIES, val);\n-    }\n-\n-    public static void testLong64(long val) {\n-        VectorSpecies<Long> SPECIES = LongVector.SPECIES_64;\n-        lmask = VectorMask.fromLong(SPECIES, val);\n-    }\n-\n-    public static void testLong128(long val) {\n-        VectorSpecies<Long> SPECIES = LongVector.SPECIES_128;\n-        lmask = VectorMask.fromLong(SPECIES, val);\n-    }\n-\n-    public static void testLong256(long val) {\n-        VectorSpecies<Long> SPECIES = LongVector.SPECIES_256;\n-        lmask = VectorMask.fromLong(SPECIES, val);\n-    }\n-\n-    public static void testLong512(long val) {\n-        VectorSpecies<Long> SPECIES = LongVector.SPECIES_512;\n-        lmask = VectorMask.fromLong(SPECIES, val);\n-    }\n-\n-    public static void testFloat64(long val) {\n-        VectorSpecies<Float> SPECIES = FloatVector.SPECIES_64;\n-        fmask = VectorMask.fromLong(SPECIES, val);\n-    }\n-\n-    public static void testFloat128(long val) {\n-        VectorSpecies<Float> SPECIES = FloatVector.SPECIES_128;\n-        fmask = VectorMask.fromLong(SPECIES, val);\n-    }\n-\n-    public static void testFloat256(long val) {\n-        VectorSpecies<Float> SPECIES = FloatVector.SPECIES_256;\n-        fmask = VectorMask.fromLong(SPECIES, val);\n-    }\n-\n-    public static void testFloat512(long val) {\n-        VectorSpecies<Float> SPECIES = FloatVector.SPECIES_512;\n-        fmask = VectorMask.fromLong(SPECIES, val);\n-    }\n-\n-    public static void testDouble64(long val) {\n-        VectorSpecies<Double> SPECIES = DoubleVector.SPECIES_64;\n-        dmask = VectorMask.fromLong(SPECIES, val);\n-    }\n-\n-    public static void testDouble128(long val) {\n-        VectorSpecies<Double> SPECIES = DoubleVector.SPECIES_128;\n-        dmask = VectorMask.fromLong(SPECIES, val);\n-    }\n-\n-    public static void testDouble256(long val) {\n-        VectorSpecies<Double> SPECIES = DoubleVector.SPECIES_256;\n-        dmask = VectorMask.fromLong(SPECIES, val);\n-    }\n-\n-    public static void testDouble512(long val) {\n-        VectorSpecies<Double> SPECIES = DoubleVector.SPECIES_512;\n-        dmask = VectorMask.fromLong(SPECIES, val);\n-    }\n-\n-    @Test\n-    public static void testLongToMask() {\n-        long [] vals = {-1L, 0, rd.nextLong(), rd.nextLong()};\n-        for(int i = 0; i < vals.length; i++) {\n-            long val = vals[i];\n-            for (int ctr = 0; ctr < NUM_ITER; ctr++) {\n-                testByte64(val);\n-                testByte128(val);\n-                testByte256(val);\n-                testByte512(val);\n-                testShort64(val);\n-                testShort128(val);\n-                testShort256(val);\n-                testShort512(val);\n-                testInteger64(val);\n-                testInteger128(val);\n-                testInteger256(val);\n-                testInteger512(val);\n-                testLong64(val);\n-                testLong128(val);\n-                testLong256(val);\n-                testLong512(val);\n-                testFloat64(val);\n-                testFloat128(val);\n-                testFloat256(val);\n-                testFloat512(val);\n-                testDouble64(val);\n-                testDouble128(val);\n-                testDouble256(val);\n-                testDouble512(val);\n-            }\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorLongToMaskTest.java","additions":0,"deletions":216,"binary":false,"changes":216,"status":"deleted"},{"patch":"@@ -43,1 +43,1 @@\n- * @bug 8274569\n+ * @bug 8274569 8278584\n@@ -49,1 +49,1 @@\n- * @run testng\/othervm -XX:-TieredCompilation -XX:CompileThreshold=100 compiler.vectorapi.VectorMaskLoadStoreTest\n+ * @run testng\/othervm -XX:-TieredCompilation -XX:CompileThreshold=100 -DcheckResult=true compiler.vectorapi.VectorMaskLoadStoreTest\n@@ -52,1 +52,0 @@\n-\n@@ -57,0 +56,1 @@\n+    private static boolean checkResult = Boolean.parseBoolean(System.getProperty(\"checkResult\"));\n@@ -61,1 +61,1 @@\n-        Assert.assertEquals(mask.toLong(), val & 0xFFL);\n+        if (checkResult) Assert.assertEquals(mask.toLong(), val & 0xFFL);\n@@ -67,1 +67,1 @@\n-        Assert.assertEquals(mask.toLong(), val & 0xFFFFL);\n+        if (checkResult) Assert.assertEquals(mask.toLong(), val & 0xFFFFL);\n@@ -73,1 +73,1 @@\n-        Assert.assertEquals(mask.toLong(), val & 0xFFFFFFFFL);\n+        if (checkResult) Assert.assertEquals(mask.toLong(), val & 0xFFFFFFFFL);\n@@ -79,1 +79,1 @@\n-        Assert.assertEquals(mask.toLong(), val & -1L);\n+        if (checkResult) Assert.assertEquals(mask.toLong(), val & -1L);\n@@ -85,1 +85,1 @@\n-        Assert.assertEquals(mask.toLong(), val & 0xFL);\n+        if (checkResult) Assert.assertEquals(mask.toLong(), val & 0xFL);\n@@ -91,1 +91,1 @@\n-        Assert.assertEquals(mask.toLong(), val & 0xFFL);\n+        if (checkResult) Assert.assertEquals(mask.toLong(), val & 0xFFL);\n@@ -97,1 +97,1 @@\n-        Assert.assertEquals(mask.toLong(), val & 0xFFFFL);\n+        if (checkResult) Assert.assertEquals(mask.toLong(), val & 0xFFFFL);\n@@ -103,1 +103,1 @@\n-        Assert.assertEquals(mask.toLong(), val & 0xFFFFFFFFL);\n+        if (checkResult) Assert.assertEquals(mask.toLong(), val & 0xFFFFFFFFL);\n@@ -109,1 +109,1 @@\n-        Assert.assertEquals(mask.toLong(), val & 0x3L);\n+        if (checkResult) Assert.assertEquals(mask.toLong(), val & 0x3L);\n@@ -115,1 +115,1 @@\n-        Assert.assertEquals(mask.toLong(), val & 0xFL);\n+        if (checkResult) Assert.assertEquals(mask.toLong(), val & 0xFL);\n@@ -121,1 +121,1 @@\n-        Assert.assertEquals(mask.toLong(), val & 0xFFL);\n+        if (checkResult) Assert.assertEquals(mask.toLong(), val & 0xFFL);\n@@ -127,1 +127,1 @@\n-        Assert.assertEquals(mask.toLong(), val & 0xFFFFL);\n+        if (checkResult) Assert.assertEquals(mask.toLong(), val & 0xFFFFL);\n@@ -133,1 +133,1 @@\n-        Assert.assertEquals(mask.toLong(), val & 0x1L);\n+        if (checkResult) Assert.assertEquals(mask.toLong(), val & 0x1L);\n@@ -139,1 +139,1 @@\n-        Assert.assertEquals(mask.toLong(), val & 0x3L);\n+        if (checkResult) Assert.assertEquals(mask.toLong(), val & 0x3L);\n@@ -145,1 +145,1 @@\n-        Assert.assertEquals(mask.toLong(), val & 0xFL);\n+        if (checkResult) Assert.assertEquals(mask.toLong(), val & 0xFL);\n@@ -151,1 +151,1 @@\n-        Assert.assertEquals(mask.toLong(), val & 0xFFL);\n+        if (checkResult) Assert.assertEquals(mask.toLong(), val & 0xFFL);\n@@ -157,1 +157,1 @@\n-        Assert.assertEquals(mask.toLong(), val & 0x3L);\n+        if (checkResult) Assert.assertEquals(mask.toLong(), val & 0x3L);\n@@ -163,1 +163,1 @@\n-        Assert.assertEquals(mask.toLong(), val & 0xFL);\n+        if (checkResult) Assert.assertEquals(mask.toLong(), val & 0xFL);\n@@ -169,1 +169,1 @@\n-        Assert.assertEquals(mask.toLong(), val & 0xFFL);\n+        if (checkResult) Assert.assertEquals(mask.toLong(), val & 0xFFL);\n@@ -175,1 +175,1 @@\n-        Assert.assertEquals(mask.toLong(), val & 0xFFFFL);\n+        if (checkResult) Assert.assertEquals(mask.toLong(), val & 0xFFFFL);\n@@ -181,1 +181,1 @@\n-        Assert.assertEquals(mask.toLong(), val & 0x1L);\n+        if (checkResult) Assert.assertEquals(mask.toLong(), val & 0x1L);\n@@ -187,1 +187,1 @@\n-        Assert.assertEquals(mask.toLong(), val & 0x3L);\n+        if (checkResult) Assert.assertEquals(mask.toLong(), val & 0x3L);\n@@ -193,1 +193,1 @@\n-        Assert.assertEquals(mask.toLong(), val & 0xFL);\n+        if (checkResult) Assert.assertEquals(mask.toLong(), val & 0xFL);\n@@ -199,1 +199,1 @@\n-        Assert.assertEquals(mask.toLong(), val & 0xFFL);\n+        if (checkResult) Assert.assertEquals(mask.toLong(), val & 0xFFL);\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorMaskLoadStoreTest.java","additions":27,"deletions":27,"binary":false,"changes":54,"status":"modified"}]}