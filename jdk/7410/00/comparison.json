{"files":[{"patch":"@@ -2598,1 +2598,2 @@\n-            ByteVector v = reduceIdentityVector(op).blend(this, m);\n+            \/\/ FIXME:  The JIT should handle this.\n+            ByteVector v = broadcast((byte) 0).blend(this, m);\n@@ -2613,1 +2614,1 @@\n-            \/\/ FIXME:  The JIT should handle this, and other scan ops alos.\n+            \/\/ FIXME:  The JIT should handle this.\n@@ -2616,1 +2617,2 @@\n-            return this.lane(thisNZ.firstTrue());\n+            int ft = thisNZ.firstTrue();\n+            return ft < length() ? this.lane(ft) : (byte) 0;\n@@ -2649,28 +2651,0 @@\n-    private\n-    @ForceInline\n-    ByteVector reduceIdentityVector(VectorOperators.Associative op) {\n-        int opc = opCode(op);\n-        UnaryOperator<ByteVector> fn\n-            = REDUCE_ID_IMPL.find(op, opc, (opc_) -> {\n-                switch (opc_) {\n-                case VECTOR_OP_ADD:\n-                case VECTOR_OP_OR:\n-                case VECTOR_OP_XOR:\n-                    return v -> v.broadcast(0);\n-                case VECTOR_OP_MUL:\n-                    return v -> v.broadcast(1);\n-                case VECTOR_OP_AND:\n-                    return v -> v.broadcast(-1);\n-                case VECTOR_OP_MIN:\n-                    return v -> v.broadcast(MAX_OR_INF);\n-                case VECTOR_OP_MAX:\n-                    return v -> v.broadcast(MIN_OR_INF);\n-                default: return null;\n-                }\n-            });\n-        return fn.apply(this);\n-    }\n-    private static final\n-    ImplCache<Associative,UnaryOperator<ByteVector>> REDUCE_ID_IMPL\n-        = new ImplCache<>(Associative.class, ByteVector.class);\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":5,"deletions":31,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2422,1 +2422,2 @@\n-            DoubleVector v = reduceIdentityVector(op).blend(this, m);\n+            \/\/ FIXME:  The JIT should handle this.\n+            DoubleVector v = broadcast((double) 0).blend(this, m);\n@@ -2437,1 +2438,1 @@\n-            \/\/ FIXME:  The JIT should handle this, and other scan ops alos.\n+            \/\/ FIXME:  The JIT should handle this.\n@@ -2440,1 +2441,2 @@\n-            return this.lane(thisNZ.firstTrue());\n+            int ft = thisNZ.firstTrue();\n+            return ft < length() ? this.lane(ft) : (double) 0;\n@@ -2467,24 +2469,0 @@\n-    private\n-    @ForceInline\n-    DoubleVector reduceIdentityVector(VectorOperators.Associative op) {\n-        int opc = opCode(op);\n-        UnaryOperator<DoubleVector> fn\n-            = REDUCE_ID_IMPL.find(op, opc, (opc_) -> {\n-                switch (opc_) {\n-                case VECTOR_OP_ADD:\n-                    return v -> v.broadcast(0);\n-                case VECTOR_OP_MUL:\n-                    return v -> v.broadcast(1);\n-                case VECTOR_OP_MIN:\n-                    return v -> v.broadcast(MAX_OR_INF);\n-                case VECTOR_OP_MAX:\n-                    return v -> v.broadcast(MIN_OR_INF);\n-                default: return null;\n-                }\n-            });\n-        return fn.apply(this);\n-    }\n-    private static final\n-    ImplCache<Associative,UnaryOperator<DoubleVector>> REDUCE_ID_IMPL\n-        = new ImplCache<>(Associative.class, DoubleVector.class);\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":5,"deletions":27,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2442,1 +2442,2 @@\n-            FloatVector v = reduceIdentityVector(op).blend(this, m);\n+            \/\/ FIXME:  The JIT should handle this.\n+            FloatVector v = broadcast((float) 0).blend(this, m);\n@@ -2457,1 +2458,1 @@\n-            \/\/ FIXME:  The JIT should handle this, and other scan ops alos.\n+            \/\/ FIXME:  The JIT should handle this.\n@@ -2460,1 +2461,2 @@\n-            return this.lane(thisNZ.firstTrue());\n+            int ft = thisNZ.firstTrue();\n+            return ft < length() ? this.lane(ft) : (float) 0;\n@@ -2487,24 +2489,0 @@\n-    private\n-    @ForceInline\n-    FloatVector reduceIdentityVector(VectorOperators.Associative op) {\n-        int opc = opCode(op);\n-        UnaryOperator<FloatVector> fn\n-            = REDUCE_ID_IMPL.find(op, opc, (opc_) -> {\n-                switch (opc_) {\n-                case VECTOR_OP_ADD:\n-                    return v -> v.broadcast(0);\n-                case VECTOR_OP_MUL:\n-                    return v -> v.broadcast(1);\n-                case VECTOR_OP_MIN:\n-                    return v -> v.broadcast(MAX_OR_INF);\n-                case VECTOR_OP_MAX:\n-                    return v -> v.broadcast(MIN_OR_INF);\n-                default: return null;\n-                }\n-            });\n-        return fn.apply(this);\n-    }\n-    private static final\n-    ImplCache<Associative,UnaryOperator<FloatVector>> REDUCE_ID_IMPL\n-        = new ImplCache<>(Associative.class, FloatVector.class);\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":5,"deletions":27,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2597,1 +2597,2 @@\n-            IntVector v = reduceIdentityVector(op).blend(this, m);\n+            \/\/ FIXME:  The JIT should handle this.\n+            IntVector v = broadcast((int) 0).blend(this, m);\n@@ -2612,1 +2613,1 @@\n-            \/\/ FIXME:  The JIT should handle this, and other scan ops alos.\n+            \/\/ FIXME:  The JIT should handle this.\n@@ -2615,1 +2616,2 @@\n-            return this.lane(thisNZ.firstTrue());\n+            int ft = thisNZ.firstTrue();\n+            return ft < length() ? this.lane(ft) : (int) 0;\n@@ -2648,28 +2650,0 @@\n-    private\n-    @ForceInline\n-    IntVector reduceIdentityVector(VectorOperators.Associative op) {\n-        int opc = opCode(op);\n-        UnaryOperator<IntVector> fn\n-            = REDUCE_ID_IMPL.find(op, opc, (opc_) -> {\n-                switch (opc_) {\n-                case VECTOR_OP_ADD:\n-                case VECTOR_OP_OR:\n-                case VECTOR_OP_XOR:\n-                    return v -> v.broadcast(0);\n-                case VECTOR_OP_MUL:\n-                    return v -> v.broadcast(1);\n-                case VECTOR_OP_AND:\n-                    return v -> v.broadcast(-1);\n-                case VECTOR_OP_MIN:\n-                    return v -> v.broadcast(MAX_OR_INF);\n-                case VECTOR_OP_MAX:\n-                    return v -> v.broadcast(MIN_OR_INF);\n-                default: return null;\n-                }\n-            });\n-        return fn.apply(this);\n-    }\n-    private static final\n-    ImplCache<Associative,UnaryOperator<IntVector>> REDUCE_ID_IMPL\n-        = new ImplCache<>(Associative.class, IntVector.class);\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":5,"deletions":31,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2463,1 +2463,2 @@\n-            LongVector v = reduceIdentityVector(op).blend(this, m);\n+            \/\/ FIXME:  The JIT should handle this.\n+            LongVector v = broadcast((long) 0).blend(this, m);\n@@ -2478,1 +2479,1 @@\n-            \/\/ FIXME:  The JIT should handle this, and other scan ops alos.\n+            \/\/ FIXME:  The JIT should handle this.\n@@ -2481,1 +2482,2 @@\n-            return this.lane(thisNZ.firstTrue());\n+            int ft = thisNZ.firstTrue();\n+            return ft < length() ? this.lane(ft) : (long) 0;\n@@ -2514,28 +2516,0 @@\n-    private\n-    @ForceInline\n-    LongVector reduceIdentityVector(VectorOperators.Associative op) {\n-        int opc = opCode(op);\n-        UnaryOperator<LongVector> fn\n-            = REDUCE_ID_IMPL.find(op, opc, (opc_) -> {\n-                switch (opc_) {\n-                case VECTOR_OP_ADD:\n-                case VECTOR_OP_OR:\n-                case VECTOR_OP_XOR:\n-                    return v -> v.broadcast(0);\n-                case VECTOR_OP_MUL:\n-                    return v -> v.broadcast(1);\n-                case VECTOR_OP_AND:\n-                    return v -> v.broadcast(-1);\n-                case VECTOR_OP_MIN:\n-                    return v -> v.broadcast(MAX_OR_INF);\n-                case VECTOR_OP_MAX:\n-                    return v -> v.broadcast(MIN_OR_INF);\n-                default: return null;\n-                }\n-            });\n-        return fn.apply(this);\n-    }\n-    private static final\n-    ImplCache<Associative,UnaryOperator<LongVector>> REDUCE_ID_IMPL\n-        = new ImplCache<>(Associative.class, LongVector.class);\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":5,"deletions":31,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2598,1 +2598,2 @@\n-            ShortVector v = reduceIdentityVector(op).blend(this, m);\n+            \/\/ FIXME:  The JIT should handle this.\n+            ShortVector v = broadcast((short) 0).blend(this, m);\n@@ -2613,1 +2614,1 @@\n-            \/\/ FIXME:  The JIT should handle this, and other scan ops alos.\n+            \/\/ FIXME:  The JIT should handle this.\n@@ -2616,1 +2617,2 @@\n-            return this.lane(thisNZ.firstTrue());\n+            int ft = thisNZ.firstTrue();\n+            return ft < length() ? this.lane(ft) : (short) 0;\n@@ -2649,28 +2651,0 @@\n-    private\n-    @ForceInline\n-    ShortVector reduceIdentityVector(VectorOperators.Associative op) {\n-        int opc = opCode(op);\n-        UnaryOperator<ShortVector> fn\n-            = REDUCE_ID_IMPL.find(op, opc, (opc_) -> {\n-                switch (opc_) {\n-                case VECTOR_OP_ADD:\n-                case VECTOR_OP_OR:\n-                case VECTOR_OP_XOR:\n-                    return v -> v.broadcast(0);\n-                case VECTOR_OP_MUL:\n-                    return v -> v.broadcast(1);\n-                case VECTOR_OP_AND:\n-                    return v -> v.broadcast(-1);\n-                case VECTOR_OP_MIN:\n-                    return v -> v.broadcast(MAX_OR_INF);\n-                case VECTOR_OP_MAX:\n-                    return v -> v.broadcast(MIN_OR_INF);\n-                default: return null;\n-                }\n-            });\n-        return fn.apply(this);\n-    }\n-    private static final\n-    ImplCache<Associative,UnaryOperator<ShortVector>> REDUCE_ID_IMPL\n-        = new ImplCache<>(Associative.class, ShortVector.class);\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":5,"deletions":31,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -3024,1 +3024,2 @@\n-            $abstractvectortype$ v = reduceIdentityVector(op).blend(this, m);\n+            \/\/ FIXME:  The JIT should handle this.\n+            $abstractvectortype$ v = broadcast(($type$) 0).blend(this, m);\n@@ -3039,1 +3040,1 @@\n-            \/\/ FIXME:  The JIT should handle this, and other scan ops alos.\n+            \/\/ FIXME:  The JIT should handle this.\n@@ -3042,1 +3043,2 @@\n-            return this.lane(thisNZ.firstTrue());\n+            int ft = thisNZ.firstTrue();\n+            return ft < length() ? this.lane(ft) : ($type$) 0;\n@@ -3077,32 +3079,0 @@\n-    private\n-    @ForceInline\n-    $abstractvectortype$ reduceIdentityVector(VectorOperators.Associative op) {\n-        int opc = opCode(op);\n-        UnaryOperator<$abstractvectortype$> fn\n-            = REDUCE_ID_IMPL.find(op, opc, (opc_) -> {\n-                switch (opc_) {\n-                case VECTOR_OP_ADD:\n-#if[BITWISE]\n-                case VECTOR_OP_OR:\n-                case VECTOR_OP_XOR:\n-#end[BITWISE]\n-                    return v -> v.broadcast(0);\n-                case VECTOR_OP_MUL:\n-                    return v -> v.broadcast(1);\n-#if[BITWISE]\n-                case VECTOR_OP_AND:\n-                    return v -> v.broadcast(-1);\n-#end[BITWISE]\n-                case VECTOR_OP_MIN:\n-                    return v -> v.broadcast(MAX_OR_INF);\n-                case VECTOR_OP_MAX:\n-                    return v -> v.broadcast(MIN_OR_INF);\n-                default: return null;\n-                }\n-            });\n-        return fn.apply(this);\n-    }\n-    private static final\n-    ImplCache<Associative,UnaryOperator<$abstractvectortype$>> REDUCE_ID_IMPL\n-        = new ImplCache<>(Associative.class, $Type$Vector.class);\n-\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":5,"deletions":35,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -1204,0 +1204,4 @@\n+    static byte firstNonZero(byte a, byte b) {\n+        return Byte.compare(a, (byte) 0) != 0 ? a : b;\n+    }\n+\n@@ -3219,1 +3223,1 @@\n-            res = (byte)Math.min(res, a[i]);\n+            res = (byte) Math.min(res, a[i]);\n@@ -3227,2 +3231,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (byte)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (byte) Math.min(res, MINReduce(a, i));\n@@ -3250,1 +3254,1 @@\n-                ra = (byte)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (byte) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -3260,2 +3264,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (byte)Math.min(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (byte) Math.min(res, a[i]);\n@@ -3269,3 +3273,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (byte)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (byte) Math.min(res, MINReduceMasked(a, i, mask));\n@@ -3295,1 +3298,1 @@\n-                ra = (byte)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (byte) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -3305,1 +3308,1 @@\n-            res = (byte)Math.max(res, a[i]);\n+            res = (byte) Math.max(res, a[i]);\n@@ -3313,2 +3316,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (byte)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (byte) Math.max(res, MAXReduce(a, i));\n@@ -3336,1 +3339,1 @@\n-                ra = (byte)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (byte) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -3346,2 +3349,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (byte)Math.max(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (byte) Math.max(res, a[i]);\n@@ -3355,3 +3358,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (byte)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (byte) Math.max(res, MAXReduceMasked(a, i, mask));\n@@ -3381,1 +3383,1 @@\n-                ra = (byte)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (byte) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -3388,0 +3390,85 @@\n+    static byte FIRST_NONZEROReduce(byte[] a, int idx) {\n+        byte res = (byte) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static byte FIRST_NONZEROReduceAll(byte[] a) {\n+        byte res = (byte) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"byteUnaryOpProvider\")\n+    static void FIRST_NONZEROReduceByte128VectorTests(IntFunction<byte[]> fa) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        byte ra = (byte) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (byte) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Byte128VectorTests::FIRST_NONZEROReduce, Byte128VectorTests::FIRST_NONZEROReduceAll);\n+    }\n+    static byte FIRST_NONZEROReduceMasked(byte[] a, int idx, boolean[] mask) {\n+        byte res = (byte) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static byte FIRST_NONZEROReduceAllMasked(byte[] a, boolean[] mask) {\n+        byte res = (byte) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"byteUnaryOpMaskProvider\")\n+    static void FIRST_NONZEROReduceByte128VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<boolean[]> fm) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        byte ra = (byte) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (byte) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Byte128VectorTests::FIRST_NONZEROReduceMasked, Byte128VectorTests::FIRST_NONZEROReduceAllMasked);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte128VectorTests.java","additions":107,"deletions":20,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -1204,0 +1204,4 @@\n+    static byte firstNonZero(byte a, byte b) {\n+        return Byte.compare(a, (byte) 0) != 0 ? a : b;\n+    }\n+\n@@ -3219,1 +3223,1 @@\n-            res = (byte)Math.min(res, a[i]);\n+            res = (byte) Math.min(res, a[i]);\n@@ -3227,2 +3231,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (byte)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (byte) Math.min(res, MINReduce(a, i));\n@@ -3250,1 +3254,1 @@\n-                ra = (byte)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (byte) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -3260,2 +3264,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (byte)Math.min(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (byte) Math.min(res, a[i]);\n@@ -3269,3 +3273,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (byte)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (byte) Math.min(res, MINReduceMasked(a, i, mask));\n@@ -3295,1 +3298,1 @@\n-                ra = (byte)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (byte) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -3305,1 +3308,1 @@\n-            res = (byte)Math.max(res, a[i]);\n+            res = (byte) Math.max(res, a[i]);\n@@ -3313,2 +3316,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (byte)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (byte) Math.max(res, MAXReduce(a, i));\n@@ -3336,1 +3339,1 @@\n-                ra = (byte)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (byte) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -3346,2 +3349,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (byte)Math.max(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (byte) Math.max(res, a[i]);\n@@ -3355,3 +3358,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (byte)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (byte) Math.max(res, MAXReduceMasked(a, i, mask));\n@@ -3381,1 +3383,1 @@\n-                ra = (byte)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (byte) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -3388,0 +3390,85 @@\n+    static byte FIRST_NONZEROReduce(byte[] a, int idx) {\n+        byte res = (byte) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static byte FIRST_NONZEROReduceAll(byte[] a) {\n+        byte res = (byte) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"byteUnaryOpProvider\")\n+    static void FIRST_NONZEROReduceByte256VectorTests(IntFunction<byte[]> fa) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        byte ra = (byte) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (byte) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Byte256VectorTests::FIRST_NONZEROReduce, Byte256VectorTests::FIRST_NONZEROReduceAll);\n+    }\n+    static byte FIRST_NONZEROReduceMasked(byte[] a, int idx, boolean[] mask) {\n+        byte res = (byte) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static byte FIRST_NONZEROReduceAllMasked(byte[] a, boolean[] mask) {\n+        byte res = (byte) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"byteUnaryOpMaskProvider\")\n+    static void FIRST_NONZEROReduceByte256VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<boolean[]> fm) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        byte ra = (byte) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (byte) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Byte256VectorTests::FIRST_NONZEROReduceMasked, Byte256VectorTests::FIRST_NONZEROReduceAllMasked);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte256VectorTests.java","additions":107,"deletions":20,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run testng\/othervm\/timeout=240 -ea -esa -Xbatch -XX:-TieredCompilation Byte512VectorTests\n+ * @run testng\/othervm -ea -esa -Xbatch -XX:-TieredCompilation Byte512VectorTests\n@@ -1204,0 +1204,4 @@\n+    static byte firstNonZero(byte a, byte b) {\n+        return Byte.compare(a, (byte) 0) != 0 ? a : b;\n+    }\n+\n@@ -3219,1 +3223,1 @@\n-            res = (byte)Math.min(res, a[i]);\n+            res = (byte) Math.min(res, a[i]);\n@@ -3227,2 +3231,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (byte)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (byte) Math.min(res, MINReduce(a, i));\n@@ -3250,1 +3254,1 @@\n-                ra = (byte)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (byte) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -3260,2 +3264,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (byte)Math.min(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (byte) Math.min(res, a[i]);\n@@ -3269,3 +3273,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (byte)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (byte) Math.min(res, MINReduceMasked(a, i, mask));\n@@ -3295,1 +3298,1 @@\n-                ra = (byte)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (byte) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -3305,1 +3308,1 @@\n-            res = (byte)Math.max(res, a[i]);\n+            res = (byte) Math.max(res, a[i]);\n@@ -3313,2 +3316,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (byte)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (byte) Math.max(res, MAXReduce(a, i));\n@@ -3336,1 +3339,1 @@\n-                ra = (byte)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (byte) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -3346,2 +3349,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (byte)Math.max(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (byte) Math.max(res, a[i]);\n@@ -3355,3 +3358,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (byte)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (byte) Math.max(res, MAXReduceMasked(a, i, mask));\n@@ -3381,1 +3383,1 @@\n-                ra = (byte)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (byte) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -3388,0 +3390,85 @@\n+    static byte FIRST_NONZEROReduce(byte[] a, int idx) {\n+        byte res = (byte) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static byte FIRST_NONZEROReduceAll(byte[] a) {\n+        byte res = (byte) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"byteUnaryOpProvider\")\n+    static void FIRST_NONZEROReduceByte512VectorTests(IntFunction<byte[]> fa) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        byte ra = (byte) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (byte) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Byte512VectorTests::FIRST_NONZEROReduce, Byte512VectorTests::FIRST_NONZEROReduceAll);\n+    }\n+    static byte FIRST_NONZEROReduceMasked(byte[] a, int idx, boolean[] mask) {\n+        byte res = (byte) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static byte FIRST_NONZEROReduceAllMasked(byte[] a, boolean[] mask) {\n+        byte res = (byte) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"byteUnaryOpMaskProvider\")\n+    static void FIRST_NONZEROReduceByte512VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<boolean[]> fm) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        byte ra = (byte) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (byte) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Byte512VectorTests::FIRST_NONZEROReduceMasked, Byte512VectorTests::FIRST_NONZEROReduceAllMasked);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte512VectorTests.java","additions":108,"deletions":21,"binary":false,"changes":129,"status":"modified"},{"patch":"@@ -1204,0 +1204,4 @@\n+    static byte firstNonZero(byte a, byte b) {\n+        return Byte.compare(a, (byte) 0) != 0 ? a : b;\n+    }\n+\n@@ -3219,1 +3223,1 @@\n-            res = (byte)Math.min(res, a[i]);\n+            res = (byte) Math.min(res, a[i]);\n@@ -3227,2 +3231,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (byte)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (byte) Math.min(res, MINReduce(a, i));\n@@ -3250,1 +3254,1 @@\n-                ra = (byte)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (byte) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -3260,2 +3264,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (byte)Math.min(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (byte) Math.min(res, a[i]);\n@@ -3269,3 +3273,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (byte)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (byte) Math.min(res, MINReduceMasked(a, i, mask));\n@@ -3295,1 +3298,1 @@\n-                ra = (byte)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (byte) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -3305,1 +3308,1 @@\n-            res = (byte)Math.max(res, a[i]);\n+            res = (byte) Math.max(res, a[i]);\n@@ -3313,2 +3316,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (byte)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (byte) Math.max(res, MAXReduce(a, i));\n@@ -3336,1 +3339,1 @@\n-                ra = (byte)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (byte) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -3346,2 +3349,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (byte)Math.max(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (byte) Math.max(res, a[i]);\n@@ -3355,3 +3358,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (byte)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (byte) Math.max(res, MAXReduceMasked(a, i, mask));\n@@ -3381,1 +3383,1 @@\n-                ra = (byte)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (byte) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -3388,0 +3390,85 @@\n+    static byte FIRST_NONZEROReduce(byte[] a, int idx) {\n+        byte res = (byte) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static byte FIRST_NONZEROReduceAll(byte[] a) {\n+        byte res = (byte) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"byteUnaryOpProvider\")\n+    static void FIRST_NONZEROReduceByte64VectorTests(IntFunction<byte[]> fa) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        byte ra = (byte) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (byte) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Byte64VectorTests::FIRST_NONZEROReduce, Byte64VectorTests::FIRST_NONZEROReduceAll);\n+    }\n+    static byte FIRST_NONZEROReduceMasked(byte[] a, int idx, boolean[] mask) {\n+        byte res = (byte) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static byte FIRST_NONZEROReduceAllMasked(byte[] a, boolean[] mask) {\n+        byte res = (byte) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"byteUnaryOpMaskProvider\")\n+    static void FIRST_NONZEROReduceByte64VectorTestsMasked(IntFunction<byte[]> fa, IntFunction<boolean[]> fm) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        byte ra = (byte) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (byte) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Byte64VectorTests::FIRST_NONZEROReduceMasked, Byte64VectorTests::FIRST_NONZEROReduceAllMasked);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte64VectorTests.java","additions":107,"deletions":20,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n- * @run testng\/othervm\/timeout=240 -ea -esa -Xbatch -XX:-TieredCompilation ByteMaxVectorTests\n+ * @run testng\/othervm -ea -esa -Xbatch -XX:-TieredCompilation ByteMaxVectorTests\n@@ -1209,0 +1209,4 @@\n+    static byte firstNonZero(byte a, byte b) {\n+        return Byte.compare(a, (byte) 0) != 0 ? a : b;\n+    }\n+\n@@ -3224,1 +3228,1 @@\n-            res = (byte)Math.min(res, a[i]);\n+            res = (byte) Math.min(res, a[i]);\n@@ -3232,2 +3236,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (byte)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (byte) Math.min(res, MINReduce(a, i));\n@@ -3255,1 +3259,1 @@\n-                ra = (byte)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (byte) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -3265,2 +3269,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (byte)Math.min(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (byte) Math.min(res, a[i]);\n@@ -3274,3 +3278,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (byte)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (byte) Math.min(res, MINReduceMasked(a, i, mask));\n@@ -3300,1 +3303,1 @@\n-                ra = (byte)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (byte) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -3310,1 +3313,1 @@\n-            res = (byte)Math.max(res, a[i]);\n+            res = (byte) Math.max(res, a[i]);\n@@ -3318,2 +3321,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (byte)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (byte) Math.max(res, MAXReduce(a, i));\n@@ -3341,1 +3344,1 @@\n-                ra = (byte)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (byte) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -3351,2 +3354,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (byte)Math.max(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (byte) Math.max(res, a[i]);\n@@ -3360,3 +3363,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (byte)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (byte) Math.max(res, MAXReduceMasked(a, i, mask));\n@@ -3386,1 +3388,1 @@\n-                ra = (byte)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (byte) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -3393,0 +3395,85 @@\n+    static byte FIRST_NONZEROReduce(byte[] a, int idx) {\n+        byte res = (byte) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static byte FIRST_NONZEROReduceAll(byte[] a) {\n+        byte res = (byte) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"byteUnaryOpProvider\")\n+    static void FIRST_NONZEROReduceByteMaxVectorTests(IntFunction<byte[]> fa) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        byte ra = (byte) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (byte) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                ByteMaxVectorTests::FIRST_NONZEROReduce, ByteMaxVectorTests::FIRST_NONZEROReduceAll);\n+    }\n+    static byte FIRST_NONZEROReduceMasked(byte[] a, int idx, boolean[] mask) {\n+        byte res = (byte) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static byte FIRST_NONZEROReduceAllMasked(byte[] a, boolean[] mask) {\n+        byte res = (byte) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"byteUnaryOpMaskProvider\")\n+    static void FIRST_NONZEROReduceByteMaxVectorTestsMasked(IntFunction<byte[]> fa, IntFunction<boolean[]> fm) {\n+        byte[] a = fa.apply(SPECIES.length());\n+        byte[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Byte> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        byte ra = (byte) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (byte) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                ByteMaxVectorTests::FIRST_NONZEROReduceMasked, ByteMaxVectorTests::FIRST_NONZEROReduceAllMasked);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ByteMaxVectorTests.java","additions":108,"deletions":21,"binary":false,"changes":129,"status":"modified"},{"patch":"@@ -1302,0 +1302,4 @@\n+    static double firstNonZero(double a, double b) {\n+        return Double.compare(a, (double) 0) != 0 ? a : b;\n+    }\n+\n@@ -2280,1 +2284,1 @@\n-            res = (double)Math.min(res, a[i]);\n+            res = (double) Math.min(res, a[i]);\n@@ -2288,2 +2292,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (double)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (double) Math.min(res, MINReduce(a, i));\n@@ -2311,1 +2315,1 @@\n-                ra = (double)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (double) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -2321,2 +2325,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (double)Math.min(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (double) Math.min(res, a[i]);\n@@ -2330,3 +2334,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (double)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (double) Math.min(res, MINReduceMasked(a, i, mask));\n@@ -2356,1 +2359,1 @@\n-                ra = (double)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (double) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -2366,1 +2369,1 @@\n-            res = (double)Math.max(res, a[i]);\n+            res = (double) Math.max(res, a[i]);\n@@ -2374,2 +2377,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (double)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (double) Math.max(res, MAXReduce(a, i));\n@@ -2397,1 +2400,1 @@\n-                ra = (double)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (double) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -2407,2 +2410,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (double)Math.max(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (double) Math.max(res, a[i]);\n@@ -2416,3 +2419,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (double)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (double) Math.max(res, MAXReduceMasked(a, i, mask));\n@@ -2442,1 +2444,1 @@\n-                ra = (double)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (double) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -2449,0 +2451,85 @@\n+    static double FIRST_NONZEROReduce(double[] a, int idx) {\n+        double res = (double) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static double FIRST_NONZEROReduceAll(double[] a) {\n+        double res = (double) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"doubleUnaryOpProvider\")\n+    static void FIRST_NONZEROReduceDouble128VectorTests(IntFunction<double[]> fa) {\n+        double[] a = fa.apply(SPECIES.length());\n+        double[] r = fr.apply(SPECIES.length());\n+        double ra = (double) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (double) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Double128VectorTests::FIRST_NONZEROReduce, Double128VectorTests::FIRST_NONZEROReduceAll);\n+    }\n+    static double FIRST_NONZEROReduceMasked(double[] a, int idx, boolean[] mask) {\n+        double res = (double) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static double FIRST_NONZEROReduceAllMasked(double[] a, boolean[] mask) {\n+        double res = (double) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"doubleUnaryOpMaskProvider\")\n+    static void FIRST_NONZEROReduceDouble128VectorTestsMasked(IntFunction<double[]> fa, IntFunction<boolean[]> fm) {\n+        double[] a = fa.apply(SPECIES.length());\n+        double[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Double> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        double ra = (double) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (double) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Double128VectorTests::FIRST_NONZEROReduceMasked, Double128VectorTests::FIRST_NONZEROReduceAllMasked);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorTests.java","additions":107,"deletions":20,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -1302,0 +1302,4 @@\n+    static double firstNonZero(double a, double b) {\n+        return Double.compare(a, (double) 0) != 0 ? a : b;\n+    }\n+\n@@ -2280,1 +2284,1 @@\n-            res = (double)Math.min(res, a[i]);\n+            res = (double) Math.min(res, a[i]);\n@@ -2288,2 +2292,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (double)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (double) Math.min(res, MINReduce(a, i));\n@@ -2311,1 +2315,1 @@\n-                ra = (double)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (double) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -2321,2 +2325,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (double)Math.min(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (double) Math.min(res, a[i]);\n@@ -2330,3 +2334,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (double)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (double) Math.min(res, MINReduceMasked(a, i, mask));\n@@ -2356,1 +2359,1 @@\n-                ra = (double)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (double) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -2366,1 +2369,1 @@\n-            res = (double)Math.max(res, a[i]);\n+            res = (double) Math.max(res, a[i]);\n@@ -2374,2 +2377,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (double)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (double) Math.max(res, MAXReduce(a, i));\n@@ -2397,1 +2400,1 @@\n-                ra = (double)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (double) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -2407,2 +2410,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (double)Math.max(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (double) Math.max(res, a[i]);\n@@ -2416,3 +2419,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (double)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (double) Math.max(res, MAXReduceMasked(a, i, mask));\n@@ -2442,1 +2444,1 @@\n-                ra = (double)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (double) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -2449,0 +2451,85 @@\n+    static double FIRST_NONZEROReduce(double[] a, int idx) {\n+        double res = (double) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static double FIRST_NONZEROReduceAll(double[] a) {\n+        double res = (double) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"doubleUnaryOpProvider\")\n+    static void FIRST_NONZEROReduceDouble256VectorTests(IntFunction<double[]> fa) {\n+        double[] a = fa.apply(SPECIES.length());\n+        double[] r = fr.apply(SPECIES.length());\n+        double ra = (double) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (double) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Double256VectorTests::FIRST_NONZEROReduce, Double256VectorTests::FIRST_NONZEROReduceAll);\n+    }\n+    static double FIRST_NONZEROReduceMasked(double[] a, int idx, boolean[] mask) {\n+        double res = (double) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static double FIRST_NONZEROReduceAllMasked(double[] a, boolean[] mask) {\n+        double res = (double) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"doubleUnaryOpMaskProvider\")\n+    static void FIRST_NONZEROReduceDouble256VectorTestsMasked(IntFunction<double[]> fa, IntFunction<boolean[]> fm) {\n+        double[] a = fa.apply(SPECIES.length());\n+        double[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Double> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        double ra = (double) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (double) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Double256VectorTests::FIRST_NONZEROReduceMasked, Double256VectorTests::FIRST_NONZEROReduceAllMasked);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorTests.java","additions":107,"deletions":20,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -1302,0 +1302,4 @@\n+    static double firstNonZero(double a, double b) {\n+        return Double.compare(a, (double) 0) != 0 ? a : b;\n+    }\n+\n@@ -2280,1 +2284,1 @@\n-            res = (double)Math.min(res, a[i]);\n+            res = (double) Math.min(res, a[i]);\n@@ -2288,2 +2292,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (double)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (double) Math.min(res, MINReduce(a, i));\n@@ -2311,1 +2315,1 @@\n-                ra = (double)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (double) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -2321,2 +2325,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (double)Math.min(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (double) Math.min(res, a[i]);\n@@ -2330,3 +2334,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (double)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (double) Math.min(res, MINReduceMasked(a, i, mask));\n@@ -2356,1 +2359,1 @@\n-                ra = (double)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (double) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -2366,1 +2369,1 @@\n-            res = (double)Math.max(res, a[i]);\n+            res = (double) Math.max(res, a[i]);\n@@ -2374,2 +2377,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (double)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (double) Math.max(res, MAXReduce(a, i));\n@@ -2397,1 +2400,1 @@\n-                ra = (double)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (double) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -2407,2 +2410,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (double)Math.max(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (double) Math.max(res, a[i]);\n@@ -2416,3 +2419,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (double)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (double) Math.max(res, MAXReduceMasked(a, i, mask));\n@@ -2442,1 +2444,1 @@\n-                ra = (double)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (double) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -2449,0 +2451,85 @@\n+    static double FIRST_NONZEROReduce(double[] a, int idx) {\n+        double res = (double) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static double FIRST_NONZEROReduceAll(double[] a) {\n+        double res = (double) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"doubleUnaryOpProvider\")\n+    static void FIRST_NONZEROReduceDouble512VectorTests(IntFunction<double[]> fa) {\n+        double[] a = fa.apply(SPECIES.length());\n+        double[] r = fr.apply(SPECIES.length());\n+        double ra = (double) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (double) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Double512VectorTests::FIRST_NONZEROReduce, Double512VectorTests::FIRST_NONZEROReduceAll);\n+    }\n+    static double FIRST_NONZEROReduceMasked(double[] a, int idx, boolean[] mask) {\n+        double res = (double) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static double FIRST_NONZEROReduceAllMasked(double[] a, boolean[] mask) {\n+        double res = (double) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"doubleUnaryOpMaskProvider\")\n+    static void FIRST_NONZEROReduceDouble512VectorTestsMasked(IntFunction<double[]> fa, IntFunction<boolean[]> fm) {\n+        double[] a = fa.apply(SPECIES.length());\n+        double[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Double> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        double ra = (double) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (double) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Double512VectorTests::FIRST_NONZEROReduceMasked, Double512VectorTests::FIRST_NONZEROReduceAllMasked);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorTests.java","additions":107,"deletions":20,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -1302,0 +1302,4 @@\n+    static double firstNonZero(double a, double b) {\n+        return Double.compare(a, (double) 0) != 0 ? a : b;\n+    }\n+\n@@ -2280,1 +2284,1 @@\n-            res = (double)Math.min(res, a[i]);\n+            res = (double) Math.min(res, a[i]);\n@@ -2288,2 +2292,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (double)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (double) Math.min(res, MINReduce(a, i));\n@@ -2311,1 +2315,1 @@\n-                ra = (double)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (double) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -2321,2 +2325,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (double)Math.min(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (double) Math.min(res, a[i]);\n@@ -2330,3 +2334,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (double)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (double) Math.min(res, MINReduceMasked(a, i, mask));\n@@ -2356,1 +2359,1 @@\n-                ra = (double)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (double) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -2366,1 +2369,1 @@\n-            res = (double)Math.max(res, a[i]);\n+            res = (double) Math.max(res, a[i]);\n@@ -2374,2 +2377,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (double)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (double) Math.max(res, MAXReduce(a, i));\n@@ -2397,1 +2400,1 @@\n-                ra = (double)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (double) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -2407,2 +2410,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (double)Math.max(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (double) Math.max(res, a[i]);\n@@ -2416,3 +2419,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (double)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (double) Math.max(res, MAXReduceMasked(a, i, mask));\n@@ -2442,1 +2444,1 @@\n-                ra = (double)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (double) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -2449,0 +2451,85 @@\n+    static double FIRST_NONZEROReduce(double[] a, int idx) {\n+        double res = (double) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static double FIRST_NONZEROReduceAll(double[] a) {\n+        double res = (double) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"doubleUnaryOpProvider\")\n+    static void FIRST_NONZEROReduceDouble64VectorTests(IntFunction<double[]> fa) {\n+        double[] a = fa.apply(SPECIES.length());\n+        double[] r = fr.apply(SPECIES.length());\n+        double ra = (double) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (double) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Double64VectorTests::FIRST_NONZEROReduce, Double64VectorTests::FIRST_NONZEROReduceAll);\n+    }\n+    static double FIRST_NONZEROReduceMasked(double[] a, int idx, boolean[] mask) {\n+        double res = (double) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static double FIRST_NONZEROReduceAllMasked(double[] a, boolean[] mask) {\n+        double res = (double) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"doubleUnaryOpMaskProvider\")\n+    static void FIRST_NONZEROReduceDouble64VectorTestsMasked(IntFunction<double[]> fa, IntFunction<boolean[]> fm) {\n+        double[] a = fa.apply(SPECIES.length());\n+        double[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Double> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        double ra = (double) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (double) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Double64VectorTests::FIRST_NONZEROReduceMasked, Double64VectorTests::FIRST_NONZEROReduceAllMasked);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorTests.java","additions":107,"deletions":20,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -1307,0 +1307,4 @@\n+    static double firstNonZero(double a, double b) {\n+        return Double.compare(a, (double) 0) != 0 ? a : b;\n+    }\n+\n@@ -2285,1 +2289,1 @@\n-            res = (double)Math.min(res, a[i]);\n+            res = (double) Math.min(res, a[i]);\n@@ -2293,2 +2297,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (double)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (double) Math.min(res, MINReduce(a, i));\n@@ -2316,1 +2320,1 @@\n-                ra = (double)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (double) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -2326,2 +2330,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (double)Math.min(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (double) Math.min(res, a[i]);\n@@ -2335,3 +2339,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (double)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (double) Math.min(res, MINReduceMasked(a, i, mask));\n@@ -2361,1 +2364,1 @@\n-                ra = (double)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (double) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -2371,1 +2374,1 @@\n-            res = (double)Math.max(res, a[i]);\n+            res = (double) Math.max(res, a[i]);\n@@ -2379,2 +2382,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (double)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (double) Math.max(res, MAXReduce(a, i));\n@@ -2402,1 +2405,1 @@\n-                ra = (double)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (double) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -2412,2 +2415,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (double)Math.max(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (double) Math.max(res, a[i]);\n@@ -2421,3 +2424,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (double)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (double) Math.max(res, MAXReduceMasked(a, i, mask));\n@@ -2447,1 +2449,1 @@\n-                ra = (double)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (double) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -2454,0 +2456,85 @@\n+    static double FIRST_NONZEROReduce(double[] a, int idx) {\n+        double res = (double) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static double FIRST_NONZEROReduceAll(double[] a) {\n+        double res = (double) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"doubleUnaryOpProvider\")\n+    static void FIRST_NONZEROReduceDoubleMaxVectorTests(IntFunction<double[]> fa) {\n+        double[] a = fa.apply(SPECIES.length());\n+        double[] r = fr.apply(SPECIES.length());\n+        double ra = (double) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (double) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                DoubleMaxVectorTests::FIRST_NONZEROReduce, DoubleMaxVectorTests::FIRST_NONZEROReduceAll);\n+    }\n+    static double FIRST_NONZEROReduceMasked(double[] a, int idx, boolean[] mask) {\n+        double res = (double) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static double FIRST_NONZEROReduceAllMasked(double[] a, boolean[] mask) {\n+        double res = (double) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"doubleUnaryOpMaskProvider\")\n+    static void FIRST_NONZEROReduceDoubleMaxVectorTestsMasked(IntFunction<double[]> fa, IntFunction<boolean[]> fm) {\n+        double[] a = fa.apply(SPECIES.length());\n+        double[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Double> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        double ra = (double) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (double) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                DoubleMaxVectorTests::FIRST_NONZEROReduceMasked, DoubleMaxVectorTests::FIRST_NONZEROReduceAllMasked);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/DoubleMaxVectorTests.java","additions":107,"deletions":20,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -1312,0 +1312,4 @@\n+    static float firstNonZero(float a, float b) {\n+        return Float.compare(a, (float) 0) != 0 ? a : b;\n+    }\n+\n@@ -2290,1 +2294,1 @@\n-            res = (float)Math.min(res, a[i]);\n+            res = (float) Math.min(res, a[i]);\n@@ -2298,2 +2302,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (float)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (float) Math.min(res, MINReduce(a, i));\n@@ -2321,1 +2325,1 @@\n-                ra = (float)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (float) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -2331,2 +2335,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (float)Math.min(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (float) Math.min(res, a[i]);\n@@ -2340,3 +2344,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (float)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (float) Math.min(res, MINReduceMasked(a, i, mask));\n@@ -2366,1 +2369,1 @@\n-                ra = (float)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (float) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -2376,1 +2379,1 @@\n-            res = (float)Math.max(res, a[i]);\n+            res = (float) Math.max(res, a[i]);\n@@ -2384,2 +2387,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (float)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (float) Math.max(res, MAXReduce(a, i));\n@@ -2407,1 +2410,1 @@\n-                ra = (float)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (float) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -2417,2 +2420,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (float)Math.max(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (float) Math.max(res, a[i]);\n@@ -2426,3 +2429,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (float)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (float) Math.max(res, MAXReduceMasked(a, i, mask));\n@@ -2452,1 +2454,1 @@\n-                ra = (float)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (float) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -2459,0 +2461,85 @@\n+    static float FIRST_NONZEROReduce(float[] a, int idx) {\n+        float res = (float) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static float FIRST_NONZEROReduceAll(float[] a) {\n+        float res = (float) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"floatUnaryOpProvider\")\n+    static void FIRST_NONZEROReduceFloat128VectorTests(IntFunction<float[]> fa) {\n+        float[] a = fa.apply(SPECIES.length());\n+        float[] r = fr.apply(SPECIES.length());\n+        float ra = (float) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (float) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Float128VectorTests::FIRST_NONZEROReduce, Float128VectorTests::FIRST_NONZEROReduceAll);\n+    }\n+    static float FIRST_NONZEROReduceMasked(float[] a, int idx, boolean[] mask) {\n+        float res = (float) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static float FIRST_NONZEROReduceAllMasked(float[] a, boolean[] mask) {\n+        float res = (float) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"floatUnaryOpMaskProvider\")\n+    static void FIRST_NONZEROReduceFloat128VectorTestsMasked(IntFunction<float[]> fa, IntFunction<boolean[]> fm) {\n+        float[] a = fa.apply(SPECIES.length());\n+        float[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Float> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        float ra = (float) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (float) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Float128VectorTests::FIRST_NONZEROReduceMasked, Float128VectorTests::FIRST_NONZEROReduceAllMasked);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorTests.java","additions":107,"deletions":20,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -1312,0 +1312,4 @@\n+    static float firstNonZero(float a, float b) {\n+        return Float.compare(a, (float) 0) != 0 ? a : b;\n+    }\n+\n@@ -2290,1 +2294,1 @@\n-            res = (float)Math.min(res, a[i]);\n+            res = (float) Math.min(res, a[i]);\n@@ -2298,2 +2302,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (float)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (float) Math.min(res, MINReduce(a, i));\n@@ -2321,1 +2325,1 @@\n-                ra = (float)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (float) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -2331,2 +2335,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (float)Math.min(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (float) Math.min(res, a[i]);\n@@ -2340,3 +2344,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (float)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (float) Math.min(res, MINReduceMasked(a, i, mask));\n@@ -2366,1 +2369,1 @@\n-                ra = (float)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (float) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -2376,1 +2379,1 @@\n-            res = (float)Math.max(res, a[i]);\n+            res = (float) Math.max(res, a[i]);\n@@ -2384,2 +2387,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (float)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (float) Math.max(res, MAXReduce(a, i));\n@@ -2407,1 +2410,1 @@\n-                ra = (float)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (float) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -2417,2 +2420,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (float)Math.max(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (float) Math.max(res, a[i]);\n@@ -2426,3 +2429,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (float)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (float) Math.max(res, MAXReduceMasked(a, i, mask));\n@@ -2452,1 +2454,1 @@\n-                ra = (float)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (float) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -2459,0 +2461,85 @@\n+    static float FIRST_NONZEROReduce(float[] a, int idx) {\n+        float res = (float) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static float FIRST_NONZEROReduceAll(float[] a) {\n+        float res = (float) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"floatUnaryOpProvider\")\n+    static void FIRST_NONZEROReduceFloat256VectorTests(IntFunction<float[]> fa) {\n+        float[] a = fa.apply(SPECIES.length());\n+        float[] r = fr.apply(SPECIES.length());\n+        float ra = (float) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (float) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Float256VectorTests::FIRST_NONZEROReduce, Float256VectorTests::FIRST_NONZEROReduceAll);\n+    }\n+    static float FIRST_NONZEROReduceMasked(float[] a, int idx, boolean[] mask) {\n+        float res = (float) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static float FIRST_NONZEROReduceAllMasked(float[] a, boolean[] mask) {\n+        float res = (float) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"floatUnaryOpMaskProvider\")\n+    static void FIRST_NONZEROReduceFloat256VectorTestsMasked(IntFunction<float[]> fa, IntFunction<boolean[]> fm) {\n+        float[] a = fa.apply(SPECIES.length());\n+        float[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Float> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        float ra = (float) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (float) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Float256VectorTests::FIRST_NONZEROReduceMasked, Float256VectorTests::FIRST_NONZEROReduceAllMasked);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorTests.java","additions":107,"deletions":20,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -1312,0 +1312,4 @@\n+    static float firstNonZero(float a, float b) {\n+        return Float.compare(a, (float) 0) != 0 ? a : b;\n+    }\n+\n@@ -2290,1 +2294,1 @@\n-            res = (float)Math.min(res, a[i]);\n+            res = (float) Math.min(res, a[i]);\n@@ -2298,2 +2302,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (float)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (float) Math.min(res, MINReduce(a, i));\n@@ -2321,1 +2325,1 @@\n-                ra = (float)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (float) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -2331,2 +2335,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (float)Math.min(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (float) Math.min(res, a[i]);\n@@ -2340,3 +2344,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (float)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (float) Math.min(res, MINReduceMasked(a, i, mask));\n@@ -2366,1 +2369,1 @@\n-                ra = (float)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (float) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -2376,1 +2379,1 @@\n-            res = (float)Math.max(res, a[i]);\n+            res = (float) Math.max(res, a[i]);\n@@ -2384,2 +2387,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (float)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (float) Math.max(res, MAXReduce(a, i));\n@@ -2407,1 +2410,1 @@\n-                ra = (float)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (float) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -2417,2 +2420,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (float)Math.max(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (float) Math.max(res, a[i]);\n@@ -2426,3 +2429,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (float)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (float) Math.max(res, MAXReduceMasked(a, i, mask));\n@@ -2452,1 +2454,1 @@\n-                ra = (float)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (float) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -2459,0 +2461,85 @@\n+    static float FIRST_NONZEROReduce(float[] a, int idx) {\n+        float res = (float) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static float FIRST_NONZEROReduceAll(float[] a) {\n+        float res = (float) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"floatUnaryOpProvider\")\n+    static void FIRST_NONZEROReduceFloat512VectorTests(IntFunction<float[]> fa) {\n+        float[] a = fa.apply(SPECIES.length());\n+        float[] r = fr.apply(SPECIES.length());\n+        float ra = (float) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (float) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Float512VectorTests::FIRST_NONZEROReduce, Float512VectorTests::FIRST_NONZEROReduceAll);\n+    }\n+    static float FIRST_NONZEROReduceMasked(float[] a, int idx, boolean[] mask) {\n+        float res = (float) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static float FIRST_NONZEROReduceAllMasked(float[] a, boolean[] mask) {\n+        float res = (float) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"floatUnaryOpMaskProvider\")\n+    static void FIRST_NONZEROReduceFloat512VectorTestsMasked(IntFunction<float[]> fa, IntFunction<boolean[]> fm) {\n+        float[] a = fa.apply(SPECIES.length());\n+        float[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Float> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        float ra = (float) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (float) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Float512VectorTests::FIRST_NONZEROReduceMasked, Float512VectorTests::FIRST_NONZEROReduceAllMasked);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorTests.java","additions":107,"deletions":20,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -1312,0 +1312,4 @@\n+    static float firstNonZero(float a, float b) {\n+        return Float.compare(a, (float) 0) != 0 ? a : b;\n+    }\n+\n@@ -2290,1 +2294,1 @@\n-            res = (float)Math.min(res, a[i]);\n+            res = (float) Math.min(res, a[i]);\n@@ -2298,2 +2302,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (float)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (float) Math.min(res, MINReduce(a, i));\n@@ -2321,1 +2325,1 @@\n-                ra = (float)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (float) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -2331,2 +2335,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (float)Math.min(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (float) Math.min(res, a[i]);\n@@ -2340,3 +2344,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (float)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (float) Math.min(res, MINReduceMasked(a, i, mask));\n@@ -2366,1 +2369,1 @@\n-                ra = (float)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (float) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -2376,1 +2379,1 @@\n-            res = (float)Math.max(res, a[i]);\n+            res = (float) Math.max(res, a[i]);\n@@ -2384,2 +2387,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (float)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (float) Math.max(res, MAXReduce(a, i));\n@@ -2407,1 +2410,1 @@\n-                ra = (float)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (float) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -2417,2 +2420,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (float)Math.max(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (float) Math.max(res, a[i]);\n@@ -2426,3 +2429,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (float)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (float) Math.max(res, MAXReduceMasked(a, i, mask));\n@@ -2452,1 +2454,1 @@\n-                ra = (float)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (float) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -2459,0 +2461,85 @@\n+    static float FIRST_NONZEROReduce(float[] a, int idx) {\n+        float res = (float) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static float FIRST_NONZEROReduceAll(float[] a) {\n+        float res = (float) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"floatUnaryOpProvider\")\n+    static void FIRST_NONZEROReduceFloat64VectorTests(IntFunction<float[]> fa) {\n+        float[] a = fa.apply(SPECIES.length());\n+        float[] r = fr.apply(SPECIES.length());\n+        float ra = (float) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (float) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Float64VectorTests::FIRST_NONZEROReduce, Float64VectorTests::FIRST_NONZEROReduceAll);\n+    }\n+    static float FIRST_NONZEROReduceMasked(float[] a, int idx, boolean[] mask) {\n+        float res = (float) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static float FIRST_NONZEROReduceAllMasked(float[] a, boolean[] mask) {\n+        float res = (float) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"floatUnaryOpMaskProvider\")\n+    static void FIRST_NONZEROReduceFloat64VectorTestsMasked(IntFunction<float[]> fa, IntFunction<boolean[]> fm) {\n+        float[] a = fa.apply(SPECIES.length());\n+        float[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Float> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        float ra = (float) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (float) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Float64VectorTests::FIRST_NONZEROReduceMasked, Float64VectorTests::FIRST_NONZEROReduceAllMasked);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorTests.java","additions":107,"deletions":20,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -1317,0 +1317,4 @@\n+    static float firstNonZero(float a, float b) {\n+        return Float.compare(a, (float) 0) != 0 ? a : b;\n+    }\n+\n@@ -2295,1 +2299,1 @@\n-            res = (float)Math.min(res, a[i]);\n+            res = (float) Math.min(res, a[i]);\n@@ -2303,2 +2307,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (float)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (float) Math.min(res, MINReduce(a, i));\n@@ -2326,1 +2330,1 @@\n-                ra = (float)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (float) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -2336,2 +2340,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (float)Math.min(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (float) Math.min(res, a[i]);\n@@ -2345,3 +2349,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (float)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (float) Math.min(res, MINReduceMasked(a, i, mask));\n@@ -2371,1 +2374,1 @@\n-                ra = (float)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (float) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -2381,1 +2384,1 @@\n-            res = (float)Math.max(res, a[i]);\n+            res = (float) Math.max(res, a[i]);\n@@ -2389,2 +2392,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (float)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (float) Math.max(res, MAXReduce(a, i));\n@@ -2412,1 +2415,1 @@\n-                ra = (float)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (float) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -2422,2 +2425,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (float)Math.max(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (float) Math.max(res, a[i]);\n@@ -2431,3 +2434,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (float)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (float) Math.max(res, MAXReduceMasked(a, i, mask));\n@@ -2457,1 +2459,1 @@\n-                ra = (float)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (float) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -2464,0 +2466,85 @@\n+    static float FIRST_NONZEROReduce(float[] a, int idx) {\n+        float res = (float) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static float FIRST_NONZEROReduceAll(float[] a) {\n+        float res = (float) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"floatUnaryOpProvider\")\n+    static void FIRST_NONZEROReduceFloatMaxVectorTests(IntFunction<float[]> fa) {\n+        float[] a = fa.apply(SPECIES.length());\n+        float[] r = fr.apply(SPECIES.length());\n+        float ra = (float) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (float) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                FloatMaxVectorTests::FIRST_NONZEROReduce, FloatMaxVectorTests::FIRST_NONZEROReduceAll);\n+    }\n+    static float FIRST_NONZEROReduceMasked(float[] a, int idx, boolean[] mask) {\n+        float res = (float) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static float FIRST_NONZEROReduceAllMasked(float[] a, boolean[] mask) {\n+        float res = (float) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"floatUnaryOpMaskProvider\")\n+    static void FIRST_NONZEROReduceFloatMaxVectorTestsMasked(IntFunction<float[]> fa, IntFunction<boolean[]> fm) {\n+        float[] a = fa.apply(SPECIES.length());\n+        float[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Float> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        float ra = (float) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (float) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                FloatMaxVectorTests::FIRST_NONZEROReduceMasked, FloatMaxVectorTests::FIRST_NONZEROReduceAllMasked);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/FloatMaxVectorTests.java","additions":107,"deletions":20,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -1164,0 +1164,4 @@\n+    static int firstNonZero(int a, int b) {\n+        return Integer.compare(a, (int) 0) != 0 ? a : b;\n+    }\n+\n@@ -3184,1 +3188,1 @@\n-            res = (int)Math.min(res, a[i]);\n+            res = (int) Math.min(res, a[i]);\n@@ -3192,2 +3196,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (int)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (int) Math.min(res, MINReduce(a, i));\n@@ -3215,1 +3219,1 @@\n-                ra = (int)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (int) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -3225,2 +3229,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (int)Math.min(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (int) Math.min(res, a[i]);\n@@ -3234,3 +3238,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (int)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (int) Math.min(res, MINReduceMasked(a, i, mask));\n@@ -3260,1 +3263,1 @@\n-                ra = (int)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (int) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -3270,1 +3273,1 @@\n-            res = (int)Math.max(res, a[i]);\n+            res = (int) Math.max(res, a[i]);\n@@ -3278,2 +3281,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (int)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (int) Math.max(res, MAXReduce(a, i));\n@@ -3301,1 +3304,1 @@\n-                ra = (int)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (int) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -3311,2 +3314,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (int)Math.max(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (int) Math.max(res, a[i]);\n@@ -3320,3 +3323,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (int)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (int) Math.max(res, MAXReduceMasked(a, i, mask));\n@@ -3346,1 +3348,1 @@\n-                ra = (int)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (int) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -3353,0 +3355,85 @@\n+    static int FIRST_NONZEROReduce(int[] a, int idx) {\n+        int res = (int) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static int FIRST_NONZEROReduceAll(int[] a) {\n+        int res = (int) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"intUnaryOpProvider\")\n+    static void FIRST_NONZEROReduceInt128VectorTests(IntFunction<int[]> fa) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        int ra = (int) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (int) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Int128VectorTests::FIRST_NONZEROReduce, Int128VectorTests::FIRST_NONZEROReduceAll);\n+    }\n+    static int FIRST_NONZEROReduceMasked(int[] a, int idx, boolean[] mask) {\n+        int res = (int) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static int FIRST_NONZEROReduceAllMasked(int[] a, boolean[] mask) {\n+        int res = (int) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"intUnaryOpMaskProvider\")\n+    static void FIRST_NONZEROReduceInt128VectorTestsMasked(IntFunction<int[]> fa, IntFunction<boolean[]> fm) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        int ra = (int) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (int) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Int128VectorTests::FIRST_NONZEROReduceMasked, Int128VectorTests::FIRST_NONZEROReduceAllMasked);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int128VectorTests.java","additions":107,"deletions":20,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -1164,0 +1164,4 @@\n+    static int firstNonZero(int a, int b) {\n+        return Integer.compare(a, (int) 0) != 0 ? a : b;\n+    }\n+\n@@ -3184,1 +3188,1 @@\n-            res = (int)Math.min(res, a[i]);\n+            res = (int) Math.min(res, a[i]);\n@@ -3192,2 +3196,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (int)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (int) Math.min(res, MINReduce(a, i));\n@@ -3215,1 +3219,1 @@\n-                ra = (int)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (int) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -3225,2 +3229,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (int)Math.min(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (int) Math.min(res, a[i]);\n@@ -3234,3 +3238,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (int)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (int) Math.min(res, MINReduceMasked(a, i, mask));\n@@ -3260,1 +3263,1 @@\n-                ra = (int)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (int) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -3270,1 +3273,1 @@\n-            res = (int)Math.max(res, a[i]);\n+            res = (int) Math.max(res, a[i]);\n@@ -3278,2 +3281,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (int)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (int) Math.max(res, MAXReduce(a, i));\n@@ -3301,1 +3304,1 @@\n-                ra = (int)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (int) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -3311,2 +3314,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (int)Math.max(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (int) Math.max(res, a[i]);\n@@ -3320,3 +3323,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (int)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (int) Math.max(res, MAXReduceMasked(a, i, mask));\n@@ -3346,1 +3348,1 @@\n-                ra = (int)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (int) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -3353,0 +3355,85 @@\n+    static int FIRST_NONZEROReduce(int[] a, int idx) {\n+        int res = (int) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static int FIRST_NONZEROReduceAll(int[] a) {\n+        int res = (int) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"intUnaryOpProvider\")\n+    static void FIRST_NONZEROReduceInt256VectorTests(IntFunction<int[]> fa) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        int ra = (int) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (int) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Int256VectorTests::FIRST_NONZEROReduce, Int256VectorTests::FIRST_NONZEROReduceAll);\n+    }\n+    static int FIRST_NONZEROReduceMasked(int[] a, int idx, boolean[] mask) {\n+        int res = (int) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static int FIRST_NONZEROReduceAllMasked(int[] a, boolean[] mask) {\n+        int res = (int) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"intUnaryOpMaskProvider\")\n+    static void FIRST_NONZEROReduceInt256VectorTestsMasked(IntFunction<int[]> fa, IntFunction<boolean[]> fm) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        int ra = (int) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (int) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Int256VectorTests::FIRST_NONZEROReduceMasked, Int256VectorTests::FIRST_NONZEROReduceAllMasked);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int256VectorTests.java","additions":107,"deletions":20,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -1164,0 +1164,4 @@\n+    static int firstNonZero(int a, int b) {\n+        return Integer.compare(a, (int) 0) != 0 ? a : b;\n+    }\n+\n@@ -3184,1 +3188,1 @@\n-            res = (int)Math.min(res, a[i]);\n+            res = (int) Math.min(res, a[i]);\n@@ -3192,2 +3196,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (int)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (int) Math.min(res, MINReduce(a, i));\n@@ -3215,1 +3219,1 @@\n-                ra = (int)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (int) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -3225,2 +3229,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (int)Math.min(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (int) Math.min(res, a[i]);\n@@ -3234,3 +3238,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (int)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (int) Math.min(res, MINReduceMasked(a, i, mask));\n@@ -3260,1 +3263,1 @@\n-                ra = (int)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (int) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -3270,1 +3273,1 @@\n-            res = (int)Math.max(res, a[i]);\n+            res = (int) Math.max(res, a[i]);\n@@ -3278,2 +3281,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (int)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (int) Math.max(res, MAXReduce(a, i));\n@@ -3301,1 +3304,1 @@\n-                ra = (int)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (int) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -3311,2 +3314,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (int)Math.max(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (int) Math.max(res, a[i]);\n@@ -3320,3 +3323,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (int)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (int) Math.max(res, MAXReduceMasked(a, i, mask));\n@@ -3346,1 +3348,1 @@\n-                ra = (int)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (int) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -3353,0 +3355,85 @@\n+    static int FIRST_NONZEROReduce(int[] a, int idx) {\n+        int res = (int) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static int FIRST_NONZEROReduceAll(int[] a) {\n+        int res = (int) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"intUnaryOpProvider\")\n+    static void FIRST_NONZEROReduceInt512VectorTests(IntFunction<int[]> fa) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        int ra = (int) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (int) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Int512VectorTests::FIRST_NONZEROReduce, Int512VectorTests::FIRST_NONZEROReduceAll);\n+    }\n+    static int FIRST_NONZEROReduceMasked(int[] a, int idx, boolean[] mask) {\n+        int res = (int) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static int FIRST_NONZEROReduceAllMasked(int[] a, boolean[] mask) {\n+        int res = (int) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"intUnaryOpMaskProvider\")\n+    static void FIRST_NONZEROReduceInt512VectorTestsMasked(IntFunction<int[]> fa, IntFunction<boolean[]> fm) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        int ra = (int) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (int) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Int512VectorTests::FIRST_NONZEROReduceMasked, Int512VectorTests::FIRST_NONZEROReduceAllMasked);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int512VectorTests.java","additions":107,"deletions":20,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -1164,0 +1164,4 @@\n+    static int firstNonZero(int a, int b) {\n+        return Integer.compare(a, (int) 0) != 0 ? a : b;\n+    }\n+\n@@ -3184,1 +3188,1 @@\n-            res = (int)Math.min(res, a[i]);\n+            res = (int) Math.min(res, a[i]);\n@@ -3192,2 +3196,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (int)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (int) Math.min(res, MINReduce(a, i));\n@@ -3215,1 +3219,1 @@\n-                ra = (int)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (int) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -3225,2 +3229,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (int)Math.min(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (int) Math.min(res, a[i]);\n@@ -3234,3 +3238,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (int)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (int) Math.min(res, MINReduceMasked(a, i, mask));\n@@ -3260,1 +3263,1 @@\n-                ra = (int)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (int) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -3270,1 +3273,1 @@\n-            res = (int)Math.max(res, a[i]);\n+            res = (int) Math.max(res, a[i]);\n@@ -3278,2 +3281,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (int)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (int) Math.max(res, MAXReduce(a, i));\n@@ -3301,1 +3304,1 @@\n-                ra = (int)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (int) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -3311,2 +3314,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (int)Math.max(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (int) Math.max(res, a[i]);\n@@ -3320,3 +3323,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (int)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (int) Math.max(res, MAXReduceMasked(a, i, mask));\n@@ -3346,1 +3348,1 @@\n-                ra = (int)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (int) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -3353,0 +3355,85 @@\n+    static int FIRST_NONZEROReduce(int[] a, int idx) {\n+        int res = (int) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static int FIRST_NONZEROReduceAll(int[] a) {\n+        int res = (int) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"intUnaryOpProvider\")\n+    static void FIRST_NONZEROReduceInt64VectorTests(IntFunction<int[]> fa) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        int ra = (int) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (int) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Int64VectorTests::FIRST_NONZEROReduce, Int64VectorTests::FIRST_NONZEROReduceAll);\n+    }\n+    static int FIRST_NONZEROReduceMasked(int[] a, int idx, boolean[] mask) {\n+        int res = (int) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static int FIRST_NONZEROReduceAllMasked(int[] a, boolean[] mask) {\n+        int res = (int) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"intUnaryOpMaskProvider\")\n+    static void FIRST_NONZEROReduceInt64VectorTestsMasked(IntFunction<int[]> fa, IntFunction<boolean[]> fm) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        int ra = (int) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (int) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Int64VectorTests::FIRST_NONZEROReduceMasked, Int64VectorTests::FIRST_NONZEROReduceAllMasked);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int64VectorTests.java","additions":107,"deletions":20,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -1169,0 +1169,4 @@\n+    static int firstNonZero(int a, int b) {\n+        return Integer.compare(a, (int) 0) != 0 ? a : b;\n+    }\n+\n@@ -3189,1 +3193,1 @@\n-            res = (int)Math.min(res, a[i]);\n+            res = (int) Math.min(res, a[i]);\n@@ -3197,2 +3201,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (int)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (int) Math.min(res, MINReduce(a, i));\n@@ -3220,1 +3224,1 @@\n-                ra = (int)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (int) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -3230,2 +3234,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (int)Math.min(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (int) Math.min(res, a[i]);\n@@ -3239,3 +3243,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (int)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (int) Math.min(res, MINReduceMasked(a, i, mask));\n@@ -3265,1 +3268,1 @@\n-                ra = (int)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (int) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -3275,1 +3278,1 @@\n-            res = (int)Math.max(res, a[i]);\n+            res = (int) Math.max(res, a[i]);\n@@ -3283,2 +3286,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (int)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (int) Math.max(res, MAXReduce(a, i));\n@@ -3306,1 +3309,1 @@\n-                ra = (int)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (int) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -3316,2 +3319,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (int)Math.max(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (int) Math.max(res, a[i]);\n@@ -3325,3 +3328,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (int)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (int) Math.max(res, MAXReduceMasked(a, i, mask));\n@@ -3351,1 +3353,1 @@\n-                ra = (int)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (int) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -3358,0 +3360,85 @@\n+    static int FIRST_NONZEROReduce(int[] a, int idx) {\n+        int res = (int) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static int FIRST_NONZEROReduceAll(int[] a) {\n+        int res = (int) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"intUnaryOpProvider\")\n+    static void FIRST_NONZEROReduceIntMaxVectorTests(IntFunction<int[]> fa) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        int ra = (int) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (int) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                IntMaxVectorTests::FIRST_NONZEROReduce, IntMaxVectorTests::FIRST_NONZEROReduceAll);\n+    }\n+    static int FIRST_NONZEROReduceMasked(int[] a, int idx, boolean[] mask) {\n+        int res = (int) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static int FIRST_NONZEROReduceAllMasked(int[] a, boolean[] mask) {\n+        int res = (int) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"intUnaryOpMaskProvider\")\n+    static void FIRST_NONZEROReduceIntMaxVectorTestsMasked(IntFunction<int[]> fa, IntFunction<boolean[]> fm) {\n+        int[] a = fa.apply(SPECIES.length());\n+        int[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Integer> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        int ra = (int) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (int) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                IntMaxVectorTests::FIRST_NONZEROReduceMasked, IntMaxVectorTests::FIRST_NONZEROReduceAllMasked);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/IntMaxVectorTests.java","additions":107,"deletions":20,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -1186,0 +1186,4 @@\n+    static long firstNonZero(long a, long b) {\n+        return Long.compare(a, (long) 0) != 0 ? a : b;\n+    }\n+\n@@ -3206,1 +3210,1 @@\n-            res = (long)Math.min(res, a[i]);\n+            res = (long) Math.min(res, a[i]);\n@@ -3214,2 +3218,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (long)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (long) Math.min(res, MINReduce(a, i));\n@@ -3237,1 +3241,1 @@\n-                ra = (long)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (long) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -3247,2 +3251,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (long)Math.min(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (long) Math.min(res, a[i]);\n@@ -3256,3 +3260,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (long)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (long) Math.min(res, MINReduceMasked(a, i, mask));\n@@ -3282,1 +3285,1 @@\n-                ra = (long)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (long) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -3292,1 +3295,1 @@\n-            res = (long)Math.max(res, a[i]);\n+            res = (long) Math.max(res, a[i]);\n@@ -3300,2 +3303,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (long)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (long) Math.max(res, MAXReduce(a, i));\n@@ -3323,1 +3326,1 @@\n-                ra = (long)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (long) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -3333,2 +3336,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (long)Math.max(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (long) Math.max(res, a[i]);\n@@ -3342,3 +3345,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (long)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (long) Math.max(res, MAXReduceMasked(a, i, mask));\n@@ -3368,1 +3370,1 @@\n-                ra = (long)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (long) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -3375,0 +3377,85 @@\n+    static long FIRST_NONZEROReduce(long[] a, int idx) {\n+        long res = (long) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static long FIRST_NONZEROReduceAll(long[] a) {\n+        long res = (long) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"longUnaryOpProvider\")\n+    static void FIRST_NONZEROReduceLong128VectorTests(IntFunction<long[]> fa) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        long ra = (long) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (long) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Long128VectorTests::FIRST_NONZEROReduce, Long128VectorTests::FIRST_NONZEROReduceAll);\n+    }\n+    static long FIRST_NONZEROReduceMasked(long[] a, int idx, boolean[] mask) {\n+        long res = (long) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static long FIRST_NONZEROReduceAllMasked(long[] a, boolean[] mask) {\n+        long res = (long) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"longUnaryOpMaskProvider\")\n+    static void FIRST_NONZEROReduceLong128VectorTestsMasked(IntFunction<long[]> fa, IntFunction<boolean[]> fm) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        long ra = (long) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (long) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Long128VectorTests::FIRST_NONZEROReduceMasked, Long128VectorTests::FIRST_NONZEROReduceAllMasked);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long128VectorTests.java","additions":107,"deletions":20,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -1186,0 +1186,4 @@\n+    static long firstNonZero(long a, long b) {\n+        return Long.compare(a, (long) 0) != 0 ? a : b;\n+    }\n+\n@@ -3206,1 +3210,1 @@\n-            res = (long)Math.min(res, a[i]);\n+            res = (long) Math.min(res, a[i]);\n@@ -3214,2 +3218,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (long)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (long) Math.min(res, MINReduce(a, i));\n@@ -3237,1 +3241,1 @@\n-                ra = (long)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (long) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -3247,2 +3251,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (long)Math.min(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (long) Math.min(res, a[i]);\n@@ -3256,3 +3260,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (long)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (long) Math.min(res, MINReduceMasked(a, i, mask));\n@@ -3282,1 +3285,1 @@\n-                ra = (long)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (long) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -3292,1 +3295,1 @@\n-            res = (long)Math.max(res, a[i]);\n+            res = (long) Math.max(res, a[i]);\n@@ -3300,2 +3303,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (long)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (long) Math.max(res, MAXReduce(a, i));\n@@ -3323,1 +3326,1 @@\n-                ra = (long)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (long) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -3333,2 +3336,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (long)Math.max(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (long) Math.max(res, a[i]);\n@@ -3342,3 +3345,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (long)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (long) Math.max(res, MAXReduceMasked(a, i, mask));\n@@ -3368,1 +3370,1 @@\n-                ra = (long)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (long) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -3375,0 +3377,85 @@\n+    static long FIRST_NONZEROReduce(long[] a, int idx) {\n+        long res = (long) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static long FIRST_NONZEROReduceAll(long[] a) {\n+        long res = (long) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"longUnaryOpProvider\")\n+    static void FIRST_NONZEROReduceLong256VectorTests(IntFunction<long[]> fa) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        long ra = (long) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (long) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Long256VectorTests::FIRST_NONZEROReduce, Long256VectorTests::FIRST_NONZEROReduceAll);\n+    }\n+    static long FIRST_NONZEROReduceMasked(long[] a, int idx, boolean[] mask) {\n+        long res = (long) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static long FIRST_NONZEROReduceAllMasked(long[] a, boolean[] mask) {\n+        long res = (long) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"longUnaryOpMaskProvider\")\n+    static void FIRST_NONZEROReduceLong256VectorTestsMasked(IntFunction<long[]> fa, IntFunction<boolean[]> fm) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        long ra = (long) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (long) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Long256VectorTests::FIRST_NONZEROReduceMasked, Long256VectorTests::FIRST_NONZEROReduceAllMasked);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long256VectorTests.java","additions":107,"deletions":20,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -1186,0 +1186,4 @@\n+    static long firstNonZero(long a, long b) {\n+        return Long.compare(a, (long) 0) != 0 ? a : b;\n+    }\n+\n@@ -3206,1 +3210,1 @@\n-            res = (long)Math.min(res, a[i]);\n+            res = (long) Math.min(res, a[i]);\n@@ -3214,2 +3218,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (long)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (long) Math.min(res, MINReduce(a, i));\n@@ -3237,1 +3241,1 @@\n-                ra = (long)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (long) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -3247,2 +3251,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (long)Math.min(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (long) Math.min(res, a[i]);\n@@ -3256,3 +3260,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (long)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (long) Math.min(res, MINReduceMasked(a, i, mask));\n@@ -3282,1 +3285,1 @@\n-                ra = (long)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (long) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -3292,1 +3295,1 @@\n-            res = (long)Math.max(res, a[i]);\n+            res = (long) Math.max(res, a[i]);\n@@ -3300,2 +3303,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (long)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (long) Math.max(res, MAXReduce(a, i));\n@@ -3323,1 +3326,1 @@\n-                ra = (long)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (long) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -3333,2 +3336,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (long)Math.max(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (long) Math.max(res, a[i]);\n@@ -3342,3 +3345,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (long)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (long) Math.max(res, MAXReduceMasked(a, i, mask));\n@@ -3368,1 +3370,1 @@\n-                ra = (long)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (long) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -3375,0 +3377,85 @@\n+    static long FIRST_NONZEROReduce(long[] a, int idx) {\n+        long res = (long) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static long FIRST_NONZEROReduceAll(long[] a) {\n+        long res = (long) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"longUnaryOpProvider\")\n+    static void FIRST_NONZEROReduceLong512VectorTests(IntFunction<long[]> fa) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        long ra = (long) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (long) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Long512VectorTests::FIRST_NONZEROReduce, Long512VectorTests::FIRST_NONZEROReduceAll);\n+    }\n+    static long FIRST_NONZEROReduceMasked(long[] a, int idx, boolean[] mask) {\n+        long res = (long) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static long FIRST_NONZEROReduceAllMasked(long[] a, boolean[] mask) {\n+        long res = (long) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"longUnaryOpMaskProvider\")\n+    static void FIRST_NONZEROReduceLong512VectorTestsMasked(IntFunction<long[]> fa, IntFunction<boolean[]> fm) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        long ra = (long) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (long) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Long512VectorTests::FIRST_NONZEROReduceMasked, Long512VectorTests::FIRST_NONZEROReduceAllMasked);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long512VectorTests.java","additions":107,"deletions":20,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -1186,0 +1186,4 @@\n+    static long firstNonZero(long a, long b) {\n+        return Long.compare(a, (long) 0) != 0 ? a : b;\n+    }\n+\n@@ -3206,1 +3210,1 @@\n-            res = (long)Math.min(res, a[i]);\n+            res = (long) Math.min(res, a[i]);\n@@ -3214,2 +3218,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (long)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (long) Math.min(res, MINReduce(a, i));\n@@ -3237,1 +3241,1 @@\n-                ra = (long)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (long) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -3247,2 +3251,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (long)Math.min(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (long) Math.min(res, a[i]);\n@@ -3256,3 +3260,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (long)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (long) Math.min(res, MINReduceMasked(a, i, mask));\n@@ -3282,1 +3285,1 @@\n-                ra = (long)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (long) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -3292,1 +3295,1 @@\n-            res = (long)Math.max(res, a[i]);\n+            res = (long) Math.max(res, a[i]);\n@@ -3300,2 +3303,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (long)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (long) Math.max(res, MAXReduce(a, i));\n@@ -3323,1 +3326,1 @@\n-                ra = (long)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (long) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -3333,2 +3336,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (long)Math.max(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (long) Math.max(res, a[i]);\n@@ -3342,3 +3345,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (long)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (long) Math.max(res, MAXReduceMasked(a, i, mask));\n@@ -3368,1 +3370,1 @@\n-                ra = (long)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (long) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -3375,0 +3377,85 @@\n+    static long FIRST_NONZEROReduce(long[] a, int idx) {\n+        long res = (long) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static long FIRST_NONZEROReduceAll(long[] a) {\n+        long res = (long) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"longUnaryOpProvider\")\n+    static void FIRST_NONZEROReduceLong64VectorTests(IntFunction<long[]> fa) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        long ra = (long) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (long) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Long64VectorTests::FIRST_NONZEROReduce, Long64VectorTests::FIRST_NONZEROReduceAll);\n+    }\n+    static long FIRST_NONZEROReduceMasked(long[] a, int idx, boolean[] mask) {\n+        long res = (long) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static long FIRST_NONZEROReduceAllMasked(long[] a, boolean[] mask) {\n+        long res = (long) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"longUnaryOpMaskProvider\")\n+    static void FIRST_NONZEROReduceLong64VectorTestsMasked(IntFunction<long[]> fa, IntFunction<boolean[]> fm) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        long ra = (long) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (long) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Long64VectorTests::FIRST_NONZEROReduceMasked, Long64VectorTests::FIRST_NONZEROReduceAllMasked);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long64VectorTests.java","additions":107,"deletions":20,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -1191,0 +1191,4 @@\n+    static long firstNonZero(long a, long b) {\n+        return Long.compare(a, (long) 0) != 0 ? a : b;\n+    }\n+\n@@ -3211,1 +3215,1 @@\n-            res = (long)Math.min(res, a[i]);\n+            res = (long) Math.min(res, a[i]);\n@@ -3219,2 +3223,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (long)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (long) Math.min(res, MINReduce(a, i));\n@@ -3242,1 +3246,1 @@\n-                ra = (long)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (long) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -3252,2 +3256,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (long)Math.min(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (long) Math.min(res, a[i]);\n@@ -3261,3 +3265,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (long)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (long) Math.min(res, MINReduceMasked(a, i, mask));\n@@ -3287,1 +3290,1 @@\n-                ra = (long)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (long) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -3297,1 +3300,1 @@\n-            res = (long)Math.max(res, a[i]);\n+            res = (long) Math.max(res, a[i]);\n@@ -3305,2 +3308,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (long)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (long) Math.max(res, MAXReduce(a, i));\n@@ -3328,1 +3331,1 @@\n-                ra = (long)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (long) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -3338,2 +3341,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (long)Math.max(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (long) Math.max(res, a[i]);\n@@ -3347,3 +3350,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (long)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (long) Math.max(res, MAXReduceMasked(a, i, mask));\n@@ -3373,1 +3375,1 @@\n-                ra = (long)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (long) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -3380,0 +3382,85 @@\n+    static long FIRST_NONZEROReduce(long[] a, int idx) {\n+        long res = (long) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static long FIRST_NONZEROReduceAll(long[] a) {\n+        long res = (long) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"longUnaryOpProvider\")\n+    static void FIRST_NONZEROReduceLongMaxVectorTests(IntFunction<long[]> fa) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        long ra = (long) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (long) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                LongMaxVectorTests::FIRST_NONZEROReduce, LongMaxVectorTests::FIRST_NONZEROReduceAll);\n+    }\n+    static long FIRST_NONZEROReduceMasked(long[] a, int idx, boolean[] mask) {\n+        long res = (long) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static long FIRST_NONZEROReduceAllMasked(long[] a, boolean[] mask) {\n+        long res = (long) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"longUnaryOpMaskProvider\")\n+    static void FIRST_NONZEROReduceLongMaxVectorTestsMasked(IntFunction<long[]> fa, IntFunction<boolean[]> fm) {\n+        long[] a = fa.apply(SPECIES.length());\n+        long[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Long> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        long ra = (long) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (long) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                LongMaxVectorTests::FIRST_NONZEROReduceMasked, LongMaxVectorTests::FIRST_NONZEROReduceAllMasked);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/LongMaxVectorTests.java","additions":107,"deletions":20,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -1194,0 +1194,4 @@\n+    static short firstNonZero(short a, short b) {\n+        return Short.compare(a, (short) 0) != 0 ? a : b;\n+    }\n+\n@@ -3209,1 +3213,1 @@\n-            res = (short)Math.min(res, a[i]);\n+            res = (short) Math.min(res, a[i]);\n@@ -3217,2 +3221,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (short)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (short) Math.min(res, MINReduce(a, i));\n@@ -3240,1 +3244,1 @@\n-                ra = (short)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (short) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -3250,2 +3254,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (short)Math.min(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (short) Math.min(res, a[i]);\n@@ -3259,3 +3263,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (short)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (short) Math.min(res, MINReduceMasked(a, i, mask));\n@@ -3285,1 +3288,1 @@\n-                ra = (short)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (short) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -3295,1 +3298,1 @@\n-            res = (short)Math.max(res, a[i]);\n+            res = (short) Math.max(res, a[i]);\n@@ -3303,2 +3306,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (short)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (short) Math.max(res, MAXReduce(a, i));\n@@ -3326,1 +3329,1 @@\n-                ra = (short)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (short) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -3336,2 +3339,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (short)Math.max(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (short) Math.max(res, a[i]);\n@@ -3345,3 +3348,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (short)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (short) Math.max(res, MAXReduceMasked(a, i, mask));\n@@ -3371,1 +3373,1 @@\n-                ra = (short)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (short) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -3378,0 +3380,85 @@\n+    static short FIRST_NONZEROReduce(short[] a, int idx) {\n+        short res = (short) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static short FIRST_NONZEROReduceAll(short[] a) {\n+        short res = (short) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"shortUnaryOpProvider\")\n+    static void FIRST_NONZEROReduceShort128VectorTests(IntFunction<short[]> fa) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        short ra = (short) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (short) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Short128VectorTests::FIRST_NONZEROReduce, Short128VectorTests::FIRST_NONZEROReduceAll);\n+    }\n+    static short FIRST_NONZEROReduceMasked(short[] a, int idx, boolean[] mask) {\n+        short res = (short) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static short FIRST_NONZEROReduceAllMasked(short[] a, boolean[] mask) {\n+        short res = (short) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"shortUnaryOpMaskProvider\")\n+    static void FIRST_NONZEROReduceShort128VectorTestsMasked(IntFunction<short[]> fa, IntFunction<boolean[]> fm) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        short ra = (short) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (short) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Short128VectorTests::FIRST_NONZEROReduceMasked, Short128VectorTests::FIRST_NONZEROReduceAllMasked);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short128VectorTests.java","additions":107,"deletions":20,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -1194,0 +1194,4 @@\n+    static short firstNonZero(short a, short b) {\n+        return Short.compare(a, (short) 0) != 0 ? a : b;\n+    }\n+\n@@ -3209,1 +3213,1 @@\n-            res = (short)Math.min(res, a[i]);\n+            res = (short) Math.min(res, a[i]);\n@@ -3217,2 +3221,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (short)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (short) Math.min(res, MINReduce(a, i));\n@@ -3240,1 +3244,1 @@\n-                ra = (short)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (short) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -3250,2 +3254,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (short)Math.min(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (short) Math.min(res, a[i]);\n@@ -3259,3 +3263,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (short)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (short) Math.min(res, MINReduceMasked(a, i, mask));\n@@ -3285,1 +3288,1 @@\n-                ra = (short)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (short) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -3295,1 +3298,1 @@\n-            res = (short)Math.max(res, a[i]);\n+            res = (short) Math.max(res, a[i]);\n@@ -3303,2 +3306,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (short)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (short) Math.max(res, MAXReduce(a, i));\n@@ -3326,1 +3329,1 @@\n-                ra = (short)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (short) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -3336,2 +3339,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (short)Math.max(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (short) Math.max(res, a[i]);\n@@ -3345,3 +3348,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (short)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (short) Math.max(res, MAXReduceMasked(a, i, mask));\n@@ -3371,1 +3373,1 @@\n-                ra = (short)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (short) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -3378,0 +3380,85 @@\n+    static short FIRST_NONZEROReduce(short[] a, int idx) {\n+        short res = (short) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static short FIRST_NONZEROReduceAll(short[] a) {\n+        short res = (short) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"shortUnaryOpProvider\")\n+    static void FIRST_NONZEROReduceShort256VectorTests(IntFunction<short[]> fa) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        short ra = (short) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (short) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Short256VectorTests::FIRST_NONZEROReduce, Short256VectorTests::FIRST_NONZEROReduceAll);\n+    }\n+    static short FIRST_NONZEROReduceMasked(short[] a, int idx, boolean[] mask) {\n+        short res = (short) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static short FIRST_NONZEROReduceAllMasked(short[] a, boolean[] mask) {\n+        short res = (short) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"shortUnaryOpMaskProvider\")\n+    static void FIRST_NONZEROReduceShort256VectorTestsMasked(IntFunction<short[]> fa, IntFunction<boolean[]> fm) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        short ra = (short) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (short) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Short256VectorTests::FIRST_NONZEROReduceMasked, Short256VectorTests::FIRST_NONZEROReduceAllMasked);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short256VectorTests.java","additions":107,"deletions":20,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -1194,0 +1194,4 @@\n+    static short firstNonZero(short a, short b) {\n+        return Short.compare(a, (short) 0) != 0 ? a : b;\n+    }\n+\n@@ -3209,1 +3213,1 @@\n-            res = (short)Math.min(res, a[i]);\n+            res = (short) Math.min(res, a[i]);\n@@ -3217,2 +3221,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (short)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (short) Math.min(res, MINReduce(a, i));\n@@ -3240,1 +3244,1 @@\n-                ra = (short)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (short) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -3250,2 +3254,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (short)Math.min(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (short) Math.min(res, a[i]);\n@@ -3259,3 +3263,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (short)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (short) Math.min(res, MINReduceMasked(a, i, mask));\n@@ -3285,1 +3288,1 @@\n-                ra = (short)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (short) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -3295,1 +3298,1 @@\n-            res = (short)Math.max(res, a[i]);\n+            res = (short) Math.max(res, a[i]);\n@@ -3303,2 +3306,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (short)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (short) Math.max(res, MAXReduce(a, i));\n@@ -3326,1 +3329,1 @@\n-                ra = (short)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (short) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -3336,2 +3339,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (short)Math.max(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (short) Math.max(res, a[i]);\n@@ -3345,3 +3348,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (short)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (short) Math.max(res, MAXReduceMasked(a, i, mask));\n@@ -3371,1 +3373,1 @@\n-                ra = (short)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (short) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -3378,0 +3380,85 @@\n+    static short FIRST_NONZEROReduce(short[] a, int idx) {\n+        short res = (short) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static short FIRST_NONZEROReduceAll(short[] a) {\n+        short res = (short) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"shortUnaryOpProvider\")\n+    static void FIRST_NONZEROReduceShort512VectorTests(IntFunction<short[]> fa) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        short ra = (short) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (short) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Short512VectorTests::FIRST_NONZEROReduce, Short512VectorTests::FIRST_NONZEROReduceAll);\n+    }\n+    static short FIRST_NONZEROReduceMasked(short[] a, int idx, boolean[] mask) {\n+        short res = (short) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static short FIRST_NONZEROReduceAllMasked(short[] a, boolean[] mask) {\n+        short res = (short) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"shortUnaryOpMaskProvider\")\n+    static void FIRST_NONZEROReduceShort512VectorTestsMasked(IntFunction<short[]> fa, IntFunction<boolean[]> fm) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        short ra = (short) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (short) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Short512VectorTests::FIRST_NONZEROReduceMasked, Short512VectorTests::FIRST_NONZEROReduceAllMasked);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short512VectorTests.java","additions":107,"deletions":20,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -1194,0 +1194,4 @@\n+    static short firstNonZero(short a, short b) {\n+        return Short.compare(a, (short) 0) != 0 ? a : b;\n+    }\n+\n@@ -3209,1 +3213,1 @@\n-            res = (short)Math.min(res, a[i]);\n+            res = (short) Math.min(res, a[i]);\n@@ -3217,2 +3221,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (short)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (short) Math.min(res, MINReduce(a, i));\n@@ -3240,1 +3244,1 @@\n-                ra = (short)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (short) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -3250,2 +3254,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (short)Math.min(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (short) Math.min(res, a[i]);\n@@ -3259,3 +3263,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (short)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (short) Math.min(res, MINReduceMasked(a, i, mask));\n@@ -3285,1 +3288,1 @@\n-                ra = (short)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (short) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -3295,1 +3298,1 @@\n-            res = (short)Math.max(res, a[i]);\n+            res = (short) Math.max(res, a[i]);\n@@ -3303,2 +3306,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (short)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (short) Math.max(res, MAXReduce(a, i));\n@@ -3326,1 +3329,1 @@\n-                ra = (short)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (short) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -3336,2 +3339,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (short)Math.max(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (short) Math.max(res, a[i]);\n@@ -3345,3 +3348,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (short)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (short) Math.max(res, MAXReduceMasked(a, i, mask));\n@@ -3371,1 +3373,1 @@\n-                ra = (short)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (short) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -3378,0 +3380,85 @@\n+    static short FIRST_NONZEROReduce(short[] a, int idx) {\n+        short res = (short) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static short FIRST_NONZEROReduceAll(short[] a) {\n+        short res = (short) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"shortUnaryOpProvider\")\n+    static void FIRST_NONZEROReduceShort64VectorTests(IntFunction<short[]> fa) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        short ra = (short) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (short) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                Short64VectorTests::FIRST_NONZEROReduce, Short64VectorTests::FIRST_NONZEROReduceAll);\n+    }\n+    static short FIRST_NONZEROReduceMasked(short[] a, int idx, boolean[] mask) {\n+        short res = (short) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static short FIRST_NONZEROReduceAllMasked(short[] a, boolean[] mask) {\n+        short res = (short) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"shortUnaryOpMaskProvider\")\n+    static void FIRST_NONZEROReduceShort64VectorTestsMasked(IntFunction<short[]> fa, IntFunction<boolean[]> fm) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        short ra = (short) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (short) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                Short64VectorTests::FIRST_NONZEROReduceMasked, Short64VectorTests::FIRST_NONZEROReduceAllMasked);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short64VectorTests.java","additions":107,"deletions":20,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -1199,0 +1199,4 @@\n+    static short firstNonZero(short a, short b) {\n+        return Short.compare(a, (short) 0) != 0 ? a : b;\n+    }\n+\n@@ -3214,1 +3218,1 @@\n-            res = (short)Math.min(res, a[i]);\n+            res = (short) Math.min(res, a[i]);\n@@ -3222,2 +3226,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (short)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (short) Math.min(res, MINReduce(a, i));\n@@ -3245,1 +3249,1 @@\n-                ra = (short)Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n+                ra = (short) Math.min(ra, av.reduceLanes(VectorOperators.MIN));\n@@ -3255,2 +3259,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (short)Math.min(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (short) Math.min(res, a[i]);\n@@ -3264,3 +3268,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (short)Math.min(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (short) Math.min(res, MINReduceMasked(a, i, mask));\n@@ -3290,1 +3293,1 @@\n-                ra = (short)Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n+                ra = (short) Math.min(ra, av.reduceLanes(VectorOperators.MIN, vmask));\n@@ -3300,1 +3303,1 @@\n-            res = (short)Math.max(res, a[i]);\n+            res = (short) Math.max(res, a[i]);\n@@ -3308,2 +3311,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            res = (short)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (short) Math.max(res, MAXReduce(a, i));\n@@ -3331,1 +3334,1 @@\n-                ra = (short)Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n+                ra = (short) Math.max(ra, av.reduceLanes(VectorOperators.MAX));\n@@ -3341,2 +3344,2 @@\n-            if(mask[i % SPECIES.length()])\n-                res = (short)Math.max(res, a[i]);\n+            if (mask[i % SPECIES.length()])\n+                res = (short) Math.max(res, a[i]);\n@@ -3350,3 +3353,2 @@\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = (short)Math.max(res, a[i]);\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = (short) Math.max(res, MAXReduceMasked(a, i, mask));\n@@ -3376,1 +3378,1 @@\n-                ra = (short)Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n+                ra = (short) Math.max(ra, av.reduceLanes(VectorOperators.MAX, vmask));\n@@ -3383,0 +3385,85 @@\n+    static short FIRST_NONZEROReduce(short[] a, int idx) {\n+        short res = (short) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static short FIRST_NONZEROReduceAll(short[] a) {\n+        short res = (short) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduce(a, i));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"shortUnaryOpProvider\")\n+    static void FIRST_NONZEROReduceShortMaxVectorTests(IntFunction<short[]> fa) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        short ra = (short) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (short) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO));\n+            }\n+        }\n+\n+        assertReductionArraysEquals(r, ra, a,\n+                ShortMaxVectorTests::FIRST_NONZEROReduce, ShortMaxVectorTests::FIRST_NONZEROReduceAll);\n+    }\n+    static short FIRST_NONZEROReduceMasked(short[] a, int idx, boolean[] mask) {\n+        short res = (short) 0;\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = firstNonZero(res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static short FIRST_NONZEROReduceAllMasked(short[] a, boolean[] mask) {\n+        short res = (short) 0;\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = firstNonZero(res, FIRST_NONZEROReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n+    @Test(dataProvider = \"shortUnaryOpMaskProvider\")\n+    static void FIRST_NONZEROReduceShortMaxVectorTestsMasked(IntFunction<short[]> fa, IntFunction<boolean[]> fm) {\n+        short[] a = fa.apply(SPECIES.length());\n+        short[] r = fr.apply(SPECIES.length());\n+        boolean[] mask = fm.apply(SPECIES.length());\n+        VectorMask<Short> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n+        short ra = (short) 0;\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = (short) 0;\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(SPECIES, a, i);\n+                ra = firstNonZero(ra, av.reduceLanes(VectorOperators.FIRST_NONZERO, vmask));\n+            }\n+        }\n+\n+        assertReductionArraysEqualsMasked(r, ra, a, mask,\n+                ShortMaxVectorTests::FIRST_NONZEROReduceMasked, ShortMaxVectorTests::FIRST_NONZEROReduceAllMasked);\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/ShortMaxVectorTests.java","additions":107,"deletions":20,"binary":false,"changes":127,"status":"modified"},{"patch":"@@ -58,2 +58,1 @@\n-reduction_scalar_min=\"Reduction-Scalar-Min-op\"\n-reduction_scalar_max=\"Reduction-Scalar-Max-op\"\n+reduction_scalar_func=\"Reduction-Scalar-op-func\"\n@@ -61,2 +60,1 @@\n-reduction_scalar_min_masked=\"Reduction-Scalar-Masked-Min-op\"\n-reduction_scalar_max_masked=\"Reduction-Scalar-Masked-Max-op\"\n+reduction_scalar_masked_func=\"Reduction-Scalar-Masked-op-func\"\n@@ -64,2 +62,1 @@\n-reduction_op_min=\"Reduction-Min-op\"\n-reduction_op_max=\"Reduction-Max-op\"\n+reduction_op_func=\"Reduction-op-func\"\n@@ -67,2 +64,1 @@\n-reduction_op_min_masked=\"Reduction-Masked-Min-op\"\n-reduction_op_max_masked=\"Reduction-Masked-Max-op\"\n+reduction_op_masked_func=\"Reduction-Masked-op-func\"\n@@ -340,1 +336,1 @@\n-function gen_reduction_op_min {\n+function gen_reduction_op_func {\n@@ -342,12 +338,4 @@\n-  gen_op_tmpl $reduction_scalar_min \"$@\"\n-  gen_op_tmpl $reduction_op_min \"$@\"\n-  gen_op_tmpl $reduction_scalar_min_masked \"$@\"\n-  gen_op_tmpl $reduction_op_min_masked \"$@\"\n-}\n-\n-function gen_reduction_op_max {\n-  echo \"Generating reduction op $1 ($2)...\"\n-  gen_op_tmpl $reduction_scalar_max \"$@\"\n-  gen_op_tmpl $reduction_op_max \"$@\"\n-  gen_op_tmpl $reduction_scalar_max_masked \"$@\"\n-  gen_op_tmpl $reduction_op_max_masked \"$@\"\n+  gen_op_tmpl $reduction_scalar_func \"$@\"\n+  gen_op_tmpl $reduction_op_func \"$@\"\n+  gen_op_tmpl $reduction_scalar_masked_func \"$@\"\n+  gen_op_tmpl $reduction_op_masked_func \"$@\"\n@@ -465,3 +453,3 @@\n-gen_reduction_op_min \"MIN\" \"\" \"\" \"\\$Wideboxtype\\$.\\$MaxValue\\$\"\n-gen_reduction_op_max \"MAX\" \"\" \"\" \"\\$Wideboxtype\\$.\\$MinValue\\$\"\n-#gen_reduction_op \"reduce_FIRST_NONZERO\" \"lanewise_FIRST_NONZERO\" \"{#if[FP]?Double.doubleToLongBits}(a)=0?a:b\" \"\" \"1\"\n+gen_reduction_op_func \"MIN\" \"(\\$type\\$) Math.min\" \"\" \"\\$Wideboxtype\\$.\\$MaxValue\\$\"\n+gen_reduction_op_func \"MAX\" \"(\\$type\\$) Math.max\" \"\" \"\\$Wideboxtype\\$.\\$MinValue\\$\"\n+gen_reduction_op_func \"FIRST_NONZERO\" \"firstNonZero\" \"\" \"(\\$type\\$) 0\"\n","filename":"test\/jdk\/jdk\/incubator\/vector\/gen-template.sh","additions":12,"deletions":24,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -1,21 +0,0 @@\n-        $type$[] a = fa.apply(SPECIES.length());\n-        $type$[] r = fr.apply(SPECIES.length());\n-        boolean[] mask = fm.apply(SPECIES.length());\n-        VectorMask<$Wideboxtype$> vmask = VectorMask.fromArray(SPECIES, mask, 0);\n-        $type$ ra = [[TEST_INIT]];\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.[[TEST]], vmask);\n-            }\n-        }\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            ra = [[TEST_INIT]];\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);\n-                ra = ($type$)Math.min(ra, av.reduceLanes(VectorOperators.[[TEST]], vmask));\n-            }\n-        }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Kernel-Reduction-Masked-Min-op.template","additions":0,"deletions":21,"binary":false,"changes":21,"status":"deleted"},{"patch":"@@ -18,1 +18,1 @@\n-                ra = ($type$)Math.max(ra, av.reduceLanes(VectorOperators.[[TEST]], vmask));\n+                ra = [[TEST_OP]](ra, av.reduceLanes(VectorOperators.[[TEST]], vmask));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Kernel-Reduction-Masked-op-func.template","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Kernel-Reduction-Masked-Max-op.template","status":"renamed"},{"patch":"@@ -1,19 +0,0 @@\n-        $type$[] a = fa.apply(SPECIES.length());\n-        $type$[] r = fr.apply(SPECIES.length());\n-        $type$ ra = [[TEST_INIT]];\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.[[TEST]]);\n-            }\n-        }\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            ra = [[TEST_INIT]];\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);\n-                ra = ($type$)Math.max(ra, av.reduceLanes(VectorOperators.[[TEST]]));\n-            }\n-        }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Kernel-Reduction-Max-op.template","additions":0,"deletions":19,"binary":false,"changes":19,"status":"deleted"},{"patch":"@@ -1,19 +0,0 @@\n-        $type$[] a = fa.apply(SPECIES.length());\n-        $type$[] r = fr.apply(SPECIES.length());\n-        $type$ ra = [[TEST_INIT]];\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);\n-                r[i] = av.reduceLanes(VectorOperators.[[TEST]]);\n-            }\n-        }\n-\n-        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n-            ra = [[TEST_INIT]];\n-            for (int i = 0; i < a.length; i += SPECIES.length()) {\n-                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);\n-                ra = ($type$)Math.min(ra, av.reduceLanes(VectorOperators.[[TEST]]));\n-            }\n-        }\n-\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Kernel-Reduction-Min-op.template","additions":0,"deletions":19,"binary":false,"changes":19,"status":"deleted"},{"patch":"@@ -0,0 +1,19 @@\n+        $type$[] a = fa.apply(SPECIES.length());\n+        $type$[] r = fr.apply(SPECIES.length());\n+        $type$ ra = [[TEST_INIT]];\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);\n+                r[i] = av.reduceLanes(VectorOperators.[[TEST]]);\n+            }\n+        }\n+\n+        for (int ic = 0; ic < INVOC_COUNT; ic++) {\n+            ra = [[TEST_INIT]];\n+            for (int i = 0; i < a.length; i += SPECIES.length()) {\n+                $abstractvectortype$ av = $abstractvectortype$.fromArray(SPECIES, a, i);\n+                ra = [[TEST_OP]](ra, av.reduceLanes(VectorOperators.[[TEST]]));\n+            }\n+        }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Kernel-Reduction-op-func.template","additions":19,"deletions":0,"binary":false,"changes":19,"status":"added"},{"patch":"@@ -1,6 +0,0 @@\n-    @Test(dataProvider = \"$type$UnaryOpMaskProvider\")\n-    static void [[TEST]]Reduce$vectorteststype$Masked(IntFunction<$type$[]> fa, IntFunction<boolean[]> fm) {\n-[[KERNEL]]\n-        assertReductionArraysEqualsMasked(r, ra, a, mask,\n-                $vectorteststype$::[[TEST]]ReduceMasked, $vectorteststype$::[[TEST]]ReduceAllMasked);\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Reduction-Masked-Min-op.template","additions":0,"deletions":6,"binary":false,"changes":6,"status":"deleted"},{"patch":"","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Reduction-Masked-op-func.template","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Reduction-Masked-Max-op.template","status":"renamed"},{"patch":"@@ -1,6 +0,0 @@\n-    @Test(dataProvider = \"$type$UnaryOpProvider\")\n-    static void [[TEST]]Reduce$vectorteststype$(IntFunction<$type$[]> fa) {\n-[[KERNEL]]\n-        assertReductionArraysEquals(r, ra, a,\n-                $vectorteststype$::[[TEST]]Reduce, $vectorteststype$::[[TEST]]ReduceAll);\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Reduction-Min-op.template","additions":0,"deletions":6,"binary":false,"changes":6,"status":"deleted"},{"patch":"@@ -1,19 +0,0 @@\n-    static $type$ [[TEST]]ReduceMasked($type$[] a, int idx, boolean[] mask) {\n-        $type$ res = [[TEST_INIT]];\n-        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = ($type$)Math.max(res, a[i]);\n-        }\n-\n-        return res;\n-    }\n-\n-    static $type$ [[TEST]]ReduceAllMasked($type$[] a, boolean[] mask) {\n-        $type$ res = [[TEST_INIT]];\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = ($type$)Math.max(res, a[i]);\n-        }\n-\n-        return res;\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Reduction-Scalar-Masked-Max-op.template","additions":0,"deletions":19,"binary":false,"changes":19,"status":"deleted"},{"patch":"@@ -1,19 +0,0 @@\n-    static $type$ [[TEST]]ReduceMasked($type$[] a, int idx, boolean[] mask) {\n-        $type$ res = [[TEST_INIT]];\n-        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = ($type$)Math.min(res, a[i]);\n-        }\n-\n-        return res;\n-    }\n-\n-    static $type$ [[TEST]]ReduceAllMasked($type$[] a, boolean[] mask) {\n-        $type$ res = [[TEST_INIT]];\n-        for (int i = 0; i < a.length; i++) {\n-            if(mask[i % SPECIES.length()])\n-                res = ($type$)Math.min(res, a[i]);\n-        }\n-\n-        return res;\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Reduction-Scalar-Masked-Min-op.template","additions":0,"deletions":19,"binary":false,"changes":19,"status":"deleted"},{"patch":"@@ -0,0 +1,18 @@\n+    static $type$ [[TEST]]ReduceMasked($type$[] a, int idx, boolean[] mask) {\n+        $type$ res = [[TEST_INIT]];\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            if (mask[i % SPECIES.length()])\n+                res = [[TEST_OP]](res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static $type$ [[TEST]]ReduceAllMasked($type$[] a, boolean[] mask) {\n+        $type$ res = [[TEST_INIT]];\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = [[TEST_OP]](res, [[TEST]]ReduceMasked(a, i, mask));\n+        }\n+\n+        return res;\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Reduction-Scalar-Masked-op-func.template","additions":18,"deletions":0,"binary":false,"changes":18,"status":"added"},{"patch":"@@ -1,17 +0,0 @@\n-    static $type$ [[TEST]]Reduce($type$[] a, int idx) {\n-        $type$ res = [[TEST_INIT]];\n-        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n-            res = ($type$)Math.max(res, a[i]);\n-        }\n-\n-        return res;\n-    }\n-\n-    static $type$ [[TEST]]ReduceAll($type$[] a) {\n-        $type$ res = [[TEST_INIT]];\n-        for (int i = 0; i < a.length; i++) {\n-            res = ($type$)Math.max(res, a[i]);\n-        }\n-\n-        return res;\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Reduction-Scalar-Max-op.template","additions":0,"deletions":17,"binary":false,"changes":17,"status":"deleted"},{"patch":"@@ -1,17 +0,0 @@\n-    static $type$ [[TEST]]Reduce($type$[] a, int idx) {\n-        $type$ res = [[TEST_INIT]];\n-        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n-            res = ($type$)Math.min(res, a[i]);\n-        }\n-\n-        return res;\n-    }\n-\n-    static $type$ [[TEST]]ReduceAll($type$[] a) {\n-        $type$ res = [[TEST_INIT]];\n-        for (int i = 0; i < a.length; i++) {\n-            res = ($type$)Math.min(res, a[i]);\n-        }\n-\n-        return res;\n-    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Reduction-Scalar-Min-op.template","additions":0,"deletions":17,"binary":false,"changes":17,"status":"deleted"},{"patch":"@@ -0,0 +1,17 @@\n+    static $type$ [[TEST]]Reduce($type$[] a, int idx) {\n+        $type$ res = [[TEST_INIT]];\n+        for (int i = idx; i < (idx + SPECIES.length()); i++) {\n+            res = [[TEST_OP]](res, a[i]);\n+        }\n+\n+        return res;\n+    }\n+\n+    static $type$ [[TEST]]ReduceAll($type$[] a) {\n+        $type$ res = [[TEST_INIT]];\n+        for (int i = 0; i < a.length; i += SPECIES.length()) {\n+            res = [[TEST_OP]](res, [[TEST]]Reduce(a, i));\n+        }\n+\n+        return res;\n+    }\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Reduction-Scalar-op-func.template","additions":17,"deletions":0,"binary":false,"changes":17,"status":"added"},{"patch":"","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Reduction-op-func.template","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Reduction-Max-op.template","status":"renamed"},{"patch":"@@ -1454,0 +1454,4 @@\n+    static $type$ firstNonZero($type$ a, $type$ b) {\n+        return $Boxtype$.compare(a, ($type$) 0) != 0 ? a : b;\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-header.template","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}