{"files":[{"patch":"@@ -1586,0 +1586,4 @@\n+            \/\/ Currently, an InapplicableMethodException occurs.\n+            \/\/ If bestSoFar.kind was ABSENT_MTH, return an InapplicableSymbolError(kind is WRONG_MTH).\n+            \/\/ If bestSoFar.kind was HIDDEN(AccessError)\/WRONG_MTH\/WRONG_MTHS, return an InapplicableSymbolsError(kind is WRONG_MTHS).\n+            \/\/ See JDK-8255968 for more information.\n@@ -1594,1 +1598,0 @@\n-                        \/\/ See JDK-8255968 for more information.\n@@ -1609,0 +1612,4 @@\n+            \/\/ Currently, an AccessError occurs.\n+            \/\/ If bestSoFar.kind was ABSENT_MTH, return an AccessError(kind is HIDDEN).\n+            \/\/ If bestSoFar.kind was HIDDEN(AccessError), WRONG_MTH, WRONG_MTHS, return an InapplicableSymbolsError(kind is WRONG_MTHS).\n+            \/\/ See JDK-8255968 for more information.\n@@ -1614,1 +1621,0 @@\n-                \/\/ See JDK-8255968 for more information.\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -36,0 +36,8 @@\n+ * @run compile -XDrawDiagnostics T8255968_9.java\n+ * @run compile\/fail\/ref=T8255968_10.out -XDrawDiagnostics T8255968_10.java\n+ * @run compile\/fail\/ref=T8255968_11.out -XDrawDiagnostics T8255968_11.java\n+ * @run compile\/fail\/ref=T8255968_12.out -XDrawDiagnostics T8255968_12.java\n+ * @run compile\/fail\/ref=T8255968_13.out -XDrawDiagnostics T8255968_13.java\n+ * @run compile\/fail\/ref=T8255968_14.out -XDrawDiagnostics T8255968_14.java\n+ * @run compile\/fail\/ref=T8255968_15.out -XDrawDiagnostics T8255968_15.java\n+ * @run compile\/fail\/ref=T8255968_16.out -XDrawDiagnostics T8255968_16.java\n","filename":"test\/langtools\/tools\/javac\/T8255968\/T8255968.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -25,1 +25,5 @@\n-    Test c = new Test(0);\n+    TestMethodReference c = Test::new;\n+}\n+\n+interface TestMethodReference {\n+    Test create(int x);\n@@ -29,1 +33,0 @@\n-    private Test(String x) {}\n","filename":"test\/langtools\/tools\/javac\/T8255968\/T8255968_10.java","additions":5,"deletions":2,"binary":false,"changes":7,"previous_filename":"test\/langtools\/tools\/javac\/T8255968\/T8255968_4.java","status":"copied"},{"patch":"@@ -0,0 +1,2 @@\n+T8255968_10.java:25:29: compiler.err.prob.found.req: (compiler.misc.invalid.mref: kindname.constructor, (compiler.misc.report.access: Test(int), private, Test))\n+1 error\n","filename":"test\/langtools\/tools\/javac\/T8255968\/T8255968_10.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"},{"patch":"@@ -0,0 +1,34 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+class T8255968 {\n+    TestMethodReference c = Test::new;\n+}\n+\n+interface TestMethodReference {\n+    Test create(int x);\n+}\n+\n+class Test {\n+    Test(String x) {}  \/\/ If this method is private, compiler will output the same error message.\n+}\n","filename":"test\/langtools\/tools\/javac\/T8255968\/T8255968_11.java","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+T8255968_11.java:25:29: compiler.err.prob.found.req: (compiler.misc.invalid.mref: kindname.constructor, (compiler.misc.cant.apply.symbol: kindname.constructor, Test, java.lang.String, int, kindname.class, Test, (compiler.misc.no.conforming.assignment.exists: (compiler.misc.inconvertible.types: int, java.lang.String))))\n+1 error\n","filename":"test\/langtools\/tools\/javac\/T8255968\/T8255968_11.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+class T8255968 {\n+    TestMethodReference c = Test::new;\n+}\n+\n+interface TestMethodReference {\n+    Test create(int x);\n+}\n+\n+class Test {\n+    private Test(int x) {}  \/\/ This method is not at the end.\n+    Test(String x) {}  \/\/ If this method is private, compiler will output the same error message.\n+}\n","filename":"test\/langtools\/tools\/javac\/T8255968\/T8255968_12.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+T8255968_12.java:25:29: compiler.err.prob.found.req: (compiler.misc.invalid.mref: kindname.constructor, (compiler.misc.cant.apply.symbols: kindname.constructor, Test, int,{(compiler.misc.inapplicable.method: kindname.constructor, Test, Test(int), (compiler.misc.report.access: Test(int), private, Test)),(compiler.misc.inapplicable.method: kindname.constructor, Test, Test(java.lang.String), (compiler.misc.no.conforming.assignment.exists: (compiler.misc.inconvertible.types: int, java.lang.String)))}))\n+1 error\n","filename":"test\/langtools\/tools\/javac\/T8255968\/T8255968_12.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"},{"patch":"@@ -0,0 +1,35 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+class T8255968 {\n+    TestMethodReference c = Test::new;\n+}\n+\n+interface TestMethodReference {\n+    Test create(int x);\n+}\n+\n+class Test {\n+    Test(String x) {}  \/\/ If this method is private, compiler will output the same error message.\n+    private Test(int x) {}  \/\/ This method is at the end.\n+}\n","filename":"test\/langtools\/tools\/javac\/T8255968\/T8255968_13.java","additions":35,"deletions":0,"binary":false,"changes":35,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+T8255968_13.java:25:29: compiler.err.prob.found.req: (compiler.misc.invalid.mref: kindname.constructor, (compiler.misc.cant.apply.symbols: kindname.constructor, Test, int,{(compiler.misc.inapplicable.method: kindname.constructor, Test, Test(int), (compiler.misc.report.access: Test(int), private, Test)),(compiler.misc.inapplicable.method: kindname.constructor, Test, Test(java.lang.String), (compiler.misc.no.conforming.assignment.exists: (compiler.misc.inconvertible.types: int, java.lang.String)))}))\n+1 error\n","filename":"test\/langtools\/tools\/javac\/T8255968\/T8255968_13.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+class T8255968 {\n+    TestMethodReference c = Test::new;\n+}\n+\n+interface TestMethodReference {\n+    Test create(int x);\n+}\n+\n+class Test {\n+    private Test(int x) {}  \/\/ This method is not at the end.\n+    Test(String x) {}  \/\/ If this method is private, compiler will output the same error message.\n+    private Test(int[] x) {}\n+}\n","filename":"test\/langtools\/tools\/javac\/T8255968\/T8255968_14.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+T8255968_14.java:25:29: compiler.err.prob.found.req: (compiler.misc.invalid.mref: kindname.constructor, (compiler.misc.cant.apply.symbols: kindname.constructor, Test, int,{(compiler.misc.inapplicable.method: kindname.constructor, Test, Test(int), (compiler.misc.report.access: Test(int), private, Test)),(compiler.misc.inapplicable.method: kindname.constructor, Test, Test(java.lang.String), (compiler.misc.no.conforming.assignment.exists: (compiler.misc.inconvertible.types: int, java.lang.String))),(compiler.misc.inapplicable.method: kindname.constructor, Test, Test(int[]), (compiler.misc.no.conforming.assignment.exists: (compiler.misc.inconvertible.types: int, int[])))}))\n+1 error\n","filename":"test\/langtools\/tools\/javac\/T8255968\/T8255968_14.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+class T8255968 {\n+    TestMethodReference c = Test::new;\n+}\n+\n+interface TestMethodReference {\n+    Test create(int x);\n+}\n+\n+class Test {\n+    Test(String x) {}  \/\/ If this method is private, compiler will output the same error message.\n+    private Test(int x) {}  \/\/ This method is not at the end.\n+    private Test(int[] x) {}\n+}\n","filename":"test\/langtools\/tools\/javac\/T8255968\/T8255968_15.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+T8255968_15.java:25:29: compiler.err.prob.found.req: (compiler.misc.invalid.mref: kindname.constructor, (compiler.misc.cant.apply.symbols: kindname.constructor, Test, int,{(compiler.misc.inapplicable.method: kindname.constructor, Test, Test(java.lang.String), (compiler.misc.no.conforming.assignment.exists: (compiler.misc.inconvertible.types: int, java.lang.String))),(compiler.misc.inapplicable.method: kindname.constructor, Test, Test(int), (compiler.misc.report.access: Test(int), private, Test)),(compiler.misc.inapplicable.method: kindname.constructor, Test, Test(int[]), (compiler.misc.no.conforming.assignment.exists: (compiler.misc.inconvertible.types: int, int[])))}))\n+1 error\n","filename":"test\/langtools\/tools\/javac\/T8255968\/T8255968_15.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+class T8255968 {\n+    TestMethodReference c = Test::new;\n+}\n+\n+interface TestMethodReference {\n+    Test create(int x);\n+}\n+\n+class Test {\n+    Test(String x) {}  \/\/ If this method is private, compiler will output the same error message.\n+    private Test(int[] x) {}\n+    private Test(int x) {}  \/\/ This method is at the end.\n+}\n","filename":"test\/langtools\/tools\/javac\/T8255968\/T8255968_16.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+T8255968_16.java:25:29: compiler.err.prob.found.req: (compiler.misc.invalid.mref: kindname.constructor, (compiler.misc.cant.apply.symbols: kindname.constructor, Test, int,{(compiler.misc.inapplicable.method: kindname.constructor, Test, Test(java.lang.String), (compiler.misc.no.conforming.assignment.exists: (compiler.misc.inconvertible.types: int, java.lang.String))),(compiler.misc.inapplicable.method: kindname.constructor, Test, Test(int), (compiler.misc.report.access: Test(int), private, Test)),(compiler.misc.inapplicable.method: kindname.constructor, Test, Test(int[]), (compiler.misc.no.conforming.assignment.exists: (compiler.misc.inconvertible.types: int, int[])))}))\n+1 error\n","filename":"test\/langtools\/tools\/javac\/T8255968\/T8255968_16.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"},{"patch":"@@ -29,1 +29,1 @@\n-    private Test(String x) {}\n+    Test(String x) {}  \/\/ If this method is private, compiler will output the same error message.\n","filename":"test\/langtools\/tools\/javac\/T8255968\/T8255968_2.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n-    private Test(int x) {}\n-    private Test(String x) {}\n+    private Test(int x) {}  \/\/ This method is not at the end.\n+    Test(String x) {}  \/\/ If this method is private, compiler will output the same error message.\n","filename":"test\/langtools\/tools\/javac\/T8255968\/T8255968_3.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n-    private Test(String x) {}\n-    private Test(int x) {}\n+    Test(String x) {}  \/\/ If this method is private, compiler will output the same error message.\n+    private Test(int x) {}  \/\/ This method is at the end.\n","filename":"test\/langtools\/tools\/javac\/T8255968\/T8255968_4.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n-    private Test(int x) {}\n-    private Test(String x) {}\n+    private Test(int x) {}  \/\/ This method is not at the end.\n+    Test(String x) {}  \/\/ If this method is private, compiler will output the same error message.\n","filename":"test\/langtools\/tools\/javac\/T8255968\/T8255968_5.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,2 +29,2 @@\n-    private Test(String x) {}\n-    private Test(int x) {}\n+    Test(String x) {}  \/\/ If this method is private, compiler will output the same error message.\n+    private Test(int x) {}  \/\/ This method is not at the end.\n","filename":"test\/langtools\/tools\/javac\/T8255968\/T8255968_6.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-    private Test(String x) {}\n+    Test(String x) {}  \/\/ If this method is private, compiler will output the same error message.\n@@ -31,1 +31,1 @@\n-    private Test(int x) {}\n+    private Test(int x) {}  \/\/ This method is at the end.\n","filename":"test\/langtools\/tools\/javac\/T8255968\/T8255968_7.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,1 +25,5 @@\n-    Test c = new Test(0);\n+    TestMethodReference c = Test::new;\n+}\n+\n+interface TestMethodReference {\n+    Test create(int x);\n@@ -29,2 +33,1 @@\n-    private Test(String x) {}\n-    private Test(int x) {}\n+    Test(int x) {}\n","filename":"test\/langtools\/tools\/javac\/T8255968\/T8255968_9.java","additions":6,"deletions":3,"binary":false,"changes":9,"previous_filename":"test\/langtools\/tools\/javac\/T8255968\/T8255968_4.java","status":"copied"}]}