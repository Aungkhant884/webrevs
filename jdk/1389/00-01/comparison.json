{"files":[{"patch":"@@ -1589,0 +1589,11 @@\n+                case HIDDEN:\n+                    if (bestSoFar instanceof AccessError) {\n+                        \/\/ Add the JCDiagnostic of previous AccessError to the currentResolutionContext\n+                        \/\/ and construct InapplicableSymbolsError.\n+                        \/\/ Intentionally fallthrough.\n+                        \/\/ See JDK-8255968 for more information.\n+                        currentResolutionContext.addInapplicableCandidate(((AccessError) bestSoFar).sym,\n+                                ((AccessError) bestSoFar).getDiagnostic(JCDiagnostic.DiagnosticType.FRAGMENT, null, null, site, null, argtypes, typeargtypes));\n+                    } else {\n+                        return bestSoFar;\n+                    }\n@@ -1596,3 +1607,22 @@\n-            return (bestSoFar.kind == ABSENT_MTH || bestSoFar.kind == WRONG_MTH || bestSoFar.kind == WRONG_MTHS)\n-                ? new AccessError(env, site, sym)\n-                : bestSoFar;\n+            AccessError curAccessError = new AccessError(env, site, sym);\n+            JCDiagnostic curDiagnostic = curAccessError.getDiagnostic(JCDiagnostic.DiagnosticType.FRAGMENT, null, null, site, null, argtypes, typeargtypes);\n+            if (bestSoFar.kind == ABSENT_MTH) {\n+                bestSoFar = curAccessError;\n+            } else if (bestSoFar.kind == WRONG_MTH) {\n+                \/\/ Add the JCDiagnostic of current AccessError to the currentResolutionContext\n+                \/\/ and construct InapplicableSymbolsError.\n+                \/\/ See JDK-8255968 for more information.\n+                currentResolutionContext.addInapplicableCandidate(sym, curDiagnostic);\n+                bestSoFar = new InapplicableSymbolsError(currentResolutionContext);\n+            } else if (bestSoFar.kind == WRONG_MTHS) {\n+                \/\/ Add the JCDiagnostic of current AccessError to the currentResolutionContext\n+                currentResolutionContext.addInapplicableCandidate(sym, curDiagnostic);\n+            } else if (bestSoFar.kind == HIDDEN && bestSoFar instanceof AccessError) {\n+                \/\/ Add the JCDiagnostics of previous and current AccessError to the currentResolutionContext\n+                \/\/ and construct InapplicableSymbolsError.\n+                currentResolutionContext.addInapplicableCandidate(((AccessError) bestSoFar).sym,\n+                        ((AccessError) bestSoFar).getDiagnostic(JCDiagnostic.DiagnosticType.FRAGMENT, null, null, site, null, argtypes, typeargtypes));\n+                currentResolutionContext.addInapplicableCandidate(sym, curDiagnostic);\n+                bestSoFar = new InapplicableSymbolsError(currentResolutionContext);\n+            }\n+            return bestSoFar;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":33,"deletions":3,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -33,0 +33,3 @@\n+ * @run compile\/fail\/ref=T8255968_6.out -XDrawDiagnostics T8255968_6.java\n+ * @run compile\/fail\/ref=T8255968_7.out -XDrawDiagnostics T8255968_7.java\n+ * @run compile -XDrawDiagnostics T8255968_8.java\n","filename":"test\/langtools\/tools\/javac\/T8255968\/T8255968.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-    private Test(String x) {}\n","filename":"test\/langtools\/tools\/javac\/T8255968\/T8255968_1.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-    private Test(int x) {}\n","filename":"test\/langtools\/tools\/javac\/T8255968\/T8255968_2.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-T8255968_2.java:25:14: compiler.err.report.access: Test(int), private, Test\n+T8255968_2.java:25:14: compiler.err.cant.apply.symbol: kindname.constructor, Test, java.lang.String, int, kindname.class, Test, (compiler.misc.no.conforming.assignment.exists: (compiler.misc.inconvertible.types: int, java.lang.String))\n","filename":"test\/langtools\/tools\/javac\/T8255968\/T8255968_2.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-    private Test(int[] x) {}\n","filename":"test\/langtools\/tools\/javac\/T8255968\/T8255968_3.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-T8255968_3.java:25:14: compiler.err.report.access: Test(int), private, Test\n+T8255968_3.java:25:14: compiler.err.cant.apply.symbols: kindname.constructor, Test, int,{(compiler.misc.inapplicable.method: kindname.constructor, Test, Test(int), (compiler.misc.report.access: Test(int), private, Test)),(compiler.misc.inapplicable.method: kindname.constructor, Test, Test(java.lang.String), (compiler.misc.no.conforming.assignment.exists: (compiler.misc.inconvertible.types: int, java.lang.String)))}\n","filename":"test\/langtools\/tools\/javac\/T8255968\/T8255968_3.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-    private Test(int[] x) {}\n","filename":"test\/langtools\/tools\/javac\/T8255968\/T8255968_4.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-T8255968_4.java:25:14: compiler.err.report.access: Test(int), private, Test\n+T8255968_4.java:25:14: compiler.err.cant.apply.symbols: kindname.constructor, Test, int,{(compiler.misc.inapplicable.method: kindname.constructor, Test, Test(int), (compiler.misc.report.access: Test(int), private, Test)),(compiler.misc.inapplicable.method: kindname.constructor, Test, Test(java.lang.String), (compiler.misc.no.conforming.assignment.exists: (compiler.misc.inconvertible.types: int, java.lang.String)))}\n","filename":"test\/langtools\/tools\/javac\/T8255968\/T8255968_4.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+    private Test(int x) {}\n@@ -31,1 +32,0 @@\n-    private Test(int x) {}\n","filename":"test\/langtools\/tools\/javac\/T8255968\/T8255968_5.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-T8255968_5.java:25:14: compiler.err.report.access: Test(int), private, Test\n+T8255968_5.java:25:14: compiler.err.cant.apply.symbols: kindname.constructor, Test, int,{(compiler.misc.inapplicable.method: kindname.constructor, Test, Test(int), (compiler.misc.report.access: Test(int), private, Test)),(compiler.misc.inapplicable.method: kindname.constructor, Test, Test(java.lang.String), (compiler.misc.no.conforming.assignment.exists: (compiler.misc.inconvertible.types: int, java.lang.String))),(compiler.misc.inapplicable.method: kindname.constructor, Test, Test(int[]), (compiler.misc.no.conforming.assignment.exists: (compiler.misc.inconvertible.types: int, int[])))}\n","filename":"test\/langtools\/tools\/javac\/T8255968\/T8255968_5.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"","filename":"test\/langtools\/tools\/javac\/T8255968\/T8255968_6.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/langtools\/tools\/javac\/T8255968\/T8255968_4.java","status":"copied"},{"patch":"@@ -0,0 +1,2 @@\n+T8255968_6.java:25:14: compiler.err.cant.apply.symbols: kindname.constructor, Test, int,{(compiler.misc.inapplicable.method: kindname.constructor, Test, Test(java.lang.String), (compiler.misc.no.conforming.assignment.exists: (compiler.misc.inconvertible.types: int, java.lang.String))),(compiler.misc.inapplicable.method: kindname.constructor, Test, Test(int), (compiler.misc.report.access: Test(int), private, Test)),(compiler.misc.inapplicable.method: kindname.constructor, Test, Test(int[]), (compiler.misc.no.conforming.assignment.exists: (compiler.misc.inconvertible.types: int, int[])))}\n+1 error\n","filename":"test\/langtools\/tools\/javac\/T8255968\/T8255968_6.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"},{"patch":"","filename":"test\/langtools\/tools\/javac\/T8255968\/T8255968_7.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/langtools\/tools\/javac\/T8255968\/T8255968_5.java","status":"copied"},{"patch":"@@ -0,0 +1,2 @@\n+T8255968_7.java:25:14: compiler.err.cant.apply.symbols: kindname.constructor, Test, int,{(compiler.misc.inapplicable.method: kindname.constructor, Test, Test(java.lang.String), (compiler.misc.no.conforming.assignment.exists: (compiler.misc.inconvertible.types: int, java.lang.String))),(compiler.misc.inapplicable.method: kindname.constructor, Test, Test(int), (compiler.misc.report.access: Test(int), private, Test)),(compiler.misc.inapplicable.method: kindname.constructor, Test, Test(int[]), (compiler.misc.no.conforming.assignment.exists: (compiler.misc.inconvertible.types: int, int[])))}\n+1 error\n","filename":"test\/langtools\/tools\/javac\/T8255968\/T8255968_7.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+class Sup {\n+    private void m(String s) {}\n+}\n+\n+class Outer {\n+    void m() {}\n+    void m(Integer s) {}\n+\n+    class Inner extends Sup {\n+        void test() {\n+            m();\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/T8255968\/T8255968_8.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"}]}