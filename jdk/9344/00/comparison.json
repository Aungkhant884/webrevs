{"files":[{"patch":"@@ -3110,4 +3110,0 @@\n-            int lookahead = 0;\n-            while (S.token(lookahead).kind == LPAREN) {\n-                lookahead++;\n-            }\n@@ -3116,1 +3112,1 @@\n-                              analyzePattern(lookahead) == PatternResult.PATTERN;\n+                              analyzePattern(0) == PatternResult.PATTERN;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,169 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+import combo.ComboInstance;\n+import combo.ComboParameter;\n+import combo.ComboTask;\n+import combo.ComboTestHelper;\n+import toolbox.ToolBox;\n+\n+\/*\n+ * @test\n+ * @bug 8269674\n+ * @summary Improve testing of parenthesized patterns\n+ * @library \/tools\/lib \/tools\/javac\/lib\n+ * @modules\n+ *      jdk.compiler\/com.sun.tools.javac.api\n+ *      jdk.compiler\/com.sun.tools.javac.file\n+ *      jdk.compiler\/com.sun.tools.javac.main\n+ *      jdk.compiler\/com.sun.tools.javac.util\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @build combo.ComboTestHelper\n+ * @compile ParenthesizedCombo.java\n+ * @run main\/othervm ParenthesizedCombo\n+ *\/\n+public class ParenthesizedCombo extends ComboInstance<ParenthesizedCombo> {\n+    protected ToolBox tb;\n+\n+    ParenthesizedCombo() {\n+        super();\n+        tb = new ToolBox();\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        new ComboTestHelper<ParenthesizedCombo>()\n+                .withDimension(\"PATTERN_USE\", (x, patternUse) -> x.patternUse = patternUse, PATTERN_USE.values())\n+                .withDimension(\"CASE_LABEL\", (x, caseLabel) -> x.caseLabel = caseLabel, CASE_LABEL.values())\n+                .withDimension(\"TYPE_PATTERN\", (x, typePattern) -> x.typePattern = typePattern, TYPE_PATTERN.values())\n+                .run(ParenthesizedCombo::new);\n+    }\n+\n+    private PATTERN_USE patternUse;\n+    private CASE_LABEL caseLabel;\n+    private TYPE_PATTERN typePattern;\n+\n+    private static final String MAIN_TEMPLATE =\n+        \"\"\"\n+        public class Test {\n+            record StringBox(String s1) {}\n+            record StringBox2(StringBox s) {}\n+            public static void test(Object o) {\n+                #{PATTERN_USE}\n+            }\n+        }\n+        \"\"\";\n+\n+    @Override\n+    protected void doWork() throws Throwable {\n+        ComboTask task = newCompilationTask()\n+                .withSourceFromTemplate(MAIN_TEMPLATE, pname -> switch (pname) {\n+                    case \"PATTERN_USE\" -> patternUse;\n+                    case \"CASE_LABEL\" -> caseLabel;\n+                    case \"TYPE_PATTERN\" -> typePattern;\n+                    default -> throw new UnsupportedOperationException(pname);\n+                })\n+                .withOption(\"--enable-preview\")\n+                .withOption(\"-source\")\n+                .withOption(String.valueOf(Runtime.version().feature()));\n+        task.generate(result -> {\n+            if (result.hasErrors()) {\n+                throw new AssertionError(\"Unexpected result: \" + result.compilationInfo());\n+            }\n+        });\n+    }\n+\n+    public enum TYPE_PATTERN implements ComboParameter {\n+        SIMPLE(\"String s1\"),\n+        PARENTHESIZED_SIMPLE(\"(String s1)\");\n+\n+        private final String code;\n+\n+        private TYPE_PATTERN(String code) {\n+            this.code = code;\n+        }\n+\n+        @Override\n+        public String expand(String optParameter) {\n+            return code;\n+        }\n+    }\n+\n+    public enum CASE_LABEL implements ComboParameter {\n+        TYPE_PATTERN(\"#{TYPE_PATTERN}\"),\n+        PARENTHESIZED_RECORD_PATTERN(\"(StringBox(#{TYPE_PATTERN}))\"),\n+        PARENTHESIZED_RECORD_PATTERN_DEEP(\"(StringBox2(StringBox(#{TYPE_PATTERN})))\");\n+\n+        private final String code;\n+\n+        private CASE_LABEL(String code) {\n+            this.code = code;\n+        }\n+\n+        @Override\n+        public String expand(String optParameter) {\n+            return code;\n+        }\n+    }\n+\n+    public enum PATTERN_USE implements ComboParameter {\n+        SWITCH_EXPR_VOID(\n+            \"\"\"\n+            switch (o) {\n+                case #{CASE_LABEL} when s1.isEmpty() -> System.err.println(\"OK: \" + s1);\n+                    default -> throw new AssertionError();\n+            }\n+            \"\"\"),\n+        SWITCH_STAT_VOID(\n+            \"\"\"\n+            switch (o) {\n+                case #{CASE_LABEL} when s1.isEmpty():\n+                    System.err.println(\"OK: \" + s1);\n+                    break;\n+                default:\n+                    throw new AssertionError();\n+            }\n+            \"\"\"),\n+        SWITCH_EXPR_STRING(\n+            \"\"\"\n+            System.err.println(switch (o) {\n+                case #{CASE_LABEL} when s1.isEmpty() -> \"OK: \" + s1;\n+                    default -> throw new AssertionError();\n+            });\n+            \"\"\"),\n+        IF_INSTANCEOF(\n+            \"\"\"\n+            if (o instanceof #{CASE_LABEL} && s1.isEmpty()) {\n+                System.err.println(\"OK: \" + s1);\n+            }\n+            \"\"\");\n+        private final String body;\n+\n+        private PATTERN_USE(String body) {\n+            this.body = body;\n+        }\n+\n+        @Override\n+        public String expand(String optParameter) {\n+            return body;\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/patterns\/ParenthesizedCombo.java","additions":169,"deletions":0,"binary":false,"changes":169,"status":"added"}]}