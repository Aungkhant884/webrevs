{"files":[{"patch":"@@ -35,0 +35,1 @@\n+uint64_t CompressedKlassPointers::_combo = (uint64_t)-1;\n@@ -38,0 +39,13 @@\n+void CompressedKlassPointers::init_combo() {\n+  assert(UseCompressedClassPointers, \"Why are we here?\");\n+  const uint64_t base_i = (uint64_t)_base;\n+  assert((base_i & ~mask_base) == 0, \"Base not aligned?\");\n+  assert(_shift <= 63, \"Sanity\");\n+\n+  _combo = (uint64_t)_base | (uint64_t)_shift | (1 << bitpos_useccp);\n+\n+  assert(base_from_combo() == _base, \"combo encoding\");\n+  assert(shift_from_combo() == _shift, \"combo encoding\");\n+  assert(use_compressed_class_pointers() == UseCompressedClassPointers, \"combo encoding\");\n+}\n+\n@@ -57,0 +71,1 @@\n+  init_combo();\n@@ -93,0 +108,1 @@\n+  init_combo();\n","filename":"src\/hotspot\/share\/oops\/compressedKlass.cpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -59,0 +59,18 @@\n+  \/\/ Reduce the number of loads generated to decode an nKlass by packing all\n+  \/\/ relevant information (flag, base, shift) into a single 64-bit word. The\n+  \/\/ encoding base is aligned to metaspace reserve alignment (16Mb), so enough\n+  \/\/ space to hide additional info away in low bytes. It even allows us the luxury\n+  \/\/ to use 8 bits for shift and flag each, resulting in 8-bit moves used by the\n+  \/\/ compiler.\n+  \/\/ - Bit  [0-7]   shift\n+  \/\/ - Bit  8       UseCompressedOops\n+  \/\/ - Bits [16-64] the base.\n+  static uint64_t _combo;\n+  static constexpr int base_alignment = 16;\n+  static constexpr uint64_t mask_base = ~right_n_bits(base_alignment);\n+  static constexpr int shift_bitlen = 8; \/\/ read with a mov8\n+  static constexpr int bitpos_useccp = shift_bitlen;\n+  static address  base_from_combo()  { return  (address)(_combo & mask_base); }\n+  static int      shift_from_combo() { return  (int)(_combo & right_n_bits(shift_bitlen)); }\n+  static void init_combo();\n+\n@@ -84,3 +102,4 @@\n-  static address  base()               { return  _base; }\n-  static size_t   range()              { return  _range; }\n-  static int      shift()              { return  _shift; }\n+  static bool     use_compressed_class_pointers() { return (_combo & nth_bit(bitpos_useccp)); }\n+  static address  base()             { return base_from_combo(); }\n+  static int      shift()            { return shift_from_combo(); }\n+  static size_t   range()            { return  _range; }\n","filename":"src\/hotspot\/share\/oops\/compressedKlass.hpp","additions":22,"deletions":3,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-  if (UseCompressedClassPointers) {\n+  if (CompressedKlassPointers::use_compressed_class_pointers()) {\n@@ -98,1 +98,1 @@\n-  if (UseCompressedClassPointers) {\n+  if (CompressedKlassPointers::use_compressed_class_pointers()) {\n@@ -106,1 +106,1 @@\n-  if (UseCompressedClassPointers) {\n+  if (CompressedKlassPointers::use_compressed_class_pointers()) {\n@@ -115,1 +115,1 @@\n-  if (UseCompressedClassPointers) {\n+  if (CompressedKlassPointers::use_compressed_class_pointers()) {\n@@ -124,1 +124,1 @@\n-  if (UseCompressedClassPointers) {\n+  if (CompressedKlassPointers::use_compressed_class_pointers()) {\n@@ -134,1 +134,1 @@\n-  if (UseCompressedClassPointers) {\n+  if (CompressedKlassPointers::use_compressed_class_pointers()) {\n@@ -143,1 +143,1 @@\n-  if (UseCompressedClassPointers) {\n+  if (CompressedKlassPointers::use_compressed_class_pointers()) {\n","filename":"src\/hotspot\/share\/oops\/oop.inline.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}