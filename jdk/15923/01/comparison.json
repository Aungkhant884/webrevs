{"files":[{"patch":"@@ -283,2 +283,20 @@\n-      sub->init_req(1, phase->transform(AddNode::make(in1->in(1), in2->in(1), bt)));\n-      sub->init_req(2, phase->transform(AddNode::make(in1->in(2), in2->in(2), bt)));\n+      Node* sub_in1;\n+      PhaseIterGVN* igvn = phase->is_IterGVN();\n+      \/\/ During IGVN, if both inputs of the new AddNode are a tree of SubNodes, this same transformation will be applied\n+      \/\/ to every node of the tree. Calling transform() causes the transformation to be applied recursively, once per\n+      \/\/ tree node whether some subtrees are identical or not. Pushing to the IGVN worklist instead, causes the transform\n+      \/\/ to be applied once per unique subtrees (because all uses of a subtree are updated with the result of the\n+      \/\/ transformation). In case of a large tree, this can make a difference in compilation time.\n+      if (igvn != nullptr) {\n+        sub_in1 = igvn->register_new_node_with_optimizer(AddNode::make(in1->in(1), in2->in(1), bt));\n+      } else {\n+        sub_in1 = phase->transform(AddNode::make(in1->in(1), in2->in(1), bt));\n+      }\n+      Node* sub_in2;\n+      if (igvn != nullptr) {\n+        sub_in2 = igvn->register_new_node_with_optimizer(AddNode::make(in1->in(2), in2->in(2), bt));\n+      } else {\n+        sub_in2 = phase->transform(AddNode::make(in1->in(2), in2->in(2), bt));\n+      }\n+      sub->init_req(1, sub_in1);\n+      sub->init_req(2, sub_in2);\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":20,"deletions":2,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -0,0 +1,50 @@\n+\/*\n+ * Copyright (c) 2023, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8316396\n+ * @summary Endless loop in C2 compilation triggered by AddNode::IdealIL\n+ * @run main\/othervm  -XX:CompileCommand=compileonly,*TestLargeTreeOfSubNodes*::test -XX:-TieredCompilation -Xcomp TestLargeTreeOfSubNodes\n+ *\/\n+\n+public class TestLargeTreeOfSubNodes {\n+    public static long res = 0;\n+\n+    public static void test() {\n+        int a = -1, b = 0;\n+        for (int i = 0; i < 100; ++i) {\n+            for (int j = 0; j < 10; ++j) {\n+                for (int k = 0; k < 1; ++k) {\n+                }\n+                b -= a;\n+                a += b;\n+            }\n+        }\n+        res = a;\n+    }\n+\n+    public static void main(String[] args) {\n+        test();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestLargeTreeOfSubNodes.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"added"}]}