{"files":[{"patch":"@@ -623,0 +623,1 @@\n+            Objects.requireNonNull(interfaces);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Proxy.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -48,0 +48,1 @@\n+import java.util.Objects;\n@@ -184,0 +185,1 @@\n+        Objects.requireNonNull(interfaces);\n@@ -215,5 +217,2 @@\n-     * Return an array of the class and interface names from an array of Classes.\n-     *\n-     * @param classes an array of classes or interfaces\n-     * @return the array of class and interface names; or null if classes is\n-     * null or empty\n+     * {@return the {@code ClassDesc} of the given type}\n+     * @param type the {@code Class} object\n@@ -221,4 +220,2 @@\n-    private static List<ClassDesc> typeNames(List<Class<?>> classes) {\n-        if (classes == null || classes.isEmpty())\n-            return List.of();\n-        return classes.stream().map(cls -> ClassDesc.ofDescriptor(cls.descriptorString())).toList();\n+    private static ClassDesc toClassDesc(Class<?> type) {\n+        return ClassDesc.ofDescriptor(type.descriptorString());\n@@ -390,1 +387,1 @@\n-        return uniqueList.stream().map(ex -> ClassDesc.ofDescriptor(ex.descriptorString())).toList();\n+        return uniqueList.stream().map(ProxyGenerator::toClassDesc).toList();\n@@ -434,2 +431,2 @@\n-                                cls.isInterface(),\n-                                superCls == null ? null : ClassDesc.ofDescriptor(superCls.descriptorString()));\n+                                                                             cls.isInterface(),\n+                                                                             superCls == null ? null : toClassDesc(superCls));\n@@ -443,1 +440,1 @@\n-            clb.withInterfaceSymbols(typeNames(interfaces));\n+            clb.withInterfaceSymbols(interfaces.stream().map(ProxyGenerator::toClassDesc).toList());\n@@ -656,2 +653,2 @@\n-                    method.getSharedParameterTypes(), method.getReturnType(),\n-                    method.getSharedExceptionTypes(), method.getDeclaringClass(), methodFieldName);\n+                 method.getSharedParameterTypes(), method.getReturnType(),\n+                 method.getSharedExceptionTypes(), method.getDeclaringClass(), methodFieldName);\n@@ -664,2 +661,3 @@\n-            MethodTypeDesc desc = MethodTypeDesc.ofDescriptor(MethodType.methodType(returnType, parameterTypes).toMethodDescriptorString());\n-            int accessFlags = (method.isVarArgs()) ? ACC_VARARGS | ACC_PUBLIC | ACC_FINAL : ACC_PUBLIC | ACC_FINAL;\n+            MethodTypeDesc desc = MethodType.methodType(returnType, parameterTypes).describeConstable().orElseThrow();\n+            int accessFlags = (method.isVarArgs()) ? ACC_VARARGS | ACC_PUBLIC | ACC_FINAL\n+                                                   : ACC_PUBLIC | ACC_FINAL;\n@@ -669,1 +667,1 @@\n-                List<ClassEntry> exceptionClassEntries = typeNames(Arrays.asList(exceptionTypes))\n+                List<ClassEntry> exceptionClassEntries = Arrays.asList(exceptionTypes)\n@@ -671,0 +669,1 @@\n+                        .map(ProxyGenerator::toClassDesc)\n@@ -748,1 +747,1 @@\n-                cob.checkcast(ClassDesc.ofDescriptor(type.descriptorString()))\n+                cob.checkcast(toClassDesc(type))\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/ProxyGenerator.java","additions":18,"deletions":19,"binary":false,"changes":37,"status":"modified"}]}