{"files":[{"patch":"@@ -773,1 +773,1 @@\n-     * The class of the {@code body} element for the page listing any deprecated items.\n+     * The class of the {@code body} element for the page listing any preview items.\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/HtmlStyle.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,221 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\n+\/*\n+ * @test\n+ * @bug 8267574\n+ * @summary check stylesheet names against HtmlStyle\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.doclets.formats.html.markup\n+ *          jdk.javadoc\/jdk.javadoc.internal.doclets.toolkit.resources:open\n+ *\/\n+\n+import java.io.BufferedWriter;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.PrintWriter;\n+import java.net.URL;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Arrays;\n+import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import jdk.javadoc.internal.doclets.formats.html.markup.HtmlStyle;\n+\n+\/**\n+ * This test compares the set of CSS class names defined in HtmlStyle\n+ * and other files (such as search.js) against the set of CSS class names\n+ * defined in the main stylesheet.css provided by the doclet.\n+ *\n+ * The goal is to detect \"unexpected\" discrepancies between the two sets.\n+ * \"Expected\" discrepancies are taken into account, but may indicate a\n+ * need to resolve the discrepancy.\n+ *\n+ * The test does not take into direct account the recent introduction of\n+ * CSS constructs like section {@code [class$=\"-details\"]}\n+ *\/\n+public class CheckStylesheetClasses {\n+    public static void main(String... args) throws Exception {\n+        CheckStylesheetClasses c = new CheckStylesheetClasses();\n+        c.run();\n+    }\n+\n+    int errors = 0;\n+\n+    void run() throws Exception {\n+        Set<String> htmlStyleNames = getHtmlStyleNames();\n+        Set<String> styleSheetNames = getStylesheetNames();\n+\n+        System.err.println(\"found \" + htmlStyleNames.size() + \" names in HtmlStyle\");\n+        System.err.println(\"found \" + styleSheetNames.size() + \" names in stylesheet\");\n+\n+        \/\/ Write the lists to external files for the benefit of external diff tools:\n+        \/\/ for example, to compare against the CSS class names used in generated documentation.\n+        \/\/ To find the classes used in a directory containing HTML files, use something like\n+        \/\/      find $DIRECTORY -name \\*.html | \\\n+        \/\/          xargs grep -o 'class=\"[^\"]*\"' | \\\n+        \/\/          sed -e 's\/^[^\"]*\"\/\/' -e 's\/\".*$\/\/' | \\\n+        \/\/          while read line ; do for w in $line ; do echo $w ; done ; done | \\\n+        \/\/          sort -u\n+\n+        try (BufferedWriter out = Files.newBufferedWriter(Path.of(\"htmlStyleNames.txt\"));\n+                PrintWriter pw = new PrintWriter(out)) {\n+            htmlStyleNames.forEach(pw::println);\n+        }\n+\n+        try (BufferedWriter out = Files.newBufferedWriter(Path.of(\"styleSheetNames.txt\"));\n+             PrintWriter pw = new PrintWriter(out)) {\n+            styleSheetNames.forEach(pw::println);\n+        }\n+\n+        \/\/ Remove names from htmlStyleNames if they are valid names generated by the doclet,\n+        \/\/ even if they do not by default require a style to be defined in the stylesheet.\n+        \/\/ In general, names in these lists are worthy of attention to see if they *should*\n+        \/\/ be defined in the stylesheet, especially when the names exist in a family of\n+        \/\/ related items: related by name or by function.\n+\n+        \/\/ the page names are provided to override a style on a specific page;\n+        \/\/ only some are used in the stylesheet\n+        htmlStyleNames.removeIf(s -> s.endsWith(\"-page\") && !styleSheetNames.contains(s));\n+\n+        \/\/ descriptions; class-description is used;\n+        \/\/ surprisingly?  module-description and package-description are not\n+        htmlStyleNames.removeIf(s -> s.endsWith(\"-description\") && !styleSheetNames.contains(s));\n+\n+        \/\/ help page\n+        htmlStyleNames.removeIf(s -> s.startsWith(\"help-\") && !styleSheetNames.contains(s));\n+\n+        \/\/ summary and details tables; styles for these may be present in the stylesheet\n+        \/\/ using constructs like these:\n+        \/\/      .summary section[class$=\"-summary\"], .details section[class$=\"-details\"],\n+        htmlStyleNames.removeIf(s -> s.endsWith(\"-details\"));\n+        htmlStyleNames.removeIf(s -> s.endsWith(\"-summary\") && !styleSheetNames.contains(s));\n+\n+        \/\/ signature classes\n+        removeAll(htmlStyleNames, \"annotations\", \"element-name\", \"extends-implements\",\n+                \"modifiers\", \"permits\", \"return-type\");\n+\n+        \/\/ misc: these are defined in HtmlStyle, and used by the doclet\n+        removeAll(htmlStyleNames, \"col-plain\", \"details-table\", \"external-link\",\n+                \"hierarchy\", \"index\", \"package-uses\", \"packages\", \"permits-note\",\n+                \"serialized-package-container\", \"source-container\");\n+\n+        \/\/ Remove names from styleSheetNames if they are false positives,\n+        \/\/ or used by other code (i.e. not HtmlStyle),\n+        \/\/ or if they are unused and therefore candidates to be deleted.\n+\n+        \/\/ false positives: file extensions and URL components\n+        removeAll(styleSheetNames, \"css\", \"png\", \"w3\");\n+\n+        \/\/ for doc-comment authors; maybe worthy of inclusion in HtmlStyle, just to be documented\n+        removeAll(styleSheetNames, \"borderless\", \"plain\", \"striped\");\n+\n+        \/\/ used in search.js; may be worth documenting in HtmlStyle\n+        removeAll(styleSheetNames, \"result-highlight\", \"result-item\",\n+                \"search-tag-desc-result\", \"search-tag-holder-result\",\n+                \"ui-autocomplete\", \"ui-autocomplete-category\",\n+                \"watermark\");\n+\n+        \/\/ very JDK specific\n+        styleSheetNames.remove(\"module-graph\");\n+\n+        \/\/ apparently unused\n+        \/\/ \"tab\" is commented implying it is in the header\/footer, but\n+        \/\/ (a) it is a poorly chosen name\n+        \/\/ (b) it does not seem to be used in make\/Docs.gmk or anywhere else\n+        removeAll(styleSheetNames, \"all-classes-container\", \"all-packages-container\",\n+                \"bottom-nav\", \"clear\", \"constant-values-container\", \"deprecated-content\",\n+                \"footer\", \"hidden\", \"override-specify-label\", \"serialized-class-details\",\n+                \"tab\", \"table-sub-heading-color\");\n+\n+        boolean ok = check(htmlStyleNames, \"HtmlStyle\", styleSheetNames, \"stylesheet\")\n+                    & check(styleSheetNames, \"stylesheet\", htmlStyleNames, \"HtmlStyle\");\n+\n+        if (!ok) {\n+            throw new Exception(\"differences found\");\n+        }\n+\n+        if (errors > 0) {\n+            throw new Exception(errors + \" errors found\");\n+        }\n+    }\n+\n+    boolean check(Set<String> s1, String l1, Set<String> s2, String l2) {\n+        boolean equal = true;\n+        for (String s : s1) {\n+            if (!s2.contains(s)) {\n+                System.err.println(\"In \" + l1 + \" but not \" + l2 + \": \" + s);\n+                equal = false;\n+            }\n+        }\n+        return equal;\n+    }\n+\n+    \/**\n+     * Remove all the names from the set, giving a message for any that were not found.\n+     *\/\n+    void removeAll(Set<String> set, String... names) {\n+        for (String name : names) {\n+            if (!set.remove(name)) {\n+                error(\"name not found in set: \" + name);\n+            }\n+        }\n+    }\n+\n+    void error(String message) {\n+        System.err.println(\"error: \" + message);\n+        errors++;\n+    }\n+\n+    Set<String> getHtmlStyleNames() {\n+        return Arrays.stream(HtmlStyle.values())\n+                .map(HtmlStyle::cssName)\n+                .collect(Collectors.toCollection(TreeSet::new));\n+    }\n+\n+    Set<String> getStylesheetNames() throws IOException {\n+        Set<String> names = new TreeSet<>();\n+        String stylesheet = \"\/jdk\/javadoc\/internal\/doclets\/toolkit\/resources\/stylesheet.css\";\n+        URL url = HtmlStyle.class.getResource(stylesheet);\n+        readStylesheet(url, names);\n+        return names;\n+    }\n+\n+    private void readStylesheet(URL resource, Set<String> names) throws IOException {\n+        try (InputStream in = resource.openStream()) {\n+            if (in == null) {\n+                throw new AssertionError(\"Cannot find or access resource \" + resource);\n+            }\n+            String s = new String(in.readAllBytes());\n+            Pattern p = Pattern.compile(\"(?i)(\\\\s|([a-z][a-z0-9-]*))\\\\.(?<name>[a-z0-9-]+)\\\\b\");\n+            Matcher m = p.matcher(s);\n+            while (m.find()) {\n+                names.add(m.group(\"name\"));\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/checkStylesheetClasses\/CheckStylesheetClasses.java","additions":221,"deletions":0,"binary":false,"changes":221,"status":"added"}]}