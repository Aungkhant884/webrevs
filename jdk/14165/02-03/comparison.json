{"files":[{"patch":"@@ -28,0 +28,3 @@\n+import jdk.internal.javac.PreviewFeature;\n+import jdk.internal.misc.PreviewFeatures;\n+\n@@ -191,1 +194,1 @@\n- * A {@code class} file representing an unnamed class is generated by\n+ * A {@code class} file representing an {@linkplain #isUnnamedClass unnamed class} is generated by\n@@ -196,1 +199,1 @@\n- * form, the various name-related methods of {@code java.lang.Class}\n+ * form, several of the name-related methods of {@code java.lang.Class}\n@@ -208,4 +211,6 @@\n- * HelloWorld}, the methods to get the {@linkplain #getName name},\n- * {@linkplain #getTypeName type name}, {@linkplain #getSimpleName\n- * simple name}, and {@linkplain #getCanonicalName canonical name} all\n- * return results equal to {@code \"HelloWorld\"}.\n+ * HelloWorld}, the methods to get the {@linkplain #getName name} and\n+ * {@linkplain #getTypeName type name}\n+ * return results equal to {@code \"HelloWorld\"} while the\n+ * {@linkplain #getSimpleName\n+ * simple name} of such an unnamed class is the empty string and the\n+ * {@linkplain #getCanonicalName canonical name} is {@code null}.\n@@ -1745,1 +1750,1 @@\n-     * {@linkplain #isAnonymousClass() anonymous}.\n+     * {@linkplain #isAnonymousClass() anonymous} or {@linkplain #isUnnamedClass() unnamed}.\n@@ -1758,0 +1763,3 @@\n+        if (isUnnamedClass()) {\n+            return \"\";\n+        }\n@@ -1807,0 +1815,1 @@\n+     * <li>an {@linkplain #isUnnamedClass() unnamed class}\n@@ -1826,0 +1835,3 @@\n+        if (isUnnamedClass()) {\n+            return null;\n+        }\n@@ -1860,0 +1872,16 @@\n+    \/**\n+     * {@return {@code true} if and only if the underlying class\n+     * is an unnamed class}\n+     *\n+     * @apiNote\n+     * An unnamed class is not an {@linkplain #isAnonymousClass anonymous class}.\n+     *\n+     * @since 21\n+     *\/\n+    @PreviewFeature(feature=PreviewFeature.Feature.UNNAMED_CLASSES,\n+                    reflective=true)\n+    public boolean isUnnamedClass() {\n+        return isSynthetic() && PreviewFeatures.isEnabled() && isTopLevelClass();\n+    }\n+\n+\n@@ -1866,0 +1894,1 @@\n+     * An anonymous class is not an {@linkplain #isUnnamedClass() unnamed class}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":36,"deletions":7,"binary":false,"changes":43,"status":"modified"}]}