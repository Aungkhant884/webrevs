{"files":[{"patch":"@@ -28,0 +28,3 @@\n+import jdk.internal.javac.PreviewFeature;\n+import jdk.internal.misc.PreviewFeatures;\n+\n@@ -160,1 +163,2 @@\n- * <p> A class or interface created by the invocation of\n+ * <h2><a id=hiddenClasses>Hidden Classes<\/a><\/h2>\n+ * A class or interface created by the invocation of\n@@ -188,0 +192,26 @@\n+ * <h2><a id=unnamedClasses>Unnamed Classes<\/a><\/h2>\n+ *\n+ * A {@code class} file representing an {@linkplain #isUnnamedClass unnamed class} is generated by\n+ * a Java compiler from a source file for an unnamed class. The {@code\n+ * Class} object representing an unnamed class is top-level,\n+ * {@linkplain #isSynthetic synthetic}, and {@code final}. While an\n+ * unnamed class does <em>not<\/em> have a name in its Java source\n+ * form, several of the name-related methods of {@code java.lang.Class}\n+ * do return non-null and non-empty results for the {@code Class}\n+ * object representing an unnamed class.\n+ *\n+ * Conventionally, a Java compiler, starting from a source file for an\n+ * unnamed class, say {@code HelloWorld.java}, creates a\n+ * similarly-named {@code class} file, {@code HelloWorld.class}, where\n+ * the class stored in that {@code class} file is named {@code\n+ * \"HelloWorld\"}, matching the base names of the source and {@code\n+ * class} files.\n+ *\n+ * For the {@code Class} object for an unnamed class {@code\n+ * HelloWorld}, the methods to get the {@linkplain #getName name} and\n+ * {@linkplain #getTypeName type name}\n+ * return results equal to {@code \"HelloWorld\"} while the\n+ * {@linkplain #getSimpleName\n+ * simple name} of such an unnamed class is the empty string and the\n+ * {@linkplain #getCanonicalName canonical name} is {@code null}.\n+ *\n@@ -1720,1 +1750,1 @@\n-     * {@linkplain #isAnonymousClass() anonymous}.\n+     * {@linkplain #isAnonymousClass() anonymous} or {@linkplain #isUnnamedClass() unnamed}.\n@@ -1733,0 +1763,3 @@\n+        if (isUnnamedClass()) {\n+            return \"\";\n+        }\n@@ -1782,0 +1815,1 @@\n+     * <li>an {@linkplain #isUnnamedClass() unnamed class}\n@@ -1801,0 +1835,3 @@\n+        if (isUnnamedClass()) {\n+            return null;\n+        }\n@@ -1835,0 +1872,16 @@\n+    \/**\n+     * {@return {@code true} if and only if the underlying class\n+     * is an unnamed class}\n+     *\n+     * @apiNote\n+     * An unnamed class is not an {@linkplain #isAnonymousClass anonymous class}.\n+     *\n+     * @since 21\n+     *\/\n+    @PreviewFeature(feature=PreviewFeature.Feature.UNNAMED_CLASSES,\n+                    reflective=true)\n+    public boolean isUnnamedClass() {\n+        return isSynthetic() && PreviewFeatures.isEnabled() && isTopLevelClass();\n+    }\n+\n+\n@@ -1841,0 +1894,1 @@\n+     * An anonymous class is not an {@linkplain #isUnnamedClass() unnamed class}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":56,"deletions":2,"binary":false,"changes":58,"status":"modified"}]}