{"files":[{"patch":"@@ -1,81 +0,0 @@\n-\/*\n- * Copyright (c) 2001, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.reflect;\n-\n-\/** Assists in iterating down a method's signature *\/\n-\n-class SignatureIterator {\n-    private final String sig;\n-    private int idx;\n-\n-    public SignatureIterator(String sig) {\n-        this.sig = sig;\n-        reset();\n-    }\n-\n-    public void reset() {\n-        idx = 1;\n-    }\n-\n-    public boolean atEnd() {\n-        return sig.charAt(idx) == ')';\n-    }\n-\n-    public String next() {\n-        if (atEnd()) return null;\n-        char c = sig.charAt(idx);\n-        if (c != '[' && c != 'L') {\n-            ++idx;\n-            return String.valueOf(c);\n-        }\n-        \/\/ Walk forward to end of entry\n-        int endIdx = idx;\n-        if (c == '[') {\n-            while ((c = sig.charAt(endIdx)) == '[') {\n-                endIdx++;\n-            }\n-        }\n-\n-        if (c == 'L') {\n-            while (sig.charAt(endIdx) != ';') {\n-                endIdx++;\n-            }\n-        }\n-\n-        int beginIdx = idx;\n-        idx = endIdx + 1;\n-        return sig.substring(beginIdx, idx);\n-    }\n-\n-    \/** Should only be called when atEnd() is true. Does not change\n-        state of iterator. *\/\n-    public String returnType() {\n-        if (!atEnd()) {\n-            throw new InternalError(\"Illegal use of SignatureIterator\");\n-        }\n-        return sig.substring(idx + 1, sig.length());\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/SignatureIterator.java","additions":0,"deletions":81,"binary":false,"changes":81,"status":"deleted"}]}