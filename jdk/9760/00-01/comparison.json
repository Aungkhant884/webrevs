{"files":[{"patch":"@@ -189,0 +189,2 @@\n+\n+  _gc_tracer = new (ResourceObj::C_HEAP, mtGC) DefNewTracer();\n@@ -531,2 +533,1 @@\n-  DefNewTracer gc_tracer;\n-  gc_tracer.report_gc_start(heap->gc_cause(), _gc_timer->gc_start());\n+  _gc_tracer->report_gc_start(heap->gc_cause(), _gc_timer->gc_start());\n@@ -550,1 +551,1 @@\n-  heap->trace_heap_before_gc(&gc_tracer);\n+  heap->trace_heap_before_gc(_gc_tracer);\n@@ -593,2 +594,2 @@\n-  gc_tracer.report_gc_reference_stats(stats);\n-  gc_tracer.report_tenuring_threshold(tenuring_threshold());\n+  _gc_tracer->report_gc_reference_stats(stats);\n+  _gc_tracer->report_tenuring_threshold(tenuring_threshold());\n@@ -648,1 +649,1 @@\n-    gc_tracer.report_promotion_failed(_promotion_failed_info);\n+    _gc_tracer->report_promotion_failed(_promotion_failed_info);\n@@ -656,1 +657,1 @@\n-  heap->trace_heap_after_gc(&gc_tracer);\n+  heap->trace_heap_after_gc(_gc_tracer);\n@@ -660,1 +661,1 @@\n-  gc_tracer.report_gc_end(_gc_timer->gc_end(), _gc_timer->time_partitions());\n+  _gc_tracer->report_gc_end(_gc_timer->gc_end(), _gc_timer->time_partitions());\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.cpp","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+class DefNewTracer;\n@@ -143,0 +144,2 @@\n+  DefNewTracer* _gc_tracer;\n+\n@@ -329,0 +332,2 @@\n+  DefNewTracer* gc_tracer() const { return _gc_tracer; }\n+\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -93,2 +93,0 @@\n-GCTraceCPUTime::GCTraceCPUTime() { GCTraceCPUTime(nullptr); }\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/gcTraceTime.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n-  GCTraceCPUTime();\n","filename":"src\/hotspot\/share\/gc\/shared\/gcTraceTime.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+#include \"gc\/serial\/genMarkSweep.hpp\"\n@@ -538,1 +539,1 @@\n-    GCTraceCPUTime tcpu;\n+    GCTraceCPUTime tcpu(((DefNewGeneration*)_young_gen)->gc_tracer());\n@@ -588,1 +589,1 @@\n-    GCTraceCPUTime tcpu;\n+    GCTraceCPUTime tcpu(GenMarkSweep::gc_tracer());\n","filename":"src\/hotspot\/share\/gc\/shared\/genCollectedHeap.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import jdk.test.whitebox.WhiteBox;\n@@ -33,1 +34,1 @@\n- * @test TestGCCpuTimeEvent\n+ * @test id=Serial\n@@ -36,1 +37,1 @@\n- * @requires vm.gc == \"G1\" | vm.gc == null | vm.gc == \"Parallel\"\n+ * @requires vm.gc.Serial\n@@ -38,1 +39,14 @@\n- * @run main\/othervm -Xmx32m -XX:+UseG1GC jdk.jfr.event.gc.detailed.TestGCCpuTimeEvent\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -Xmx32m -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+UseSerialGC jdk.jfr.event.gc.detailed.TestGCCpuTimeEvent\n+ *\/\n+\n+\/**\n+ * @test id=Parallel\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @requires vm.gc.Parallel\n+ * @library \/test\/lib \/test\/jdk\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -Xmx32m -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+UseParallelGC jdk.jfr.event.gc.detailed.TestGCCpuTimeEvent\n@@ -40,2 +54,0 @@\n-public class TestGCCpuTimeEvent {\n-    private final static String EVENT_NAME = EventNames.GCCpuTime;\n@@ -43,1 +55,13 @@\n-    public static byte[] bytes;\n+\/**\n+ * @test id=G1\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @requires vm.gc.G1\n+ * @library \/test\/lib \/test\/jdk\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -Xmx32m -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+UseG1GC jdk.jfr.event.gc.detailed.TestGCCpuTimeEvent\n+ *\/\n+\n+public class TestGCCpuTimeEvent {\n+    private static final String EVENT_NAME = EventNames.GCCpuTime;\n@@ -53,4 +77,2 @@\n-            \/\/ Allocate large objects to run the GC\n-            for (int i = 0; i < 100; i++) {\n-                bytes  = new byte[1024 * 1024];\n-            }\n+            \/\/ Guarantee one young GC.\n+            WhiteBox.getWhiteBox().youngGC();\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/detailed\/TestGCCpuTimeEvent.java","additions":32,"deletions":10,"binary":false,"changes":42,"status":"modified"}]}