{"files":[{"patch":"@@ -1108,1 +1108,1 @@\n-  G1FullGCMark gc_mark;\n+  GCIdMark gc_id;\n@@ -2863,1 +2863,1 @@\n-  GCTraceCPUTime tcpu;\n+  GCTraceCPUTime tcpu(_gc_tracer_stw);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -605,0 +605,2 @@\n+  G1OldTracer* gc_tracer_cm() const { return _gc_tracer_cm; }\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -117,1 +117,3 @@\n-    _scope(heap->monitoring_support(), explicit_gc, clear_soft_refs, do_maximal_compaction),\n+    _tracer(),\n+    _cpu_time(&_tracer),\n+    _scope(heap->monitoring_support(), explicit_gc, clear_soft_refs, do_maximal_compaction, &_tracer),\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -61,10 +61,0 @@\n-\/\/ Full GC Mark that holds GC id and CPU time trace. Needs to be separate\n-\/\/ from the G1FullCollector and G1FullGCScope to allow the Full GC logging\n-\/\/ to have the same structure as the Young GC logging.\n-class G1FullGCMark : StackObj {\n-  GCIdMark       _gc_id;\n-  GCTraceCPUTime _cpu_time;\n-public:\n-  G1FullGCMark() : _gc_id(), _cpu_time() { }\n-};\n-\n@@ -74,0 +64,2 @@\n+  G1FullGCTracer            _tracer;\n+  GCTraceCPUTime            _cpu_time;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.hpp","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -41,1 +41,2 @@\n-                             bool do_maximal_compaction) :\n+                             bool do_maximal_compaction,\n+                             G1FullGCTracer* tracer) :\n@@ -47,1 +48,1 @@\n-    _tracer(),\n+    _tracer(tracer),\n@@ -49,1 +50,1 @@\n-    _tracer_mark(&_timer, &_tracer),\n+    _tracer_mark(&_timer, _tracer),\n@@ -70,1 +71,1 @@\n-  return &_tracer;\n+  return _tracer;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCScope.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-  G1FullGCTracer          _tracer;\n+  G1FullGCTracer*         _tracer;\n@@ -66,1 +66,2 @@\n-                bool do_maximal_compaction);\n+                bool do_maximal_compaction,\n+                G1FullGCTracer* tracer);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCScope.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+#include \"gc\/g1\/g1Trace.hpp\"\n@@ -175,1 +176,0 @@\n-  GCTraceCPUTime tcpu;\n@@ -177,0 +177,1 @@\n+  GCTraceCPUTime tcpu(g1h->concurrent_mark()->gc_tracer_cm());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1VMOperations.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1748,1 +1748,1 @@\n-    GCTraceCPUTime tcpu;\n+    GCTraceCPUTime tcpu(&_gc_tracer);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -408,1 +408,1 @@\n-    GCTraceCPUTime tcpu;\n+    GCTraceCPUTime tcpu(&_gc_tracer);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psScavenge.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,4 @@\n+bool GCTracer::should_report_cpu_time_event() const {\n+  return should_send_cpu_time_event();\n+}\n+\n@@ -62,0 +66,4 @@\n+void GCTracer::report_cpu_time_event(double user_time, double system_time, double real_time) const {\n+  send_cpu_time_event(user_time, system_time, real_time);\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/gcTrace.cpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -99,0 +99,1 @@\n+  bool should_report_cpu_time_event() const;\n@@ -105,0 +106,1 @@\n+  void report_cpu_time_event(double user_time, double system_time, double real_time) const;\n@@ -112,0 +114,1 @@\n+  bool should_send_cpu_time_event() const;\n@@ -118,0 +121,1 @@\n+  void send_cpu_time_event(double user_time, double system_time, double real_time) const;\n","filename":"src\/hotspot\/share\/gc\/shared\/gcTrace.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,4 @@\n+bool GCTracer::should_send_cpu_time_event() const {\n+  return EventGCCpuTime::is_enabled();\n+}\n+\n@@ -53,0 +57,11 @@\n+void GCTracer::send_cpu_time_event(double user_time, double system_time, double real_time) const {\n+  EventGCCpuTime e;\n+  if (e.should_commit()) {\n+      e.set_gcId(GCId::current());\n+      e.set_userTime(user_time);\n+      e.set_systemTime(system_time);\n+      e.set_realTime(real_time);\n+      e.commit();\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/gcTraceSend.cpp","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+#include \"gc\/shared\/gcTrace.hpp\"\n@@ -73,2 +74,3 @@\n-GCTraceCPUTime::GCTraceCPUTime() :\n-  _active(log_is_enabled(Info, gc, cpu)),\n+GCTraceCPUTime::GCTraceCPUTime(GCTracer* tracer) :\n+  _active(log_is_enabled(Info, gc, cpu) ||\n+          (tracer != nullptr && tracer->should_report_cpu_time_event())),\n@@ -77,1 +79,2 @@\n-  _starting_real_time(0.0)\n+  _starting_real_time(0.0),\n+  _tracer(tracer)\n@@ -81,2 +84,2 @@\n-                               &_starting_user_time,\n-                               &_starting_system_time);\n+                                  &_starting_user_time,\n+                                  &_starting_system_time);\n@@ -90,0 +93,2 @@\n+GCTraceCPUTime::GCTraceCPUTime() { GCTraceCPUTime(nullptr); }\n+\n@@ -95,4 +100,7 @@\n-      log_info(gc, cpu)(\"User=%3.2fs Sys=%3.2fs Real=%3.2fs\",\n-                        user_time - _starting_user_time,\n-                        system_time - _starting_system_time,\n-                        real_time - _starting_real_time);\n+      user_time -= _starting_user_time;\n+      system_time -= _starting_system_time;\n+      real_time -= _starting_real_time;\n+      log_info(gc, cpu)(\"User=%3.2fs Sys=%3.2fs Real=%3.2fs\", user_time, system_time, real_time);\n+      if (_tracer != nullptr) {\n+        _tracer->report_cpu_time_event(user_time, system_time, real_time);\n+      }\n","filename":"src\/hotspot\/share\/gc\/shared\/gcTraceTime.cpp","additions":18,"deletions":10,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,2 @@\n+class GCTracer;\n+\n@@ -40,1 +42,2 @@\n- public:\n+  GCTracer* _tracer;\n+public:\n@@ -42,0 +45,1 @@\n+  GCTraceCPUTime(GCTracer* tracer);\n","filename":"src\/hotspot\/share\/gc\/shared\/gcTraceTime.hpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -498,0 +498,8 @@\n+  <Event name=\"GCCpuTime\" category=\"Java Virtual Machine, GC, Detailed\" label=\"GC CPU Time\" description=\"GC CPU Time information in seconds\"\n+    thread=\"true\" stackTrace=\"false\" startTime=\"false\">\n+    <Field type=\"uint\" name=\"gcId\" label=\"GC Identifier\" relation=\"GcId\" description=\"Identifier signifying GC during which the object was promoted\" \/>\n+    <Field type=\"double\" name=\"userTime\" label=\"User Time\" \/>\n+    <Field type=\"double\" name=\"systemTime\" label=\"System Time\" \/>\n+    <Field type=\"double\" name=\"realTime\" label=\"Real Time\" \/>\n+  <\/Event>\n+\n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xml","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -444,0 +444,4 @@\n+    <event name=\"jdk.GCCpuTime\">\n+      <setting name=\"enabled\" control=\"gc-enabled-normal\">true<\/setting>\n+    <\/event>\n+\n@@ -892,4 +896,4 @@\n-  <!--                                                                                                        \n-  Contents of the control element is not read by the JVM, it's used                                           \n-  by JDK Mission Control and the 'jfr' tool to change settings that                                           \n-  carry the control attribute.                                                                                \n+  <!--\n+  Contents of the control element is not read by the JVM, it's used\n+  by JDK Mission Control and the 'jfr' tool to change settings that\n+  carry the control attribute.\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/default.jfc","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -444,0 +444,4 @@\n+    <event name=\"jdk.GCCpuTime\">\n+      <setting name=\"enabled\" control=\"gc-enabled-normal\">true<\/setting>\n+    <\/event>\n+\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/profile.jfc","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -270,1 +270,2 @@\n-                    if (event.getEventType().getName().contains(\"AllocationRequiringGC\")) {\n+                    String name = event.getEventType().getName();\n+                    if (name.contains(\"AllocationRequiringGC\")) {\n@@ -276,1 +277,4 @@\n-                    Asserts.assertLessThanOrEqual(event.getEndTime(), batchEndTime, \"endTime in event after batch end event, should be sent before GC end\");\n+                    \/\/ GCCpuTime is generated after GC is completed.\n+                    if (!EventNames.GCCpuTime.equals(name)) {\n+                        Asserts.assertLessThanOrEqual(event.getEndTime(), batchEndTime, \"endTime in event after batch end event, should be sent before GC end\");\n+                    }\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/collection\/GCEventAll.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jfr.event.gc.detailed;\n+\n+import java.util.List;\n+\n+import jdk.jfr.Recording;\n+import jdk.jfr.consumer.RecordedEvent;\n+import jdk.test.lib.jfr.EventNames;\n+import jdk.test.lib.jfr.Events;\n+\n+\/**\n+ * @test TestGCCpuTimeEvent\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @requires vm.gc == \"G1\" | vm.gc == null | vm.gc == \"Parallel\"\n+ * @library \/test\/lib \/test\/jdk\n+ * @run main\/othervm -Xmx32m -XX:+UseG1GC jdk.jfr.event.gc.detailed.TestGCCpuTimeEvent\n+ *\/\n+public class TestGCCpuTimeEvent {\n+    private final static String EVENT_NAME = EventNames.GCCpuTime;\n+\n+    public static byte[] bytes;\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        try (Recording recording = new Recording()) {\n+\n+            \/\/ Activate the event we are interested in and start recording\n+            recording.enable(EVENT_NAME);\n+            recording.start();\n+\n+            \/\/ Allocate large objects to run the GC\n+            for (int i = 0; i < 100; i++) {\n+                bytes  = new byte[1024 * 1024];\n+            }\n+            recording.stop();\n+\n+            \/\/ Verify recording\n+            List<RecordedEvent> events = Events.fromRecording(recording);\n+            Events.hasEvent(events, EventNames.GCCpuTime);\n+\n+            recording.close();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/detailed\/TestGCCpuTimeEvent.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -152,0 +152,1 @@\n+    public static final String GCCpuTime = PREFIX + \"GCCpuTime\";\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/EventNames.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}