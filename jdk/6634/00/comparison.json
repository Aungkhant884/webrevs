{"files":[{"patch":"@@ -710,1 +710,1 @@\n-        long mask = -1L >>> sizeChange;\n+        long mask = -1L >>> -dsp.elementSize();\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/AbstractVector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3337,0 +3337,321 @@\n+    @ForceInline\n+    static\n+    void testVectorUCastByteToShort(VectorSpecies<Byte> a, VectorSpecies<Short> b, byte[] input, short[] output) {\n+        assert(input.length == a.length());\n+        assert(output.length == b.length());\n+\n+        ByteVector av = ByteVector.fromArray(a, input, 0);\n+        ShortVector bv = (ShortVector) av.convertShape(VectorOperators.ZERO_EXTEND_B2S, b, 0);\n+        bv.intoArray(output, 0);\n+\n+        for (int i = 0; i < Math.min(input.length, output.length); i++) {\n+            Assert.assertEquals(output[i], Byte.toUnsignedLong(input[i]));\n+        }\n+        for(int i = input.length; i < output.length; i++) {\n+            Assert.assertEquals(output[i], (short)0);\n+        }\n+    }\n+\n+    @ForceInline\n+    static\n+    void testVectorUCastByteToInt(VectorSpecies<Byte> a, VectorSpecies<Integer> b, byte[] input, int[] output) {\n+        assert(input.length == a.length());\n+        assert(output.length == b.length());\n+\n+        ByteVector av = ByteVector.fromArray(a, input, 0);\n+        IntVector bv = (IntVector) av.convertShape(VectorOperators.ZERO_EXTEND_B2I, b, 0);\n+        bv.intoArray(output, 0);\n+\n+        for (int i = 0; i < Math.min(input.length, output.length); i++) {\n+            Assert.assertEquals(output[i], Byte.toUnsignedLong(input[i]));\n+        }\n+        for(int i = input.length; i < output.length; i++) {\n+            Assert.assertEquals(output[i], (int)0);\n+        }\n+    }\n+\n+    @ForceInline\n+    static\n+    void testVectorUCastByteToLong(VectorSpecies<Byte> a, VectorSpecies<Long> b, byte[] input, long[] output) {\n+        assert(input.length == a.length());\n+        assert(output.length == b.length());\n+\n+        ByteVector av = ByteVector.fromArray(a, input, 0);\n+        LongVector bv = (LongVector) av.convertShape(VectorOperators.ZERO_EXTEND_B2L, b, 0);\n+        bv.intoArray(output, 0);\n+\n+        for (int i = 0; i < Math.min(input.length, output.length); i++) {\n+            Assert.assertEquals(output[i], Byte.toUnsignedLong(input[i]));\n+        }\n+        for(int i = input.length; i < output.length; i++) {\n+            Assert.assertEquals(output[i], (long)0);\n+        }\n+    }\n+\n+    @ForceInline\n+    static\n+    void testVectorUCastShortToInt(VectorSpecies<Short> a, VectorSpecies<Integer> b, short[] input, int[] output) {\n+        assert(input.length == a.length());\n+        assert(output.length == b.length());\n+\n+        ShortVector av = ShortVector.fromArray(a, input, 0);\n+        IntVector bv = (IntVector) av.convertShape(VectorOperators.ZERO_EXTEND_S2I, b, 0);\n+        bv.intoArray(output, 0);\n+\n+        for (int i = 0; i < Math.min(input.length, output.length); i++) {\n+            Assert.assertEquals(output[i], Short.toUnsignedLong(input[i]));\n+        }\n+        for(int i = input.length; i < output.length; i++) {\n+            Assert.assertEquals(output[i], (int)0);\n+        }\n+    }\n+\n+    @ForceInline\n+    static\n+    void testVectorUCastShortToLong(VectorSpecies<Short> a, VectorSpecies<Long> b, short[] input, long[] output) {\n+        assert(input.length == a.length());\n+        assert(output.length == b.length());\n+\n+        ShortVector av = ShortVector.fromArray(a, input, 0);\n+        LongVector bv = (LongVector) av.convertShape(VectorOperators.ZERO_EXTEND_S2L, b, 0);\n+        bv.intoArray(output, 0);\n+\n+        for (int i = 0; i < Math.min(input.length, output.length); i++) {\n+            Assert.assertEquals(output[i], Short.toUnsignedLong(input[i]));\n+        }\n+        for(int i = input.length; i < output.length; i++) {\n+            Assert.assertEquals(output[i], (long)0);\n+        }\n+    }\n+\n+    @ForceInline\n+    static\n+    void testVectorUCastIntToLong(VectorSpecies<Integer> a, VectorSpecies<Long> b, int[] input, long[] output) {\n+        assert(input.length == a.length());\n+        assert(output.length == b.length());\n+\n+        IntVector av = IntVector.fromArray(a, input, 0);\n+        LongVector bv = (LongVector) av.convertShape(VectorOperators.ZERO_EXTEND_I2L, b, 0);\n+        bv.intoArray(output, 0);\n+\n+        for (int i = 0; i < Math.min(input.length, output.length); i++) {\n+            Assert.assertEquals(output[i], Integer.toUnsignedLong(input[i]));\n+        }\n+        for(int i = input.length; i < output.length; i++) {\n+            Assert.assertEquals(output[i], (long)0);\n+        }\n+    }\n+\n+    @Test(dataProvider = \"byteUnaryOpProvider\")\n+    static void testUCastFromByte(IntFunction<byte[]> fa) {\n+        byte[] bin64 = fa.apply(bspec64.length());\n+        byte[] bin128 = fa.apply(bspec128.length());\n+        byte[] bin256 = fa.apply(bspec256.length());\n+        byte[] bin512 = fa.apply(bspec512.length());\n+\n+        short[] sout64 = new short[sspec64.length()];\n+        short[] sout128 = new short[sspec128.length()];\n+        short[] sout256 = new short[sspec256.length()];\n+        short[] sout512 = new short[sspec512.length()];\n+\n+        int[] iout64 = new int[ispec64.length()];\n+        int[] iout128 = new int[ispec128.length()];\n+        int[] iout256 = new int[ispec256.length()];\n+        int[] iout512 = new int[ispec512.length()];\n+\n+        long[] lout64 = new long[lspec64.length()];\n+        long[] lout128 = new long[lspec128.length()];\n+        long[] lout256 = new long[lspec256.length()];\n+        long[] lout512 = new long[lspec512.length()];\n+\n+        for (int i = 0; i < NUM_ITER; i++) {\n+            \/\/ B2S exact fit\n+            testVectorUCastByteToShort(bspec64, sspec128, bin64, sout128);\n+            testVectorUCastByteToShort(bspec128, sspec256, bin128, sout256);\n+            testVectorUCastByteToShort(bspec256, sspec512, bin256, sout512);\n+\n+            \/\/ B2S expansion\n+            testVectorUCastByteToShort(bspec64, sspec64, bin64, sout64);\n+            testVectorUCastByteToShort(bspec128, sspec128, bin128, sout128);\n+            testVectorUCastByteToShort(bspec256, sspec256, bin256, sout256);\n+            testVectorUCastByteToShort(bspec512, sspec512, bin512, sout512);\n+\n+            testVectorUCastByteToShort(bspec128, sspec64, bin128, sout64);\n+            testVectorUCastByteToShort(bspec256, sspec128, bin256, sout128);\n+            testVectorUCastByteToShort(bspec512, sspec256, bin512, sout256);\n+\n+            testVectorUCastByteToShort(bspec256, sspec64, bin256, sout64);\n+            testVectorUCastByteToShort(bspec512, sspec128, bin512, sout128);\n+\n+            testVectorUCastByteToShort(bspec512, sspec64, bin512, sout64);\n+\n+            \/\/ B2S contraction\n+            testVectorUCastByteToShort(bspec64, sspec256, bin64, sout256);\n+            testVectorUCastByteToShort(bspec128, sspec512, bin128, sout512);\n+\n+            testVectorUCastByteToShort(bspec64, sspec512, bin64, sout512);\n+\n+            \/\/ B2I exact fit\n+            testVectorUCastByteToInt(bspec64, ispec256, bin64, iout256);\n+            testVectorUCastByteToInt(bspec128, ispec512, bin128, iout512);\n+\n+            \/\/ B2I expansion\n+            testVectorUCastByteToInt(bspec64, ispec128, bin64, iout128);\n+            testVectorUCastByteToInt(bspec128, ispec256, bin128, iout256);\n+            testVectorUCastByteToInt(bspec256, ispec512, bin256, iout512);\n+\n+            testVectorUCastByteToInt(bspec64, ispec64, bin64, iout64);\n+            testVectorUCastByteToInt(bspec128, ispec128, bin128, iout128);\n+            testVectorUCastByteToInt(bspec256, ispec256, bin256, iout256);\n+            testVectorUCastByteToInt(bspec512, ispec512, bin512, iout512);\n+\n+            testVectorUCastByteToInt(bspec128, ispec64, bin128, iout64);\n+            testVectorUCastByteToInt(bspec256, ispec128, bin256, iout128);\n+            testVectorUCastByteToInt(bspec512, ispec256, bin512, iout256);\n+\n+            testVectorUCastByteToInt(bspec256, ispec64, bin256, iout64);\n+            testVectorUCastByteToInt(bspec512, ispec128, bin512, iout128);\n+\n+            testVectorUCastByteToInt(bspec512, ispec64, bin512, iout64);\n+\n+            \/\/ B2I contraction\n+            testVectorUCastByteToInt(bspec64, ispec512, bin64, iout512);\n+\n+            \/\/ B2L exact fit\n+            testVectorUCastByteToLong(bspec64, lspec512, bin64, lout512);\n+\n+            \/\/ B2L expansion\n+            testVectorUCastByteToLong(bspec64, lspec256, bin64, lout256);\n+            testVectorUCastByteToLong(bspec128, lspec512, bin128, lout512);\n+\n+            testVectorUCastByteToLong(bspec64, lspec128, bin64, lout128);\n+            testVectorUCastByteToLong(bspec128, lspec256, bin128, lout256);\n+            testVectorUCastByteToLong(bspec256, lspec512, bin256, lout512);\n+\n+            testVectorUCastByteToLong(bspec64, lspec64, bin64, lout64);\n+            testVectorUCastByteToLong(bspec128, lspec128, bin128, lout128);\n+            testVectorUCastByteToLong(bspec256, lspec256, bin256, lout256);\n+            testVectorUCastByteToLong(bspec512, lspec512, bin512, lout512);\n+\n+            testVectorUCastByteToLong(bspec128, lspec64, bin128, lout64);\n+            testVectorUCastByteToLong(bspec256, lspec128, bin256, lout128);\n+            testVectorUCastByteToLong(bspec512, lspec256, bin512, lout256);\n+\n+            testVectorUCastByteToLong(bspec256, lspec64, bin256, lout64);\n+            testVectorUCastByteToLong(bspec512, lspec128, bin512, lout128);\n+\n+            testVectorUCastByteToLong(bspec512, lspec64, bin512, lout64);\n+        }\n+    }\n+\n+    @Test(dataProvider = \"shortUnaryOpProvider\")\n+    static void testUCastFromShort(IntFunction<short[]> fa) {\n+        short[] sin64 = fa.apply(sspec64.length());\n+        short[] sin128 = fa.apply(sspec128.length());\n+        short[] sin256 = fa.apply(sspec256.length());\n+        short[] sin512 = fa.apply(sspec512.length());\n+\n+        int[] iout64 = new int[ispec64.length()];\n+        int[] iout128 = new int[ispec128.length()];\n+        int[] iout256 = new int[ispec256.length()];\n+        int[] iout512 = new int[ispec512.length()];\n+\n+        long[] lout64 = new long[lspec64.length()];\n+        long[] lout128 = new long[lspec128.length()];\n+        long[] lout256 = new long[lspec256.length()];\n+        long[] lout512 = new long[lspec512.length()];\n+\n+        for (int i = 0; i < NUM_ITER; i++) {\n+            \/\/ S2I exact fit\n+            testVectorUCastShortToInt(sspec64, ispec128, sin64, iout128);\n+            testVectorUCastShortToInt(sspec128, ispec256, sin128, iout256);\n+            testVectorUCastShortToInt(sspec256, ispec512, sin256, iout512);\n+\n+            \/\/ S2I expansion\n+            testVectorUCastShortToInt(sspec64, ispec64, sin64, iout64);\n+            testVectorUCastShortToInt(sspec128, ispec128, sin128, iout128);\n+            testVectorUCastShortToInt(sspec256, ispec256, sin256, iout256);\n+            testVectorUCastShortToInt(sspec512, ispec512, sin512, iout512);\n+\n+            testVectorUCastShortToInt(sspec128, ispec64, sin128, iout64);\n+            testVectorUCastShortToInt(sspec256, ispec128, sin256, iout128);\n+            testVectorUCastShortToInt(sspec512, ispec256, sin512, iout256);\n+\n+            testVectorUCastShortToInt(sspec256, ispec64, sin256, iout64);\n+            testVectorUCastShortToInt(sspec512, ispec128, sin512, iout128);\n+\n+            testVectorUCastShortToInt(sspec512, ispec64, sin512, iout64);\n+\n+            \/\/ S2I contraction\n+            testVectorUCastShortToInt(sspec64, ispec256, sin64, iout256);\n+            testVectorUCastShortToInt(sspec128, ispec512, sin128, iout512);\n+\n+            testVectorUCastShortToInt(sspec64, ispec512, sin64, iout512);\n+\n+            \/\/ S2L exact fit\n+            testVectorUCastShortToLong(sspec64, lspec256, sin64, lout256);\n+            testVectorUCastShortToLong(sspec128, lspec512, sin128, lout512);\n+\n+            \/\/ S2L expansion\n+            testVectorUCastShortToLong(sspec64, lspec128, sin64, lout128);\n+            testVectorUCastShortToLong(sspec128, lspec256, sin128, lout256);\n+            testVectorUCastShortToLong(sspec256, lspec512, sin256, lout512);\n+\n+            testVectorUCastShortToLong(sspec64, lspec64, sin64, lout64);\n+            testVectorUCastShortToLong(sspec128, lspec128, sin128, lout128);\n+            testVectorUCastShortToLong(sspec256, lspec256, sin256, lout256);\n+            testVectorUCastShortToLong(sspec512, lspec512, sin512, lout512);\n+\n+            testVectorUCastShortToLong(sspec128, lspec64, sin128, lout64);\n+            testVectorUCastShortToLong(sspec256, lspec128, sin256, lout128);\n+            testVectorUCastShortToLong(sspec512, lspec256, sin512, lout256);\n+\n+            testVectorUCastShortToLong(sspec256, lspec64, sin256, lout64);\n+            testVectorUCastShortToLong(sspec512, lspec128, sin512, lout128);\n+\n+            testVectorUCastShortToLong(sspec512, lspec64, sin512, lout64);\n+\n+            \/\/ S2L contraction\n+            testVectorUCastShortToLong(sspec64, lspec512, sin64, lout512);\n+        }\n+    }\n+\n+    @Test(dataProvider = \"intUnaryOpProvider\")\n+    static void testUCastFromInt(IntFunction<int[]> fa) {\n+        int[] iin64 = fa.apply(ispec64.length());\n+        int[] iin128 = fa.apply(ispec128.length());\n+        int[] iin256 = fa.apply(ispec256.length());\n+        int[] iin512 = fa.apply(ispec512.length());\n+\n+        long[] lout64 = new long[lspec64.length()];\n+        long[] lout128 = new long[lspec128.length()];\n+        long[] lout256 = new long[lspec256.length()];\n+        long[] lout512 = new long[lspec512.length()];\n+\n+        \/\/ I2L exact fit\n+        testVectorUCastIntToLong(ispec64, lspec128, iin64, lout128);\n+        testVectorUCastIntToLong(ispec128, lspec256, iin128, lout256);\n+        testVectorUCastIntToLong(ispec256, lspec512, iin256, lout512);\n+\n+        \/\/ I2L expansion\n+        testVectorUCastIntToLong(ispec64, lspec64, iin64, lout64);\n+        testVectorUCastIntToLong(ispec128, lspec128, iin128, lout128);\n+        testVectorUCastIntToLong(ispec256, lspec256, iin256, lout256);\n+        testVectorUCastIntToLong(ispec512, lspec512, iin512, lout512);\n+\n+        testVectorUCastIntToLong(ispec128, lspec64, iin128, lout64);\n+        testVectorUCastIntToLong(ispec256, lspec128, iin256, lout128);\n+        testVectorUCastIntToLong(ispec512, lspec256, iin512, lout256);\n+\n+        testVectorUCastIntToLong(ispec256, lspec64, iin256, lout64);\n+        testVectorUCastIntToLong(ispec512, lspec128, iin512, lout128);\n+\n+        testVectorUCastIntToLong(ispec512, lspec64, iin512, lout64);\n+\n+        \/\/ I2L contraction\n+        testVectorUCastIntToLong(ispec64, lspec256, iin64, lout256);\n+        testVectorUCastIntToLong(ispec128, lspec512, iin128, lout512);\n+\n+        testVectorUCastIntToLong(ispec64, lspec512, iin64, lout512);\n+    }\n+\n","filename":"test\/jdk\/jdk\/incubator\/vector\/VectorReshapeTests.java","additions":321,"deletions":0,"binary":false,"changes":321,"status":"modified"}]}