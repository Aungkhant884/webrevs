{"files":[{"patch":"@@ -398,1 +398,1 @@\n-  return (check_predicate(CompileCommand::Inline, method));\n+  return (check_predicate(CompileCommand::Inline, method) && !check_predicate(CompileCommand::DontInline, method));\n@@ -402,1 +402,2 @@\n-  return check_predicate(CompileCommand::DontInline, method) || check_predicate(CompileCommand::Exclude, method);\n+  return (check_predicate(CompileCommand::DontInline, method) && !check_predicate(CompileCommand::Inline, method))\n+         || check_predicate(CompileCommand::Exclude, method);\n","filename":"src\/hotspot\/share\/compiler\/compilerOracle.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (C) 2021 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8270459\n+ * @summary Inlining decisions shouldn't be conflict by the C1\/C2 with the same CompileCommand\n+ * @library \/test\/lib\n+ * @requires vm.flagless\n+ *\n+ * @run driver compiler.compilercontrol.TestConflictInlineCommands\n+ *\/\n+\n+package compiler.compilercontrol;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class TestConflictInlineCommands {\n+    public static void main(String[] args) throws Exception {\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+                \"-XX:CompileCommand=inline,*TestConflictInlineCommands::caller\",\n+                \"-XX:CompileCommand=dontinline,*TestConflictInlineCommands::caller\",\n+                \"-XX:CompileCommand=quiet\", \"-XX:CompileCommand=compileonly,*Launcher::main\",\n+                \"-XX:+PrintCompilation\", \"-XX:+UnlockDiagnosticVMOptions\", \"-XX:+PrintInlining\",\n+                Launcher.class.getName());\n+\n+        OutputAnalyzer analyzer = new OutputAnalyzer(pb.start());\n+        analyzer.shouldHaveExitValue(0);\n+\n+        if (analyzer.getStdout().contains(\"disallowed by CompileCommand\") &&\n+            analyzer.getStdout().contains(\"force inline by CompileCommand\")) {\n+            throw new RuntimeException(\"Conflict inlining decisions detected:\\n\" + analyzer.getStdout());\n+        }\n+    }\n+\n+    static int sum;\n+\n+    public static int caller(int a , int b) {\n+        return a + b;\n+    }\n+\n+    static class Launcher {\n+        public static void main(String[] args) {\n+            for (int i = 0; i < 1000; i++) {\n+                for (int j = 0; j < 1000; j++) {\n+                    sum += caller(i, 0);\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/TestConflictInlineCommands.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"}]}