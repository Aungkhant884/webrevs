{"files":[{"patch":"@@ -344,0 +344,37 @@\n+static bool resolve_inlining_predicate(enum CompileCommand option, const methodHandle& method) {\n+  assert(option == CompileCommand::Inline || option == CompileCommand::DontInline, \"Sanity\");\n+  bool v1 = false;\n+  bool v2 = false;\n+  bool has_inline = CompilerOracle::has_option_value(method, CompileCommand::Inline, v1);\n+  bool has_dnotinline = CompilerOracle::has_option_value(method, CompileCommand::DontInline, v2);\n+  if (has_inline && has_dnotinline) {\n+    if (v1 && v2) {\n+      \/\/ Conflict options detected\n+      \/\/ Find the last one for that method and return the predicate accordingly\n+      \/\/ option_list lists options in reverse order. So the first option we find is the last which was specified.\n+      enum CompileCommand last_one = CompileCommand::Unknown;\n+      TypedMethodOptionMatcher* current = option_list;\n+      while (current != NULL) {\n+        last_one = current->option();\n+        if (last_one == CompileCommand::Inline || last_one == CompileCommand::DontInline) {\n+          if (current->matches(method)) {\n+            return last_one == option;\n+          }\n+        }\n+        current = current->next();\n+      }\n+      ShouldNotReachHere();\n+      return false;\n+    } else {\n+      \/\/ No conflicts\n+      return option == CompileCommand::Inline ? v1 : v2;\n+    }\n+  } else {\n+    if (option == CompileCommand::Inline) {\n+      return has_inline ? v1 : false;\n+    } else {\n+      return has_dnotinline ? v2 : false;\n+    }\n+  }\n+}\n+\n@@ -345,0 +382,5 @@\n+  \/\/ Special handling for Inline and DontInline since conflict options may be specified\n+  if (option == CompileCommand::Inline || option == CompileCommand::DontInline) {\n+    return resolve_inlining_predicate(option, method);\n+  }\n+\n","filename":"src\/hotspot\/share\/compiler\/compilerOracle.cpp","additions":42,"deletions":0,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (C) 2021 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8270459\n+ * @summary the last specified inlining option should overwrite all previous\n+ * @library \/test\/lib\n+ * @requires vm.flagless\n+ * @requires vm.compiler1.enabled | vm.compiler2.enabled\n+ *\n+ * @run driver compiler.compilercontrol.TestConflictInlineCommands\n+ *\/\n+\n+package compiler.compilercontrol;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class TestConflictInlineCommands {\n+    public static void main(String[] args) throws Exception {\n+        ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(\n+                \"-XX:CompileCommand=inline,*TestConflictInlineCommands::caller\",\n+                \"-XX:CompileCommand=dontinline,*TestConflictInlineCommands::caller\",\n+                \"-XX:CompileCommand=quiet\", \"-XX:CompileCommand=compileonly,*Launcher::main\",\n+                \"-XX:+PrintCompilation\", \"-XX:+UnlockDiagnosticVMOptions\", \"-XX:+PrintInlining\",\n+                Launcher.class.getName());\n+\n+        OutputAnalyzer analyzer = new OutputAnalyzer(pb.start());\n+        analyzer.shouldHaveExitValue(0);\n+        analyzer.shouldContain(\"disallowed by CompileCommand\");\n+        analyzer.shouldNotContain(\"force inline by CompileCommand\");\n+\n+        pb = ProcessTools.createJavaProcessBuilder(\n+                \"-XX:CompileCommand=dontinline,*TestConflictInlineCommands::*caller\",\n+                \"-XX:CompileCommand=inline,*TestConflictInlineCommands::caller\",\n+                \"-XX:CompileCommand=quiet\", \"-XX:CompileCommand=compileonly,*Launcher::main\",\n+                \"-XX:+PrintCompilation\", \"-XX:+UnlockDiagnosticVMOptions\", \"-XX:+PrintInlining\",\n+                Launcher.class.getName());\n+\n+        analyzer = new OutputAnalyzer(pb.start());\n+        analyzer.shouldHaveExitValue(0);\n+        analyzer.shouldContain(\"force inline by CompileCommand\");\n+        analyzer.shouldNotContain(\"disallowed by CompileCommand\");\n+    }\n+\n+    static int sum;\n+\n+    public static int caller(int a , int b) {\n+        return a + b;\n+    }\n+\n+    static class Launcher {\n+        public static void main(String[] args) {\n+            for (int i = 0; i < 1000; i++) {\n+                for (int j = 0; j < 1000; j++) {\n+                    sum += caller(i, 0);\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/compilercontrol\/TestConflictInlineCommands.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"}]}