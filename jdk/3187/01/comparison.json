{"files":[{"patch":"@@ -278,0 +278,7 @@\n+\/\/ Call function for all symbols in shared table. Used by -XX:+PrintSharedArchiveAndExit\n+void SymbolTable::shared_symbols_do(SymbolClosure *cl) {\n+  SharedSymbolIterator iter(cl);\n+  _shared_table.iterate(&iter);\n+  _dynamic_shared_table.iterate(&iter);\n+}\n+\n","filename":"src\/hotspot\/share\/classfile\/symbolTable.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -210,0 +210,1 @@\n+  static void shared_symbols_do(SymbolClosure *cl);  \/\/ no safepoint iteration.\n","filename":"src\/hotspot\/share\/classfile\/symbolTable.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2226,0 +2226,18 @@\n+const char* class_loader_name_for_shared(Klass* k) {\n+  assert(k != nullptr, \"Sanity\");\n+  assert(k->is_shared(), \"Must be\");\n+  assert(k->is_instance_klass(), \"Must be\");\n+  InstanceKlass* ik = InstanceKlass::cast(k);\n+  if (ik->is_shared_boot_class()) {\n+    return \"boot_loader\";\n+  } else if (ik->is_shared_platform_class()) {\n+    return \"platform_loader\";\n+  } else if (ik->is_shared_app_class()) {\n+    return \"app_loader\";\n+  } else if (ik->is_shared_unregistered_class()) {\n+    return \"unregistered_loader\";\n+  } else {\n+    return \"unknown loader\";\n+  }\n+}\n+\n@@ -2234,1 +2252,2 @@\n-    _st->print_cr(\"%4d:  %s\", (_index++), record->_klass->external_name());\n+    _st->print_cr(\"%4d: %s %s\", (_index++), record->_klass->external_name(),\n+        class_loader_name_for_shared(record->_klass));\n@@ -2236,0 +2255,1 @@\n+  int index() const { return _index; }\n@@ -2242,1 +2262,1 @@\n-  SharedLambdaDictionaryPrinter(outputStream* st) : _st(st), _index(0) {}\n+  SharedLambdaDictionaryPrinter(outputStream* st, int idx) : _st(st), _index(idx) {}\n@@ -2247,4 +2267,4 @@\n-      _st->print_cr(\"%4d:  %s\", (_index++), record->proxy_klass_head()->external_name());\n-      Klass* k = record->proxy_klass_head()->next_link();\n-      while (k != NULL) {\n-        _st->print_cr(\"%4d:  %s\", (_index++), k->external_name());\n+      Klass* k = record->proxy_klass_head();\n+      while (k != nullptr) {\n+        _st->print_cr(\"%4d: %s %s\", (++_index), k->external_name(),\n+                      class_loader_name_for_shared(k));\n@@ -2264,0 +2284,1 @@\n+  st->print_cr(\"%sShared Builtin Dictionary\", prefix);\n@@ -2265,0 +2286,1 @@\n+  st->print_cr(\"%sShared Unregistered Dictionary\", prefix);\n@@ -2268,1 +2290,1 @@\n-    SharedLambdaDictionaryPrinter ldp(st);\n+    SharedLambdaDictionaryPrinter ldp(st, p.index());\n@@ -2273,0 +2295,13 @@\n+void SystemDictionaryShared::print_shared_archive(outputStream* st, bool is_static) {\n+  if (UseSharedSpaces) {\n+    if (is_static) {\n+      print_on(\"\", &_builtin_dictionary, &_unregistered_dictionary, &_lambda_proxy_class_dictionary, st);\n+    } else {\n+      if (DynamicArchive::is_mapped()) {\n+        print_on(\"\", &_dynamic_builtin_dictionary, &_dynamic_unregistered_dictionary,\n+               &_dynamic_lambda_proxy_class_dictionary, st);\n+      }\n+    }\n+  }\n+}\n+\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":42,"deletions":7,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -319,0 +319,1 @@\n+  static void print_shared_archive(outputStream* st, bool is_static = true) NOT_CDS_RETURN;\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -547,0 +547,4 @@\n+  const char* vm_version() {\n+    return header()->jvm_ident();\n+  }\n+\n","filename":"src\/hotspot\/share\/memory\/filemap.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1335,0 +1335,28 @@\n+\/\/ For -XX:PrintSharedArchiveAndExit\n+class CountSharedSymbols : public SymbolClosure {\n+ private:\n+   int _count;\n+ public:\n+   CountSharedSymbols() : _count(0) {}\n+  void do_symbol(Symbol** sym) {\n+    _count++;\n+  }\n+  int total() { return _count; }\n+\n+};\n+\n+\/\/ For -XX:PrintSharedArchiveAndExit\n+class CountSharedStrings : public OopClosure {\n+ private:\n+  int _count;\n+ public:\n+  CountSharedStrings() : _count(0) {}\n+  void do_oop(oop* p) {\n+    _count++;\n+  }\n+  void do_oop(narrowOop* p) {\n+    _count++;\n+  }\n+  int total() { return _count; }\n+};\n+\n@@ -1369,3 +1397,7 @@\n-    if (PrintSharedDictionary) {\n-      tty->print_cr(\"\\nShared classes:\\n\");\n-      SystemDictionaryShared::print_on(tty);\n+    \/\/ Print archive names\n+    if (dynamic_mapinfo != nullptr) {\n+      tty->print_cr(\"\\n\\nBase archive name: %s\", Arguments::GetSharedArchivePath());\n+      tty->print_cr(\"Base archive version %d\", static_mapinfo->version());\n+    } else {\n+      tty->print_cr(\"Static archive name: %s\", static_mapinfo->full_path());\n+      tty->print_cr(\"Static archive version %d\", static_mapinfo->version());\n@@ -1373,0 +1405,16 @@\n+\n+    SystemDictionaryShared::print_shared_archive(tty);\n+    if (dynamic_mapinfo != nullptr) {\n+      tty->print_cr(\"\\n\\nDynamic archive name: %s\", dynamic_mapinfo->full_path());\n+      tty->print_cr(\"Dynamic archive version %d\", dynamic_mapinfo->version());\n+      SystemDictionaryShared::print_shared_archive(tty, false\/*dynamic*\/);\n+    }\n+\n+    \/\/ collect shared symbols and strings\n+    CountSharedSymbols cl;\n+    SymbolTable::shared_symbols_do(&cl);\n+    tty->print_cr(\"Number of shared symbols: %d\", cl.total());\n+    CountSharedStrings cs;\n+    StringTable::shared_oops_do(&cs);\n+    tty->print_cr(\"Number of shared strings: %d\", cs.total());\n+    tty->print_cr(\"VM version: %s\\r\\n\", static_mapinfo->vm_version());\n","filename":"src\/hotspot\/share\/memory\/metaspaceShared.cpp","additions":51,"deletions":3,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary test -XX:+PrintSharedArchiveAndExit output for shared class.\n+ * @comment the code is mostly copied from HelloCustom\n+ * @requires vm.cds\n+ * @requires vm.cds.custom.loaders\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @compile test-classes\/HelloUnload.java test-classes\/CustomLoadee.java\n+ * @build sun.hotspot.WhiteBox jdk.test.lib.classloader.ClassUnloadCommon\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar hello.jar HelloUnload\n+ *                 jdk.test.lib.classloader.ClassUnloadCommon\n+ *                 jdk.test.lib.classloader.ClassUnloadCommon$1\n+ *                 jdk.test.lib.classloader.ClassUnloadCommon$TestFailure\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar hello_custom.jar CustomLoadee\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar WhiteBox.jar sun.hotspot.WhiteBox\n+ * @run driver PrintSharedArchiveAndExit\n+ *\/\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+import sun.hotspot.WhiteBox;\n+\n+public class PrintSharedArchiveAndExit {\n+    public static void main(String[] args) throws Exception {\n+        run();\n+    }\n+    public static void run(String... extra_runtime_args) throws Exception {\n+        String wbJar = ClassFileInstaller.getJarPath(\"WhiteBox.jar\");\n+        String use_whitebox_jar = \"-Xbootclasspath\/a:\" + wbJar;\n+\n+        String appJar = ClassFileInstaller.getJarPath(\"hello.jar\");\n+        String customJarPath = ClassFileInstaller.getJarPath(\"hello_custom.jar\");\n+\n+        \/\/ Dump the archive\n+        String classlist[] = new String[] {\n+            \"HelloUnload\",\n+            \"java\/lang\/Object id: 1\",\n+            \"CustomLoadee id: 2 super: 1 source: \" + customJarPath\n+        };\n+\n+        OutputAnalyzer output;\n+        TestCommon.testDump(appJar, classlist,\n+                            \/\/ command-line arguments ...\n+                            use_whitebox_jar);\n+\n+        output = TestCommon.exec(appJar,\n+                                 TestCommon.concat(extra_runtime_args,\n+                                     \/\/ command-line arguments ...\n+                                     use_whitebox_jar,\n+                                     \"-XX:+UnlockDiagnosticVMOptions\",\n+                                     \"-XX:+WhiteBoxAPI\",\n+                                     \"-XX:+PrintSharedArchiveAndExit\",\n+                                     \"HelloUnload\", customJarPath, \"true\", \"true\"));\n+        output.shouldMatch(\".* archive version \\\\d+\")\n+              .shouldContain(\"java.lang.Object boot_loader\")\n+              .shouldContain(\"HelloUnload app_loader\")\n+              .shouldContain(\"CustomLoadee unregistered_loader\")\n+              .shouldContain(\"Shared Builtin Dictionary\")\n+              .shouldContain(\"Shared Unregistered Dictionary\")\n+              .shouldMatch(\"Number of shared symbols: \\\\d+\")\n+              .shouldMatch(\"Number of shared strings: \\\\d+\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/customLoader\/PrintSharedArchiveAndExit.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Hello World test for dynamic archive with custom loader\n+ * @requires vm.cds\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/customLoader\/test-classes\n+ * @build HelloUnload CustomLoadee jdk.test.lib.classloader.ClassUnloadCommon\n+ * @build sun.hotspot.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar hello.jar HelloUnload\n+ *                 jdk.test.lib.classloader.ClassUnloadCommon\n+ *                 jdk.test.lib.classloader.ClassUnloadCommon$1\n+ *                 jdk.test.lib.classloader.ClassUnloadCommon$TestFailure\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar hello_custom.jar CustomLoadee\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar WhiteBox.jar sun.hotspot.WhiteBox\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:.\/WhiteBox.jar PrintSharedArchiveAndExit\n+ *\/\n+\n+import java.io.File;\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+\n+public class PrintSharedArchiveAndExit extends DynamicArchiveTestBase {\n+    private static final String ARCHIVE_NAME = CDSTestUtils.getOutputFileName(\"top.jsa\");\n+\n+    public static void main(String... args) throws Exception {\n+        runTest(PrintSharedArchiveAndExit::testPrtNExit);\n+    }\n+\n+    public static void testPrtNExit() throws Exception {\n+        String wbJar = ClassFileInstaller.getJarPath(\"WhiteBox.jar\");\n+        String use_whitebox_jar = \"-Xbootclasspath\/a:\" + wbJar;\n+        String appJar = ClassFileInstaller.getJarPath(\"hello.jar\");\n+        String customJarPath = ClassFileInstaller.getJarPath(\"hello_custom.jar\");\n+        String mainAppClass = \"HelloUnload\";\n+\n+        dump(ARCHIVE_NAME,\n+            use_whitebox_jar,\n+            \"-XX:+UnlockDiagnosticVMOptions\",\n+            \"-XX:+WhiteBoxAPI\",\n+            \"-Xlog:cds\",\n+            \"-Xlog:cds+dynamic=debug\",\n+            \"-cp\", appJar,\n+            mainAppClass, customJarPath, \"false\", \"false\")\n+            .assertNormalExit(output -> {\n+                output.shouldContain(\"Written dynamic archive 0x\")\n+                      .shouldNotContain(\"klasses.*=.*CustomLoadee\")\n+                      .shouldHaveExitValue(0);\n+                });\n+\n+        run(ARCHIVE_NAME,\n+            use_whitebox_jar,\n+            \"-XX:+UnlockDiagnosticVMOptions\",\n+            \"-XX:+WhiteBoxAPI\",\n+            \"-Xlog:class+load\",\n+            \"-Xlog:cds=debug\",\n+            \"-Xlog:cds+dynamic=info\",\n+            \"-cp\", appJar,\n+            \"-XX:+PrintSharedArchiveAndExit\",\n+            mainAppClass, customJarPath, \"false\", \"true\")\n+            .assertNormalExit(output -> {\n+                output.shouldHaveExitValue(0)\n+                      .shouldMatch(\"Base archive name: .*.jsa\")  \/\/ given name ends with .jsa, maynot default name.\n+                      .shouldMatch(\"Dynamic archive name: .*\" + ARCHIVE_NAME)\n+                      .shouldMatch(\"Base archive version \\\\d+\")\n+                      .shouldContain(\"java.lang.Object boot_loader\")\n+                      .shouldContain(\"HelloUnload app_loader\")\n+                      .shouldContain(\"CustomLoadee unregistered_loader\")\n+                      .shouldContain(\"Shared Builtin Dictionary\")\n+                      .shouldContain(\"Shared Unregistered Dictionary\")\n+                      .shouldMatch(\"Number of shared symbols: \\\\d+\")\n+                      .shouldMatch(\"Number of shared strings: \\\\d+\");\n+                });\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/PrintSharedArchiveAndExit.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"}]}