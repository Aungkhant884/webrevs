{"files":[{"patch":"@@ -44,3 +44,2 @@\n-@OutputTimeUnit(TimeUnit.MICROSECONDS)\n-@State(Scope.Thread)\n-@Fork(jvmArgsAppend = {\"--add-exports\", \"java.base\/sun.security.util=ALL-UNNAMED\"})\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Fork(jvmArgsAppend = {\"--add-exports\", \"java.base\/sun.security.util=ALL-UNNAMED\", \"-Xmx1g\"})\n@@ -48,3 +47,0 @@\n-    private Integer[] arrayToAdd;\n-    private Cache<Integer, Integer> cache;\n-    private int index;\n@@ -52,2 +48,3 @@\n-    @Param({\"20480\", \"204800\"})\n-    private int size;\n+    @State(Scope.Benchmark)\n+    public static class SharedState {\n+        Cache<Integer, Integer> cache;\n@@ -55,2 +52,2 @@\n-    @Param({\"86400\", \"0\"})\n-    private int timeout;\n+        @Param({\"20480\", \"204800\", \"5120000\"})\n+        int size;\n@@ -58,5 +55,8 @@\n-    @Setup\n-    public void setup() {\n-        cache = Cache.newSoftMemoryCache(size, timeout);\n-        arrayToAdd = IntStream.range(0, size + 1).boxed().toArray(Integer[]::new);\n-        index = 0;\n+        @Param({\"86400\", \"0\"})\n+        int timeout;\n+\n+        @Setup\n+        public void setup() {\n+            cache = Cache.newSoftMemoryCache(size, timeout);\n+            IntStream.range(0, size).boxed().forEach(i -> cache.put(i, i));\n+        }\n@@ -65,4 +65,8 @@\n-    @TearDown(Level.Invocation)\n-    public void tearDown() {\n-        index++;\n-        if (index >= arrayToAdd.length) {\n+    @State(Scope.Thread)\n+    public static class GetPutState {\n+        Integer[] intArray;\n+        int index;\n+\n+        @Setup\n+        public void setup(SharedState benchState) {\n+            intArray = IntStream.range(0, benchState.size + 1).boxed().toArray(Integer[]::new);\n@@ -71,0 +75,46 @@\n+\n+        @TearDown(Level.Invocation)\n+        public void tearDown() {\n+            index++;\n+            if (index >= intArray.length) {\n+                index = 0;\n+            }\n+        }\n+    }\n+\n+    @Benchmark\n+    public void put(SharedState benchState, GetPutState state) {\n+        Integer i = state.intArray[state.index];\n+        benchState.cache.put(i, i);\n+    }\n+\n+    @Benchmark\n+    public Integer get(SharedState benchState, GetPutState state) {\n+        Integer i = state.intArray[state.index];\n+        return benchState.cache.get(i);\n+    }\n+\n+    @State(Scope.Thread)\n+    public static class RemoveState {\n+        Integer[] intArray;\n+        int index;\n+        SharedState benchState;\n+\n+        @Setup\n+        public void setup(SharedState benchState) {\n+            this.benchState = benchState;\n+            intArray = IntStream.range(0, benchState.size).boxed().toArray(Integer[]::new);\n+            index = 0;\n+        }\n+\n+        @TearDown(Level.Invocation)\n+        public void tearDown() {\n+            \/\/ add back removed item\n+            Integer i = intArray[index];\n+            benchState.cache.put(i, i);\n+\n+            index++;\n+            if (index >= intArray.length) {\n+                index = 0;\n+            }\n+        }\n@@ -74,3 +124,3 @@\n-    public void put() {\n-        Integer i = arrayToAdd[index];\n-        cache.put(i, i);\n+    public void remove(SharedState benchState, RemoveState state) {\n+        Integer i = state.intArray[state.index];\n+        benchState.cache.remove(i);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/security\/CacheBench.java","additions":72,"deletions":22,"binary":false,"changes":94,"status":"modified"}]}