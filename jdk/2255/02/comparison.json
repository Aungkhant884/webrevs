{"files":[{"patch":"@@ -87,0 +87,1 @@\n+# sun.security.util is required to compile Cache benchmark\n@@ -96,0 +97,1 @@\n+    JAVAC_FLAGS := --add-exports java.base\/sun.security.util=ALL-UNNAMED, \\\n","filename":"make\/test\/BuildMicrobenchmark.gmk","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -290,4 +290,0 @@\n-            if (key == null) {\n-                \/\/ key is null, entry has already been removed\n-                continue;\n-            }\n@@ -311,1 +307,2 @@\n-     * Scan all entries and remove all expired ones.\n+     * Scan entries and remove expired ones.\n+     * @param scanAll true to scan all entries, false to stop on first non-expired entry\n@@ -313,1 +310,1 @@\n-    private void expungeExpiredEntries() {\n+    private void expungeExpiredEntries(boolean scanAll) {\n@@ -326,0 +323,2 @@\n+            } else if (!scanAll) {\n+                break;\n@@ -337,1 +336,1 @@\n-        expungeExpiredEntries();\n+        expungeExpiredEntries(true);\n@@ -342,0 +341,1 @@\n+        cacheMap.clear();\n@@ -343,5 +343,0 @@\n-            \/\/ if this is a SoftReference cache, first invalidate() all\n-            \/\/ entries so that GC does not have to enqueue them\n-            for (CacheEntry<K,V> entry : cacheMap.values()) {\n-                entry.invalidate();\n-            }\n@@ -352,1 +347,0 @@\n-        cacheMap.clear();\n@@ -356,1 +350,1 @@\n-        emptyQueue();\n+        expungeExpiredEntries(false);\n@@ -362,1 +356,0 @@\n-            oldEntry.invalidate();\n@@ -366,10 +359,5 @@\n-            expungeExpiredEntries();\n-            if (cacheMap.size() > maxSize) { \/\/ still too large?\n-                Iterator<CacheEntry<K,V>> t = cacheMap.values().iterator();\n-                CacheEntry<K,V> lruEntry = t.next();\n-                if (DEBUG) {\n-                    System.out.println(\"** Overflow removal \"\n-                        + lruEntry.getKey() + \" | \" + lruEntry.getValue());\n-                }\n-                t.remove();\n-                lruEntry.invalidate();\n+            Iterator<CacheEntry<K,V>> t = cacheMap.values().iterator();\n+            CacheEntry<K,V> lruEntry = t.next();\n+            if (DEBUG) {\n+                System.out.println(\"** Overflow removal \"\n+                    + lruEntry.getKey() + \" | \" + lruEntry.getValue());\n@@ -377,0 +365,1 @@\n+            t.remove();\n@@ -399,4 +388,1 @@\n-        CacheEntry<K,V> entry = cacheMap.remove(key);\n-        if (entry != null) {\n-            entry.invalidate();\n-        }\n+        cacheMap.remove(key);\n@@ -406,1 +392,1 @@\n-        expungeExpiredEntries();\n+        expungeExpiredEntries(false);\n@@ -416,1 +402,0 @@\n-                lruEntry.invalidate();\n@@ -438,1 +423,1 @@\n-        expungeExpiredEntries();\n+        expungeExpiredEntries(true);\n@@ -467,2 +452,0 @@\n-        void invalidate();\n-\n@@ -497,3 +480,0 @@\n-            if (valid == false) {\n-                invalidate();\n-            }\n@@ -502,6 +482,0 @@\n-\n-        public void invalidate() {\n-            key = null;\n-            value = null;\n-            expirationTime = -1;\n-        }\n@@ -534,3 +508,0 @@\n-            if (valid == false) {\n-                invalidate();\n-            }\n@@ -539,6 +510,0 @@\n-\n-        public void invalidate() {\n-            clear();\n-            key = null;\n-            expirationTime = -1;\n-        }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/Cache.java","additions":18,"deletions":53,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -0,0 +1,128 @@\n+\/*\n+ * Copyright (c) 2021, Dynatrace LLC. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.java.security;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.stream.IntStream;\n+\n+import sun.security.util.Cache;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@Fork(jvmArgsAppend = {\"--add-exports\", \"java.base\/sun.security.util=ALL-UNNAMED\", \"-Xmx1g\"})\n+public class CacheBench {\n+\n+    @State(Scope.Benchmark)\n+    public static class SharedState {\n+        Cache<Integer, Integer> cache;\n+\n+        @Param({\"20480\", \"204800\", \"5120000\"})\n+        int size;\n+\n+        @Param({\"86400\", \"0\"})\n+        int timeout;\n+\n+        @Setup\n+        public void setup() {\n+            cache = Cache.newSoftMemoryCache(size, timeout);\n+            IntStream.range(0, size).boxed().forEach(i -> cache.put(i, i));\n+        }\n+    }\n+\n+    @State(Scope.Thread)\n+    public static class GetPutState {\n+        Integer[] intArray;\n+        int index;\n+\n+        @Setup\n+        public void setup(SharedState benchState) {\n+            intArray = IntStream.range(0, benchState.size + 1).boxed().toArray(Integer[]::new);\n+            index = 0;\n+        }\n+\n+        @TearDown(Level.Invocation)\n+        public void tearDown() {\n+            index++;\n+            if (index >= intArray.length) {\n+                index = 0;\n+            }\n+        }\n+    }\n+\n+    @Benchmark\n+    public void put(SharedState benchState, GetPutState state) {\n+        Integer i = state.intArray[state.index];\n+        benchState.cache.put(i, i);\n+    }\n+\n+    @Benchmark\n+    public Integer get(SharedState benchState, GetPutState state) {\n+        Integer i = state.intArray[state.index];\n+        return benchState.cache.get(i);\n+    }\n+\n+    @State(Scope.Thread)\n+    public static class RemoveState {\n+        Integer[] intArray;\n+        int index;\n+        SharedState benchState;\n+\n+        @Setup\n+        public void setup(SharedState benchState) {\n+            this.benchState = benchState;\n+            intArray = IntStream.range(0, benchState.size).boxed().toArray(Integer[]::new);\n+            index = 0;\n+        }\n+\n+        @TearDown(Level.Invocation)\n+        public void tearDown() {\n+            \/\/ add back removed item\n+            Integer i = intArray[index];\n+            benchState.cache.put(i, i);\n+\n+            index++;\n+            if (index >= intArray.length) {\n+                index = 0;\n+            }\n+        }\n+    }\n+\n+    @Benchmark\n+    public void remove(SharedState benchState, RemoveState state) {\n+        Integer i = state.intArray[state.index];\n+        benchState.cache.remove(i);\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/security\/CacheBench.java","additions":128,"deletions":0,"binary":false,"changes":128,"status":"added"}]}