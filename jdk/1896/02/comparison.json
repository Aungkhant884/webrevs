{"files":[{"patch":"@@ -169,1 +169,3 @@\n-            if (out == null)\n+            \/\/ If out is null and the value is set in the context, we need to do nothing.\n+            if (out == null && context.get(Log.errKey) == null)\n+                \/\/ Situation: out is null and the value is not set in the context.\n@@ -171,1 +173,5 @@\n-            else\n+            else if (out instanceof PrintWriter)\n+                \/\/ Situation: out is not null and out is a PrintWriter.\n+                context.put(Log.errKey, (PrintWriter) out);\n+            else if (out != null)\n+                \/\/ Situation: out is not null and out is not a PrintWriter.\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/api\/JavacTool.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,126 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8198317\n+ * @summary Enhance JavacTool.getTask for flexibility\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.compiler\/com.sun.tools.javac.util\n+ * @build toolbox.ToolBox\n+ * @run main T8198317\n+ *\/\n+\n+import java.io.StringWriter;\n+import java.io.PrintWriter;\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.net.URI;\n+import java.util.List;\n+import java.util.Arrays;\n+import javax.tools.ToolProvider;\n+import javax.tools.SimpleJavaFileObject;\n+import javax.tools.JavaFileObject;\n+\n+import com.sun.tools.javac.api.JavacTaskImpl;\n+import com.sun.tools.javac.util.Log;\n+\n+import toolbox.ToolBox;\n+import toolbox.TestRunner;\n+import static toolbox.ToolBox.lineSeparator;\n+\n+public class T8198317 extends TestRunner{\n+    ToolBox tb;\n+\n+    public T8198317() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        T8198317 t = new T8198317();\n+        t.runTests();\n+    }\n+\n+    @Test\n+    public void testLogSettingInJavacTool() throws Exception {\n+        String code = \"\"\"\n+                import java.io.Serializable;\n+                class Test implements Serializable {\n+                    public static final int serialVersionUID = 1;\n+                }\"\"\";\n+\n+        List<String> expected = Arrays.asList(\n+                \"Test.java:3:29: compiler.warn.long.SVUID: Test\",\n+                \"1 warning\");\n+\n+        List<? extends JavaFileObject> files = Arrays.asList(new MemFile(\"Test.java\", code));\n+\n+        \/\/ Situation: out is null and the value is not set in the context.\n+        ByteArrayOutputStream bais = new ByteArrayOutputStream();\n+        PrintStream printStream = new PrintStream(bais);\n+        PrintStream prev = System.err;\n+        System.setErr(printStream);\n+        ToolProvider.getSystemJavaCompiler()\n+                .getTask(null, null, null, Arrays.asList(\"-XDrawDiagnostics\", \"-Xlint:serial\"), null, files)\n+                .call();\n+        tb.checkEqual(expected, Arrays.asList(bais.toString().split(lineSeparator)));\n+        System.setErr(prev);\n+\n+        \/\/ Situation: out is not null and out is a PrintWriter.\n+        StringWriter stringWriter2 = new StringWriter();\n+        PrintWriter expectedPW2 = new PrintWriter(stringWriter2);\n+        ToolProvider.getSystemJavaCompiler()\n+                .getTask(expectedPW2, null, null, Arrays.asList(\"-XDrawDiagnostics\", \"-Xlint:serial\"), null, files)\n+                .call();\n+        tb.checkEqual(expected, Arrays.asList(stringWriter2.toString().split(lineSeparator)));\n+\n+        \/\/ Situation: out is not null and out is not a PrintWriter.\n+        StringWriter stringWriter3 = new StringWriter();\n+        ToolProvider.getSystemJavaCompiler()\n+                .getTask(stringWriter3, null, null, Arrays.asList(\"-XDrawDiagnostics\", \"-Xlint:serial\"), null, files)\n+                .call();\n+        tb.checkEqual(expected, Arrays.asList(stringWriter3.toString().split(lineSeparator)));\n+    }\n+\n+    class MemFile extends SimpleJavaFileObject {\n+        public final String text;\n+\n+        MemFile(String name, String text) {\n+            super(URI.create(name), JavaFileObject.Kind.SOURCE);\n+            this.text = text;\n+        }\n+\n+        @Override\n+        public String getName() {\n+            return uri.toString();\n+        }\n+\n+        @Override\n+        public String getCharContent(boolean ignoreEncodingErrors) {\n+            return text;\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/api\/8198317\/T8198317.java","additions":126,"deletions":0,"binary":false,"changes":126,"status":"added"}]}