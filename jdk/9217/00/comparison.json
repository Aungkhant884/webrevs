{"files":[{"patch":"@@ -235,1 +235,2 @@\n-        java.desktop;\n+        java.desktop,\n+        java.net.http;\n","filename":"src\/java.base\/share\/classes\/module-info.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -22,0 +22,1 @@\n+    permission java.lang.RuntimePermission \"accessClassInPackage.jdk.internal.ref\";\n","filename":"src\/java.base\/share\/lib\/security\/default.policy","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import java.lang.ref.Cleaner;\n@@ -47,0 +48,1 @@\n+import jdk.internal.ref.CleanerFactory;\n@@ -51,0 +53,4 @@\n+ * @implSpec\n+ * Though the facade strongly reference its implementation, the\n+ * implementation MUST NOT strongly reference the facade.\n+ * It MAY use weak references if needed.\n@@ -54,0 +60,2 @@\n+    static final Cleaner cleaner = CleanerFactory.cleaner();\n+\n@@ -61,0 +69,2 @@\n+        \/\/ wakeup the impl when the facade is gc'ed\n+        cleaner.register(this, impl::facadeCleanup);\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/HttpClientFacade.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -504,0 +504,7 @@\n+    \/\/ called when the facade is GC'ed.\n+    \/\/ Just wakes up the selector to cleanup...\n+    void facadeCleanup() {\n+        SelectorManager selmgr = this.selmgr;\n+        if (selmgr != null) selmgr.wakeupSelector();\n+    }\n+\n@@ -736,1 +743,1 @@\n-            return reference.get() != null;\n+            return !reference.refersTo(null);\n@@ -762,2 +769,1 @@\n-        HttpClient facade = facade();\n-        return facade != null || referenceCount() > 0;\n+        return !facadeRef.refersTo(null) || referenceCount() > 0;\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/HttpClientImpl.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,0 +52,2 @@\n+import java.lang.ref.ReferenceQueue;\n+import java.lang.ref.WeakReference;\n@@ -95,0 +97,1 @@\n+    final ReferenceTracker TRACKER = ReferenceTracker.INSTANCE;\n@@ -170,0 +173,8 @@\n+        TRACKER.track(client);\n+        ReferenceQueue<HttpClient> queue = new ReferenceQueue<>();\n+        WeakReference<HttpClient> ref = new WeakReference<>(client, queue);\n+        try {\n+            URI uri = URI.create(uriString);\n+            HttpRequest request = HttpRequest.newBuilder(uri)\n+                    .POST(BodyPublishers.ofString(\"May the luck of the Irish be with you!\"))\n+                    .build();\n@@ -171,8 +182,3 @@\n-        URI uri = URI.create(uriString);\n-        HttpRequest request = HttpRequest.newBuilder(uri)\n-                .POST(BodyPublishers.ofString(\"May the luck of the Irish be with you!\"))\n-                .build();\n-\n-        BodyHandler bh = ofFileDownload(tempDir.resolve(uri.getPath().substring(1)),\n-                                        CREATE, TRUNCATE_EXISTING, WRITE);\n-        HttpResponse<Path> response = client.send(request, bh);\n+            BodyHandler bh = ofFileDownload(tempDir.resolve(uri.getPath().substring(1)),\n+                    CREATE, TRUNCATE_EXISTING, WRITE);\n+            HttpResponse<Path> response = client.send(request, bh);\n@@ -180,4 +186,4 @@\n-        out.println(\"Got response: \" + response);\n-        out.println(\"Got body Path: \" + response.body());\n-        String fileContents = new String(Files.readAllBytes(response.body()), UTF_8);\n-        out.println(\"Got body: \" + fileContents);\n+            out.println(\"Got response: \" + response);\n+            out.println(\"Got body Path: \" + response.body());\n+            String fileContents = new String(Files.readAllBytes(response.body()), UTF_8);\n+            out.println(\"Got body: \" + fileContents);\n@@ -185,6 +191,6 @@\n-        assertEquals(response.statusCode(),200);\n-        assertEquals(response.body().getFileName().toString(), expectedFilename);\n-        assertTrue(response.headers().firstValue(\"Content-Disposition\").isPresent());\n-        assertEquals(response.headers().firstValue(\"Content-Disposition\").get(),\n-                     contentDispositionValue);\n-        assertEquals(fileContents, \"May the luck of the Irish be with you!\");\n+            assertEquals(response.statusCode(), 200);\n+            assertEquals(response.body().getFileName().toString(), expectedFilename);\n+            assertTrue(response.headers().firstValue(\"Content-Disposition\").isPresent());\n+            assertEquals(response.headers().firstValue(\"Content-Disposition\").get(),\n+                    contentDispositionValue);\n+            assertEquals(fileContents, \"May the luck of the Irish be with you!\");\n@@ -192,3 +198,13 @@\n-        \/\/ additional checks unrelated to file download\n-        caseInsensitivityOfHeaders(request.headers());\n-        caseInsensitivityOfHeaders(response.headers());\n+            \/\/ additional checks unrelated to file download\n+            caseInsensitivityOfHeaders(request.headers());\n+            caseInsensitivityOfHeaders(response.headers());\n+        } finally {\n+            client = null;\n+            System.gc();\n+            while (!ref.refersTo(null)) {\n+                System.gc();\n+                if (queue.remove(100) == ref) break;\n+            }\n+            AssertionError failed = TRACKER.checkShutdown(1000);\n+            if (failed != null) throw failed;\n+        }\n@@ -246,0 +262,3 @@\n+        TRACKER.track(client);\n+        ReferenceQueue<HttpClient> queue = new ReferenceQueue<>();\n+        WeakReference<HttpClient> ref = new WeakReference<>(client, queue);\n@@ -247,6 +266,0 @@\n-        URI uri = URI.create(uriString);\n-        HttpRequest request = HttpRequest.newBuilder(uri)\n-                .POST(BodyPublishers.ofString(\"Does not matter\"))\n-                .build();\n-\n-        BodyHandler bh = ofFileDownload(tempDir, CREATE, TRUNCATE_EXISTING, WRITE);\n@@ -254,4 +267,21 @@\n-            HttpResponse<Path> response = client.send(request, bh);\n-            fail(\"UNEXPECTED response: \" + response + \", path:\" + response.body());\n-        } catch (UncheckedIOException | IOException ioe) {\n-            System.out.println(\"Caught expected: \" + ioe);\n+            URI uri = URI.create(uriString);\n+            HttpRequest request = HttpRequest.newBuilder(uri)\n+                    .POST(BodyPublishers.ofString(\"Does not matter\"))\n+                    .build();\n+\n+            BodyHandler bh = ofFileDownload(tempDir, CREATE, TRUNCATE_EXISTING, WRITE);\n+            try {\n+                HttpResponse<Path> response = client.send(request, bh);\n+                fail(\"UNEXPECTED response: \" + response + \", path:\" + response.body());\n+            } catch (UncheckedIOException | IOException ioe) {\n+                System.out.println(\"Caught expected: \" + ioe);\n+            }\n+        } finally {\n+            client = null;\n+            System.gc();\n+            while (!ref.refersTo(null)) {\n+                System.gc();\n+                if (queue.remove(100) == ref) break;\n+            }\n+            AssertionError failed = TRACKER.checkShutdown(1000);\n+            if (failed != null) throw failed;\n","filename":"test\/jdk\/java\/net\/httpclient\/AsFileDownloadTest.java","additions":62,"deletions":32,"binary":false,"changes":94,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,2 @@\n+import java.lang.ref.ReferenceQueue;\n+import java.lang.ref.WeakReference;\n@@ -35,1 +37,0 @@\n-import java.net.http.HttpResponse.BodyHandler;\n@@ -57,0 +58,1 @@\n+\n@@ -395,0 +397,2 @@\n+        ReferenceQueue<HttpClient> queue = new ReferenceQueue<>();\n+        WeakReference<HttpClient> ref = new WeakReference<>(client, queue);\n@@ -506,0 +510,8 @@\n+            client = null;\n+            System.gc();\n+            while (!ref.refersTo(null)) {\n+                System.gc();\n+                if (queue.remove(100) == ref) break;\n+            }\n+            var error = TRACKER.checkShutdown(500);\n+            if (error != null) throw error;\n","filename":"test\/jdk\/java\/net\/httpclient\/DigestEchoClient.java","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -182,1 +182,1 @@\n-        long delay = Math.min(graceDelayMs, 500);\n+        long delay = Math.min(graceDelayMs, 10);\n@@ -188,1 +188,3 @@\n-                    System.out.println(\"Waiting for HTTP operations to terminate...\");\n+                    if (i == 0) {\n+                        System.out.println(\"Waiting for HTTP operations to terminate...\");\n+                    }\n","filename":"test\/jdk\/java\/net\/httpclient\/ReferenceTracker.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @modules java.net.http\/jdk.internal.net.http.common\n@@ -62,0 +63,2 @@\n+\n+import static java.lang.System.err;\n@@ -180,0 +183,1 @@\n+    static final ReferenceTracker TRACKER = ReferenceTracker.INSTANCE;\n@@ -189,17 +193,22 @@\n-        for (int i=0; i< ITERATION_COUNT; i++) {\n-            if (!sameClient || client == null)\n-                client = HttpClient.newBuilder()\n-                        .proxy(NO_PROXY)\n-                        .sslContext(sslContext)\n-                        .build();\n-            HttpRequest request = HttpRequest.newBuilder(URI.create(url)).build();\n-            CustomBodySubscriber bs = new CustomBodySubscriber();\n-            try {\n-                HttpResponse<String> response = client.send(request, r -> bs);\n-                String body = response.body();\n-                out.println(response + \": \" + body);\n-                fail(\"UNEXPECTED RESPONSE: \" + response);\n-            } catch (IOException expected) {\n-                String pm = bs.receivedAsString();\n-                out.println(\"partial body received: \" + pm);\n-                assertEquals(pm, expectedPatrialBody);\n+        try {\n+            for (int i = 0; i < ITERATION_COUNT; i++) {\n+                if (!sameClient || client == null) {\n+                    client = HttpClient.newBuilder()\n+                            .proxy(NO_PROXY)\n+                            .sslContext(sslContext)\n+                            .build();\n+                    TRACKER.track(client);\n+                    System.gc();\n+                }\n+                HttpRequest request = HttpRequest.newBuilder(URI.create(url)).build();\n+                CustomBodySubscriber bs = new CustomBodySubscriber();\n+                try {\n+                    HttpResponse<String> response = client.send(request, r -> bs);\n+                    String body = response.body();\n+                    out.println(response + \": \" + body);\n+                    fail(\"UNEXPECTED RESPONSE: \" + response);\n+                } catch (IOException expected) {\n+                    String pm = bs.receivedAsString();\n+                    out.println(\"partial body received: \" + pm);\n+                    assertEquals(pm, expectedPatrialBody);\n+                }\n@@ -207,0 +216,5 @@\n+        } finally {\n+            client = null;\n+            System.gc();\n+            var error = TRACKER.checkShutdown(1000);\n+            if (error != null) throw error;\n@@ -218,20 +232,25 @@\n-        for (int i=0; i< ITERATION_COUNT; i++) {\n-            if (!sameClient || client == null)\n-                client = HttpClient.newBuilder()\n-                        .proxy(NO_PROXY)\n-                        .sslContext(sslContext)\n-                        .build();\n-            HttpRequest request = HttpRequest.newBuilder(URI.create(url)).build();\n-            CustomBodySubscriber bs = new CustomBodySubscriber();\n-            try {\n-                HttpResponse<String> response = client.sendAsync(request, r -> bs).get();\n-                String body = response.body();\n-                out.println(response + \": \" + body);\n-                fail(\"UNEXPECTED RESPONSE: \" + response);\n-            } catch (ExecutionException ee) {\n-                if (ee.getCause() instanceof IOException) {\n-                    String pm = bs.receivedAsString();\n-                    out.println(\"partial body received: \" + pm);\n-                    assertEquals(pm, expectedPatrialBody);\n-                } else {\n-                    throw ee;\n+        try {\n+            for (int i = 0; i < ITERATION_COUNT; i++) {\n+                if (!sameClient || client == null) {\n+                    client = HttpClient.newBuilder()\n+                            .proxy(NO_PROXY)\n+                            .sslContext(sslContext)\n+                            .build();\n+                    System.gc();\n+                    TRACKER.track(client);\n+                }\n+                HttpRequest request = HttpRequest.newBuilder(URI.create(url)).build();\n+                CustomBodySubscriber bs = new CustomBodySubscriber();\n+                try {\n+                    HttpResponse<String> response = client.sendAsync(request, r -> bs).get();\n+                    String body = response.body();\n+                    out.println(response + \": \" + body);\n+                    fail(\"UNEXPECTED RESPONSE: \" + response);\n+                } catch (ExecutionException ee) {\n+                    if (ee.getCause() instanceof IOException) {\n+                        String pm = bs.receivedAsString();\n+                        out.println(\"partial body received: \" + pm);\n+                        assertEquals(pm, expectedPatrialBody);\n+                    } else {\n+                        throw ee;\n+                    }\n@@ -240,0 +259,5 @@\n+        } finally {\n+            client = null;\n+            System.gc();\n+            var error = TRACKER.checkShutdown(1000);\n+            if (error != null) throw error;\n","filename":"test\/jdk\/java\/net\/httpclient\/ResponseBodyBeforeError.java","additions":62,"deletions":38,"binary":false,"changes":100,"status":"modified"}]}