{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -112,1 +112,3 @@\n-    if (state._chunk->next() != nullptr) { \/\/ Delete later chunks.\n+    bool have_more_chunks = (state._chunk->next() != nullptr);\n+\n+    if (have_more_chunks) { \/\/ Delete later chunks.\n@@ -123,3 +125,0 @@\n-    _chunk = state._chunk;      \/\/ Roll back to saved chunk.\n-    _hwm = state._hwm;\n-    _max = state._max;\n@@ -127,3 +126,21 @@\n-    \/\/ Clear out this chunk (to detect allocation bugs)\n-    if (ZapResourceArea) {\n-      memset(state._hwm, badResourceValue, state._max - state._hwm);\n+    if (have_more_chunks || (_hwm != state._hwm)) {\n+      \/\/ Resource area was modified: either there were new chunks, or\n+      \/\/ HWM moved in this chunk. Roll back!\n+\n+      char* replaced_hwm = _hwm;\n+\n+      _chunk = state._chunk;\n+      _hwm = state._hwm;\n+      _max = state._max;\n+\n+      \/\/ Clear out this chunk (to detect allocation bugs).\n+      \/\/ If we never got a new chunk, then we only need to clear\n+      \/\/ up to replaced hwm.\n+      if (ZapResourceArea) {\n+        char* limit = have_more_chunks ? _max : replaced_hwm;\n+        memset(_hwm, badResourceValue, limit - _hwm);\n+      }\n+    } else {\n+      assert(_chunk == state._chunk, \"Sanity check\");\n+      assert(_hwm == state._hwm,     \"Sanity check\");\n+      assert(_max == state._max,     \"Sanity check\");\n","filename":"src\/hotspot\/share\/memory\/resourceArea.hpp","additions":25,"deletions":8,"binary":false,"changes":33,"status":"modified"}]}