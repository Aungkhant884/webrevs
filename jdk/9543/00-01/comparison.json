{"files":[{"patch":"@@ -112,3 +112,1 @@\n-    bool have_more_chunks = (state._chunk->next() != nullptr);\n-\n-    if (have_more_chunks) { \/\/ Delete later chunks.\n+    if (state._chunk->next() != nullptr) { \/\/ Delete later chunks.\n@@ -122,0 +120,1 @@\n+      assert(_hwm != state._hwm, \"Sanity check: HWM moves when we have later chunks\");\n@@ -126,3 +125,2 @@\n-    if (have_more_chunks || (_hwm != state._hwm)) {\n-      \/\/ Resource area was modified: either there were new chunks, or\n-      \/\/ HWM moved in this chunk. Roll back!\n+    if (_hwm != state._hwm) {\n+      \/\/ HWM moved: resource area was used. Roll back!\n@@ -137,2 +135,3 @@\n-      \/\/ If we never got a new chunk, then we only need to clear\n-      \/\/ up to replaced hwm.\n+      \/\/ If current chunk contains the replaced HWM, this means we are\n+      \/\/ doing the rollback within the same chunk, and we only need to\n+      \/\/ clear up to replaced HWM.\n@@ -140,1 +139,2 @@\n-        char* limit = have_more_chunks ? _max : replaced_hwm;\n+        char* limit = _chunk->contains(replaced_hwm) ? replaced_hwm : _max;\n+        assert(limit >= _hwm, \"Sanity check: non-negative memset size\");\n@@ -144,3 +144,4 @@\n-      assert(_chunk == state._chunk, \"Sanity check\");\n-      assert(_hwm == state._hwm,     \"Sanity check\");\n-      assert(_max == state._max,     \"Sanity check\");\n+      \/\/ No allocations. Nothing to rollback. Check it.\n+      assert(_chunk == state._chunk, \"Sanity check: idempotence\");\n+      assert(_hwm == state._hwm,     \"Sanity check: idempotence\");\n+      assert(_max == state._max,     \"Sanity check: idempotence\");\n","filename":"src\/hotspot\/share\/memory\/resourceArea.hpp","additions":13,"deletions":12,"binary":false,"changes":25,"status":"modified"}]}