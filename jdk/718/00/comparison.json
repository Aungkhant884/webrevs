{"files":[{"patch":"@@ -2111,0 +2111,20 @@\n+\n+                @Override\n+                public void visitClassDef(JCClassDecl that) {\n+                    if (that.sym != null) {\n+                        \/\/ Method preFlow shouldn't visit class definitions\n+                        \/\/ that have not been entered and attributed.\n+                        \/\/ See JDK-8254557 and JDK-8203277 for more details.\n+                        super.visitClassDef(that);\n+                    }\n+                }\n+\n+                @Override\n+                public void visitLambda(JCLambda that) {\n+                    if (that.type != null) {\n+                        \/\/ Method preFlow shouldn't visit lambda expressions\n+                        \/\/ that have not been entered and attributed.\n+                        \/\/ See JDK-8254557 and JDK-8203277 for more details.\n+                        super.visitLambda(that);\n+                    }\n+                }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -0,0 +1,125 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8254557\n+ * @summary Method Attr.preFlow shouldn't visit class definitions that have not yet been entered and attributed.\n+ * @compile T8254557.java\n+ *\/\n+\n+import java.util.Iterator;\n+import java.util.function.Function;\n+\n+public class T8254557 {\n+    \/\/ test anonymous class in if statement\n+    public <T> void testIf(boolean b) {\n+        test(rs -> {\n+            if (b) {\n+                return new Iterator<>() {\n+                    @Override\n+                    public boolean hasNext() {\n+                        return true;\n+                    }\n+\n+                    @Override\n+                    public T next() {\n+                        return null;\n+                    }\n+                };\n+            } else {\n+                return new Iterator<>() {\n+                    @Override\n+                    public boolean hasNext() {\n+                        return true;\n+                    }\n+\n+                    @Override\n+                    public T next() {\n+                        return null;\n+                    }\n+                };\n+            }\n+        });\n+    }\n+\n+    \/\/ test anonymous class in while statement\n+    public <T> void testWhile(boolean b) {\n+        test(rs -> {\n+            while (b) {\n+                return new Iterator<>() {\n+                    @Override\n+                    public boolean hasNext() {\n+                        return true;\n+                    }\n+\n+                    @Override\n+                    public T next() {\n+                        return null;\n+                    }\n+                };\n+            }\n+            return null;\n+        });\n+    }\n+\n+    \/\/ test anonymous class in do while statement\n+    public <T> void testDoWhileLoop(boolean b) {\n+        test(rs -> {\n+            do {\n+                return new Iterator<>() {\n+                    @Override\n+                    public boolean hasNext() {\n+                        return true;\n+                    }\n+\n+                    @Override\n+                    public T next() {\n+                        return null;\n+                    }\n+                };\n+            } while (b);\n+        });\n+    }\n+\n+    \/\/ test anonymous class in for statement\n+    public <T> void testForLoop(boolean b) {\n+        test(rs -> {\n+            for ( ; ; ) {\n+                return new Iterator<>() {\n+                    @Override\n+                    public boolean hasNext() {\n+                        return true;\n+                    }\n+\n+                    @Override\n+                    public T next() {\n+                        return null;\n+                    }\n+                };\n+            }\n+        });\n+    }\n+\n+    private void test(Function function) { }\n+}\n\\ No newline at end of file\n","filename":"test\/langtools\/tools\/javac\/T8254557\/T8254557.java","additions":125,"deletions":0,"binary":false,"changes":125,"status":"added"}]}