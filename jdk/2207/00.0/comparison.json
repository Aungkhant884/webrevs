{"files":[{"patch":"@@ -2490,1 +2490,0 @@\n-    if (dst->encoding() == src->encoding()) return;\n@@ -2515,1 +2514,0 @@\n-    if (dst->encoding() == src->encoding()) return;\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -172,0 +172,3 @@\n+  \/\/ Move with zero extension\n+  void movfltz(XMMRegister dst, XMMRegister src) { movss(dst, src); }\n+\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3381,1 +3381,1 @@\n-      case  4: __ movflt ($dst$$XMMRegister, $src$$XMMRegister); break;\n+      case  4: __ movfltz($dst$$XMMRegister, $src$$XMMRegister); break;\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3716,1 +3716,3 @@\n-    assert(pss->trim_ticks().seconds() == 0.0, \"Unexpected partial trimming during evacuation\");\n+    assert(pss->trim_ticks().value() == 0,\n+           \"Unexpected partial trimming during evacuation value \" JLONG_FORMAT,\n+           pss->trim_ticks().value());\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -455,3 +455,4 @@\n-        int targetRemaining = target.remaining();\n-        int remaining = limit - position();\n-        if (remaining == 0)\n+        int pos = position();\n+        int remaining = limit - pos;\n+        assert remaining >= 0;\n+        if (remaining <= 0) \/\/ include equality condition when remaining == 0\n@@ -460,0 +461,6 @@\n+\n+        int targetRemaining = target.remaining();\n+        assert targetRemaining >= 0;\n+        if (targetRemaining <= 0) \/\/ include condition targetRemaining == 0\n+            return 0;\n+\n@@ -461,0 +468,1 @@\n+\n@@ -463,1 +471,1 @@\n-            limit(position() + n);\n+            limit(pos + n);\n@@ -954,1 +962,2 @@\n-        int n = src.limit() - srcPos;\n+        int srcLim = src.limit();\n+        int srcRem = (srcPos <= srcLim ? srcLim - srcPos : 0);\n@@ -956,1 +965,4 @@\n-        if (n > limit() - pos)\n+        int lim = limit();\n+        int rem = (pos <= lim ? lim - pos : 0);\n+\n+        if (srcRem > rem)\n@@ -959,1 +971,1 @@\n-        putBuffer(pos, src, srcPos, n);\n+        putBuffer(pos, src, srcPos, srcRem);\n@@ -961,2 +973,2 @@\n-        position(pos + n);\n-        src.position(srcPos + n);\n+        position(pos + srcRem);\n+        src.position(srcPos + srcRem);\n","filename":"src\/java.base\/share\/classes\/java\/nio\/X-Buffer.java.template","additions":21,"deletions":9,"binary":false,"changes":30,"status":"modified"}]}