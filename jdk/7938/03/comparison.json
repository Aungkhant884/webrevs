{"files":[{"patch":"@@ -1781,0 +1781,12 @@\n+    reasonable_max = limit_heap_by_allocatable_memory(reasonable_max);\n+\n+    if (!FLAG_IS_DEFAULT(InitialHeapSize)) {\n+      \/\/ An initial heap size was specified on the command line,\n+      \/\/ so be sure that the maximum size is consistent.  Done\n+      \/\/ after call to limit_heap_by_allocatable_memory because that\n+      \/\/ method might reduce the allocation size.\n+      reasonable_max = MAX2(reasonable_max, (julong)InitialHeapSize);\n+    } else if (!FLAG_IS_DEFAULT(MinHeapSize)) {\n+      reasonable_max = MAX2(reasonable_max, (julong)MinHeapSize);\n+    }\n+\n@@ -1827,12 +1839,0 @@\n-    reasonable_max = limit_heap_by_allocatable_memory(reasonable_max);\n-\n-    if (!FLAG_IS_DEFAULT(InitialHeapSize)) {\n-      \/\/ An initial heap size was specified on the command line,\n-      \/\/ so be sure that the maximum size is consistent.  Done\n-      \/\/ after call to limit_heap_by_allocatable_memory because that\n-      \/\/ method might reduce the allocation size.\n-      reasonable_max = MAX2(reasonable_max, (julong)InitialHeapSize);\n-    } else if (!FLAG_IS_DEFAULT(MinHeapSize)) {\n-      reasonable_max = MAX2(reasonable_max, (julong)MinHeapSize);\n-    }\n-\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package gc.arguments;\n+\n+\/*\n+ * @test TestUseCompressedOopsFlagsWithUlimit\n+ * @bug 8280761\n+ * @summary Verify correct UseCompressedOops when MaxRAM and MaxRAMPercentage\n+ * are specified with ulimit -v.\n+ * @library \/test\/lib\n+ * @library \/\n+ * @requires vm.bits == \"64\"\n+ * @requires os.family != \"aix\" & os.family != \"windows\"\n+ * @run driver gc.arguments.TestUseCompressedOopsFlagsWithUlimit\n+ *\/\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class TestUseCompressedOopsFlagsWithUlimit {\n+\n+  private static void checkFlag(long maxram, int maxrampercent, boolean expectcoop) throws Exception {\n+\n+    ArrayList<String> args = new ArrayList<String>();\n+    args.add(\"-XX:MaxRAM=\" + maxram);\n+    args.add(\"-XX:MaxRAMPercentage=\" + maxrampercent);\n+    args.add(\"-XX:+PrintFlagsFinal\");\n+    args.add(\"-version\");\n+\n+    String cmd = ProcessTools.getCommandLine(ProcessTools.createTestJvm(args.toArray(String[]::new)));\n+    ProcessBuilder pb = new ProcessBuilder(\"sh\", \"-c\", \"ulimit -v 10485760;\" + cmd);\n+    OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+    output.shouldHaveExitValue(0);\n+    String stdout = output.getStdout();\n+\n+    boolean actualcoop = getFlagBoolValue(\"UseCompressedOops\", stdout);\n+    if (actualcoop != expectcoop) {\n+      throw new RuntimeException(\"UseCompressedOops set to \" + actualcoop +\n+        \", expected \" + expectcoop + \" when running with the following flags: \" + Arrays.asList(args).toString());\n+    }\n+  }\n+\n+  private static boolean getFlagBoolValue(String flag, String where) {\n+    Matcher m = Pattern.compile(flag + \"\\\\s+:?= (true|false)\").matcher(where);\n+    if (!m.find()) {\n+      throw new RuntimeException(\"Could not find value for flag \" + flag + \" in output string\");\n+    }\n+    return m.group(1).equals(\"true\");\n+  }\n+\n+  public static void main(String args[]) throws Exception {\n+    \/\/ Tests\n+    \/\/ Verify that UseCompressedOops Ergo follows ulimit -v setting.\n+\n+    long oneG = 1L * 1024L * 1024L * 1024L;\n+\n+    \/\/ Args: MaxRAM , MaxRAMPercentage, expect coop\n+    \/\/ Having MaxRAMPercentage set explicitly instead of relying on its default value indeed makes the test more resilient.\n+    checkFlag(32 * oneG, 100, true);\n+    checkFlag(128 * oneG, 100, true);\n+  }\n+}\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestUseCompressedOopsFlagsWithUlimit.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"}]}