{"files":[{"patch":"@@ -49,1 +49,1 @@\n-  private static void checkFlag(long maxram, int maxrampercent, boolean forcecoop, boolean expectcoop) throws Exception {\n+  private static void checkFlag(long maxram, int maxrampercent, boolean expectcoop) throws Exception {\n@@ -54,4 +54,0 @@\n-    if (forcecoop) {\n-      args.add(\"-XX:+UseCompressedOops\");\n-    }\n-\n@@ -84,3 +80,1 @@\n-    \/\/ 1. Verify that UseCompressedOops Ergo follows ulimit -v setting.\n-    \/\/ 2. Verify that UseCompressedOops forces compressed oops limit even\n-    \/\/    when ulimit -v are specified.\n+    \/\/ Verify that UseCompressedOops Ergo follows ulimit -v setting.\n@@ -90,4 +84,4 @@\n-    \/\/ Args: MaxRAM , MaxRAMPercentage, forcecoop, expect coop\n-    checkFlag(32 * oneG, 100, false, true);\n-    checkFlag(128 * oneG, 100, false, true);\n-    checkFlag(128 * oneG, 100, true, true);\n+    \/\/ Args: MaxRAM , MaxRAMPercentage, expect coop\n+    \/\/ Having MaxRAMPercentage set explicitly instead of relying on its default value indeed makes the test more resilient.\n+    checkFlag(32 * oneG, 100, true);\n+    checkFlag(128 * oneG, 100, true);\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestUseCompressedOopsFlagsWithUlimit.java","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"}]}