{"files":[{"patch":"@@ -384,0 +384,3 @@\n+        WIN_CODEPAGE (\"win-codepage\",\n+                OptionCategories.PLATFORM_WIN),\n+\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/Arguments.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -121,0 +121,1 @@\n+            put(CLIOptions.WIN_CODEPAGE.getId(), USE.INSTALL);\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/ValidOptions.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -53,0 +53,6 @@\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerConfigurationException;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n@@ -226,0 +232,7 @@\n+    private static final BundlerParamInfo<String> CODEPAGE =\n+            new StandardBundlerParam<>(\n+                    Arguments.CLIOptions.WIN_CODEPAGE.getId(),\n+                    String.class,\n+                    null,\n+                    (s, p) -> s);\n+\n@@ -515,7 +528,1 @@\n-        \/\/ Copy standard l10n files.\n-        for (String loc : Arrays.asList(\"en\", \"ja\", \"zh_CN\")) {\n-            String fname = \"MsiInstallerStrings_\" + loc + \".wxl\";\n-            try (InputStream is = OverridableResource.readDefault(fname)) {\n-                Files.copy(is, CONFIG_ROOT.fetchFrom(params).resolve(fname));\n-            }\n-        }\n+        copyPrimaryWxlFile(params);\n@@ -534,0 +541,39 @@\n+    private void copyPrimaryWxlFile(Map<String, ? super Object> params) throws IOException {\n+        String fname = I18N.getString(\"resource.wxl-file-name\");\n+        Path dest = CONFIG_ROOT.fetchFrom(params).resolve(fname);\n+        try (InputStream is = OverridableResource.readDefault(fname)) {\n+            String codepage = CODEPAGE.fetchFrom(params);\n+            if (codepage != null) {\n+                DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();\n+                factory.setNamespaceAware(false);\n+                DocumentBuilder builder = factory.newDocumentBuilder();\n+\n+                Document doc = builder.parse(is);\n+\n+                XPath xPath = XPathFactory.newInstance().newXPath();\n+                NodeList nodes = (NodeList) xPath.evaluate(\n+                        \"\/\/WixLocalization\/@Codepage\", doc,\n+                        XPathConstants.NODESET);\n+                if (nodes.getLength() != 1) {\n+                    throw new IOException(MessageFormat.format(I18N.getString(\n+                            \"error.rewrite-codepage-in-wix-l10n-file\"),\n+                            fname));\n+                }\n+\n+                nodes.item(0).setNodeValue(codepage);\n+\n+                TransformerFactory transformerFactory = TransformerFactory.newInstance();\n+                Transformer transformer = transformerFactory.newTransformer();\n+                DOMSource source = new DOMSource(doc);\n+                StreamResult result = new StreamResult(dest.toFile());\n+                transformer.transform(source, result);\n+            } else {\n+                Files.copy(is, dest);\n+            }\n+        } catch (ParserConfigurationException | SAXException | TransformerException |\n+                XPathExpressionException ex) {\n+            throw new IOException(MessageFormat.format(I18N.getString(\n+                    \"error.write-wix-l10n-file\"), dest.toAbsolutePath()), ex);\n+        }\n+    }\n+\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/WinMsiBundler.java","additions":53,"deletions":7,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -56,0 +56,2 @@\n+error.rewrite-codepage-in-wix-l10n-file=Failed to rewrite codepage value in {0} file\n+error.write-wix-l10n-file=Failed to write {0} file\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/resources\/WinResources.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,0 +55,2 @@\n+error.rewrite-codepage-in-wix-l10n-file=Fehler beim Umschreiben des Codepage-Werts in der Datei {0}\n+error.write-wix-l10n-file=Datei {0} konnte nicht geschrieben werden\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/resources\/WinResources_de.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,0 +56,2 @@\n+error.rewrite-codepage-in-wix-l10n-file={0}\\u30D5\\u30A1\\u30A4\\u30EB\\u306E\\u30B3\\u30FC\\u30C9\\u30DA\\u30FC\\u30B8\\u5024\\u306E\\u66F8\\u304D\\u63DB\\u3048\\u306B\\u5931\\u6557\\u3057\\u307E\\u3057\\u305F\n+error.write-wix-l10n-file={0}\\u30D5\\u30A1\\u30A4\\u30EB\\u306E\\u66F8\\u304D\\u8FBC\\u307F\\u306B\\u5931\\u6557\\u3057\\u307E\\u3057\\u305F\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/resources\/WinResources_ja.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,0 +56,2 @@\n+error.rewrite-codepage-in-wix-l10n-file=\\u65E0\\u6CD5\\u5728 {0} \\u6587\\u4EF6\\u4E2D\\u91CD\\u5199\\u4EE3\\u7801\\u9875\\u503C\n+error.write-wix-l10n-file=\\u672A\\u80FD\\u5199\\u5165 {0} \\u6587\\u4EF6\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/resources\/WinResources_zh_CN.properties","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2022, Red Hat Inc. and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.jpackage.test.Annotations.Test;\n+import jdk.jpackage.test.JPackageCommand;\n+import jdk.jpackage.test.PackageTest;\n+import jdk.jpackage.test.PackageType;\n+import jdk.jpackage.test.TKit;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+\n+\/*\n+ * @test\n+ * @summary jpackage with --win-codepage\n+ * @library ..\/helpers\n+ * @key jpackagePlatformPackage\n+ * @build jdk.jpackage.test.*\n+ * @requires (os.family == \"windows\")\n+ * @modules jdk.jpackage\/jdk.jpackage.internal\n+ * @compile WinCodepageTest.java\n+ * @run main\/othervm\/timeout=360 -Xmx512m jdk.jpackage.test.Main\n+ *  --jpt-run=WinCodepageTest\n+ *\/\n+public class WinCodepageTest {\n+\n+    @Test\n+    public static void testFailure() {\n+        new PackageTest()\n+                .forTypes(PackageType.WINDOWS)\n+                .configureHelloApp()\n+                .addInitializer(WinCodepageTest::addFileWithNonAsciiName)\n+                .addInitializer(cmd -> cmd.saveConsoleOutput(true))\n+                .setExpectedExitCode(1).addBundleVerifier((cmd, result) -> {\n+                    TKit.assertTextStream(\"error LGHT0311\")\n+                            .apply(result.getOutput().stream());\n+                })\n+                .run();\n+    }\n+\n+    @Test\n+    public static void testSuccess() {\n+        new PackageTest()\n+                .forTypes(PackageType.WINDOWS)\n+                .configureHelloApp()\n+                .addInitializer(WinCodepageTest::addFileWithNonAsciiName)\n+                .addInitializer(cmd -> cmd.addArguments(\"--win-codepage\", NON_ASCII_FILE_NAME_CODEPAGE))\n+                .addInstallVerifier(cmd -> {\n+                    final Path appDir = cmd.pathToUnpackedPackageFile(cmd.appInstallationDirectory());\n+                    TKit.assertFileExists(appDir.resolve(\"app\").resolve(NON_ASCII_FILE_NAME));\n+                })\n+                .run();\n+    }\n+\n+    private static void addFileWithNonAsciiName(JPackageCommand cmd) throws IOException {\n+        Path input = Path.of(cmd.getArgumentValue(\"--input\"));\n+        Files.createDirectories(input);\n+        Path helloBgTxt = input.resolve(NON_ASCII_FILE_NAME);\n+        Files.writeString(helloBgTxt, \"hello\", StandardCharsets.UTF_8);\n+    }\n+\n+    \/\/ Hello in Bulgarian\n+    private static final String NON_ASCII_FILE_NAME = \"\\u0417\\u0434\\u0440\\u0430\\u0432\\u0435\\u0439\\u0442\\u0435.txt\";\n+    private static final String NON_ASCII_FILE_NAME_CODEPAGE = \"1251\";\n+}\n","filename":"test\/jdk\/tools\/jpackage\/windows\/WinCodepageTest.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"}]}