{"files":[{"patch":"@@ -44,0 +44,1 @@\n+#include \"runtime\/thread.hpp\"\n@@ -1125,0 +1126,6 @@\n+\n+#ifndef PRODUCT\n+void ArchiveBuilder::assert_is_vm_thread() {\n+  assert(Thread::current()->is_VM_thread(), \"ArchiveBuilder should be used only inside the VMThread\");\n+}\n+#endif\n","filename":"src\/hotspot\/share\/memory\/archiveBuilder.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -317,0 +317,2 @@\n+  static void assert_is_vm_thread() PRODUCT_RETURN;\n+\n@@ -351,0 +353,1 @@\n+    assert_is_vm_thread();\n","filename":"src\/hotspot\/share\/memory\/archiveBuilder.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -681,5 +681,6 @@\n-  \/\/ a) if CDS archive(s) have been mapped, we would have already reserved the\n-  \/\/    ccs (immediately above the mapped archives) and initialized\n-  \/\/    the CompressedKlassPointers encoding.\n-  \/\/ b) otherwise, we will create the ccs on our own. It will be\n-  \/\/    placed above the java heap, since we assume it has been placed in low\n+  \/\/ a) if CDS is active (runtime, Xshare=on), it will create the class space\n+  \/\/    for us, initialize it and set up CompressedKlassPointers encoding.\n+  \/\/    Class space will be reserved above the mapped archives.\n+  \/\/ b) if CDS either deactivated (Xshare=off) or a static dump is to be done (Xshare:dump),\n+  \/\/    we will create the class space on our own. It will be placed above the java heap,\n+  \/\/    since we assume it has been placed in low\n@@ -693,0 +694,2 @@\n+    \/\/ If any of the archived space fails to map, UseSharedSpaces\n+    \/\/ is reset to false.\n","filename":"src\/hotspot\/share\/memory\/metaspace.cpp","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -175,2 +175,2 @@\n-static bool shared_base_too_high(char* shared_base, size_t cds_max) {\n-  if (SharedBaseAddress != 0 && shared_base < (char*)SharedBaseAddress) {\n+static bool shared_base_too_high(char* specified_base, char* aligned_base, size_t cds_max) {\n+  if (specified_base != NULL && aligned_base < specified_base) {\n@@ -181,1 +181,1 @@\n-  if (max_uintx - uintx(shared_base) < uintx(cds_max)) {\n+  if (max_uintx - uintx(aligned_base) < uintx(cds_max)) {\n@@ -190,1 +190,3 @@\n-  char* shared_base = (char*)align_up((char*)SharedBaseAddress, MetaspaceShared::reserved_space_alignment());\n+  char* specified_base = (char*)SharedBaseAddress;\n+  char* aligned_base = align_up(specified_base, MetaspaceShared::reserved_space_alignment());\n+\n@@ -192,1 +194,1 @@\n-  if (shared_base_too_high(shared_base, cds_max)) {\n+  if (shared_base_too_high(specified_base, aligned_base, cds_max)) {\n@@ -194,1 +196,1 @@\n-  } else if (!shared_base_valid(shared_base)) {\n+  } else if (!shared_base_valid(aligned_base)) {\n@@ -196,0 +198,2 @@\n+  } else {\n+    return aligned_base;\n@@ -197,9 +201,12 @@\n-  if (err) {\n-    log_warning(cds)(\"SharedBaseAddress (\" INTPTR_FORMAT \") is %s. Reverted to \" INTPTR_FORMAT,\n-                     p2i((void*)SharedBaseAddress), err,\n-                     p2i((void*)Arguments::default_SharedBaseAddress()));\n-    SharedBaseAddress = Arguments::default_SharedBaseAddress();\n-    shared_base = (char*)align_up((char*)SharedBaseAddress, MetaspaceShared::reserved_space_alignment());\n-  }\n-  assert(!shared_base_too_high(shared_base, cds_max) && shared_base_valid(shared_base), \"Sanity\");\n-  return shared_base;\n+\n+  log_warning(cds)(\"SharedBaseAddress (\" INTPTR_FORMAT \") is %s. Reverted to \" INTPTR_FORMAT,\n+                   p2i((void*)SharedBaseAddress), err,\n+                   p2i((void*)Arguments::default_SharedBaseAddress()));\n+\n+  specified_base = (char*)Arguments::default_SharedBaseAddress();\n+  aligned_base = align_up(specified_base, MetaspaceShared::reserved_space_alignment());\n+\n+  \/\/ Make sure the default value of SharedBaseAddress specified in globals.hpp is sane.\n+  assert(!shared_base_too_high(specified_base, aligned_base, cds_max), \"Sanity\");\n+  assert(shared_base_valid(aligned_base), \"Sanity\");\n+  return aligned_base;\n","filename":"src\/hotspot\/share\/memory\/metaspaceShared.cpp","additions":22,"deletions":15,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -234,0 +234,10 @@\n+  \/\/\n+  \/\/ During static dump: _requested_base_address == SharedBaseAddress.\n+  \/\/\n+  \/\/ During dynamic dump: _requested_base_address is not always the same as SharedBaseAddress:\n+  \/\/ - SharedBaseAddress is used for *reading the base archive*. I.e., CompactHashtable uses\n+  \/\/   it to convery offsets to pointers to Symbols in the base archive.\n+  \/\/   The base archive may be mapped to an OS-selected address due to ASLR. E.g.,\n+  \/\/   you may have SharedBaseAddress == 0x00ff123400000000.\n+  \/\/ - _requested_base_address is used for *writing the output archive*. It's usually\n+  \/\/   0x800000000 (unless it was set by -XX:SharedBaseAddress during -Xshare:dump).\n","filename":"src\/hotspot\/share\/memory\/metaspaceShared.hpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"}]}