{"files":[{"patch":"@@ -1735,0 +1735,9 @@\n+     * The canonical name for a primitive class is the keyword for the\n+     * corresponding primitive type ({@code byte}, {@code short},\n+     * {@code char}, {@code int}, and so on).\n+     *\n+     * <p>An array type has a canonical name if and only if its\n+     * component type has a canonical name. When an array type has a\n+     * canonical name, it is equal to the canonical name of the\n+     * component type followed by \"{@code []}\".\n+     *\n@@ -1737,0 +1746,1 @@\n+     * @jls 6.7 Fully Qualified Names and Canonical Names\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,101 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8281671\n+ * @summary Checks on various \"getFooName\" methods of java.lang.Class\n+ *\/\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+public class NameTest {\n+    public static void main(String... args) {\n+        testCanonicalName();\n+        testSimpleName();\n+    }\n+\n+    private static void testCanonicalName() {\n+        class LocalClass {} \/\/ Local class; no canonical name\n+        Object o = new Object() {}; \/\/ Anonymous class; no canonical name\n+        Object[] objectArray = {};\n+\n+        Map<Class<?>, String> expectedCanonicalName = new HashMap<>();\n+\n+        expectedCanonicalName.put(LocalClass.class,             null);\n+        expectedCanonicalName.put(o.getClass(),                 null);\n+\n+        \/\/ If a component type doesn't have a canonical name, neither\n+        \/\/ does an array of that type.\n+        expectedCanonicalName.put(LocalClass.class.arrayType(), null);\n+        expectedCanonicalName.put(o.getClass().arrayType(),     null);\n+\n+        expectedCanonicalName.put(int.class,              \"int\");\n+        expectedCanonicalName.put(Object.class,           \"java.lang.Object\");\n+        expectedCanonicalName.put(objectArray.getClass(), \"java.lang.Object[]\");\n+\n+        for (var entry : expectedCanonicalName.entrySet()) {\n+            var key = entry.getKey();\n+            var expectedName = entry.getValue();\n+            String canonicalName = key.getCanonicalName();\n+            if (!Objects.equals(canonicalName, expectedName)) {\n+                System.err.println(\"Unexpected canonical name '\" +\n+                                   canonicalName + \"' found for \" +\n+                                   key + \", expected \" + expectedName);\n+                throw new RuntimeException();\n+            }\n+        }\n+    }\n+\n+    private static void testSimpleName() {\n+        class ALocalClass {} \/\/ Local class\n+        Object o = new Object() {}; \/\/ Anonymous class, empty simple name\n+        Object[] objectArray = {};\n+\n+        Map<Class<?>, String> expectedSimpleName = new HashMap<>();\n+\n+        expectedSimpleName.put(ALocalClass.class,             \"ALocalClass\");\n+        expectedSimpleName.put(o.getClass(),                  \"\");\n+\n+        expectedSimpleName.put(ALocalClass.class.arrayType(), \"ALocalClass[]\");\n+        expectedSimpleName.put(o.getClass().arrayType(),      \"[]\");\n+\n+        expectedSimpleName.put(int.class,                     \"int\");\n+        expectedSimpleName.put(Object.class,                  \"Object\");\n+        expectedSimpleName.put(objectArray.getClass(),        \"Object[]\");\n+\n+        for (var entry : expectedSimpleName.entrySet()) {\n+            var key = entry.getKey();\n+            var expectedName = entry.getValue();\n+            String simpleName = key.getSimpleName();\n+            if (!Objects.equals(simpleName, expectedName)) {\n+                System.err.println(\"Unexpected simple name '\" +\n+                                   simpleName + \"' found for \" +\n+                                   key + \", expected \" + expectedName);\n+                throw new RuntimeException();\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/Class\/NameTest.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"}]}