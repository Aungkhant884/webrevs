{"files":[{"patch":"@@ -309,3 +309,1 @@\n-    if (kind() == ExceptionState || kind() == EmptyExceptionState ||\n-        kind() == CallerEmptyExceptionState)\n-    {\n+    if (kind() == empty_exception_kind(true \/* caller *\/)) {\n","filename":"src\/hotspot\/share\/c1\/c1_ValueStack.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+* @test\n+* @bug 8316422\n+* @summary Test exception state used for deoptimization.\n+* @run main\/othervm -XX:+VerifyStack -Xcomp -XX:TieredStopAtLevel=1 -XX:+DeoptimizeALot\n+*      -XX:CompileOnly=compiler.exceptions.TestDeoptExceptionState::test compiler.exceptions.TestDeoptExceptionState\n+*\/\n+\n+package compiler.exceptions;\n+\n+public class TestDeoptExceptionState {\n+    private static int res = 0;\n+\n+    public static void main(String args[]) {\n+        int x = 42;\n+        int y = 1 + test();\n+        System.out.println(\"Foo \" + x + \" \" + y);\n+    }\n+\n+    public static int test() {\n+      int x = 42;\n+      int y = 1 + test1();\n+      return x + y;\n+    }\n+\n+    public static int test1() {\n+        for (int i = 0; i < 100; i++) {\n+            try {\n+                divZero();\n+            } catch (ArithmeticException ea) {\n+                \/\/ Expected\n+            }\n+        }\n+        return 1;\n+    }\n+\n+    public static void divZero() {\n+        res += div(0, 0);\n+    }\n+\n+    public static long div(long dividend, long divisor) {\n+        return dividend \/ divisor;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/exceptions\/TestDeoptExceptionState.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"}]}