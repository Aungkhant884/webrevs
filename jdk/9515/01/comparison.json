{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -255,1 +255,0 @@\n-  static void do_safepoint_work() { }\n","filename":"src\/hotspot\/share\/compiler\/compilationPolicy.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -519,10 +519,1 @@\n-class ParallelSPCleanupThreadClosure : public ThreadClosure {\n-public:\n-  void do_thread(Thread* thread) {\n-    if (thread->is_Java_thread()) {\n-      StackWatermarkSet::start_processing(JavaThread::cast(thread), StackWatermarkKind::gc);\n-    }\n-  }\n-};\n-\n-class ParallelSPCleanupTask : public WorkerTask {\n+class ParallelCleanupTask : public WorkerTask {\n@@ -550,0 +541,7 @@\n+  class SafepointCleanupThreadClosure : public ThreadClosure {\n+  public:\n+    void do_thread(Thread* thread) {\n+      StackWatermarkSet::start_processing(JavaThread::cast(thread), StackWatermarkKind::gc);\n+    }\n+  };\n+\n@@ -551,1 +549,1 @@\n-  ParallelSPCleanupTask(uint num_workers) :\n+  ParallelCleanupTask(uint num_workers) :\n@@ -559,18 +557,1 @@\n-    if (_subtasks.try_claim_task(SafepointSynchronize::SAFEPOINT_CLEANUP_LAZY_ROOT_PROCESSING)) {\n-      if (_do_lazy_roots) {\n-        Tracer t(\"lazy partial thread root processing\");\n-        ParallelSPCleanupThreadClosure cl;\n-        Threads::threads_do(&cl);\n-      }\n-    }\n-\n-    if (_subtasks.try_claim_task(SafepointSynchronize::SAFEPOINT_CLEANUP_UPDATE_INLINE_CACHES)) {\n-      Tracer t(\"updating inline caches\");\n-      InlineCacheBuffer::update_inline_caches();\n-    }\n-\n-    if (_subtasks.try_claim_task(SafepointSynchronize::SAFEPOINT_CLEANUP_COMPILATION_POLICY)) {\n-      Tracer t(\"compilation policy safepoint handler\");\n-      CompilationPolicy::do_safepoint_work();\n-    }\n-\n+    \/\/ These tasks are ordered by relative length of time to execute so that potentially longer tasks start first.\n@@ -598,0 +579,13 @@\n+    if (_subtasks.try_claim_task(SafepointSynchronize::SAFEPOINT_CLEANUP_LAZY_ROOT_PROCESSING)) {\n+      if (_do_lazy_roots) {\n+        Tracer t(\"lazy partial thread root processing\");\n+        SafepointCleanupThreadClosure cl;\n+        Threads::java_threads_do(&cl);\n+      }\n+    }\n+\n+    if (_subtasks.try_claim_task(SafepointSynchronize::SAFEPOINT_CLEANUP_UPDATE_INLINE_CACHES)) {\n+      Tracer t(\"updating inline caches\");\n+      InlineCacheBuffer::update_inline_caches();\n+    }\n+\n@@ -619,1 +613,1 @@\n-    ParallelSPCleanupTask cleanup(num_cleanup_workers);\n+    ParallelCleanupTask cleanup(num_cleanup_workers);\n@@ -623,1 +617,1 @@\n-    ParallelSPCleanupTask cleanup(1);\n+    ParallelCleanupTask cleanup(1);\n","filename":"src\/hotspot\/share\/runtime\/safepoint.cpp","additions":25,"deletions":31,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -75,1 +75,0 @@\n-    SAFEPOINT_CLEANUP_COMPILATION_POLICY,\n","filename":"src\/hotspot\/share\/runtime\/safepoint.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1674,1 +1674,1 @@\n-    \/\/ level at a safepoint in ObjectSynchronizer::do_safepoint_work().\n+    \/\/ level at a safepoint in SafepointSynchronize::do_cleanup_tasks.\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,0 @@\n-        output.shouldContain(\"compilation policy safepoint handler\");\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/SafepointCleanupTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}