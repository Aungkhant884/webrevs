{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -421,0 +421,2 @@\n+  assert(result != nullptr, \"invariant\");\n+  assert(result->get_oop() == nullptr, \"result not initialized\");\n@@ -435,0 +437,1 @@\n+  result->set_oop(nullptr); \/\/ Initialize result in case klass initialize throws.\n@@ -440,1 +443,1 @@\n-static void write_field(JfrJavaArguments* args, JavaValue* result, TRAPS) {\n+static void write_field(JfrJavaArguments* args, TRAPS) {\n@@ -442,1 +445,0 @@\n-  assert(result != NULL, \"invariant\");\n@@ -460,1 +462,1 @@\n-  write_field(args, args->result(), THREAD);\n+  write_field(args, THREAD);\n@@ -468,1 +470,1 @@\n-void JfrJavaSupport::get_field(JfrJavaArguments* args, Thread* thread) {\n+static void get_field_ref(JfrJavaArguments* args, bool local_ref, TRAPS) {\n@@ -470,7 +472,1 @@\n-  read_field(args, args->result(), thread);\n-}\n-\n-void JfrJavaSupport::get_field_local_ref(JfrJavaArguments* args, TRAPS) {\n-  assert(args != NULL, \"invariant\");\n-  DEBUG_ONLY(check_java_thread_in_vm(THREAD));\n-\n+  DEBUG_ONLY(JfrJavaSupport::check_java_thread_in_vm(THREAD));\n@@ -480,1 +476,0 @@\n-\n@@ -483,3 +478,7 @@\n-\n-  if (obj != NULL) {\n-    result->set_jobject(local_jni_handle(obj, THREAD));\n+  if (obj == nullptr) {\n+    return;\n+  }\n+  if (local_ref) {\n+    result->set_jobject(JfrJavaSupport::local_jni_handle(obj, THREAD));\n+  } else {\n+    result->set_jobject(JfrJavaSupport::global_jni_handle(obj, THREAD));\n@@ -489,3 +488,3 @@\n-void JfrJavaSupport::get_field_global_ref(JfrJavaArguments* args, TRAPS) {\n-  assert(args != NULL, \"invariant\");\n-  DEBUG_ONLY(check_java_thread_in_vm(THREAD));\n+void JfrJavaSupport::get_field_local_ref(JfrJavaArguments* args, TRAPS) {\n+  get_field_ref(args, true, THREAD);\n+}\n@@ -493,8 +492,2 @@\n-  JavaValue* const result = args->result();\n-  assert(result != NULL, \"invariant\");\n-  assert(result->get_type() == T_OBJECT, \"invariant\");\n-  read_field(args, result, CHECK);\n-  const oop obj = result->get_oop();\n-  if (obj != NULL) {\n-    result->set_jobject(global_jni_handle(obj, THREAD));\n-  }\n+void JfrJavaSupport::get_field_global_ref(JfrJavaArguments* args, TRAPS) {\n+  get_field_ref(args, false, THREAD);\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJavaSupport.cpp","additions":20,"deletions":27,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,1 +60,0 @@\n-  static void get_field(JfrJavaArguments* args, Thread* thread);\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJavaSupport.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+#include \"logging\/log.hpp\"\n@@ -59,1 +60,6 @@\n-  JfrJavaSupport::notify_all(get_chunk_monitor(thread), thread);\n+  jobject monitor = get_chunk_monitor(thread);\n+  if (monitor == nullptr) {\n+    log_error(jfr, system)(\"Unable to create chunk rotation monitor\");\n+    return;\n+  }\n+  JfrJavaSupport::notify_all(monitor, thread);\n","filename":"src\/hotspot\/share\/jfr\/recorder\/repository\/jfrChunkRotation.cpp","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"}]}