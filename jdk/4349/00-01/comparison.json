{"files":[{"patch":"@@ -2662,12 +2662,11 @@\n-     * Returns {@code d} &times;\n-     * 2<sup>{@code scaleFactor}<\/sup> rounded as if performed\n-     * by a single correctly rounded floating-point multiply.\n-     * If the exponent of the result is between {@link\n-     * Double#MIN_EXPONENT} and {@link Double#MAX_EXPONENT}, the\n-     * answer is calculated exactly.  If the exponent of the result\n-     * would be larger than {@code Double.MAX_EXPONENT}, an\n-     * infinity is returned.  Note that if the result is subnormal,\n-     * precision may be lost; that is, when {@code scalb(x, n)}\n-     * is subnormal, {@code scalb(scalb(x, n), -n)} may not equal\n-     * <i>x<\/i>.  When the result is non-NaN, the result has the same\n-     * sign as {@code d}.\n+     * Returns {@code d} &times; 2<sup>{@code scaleFactor}<\/sup>\n+     * rounded as if performed by a single correctly rounded\n+     * floating-point multiply.  If the exponent of the result is\n+     * between {@link Double#MIN_EXPONENT} and {@link\n+     * Double#MAX_EXPONENT}, the answer is calculated exactly.  If the\n+     * exponent of the result would be larger than {@code\n+     * Double.MAX_EXPONENT}, an infinity is returned.  Note that if\n+     * the result is subnormal, precision may be lost; that is, when\n+     * {@code scalb(x, n)} is subnormal, {@code scalb(scalb(x, n),\n+     * -n)} may not equal <i>x<\/i>.  When the result is non-NaN, the\n+     * result has the same sign as {@code d}.\n@@ -2691,2 +2690,1 @@\n-         * When\n-         * scaling up, it does not matter what order the\n+         * When scaling up, it does not matter what order the\n@@ -2748,12 +2746,11 @@\n-     * Returns {@code f} &times;\n-     * 2<sup>{@code scaleFactor}<\/sup> rounded as if performed\n-     * by a single correctly rounded floating-point multiply.\n-     * If the exponent of the result is between {@link\n-     * Float#MIN_EXPONENT} and {@link Float#MAX_EXPONENT}, the\n-     * answer is calculated exactly.  If the exponent of the result\n-     * would be larger than {@code Float.MAX_EXPONENT}, an\n-     * infinity is returned.  Note that if the result is subnormal,\n-     * precision may be lost; that is, when {@code scalb(x, n)}\n-     * is subnormal, {@code scalb(scalb(x, n), -n)} may not equal\n-     * <i>x<\/i>.  When the result is non-NaN, the result has the same\n-     * sign as {@code f}.\n+     * Returns {@code f} &times; 2<sup>{@code scaleFactor}<\/sup>\n+     * rounded as if performed by a single correctly rounded\n+     * floating-point multiply.  If the exponent of the result is\n+     * between {@link Float#MIN_EXPONENT} and {@link\n+     * Float#MAX_EXPONENT}, the answer is calculated exactly.  If the\n+     * exponent of the result would be larger than {@code\n+     * Float.MAX_EXPONENT}, an infinity is returned.  Note that if the\n+     * result is subnormal, precision may be lost; that is, when\n+     * {@code scalb(x, n)} is subnormal, {@code scalb(scalb(x, n),\n+     * -n)} may not equal <i>x<\/i>.  When the result is non-NaN, the\n+     * result has the same sign as {@code f}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Math.java","additions":23,"deletions":26,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2050,12 +2050,11 @@\n-     * Returns {@code d} &times;\n-     * 2<sup>{@code scaleFactor}<\/sup> rounded as if performed\n-     * by a single correctly rounded floating-point multiply.\n-     * If the exponent of the result is between {@link\n-     * Double#MIN_EXPONENT} and {@link Double#MAX_EXPONENT}, the\n-     * answer is calculated exactly.  If the exponent of the result\n-     * would be larger than {@code Double.MAX_EXPONENT}, an\n-     * infinity is returned.  Note that if the result is subnormal,\n-     * precision may be lost; that is, when {@code scalb(x, n)}\n-     * is subnormal, {@code scalb(scalb(x, n), -n)} may not equal\n-     * <i>x<\/i>.  When the result is non-NaN, the result has the same\n-     * sign as {@code d}.\n+     * Returns {@code d} &times; 2<sup>{@code scaleFactor}<\/sup>\n+     * rounded as if performed by a single correctly rounded\n+     * floating-point multiply.  If the exponent of the result is\n+     * between {@link Double#MIN_EXPONENT} and {@link\n+     * Double#MAX_EXPONENT}, the answer is calculated exactly.  If the\n+     * exponent of the result would be larger than {@code\n+     * Double.MAX_EXPONENT}, an infinity is returned.  Note that if\n+     * the result is subnormal, precision may be lost; that is, when\n+     * {@code scalb(x, n)} is subnormal, {@code scalb(scalb(x, n),\n+     * -n)} may not equal <i>x<\/i>.  When the result is non-NaN, the\n+     * result has the same sign as {@code d}.\n@@ -2082,12 +2081,11 @@\n-     * Returns {@code f} &times;\n-     * 2<sup>{@code scaleFactor}<\/sup> rounded as if performed\n-     * by a single correctly rounded floating-point multiply.\n-     * If the exponent of the result is between {@link\n-     * Float#MIN_EXPONENT} and {@link Float#MAX_EXPONENT}, the\n-     * answer is calculated exactly.  If the exponent of the result\n-     * would be larger than {@code Float.MAX_EXPONENT}, an\n-     * infinity is returned.  Note that if the result is subnormal,\n-     * precision may be lost; that is, when {@code scalb(x, n)}\n-     * is subnormal, {@code scalb(scalb(x, n), -n)} may not equal\n-     * <i>x<\/i>.  When the result is non-NaN, the result has the same\n-     * sign as {@code f}.\n+     * Returns {@code f} &times; 2<sup>{@code scaleFactor}<\/sup>\n+     * rounded as if performed by a single correctly rounded\n+     * floating-point multiply.  If the exponent of the result is\n+     * between {@link Float#MIN_EXPONENT} and {@link\n+     * Float#MAX_EXPONENT}, the answer is calculated exactly.  If the\n+     * exponent of the result would be larger than {@code\n+     * Float.MAX_EXPONENT}, an infinity is returned.  Note that if the\n+     * result is subnormal, precision may be lost; that is, when\n+     * {@code scalb(x, n)} is subnormal, {@code scalb(scalb(x, n),\n+     * -n)} may not equal <i>x<\/i>.  When the result is non-NaN, the\n+     * result has the same sign as {@code f}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StrictMath.java","additions":22,"deletions":24,"binary":false,"changes":46,"status":"modified"}]}