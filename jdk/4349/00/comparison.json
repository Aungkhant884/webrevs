{"files":[{"patch":"@@ -1797,3 +1797,0 @@\n-                \/\/ Store product in a double field to cause an\n-                \/\/ overflow even if non-strictfp evaluation is being\n-                \/\/ used.\n@@ -2667,4 +2664,2 @@\n-     * by a single correctly rounded floating-point multiply to a\n-     * member of the double value set.  See the Java\n-     * Language Specification for a discussion of floating-point\n-     * value sets.  If the exponent of the result is between {@link\n+     * by a single correctly rounded floating-point multiply.\n+     * If the exponent of the result is between {@link\n@@ -2696,2 +2691,1 @@\n-         * This method does not need to be declared strictfp to\n-         * compute the same correct result on all platforms.  When\n+         * When\n@@ -2712,19 +2706,1 @@\n-         * real rounding error occurs.  If the double value set is\n-         * being used exclusively, the rounding will occur on a\n-         * multiply.  If the double-extended-exponent value set is\n-         * being used, the products will (perhaps) be exact but the\n-         * stores to d are guaranteed to round to the double value\n-         * set.\n-         *\n-         * It is _not_ a valid implementation to first multiply d by\n-         * 2^MIN_EXPONENT and then by 2 ^ (scaleFactor %\n-         * MIN_EXPONENT) since even in a strictfp program double\n-         * rounding on underflow could occur; e.g. if the scaleFactor\n-         * argument was (MIN_EXPONENT - n) and the exponent of d was a\n-         * little less than -(MIN_EXPONENT - n), meaning the final\n-         * result would be subnormal.\n-         *\n-         * Since exact reproducibility of this method can be achieved\n-         * without any undue performance burden, there is no\n-         * compelling reason to allow double rounding on underflow in\n-         * scalb.\n+         * real rounding error occurs.\n@@ -2774,4 +2750,2 @@\n-     * by a single correctly rounded floating-point multiply to a\n-     * member of the float value set.  See the Java\n-     * Language Specification for a discussion of floating-point\n-     * value sets.  If the exponent of the result is between {@link\n+     * by a single correctly rounded floating-point multiply.\n+     * If the exponent of the result is between {@link\n@@ -2817,3 +2791,1 @@\n-         * float will be the correctly rounded float result.  Since\n-         * all operations other than the final multiply will be exact,\n-         * it is not necessary to declare this method strictfp.\n+         * float will be the correctly rounded float result.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Math.java","additions":7,"deletions":35,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -472,13 +472,0 @@\n-         *\n-         * This method does *not* need to be declared strictfp to get\n-         * fully reproducible results.  Whether or not a method is\n-         * declared strictfp can only make a difference in the\n-         * returned result if some operation would overflow or\n-         * underflow with strictfp semantics.  The operation\n-         * (twoToThe52 + a ) cannot overflow since large values of a\n-         * are screened out; the add cannot underflow since twoToThe52\n-         * is too large.  The subtraction ((twoToThe52 + a ) -\n-         * twoToThe52) will be exact as discussed above and thus\n-         * cannot overflow or meaningfully underflow.  Finally, the\n-         * last multiply in the return statement is by plus or minus\n-         * 1.0, which is exact too.\n@@ -2065,4 +2052,2 @@\n-     * by a single correctly rounded floating-point multiply to a\n-     * member of the double value set.  See the Java\n-     * Language Specification for a discussion of floating-point\n-     * value sets.  If the exponent of the result is between {@link\n+     * by a single correctly rounded floating-point multiply.\n+     * If the exponent of the result is between {@link\n@@ -2099,4 +2084,2 @@\n-     * by a single correctly rounded floating-point multiply to a\n-     * member of the float value set.  See the Java\n-     * Language Specification for a discussion of floating-point\n-     * value sets.  If the exponent of the result is between {@link\n+     * by a single correctly rounded floating-point multiply.\n+     * If the exponent of the result is between {@link\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StrictMath.java","additions":4,"deletions":21,"binary":false,"changes":25,"status":"modified"}]}