{"files":[{"patch":"@@ -137,0 +137,2 @@\n+<li><a href=\"#building-for-risc-v\" id=\"toc-building-for-risc-v\">Building\n+for RISC-V<\/a><\/li>\n@@ -1379,4 +1381,4 @@\n-<code>qemu-deboostrap<\/code> to create the <em>target<\/em> system\n-chroot, which would have the native libraries and headers specific to\n-that <em>target<\/em> system. After that, we can use the cross-compiler\n-on the <em>build<\/em> system, pointing into chroot to get the build\n+<code>debootstrap<\/code> to create the <em>target<\/em> system chroot,\n+which would have the native libraries and headers specific to that\n+<em>target<\/em> system. After that, we can use the cross-compiler on the\n+<em>build<\/em> system, pointing into chroot to get the build\n@@ -1392,1 +1394,1 @@\n-<code>sudo qemu-debootstrap \\       --arch=arm64 \\       --verbose \\       --include=fakeroot,symlinks,build-essential,libx11-dev,libxext-dev,libxrender-dev,libxrandr-dev,libxtst-dev,libxt-dev,libcups2-dev,libfontconfig1-dev,libasound2-dev,libfreetype6-dev,libpng-dev,libffi-dev \\       --resolve-deps \\       buster \\       ~\/sysroot-arm64 \\       http:\/\/httpredir.debian.org\/debian\/<\/code><\/p><\/li>\n+<code>sudo debootstrap \\       --arch=arm64 \\       --verbose \\       --include=fakeroot,symlinks,build-essential,libx11-dev,libxext-dev,libxrender-dev,libxrandr-dev,libxtst-dev,libxt-dev,libcups2-dev,libfontconfig1-dev,libasound2-dev,libfreetype6-dev,libpng-dev,libffi-dev \\       --resolve-deps \\       buster \\       ~\/sysroot-arm64 \\       http:\/\/httpredir.debian.org\/debian\/     # If the target architecture is `riscv64`,     # the path should be `debian-ports` instead of `debian`.<\/code><\/p><\/li>\n@@ -1519,0 +1521,7 @@\n+<tr class=\"even\">\n+<td style=\"text-align: left;\">riscv64<\/td>\n+<td style=\"text-align: left;\">sid<\/td>\n+<td style=\"text-align: left;\">riscv64<\/td>\n+<td style=\"text-align: left;\">riscv64-linux-gnu<\/td>\n+<td>(all)<\/td>\n+<\/tr>\n@@ -1528,0 +1537,15 @@\n+<h3 id=\"building-for-risc-v\">Building for RISC-V<\/h3>\n+<p>The RISC-V community provides a basic <a\n+href=\"https:\/\/github.com\/riscv-collab\/riscv-gnu-toolchain\">GNU compiler\n+toolchain<\/a>, but the <a href=\"#External-Library-Requirements\">external\n+libraries<\/a> required by OpenJDK complicate the building process. The\n+placeholder <code>&lt;toolchain-installed-path&gt;<\/code> shown below is\n+the path where you want to install the toolchain.<\/p>\n+<ul>\n+<li><p>Install the RISC-V GNU compiler toolchain:\n+<code>git clone --recursive https:\/\/github.com\/riscv-collab\/riscv-gnu-toolchain     cd riscv-gnu-toolchain     .\/configure --prefix=&lt;toolchain-installed-path&gt;     make linux     export PATH=&lt;toolchain-installed-path&gt;\/bin:$PATH<\/code><\/p><\/li>\n+<li><p>Cross-compile all the required libraries:\n+<code># An example for libffi     git clone https:\/\/github.com\/libffi\/libffi     cd libffi     .\/configure --host=riscv64-unknown-linux-gnu --prefix=&lt;toolchain-installed-path&gt;\/sysroot\/usr     make     make install<\/code><\/p><\/li>\n+<li><p>Configure and build OpenJDK:\n+<code>bash configure \\       --with-boot-jdk=$BOOT_JDK \\       --openjdk-target=riscv64-linux-gnu \\       --with-sysroot=&lt;toolchain-installed-path&gt;\/sysroot \\       --with-toolchain-path=&lt;toolchain-installed-path&gt;\/bin \\       --with-extra-path=&lt;toolchain-installed-path&gt;\/bin     make images<\/code><\/p><\/li>\n+<\/ul>\n","filename":"doc\/building.html","additions":29,"deletions":5,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -1150,1 +1150,1 @@\n-provided by your OS. On Debian\/Ubuntu systems, one could use `qemu-deboostrap` to\n+provided by your OS. On Debian\/Ubuntu systems, one could use `debootstrap` to\n@@ -1165,1 +1165,1 @@\n-    sudo qemu-debootstrap \\\n+    sudo debootstrap \\\n@@ -1173,0 +1173,2 @@\n+    # If the target architecture is `riscv64`,\n+    # the path should be `debian-ports` instead of `debian`.\n@@ -1220,0 +1222,1 @@\n+  riscv64       sid          riscv64       riscv64-linux-gnu        (all)\n@@ -1229,0 +1232,38 @@\n+### Building for RISC-V\n+\n+The RISC-V community provides a basic\n+[GNU compiler toolchain](https:\/\/github.com\/riscv-collab\/riscv-gnu-toolchain),\n+but the [external libraries](#External-Library-Requirements) required by OpenJDK\n+complicate the building process. The placeholder `<toolchain-installed-path>`\n+shown below is the path where you want to install the toolchain.\n+\n+  * Install the RISC-V GNU compiler toolchain:\n+    ```\n+    git clone --recursive https:\/\/github.com\/riscv-collab\/riscv-gnu-toolchain\n+    cd riscv-gnu-toolchain\n+    .\/configure --prefix=<toolchain-installed-path>\n+    make linux\n+    export PATH=<toolchain-installed-path>\/bin:$PATH\n+    ```\n+\n+  * Cross-compile all the required libraries:\n+    ```\n+    # An example for libffi\n+    git clone https:\/\/github.com\/libffi\/libffi\n+    cd libffi\n+    .\/configure --host=riscv64-unknown-linux-gnu --prefix=<toolchain-installed-path>\/sysroot\/usr\n+    make\n+    make install\n+    ```\n+\n+  * Configure and build OpenJDK:\n+    ```\n+    bash configure \\\n+      --with-boot-jdk=$BOOT_JDK \\\n+      --openjdk-target=riscv64-linux-gnu \\\n+      --with-sysroot=<toolchain-installed-path>\/sysroot \\\n+      --with-toolchain-path=<toolchain-installed-path>\/bin \\\n+      --with-extra-path=<toolchain-installed-path>\/bin\n+    make images\n+    ```\n+\n","filename":"doc\/building.md","additions":43,"deletions":2,"binary":false,"changes":45,"status":"modified"}]}