{"files":[{"patch":"@@ -43,1 +43,1 @@\n-  ShenandoahBarrierSet::assembler()->storeval_barrier(masm->masm(), newval, rscratch2);\n+  ShenandoahBarrierSet::assembler()->iu_barrier(masm->masm(), newval, rscratch2);\n@@ -105,1 +105,1 @@\n-    value_opr = storeval_barrier(access.gen(), value_opr, access.access_emit_info(), access.decorators());\n+    value_opr = iu_barrier(access.gen(), value_opr, access.access_emit_info(), access.decorators());\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2018, 2021, Red Hat, Inc. All rights reserved.\n@@ -50,1 +50,1 @@\n-    if ((ShenandoahSATBBarrier && !dest_uninitialized) || ShenandoahStoreValEnqueueBarrier || ShenandoahLoadRefBarrier) {\n+    if ((ShenandoahSATBBarrier && !dest_uninitialized) || ShenandoahIUBarrier || ShenandoahLoadRefBarrier) {\n@@ -300,2 +300,2 @@\n-void ShenandoahBarrierSetAssembler::storeval_barrier(MacroAssembler* masm, Register dst, Register tmp) {\n-  if (ShenandoahStoreValEnqueueBarrier) {\n+void ShenandoahBarrierSetAssembler::iu_barrier(MacroAssembler* masm, Register dst, Register tmp) {\n+  if (ShenandoahIUBarrier) {\n@@ -397,1 +397,1 @@\n-    storeval_barrier(masm, val, tmp1);\n+    iu_barrier(masm, val, tmp1);\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/shenandoahBarrierSetAssembler_aarch64.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2018, 2021, Red Hat, Inc. All rights reserved.\n@@ -63,1 +63,1 @@\n-  void storeval_barrier(MacroAssembler* masm, Register dst, Register tmp);\n+  void iu_barrier(MacroAssembler* masm, Register dst, Register tmp);\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/shenandoahBarrierSetAssembler_aarch64.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2018, 2021, Red Hat, Inc. All rights reserved.\n@@ -49,2 +49,2 @@\n-  \/\/ Apply storeval barrier to newval.\n-  ShenandoahBarrierSet::assembler()->storeval_barrier(masm->masm(), newval, tmp1);\n+  \/\/ Apply IU barrier to newval.\n+  ShenandoahBarrierSet::assembler()->iu_barrier(masm->masm(), newval, tmp1);\n@@ -105,1 +105,1 @@\n-    value_opr = storeval_barrier(access.gen(), value_opr, access.access_emit_info(), access.decorators());\n+    value_opr = iu_barrier(access.gen(), value_opr, access.access_emit_info(), access.decorators());\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1_x86.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2018, 2021, Red Hat, Inc. All rights reserved.\n@@ -77,1 +77,1 @@\n-    if ((ShenandoahSATBBarrier && !dest_uninitialized) || ShenandoahStoreValEnqueueBarrier || ShenandoahLoadRefBarrier) {\n+    if ((ShenandoahSATBBarrier && !dest_uninitialized) || ShenandoahIUBarrier || ShenandoahLoadRefBarrier) {\n@@ -420,3 +420,3 @@\n-void ShenandoahBarrierSetAssembler::storeval_barrier(MacroAssembler* masm, Register dst, Register tmp) {\n-  if (ShenandoahStoreValEnqueueBarrier) {\n-    storeval_barrier_impl(masm, dst, tmp);\n+void ShenandoahBarrierSetAssembler::iu_barrier(MacroAssembler* masm, Register dst, Register tmp) {\n+  if (ShenandoahIUBarrier) {\n+    iu_barrier_impl(masm, dst, tmp);\n@@ -426,2 +426,2 @@\n-void ShenandoahBarrierSetAssembler::storeval_barrier_impl(MacroAssembler* masm, Register dst, Register tmp) {\n-  assert(ShenandoahStoreValEnqueueBarrier, \"should be enabled\");\n+void ShenandoahBarrierSetAssembler::iu_barrier_impl(MacroAssembler* masm, Register dst, Register tmp) {\n+  assert(ShenandoahIUBarrier, \"should be enabled\");\n@@ -431,1 +431,1 @@\n-  if (ShenandoahStoreValEnqueueBarrier) {\n+  if (ShenandoahIUBarrier) {\n@@ -589,1 +589,1 @@\n-      storeval_barrier(masm, val, tmp3);\n+      iu_barrier(masm, val, tmp3);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/shenandoahBarrierSetAssembler_x86.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2018, 2021, Red Hat, Inc. All rights reserved.\n@@ -59,1 +59,1 @@\n-  void storeval_barrier_impl(MacroAssembler* masm, Register dst, Register tmp);\n+  void iu_barrier_impl(MacroAssembler* masm, Register dst, Register tmp);\n@@ -62,1 +62,1 @@\n-  void storeval_barrier(MacroAssembler* masm, Register dst, Register tmp);\n+  void iu_barrier(MacroAssembler* masm, Register dst, Register tmp);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/shenandoahBarrierSetAssembler_x86.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2018, 2021, Red Hat, Inc. All rights reserved.\n@@ -176,2 +176,2 @@\n-LIR_Opr ShenandoahBarrierSetC1::storeval_barrier(LIRGenerator* gen, LIR_Opr obj, CodeEmitInfo* info, DecoratorSet decorators) {\n-  if (ShenandoahStoreValEnqueueBarrier) {\n+LIR_Opr ShenandoahBarrierSetC1::iu_barrier(LIRGenerator* gen, LIR_Opr obj, CodeEmitInfo* info, DecoratorSet decorators) {\n+  if (ShenandoahIUBarrier) {\n@@ -189,1 +189,1 @@\n-    value = storeval_barrier(access.gen(), value, access.access_emit_info(), access.decorators());\n+    value = iu_barrier(access.gen(), value, access.access_emit_info(), access.decorators());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2018, 2021, Red Hat, Inc. All rights reserved.\n@@ -201,1 +201,1 @@\n-  LIR_Opr storeval_barrier(LIRGenerator* gen, LIR_Opr obj, CodeEmitInfo* info, DecoratorSet decorators);\n+  LIR_Opr iu_barrier(LIRGenerator* gen, LIR_Opr obj, CodeEmitInfo* info, DecoratorSet decorators);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c1\/shenandoahBarrierSetC1.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2018, 2021, Red Hat, Inc. All rights reserved.\n@@ -51,1 +51,1 @@\n-  : _enqueue_barriers(new (comp_arena) GrowableArray<ShenandoahEnqueueBarrierNode*>(comp_arena, 8,  0, NULL)),\n+  : _iu_barriers(new (comp_arena) GrowableArray<ShenandoahIUBarrierNode*>(comp_arena, 8,  0, NULL)),\n@@ -55,2 +55,2 @@\n-int ShenandoahBarrierSetC2State::enqueue_barriers_count() const {\n-  return _enqueue_barriers->length();\n+int ShenandoahBarrierSetC2State::iu_barriers_count() const {\n+  return _iu_barriers->length();\n@@ -59,2 +59,2 @@\n-ShenandoahEnqueueBarrierNode* ShenandoahBarrierSetC2State::enqueue_barrier(int idx) const {\n-  return _enqueue_barriers->at(idx);\n+ShenandoahIUBarrierNode* ShenandoahBarrierSetC2State::iu_barrier(int idx) const {\n+  return _iu_barriers->at(idx);\n@@ -63,3 +63,3 @@\n-void ShenandoahBarrierSetC2State::add_enqueue_barrier(ShenandoahEnqueueBarrierNode * n) {\n-  assert(!_enqueue_barriers->contains(n), \"duplicate entry in barrier list\");\n-  _enqueue_barriers->append(n);\n+void ShenandoahBarrierSetC2State::add_iu_barrier(ShenandoahIUBarrierNode* n) {\n+  assert(!_iu_barriers->contains(n), \"duplicate entry in barrier list\");\n+  _iu_barriers->append(n);\n@@ -68,2 +68,2 @@\n-void ShenandoahBarrierSetC2State::remove_enqueue_barrier(ShenandoahEnqueueBarrierNode * n) {\n-  _enqueue_barriers->remove_if_existing(n);\n+void ShenandoahBarrierSetC2State::remove_iu_barrier(ShenandoahIUBarrierNode* n) {\n+  _iu_barriers->remove_if_existing(n);\n@@ -91,3 +91,3 @@\n-Node* ShenandoahBarrierSetC2::shenandoah_storeval_barrier(GraphKit* kit, Node* obj) const {\n-  if (ShenandoahStoreValEnqueueBarrier) {\n-    obj = shenandoah_enqueue_barrier(kit, obj);\n+Node* ShenandoahBarrierSetC2::shenandoah_iu_barrier(GraphKit* kit, Node* obj) const {\n+  if (ShenandoahIUBarrier) {\n+    return kit->gvn().transform(new ShenandoahIUBarrierNode(obj));\n@@ -360,4 +360,0 @@\n-Node* ShenandoahBarrierSetC2::shenandoah_enqueue_barrier(GraphKit* kit, Node* pre_val) const {\n-  return kit->gvn().transform(new ShenandoahEnqueueBarrierNode(pre_val));\n-}\n-\n@@ -520,1 +516,1 @@\n-    value = shenandoah_storeval_barrier(kit, value);\n+    value = shenandoah_iu_barrier(kit, value);\n@@ -530,2 +526,2 @@\n-    if (ShenandoahStoreValEnqueueBarrier) {\n-      Node* enqueue = gvn.transform(new ShenandoahEnqueueBarrierNode(val.node()));\n+    if (ShenandoahIUBarrier) {\n+      Node* enqueue = gvn.transform(new ShenandoahIUBarrierNode(val.node()));\n@@ -609,1 +605,1 @@\n-    new_val = shenandoah_storeval_barrier(kit, new_val);\n+    new_val = shenandoah_iu_barrier(kit, new_val);\n@@ -657,1 +653,1 @@\n-    new_val = shenandoah_storeval_barrier(kit, new_val);\n+    new_val = shenandoah_iu_barrier(kit, new_val);\n@@ -711,1 +707,1 @@\n-    val = shenandoah_storeval_barrier(kit, val);\n+    val = shenandoah_iu_barrier(kit, val);\n@@ -746,1 +742,1 @@\n-  if (c->Opcode() == Op_ShenandoahEnqueueBarrier) {\n+  if (c->Opcode() == Op_ShenandoahIUBarrier) {\n@@ -782,1 +778,1 @@\n-    return !ShenandoahStoreValEnqueueBarrier;\n+    return !ShenandoahIUBarrier;\n@@ -843,1 +839,1 @@\n-    if (ShenandoahStoreValEnqueueBarrier) {\n+    if (ShenandoahIUBarrier) {\n@@ -895,2 +891,2 @@\n-  if (node->Opcode() == Op_ShenandoahEnqueueBarrier) {\n-    state()->add_enqueue_barrier((ShenandoahEnqueueBarrierNode*) node);\n+  if (node->Opcode() == Op_ShenandoahIUBarrier) {\n+    state()->add_iu_barrier((ShenandoahIUBarrierNode*) node);\n@@ -904,2 +900,2 @@\n-  if (node->Opcode() == Op_ShenandoahEnqueueBarrier) {\n-    state()->remove_enqueue_barrier((ShenandoahEnqueueBarrierNode*) node);\n+  if (node->Opcode() == Op_ShenandoahIUBarrier) {\n+    state()->remove_iu_barrier((ShenandoahIUBarrierNode*) node);\n@@ -954,2 +950,2 @@\n-  for (int i = state()->enqueue_barriers_count() - 1; i >= 0; i--) {\n-    ShenandoahEnqueueBarrierNode* n = state()->enqueue_barrier(i);\n+  for (int i = state()->iu_barriers_count() - 1; i >= 0; i--) {\n+    ShenandoahIUBarrierNode* n = state()->iu_barrier(i);\n@@ -957,1 +953,1 @@\n-      state()->remove_enqueue_barrier(n);\n+      state()->remove_iu_barrier(n);\n@@ -1201,1 +1197,1 @@\n-    case Op_ShenandoahEnqueueBarrier:\n+    case Op_ShenandoahIUBarrier:\n@@ -1227,1 +1223,1 @@\n-    case Op_ShenandoahEnqueueBarrier:\n+    case Op_ShenandoahIUBarrier:\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahBarrierSetC2.cpp","additions":32,"deletions":36,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2018, 2021, Red Hat, Inc. All rights reserved.\n@@ -34,1 +34,1 @@\n-  GrowableArray<ShenandoahEnqueueBarrierNode*>* _enqueue_barriers;\n+  GrowableArray<ShenandoahIUBarrierNode*>* _iu_barriers;\n@@ -40,4 +40,4 @@\n-  int enqueue_barriers_count() const;\n-  ShenandoahEnqueueBarrierNode* enqueue_barrier(int idx) const;\n-  void add_enqueue_barrier(ShenandoahEnqueueBarrierNode* n);\n-  void remove_enqueue_barrier(ShenandoahEnqueueBarrierNode * n);\n+  int iu_barriers_count() const;\n+  ShenandoahIUBarrierNode* iu_barrier(int idx) const;\n+  void add_iu_barrier(ShenandoahIUBarrierNode* n);\n+  void remove_iu_barrier(ShenandoahIUBarrierNode * n);\n@@ -76,2 +76,1 @@\n-  Node* shenandoah_enqueue_barrier(GraphKit* kit, Node* val) const;\n-  Node* shenandoah_storeval_barrier(GraphKit* kit, Node* obj) const;\n+  Node* shenandoah_iu_barrier(GraphKit* kit, Node* obj) const;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahBarrierSetC2.hpp","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2015, 2021, Red Hat, Inc. All rights reserved.\n@@ -48,1 +48,1 @@\n-  if ((state->enqueue_barriers_count() +\n+  if ((state->iu_barriers_count() +\n@@ -194,1 +194,1 @@\n-            if (n->Opcode() == Op_ShenandoahEnqueueBarrier) {\n+            if (n->Opcode() == Op_ShenandoahIUBarrier) {\n@@ -204,1 +204,1 @@\n-      } else if (in->Opcode() == Op_ShenandoahEnqueueBarrier) {\n+      } else if (in->Opcode() == Op_ShenandoahIUBarrier) {\n@@ -331,1 +331,1 @@\n-        if (verify && !verify_helper(n->in(MemNode::ValueIn), phis, visited, ShenandoahStoreValEnqueueBarrier ? ShenandoahOopStore : ShenandoahValue, trace, barriers_used)) {\n+        if (verify && !verify_helper(n->in(MemNode::ValueIn), phis, visited, ShenandoahIUBarrier ? ShenandoahOopStore : ShenandoahValue, trace, barriers_used)) {\n@@ -373,1 +373,1 @@\n-          !verify_helper(n->in(MemNode::ValueIn), phis, visited, ShenandoahStoreValEnqueueBarrier ? ShenandoahOopStore : ShenandoahValue, trace, barriers_used)) {\n+          !verify_helper(n->in(MemNode::ValueIn), phis, visited, ShenandoahIUBarrier ? ShenandoahOopStore : ShenandoahValue, trace, barriers_used)) {\n@@ -525,1 +525,1 @@\n-    } else if (n->Opcode() == Op_ShenandoahEnqueueBarrier || n->Opcode() == Op_ShenandoahLoadReferenceBarrier) {\n+    } else if (n->Opcode() == Op_ShenandoahIUBarrier || n->Opcode() == Op_ShenandoahLoadReferenceBarrier) {\n@@ -1113,2 +1113,2 @@\n-  for (int i = 0; i < state->enqueue_barriers_count(); i++) {\n-    Node* barrier = state->enqueue_barrier(i);\n+  for (int i = 0; i < state->iu_barriers_count(); i++) {\n+    Node* barrier = state->iu_barrier(i);\n@@ -1464,2 +1464,2 @@\n-  for (int i = state->enqueue_barriers_count() - 1; i >= 0; i--) {\n-    Node* barrier = state->enqueue_barrier(i);\n+  for (int i = state->iu_barriers_count() - 1; i >= 0; i--) {\n+    Node* barrier = state->iu_barrier(i);\n@@ -1612,1 +1612,1 @@\n-  assert(state->enqueue_barriers_count() == 0, \"all enqueue barrier nodes should have been replaced\");\n+  assert(state->iu_barriers_count() == 0, \"all enqueue barrier nodes should have been replaced\");\n@@ -1666,1 +1666,1 @@\n-    case Op_ShenandoahEnqueueBarrier:\n+    case Op_ShenandoahIUBarrier:\n@@ -1999,2 +1999,2 @@\n-ShenandoahEnqueueBarrierNode::ShenandoahEnqueueBarrierNode(Node* val) : Node(NULL, val) {\n-  ShenandoahBarrierSetC2::bsc2()->state()->add_enqueue_barrier(this);\n+ShenandoahIUBarrierNode::ShenandoahIUBarrierNode(Node* val) : Node(NULL, val) {\n+  ShenandoahBarrierSetC2::bsc2()->state()->add_iu_barrier(this);\n@@ -2003,1 +2003,1 @@\n-const Type* ShenandoahEnqueueBarrierNode::bottom_type() const {\n+const Type* ShenandoahIUBarrierNode::bottom_type() const {\n@@ -2014,1 +2014,1 @@\n-const Type* ShenandoahEnqueueBarrierNode::Value(PhaseGVN* phase) const {\n+const Type* ShenandoahIUBarrierNode::Value(PhaseGVN* phase) const {\n@@ -2028,1 +2028,1 @@\n-int ShenandoahEnqueueBarrierNode::needed(Node* n) {\n+int ShenandoahIUBarrierNode::needed(Node* n) {\n@@ -2031,1 +2031,1 @@\n-      n->Opcode() == Op_ShenandoahEnqueueBarrier ||\n+      n->Opcode() == Op_ShenandoahIUBarrier ||\n@@ -2043,1 +2043,1 @@\n-Node* ShenandoahEnqueueBarrierNode::next(Node* n) {\n+Node* ShenandoahIUBarrierNode::next(Node* n) {\n@@ -2065,1 +2065,1 @@\n-Node* ShenandoahEnqueueBarrierNode::Identity(PhaseGVN* phase) {\n+Node* ShenandoahIUBarrierNode::Identity(PhaseGVN* phase) {\n@@ -3077,1 +3077,1 @@\n-    case Op_ShenandoahEnqueueBarrier:\n+    case Op_ShenandoahIUBarrier:\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahSupport.cpp","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2019, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2015, 2021, Red Hat, Inc. All rights reserved.\n@@ -90,1 +90,1 @@\n-class ShenandoahEnqueueBarrierNode : public Node {\n+class ShenandoahIUBarrierNode : public Node {\n@@ -92,1 +92,1 @@\n-  ShenandoahEnqueueBarrierNode(Node* val);\n+  ShenandoahIUBarrierNode(Node* val);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahSupport.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2020, 2021, Red Hat, Inc. All rights reserved.\n@@ -43,2 +43,2 @@\n-  if (FLAG_IS_DEFAULT(ShenandoahStoreValEnqueueBarrier)) {\n-    FLAG_SET_DEFAULT(ShenandoahStoreValEnqueueBarrier, true);\n+  if (FLAG_IS_DEFAULT(ShenandoahIUBarrier)) {\n+    FLAG_SET_DEFAULT(ShenandoahIUBarrier, true);\n@@ -56,1 +56,1 @@\n-  SHENANDOAH_CHECK_FLAG_SET(ShenandoahStoreValEnqueueBarrier);\n+  SHENANDOAH_CHECK_FLAG_SET(ShenandoahIUBarrier);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahIUMode.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2019, 2021, Red Hat, Inc. All rights reserved.\n@@ -48,1 +48,1 @@\n-  SHENANDOAH_ERGO_DISABLE_FLAG(ShenandoahStoreValEnqueueBarrier);\n+  SHENANDOAH_ERGO_DISABLE_FLAG(ShenandoahIUBarrier);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahPassiveMode.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2019, 2021, Red Hat, Inc. All rights reserved.\n@@ -48,1 +48,1 @@\n-  SHENANDOAH_CHECK_FLAG_UNSET(ShenandoahStoreValEnqueueBarrier);\n+  SHENANDOAH_CHECK_FLAG_UNSET(ShenandoahIUBarrier);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/mode\/shenandoahSATBMode.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2018, 2021, Red Hat, Inc. All rights reserved.\n@@ -51,1 +51,1 @@\n-  FLAG_SET_DEFAULT(ShenandoahStoreValEnqueueBarrier, false);\n+  FLAG_SET_DEFAULT(ShenandoahIUBarrier,              false);\n@@ -137,1 +137,1 @@\n-           !FLAG_IS_DEFAULT(ShenandoahStoreValEnqueueBarrier) ||\n+           !FLAG_IS_DEFAULT(ShenandoahIUBarrier)              ||\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahArguments.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -129,1 +129,1 @@\n-  if (_heap->has_forwarded_objects() || (ShenandoahStoreValEnqueueBarrier && _heap->is_concurrent_mark_in_progress())) {\n+  if (_heap->has_forwarded_objects() || (ShenandoahIUBarrier && _heap->is_concurrent_mark_in_progress())) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2013, 2021, Red Hat, Inc. All rights reserved.\n@@ -96,1 +96,1 @@\n-  inline void storeval_barrier(oop obj);\n+  inline void iu_barrier(oop obj);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2015, 2021, Red Hat, Inc. All rights reserved.\n@@ -169,2 +169,2 @@\n-inline void ShenandoahBarrierSet::storeval_barrier(oop obj) {\n-  if (ShenandoahStoreValEnqueueBarrier && obj != NULL && _heap->is_concurrent_mark_in_progress()) {\n+inline void ShenandoahBarrierSet::iu_barrier(oop obj) {\n+  if (ShenandoahIUBarrier && obj != NULL && _heap->is_concurrent_mark_in_progress()) {\n@@ -231,1 +231,1 @@\n-  bs->storeval_barrier(value);\n+  bs->iu_barrier(value);\n@@ -255,1 +255,1 @@\n-  bs->storeval_barrier(new_value);\n+  bs->iu_barrier(new_value);\n@@ -287,1 +287,1 @@\n-  bs->storeval_barrier(new_value);\n+  bs->iu_barrier(new_value);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSet.inline.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2019, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2013, 2021, Red Hat, Inc. All rights reserved.\n@@ -77,1 +77,1 @@\n-  assert(ShenandoahStoreValEnqueueBarrier, \"only with incremental-update\");\n+  assert(ShenandoahIUBarrier, \"only with incremental-update\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahBarrierSetClone.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -169,1 +169,1 @@\n-                                                        ShenandoahStoreValEnqueueBarrier ? &mark_cl : NULL,\n+                                                        ShenandoahIUBarrier ? &mark_cl : NULL,\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentMark.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2016, 2020, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2016, 2021, Red Hat, Inc. All rights reserved.\n@@ -343,2 +343,2 @@\n-  product(bool, ShenandoahStoreValEnqueueBarrier, false, DIAGNOSTIC,        \\\n-          \"Turn on\/off enqueuing of oops for storeval barriers\")            \\\n+  product(bool, ShenandoahIUBarrier, false, DIAGNOSTIC,                     \\\n+          \"Turn on\/off I-U barriers barriers in Shenandoah\")                \\\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoah_globals.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -296,1 +296,1 @@\n-shmacro(ShenandoahEnqueueBarrier)\n+shmacro(ShenandoahIUBarrier)\n","filename":"src\/hotspot\/share\/opto\/classes.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}