{"files":[{"patch":"@@ -5341,1 +5341,1 @@\n-            checkSerialVersionUID(tree, c);\n+            checkSerialVersionUID(tree, c, env);\n@@ -5374,1 +5374,1 @@\n-        private void checkSerialVersionUID(JCClassDecl tree, ClassSymbol c) {\n+        private void checkSerialVersionUID(JCClassDecl tree, ClassSymbol c, Env<AttrContext> env) {\n@@ -5391,0 +5391,7 @@\n+            \/\/ Check if @SuppressWarnings(\"serial\") is an annotation of serialVersionUID.\n+            \/\/ See JDK-8231622 for more information.\n+            Lint lint = env.info.lint.augment(svuid);\n+            if (lint.isSuppressed(LintCategory.SERIAL)) {\n+                return;\n+            }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,129 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8231622\n+ * @summary SuppressWarning(\"serial\") ignored on field serialVersionUID\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ * @build toolbox.ToolBox toolbox.JavacTask\n+ * @run main T8231622\n+ *\/\n+\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Arrays;\n+\n+import toolbox.ToolBox;\n+import toolbox.TestRunner;\n+import toolbox.JavacTask;\n+import toolbox.Task;\n+\n+public class T8231622 extends TestRunner {\n+    ToolBox tb;\n+\n+    T8231622() {\n+        super(System.err);\n+        tb = new ToolBox();\n+    }\n+\n+    public static void main(String[] main) throws Exception {\n+        T8231622 t = new T8231622();\n+        t.runTests();\n+    }\n+\n+    @Test\n+    public void testSerialWarning() throws Exception {\n+        String code = \"\"\"\n+                import java.io.Serializable;\n+                class T8231622_1 implements Serializable {\n+                    public static final int serialVersionUID = 1;\n+                }\"\"\";\n+\n+        List<String> output = new JavacTask(tb)\n+                .sources(code)\n+                .classpath(\".\")\n+                .options(\"-XDrawDiagnostics\", \"-Xlint:serial\")\n+                .run()\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        List<String> expected = Arrays.asList(\n+                \"T8231622_1.java:3:29: compiler.warn.long.SVUID: T8231622_1\",\n+                \"1 warning\");\n+\n+        if (!Objects.equals(output, expected)) {\n+            throw new AssertionError(\"incorrect output\\nactual=\" + output + \"\\nexpected=\" + expected);\n+        }\n+    }\n+\n+    @Test\n+    public void testSuppressSerialWarningInClass() throws Exception {\n+        String code = \"\"\"\n+                import java.io.Serializable;\n+                @SuppressWarnings(\"serial\")\n+                class T8231622_2 implements Serializable {\n+                    public static final int serialVersionUID = 1;\n+                }\"\"\";\n+\n+        String output = new JavacTask(tb)\n+                .sources(code)\n+                .classpath(\".\")\n+                .options(\"-XDrawDiagnostics\", \"-Xlint:serial\")\n+                .run()\n+                .writeAll()\n+                .getOutput(Task.OutputKind.DIRECT);\n+\n+        String expected = \"\";\n+\n+        if (!Objects.equals(output, expected)) {\n+            throw new AssertionError(\"incorrect output\\nactual=\" + output + \"\\nexpected=\" + expected);\n+        }\n+    }\n+\n+    @Test\n+    public void testSuppressSerialWarningInItsField() throws Exception {\n+        String code = \"\"\"\n+                import java.io.Serializable;\n+                class T8231622_3 implements Serializable {\n+                    @SuppressWarnings(\"serial\")\n+                    public static final int serialVersionUID = 1;\n+                }\"\"\";\n+\n+        String output = new JavacTask(tb)\n+                .sources(code)\n+                .classpath(\".\")\n+                .options(\"-XDrawDiagnostics\", \"-Xlint:serial\")\n+                .run()\n+                .writeAll()\n+                .getOutput(Task.OutputKind.DIRECT);\n+\n+        String expected = \"\";\n+\n+        if (!Objects.equals(output, expected)) {\n+            throw new AssertionError(\"incorrect output\\nactual=\" + output + \"\\nexpected=\" + expected);\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/T8231622\/T8231622.java","additions":129,"deletions":0,"binary":false,"changes":129,"status":"added"}]}