{"files":[{"patch":"@@ -1493,20 +1493,15 @@\n-            case \"gregory\":\n-                cal = new GregorianCalendar(zone, locale, true);\n-                break;\n-            case \"iso8601\":\n-                GregorianCalendar gcal = new GregorianCalendar(zone, locale, true);\n-                \/\/ make gcal a proleptic Gregorian\n-                gcal.setGregorianChange(new Date(Long.MIN_VALUE));\n-                \/\/ and week definition to be compatible with ISO 8601\n-                setWeekDefinition(MONDAY, 4);\n-                cal = gcal;\n-                break;\n-            case \"buddhist\":\n-                cal = new BuddhistCalendar(zone, locale);\n-                cal.clear();\n-                break;\n-            case \"japanese\":\n-                cal = new JapaneseImperialCalendar(zone, locale, true);\n-                break;\n-            default:\n-                throw new IllegalArgumentException(\"unknown calendar type: \" + type);\n+                case \"gregory\" -> cal = new GregorianCalendar(zone, locale, true);\n+                case \"iso8601\" -> {\n+                    GregorianCalendar gcal = new GregorianCalendar(zone, locale, true);\n+                    \/\/ make gcal a proleptic Gregorian\n+                    gcal.setGregorianChange(new Date(Long.MIN_VALUE));\n+                    \/\/ and week definition to be compatible with ISO 8601\n+                    setWeekDefinition(MONDAY, 4);\n+                    cal = gcal;\n+                }\n+                case \"buddhist\" -> {\n+                    cal = new BuddhistCalendar(zone, locale);\n+                    cal.clear();\n+                }\n+                case \"japanese\" -> cal = new JapaneseImperialCalendar(zone, locale, true);\n+                default -> throw new IllegalArgumentException(\"unknown calendar type: \" + type);\n@@ -1708,11 +1703,6 @@\n-                switch (caltype) {\n-                case \"buddhist\":\n-                cal = new BuddhistCalendar(zone, aLocale);\n-                    break;\n-                case \"japanese\":\n-                    cal = new JapaneseImperialCalendar(zone, aLocale);\n-                    break;\n-                case \"gregory\":\n-                    cal = new GregorianCalendar(zone, aLocale);\n-                    break;\n-                }\n+                cal = switch (caltype) {\n+                    case \"buddhist\" -> new BuddhistCalendar(zone, aLocale);\n+                    case \"japanese\" -> new JapaneseImperialCalendar(zone, aLocale);\n+                    case \"gregory\" -> new GregorianCalendar(zone, aLocale);\n+                    default -> null;\n+                };\n@@ -2270,19 +2260,7 @@\n-        String[] strings = null;\n-        switch (field) {\n-        case ERA:\n-            strings = symbols.getEras();\n-            break;\n-\n-        case MONTH:\n-            strings = (baseStyle == LONG) ? symbols.getMonths() : symbols.getShortMonths();\n-            break;\n-\n-        case DAY_OF_WEEK:\n-            strings = (baseStyle == LONG) ? symbols.getWeekdays() : symbols.getShortWeekdays();\n-            break;\n-\n-        case AM_PM:\n-            strings = symbols.getAmPmStrings();\n-            break;\n-        }\n-        return strings;\n+        return switch (field) {\n+            case ERA -> symbols.getEras();\n+            case MONTH -> (baseStyle == LONG) ? symbols.getMonths() : symbols.getShortMonths();\n+            case DAY_OF_WEEK -> (baseStyle == LONG) ? symbols.getWeekdays() : symbols.getShortWeekdays();\n+            case AM_PM -> symbols.getAmPmStrings();\n+            default -> null;\n+        };\n","filename":"src\/java.base\/share\/classes\/java\/util\/Calendar.java","additions":28,"deletions":50,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -2677,21 +2677,20 @@\n-                case -2:  \/\/ fixed string, \"%n\", or \"%%\"\n-                    fs.print(null, l);\n-                    break;\n-                case -1:  \/\/ relative index\n-                    if (last < 0 || (args != null && last > args.length - 1))\n-                        throw new MissingFormatArgumentException(fs.toString());\n-                    fs.print((args == null ? null : args[last]), l);\n-                    break;\n-                case 0:  \/\/ ordinary index\n-                    lasto++;\n-                    last = lasto;\n-                    if (args != null && lasto > args.length - 1)\n-                        throw new MissingFormatArgumentException(fs.toString());\n-                    fs.print((args == null ? null : args[lasto]), l);\n-                    break;\n-                default:  \/\/ explicit index\n-                    last = index - 1;\n-                    if (args != null && last > args.length - 1)\n-                        throw new MissingFormatArgumentException(fs.toString());\n-                    fs.print((args == null ? null : args[last]), l);\n-                    break;\n+                    case -2 ->  \/\/ fixed string, \"%n\", or \"%%\"\n+                        fs.print(null, l);\n+                    case -1 -> {  \/\/ relative index\n+                        if (last < 0 || (args != null && last > args.length - 1))\n+                            throw new MissingFormatArgumentException(fs.toString());\n+                        fs.print((args == null ? null : args[last]), l);\n+                    }\n+                    case 0 -> {  \/\/ ordinary index\n+                        lasto++;\n+                        last = lasto;\n+                        if (args != null && lasto > args.length - 1)\n+                            throw new MissingFormatArgumentException(fs.toString());\n+                        fs.print((args == null ? null : args[lasto]), l);\n+                    }\n+                    default -> {  \/\/ explicit index\n+                        last = index - 1;\n+                        if (args != null && last > args.length - 1)\n+                            throw new MissingFormatArgumentException(fs.toString());\n+                        fs.print((args == null ? null : args[last]), l);\n+                    }\n@@ -4114,9 +4113,3 @@\n-                case DateTime.CENTURY:\n-                    i \/= 100;\n-                    break;\n-                case DateTime.YEAR_2:\n-                    i %= 100;\n-                    break;\n-                case DateTime.YEAR_4:\n-                    size = 4;\n-                    break;\n+                    case DateTime.CENTURY -> i \/= 100;\n+                    case DateTime.YEAR_2 -> i %= 100;\n+                    case DateTime.YEAR_4 -> size = 4;\n@@ -4355,9 +4348,3 @@\n-                    case DateTime.CENTURY:\n-                        i \/= 100;\n-                        break;\n-                    case DateTime.YEAR_2:\n-                        i %= 100;\n-                        break;\n-                    case DateTime.YEAR_4:\n-                        size = 4;\n-                        break;\n+                        case DateTime.CENTURY -> i \/= 100;\n+                        case DateTime.YEAR_2 -> i %= 100;\n+                        case DateTime.YEAR_4 -> size = 4;\n@@ -4839,40 +4826,10 @@\n-            switch (c) {\n-            case HOUR_OF_DAY_0:\n-            case HOUR_0:\n-            case HOUR_OF_DAY:\n-            case HOUR:\n-            case MINUTE:\n-            case NANOSECOND:\n-            case MILLISECOND:\n-            case MILLISECOND_SINCE_EPOCH:\n-            case AM_PM:\n-            case SECONDS_SINCE_EPOCH:\n-            case SECOND:\n-            case TIME:\n-            case ZONE_NUMERIC:\n-            case ZONE:\n-\n-            \/\/ Date\n-            case NAME_OF_DAY_ABBREV:\n-            case NAME_OF_DAY:\n-            case NAME_OF_MONTH_ABBREV:\n-            case NAME_OF_MONTH:\n-            case CENTURY:\n-            case DAY_OF_MONTH_0:\n-            case DAY_OF_MONTH:\n-            case NAME_OF_MONTH_ABBREV_X:\n-            case DAY_OF_YEAR:\n-            case MONTH:\n-            case YEAR_2:\n-            case YEAR_4:\n-\n-            \/\/ Composites\n-            case TIME_12_HOUR:\n-            case TIME_24_HOUR:\n-            case DATE_TIME:\n-            case DATE:\n-            case ISO_STANDARD_DATE:\n-                return true;\n-            default:\n-                return false;\n-            }\n+            return switch (c) {\n+                case HOUR_OF_DAY_0, HOUR_0, HOUR_OF_DAY, HOUR, MINUTE, NANOSECOND, MILLISECOND, MILLISECOND_SINCE_EPOCH,\n+                     AM_PM, SECONDS_SINCE_EPOCH, SECOND, TIME, ZONE_NUMERIC, ZONE -> true;\n+                \/\/ Date\n+                case NAME_OF_DAY_ABBREV, NAME_OF_DAY, NAME_OF_MONTH_ABBREV, NAME_OF_MONTH, CENTURY, DAY_OF_MONTH_0,\n+                     DAY_OF_MONTH, NAME_OF_MONTH_ABBREV_X, DAY_OF_YEAR, MONTH, YEAR_2, YEAR_4 -> true;\n+                \/\/ Composites\n+                case TIME_12_HOUR, TIME_24_HOUR, DATE_TIME, DATE, ISO_STANDARD_DATE -> true;\n+                default -> false;\n+            };\n","filename":"src\/java.base\/share\/classes\/java\/util\/Formatter.java","additions":36,"deletions":79,"binary":false,"changes":115,"status":"modified"},{"patch":"@@ -1558,8 +1558,1 @@\n-        case MONTH:\n-        case DAY_OF_MONTH:\n-        case DAY_OF_YEAR:\n-        case WEEK_OF_YEAR:\n-        case WEEK_OF_MONTH:\n-        case DAY_OF_WEEK_IN_MONTH:\n-        case YEAR:\n-            {\n+            case MONTH, DAY_OF_MONTH, DAY_OF_YEAR, WEEK_OF_YEAR, WEEK_OF_MONTH, DAY_OF_WEEK_IN_MONTH, YEAR -> {\n@@ -1577,1 +1570,1 @@\n-                gc.setTimeInMillis(gregorianCutover-1);\n+                gc.setTimeInMillis(gregorianCutover - 1);\n@@ -1637,8 +1630,1 @@\n-        case MONTH:\n-        case DAY_OF_MONTH:\n-        case DAY_OF_YEAR:\n-        case WEEK_OF_YEAR:\n-        case WEEK_OF_MONTH:\n-        case DAY_OF_WEEK_IN_MONTH:\n-        case YEAR:\n-            {\n+            case MONTH, DAY_OF_MONTH, DAY_OF_YEAR, WEEK_OF_YEAR, WEEK_OF_MONTH, DAY_OF_WEEK_IN_MONTH, YEAR -> {\n@@ -1649,1 +1635,1 @@\n-                gc.setTimeInMillis(gregorianCutover-1);\n+                gc.setTimeInMillis(gregorianCutover - 1);\n@@ -1744,2 +1730,1 @@\n-        case MONTH:\n-            {\n+            case MONTH -> {\n@@ -1760,4 +1745,1 @@\n-            break;\n-\n-        case DAY_OF_MONTH:\n-            {\n+            case DAY_OF_MONTH -> {\n@@ -1780,4 +1762,1 @@\n-            break;\n-\n-        case DAY_OF_YEAR:\n-            {\n+            case DAY_OF_YEAR -> {\n@@ -1810,4 +1789,1 @@\n-            break;\n-\n-        case WEEK_OF_YEAR:\n-            {\n+            case WEEK_OF_YEAR -> {\n@@ -1844,4 +1820,1 @@\n-            break;\n-\n-        case WEEK_OF_MONTH:\n-            {\n+            case WEEK_OF_MONTH -> {\n@@ -1883,4 +1856,1 @@\n-            break;\n-\n-        case DAY_OF_WEEK_IN_MONTH:\n-            {\n+            case DAY_OF_WEEK_IN_MONTH -> {\n@@ -1912,23 +1882,20 @@\n-            break;\n-\n-        case YEAR:\n-            \/* The year computation is no different, in principle, from the\n-             * others, however, the range of possible maxima is large.  In\n-             * addition, the way we know we've exceeded the range is different.\n-             * For these reasons, we use the special case code below to handle\n-             * this field.\n-             *\n-             * The actual maxima for YEAR depend on the type of calendar:\n-             *\n-             *     Gregorian = May 17, 292275056 BCE - Aug 17, 292278994 CE\n-             *     Julian    = Dec  2, 292269055 BCE - Jan  3, 292272993 CE\n-             *     Hybrid    = Dec  2, 292269055 BCE - Aug 17, 292278994 CE\n-             *\n-             * We know we've exceeded the maximum when either the month, date,\n-             * time, or era changes in response to setting the year.  We don't\n-             * check for month, date, and time here because the year and era are\n-             * sufficient to detect an invalid year setting.  NOTE: If code is\n-             * added to check the month and date in the future for some reason,\n-             * Feb 29 must be allowed to shift to Mar 1 when setting the year.\n-             *\/\n-            {\n+            case YEAR -> {\n+                \/* The year computation is no different, in principle, from the\n+                 * others, however, the range of possible maxima is large.  In\n+                 * addition, the way we know we've exceeded the range is different.\n+                 * For these reasons, we use the special case code below to handle\n+                 * this field.\n+                 *\n+                 * The actual maxima for YEAR depend on the type of calendar:\n+                 *\n+                 *     Gregorian = May 17, 292275056 BCE - Aug 17, 292278994 CE\n+                 *     Julian    = Dec  2, 292269055 BCE - Jan  3, 292272993 CE\n+                 *     Hybrid    = Dec  2, 292269055 BCE - Aug 17, 292278994 CE\n+                 *\n+                 * We know we've exceeded the maximum when either the month, date,\n+                 * time, or era changes in response to setting the year.  We don't\n+                 * check for month, date, and time here because the year and era are\n+                 * sufficient to detect an invalid year setting.  NOTE: If code is\n+                 * added to check the month and date in the future for some reason,\n+                 * Feb 29 must be allowed to shift to Mar 1 when setting the year.\n+                 *\/\n@@ -1973,4 +1940,1 @@\n-            break;\n-\n-        default:\n-            throw new ArrayIndexOutOfBoundsException(field);\n+            default -> throw new ArrayIndexOutOfBoundsException(field);\n","filename":"src\/java.base\/share\/classes\/java\/util\/GregorianCalendar.java","additions":31,"deletions":67,"binary":false,"changes":98,"status":"modified"},{"patch":"@@ -1119,2 +1119,1 @@\n-        case YEAR:\n-            {\n+            case YEAR -> {\n@@ -1122,2 +1121,1 @@\n-                LocalGregorianCalendar.Date d = jcal.getCalendarDate(Long.MAX_VALUE,\n-                                                                     getZone());\n+                LocalGregorianCalendar.Date d = jcal.getCalendarDate(Long.MAX_VALUE, getZone());\n@@ -1172,2 +1170,1 @@\n-        case YEAR:\n-            {\n+            case YEAR -> {\n@@ -1210,2 +1207,1 @@\n-        case YEAR:\n-            {\n+            case YEAR -> {\n@@ -1242,4 +1238,1 @@\n-            break;\n-\n-        case MONTH:\n-            {\n+            case MONTH -> {\n@@ -1256,4 +1249,1 @@\n-            break;\n-\n-        case WEEK_OF_YEAR:\n-            {\n+            case WEEK_OF_YEAR -> {\n@@ -1279,1 +1269,0 @@\n-            break;\n@@ -1320,2 +1309,1 @@\n-        case MONTH:\n-            {\n+            case MONTH -> {\n@@ -1339,2 +1327,1 @@\n-                    LocalGregorianCalendar.Date d = jcal.getCalendarDate(Long.MAX_VALUE,\n-                                                                         getZone());\n+                    LocalGregorianCalendar.Date d = jcal.getCalendarDate(Long.MAX_VALUE, getZone());\n@@ -1346,8 +1333,2 @@\n-            break;\n-\n-        case DAY_OF_MONTH:\n-            value = jcal.getMonthLength(date);\n-            break;\n-\n-        case DAY_OF_YEAR:\n-            {\n+            case DAY_OF_MONTH -> value = jcal.getMonthLength(date);\n+            case DAY_OF_YEAR -> {\n@@ -1367,1 +1348,1 @@\n-                        value = (int)(transition - gcal.getFixedDate(d));\n+                        value = (int) (transition - gcal.getFixedDate(d));\n@@ -1370,1 +1351,1 @@\n-                        value = (int)(gcal.getFixedDate(d) - transition);\n+                        value = (int) (gcal.getFixedDate(d) - transition);\n@@ -1373,2 +1354,1 @@\n-                    LocalGregorianCalendar.Date d = jcal.getCalendarDate(Long.MAX_VALUE,\n-                                                                         getZone());\n+                    LocalGregorianCalendar.Date d = jcal.getCalendarDate(Long.MAX_VALUE, getZone());\n@@ -1378,1 +1358,1 @@\n-                        value = (int)(fd - jan1) + 1;\n+                        value = (int) (fd - jan1) + 1;\n@@ -1386,1 +1366,1 @@\n-                        value = (int)(fd2 - fd1);\n+                        value = (int) (fd2 - fd1);\n@@ -1392,4 +1372,1 @@\n-            break;\n-\n-        case WEEK_OF_YEAR:\n-            {\n+            case WEEK_OF_YEAR -> {\n@@ -1397,2 +1374,1 @@\n-                    LocalGregorianCalendar.Date jd = jcal.getCalendarDate(Long.MAX_VALUE,\n-                                                                          getZone());\n+                    LocalGregorianCalendar.Date jd = jcal.getCalendarDate(Long.MAX_VALUE, getZone());\n@@ -1415,1 +1391,1 @@\n-                        int ndays = (int)(nextJan1st - nextJan1);\n+                        int ndays = (int) (nextJan1st - nextJan1);\n@@ -1451,6 +1427,2 @@\n-            break;\n-\n-        case WEEK_OF_MONTH:\n-            {\n-                LocalGregorianCalendar.Date jd = jcal.getCalendarDate(Long.MAX_VALUE,\n-                                                                      getZone());\n+            case WEEK_OF_MONTH -> {\n+                LocalGregorianCalendar.Date jd = jcal.getCalendarDate(Long.MAX_VALUE, getZone());\n@@ -1484,4 +1456,1 @@\n-            break;\n-\n-        case DAY_OF_WEEK_IN_MONTH:\n-            {\n+            case DAY_OF_WEEK_IN_MONTH -> {\n@@ -1502,4 +1471,1 @@\n-            break;\n-\n-        case YEAR:\n-            {\n+            case YEAR -> {\n@@ -1518,2 +1484,1 @@\n-                    d = jcal.getCalendarDate(eras[eraIndex + 1].getSince(getZone()) - 1,\n-                                             getZone());\n+                    d = jcal.getCalendarDate(eras[eraIndex + 1].getSince(getZone()) - 1, getZone());\n@@ -1530,4 +1495,1 @@\n-            break;\n-\n-        default:\n-            throw new ArrayIndexOutOfBoundsException(field);\n+            default -> throw new ArrayIndexOutOfBoundsException(field);\n","filename":"src\/java.base\/share\/classes\/java\/util\/JapaneseImperialCalendar.java","additions":24,"deletions":62,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -2266,17 +2266,14 @@\n-        switch (stringList.length) {\n-            case 0:\n-                return \"\";\n-            case 1:\n-                return stringList[0];\n-            default:\n-                return Arrays.stream(stringList).reduce(\"\",\n-                    (s1, s2) -> {\n-                        if (s1.isEmpty()) {\n-                            return s2;\n-                        }\n-                        if (s2.isEmpty()) {\n-                            return s1;\n-                        }\n-                        return MessageFormat.format(pattern, s1, s2);\n-                    });\n-        }\n+        return switch (stringList.length) {\n+            case 0 -> \"\";\n+            case 1 -> stringList[0];\n+            default -> Arrays.stream(stringList).reduce(\"\",\n+                (s1, s2) -> {\n+                    if (s1.isEmpty()) {\n+                        return s2;\n+                    }\n+                    if (s2.isEmpty()) {\n+                        return s1;\n+                    }\n+                    return MessageFormat.format(pattern, s1, s2);\n+                });\n+        };\n","filename":"src\/java.base\/share\/classes\/java\/util\/Locale.java","additions":14,"deletions":17,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -658,17 +658,6 @@\n-                        switch (aChar) {\n-                          case '0': case '1': case '2': case '3': case '4':\n-                          case '5': case '6': case '7': case '8': case '9':\n-                             value = (value << 4) + aChar - '0';\n-                             break;\n-                          case 'a': case 'b': case 'c':\n-                          case 'd': case 'e': case 'f':\n-                             value = (value << 4) + 10 + aChar - 'a';\n-                             break;\n-                          case 'A': case 'B': case 'C':\n-                          case 'D': case 'E': case 'F':\n-                             value = (value << 4) + 10 + aChar - 'A';\n-                             break;\n-                          default:\n-                              throw new IllegalArgumentException(\n-                                           \"Malformed \\\\uxxxx encoding.\");\n-                        }\n+                        value = switch (aChar) {\n+                            case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' -> (value << 4) + aChar - '0';\n+                            case 'a', 'b', 'c', 'd', 'e', 'f' -> (value << 4) + 10 + aChar - 'a';\n+                            case 'A', 'B', 'C', 'D', 'E', 'F' -> (value << 4) + 10 + aChar - 'A';\n+                            default -> throw new IllegalArgumentException(\"Malformed \\\\uxxxx encoding.\");\n+                        };\n","filename":"src\/java.base\/share\/classes\/java\/util\/Properties.java","additions":6,"deletions":17,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -337,10 +337,6 @@\n-        switch (mask & (READ|WRITE)) {\n-            case READ:\n-                return SecurityConstants.PROPERTY_READ_ACTION;\n-            case WRITE:\n-                return SecurityConstants.PROPERTY_WRITE_ACTION;\n-            case READ|WRITE:\n-                return SecurityConstants.PROPERTY_RW_ACTION;\n-            default:\n-                return \"\";\n-        }\n+        return switch (mask & (READ | WRITE)) {\n+            case READ -> SecurityConstants.PROPERTY_READ_ACTION;\n+            case WRITE -> SecurityConstants.PROPERTY_WRITE_ACTION;\n+            case READ | WRITE -> SecurityConstants.PROPERTY_RW_ACTION;\n+            default -> \"\";\n+        };\n","filename":"src\/java.base\/share\/classes\/java\/util\/PropertyPermission.java","additions":6,"deletions":10,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1830,13 +1830,7 @@\n-                    switch (format) {\n-                    case \"java.class\":\n-                        bundle = ResourceBundleProviderHelper\n-                            .loadResourceBundle(callerModule, module, baseName, targetLocale);\n-\n-                        break;\n-                    case \"java.properties\":\n-                        bundle = ResourceBundleProviderHelper\n-                            .loadPropertyResourceBundle(callerModule, module, baseName, targetLocale);\n-                        break;\n-                    default:\n-                        throw new InternalError(\"unexpected format: \" + format);\n-                    }\n+                    bundle = switch (format) {\n+                      case \"java.class\" -> ResourceBundleProviderHelper\n+                          .loadResourceBundle(callerModule, module, baseName, targetLocale);\n+                      case \"java.properties\" -> ResourceBundleProviderHelper\n+                          .loadPropertyResourceBundle(callerModule, module, baseName, targetLocale);\n+                      default -> throw new InternalError(\"unexpected format: \" + format);\n+                    };\n@@ -2917,9 +2911,2 @@\n-                        case \"TW\":\n-                        case \"HK\":\n-                        case \"MO\":\n-                            script = \"Hant\";\n-                            break;\n-                        case \"CN\":\n-                        case \"SG\":\n-                            script = \"Hans\";\n-                            break;\n+                            case \"TW\", \"HK\", \"MO\" -> script = \"Hant\";\n+                            case \"CN\", \"SG\" -> script = \"Hans\";\n@@ -2963,6 +2950,2 @@\n-                                case \"Hans\":\n-                                    region = \"CN\";\n-                                    break;\n-                                case \"Hant\":\n-                                    region = \"TW\";\n-                                    break;\n+                                case \"Hans\" -> region = \"CN\";\n+                                case \"Hant\" -> region = \"TW\";\n","filename":"src\/java.base\/share\/classes\/java\/util\/ResourceBundle.java","additions":11,"deletions":28,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -741,8 +741,15 @@\n-        case DOM_MODE:\n-            cdate.setDayOfMonth(dayOfMonth);\n-            break;\n-\n-        case DOW_IN_MONTH_MODE:\n-            cdate.setDayOfMonth(1);\n-            if (dayOfMonth < 0) {\n-                cdate.setDayOfMonth(cal.getMonthLength(cdate));\n+            case DOM_MODE -> cdate.setDayOfMonth(dayOfMonth);\n+            case DOW_IN_MONTH_MODE -> {\n+                cdate.setDayOfMonth(1);\n+                if (dayOfMonth < 0) {\n+                    cdate.setDayOfMonth(cal.getMonthLength(cdate));\n+                }\n+                cdate = (BaseCalendar.Date) cal.getNthDayOfWeek(dayOfMonth, dayOfWeek, cdate);\n+            }\n+            case DOW_GE_DOM_MODE -> {\n+                cdate.setDayOfMonth(dayOfMonth);\n+                cdate = (BaseCalendar.Date) cal.getNthDayOfWeek(1, dayOfWeek, cdate);\n+            }\n+            case DOW_LE_DOM_MODE -> {\n+                cdate.setDayOfMonth(dayOfMonth);\n+                cdate = (BaseCalendar.Date) cal.getNthDayOfWeek(-1, dayOfWeek, cdate);\n@@ -750,12 +757,0 @@\n-            cdate = (BaseCalendar.Date) cal.getNthDayOfWeek(dayOfMonth, dayOfWeek, cdate);\n-            break;\n-\n-        case DOW_GE_DOM_MODE:\n-            cdate.setDayOfMonth(dayOfMonth);\n-            cdate = (BaseCalendar.Date) cal.getNthDayOfWeek(1, dayOfWeek, cdate);\n-            break;\n-\n-        case DOW_LE_DOM_MODE:\n-            cdate.setDayOfMonth(dayOfMonth);\n-            cdate = (BaseCalendar.Date) cal.getNthDayOfWeek(-1, dayOfWeek, cdate);\n-            break;\n@@ -1537,3 +1532,1 @@\n-        case UTC_TIME:\n-            startTime += rawOffset;\n-            break;\n+            case UTC_TIME -> startTime += rawOffset;\n@@ -1551,5 +1544,2 @@\n-        case UTC_TIME:\n-            endTime += rawOffset + dstSavings;\n-            break;\n-        case STANDARD_TIME:\n-            endTime += dstSavings;\n+            case UTC_TIME -> endTime += rawOffset + dstSavings;\n+            case STANDARD_TIME -> endTime += dstSavings;\n","filename":"src\/java.base\/share\/classes\/java\/util\/SimpleTimeZone.java","additions":18,"deletions":28,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -496,19 +496,11 @@\n-        final String status;\n-        switch (state) {\n-        case NORMAL:\n-            status = \"[Completed normally]\";\n-            break;\n-        case EXCEPTIONAL:\n-            status = \"[Completed exceptionally: \" + outcome + \"]\";\n-            break;\n-        case CANCELLED:\n-        case INTERRUPTING:\n-        case INTERRUPTED:\n-            status = \"[Cancelled]\";\n-            break;\n-        default:\n-            final Callable<?> callable = this.callable;\n-            status = (callable == null)\n-                ? \"[Not completed]\"\n-                : \"[Not completed, task = \" + callable + \"]\";\n-        }\n+        final String status = switch (state) {\n+            case NORMAL -> \"[Completed normally]\";\n+            case EXCEPTIONAL -> \"[Completed exceptionally: \" + outcome + \"]\";\n+            case CANCELLED, INTERRUPTING, INTERRUPTED -> \"[Cancelled]\";\n+            default -> {\n+                final Callable<?> callable = this.callable;\n+                yield (callable == null)\n+                    ? \"[Not completed]\"\n+                    : \"[Not completed, task = \" + callable + \"]\";\n+            }\n+        };\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/FutureTask.java","additions":11,"deletions":19,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -186,7 +186,7 @@\n-        switch (this) {\n-        case NANOSECONDS:  return sourceUnit.toNanos(sourceDuration);\n-        case MICROSECONDS: return sourceUnit.toMicros(sourceDuration);\n-        case MILLISECONDS: return sourceUnit.toMillis(sourceDuration);\n-        case SECONDS:      return sourceUnit.toSeconds(sourceDuration);\n-        default: return cvt(sourceDuration, scale, sourceUnit.scale);\n-        }\n+        return switch (this) {\n+            case NANOSECONDS -> sourceUnit.toNanos(sourceDuration);\n+            case MICROSECONDS -> sourceUnit.toMicros(sourceDuration);\n+            case MILLISECONDS -> sourceUnit.toMillis(sourceDuration);\n+            case SECONDS -> sourceUnit.toSeconds(sourceDuration);\n+            default -> cvt(sourceDuration, scale, sourceUnit.scale);\n+        };\n@@ -457,10 +457,9 @@\n-        switch (this) {\n-        case NANOSECONDS:  return ChronoUnit.NANOS;\n-        case MICROSECONDS: return ChronoUnit.MICROS;\n-        case MILLISECONDS: return ChronoUnit.MILLIS;\n-        case SECONDS:      return ChronoUnit.SECONDS;\n-        case MINUTES:      return ChronoUnit.MINUTES;\n-        case HOURS:        return ChronoUnit.HOURS;\n-        case DAYS:         return ChronoUnit.DAYS;\n-        default: throw new AssertionError();\n-        }\n+        return switch (this) {\n+            case NANOSECONDS -> ChronoUnit.NANOS;\n+            case MICROSECONDS -> ChronoUnit.MICROS;\n+            case MILLISECONDS -> ChronoUnit.MILLIS;\n+            case SECONDS -> ChronoUnit.SECONDS;\n+            case MINUTES -> ChronoUnit.MINUTES;\n+            case HOURS -> ChronoUnit.HOURS;\n+            case DAYS -> ChronoUnit.DAYS;\n+        };\n@@ -480,12 +479,10 @@\n-        switch (Objects.requireNonNull(chronoUnit, \"chronoUnit\")) {\n-        case NANOS:   return TimeUnit.NANOSECONDS;\n-        case MICROS:  return TimeUnit.MICROSECONDS;\n-        case MILLIS:  return TimeUnit.MILLISECONDS;\n-        case SECONDS: return TimeUnit.SECONDS;\n-        case MINUTES: return TimeUnit.MINUTES;\n-        case HOURS:   return TimeUnit.HOURS;\n-        case DAYS:    return TimeUnit.DAYS;\n-        default:\n-            throw new IllegalArgumentException(\n-                \"No TimeUnit equivalent for \" + chronoUnit);\n-        }\n+        return switch (Objects.requireNonNull(chronoUnit, \"chronoUnit\")) {\n+            case NANOS -> TimeUnit.NANOSECONDS;\n+            case MICROS -> TimeUnit.MICROSECONDS;\n+            case MILLIS -> TimeUnit.MILLISECONDS;\n+            case SECONDS -> TimeUnit.SECONDS;\n+            case MINUTES -> TimeUnit.MINUTES;\n+            case HOURS -> TimeUnit.HOURS;\n+            case DAYS -> TimeUnit.DAYS;\n+            default -> throw new IllegalArgumentException(\"No TimeUnit equivalent for \" + chronoUnit);\n+        };\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/TimeUnit.java","additions":26,"deletions":29,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -193,6 +193,1 @@\n-            case \"true\":\n-            default:\n-                MULTI_RELEASE_ENABLED = true;\n-                MULTI_RELEASE_FORCED = false;\n-                break;\n-            case \"false\":\n+            case \"false\" -> {\n@@ -201,2 +196,2 @@\n-                break;\n-            case \"force\":\n+            }\n+            case \"force\" -> {\n@@ -205,1 +200,5 @@\n-                break;\n+            }\n+            default -> {\n+                MULTI_RELEASE_ENABLED = true;\n+                MULTI_RELEASE_FORCED = false;\n+            }\n","filename":"src\/java.base\/share\/classes\/java\/util\/jar\/JarFile.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -173,3 +173,3 @@\n-        switch (name) {\n-            case \"ALPHA\": return ALPHABETIC();\n-            case \"LOWER\": return caseIns\n+        return switch (name) {\n+            case \"ALPHA\" -> ALPHABETIC();\n+            case \"LOWER\" -> caseIns\n@@ -178,1 +178,1 @@\n-            case \"UPPER\": return caseIns\n+            case \"UPPER\" -> caseIns\n@@ -181,11 +181,11 @@\n-            case \"SPACE\": return WHITE_SPACE();\n-            case \"PUNCT\": return PUNCTUATION();\n-            case \"XDIGIT\": return HEX_DIGIT();\n-            case \"ALNUM\": return ALNUM();\n-            case \"CNTRL\": return CONTROL();\n-            case \"DIGIT\": return DIGIT();\n-            case \"BLANK\": return BLANK();\n-            case \"GRAPH\": return GRAPH();\n-            case \"PRINT\": return PRINT();\n-            default: return null;\n-        }\n+            case \"SPACE\" -> WHITE_SPACE();\n+            case \"PUNCT\" -> PUNCTUATION();\n+            case \"XDIGIT\" -> HEX_DIGIT();\n+            case \"ALNUM\" -> ALNUM();\n+            case \"CNTRL\" -> CONTROL();\n+            case \"DIGIT\" -> DIGIT();\n+            case \"BLANK\" -> BLANK();\n+            case \"GRAPH\" -> GRAPH();\n+            case \"PRINT\" -> PRINT();\n+            default -> null;\n+        };\n@@ -195,11 +195,9 @@\n-        switch (name) {\n-            case \"ALPHABETIC\": return ALPHABETIC();\n-            case \"ASSIGNED\": return ASSIGNED();\n-            case \"CONTROL\": return CONTROL();\n-            case \"HEXDIGIT\":\n-            case \"HEX_DIGIT\": return HEX_DIGIT();\n-            case \"IDEOGRAPHIC\": return IDEOGRAPHIC();\n-            case \"JOINCONTROL\":\n-            case \"JOIN_CONTROL\": return JOIN_CONTROL();\n-            case \"LETTER\": return LETTER();\n-            case \"LOWERCASE\": return caseIns\n+        return switch (name) {\n+            case \"ALPHABETIC\" -> ALPHABETIC();\n+            case \"ASSIGNED\" -> ASSIGNED();\n+            case \"CONTROL\" -> CONTROL();\n+            case \"HEXDIGIT\", \"HEX_DIGIT\" -> HEX_DIGIT();\n+            case \"IDEOGRAPHIC\" -> IDEOGRAPHIC();\n+            case \"JOINCONTROL\", \"JOIN_CONTROL\" -> JOIN_CONTROL();\n+            case \"LETTER\" -> LETTER();\n+            case \"LOWERCASE\" -> caseIns\n@@ -208,3 +206,2 @@\n-            case \"NONCHARACTERCODEPOINT\":\n-            case \"NONCHARACTER_CODE_POINT\": return NONCHARACTER_CODE_POINT();\n-            case \"TITLECASE\": return caseIns\n+            case \"NONCHARACTERCODEPOINT\", \"NONCHARACTER_CODE_POINT\" -> NONCHARACTER_CODE_POINT();\n+            case \"TITLECASE\" -> caseIns\n@@ -213,2 +210,2 @@\n-            case \"PUNCTUATION\": return PUNCTUATION();\n-            case \"UPPERCASE\": return caseIns\n+            case \"PUNCTUATION\" -> PUNCTUATION();\n+            case \"UPPERCASE\" -> caseIns\n@@ -217,5 +214,4 @@\n-            case \"WHITESPACE\":\n-            case \"WHITE_SPACE\": return WHITE_SPACE();\n-            case \"WORD\": return WORD();\n-            default: return null;\n-        }\n+            case \"WHITESPACE\", \"WHITE_SPACE\" -> WHITE_SPACE();\n+            case \"WORD\" -> WORD();\n+            default -> null;\n+        };\n@@ -270,81 +266,81 @@\n-        switch (name) {\n-            case \"Cn\": return category(1<<Character.UNASSIGNED);\n-            case \"Lu\": return category(caseIns ? (1<<Character.LOWERCASE_LETTER) |\n-                                                 (1<<Character.UPPERCASE_LETTER) |\n-                                                 (1<<Character.TITLECASE_LETTER)\n-                                               : (1<<Character.UPPERCASE_LETTER));\n-            case \"Ll\": return category(caseIns ? (1<<Character.LOWERCASE_LETTER) |\n-                                                 (1<<Character.UPPERCASE_LETTER) |\n-                                                 (1<<Character.TITLECASE_LETTER)\n-                                               : (1<<Character.LOWERCASE_LETTER));\n-            case \"Lt\": return category(caseIns ? (1<<Character.LOWERCASE_LETTER) |\n-                                                 (1<<Character.UPPERCASE_LETTER) |\n-                                                 (1<<Character.TITLECASE_LETTER)\n-                                               : (1<<Character.TITLECASE_LETTER));\n-            case \"Lm\": return category(1<<Character.MODIFIER_LETTER);\n-            case \"Lo\": return category(1<<Character.OTHER_LETTER);\n-            case \"Mn\": return category(1<<Character.NON_SPACING_MARK);\n-            case \"Me\": return category(1<<Character.ENCLOSING_MARK);\n-            case \"Mc\": return category(1<<Character.COMBINING_SPACING_MARK);\n-            case \"Nd\": return category(1<<Character.DECIMAL_DIGIT_NUMBER);\n-            case \"Nl\": return category(1<<Character.LETTER_NUMBER);\n-            case \"No\": return category(1<<Character.OTHER_NUMBER);\n-            case \"Zs\": return category(1<<Character.SPACE_SEPARATOR);\n-            case \"Zl\": return category(1<<Character.LINE_SEPARATOR);\n-            case \"Zp\": return category(1<<Character.PARAGRAPH_SEPARATOR);\n-            case \"Cc\": return category(1<<Character.CONTROL);\n-            case \"Cf\": return category(1<<Character.FORMAT);\n-            case \"Co\": return category(1<<Character.PRIVATE_USE);\n-            case \"Cs\": return category(1<<Character.SURROGATE);\n-            case \"Pd\": return category(1<<Character.DASH_PUNCTUATION);\n-            case \"Ps\": return category(1<<Character.START_PUNCTUATION);\n-            case \"Pe\": return category(1<<Character.END_PUNCTUATION);\n-            case \"Pc\": return category(1<<Character.CONNECTOR_PUNCTUATION);\n-            case \"Po\": return category(1<<Character.OTHER_PUNCTUATION);\n-            case \"Sm\": return category(1<<Character.MATH_SYMBOL);\n-            case \"Sc\": return category(1<<Character.CURRENCY_SYMBOL);\n-            case \"Sk\": return category(1<<Character.MODIFIER_SYMBOL);\n-            case \"So\": return category(1<<Character.OTHER_SYMBOL);\n-            case \"Pi\": return category(1<<Character.INITIAL_QUOTE_PUNCTUATION);\n-            case \"Pf\": return category(1<<Character.FINAL_QUOTE_PUNCTUATION);\n-            case \"L\": return category(((1<<Character.UPPERCASE_LETTER) |\n-                              (1<<Character.LOWERCASE_LETTER) |\n-                              (1<<Character.TITLECASE_LETTER) |\n-                              (1<<Character.MODIFIER_LETTER)  |\n-                              (1<<Character.OTHER_LETTER)));\n-            case \"M\": return category(((1<<Character.NON_SPACING_MARK) |\n-                              (1<<Character.ENCLOSING_MARK)   |\n-                              (1<<Character.COMBINING_SPACING_MARK)));\n-            case \"N\": return category(((1<<Character.DECIMAL_DIGIT_NUMBER) |\n-                              (1<<Character.LETTER_NUMBER)        |\n-                              (1<<Character.OTHER_NUMBER)));\n-            case \"Z\": return category(((1<<Character.SPACE_SEPARATOR) |\n-                              (1<<Character.LINE_SEPARATOR)  |\n-                              (1<<Character.PARAGRAPH_SEPARATOR)));\n-            case \"C\": return category(((1<<Character.CONTROL)     |\n-                              (1<<Character.FORMAT)      |\n-                              (1<<Character.PRIVATE_USE) |\n-                              (1<<Character.SURROGATE)   |\n-                              (1<<Character.UNASSIGNED))); \/\/ Other\n-            case \"P\": return category(((1<<Character.DASH_PUNCTUATION)      |\n-                              (1<<Character.START_PUNCTUATION)     |\n-                              (1<<Character.END_PUNCTUATION)       |\n-                              (1<<Character.CONNECTOR_PUNCTUATION) |\n-                              (1<<Character.OTHER_PUNCTUATION)     |\n-                              (1<<Character.INITIAL_QUOTE_PUNCTUATION) |\n-                              (1<<Character.FINAL_QUOTE_PUNCTUATION)));\n-            case \"S\": return category(((1<<Character.MATH_SYMBOL)     |\n-                              (1<<Character.CURRENCY_SYMBOL) |\n-                              (1<<Character.MODIFIER_SYMBOL) |\n-                              (1<<Character.OTHER_SYMBOL)));\n-            case \"LC\": return category(((1<<Character.UPPERCASE_LETTER) |\n-                               (1<<Character.LOWERCASE_LETTER) |\n-                               (1<<Character.TITLECASE_LETTER)));\n-            case \"LD\": return category(((1<<Character.UPPERCASE_LETTER) |\n-                               (1<<Character.LOWERCASE_LETTER) |\n-                               (1<<Character.TITLECASE_LETTER) |\n-                               (1<<Character.MODIFIER_LETTER)  |\n-                               (1<<Character.OTHER_LETTER)     |\n-                               (1<<Character.DECIMAL_DIGIT_NUMBER)));\n-            case \"L1\": return range(0x00, 0xFF); \/\/ Latin-1\n-            case \"all\": return Pattern.ALL();\n+        return switch (name) {\n+            case \"Cn\" -> category(1 << Character.UNASSIGNED);\n+            case \"Lu\" -> category(caseIns ? (1 << Character.LOWERCASE_LETTER) |\n+                                            (1 << Character.UPPERCASE_LETTER) |\n+                                            (1 << Character.TITLECASE_LETTER)\n+                                          : (1 << Character.UPPERCASE_LETTER));\n+            case \"Ll\" -> category(caseIns ? (1 << Character.LOWERCASE_LETTER) |\n+                                            (1 << Character.UPPERCASE_LETTER) |\n+                                            (1 << Character.TITLECASE_LETTER)\n+                                          : (1 << Character.LOWERCASE_LETTER));\n+            case \"Lt\" -> category(caseIns ? (1 << Character.LOWERCASE_LETTER) |\n+                                            (1 << Character.UPPERCASE_LETTER) |\n+                                            (1 << Character.TITLECASE_LETTER)\n+                                          : (1 << Character.TITLECASE_LETTER));\n+            case \"Lm\" -> category(1 << Character.MODIFIER_LETTER);\n+            case \"Lo\" -> category(1 << Character.OTHER_LETTER);\n+            case \"Mn\" -> category(1 << Character.NON_SPACING_MARK);\n+            case \"Me\" -> category(1 << Character.ENCLOSING_MARK);\n+            case \"Mc\" -> category(1 << Character.COMBINING_SPACING_MARK);\n+            case \"Nd\" -> category(1 << Character.DECIMAL_DIGIT_NUMBER);\n+            case \"Nl\" -> category(1 << Character.LETTER_NUMBER);\n+            case \"No\" -> category(1 << Character.OTHER_NUMBER);\n+            case \"Zs\" -> category(1 << Character.SPACE_SEPARATOR);\n+            case \"Zl\" -> category(1 << Character.LINE_SEPARATOR);\n+            case \"Zp\" -> category(1 << Character.PARAGRAPH_SEPARATOR);\n+            case \"Cc\" -> category(1 << Character.CONTROL);\n+            case \"Cf\" -> category(1 << Character.FORMAT);\n+            case \"Co\" -> category(1 << Character.PRIVATE_USE);\n+            case \"Cs\" -> category(1 << Character.SURROGATE);\n+            case \"Pd\" -> category(1 << Character.DASH_PUNCTUATION);\n+            case \"Ps\" -> category(1 << Character.START_PUNCTUATION);\n+            case \"Pe\" -> category(1 << Character.END_PUNCTUATION);\n+            case \"Pc\" -> category(1 << Character.CONNECTOR_PUNCTUATION);\n+            case \"Po\" -> category(1 << Character.OTHER_PUNCTUATION);\n+            case \"Sm\" -> category(1 << Character.MATH_SYMBOL);\n+            case \"Sc\" -> category(1 << Character.CURRENCY_SYMBOL);\n+            case \"Sk\" -> category(1 << Character.MODIFIER_SYMBOL);\n+            case \"So\" -> category(1 << Character.OTHER_SYMBOL);\n+            case \"Pi\" -> category(1 << Character.INITIAL_QUOTE_PUNCTUATION);\n+            case \"Pf\" -> category(1 << Character.FINAL_QUOTE_PUNCTUATION);\n+            case \"L\" -> category(((1 << Character.UPPERCASE_LETTER) |\n+                                  (1 << Character.LOWERCASE_LETTER) |\n+                                  (1 << Character.TITLECASE_LETTER) |\n+                                  (1 << Character.MODIFIER_LETTER) |\n+                                  (1 << Character.OTHER_LETTER)));\n+            case \"M\" -> category(((1 << Character.NON_SPACING_MARK) |\n+                                  (1 << Character.ENCLOSING_MARK) |\n+                                  (1 << Character.COMBINING_SPACING_MARK)));\n+            case \"N\" -> category(((1 << Character.DECIMAL_DIGIT_NUMBER) |\n+                                  (1 << Character.LETTER_NUMBER) |\n+                                  (1 << Character.OTHER_NUMBER)));\n+            case \"Z\" -> category(((1 << Character.SPACE_SEPARATOR) |\n+                                  (1 << Character.LINE_SEPARATOR) |\n+                                  (1 << Character.PARAGRAPH_SEPARATOR)));\n+            case \"C\" -> category(((1 << Character.CONTROL) |\n+                                  (1 << Character.FORMAT) |\n+                                  (1 << Character.PRIVATE_USE) |\n+                                  (1 << Character.SURROGATE) |\n+                                  (1 << Character.UNASSIGNED))); \/\/ Other\n+            case \"P\" -> category(((1 << Character.DASH_PUNCTUATION) |\n+                                  (1 << Character.START_PUNCTUATION) |\n+                                  (1 << Character.END_PUNCTUATION) |\n+                                  (1 << Character.CONNECTOR_PUNCTUATION) |\n+                                  (1 << Character.OTHER_PUNCTUATION) |\n+                                  (1 << Character.INITIAL_QUOTE_PUNCTUATION) |\n+                                  (1 << Character.FINAL_QUOTE_PUNCTUATION)));\n+            case \"S\" -> category(((1 << Character.MATH_SYMBOL) |\n+                                  (1 << Character.CURRENCY_SYMBOL) |\n+                                  (1 << Character.MODIFIER_SYMBOL) |\n+                                  (1 << Character.OTHER_SYMBOL)));\n+            case \"LC\" -> category(((1 << Character.UPPERCASE_LETTER) |\n+                                   (1 << Character.LOWERCASE_LETTER) |\n+                                   (1 << Character.TITLECASE_LETTER)));\n+            case \"LD\" -> category(((1 << Character.UPPERCASE_LETTER) |\n+                                   (1 << Character.LOWERCASE_LETTER) |\n+                                   (1 << Character.TITLECASE_LETTER) |\n+                                   (1 << Character.MODIFIER_LETTER) |\n+                                   (1 << Character.OTHER_LETTER) |\n+                                   (1 << Character.DECIMAL_DIGIT_NUMBER)));\n+            case \"L1\" -> range(0x00, 0xFF); \/\/ Latin-1\n+            case \"all\" -> Pattern.ALL();\n@@ -353,8 +349,8 @@\n-            case \"ASCII\": return range(0x00, 0x7F);    \/\/ ASCII\n-            case \"Alnum\": return ctype(ASCII.ALNUM);   \/\/ Alphanumeric characters\n-            case \"Alpha\": return ctype(ASCII.ALPHA);   \/\/ Alphabetic characters\n-            case \"Blank\": return ctype(ASCII.BLANK);   \/\/ Space and tab characters\n-            case \"Cntrl\": return ctype(ASCII.CNTRL);   \/\/ Control characters\n-            case \"Digit\": return range('0', '9');      \/\/ Numeric characters\n-            case \"Graph\": return ctype(ASCII.GRAPH);   \/\/ printable and visible\n-            case \"Lower\": return caseIns ? ctype(ASCII.ALPHA)\n+            case \"ASCII\" -> range(0x00, 0x7F);    \/\/ ASCII\n+            case \"Alnum\" -> ctype(ASCII.ALNUM);   \/\/ Alphanumeric characters\n+            case \"Alpha\" -> ctype(ASCII.ALPHA);   \/\/ Alphabetic characters\n+            case \"Blank\" -> ctype(ASCII.BLANK);   \/\/ Space and tab characters\n+            case \"Cntrl\" -> ctype(ASCII.CNTRL);   \/\/ Control characters\n+            case \"Digit\" -> range('0', '9');      \/\/ Numeric characters\n+            case \"Graph\" -> ctype(ASCII.GRAPH);   \/\/ printable and visible\n+            case \"Lower\" -> caseIns ? ctype(ASCII.ALPHA)\n@@ -362,4 +358,4 @@\n-            case \"Print\": return range(0x20, 0x7E);    \/\/ Printable characters\n-            case \"Punct\": return ctype(ASCII.PUNCT);   \/\/ Punctuation characters\n-            case \"Space\": return ctype(ASCII.SPACE);   \/\/ Space characters\n-            case \"Upper\": return caseIns ? ctype(ASCII.ALPHA)\n+            case \"Print\" -> range(0x20, 0x7E);    \/\/ Printable characters\n+            case \"Punct\" -> ctype(ASCII.PUNCT);   \/\/ Punctuation characters\n+            case \"Space\" -> ctype(ASCII.SPACE);   \/\/ Space characters\n+            case \"Upper\" -> caseIns ? ctype(ASCII.ALPHA)\n@@ -367,1 +363,1 @@\n-            case \"XDigit\": return ctype(ASCII.XDIGIT); \/\/ hexadecimal digits\n+            case \"XDigit\" -> ctype(ASCII.XDIGIT); \/\/ hexadecimal digits\n@@ -370,29 +366,29 @@\n-            case \"javaLowerCase\": return caseIns ? c -> Character.isLowerCase(c) ||\n-                                                        Character.isUpperCase(c) ||\n-                                                        Character.isTitleCase(c)\n-                                                 : Character::isLowerCase;\n-            case \"javaUpperCase\": return caseIns ? c -> Character.isUpperCase(c) ||\n-                                                        Character.isLowerCase(c) ||\n-                                                        Character.isTitleCase(c)\n-                                                 : Character::isUpperCase;\n-            case \"javaAlphabetic\": return Character::isAlphabetic;\n-            case \"javaIdeographic\": return Character::isIdeographic;\n-            case \"javaTitleCase\": return caseIns ? c -> Character.isTitleCase(c) ||\n-                                                        Character.isLowerCase(c) ||\n-                                                        Character.isUpperCase(c)\n-                                                 : Character::isTitleCase;\n-            case \"javaDigit\": return Character::isDigit;\n-            case \"javaDefined\": return Character::isDefined;\n-            case \"javaLetter\": return Character::isLetter;\n-            case \"javaLetterOrDigit\": return Character::isLetterOrDigit;\n-            case \"javaJavaIdentifierStart\": return Character::isJavaIdentifierStart;\n-            case \"javaJavaIdentifierPart\": return Character::isJavaIdentifierPart;\n-            case \"javaUnicodeIdentifierStart\": return Character::isUnicodeIdentifierStart;\n-            case \"javaUnicodeIdentifierPart\": return Character::isUnicodeIdentifierPart;\n-            case \"javaIdentifierIgnorable\": return Character::isIdentifierIgnorable;\n-            case \"javaSpaceChar\": return Character::isSpaceChar;\n-            case \"javaWhitespace\": return Character::isWhitespace;\n-            case \"javaISOControl\": return Character::isISOControl;\n-            case \"javaMirrored\": return Character::isMirrored;\n-            default: return null;\n-        }\n+            case \"javaLowerCase\" -> caseIns ? c -> Character.isLowerCase(c) ||\n+                                                   Character.isUpperCase(c) ||\n+                                                   Character.isTitleCase(c)\n+                                            : Character::isLowerCase;\n+            case \"javaUpperCase\" -> caseIns ? c -> Character.isUpperCase(c) ||\n+                                                   Character.isLowerCase(c) ||\n+                                                   Character.isTitleCase(c)\n+                                            : Character::isUpperCase;\n+            case \"javaAlphabetic\" -> Character::isAlphabetic;\n+            case \"javaIdeographic\" -> Character::isIdeographic;\n+            case \"javaTitleCase\" -> caseIns ? c -> Character.isTitleCase(c) ||\n+                                                   Character.isLowerCase(c) ||\n+                                                   Character.isUpperCase(c)\n+                                            : Character::isTitleCase;\n+            case \"javaDigit\" -> Character::isDigit;\n+            case \"javaDefined\" -> Character::isDefined;\n+            case \"javaLetter\" -> Character::isLetter;\n+            case \"javaLetterOrDigit\" -> Character::isLetterOrDigit;\n+            case \"javaJavaIdentifierStart\" -> Character::isJavaIdentifierStart;\n+            case \"javaJavaIdentifierPart\" -> Character::isJavaIdentifierPart;\n+            case \"javaUnicodeIdentifierStart\" -> Character::isUnicodeIdentifierStart;\n+            case \"javaUnicodeIdentifierPart\" -> Character::isUnicodeIdentifierPart;\n+            case \"javaIdentifierIgnorable\" -> Character::isIdentifierIgnorable;\n+            case \"javaSpaceChar\" -> Character::isSpaceChar;\n+            case \"javaWhitespace\" -> Character::isWhitespace;\n+            case \"javaISOControl\" -> Character::isISOControl;\n+            case \"javaMirrored\" -> Character::isMirrored;\n+            default -> null;\n+        };\n","filename":"src\/java.base\/share\/classes\/java\/util\/regex\/CharPredicates.java","additions":155,"deletions":159,"binary":false,"changes":314,"status":"modified"},{"patch":"@@ -2346,17 +2346,11 @@\n-            switch(ch) {\n-            case '0':\n-            case '1':\n-            case '2':\n-            case '3':\n-            case '4':\n-            case '5':\n-            case '6':\n-            case '7':\n-            case '8':\n-            case '9':\n-                int newRefNum = (refNum * 10) + (ch - '0');\n-                \/\/ Add another number if it doesn't make a group\n-                \/\/ that doesn't exist\n-                if (capturingGroupCount - 1 < newRefNum) {\n-                    done = true;\n-                    break;\n+            switch (ch) {\n+                case '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' -> {\n+                    int newRefNum = (refNum * 10) + (ch - '0');\n+                    \/\/ Add another number if it doesn't make a group\n+                    \/\/ that doesn't exist\n+                    if (capturingGroupCount - 1 < newRefNum) {\n+                        done = true;\n+                        break;\n+                    }\n+                    refNum = newRefNum;\n+                    read();\n@@ -2364,6 +2358,1 @@\n-                refNum = newRefNum;\n-                read();\n-                break;\n-            default:\n-                done = true;\n-                break;\n+                default -> done = true;\n@@ -2976,32 +2965,2 @@\n-            case ':':   \/\/  (?:xxx) pure group\n-                head = createGroup(true);\n-                tail = root;\n-                head.next = expr(tail);\n-                break;\n-            case '=':   \/\/ (?=xxx) and (?!xxx) lookahead\n-            case '!':\n-                head = createGroup(true);\n-                tail = root;\n-                head.next = expr(tail);\n-                if (ch == '=') {\n-                    head = tail = new Pos(head);\n-                } else {\n-                    head = tail = new Neg(head);\n-                }\n-                break;\n-            case '>':   \/\/ (?>xxx)  independent group\n-                head = createGroup(true);\n-                tail = root;\n-                head.next = expr(tail);\n-                head = tail = new Ques(head, Qtype.INDEPENDENT);\n-                break;\n-            case '<':   \/\/ (?<xxx)  look behind\n-                ch = read();\n-                if (ch != '=' && ch != '!') {\n-                    \/\/ named captured group\n-                    String name = groupname(ch);\n-                    if (namedGroups().containsKey(name))\n-                        throw error(\"Named capturing group <\" + name\n-                                    + \"> is already defined\");\n-                    capturingGroup = true;\n-                    head = createGroup(false);\n+                case ':' -> {   \/\/  (?:xxx) pure group\n+                    head = createGroup(true);\n@@ -3009,1 +2968,0 @@\n-                    namedGroups().put(name, capturingGroupCount-1);\n@@ -3011,1 +2969,0 @@\n-                    break;\n@@ -3013,10 +2970,9 @@\n-                int start = cursor;\n-                head = createGroup(true);\n-                tail = root;\n-                head.next = expr(tail);\n-                tail.next = LookBehindEndNode.INSTANCE;\n-                TreeInfo info = new TreeInfo();\n-                head.study(info);\n-                if (info.maxValid == false) {\n-                    throw error(\"Look-behind group does not have \"\n-                                + \"an obvious maximum length\");\n+                case '=', '!' -> {   \/\/ (?=xxx) and (?!xxx) lookahead\n+                    head = createGroup(true);\n+                    tail = root;\n+                    head.next = expr(tail);\n+                    if (ch == '=') {\n+                        head = tail = new Pos(head);\n+                    } else {\n+                        head = tail = new Neg(head);\n+                    }\n@@ -3024,13 +2980,5 @@\n-                boolean hasSupplementary = findSupplementary(start, patternLength);\n-                if (ch == '=') {\n-                    head = tail = (hasSupplementary ?\n-                                   new BehindS(head, info.maxLength,\n-                                               info.minLength) :\n-                                   new Behind(head, info.maxLength,\n-                                              info.minLength));\n-                } else { \/\/ if (ch == '!')\n-                    head = tail = (hasSupplementary ?\n-                                   new NotBehindS(head, info.maxLength,\n-                                                  info.minLength) :\n-                                   new NotBehind(head, info.maxLength,\n-                                                 info.minLength));\n+                case '>' -> {   \/\/ (?>xxx)  independent group\n+                    head = createGroup(true);\n+                    tail = root;\n+                    head.next = expr(tail);\n+                    head = tail = new Ques(head, Qtype.INDEPENDENT);\n@@ -3038,13 +2986,43 @@\n-                \/\/ clear all top-closure-nodes inside lookbehind\n-                if (saveTCNCount < topClosureNodes.size())\n-                    topClosureNodes.subList(saveTCNCount, topClosureNodes.size()).clear();\n-                break;\n-            case '$':\n-            case '@':\n-                throw error(\"Unknown group type\");\n-            default:    \/\/ (?xxx:) inlined match flags\n-                unread();\n-                addFlag();\n-                ch = read();\n-                if (ch == ')') {\n-                    return null;    \/\/ Inline modifier only\n+                case '<' -> {   \/\/ (?<xxx)  look behind\n+                    ch = read();\n+                    if (ch != '=' && ch != '!') {\n+                        \/\/ named captured group\n+                        String name = groupname(ch);\n+                        if (namedGroups().containsKey(name))\n+                            throw error(\"Named capturing group <\" + name\n+                                        + \"> is already defined\");\n+                        capturingGroup = true;\n+                        head = createGroup(false);\n+                        tail = root;\n+                        namedGroups().put(name, capturingGroupCount - 1);\n+                        head.next = expr(tail);\n+                        break;\n+                    }\n+                    int start = cursor;\n+                    head = createGroup(true);\n+                    tail = root;\n+                    head.next = expr(tail);\n+                    tail.next = LookBehindEndNode.INSTANCE;\n+                    TreeInfo info = new TreeInfo();\n+                    head.study(info);\n+                    if (info.maxValid == false) {\n+                        throw error(\"Look-behind group does not have \"\n+                                    + \"an obvious maximum length\");\n+                    }\n+                    boolean hasSupplementary = findSupplementary(start, patternLength);\n+                    if (ch == '=') {\n+                        head = tail = (hasSupplementary ?\n+                            new BehindS(head, info.maxLength,\n+                                info.minLength) :\n+                            new Behind(head, info.maxLength,\n+                                info.minLength));\n+                    } else { \/\/ if (ch == '!')\n+                        head = tail = (hasSupplementary ?\n+                            new NotBehindS(head, info.maxLength,\n+                                info.minLength) :\n+                            new NotBehind(head, info.maxLength,\n+                                info.minLength));\n+                    }\n+                    \/\/ clear all top-closure-nodes inside lookbehind\n+                    if (saveTCNCount < topClosureNodes.size())\n+                        topClosureNodes.subList(saveTCNCount, topClosureNodes.size()).clear();\n@@ -3052,2 +3030,14 @@\n-                if (ch != ':') {\n-                    throw error(\"Unknown inline modifier\");\n+                case '$', '@' -> throw error(\"Unknown group type\");\n+                default -> {    \/\/ (?xxx:) inlined match flags\n+                    unread();\n+                    addFlag();\n+                    ch = read();\n+                    if (ch == ')') {\n+                        return null;    \/\/ Inline modifier only\n+                    }\n+                    if (ch != ':') {\n+                        throw error(\"Unknown inline modifier\");\n+                    }\n+                    head = createGroup(true);\n+                    tail = root;\n+                    head.next = expr(tail);\n@@ -3055,4 +3045,0 @@\n-                head = createGroup(true);\n-                tail = root;\n-                head.next = expr(tail);\n-                break;\n","filename":"src\/java.base\/share\/classes\/java\/util\/regex\/Pattern.java","additions":85,"deletions":99,"binary":false,"changes":184,"status":"modified"},{"patch":"@@ -79,17 +79,17 @@\n-        switch(type) {\n-        case UPPER:  return \"ASCII.UPPER\";\n-        case LOWER:  return \"ASCII.LOWER\";\n-        case DIGIT:  return \"ASCII.DIGIT\";\n-        case SPACE:  return \"ASCII.SPACE\";\n-        case PUNCT:  return \"ASCII.PUNCT\";\n-        case CNTRL:  return \"ASCII.CNTRL\";\n-        case BLANK:  return \"ASCII.BLANK\";\n-        case UNDER:  return \"ASCII.UNDER\";\n-        case ASCII:  return \"ASCII.ASCII\";\n-        case ALPHA:  return \"ASCII.ALPHA\";\n-        case ALNUM:  return \"ASCII.ALNUM\";\n-        case GRAPH:  return \"ASCII.GRAPH\";\n-        case WORD:   return \"ASCII.WORD\";\n-        case XDIGIT: return \"ASCII.XDIGIT\";\n-        default: return \"ASCII ?\";\n-        }\n+        return switch (type) {\n+            case UPPER -> \"ASCII.UPPER\";\n+            case LOWER -> \"ASCII.LOWER\";\n+            case DIGIT -> \"ASCII.DIGIT\";\n+            case SPACE -> \"ASCII.SPACE\";\n+            case PUNCT -> \"ASCII.PUNCT\";\n+            case CNTRL -> \"ASCII.CNTRL\";\n+            case BLANK -> \"ASCII.BLANK\";\n+            case UNDER -> \"ASCII.UNDER\";\n+            case ASCII -> \"ASCII.ASCII\";\n+            case ALPHA -> \"ASCII.ALPHA\";\n+            case ALNUM -> \"ASCII.ALNUM\";\n+            case GRAPH -> \"ASCII.GRAPH\";\n+            case WORD -> \"ASCII.WORD\";\n+            case XDIGIT -> \"ASCII.XDIGIT\";\n+            default -> \"ASCII ?\";\n+        };\n","filename":"src\/java.base\/share\/classes\/java\/util\/regex\/PrintPattern.java","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -91,8 +91,6 @@\n-        switch (shape) {\n-            case REFERENCE:    return (Node<T>) EMPTY_NODE;\n-            case INT_VALUE:    return (Node<T>) EMPTY_INT_NODE;\n-            case LONG_VALUE:   return (Node<T>) EMPTY_LONG_NODE;\n-            case DOUBLE_VALUE: return (Node<T>) EMPTY_DOUBLE_NODE;\n-            default:\n-                throw new IllegalStateException(\"Unknown shape \" + shape);\n-        }\n+        return (Node<T>) switch (shape) {\n+            case REFERENCE -> EMPTY_NODE;\n+            case INT_VALUE -> EMPTY_INT_NODE;\n+            case LONG_VALUE -> EMPTY_LONG_NODE;\n+            case DOUBLE_VALUE -> EMPTY_DOUBLE_NODE;\n+        };\n@@ -122,12 +120,6 @@\n-        switch (shape) {\n-            case REFERENCE:\n-                return new ConcNode<>(left, right);\n-            case INT_VALUE:\n-                return (Node<T>) new ConcNode.OfInt((Node.OfInt) left, (Node.OfInt) right);\n-            case LONG_VALUE:\n-                return (Node<T>) new ConcNode.OfLong((Node.OfLong) left, (Node.OfLong) right);\n-            case DOUBLE_VALUE:\n-                return (Node<T>) new ConcNode.OfDouble((Node.OfDouble) left, (Node.OfDouble) right);\n-            default:\n-                throw new IllegalStateException(\"Unknown shape \" + shape);\n-        }\n+        return (Node<T>) switch (shape) {\n+            case REFERENCE -> new ConcNode<>(left, right);\n+            case INT_VALUE -> new ConcNode.OfInt((Node.OfInt) left, (Node.OfInt) right);\n+            case LONG_VALUE -> new ConcNode.OfLong((Node.OfLong) left, (Node.OfLong) right);\n+            case DOUBLE_VALUE -> new ConcNode.OfDouble((Node.OfDouble) left, (Node.OfDouble) right);\n+        };\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/Nodes.java","additions":12,"deletions":20,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -84,5 +84,5 @@\n-        switch (e.method) {\n-        case DEFLATED: return 20;\n-        case STORED:   return 10;\n-        default: throw new ZipException(\"unsupported compression method\");\n-        }\n+        return switch (e.method) {\n+            case DEFLATED -> 20;\n+            case STORED -> 10;\n+            default -> throw new ZipException(\"unsupported compression method\");\n+        };\n@@ -261,1 +261,1 @@\n-            case DEFLATED:\n+            case DEFLATED -> {\n@@ -285,1 +285,1 @@\n-                    e.size  = def.getBytesRead();\n+                    e.size = def.getBytesRead();\n@@ -292,2 +292,2 @@\n-                break;\n-            case STORED:\n+            }\n+            case STORED -> {\n@@ -302,3 +302,3 @@\n-                         \"invalid entry crc-32 (expected 0x\" +\n-                         Long.toHexString(e.crc) + \" but got 0x\" +\n-                         Long.toHexString(crc.getValue()) + \")\");\n+                        \"invalid entry crc-32 (expected 0x\" +\n+                        Long.toHexString(e.crc) + \" but got 0x\" +\n+                        Long.toHexString(crc.getValue()) + \")\");\n@@ -306,3 +306,2 @@\n-                break;\n-            default:\n-                throw new ZipException(\"invalid compression method\");\n+            }\n+            default -> throw new ZipException(\"invalid compression method\");\n@@ -339,8 +338,8 @@\n-        case DEFLATED:\n-            super.write(b, off, len);\n-            break;\n-        case STORED:\n-            written += len;\n-            if (written - locoff > entry.size) {\n-                throw new ZipException(\n-                    \"attempt to write past end of STORED entry\");\n+            case DEFLATED -> super.write(b, off, len);\n+            case STORED -> {\n+                written += len;\n+                if (written - locoff > entry.size) {\n+                    throw new ZipException(\n+                        \"attempt to write past end of STORED entry\");\n+                }\n+                out.write(b, off, len);\n@@ -348,4 +347,1 @@\n-            out.write(b, off, len);\n-            break;\n-        default:\n-            throw new ZipException(\"invalid compression method\");\n+            default -> throw new ZipException(\"invalid compression method\");\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipOutputStream.java","additions":23,"deletions":27,"binary":false,"changes":50,"status":"modified"}]}