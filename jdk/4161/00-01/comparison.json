{"files":[{"patch":"@@ -261,31 +261,4 @@\n-                case DEFLATED -> {\n-                    def.finish();\n-                    while (!def.finished()) {\n-                        deflate();\n-                    }\n-                    if ((e.flag & 8) == 0) {\n-                        \/\/ verify size, compressed size, and crc-32 settings\n-                        if (e.size != def.getBytesRead()) {\n-                            throw new ZipException(\n-                                \"invalid entry size (expected \" + e.size +\n-                                \" but got \" + def.getBytesRead() + \" bytes)\");\n-                        }\n-                        if (e.csize != def.getBytesWritten()) {\n-                            throw new ZipException(\n-                                \"invalid entry compressed size (expected \" +\n-                                e.csize + \" but got \" + def.getBytesWritten() + \" bytes)\");\n-                        }\n-                        if (e.crc != crc.getValue()) {\n-                            throw new ZipException(\n-                                \"invalid entry CRC-32 (expected 0x\" +\n-                                Long.toHexString(e.crc) + \" but got 0x\" +\n-                                Long.toHexString(crc.getValue()) + \")\");\n-                        }\n-                    } else {\n-                        e.size = def.getBytesRead();\n-                        e.csize = def.getBytesWritten();\n-                        e.crc = crc.getValue();\n-                        writeEXT(e);\n-                    }\n-                    def.reset();\n-                    written += e.csize;\n+            case DEFLATED -> {\n+                def.finish();\n+                while (!def.finished()) {\n+                    deflate();\n@@ -293,3 +266,3 @@\n-                case STORED -> {\n-                    \/\/ we already know that both e.size and e.csize are the same\n-                    if (e.size != written - locoff) {\n+                if ((e.flag & 8) == 0) {\n+                    \/\/ verify size, compressed size, and crc-32 settings\n+                    if (e.size != def.getBytesRead()) {\n@@ -298,1 +271,6 @@\n-                            \" but got \" + (written - locoff) + \" bytes)\");\n+                            \" but got \" + def.getBytesRead() + \" bytes)\");\n+                    }\n+                    if (e.csize != def.getBytesWritten()) {\n+                        throw new ZipException(\n+                            \"invalid entry compressed size (expected \" +\n+                            e.csize + \" but got \" + def.getBytesWritten() + \" bytes)\");\n@@ -302,1 +280,1 @@\n-                            \"invalid entry crc-32 (expected 0x\" +\n+                            \"invalid entry CRC-32 (expected 0x\" +\n@@ -306,0 +284,5 @@\n+                } else {\n+                    e.size = def.getBytesRead();\n+                    e.csize = def.getBytesWritten();\n+                    e.crc = crc.getValue();\n+                    writeEXT(e);\n@@ -307,1 +290,18 @@\n-                default -> throw new ZipException(\"invalid compression method\");\n+                def.reset();\n+                written += e.csize;\n+            }\n+            case STORED -> {\n+                \/\/ we already know that both e.size and e.csize are the same\n+                if (e.size != written - locoff) {\n+                    throw new ZipException(\n+                        \"invalid entry size (expected \" + e.size +\n+                        \" but got \" + (written - locoff) + \" bytes)\");\n+                }\n+                if (e.crc != crc.getValue()) {\n+                    throw new ZipException(\n+                        \"invalid entry crc-32 (expected 0x\" +\n+                        Long.toHexString(e.crc) + \" but got 0x\" +\n+                        Long.toHexString(crc.getValue()) + \")\");\n+                }\n+            }\n+            default -> throw new ZipException(\"invalid compression method\");\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipOutputStream.java","additions":37,"deletions":37,"binary":false,"changes":74,"status":"modified"}]}