{"files":[{"patch":"@@ -2436,4 +2436,0 @@\n-void Matcher::vector_calling_convention(VMRegPair *regs, uint num_bits, uint total_args_passed) {\n-  (void) SharedRuntime::vector_calling_convention(regs, num_bits, total_args_passed);\n-}\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -999,4 +999,0 @@\n-void Matcher::vector_calling_convention(VMRegPair *regs, uint num_bits, uint total_args_passed) {\n-  (void) SharedRuntime::vector_calling_convention(regs, num_bits, total_args_passed);\n-}\n-\n","filename":"src\/hotspot\/cpu\/arm\/arm.ad","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1552,4 +1552,0 @@\n-void Matcher::vector_calling_convention(VMRegPair *regs, uint num_bits, uint total_args_passed) {\n-  (void) SharedRuntime::vector_calling_convention(regs, num_bits, total_args_passed);\n-}\n-\n","filename":"src\/hotspot\/cpu\/s390\/s390.ad","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -6969,1 +6969,2 @@\n-#ifdef __VECTOR_API_MATH_INTRINSICS_COMMON\n+\n+    \/\/ Get svml stub routine addresses\n@@ -7029,1 +7030,0 @@\n-#endif \/\/ __VECTOR_API_MATH_INTRINSICS_COMMON\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1406,4 +1406,0 @@\n-void Matcher::vector_calling_convention(VMRegPair *regs, uint num_bits, uint total_args_passed) {\n-  (void) SharedRuntime::vector_calling_convention(regs, num_bits, total_args_passed);\n-}\n-\n","filename":"src\/hotspot\/cpu\/x86\/x86_32.ad","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1704,5 +1704,0 @@\n-void Matcher::vector_calling_convention(VMRegPair *regs, uint num_bits, uint total_args_passed) {\n-  assert(EnableVectorSupport && UseVectorStubs, \"sanity\");\n-  (void) SharedRuntime::vector_calling_convention(regs, num_bits, total_args_passed);\n-}\n-\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1300,1 +1300,1 @@\n-  Matcher::vector_calling_convention(parm_regs, _num_bits, argcnt);\n+  SharedRuntime::vector_calling_convention(parm_regs, _num_bits, argcnt);\n","filename":"src\/hotspot\/share\/opto\/callnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1370,2 +1370,2 @@\n-      if( !first->is_valid() &&\n-          !second->is_valid() ) {\n+      if(!first->is_valid() &&\n+         !second->is_valid()) {\n","filename":"src\/hotspot\/share\/opto\/matcher.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -420,3 +420,0 @@\n-  static void vector_calling_convention(VMRegPair *regs,\n-                                        uint num_bits,\n-                                        uint total_args_passed);\n","filename":"src\/hotspot\/share\/opto\/matcher.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1311,1 +1311,2 @@\n-static void get_svml_address(int vop, int bits, BasicType bt, char* name_ptr, int name_len, address* addr_ptr) {\n+static address get_svml_address(int vop, int bits, BasicType bt, char* name_ptr, int name_len) {\n+  address addr = NULL;\n@@ -1314,1 +1315,0 @@\n-  assert(addr_ptr != NULL, \"unexpected\");\n@@ -1318,1 +1318,0 @@\n-#ifdef __VECTOR_API_MATH_INTRINSICS_COMMON\n@@ -1326,1 +1325,1 @@\n-        *addr_ptr = StubRoutines::_vector_f_math[exact_log2(bits\/64)][op];\n+        addr = StubRoutines::_vector_f_math[exact_log2(bits\/64)][op];\n@@ -1330,1 +1329,1 @@\n-        *addr_ptr = StubRoutines::_vector_d_math[exact_log2(bits\/64)][op];\n+        addr = StubRoutines::_vector_d_math[exact_log2(bits\/64)][op];\n@@ -1335,1 +1334,1 @@\n-      *addr_ptr = NULL;\n+      addr = NULL;\n@@ -1339,4 +1338,2 @@\n-#else\n-  snprintf(name_ptr, name_len, \"invalid\");\n-  *addr_ptr = NULL;\n-#endif \/\/ __VECTOR_API_MATH_INTRINSICS_COMMON\n+\n+  return addr;\n@@ -1352,1 +1349,0 @@\n-  address addr = NULL;\n@@ -1355,1 +1351,1 @@\n-  get_svml_address(vector_api_op_id, vt->length_in_bytes() * BitsPerByte, bt, name, 100, &addr);\n+  address addr = get_svml_address(vector_api_op_id, vt->length_in_bytes() * BitsPerByte, bt, name, 100);\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":8,"deletions":12,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -186,1 +186,0 @@\n-#ifdef __VECTOR_API_MATH_INTRINSICS_COMMON\n@@ -189,1 +188,0 @@\n-#endif \/\/ __VECTOR_API_MATH_INTRINSICS_COMMON\n","filename":"src\/hotspot\/share\/runtime\/stubRoutines.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -269,1 +269,0 @@\n-#ifdef __VECTOR_API_MATH_INTRINSICS_COMMON\n@@ -273,2 +272,0 @@\n-#endif \/\/ __VECTOR_API_MATH_INTRINSICS_COMMON\n-\n","filename":"src\/hotspot\/share\/runtime\/stubRoutines.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-#include \"utilities\/globalDefinitions_vecApi.hpp\"\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -660,2 +660,0 @@\n-                case VECTOR_OP_OR: return (v0, v1) ->\n-                        v0.bOp(v1, (i, a, b) -> fromBits(toBits(a) | toBits(b)));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -660,2 +660,0 @@\n-                case VECTOR_OP_OR: return (v0, v1) ->\n-                        v0.bOp(v1, (i, a, b) -> fromBits(toBits(a) | toBits(b)));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -723,2 +723,0 @@\n-                case VECTOR_OP_OR: return (v0, v1) ->\n-                        v0.bOp(v1, (i, a, b) -> fromBits(toBits(a) | toBits(b)));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}