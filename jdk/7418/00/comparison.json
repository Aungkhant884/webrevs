{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -148,1 +148,3 @@\n-        result.append(type.getName());\n+        \/\/ Guard against shouldn't-happen NPE for a missing canonical name\n+        result.append(Objects.toString(type.getCanonicalName(),\n+                                       \"<no canonical name>\"));\n@@ -192,0 +194,4 @@\n+            else if (value instanceof Enum<?>)\n+                \/\/ Predicate above covers enum constants, including\n+                \/\/ those with specialized class bodies.\n+                return toSourceString((Enum<?>) value);\n@@ -222,0 +228,4 @@\n+            else if (type.getComponentType().isEnum())\n+                stringStream =\n+                    Arrays.stream((Enum<?>[])value).\n+                    map(AnnotationInvocationHandler::toSourceString);\n@@ -242,1 +252,5 @@\n-        return finalComponent.getName() + arrayBrackets.toString() + \".class\";\n+        \/\/ Guard against NPE in toString generation if the class lacks\n+        \/\/ a canonical name; not expected to happen\n+        return Objects.toString(finalComponent.getCanonicalName(),\n+                                \"<no canonical name>\") +\n+            arrayBrackets.toString() + \".class\";\n@@ -310,0 +324,4 @@\n+    private static String toSourceString(Enum<?> enumConstant) {\n+        return enumConstant.name();\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/reflect\/annotation\/AnnotationInvocationHandler.java","additions":21,"deletions":3,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,2 @@\n-import java.lang.reflect.*;\n+import java.lang.reflect.Field;\n+import javax.lang.model.element.Modifier;\n@@ -163,0 +164,5 @@\n+        @ExpectedString(\n+       \"@EnumValue(NON_SEALED)\") \/\/ toString and name differ\n+        @EnumValue(Modifier.NON_SEALED)\n+        public int f00;\n+\n@@ -216,2 +222,2 @@\n-       \"@EnumArray({SOURCE})\")\n-        @EnumArray({RetentionPolicy.SOURCE})\n+       \"@EnumArray({SEALED, NON_SEALED, PUBLIC})\")\n+        @EnumArray({Modifier.SEALED, Modifier.NON_SEALED, Modifier.PUBLIC})\n@@ -226,0 +232,5 @@\n+@Retention(RetentionPolicy.RUNTIME)\n+@interface EnumValue {\n+    Modifier value();\n+}\n+\n@@ -288,1 +299,1 @@\n-    RetentionPolicy[] value();\n+    Modifier[] value();\n","filename":"test\/jdk\/java\/lang\/annotation\/AnnotationToStringTest.java","additions":16,"deletions":5,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,1 +64,1 @@\n-            } else if (!e.foundType().equals(\"@\" + AnAnnotation.class.getName() + \"(\" + AnEnum.VALUE.name() + \")\")) {\n+            } else if (!e.foundType().equals(\"@\" + AnAnnotation.class.getCanonicalName() + \"(\" + AnEnum.VALUE.name() + \")\")) {\n","filename":"test\/jdk\/java\/lang\/annotation\/AnnotationTypeMismatchException\/EnumTypeMismatchTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -132,1 +132,1 @@\n-        \"[@TestConstructorParameterAnnotations$MarkerAnnotation(1)]]\")\n+        \"[@TestConstructorParameterAnnotations.MarkerAnnotation(1)]]\")\n@@ -135,1 +135,1 @@\n-        \"@TestConstructorParameterAnnotations$MarkerAnnotation(1)\"})\n+        \"@TestConstructorParameterAnnotations.MarkerAnnotation(1)\"})\n@@ -142,1 +142,1 @@\n-        \"[@TestConstructorParameterAnnotations$MarkerAnnotation(2)], \" +\n+        \"[@TestConstructorParameterAnnotations.MarkerAnnotation(2)], \" +\n@@ -146,1 +146,1 @@\n-        \"@TestConstructorParameterAnnotations$MarkerAnnotation(2)\",\n+        \"@TestConstructorParameterAnnotations.MarkerAnnotation(2)\",\n@@ -155,1 +155,1 @@\n-        \"[@TestConstructorParameterAnnotations$MarkerAnnotation(3)], \" +\n+        \"[@TestConstructorParameterAnnotations.MarkerAnnotation(3)], \" +\n@@ -159,1 +159,1 @@\n-        \"@TestConstructorParameterAnnotations$MarkerAnnotation(3)\",\n+        \"@TestConstructorParameterAnnotations.MarkerAnnotation(3)\",\n@@ -168,1 +168,1 @@\n-        \"[@TestConstructorParameterAnnotations$MarkerAnnotation(4)], \" +\n+        \"[@TestConstructorParameterAnnotations.MarkerAnnotation(4)], \" +\n@@ -172,1 +172,1 @@\n-        \"@TestConstructorParameterAnnotations$MarkerAnnotation(4)\",\n+        \"@TestConstructorParameterAnnotations.MarkerAnnotation(4)\",\n@@ -186,1 +186,1 @@\n-        \"[[@TestConstructorParameterAnnotations$MarkerAnnotation(1)]]\")\n+        \"[[@TestConstructorParameterAnnotations.MarkerAnnotation(1)]]\")\n@@ -188,1 +188,1 @@\n-        \"@TestConstructorParameterAnnotations$MarkerAnnotation(1)\"})\n+        \"@TestConstructorParameterAnnotations.MarkerAnnotation(1)\"})\n@@ -194,1 +194,1 @@\n-        \"[[@TestConstructorParameterAnnotations$MarkerAnnotation(2)], \" +\n+        \"[[@TestConstructorParameterAnnotations.MarkerAnnotation(2)], \" +\n@@ -197,1 +197,1 @@\n-        \"@TestConstructorParameterAnnotations$MarkerAnnotation(2)\",\n+        \"@TestConstructorParameterAnnotations.MarkerAnnotation(2)\",\n@@ -205,1 +205,1 @@\n-        \"[[@TestConstructorParameterAnnotations$MarkerAnnotation(3)], \" +\n+        \"[[@TestConstructorParameterAnnotations.MarkerAnnotation(3)], \" +\n@@ -208,1 +208,1 @@\n-        \"@TestConstructorParameterAnnotations$MarkerAnnotation(3)\",\n+        \"@TestConstructorParameterAnnotations.MarkerAnnotation(3)\",\n@@ -216,1 +216,1 @@\n-        \"[[@TestConstructorParameterAnnotations$MarkerAnnotation(4)], \" +\n+        \"[[@TestConstructorParameterAnnotations.MarkerAnnotation(4)], \" +\n@@ -219,1 +219,1 @@\n-        \"@TestConstructorParameterAnnotations$MarkerAnnotation(4)\",\n+        \"@TestConstructorParameterAnnotations.MarkerAnnotation(4)\",\n","filename":"test\/jdk\/java\/lang\/annotation\/TestConstructorParameterAnnotations.java","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-        assertEquals(Arrays.toString(x.getAnnotations()), \"[@GetAnnotatedNestedSuperclass$A()]\");\n+        assertEquals(Arrays.toString(x.getAnnotations()), \"[@GetAnnotatedNestedSuperclass.A()]\");\n@@ -72,1 +72,1 @@\n-                    Arrays.toString(arg.getAnnotations()), \"[@GetAnnotatedNestedSuperclass$B()]\");\n+                    Arrays.toString(arg.getAnnotations()), \"[@GetAnnotatedNestedSuperclass.B()]\");\n@@ -77,1 +77,1 @@\n-                    Arrays.toString(arg.getAnnotations()), \"[@GetAnnotatedNestedSuperclass$C()]\");\n+                    Arrays.toString(arg.getAnnotations()), \"[@GetAnnotatedNestedSuperclass.C()]\");\n@@ -82,1 +82,1 @@\n-                    Arrays.toString(arg.getAnnotations()), \"[@GetAnnotatedNestedSuperclass$D()]\");\n+                    Arrays.toString(arg.getAnnotations()), \"[@GetAnnotatedNestedSuperclass.D()]\");\n@@ -87,1 +87,1 @@\n-                    \"[@GetAnnotatedNestedSuperclass$E()]\");\n+                    \"[@GetAnnotatedNestedSuperclass.E()]\");\n@@ -91,1 +91,1 @@\n-    private static void assertEquals(Object expected, Object actual) {\n+    private static void assertEquals(Object actual, Object expected) {\n","filename":"test\/jdk\/java\/lang\/annotation\/typeAnnotations\/GetAnnotatedNestedSuperclass.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -131,1 +131,1 @@\n-        \"@TestConstructorParameterTypeAnnotations$MarkerTypeAnnotation(1)\"})\n+        \"@TestConstructorParameterTypeAnnotations.MarkerTypeAnnotation(1)\"})\n@@ -139,1 +139,1 @@\n-        \"@TestConstructorParameterTypeAnnotations$MarkerTypeAnnotation(2)\",\n+        \"@TestConstructorParameterTypeAnnotations.MarkerTypeAnnotation(2)\",\n@@ -149,1 +149,1 @@\n-        \"@TestConstructorParameterTypeAnnotations$MarkerTypeAnnotation(3)\",\n+        \"@TestConstructorParameterTypeAnnotations.MarkerTypeAnnotation(3)\",\n@@ -159,1 +159,1 @@\n-        \"@TestConstructorParameterTypeAnnotations$MarkerTypeAnnotation(4)\",\n+        \"@TestConstructorParameterTypeAnnotations.MarkerTypeAnnotation(4)\",\n@@ -174,1 +174,1 @@\n-        \"@TestConstructorParameterTypeAnnotations$MarkerTypeAnnotation(1)\"})\n+        \"@TestConstructorParameterTypeAnnotations.MarkerTypeAnnotation(1)\"})\n@@ -181,1 +181,1 @@\n-        \"@TestConstructorParameterTypeAnnotations$MarkerTypeAnnotation(2)\",\n+        \"@TestConstructorParameterTypeAnnotations.MarkerTypeAnnotation(2)\",\n@@ -190,1 +190,1 @@\n-        \"@TestConstructorParameterTypeAnnotations$MarkerTypeAnnotation(3)\",\n+        \"@TestConstructorParameterTypeAnnotations.MarkerTypeAnnotation(3)\",\n@@ -199,1 +199,1 @@\n-        \"@TestConstructorParameterTypeAnnotations$MarkerTypeAnnotation(4)\",\n+        \"@TestConstructorParameterTypeAnnotations.MarkerTypeAnnotation(4)\",\n","filename":"test\/jdk\/java\/lang\/annotation\/typeAnnotations\/TestConstructorParameterTypeAnnotations.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -180,1 +180,1 @@\n-    private static final Pattern annotationRegex = Pattern.compile(\"@TestObjectMethods\\\\$AnnotType\\\\((\\\\p{Digit})+\\\\)\");\n+    private static final Pattern annotationRegex = Pattern.compile(\"@TestObjectMethods\\\\.AnnotType\\\\((\\\\p{Digit})+\\\\)\");\n","filename":"test\/jdk\/java\/lang\/annotation\/typeAnnotations\/TestObjectMethods.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -165,1 +165,1 @@\n-        assertEquals(annos[0].toString(), \"@RecordReflectionTest$RCA()\");\n+        assertEquals(annos[0].toString(), \"@RecordReflectionTest.RCA()\");\n@@ -184,1 +184,1 @@\n-        assertEquals(annos[0].toString(), \"@RecordReflectionTest$TYPE_USE()\");\n+        assertEquals(annos[0].toString(), \"@RecordReflectionTest.TYPE_USE()\");\n","filename":"test\/jdk\/java\/lang\/reflect\/records\/RecordReflectionTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}