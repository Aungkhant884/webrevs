{"files":[{"patch":"@@ -490,4 +490,1 @@\n-  union {\n-    char _relocbuf[_relocbuf_size];\n-    void* alignment_dummy;\n-  };\n+  alignas(void*) char _relocbuf[_relocbuf_size];\n@@ -495,2 +492,2 @@\n-  template<typename Reloc>\n-  void check_reloc_type() {\n+  template<typename Reloc, typename... Args>\n+  void emplace_relocation(const Args&... args) {\n@@ -499,5 +496,3 @@\n-  }\n-\n-  \/\/ Used to verify that the base class subobject of the object constructed\n-  \/\/ into _relocbuf is at the same address as the derived object.\n-  void check_reloc_placement(const Relocation* reloc) const {\n+    Relocation* reloc = ::new (_relocbuf) Reloc(args...);\n+    \/\/ Verify the base class subobject of the object constructed into\n+    \/\/ _relocbuf is at the same address as the derived object.\n@@ -511,3 +506,1 @@\n-    check_reloc_type<Reloc>();\n-    Relocation* copy = ::new (_relocbuf) Reloc(reloc);\n-    check_reloc_placement(copy);\n+    emplace_relocation<Reloc>(reloc);\n@@ -516,12 +509,9 @@\n-  \/\/ Support for construct().\n-  \/\/ ctor is a function object of one argument, the _relocbuf.  It should\n-  \/\/ construct a relocation object in the given buffer and return a pointer to\n-  \/\/ that new relocation object.\n-  struct Construct {};          \/\/ Tag for selecting this constructor.\n-  template<typename C> RelocationHolder(Construct, C ctor) {\n-    using RelocPtr = decltype(ctor(_relocbuf));\n-    static_assert(std::is_pointer<RelocPtr>::value, \"expected relocation pointer\");\n-    using Reloc = std::remove_pointer_t<RelocPtr>;\n-    check_reloc_type<Reloc>();\n-    Relocation* reloc = ctor(_relocbuf);\n-    check_reloc_placement(reloc);\n+  \/\/ Tag for selecting the constructor below and carrying the type of the\n+  \/\/ relocation object the new holder will (initially) contain.\n+  template<typename Reloc> struct Construct {};\n+\n+  \/\/ Constructor used by construct().  Constructs a new holder containing a\n+  \/\/ relocation of type Reloc that is constructed using the provided args.\n+  template<typename Reloc, typename... Args>\n+  RelocationHolder(Construct<Reloc>, const Args&... args) {\n+    emplace_relocation<Reloc>(args...);\n@@ -537,2 +527,2 @@\n-  \/\/ Return a holder containing a relocation of type T, constructed using args.\n-  template<typename T, typename... Args>\n+  \/\/ Return a holder containing a relocation of type Reloc, constructed using args.\n+  template<typename Reloc, typename... Args>\n@@ -540,4 +530,1 @@\n-    return RelocationHolder(Construct(),\n-                            [&] (void* p) {\n-                              return ::new (p) T(args...);\n-                            });\n+    return RelocationHolder(Construct<Reloc>(), args...);\n@@ -891,1 +878,1 @@\n-  RelocationHolder(Construct(), [&] (void* p) { return ::new (p) Relocation(); })\n+  RelocationHolder(Construct<Relocation>())\n","filename":"src\/hotspot\/share\/code\/relocInfo.hpp","additions":20,"deletions":33,"binary":false,"changes":53,"status":"modified"}]}