{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -332,1 +332,2 @@\n-        sign(params);\n+\n+        doSigning(params);\n@@ -358,1 +359,3 @@\n-    private void sign(Map<String, ? super Object> params) throws IOException {\n+    private void doSigning(Map<String, ? super Object> params)\n+            throws IOException {\n+\n@@ -374,0 +377,6 @@\n+        } else if (Platform.isArmMac()) {\n+            signAppBundle(params, root, \"-\", null, null);\n+        } else {\n+            \/\/ Calling signAppBundle() without signingIdentity will result in\n+            \/\/ unsigning app bundle\n+            signAppBundle(params, root, null, null, null);\n@@ -651,1 +660,34 @@\n-    static void signAppBundle(\n+    private static List<String> getCodesignArgs(\n+            boolean force, Path path, String signingIdentity,\n+            String identifierPrefix, Path entitlements, String keyChain) {\n+        List<String> args = new ArrayList<>();\n+        args.addAll(Arrays.asList(\"\/usr\/bin\/codesign\",\n+                    \"-s\", signingIdentity,\n+                    \"-vvvv\"));\n+\n+        if (!signingIdentity.equals(\"-\")) {\n+            args.addAll(Arrays.asList(\"--timestamp\",\n+                    \"--options\", \"runtime\",\n+                    \"--prefix\", identifierPrefix));\n+            if (keyChain != null && !keyChain.isEmpty()) {\n+                args.add(\"--keychain\");\n+                args.add(keyChain);\n+            }\n+            if (Files.isExecutable(path)) {\n+                if (entitlements != null) {\n+                    args.add(\"--entitlements\");\n+                    args.add(entitlements.toString());\n+                }\n+            }\n+        }\n+\n+        if (force) {\n+            args.add(\"--force\");\n+        }\n+\n+        args.add(path.toString());\n+\n+        return args;\n+    }\n+\n+    private static void signAppBundle(\n@@ -663,2 +705,2 @@\n-                    Set<PosixFilePermission> pfp =\n-                            Files.getPosixFilePermissions(path);\n+                    Set<PosixFilePermission> pfp\n+                            = Files.getPosixFilePermissions(path);\n@@ -673,5 +715,5 @@\n-            }).filter(p -> Files.isRegularFile(p) &&\n-                      (Files.isExecutable(p) || p.toString().endsWith(\".dylib\"))\n-                      && !(p.toString().contains(\"dylib.dSYM\/Contents\"))\n-                      && !(p.toString().endsWith(appExecutable))\n-                     ).forEach(p -> {\n+            }).filter(p -> Files.isRegularFile(p)\n+                    && (Files.isExecutable(p) || p.toString().endsWith(\".dylib\"))\n+                    && !(p.toString().contains(\"dylib.dSYM\/Contents\"))\n+                    && !(p.toString().endsWith(appExecutable))\n+            ).forEach(p -> {\n@@ -679,1 +721,3 @@\n-                if (toThrow.get() != null) return;\n+                if (toThrow.get() != null) {\n+                    return;\n+                }\n@@ -698,1 +742,1 @@\n-                        Files.setPosixFilePermissions(p,oldPermissions);\n+                        Files.setPosixFilePermissions(p, oldPermissions);\n@@ -704,15 +748,16 @@\n-                    args = new ArrayList<>();\n-                    args.addAll(Arrays.asList(\"\/usr\/bin\/codesign\",\n-                            \"--timestamp\",\n-                            \"--options\", \"runtime\",\n-                            \"-s\", signingIdentity,\n-                            \"--prefix\", identifierPrefix,\n-                            \"-vvvv\"));\n-                    if (keyChain != null && !keyChain.isEmpty()) {\n-                        args.add(\"--keychain\");\n-                        args.add(keyChain);\n-                    }\n-                    if (Files.isExecutable(p)) {\n-                        if (entitlements != null) {\n-                            args.add(\"--entitlements\");\n-                            args.add(entitlements.toString());\n+\n+                    \/\/ Sign only if we have identity\n+                    if (signingIdentity != null) {\n+                        args = getCodesignArgs(false, p, signingIdentity,\n+                                identifierPrefix, entitlements, keyChain);\n+                        try {\n+                            Set<PosixFilePermission> oldPermissions\n+                                    = Files.getPosixFilePermissions(p);\n+                            p.toFile().setWritable(true, true);\n+                            ProcessBuilder pb = new ProcessBuilder(args);\n+                            \/\/ run quietly\n+                            IOUtils.exec(pb, false, null, false,\n+                                    Executor.INFINITE_TIMEOUT, true);\n+                            Files.setPosixFilePermissions(p, oldPermissions);\n+                        } catch (IOException ioe) {\n+                            toThrow.set(ioe);\n@@ -721,13 +766,0 @@\n-                    args.add(p.toString());\n-                    try {\n-                        Set<PosixFilePermission> oldPermissions =\n-                                Files.getPosixFilePermissions(p);\n-                        p.toFile().setWritable(true, true);\n-                        ProcessBuilder pb = new ProcessBuilder(args);\n-                        \/\/ run quietly\n-                        IOUtils.exec(pb, false, null, false,\n-                                Executor.INFINITE_TIMEOUT, true);\n-                        Files.setPosixFilePermissions(p, oldPermissions);\n-                    } catch (IOException ioe) {\n-                        toThrow.set(ioe);\n-                    }\n@@ -742,0 +774,5 @@\n+        \/\/ We cannot continue signing without identity\n+        if (signingIdentity == null) {\n+            return;\n+        }\n+\n@@ -748,19 +785,2 @@\n-                List<String> args = new ArrayList<>();\n-                args.addAll(Arrays.asList(\"\/usr\/bin\/codesign\",\n-                        \"--timestamp\",\n-                        \"--options\", \"runtime\",\n-                        \"--force\",\n-                        \"-s\", signingIdentity, \/\/ sign with this key\n-                        \"--prefix\", identifierPrefix,\n-                        \/\/ use the identifier as a prefix\n-                        \"-vvvv\"));\n-\n-                if (keyChain != null && !keyChain.isEmpty()) {\n-                    args.add(\"--keychain\");\n-                    args.add(keyChain);\n-                }\n-                if (entitlements != null) {\n-                    args.add(\"--entitlements\");\n-                    args.add(entitlements.toString());\n-                }\n-                args.add(path.toString());\n+                List<String> args = getCodesignArgs(true, path, signingIdentity,\n+                            identifierPrefix, entitlements, keyChain);\n@@ -797,23 +817,4 @@\n-        List<String> args = new ArrayList<>();\n-        args.addAll(Arrays.asList(\"\/usr\/bin\/codesign\",\n-                \"--timestamp\",\n-                \"--options\", \"runtime\",\n-                \"--force\",\n-                \"-s\", signingIdentity,\n-                \"--prefix\", identifierPrefix,\n-                \"-vvvv\"));\n-\n-        if (keyChain != null && !keyChain.isEmpty()) {\n-            args.add(\"--keychain\");\n-            args.add(keyChain);\n-        }\n-\n-        if (entitlements != null) {\n-            args.add(\"--entitlements\");\n-            args.add(entitlements.toString());\n-        }\n-\n-        args.add(appLocation.toString());\n-\n-        ProcessBuilder pb =\n-                new ProcessBuilder(args.toArray(new String[args.size()]));\n+        List<String> args = getCodesignArgs(true, appLocation, signingIdentity,\n+                            identifierPrefix, entitlements, keyChain);\n+        ProcessBuilder pb\n+                = new ProcessBuilder(args.toArray(new String[args.size()]));\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacAppImageBuilder.java","additions":84,"deletions":83,"binary":false,"changes":167,"status":"modified"},{"patch":"@@ -181,0 +181,4 @@\n+    public static boolean isArmMac() {\n+        return (isOSX() && \"aarch64\".equals(System.getProperty(\"os.arch\")));\n+    }\n+\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/TKit.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,2 @@\n+import java.util.List;\n+\n@@ -27,0 +29,1 @@\n+import jdk.jpackage.test.Annotations.Parameter;\n@@ -62,1 +65,3 @@\n-    public static void test() throws Exception {\n+    @Parameter(\"true\")\n+    @Parameter(\"false\")\n+    public void test(boolean doSign) throws Exception {\n@@ -66,4 +71,5 @@\n-        cmd.addArguments(\"--mac-sign\", \"--mac-signing-key-user-name\",\n-                SigningBase.DEV_NAME, \"--mac-signing-keychain\",\n-                SigningBase.KEYCHAIN);\n-\n+        if (doSign) {\n+            cmd.addArguments(\"--mac-sign\", \"--mac-signing-key-user-name\",\n+                    SigningBase.DEV_NAME, \"--mac-signing-keychain\",\n+                    SigningBase.KEYCHAIN);\n+        }\n@@ -75,1 +81,1 @@\n-        SigningBase.verifyCodesign(launcherPath, true);\n+        SigningBase.verifyCodesign(launcherPath, doSign);\n@@ -78,1 +84,1 @@\n-        SigningBase.verifyCodesign(testALPath, true);\n+        SigningBase.verifyCodesign(testALPath, doSign);\n@@ -81,2 +87,4 @@\n-        SigningBase.verifyCodesign(appImage, true);\n-        SigningBase.verifySpctl(appImage, \"exec\");\n+        SigningBase.verifyCodesign(appImage, doSign);\n+        if (doSign) {\n+            SigningBase.verifySpctl(appImage, \"exec\");\n+        }\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningAppImageTest.java","additions":18,"deletions":10,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -102,1 +102,3 @@\n-            .setExpectedExitCode(testPathArgs.contains(TEST_BAD) ? 1 : 0)\n+            \/\/ On macOS aarch64 we always signing app image and signing will fail, since\n+            \/\/ test produces invalid app bundle.\n+            .setExpectedExitCode(testPathArgs.contains(TEST_BAD) || TKit.isArmMac() ? 1 : 0)\n","filename":"test\/jdk\/tools\/jpackage\/share\/AppContentTest.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}