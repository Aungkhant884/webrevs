{"files":[{"patch":"@@ -362,3 +362,0 @@\n-        \/\/ signing or not, unsign first ...\n-        unsignAppBundle(params, root);\n-\n@@ -381,1 +378,5 @@\n-            signAdHocAppBundle(params, root);\n+            signAppBundle(params, root, \"-\", null, null);\n+        } else {\n+            \/\/ Calling signAppBundle() without signingIdentity will result in\n+            \/\/ unsigning app bundle\n+            signAppBundle(params, root, null, null, null);\n@@ -659,162 +660,17 @@\n-    private static void unsignAppBundle(Map<String, ? super Object> params,\n-            Path appLocation) throws IOException {\n-\n-        \/\/ unsign all dylibs and executables\n-        try (Stream<Path> stream = Files.walk(appLocation)) {\n-            stream.peek(path -> { \/\/ fix permissions\n-                try {\n-                    Set<PosixFilePermission> pfp =\n-                            Files.getPosixFilePermissions(path);\n-                    if (!pfp.contains(PosixFilePermission.OWNER_WRITE)) {\n-                        pfp = EnumSet.copyOf(pfp);\n-                        pfp.add(PosixFilePermission.OWNER_WRITE);\n-                        Files.setPosixFilePermissions(path, pfp);\n-                    }\n-                } catch (IOException e) {\n-                    Log.verbose(e);\n-                }\n-            }).filter(p -> Files.isRegularFile(p) &&\n-                      (Files.isExecutable(p) || p.toString().endsWith(\".dylib\"))\n-                      && !(p.toString().contains(\"dylib.dSYM\/Contents\"))\n-                     ).forEach(p -> {\n-                \/\/ If p is a symlink then skip.\n-                if (Files.isSymbolicLink(p)) {\n-                    Log.verbose(MessageFormat.format(I18N.getString(\n-                            \"message.ignoring.symlink\"), p.toString()));\n-                } else {\n-                    String launcherName = getLauncherName(params);\n-                    if (launcherName != null) {\n-                        if (p.toString().endsWith(launcherName)) {\n-                            return;\n-                        }\n-                    }\n-                    List<String> args = new ArrayList<>();\n-                    args.addAll(Arrays.asList(\"\/usr\/bin\/codesign\",\n-                            \"--remove-signature\", p.toString()));\n-                    try {\n-                        Set<PosixFilePermission> oldPermissions =\n-                                Files.getPosixFilePermissions(p);\n-                        p.toFile().setWritable(true, true);\n-                        ProcessBuilder pb = new ProcessBuilder(args);\n-                        IOUtils.exec(pb);\n-                        Files.setPosixFilePermissions(p,oldPermissions);\n-                    } catch (IOException ioe) {\n-                        Log.verbose(ioe);\n-                        return;\n-                    }\n-                }\n-            });\n-        }\n-    }\n-\n-    private static void signAppBundle(\n-            Map<String, ? super Object> params, Path appLocation,\n-            String signingIdentity, String identifierPrefix, Path entitlements)\n-            throws IOException {\n-        AtomicReference<IOException> toThrow = new AtomicReference<>();\n-        String appExecutable = \"\/Contents\/MacOS\/\" + APP_NAME.fetchFrom(params);\n-        String keyChain = SIGNING_KEYCHAIN.fetchFrom(params);\n-\n-        \/\/ sign all dylibs and executables\n-        try (Stream<Path> stream = Files.walk(appLocation)) {\n-            stream.peek(path -> { \/\/ fix permissions\n-                try {\n-                    Set<PosixFilePermission> pfp =\n-                            Files.getPosixFilePermissions(path);\n-                    if (!pfp.contains(PosixFilePermission.OWNER_WRITE)) {\n-                        pfp = EnumSet.copyOf(pfp);\n-                        pfp.add(PosixFilePermission.OWNER_WRITE);\n-                        Files.setPosixFilePermissions(path, pfp);\n-                    }\n-                } catch (IOException e) {\n-                    Log.verbose(e);\n-                }\n-            }).filter(p -> Files.isRegularFile(p) &&\n-                      (Files.isExecutable(p) || p.toString().endsWith(\".dylib\"))\n-                      && !(p.toString().contains(\"dylib.dSYM\/Contents\"))\n-                      && !(p.toString().endsWith(appExecutable))\n-                     ).forEach(p -> {\n-                \/\/ noinspection ThrowableResultOfMethodCallIgnored\n-                if (toThrow.get() != null) return;\n-\n-                \/\/ If p is a symlink then skip the signing process.\n-                if (Files.isSymbolicLink(p)) {\n-                    Log.verbose(MessageFormat.format(I18N.getString(\n-                            \"message.ignoring.symlink\"), p.toString()));\n-                } else {\n-                    \/\/ unsign everything before signing\n-                    List<String> args = new ArrayList<>();\n-                    args.addAll(Arrays.asList(\"\/usr\/bin\/codesign\",\n-                            \"--remove-signature\", p.toString()));\n-                    try {\n-                        Set<PosixFilePermission> oldPermissions =\n-                                Files.getPosixFilePermissions(p);\n-                        p.toFile().setWritable(true, true);\n-                        ProcessBuilder pb = new ProcessBuilder(args);\n-                        \/\/ run quietly\n-                        IOUtils.exec(pb, false, null, false,\n-                                Executor.INFINITE_TIMEOUT, true);\n-                        Files.setPosixFilePermissions(p,oldPermissions);\n-                    } catch (IOException ioe) {\n-                        Log.verbose(ioe);\n-                        toThrow.set(ioe);\n-                        return;\n-                    }\n-                    args = new ArrayList<>();\n-                    args.addAll(Arrays.asList(\"\/usr\/bin\/codesign\",\n-                            \"--timestamp\",\n-                            \"--options\", \"runtime\",\n-                            \"-s\", signingIdentity,\n-                            \"--prefix\", identifierPrefix,\n-                            \"-vvvv\"));\n-                    if (keyChain != null && !keyChain.isEmpty()) {\n-                        args.add(\"--keychain\");\n-                        args.add(keyChain);\n-                    }\n-                    if (Files.isExecutable(p)) {\n-                        if (entitlements != null) {\n-                            args.add(\"--entitlements\");\n-                            args.add(entitlements.toString());\n-                        }\n-                    }\n-                    args.add(p.toString());\n-                    try {\n-                        Set<PosixFilePermission> oldPermissions =\n-                                Files.getPosixFilePermissions(p);\n-                        p.toFile().setWritable(true, true);\n-                        ProcessBuilder pb = new ProcessBuilder(args);\n-                        \/\/ run quietly\n-                        IOUtils.exec(pb, false, null, false,\n-                                Executor.INFINITE_TIMEOUT, true);\n-                        Files.setPosixFilePermissions(p, oldPermissions);\n-                    } catch (IOException ioe) {\n-                        toThrow.set(ioe);\n-                    }\n-                }\n-            });\n-        }\n-        IOException ioe = toThrow.get();\n-        if (ioe != null) {\n-            throw ioe;\n-        }\n-\n-        \/\/ sign all runtime and frameworks\n-        Consumer<? super Path> signIdentifiedByPList = path -> {\n-            \/\/noinspection ThrowableResultOfMethodCallIgnored\n-            if (toThrow.get() != null) return;\n-\n-            try {\n-                List<String> args = new ArrayList<>();\n-                args.addAll(Arrays.asList(\"\/usr\/bin\/codesign\",\n-                        \"--timestamp\",\n-                        \"--options\", \"runtime\",\n-                        \"--force\",\n-                        \"-s\", signingIdentity, \/\/ sign with this key\n-                        \"--prefix\", identifierPrefix,\n-                        \/\/ use the identifier as a prefix\n-                        \"-vvvv\"));\n-\n-                if (keyChain != null && !keyChain.isEmpty()) {\n-                    args.add(\"--keychain\");\n-                    args.add(keyChain);\n-                }\n+    private static List<String> getCodesignArgs(\n+            boolean force, Path path, String signingIdentity,\n+            String identifierPrefix, Path entitlements, String keyChain) {\n+        List<String> args = new ArrayList<>();\n+        args.addAll(Arrays.asList(\"\/usr\/bin\/codesign\",\n+                    \"-s\", signingIdentity,\n+                    \"-vvvv\"));\n+\n+        if (!signingIdentity.equals(\"-\")) {\n+            args.addAll(Arrays.asList(\"--timestamp\",\n+                    \"--options\", \"runtime\",\n+                    \"--prefix\", identifierPrefix));\n+            if (keyChain != null && !keyChain.isEmpty()) {\n+                args.add(\"--keychain\");\n+                args.add(keyChain);\n+            }\n+            if (Files.isExecutable(path)) {\n@@ -825,27 +681,0 @@\n-                args.add(path.toString());\n-                ProcessBuilder pb = new ProcessBuilder(args);\n-\n-                IOUtils.exec(pb);\n-            } catch (IOException e) {\n-                toThrow.set(e);\n-            }\n-        };\n-\n-        Path javaPath = appLocation.resolve(\"Contents\/runtime\");\n-        if (Files.isDirectory(javaPath)) {\n-            signIdentifiedByPList.accept(javaPath);\n-\n-            ioe = toThrow.get();\n-            if (ioe != null) {\n-                throw ioe;\n-            }\n-        }\n-        Path frameworkPath = appLocation.resolve(\"Contents\/Frameworks\");\n-        if (Files.isDirectory(frameworkPath)) {\n-            try (var fileList = Files.list(frameworkPath)) {\n-                fileList.forEach(signIdentifiedByPList);\n-            }\n-\n-            ioe = toThrow.get();\n-            if (ioe != null) {\n-                throw ioe;\n@@ -855,13 +684,2 @@\n-        \/\/ sign the app itself\n-        List<String> args = new ArrayList<>();\n-        args.addAll(Arrays.asList(\"\/usr\/bin\/codesign\",\n-                \"--timestamp\",\n-                \"--options\", \"runtime\",\n-                \"--force\",\n-                \"-s\", signingIdentity,\n-                \"--prefix\", identifierPrefix,\n-                \"-vvvv\"));\n-\n-        if (keyChain != null && !keyChain.isEmpty()) {\n-            args.add(\"--keychain\");\n-            args.add(keyChain);\n+        if (force) {\n+            args.add(\"--force\");\n@@ -870,9 +688,1 @@\n-        if (entitlements != null) {\n-            args.add(\"--entitlements\");\n-            args.add(entitlements.toString());\n-        }\n-\n-        args.add(appLocation.toString());\n-\n-        ProcessBuilder pb =\n-                new ProcessBuilder(args.toArray(new String[args.size()]));\n+        args.add(path.toString());\n@@ -880,1 +690,1 @@\n-        IOUtils.exec(pb);\n+        return args;\n@@ -883,2 +693,3 @@\n-    private static void signAdHocAppBundle(\n-            Map<String, ? super Object> params, Path appLocation)\n+    private static void signAppBundle(\n+            Map<String, ? super Object> params, Path appLocation,\n+            String signingIdentity, String identifierPrefix, Path entitlements)\n@@ -888,0 +699,1 @@\n+        String keyChain = SIGNING_KEYCHAIN.fetchFrom(params);\n@@ -893,2 +705,2 @@\n-                    Set<PosixFilePermission> pfp =\n-                            Files.getPosixFilePermissions(path);\n+                    Set<PosixFilePermission> pfp\n+                            = Files.getPosixFilePermissions(path);\n@@ -903,5 +715,5 @@\n-            }).filter(p -> Files.isRegularFile(p) &&\n-                      (Files.isExecutable(p) || p.toString().endsWith(\".dylib\"))\n-                      && !(p.toString().contains(\"dylib.dSYM\/Contents\"))\n-                      && !(p.toString().endsWith(appExecutable))\n-                     ).forEach(p -> {\n+            }).filter(p -> Files.isRegularFile(p)\n+                    && (Files.isExecutable(p) || p.toString().endsWith(\".dylib\"))\n+                    && !(p.toString().contains(\"dylib.dSYM\/Contents\"))\n+                    && !(p.toString().endsWith(appExecutable))\n+            ).forEach(p -> {\n@@ -909,1 +721,3 @@\n-                if (toThrow.get() != null) return;\n+                if (toThrow.get() != null) {\n+                    return;\n+                }\n@@ -928,1 +742,1 @@\n-                        Files.setPosixFilePermissions(p,oldPermissions);\n+                        Files.setPosixFilePermissions(p, oldPermissions);\n@@ -934,5 +748,0 @@\n-                    args = new ArrayList<>();\n-                    args.addAll(Arrays.asList(\"\/usr\/bin\/codesign\",\n-                            \"-s\", \"-\",\n-                            \"-vvvv\",\n-                            p.toString()));\n@@ -940,11 +749,16 @@\n-                    try {\n-                        Set<PosixFilePermission> oldPermissions =\n-                                Files.getPosixFilePermissions(p);\n-                        p.toFile().setWritable(true, true);\n-                        ProcessBuilder pb = new ProcessBuilder(args);\n-                        \/\/ run quietly\n-                        IOUtils.exec(pb, false, null, false,\n-                                Executor.INFINITE_TIMEOUT, true);\n-                        Files.setPosixFilePermissions(p, oldPermissions);\n-                    } catch (IOException ioe) {\n-                        toThrow.set(ioe);\n+                    \/\/ Sign only if we have identity\n+                    if (signingIdentity != null) {\n+                        args = getCodesignArgs(false, p, signingIdentity,\n+                                identifierPrefix, entitlements, keyChain);\n+                        try {\n+                            Set<PosixFilePermission> oldPermissions\n+                                    = Files.getPosixFilePermissions(p);\n+                            p.toFile().setWritable(true, true);\n+                            ProcessBuilder pb = new ProcessBuilder(args);\n+                            \/\/ run quietly\n+                            IOUtils.exec(pb, false, null, false,\n+                                    Executor.INFINITE_TIMEOUT, true);\n+                            Files.setPosixFilePermissions(p, oldPermissions);\n+                        } catch (IOException ioe) {\n+                            toThrow.set(ioe);\n+                        }\n@@ -960,0 +774,5 @@\n+        \/\/ We cannot continue signing without identity\n+        if (signingIdentity == null) {\n+            return;\n+        }\n+\n@@ -966,6 +785,2 @@\n-                List<String> args = new ArrayList<>();\n-                args.addAll(Arrays.asList(\"\/usr\/bin\/codesign\",\n-                        \"--force\",\n-                        \"-s\", \"-\",\n-                        \"-vvvv\",\n-                        path.toString()));\n+                List<String> args = getCodesignArgs(true, path, signingIdentity,\n+                            identifierPrefix, entitlements, keyChain);\n@@ -1002,9 +817,4 @@\n-        List<String> args = new ArrayList<>();\n-        args.addAll(Arrays.asList(\"\/usr\/bin\/codesign\",\n-                \"--force\",\n-                \"-s\", \"-\",\n-                \"-vvvv\",\n-                appLocation.toString()));\n-\n-        ProcessBuilder pb =\n-                new ProcessBuilder(args.toArray(new String[args.size()]));\n+        List<String> args = getCodesignArgs(true, appLocation, signingIdentity,\n+                            identifierPrefix, entitlements, keyChain);\n+        ProcessBuilder pb\n+                = new ProcessBuilder(args.toArray(new String[args.size()]));\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacAppImageBuilder.java","additions":68,"deletions":258,"binary":false,"changes":326,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import jdk.jpackage.test.Annotations.Parameters;\n+import jdk.jpackage.test.Annotations.Parameter;\n@@ -64,11 +64,0 @@\n-    final boolean doSign;\n-\n-    public SigningAppImageTest(String flag) {\n-        this.doSign = \"true\".equals(flag);\n-    }\n-\n-    @Parameters\n-    public static List<Object[]> data() {\n-        return List.of(new Object[][] {{\"true\"}, {\"false\"}});\n-    }\n-\n@@ -76,1 +65,3 @@\n-    public void test() throws Exception {\n+    @Parameter(\"true\")\n+    @Parameter(\"false\")\n+    public void test(boolean doSign) throws Exception {\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningAppImageTest.java","additions":4,"deletions":13,"binary":false,"changes":17,"status":"modified"}]}