{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -332,1 +332,2 @@\n-        sign(params);\n+\n+        doSigning(params);\n@@ -358,1 +359,6 @@\n-    private void sign(Map<String, ? super Object> params) throws IOException {\n+    private void doSigning(Map<String, ? super Object> params)\n+            throws IOException {\n+\n+        \/\/ signing or not, unsign first ...\n+        unsignAppBundle(params, root);\n+\n@@ -374,0 +380,2 @@\n+        } else if (Platform.isArmMac()) {\n+            signAdHocAppBundle(params, root);\n@@ -651,1 +659,52 @@\n-    static void signAppBundle(\n+    private static void unsignAppBundle(Map<String, ? super Object> params,\n+            Path appLocation) throws IOException {\n+\n+        \/\/ unsign all dylibs and executables\n+        try (Stream<Path> stream = Files.walk(appLocation)) {\n+            stream.peek(path -> { \/\/ fix permissions\n+                try {\n+                    Set<PosixFilePermission> pfp =\n+                            Files.getPosixFilePermissions(path);\n+                    if (!pfp.contains(PosixFilePermission.OWNER_WRITE)) {\n+                        pfp = EnumSet.copyOf(pfp);\n+                        pfp.add(PosixFilePermission.OWNER_WRITE);\n+                        Files.setPosixFilePermissions(path, pfp);\n+                    }\n+                } catch (IOException e) {\n+                    Log.verbose(e);\n+                }\n+            }).filter(p -> Files.isRegularFile(p) &&\n+                      (Files.isExecutable(p) || p.toString().endsWith(\".dylib\"))\n+                      && !(p.toString().contains(\"dylib.dSYM\/Contents\"))\n+                     ).forEach(p -> {\n+                \/\/ If p is a symlink then skip.\n+                if (Files.isSymbolicLink(p)) {\n+                    Log.verbose(MessageFormat.format(I18N.getString(\n+                            \"message.ignoring.symlink\"), p.toString()));\n+                } else {\n+                    String launcherName = getLauncherName(params);\n+                    if (launcherName != null) {\n+                        if (p.toString().endsWith(launcherName)) {\n+                            return;\n+                        }\n+                    }\n+                    List<String> args = new ArrayList<>();\n+                    args.addAll(Arrays.asList(\"\/usr\/bin\/codesign\",\n+                            \"--remove-signature\", p.toString()));\n+                    try {\n+                        Set<PosixFilePermission> oldPermissions =\n+                                Files.getPosixFilePermissions(p);\n+                        p.toFile().setWritable(true, true);\n+                        ProcessBuilder pb = new ProcessBuilder(args);\n+                        IOUtils.exec(pb);\n+                        Files.setPosixFilePermissions(p,oldPermissions);\n+                    } catch (IOException ioe) {\n+                        Log.verbose(ioe);\n+                        return;\n+                    }\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void signAppBundle(\n@@ -824,0 +883,132 @@\n+    private static void signAdHocAppBundle(\n+            Map<String, ? super Object> params, Path appLocation)\n+            throws IOException {\n+        AtomicReference<IOException> toThrow = new AtomicReference<>();\n+        String appExecutable = \"\/Contents\/MacOS\/\" + APP_NAME.fetchFrom(params);\n+\n+        \/\/ sign all dylibs and executables\n+        try (Stream<Path> stream = Files.walk(appLocation)) {\n+            stream.peek(path -> { \/\/ fix permissions\n+                try {\n+                    Set<PosixFilePermission> pfp =\n+                            Files.getPosixFilePermissions(path);\n+                    if (!pfp.contains(PosixFilePermission.OWNER_WRITE)) {\n+                        pfp = EnumSet.copyOf(pfp);\n+                        pfp.add(PosixFilePermission.OWNER_WRITE);\n+                        Files.setPosixFilePermissions(path, pfp);\n+                    }\n+                } catch (IOException e) {\n+                    Log.verbose(e);\n+                }\n+            }).filter(p -> Files.isRegularFile(p) &&\n+                      (Files.isExecutable(p) || p.toString().endsWith(\".dylib\"))\n+                      && !(p.toString().contains(\"dylib.dSYM\/Contents\"))\n+                      && !(p.toString().endsWith(appExecutable))\n+                     ).forEach(p -> {\n+                \/\/ noinspection ThrowableResultOfMethodCallIgnored\n+                if (toThrow.get() != null) return;\n+\n+                \/\/ If p is a symlink then skip the signing process.\n+                if (Files.isSymbolicLink(p)) {\n+                    Log.verbose(MessageFormat.format(I18N.getString(\n+                            \"message.ignoring.symlink\"), p.toString()));\n+                } else {\n+                    \/\/ unsign everything before signing\n+                    List<String> args = new ArrayList<>();\n+                    args.addAll(Arrays.asList(\"\/usr\/bin\/codesign\",\n+                            \"--remove-signature\", p.toString()));\n+                    try {\n+                        Set<PosixFilePermission> oldPermissions =\n+                                Files.getPosixFilePermissions(p);\n+                        p.toFile().setWritable(true, true);\n+                        ProcessBuilder pb = new ProcessBuilder(args);\n+                        \/\/ run quietly\n+                        IOUtils.exec(pb, false, null, false,\n+                                Executor.INFINITE_TIMEOUT, true);\n+                        Files.setPosixFilePermissions(p,oldPermissions);\n+                    } catch (IOException ioe) {\n+                        Log.verbose(ioe);\n+                        toThrow.set(ioe);\n+                        return;\n+                    }\n+                    args = new ArrayList<>();\n+                    args.addAll(Arrays.asList(\"\/usr\/bin\/codesign\",\n+                            \"-s\", \"-\",\n+                            \"-vvvv\",\n+                            p.toString()));\n+\n+                    try {\n+                        Set<PosixFilePermission> oldPermissions =\n+                                Files.getPosixFilePermissions(p);\n+                        p.toFile().setWritable(true, true);\n+                        ProcessBuilder pb = new ProcessBuilder(args);\n+                        \/\/ run quietly\n+                        IOUtils.exec(pb, false, null, false,\n+                                Executor.INFINITE_TIMEOUT, true);\n+                        Files.setPosixFilePermissions(p, oldPermissions);\n+                    } catch (IOException ioe) {\n+                        toThrow.set(ioe);\n+                    }\n+                }\n+            });\n+        }\n+        IOException ioe = toThrow.get();\n+        if (ioe != null) {\n+            throw ioe;\n+        }\n+\n+        \/\/ sign all runtime and frameworks\n+        Consumer<? super Path> signIdentifiedByPList = path -> {\n+            \/\/noinspection ThrowableResultOfMethodCallIgnored\n+            if (toThrow.get() != null) return;\n+\n+            try {\n+                List<String> args = new ArrayList<>();\n+                args.addAll(Arrays.asList(\"\/usr\/bin\/codesign\",\n+                        \"--force\",\n+                        \"-s\", \"-\",\n+                        \"-vvvv\",\n+                        path.toString()));\n+                ProcessBuilder pb = new ProcessBuilder(args);\n+\n+                IOUtils.exec(pb);\n+            } catch (IOException e) {\n+                toThrow.set(e);\n+            }\n+        };\n+\n+        Path javaPath = appLocation.resolve(\"Contents\/runtime\");\n+        if (Files.isDirectory(javaPath)) {\n+            signIdentifiedByPList.accept(javaPath);\n+\n+            ioe = toThrow.get();\n+            if (ioe != null) {\n+                throw ioe;\n+            }\n+        }\n+        Path frameworkPath = appLocation.resolve(\"Contents\/Frameworks\");\n+        if (Files.isDirectory(frameworkPath)) {\n+            try (var fileList = Files.list(frameworkPath)) {\n+                fileList.forEach(signIdentifiedByPList);\n+            }\n+\n+            ioe = toThrow.get();\n+            if (ioe != null) {\n+                throw ioe;\n+            }\n+        }\n+\n+        \/\/ sign the app itself\n+        List<String> args = new ArrayList<>();\n+        args.addAll(Arrays.asList(\"\/usr\/bin\/codesign\",\n+                \"--force\",\n+                \"-s\", \"-\",\n+                \"-vvvv\",\n+                appLocation.toString()));\n+\n+        ProcessBuilder pb =\n+                new ProcessBuilder(args.toArray(new String[args.size()]));\n+\n+        IOUtils.exec(pb);\n+    }\n+\n","filename":"src\/jdk.jpackage\/macosx\/classes\/jdk\/jpackage\/internal\/MacAppImageBuilder.java","additions":195,"deletions":4,"binary":false,"changes":199,"status":"modified"},{"patch":"@@ -181,0 +181,4 @@\n+    public static boolean isArmMac() {\n+        return (isOSX() && \"aarch64\".equals(System.getProperty(\"os.arch\")));\n+    }\n+\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/TKit.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,2 @@\n+import java.util.List;\n+\n@@ -27,0 +29,1 @@\n+import jdk.jpackage.test.Annotations.Parameters;\n@@ -61,0 +64,11 @@\n+    final boolean doSign;\n+\n+    public SigningAppImageTest(String flag) {\n+        this.doSign = \"true\".equals(flag);\n+    }\n+\n+    @Parameters\n+    public static List<Object[]> data() {\n+        return List.of(new Object[][] {{\"true\"}, {\"false\"}});\n+    }\n+\n@@ -62,1 +76,1 @@\n-    public static void test() throws Exception {\n+    public void test() throws Exception {\n@@ -66,4 +80,5 @@\n-        cmd.addArguments(\"--mac-sign\", \"--mac-signing-key-user-name\",\n-                SigningBase.DEV_NAME, \"--mac-signing-keychain\",\n-                SigningBase.KEYCHAIN);\n-\n+        if (doSign) {\n+            cmd.addArguments(\"--mac-sign\", \"--mac-signing-key-user-name\",\n+                    SigningBase.DEV_NAME, \"--mac-signing-keychain\",\n+                    SigningBase.KEYCHAIN);\n+        }\n@@ -75,1 +90,1 @@\n-        SigningBase.verifyCodesign(launcherPath, true);\n+        SigningBase.verifyCodesign(launcherPath, doSign);\n@@ -78,1 +93,1 @@\n-        SigningBase.verifyCodesign(testALPath, true);\n+        SigningBase.verifyCodesign(testALPath, doSign);\n@@ -81,2 +96,4 @@\n-        SigningBase.verifyCodesign(appImage, true);\n-        SigningBase.verifySpctl(appImage, \"exec\");\n+        SigningBase.verifyCodesign(appImage, doSign);\n+        if (doSign) {\n+            SigningBase.verifySpctl(appImage, \"exec\");\n+        }\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningAppImageTest.java","additions":27,"deletions":10,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -102,1 +102,3 @@\n-            .setExpectedExitCode(testPathArgs.contains(TEST_BAD) ? 1 : 0)\n+            \/\/ On macOS aarch64 we always signing app image and signing will fail, since\n+            \/\/ test produces invalid app bundle.\n+            .setExpectedExitCode(testPathArgs.contains(TEST_BAD) || TKit.isArmMac() ? 1 : 0)\n","filename":"test\/jdk\/tools\/jpackage\/share\/AppContentTest.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}