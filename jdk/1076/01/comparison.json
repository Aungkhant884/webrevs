{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,2 @@\n-import java.net.InetAddress;\n+import java.io.PrintStream;\n+import java.io.UncheckedIOException;\n@@ -29,1 +30,0 @@\n-import java.util.Enumeration;\n@@ -31,0 +31,1 @@\n+import java.util.stream.Collectors;\n@@ -32,0 +33,1 @@\n+import jdk.test.lib.NetworkConfiguration;\n@@ -37,1 +39,3 @@\n- *\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.NetworkConfiguration\n+ * @run main\/othervm UniqueMacAddressesTest\n@@ -41,0 +45,3 @@\n+    static PrintStream log = System.err;\n+    record NetIfPair(String interfaceName, byte[] address) {}\n+\n@@ -43,1 +50,1 @@\n-        System.out.println(\"UniqueMacAddressesTest: OK\");\n+        log.println(\"UniqueMacAddressesTest: OK\");\n@@ -47,1 +54,1 @@\n-        System.out.println(\"UniqueMacAddressesTest: start \");\n+        log.println(\"UniqueMacAddressesTest: start\");\n@@ -51,10 +58,4 @@\n-        Enumeration<NetworkInterface> networkInterfaces;\n-        boolean areMacAddressesUnique = false;\n-        List<NetworkInterface> networkInterfaceList = new ArrayList<NetworkInterface>();\n-            networkInterfaces = NetworkInterface.getNetworkInterfaces();\n-\n-        \/\/ build a list of NetworkInterface objects to test MAC address\n-        \/\/ uniqueness\n-        createNetworkInterfaceList(networkInterfaces, networkInterfaceList);\n-        areMacAddressesUnique = checkMacAddressesAreUnique(networkInterfaceList);\n-        if (!areMacAddressesUnique) {\n+        \/\/ build a list of NetworkInterface name address pairs\n+        \/\/ to test MAC address uniqueness\n+        List<NetIfPair> netIfList = createNetworkInterfaceList(NetworkConfiguration.probe());\n+        if (!macAddressesAreUnique(netIfList))\n@@ -62,1 +63,0 @@\n-        }\n@@ -65,12 +65,6 @@\n-    private boolean checkMacAddressesAreUnique (\n-            List<NetworkInterface> networkInterfaces) throws Exception {\n-        boolean uniqueMacAddresses = true;\n-        for (NetworkInterface networkInterface : networkInterfaces) {\n-            for (NetworkInterface comparisonNetIf : networkInterfaces) {\n-                System.out.println(\"Comparing netif \"\n-                        + networkInterface.getName() + \" and netif \"\n-                        + comparisonNetIf.getName());\n-                if (testMacAddressesEqual(networkInterface, comparisonNetIf)) {\n-                    uniqueMacAddresses = false;\n-                    break;\n-                }\n+    private boolean macAddressesAreUnique(List<NetIfPair> netIfPairs) {\n+        for (NetIfPair netIfPair : netIfPairs) {\n+            for (NetIfPair compNetIfPair : netIfPairs) {\n+                if (!netIfPair.interfaceName.equals(compNetIfPair.interfaceName) &&\n+                        testMacAddressesEqual(netIfPair, compNetIfPair))\n+                    return false;\n@@ -78,2 +72,0 @@\n-            if (uniqueMacAddresses != true)\n-                break;\n@@ -81,1 +73,1 @@\n-        return uniqueMacAddresses;\n+        return true;\n@@ -84,17 +76,5 @@\n-    private boolean testMacAddressesEqual(NetworkInterface netIf1,\n-            NetworkInterface netIf2) throws Exception {\n-\n-        byte[] rawMacAddress1 = null;\n-        byte[] rawMacAddress2 = null;\n-        boolean macAddressesEqual = false;\n-        if (!netIf1.getName().equals(netIf2.getName())) {\n-            System.out.println(\"compare hardware addresses \"\n-                +  createMacAddressString(netIf1) + \" and \" + createMacAddressString(netIf2));\n-            rawMacAddress1 = netIf1.getHardwareAddress();\n-            rawMacAddress2 = netIf2.getHardwareAddress();\n-            macAddressesEqual = Arrays.equals(rawMacAddress1, rawMacAddress2);\n-        } else {\n-            \/\/ same interface\n-            macAddressesEqual = false;\n-        }\n-        return macAddressesEqual;\n+    private boolean testMacAddressesEqual(NetIfPair if1, NetIfPair if2) {\n+        log.println(\"Compare hardware addresses of \" + if1.interfaceName + \" (\"\n+                +  createMacAddressString(if1.address) + \")\" + \" and \" + if2.interfaceName\n+                + \" (\" + createMacAddressString(if2.address) + \")\");\n+        return (Arrays.equals(if1.address, if2.address));\n@@ -103,2 +83,1 @@\n-    private String createMacAddressString (NetworkInterface netIf) throws Exception {\n-        byte[] macAddr = netIf.getHardwareAddress();\n+    private String createMacAddressString(byte[] macAddr) {\n@@ -115,15 +94,5 @@\n-    private void createNetworkInterfaceList(Enumeration<NetworkInterface> nis,\n-            List<NetworkInterface> networkInterfaceList) throws Exception {\n-        byte[] macAddr = null;\n-        NetworkInterface netIf = null;\n-        while (nis.hasMoreElements()) {\n-            netIf = (NetworkInterface) nis.nextElement();\n-            if (netIf.isUp()) {\n-                macAddr = netIf.getHardwareAddress();\n-                if (macAddr != null) {\n-                    System.out.println(\"Adding NetworkInterface \"\n-                            + netIf.getName() + \" with mac address \"\n-                            + createMacAddressString(netIf));\n-                    networkInterfaceList.add(netIf);\n-                }\n-            }\n+    private byte[] getNetworkInterfaceHardwareAddress(NetworkInterface inf) {\n+        try {\n+            return inf.getHardwareAddress();\n+        } catch (SocketException se) {\n+            throw new UncheckedIOException(se);\n@@ -132,0 +101,7 @@\n+\n+    private List<NetIfPair> createNetworkInterfaceList(NetworkConfiguration netConf) {\n+        return netConf.interfaces()\n+                .map(netIf -> new NetIfPair(netIf.getName(), getNetworkInterfaceHardwareAddress(netIf)))\n+                .collect(Collectors.filtering(netIfPair -> netIfPair.address != null,\n+                        Collectors.toCollection(ArrayList::new)));\n+    }\n","filename":"test\/jdk\/java\/net\/NetworkInterface\/UniqueMacAddressesTest.java","additions":42,"deletions":66,"binary":false,"changes":108,"status":"modified"}]}