{"files":[{"patch":"@@ -918,2 +918,0 @@\n-        if (processors != null && processors.iterator().hasNext())\n-            explicitAnnotationProcessingRequested = true;\n@@ -1146,0 +1144,3 @@\n+        if (processors != null && processors.iterator().hasNext())\n+            explicitAnnotationProcessingRequested = true;\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/JavaCompiler.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8310061\n+ * @bug 8310061 8315534\n@@ -37,4 +37,6 @@\n-import java.io.RandomAccessFile;\n-import java.nio.ByteBuffer;\n-import java.nio.channels.FileChannel;\n-import java.nio.file.Files;\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.io.StringWriter;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.charset.StandardCharsets;\n@@ -46,0 +48,5 @@\n+import javax.tools.JavaCompiler;\n+import javax.tools.JavaCompiler.CompilationTask;\n+import javax.tools.JavaFileObject;\n+import javax.tools.StandardJavaFileManager;\n+import javax.tools.ToolProvider;\n@@ -293,0 +300,85 @@\n+\n+    @Test\n+    public void processorsViaAPI(Path base, Path jarFile) throws Exception {\n+        ClassLoader cl = new URLClassLoader(new URL[] {jarFile.toUri().toURL()});\n+        Class<?> processorClass = Class.forName(processorName, true, cl);\n+        StringWriter compilerOut = new StringWriter();\n+        ByteArrayOutputStream out = new ByteArrayOutputStream();\n+        JavaCompiler provider = ToolProvider.getSystemJavaCompiler();\n+        PrintStream oldOut = System.out;\n+\n+        try (StandardJavaFileManager jfm = provider.getStandardFileManager(null, null, null)) {\n+            System.setOut(new PrintStream(out, true, StandardCharsets.UTF_8));\n+            Iterable<? extends JavaFileObject> inputFile = jfm.getJavaFileObjects(\"HelloWorldTest.java\");\n+\n+            {\n+                List<String> options = List.of(\"-classpath\", jarFile.toString(), \"-XDrawDiagnostics\");\n+                CompilationTask task = provider.getTask(compilerOut, null, null, options, null, inputFile);\n+\n+                task.call();\n+\n+                verifyMessages(out, compilerOut, true);\n+            }\n+\n+            {\n+                List<String> options = List.of(\"-classpath\", jarFile.toString(), \"-XDrawDiagnostics\");\n+                CompilationTask task = provider.getTask(compilerOut, null, null, options, null, inputFile);\n+                Processor processor =\n+                        (Processor) processorClass.getDeclaredConstructor().newInstance();\n+\n+                task.setProcessors(List.of(processor));\n+                task.call();\n+\n+                verifyMessages(out, compilerOut, false);\n+            }\n+\n+            {\n+                List<String> options = List.of(\"-classpath\", jarFile.toString(), \"-XDrawDiagnostics\");\n+                com.sun.source.util.JavacTask task =\n+                        (com.sun.source.util.JavacTask) provider.getTask(compilerOut, null, null, options, null, inputFile);\n+\n+                task.analyze();\n+\n+                verifyMessages(out, compilerOut, true);\n+            }\n+\n+            {\n+                List<String> options = List.of(\"-classpath\", jarFile.toString(), \"-XDrawDiagnostics\");\n+                com.sun.source.util.JavacTask task =\n+                        (com.sun.source.util.JavacTask) provider.getTask(compilerOut, null, null, options, null, inputFile);\n+\n+                Processor processor =\n+                        (Processor) processorClass.getDeclaredConstructor().newInstance();\n+\n+                task.setProcessors(List.of(processor));\n+                task.analyze();\n+\n+                verifyMessages(out, compilerOut, false);\n+            }\n+        } finally {\n+            System.setOut(oldOut);\n+        }\n+    }\n+\n+    private void verifyMessages(ByteArrayOutputStream out, StringWriter compilerOut, boolean expectedNotePresent) {\n+        if (!out.toString(StandardCharsets.UTF_8).contains(\"ImplicitProcTestProc run\")) {\n+            throw new RuntimeException(\"Expected processor message not printed\");\n+        }\n+\n+        out.reset();\n+\n+        boolean printed = compilerOut.toString().contains(\"- compiler.note.implicit.annotation.processing\");\n+\n+        if (!expectedNotePresent && printed) {\n+            throw new RuntimeException(\"Unexpected note printed\");\n+        }\n+\n+        if (expectedNotePresent && !printed) {\n+            throw new RuntimeException(\"Expected note not printed\");\n+        }\n+\n+        StringBuffer compilerOutData = compilerOut.getBuffer();\n+\n+        compilerOutData.delete(0, compilerOutData.length());\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/processing\/options\/TestNoteOnImplicitProcessing.java","additions":97,"deletions":5,"binary":false,"changes":102,"status":"modified"}]}