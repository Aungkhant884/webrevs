{"files":[{"patch":"@@ -48,1 +48,1 @@\n-    \/\/number of bytes to write\n+    \/\/ Number of bytes to write\/read from Deflater\/Inflater\n@@ -50,1 +50,1 @@\n-    \/\/OutputStream that will throw an exception during a write operation\n+    \/\/ OutputStream that will throw an exception during a write operation\n@@ -54,1 +54,0 @@\n-            \/\/throw exception during write\n@@ -62,1 +61,1 @@\n-    \/\/InputStream that will throw an exception during a read operation\n+    \/\/ InputStream that will throw an exception during a read operation\n@@ -66,1 +65,0 @@\n-            \/\/throw exception during read\n@@ -74,0 +72,1 @@\n+    \/\/ Input bytes for read\/write operation\n@@ -75,0 +74,1 @@\n+    \/\/ Random function to add bytes to inputBytes\n@@ -77,4 +77,7 @@\n-    @DataProvider(name = \"testgzipinput\")\n-    public Object[][] testGZipInput() {\n-     \/\/testGZip will close the GZipOutputStream using close() method when the boolean\n-     \/\/useCloseMethod is set to true and finish() method if the value is set to false\n+    \/**\n+     * DataProvider to specify whether to use close() or finish() of OutputStream\n+     *\n+     * @return Entry object indicating which method to use for closing OutputStream\n+     *\/\n+    @DataProvider\n+    public Object[][] testOutputStreams() {\n@@ -82,2 +85,2 @@\n-      { GZIPOutputStream.class, true },\n-      { GZIPOutputStream.class, false },\n+      { true },\n+      { false },\n@@ -87,24 +90,7 @@\n-    @DataProvider(name = \"testdeflateroutputstream\")\n-    public Object[][] testDeflaterOutputStream() {\n-     \/\/testDeflaterOutputStream will close the DeflaterOutputStream using close() method when the boolean\n-     \/\/useCloseMethod is set to true and finish() method if the value is set to false\n-     return new Object[][] {\n-      { DeflaterOutputStream.class, true },\n-      { DeflaterOutputStream.class, false },\n-     };\n-    }\n-\n-    @DataProvider(name = \"testinflateroutputstream\")\n-    public Object[][] testInflaterOutputStream() {\n-     \/\/testInflaterOutputStream will close the InflaterOutputStream using close() method when the boolean\n-     \/\/useCloseMethod is set to true and finish() method if the value is set to false\n-     return new Object[][] {\n-      { InflaterOutputStream.class, true },\n-      { InflaterOutputStream.class, false },\n-     };\n-    }\n-\n-    @DataProvider(name = \"testzipjarinput\")\n-    public Object[][] testZipAndJarInput() throws IOException{\n-     \/\/testZipAndJarInput will perfrom write\/closeEntry operations on\n-     \/\/JarOutputStream and ZipOutputStream\n+    \/**\n+     * DataProvider to specify on which outputstream closeEntry() has to be called\n+     *\n+     * @return Entry object returning either JarOutputStream or ZipOutputStream\n+     *\/\n+    @DataProvider\n+    public Object[][] testZipAndJar() throws IOException{\n@@ -117,0 +103,3 @@\n+    \/**\n+     * Add inputBytes array with random bytes to write into OutputStream\n+     *\/\n@@ -120,1 +109,0 @@\n-       \/\/add inputBytes array with random bytes to write into Zip\n@@ -124,5 +112,10 @@\n-    \/\/Test for infinite loop by writing bytes to closed GZIPOutputStream\n-    @Test(dataProvider = \"testgzipinput\")\n-    public void testGZip(Class<?> type, boolean useCloseMethod) throws IOException {\n-        GZIPOutputStream zip = new GZIPOutputStream(outStream);\n-        zip.write(inputBytes, 0, INPUT_LENGTH);\n+    \/**\n+     * Test for infinite loop by writing bytes to closed GZIPOutputStream\n+     *\n+     * @param useCloseMethod indicates whether to use Close() or finish() method\n+     * @throws IOException if an error occurs\n+     *\/\n+    @Test(dataProvider = \"testOutputStreams\")\n+    public void testGZip(boolean useCloseMethod) throws IOException {\n+        GZIPOutputStream gzip = new GZIPOutputStream(outStream);\n+        gzip.write(inputBytes, 0, INPUT_LENGTH);\n@@ -130,1 +123,1 @@\n-            \/\/close zip\n+            \/\/ Close GZIPOutputStream\n@@ -132,1 +125,1 @@\n-                zip.close();\n+                gzip.close();\n@@ -134,1 +127,1 @@\n-                zip.finish();\n+                gzip.finish();\n@@ -137,2 +130,2 @@\n-        \/\/write on a closed GZIPOutputStream, closed Deflater IOException expected\n-        assertThrows(NullPointerException.class , () -> zip.write(inputBytes, 0, INPUT_LENGTH));\n+        \/\/ Write on a closed GZIPOutputStream, closed Deflater IOException expected\n+        assertThrows(NullPointerException.class , () -> gzip.write(inputBytes, 0, INPUT_LENGTH));\n@@ -141,3 +134,8 @@\n-    \/\/Test for infinite loop by writing bytes to closed DeflaterOutputStream\n-    @Test(dataProvider = \"testdeflateroutputstream\")\n-    public void testDeflaterOutputStream(Class<?> type, boolean useCloseMethod) throws IOException {\n+    \/**\n+     * Test for infinite loop by writing bytes to closed DeflaterOutputStream\n+     *\n+     * @param useCloseMethod indicates whether to use Close() or finish() method\n+     * @throws IOException if an error occurs\n+     *\/\n+    @Test(dataProvider = \"testOutputStreams\")\n+    public void testDeflaterOutputStream(boolean useCloseMethod) throws IOException {\n@@ -147,1 +145,1 @@\n-            \/\/close deflater\n+            \/\/ Close DeflaterOutputStream\n@@ -154,1 +152,1 @@\n-        \/\/write on a closed DeflaterOutputStream, closed Deflater IOException expected\n+        \/\/ Write on a closed DeflaterOutputStream, 'Deflater has been closed' NPE is expected\n@@ -158,1 +156,5 @@\n-    \/\/Test for infinite loop by reading bytes from closed DeflaterInputStream\n+    \/**\n+     * Test for infinite loop by reading bytes from closed DeflaterInputStream\n+     *\n+     * @throws IOException if an error occurs\n+     *\/\n@@ -163,1 +165,1 @@\n-        \/\/close deflater\n+        \/\/ Close DeflaterInputStream\n@@ -165,1 +167,1 @@\n-        \/\/read from a closed DeflaterInputStream, closed Deflater IOException expected\n+        \/\/ Read from a closed DeflaterInputStream, closed Deflater IOException expected\n@@ -169,3 +171,8 @@\n-    \/\/Test for infinite loop by writing bytes to closed InflaterOutputStream\n-    @Test(dataProvider = \"testinflateroutputstream\")\n-    public void testInflaterOutputStream(Class<?> type, boolean useCloseMethod) throws IOException {\n+    \/**\n+     * Test for infinite loop by writing bytes to closed InflaterOutputStream\n+     *\n+     * @param useCloseMethod indicates whether to use Close() or finish() method\n+     * @throws IOException if an error occurs\n+     *\/\n+    @Test(dataProvider = \"testOutputStreams\")\n+    public void testInflaterOutputStream(boolean useCloseMethod) throws IOException {\n@@ -175,1 +182,1 @@\n-            \/\/close inflater\n+            \/\/ Close InflaterOutputStream\n@@ -182,1 +189,1 @@\n-        \/\/write on a closed InflaterOutputStream , closed Inflater IOException expected\n+        \/\/ Write on a closed InflaterOutputStream , closed Inflater IOException expected\n@@ -186,2 +193,7 @@\n-    \/\/Test for infinite loop by writing bytes to closed ZipOutputStream\/JarOutputStream\n-    @Test(dataProvider = \"testzipjarinput\")\n+    \/**\n+     * Test for infinite loop by writing bytes to closed ZipOutputStream\/JarOutputStream\n+     *\n+     * @param zip will be the instance of either JarOutputStream or ZipOutputStream\n+     * @throws IOException if an error occurs\n+     *\/\n+    @Test(dataProvider = \"testZipAndJar\")\n@@ -192,1 +204,1 @@\n-        \/\/write on a closed ZipOutputStream , Deflater closed NullPointerException expected\n+        \/\/ Write on a closed ZipOutputStream , 'Deflater has been closed' NPE is expected\n","filename":"test\/jdk\/java\/util\/zip\/CloseInflaterDeflaterTest.java","additions":74,"deletions":62,"binary":false,"changes":136,"status":"modified"}]}