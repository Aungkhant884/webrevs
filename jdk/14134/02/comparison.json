{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n- * @bug 4173528 5068772 8148936 8196334\n+ * @bug 4173528 5068772 8148936 8196334 8308803\n@@ -28,2 +28,4 @@\n- * @run main\/othervm -XX:+CompactStrings UUIDTest\n- * @run main\/othervm -XX:-CompactStrings UUIDTest\n+ * @library \/test\/lib\n+ * @build jdk.test.lib.RandomFactory\n+ * @run main\/othervm -Xmx1g -XX:+CompactStrings UUIDTest\n+ * @run main\/othervm -Xmx1g -XX:-CompactStrings UUIDTest\n@@ -33,0 +35,2 @@\n+import java.util.stream.IntStream;\n+import jdk.test.lib.RandomFactory;\n@@ -36,1 +40,4 @@\n-    static Random generator = new Random();\n+    \/\/ Single UUID instance is ~32 bytes, 1M instances take ~256M in the set\n+    private static final int COUNT = 1_000_000;\n+\n+    static final Random generator = RandomFactory.getRandom();\n@@ -39,1 +46,1 @@\n-        containsTest();\n+        negativeTest();\n@@ -41,0 +48,1 @@\n+        randomUUIDTest_Multi();\n@@ -52,6 +60,6 @@\n-    \/\/ Verify that list.contains detects UUID collisons\n-    private static void containsTest() throws Exception {\n-        List list = new LinkedList();\n-        list.add(new UUID(4,4));\n-        if (!list.contains(new UUID(4,4)))\n-            throw new Exception(\"contains test did not work as expected\");\n+    private static void negativeTest() throws Exception {\n+        Set<UUID> set = new HashSet<>();\n+        set.add(new UUID(4, 4));\n+        if (set.add(new UUID(4, 4))) {\n+            throw new Exception(\"Contains test does not work as expected\");\n+        }\n@@ -61,5 +69,38 @@\n-        List list = new LinkedList();\n-        for (int i=0; i<100; i++) {\n-            UUID u1 = UUID.randomUUID();\n-            if (4 != u1.version()) {\n-                throw new Exception(\"bad version\");\n+        List<UUID> collisions = new ArrayList<>();\n+\n+        Set<UUID> set = new HashSet<>();\n+        for (int i = 0; i < COUNT; i++) {\n+            UUID u = UUID.randomUUID();\n+            if (u.version() != 4) {\n+                throw new Exception(\"Bad version: \" + u);\n+            }\n+            if (u.variant() != 2) {\n+                throw new Exception(\"Bad variant: \" + u);\n+            }\n+            if (!set.add(u)) {\n+                collisions.add(u);\n+            }\n+        }\n+\n+        if (!collisions.isEmpty()) {\n+           \/\/ This is extremely unlikely to happen. If you see this failure,\n+           \/\/ this highly likely points to the implementation bug, rather than\n+           \/\/ the odd chance.\n+           throw new Exception(\"UUID collisions detected: \" + collisions);\n+        }\n+    }\n+\n+    private static void randomUUIDTest_Multi() throws Exception {\n+        List<UUID> uuids = IntStream.range(0, COUNT).parallel()\n+                                    .mapToObj(i -> UUID.randomUUID())\n+                                    .toList();\n+\n+        List<UUID> collisions = new ArrayList<>();\n+\n+        Set<UUID> set = new HashSet<>();\n+        for (UUID u : uuids) {\n+            if (u.version() != 4) {\n+                throw new Exception(\"Bad version: \" + u);\n+            }\n+            if (u.variant() != 2) {\n+                throw new Exception(\"Bad variant: \" + u);\n@@ -67,2 +108,2 @@\n-            if (2 != u1.variant()) {\n-                throw new Exception(\"bad variant\");\n+            if (!set.add(u)) {\n+                collisions.add(u);\n@@ -70,3 +111,7 @@\n-            if (list.contains(u1))\n-                throw new Exception(\"random UUID collision very unlikely\");\n-            list.add(u1);\n+        }\n+\n+        if (!collisions.isEmpty()) {\n+           \/\/ This is extremely unlikely to happen. If you see this failure,\n+           \/\/ this highly likely points to the implementation bug, rather than\n+           \/\/ the odd chance.\n+           throw new Exception(\"UUID collisions detected: \" + collisions);\n@@ -76,0 +121,1 @@\n+\n@@ -77,1 +123,2 @@\n-        Random byteSource = new Random();\n+        List<UUID> collisions = new ArrayList<>();\n+\n@@ -79,6 +126,9 @@\n-        List list = new LinkedList();\n-        for (int i=0; i<100; i++) {\n-            byteSource.nextBytes(someBytes);\n-            UUID u1 = UUID.nameUUIDFromBytes(someBytes);\n-            if (3 != u1.version()) {\n-                throw new Exception(\"bad version\");\n+        Set<UUID> set = new HashSet<>();\n+        for (int i = 0; i < COUNT; i++) {\n+            generator.nextBytes(someBytes);\n+            UUID u = UUID.nameUUIDFromBytes(someBytes);\n+            if (u.version() != 3) {\n+                throw new Exception(\"Bad version: \" + u);\n+            }\n+            if (u.variant() != 2) {\n+                throw new Exception(\"Bad variant: \" + u);\n@@ -86,2 +136,2 @@\n-            if (2 != u1.variant()) {\n-                throw new Exception(\"bad variant\");\n+            if (!set.add(u)) {\n+                collisions.add(u);\n@@ -89,3 +139,7 @@\n-            if (list.contains(u1))\n-                throw new Exception(\"byte UUID collision very unlikely\");\n-            list.add(u1);\n+        }\n+\n+        if (!collisions.isEmpty()) {\n+           \/\/ This is extremely unlikely to happen. If you see this failure,\n+           \/\/ this highly likely points to the implementation bug, rather than\n+           \/\/ the odd chance.\n+           throw new Exception(\"UUID collisions detected: \" + collisions);\n@@ -96,1 +150,1 @@\n-        for (int i=0; i<100; i++) {\n+        for (int i = 0; i < COUNT; i++) {\n@@ -100,2 +154,3 @@\n-            if (!u1.equals(u2) || !u1.equals(u3))\n-                throw new Exception(\"UUID -> string -> UUID failed\");\n+            if (!u1.equals(u2) || !u1.equals(u3)) {\n+                throw new Exception(\"UUID -> string -> UUID failed: \" + u1 + \" -> \" + u2 + \" -> \" + u3);\n+            }\n@@ -124,3 +179,4 @@\n-        if (test.version() != 4)\n-            throw new Exception(\"randomUUID not type 4\");\n-        Random byteSource = new Random();\n+        if (test.version() != 4) {\n+            throw new Exception(\"randomUUID not type 4: \" + test);\n+        }\n+\n@@ -128,1 +184,1 @@\n-        byteSource.nextBytes(someBytes);\n+        generator.nextBytes(someBytes);\n@@ -130,2 +186,4 @@\n-        if (test.version() != 3)\n-            throw new Exception(\"nameUUIDFromBytes not type 3\");\n+        if (test.version() != 3) {\n+            throw new Exception(\"nameUUIDFromBytes not type 3: \" + test);\n+        }\n+\n@@ -133,1 +191,1 @@\n-        if (test.version() != 1)\n+        if (test.version() != 1) {\n@@ -135,0 +193,2 @@\n+        }\n+\n@@ -136,1 +196,1 @@\n-        if (test.version() != 2)\n+        if (test.version() != 2) {\n@@ -138,0 +198,2 @@\n+        }\n+\n@@ -139,1 +201,1 @@\n-        if (test.version() != 3)\n+        if (test.version() != 3) {\n@@ -141,0 +203,2 @@\n+        }\n+\n@@ -142,1 +206,1 @@\n-        if (test.version() != 4)\n+        if (test.version() != 4) {\n@@ -144,0 +208,2 @@\n+        }\n+\n@@ -145,1 +211,1 @@\n-        if (test.version() != 1)\n+        if (test.version() != 1) {\n@@ -147,0 +213,2 @@\n+        }\n+\n@@ -148,1 +216,1 @@\n-        if (test.version() != 2)\n+        if (test.version() != 2) {\n@@ -150,0 +218,2 @@\n+        }\n+\n@@ -151,1 +221,1 @@\n-        if (test.version() != 3)\n+        if (test.version() != 3) {\n@@ -153,0 +223,2 @@\n+        }\n+\n@@ -154,1 +226,1 @@\n-        if (test.version() != 4)\n+        if (test.version() != 4) {\n@@ -156,0 +228,1 @@\n+        }\n@@ -160,1 +233,1 @@\n-        if (test.variant() != 2)\n+        if (test.variant() != 2) {\n@@ -162,1 +235,2 @@\n-        Random byteSource = new Random();\n+        }\n+\n@@ -164,1 +238,1 @@\n-        byteSource.nextBytes(someBytes);\n+        generator.nextBytes(someBytes);\n@@ -166,1 +240,1 @@\n-        if (test.variant() != 2)\n+        if (test.variant() != 2) {\n@@ -168,0 +242,2 @@\n+        }\n+\n@@ -169,1 +245,1 @@\n-        if (test.variant() != 0)\n+        if (test.variant() != 0) {\n@@ -171,0 +247,2 @@\n+        }\n+\n@@ -172,1 +250,1 @@\n-        if (test.variant() != 2)\n+        if (test.variant() != 2) {\n@@ -174,2 +252,4 @@\n-       test = new UUID(55L, 0xc000000000001000L);\n-        if (test.variant() != 6)\n+        }\n+\n+        test = new UUID(55L, 0xc000000000001000L);\n+        if (test.variant() != 6) {\n@@ -177,2 +257,4 @@\n-       test = new UUID(55L, 0xe000000000001000L);\n-        if (test.variant() != 7)\n+        }\n+\n+        test = new UUID(55L, 0xe000000000001000L);\n+        if (test.variant() != 7) {\n@@ -180,0 +262,1 @@\n+        }\n@@ -190,0 +273,1 @@\n+\n@@ -191,1 +275,1 @@\n-        if (test.timestamp() != 1)\n+        if (test.timestamp() != 1) {\n@@ -193,0 +277,2 @@\n+        }\n+\n@@ -194,1 +280,1 @@\n-        if (test.timestamp() != 1024)\n+        if (test.timestamp() != 1024) {\n@@ -196,0 +282,2 @@\n+        }\n+\n@@ -197,1 +285,1 @@\n-        if (test.timestamp() != Long.MAX_VALUE>>3)\n+        if (test.timestamp() != (Long.MAX_VALUE >> 3)) {\n@@ -199,0 +287,1 @@\n+        }\n@@ -209,0 +298,1 @@\n+\n@@ -210,1 +300,1 @@\n-        if (test.clockSequence() != 1)\n+        if (test.clockSequence() != 1) {\n@@ -212,0 +302,2 @@\n+        }\n+\n@@ -213,1 +305,1 @@\n-        if (test.clockSequence() != 2)\n+        if (test.clockSequence() != 2) {\n@@ -215,0 +307,2 @@\n+        }\n+\n@@ -216,1 +310,1 @@\n-        if (test.clockSequence() != 16)\n+        if (test.clockSequence() != 16) {\n@@ -218,0 +312,2 @@\n+        }\n+\n@@ -219,1 +315,1 @@\n-        if (test.clockSequence() != ((2L<<13)-1)) \/\/ 2^14 - 1\n+        if (test.clockSequence() != ((1L << 14) - 1)) {\n@@ -221,0 +317,1 @@\n+        }\n@@ -231,0 +328,1 @@\n+\n@@ -232,1 +330,1 @@\n-        if (test.node() != 1)\n+        if (test.node() != 1) {\n@@ -234,0 +332,2 @@\n+        }\n+\n@@ -235,1 +335,1 @@\n-        if (test.node() != ((2L<<47)-1)) \/\/ 2^48 - 1\n+        if (test.node() != ((1L << 48) - 1)) {\n@@ -237,0 +337,1 @@\n+        }\n@@ -241,1 +342,1 @@\n-        for (int i=0; i<100; i++) {\n+        for (int i = 0; i < COUNT; i++) {\n@@ -244,2 +345,4 @@\n-            if (u1.hashCode() != u2.hashCode())\n-                throw new Exception(\"Equal UUIDs with different hashcodes\");\n+            if (u1.hashCode() != u2.hashCode()) {\n+                throw new Exception(\"Equal UUIDs with different hash codes: \" + u1 + \"(\" + u1.hashCode() + \") \" +\n+                                    \"and \" + u2 + \"(\" + u2.hashCode() + \")\");\n+            }\n@@ -247,0 +350,1 @@\n+\n@@ -248,1 +352,1 @@\n-        for (int i=0; i<1000; i++) {\n+        for (int i = 0; i < COUNT; i++) {\n@@ -255,2 +359,3 @@\n-            if (u1.equals(u2))\n-                throw new Exception(\"UUIDs with different bits equal\");\n+            if (u1.equals(u2)) {\n+                throw new Exception(\"UUIDs with different bits equal: \" + u1 + \" and \" + u2);\n+            }\n@@ -270,1 +375,1 @@\n-            (id4.compareTo(id5) >= 0))\n+            (id4.compareTo(id5) >= 0)) {\n@@ -272,0 +377,1 @@\n+        }\n@@ -276,1 +382,1 @@\n-            (id2.compareTo(id) <= 0))\n+            (id2.compareTo(id) <= 0)) {\n@@ -278,0 +384,1 @@\n+        }\n@@ -279,1 +386,1 @@\n-        if (id.compareTo(id) != 0)\n+        if (id.compareTo(id) != 0) {\n@@ -281,1 +388,1 @@\n-\n+        }\n","filename":"test\/jdk\/java\/util\/UUID\/UUIDTest.java","additions":187,"deletions":80,"binary":false,"changes":267,"status":"modified"}]}