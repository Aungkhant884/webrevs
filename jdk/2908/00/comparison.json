{"files":[{"patch":"@@ -152,2 +152,0 @@\n-            \/\/ If all numbers, it is a PID to attach to\n-            \/\/ Else, it is a pathname to a ...\/bin\/java for a core file.\n@@ -155,0 +153,1 @@\n+                \/\/ Attempt to attach as a PID\n@@ -157,2 +156,2 @@\n-                execPath = args[0];\n-                coreFilename = \"core\";\n+                \/\/ Attempt to connect to remote debug server\n+                debugServerName = args[0];\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/CLHSDB.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -118,2 +118,0 @@\n-      \/\/ If all numbers, it is a PID to attach to\n-      \/\/ Else, it is a pathname to a ...\/bin\/java for a core file.\n@@ -121,0 +119,1 @@\n+        \/\/ Attempt to attach as a PID\n@@ -123,2 +122,2 @@\n-        execPath = args[0];\n-        coreFilename = \"core\";\n+        \/\/ Attempt to connect to remote debug server\n+        debugServerName = args[0];\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/HSDB.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -164,1 +164,1 @@\n-                return commonHelp(toolName);\n+                return commonHelpWithConnect(toolName);\n@@ -279,1 +279,2 @@\n-                                                 \"pid=\", \"pid\");\n+                                                 \"pid=\", \"pid\",\n+                                                 \"connect=\", \"connect\");\n@@ -287,1 +288,2 @@\n-                                                 \"pid=\", \"pid\");\n+                                                 \"pid=\", \"pid\",\n+                                                 \"connect=\", \"connect\");\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/SALauncher.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-.\\\" Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+.\\\" Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,2 +34,2 @@\n-\\f[CB]\\-\\-exe\\f[R] \\f[I]executable\\f[R] \\f[CB]\\-\\-core\\f[R]\n-\\f[I]coredump\\f[R]]\n+\\f[CB]\\-\\-exe\\f[R] \\f[I]executable\\f[R] \\f[CB]\\-\\-core\\f[R] \\f[I]coredump\\f[R] |\n+\\f[CB]\\-\\-connect\\f[R] \\f[I][server\\-id\\@]debugd\\-host\\f[R]\\]\n@@ -38,2 +38,2 @@\n-\\f[CB]\\-\\-exe\\f[R] \\f[I]executable\\f[R] \\f[CB]\\-\\-core\\f[R]\n-\\f[I]coredump\\f[R]]\n+\\f[CB]\\-\\-exe\\f[R] \\f[I]executable\\f[R] \\f[CB]\\-\\-core\\f[R] \\f[I]coredump\\f[R] |\n+\\f[CB]\\-\\-connect\\f[R] \\f[I][server\\-id\\@]debugd\\-host\\f[R]\\]\n","filename":"src\/jdk.hotspot.agent\/share\/man\/jhsdb.1","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,110 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021 NTT DATA.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.PrintStream;\n+\n+import jdk.test.lib.JDKToolLauncher;\n+import jdk.test.lib.apps.LingeredApp;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.SA.SATestUtils;\n+\n+import jtreg.SkippedException;\n+\n+\/**\n+ * @test\n+ * @bug 8263342\n+ * @requires vm.hasSA\n+ * @requires os.family != \"windows\"\n+ * @library \/test\/lib\n+ * @run main\/othervm ClhsdbAttachToDebugServerWithCommandLine\n+ *\/\n+\n+public class ClhsdbAttachToDebugServerWithCommandLine {\n+\n+    public static void main(String[] args) throws Exception {\n+        SATestUtils.skipIfCannotAttach(); \/\/ throws SkippedException if attach not expected to work.\n+\n+        if (SATestUtils.needsPrivileges()) {\n+            \/\/ This tests has issues if you try adding privileges on OSX. The debugd process cannot\n+            \/\/ be killed if you do this (because it is a root process and the test is not), so the destroy()\n+            \/\/ call fails to do anything, and then waitFor() will time out. If you try to manually kill it with\n+            \/\/ a \"sudo kill\" command, that seems to work, but then leaves the LingeredApp it was\n+            \/\/ attached to in a stuck state for some unknown reason, causing the stopApp() call\n+            \/\/ to timeout. For that reason we don't run this test when privileges are needed. Note\n+            \/\/ it does appear to run fine as root, so we still allow it to run on OSX when privileges\n+            \/\/ are not required.\n+            throw new SkippedException(\"Cannot run this test on OSX if adding privileges is required.\");\n+        }\n+\n+        System.out.println(\"Starting ClhsdbAttachToDebugServerWithCommandLine test\");\n+\n+        LingeredApp theApp = null;\n+        DebugdUtils debugd = null;\n+        try {\n+            theApp = LingeredApp.startApp();\n+            System.out.println(\"Started LingeredApp with pid \" + theApp.getPid());\n+            debugd = new DebugdUtils(null);\n+            debugd.attach(theApp.getPid());\n+\n+            JDKToolLauncher jhsdbLauncher = JDKToolLauncher.createUsingTestJDK(\"jhsdb\");\n+            jhsdbLauncher.addToolArg(\"clhsdb\");\n+            jhsdbLauncher.addToolArg(\"--connect\");\n+            jhsdbLauncher.addToolArg(\"localhost\");\n+\n+            Process jhsdb = (SATestUtils.createProcessBuilder(jhsdbLauncher)).start();\n+            OutputAnalyzer out = new OutputAnalyzer(jhsdb);\n+\n+            try (PrintStream console = new PrintStream(jhsdb.getOutputStream(), true)) {\n+                console.println(\"echo true\");\n+                console.println(\"verbose true\");\n+                console.println(\"class java.lang.Object\");\n+                console.println(\"quit\");\n+            }\n+\n+            jhsdb.waitFor();\n+            System.out.println(out.getStdout());\n+            System.err.println(out.getStderr());\n+\n+            out.stderrShouldBeEmptyIgnoreDeprecatedWarnings();\n+            out.shouldMatch(\"^java\/lang\/Object @0x[0-9a-f]+$\"); \/\/ for \"class java.lang.Object\"\n+            out.shouldHaveExitValue(0);\n+\n+            \/\/ This will detect most SA failures, including during the attach.\n+            out.shouldNotMatch(\"^sun.jvm.hotspot.debugger.DebuggerException:.*$\");\n+            \/\/ This will detect unexpected exceptions, like NPEs and asserts, that are caught\n+            \/\/ by sun.jvm.hotspot.CommandProcessor.\n+            out.shouldNotMatch(\"^Error: .*$\");\n+        } catch (SkippedException se) {\n+            throw se;\n+        } catch (Exception ex) {\n+            throw new RuntimeException(\"Test ERROR \" + ex, ex);\n+        } finally {\n+            if (debugd != null) {\n+                debugd.detach();\n+            }\n+            LingeredApp.stopApp(theApp);\n+        }\n+        System.out.println(\"Test PASSED\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/sadebugd\/ClhsdbAttachToDebugServerWithCommandLine.java","additions":110,"deletions":0,"binary":false,"changes":110,"status":"added"}]}