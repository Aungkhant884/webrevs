{"files":[{"patch":"@@ -155,1 +155,1 @@\n-    new_value = align_down(max_uintx, Metaspace::commit_alignment());\n+    new_value = align_down(max_uintx, Metaspace::reserve_alignment());\n","filename":"src\/hotspot\/share\/memory\/metaspace.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1744,2 +1744,7 @@\n-  size_t max_size_t = (size_t) -1;\n-  if ((size_t) inc > max_size_t) {\n+  if (inc < 0) {\n+    THROW_MSG_0(vmSymbols::java_lang_IllegalArgumentException(),\n+        err_msg(\"WB_IncMetaspaceCapacityUntilGC: inc is negative: \" JLONG_FORMAT, inc));\n+  }\n+\n+  jlong max_size_t = (jlong) ((size_t) -1);\n+  if (inc > max_size_t) {\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @bug 8049831 8226236\n+ * @bug 8049831\n@@ -32,0 +32,1 @@\n+ * @requires vm.bits == 32\n@@ -43,19 +44,2 @@\n-\n-    private static void incMetaspaceCapacityUntilGCTest(WhiteBox wb) {\n-        long before = wb.metaspaceCapacityUntilGC();\n-        long after = wb.incMetaspaceCapacityUntilGC(100 * MB);\n-\n-        Asserts.assertGTE(after, before,\n-                          \"Increasing with INC should not cause wrap around: \" + after + \" < \" + before);\n-    }\n-\n-    private static void incMetaspaceCapacityUntilGCWithOverflowTest(WhiteBox wb) {\n-        \/\/ Force possible overflow of capacity_until_GC.\n-        long maxMetaspaceSize = wb.getSizeTVMFlag(\"MaxMetaspaceSize\").longValue();\n-        try {\n-            long after = wb.incMetaspaceCapacityUntilGC(maxMetaspaceSize);\n-            throw new RuntimeException(\"Metaspace capacity should not be increased: after: \" + Long.toUnsignedString(maxMetaspaceSize));\n-        } catch (IllegalStateException e) {\n-            \/\/ expected\n-        }\n-    }\n+    private static long GB = 1024 * MB;\n+    private static long MAX_UINT = 4 * GB - 1; \/\/ On 32-bit platforms\n@@ -66,2 +50,8 @@\n-        incMetaspaceCapacityUntilGCTest(wb);\n-        incMetaspaceCapacityUntilGCWithOverflowTest(wb);\n+        long before = wb.metaspaceCapacityUntilGC();\n+        \/\/ Now force possible overflow of capacity_until_GC.\n+        long after = wb.incMetaspaceCapacityUntilGC(MAX_UINT);\n+\n+        Asserts.assertGTE(after, before,\n+                          \"Increasing with MAX_UINT should not cause wrap around: \" + after + \" < \" + before);\n+        Asserts.assertLTE(after, MAX_UINT,\n+                          \"Increasing with MAX_UINT should not cause value larger than MAX_UINT:\" + after);\n","filename":"test\/hotspot\/jtreg\/gc\/metaspace\/TestCapacityUntilGCWrapAround.java","additions":12,"deletions":22,"binary":false,"changes":34,"status":"modified"}]}