{"files":[{"patch":"@@ -1744,7 +1744,2 @@\n-  if (inc < 0) {\n-    THROW_MSG_0(vmSymbols::java_lang_IllegalArgumentException(),\n-        err_msg(\"WB_IncMetaspaceCapacityUntilGC: inc is negative: \" JLONG_FORMAT, inc));\n-  }\n-\n-  jlong max_size_t = (jlong) ((size_t) -1);\n-  if (inc > max_size_t) {\n+  size_t max_size_t = (size_t) -1;\n+  if ((size_t) inc > max_size_t) {\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @bug 8049831\n+ * @bug 8049831 8226236\n@@ -32,1 +32,0 @@\n- * @requires vm.bits == 32\n@@ -44,5 +43,0 @@\n-    private static long GB = 1024 * MB;\n-    private static long MAX_UINT = 4 * GB - 1; \/\/ On 32-bit platforms\n-\n-    public static void main(String[] args) {\n-        WhiteBox wb = WhiteBox.getWhiteBox();\n@@ -50,0 +44,1 @@\n+    private static void incMetaspaceCapacityUntilGCTest(WhiteBox wb) {\n@@ -51,2 +46,1 @@\n-        \/\/ Now force possible overflow of capacity_until_GC.\n-        long after = wb.incMetaspaceCapacityUntilGC(MAX_UINT);\n+        long after = wb.incMetaspaceCapacityUntilGC(100 * MB);\n@@ -55,3 +49,19 @@\n-                          \"Increasing with MAX_UINT should not cause wrap around: \" + after + \" < \" + before);\n-        Asserts.assertLTE(after, MAX_UINT,\n-                          \"Increasing with MAX_UINT should not cause value larger than MAX_UINT:\" + after);\n+                          \"Increasing with INC should not cause wrap around: \" + after + \" < \" + before);\n+    }\n+\n+    private static void incMetaspaceCapacityUntilGCWithOverflowTest(WhiteBox wb) {\n+        \/\/ Force possible overflow of capacity_until_GC.\n+        long maxMetaspaceSize = wb.getSizeTVMFlag(\"MaxMetaspaceSize\").longValue();\n+        try {\n+            long after = wb.incMetaspaceCapacityUntilGC(maxMetaspaceSize);\n+            throw new RuntimeException(\"Metaspace capacity should not be increased: after: \" + Long.toUnsignedString(maxMetaspaceSize));\n+        } catch (IllegalStateException e) {\n+            \/\/ expected\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        WhiteBox wb = WhiteBox.getWhiteBox();\n+\n+        incMetaspaceCapacityUntilGCTest(wb);\n+        incMetaspaceCapacityUntilGCWithOverflowTest(wb);\n","filename":"test\/hotspot\/jtreg\/gc\/metaspace\/TestCapacityUntilGCWrapAround.java","additions":22,"deletions":12,"binary":false,"changes":34,"status":"modified"}]}