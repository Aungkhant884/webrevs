{"files":[{"patch":"@@ -29,1 +29,1 @@\n-DEFAULT_VERSION_FEATURE=18\n+DEFAULT_VERSION_FEATURE=19\n@@ -36,2 +36,2 @@\n-DEFAULT_VERSION_DATE=2022-03-22\n-DEFAULT_VERSION_CLASSFILE_MAJOR=62  # \"`$EXPR $DEFAULT_VERSION_FEATURE + 44`\"\n+DEFAULT_VERSION_DATE=2022-09-20\n+DEFAULT_VERSION_CLASSFILE_MAJOR=63  # \"`$EXPR $DEFAULT_VERSION_FEATURE + 44`\"\n@@ -40,2 +40,2 @@\n-DEFAULT_ACCEPTABLE_BOOT_VERSIONS=\"17 18\"\n-DEFAULT_JDK_SOURCE_TARGET_VERSION=18\n+DEFAULT_ACCEPTABLE_BOOT_VERSIONS=\"17 18 19\"\n+DEFAULT_JDK_SOURCE_TARGET_VERSION=19\n","filename":"make\/conf\/version-numbers.conf","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,742 @@\n+#\n+# Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+module name java.base\n+header exports java\/io,java\/lang,java\/lang\/annotation,java\/lang\/constant,java\/lang\/invoke,java\/lang\/module,java\/lang\/ref,java\/lang\/reflect,java\/lang\/runtime,java\/math,java\/net,java\/net\/spi,java\/nio,java\/nio\/channels,java\/nio\/channels\/spi,java\/nio\/charset,java\/nio\/charset\/spi,java\/nio\/file,java\/nio\/file\/attribute,java\/nio\/file\/spi,java\/security,java\/security\/cert,java\/security\/interfaces,java\/security\/spec,java\/text,java\/text\/spi,java\/time,java\/time\/chrono,java\/time\/format,java\/time\/temporal,java\/time\/zone,java\/util,java\/util\/concurrent,java\/util\/concurrent\/atomic,java\/util\/concurrent\/locks,java\/util\/function,java\/util\/jar,java\/util\/random,java\/util\/regex,java\/util\/spi,java\/util\/stream,java\/util\/zip,javax\/crypto,javax\/crypto\/interfaces,javax\/crypto\/spec,javax\/net,javax\/net\/ssl,javax\/security\/auth,javax\/security\/auth\/callback,javax\/security\/auth\/login,javax\/security\/auth\/spi,javax\/security\/auth\/x500,javax\/security\/cert,jdk\/internal\/event[jdk.jfr],jdk\/internal\/vm\/vector[jdk.incubator.vector] uses java\/lang\/System$LoggerFinder,java\/net\/ContentHandlerFactory,java\/net\/spi\/InetAddressResolverProvider,java\/net\/spi\/URLStreamHandlerProvider,java\/nio\/channels\/spi\/AsynchronousChannelProvider,java\/nio\/channels\/spi\/SelectorProvider,java\/nio\/charset\/spi\/CharsetProvider,java\/nio\/file\/spi\/FileSystemProvider,java\/nio\/file\/spi\/FileTypeDetector,java\/security\/Provider,java\/text\/spi\/BreakIteratorProvider,java\/text\/spi\/CollatorProvider,java\/text\/spi\/DateFormatProvider,java\/text\/spi\/DateFormatSymbolsProvider,java\/text\/spi\/DecimalFormatSymbolsProvider,java\/text\/spi\/NumberFormatProvider,java\/time\/chrono\/AbstractChronology,java\/time\/chrono\/Chronology,java\/time\/zone\/ZoneRulesProvider,java\/util\/random\/RandomGenerator,java\/util\/spi\/CalendarDataProvider,java\/util\/spi\/CalendarNameProvider,java\/util\/spi\/CurrencyNameProvider,java\/util\/spi\/LocaleNameProvider,java\/util\/spi\/ResourceBundleControlProvider,java\/util\/spi\/ResourceBundleProvider,java\/util\/spi\/TimeZoneNameProvider,java\/util\/spi\/ToolProvider,javax\/security\/auth\/spi\/LoginModule,jdk\/internal\/logger\/DefaultLoggerFinder,sun\/text\/spi\/JavaTimeDateTimePatternProvider,sun\/util\/locale\/provider\/LocaleDataMetaInfo,sun\/util\/resources\/LocaleData$CommonResourceBundleProvider,sun\/util\/resources\/LocaleData$SupplementaryResourceBundleProvider,sun\/util\/spi\/CalendarProvider provides interface\\u0020;java\/nio\/file\/spi\/FileSystemProvider\\u0020;impls\\u0020;jdk\/internal\/jrtfs\/JrtFileSystemProvider,interface\\u0020;java\/util\/random\/RandomGenerator\\u0020;impls\\u0020;java\/security\/SecureRandom\\u005C;u002C;java\/util\/Random\\u005C;u002C;java\/util\/SplittableRandom target linux-amd64 flags 8000\n+\n+class name java\/io\/FileInputStream\n+method name transferTo descriptor (Ljava\/io\/OutputStream;)J thrownTypes java\/io\/IOException flags 1\n+\n+class name java\/io\/ObjectInputStream$GetField\n+-method name get descriptor (Ljava\/lang\/String;Ljava\/lang\/Object;)Ljava\/lang\/Object;\n+method name get descriptor (Ljava\/lang\/String;Ljava\/lang\/Object;)Ljava\/lang\/Object; thrownTypes java\/io\/IOException,java\/lang\/ClassNotFoundException flags 401\n+\n+class name java\/io\/PrintStream\n+header extends java\/io\/FilterOutputStream implements java\/lang\/Appendable,java\/io\/Closeable flags 21\n+innerclass innerClass java\/util\/Locale$Category outerClass java\/util\/Locale innerClassName Category flags 4019\n+method name charset descriptor ()Ljava\/nio\/charset\/Charset; flags 1\n+\n+class name java\/lang\/AbstractStringBuilder\n+header extends java\/lang\/Object implements java\/lang\/Appendable,java\/lang\/CharSequence flags 420\n+innerclass innerClass java\/util\/Spliterator$OfInt outerClass java\/util\/Spliterator innerClassName OfInt flags 609\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/lang\/Compiler\n+header extends java\/lang\/Object flags 31 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(forRemoval=Ztrue,since=\"9\")\n+\n+class name java\/lang\/Deprecated\n+header extends java\/lang\/Object implements java\/lang\/annotation\/Annotation flags 2601 runtimeAnnotations @Ljava\/lang\/annotation\/Documented;@Ljava\/lang\/annotation\/Retention;(value=eLjava\/lang\/annotation\/RetentionPolicy;RUNTIME;)@Ljava\/lang\/annotation\/Target;(value={eLjava\/lang\/annotation\/ElementType;CONSTRUCTOR;eLjava\/lang\/annotation\/ElementType;FIELD;eLjava\/lang\/annotation\/ElementType;LOCAL_VARIABLE;eLjava\/lang\/annotation\/ElementType;METHOD;eLjava\/lang\/annotation\/ElementType;PACKAGE;eLjava\/lang\/annotation\/ElementType;MODULE;eLjava\/lang\/annotation\/ElementType;PARAMETER;eLjava\/lang\/annotation\/ElementType;TYPE;})\n+\n+class name java\/lang\/Enum\n+-method name finalize descriptor ()V\n+method name finalize descriptor ()V flags 14 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(forRemoval=Ztrue,since=\"18\")\n+\n+class name java\/lang\/IllegalCallerException\n+header extends java\/lang\/RuntimeException flags 21\n+\n+class name java\/lang\/LayerInstantiationException\n+header extends java\/lang\/RuntimeException flags 21\n+\n+class name java\/lang\/Math\n+method name divideExact descriptor (II)I flags 9\n+method name divideExact descriptor (JJ)J flags 9\n+method name floorDivExact descriptor (II)I flags 9\n+method name floorDivExact descriptor (JJ)J flags 9\n+method name ceilDivExact descriptor (II)I flags 9\n+method name ceilDivExact descriptor (JJ)J flags 9\n+method name unsignedMultiplyHigh descriptor (JJ)J flags 9 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/IntrinsicCandidate;\n+method name ceilDiv descriptor (II)I flags 9\n+method name ceilDiv descriptor (JI)J flags 9\n+method name ceilDiv descriptor (JJ)J flags 9\n+method name ceilMod descriptor (II)I flags 9\n+method name ceilMod descriptor (JI)I flags 9\n+method name ceilMod descriptor (JJ)J flags 9\n+\n+class name java\/lang\/NamedPackage\n+header extends java\/lang\/Object flags 20\n+\n+class name java\/lang\/Object\n+-method name finalize descriptor ()V\n+method name finalize descriptor ()V thrownTypes java\/lang\/Throwable flags 4 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(forRemoval=Ztrue,since=\"9\")\n+\n+class name java\/lang\/Runtime\n+-method name exec descriptor (Ljava\/lang\/String;)Ljava\/lang\/Process;\n+-method name exec descriptor (Ljava\/lang\/String;[Ljava\/lang\/String;)Ljava\/lang\/Process;\n+-method name exec descriptor (Ljava\/lang\/String;[Ljava\/lang\/String;Ljava\/io\/File;)Ljava\/lang\/Process;\n+-method name runFinalization descriptor ()V\n+method name exec descriptor (Ljava\/lang\/String;)Ljava\/lang\/Process; thrownTypes java\/io\/IOException flags 1 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(since=\"18\")\n+method name exec descriptor (Ljava\/lang\/String;[Ljava\/lang\/String;)Ljava\/lang\/Process; thrownTypes java\/io\/IOException flags 1 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(since=\"18\")\n+method name exec descriptor (Ljava\/lang\/String;[Ljava\/lang\/String;Ljava\/io\/File;)Ljava\/lang\/Process; thrownTypes java\/io\/IOException flags 1 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(since=\"18\")\n+method name runFinalization descriptor ()V flags 1 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(forRemoval=Ztrue,since=\"18\")\n+\n+class name java\/lang\/StrictMath\n+method name divideExact descriptor (II)I flags 9\n+method name divideExact descriptor (JJ)J flags 9\n+method name floorDivExact descriptor (II)I flags 9\n+method name floorDivExact descriptor (JJ)J flags 9\n+method name ceilDivExact descriptor (II)I flags 9\n+method name ceilDivExact descriptor (JJ)J flags 9\n+method name unsignedMultiplyHigh descriptor (JJ)J flags 9\n+method name ceilDiv descriptor (II)I flags 9\n+method name ceilDiv descriptor (JI)J flags 9\n+method name ceilDiv descriptor (JJ)J flags 9\n+method name ceilMod descriptor (II)I flags 9\n+method name ceilMod descriptor (JI)I flags 9\n+method name ceilMod descriptor (JJ)J flags 9\n+\n+class name java\/lang\/SuppressWarnings\n+header extends java\/lang\/Object implements java\/lang\/annotation\/Annotation flags 2601 runtimeAnnotations @Ljava\/lang\/annotation\/Target;(value={eLjava\/lang\/annotation\/ElementType;TYPE;eLjava\/lang\/annotation\/ElementType;FIELD;eLjava\/lang\/annotation\/ElementType;METHOD;eLjava\/lang\/annotation\/ElementType;PARAMETER;eLjava\/lang\/annotation\/ElementType;CONSTRUCTOR;eLjava\/lang\/annotation\/ElementType;LOCAL_VARIABLE;eLjava\/lang\/annotation\/ElementType;MODULE;})@Ljava\/lang\/annotation\/Retention;(value=eLjava\/lang\/annotation\/RetentionPolicy;SOURCE;)\n+\n+class name java\/lang\/System\n+-method name runFinalization descriptor ()V\n+method name runFinalization descriptor ()V flags 9 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(forRemoval=Ztrue,since=\"18\")\n+\n+class name java\/lang\/Thread\n+-method name stop descriptor ()V\n+method name stop descriptor ()V flags 11 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(forRemoval=Ztrue,since=\"1.2\")\n+\n+class name java\/lang\/constant\/ClassDesc\n+header extends java\/lang\/Object implements java\/lang\/constant\/ConstantDesc,java\/lang\/invoke\/TypeDescriptor$OfField sealed true flags 601 signature Ljava\/lang\/Object;Ljava\/lang\/constant\/ConstantDesc;Ljava\/lang\/invoke\/TypeDescriptor$OfField<Ljava\/lang\/constant\/ClassDesc;>;\n+innerclass innerClass java\/lang\/invoke\/TypeDescriptor$OfField outerClass java\/lang\/invoke\/TypeDescriptor innerClassName OfField flags 609\n+\n+class name java\/lang\/constant\/ConstantDesc\n+header extends java\/lang\/Object sealed true flags 601\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/lang\/constant\/DirectMethodHandleDesc\n+header extends java\/lang\/Object implements java\/lang\/constant\/MethodHandleDesc nestMembers java\/lang\/constant\/DirectMethodHandleDesc$Kind sealed true flags 601\n+innerclass innerClass java\/lang\/constant\/DirectMethodHandleDesc$Kind outerClass java\/lang\/constant\/DirectMethodHandleDesc innerClassName Kind flags 4019\n+\n+class name java\/lang\/constant\/MethodHandleDesc\n+header extends java\/lang\/Object implements java\/lang\/constant\/ConstantDesc sealed true flags 601\n+innerclass innerClass java\/lang\/constant\/DirectMethodHandleDesc$Kind outerClass java\/lang\/constant\/DirectMethodHandleDesc innerClassName Kind flags 4019\n+\n+class name java\/lang\/constant\/MethodTypeDesc\n+header extends java\/lang\/Object implements java\/lang\/constant\/ConstantDesc,java\/lang\/invoke\/TypeDescriptor$OfMethod sealed true flags 601 signature Ljava\/lang\/Object;Ljava\/lang\/constant\/ConstantDesc;Ljava\/lang\/invoke\/TypeDescriptor$OfMethod<Ljava\/lang\/constant\/ClassDesc;Ljava\/lang\/constant\/MethodTypeDesc;>;\n+innerclass innerClass java\/lang\/invoke\/TypeDescriptor$OfMethod outerClass java\/lang\/invoke\/TypeDescriptor innerClassName OfMethod flags 609\n+innerclass innerClass java\/lang\/invoke\/TypeDescriptor$OfField outerClass java\/lang\/invoke\/TypeDescriptor innerClassName OfField flags 609\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/lang\/invoke\/CallSite\n+header extends java\/lang\/Object flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/lang\/invoke\/LambdaMetafactory\n+header extends java\/lang\/Object flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/lang\/invoke\/MethodHandle\n+-method name asType descriptor (Ljava\/lang\/invoke\/MethodType;)Ljava\/lang\/invoke\/MethodHandle;\n+method name asType descriptor (Ljava\/lang\/invoke\/MethodType;)Ljava\/lang\/invoke\/MethodHandle; flags 11\n+\n+class name java\/lang\/invoke\/StringConcatException\n+header extends java\/lang\/Exception flags 21\n+\n+class name java\/lang\/module\/Configuration\n+header extends java\/lang\/Object flags 31\n+innerclass innerClass java\/util\/Map$Entry outerClass java\/util\/Map innerClassName Entry flags 609\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/lang\/module\/FindException\n+header extends java\/lang\/RuntimeException flags 21\n+\n+class name java\/lang\/module\/InvalidModuleDescriptorException\n+header extends java\/lang\/RuntimeException flags 21\n+\n+class name java\/lang\/module\/ModuleReader\n+header extends java\/lang\/Object implements java\/io\/Closeable flags 601\n+\n+class name java\/lang\/module\/ModuleReference\n+header extends java\/lang\/Object flags 421\n+\n+class name java\/lang\/module\/ResolutionException\n+header extends java\/lang\/RuntimeException flags 21\n+\n+class name java\/lang\/module\/ResolvedModule\n+header extends java\/lang\/Object flags 31\n+\n+class name java\/lang\/reflect\/AccessibleObject\n+header extends java\/lang\/Object implements java\/lang\/reflect\/AnnotatedElement flags 21 classAnnotations @Ljdk\/Profile+Annotation;(value=I1)\n+\n+class name java\/lang\/reflect\/AnnotatedElement\n+header extends java\/lang\/Object flags 601\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/lang\/reflect\/Executable\n+header extends java\/lang\/reflect\/AccessibleObject implements java\/lang\/reflect\/Member,java\/lang\/reflect\/GenericDeclaration sealed true flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/lang\/reflect\/InaccessibleObjectException\n+header extends java\/lang\/RuntimeException flags 21\n+\n+class name java\/lang\/reflect\/Method\n+-method name invoke descriptor (Ljava\/lang\/Object;[Ljava\/lang\/Object;)Ljava\/lang\/Object;\n+method name invoke descriptor (Ljava\/lang\/Object;[Ljava\/lang\/Object;)Ljava\/lang\/Object; thrownTypes java\/lang\/IllegalAccessException,java\/lang\/reflect\/InvocationTargetException flags 81 runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;@Ljdk\/internal\/vm\/annotation\/ForceInline;@Ljdk\/internal\/vm\/annotation\/IntrinsicCandidate;\n+\n+class name java\/net\/DatagramSocket\n+header extends java\/lang\/Object implements java\/io\/Closeable flags 21 classAnnotations @Ljdk\/Profile+Annotation;(value=I1)\n+\n+class name java\/net\/InetAddress\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/net\/spi\/InetAddressResolver$LookupPolicy outerClass java\/net\/spi\/InetAddressResolver innerClassName LookupPolicy flags 19\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+innerclass innerClass java\/io\/ObjectOutputStream$PutField outerClass java\/io\/ObjectOutputStream innerClassName PutField flags 409\n+innerclass innerClass java\/net\/spi\/InetAddressResolverProvider$Configuration outerClass java\/net\/spi\/InetAddressResolverProvider innerClassName Configuration flags 609\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/net\/ServerSocket\n+-method name setSoTimeout descriptor (I)V\n+-method name getSoTimeout descriptor ()I\n+-method name setReceiveBufferSize descriptor (I)V\n+-method name getReceiveBufferSize descriptor ()I\n+method name setSoTimeout descriptor (I)V thrownTypes java\/net\/SocketException flags 1\n+method name getSoTimeout descriptor ()I thrownTypes java\/io\/IOException flags 1\n+method name setReceiveBufferSize descriptor (I)V thrownTypes java\/net\/SocketException flags 1\n+method name getReceiveBufferSize descriptor ()I thrownTypes java\/net\/SocketException flags 1\n+\n+class name java\/net\/SocketImpl\n+header extends java\/lang\/Object implements java\/net\/SocketOptions flags 421\n+\n+class name java\/net\/spi\/InetAddressResolver\n+header extends java\/lang\/Object nestMembers java\/net\/spi\/InetAddressResolver$LookupPolicy flags 601\n+innerclass innerClass java\/net\/spi\/InetAddressResolver$LookupPolicy outerClass java\/net\/spi\/InetAddressResolver innerClassName LookupPolicy flags 19\n+method name lookupByName descriptor (Ljava\/lang\/String;Ljava\/net\/spi\/InetAddressResolver$LookupPolicy;)Ljava\/util\/stream\/Stream; thrownTypes java\/net\/UnknownHostException flags 401 signature (Ljava\/lang\/String;Ljava\/net\/spi\/InetAddressResolver$LookupPolicy;)Ljava\/util\/stream\/Stream<Ljava\/net\/InetAddress;>;\n+method name lookupByAddress descriptor ([B)Ljava\/lang\/String; thrownTypes java\/net\/UnknownHostException flags 401\n+\n+class name java\/net\/spi\/InetAddressResolver$LookupPolicy\n+header extends java\/lang\/Object nestHost java\/net\/spi\/InetAddressResolver flags 31\n+innerclass innerClass java\/net\/spi\/InetAddressResolver$LookupPolicy outerClass java\/net\/spi\/InetAddressResolver innerClassName LookupPolicy flags 19\n+field name IPV4 descriptor I constantValue 1 flags 19\n+field name IPV6 descriptor I constantValue 2 flags 19\n+field name IPV4_FIRST descriptor I constantValue 4 flags 19\n+field name IPV6_FIRST descriptor I constantValue 8 flags 19\n+method name of descriptor (I)Ljava\/net\/spi\/InetAddressResolver$LookupPolicy; flags 9\n+method name characteristics descriptor ()I flags 1\n+\n+class name java\/net\/spi\/InetAddressResolverProvider\n+header extends java\/lang\/Object nestMembers java\/net\/spi\/InetAddressResolverProvider$Configuration flags 421\n+innerclass innerClass java\/net\/spi\/InetAddressResolverProvider$Configuration outerClass java\/net\/spi\/InetAddressResolverProvider innerClassName Configuration flags 609\n+method name get descriptor (Ljava\/net\/spi\/InetAddressResolverProvider$Configuration;)Ljava\/net\/spi\/InetAddressResolver; flags 401\n+method name name descriptor ()Ljava\/lang\/String; flags 401\n+method name <init> descriptor ()V flags 4\n+\n+class name java\/net\/spi\/InetAddressResolverProvider$Configuration\n+header extends java\/lang\/Object nestHost java\/net\/spi\/InetAddressResolverProvider sealed true flags 601\n+innerclass innerClass java\/net\/spi\/InetAddressResolverProvider$Configuration outerClass java\/net\/spi\/InetAddressResolverProvider innerClassName Configuration flags 609\n+method name builtinResolver descriptor ()Ljava\/net\/spi\/InetAddressResolver; flags 401\n+method name lookupLocalHostName descriptor ()Ljava\/lang\/String; flags 401\n+\n+class name java\/net\/spi\/URLStreamHandlerProvider\n+header extends java\/lang\/Object implements java\/net\/URLStreamHandlerFactory flags 421\n+\n+class name java\/nio\/CharBuffer\n+header extends java\/nio\/Buffer implements java\/lang\/Comparable,java\/lang\/Appendable,java\/lang\/CharSequence,java\/lang\/Readable flags 421 signature Ljava\/nio\/Buffer;Ljava\/lang\/Comparable<Ljava\/nio\/CharBuffer;>;Ljava\/lang\/Appendable;Ljava\/lang\/CharSequence;Ljava\/lang\/Readable;\n+innerclass innerClass java\/util\/Spliterator$OfInt outerClass java\/util\/Spliterator innerClassName OfInt flags 609\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/nio\/charset\/Charset\n+method name forName descriptor (Ljava\/lang\/String;Ljava\/nio\/charset\/Charset;)Ljava\/nio\/charset\/Charset; flags 9\n+\n+class name java\/security\/Certificate\n+header extends java\/lang\/Object flags 601 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(forRemoval=Ztrue,since=\"1.2\")\n+\n+class name java\/security\/Identity\n+header extends java\/lang\/Object implements java\/security\/Principal,java\/io\/Serializable flags 421 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(forRemoval=Ztrue,since=\"1.2\")\n+\n+class name java\/security\/KeyStore\n+method name getAttributes descriptor (Ljava\/lang\/String;)Ljava\/util\/Set; thrownTypes java\/security\/KeyStoreException flags 11 signature (Ljava\/lang\/String;)Ljava\/util\/Set<Ljava\/security\/KeyStore$Entry$Attribute;>;\n+\n+class name java\/security\/KeyStoreSpi\n+header extends java\/lang\/Object flags 421\n+innerclass innerClass java\/security\/KeyStore$LoadStoreParameter outerClass java\/security\/KeyStore innerClassName LoadStoreParameter flags 609\n+innerclass innerClass java\/security\/KeyStore$ProtectionParameter outerClass java\/security\/KeyStore innerClassName ProtectionParameter flags 609\n+innerclass innerClass java\/security\/KeyStore$PasswordProtection outerClass java\/security\/KeyStore innerClassName PasswordProtection flags 9\n+innerclass innerClass java\/security\/KeyStore$CallbackHandlerProtection outerClass java\/security\/KeyStore innerClassName CallbackHandlerProtection flags 9\n+innerclass innerClass java\/security\/KeyStore$TrustedCertificateEntry outerClass java\/security\/KeyStore innerClassName TrustedCertificateEntry flags 19\n+innerclass innerClass java\/security\/KeyStore$PrivateKeyEntry outerClass java\/security\/KeyStore innerClassName PrivateKeyEntry flags 19\n+innerclass innerClass java\/security\/KeyStore$SecretKeyEntry outerClass java\/security\/KeyStore innerClassName SecretKeyEntry flags 19\n+innerclass innerClass java\/security\/KeyStore$Entry outerClass java\/security\/KeyStore innerClassName Entry flags 609\n+innerclass innerClass java\/security\/KeyStore$Entry$Attribute outerClass java\/security\/KeyStore$Entry innerClassName Attribute flags 609\n+method name engineGetAttributes descriptor (Ljava\/lang\/String;)Ljava\/util\/Set; flags 1 signature (Ljava\/lang\/String;)Ljava\/util\/Set<Ljava\/security\/KeyStore$Entry$Attribute;>;\n+\n+class name java\/security\/SecureRandomParameters\n+header extends java\/lang\/Object flags 601\n+\n+class name java\/security\/SignedObject\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 31\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+\n+class name java\/security\/cert\/CertificateRevokedException\n+header extends java\/security\/cert\/CertificateException flags 21\n+innerclass innerClass java\/util\/Map$Entry outerClass java\/util\/Map innerClassName Entry flags 609\n+\n+class name java\/security\/cert\/URICertStoreParameters\n+header extends java\/lang\/Object implements java\/security\/cert\/CertStoreParameters flags 31\n+\n+class name java\/security\/interfaces\/RSAKey\n+-method name getParams descriptor ()Ljava\/security\/spec\/AlgorithmParameterSpec;\n+method name getParams descriptor ()Ljava\/security\/spec\/AlgorithmParameterSpec; flags 1\n+\n+class name java\/security\/spec\/MGF1ParameterSpec\n+-field name SHA512_224 descriptor Ljava\/security\/spec\/MGF1ParameterSpec;\n+-field name SHA512_256 descriptor Ljava\/security\/spec\/MGF1ParameterSpec;\n+field name SHA512_224 descriptor Ljava\/security\/spec\/MGF1ParameterSpec; flags 19\n+field name SHA512_256 descriptor Ljava\/security\/spec\/MGF1ParameterSpec; flags 19\n+\n+class name java\/security\/spec\/PSSParameterSpec\n+-field name TRAILER_FIELD_BC descriptor I\n+-method name toString descriptor ()Ljava\/lang\/String;\n+field name TRAILER_FIELD_BC descriptor I constantValue 1 flags 19\n+method name toString descriptor ()Ljava\/lang\/String; flags 1\n+\n+class name java\/security\/spec\/RSAKeyGenParameterSpec\n+-method name <init> descriptor (ILjava\/math\/BigInteger;Ljava\/security\/spec\/AlgorithmParameterSpec;)V\n+-method name getKeyParams descriptor ()Ljava\/security\/spec\/AlgorithmParameterSpec;\n+method name <init> descriptor (ILjava\/math\/BigInteger;Ljava\/security\/spec\/AlgorithmParameterSpec;)V flags 1\n+method name getKeyParams descriptor ()Ljava\/security\/spec\/AlgorithmParameterSpec; flags 1\n+\n+class name java\/security\/spec\/RSAMultiPrimePrivateCrtKeySpec\n+-method name <init> descriptor (Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;[Ljava\/security\/spec\/RSAOtherPrimeInfo;Ljava\/security\/spec\/AlgorithmParameterSpec;)V\n+method name <init> descriptor (Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;[Ljava\/security\/spec\/RSAOtherPrimeInfo;Ljava\/security\/spec\/AlgorithmParameterSpec;)V flags 1\n+\n+class name java\/security\/spec\/RSAPrivateCrtKeySpec\n+-method name <init> descriptor (Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/security\/spec\/AlgorithmParameterSpec;)V\n+method name <init> descriptor (Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/security\/spec\/AlgorithmParameterSpec;)V flags 1\n+\n+class name java\/security\/spec\/RSAPrivateKeySpec\n+-method name <init> descriptor (Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/security\/spec\/AlgorithmParameterSpec;)V\n+-method name getParams descriptor ()Ljava\/security\/spec\/AlgorithmParameterSpec;\n+method name <init> descriptor (Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/security\/spec\/AlgorithmParameterSpec;)V flags 1\n+method name getParams descriptor ()Ljava\/security\/spec\/AlgorithmParameterSpec; flags 1\n+\n+class name java\/security\/spec\/RSAPublicKeySpec\n+-method name <init> descriptor (Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/security\/spec\/AlgorithmParameterSpec;)V\n+-method name getParams descriptor ()Ljava\/security\/spec\/AlgorithmParameterSpec;\n+method name <init> descriptor (Ljava\/math\/BigInteger;Ljava\/math\/BigInteger;Ljava\/security\/spec\/AlgorithmParameterSpec;)V flags 1\n+method name getParams descriptor ()Ljava\/security\/spec\/AlgorithmParameterSpec; flags 1\n+\n+class name java\/text\/DateFormatSymbols\n+header extends java\/lang\/Object implements java\/io\/Serializable,java\/lang\/Cloneable flags 21\n+innerclass innerClass java\/util\/Locale$Category outerClass java\/util\/Locale innerClassName Category flags 4019\n+\n+class name java\/text\/RuleBasedCollator\n+header extends java\/text\/Collator flags 21\n+innerclass innerClass java\/text\/Normalizer$Form outerClass java\/text\/Normalizer innerClassName Form flags 4019\n+\n+class name java\/time\/Duration\n+method name isPositive descriptor ()Z flags 1\n+\n+class name java\/time\/chrono\/ChronoLocalDate\n+header extends java\/lang\/Object implements java\/time\/temporal\/Temporal,java\/time\/temporal\/TemporalAdjuster,java\/lang\/Comparable flags 601 signature Ljava\/lang\/Object;Ljava\/time\/temporal\/Temporal;Ljava\/time\/temporal\/TemporalAdjuster;Ljava\/lang\/Comparable<Ljava\/time\/chrono\/ChronoLocalDate;>;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/time\/chrono\/ChronoLocalDateTime\n+header extends java\/lang\/Object implements java\/time\/temporal\/Temporal,java\/time\/temporal\/TemporalAdjuster,java\/lang\/Comparable flags 601 signature <D::Ljava\/time\/chrono\/ChronoLocalDate;>Ljava\/lang\/Object;Ljava\/time\/temporal\/Temporal;Ljava\/time\/temporal\/TemporalAdjuster;Ljava\/lang\/Comparable<Ljava\/time\/chrono\/ChronoLocalDateTime<*>;>;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/time\/format\/DecimalStyle\n+header extends java\/lang\/Object flags 31\n+innerclass innerClass java\/util\/Locale$Category outerClass java\/util\/Locale innerClassName Category flags 4019\n+\n+class name java\/time\/temporal\/TemporalAdjusters\n+header extends java\/lang\/Object flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/Comparator\n+header extends java\/lang\/Object flags 601 signature <T:Ljava\/lang\/Object;>Ljava\/lang\/Object; runtimeAnnotations @Ljava\/lang\/FunctionalInterface;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/DoubleSummaryStatistics\n+header extends java\/lang\/Object implements java\/util\/function\/DoubleConsumer flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/GregorianCalendar\n+header extends java\/util\/Calendar flags 21\n+innerclass innerClass java\/util\/Locale$Category outerClass java\/util\/Locale innerClassName Category flags 4019\n+\n+class name java\/util\/HashMap\n+header extends java\/util\/AbstractMap implements java\/util\/Map,java\/lang\/Cloneable,java\/io\/Serializable flags 21 signature <K:Ljava\/lang\/Object;V:Ljava\/lang\/Object;>Ljava\/util\/AbstractMap<TK;TV;>;Ljava\/util\/Map<TK;TV;>;Ljava\/lang\/Cloneable;Ljava\/io\/Serializable;\n+innerclass innerClass java\/util\/Map$Entry outerClass java\/util\/Map innerClassName Entry flags 609\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+\n+class name java\/util\/HashSet\n+header extends java\/util\/AbstractSet implements java\/util\/Set,java\/lang\/Cloneable,java\/io\/Serializable flags 21 signature <E:Ljava\/lang\/Object;>Ljava\/util\/AbstractSet<TE;>;Ljava\/util\/Set<TE;>;Ljava\/lang\/Cloneable;Ljava\/io\/Serializable;\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+innerclass innerClass java\/util\/Map$Entry outerClass java\/util\/Map innerClassName Entry flags 609\n+\n+class name java\/util\/Locale$IsoCountryCode\n+header extends java\/lang\/Enum nestHost java\/util\/Locale sealed true flags 4421 signature Ljava\/lang\/Enum<Ljava\/util\/Locale$IsoCountryCode;>;\n+innerclass innerClass java\/util\/Locale$IsoCountryCode outerClass java\/util\/Locale innerClassName IsoCountryCode flags 4409\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/Observable\n+header extends java\/lang\/Object flags 21 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(since=\"9\")\n+\n+class name java\/util\/Observer\n+header extends java\/lang\/Object flags 601 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(since=\"9\")\n+\n+class name java\/util\/TimeZone\n+header extends java\/lang\/Object implements java\/io\/Serializable,java\/lang\/Cloneable flags 421\n+innerclass innerClass java\/util\/Locale$Category outerClass java\/util\/Locale innerClassName Category flags 4019\n+\n+class name java\/util\/TreeSet\n+header extends java\/util\/AbstractSet implements java\/util\/NavigableSet,java\/lang\/Cloneable,java\/io\/Serializable flags 21 signature <E:Ljava\/lang\/Object;>Ljava\/util\/AbstractSet<TE;>;Ljava\/util\/NavigableSet<TE;>;Ljava\/lang\/Cloneable;Ljava\/io\/Serializable;\n+innerclass innerClass java\/util\/Map$Entry outerClass java\/util\/Map innerClassName Entry flags 609\n+\n+class name java\/util\/concurrent\/ConcurrentMap\n+header extends java\/lang\/Object implements java\/util\/Map flags 601 signature <K:Ljava\/lang\/Object;V:Ljava\/lang\/Object;>Ljava\/lang\/Object;Ljava\/util\/Map<TK;TV;>;\n+innerclass innerClass java\/util\/Map$Entry outerClass java\/util\/Map innerClassName Entry flags 609\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/concurrent\/ConcurrentSkipListSet\n+header extends java\/util\/AbstractSet implements java\/util\/NavigableSet,java\/lang\/Cloneable,java\/io\/Serializable flags 21 signature <E:Ljava\/lang\/Object;>Ljava\/util\/AbstractSet<TE;>;Ljava\/util\/NavigableSet<TE;>;Ljava\/lang\/Cloneable;Ljava\/io\/Serializable;\n+innerclass innerClass java\/util\/Map$Entry outerClass java\/util\/Map innerClassName Entry flags 609\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/concurrent\/CountedCompleter\n+header extends java\/util\/concurrent\/ForkJoinTask flags 421 signature <T:Ljava\/lang\/Object;>Ljava\/util\/concurrent\/ForkJoinTask<TT;>;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/concurrent\/ThreadPoolExecutor\n+-method name finalize descriptor ()V\n+method name finalize descriptor ()V flags 4 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(forRemoval=Ztrue,since=\"9\")\n+\n+class name java\/util\/concurrent\/atomic\/AtomicBoolean\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/concurrent\/atomic\/AtomicReference\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21 signature <V:Ljava\/lang\/Object;>Ljava\/lang\/Object;Ljava\/io\/Serializable;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/concurrent\/atomic\/AtomicReferenceArray\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21 signature <E:Ljava\/lang\/Object;>Ljava\/lang\/Object;Ljava\/io\/Serializable;\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/concurrent\/locks\/StampedLock\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21 classAnnotations @Ljdk\/Profile+Annotation;(value=I1)\n+-method name tryWriteLock descriptor ()J\n+-method name writeLockInterruptibly descriptor ()J\n+-method name tryReadLock descriptor ()J\n+-method name tryReadLock descriptor (JLjava\/util\/concurrent\/TimeUnit;)J\n+-method name readLockInterruptibly descriptor ()J\n+-method name unlock descriptor (J)V\n+method name tryWriteLock descriptor ()J flags 1\n+method name writeLockInterruptibly descriptor ()J thrownTypes java\/lang\/InterruptedException flags 1\n+method name tryReadLock descriptor ()J flags 1\n+method name tryReadLock descriptor (JLjava\/util\/concurrent\/TimeUnit;)J thrownTypes java\/lang\/InterruptedException flags 1\n+method name readLockInterruptibly descriptor ()J thrownTypes java\/lang\/InterruptedException flags 1\n+method name unlock descriptor (J)V flags 1\n+\n+class name java\/util\/function\/BiConsumer\n+header extends java\/lang\/Object flags 601 signature <T:Ljava\/lang\/Object;U:Ljava\/lang\/Object;>Ljava\/lang\/Object; runtimeAnnotations @Ljava\/lang\/FunctionalInterface;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/function\/BiFunction\n+header extends java\/lang\/Object flags 601 signature <T:Ljava\/lang\/Object;U:Ljava\/lang\/Object;R:Ljava\/lang\/Object;>Ljava\/lang\/Object; runtimeAnnotations @Ljava\/lang\/FunctionalInterface;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/function\/BiPredicate\n+header extends java\/lang\/Object flags 601 signature <T:Ljava\/lang\/Object;U:Ljava\/lang\/Object;>Ljava\/lang\/Object; runtimeAnnotations @Ljava\/lang\/FunctionalInterface;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/function\/BinaryOperator\n+header extends java\/lang\/Object implements java\/util\/function\/BiFunction flags 601 signature <T:Ljava\/lang\/Object;>Ljava\/lang\/Object;Ljava\/util\/function\/BiFunction<TT;TT;TT;>; runtimeAnnotations @Ljava\/lang\/FunctionalInterface;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/function\/Consumer\n+header extends java\/lang\/Object flags 601 signature <T:Ljava\/lang\/Object;>Ljava\/lang\/Object; runtimeAnnotations @Ljava\/lang\/FunctionalInterface;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/function\/DoubleConsumer\n+header extends java\/lang\/Object flags 601 runtimeAnnotations @Ljava\/lang\/FunctionalInterface;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/function\/DoublePredicate\n+header extends java\/lang\/Object flags 601 runtimeAnnotations @Ljava\/lang\/FunctionalInterface;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/function\/DoubleUnaryOperator\n+header extends java\/lang\/Object flags 601 runtimeAnnotations @Ljava\/lang\/FunctionalInterface;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/function\/Function\n+header extends java\/lang\/Object flags 601 signature <T:Ljava\/lang\/Object;R:Ljava\/lang\/Object;>Ljava\/lang\/Object; runtimeAnnotations @Ljava\/lang\/FunctionalInterface;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/function\/IntConsumer\n+header extends java\/lang\/Object flags 601 runtimeAnnotations @Ljava\/lang\/FunctionalInterface;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/function\/IntPredicate\n+header extends java\/lang\/Object flags 601 runtimeAnnotations @Ljava\/lang\/FunctionalInterface;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/function\/IntUnaryOperator\n+header extends java\/lang\/Object flags 601 runtimeAnnotations @Ljava\/lang\/FunctionalInterface;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/function\/LongConsumer\n+header extends java\/lang\/Object flags 601 runtimeAnnotations @Ljava\/lang\/FunctionalInterface;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/function\/LongPredicate\n+header extends java\/lang\/Object flags 601 runtimeAnnotations @Ljava\/lang\/FunctionalInterface;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/function\/LongUnaryOperator\n+header extends java\/lang\/Object flags 601 runtimeAnnotations @Ljava\/lang\/FunctionalInterface;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/function\/Predicate\n+header extends java\/lang\/Object flags 601 signature <T:Ljava\/lang\/Object;>Ljava\/lang\/Object; runtimeAnnotations @Ljava\/lang\/FunctionalInterface;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/function\/UnaryOperator\n+header extends java\/lang\/Object implements java\/util\/function\/Function flags 601 signature <T:Ljava\/lang\/Object;>Ljava\/lang\/Object;Ljava\/util\/function\/Function<TT;TT;>; runtimeAnnotations @Ljava\/lang\/FunctionalInterface;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/spi\/AbstractResourceBundleProvider\n+header extends java\/lang\/Object implements java\/util\/spi\/ResourceBundleProvider flags 421\n+innerclass innerClass java\/util\/ResourceBundle$Control outerClass java\/util\/ResourceBundle innerClassName Control flags 9\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/spi\/CurrencyNameProvider\n+header extends java\/util\/spi\/LocaleServiceProvider flags 421\n+innerclass innerClass java\/util\/ResourceBundle$Control outerClass java\/util\/ResourceBundle innerClassName Control flags 9\n+\n+class name java\/util\/spi\/ResourceBundleProvider\n+header extends java\/lang\/Object flags 601\n+\n+class name java\/util\/spi\/ToolProvider\n+header extends java\/lang\/Object flags 601\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/zip\/CRC32C\n+header extends java\/lang\/Object implements java\/util\/zip\/Checksum flags 31\n+\n+class name javax\/crypto\/AEADBadTagException\n+header extends javax\/crypto\/BadPaddingException flags 21\n+\n+class name javax\/crypto\/BadPaddingException\n+header extends java\/security\/GeneralSecurityException flags 21\n+\n+class name javax\/crypto\/CipherInputStream\n+header extends java\/io\/FilterInputStream flags 21\n+\n+class name javax\/crypto\/CipherOutputStream\n+header extends java\/io\/FilterOutputStream flags 21\n+\n+class name javax\/crypto\/CipherSpi\n+header extends java\/lang\/Object flags 421\n+\n+class name javax\/crypto\/EncryptedPrivateKeyInfo\n+header extends java\/lang\/Object flags 21\n+\n+class name javax\/crypto\/ExemptionMechanism\n+header extends java\/lang\/Object flags 21\n+\n+class name javax\/crypto\/ExemptionMechanismException\n+header extends java\/security\/GeneralSecurityException flags 21\n+\n+class name javax\/crypto\/ExemptionMechanismSpi\n+header extends java\/lang\/Object flags 421\n+\n+class name javax\/crypto\/IllegalBlockSizeException\n+header extends java\/security\/GeneralSecurityException flags 21\n+\n+class name javax\/crypto\/KeyAgreement\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/security\/Provider$Service outerClass java\/security\/Provider innerClassName Service flags 9\n+\n+class name javax\/crypto\/KeyAgreementSpi\n+header extends java\/lang\/Object flags 421\n+\n+class name javax\/crypto\/KeyGenerator\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/security\/Provider$Service outerClass java\/security\/Provider innerClassName Service flags 9\n+\n+class name javax\/crypto\/KeyGeneratorSpi\n+header extends java\/lang\/Object flags 421\n+\n+class name javax\/crypto\/Mac\n+header extends java\/lang\/Object implements java\/lang\/Cloneable flags 21\n+innerclass innerClass java\/security\/Provider$Service outerClass java\/security\/Provider innerClassName Service flags 9\n+\n+class name javax\/crypto\/MacSpi\n+header extends java\/lang\/Object flags 421\n+\n+class name javax\/crypto\/NoSuchPaddingException\n+header extends java\/security\/GeneralSecurityException flags 21\n+\n+class name javax\/crypto\/NullCipher\n+header extends javax\/crypto\/Cipher flags 21\n+\n+class name javax\/crypto\/SealedObject\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/crypto\/SecretKey\n+header extends java\/lang\/Object implements java\/security\/Key,javax\/security\/auth\/Destroyable flags 601\n+\n+class name javax\/crypto\/SecretKeyFactory\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/security\/Provider$Service outerClass java\/security\/Provider innerClassName Service flags 9\n+\n+class name javax\/crypto\/SecretKeyFactorySpi\n+header extends java\/lang\/Object flags 421\n+\n+class name javax\/crypto\/ShortBufferException\n+header extends java\/security\/GeneralSecurityException flags 21\n+\n+class name javax\/crypto\/interfaces\/DHKey\n+header extends java\/lang\/Object flags 601\n+\n+class name javax\/crypto\/interfaces\/DHPrivateKey\n+header extends java\/lang\/Object implements javax\/crypto\/interfaces\/DHKey,java\/security\/PrivateKey flags 601\n+\n+class name javax\/crypto\/interfaces\/DHPublicKey\n+header extends java\/lang\/Object implements javax\/crypto\/interfaces\/DHKey,java\/security\/PublicKey flags 601\n+\n+class name javax\/crypto\/interfaces\/PBEKey\n+header extends java\/lang\/Object implements javax\/crypto\/SecretKey flags 601\n+\n+class name javax\/crypto\/spec\/DESKeySpec\n+header extends java\/lang\/Object implements java\/security\/spec\/KeySpec flags 21\n+\n+class name javax\/crypto\/spec\/DESedeKeySpec\n+header extends java\/lang\/Object implements java\/security\/spec\/KeySpec flags 21\n+\n+class name javax\/crypto\/spec\/DHGenParameterSpec\n+header extends java\/lang\/Object implements java\/security\/spec\/AlgorithmParameterSpec flags 21\n+\n+class name javax\/crypto\/spec\/DHParameterSpec\n+header extends java\/lang\/Object implements java\/security\/spec\/AlgorithmParameterSpec flags 21\n+\n+class name javax\/crypto\/spec\/DHPrivateKeySpec\n+header extends java\/lang\/Object implements java\/security\/spec\/KeySpec flags 21\n+\n+class name javax\/crypto\/spec\/DHPublicKeySpec\n+header extends java\/lang\/Object implements java\/security\/spec\/KeySpec flags 21\n+\n+class name javax\/crypto\/spec\/GCMParameterSpec\n+header extends java\/lang\/Object implements java\/security\/spec\/AlgorithmParameterSpec flags 21\n+\n+class name javax\/crypto\/spec\/IvParameterSpec\n+header extends java\/lang\/Object implements java\/security\/spec\/AlgorithmParameterSpec flags 21\n+\n+class name javax\/crypto\/spec\/OAEPParameterSpec\n+header extends java\/lang\/Object implements java\/security\/spec\/AlgorithmParameterSpec flags 21\n+innerclass innerClass javax\/crypto\/spec\/PSource$PSpecified outerClass javax\/crypto\/spec\/PSource innerClassName PSpecified flags 19\n+\n+class name javax\/crypto\/spec\/PBEKeySpec\n+header extends java\/lang\/Object implements java\/security\/spec\/KeySpec flags 21\n+\n+class name javax\/crypto\/spec\/PBEParameterSpec\n+header extends java\/lang\/Object implements java\/security\/spec\/AlgorithmParameterSpec flags 21\n+\n+class name javax\/crypto\/spec\/RC2ParameterSpec\n+header extends java\/lang\/Object implements java\/security\/spec\/AlgorithmParameterSpec flags 21\n+\n+class name javax\/crypto\/spec\/RC5ParameterSpec\n+header extends java\/lang\/Object implements java\/security\/spec\/AlgorithmParameterSpec flags 21\n+\n+class name javax\/crypto\/spec\/SecretKeySpec\n+header extends java\/lang\/Object implements java\/security\/spec\/KeySpec,javax\/crypto\/SecretKey flags 21\n+\n+class name javax\/security\/auth\/Subject\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 31\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+-method name doAs descriptor (Ljavax\/security\/auth\/Subject;Ljava\/security\/PrivilegedAction;)Ljava\/lang\/Object;\n+-method name doAs descriptor (Ljavax\/security\/auth\/Subject;Ljava\/security\/PrivilegedExceptionAction;)Ljava\/lang\/Object;\n+method name current descriptor ()Ljavax\/security\/auth\/Subject; flags 9\n+method name callAs descriptor (Ljavax\/security\/auth\/Subject;Ljava\/util\/concurrent\/Callable;)Ljava\/lang\/Object; thrownTypes java\/util\/concurrent\/CompletionException flags 9 signature <T:Ljava\/lang\/Object;>(Ljavax\/security\/auth\/Subject;Ljava\/util\/concurrent\/Callable<TT;>;)TT;\n+method name doAs descriptor (Ljavax\/security\/auth\/Subject;Ljava\/security\/PrivilegedAction;)Ljava\/lang\/Object; flags 9 deprecated true signature <T:Ljava\/lang\/Object;>(Ljavax\/security\/auth\/Subject;Ljava\/security\/PrivilegedAction<TT;>;)TT; runtimeAnnotations @Ljava\/lang\/Deprecated;(forRemoval=Ztrue,since=\"18\")\n+method name doAs descriptor (Ljavax\/security\/auth\/Subject;Ljava\/security\/PrivilegedExceptionAction;)Ljava\/lang\/Object; thrownTypes java\/security\/PrivilegedActionException flags 9 deprecated true signature <T:Ljava\/lang\/Object;>(Ljavax\/security\/auth\/Subject;Ljava\/security\/PrivilegedExceptionAction<TT;>;)TT; runtimeAnnotations @Ljava\/lang\/Deprecated;(forRemoval=Ztrue,since=\"18\")\n+\n+class name javax\/security\/auth\/login\/LoginContext\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass javax\/security\/auth\/login\/AppConfigurationEntry$LoginModuleControlFlag outerClass javax\/security\/auth\/login\/AppConfigurationEntry innerClassName LoginModuleControlFlag flags 9\n+innerclass innerClass java\/util\/ServiceLoader$Provider outerClass java\/util\/ServiceLoader innerClassName Provider flags 609\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name jdk\/internal\/vm\/vector\/VectorSupport\n+header extends java\/lang\/Object nestMembers jdk\/internal\/vm\/vector\/VectorSupport$VectorMask,jdk\/internal\/vm\/vector\/VectorSupport$VectorShuffle,jdk\/internal\/vm\/vector\/VectorSupport$Vector,jdk\/internal\/vm\/vector\/VectorSupport$VectorPayload,jdk\/internal\/vm\/vector\/VectorSupport$VectorSpecies flags 21\n+innerclass innerClass jdk\/internal\/vm\/vector\/VectorSupport$VectorSpecies outerClass jdk\/internal\/vm\/vector\/VectorSupport innerClassName VectorSpecies flags 9\n+innerclass innerClass jdk\/internal\/vm\/vector\/VectorSupport$VectorPayload outerClass jdk\/internal\/vm\/vector\/VectorSupport innerClassName VectorPayload flags 9\n+innerclass innerClass jdk\/internal\/vm\/vector\/VectorSupport$VectorShuffle outerClass jdk\/internal\/vm\/vector\/VectorSupport innerClassName VectorShuffle flags 9\n+innerclass innerClass jdk\/internal\/vm\/vector\/VectorSupport$Vector outerClass jdk\/internal\/vm\/vector\/VectorSupport innerClassName Vector flags 9\n+innerclass innerClass jdk\/internal\/vm\/vector\/VectorSupport$VectorMask outerClass jdk\/internal\/vm\/vector\/VectorSupport innerClassName VectorMask flags 9\n+-method name broadcastCoerced descriptor (Ljava\/lang\/Class;Ljava\/lang\/Class;IJLjdk\/internal\/vm\/vector\/VectorSupport$VectorSpecies;Ljdk\/internal\/vm\/vector\/VectorSupport$BroadcastOperation;)Ljava\/lang\/Object;\n+-method name shuffleIota descriptor (Ljava\/lang\/Class;Ljava\/lang\/Class;Ljdk\/internal\/vm\/vector\/VectorSupport$VectorSpecies;IIIILjdk\/internal\/vm\/vector\/VectorSupport$ShuffleIotaOperation;)Ljdk\/internal\/vm\/vector\/VectorSupport$VectorShuffle;\n+-method name shuffleToVector descriptor (Ljava\/lang\/Class;Ljava\/lang\/Class;Ljava\/lang\/Class;Ljdk\/internal\/vm\/vector\/VectorSupport$VectorShuffle;ILjdk\/internal\/vm\/vector\/VectorSupport$ShuffleToVectorOperation;)Ljava\/lang\/Object;\n+-method name indexVector descriptor (Ljava\/lang\/Class;Ljava\/lang\/Class;ILjdk\/internal\/vm\/vector\/VectorSupport$Vector;ILjdk\/internal\/vm\/vector\/VectorSupport$VectorSpecies;Ljdk\/internal\/vm\/vector\/VectorSupport$IndexOperation;)Ljdk\/internal\/vm\/vector\/VectorSupport$Vector;\n+-method name reductionCoerced descriptor (ILjava\/lang\/Class;Ljava\/lang\/Class;ILjdk\/internal\/vm\/vector\/VectorSupport$Vector;Ljava\/util\/function\/Function;)J\n+-method name extract descriptor (Ljava\/lang\/Class;Ljava\/lang\/Class;ILjdk\/internal\/vm\/vector\/VectorSupport$Vector;ILjdk\/internal\/vm\/vector\/VectorSupport$VecExtractOp;)J\n+-method name insert descriptor (Ljava\/lang\/Class;Ljava\/lang\/Class;ILjdk\/internal\/vm\/vector\/VectorSupport$Vector;IJLjdk\/internal\/vm\/vector\/VectorSupport$VecInsertOp;)Ljdk\/internal\/vm\/vector\/VectorSupport$Vector;\n+-method name unaryOp descriptor (ILjava\/lang\/Class;Ljava\/lang\/Class;ILjava\/lang\/Object;Ljava\/util\/function\/Function;)Ljava\/lang\/Object;\n+-method name binaryOp descriptor (ILjava\/lang\/Class;Ljava\/lang\/Class;ILjava\/lang\/Object;Ljava\/lang\/Object;Ljava\/util\/function\/BiFunction;)Ljava\/lang\/Object;\n+-method name ternaryOp descriptor (ILjava\/lang\/Class;Ljava\/lang\/Class;ILjava\/lang\/Object;Ljava\/lang\/Object;Ljava\/lang\/Object;Ljdk\/internal\/vm\/vector\/VectorSupport$TernaryOperation;)Ljava\/lang\/Object;\n+-method name load descriptor (Ljava\/lang\/Class;Ljava\/lang\/Class;ILjava\/lang\/Object;JLjava\/lang\/Object;ILjdk\/internal\/vm\/vector\/VectorSupport$VectorSpecies;Ljdk\/internal\/vm\/vector\/VectorSupport$LoadOperation;)Ljava\/lang\/Object;\n+-method name loadWithMap descriptor (Ljava\/lang\/Class;Ljava\/lang\/Class;ILjava\/lang\/Class;Ljava\/lang\/Object;JLjdk\/internal\/vm\/vector\/VectorSupport$Vector;Ljava\/lang\/Object;I[IILjdk\/internal\/vm\/vector\/VectorSupport$VectorSpecies;Ljdk\/internal\/vm\/vector\/VectorSupport$LoadVectorOperationWithMap;)Ljdk\/internal\/vm\/vector\/VectorSupport$Vector;\n+-method name storeWithMap descriptor (Ljava\/lang\/Class;Ljava\/lang\/Class;ILjava\/lang\/Class;Ljava\/lang\/Object;JLjdk\/internal\/vm\/vector\/VectorSupport$Vector;Ljdk\/internal\/vm\/vector\/VectorSupport$Vector;Ljava\/lang\/Object;I[IILjdk\/internal\/vm\/vector\/VectorSupport$StoreVectorOperationWithMap;)V\n+-method name test descriptor (ILjava\/lang\/Class;Ljava\/lang\/Class;ILjava\/lang\/Object;Ljava\/lang\/Object;Ljava\/util\/function\/BiFunction;)Z\n+-method name compare descriptor (ILjava\/lang\/Class;Ljava\/lang\/Class;Ljava\/lang\/Class;ILjdk\/internal\/vm\/vector\/VectorSupport$Vector;Ljdk\/internal\/vm\/vector\/VectorSupport$Vector;Ljdk\/internal\/vm\/vector\/VectorSupport$VectorCompareOp;)Ljdk\/internal\/vm\/vector\/VectorSupport$VectorMask;\n+-method name rearrangeOp descriptor (Ljava\/lang\/Class;Ljava\/lang\/Class;Ljava\/lang\/Class;ILjdk\/internal\/vm\/vector\/VectorSupport$Vector;Ljdk\/internal\/vm\/vector\/VectorSupport$VectorShuffle;Ljdk\/internal\/vm\/vector\/VectorSupport$VectorRearrangeOp;)Ljdk\/internal\/vm\/vector\/VectorSupport$Vector;\n+-method name blend descriptor (Ljava\/lang\/Class;Ljava\/lang\/Class;Ljava\/lang\/Class;ILjdk\/internal\/vm\/vector\/VectorSupport$Vector;Ljdk\/internal\/vm\/vector\/VectorSupport$Vector;Ljdk\/internal\/vm\/vector\/VectorSupport$VectorMask;Ljdk\/internal\/vm\/vector\/VectorSupport$VectorBlendOp;)Ljdk\/internal\/vm\/vector\/VectorSupport$Vector;\n+-method name broadcastInt descriptor (ILjava\/lang\/Class;Ljava\/lang\/Class;ILjdk\/internal\/vm\/vector\/VectorSupport$Vector;ILjdk\/internal\/vm\/vector\/VectorSupport$VectorBroadcastIntOp;)Ljdk\/internal\/vm\/vector\/VectorSupport$Vector;\n+-method name maybeRebox descriptor (Ljava\/lang\/Object;)Ljava\/lang\/Object;\n+-method name maskReductionCoerced descriptor (ILjava\/lang\/Class;Ljava\/lang\/Class;ILjava\/lang\/Object;Ljdk\/internal\/vm\/vector\/VectorSupport$VectorMaskOp;)I\n+field name VECTOR_OP_MASK_TOLONG descriptor I constantValue 22 flags 19\n+field name VECTOR_OP_LROTATE descriptor I constantValue 23 flags 19\n+field name VECTOR_OP_RROTATE descriptor I constantValue 24 flags 19\n+method name broadcastCoerced descriptor (Ljava\/lang\/Class;Ljava\/lang\/Class;IJLjdk\/internal\/vm\/vector\/VectorSupport$VectorSpecies;Ljdk\/internal\/vm\/vector\/VectorSupport$BroadcastOperation;)Ljdk\/internal\/vm\/vector\/VectorSupport$VectorPayload; flags 9 signature <VM:Ljdk\/internal\/vm\/vector\/VectorSupport$VectorPayload;S:Ljdk\/internal\/vm\/vector\/VectorSupport$VectorSpecies<TE;>;E:Ljava\/lang\/Object;>(Ljava\/lang\/Class<+TVM;>;Ljava\/lang\/Class<TE;>;IJTS;Ljdk\/internal\/vm\/vector\/VectorSupport$BroadcastOperation<TVM;TS;>;)TVM; runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/IntrinsicCandidate;\n+method name shuffleIota descriptor (Ljava\/lang\/Class;Ljava\/lang\/Class;Ljdk\/internal\/vm\/vector\/VectorSupport$VectorSpecies;IIIILjdk\/internal\/vm\/vector\/VectorSupport$ShuffleIotaOperation;)Ljdk\/internal\/vm\/vector\/VectorSupport$VectorShuffle; flags 9 signature <E:Ljava\/lang\/Object;S:Ljdk\/internal\/vm\/vector\/VectorSupport$VectorSpecies<TE;>;SH:Ljdk\/internal\/vm\/vector\/VectorSupport$VectorShuffle<TE;>;>(Ljava\/lang\/Class<TE;>;Ljava\/lang\/Class<+TSH;>;TS;IIIILjdk\/internal\/vm\/vector\/VectorSupport$ShuffleIotaOperation<TS;TSH;>;)TSH; runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/IntrinsicCandidate;\n+method name shuffleToVector descriptor (Ljava\/lang\/Class;Ljava\/lang\/Class;Ljava\/lang\/Class;Ljdk\/internal\/vm\/vector\/VectorSupport$VectorShuffle;ILjdk\/internal\/vm\/vector\/VectorSupport$ShuffleToVectorOperation;)Ljdk\/internal\/vm\/vector\/VectorSupport$Vector; flags 9 signature <V:Ljdk\/internal\/vm\/vector\/VectorSupport$Vector<TE;>;SH:Ljdk\/internal\/vm\/vector\/VectorSupport$VectorShuffle<TE;>;E:Ljava\/lang\/Object;>(Ljava\/lang\/Class<+Ljdk\/internal\/vm\/vector\/VectorSupport$Vector<TE;>;>;Ljava\/lang\/Class<TE;>;Ljava\/lang\/Class<+TSH;>;TSH;ILjdk\/internal\/vm\/vector\/VectorSupport$ShuffleToVectorOperation<TV;TSH;>;)TV; runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/IntrinsicCandidate;\n+method name indexVector descriptor (Ljava\/lang\/Class;Ljava\/lang\/Class;ILjdk\/internal\/vm\/vector\/VectorSupport$Vector;ILjdk\/internal\/vm\/vector\/VectorSupport$VectorSpecies;Ljdk\/internal\/vm\/vector\/VectorSupport$IndexOperation;)Ljdk\/internal\/vm\/vector\/VectorSupport$Vector; flags 9 signature <V:Ljdk\/internal\/vm\/vector\/VectorSupport$Vector<TE;>;E:Ljava\/lang\/Object;S:Ljdk\/internal\/vm\/vector\/VectorSupport$VectorSpecies<TE;>;>(Ljava\/lang\/Class<+TV;>;Ljava\/lang\/Class<TE;>;ITV;ITS;Ljdk\/internal\/vm\/vector\/VectorSupport$IndexOperation<TV;TS;>;)TV;\n+method name reductionCoerced descriptor (ILjava\/lang\/Class;Ljava\/lang\/Class;Ljava\/lang\/Class;ILjdk\/internal\/vm\/vector\/VectorSupport$Vector;Ljdk\/internal\/vm\/vector\/VectorSupport$VectorMask;Ljdk\/internal\/vm\/vector\/VectorSupport$ReductionOperation;)J flags 9 signature <V:Ljdk\/internal\/vm\/vector\/VectorSupport$Vector<TE;>;M:Ljdk\/internal\/vm\/vector\/VectorSupport$VectorMask<TE;>;E:Ljava\/lang\/Object;>(ILjava\/lang\/Class<+TV;>;Ljava\/lang\/Class<+TM;>;Ljava\/lang\/Class<TE;>;ITV;TM;Ljdk\/internal\/vm\/vector\/VectorSupport$ReductionOperation<TV;TM;>;)J runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/IntrinsicCandidate;\n+method name extract descriptor (Ljava\/lang\/Class;Ljava\/lang\/Class;ILjdk\/internal\/vm\/vector\/VectorSupport$Vector;ILjdk\/internal\/vm\/vector\/VectorSupport$VecExtractOp;)J flags 9 signature <V:Ljdk\/internal\/vm\/vector\/VectorSupport$Vector<TE;>;E:Ljava\/lang\/Object;>(Ljava\/lang\/Class<+TV;>;Ljava\/lang\/Class<TE;>;ITV;ILjdk\/internal\/vm\/vector\/VectorSupport$VecExtractOp<TV;>;)J runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/IntrinsicCandidate;\n+method name insert descriptor (Ljava\/lang\/Class;Ljava\/lang\/Class;ILjdk\/internal\/vm\/vector\/VectorSupport$Vector;IJLjdk\/internal\/vm\/vector\/VectorSupport$VecInsertOp;)Ljdk\/internal\/vm\/vector\/VectorSupport$Vector; flags 9 signature <V:Ljdk\/internal\/vm\/vector\/VectorSupport$Vector<TE;>;E:Ljava\/lang\/Object;>(Ljava\/lang\/Class<+TV;>;Ljava\/lang\/Class<TE;>;ITV;IJLjdk\/internal\/vm\/vector\/VectorSupport$VecInsertOp<TV;>;)TV; runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/IntrinsicCandidate;\n+method name unaryOp descriptor (ILjava\/lang\/Class;Ljava\/lang\/Class;Ljava\/lang\/Class;ILjdk\/internal\/vm\/vector\/VectorSupport$Vector;Ljdk\/internal\/vm\/vector\/VectorSupport$VectorMask;Ljdk\/internal\/vm\/vector\/VectorSupport$UnaryOperation;)Ljdk\/internal\/vm\/vector\/VectorSupport$Vector; flags 9 signature <V:Ljdk\/internal\/vm\/vector\/VectorSupport$Vector<TE;>;M:Ljdk\/internal\/vm\/vector\/VectorSupport$VectorMask<TE;>;E:Ljava\/lang\/Object;>(ILjava\/lang\/Class<+TV;>;Ljava\/lang\/Class<+TM;>;Ljava\/lang\/Class<TE;>;ITV;TM;Ljdk\/internal\/vm\/vector\/VectorSupport$UnaryOperation<TV;TM;>;)TV; runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/IntrinsicCandidate;\n+method name binaryOp descriptor (ILjava\/lang\/Class;Ljava\/lang\/Class;Ljava\/lang\/Class;ILjdk\/internal\/vm\/vector\/VectorSupport$VectorPayload;Ljdk\/internal\/vm\/vector\/VectorSupport$VectorPayload;Ljdk\/internal\/vm\/vector\/VectorSupport$VectorMask;Ljdk\/internal\/vm\/vector\/VectorSupport$BinaryOperation;)Ljdk\/internal\/vm\/vector\/VectorSupport$VectorPayload; flags 9 signature <VM:Ljdk\/internal\/vm\/vector\/VectorSupport$VectorPayload;M:Ljdk\/internal\/vm\/vector\/VectorSupport$VectorMask<TE;>;E:Ljava\/lang\/Object;>(ILjava\/lang\/Class<+TVM;>;Ljava\/lang\/Class<+TM;>;Ljava\/lang\/Class<TE;>;ITVM;TVM;TM;Ljdk\/internal\/vm\/vector\/VectorSupport$BinaryOperation<TVM;TM;>;)TVM; runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/IntrinsicCandidate;\n+method name ternaryOp descriptor (ILjava\/lang\/Class;Ljava\/lang\/Class;Ljava\/lang\/Class;ILjdk\/internal\/vm\/vector\/VectorSupport$Vector;Ljdk\/internal\/vm\/vector\/VectorSupport$Vector;Ljdk\/internal\/vm\/vector\/VectorSupport$Vector;Ljdk\/internal\/vm\/vector\/VectorSupport$VectorMask;Ljdk\/internal\/vm\/vector\/VectorSupport$TernaryOperation;)Ljdk\/internal\/vm\/vector\/VectorSupport$Vector; flags 9 signature <V:Ljdk\/internal\/vm\/vector\/VectorSupport$Vector<TE;>;M:Ljdk\/internal\/vm\/vector\/VectorSupport$VectorMask<TE;>;E:Ljava\/lang\/Object;>(ILjava\/lang\/Class<+TV;>;Ljava\/lang\/Class<+TM;>;Ljava\/lang\/Class<TE;>;ITV;TV;TV;TM;Ljdk\/internal\/vm\/vector\/VectorSupport$TernaryOperation<TV;TM;>;)TV; runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/IntrinsicCandidate;\n+method name load descriptor (Ljava\/lang\/Class;Ljava\/lang\/Class;ILjava\/lang\/Object;JLjava\/lang\/Object;ILjdk\/internal\/vm\/vector\/VectorSupport$VectorSpecies;Ljdk\/internal\/vm\/vector\/VectorSupport$LoadOperation;)Ljdk\/internal\/vm\/vector\/VectorSupport$VectorPayload; flags 9 signature <C:Ljava\/lang\/Object;VM:Ljdk\/internal\/vm\/vector\/VectorSupport$VectorPayload;E:Ljava\/lang\/Object;S:Ljdk\/internal\/vm\/vector\/VectorSupport$VectorSpecies<TE;>;>(Ljava\/lang\/Class<+TVM;>;Ljava\/lang\/Class<TE;>;ILjava\/lang\/Object;JTC;ITS;Ljdk\/internal\/vm\/vector\/VectorSupport$LoadOperation<TC;TVM;TS;>;)TVM; runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/IntrinsicCandidate;\n+method name loadMasked descriptor (Ljava\/lang\/Class;Ljava\/lang\/Class;Ljava\/lang\/Class;ILjava\/lang\/Object;JLjdk\/internal\/vm\/vector\/VectorSupport$VectorMask;Ljava\/lang\/Object;ILjdk\/internal\/vm\/vector\/VectorSupport$VectorSpecies;Ljdk\/internal\/vm\/vector\/VectorSupport$LoadVectorMaskedOperation;)Ljdk\/internal\/vm\/vector\/VectorSupport$Vector; flags 9 signature <C:Ljava\/lang\/Object;V:Ljdk\/internal\/vm\/vector\/VectorSupport$Vector<*>;E:Ljava\/lang\/Object;S:Ljdk\/internal\/vm\/vector\/VectorSupport$VectorSpecies<TE;>;M:Ljdk\/internal\/vm\/vector\/VectorSupport$VectorMask<TE;>;>(Ljava\/lang\/Class<+TV;>;Ljava\/lang\/Class<TM;>;Ljava\/lang\/Class<TE;>;ILjava\/lang\/Object;JTM;TC;ITS;Ljdk\/internal\/vm\/vector\/VectorSupport$LoadVectorMaskedOperation<TC;TV;TS;TM;>;)TV; runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/IntrinsicCandidate;\n+method name loadWithMap descriptor (Ljava\/lang\/Class;Ljava\/lang\/Class;Ljava\/lang\/Class;ILjava\/lang\/Class;Ljava\/lang\/Object;JLjdk\/internal\/vm\/vector\/VectorSupport$Vector;Ljdk\/internal\/vm\/vector\/VectorSupport$VectorMask;Ljava\/lang\/Object;I[IILjdk\/internal\/vm\/vector\/VectorSupport$VectorSpecies;Ljdk\/internal\/vm\/vector\/VectorSupport$LoadVectorOperationWithMap;)Ljdk\/internal\/vm\/vector\/VectorSupport$Vector; flags 9 signature <C:Ljava\/lang\/Object;V:Ljdk\/internal\/vm\/vector\/VectorSupport$Vector<*>;W:Ljdk\/internal\/vm\/vector\/VectorSupport$Vector<Ljava\/lang\/Integer;>;S:Ljdk\/internal\/vm\/vector\/VectorSupport$VectorSpecies<TE;>;M:Ljdk\/internal\/vm\/vector\/VectorSupport$VectorMask<TE;>;E:Ljava\/lang\/Object;>(Ljava\/lang\/Class<+TV;>;Ljava\/lang\/Class<TM;>;Ljava\/lang\/Class<TE;>;ILjava\/lang\/Class<+Ljdk\/internal\/vm\/vector\/VectorSupport$Vector<Ljava\/lang\/Integer;>;>;Ljava\/lang\/Object;JTW;TM;TC;I[IITS;Ljdk\/internal\/vm\/vector\/VectorSupport$LoadVectorOperationWithMap<TC;TV;TS;TM;>;)TV; runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/IntrinsicCandidate;\n+method name storeMasked descriptor (Ljava\/lang\/Class;Ljava\/lang\/Class;Ljava\/lang\/Class;ILjava\/lang\/Object;JLjdk\/internal\/vm\/vector\/VectorSupport$Vector;Ljdk\/internal\/vm\/vector\/VectorSupport$VectorMask;Ljava\/lang\/Object;ILjdk\/internal\/vm\/vector\/VectorSupport$StoreVectorMaskedOperation;)V flags 9 signature <C:Ljava\/lang\/Object;V:Ljdk\/internal\/vm\/vector\/VectorSupport$Vector<TE;>;M:Ljdk\/internal\/vm\/vector\/VectorSupport$VectorMask<TE;>;E:Ljava\/lang\/Object;>(Ljava\/lang\/Class<+TV;>;Ljava\/lang\/Class<TM;>;Ljava\/lang\/Class<TE;>;ILjava\/lang\/Object;JTV;TM;TC;ILjdk\/internal\/vm\/vector\/VectorSupport$StoreVectorMaskedOperation<TC;TV;TM;>;)V runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/IntrinsicCandidate;\n+method name storeWithMap descriptor (Ljava\/lang\/Class;Ljava\/lang\/Class;Ljava\/lang\/Class;ILjava\/lang\/Class;Ljava\/lang\/Object;JLjdk\/internal\/vm\/vector\/VectorSupport$Vector;Ljdk\/internal\/vm\/vector\/VectorSupport$Vector;Ljdk\/internal\/vm\/vector\/VectorSupport$VectorMask;Ljava\/lang\/Object;I[IILjdk\/internal\/vm\/vector\/VectorSupport$StoreVectorOperationWithMap;)V flags 9 signature <C:Ljava\/lang\/Object;V:Ljdk\/internal\/vm\/vector\/VectorSupport$Vector<TE;>;W:Ljdk\/internal\/vm\/vector\/VectorSupport$Vector<Ljava\/lang\/Integer;>;M:Ljdk\/internal\/vm\/vector\/VectorSupport$VectorMask<TE;>;E:Ljava\/lang\/Object;>(Ljava\/lang\/Class<+TV;>;Ljava\/lang\/Class<TM;>;Ljava\/lang\/Class<TE;>;ILjava\/lang\/Class<+Ljdk\/internal\/vm\/vector\/VectorSupport$Vector<Ljava\/lang\/Integer;>;>;Ljava\/lang\/Object;JTW;TV;TM;TC;I[IILjdk\/internal\/vm\/vector\/VectorSupport$StoreVectorOperationWithMap<TC;TV;TM;>;)V runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/IntrinsicCandidate;\n+method name test descriptor (ILjava\/lang\/Class;Ljava\/lang\/Class;ILjdk\/internal\/vm\/vector\/VectorSupport$VectorMask;Ljdk\/internal\/vm\/vector\/VectorSupport$VectorMask;Ljava\/util\/function\/BiFunction;)Z flags 9 signature <M:Ljdk\/internal\/vm\/vector\/VectorSupport$VectorMask<TE;>;E:Ljava\/lang\/Object;>(ILjava\/lang\/Class<*>;Ljava\/lang\/Class<*>;ITM;TM;Ljava\/util\/function\/BiFunction<TM;TM;Ljava\/lang\/Boolean;>;)Z runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/IntrinsicCandidate;\n+method name compare descriptor (ILjava\/lang\/Class;Ljava\/lang\/Class;Ljava\/lang\/Class;ILjdk\/internal\/vm\/vector\/VectorSupport$Vector;Ljdk\/internal\/vm\/vector\/VectorSupport$Vector;Ljdk\/internal\/vm\/vector\/VectorSupport$VectorMask;Ljdk\/internal\/vm\/vector\/VectorSupport$VectorCompareOp;)Ljdk\/internal\/vm\/vector\/VectorSupport$VectorMask; flags 9 signature <V:Ljdk\/internal\/vm\/vector\/VectorSupport$Vector<TE;>;M:Ljdk\/internal\/vm\/vector\/VectorSupport$VectorMask<TE;>;E:Ljava\/lang\/Object;>(ILjava\/lang\/Class<+TV;>;Ljava\/lang\/Class<TM;>;Ljava\/lang\/Class<TE;>;ITV;TV;TM;Ljdk\/internal\/vm\/vector\/VectorSupport$VectorCompareOp<TV;TM;>;)TM; runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/IntrinsicCandidate;\n+method name rearrangeOp descriptor (Ljava\/lang\/Class;Ljava\/lang\/Class;Ljava\/lang\/Class;Ljava\/lang\/Class;ILjdk\/internal\/vm\/vector\/VectorSupport$Vector;Ljdk\/internal\/vm\/vector\/VectorSupport$VectorShuffle;Ljdk\/internal\/vm\/vector\/VectorSupport$VectorMask;Ljdk\/internal\/vm\/vector\/VectorSupport$VectorRearrangeOp;)Ljdk\/internal\/vm\/vector\/VectorSupport$Vector; flags 9 signature <V:Ljdk\/internal\/vm\/vector\/VectorSupport$Vector<TE;>;SH:Ljdk\/internal\/vm\/vector\/VectorSupport$VectorShuffle<TE;>;M:Ljdk\/internal\/vm\/vector\/VectorSupport$VectorMask<TE;>;E:Ljava\/lang\/Object;>(Ljava\/lang\/Class<+TV;>;Ljava\/lang\/Class<TSH;>;Ljava\/lang\/Class<TM;>;Ljava\/lang\/Class<TE;>;ITV;TSH;TM;Ljdk\/internal\/vm\/vector\/VectorSupport$VectorRearrangeOp<TV;TSH;TM;>;)TV; runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/IntrinsicCandidate;\n+method name blend descriptor (Ljava\/lang\/Class;Ljava\/lang\/Class;Ljava\/lang\/Class;ILjdk\/internal\/vm\/vector\/VectorSupport$Vector;Ljdk\/internal\/vm\/vector\/VectorSupport$Vector;Ljdk\/internal\/vm\/vector\/VectorSupport$VectorMask;Ljdk\/internal\/vm\/vector\/VectorSupport$VectorBlendOp;)Ljdk\/internal\/vm\/vector\/VectorSupport$Vector; flags 9 signature <V:Ljdk\/internal\/vm\/vector\/VectorSupport$Vector<TE;>;M:Ljdk\/internal\/vm\/vector\/VectorSupport$VectorMask<TE;>;E:Ljava\/lang\/Object;>(Ljava\/lang\/Class<+TV;>;Ljava\/lang\/Class<TM;>;Ljava\/lang\/Class<TE;>;ITV;TV;TM;Ljdk\/internal\/vm\/vector\/VectorSupport$VectorBlendOp<TV;TM;>;)TV; runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/IntrinsicCandidate;\n+method name broadcastInt descriptor (ILjava\/lang\/Class;Ljava\/lang\/Class;Ljava\/lang\/Class;ILjdk\/internal\/vm\/vector\/VectorSupport$Vector;ILjdk\/internal\/vm\/vector\/VectorSupport$VectorMask;Ljdk\/internal\/vm\/vector\/VectorSupport$VectorBroadcastIntOp;)Ljdk\/internal\/vm\/vector\/VectorSupport$Vector; flags 9 signature <V:Ljdk\/internal\/vm\/vector\/VectorSupport$Vector<TE;>;M:Ljdk\/internal\/vm\/vector\/VectorSupport$VectorMask<TE;>;E:Ljava\/lang\/Object;>(ILjava\/lang\/Class<+TV;>;Ljava\/lang\/Class<+TM;>;Ljava\/lang\/Class<TE;>;ITV;ITM;Ljdk\/internal\/vm\/vector\/VectorSupport$VectorBroadcastIntOp<TV;TM;>;)TV; runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/IntrinsicCandidate;\n+method name maybeRebox descriptor (Ljdk\/internal\/vm\/vector\/VectorSupport$VectorPayload;)Ljdk\/internal\/vm\/vector\/VectorSupport$VectorPayload; flags 9 signature <VP:Ljdk\/internal\/vm\/vector\/VectorSupport$VectorPayload;>(TVP;)TVP; runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/IntrinsicCandidate;\n+method name maskReductionCoerced descriptor (ILjava\/lang\/Class;Ljava\/lang\/Class;ILjdk\/internal\/vm\/vector\/VectorSupport$VectorMask;Ljdk\/internal\/vm\/vector\/VectorSupport$VectorMaskOp;)J flags 9 signature <M:Ljdk\/internal\/vm\/vector\/VectorSupport$VectorMask<TE;>;E:Ljava\/lang\/Object;>(ILjava\/lang\/Class<+TM;>;Ljava\/lang\/Class<*>;ITM;Ljdk\/internal\/vm\/vector\/VectorSupport$VectorMaskOp<TM;>;)J runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/IntrinsicCandidate;\n+\n","filename":"make\/data\/symbols\/java.base-I.sym.txt","additions":742,"deletions":0,"binary":false,"changes":742,"status":"added"},{"patch":"@@ -0,0 +1,140 @@\n+#\n+# Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name javax\/annotation\/processing\/AbstractProcessor\n+header extends java\/lang\/Object implements javax\/annotation\/processing\/Processor flags 421\n+innerclass innerClass javax\/tools\/Diagnostic$Kind outerClass javax\/tools\/Diagnostic innerClassName Kind flags 4019\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/annotation\/processing\/Generated\n+header extends java\/lang\/Object implements java\/lang\/annotation\/Annotation flags 2601 runtimeAnnotations @Ljava\/lang\/annotation\/Documented;@Ljava\/lang\/annotation\/Retention;(value=eLjava\/lang\/annotation\/RetentionPolicy;SOURCE;)@Ljava\/lang\/annotation\/Target;(value={eLjava\/lang\/annotation\/ElementType;PACKAGE;eLjava\/lang\/annotation\/ElementType;TYPE;eLjava\/lang\/annotation\/ElementType;METHOD;eLjava\/lang\/annotation\/ElementType;CONSTRUCTOR;eLjava\/lang\/annotation\/ElementType;FIELD;eLjava\/lang\/annotation\/ElementType;LOCAL_VARIABLE;eLjava\/lang\/annotation\/ElementType;PARAMETER;})\n+\n+class name javax\/annotation\/processing\/Messager\n+method name printError descriptor (Ljava\/lang\/CharSequence;)V flags 1\n+method name printError descriptor (Ljava\/lang\/CharSequence;Ljavax\/lang\/model\/element\/Element;)V flags 1\n+method name printWarning descriptor (Ljava\/lang\/CharSequence;)V flags 1\n+method name printWarning descriptor (Ljava\/lang\/CharSequence;Ljavax\/lang\/model\/element\/Element;)V flags 1\n+method name printNote descriptor (Ljava\/lang\/CharSequence;)V flags 1\n+method name printNote descriptor (Ljava\/lang\/CharSequence;Ljavax\/lang\/model\/element\/Element;)V flags 1\n+\n+class name javax\/lang\/model\/SourceVersion\n+field name RELEASE_18 descriptor Ljavax\/lang\/model\/SourceVersion; flags 4019\n+method name valueOf descriptor (Ljava\/lang\/Runtime$Version;)Ljavax\/lang\/model\/SourceVersion; flags 9\n+method name runtimeVersion descriptor ()Ljava\/lang\/Runtime$Version; flags 1\n+\n+class name javax\/lang\/model\/element\/ExecutableElement\n+method name getEnclosingElement descriptor ()Ljavax\/lang\/model\/element\/Element; flags 401\n+\n+class name javax\/lang\/model\/element\/Modifier\n+header extends java\/lang\/Enum sealed true flags 4021 signature Ljava\/lang\/Enum<Ljavax\/lang\/model\/element\/Modifier;>;\n+\n+class name javax\/lang\/model\/element\/UnknownAnnotationValueException\n+header extends javax\/lang\/model\/UnknownEntityException flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/lang\/model\/element\/UnknownDirectiveException\n+header extends javax\/lang\/model\/UnknownEntityException flags 21\n+innerclass innerClass javax\/lang\/model\/element\/ModuleElement$Directive outerClass javax\/lang\/model\/element\/ModuleElement innerClassName Directive flags 609\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/lang\/model\/element\/UnknownElementException\n+header extends javax\/lang\/model\/UnknownEntityException flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/lang\/model\/type\/MirroredTypeException\n+header extends javax\/lang\/model\/type\/MirroredTypesException flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/lang\/model\/type\/MirroredTypesException\n+header extends java\/lang\/RuntimeException flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/lang\/model\/type\/UnknownTypeException\n+header extends javax\/lang\/model\/UnknownEntityException flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/lang\/model\/util\/AbstractAnnotationValueVisitor14\n+header extends javax\/lang\/model\/util\/AbstractAnnotationValueVisitor9 flags 421 signature <R:Ljava\/lang\/Object;P:Ljava\/lang\/Object;>Ljavax\/lang\/model\/util\/AbstractAnnotationValueVisitor9<TR;TP;>; runtimeAnnotations @Ljavax\/annotation\/processing\/SupportedSourceVersion;(value=eLjavax\/lang\/model\/SourceVersion;RELEASE_18;)\n+\n+class name javax\/lang\/model\/util\/AbstractElementVisitor14\n+header extends javax\/lang\/model\/util\/AbstractElementVisitor9 flags 421 signature <R:Ljava\/lang\/Object;P:Ljava\/lang\/Object;>Ljavax\/lang\/model\/util\/AbstractElementVisitor9<TR;TP;>; runtimeAnnotations @Ljavax\/annotation\/processing\/SupportedSourceVersion;(value=eLjavax\/lang\/model\/SourceVersion;RELEASE_18;)\n+\n+class name javax\/lang\/model\/util\/AbstractTypeVisitor14\n+header extends javax\/lang\/model\/util\/AbstractTypeVisitor9 flags 421 signature <R:Ljava\/lang\/Object;P:Ljava\/lang\/Object;>Ljavax\/lang\/model\/util\/AbstractTypeVisitor9<TR;TP;>; runtimeAnnotations @Ljavax\/annotation\/processing\/SupportedSourceVersion;(value=eLjavax\/lang\/model\/SourceVersion;RELEASE_18;)\n+\n+class name javax\/lang\/model\/util\/AbstractTypeVisitor6\n+header extends java\/lang\/Object implements javax\/lang\/model\/type\/TypeVisitor flags 421 signature <R:Ljava\/lang\/Object;P:Ljava\/lang\/Object;>Ljava\/lang\/Object;Ljavax\/lang\/model\/type\/TypeVisitor<TR;TP;>; runtimeAnnotations @Ljavax\/annotation\/processing\/SupportedSourceVersion;(value=eLjavax\/lang\/model\/SourceVersion;RELEASE_6;)\n+\n+class name javax\/lang\/model\/util\/AbstractTypeVisitor7\n+header extends javax\/lang\/model\/util\/AbstractTypeVisitor6 flags 421 signature <R:Ljava\/lang\/Object;P:Ljava\/lang\/Object;>Ljavax\/lang\/model\/util\/AbstractTypeVisitor6<TR;TP;>; runtimeAnnotations @Ljavax\/annotation\/processing\/SupportedSourceVersion;(value=eLjavax\/lang\/model\/SourceVersion;RELEASE_7;)\n+\n+class name javax\/lang\/model\/util\/AbstractTypeVisitor8\n+header extends javax\/lang\/model\/util\/AbstractTypeVisitor7 flags 421 signature <R:Ljava\/lang\/Object;P:Ljava\/lang\/Object;>Ljavax\/lang\/model\/util\/AbstractTypeVisitor7<TR;TP;>; runtimeAnnotations @Ljavax\/annotation\/processing\/SupportedSourceVersion;(value=eLjavax\/lang\/model\/SourceVersion;RELEASE_8;)\n+\n+class name javax\/lang\/model\/util\/ElementKindVisitor14\n+header extends javax\/lang\/model\/util\/ElementKindVisitor9 flags 21 signature <R:Ljava\/lang\/Object;P:Ljava\/lang\/Object;>Ljavax\/lang\/model\/util\/ElementKindVisitor9<TR;TP;>; runtimeAnnotations @Ljavax\/annotation\/processing\/SupportedSourceVersion;(value=eLjavax\/lang\/model\/SourceVersion;RELEASE_18;)\n+\n+class name javax\/lang\/model\/util\/ElementScanner14\n+header extends javax\/lang\/model\/util\/ElementScanner9 flags 21 signature <R:Ljava\/lang\/Object;P:Ljava\/lang\/Object;>Ljavax\/lang\/model\/util\/ElementScanner9<TR;TP;>; runtimeAnnotations @Ljavax\/annotation\/processing\/SupportedSourceVersion;(value=eLjavax\/lang\/model\/SourceVersion;RELEASE_18;)\n+\n+class name javax\/lang\/model\/util\/Elements\n+method name getOutermostTypeElement descriptor (Ljavax\/lang\/model\/element\/Element;)Ljavax\/lang\/model\/element\/TypeElement; flags 1\n+method name getFileObjectOf descriptor (Ljavax\/lang\/model\/element\/Element;)Ljavax\/tools\/JavaFileObject; flags 1\n+\n+class name javax\/lang\/model\/util\/SimpleAnnotationValueVisitor14\n+header extends javax\/lang\/model\/util\/SimpleAnnotationValueVisitor9 flags 21 signature <R:Ljava\/lang\/Object;P:Ljava\/lang\/Object;>Ljavax\/lang\/model\/util\/SimpleAnnotationValueVisitor9<TR;TP;>; runtimeAnnotations @Ljavax\/annotation\/processing\/SupportedSourceVersion;(value=eLjavax\/lang\/model\/SourceVersion;RELEASE_18;)\n+\n+class name javax\/lang\/model\/util\/SimpleElementVisitor14\n+header extends javax\/lang\/model\/util\/SimpleElementVisitor9 flags 21 signature <R:Ljava\/lang\/Object;P:Ljava\/lang\/Object;>Ljavax\/lang\/model\/util\/SimpleElementVisitor9<TR;TP;>; runtimeAnnotations @Ljavax\/annotation\/processing\/SupportedSourceVersion;(value=eLjavax\/lang\/model\/SourceVersion;RELEASE_18;)\n+\n+class name javax\/lang\/model\/util\/SimpleTypeVisitor14\n+header extends javax\/lang\/model\/util\/SimpleTypeVisitor9 flags 21 signature <R:Ljava\/lang\/Object;P:Ljava\/lang\/Object;>Ljavax\/lang\/model\/util\/SimpleTypeVisitor9<TR;TP;>; runtimeAnnotations @Ljavax\/annotation\/processing\/SupportedSourceVersion;(value=eLjavax\/lang\/model\/SourceVersion;RELEASE_18;)\n+\n+class name javax\/lang\/model\/util\/TypeKindVisitor14\n+header extends javax\/lang\/model\/util\/TypeKindVisitor9 flags 21 signature <R:Ljava\/lang\/Object;P:Ljava\/lang\/Object;>Ljavax\/lang\/model\/util\/TypeKindVisitor9<TR;TP;>; runtimeAnnotations @Ljavax\/annotation\/processing\/SupportedSourceVersion;(value=eLjavax\/lang\/model\/SourceVersion;RELEASE_18;)\n+\n+class name javax\/tools\/DocumentationTool$Location\n+field name SNIPPET_PATH descriptor Ljavax\/tools\/DocumentationTool$Location; flags 4019\n+\n+class name javax\/tools\/ForwardingJavaFileManager\n+method name getJavaFileForOutputForOriginatingFiles descriptor (Ljavax\/tools\/JavaFileManager$Location;Ljava\/lang\/String;Ljavax\/tools\/JavaFileObject$Kind;[Ljavax\/tools\/FileObject;)Ljavax\/tools\/JavaFileObject; thrownTypes java\/io\/IOException flags 81\n+method name getFileForOutputForOriginatingFiles descriptor (Ljavax\/tools\/JavaFileManager$Location;Ljava\/lang\/String;Ljava\/lang\/String;[Ljavax\/tools\/FileObject;)Ljavax\/tools\/FileObject; thrownTypes java\/io\/IOException flags 81\n+\n+class name javax\/tools\/JavaFileManager\n+method name getJavaFileForOutputForOriginatingFiles descriptor (Ljavax\/tools\/JavaFileManager$Location;Ljava\/lang\/String;Ljavax\/tools\/JavaFileObject$Kind;[Ljavax\/tools\/FileObject;)Ljavax\/tools\/JavaFileObject; thrownTypes java\/io\/IOException flags 81\n+method name getFileForOutputForOriginatingFiles descriptor (Ljavax\/tools\/JavaFileManager$Location;Ljava\/lang\/String;Ljava\/lang\/String;[Ljavax\/tools\/FileObject;)Ljavax\/tools\/FileObject; thrownTypes java\/io\/IOException flags 81\n+\n+class name javax\/tools\/SimpleJavaFileObject\n+header extends java\/lang\/Object implements javax\/tools\/JavaFileObject flags 21\n+innerclass innerClass javax\/tools\/JavaFileObject$Kind outerClass javax\/tools\/JavaFileObject innerClassName Kind flags 4019\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/tools\/ToolProvider\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n","filename":"make\/data\/symbols\/java.compiler-I.sym.txt","additions":140,"deletions":0,"binary":false,"changes":140,"status":"added"},{"patch":"@@ -0,0 +1,36 @@\n+#\n+# Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name java\/awt\/datatransfer\/Clipboard\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/datatransfer\/DataFlavor\n+header extends java\/lang\/Object implements java\/io\/Externalizable,java\/lang\/Cloneable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n","filename":"make\/data\/symbols\/java.datatransfer-I.sym.txt","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -0,0 +1,922 @@\n+#\n+# Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name java\/awt\/AWTKeyStroke\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/AttributeValue\n+header extends java\/lang\/Object flags 420\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/BorderLayout\n+header extends java\/lang\/Object implements java\/awt\/LayoutManager2,java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/CheckboxGroup\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/Color\n+header extends java\/lang\/Object implements java\/awt\/Paint,java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/ContainerOrderFocusTraversalPolicy\n+header extends java\/awt\/FocusTraversalPolicy implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/Dimension\n+header extends java\/awt\/geom\/Dimension2D implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/DisplayMode\n+header extends java\/lang\/Object flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/Event\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(since=\"9\")\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/FlowLayout\n+header extends java\/lang\/Object implements java\/awt\/LayoutManager,java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/FontMetrics\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/Graphics\n+header extends java\/lang\/Object flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+-method name finalize descriptor ()V\n+method name finalize descriptor ()V flags 1 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(forRemoval=Ztrue,since=\"9\")\n+\n+class name java\/awt\/GridBagLayoutInfo\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/awt\/Component$BaselineResizeBehavior outerClass java\/awt\/Component innerClassName BaselineResizeBehavior flags 4019\n+\n+class name java\/awt\/GridLayout\n+header extends java\/lang\/Object implements java\/awt\/LayoutManager,java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/HeadlessException\n+header extends java\/lang\/UnsupportedOperationException flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/Insets\n+header extends java\/lang\/Object implements java\/lang\/Cloneable,java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/MenuShortcut\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/Point\n+header extends java\/awt\/geom\/Point2D implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/PrintJob\n+-method name finalize descriptor ()V\n+method name finalize descriptor ()V flags 1 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(forRemoval=Ztrue,since=\"9\")\n+\n+class name java\/awt\/Rectangle\n+header extends java\/awt\/geom\/Rectangle2D implements java\/awt\/Shape,java\/io\/Serializable flags 21\n+innerclass innerClass java\/awt\/geom\/Rectangle2D$Double outerClass java\/awt\/geom\/Rectangle2D innerClassName Double flags 9\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/SystemColor\n+header extends java\/awt\/Color implements java\/io\/Serializable flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/TexturePaint\n+header extends java\/lang\/Object implements java\/awt\/Paint flags 21\n+innerclass innerClass java\/awt\/geom\/Rectangle2D$Double outerClass java\/awt\/geom\/Rectangle2D innerClassName Double flags 9\n+\n+class name java\/awt\/color\/ColorSpace\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/color\/ICC_ColorSpace\n+header extends java\/awt\/color\/ColorSpace flags 21 classAnnotations @Ljdk\/Profile+Annotation;(value=I4)\n+\n+class name java\/awt\/color\/ICC_Profile\n+-method name finalize descriptor ()V\n+\n+class name java\/awt\/desktop\/AboutEvent\n+header extends java\/awt\/desktop\/AppEvent flags 31\n+\n+class name java\/awt\/desktop\/AboutHandler\n+header extends java\/lang\/Object flags 601\n+\n+class name java\/awt\/desktop\/AppEvent\n+header extends java\/util\/EventObject flags 21\n+\n+class name java\/awt\/desktop\/AppForegroundEvent\n+header extends java\/awt\/desktop\/AppEvent flags 31\n+\n+class name java\/awt\/desktop\/AppForegroundListener\n+header extends java\/lang\/Object implements java\/awt\/desktop\/SystemEventListener flags 601\n+\n+class name java\/awt\/desktop\/AppHiddenEvent\n+header extends java\/awt\/desktop\/AppEvent flags 31\n+\n+class name java\/awt\/desktop\/AppHiddenListener\n+header extends java\/lang\/Object implements java\/awt\/desktop\/SystemEventListener flags 601\n+\n+class name java\/awt\/desktop\/AppReopenedEvent\n+header extends java\/awt\/desktop\/AppEvent flags 31\n+\n+class name java\/awt\/desktop\/AppReopenedListener\n+header extends java\/lang\/Object implements java\/awt\/desktop\/SystemEventListener flags 601\n+\n+class name java\/awt\/desktop\/FilesEvent\n+header extends java\/awt\/desktop\/AppEvent flags 21\n+\n+class name java\/awt\/desktop\/OpenFilesEvent\n+header extends java\/awt\/desktop\/FilesEvent flags 31\n+\n+class name java\/awt\/desktop\/OpenFilesHandler\n+header extends java\/lang\/Object flags 601\n+\n+class name java\/awt\/desktop\/OpenURIEvent\n+header extends java\/awt\/desktop\/AppEvent flags 31\n+\n+class name java\/awt\/desktop\/OpenURIHandler\n+header extends java\/lang\/Object flags 601\n+\n+class name java\/awt\/desktop\/PreferencesEvent\n+header extends java\/awt\/desktop\/AppEvent flags 31\n+\n+class name java\/awt\/desktop\/PreferencesHandler\n+header extends java\/lang\/Object flags 601\n+\n+class name java\/awt\/desktop\/PrintFilesEvent\n+header extends java\/awt\/desktop\/FilesEvent flags 31\n+\n+class name java\/awt\/desktop\/PrintFilesHandler\n+header extends java\/lang\/Object flags 601\n+\n+class name java\/awt\/desktop\/QuitEvent\n+header extends java\/awt\/desktop\/AppEvent flags 31\n+\n+class name java\/awt\/desktop\/QuitHandler\n+header extends java\/lang\/Object flags 601\n+\n+class name java\/awt\/desktop\/QuitResponse\n+header extends java\/lang\/Object flags 601\n+\n+class name java\/awt\/desktop\/QuitStrategy\n+header extends java\/lang\/Enum flags 4031 signature Ljava\/lang\/Enum<Ljava\/awt\/desktop\/QuitStrategy;>;\n+\n+class name java\/awt\/desktop\/ScreenSleepEvent\n+header extends java\/awt\/desktop\/AppEvent flags 31\n+\n+class name java\/awt\/desktop\/ScreenSleepListener\n+header extends java\/lang\/Object implements java\/awt\/desktop\/SystemEventListener flags 601\n+\n+class name java\/awt\/desktop\/SystemEventListener\n+header extends java\/lang\/Object implements java\/util\/EventListener flags 601\n+\n+class name java\/awt\/desktop\/SystemSleepEvent\n+header extends java\/awt\/desktop\/AppEvent flags 31\n+\n+class name java\/awt\/desktop\/SystemSleepListener\n+header extends java\/lang\/Object implements java\/awt\/desktop\/SystemEventListener flags 601\n+\n+class name java\/awt\/desktop\/UserSessionListener\n+header extends java\/lang\/Object implements java\/awt\/desktop\/SystemEventListener flags 601\n+\n+class name java\/awt\/dnd\/DragGestureEvent\n+header extends java\/util\/EventObject flags 21\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+\n+class name java\/awt\/dnd\/DragGestureRecognizer\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 421\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+\n+class name java\/awt\/dnd\/DragSource\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/dnd\/DropTargetDragEvent\n+header extends java\/awt\/dnd\/DropTargetEvent flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/dnd\/DropTargetDropEvent\n+header extends java\/awt\/dnd\/DropTargetEvent flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/event\/ActionEvent\n+header extends java\/awt\/AWTEvent flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/event\/AdjustmentEvent\n+header extends java\/awt\/AWTEvent flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/event\/ComponentEvent\n+header extends java\/awt\/AWTEvent flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/event\/ContainerEvent\n+header extends java\/awt\/event\/ComponentEvent flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/event\/HierarchyEvent\n+header extends java\/awt\/AWTEvent flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/event\/InputMethodEvent\n+header extends java\/awt\/AWTEvent flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/event\/ItemEvent\n+header extends java\/awt\/AWTEvent flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/event\/MouseWheelEvent\n+header extends java\/awt\/event\/MouseEvent flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/event\/PaintEvent\n+header extends java\/awt\/event\/ComponentEvent flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/event\/WindowEvent\n+header extends java\/awt\/event\/ComponentEvent flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/font\/FontRenderContext\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/awt\/RenderingHints$Key outerClass java\/awt\/RenderingHints innerClassName Key flags 409\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/font\/GraphicAttribute\n+header extends java\/lang\/Object flags 421\n+innerclass innerClass java\/awt\/geom\/Rectangle2D$Float outerClass java\/awt\/geom\/Rectangle2D innerClassName Float flags 9\n+\n+class name java\/awt\/font\/ImageGraphicAttribute\n+header extends java\/awt\/font\/GraphicAttribute flags 31\n+innerclass innerClass java\/awt\/geom\/Rectangle2D$Float outerClass java\/awt\/geom\/Rectangle2D innerClassName Float flags 9\n+\n+class name java\/awt\/font\/NumericShaper$Range\n+header extends java\/lang\/Enum nestHost java\/awt\/font\/NumericShaper sealed true flags 4021 signature Ljava\/lang\/Enum<Ljava\/awt\/font\/NumericShaper$Range;>;\n+innerclass innerClass java\/awt\/font\/NumericShaper$Range outerClass java\/awt\/font\/NumericShaper innerClassName Range flags 4009\n+\n+class name java\/awt\/font\/ShapeGraphicAttribute\n+header extends java\/awt\/font\/GraphicAttribute flags 31\n+innerclass innerClass java\/awt\/geom\/Rectangle2D$Float outerClass java\/awt\/geom\/Rectangle2D innerClassName Float flags 9\n+\n+class name java\/awt\/font\/TextHitInfo\n+header extends java\/lang\/Object flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/font\/TextMeasurer\n+header extends java\/lang\/Object implements java\/lang\/Cloneable flags 31\n+innerclass innerClass java\/text\/AttributedCharacterIterator$Attribute outerClass java\/text\/AttributedCharacterIterator innerClassName Attribute flags 9\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/geom\/AffineTransform\n+header extends java\/lang\/Object implements java\/lang\/Cloneable,java\/io\/Serializable flags 21\n+innerclass innerClass java\/awt\/geom\/Point2D$Double outerClass java\/awt\/geom\/Point2D innerClassName Double flags 9\n+innerclass innerClass java\/awt\/geom\/Point2D$Float outerClass java\/awt\/geom\/Point2D innerClassName Float flags 9\n+innerclass innerClass java\/awt\/geom\/Path2D$Double outerClass java\/awt\/geom\/Path2D innerClassName Double flags 9\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/geom\/Area\n+header extends java\/lang\/Object implements java\/awt\/Shape,java\/lang\/Cloneable flags 21\n+innerclass innerClass java\/awt\/geom\/Rectangle2D$Double outerClass java\/awt\/geom\/Rectangle2D innerClassName Double flags 9\n+\n+class name java\/awt\/geom\/RectangularShape\n+header extends java\/lang\/Object implements java\/awt\/Shape,java\/lang\/Cloneable flags 421\n+innerclass innerClass java\/awt\/geom\/Rectangle2D$Double outerClass java\/awt\/geom\/Rectangle2D innerClassName Double flags 9\n+\n+class name java\/awt\/image\/AbstractMultiResolutionImage\n+header extends java\/awt\/Image implements java\/awt\/image\/MultiResolutionImage flags 421\n+\n+class name java\/awt\/image\/BandCombineOp\n+header extends java\/lang\/Object implements java\/awt\/image\/RasterOp flags 21\n+innerclass innerClass java\/awt\/geom\/Point2D$Float outerClass java\/awt\/geom\/Point2D innerClassName Float flags 9\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/image\/BandedSampleModel\n+header extends java\/awt\/image\/ComponentSampleModel flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/image\/BaseMultiResolutionImage\n+header extends java\/awt\/image\/AbstractMultiResolutionImage flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/image\/BufferedImageFilter\n+header extends java\/awt\/image\/ImageFilter implements java\/lang\/Cloneable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/image\/ByteLookupTable\n+header extends java\/awt\/image\/LookupTable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/image\/ColorConvertOp\n+header extends java\/lang\/Object implements java\/awt\/image\/BufferedImageOp,java\/awt\/image\/RasterOp flags 21\n+innerclass innerClass java\/awt\/geom\/Point2D$Float outerClass java\/awt\/geom\/Point2D innerClassName Float flags 9\n+\n+class name java\/awt\/image\/ColorModel\n+-method name finalize descriptor ()V\n+\n+class name java\/awt\/image\/ComponentColorModel\n+header extends java\/awt\/image\/ColorModel flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/image\/ComponentSampleModel\n+header extends java\/awt\/image\/SampleModel flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/image\/ConvolveOp\n+header extends java\/lang\/Object implements java\/awt\/image\/BufferedImageOp,java\/awt\/image\/RasterOp flags 21\n+innerclass innerClass java\/awt\/geom\/Point2D$Float outerClass java\/awt\/geom\/Point2D innerClassName Float flags 9\n+\n+class name java\/awt\/image\/DataBufferUShort\n+header extends java\/awt\/image\/DataBuffer flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/image\/DirectColorModel\n+header extends java\/awt\/image\/PackedColorModel flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/image\/ImageFilter\n+header extends java\/lang\/Object implements java\/awt\/image\/ImageConsumer,java\/lang\/Cloneable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/image\/IndexColorModel\n+header extends java\/awt\/image\/ColorModel flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+-method name finalize descriptor ()V\n+\n+class name java\/awt\/image\/Kernel\n+header extends java\/lang\/Object implements java\/lang\/Cloneable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/image\/LookupOp\n+header extends java\/lang\/Object implements java\/awt\/image\/BufferedImageOp,java\/awt\/image\/RasterOp flags 21\n+innerclass innerClass java\/awt\/geom\/Point2D$Float outerClass java\/awt\/geom\/Point2D innerClassName Float flags 9\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/image\/MultiPixelPackedSampleModel\n+header extends java\/awt\/image\/SampleModel flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/image\/MultiResolutionImage\n+header extends java\/lang\/Object flags 601\n+\n+class name java\/awt\/image\/PackedColorModel\n+header extends java\/awt\/image\/ColorModel flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/image\/Raster\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/image\/ReplicateScaleFilter\n+header extends java\/awt\/image\/ImageFilter flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/image\/RescaleOp\n+header extends java\/lang\/Object implements java\/awt\/image\/BufferedImageOp,java\/awt\/image\/RasterOp flags 21\n+innerclass innerClass java\/awt\/geom\/Point2D$Float outerClass java\/awt\/geom\/Point2D innerClassName Float flags 9\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/image\/SampleModel\n+header extends java\/lang\/Object flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/image\/ShortLookupTable\n+header extends java\/awt\/image\/LookupTable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/image\/SinglePixelPackedSampleModel\n+header extends java\/awt\/image\/SampleModel flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/awt\/print\/Paper\n+header extends java\/lang\/Object implements java\/lang\/Cloneable flags 21\n+innerclass innerClass java\/awt\/geom\/Rectangle2D$Double outerClass java\/awt\/geom\/Rectangle2D innerClassName Double flags 9\n+\n+class name java\/beans\/BeanProperty\n+header extends java\/lang\/Object implements java\/lang\/annotation\/Annotation flags 2601 runtimeAnnotations @Ljava\/lang\/annotation\/Documented;@Ljava\/lang\/annotation\/Target;(value={eLjava\/lang\/annotation\/ElementType;METHOD;})@Ljava\/lang\/annotation\/Retention;(value=eLjava\/lang\/annotation\/RetentionPolicy;RUNTIME;)\n+\n+class name java\/beans\/Beans\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/beans\/DefaultPersistenceDelegate\n+header extends java\/beans\/PersistenceDelegate flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/beans\/Encoder\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/beans\/EventSetDescriptor\n+header extends java\/beans\/FeatureDescriptor flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/beans\/Expression\n+header extends java\/beans\/Statement flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/beans\/FeatureDescriptor\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/util\/Map$Entry outerClass java\/util\/Map innerClassName Entry flags 609\n+\n+class name java\/beans\/IndexedPropertyDescriptor\n+header extends java\/beans\/PropertyDescriptor flags 21\n+innerclass innerClass java\/util\/Map$Entry outerClass java\/util\/Map innerClassName Entry flags 609\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/beans\/JavaBean\n+header extends java\/lang\/Object implements java\/lang\/annotation\/Annotation flags 2601 runtimeAnnotations @Ljava\/lang\/annotation\/Documented;@Ljava\/lang\/annotation\/Target;(value={eLjava\/lang\/annotation\/ElementType;TYPE;})@Ljava\/lang\/annotation\/Retention;(value=eLjava\/lang\/annotation\/RetentionPolicy;RUNTIME;)\n+\n+class name java\/beans\/PropertyDescriptor\n+header extends java\/beans\/FeatureDescriptor flags 21\n+innerclass innerClass java\/util\/Map$Entry outerClass java\/util\/Map innerClassName Entry flags 609\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/beans\/SimpleBeanInfo\n+header extends java\/lang\/Object implements java\/beans\/BeanInfo flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/accessibility\/AccessibilityProvider\n+header extends java\/lang\/Object flags 421\n+\n+class name javax\/accessibility\/AccessibleBundle\n+header extends java\/lang\/Object flags 421 classAnnotations @Ljdk\/Profile+Annotation;(value=I4)\n+\n+class name javax\/accessibility\/AccessibleRelationSet\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/accessibility\/AccessibleStateSet\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/imageio\/metadata\/IIOMetadata\n+header extends java\/lang\/Object flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/imageio\/plugins\/jpeg\/JPEGHuffmanTable\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/imageio\/plugins\/jpeg\/JPEGQTable\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/imageio\/plugins\/tiff\/TIFFDirectory\n+header extends java\/lang\/Object implements java\/lang\/Cloneable flags 21\n+\n+class name javax\/imageio\/plugins\/tiff\/TIFFField\n+header extends java\/lang\/Object implements java\/lang\/Cloneable flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/imageio\/plugins\/tiff\/TIFFImageReadParam\n+header extends javax\/imageio\/ImageReadParam flags 31\n+\n+class name javax\/imageio\/plugins\/tiff\/TIFFTag\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/imageio\/plugins\/tiff\/TIFFTagSet\n+header extends java\/lang\/Object flags 21\n+\n+class name javax\/imageio\/spi\/ImageReaderWriterSpi\n+header extends javax\/imageio\/spi\/IIOServiceProvider flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/imageio\/spi\/ServiceRegistry\n+-method name finalize descriptor ()V\n+method name finalize descriptor ()V thrownTypes java\/lang\/Throwable flags 1 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(forRemoval=Ztrue,since=\"9\")\n+\n+class name javax\/imageio\/stream\/FileCacheImageInputStream\n+-method name finalize descriptor ()V\n+method name finalize descriptor ()V thrownTypes java\/lang\/Throwable flags 4 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(forRemoval=Ztrue,since=\"9\")\n+\n+class name javax\/imageio\/stream\/FileImageInputStream\n+-method name finalize descriptor ()V\n+method name finalize descriptor ()V thrownTypes java\/lang\/Throwable flags 4 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(forRemoval=Ztrue,since=\"9\")\n+\n+class name javax\/imageio\/stream\/FileImageOutputStream\n+-method name finalize descriptor ()V\n+method name finalize descriptor ()V thrownTypes java\/lang\/Throwable flags 4 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(forRemoval=Ztrue,since=\"9\")\n+\n+class name javax\/imageio\/stream\/ImageInputStreamImpl\n+-method name finalize descriptor ()V\n+method name finalize descriptor ()V thrownTypes java\/lang\/Throwable flags 4 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(forRemoval=Ztrue,since=\"9\")\n+\n+class name javax\/imageio\/stream\/MemoryCacheImageInputStream\n+-method name finalize descriptor ()V\n+method name finalize descriptor ()V thrownTypes java\/lang\/Throwable flags 4 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(forRemoval=Ztrue,since=\"9\")\n+\n+class name javax\/print\/attribute\/DateTimeSyntax\n+header extends java\/lang\/Object implements java\/io\/Serializable,java\/lang\/Cloneable flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/print\/attribute\/EnumSyntax\n+header extends java\/lang\/Object implements java\/io\/Serializable,java\/lang\/Cloneable flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/print\/attribute\/IntegerSyntax\n+header extends java\/lang\/Object implements java\/io\/Serializable,java\/lang\/Cloneable flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/print\/attribute\/standard\/MediaPrintableArea\n+header extends java\/lang\/Object implements javax\/print\/attribute\/DocAttribute,javax\/print\/attribute\/PrintRequestAttribute,javax\/print\/attribute\/PrintJobAttribute flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/print\/event\/PrintEvent\n+header extends java\/util\/EventObject flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/sound\/midi\/MetaMessage\n+header extends javax\/sound\/midi\/MidiMessage flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/sound\/midi\/MidiMessage\n+header extends java\/lang\/Object implements java\/lang\/Cloneable flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/sound\/midi\/Sequence\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/sound\/midi\/ShortMessage\n+header extends javax\/sound\/midi\/MidiMessage flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/sound\/midi\/SysexMessage\n+header extends javax\/sound\/midi\/MidiMessage flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/sound\/sampled\/ReverbType\n+header extends java\/lang\/Object flags 21 classAnnotations @Ljdk\/Profile+Annotation;(value=I4)\n+\n+class name javax\/sound\/sampled\/spi\/FormatConversionProvider\n+header extends java\/lang\/Object flags 421\n+innerclass innerClass javax\/sound\/sampled\/AudioFormat$Encoding outerClass javax\/sound\/sampled\/AudioFormat innerClassName Encoding flags 9\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/BoxLayout\n+header extends java\/lang\/Object implements java\/awt\/LayoutManager2,java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/DebugGraphics\n+header extends java\/awt\/Graphics flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/DefaultBoundedRangeModel\n+header extends java\/lang\/Object implements javax\/swing\/BoundedRangeModel,java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/DefaultListSelectionModel\n+header extends java\/lang\/Object implements javax\/swing\/ListSelectionModel,java\/lang\/Cloneable,java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/GrayFilter\n+header extends java\/awt\/image\/RGBImageFilter flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/GroupLayout\n+header extends java\/lang\/Object implements java\/awt\/LayoutManager2 nestMembers javax\/swing\/GroupLayout$ParallelGroup,javax\/swing\/GroupLayout$SequentialGroup,javax\/swing\/GroupLayout$Group,javax\/swing\/GroupLayout$Spring,javax\/swing\/GroupLayout$Alignment flags 21\n+innerclass innerClass javax\/swing\/GroupLayout$Alignment outerClass javax\/swing\/GroupLayout innerClassName Alignment flags 4019\n+innerclass innerClass javax\/swing\/GroupLayout$ParallelGroup outerClass javax\/swing\/GroupLayout innerClassName ParallelGroup flags 1\n+innerclass innerClass javax\/swing\/GroupLayout$Group outerClass javax\/swing\/GroupLayout innerClassName Group flags 401\n+innerclass innerClass javax\/swing\/GroupLayout$SequentialGroup outerClass javax\/swing\/GroupLayout innerClassName SequentialGroup flags 1\n+innerclass innerClass javax\/swing\/GroupLayout$Spring outerClass javax\/swing\/GroupLayout innerClassName Spring flags 40a\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/GroupLayout$Group\n+header extends javax\/swing\/GroupLayout$Spring nestHost javax\/swing\/GroupLayout flags 421\n+innerclass innerClass javax\/swing\/GroupLayout$Group outerClass javax\/swing\/GroupLayout innerClassName Group flags 401\n+innerclass innerClass javax\/swing\/GroupLayout$Spring outerClass javax\/swing\/GroupLayout innerClassName Spring flags 40a\n+\n+class name javax\/swing\/GroupLayout$ParallelGroup\n+header extends javax\/swing\/GroupLayout$Group nestHost javax\/swing\/GroupLayout flags 21\n+innerclass innerClass javax\/swing\/GroupLayout$ParallelGroup outerClass javax\/swing\/GroupLayout innerClassName ParallelGroup flags 1\n+innerclass innerClass javax\/swing\/GroupLayout$Group outerClass javax\/swing\/GroupLayout innerClassName Group flags 401\n+innerclass innerClass javax\/swing\/GroupLayout$Alignment outerClass javax\/swing\/GroupLayout innerClassName Alignment flags 4019\n+innerclass innerClass javax\/swing\/GroupLayout$Spring outerClass javax\/swing\/GroupLayout innerClassName Spring flags 40a\n+\n+class name javax\/swing\/GroupLayout$SequentialGroup\n+header extends javax\/swing\/GroupLayout$Group nestHost javax\/swing\/GroupLayout flags 21\n+innerclass innerClass javax\/swing\/GroupLayout$SequentialGroup outerClass javax\/swing\/GroupLayout innerClassName SequentialGroup flags 1\n+innerclass innerClass javax\/swing\/GroupLayout$Group outerClass javax\/swing\/GroupLayout innerClassName Group flags 401\n+innerclass innerClass javax\/swing\/GroupLayout$Spring outerClass javax\/swing\/GroupLayout innerClassName Spring flags 40a\n+innerclass innerClass javax\/swing\/LayoutStyle$ComponentPlacement outerClass javax\/swing\/LayoutStyle innerClassName ComponentPlacement flags 4019\n+innerclass innerClass java\/awt\/Component$BaselineResizeBehavior outerClass java\/awt\/Component innerClassName BaselineResizeBehavior flags 4019\n+\n+class name javax\/swing\/GroupLayout$Spring\n+header extends java\/lang\/Object nestHost javax\/swing\/GroupLayout flags 420\n+innerclass innerClass javax\/swing\/GroupLayout$Spring outerClass javax\/swing\/GroupLayout innerClassName Spring flags 40a\n+innerclass innerClass javax\/swing\/GroupLayout$Alignment outerClass javax\/swing\/GroupLayout innerClassName Alignment flags 4019\n+innerclass innerClass java\/awt\/Component$BaselineResizeBehavior outerClass java\/awt\/Component innerClassName BaselineResizeBehavior flags 4019\n+\n+class name javax\/swing\/JList$AccessibleJList$AccessibleJListChild\n+-method name getAccessibleAction descriptor ()Ljavax\/accessibility\/AccessibleAction;\n+method name getAccessibleAction descriptor ()Ljavax\/accessibility\/AccessibleAction; flags 1\n+\n+class name javax\/swing\/JTextPane\n+header extends javax\/swing\/JEditorPane flags 21 runtimeAnnotations @Ljava\/beans\/JavaBean;(description=\"A\\u005C;u0020;text\\u005C;u0020;component\\u005C;u0020;that\\u005C;u0020;can\\u005C;u0020;be\\u005C;u0020;marked\\u005C;u0020;up\\u005C;u0020;with\\u005C;u0020;attributes\\u005C;u0020;that\\u005C;u0020;are\\u005C;u0020;graphically\\u005C;u0020;represented.\")@Ljavax\/swing\/SwingContainer;\n+\n+class name javax\/swing\/LookAndFeel\n+header extends java\/lang\/Object flags 421\n+innerclass innerClass javax\/swing\/text\/JTextComponent$KeyBinding outerClass javax\/swing\/text\/JTextComponent innerClassName KeyBinding flags 9\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/MenuSelectionManager\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/SizeRequirements\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/SortingFocusTraversalPolicy\n+header extends javax\/swing\/InternalFrameFocusTraversalPolicy flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/SwingContainer\n+header extends java\/lang\/Object implements java\/lang\/annotation\/Annotation flags 2601 runtimeAnnotations @Ljava\/lang\/annotation\/Target;(value={eLjava\/lang\/annotation\/ElementType;TYPE;})@Ljava\/lang\/annotation\/Retention;(value=eLjava\/lang\/annotation\/RetentionPolicy;RUNTIME;)\n+\n+class name javax\/swing\/UIClientPropertyKey\n+header extends java\/lang\/Object flags 601\n+\n+class name javax\/swing\/border\/LineBorder\n+header extends javax\/swing\/border\/AbstractBorder flags 21\n+innerclass innerClass java\/awt\/geom\/RoundRectangle2D$Float outerClass java\/awt\/geom\/RoundRectangle2D innerClassName Float flags 9\n+innerclass innerClass java\/awt\/geom\/Rectangle2D$Float outerClass java\/awt\/geom\/Rectangle2D innerClassName Float flags 9\n+innerclass innerClass java\/awt\/geom\/Path2D$Float outerClass java\/awt\/geom\/Path2D innerClassName Float flags 9\n+\n+class name javax\/swing\/event\/EventListenerList\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/event\/ListDataEvent\n+header extends java\/util\/EventObject flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/event\/ListSelectionEvent\n+header extends java\/util\/EventObject flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/event\/TreeModelEvent\n+header extends java\/util\/EventObject flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/filechooser\/FileNameExtensionFilter\n+header extends javax\/swing\/filechooser\/FileFilter flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/plaf\/basic\/BasicArrowButton\n+header extends javax\/swing\/JButton implements javax\/swing\/SwingConstants flags 21\n+innerclass innerClass java\/awt\/geom\/Path2D$Double outerClass java\/awt\/geom\/Path2D innerClassName Double flags 9\n+\n+class name javax\/swing\/plaf\/basic\/BasicButtonUI\n+header extends javax\/swing\/plaf\/ButtonUI flags 21\n+innerclass innerClass java\/awt\/Component$BaselineResizeBehavior outerClass java\/awt\/Component innerClassName BaselineResizeBehavior flags 4019\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/plaf\/basic\/BasicPasswordFieldUI\n+header extends javax\/swing\/plaf\/basic\/BasicTextFieldUI flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/plaf\/basic\/BasicSplitPaneUI$BasicVerticalLayoutManager\n+header extends javax\/swing\/plaf\/basic\/BasicSplitPaneUI$BasicHorizontalLayoutManager nestHost javax\/swing\/plaf\/basic\/BasicSplitPaneUI flags 21\n+innerclass innerClass javax\/swing\/plaf\/basic\/BasicSplitPaneUI$BasicHorizontalLayoutManager outerClass javax\/swing\/plaf\/basic\/BasicSplitPaneUI innerClassName BasicHorizontalLayoutManager flags 1\n+innerclass innerClass javax\/swing\/plaf\/basic\/BasicSplitPaneUI$BasicVerticalLayoutManager outerClass javax\/swing\/plaf\/basic\/BasicSplitPaneUI innerClassName BasicVerticalLayoutManager flags 1\n+\n+class name javax\/swing\/plaf\/basic\/BasicToolBarSeparatorUI\n+header extends javax\/swing\/plaf\/basic\/BasicSeparatorUI flags 21\n+innerclass innerClass javax\/swing\/JToolBar$Separator outerClass javax\/swing\/JToolBar innerClassName Separator flags 9\n+\n+class name javax\/swing\/plaf\/metal\/MetalButtonUI\n+header extends javax\/swing\/plaf\/basic\/BasicButtonUI flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/plaf\/metal\/MetalCheckBoxUI\n+header extends javax\/swing\/plaf\/metal\/MetalRadioButtonUI flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/plaf\/metal\/MetalRadioButtonUI\n+header extends javax\/swing\/plaf\/basic\/BasicRadioButtonUI flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/plaf\/metal\/MetalTabbedPaneUI$TabbedPaneLayout\n+header extends javax\/swing\/plaf\/basic\/BasicTabbedPaneUI$TabbedPaneLayout nestHost javax\/swing\/plaf\/metal\/MetalTabbedPaneUI flags 21\n+innerclass innerClass javax\/swing\/plaf\/basic\/BasicTabbedPaneUI$TabbedPaneLayout outerClass javax\/swing\/plaf\/basic\/BasicTabbedPaneUI innerClassName TabbedPaneLayout flags 1\n+innerclass innerClass javax\/swing\/plaf\/metal\/MetalTabbedPaneUI$TabbedPaneLayout outerClass javax\/swing\/plaf\/metal\/MetalTabbedPaneUI innerClassName TabbedPaneLayout flags 1\n+\n+class name javax\/swing\/plaf\/metal\/MetalToggleButtonUI\n+header extends javax\/swing\/plaf\/basic\/BasicToggleButtonUI flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/plaf\/metal\/MetalToolBarUI$MetalContainerListener\n+header extends javax\/swing\/plaf\/basic\/BasicToolBarUI$ToolBarContListener nestHost javax\/swing\/plaf\/metal\/MetalToolBarUI flags 21\n+innerclass innerClass javax\/swing\/plaf\/basic\/BasicToolBarUI$ToolBarContListener outerClass javax\/swing\/plaf\/basic\/BasicToolBarUI innerClassName ToolBarContListener flags 4\n+innerclass innerClass javax\/swing\/plaf\/metal\/MetalToolBarUI$MetalContainerListener outerClass javax\/swing\/plaf\/metal\/MetalToolBarUI innerClassName MetalContainerListener flags 4\n+\n+class name javax\/swing\/plaf\/metal\/MetalToolBarUI$MetalRolloverListener\n+header extends javax\/swing\/plaf\/basic\/BasicToolBarUI$PropertyListener nestHost javax\/swing\/plaf\/metal\/MetalToolBarUI flags 21\n+innerclass innerClass javax\/swing\/plaf\/basic\/BasicToolBarUI$PropertyListener outerClass javax\/swing\/plaf\/basic\/BasicToolBarUI innerClassName PropertyListener flags 4\n+innerclass innerClass javax\/swing\/plaf\/metal\/MetalToolBarUI$MetalRolloverListener outerClass javax\/swing\/plaf\/metal\/MetalToolBarUI innerClassName MetalRolloverListener flags 4\n+\n+class name javax\/swing\/plaf\/metal\/MetalToolTipUI\n+header extends javax\/swing\/plaf\/basic\/BasicToolTipUI flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/plaf\/multi\/MultiLookAndFeel\n+header extends javax\/swing\/LookAndFeel flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/plaf\/synth\/SynthButtonUI\n+header extends javax\/swing\/plaf\/basic\/BasicButtonUI implements java\/beans\/PropertyChangeListener,javax\/swing\/plaf\/synth\/SynthUI flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/plaf\/synth\/SynthIcon\n+header extends java\/lang\/Object implements javax\/swing\/Icon flags 601\n+\n+class name javax\/swing\/plaf\/synth\/SynthMenuItemUI\n+header extends javax\/swing\/plaf\/basic\/BasicMenuItemUI implements java\/beans\/PropertyChangeListener,javax\/swing\/plaf\/synth\/SynthUI flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/plaf\/synth\/SynthMenuUI\n+header extends javax\/swing\/plaf\/basic\/BasicMenuUI implements java\/beans\/PropertyChangeListener,javax\/swing\/plaf\/synth\/SynthUI flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/plaf\/synth\/SynthSeparatorUI\n+header extends javax\/swing\/plaf\/SeparatorUI implements java\/beans\/PropertyChangeListener,javax\/swing\/plaf\/synth\/SynthUI flags 21\n+innerclass innerClass javax\/swing\/JToolBar$Separator outerClass javax\/swing\/JToolBar innerClassName Separator flags 9\n+\n+class name javax\/swing\/plaf\/synth\/SynthStyle\n+header extends java\/lang\/Object flags 421\n+innerclass innerClass javax\/swing\/UIDefaults$LazyInputMap outerClass javax\/swing\/UIDefaults innerClassName LazyInputMap flags 9\n+innerclass innerClass javax\/swing\/UIDefaults$LazyValue outerClass javax\/swing\/UIDefaults innerClassName LazyValue flags 609\n+\n+class name javax\/swing\/table\/AbstractTableModel\n+header extends java\/lang\/Object implements javax\/swing\/table\/TableModel,java\/io\/Serializable flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/text\/AbstractWriter\n+header extends java\/lang\/Object flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/text\/BoxView\n+header extends javax\/swing\/text\/CompositeView flags 21\n+innerclass innerClass javax\/swing\/event\/DocumentEvent$ElementChange outerClass javax\/swing\/event\/DocumentEvent innerClassName ElementChange flags 609\n+innerclass innerClass javax\/swing\/text\/Position$Bias outerClass javax\/swing\/text\/Position innerClassName Bias flags 19\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/text\/CompositeView\n+header extends javax\/swing\/text\/View flags 421\n+innerclass innerClass javax\/swing\/text\/Position$Bias outerClass javax\/swing\/text\/Position innerClassName Bias flags 19\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/text\/DateFormatter\n+header extends javax\/swing\/text\/InternationalFormatter flags 21\n+innerclass innerClass java\/text\/DateFormat$Field outerClass java\/text\/DateFormat innerClassName Field flags 9\n+\n+class name javax\/swing\/text\/IconView\n+header extends javax\/swing\/text\/View flags 21\n+innerclass innerClass javax\/swing\/text\/Position$Bias outerClass javax\/swing\/text\/Position innerClassName Bias flags 19\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/text\/LayoutQueue\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/text\/NumberFormatter\n+header extends javax\/swing\/text\/InternationalFormatter flags 21\n+innerclass innerClass java\/text\/NumberFormat$Field outerClass java\/text\/NumberFormat innerClassName Field flags 9\n+innerclass innerClass javax\/swing\/text\/DocumentFilter$FilterBypass outerClass javax\/swing\/text\/DocumentFilter innerClassName FilterBypass flags 409\n+innerclass innerClass java\/text\/AttributedCharacterIterator$Attribute outerClass java\/text\/AttributedCharacterIterator innerClassName Attribute flags 9\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/text\/Segment\n+header extends java\/lang\/Object implements java\/lang\/Cloneable,java\/text\/CharacterIterator,java\/lang\/CharSequence flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/text\/TabSet\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/text\/TabStop\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/text\/View\n+header extends java\/lang\/Object implements javax\/swing\/SwingConstants flags 421\n+innerclass innerClass javax\/swing\/text\/Position$Bias outerClass javax\/swing\/text\/Position innerClassName Bias flags 19\n+innerclass innerClass javax\/swing\/event\/DocumentEvent$ElementChange outerClass javax\/swing\/event\/DocumentEvent innerClassName ElementChange flags 609\n+innerclass innerClass javax\/swing\/event\/DocumentEvent$EventType outerClass javax\/swing\/event\/DocumentEvent innerClassName EventType flags 19\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/text\/html\/InlineView\n+header extends javax\/swing\/text\/LabelView flags 21\n+innerclass innerClass javax\/swing\/text\/html\/CSS$Attribute outerClass javax\/swing\/text\/html\/CSS innerClassName Attribute flags 19\n+\n+class name javax\/swing\/text\/html\/ListView\n+header extends javax\/swing\/text\/html\/BlockView flags 21\n+innerclass innerClass javax\/swing\/text\/html\/StyleSheet$ListPainter outerClass javax\/swing\/text\/html\/StyleSheet innerClassName ListPainter flags 9\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/text\/html\/MinimalHTMLWriter\n+header extends javax\/swing\/text\/AbstractWriter flags 21\n+innerclass innerClass javax\/swing\/text\/StyleConstants$ParagraphConstants outerClass javax\/swing\/text\/StyleConstants innerClassName ParagraphConstants flags 9\n+innerclass innerClass javax\/swing\/text\/StyleConstants$CharacterConstants outerClass javax\/swing\/text\/StyleConstants innerClassName CharacterConstants flags 9\n+innerclass innerClass javax\/swing\/text\/StyleConstants$FontConstants outerClass javax\/swing\/text\/StyleConstants innerClassName FontConstants flags 9\n+innerclass innerClass javax\/swing\/text\/StyleConstants$ColorConstants outerClass javax\/swing\/text\/StyleConstants innerClassName ColorConstants flags 9\n+innerclass innerClass javax\/swing\/text\/AbstractDocument$BranchElement outerClass javax\/swing\/text\/AbstractDocument innerClassName BranchElement flags 1\n+innerclass innerClass javax\/swing\/text\/StyleContext$NamedStyle outerClass javax\/swing\/text\/StyleContext innerClassName NamedStyle flags 1\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/text\/html\/ObjectView\n+header extends javax\/swing\/text\/ComponentView flags 21\n+innerclass innerClass javax\/swing\/text\/html\/HTML$Attribute outerClass javax\/swing\/text\/html\/HTML innerClassName Attribute flags 19\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/text\/html\/Option\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass javax\/swing\/text\/html\/HTML$Attribute outerClass javax\/swing\/text\/html\/HTML innerClassName Attribute flags 19\n+\n+class name javax\/swing\/text\/html\/ParagraphView\n+header extends javax\/swing\/text\/ParagraphView flags 21\n+innerclass innerClass javax\/swing\/text\/html\/StyleSheet$BoxPainter outerClass javax\/swing\/text\/html\/StyleSheet innerClassName BoxPainter flags 9\n+innerclass innerClass javax\/swing\/text\/html\/CSS$Attribute outerClass javax\/swing\/text\/html\/CSS innerClassName Attribute flags 19\n+\n+class name javax\/swing\/text\/html\/parser\/ContentModel\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/text\/html\/parser\/DocumentParser\n+header extends javax\/swing\/text\/html\/parser\/Parser flags 21\n+innerclass innerClass javax\/swing\/text\/html\/HTMLEditorKit$ParserCallback outerClass javax\/swing\/text\/html\/HTMLEditorKit innerClassName ParserCallback flags 9\n+innerclass innerClass javax\/swing\/text\/html\/HTML$Tag outerClass javax\/swing\/text\/html\/HTML innerClassName Tag flags 9\n+innerclass innerClass javax\/swing\/text\/html\/HTML$Attribute outerClass javax\/swing\/text\/html\/HTML innerClassName Attribute flags 19\n+\n+class name javax\/swing\/text\/html\/parser\/Parser\n+header extends java\/lang\/Object implements javax\/swing\/text\/html\/parser\/DTDConstants flags 21\n+innerclass innerClass javax\/swing\/text\/html\/HTML$Attribute outerClass javax\/swing\/text\/html\/HTML innerClassName Attribute flags 19\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/text\/html\/parser\/TagElement\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass javax\/swing\/text\/html\/HTML$Tag outerClass javax\/swing\/text\/html\/HTML innerClassName Tag flags 9\n+innerclass innerClass javax\/swing\/text\/html\/HTML$UnknownTag outerClass javax\/swing\/text\/html\/HTML innerClassName UnknownTag flags 9\n+\n+class name javax\/swing\/tree\/DefaultTreeModel\n+header extends java\/lang\/Object implements java\/io\/Serializable,javax\/swing\/tree\/TreeModel flags 21\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+\n+class name javax\/swing\/tree\/DefaultTreeSelectionModel\n+header extends java\/lang\/Object implements java\/lang\/Cloneable,java\/io\/Serializable,javax\/swing\/tree\/TreeSelectionModel flags 21\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/tree\/TreePath\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/undo\/AbstractUndoableEdit\n+header extends java\/lang\/Object implements javax\/swing\/undo\/UndoableEdit,java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/undo\/CompoundEdit\n+header extends javax\/swing\/undo\/AbstractUndoableEdit flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/swing\/undo\/UndoableEditSupport\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n","filename":"make\/data\/symbols\/java.desktop-I.sym.txt","additions":922,"deletions":0,"binary":false,"changes":922,"status":"added"},{"patch":"","filename":"make\/data\/symbols\/java.instrument-I.sym.txt","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"make\/data\/symbols\/java.instrument-H.sym.txt","status":"copied"},{"patch":"@@ -0,0 +1,55 @@\n+#\n+# Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name java\/util\/logging\/ErrorManager\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/logging\/LoggingMXBean\n+header extends java\/lang\/Object flags 601 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(since=\"9\")\n+\n+class name java\/util\/logging\/LoggingPermission\n+header extends java\/security\/BasicPermission flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/logging\/MemoryHandler\n+header extends java\/util\/logging\/Handler flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/logging\/SimpleFormatter\n+header extends java\/util\/logging\/Formatter flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/logging\/SocketHandler\n+header extends java\/util\/logging\/StreamHandler flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/util\/logging\/XMLFormatter\n+header extends java\/util\/logging\/Formatter flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n","filename":"make\/data\/symbols\/java.logging-I.sym.txt","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -0,0 +1,269 @@\n+#\n+# Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name java\/lang\/management\/LockInfo\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/lang\/management\/ManagementPermission\n+header extends java\/security\/BasicPermission flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/lang\/management\/MemoryMXBean\n+-method name getObjectPendingFinalizationCount descriptor ()I\n+method name getObjectPendingFinalizationCount descriptor ()I flags 401 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(since=\"18\")\n+\n+class name java\/lang\/management\/MemoryUsage\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/lang\/management\/MonitorInfo\n+header extends java\/lang\/management\/LockInfo flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/lang\/management\/RuntimeMXBean\n+header extends java\/lang\/Object implements java\/lang\/management\/PlatformManagedObject flags 601\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/Attribute\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/AttributeList\n+header extends java\/util\/ArrayList flags 21 signature Ljava\/util\/ArrayList<Ljava\/lang\/Object;>;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/BadAttributeValueExpException\n+header extends java\/lang\/Exception flags 21\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/BadBinaryOpValueExpException\n+header extends java\/lang\/Exception flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/BadStringOperationException\n+header extends java\/lang\/Exception flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/ConstructorParameters\n+header extends java\/lang\/Object implements java\/lang\/annotation\/Annotation flags 2601 runtimeAnnotations @Ljava\/lang\/annotation\/Documented;@Ljava\/lang\/annotation\/Target;(value={eLjava\/lang\/annotation\/ElementType;CONSTRUCTOR;})@Ljava\/lang\/annotation\/Retention;(value=eLjava\/lang\/annotation\/RetentionPolicy;RUNTIME;)\n+\n+class name javax\/management\/ImmutableDescriptor\n+header extends java\/lang\/Object implements javax\/management\/Descriptor flags 21\n+innerclass innerClass java\/util\/Map$Entry outerClass java\/util\/Map innerClassName Entry flags 609\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/MBeanAttributeInfo\n+header extends javax\/management\/MBeanFeatureInfo implements java\/lang\/Cloneable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/MBeanConstructorInfo\n+header extends javax\/management\/MBeanFeatureInfo implements java\/lang\/Cloneable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/MBeanNotificationInfo\n+header extends javax\/management\/MBeanFeatureInfo implements java\/lang\/Cloneable flags 21\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/MBeanOperationInfo\n+header extends javax\/management\/MBeanFeatureInfo implements java\/lang\/Cloneable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/MBeanParameterInfo\n+header extends javax\/management\/MBeanFeatureInfo implements java\/lang\/Cloneable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/MBeanPermission\n+header extends java\/security\/Permission flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/MBeanServerDelegate\n+header extends java\/lang\/Object implements javax\/management\/MBeanServerDelegateMBean,javax\/management\/NotificationEmitter flags 21\n+innerclass innerClass java\/lang\/System$Logger outerClass java\/lang\/System innerClassName Logger flags 609\n+innerclass innerClass java\/lang\/System$Logger$Level outerClass java\/lang\/System$Logger innerClassName Level flags 4019\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/MBeanServerFactory\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/lang\/System$Logger outerClass java\/lang\/System innerClassName Logger flags 609\n+innerclass innerClass java\/lang\/System$Logger$Level outerClass java\/lang\/System$Logger innerClassName Level flags 4019\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/MBeanServerInvocationHandler\n+header extends java\/lang\/Object implements java\/lang\/reflect\/InvocationHandler flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/MBeanServerNotification\n+header extends javax\/management\/Notification flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/MBeanServerPermission\n+header extends java\/security\/BasicPermission flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/MBeanTrustPermission\n+header extends java\/security\/BasicPermission flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/Notification\n+header extends java\/util\/EventObject flags 21\n+innerclass innerClass java\/io\/ObjectOutputStream$PutField outerClass java\/io\/ObjectOutputStream innerClassName PutField flags 409\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/ObjectInstance\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/Query\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/StandardEmitterMBean\n+header extends javax\/management\/StandardMBean implements javax\/management\/NotificationEmitter flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/StringValueExp\n+header extends java\/lang\/Object implements javax\/management\/ValueExp flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/loading\/DefaultLoaderRepository\n+header extends java\/lang\/Object flags 21 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;\n+innerclass innerClass java\/lang\/System$Logger outerClass java\/lang\/System innerClassName Logger flags 609\n+innerclass innerClass java\/lang\/System$Logger$Level outerClass java\/lang\/System$Logger innerClassName Level flags 4019\n+\n+class name javax\/management\/loading\/MLetContent\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/modelmbean\/InvalidTargetObjectTypeException\n+header extends java\/lang\/Exception flags 21\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+innerclass innerClass java\/io\/ObjectOutputStream$PutField outerClass java\/io\/ObjectOutputStream innerClassName PutField flags 409\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/modelmbean\/XMLParseException\n+header extends java\/lang\/Exception flags 21\n+innerclass innerClass java\/io\/ObjectOutputStream$PutField outerClass java\/io\/ObjectOutputStream innerClassName PutField flags 409\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/openmbean\/ArrayType\n+header extends javax\/management\/openmbean\/OpenType flags 21 signature <T:Ljava\/lang\/Object;>Ljavax\/management\/openmbean\/OpenType<TT;>;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/openmbean\/CompositeDataInvocationHandler\n+header extends java\/lang\/Object implements java\/lang\/reflect\/InvocationHandler flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/openmbean\/CompositeDataSupport\n+header extends java\/lang\/Object implements javax\/management\/openmbean\/CompositeData,java\/io\/Serializable flags 21\n+innerclass innerClass java\/util\/Map$Entry outerClass java\/util\/Map innerClassName Entry flags 609\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/openmbean\/CompositeType\n+header extends javax\/management\/openmbean\/OpenType flags 21 signature Ljavax\/management\/openmbean\/OpenType<Ljavax\/management\/openmbean\/CompositeData;>;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/openmbean\/OpenMBeanAttributeInfoSupport\n+header extends javax\/management\/MBeanAttributeInfo implements javax\/management\/openmbean\/OpenMBeanAttributeInfo flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/openmbean\/OpenMBeanOperationInfoSupport\n+header extends javax\/management\/MBeanOperationInfo implements javax\/management\/openmbean\/OpenMBeanOperationInfo flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/openmbean\/SimpleType\n+header extends javax\/management\/openmbean\/OpenType flags 31 signature <T:Ljava\/lang\/Object;>Ljavax\/management\/openmbean\/OpenType<TT;>;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/openmbean\/TabularDataSupport\n+header extends java\/lang\/Object implements javax\/management\/openmbean\/TabularData,java\/util\/Map,java\/lang\/Cloneable,java\/io\/Serializable flags 21 signature Ljava\/lang\/Object;Ljavax\/management\/openmbean\/TabularData;Ljava\/util\/Map<Ljava\/lang\/Object;Ljava\/lang\/Object;>;Ljava\/lang\/Cloneable;Ljava\/io\/Serializable;\n+innerclass innerClass java\/util\/Map$Entry outerClass java\/util\/Map innerClassName Entry flags 609\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/openmbean\/TabularType\n+header extends javax\/management\/openmbean\/OpenType flags 21 signature Ljavax\/management\/openmbean\/OpenType<Ljavax\/management\/openmbean\/TabularData;>;\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/relation\/RelationNotification\n+header extends javax\/management\/Notification flags 21\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+innerclass innerClass java\/io\/ObjectOutputStream$PutField outerClass java\/io\/ObjectOutputStream innerClassName PutField flags 409\n+\n+class name javax\/management\/relation\/RelationSupport\n+header extends java\/lang\/Object implements javax\/management\/relation\/RelationSupportMBean,javax\/management\/MBeanRegistration flags 21\n+innerclass innerClass java\/lang\/System$Logger outerClass java\/lang\/System innerClassName Logger flags 609\n+innerclass innerClass java\/lang\/System$Logger$Level outerClass java\/lang\/System$Logger innerClassName Level flags 4019\n+\n+class name javax\/management\/relation\/Role\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+innerclass innerClass java\/io\/ObjectOutputStream$PutField outerClass java\/io\/ObjectOutputStream innerClassName PutField flags 409\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/relation\/RoleInfo\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+innerclass innerClass java\/io\/ObjectOutputStream$PutField outerClass java\/io\/ObjectOutputStream innerClassName PutField flags 409\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/relation\/RoleResult\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+innerclass innerClass java\/io\/ObjectOutputStream$PutField outerClass java\/io\/ObjectOutputStream innerClassName PutField flags 409\n+\n+class name javax\/management\/relation\/RoleUnresolved\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+innerclass innerClass java\/io\/ObjectOutputStream$PutField outerClass java\/io\/ObjectOutputStream innerClassName PutField flags 409\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/remote\/JMXConnectorServerFactory\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/util\/ServiceLoader$Provider outerClass java\/util\/ServiceLoader innerClassName Provider flags 609\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/remote\/JMXPrincipal\n+header extends java\/lang\/Object implements java\/security\/Principal,java\/io\/Serializable flags 21\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/remote\/JMXServiceURL\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/remote\/NotificationResult\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/management\/remote\/TargetedNotification\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n","filename":"make\/data\/symbols\/java.management-I.sym.txt","additions":269,"deletions":0,"binary":false,"changes":269,"status":"added"},{"patch":"","filename":"make\/data\/symbols\/java.management.rmi-I.sym.txt","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"make\/data\/symbols\/java.management.rmi-H.sym.txt","status":"copied"},{"patch":"@@ -0,0 +1,76 @@\n+#\n+# Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name javax\/naming\/BinaryRefAddr\n+header extends javax\/naming\/RefAddr flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/naming\/Binding\n+header extends javax\/naming\/NameClassPair flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/naming\/CompositeName\n+header extends java\/lang\/Object implements javax\/naming\/Name flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/naming\/CompoundName\n+header extends java\/lang\/Object implements javax\/naming\/Name flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/naming\/LinkException\n+header extends javax\/naming\/NamingException flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/naming\/NameClassPair\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/naming\/NamingException\n+header extends java\/lang\/Exception flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/naming\/RefAddr\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/naming\/Reference\n+header extends java\/lang\/Object implements java\/lang\/Cloneable,java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/naming\/directory\/AttributeModificationException\n+header extends javax\/naming\/NamingException flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/naming\/directory\/ModificationItem\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/naming\/directory\/SearchResult\n+header extends javax\/naming\/Binding flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n","filename":"make\/data\/symbols\/java.naming-I.sym.txt","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -0,0 +1,36 @@\n+#\n+# Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name java\/net\/http\/HttpRequest$Builder\n+header extends java\/lang\/Object nestHost java\/net\/http\/HttpRequest flags 601\n+innerclass innerClass java\/net\/http\/HttpRequest$BodyPublishers outerClass java\/net\/http\/HttpRequest innerClassName BodyPublishers flags 9\n+innerclass innerClass java\/net\/http\/HttpRequest$BodyPublisher outerClass java\/net\/http\/HttpRequest innerClassName BodyPublisher flags 609\n+innerclass innerClass java\/net\/http\/HttpRequest$Builder outerClass java\/net\/http\/HttpRequest innerClassName Builder flags 609\n+innerclass innerClass java\/net\/http\/HttpClient$Version outerClass java\/net\/http\/HttpClient innerClassName Version flags 4019\n+method name HEAD descriptor ()Ljava\/net\/http\/HttpRequest$Builder; flags 1\n+\n","filename":"make\/data\/symbols\/java.net.http-I.sym.txt","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -0,0 +1,52 @@\n+#\n+# Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name java\/rmi\/RemoteException\n+header extends java\/io\/IOException flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/rmi\/dgc\/VMID\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/rmi\/server\/ObjID\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/rmi\/server\/RemoteObject\n+header extends java\/lang\/Object implements java\/rmi\/Remote,java\/io\/Serializable flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/rmi\/server\/ServerCloneException\n+header extends java\/lang\/CloneNotSupportedException flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name java\/rmi\/server\/UID\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n","filename":"make\/data\/symbols\/java.rmi-I.sym.txt","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"","filename":"make\/data\/symbols\/java.scripting-I.sym.txt","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"make\/data\/symbols\/java.scripting-H.sym.txt","status":"copied"},{"patch":"","filename":"make\/data\/symbols\/java.security.jgss-I.sym.txt","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"make\/data\/symbols\/java.security.jgss-H.sym.txt","status":"copied"},{"patch":"","filename":"make\/data\/symbols\/java.security.sasl-I.sym.txt","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"make\/data\/symbols\/java.security.sasl-H.sym.txt","status":"copied"},{"patch":"","filename":"make\/data\/symbols\/java.smartcardio-I.sym.txt","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"make\/data\/symbols\/java.smartcardio-H.sym.txt","status":"copied"},{"patch":"","filename":"make\/data\/symbols\/java.sql-I.sym.txt","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"make\/data\/symbols\/java.sql-H.sym.txt","status":"copied"},{"patch":"","filename":"make\/data\/symbols\/java.sql.rowset-I.sym.txt","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"make\/data\/symbols\/java.sql.rowset-H.sym.txt","status":"copied"},{"patch":"@@ -0,0 +1,158 @@\n+#\n+# Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name javax\/xml\/catalog\/Catalog\n+header extends java\/lang\/Object flags 601\n+\n+class name javax\/xml\/catalog\/CatalogException\n+header extends java\/lang\/RuntimeException flags 21\n+\n+class name javax\/xml\/catalog\/CatalogFeatures\n+header extends java\/lang\/Object nestMembers javax\/xml\/catalog\/CatalogFeatures$Builder,javax\/xml\/catalog\/CatalogFeatures$Feature flags 21\n+innerclass innerClass javax\/xml\/catalog\/CatalogFeatures$Builder outerClass javax\/xml\/catalog\/CatalogFeatures innerClassName Builder flags 9\n+innerclass innerClass javax\/xml\/catalog\/CatalogFeatures$Feature outerClass javax\/xml\/catalog\/CatalogFeatures innerClassName Feature flags 4019\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/xml\/catalog\/CatalogManager\n+header extends java\/lang\/Object flags 31\n+\n+class name javax\/xml\/catalog\/CatalogResolver\n+header extends java\/lang\/Object implements org\/xml\/sax\/EntityResolver,javax\/xml\/stream\/XMLResolver,javax\/xml\/transform\/URIResolver,org\/w3c\/dom\/ls\/LSResourceResolver flags 601\n+\n+class name javax\/xml\/datatype\/DatatypeFactory\n+header extends java\/lang\/Object flags 421\n+innerclass innerClass javax\/xml\/datatype\/DatatypeConstants$Field outerClass javax\/xml\/datatype\/DatatypeConstants innerClassName Field flags 19\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/xml\/datatype\/Duration\n+header extends java\/lang\/Object flags 421\n+innerclass innerClass javax\/xml\/datatype\/DatatypeConstants$Field outerClass javax\/xml\/datatype\/DatatypeConstants innerClassName Field flags 19\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/xml\/namespace\/QName\n+header extends java\/lang\/Object implements java\/io\/Serializable flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/xml\/parsers\/DocumentBuilder\n+header extends java\/lang\/Object flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/xml\/parsers\/DocumentBuilderFactory\n+header extends java\/lang\/Object flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/xml\/parsers\/SAXParser\n+header extends java\/lang\/Object flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/xml\/parsers\/SAXParserFactory\n+header extends java\/lang\/Object flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/xml\/stream\/XMLEventReader\n+header extends java\/lang\/Object implements java\/util\/Iterator flags 601 signature Ljava\/lang\/Object;Ljava\/util\/Iterator<Ljava\/lang\/Object;>;\n+\n+class name javax\/xml\/stream\/XMLInputFactory\n+-method name newFactory descriptor ()Ljavax\/xml\/stream\/XMLInputFactory;\n+method name newFactory descriptor ()Ljavax\/xml\/stream\/XMLInputFactory; thrownTypes javax\/xml\/stream\/FactoryConfigurationError flags 9\n+\n+class name javax\/xml\/stream\/XMLStreamException\n+header extends java\/lang\/Exception flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/xml\/transform\/Transformer\n+header extends java\/lang\/Object flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/xml\/transform\/TransformerException\n+header extends java\/lang\/Exception flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/xml\/validation\/SchemaFactory\n+header extends java\/lang\/Object flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/xml\/xpath\/XPath\n+header extends java\/lang\/Object flags 601\n+innerclass innerClass javax\/xml\/xpath\/XPathEvaluationResult$XPathResultType outerClass javax\/xml\/xpath\/XPathEvaluationResult innerClassName XPathResultType flags 4019\n+\n+class name javax\/xml\/xpath\/XPathException\n+header extends java\/lang\/Exception flags 21\n+innerclass innerClass java\/io\/ObjectOutputStream$PutField outerClass java\/io\/ObjectOutputStream innerClassName PutField flags 409\n+innerclass innerClass java\/io\/ObjectInputStream$GetField outerClass java\/io\/ObjectInputStream innerClassName GetField flags 409\n+\n+class name javax\/xml\/xpath\/XPathExpression\n+header extends java\/lang\/Object flags 601\n+innerclass innerClass javax\/xml\/xpath\/XPathEvaluationResult$XPathResultType outerClass javax\/xml\/xpath\/XPathEvaluationResult innerClassName XPathResultType flags 4019\n+\n+class name javax\/xml\/xpath\/XPathFactory\n+header extends java\/lang\/Object flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+method name setProperty descriptor (Ljava\/lang\/String;Ljava\/lang\/String;)V flags 1\n+method name getProperty descriptor (Ljava\/lang\/String;)Ljava\/lang\/String; flags 1\n+\n+class name javax\/xml\/xpath\/XPathNodes\n+header extends java\/lang\/Object implements java\/lang\/Iterable flags 601 signature Ljava\/lang\/Object;Ljava\/lang\/Iterable<Lorg\/w3c\/dom\/Node;>;\n+\n+class name org\/w3c\/dom\/ElementTraversal\n+header extends java\/lang\/Object flags 601\n+\n+class name org\/xml\/sax\/AttributeList\n+header extends java\/lang\/Object flags 601 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(since=\"1.5\")\n+\n+class name org\/xml\/sax\/DocumentHandler\n+header extends java\/lang\/Object flags 601 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(since=\"1.5\")\n+\n+class name org\/xml\/sax\/HandlerBase\n+header extends java\/lang\/Object implements org\/xml\/sax\/EntityResolver,org\/xml\/sax\/DTDHandler,org\/xml\/sax\/DocumentHandler,org\/xml\/sax\/ErrorHandler flags 21 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(since=\"1.5\")\n+\n+class name org\/xml\/sax\/Parser\n+header extends java\/lang\/Object flags 601 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(since=\"1.5\")\n+\n+class name org\/xml\/sax\/ext\/Attributes2Impl\n+header extends org\/xml\/sax\/helpers\/AttributesImpl implements org\/xml\/sax\/ext\/Attributes2 flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name org\/xml\/sax\/helpers\/AttributeListImpl\n+header extends java\/lang\/Object implements org\/xml\/sax\/AttributeList flags 21 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(since=\"1.5\")\n+\n+class name org\/xml\/sax\/helpers\/AttributesImpl\n+header extends java\/lang\/Object implements org\/xml\/sax\/Attributes flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name org\/xml\/sax\/helpers\/ParserFactory\n+header extends java\/lang\/Object flags 21 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(since=\"1.5\")\n+\n+class name org\/xml\/sax\/helpers\/XMLFilterImpl\n+header extends java\/lang\/Object implements org\/xml\/sax\/XMLFilter,org\/xml\/sax\/EntityResolver,org\/xml\/sax\/DTDHandler,org\/xml\/sax\/ContentHandler,org\/xml\/sax\/ErrorHandler flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name org\/xml\/sax\/helpers\/XMLReaderFactory\n+header extends java\/lang\/Object flags 31 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(since=\"9\")\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n","filename":"make\/data\/symbols\/java.xml-I.sym.txt","additions":158,"deletions":0,"binary":false,"changes":158,"status":"added"},{"patch":"@@ -0,0 +1,46 @@\n+#\n+# Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name javax\/xml\/crypto\/NodeSetData\n+header extends java\/lang\/Object implements javax\/xml\/crypto\/Data,java\/lang\/Iterable flags 601 signature <T:Ljava\/lang\/Object;>Ljava\/lang\/Object;Ljavax\/xml\/crypto\/Data;Ljava\/lang\/Iterable<TT;>;\n+\n+class name javax\/xml\/crypto\/dom\/DOMCryptoContext\n+header extends java\/lang\/Object implements javax\/xml\/crypto\/XMLCryptoContext flags 21\n+innerclass innerClass java\/util\/Map$Entry outerClass java\/util\/Map innerClassName Entry flags 609\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/xml\/crypto\/dsig\/XMLSignatureFactory\n+header extends java\/lang\/Object flags 421\n+innerclass innerClass java\/security\/Provider$Service outerClass java\/security\/Provider innerClassName Service flags 9\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name javax\/xml\/crypto\/dsig\/keyinfo\/KeyInfoFactory\n+header extends java\/lang\/Object flags 421\n+innerclass innerClass java\/security\/Provider$Service outerClass java\/security\/Provider innerClassName Service flags 9\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n","filename":"make\/data\/symbols\/java.xml.crypto-I.sym.txt","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -0,0 +1,58 @@\n+#\n+# Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name com\/sun\/java\/accessibility\/util\/AWTEventMonitor\n+-field name componentWithFocus descriptor Ljava\/awt\/Component;\n+-field name componentListener descriptor Ljava\/awt\/event\/ComponentListener;\n+-field name containerListener descriptor Ljava\/awt\/event\/ContainerListener;\n+-field name focusListener descriptor Ljava\/awt\/event\/FocusListener;\n+-field name keyListener descriptor Ljava\/awt\/event\/KeyListener;\n+-field name mouseListener descriptor Ljava\/awt\/event\/MouseListener;\n+-field name mouseMotionListener descriptor Ljava\/awt\/event\/MouseMotionListener;\n+-field name windowListener descriptor Ljava\/awt\/event\/WindowListener;\n+-field name actionListener descriptor Ljava\/awt\/event\/ActionListener;\n+-field name adjustmentListener descriptor Ljava\/awt\/event\/AdjustmentListener;\n+-field name itemListener descriptor Ljava\/awt\/event\/ItemListener;\n+-field name textListener descriptor Ljava\/awt\/event\/TextListener;\n+\n+class name com\/sun\/java\/accessibility\/util\/AccessibilityListenerList\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name com\/sun\/java\/accessibility\/util\/EventID\n+header extends java\/lang\/Object flags 21\n+\n+class name com\/sun\/java\/accessibility\/util\/GUIInitializedListener\n+header extends java\/lang\/Object implements java\/util\/EventListener flags 601\n+\n+class name com\/sun\/java\/accessibility\/util\/TopLevelWindowListener\n+header extends java\/lang\/Object implements java\/util\/EventListener flags 601\n+\n+class name com\/sun\/java\/accessibility\/util\/Translator\n+header extends javax\/accessibility\/AccessibleContext implements javax\/accessibility\/Accessible,javax\/accessibility\/AccessibleComponent flags 21\n+\n","filename":"make\/data\/symbols\/jdk.accessibility-I.sym.txt","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"","filename":"make\/data\/symbols\/jdk.attach-I.sym.txt","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"make\/data\/symbols\/jdk.attach-H.sym.txt","status":"copied"},{"patch":"@@ -0,0 +1,373 @@\n+#\n+# Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name com\/sun\/source\/doctree\/AuthorTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/BlockTagTree flags 601\n+\n+class name com\/sun\/source\/doctree\/BlockTagTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/DocTree flags 601\n+\n+class name com\/sun\/source\/doctree\/CommentTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/DocTree flags 601\n+\n+class name com\/sun\/source\/doctree\/DeprecatedTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/BlockTagTree flags 601\n+\n+class name com\/sun\/source\/doctree\/DocCommentTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/DocTree flags 601\n+\n+class name com\/sun\/source\/doctree\/DocRootTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/InlineTagTree flags 601\n+\n+class name com\/sun\/source\/doctree\/DocTree$Kind\n+field name SNIPPET descriptor Lcom\/sun\/source\/doctree\/DocTree$Kind; flags 4019\n+\n+class name com\/sun\/source\/doctree\/DocTreeVisitor\n+header extends java\/lang\/Object flags 601 signature <R:Ljava\/lang\/Object;P:Ljava\/lang\/Object;>Ljava\/lang\/Object;\n+method name visitSnippet descriptor (Lcom\/sun\/source\/doctree\/SnippetTree;Ljava\/lang\/Object;)Ljava\/lang\/Object; flags 1 signature (Lcom\/sun\/source\/doctree\/SnippetTree;TP;)TR;\n+\n+class name com\/sun\/source\/doctree\/DocTypeTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/DocTree flags 601\n+\n+class name com\/sun\/source\/doctree\/EndElementTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/DocTree flags 601\n+\n+class name com\/sun\/source\/doctree\/EntityTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/DocTree flags 601\n+\n+class name com\/sun\/source\/doctree\/ErroneousTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/TextTree flags 601\n+\n+class name com\/sun\/source\/doctree\/HiddenTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/BlockTagTree flags 601\n+\n+class name com\/sun\/source\/doctree\/IdentifierTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/DocTree flags 601\n+\n+class name com\/sun\/source\/doctree\/IndexTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/InlineTagTree flags 601\n+\n+class name com\/sun\/source\/doctree\/InheritDocTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/InlineTagTree flags 601\n+\n+class name com\/sun\/source\/doctree\/InlineTagTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/DocTree flags 601\n+\n+class name com\/sun\/source\/doctree\/LinkTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/InlineTagTree flags 601\n+\n+class name com\/sun\/source\/doctree\/LiteralTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/InlineTagTree flags 601\n+\n+class name com\/sun\/source\/doctree\/ParamTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/BlockTagTree flags 601\n+\n+class name com\/sun\/source\/doctree\/ProvidesTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/BlockTagTree flags 601\n+\n+class name com\/sun\/source\/doctree\/ReferenceTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/DocTree flags 601\n+\n+class name com\/sun\/source\/doctree\/SeeTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/BlockTagTree flags 601\n+\n+class name com\/sun\/source\/doctree\/SerialDataTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/BlockTagTree flags 601\n+\n+class name com\/sun\/source\/doctree\/SerialFieldTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/BlockTagTree flags 601\n+\n+class name com\/sun\/source\/doctree\/SerialTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/BlockTagTree flags 601\n+\n+class name com\/sun\/source\/doctree\/SinceTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/BlockTagTree flags 601\n+\n+class name com\/sun\/source\/doctree\/SnippetTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/InlineTagTree flags 601\n+method name getAttributes descriptor ()Ljava\/util\/List; flags 401 signature ()Ljava\/util\/List<+Lcom\/sun\/source\/doctree\/DocTree;>;\n+method name getBody descriptor ()Lcom\/sun\/source\/doctree\/TextTree; flags 401\n+\n+class name com\/sun\/source\/doctree\/StartElementTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/DocTree flags 601\n+\n+class name com\/sun\/source\/doctree\/SummaryTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/InlineTagTree flags 601\n+\n+class name com\/sun\/source\/doctree\/TextTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/DocTree flags 601\n+\n+class name com\/sun\/source\/doctree\/ThrowsTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/BlockTagTree flags 601\n+\n+class name com\/sun\/source\/doctree\/UnknownBlockTagTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/BlockTagTree flags 601\n+\n+class name com\/sun\/source\/doctree\/UnknownInlineTagTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/InlineTagTree flags 601\n+\n+class name com\/sun\/source\/doctree\/UsesTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/BlockTagTree flags 601\n+\n+class name com\/sun\/source\/doctree\/ValueTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/InlineTagTree flags 601\n+\n+class name com\/sun\/source\/doctree\/VersionTree\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/BlockTagTree flags 601\n+\n+class name com\/sun\/source\/tree\/AnnotatedTypeTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/ExpressionTree flags 601\n+\n+class name com\/sun\/source\/tree\/AnnotationTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/ExpressionTree flags 601\n+\n+class name com\/sun\/source\/tree\/ArrayAccessTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/ExpressionTree flags 601\n+\n+class name com\/sun\/source\/tree\/ArrayTypeTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/Tree flags 601\n+\n+class name com\/sun\/source\/tree\/AssertTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/StatementTree flags 601\n+\n+class name com\/sun\/source\/tree\/AssignmentTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/ExpressionTree flags 601\n+\n+class name com\/sun\/source\/tree\/BinaryTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/ExpressionTree flags 601\n+\n+class name com\/sun\/source\/tree\/BlockTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/StatementTree flags 601\n+\n+class name com\/sun\/source\/tree\/BreakTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/StatementTree flags 601\n+\n+class name com\/sun\/source\/tree\/CatchTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/Tree flags 601\n+\n+class name com\/sun\/source\/tree\/ClassTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/StatementTree flags 601\n+\n+class name com\/sun\/source\/tree\/CompilationUnitTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/Tree flags 601\n+\n+class name com\/sun\/source\/tree\/CompoundAssignmentTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/ExpressionTree flags 601\n+\n+class name com\/sun\/source\/tree\/ConditionalExpressionTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/ExpressionTree flags 601\n+\n+class name com\/sun\/source\/tree\/ContinueTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/StatementTree flags 601\n+\n+class name com\/sun\/source\/tree\/DirectiveTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/Tree flags 601\n+\n+class name com\/sun\/source\/tree\/DoWhileLoopTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/StatementTree flags 601\n+\n+class name com\/sun\/source\/tree\/EmptyStatementTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/StatementTree flags 601\n+\n+class name com\/sun\/source\/tree\/EnhancedForLoopTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/StatementTree flags 601\n+\n+class name com\/sun\/source\/tree\/ErroneousTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/ExpressionTree flags 601\n+\n+class name com\/sun\/source\/tree\/ExportsTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/DirectiveTree flags 601\n+\n+class name com\/sun\/source\/tree\/ExpressionStatementTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/StatementTree flags 601\n+\n+class name com\/sun\/source\/tree\/ForLoopTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/StatementTree flags 601\n+\n+class name com\/sun\/source\/tree\/IdentifierTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/ExpressionTree flags 601\n+\n+class name com\/sun\/source\/tree\/IfTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/StatementTree flags 601\n+\n+class name com\/sun\/source\/tree\/ImportTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/Tree flags 601\n+\n+class name com\/sun\/source\/tree\/InstanceOfTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/ExpressionTree flags 601\n+\n+class name com\/sun\/source\/tree\/IntersectionTypeTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/Tree flags 601\n+\n+class name com\/sun\/source\/tree\/LabeledStatementTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/StatementTree flags 601\n+\n+class name com\/sun\/source\/tree\/LineMap\n+header extends java\/lang\/Object flags 601\n+\n+class name com\/sun\/source\/tree\/LiteralTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/ExpressionTree flags 601\n+\n+class name com\/sun\/source\/tree\/MemberSelectTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/ExpressionTree flags 601\n+\n+class name com\/sun\/source\/tree\/MethodInvocationTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/ExpressionTree flags 601\n+\n+class name com\/sun\/source\/tree\/MethodTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/Tree flags 601\n+\n+class name com\/sun\/source\/tree\/ModifiersTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/Tree flags 601\n+\n+class name com\/sun\/source\/tree\/NewArrayTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/ExpressionTree flags 601\n+\n+class name com\/sun\/source\/tree\/NewClassTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/ExpressionTree flags 601\n+\n+class name com\/sun\/source\/tree\/OpensTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/DirectiveTree flags 601\n+\n+class name com\/sun\/source\/tree\/PackageTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/Tree flags 601\n+\n+class name com\/sun\/source\/tree\/ParameterizedTypeTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/Tree flags 601\n+\n+class name com\/sun\/source\/tree\/ParenthesizedTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/ExpressionTree flags 601\n+\n+class name com\/sun\/source\/tree\/PrimitiveTypeTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/Tree flags 601\n+\n+class name com\/sun\/source\/tree\/ProvidesTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/DirectiveTree flags 601\n+\n+class name com\/sun\/source\/tree\/RequiresTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/DirectiveTree flags 601\n+\n+class name com\/sun\/source\/tree\/ReturnTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/StatementTree flags 601\n+\n+class name com\/sun\/source\/tree\/Scope\n+header extends java\/lang\/Object flags 601\n+\n+class name com\/sun\/source\/tree\/StatementTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/Tree flags 601\n+\n+class name com\/sun\/source\/tree\/SwitchTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/StatementTree flags 601\n+\n+class name com\/sun\/source\/tree\/SynchronizedTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/StatementTree flags 601\n+\n+class name com\/sun\/source\/tree\/ThrowTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/StatementTree flags 601\n+\n+class name com\/sun\/source\/tree\/TreeVisitor\n+header extends java\/lang\/Object flags 601 signature <R:Ljava\/lang\/Object;P:Ljava\/lang\/Object;>Ljava\/lang\/Object;\n+\n+class name com\/sun\/source\/tree\/TryTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/StatementTree flags 601\n+\n+class name com\/sun\/source\/tree\/TypeCastTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/ExpressionTree flags 601\n+\n+class name com\/sun\/source\/tree\/TypeParameterTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/Tree flags 601\n+\n+class name com\/sun\/source\/tree\/UnaryTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/ExpressionTree flags 601\n+\n+class name com\/sun\/source\/tree\/UnionTypeTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/Tree flags 601\n+\n+class name com\/sun\/source\/tree\/UsesTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/DirectiveTree flags 601\n+\n+class name com\/sun\/source\/tree\/VariableTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/StatementTree flags 601\n+\n+class name com\/sun\/source\/tree\/WhileLoopTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/StatementTree flags 601\n+\n+class name com\/sun\/source\/tree\/WildcardTree\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/Tree flags 601\n+\n+class name com\/sun\/source\/util\/DocSourcePositions\n+header extends java\/lang\/Object implements com\/sun\/source\/util\/SourcePositions flags 601\n+\n+class name com\/sun\/source\/util\/DocTreeFactory\n+header extends java\/lang\/Object flags 601\n+innerclass innerClass com\/sun\/source\/doctree\/AttributeTree$ValueKind outerClass com\/sun\/source\/doctree\/AttributeTree innerClassName ValueKind flags 4019\n+method name newSnippetTree descriptor (Ljava\/util\/List;Lcom\/sun\/source\/doctree\/TextTree;)Lcom\/sun\/source\/doctree\/SnippetTree; flags 401 signature (Ljava\/util\/List<+Lcom\/sun\/source\/doctree\/DocTree;>;Lcom\/sun\/source\/doctree\/TextTree;)Lcom\/sun\/source\/doctree\/SnippetTree;\n+\n+class name com\/sun\/source\/util\/DocTreePathScanner\n+header extends com\/sun\/source\/util\/DocTreeScanner flags 21 signature <R:Ljava\/lang\/Object;P:Ljava\/lang\/Object;>Lcom\/sun\/source\/util\/DocTreeScanner<TR;TP;>;\n+\n+class name com\/sun\/source\/util\/DocTreeScanner\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/DocTreeVisitor flags 21 signature <R:Ljava\/lang\/Object;P:Ljava\/lang\/Object;>Ljava\/lang\/Object;Lcom\/sun\/source\/doctree\/DocTreeVisitor<TR;TP;>;\n+method name visitSnippet descriptor (Lcom\/sun\/source\/doctree\/SnippetTree;Ljava\/lang\/Object;)Ljava\/lang\/Object; flags 1 signature (Lcom\/sun\/source\/doctree\/SnippetTree;TP;)TR;\n+\n+class name com\/sun\/source\/util\/DocTrees\n+header extends com\/sun\/source\/util\/Trees flags 421\n+innerclass innerClass javax\/tools\/JavaCompiler$CompilationTask outerClass javax\/tools\/JavaCompiler innerClassName CompilationTask flags 609\n+innerclass innerClass javax\/tools\/Diagnostic$Kind outerClass javax\/tools\/Diagnostic innerClassName Kind flags 4019\n+\n+class name com\/sun\/source\/util\/JavacTask\n+header extends java\/lang\/Object implements javax\/tools\/JavaCompiler$CompilationTask flags 421\n+innerclass innerClass javax\/tools\/JavaCompiler$CompilationTask outerClass javax\/tools\/JavaCompiler innerClassName CompilationTask flags 609\n+\n+class name com\/sun\/source\/util\/Plugin\n+header extends java\/lang\/Object flags 601\n+\n+class name com\/sun\/source\/util\/SimpleDocTreeVisitor\n+header extends java\/lang\/Object implements com\/sun\/source\/doctree\/DocTreeVisitor flags 21 signature <R:Ljava\/lang\/Object;P:Ljava\/lang\/Object;>Ljava\/lang\/Object;Lcom\/sun\/source\/doctree\/DocTreeVisitor<TR;TP;>;\n+method name visitSnippet descriptor (Lcom\/sun\/source\/doctree\/SnippetTree;Ljava\/lang\/Object;)Ljava\/lang\/Object; flags 1 signature (Lcom\/sun\/source\/doctree\/SnippetTree;TP;)TR;\n+\n+class name com\/sun\/source\/util\/SimpleTreeVisitor\n+header extends java\/lang\/Object implements com\/sun\/source\/tree\/TreeVisitor flags 21 signature <R:Ljava\/lang\/Object;P:Ljava\/lang\/Object;>Ljava\/lang\/Object;Lcom\/sun\/source\/tree\/TreeVisitor<TR;TP;>;\n+\n+class name com\/sun\/source\/util\/SourcePositions\n+header extends java\/lang\/Object flags 601\n+\n+class name com\/sun\/source\/util\/TaskListener\n+header extends java\/lang\/Object flags 601\n+\n+class name com\/sun\/source\/util\/TreePathScanner\n+header extends com\/sun\/source\/util\/TreeScanner flags 21 signature <R:Ljava\/lang\/Object;P:Ljava\/lang\/Object;>Lcom\/sun\/source\/util\/TreeScanner<TR;TP;>;\n+\n+class name com\/sun\/source\/util\/Trees\n+header extends java\/lang\/Object flags 421\n+innerclass innerClass javax\/tools\/JavaCompiler$CompilationTask outerClass javax\/tools\/JavaCompiler innerClassName CompilationTask flags 609\n+innerclass innerClass javax\/tools\/Diagnostic$Kind outerClass javax\/tools\/Diagnostic innerClassName Kind flags 4019\n+\n+class name com\/sun\/tools\/javac\/Main\n+header extends java\/lang\/Object flags 21\n+\n","filename":"make\/data\/symbols\/jdk.compiler-I.sym.txt","additions":373,"deletions":0,"binary":false,"changes":373,"status":"added"},{"patch":"","filename":"make\/data\/symbols\/jdk.dynalink-I.sym.txt","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"make\/data\/symbols\/jdk.dynalink-H.sym.txt","status":"copied"},{"patch":"@@ -0,0 +1,110 @@\n+#\n+# Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+module name jdk.httpserver\n+header exports com\/sun\/net\/httpserver,com\/sun\/net\/httpserver\/spi requires name\\u0020;java.base\\u0020;flags\\u0020;8000 uses com\/sun\/net\/httpserver\/spi\/HttpServerProvider target linux-amd64 moduleMainClass sun\/net\/httpserver\/simpleserver\/Main flags 8000\n+\n+class name com\/sun\/net\/httpserver\/Filter\n+method name adaptRequest descriptor (Ljava\/lang\/String;Ljava\/util\/function\/UnaryOperator;)Lcom\/sun\/net\/httpserver\/Filter; flags 9 signature (Ljava\/lang\/String;Ljava\/util\/function\/UnaryOperator<Lcom\/sun\/net\/httpserver\/Request;>;)Lcom\/sun\/net\/httpserver\/Filter;\n+\n+class name com\/sun\/net\/httpserver\/Headers\n+header extends java\/lang\/Object implements java\/util\/Map flags 21 signature Ljava\/lang\/Object;Ljava\/util\/Map<Ljava\/lang\/String;Ljava\/util\/List<Ljava\/lang\/String;>;>;\n+innerclass innerClass java\/util\/Map$Entry outerClass java\/util\/Map innerClassName Entry flags 609\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+method name <init> descriptor (Ljava\/util\/Map;)V flags 1 signature (Ljava\/util\/Map<Ljava\/lang\/String;Ljava\/util\/List<Ljava\/lang\/String;>;>;)V\n+method name replaceAll descriptor (Ljava\/util\/function\/BiFunction;)V flags 1 signature (Ljava\/util\/function\/BiFunction<-Ljava\/lang\/String;-Ljava\/util\/List<Ljava\/lang\/String;>;+Ljava\/util\/List<Ljava\/lang\/String;>;>;)V\n+method name toString descriptor ()Ljava\/lang\/String; flags 1\n+method name of descriptor ([Ljava\/lang\/String;)Lcom\/sun\/net\/httpserver\/Headers; flags 89\n+method name of descriptor (Ljava\/util\/Map;)Lcom\/sun\/net\/httpserver\/Headers; flags 9 signature (Ljava\/util\/Map<Ljava\/lang\/String;Ljava\/util\/List<Ljava\/lang\/String;>;>;)Lcom\/sun\/net\/httpserver\/Headers;\n+\n+class name com\/sun\/net\/httpserver\/HttpContext\n+header extends java\/lang\/Object flags 421\n+\n+class name com\/sun\/net\/httpserver\/HttpExchange\n+header extends java\/lang\/Object implements java\/lang\/AutoCloseable,com\/sun\/net\/httpserver\/Request flags 421\n+\n+class name com\/sun\/net\/httpserver\/HttpHandler\n+header extends java\/lang\/Object flags 601\n+\n+class name com\/sun\/net\/httpserver\/HttpHandlers\n+header extends java\/lang\/Object flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+method name handleOrElse descriptor (Ljava\/util\/function\/Predicate;Lcom\/sun\/net\/httpserver\/HttpHandler;Lcom\/sun\/net\/httpserver\/HttpHandler;)Lcom\/sun\/net\/httpserver\/HttpHandler; flags 9 signature (Ljava\/util\/function\/Predicate<Lcom\/sun\/net\/httpserver\/Request;>;Lcom\/sun\/net\/httpserver\/HttpHandler;Lcom\/sun\/net\/httpserver\/HttpHandler;)Lcom\/sun\/net\/httpserver\/HttpHandler;\n+method name of descriptor (ILcom\/sun\/net\/httpserver\/Headers;Ljava\/lang\/String;)Lcom\/sun\/net\/httpserver\/HttpHandler; flags 9\n+\n+class name com\/sun\/net\/httpserver\/HttpPrincipal\n+header extends java\/lang\/Object implements java\/security\/Principal flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name com\/sun\/net\/httpserver\/HttpServer\n+header extends java\/lang\/Object flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+method name create descriptor (Ljava\/net\/InetSocketAddress;ILjava\/lang\/String;Lcom\/sun\/net\/httpserver\/HttpHandler;[Lcom\/sun\/net\/httpserver\/Filter;)Lcom\/sun\/net\/httpserver\/HttpServer; thrownTypes java\/io\/IOException flags 89\n+\n+class name com\/sun\/net\/httpserver\/HttpsConfigurator\n+header extends java\/lang\/Object flags 21\n+\n+class name com\/sun\/net\/httpserver\/HttpsExchange\n+header extends com\/sun\/net\/httpserver\/HttpExchange flags 421\n+\n+class name com\/sun\/net\/httpserver\/HttpsParameters\n+header extends java\/lang\/Object flags 421\n+\n+class name com\/sun\/net\/httpserver\/HttpsServer\n+header extends com\/sun\/net\/httpserver\/HttpServer flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+method name create descriptor (Ljava\/net\/InetSocketAddress;ILjava\/lang\/String;Lcom\/sun\/net\/httpserver\/HttpHandler;[Lcom\/sun\/net\/httpserver\/Filter;)Lcom\/sun\/net\/httpserver\/HttpsServer; thrownTypes java\/io\/IOException flags 89\n+\n+class name com\/sun\/net\/httpserver\/Request\n+header extends java\/lang\/Object flags 601\n+method name getRequestURI descriptor ()Ljava\/net\/URI; flags 401\n+method name getRequestMethod descriptor ()Ljava\/lang\/String; flags 401\n+method name getRequestHeaders descriptor ()Lcom\/sun\/net\/httpserver\/Headers; flags 401\n+method name with descriptor (Ljava\/lang\/String;Ljava\/util\/List;)Lcom\/sun\/net\/httpserver\/Request; flags 1 signature (Ljava\/lang\/String;Ljava\/util\/List<Ljava\/lang\/String;>;)Lcom\/sun\/net\/httpserver\/Request;\n+\n+class name com\/sun\/net\/httpserver\/SimpleFileServer\n+header extends java\/lang\/Object nestMembers com\/sun\/net\/httpserver\/SimpleFileServer$OutputLevel flags 31\n+innerclass innerClass com\/sun\/net\/httpserver\/SimpleFileServer$OutputLevel outerClass com\/sun\/net\/httpserver\/SimpleFileServer innerClassName OutputLevel flags 4019\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+method name createFileServer descriptor (Ljava\/net\/InetSocketAddress;Ljava\/nio\/file\/Path;Lcom\/sun\/net\/httpserver\/SimpleFileServer$OutputLevel;)Lcom\/sun\/net\/httpserver\/HttpServer; flags 9\n+method name createFileHandler descriptor (Ljava\/nio\/file\/Path;)Lcom\/sun\/net\/httpserver\/HttpHandler; flags 9\n+method name createOutputFilter descriptor (Ljava\/io\/OutputStream;Lcom\/sun\/net\/httpserver\/SimpleFileServer$OutputLevel;)Lcom\/sun\/net\/httpserver\/Filter; flags 9\n+\n+class name com\/sun\/net\/httpserver\/SimpleFileServer$OutputLevel\n+header extends java\/lang\/Enum nestHost com\/sun\/net\/httpserver\/SimpleFileServer flags 4031 signature Ljava\/lang\/Enum<Lcom\/sun\/net\/httpserver\/SimpleFileServer$OutputLevel;>;\n+innerclass innerClass com\/sun\/net\/httpserver\/SimpleFileServer$OutputLevel outerClass com\/sun\/net\/httpserver\/SimpleFileServer innerClassName OutputLevel flags 4019\n+field name NONE descriptor Lcom\/sun\/net\/httpserver\/SimpleFileServer$OutputLevel; flags 4019\n+field name INFO descriptor Lcom\/sun\/net\/httpserver\/SimpleFileServer$OutputLevel; flags 4019\n+field name VERBOSE descriptor Lcom\/sun\/net\/httpserver\/SimpleFileServer$OutputLevel; flags 4019\n+method name values descriptor ()[Lcom\/sun\/net\/httpserver\/SimpleFileServer$OutputLevel; flags 9\n+method name valueOf descriptor (Ljava\/lang\/String;)Lcom\/sun\/net\/httpserver\/SimpleFileServer$OutputLevel; flags 9\n+\n+class name com\/sun\/net\/httpserver\/spi\/HttpServerProvider\n+header extends java\/lang\/Object flags 421\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n","filename":"make\/data\/symbols\/jdk.httpserver-I.sym.txt","additions":110,"deletions":0,"binary":false,"changes":110,"status":"added"},{"patch":"@@ -0,0 +1,582 @@\n+#\n+# Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name jdk\/incubator\/foreign\/AbstractLayout\n+header extends java\/lang\/Object implements jdk\/incubator\/foreign\/MemoryLayout flags 420\n+innerclass innerClass java\/lang\/constant\/DirectMethodHandleDesc$Kind outerClass java\/lang\/constant\/DirectMethodHandleDesc innerClassName Kind flags 4019\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+-method name <init> descriptor (Ljava\/util\/OptionalLong;JLjava\/util\/Map;)V\n+-method name attribute descriptor (Ljava\/lang\/String;)Ljava\/util\/Optional;\n+-method name attributes descriptor ()Ljava\/util\/stream\/Stream;\n+-method name withAttribute descriptor (Ljava\/lang\/String;Ljava\/lang\/constant\/Constable;)Ljdk\/incubator\/foreign\/AbstractLayout;\n+-method name withAttribute descriptor (Ljava\/lang\/String;Ljava\/lang\/constant\/Constable;)Ljdk\/incubator\/foreign\/MemoryLayout;\n+method name <init> descriptor (Ljava\/util\/OptionalLong;JLjava\/util\/Optional;)V flags 1 signature (Ljava\/util\/OptionalLong;JLjava\/util\/Optional<Ljava\/lang\/String;>;)V\n+method name byteSize descriptor ()J flags 1\n+\n+class name jdk\/incubator\/foreign\/Addressable\n+header extends java\/lang\/Object sealed true flags 601\n+\n+class name jdk\/incubator\/foreign\/CLinker\n+header extends java\/lang\/Object implements jdk\/incubator\/foreign\/SymbolLookup sealed true flags 601\n+-field name C_CHAR descriptor Ljdk\/incubator\/foreign\/ValueLayout;\n+-field name C_SHORT descriptor Ljdk\/incubator\/foreign\/ValueLayout;\n+-field name C_INT descriptor Ljdk\/incubator\/foreign\/ValueLayout;\n+-field name C_LONG descriptor Ljdk\/incubator\/foreign\/ValueLayout;\n+-field name C_LONG_LONG descriptor Ljdk\/incubator\/foreign\/ValueLayout;\n+-field name C_FLOAT descriptor Ljdk\/incubator\/foreign\/ValueLayout;\n+-field name C_DOUBLE descriptor Ljdk\/incubator\/foreign\/ValueLayout;\n+-field name C_POINTER descriptor Ljdk\/incubator\/foreign\/ValueLayout;\n+-field name C_VA_LIST descriptor Ljdk\/incubator\/foreign\/MemoryLayout;\n+-method name downcallHandle descriptor (Ljdk\/incubator\/foreign\/Addressable;Ljava\/lang\/invoke\/MethodType;Ljdk\/incubator\/foreign\/FunctionDescriptor;)Ljava\/lang\/invoke\/MethodHandle;\n+-method name asVarArg descriptor (Ljdk\/incubator\/foreign\/MemoryLayout;)Ljdk\/incubator\/foreign\/MemoryLayout;\n+-method name toJavaString descriptor (Ljdk\/incubator\/foreign\/MemorySegment;)Ljava\/lang\/String;\n+-method name getInstance descriptor ()Ljdk\/incubator\/foreign\/CLinker;\n+-method name systemLookup descriptor ()Ljdk\/incubator\/foreign\/SymbolLookup;\n+-method name downcallHandle descriptor (Ljdk\/incubator\/foreign\/Addressable;Ljdk\/incubator\/foreign\/SegmentAllocator;Ljava\/lang\/invoke\/MethodType;Ljdk\/incubator\/foreign\/FunctionDescriptor;)Ljava\/lang\/invoke\/MethodHandle;\n+-method name downcallHandle descriptor (Ljava\/lang\/invoke\/MethodType;Ljdk\/incubator\/foreign\/FunctionDescriptor;)Ljava\/lang\/invoke\/MethodHandle;\n+-method name upcallStub descriptor (Ljava\/lang\/invoke\/MethodHandle;Ljdk\/incubator\/foreign\/FunctionDescriptor;Ljdk\/incubator\/foreign\/ResourceScope;)Ljdk\/incubator\/foreign\/MemoryAddress;\n+-method name toCString descriptor (Ljava\/lang\/String;Ljdk\/incubator\/foreign\/SegmentAllocator;)Ljdk\/incubator\/foreign\/MemorySegment;\n+-method name toCString descriptor (Ljava\/lang\/String;Ljdk\/incubator\/foreign\/ResourceScope;)Ljdk\/incubator\/foreign\/MemorySegment;\n+-method name toJavaString descriptor (Ljdk\/incubator\/foreign\/MemoryAddress;)Ljava\/lang\/String;\n+-method name allocateMemory descriptor (J)Ljdk\/incubator\/foreign\/MemoryAddress;\n+-method name freeMemory descriptor (Ljdk\/incubator\/foreign\/MemoryAddress;)V\n+method name systemCLinker descriptor ()Ljdk\/incubator\/foreign\/CLinker; flags 9 runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;\n+method name lookup descriptor (Ljava\/lang\/String;)Ljava\/util\/Optional; flags 1 signature (Ljava\/lang\/String;)Ljava\/util\/Optional<Ljdk\/incubator\/foreign\/NativeSymbol;>;\n+method name downcallHandle descriptor (Ljdk\/incubator\/foreign\/NativeSymbol;Ljdk\/incubator\/foreign\/FunctionDescriptor;)Ljava\/lang\/invoke\/MethodHandle; flags 1\n+method name downcallHandle descriptor (Ljdk\/incubator\/foreign\/FunctionDescriptor;)Ljava\/lang\/invoke\/MethodHandle; flags 401\n+method name upcallStub descriptor (Ljava\/lang\/invoke\/MethodHandle;Ljdk\/incubator\/foreign\/FunctionDescriptor;Ljdk\/incubator\/foreign\/ResourceScope;)Ljdk\/incubator\/foreign\/NativeSymbol; flags 401\n+method name downcallType descriptor (Ljdk\/incubator\/foreign\/FunctionDescriptor;)Ljava\/lang\/invoke\/MethodType; flags 9\n+method name upcallType descriptor (Ljdk\/incubator\/foreign\/FunctionDescriptor;)Ljava\/lang\/invoke\/MethodType; flags 9\n+\n+-class name jdk\/incubator\/foreign\/CLinker$TypeKind\n+\n+-class name jdk\/incubator\/foreign\/CLinker$VaList\n+\n+-class name jdk\/incubator\/foreign\/CLinker$VaList$Builder\n+\n+class name jdk\/incubator\/foreign\/FunctionDescriptor\n+header extends java\/lang\/Object implements java\/lang\/constant\/Constable sealed true flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+-field name TRIVIAL_ATTRIBUTE_NAME descriptor Ljava\/lang\/String;\n+-method name attribute descriptor (Ljava\/lang\/String;)Ljava\/util\/Optional;\n+-method name attributes descriptor ()Ljava\/util\/stream\/Stream;\n+-method name withAttribute descriptor (Ljava\/lang\/String;Ljava\/lang\/constant\/Constable;)Ljdk\/incubator\/foreign\/FunctionDescriptor;\n+-method name withAppendedArgumentLayouts descriptor ([Ljdk\/incubator\/foreign\/MemoryLayout;)Ljdk\/incubator\/foreign\/FunctionDescriptor;\n+-method name withReturnLayout descriptor (Ljdk\/incubator\/foreign\/MemoryLayout;)Ljdk\/incubator\/foreign\/FunctionDescriptor;\n+-method name withVoidReturnLayout descriptor ()Ljdk\/incubator\/foreign\/FunctionDescriptor;\n+method name asVariadic descriptor ([Ljdk\/incubator\/foreign\/MemoryLayout;)Ljdk\/incubator\/foreign\/FunctionDescriptor; flags 81\n+method name firstVariadicArgumentIndex descriptor ()I flags 1\n+method name appendArgumentLayouts descriptor ([Ljdk\/incubator\/foreign\/MemoryLayout;)Ljdk\/incubator\/foreign\/FunctionDescriptor; flags 81\n+method name insertArgumentLayouts descriptor (I[Ljdk\/incubator\/foreign\/MemoryLayout;)Ljdk\/incubator\/foreign\/FunctionDescriptor; flags 81\n+method name changeReturnLayout descriptor (Ljdk\/incubator\/foreign\/MemoryLayout;)Ljdk\/incubator\/foreign\/FunctionDescriptor; flags 1\n+method name dropReturnLayout descriptor ()Ljdk\/incubator\/foreign\/FunctionDescriptor; flags 1\n+\n+class name jdk\/incubator\/foreign\/GroupLayout\n+-method name withAttribute descriptor (Ljava\/lang\/String;Ljava\/lang\/constant\/Constable;)Ljdk\/incubator\/foreign\/GroupLayout;\n+-method name withAttribute descriptor (Ljava\/lang\/String;Ljava\/lang\/constant\/Constable;)Ljdk\/incubator\/foreign\/AbstractLayout;\n+-method name attributes descriptor ()Ljava\/util\/stream\/Stream;\n+-method name attribute descriptor (Ljava\/lang\/String;)Ljava\/util\/Optional;\n+-method name withAttribute descriptor (Ljava\/lang\/String;Ljava\/lang\/constant\/Constable;)Ljdk\/incubator\/foreign\/MemoryLayout;\n+method name byteSize descriptor ()J flags 1041\n+\n+-class name jdk\/incubator\/foreign\/MemoryAccess\n+\n+class name jdk\/incubator\/foreign\/MemoryAddress\n+header extends java\/lang\/Object implements jdk\/incubator\/foreign\/Addressable sealed true flags 601\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfByte outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfByte flags 19\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfBoolean outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfBoolean flags 19\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfChar outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfChar flags 19\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfShort outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfShort flags 19\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfInt outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfInt flags 19\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfFloat outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfFloat flags 19\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfLong outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfLong flags 19\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfDouble outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfDouble flags 19\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfAddress outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfAddress flags 19\n+-method name address descriptor ()Ljdk\/incubator\/foreign\/MemoryAddress;\n+-method name segmentOffset descriptor (Ljdk\/incubator\/foreign\/MemorySegment;)J\n+-method name scope descriptor ()Ljdk\/incubator\/foreign\/ResourceScope;\n+-method name asSegment descriptor (JLjdk\/incubator\/foreign\/ResourceScope;)Ljdk\/incubator\/foreign\/MemorySegment;\n+-method name asSegment descriptor (JLjava\/lang\/Runnable;Ljdk\/incubator\/foreign\/ResourceScope;)Ljdk\/incubator\/foreign\/MemorySegment;\n+-method name isNative descriptor ()Z\n+method name getUtf8String descriptor (J)Ljava\/lang\/String; flags 401 runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;\n+method name setUtf8String descriptor (JLjava\/lang\/String;)V flags 401 runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;\n+method name get descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfByte;J)B flags 401 runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;\n+method name set descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfByte;JB)V flags 401 runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;\n+method name get descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfBoolean;J)Z flags 401 runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;\n+method name set descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfBoolean;JZ)V flags 401 runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;\n+method name get descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfChar;J)C flags 401 runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;\n+method name set descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfChar;JC)V flags 401 runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;\n+method name get descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfShort;J)S flags 401 runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;\n+method name set descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfShort;JS)V flags 401 runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;\n+method name get descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfInt;J)I flags 401 runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;\n+method name set descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfInt;JI)V flags 401 runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;\n+method name get descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfFloat;J)F flags 401 runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;\n+method name set descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfFloat;JF)V flags 401 runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;\n+method name get descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfLong;J)J flags 401 runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;\n+method name set descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfLong;JJ)V flags 401 runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;\n+method name get descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfDouble;J)D flags 401 runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;\n+method name set descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfDouble;JD)V flags 401 runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;\n+method name get descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfAddress;J)Ljdk\/incubator\/foreign\/MemoryAddress; flags 401 runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;\n+method name set descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfAddress;JLjdk\/incubator\/foreign\/Addressable;)V flags 401 runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;\n+method name getAtIndex descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfChar;J)C flags 401 runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;\n+method name setAtIndex descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfChar;JC)V flags 401 runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;\n+method name getAtIndex descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfShort;J)S flags 401 runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;\n+method name setAtIndex descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfShort;JS)V flags 401 runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;\n+method name getAtIndex descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfInt;J)I flags 401 runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;\n+method name setAtIndex descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfInt;JI)V flags 401 runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;\n+method name getAtIndex descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfFloat;J)F flags 401 runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;\n+method name setAtIndex descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfFloat;JF)V flags 401 runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;\n+method name getAtIndex descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfLong;J)J flags 401 runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;\n+method name setAtIndex descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfLong;JJ)V flags 401 runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;\n+method name getAtIndex descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfDouble;J)D flags 401 runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;\n+method name setAtIndex descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfDouble;JD)V flags 401 runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;\n+method name getAtIndex descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfAddress;J)Ljdk\/incubator\/foreign\/MemoryAddress; flags 401 runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;\n+method name setAtIndex descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfAddress;JLjdk\/incubator\/foreign\/Addressable;)V flags 401 runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;\n+\n+class name jdk\/incubator\/foreign\/MemoryHandles\n+-method name varHandle descriptor (Ljava\/lang\/Class;Ljava\/nio\/ByteOrder;)Ljava\/lang\/invoke\/VarHandle;\n+-method name varHandle descriptor (Ljava\/lang\/Class;JLjava\/nio\/ByteOrder;)Ljava\/lang\/invoke\/VarHandle;\n+-method name asAddressVarHandle descriptor (Ljava\/lang\/invoke\/VarHandle;)Ljava\/lang\/invoke\/VarHandle;\n+method name varHandle descriptor (Ljdk\/incubator\/foreign\/ValueLayout;)Ljava\/lang\/invoke\/VarHandle; flags 9\n+\n+class name jdk\/incubator\/foreign\/MemoryLayout\n+header extends java\/lang\/Object implements java\/lang\/constant\/Constable nestMembers jdk\/incubator\/foreign\/MemoryLayout$PathElement sealed true flags 601\n+innerclass innerClass jdk\/incubator\/foreign\/MemoryLayout$PathElement outerClass jdk\/incubator\/foreign\/MemoryLayout innerClassName PathElement flags 609\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfBoolean outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfBoolean flags 19\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfChar outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfChar flags 19\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfByte outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfByte flags 19\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfShort outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfShort flags 19\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfInt outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfInt flags 19\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfFloat outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfFloat flags 19\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfLong outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfLong flags 19\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfDouble outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfDouble flags 19\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfAddress outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfAddress flags 19\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+-field name LAYOUT_NAME descriptor Ljava\/lang\/String;\n+-method name byteSize descriptor ()J\n+-method name varHandle descriptor (Ljava\/lang\/Class;[Ljdk\/incubator\/foreign\/MemoryLayout$PathElement;)Ljava\/lang\/invoke\/VarHandle;\n+-method name attribute descriptor (Ljava\/lang\/String;)Ljava\/util\/Optional;\n+-method name withAttribute descriptor (Ljava\/lang\/String;Ljava\/lang\/constant\/Constable;)Ljdk\/incubator\/foreign\/MemoryLayout;\n+-method name attributes descriptor ()Ljava\/util\/stream\/Stream;\n+-method name valueLayout descriptor (JLjava\/nio\/ByteOrder;)Ljdk\/incubator\/foreign\/ValueLayout;\n+method name byteSize descriptor ()J flags 401\n+method name varHandle descriptor ([Ljdk\/incubator\/foreign\/MemoryLayout$PathElement;)Ljava\/lang\/invoke\/VarHandle; flags 81\n+method name valueLayout descriptor (Ljava\/lang\/Class;Ljava\/nio\/ByteOrder;)Ljdk\/incubator\/foreign\/ValueLayout; flags 9 signature (Ljava\/lang\/Class<*>;Ljava\/nio\/ByteOrder;)Ljdk\/incubator\/foreign\/ValueLayout;\n+\n+class name jdk\/incubator\/foreign\/MemoryLayout$PathElement\n+header extends java\/lang\/Object nestHost jdk\/incubator\/foreign\/MemoryLayout sealed true flags 601\n+innerclass innerClass jdk\/incubator\/foreign\/MemoryLayout$PathElement outerClass jdk\/incubator\/foreign\/MemoryLayout innerClassName PathElement flags 609\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+-class name jdk\/incubator\/foreign\/MemoryLayouts\n+\n+class name jdk\/incubator\/foreign\/MemorySegment\n+header extends java\/lang\/Object implements jdk\/incubator\/foreign\/Addressable sealed true flags 601\n+innerclass innerClass java\/nio\/channels\/FileChannel$MapMode outerClass java\/nio\/channels\/FileChannel innerClassName MapMode flags 9\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfByte outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfByte flags 19\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfBoolean outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfBoolean flags 19\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfChar outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfChar flags 19\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfShort outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfShort flags 19\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfInt outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfInt flags 19\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfFloat outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfFloat flags 19\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfLong outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfLong flags 19\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfDouble outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfDouble flags 19\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfAddress outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfAddress flags 19\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+-method name toByteArray descriptor ()[B\n+-method name copyFrom descriptor (Ljdk\/incubator\/foreign\/MemorySegment;)V\n+-method name asSlice descriptor (Ljdk\/incubator\/foreign\/MemoryAddress;J)Ljdk\/incubator\/foreign\/MemorySegment;\n+-method name asSlice descriptor (Ljdk\/incubator\/foreign\/MemoryAddress;)Ljdk\/incubator\/foreign\/MemorySegment;\n+-method name toShortArray descriptor ()[S\n+-method name toCharArray descriptor ()[C\n+-method name toIntArray descriptor ()[I\n+-method name toFloatArray descriptor ()[F\n+-method name toLongArray descriptor ()[J\n+-method name toDoubleArray descriptor ()[D\n+-method name asReadOnly descriptor ()Ljdk\/incubator\/foreign\/MemorySegment;\n+-method name isReadOnly descriptor ()Z\n+-method name globalNativeSegment descriptor ()Ljdk\/incubator\/foreign\/MemorySegment;\n+method name asReadOnly descriptor ()Ljdk\/incubator\/foreign\/MemorySegment; flags 401\n+method name isReadOnly descriptor ()Z flags 401\n+method name asOverlappingSlice descriptor (Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment; flags 401\n+method name segmentOffset descriptor (Ljdk\/incubator\/foreign\/MemorySegment;)J flags 401\n+method name copyFrom descriptor (Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/MemorySegment; flags 1\n+method name toArray descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfByte;)[B flags 401\n+method name toArray descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfShort;)[S flags 401\n+method name toArray descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfChar;)[C flags 401\n+method name toArray descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfInt;)[I flags 401\n+method name toArray descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfFloat;)[F flags 401\n+method name toArray descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfLong;)[J flags 401\n+method name toArray descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfDouble;)[D flags 401\n+method name getUtf8String descriptor (J)Ljava\/lang\/String; flags 1\n+method name setUtf8String descriptor (JLjava\/lang\/String;)V flags 1\n+method name ofAddress descriptor (Ljdk\/incubator\/foreign\/MemoryAddress;JLjdk\/incubator\/foreign\/ResourceScope;)Ljdk\/incubator\/foreign\/MemorySegment; flags 9 runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;\n+method name copy descriptor (Ljdk\/incubator\/foreign\/MemorySegment;JLjdk\/incubator\/foreign\/MemorySegment;JJ)V flags 9 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name copy descriptor (Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/ValueLayout;JLjdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/ValueLayout;JJ)V flags 9 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name get descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfByte;J)B flags 1 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name set descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfByte;JB)V flags 1 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name get descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfBoolean;J)Z flags 1 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name set descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfBoolean;JZ)V flags 1 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name get descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfChar;J)C flags 1 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name set descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfChar;JC)V flags 1 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name get descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfShort;J)S flags 1 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name set descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfShort;JS)V flags 1 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name get descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfInt;J)I flags 1 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name set descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfInt;JI)V flags 1 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name get descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfFloat;J)F flags 1 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name set descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfFloat;JF)V flags 1 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name get descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfLong;J)J flags 1 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name set descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfLong;JJ)V flags 1 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name get descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfDouble;J)D flags 1 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name set descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfDouble;JD)V flags 1 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name get descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfAddress;J)Ljdk\/incubator\/foreign\/MemoryAddress; flags 1 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name set descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfAddress;JLjdk\/incubator\/foreign\/Addressable;)V flags 1 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name getAtIndex descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfChar;J)C flags 1 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name setAtIndex descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfChar;JC)V flags 1 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name getAtIndex descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfShort;J)S flags 1 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name setAtIndex descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfShort;JS)V flags 1 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name getAtIndex descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfInt;J)I flags 1 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name setAtIndex descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfInt;JI)V flags 1 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name getAtIndex descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfFloat;J)F flags 1 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name setAtIndex descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfFloat;JF)V flags 1 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name getAtIndex descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfLong;J)J flags 1 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name setAtIndex descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfLong;JJ)V flags 1 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name getAtIndex descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfDouble;J)D flags 1 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name setAtIndex descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfDouble;JD)V flags 1 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name getAtIndex descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfAddress;J)Ljdk\/incubator\/foreign\/MemoryAddress; flags 1 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name setAtIndex descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfAddress;JLjdk\/incubator\/foreign\/Addressable;)V flags 1 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name copy descriptor (Ljdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/ValueLayout;JLjava\/lang\/Object;II)V flags 9 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name copy descriptor (Ljava\/lang\/Object;ILjdk\/incubator\/foreign\/MemorySegment;Ljdk\/incubator\/foreign\/ValueLayout;JI)V flags 9 runtimeAnnotations @Ljdk\/internal\/vm\/annotation\/ForceInline;\n+\n+class name jdk\/incubator\/foreign\/NativeSymbol\n+header extends java\/lang\/Object implements jdk\/incubator\/foreign\/Addressable sealed true flags 601\n+method name name descriptor ()Ljava\/lang\/String; flags 401\n+method name scope descriptor ()Ljdk\/incubator\/foreign\/ResourceScope; flags 401\n+method name address descriptor ()Ljdk\/incubator\/foreign\/MemoryAddress; flags 401\n+method name ofAddress descriptor (Ljava\/lang\/String;Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/ResourceScope;)Ljdk\/incubator\/foreign\/NativeSymbol; flags 9 runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;\n+\n+class name jdk\/incubator\/foreign\/ResourceScope\n+header extends java\/lang\/Object implements java\/lang\/AutoCloseable sealed true flags 601\n+-method name isImplicit descriptor ()Z\n+-method name acquire descriptor ()Ljdk\/incubator\/foreign\/ResourceScope$Handle;\n+-method name release descriptor (Ljdk\/incubator\/foreign\/ResourceScope$Handle;)V\n+method name keepAlive descriptor (Ljdk\/incubator\/foreign\/ResourceScope;)V flags 401\n+\n+-class name jdk\/incubator\/foreign\/ResourceScope$Handle\n+\n+class name jdk\/incubator\/foreign\/SegmentAllocator\n+header extends java\/lang\/Object flags 601 runtimeAnnotations @Ljava\/lang\/FunctionalInterface;\n+innerclass innerClass jdk\/incubator\/foreign\/MemoryLayout$PathElement outerClass jdk\/incubator\/foreign\/MemoryLayout innerClassName PathElement flags 609\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfByte outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfByte flags 19\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfChar outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfChar flags 19\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfShort outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfShort flags 19\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfInt outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfInt flags 19\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfFloat outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfFloat flags 19\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfLong outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfLong flags 19\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfDouble outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfDouble flags 19\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfAddress outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfAddress flags 19\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+-method name allocate descriptor (Ljdk\/incubator\/foreign\/ValueLayout;B)Ljdk\/incubator\/foreign\/MemorySegment;\n+-method name allocate descriptor (Ljdk\/incubator\/foreign\/ValueLayout;C)Ljdk\/incubator\/foreign\/MemorySegment;\n+-method name allocate descriptor (Ljdk\/incubator\/foreign\/ValueLayout;S)Ljdk\/incubator\/foreign\/MemorySegment;\n+-method name allocate descriptor (Ljdk\/incubator\/foreign\/ValueLayout;I)Ljdk\/incubator\/foreign\/MemorySegment;\n+-method name allocate descriptor (Ljdk\/incubator\/foreign\/ValueLayout;F)Ljdk\/incubator\/foreign\/MemorySegment;\n+-method name allocate descriptor (Ljdk\/incubator\/foreign\/ValueLayout;J)Ljdk\/incubator\/foreign\/MemorySegment;\n+-method name allocate descriptor (Ljdk\/incubator\/foreign\/ValueLayout;D)Ljdk\/incubator\/foreign\/MemorySegment;\n+-method name allocate descriptor (Ljdk\/incubator\/foreign\/ValueLayout;Ljdk\/incubator\/foreign\/Addressable;)Ljdk\/incubator\/foreign\/MemorySegment;\n+-method name allocateArray descriptor (Ljdk\/incubator\/foreign\/ValueLayout;[B)Ljdk\/incubator\/foreign\/MemorySegment;\n+-method name allocateArray descriptor (Ljdk\/incubator\/foreign\/ValueLayout;[S)Ljdk\/incubator\/foreign\/MemorySegment;\n+-method name allocateArray descriptor (Ljdk\/incubator\/foreign\/ValueLayout;[C)Ljdk\/incubator\/foreign\/MemorySegment;\n+-method name allocateArray descriptor (Ljdk\/incubator\/foreign\/ValueLayout;[I)Ljdk\/incubator\/foreign\/MemorySegment;\n+-method name allocateArray descriptor (Ljdk\/incubator\/foreign\/ValueLayout;[F)Ljdk\/incubator\/foreign\/MemorySegment;\n+-method name allocateArray descriptor (Ljdk\/incubator\/foreign\/ValueLayout;[J)Ljdk\/incubator\/foreign\/MemorySegment;\n+-method name allocateArray descriptor (Ljdk\/incubator\/foreign\/ValueLayout;[D)Ljdk\/incubator\/foreign\/MemorySegment;\n+-method name allocateArray descriptor (Ljdk\/incubator\/foreign\/ValueLayout;[Ljdk\/incubator\/foreign\/Addressable;)Ljdk\/incubator\/foreign\/MemorySegment;\n+-method name arenaAllocator descriptor (JLjdk\/incubator\/foreign\/ResourceScope;)Ljdk\/incubator\/foreign\/SegmentAllocator;\n+-method name arenaAllocator descriptor (Ljdk\/incubator\/foreign\/ResourceScope;)Ljdk\/incubator\/foreign\/SegmentAllocator;\n+-method name ofSegment descriptor (Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/SegmentAllocator;\n+-method name ofScope descriptor (Ljdk\/incubator\/foreign\/ResourceScope;)Ljdk\/incubator\/foreign\/SegmentAllocator;\n+method name allocateUtf8String descriptor (Ljava\/lang\/String;)Ljdk\/incubator\/foreign\/MemorySegment; flags 1\n+method name allocate descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfByte;B)Ljdk\/incubator\/foreign\/MemorySegment; flags 1\n+method name allocate descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfChar;C)Ljdk\/incubator\/foreign\/MemorySegment; flags 1\n+method name allocate descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfShort;S)Ljdk\/incubator\/foreign\/MemorySegment; flags 1\n+method name allocate descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfInt;I)Ljdk\/incubator\/foreign\/MemorySegment; flags 1\n+method name allocate descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfFloat;F)Ljdk\/incubator\/foreign\/MemorySegment; flags 1\n+method name allocate descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfLong;J)Ljdk\/incubator\/foreign\/MemorySegment; flags 1\n+method name allocate descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfDouble;D)Ljdk\/incubator\/foreign\/MemorySegment; flags 1\n+method name allocate descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfAddress;Ljdk\/incubator\/foreign\/Addressable;)Ljdk\/incubator\/foreign\/MemorySegment; flags 1\n+method name allocateArray descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfByte;[B)Ljdk\/incubator\/foreign\/MemorySegment; flags 1\n+method name allocateArray descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfShort;[S)Ljdk\/incubator\/foreign\/MemorySegment; flags 1\n+method name allocateArray descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfChar;[C)Ljdk\/incubator\/foreign\/MemorySegment; flags 1\n+method name allocateArray descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfInt;[I)Ljdk\/incubator\/foreign\/MemorySegment; flags 1\n+method name allocateArray descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfFloat;[F)Ljdk\/incubator\/foreign\/MemorySegment; flags 1\n+method name allocateArray descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfLong;[J)Ljdk\/incubator\/foreign\/MemorySegment; flags 1\n+method name allocateArray descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfDouble;[D)Ljdk\/incubator\/foreign\/MemorySegment; flags 1\n+method name newNativeArena descriptor (Ljdk\/incubator\/foreign\/ResourceScope;)Ljdk\/incubator\/foreign\/SegmentAllocator; flags 9\n+method name newNativeArena descriptor (JLjdk\/incubator\/foreign\/ResourceScope;)Ljdk\/incubator\/foreign\/SegmentAllocator; flags 9\n+method name newNativeArena descriptor (JJLjdk\/incubator\/foreign\/ResourceScope;)Ljdk\/incubator\/foreign\/SegmentAllocator; flags 9\n+method name prefixAllocator descriptor (Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/SegmentAllocator; flags 9\n+method name nativeAllocator descriptor (Ljdk\/incubator\/foreign\/ResourceScope;)Ljdk\/incubator\/foreign\/SegmentAllocator; flags 9\n+method name implicitAllocator descriptor ()Ljdk\/incubator\/foreign\/SegmentAllocator; flags 9\n+\n+class name jdk\/incubator\/foreign\/SequenceLayout\n+-method name withAttribute descriptor (Ljava\/lang\/String;Ljava\/lang\/constant\/Constable;)Ljdk\/incubator\/foreign\/SequenceLayout;\n+-method name withAttribute descriptor (Ljava\/lang\/String;Ljava\/lang\/constant\/Constable;)Ljdk\/incubator\/foreign\/AbstractLayout;\n+-method name attributes descriptor ()Ljava\/util\/stream\/Stream;\n+-method name attribute descriptor (Ljava\/lang\/String;)Ljava\/util\/Optional;\n+-method name withAttribute descriptor (Ljava\/lang\/String;Ljava\/lang\/constant\/Constable;)Ljdk\/incubator\/foreign\/MemoryLayout;\n+method name byteSize descriptor ()J flags 1041\n+\n+class name jdk\/incubator\/foreign\/SymbolLookup\n+-method name lookup descriptor (Ljava\/lang\/String;)Ljava\/util\/Optional;\n+method name lookup descriptor (Ljava\/lang\/String;)Ljava\/util\/Optional; flags 401 signature (Ljava\/lang\/String;)Ljava\/util\/Optional<Ljdk\/incubator\/foreign\/NativeSymbol;>;\n+\n+class name jdk\/incubator\/foreign\/VaList\n+header extends java\/lang\/Object implements jdk\/incubator\/foreign\/Addressable nestMembers jdk\/incubator\/foreign\/VaList$Builder sealed true flags 601\n+innerclass innerClass jdk\/incubator\/foreign\/VaList$Builder outerClass jdk\/incubator\/foreign\/VaList innerClassName Builder flags 609\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfInt outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfInt flags 19\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfLong outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfLong flags 19\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfDouble outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfDouble flags 19\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfAddress outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfAddress flags 19\n+method name nextVarg descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfInt;)I flags 401\n+method name nextVarg descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfLong;)J flags 401\n+method name nextVarg descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfDouble;)D flags 401\n+method name nextVarg descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfAddress;)Ljdk\/incubator\/foreign\/MemoryAddress; flags 401\n+method name nextVarg descriptor (Ljdk\/incubator\/foreign\/GroupLayout;Ljdk\/incubator\/foreign\/SegmentAllocator;)Ljdk\/incubator\/foreign\/MemorySegment; flags 401\n+method name skip descriptor ([Ljdk\/incubator\/foreign\/MemoryLayout;)V flags 481\n+method name scope descriptor ()Ljdk\/incubator\/foreign\/ResourceScope; flags 401\n+method name copy descriptor ()Ljdk\/incubator\/foreign\/VaList; flags 401\n+method name address descriptor ()Ljdk\/incubator\/foreign\/MemoryAddress; flags 401\n+method name ofAddress descriptor (Ljdk\/incubator\/foreign\/MemoryAddress;Ljdk\/incubator\/foreign\/ResourceScope;)Ljdk\/incubator\/foreign\/VaList; flags 9 runtimeAnnotations @Ljdk\/internal\/reflect\/CallerSensitive;\n+method name make descriptor (Ljava\/util\/function\/Consumer;Ljdk\/incubator\/foreign\/ResourceScope;)Ljdk\/incubator\/foreign\/VaList; flags 9 signature (Ljava\/util\/function\/Consumer<Ljdk\/incubator\/foreign\/VaList$Builder;>;Ljdk\/incubator\/foreign\/ResourceScope;)Ljdk\/incubator\/foreign\/VaList;\n+method name empty descriptor ()Ljdk\/incubator\/foreign\/VaList; flags 9\n+\n+class name jdk\/incubator\/foreign\/VaList$Builder\n+header extends java\/lang\/Object nestHost jdk\/incubator\/foreign\/VaList sealed true flags 601\n+innerclass innerClass jdk\/incubator\/foreign\/VaList$Builder outerClass jdk\/incubator\/foreign\/VaList innerClassName Builder flags 609\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfInt outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfInt flags 19\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfLong outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfLong flags 19\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfDouble outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfDouble flags 19\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfAddress outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfAddress flags 19\n+method name addVarg descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfInt;I)Ljdk\/incubator\/foreign\/VaList$Builder; flags 401\n+method name addVarg descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfLong;J)Ljdk\/incubator\/foreign\/VaList$Builder; flags 401\n+method name addVarg descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfDouble;D)Ljdk\/incubator\/foreign\/VaList$Builder; flags 401\n+method name addVarg descriptor (Ljdk\/incubator\/foreign\/ValueLayout$OfAddress;Ljdk\/incubator\/foreign\/Addressable;)Ljdk\/incubator\/foreign\/VaList$Builder; flags 401\n+method name addVarg descriptor (Ljdk\/incubator\/foreign\/GroupLayout;Ljdk\/incubator\/foreign\/MemorySegment;)Ljdk\/incubator\/foreign\/VaList$Builder; flags 401\n+\n+class name jdk\/incubator\/foreign\/ValueLayout\n+header extends jdk\/incubator\/foreign\/AbstractLayout implements jdk\/incubator\/foreign\/MemoryLayout nestMembers jdk\/incubator\/foreign\/ValueLayout$OfAddress,jdk\/incubator\/foreign\/ValueLayout$OfDouble,jdk\/incubator\/foreign\/ValueLayout$OfLong,jdk\/incubator\/foreign\/ValueLayout$OfFloat,jdk\/incubator\/foreign\/ValueLayout$OfInt,jdk\/incubator\/foreign\/ValueLayout$OfShort,jdk\/incubator\/foreign\/ValueLayout$OfChar,jdk\/incubator\/foreign\/ValueLayout$OfByte,jdk\/incubator\/foreign\/ValueLayout$OfBoolean sealed true flags 21\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfAddress outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfAddress flags 19\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfByte outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfByte flags 19\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfBoolean outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfBoolean flags 19\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfChar outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfChar flags 19\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfShort outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfShort flags 19\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfInt outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfInt flags 19\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfLong outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfLong flags 19\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfFloat outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfFloat flags 19\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfDouble outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfDouble flags 19\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+-method name withAttribute descriptor (Ljava\/lang\/String;Ljava\/lang\/constant\/Constable;)Ljdk\/incubator\/foreign\/ValueLayout;\n+-method name withAttribute descriptor (Ljava\/lang\/String;Ljava\/lang\/constant\/Constable;)Ljdk\/incubator\/foreign\/AbstractLayout;\n+-method name attributes descriptor ()Ljava\/util\/stream\/Stream;\n+-method name attribute descriptor (Ljava\/lang\/String;)Ljava\/util\/Optional;\n+-method name withAttribute descriptor (Ljava\/lang\/String;Ljava\/lang\/constant\/Constable;)Ljdk\/incubator\/foreign\/MemoryLayout;\n+field name ADDRESS descriptor Ljdk\/incubator\/foreign\/ValueLayout$OfAddress; flags 19\n+field name JAVA_BYTE descriptor Ljdk\/incubator\/foreign\/ValueLayout$OfByte; flags 19\n+field name JAVA_BOOLEAN descriptor Ljdk\/incubator\/foreign\/ValueLayout$OfBoolean; flags 19\n+field name JAVA_CHAR descriptor Ljdk\/incubator\/foreign\/ValueLayout$OfChar; flags 19\n+field name JAVA_SHORT descriptor Ljdk\/incubator\/foreign\/ValueLayout$OfShort; flags 19\n+field name JAVA_INT descriptor Ljdk\/incubator\/foreign\/ValueLayout$OfInt; flags 19\n+field name JAVA_LONG descriptor Ljdk\/incubator\/foreign\/ValueLayout$OfLong; flags 19\n+field name JAVA_FLOAT descriptor Ljdk\/incubator\/foreign\/ValueLayout$OfFloat; flags 19\n+field name JAVA_DOUBLE descriptor Ljdk\/incubator\/foreign\/ValueLayout$OfDouble; flags 19\n+method name carrier descriptor ()Ljava\/lang\/Class; flags 1 signature ()Ljava\/lang\/Class<*>;\n+method name byteSize descriptor ()J flags 1041\n+\n+class name jdk\/incubator\/foreign\/ValueLayout$OfAddress\n+header extends jdk\/incubator\/foreign\/ValueLayout nestHost jdk\/incubator\/foreign\/ValueLayout flags 31\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfAddress outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfAddress flags 19\n+method name withName descriptor (Ljava\/lang\/String;)Ljdk\/incubator\/foreign\/ValueLayout$OfAddress; flags 1\n+method name withBitAlignment descriptor (J)Ljdk\/incubator\/foreign\/ValueLayout$OfAddress; flags 1\n+method name withOrder descriptor (Ljava\/nio\/ByteOrder;)Ljdk\/incubator\/foreign\/ValueLayout$OfAddress; flags 1\n+method name withBitAlignment descriptor (J)Ljdk\/incubator\/foreign\/ValueLayout; flags 1041\n+method name withName descriptor (Ljava\/lang\/String;)Ljdk\/incubator\/foreign\/ValueLayout; flags 1041\n+method name withOrder descriptor (Ljava\/nio\/ByteOrder;)Ljdk\/incubator\/foreign\/ValueLayout; flags 1041\n+method name withBitAlignment descriptor (J)Ljdk\/incubator\/foreign\/MemoryLayout; flags 1041\n+method name withName descriptor (Ljava\/lang\/String;)Ljdk\/incubator\/foreign\/MemoryLayout; flags 1041\n+method name isPadding descriptor ()Z flags 1041\n+method name bitSize descriptor ()J flags 1041\n+method name hasSize descriptor ()Z flags 1041\n+method name byteSize descriptor ()J flags 1041\n+method name withBitAlignment descriptor (J)Ljdk\/incubator\/foreign\/AbstractLayout; flags 1041\n+method name withName descriptor (Ljava\/lang\/String;)Ljdk\/incubator\/foreign\/AbstractLayout; flags 1041\n+\n+class name jdk\/incubator\/foreign\/ValueLayout$OfBoolean\n+header extends jdk\/incubator\/foreign\/ValueLayout nestHost jdk\/incubator\/foreign\/ValueLayout flags 31\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfBoolean outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfBoolean flags 19\n+method name withName descriptor (Ljava\/lang\/String;)Ljdk\/incubator\/foreign\/ValueLayout$OfBoolean; flags 1\n+method name withBitAlignment descriptor (J)Ljdk\/incubator\/foreign\/ValueLayout$OfBoolean; flags 1\n+method name withOrder descriptor (Ljava\/nio\/ByteOrder;)Ljdk\/incubator\/foreign\/ValueLayout$OfBoolean; flags 1\n+method name withBitAlignment descriptor (J)Ljdk\/incubator\/foreign\/ValueLayout; flags 1041\n+method name withName descriptor (Ljava\/lang\/String;)Ljdk\/incubator\/foreign\/ValueLayout; flags 1041\n+method name withOrder descriptor (Ljava\/nio\/ByteOrder;)Ljdk\/incubator\/foreign\/ValueLayout; flags 1041\n+method name withBitAlignment descriptor (J)Ljdk\/incubator\/foreign\/MemoryLayout; flags 1041\n+method name withName descriptor (Ljava\/lang\/String;)Ljdk\/incubator\/foreign\/MemoryLayout; flags 1041\n+method name isPadding descriptor ()Z flags 1041\n+method name bitSize descriptor ()J flags 1041\n+method name hasSize descriptor ()Z flags 1041\n+method name byteSize descriptor ()J flags 1041\n+method name withBitAlignment descriptor (J)Ljdk\/incubator\/foreign\/AbstractLayout; flags 1041\n+method name withName descriptor (Ljava\/lang\/String;)Ljdk\/incubator\/foreign\/AbstractLayout; flags 1041\n+\n+class name jdk\/incubator\/foreign\/ValueLayout$OfByte\n+header extends jdk\/incubator\/foreign\/ValueLayout nestHost jdk\/incubator\/foreign\/ValueLayout flags 31\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfByte outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfByte flags 19\n+method name withName descriptor (Ljava\/lang\/String;)Ljdk\/incubator\/foreign\/ValueLayout$OfByte; flags 1\n+method name withBitAlignment descriptor (J)Ljdk\/incubator\/foreign\/ValueLayout$OfByte; flags 1\n+method name withOrder descriptor (Ljava\/nio\/ByteOrder;)Ljdk\/incubator\/foreign\/ValueLayout$OfByte; flags 1\n+method name withBitAlignment descriptor (J)Ljdk\/incubator\/foreign\/ValueLayout; flags 1041\n+method name withName descriptor (Ljava\/lang\/String;)Ljdk\/incubator\/foreign\/ValueLayout; flags 1041\n+method name withOrder descriptor (Ljava\/nio\/ByteOrder;)Ljdk\/incubator\/foreign\/ValueLayout; flags 1041\n+method name withBitAlignment descriptor (J)Ljdk\/incubator\/foreign\/MemoryLayout; flags 1041\n+method name withName descriptor (Ljava\/lang\/String;)Ljdk\/incubator\/foreign\/MemoryLayout; flags 1041\n+method name isPadding descriptor ()Z flags 1041\n+method name bitSize descriptor ()J flags 1041\n+method name hasSize descriptor ()Z flags 1041\n+method name byteSize descriptor ()J flags 1041\n+method name withBitAlignment descriptor (J)Ljdk\/incubator\/foreign\/AbstractLayout; flags 1041\n+method name withName descriptor (Ljava\/lang\/String;)Ljdk\/incubator\/foreign\/AbstractLayout; flags 1041\n+\n+class name jdk\/incubator\/foreign\/ValueLayout$OfChar\n+header extends jdk\/incubator\/foreign\/ValueLayout nestHost jdk\/incubator\/foreign\/ValueLayout flags 31\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfChar outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfChar flags 19\n+method name withName descriptor (Ljava\/lang\/String;)Ljdk\/incubator\/foreign\/ValueLayout$OfChar; flags 1\n+method name withBitAlignment descriptor (J)Ljdk\/incubator\/foreign\/ValueLayout$OfChar; flags 1\n+method name withOrder descriptor (Ljava\/nio\/ByteOrder;)Ljdk\/incubator\/foreign\/ValueLayout$OfChar; flags 1\n+method name withBitAlignment descriptor (J)Ljdk\/incubator\/foreign\/ValueLayout; flags 1041\n+method name withName descriptor (Ljava\/lang\/String;)Ljdk\/incubator\/foreign\/ValueLayout; flags 1041\n+method name withOrder descriptor (Ljava\/nio\/ByteOrder;)Ljdk\/incubator\/foreign\/ValueLayout; flags 1041\n+method name withBitAlignment descriptor (J)Ljdk\/incubator\/foreign\/MemoryLayout; flags 1041\n+method name withName descriptor (Ljava\/lang\/String;)Ljdk\/incubator\/foreign\/MemoryLayout; flags 1041\n+method name isPadding descriptor ()Z flags 1041\n+method name bitSize descriptor ()J flags 1041\n+method name hasSize descriptor ()Z flags 1041\n+method name byteSize descriptor ()J flags 1041\n+method name withBitAlignment descriptor (J)Ljdk\/incubator\/foreign\/AbstractLayout; flags 1041\n+method name withName descriptor (Ljava\/lang\/String;)Ljdk\/incubator\/foreign\/AbstractLayout; flags 1041\n+\n+class name jdk\/incubator\/foreign\/ValueLayout$OfDouble\n+header extends jdk\/incubator\/foreign\/ValueLayout nestHost jdk\/incubator\/foreign\/ValueLayout flags 31\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfDouble outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfDouble flags 19\n+method name withName descriptor (Ljava\/lang\/String;)Ljdk\/incubator\/foreign\/ValueLayout$OfDouble; flags 1\n+method name withBitAlignment descriptor (J)Ljdk\/incubator\/foreign\/ValueLayout$OfDouble; flags 1\n+method name withOrder descriptor (Ljava\/nio\/ByteOrder;)Ljdk\/incubator\/foreign\/ValueLayout$OfDouble; flags 1\n+method name withBitAlignment descriptor (J)Ljdk\/incubator\/foreign\/ValueLayout; flags 1041\n+method name withName descriptor (Ljava\/lang\/String;)Ljdk\/incubator\/foreign\/ValueLayout; flags 1041\n+method name withOrder descriptor (Ljava\/nio\/ByteOrder;)Ljdk\/incubator\/foreign\/ValueLayout; flags 1041\n+method name withBitAlignment descriptor (J)Ljdk\/incubator\/foreign\/MemoryLayout; flags 1041\n+method name withName descriptor (Ljava\/lang\/String;)Ljdk\/incubator\/foreign\/MemoryLayout; flags 1041\n+method name isPadding descriptor ()Z flags 1041\n+method name bitSize descriptor ()J flags 1041\n+method name hasSize descriptor ()Z flags 1041\n+method name byteSize descriptor ()J flags 1041\n+method name withBitAlignment descriptor (J)Ljdk\/incubator\/foreign\/AbstractLayout; flags 1041\n+method name withName descriptor (Ljava\/lang\/String;)Ljdk\/incubator\/foreign\/AbstractLayout; flags 1041\n+\n+class name jdk\/incubator\/foreign\/ValueLayout$OfFloat\n+header extends jdk\/incubator\/foreign\/ValueLayout nestHost jdk\/incubator\/foreign\/ValueLayout flags 31\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfFloat outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfFloat flags 19\n+method name withName descriptor (Ljava\/lang\/String;)Ljdk\/incubator\/foreign\/ValueLayout$OfFloat; flags 1\n+method name withBitAlignment descriptor (J)Ljdk\/incubator\/foreign\/ValueLayout$OfFloat; flags 1\n+method name withOrder descriptor (Ljava\/nio\/ByteOrder;)Ljdk\/incubator\/foreign\/ValueLayout$OfFloat; flags 1\n+method name withBitAlignment descriptor (J)Ljdk\/incubator\/foreign\/ValueLayout; flags 1041\n+method name withName descriptor (Ljava\/lang\/String;)Ljdk\/incubator\/foreign\/ValueLayout; flags 1041\n+method name withOrder descriptor (Ljava\/nio\/ByteOrder;)Ljdk\/incubator\/foreign\/ValueLayout; flags 1041\n+method name withBitAlignment descriptor (J)Ljdk\/incubator\/foreign\/MemoryLayout; flags 1041\n+method name withName descriptor (Ljava\/lang\/String;)Ljdk\/incubator\/foreign\/MemoryLayout; flags 1041\n+method name isPadding descriptor ()Z flags 1041\n+method name bitSize descriptor ()J flags 1041\n+method name hasSize descriptor ()Z flags 1041\n+method name byteSize descriptor ()J flags 1041\n+method name withBitAlignment descriptor (J)Ljdk\/incubator\/foreign\/AbstractLayout; flags 1041\n+method name withName descriptor (Ljava\/lang\/String;)Ljdk\/incubator\/foreign\/AbstractLayout; flags 1041\n+\n+class name jdk\/incubator\/foreign\/ValueLayout$OfInt\n+header extends jdk\/incubator\/foreign\/ValueLayout nestHost jdk\/incubator\/foreign\/ValueLayout flags 31\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfInt outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfInt flags 19\n+method name withName descriptor (Ljava\/lang\/String;)Ljdk\/incubator\/foreign\/ValueLayout$OfInt; flags 1\n+method name withBitAlignment descriptor (J)Ljdk\/incubator\/foreign\/ValueLayout$OfInt; flags 1\n+method name withOrder descriptor (Ljava\/nio\/ByteOrder;)Ljdk\/incubator\/foreign\/ValueLayout$OfInt; flags 1\n+method name withBitAlignment descriptor (J)Ljdk\/incubator\/foreign\/ValueLayout; flags 1041\n+method name withName descriptor (Ljava\/lang\/String;)Ljdk\/incubator\/foreign\/ValueLayout; flags 1041\n+method name withOrder descriptor (Ljava\/nio\/ByteOrder;)Ljdk\/incubator\/foreign\/ValueLayout; flags 1041\n+method name withBitAlignment descriptor (J)Ljdk\/incubator\/foreign\/MemoryLayout; flags 1041\n+method name withName descriptor (Ljava\/lang\/String;)Ljdk\/incubator\/foreign\/MemoryLayout; flags 1041\n+method name isPadding descriptor ()Z flags 1041\n+method name bitSize descriptor ()J flags 1041\n+method name hasSize descriptor ()Z flags 1041\n+method name byteSize descriptor ()J flags 1041\n+method name withBitAlignment descriptor (J)Ljdk\/incubator\/foreign\/AbstractLayout; flags 1041\n+method name withName descriptor (Ljava\/lang\/String;)Ljdk\/incubator\/foreign\/AbstractLayout; flags 1041\n+\n+class name jdk\/incubator\/foreign\/ValueLayout$OfLong\n+header extends jdk\/incubator\/foreign\/ValueLayout nestHost jdk\/incubator\/foreign\/ValueLayout flags 31\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfLong outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfLong flags 19\n+method name withName descriptor (Ljava\/lang\/String;)Ljdk\/incubator\/foreign\/ValueLayout$OfLong; flags 1\n+method name withBitAlignment descriptor (J)Ljdk\/incubator\/foreign\/ValueLayout$OfLong; flags 1\n+method name withOrder descriptor (Ljava\/nio\/ByteOrder;)Ljdk\/incubator\/foreign\/ValueLayout$OfLong; flags 1\n+method name withBitAlignment descriptor (J)Ljdk\/incubator\/foreign\/ValueLayout; flags 1041\n+method name withName descriptor (Ljava\/lang\/String;)Ljdk\/incubator\/foreign\/ValueLayout; flags 1041\n+method name withOrder descriptor (Ljava\/nio\/ByteOrder;)Ljdk\/incubator\/foreign\/ValueLayout; flags 1041\n+method name withBitAlignment descriptor (J)Ljdk\/incubator\/foreign\/MemoryLayout; flags 1041\n+method name withName descriptor (Ljava\/lang\/String;)Ljdk\/incubator\/foreign\/MemoryLayout; flags 1041\n+method name isPadding descriptor ()Z flags 1041\n+method name bitSize descriptor ()J flags 1041\n+method name hasSize descriptor ()Z flags 1041\n+method name byteSize descriptor ()J flags 1041\n+method name withBitAlignment descriptor (J)Ljdk\/incubator\/foreign\/AbstractLayout; flags 1041\n+method name withName descriptor (Ljava\/lang\/String;)Ljdk\/incubator\/foreign\/AbstractLayout; flags 1041\n+\n+class name jdk\/incubator\/foreign\/ValueLayout$OfShort\n+header extends jdk\/incubator\/foreign\/ValueLayout nestHost jdk\/incubator\/foreign\/ValueLayout flags 31\n+innerclass innerClass jdk\/incubator\/foreign\/ValueLayout$OfShort outerClass jdk\/incubator\/foreign\/ValueLayout innerClassName OfShort flags 19\n+method name withName descriptor (Ljava\/lang\/String;)Ljdk\/incubator\/foreign\/ValueLayout$OfShort; flags 1\n+method name withBitAlignment descriptor (J)Ljdk\/incubator\/foreign\/ValueLayout$OfShort; flags 1\n+method name withOrder descriptor (Ljava\/nio\/ByteOrder;)Ljdk\/incubator\/foreign\/ValueLayout$OfShort; flags 1\n+method name withBitAlignment descriptor (J)Ljdk\/incubator\/foreign\/ValueLayout; flags 1041\n+method name withName descriptor (Ljava\/lang\/String;)Ljdk\/incubator\/foreign\/ValueLayout; flags 1041\n+method name withOrder descriptor (Ljava\/nio\/ByteOrder;)Ljdk\/incubator\/foreign\/ValueLayout; flags 1041\n+method name withBitAlignment descriptor (J)Ljdk\/incubator\/foreign\/MemoryLayout; flags 1041\n+method name withName descriptor (Ljava\/lang\/String;)Ljdk\/incubator\/foreign\/MemoryLayout; flags 1041\n+method name isPadding descriptor ()Z flags 1041\n+method name bitSize descriptor ()J flags 1041\n+method name hasSize descriptor ()Z flags 1041\n+method name byteSize descriptor ()J flags 1041\n+method name withBitAlignment descriptor (J)Ljdk\/incubator\/foreign\/AbstractLayout; flags 1041\n+method name withName descriptor (Ljava\/lang\/String;)Ljdk\/incubator\/foreign\/AbstractLayout; flags 1041\n+\n","filename":"make\/data\/symbols\/jdk.incubator.foreign-I.sym.txt","additions":582,"deletions":0,"binary":false,"changes":582,"status":"added"},{"patch":"@@ -0,0 +1,209 @@\n+#\n+# Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name jdk\/incubator\/vector\/ByteVector\n+header extends jdk\/incubator\/vector\/AbstractVector flags 421 signature Ljdk\/incubator\/vector\/AbstractVector<Ljava\/lang\/Byte;>;\n+innerclass innerClass jdk\/incubator\/vector\/VectorOperators$Operator outerClass jdk\/incubator\/vector\/VectorOperators innerClassName Operator flags 609\n+innerclass innerClass jdk\/internal\/vm\/vector\/VectorSupport$VectorSpecies outerClass jdk\/internal\/vm\/vector\/VectorSupport innerClassName VectorSpecies flags 9\n+innerclass innerClass jdk\/internal\/vm\/vector\/VectorSupport$VectorPayload outerClass jdk\/internal\/vm\/vector\/VectorSupport innerClassName VectorPayload flags 9\n+innerclass innerClass jdk\/incubator\/vector\/VectorOperators$Unary outerClass jdk\/incubator\/vector\/VectorOperators innerClassName Unary flags 609\n+innerclass innerClass jdk\/incubator\/vector\/VectorOperators$Comparison outerClass jdk\/incubator\/vector\/VectorOperators innerClassName Comparison flags 609\n+innerclass innerClass jdk\/incubator\/vector\/VectorOperators$Associative outerClass jdk\/incubator\/vector\/VectorOperators innerClassName Associative flags 609\n+innerclass innerClass jdk\/incubator\/vector\/VectorOperators$Binary outerClass jdk\/incubator\/vector\/VectorOperators innerClassName Binary flags 609\n+innerclass innerClass jdk\/internal\/vm\/vector\/VectorSupport$Vector outerClass jdk\/internal\/vm\/vector\/VectorSupport innerClassName Vector flags 9\n+innerclass innerClass jdk\/internal\/vm\/vector\/VectorSupport$VectorMask outerClass jdk\/internal\/vm\/vector\/VectorSupport innerClassName VectorMask flags 9\n+innerclass innerClass jdk\/incubator\/vector\/VectorOperators$Ternary outerClass jdk\/incubator\/vector\/VectorOperators innerClassName Ternary flags 609\n+innerclass innerClass jdk\/incubator\/vector\/VectorOperators$Test outerClass jdk\/incubator\/vector\/VectorOperators innerClassName Test flags 609\n+innerclass innerClass jdk\/internal\/vm\/vector\/VectorSupport$VectorShuffle outerClass jdk\/internal\/vm\/vector\/VectorSupport innerClassName VectorShuffle flags 9\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+-method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Unary;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/ByteVector;\n+-method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Binary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/ByteVector;\n+-method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Ternary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/ByteVector;\n+-method name compare descriptor (Ljdk\/incubator\/vector\/VectorOperators$Comparison;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/VectorMask;\n+-method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Ternary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/Vector;\n+-method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Binary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/Vector;\n+-method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Unary;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/Vector;\n+method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Unary;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/ByteVector; flags 401 signature (Ljdk\/incubator\/vector\/VectorOperators$Unary;Ljdk\/incubator\/vector\/VectorMask<Ljava\/lang\/Byte;>;)Ljdk\/incubator\/vector\/ByteVector;\n+method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Binary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/ByteVector; flags 401 signature (Ljdk\/incubator\/vector\/VectorOperators$Binary;Ljdk\/incubator\/vector\/Vector<Ljava\/lang\/Byte;>;Ljdk\/incubator\/vector\/VectorMask<Ljava\/lang\/Byte;>;)Ljdk\/incubator\/vector\/ByteVector;\n+method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Ternary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/ByteVector; flags 401 signature (Ljdk\/incubator\/vector\/VectorOperators$Ternary;Ljdk\/incubator\/vector\/Vector<Ljava\/lang\/Byte;>;Ljdk\/incubator\/vector\/Vector<Ljava\/lang\/Byte;>;Ljdk\/incubator\/vector\/VectorMask<Ljava\/lang\/Byte;>;)Ljdk\/incubator\/vector\/ByteVector;\n+method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Ternary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/Vector; flags 1041\n+method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Binary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/Vector; flags 1041\n+method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Unary;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/Vector; flags 1041\n+\n+class name jdk\/incubator\/vector\/DoubleVector\n+header extends jdk\/incubator\/vector\/AbstractVector flags 421 signature Ljdk\/incubator\/vector\/AbstractVector<Ljava\/lang\/Double;>;\n+innerclass innerClass jdk\/incubator\/vector\/VectorOperators$Operator outerClass jdk\/incubator\/vector\/VectorOperators innerClassName Operator flags 609\n+innerclass innerClass jdk\/internal\/vm\/vector\/VectorSupport$VectorSpecies outerClass jdk\/internal\/vm\/vector\/VectorSupport innerClassName VectorSpecies flags 9\n+innerclass innerClass jdk\/internal\/vm\/vector\/VectorSupport$VectorPayload outerClass jdk\/internal\/vm\/vector\/VectorSupport innerClassName VectorPayload flags 9\n+innerclass innerClass jdk\/incubator\/vector\/VectorOperators$Unary outerClass jdk\/incubator\/vector\/VectorOperators innerClassName Unary flags 609\n+innerclass innerClass jdk\/incubator\/vector\/VectorOperators$Comparison outerClass jdk\/incubator\/vector\/VectorOperators innerClassName Comparison flags 609\n+innerclass innerClass jdk\/internal\/vm\/vector\/VectorSupport$Vector outerClass jdk\/internal\/vm\/vector\/VectorSupport innerClassName Vector flags 9\n+innerclass innerClass jdk\/internal\/vm\/vector\/VectorSupport$VectorMask outerClass jdk\/internal\/vm\/vector\/VectorSupport innerClassName VectorMask flags 9\n+innerclass innerClass jdk\/incubator\/vector\/VectorOperators$Associative outerClass jdk\/incubator\/vector\/VectorOperators innerClassName Associative flags 609\n+innerclass innerClass jdk\/incubator\/vector\/VectorOperators$Binary outerClass jdk\/incubator\/vector\/VectorOperators innerClassName Binary flags 609\n+innerclass innerClass jdk\/incubator\/vector\/VectorOperators$Ternary outerClass jdk\/incubator\/vector\/VectorOperators innerClassName Ternary flags 609\n+innerclass innerClass jdk\/incubator\/vector\/VectorOperators$Test outerClass jdk\/incubator\/vector\/VectorOperators innerClassName Test flags 609\n+innerclass innerClass jdk\/internal\/vm\/vector\/VectorSupport$VectorShuffle outerClass jdk\/internal\/vm\/vector\/VectorSupport innerClassName VectorShuffle flags 9\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+-method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Unary;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/DoubleVector;\n+-method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Binary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/DoubleVector;\n+-method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Ternary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/DoubleVector;\n+-method name compare descriptor (Ljdk\/incubator\/vector\/VectorOperators$Comparison;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/VectorMask;\n+-method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Ternary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/Vector;\n+-method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Binary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/Vector;\n+-method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Unary;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/Vector;\n+method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Unary;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/DoubleVector; flags 401 signature (Ljdk\/incubator\/vector\/VectorOperators$Unary;Ljdk\/incubator\/vector\/VectorMask<Ljava\/lang\/Double;>;)Ljdk\/incubator\/vector\/DoubleVector;\n+method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Binary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/DoubleVector; flags 401 signature (Ljdk\/incubator\/vector\/VectorOperators$Binary;Ljdk\/incubator\/vector\/Vector<Ljava\/lang\/Double;>;Ljdk\/incubator\/vector\/VectorMask<Ljava\/lang\/Double;>;)Ljdk\/incubator\/vector\/DoubleVector;\n+method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Ternary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/DoubleVector; flags 401 signature (Ljdk\/incubator\/vector\/VectorOperators$Ternary;Ljdk\/incubator\/vector\/Vector<Ljava\/lang\/Double;>;Ljdk\/incubator\/vector\/Vector<Ljava\/lang\/Double;>;Ljdk\/incubator\/vector\/VectorMask<Ljava\/lang\/Double;>;)Ljdk\/incubator\/vector\/DoubleVector;\n+method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Ternary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/Vector; flags 1041\n+method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Binary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/Vector; flags 1041\n+method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Unary;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/Vector; flags 1041\n+\n+class name jdk\/incubator\/vector\/FloatVector\n+header extends jdk\/incubator\/vector\/AbstractVector flags 421 signature Ljdk\/incubator\/vector\/AbstractVector<Ljava\/lang\/Float;>;\n+innerclass innerClass jdk\/incubator\/vector\/VectorOperators$Operator outerClass jdk\/incubator\/vector\/VectorOperators innerClassName Operator flags 609\n+innerclass innerClass jdk\/internal\/vm\/vector\/VectorSupport$VectorSpecies outerClass jdk\/internal\/vm\/vector\/VectorSupport innerClassName VectorSpecies flags 9\n+innerclass innerClass jdk\/internal\/vm\/vector\/VectorSupport$VectorPayload outerClass jdk\/internal\/vm\/vector\/VectorSupport innerClassName VectorPayload flags 9\n+innerclass innerClass jdk\/incubator\/vector\/VectorOperators$Unary outerClass jdk\/incubator\/vector\/VectorOperators innerClassName Unary flags 609\n+innerclass innerClass jdk\/incubator\/vector\/VectorOperators$Comparison outerClass jdk\/incubator\/vector\/VectorOperators innerClassName Comparison flags 609\n+innerclass innerClass jdk\/internal\/vm\/vector\/VectorSupport$Vector outerClass jdk\/internal\/vm\/vector\/VectorSupport innerClassName Vector flags 9\n+innerclass innerClass jdk\/internal\/vm\/vector\/VectorSupport$VectorMask outerClass jdk\/internal\/vm\/vector\/VectorSupport innerClassName VectorMask flags 9\n+innerclass innerClass jdk\/incubator\/vector\/VectorOperators$Associative outerClass jdk\/incubator\/vector\/VectorOperators innerClassName Associative flags 609\n+innerclass innerClass jdk\/incubator\/vector\/VectorOperators$Binary outerClass jdk\/incubator\/vector\/VectorOperators innerClassName Binary flags 609\n+innerclass innerClass jdk\/incubator\/vector\/VectorOperators$Ternary outerClass jdk\/incubator\/vector\/VectorOperators innerClassName Ternary flags 609\n+innerclass innerClass jdk\/incubator\/vector\/VectorOperators$Test outerClass jdk\/incubator\/vector\/VectorOperators innerClassName Test flags 609\n+innerclass innerClass jdk\/internal\/vm\/vector\/VectorSupport$VectorShuffle outerClass jdk\/internal\/vm\/vector\/VectorSupport innerClassName VectorShuffle flags 9\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+-method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Unary;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/FloatVector;\n+-method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Binary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/FloatVector;\n+-method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Ternary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/FloatVector;\n+-method name compare descriptor (Ljdk\/incubator\/vector\/VectorOperators$Comparison;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/VectorMask;\n+-method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Ternary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/Vector;\n+-method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Binary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/Vector;\n+-method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Unary;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/Vector;\n+method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Unary;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/FloatVector; flags 401 signature (Ljdk\/incubator\/vector\/VectorOperators$Unary;Ljdk\/incubator\/vector\/VectorMask<Ljava\/lang\/Float;>;)Ljdk\/incubator\/vector\/FloatVector;\n+method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Binary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/FloatVector; flags 401 signature (Ljdk\/incubator\/vector\/VectorOperators$Binary;Ljdk\/incubator\/vector\/Vector<Ljava\/lang\/Float;>;Ljdk\/incubator\/vector\/VectorMask<Ljava\/lang\/Float;>;)Ljdk\/incubator\/vector\/FloatVector;\n+method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Ternary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/FloatVector; flags 401 signature (Ljdk\/incubator\/vector\/VectorOperators$Ternary;Ljdk\/incubator\/vector\/Vector<Ljava\/lang\/Float;>;Ljdk\/incubator\/vector\/Vector<Ljava\/lang\/Float;>;Ljdk\/incubator\/vector\/VectorMask<Ljava\/lang\/Float;>;)Ljdk\/incubator\/vector\/FloatVector;\n+method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Ternary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/Vector; flags 1041\n+method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Binary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/Vector; flags 1041\n+method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Unary;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/Vector; flags 1041\n+\n+class name jdk\/incubator\/vector\/IntVector\n+header extends jdk\/incubator\/vector\/AbstractVector flags 421 signature Ljdk\/incubator\/vector\/AbstractVector<Ljava\/lang\/Integer;>;\n+innerclass innerClass jdk\/incubator\/vector\/VectorOperators$Operator outerClass jdk\/incubator\/vector\/VectorOperators innerClassName Operator flags 609\n+innerclass innerClass jdk\/internal\/vm\/vector\/VectorSupport$VectorSpecies outerClass jdk\/internal\/vm\/vector\/VectorSupport innerClassName VectorSpecies flags 9\n+innerclass innerClass jdk\/internal\/vm\/vector\/VectorSupport$VectorPayload outerClass jdk\/internal\/vm\/vector\/VectorSupport innerClassName VectorPayload flags 9\n+innerclass innerClass jdk\/incubator\/vector\/VectorOperators$Unary outerClass jdk\/incubator\/vector\/VectorOperators innerClassName Unary flags 609\n+innerclass innerClass jdk\/incubator\/vector\/VectorOperators$Comparison outerClass jdk\/incubator\/vector\/VectorOperators innerClassName Comparison flags 609\n+innerclass innerClass jdk\/incubator\/vector\/VectorOperators$Associative outerClass jdk\/incubator\/vector\/VectorOperators innerClassName Associative flags 609\n+innerclass innerClass jdk\/incubator\/vector\/VectorOperators$Binary outerClass jdk\/incubator\/vector\/VectorOperators innerClassName Binary flags 609\n+innerclass innerClass jdk\/internal\/vm\/vector\/VectorSupport$Vector outerClass jdk\/internal\/vm\/vector\/VectorSupport innerClassName Vector flags 9\n+innerclass innerClass jdk\/internal\/vm\/vector\/VectorSupport$VectorMask outerClass jdk\/internal\/vm\/vector\/VectorSupport innerClassName VectorMask flags 9\n+innerclass innerClass jdk\/incubator\/vector\/VectorOperators$Ternary outerClass jdk\/incubator\/vector\/VectorOperators innerClassName Ternary flags 609\n+innerclass innerClass jdk\/incubator\/vector\/VectorOperators$Test outerClass jdk\/incubator\/vector\/VectorOperators innerClassName Test flags 609\n+innerclass innerClass jdk\/internal\/vm\/vector\/VectorSupport$VectorShuffle outerClass jdk\/internal\/vm\/vector\/VectorSupport innerClassName VectorShuffle flags 9\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+-method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Unary;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/IntVector;\n+-method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Binary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/IntVector;\n+-method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Ternary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/IntVector;\n+-method name compare descriptor (Ljdk\/incubator\/vector\/VectorOperators$Comparison;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/VectorMask;\n+-method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Ternary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/Vector;\n+-method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Binary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/Vector;\n+-method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Unary;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/Vector;\n+method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Unary;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/IntVector; flags 401 signature (Ljdk\/incubator\/vector\/VectorOperators$Unary;Ljdk\/incubator\/vector\/VectorMask<Ljava\/lang\/Integer;>;)Ljdk\/incubator\/vector\/IntVector;\n+method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Binary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/IntVector; flags 401 signature (Ljdk\/incubator\/vector\/VectorOperators$Binary;Ljdk\/incubator\/vector\/Vector<Ljava\/lang\/Integer;>;Ljdk\/incubator\/vector\/VectorMask<Ljava\/lang\/Integer;>;)Ljdk\/incubator\/vector\/IntVector;\n+method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Ternary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/IntVector; flags 401 signature (Ljdk\/incubator\/vector\/VectorOperators$Ternary;Ljdk\/incubator\/vector\/Vector<Ljava\/lang\/Integer;>;Ljdk\/incubator\/vector\/Vector<Ljava\/lang\/Integer;>;Ljdk\/incubator\/vector\/VectorMask<Ljava\/lang\/Integer;>;)Ljdk\/incubator\/vector\/IntVector;\n+method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Ternary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/Vector; flags 1041\n+method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Binary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/Vector; flags 1041\n+method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Unary;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/Vector; flags 1041\n+\n+class name jdk\/incubator\/vector\/LongVector\n+header extends jdk\/incubator\/vector\/AbstractVector flags 421 signature Ljdk\/incubator\/vector\/AbstractVector<Ljava\/lang\/Long;>;\n+innerclass innerClass jdk\/incubator\/vector\/VectorOperators$Operator outerClass jdk\/incubator\/vector\/VectorOperators innerClassName Operator flags 609\n+innerclass innerClass jdk\/internal\/vm\/vector\/VectorSupport$VectorSpecies outerClass jdk\/internal\/vm\/vector\/VectorSupport innerClassName VectorSpecies flags 9\n+innerclass innerClass jdk\/internal\/vm\/vector\/VectorSupport$VectorPayload outerClass jdk\/internal\/vm\/vector\/VectorSupport innerClassName VectorPayload flags 9\n+innerclass innerClass jdk\/incubator\/vector\/VectorOperators$Unary outerClass jdk\/incubator\/vector\/VectorOperators innerClassName Unary flags 609\n+innerclass innerClass jdk\/incubator\/vector\/VectorOperators$Comparison outerClass jdk\/incubator\/vector\/VectorOperators innerClassName Comparison flags 609\n+innerclass innerClass jdk\/incubator\/vector\/VectorOperators$Associative outerClass jdk\/incubator\/vector\/VectorOperators innerClassName Associative flags 609\n+innerclass innerClass jdk\/incubator\/vector\/VectorOperators$Binary outerClass jdk\/incubator\/vector\/VectorOperators innerClassName Binary flags 609\n+innerclass innerClass jdk\/internal\/vm\/vector\/VectorSupport$Vector outerClass jdk\/internal\/vm\/vector\/VectorSupport innerClassName Vector flags 9\n+innerclass innerClass jdk\/internal\/vm\/vector\/VectorSupport$VectorMask outerClass jdk\/internal\/vm\/vector\/VectorSupport innerClassName VectorMask flags 9\n+innerclass innerClass jdk\/incubator\/vector\/VectorOperators$Ternary outerClass jdk\/incubator\/vector\/VectorOperators innerClassName Ternary flags 609\n+innerclass innerClass jdk\/incubator\/vector\/VectorOperators$Test outerClass jdk\/incubator\/vector\/VectorOperators innerClassName Test flags 609\n+innerclass innerClass jdk\/internal\/vm\/vector\/VectorSupport$VectorShuffle outerClass jdk\/internal\/vm\/vector\/VectorSupport innerClassName VectorShuffle flags 9\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+-method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Unary;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/LongVector;\n+-method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Binary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/LongVector;\n+-method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Ternary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/LongVector;\n+-method name compare descriptor (Ljdk\/incubator\/vector\/VectorOperators$Comparison;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/VectorMask;\n+-method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Ternary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/Vector;\n+-method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Binary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/Vector;\n+-method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Unary;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/Vector;\n+method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Unary;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/LongVector; flags 401 signature (Ljdk\/incubator\/vector\/VectorOperators$Unary;Ljdk\/incubator\/vector\/VectorMask<Ljava\/lang\/Long;>;)Ljdk\/incubator\/vector\/LongVector;\n+method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Binary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/LongVector; flags 401 signature (Ljdk\/incubator\/vector\/VectorOperators$Binary;Ljdk\/incubator\/vector\/Vector<Ljava\/lang\/Long;>;Ljdk\/incubator\/vector\/VectorMask<Ljava\/lang\/Long;>;)Ljdk\/incubator\/vector\/LongVector;\n+method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Ternary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/LongVector; flags 401 signature (Ljdk\/incubator\/vector\/VectorOperators$Ternary;Ljdk\/incubator\/vector\/Vector<Ljava\/lang\/Long;>;Ljdk\/incubator\/vector\/Vector<Ljava\/lang\/Long;>;Ljdk\/incubator\/vector\/VectorMask<Ljava\/lang\/Long;>;)Ljdk\/incubator\/vector\/LongVector;\n+method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Ternary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/Vector; flags 1041\n+method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Binary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/Vector; flags 1041\n+method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Unary;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/Vector; flags 1041\n+\n+class name jdk\/incubator\/vector\/ShortVector\n+header extends jdk\/incubator\/vector\/AbstractVector flags 421 signature Ljdk\/incubator\/vector\/AbstractVector<Ljava\/lang\/Short;>;\n+innerclass innerClass jdk\/incubator\/vector\/VectorOperators$Operator outerClass jdk\/incubator\/vector\/VectorOperators innerClassName Operator flags 609\n+innerclass innerClass jdk\/internal\/vm\/vector\/VectorSupport$VectorSpecies outerClass jdk\/internal\/vm\/vector\/VectorSupport innerClassName VectorSpecies flags 9\n+innerclass innerClass jdk\/internal\/vm\/vector\/VectorSupport$VectorPayload outerClass jdk\/internal\/vm\/vector\/VectorSupport innerClassName VectorPayload flags 9\n+innerclass innerClass jdk\/incubator\/vector\/VectorOperators$Unary outerClass jdk\/incubator\/vector\/VectorOperators innerClassName Unary flags 609\n+innerclass innerClass jdk\/incubator\/vector\/VectorOperators$Comparison outerClass jdk\/incubator\/vector\/VectorOperators innerClassName Comparison flags 609\n+innerclass innerClass jdk\/incubator\/vector\/VectorOperators$Associative outerClass jdk\/incubator\/vector\/VectorOperators innerClassName Associative flags 609\n+innerclass innerClass jdk\/incubator\/vector\/VectorOperators$Binary outerClass jdk\/incubator\/vector\/VectorOperators innerClassName Binary flags 609\n+innerclass innerClass jdk\/internal\/vm\/vector\/VectorSupport$Vector outerClass jdk\/internal\/vm\/vector\/VectorSupport innerClassName Vector flags 9\n+innerclass innerClass jdk\/internal\/vm\/vector\/VectorSupport$VectorMask outerClass jdk\/internal\/vm\/vector\/VectorSupport innerClassName VectorMask flags 9\n+innerclass innerClass jdk\/incubator\/vector\/VectorOperators$Ternary outerClass jdk\/incubator\/vector\/VectorOperators innerClassName Ternary flags 609\n+innerclass innerClass jdk\/incubator\/vector\/VectorOperators$Test outerClass jdk\/incubator\/vector\/VectorOperators innerClassName Test flags 609\n+innerclass innerClass jdk\/internal\/vm\/vector\/VectorSupport$VectorShuffle outerClass jdk\/internal\/vm\/vector\/VectorSupport innerClassName VectorShuffle flags 9\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+-method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Unary;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/ShortVector;\n+-method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Binary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/ShortVector;\n+-method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Ternary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/ShortVector;\n+-method name compare descriptor (Ljdk\/incubator\/vector\/VectorOperators$Comparison;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/VectorMask;\n+-method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Ternary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/Vector;\n+-method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Binary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/Vector;\n+-method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Unary;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/Vector;\n+method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Unary;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/ShortVector; flags 401 signature (Ljdk\/incubator\/vector\/VectorOperators$Unary;Ljdk\/incubator\/vector\/VectorMask<Ljava\/lang\/Short;>;)Ljdk\/incubator\/vector\/ShortVector;\n+method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Binary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/ShortVector; flags 401 signature (Ljdk\/incubator\/vector\/VectorOperators$Binary;Ljdk\/incubator\/vector\/Vector<Ljava\/lang\/Short;>;Ljdk\/incubator\/vector\/VectorMask<Ljava\/lang\/Short;>;)Ljdk\/incubator\/vector\/ShortVector;\n+method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Ternary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/ShortVector; flags 401 signature (Ljdk\/incubator\/vector\/VectorOperators$Ternary;Ljdk\/incubator\/vector\/Vector<Ljava\/lang\/Short;>;Ljdk\/incubator\/vector\/Vector<Ljava\/lang\/Short;>;Ljdk\/incubator\/vector\/VectorMask<Ljava\/lang\/Short;>;)Ljdk\/incubator\/vector\/ShortVector;\n+method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Ternary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/Vector; flags 1041\n+method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Binary;Ljdk\/incubator\/vector\/Vector;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/Vector; flags 1041\n+method name lanewise descriptor (Ljdk\/incubator\/vector\/VectorOperators$Unary;Ljdk\/incubator\/vector\/VectorMask;)Ljdk\/incubator\/vector\/Vector; flags 1041\n+\n+class name jdk\/incubator\/vector\/VectorMask\n+header extends jdk\/internal\/vm\/vector\/VectorSupport$VectorMask flags 421 signature <E:Ljava\/lang\/Object;>Ljdk\/internal\/vm\/vector\/VectorSupport$VectorMask<TE;>;\n+innerclass innerClass jdk\/internal\/vm\/vector\/VectorSupport$VectorMask outerClass jdk\/internal\/vm\/vector\/VectorSupport innerClassName VectorMask flags 9\n+innerclass innerClass jdk\/internal\/vm\/vector\/VectorSupport$VectorSpecies outerClass jdk\/internal\/vm\/vector\/VectorSupport innerClassName VectorSpecies flags 9\n+innerclass innerClass jdk\/internal\/vm\/vector\/VectorSupport$VectorPayload outerClass jdk\/internal\/vm\/vector\/VectorSupport innerClassName VectorPayload flags 9\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n","filename":"make\/data\/symbols\/jdk.incubator.vector-I.sym.txt","additions":209,"deletions":0,"binary":false,"changes":209,"status":"added"},{"patch":"","filename":"make\/data\/symbols\/jdk.jartool-I.sym.txt","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"make\/data\/symbols\/jdk.jartool-H.sym.txt","status":"copied"},{"patch":"@@ -0,0 +1,37 @@\n+#\n+# Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name jdk\/javadoc\/doclet\/Reporter\n+header extends java\/lang\/Object flags 601\n+innerclass innerClass javax\/tools\/Diagnostic$Kind outerClass javax\/tools\/Diagnostic innerClassName Kind flags 4019\n+method name print descriptor (Ljavax\/tools\/Diagnostic$Kind;Lcom\/sun\/source\/util\/DocTreePath;IIILjava\/lang\/String;)V flags 1\n+\n+class name jdk\/javadoc\/doclet\/StandardDoclet\n+header extends java\/lang\/Object implements jdk\/javadoc\/doclet\/Doclet flags 21\n+innerclass innerClass jdk\/javadoc\/doclet\/Doclet$Option outerClass jdk\/javadoc\/doclet\/Doclet innerClassName Option flags 609\n+\n","filename":"make\/data\/symbols\/jdk.javadoc-I.sym.txt","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"","filename":"make\/data\/symbols\/jdk.jconsole-I.sym.txt","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"make\/data\/symbols\/jdk.jconsole-H.sym.txt","status":"copied"},{"patch":"","filename":"make\/data\/symbols\/jdk.jdi-I.sym.txt","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"make\/data\/symbols\/jdk.jdi-H.sym.txt","status":"copied"},{"patch":"@@ -0,0 +1,31 @@\n+#\n+# Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+module name jdk.jlink\n+header requires name\\u0020;java.base\\u0020;flags\\u0020;8000,name\\u0020;jdk.internal.opt\\u0020;flags\\u0020;0,name\\u0020;jdk.jdeps\\u0020;flags\\u0020;0 uses jdk\/tools\/jlink\/plugin\/Plugin provides interface\\u0020;java\/util\/spi\/ToolProvider\\u0020;impls\\u0020;jdk\/tools\/jmod\/Main$JmodToolProvider\\u005C;u002C;jdk\/tools\/jlink\/internal\/Main$JlinkToolProvider,interface\\u0020;jdk\/tools\/jlink\/plugin\/Plugin\\u0020;impls\\u0020;jdk\/tools\/jlink\/internal\/plugins\/DefaultStripDebugPlugin\\u005C;u002C;jdk\/tools\/jlink\/internal\/plugins\/StripJavaDebugAttributesPlugin\\u005C;u002C;jdk\/tools\/jlink\/internal\/plugins\/ExcludePlugin\\u005C;u002C;jdk\/tools\/jlink\/internal\/plugins\/ExcludeFilesPlugin\\u005C;u002C;jdk\/tools\/jlink\/internal\/plugins\/ExcludeJmodSectionPlugin\\u005C;u002C;jdk\/tools\/jlink\/internal\/plugins\/LegalNoticeFilePlugin\\u005C;u002C;jdk\/tools\/jlink\/internal\/plugins\/SystemModulesPlugin\\u005C;u002C;jdk\/tools\/jlink\/internal\/plugins\/StripNativeCommandsPlugin\\u005C;u002C;jdk\/tools\/jlink\/internal\/plugins\/OrderResourcesPlugin\\u005C;u002C;jdk\/tools\/jlink\/internal\/plugins\/DefaultCompressPlugin\\u005C;u002C;jdk\/tools\/jlink\/internal\/plugins\/ExcludeVMPlugin\\u005C;u002C;jdk\/tools\/jlink\/internal\/plugins\/IncludeLocalesPlugin\\u005C;u002C;jdk\/tools\/jlink\/internal\/plugins\/GenerateJLIClassesPlugin\\u005C;u002C;jdk\/tools\/jlink\/internal\/plugins\/ReleaseInfoPlugin\\u005C;u002C;jdk\/tools\/jlink\/internal\/plugins\/AddOptionsPlugin\\u005C;u002C;jdk\/tools\/jlink\/internal\/plugins\/VendorBugURLPlugin\\u005C;u002C;jdk\/tools\/jlink\/internal\/plugins\/VendorVMBugURLPlugin\\u005C;u002C;jdk\/tools\/jlink\/internal\/plugins\/VendorVersionPlugin\\u005C;u002C;jdk\/tools\/jlink\/internal\/plugins\/CDSPlugin\\u005C;u002C;jdk\/tools\/jlink\/internal\/plugins\/StripNativeDebugSymbolsPlugin target linux-amd64 flags 8000\n+\n","filename":"make\/data\/symbols\/jdk.jlink-I.sym.txt","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -0,0 +1,108 @@\n+#\n+# Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name jdk\/jshell\/DeclarationSnippet\n+header extends jdk\/jshell\/PersistentSnippet flags 421\n+innerclass innerClass jdk\/jshell\/Snippet$SubKind outerClass jdk\/jshell\/Snippet innerClassName SubKind flags 4019\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name jdk\/jshell\/Diag\n+header extends java\/lang\/Object flags 421\n+\n+class name jdk\/jshell\/EvalException\n+header extends jdk\/jshell\/JShellException flags 21\n+\n+class name jdk\/jshell\/ExpressionSnippet\n+header extends jdk\/jshell\/Snippet flags 21\n+innerclass innerClass jdk\/jshell\/Snippet$SubKind outerClass jdk\/jshell\/Snippet innerClassName SubKind flags 4019\n+\n+class name jdk\/jshell\/ImportSnippet\n+header extends jdk\/jshell\/PersistentSnippet flags 21\n+innerclass innerClass jdk\/jshell\/Snippet$SubKind outerClass jdk\/jshell\/Snippet innerClassName SubKind flags 4019\n+\n+class name jdk\/jshell\/JShellException\n+header extends java\/lang\/Exception flags 21\n+\n+class name jdk\/jshell\/MethodSnippet\n+header extends jdk\/jshell\/DeclarationSnippet flags 21\n+innerclass innerClass jdk\/jshell\/Snippet$SubKind outerClass jdk\/jshell\/Snippet innerClassName SubKind flags 4019\n+\n+class name jdk\/jshell\/PersistentSnippet\n+header extends jdk\/jshell\/Snippet flags 421\n+innerclass innerClass jdk\/jshell\/Snippet$SubKind outerClass jdk\/jshell\/Snippet innerClassName SubKind flags 4019\n+\n+class name jdk\/jshell\/SnippetEvent\n+header extends java\/lang\/Object flags 21\n+innerclass innerClass jdk\/jshell\/Snippet$Status outerClass jdk\/jshell\/Snippet innerClassName Status flags 4019\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name jdk\/jshell\/StatementSnippet\n+header extends jdk\/jshell\/Snippet flags 21\n+innerclass innerClass jdk\/jshell\/Snippet$SubKind outerClass jdk\/jshell\/Snippet innerClassName SubKind flags 4019\n+\n+class name jdk\/jshell\/TypeDeclSnippet\n+header extends jdk\/jshell\/DeclarationSnippet flags 21\n+innerclass innerClass jdk\/jshell\/Snippet$SubKind outerClass jdk\/jshell\/Snippet innerClassName SubKind flags 4019\n+\n+class name jdk\/jshell\/execution\/FailOverExecutionControlProvider\n+header extends java\/lang\/Object implements jdk\/jshell\/spi\/ExecutionControlProvider flags 21\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name jdk\/jshell\/execution\/JdiDefaultExecutionControl\n+header extends jdk\/jshell\/execution\/JdiExecutionControl flags 21\n+innerclass innerClass jdk\/jshell\/spi\/ExecutionControl$InternalException outerClass jdk\/jshell\/spi\/ExecutionControl innerClassName InternalException flags 9\n+innerclass innerClass jdk\/jshell\/spi\/ExecutionControl$EngineTerminationException outerClass jdk\/jshell\/spi\/ExecutionControl innerClassName EngineTerminationException flags 9\n+innerclass innerClass jdk\/jshell\/spi\/ExecutionControl$RunException outerClass jdk\/jshell\/spi\/ExecutionControl innerClassName RunException flags 409\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name jdk\/jshell\/execution\/JdiExecutionControlProvider\n+header extends java\/lang\/Object implements jdk\/jshell\/spi\/ExecutionControlProvider flags 21\n+\n+class name jdk\/jshell\/execution\/LoaderDelegate\n+header extends java\/lang\/Object flags 601\n+innerclass innerClass jdk\/jshell\/spi\/ExecutionControl$ClassBytecodes outerClass jdk\/jshell\/spi\/ExecutionControl innerClassName ClassBytecodes flags 19\n+innerclass innerClass jdk\/jshell\/spi\/ExecutionControl$ClassInstallException outerClass jdk\/jshell\/spi\/ExecutionControl innerClassName ClassInstallException flags 9\n+innerclass innerClass jdk\/jshell\/spi\/ExecutionControl$NotImplementedException outerClass jdk\/jshell\/spi\/ExecutionControl innerClassName NotImplementedException flags 9\n+innerclass innerClass jdk\/jshell\/spi\/ExecutionControl$EngineTerminationException outerClass jdk\/jshell\/spi\/ExecutionControl innerClassName EngineTerminationException flags 9\n+innerclass innerClass jdk\/jshell\/spi\/ExecutionControl$InternalException outerClass jdk\/jshell\/spi\/ExecutionControl innerClassName InternalException flags 9\n+\n+class name jdk\/jshell\/execution\/LocalExecutionControlProvider\n+header extends java\/lang\/Object implements jdk\/jshell\/spi\/ExecutionControlProvider flags 21\n+\n+class name jdk\/jshell\/spi\/ExecutionControlProvider\n+header extends java\/lang\/Object flags 601\n+\n+class name jdk\/jshell\/spi\/ExecutionEnv\n+header extends java\/lang\/Object flags 601\n+\n+class name jdk\/jshell\/spi\/SPIResolutionException\n+header extends java\/lang\/RuntimeException flags 21\n+\n+class name jdk\/jshell\/tool\/JavaShellToolBuilder\n+header extends java\/lang\/Object flags 601\n+\n","filename":"make\/data\/symbols\/jdk.jshell-I.sym.txt","additions":108,"deletions":0,"binary":false,"changes":108,"status":"added"},{"patch":"","filename":"make\/data\/symbols\/jdk.jsobject-I.sym.txt","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"make\/data\/symbols\/jdk.jsobject-H.sym.txt","status":"copied"},{"patch":"","filename":"make\/data\/symbols\/jdk.management-I.sym.txt","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"make\/data\/symbols\/jdk.management-H.sym.txt","status":"copied"},{"patch":"@@ -0,0 +1,31 @@\n+#\n+# Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+module name jdk.management.jfr\n+header exports jdk\/management\/jfr requires name\\u0020;java.base\\u0020;flags\\u0020;8000,name\\u0020;jdk.management\\u0020;flags\\u0020;0,name\\u0020;java.management\\u0020;flags\\u0020;20,name\\u0020;jdk.jfr\\u0020;flags\\u0020;20 provides interface\\u0020;sun\/management\/spi\/PlatformMBeanProvider\\u0020;impls\\u0020;jdk\/management\/jfr\/internal\/FlightRecorderMXBeanProvider target linux-amd64 flags 8000\n+\n","filename":"make\/data\/symbols\/jdk.management.jfr-I.sym.txt","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"","filename":"make\/data\/symbols\/jdk.net-I.sym.txt","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"make\/data\/symbols\/jdk.net-H.sym.txt","status":"copied"},{"patch":"","filename":"make\/data\/symbols\/jdk.sctp-I.sym.txt","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"make\/data\/symbols\/jdk.sctp-H.sym.txt","status":"copied"},{"patch":"","filename":"make\/data\/symbols\/jdk.security.auth-I.sym.txt","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"make\/data\/symbols\/jdk.security.auth-H.sym.txt","status":"copied"},{"patch":"@@ -0,0 +1,47 @@\n+#\n+# Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name com\/sun\/security\/jgss\/AuthorizationDataEntry\n+header extends java\/lang\/Object flags 31\n+innerclass innerClass java\/lang\/invoke\/MethodHandles$Lookup outerClass java\/lang\/invoke\/MethodHandles innerClassName Lookup flags 19\n+\n+class name com\/sun\/security\/jgss\/ExtendedGSSContext\n+header extends java\/lang\/Object implements org\/ietf\/jgss\/GSSContext flags 601\n+\n+class name com\/sun\/security\/jgss\/ExtendedGSSCredential\n+header extends java\/lang\/Object implements org\/ietf\/jgss\/GSSCredential flags 601\n+\n+class name com\/sun\/security\/jgss\/GSSUtil\n+header extends java\/lang\/Object flags 21\n+\n+class name com\/sun\/security\/jgss\/InquireSecContextPermission\n+header extends java\/security\/BasicPermission flags 31\n+\n+class name com\/sun\/security\/jgss\/InquireType\n+header extends java\/lang\/Enum flags 4031 signature Ljava\/lang\/Enum<Lcom\/sun\/security\/jgss\/InquireType;>;\n+\n","filename":"make\/data\/symbols\/jdk.security.jgss-I.sym.txt","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -0,0 +1,56 @@\n+#\n+# Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+# ##########################################################\n+# ### THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT. ###\n+# ##########################################################\n+#\n+class name com\/sun\/nio\/file\/ExtendedCopyOption\n+header extends java\/lang\/Enum implements java\/nio\/file\/CopyOption flags 4031 signature Ljava\/lang\/Enum<Lcom\/sun\/nio\/file\/ExtendedCopyOption;>;Ljava\/nio\/file\/CopyOption; classAnnotations @Lsun\/Proprietary+Annotation;\n+\n+class name com\/sun\/nio\/file\/ExtendedOpenOption\n+header extends java\/lang\/Enum implements java\/nio\/file\/OpenOption flags 4031 signature Ljava\/lang\/Enum<Lcom\/sun\/nio\/file\/ExtendedOpenOption;>;Ljava\/nio\/file\/OpenOption; classAnnotations @Lsun\/Proprietary+Annotation;\n+\n+class name com\/sun\/nio\/file\/ExtendedWatchEventModifier\n+header extends java\/lang\/Enum implements java\/nio\/file\/WatchEvent$Modifier flags 4031 signature Ljava\/lang\/Enum<Lcom\/sun\/nio\/file\/ExtendedWatchEventModifier;>;Ljava\/nio\/file\/WatchEvent$Modifier; classAnnotations @Lsun\/Proprietary+Annotation;\n+innerclass innerClass java\/nio\/file\/WatchEvent$Modifier outerClass java\/nio\/file\/WatchEvent innerClassName Modifier flags 609\n+\n+class name com\/sun\/nio\/file\/SensitivityWatchEventModifier\n+header extends java\/lang\/Enum implements java\/nio\/file\/WatchEvent$Modifier flags 4031 signature Ljava\/lang\/Enum<Lcom\/sun\/nio\/file\/SensitivityWatchEventModifier;>;Ljava\/nio\/file\/WatchEvent$Modifier; classAnnotations @Lsun\/Proprietary+Annotation;\n+innerclass innerClass java\/nio\/file\/WatchEvent$Modifier outerClass java\/nio\/file\/WatchEvent innerClassName Modifier flags 609\n+\n+class name sun\/misc\/SignalHandler\n+header extends java\/lang\/Object flags 601 classAnnotations @Lsun\/Proprietary+Annotation;\n+\n+class name sun\/misc\/Unsafe\n+-method name objectFieldOffset descriptor (Ljava\/lang\/reflect\/Field;)J\n+-method name staticFieldOffset descriptor (Ljava\/lang\/reflect\/Field;)J\n+-method name staticFieldBase descriptor (Ljava\/lang\/reflect\/Field;)Ljava\/lang\/Object;\n+method name objectFieldOffset descriptor (Ljava\/lang\/reflect\/Field;)J flags 1 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(since=\"18\")@Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name staticFieldOffset descriptor (Ljava\/lang\/reflect\/Field;)J flags 1 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(since=\"18\")@Ljdk\/internal\/vm\/annotation\/ForceInline;\n+method name staticFieldBase descriptor (Ljava\/lang\/reflect\/Field;)Ljava\/lang\/Object; flags 1 deprecated true runtimeAnnotations @Ljava\/lang\/Deprecated;(since=\"18\")@Ljdk\/internal\/vm\/annotation\/ForceInline;\n+\n+class name sun\/reflect\/ReflectionFactory\n+header extends java\/lang\/Object flags 21 classAnnotations @Lsun\/Proprietary+Annotation;\n+\n","filename":"make\/data\/symbols\/jdk.unsupported-I.sym.txt","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"},{"patch":"","filename":"make\/data\/symbols\/jdk.xml.dom-I.sym.txt","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"make\/data\/symbols\/jdk.xml.dom-H.sym.txt","status":"copied"},{"patch":"@@ -32,1 +32,1 @@\n-generate platforms 7:8:9:A:B:C:D:E:F:G:H\n+generate platforms 7:8:9:A:B:C:D:E:F:G:H:I\n@@ -44,0 +44,1 @@\n+platform version I base H files java.base-I.sym.txt:java.compiler-I.sym.txt:java.datatransfer-I.sym.txt:java.desktop-I.sym.txt:java.instrument-I.sym.txt:java.logging-I.sym.txt:java.management-I.sym.txt:java.management.rmi-I.sym.txt:java.naming-I.sym.txt:java.net.http-I.sym.txt:java.rmi-I.sym.txt:java.scripting-I.sym.txt:java.security.jgss-I.sym.txt:java.security.sasl-I.sym.txt:java.smartcardio-I.sym.txt:java.sql-I.sym.txt:java.sql.rowset-I.sym.txt:java.xml-I.sym.txt:java.xml.crypto-I.sym.txt:jdk.accessibility-I.sym.txt:jdk.attach-I.sym.txt:jdk.compiler-I.sym.txt:jdk.dynalink-I.sym.txt:jdk.httpserver-I.sym.txt:jdk.incubator.foreign-I.sym.txt:jdk.incubator.vector-I.sym.txt:jdk.jartool-I.sym.txt:jdk.javadoc-I.sym.txt:jdk.jconsole-I.sym.txt:jdk.jdi-I.sym.txt:jdk.jlink-I.sym.txt:jdk.jshell-I.sym.txt:jdk.jsobject-I.sym.txt:jdk.management-I.sym.txt:jdk.management.jfr-I.sym.txt:jdk.net-I.sym.txt:jdk.sctp-I.sym.txt:jdk.security.auth-I.sym.txt:jdk.security.jgss-I.sym.txt:jdk.unsupported-I.sym.txt:jdk.xml.dom-I.sym.txt\n","filename":"make\/data\/symbols\/symbols","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-  RelocationHolder rspec;\n+  RelocationHolder rspec = RelocationHolder::none;\n","filename":"src\/hotspot\/cpu\/arm\/assembler_arm_32.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -945,1 +945,2 @@\n-        __ lis(R0, oop_addr.value() >> 16); \/\/ Don't care about sign extend (will use stw).\n+        \/\/ Don't care about sign extend (will use stw).\n+        __ lis(R0, 0); \/\/ Will get patched.\n@@ -947,1 +948,1 @@\n-        __ ori(R0, R0, oop_addr.value() & 0xffff);\n+        __ ori(R0, R0, 0); \/\/ Will get patched.\n","filename":"src\/hotspot\/cpu\/ppc\/c1_LIRAssembler_ppc.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -236,1 +236,1 @@\n-\/\/ Get compressed oop or klass constant.\n+\/\/ Get compressed oop constant.\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -260,1 +260,1 @@\n-  \/\/ Patch narrow oop constants. Use this also for narrow klass.\n+  \/\/ Patch narrow oop constants.\n","filename":"src\/hotspot\/cpu\/ppc\/nativeInst_ppc.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5956,1 +5956,1 @@\n-    __ lis($dst$$Register, (int)(short)(($src$$constant >> 16) & 0xffff));\n+    __ lis($dst$$Register, 0); \/\/ Will get patched.\n@@ -5969,5 +5969,3 @@\n-    assert(__ oop_recorder() != NULL, \"this assembler needs an OopRecorder\");\n-    int oop_index = __ oop_recorder()->find_index((jobject)$src2$$constant);\n-    RelocationHolder rspec = oop_Relocation::spec(oop_index);\n-    __ relocate(rspec, 1);\n-    __ ori($dst$$Register, $src1$$Register, $src2$$constant & 0xffff);\n+    AddressLiteral addrlit = __ constant_oop_address((jobject)$src2$$constant);\n+    __ relocate(addrlit.rspec(), \/*compressed format*\/ 1);\n+    __ ori($dst$$Register, $src1$$Register, 0); \/\/ Will get patched.\n@@ -6088,6 +6086,3 @@\n-    intptr_t Csrc = CompressedKlassPointers::encode((Klass *)$src1$$constant);\n-    assert(__ oop_recorder() != NULL, \"this assembler needs an OopRecorder\");\n-    int klass_index = __ oop_recorder()->find_index((Klass *)$src1$$constant);\n-    RelocationHolder rspec = metadata_Relocation::spec(klass_index);\n-\n-    __ relocate(rspec, 1);\n+    \/\/ Notify OOP recorder (don't need the relocation)\n+    AddressLiteral md = __ constant_metadata_address((Klass*)$src1$$constant);\n+    intptr_t Csrc = CompressedKlassPointers::encode((Klass*)md.value());\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":7,"deletions":12,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -36,16 +36,1 @@\n-  \/\/ The following comment is from the declaration of DataRelocation:\n-  \/\/\n-  \/\/  \"The \"o\" (displacement) argument is relevant only to split relocations\n-  \/\/   on RISC machines.  In some CPUs (SPARC), the set-hi and set-lo ins'ns\n-  \/\/   can encode more than 32 bits between them.  This allows compilers to\n-  \/\/   share set-hi instructions between addresses that differ by a small\n-  \/\/   offset (e.g., different static variables in the same class).\n-  \/\/   On such machines, the \"x\" argument to set_value on all set-lo\n-  \/\/   instructions must be the same as the \"x\" argument for the\n-  \/\/   corresponding set-hi instructions.  The \"o\" arguments for the\n-  \/\/   set-hi instructions are ignored, and must not affect the high-half\n-  \/\/   immediate constant.  The \"o\" arguments for the set-lo instructions are\n-  \/\/   added into the low-half immediate constant, and must not overflow it.\"\n-  \/\/\n-  \/\/ Currently we don't support splitting of relocations, so o must be\n-  \/\/ zero:\n+  \/\/ Currently we don't support splitting of relocations.\n@@ -58,6 +43,2 @@\n-      assert(type() == relocInfo::oop_type || type() == relocInfo::metadata_type,\n-             \"how to encode else?\");\n-      narrowOop no = (type() == relocInfo::oop_type) ?\n-          CompressedOops::encode(cast_to_oop(x)) :\n-          \/\/ Type punning compressed klass pointer as narrowOop.\n-          CompressedOops::narrow_oop_cast(CompressedKlassPointers::encode((Klass*)x));\n+      assert(type() == relocInfo::oop_type, \"how to encode else?\");\n+      narrowOop no = CompressedOops::encode(cast_to_oop(x));\n","filename":"src\/hotspot\/cpu\/ppc\/relocInfo_ppc.cpp","additions":3,"deletions":22,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -189,1 +189,1 @@\n-  RelocationHolder rspec;\n+  RelocationHolder rspec = RelocationHolder::none;\n@@ -11104,0 +11104,4 @@\n+\/\/ Register is a class, but it would be assigned numerical value.\n+\/\/ \"0\" is assigned for xmm0. Thus we need to ignore -Wnonnull.\n+PRAGMA_DIAG_PUSH\n+PRAGMA_NONNULL_IGNORED\n@@ -11127,0 +11131,1 @@\n+PRAGMA_DIAG_POP\n@@ -11295,0 +11300,14 @@\n+void Assembler::pext(Register dst, Register src1, Register src2) {\n+  assert(VM_Version::supports_bmi2(), \"bit manipulation instructions not supported\");\n+  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ true, \/* legacy_mode *\/ true, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n+  int encode = vex_prefix_and_encode(dst->encoding(), src1->encoding(), src2->encoding(), VEX_SIMD_F3, VEX_OPCODE_0F_38, &attributes);\n+  emit_int16((unsigned char)0xF5, (0xC0 | encode));\n+}\n+\n+void Assembler::pdep(Register dst, Register src1, Register src2) {\n+  assert(VM_Version::supports_bmi2(), \"bit manipulation instructions not supported\");\n+  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ true, \/* legacy_mode *\/ true, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n+  int encode = vex_prefix_and_encode(dst->encoding(), src1->encoding(), src2->encoding(), VEX_SIMD_F2, VEX_OPCODE_0F_38, &attributes);\n+  emit_int16((unsigned char)0xF5, (0xC0 | encode));\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2187,0 +2187,3 @@\n+  void pdep(Register dst, Register src1, Register src2);\n+  void pext(Register dst, Register src1, Register src2);\n+\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -4156,0 +4156,39 @@\n+void C2_MacroAssembler::vector_long_to_maskvec(XMMRegister dst, Register src, Register rtmp1,\n+                                               Register rtmp2, XMMRegister xtmp, int mask_len,\n+                                               int vec_enc) {\n+  int index = 0;\n+  int vindex = 0;\n+  mov64(rtmp1, 0x0101010101010101L);\n+  pdep(rtmp1, src, rtmp1);\n+  if (mask_len > 8) {\n+    movq(rtmp2, src);\n+    vpxor(xtmp, xtmp, xtmp, vec_enc);\n+    movq(xtmp, rtmp1);\n+  }\n+  movq(dst, rtmp1);\n+\n+  mask_len -= 8;\n+  while (mask_len > 0) {\n+    assert ((mask_len & 0x7) == 0, \"mask must be multiple of 8\");\n+    index++;\n+    if ((index % 2) == 0) {\n+      pxor(xtmp, xtmp);\n+    }\n+    mov64(rtmp1, 0x0101010101010101L);\n+    shrq(rtmp2, 8);\n+    pdep(rtmp1, rtmp2, rtmp1);\n+    pinsrq(xtmp, rtmp1, index % 2);\n+    vindex = index \/ 2;\n+    if (vindex) {\n+      \/\/ Write entire 16 byte vector when both 64 bit\n+      \/\/ lanes are update to save redundant instructions.\n+      if (index % 2) {\n+        vinsertf128(dst, dst, xtmp, vindex);\n+      }\n+    } else {\n+      vmovdqu(dst, xtmp);\n+    }\n+    mask_len -= 8;\n+  }\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":39,"deletions":0,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -233,0 +233,2 @@\n+  void vector_long_to_maskvec(XMMRegister dst, Register src, Register rtmp1,\n+                              Register rtmp2, XMMRegister xtmp, int mask_len, int vec_enc);\n@@ -234,0 +236,1 @@\n+\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1845,0 +1845,8 @@\n+    case Op_VectorLongToMask:\n+      if (UseAVX < 1 || !is_LP64) {\n+        return false;\n+      }\n+      if (UseAVX < 3 && !VM_Version::supports_bmi2()) {\n+        return false;\n+      }\n+      break;\n@@ -9536,0 +9544,41 @@\n+\n+instruct long_to_maskLE8_avx(vec dst, rRegL src, rRegL rtmp1, rRegL rtmp2, vec xtmp) %{\n+  predicate(n->bottom_type()->isa_vectmask() == NULL && Matcher::vector_length(n) <= 8);\n+  match(Set dst (VectorLongToMask src));\n+  effect(TEMP dst, TEMP rtmp1, TEMP rtmp2, TEMP xtmp);\n+  format %{ \"long_to_mask_avx $dst, $src\\t! using $rtmp1, $rtmp2, $xtmp as TEMP\" %}\n+  ins_encode %{\n+    int mask_len = Matcher::vector_length(this);\n+    int vec_enc  = vector_length_encoding(mask_len*8);\n+    __ vector_long_to_maskvec($dst$$XMMRegister, $src$$Register, $rtmp1$$Register,\n+                              $rtmp2$$Register, xnoreg, mask_len, vec_enc);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+\n+instruct long_to_maskGT8_avx(vec dst, rRegL src, rRegL rtmp1, rRegL rtmp2, vec xtmp1, rFlagsReg cr) %{\n+  predicate(n->bottom_type()->isa_vectmask() == NULL && Matcher::vector_length(n) > 8);\n+  match(Set dst (VectorLongToMask src));\n+  effect(TEMP dst, TEMP rtmp1, TEMP rtmp2, TEMP xtmp1, KILL cr);\n+  format %{ \"long_to_mask_avx $dst, $src\\t! using $rtmp1, $rtmp2, $xtmp1, as TEMP\" %}\n+  ins_encode %{\n+    int mask_len = Matcher::vector_length(this);\n+    assert(mask_len <= 32, \"invalid mask length\");\n+    int vec_enc  = vector_length_encoding(mask_len*8);\n+    __ vector_long_to_maskvec($dst$$XMMRegister, $src$$Register, $rtmp1$$Register,\n+                              $rtmp2$$Register, $xtmp1$$XMMRegister, mask_len, vec_enc);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n+instruct long_to_mask_evex(kReg dst, rRegL src) %{\n+  predicate(n->bottom_type()->isa_vectmask());\n+  match(Set dst (VectorLongToMask src));\n+  format %{ \"long_to_mask_evex $dst, $src\\t!\" %}\n+  ins_encode %{\n+    int mask_len = Matcher::vector_length(this);\n+    __ kmov($dst$$KRegister, $src$$Register);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n@@ -9555,0 +9604,1 @@\n+\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":50,"deletions":0,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -4237,2 +4237,2 @@\n-    \"VectorMaskWrapper\", \"VectorMaskCmp\", \"VectorReinterpret\",\"LoadVectorMasked\",\"StoreVectorMasked\",\n-    \"FmaVD\", \"FmaVF\",\"PopCountVI\",\n+    \"VectorMaskWrapper\",\"VectorMaskCmp\",\"VectorReinterpret\",\"LoadVectorMasked\",\"StoreVectorMasked\",\n+    \"FmaVD\",\"FmaVF\",\"PopCountVI\",\"VectorLongToMask\",\n","filename":"src\/hotspot\/share\/adlc\/formssel.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,1 @@\n-\/\/  slots and registers to their frame location\n+\/\/  slots and registers) to their frame location\n","filename":"src\/hotspot\/share\/c1\/c1_FrameMap.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -3094,1 +3094,1 @@\n-  \/\/ necesary if std_entry is also a backward branch target because\n+  \/\/ necessary if std_entry is also a backward branch target because\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -893,5 +893,0 @@\n-void BlockList::blocks_do(void f(BlockBegin*)) {\n-  for (int i = length() - 1; i >= 0; i--) f(at(i));\n-}\n-\n-\n","filename":"src\/hotspot\/share\/c1\/c1_Instruction.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -140,1 +140,0 @@\n-  void blocks_do(void f(BlockBegin*));\n","filename":"src\/hotspot\/share\/c1\/c1_Instruction.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -508,1 +508,1 @@\n-  \/\/ method parameters are not linked in instructions list, so process them separateley\n+  \/\/ method parameters are not linked in instructions list, so process them separately\n","filename":"src\/hotspot\/share\/c1\/c1_ValueMap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -119,1 +119,0 @@\n-  void kill_exception();\n","filename":"src\/hotspot\/share\/c1\/c1_ValueMap.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -142,0 +142,2 @@\n+#define JAVA_19_VERSION                   63\n+\n@@ -4530,1 +4532,0 @@\n-  const bool major_gte_14  = _major_version >= JAVA_14_VERSION;\n@@ -4786,1 +4787,1 @@\n-\/\/ be taken as a fieldname. Allow '\/' if slash_ok is true.\n+\/\/ be taken as a fieldname. Allow non-trailing '\/'s if slash_ok is true.\n@@ -4860,1 +4861,1 @@\n-  return (not_first_ch) ? p : NULL;\n+  return (not_first_ch && !last_is_slash) ? p : NULL;\n","filename":"src\/hotspot\/share\/classfile\/classFileParser.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -872,2 +872,2 @@\n-  do_intrinsic(_VectorBroadcastCoerced, jdk_internal_vm_vector_VectorSupport, vector_broadcast_coerced_name, vector_broadcast_coerced_sig, F_S)\\\n-   do_signature(vector_broadcast_coerced_sig, \"(Ljava\/lang\/Class;\"                                                                             \\\n+  do_intrinsic(_VectorFromBitsCoerced, jdk_internal_vm_vector_VectorSupport, vector_frombits_coerced_name, vector_frombits_coerced_sig, F_S)   \\\n+   do_signature(vector_frombits_coerced_sig, \"(Ljava\/lang\/Class;\"                                                                              \\\n@@ -877,0 +877,1 @@\n+                                               \"I\"                                                                                             \\\n@@ -878,1 +879,1 @@\n-                                               \"Ljdk\/internal\/vm\/vector\/VectorSupport$BroadcastOperation;)\"                                    \\\n+                                               \"Ljdk\/internal\/vm\/vector\/VectorSupport$FromBitsCoercedOperation;)\"                              \\\n@@ -880,1 +881,1 @@\n-   do_name(vector_broadcast_coerced_name, \"broadcastCoerced\")                                                                                  \\\n+   do_name(vector_frombits_coerced_name, \"fromBitsCoerced\")                                                                                    \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -253,0 +253,4 @@\n+\/\/ An initial guess at the rate for pause-time card refinement for one\n+\/\/ thread, used when computing the default initial green zone value.\n+const double InitialPauseTimeCardRefinementRate = 200.0;\n+\n@@ -254,2 +258,1 @@\n-  size_t green = G1ConcRefinementGreenZone;\n-  const char* name = \"G1ConcRefinementGreenZone\";\n+  size_t green;\n@@ -257,2 +260,7 @@\n-    green = ParallelGCThreads;\n-    name = \"ParallelGCThreads\";\n+    const double rate = InitialPauseTimeCardRefinementRate * ParallelGCThreads;\n+    \/\/ The time budget for pause-time card refinement.\n+    const double ms = MaxGCPauseMillis * (G1RSetUpdatingPauseTimePercent \/ 100.0);\n+    green = rate * ms;\n+  } else {\n+    green = configuration_buffers_to_cards(G1ConcRefinementGreenZone,\n+                                           \"G1ConcRefinementGreenZone\");\n@@ -260,1 +268,0 @@\n-  green = configuration_buffers_to_cards(green, name);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefine.cpp","additions":13,"deletions":6,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -658,0 +658,2 @@\n+  \/\/ We cast p to an oop, so region-bottom must be an obj-start.\n+  assert(!is_region_humongous || is_starts_humongous(), \"invariant\");\n@@ -739,5 +741,0 @@\n-void HeapRegion::verify() const {\n-  bool dummy = false;\n-  verify(VerifyOption_G1UsePrevMarking, \/* failures *\/ &dummy);\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.cpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -621,3 +621,0 @@\n-  \/\/ Verify using the \"prev\" marking information\n-  void verify() const;\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -107,6 +107,2 @@\n-  G1CollectedHeap* g1h = G1CollectedHeap::heap();\n-\n-  if (!this->is_in(p)) {\n-    assert(is_continues_humongous(), \"This case can only happen for humongous regions\");\n-    return (p == humongous_start_region()->bottom());\n-  }\n+  assert(p >= bottom() && p < top(), \"precondition\");\n+  assert(!is_continues_humongous(), \"p must point to block-start\");\n@@ -121,1 +117,1 @@\n-    return !g1h->is_obj_dead(cast_to_oop(p), this);\n+    return !G1CollectedHeap::heap()->is_obj_dead(cast_to_oop(p), this);\n@@ -123,1 +119,1 @@\n-  return p < top();\n+  return true;\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.inline.hpp","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -693,1 +693,1 @@\n-  case vmIntrinsics::_VectorBroadcastCoerced:\n+  case vmIntrinsics::_VectorFromBitsCoerced:\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -431,0 +431,1 @@\n+macro(VectorLongToMask)\n","filename":"src\/hotspot\/share\/opto\/classes.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -655,2 +655,2 @@\n-  case vmIntrinsics::_VectorBroadcastCoerced:\n-    return inline_vector_broadcast_coerced();\n+  case vmIntrinsics::_VectorFromBitsCoerced:\n+    return inline_vector_frombits_coerced();\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -317,1 +317,1 @@\n-  bool inline_vector_broadcast_coerced();\n+  bool inline_vector_frombits_coerced();\n","filename":"src\/hotspot\/share\/opto\/library_call.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -244,1 +244,1 @@\n-    \/\/ Usually the initialization shoudl be to n->Value(this) instead,\n+    \/\/ Usually the initialization should be to n->Value(this) instead,\n","filename":"src\/hotspot\/share\/opto\/phaseX.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -792,2 +792,2 @@\n-\/\/ M broadcastCoerced(Class<? extends M> vmClass, Class<E> elementType, int length,\n-\/\/                    long bits, S s,\n+\/\/ M fromBitsCoerced(Class<? extends M> vmClass, Class<E> elementType, int length,\n+\/\/                    long bits, int mode, S s,\n@@ -795,1 +795,1 @@\n-bool LibraryCallKit::inline_vector_broadcast_coerced() {\n+bool LibraryCallKit::inline_vector_frombits_coerced() {\n@@ -799,0 +799,5 @@\n+  const TypeLong*    bits_type    = gvn().type(argument(3))->isa_long();\n+  \/\/ Mode argument determines the mode of operation it can take following values:-\n+  \/\/ MODE_BROADCAST for vector Vector.boradcast and VectorMask.maskAll operations.\n+  \/\/ MODE_BITS_COERCED_LONG_TO_MASK for VectorMask.fromLong operation.\n+  const TypeInt*     mode         = gvn().type(argument(5))->isa_int();\n@@ -800,2 +805,3 @@\n-  if (vector_klass == NULL || elem_klass == NULL || vlen == NULL ||\n-      vector_klass->const_oop() == NULL || elem_klass->const_oop() == NULL || !vlen->is_con()) {\n+  if (vector_klass == NULL || elem_klass == NULL || vlen == NULL || mode == NULL ||\n+      bits_type == NULL || vector_klass->const_oop() == NULL || elem_klass->const_oop() == NULL ||\n+      !vlen->is_con() || !mode->is_con()) {\n@@ -803,1 +809,1 @@\n-      tty->print_cr(\"  ** missing constant: vclass=%s etype=%s vlen=%s\",\n+      tty->print_cr(\"  ** missing constant: vclass=%s etype=%s vlen=%s bitwise=%s\",\n@@ -806,1 +812,2 @@\n-                    NodeClassNames[argument(2)->Opcode()]);\n+                    NodeClassNames[argument(2)->Opcode()],\n+                    NodeClassNames[argument(5)->Opcode()]);\n@@ -829,3 +836,6 @@\n-  \/\/ TODO When mask usage is supported, VecMaskNotUsed needs to be VecMaskUseLoad.\n-  if (!arch_supports_vector(VectorNode::replicate_opcode(elem_bt), num_elem, elem_bt,\n-                            (is_vector_mask(vbox_klass) ? VecMaskUseStore : VecMaskNotUsed), true \/*has_scalar_args*\/)) {\n+  bool is_mask = is_vector_mask(vbox_klass);\n+  int  bcast_mode = mode->get_con();\n+  VectorMaskUseType checkFlags = (VectorMaskUseType)(is_mask ? VecMaskUseAll : VecMaskNotUsed);\n+  int opc = bcast_mode == VectorSupport::MODE_BITS_COERCED_LONG_TO_MASK ? Op_VectorLongToMask : VectorNode::replicate_opcode(elem_bt);\n+\n+  if (!arch_supports_vector(opc, num_elem, elem_bt, checkFlags, true \/*has_scalar_args*\/)) {\n@@ -833,1 +843,1 @@\n-      tty->print_cr(\"  ** not supported: arity=0 op=broadcast vlen=%d etype=%s ismask=%d\",\n+      tty->print_cr(\"  ** not supported: arity=0 op=broadcast vlen=%d etype=%s ismask=%d bcast_mode=%d\",\n@@ -835,1 +845,2 @@\n-                    is_vector_mask(vbox_klass) ? 1 : 0);\n+                    is_mask ? 1 : 0,\n+                    bcast_mode);\n@@ -840,19 +851,12 @@\n-  Node* bits = argument(3); \/\/ long\n-  Node* elem = NULL;\n-  switch (elem_bt) {\n-    case T_BOOLEAN: \/\/ fall-through\n-    case T_BYTE:    \/\/ fall-through\n-    case T_SHORT:   \/\/ fall-through\n-    case T_CHAR:    \/\/ fall-through\n-    case T_INT: {\n-      elem = gvn().transform(new ConvL2INode(bits));\n-      break;\n-    }\n-    case T_DOUBLE: {\n-      elem = gvn().transform(new MoveL2DNode(bits));\n-      break;\n-    }\n-    case T_FLOAT: {\n-      bits = gvn().transform(new ConvL2INode(bits));\n-      elem = gvn().transform(new MoveI2FNode(bits));\n-      break;\n+  Node* broadcast = NULL;\n+  Node* bits = argument(3);\n+  Node* elem = bits;\n+\n+  if (opc == Op_VectorLongToMask) {\n+    const TypeVect* vt = TypeVect::makemask(elem_bt, num_elem);\n+    if (vt->isa_vectmask()) {\n+      broadcast = gvn().transform(new VectorLongToMaskNode(elem, vt));\n+    } else {\n+      const TypeVect* mvt = TypeVect::make(T_BOOLEAN, num_elem);\n+      broadcast = gvn().transform(new VectorLongToMaskNode(elem, mvt));\n+      broadcast = gvn().transform(new VectorLoadMaskNode(broadcast, vt));\n@@ -860,3 +864,24 @@\n-    case T_LONG: {\n-      elem = bits; \/\/ no conversion needed\n-      break;\n+  } else {\n+    switch (elem_bt) {\n+      case T_BOOLEAN: \/\/ fall-through\n+      case T_BYTE:    \/\/ fall-through\n+      case T_SHORT:   \/\/ fall-through\n+      case T_CHAR:    \/\/ fall-through\n+      case T_INT: {\n+        elem = gvn().transform(new ConvL2INode(bits));\n+        break;\n+      }\n+      case T_DOUBLE: {\n+        elem = gvn().transform(new MoveL2DNode(bits));\n+        break;\n+      }\n+      case T_FLOAT: {\n+        bits = gvn().transform(new ConvL2INode(bits));\n+        elem = gvn().transform(new MoveI2FNode(bits));\n+        break;\n+      }\n+      case T_LONG: {\n+        \/\/ no conversion needed\n+        break;\n+      }\n+      default: fatal(\"%s\", type2name(elem_bt));\n@@ -864,1 +889,2 @@\n-    default: fatal(\"%s\", type2name(elem_bt));\n+    broadcast = VectorNode::scalar2vector(elem, num_elem, Type::get_const_basic_type(elem_bt), is_mask);\n+    broadcast = gvn().transform(broadcast);\n@@ -867,3 +893,0 @@\n-  Node* broadcast = VectorNode::scalar2vector(elem, num_elem, Type::get_const_basic_type(elem_bt), is_vector_mask(vbox_klass));\n-  broadcast = gvn().transform(broadcast);\n-\n@@ -2496,15 +2519,1 @@\n-          \/\/ Special handling for casting operation involving floating point types.\n-          \/\/ Case A) F -> X :=  F -> VectorMaskCast (F->I\/L [NOP]) -> VectorCast[I\/L]2X\n-          \/\/ Case B) X -> F :=  X -> VectorCastX2[I\/L] -> VectorMaskCast ([I\/L]->F [NOP])\n-          \/\/ Case C) F -> F :=  VectorMaskCast (F->I\/L [NOP]) -> VectorCast[I\/L]2[L\/I] -> VectotMaskCast (L\/I->F [NOP])\n-          if (is_floating_point_type(elem_bt_from)) {\n-            const TypeVect* new_src_type = TypeVect::make(new_elem_bt_from, num_elem_to, is_mask);\n-            op = gvn().transform(new VectorMaskCastNode(op, new_src_type));\n-          }\n-          if (is_floating_point_type(elem_bt_to)) {\n-            new_elem_bt_to = elem_bt_to == T_FLOAT ? T_INT : T_LONG;\n-          }\n-          op = gvn().transform(VectorCastNode::make(cast_vopc, op, new_elem_bt_to, num_elem_to));\n-          if (new_elem_bt_to != elem_bt_to) {\n-            op = gvn().transform(new VectorMaskCastNode(op, dst_type));\n-          }\n+          op = VectorMaskCastNode::makeCastNode(&gvn(), op, dst_type);\n","filename":"src\/hotspot\/share\/opto\/vectorIntrinsics.cpp","additions":62,"deletions":53,"binary":false,"changes":115,"status":"modified"},{"patch":"@@ -1450,0 +1450,76 @@\n+Node* VectorMaskToLongNode::Identity(PhaseGVN* phase) {\n+  if (in(1)->Opcode() == Op_VectorLongToMask) {\n+    return in(1)->in(1);\n+  }\n+  return this;\n+}\n+\n+\n+Node* VectorMaskCastNode::makeCastNode(PhaseGVN* phase, Node* src, const TypeVect* dst_type) {\n+  const TypeVect* src_type = src->bottom_type()->is_vect();\n+  assert(src_type->length() == dst_type->length(), \"\");\n+\n+  int num_elem = src_type->length();\n+  BasicType elem_bt_from = src_type->element_basic_type();\n+  BasicType elem_bt_to = dst_type->element_basic_type();\n+\n+  if (dst_type->isa_vectmask() == NULL && src_type->isa_vectmask() == NULL &&\n+      type2aelembytes(elem_bt_from) != type2aelembytes(elem_bt_to)) {\n+\n+    Node* op = src;\n+    BasicType new_elem_bt_from = elem_bt_from;\n+    BasicType new_elem_bt_to = elem_bt_to;\n+    if (is_floating_point_type(elem_bt_from)) {\n+      new_elem_bt_from =  elem_bt_from == T_FLOAT ? T_INT : T_LONG;\n+    }\n+    if (is_floating_point_type(elem_bt_to)) {\n+      new_elem_bt_to = elem_bt_to == T_FLOAT ? T_INT : T_LONG;\n+    }\n+\n+    \/\/ Special handling for casting operation involving floating point types.\n+    \/\/ Case A) F -> X :=  F -> VectorMaskCast (F->I\/L [NOP]) -> VectorCast[I\/L]2X\n+    \/\/ Case B) X -> F :=  X -> VectorCastX2[I\/L] -> VectorMaskCast ([I\/L]->F [NOP])\n+    \/\/ Case C) F -> F :=  VectorMaskCast (F->I\/L [NOP]) -> VectorCast[I\/L]2[L\/I] -> VectotMaskCast (L\/I->F [NOP])\n+\n+    if (new_elem_bt_from != elem_bt_from) {\n+      const TypeVect* new_src_type = TypeVect::makemask(new_elem_bt_from, num_elem);\n+      op = phase->transform(new VectorMaskCastNode(op, new_src_type));\n+    }\n+\n+    op = phase->transform(VectorCastNode::make(VectorCastNode::opcode(new_elem_bt_from), op, new_elem_bt_to, num_elem));\n+\n+    if (new_elem_bt_to != elem_bt_to) {\n+      op = phase->transform(new VectorMaskCastNode(op, dst_type));\n+    }\n+    return op;\n+  } else {\n+    return new VectorMaskCastNode(src, dst_type);\n+  }\n+}\n+\n+Node* VectorLongToMaskNode::Ideal(PhaseGVN* phase, bool can_reshape) {\n+  const TypeVect* dst_type = bottom_type()->is_vect();\n+  if (in(1)->Opcode() == Op_AndL &&\n+      in(1)->in(1)->Opcode() == Op_VectorMaskToLong &&\n+      in(1)->in(2)->bottom_type()->isa_long() &&\n+      in(1)->in(2)->bottom_type()->is_long()->is_con() &&\n+      in(1)->in(2)->bottom_type()->is_long()->get_con() == ((1L << dst_type->length()) - 1)) {\n+      \/\/ Different src\/dst mask length represents a re-interpretation operation,\n+      \/\/ we can however generate a mask casting operation if length matches.\n+     Node* src = in(1)->in(1)->in(1);\n+     if (dst_type->isa_vectmask() == NULL) {\n+       if (src->Opcode() != Op_VectorStoreMask) {\n+         return NULL;\n+       }\n+       src = src->in(1);\n+     }\n+     const TypeVect* src_type = src->bottom_type()->is_vect();\n+     if (src_type->length() == dst_type->length() &&\n+         ((src_type->isa_vectmask() == NULL && dst_type->isa_vectmask() == NULL) ||\n+          (src_type->isa_vectmask() && dst_type->isa_vectmask()))) {\n+       return VectorMaskCastNode::makeCastNode(phase, src, dst_type);\n+     }\n+  }\n+  return NULL;\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":76,"deletions":0,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"prims\/vectorSupport.hpp\"\n@@ -980,0 +981,10 @@\n+  virtual Node* Identity(PhaseGVN* phase);\n+};\n+\n+class VectorLongToMaskNode : public VectorNode {\n+ public:\n+  VectorLongToMaskNode(Node* mask, const TypeVect* ty):\n+    VectorNode(mask, ty) {\n+  }\n+  virtual int Opcode() const;\n+  Node* Ideal(PhaseGVN* phase, bool can_reshape);\n@@ -1404,1 +1415,1 @@\n-\n+  static Node* makeCastNode(PhaseGVN* phase, Node* in1, const TypeVect * vt);\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -124,0 +124,5 @@\n+  enum {\n+    MODE_BROADCAST = 0,\n+    MODE_BITS_COERCED_LONG_TO_MASK = 1\n+  };\n+\n","filename":"src\/hotspot\/share\/prims\/vectorSupport.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1517,1 +1517,1 @@\n-    FLAG_SET_DEFAULT(UseSharedSpaces, false);\n+    UseSharedSpaces = false;\n@@ -2706,3 +2706,1 @@\n-      if (FLAG_SET_CMDLINE(DumpSharedSpaces, true) != JVMFlag::SUCCESS) {\n-        return JNI_EINVAL;\n-      }\n+      DumpSharedSpaces = true;\n@@ -2711,6 +2709,2 @@\n-      if (FLAG_SET_CMDLINE(UseSharedSpaces, true) != JVMFlag::SUCCESS) {\n-        return JNI_EINVAL;\n-      }\n-      if (FLAG_SET_CMDLINE(RequireSharedSpaces, true) != JVMFlag::SUCCESS) {\n-        return JNI_EINVAL;\n-      }\n+      UseSharedSpaces = true;\n+      RequireSharedSpaces = true;\n@@ -2719,6 +2713,2 @@\n-      if (FLAG_SET_CMDLINE(UseSharedSpaces, true) != JVMFlag::SUCCESS) {\n-        return JNI_EINVAL;\n-      }\n-      if (FLAG_SET_CMDLINE(RequireSharedSpaces, false) != JVMFlag::SUCCESS) {\n-        return JNI_EINVAL;\n-      }\n+      UseSharedSpaces = true;\n+      RequireSharedSpaces = false;\n@@ -2727,6 +2717,2 @@\n-      if (FLAG_SET_CMDLINE(UseSharedSpaces, false) != JVMFlag::SUCCESS) {\n-        return JNI_EINVAL;\n-      }\n-      if (FLAG_SET_CMDLINE(RequireSharedSpaces, false) != JVMFlag::SUCCESS) {\n-        return JNI_EINVAL;\n-      }\n+      UseSharedSpaces = false;\n+      RequireSharedSpaces = false;\n@@ -2986,6 +2972,2 @@\n-    if (FLAG_SET_CMDLINE(UseSharedSpaces, true) != JVMFlag::SUCCESS) {\n-      return JNI_EINVAL;\n-    }\n-    if (FLAG_SET_CMDLINE(RequireSharedSpaces, true) != JVMFlag::SUCCESS) {\n-      return JNI_EINVAL;\n-    }\n+    UseSharedSpaces = true;\n+    RequireSharedSpaces = true;\n@@ -3147,1 +3129,1 @@\n-    \/\/ unsafe with DumpSharedSpaces (which modifies the class metadata in place). Let's disable\n+    \/\/ unsafe with -Xshare:dump (which modifies the class metadata in place). Let's disable\n@@ -3150,2 +3132,2 @@\n-    \/\/ Note: this is not a concern for DynamicDumpSharedSpaces, which makes a copy of the class metadata\n-    \/\/ instead of modifying them in place. The copy is inaccessible to the compiler.\n+    \/\/ Note: this is not a concern for dynamically dumping shared spaces, which makes a copy of the\n+    \/\/ class metadata instead of modifying them in place. The copy is inaccessible to the compiler.\n@@ -3164,1 +3146,1 @@\n-    FLAG_SET_DEFAULT(DynamicDumpSharedSpaces, false);\n+    DynamicDumpSharedSpaces = false;\n@@ -3166,1 +3148,1 @@\n-    FLAG_SET_DEFAULT(DynamicDumpSharedSpaces, true);\n+    DynamicDumpSharedSpaces = true;\n@@ -3173,1 +3155,1 @@\n-    FLAG_SET_DEFAULT(UseSharedSpaces, false);\n+    UseSharedSpaces = false;\n@@ -4016,1 +3998,1 @@\n-    FLAG_SET_DEFAULT(UseSharedSpaces, false);\n+    UseSharedSpaces = false;\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":17,"deletions":35,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -1808,3 +1808,0 @@\n-  product(bool, UseSharedSpaces, true,                                      \\\n-          \"(Deprecated) Use shared spaces for metadata\")                    \\\n-                                                                            \\\n@@ -1814,11 +1811,0 @@\n-  product(bool, RequireSharedSpaces, false,                                 \\\n-          \"(Deprecated) Require shared spaces for metadata\")                \\\n-                                                                            \\\n-  product(bool, DumpSharedSpaces, false,                                    \\\n-          \"(Deprecated) Special mode: JVM reads a class list, loads \"       \\\n-          \"classes, builds shared spaces, and dumps the shared spaces to \"  \\\n-          \"a file to be used in future JVM runs\")                           \\\n-                                                                            \\\n-  product(bool, DynamicDumpSharedSpaces, false,                             \\\n-          \"(Deprecated) Dynamic archive\")                                   \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -42,0 +42,8 @@\n+\/\/ Old CDS options\n+bool DumpSharedSpaces;\n+bool DynamicDumpSharedSpaces;\n+bool RequireSharedSpaces;\n+extern \"C\" {\n+JNIEXPORT jboolean UseSharedSpaces = true;\n+}\n+\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -511,0 +511,10 @@\n+\/\/----------------------------------------------------------------------------------------------------\n+\/\/ old CDS options\n+extern bool DumpSharedSpaces;\n+extern bool DynamicDumpSharedSpaces;\n+extern bool RequireSharedSpaces;\n+extern \"C\" {\n+\/\/ Make sure UseSharedSpaces is accessible to the serviceability agent.\n+extern JNIEXPORT jboolean UseSharedSpaces;\n+}\n+\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.io;\n+\n+import java.lang.ref.Reference;\n+import java.lang.ref.ReferenceQueue;\n+import java.lang.ref.SoftReference;\n+\n+\/\/ Maps Class instances to values of type T. Under memory pressure, the\n+\/\/ mapping is released (under soft references GC policy) and would be\n+\/\/ recomputed the next time it is queried. The mapping is bound to the\n+\/\/ lifetime of the class: when the class is unloaded, the mapping is\n+\/\/ removed too.\n+abstract class ClassCache<T> {\n+\n+    private static class CacheRef<T> extends SoftReference<T> {\n+        private final Class<?> type;\n+\n+        CacheRef(T referent, ReferenceQueue<T> queue, Class<?> type) {\n+            super(referent, queue);\n+            this.type = type;\n+        }\n+\n+        Class<?> getType() {\n+            return type;\n+        }\n+    }\n+\n+    private final ReferenceQueue<T> queue;\n+    private final ClassValue<SoftReference<T>> map;\n+\n+    protected abstract T computeValue(Class<?> cl);\n+\n+    protected ClassCache() {\n+        queue = new ReferenceQueue<>();\n+        map = new ClassValue<>() {\n+            @Override\n+            protected SoftReference<T> computeValue(Class<?> type) {\n+                return new CacheRef<>(ClassCache.this.computeValue(type), queue, type);\n+            }\n+        };\n+    }\n+\n+    T get(Class<?> cl) {\n+        processQueue();\n+        T val;\n+        do {\n+            SoftReference<T> ref = map.get(cl);\n+            val = ref.get();\n+            if (val == null) {\n+                map.remove(cl);\n+            }\n+        } while (val == null);\n+        return val;\n+    }\n+\n+    private void processQueue() {\n+        Reference<? extends T> ref;\n+        while((ref = queue.poll()) != null) {\n+            CacheRef<? extends T> cacheRef = (CacheRef<? extends T>)ref;\n+            map.remove(cacheRef.getType());\n+        }\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/io\/ClassCache.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -33,1 +33,0 @@\n-import java.lang.ref.SoftReference;\n@@ -111,2 +110,7 @@\n-        static final ConcurrentMap<WeakClassKey,Reference<?>> localDescs =\n-            new ConcurrentHashMap<>();\n+        static final ClassCache<ObjectStreamClass> localDescs =\n+            new ClassCache<>() {\n+                @Override\n+                protected ObjectStreamClass computeValue(Class<?> type) {\n+                    return new ObjectStreamClass(type);\n+                }\n+            };\n@@ -115,9 +119,7 @@\n-        static final ConcurrentMap<FieldReflectorKey,Reference<?>> reflectors =\n-            new ConcurrentHashMap<>();\n-\n-        \/** queue for WeakReferences to local classes *\/\n-        private static final ReferenceQueue<Class<?>> localDescsQueue =\n-            new ReferenceQueue<>();\n-        \/** queue for WeakReferences to field reflectors keys *\/\n-        private static final ReferenceQueue<Class<?>> reflectorsQueue =\n-            new ReferenceQueue<>();\n+        static final ClassCache<Map<FieldReflectorKey, FieldReflector>> reflectors =\n+            new ClassCache<>() {\n+                @Override\n+                protected Map<FieldReflectorKey, FieldReflector> computeValue(Class<?> type) {\n+                    return new ConcurrentHashMap<>();\n+                }\n+            };\n@@ -365,130 +367,1 @@\n-        processQueue(Caches.localDescsQueue, Caches.localDescs);\n-        WeakClassKey key = new WeakClassKey(cl, Caches.localDescsQueue);\n-        Reference<?> ref = Caches.localDescs.get(key);\n-        Object entry = null;\n-        if (ref != null) {\n-            entry = ref.get();\n-        }\n-        EntryFuture future = null;\n-        if (entry == null) {\n-            EntryFuture newEntry = new EntryFuture();\n-            Reference<?> newRef = new SoftReference<>(newEntry);\n-            do {\n-                if (ref != null) {\n-                    Caches.localDescs.remove(key, ref);\n-                }\n-                ref = Caches.localDescs.putIfAbsent(key, newRef);\n-                if (ref != null) {\n-                    entry = ref.get();\n-                }\n-            } while (ref != null && entry == null);\n-            if (entry == null) {\n-                future = newEntry;\n-            }\n-        }\n-\n-        if (entry instanceof ObjectStreamClass) {  \/\/ check common case first\n-            return (ObjectStreamClass) entry;\n-        }\n-        if (entry instanceof EntryFuture) {\n-            future = (EntryFuture) entry;\n-            if (future.getOwner() == Thread.currentThread()) {\n-                \/*\n-                 * Handle nested call situation described by 4803747: waiting\n-                 * for future value to be set by a lookup() call further up the\n-                 * stack will result in deadlock, so calculate and set the\n-                 * future value here instead.\n-                 *\/\n-                entry = null;\n-            } else {\n-                entry = future.get();\n-            }\n-        }\n-        if (entry == null) {\n-            try {\n-                entry = new ObjectStreamClass(cl);\n-            } catch (Throwable th) {\n-                entry = th;\n-            }\n-            if (future.set(entry)) {\n-                Caches.localDescs.put(key, new SoftReference<>(entry));\n-            } else {\n-                \/\/ nested lookup call already set future\n-                entry = future.get();\n-            }\n-        }\n-\n-        if (entry instanceof ObjectStreamClass) {\n-            return (ObjectStreamClass) entry;\n-        } else if (entry instanceof RuntimeException) {\n-            throw (RuntimeException) entry;\n-        } else if (entry instanceof Error) {\n-            throw (Error) entry;\n-        } else {\n-            throw new InternalError(\"unexpected entry: \" + entry);\n-        }\n-    }\n-\n-    \/**\n-     * Placeholder used in class descriptor and field reflector lookup tables\n-     * for an entry in the process of being initialized.  (Internal) callers\n-     * which receive an EntryFuture belonging to another thread as the result\n-     * of a lookup should call the get() method of the EntryFuture; this will\n-     * return the actual entry once it is ready for use and has been set().  To\n-     * conserve objects, EntryFutures synchronize on themselves.\n-     *\/\n-    private static class EntryFuture {\n-\n-        private static final Object unset = new Object();\n-        private final Thread owner = Thread.currentThread();\n-        private Object entry = unset;\n-\n-        \/**\n-         * Attempts to set the value contained by this EntryFuture.  If the\n-         * EntryFuture's value has not been set already, then the value is\n-         * saved, any callers blocked in the get() method are notified, and\n-         * true is returned.  If the value has already been set, then no saving\n-         * or notification occurs, and false is returned.\n-         *\/\n-        synchronized boolean set(Object entry) {\n-            if (this.entry != unset) {\n-                return false;\n-            }\n-            this.entry = entry;\n-            notifyAll();\n-            return true;\n-        }\n-\n-        \/**\n-         * Returns the value contained by this EntryFuture, blocking if\n-         * necessary until a value is set.\n-         *\/\n-        @SuppressWarnings(\"removal\")\n-        synchronized Object get() {\n-            boolean interrupted = false;\n-            while (entry == unset) {\n-                try {\n-                    wait();\n-                } catch (InterruptedException ex) {\n-                    interrupted = true;\n-                }\n-            }\n-            if (interrupted) {\n-                AccessController.doPrivileged(\n-                    new PrivilegedAction<>() {\n-                        public Void run() {\n-                            Thread.currentThread().interrupt();\n-                            return null;\n-                        }\n-                    }\n-                );\n-            }\n-            return entry;\n-        }\n-\n-        \/**\n-         * Returns the thread that created this EntryFuture.\n-         *\/\n-        Thread getOwner() {\n-            return owner;\n-        }\n+        return Caches.localDescs.get(cl);\n@@ -2251,26 +2124,1 @@\n-            localDesc.cl : null;\n-        processQueue(Caches.reflectorsQueue, Caches.reflectors);\n-        FieldReflectorKey key = new FieldReflectorKey(cl, fields,\n-                                                      Caches.reflectorsQueue);\n-        Reference<?> ref = Caches.reflectors.get(key);\n-        Object entry = null;\n-        if (ref != null) {\n-            entry = ref.get();\n-        }\n-        EntryFuture future = null;\n-        if (entry == null) {\n-            EntryFuture newEntry = new EntryFuture();\n-            Reference<?> newRef = new SoftReference<>(newEntry);\n-            do {\n-                if (ref != null) {\n-                    Caches.reflectors.remove(key, ref);\n-                }\n-                ref = Caches.reflectors.putIfAbsent(key, newRef);\n-                if (ref != null) {\n-                    entry = ref.get();\n-                }\n-            } while (ref != null && entry == null);\n-            if (entry == null) {\n-                future = newEntry;\n-            }\n-        }\n+            localDesc.cl : Void.class;\n@@ -2278,9 +2126,8 @@\n-        if (entry instanceof FieldReflector) {  \/\/ check common case first\n-            return (FieldReflector) entry;\n-        } else if (entry instanceof EntryFuture) {\n-            entry = ((EntryFuture) entry).get();\n-        } else if (entry == null) {\n-            try {\n-                entry = new FieldReflector(matchFields(fields, localDesc));\n-            } catch (Throwable th) {\n-                entry = th;\n+        var clReflectors = Caches.reflectors.get(cl);\n+        var key = new FieldReflectorKey(fields);\n+        var reflector = clReflectors.get(key);\n+        if (reflector == null) {\n+            reflector = new FieldReflector(matchFields(fields, localDesc));\n+            var oldReflector = clReflectors.putIfAbsent(key, reflector);\n+            if (oldReflector != null) {\n+                reflector = oldReflector;\n@@ -2288,14 +2135,0 @@\n-            future.set(entry);\n-            Caches.reflectors.put(key, new SoftReference<>(entry));\n-        }\n-\n-        if (entry instanceof FieldReflector) {\n-            return (FieldReflector) entry;\n-        } else if (entry instanceof InvalidClassException) {\n-            throw (InvalidClassException) entry;\n-        } else if (entry instanceof RuntimeException) {\n-            throw (RuntimeException) entry;\n-        } else if (entry instanceof Error) {\n-            throw (Error) entry;\n-        } else {\n-            throw new InternalError(\"unexpected entry: \" + entry);\n@@ -2303,0 +2136,1 @@\n+        return reflector;\n@@ -2307,1 +2141,1 @@\n-     * refer to the same class and equivalent field formats.\n+     * refer to equivalent field formats.\n@@ -2309,1 +2143,1 @@\n-    private static class FieldReflectorKey extends WeakReference<Class<?>> {\n+    private static class FieldReflectorKey {\n@@ -2313,1 +2147,0 @@\n-        private final boolean nullClass;\n@@ -2315,2 +2148,1 @@\n-        FieldReflectorKey(Class<?> cl, ObjectStreamField[] fields,\n-                          ReferenceQueue<Class<?>> queue)\n+        FieldReflectorKey(ObjectStreamField[] fields)\n@@ -2318,2 +2150,0 @@\n-            super(cl, queue);\n-            nullClass = (cl == null);\n@@ -2326,1 +2156,1 @@\n-            hash = System.identityHashCode(cl) + Arrays.hashCode(sigs);\n+            hash = Arrays.hashCode(sigs);\n@@ -2334,13 +2164,3 @@\n-            if (obj == this) {\n-                return true;\n-            }\n-\n-            if (obj instanceof FieldReflectorKey other) {\n-                Class<?> referent;\n-                return (nullClass ? other.nullClass\n-                                  : ((referent = get()) != null) &&\n-                                    (other.refersTo(referent))) &&\n-                        Arrays.equals(sigs, other.sigs);\n-            } else {\n-                return false;\n-            }\n+            return obj == this ||\n+                   obj instanceof FieldReflectorKey other &&\n+                   Arrays.equals(sigs, other.sigs);\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectStreamClass.java","additions":32,"deletions":212,"binary":false,"changes":244,"status":"modified"},{"patch":"@@ -312,1 +312,1 @@\n-        return length;\n+        return current - offset + length;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jimage\/ImageStringsReader.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-      * Is sharing enabled via the UseSharedSpaces flag.\n+      * Is sharing enabled.\n@@ -235,2 +235,0 @@\n-         \"-XX:+DumpSharedSpaces\",\n-         \"-XX:+DynamicDumpSharedSpaces\",\n@@ -241,3 +239,1 @@\n-         \"-XX:ArchiveClassesAtExit=\",\n-         \"-XX:+UseSharedSpaces\",\n-         \"-XX:+RequireSharedSpaces\"};\n+         \"-XX:ArchiveClassesAtExit=\"};\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/CDS.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -225,1 +225,1 @@\n-        if (checkClassVersion && readShort(classFileOffset + 6) > Opcodes.V18) {\n+        if (checkClassVersion && readShort(classFileOffset + 6) > Opcodes.V19) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/ClassReader.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -317,0 +317,1 @@\n+    int V19 = 0 << 16 | 63;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/Opcodes.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -117,0 +117,4 @@\n+    \/\/ Various broadcasting modes.\n+    public static final int MODE_BROADCAST = 0;\n+    public static final int MODE_BITS_COERCED_LONG_TO_MASK = 1;\n+\n@@ -160,3 +164,3 @@\n-    public interface BroadcastOperation<VM extends VectorPayload,\n-                                        S extends VectorSpecies<?>> {\n-        VM broadcast(long l, S s);\n+    public interface FromBitsCoercedOperation<VM extends VectorPayload,\n+                                              S extends VectorSpecies<?>> {\n+        VM fromBits(long l, S s);\n@@ -170,4 +174,4 @@\n-    VM broadcastCoerced(Class<? extends VM> vmClass, Class<E> eClass,\n-                        int length,\n-                        long bits, S s,\n-                        BroadcastOperation<VM, S> defaultImpl) {\n+    VM fromBitsCoerced(Class<? extends VM> vmClass, Class<E> eClass,\n+                       int length,\n+                       long bits, int mode, S s,\n+                       FromBitsCoercedOperation<VM, S> defaultImpl) {\n@@ -175,1 +179,1 @@\n-        return defaultImpl.broadcast(bits, s);\n+        return defaultImpl.fromBits(bits, s);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/vector\/VectorSupport.java","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-.TH \"JAVA\" \"1\" \"2022\" \"JDK 18\" \"JDK Commands\"\n+.TH \"JAVA\" \"1\" \"2022\" \"JDK 19\\-ea\" \"JDK Commands\"\n@@ -184,1 +184,1 @@\n-(\\f[CB]18\\f[R]) and a limited number of previous releases, detailed in the\n+(\\f[CB]19\\f[R]) and a limited number of previous releases, detailed in the\n","filename":"src\/java.base\/share\/man\/java.1","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-.TH \"KEYTOOL\" \"1\" \"2022\" \"JDK 18\" \"JDK Commands\"\n+.TH \"KEYTOOL\" \"1\" \"2022\" \"JDK 19\\-ea\" \"JDK Commands\"\n","filename":"src\/java.base\/share\/man\/keytool.1","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -255,1 +255,9 @@\n-    RELEASE_18;\n+    RELEASE_18,\n+\n+    \/**\n+     * The version recognized by the Java Platform, Standard Edition\n+     * 19.\n+     *\n+     * @since 19\n+     *\/\n+    RELEASE_19;\n@@ -264,1 +272,1 @@\n-        return RELEASE_18;\n+        return RELEASE_19;\n@@ -279,1 +287,1 @@\n-            valueOf(\"RELEASE_\" + Math.min(18, intVersion)):\n+            valueOf(\"RELEASE_\" + Math.min(19, intVersion)):\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/SourceVersion.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-@SupportedSourceVersion(RELEASE_18)\n+@SupportedSourceVersion(RELEASE_19)\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/AbstractAnnotationValueVisitor14.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-@SupportedSourceVersion(RELEASE_18)\n+@SupportedSourceVersion(RELEASE_19)\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/AbstractElementVisitor14.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -50,1 +50,1 @@\n-@SupportedSourceVersion(RELEASE_18)\n+@SupportedSourceVersion(RELEASE_19)\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/AbstractTypeVisitor14.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-@SupportedSourceVersion(RELEASE_18)\n+@SupportedSourceVersion(RELEASE_19)\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/ElementKindVisitor14.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-@SupportedSourceVersion(RELEASE_18)\n+@SupportedSourceVersion(RELEASE_19)\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/ElementScanner14.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-@SupportedSourceVersion(RELEASE_18)\n+@SupportedSourceVersion(RELEASE_19)\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/SimpleAnnotationValueVisitor14.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-@SupportedSourceVersion(RELEASE_18)\n+@SupportedSourceVersion(RELEASE_19)\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/SimpleElementVisitor14.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n-@SupportedSourceVersion(RELEASE_18)\n+@SupportedSourceVersion(RELEASE_19)\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/SimpleTypeVisitor14.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-@SupportedSourceVersion(RELEASE_18)\n+@SupportedSourceVersion(RELEASE_19)\n","filename":"src\/java.compiler\/share\/classes\/javax\/lang\/model\/util\/TypeKindVisitor14.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-.TH \"RMIREGISTRY\" \"1\" \"2022\" \"JDK 18\" \"JDK Commands\"\n+.TH \"RMIREGISTRY\" \"1\" \"2022\" \"JDK 19\\-ea\" \"JDK Commands\"\n","filename":"src\/java.rmi\/share\/man\/rmiregistry.1","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-.TH \"JRUNSCRIPT\" \"1\" \"2022\" \"JDK 18\" \"JDK Commands\"\n+.TH \"JRUNSCRIPT\" \"1\" \"2022\" \"JDK 19\\-ea\" \"JDK Commands\"\n","filename":"src\/java.scripting\/share\/man\/jrunscript.1","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -120,1 +120,6 @@\n-    JDK18(\"18\");\n+    JDK18(\"18\"),\n+\n+    \/**\n+      * 19, tbd\n+      *\/\n+    JDK19(\"19\");\n@@ -172,0 +177,1 @@\n+        case JDK19  -> Target.JDK1_19;\n@@ -316,0 +322,1 @@\n+        case JDK19  -> RELEASE_19;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Source.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2281,0 +2281,5 @@\n+        @Override\n+        public Name name() {\n+            return name;\n+        }\n+\n@@ -2319,0 +2324,5 @@\n+        @Override\n+        public Name name() {\n+            return name;\n+        }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symbol.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -181,7 +181,0 @@\n-        @Override @DefinedBy(Api.COMPILER)\n-        public URI toUri() {\n-            \/\/ Work around bug JDK-8134451:\n-            \/\/ path.toUri() returns double-encoded URIs, that cannot be opened by URLConnection\n-            return createJarUri(userJarPath, path.toString());\n-        }\n-\n@@ -200,11 +193,0 @@\n-\n-        private static URI createJarUri(Path jarFile, String entryName) {\n-            URI jarURI = jarFile.toUri().normalize();\n-            String separator = entryName.startsWith(\"\/\") ? \"!\" : \"!\/\";\n-            try {\n-                \/\/ The jar URI convention appears to be not to re-encode the jarURI\n-                return new URI(\"jar:\" + jarURI + separator + entryName);\n-            } catch (URISyntaxException e) {\n-                throw new CannotCreateUriError(jarURI + separator + entryName, e);\n-            }\n-        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/file\/PathFileObject.java","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -122,1 +122,2 @@\n-        V62(62, 0);   \/\/ JDK 18\n+        V62(62, 0),   \/\/ JDK 18\n+        V63(63, 0);   \/\/ JDK 19\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassFile.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -137,0 +137,5 @@\n+        \/**\n+         * The dynamic constant's name.\n+         *\/\n+        Name name();\n+\n@@ -153,1 +158,1 @@\n-            return new Pair<>(bsmKey(types), dynamicType().poolKey(types));\n+            return new PoolKey(name(), bsmKey(types), dynamicType().poolKey(types));\n@@ -195,0 +200,2 @@\n+\n+        record PoolKey(Name name, BsmKey bsmKey, Object dynamicType) {}\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/PoolConstant.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -91,1 +91,4 @@\n-    JDK1_18(\"18\", 62, 0);\n+    JDK1_18(\"18\", 62, 0),\n+\n+    \/** JDK 19. *\/\n+    JDK1_19(\"19\", 63, 0);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Target.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-@SupportedSourceVersion(SourceVersion.RELEASE_18)\n+@SupportedSourceVersion(SourceVersion.RELEASE_19)\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/processing\/PrintingProcessor.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-.TH \"JAVAC\" \"1\" \"2022\" \"JDK 18\" \"JDK Commands\"\n+.TH \"JAVAC\" \"1\" \"2022\" \"JDK 19\\-ea\" \"JDK Commands\"\n","filename":"src\/jdk.compiler\/share\/man\/javac.1","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-.TH \"SERIALVER\" \"1\" \"2022\" \"JDK 18\" \"JDK Commands\"\n+.TH \"SERIALVER\" \"1\" \"2022\" \"JDK 19\\-ea\" \"JDK Commands\"\n","filename":"src\/jdk.compiler\/share\/man\/serialver.1","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -946,3 +946,7 @@\n-      Flag flag = getCommandLineFlag(\"UseSharedSpaces\");\n-      sharingEnabled = (flag == null)? Boolean.FALSE :\n-          (flag.getBool()? Boolean.TRUE: Boolean.FALSE);\n+        Address address = VM.getVM().getDebugger().lookup(null, \"UseSharedSpaces\");\n+        if (address == null && getOS().equals(\"win32\")) {\n+            \/\/ On Win32 symbols are prefixed with the dll name. So look for\n+            \/\/ UseSharedSpaces as a symbol in jvm.dll.\n+            address = VM.getVM().getDebugger().lookup(null, \"jvm!UseSharedSpaces\");\n+        }\n+        sharingEnabled = address.getJBooleanAt(0);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/runtime\/VM.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-.TH \"JHSDB\" \"1\" \"2022\" \"JDK 18\" \"JDK Commands\"\n+.TH \"JHSDB\" \"1\" \"2022\" \"JDK 19\\-ea\" \"JDK Commands\"\n","filename":"src\/jdk.hotspot.agent\/share\/man\/jhsdb.1","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -303,1 +303,1 @@\n-        print_debug(\"can't lookup 'UseSharedSpaces' flag\\n\");\n+        print_debug(\"can't lookup 'UseSharedSpaces' symbol\\n\");\n@@ -311,1 +311,1 @@\n-        print_debug(\"can't read the value of 'UseSharedSpaces' flag\\n\");\n+        print_debug(\"can't read the value of 'UseSharedSpaces' symbol\\n\");\n","filename":"src\/jdk.hotspot.agent\/share\/native\/libsaproc\/ps_core_common.c","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-.TH \"JWEBSERVER\" \"1\" \"2022\" \"JDK 18\" \"JDK Commands\"\n+.TH \"JWEBSERVER\" \"1\" \"2022\" \"JDK 19\\-ea\" \"JDK Commands\"\n","filename":"src\/jdk.httpserver\/share\/man\/jwebserver.1","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -760,3 +760,3 @@\n-            return VectorSupport.broadcastCoerced(Byte128Mask.class, byte.class, VLENGTH,\n-                                                  (bit ? -1 : 0), null,\n-                                                  (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n+            return VectorSupport.fromBitsCoerced(Byte128Mask.class, byte.class, VLENGTH,\n+                                                 (bit ? -1 : 0), MODE_BROADCAST, null,\n+                                                 (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte128Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -792,3 +792,3 @@\n-            return VectorSupport.broadcastCoerced(Byte256Mask.class, byte.class, VLENGTH,\n-                                                  (bit ? -1 : 0), null,\n-                                                  (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n+            return VectorSupport.fromBitsCoerced(Byte256Mask.class, byte.class, VLENGTH,\n+                                                 (bit ? -1 : 0), MODE_BROADCAST, null,\n+                                                 (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte256Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -856,3 +856,3 @@\n-            return VectorSupport.broadcastCoerced(Byte512Mask.class, byte.class, VLENGTH,\n-                                                  (bit ? -1 : 0), null,\n-                                                  (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n+            return VectorSupport.fromBitsCoerced(Byte512Mask.class, byte.class, VLENGTH,\n+                                                 (bit ? -1 : 0), MODE_BROADCAST, null,\n+                                                 (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte512Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -744,3 +744,3 @@\n-            return VectorSupport.broadcastCoerced(Byte64Mask.class, byte.class, VLENGTH,\n-                                                  (bit ? -1 : 0), null,\n-                                                  (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n+            return VectorSupport.fromBitsCoerced(Byte64Mask.class, byte.class, VLENGTH,\n+                                                 (bit ? -1 : 0), MODE_BROADCAST, null,\n+                                                 (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Byte64Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -730,3 +730,3 @@\n-            return VectorSupport.broadcastCoerced(ByteMaxMask.class, byte.class, VLENGTH,\n-                                                  (bit ? -1 : 0), null,\n-                                                  (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n+            return VectorSupport.fromBitsCoerced(ByteMaxMask.class, byte.class, VLENGTH,\n+                                                 (bit ? -1 : 0), MODE_BROADCAST, null,\n+                                                 (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteMaxVector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -458,2 +458,2 @@\n-        return VectorSupport.broadcastCoerced(vsp.vectorType(), byte.class, species.length(),\n-                                0, vsp,\n+        return VectorSupport.fromBitsCoerced(vsp.vectorType(), byte.class, species.length(),\n+                                0, MODE_BROADCAST, vsp,\n@@ -4152,1 +4152,1 @@\n-                VectorSupport.broadcastCoerced(\n+                VectorSupport.fromBitsCoerced(\n@@ -4154,1 +4154,1 @@\n-                    bits, this,\n+                    bits, MODE_BROADCAST, this,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ByteVector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -721,3 +721,3 @@\n-            return VectorSupport.broadcastCoerced(Double128Mask.class, long.class, VLENGTH,\n-                                                  (bit ? -1 : 0), null,\n-                                                  (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n+            return VectorSupport.fromBitsCoerced(Double128Mask.class, long.class, VLENGTH,\n+                                                 (bit ? -1 : 0), MODE_BROADCAST, null,\n+                                                 (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double128Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -725,3 +725,3 @@\n-            return VectorSupport.broadcastCoerced(Double256Mask.class, long.class, VLENGTH,\n-                                                  (bit ? -1 : 0), null,\n-                                                  (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n+            return VectorSupport.fromBitsCoerced(Double256Mask.class, long.class, VLENGTH,\n+                                                 (bit ? -1 : 0), MODE_BROADCAST, null,\n+                                                 (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double256Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -733,3 +733,3 @@\n-            return VectorSupport.broadcastCoerced(Double512Mask.class, long.class, VLENGTH,\n-                                                  (bit ? -1 : 0), null,\n-                                                  (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n+            return VectorSupport.fromBitsCoerced(Double512Mask.class, long.class, VLENGTH,\n+                                                 (bit ? -1 : 0), MODE_BROADCAST, null,\n+                                                 (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double512Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -719,3 +719,3 @@\n-            return VectorSupport.broadcastCoerced(Double64Mask.class, long.class, VLENGTH,\n-                                                  (bit ? -1 : 0), null,\n-                                                  (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n+            return VectorSupport.fromBitsCoerced(Double64Mask.class, long.class, VLENGTH,\n+                                                 (bit ? -1 : 0), MODE_BROADCAST, null,\n+                                                 (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Double64Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -718,3 +718,3 @@\n-            return VectorSupport.broadcastCoerced(DoubleMaxMask.class, long.class, VLENGTH,\n-                                                  (bit ? -1 : 0), null,\n-                                                  (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n+            return VectorSupport.fromBitsCoerced(DoubleMaxMask.class, long.class, VLENGTH,\n+                                                 (bit ? -1 : 0), MODE_BROADCAST, null,\n+                                                 (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleMaxVector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -447,2 +447,2 @@\n-        return VectorSupport.broadcastCoerced(vsp.vectorType(), double.class, species.length(),\n-                        toBits(0.0f), vsp,\n+        return VectorSupport.fromBitsCoerced(vsp.vectorType(), double.class, species.length(),\n+                        toBits(0.0f), MODE_BROADCAST, vsp,\n@@ -3757,1 +3757,1 @@\n-                VectorSupport.broadcastCoerced(\n+                VectorSupport.fromBitsCoerced(\n@@ -3759,1 +3759,1 @@\n-                    bits, this,\n+                    bits, MODE_BROADCAST, this,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/DoubleVector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -725,3 +725,3 @@\n-            return VectorSupport.broadcastCoerced(Float128Mask.class, int.class, VLENGTH,\n-                                                  (bit ? -1 : 0), null,\n-                                                  (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n+            return VectorSupport.fromBitsCoerced(Float128Mask.class, int.class, VLENGTH,\n+                                                 (bit ? -1 : 0), MODE_BROADCAST, null,\n+                                                 (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float128Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -733,3 +733,3 @@\n-            return VectorSupport.broadcastCoerced(Float256Mask.class, int.class, VLENGTH,\n-                                                  (bit ? -1 : 0), null,\n-                                                  (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n+            return VectorSupport.fromBitsCoerced(Float256Mask.class, int.class, VLENGTH,\n+                                                 (bit ? -1 : 0), MODE_BROADCAST, null,\n+                                                 (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float256Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -749,3 +749,3 @@\n-            return VectorSupport.broadcastCoerced(Float512Mask.class, int.class, VLENGTH,\n-                                                  (bit ? -1 : 0), null,\n-                                                  (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n+            return VectorSupport.fromBitsCoerced(Float512Mask.class, int.class, VLENGTH,\n+                                                 (bit ? -1 : 0), MODE_BROADCAST, null,\n+                                                 (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float512Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -721,3 +721,3 @@\n-            return VectorSupport.broadcastCoerced(Float64Mask.class, int.class, VLENGTH,\n-                                                  (bit ? -1 : 0), null,\n-                                                  (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n+            return VectorSupport.fromBitsCoerced(Float64Mask.class, int.class, VLENGTH,\n+                                                 (bit ? -1 : 0), MODE_BROADCAST, null,\n+                                                 (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float64Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -718,3 +718,3 @@\n-            return VectorSupport.broadcastCoerced(FloatMaxMask.class, int.class, VLENGTH,\n-                                                  (bit ? -1 : 0), null,\n-                                                  (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n+            return VectorSupport.fromBitsCoerced(FloatMaxMask.class, int.class, VLENGTH,\n+                                                 (bit ? -1 : 0), MODE_BROADCAST, null,\n+                                                 (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatMaxVector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -447,2 +447,2 @@\n-        return VectorSupport.broadcastCoerced(vsp.vectorType(), float.class, species.length(),\n-                        toBits(0.0f), vsp,\n+        return VectorSupport.fromBitsCoerced(vsp.vectorType(), float.class, species.length(),\n+                        toBits(0.0f), MODE_BROADCAST, vsp,\n@@ -3707,1 +3707,1 @@\n-                VectorSupport.broadcastCoerced(\n+                VectorSupport.fromBitsCoerced(\n@@ -3709,1 +3709,1 @@\n-                    bits, this,\n+                    bits, MODE_BROADCAST, this,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/FloatVector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -736,3 +736,3 @@\n-            return VectorSupport.broadcastCoerced(Int128Mask.class, int.class, VLENGTH,\n-                                                  (bit ? -1 : 0), null,\n-                                                  (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n+            return VectorSupport.fromBitsCoerced(Int128Mask.class, int.class, VLENGTH,\n+                                                 (bit ? -1 : 0), MODE_BROADCAST, null,\n+                                                 (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int128Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -744,3 +744,3 @@\n-            return VectorSupport.broadcastCoerced(Int256Mask.class, int.class, VLENGTH,\n-                                                  (bit ? -1 : 0), null,\n-                                                  (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n+            return VectorSupport.fromBitsCoerced(Int256Mask.class, int.class, VLENGTH,\n+                                                 (bit ? -1 : 0), MODE_BROADCAST, null,\n+                                                 (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int256Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -760,3 +760,3 @@\n-            return VectorSupport.broadcastCoerced(Int512Mask.class, int.class, VLENGTH,\n-                                                  (bit ? -1 : 0), null,\n-                                                  (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n+            return VectorSupport.fromBitsCoerced(Int512Mask.class, int.class, VLENGTH,\n+                                                 (bit ? -1 : 0), MODE_BROADCAST, null,\n+                                                 (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int512Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -732,3 +732,3 @@\n-            return VectorSupport.broadcastCoerced(Int64Mask.class, int.class, VLENGTH,\n-                                                  (bit ? -1 : 0), null,\n-                                                  (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n+            return VectorSupport.fromBitsCoerced(Int64Mask.class, int.class, VLENGTH,\n+                                                 (bit ? -1 : 0), MODE_BROADCAST, null,\n+                                                 (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Int64Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -730,3 +730,3 @@\n-            return VectorSupport.broadcastCoerced(IntMaxMask.class, int.class, VLENGTH,\n-                                                  (bit ? -1 : 0), null,\n-                                                  (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n+            return VectorSupport.fromBitsCoerced(IntMaxMask.class, int.class, VLENGTH,\n+                                                 (bit ? -1 : 0), MODE_BROADCAST, null,\n+                                                 (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntMaxVector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -458,2 +458,2 @@\n-        return VectorSupport.broadcastCoerced(vsp.vectorType(), int.class, species.length(),\n-                                0, vsp,\n+        return VectorSupport.fromBitsCoerced(vsp.vectorType(), int.class, species.length(),\n+                                0, MODE_BROADCAST, vsp,\n@@ -3877,1 +3877,1 @@\n-                VectorSupport.broadcastCoerced(\n+                VectorSupport.fromBitsCoerced(\n@@ -3879,1 +3879,1 @@\n-                    bits, this,\n+                    bits, MODE_BROADCAST, this,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/IntVector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -722,3 +722,3 @@\n-            return VectorSupport.broadcastCoerced(Long128Mask.class, long.class, VLENGTH,\n-                                                  (bit ? -1 : 0), null,\n-                                                  (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n+            return VectorSupport.fromBitsCoerced(Long128Mask.class, long.class, VLENGTH,\n+                                                 (bit ? -1 : 0), MODE_BROADCAST, null,\n+                                                 (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long128Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -726,3 +726,3 @@\n-            return VectorSupport.broadcastCoerced(Long256Mask.class, long.class, VLENGTH,\n-                                                  (bit ? -1 : 0), null,\n-                                                  (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n+            return VectorSupport.fromBitsCoerced(Long256Mask.class, long.class, VLENGTH,\n+                                                 (bit ? -1 : 0), MODE_BROADCAST, null,\n+                                                 (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long256Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -734,3 +734,3 @@\n-            return VectorSupport.broadcastCoerced(Long512Mask.class, long.class, VLENGTH,\n-                                                  (bit ? -1 : 0), null,\n-                                                  (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n+            return VectorSupport.fromBitsCoerced(Long512Mask.class, long.class, VLENGTH,\n+                                                 (bit ? -1 : 0), MODE_BROADCAST, null,\n+                                                 (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long512Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -720,3 +720,3 @@\n-            return VectorSupport.broadcastCoerced(Long64Mask.class, long.class, VLENGTH,\n-                                                  (bit ? -1 : 0), null,\n-                                                  (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n+            return VectorSupport.fromBitsCoerced(Long64Mask.class, long.class, VLENGTH,\n+                                                 (bit ? -1 : 0), MODE_BROADCAST, null,\n+                                                 (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Long64Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -720,3 +720,3 @@\n-            return VectorSupport.broadcastCoerced(LongMaxMask.class, long.class, VLENGTH,\n-                                                  (bit ? -1 : 0), null,\n-                                                  (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n+            return VectorSupport.fromBitsCoerced(LongMaxMask.class, long.class, VLENGTH,\n+                                                 (bit ? -1 : 0), MODE_BROADCAST, null,\n+                                                 (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongMaxVector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -458,2 +458,2 @@\n-        return VectorSupport.broadcastCoerced(vsp.vectorType(), long.class, species.length(),\n-                                0, vsp,\n+        return VectorSupport.fromBitsCoerced(vsp.vectorType(), long.class, species.length(),\n+                                0, MODE_BROADCAST, vsp,\n@@ -3812,1 +3812,1 @@\n-                VectorSupport.broadcastCoerced(\n+                VectorSupport.fromBitsCoerced(\n@@ -3814,1 +3814,1 @@\n-                    bits, this,\n+                    bits, MODE_BROADCAST, this,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/LongVector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -744,3 +744,3 @@\n-            return VectorSupport.broadcastCoerced(Short128Mask.class, short.class, VLENGTH,\n-                                                  (bit ? -1 : 0), null,\n-                                                  (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n+            return VectorSupport.fromBitsCoerced(Short128Mask.class, short.class, VLENGTH,\n+                                                 (bit ? -1 : 0), MODE_BROADCAST, null,\n+                                                 (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short128Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -760,3 +760,3 @@\n-            return VectorSupport.broadcastCoerced(Short256Mask.class, short.class, VLENGTH,\n-                                                  (bit ? -1 : 0), null,\n-                                                  (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n+            return VectorSupport.fromBitsCoerced(Short256Mask.class, short.class, VLENGTH,\n+                                                 (bit ? -1 : 0), MODE_BROADCAST, null,\n+                                                 (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short256Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -792,3 +792,3 @@\n-            return VectorSupport.broadcastCoerced(Short512Mask.class, short.class, VLENGTH,\n-                                                  (bit ? -1 : 0), null,\n-                                                  (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n+            return VectorSupport.fromBitsCoerced(Short512Mask.class, short.class, VLENGTH,\n+                                                 (bit ? -1 : 0), MODE_BROADCAST, null,\n+                                                 (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short512Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -736,3 +736,3 @@\n-            return VectorSupport.broadcastCoerced(Short64Mask.class, short.class, VLENGTH,\n-                                                  (bit ? -1 : 0), null,\n-                                                  (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n+            return VectorSupport.fromBitsCoerced(Short64Mask.class, short.class, VLENGTH,\n+                                                 (bit ? -1 : 0), MODE_BROADCAST, null,\n+                                                 (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Short64Vector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -730,3 +730,3 @@\n-            return VectorSupport.broadcastCoerced(ShortMaxMask.class, short.class, VLENGTH,\n-                                                  (bit ? -1 : 0), null,\n-                                                  (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n+            return VectorSupport.fromBitsCoerced(ShortMaxMask.class, short.class, VLENGTH,\n+                                                 (bit ? -1 : 0), MODE_BROADCAST, null,\n+                                                 (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortMaxVector.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -458,2 +458,2 @@\n-        return VectorSupport.broadcastCoerced(vsp.vectorType(), short.class, species.length(),\n-                                0, vsp,\n+        return VectorSupport.fromBitsCoerced(vsp.vectorType(), short.class, species.length(),\n+                                0, MODE_BROADCAST, vsp,\n@@ -4146,1 +4146,1 @@\n-                VectorSupport.broadcastCoerced(\n+                VectorSupport.fromBitsCoerced(\n@@ -4148,1 +4148,1 @@\n-                    bits, this,\n+                    bits, MODE_BROADCAST, this,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/ShortVector.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -240,20 +240,19 @@\n-        AbstractSpecies<E> vspecies = (AbstractSpecies<E>) species;\n-        int laneCount = vspecies.laneCount();\n-        if (laneCount < Long.SIZE) {\n-            int extraSignBits = Long.SIZE - laneCount;\n-            bits <<= extraSignBits;\n-            bits >>= extraSignBits;\n-        }\n-        if (bits == (bits >> 1)) {\n-            \/\/ Special case.\n-            assert(bits == 0 || bits == -1);\n-            return vspecies.maskAll(bits != 0);\n-        }\n-        \/\/ FIXME: Intrinsify this.\n-        long shifted = bits;\n-        boolean[] a = new boolean[laneCount];\n-        for (int i = 0; i < a.length; i++) {\n-            a[i] = ((shifted & 1) != 0);\n-            shifted >>= 1;  \/\/ replicate sign bit\n-        }\n-        return fromValues(vspecies, a);\n+        AbstractSpecies<E> vsp = (AbstractSpecies<E>) species;\n+        bits = bits & (0xFFFFFFFFFFFFFFFFL >>> (64 - vsp.laneCount()));\n+        return VectorSupport.fromBitsCoerced(vsp.maskType(), vsp.elementType(), vsp.laneCount(), bits,\n+                                             VectorSupport.MODE_BITS_COERCED_LONG_TO_MASK, vsp,\n+                                             (m, s) -> {\n+                                                 if (m == (m >> 1)) {\n+                                                     \/\/ Special case.\n+                                                     assert(m == 0 || m == -1);\n+                                                     return s.maskAll(m != 0);\n+                                                 }\n+\n+                                                 long shifted = m;\n+                                                 boolean[] a = new boolean[s.laneCount()];\n+                                                 for (int i = 0; i < a.length; i++) {\n+                                                     a[i] = ((shifted & 1) != 0);\n+                                                     shifted >>= 1;  \/\/ replicate sign bit\n+                                                 }\n+                                                 return fromValues(s, a);\n+                                              });\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/VectorMask.java","additions":19,"deletions":20,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -473,2 +473,2 @@\n-        return VectorSupport.broadcastCoerced(vsp.vectorType(), $type$.class, species.length(),\n-                        toBits(0.0f), vsp,\n+        return VectorSupport.fromBitsCoerced(vsp.vectorType(), $type$.class, species.length(),\n+                        toBits(0.0f), MODE_BROADCAST, vsp,\n@@ -477,2 +477,2 @@\n-        return VectorSupport.broadcastCoerced(vsp.vectorType(), $type$.class, species.length(),\n-                                0, vsp,\n+        return VectorSupport.fromBitsCoerced(vsp.vectorType(), $type$.class, species.length(),\n+                                0, MODE_BROADCAST, vsp,\n@@ -5330,1 +5330,1 @@\n-                VectorSupport.broadcastCoerced(\n+                VectorSupport.fromBitsCoerced(\n@@ -5332,1 +5332,1 @@\n-                    bits, this,\n+                    bits, MODE_BROADCAST, this,\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-Vector.java.template","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1003,3 +1003,3 @@\n-            return VectorSupport.broadcastCoerced($masktype$.class, $bitstype$.class, VLENGTH,\n-                                                  (bit ? -1 : 0), null,\n-                                                  (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n+            return VectorSupport.fromBitsCoerced($masktype$.class, $bitstype$.class, VLENGTH,\n+                                                 (bit ? -1 : 0), MODE_BROADCAST, null,\n+                                                 (v, __) -> (v != 0 ? TRUE_MASK : FALSE_MASK));\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/X-VectorBits.java.template","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -37,0 +37,5 @@\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeParseException;\n@@ -43,0 +48,4 @@\n+    \/\/ Valid --date range\n+    static final ZonedDateTime DATE_MIN = ZonedDateTime.parse(\"1980-01-01T00:00:02Z\");\n+    static final ZonedDateTime DATE_MAX = ZonedDateTime.parse(\"2099-12-31T23:59:59Z\");\n+\n@@ -191,0 +200,14 @@\n+            new Option(true, OptionType.CREATE_UPDATE_INDEX, \"--date\") {\n+                void process(Main jartool, String opt, String arg) throws BadArgs {\n+                    try {\n+                        ZonedDateTime date = ZonedDateTime.parse(arg, DateTimeFormatter.ISO_ZONED_DATE_TIME)\n+                                                             .withZoneSameInstant(ZoneOffset.UTC);\n+                        if (date.isBefore(DATE_MIN) || date.isAfter(DATE_MAX)) {\n+                            throw new BadArgs(\"error.date.out.of.range\", arg);\n+                        }\n+                        jartool.date = date.toLocalDateTime();\n+                    } catch (DateTimeParseException x) {\n+                        throw new BadArgs(\"error.date.notvalid\", arg);\n+                    }\n+                }\n+            },\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/GNUStyleOptions.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -63,0 +63,1 @@\n+import java.util.concurrent.TimeUnit;\n@@ -71,0 +72,2 @@\n+import java.time.LocalDateTime;\n+import java.time.ZoneOffset;\n@@ -177,0 +180,3 @@\n+    \/* Date option for entry timestamps resolved to UTC Local time *\/\n+    LocalDateTime date;\n+\n@@ -865,1 +871,1 @@\n-                e.setTime(System.currentTimeMillis());\n+                setZipEntryTime(e);\n@@ -870,1 +876,1 @@\n-                e.setTime(System.currentTimeMillis());\n+                setZipEntryTime(e);\n@@ -970,1 +976,1 @@\n-                    e2.setTime(e.getTime());\n+                    setZipEntryTime(e2, e.getTime());\n@@ -1036,1 +1042,1 @@\n-        e.setTime(System.currentTimeMillis());\n+        setZipEntryTime(e);\n@@ -1058,1 +1064,1 @@\n-                e.setLastModifiedTime(lastModified);\n+                setZipEntryTime(e, lastModified.toMillis());\n@@ -1060,1 +1066,1 @@\n-                e.setLastModifiedTime(FileTime.fromMillis(System.currentTimeMillis()));\n+                setZipEntryTime(e);\n@@ -1086,1 +1092,1 @@\n-        e.setTime(System.currentTimeMillis());\n+        setZipEntryTime(e);\n@@ -1207,1 +1213,1 @@\n-        e.setTime(file.lastModified());\n+        setZipEntryTime(e, file.lastModified());\n@@ -2321,0 +2327,14 @@\n+    \/\/ Set the ZipEntry dostime using date if specified otherwise the current time\n+    private void setZipEntryTime(ZipEntry e) {\n+        setZipEntryTime(e, System.currentTimeMillis());\n+    }\n+\n+    \/\/ Set the ZipEntry dostime using the date if specified\n+    \/\/ otherwise the original time\n+    private void setZipEntryTime(ZipEntry e, long origTime) {\n+        if (date != null) {\n+            e.setTimeLocal(date);\n+        } else {\n+            e.setTime(origTime);\n+        }\n+    }\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/Main.java","additions":28,"deletions":8,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 1999, 2018, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -85,0 +85,4 @@\n+error.date.notvalid=\\\n+        date {0} is not a valid ISO-8601 extended offset date-time with optional time-zone\n+error.date.out.of.range=\\\n+        date {0} is not within the valid range 1980-01-01T00:00:02Z to 2099-12-31T23:59:59Z\n@@ -293,0 +297,4 @@\n+main.help.opt.create.update.index.date=\\\n+\\      --date=TIMESTAMP       The timestamp in ISO-8601 extended offset date-time with\\n\\\n+\\                             optional time-zone format, to use for the timestamps of\\n\\\n+\\                             entries, e.g. \"2022-02-12T12:30:00-05:00\"\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/resources\/jar.properties","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-.TH \"JAR\" \"1\" \"2022\" \"JDK 18\" \"JDK Commands\"\n+.TH \"JAR\" \"1\" \"2022\" \"JDK 19\\-ea\" \"JDK Commands\"\n","filename":"src\/jdk.jartool\/share\/man\/jar.1","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-.TH \"JARSIGNER\" \"1\" \"2022\" \"JDK 18\" \"JDK Commands\"\n+.TH \"JARSIGNER\" \"1\" \"2022\" \"JDK 19\\-ea\" \"JDK Commands\"\n","filename":"src\/jdk.jartool\/share\/man\/jarsigner.1","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-.TH \"JAVADOC\" \"1\" \"2022\" \"JDK 18\" \"JDK Commands\"\n+.TH \"JAVADOC\" \"1\" \"2022\" \"JDK 19\\-ea\" \"JDK Commands\"\n","filename":"src\/jdk.javadoc\/share\/man\/javadoc.1","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-.TH \"JCMD\" \"1\" \"2022\" \"JDK 18\" \"JDK Commands\"\n+.TH \"JCMD\" \"1\" \"2022\" \"JDK 19\\-ea\" \"JDK Commands\"\n","filename":"src\/jdk.jcmd\/share\/man\/jcmd.1","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-.TH \"JINFO\" \"1\" \"2022\" \"JDK 18\" \"JDK Commands\"\n+.TH \"JINFO\" \"1\" \"2022\" \"JDK 19\\-ea\" \"JDK Commands\"\n","filename":"src\/jdk.jcmd\/share\/man\/jinfo.1","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-.TH \"JMAP\" \"1\" \"2022\" \"JDK 18\" \"JDK Commands\"\n+.TH \"JMAP\" \"1\" \"2022\" \"JDK 19\\-ea\" \"JDK Commands\"\n","filename":"src\/jdk.jcmd\/share\/man\/jmap.1","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-.TH \"JPS\" \"1\" \"2022\" \"JDK 18\" \"JDK Commands\"\n+.TH \"JPS\" \"1\" \"2022\" \"JDK 19\\-ea\" \"JDK Commands\"\n","filename":"src\/jdk.jcmd\/share\/man\/jps.1","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-.TH \"JSTACK\" \"1\" \"2022\" \"JDK 18\" \"JDK Commands\"\n+.TH \"JSTACK\" \"1\" \"2022\" \"JDK 19\\-ea\" \"JDK Commands\"\n","filename":"src\/jdk.jcmd\/share\/man\/jstack.1","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-.TH \"JSTAT\" \"1\" \"2022\" \"JDK 18\" \"JDK Commands\"\n+.TH \"JSTAT\" \"1\" \"2022\" \"JDK 19\\-ea\" \"JDK Commands\"\n","filename":"src\/jdk.jcmd\/share\/man\/jstat.1","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-.TH \"JCONSOLE\" \"1\" \"2022\" \"JDK 18\" \"JDK Commands\"\n+.TH \"JCONSOLE\" \"1\" \"2022\" \"JDK 19\\-ea\" \"JDK Commands\"\n","filename":"src\/jdk.jconsole\/share\/man\/jconsole.1","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-.TH \"JAVAP\" \"1\" \"2022\" \"JDK 18\" \"JDK Commands\"\n+.TH \"JAVAP\" \"1\" \"2022\" \"JDK 19\\-ea\" \"JDK Commands\"\n","filename":"src\/jdk.jdeps\/share\/man\/javap.1","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-.TH \"JDEPRSCAN\" \"1\" \"2022\" \"JDK 18\" \"JDK Commands\"\n+.TH \"JDEPRSCAN\" \"1\" \"2022\" \"JDK 19\\-ea\" \"JDK Commands\"\n","filename":"src\/jdk.jdeps\/share\/man\/jdeprscan.1","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-.TH \"JDEPS\" \"1\" \"2022\" \"JDK 18\" \"JDK Commands\"\n+.TH \"JDEPS\" \"1\" \"2022\" \"JDK 19\\-ea\" \"JDK Commands\"\n","filename":"src\/jdk.jdeps\/share\/man\/jdeps.1","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-.TH \"JDB\" \"1\" \"2022\" \"JDK 18\" \"JDK Commands\"\n+.TH \"JDB\" \"1\" \"2022\" \"JDK 19\\-ea\" \"JDK Commands\"\n","filename":"src\/jdk.jdi\/share\/man\/jdb.1","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-.TH \"JFR\" \"1\" \"2022\" \"JDK 18\" \"JDK Commands\"\n+.TH \"JFR\" \"1\" \"2022\" \"JDK 19\\-ea\" \"JDK Commands\"\n","filename":"src\/jdk.jfr\/share\/man\/jfr.1","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,0 +44,1 @@\n+import java.time.LocalDateTime;\n@@ -57,1 +58,1 @@\n-    static JmodOutputStream newOutputStream(Path file) throws IOException {\n+    static JmodOutputStream newOutputStream(Path file, LocalDateTime date) throws IOException {\n@@ -60,1 +61,1 @@\n-        return new JmodOutputStream(bos);\n+        return new JmodOutputStream(bos, date);\n@@ -64,1 +65,2 @@\n-    private JmodOutputStream(OutputStream out) {\n+    private final LocalDateTime date;\n+    private JmodOutputStream(OutputStream out, LocalDateTime date) {\n@@ -66,0 +68,1 @@\n+        this.date = date;\n@@ -107,1 +110,5 @@\n-        e2.setTime(e1.getTime());\n+        if (date != null) {\n+            e2.setTimeLocal(date);\n+        } else {\n+            e2.setTime(e1.getTime());\n+        }\n@@ -127,1 +134,5 @@\n-        return new ZipEntry(name);\n+        ZipEntry zipEntry = new ZipEntry(name);\n+        if (date != null) {\n+            zipEntry.setTimeLocal(date);\n+        }\n+        return zipEntry;\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jmod\/JmodOutputStream.java","additions":17,"deletions":6,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -65,0 +65,5 @@\n+import java.time.LocalDateTime;\n+import java.time.ZonedDateTime;\n+import java.time.ZoneOffset;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeParseException;\n@@ -163,0 +168,1 @@\n+        LocalDateTime date;\n@@ -165,0 +171,4 @@\n+    \/\/ Valid --date range\n+    static final ZonedDateTime DATE_MIN = ZonedDateTime.parse(\"1980-01-01T00:00:02Z\");\n+    static final ZonedDateTime DATE_MAX = ZonedDateTime.parse(\"2099-12-31T23:59:59Z\");\n+\n@@ -430,1 +440,1 @@\n-            try (JmodOutputStream jos = JmodOutputStream.newOutputStream(tempTarget)) {\n+            try (JmodOutputStream jos = JmodOutputStream.newOutputStream(tempTarget, options.date)) {\n@@ -987,1 +997,5 @@\n-                            ze.setTime(System.currentTimeMillis());\n+                            if (options.date != null) {\n+                                ze.setTimeLocal(options.date);\n+                            } else {\n+                                ze.setTime(System.currentTimeMillis());\n+                            }\n@@ -1015,1 +1029,1 @@\n-                 JmodOutputStream jos = JmodOutputStream.newOutputStream(tempTarget))\n+                 JmodOutputStream jos = JmodOutputStream.newOutputStream(tempTarget, options.date))\n@@ -1150,0 +1164,20 @@\n+    static class DateConverter implements ValueConverter<LocalDateTime> {\n+        @Override\n+        public LocalDateTime convert(String value) {\n+            try {\n+                ZonedDateTime date = ZonedDateTime.parse(value, DateTimeFormatter.ISO_ZONED_DATE_TIME)\n+                                                          .withZoneSameInstant(ZoneOffset.UTC);\n+                if (date.isBefore(DATE_MIN) || date.isAfter(DATE_MAX)) {\n+                    throw new CommandException(\"err.date.out.of.range\", value);\n+                }\n+                return date.toLocalDateTime();\n+            } catch (DateTimeParseException x) {\n+                throw new CommandException(\"err.invalid.date\", value, x.getMessage());\n+            }\n+        }\n+\n+        @Override public Class<LocalDateTime> valueType() { return LocalDateTime.class; }\n+\n+        @Override public String valuePattern() { return \"date\"; }\n+    }\n+\n@@ -1385,0 +1419,5 @@\n+        OptionSpec<LocalDateTime> date\n+                = parser.accepts(\"date\", getMessage(\"main.opt.date\"))\n+                        .withRequiredArg()\n+                        .withValuesConvertedBy(new DateConverter());\n+\n@@ -1428,0 +1467,2 @@\n+            if (opts.has(date))\n+                options.date = opts.valueOf(date);\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jmod\/JmodTask.java","additions":44,"deletions":3,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,0 +77,3 @@\n+main.opt.date=Date and time for the timestamps of entries, specified in ISO-8601\\\n+\\ extended offset date-time with optional time-zone format, e.g.\\\n+\\ \"2022-02-12T12:30:00-05:00\"\n@@ -109,0 +112,2 @@\n+err.invalid.date=--date {0} is not a valid ISO-8601 extended offset date-time with optional time-zone format: {1}\n+err.date.out.of.range=--date {0} is out of the valid range 1980-01-01T00:00:02Z to 2099-12-31T23:59:59Z\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jmod\/resources\/jmod.properties","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-.TH \"JLINK\" \"1\" \"2022\" \"JDK 18\" \"JDK Commands\"\n+.TH \"JLINK\" \"1\" \"2022\" \"JDK 19\\-ea\" \"JDK Commands\"\n","filename":"src\/jdk.jlink\/share\/man\/jlink.1","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-.TH \"JMOD\" \"1\" \"2022\" \"JDK 18\" \"JDK Commands\"\n+.TH \"JMOD\" \"1\" \"2022\" \"JDK 19\\-ea\" \"JDK Commands\"\n","filename":"src\/jdk.jlink\/share\/man\/jmod.1","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-.TH \"JPACKAGE\" \"1\" \"2022\" \"JDK 18\" \"JDK Commands\"\n+.TH \"JPACKAGE\" \"1\" \"2022\" \"JDK 19\\-ea\" \"JDK Commands\"\n","filename":"src\/jdk.jpackage\/share\/man\/jpackage.1","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-.TH \"JSHELL\" \"1\" \"2022\" \"JDK 18\" \"JDK Commands\"\n+.TH \"JSHELL\" \"1\" \"2022\" \"JDK 19\\-ea\" \"JDK Commands\"\n","filename":"src\/jdk.jshell\/share\/man\/jshell.1","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -24,1 +24,1 @@\n-.TH \"JSTATD\" \"1\" \"2022\" \"JDK 18\" \"JDK Commands\"\n+.TH \"JSTATD\" \"1\" \"2022\" \"JDK 19\\-ea\" \"JDK Commands\"\n","filename":"src\/jdk.jstatd\/share\/man\/jstatd.1","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1474,0 +1474,7 @@\n+    \/**\n+     * Package-private accessor to entry alias map used by ZipPath.\n+     *\/\n+    byte[] lookupPath(byte[] resolvedPath) {\n+        return entryLookup.apply(resolvedPath);\n+    }\n+\n","filename":"src\/jdk.zipfs\/share\/classes\/jdk\/nio\/zipfs\/ZipFileSystem.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -203,1 +203,1 @@\n-                           zfs.getString(toAbsolutePath().path),\n+                           getRealPath(),\n@@ -210,0 +210,6 @@\n+    private String getRealPath() {\n+        byte[] resolvedPath = getResolvedPath();\n+        byte[] realPath = zfs.lookupPath(resolvedPath);\n+        return zfs.getString(realPath != null ? realPath : resolvedPath);\n+    }\n+\n","filename":"src\/jdk.zipfs\/share\/classes\/jdk\/nio\/zipfs\/ZipPath.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -77,0 +77,2 @@\n+compiler\/vectorapi\/reshape\/TestVectorCastAVX512.java 8278623 generic-x64\n+\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -144,0 +144,8 @@\n+    public static final String VECTOR_CAST_B2X = START + \"VectorCastB2X\" + MID + END;\n+    public static final String VECTOR_CAST_S2X = START + \"VectorCastS2X\" + MID + END;\n+    public static final String VECTOR_CAST_I2X = START + \"VectorCastI2X\" + MID + END;\n+    public static final String VECTOR_CAST_L2X = START + \"VectorCastL2X\" + MID + END;\n+    public static final String VECTOR_CAST_F2X = START + \"VectorCastF2X\" + MID + END;\n+    public static final String VECTOR_CAST_D2X = START + \"VectorCastD2X\" + MID + END;\n+    public static final String VECTOR_REINTERPRET = START + \"VectorReinterpret\" + MID + END;\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.vectorapi.reshape;\n+\n+import compiler.vectorapi.reshape.tests.TestVectorCast;\n+import compiler.vectorapi.reshape.utils.TestCastMethods;\n+import compiler.vectorapi.reshape.utils.VectorReshapeHelper;\n+\n+\/*\n+ * @test\n+ * @bug 8259610\n+ * @modules jdk.incubator.vector\n+ * @modules java.base\/jdk.internal.misc\n+ * @summary Test that vector cast intrinsics work as intended on avx1.\n+ * @requires vm.cpu.features ~= \".*avx.*\"\n+ * @library \/test\/lib \/\n+ * @run driver compiler.vectorapi.reshape.TestVectorCastAVX1\n+ *\/\n+public class TestVectorCastAVX1 {\n+    public static void main(String[] args) {\n+        VectorReshapeHelper.runMainHelper(\n+                TestVectorCast.class,\n+                TestCastMethods.AVX1_CAST_TESTS.stream(),\n+                \"-XX:UseAVX=1\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/reshape\/TestVectorCastAVX1.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.vectorapi.reshape;\n+\n+import compiler.vectorapi.reshape.tests.TestVectorCast;\n+import compiler.vectorapi.reshape.utils.TestCastMethods;\n+import compiler.vectorapi.reshape.utils.VectorReshapeHelper;\n+\n+\/*\n+ * @test\n+ * @bug 8259610\n+ * @modules jdk.incubator.vector\n+ * @modules java.base\/jdk.internal.misc\n+ * @summary Test that vector cast intrinsics work as intended on avx2.\n+ * @requires vm.cpu.features ~= \".*avx2.*\"\n+ * @library \/test\/lib \/\n+ * @run driver compiler.vectorapi.reshape.TestVectorCastAVX2\n+ *\/\n+public class TestVectorCastAVX2 {\n+    public static void main(String[] args) {\n+        VectorReshapeHelper.runMainHelper(\n+                TestVectorCast.class,\n+                TestCastMethods.AVX2_CAST_TESTS.stream(),\n+                \"-XX:UseAVX=2\");\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/reshape\/TestVectorCastAVX2.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.vectorapi.reshape;\n+\n+import compiler.vectorapi.reshape.tests.TestVectorCast;\n+import compiler.vectorapi.reshape.utils.TestCastMethods;\n+import compiler.vectorapi.reshape.utils.VectorReshapeHelper;\n+\n+\/*\n+ * @test\n+ * @bug 8259610\n+ * @modules jdk.incubator.vector\n+ * @modules java.base\/jdk.internal.misc\n+ * @summary Test that vector cast intrinsics work as intended on avx512.\n+ * @requires vm.cpu.features ~= \".*avx512.*\"\n+ * @library \/test\/lib \/\n+ * @run driver compiler.vectorapi.reshape.TestVectorCastAVX512\n+ *\/\n+public class TestVectorCastAVX512 {\n+    public static void main(String[] args) {\n+        VectorReshapeHelper.runMainHelper(\n+                TestVectorCast.class,\n+                TestCastMethods.AVX512_CAST_TESTS.stream(),\n+                \"-XX:UseAVX=3\");\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/reshape\/TestVectorCastAVX512.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.vectorapi.reshape;\n+\n+import compiler.vectorapi.reshape.tests.TestVectorCast;\n+import compiler.vectorapi.reshape.utils.TestCastMethods;\n+import compiler.vectorapi.reshape.utils.VectorReshapeHelper;\n+\n+\/*\n+ * @test\n+ * @bug 8259610\n+ * @modules jdk.incubator.vector\n+ * @modules java.base\/jdk.internal.misc\n+ * @summary Test that vector cast intrinsics work as intended on avx512dq.\n+ * @requires vm.cpu.features ~= \".*avx512dq.*\"\n+ * @library \/test\/lib \/\n+ * @run driver compiler.vectorapi.reshape.TestVectorCastAVX512DQ\n+ *\/\n+public class TestVectorCastAVX512DQ {\n+    public static void main(String[] args) {\n+        VectorReshapeHelper.runMainHelper(\n+                TestVectorCast.class,\n+                TestCastMethods.AVX512DQ_CAST_TESTS.stream(),\n+                \"-XX:UseAVX=3\");\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/reshape\/TestVectorCastAVX512DQ.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.vectorapi.reshape;\n+\n+import compiler.vectorapi.reshape.tests.TestVectorCast;\n+import compiler.vectorapi.reshape.utils.TestCastMethods;\n+import compiler.vectorapi.reshape.utils.VectorReshapeHelper;\n+\n+\/*\n+ * @test\n+ * @bug 8259610\n+ * @modules jdk.incubator.vector\n+ * @modules java.base\/jdk.internal.misc\n+ * @summary Test that vector cast intrinsics work as intended on neon.\n+ * @requires vm.cpu.features ~= \".*simd.*\"\n+ * @library \/test\/lib \/\n+ * @run driver compiler.vectorapi.reshape.TestVectorCastNeon\n+ *\/\n+public class TestVectorCastNeon {\n+    public static void main(String[] args) {\n+        VectorReshapeHelper.runMainHelper(\n+                TestVectorCast.class,\n+                TestCastMethods.NEON_CAST_TESTS.stream(),\n+                \"-XX:+UseNeon\");\n+    }\n+}\n+\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/reshape\/TestVectorCastNeon.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.vectorapi.reshape;\n+\n+import compiler.vectorapi.reshape.tests.TestVectorCast;\n+import compiler.vectorapi.reshape.utils.TestCastMethods;\n+import compiler.vectorapi.reshape.utils.VectorReshapeHelper;\n+\n+\/*\n+ * @test\n+ * @bug 8259610\n+ * @modules jdk.incubator.vector\n+ * @modules java.base\/jdk.internal.misc\n+ * @summary Test that vector cast intrinsics work as intended on sve.\n+ * @requires vm.cpu.features ~= \".*sve.*\"\n+ * @library \/test\/lib \/\n+ * @run driver compiler.vectorapi.reshape.TestVectorCastSVE\n+ *\/\n+public class TestVectorCastSVE {\n+    public static void main(String[] args) {\n+        VectorReshapeHelper.runMainHelper(\n+                TestVectorCast.class,\n+                TestCastMethods.SVE_CAST_TESTS.stream(),\n+                \"-XX:UseSVE=1\");\n+    }\n+}\n+\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/reshape\/TestVectorCastSVE.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.vectorapi.reshape;\n+\n+import compiler.vectorapi.reshape.tests.TestVectorDoubleExpandShrink;\n+import compiler.vectorapi.reshape.tests.TestVectorExpandShrink;\n+import compiler.vectorapi.reshape.tests.TestVectorRebracket;\n+import compiler.vectorapi.reshape.utils.VectorReshapeHelper;\n+import compiler.vectorapi.reshape.utils.VectorSpeciesPair;\n+import java.util.List;\n+import jdk.incubator.vector.VectorShape;\n+import jdk.incubator.vector.VectorSpecies;\n+\n+\/*\n+ * @test\n+ * @bug 8259610\n+ * @modules jdk.incubator.vector\n+ * @modules java.base\/jdk.internal.misc\n+ * @summary Test that vector reinterpret intrinsics work as intended.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.vectorapi.reshape.TestVectorReinterpret\n+ *\/\n+public class TestVectorReinterpret {\n+    private static final List<VectorShape> SHAPE_LIST = List.of(VectorShape.values());\n+    private static final List<Class<?>> ETYPE_LIST = List.of(\n+            byte.class, short.class, int.class, long.class, float.class, double.class\n+    );\n+\n+    public static void main(String[] args) {\n+        VectorReshapeHelper.runMainHelper(\n+                TestVectorExpandShrink.class,\n+                SHAPE_LIST.stream()\n+                        .flatMap(s -> SHAPE_LIST.stream()\n+                                .filter(t -> t.vectorBitSize() != s.vectorBitSize())\n+                                .map(t -> VectorSpeciesPair.makePair(VectorSpecies.of(byte.class, s),\n+                                        VectorSpecies.of(byte.class, t))))\n+        );\n+\n+        VectorReshapeHelper.runMainHelper(\n+                TestVectorDoubleExpandShrink.class,\n+                SHAPE_LIST.stream()\n+                        .flatMap(s -> SHAPE_LIST.stream()\n+                                .filter(t -> t.vectorBitSize() != s.vectorBitSize())\n+                                .map(t -> VectorSpeciesPair.makePair(VectorSpecies.of(byte.class, s),\n+                                        VectorSpecies.of(byte.class, t))))\n+        );\n+\n+        VectorReshapeHelper.runMainHelper(\n+                TestVectorRebracket.class,\n+                SHAPE_LIST.stream()\n+                        .flatMap(shape -> ETYPE_LIST.stream()\n+                                .flatMap(etype -> ETYPE_LIST.stream()\n+                                        .filter(ftype -> ftype != etype)\n+                                        .map(ftype -> VectorSpeciesPair.makePair(VectorSpecies.of(etype, shape),\n+                                                VectorSpecies.of(ftype, shape)))))\n+                        .filter(p -> p.isp().length() > 1 && p.osp().length() > 1),\n+                \"--add-exports=java.base\/jdk.internal.misc=ALL-UNNAMED\"\n+        );\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/reshape\/TestVectorReinterpret.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"},{"patch":"@@ -0,0 +1,1359 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.vectorapi.reshape.tests;\n+\n+import compiler.lib.ir_framework.IR;\n+import compiler.lib.ir_framework.Run;\n+import compiler.lib.ir_framework.Test;\n+\n+import static compiler.vectorapi.reshape.utils.VectorReshapeHelper.*;\n+import static jdk.incubator.vector.VectorOperators.*;\n+\n+\/**\n+ * This class contains all possible cast operations between different vector species.\n+ * The methods only take into consideration the actual cast in C2, as the vectors are\n+ * ofter shrunk or expanded before\/after casting if the element numbers mismatch.\n+ * In each cast, the VectorCastNode is expected to appear exactly once.\n+ *\/\n+public class TestVectorCast {\n+    @Test\n+    @IR(counts = {B2X_NODE, \"1\"})\n+    public static void testB64toS64(byte[] input, byte[] output) {\n+        vectorCast(B2S, BSPEC64, SSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testB64toS64\")\n+    public static void runB64toS64() throws Throwable {\n+        runCastHelper(B2S, BSPEC64, SSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {B2X_NODE, \"1\"})\n+    public static void testB64toS128(byte[] input, byte[] output) {\n+        vectorCast(B2S, BSPEC64, SSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testB64toS128\")\n+    public static void runB64toS128() throws Throwable {\n+        runCastHelper(B2S, BSPEC64, SSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {B2X_NODE, \"1\"})\n+    public static void testB128toS256(byte[] input, byte[] output) {\n+        vectorCast(B2S, BSPEC128, SSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testB128toS256\")\n+    public static void runB128toS256() throws Throwable {\n+        runCastHelper(B2S, BSPEC128, SSPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {B2X_NODE, \"1\"})\n+    public static void testB256toS512(byte[] input, byte[] output) {\n+        vectorCast(B2S, BSPEC256, SSPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testB256toS512\")\n+    public static void runB256toS512() throws Throwable {\n+        runCastHelper(B2S, BSPEC256, SSPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {B2X_NODE, \"1\"})\n+    public static void testB64toI64(byte[] input, byte[] output) {\n+        vectorCast(B2I, BSPEC64, ISPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testB64toI64\")\n+    public static void runB64toI64() throws Throwable {\n+        runCastHelper(B2I, BSPEC64, ISPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {B2X_NODE, \"1\"})\n+    public static void testB64toI128(byte[] input, byte[] output) {\n+        vectorCast(B2I, BSPEC64, ISPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testB64toI128\")\n+    public static void runB64toI128() throws Throwable {\n+        runCastHelper(B2I, BSPEC64, ISPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {B2X_NODE, \"1\"})\n+    public static void testB64toI256(byte[] input, byte[] output) {\n+        vectorCast(B2I, BSPEC64, ISPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testB64toI256\")\n+    public static void runB64toI256() throws Throwable {\n+        runCastHelper(B2I, BSPEC64, ISPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {B2X_NODE, \"1\"})\n+    public static void testB128toI512(byte[] input, byte[] output) {\n+        vectorCast(B2I, BSPEC128, ISPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testB128toI512\")\n+    public static void runB128toI512() throws Throwable {\n+        runCastHelper(B2I, BSPEC128, ISPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {B2X_NODE, \"1\"})\n+    public static void testB64toL64(byte[] input, byte[] output) {\n+        vectorCast(B2L, BSPEC64, LSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testB64toL64\")\n+    public static void runB64toL64() throws Throwable {\n+        runCastHelper(B2L, BSPEC64, LSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {B2X_NODE, \"1\"})\n+    public static void testB64toL128(byte[] input, byte[] output) {\n+        vectorCast(B2L, BSPEC64, LSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testB64toL128\")\n+    public static void runB64toL128() throws Throwable {\n+        runCastHelper(B2L, BSPEC64, LSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {B2X_NODE, \"1\"})\n+    public static void testB64toL256(byte[] input, byte[] output) {\n+        vectorCast(B2L, BSPEC64, LSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testB64toL256\")\n+    public static void runB64toL256() throws Throwable {\n+        runCastHelper(B2L, BSPEC64, LSPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {B2X_NODE, \"1\"})\n+    public static void testB64toL512(byte[] input, byte[] output) {\n+        vectorCast(B2L, BSPEC64, LSPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testB64toL512\")\n+    public static void runB64toL512() throws Throwable {\n+        runCastHelper(B2L, BSPEC64, LSPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {B2X_NODE, \"1\"})\n+    public static void testB64toF64(byte[] input, byte[] output) {\n+        vectorCast(B2F, BSPEC64, FSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testB64toF64\")\n+    public static void runB64toF64() throws Throwable {\n+        runCastHelper(B2F, BSPEC64, FSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {B2X_NODE, \"1\"})\n+    public static void testB64toF128(byte[] input, byte[] output) {\n+        vectorCast(B2F, BSPEC64, FSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testB64toF128\")\n+    public static void runB64toF128() throws Throwable {\n+        runCastHelper(B2F, BSPEC64, FSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {B2X_NODE, \"1\"})\n+    public static void testB64toF256(byte[] input, byte[] output) {\n+        vectorCast(B2F, BSPEC64, FSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testB64toF256\")\n+    public static void runB64toF256() throws Throwable {\n+        runCastHelper(B2F, BSPEC64, FSPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {B2X_NODE, \"1\"})\n+    public static void testB128toF512(byte[] input, byte[] output) {\n+        vectorCast(B2F, BSPEC128, FSPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testB128toF512\")\n+    public static void runB128toF512() throws Throwable {\n+        runCastHelper(B2F, BSPEC128, FSPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {B2X_NODE, \"1\"})\n+    public static void testB64toD64(byte[] input, byte[] output) {\n+        vectorCast(B2D, BSPEC64, DSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testB64toD64\")\n+    public static void runB64toD64() throws Throwable {\n+        runCastHelper(B2D, BSPEC64, DSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {B2X_NODE, \"1\"})\n+    public static void testB64toD128(byte[] input, byte[] output) {\n+        vectorCast(B2D, BSPEC64, DSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testB64toD128\")\n+    public static void runB64toD128() throws Throwable {\n+        runCastHelper(B2D, BSPEC64, DSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {B2X_NODE, \"1\"})\n+    public static void testB64toD256(byte[] input, byte[] output) {\n+        vectorCast(B2D, BSPEC64, DSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testB64toD256\")\n+    public static void runB64toD256() throws Throwable {\n+        runCastHelper(B2D, BSPEC64, DSPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {B2X_NODE, \"1\"})\n+    public static void testB64toD512(byte[] input, byte[] output) {\n+        vectorCast(B2D, BSPEC64, DSPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testB64toD512\")\n+    public static void runB64toD512() throws Throwable {\n+        runCastHelper(B2D, BSPEC64, DSPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {S2X_NODE, \"1\"})\n+    public static void testS64toB64(byte[] input, byte[] output) {\n+        vectorCast(S2B, SSPEC64, BSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testS64toB64\")\n+    public static void runS64toB64() throws Throwable {\n+        runCastHelper(S2B, SSPEC64, BSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {S2X_NODE, \"1\"})\n+    public static void testS128toB64(byte[] input, byte[] output) {\n+        vectorCast(S2B, SSPEC128, BSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testS128toB64\")\n+    public static void runS128toB64() throws Throwable {\n+        runCastHelper(S2B, SSPEC128, BSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {S2X_NODE, \"1\"})\n+    public static void testS256toB128(byte[] input, byte[] output) {\n+        vectorCast(S2B, SSPEC256, BSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testS256toB128\")\n+    public static void runS256toB128() throws Throwable {\n+        runCastHelper(S2B, SSPEC256, BSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {S2X_NODE, \"1\"})\n+    public static void testS512toB256(byte[] input, byte[] output) {\n+        vectorCast(S2B, SSPEC512, BSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testS512toB256\")\n+    public static void runS512toB256() throws Throwable {\n+        runCastHelper(S2B, SSPEC512, BSPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {S2X_NODE, \"1\"})\n+    public static void testS64toI64(byte[] input, byte[] output) {\n+        vectorCast(S2I, SSPEC64, ISPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testS64toI64\")\n+    public static void runS64toI64() throws Throwable {\n+        runCastHelper(S2I, SSPEC64, ISPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {S2X_NODE, \"1\"})\n+    public static void testS64toI128(byte[] input, byte[] output) {\n+        vectorCast(S2I, SSPEC64, ISPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testS64toI128\")\n+    public static void runS64toI128() throws Throwable {\n+        runCastHelper(S2I, SSPEC64, ISPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {S2X_NODE, \"1\"})\n+    public static void testS128toI256(byte[] input, byte[] output) {\n+        vectorCast(S2I, SSPEC128, ISPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testS128toI256\")\n+    public static void runS128toI256() throws Throwable {\n+        runCastHelper(S2I, SSPEC128, ISPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {S2X_NODE, \"1\"})\n+    public static void testS256toI512(byte[] input, byte[] output) {\n+        vectorCast(S2I, SSPEC256, ISPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testS256toI512\")\n+    public static void runS256toI512() throws Throwable {\n+        runCastHelper(S2I, SSPEC256, ISPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {S2X_NODE, \"1\"})\n+    public static void testS64toL64(byte[] input, byte[] output) {\n+        vectorCast(S2L, SSPEC64, LSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testS64toL64\")\n+    public static void runS64toL64() throws Throwable {\n+        runCastHelper(S2L, SSPEC64, LSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {S2X_NODE, \"1\"})\n+    public static void testS64toL128(byte[] input, byte[] output) {\n+        vectorCast(S2L, SSPEC64, LSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testS64toL128\")\n+    public static void runS64toL128() throws Throwable {\n+        runCastHelper(S2L, SSPEC64, LSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {S2X_NODE, \"1\"})\n+    public static void testS64toL256(byte[] input, byte[] output) {\n+        vectorCast(S2L, SSPEC64, LSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testS64toL256\")\n+    public static void runS64toL256() throws Throwable {\n+        runCastHelper(S2L, SSPEC64, LSPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {S2X_NODE, \"1\"})\n+    public static void testS128toL512(byte[] input, byte[] output) {\n+        vectorCast(S2L, SSPEC128, LSPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testS128toL512\")\n+    public static void runS128toL512() throws Throwable {\n+        runCastHelper(S2L, SSPEC128, LSPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {S2X_NODE, \"1\"})\n+    public static void testS64toF64(byte[] input, byte[] output) {\n+        vectorCast(S2F, SSPEC64, FSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testS64toF64\")\n+    public static void runS64toF64() throws Throwable {\n+        runCastHelper(S2F, SSPEC64, FSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {S2X_NODE, \"1\"})\n+    public static void testS64toF128(byte[] input, byte[] output) {\n+        vectorCast(S2F, SSPEC64, FSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testS64toF128\")\n+    public static void runS64toF128() throws Throwable {\n+        runCastHelper(S2F, SSPEC64, FSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {S2X_NODE, \"1\"})\n+    public static void testS128toF256(byte[] input, byte[] output) {\n+        vectorCast(S2F, SSPEC128, FSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testS128toF256\")\n+    public static void runS128toF256() throws Throwable {\n+        runCastHelper(S2F, SSPEC128, FSPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {S2X_NODE, \"1\"})\n+    public static void testS256toF512(byte[] input, byte[] output) {\n+        vectorCast(S2F, SSPEC256, FSPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testS256toF512\")\n+    public static void runS256toF512() throws Throwable {\n+        runCastHelper(S2F, SSPEC256, FSPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {S2X_NODE, \"1\"})\n+    public static void testS64toD64(byte[] input, byte[] output) {\n+        vectorCast(S2D, SSPEC64, DSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testS64toD64\")\n+    public static void runS64toD64() throws Throwable {\n+        runCastHelper(S2D, SSPEC64, DSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {S2X_NODE, \"1\"})\n+    public static void testS64toD128(byte[] input, byte[] output) {\n+        vectorCast(S2D, SSPEC64, DSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testS64toD128\")\n+    public static void runS64toD128() throws Throwable {\n+        runCastHelper(S2D, SSPEC64, DSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {S2X_NODE, \"1\"})\n+    public static void testS64toD256(byte[] input, byte[] output) {\n+        vectorCast(S2D, SSPEC64, DSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testS64toD256\")\n+    public static void runS64toD256() throws Throwable {\n+        runCastHelper(S2D, SSPEC64, DSPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {S2X_NODE, \"1\"})\n+    public static void testS128toD512(byte[] input, byte[] output) {\n+        vectorCast(S2D, SSPEC128, DSPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testS128toD512\")\n+    public static void runS128toD512() throws Throwable {\n+        runCastHelper(S2D, SSPEC128, DSPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {I2X_NODE, \"1\"})\n+    public static void testI64toB64(byte[] input, byte[] output) {\n+        vectorCast(I2B, ISPEC64, BSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testI64toB64\")\n+    public static void runI64toB64() throws Throwable {\n+        runCastHelper(I2B, ISPEC64, BSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {I2X_NODE, \"1\"})\n+    public static void testI128toB64(byte[] input, byte[] output) {\n+        vectorCast(I2B, ISPEC128, BSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testI128toB64\")\n+    public static void runI128toB64() throws Throwable {\n+        runCastHelper(I2B, ISPEC128, BSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {I2X_NODE, \"1\"})\n+    public static void testI256toB64(byte[] input, byte[] output) {\n+        vectorCast(I2B, ISPEC256, BSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testI256toB64\")\n+    public static void runI256toB64() throws Throwable {\n+        runCastHelper(I2B, ISPEC256, BSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {I2X_NODE, \"1\"})\n+    public static void testI512toB128(byte[] input, byte[] output) {\n+        vectorCast(I2B, ISPEC512, BSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testI512toB128\")\n+    public static void runI512toB128() throws Throwable {\n+        runCastHelper(I2B, ISPEC512, BSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {I2X_NODE, \"1\"})\n+    public static void testI64toS64(byte[] input, byte[] output) {\n+        vectorCast(I2S, ISPEC64, SSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testI64toS64\")\n+    public static void runI64toS64() throws Throwable {\n+        runCastHelper(I2S, ISPEC64, SSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {I2X_NODE, \"1\"})\n+    public static void testI128toS64(byte[] input, byte[] output) {\n+        vectorCast(I2S, ISPEC128, SSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testI128toS64\")\n+    public static void runI128toS64() throws Throwable {\n+        runCastHelper(I2S, ISPEC128, SSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {I2X_NODE, \"1\"})\n+    public static void testI256toS128(byte[] input, byte[] output) {\n+        vectorCast(I2S, ISPEC256, SSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testI256toS128\")\n+    public static void runI256toS128() throws Throwable {\n+        runCastHelper(I2S, ISPEC256, SSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {I2X_NODE, \"1\"})\n+    public static void testI512toS256(byte[] input, byte[] output) {\n+        vectorCast(I2S, ISPEC512, SSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testI512toS256\")\n+    public static void runI512toS256() throws Throwable {\n+        runCastHelper(I2S, ISPEC512, SSPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {I2X_NODE, \"1\"})\n+    public static void testI64toL64(byte[] input, byte[] output) {\n+        vectorCast(I2L, ISPEC64, LSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testI64toL64\")\n+    public static void runI64toL64() throws Throwable {\n+        runCastHelper(I2L, ISPEC64, LSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {I2X_NODE, \"1\"})\n+    public static void testI64toL128(byte[] input, byte[] output) {\n+        vectorCast(I2L, ISPEC64, LSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testI64toL128\")\n+    public static void runI64toL128() throws Throwable {\n+        runCastHelper(I2L, ISPEC64, LSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {I2X_NODE, \"1\"})\n+    public static void testI128toL256(byte[] input, byte[] output) {\n+        vectorCast(I2L, ISPEC128, LSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testI128toL256\")\n+    public static void runI128toL256() throws Throwable {\n+        runCastHelper(I2L, ISPEC128, LSPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {I2X_NODE, \"1\"})\n+    public static void testI256toL512(byte[] input, byte[] output) {\n+        vectorCast(I2L, ISPEC256, LSPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testI256toL512\")\n+    public static void runI256toL512() throws Throwable {\n+        runCastHelper(I2L, ISPEC256, LSPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {I2X_NODE, \"1\"})\n+    public static void testI64toF64(byte[] input, byte[] output) {\n+        vectorCast(I2F, ISPEC64, FSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testI64toF64\")\n+    public static void runI64toF64() throws Throwable {\n+        runCastHelper(I2F, ISPEC64, FSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {I2X_NODE, \"1\"})\n+    public static void testI128toF128(byte[] input, byte[] output) {\n+        vectorCast(I2F, ISPEC128, FSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testI128toF128\")\n+    public static void runI128toF128() throws Throwable {\n+        runCastHelper(I2F, ISPEC128, FSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {I2X_NODE, \"1\"})\n+    public static void testI256toF256(byte[] input, byte[] output) {\n+        vectorCast(I2F, ISPEC256, FSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testI256toF256\")\n+    public static void runI256toF256() throws Throwable {\n+        runCastHelper(I2F, ISPEC256, FSPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {I2X_NODE, \"1\"})\n+    public static void testI512toF512(byte[] input, byte[] output) {\n+        vectorCast(I2F, ISPEC512, FSPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testI512toF512\")\n+    public static void runI512toF512() throws Throwable {\n+        runCastHelper(I2F, ISPEC512, FSPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {I2X_NODE, \"1\"})\n+    public static void testI64toD64(byte[] input, byte[] output) {\n+        vectorCast(I2D, ISPEC64, DSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testI64toD64\")\n+    public static void runI64toD64() throws Throwable {\n+        runCastHelper(I2D, ISPEC64, DSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {I2X_NODE, \"1\"})\n+    public static void testI64toD128(byte[] input, byte[] output) {\n+        vectorCast(I2D, ISPEC64, DSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testI64toD128\")\n+    public static void runI64toD128() throws Throwable {\n+        runCastHelper(I2D, ISPEC64, DSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {I2X_NODE, \"1\"})\n+    public static void testI128toD256(byte[] input, byte[] output) {\n+        vectorCast(I2D, ISPEC128, DSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testI128toD256\")\n+    public static void runI128toD256() throws Throwable {\n+        runCastHelper(I2D, ISPEC128, DSPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {I2X_NODE, \"1\"})\n+    public static void testI256toD512(byte[] input, byte[] output) {\n+        vectorCast(I2D, ISPEC256, DSPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testI256toD512\")\n+    public static void runI256toD512() throws Throwable {\n+        runCastHelper(I2D, ISPEC256, DSPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {L2X_NODE, \"1\"})\n+    public static void testL64toB64(byte[] input, byte[] output) {\n+        vectorCast(L2B, LSPEC64, BSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testL64toB64\")\n+    public static void runL64toB64() throws Throwable {\n+        runCastHelper(L2B, LSPEC64, BSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {L2X_NODE, \"1\"})\n+    public static void testL128toB64(byte[] input, byte[] output) {\n+        vectorCast(L2B, LSPEC128, BSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testL128toB64\")\n+    public static void runL128toB64() throws Throwable {\n+        runCastHelper(L2B, LSPEC128, BSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {L2X_NODE, \"1\"})\n+    public static void testL256toB64(byte[] input, byte[] output) {\n+        vectorCast(L2B, LSPEC256, BSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testL256toB64\")\n+    public static void runL256toB64() throws Throwable {\n+        runCastHelper(L2B, LSPEC256, BSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {L2X_NODE, \"1\"})\n+    public static void testL512toB64(byte[] input, byte[] output) {\n+        vectorCast(L2B, LSPEC512, BSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testL512toB64\")\n+    public static void runL512toB64() throws Throwable {\n+        runCastHelper(L2B, LSPEC512, BSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {L2X_NODE, \"1\"})\n+    public static void testL64toS64(byte[] input, byte[] output) {\n+        vectorCast(L2S, LSPEC64, SSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testL64toS64\")\n+    public static void runL64toS64() throws Throwable {\n+        runCastHelper(L2S, LSPEC64, SSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {L2X_NODE, \"1\"})\n+    public static void testL128toS64(byte[] input, byte[] output) {\n+        vectorCast(L2S, LSPEC128, SSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testL128toS64\")\n+    public static void runL128toS64() throws Throwable {\n+        runCastHelper(L2S, LSPEC128, SSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {L2X_NODE, \"1\"})\n+    public static void testL256toS64(byte[] input, byte[] output) {\n+        vectorCast(L2S, LSPEC256, SSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testL256toS64\")\n+    public static void runL256toS64() throws Throwable {\n+        runCastHelper(L2S, LSPEC256, SSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {L2X_NODE, \"1\"})\n+    public static void testL512toS128(byte[] input, byte[] output) {\n+        vectorCast(L2S, LSPEC512, SSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testL512toS128\")\n+    public static void runL512toS128() throws Throwable {\n+        runCastHelper(L2S, LSPEC512, SSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {L2X_NODE, \"1\"})\n+    public static void testL64toI64(byte[] input, byte[] output) {\n+        vectorCast(L2I, LSPEC64, ISPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testL64toI64\")\n+    public static void runL64toI64() throws Throwable {\n+        runCastHelper(L2I, LSPEC64, ISPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {L2X_NODE, \"1\"})\n+    public static void testL128toI64(byte[] input, byte[] output) {\n+        vectorCast(L2I, LSPEC128, ISPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testL128toI64\")\n+    public static void runL128toI64() throws Throwable {\n+        runCastHelper(L2I, LSPEC128, ISPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {L2X_NODE, \"1\"})\n+    public static void testL256toI128(byte[] input, byte[] output) {\n+        vectorCast(L2I, LSPEC256, ISPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testL256toI128\")\n+    public static void runL256toI128() throws Throwable {\n+        runCastHelper(L2I, LSPEC256, ISPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {L2X_NODE, \"1\"})\n+    public static void testL512toI256(byte[] input, byte[] output) {\n+        vectorCast(L2I, LSPEC512, ISPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testL512toI256\")\n+    public static void runL512toI256() throws Throwable {\n+        runCastHelper(L2I, LSPEC512, ISPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {L2X_NODE, \"1\"})\n+    public static void testL64toF64(byte[] input, byte[] output) {\n+        vectorCast(L2F, LSPEC64, FSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testL64toF64\")\n+    public static void runL64toF64() throws Throwable {\n+        runCastHelper(L2F, LSPEC64, FSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {L2X_NODE, \"1\"})\n+    public static void testL128toF64(byte[] input, byte[] output) {\n+        vectorCast(L2F, LSPEC128, FSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testL128toF64\")\n+    public static void runL128toF64() throws Throwable {\n+        runCastHelper(L2F, LSPEC128, FSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {L2X_NODE, \"1\"})\n+    public static void testL256toF128(byte[] input, byte[] output) {\n+        vectorCast(L2F, LSPEC256, FSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testL256toF128\")\n+    public static void runL256toF128() throws Throwable {\n+        runCastHelper(L2F, LSPEC256, FSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {L2X_NODE, \"1\"})\n+    public static void testL512toF256(byte[] input, byte[] output) {\n+        vectorCast(L2F, LSPEC512, FSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testL512toF256\")\n+    public static void runL512toF256() throws Throwable {\n+        runCastHelper(L2F, LSPEC512, FSPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {L2X_NODE, \"1\"})\n+    public static void testL64toD64(byte[] input, byte[] output) {\n+        vectorCast(L2D, LSPEC64, DSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testL64toD64\")\n+    public static void runL64toD64() throws Throwable {\n+        runCastHelper(L2D, LSPEC64, DSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {L2X_NODE, \"1\"})\n+    public static void testL128toD128(byte[] input, byte[] output) {\n+        vectorCast(L2D, LSPEC128, DSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testL128toD128\")\n+    public static void runL128toD128() throws Throwable {\n+        runCastHelper(L2D, LSPEC128, DSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {L2X_NODE, \"1\"})\n+    public static void testL256toD256(byte[] input, byte[] output) {\n+        vectorCast(L2D, LSPEC256, DSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testL256toD256\")\n+    public static void runL256toD256() throws Throwable {\n+        runCastHelper(L2D, LSPEC256, DSPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {L2X_NODE, \"1\"})\n+    public static void testL512toD512(byte[] input, byte[] output) {\n+        vectorCast(L2D, LSPEC512, DSPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testL512toD512\")\n+    public static void runL512toD512() throws Throwable {\n+        runCastHelper(L2D, LSPEC512, DSPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {F2X_NODE, \"1\"})\n+    public static void testF64toB64(byte[] input, byte[] output) {\n+        vectorCast(F2B, FSPEC64, BSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testF64toB64\")\n+    public static void runF64toB64() throws Throwable {\n+        runCastHelper(F2B, FSPEC64, BSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {F2X_NODE, \"1\"})\n+    public static void testF128toB64(byte[] input, byte[] output) {\n+        vectorCast(F2B, FSPEC128, BSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testF128toB64\")\n+    public static void runF128toB64() throws Throwable {\n+        runCastHelper(F2B, FSPEC128, BSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {F2X_NODE, \"1\"})\n+    public static void testF256toB64(byte[] input, byte[] output) {\n+        vectorCast(F2B, FSPEC256, BSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testF256toB64\")\n+    public static void runF256toB64() throws Throwable {\n+        runCastHelper(F2B, FSPEC256, BSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {F2X_NODE, \"1\"})\n+    public static void testF512toB128(byte[] input, byte[] output) {\n+        vectorCast(F2B, FSPEC512, BSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testF512toB128\")\n+    public static void runF512toB128() throws Throwable {\n+        runCastHelper(F2B, FSPEC512, BSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {F2X_NODE, \"1\"})\n+    public static void testF64toS64(byte[] input, byte[] output) {\n+        vectorCast(F2S, FSPEC64, SSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testF64toS64\")\n+    public static void runF64toS64() throws Throwable {\n+        runCastHelper(F2S, FSPEC64, SSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {F2X_NODE, \"1\"})\n+    public static void testF128toS64(byte[] input, byte[] output) {\n+        vectorCast(F2S, FSPEC128, SSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testF128toS64\")\n+    public static void runF128toS64() throws Throwable {\n+        runCastHelper(F2S, FSPEC128, SSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {F2X_NODE, \"1\"})\n+    public static void testF256toS128(byte[] input, byte[] output) {\n+        vectorCast(F2S, FSPEC256, SSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testF256toS128\")\n+    public static void runF256toS128() throws Throwable {\n+        runCastHelper(F2S, FSPEC256, SSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {F2X_NODE, \"1\"})\n+    public static void testF512toS256(byte[] input, byte[] output) {\n+        vectorCast(F2S, FSPEC512, SSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testF512toS256\")\n+    public static void runF512toS256() throws Throwable {\n+        runCastHelper(F2S, FSPEC512, SSPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {F2X_NODE, \"1\"})\n+    public static void testF64toL64(byte[] input, byte[] output) {\n+        vectorCast(F2L, FSPEC64, LSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testF64toL64\")\n+    public static void runF64toL64() throws Throwable {\n+        runCastHelper(F2L, FSPEC64, LSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {F2X_NODE, \"1\"})\n+    public static void testF64toL128(byte[] input, byte[] output) {\n+        vectorCast(F2L, FSPEC64, LSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testF64toL128\")\n+    public static void runF64toL128() throws Throwable {\n+        runCastHelper(F2L, FSPEC64, LSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {F2X_NODE, \"1\"})\n+    public static void testF128toL256(byte[] input, byte[] output) {\n+        vectorCast(F2L, FSPEC128, LSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testF128toL256\")\n+    public static void runF128toL256() throws Throwable {\n+        runCastHelper(F2L, FSPEC128, LSPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {F2X_NODE, \"1\"})\n+    public static void testF256toL512(byte[] input, byte[] output) {\n+        vectorCast(F2L, FSPEC256, LSPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testF256toL512\")\n+    public static void runF256toL512() throws Throwable {\n+        runCastHelper(F2L, FSPEC256, LSPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {F2X_NODE, \"1\"})\n+    public static void testF64toI64(byte[] input, byte[] output) {\n+        vectorCast(F2I, FSPEC64, ISPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testF64toI64\")\n+    public static void runF64toI64() throws Throwable {\n+        runCastHelper(F2I, FSPEC64, ISPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {F2X_NODE, \"1\"})\n+    public static void testF128toI128(byte[] input, byte[] output) {\n+        vectorCast(F2I, FSPEC128, ISPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testF128toI128\")\n+    public static void runF128toI128() throws Throwable {\n+        runCastHelper(F2I, FSPEC128, ISPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {F2X_NODE, \"1\"})\n+    public static void testF256toI256(byte[] input, byte[] output) {\n+        vectorCast(F2I, FSPEC256, ISPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testF256toI256\")\n+    public static void runF256toI256() throws Throwable {\n+        runCastHelper(F2I, FSPEC256, ISPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {F2X_NODE, \"1\"})\n+    public static void testF512toI512(byte[] input, byte[] output) {\n+        vectorCast(F2I, FSPEC512, ISPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testF512toI512\")\n+    public static void runF512toI512() throws Throwable {\n+        runCastHelper(F2I, FSPEC512, ISPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {F2X_NODE, \"1\"})\n+    public static void testF64toD64(byte[] input, byte[] output) {\n+        vectorCast(F2D, FSPEC64, DSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testF64toD64\")\n+    public static void runF64toD64() throws Throwable {\n+        runCastHelper(F2D, FSPEC64, DSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {F2X_NODE, \"1\"})\n+    public static void testF64toD128(byte[] input, byte[] output) {\n+        vectorCast(F2D, FSPEC64, DSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testF64toD128\")\n+    public static void runF64toD128() throws Throwable {\n+        runCastHelper(F2D, FSPEC64, DSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {F2X_NODE, \"1\"})\n+    public static void testF128toD256(byte[] input, byte[] output) {\n+        vectorCast(F2D, FSPEC128, DSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testF128toD256\")\n+    public static void runF128toD256() throws Throwable {\n+        runCastHelper(F2D, FSPEC128, DSPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {F2X_NODE, \"1\"})\n+    public static void testF256toD512(byte[] input, byte[] output) {\n+        vectorCast(F2D, FSPEC256, DSPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testF256toD512\")\n+    public static void runF256toD512() throws Throwable {\n+        runCastHelper(F2D, FSPEC256, DSPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {D2X_NODE, \"1\"})\n+    public static void testD64toB64(byte[] input, byte[] output) {\n+        vectorCast(D2B, DSPEC64, BSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testD64toB64\")\n+    public static void runD64toB64() throws Throwable {\n+        runCastHelper(D2B, DSPEC64, BSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {D2X_NODE, \"1\"})\n+    public static void testD128toB64(byte[] input, byte[] output) {\n+        vectorCast(D2B, DSPEC128, BSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testD128toB64\")\n+    public static void runD128toB64() throws Throwable {\n+        runCastHelper(D2B, DSPEC128, BSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {D2X_NODE, \"1\"})\n+    public static void testD256toB64(byte[] input, byte[] output) {\n+        vectorCast(D2B, DSPEC256, BSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testD256toB64\")\n+    public static void runD256toB64() throws Throwable {\n+        runCastHelper(D2B, DSPEC256, BSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {D2X_NODE, \"1\"})\n+    public static void testD512toB64(byte[] input, byte[] output) {\n+        vectorCast(D2B, DSPEC512, BSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testD512toB64\")\n+    public static void runD512toB64() throws Throwable {\n+        runCastHelper(D2B, DSPEC512, BSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {D2X_NODE, \"1\"})\n+    public static void testD64toS64(byte[] input, byte[] output) {\n+        vectorCast(D2S, DSPEC64, SSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testD64toS64\")\n+    public static void runD64toS64() throws Throwable {\n+        runCastHelper(D2S, DSPEC64, SSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {D2X_NODE, \"1\"})\n+    public static void testD128toS64(byte[] input, byte[] output) {\n+        vectorCast(D2S, DSPEC128, SSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testD128toS64\")\n+    public static void runD128toS64() throws Throwable {\n+        runCastHelper(D2S, DSPEC128, SSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {D2X_NODE, \"1\"})\n+    public static void testD256toS64(byte[] input, byte[] output) {\n+        vectorCast(D2S, DSPEC256, SSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testD256toS64\")\n+    public static void runD256toS64() throws Throwable {\n+        runCastHelper(D2S, DSPEC256, SSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {D2X_NODE, \"1\"})\n+    public static void testD512toS128(byte[] input, byte[] output) {\n+        vectorCast(D2S, DSPEC512, SSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testD512toS128\")\n+    public static void runD512toS128() throws Throwable {\n+        runCastHelper(D2S, DSPEC512, SSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {D2X_NODE, \"1\"})\n+    public static void testD64toI64(byte[] input, byte[] output) {\n+        vectorCast(D2I, DSPEC64, ISPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testD64toI64\")\n+    public static void runD64toI64() throws Throwable {\n+        runCastHelper(D2I, DSPEC64, ISPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {D2X_NODE, \"1\"})\n+    public static void testD128toI64(byte[] input, byte[] output) {\n+        vectorCast(D2I, DSPEC128, ISPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testD128toI64\")\n+    public static void runD128toI64() throws Throwable {\n+        runCastHelper(D2I, DSPEC128, ISPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {D2X_NODE, \"1\"})\n+    public static void testD256toI128(byte[] input, byte[] output) {\n+        vectorCast(D2I, DSPEC256, ISPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testD256toI128\")\n+    public static void runD256toI128() throws Throwable {\n+        runCastHelper(D2I, DSPEC256, ISPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {D2X_NODE, \"1\"})\n+    public static void testD512toI256(byte[] input, byte[] output) {\n+        vectorCast(D2I, DSPEC512, ISPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testD512toI256\")\n+    public static void runD512toI256() throws Throwable {\n+        runCastHelper(D2I, DSPEC512, ISPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {D2X_NODE, \"1\"})\n+    public static void testD64toF64(byte[] input, byte[] output) {\n+        vectorCast(D2F, DSPEC64, FSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testD64toF64\")\n+    public static void runD64toF64() throws Throwable {\n+        runCastHelper(D2F, DSPEC64, FSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {D2X_NODE, \"1\"})\n+    public static void testD128toF64(byte[] input, byte[] output) {\n+        vectorCast(D2F, DSPEC128, FSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testD128toF64\")\n+    public static void runD128toF64() throws Throwable {\n+        runCastHelper(D2F, DSPEC128, FSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {D2X_NODE, \"1\"})\n+    public static void testD256toF128(byte[] input, byte[] output) {\n+        vectorCast(D2F, DSPEC256, FSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testD256toF128\")\n+    public static void runD256toF128() throws Throwable {\n+        runCastHelper(D2F, DSPEC256, FSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {D2X_NODE, \"1\"})\n+    public static void testD512toF256(byte[] input, byte[] output) {\n+        vectorCast(D2F, DSPEC512, FSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testD512toF256\")\n+    public static void runD512toF256() throws Throwable {\n+        runCastHelper(D2F, DSPEC512, FSPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {D2X_NODE, \"1\"})\n+    public static void testD64toL64(byte[] input, byte[] output) {\n+        vectorCast(D2L, DSPEC64, LSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testD64toL64\")\n+    public static void runD64toL64() throws Throwable {\n+        runCastHelper(D2L, DSPEC64, LSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {D2X_NODE, \"1\"})\n+    public static void testD128toL128(byte[] input, byte[] output) {\n+        vectorCast(D2L, DSPEC128, LSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testD128toL128\")\n+    public static void runD128toL128() throws Throwable {\n+        runCastHelper(D2L, DSPEC128, LSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {D2X_NODE, \"1\"})\n+    public static void testD256toL256(byte[] input, byte[] output) {\n+        vectorCast(D2L, DSPEC256, LSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testD256toL256\")\n+    public static void runD256toL256() throws Throwable {\n+        runCastHelper(D2L, DSPEC256, LSPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {D2X_NODE, \"1\"})\n+    public static void testD512toL512(byte[] input, byte[] output) {\n+        vectorCast(D2L, DSPEC512, LSPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testD512toL512\")\n+    public static void runD512toL512() throws Throwable {\n+        runCastHelper(D2L, DSPEC512, LSPEC512);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/reshape\/tests\/TestVectorCast.java","additions":1359,"deletions":0,"binary":false,"changes":1359,"status":"added"},{"patch":"@@ -0,0 +1,169 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.vectorapi.reshape.tests;\n+\n+import compiler.lib.ir_framework.IR;\n+import compiler.lib.ir_framework.Run;\n+import compiler.lib.ir_framework.Test;\n+\n+import static compiler.vectorapi.reshape.utils.VectorReshapeHelper.*;\n+\n+\/**\n+ * As spot in 8259353. We need to do a shrink and an expand together to not accidentally\n+ * zero out elements in the physical registers that may not be zero in general cases.\n+ * In some methods, 2 consecutive ReinterpretNodes may be optimized out.\n+ *\/\n+public class TestVectorDoubleExpandShrink {\n+    @Test\n+    @IR(failOn = REINTERPRET_NODE)\n+    public static void testB64toB128(byte[] input, byte[] output) {\n+        vectorDoubleExpandShrink(BSPEC64, BSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testB64toB128\")\n+    public static void runB64toB128() throws Throwable {\n+        runDoubleExpandShrinkHelper(BSPEC64, BSPEC128);\n+    }\n+\n+    @Test\n+    @IR(failOn = REINTERPRET_NODE)\n+    public static void testB64toB256(byte[] input, byte[] output) {\n+        vectorDoubleExpandShrink(BSPEC64, BSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testB64toB256\")\n+    public static void runB64toB256() throws Throwable {\n+        runDoubleExpandShrinkHelper(BSPEC64, BSPEC256);\n+    }\n+\n+    @Test\n+    @IR(failOn = REINTERPRET_NODE)\n+    public static void testB64toB512(byte[] input, byte[] output) {\n+        vectorDoubleExpandShrink(BSPEC64, BSPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testB64toB512\")\n+    public static void runB64toB512() throws Throwable {\n+        runDoubleExpandShrinkHelper(BSPEC64, BSPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"2\"})\n+    public static void testB128toB64(byte[] input, byte[] output) {\n+        vectorDoubleExpandShrink(BSPEC128, BSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testB128toB64\")\n+    public static void runB128toB64() throws Throwable {\n+        runDoubleExpandShrinkHelper(BSPEC128, BSPEC64);\n+    }\n+\n+    @Test\n+    @IR(failOn = REINTERPRET_NODE)\n+    public static void testB128toB256(byte[] input, byte[] output) {\n+        vectorDoubleExpandShrink(BSPEC128, BSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testB128toB256\")\n+    public static void runB128toB256() throws Throwable {\n+        runDoubleExpandShrinkHelper(BSPEC128, BSPEC256);\n+    }\n+\n+    @Test\n+    @IR(failOn = REINTERPRET_NODE)\n+    public static void testB128toB512(byte[] input, byte[] output) {\n+        vectorDoubleExpandShrink(BSPEC128, BSPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testB128toB512\")\n+    public static void runB128toB512() throws Throwable {\n+        runDoubleExpandShrinkHelper(BSPEC128, BSPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"2\"})\n+    public static void testB256toB64(byte[] input, byte[] output) {\n+        vectorDoubleExpandShrink(BSPEC256, BSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testB256toB64\")\n+    public static void runB256toB64() throws Throwable {\n+        runDoubleExpandShrinkHelper(BSPEC256, BSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"2\"})\n+    public static void testB256toB128(byte[] input, byte[] output) {\n+        vectorDoubleExpandShrink(BSPEC256, BSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testB256toB128\")\n+    public static void runB256toB128() throws Throwable {\n+        runDoubleExpandShrinkHelper(BSPEC256, BSPEC128);\n+    }\n+\n+    @Test\n+    @IR(failOn = REINTERPRET_NODE)\n+    public static void testB256toB512(byte[] input, byte[] output) {\n+        vectorDoubleExpandShrink(BSPEC256, BSPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testB256toB512\")\n+    public static void runB256toB512() throws Throwable {\n+        runDoubleExpandShrinkHelper(BSPEC256, BSPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"2\"})\n+    public static void testB512toB64(byte[] input, byte[] output) {\n+        vectorDoubleExpandShrink(BSPEC512, BSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testB512toB64\")\n+    public static void runB512toB64() throws Throwable {\n+        runDoubleExpandShrinkHelper(BSPEC512, BSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"2\"})\n+    public static void testB512toB128(byte[] input, byte[] output) {\n+        vectorDoubleExpandShrink(BSPEC512, BSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testB512toB128\")\n+    public static void runB512toB128() throws Throwable {\n+        runDoubleExpandShrinkHelper(BSPEC512, BSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"2\"})\n+    public static void testB512toB256(byte[] input, byte[] output) {\n+        vectorDoubleExpandShrink(BSPEC512, BSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testB512toB256\")\n+    public static void runB512toB256() throws Throwable {\n+        runDoubleExpandShrinkHelper(BSPEC512, BSPEC256);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/reshape\/tests\/TestVectorDoubleExpandShrink.java","additions":169,"deletions":0,"binary":false,"changes":169,"status":"added"},{"patch":"@@ -0,0 +1,169 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.vectorapi.reshape.tests;\n+\n+import compiler.lib.ir_framework.IR;\n+import compiler.lib.ir_framework.Run;\n+import compiler.lib.ir_framework.Test;\n+\n+import static compiler.vectorapi.reshape.utils.VectorReshapeHelper.*;\n+\n+\/**\n+ *  This class contains method to ensure a resizing reinterpretation operations work as\n+ *  intended.\n+ *  In each test, the ReinterpretNode is expected to appear exactly once.\n+ *\/\n+public class TestVectorExpandShrink {\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testB64toB128(byte[] input, byte[] output) {\n+        vectorExpandShrink(BSPEC64, BSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testB64toB128\")\n+    public static void runB64toB128() throws Throwable {\n+        runExpandShrinkHelper(BSPEC64, BSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testB64toB256(byte[] input, byte[] output) {\n+        vectorExpandShrink(BSPEC64, BSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testB64toB256\")\n+    public static void runB64toB256() throws Throwable {\n+        runExpandShrinkHelper(BSPEC64, BSPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testB64toB512(byte[] input, byte[] output) {\n+        vectorExpandShrink(BSPEC64, BSPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testB64toB512\")\n+    public static void runB64toB512() throws Throwable {\n+        runExpandShrinkHelper(BSPEC64, BSPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testB128toB64(byte[] input, byte[] output) {\n+        vectorExpandShrink(BSPEC128, BSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testB128toB64\")\n+    public static void runB128toB64() throws Throwable {\n+        runExpandShrinkHelper(BSPEC128, BSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testB128toB256(byte[] input, byte[] output) {\n+        vectorExpandShrink(BSPEC128, BSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testB128toB256\")\n+    public static void runB128toB256() throws Throwable {\n+        runExpandShrinkHelper(BSPEC128, BSPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testB128toB512(byte[] input, byte[] output) {\n+        vectorExpandShrink(BSPEC128, BSPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testB128toB512\")\n+    public static void runB128toB512() throws Throwable {\n+        runExpandShrinkHelper(BSPEC128, BSPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testB256toB64(byte[] input, byte[] output) {\n+        vectorExpandShrink(BSPEC256, BSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testB256toB64\")\n+    public static void runB256toB64() throws Throwable {\n+        runExpandShrinkHelper(BSPEC256, BSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testB256toB128(byte[] input, byte[] output) {\n+        vectorExpandShrink(BSPEC256, BSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testB256toB128\")\n+    public static void runB256toB128() throws Throwable {\n+        runExpandShrinkHelper(BSPEC256, BSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testB256toB512(byte[] input, byte[] output) {\n+        vectorExpandShrink(BSPEC256, BSPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testB256toB512\")\n+    public static void runB256toB512() throws Throwable {\n+        runExpandShrinkHelper(BSPEC256, BSPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testB512toB64(byte[] input, byte[] output) {\n+        vectorExpandShrink(BSPEC512, BSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testB512toB64\")\n+    public static void runB512toB64() throws Throwable {\n+        runExpandShrinkHelper(BSPEC512, BSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testB512toB128(byte[] input, byte[] output) {\n+        vectorExpandShrink(BSPEC512, BSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testB512toB128\")\n+    public static void runB512toB128() throws Throwable {\n+        runExpandShrinkHelper(BSPEC512, BSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testB512toB256(byte[] input, byte[] output) {\n+        vectorExpandShrink(BSPEC512, BSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testB512toB256\")\n+    public static void runB512toB256() throws Throwable {\n+        runExpandShrinkHelper(BSPEC512, BSPEC256);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/reshape\/tests\/TestVectorExpandShrink.java","additions":169,"deletions":0,"binary":false,"changes":169,"status":"added"},{"patch":"@@ -0,0 +1,1360 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.vectorapi.reshape.tests;\n+\n+import compiler.lib.ir_framework.IR;\n+import compiler.lib.ir_framework.Run;\n+import compiler.lib.ir_framework.Test;\n+\n+import static compiler.vectorapi.reshape.utils.VectorReshapeHelper.*;\n+\n+\/**\n+ * This class contains methods to test for reinterpretation operations that reinterpret\n+ * a vector as a similar vector with another element type. It is complicated to verify\n+ * the IR in this case since a load\/store with respect to byte array will result in\n+ * additional ReinterpretNodes if the vector element type is not byte. As a result,\n+ * arguments need to be arrays of the correct type.\n+ * In each test, the ReinterpretNode is expected to appear exactly once.\n+ *\/\n+public class TestVectorRebracket {\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testB64toS64(byte[] input, short[] output) {\n+        vectorRebracket(BSPEC64, SSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testB64toS64\")\n+    public static void runB64toS64() throws Throwable {\n+        runRebracketHelper(BSPEC64, SSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testB64toI64(byte[] input, int[] output) {\n+        vectorRebracket(BSPEC64, ISPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testB64toI64\")\n+    public static void runB64toI64() throws Throwable {\n+        runRebracketHelper(BSPEC64, ISPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testB64toL64(byte[] input, long[] output) {\n+        vectorRebracket(BSPEC64, LSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testB64toL64\")\n+    public static void runB64toL64() throws Throwable {\n+        runRebracketHelper(BSPEC64, LSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testB64toF64(byte[] input, float[] output) {\n+        vectorRebracket(BSPEC64, FSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testB64toF64\")\n+    public static void runB64toF64() throws Throwable {\n+        runRebracketHelper(BSPEC64, FSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testB64toD64(byte[] input, double[] output) {\n+        vectorRebracket(BSPEC64, DSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testB64toD64\")\n+    public static void runB64toD64() throws Throwable {\n+        runRebracketHelper(BSPEC64, DSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testS64toB64(short[] input, byte[] output) {\n+        vectorRebracket(SSPEC64, BSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testS64toB64\")\n+    public static void runS64toB64() throws Throwable {\n+        runRebracketHelper(SSPEC64, BSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testS64toI64(short[] input, int[] output) {\n+        vectorRebracket(SSPEC64, ISPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testS64toI64\")\n+    public static void runS64toI64() throws Throwable {\n+        runRebracketHelper(SSPEC64, ISPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testS64toL64(short[] input, long[] output) {\n+        vectorRebracket(SSPEC64, LSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testS64toL64\")\n+    public static void runS64toL64() throws Throwable {\n+        runRebracketHelper(SSPEC64, LSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testS64toF64(short[] input, float[] output) {\n+        vectorRebracket(SSPEC64, FSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testS64toF64\")\n+    public static void runS64toF64() throws Throwable {\n+        runRebracketHelper(SSPEC64, FSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testS64toD64(short[] input, double[] output) {\n+        vectorRebracket(SSPEC64, DSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testS64toD64\")\n+    public static void runS64toD64() throws Throwable {\n+        runRebracketHelper(SSPEC64, DSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testI64toB64(int[] input, byte[] output) {\n+        vectorRebracket(ISPEC64, BSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testI64toB64\")\n+    public static void runI64toB64() throws Throwable {\n+        runRebracketHelper(ISPEC64, BSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testI64toS64(int[] input, short[] output) {\n+        vectorRebracket(ISPEC64, SSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testI64toS64\")\n+    public static void runI64toS64() throws Throwable {\n+        runRebracketHelper(ISPEC64, SSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testI64toL64(int[] input, long[] output) {\n+        vectorRebracket(ISPEC64, LSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testI64toL64\")\n+    public static void runI64toL64() throws Throwable {\n+        runRebracketHelper(ISPEC64, LSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testI64toF64(int[] input, float[] output) {\n+        vectorRebracket(ISPEC64, FSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testI64toF64\")\n+    public static void runI64toF64() throws Throwable {\n+        runRebracketHelper(ISPEC64, FSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testI64toD64(int[] input, double[] output) {\n+        vectorRebracket(ISPEC64, DSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testI64toD64\")\n+    public static void runI64toD64() throws Throwable {\n+        runRebracketHelper(ISPEC64, DSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testL64toB64(long[] input, byte[] output) {\n+        vectorRebracket(LSPEC64, BSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testL64toB64\")\n+    public static void runL64toB64() throws Throwable {\n+        runRebracketHelper(LSPEC64, BSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testL64toS64(long[] input, short[] output) {\n+        vectorRebracket(LSPEC64, SSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testL64toS64\")\n+    public static void runL64toS64() throws Throwable {\n+        runRebracketHelper(LSPEC64, SSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testL64toI64(long[] input, int[] output) {\n+        vectorRebracket(LSPEC64, ISPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testL64toI64\")\n+    public static void runL64toI64() throws Throwable {\n+        runRebracketHelper(LSPEC64, ISPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testL64toF64(long[] input, float[] output) {\n+        vectorRebracket(LSPEC64, FSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testL64toF64\")\n+    public static void runL64toF64() throws Throwable {\n+        runRebracketHelper(LSPEC64, FSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testL64toD64(long[] input, double[] output) {\n+        vectorRebracket(LSPEC64, DSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testL64toD64\")\n+    public static void runL64toD64() throws Throwable {\n+        runRebracketHelper(LSPEC64, DSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testF64toB64(float[] input, byte[] output) {\n+        vectorRebracket(FSPEC64, BSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testF64toB64\")\n+    public static void runF64toB64() throws Throwable {\n+        runRebracketHelper(FSPEC64, BSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testF64toS64(float[] input, short[] output) {\n+        vectorRebracket(FSPEC64, SSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testF64toS64\")\n+    public static void runF64toS64() throws Throwable {\n+        runRebracketHelper(FSPEC64, SSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testF64toI64(float[] input, int[] output) {\n+        vectorRebracket(FSPEC64, ISPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testF64toI64\")\n+    public static void runF64toI64() throws Throwable {\n+        runRebracketHelper(FSPEC64, ISPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testF64toL64(float[] input, long[] output) {\n+        vectorRebracket(FSPEC64, LSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testF64toL64\")\n+    public static void runF64toL64() throws Throwable {\n+        runRebracketHelper(FSPEC64, LSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testF64toD64(float[] input, double[] output) {\n+        vectorRebracket(FSPEC64, DSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testF64toD64\")\n+    public static void runF64toD64() throws Throwable {\n+        runRebracketHelper(FSPEC64, DSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testD64toB64(double[] input, byte[] output) {\n+        vectorRebracket(DSPEC64, BSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testD64toB64\")\n+    public static void runD64toB64() throws Throwable {\n+        runRebracketHelper(DSPEC64, BSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testD64toS64(double[] input, short[] output) {\n+        vectorRebracket(DSPEC64, SSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testD64toS64\")\n+    public static void runD64toS64() throws Throwable {\n+        runRebracketHelper(DSPEC64, SSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testD64toI64(double[] input, int[] output) {\n+        vectorRebracket(DSPEC64, ISPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testD64toI64\")\n+    public static void runD64toI64() throws Throwable {\n+        runRebracketHelper(DSPEC64, ISPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testD64toL64(double[] input, long[] output) {\n+        vectorRebracket(DSPEC64, LSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testD64toL64\")\n+    public static void runD64toL64() throws Throwable {\n+        runRebracketHelper(DSPEC64, LSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testD64toF64(double[] input, float[] output) {\n+        vectorRebracket(DSPEC64, FSPEC64, input, output);\n+    }\n+\n+    @Run(test = \"testD64toF64\")\n+    public static void runD64toF64() throws Throwable {\n+        runRebracketHelper(DSPEC64, FSPEC64);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testB128toS128(byte[] input, short[] output) {\n+        vectorRebracket(BSPEC128, SSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testB128toS128\")\n+    public static void runB128toS128() throws Throwable {\n+        runRebracketHelper(BSPEC128, SSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testB128toI128(byte[] input, int[] output) {\n+        vectorRebracket(BSPEC128, ISPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testB128toI128\")\n+    public static void runB128toI128() throws Throwable {\n+        runRebracketHelper(BSPEC128, ISPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testB128toL128(byte[] input, long[] output) {\n+        vectorRebracket(BSPEC128, LSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testB128toL128\")\n+    public static void runB128toL128() throws Throwable {\n+        runRebracketHelper(BSPEC128, LSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testB128toF128(byte[] input, float[] output) {\n+        vectorRebracket(BSPEC128, FSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testB128toF128\")\n+    public static void runB128toF128() throws Throwable {\n+        runRebracketHelper(BSPEC128, FSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testB128toD128(byte[] input, double[] output) {\n+        vectorRebracket(BSPEC128, DSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testB128toD128\")\n+    public static void runB128toD128() throws Throwable {\n+        runRebracketHelper(BSPEC128, DSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testS128toB128(short[] input, byte[] output) {\n+        vectorRebracket(SSPEC128, BSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testS128toB128\")\n+    public static void runS128toB128() throws Throwable {\n+        runRebracketHelper(SSPEC128, BSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testS128toI128(short[] input, int[] output) {\n+        vectorRebracket(SSPEC128, ISPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testS128toI128\")\n+    public static void runS128toI128() throws Throwable {\n+        runRebracketHelper(SSPEC128, ISPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testS128toL128(short[] input, long[] output) {\n+        vectorRebracket(SSPEC128, LSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testS128toL128\")\n+    public static void runS128toL128() throws Throwable {\n+        runRebracketHelper(SSPEC128, LSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testS128toF128(short[] input, float[] output) {\n+        vectorRebracket(SSPEC128, FSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testS128toF128\")\n+    public static void runS128toF128() throws Throwable {\n+        runRebracketHelper(SSPEC128, FSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testS128toD128(short[] input, double[] output) {\n+        vectorRebracket(SSPEC128, DSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testS128toD128\")\n+    public static void runS128toD128() throws Throwable {\n+        runRebracketHelper(SSPEC128, DSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testI128toB128(int[] input, byte[] output) {\n+        vectorRebracket(ISPEC128, BSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testI128toB128\")\n+    public static void runI128toB128() throws Throwable {\n+        runRebracketHelper(ISPEC128, BSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testI128toS128(int[] input, short[] output) {\n+        vectorRebracket(ISPEC128, SSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testI128toS128\")\n+    public static void runI128toS128() throws Throwable {\n+        runRebracketHelper(ISPEC128, SSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testI128toL128(int[] input, long[] output) {\n+        vectorRebracket(ISPEC128, LSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testI128toL128\")\n+    public static void runI128toL128() throws Throwable {\n+        runRebracketHelper(ISPEC128, LSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testI128toF128(int[] input, float[] output) {\n+        vectorRebracket(ISPEC128, FSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testI128toF128\")\n+    public static void runI128toF128() throws Throwable {\n+        runRebracketHelper(ISPEC128, FSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testI128toD128(int[] input, double[] output) {\n+        vectorRebracket(ISPEC128, DSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testI128toD128\")\n+    public static void runI128toD128() throws Throwable {\n+        runRebracketHelper(ISPEC128, DSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testL128toB128(long[] input, byte[] output) {\n+        vectorRebracket(LSPEC128, BSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testL128toB128\")\n+    public static void runL128toB128() throws Throwable {\n+        runRebracketHelper(LSPEC128, BSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testL128toS128(long[] input, short[] output) {\n+        vectorRebracket(LSPEC128, SSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testL128toS128\")\n+    public static void runL128toS128() throws Throwable {\n+        runRebracketHelper(LSPEC128, SSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testL128toI128(long[] input, int[] output) {\n+        vectorRebracket(LSPEC128, ISPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testL128toI128\")\n+    public static void runL128toI128() throws Throwable {\n+        runRebracketHelper(LSPEC128, ISPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testL128toF128(long[] input, float[] output) {\n+        vectorRebracket(LSPEC128, FSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testL128toF128\")\n+    public static void runL128toF128() throws Throwable {\n+        runRebracketHelper(LSPEC128, FSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testL128toD128(long[] input, double[] output) {\n+        vectorRebracket(LSPEC128, DSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testL128toD128\")\n+    public static void runL128toD128() throws Throwable {\n+        runRebracketHelper(LSPEC128, DSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testF128toB128(float[] input, byte[] output) {\n+        vectorRebracket(FSPEC128, BSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testF128toB128\")\n+    public static void runF128toB128() throws Throwable {\n+        runRebracketHelper(FSPEC128, BSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testF128toS128(float[] input, short[] output) {\n+        vectorRebracket(FSPEC128, SSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testF128toS128\")\n+    public static void runF128toS128() throws Throwable {\n+        runRebracketHelper(FSPEC128, SSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testF128toI128(float[] input, int[] output) {\n+        vectorRebracket(FSPEC128, ISPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testF128toI128\")\n+    public static void runF128toI128() throws Throwable {\n+        runRebracketHelper(FSPEC128, ISPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testF128toL128(float[] input, long[] output) {\n+        vectorRebracket(FSPEC128, LSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testF128toL128\")\n+    public static void runF128toL128() throws Throwable {\n+        runRebracketHelper(FSPEC128, LSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testF128toD128(float[] input, double[] output) {\n+        vectorRebracket(FSPEC128, DSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testF128toD128\")\n+    public static void runF128toD128() throws Throwable {\n+        runRebracketHelper(FSPEC128, DSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testD128toB128(double[] input, byte[] output) {\n+        vectorRebracket(DSPEC128, BSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testD128toB128\")\n+    public static void runD128toB128() throws Throwable {\n+        runRebracketHelper(DSPEC128, BSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testD128toS128(double[] input, short[] output) {\n+        vectorRebracket(DSPEC128, SSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testD128toS128\")\n+    public static void runD128toS128() throws Throwable {\n+        runRebracketHelper(DSPEC128, SSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testD128toI128(double[] input, int[] output) {\n+        vectorRebracket(DSPEC128, ISPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testD128toI128\")\n+    public static void runD128toI128() throws Throwable {\n+        runRebracketHelper(DSPEC128, ISPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testD128toL128(double[] input, long[] output) {\n+        vectorRebracket(DSPEC128, LSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testD128toL128\")\n+    public static void runD128toL128() throws Throwable {\n+        runRebracketHelper(DSPEC128, LSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testD128toF128(double[] input, float[] output) {\n+        vectorRebracket(DSPEC128, FSPEC128, input, output);\n+    }\n+\n+    @Run(test = \"testD128toF128\")\n+    public static void runD128toF128() throws Throwable {\n+        runRebracketHelper(DSPEC128, FSPEC128);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testB256toS256(byte[] input, short[] output) {\n+        vectorRebracket(BSPEC256, SSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testB256toS256\")\n+    public static void runB256toS256() throws Throwable {\n+        runRebracketHelper(BSPEC256, SSPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testB256toI256(byte[] input, int[] output) {\n+        vectorRebracket(BSPEC256, ISPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testB256toI256\")\n+    public static void runB256toI256() throws Throwable {\n+        runRebracketHelper(BSPEC256, ISPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testB256toL256(byte[] input, long[] output) {\n+        vectorRebracket(BSPEC256, LSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testB256toL256\")\n+    public static void runB256toL256() throws Throwable {\n+        runRebracketHelper(BSPEC256, LSPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testB256toF256(byte[] input, float[] output) {\n+        vectorRebracket(BSPEC256, FSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testB256toF256\")\n+    public static void runB256toF256() throws Throwable {\n+        runRebracketHelper(BSPEC256, FSPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testB256toD256(byte[] input, double[] output) {\n+        vectorRebracket(BSPEC256, DSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testB256toD256\")\n+    public static void runB256toD256() throws Throwable {\n+        runRebracketHelper(BSPEC256, DSPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testS256toB256(short[] input, byte[] output) {\n+        vectorRebracket(SSPEC256, BSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testS256toB256\")\n+    public static void runS256toB256() throws Throwable {\n+        runRebracketHelper(SSPEC256, BSPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testS256toI256(short[] input, int[] output) {\n+        vectorRebracket(SSPEC256, ISPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testS256toI256\")\n+    public static void runS256toI256() throws Throwable {\n+        runRebracketHelper(SSPEC256, ISPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testS256toL256(short[] input, long[] output) {\n+        vectorRebracket(SSPEC256, LSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testS256toL256\")\n+    public static void runS256toL256() throws Throwable {\n+        runRebracketHelper(SSPEC256, LSPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testS256toF256(short[] input, float[] output) {\n+        vectorRebracket(SSPEC256, FSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testS256toF256\")\n+    public static void runS256toF256() throws Throwable {\n+        runRebracketHelper(SSPEC256, FSPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testS256toD256(short[] input, double[] output) {\n+        vectorRebracket(SSPEC256, DSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testS256toD256\")\n+    public static void runS256toD256() throws Throwable {\n+        runRebracketHelper(SSPEC256, DSPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testI256toB256(int[] input, byte[] output) {\n+        vectorRebracket(ISPEC256, BSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testI256toB256\")\n+    public static void runI256toB256() throws Throwable {\n+        runRebracketHelper(ISPEC256, BSPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testI256toS256(int[] input, short[] output) {\n+        vectorRebracket(ISPEC256, SSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testI256toS256\")\n+    public static void runI256toS256() throws Throwable {\n+        runRebracketHelper(ISPEC256, SSPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testI256toL256(int[] input, long[] output) {\n+        vectorRebracket(ISPEC256, LSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testI256toL256\")\n+    public static void runI256toL256() throws Throwable {\n+        runRebracketHelper(ISPEC256, LSPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testI256toF256(int[] input, float[] output) {\n+        vectorRebracket(ISPEC256, FSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testI256toF256\")\n+    public static void runI256toF256() throws Throwable {\n+        runRebracketHelper(ISPEC256, FSPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testI256toD256(int[] input, double[] output) {\n+        vectorRebracket(ISPEC256, DSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testI256toD256\")\n+    public static void runI256toD256() throws Throwable {\n+        runRebracketHelper(ISPEC256, DSPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testL256toB256(long[] input, byte[] output) {\n+        vectorRebracket(LSPEC256, BSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testL256toB256\")\n+    public static void runL256toB256() throws Throwable {\n+        runRebracketHelper(LSPEC256, BSPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testL256toS256(long[] input, short[] output) {\n+        vectorRebracket(LSPEC256, SSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testL256toS256\")\n+    public static void runL256toS256() throws Throwable {\n+        runRebracketHelper(LSPEC256, SSPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testL256toI256(long[] input, int[] output) {\n+        vectorRebracket(LSPEC256, ISPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testL256toI256\")\n+    public static void runL256toI256() throws Throwable {\n+        runRebracketHelper(LSPEC256, ISPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testL256toF256(long[] input, float[] output) {\n+        vectorRebracket(LSPEC256, FSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testL256toF256\")\n+    public static void runL256toF256() throws Throwable {\n+        runRebracketHelper(LSPEC256, FSPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testL256toD256(long[] input, double[] output) {\n+        vectorRebracket(LSPEC256, DSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testL256toD256\")\n+    public static void runL256toD256() throws Throwable {\n+        runRebracketHelper(LSPEC256, DSPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testF256toB256(float[] input, byte[] output) {\n+        vectorRebracket(FSPEC256, BSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testF256toB256\")\n+    public static void runF256toB256() throws Throwable {\n+        runRebracketHelper(FSPEC256, BSPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testF256toS256(float[] input, short[] output) {\n+        vectorRebracket(FSPEC256, SSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testF256toS256\")\n+    public static void runF256toS256() throws Throwable {\n+        runRebracketHelper(FSPEC256, SSPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testF256toI256(float[] input, int[] output) {\n+        vectorRebracket(FSPEC256, ISPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testF256toI256\")\n+    public static void runF256toI256() throws Throwable {\n+        runRebracketHelper(FSPEC256, ISPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testF256toL256(float[] input, long[] output) {\n+        vectorRebracket(FSPEC256, LSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testF256toL256\")\n+    public static void runF256toL256() throws Throwable {\n+        runRebracketHelper(FSPEC256, LSPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testF256toD256(float[] input, double[] output) {\n+        vectorRebracket(FSPEC256, DSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testF256toD256\")\n+    public static void runF256toD256() throws Throwable {\n+        runRebracketHelper(FSPEC256, DSPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testD256toB256(double[] input, byte[] output) {\n+        vectorRebracket(DSPEC256, BSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testD256toB256\")\n+    public static void runD256toB256() throws Throwable {\n+        runRebracketHelper(DSPEC256, BSPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testD256toS256(double[] input, short[] output) {\n+        vectorRebracket(DSPEC256, SSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testD256toS256\")\n+    public static void runD256toS256() throws Throwable {\n+        runRebracketHelper(DSPEC256, SSPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testD256toI256(double[] input, int[] output) {\n+        vectorRebracket(DSPEC256, ISPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testD256toI256\")\n+    public static void runD256toI256() throws Throwable {\n+        runRebracketHelper(DSPEC256, ISPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testD256toL256(double[] input, long[] output) {\n+        vectorRebracket(DSPEC256, LSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testD256toL256\")\n+    public static void runD256toL256() throws Throwable {\n+        runRebracketHelper(DSPEC256, LSPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testD256toF256(double[] input, float[] output) {\n+        vectorRebracket(DSPEC256, FSPEC256, input, output);\n+    }\n+\n+    @Run(test = \"testD256toF256\")\n+    public static void runD256toF256() throws Throwable {\n+        runRebracketHelper(DSPEC256, FSPEC256);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testB512toS512(byte[] input, short[] output) {\n+        vectorRebracket(BSPEC512, SSPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testB512toS512\")\n+    public static void runB512toS512() throws Throwable {\n+        runRebracketHelper(BSPEC512, SSPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testB512toI512(byte[] input, int[] output) {\n+        vectorRebracket(BSPEC512, ISPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testB512toI512\")\n+    public static void runB512toI512() throws Throwable {\n+        runRebracketHelper(BSPEC512, ISPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testB512toL512(byte[] input, long[] output) {\n+        vectorRebracket(BSPEC512, LSPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testB512toL512\")\n+    public static void runB512toL512() throws Throwable {\n+        runRebracketHelper(BSPEC512, LSPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testB512toF512(byte[] input, float[] output) {\n+        vectorRebracket(BSPEC512, FSPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testB512toF512\")\n+    public static void runB512toF512() throws Throwable {\n+        runRebracketHelper(BSPEC512, FSPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testB512toD512(byte[] input, double[] output) {\n+        vectorRebracket(BSPEC512, DSPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testB512toD512\")\n+    public static void runB512toD512() throws Throwable {\n+        runRebracketHelper(BSPEC512, DSPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testS512toB512(short[] input, byte[] output) {\n+        vectorRebracket(SSPEC512, BSPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testS512toB512\")\n+    public static void runS512toB512() throws Throwable {\n+        runRebracketHelper(SSPEC512, BSPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testS512toI512(short[] input, int[] output) {\n+        vectorRebracket(SSPEC512, ISPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testS512toI512\")\n+    public static void runS512toI512() throws Throwable {\n+        runRebracketHelper(SSPEC512, ISPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testS512toL512(short[] input, long[] output) {\n+        vectorRebracket(SSPEC512, LSPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testS512toL512\")\n+    public static void runS512toL512() throws Throwable {\n+        runRebracketHelper(SSPEC512, LSPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testS512toF512(short[] input, float[] output) {\n+        vectorRebracket(SSPEC512, FSPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testS512toF512\")\n+    public static void runS512toF512() throws Throwable {\n+        runRebracketHelper(SSPEC512, FSPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testS512toD512(short[] input, double[] output) {\n+        vectorRebracket(SSPEC512, DSPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testS512toD512\")\n+    public static void runS512toD512() throws Throwable {\n+        runRebracketHelper(SSPEC512, DSPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testI512toB512(int[] input, byte[] output) {\n+        vectorRebracket(ISPEC512, BSPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testI512toB512\")\n+    public static void runI512toB512() throws Throwable {\n+        runRebracketHelper(ISPEC512, BSPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testI512toS512(int[] input, short[] output) {\n+        vectorRebracket(ISPEC512, SSPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testI512toS512\")\n+    public static void runI512toS512() throws Throwable {\n+        runRebracketHelper(ISPEC512, SSPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testI512toL512(int[] input, long[] output) {\n+        vectorRebracket(ISPEC512, LSPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testI512toL512\")\n+    public static void runI512toL512() throws Throwable {\n+        runRebracketHelper(ISPEC512, LSPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testI512toF512(int[] input, float[] output) {\n+        vectorRebracket(ISPEC512, FSPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testI512toF512\")\n+    public static void runI512toF512() throws Throwable {\n+        runRebracketHelper(ISPEC512, FSPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testI512toD512(int[] input, double[] output) {\n+        vectorRebracket(ISPEC512, DSPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testI512toD512\")\n+    public static void runI512toD512() throws Throwable {\n+        runRebracketHelper(ISPEC512, DSPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testL512toB512(long[] input, byte[] output) {\n+        vectorRebracket(LSPEC512, BSPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testL512toB512\")\n+    public static void runL512toB512() throws Throwable {\n+        runRebracketHelper(LSPEC512, BSPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testL512toS512(long[] input, short[] output) {\n+        vectorRebracket(LSPEC512, SSPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testL512toS512\")\n+    public static void runL512toS512() throws Throwable {\n+        runRebracketHelper(LSPEC512, SSPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testL512toI512(long[] input, int[] output) {\n+        vectorRebracket(LSPEC512, ISPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testL512toI512\")\n+    public static void runL512toI512() throws Throwable {\n+        runRebracketHelper(LSPEC512, ISPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testL512toF512(long[] input, float[] output) {\n+        vectorRebracket(LSPEC512, FSPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testL512toF512\")\n+    public static void runL512toF512() throws Throwable {\n+        runRebracketHelper(LSPEC512, FSPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testL512toD512(long[] input, double[] output) {\n+        vectorRebracket(LSPEC512, DSPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testL512toD512\")\n+    public static void runL512toD512() throws Throwable {\n+        runRebracketHelper(LSPEC512, DSPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testF512toB512(float[] input, byte[] output) {\n+        vectorRebracket(FSPEC512, BSPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testF512toB512\")\n+    public static void runF512toB512() throws Throwable {\n+        runRebracketHelper(FSPEC512, BSPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testF512toS512(float[] input, short[] output) {\n+        vectorRebracket(FSPEC512, SSPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testF512toS512\")\n+    public static void runF512toS512() throws Throwable {\n+        runRebracketHelper(FSPEC512, SSPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testF512toI512(float[] input, int[] output) {\n+        vectorRebracket(FSPEC512, ISPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testF512toI512\")\n+    public static void runF512toI512() throws Throwable {\n+        runRebracketHelper(FSPEC512, ISPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testF512toL512(float[] input, long[] output) {\n+        vectorRebracket(FSPEC512, LSPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testF512toL512\")\n+    public static void runF512toL512() throws Throwable {\n+        runRebracketHelper(FSPEC512, LSPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testF512toD512(float[] input, double[] output) {\n+        vectorRebracket(FSPEC512, DSPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testF512toD512\")\n+    public static void runF512toD512() throws Throwable {\n+        runRebracketHelper(FSPEC512, DSPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testD512toB512(double[] input, byte[] output) {\n+        vectorRebracket(DSPEC512, BSPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testD512toB512\")\n+    public static void runD512toB512() throws Throwable {\n+        runRebracketHelper(DSPEC512, BSPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testD512toS512(double[] input, short[] output) {\n+        vectorRebracket(DSPEC512, SSPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testD512toS512\")\n+    public static void runD512toS512() throws Throwable {\n+        runRebracketHelper(DSPEC512, SSPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testD512toI512(double[] input, int[] output) {\n+        vectorRebracket(DSPEC512, ISPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testD512toI512\")\n+    public static void runD512toI512() throws Throwable {\n+        runRebracketHelper(DSPEC512, ISPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testD512toL512(double[] input, long[] output) {\n+        vectorRebracket(DSPEC512, LSPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testD512toL512\")\n+    public static void runD512toL512() throws Throwable {\n+        runRebracketHelper(DSPEC512, LSPEC512);\n+    }\n+\n+    @Test\n+    @IR(counts = {REINTERPRET_NODE, \"1\"})\n+    public static void testD512toF512(double[] input, float[] output) {\n+        vectorRebracket(DSPEC512, FSPEC512, input, output);\n+    }\n+\n+    @Run(test = \"testD512toF512\")\n+    public static void runD512toF512() throws Throwable {\n+        runRebracketHelper(DSPEC512, FSPEC512);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/reshape\/tests\/TestVectorRebracket.java","additions":1360,"deletions":0,"binary":false,"changes":1360,"status":"added"},{"patch":"@@ -0,0 +1,229 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.vectorapi.reshape.utils;\n+\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import static compiler.vectorapi.reshape.utils.VectorReshapeHelper.*;\n+import static compiler.vectorapi.reshape.utils.VectorSpeciesPair.makePair;\n+\n+\/**\n+ * The cast intrinsics implemented on each platform, commented out tests are the ones that are\n+ * supposed to work but currently don't.\n+ *\/\n+public class TestCastMethods {\n+    public static final List<VectorSpeciesPair> AVX1_CAST_TESTS = List.of(\n+            makePair(BSPEC64, SSPEC64),\n+            makePair(BSPEC64, SSPEC128),\n+            makePair(BSPEC64, ISPEC128),\n+            makePair(BSPEC64, FSPEC128),\n+            \/\/ makePair(BSPEC64, DSPEC256),\n+            makePair(SSPEC64, BSPEC64),\n+            makePair(SSPEC128, BSPEC64),\n+            makePair(SSPEC64, ISPEC64),\n+            makePair(SSPEC64, ISPEC128),\n+            makePair(SSPEC64, LSPEC128),\n+            makePair(SSPEC64, FSPEC64),\n+            makePair(SSPEC64, FSPEC128),\n+            makePair(SSPEC64, DSPEC128),\n+            \/\/ makePair(SSPEC64, DSPEC256),\n+            makePair(ISPEC128, BSPEC64),\n+            makePair(ISPEC64, SSPEC64),\n+            makePair(ISPEC128, SSPEC64),\n+            makePair(ISPEC64, LSPEC128),\n+            makePair(ISPEC64, FSPEC64),\n+            makePair(ISPEC128, FSPEC128),\n+            makePair(ISPEC64, DSPEC128),\n+            makePair(ISPEC128, DSPEC256),\n+            makePair(LSPEC128, SSPEC64),\n+            makePair(LSPEC128, ISPEC64),\n+            makePair(FSPEC64, ISPEC64),\n+            makePair(FSPEC128, ISPEC128),\n+            makePair(FSPEC64, DSPEC128),\n+            makePair(FSPEC128, DSPEC256),\n+            makePair(DSPEC128, FSPEC64)\n+            \/\/ makePair(DSPEC256, FSPEC128)\n+    );\n+\n+    public static final List<VectorSpeciesPair> AVX2_CAST_TESTS = Stream.concat(AVX1_CAST_TESTS.stream(), List.of(\n+            makePair(BSPEC128, SSPEC256),\n+            makePair(BSPEC64, ISPEC256),\n+            makePair(BSPEC64, LSPEC256),\n+            makePair(BSPEC64, FSPEC256),\n+            makePair(SSPEC256, BSPEC128),\n+            makePair(SSPEC128, ISPEC256),\n+            makePair(SSPEC64, LSPEC256),\n+            makePair(SSPEC128, FSPEC256),\n+            makePair(ISPEC256, BSPEC64),\n+            makePair(ISPEC256, SSPEC128),\n+            makePair(ISPEC128, LSPEC256),\n+            makePair(ISPEC256, FSPEC256),\n+            makePair(LSPEC256, BSPEC64),\n+            makePair(LSPEC256, SSPEC64),\n+            makePair(LSPEC256, ISPEC128),\n+            makePair(FSPEC256, ISPEC256)\n+    ).stream()).toList();\n+\n+    public static final List<VectorSpeciesPair> AVX512_CAST_TESTS = Stream.concat(AVX2_CAST_TESTS.stream(), List.of(\n+            makePair(BSPEC256, SSPEC512),\n+            makePair(BSPEC128, ISPEC512),\n+            makePair(BSPEC64, LSPEC512),\n+            makePair(BSPEC128, FSPEC512),\n+            makePair(BSPEC64, DSPEC512),\n+            makePair(SSPEC512, BSPEC256),\n+            makePair(SSPEC256, ISPEC512),\n+            makePair(SSPEC128, LSPEC512),\n+            makePair(SSPEC256, FSPEC512),\n+            makePair(SSPEC128, DSPEC512),\n+            makePair(ISPEC512, BSPEC128),\n+            makePair(ISPEC512, SSPEC256),\n+            makePair(ISPEC256, LSPEC512),\n+            makePair(ISPEC512, FSPEC512),\n+            makePair(ISPEC256, DSPEC512),\n+            makePair(LSPEC512, BSPEC64),\n+            makePair(LSPEC512, SSPEC128),\n+            makePair(LSPEC512, ISPEC256),\n+            makePair(FSPEC512, ISPEC512),\n+            makePair(FSPEC256, DSPEC512),\n+            makePair(DSPEC512, FSPEC256)\n+    ).stream()).toList();\n+\n+    public static final List<VectorSpeciesPair> AVX512DQ_CAST_TESTS = Stream.concat(AVX512_CAST_TESTS.stream(), List.of(\n+            makePair(LSPEC128, DSPEC128),\n+            makePair(LSPEC256, DSPEC256),\n+            makePair(LSPEC512, DSPEC512),\n+            makePair(DSPEC128, LSPEC128),\n+            makePair(DSPEC256, LSPEC256),\n+            makePair(DSPEC512, LSPEC512)\n+    ).stream()).toList();\n+\n+    public static final List<VectorSpeciesPair> SVE_CAST_TESTS = List.of(\n+            makePair(BSPEC64, SSPEC128),\n+            makePair(BSPEC128, SSPEC256),\n+            makePair(BSPEC256, SSPEC512),\n+            makePair(BSPEC64, ISPEC256),\n+            makePair(BSPEC128, ISPEC512),\n+            makePair(BSPEC64, LSPEC512),\n+            makePair(BSPEC64, FSPEC256),\n+            makePair(BSPEC128, FSPEC512),\n+            makePair(BSPEC64, DSPEC512),\n+            makePair(SSPEC128, BSPEC64),\n+            makePair(SSPEC256, BSPEC128),\n+            makePair(SSPEC512, BSPEC256),\n+            makePair(SSPEC64, ISPEC128),\n+            makePair(SSPEC128, ISPEC256),\n+            makePair(SSPEC256, ISPEC512),\n+            makePair(SSPEC64, LSPEC256),\n+            makePair(SSPEC128, LSPEC512),\n+            makePair(SSPEC64, FSPEC128),\n+            makePair(SSPEC128, FSPEC256),\n+            makePair(SSPEC256, FSPEC512),\n+            makePair(SSPEC64, DSPEC256),\n+            makePair(SSPEC128, DSPEC512),\n+            makePair(ISPEC256, BSPEC64),\n+            makePair(ISPEC512, BSPEC128),\n+            makePair(ISPEC128, SSPEC64),\n+            makePair(ISPEC256, SSPEC128),\n+            makePair(ISPEC512, SSPEC256),\n+            makePair(ISPEC64, LSPEC128),\n+            makePair(ISPEC128, LSPEC256),\n+            makePair(ISPEC256, LSPEC512),\n+            makePair(ISPEC64, FSPEC64),\n+            makePair(ISPEC128, FSPEC128),\n+            makePair(ISPEC256, FSPEC256),\n+            makePair(ISPEC512, FSPEC512),\n+            makePair(ISPEC64, DSPEC128),\n+            makePair(ISPEC128, DSPEC256),\n+            makePair(ISPEC256, DSPEC512),\n+            makePair(LSPEC512, BSPEC64),\n+            makePair(LSPEC256, SSPEC64),\n+            makePair(LSPEC512, SSPEC128),\n+            makePair(LSPEC128, ISPEC64),\n+            makePair(LSPEC256, ISPEC128),\n+            makePair(LSPEC512, ISPEC256),\n+            makePair(LSPEC128, FSPEC64),\n+            makePair(LSPEC256, FSPEC128),\n+            makePair(LSPEC512, FSPEC256),\n+            makePair(LSPEC128, DSPEC128),\n+            makePair(LSPEC256, DSPEC256),\n+            makePair(LSPEC512, DSPEC512),\n+            makePair(FSPEC256, BSPEC64),\n+            makePair(FSPEC512, BSPEC128),\n+            makePair(FSPEC128, SSPEC64),\n+            makePair(FSPEC256, SSPEC128),\n+            makePair(FSPEC512, SSPEC256),\n+            makePair(FSPEC64, ISPEC64),\n+            makePair(FSPEC128, ISPEC128),\n+            makePair(FSPEC256, ISPEC256),\n+            makePair(FSPEC512, ISPEC512),\n+            makePair(FSPEC64, LSPEC128),\n+            makePair(FSPEC128, LSPEC256),\n+            makePair(FSPEC256, LSPEC512),\n+            makePair(FSPEC64, DSPEC128),\n+            makePair(FSPEC128, DSPEC256),\n+            makePair(FSPEC256, DSPEC512),\n+            makePair(DSPEC512, BSPEC64),\n+            makePair(DSPEC256, SSPEC64),\n+            makePair(DSPEC512, SSPEC128),\n+            makePair(DSPEC128, ISPEC64),\n+            makePair(DSPEC256, ISPEC128),\n+            makePair(DSPEC512, ISPEC256),\n+            makePair(DSPEC128, LSPEC128),\n+            makePair(DSPEC256, LSPEC256),\n+            makePair(DSPEC512, LSPEC512),\n+            makePair(DSPEC128, FSPEC64),\n+            makePair(DSPEC256, FSPEC128),\n+            makePair(DSPEC512, FSPEC256)\n+    );\n+\n+    public static final List<VectorSpeciesPair> NEON_CAST_TESTS = List.of(\n+            makePair(BSPEC64, SSPEC64),\n+            makePair(BSPEC64, SSPEC128),\n+            makePair(BSPEC64, ISPEC128),\n+            makePair(BSPEC64, FSPEC128),\n+            makePair(SSPEC64, BSPEC64),\n+            makePair(SSPEC128, BSPEC64),\n+            makePair(SSPEC64, ISPEC128),\n+            makePair(SSPEC64, FSPEC128),\n+            makePair(ISPEC128, BSPEC64),\n+            makePair(ISPEC128, SSPEC64),\n+            makePair(ISPEC64, LSPEC128),\n+            makePair(ISPEC64, FSPEC64),\n+            makePair(ISPEC128, FSPEC128),\n+            makePair(ISPEC64, DSPEC128),\n+            makePair(LSPEC128, ISPEC64),\n+            makePair(LSPEC128, FSPEC64),\n+            makePair(LSPEC128, DSPEC128),\n+            makePair(FSPEC128, BSPEC64),\n+            makePair(FSPEC128, SSPEC64),\n+            makePair(FSPEC64, ISPEC64),\n+            makePair(FSPEC128, ISPEC128),\n+            makePair(FSPEC64, LSPEC128),\n+            makePair(FSPEC64, DSPEC128),\n+            makePair(DSPEC128, ISPEC64),\n+            makePair(DSPEC128, LSPEC128),\n+            makePair(DSPEC128, FSPEC64)\n+    );\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/reshape\/utils\/TestCastMethods.java","additions":229,"deletions":0,"binary":false,"changes":229,"status":"added"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.vectorapi.reshape.utils;\n+\n+import jdk.internal.misc.Unsafe;\n+\n+\/**\n+ * Unsafe to check for correctness of reinterpret operations. May be replaced with foreign API later.\n+ *\/\n+public class UnsafeUtils {\n+    private static final Unsafe UNSAFE = Unsafe.getUnsafe();\n+\n+    public static long arrayBase(Class<?> etype) {\n+        return UNSAFE.arrayBaseOffset(etype.arrayType());\n+    }\n+\n+    public static int getByte(Object o, long base, int i) {\n+        \/\/ This is technically an UB, what we need is UNSAFE.getByteUnaligned but they seem to be equivalent\n+        return UNSAFE.getByte(o, base + i);\n+    }\n+\n+    public static void putByte(Object o, long base, int i, int value) {\n+        UNSAFE.putByte(o, base + i, (byte)value);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/reshape\/utils\/UnsafeUtils.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -0,0 +1,372 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.vectorapi.reshape.utils;\n+\n+import compiler.lib.ir_framework.ForceInline;\n+import compiler.lib.ir_framework.IRNode;\n+import compiler.lib.ir_framework.TestFramework;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.lang.invoke.VarHandle;\n+import java.lang.reflect.Array;\n+import java.nio.ByteOrder;\n+import java.util.List;\n+import java.util.random.RandomGenerator;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import jdk.incubator.vector.*;\n+import jdk.test.lib.Asserts;\n+\n+public class VectorReshapeHelper {\n+    public static final int INVOCATIONS = 10_000;\n+\n+    public static final VectorSpecies<Byte>    BSPEC64  =   ByteVector.SPECIES_64;\n+    public static final VectorSpecies<Short>   SSPEC64  =  ShortVector.SPECIES_64;\n+    public static final VectorSpecies<Integer> ISPEC64  =    IntVector.SPECIES_64;\n+    public static final VectorSpecies<Long>    LSPEC64  =   LongVector.SPECIES_64;\n+    public static final VectorSpecies<Float>   FSPEC64  =  FloatVector.SPECIES_64;\n+    public static final VectorSpecies<Double>  DSPEC64  = DoubleVector.SPECIES_64;\n+\n+    public static final VectorSpecies<Byte>    BSPEC128 =   ByteVector.SPECIES_128;\n+    public static final VectorSpecies<Short>   SSPEC128 =  ShortVector.SPECIES_128;\n+    public static final VectorSpecies<Integer> ISPEC128 =    IntVector.SPECIES_128;\n+    public static final VectorSpecies<Long>    LSPEC128 =   LongVector.SPECIES_128;\n+    public static final VectorSpecies<Float>   FSPEC128 =  FloatVector.SPECIES_128;\n+    public static final VectorSpecies<Double>  DSPEC128 = DoubleVector.SPECIES_128;\n+\n+    public static final VectorSpecies<Byte>    BSPEC256 =   ByteVector.SPECIES_256;\n+    public static final VectorSpecies<Short>   SSPEC256 =  ShortVector.SPECIES_256;\n+    public static final VectorSpecies<Integer> ISPEC256 =    IntVector.SPECIES_256;\n+    public static final VectorSpecies<Long>    LSPEC256 =   LongVector.SPECIES_256;\n+    public static final VectorSpecies<Float>   FSPEC256 =  FloatVector.SPECIES_256;\n+    public static final VectorSpecies<Double>  DSPEC256 = DoubleVector.SPECIES_256;\n+\n+    public static final VectorSpecies<Byte>    BSPEC512 =   ByteVector.SPECIES_512;\n+    public static final VectorSpecies<Short>   SSPEC512 =  ShortVector.SPECIES_512;\n+    public static final VectorSpecies<Integer> ISPEC512 =    IntVector.SPECIES_512;\n+    public static final VectorSpecies<Long>    LSPEC512 =   LongVector.SPECIES_512;\n+    public static final VectorSpecies<Float>   FSPEC512 =  FloatVector.SPECIES_512;\n+    public static final VectorSpecies<Double>  DSPEC512 = DoubleVector.SPECIES_512;\n+\n+    public static final String B2X_NODE  = IRNode.VECTOR_CAST_B2X;\n+    public static final String S2X_NODE  = IRNode.VECTOR_CAST_S2X;\n+    public static final String I2X_NODE  = IRNode.VECTOR_CAST_I2X;\n+    public static final String L2X_NODE  = IRNode.VECTOR_CAST_L2X;\n+    public static final String F2X_NODE  = IRNode.VECTOR_CAST_F2X;\n+    public static final String D2X_NODE  = IRNode.VECTOR_CAST_D2X;\n+    public static final String REINTERPRET_NODE = IRNode.VECTOR_REINTERPRET;\n+\n+    public static void runMainHelper(Class<?> testClass, Stream<VectorSpeciesPair> testMethods, String... flags) {\n+        var test = new TestFramework(testClass);\n+        test.setDefaultWarmup(1);\n+        test.addHelperClasses(VectorReshapeHelper.class);\n+        test.addFlags(\"--add-modules=jdk.incubator.vector\");\n+        test.addFlags(flags);\n+        String testMethodNames = testMethods\n+                .filter(p -> p.isp().length() <= VectorSpecies.ofLargestShape(p.isp().elementType()).length())\n+                .filter(p -> p.osp().length() <= VectorSpecies.ofLargestShape(p.osp().elementType()).length())\n+                .map(VectorSpeciesPair::format)\n+                .collect(Collectors.joining(\",\"));\n+        test.addFlags(\"-DTest=\" + testMethodNames);\n+        test.start();\n+    }\n+\n+    @ForceInline\n+    public static <T, U> void vectorCast(VectorOperators.Conversion<T, U> cop,\n+                                         VectorSpecies<T> isp, VectorSpecies<U> osp, byte[] input, byte[] output) {\n+        isp.fromByteArray(input, 0, ByteOrder.nativeOrder())\n+                .convertShape(cop, osp, 0)\n+                .intoByteArray(output, 0, ByteOrder.nativeOrder());\n+    }\n+\n+    public static <T, U> void runCastHelper(VectorOperators.Conversion<T, U> castOp,\n+                                            VectorSpecies<T> isp, VectorSpecies<U> osp) throws Throwable {\n+        var random = RandomGenerator.getDefault();\n+        boolean isUnsignedCast = castOp.name().startsWith(\"ZERO\");\n+        String testMethodName = VectorSpeciesPair.makePair(isp, osp).format();\n+        var caller = StackWalker.getInstance(StackWalker.Option.RETAIN_CLASS_REFERENCE).getCallerClass();\n+        var testMethod = MethodHandles.lookup().findStatic(caller,\n+                testMethodName,\n+                MethodType.methodType(void.class, byte.class.arrayType(), byte.class.arrayType()));\n+        byte[] input = new byte[isp.vectorByteSize()];\n+        byte[] output = new byte[osp.vectorByteSize()];\n+        for (int iter = 0; iter < INVOCATIONS; iter++) {\n+            \/\/ We need to generate arrays with NaN or very large values occasionally\n+            boolean normalArray = random.nextBoolean();\n+            var abnormalValue = List.of(Double.NaN, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, -1e30, 1e30);\n+            for (int i = 0; i < isp.length(); i++) {\n+                switch (isp.elementType().getName()) {\n+                    case \"byte\"   -> setByte(input, i, (byte)random.nextInt());\n+                    case \"short\"  -> setShort(input, i, (short)random.nextInt());\n+                    case \"int\"    -> setInt(input, i, random.nextInt());\n+                    case \"long\"   -> setLong(input, i, random.nextLong());\n+                    case \"float\"  -> {\n+                        if (normalArray || random.nextBoolean()) {\n+                            setFloat(input, i, random.nextFloat(Byte.MIN_VALUE, Byte.MAX_VALUE));\n+                        } else {\n+                            setFloat(input, i, abnormalValue.get(random.nextInt(abnormalValue.size())).floatValue());\n+                        }\n+                    }\n+                    case \"double\" -> {\n+                        if (normalArray || random.nextBoolean()) {\n+                            setDouble(input, i, random.nextDouble(Byte.MIN_VALUE, Byte.MAX_VALUE));\n+                        } else {\n+                            setDouble(input, i, abnormalValue.get(random.nextInt(abnormalValue.size())));\n+                        }\n+                    }\n+                    default -> throw new AssertionError();\n+                }\n+            }\n+\n+            testMethod.invokeExact(input, output);\n+\n+            for (int i = 0; i < osp.length(); i++) {\n+                Number expected, actual;\n+                if (i < isp.length()) {\n+                    Number initial = switch (isp.elementType().getName()) {\n+                        case \"byte\"   -> getByte(input, i);\n+                        case \"short\"  -> getShort(input, i);\n+                        case \"int\"    -> getInt(input, i);\n+                        case \"long\"   -> getLong(input, i);\n+                        case \"float\"  -> getFloat(input, i);\n+                        case \"double\" -> getDouble(input, i);\n+                        default -> throw new AssertionError();\n+                    };\n+                    expected = switch (osp.elementType().getName()) {\n+                        case \"byte\" -> initial.byteValue();\n+                        case \"short\" -> {\n+                            if (isUnsignedCast) {\n+                                yield (short) (initial.longValue() & ((1L << isp.elementSize()) - 1));\n+                            } else {\n+                                yield initial.shortValue();\n+                            }\n+                        }\n+                        case \"int\" -> {\n+                            if (isUnsignedCast) {\n+                                yield (int) (initial.longValue() & ((1L << isp.elementSize()) - 1));\n+                            } else {\n+                                yield initial.intValue();\n+                            }\n+                        }\n+                        case \"long\" -> {\n+                            if (isUnsignedCast) {\n+                                yield (long) (initial.longValue() & ((1L << isp.elementSize()) - 1));\n+                            } else {\n+                                yield initial.longValue();\n+                            }\n+                        }\n+                        case \"float\" -> initial.floatValue();\n+                        case \"double\" -> initial.doubleValue();\n+                        default -> throw new AssertionError();\n+                    };\n+                } else {\n+                    expected = switch (osp.elementType().getName()) {\n+                        case \"byte\"   -> (byte)0;\n+                        case \"short\"  -> (short)0;\n+                        case \"int\"    -> (int)0;\n+                        case \"long\"   -> (long)0;\n+                        case \"float\"  -> (float)0;\n+                        case \"double\" -> (double)0;\n+                        default -> throw new AssertionError();\n+                    };\n+                }\n+                actual = switch (osp.elementType().getName()) {\n+                    case \"byte\"   -> getByte(output, i);\n+                    case \"short\"  -> getShort(output, i);\n+                    case \"int\"    -> getInt(output, i);\n+                    case \"long\"   -> getLong(output, i);\n+                    case \"float\"  -> getFloat(output, i);\n+                    case \"double\" -> getDouble(output, i);\n+                    default -> throw new AssertionError();\n+                };\n+                Asserts.assertEquals(expected, actual);\n+            }\n+        }\n+    }\n+\n+    @ForceInline\n+    public static <T, U> void vectorExpandShrink(VectorSpecies<T> isp, VectorSpecies<U> osp, byte[] input, byte[] output) {\n+        isp.fromByteArray(input, 0, ByteOrder.nativeOrder())\n+                .reinterpretShape(osp, 0)\n+                .intoByteArray(output, 0, ByteOrder.nativeOrder());\n+    }\n+\n+    public static <T, U> void runExpandShrinkHelper(VectorSpecies<T> isp, VectorSpecies<U> osp) throws Throwable {\n+        var random = RandomGenerator.getDefault();\n+        String testMethodName = VectorSpeciesPair.makePair(isp, osp).format();\n+        var caller = StackWalker.getInstance(StackWalker.Option.RETAIN_CLASS_REFERENCE).getCallerClass();\n+        var testMethod = MethodHandles.lookup().findStatic(caller,\n+                testMethodName,\n+                MethodType.methodType(void.class, byte.class.arrayType(), byte.class.arrayType()));\n+        byte[] input = new byte[isp.vectorByteSize()];\n+        byte[] output = new byte[osp.vectorByteSize()];\n+        for (int iter = 0; iter < INVOCATIONS; iter++) {\n+            random.nextBytes(input);\n+\n+            testMethod.invokeExact(input, output);\n+\n+            for (int i = 0; i < osp.vectorByteSize(); i++) {\n+                int expected = i < isp.vectorByteSize() ? input[i] : 0;\n+                int actual = output[i];\n+                Asserts.assertEquals(expected, actual);\n+            }\n+        }\n+    }\n+\n+    @ForceInline\n+    public static <T, U> void vectorDoubleExpandShrink(VectorSpecies<T> isp, VectorSpecies<U> osp, byte[] input, byte[] output) {\n+        isp.fromByteArray(input, 0, ByteOrder.nativeOrder())\n+                .reinterpretShape(osp, 0)\n+                .reinterpretShape(isp, 0)\n+                .intoByteArray(output, 0, ByteOrder.nativeOrder());\n+    }\n+\n+    public static <T, U> void runDoubleExpandShrinkHelper(VectorSpecies<T> isp, VectorSpecies<U> osp) throws Throwable {\n+        var random = RandomGenerator.getDefault();\n+        String testMethodName = VectorSpeciesPair.makePair(isp, osp).format();\n+        var caller = StackWalker.getInstance(StackWalker.Option.RETAIN_CLASS_REFERENCE).getCallerClass();\n+        var testMethod = MethodHandles.lookup().findStatic(caller,\n+                testMethodName,\n+                MethodType.methodType(void.class, byte.class.arrayType(), byte.class.arrayType()));\n+        byte[] input = new byte[isp.vectorByteSize()];\n+        byte[] output = new byte[isp.vectorByteSize()];\n+        for (int iter = 0; iter < INVOCATIONS; iter++) {\n+            random.nextBytes(input);\n+\n+            testMethod.invokeExact(input, output);\n+\n+            for (int i = 0; i < isp.vectorByteSize(); i++) {\n+                int expected = i < osp.vectorByteSize() ? input[i] : 0;\n+                int actual = output[i];\n+                Asserts.assertEquals(expected, actual);\n+            }\n+        }\n+    }\n+\n+    \/\/ All this complication is due to the fact that vector load and store with respect to byte array introduce\n+    \/\/ additional ReinterpretNodes, several ReinterpretNodes back to back being optimized make the number of\n+    \/\/ nodes remaining in the IR becomes unpredictable.\n+    @ForceInline\n+    public static <T, U> void vectorRebracket(VectorSpecies<T> isp, VectorSpecies<U> osp, Object input, Object output) {\n+        var outputVector = isp.fromArray(input, 0).reinterpretShape(osp, 0);\n+        var otype = osp.elementType();\n+        if (otype == byte.class) {\n+            ((ByteVector)outputVector).intoArray((byte[])output, 0);\n+        } else if (otype == short.class) {\n+            ((ShortVector)outputVector).intoArray((short[])output, 0);\n+        } else if (otype == int.class) {\n+            ((IntVector)outputVector).intoArray((int[])output, 0);\n+        } else if (otype == long.class) {\n+            ((LongVector)outputVector).intoArray((long[])output, 0);\n+        } else if (otype == float.class) {\n+            ((FloatVector)outputVector).intoArray((float[])output, 0);\n+        } else if (otype == double.class) {\n+            ((DoubleVector)outputVector).intoArray((double[])output, 0);\n+        } else {\n+            throw new AssertionError();\n+        }\n+    }\n+\n+    public static <T, U> void runRebracketHelper(VectorSpecies<T> isp, VectorSpecies<U> osp) throws Throwable {\n+        var random = RandomGenerator.getDefault();\n+        String testMethodName = VectorSpeciesPair.makePair(isp, osp).format();\n+        var caller = StackWalker.getInstance(StackWalker.Option.RETAIN_CLASS_REFERENCE).getCallerClass();\n+        var testMethod = MethodHandles.lookup().findStatic(caller,\n+                    testMethodName,\n+                    MethodType.methodType(void.class, isp.elementType().arrayType(), osp.elementType().arrayType()))\n+                .asType(MethodType.methodType(void.class, Object.class, Object.class));\n+        Object input = Array.newInstance(isp.elementType(), isp.length());\n+        Object output = Array.newInstance(osp.elementType(), osp.length());\n+        long ibase = UnsafeUtils.arrayBase(isp.elementType());\n+        long obase = UnsafeUtils.arrayBase(osp.elementType());\n+        for (int iter = 0; iter < INVOCATIONS; iter++) {\n+            for (int i = 0; i < isp.vectorByteSize(); i++) {\n+                UnsafeUtils.putByte(input, ibase, i, random.nextInt());\n+            }\n+\n+            testMethod.invokeExact(input, output);\n+\n+            for (int i = 0; i < osp.vectorByteSize(); i++) {\n+                int expected = i < isp.vectorByteSize() ? UnsafeUtils.getByte(input, ibase, i) : 0;\n+                int actual = UnsafeUtils.getByte(output, obase, i);\n+                Asserts.assertEquals(expected, actual);\n+            }\n+        }\n+    }\n+\n+    public static byte getByte(byte[] array, int index) {\n+        return (byte)BYTE_ACCESS.get(array, index * Byte.BYTES);\n+    }\n+\n+    public static short getShort(byte[] array, int index) {\n+        return (short)SHORT_ACCESS.get(array, index * Short.BYTES);\n+    }\n+\n+    public static int getInt(byte[] array, int index) {\n+        return (int)INT_ACCESS.get(array, index * Integer.BYTES);\n+    }\n+\n+    public static long getLong(byte[] array, int index) {\n+        return (long)LONG_ACCESS.get(array, index * Long.BYTES);\n+    }\n+\n+    public static float getFloat(byte[] array, int index) {\n+        return (float)FLOAT_ACCESS.get(array, index * Float.BYTES);\n+    }\n+\n+    public static double getDouble(byte[] array, int index) {\n+        return (double)DOUBLE_ACCESS.get(array, index * Double.BYTES);\n+    }\n+\n+    public static void setByte(byte[] array, int index, byte value) {\n+        BYTE_ACCESS.set(array, index * Byte.BYTES, value);\n+    }\n+\n+    public static void setShort(byte[] array, int index, short value) {\n+        SHORT_ACCESS.set(array, index * Short.BYTES, value);\n+    }\n+\n+    public static void setInt(byte[] array, int index, int value) {\n+        INT_ACCESS.set(array, index * Integer.BYTES, value);\n+    }\n+\n+    public static void setLong(byte[] array, int index, long value) {\n+        LONG_ACCESS.set(array, index * Long.BYTES, value);\n+    }\n+\n+    public static void setFloat(byte[] array, int index, float value) {\n+        FLOAT_ACCESS.set(array, index * Float.BYTES, value);\n+    }\n+\n+    public static void setDouble(byte[] array, int index, double value) {\n+        DOUBLE_ACCESS.set(array, index * Double.BYTES, value);\n+    }\n+\n+    private static final VarHandle BYTE_ACCESS   = MethodHandles.arrayElementVarHandle(byte.class.arrayType());\n+    private static final VarHandle SHORT_ACCESS  = MethodHandles.byteArrayViewVarHandle(short.class.arrayType(),  ByteOrder.nativeOrder());\n+    private static final VarHandle INT_ACCESS    = MethodHandles.byteArrayViewVarHandle(int.class.arrayType(),    ByteOrder.nativeOrder());\n+    private static final VarHandle LONG_ACCESS   = MethodHandles.byteArrayViewVarHandle(long.class.arrayType(),   ByteOrder.nativeOrder());\n+    private static final VarHandle FLOAT_ACCESS  = MethodHandles.byteArrayViewVarHandle(float.class.arrayType(),  ByteOrder.nativeOrder());\n+    private static final VarHandle DOUBLE_ACCESS = MethodHandles.byteArrayViewVarHandle(double.class.arrayType(), ByteOrder.nativeOrder());\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/reshape\/utils\/VectorReshapeHelper.java","additions":372,"deletions":0,"binary":false,"changes":372,"status":"added"},{"patch":"@@ -0,0 +1,45 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.vectorapi.reshape.utils;\n+\n+import jdk.incubator.vector.VectorSpecies;\n+\n+public record VectorSpeciesPair(VectorSpecies<?> isp, VectorSpecies<?> osp, boolean unsignedCast) {\n+    public static VectorSpeciesPair makePair(VectorSpecies<?> isp, VectorSpecies<?> osp, boolean unsignedCast) {\n+        return new VectorSpeciesPair(isp, osp, unsignedCast);\n+    }\n+\n+    public static VectorSpeciesPair makePair(VectorSpecies<?> isp, VectorSpecies<?> osp) {\n+        return new VectorSpeciesPair(isp, osp, false);\n+    }\n+\n+    public String format() {\n+        return String.format(\"test%s%c%dto%c%d\",\n+                unsignedCast() ? \"U\" : \"\",\n+                Character.toUpperCase(isp().elementType().getName().charAt(0)),\n+                isp().vectorBitSize(),\n+                Character.toUpperCase(osp().elementType().getName().charAt(0)),\n+                osp().vectorBitSize());\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/reshape\/utils\/VectorSpeciesPair.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"},{"patch":"@@ -57,4 +57,0 @@\n-            {\"UseSharedSpaces\",           \"false\"},\n-            {\"RequireSharedSpaces\",       \"false\"},\n-            {\"DumpSharedSpaces\",          \"false\"},\n-            {\"DynamicDumpSharedSpaces\",   \"false\"},\n@@ -67,3 +63,0 @@\n-        if (!Platform.isDebugBuild()) {\n-            deprecated.add(new String[]{\"UseHeavyMonitors\", \"false\"});\n-        }\n","filename":"test\/hotspot\/jtreg\/runtime\/CommandLine\/VMDeprecatedOptions.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -48,6 +48,0 @@\n-        \/\/ -XX:+DumpSharedSpaces should behave the same as -Xshare:dump\n-        opts = (new CDSOptions())\n-            .addPrefix(\"-XX:+DumpSharedSpaces\", \"-Xlog:cds\")\n-            .setArchiveName(\".\/SharedArchiveFile.jsa\");\n-        CDSTestUtils.createArchiveAndCheck(opts);\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/SharedArchiveFile.java","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -283,1 +283,1 @@\n-     * Return true if the UseSharedSpaces flag has been disabled.\n+     * Return true if sharing has been disabled.\n@@ -285,2 +285,2 @@\n-     * The UseSharedSpaces flag will be disabled by the VM if there's some\n-     * problem in using the default CDS archive. It could happen under some\n+     * Sharing will be disabled by the VM if there's some problem\n+     * in using the default CDS archive. It could happen under some\n@@ -297,1 +297,1 @@\n-        return (WB.getBooleanVMFlag(\"UseSharedSpaces\") == false);\n+        return !WB.isSharingEnabled();\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/DynamicArchiveTestBase.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1,39 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\/*\n- * @test\n- * @summary The DynamicDumpShareSpaces flag is internal, setting it at the command line should have no effect.\n- * @requires vm.cds\n- * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n- * @compile ..\/test-classes\/Hello.java\n- * @run driver DynamicFlag\n- *\/\n-\n-public class DynamicFlag {\n-  public static void main(String[] args) throws Exception {\n-      TestCommon.test(JarBuilder.getOrCreateHelloJar(),\n-          TestCommon.list(\"Hello\"), \"-XX:+DynamicDumpSharedSpaces\", \"Hello\");\n-  }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/DynamicFlag.java","additions":0,"deletions":39,"binary":false,"changes":39,"status":"deleted"},{"patch":"@@ -99,1 +99,1 @@\n-        boolean cdsEnabled = WhiteBox.getWhiteBox().getBooleanVMFlag(\"UseSharedSpaces\");\n+        boolean cdsEnabled = WhiteBox.getWhiteBox().isSharingEnabled();\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jcmd\/JCmdTestDumpBase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -84,3 +84,3 @@\n-        \/\/ Test dynamic dump with flags -XX:+RecordDynamicDumpInfo -XX:-DynamicDumpSharedSpaces.\n-        print2ln(test_count++ + \" Test dynamic dump with flags -XX:+RecordDynamicDumpInfo -XX:-DynamicDumpSharedSpaces.\");\n-        app = createLingeredApp(\"-cp\", allJars, \"-XX:+RecordDynamicDumpInfo\", \"-XX:-DynamicDumpSharedSpaces\");\n+        \/\/ Test dynamic dump with flag -XX:+RecordDynamicDumpInfo\n+        print2ln(test_count++ + \" Test dynamic dump with flag -XX:+RecordDynamicDumpInfo.\");\n+        app = createLingeredApp(\"-cp\", allJars, \"-XX:+RecordDynamicDumpInfo\");\n@@ -91,7 +91,0 @@\n-        \/\/ Test dynamic dump with flags -XX:-DynamicDumpSharedSpaces -XX:+RecordDynamicDumpInfo.\n-        print2ln(test_count++ + \" Test dynamic dump with flags -XX:-DynamicDumpSharedSpaces -XX:+RecordDynamicDumpInfo.\");\n-        app = createLingeredApp(\"-cp\", allJars, \"-XX:-DynamicDumpSharedSpaces\", \"-XX:+RecordDynamicDumpInfo\");\n-        pid = app.getPid();\n-        test(null, pid, noBoot,  EXPECT_PASS, DYNAMIC_MESSAGES);\n-        app.stopApp();\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jcmd\/JCmdTestDynamicDump.java","additions":3,"deletions":10,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-    \/\/ Those two flags will not create a successful LingeredApp.\n+    \/\/ This flag will not create a successful LingeredApp.\n@@ -50,2 +50,1 @@\n-        {\"-XX:+DumpSharedSpaces\",\n-         \"-Xshare:dump\"};\n+        {\"-Xshare:dump\"};\n@@ -56,3 +55,0 @@\n-         \/\/ this flag just dump archive, won't run app normally.\n-         \/\/ \"-XX:+DumpSharedSpaces\",\n-         \"-XX:+DynamicDumpSharedSpaces\",\n@@ -64,3 +60,1 @@\n-         \"-XX:ArchiveClassesAtExit=tmp.jsa\",\n-         \"-XX:+UseSharedSpaces\",\n-         \"-XX:+RequireSharedSpaces\"};\n+         \"-XX:ArchiveClassesAtExit=tmp.jsa\"};\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jcmd\/JCmdTestStaticDump.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8276241\n+ * @summary Throw ClassFormatError exception for an old class file whose name ends in a '\/'.\n+ * @run main\/othervm -Xverify:remote TrailingSlashTest\n+ *\/\n+\n+public class TrailingSlashTest extends ClassLoader {\n+\n+    @Override\n+    public Class findClass(String fileName) throws ClassNotFoundException {\n+        return defineClass(null, oldSlashClass, 0, oldSlashClass.length);\n+    }\n+\n+    public static void main(String args[]) throws Throwable {\n+        try {\n+            TrailingSlashTest cl = new TrailingSlashTest();\n+            cl.findClass(\"oldSlashClass\");\n+            throw new RuntimeException(\"Expected exception not thrown\");\n+        } catch (ClassFormatError e) {\n+            if (!e.getMessage().contains(\"Illegal class name\")) {\n+               throw new RuntimeException(\"Wrong ClassFormatError exception: \" + e.getMessage());\n+            }\n+        }\n+    }\n+\n+\n+    \/\/ This byte array comprises the compiled bytes of the following class.  Note that the class's\n+    \/\/ name ends in a '\/' and has a class file version of 45.3.\n+    \/*\n+        package has;\n+        public class slashe\/ { }\n+    *\/\n+    public static byte[] oldSlashClass = {\n+        (byte) 0xca, (byte) 0xfe, (byte) 0xba, (byte) 0xbe, (byte) 0x0, (byte) 0x3, (byte) 0x0, (byte) 0x2d,\n+        (byte) 0x0, (byte) 0xd, (byte) 0xa, (byte) 0x0, (byte) 0x2, (byte) 0x0, (byte) 0x3, (byte) 0x7,\n+        (byte) 0x0, (byte) 0x4, (byte) 0xc, (byte) 0x0, (byte) 0x5, (byte) 0x0, (byte) 0x6, (byte) 0x1,\n+        (byte) 0x0, (byte) 0x10, (byte) 0x6a, (byte) 0x61, (byte) 0x76, (byte) 0x61, (byte) 0x2f, (byte) 0x6c,\n+        (byte) 0x61, (byte) 0x6e, (byte) 0x67, (byte) 0x2f, (byte) 0x4f, (byte) 0x62, (byte) 0x6a, (byte) 0x65,\n+        (byte) 0x63, (byte) 0x74, (byte) 0x1, (byte) 0x0, (byte) 0x6, (byte) 0x3c, (byte) 0x69, (byte) 0x6e,\n+        (byte) 0x69, (byte) 0x74, (byte) 0x3e, (byte) 0x1, (byte) 0x0, (byte) 0x3, (byte) 0x28, (byte) 0x29,\n+        (byte) 0x56, (byte) 0x7, (byte) 0x0, (byte) 0x8, (byte) 0x1, (byte) 0x0, (byte) 0xb, (byte) 0x68,\n+        (byte) 0x61, (byte) 0x73, (byte) 0x2f, (byte) 0x73, (byte) 0x6c, (byte) 0x61, (byte) 0x73, (byte) 0x68,\n+        (byte) 0x65, (byte) 0x2f, (byte) 0x1, (byte) 0x0, (byte) 0x4, (byte) 0x43, (byte) 0x6f, (byte) 0x64,\n+        (byte) 0x65, (byte) 0x1, (byte) 0x0, (byte) 0xf, (byte) 0x4c, (byte) 0x69, (byte) 0x6e, (byte) 0x65,\n+        (byte) 0x4e, (byte) 0x75, (byte) 0x6d, (byte) 0x62, (byte) 0x65, (byte) 0x72, (byte) 0x54, (byte) 0x61,\n+        (byte) 0x62, (byte) 0x6c, (byte) 0x65, (byte) 0x1, (byte) 0x0, (byte) 0xa, (byte) 0x53, (byte) 0x6f,\n+        (byte) 0x75, (byte) 0x72, (byte) 0x63, (byte) 0x65, (byte) 0x46, (byte) 0x69, (byte) 0x6c, (byte) 0x65,\n+        (byte) 0x1, (byte) 0x0, (byte) 0xc, (byte) 0x73, (byte) 0x6c, (byte) 0x61, (byte) 0x73, (byte) 0x68,\n+        (byte) 0x65, (byte) 0x73, (byte) 0x2e, (byte) 0x6a, (byte) 0x61, (byte) 0x76, (byte) 0x61, (byte) 0x0,\n+        (byte) 0x21, (byte) 0x0, (byte) 0x7, (byte) 0x0, (byte) 0x2, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+        (byte) 0x0, (byte) 0x0, (byte) 0x1, (byte) 0x0, (byte) 0x1, (byte) 0x0, (byte) 0x5, (byte) 0x0,\n+        (byte) 0x6, (byte) 0x0, (byte) 0x1, (byte) 0x0, (byte) 0x9, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+        (byte) 0x1d, (byte) 0x0, (byte) 0x1, (byte) 0x0, (byte) 0x1, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+        (byte) 0x5, (byte) 0x2a, (byte) 0xb7, (byte) 0x0, (byte) 0x1, (byte) 0xb1, (byte) 0x0, (byte) 0x0,\n+        (byte) 0x0, (byte) 0x1, (byte) 0x0, (byte) 0xa, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x6,\n+        (byte) 0x0, (byte) 0x1, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x3, (byte) 0x0, (byte) 0x1,\n+        (byte) 0x0, (byte) 0xb, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x2, (byte) 0x0, (byte) 0xc,\n+    };\n+\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/classFileParserBug\/TrailingSlashTest.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n- *     of invocations (which is 10 times that crucial depth just measured).\n+ *     of invocations (which is 100 times that crucial depth just measured).\n@@ -106,1 +106,1 @@\n-        for (depthToTry = 0; ; depthToTry += STEP)\n+        for (depthToTry = 0; ; depthToTry += STEP) {\n@@ -120,0 +120,6 @@\n+        }\n+\n+        if (maxDepth == 0) {\n+            \/\/ The depth STEP was enough to cause StackOverflowError or OutOfMemoryError.\n+            maxDepth = STEP;\n+        }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/stress\/stack\/stack018.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -388,3 +388,6 @@\n-    :jdk_awt \\\n-    :jdk_2d \\\n-    :jdk_beans \\\n+    :jdk_desktop_part1 \\\n+    :jdk_desktop_part2 \\\n+    :jdk_desktop_part3\n+\n+jdk_desktop_part1 = \\\n+    :jdk_client_sanity \\\n@@ -392,0 +395,1 @@\n+    :jdk_2d \\\n@@ -394,1 +398,1 @@\n-    :jdk_accessibility \\\n+    :jdk_editpad \\\n@@ -396,2 +400,15 @@\n-    :jdk_client_sanity \\\n-    :jdk_editpad\n+    :jdk_accessibility \\\n+    :jdk_beans\n+\n+jdk_desktop_part2 = \\\n+    :jdk_awt \\\n+    -java\/awt\/Component \\\n+    -java\/awt\/Modal \\\n+    -java\/awt\/datatransfer \\\n+    -java\/awt\/Window\n+\n+jdk_desktop_part3 = \\\n+    java\/awt\/Component \\\n+    java\/awt\/Modal \\\n+    java\/awt\/datatransfer \\\n+    java\/awt\/Window\n","filename":"test\/jdk\/TEST.groups","additions":23,"deletions":6,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -0,0 +1,202 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8278312\n+ * @library \/test\/lib \/test\/jdk\/java\/net\/httpclient \/test\/jdk\/java\/net\/httpclient\/http2\/server\n+ * @build jdk.test.lib.net.SimpleSSLContext HttpServerAdapters Http2Handler\n+ *          jdk.test.lib.net.IPSupport\n+ *          Http2TestExchange\n+ *\n+ * @modules java.net.http\/jdk.internal.net.http.common\n+ *          java.net.http\/jdk.internal.net.http.frame\n+ *          java.net.http\/jdk.internal.net.http.hpack\n+ *          java.logging\n+ *          java.base\/sun.net.www.http\n+ *          java.base\/sun.net.www\n+ *          java.base\/sun.net\n+ *\n+ * @run main\/othervm SANTest\n+ * @summary Update SimpleSSLContext keystore to use SANs for localhost IP addresses\n+ *\/\n+\n+import com.sun.net.httpserver.*;\n+\n+import java.util.concurrent.*;\n+import java.io.*;\n+import java.net.*;\n+import java.net.http.*;\n+import java.nio.charset.StandardCharsets;\n+import javax.net.ssl.*;\n+import jdk.test.lib.net.SimpleSSLContext;\n+import jdk.test.lib.net.URIBuilder;\n+import jdk.test.lib.net.IPSupport;\n+\n+\/*\n+ * Will fail if the testkeys file belonging to SimpleSSLContext\n+ * does not have SAN entries for 127.0.0.1 or ::1\n+ *\/\n+public class SANTest implements HttpServerAdapters {\n+\n+    static SSLContext ctx;\n+\n+    static HttpServer getHttpsServer(InetSocketAddress addr, Executor exec, SSLContext ctx) throws Exception {\n+        HttpsServer server = HttpsServer.create(addr, 0);\n+        server.setExecutor(exec);\n+        server.setHttpsConfigurator(new HttpsConfigurator (ctx));\n+        return server;\n+    }\n+\n+    static final boolean hasIPv4 = IPSupport.hasIPv4();\n+    static final boolean hasIPv6 = IPSupport.hasIPv6();\n+\n+    static HttpTestServer initServer(boolean h2, InetAddress addr, SSLContext ctx,\n+                String sni, ExecutorService e) throws Exception {\n+        HttpTestServer s = null;\n+        InetSocketAddress ia = new InetSocketAddress (addr, 0);\n+        if ((addr instanceof Inet4Address) && !hasIPv4)\n+                return null;\n+        if ((addr instanceof Inet6Address) && !hasIPv6)\n+                return null;\n+\n+        if (!h2) {\n+            s = HttpTestServer.of(getHttpsServer(ia, e, ctx));\n+            HttpTestHandler h = new HttpTestEchoHandler();\n+            s.addHandler(h, \"\/test1\");\n+            s.start();\n+            return s;\n+        } else {\n+            s = HttpTestServer.of(new Http2TestServer(addr, sni, true, 0, e,\n+                        10, null, ctx, false));\n+            HttpTestHandler h = new HttpTestEchoHandler();\n+            s.addHandler(h, \"\/test1\");\n+            s.start();\n+            return s;\n+        }\n+    }\n+\n+    public static void main (String[] args) throws Exception {\n+        \/\/ Http\/1.1 servers\n+        HttpTestServer h1s1 = null;\n+        HttpTestServer h1s2 = null;\n+\n+        \/\/ Http\/2 servers\n+        HttpTestServer h2s1 = null;\n+        HttpTestServer h2s2 = null;\n+\n+        ExecutorService executor=null;\n+        try {\n+            System.out.print (\"SANTest: \");\n+            ctx = new SimpleSSLContext().get();\n+            executor = Executors.newCachedThreadPool();\n+\n+            InetAddress l1 = InetAddress.getByName(\"::1\");\n+            InetAddress l2 = InetAddress.getByName(\"127.0.0.1\");\n+\n+            h1s1 = initServer(false, l1, ctx, \"::1\", executor);\n+            h1s2 = initServer(false, l2, ctx, \"127.0.0.1\", executor);\n+\n+            h2s1 = initServer(true, l1, ctx, \"::1\", executor);\n+            h2s2 = initServer(true, l2, ctx, \"127.0.0.1\", executor);\n+\n+            test(\"127.0.0.1\", h1s2);\n+            test(\"::1\", h1s1);\n+            testNew(\"127.0.0.1\", h2s2, executor);\n+            testNew(\"::1\", h2s1, executor);\n+            System.out.println (\"OK\");\n+        } finally {\n+            if (h1s1 != null)\n+                h1s1.stop();\n+            if (h1s2 != null)\n+                h1s2.stop();\n+            if (h2s1 != null)\n+                h2s1.stop();\n+            if (h2s2 != null)\n+                h2s2.stop();\n+            if (executor != null)\n+                executor.shutdown ();\n+        }\n+    }\n+\n+    static void test (String host, HttpTestServer server) throws Exception {\n+        if (server == null)\n+            return;\n+        int port = server.getAddress().getPort();\n+        String body = \"Yellow world\";\n+        URL url = URIBuilder.newBuilder()\n+                 .scheme(\"https\")\n+                 .host(host)\n+                 .port(port)\n+                 .path(\"\/test1\/foo.txt\")\n+                 .toURL();\n+        System.out.println(\"URL = \" + url);\n+        HttpURLConnection urlc = (HttpURLConnection) url.openConnection(Proxy.NO_PROXY);\n+        System.out.println(\"urlc = \" + urlc);\n+        if (urlc instanceof HttpsURLConnection) {\n+            HttpsURLConnection urlcs = (HttpsURLConnection) urlc;\n+            urlcs.setSSLSocketFactory (ctx.getSocketFactory());\n+        }\n+\n+        urlc.setRequestMethod(\"POST\");\n+        urlc.setDoOutput(true);\n+\n+        OutputStream os = urlc.getOutputStream();\n+        os.write(body.getBytes(StandardCharsets.ISO_8859_1));\n+        os.close();\n+        InputStream is = urlc.getInputStream();\n+        byte[] vv = is.readAllBytes();\n+        String ff = new String(vv, StandardCharsets.ISO_8859_1);\n+        System.out.println(\"resp = \" + ff);\n+        if (!ff.equals(body))\n+            throw new RuntimeException();\n+        is.close();\n+    }\n+\n+    static void testNew (String host, HttpTestServer server, Executor exec) throws Exception {\n+        if (server == null)\n+            return;\n+        int port = server.getAddress().getPort();\n+        String body = \"Red and Yellow world\";\n+        URI uri = URIBuilder.newBuilder()\n+                 .scheme(\"https\")\n+                 .host(host)\n+                 .port(port)\n+                 .path(\"\/test1\/foo.txt\")\n+                 .build();\n+\n+        HttpClient client = HttpClient.newBuilder()\n+                .sslContext(ctx)\n+                .executor(exec)\n+                .build();\n+        HttpRequest req = HttpRequest.newBuilder(uri)\n+                .version(HttpClient.Version.HTTP_2)\n+                .POST(HttpRequest.BodyPublishers.ofString(body))\n+                .build();\n+\n+        HttpResponse<String> resp = client.send(req, HttpResponse.BodyHandlers.ofString());\n+        System.out.println(\"resp = \" + resp.body());\n+        if (!resp.body().equals(body))\n+            throw new RuntimeException();\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/SANTest.java","additions":202,"deletions":0,"binary":false,"changes":202,"status":"added"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.ref.Reference;\n+import java.lang.ref.WeakReference;\n+import java.io.ObjectStreamClass;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertTrue;\n+\n+\/* @test\n+ * @bug 8277072\n+ * @library \/test\/lib\/\n+ * @summary ObjectStreamClass caches keep ClassLoaders alive\n+ * @run testng\/othervm -Xmx10m -XX:SoftRefLRUPolicyMSPerMB=1 ObjectStreamClassCaching\n+ *\/\n+public class ObjectStreamClassCaching {\n+\n+    @Test\n+    public void testCachingEffectiveness() throws Exception {\n+        var ref = lookupObjectStreamClass(TestClass.class);\n+        System.gc();\n+        Thread.sleep(100L);\n+        \/\/ to trigger any ReferenceQueue processing...\n+        lookupObjectStreamClass(AnotherTestClass.class);\n+        assertFalse(ref.refersTo(null),\n+                    \"Cache lost entry although memory was not under pressure\");\n+    }\n+\n+    @Test\n+    public void testCacheReleaseUnderMemoryPressure() throws Exception {\n+        var ref = lookupObjectStreamClass(TestClass.class);\n+        pressMemoryHard(ref);\n+        System.gc();\n+        Thread.sleep(100L);\n+        assertTrue(ref.refersTo(null),\n+                   \"Cache still has entry although memory was pressed hard\");\n+    }\n+\n+    \/\/ separate method so that the looked-up ObjectStreamClass is not kept on stack\n+    private static WeakReference<?> lookupObjectStreamClass(Class<?> cl) {\n+        return new WeakReference<>(ObjectStreamClass.lookup(cl));\n+    }\n+\n+    private static void pressMemoryHard(Reference<?> ref) {\n+        try {\n+            var list = new ArrayList<>();\n+            while (!ref.refersTo(null)) {\n+                list.add(new byte[1024 * 1024 * 64]); \/\/ 64 MiB chunks\n+            }\n+        } catch (OutOfMemoryError e) {\n+            \/\/ release\n+        }\n+    }\n+}\n+\n+class TestClass implements Serializable {\n+}\n+\n+class AnotherTestClass implements Serializable {\n+}\n","filename":"test\/jdk\/java\/io\/ObjectStreamClass\/ObjectStreamClassCaching.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"},{"patch":"@@ -0,0 +1,108 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.ref.WeakReference;\n+import java.lang.reflect.Constructor;\n+import java.io.ByteArrayOutputStream;\n+import java.io.InputStream;\n+import java.io.ObjectStreamClass;\n+import java.io.ObjectStreamField;\n+import java.io.Serializable;\n+import java.util.Arrays;\n+import org.testng.annotations.Test;\n+import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.assertTrue;\n+\n+import jdk.test.lib.util.ForceGC;\n+\n+\/* @test\n+ * @bug 8277072\n+ * @library \/test\/lib\/\n+ * @build jdk.test.lib.util.ForceGC\n+ * @summary ObjectStreamClass caches keep ClassLoaders alive\n+ * @run testng TestOSCClassLoaderLeak\n+ *\/\n+public class TestOSCClassLoaderLeak {\n+\n+    @Test\n+    public void testClassLoaderLeak() throws Exception {\n+        TestClassLoader myOwnClassLoader = new TestClassLoader();\n+        Class<?> loadClass = myOwnClassLoader.loadClass(\"ObjectStreamClass_MemoryLeakExample\");\n+        Constructor con = loadClass.getConstructor();\n+        con.setAccessible(true);\n+        Object objectStreamClass_MemoryLeakExample = con.newInstance();\n+        objectStreamClass_MemoryLeakExample.toString();\n+\n+        WeakReference<Object> myOwnClassLoaderWeakReference = new WeakReference<>(myOwnClassLoader);\n+        assertNotNull(myOwnClassLoaderWeakReference.get());\n+        objectStreamClass_MemoryLeakExample = null;\n+        myOwnClassLoader = null;\n+        loadClass = null;\n+        con = null;\n+        assertNotNull(myOwnClassLoaderWeakReference.get());\n+\n+        ForceGC gc = new ForceGC();\n+        assertTrue(gc.await(() -> myOwnClassLoaderWeakReference.get() == null));\n+    }\n+}\n+\n+class ObjectStreamClass_MemoryLeakExample {\n+    private static final ObjectStreamField[] fields = ObjectStreamClass.lookup(TestClass.class).getFields();\n+    public ObjectStreamClass_MemoryLeakExample() {\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return Arrays.toString(fields);\n+    }\n+}\n+\n+class TestClassLoader extends ClassLoader {\n+\n+    @Override\n+    public Class<?> loadClass(String name) throws ClassNotFoundException {\n+        if (name.equals(\"TestClass\") || name.equals(\"ObjectStreamClass_MemoryLeakExample\")) {\n+            byte[] bt = loadClassData(name);\n+            return defineClass(name, bt, 0, bt.length);\n+        } else {\n+            return super.loadClass(name);\n+        }\n+    }\n+\n+    private static byte[] loadClassData(String className) {\n+        ByteArrayOutputStream byteSt = new ByteArrayOutputStream();\n+        try (InputStream is = TestClassLoader.class.getClassLoader().getResourceAsStream(className.replace(\".\", \"\/\") + \".class\")) {\n+            int len = 0;\n+            while ((len = is.read()) != -1) {\n+                byteSt.write(len);\n+            }\n+        } catch (java.io.IOException e) {\n+            e.printStackTrace();\n+        }\n+        return byteSt.toByteArray();\n+    }\n+}\n+\n+class TestClass implements Serializable {\n+    public String x;\n+}\n","filename":"test\/jdk\/java\/io\/ObjectStreamClass\/TestOSCClassLoaderLeak.java","additions":108,"deletions":0,"binary":false,"changes":108,"status":"added"},{"patch":"@@ -127,0 +127,14 @@\n+    public Http2TestServer(String serverName,\n+                           boolean secure,\n+                           int port,\n+                           ExecutorService exec,\n+                           int backlog,\n+                           Properties properties,\n+                           SSLContext context,\n+                           boolean supportsHTTP11)\n+        throws Exception\n+    {\n+        this(InetAddress.getLoopbackAddress(), serverName, secure, port, exec,\n+                backlog, properties, context, supportsHTTP11);\n+    }\n+\n@@ -137,0 +151,1 @@\n+     * @param localAddr local address to bind to\n@@ -149,1 +164,2 @@\n-    public Http2TestServer(String serverName,\n+    public Http2TestServer(InetAddress localAddr,\n+                           String serverName,\n@@ -166,1 +182,1 @@\n-            server = initSecure(port, backlog);\n+            server = initSecure(localAddr, port, backlog);\n@@ -239,1 +255,1 @@\n-    final ServerSocket initSecure(int port, int backlog) throws Exception {\n+    final ServerSocket initSecure(InetAddress localAddr, int port, int backlog) throws Exception {\n@@ -246,1 +262,1 @@\n-        se.bind(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0), backlog);\n+        se.bind(new InetSocketAddress(localAddr, 0), backlog);\n","filename":"test\/jdk\/java\/net\/httpclient\/http2\/server\/Http2TestServer.java","additions":20,"deletions":4,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -37,0 +37,3 @@\n+ * @library \/javax\/swing\/regtesthelpers\n+ * @build Util\n+ * @run main\/timeout=60\/othervm -mx32m FlushCustomClassLoader\n@@ -45,6 +48,2 @@\n-            if (++attempt > 10) {\n-                throw new RuntimeException(\"Too many attempts: \" + attempt);\n-            }\n-            System.gc();\n-            Thread.sleep(1000);\n-            System.out.println(\"Not freed, attempt: \" + attempt);\n+            Util.generateOOME();\n+            System.out.println(\"Not freed, attempt: \" + attempt++);\n","filename":"test\/jdk\/javax\/print\/PrintServiceLookup\/FlushCustomClassLoader.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -5515,1 +5515,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte128VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5515,1 +5515,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte256VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5515,1 +5515,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte512VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5515,1 +5515,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Byte64VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4894,1 +4894,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double128VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4894,1 +4894,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double256VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4894,1 +4894,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double512VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4894,1 +4894,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Double64VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4872,1 +4872,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float128VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4872,1 +4872,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float256VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4872,1 +4872,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float512VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4872,1 +4872,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Float64VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5469,1 +5469,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int128VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5469,1 +5469,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int256VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5469,1 +5469,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int512VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5469,1 +5469,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Int64VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5353,1 +5353,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long128VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5353,1 +5353,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long256VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5353,1 +5353,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long512VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5353,1 +5353,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Long64VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5494,1 +5494,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short128VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5494,1 +5494,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short256VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5494,1 +5494,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short512VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -5494,1 +5494,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/Short64VectorTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -502,1 +502,1 @@\n-        Assert.assertEquals(outputLong, inputLong & (((1L << (SPECIES.length() - 1)) << 1) - 1));\n+        Assert.assertEquals(outputLong, (inputLong & (((0xFFFFFFFFFFFFFFFFL >>> (64 - SPECIES.length()))))));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/templates\/Unit-Miscellaneous.template","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n- *      8131067 8034802 8210899 8273961\n+ *      8131067 8034802 8210899 8273961 8271079\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/ZipFSTester.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8164389 8222440\n+ * @bug 8164389 8222440 8271079\n@@ -149,0 +149,54 @@\n+\n+    @Test\n+    public void testToUri() throws IOException {\n+        \/\/ treat multi-release jar as unversioned\n+        Map<String, String> env = new HashMap<>();\n+        Set<String> contents = doTestUri(env);\n+        Set<String> expectedContents = Set.of(\n+            \"!\/root\/dir1\/leaf1.txt\",\n+            \"!\/root\/dir1\/leaf2.txt\",\n+            \"!\/root\/dir2\/leaf3.txt\",\n+            \"!\/root\/dir2\/leaf4.txt\"\n+        );\n+        Assert.assertEquals(contents, expectedContents);\n+\n+        \/\/ open file as multi-release for version 9\n+        env.put(\"multi-release\", \"9\");\n+        contents = doTestUri(env);\n+        expectedContents = Set.of(\n+            \"!\/root\/dir1\/leaf1.txt\",\n+            \"!\/root\/dir1\/leaf2.txt\",\n+            \"!\/META-INF\/versions\/9\/root\/dir2\/leaf3.txt\",\n+            \"!\/META-INF\/versions\/9\/root\/dir2\/leaf4.txt\",\n+            \"!\/META-INF\/versions\/9\/root\/dir3\/leaf5.txt\",\n+            \"!\/META-INF\/versions\/9\/root\/dir3\/leaf6.txt\"\n+        );\n+        Assert.assertEquals(contents, expectedContents);\n+\n+        \/\/ open file as multi-release for version 10\n+        env.put(\"multi-release\", \"10\");\n+        contents = doTestUri(env);\n+        expectedContents = Set.of(\n+            \"!\/root\/dir1\/leaf1.txt\",\n+            \"!\/root\/dir1\/leaf2.txt\",\n+            \"!\/META-INF\/versions\/9\/root\/dir2\/leaf3.txt\",\n+            \"!\/META-INF\/versions\/9\/root\/dir2\/leaf4.txt\",\n+            \"!\/META-INF\/versions\/10\/root\/dir3\/leaf5.txt\",\n+            \"!\/META-INF\/versions\/10\/root\/dir3\/leaf6.txt\"\n+        );\n+        Assert.assertEquals(contents, expectedContents);\n+    }\n+\n+    private Set<String> doTestUri(Map<String,String> env) throws IOException {\n+        Set<String> contents;\n+        try (FileSystem fs = FileSystems.newFileSystem(jarURI, env)) {\n+            Path root = fs.getPath(\"root\");\n+            int prefix = root.toUri().toString().indexOf('!');\n+            contents = Files.walk(root)\n+                .filter(p -> !Files.isDirectory(p))\n+                .map(p ->  p.toUri().toString().substring(prefix))\n+                .sorted()\n+                .collect(Collectors.toSet());\n+        }\n+        return contents;\n+    }\n","filename":"test\/jdk\/jdk\/nio\/zipfs\/jarfs\/JFSTester.java","additions":55,"deletions":1,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -465,1 +465,1 @@\n-            .shouldContain(\"MAC: sha256, Iteration 10000\")\n+            .shouldContain(\"MAC:\").shouldContain(\"sha256\").shouldContain(\"Iteration 10000\")\n@@ -508,1 +508,1 @@\n-            .shouldContain(\"MAC: sha256, Iteration 5555\")\n+            .shouldContain(\"MAC:\").shouldContain(\"sha256\").shouldContain(\"Iteration 5555\")\n","filename":"test\/jdk\/sun\/security\/pkcs12\/KeytoolOpensslInteropTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -100,1 +100,2 @@\n-    public static void printStackTraces(String file) throws IOException {\n+    \/* Returns false if the attempt should be retried. *\/\n+    public static boolean printStackTraces(String file, boolean allowRetry) throws IOException {\n@@ -107,1 +108,10 @@\n-                throw new RuntimeException(\"'JShellToolProvider' missing from stdout\/stderr\");\n+                \/\/ This check will very rarely fail due to not be able to get the stack trace\n+                \/\/ of the main thread do to it actively executing. See JDK-8269556. We retry once\n+                \/\/ if that happens. This failure is so rare that this should be enough to make it\n+                \/\/ extremely unlikely that we ever see this test fail again for this reason.\n+                if (!allowRetry) {\n+                    throw new RuntimeException(\"'JShellToolProvider' missing from stdout\/stderr\");\n+                } else {\n+                    System.out.println(\"'JShellToolProvider' missing. Allow one retry.\");\n+                    return true; \/\/ Allow one retry\n+                }\n@@ -112,0 +122,1 @@\n+        return false;\n@@ -114,1 +125,2 @@\n-    public static void testHeapDump() throws IOException {\n+    \/* Returns false if the attempt should be retried. *\/\n+    public static boolean testHeapDump(boolean allowRetry) throws IOException {\n@@ -127,1 +139,1 @@\n-        printStackTraces(hprofFile.getAbsolutePath());\n+        boolean retry = printStackTraces(hprofFile.getAbsolutePath(), allowRetry);\n@@ -131,0 +143,2 @@\n+\n+        return retry;\n@@ -152,1 +166,1 @@\n-                Thread.sleep(2000);\n+                Thread.sleep(4000);\n@@ -169,1 +183,6 @@\n-        testHeapDump();\n+\n+        boolean retry = testHeapDump(true);\n+        \/\/ In case of rare failure to find 'JShellToolProvider' in the output, allow one retry.\n+        if (retry) {\n+            testHeapDump(false);\n+        }\n","filename":"test\/jdk\/sun\/tools\/jhsdb\/JShellHeapDumpTest.java","additions":26,"deletions":7,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -0,0 +1,290 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8276766\n+ * @summary Test jar --date source date of entries and that jars are\n+ *          reproducible\n+ * @modules jdk.jartool\n+ * @run testng\/othervm ReproducibleJar\n+ *\/\n+\n+import org.testng.Assert;\n+import org.testng.annotations.AfterMethod;\n+import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Test;\n+import org.testng.annotations.DataProvider;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.nio.file.Files;\n+import java.nio.file.attribute.FileTime;\n+import java.util.Date;\n+import java.util.TimeZone;\n+import java.util.spi.ToolProvider;\n+import java.time.LocalDateTime;\n+import java.time.ZonedDateTime;\n+import java.time.ZoneId;\n+import java.time.ZoneOffset;\n+import java.time.format.DateTimeFormatter;\n+import java.time.Instant;\n+import java.util.concurrent.TimeUnit;\n+\n+public class ReproducibleJar {\n+    private static final ToolProvider JAR_TOOL = ToolProvider.findFirst(\"jar\")\n+            .orElseThrow(() ->\n+                    new RuntimeException(\"jar tool not found\")\n+            );\n+\n+    \/\/ ZipEntry's mod date has 2 seconds precision: give extra time to\n+    \/\/ allow for e.g. rounding\/truncation and networked\/samba drives.\n+    private static final long PRECISION = 10000L;\n+\n+    private static final TimeZone TZ = TimeZone.getDefault();\n+    private static final boolean DST = TZ.inDaylightTime(new Date());\n+    private static final String UNIX_2038_ROLLOVER_TIME = \"2038-01-19T03:14:07Z\";\n+    private static final Instant UNIX_2038_ROLLOVER = Instant.parse(UNIX_2038_ROLLOVER_TIME);\n+    private static final File DIR_OUTER = new File(\"outer\");\n+    private static final File DIR_INNER = new File(DIR_OUTER, \"inner\");\n+    private static final File FILE_INNER = new File(DIR_INNER, \"foo.txt\");\n+    private static final File JAR_FILE_SOURCE_DATE1 = new File(\"JarEntryTimeSourceDate1.jar\");\n+    private static final File JAR_FILE_SOURCE_DATE2 = new File(\"JarEntryTimeSourceDate2.jar\");\n+\n+    \/\/ Valid --date values for jar\n+    @DataProvider\n+    private Object[][] validSourceDates() {\n+        return new Object[][]{\n+                {\"1980-01-01T00:00:02+00:00\"},\n+                {\"1986-06-24T01:02:03+00:00\"},\n+                {\"2022-03-15T00:00:00+00:00\"},\n+                {\"2022-03-15T00:00:00+06:00\"},\n+                {\"2021-12-25T09:30:00-08:00[America\/Los_Angeles]\"},\n+                {\"2021-12-31T23:59:59Z\"},\n+                {\"2024-06-08T14:24Z\"},\n+                {\"2026-09-24T16:26-05:00\"},\n+                {\"2038-11-26T06:06:06+00:00\"},\n+                {\"2098-02-18T00:00:00-08:00\"},\n+                {\"2099-12-31T23:59:59+00:00\"}\n+        };\n+    }\n+\n+    \/\/ Invalid --date values for jar\n+    @DataProvider\n+    private Object[][] invalidSourceDates() {\n+        return new Object[][]{\n+                {\"1976-06-24T01:02:03+00:00\"},\n+                {\"1980-01-01T00:00:01+00:00\"},\n+                {\"2100-01-01T00:00:00+00:00\"},\n+                {\"2138-02-18T00:00:00-11:00\"},\n+                {\"2006-04-06T12:38:00\"},\n+                {\"2012-08-24T16\"}\n+        };\n+    }\n+\n+    @BeforeMethod\n+    public void runBefore() throws IOException {\n+        runAfter();\n+        createOuterInnerDirs();\n+    }\n+\n+    @AfterMethod\n+    public void runAfter() {\n+        cleanup(DIR_INNER);\n+        cleanup(DIR_OUTER);\n+        JAR_FILE_SOURCE_DATE1.delete();\n+        JAR_FILE_SOURCE_DATE2.delete();\n+        TimeZone.setDefault(TZ);\n+    }\n+\n+    \/**\n+     * Test jar tool with various valid --date <timestamps>\n+     *\/\n+    @Test(dataProvider = \"validSourceDates\")\n+    public void testValidSourceDate(String sourceDate) {\n+        if (isInTransition()) return;\n+\n+        \/\/ Test --date source date\n+        Assert.assertEquals(JAR_TOOL.run(System.out, System.err,\n+                \"--create\",\n+                \"--file\", JAR_FILE_SOURCE_DATE1.getName(),\n+                \"--date\", sourceDate,\n+                DIR_OUTER.getName()), 0);\n+        Assert.assertTrue(JAR_FILE_SOURCE_DATE1.exists());\n+\n+        \/\/ Extract JAR_FILE_SOURCE_DATE1 and check last modified values\n+        Assert.assertEquals(JAR_TOOL.run(System.out, System.err,\n+                \"--extract\",\n+                \"--file\", JAR_FILE_SOURCE_DATE1.getName()), 0);\n+        Assert.assertTrue(DIR_OUTER.exists());\n+        Assert.assertTrue(DIR_INNER.exists());\n+        Assert.assertTrue(FILE_INNER.exists());\n+        LocalDateTime expectedLdt = ZonedDateTime.parse(sourceDate,\n+                        DateTimeFormatter.ISO_DATE_TIME)\n+                .withZoneSameInstant(ZoneOffset.UTC)\n+                .toLocalDateTime();\n+        System.out.format(\"Checking jar entries local date time for --date %s, is %s%n\",\n+                sourceDate, expectedLdt);\n+        long sourceDateEpochMillis = TimeUnit.MILLISECONDS.convert(\n+                expectedLdt.toEpochSecond(ZoneId.systemDefault().getRules()\n+                        .getOffset(expectedLdt)), TimeUnit.SECONDS);\n+        checkFileTime(DIR_OUTER.lastModified(), sourceDateEpochMillis);\n+        checkFileTime(DIR_INNER.lastModified(), sourceDateEpochMillis);\n+        checkFileTime(FILE_INNER.lastModified(), sourceDateEpochMillis);\n+    }\n+\n+    \/**\n+     * Test jar tool with various invalid --date <timestamps>\n+     *\/\n+    @Test(dataProvider = \"invalidSourceDates\")\n+    public void testInvalidSourceDate(String sourceDate) {\n+        \/\/ Negative Tests --date out of range or wrong format source date\n+        Assert.assertNotEquals(JAR_TOOL.run(System.out, System.err,\n+                \"--create\",\n+                \"--file\", JAR_FILE_SOURCE_DATE1.getName(),\n+                \"--date\", sourceDate,\n+                DIR_OUTER.getName()), 0);\n+    }\n+\n+    \/**\n+     * Test jar produces deterministic reproducible output\n+     *\/\n+    @Test(dataProvider = \"validSourceDates\")\n+    public void testJarsReproducible(String sourceDate) throws IOException {\n+        \/\/ Test jars are reproducible across timezones\n+        TimeZone tzAsia = TimeZone.getTimeZone(\"Asia\/Shanghai\");\n+        TimeZone tzLA = TimeZone.getTimeZone(\"America\/Los_Angeles\");\n+        TimeZone.setDefault(tzAsia);\n+        Assert.assertEquals(JAR_TOOL.run(System.out, System.err,\n+                \"--create\",\n+                \"--file\", JAR_FILE_SOURCE_DATE1.getName(),\n+                \"--date\", sourceDate,\n+                DIR_OUTER.getName()), 0);\n+        Assert.assertTrue(JAR_FILE_SOURCE_DATE1.exists());\n+\n+        try {\n+            \/\/ Sleep 5 seconds to ensure jar timestamps might be different if they could be\n+            Thread.sleep(5000);\n+        } catch (InterruptedException ex) {\n+        }\n+\n+        TimeZone.setDefault(tzLA);\n+        Assert.assertEquals(JAR_TOOL.run(System.out, System.err,\n+                \"--create\",\n+                \"--file\", JAR_FILE_SOURCE_DATE2.getName(),\n+                \"--date\", sourceDate,\n+                DIR_OUTER.getName()), 0);\n+        Assert.assertTrue(JAR_FILE_SOURCE_DATE2.exists());\n+\n+        \/\/ Check jars are identical\n+        Assert.assertEquals(Files.readAllBytes(JAR_FILE_SOURCE_DATE1.toPath()),\n+                Files.readAllBytes(JAR_FILE_SOURCE_DATE2.toPath()));\n+    }\n+\n+    \/**\n+     * Create the standard directory structure used by the test:\n+     * outer\/\n+     * inner\/\n+     * foo.txt\n+     *\/\n+    static void createOuterInnerDirs() throws IOException {\n+        Assert.assertTrue(DIR_OUTER.mkdir());\n+        Assert.assertTrue(DIR_INNER.mkdir());\n+        try (PrintWriter pw = new PrintWriter(FILE_INNER)) {\n+            pw.println(\"hello, world\");\n+        }\n+        Assert.assertTrue(DIR_OUTER.exists());\n+        Assert.assertTrue(DIR_INNER.exists());\n+        Assert.assertTrue(FILE_INNER.exists());\n+    }\n+\n+    \/**\n+     * Check the extracted and original millis since Epoch file times are\n+     * within the zip precision time period.\n+     *\/\n+    static void checkFileTime(long now, long original) {\n+        if (isTimeSettingChanged()) {\n+            return;\n+        }\n+\n+        if (Math.abs(now - original) > PRECISION) {\n+            \/\/ If original time is after UNIX 2038 32bit rollover\n+            \/\/ and the now time is exactly the rollover time, then assume\n+            \/\/ running on a file system that only supports to 2038 (e.g.XFS) and pass test\n+            if (FileTime.fromMillis(original).toInstant().isAfter(UNIX_2038_ROLLOVER) &&\n+                    FileTime.fromMillis(now).toInstant().equals(UNIX_2038_ROLLOVER)) {\n+                System.out.println(\"Checking file time after Unix 2038 rollover,\" +\n+                        \" and extracted file time is \" + UNIX_2038_ROLLOVER_TIME + \", \" +\n+                        \" Assuming restricted file system, pass file time check.\");\n+            } else {\n+                throw new AssertionError(\"checkFileTime failed,\" +\n+                        \" extracted to \" + FileTime.fromMillis(now) +\n+                        \", expected to be close to \" + FileTime.fromMillis(original));\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Has the timezone or DST changed during the test?\n+     *\/\n+    private static boolean isTimeSettingChanged() {\n+        TimeZone currentTZ = TimeZone.getDefault();\n+        boolean currentDST = currentTZ.inDaylightTime(new Date());\n+        if (!currentTZ.equals(TZ) || currentDST != DST) {\n+            System.out.println(\"Timezone or DST has changed during \" +\n+                    \"ReproducibleJar testcase execution. Test skipped\");\n+            return true;\n+        } else {\n+            return false;\n+        }\n+    }\n+\n+    \/**\n+     * Is the Zone currently within the transition change period?\n+     *\/\n+    private static boolean isInTransition() {\n+        var inTransition = false;\n+        var date = new Date();\n+        var defZone = ZoneId.systemDefault();\n+        if (defZone.getRules().getTransition(\n+                date.toInstant().atZone(defZone).toLocalDateTime()) != null) {\n+            System.out.println(\"ReproducibleJar testcase being run during Zone offset transition.  Test skipped.\");\n+            inTransition = true;\n+        }\n+        return inTransition;\n+    }\n+\n+    \/**\n+     * Remove the directory and its contents\n+     *\/\n+    static void cleanup(File dir) {\n+        File[] x = dir.listFiles();\n+        if (x != null) {\n+            for (File f : x) {\n+                f.delete();\n+            }\n+        }\n+        dir.delete();\n+    }\n+}\n","filename":"test\/jdk\/tools\/jar\/ReproducibleJar.java","additions":290,"deletions":0,"binary":false,"changes":290,"status":"added"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.nio.file.Path;\n+import jdk.internal.jimage.BasicImageReader;\n+import jdk.internal.jimage.ImageLocation;\n+import jdk.test.lib.compiler.InMemoryJavaCompiler;\n+import jdk.test.lib.util.JarBuilder;\n+\n+import tests.Helper;\n+import tests.JImageGenerator;\n+import tests.Result;\n+\n+\/*\n+ * @test\n+ * @bug 8278185\n+ * @summary Test non-ASCII path in custom JRE\n+ * @library ..\/lib\n+ *          \/test\/lib\n+ * @modules java.base\/jdk.internal.jimage\n+ *          jdk.jdeps\/com.sun.tools.classfile\n+ *          jdk.jlink\/jdk.tools.jimage\n+ * @build tests.*\n+ * @run main\/othervm JImageNonAsciiNameTest\n+ *\/\n+\n+public class JImageNonAsciiNameTest {\n+    private final static String moduleName = \"A_module\";\n+    private final static String packageName = \"test.\\u3042\"; \/\/non-ASCII\n+    private final static String className = \"A\";\n+    private final static String fullName = packageName + \".\" + className;\n+    private static Helper helper;\n+\n+    public static void main(String[] args) throws Exception {\n+        helper = Helper.newHelper();\n+        if (helper == null) {\n+            System.err.println(\"Test not run\");\n+            return;\n+        }\n+\n+        String source =\n+            \"package \"+packageName+\";\" +\n+            \"public class \"+className+\" {\" +\n+            \"    public static void main(String[] args) {}\" +\n+            \"}\";\n+        String moduleInfo = \"module \" + moduleName + \" {}\";\n+\n+        \/\/ Using InMemory features to avoid generating non-ASCII name file\n+        byte[] byteA = InMemoryJavaCompiler.compile(fullName, source);\n+        byte[] byteModule = InMemoryJavaCompiler.compile(\n+                \"module-info\", moduleInfo);\n+\n+        Path jarDir = helper.getJarDir();\n+        JarBuilder jb = new JarBuilder(\n+                jarDir.resolve(moduleName + \".jar\").toString());\n+        jb.addEntry(fullName.replace(\".\",\"\/\") + \".class\", byteA);\n+        jb.addEntry(\"module-info.class\", byteModule);\n+        jb.build();\n+\n+        Path outDir = helper.createNewImageDir(moduleName);\n+\n+        Result result = JImageGenerator.getJLinkTask()\n+                .modulePath(helper.defaultModulePath())\n+                .output(outDir)\n+                .addMods(moduleName)\n+                .call();\n+        Path testImage = result.assertSuccess();\n+\n+        BasicImageReader bir = BasicImageReader.open(\n+                testImage.resolve(\"lib\").resolve(\"modules\"));\n+        ImageLocation loc = bir.findLocation(moduleName,\n+                fullName.replace(\".\",\"\/\") + \".class\");\n+        if (loc == null) {\n+            throw new RuntimeException(\"Failed to find \" +\n+                    fullName + \" in module \" +moduleName);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/tools\/jimage\/JImageNonAsciiNameTest.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8142968 8166568 8166286 8170618 8168149 8240910 8276764\n+ * @bug 8142968 8166568 8166286 8170618 8168149 8240910 8276764 8276766\n@@ -186,0 +186,2 @@\n+        Path jmod = MODS_DIR.resolve(\"foo.jmod\");\n+        FileUtils.deleteFileIfExistsWithRetry(jmod);\n@@ -188,1 +190,1 @@\n-             MODS_DIR.resolve(\"foo.jmod\").toString())\n+             jmod.toString())\n@@ -192,1 +194,1 @@\n-             MODS_DIR.resolve(\"foo.jmod\").toString())\n+             jmod.toString())\n@@ -214,0 +216,58 @@\n+    @Test\n+    public void testSourceDateReproducible() throws IOException {\n+        String cp = EXPLODED_DIR.resolve(\"foo\").resolve(\"classes\").toString();\n+        Path jmod1 = MODS_DIR.resolve(\"foo1.jmod\");\n+        Path jmod2 = MODS_DIR.resolve(\"foo2.jmod\");\n+        Path jmod3 = MODS_DIR.resolve(\"foo3.jmod\");\n+        FileUtils.deleteFileIfExistsWithRetry(jmod1);\n+        FileUtils.deleteFileIfExistsWithRetry(jmod2);\n+        FileUtils.deleteFileIfExistsWithRetry(jmod3);\n+\n+        \/\/ Use source date of 15\/03\/2022\n+        String sourceDate = \"2022-03-15T00:00:00+00:00\";\n+\n+        jmod(\"create\",\n+             \"--class-path\", cp,\n+             \"--date\", sourceDate,\n+             jmod1.toString())\n+            .assertSuccess();\n+\n+        try {\n+            \/\/ Sleep 5 seconds to ensure zip timestamps might be different if they could be\n+            Thread.sleep(5000);\n+        } catch(InterruptedException ex) {}\n+\n+        jmod(\"create\",\n+             \"--class-path\", cp,\n+             \"--date\", sourceDate,\n+             jmod2.toString())\n+            .assertSuccess();\n+\n+        \/\/ Compare file byte content to see if they are identical\n+        assertSameContent(jmod1, jmod2);\n+\n+        \/\/ Use a date before 1980 and assert failure error\n+        sourceDate = \"1976-03-15T00:00:00+00:00\";\n+\n+        jmod(\"create\",\n+             \"--class-path\", cp,\n+             \"--date\", sourceDate,\n+             jmod3.toString())\n+            .assertFailure()\n+            .resultChecker(r -> {\n+                assertContains(r.output, \"is out of the valid range\");\n+            });\n+\n+        \/\/ Use a date after 2099 and assert failure error\n+        sourceDate = \"2100-03-15T00:00:00+00:00\";\n+\n+        jmod(\"create\",\n+             \"--class-path\", cp,\n+             \"--date\", sourceDate,\n+             jmod3.toString())\n+            .assertFailure()\n+            .resultChecker(r -> {\n+                assertContains(r.output, \"is out of the valid range\");\n+            });\n+    }\n+\n","filename":"test\/jdk\/tools\/jmod\/JmodTest.java","additions":63,"deletions":3,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -0,0 +1,110 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8271079\n+ * @summary JavaFileObject#toUri in MR-JAR returns real path\n+ * @modules java.compiler\n+ *          jdk.compiler\n+ * @run main T8271079\n+ *\/\n+\n+import java.io.*;\n+import java.net.*;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.*;\n+import java.util.*;\n+import java.util.jar.JarEntry;\n+import javax.tools.*;\n+\n+public class T8271079 {\n+\n+    public static void main(String[] args) throws Exception {\n+        new T8271079().run();\n+    }\n+\n+    final PrintStream out;\n+\n+    T8271079() {\n+        this.out = System.out;\n+    }\n+\n+    void run() throws Exception {\n+        Path mr = generateMultiReleaseJar();\n+        try {\n+            testT8271079(mr);\n+        } finally {\n+            Files.deleteIfExists(mr);\n+        }\n+    }\n+\n+    \/\/ $ echo 'module hello {}' > module-info.java\n+    \/\/ $ javac -d classes --release 9 module-info.java\n+    \/\/ $ jar --create --file mr.jar --release 9 -C classes .\n+    Path generateMultiReleaseJar() throws Exception {\n+        Files.writeString(Path.of(\"module-info.java\"), \"module hello {}\");\n+        java.util.spi.ToolProvider.findFirst(\"javac\").orElseThrow()\n+            .run(out, System.err, \"-d\", \"classes\", \"--release\", \"9\", \"module-info.java\");\n+        Path mr = Path.of(\"mr.jar\");\n+        java.util.spi.ToolProvider.findFirst(\"jar\").orElseThrow()\n+            .run(out, System.err, \"--create\", \"--file\", mr.toString(), \"--release\", \"9\", \"-C\", \"classes\", \".\");\n+        out.println(\"Created: \" + mr.toUri());\n+        out.println(\" Exists: \" + Files.exists(mr));\n+        return mr;\n+    }\n+\n+    void testT8271079(Path path) throws Exception {\n+        StandardJavaFileManager fileManager =\n+            ToolProvider.getSystemJavaCompiler()\n+                .getStandardFileManager(null, Locale.ENGLISH, StandardCharsets.UTF_8);\n+        fileManager.setLocationFromPaths(StandardLocation.CLASS_PATH, List.of(path));\n+        Iterator<String> options = Arrays.asList(\"--multi-release\", \"9\").iterator();\n+        fileManager.handleOption(options.next(), options);\n+\n+        Iterable<JavaFileObject> list =\n+            fileManager.list(\n+                StandardLocation.CLASS_PATH, \"\", EnumSet.allOf(JavaFileObject.Kind.class), false);\n+\n+        for (JavaFileObject f : list) {\n+            out.println(\"JavaFileObject#getName: \" + f.getName());\n+            out.println(\"JavaFileObject#toUri: \" + f.toUri());\n+            openUsingUri(f.toUri());\n+        }\n+        System.gc(); \/\/ JDK-8224794\n+    }\n+\n+    void openUsingUri(URI uri) throws IOException {\n+        URLConnection connection = uri.toURL().openConnection();\n+        connection.setUseCaches(false); \/\/ JDK-8224794\n+        if (connection instanceof JarURLConnection jar) {\n+            try {\n+                JarEntry entry = jar.getJarEntry();\n+                out.println(\"JarEntry#getName: \" + entry.getName());\n+                connection.getInputStream().close(); \/\/ JDK-8224794\n+            } catch (FileNotFoundException e) {\n+                throw e;\n+            }\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/T8271079.java","additions":110,"deletions":0,"binary":false,"changes":110,"status":"added"},{"patch":"@@ -38,1 +38,1 @@\n- *                                      RELEASE_18\n+ *                                      RELEASE_18 RELEASE_19\n","filename":"test\/langtools\/tools\/javac\/api\/TestGetSourceVersions.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,1 +56,2 @@\n-        EIGHTEEN(\"18\", 62);\n+        EIGHTEEN(\"18\", 62),\n+        NINETEEN(\"19\", 63);\n","filename":"test\/langtools\/tools\/javac\/classfiles\/ClassVersionChecker.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,271 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8277634\n+ * @summary Verify the correct constantpool entries are created for invokedynamic instructions using\n+ *          the same bootstrap and type, but different name.\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.code\n+ *          jdk.compiler\/com.sun.tools.javac.comp\n+ *          jdk.compiler\/com.sun.tools.javac.jvm\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ *          jdk.compiler\/com.sun.tools.javac.tree\n+ *          jdk.compiler\/com.sun.tools.javac.util\n+ *          jdk.jdeps\/com.sun.tools.classfile\n+ *          jdk.jdeps\/com.sun.tools.javap\n+ * @build toolbox.JarTask toolbox.JavacTask toolbox.JavapTask toolbox.ToolBox\n+ * @run main IndyCorrectInvocationName\n+ *\/\n+\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.file.DirectoryStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+import com.sun.source.util.JavacTask;\n+import com.sun.source.util.Plugin;\n+import com.sun.source.util.TaskEvent;\n+import com.sun.source.util.TaskListener;\n+\n+import com.sun.tools.classfile.Attribute;\n+import com.sun.tools.classfile.BootstrapMethods_attribute;\n+import com.sun.tools.classfile.ClassFile;\n+import com.sun.tools.classfile.Code_attribute;\n+import com.sun.tools.classfile.ConstantPool.CONSTANT_InvokeDynamic_info;\n+import com.sun.tools.classfile.ConstantPool.CONSTANT_NameAndType_info;\n+import com.sun.tools.classfile.Instruction;\n+\n+import com.sun.tools.javac.api.BasicJavacTask;\n+import com.sun.tools.javac.code.Symbol;\n+import com.sun.tools.javac.code.Symbol.MethodSymbol;\n+import com.sun.tools.javac.code.Symtab;\n+import com.sun.tools.javac.code.Type;\n+import com.sun.tools.javac.jvm.PoolConstant;\n+import com.sun.tools.javac.tree.JCTree;\n+import com.sun.tools.javac.tree.JCTree.JCClassDecl;\n+import com.sun.tools.javac.tree.JCTree.JCCompilationUnit;\n+import com.sun.tools.javac.tree.JCTree.JCLiteral;\n+import com.sun.tools.javac.tree.JCTree.JCMethodInvocation;\n+import com.sun.tools.javac.tree.JCTree.Tag;\n+import com.sun.tools.javac.tree.TreeMaker;\n+import com.sun.tools.javac.tree.TreeScanner;\n+import com.sun.tools.javac.util.Context;\n+import com.sun.tools.javac.util.Names;\n+\n+import toolbox.JarTask;\n+import toolbox.ToolBox;\n+\n+\n+public class IndyCorrectInvocationName implements Plugin {\n+    private static final String NL = System.lineSeparator();\n+\n+    public static void main(String... args) throws Exception {\n+        new IndyCorrectInvocationName().run();\n+    }\n+\n+    void run() throws Exception {\n+        ToolBox tb = new ToolBox();\n+        Path pluginClasses = Path.of(\"plugin-classes\");\n+        tb.writeFile(pluginClasses.resolve(\"META-INF\").resolve(\"services\").resolve(Plugin.class.getName()),\n+                IndyCorrectInvocationName.class.getName() + System.lineSeparator());\n+        try (DirectoryStream<Path> ds = Files.newDirectoryStream(Path.of(ToolBox.testClasses))) {\n+            for (Path p : ds) {\n+                if (p.getFileName().toString().startsWith(\"IndyCorrectInvocationName\") ||\n+                    p.getFileName().toString().endsWith(\".class\")) {\n+                    Files.copy(p, pluginClasses.resolve(p.getFileName()));\n+                }\n+            }\n+        }\n+\n+        Path pluginJar = Path.of(\"plugin.jar\");\n+        new JarTask(tb, pluginJar)\n+                .baseDir(pluginClasses)\n+                .files(\".\")\n+                .run();\n+\n+        Path src = Path.of(\"src\");\n+            tb.writeJavaFiles(src,\n+                    \"\"\"\n+                    import java.lang.invoke.CallSite;\n+                    import java.lang.invoke.ConstantCallSite;\n+                    import java.lang.invoke.MethodHandles;\n+                    import java.lang.invoke.MethodHandles.Lookup;\n+                    import java.lang.invoke.MethodType;\n+                    public class Test{\n+                        private static final String NL = System.lineSeparator();\n+                        private static StringBuilder output = new StringBuilder();\n+                        public static void doRun() {\n+                            method(\"a\");\n+                            method(\"b\");\n+                            method(\"a\");\n+                            method(\"b\");\n+                        }\n+                        public static String run() {\n+                            doRun();\n+                            return output.toString();\n+                        }\n+                        public static void method(String name) {}\n+                        public static void actualMethod(String name) {\n+                            output.append(name).append(NL);\n+                        }\n+                        public static CallSite bootstrap(Lookup lookup, String name, MethodType type) throws Exception {\n+                            return new ConstantCallSite(MethodHandles.lookup()\n+                                                                     .findStatic(Test.class,\n+                                                                                 \"actualMethod\",\n+                                                                                 MethodType.methodType(void.class,\n+                                                                                                       String.class))\n+                                                                     .bindTo(name));\n+                        }\n+                    }\n+                    \"\"\");\n+        Path classes = Files.createDirectories(Path.of(\"classes\"));\n+\n+        new toolbox.JavacTask(tb)\n+                .classpath(pluginJar)\n+                .options(\"-XDaccessInternalAPI\")\n+                .outdir(classes)\n+                .files(tb.findJavaFiles(src))\n+                .run()\n+                .writeAll();\n+\n+        URLClassLoader cl = new URLClassLoader(new URL[] {classes.toUri().toURL()});\n+\n+        String actual = (String) cl.loadClass(\"Test\")\n+                                   .getMethod(\"run\")\n+                                   .invoke(null);\n+        String expected = \"a\" + NL + \"b\" + NL + \"a\" + NL +\"b\" + NL;\n+        if (!Objects.equals(actual, expected)) {\n+            throw new AssertionError(\"expected: \" + expected + \"; but got: \" + actual);\n+        }\n+\n+        Path testClass = classes.resolve(\"Test.class\");\n+        ClassFile cf = ClassFile.read(testClass);\n+        BootstrapMethods_attribute bootAttr =\n+                (BootstrapMethods_attribute) cf.attributes.get(Attribute.BootstrapMethods);\n+        if (bootAttr.bootstrap_method_specifiers.length != 1) {\n+            throw new AssertionError(\"Incorrect number of bootstrap methods: \" +\n+                                     bootAttr.bootstrap_method_specifiers.length);\n+        }\n+        Code_attribute codeAttr =\n+                (Code_attribute) cf.methods[1].attributes.get(Attribute.Code);\n+        Set<Integer> seenBootstraps = new HashSet<>();\n+        Set<Integer> seenNameAndTypes = new HashSet<>();\n+        Set<String> seenNames = new HashSet<>();\n+        for (Instruction i : codeAttr.getInstructions()) {\n+            switch (i.getOpcode()) {\n+                case INVOKEDYNAMIC -> {\n+                    int idx = i.getUnsignedShort(1);\n+                    CONSTANT_InvokeDynamic_info dynamicInfo =\n+                            (CONSTANT_InvokeDynamic_info) cf.constant_pool.get(idx);\n+                    seenBootstraps.add(dynamicInfo.bootstrap_method_attr_index);\n+                    seenNameAndTypes.add(dynamicInfo.name_and_type_index);\n+                    CONSTANT_NameAndType_info nameAndTypeInfo =\n+                            cf.constant_pool.getNameAndTypeInfo(dynamicInfo.name_and_type_index);\n+                    seenNames.add(nameAndTypeInfo.getName());\n+                }\n+                case RETURN -> {}\n+                default -> throw new AssertionError(\"Unexpected instruction: \" + i.getOpcode());\n+            }\n+            }\n+        if (seenBootstraps.size() != 1) {\n+            throw new AssertionError(\"Unexpected bootstraps: \" + seenBootstraps);\n+        }\n+        if (seenNameAndTypes.size() != 2) {\n+            throw new AssertionError(\"Unexpected names and types: \" + seenNameAndTypes);\n+        }\n+        if (!seenNames.equals(Set.of(\"a\", \"b\"))) {\n+            throw new AssertionError(\"Unexpected names and types: \" + seenNames);\n+        }\n+    }\n+\n+    \/\/ Plugin impl...\n+\n+    @Override\n+    public String getName() { return \"IndyCorrectInvocationName\"; }\n+\n+    @Override\n+    public void init(JavacTask task, String... args) {\n+        Context c = ((BasicJavacTask) task).getContext();\n+        task.addTaskListener(new TaskListener() {\n+            @Override\n+            public void started(TaskEvent e) {\n+                if (e.getKind() == TaskEvent.Kind.GENERATE) {\n+                    convert(c, (JCCompilationUnit) e.getCompilationUnit());\n+                }\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public boolean autoStart() {\n+        return true;\n+    }\n+\n+    private void convert(Context context, JCCompilationUnit toplevel) {\n+        TreeMaker make = TreeMaker.instance(context);\n+        Names names = Names.instance(context);\n+        Symtab syms = Symtab.instance(context);\n+        new TreeScanner() {\n+            MethodSymbol bootstrap;\n+            @Override\n+            public void visitClassDef(JCClassDecl tree) {\n+                bootstrap = (MethodSymbol) tree.sym.members().getSymbolsByName(names.fromString(\"bootstrap\")).iterator().next();\n+                super.visitClassDef(tree);\n+            }\n+            @Override\n+            public void visitApply(JCMethodInvocation tree) {\n+                if (tree.args.size() == 1 && tree.args.head.hasTag(Tag.LITERAL)) {\n+                    String name = (String) ((JCLiteral) tree.args.head).value;\n+                    Type.MethodType indyType = new Type.MethodType(\n+                            com.sun.tools.javac.util.List.nil(),\n+                            syms.voidType,\n+                            com.sun.tools.javac.util.List.nil(),\n+                            syms.methodClass\n+                    );\n+                    Symbol.DynamicMethodSymbol dynSym = new Symbol.DynamicMethodSymbol(names.fromString(name),\n+                            syms.noSymbol,\n+                            bootstrap.asHandle(),\n+                            indyType,\n+                            new PoolConstant.LoadableConstant[0]);\n+\n+                    JCTree.JCFieldAccess qualifier = make.Select(make.QualIdent(bootstrap.owner), dynSym.name);\n+                    qualifier.sym = dynSym;\n+                    qualifier.type = syms.voidType;\n+                    tree.meth = qualifier;\n+                    tree.args = com.sun.tools.javac.util.List.nil();\n+                    tree.type = syms.voidType;\n+                }\n+                super.visitApply(tree);\n+            }\n+\n+        }.scan(toplevel);\n+    }\n+\n+}\n","filename":"test\/langtools\/tools\/javac\/classwriter\/IndyCorrectInvocationName.java","additions":271,"deletions":0,"binary":false,"changes":271,"status":"added"},{"patch":"@@ -115,1 +115,1 @@\n-    @SupportedSourceVersion(RELEASE_18)\n+    @SupportedSourceVersion(RELEASE_19)\n@@ -126,1 +126,1 @@\n-    @SupportedSourceVersion(RELEASE_18)\n+    @SupportedSourceVersion(RELEASE_19)\n@@ -136,1 +136,1 @@\n-    @SupportedSourceVersion(RELEASE_18)\n+    @SupportedSourceVersion(RELEASE_19)\n@@ -146,1 +146,1 @@\n-    @SupportedSourceVersion(RELEASE_18)\n+    @SupportedSourceVersion(RELEASE_19)\n@@ -167,1 +167,1 @@\n-    @SupportedSourceVersion(RELEASE_18)\n+    @SupportedSourceVersion(RELEASE_19)\n@@ -186,1 +186,1 @@\n-    @SupportedSourceVersion(RELEASE_18)\n+    @SupportedSourceVersion(RELEASE_19)\n@@ -207,1 +207,1 @@\n-    @SupportedSourceVersion(RELEASE_18)\n+    @SupportedSourceVersion(RELEASE_19)\n@@ -228,1 +228,1 @@\n-    @SupportedSourceVersion(RELEASE_18)\n+    @SupportedSourceVersion(RELEASE_19)\n@@ -249,1 +249,1 @@\n-    @SupportedSourceVersion(RELEASE_18)\n+    @SupportedSourceVersion(RELEASE_19)\n","filename":"test\/langtools\/tools\/javac\/lib\/JavacTestingAbstractProcessor.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-- compiler.err.preview.feature.disabled.classfile: Bar.class, 18\n+- compiler.err.preview.feature.disabled.classfile: Bar.class, 19\n","filename":"test\/langtools\/tools\/javac\/preview\/classReaderTest\/Client.nopreview.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-- compiler.warn.preview.feature.use.classfile: Bar.class, 18\n+- compiler.warn.preview.feature.use.classfile: Bar.class, 19\n","filename":"test\/langtools\/tools\/javac\/preview\/classReaderTest\/Client.preview.out","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-               \"15\", \"16\", \"17\", \"18\");\n+               \"15\", \"16\", \"17\", \"18\", \"19\");\n@@ -76,1 +76,1 @@\n-    public static final String LATEST_MAJOR_VERSION = \"62.0\";\n+    public static final String LATEST_MAJOR_VERSION = \"63.0\";\n@@ -90,1 +90,2 @@\n-        EIGHTEEN(false,  \"62.0\", \"18\", Versions::checksrc18);\n+        EIGHTEEN(false,  \"62.0\", \"18\", Versions::checksrc18),\n+        NINETEEN(false,  \"63.0\", \"19\", Versions::checksrc19);\n@@ -323,0 +324,7 @@\n+   protected void checksrc19(List<String> args) {\n+       printargs(\"checksrc19\", args);\n+       expectedPass(args, List.of(\"New7.java\", \"New8.java\", \"New10.java\", \"New11.java\",\n+                                  \"New14.java\", \"New15.java\", \"New16.java\", \"New17.java\"));\n+       \/\/ Add expectedFail after new language features added in a later release.\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/versions\/Versions.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"filename":"test\/lib\/jdk\/test\/lib\/net\/testkeys","binary":true,"status":"modified"},{"patch":"@@ -0,0 +1,138 @@\n+\/\/\n+\/\/ Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+\/\/\n+\/\/ This code is free software; you can redistribute it and\/or modify it\n+\/\/ under the terms of the GNU General Public License version 2 only, as\n+\/\/ published by the Free Software Foundation.\n+\/\/\n+\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n+\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+\/\/ version 2 for more details (a copy is included in the LICENSE file that\n+\/\/ accompanied this code).\n+\/\/\n+\/\/ You should have received a copy of the GNU General Public License version\n+\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n+\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+\/\/\n+\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+\/\/ or visit www.oracle.com if you need additional information or have any\n+\/\/ questions.\n+\/\/\n+\/\/\n+package org.openjdk.bench.jdk.incubator.vector;\n+\n+import jdk.incubator.vector.*;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@State(Scope.Thread)\n+@Fork(jvmArgsPrepend = {\"--add-modules=jdk.incubator.vector\"})\n+public class MaskFromLongBenchmark {\n+    static long val = 0;\n+\n+    @Setup(Level.Invocation)\n+    public void BmSetup() {\n+        val++;\n+    }\n+\n+    @Benchmark\n+    public int microMaskFromLong_Byte64() {\n+        VectorMask mask = VectorMask.fromLong(ByteVector.SPECIES_64, val);\n+        return mask.laneIsSet(1) ? 1 : 0;\n+    }\n+\n+    @Benchmark\n+    public int microMaskFromLong_Byte128() {\n+        VectorMask mask = VectorMask.fromLong(ByteVector.SPECIES_128, val);\n+        return mask.laneIsSet(1) ? 1 : 0;\n+    }\n+\n+    @Benchmark\n+    public int microMaskFromLong_Byte256() {\n+        VectorMask mask = VectorMask.fromLong(ByteVector.SPECIES_256, val);\n+        return mask.laneIsSet(1) ? 1 : 0;\n+    }\n+\n+    @Benchmark\n+    public int microMaskFromLong_Byte512() {\n+        VectorMask mask = VectorMask.fromLong(ByteVector.SPECIES_512, val);\n+        return mask.laneIsSet(1) ? 1 : 0;\n+    }\n+\n+    @Benchmark\n+    public int microMaskFromLong_Short64() {\n+        VectorMask mask = VectorMask.fromLong(ShortVector.SPECIES_64, val);\n+        return mask.laneIsSet(1) ? 1 : 0;\n+    }\n+\n+    @Benchmark\n+    public int microMaskFromLong_Short128() {\n+        VectorMask mask = VectorMask.fromLong(ShortVector.SPECIES_128, val);\n+        return mask.laneIsSet(1) ? 1 : 0;\n+    }\n+\n+    @Benchmark\n+    public int microMaskFromLong_Short256() {\n+        VectorMask mask = VectorMask.fromLong(ShortVector.SPECIES_256, val);\n+        return mask.laneIsSet(1) ? 1 : 0;\n+    }\n+\n+    @Benchmark\n+    public int microMaskFromLong_Short512() {\n+        VectorMask mask = VectorMask.fromLong(ShortVector.SPECIES_512, val);\n+        return mask.laneIsSet(1) ? 1 : 0;\n+    }\n+\n+    @Benchmark\n+    public int microMaskFromLong_Integer64() {\n+        VectorMask mask = VectorMask.fromLong(IntVector.SPECIES_64, val);\n+        return mask.laneIsSet(1) ? 1 : 0;\n+    }\n+\n+    @Benchmark\n+    public int microMaskFromLong_Integer128() {\n+        VectorMask mask = VectorMask.fromLong(IntVector.SPECIES_128, val);\n+        return mask.laneIsSet(1) ? 1 : 0;\n+    }\n+\n+    @Benchmark\n+    public int microMaskFromLong_Integer256() {\n+        VectorMask mask = VectorMask.fromLong(IntVector.SPECIES_256, val);\n+        return mask.laneIsSet(1) ? 1 : 0;\n+    }\n+\n+    @Benchmark\n+    public int microMaskFromLong_Integer512() {\n+        VectorMask mask = VectorMask.fromLong(IntVector.SPECIES_512, val);\n+        return mask.laneIsSet(1) ? 1 : 0;\n+    }\n+\n+    @Benchmark\n+    public int microMaskFromLong_Long64() {\n+        VectorMask mask = VectorMask.fromLong(LongVector.SPECIES_64, val);\n+        return mask.laneIsSet(0) ? 1 : 0;\n+    }\n+\n+    @Benchmark\n+    public int microMaskFromLong_Long128() {\n+        VectorMask mask = VectorMask.fromLong(LongVector.SPECIES_128, val);\n+        return mask.laneIsSet(1) ? 1 : 0;\n+    }\n+\n+    @Benchmark\n+    public int microMaskFromLong_Long256() {\n+        VectorMask mask = VectorMask.fromLong(LongVector.SPECIES_256, val);\n+        return mask.laneIsSet(1) ? 1 : 0;\n+    }\n+\n+    @Benchmark\n+    public int microMaskFromLong_Long512() {\n+        VectorMask mask = VectorMask.fromLong(LongVector.SPECIES_512, val);\n+        return mask.laneIsSet(1) ? 1 : 0;\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/MaskFromLongBenchmark.java","additions":138,"deletions":0,"binary":false,"changes":138,"status":"added"}]}