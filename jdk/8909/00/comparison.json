{"files":[{"patch":"@@ -30,1 +30,6 @@\n-import java.io.*;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.io.IOException;\n@@ -32,1 +37,0 @@\n-import java.util.Hashtable;\n@@ -34,0 +38,1 @@\n+import java.util.Hashtable;\n@@ -158,1 +163,2 @@\n-        String ext = \"\";\n+        \/\/ attempt to find the entry with the fragment component removed\n+        MimeEntry entry = findByFileName(fname, true);\n@@ -160,1 +166,3 @@\n-        int i = fname.lastIndexOf('#');\n+        \/\/ if entry not found, try again with the fragment intact\n+        if (entry == null)\n+            entry = findByFileName(fname, false);\n@@ -162,2 +170,18 @@\n-        if (i > 0) {\n-            fname = fname.substring(0, i - 1);\n+        return entry;\n+    }\n+\n+    \/**\n+     * Locate a MimeEntry by its associated file extension.\n+     *\n+     * @param fname the file name\n+     *\n+     * @param removeFragment whether to remove the fragment, if any,\n+     *        comprising the last hash ('#') and any subsequent characters\n+     *\n+     * @return the MIME entry associated with the file name\n+     *\/\n+    public MimeEntry findByFileName(String fname, boolean removeFragment) {\n+        if (removeFragment) {\n+            int hashIndex = fname.lastIndexOf('#');\n+            if (hashIndex > 0)\n+                fname = fname.substring(0, hashIndex - 1);\n@@ -166,1 +190,1 @@\n-        i = fname.lastIndexOf('.');\n+        int i = fname.lastIndexOf('.');\n@@ -171,1 +195,2 @@\n-        if (i != -1 && fname.charAt(i) == '.') {\n+        String ext = \"\";\n+        if (i != -1 && fname.charAt(i) == '.')\n@@ -173,1 +198,0 @@\n-        }\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/MimeTable.java","additions":33,"deletions":9,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @bug 4313887 8129632 8129633 8162624 8146215 8162745 8273655 8274171\n+ * @bug 4313887 8129632 8129633 8162624 8146215 8162745 8273655 8274171 8287237\n@@ -32,2 +32,4 @@\n-import java.io.*;\n-import java.nio.file.*;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -82,1 +84,1 @@\n-                    Paths.get(System.getProperty(\"user.home\"), \".mime.types\");\n+                    Path.of(System.getProperty(\"user.home\"), \".mime.types\");\n@@ -85,1 +87,1 @@\n-                Path etcMimeTypes = Paths.get(\"\/etc\/mime.types\");\n+                Path etcMimeTypes = Path.of(\"\/etc\/mime.types\");\n@@ -191,0 +193,9 @@\n+        \/\/ Verify type is found when the extension is in a fragment component\n+        Path pathWithFragement = Path.of(\"SomePathWith#aFragement.png\");\n+        String contentType = Files.probeContentType(pathWithFragement);\n+        if (contentType == null || !contentType.equals(\"image\/png\")) {\n+            System.out.printf(\"For %s expected \\\"png\\\" but got %s%n\",\n+                pathWithFragement, contentType);\n+            failures++;\n+        }\n+\n","filename":"test\/jdk\/java\/nio\/file\/Files\/probeContentType\/Basic.java","additions":16,"deletions":5,"binary":false,"changes":21,"status":"modified"}]}