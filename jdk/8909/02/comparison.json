{"files":[{"patch":"@@ -30,1 +30,6 @@\n-import java.io.*;\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.io.IOException;\n@@ -32,1 +37,0 @@\n-import java.util.Hashtable;\n@@ -34,0 +38,1 @@\n+import java.util.Hashtable;\n@@ -38,0 +43,3 @@\n+    \/** Hash mark introducing a URI fragment *\/\n+    private static final int HASH_MARK = '#';\n+\n@@ -39,2 +47,1 @@\n-    private Hashtable<String, MimeEntry> entries\n-        = new Hashtable<>();\n+    private Hashtable<String, MimeEntry> entries = new Hashtable<>();\n@@ -43,2 +50,1 @@\n-    private Hashtable<String, MimeEntry> extensionMap\n-        = new Hashtable<>();\n+    private Hashtable<String, MimeEntry> extensionMap = new Hashtable<>();\n@@ -87,3 +93,0 @@\n-    \/**\n-     *\n-     *\/\n@@ -154,2 +157,1 @@\n-     * Locate a MimeEntry by the file extension that has been associated\n-     * with it. Parses general file names, and URLs.\n+     * Returns the file extension or the empty string if none found.\n@@ -157,10 +159,2 @@\n-    public MimeEntry findByFileName(String fname) {\n-        String ext = \"\";\n-\n-        int i = fname.lastIndexOf('#');\n-\n-        if (i > 0) {\n-            fname = fname.substring(0, i - 1);\n-        }\n-\n-        i = fname.lastIndexOf('.');\n+    private static String getFileExtension(String fname) {\n+        int i = fname.lastIndexOf('.');\n@@ -171,0 +165,1 @@\n+        String ext = \"\";\n@@ -175,1 +170,37 @@\n-        return findByExt(ext);\n+        return ext;\n+    }\n+\n+    \/**\n+     * Locate a MimeEntry by its associated file extension.\n+     * Parses general file names, and URLs.\n+     *\n+     * @param fname the file name\n+     *\n+     * @return the MIME entry associated with the file name or {@code null}\n+     *\/\n+    public MimeEntry findByFileName(String fname) {\n+        MimeEntry entry = null;\n+\n+        \/\/ If an optional fragment introduced by a hash mark is\n+        \/\/ present, then strip it and use the prefix\n+        int hashIndex = fname.lastIndexOf(HASH_MARK);\n+        if (hashIndex > 0) {\n+            String ext = getFileExtension(fname.substring(0, hashIndex));\n+            if (!ext.isEmpty()) {\n+                entry = findByExt(ext);\n+                if (entry != null) {\n+                    return entry;\n+                }\n+            }\n+        }\n+\n+        assert entry == null;\n+\n+        \/\/ If either no optional fragment was present, or the entry was not\n+        \/\/ found with the fragment stripped, then try again with the full name\n+        String ext = getFileExtension(fname);\n+        if (!ext.isEmpty()) {\n+            entry = findByExt(ext);\n+        }\n+\n+        return entry;\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/MimeTable.java","additions":53,"deletions":22,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n- * @bug 4313887 8129632 8129633 8162624 8146215 8162745 8273655 8274171\n+ * @bug 4313887 8129632 8129633 8162624 8146215 8162745 8273655 8274171 8287237\n@@ -32,2 +32,4 @@\n-import java.io.*;\n-import java.nio.file.*;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -82,1 +84,1 @@\n-                    Paths.get(System.getProperty(\"user.home\"), \".mime.types\");\n+                    Path.of(System.getProperty(\"user.home\"), \".mime.types\");\n@@ -85,1 +87,1 @@\n-                Path etcMimeTypes = Paths.get(\"\/etc\/mime.types\");\n+                Path etcMimeTypes = Path.of(\"\/etc\/mime.types\");\n@@ -191,0 +193,9 @@\n+        \/\/ Verify type is found when the extension is in a fragment component\n+        Path pathWithFragement = Path.of(\"SomePathWith#aFragement.png\");\n+        String contentType = Files.probeContentType(pathWithFragement);\n+        if (contentType == null || !contentType.equals(\"image\/png\")) {\n+            System.err.printf(\"For %s expected \\\"png\\\" but got %s%n\",\n+                pathWithFragement, contentType);\n+            failures++;\n+        }\n+\n","filename":"test\/jdk\/java\/nio\/file\/Files\/probeContentType\/Basic.java","additions":16,"deletions":5,"binary":false,"changes":21,"status":"modified"}]}