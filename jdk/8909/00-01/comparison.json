{"files":[{"patch":"@@ -43,0 +43,3 @@\n+    \/** Hash mark introducing a URI fragment *\/\n+    private static final int HASH_MARK = '#';\n+\n@@ -44,2 +47,1 @@\n-    private Hashtable<String, MimeEntry> entries\n-        = new Hashtable<>();\n+    private Hashtable<String, MimeEntry> entries = new Hashtable<>();\n@@ -48,2 +50,1 @@\n-    private Hashtable<String, MimeEntry> extensionMap\n-        = new Hashtable<>();\n+    private Hashtable<String, MimeEntry> extensionMap = new Hashtable<>();\n@@ -92,3 +93,0 @@\n-    \/**\n-     *\n-     *\/\n@@ -159,2 +157,1 @@\n-     * Locate a MimeEntry by the file extension that has been associated\n-     * with it. Parses general file names, and URLs.\n+     * Returns the file extension or the empty string if none found.\n@@ -162,3 +159,5 @@\n-    public MimeEntry findByFileName(String fname) {\n-        \/\/ attempt to find the entry with the fragment component removed\n-        MimeEntry entry = findByFileName(fname, true);\n+    private static String getFileExtension(String fname) {\n+        int i = fname.lastIndexOf('.');\n+        \/\/ REMIND: OS specific delimiters appear here\n+        i = Math.max(i, fname.lastIndexOf('\/'));\n+        i = Math.max(i, fname.lastIndexOf('?'));\n@@ -166,3 +165,4 @@\n-        \/\/ if entry not found, try again with the fragment intact\n-        if (entry == null)\n-            entry = findByFileName(fname, false);\n+        String ext = \"\";\n+        if (i != -1 && fname.charAt(i) == '.') {\n+            ext = fname.substring(i).toLowerCase();\n+        }\n@@ -170,1 +170,1 @@\n-        return entry;\n+        return ext;\n@@ -175,0 +175,1 @@\n+     * Parses general file names, and URLs.\n@@ -178,4 +179,1 @@\n-     * @param removeFragment whether to remove the fragment, if any,\n-     *        comprising the last hash ('#') and any subsequent characters\n-     *\n-     * @return the MIME entry associated with the file name\n+     * @return the MIME entry associated with the file name or {@code null}\n@@ -183,5 +181,14 @@\n-    public MimeEntry findByFileName(String fname, boolean removeFragment) {\n-        if (removeFragment) {\n-            int hashIndex = fname.lastIndexOf('#');\n-            if (hashIndex > 0)\n-                fname = fname.substring(0, hashIndex - 1);\n+    public MimeEntry findByFileName(String fname) {\n+        MimeEntry entry = null;\n+\n+        \/\/ If an optional fragment introduced by a hash mark is\n+        \/\/ present, then strip it and use the prefix\n+        int hashIndex = fname.lastIndexOf(HASH_MARK);\n+        if (hashIndex > 0) {\n+            String ext = getFileExtension(fname.substring(0, hashIndex - 1));\n+            if (!ext.isEmpty()) {\n+                entry = findByExt(ext);\n+                if (entry != null) {\n+                    return entry;\n+                }\n+            }\n@@ -190,4 +197,1 @@\n-        int i = fname.lastIndexOf('.');\n-        \/\/ REMIND: OS specific delimiters appear here\n-        i = Math.max(i, fname.lastIndexOf('\/'));\n-        i = Math.max(i, fname.lastIndexOf('?'));\n+        assert entry == null;\n@@ -195,3 +199,6 @@\n-        String ext = \"\";\n-        if (i != -1 && fname.charAt(i) == '.')\n-            ext = fname.substring(i).toLowerCase();\n+        \/\/ If either no optional fragment was present, or the entry was not\n+        \/\/ found with the fragment stripped, then try again with the full name\n+        String ext = getFileExtension(fname);\n+        if (!ext.isEmpty()) {\n+            entry = findByExt(ext);\n+        }\n@@ -199,1 +206,1 @@\n-        return findByExt(ext);\n+        return entry;\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/MimeTable.java","additions":40,"deletions":33,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -197,1 +197,1 @@\n-            System.out.printf(\"For %s expected \\\"png\\\" but got %s%n\",\n+            System.err.printf(\"For %s expected \\\"png\\\" but got %s%n\",\n","filename":"test\/jdk\/java\/nio\/file\/Files\/probeContentType\/Basic.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}