{"files":[{"patch":"@@ -239,1 +239,1 @@\n-static Klass* handle_resolution_exception(Symbol* class_name, bool throw_error, Klass* klass, TRAPS) {\n+static void handle_resolution_exception(Symbol* class_name, bool throw_error, TRAPS) {\n@@ -241,1 +241,0 @@\n-    assert(klass == NULL, \"Should not have result with exception pending\");\n@@ -250,3 +249,1 @@\n-      THROW_MSG_CAUSE_NULL(vmSymbols::java_lang_NoClassDefFoundError(), class_name->as_C_string(), e);\n-    } else {\n-      return NULL;\n+      THROW_MSG_CAUSE(vmSymbols::java_lang_NoClassDefFoundError(), class_name->as_C_string(), e);\n@@ -256,7 +253,5 @@\n-  if (klass == NULL) {\n-    ResourceMark rm(THREAD);\n-    if (throw_error) {\n-      THROW_MSG_NULL(vmSymbols::java_lang_NoClassDefFoundError(), class_name->as_C_string());\n-    } else {\n-      THROW_MSG_NULL(vmSymbols::java_lang_ClassNotFoundException(), class_name->as_C_string());\n-    }\n+  ResourceMark rm(THREAD);\n+  if (throw_error) {\n+    THROW_MSG(vmSymbols::java_lang_NoClassDefFoundError(), class_name->as_C_string());\n+  } else {\n+    THROW_MSG(vmSymbols::java_lang_ClassNotFoundException(), class_name->as_C_string());\n@@ -264,1 +259,0 @@\n-  return klass;\n@@ -273,1 +267,4 @@\n-  return handle_resolution_exception(class_name, throw_error, klass, THREAD);\n+  if (HAS_PENDING_EXCEPTION || klass == NULL) {\n+    handle_resolution_exception(class_name, throw_error, CHECK_NULL);\n+  }\n+  return klass;\n@@ -411,7 +408,4 @@\n-    \/\/ to support \/\/ loading: if klass done loading, just return superclass\n-    \/\/ if super_name, & class_loader don't match:\n-    \/\/ if initial define, SD update will give LinkageError\n-    \/\/ if redefine: compare_class_versions will give HIERARCHY_CHANGED\n-    \/\/ so we don't throw an exception here.\n-    \/\/ see: nsk redefclass014 & java.lang.instrument Instrument032\n-    if ((klassk != NULL ) && (is_superclass) &&\n+    \/\/ To support parallel loading: if class is done loading, just return the superclass\n+    \/\/ if the super_name matches class->super()->name() and if the class loaders match.\n+    \/\/ Otherwise, a LinkageError will be thrown later.\n+    if (klassk != NULL && is_superclass &&\n@@ -429,1 +423,1 @@\n-      \/\/ Be careful not to exit resolve_super\n+      \/\/ Be careful not to exit resolve_super without removing this placeholder.\n@@ -460,3 +454,5 @@\n-  \/\/ If no exception, this returns the original InstanceKlass.\n-  Klass* k = handle_resolution_exception(super_name, true, superk, THREAD);\n-  return (k != NULL) ? superk : NULL;\n+  if (HAS_PENDING_EXCEPTION || superk == NULL) {\n+    handle_resolution_exception(super_name, true, CHECK_NULL);\n+  }\n+\n+  return superk;\n@@ -2031,8 +2027,6 @@\n-void verify_placeholder(Symbol* class_name, ClassLoaderData* loader_data, bool is_parallel_capable) {\n-  \/\/ Only parallel capable class loaders use placeholder table for define class (bizarre)\n-  if (is_parallel_capable) {\n-    assert_locked_or_safepoint(SystemDictionary_lock);\n-    unsigned int name_hash = placeholders()->compute_hash(class_name);\n-    Symbol* ph_check =  placeholders()->find_entry(name_hash, class_name, loader_data);\n-    assert(ph_check != NULL, \"This placeholder should exist\");\n-  }\n+void verify_placeholder(Symbol* class_name, ClassLoaderData* loader_data) {\n+  \/\/ Only parallel capable class loaders use placeholder table for define class.\n+  assert_locked_or_safepoint(SystemDictionary_lock);\n+  unsigned int name_hash = placeholders()->compute_hash(class_name);\n+  Symbol* ph_check =  placeholders()->find_entry(name_hash, class_name, loader_data);\n+  assert(ph_check != NULL, \"This placeholder should exist\");\n@@ -2083,1 +2077,1 @@\n-    DEBUG_ONLY(verify_placeholder(name, loader_data, is_parallelCapable(class_loader)));\n+    DEBUG_ONLY(if (is_parallelCapable(class_loader)) verify_placeholder(name, loader_data));\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":28,"deletions":34,"binary":false,"changes":62,"status":"modified"}]}