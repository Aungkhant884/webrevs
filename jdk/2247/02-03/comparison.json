{"files":[{"patch":"@@ -243,2 +243,1 @@\n-    \/\/ and if so convert it to a NoClassDefFoundError\n-    \/\/ And chain the original ClassNotFoundException\n+    \/\/ and convert it to a NoClassDefFoundError and chain the original ClassNotFoundException.\n@@ -250,0 +249,2 @@\n+    } else {\n+      return; \/\/ the caller will throw the incoming exception\n@@ -252,1 +253,2 @@\n-  \/\/ Class not found, throw appropriate error or exception depending on value of throw_error\n+  \/\/ If the class is not found, ie, caller has checked that klass is NULL, throw the appropriate\n+  \/\/ error or exception depending on the value of throw_error.\n@@ -758,11 +760,15 @@\n-    \/\/ add placeholder entry to record loading instance class\n-    \/\/ Five cases:\n-    \/\/ All cases need to prevent modifying bootclasssearchpath\n-    \/\/ in parallel with a classload of same classname\n-    \/\/ Redefineclasses uses existence of the placeholder for the duration\n-    \/\/ of the class load to prevent concurrent redefinition of not completely\n-    \/\/ defined classes.\n-    \/\/ case 1. traditional classloaders that rely on the classloader object lock\n-    \/\/   - no other need for LOAD_INSTANCE\n-    \/\/ case 2. traditional classloaders that break the classloader object lock\n-    \/\/    as a deadlock workaround. Detection of this case requires that\n+    \/\/ Add placeholder entry to record loading instance class\n+    \/\/ Three cases:\n+    \/\/ case 1. Bootstrap classloader\n+    \/\/    This classloader supports parallelism at the classloader level\n+    \/\/    but only allows a single thread to load a class\/classloader pair.\n+    \/\/    The LOAD_INSTANCE placeholder is the mechanism for mutual exclusion.\n+    \/\/ case 2. parallelCapable user level classloaders\n+    \/\/    These class loaders don't lock the object until load_instance_class is\n+    \/\/    called after this placeholder is added.\n+    \/\/    Allow parallel classloading of a class\/classloader pair where mutual\n+    \/\/    exclusion is provided by this lock in the class loader Java code.\n+    \/\/ case 3. traditional classloaders that rely on the classloader object lock\n+    \/\/    There should be no need for need for LOAD_INSTANCE\n+    \/\/    except if the traditional classloaders break the classloader object lock\n+    \/\/    as a legacy deadlock workaround. Detection of this case requires that\n@@ -773,7 +779,0 @@\n-    \/\/ case 3. Bootstrap classloader - don't own objectLocker\n-    \/\/    This classloader supports parallelism at the classloader level,\n-    \/\/    but only allows a single load of a class\/classloader pair.\n-    \/\/    No performance benefit and no deadlock issues.\n-    \/\/ case 4. parallelCapable user level classloaders - without objectLocker\n-    \/\/    Allow parallel classloading of a class\/classloader pair\n-\n@@ -815,4 +814,1 @@\n-      \/\/ All cases: add LOAD_INSTANCE holding SystemDictionary_lock\n-      \/\/ case 4: parallelCapable: allow competing threads to try\n-      \/\/ LOAD_INSTANCE in parallel\n-\n+      \/\/ All cases: add LOAD_INSTANCE while holding the SystemDictionary_lock\n","filename":"src\/hotspot\/share\/classfile\/systemDictionary.cpp","additions":21,"deletions":25,"binary":false,"changes":46,"status":"modified"}]}