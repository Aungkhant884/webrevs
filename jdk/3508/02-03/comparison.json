{"files":[{"patch":"@@ -46,1 +46,0 @@\n-    private boolean toggleBool = false;\n@@ -53,11 +52,0 @@\n-    \/**\n-     * Returns a different boolean each time this method is invoked (switching between {@code false} and {@code true}).\n-     * The first invocation returns {@code false}.\n-     *\n-     * @return an inverted boolean of the result of the last invocation of this method.\n-     *\/\n-    public boolean toggleBoolean() {\n-        toggleBool = !toggleBool;\n-        return toggleBool;\n-    }\n-\n","filename":"test\/lib\/jdk\/test\/lib\/hotspot\/ir_framework\/AbstractInfo.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -52,2 +52,2 @@\n-        output.append(START).append(\"\\n\");\n-        output.append(\"<method>,{comma separated applied @IR rule ids}\\n\");\n+        output.append(START).append(System.lineSeparator());\n+        output.append(\"<method>,{comma separated applied @IR rule ids}\").append(System.lineSeparator());\n@@ -88,1 +88,1 @@\n-            output.append(\"\\n\");\n+            output.append(System.lineSeparator());\n","filename":"test\/lib\/jdk\/test\/lib\/hotspot\/ir_framework\/IREncodingPrinter.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-                TestFramework.fail(\"Invalid IR match rule encoding. No comma found: \" + splitComma[0]);\n+                throw new TestFrameworkException(\"Invalid IR match rule encoding. No comma found: \" + splitComma[0]);\n@@ -113,1 +113,1 @@\n-                    TestFramework.fail(\"Invalid IR match rule encoding. No number found: \" + splitComma[j]);\n+                    throw new TestFrameworkException(\"Invalid IR match rule encoding. No number found: \" + splitComma[j]);\n@@ -127,1 +127,1 @@\n-        try (BufferedReader br = Files.newBufferedReader(Paths.get(\"\", hotspotPidFileName))) {\n+        try (BufferedReader br = Files.newBufferedReader(Paths.get(hotspotPidFileName))) {\n@@ -161,1 +161,1 @@\n-            TestFramework.fail(\"Error while reading \" + hotspotPidFileName, e);\n+            throw new TestFrameworkException(\"Error while reading \" + hotspotPidFileName, e);\n@@ -173,1 +173,1 @@\n-            irMethod.appendIdealOutput(builder.toString());\n+            irMethod.setIdealOutput(builder.toString());\n@@ -176,1 +176,1 @@\n-            irMethod.appendOptoAssemblyOutput(builder.toString());\n+            irMethod.setOptoAssemblyOutput(builder.toString());\n@@ -193,1 +193,0 @@\n-            line = line.replace(\"&amp;\", \"&\");\n@@ -198,0 +197,1 @@\n+            line = line.replace(\"&amp;\", \"&\");\n@@ -199,1 +199,1 @@\n-        builder.append(line).append(\"\\n\");\n+        builder.append(line).append(System.lineSeparator());\n@@ -203,1 +203,1 @@\n-        int compileId = -1;\n+        int compileId;\n@@ -207,1 +207,1 @@\n-            TestRun.fail(\"Could not parse compile id\", e);\n+            throw new TestRunException(\"Could not parse compile id\", e);\n@@ -299,1 +299,1 @@\n-            failMsg.insert(0, \"@IR rule \" + (id + 1) + \": \\\"\" + irAnno + \"\\\"\\n\");\n+            failMsg.insert(0, \"@IR rule \" + (id + 1) + \": \\\"\" + irAnno + \"\\\"\" + System.lineSeparator());\n@@ -348,1 +348,1 @@\n-        failMsg.append(\"- failOn: Graph contains forbidden nodes:\\n\");\n+        failMsg.append(\"- failOn: Graph contains forbidden nodes:\").append(System.lineSeparator());\n@@ -356,3 +356,4 @@\n-                failMsg.append(\"    Regex \").append(nodeId).append(\") \").append(nodeRegex).append(\"\\n\");\n-                failMsg.append(\"    Matched forbidden node\").append(matchCount > 1 ? \"s (\" + matchCount + \")\" : \"\").append(\":\\n\");\n-                matcher.results().forEach(r -> failMsg.append(\"      \").append(r.group()).append(\"\\n\"));\n+                failMsg.append(\"    Regex \").append(nodeId).append(\": \").append(nodeRegex).append(System.lineSeparator());\n+                failMsg.append(\"    Matched forbidden node\").append(matchCount > 1 ? \"s (\" + matchCount + \")\" : \"\")\n+                       .append(\":\").append(System.lineSeparator());\n+                matcher.results().forEach(r -> failMsg.append(\"      \").append(r.group()).append(System.lineSeparator()));\n@@ -399,1 +400,1 @@\n-                        failMsg.append(\"- counts: Graph contains wrong number of nodes:\\n\");\n+                        failMsg.append(\"- counts: Graph contains wrong number of nodes:\").append(System.lineSeparator());\n@@ -418,1 +419,1 @@\n-        failMsg.append(\"    Regex \").append(countsId).append(\") \").append(node).append(\"\\n\");\n+        failMsg.append(\"    Regex \").append(countsId).append(\": \").append(node).append(System.lineSeparator());\n@@ -432,2 +433,2 @@\n-            failMsg.append(\" node\").append(actualCount > 1 ? \"s\" : \"\").append(\":\\n\");\n-            matcher.results().forEach(r -> failMsg.append(\"      \").append(r.group()).append(\"\\n\"));\n+            failMsg.append(\" node\").append(actualCount > 1 ? \"s\" : \"\").append(\":\").append(System.lineSeparator());\n+            matcher.results().forEach(r -> failMsg.append(\"      \").append(r.group()).append(System.lineSeparator()));\n@@ -436,1 +437,1 @@\n-            failMsg.append(\" nodes.\\n\");\n+            failMsg.append(\" nodes.\").append(System.lineSeparator());\n@@ -455,1 +456,1 @@\n-                compilationsBuilder.append(\">>> Compilation of \").append(method).append(\":\\n\");\n+                compilationsBuilder.append(\">>> Compilation of \").append(method).append(\":\").append(System.lineSeparator());\n@@ -467,1 +468,1 @@\n-                compilationsBuilder.append(output).append(\"\\n\\n\");\n+                compilationsBuilder.append(output).append(System.lineSeparator()).append(System.lineSeparator());\n@@ -469,1 +470,1 @@\n-                failuresBuilder.append(\"- Method \\\"\").append(method).append(\"\\\":\\n\");\n+                failuresBuilder.append(\"- Method \\\"\").append(method).append(\"\\\":\").append(System.lineSeparator());\n@@ -471,2 +472,5 @@\n-                list.forEach(s -> failuresBuilder.append(\"  * \").append(s.replace(\"\\n\", \"\\n    \").trim()).append(\"\\n\"));\n-                failuresBuilder.append(\"\\n\");\n+                list.forEach(s -> failuresBuilder.append(\"  * \")\n+                                                 .append(s.replace(System.lineSeparator(),\n+                                                                   System.lineSeparator() + \"    \").trim())\n+                                                 .append(System.lineSeparator()));\n+                failuresBuilder.append(System.lineSeparator());\n@@ -474,3 +478,7 @@\n-            failuresBuilder.insert(0, (\"\\nOne or more @IR rules failed:\\n\\n\" + \"Failed IR Rules (\" + failures + \")\\n\")\n-                              + \"-----------------\" + \"-\".repeat(String.valueOf(failures).length()) + \"\\n\");\n-            failuresBuilder.append(\">>> Check stdout for compilation output of the failed methods\\n\\n\");\n+            failuresBuilder.insert(0, (System.lineSeparator() + System.lineSeparator()\n+                                       + \"One or more @IR rules failed:\" + System.lineSeparator()\n+                                       + System.lineSeparator() + \"Failed IR Rules (\" + failures + \")\"\n+                                       + System.lineSeparator()) + \"-----------------\"\n+                                       + \"-\".repeat(String.valueOf(failures).length()) + System.lineSeparator());\n+            failuresBuilder.append(\">>> Check stdout for compilation output of the failed methods\")\n+                           .append(System.lineSeparator()).append(System.lineSeparator());\n","filename":"test\/lib\/jdk\/test\/lib\/hotspot\/ir_framework\/IRMatcher.java","additions":36,"deletions":28,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -32,4 +32,4 @@\n-    final private Method method;\n-    final private int[] ruleIds;\n-    final private IR[] irAnnos;\n-    final private StringBuilder outputBuilder;\n+    private final Method method;\n+    private final int[] ruleIds;\n+    private final IR[] irAnnos;\n+    private final StringBuilder outputBuilder;\n@@ -68,1 +68,1 @@\n-    public void appendIdealOutput(String idealOutput) {\n+    public void setIdealOutput(String idealOutput) {\n@@ -70,1 +70,1 @@\n-        this.idealOutput = \"PrintIdeal:\\n\" + idealOutput;\n+        this.idealOutput = \"PrintIdeal:\" + System.lineSeparator() + idealOutput;\n@@ -77,3 +77,3 @@\n-    public void appendOptoAssemblyOutput(String optoAssemblyOutput) {\n-        this.optoAssemblyOutput = \"PrintOptoAssembly:\\n\" + optoAssemblyOutput;\n-        outputBuilder.append(\"\\n\\n\").append(this.optoAssemblyOutput);\n+    public void setOptoAssemblyOutput(String optoAssemblyOutput) {\n+        this.optoAssemblyOutput = \"PrintOptoAssembly:\" + System.lineSeparator() + optoAssemblyOutput;\n+        outputBuilder.append(System.lineSeparator()).append(System.lineSeparator()).append(this.optoAssemblyOutput);\n","filename":"test\/lib\/jdk\/test\/lib\/hotspot\/ir_framework\/IRMethod.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-More information on base tasts with a precise definition can be found in the [Javadocs](.\/doc\/jdk\/test\/lib\/hotspot\/ir_framework\/Test.html). Concrete examples on how to specify a base test can be found in [BaseTestsExample](.\/examples\/BaseTestExample.java).\n+More information on base tests with a precise definition can be found in the [Javadocs](.\/doc\/jdk\/test\/lib\/hotspot\/ir_framework\/Test.html). Concrete examples on how to specify a base test can be found in [BaseTestsExample](.\/examples\/BaseTestExample.java).\n@@ -48,1 +48,1 @@\n-More information on checked tasts with a precise definition can be found in the [Javadocs](.\/doc\/jdk\/test\/lib\/hotspot\/ir_framework\/Check.html). Concrete examples on how to specify a checked test can be found in [CheckedTestsExample](.\/examples\/CheckedTestExample.java).\n+More information on checked tests with a precise definition can be found in the [Javadocs](.\/doc\/jdk\/test\/lib\/hotspot\/ir_framework\/Check.html). Concrete examples on how to specify a checked test can be found in [CheckedTestsExample](.\/examples\/CheckedTestExample.java).\n@@ -53,1 +53,1 @@\n-More information on checked tasts with a precise definition can be found in the [Javadocs](.\/doc\/jdk\/test\/lib\/hotspot\/ir_framework\/Run.html). Concrete examples on how to specify a custom run test can be found in [CustomRunTestsExample](.\/examples\/CustomRunTestExample.java).\n+More information on checked tests with a precise definition can be found in the [Javadocs](.\/doc\/jdk\/test\/lib\/hotspot\/ir_framework\/Run.html). Concrete examples on how to specify a custom run test can be found in [CustomRunTestsExample](.\/examples\/CustomRunTestExample.java).\n@@ -74,1 +74,1 @@\n-The recommended way to use the framework is by using defining single `@run driver` statement in the JTreg header which, however, does not allow the specification of additional test VM flags. Instead, the user has the possibility to provide VM flags by calling `TestFramework.runWithFlags()` or by creating a `TestFramework` builder object on which `addFlags()` can be called.\n+The recommended way to use the framework is by defining a single `@run driver` statement in the JTreg header which, however, does not allow the specification of additional test VM flags. Instead, the user has the possibility to provide VM flags by calling `TestFramework.runWithFlags()` or by creating a `TestFramework` builder object on which `addFlags()` can be called.\n@@ -94,1 +94,1 @@\n-- `-DWarmup=200`: Provide a new default value of the number of warm-up iterations. This might have an influence on the resulting IR and could lead to matching failures (the user can also set a fixed default warm-up value in a test with `testFrameworkObject.setDefaultWarmup(200)`).\n+- `-DWarmup=200`: Provide a new default value of the number of warm-up iterations (framework default is 2000). This might have an influence on the resulting IR and could lead to matching failures (the user can also set a fixed default warm-up value in a test with `testFrameworkObject.setDefaultWarmup(200)`).\n@@ -112,1 +112,1 @@\n-3. After the compilation, the test is invokes one more time.\n+3. After the compilation, the test is invoked one more time.\n@@ -116,1 +116,1 @@\n-Some of the steps above can be different due to the kind of the test or due to using non-default annotation properties. These details and differences are discribed in the Javadocs for the three tests (see section 2.1 Different Tests).\n+Some of the steps above can be different due to the kind of the test or due to using non-default annotation properties. These details and differences are described in the Javadocs for the three tests (see section 2.1 Different Tests).\n","filename":"test\/lib\/jdk\/test\/lib\/hotspot\/ir_framework\/README.md","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -59,2 +59,2 @@\n-                TestRun.fail(\"Provided a scenario index in the -DScenario comma-separated list which is not \" +\n-                             \"a number: \" + SCENARIOS);\n+                throw new TestRunException(\"Provided a scenario index in the -DScenario comma-separated list which is not \"\n+                                           + \"a number: \" + SCENARIOS);\n","filename":"test\/lib\/jdk\/test\/lib\/hotspot\/ir_framework\/Scenario.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,2 +37,1 @@\n-            FAILURES.add(failureMessage);\n-            throw new TestFormatException(failureMessage);\n+            fail(failureMessage);\n@@ -44,1 +43,1 @@\n-            FAILURES.add(failureMessage);\n+            failNoThrow(failureMessage);\n@@ -63,3 +62,5 @@\n-        builder.append(\"\\nOne or more format violations have been detected:\\n\\n\");\n-        builder.append(\"Violations (\").append(FAILURES.size()).append(\")\\n\");\n-        builder.append(\"-------------\").append(\"-\".repeat(String.valueOf(FAILURES.size()).length())).append(\"\\n\");\n+        builder.append(System.lineSeparator()).append(\"One or more format violations have been detected:\")\n+               .append(System.lineSeparator()).append(System.lineSeparator());\n+        builder.append(\"Violations (\").append(FAILURES.size()).append(\")\").append(System.lineSeparator());\n+        builder.append(\"-------------\").append(\"-\".repeat(String.valueOf(FAILURES.size()).length()))\n+               .append(System.lineSeparator());\n@@ -67,1 +68,1 @@\n-            builder.append(\" - \").append(failure).append(\"\\n\");\n+            builder.append(\" - \").append(failure).append(System.lineSeparator());\n","filename":"test\/lib\/jdk\/test\/lib\/hotspot\/ir_framework\/TestFormat.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -139,1 +139,1 @@\n-                                     \"\"\" + \"\\n\";\n+                                     \"\"\" + System.lineSeparator();\n@@ -149,0 +149,1 @@\n+    private static boolean toggleBool;\n@@ -351,3 +352,3 @@\n-     * If a class is used by the test class that does not specify any compile command annotations, you do not need\n-     * to include it with this method. If no helper class specifies any compile commands, you do not need to call\n-     * this method at all.\n+     * Duplicates in {@code helperClasses} are ignored. If a class is used by the test class that does not specify any\n+     * compile command annotations, you do not need to include it with this method. If no helper class specifies any\n+     * compile commands, you do not need to call this method at all.\n@@ -370,5 +371,1 @@\n-        for (var helperClass : helperClasses) {\n-            TestRun.check(!this.helperClasses.contains(helperClass),\n-                          \"Cannot add the same class twice: \" + helperClass);\n-            this.helperClasses.add(helperClass);\n-        }\n+        this.helperClasses.addAll(Arrays.asList(helperClasses));\n@@ -419,1 +416,1 @@\n-                System.err.println(\"\\n\" + e.getExceptionInfo());\n+                System.err.println(System.lineSeparator() + e.getExceptionInfo());\n@@ -424,1 +421,1 @@\n-                System.err.println(\"\\n\" + e.getExceptionInfo());\n+                System.err.println(System.lineSeparator() + e.getExceptionInfo());\n@@ -598,0 +595,13 @@\n+    \/**\n+     * Returns a different boolean each time this method is invoked (switching between {@code false} and {@code true}).\n+     * The very first invocation returns {@code false}. Note that this method could be used by different tests and\n+     * thus the first invocation for a test could be {@code true} or {@code false} depending on how many times\n+     * other tests have already invoked this method.\n+     *\n+     * @return an inverted boolean of the result of the last invocation of this method.\n+     *\/\n+    public static boolean toggleBoolean() {\n+        toggleBool = !toggleBool;\n+        return toggleBool;\n+    }\n+\n@@ -634,1 +644,2 @@\n-                System.out.println(\"IR verification disabled due to using non-whitelisted JTreg VM or Javaoptions flag(s).\\n\");\n+                System.out.println(\"IR verification disabled due to using non-whitelisted JTreg VM or Javaoptions flag(s).\"\n+                                   + System.lineSeparator());\n@@ -647,1 +658,0 @@\n-            int scenarioIndex = scenario.getIndex();\n@@ -668,1 +678,1 @@\n-        builder.append(\"\\n\\n\");\n+        builder.append(System.lineSeparator()).append(System.lineSeparator());\n@@ -681,1 +691,2 @@\n-                builder.append(errorMsg).append(\"\\n\").append(irException.getExceptionInfo()).append(e.getMessage());\n+                builder.append(errorMsg).append(System.lineSeparator()).append(irException.getExceptionInfo())\n+                       .append(e.getMessage());\n@@ -683,1 +694,1 @@\n-                builder.append(errorMsg).append(\"\\n\").append(((TestVMException) e).getExceptionInfo());\n+                builder.append(errorMsg).append(System.lineSeparator()).append(((TestVMException) e).getExceptionInfo());\n@@ -690,1 +701,1 @@\n-            builder.append(\"\\n\");\n+            builder.append(System.lineSeparator());\n@@ -697,1 +708,1 @@\n-        TestRun.fail(failedScenarios + \". Please check stderr for more information.\");\n+        throw new TestRunException(failedScenarios + \". Please check stderr for more information.\");\n@@ -703,2 +714,4 @@\n-        builder.append(title).append(\"\\n\").append(\"=\".repeat(title.length())).append(\"\\n\");\n-        builder.append(\"Scenario flags: [\").append(String.join(\", \", scenario.getFlags())).append(\"]\\n\");\n+        builder.append(title).append(System.lineSeparator()).append(\"=\".repeat(title.length()))\n+               .append(System.lineSeparator());\n+        builder.append(\"Scenario flags: [\").append(String.join(\", \", scenario.getFlags())).append(\"]\")\n+               .append(System.lineSeparator());\n@@ -830,2 +843,1 @@\n-            fail(\"Error while executing Test VM\", e);\n-            return;\n+            throw new TestFrameworkException(\"Error while executing Test VM\", e);\n@@ -945,1 +957,1 @@\n-            throw new TestFormatException(\"\\n\\n\" + matcher.group());\n+            throw new TestFormatException(System.lineSeparator() + System.lineSeparator() + matcher.group());\n@@ -957,1 +969,1 @@\n-            fail(failureMessage);\n+            throw new TestFrameworkException(failureMessage);\n@@ -960,8 +972,0 @@\n-\n-    static void fail(String failureMessage) {\n-        throw new TestFrameworkException(\"Internal Test Framework exception - please file a bug:\\n\" + failureMessage);\n-    }\n-\n-    static void fail(String failureMessage, Throwable e) {\n-        throw new TestFrameworkException(\"Internal Test Framework exception - please file a bug:\\n\" + failureMessage, e);\n-    }\n@@ -992,1 +996,2 @@\n-        return \"Command Line:\\n\" + String.join(\" \", process.command()) + \"\\n\\n\";\n+        return \"Command Line:\" + System.lineSeparator() + String.join(\" \", process.command())\n+               + System.lineSeparator();\n@@ -1024,1 +1029,2 @@\n-            stdOut = \"\\n\\nStandard Output\\n---------------\\n\" + getOutput();\n+            stdOut = System.lineSeparator() + System.lineSeparator() + \"Standard Output\" + System.lineSeparator()\n+                     + \"---------------\" + System.lineSeparator() + getOutput();\n@@ -1032,2 +1038,4 @@\n-            return \"TestFramework test VM exited with code \" + exitCode + \"\\n\"\n-                   + stdOut + \"\\n\" + getCommandLine() + \"\\n\\nError Output\\n------------\\n\" + stdErr + \"\\n\\n\" + rerunHint;\n+            return \"TestFramework test VM exited with code \" + exitCode + System.lineSeparator() + stdOut\n+                   + System.lineSeparator() + getCommandLine() + System.lineSeparator() + System.lineSeparator()\n+                   + \"Error Output\" + System.lineSeparator() + \"------------\" + System.lineSeparator() + stdErr\n+                   + System.lineSeparator() + System.lineSeparator() + rerunHint;\n","filename":"test\/lib\/jdk\/test\/lib\/hotspot\/ir_framework\/TestFramework.java","additions":44,"deletions":36,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-        super(message);\n+        super(\"Internal Test Framework exception - please file a bug:\" + System.lineSeparator() + message);\n@@ -37,1 +37,1 @@\n-        super(message, e);\n+        super(\"Internal Test Framework exception - please file a bug:\" + System.lineSeparator() + message, e);\n","filename":"test\/lib\/jdk\/test\/lib\/hotspot\/ir_framework\/TestFrameworkException.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-            System.err.println(\"\\n\" + \"\"\"\n+            System.err.println(System.lineSeparator() + \"\"\"\n@@ -167,2 +167,1 @@\n-            TestRun.fail(\"Could not find \" + classType + \" class\", e);\n-            return null;\n+            throw new TestRunException(\"Could not find \" + classType + \" class\", e);\n@@ -433,1 +432,1 @@\n-                         \"Cannot use explicit compile command annotations (@ForceInline, @DontInline,\" +\n+                         \"Cannot use explicit compile command annotations (@ForceInline, @DontInline, \" +\n@@ -792,2 +791,4 @@\n-        forceCompileMap.forEach((key, value) -> builder.append(\"- \").append(key).append(\" at CompLevel.\").append(value).append(\"\\n\"));\n-        TestRun.fail(\"Could not force compile the following @ForceCompile methods:\\n\" + builder.toString());\n+        forceCompileMap.forEach((key, value) -> builder.append(\"- \").append(key).append(\" at CompLevel.\").append(value)\n+                                                       .append(System.lineSeparator()));\n+        throw new TestRunException(\"Could not force compile the following @ForceCompile methods:\"\n+                                   + System.lineSeparator() + builder.toString());\n@@ -817,1 +818,1 @@\n-            Collections.shuffle(testList);\n+            Collections.shuffle(testList, Utils.getRandomInstance());\n@@ -836,1 +837,2 @@\n-                builder.append(test.toString()).append(\":\\n\").append(sw.toString()).append(\"\\n\\n\");\n+                builder.append(test.toString()).append(\":\").append(System.lineSeparator()).append(sw.toString())\n+                       .append(System.lineSeparator()).append(System.lineSeparator());\n@@ -855,1 +857,1 @@\n-            System.out.println(\"\\n\\nTest execution times:\");\n+            System.out.println(System.lineSeparator() + System.lineSeparator() + \"Test execution times:\");\n@@ -857,1 +859,1 @@\n-                System.out.format(\"%-10s%15d ns\\n\", entry.getValue() + \":\", entry.getKey());\n+                System.out.format(\"%-10s%15d ns\" + System.lineSeparator(), entry.getValue() + \":\", entry.getKey());\n@@ -863,3 +865,3 @@\n-            String msg = \"\\n\\nTest Failures (\" + failures + \")\\n\" +\n-                         \"----------------\" + \"-\".repeat(String.valueOf(failures).length());\n-            throw new TestRunException(msg + \"\\n\" + builder.toString());\n+            String msg = System.lineSeparator() + System.lineSeparator() + \"Test Failures (\" + failures + \")\"\n+                         + System.lineSeparator() + \"----------------\" + \"-\".repeat(String.valueOf(failures).length());\n+            throw new TestRunException(msg + System.lineSeparator() + builder.toString());\n@@ -976,1 +978,1 @@\n-                default -> TestRun.fail(\"compiledAtLevel() should not be called with \" + level);\n+                default -> throw new TestRunException(\"compiledAtLevel() should not be called with \" + level);\n@@ -1150,1 +1152,2 @@\n-        TestRun.fail(testMethod + \" not compiled after waiting for \" + WAIT_FOR_COMPILATION_TIMEOUT\/1000 + \" s\");\n+        throw new TestRunException(testMethod + \" not compiled after waiting for \"\n+                                   + WAIT_FOR_COMPILATION_TIMEOUT\/1000 + \" s\");\n@@ -1415,1 +1418,2 @@\n-            TestRun.fail(\"Some compilations did not complete after \" + timeout + \"ms for @Run method \" + runMethod);\n+            throw new TestRunException(\"Some compilations did not complete after \" + timeout\n+                                       + \"ms for @Run method \" + runMethod);\n@@ -1442,3 +1446,4 @@\n-                case STANDALONE -> TestFramework.fail(\"Should not be called for STANDALONE method \" + runMethod);\n-                case NORMAL -> message = message + \"\\nCheck your @Run method \" + runMethod + \" to ensure that \"\n-                                         + test.getTestMethod() + \" is called at least once in each iteration.\";\n+                case STANDALONE -> throw new TestFrameworkException(\"Should not be called for STANDALONE method \" + runMethod);\n+                case NORMAL -> message = message + System.lineSeparator() + \"Check your @Run method \" + runMethod\n+                                         + \" to ensure that \" + test.getTestMethod()\n+                                         + \" is called at least once in each iteration.\";\n@@ -1446,1 +1451,1 @@\n-            TestRun.fail(message);\n+            throw new TestRunException(message);\n","filename":"test\/lib\/jdk\/test\/lib\/hotspot\/ir_framework\/TestFrameworkExecution.java","additions":25,"deletions":20,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -43,2 +43,1 @@\n-            TestFramework.fail(\"Could not load WhiteBox\", e);\n-            throw e; \/\/ Not reached\n+            throw new TestFrameworkException(\"Could not load WhiteBox\", e);\n@@ -90,2 +89,3 @@\n-        String encoding = TestFramework.TEST_VM_FLAGS_START + \"\\n\" + String.join(TestFramework.TEST_VM_FLAGS_DELIMITER, flags)\n-                      + \"\\n\" + TestFramework.TEST_VM_FLAGS_END;\n+        String encoding = TestFramework.TEST_VM_FLAGS_START + System.lineSeparator()\n+                          + String.join(TestFramework.TEST_VM_FLAGS_DELIMITER, flags)\n+                          + System.lineSeparator() + TestFramework.TEST_VM_FLAGS_END;\n","filename":"test\/lib\/jdk\/test\/lib\/hotspot\/ir_framework\/TestFrameworkPrepareFlags.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-    private ServerSocket serverSocket;\n+    private final ServerSocket serverSocket;\n@@ -60,1 +60,1 @@\n-            TestFramework.fail(\"Failed to create TestFramework server socket\", e);\n+            throw new TestFrameworkException(\"Failed to create TestFramework server socket\", e);\n@@ -98,1 +98,1 @@\n-                    builder.append(next).append(\"\\n\");\n+                    builder.append(next).append(System.lineSeparator());\n@@ -102,2 +102,1 @@\n-                TestFramework.fail(\"Server socket error\", e);\n-                return null;\n+                throw new TestFrameworkException(\"Server socket error\", e);\n@@ -113,1 +112,1 @@\n-            TestFramework.fail(\"Could not close socket\", e);\n+            throw new TestFrameworkException(\"Could not close socket\", e);\n@@ -148,1 +147,1 @@\n-            String failMsg = \"\\n\\n\" + \"\"\"\n+            String failMsg = System.lineSeparator() + System.lineSeparator() + \"\"\"\n@@ -155,1 +154,1 @@\n-            TestRun.fail(failMsg, e);\n+            throw new TestRunException(failMsg, e);\n@@ -186,2 +185,1 @@\n-            TestFramework.fail(\"Could not read from socket task\", e);\n-            return null;\n+            throw new TestFrameworkException(\"Could not read from socket task\", e);\n@@ -201,1 +199,1 @@\n-                System.out.println(\"\\nRun flag defined test list\");\n+                System.out.println(System.lineSeparator() + \"Run flag defined test list\");\n@@ -209,1 +207,1 @@\n-                        builder.append(line).append(\"\\n\");\n+                        builder.append(line).append(System.lineSeparator());\n@@ -218,2 +216,1 @@\n-            TestFramework.fail(\"Could not read from socket task\", e);\n-            return null;\n+            throw new TestFrameworkException(\"Could not read from socket task\", e);\n","filename":"test\/lib\/jdk\/test\/lib\/hotspot\/ir_framework\/TestFrameworkSocket.java","additions":11,"deletions":14,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -36,8 +36,0 @@\n-\n-    public static void fail(String failureMessage) {\n-        throw new TestRunException(failureMessage);\n-    }\n-\n-    public static void fail(String failureMessage, Exception e) {\n-        throw new TestRunException(failureMessage, e);\n-    }\n","filename":"test\/lib\/jdk\/test\/lib\/hotspot\/ir_framework\/TestRun.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-        TestFramework.run(); \/\/ equivalent to TestFramework.run(TestSimpleTest.class)\n+        TestFramework.run(); \/\/ equivalent to TestFramework.run(BaseTestExample.class)\n","filename":"test\/lib\/jdk\/test\/lib\/hotspot\/ir_framework\/examples\/BaseTestExample.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-        TestFramework.run(); \/\/ equivalent to TestFramework.run(TestSimpleTest.class)\n+        TestFramework.run(); \/\/ equivalent to TestFramework.run(CheckedTestExample.class)\n","filename":"test\/lib\/jdk\/test\/lib\/hotspot\/ir_framework\/examples\/CheckedTestExample.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-        TestFramework.run(); \/\/ equivalent to TestFramework.run(TestSimpleTest.class)\n+        TestFramework.run(); \/\/ equivalent to TestFramework.run(CustomRunTestExample.class)\n","filename":"test\/lib\/jdk\/test\/lib\/hotspot\/ir_framework\/examples\/CustomRunTestExample.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -145,1 +145,1 @@\n-    @IR(failOn = {IRNode.STORE, IRNode.LOAD}) \/\/ LOOP and STORE regex, letting the rule fail\n+    @IR(failOn = {IRNode.STORE, IRNode.LOAD}) \/\/ STORE and LOAD regex found, letting the rule fail\n","filename":"test\/lib\/jdk\/test\/lib\/hotspot\/ir_framework\/examples\/IRExample.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -77,1 +77,3 @@\n-            violations.getFailedMethods().forEach(f -> Asserts.assertTrue(msg.contains(f), \"Could not find \" + f + \" in violations\\n\" + msg));\n+            violations.getFailedMethods().forEach(\n+                    f -> Asserts.assertTrue(msg.contains(f),\n+                                            \"Could not find \" + f + \" in violations\" + System.lineSeparator() + msg));\n@@ -80,1 +82,1 @@\n-            Asserts.assertTrue(matcher.find(), \"Could not find violations in\\n\" + msg);\n+            Asserts.assertTrue(matcher.find(), \"Could not find violations in\" + System.lineSeparator() + msg);\n","filename":"test\/lib\/jdk\/test\/lib\/hotspot\/ir_framework\/tests\/TestBadFormat.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -312,1 +312,2 @@\n-        Asserts.assertTrue(output.contains(builder.toString()), \"Could not find encoding: \\\"\" + builder.toString() + \"\\n\");\n+        Asserts.assertTrue(output.contains(builder.toString()), \"Could not find encoding: \\\"\" + builder.toString()\n+                                                                + System.lineSeparator());\n@@ -1424,1 +1425,1 @@\n-        Asserts.fail(errorPrefix() + \" should not fail:\\n\" + irRule);\n+        Asserts.fail(errorPrefix() + \" should not fail:\" + System.lineSeparator() + irRule);\n@@ -1441,1 +1442,1 @@\n-        Asserts.assertFalse(irRule.contains(\"- failOn\"), errorPrefix() + \" should not have failed:\\n\" + irRule);\n+        Asserts.assertFalse(irRule.contains(\"- failOn\"), errorPrefix() + \" should not have failed:\" + System.lineSeparator() + irRule);\n@@ -1458,1 +1459,2 @@\n-        Asserts.assertFalse(irRule.contains(\"- counts\"), errorPrefix() + \" should not have failed with counts:\\n\" + irRule);\n+        Asserts.assertFalse(irRule.contains(\"- counts\"), errorPrefix() + \" should not have failed with counts:\"\n+                                                         + System.lineSeparator() + irRule);\n@@ -1503,1 +1505,1 @@\n-                                   \".*Regex \\\\d+\\\\).*\\\\R.*Matched forbidden node.*\");\n+                                   \".*Regex \\\\d+:.*\\\\R.*Matched forbidden node.*\");\n@@ -1506,1 +1508,1 @@\n-                                   \".*Regex \\\\d+\\\\).*\\\\R.*Expected.*\");\n+                                   \".*Regex \\\\d+:.*\\\\R.*Expected.*\");\n@@ -1526,1 +1528,1 @@\n-            pattern = Pattern.compile(\"Regex \" + regexIndex + \"\\\\).*\");\n+            pattern = Pattern.compile(\"Regex \" + regexIndex + \":.*\");\n","filename":"test\/lib\/jdk\/test\/lib\/hotspot\/ir_framework\/tests\/TestIRMatching.java","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"}]}