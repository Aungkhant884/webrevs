{"files":[{"patch":"@@ -34,1 +34,1 @@\n- The framework offers various annotations and flags to control how your test code should be invoked and being checked. This section gives an overview over all these features.\n+The framework offers various annotations and flags to control how your test code should be invoked and being checked. This section gives an overview over all these features.\n@@ -41,1 +41,1 @@\n-More information on base tests with a precise definition can be found in the Javadocs of [Test](.\/Test.java). Concrete examples on how to specify a base test can be found in [BaseTestsExample](..\/..\/..\/testlibrary_tests\/compiler\/lib\/ir_framework\/examples\/BaseTestExample.java).\n+More information on base tests with a precise definition can be found in the Javadocs of [Test](.\/Test.java). Concrete examples on how to specify a base test can be found in [BaseTestsExample](..\/..\/..\/testlibrary_tests\/ir_framework\/examples\/BaseTestExample.java).\n@@ -46,1 +46,1 @@\n-More information on checked tests with a precise definition can be found in the Javadocs of [Check](.\/Check.java). Concrete examples on how to specify a checked test can be found in [CheckedTestsExample](..\/..\/..\/testlibrary_tests\/compiler\/lib\/ir_framework\/examples\/CheckedTestExample.java).\n+More information on checked tests with a precise definition can be found in the Javadocs of [Check](.\/Check.java). Concrete examples on how to specify a checked test can be found in [CheckedTestsExample](..\/..\/..\/testlibrary_tests\/ir_framework\/examples\/CheckedTestExample.java).\n@@ -51,1 +51,1 @@\n-More information on checked tests with a precise definition can be found in the Javadocs of [Run](.\/Run.java). Concrete examples on how to specify a custom run test can be found in [CustomRunTestsExample](..\/..\/..\/testlibrary_tests\/compiler\/lib\/ir_framework\/examples\/CustomRunTestExample.java).\n+More information on checked tests with a precise definition can be found in the Javadocs of [Run](.\/Run.java). Concrete examples on how to specify a custom run test can be found in [CustomRunTestsExample](..\/..\/..\/testlibrary_tests\/ir_framework\/examples\/CustomRunTestExample.java).\n@@ -69,1 +69,1 @@\n-More information about IR matching can be found in the Javadocs of [IR](.\/IR.java). Concrete examples on how to specify IR constraint\/rules can be found in [IRExample](..\/..\/..\/testlibrary_tests\/compiler\/lib\/ir_framework\/examples\/IRExample.java) and [TestIRMatching](..\/..\/..\/testlibrary_tests\/compiler\/lib\/ir_framework\/TestIRMatching.java) (an internal framework test).\n+More information about IR matching can be found in the Javadocs of [IR](.\/IR.java). Concrete examples on how to specify IR constraint\/rules can be found in [IRExample](..\/..\/..\/testlibrary_tests\/ir_framework\/examples\/IRExample.java) and [TestIRMatching](..\/..\/..\/testlibrary_tests\/ir_framework\/tests\/TestIRMatching.java) (an internal framework test).\n@@ -122,1 +122,1 @@\n-There are various tests to verify the correctness of the test framework. These tests can be found in [ir_framework](..\/..\/..\/testlibrary_tests\/compiler\/lib\/ir_framework) and can directly be run with JTreg. The tests are part of the normal JTreg tests of HotSpot and should be run upon changing the framework code as a minimal form of testing.\n+There are various tests to verify the correctness of the test framework. These tests can be found in [ir_framework](..\/..\/..\/testlibrary_tests\/ir_framework) and can directly be run with JTreg. The tests are part of the normal JTreg tests of HotSpot and should be run upon changing the framework code as a minimal form of testing.\n@@ -135,1 +135,1 @@\n- The initial design and feature set was kept simple and straight forward and serves well for small to medium sized tests. There are a lot of possibilities to further enhance the framework and make it more powerful. This can be tackled in additional RFEs. A few ideas can be found as subtasks of the [initial RFE](https:\/\/bugs.openjdk.java.net\/browse\/JDK-8254129) for this framework.\n+The initial design and feature set was kept simple and straight forward and serves well for small to medium sized tests. There are a lot of possibilities to further enhance the framework and make it more powerful. This can be tackled in additional RFEs. A few ideas can be found as subtasks of the [initial RFE](https:\/\/bugs.openjdk.java.net\/browse\/JDK-8254129) for this framework.\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/README.md","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1,7 +0,0 @@\n-# Framework internal tests\n-This folder contains tests which test the functionality of the framework. These should be run with JTreg and without additional VM and Javaopts flags whenever the framework is modified. \n-\n-These tests are not part of the normal tier testing as they only should be run when the framework is changed in any way.\n-\n-Additional testing should be performed with the converted Valhalla tests to make sure a changeset is correct (these are part of the Valhalla CI).\n-\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/compiler\/lib\/ir_framework\/README.md","additions":0,"deletions":7,"binary":false,"changes":7,"status":"deleted"},{"patch":"@@ -1,73 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package compiler.lib.ir_framework;\n-\n-\/*\n- * @test\n- * @requires vm.debug == true & vm.compMode != \"Xint\" & vm.compiler2.enabled & vm.flagless\n- * @summary Sanity test remaining framework property flags.\n- * @library \/test\/lib \/\n- * @run main\/othervm -DFlipC1C2=true compiler.lib.ir_framework.TestDFlags\n- * @run main\/othervm -DExcludeRandom=true compiler.lib.ir_framework.TestDFlags\n- * @run main\/othervm -DVerifyVM=true compiler.lib.ir_framework.TestDFlags\n- * @run main\/othervm -DDumpReplay=true compiler.lib.ir_framework.TestDFlags\n- * @run main\/othervm -DVerbose=true compiler.lib.ir_framework.TestDFlags\n- * @run main\/othervm -DShuffleTests=false compiler.lib.ir_framework.TestDFlags\n- * @run main\/othervm -DReproduce=true compiler.lib.ir_framework.TestDFlags\n- * @run main\/othervm -DReportStdout=true compiler.lib.ir_framework.TestDFlags\n- * @run main\/othervm -DGCAfter=true compiler.lib.ir_framework.TestDFlags\n- * @run main\/othervm -DPrintTimes=true compiler.lib.ir_framework.TestDFlags\n- * @run main\/othervm -DVerifyIR=false compiler.lib.ir_framework.TestDFlags\n- *\/\n-\n-public class TestDFlags {\n-    public static void main(String[] args) {\n-        TestFramework.run();\n-    }\n-\n-    @Test\n-    public int c1() {\n-        return 34;\n-    }\n-\n-\n-    @Test\n-    public void c2() {\n-        for (int i = 0; i < 100; i++) {\n-        }\n-    }\n-\n-    @Test\n-    public void c2_2() {\n-        for (int i = 0; i < 100; i++) {\n-        }\n-    }\n-\n-    @Test\n-    public void c2_3() {\n-        for (int i = 0; i < 100; i++) {\n-        }\n-    }\n-}\n-\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/compiler\/lib\/ir_framework\/TestDFlags.java","additions":0,"deletions":73,"binary":false,"changes":73,"status":"deleted"},{"patch":"@@ -1,93 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package compiler.lib.ir_framework;\n-\n-import compiler.lib.ir_framework.driver.TestVMException;\n-import jdk.test.lib.Utils;\n-import jdk.test.lib.Asserts;\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n-\n-\/*\n- * @test\n- * @requires vm.debug == true & vm.flagless\n- * @summary Test -DScenarios property flag. Run with othervm which should not be done when writing tests using the framework.\n- * @library \/test\/lib \/\n- * @run main\/othervm -DScenarios=1,5,10 compiler.lib.ir_framework.TestDScenarios test\n- * @run main\/othervm -DScenarios=1,4 compiler.lib.ir_framework.TestDScenarios test\n- * @run main\/othervm -DScenarios=3,4,9 compiler.lib.ir_framework.TestDScenarios test\n- * @run driver compiler.lib.ir_framework.TestDScenarios test2\n- * @run driver compiler.lib.ir_framework.TestDScenarios\n- *\/\n-\n-public class TestDScenarios {\n-    public static void main(String[] args) throws Exception {\n-        if (args.length > 0) {\n-            switch (args[0]) {\n-                case \"test\" -> {\n-                    Scenario s1 = new Scenario(1);\n-                    Scenario s2 = new Scenario(5);\n-                    Scenario s3 = new Scenario(10);\n-                    Scenario bad = new Scenario(0, \"-Flagdoesnotexist\"); \/\/ not executed\n-                    new TestFramework().addScenarios(bad, s1, s2, s3).start();\n-                }\n-                case \"test2\" -> {\n-                    try {\n-                        TestFramework.run(DScenariosBad.class);\n-                        throw new RuntimeException(\"should not reach\");\n-                    } catch (TestVMException e) {\n-                        System.out.println(e.getExceptionInfo());\n-                        Asserts.assertTrue(e.getExceptionInfo().contains(\"Expected DScenariosBad exception\"));\n-                    }\n-                }\n-                default -> {\n-                    \/\/ Invalid -DScenarios set and thus exception thrown when Scenario class is statically initialized.\n-                    Scenario s = new Scenario(3);\n-                    throw new RuntimeException(\"should not reach\");\n-                }\n-            }\n-        } else {\n-            \/\/ Test invalid -DScenario flag.\n-            OutputAnalyzer oa;\n-            ProcessBuilder process = ProcessTools.createJavaProcessBuilder(\n-                    \"-Dtest.jdk=\" + Utils.TEST_JDK, \"-DScenarios=a,1,b,10\",\n-                    \"compiler.lib.ir_framework.TestDScenarios\", \" test3\");\n-            oa = ProcessTools.executeProcess(process);\n-            oa.shouldNotHaveExitValue(0);\n-            System.out.println(oa.getOutput());\n-            Asserts.assertTrue(oa.getOutput().contains(\"TestRunException: Provided a scenario index\"));\n-        }\n-    }\n-\n-    @Test\n-    public void test() {\n-    }\n-}\n-\n-class DScenariosBad {\n-    @Test\n-    public void test() {\n-        throw new RuntimeException(\"Expected DScenariosBad exception\");\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/compiler\/lib\/ir_framework\/TestDScenarios.java","additions":0,"deletions":93,"binary":false,"changes":93,"status":"deleted"},{"patch":"@@ -24,1 +24,1 @@\n-package compiler.lib.ir_framework.examples;\n+package ir_framework.examples;\n@@ -27,1 +27,2 @@\n-import compiler.lib.ir_framework.test.TestVM;\n+import compiler.lib.ir_framework.test.TestVM; \/\/ Only used for Javadocs\n+\n@@ -32,1 +33,1 @@\n- * @run driver compiler.lib.ir_framework.examples.BaseTestExample\n+ * @run driver ir_framework.examples.BaseTestExample\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/examples\/BaseTestExample.java","additions":4,"deletions":3,"binary":false,"changes":7,"previous_filename":"test\/hotspot\/jtreg\/testlibrary_tests\/compiler\/lib\/ir_framework\/examples\/BaseTestExample.java","status":"renamed"},{"patch":"@@ -24,1 +24,1 @@\n-package compiler.lib.ir_framework.examples;\n+package ir_framework.examples;\n@@ -27,1 +27,1 @@\n-import compiler.lib.ir_framework.test.TestVM;\n+import compiler.lib.ir_framework.test.TestVM; \/\/ Only used for Javadocs\n@@ -33,1 +33,1 @@\n- * @run driver compiler.lib.ir_framework.examples.CheckedTestExample\n+ * @run driver ir_framework.examples.CheckedTestExample\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/examples\/CheckedTestExample.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"test\/hotspot\/jtreg\/testlibrary_tests\/compiler\/lib\/ir_framework\/examples\/CheckedTestExample.java","status":"renamed"},{"patch":"@@ -24,1 +24,1 @@\n-package compiler.lib.ir_framework.examples;\n+package ir_framework.examples;\n@@ -27,1 +27,1 @@\n-import compiler.lib.ir_framework.test.TestVM;\n+import compiler.lib.ir_framework.test.TestVM; \/\/ Only used for Javadocs\n@@ -33,1 +33,1 @@\n- * @run driver compiler.lib.ir_framework.examples.CustomRunTestExample\n+ * @run driver ir_framework.examples.CustomRunTestExample\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/examples\/CustomRunTestExample.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"test\/hotspot\/jtreg\/testlibrary_tests\/compiler\/lib\/ir_framework\/examples\/CustomRunTestExample.java","status":"renamed"},{"patch":"@@ -24,1 +24,1 @@\n-package compiler.lib.ir_framework.examples;\n+package ir_framework.examples;\n@@ -33,1 +33,1 @@\n- * @run driver compiler.lib.ir_framework.examples.IRExample\n+ * @run driver ir_framework.examples.IRExample\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/examples\/IRExample.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/hotspot\/jtreg\/testlibrary_tests\/compiler\/lib\/ir_framework\/examples\/IRExample.java","status":"renamed"},{"patch":"@@ -0,0 +1,5 @@\n+# Framework internal tests\n+This folder contains tests which test the functionality of the framework. These are run with JTreg and are part of tier testing. All tests are run without additional VM and Javaopts flags. These tests must pass whenever the framework is updated.\n+\n+Additional testing should be performed with the converted Valhalla tests to make sure a changeset is correct (these are part of the Valhalla CI).\n+\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/README.md","additions":5,"deletions":0,"binary":false,"changes":5,"status":"added"},{"patch":"@@ -24,1 +24,3 @@\n-package compiler.lib.ir_framework;\n+package ir_framework.tests;\n+\n+import compiler.lib.ir_framework.*;\n@@ -31,1 +33,1 @@\n- * @run driver compiler.lib.ir_framework.TestAccessModifiers\n+ * @run driver ir_framework.tests.TestAccessModifiers\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestAccessModifiers.java","additions":4,"deletions":2,"binary":false,"changes":6,"previous_filename":"test\/hotspot\/jtreg\/testlibrary_tests\/compiler\/lib\/ir_framework\/TestAccessModifiers.java","status":"renamed"},{"patch":"@@ -24,1 +24,1 @@\n-package compiler.lib.ir_framework;\n+package ir_framework.tests;\n@@ -26,0 +26,2 @@\n+import compiler.lib.ir_framework.*;\n+import compiler.lib.ir_framework.Compiler;\n@@ -40,1 +42,1 @@\n- * @requires vm.compiler2.enabled & vm.flagless\n+ * @requires vm.debug == true & vm.compiler2.enabled & vm.flagless\n@@ -43,1 +45,1 @@\n- * @run driver compiler.lib.ir_framework.TestBadFormat\n+ * @run driver ir_framework.tests.TestBadFormat\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestBadFormat.java","additions":5,"deletions":3,"binary":false,"changes":8,"previous_filename":"test\/hotspot\/jtreg\/testlibrary_tests\/compiler\/lib\/ir_framework\/TestBadFormat.java","status":"renamed"},{"patch":"@@ -24,1 +24,1 @@\n-package compiler.lib.ir_framework;\n+package ir_framework.tests;\n@@ -26,0 +26,1 @@\n+import compiler.lib.ir_framework.*;\n@@ -40,1 +41,1 @@\n- *                   compiler.lib.ir_framework.TestBasics\n+ *                   -Xbatch ir_framework.tests.TestBasics\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestBasics.java","additions":3,"deletions":2,"binary":false,"changes":5,"previous_filename":"test\/hotspot\/jtreg\/testlibrary_tests\/compiler\/lib\/ir_framework\/TestBasics.java","status":"renamed"},{"patch":"@@ -24,1 +24,1 @@\n-package compiler.lib.ir_framework;\n+package ir_framework.tests;\n@@ -26,0 +26,1 @@\n+import compiler.lib.ir_framework.*;\n@@ -39,1 +40,1 @@\n- *                   -XX:+WhiteBoxAPI compiler.lib.ir_framework.TestCompLevels\n+ *                   -Xbatch -XX:+WhiteBoxAPI ir_framework.tests.TestCompLevels\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestCompLevels.java","additions":3,"deletions":2,"binary":false,"changes":5,"previous_filename":"test\/hotspot\/jtreg\/testlibrary_tests\/compiler\/lib\/ir_framework\/TestCompLevels.java","status":"renamed"},{"patch":"@@ -24,1 +24,1 @@\n-package compiler.lib.ir_framework;\n+package ir_framework.tests;\n@@ -26,0 +26,2 @@\n+import compiler.lib.ir_framework.*;\n+import compiler.lib.ir_framework.Compiler;\n@@ -43,1 +45,1 @@\n- *                   -XX:+WhiteBoxAPI compiler.lib.ir_framework.TestControls\n+ *                   -Xbatch -XX:+WhiteBoxAPI ir_framework.tests.TestControls\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestControls.java","additions":4,"deletions":2,"binary":false,"changes":6,"previous_filename":"test\/hotspot\/jtreg\/testlibrary_tests\/compiler\/lib\/ir_framework\/TestControls.java","status":"renamed"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package ir_framework.tests;\n+\n+import compiler.lib.ir_framework.Test;\n+import compiler.lib.ir_framework.TestFramework;\n+\/*\n+ * @test\n+ * @requires vm.debug == true & vm.compMode != \"Xint\" & vm.compiler2.enabled & vm.flagless\n+ * @summary Sanity test remaining framework property flags.\n+ * @library \/test\/lib \/\n+ * @run main\/othervm -DFlipC1C2=true ir_framework.tests.TestDFlags\n+ * @run main\/othervm -DExcludeRandom=true ir_framework.tests.TestDFlags\n+ * @run main\/othervm -DVerifyVM=true ir_framework.tests.TestDFlags\n+ * @run main\/othervm -DDumpReplay=true ir_framework.tests.TestDFlags\n+ * @run main\/othervm -DVerbose=true ir_framework.tests.TestDFlags\n+ * @run main\/othervm -DShuffleTests=false ir_framework.tests.TestDFlags\n+ * @run main\/othervm -DReproduce=true ir_framework.tests.TestDFlags\n+ * @run main\/othervm -DReportStdout=true ir_framework.tests.TestDFlags\n+ * @run main\/othervm -DGCAfter=true ir_framework.tests.TestDFlags\n+ * @run main\/othervm -DPrintTimes=true ir_framework.tests.TestDFlags\n+ * @run main\/othervm -DVerifyIR=false ir_framework.tests.TestDFlags\n+ *\/\n+\n+public class TestDFlags {\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Test\n+    public int c1() {\n+        return 34;\n+    }\n+\n+\n+    @Test\n+    public void c2() {\n+        for (int i = 0; i < 100; i++) {\n+        }\n+    }\n+\n+    @Test\n+    public void c2_2() {\n+        for (int i = 0; i < 100; i++) {\n+        }\n+    }\n+\n+    @Test\n+    public void c2_3() {\n+        for (int i = 0; i < 100; i++) {\n+        }\n+    }\n+}\n+\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestDFlags.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"},{"patch":"@@ -24,1 +24,1 @@\n-package compiler.lib.ir_framework;\n+package ir_framework.tests;\n@@ -26,0 +26,1 @@\n+import compiler.lib.ir_framework.*;\n@@ -37,1 +38,1 @@\n- * @run driver compiler.lib.ir_framework.TestDIgnoreCompilerControls\n+ * @run driver ir_framework.tests.TestDIgnoreCompilerControls\n@@ -59,1 +60,1 @@\n-                \"compiler.lib.ir_framework.TestDIgnoreCompilerControls\", flagValue);\n+                \"ir_framework.tests.TestDIgnoreCompilerControls\", flagValue);\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestDIgnoreCompilerControls.java","additions":4,"deletions":3,"binary":false,"changes":7,"previous_filename":"test\/hotspot\/jtreg\/testlibrary_tests\/compiler\/lib\/ir_framework\/TestDIgnoreCompilerControls.java","status":"renamed"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package ir_framework.tests;\n+\n+import compiler.lib.ir_framework.Scenario;\n+import compiler.lib.ir_framework.Test;\n+import compiler.lib.ir_framework.TestFramework;\n+import compiler.lib.ir_framework.driver.TestVMException;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+\/*\n+ * @test\n+ * @requires vm.debug == true & vm.flagless\n+ * @summary Test -DScenarios property flag. Run with othervm which should not be done when writing tests using the framework.\n+ * @library \/test\/lib \/\n+ * @run main\/othervm -DScenarios=1,5,10 ir_framework.tests.TestDScenarios test\n+ * @run main\/othervm -DScenarios=1,4 ir_framework.tests.TestDScenarios test\n+ * @run main\/othervm -DScenarios=3,4,9 ir_framework.tests.TestDScenarios test\n+ * @run driver ir_framework.tests.TestDScenarios test2\n+ * @run driver ir_framework.tests.TestDScenarios\n+ *\/\n+\n+public class TestDScenarios {\n+    public static void main(String[] args) throws Exception {\n+        if (args.length > 0) {\n+            switch (args[0]) {\n+                case \"test\" -> {\n+                    Scenario s1 = new Scenario(1);\n+                    Scenario s2 = new Scenario(5);\n+                    Scenario s3 = new Scenario(10);\n+                    Scenario bad = new Scenario(0, \"-Flagdoesnotexist\"); \/\/ not executed\n+                    new TestFramework().addScenarios(bad, s1, s2, s3).start();\n+                }\n+                case \"test2\" -> {\n+                    try {\n+                        TestFramework.run(DScenariosBad.class);\n+                        throw new RuntimeException(\"should not reach\");\n+                    } catch (TestVMException e) {\n+                        System.out.println(e.getExceptionInfo());\n+                        Asserts.assertTrue(e.getExceptionInfo().contains(\"Expected DScenariosBad exception\"));\n+                    }\n+                }\n+                default -> {\n+                    \/\/ Invalid -DScenarios set and thus exception thrown when Scenario class is statically initialized.\n+                    Scenario s = new Scenario(3);\n+                    throw new RuntimeException(\"should not reach\");\n+                }\n+            }\n+        } else {\n+            \/\/ Test invalid -DScenario flag.\n+            OutputAnalyzer oa;\n+            ProcessBuilder process = ProcessTools.createJavaProcessBuilder(\n+                    \"-Dtest.jdk=\" + Utils.TEST_JDK, \"-DScenarios=a,1,b,10\",\n+                    \"ir_framework.tests.TestDScenarios\", \" test3\");\n+            oa = ProcessTools.executeProcess(process);\n+            oa.shouldNotHaveExitValue(0);\n+            System.out.println(oa.getOutput());\n+            Asserts.assertTrue(oa.getOutput().contains(\"TestRunException: Provided a scenario index\"));\n+        }\n+    }\n+\n+    @Test\n+    public void test() {\n+    }\n+}\n+\n+class DScenariosBad {\n+    @Test\n+    public void test() {\n+        throw new RuntimeException(\"Expected DScenariosBad exception\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestDScenarios.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"},{"patch":"@@ -24,1 +24,1 @@\n-package compiler.lib.ir_framework;\n+package ir_framework.tests;\n@@ -26,0 +26,4 @@\n+import compiler.lib.ir_framework.Check;\n+import compiler.lib.ir_framework.Run;\n+import compiler.lib.ir_framework.Test;\n+import compiler.lib.ir_framework.TestFramework;\n@@ -28,1 +32,0 @@\n-import jdk.test.lib.Utils;\n@@ -30,0 +33,1 @@\n+import jdk.test.lib.Utils;\n@@ -38,1 +42,1 @@\n- * @run driver compiler.lib.ir_framework.TestDTestAndExclude\n+ * @run driver ir_framework.tests.TestDTestAndExclude\n@@ -99,1 +103,1 @@\n-                \"compiler.lib.ir_framework.TestDTestAndExclude\", arg);\n+                \"ir_framework.tests.TestDTestAndExclude\", arg);\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestDTestAndExclude.java","additions":8,"deletions":4,"binary":false,"changes":12,"previous_filename":"test\/hotspot\/jtreg\/testlibrary_tests\/compiler\/lib\/ir_framework\/TestDTestAndExclude.java","status":"renamed"},{"patch":"@@ -24,1 +24,1 @@\n-package compiler.lib.ir_framework;\n+package ir_framework.tests;\n@@ -26,0 +26,1 @@\n+import compiler.lib.ir_framework.*;\n@@ -43,1 +44,1 @@\n- * @run main\/othervm -DPrintIREncoding=true compiler.lib.ir_framework.TestIRMatching\n+ * @run main\/othervm -DPrintIREncoding=true ir_framework.tests.TestIRMatching\n@@ -188,1 +189,1 @@\n-                 BadFailOnConstraint.create(CheckCastArray.class, \"array()\", 2, 2,\"cmp\", \"precise klass\", \"ir_framework\/MyClass\"),\n+                 BadFailOnConstraint.create(CheckCastArray.class, \"array()\", 2, 2,\"cmp\", \"precise klass\", \"ir_framework\/tests\/MyClass\"),\n@@ -416,1 +417,1 @@\n-    @IR(failOn = {IRNode.STORE_OF_CLASS, \"compiler\/lib\/ir_framework\/MultipleFailOnBad\", IRNode.CALL, IRNode.ALLOC})\n+    @IR(failOn = {IRNode.STORE_OF_CLASS, \"ir_framework\/tests\/MultipleFailOnBad\", IRNode.CALL, IRNode.ALLOC})\n@@ -440,1 +441,1 @@\n-    @IR(failOn = {IRNode.STORE_OF_CLASS, \"UnknownClass\", IRNode.ALLOC_OF, \"compiler\/lib\/ir_framework\/MyClassSub\"})\n+    @IR(failOn = {IRNode.STORE_OF_CLASS, \"UnknownClass\", IRNode.ALLOC_OF, \"ir_framework\/tests\/MyClassSub\"})\n@@ -638,4 +639,4 @@\n-                  IRNode.STORE_OF_CLASS, \"compiler\/lib\/ir_framework\/MyClass\", \"1\",\n-                  IRNode.STORE_I_OF_CLASS, \"compiler\/lib\/ir_framework\/MyClass\", \"1\",\n-                  IRNode.STORE_OF_CLASS, \"compiler\/lib\/ir_framework\/GoodCount\", \"1\",\n-                  IRNode.STORE_L_OF_CLASS, \"compiler\/lib\/ir_framework\/GoodCount\", \"1\",\n+                  IRNode.STORE_OF_CLASS, \"ir_framework\/tests\/MyClass\", \"1\",\n+                  IRNode.STORE_I_OF_CLASS, \"ir_framework\/tests\/MyClass\", \"1\",\n+                  IRNode.STORE_OF_CLASS, \"ir_framework\/tests\/GoodCount\", \"1\",\n+                  IRNode.STORE_L_OF_CLASS, \"ir_framework\/tests\/GoodCount\", \"1\",\n@@ -806,2 +807,2 @@\n-    @IR(failOn = {IRNode.ALLOC_ARRAY_OF, \"compiler\/lib\/ir_framework\/MySubClass\"}) \/\/ Does not fail\n-    @IR(failOn = {IRNode.ALLOC_ARRAY_OF, \"compiler\/lib\/ir_framework\/MyClass\"})\n+    @IR(failOn = {IRNode.ALLOC_ARRAY_OF, \"ir_framework\/tests\/MySubClass\"}) \/\/ Does not fail\n+    @IR(failOn = {IRNode.ALLOC_ARRAY_OF, \"ir_framework\/tests\/MyClass\"})\n@@ -823,1 +824,1 @@\n-    @IR(failOn = {IRNode.LOAD_OF_CLASS, \"compiler\/lib\/ir_framework\/Loads\"})\n+    @IR(failOn = {IRNode.LOAD_OF_CLASS, \"ir_framework\/tests\/Loads\"})\n@@ -1108,1 +1109,1 @@\n-                  IRNode.CHECKCAST_ARRAY_OF, \"ir_framework\/MyClass\"}) \/\/ fails\n+                  IRNode.CHECKCAST_ARRAY_OF, \"ir_framework\/tests\/MyClass\"}) \/\/ fails\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestIRMatching.java","additions":14,"deletions":13,"binary":false,"changes":27,"previous_filename":"test\/hotspot\/jtreg\/testlibrary_tests\/compiler\/lib\/ir_framework\/TestIRMatching.java","status":"renamed"},{"patch":"@@ -24,1 +24,1 @@\n-package compiler.lib.ir_framework;\n+package ir_framework.tests;\n@@ -26,0 +26,1 @@\n+import compiler.lib.ir_framework.*;\n@@ -34,1 +35,1 @@\n- * @requires vm.compMode != \"Xint\" & vm.compiler2.enabled & vm.flagless\n+ * @requires vm.debug == true & vm.compMode != \"Xint\" & vm.compiler2.enabled & vm.flagless\n@@ -37,1 +38,1 @@\n- * @run driver compiler.lib.ir_framework.TestRunTests\n+ * @run driver ir_framework.tests.TestRunTests\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestRunTests.java","additions":4,"deletions":3,"binary":false,"changes":7,"previous_filename":"test\/hotspot\/jtreg\/testlibrary_tests\/compiler\/lib\/ir_framework\/TestRunTests.java","status":"renamed"},{"patch":"@@ -24,1 +24,5 @@\n-package compiler.lib.ir_framework;\n+package ir_framework.tests;\n+\n+import compiler.lib.ir_framework.Scenario;\n+import compiler.lib.ir_framework.Test;\n+import compiler.lib.ir_framework.TestFramework;\n@@ -31,1 +35,1 @@\n- * @run driver compiler.lib.ir_framework.TestSanity\n+ * @run driver ir_framework.tests.TestSanity\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestSanity.java","additions":6,"deletions":2,"binary":false,"changes":8,"previous_filename":"test\/hotspot\/jtreg\/testlibrary_tests\/compiler\/lib\/ir_framework\/TestSanity.java","status":"renamed"},{"patch":"@@ -24,1 +24,1 @@\n-package compiler.lib.ir_framework;\n+package ir_framework.tests;\n@@ -26,0 +26,1 @@\n+import compiler.lib.ir_framework.*;\n@@ -31,1 +32,1 @@\n- * @requires vm.compMode != \"Xint\" & vm.compiler2.enabled & vm.flagless\n+ * @requires vm.debug == true & vm.compMode != \"Xint\" & vm.compiler2.enabled & vm.flagless\n@@ -34,1 +35,1 @@\n- * @run driver compiler.lib.ir_framework.TestScenarios\n+ * @run driver ir_framework.tests.TestScenarios\n@@ -67,3 +68,3 @@\n-            Asserts.assertTrue(s1.getTestVMOutput().contains(\"Caused by: compiler.lib.ir_framework.MyScenarioException\"));\n-            Asserts.assertTrue(s2.getTestVMOutput().contains(\"Caused by: compiler.lib.ir_framework.MyScenarioException\"));\n-            Asserts.assertTrue(s3.getTestVMOutput().contains(\"Caused by: compiler.lib.ir_framework.MyScenarioException\"));\n+            Asserts.assertTrue(s1.getTestVMOutput().contains(\"Caused by: ir_framework.tests.MyScenarioException\"));\n+            Asserts.assertTrue(s2.getTestVMOutput().contains(\"Caused by: ir_framework.tests.MyScenarioException\"));\n+            Asserts.assertTrue(s3.getTestVMOutput().contains(\"Caused by: ir_framework.tests.MyScenarioException\"));\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestScenarios.java","additions":7,"deletions":6,"binary":false,"changes":13,"previous_filename":"test\/hotspot\/jtreg\/testlibrary_tests\/compiler\/lib\/ir_framework\/TestScenarios.java","status":"renamed"},{"patch":"@@ -24,1 +24,1 @@\n-package compiler.lib.ir_framework;\n+package ir_framework.tests;\n@@ -26,0 +26,1 @@\n+import compiler.lib.ir_framework.*;\n@@ -35,1 +36,1 @@\n- * @run driver compiler.lib.ir_framework.TestWithHelperClasses\n+ * @run driver ir_framework.tests.TestWithHelperClasses\n@@ -46,4 +47,4 @@\n-            Asserts.assertFalse(e.getExceptionInfo().contains(\"public static void compiler.lib.ir_framework.Helper1.foo() should have been C2 compiled\"));\n-            Asserts.assertFalse(TestFramework.getLastTestVMOutput().contains(\"public static void compiler.lib.ir_framework.Helper1.foo() should have been C2 compiled\"));\n-            Asserts.assertTrue(TestFramework.getLastTestVMOutput().contains(\"public static void compiler.lib.ir_framework.Helper2.foo() should have been C2 compiled\"));\n-            Asserts.assertTrue(e.getExceptionInfo().contains(\"public static void compiler.lib.ir_framework.Helper2.foo() should have been C2 compiled\"));\n+            Asserts.assertFalse(e.getExceptionInfo().contains(\"public static void ir_framework.tests.Helper1.foo() should have been C2 compiled\"));\n+            Asserts.assertFalse(TestFramework.getLastTestVMOutput().contains(\"public static void ir_framework.tests.Helper1.foo() should have been C2 compiled\"));\n+            Asserts.assertTrue(TestFramework.getLastTestVMOutput().contains(\"public static void ir_framework.tests.Helper2.foo() should have been C2 compiled\"));\n+            Asserts.assertTrue(e.getExceptionInfo().contains(\"public static void ir_framework.tests.Helper2.foo() should have been C2 compiled\"));\n@@ -72,1 +73,1 @@\n-            Asserts.assertTrue(e.getMessage().contains(\"Cannot specify test class compiler.lib.ir_framework.\" +\n+            Asserts.assertTrue(e.getMessage().contains(\"Cannot specify test class ir_framework.tests.\" +\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/ir_framework\/tests\/TestWithHelperClasses.java","additions":8,"deletions":7,"binary":false,"changes":15,"previous_filename":"test\/hotspot\/jtreg\/testlibrary_tests\/compiler\/lib\/ir_framework\/TestWithHelperClasses.java","status":"renamed"}]}