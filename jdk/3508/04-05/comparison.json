{"files":[{"patch":"@@ -35,1 +35,0 @@\n-\n","filename":"test\/lib\/jdk\/test\/lib\/hotspot\/ir_framework\/Argument.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -94,1 +94,0 @@\n-\n","filename":"test\/lib\/jdk\/test\/lib\/hotspot\/ir_framework\/Check.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-\n","filename":"test\/lib\/jdk\/test\/lib\/hotspot\/ir_framework\/CheckAt.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-\n","filename":"test\/lib\/jdk\/test\/lib\/hotspot\/ir_framework\/CheckedTestFrameworkException.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-\n","filename":"test\/lib\/jdk\/test\/lib\/hotspot\/ir_framework\/CompLevel.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -68,1 +68,0 @@\n-\n","filename":"test\/lib\/jdk\/test\/lib\/hotspot\/ir_framework\/IR.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -36,1 +36,3 @@\n- * Prints an encoding of all @Test methods whether an @IR rules should be applied to the dedicated test framework socket.\n+ * Prints an encoding to the dedicated test framework socket whether @IR rules of @Test methods should be applied or not.\n+ * This is done during the execution of the test VM by checking the active VM flags. This encoding is eventually parsed\n+ * and checked by the IRMatcher class in the driver VM after the termination of the test VM.\n@@ -42,0 +44,1 @@\n+\n@@ -46,1 +49,0 @@\n-    private final StringBuilder output = new StringBuilder();\n@@ -48,0 +50,1 @@\n+    private final StringBuilder output = new StringBuilder();\n","filename":"test\/lib\/jdk\/test\/lib\/hotspot\/ir_framework\/IREncodingPrinter.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-\n","filename":"test\/lib\/jdk\/test\/lib\/hotspot\/ir_framework\/NoTestsRunException.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -4,2 +4,0 @@\n-The framework is based on the ideas of the currently present IR test framework in [Valhalla](https:\/\/github.com\/openjdk\/valhalla\/blob\/e9c78ce4fcfd01361c35883e0d68f9ae5a80d079\/test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineTypesTest.java) and aims to replace it at some point.\n-\n@@ -46,1 +44,1 @@\n-The base tests do not provide any way of verification by user code. A checked test enabled that by allowing the user to define an additional `@Check` annotated method which is invoked directly after the `@Test` annotated method. This allows the user to perform various checks about the test method including return value verification.\n+The base tests do not provide any way of verification by user code. A checked test enables this by allowing the user to define an additional `@Check` annotated method which is invoked directly after the `@Test` annotated method. This allows the user to perform various checks about the test method including return value verification.\n@@ -65,1 +63,1 @@\n-An IR verification cannot (and does not want to) always be performed. For example, a JTreg test could be run with _-Xint_ or not a debug build (_-XX:+PrintIdeal_ and _-XX:+PrintOptoAssembly_ are debug build flags). But also CI tier testing could add additional JTreg VM and Javaoptions flags which could make an IR rule unstable. \n+An IR verification cannot always be performed. For example, a JTreg test could be run with _-Xint_ or not a debug build (_-XX:+PrintIdeal_ and _-XX:+PrintOptoAssembly_ are debug build flags). But also CI tier testing could add additional JTreg VM and Javaoptions flags which could make an IR rule unstable. \n@@ -93,1 +91,1 @@\n-- `-DScenarios=1,2`: Provide a list of scenario indexes to specify which scenarios that should be executed.\n+- `-DScenarios=1,2`: Provide a list of scenario indexes to specify which scenarios should be executed.\n@@ -101,1 +99,1 @@\n-- `-DShuffleTests=false`: Disables the shuffling of tests (a shuffling is always done by default).\n+- `-DShuffleTests=false`: Disables the random execution order of all tests (such a shuffling is always done by default).\n@@ -125,13 +123,2 @@\n-## 5. Future Work\n-This framework is based on the idea of the currently present IR test framework in [Valhalla](https:\/\/github.com\/openjdk\/valhalla\/blob\/e9c78ce4fcfd01361c35883e0d68f9ae5a80d079\/test\/hotspot\/jtreg\/runtime\/valhalla\/inlinetypes\/InlineTypesTest.java). This IR framework was used with great success in Valhalla and thus served as a foundation for this new IR framework.\n- \n- The new framework supports all the features that are present in the Valhalla IR framework with the idea to replace it at some point. The initial design and feature set was kept simple and straight forward and serves well for small to medium sized tests. There are a lot of possibilities to further enhance the framework and make it more powerful. This can be tackled in additional RFEs. A few ideas include:\n-\n-- Provide more default IR regexes (e.g. for vector nodes etc.) in [IRNode](.\/IRNode.java) ([JDK-8265197](https:\/\/bugs.openjdk.java.net\/browse\/JDK-8265197)).\n-- Parsing the IR directly to perform queries on it, walking it, searching it, match on IR node properties etc. ([JDK-8265198](https:\/\/bugs.openjdk.java.net\/browse\/JDK-8265198)).\n-- Investigate more verification possibilities based on additional\/other flags (e.g. _-XX:+PrintIdealGraph_, _-XX:+TraceNewVectors_ etc.) ([JDK-8265200](https:\/\/bugs.openjdk.java.net\/browse\/JDK-8265200)).\n-- More interface methods for verification in checked and custom run tests.\n-- More stress\/debug framework flags.\n-- Additional check possibilities in `@IR` annotations. \n-\n-More information can be found in the JBS issue [JDK-8254129](https:\/\/bugs.openjdk.java.net\/browse\/JDK-8254129) (the initial IR Test Framework RFE).\n+## 5. Summary\n+ The initial design and feature set was kept simple and straight forward and serves well for small to medium sized tests. There are a lot of possibilities to further enhance the framework and make it more powerful. This can be tackled in additional RFEs. A few ideas can be found as subtasks of the [initial RFE](https:\/\/bugs.openjdk.java.net\/browse\/JDK-8254129) for this framework.\n","filename":"test\/lib\/jdk\/test\/lib\/hotspot\/ir_framework\/README.md","additions":6,"deletions":19,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -95,1 +95,0 @@\n-\n","filename":"test\/lib\/jdk\/test\/lib\/hotspot\/ir_framework\/Run.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -43,4 +43,4 @@\n-    private static final String ADDITIONAL_SCENARIO_FLAGS = System.getProperty(\"ScenarioFlags\", \"\");\n-    private static final String SCENARIOS = System.getProperty(\"Scenarios\", \"\");\n-    private static final List<String> additionalScenarioFlags = new ArrayList<>();\n-    private static final Set<Integer> enabledScenarios = new HashSet<>();\n+    private static final String ADDITIONAL_SCENARIO_FLAGS_PROPERTY = System.getProperty(\"ScenarioFlags\", \"\");\n+    private static final String SCENARIOS_PROPERTY = System.getProperty(\"Scenarios\", \"\");\n+    private static final List<String> ADDITIONAL_SCENARIO_FLAGS = new ArrayList<>();\n+    private static final Set<Integer> ENABLED_SCENARIOS = new HashSet<>();\n@@ -54,2 +54,2 @@\n-        if (!SCENARIOS.isEmpty()) {\n-            System.out.println(Arrays.toString(SCENARIOS.split(\"\\\\s*,\\\\s*\")));\n+        if (!SCENARIOS_PROPERTY.isEmpty()) {\n+            System.out.println(Arrays.toString(SCENARIOS_PROPERTY.split(\"\\\\s*,\\\\s*\")));\n@@ -57,1 +57,1 @@\n-                Arrays.stream(SCENARIOS.split(\"\\\\s*,\\\\s*\")).map(Integer::parseInt).forEachOrdered(enabledScenarios::add);\n+                Arrays.stream(SCENARIOS_PROPERTY.split(\"\\\\s*,\\\\s*\")).map(Integer::parseInt).forEachOrdered(ENABLED_SCENARIOS::add);\n@@ -60,1 +60,1 @@\n-                                           + \"a number: \" + SCENARIOS);\n+                                           + \"a number: \" + SCENARIOS_PROPERTY);\n@@ -64,2 +64,2 @@\n-        if (!ADDITIONAL_SCENARIO_FLAGS.isEmpty()) {\n-            additionalScenarioFlags.addAll(Arrays.asList(ADDITIONAL_SCENARIO_FLAGS.split(\"\\\\s*,\\\\s*\")));\n+        if (!ADDITIONAL_SCENARIO_FLAGS_PROPERTY.isEmpty()) {\n+            ADDITIONAL_SCENARIO_FLAGS.addAll(Arrays.asList(ADDITIONAL_SCENARIO_FLAGS_PROPERTY.split(\"\\\\s*,\\\\s*\")));\n@@ -83,1 +83,1 @@\n-            this.flags.addAll(additionalScenarioFlags);\n+            this.flags.addAll(ADDITIONAL_SCENARIO_FLAGS);\n@@ -87,1 +87,1 @@\n-        this.enabled = enabledScenarios.isEmpty() || enabledScenarios.contains(index);\n+        this.enabled = ENABLED_SCENARIOS.isEmpty() || ENABLED_SCENARIOS.contains(index);\n","filename":"test\/lib\/jdk\/test\/lib\/hotspot\/ir_framework\/Scenario.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -81,1 +81,0 @@\n-\n","filename":"test\/lib\/jdk\/test\/lib\/hotspot\/ir_framework\/Test.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-\n","filename":"test\/lib\/jdk\/test\/lib\/hotspot\/ir_framework\/TestFormatException.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -147,0 +147,1 @@\n+\n@@ -978,1 +979,0 @@\n-\n","filename":"test\/lib\/jdk\/test\/lib\/hotspot\/ir_framework\/TestFramework.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-\n","filename":"test\/lib\/jdk\/test\/lib\/hotspot\/ir_framework\/TestFrameworkException.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -80,1 +80,0 @@\n-    \/\/ User defined settings\n@@ -84,1 +83,0 @@\n-\n","filename":"test\/lib\/jdk\/test\/lib\/hotspot\/ir_framework\/TestFrameworkExecution.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,2 +39,0 @@\n-    static final String SERVER_PORT_PROPERTY = \"ir.framework.server.port\";\n-\n@@ -42,0 +40,1 @@\n+    private static final String SERVER_PORT_PROPERTY = \"ir.framework.server.port\";\n","filename":"test\/lib\/jdk\/test\/lib\/hotspot\/ir_framework\/TestFrameworkSocket.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-\n","filename":"test\/lib\/jdk\/test\/lib\/hotspot\/ir_framework\/TestRun.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-\n","filename":"test\/lib\/jdk\/test\/lib\/hotspot\/ir_framework\/TestRunException.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -61,1 +61,0 @@\n-\n","filename":"test\/lib\/jdk\/test\/lib\/hotspot\/ir_framework\/examples\/BaseTestExample.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -75,1 +75,0 @@\n-\n","filename":"test\/lib\/jdk\/test\/lib\/hotspot\/ir_framework\/examples\/IRExample.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}