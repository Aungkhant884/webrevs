{"files":[{"patch":"@@ -29,0 +29,1 @@\n+import jdk.internal.classfile.constantpool.ConstantPoolException;\n@@ -99,1 +100,1 @@\n-     * @throws IndexOutOfBoundsException if the index is out of range of the\n+     * @throws ConstantPoolException if the index is out of range of the\n@@ -109,1 +110,1 @@\n-     * @throws IndexOutOfBoundsException if the index is out of range of the\n+     * @throws ConstantPoolException if the index is out of range of the\n@@ -118,3 +119,2 @@\n-     * @throws IndexOutOfBoundsException if the index is out of range of the\n-     *         constant pool size, or zero\n-     * @throws IllegalArgumentException if the index does not correspond to\n+     * @throws ConstantPoolException if the index is out of range of the\n+     *         constant pool size, or zero, or the index does not correspond to\n@@ -130,3 +130,2 @@\n-     * @throws IndexOutOfBoundsException if the index is out of range of the\n-     *         constant pool size\n-     * @throws IllegalArgumentException if the index does not correspond to\n+     * @throws ConstantPoolException if the index is out of range of the\n+     *         constant pool size, or the index does not correspond to\n@@ -141,3 +140,2 @@\n-     * @throws IndexOutOfBoundsException if the index is out of range of the\n-     *         constant pool size, or zero\n-     * @throws IllegalArgumentException if the index does not correspond to\n+     * @throws ConstantPoolException if the index is out of range of the\n+     *         constant pool size, or zero, or the index does not correspond to\n@@ -152,3 +150,2 @@\n-     * @throws IndexOutOfBoundsException if the index is out of range of the\n-     *         constant pool size, or zero\n-     * @throws IllegalArgumentException if the index does not correspond to\n+     * @throws ConstantPoolException if the index is out of range of the\n+     *         constant pool size, or zero, or the index does not correspond to\n@@ -163,3 +160,2 @@\n-     * @throws IndexOutOfBoundsException if the index is out of range of the\n-     *         constant pool size, or zero\n-     * @throws IllegalArgumentException if the index does not correspond to\n+     * @throws ConstantPoolException if the index is out of range of the\n+     *         constant pool size, or zero, or the index does not correspond to\n@@ -174,3 +170,2 @@\n-     * @throws IndexOutOfBoundsException if the index is out of range of the\n-     *         constant pool size, or zero\n-     * @throws IllegalArgumentException if the index does not correspond to\n+     * @throws ConstantPoolException if the index is out of range of the\n+     *         constant pool size, or zero, or the index does not correspond to\n@@ -185,3 +180,2 @@\n-     * @throws IndexOutOfBoundsException if the index is out of range of the\n-     *         constant pool size, or zero\n-     * @throws IllegalArgumentException if the index does not correspond to\n+     * @throws ConstantPoolException if the index is out of range of the\n+     *         constant pool size, or zero, or the index does not correspond to\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/ClassReader.java","additions":17,"deletions":23,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -146,1 +146,1 @@\n-         * Default is to throw IllegalStateException when any {@link ExceptionCatch},\n+         * Default is to throw IllegalArgumentException when any {@link ExceptionCatch},\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/Classfile.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -237,1 +237,1 @@\n-     * @throws java.lang.IllegalArgumentException if the operation code is not for a branch instruction that accepts\n+     * @throws IllegalArgumentException if the operation code is not for a branch instruction that accepts\n@@ -287,1 +287,1 @@\n-     * @throws java.lang.IllegalArgumentException if the operation code is not for a branch instruction that accepts\n+     * @throws IllegalArgumentException if the operation code is not for a branch instruction that accepts\n@@ -330,1 +330,1 @@\n-         * @throws java.lang.IllegalArgumentException if an existing catch block catches an exception of the given type.\n+         * @throws IllegalArgumentException if an existing catch block catches an exception of the given type.\n@@ -347,1 +347,1 @@\n-         * @throws java.lang.IllegalArgumentException if an existing catch block catches one or more exceptions of the given types.\n+         * @throws IllegalArgumentException if an existing catch block catches one or more exceptions of the given types.\n@@ -360,1 +360,1 @@\n-         * @throws java.lang.IllegalArgumentException if an existing catch block catches all exceptions.\n+         * @throws IllegalArgumentException if an existing catch block catches all exceptions.\n@@ -376,0 +376,1 @@\n+     * @throws IllegalArgumentException if the try block is empty.\n@@ -389,1 +390,1 @@\n-            throw new IllegalStateException(\"The body of the try block is empty\");\n+            throw new IllegalArgumentException(\"The body of the try block is empty\");\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/CodeBuilder.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.classfile.constantpool;\n+\n+\/**\n+ * Thrown to indicate that requested entry cannot be obtained from the constant\n+ * pool.\n+ *\/\n+public class ConstantPoolException extends IllegalArgumentException {\n+\n+    @java.io.Serial\n+    private static final long serialVersionUID = 7245472922409094120L;\n+\n+    \/**\n+     * Constructs a {@code ConstantPoolException} with no detail message.\n+     *\/\n+    public ConstantPoolException() {\n+        super();\n+    }\n+\n+    \/**\n+     * Constructs a {@code ConstantPoolException} with the specified detail\n+     * message.\n+     *\n+     * @param message the detail message.\n+     *\/\n+    public ConstantPoolException(String message) {\n+        super(message);\n+    }\n+\n+    \/**\n+     * Constructs a {@code ConstantPoolException} with the specified cause and\n+     * a detail message of {@code (cause==null ? null : cause.toString())}.\n+     * @param cause the cause (which is saved for later retrieval by the\n+     *        {@link Throwable#getCause()} method).  (A {@code null} value is\n+     *        permitted, and indicates that the cause is nonexistent or\n+     *        unknown.)\n+     *\/\n+    public ConstantPoolException(Throwable cause) {\n+        super(cause);\n+    }\n+\n+    \/**\n+     * Constructs a {@code ConstantPoolException} with the specified detail\n+     * message and cause.\n+     *\n+     * @param message the detail message (which is saved for later retrieval\n+     *        by the {@link Throwable#getMessage()} method).\n+     * @param cause the cause (which is saved for later retrieval by the\n+     *        {@link Throwable#getCause()} method).  (A {@code null} value\n+     *        is permitted, and indicates that the cause is nonexistent or\n+     *        unknown.)\n+     *\/\n+    public ConstantPoolException(String message, Throwable cause) {\n+        super(message, cause);\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/constantpool\/ConstantPoolException.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"},{"patch":"@@ -132,0 +132,1 @@\n+        int cfLen = reader.classfileLength();\n@@ -136,0 +137,3 @@\n+            if (len < 0 || len > cfLen - p) {\n+                throw new IllegalArgumentException(\"attribute \" + name.stringValue() + \" too big to handle\");\n+            }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BoundAttribute.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import jdk.internal.classfile.constantpool.ConstantPoolException;\n@@ -94,1 +95,1 @@\n-            throw new IllegalStateException(\"Bad magic number\");\n+            throw new IllegalArgumentException(\"Bad magic number\");\n@@ -121,1 +122,1 @@\n-                default -> throw new IllegalStateException(\n+                default -> throw new ConstantPoolException(\n@@ -309,1 +310,1 @@\n-            throw new IndexOutOfBoundsException(\"Bad CP index: \" + index);\n+            throw new ConstantPoolException(\"Bad CP index: \" + index);\n@@ -339,1 +340,1 @@\n-                default -> throw new IllegalStateException(\n+                default -> throw new ConstantPoolException(\n@@ -350,1 +351,1 @@\n-            throw new IndexOutOfBoundsException(\"Bad CP UTF8 index: \" + index);\n+            throw new ConstantPoolException(\"Bad CP UTF8 index: \" + index);\n@@ -357,1 +358,1 @@\n-            if (tag != TAG_UTF8) throw new IllegalArgumentException(\"Not a UTF8 - index: \" + index);\n+            if (tag != TAG_UTF8) throw new ConstantPoolException(\"Not a UTF8 - index: \" + index);\n@@ -373,1 +374,5 @@\n-            p += 6 + len;\n+            p += 6;\n+            if (len < 0 || len > classfileLength - p) {\n+                throw new IllegalArgumentException(\"attribute \" + readUtf8Entry(p - 6).stringValue() + \" too big to handle\");\n+            }\n+            p += len;\n@@ -410,1 +415,1 @@\n-        throw new IllegalArgumentException(\"Not a module entry at pos: \" + pos);\n+        throw new ConstantPoolException(\"Not a module entry at pos: \" + pos);\n@@ -416,1 +421,1 @@\n-        throw new IllegalArgumentException(\"Not a package entry at pos: \" + pos);\n+        throw new ConstantPoolException(\"Not a package entry at pos: \" + pos);\n@@ -422,1 +427,1 @@\n-        throw new IllegalArgumentException(\"Not a class entry at pos: \" + pos);\n+        throw new ConstantPoolException(\"Not a class entry at pos: \" + pos);\n@@ -428,1 +433,1 @@\n-        throw new IllegalArgumentException(\"Not a name and type entry at pos: \" + pos);\n+        throw new ConstantPoolException(\"Not a name and type entry at pos: \" + pos);\n@@ -434,1 +439,1 @@\n-        throw new IllegalArgumentException(\"Not a method handle entry at pos: \" + pos);\n+        throw new ConstantPoolException(\"Not a method handle entry at pos: \" + pos);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassReaderImpl.java","additions":17,"deletions":12,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -202,1 +202,1 @@\n-                    throw new IllegalStateException(\"Unbound label in exception handler\");\n+                    throw new IllegalArgumentException(\"Unbound label in exception handler\");\n@@ -239,1 +239,1 @@\n-                                    throw new IllegalStateException(\"Unbound label in character range\");\n+                                    throw new IllegalArgumentException(\"Unbound label in character range\");\n@@ -268,1 +268,1 @@\n-                                    throw new IllegalStateException(\"Unbound label in local variable type\");\n+                                    throw new IllegalArgumentException(\"Unbound label in local variable type\");\n@@ -291,1 +291,1 @@\n-                                    throw new IllegalStateException(\"Unbound label in local variable type\");\n+                                    throw new IllegalArgumentException(\"Unbound label in local variable type\");\n@@ -344,1 +344,1 @@\n-                    } catch (Exception e) {\n+                    } catch (IllegalArgumentException e) {\n@@ -700,1 +700,1 @@\n-                throw new IllegalStateException(\"Setting label target for already-set label\");\n+                throw new IllegalArgumentException(\"Setting label target for already-set label\");\n@@ -755,1 +755,1 @@\n-    private static final class LabelOverflowException extends IllegalStateException {\n+    private static final class LabelOverflowException extends IllegalArgumentException {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectCodeBuilder.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-                throw new IllegalStateException(\"not a valid type signature: \" + sig);\n+                throw new IllegalArgumentException(\"not a valid type signature: \" + sig);\n@@ -160,1 +160,1 @@\n-        throw new IllegalStateException(\"not a valid type signature: \" + sig);\n+        throw new IllegalArgumentException(\"not a valid type signature: \" + sig);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/SignaturesImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -486,1 +486,1 @@\n-                default -> throw new IllegalStateException(String.format(\"Bad tag %d\", reference.tag()));\n+                default -> throw new IllegalArgumentException(String.format(\"Bad tag %d\", reference.tag()));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/SplitConstantPool.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -864,1 +864,1 @@\n-        throw new IllegalStateException(sb.toString());\n+        throw new IllegalArgumentException(sb.toString());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/StackMapGenerator.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -193,1 +193,1 @@\n-                            assertThrows(IllegalStateException.class, () -> {\n+                            assertThrows(IllegalArgumentException.class, () -> {\n","filename":"test\/jdk\/jdk\/classfile\/BuilderTryCatchTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-        assertThrows(IllegalStateException.class, () ->\n+        assertThrows(IllegalArgumentException.class, () ->\n","filename":"test\/jdk\/jdk\/classfile\/DiscontinuedInstructionsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-        assertThrows(IllegalStateException.class, () -> Classfile.build(ClassDesc.of(\"cls\"), clb ->\n+        assertThrows(IllegalArgumentException.class, () -> Classfile.build(ClassDesc.of(\"cls\"), clb ->\n","filename":"test\/jdk\/jdk\/classfile\/FilterDeadLabelsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -118,1 +118,1 @@\n-        assertThrows(IllegalStateException.class, () -> generateFwd(sample, true, Classfile.Option.fixShortJumps(false)));\n+        assertThrows(IllegalArgumentException.class, () -> generateFwd(sample, true, Classfile.Option.fixShortJumps(false)));\n@@ -124,1 +124,1 @@\n-        assertThrows(IllegalStateException.class, () -> generateBack(sample, true, Classfile.Option.fixShortJumps(false)));\n+        assertThrows(IllegalArgumentException.class, () -> generateBack(sample, true, Classfile.Option.fixShortJumps(false)));\n@@ -148,1 +148,1 @@\n-        assertThrows(IllegalStateException.class, () ->\n+        assertThrows(IllegalArgumentException.class, () ->\n@@ -158,1 +158,1 @@\n-        assertThrows(IllegalStateException.class, () ->\n+        assertThrows(IllegalArgumentException.class, () ->\n@@ -186,1 +186,1 @@\n-        assertThrows(IllegalStateException.class, () ->\n+        assertThrows(IllegalArgumentException.class, () ->\n@@ -196,1 +196,1 @@\n-        assertThrows(IllegalStateException.class, () ->\n+        assertThrows(IllegalArgumentException.class, () ->\n","filename":"test\/jdk\/jdk\/classfile\/ShortJumpsFixTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-        var error = assertThrows(IllegalStateException.class, () -> testTransformedStackMaps(buildDeadCode(), Classfile.Option.patchDeadCode(false)));\n+        var error = assertThrows(IllegalArgumentException.class, () -> testTransformedStackMaps(buildDeadCode(), Classfile.Option.patchDeadCode(false)));\n@@ -175,1 +175,1 @@\n-        var error = assertThrows(IllegalStateException.class, () ->\n+        var error = assertThrows(IllegalArgumentException.class, () ->\n","filename":"test\/jdk\/jdk\/classfile\/StackMapsTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}