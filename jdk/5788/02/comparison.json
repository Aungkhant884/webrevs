{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -76,4 +76,0 @@\n-    \/\/ default checksum type, -1 if not set\n-    static int CKSUMTYPE_DEFAULT;\n-    static int SAFECKSUMTYPE_DEFAULT;\n-\n@@ -81,45 +77,0 @@\n-    static {\n-        initStatic();\n-    }\n-\n-    public static void initStatic() {\n-        String temp = null;\n-        Config cfg = null;\n-        try {\n-            cfg = Config.getInstance();\n-            temp = cfg.get(\"libdefaults\", \"default_checksum\");\n-            if (temp != null) {\n-                CKSUMTYPE_DEFAULT = Config.getType(temp);\n-            } else {\n-                CKSUMTYPE_DEFAULT = -1;\n-            }\n-        } catch (Exception exc) {\n-            if (DEBUG) {\n-                System.out.println(\"Exception in getting default checksum \"+\n-                                   \"value from the configuration. \" +\n-                                   \"No default checksum set.\");\n-                exc.printStackTrace();\n-            }\n-            CKSUMTYPE_DEFAULT = -1;\n-        }\n-\n-\n-        try {\n-            temp = cfg.get(\"libdefaults\", \"safe_checksum_type\");\n-            if (temp != null)\n-                {\n-                    SAFECKSUMTYPE_DEFAULT = Config.getType(temp);\n-                } else {\n-                    SAFECKSUMTYPE_DEFAULT = -1;\n-                }\n-        } catch (Exception exc) {\n-            if (DEBUG) {\n-                System.out.println(\"Exception in getting safe default \" +\n-                                   \"checksum value \" +\n-                                   \"from the configuration. \" +\n-                                   \"No safe default checksum set.\");\n-                exc.printStackTrace();\n-            }\n-            SAFECKSUMTYPE_DEFAULT = -1;\n-        }\n-    }\n@@ -172,15 +123,0 @@\n-    \/**\n-     * Verifies the keyed checksum over the data passed in.\n-     *\/\n-    public boolean verifyKeyedChecksum(byte[] data, EncryptionKey key, int usage)\n-            throws KdcErrException, KrbApErrException, KrbCryptoException {\n-        CksumType cksumEngine = CksumType.getInstance(cksumType);\n-        if (!cksumEngine.isKeyed()) {\n-            throw new KrbApErrException(Krb5.KRB_AP_ERR_INAPP_CKSUM);\n-        } else {\n-            return cksumEngine.verifyChecksum(\n-                    data, data.length, key.getBytes(), checksum, usage);\n-        }\n-    }\n-\n-\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/Checksum.java","additions":1,"deletions":65,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -156,1 +156,0 @@\n-        Checksum.initStatic();\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/Config.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -129,1 +129,1 @@\n-    \/\/ used in KrbApRep, KrbApReq, KrbAsReq, KrbCred, KrbPriv\n+    \/\/ used in KrbApRep, KrbApReq, KrbAsReq\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/EncryptedData.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,115 +0,0 @@\n-\/*\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- *\n- *  (C) Copyright IBM Corp. 1999 All Rights Reserved.\n- *  Copyright 1997 The Open Group Research Institute.  All rights reserved.\n- *\/\n-\n-package sun.security.krb5;\n-\n-import sun.security.krb5.internal.*;\n-\n-abstract class KrbAppMessage {\n-\n-    private static boolean DEBUG = Krb5.DEBUG;\n-    \/**\n-     * Common checks for KRB-PRIV and KRB-SAFE\n-     *\/\n-    void check(KerberosTime packetTimestamp,\n-               Integer packetUsec,\n-               Integer packetSeqNumber,\n-               HostAddress packetSAddress,\n-               HostAddress packetRAddress,\n-               SeqNumber seqNumber,\n-               HostAddress sAddress,\n-               HostAddress rAddress,\n-               boolean timestampRequired,\n-               boolean seqNumberRequired,\n-               PrincipalName packetPrincipal)\n-        throws KrbApErrException {\n-\n-        if (!Krb5.AP_EMPTY_ADDRESSES_ALLOWED || sAddress != null) {\n-            if (packetSAddress == null || sAddress == null ||\n-                !packetSAddress.equals(sAddress)) {\n-                if (DEBUG && packetSAddress == null) {\n-                    System.out.println(\"packetSAddress is null\");\n-                }\n-                if (DEBUG && sAddress == null) {\n-                    System.out.println(\"sAddress is null\");\n-                }\n-                throw new KrbApErrException(Krb5.KRB_AP_ERR_BADADDR);\n-            }\n-        }\n-\n-        if (!Krb5.AP_EMPTY_ADDRESSES_ALLOWED || rAddress != null) {\n-            if (packetRAddress == null || rAddress == null ||\n-                !packetRAddress.equals(rAddress))\n-                throw new KrbApErrException(Krb5.KRB_AP_ERR_BADADDR);\n-        }\n-\n-        if (packetTimestamp != null) {\n-            if (packetUsec != null) {\n-                packetTimestamp =\n-                    packetTimestamp.withMicroSeconds(packetUsec.intValue());\n-            }\n-            if (!packetTimestamp.inClockSkew()) {\n-                throw new KrbApErrException(Krb5.KRB_AP_ERR_SKEW);\n-            }\n-        } else {\n-            if (timestampRequired) {\n-                throw new KrbApErrException(Krb5.KRB_AP_ERR_SKEW);\n-            }\n-        }\n-\n-        \/\/ XXX check replay cache\n-        \/\/ if (rcache.repeated(packetTimestamp, packetUsec, packetSAddress))\n-        \/\/      throw new KrbApErrException(Krb5.KRB_AP_ERR_REPEAT);\n-\n-        \/\/ XXX consider moving up to api level\n-        if (seqNumber == null && seqNumberRequired == true)\n-            throw new KrbApErrException(Krb5.API_INVALID_ARG);\n-\n-        if (packetSeqNumber != null && seqNumber != null) {\n-            if (packetSeqNumber.intValue() != seqNumber.current())\n-                throw new KrbApErrException(Krb5.KRB_AP_ERR_BADORDER);\n-            \/\/ should be done only when no more exceptions are possible\n-            seqNumber.step();\n-        } else {\n-            if (seqNumberRequired) {\n-                throw new KrbApErrException(Krb5.KRB_AP_ERR_BADORDER);\n-            }\n-        }\n-\n-        \/\/ Must not be relaxed, per RFC 4120\n-        if (packetTimestamp == null && packetSeqNumber == null)\n-            throw new KrbApErrException(Krb5.KRB_AP_ERR_MODIFIED);\n-\n-        \/\/ XXX check replay cache\n-        \/\/ rcache.save_identifier(packetTimestamp, packetUsec, packetSAddress,\n-        \/\/ packetPrincipal, pcaketRealm);\n-    }\n-\n-}\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/KrbAppMessage.java","additions":0,"deletions":115,"binary":false,"changes":115,"status":"deleted"},{"patch":"@@ -1,178 +0,0 @@\n-\/*\n- * Copyright (c) 2000, 2012, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- *\n- *  (C) Copyright IBM Corp. 1999 All Rights Reserved.\n- *  Copyright 1997 The Open Group Research Institute.  All rights reserved.\n- *\/\n-\n-package sun.security.krb5;\n-\n-import sun.security.krb5.internal.*;\n-import sun.security.krb5.internal.crypto.*;\n-import sun.security.util.*;\n-import java.io.IOException;\n-\n-\/** XXX This class does not appear to be used. **\/\n-\n-class KrbPriv extends KrbAppMessage {\n-    private byte[] obuf;\n-    private byte[] userData;\n-\n-    private KrbPriv(byte[] userData,\n-                   Credentials creds,\n-                   EncryptionKey subKey,\n-                   KerberosTime timestamp,\n-                   SeqNumber seqNumber,\n-                   HostAddress saddr,\n-                   HostAddress raddr\n-                   )  throws KrbException, IOException {\n-        EncryptionKey reqKey = null;\n-        if (subKey != null)\n-            reqKey = subKey;\n-        else\n-            reqKey = creds.key;\n-\n-        obuf = mk_priv(\n-                       userData,\n-                       reqKey,\n-                       timestamp,\n-                       seqNumber,\n-                       saddr,\n-                       raddr\n-                       );\n-    }\n-\n-    private KrbPriv(byte[] msg,\n-                   Credentials creds,\n-                   EncryptionKey subKey,\n-                   SeqNumber seqNumber,\n-                   HostAddress saddr,\n-                   HostAddress raddr,\n-                   boolean timestampRequired,\n-                   boolean seqNumberRequired\n-                   )  throws KrbException, IOException {\n-\n-        KRBPriv krb_priv = new KRBPriv(msg);\n-        EncryptionKey reqKey = null;\n-        if (subKey != null)\n-            reqKey = subKey;\n-        else\n-            reqKey = creds.key;\n-        userData = rd_priv(krb_priv,\n-                           reqKey,\n-                           seqNumber,\n-                           saddr,\n-                           raddr,\n-                           timestampRequired,\n-                           seqNumberRequired,\n-                           creds.client\n-                           );\n-    }\n-\n-    public byte[] getMessage() throws KrbException {\n-        return obuf;\n-    }\n-\n-    public byte[] getData() {\n-        return userData;\n-    }\n-\n-    private byte[] mk_priv(byte[] userData,\n-                           EncryptionKey key,\n-                           KerberosTime timestamp,\n-                           SeqNumber seqNumber,\n-                           HostAddress sAddress,\n-                           HostAddress rAddress\n-                           ) throws Asn1Exception, IOException,\n-                           KdcErrException, KrbCryptoException {\n-\n-                               Integer usec = null;\n-                               Integer seqno = null;\n-\n-                               if (timestamp != null)\n-                               usec = timestamp.getMicroSeconds();\n-\n-                               if (seqNumber != null) {\n-                                   seqno = seqNumber.current();\n-                                   seqNumber.step();\n-                               }\n-\n-                               EncKrbPrivPart unenc_encKrbPrivPart =\n-                               new EncKrbPrivPart(userData,\n-                                                  timestamp,\n-                                                  usec,\n-                                                  seqno,\n-                                                  sAddress,\n-                                                  rAddress\n-                                                  );\n-\n-                               byte[] temp = unenc_encKrbPrivPart.asn1Encode();\n-\n-                               EncryptedData encKrbPrivPart =\n-                               new EncryptedData(key, temp,\n-                                   KeyUsage.KU_ENC_KRB_PRIV_PART);\n-\n-                               KRBPriv krb_priv = new KRBPriv(encKrbPrivPart);\n-\n-                               temp = krb_priv.asn1Encode();\n-\n-                               return krb_priv.asn1Encode();\n-                           }\n-\n-    private byte[] rd_priv(KRBPriv krb_priv,\n-                           EncryptionKey key,\n-                           SeqNumber seqNumber,\n-                           HostAddress sAddress,\n-                           HostAddress rAddress,\n-                           boolean timestampRequired,\n-                           boolean seqNumberRequired,\n-                           PrincipalName cname\n-                           ) throws Asn1Exception, KdcErrException,\n-                           KrbApErrException, IOException, KrbCryptoException {\n-\n-                               byte[] bytes = krb_priv.encPart.decrypt(key,\n-                                   KeyUsage.KU_ENC_KRB_PRIV_PART);\n-                               byte[] temp = krb_priv.encPart.reset(bytes);\n-                               DerValue ref = new DerValue(temp);\n-                               EncKrbPrivPart enc_part = new EncKrbPrivPart(ref);\n-\n-                               check(enc_part.timestamp,\n-                                     enc_part.usec,\n-                                     enc_part.seqNumber,\n-                                     enc_part.sAddress,\n-                                     enc_part.rAddress,\n-                                     seqNumber,\n-                                     sAddress,\n-                                     rAddress,\n-                                     timestampRequired,\n-                                     seqNumberRequired,\n-                                     cname\n-                                     );\n-\n-                               return enc_part.userData;\n-                           }\n-}\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/KrbPriv.java","additions":0,"deletions":178,"binary":false,"changes":178,"status":"deleted"},{"patch":"@@ -1,183 +0,0 @@\n-\/*\n- * Copyright (c) 2000, 2012, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- *\n- *  (C) Copyright IBM Corp. 1999 All Rights Reserved.\n- *  Copyright 1997 The Open Group Research Institute.  All rights reserved.\n- *\/\n-\n-package sun.security.krb5;\n-\n-import sun.security.krb5.EncryptionKey;\n-import sun.security.krb5.internal.*;\n-import sun.security.krb5.internal.crypto.*;\n-import java.io.IOException;\n-\n-class KrbSafe extends KrbAppMessage {\n-\n-    private byte[] obuf;\n-    private byte[] userData;\n-\n-    public KrbSafe(byte[] userData,\n-                   Credentials creds,\n-                   EncryptionKey subKey,\n-                   KerberosTime timestamp,\n-                   SeqNumber seqNumber,\n-                   HostAddress saddr,\n-                   HostAddress raddr\n-                   )  throws KrbException, IOException {\n-        EncryptionKey reqKey = null;\n-        if (subKey != null)\n-            reqKey = subKey;\n-        else\n-            reqKey = creds.key;\n-\n-        obuf = mk_safe(userData,\n-                       reqKey,\n-                       timestamp,\n-                       seqNumber,\n-                       saddr,\n-                       raddr\n-                       );\n-    }\n-\n-    public KrbSafe(byte[] msg,\n-                   Credentials creds,\n-                   EncryptionKey subKey,\n-                   SeqNumber seqNumber,\n-                   HostAddress saddr,\n-                   HostAddress raddr,\n-                   boolean timestampRequired,\n-                   boolean seqNumberRequired\n-                   )  throws KrbException, IOException {\n-\n-        KRBSafe krb_safe = new KRBSafe(msg);\n-\n-        EncryptionKey reqKey = null;\n-        if (subKey != null)\n-            reqKey = subKey;\n-        else\n-            reqKey = creds.key;\n-\n-        userData = rd_safe(\n-                           krb_safe,\n-                           reqKey,\n-                           seqNumber,\n-                           saddr,\n-                           raddr,\n-                           timestampRequired,\n-                           seqNumberRequired,\n-                           creds.client\n-                           );\n-    }\n-\n-    public byte[] getMessage() {\n-        return obuf;\n-    }\n-\n-    public byte[] getData() {\n-        return userData;\n-    }\n-\n-    private  byte[] mk_safe(byte[] userData,\n-                            EncryptionKey key,\n-                            KerberosTime timestamp,\n-                            SeqNumber seqNumber,\n-                            HostAddress sAddress,\n-                            HostAddress rAddress\n-                            ) throws Asn1Exception, IOException, KdcErrException,\n-                            KrbApErrException, KrbCryptoException {\n-\n-                                Integer usec = null;\n-                                Integer seqno = null;\n-\n-                                if (timestamp != null)\n-                                usec = timestamp.getMicroSeconds();\n-\n-                                if (seqNumber != null) {\n-                                    seqno = seqNumber.current();\n-                                    seqNumber.step();\n-                                }\n-\n-                                KRBSafeBody krb_safeBody =\n-                                new KRBSafeBody(userData,\n-                                                timestamp,\n-                                                usec,\n-                                                seqno,\n-                                                sAddress,\n-                                                rAddress\n-                                                );\n-\n-                                byte[] temp = krb_safeBody.asn1Encode();\n-                                Checksum cksum = new Checksum(\n-                                    Checksum.SAFECKSUMTYPE_DEFAULT,\n-                                    temp,\n-                                    key,\n-                                    KeyUsage.KU_KRB_SAFE_CKSUM\n-                                    );\n-\n-                                KRBSafe krb_safe = new KRBSafe(krb_safeBody, cksum);\n-\n-                                temp = krb_safe.asn1Encode();\n-\n-                                return krb_safe.asn1Encode();\n-                            }\n-\n-    private byte[] rd_safe(KRBSafe krb_safe,\n-                           EncryptionKey key,\n-                           SeqNumber seqNumber,\n-                           HostAddress sAddress,\n-                           HostAddress rAddress,\n-                           boolean timestampRequired,\n-                           boolean seqNumberRequired,\n-                           PrincipalName cname\n-                           ) throws Asn1Exception, KdcErrException,\n-                           KrbApErrException, IOException, KrbCryptoException {\n-\n-                               byte[] temp = krb_safe.safeBody.asn1Encode();\n-\n-                               if (!krb_safe.cksum.verifyKeyedChecksum(temp, key,\n-                                   KeyUsage.KU_KRB_SAFE_CKSUM)) {\n-                                       throw new KrbApErrException(\n-                                           Krb5.KRB_AP_ERR_MODIFIED);\n-                               }\n-\n-                               check(krb_safe.safeBody.timestamp,\n-                                     krb_safe.safeBody.usec,\n-                                     krb_safe.safeBody.seqNumber,\n-                                     krb_safe.safeBody.sAddress,\n-                                     krb_safe.safeBody.rAddress,\n-                                     seqNumber,\n-                                     sAddress,\n-                                     rAddress,\n-                                     timestampRequired,\n-                                     seqNumberRequired,\n-                                     cname\n-                                     );\n-\n-                               return krb_safe.safeBody.userData;\n-                           }\n-}\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/KrbSafe.java","additions":0,"deletions":183,"binary":false,"changes":183,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -319,3 +319,1 @@\n-        \/\/ if the checksum type is one of the keyed checksum types,\n-        \/\/ use session key.\n-        Checksum cksum  = new Checksum(Checksum.CKSUMTYPE_DEFAULT, temp, key,\n+        Checksum cksum  = new Checksum(-1, temp, key,\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/KrbTgsReq.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,52 +0,0 @@\n-\/*\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- *\n- *  (C) Copyright IBM Corp. 1999 All Rights Reserved.\n- *  Copyright 1997 The Open Group Research Institute.  All rights reserved.\n- *\/\n-\n-package sun.security.krb5.internal;\n-\n-import sun.security.krb5.EncryptionKey;\n-import java.util.BitSet;\n-\n-public class AuthContext {\n-    public HostAddress remoteAddress;\n-    public int remotePort;\n-    public HostAddress localAddress;\n-    public int localPort;\n-    public EncryptionKey keyBlock;\n-    public EncryptionKey localSubkey;\n-    public EncryptionKey remoteSubkey;\n-    public BitSet authContextFlags;\n-    public int remoteSeqNumber;\n-    public int localSeqNumber;\n-    public Authenticator authenticator;\n-    public int reqCksumType;\n-    public int safeCksumType;\n-    public byte[] initializationVector;\n-    \/\/public ReplayCache replayCache;\n-};\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/internal\/AuthContext.java","additions":0,"deletions":52,"binary":false,"changes":52,"status":"deleted"},{"patch":"@@ -1,173 +0,0 @@\n-\/*\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- *  (C) Copyright IBM Corp. 1999 All Rights Reserved.\n- *  Copyright 1997 The Open Group Research Institute.  All rights reserved.\n- *\/\n-\n-package sun.security.krb5.internal;\n-\n-import sun.security.util.*;\n-import sun.security.krb5.Asn1Exception;\n-import java.util.Vector;\n-import java.io.IOException;\n-import java.math.BigInteger;\n-\n-\/**\n- * Implements the ASN.1 EncKrbPrivPart type.\n- *\n- * <pre>{@code\n- * EncKrbPrivPart  ::= [APPLICATION 28] SEQUENCE {\n- *         user-data       [0] OCTET STRING,\n- *         timestamp       [1] KerberosTime OPTIONAL,\n- *         usec            [2] Microseconds OPTIONAL,\n- *         seq-number      [3] UInt32 OPTIONAL,\n- *         s-address       [4] HostAddress -- sender's addr --,\n- *         r-address       [5] HostAddress OPTIONAL -- recip's addr\n- * }\n- * }<\/pre>\n- *\n- * <p>\n- * This definition reflects the Network Working Group RFC 4120\n- * specification available at\n- * <a href=\"http:\/\/www.ietf.org\/rfc\/rfc4120.txt\">\n- * http:\/\/www.ietf.org\/rfc\/rfc4120.txt<\/a>.\n- *\/\n-public class EncKrbPrivPart {\n-\n-    public byte[] userData = null;\n-    public KerberosTime timestamp; \/\/optional\n-    public Integer usec; \/\/optional\n-    public Integer seqNumber; \/\/optional\n-    public HostAddress sAddress; \/\/optional\n-    public HostAddress rAddress; \/\/optional\n-\n-    public EncKrbPrivPart(\n-            byte[] new_userData,\n-            KerberosTime new_timestamp,\n-            Integer new_usec,\n-            Integer new_seqNumber,\n-            HostAddress new_sAddress,\n-            HostAddress new_rAddress) {\n-        if (new_userData != null) {\n-            userData = new_userData.clone();\n-        }\n-        timestamp = new_timestamp;\n-        usec = new_usec;\n-        seqNumber = new_seqNumber;\n-        sAddress = new_sAddress;\n-        rAddress = new_rAddress;\n-    }\n-\n-    public EncKrbPrivPart(byte[] data) throws Asn1Exception, IOException {\n-        init(new DerValue(data));\n-    }\n-\n-    public EncKrbPrivPart(DerValue encoding) throws Asn1Exception, IOException {\n-        init(encoding);\n-    }\n-\n-    \/**\n-     * Initializes an EncKrbPrivPart object.\n-     * @param encoding a single DER-encoded value.\n-     * @exception Asn1Exception if an error occurs while decoding an ASN1 encoded data.\n-     * @exception IOException if an I\/O error occurs while reading encoded data.\n-     *\/\n-    private void init(DerValue encoding) throws Asn1Exception, IOException {\n-        DerValue der, subDer;\n-        if (((encoding.getTag() & (byte) 0x1F) != (byte) 0x1C)\n-                || (encoding.isApplication() != true)\n-                || (encoding.isConstructed() != true)) {\n-            throw new Asn1Exception(Krb5.ASN1_BAD_ID);\n-        }\n-        der = encoding.getData().getDerValue();\n-        if (der.getTag() != DerValue.tag_Sequence) {\n-            throw new Asn1Exception(Krb5.ASN1_BAD_ID);\n-        }\n-        subDer = der.getData().getDerValue();\n-        if ((subDer.getTag() & (byte) 0x1F) == (byte) 0x00) {\n-            userData = subDer.getData().getOctetString();\n-        } else {\n-            throw new Asn1Exception(Krb5.ASN1_BAD_ID);\n-        }\n-        timestamp = KerberosTime.parse(der.getData(), (byte) 0x01, true);\n-        if ((der.getData().peekByte() & 0x1F) == 0x02) {\n-            subDer = der.getData().getDerValue();\n-            usec = subDer.getData().getBigInteger().intValue();\n-        } else {\n-            usec = null;\n-        }\n-        if ((der.getData().peekByte() & 0x1F) == 0x03) {\n-            subDer = der.getData().getDerValue();\n-            seqNumber = subDer.getData().getBigInteger().intValue();\n-        } else {\n-            seqNumber = null;\n-        }\n-        sAddress = HostAddress.parse(der.getData(), (byte) 0x04, false);\n-        if (der.getData().available() > 0) {\n-            rAddress = HostAddress.parse(der.getData(), (byte) 0x05, true);\n-        }\n-        if (der.getData().available() > 0) {\n-            throw new Asn1Exception(Krb5.ASN1_BAD_ID);\n-        }\n-    }\n-\n-    \/**\n-     * Encodes an EncKrbPrivPart object.\n-     * @return byte array of encoded EncKrbPrivPart object.\n-     * @exception Asn1Exception if an error occurs while decoding an ASN1 encoded data.\n-     * @exception IOException if an I\/O error occurs while reading encoded data.\n-     *\/\n-    public byte[] asn1Encode() throws Asn1Exception, IOException {\n-        DerOutputStream temp = new DerOutputStream();\n-        DerOutputStream bytes = new DerOutputStream();\n-\n-        temp.putOctetString(userData);\n-        bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT, true, (byte) 0x00), temp);\n-        if (timestamp != null) {\n-            bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT, true, (byte) 0x01), timestamp.asn1Encode());\n-        }\n-        if (usec != null) {\n-            temp = new DerOutputStream();\n-            temp.putInteger(BigInteger.valueOf(usec.intValue()));\n-            bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT, true, (byte) 0x02), temp);\n-        }\n-        if (seqNumber != null) {\n-            temp = new DerOutputStream();\n-            \/\/ encode as an unsigned integer (UInt32)\n-            temp.putInteger(BigInteger.valueOf(seqNumber.longValue()));\n-            bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT, true, (byte) 0x03), temp);\n-        }\n-        bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT, true, (byte) 0x04), sAddress.asn1Encode());\n-        if (rAddress != null) {\n-            bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT, true, (byte) 0x05), rAddress.asn1Encode());\n-        }\n-        temp = new DerOutputStream();\n-        temp.write(DerValue.tag_Sequence, bytes);\n-        bytes = new DerOutputStream();\n-        bytes.write(DerValue.createTag(DerValue.TAG_APPLICATION, true, (byte) 0x1C), temp);\n-        return bytes.toByteArray();\n-    }\n-}\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/internal\/EncKrbPrivPart.java","additions":0,"deletions":173,"binary":false,"changes":173,"status":"deleted"},{"patch":"@@ -1,143 +0,0 @@\n-\/*\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- *\n- *  (C) Copyright IBM Corp. 1999 All Rights Reserved.\n- *  Copyright 1997 The Open Group Research Institute.  All rights reserved.\n- *\/\n-\n-package sun.security.krb5.internal;\n-\n-import sun.security.krb5.EncryptedData;\n-import sun.security.krb5.Asn1Exception;\n-import sun.security.util.*;\n-import java.io.IOException;\n-import java.math.BigInteger;\n-\n-\/**\n- * Implements the ASN.1 KRB-PRIV type.\n- *\n- * <pre>{@code\n- * KRB-PRIV        ::= [APPLICATION 21] SEQUENCE {\n- *         pvno            [0] INTEGER (5),\n- *         msg-type        [1] INTEGER (21),\n- *                           -- NOTE: there is no [2] tag\n- *         enc-part        [3] EncryptedData -- EncKrbPrivPart\n- * }\n- * }<\/pre>\n- *\n- * <p>\n- * This definition reflects the Network Working Group RFC 4120\n- * specification available at\n- * <a href=\"http:\/\/www.ietf.org\/rfc\/rfc4120.txt\">\n- * http:\/\/www.ietf.org\/rfc\/rfc4120.txt<\/a>.\n- *\/\n-\n-public class KRBPriv {\n-    public int pvno;\n-    public int msgType;\n-    public EncryptedData encPart;\n-\n-    public KRBPriv(EncryptedData new_encPart) {\n-        pvno = Krb5.PVNO;\n-        msgType = Krb5.KRB_PRIV;\n-        encPart = new_encPart;\n-    }\n-\n-    public KRBPriv(byte[] data) throws Asn1Exception,\n-    KrbApErrException, IOException {\n-        init(new DerValue(data));\n-    }\n-\n-    public KRBPriv(DerValue encoding) throws Asn1Exception,\n-    KrbApErrException, IOException {\n-        init(encoding);\n-    }\n-\n-\n-    \/**\n-     * Initializes an KRBPriv object.\n-     * @param encoding a single DER-encoded value.\n-     * @exception Asn1Exception if an error occurs while decoding an ASN1 encoded data.\n-     * @exception IOException if an I\/O error occurs while reading encoded data.\n-     * @exception KrbApErrException if the value read from the DER-encoded data\n-     *  stream does not match the pre-defined value.\n-     *\/\n-    private void init(DerValue encoding) throws Asn1Exception,\n-    KrbApErrException, IOException {\n-        DerValue der, subDer;\n-        if (((encoding.getTag() & (byte)0x1F) != (byte)0x15)\n-            || (encoding.isApplication() != true)\n-            || (encoding.isConstructed() != true))\n-            throw new Asn1Exception(Krb5.ASN1_BAD_ID);\n-        der = encoding.getData().getDerValue();\n-        if (der.getTag() != DerValue.tag_Sequence)\n-            throw new Asn1Exception(Krb5.ASN1_BAD_ID);\n-        subDer = der.getData().getDerValue();\n-        if ((subDer.getTag() & 0x1F) == 0x00) {\n-            pvno = subDer.getData().getBigInteger().intValue();\n-            if (pvno != Krb5.PVNO) {\n-                throw new KrbApErrException(Krb5.KRB_AP_ERR_BADVERSION);\n-            }\n-        }\n-        else\n-            throw new Asn1Exception(Krb5.ASN1_BAD_ID);\n-        subDer = der.getData().getDerValue();\n-        if ((subDer.getTag() & 0x1F) == 0x01) {\n-            msgType = subDer.getData().getBigInteger().intValue();\n-            if (msgType != Krb5.KRB_PRIV)\n-                throw new KrbApErrException(Krb5.KRB_AP_ERR_MSG_TYPE);\n-        }\n-        else\n-            throw new Asn1Exception(Krb5.ASN1_BAD_ID);\n-        encPart = EncryptedData.parse(der.getData(), (byte)0x03, false);\n-        if (der.getData().available() >0)\n-            throw new Asn1Exception(Krb5.ASN1_BAD_ID);\n-    }\n-\n-    \/**\n-     * Encodes an KRBPriv object.\n-     * @return byte array of encoded EncAPRepPart object.\n-     * @exception Asn1Exception if an error occurs while decoding an ASN1 encoded data.\n-     * @exception IOException if an I\/O error occurs while reading encoded data.\n-     *\/\n-    public byte[] asn1Encode() throws Asn1Exception, IOException {\n-        DerOutputStream temp, bytes;\n-        temp = new DerOutputStream();\n-        temp.putInteger(BigInteger.valueOf(pvno));\n-        bytes = new DerOutputStream();\n-        bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT, true, (byte)0x00), temp);\n-        temp = new DerOutputStream();\n-        temp.putInteger(BigInteger.valueOf(msgType));\n-        bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT, true, (byte)0x01), temp);\n-        bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT, true, (byte)0x03), encPart.asn1Encode());\n-        temp = new DerOutputStream();\n-        temp.write(DerValue.tag_Sequence, bytes);\n-        bytes = new DerOutputStream();\n-        bytes.write(DerValue.createTag(DerValue.TAG_APPLICATION, true, (byte)0x15), temp);\n-        return bytes.toByteArray();\n-    }\n-\n-}\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/internal\/KRBPriv.java","additions":0,"deletions":143,"binary":false,"changes":143,"status":"deleted"},{"patch":"@@ -1,146 +0,0 @@\n-\/*\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- *\n- *  (C) Copyright IBM Corp. 1999 All Rights Reserved.\n- *  Copyright 1997 The Open Group Research Institute.  All rights reserved.\n- *\/\n-\n-package sun.security.krb5.internal;\n-\n-import sun.security.krb5.Checksum;\n-import sun.security.krb5.Asn1Exception;\n-import sun.security.krb5.RealmException;\n-import sun.security.util.*;\n-import java.io.IOException;\n-import java.math.BigInteger;\n-\n-\/**\n- * Implements the ASN.1 KRBSafe type.\n- *\n- * <pre>{@code\n- * KRB-SAFE        ::= [APPLICATION 20] SEQUENCE {\n- *         pvno            [0] INTEGER (5),\n- *         msg-type        [1] INTEGER (20),\n- *         safe-body       [2] KRB-SAFE-BODY,\n- *         cksum           [3] Checksum\n- * }\n- * }<\/pre>\n- *\n- * <p>\n- * This definition reflects the Network Working Group RFC 4120\n- * specifications available at\n- * <a href=\"http:\/\/www.ietf.org\/rfc\/rfc4120.txt\">\n- * http:\/\/www.ietf.org\/rfc\/rfc4120.txt<\/a>.\n- *\/\n-\n-public class KRBSafe {\n-    public int pvno;\n-    public int msgType;\n-    public KRBSafeBody safeBody;\n-    public Checksum cksum;\n-\n-    public KRBSafe(KRBSafeBody new_safeBody, Checksum new_cksum) {\n-        pvno = Krb5.PVNO;\n-        msgType = Krb5.KRB_SAFE;\n-        safeBody = new_safeBody;\n-        cksum = new_cksum;\n-    }\n-\n-    public KRBSafe(byte[] data) throws Asn1Exception,\n-    RealmException, KrbApErrException, IOException {\n-        init(new DerValue(data));\n-    }\n-\n-    public KRBSafe(DerValue encoding) throws Asn1Exception,\n-    RealmException, KrbApErrException, IOException {\n-        init(encoding);\n-    }\n-\n-    \/**\n-     * Initializes an KRBSafe object.\n-     * @param encoding a single DER-encoded value.\n-     * @exception Asn1Exception if an error occurs while decoding an ASN1 encoded data.\n-     * @exception IOException if an I\/O error occurs while reading encoded data.\n-     * @exception RealmException if an error occurs while parsing a Realm object.\n-     * @exception KrbApErrException if the value read from the DER-encoded data\n-     *  stream does not match the pre-defined value.\n-     *\/\n-    private void init(DerValue encoding) throws Asn1Exception,\n-    RealmException, KrbApErrException, IOException {\n-        DerValue der, subDer;\n-        if (((encoding.getTag() & (byte)0x1F) != (byte)0x14)\n-            || (encoding.isApplication() != true)\n-            || (encoding.isConstructed() != true))\n-            throw new Asn1Exception(Krb5.ASN1_BAD_ID);\n-        der = encoding.getData().getDerValue();\n-        if (der.getTag() != DerValue.tag_Sequence)\n-            throw new Asn1Exception(Krb5.ASN1_BAD_ID);\n-        subDer = der.getData().getDerValue();\n-        if ((subDer.getTag() & 0x1F) == 0x00) {\n-            pvno = subDer.getData().getBigInteger().intValue();\n-            if (pvno != Krb5.PVNO)\n-                throw new KrbApErrException(Krb5.KRB_AP_ERR_BADVERSION);\n-        }\n-        else\n-            throw new Asn1Exception(Krb5.ASN1_BAD_ID);\n-        subDer = der.getData().getDerValue();\n-        if ((subDer.getTag() & 0x1F) == 0x01) {\n-            msgType = subDer.getData().getBigInteger().intValue();\n-            if (msgType != Krb5.KRB_SAFE)\n-                throw new KrbApErrException(Krb5.KRB_AP_ERR_MSG_TYPE);\n-        }\n-\n-        else\n-            throw new Asn1Exception(Krb5.ASN1_BAD_ID);\n-        safeBody = KRBSafeBody.parse(der.getData(), (byte)0x02, false);\n-        cksum = Checksum.parse(der.getData(), (byte)0x03, false);\n-        if (der.getData().available() > 0)\n-            throw new Asn1Exception(Krb5.ASN1_BAD_ID);\n-    }\n-\n-    \/**\n-     * Encodes an KRBSafe object.\n-     * @return byte array of encoded KRBSafe object.\n-     * @exception Asn1Exception if an error occurs while decoding an ASN1 encoded data.\n-     * @exception IOException if an I\/O error occurs while reading encoded data.\n-     *\/\n-    public byte[] asn1Encode() throws Asn1Exception, IOException {\n-        DerOutputStream temp = new DerOutputStream();\n-        DerOutputStream bytes = new DerOutputStream();\n-        temp.putInteger(BigInteger.valueOf(pvno));\n-        bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT, true, (byte)0x00), temp);\n-        temp = new DerOutputStream();\n-        temp.putInteger(BigInteger.valueOf(msgType));\n-        bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT, true, (byte)0x01), temp);\n-        bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT, true, (byte)0x02), safeBody.asn1Encode());\n-        bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT, true, (byte)0x03), cksum.asn1Encode());\n-        temp = new DerOutputStream();\n-        temp.write(DerValue.tag_Sequence, bytes);\n-        bytes = new DerOutputStream();\n-        bytes.write(DerValue.createTag(DerValue.TAG_APPLICATION, true, (byte)0x14), temp);\n-        return bytes.toByteArray();\n-    }\n-}\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/internal\/KRBSafe.java","additions":0,"deletions":146,"binary":false,"changes":146,"status":"deleted"},{"patch":"@@ -1,177 +0,0 @@\n-\/*\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- *\n- *  (C) Copyright IBM Corp. 1999 All Rights Reserved.\n- *  Copyright 1997 The Open Group Research Institute.  All rights reserved.\n- *\/\n-\n-package sun.security.krb5.internal;\n-\n-import sun.security.util.*;\n-import sun.security.krb5.Asn1Exception;\n-import java.util.Vector;\n-import java.io.IOException;\n-import java.math.BigInteger;\n-\n-\/**\n- * Implements the ASN.1 KRBSafeBody type.\n- *\n- * <pre>{@code\n- * KRB-SAFE-BODY   ::= SEQUENCE {\n- *         user-data       [0] OCTET STRING,\n- *         timestamp       [1] KerberosTime OPTIONAL,\n- *         usec            [2] Microseconds OPTIONAL,\n- *         seq-number      [3] UInt32 OPTIONAL,\n- *         s-address       [4] HostAddress,\n- *         r-address       [5] HostAddress OPTIONAL\n- * }\n- * }<\/pre>\n- *\n- * <p>\n- * This definition reflects the Network Working Group RFC 4120\n- * specification available at\n- * <a href=\"http:\/\/www.ietf.org\/rfc\/rfc4120.txt\">\n- * http:\/\/www.ietf.org\/rfc\/rfc4120.txt<\/a>.\n- *\/\n-\n-public class KRBSafeBody {\n-    public byte[] userData = null;\n-    public KerberosTime timestamp; \/\/optional\n-    public Integer usec; \/\/optional\n-    public Integer seqNumber; \/\/optional\n-    public HostAddress sAddress;\n-    public HostAddress rAddress; \/\/optional\n-\n-    public KRBSafeBody(\n-                       byte[] new_userData,\n-                       KerberosTime new_timestamp,\n-                       Integer new_usec,\n-                       Integer new_seqNumber,\n-                       HostAddress new_sAddress,\n-                       HostAddress new_rAddress\n-                           ) {\n-        if (new_userData != null) {\n-            userData = new_userData.clone();\n-        }\n-        timestamp = new_timestamp;\n-        usec = new_usec;\n-        seqNumber = new_seqNumber;\n-        sAddress = new_sAddress;\n-        rAddress = new_rAddress;\n-    }\n-\n-\n-    \/**\n-     * Constructs a KRBSafeBody object.\n-     * @param encoding a Der-encoded data.\n-     * @exception Asn1Exception if an error occurs while decoding an ASN1 encoded data.\n-     * @exception IOException if an I\/O error occurs while reading encoded data.\n-     *\/\n-    public KRBSafeBody(DerValue encoding) throws Asn1Exception, IOException {\n-        DerValue der;\n-        if (encoding.getTag() != DerValue.tag_Sequence) {\n-            throw new Asn1Exception(Krb5.ASN1_BAD_ID);\n-        }\n-        der = encoding.getData().getDerValue();\n-        if ((der.getTag() & 0x1F) == 0x00) {\n-            userData = der.getData().getOctetString();\n-        }\n-        else\n-            throw new Asn1Exception(Krb5.ASN1_BAD_ID);\n-        timestamp = KerberosTime.parse(encoding.getData(), (byte)0x01, true);\n-        if ((encoding.getData().peekByte() & 0x1F) == 0x02) {\n-            der = encoding.getData().getDerValue();\n-            usec = der.getData().getBigInteger().intValue();\n-        }\n-        if ((encoding.getData().peekByte() & 0x1F) == 0x03) {\n-            der = encoding.getData().getDerValue();\n-            seqNumber = der.getData().getBigInteger().intValue();\n-        }\n-        sAddress = HostAddress.parse(encoding.getData(), (byte)0x04, false);\n-        if (encoding.getData().available() > 0)\n-            rAddress = HostAddress.parse(encoding.getData(), (byte)0x05, true);\n-        if (encoding.getData().available() > 0)\n-            throw new Asn1Exception(Krb5.ASN1_BAD_ID);\n-    }\n-\n-    \/**\n-     * Encodes an KRBSafeBody object.\n-     * @return the byte array of encoded KRBSafeBody object.\n-     * @exception Asn1Exception if an error occurs while decoding an ASN1 encoded data.\n-     * @exception IOException if an I\/O error occurs while reading encoded data.\n-     *\/\n-    public byte[] asn1Encode() throws Asn1Exception, IOException {\n-        DerOutputStream bytes = new DerOutputStream();\n-        DerOutputStream temp = new DerOutputStream();\n-        temp.putOctetString(userData);\n-        bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT, true, (byte)0x00), temp);\n-        if (timestamp != null)\n-        bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT, true, (byte)0x01), timestamp.asn1Encode());\n-        if (usec != null) {\n-            temp = new DerOutputStream();\n-            temp.putInteger(BigInteger.valueOf(usec.intValue()));\n-            bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT, true, (byte)0x02), temp);\n-        }\n-        if (seqNumber != null) {\n-            temp = new DerOutputStream();\n-            \/\/ encode as an unsigned integer (UInt32)\n-            temp.putInteger(BigInteger.valueOf(seqNumber.longValue()));\n-            bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT, true, (byte)0x03), temp);\n-        }\n-        bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT, true, (byte)0x04), sAddress.asn1Encode());\n-        if (rAddress != null)\n-        temp = new DerOutputStream();\n-        temp.write(DerValue.tag_Sequence, bytes);\n-        return temp.toByteArray();\n-    }\n-\n-    \/**\n-     * Parse (unmarshal) a KRBSafeBody from a DER input stream.  This form\n-     * parsing might be used when expanding a value which is part of\n-     * a constructed sequence and uses explicitly tagged type.\n-     *\n-     * @exception Asn1Exception on error.\n-     * @param data the Der input stream value, which contains one or more marshaled value.\n-     * @param explicitTag tag number.\n-     * @param optional indicates if this data field is optional\n-     * @return an instance of KRBSafeBody.\n-     *\n-     *\/\n-    public static KRBSafeBody parse(DerInputStream data, byte explicitTag, boolean optional) throws Asn1Exception, IOException {\n-        if ((optional) && (((byte)data.peekByte() & (byte)0x1F) != explicitTag))\n-            return null;\n-        DerValue der = data.getDerValue();\n-        if (explicitTag != (der.getTag() & (byte)0x1F))\n-            throw new Asn1Exception(Krb5.ASN1_BAD_ID);\n-        else {\n-            DerValue subDer = der.getData().getDerValue();\n-            return new KRBSafeBody(subDer);\n-        }\n-    }\n-\n-\n-\n-}\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/internal\/KRBSafeBody.java","additions":0,"deletions":177,"binary":false,"changes":177,"status":"deleted"},{"patch":"@@ -1,111 +0,0 @@\n-\/*\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- *\n- *  (C) Copyright IBM Corp. 1999 All Rights Reserved.\n- *  Copyright 1997 The Open Group Research Institute.  All rights reserved.\n- *\/\n-\n-package sun.security.krb5.internal;\n-\n-import sun.security.util.*;\n-import sun.security.krb5.Asn1Exception;\n-import java.io.IOException;\n-import java.math.BigInteger;\n-\n-\/**\n- * Implements the ASN.1 EncKrbPrivPart type.\n- *\n- * <pre>{@code\n- *     METHOD-DATA ::=    SEQUENCE {\n- *                        method-type[0]   INTEGER,\n- *                        method-data[1]   OCTET STRING OPTIONAL\n- *  }\n- * }<\/pre>\n- *\/\n-public class MethodData {\n-    private int methodType;\n-    private byte[] methodData = null; \/\/optional\n-\n-    public MethodData(int type, byte[] data) {\n-        methodType = type;\n-        if (data != null) {\n-            methodData = data.clone();\n-        }\n-    }\n-\n-    \/**\n-     * Constructs a MethodData object.\n-     * @param encoding a Der-encoded data.\n-     * @exception Asn1Exception if an error occurs while decoding an ASN1 encoded data.\n-     * @exception IOException if an I\/O error occurs while reading encoded data.\n-     *\/\n-    public MethodData(DerValue encoding) throws Asn1Exception, IOException {\n-        DerValue der;\n-        if (encoding.getTag() != DerValue.tag_Sequence) {\n-            throw new Asn1Exception(Krb5.ASN1_BAD_ID);\n-        }\n-        der = encoding.getData().getDerValue();\n-        if ((der.getTag() & 0x1F) == 0x00) {\n-            BigInteger bint = der.getData().getBigInteger();\n-            methodType = bint.intValue();\n-        }\n-        else\n-            throw new Asn1Exception(Krb5.ASN1_BAD_ID);\n-        if (encoding.getData().available() > 0) {\n-            der = encoding.getData().getDerValue();\n-            if ((der.getTag() & 0x1F) == 0x01) {\n-                methodData = der.getData().getOctetString();\n-            }\n-            else throw new Asn1Exception(Krb5.ASN1_BAD_ID);\n-        }\n-        if (encoding.getData().available() > 0)\n-            throw new Asn1Exception(Krb5.ASN1_BAD_ID);\n-    }\n-\n-    \/**\n-     * Encodes an MethodData object.\n-     * @return the byte array of encoded MethodData object.\n-     * @exception Asn1Exception if an error occurs while decoding an ASN1 encoded data.\n-     * @exception IOException if an I\/O error occurs while reading encoded data.\n-     *\/\n-\n-    public byte[] asn1Encode() throws Asn1Exception, IOException {\n-        DerOutputStream bytes = new DerOutputStream();\n-        DerOutputStream temp = new DerOutputStream();\n-        temp.putInteger(BigInteger.valueOf(methodType));\n-        bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT, true, (byte)0x00), temp);\n-        if (methodData != null) {\n-            temp = new DerOutputStream();\n-            temp.putOctetString(methodData);\n-            bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT, true, (byte)0x01), temp);\n-        }\n-\n-        temp = new DerOutputStream();\n-        temp.write(DerValue.tag_Sequence, bytes);\n-        return temp.toByteArray();\n-    }\n-\n-}\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/internal\/MethodData.java","additions":0,"deletions":111,"binary":false,"changes":111,"status":"deleted"}]}