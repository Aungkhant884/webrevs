{"files":[{"patch":"@@ -9176,0 +9176,7 @@\n+void Assembler::bzhiq(Register dst, Register src1, Register src2) {\n+  assert(VM_Version::supports_bmi2(), \"bit manipulation instructions not supported\");\n+  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ true, \/* legacy_mode *\/ true, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n+  int encode = vex_prefix_and_encode(dst->encoding(), src2->encoding(), src1->encoding(), VEX_SIMD_NONE, VEX_OPCODE_0F_38, &attributes);\n+  emit_int16((unsigned char)0xF5, (0xC0 | encode));\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2095,0 +2095,1 @@\n+  void bzhiq(Register dst, Register src1, Register src2);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1897,11 +1897,3 @@\n-  if (ArrayCopyPartialInlineSize <= 32) {\n-    mov64(dst, 1);\n-    shlxq(dst, dst, len);\n-    decq(dst);\n-  } else {\n-    mov64(dst, -1);\n-    movq(temp, len);\n-    negptr(temp);\n-    addptr(temp, 64);\n-    shrxq(dst, dst, temp);\n-  }\n+  assert(ArrayCopyPartialInlineSize <= 64,\"\");\n+  mov64(dst, -1L);\n+  bzhiq(dst, dst, len);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -199,4 +199,2 @@\n-    negptr(length);\n-    addq(length, 64);\n-    mov64(temp, -1);\n-    shrxq(temp, temp, length);\n+    mov64(temp, -1L);\n+    bzhiq(temp, temp, length);\n@@ -216,3 +214,2 @@\n-  mov64(temp, 1);\n-  shlxq(temp, temp, length);\n-  decq(temp);\n+  mov64(temp, -1L);\n+  bzhiq(temp, temp, length);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86_arrayCopy_avx3.cpp","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1474,0 +1474,1 @@\n+        __ align(32);\n@@ -1540,0 +1541,1 @@\n+        __ align(32);\n@@ -1679,0 +1681,1 @@\n+        __ align(32);\n@@ -1711,0 +1714,1 @@\n+        __ align(32);\n@@ -1773,1 +1777,1 @@\n-    if (VM_Version::supports_avx512vlbw() && MaxVectorSize  >= 32) {\n+    if (VM_Version::supports_avx512vlbw() && VM_Version::supports_bmi2() && MaxVectorSize  >= 32) {\n@@ -1889,1 +1893,1 @@\n-    if (VM_Version::supports_avx512vlbw() && MaxVectorSize  >= 32) {\n+    if (VM_Version::supports_avx512vlbw() && VM_Version::supports_bmi2() && MaxVectorSize  >= 32) {\n@@ -2000,1 +2004,1 @@\n-    if (VM_Version::supports_avx512vlbw() && MaxVectorSize  >= 32) {\n+    if (VM_Version::supports_avx512vlbw() && VM_Version::supports_bmi2() && MaxVectorSize  >= 32) {\n@@ -2131,1 +2135,1 @@\n-    if (VM_Version::supports_avx512vlbw() && MaxVectorSize  >= 32) {\n+    if (VM_Version::supports_avx512vlbw() && VM_Version::supports_bmi2() && MaxVectorSize  >= 32) {\n@@ -2235,1 +2239,1 @@\n-    if (VM_Version::supports_avx512vlbw() && MaxVectorSize  >= 32) {\n+    if (VM_Version::supports_avx512vlbw() && VM_Version::supports_bmi2() && MaxVectorSize  >= 32) {\n@@ -2346,1 +2350,1 @@\n-    if (VM_Version::supports_avx512vlbw() && MaxVectorSize  >= 32) {\n+    if (VM_Version::supports_avx512vlbw() && VM_Version::supports_bmi2() && MaxVectorSize  >= 32) {\n@@ -2459,1 +2463,1 @@\n-    if (VM_Version::supports_avx512vlbw() && MaxVectorSize  >= 32) {\n+    if (VM_Version::supports_avx512vlbw() && VM_Version::supports_bmi2() && MaxVectorSize  >= 32) {\n@@ -2569,1 +2573,1 @@\n-    if (VM_Version::supports_avx512vlbw() && MaxVectorSize  >= 32) {\n+    if (VM_Version::supports_avx512vlbw() && VM_Version::supports_bmi2() && MaxVectorSize  >= 32) {\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -1529,1 +1529,1 @@\n-      if (UseAVX < 3) {\n+      if (UseAVX < 3 || !VM_Version::supports_bmi2()) {\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}