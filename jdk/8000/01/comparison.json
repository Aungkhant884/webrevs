{"files":[{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -101,1 +102,0 @@\n-    @SuppressWarnings(\"deprecation\")\n@@ -103,1 +103,2 @@\n-        if (api != Opcodes.ASM8\n+        if (api != Opcodes.ASM9\n+                && api != Opcodes.ASM8\n@@ -107,2 +108,1 @@\n-                && api != Opcodes.ASM4\n-                && api != Opcodes.ASM9_EXPERIMENTAL) {\n+                && api != Opcodes.ASM4) {\n@@ -111,3 +111,0 @@\n-        if (api == Opcodes.ASM9_EXPERIMENTAL) {\n-            Constants.checkAsmExperimental(this);\n-        }\n@@ -165,1 +162,1 @@\n-      * Visits an array value of the annotation. Note that arrays of primitive types (such as byte,\n+      * Visits an array value of the annotation. Note that arrays of primitive values (such as byte,\n@@ -167,1 +164,1 @@\n-      * visit}. This is what {@link ClassReader} does.\n+      * visit}. This is what {@link ClassReader} does for non empty arrays of primitive values.\n@@ -188,1 +185,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/AnnotationVisitor.java","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -146,1 +147,1 @@\n-        super(\/* latest api = *\/ Opcodes.ASM8);\n+        super(\/* latest api = *\/ Opcodes.ASM9);\n@@ -584,1 +585,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/AnnotationWriter.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -423,1 +424,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/Attribute.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -392,1 +393,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/ByteVector.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -122,0 +123,3 @@\n+    \/** The maximum size of array to allocate. *\/\n+    private static final int MAX_BUFFER_SIZE = 1024 * 1024;\n+\n@@ -135,0 +139,3 @@\n+    \/** The offset in bytes of the ClassFile's access_flags field. *\/\n+    public final int header;\n+\n@@ -181,3 +188,0 @@\n-    \/** The offset in bytes of the ClassFile's access_flags field. *\/\n-    public final int header;\n-\n@@ -344,0 +348,1 @@\n+        int bufferSize = calculateBufferSize(inputStream);\n@@ -345,1 +350,1 @@\n-            byte[] data = new byte[INPUT_STREAM_DATA_CHUNK_SIZE];\n+            byte[] data = new byte[bufferSize];\n@@ -347,1 +352,2 @@\n-            while ((bytesRead = inputStream.read(data, 0, data.length)) != -1) {\n+            int readCount = 0;\n+            while ((bytesRead = inputStream.read(data, 0, bufferSize)) != -1) {\n@@ -349,0 +355,1 @@\n+                readCount++;\n@@ -351,0 +358,3 @@\n+            if (readCount == 1) {\n+                return data;\n+            }\n@@ -359,0 +369,14 @@\n+    private static int calculateBufferSize(final InputStream inputStream) throws IOException {\n+        int expectedLength = inputStream.available();\n+        \/*\n+          * Some implementations can return 0 while holding available data\n+          * (e.g. new FileInputStream(\"\/proc\/a_file\"))\n+          * Also in some pathological cases a very small number might be returned,\n+          * and in this case we use default size\n+          *\/\n+        if (expectedLength < 256) {\n+            return INPUT_STREAM_DATA_CHUNK_SIZE;\n+        }\n+        return Math.min(expectedLength, MAX_BUFFER_SIZE);\n+    }\n+\n@@ -449,1 +473,0 @@\n-    @SuppressWarnings(\"deprecation\")\n@@ -713,1 +736,1 @@\n-            int currentPermittedSubclassOffset = permittedSubclassesOffset + 2;\n+            int currentPermittedSubclassesOffset = permittedSubclassesOffset + 2;\n@@ -715,3 +738,3 @@\n-                classVisitor.visitPermittedSubclassExperimental(\n-                        readClass(currentPermittedSubclassOffset, charBuffer));\n-                currentPermittedSubclassOffset += 2;\n+                classVisitor.visitPermittedSubclass(\n+                        readClass(currentPermittedSubclassesOffset, charBuffer));\n+                currentPermittedSubclassesOffset += 2;\n@@ -3008,1 +3031,1 @@\n-                        readElementValue(annotationVisitor, currentOffset, \/* named = *\/ null, charBuffer);\n+                        readElementValue(annotationVisitor, currentOffset, \/* elementName= *\/ null, charBuffer);\n@@ -3486,1 +3509,0 @@\n-        int[] currentBootstrapMethodOffsets = null;\n@@ -3494,1 +3516,1 @@\n-                currentBootstrapMethodOffsets = new int[readUnsignedShort(currentAttributeOffset)];\n+                int[] result = new int[readUnsignedShort(currentAttributeOffset)];\n@@ -3497,2 +3519,2 @@\n-                for (int j = 0; j < currentBootstrapMethodOffsets.length; ++j) {\n-                    currentBootstrapMethodOffsets[j] = currentBootstrapMethodOffset;\n+                for (int j = 0; j < result.length; ++j) {\n+                    result[j] = currentBootstrapMethodOffset;\n@@ -3504,1 +3526,1 @@\n-                return currentBootstrapMethodOffsets;\n+                return result;\n@@ -3862,1 +3884,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/ClassReader.java","additions":39,"deletions":17,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -102,1 +103,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/ClassTooLargeException.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -64,3 +65,4 @@\n- * visitPermittedSubclass} ][ {@code visitOuterClass} ] ( {@code visitAnnotation} | {@code\n- * visitTypeAnnotation} | {@code visitAttribute} )* ( {@code visitNestMember} | {@code\n- * visitInnerClass} | {@code visitField} | {@code visitMethod} )* {@code visitEnd}.\n+ * visitOuterClass} ] ( {@code visitAnnotation} | {@code visitTypeAnnotation} | {@code\n+ * visitAttribute} )* ( {@code visitNestMember} | [ {@code * visitPermittedSubclass} ] | {@code\n+ * visitInnerClass} | {@code visitRecordComponent} | {@code visitField} | {@code visitMethod} )*\n+ * {@code visitEnd}.\n@@ -95,2 +97,2 @@\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7} or {@link\n-      *     Opcodes#ASM8}.\n+      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n+      *     Opcodes#ASM8} or {@link Opcodes#ASM9}.\n@@ -100,1 +102,0 @@\n-    @SuppressWarnings(\"deprecation\")\n@@ -102,1 +103,2 @@\n-        if (api != Opcodes.ASM8\n+        if (api != Opcodes.ASM9\n+                && api != Opcodes.ASM8\n@@ -106,2 +108,1 @@\n-                && api != Opcodes.ASM4\n-                && api != Opcodes.ASM9_EXPERIMENTAL) {\n+                && api != Opcodes.ASM4) {\n@@ -110,3 +111,0 @@\n-        if (api == Opcodes.ASM9_EXPERIMENTAL) {\n-            Constants.checkAsmExperimental(this);\n-        }\n@@ -175,1 +173,1 @@\n-            throw new UnsupportedOperationException(\"This feature requires ASM6\");\n+            throw new UnsupportedOperationException(\"Module requires ASM6\");\n@@ -195,1 +193,1 @@\n-            throw new UnsupportedOperationException(\"This feature requires ASM7\");\n+            throw new UnsupportedOperationException(\"NestHost requires ASM7\");\n@@ -251,1 +249,1 @@\n-            throw new UnsupportedOperationException(\"This feature requires ASM5\");\n+            throw new UnsupportedOperationException(\"TypeAnnotation requires ASM5\");\n@@ -281,1 +279,1 @@\n-            throw new UnsupportedOperationException(\"This feature requires ASM7\");\n+            throw new UnsupportedOperationException(\"NestMember requires ASM7\");\n@@ -289,3 +287,2 @@\n-      * <b>Experimental, use at your own risk. This method will be renamed when it becomes stable, this\n-      * will break existing code using it<\/b>. Visits a permitted subclass. A permitted subclass is one\n-      * of the allowed subclasses of the current class.\n+      * Visits a permitted subclasses. A permitted subclass is one of the allowed subclasses of the\n+      * current class.\n@@ -294,1 +291,0 @@\n-      * @deprecated this API is experimental.\n@@ -296,4 +292,3 @@\n-    @Deprecated\n-    public void visitPermittedSubclassExperimental(final String permittedSubclass) {\n-        if (api != Opcodes.ASM9_EXPERIMENTAL) {\n-            throw new UnsupportedOperationException(\"This feature requires ASM9_EXPERIMENTAL\");\n+    public void visitPermittedSubclass(final String permittedSubclass) {\n+        if (api < Opcodes.ASM9) {\n+            throw new UnsupportedOperationException(\"PermittedSubclasses requires ASM9\");\n@@ -302,1 +297,1 @@\n-            cv.visitPermittedSubclassExperimental(permittedSubclass);\n+            cv.visitPermittedSubclass(permittedSubclass);\n@@ -338,1 +333,1 @@\n-            throw new UnsupportedOperationException(\"This feature requires ASM8\");\n+            throw new UnsupportedOperationException(\"Record requires ASM8\");\n@@ -413,1 +408,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/ClassVisitor.java","additions":22,"deletions":27,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -113,1 +114,1 @@\n-      * access flags, such as {@link Opcodes#ACC_DEPRECATED} or {}@link Opcodes#ACC_RECORD}, which are\n+      * access flags, such as {@link Opcodes#ACC_DEPRECATED} or {@link Opcodes#ACC_RECORD}, which are\n@@ -212,1 +213,1 @@\n-    private int numberOfPermittedSubclassClasses;\n+    private int numberOfPermittedSubclasses;\n@@ -215,1 +216,1 @@\n-    private ByteVector permittedSubclassClasses;\n+    private ByteVector permittedSubclasses;\n@@ -288,1 +289,1 @@\n-        super(\/* latest api = *\/ Opcodes.ASM8);\n+        super(\/* latest api = *\/ Opcodes.ASM9);\n@@ -406,6 +407,0 @@\n-    \/**\n-      * <b>Experimental, use at your own risk.<\/b>\n-      *\n-      * @param permittedSubclass the internal name of a permitted subclass.\n-      * @deprecated this API is experimental.\n-      *\/\n@@ -413,4 +408,3 @@\n-    @Deprecated\n-    public final void visitPermittedSubclassExperimental(final String permittedSubclass) {\n-        if (permittedSubclassClasses == null) {\n-            permittedSubclassClasses = new ByteVector();\n+    public final void visitPermittedSubclass(final String permittedSubclass) {\n+        if (permittedSubclasses == null) {\n+            permittedSubclasses = new ByteVector();\n@@ -418,2 +412,2 @@\n-        ++numberOfPermittedSubclassClasses;\n-        permittedSubclassClasses.putShort(symbolTable.addConstantClass(permittedSubclass).index);\n+        ++numberOfPermittedSubclasses;\n+        permittedSubclasses.putShort(symbolTable.addConstantClass(permittedSubclass).index);\n@@ -610,1 +604,1 @@\n-        if (permittedSubclassClasses != null) {\n+        if (permittedSubclasses != null) {\n@@ -612,1 +606,1 @@\n-            size += 8 + permittedSubclassClasses.length;\n+            size += 8 + permittedSubclasses.length;\n@@ -732,1 +726,1 @@\n-        if (permittedSubclassClasses != null) {\n+        if (permittedSubclasses != null) {\n@@ -735,3 +729,3 @@\n-                    .putInt(permittedSubclassClasses.length + 2)\n-                    .putShort(numberOfPermittedSubclassClasses)\n-                    .putByteArray(permittedSubclassClasses.data, 0, permittedSubclassClasses.length);\n+                    .putInt(permittedSubclasses.length + 2)\n+                    .putShort(numberOfPermittedSubclasses)\n+                    .putByteArray(permittedSubclasses.data, 0, permittedSubclasses.length);\n@@ -786,2 +780,2 @@\n-        numberOfPermittedSubclassClasses = 0;\n-        permittedSubclassClasses = null;\n+        numberOfPermittedSubclasses = 0;\n+        permittedSubclasses = null;\n@@ -1091,1 +1085,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/ClassWriter.java","additions":19,"deletions":25,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -209,1 +210,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/ConstantDynamic.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -252,1 +253,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/Constants.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -167,1 +168,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/Context.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -86,1 +87,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/CurrentFrame.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -122,1 +123,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/Edge.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -72,2 +73,2 @@\n-      * Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7} or {@link\n-      * Opcodes#ASM8}.\n+      * Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n+      * Opcodes#ASM8} or {@link Opcodes#ASM9}.\n@@ -84,2 +85,2 @@\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7} or {@link\n-      *     Opcodes#ASM8}.\n+      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n+      *     Opcodes#ASM8} or {@link Opcodes#ASM9}.\n@@ -100,1 +101,0 @@\n-    @SuppressWarnings(\"deprecation\")\n@@ -102,1 +102,2 @@\n-        if (api != Opcodes.ASM8\n+        if (api != Opcodes.ASM9\n+                && api != Opcodes.ASM8\n@@ -106,2 +107,1 @@\n-                && api != Opcodes.ASM4\n-                && api != Opcodes.ASM9_EXPERIMENTAL) {\n+                && api != Opcodes.ASM4) {\n@@ -110,3 +110,0 @@\n-        if (api == Opcodes.ASM9_EXPERIMENTAL) {\n-            Constants.checkAsmExperimental(this);\n-        }\n@@ -176,1 +173,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/FieldVisitor.java","additions":9,"deletions":12,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -158,1 +159,1 @@\n-        super(\/* latest api = *\/ Opcodes.ASM8);\n+        super(\/* latest api = *\/ Opcodes.ASM9);\n@@ -315,1 +316,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/FieldWriter.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -1504,1 +1505,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/Frame.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -219,1 +220,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/Handle.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -229,1 +230,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/Handler.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -653,1 +654,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/Label.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -130,1 +131,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/MethodTooLargeException.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -113,1 +114,0 @@\n-    @SuppressWarnings(\"deprecation\")\n@@ -115,1 +115,2 @@\n-        if (api != Opcodes.ASM8\n+        if (api != Opcodes.ASM9\n+                && api != Opcodes.ASM8\n@@ -119,2 +120,1 @@\n-                && api != Opcodes.ASM4\n-                && api != Opcodes.ASM9_EXPERIMENTAL) {\n+                && api != Opcodes.ASM4) {\n@@ -123,3 +123,0 @@\n-        if (api == Opcodes.ASM9_EXPERIMENTAL) {\n-            Constants.checkAsmExperimental(this);\n-        }\n@@ -817,1 +814,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/MethodVisitor.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -626,1 +627,1 @@\n-        super(\/* latest api = *\/ Opcodes.ASM8);\n+        super(\/* latest api = *\/ Opcodes.ASM9);\n@@ -2424,1 +2425,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/MethodWriter.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -99,1 +100,0 @@\n-    @SuppressWarnings(\"deprecation\")\n@@ -101,1 +101,2 @@\n-        if (api != Opcodes.ASM8\n+        if (api != Opcodes.ASM9\n+                && api != Opcodes.ASM8\n@@ -105,2 +106,1 @@\n-                && api != Opcodes.ASM4\n-                && api != Opcodes.ASM9_EXPERIMENTAL) {\n+                && api != Opcodes.ASM4) {\n@@ -109,3 +109,0 @@\n-        if (api == Opcodes.ASM9_EXPERIMENTAL) {\n-            Constants.checkAsmExperimental(this);\n-        }\n@@ -216,1 +213,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/ModuleVisitor.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -128,1 +129,1 @@\n-        super(\/* latest api = *\/ Opcodes.ASM8);\n+        super(\/* latest api = *\/ Opcodes.ASM9);\n@@ -284,1 +285,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/ModuleWriter.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -82,8 +83,1 @@\n-\n-    \/**\n-      * <i>Experimental, use at your own risk. This field will be renamed when it becomes stable, this\n-      * will break existing code using it. Only code compiled with --enable-preview can use this.<\/i>\n-      *\n-      * @deprecated This API is experimental.\n-      *\/\n-    @Deprecated int ASM9_EXPERIMENTAL = 1 << 24 | 9 << 16 | 0 << 8;\n+    int ASM9 = 9 << 16 | 0 << 8;\n@@ -166,1 +160,1 @@\n-      *     visitNewStuf(arg | SOURCE_DEPRECATED, ...);\n+      *     visitNewStuff(arg | SOURCE_DEPRECATED, ...);\n@@ -188,1 +182,1 @@\n-      *   <li>call visitOldSuff: in the call to super.visitOldStuff, the source is set to\n+      *   <li>call visitOldStuff: in the call to super.visitOldStuff, the source is set to\n@@ -592,1 +586,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/Opcodes.java","additions":5,"deletions":11,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -71,2 +72,2 @@\n-      * The ASM API version implemented by this visitor. The value of this field must be {@link\n-      * Opcodes#ASM8}.\n+      * The ASM API version implemented by this visitor. The value of this field must be one of {@link\n+      * Opcodes#ASM8} or {@link Opcodes#ASM9}.\n@@ -84,1 +85,2 @@\n-      * @param api the ASM API version implemented by this visitor. Must be {@link Opcodes#ASM8}.\n+      * @param api the ASM API version implemented by this visitor. Must be one of {@link Opcodes#ASM8}\n+      *     or {@link Opcodes#ASM9}.\n@@ -97,1 +99,0 @@\n-    @SuppressWarnings(\"deprecation\")\n@@ -100,1 +101,2 @@\n-        if (api != Opcodes.ASM8\n+        if (api != Opcodes.ASM9\n+                && api != Opcodes.ASM8\n@@ -104,2 +106,1 @@\n-                && api != Opcodes.ASM4\n-                && api != Opcodes.ASM9_EXPERIMENTAL) {\n+                && api != Opcodes.ASM4) {\n@@ -108,3 +109,0 @@\n-        if (api == Opcodes.ASM9_EXPERIMENTAL) {\n-            Constants.checkAsmExperimental(this);\n-        }\n@@ -182,1 +180,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/RecordComponentVisitor.java","additions":9,"deletions":11,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -128,1 +129,1 @@\n-        super(\/* latest api = *\/ Opcodes.ASM8);\n+        super(\/* latest api = *\/ Opcodes.ASM9);\n@@ -256,1 +257,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/RecordComponentWriter.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -274,1 +275,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/Symbol.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -1353,1 +1354,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/SymbolTable.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -926,1 +927,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/Type.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -231,1 +232,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/TypePath.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -466,1 +467,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/TypeReference.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -188,0 +189,1 @@\n+                    endConstructorBasicBlockWithoutSuccessor();\n@@ -192,0 +194,1 @@\n+                    endConstructorBasicBlockWithoutSuccessor();\n@@ -386,0 +389,1 @@\n+                    endConstructorBasicBlockWithoutSuccessor();\n@@ -487,1 +491,1 @@\n-        doVisitMethodInsn(opcode, descriptor);\n+        doVisitMethodInsn(opcode, name, descriptor);\n@@ -490,1 +494,1 @@\n-    private void doVisitMethodInsn(final int opcode, final String descriptor) {\n+    private void doVisitMethodInsn(final int opcode, final String name, final String descriptor) {\n@@ -505,1 +509,3 @@\n-                    if (value == UNINITIALIZED_THIS && !superClassConstructorCalled) {\n+                    if (value == UNINITIALIZED_THIS\n+                            && !superClassConstructorCalled\n+                            && name.equals(\"<init>\")) {\n@@ -531,1 +537,1 @@\n-        doVisitMethodInsn(Opcodes.INVOKEDYNAMIC, descriptor);\n+        doVisitMethodInsn(Opcodes.INVOKEDYNAMIC, name, descriptor);\n@@ -563,0 +569,3 @@\n+                case GOTO:\n+                    endConstructorBasicBlockWithoutSuccessor();\n+                    break;\n@@ -576,0 +585,1 @@\n+            endConstructorBasicBlockWithoutSuccessor();\n@@ -586,0 +596,1 @@\n+            endConstructorBasicBlockWithoutSuccessor();\n@@ -622,0 +633,13 @@\n+    private void endConstructorBasicBlockWithoutSuccessor() {\n+        \/\/ The next instruction is not reachable from this instruction. If it is dead code, we\n+        \/\/ should not try to simulate stack operations, and there is no need to insert advices\n+        \/\/ here. If it is reachable with a backward jump, the only possible case is that the super\n+        \/\/ class constructor has already been called (backward jumps are forbidden before it is\n+        \/\/ called). If it is reachable with a forward jump, there are two sub-cases. Either the\n+        \/\/ super class constructor has already been called when reaching the next instruction, or\n+        \/\/ it has not been called. But in this case there must be a forwardJumpStackFrames entry\n+        \/\/ for a Label designating the next instruction, and superClassConstructorCalled will be\n+        \/\/ reset to false there. We can therefore always reset this field to true here.\n+        superClassConstructorCalled = true;\n+    }\n+\n@@ -678,1 +702,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/AdviceAdapter.java","additions":29,"deletions":5,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -150,1 +151,1 @@\n-        this(\/* latest api = *\/ Opcodes.ASM8, owner, access, name, descriptor, methodVisitor);\n+        this(\/* latest api = *\/ Opcodes.ASM9, owner, access, name, descriptor, methodVisitor);\n@@ -160,2 +161,2 @@\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7} or {@link\n-      *     Opcodes#ASM8}.\n+      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n+      *     Opcodes#ASM8} or {@link Opcodes#ASM9}.\n@@ -940,1 +941,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/AnalyzerAdapter.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -71,0 +72,6 @@\n+    \/**\n+      * The descriptor of the visited annotation. May be {@literal null}, for instance for\n+      * AnnotationDefault.\n+      *\/\n+    protected final String descriptor;\n+\n@@ -78,1 +85,1 @@\n-      * @param annotationVisitor the annotation visitor this remapper must deleted to.\n+      * @param annotationVisitor the annotation visitor this remapper must delegate to.\n@@ -80,0 +87,1 @@\n+      * @deprecated use {@link #AnnotationRemapper(String, AnnotationVisitor, Remapper)} instead.\n@@ -81,0 +89,1 @@\n+    @Deprecated\n@@ -82,1 +91,15 @@\n-        this(\/* latest api = *\/ Opcodes.ASM8, annotationVisitor, remapper);\n+        this(\/* descriptor = *\/ null, annotationVisitor, remapper);\n+    }\n+\n+    \/**\n+      * Constructs a new {@link AnnotationRemapper}. <i>Subclasses must not use this constructor<\/i>.\n+      * Instead, they must use the {@link #AnnotationRemapper(int,String,AnnotationVisitor,Remapper)}\n+      * version.\n+      *\n+      * @param descriptor the descriptor of the visited annotation. May be {@literal null}.\n+      * @param annotationVisitor the annotation visitor this remapper must delegate to.\n+      * @param remapper the remapper to use to remap the types in the visited annotation.\n+      *\/\n+    public AnnotationRemapper(\n+            final String descriptor, final AnnotationVisitor annotationVisitor, final Remapper remapper) {\n+        this(\/* latest api = *\/ Opcodes.ASM9, descriptor, annotationVisitor, remapper);\n@@ -90,3 +113,3 @@\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM6}, {@link jdk.internal.org.objectweb.asm.Opcodes#ASM7} or {@link\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM8}\n-      * @param annotationVisitor the annotation visitor this remapper must deleted to.\n+      *     jdk.internal.org.objectweb.asm.Opcodes#ASM6}, {@link jdk.internal.org.objectweb.asm.Opcodes#ASM7}, {@link\n+      *     jdk.internal.org.objectweb.asm.Opcodes#ASM8} or {@link jdk.internal.org.objectweb.asm.Opcodes#ASM9}.\n+      * @param annotationVisitor the annotation visitor this remapper must delegate to.\n@@ -94,0 +117,1 @@\n+      * @deprecated use {@link #AnnotationRemapper(int, String, AnnotationVisitor, Remapper)} instead.\n@@ -95,0 +119,1 @@\n+    @Deprecated\n@@ -97,0 +122,19 @@\n+        this(api, \/* descriptor = *\/ null, annotationVisitor, remapper);\n+    }\n+\n+    \/**\n+      * Constructs a new {@link AnnotationRemapper}.\n+      *\n+      * @param api the ASM API version supported by this remapper. Must be one of {@link\n+      *     jdk.internal.org.objectweb.asm.Opcodes#ASM4}, {@link jdk.internal.org.objectweb.asm.Opcodes#ASM5}, {@link\n+      *     jdk.internal.org.objectweb.asm.Opcodes#ASM6}, {@link jdk.internal.org.objectweb.asm.Opcodes#ASM7}, {@link\n+      *     jdk.internal.org.objectweb.asm.Opcodes#ASM8} or {@link jdk.internal.org.objectweb.asm.Opcodes#ASM9}.\n+      * @param descriptor the descriptor of the visited annotation. May be {@literal null}.\n+      * @param annotationVisitor the annotation visitor this remapper must delegate to.\n+      * @param remapper the remapper to use to remap the types in the visited annotation.\n+      *\/\n+    protected AnnotationRemapper(\n+            final int api,\n+            final String descriptor,\n+            final AnnotationVisitor annotationVisitor,\n+            final Remapper remapper) {\n@@ -98,0 +142,1 @@\n+        this.descriptor = descriptor;\n@@ -103,1 +148,1 @@\n-        super.visit(name, remapper.mapValue(value));\n+        super.visit(mapAnnotationAttributeName(name), remapper.mapValue(value));\n@@ -108,1 +153,1 @@\n-        super.visitEnum(name, remapper.mapDesc(descriptor), value);\n+        super.visitEnum(mapAnnotationAttributeName(name), remapper.mapDesc(descriptor), value);\n@@ -113,1 +158,2 @@\n-        AnnotationVisitor annotationVisitor = super.visitAnnotation(name, remapper.mapDesc(descriptor));\n+        AnnotationVisitor annotationVisitor =\n+                super.visitAnnotation(mapAnnotationAttributeName(name), remapper.mapDesc(descriptor));\n@@ -117,1 +163,3 @@\n-            return annotationVisitor == av ? this : createAnnotationRemapper(annotationVisitor);\n+            return annotationVisitor == av\n+                    ? this\n+                    : createAnnotationRemapper(descriptor, annotationVisitor);\n@@ -123,1 +171,1 @@\n-        AnnotationVisitor annotationVisitor = super.visitArray(name);\n+        AnnotationVisitor annotationVisitor = super.visitArray(mapAnnotationAttributeName(name));\n@@ -127,1 +175,3 @@\n-            return annotationVisitor == av ? this : createAnnotationRemapper(annotationVisitor);\n+            return annotationVisitor == av\n+                    ? this\n+                    : createAnnotationRemapper(\/* descriptor = *\/ null, annotationVisitor);\n@@ -137,0 +187,1 @@\n+      * @deprecated use {@link #createAnnotationRemapper(String, AnnotationVisitor)} instead.\n@@ -138,0 +189,1 @@\n+    @Deprecated\n@@ -139,1 +191,53 @@\n-        return new AnnotationRemapper(api, annotationVisitor, remapper);\n+        return new AnnotationRemapper(api, \/* descriptor = *\/ null, annotationVisitor, remapper);\n+    }\n+\n+    \/**\n+      * Constructs a new remapper for annotations. The default implementation of this method returns a\n+      * new {@link AnnotationRemapper}.\n+      *\n+      * @param descriptor the descriptor of the visited annotation.\n+      * @param annotationVisitor the AnnotationVisitor the remapper must delegate to.\n+      * @return the newly created remapper.\n+      *\/\n+    protected AnnotationVisitor createAnnotationRemapper(\n+            final String descriptor, final AnnotationVisitor annotationVisitor) {\n+        return new AnnotationRemapper(api, descriptor, annotationVisitor, remapper)\n+                .orDeprecatedValue(createAnnotationRemapper(annotationVisitor));\n+    }\n+\n+    \/**\n+      * Returns either this object, or the given one. If the given object is equal to the object\n+      * returned by the default implementation of the deprecated createAnnotationRemapper method,\n+      * meaning that this method has not been overridden (or only in minor ways, for instance to add\n+      * logging), then we can return this object instead, supposed to have been created by the new\n+      * createAnnotationRemapper method. Otherwise we must return the given object.\n+      *\n+      * @param deprecatedAnnotationVisitor the result of a call to the deprecated\n+      *     createAnnotationRemapper method.\n+      * @return either this object, or the given one.\n+      *\/\n+    final AnnotationVisitor orDeprecatedValue(final AnnotationVisitor deprecatedAnnotationVisitor) {\n+        if (deprecatedAnnotationVisitor.getClass() == getClass()) {\n+            AnnotationRemapper deprecatedAnnotationRemapper =\n+                    (AnnotationRemapper) deprecatedAnnotationVisitor;\n+            if (deprecatedAnnotationRemapper.api == api\n+                    && deprecatedAnnotationRemapper.av == av\n+                    && deprecatedAnnotationRemapper.remapper == remapper) {\n+                return this;\n+            }\n+        }\n+        return deprecatedAnnotationVisitor;\n+    }\n+\n+    \/**\n+      * Maps an annotation attribute name with the remapper. Returns the original name unchanged if the\n+      * internal name of the annotation is {@literal null}.\n+      *\n+      * @param name the name of the annotation attribute.\n+      * @return the new name of the annotation attribute.\n+      *\/\n+    private String mapAnnotationAttributeName(final String name) {\n+        if (descriptor == null) {\n+            return name;\n+        }\n+        return remapper.mapAnnotationAttributeName(descriptor, name);\n@@ -141,1 +245,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/AnnotationRemapper.java","additions":117,"deletions":13,"binary":false,"changes":130,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -103,1 +104,1 @@\n-      * @param classVisitor the class visitor this remapper must deleted to.\n+      * @param classVisitor the class visitor this remapper must delegate to.\n@@ -107,1 +108,1 @@\n-        this(\/* latest api = *\/ Opcodes.ASM8, classVisitor, remapper);\n+        this(\/* latest api = *\/ Opcodes.ASM9, classVisitor, remapper);\n@@ -115,3 +116,3 @@\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM6}, {@link jdk.internal.org.objectweb.asm.Opcodes#ASM7} or {@link\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM8}.\n-      * @param classVisitor the class visitor this remapper must deleted to.\n+      *     jdk.internal.org.objectweb.asm.Opcodes#ASM6}, {@link jdk.internal.org.objectweb.asm.Opcodes#ASM7}, {@link\n+      *     jdk.internal.org.objectweb.asm.Opcodes#ASM8} or {@link jdk.internal.org.objectweb.asm.Opcodes#ASM9}.\n+      * @param classVisitor the class visitor this remapper must delegate to.\n@@ -153,1 +154,3 @@\n-        return annotationVisitor == null ? null : createAnnotationRemapper(annotationVisitor);\n+        return annotationVisitor == null\n+                ? null\n+                : createAnnotationRemapper(descriptor, annotationVisitor);\n@@ -161,1 +164,3 @@\n-        return annotationVisitor == null ? null : createAnnotationRemapper(annotationVisitor);\n+        return annotationVisitor == null\n+                ? null\n+                : createAnnotationRemapper(descriptor, annotationVisitor);\n@@ -252,6 +257,0 @@\n-    \/**\n-      * <b>Experimental, use at your own risk.<\/b>.\n-      *\n-      * @param permittedSubclass the internal name of a permitted subclass.\n-      * @deprecated this API is experimental.\n-      *\/\n@@ -259,3 +258,2 @@\n-    @Deprecated\n-    public void visitPermittedSubclassExperimental(final String permittedSubclass) {\n-        super.visitPermittedSubclassExperimental(remapper.mapType(permittedSubclass));\n+    public void visitPermittedSubclass(final String permittedSubclass) {\n+        super.visitPermittedSubclass(remapper.mapType(permittedSubclass));\n@@ -292,0 +290,1 @@\n+      * @deprecated use {@link #createAnnotationRemapper(String, AnnotationVisitor)} instead.\n@@ -293,0 +292,1 @@\n+    @Deprecated\n@@ -294,1 +294,15 @@\n-        return new AnnotationRemapper(api, annotationVisitor, remapper);\n+        return new AnnotationRemapper(api, \/* descriptor = *\/ null, annotationVisitor, remapper);\n+    }\n+\n+    \/**\n+      * Constructs a new remapper for annotations. The default implementation of this method returns a\n+      * new {@link AnnotationRemapper}.\n+      *\n+      * @param descriptor the descriptor of the visited annotation.\n+      * @param annotationVisitor the AnnotationVisitor the remapper must delegate to.\n+      * @return the newly created remapper.\n+      *\/\n+    protected AnnotationVisitor createAnnotationRemapper(\n+            final String descriptor, final AnnotationVisitor annotationVisitor) {\n+        return new AnnotationRemapper(api, descriptor, annotationVisitor, remapper)\n+                .orDeprecatedValue(createAnnotationRemapper(annotationVisitor));\n@@ -319,1 +333,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/ClassRemapper.java","additions":32,"deletions":18,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -81,1 +82,1 @@\n-        this(\/* latest api = *\/ Opcodes.ASM8, methodVisitor);\n+        this(\/* latest api = *\/ Opcodes.ASM9, methodVisitor);\n@@ -238,1 +239,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/CodeSizeEvaluator.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -80,1 +81,1 @@\n-      * @param fieldVisitor the field visitor this remapper must deleted to.\n+      * @param fieldVisitor the field visitor this remapper must delegate to.\n@@ -84,1 +85,1 @@\n-        this(\/* latest api = *\/ Opcodes.ASM8, fieldVisitor, remapper);\n+        this(\/* latest api = *\/ Opcodes.ASM9, fieldVisitor, remapper);\n@@ -90,4 +91,4 @@\n-      * @param api the ASM API version supported by this remapper. Must be one of {@link\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM4}, {@link jdk.internal.org.objectweb.asm.Opcodes#ASM5}, {@link\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM6}, {@link Opcodes#ASM7} or {@link Opcodes#ASM8}.\n-      * @param fieldVisitor the field visitor this remapper must deleted to.\n+      * @param api the ASM API version supported by this remapper. Must be one of {@link Opcodes#ASM4},\n+      *     {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link Opcodes#ASM8}, or\n+      *     {@link Opcodes#ASM9}.\n+      * @param fieldVisitor the field visitor this remapper must delegate to.\n@@ -105,1 +106,3 @@\n-        return annotationVisitor == null ? null : createAnnotationRemapper(annotationVisitor);\n+        return annotationVisitor == null\n+                ? null\n+                : createAnnotationRemapper(descriptor, annotationVisitor);\n@@ -113,1 +116,3 @@\n-        return annotationVisitor == null ? null : createAnnotationRemapper(annotationVisitor);\n+        return annotationVisitor == null\n+                ? null\n+                : createAnnotationRemapper(descriptor, annotationVisitor);\n@@ -122,0 +127,1 @@\n+      * @deprecated use {@link #createAnnotationRemapper(String, AnnotationVisitor)} instead.\n@@ -123,0 +129,1 @@\n+    @Deprecated\n@@ -124,1 +131,15 @@\n-        return new AnnotationRemapper(api, annotationVisitor, remapper);\n+        return new AnnotationRemapper(api, \/* descriptor = *\/ null, annotationVisitor, remapper);\n+    }\n+\n+    \/**\n+      * Constructs a new remapper for annotations. The default implementation of this method returns a\n+      * new {@link AnnotationRemapper}.\n+      *\n+      * @param descriptor the descriptor of the visited annotation.\n+      * @param annotationVisitor the AnnotationVisitor the remapper must delegate to.\n+      * @return the newly created remapper.\n+      *\/\n+    protected AnnotationVisitor createAnnotationRemapper(\n+            final String descriptor, final AnnotationVisitor annotationVisitor) {\n+        return new AnnotationRemapper(api, descriptor, annotationVisitor, remapper)\n+                .orDeprecatedValue(createAnnotationRemapper(annotationVisitor));\n@@ -126,1 +147,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/FieldRemapper.java","additions":31,"deletions":10,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -235,1 +236,1 @@\n-        this(\/* latest api = *\/ Opcodes.ASM8, methodVisitor, access, name, descriptor);\n+        this(\/* latest api = *\/ Opcodes.ASM9, methodVisitor, access, name, descriptor);\n@@ -245,2 +246,2 @@\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7} or {@link\n-      *     Opcodes#ASM8}.\n+      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n+      *     Opcodes#ASM8} or {@link Opcodes#ASM9}.\n@@ -1400,1 +1401,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/GeneratorAdapter.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -86,1 +87,1 @@\n-        this(\/* latest api = *\/ Opcodes.ASM8, methodVisitor);\n+        this(\/* latest api = *\/ Opcodes.ASM9, methodVisitor);\n@@ -96,2 +97,2 @@\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7} or {@link\n-      *     Opcodes#ASM8}.\n+      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n+      *     Opcodes#ASM8} or {@link Opcodes#ASM9}.\n@@ -1124,1 +1125,1 @@\n-                throw new IllegalArgumentException(\"INVOKEVIRTUAL on interfaces require ASM 5\");\n+                throw new UnsupportedOperationException(\"INVOKEVIRTUAL on interfaces require ASM 5\");\n@@ -1162,1 +1163,1 @@\n-                throw new IllegalArgumentException(\"INVOKESPECIAL on interfaces require ASM 5\");\n+                throw new UnsupportedOperationException(\"INVOKESPECIAL on interfaces require ASM 5\");\n@@ -1200,1 +1201,1 @@\n-                throw new IllegalArgumentException(\"INVOKESTATIC on interfaces require ASM 5\");\n+                throw new UnsupportedOperationException(\"INVOKESTATIC on interfaces require ASM 5\");\n@@ -1331,1 +1332,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/InstructionAdapter.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -133,1 +134,1 @@\n-                \/* latest api = *\/ Opcodes.ASM8,\n+                \/* latest api = *\/ Opcodes.ASM9,\n@@ -149,2 +150,2 @@\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7} or {@link\n-      *     Opcodes#ASM8}.\n+      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n+      *     Opcodes#ASM8} or {@link Opcodes#ASM9}.\n@@ -602,1 +603,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/JSRInlinerAdapter.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -115,1 +116,1 @@\n-        this(\/* latest api = *\/ Opcodes.ASM8, access, descriptor, methodVisitor);\n+        this(\/* latest api = *\/ Opcodes.ASM9, access, descriptor, methodVisitor);\n@@ -125,2 +126,2 @@\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7} or {@link\n-      *     Opcodes#ASM8}.\n+      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n+      *     Opcodes#ASM8} or {@link Opcodes#ASM9}.\n@@ -383,1 +384,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/LocalVariablesSorter.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -293,1 +294,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/Method.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -82,1 +83,1 @@\n-      * @param methodVisitor the method visitor this remapper must deleted to.\n+      * @param methodVisitor the method visitor this remapper must delegate to.\n@@ -86,1 +87,1 @@\n-        this(\/* latest api = *\/ Opcodes.ASM8, methodVisitor, remapper);\n+        this(\/* latest api = *\/ Opcodes.ASM9, methodVisitor, remapper);\n@@ -93,4 +94,4 @@\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM4}, {@link jdk.internal.org.objectweb.asm.Opcodes#ASM5} or {@link\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM6}, {@link jdk.internal.org.objectweb.asm.Opcodes#ASM7} or {@link\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM8}.\n-      * @param methodVisitor the method visitor this remapper must deleted to.\n+      *     jdk.internal.org.objectweb.asm.Opcodes#ASM4}, {@link jdk.internal.org.objectweb.asm.Opcodes#ASM5}, {@link\n+      *     jdk.internal.org.objectweb.asm.Opcodes#ASM6}, {@link jdk.internal.org.objectweb.asm.Opcodes#ASM7}, {@link\n+      *     jdk.internal.org.objectweb.asm.Opcodes#ASM8} or {@link jdk.internal.org.objectweb.asm.Opcodes#ASM9}.\n+      * @param methodVisitor the method visitor this remapper must delegate to.\n@@ -110,1 +111,1 @@\n-                : createAnnotationRemapper(annotationVisitor);\n+                : createAnnotationRemapper(\/* descriptor = *\/ null, annotationVisitor);\n@@ -119,1 +120,1 @@\n-                : createAnnotationRemapper(annotationVisitor);\n+                : createAnnotationRemapper(descriptor, annotationVisitor);\n@@ -129,1 +130,1 @@\n-                : createAnnotationRemapper(annotationVisitor);\n+                : createAnnotationRemapper(descriptor, annotationVisitor);\n@@ -139,1 +140,1 @@\n-                : createAnnotationRemapper(annotationVisitor);\n+                : createAnnotationRemapper(descriptor, annotationVisitor);\n@@ -243,1 +244,1 @@\n-                : createAnnotationRemapper(annotationVisitor);\n+                : createAnnotationRemapper(descriptor, annotationVisitor);\n@@ -259,1 +260,1 @@\n-                : createAnnotationRemapper(annotationVisitor);\n+                : createAnnotationRemapper(descriptor, annotationVisitor);\n@@ -293,1 +294,1 @@\n-                : createAnnotationRemapper(annotationVisitor);\n+                : createAnnotationRemapper(descriptor, annotationVisitor);\n@@ -302,0 +303,1 @@\n+      * @deprecated use {@link #createAnnotationRemapper(String, AnnotationVisitor)} instead.\n@@ -303,0 +305,1 @@\n+    @Deprecated\n@@ -304,1 +307,15 @@\n-        return new AnnotationRemapper(api, annotationVisitor, remapper);\n+        return new AnnotationRemapper(api, \/* descriptor = *\/ null, annotationVisitor, remapper);\n+    }\n+\n+    \/**\n+      * Constructs a new remapper for annotations. The default implementation of this method returns a\n+      * new {@link AnnotationRemapper}.\n+      *\n+      * @param descriptor the descriptor of the visited annotation.\n+      * @param annotationVisitor the AnnotationVisitor the remapper must delegate to.\n+      * @return the newly created remapper.\n+      *\/\n+    protected AnnotationVisitor createAnnotationRemapper(\n+            final String descriptor, final AnnotationVisitor annotationVisitor) {\n+        return new AnnotationRemapper(api, descriptor, annotationVisitor, remapper)\n+                .orDeprecatedValue(createAnnotationRemapper(annotationVisitor));\n@@ -306,1 +323,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/MethodRemapper.java","additions":32,"deletions":15,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -136,1 +137,1 @@\n-                hash[j] = (byte) (classReader.readByte(currentOffset) & 0xFF);\n+                hash[j] = (byte) classReader.readByte(currentOffset);\n@@ -169,1 +170,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/ModuleHashesAttribute.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -78,1 +79,1 @@\n-      * @param moduleVisitor the module visitor this remapper must deleted to.\n+      * @param moduleVisitor the module visitor this remapper must delegate to.\n@@ -82,1 +83,1 @@\n-        this(\/* latest api = *\/ Opcodes.ASM8, moduleVisitor, remapper);\n+        this(\/* latest api = *\/ Opcodes.ASM9, moduleVisitor, remapper);\n@@ -90,3 +91,3 @@\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM6}, {@link jdk.internal.org.objectweb.asm.Opcodes#ASM7} or {@link\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM8}.\n-      * @param moduleVisitor the module visitor this remapper must deleted to.\n+      *     jdk.internal.org.objectweb.asm.Opcodes#ASM6}, {@link jdk.internal.org.objectweb.asm.Opcodes#ASM7}, {@link\n+      *     jdk.internal.org.objectweb.asm.Opcodes#ASM8} or {@link jdk.internal.org.objectweb.asm.Opcodes#ASM9}.\n+      * @param moduleVisitor the module visitor this remapper must delegate to.\n@@ -153,1 +154,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/ModuleRemapper.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -143,1 +144,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/ModuleResolutionAttribute.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -117,1 +118,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/ModuleTargetAttribute.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -86,1 +87,1 @@\n-        this(\/* latest api = *\/ Opcodes.ASM8, recordComponentVisitor, remapper);\n+        this(\/* latest api = *\/ Opcodes.ASM9, recordComponentVisitor, remapper);\n@@ -92,2 +93,2 @@\n-      * @param api the ASM API version supported by this remapper. Must be {@link\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM8}.\n+      * @param api the ASM API version supported by this remapper. Must be one of {@link\n+      *     jdk.internal.org.objectweb.asm.Opcodes#ASM8} or {@link jdk.internal.org.objectweb.asm.Opcodes#ASM9}.\n@@ -107,1 +108,3 @@\n-        return annotationVisitor == null ? null : createAnnotationRemapper(annotationVisitor);\n+        return annotationVisitor == null\n+                ? null\n+                : createAnnotationRemapper(descriptor, annotationVisitor);\n@@ -115,1 +118,3 @@\n-        return annotationVisitor == null ? null : createAnnotationRemapper(annotationVisitor);\n+        return annotationVisitor == null\n+                ? null\n+                : createAnnotationRemapper(descriptor, annotationVisitor);\n@@ -124,0 +129,1 @@\n+      * @deprecated use {@link #createAnnotationRemapper(String, AnnotationVisitor)} instead.\n@@ -125,0 +131,1 @@\n+    @Deprecated\n@@ -126,1 +133,15 @@\n-        return new AnnotationRemapper(api, annotationVisitor, remapper);\n+        return new AnnotationRemapper(api, \/* descriptor = *\/ null, annotationVisitor, remapper);\n+    }\n+\n+    \/**\n+      * Constructs a new remapper for annotations. The default implementation of this method returns a\n+      * new {@link AnnotationRemapper}.\n+      *\n+      * @param descriptor the descriptor sof the visited annotation.\n+      * @param annotationVisitor the AnnotationVisitor the remapper must delegate to.\n+      * @return the newly created remapper.\n+      *\/\n+    protected AnnotationVisitor createAnnotationRemapper(\n+            final String descriptor, final AnnotationVisitor annotationVisitor) {\n+        return new AnnotationRemapper(api, descriptor, annotationVisitor, remapper)\n+                .orDeprecatedValue(createAnnotationRemapper(annotationVisitor));\n@@ -128,1 +149,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/RecordComponentRemapper.java","additions":28,"deletions":7,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -269,0 +270,12 @@\n+    \/**\n+      * Maps an annotation attribute name. The default implementation of this method returns the given\n+      * name, unchanged. Subclasses can override.\n+      *\n+      * @param descriptor the descriptor of the annotation class.\n+      * @param name the name of the annotation attribute.\n+      * @return the new name of the annotation attribute.\n+      *\/\n+    public String mapAnnotationAttributeName(final String descriptor, final String name) {\n+        return name;\n+    }\n+\n@@ -378,1 +391,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/Remapper.java","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-        this(Opcodes.ASM6, annotationVisitor, remapper);\n+        this(Opcodes.ASM9, annotationVisitor, remapper);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/RemappingAnnotationAdapter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,197 +0,0 @@\n-\/*\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * This file is available under and governed by the GNU General Public\n- * License version 2 only, as published by the Free Software Foundation.\n- * However, the following notice accompanied the original version of this\n- * file:\n- *\n- * ASM: a very small and fast Java bytecode manipulation framework\n- * Copyright (c) 2000-2011 INRIA, France Telecom\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- * 1. Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- * 2. Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in the\n- *    documentation and\/or other materials provided with the distribution.\n- * 3. Neither the name of the copyright holders nor the names of its\n- *    contributors may be used to endorse or promote products derived from\n- *    this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n- * THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package jdk.internal.org.objectweb.asm.commons;\n-\n-import jdk.internal.org.objectweb.asm.AnnotationVisitor;\n-import jdk.internal.org.objectweb.asm.ClassVisitor;\n-import jdk.internal.org.objectweb.asm.FieldVisitor;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.ModuleVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.TypePath;\n-\n-\/**\n- * A {@link ClassVisitor} for type remapping.\n- *\n- * @deprecated use {@link ClassRemapper} instead.\n- * @author Eugene Kuleshov\n- *\/\n-@Deprecated\n-public class RemappingClassAdapter extends ClassVisitor {\n-\n-    protected final Remapper remapper;\n-\n-    protected String className;\n-\n-    public RemappingClassAdapter(final ClassVisitor classVisitor, final Remapper remapper) {\n-        this(Opcodes.ASM6, classVisitor, remapper);\n-    }\n-\n-    protected RemappingClassAdapter(\n-            final int api, final ClassVisitor classVisitor, final Remapper remapper) {\n-        super(api, classVisitor);\n-        this.remapper = remapper;\n-    }\n-\n-    @Override\n-    public void visit(\n-            final int version,\n-            final int access,\n-            final String name,\n-            final String signature,\n-            final String superName,\n-            final String[] interfaces) {\n-        this.className = name;\n-        super.visit(\n-                version,\n-                access,\n-                remapper.mapType(name),\n-                remapper.mapSignature(signature, false),\n-                remapper.mapType(superName),\n-                interfaces == null ? null : remapper.mapTypes(interfaces));\n-    }\n-\n-    @Override\n-    public ModuleVisitor visitModule(final String name, final int flags, final String version) {\n-        throw new RuntimeException(\"RemappingClassAdapter is deprecated, use ClassRemapper instead\");\n-    }\n-\n-    @Override\n-    public AnnotationVisitor visitAnnotation(final String descriptor, final boolean visible) {\n-        AnnotationVisitor annotationVisitor =\n-                super.visitAnnotation(remapper.mapDesc(descriptor), visible);\n-        return annotationVisitor == null ? null : createRemappingAnnotationAdapter(annotationVisitor);\n-    }\n-\n-    @Override\n-    public AnnotationVisitor visitTypeAnnotation(\n-            final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {\n-        AnnotationVisitor annotationVisitor =\n-                super.visitTypeAnnotation(typeRef, typePath, remapper.mapDesc(descriptor), visible);\n-        return annotationVisitor == null ? null : createRemappingAnnotationAdapter(annotationVisitor);\n-    }\n-\n-    @Override\n-    public FieldVisitor visitField(\n-            final int access,\n-            final String name,\n-            final String descriptor,\n-            final String signature,\n-            final Object value) {\n-        FieldVisitor fieldVisitor =\n-                super.visitField(\n-                        access,\n-                        remapper.mapFieldName(className, name, descriptor),\n-                        remapper.mapDesc(descriptor),\n-                        remapper.mapSignature(signature, true),\n-                        remapper.mapValue(value));\n-        return fieldVisitor == null ? null : createRemappingFieldAdapter(fieldVisitor);\n-    }\n-\n-    @Override\n-    public MethodVisitor visitMethod(\n-            final int access,\n-            final String name,\n-            final String descriptor,\n-            final String signature,\n-            final String[] exceptions) {\n-        String newDescriptor = remapper.mapMethodDesc(descriptor);\n-        MethodVisitor methodVisitor =\n-                super.visitMethod(\n-                        access,\n-                        remapper.mapMethodName(className, name, descriptor),\n-                        newDescriptor,\n-                        remapper.mapSignature(signature, false),\n-                        exceptions == null ? null : remapper.mapTypes(exceptions));\n-        return methodVisitor == null\n-                ? null\n-                : createRemappingMethodAdapter(access, newDescriptor, methodVisitor);\n-    }\n-\n-    @Override\n-    public void visitInnerClass(\n-            final String name, final String outerName, final String innerName, final int access) {\n-        super.visitInnerClass(\n-                remapper.mapType(name),\n-                outerName == null ? null : remapper.mapType(outerName),\n-                innerName,\n-                access);\n-    }\n-\n-    @Override\n-    public void visitOuterClass(final String owner, final String name, final String descriptor) {\n-        super.visitOuterClass(\n-                remapper.mapType(owner),\n-                name == null ? null : remapper.mapMethodName(owner, name, descriptor),\n-                descriptor == null ? null : remapper.mapMethodDesc(descriptor));\n-    }\n-\n-    protected FieldVisitor createRemappingFieldAdapter(final FieldVisitor fieldVisitor) {\n-        return new RemappingFieldAdapter(fieldVisitor, remapper);\n-    }\n-\n-    protected MethodVisitor createRemappingMethodAdapter(\n-            final int access, final String newDescriptor, final MethodVisitor methodVisitior) {\n-        return new RemappingMethodAdapter(access, newDescriptor, methodVisitior, remapper);\n-    }\n-\n-    protected AnnotationVisitor createRemappingAnnotationAdapter(final AnnotationVisitor av) {\n-        return new RemappingAnnotationAdapter(av, remapper);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/RemappingClassAdapter.java","additions":0,"deletions":197,"binary":false,"changes":197,"status":"deleted"},{"patch":"@@ -1,104 +0,0 @@\n-\/*\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * This file is available under and governed by the GNU General Public\n- * License version 2 only, as published by the Free Software Foundation.\n- * However, the following notice accompanied the original version of this\n- * file:\n- *\n- * ASM: a very small and fast Java bytecode manipulation framework\n- * Copyright (c) 2000-2011 INRIA, France Telecom\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- * 1. Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- * 2. Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in the\n- *    documentation and\/or other materials provided with the distribution.\n- * 3. Neither the name of the copyright holders nor the names of its\n- *    contributors may be used to endorse or promote products derived from\n- *    this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n- * THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package jdk.internal.org.objectweb.asm.commons;\n-\n-import jdk.internal.org.objectweb.asm.AnnotationVisitor;\n-import jdk.internal.org.objectweb.asm.FieldVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.TypePath;\n-\n-\/**\n- * A {@link FieldVisitor} adapter for type remapping.\n- *\n- * @deprecated use {@link FieldRemapper} instead.\n- * @author Eugene Kuleshov\n- *\/\n-@Deprecated\n-public class RemappingFieldAdapter extends FieldVisitor {\n-\n-    private final Remapper remapper;\n-\n-    public RemappingFieldAdapter(final FieldVisitor fieldVisitor, final Remapper remapper) {\n-        this(Opcodes.ASM6, fieldVisitor, remapper);\n-    }\n-\n-    protected RemappingFieldAdapter(\n-            final int api, final FieldVisitor fieldVisitor, final Remapper remapper) {\n-        super(api, fieldVisitor);\n-        this.remapper = remapper;\n-    }\n-\n-    @Override\n-    public AnnotationVisitor visitAnnotation(final String descriptor, final boolean visible) {\n-        AnnotationVisitor annotationVisitor = fv.visitAnnotation(remapper.mapDesc(descriptor), visible);\n-        return annotationVisitor == null\n-                ? null\n-                : new RemappingAnnotationAdapter(annotationVisitor, remapper);\n-    }\n-\n-    @Override\n-    public AnnotationVisitor visitTypeAnnotation(\n-            final int typeRef, final TypePath typePath, final String descriptor, final boolean visible) {\n-        AnnotationVisitor annotationVisitor =\n-                super.visitTypeAnnotation(typeRef, typePath, remapper.mapDesc(descriptor), visible);\n-        return annotationVisitor == null\n-                ? null\n-                : new RemappingAnnotationAdapter(annotationVisitor, remapper);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/RemappingFieldAdapter.java","additions":0,"deletions":104,"binary":false,"changes":104,"status":"deleted"},{"patch":"@@ -84,1 +84,1 @@\n-        this(Opcodes.ASM6, access, descriptor, methodVisitor, remapper);\n+        this(Opcodes.ASM9, access, descriptor, methodVisitor, remapper);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/RemappingMethodAdapter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,187 +0,0 @@\n-\/*\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * This file is available under and governed by the GNU General Public\n- * License version 2 only, as published by the Free Software Foundation.\n- * However, the following notice accompanied the original version of this\n- * file:\n- *\n- * ASM: a very small and fast Java bytecode manipulation framework\n- * Copyright (c) 2000-2011 INRIA, France Telecom\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- * 1. Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- * 2. Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in the\n- *    documentation and\/or other materials provided with the distribution.\n- * 3. Neither the name of the copyright holders nor the names of its\n- *    contributors may be used to endorse or promote products derived from\n- *    this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n- * THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package jdk.internal.org.objectweb.asm.commons;\n-\n-import jdk.internal.org.objectweb.asm.Opcodes;\n-import jdk.internal.org.objectweb.asm.signature.SignatureVisitor;\n-\n-\/**\n- * A {@link SignatureVisitor} adapter for type mapping.\n- *\n- * @deprecated use {@link SignatureRemapper} instead.\n- * @author Eugene Kuleshov\n- *\/\n-@Deprecated\n-public class RemappingSignatureAdapter extends SignatureVisitor {\n-\n-    private final SignatureVisitor signatureVisitor;\n-\n-    private final Remapper remapper;\n-\n-    private String className;\n-\n-    public RemappingSignatureAdapter(\n-            final SignatureVisitor signatureVisitor, final Remapper remapper) {\n-        this(Opcodes.ASM6, signatureVisitor, remapper);\n-    }\n-\n-    protected RemappingSignatureAdapter(\n-            final int api, final SignatureVisitor signatureVisitor, final Remapper remapper) {\n-        super(api);\n-        this.signatureVisitor = signatureVisitor;\n-        this.remapper = remapper;\n-    }\n-\n-    @Override\n-    public void visitClassType(final String name) {\n-        className = name;\n-        signatureVisitor.visitClassType(remapper.mapType(name));\n-    }\n-\n-    @Override\n-    public void visitInnerClassType(final String name) {\n-        String remappedOuter = remapper.mapType(className) + '$';\n-        className = className + '$' + name;\n-        String remappedName = remapper.mapType(className);\n-        int index =\n-                remappedName.startsWith(remappedOuter)\n-                        ? remappedOuter.length()\n-                        : remappedName.lastIndexOf('$') + 1;\n-        signatureVisitor.visitInnerClassType(remappedName.substring(index));\n-    }\n-\n-    @Override\n-    public void visitFormalTypeParameter(final String name) {\n-        signatureVisitor.visitFormalTypeParameter(name);\n-    }\n-\n-    @Override\n-    public void visitTypeVariable(final String name) {\n-        signatureVisitor.visitTypeVariable(name);\n-    }\n-\n-    @Override\n-    public SignatureVisitor visitArrayType() {\n-        signatureVisitor.visitArrayType();\n-        return this;\n-    }\n-\n-    @Override\n-    public void visitBaseType(final char descriptor) {\n-        signatureVisitor.visitBaseType(descriptor);\n-    }\n-\n-    @Override\n-    public SignatureVisitor visitClassBound() {\n-        signatureVisitor.visitClassBound();\n-        return this;\n-    }\n-\n-    @Override\n-    public SignatureVisitor visitExceptionType() {\n-        signatureVisitor.visitExceptionType();\n-        return this;\n-    }\n-\n-    @Override\n-    public SignatureVisitor visitInterface() {\n-        signatureVisitor.visitInterface();\n-        return this;\n-    }\n-\n-    @Override\n-    public SignatureVisitor visitInterfaceBound() {\n-        signatureVisitor.visitInterfaceBound();\n-        return this;\n-    }\n-\n-    @Override\n-    public SignatureVisitor visitParameterType() {\n-        signatureVisitor.visitParameterType();\n-        return this;\n-    }\n-\n-    @Override\n-    public SignatureVisitor visitReturnType() {\n-        signatureVisitor.visitReturnType();\n-        return this;\n-    }\n-\n-    @Override\n-    public SignatureVisitor visitSuperclass() {\n-        signatureVisitor.visitSuperclass();\n-        return this;\n-    }\n-\n-    @Override\n-    public void visitTypeArgument() {\n-        signatureVisitor.visitTypeArgument();\n-    }\n-\n-    @Override\n-    public SignatureVisitor visitTypeArgument(final char wildcard) {\n-        signatureVisitor.visitTypeArgument(wildcard);\n-        return this;\n-    }\n-\n-    @Override\n-    public void visitEnd() {\n-        signatureVisitor.visitEnd();\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/RemappingSignatureAdapter.java","additions":0,"deletions":187,"binary":false,"changes":187,"status":"deleted"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -184,1 +185,1 @@\n-        this(\/* latest api = *\/ Opcodes.ASM8, classVisitor);\n+        this(\/* latest api = *\/ Opcodes.ASM9, classVisitor);\n@@ -194,2 +195,2 @@\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7} or {@link\n-      *     Opcodes#ASM8}.\n+      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n+      *     Opcodes#ASM8} or {@link Opcodes#ASM9}.\n@@ -352,1 +353,1 @@\n-      * Adds a static final serialVersionUID field to the class, with the given value.\n+      * Adds a final static serialVersionUID field to the class, with the given value.\n@@ -524,1 +525,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/SerialVersionUIDAdder.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -82,1 +83,1 @@\n-      * @param signatureVisitor the signature visitor this remapper must deleted to.\n+      * @param signatureVisitor the signature visitor this remapper must delegate to.\n@@ -86,1 +87,1 @@\n-        this(\/* latest api = *\/ Opcodes.ASM8, signatureVisitor, remapper);\n+        this(\/* latest api = *\/ Opcodes.ASM9, signatureVisitor, remapper);\n@@ -94,3 +95,3 @@\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM6}, {@link jdk.internal.org.objectweb.asm.Opcodes#ASM7} or {@link\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM8}.\n-      * @param signatureVisitor the signature visitor this remapper must deleted to.\n+      *     jdk.internal.org.objectweb.asm.Opcodes#ASM6}, {@link jdk.internal.org.objectweb.asm.Opcodes#ASM7}, {@link\n+      *     jdk.internal.org.objectweb.asm.Opcodes#ASM8} or {@link jdk.internal.org.objectweb.asm.Opcodes#ASM9}.\n+      * @param signatureVisitor the signature visitor this remapper must delegate to.\n@@ -205,1 +206,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/SignatureRemapper.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -83,2 +84,3 @@\n-      *       <li>for field names, the key is the owner and name of the field (in the form\n-      *           &lt;owner&gt;.&lt;name&gt;), and the value is the new field name.\n+      *       <li>for field and attribute names, the key is the owner and name of the field or\n+      *           attribute (in the form &lt;owner&gt;.&lt;name&gt;), and the value is the new field\n+      *           name.\n@@ -116,0 +118,6 @@\n+    @Override\n+    public String mapAnnotationAttributeName(final String descriptor, final String name) {\n+        String remappedName = map(descriptor + '.' + name);\n+        return remappedName == null ? name : remappedName;\n+    }\n+\n@@ -126,1 +134,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/SimpleRemapper.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -95,1 +96,1 @@\n-        this(\/* latest api = *\/ Opcodes.ASM8, prefix, classVisitor);\n+        this(\/* latest api = *\/ Opcodes.ASM9, prefix, classVisitor);\n@@ -102,2 +103,2 @@\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7} or {@link\n-      *     Opcodes#ASM8}.\n+      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n+      *     Opcodes#ASM8} or {@link Opcodes#ASM9}.\n@@ -156,1 +157,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/StaticInitMerger.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -82,1 +83,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/TableSwitchGenerator.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -104,1 +105,1 @@\n-                \/* latest api = *\/ Opcodes.ASM8,\n+                \/* latest api = *\/ Opcodes.ASM9,\n@@ -156,1 +157,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/commons\/TryCatchBlockSorter.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -283,1 +284,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/signature\/SignatureReader.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -105,1 +106,0 @@\n-    @SuppressWarnings(\"deprecation\")\n@@ -107,1 +107,2 @@\n-        if (api != Opcodes.ASM8\n+        if (api != Opcodes.ASM9\n+                && api != Opcodes.ASM8\n@@ -111,2 +112,1 @@\n-                && api != Opcodes.ASM4\n-                && api != Opcodes.ASM9_EXPERIMENTAL) {\n+                && api != Opcodes.ASM4) {\n@@ -240,1 +240,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/signature\/SignatureVisitor.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -104,1 +105,1 @@\n-        super(\/* latest api =*\/ Opcodes.ASM8);\n+        super(\/* latest api =*\/ Opcodes.ASM9);\n@@ -271,1 +272,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/signature\/SignatureWriter.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -296,1 +297,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/AbstractInsnNode.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -94,1 +95,1 @@\n-        this(\/* latest api = *\/ Opcodes.ASM8, descriptor);\n+        this(\/* latest api = *\/ Opcodes.ASM9, descriptor);\n@@ -104,2 +105,2 @@\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7} or {@link\n-      *     Opcodes#ASM8}\n+      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n+      *     Opcodes#ASM8} or {@link Opcodes#ASM9}.\n@@ -119,1 +120,1 @@\n-        super(\/* latest api = *\/ Opcodes.ASM8);\n+        super(\/* latest api = *\/ Opcodes.ASM9);\n@@ -208,1 +209,1 @@\n-      *     {@link Opcodes#ASM6}, {@link Opcodes#ASM7} or {@link Opcodes#ASM8}.\n+      *     {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link Opcodes#ASM8} or {@link Opcodes#ASM9}.\n@@ -262,1 +263,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/AnnotationNode.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -161,8 +162,2 @@\n-    \/**\n-      * <b>Experimental, use at your own risk. This method will be renamed when it becomes stable, this\n-      * will break existing code using it<\/b>. The internal names of the permitted subclasses of this\n-      * class. May be {@literal null}.\n-      *\n-      * @deprecated this API is experimental.\n-      *\/\n-    @Deprecated public List<String> permittedSubclassesExperimental;\n+    \/** The internal names of the permitted subclasses of this class. May be {@literal null}. *\/\n+    public List<String> permittedSubclasses;\n@@ -186,1 +181,1 @@\n-        this(Opcodes.ASM8);\n+        this(Opcodes.ASM9);\n@@ -196,2 +191,2 @@\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7} or {@link\n-      *     Opcodes#ASM8}.\n+      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n+      *     Opcodes#ASM8}, or {@link Opcodes#ASM9}.\n@@ -284,6 +279,0 @@\n-    \/**\n-      * <b>Experimental, use at your own risk.<\/b>.\n-      *\n-      * @param permittedSubclass the internal name of a permitted subclass.\n-      * @deprecated this API is experimental.\n-      *\/\n@@ -291,3 +280,2 @@\n-    @Deprecated\n-    public void visitPermittedSubclassExperimental(final String permittedSubclass) {\n-        permittedSubclassesExperimental = Util.add(permittedSubclassesExperimental, permittedSubclass);\n+    public void visitPermittedSubclass(final String permittedSubclass) {\n+        permittedSubclasses = Util.add(permittedSubclasses, permittedSubclass);\n@@ -350,1 +338,1 @@\n-      *     {@link Opcodes#ASM6}, {@link Opcodes#ASM7}. or {@link Opcodes#ASM8}.\n+      *     {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link Opcodes#ASM8} or {@link Opcodes#ASM9}.\n@@ -352,1 +340,0 @@\n-    @SuppressWarnings(\"deprecation\")\n@@ -354,1 +341,1 @@\n-        if (api != Opcodes.ASM9_EXPERIMENTAL && permittedSubclassesExperimental != null) {\n+        if (api < Opcodes.ASM9 && permittedSubclasses != null) {\n@@ -413,1 +400,0 @@\n-    @SuppressWarnings(\"deprecation\")\n@@ -476,4 +462,4 @@\n-        \/\/ Visit the permitted subclass.\n-        if (permittedSubclassesExperimental != null) {\n-            for (int i = 0, n = permittedSubclassesExperimental.size(); i < n; ++i) {\n-                classVisitor.visitPermittedSubclassExperimental(permittedSubclassesExperimental.get(i));\n+        \/\/ Visit the permitted subclasses.\n+        if (permittedSubclasses != null) {\n+            for (int i = 0, n = permittedSubclasses.size(); i < n; ++i) {\n+                classVisitor.visitPermittedSubclass(permittedSubclasses.get(i));\n@@ -502,1 +488,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/ClassNode.java","additions":15,"deletions":29,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -127,1 +128,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/FieldInsnNode.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -133,1 +134,1 @@\n-        this(\/* latest api = *\/ Opcodes.ASM8, access, name, descriptor, signature, value);\n+        this(\/* latest api = *\/ Opcodes.ASM9, access, name, descriptor, signature, value);\n@@ -143,2 +144,2 @@\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7} or {@link\n-      *     Opcodes#ASM8}.\n+      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n+      *     Opcodes#ASM8} or {@link Opcodes#ASM9}.\n@@ -276,1 +277,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/FieldNode.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -219,1 +220,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/FrameNode.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -105,1 +106,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/IincInsnNode.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -116,1 +117,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/InnerClassNode.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -521,1 +522,3 @@\n-            if (index == size()) {\n+            if (index < 0 || index > size()) {\n+                throw new IndexOutOfBoundsException();\n+            } else if (index == size()) {\n@@ -525,2 +528,7 @@\n-                nextInsn = get(index);\n-                previousInsn = nextInsn.previousInsn;\n+                AbstractInsnNode currentInsn = getFirst();\n+                for (int i = 0; i < index; i++) {\n+                    currentInsn = currentInsn.nextInsn;\n+                }\n+\n+                nextInsn = currentInsn;\n+                previousInsn = currentInsn.previousInsn;\n@@ -628,1 +636,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/InsnList.java","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -104,1 +105,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/InsnNode.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -110,1 +111,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/IntInsnNode.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -123,1 +124,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/InvokeDynamicInsnNode.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -118,1 +119,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/JumpInsnNode.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -110,1 +111,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/LabelNode.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -62,0 +63,2 @@\n+import jdk.internal.org.objectweb.asm.ConstantDynamic;\n+import jdk.internal.org.objectweb.asm.Handle;\n@@ -64,0 +67,1 @@\n+import jdk.internal.org.objectweb.asm.Type;\n@@ -73,3 +77,5 @@\n-      * The constant to be loaded on the stack. This parameter must be a non null {@link Integer}, a\n-      * {@link Float}, a {@link Long}, a {@link Double}, a {@link String} or a {@link\n-      * jdk.internal.org.objectweb.asm.Type}.\n+      * The constant to be loaded on the stack. This field must be a non null {@link Integer}, a {@link\n+      * Float}, a {@link Long}, a {@link Double}, a {@link String}, a {@link Type} of OBJECT or ARRAY\n+      * sort for {@code .class} constants, for classes whose version is 49, a {@link Type} of METHOD\n+      * sort for MethodType, a {@link Handle} for MethodHandle constants, for classes whose version is\n+      * 51 or a {@link ConstantDynamic} for a constant dynamic for classes whose version is 55.\n@@ -82,2 +88,6 @@\n-      * @param value the constant to be loaded on the stack. This parameter must be a non null {@link\n-      *     Integer}, a {@link Float}, a {@link Long}, a {@link Double} or a {@link String}.\n+      * @param value the constant to be loaded on the stack. This parameter mist be a non null {@link\n+      *     Integer}, a {@link Float}, a {@link Long}, a {@link Double}, a {@link String}, a {@link\n+      *     Type} of OBJECT or ARRAY sort for {@code .class} constants, for classes whose version is\n+      *     49, a {@link Type} of METHOD sort for MethodType, a {@link Handle} for MethodHandle\n+      *     constants, for classes whose version is 51 or a {@link ConstantDynamic} for a constant\n+      *     dynamic for classes whose version is 55.\n@@ -105,1 +115,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/LdcInsnNode.java","additions":16,"deletions":6,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -105,1 +106,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/LineNumberNode.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -117,1 +118,1 @@\n-        this(\/* latest api = *\/ Opcodes.ASM8, typeRef, typePath, start, end, index, descriptor);\n+        this(\/* latest api = *\/ Opcodes.ASM9, typeRef, typePath, start, end, index, descriptor);\n@@ -124,2 +125,2 @@\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7} or {@link\n-      *     Opcodes#ASM8}.\n+      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n+      *     Opcodes#ASM8} or {@link Opcodes#ASM9}.\n@@ -171,1 +172,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/LocalVariableAnnotationNode.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -123,1 +124,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/LocalVariableNode.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -124,1 +125,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/LookupSwitchInsnNode.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -154,1 +155,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/MethodInsnNode.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -189,1 +190,1 @@\n-        this(\/* latest api = *\/ Opcodes.ASM8);\n+        this(\/* latest api = *\/ Opcodes.ASM9);\n@@ -199,2 +200,2 @@\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7} or {@link\n-      *     Opcodes#ASM8}.\n+      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n+      *     Opcodes#ASM8} or {@link Opcodes#ASM9}.\n@@ -226,1 +227,1 @@\n-        this(\/* latest api = *\/ Opcodes.ASM8, access, name, descriptor, signature, exceptions);\n+        this(\/* latest api = *\/ Opcodes.ASM9, access, name, descriptor, signature, exceptions);\n@@ -236,2 +237,2 @@\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7} or {@link\n-      *     Opcodes#ASM8}.\n+      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n+      *     Opcodes#ASM8} or {@link Opcodes#ASM9}.\n@@ -602,1 +603,1 @@\n-      *     {@link Opcodes#ASM6}, {@link Opcodes#ASM7} or {@link Opcodes#ASM8}.\n+      *     {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link Opcodes#ASM8} or {@link Opcodes#ASM9}.\n@@ -805,1 +806,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/MethodNode.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -110,1 +111,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/ModuleExportNode.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -118,1 +119,1 @@\n-        super(\/* latest api = *\/ Opcodes.ASM8);\n+        super(\/* latest api = *\/ Opcodes.ASM9);\n@@ -132,1 +133,1 @@\n-      *     Opcodes#ASM6}, {@link Opcodes#ASM7} or {@link Opcodes#ASM8}.\n+      *     Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link Opcodes#ASM8} or {@link Opcodes#ASM9}.\n@@ -266,1 +267,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/ModuleNode.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -110,1 +111,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/ModuleOpenNode.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -97,1 +98,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/ModuleProvideNode.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -104,1 +105,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/ModuleRequireNode.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -105,1 +106,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/MultiANewArrayInsnNode.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -99,1 +100,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/ParameterNode.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -110,1 +111,1 @@\n-        this(\/* latest api = *\/ Opcodes.ASM8, name, descriptor, signature);\n+        this(\/* latest api = *\/ Opcodes.ASM9, name, descriptor, signature);\n@@ -119,1 +120,2 @@\n-      * @param api the ASM API version implemented by this visitor. Must be {@link Opcodes#ASM8}.\n+      * @param api the ASM API version implemented by this visitor. Must be one of {@link Opcodes#ASM8}\n+      *     or {@link Opcodes#ASM9}.\n@@ -178,1 +180,1 @@\n-      * @param api an ASM API version. Must be {@link Opcodes#ASM8}.\n+      * @param api an ASM API version. Must be one of {@link Opcodes#ASM8} or {@link Opcodes#ASM9}.\n@@ -234,1 +236,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/RecordComponentNode.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -124,1 +125,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/TableSwitchInsnNode.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -157,1 +158,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/TryCatchBlockNode.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -93,1 +94,1 @@\n-        this(\/* latest api = *\/ Opcodes.ASM8, typeRef, typePath, descriptor);\n+        this(\/* latest api = *\/ Opcodes.ASM9, typeRef, typePath, descriptor);\n@@ -103,2 +104,2 @@\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7} or {@link\n-      *     Opcodes#ASM8}.\n+      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n+      *     Opcodes#ASM8} or {@link Opcodes#ASM9}.\n@@ -117,1 +118,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/TypeAnnotationNode.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -116,1 +117,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/TypeInsnNode.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -58,1 +58,2 @@\n- *\/package jdk.internal.org.objectweb.asm.tree;\n+ *\/\n+package jdk.internal.org.objectweb.asm.tree;\n@@ -71,1 +72,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/UnsupportedClassVersionException.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -194,1 +195,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/Util.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -113,1 +114,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/VarInsnNode.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -127,1 +128,2 @@\n-      * @param method the method to be analyzed.\n+      * @param method the method to be analyzed. The maxStack and maxLocals fields must have correct\n+      *     values.\n@@ -333,0 +335,68 @@\n+    \/**\n+      * Analyzes the given method and computes and sets its maximum stack size and maximum number of\n+      * local variables.\n+      *\n+      * @param owner the internal name of the class to which 'method' belongs.\n+      * @param method the method to be analyzed.\n+      * @return the symbolic state of the execution stack frame at each bytecode instruction of the\n+      *     method. The size of the returned array is equal to the number of instructions (and labels)\n+      *     of the method. A given frame is {@literal null} if and only if the corresponding\n+      *     instruction cannot be reached (dead code).\n+      * @throws AnalyzerException if a problem occurs during the analysis.\n+      *\/\n+    public Frame<V>[] analyzeAndComputeMaxs(final String owner, final MethodNode method)\n+            throws AnalyzerException {\n+        method.maxLocals = computeMaxLocals(method);\n+        method.maxStack = -1;\n+        analyze(owner, method);\n+        method.maxStack = computeMaxStack(frames);\n+        return frames;\n+    }\n+\n+    \/**\n+      * Computes and returns the maximum number of local variables used in the given method.\n+      *\n+      * @param method a method.\n+      * @return the maximum number of local variables used in the given method.\n+      *\/\n+    private static int computeMaxLocals(final MethodNode method) {\n+        int maxLocals = Type.getArgumentsAndReturnSizes(method.desc) >> 2;\n+        for (AbstractInsnNode insnNode : method.instructions) {\n+            if (insnNode instanceof VarInsnNode) {\n+                int local = ((VarInsnNode) insnNode).var;\n+                int size =\n+                        (insnNode.getOpcode() == Opcodes.LLOAD\n+                                        || insnNode.getOpcode() == Opcodes.DLOAD\n+                                        || insnNode.getOpcode() == Opcodes.LSTORE\n+                                        || insnNode.getOpcode() == Opcodes.DSTORE)\n+                                ? 2\n+                                : 1;\n+                maxLocals = Math.max(maxLocals, local + size);\n+            } else if (insnNode instanceof IincInsnNode) {\n+                int local = ((IincInsnNode) insnNode).var;\n+                maxLocals = Math.max(maxLocals, local + 1);\n+            }\n+        }\n+        return maxLocals;\n+    }\n+\n+    \/**\n+      * Computes and returns the maximum stack size of a method, given its stack map frames.\n+      *\n+      * @param frames the stack map frames of a method.\n+      * @return the maximum stack size of the given method.\n+      *\/\n+    private static int computeMaxStack(final Frame<?>[] frames) {\n+        int maxStack = 0;\n+        for (Frame<?> frame : frames) {\n+            if (frame != null) {\n+                int stackSize = 0;\n+                for (int i = 0; i < frame.getStackSize(); ++i) {\n+                    stackSize += frame.getStack(i).getSize();\n+                }\n+                maxStack = Math.max(maxStack, stackSize);\n+            }\n+        }\n+        return maxStack;\n+    }\n+\n@@ -634,1 +704,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/analysis\/Analyzer.java","additions":72,"deletions":2,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -120,1 +121,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/analysis\/AnalyzerException.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -95,1 +96,1 @@\n-        super(\/* latest api = *\/ ASM8);\n+        super(\/* latest api = *\/ ASM9);\n@@ -106,2 +107,2 @@\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM6}, {@link jdk.internal.org.objectweb.asm.Opcodes#ASM7} or {@link\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM8}.\n+      *     jdk.internal.org.objectweb.asm.Opcodes#ASM6}, {@link jdk.internal.org.objectweb.asm.Opcodes#ASM7}, {@link\n+      *     jdk.internal.org.objectweb.asm.Opcodes#ASM8} or {@link jdk.internal.org.objectweb.asm.Opcodes#ASM9}.\n@@ -408,1 +409,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/analysis\/BasicInterpreter.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -160,1 +161,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/analysis\/BasicValue.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -81,1 +82,1 @@\n-        super(\/* latest api = *\/ ASM8);\n+        super(\/* latest api = *\/ ASM9);\n@@ -92,2 +93,2 @@\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM6}, {@link jdk.internal.org.objectweb.asm.Opcodes#ASM7} or {@link\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM8}.\n+      *     jdk.internal.org.objectweb.asm.Opcodes#ASM6}, {@link jdk.internal.org.objectweb.asm.Opcodes#ASM7}, {@link\n+      *     jdk.internal.org.objectweb.asm.Opcodes#ASM8} or or {@link jdk.internal.org.objectweb.asm.Opcodes#ASM9}.\n@@ -482,1 +483,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/analysis\/BasicVerifier.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -83,0 +84,3 @@\n+    \/** The maximum size of the operand stack of any method. *\/\n+    private static final int MAX_STACK_SIZE = 65536;\n+\n@@ -91,1 +95,2 @@\n-      * operand stack.\n+      * operand stack. Long and double values are represented with two elements in the local variables\n+      * section, and with one element in the operand stack section.\n@@ -95,1 +100,4 @@\n-    \/** The number of local variables of this frame. *\/\n+    \/**\n+      * The number of local variables of this frame. Long and double values are represented with two\n+      * elements.\n+      *\/\n@@ -98,1 +106,4 @@\n-    \/** The number of elements in the operand stack. *\/\n+    \/**\n+      * The number of elements in the operand stack. Long and double values are represented with a\n+      * single element.\n+      *\/\n@@ -101,0 +112,6 @@\n+    \/**\n+      * The maximum number of elements in the operand stack. Long and double values are represented\n+      * with a single element.\n+      *\/\n+    private int maxStack;\n+\n@@ -104,2 +121,4 @@\n-      * @param numLocals the maximum number of local variables of the frame.\n-      * @param numStack the maximum stack size of the frame.\n+      * @param numLocals the number of local variables of the frame. Long and double values are\n+      *     represented with two elements.\n+      * @param maxStack the maximum number of elements in the operand stack, or -1 if there is no\n+      *     maximum value. Long and double values are represented with a single element.\n@@ -108,2 +127,2 @@\n-    public Frame(final int numLocals, final int numStack) {\n-        this.values = (V[]) new Value[numLocals + numStack];\n+    public Frame(final int numLocals, final int maxStack) {\n+        this.values = (V[]) new Value[numLocals + (maxStack >= 0 ? maxStack : 4)];\n@@ -111,0 +130,2 @@\n+        this.numStack = 0;\n+        this.maxStack = maxStack >= 0 ? maxStack : MAX_STACK_SIZE;\n@@ -131,1 +152,6 @@\n-        System.arraycopy(frame.values, 0, values, 0, values.length);\n+        if (values.length < frame.values.length) {\n+            values = frame.values.clone();\n+        } else {\n+            System.arraycopy(frame.values, 0, values, 0, frame.values.length);\n+        }\n+        numLocals = frame.numLocals;\n@@ -133,0 +159,1 @@\n+        maxStack = frame.maxStack;\n@@ -169,1 +196,2 @@\n-      * Returns the maximum number of local variables of this frame.\n+      * Returns the maximum number of local variables of this frame. Long and double values are\n+      * represented with two variables.\n@@ -178,1 +206,2 @@\n-      * Returns the maximum stack size of this frame.\n+      * Returns the maximum number of elements in the operand stack of this frame. Long and double\n+      * values are represented with a single element.\n@@ -180,1 +209,1 @@\n-      * @return the maximum stack size of this frame.\n+      * @return the maximum number of elements in the operand stack of this frame.\n@@ -183,1 +212,1 @@\n-        return values.length - numLocals;\n+        return maxStack;\n@@ -187,1 +216,2 @@\n-      * Returns the value of the given local variable.\n+      * Returns the value of the given local variable. Long and double values are represented with two\n+      * variables.\n@@ -201,1 +231,2 @@\n-      * Sets the value of the given local variable.\n+      * Sets the value of the given local variable. Long and double values are represented with two\n+      * variables.\n@@ -215,2 +246,2 @@\n-      * Returns the number of values in the operand stack of this frame. Long and double values are\n-      * treated as single values.\n+      * Returns the number of elements in the operand stack of this frame. Long and double values are\n+      * represented with a single element.\n@@ -218,1 +249,1 @@\n-      * @return the number of values in the operand stack of this frame.\n+      * @return the number of elements in the operand stack of this frame.\n@@ -270,0 +301,1 @@\n+    @SuppressWarnings(\"unchecked\")\n@@ -272,1 +304,6 @@\n-            throw new IndexOutOfBoundsException(\"Insufficient maximum stack size.\");\n+            if (numLocals + numStack >= maxStack) {\n+                throw new IndexOutOfBoundsException(\"Insufficient maximum stack size.\");\n+            }\n+            V[] oldValues = values;\n+            values = (V[]) new Value[2 * values.length];\n+            System.arraycopy(oldValues, 0, values, 0, oldValues.length);\n@@ -747,1 +784,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/analysis\/Frame.java","additions":56,"deletions":19,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -299,1 +300,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/analysis\/Interpreter.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -128,1 +129,1 @@\n-                \/* latest api = *\/ ASM8,\n+                \/* latest api = *\/ ASM9,\n@@ -144,2 +145,2 @@\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM6}, {@link jdk.internal.org.objectweb.asm.Opcodes#ASM7} or {@link\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM8}.\n+      *     jdk.internal.org.objectweb.asm.Opcodes#ASM6}, {@link jdk.internal.org.objectweb.asm.Opcodes#ASM7}, {@link\n+      *     jdk.internal.org.objectweb.asm.Opcodes#ASM8} or or {@link jdk.internal.org.objectweb.asm.Opcodes#ASM9}.\n@@ -413,1 +414,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/analysis\/SimpleVerifier.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -229,1 +230,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/analysis\/SmallSet.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -85,1 +86,1 @@\n-        super(\/* latest api = *\/ ASM8);\n+        super(\/* latest api = *\/ ASM9);\n@@ -96,2 +97,2 @@\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM6}, {@link jdk.internal.org.objectweb.asm.Opcodes#ASM7} or {@link\n-      *     jdk.internal.org.objectweb.asm.Opcodes#ASM8}.\n+      *     jdk.internal.org.objectweb.asm.Opcodes#ASM6}, {@link jdk.internal.org.objectweb.asm.Opcodes#ASM7}, {@link\n+      *     jdk.internal.org.objectweb.asm.Opcodes#ASM8} or or {@link jdk.internal.org.objectweb.asm.Opcodes#ASM9}.\n@@ -253,1 +254,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/analysis\/SourceInterpreter.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -150,1 +151,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/analysis\/SourceValue.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -137,1 +138,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/analysis\/Subroutine.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -75,1 +76,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/tree\/analysis\/Value.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,81 +0,0 @@\n-\/*\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * This file is available under and governed by the GNU General Public\n- * License version 2 only, as published by the Free Software Foundation.\n- * However, the following notice accompanied the original version of this\n- * file:\n- *\n- * ASM: a very small and fast Java bytecode manipulation framework\n- * Copyright (c) 2000-2011 INRIA, France Telecom\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- * 1. Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- * 2. Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in the\n- *    documentation and\/or other materials provided with the distribution.\n- * 3. Neither the name of the copyright holders nor the names of its\n- *    contributors may be used to endorse or promote products derived from\n- *    this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n- * THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package jdk.internal.org.objectweb.asm.util;\n-\n-import java.util.Map;\n-import jdk.internal.org.objectweb.asm.Label;\n-\n-\/**\n- * An {@link jdk.internal.org.objectweb.asm.Attribute} that can generate the ASM code to create an equivalent\n- * attribute.\n- *\n- * @author Eugene Kuleshov\n- *\/\n-\/\/ DontCheck(AbbreviationAsWordInName): can't be renamed (for backward binary compatibility).\n-public interface ASMifiable {\n-\n-    \/**\n-      * Generates the ASM code to create an attribute equal to this attribute.\n-      *\n-      * @param outputBuffer where the generated code must be appended.\n-      * @param visitorVariableName the name of the visitor variable in the produced code.\n-      * @param labelNames the names of the labels in the generated code.\n-      *\/\n-    void asmify(StringBuffer outputBuffer, String visitorVariableName, Map<Label, String> labelNames);\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/ASMifiable.java","additions":0,"deletions":81,"binary":false,"changes":81,"status":"deleted"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -87,1 +88,1 @@\n-                    + \"Usage: ASMifier [-debug] <fully qualified class name or class file name>\";\n+                    + \"Usage: ASMifier [-nodebug] <fully qualified class name or class file name>\";\n@@ -139,0 +140,3 @@\n+        classVersions.put(Opcodes.V16, \"V16\");\n+        classVersions.put(Opcodes.V17, \"V17\");\n+        classVersions.put(Opcodes.V18, \"V18\");\n@@ -158,1 +162,1 @@\n-        this(\/* latest api = *\/ Opcodes.ASM8, \"classWriter\", 0);\n+        this(\/* latest api = *\/ Opcodes.ASM9, \"classWriter\", 0);\n@@ -168,1 +172,2 @@\n-      *     {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7} or {@link Opcodes#ASM8}.\n+      *     {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link Opcodes#ASM8} or\n+      *     {@link Opcodes#ASM9}.\n@@ -182,1 +187,1 @@\n-      * <p>Usage: ASMifier [-debug] &lt;binary class name or class file name&gt;\n+      * <p>Usage: ASMifier [-nodebug] &lt;binary class name or class file name&gt;\n@@ -194,1 +199,1 @@\n-      * <p>Usage: ASMifier [-debug] &lt;binary class name or class file name&gt;\n+      * <p>Usage: ASMifier [-nodebug] &lt;binary class name or class file name&gt;\n@@ -357,6 +362,0 @@\n-    \/**\n-      * <b>Experimental, use at your own risk.<\/b>.\n-      *\n-      * @param permittedSubclass the internal name of a permitted subclass.\n-      * @deprecated this API is experimental.\n-      *\/\n@@ -364,2 +363,1 @@\n-    @Deprecated\n-    public void visitPermittedSubclassExperimental(final String permittedSubclass) {\n+    public void visitPermittedSubclass(final String permittedSubclass) {\n@@ -367,1 +365,1 @@\n-        stringBuilder.append(\"classWriter.visitPermittedSubclassExperimental(\");\n+        stringBuilder.append(\"classWriter.visitPermittedSubclass(\");\n@@ -667,3 +665,1 @@\n-        stringBuilder.setLength(0);\n-        stringBuilder.append(name).append(VISIT_END);\n-        text.add(stringBuilder.toString());\n+        visitMemberEnd();\n@@ -694,3 +690,1 @@\n-        stringBuilder.setLength(0);\n-        stringBuilder.append(name).append(VISIT_END);\n-        text.add(stringBuilder.toString());\n+        visitMemberEnd();\n@@ -1169,3 +1163,1 @@\n-        stringBuilder.setLength(0);\n-        stringBuilder.append(name).append(VISIT_END);\n-        text.add(stringBuilder.toString());\n+        visitMemberEnd();\n@@ -1281,0 +1273,7 @@\n+    \/** Visits the end of a field, record component or method. *\/\n+    private void visitMemberEnd() {\n+        stringBuilder.setLength(0);\n+        stringBuilder.append(name).append(VISIT_END);\n+        text.add(stringBuilder.toString());\n+    }\n+\n@@ -1647,1 +1646,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/ASMifier.java","additions":23,"deletions":24,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -82,1 +83,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/ASMifierSupport.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -86,1 +87,1 @@\n-        super(\/* latest api = *\/ Opcodes.ASM8, annotationVisitor);\n+        super(\/* latest api = *\/ Opcodes.ASM9, annotationVisitor);\n@@ -166,1 +167,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/CheckAnnotationAdapter.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -208,1 +209,1 @@\n-        this(\/* latest api = *\/ Opcodes.ASM8, classVisitor, checkDataFlow);\n+        this(\/* latest api = *\/ Opcodes.ASM9, classVisitor, checkDataFlow);\n@@ -218,2 +219,2 @@\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7} or {@link\n-      *     Opcodes#ASM8}.\n+      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n+      *     Opcodes#ASM8} or {@link Opcodes#ASM9}.\n@@ -356,6 +357,0 @@\n-    \/**\n-      * <b>Experimental, use at your own risk.<\/b>.\n-      *\n-      * @param permittedSubclass the internal name of a permitted subclass.\n-      * @deprecated this API is experimental.\n-      *\/\n@@ -363,2 +358,1 @@\n-    @Deprecated\n-    public void visitPermittedSubclassExperimental(final String permittedSubclass) {\n+    public void visitPermittedSubclass(final String permittedSubclass) {\n@@ -367,1 +361,1 @@\n-        super.visitPermittedSubclassExperimental(permittedSubclass);\n+        super.visitPermittedSubclass(permittedSubclass);\n@@ -471,1 +465,2 @@\n-        checkAccess(\n+        checkMethodAccess(\n+                version,\n@@ -596,0 +591,17 @@\n+    \/**\n+      * Checks that the given access flags do not contain invalid flags for a method. This method also\n+      * checks that mutually incompatible flags are not set simultaneously.\n+      *\n+      * @param version the class version.\n+      * @param access the method access flags to be checked.\n+      * @param possibleAccess the valid access flags.\n+      *\/\n+    private static void checkMethodAccess(\n+            final int version, final int access, final int possibleAccess) {\n+        checkAccess(access, possibleAccess);\n+        if ((version & 0xFFFF) < Opcodes.V17\n+                && Integer.bitCount(access & (Opcodes.ACC_STRICT | Opcodes.ACC_ABSTRACT)) > 1) {\n+            throw new IllegalArgumentException(\"strictfp and abstract are mutually exclusive: \" + access);\n+        }\n+    }\n+\n@@ -984,1 +996,1 @@\n-                throw new AssertionError();\n+                break;\n@@ -986,1 +998,1 @@\n-        if ((typeRef & ~mask) != 0) {\n+        if (mask == 0 || (typeRef & ~mask) != 0) {\n@@ -1037,3 +1049,4 @@\n-            InputStream inputStream =\n-                    new FileInputStream(args[0]); \/\/ NOPMD(AvoidFileStream): can't fix for 1.5 compatibility\n-            classReader = new ClassReader(inputStream);\n+            \/\/ Can't fix PMD warning for 1.5 compatibility.\n+            try (InputStream inputStream = new FileInputStream(args[0])) { \/\/ NOPMD(AvoidFileStream)\n+                classReader = new ClassReader(inputStream);\n+            }\n@@ -1068,1 +1081,0 @@\n-    @SuppressWarnings(\"deprecation\")\n@@ -1076,1 +1088,1 @@\n-                new CheckClassAdapter(Opcodes.ASM9_EXPERIMENTAL, classNode, false) {},\n+                new CheckClassAdapter(\/*latest*\/ Opcodes.ASM9, classNode, false) {},\n@@ -1155,1 +1167,5 @@\n-            return name.substring(lastSlashIndex + 1, endIndex);\n+            int lastBracketIndex = name.lastIndexOf('[');\n+            if (lastBracketIndex == -1) {\n+                return name.substring(lastSlashIndex + 1, endIndex);\n+            }\n+            return name.substring(0, lastBracketIndex + 1) + name.substring(lastSlashIndex + 1, endIndex);\n@@ -1158,1 +1174,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/CheckClassAdapter.java","additions":38,"deletions":22,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -86,1 +87,1 @@\n-        this(\/* latest api = *\/ Opcodes.ASM8, fieldVisitor);\n+        this(\/* latest api = *\/ Opcodes.ASM9, fieldVisitor);\n@@ -96,2 +97,2 @@\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7} or {@link\n-      *     Opcodes#ASM8}.\n+      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n+      *     Opcodes#ASM8} or {@link Opcodes#ASM9}.\n@@ -148,1 +149,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/CheckFieldAdapter.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -401,1 +402,1 @@\n-        this(\/* latest api = *\/ Opcodes.ASM8, methodVisitor, labelInsnIndices);\n+        this(\/* latest api = *\/ Opcodes.ASM9, methodVisitor, labelInsnIndices);\n@@ -412,2 +413,2 @@\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7} or {@link\n-      *     Opcodes#ASM8}.\n+      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n+      *     Opcodes#ASM8} or {@link Opcodes#ASM9}.\n@@ -449,1 +450,1 @@\n-                \/* latest api = *\/ Opcodes.ASM8, access, name, descriptor, methodVisitor, labelInsnIndices);\n+                \/* latest api = *\/ Opcodes.ASM9, access, name, descriptor, methodVisitor, labelInsnIndices);\n@@ -461,2 +462,2 @@\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7} or {@link\n-      *     Opcodes#ASM8}.\n+      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n+      *     Opcodes#ASM8} or {@link Opcodes#ASM9}.\n@@ -518,1 +519,1 @@\n-                access, Opcodes.ACC_FINAL + Opcodes.ACC_MANDATED + Opcodes.ACC_SYNTHETIC);\n+                access, Opcodes.ACC_FINAL | Opcodes.ACC_MANDATED | Opcodes.ACC_SYNTHETIC);\n@@ -818,1 +819,1 @@\n-            throw new IllegalArgumentException(\"Already visited label\");\n+            throw new IllegalStateException(\"Already visited label\");\n@@ -1475,1 +1476,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/CheckMethodAdapter.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -105,1 +106,1 @@\n-        this(\/* latest api = *\/ Opcodes.ASM8, moduleVisitor, isOpen);\n+        this(\/* latest api = *\/ Opcodes.ASM9, moduleVisitor, isOpen);\n@@ -115,2 +116,2 @@\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7} or {@link\n-      *     Opcodes#ASM8}.\n+      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n+      *     Opcodes#ASM8} or {@link Opcodes#ASM9}.\n@@ -244,1 +245,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/CheckModuleAdapter.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -89,1 +90,1 @@\n-        this(\/* latest api =*\/ Opcodes.ASM8, recordComponentVisitor);\n+        this(\/* latest api =*\/ Opcodes.ASM9, recordComponentVisitor);\n@@ -98,1 +99,2 @@\n-      * @param api the ASM API version implemented by this visitor. Must be {@link Opcodes#ASM8}.\n+      * @param api the ASM API version implemented by this visitor. Must be one of {@link Opcodes#ASM8}\n+      *     or {@link Opcodes#ASM9}.\n@@ -151,1 +153,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/CheckRecordComponentAdapter.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -157,1 +158,1 @@\n-        this(\/* latest api = *\/ Opcodes.ASM8, type, signatureVisitor);\n+        this(\/* latest api = *\/ Opcodes.ASM9, type, signatureVisitor);\n@@ -164,2 +165,2 @@\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7} or {@link\n-      *     Opcodes#ASM8}.\n+      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n+      *     Opcodes#ASM8} or {@link Opcodes#ASM9}.\n@@ -391,1 +392,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/CheckSignatureAdapter.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -326,1 +327,2 @@\n-      * Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6} or {@link Opcodes#ASM7}.\n+      * Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n+      * Opcodes#ASM8} or {@link Opcodes#ASM9}.\n@@ -488,6 +490,2 @@\n-      * <b>Experimental, use at your own risk. This method will be renamed when it becomes stable, this\n-      * will break existing code using it<\/b>.\n-      *\n-      * <p>Visits a permitted subclass. A permitted subtclass is one of the allowed subclasses of the\n-      * current class. See {@link\n-      * jdk.internal.org.objectweb.asm.ClassVisitor#visitPermittedSubclassExperimental(String)}.\n+      * Visits a permitted subclasses. A permitted subclass is one of the allowed subclasses of the\n+      * current class. See {@link jdk.internal.org.objectweb.asm.ClassVisitor#visitPermittedSubclass(String)}.\n@@ -496,1 +494,0 @@\n-      * @deprecated this API is experimental.\n@@ -498,2 +495,1 @@\n-    @Deprecated\n-    public void visitPermittedSubclassExperimental(final String permittedSubclass) {\n+    public void visitPermittedSubclass(final String permittedSubclass) {\n@@ -1308,1 +1304,1 @@\n-      * <p>Command line arguments: [-debug] &lt;binary class name or class file name &gt;\n+      * <p>Command line arguments: [-nodebug] &lt;binary class name or class file name &gt;\n@@ -1324,1 +1320,3 @@\n-        if (args.length < 1 || args.length > 2 || (args[0].equals(\"-debug\") && args.length != 2)) {\n+        if (args.length < 1\n+                || args.length > 2\n+                || ((args[0].equals(\"-debug\") || args[0].equals(\"-nodebug\")) && args.length != 2)) {\n@@ -1333,1 +1331,1 @@\n-        if (args[0].equals(\"-debug\")) {\n+        if (args[0].equals(\"-nodebug\")) {\n@@ -1344,3 +1342,4 @@\n-            InputStream inputStream =\n-                    new FileInputStream(className); \/\/ NOPMD(AvoidFileStream): can't fix for 1.5 compatibility\n-            new ClassReader(inputStream).accept(traceClassVisitor, parsingOptions);\n+            \/\/ Can't fix PMD warning for 1.5 compatibility.\n+            try (InputStream inputStream = new FileInputStream(className)) { \/\/ NOPMD(AvoidFileStream)\n+                new ClassReader(inputStream).accept(traceClassVisitor, parsingOptions);\n+            }\n@@ -1351,1 +1350,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/Printer.java","additions":16,"deletions":17,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -1,78 +0,0 @@\n-\/*\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * This file is available under and governed by the GNU General Public\n- * License version 2 only, as published by the Free Software Foundation.\n- * However, the following notice accompanied the original version of this\n- * file:\n- *\n- * ASM: a very small and fast Java bytecode manipulation framework\n- * Copyright (c) 2000-2011 INRIA, France Telecom\n- * All rights reserved.\n- *\n- * Redistribution and use in source and binary forms, with or without\n- * modification, are permitted provided that the following conditions\n- * are met:\n- * 1. Redistributions of source code must retain the above copyright\n- *    notice, this list of conditions and the following disclaimer.\n- * 2. Redistributions in binary form must reproduce the above copyright\n- *    notice, this list of conditions and the following disclaimer in the\n- *    documentation and\/or other materials provided with the distribution.\n- * 3. Neither the name of the copyright holders nor the names of its\n- *    contributors may be used to endorse or promote products derived from\n- *    this software without specific prior written permission.\n- *\n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n- * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n- * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n- * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n- * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n- * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n- * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n- * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n- * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n- * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF\n- * THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package jdk.internal.org.objectweb.asm.util;\n-\n-import java.util.Map;\n-import jdk.internal.org.objectweb.asm.Label;\n-\n-\/**\n- * An {@link jdk.internal.org.objectweb.asm.Attribute} that can print a readable representation of itself.\n- *\n- * @author Eugene Kuleshov\n- *\/\n-public interface Textifiable {\n-\n-    \/**\n-      * Generates a human readable representation of this attribute.\n-      *\n-      * @param outputBuffer where the human representation of this attribute must be appended.\n-      * @param labelNames the human readable names of the labels.\n-      *\/\n-    void textify(StringBuffer outputBuffer, Map<Label, String> labelNames);\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/Textifiable.java","additions":0,"deletions":78,"binary":false,"changes":78,"status":"deleted"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -87,1 +88,1 @@\n-                    + \"Usage: Textifier [-debug] <fully qualified class name or class file name>\";\n+                    + \"Usage: Textifier [-nodebug] <fully qualified class name or class file name>\";\n@@ -146,1 +147,1 @@\n-        this(\/* latest api = *\/ Opcodes.ASM8);\n+        this(\/* latest api = *\/ Opcodes.ASM9);\n@@ -156,2 +157,2 @@\n-      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7} or {@link\n-      *     Opcodes#ASM8}.\n+      *     Opcodes#ASM4}, {@link Opcodes#ASM5}, {@link Opcodes#ASM6}, {@link Opcodes#ASM7}, {@link\n+      *     Opcodes#ASM8} or {@link Opcodes#ASM9}.\n@@ -166,1 +167,1 @@\n-      * <p>Usage: Textifier [-debug] &lt;binary class name or class file name &gt;\n+      * <p>Usage: Textifier [-nodebug] &lt;binary class name or class file name &gt;\n@@ -178,1 +179,1 @@\n-      * <p>Usage: Textifier [-debug] &lt;binary class name or class file name &gt;\n+      * <p>Usage: Textifier [-nodebug] &lt;binary class name or class file name &gt;\n@@ -340,6 +341,0 @@\n-    \/**\n-      * <b>Experimental, use at your own risk.<\/b>.\n-      *\n-      * @param permittedSubclass the internal name of a permitted subclass.\n-      * @deprecated this API is experimental.\n-      *\/\n@@ -347,2 +342,1 @@\n-    @Deprecated\n-    public void visitPermittedSubclassExperimental(final String permittedSubclass) {\n+    public void visitPermittedSubclass(final String permittedSubclass) {\n@@ -1640,1 +1634,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/Textifier.java","additions":9,"deletions":15,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -78,1 +79,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/TextifierSupport.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -91,1 +92,1 @@\n-        super(\/* latest api = *\/ Opcodes.ASM8, annotationVisitor);\n+        super(\/* latest api = *\/ Opcodes.ASM9, annotationVisitor);\n@@ -124,1 +125,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/TraceAnnotationVisitor.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -151,1 +152,0 @@\n-    @SuppressWarnings(\"deprecation\")\n@@ -154,1 +154,1 @@\n-        super(\/* latest api = *\/ Opcodes.ASM9_EXPERIMENTAL, classVisitor);\n+        super(\/* latest api = *\/ Opcodes.ASM9, classVisitor);\n@@ -222,6 +222,0 @@\n-    \/**\n-      * <b>Experimental, use at your own risk.<\/b>.\n-      *\n-      * @param permittedSubclass the internal name of a permitted subclass.\n-      * @deprecated this API is experimental.\n-      *\/\n@@ -229,4 +223,3 @@\n-    @Deprecated\n-    public void visitPermittedSubclassExperimental(final String permittedSubclass) {\n-        p.visitPermittedSubclassExperimental(permittedSubclass);\n-        super.visitPermittedSubclassExperimental(permittedSubclass);\n+    public void visitPermittedSubclass(final String permittedSubclass) {\n+        p.visitPermittedSubclass(permittedSubclass);\n+        super.visitPermittedSubclass(permittedSubclass);\n@@ -283,1 +276,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/TraceClassVisitor.java","additions":6,"deletions":13,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -94,1 +95,1 @@\n-        super(\/* latest api = *\/ Opcodes.ASM8, fieldVisitor);\n+        super(\/* latest api = *\/ Opcodes.ASM9, fieldVisitor);\n@@ -124,1 +125,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/TraceFieldVisitor.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -96,1 +97,1 @@\n-        super(\/* latest api = *\/ Opcodes.ASM8, methodVisitor);\n+        super(\/* latest api = *\/ Opcodes.ASM9, methodVisitor);\n@@ -343,1 +344,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/TraceMethodVisitor.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -91,1 +92,1 @@\n-        super(\/* latest api = *\/ Opcodes.ASM8, moduleVisitor);\n+        super(\/* latest api = *\/ Opcodes.ASM9, moduleVisitor);\n@@ -142,1 +143,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/TraceModuleVisitor.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -96,1 +97,1 @@\n-        super(\/* latest api ='*\/ Opcodes.ASM8, recordComponentVisitor);\n+        super(\/* latest api ='*\/ Opcodes.ASM9, recordComponentVisitor);\n@@ -127,1 +128,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/TraceRecordComponentVisitor.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+\n@@ -143,1 +144,1 @@\n-        super(\/* latest api = *\/ Opcodes.ASM8);\n+        super(\/* latest api = *\/ Opcodes.ASM9);\n@@ -149,1 +150,1 @@\n-        super(\/* latest api = *\/ Opcodes.ASM8);\n+        super(\/* latest api = *\/ Opcodes.ASM9);\n@@ -259,1 +260,1 @@\n-            \/\/ 'Map<java.lang.Object,java.util.List>' or 'public abstract V get(Object key);' should have\n+            \/\/ 'Map<java.lang.Object,java.util.List>' or 'abstract public V get(Object key);' should have\n@@ -375,1 +376,1 @@\n-}\n+}\n\\ No newline at end of file\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/util\/TraceSignatureVisitor.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-ASM_8_0_1\n+ASM_9_2\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/org\/objectweb\/asm\/version.txt","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-## ASM Bytecode Manipulation Framework v8.0.1\n+## ASM Bytecode Manipulation Framework v9.2\n","filename":"src\/java.base\/share\/legal\/asm.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -247,1 +247,1 @@\n-            super(Opcodes.ASM7);\n+            super(Opcodes.ASM9);\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/FingerPrint.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8282446 8282508\n+ * @summary Jar validation fails when sealed classes and records are involved\n+ * @modules jdk.compiler\n+ *          jdk.jartool\/sun.tools.jar\n+ * @build ValidateJarWithSealedAndRecord\n+ * @run main ValidateJarWithSealedAndRecord\n+ *\/\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.tools.DiagnosticCollector;\n+import javax.tools.JavaFileObject;\n+import javax.tools.StandardJavaFileManager;\n+import javax.tools.StandardLocation;\n+import javax.tools.ToolProvider;\n+\n+public class ValidateJarWithSealedAndRecord {\n+\n+    public static void main(String args[]) throws Exception {\n+        ValidateJarWithSealedAndRecord theTest = new ValidateJarWithSealedAndRecord();\n+        theTest.run();\n+    }\n+\n+    void run() throws Exception {\n+        generateFilesNeeded();\n+    }\n+\n+    void writeFile(String f, String contents) throws IOException {\n+        PrintStream s = new PrintStream(new FileOutputStream(f));\n+        s.println(contents);\n+        s.close();\n+    }\n+\n+    void generateFilesNeeded() throws Exception {\n+        sun.tools.jar.Main jarGenerator = new sun.tools.jar.Main(System.out, System.err, \"jar\");\n+        writeFile(\"Foo.java\",\n+                \"\"\"\n+                        public sealed interface Foo {\n+                            record Bar() implements Foo {}\n+                        }\n+                        \"\"\"\n+                        );\n+        com.sun.tools.javac.Main.compile(new String[]{\"-d\", \"out\", \"Foo.java\"});\n+        jarGenerator.run(new String[] {\"--create\", \"--file\", \"foo.jar\", \"-C\", \"out\", \".\"});\n+        \/* we need to create a fresh instance with clean options in other case the tool will\n+         * keep a copy of the options we just passed above\n+         *\/\n+        jarGenerator = new sun.tools.jar.Main(System.out, System.err, \"jar\");\n+        if (!jarGenerator.run(new String[]{\"--validate\", \"--file\", \"foo.jar\"})) {\n+            throw new AssertionError(\"jar file couldn't be validated\");\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/sealed\/ValidateJarWithSealedAndRecord.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"}]}