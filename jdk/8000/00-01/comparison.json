{"files":[{"patch":"@@ -247,1 +247,1 @@\n-            super(Opcodes.ASM7);\n+            super(Opcodes.ASM9);\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/tools\/jar\/FingerPrint.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8282446 8282508\n+ * @summary Jar validation fails when sealed classes and records are involved\n+ * @modules jdk.compiler\n+ *          jdk.jartool\/sun.tools.jar\n+ * @build ValidateJarWithSealedAndRecord\n+ * @run main ValidateJarWithSealedAndRecord\n+ *\/\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.tools.DiagnosticCollector;\n+import javax.tools.JavaFileObject;\n+import javax.tools.StandardJavaFileManager;\n+import javax.tools.StandardLocation;\n+import javax.tools.ToolProvider;\n+\n+public class ValidateJarWithSealedAndRecord {\n+\n+    public static void main(String args[]) throws Exception {\n+        ValidateJarWithSealedAndRecord theTest = new ValidateJarWithSealedAndRecord();\n+        theTest.run();\n+    }\n+\n+    void run() throws Exception {\n+        generateFilesNeeded();\n+    }\n+\n+    void writeFile(String f, String contents) throws IOException {\n+        PrintStream s = new PrintStream(new FileOutputStream(f));\n+        s.println(contents);\n+        s.close();\n+    }\n+\n+    void generateFilesNeeded() throws Exception {\n+        sun.tools.jar.Main jarGenerator = new sun.tools.jar.Main(System.out, System.err, \"jar\");\n+        writeFile(\"Foo.java\",\n+                \"\"\"\n+                        public sealed interface Foo {\n+                            record Bar() implements Foo {}\n+                        }\n+                        \"\"\"\n+                        );\n+        com.sun.tools.javac.Main.compile(new String[]{\"-d\", \"out\", \"Foo.java\"});\n+        jarGenerator.run(new String[] {\"--create\", \"--file\", \"foo.jar\", \"-C\", \"out\", \".\"});\n+        \/* we need to create a fresh instance with clean options in other case the tool will\n+         * keep a copy of the options we just passed above\n+         *\/\n+        jarGenerator = new sun.tools.jar.Main(System.out, System.err, \"jar\");\n+        if (!jarGenerator.run(new String[]{\"--validate\", \"--file\", \"foo.jar\"})) {\n+            throw new AssertionError(\"jar file couldn't be validated\");\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/sealed\/ValidateJarWithSealedAndRecord.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"}]}