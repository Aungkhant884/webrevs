{"files":[{"patch":"@@ -1603,10 +1603,0 @@\n-        \/\/ With tzdata2020b, the test fails for the mentioned zones expecting\n-        \/\/ \"PST\" but JDK has Zone name \"MST\" for JRE locale provider.\n-        \/\/ Therefore excluding them as the test is only looking for a GMT-08:00\n-        \/\/ time zone ID. See JDK-8254865.\n-        final List<String> list =  new ArrayList<String>();\n-        Collections.addAll(list, ids);\n-        list.remove(\"America\/Dawson\");\n-        list.remove(\"America\/WhiteHorse\");\n-        list.remove(\"Canada\/Yukon\");\n-        ids = list.toArray(new String[list.size()]);\n","filename":"test\/jdk\/java\/util\/Formatter\/Basic-X.java.template","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -337,10 +337,0 @@\n-        \/\/ With tzdata2020b, the test fails for the mentioned zones expecting\n-        \/\/ \"PST\" but JDK has Zone name \"MST\" for JRE locale provider.\n-        \/\/ Therefore excluding them as the test is only looking for a GMT-08:00\n-        \/\/ time zone ID. See JDK-8254865.\n-        final List<String> list =  new ArrayList<String>();\n-        Collections.addAll(list, ids);\n-        list.remove(\"America\/Dawson\");\n-        list.remove(\"America\/WhiteHorse\");\n-        list.remove(\"Canada\/Yukon\");\n-        ids = list.toArray(new String[list.size()]);\n","filename":"test\/jdk\/java\/util\/Formatter\/BasicDateTime.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"}]}