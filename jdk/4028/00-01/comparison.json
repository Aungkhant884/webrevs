{"files":[{"patch":"@@ -37,1 +37,0 @@\n-#include \"runtime\/interfaceSupport.inline.hpp\"\n@@ -910,1 +909,1 @@\n-void GenerateOopMap::do_interpretation(Thread* thread)\n+void GenerateOopMap::do_interpretation()\n@@ -912,0 +911,2 @@\n+  \/\/ \"i\" is just for debugging, so we can detect cases where this loop is\n+  \/\/ iterated more than once.\n@@ -914,8 +915,0 @@\n-    if (i != 0 && thread->is_Java_thread()) {\n-      JavaThread* jt = thread->as_Java_thread();\n-      if (jt->thread_state() == _thread_in_vm) {\n-        \/\/ Since this JavaThread has looped at least once and is _thread_in_vm,\n-        \/\/ we honor any pending blocking request.\n-        ThreadBlockInVM tbivm(jt);\n-      }\n-    }\n@@ -2139,1 +2132,1 @@\n-    do_interpretation(current);\n+    do_interpretation();\n","filename":"src\/hotspot\/share\/oops\/generateOopMap.cpp","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -377,1 +377,1 @@\n-  void  do_interpretation                   (Thread* thread);\n+  void  do_interpretation                   ();\n","filename":"src\/hotspot\/share\/oops\/generateOopMap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -136,14 +136,0 @@\n-class ProcessReentranceGuard {\n-  JavaThread* const _jt;\n- public:\n-  ProcessReentranceGuard(JavaThread* jt) :\n-    _jt(jt) {\n-    assert(_jt->poll_data()->is_processing() == false, \"Must be\");\n-    _jt->poll_data()->set_is_processing(true);\n-  }\n-  ~ProcessReentranceGuard() {\n-    assert(_jt->poll_data()->is_processing() == true, \"Must be\");\n-    _jt->poll_data()->set_is_processing(false);\n-  }\n-};\n-\n@@ -151,10 +137,0 @@\n-  \/\/ Thread-local test if we are in the middle of processing a safepoint.\n-  if (thread->poll_data()->is_processing()) {\n-    \/\/ This is caused by a handshake operation reentering safepoint. We\n-    \/\/ should just return because otherwise the thread will probably block on the\n-    \/\/ reentrance of the handshake mutex. We also don't need to do anything\n-    \/\/ because the process() routine will be retried after the handshake returns.\n-    return;\n-  }\n-  ProcessReentranceGuard prg(thread);\n-\n@@ -171,1 +147,0 @@\n-  thread->poll_data()->set_is_processing(false);\n","filename":"src\/hotspot\/share\/runtime\/safepointMechanism.cpp","additions":0,"deletions":25,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -71,1 +71,0 @@\n-    bool _is_processing;\n@@ -75,3 +74,0 @@\n-    inline void set_is_processing(bool is_processing) { _is_processing = is_processing; }\n-    inline bool is_processing() const { return _is_processing; }\n-\n","filename":"src\/hotspot\/share\/runtime\/safepointMechanism.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"}]}