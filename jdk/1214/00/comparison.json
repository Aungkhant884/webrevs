{"files":[{"patch":"@@ -181,0 +181,85 @@\n+#define RANGE_FORMAT                \"[\" PTR_FORMAT \"-\" PTR_FORMAT \")\"\n+#define RANGE_FORMAT_ARGS(p, len)   p2i(p), p2i((address)p + len)\n+\n+\/\/ A number of wrappers for more frequently used system calls, to add standard logging.\n+\n+struct PreserveLastError {\n+  const DWORD v;\n+  PreserveLastError() : v(::GetLastError()) {}\n+  ~PreserveLastError() { ::SetLastError(v); }\n+};\n+\n+\/\/ Logging wrapper for VirtualAlloc\n+static LPVOID virtualAlloc(LPVOID lpAddress, SIZE_T dwSize, DWORD flAllocationType, DWORD flProtect) {\n+  LPVOID result = ::VirtualAlloc(lpAddress, dwSize, flAllocationType, flProtect);\n+  if (result != NULL) {\n+    log_trace(os)(\"VirtualAlloc(\" PTR_FORMAT \", \" SIZE_FORMAT \", %x, %x) returned \" PTR_FORMAT \"%s.\",\n+                  p2i(lpAddress), dwSize, flAllocationType, flProtect, p2i(result),\n+                  ((lpAddress != NULL && result != lpAddress) ? \" <different base!>\" : \"\"));\n+  } else {\n+    PreserveLastError ple;\n+    log_info(os)(\"VirtualAlloc(\" PTR_FORMAT \", \" SIZE_FORMAT \", %x, %x) failed (%u).\",\n+                  p2i(lpAddress), dwSize, flAllocationType, flProtect, ple.v);\n+  }\n+  return result;\n+}\n+\n+\/\/ Logging wrapper for VirtualFree\n+static BOOL virtualFree(LPVOID lpAddress, SIZE_T dwSize, DWORD  dwFreeType) {\n+  BOOL result = ::VirtualFree(lpAddress, dwSize, dwFreeType);\n+  if (result != FALSE) {\n+    log_trace(os)(\"VirtualFree(\" PTR_FORMAT \", \" SIZE_FORMAT \", %x) succeeded\",\n+                  p2i(lpAddress), dwSize, dwFreeType);\n+  } else {\n+    PreserveLastError ple;\n+    log_info(os)(\"VirtualFree(\" PTR_FORMAT \", \" SIZE_FORMAT \", %x) failed (%u).\",\n+                 p2i(lpAddress), dwSize, dwFreeType, ple.v);\n+  }\n+  return result;\n+}\n+\n+\/\/ Logging wrapper for VirtualAllocExNuma\n+static LPVOID virtualAllocExNuma(HANDLE hProcess, LPVOID lpAddress, SIZE_T dwSize, DWORD  flAllocationType,\n+                                 DWORD  flProtect, DWORD  nndPreferred) {\n+  LPVOID result = ::VirtualAllocExNuma(hProcess, lpAddress, dwSize, flAllocationType, flProtect, nndPreferred);\n+  if (result != NULL) {\n+    log_trace(os)(\"VirtualAllocExNuma(\" PTR_FORMAT \", \" SIZE_FORMAT \", %x, %x, %x) returned \" PTR_FORMAT \"%s.\",\n+                  p2i(lpAddress), dwSize, flAllocationType, flProtect, nndPreferred, p2i(result),\n+                  ((lpAddress != NULL && result != lpAddress) ? \" <different base!>\" : \"\"));\n+  } else {\n+    PreserveLastError ple;\n+    log_info(os)(\"VirtualAllocExNuma(\" PTR_FORMAT \", \" SIZE_FORMAT \", %x, %x, %x) failed (%u).\",\n+                 p2i(lpAddress), dwSize, flAllocationType, flProtect, nndPreferred, ple.v);\n+  }\n+  return result;\n+}\n+\n+\/\/ Logging wrapper for MapViewOfFileEx\n+static LPVOID mapViewOfFileEx(HANDLE hFileMappingObject, DWORD  dwDesiredAccess, DWORD  dwFileOffsetHigh,\n+                              DWORD  dwFileOffsetLow, SIZE_T dwNumberOfBytesToMap, LPVOID lpBaseAddress) {\n+  LPVOID result = ::MapViewOfFileEx(hFileMappingObject, dwDesiredAccess, dwFileOffsetHigh,\n+                                    dwFileOffsetLow, dwNumberOfBytesToMap, lpBaseAddress);\n+  if (result != NULL) {\n+    log_trace(os)(\"MapViewOfFileEx(\" PTR_FORMAT \", \" SIZE_FORMAT \") returned \" PTR_FORMAT \"%s.\",\n+                  p2i(lpBaseAddress), dwNumberOfBytesToMap, p2i(result),\n+                  ((lpBaseAddress != NULL && result != lpBaseAddress) ? \" <different base!>\" : \"\"));\n+  } else {\n+    PreserveLastError ple;\n+    log_info(os)(\"MapViewOfFileEx(\" PTR_FORMAT \", \" SIZE_FORMAT \") failed (%u).\",\n+                 p2i(lpBaseAddress), dwNumberOfBytesToMap, ple.v);\n+  }\n+  return result;\n+}\n+\n+\/\/ Logging wrapper for UnmapViewOfFile\n+static BOOL unmapViewOfFile(LPCVOID lpBaseAddress) {\n+  BOOL result = ::UnmapViewOfFile(lpBaseAddress);\n+  if (result != FALSE) {\n+    log_trace(os)(\"UnmapViewOfFile(\" PTR_FORMAT \") succeeded\", p2i(lpBaseAddress));\n+  } else {\n+    PreserveLastError ple;\n+    log_info(os)(\"UnmapViewOfFile(\" PTR_FORMAT \") failed (%u).\",  p2i(lpBaseAddress), ple.v);\n+  }\n+  return result;\n+}\n+\n@@ -343,1 +428,0 @@\n-\n@@ -2903,1 +2987,1 @@\n-  p_buf = (char *) VirtualAlloc(addr,\n+  p_buf = (char *) virtualAlloc(addr,\n@@ -2949,1 +3033,1 @@\n-        p_new = (char *) VirtualAlloc(next_alloc_addr,\n+        p_new = (char *) virtualAlloc(next_alloc_addr,\n@@ -2957,1 +3041,1 @@\n-        p_new = (char *)VirtualAllocExNuma(hProc, next_alloc_addr, bytes_to_rq, flags, prot, node);\n+        p_new = (char *)virtualAllocExNuma(hProc, next_alloc_addr, bytes_to_rq, flags, prot, node);\n@@ -3103,1 +3187,1 @@\n-  LPVOID addr = MapViewOfFileEx(fileMapping, FILE_MAP_WRITE, 0, 0, size, base);\n+  LPVOID addr = mapViewOfFileEx(fileMapping, FILE_MAP_WRITE, 0, 0, size, base);\n@@ -3130,3 +3214,9 @@\n-  release_memory(base, size);\n-  attempt_reserve_memory_at(base, split);\n-  attempt_reserve_memory_at(split_address, size - split);\n+  const bool rc = release_memory(base, size) &&\n+                  (attempt_reserve_memory_at(base, split) != NULL) &&\n+                  (attempt_reserve_memory_at(split_address, size - split) != NULL);\n+  if (!rc) {\n+    log_warning(os)(\"os::split_reserved_memory failed for [\" RANGE_FORMAT \")\",\n+                    RANGE_FORMAT_ARGS(base, size));\n+    assert(false, \"os::split_reserved_memory failed for [\" RANGE_FORMAT \")\",\n+                    RANGE_FORMAT_ARGS(base, size));\n+  }\n@@ -3137,1 +3227,0 @@\n-\n@@ -3201,1 +3290,1 @@\n-    res = (char*)VirtualAlloc(addr, bytes, MEM_RESERVE, PAGE_READWRITE);\n+    res = (char*)virtualAlloc(addr, bytes, MEM_RESERVE, PAGE_READWRITE);\n@@ -3280,1 +3369,1 @@\n-    char * res = (char *)VirtualAlloc(addr, bytes, flag, prot);\n+    char * res = (char *)virtualAlloc(addr, bytes, flag, prot);\n@@ -3317,1 +3406,1 @@\n-    if (VirtualAlloc(addr, bytes, MEM_COMMIT, PAGE_READWRITE) == NULL) {\n+    if (virtualAlloc(addr, bytes, MEM_COMMIT, PAGE_READWRITE) == NULL) {\n@@ -3342,1 +3431,1 @@\n-      if (VirtualAlloc(next_alloc_addr, bytes_to_rq, MEM_COMMIT,\n+      if (virtualAlloc(next_alloc_addr, bytes_to_rq, MEM_COMMIT,\n@@ -3394,1 +3483,1 @@\n-  return (VirtualFree(addr, bytes, MEM_DECOMMIT) != 0);\n+  return (virtualFree(addr, bytes, MEM_DECOMMIT) == TRUE);\n@@ -3398,1 +3487,1 @@\n-  return VirtualFree(addr, 0, MEM_RELEASE) != 0;\n+  return virtualFree(addr, 0, MEM_RELEASE) != 0;\n@@ -4944,1 +5033,1 @@\n-    base = (char*) VirtualAlloc(addr, bytes, MEM_COMMIT | MEM_RESERVE,\n+    base = (char*) virtualAlloc(addr, bytes, MEM_COMMIT | MEM_RESERVE,\n@@ -4947,1 +5036,0 @@\n-      log_info(os)(\"VirtualAlloc() failed: GetLastError->%ld.\", GetLastError());\n@@ -4979,1 +5067,1 @@\n-    base = (char*)MapViewOfFileEx(hMap, access, 0, (DWORD)file_offset,\n+    base = (char*)mapViewOfFileEx(hMap, access, 0, (DWORD)file_offset,\n@@ -4982,1 +5070,0 @@\n-      log_info(os)(\"MapViewOfFileEx() failed: GetLastError->%ld.\", GetLastError());\n@@ -5054,1 +5141,1 @@\n-  BOOL result = UnmapViewOfFile(addr);\n+  BOOL result = unmapViewOfFile(addr);\n@@ -5056,1 +5143,0 @@\n-    log_info(os)(\"UnmapViewOfFile() failed: GetLastError->%ld.\", GetLastError());\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":107,"deletions":21,"binary":false,"changes":128,"status":"modified"}]}