{"files":[{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -70,1 +70,1 @@\n-TOOL_BLACKLISTED_CERTS = $(JAVA_SMALL) -cp $(BUILDTOOLS_OUTPUTDIR)\/jdk_tools_classes \\\n+TOOL_BLOCKED_CERTS = $(JAVA_SMALL) -cp $(BUILDTOOLS_OUTPUTDIR)\/jdk_tools_classes \\\n@@ -72,1 +72,1 @@\n-    build.tools.blacklistedcertsconverter.BlacklistedCertsConverter\n+    build.tools.blockedcertsconverter.BlockedCertsConverter\n","filename":"make\/ToolsJdk.gmk","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-#! java BlacklistedCertsConverter SHA-256\n+#! java BlockedCertsConverter SHA-256\n","filename":"make\/data\/blockedcertsconverter\/blocked.certs.pem","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"make\/data\/blacklistedcertsconverter\/blacklisted.certs.pem","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-package build.tools.blacklistedcertsconverter;\n+package build.tools.blockedcertsconverter;\n@@ -48,1 +48,1 @@\n- * Converts blacklisted.certs.pem from System.in to blacklisted.certs in\n+ * Converts blocked.certs.pem from System.in to blocked.certs in\n@@ -52,1 +52,1 @@\n-public class BlacklistedCertsConverter {\n+public class BlockedCertsConverter {\n@@ -56,1 +56,1 @@\n-        byte[] pattern = \"#! java BlacklistedCertsConverter \".getBytes();\n+        byte[] pattern = \"#! java BlockedCertsConverter \".getBytes();\n","filename":"make\/jdk\/src\/classes\/build\/tools\/blockedcertsconverter\/BlockedCertsConverter.java","additions":5,"deletions":5,"binary":false,"changes":10,"previous_filename":"make\/jdk\/src\/classes\/build\/tools\/blacklistedcertsconverter\/BlacklistedCertsConverter.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n-include gendata\/GendataBlacklistedCerts.gmk\n+include gendata\/GendataBlockedCerts.gmk\n","filename":"make\/modules\/java.base\/Gendata.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,34 +0,0 @@\n-#\n-# Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.  Oracle designates this\n-# particular file as subject to the \"Classpath\" exception as provided\n-# by Oracle in the LICENSE file that accompanied this code.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-GENDATA_BLACKLISTED_CERTS_SRC += $(TOPDIR)\/make\/data\/blacklistedcertsconverter\/blacklisted.certs.pem\n-GENDATA_BLACKLISTED_CERTS := $(SUPPORT_OUTPUTDIR)\/modules_libs\/$(MODULE)\/security\/blacklisted.certs\n-\n-$(GENDATA_BLACKLISTED_CERTS): $(BUILD_TOOLS_JDK) $(GENDATA_BLACKLISTED_CERTS_SRC)\n-\t$(call LogInfo, Generating blacklisted certs)\n-\t$(call MakeDir, $(@D))\n-\t($(CAT) $(GENDATA_BLACKLISTED_CERTS_SRC) | $(TOOL_BLACKLISTED_CERTS) > $@) || exit 1\n-\n-TARGETS += $(GENDATA_BLACKLISTED_CERTS)\n","filename":"make\/modules\/java.base\/gendata\/GendataBlacklistedCerts.gmk","additions":0,"deletions":34,"binary":false,"changes":34,"status":"deleted"},{"patch":"@@ -0,0 +1,34 @@\n+#\n+# Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.  Oracle designates this\n+# particular file as subject to the \"Classpath\" exception as provided\n+# by Oracle in the LICENSE file that accompanied this code.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+GENDATA_BLOCKED_CERTS_SRC += $(TOPDIR)\/make\/data\/blockedcertsconverter\/blocked.certs.pem\n+GENDATA_BLOCKED_CERTS := $(SUPPORT_OUTPUTDIR)\/modules_libs\/$(MODULE)\/security\/blocked.certs\n+\n+$(GENDATA_BLOCKED_CERTS): $(BUILD_TOOLS_JDK) $(GENDATA_BLOCKED_CERTS_SRC)\n+\t$(call LogInfo, Generating blocked certs)\n+\t$(call MakeDir, $(@D))\n+\t($(CAT) $(GENDATA_BLOCKED_CERTS_SRC) | $(TOOL_BLOCKED_CERTS) > $@) || exit 1\n+\n+TARGETS += $(GENDATA_BLOCKED_CERTS)\n","filename":"make\/modules\/java.base\/gendata\/GendataBlockedCerts.gmk","additions":34,"deletions":0,"binary":false,"changes":34,"status":"added"},{"patch":"@@ -3,1 +3,1 @@\n-# Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1087,1 +1087,1 @@\n-            -o -name 'blacklist' -o -name '*certs' -o -name '*.ttf' \\\n+            -o -name 'blocked' -o -name '*certs' -o -name '*.ttf' \\\n","filename":"make\/scripts\/compare.sh","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -554,1 +554,1 @@\n-             *     { password + whitener + preceding body }\n+             *     { password + extra data + preceding body }\n@@ -900,1 +900,1 @@\n-     * hash with a bit of whitener.\n+     * hash with a bit of extra data.\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/JceKeyStore.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -93,1 +93,1 @@\n-    \/** collect -DIGEST-MANIFEST values for blacklist *\/\n+    \/** collect -DIGEST-MANIFEST values for deny list *\/\n","filename":"src\/java.base\/share\/classes\/java\/util\/jar\/JarVerifier.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -554,1 +554,1 @@\n-             *     { password + whitener + preceding body }\n+             *     { password + extra data + preceding body }\n@@ -820,1 +820,1 @@\n-     * hash with a bit of whitener.\n+     * hash with a bit of extra data.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/JavaKeyStore.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,1 +58,1 @@\n-                        \"lib\/security\/blacklisted.certs\");\n+                        \"lib\/security\/blocked.certs\");\n@@ -63,1 +63,1 @@\n-                        debug.println(\"Error parsing blacklisted.certs\");\n+                        debug.println(\"Error parsing blocked.certs\");\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/UntrustedCertificates.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -444,1 +444,1 @@\n-# put inside a blacklist and accessed less often for future requests. The\n+# put inside a secondary list and accessed less often for future requests. The\n@@ -448,1 +448,1 @@\n-#    KDCs in the blacklist are always tried after those not on the list.\n+#    KDCs in the secondary list are always tried after those not on the list.\n@@ -451,8 +451,9 @@\n-#    KDCs in the blacklist are still tried by their order in the configuration,\n-#    but with smaller max_retries and timeout values. max_retries and timeout\n-#    are optional numerical parameters (default 1 and 5000, which means once\n-#    and 5 seconds). Please notes that if any of the values defined here is\n-#    more than what is defined in krb5.conf, it will be ignored.\n-#\n-# Whenever a KDC is detected as available, it is removed from the blacklist.\n-# The blacklist is reset when krb5.conf is reloaded. You can add\n+#    KDCs in the secondary list are still tried by their order in the\n+#    configuration, but with smaller max_retries and timeout values.\n+#    max_retries and timeout are optional numerical parameters (default 1 and\n+#    5000, which means once and 5 seconds). Please note that if any of the\n+#    values defined here are more than what is defined in krb5.conf, it will be\n+#    ignored.\n+#\n+# Whenever a KDC is detected as available, it is removed from the secondary\n+# list. The secondary list is reset when krb5.conf is reloaded. You can add\n","filename":"src\/java.base\/share\/conf\/security\/java.security","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -1333,1 +1333,1 @@\n-     * @param realm the realm for which the master KDC is desired\n+     * @param realm the realm for which the primary KDC is desired\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/Config.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -493,2 +493,2 @@\n-     * blacklist, when a KDC in the blacklist is available, it's removed\n-     * from there. No insertion order in the blacklist.\n+     * secondary KDC list. When a KDC in the secondary list is available,\n+     * it is removed from there. No insertion order in the secondary KDC list.\n@@ -496,3 +496,3 @@\n-     * There are two methods to deal with KDCs in the blacklist. 1. Only try\n-     * them when there's no KDC not on the blacklist. 2. Still try them, but\n-     * with lesser number of retries and smaller timeout value.\n+     * There are two methods to deal with KDCs in the secondary KDC list.\n+     * 1. Only try them when they are the only known KDCs.\n+     * 2. Still try them, but with fewer retries and a smaller timeout value.\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/KdcComm.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,2 +37,2 @@\n- * @summary Checks that Kerberos client tries slave KDC\n- *          if master KDC is not responding\n+ * @summary Checks that Kerberos client tries replica KDC\n+ *          if primary KDC is not responding\n@@ -83,2 +83,2 @@\n-        \/\/ create a krb5 config with non-existing host for master KDC,\n-        \/\/ and wrong port for slave KDC\n+        \/\/ create a krb5 config with non-existing host for primary KDC,\n+        \/\/ and wrong port for replica KDC\n@@ -99,2 +99,2 @@\n-        \/\/ create a krb5 config with non-existing host for master KDC,\n-        \/\/ but correct port for slave KDC\n+        \/\/ create a krb5 config with non-existing host for primary KDC,\n+        \/\/ but correct port for replica KDC\n","filename":"test\/jdk\/sun\/security\/krb5\/auto\/BogusKDC.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1,116 +0,0 @@\n-\/*\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8011402 8211969 8237995\n- * @summary Move blacklisting certificate logic from hard code to data\n- * @modules java.base\/sun.security.util\n- *\/\n-\n-import sun.security.util.UntrustedCertificates;\n-\n-import java.io.*;\n-import java.security.KeyStore;\n-import java.security.cert.*;\n-import java.util.*;\n-\n-public class CheckBlacklistedCerts {\n-    public static void main(String[] args) throws Exception {\n-\n-        String home = System.getProperty(\"java.home\");\n-        boolean failed = false;\n-\n-        \/\/ Root CAs should always be trusted\n-        File file = new File(home, \"lib\/security\/cacerts\");\n-        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n-        try (FileInputStream fis = new FileInputStream(file)) {\n-            ks.load(fis, null);\n-        }\n-        System.out.println(\"Check for cacerts: \" + ks.size());\n-        for (String alias: Collections.list(ks.aliases())) {\n-            X509Certificate cert = (X509Certificate)ks.getCertificate(alias);\n-            if (UntrustedCertificates.isUntrusted(cert)) {\n-                System.out.print(alias + \" is untrusted\");\n-                failed = true;\n-            }\n-        }\n-\n-        \/\/ All certs in the pem files\n-        Set<Certificate> blacklisted = new HashSet<>();\n-\n-        \/\/ Assumes the full src is available\n-        File blacklist = new File(System.getProperty(\"test.src\"),\n-                \"..\/..\/..\/..\/..\/make\/data\/blacklistedcertsconverter\/blacklisted.certs.pem\");\n-\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-        try (FileInputStream fis = new FileInputStream(blacklist)) {\n-            Collection<? extends Certificate> certs\n-                    = cf.generateCertificates(fis);\n-            System.out.println(certs.size());\n-            for (Certificate c: certs) {\n-                blacklisted.add(c);\n-                X509Certificate cert = ((X509Certificate)c);\n-                if (!UntrustedCertificates.isUntrusted(cert)) {\n-                    System.out.println(cert.getSubjectDN() + \" is trusted\");\n-                    failed = true;\n-                }\n-            }\n-        }\n-\n-        \/\/ Check the blacklisted.certs file itself\n-        file = new File(home, \"lib\/security\/blacklisted.certs\");\n-        System.out.print(\"Check for \" + file + \": \");\n-        try (BufferedReader reader = new BufferedReader(\n-                new InputStreamReader(new FileInputStream(file)))) {\n-            int acount = 0;\n-            int ccount = 0;\n-            while (true) {\n-                String line = reader.readLine();\n-                if (line == null) break;\n-                if (line.startsWith(\"Algorithm\")) {\n-                    acount++;\n-                } else if (!line.isEmpty() && !line.startsWith(\"#\")) {\n-                    ccount++;\n-                }\n-            }\n-            System.out.println(acount + \" algs, \" + ccount + \" certs\" );\n-            if (acount != 1) {\n-                System.out.println(\"There are \" + acount + \" algorithms\");\n-                failed = true;\n-            }\n-            \/\/ There are two unique fingerprints for each RSA certificate\n-            if (ccount != blacklisted.size() * 2\n-                    && !blacklisted.isEmpty()) {\n-                System.out.println(\"Wrong blacklisted.certs size: \"\n-                        + ccount + \" fingerprints, \"\n-                        + blacklisted.size() + \" certs\");\n-                failed = true;\n-            }\n-        }\n-\n-        if (failed) {\n-            throw new Exception(\"Failed\");\n-        }\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/lib\/CheckBlacklistedCerts.java","additions":0,"deletions":116,"binary":false,"changes":116,"status":"deleted"},{"patch":"@@ -0,0 +1,117 @@\n+\/*\n+ * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8011402 8211969 8237995\n+ * @summary Move blacklisting certificate logic from hard code to data\n+ * @modules java.base\/sun.security.util\n+ *\/\n+\n+import sun.security.util.UntrustedCertificates;\n+\n+import java.io.*;\n+import java.security.KeyStore;\n+import java.security.cert.*;\n+import java.util.*;\n+\n+public class CheckBlockedCerts {\n+    public static void main(String[] args) throws Exception {\n+\n+        String home = System.getProperty(\"java.home\");\n+        boolean failed = false;\n+\n+        \/\/ Root CAs should always be trusted\n+        File file = new File(home, \"lib\/security\/cacerts\");\n+        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n+        try (FileInputStream fis = new FileInputStream(file)) {\n+            ks.load(fis, null);\n+        }\n+        System.out.println(\"Check for cacerts: \" + ks.size());\n+        for (String alias: Collections.list(ks.aliases())) {\n+            X509Certificate cert = (X509Certificate)ks.getCertificate(alias);\n+            if (UntrustedCertificates.isUntrusted(cert)) {\n+                System.out.print(alias + \" is untrusted\");\n+                failed = true;\n+            }\n+        }\n+\n+        \/\/ All certs in the pem files\n+        Set<Certificate> blocked = new HashSet<>();\n+\n+        \/\/ Assumes the full src is available\n+        File blockedCertsFile = new File(System.getProperty(\"test.src\"),\n+                \"..\/..\/..\/..\/..\/make\/data\/blockedcertsconverter\/blocked.certs.pem\");\n+\n+        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n+        try (FileInputStream fis = new FileInputStream(blockedCertsFile)) {\n+            Collection<? extends Certificate> certs\n+                    = cf.generateCertificates(fis);\n+            System.out.println(certs.size());\n+            for (Certificate c: certs) {\n+                blocked.add(c);\n+                X509Certificate cert = ((X509Certificate)c);\n+                if (!UntrustedCertificates.isUntrusted(cert)) {\n+                    System.out.println(cert.getSubjectX500Principal() +\n+                            \" is trusted\");\n+                    failed = true;\n+                }\n+            }\n+        }\n+\n+        \/\/ Check the blocked.certs file itself\n+        file = new File(home, \"lib\/security\/blocked.certs\");\n+        System.out.print(\"Check for \" + file + \": \");\n+        try (BufferedReader reader = new BufferedReader(\n+                new InputStreamReader(new FileInputStream(file)))) {\n+            int acount = 0;\n+            int ccount = 0;\n+            while (true) {\n+                String line = reader.readLine();\n+                if (line == null) break;\n+                if (line.startsWith(\"Algorithm\")) {\n+                    acount++;\n+                } else if (!line.isEmpty() && !line.startsWith(\"#\")) {\n+                    ccount++;\n+                }\n+            }\n+            System.out.println(acount + \" algs, \" + ccount + \" certs\" );\n+            if (acount != 1) {\n+                System.out.println(\"There are \" + acount + \" algorithms\");\n+                failed = true;\n+            }\n+            \/\/ There are two unique fingerprints for each RSA certificate\n+            if (ccount != blocked.size() * 2\n+                    && !blocked.isEmpty()) {\n+                System.out.println(\"Wrong blocked.certs size: \"\n+                        + ccount + \" fingerprints, \"\n+                        + blocked.size() + \" certs\");\n+                failed = true;\n+            }\n+        }\n+\n+        if (failed) {\n+            throw new Exception(\"Failed\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/lib\/CheckBlockedCerts.java","additions":117,"deletions":0,"binary":false,"changes":117,"status":"added"}]}