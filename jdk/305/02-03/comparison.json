{"files":[{"patch":"@@ -48,1 +48,0 @@\n-import jdk.tools.jlink.plugin.Plugin;\n@@ -59,1 +58,1 @@\n-public final class StripNativeDebugSymbolsPlugin implements Plugin {\n+public final class StripNativeDebugSymbolsPlugin extends AbstractPlugin {\n@@ -95,0 +94,1 @@\n+        super(NAME, resourceBundle);\n@@ -98,8 +98,0 @@\n-    @Override\n-    public String getName() {\n-        return NAME;\n-    }\n-\n-    @Override\n-    public String getUsage() { return resourceBundle.getString(NAME + \".usage\"); }\n-\n@@ -143,4 +135,3 @@\n-        String msg = PluginsResourceBundle.getMessage(resourceBundle,\n-                                                      msgKey,\n-                                                      NAME,\n-                                                      resource.path());\n+        String msg = getMessage(msgKey,\n+                                NAME,\n+                                resource.path());\n@@ -155,6 +146,0 @@\n-    @Override\n-    public String getDescription() {\n-        String key = NAME + \".description\";\n-        return PluginsResourceBundle.getMessage(resourceBundle, key);\n-    }\n-\n@@ -166,6 +151,0 @@\n-    @Override\n-    public String getArgumentsDescription() {\n-        String key = NAME + \".argument\";\n-        return PluginsResourceBundle.getMessage(resourceBundle, key);\n-    }\n-\n@@ -202,2 +181,1 @@\n-                        PluginsResourceBundle.getMessage(resourceBundle,\n-                                                         NAME + \".iae\", NAME, arg));\n+                        getMessage(NAME + \".iae\", NAME, arg));\n@@ -217,2 +195,1 @@\n-                        PluginsResourceBundle.getMessage(resourceBundle,\n-                                                         NAME + \".iae\", NAME, arg));\n+                        getMessage(NAME + \".iae\", NAME, arg));\n@@ -252,5 +229,4 @@\n-                    PluginsResourceBundle.getMessage(resourceBundle,\n-                                                     NAME + \".iae.conflict\",\n-                                                     NAME,\n-                                                     EXCLUDE_DEBUG_INFO_ARG,\n-                                                     KEEP_DEBUG_INFO_ARG));\n+                    getMessage(NAME + \".iae.conflict\",\n+                               NAME,\n+                               EXCLUDE_DEBUG_INFO_ARG,\n+                               KEEP_DEBUG_INFO_ARG));\n@@ -263,2 +239,1 @@\n-                    PluginsResourceBundle.getMessage(resourceBundle,\n-                                                     NAME + \".iae\", NAME, arg));\n+                    getMessage(NAME + \".iae\", NAME, arg));\n@@ -269,3 +244,2 @@\n-                    PluginsResourceBundle.getMessage(resourceBundle,\n-                                                     NAME + \".iae\", NAME,\n-                                                     config.toString()));\n+                    getMessage(NAME + \".iae\", NAME,\n+                               config.toString()));\n@@ -281,3 +255,2 @@\n-                        PluginsResourceBundle.getMessage(resourceBundle,\n-                                                         NAME + \".invalidstrip\",\n-                                                         stripArg));\n+                        getMessage(NAME + \".invalidstrip\",\n+                                   stripArg));\n@@ -287,3 +260,2 @@\n-                    PluginsResourceBundle.getMessage(resourceBundle,\n-                                                     NAME + \".invalidstrip\",\n-                                                     e.getInput()));\n+                    getMessage(NAME + \".invalidstrip\",\n+                               e.getInput()));\n","filename":"src\/jdk.jlink\/linux\/classes\/jdk\/tools\/jlink\/internal\/plugins\/StripNativeDebugSymbolsPlugin.java","additions":18,"deletions":46,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -33,1 +33,2 @@\n-import java.util.*;\n+import java.util.Map;\n+import java.util.HashMap;\n@@ -35,0 +36,5 @@\n+import java.util.Set;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n@@ -37,0 +43,6 @@\n+import java.util.Collections;\n+import java.util.Locale;\n+import java.util.ResourceBundle;\n+import java.util.MissingResourceException;\n+import java.util.Comparator;\n+\n@@ -366,1 +378,1 @@\n-                                m.put(DefaultCompressPlugin.NAME, DefaultCompressPlugin.LEVEL_2);\n+                                m.put(plugin.getName(), DefaultCompressPlugin.LEVEL_2);\n@@ -379,1 +391,1 @@\n-                            m.put(ExcludeJmodSectionPlugin.NAME,\n+                            m.put(plugin.getName(),\n@@ -386,1 +398,1 @@\n-                        m.put(ExcludeJmodSectionPlugin.NAME,\n+                        m.put(plugin.getName(),\n@@ -443,2 +455,2 @@\n-                        (STRIP_NATIVE_DEBUG_SYMBOLS_NAME.equals(plugin.getName()) && seenPlugins.contains(DefaultStripDebugPlugin.NAME))) {\n-                        throw new BadArgs(\"err.plugin.conflicts\", \"--\" + DefaultStripDebugPlugin.NAME,\n+                        (STRIP_NATIVE_DEBUG_SYMBOLS_NAME.equals(plugin.getName()) && seenPlugins.contains(plugin.getName()))) {\n+                        throw new BadArgs(\"err.plugin.conflicts\", \"--\" + plugin.getName(),\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/TaskHelper.java","additions":18,"deletions":6,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.tools.jlink.internal.plugins;\n+\n+import jdk.tools.jlink.plugin.Plugin;\n+\n+import java.util.Locale;\n+import java.util.MissingResourceException;\n+import java.util.ResourceBundle;\n+\n+public abstract class AbstractPlugin implements Plugin {\n+\n+    static final String DESCRIPTION = \"description\";\n+    static final String USAGE = \"usage\";\n+\n+    private static final ResourceBundle standardPluginsBundle;\n+\n+    static {\n+        Locale locale = Locale.getDefault();\n+        try {\n+            standardPluginsBundle = ResourceBundle.getBundle(\"jdk.tools.jlink.\"\n+                    + \"resources.plugins\", locale);\n+        } catch (MissingResourceException e) {\n+            throw new InternalError(\"Cannot find jlink resource bundle for \"\n+                    + \"locale \" + locale);\n+        }\n+    }\n+\n+    private final ResourceBundle pluginsBundle;\n+    private final String name;\n+\n+    protected AbstractPlugin(String name) {\n+        this.name = name;\n+        this.pluginsBundle = standardPluginsBundle;\n+    }\n+\n+    protected AbstractPlugin(String name, ResourceBundle bundle) {\n+        this.name = name;\n+        this.pluginsBundle = bundle;\n+    }\n+    @Override\n+    public String getName() {\n+        return name;\n+    }\n+\n+    @Override\n+    public String getDescription() {\n+        return getMessage(getName() + \".\" + DESCRIPTION, getName());\n+    }\n+\n+    @Override\n+    public String getUsage() {\n+        return getMessage(getName() + \".\" + USAGE, getName());\n+    }\n+\n+    @Override\n+    public String getArgumentsDescription() {\n+        return PluginsResourceBundle.getArgument(getName());\n+    }\n+\n+    protected String getMessage(String key, Object...args) {\n+       return PluginsResourceBundle.getMessage(this.pluginsBundle, key, args);\n+    }\n+}\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/AbstractPlugin.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -32,1 +32,0 @@\n-import jdk.tools.jlink.plugin.Plugin;\n@@ -40,1 +39,1 @@\n-abstract class AddResourcePlugin extends DocumentedPlugin {\n+abstract class AddResourcePlugin extends AbstractPlugin {\n@@ -42,1 +41,0 @@\n-    \/\/private final String name;\n@@ -46,2 +44,2 @@\n-    protected AddResourcePlugin(String n, String p) {\n-        super(n);\n+    protected AddResourcePlugin(String name, String p) {\n+        super(name);\n@@ -66,4 +64,0 @@\n-    @Override\n-    public String getArgumentsDescription() {\n-       return PluginsResourceBundle.getArgument(getName());\n-    }\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/AddResourcePlugin.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import jdk.tools.jlink.plugin.Plugin;\n@@ -43,2 +42,1 @@\n-public final class DefaultCompressPlugin extends DocumentedPlugin implements ResourcePrevisitor {\n-    public static final String NAME = \"compress\";\n+public final class DefaultCompressPlugin extends AbstractPlugin implements ResourcePrevisitor {\n@@ -54,1 +52,1 @@\n-        super(NAME);\n+        super(\"compress\");\n@@ -90,5 +88,0 @@\n-    @Override\n-    public String getArgumentsDescription() {\n-       return PluginsResourceBundle.getArgument(NAME);\n-    }\n-\n@@ -98,1 +91,1 @@\n-        String level = config.get(NAME);\n+        String level = config.get(getName());\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/DefaultCompressPlugin.java","additions":3,"deletions":10,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-public final class DefaultStripDebugPlugin extends DocumentedPlugin {\n+public final class DefaultStripDebugPlugin extends AbstractPlugin {\n@@ -44,1 +44,0 @@\n-    public static final String NAME = \"strip-debug\";\n@@ -58,1 +57,1 @@\n-        super(NAME);\n+        super(\"strip-debug\");\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/DefaultStripDebugPlugin.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,26 +0,0 @@\n-package jdk.tools.jlink.internal.plugins;\n-\n-import jdk.tools.jlink.plugin.Plugin;\n-\n-public abstract class DocumentedPlugin implements Plugin {\n-\n-    private final String NAME;\n-    protected DocumentedPlugin(String name) {\n-        this.NAME = name;\n-    }\n-\n-    @Override\n-    public String getName() {\n-        return this.NAME;\n-    }\n-\n-    @Override\n-    public String getDescription() {\n-        return PluginsResourceBundle.getDescription(NAME);\n-    }\n-\n-    @Override\n-    public String getUsage() {\n-        return PluginsResourceBundle.getUsage(NAME);\n-    };\n-}\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/DocumentedPlugin.java","additions":0,"deletions":26,"binary":false,"changes":26,"status":"deleted"},{"patch":"@@ -29,1 +29,1 @@\n-import jdk.tools.jlink.plugin.Plugin;\n+\n@@ -38,1 +38,1 @@\n-public final class ExcludeFilesPlugin extends DocumentedPlugin {\n+public final class ExcludeFilesPlugin extends AbstractPlugin {\n@@ -40,1 +40,0 @@\n-    public static final String NAME = \"exclude-files\";\n@@ -44,1 +43,1 @@\n-        super(NAME);\n+        super(\"exclude-files\");\n@@ -68,5 +67,0 @@\n-    @Override\n-    public String getArgumentsDescription() {\n-       return PluginsResourceBundle.getArgument(NAME);\n-    }\n-\n@@ -75,1 +69,1 @@\n-        predicate = ResourceFilter.excludeFilter(config.get(NAME));\n+        predicate = ResourceFilter.excludeFilter(config.get(getName()));\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/ExcludeFilesPlugin.java","additions":4,"deletions":10,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import jdk.tools.jlink.plugin.Plugin;\n@@ -40,1 +39,1 @@\n-public final class ExcludeJmodSectionPlugin extends DocumentedPlugin {\n+public final class ExcludeJmodSectionPlugin extends AbstractPlugin {\n@@ -42,1 +41,0 @@\n-    public static final String NAME = \"exclude-jmod-section\";\n@@ -49,1 +47,1 @@\n-        super(NAME);\n+        super(\"exclude-jmod-section\");\n@@ -54,1 +52,1 @@\n-        String arg = config.get(NAME);\n+        String arg = config.get(getName());\n@@ -93,4 +91,0 @@\n-    @Override\n-    public String getArgumentsDescription() {\n-       return PluginsResourceBundle.getArgument(NAME);\n-    }\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/ExcludeJmodSectionPlugin.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-import jdk.tools.jlink.plugin.Plugin;\n+\n@@ -39,1 +39,1 @@\n-public final class ExcludePlugin extends DocumentedPlugin {\n+public final class ExcludePlugin extends AbstractPlugin {\n@@ -41,1 +41,0 @@\n-    public static final String NAME = \"exclude-resources\";\n@@ -44,0 +43,1 @@\n+\n@@ -45,1 +45,1 @@\n-        super(NAME);\n+        super(\"exclude-resources\");\n@@ -70,5 +70,0 @@\n-    @Override\n-    public String getArgumentsDescription() {\n-       return PluginsResourceBundle.getArgument(NAME);\n-    }\n-\n@@ -82,1 +77,1 @@\n-        predicate = ResourceFilter.excludeFilter(config.get(NAME));\n+        predicate = ResourceFilter.excludeFilter(config.get(getName()));\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/ExcludePlugin.java","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n-import jdk.tools.jlink.plugin.Plugin;\n@@ -51,1 +50,1 @@\n-public final class ExcludeVMPlugin extends DocumentedPlugin {\n+public final class ExcludeVMPlugin extends AbstractPlugin {\n@@ -83,1 +82,0 @@\n-    public static final String NAME = \"vm\";\n@@ -94,1 +92,1 @@\n-        super(NAME);\n+        super(\"vm\");\n@@ -179,5 +177,0 @@\n-    @Override\n-    public String getArgumentsDescription() {\n-       return PluginsResourceBundle.getArgument(NAME);\n-    }\n-\n@@ -186,1 +179,1 @@\n-        String value = config.get(NAME);\n+        String value = config.get(getName());\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/ExcludeVMPlugin.java","additions":3,"deletions":10,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n-import jdk.tools.jlink.plugin.Plugin;\n@@ -64,1 +63,1 @@\n-public final class GenerateJLIClassesPlugin extends DocumentedPlugin {\n+public final class GenerateJLIClassesPlugin extends AbstractPlugin {\n@@ -66,3 +65,0 @@\n-    private static final String NAME = \"generate-jli-classes\";\n-\n-    private static final String DESCRIPTION = PluginsResourceBundle.getDescription(NAME);\n@@ -79,1 +75,1 @@\n-        super(NAME);\n+        super(\"generate-jli-classes\");\n@@ -92,5 +88,0 @@\n-    @Override\n-    public String getArgumentsDescription() {\n-       return PluginsResourceBundle.getArgument(NAME);\n-    }\n-\n@@ -99,1 +90,1 @@\n-        mainArgument = config.get(NAME);\n+        mainArgument = config.get(getName());\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/GenerateJLIClassesPlugin.java","additions":3,"deletions":12,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -51,1 +51,0 @@\n-import jdk.tools.jlink.plugin.Plugin;\n@@ -79,1 +78,1 @@\n-public final class IncludeLocalesPlugin extends DocumentedPlugin implements ResourcePrevisitor {\n+public final class IncludeLocalesPlugin extends AbstractPlugin implements ResourcePrevisitor {\n@@ -81,1 +80,0 @@\n-    public static final String NAME = \"include-locales\";\n@@ -151,1 +149,1 @@\n-        super(NAME);\n+        super(\"include-locales\");\n@@ -187,5 +185,0 @@\n-    @Override\n-    public String getArgumentsDescription() {\n-       return PluginsResourceBundle.getArgument(NAME);\n-    }\n-\n@@ -194,1 +187,1 @@\n-        userParam = config.get(NAME);\n+        userParam = config.get(getName());\n@@ -200,1 +193,1 @@\n-                PluginsResourceBundle.getMessage(NAME + \".invalidtag\"),\n+                PluginsResourceBundle.getMessage(getName() + \".invalidtag\"),\n@@ -215,1 +208,1 @@\n-                throw new PluginException(PluginsResourceBundle.getMessage(NAME + \".missingpackages\") +\n+                throw new PluginException(PluginsResourceBundle.getMessage(getName()+ \".missingpackages\") +\n@@ -232,1 +225,1 @@\n-            throw new PluginException(PluginsResourceBundle.getMessage(NAME + \".localedatanotfound\"));\n+            throw new PluginException(PluginsResourceBundle.getMessage(getName() + \".localedatanotfound\"));\n@@ -239,1 +232,1 @@\n-                String.format(PluginsResourceBundle.getMessage(NAME + \".nomatchinglocales\"), userParam));\n+                String.format(PluginsResourceBundle.getMessage(getName() + \".nomatchinglocales\"), userParam));\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/IncludeLocalesPlugin.java","additions":7,"deletions":14,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-import jdk.tools.jlink.plugin.Plugin;\n@@ -55,1 +54,1 @@\n-public final class LegalNoticeFilePlugin extends DocumentedPlugin {\n+public final class LegalNoticeFilePlugin extends AbstractPlugin {\n@@ -57,1 +56,0 @@\n-    private static final String NAME = \"dedup-legal-notices\";\n@@ -65,1 +63,1 @@\n-        super(NAME);\n+        super(\"dedup-legal-notices\");\n@@ -75,1 +73,1 @@\n-        String arg = config.get(NAME);\n+        String arg = config.get(getName());\n@@ -80,1 +78,1 @@\n-                throw new IllegalArgumentException(NAME + \": \" + arg);\n+                throw new IllegalArgumentException(getName() + \": \" + arg);\n@@ -146,5 +144,0 @@\n-\n-    @Override\n-    public String getArgumentsDescription() {\n-        return PluginsResourceBundle.getArgument(NAME);\n-    }\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/LegalNoticeFilePlugin.java","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n-import jdk.tools.jlink.plugin.Plugin;\n@@ -49,2 +48,1 @@\n-public final class OrderResourcesPlugin extends DocumentedPlugin {\n-    public static final String NAME = \"order-resources\";\n+public final class OrderResourcesPlugin extends AbstractPlugin {\n@@ -57,1 +55,1 @@\n-        super(NAME);\n+        super(\"order-resources\");\n@@ -152,5 +150,0 @@\n-    @Override\n-    public String getArgumentsDescription() {\n-       return PluginsResourceBundle.getArgument(NAME);\n-    }\n-\n@@ -159,1 +152,1 @@\n-        List<String> patterns = Utils.parseList(config.get(NAME));\n+        List<String> patterns = Utils.parseList(config.get(getName()));\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/OrderResourcesPlugin.java","additions":3,"deletions":10,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -47,1 +47,0 @@\n-import jdk.tools.jlink.plugin.Plugin;\n@@ -52,1 +51,1 @@\n-public final class ReleaseInfoPlugin extends DocumentedPlugin {\n+public final class ReleaseInfoPlugin extends AbstractPlugin {\n@@ -54,1 +53,0 @@\n-    public static final String NAME = \"release-info\";\n@@ -59,1 +57,1 @@\n-        super(NAME);\n+        super(\"release-info\");\n@@ -77,5 +75,0 @@\n-    @Override\n-    public String getArgumentsDescription() {\n-        return PluginsResourceBundle.getArgument(NAME);\n-    }\n-\n@@ -84,1 +77,1 @@\n-        String operation = config.get(NAME);\n+        String operation = config.get(getName());\n@@ -98,1 +91,1 @@\n-                      .filter(s -> !NAME.equals(s))\n+                      .filter(s -> !getName().equals(s))\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/ReleaseInfoPlugin.java","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -59,1 +59,0 @@\n-import jdk.tools.jlink.plugin.Plugin;\n@@ -73,3 +72,1 @@\n-public class StringSharingPlugin extends DocumentedPlugin implements ResourcePrevisitor {\n-\n-    public static final String NAME = \"compact-cp\";\n+public class StringSharingPlugin extends AbstractPlugin implements ResourcePrevisitor {\n@@ -343,1 +340,1 @@\n-        super(NAME);\n+        super(\"compact-cp\");\n@@ -379,5 +376,0 @@\n-    @Override\n-    public String getArgumentsDescription() {\n-       return PluginsResourceBundle.getArgument(NAME);\n-    }\n-\n@@ -386,1 +378,1 @@\n-        predicate = ResourceFilter.includeFilter(config.get(NAME));\n+        predicate = ResourceFilter.includeFilter(config.get(getName()));\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/StringSharingPlugin.java","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-import jdk.tools.jlink.plugin.Plugin;\n@@ -40,2 +39,1 @@\n-public final class StripJavaDebugAttributesPlugin extends DocumentedPlugin {\n-    public static final String NAME = \"strip-java-debug-attributes\";\n+public final class StripJavaDebugAttributesPlugin extends AbstractPlugin {\n@@ -49,1 +47,1 @@\n-        super(NAME);\n+        super(\"strip-java-debug-attributes\");\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/StripJavaDebugAttributesPlugin.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import jdk.tools.jlink.plugin.Plugin;\n@@ -36,3 +35,1 @@\n-public final class StripNativeCommandsPlugin extends DocumentedPlugin {\n-\n-    public static final String NAME = \"strip-native-commands\";\n+public final class StripNativeCommandsPlugin extends AbstractPlugin {\n@@ -41,1 +38,1 @@\n-        super(NAME);\n+        super(\"strip-native-commands\");\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/StripNativeCommandsPlugin.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -81,1 +81,0 @@\n-import jdk.tools.jlink.plugin.Plugin;\n@@ -100,4 +99,1 @@\n-public final class SystemModulesPlugin extends DocumentedPlugin {\n-    private static final String NAME = \"system-modules\";\n-    private static final String DESCRIPTION =\n-            PluginsResourceBundle.getDescription(NAME);\n+public final class SystemModulesPlugin extends AbstractPlugin {\n@@ -116,1 +112,1 @@\n-        super(NAME);\n+        super(\"system-modules\");\n@@ -131,5 +127,0 @@\n-    @Override\n-    public String getArgumentsDescription() {\n-        return PluginsResourceBundle.getArgument(NAME);\n-    }\n-\n@@ -138,1 +129,1 @@\n-        String arg = config.get(NAME);\n+        String arg = config.get(getName());\n@@ -140,1 +131,1 @@\n-            throw new IllegalArgumentException(NAME + \": \" + arg);\n+            throw new IllegalArgumentException(getName() + \": \" + arg);\n@@ -147,1 +138,1 @@\n-            throw new PluginException(NAME + \" was set\");\n+            throw new PluginException(getName() + \" was set\");\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/SystemModulesPlugin.java","additions":5,"deletions":14,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import jdk.tools.jlink.plugin.Plugin;\n@@ -48,1 +47,1 @@\n-abstract class VersionPropsPlugin extends DocumentedPlugin {\n+abstract class VersionPropsPlugin extends AbstractPlugin {\n@@ -91,5 +90,0 @@\n-    public String getArgumentsDescription() {\n-       return PluginsResourceBundle.getArgument(getName());\n-    }\n-\n-    @Override\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/VersionPropsPlugin.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-import jdk.tools.jlink.plugin.Plugin;\n@@ -45,1 +44,1 @@\n-public final class ZipPlugin extends DocumentedPlugin {\n+public final class ZipPlugin extends AbstractPlugin {\n@@ -47,1 +46,0 @@\n-    public static final String NAME = \"zip\";\n@@ -51,2 +49,1 @@\n-        super(NAME);\n-\n+        this((Predicate<String>) null);\n@@ -60,1 +57,1 @@\n-        super(NAME);\n+        super(\"zip\");\n@@ -74,5 +71,0 @@\n-    @Override\n-    public String getArgumentsDescription() {\n-        return PluginsResourceBundle.getArgument(NAME);\n-    }\n-\n@@ -81,1 +73,1 @@\n-        predicate = ResourceFilter.includeFilter(config.get(NAME));\n+        predicate = ResourceFilter.includeFilter(config.get(getName()));\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/ZipPlugin.java","additions":4,"deletions":12,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -171,1 +171,0 @@\n-            config1.put(DefaultStripDebugPlugin.NAME, \"\");\n@@ -173,0 +172,1 @@\n+            config1.put(strip.getName(), \"\");\n@@ -178,1 +178,2 @@\n-            config1.put(DefaultCompressPlugin.NAME, \"2\");\n+            String pluginName = \"compress\";\n+            config1.put(pluginName, \"2\");\n@@ -180,1 +181,4 @@\n-                    = Jlink.newPlugin(\"compress\", config1, null);\n+                    = Jlink.newPlugin(pluginName, config1, null);\n+            if(!pluginName.equals(compress.getName())) {\n+                throw new AssertionError(\"compress plugin name doesn't match test constant\");\n+            }\n","filename":"test\/jdk\/tools\/jlink\/IntegrationTest.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -72,1 +72,0 @@\n-        prop.put(ExcludeFilesPlugin.NAME, s);\n@@ -74,0 +73,1 @@\n+        prop.put(fplug.getName(), s);\n","filename":"test\/jdk\/tools\/jlink\/plugins\/ExcludeFilesPluginTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,1 +59,0 @@\n-        prop.put(ExcludePlugin.NAME, s);\n@@ -61,0 +60,1 @@\n+        prop.put(excludePlugin.getName(), s);\n","filename":"test\/jdk\/tools\/jlink\/plugins\/ExcludeModuleInfoTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -77,1 +77,0 @@\n-        prop.put(ExcludePlugin.NAME, s);\n@@ -79,0 +78,1 @@\n+        prop.put(excludePlugin.getName(), s);\n","filename":"test\/jdk\/tools\/jlink\/plugins\/ExcludePluginTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -190,1 +190,1 @@\n-            config.put(ExcludeVMPlugin.NAME, vm);\n+            config.put(p.getName(), vm);\n","filename":"test\/jdk\/tools\/jlink\/plugins\/ExcludeVMPluginTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-            config.put(OrderResourcesPlugin.NAME, \"\/zazou\/**,**\/module-info.class\");\n+            config.put(\"order-resources\", \"\/zazou\/**,**\/module-info.class\");\n@@ -119,1 +119,1 @@\n-            config.put(OrderResourcesPlugin.NAME, \"@\" + order.getAbsolutePath());\n+            config.put(\"order-resources\", \"@\" + order.getAbsolutePath());\n","filename":"test\/jdk\/tools\/jlink\/plugins\/OrderResourcesPluginTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}