{"files":[{"patch":"@@ -104,0 +104,3 @@\n+    public String getUsage() { return resourceBundle.getString(NAME + \".usage\"); }\n+\n+    @Override\n","filename":"src\/jdk.jlink\/linux\/classes\/jdk\/tools\/jlink\/internal\/plugins\/StripNativeDebugSymbolsPlugin.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -38,0 +38,18 @@\n+\n+strip-native-debug-symbols.usage=\\\n+\\  --strip-native-debug-symbols \\\n+\\      <exclude-debuginfo-files|keep-debuginfo-files|objcopy=PATH_TO_OBJ>\\n\\\n+\\                            Strip debug symbols from native libraries (if any). \\n\\\n+\\                            This plugin requires at least one option:\\n\\\n+\\                               objcopy: The path to the 'objcopy' binary.\\n\\\n+\\                                        Defaults to 'objcopy' in PATH.\\n\\\n+\\                               exclude-debuginfo-files: Exclude debug info \\n\\\n+\\                                        files. Defaults to true.\\n\\\n+\\                               keep-debuginfo-files[=<ext>]: Keep debug info\\n\\\n+\\                                        files in <file>.<ext>.\\n\\\n+\\                               Defaults to <file>.debuginfo \\n\\\n+\\                            Examples: --strip-native-debug-symbols \\n\\\n+\\                                        keep-debuginfo-files:objcopy=OBJPATH\\n\\\n+\\                               --strip-native-debug-symbols\\n\\\n+\\                                        exclude-debuginfo-files\n+\n","filename":"src\/jdk.jlink\/linux\/classes\/jdk\/tools\/jlink\/resources\/strip_native_debug_symbols_plugin.properties","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -33,8 +33,1 @@\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Locale;\n-import java.util.Map;\n+import java.util.*;\n@@ -42,3 +35,0 @@\n-import java.util.MissingResourceException;\n-import java.util.ResourceBundle;\n-import java.util.Set;\n@@ -609,3 +599,6 @@\n-            for (Plugin plugin : Utils.getSortedPlugins(pluginList)) {\n-                showPlugin(plugin, log);\n-            }\n+            pluginList.stream()\n+                    .sorted(Comparator.comparing((Plugin plugin) -> plugin.getUsage().isEmpty(),\n+                                                 (Boolean res1, Boolean res2) -> Boolean.compare(res2,res1))\n+                                      .thenComparing(Plugin::getName)\n+                    )\n+                    .forEach((plugin) -> showPlugin(plugin, log));\n@@ -618,15 +611,25 @@\n-                log.println(\"\\n\" + bundleHelper.getMessage(\"main.plugin.name\")\n-                        + \": \" + plugin.getName());\n-\n-                \/\/ print verbose details for non-builtin plugins\n-                if (!Utils.isBuiltin(plugin)) {\n-                    log.println(bundleHelper.getMessage(\"main.plugin.class\")\n-                         + \": \" + plugin.getClass().getName());\n-                    log.println(bundleHelper.getMessage(\"main.plugin.module\")\n-                         + \": \" + plugin.getClass().getModule().getName());\n-                    Category category = plugin.getType();\n-                    log.println(bundleHelper.getMessage(\"main.plugin.category\")\n-                         + \": \" + category.getName());\n-                    log.println(bundleHelper.getMessage(\"main.plugin.state\")\n-                        + \": \" + plugin.getStateDescription());\n-                }\n+                if(!plugin.getUsage().isEmpty()) {\n+                    log.println(plugin.getUsage());\n+                } else {\n+                    log.println(\"\\n\" + bundleHelper.getMessage(\"main.plugin.name\")\n+                            + \": \" + plugin.getName());\n+\n+                    \/\/ print verbose details for non-builtin plugins\n+                    if (!Utils.isBuiltin(plugin)) {\n+                        log.println(bundleHelper.getMessage(\"main.plugin.class\")\n+                                + \": \" + plugin.getClass().getName());\n+                        log.println(bundleHelper.getMessage(\"main.plugin.module\")\n+                                + \": \" + plugin.getClass().getModule().getName());\n+                        Category category = plugin.getType();\n+                        log.println(bundleHelper.getMessage(\"main.plugin.category\")\n+                                + \": \" + category.getName());\n+                        log.println(bundleHelper.getMessage(\"main.plugin.state\")\n+                                + \": \" + plugin.getStateDescription());\n+                    }\n+\n+                    String option = plugin.getOption();\n+                    if (option != null) {\n+                        log.println(bundleHelper.getMessage(\"main.plugin.option\")\n+                                + \": --\" + plugin.getOption()\n+                                + (plugin.hasArguments()? (\"=\" + plugin.getArgumentsDescription()) : \"\"));\n+                    }\n@@ -634,5 +637,4 @@\n-                String option = plugin.getOption();\n-                if (option != null) {\n-                    log.println(bundleHelper.getMessage(\"main.plugin.option\")\n-                        + \": --\" + plugin.getOption()\n-                        + (plugin.hasArguments()? (\"=\" + plugin.getArgumentsDescription()) : \"\"));\n+                    \/\/ description can be long spanning more than one line and so\n+                    \/\/ print a newline after description label.\n+                    log.println(bundleHelper.getMessage(\"main.plugin.description\")\n+                            + \": \" + plugin.getDescription());\n@@ -641,4 +643,0 @@\n-                \/\/ description can be long spanning more than one line and so\n-                \/\/ print a newline after description label.\n-                log.println(bundleHelper.getMessage(\"main.plugin.description\")\n-                        + \": \" + plugin.getDescription());\n@@ -728,1 +726,1 @@\n-        return (!Utils.isDisabled(plugin) && plugin.getOption() != null);\n+        return (!Utils.isDisabled(plugin) && (plugin.getOption() != null) || !(plugin.getUsage().isEmpty()));\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/TaskHelper.java","additions":37,"deletions":39,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-abstract class AddResourcePlugin implements Plugin {\n+abstract class AddResourcePlugin extends DocumentedPlugin {\n@@ -42,1 +42,1 @@\n-    private final String name;\n+    \/\/private final String name;\n@@ -47,1 +47,1 @@\n-        name = n;\n+        super(n);\n@@ -51,10 +51,0 @@\n-    @Override\n-    public String getName() {\n-        return name;\n-    }\n-\n-    @Override\n-    public String getDescription() {\n-        return PluginsResourceBundle.getDescription(name);\n-    }\n-\n@@ -78,1 +68,1 @@\n-       return PluginsResourceBundle.getArgument(name);\n+       return PluginsResourceBundle.getArgument(getName());\n@@ -83,1 +73,1 @@\n-        var v = config.get(name);\n+        var v = config.get(getName());\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/AddResourcePlugin.java","additions":5,"deletions":15,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-public final class DefaultCompressPlugin implements Plugin, ResourcePrevisitor {\n+public final class DefaultCompressPlugin extends DocumentedPlugin implements ResourcePrevisitor {\n@@ -53,3 +53,2 @@\n-    @Override\n-    public String getName() {\n-        return NAME;\n+    public DefaultCompressPlugin() {\n+        super(NAME);\n@@ -86,5 +85,0 @@\n-    @Override\n-    public String getDescription() {\n-        return PluginsResourceBundle.getDescription(NAME);\n-    }\n-\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/DefaultCompressPlugin.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-public final class DefaultStripDebugPlugin implements Plugin {\n+public final class DefaultStripDebugPlugin extends DocumentedPlugin {\n@@ -58,0 +58,1 @@\n+        super(NAME);\n@@ -62,10 +63,0 @@\n-    @Override\n-    public String getName() {\n-        return NAME;\n-    }\n-\n-    @Override\n-    public String getDescription() {\n-        return PluginsResourceBundle.getDescription(NAME);\n-    }\n-\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/DefaultStripDebugPlugin.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,26 @@\n+package jdk.tools.jlink.internal.plugins;\n+\n+import jdk.tools.jlink.plugin.Plugin;\n+\n+public abstract class DocumentedPlugin implements Plugin {\n+\n+    private final String NAME;\n+    protected DocumentedPlugin(String name) {\n+        this.NAME = name;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return this.NAME;\n+    }\n+\n+    @Override\n+    public String getDescription() {\n+        return PluginsResourceBundle.getDescription(NAME);\n+    }\n+\n+    @Override\n+    public String getUsage() {\n+        return PluginsResourceBundle.getUsage(NAME);\n+    };\n+}\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/DocumentedPlugin.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"added"},{"patch":"@@ -38,1 +38,1 @@\n-public final class ExcludeFilesPlugin implements Plugin {\n+public final class ExcludeFilesPlugin extends DocumentedPlugin {\n@@ -43,3 +43,2 @@\n-    @Override\n-    public String getName() {\n-        return NAME;\n+    public ExcludeFilesPlugin () {\n+        super(NAME);\n@@ -64,5 +63,0 @@\n-    @Override\n-    public String getDescription() {\n-        return PluginsResourceBundle.getDescription(NAME);\n-    }\n-\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/ExcludeFilesPlugin.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-public final class ExcludeJmodSectionPlugin implements Plugin {\n+public final class ExcludeJmodSectionPlugin extends DocumentedPlugin {\n@@ -48,3 +48,2 @@\n-    @Override\n-    public String getName() {\n-        return NAME;\n+    public ExcludeJmodSectionPlugin() {\n+        super(NAME);\n@@ -89,5 +88,0 @@\n-    @Override\n-    public String getDescription() {\n-        return PluginsResourceBundle.getDescription(NAME);\n-    }\n-\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/ExcludeJmodSectionPlugin.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-public final class ExcludePlugin implements Plugin {\n+public final class ExcludePlugin extends DocumentedPlugin {\n@@ -44,3 +44,2 @@\n-    @Override\n-    public String getName() {\n-        return NAME;\n+    public ExcludePlugin() {\n+        super(NAME);\n@@ -66,5 +65,0 @@\n-    @Override\n-    public String getDescription() {\n-        return PluginsResourceBundle.getDescription(NAME);\n-    }\n-\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/ExcludePlugin.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-public final class ExcludeVMPlugin implements Plugin {\n+public final class ExcludeVMPlugin extends DocumentedPlugin {\n@@ -93,3 +93,2 @@\n-    @Override\n-    public String getName() {\n-        return NAME;\n+    public ExcludeVMPlugin() {\n+        super(NAME);\n@@ -175,5 +174,0 @@\n-    @Override\n-    public String getDescription() {\n-        return PluginsResourceBundle.getDescription(NAME);\n-    }\n-\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/ExcludeVMPlugin.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-public final class GenerateJLIClassesPlugin implements Plugin {\n+public final class GenerateJLIClassesPlugin extends DocumentedPlugin {\n@@ -79,10 +79,1 @@\n-    }\n-\n-    @Override\n-    public String getName() {\n-        return NAME;\n-    }\n-\n-    @Override\n-    public String getDescription() {\n-        return DESCRIPTION;\n+        super(NAME);\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/GenerateJLIClassesPlugin.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-public final class IncludeLocalesPlugin implements Plugin, ResourcePrevisitor {\n+public final class IncludeLocalesPlugin extends DocumentedPlugin implements ResourcePrevisitor {\n@@ -150,3 +150,2 @@\n-    @Override\n-    public String getName() {\n-        return NAME;\n+    public IncludeLocalesPlugin() {\n+        super(NAME);\n@@ -183,5 +182,0 @@\n-    @Override\n-    public String getDescription() {\n-        return PluginsResourceBundle.getDescription(NAME);\n-    }\n-\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/IncludeLocalesPlugin.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-public final class LegalNoticeFilePlugin implements Plugin {\n+public final class LegalNoticeFilePlugin extends DocumentedPlugin {\n@@ -64,3 +64,2 @@\n-    @Override\n-    public String getName() {\n-        return NAME;\n+    public LegalNoticeFilePlugin() {\n+        super(NAME);\n@@ -143,5 +142,0 @@\n-    @Override\n-    public String getDescription() {\n-        return PluginsResourceBundle.getDescription(NAME);\n-    }\n-\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/LegalNoticeFilePlugin.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-public final class OrderResourcesPlugin implements Plugin {\n+public final class OrderResourcesPlugin extends DocumentedPlugin {\n@@ -57,0 +57,1 @@\n+        super(NAME);\n@@ -61,5 +62,0 @@\n-    @Override\n-    public String getName() {\n-        return NAME;\n-    }\n-\n@@ -151,5 +147,0 @@\n-    @Override\n-    public String getDescription() {\n-        return PluginsResourceBundle.getDescription(NAME);\n-    }\n-\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/OrderResourcesPlugin.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+    static final String USAGE = \"usage\";\n@@ -60,0 +61,4 @@\n+    public static String getUsage(String name) {\n+        return getMessage(name + \".\" + USAGE, name);\n+    }\n+\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/PluginsResourceBundle.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-public final class ReleaseInfoPlugin implements Plugin {\n+public final class ReleaseInfoPlugin extends DocumentedPlugin {\n@@ -58,8 +58,2 @@\n-    @Override\n-    public Category getType() {\n-        return Category.METAINFO_ADDER;\n-    }\n-\n-    @Override\n-    public String getName() {\n-        return NAME;\n+    public ReleaseInfoPlugin() {\n+        super(NAME);\n@@ -69,2 +63,2 @@\n-    public String getDescription() {\n-        return PluginsResourceBundle.getDescription(NAME);\n+    public Category getType() {\n+        return Category.METAINFO_ADDER;\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/ReleaseInfoPlugin.java","additions":5,"deletions":11,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-public class StringSharingPlugin implements Plugin, ResourcePrevisitor {\n+public class StringSharingPlugin extends DocumentedPlugin implements ResourcePrevisitor {\n@@ -343,0 +343,1 @@\n+        super(NAME);\n@@ -373,10 +374,0 @@\n-    @Override\n-    public String getName() {\n-        return NAME;\n-    }\n-\n-    @Override\n-    public String getDescription() {\n-        return PluginsResourceBundle.getDescription(NAME);\n-    }\n-\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/StringSharingPlugin.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-public final class StripJavaDebugAttributesPlugin implements Plugin {\n+public final class StripJavaDebugAttributesPlugin extends DocumentedPlugin {\n@@ -49,0 +49,1 @@\n+        super(NAME);\n@@ -52,10 +53,0 @@\n-    @Override\n-    public String getName() {\n-        return NAME;\n-    }\n-\n-    @Override\n-    public String getDescription() {\n-        return PluginsResourceBundle.getDescription(NAME);\n-    }\n-\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/StripJavaDebugAttributesPlugin.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-public final class StripNativeCommandsPlugin implements Plugin {\n+public final class StripNativeCommandsPlugin extends DocumentedPlugin {\n@@ -40,3 +40,2 @@\n-    @Override\n-    public String getName() {\n-        return NAME;\n+    public StripNativeCommandsPlugin() {\n+        super(NAME);\n@@ -58,5 +57,0 @@\n-\n-    @Override\n-    public String getDescription() {\n-        return PluginsResourceBundle.getDescription(NAME);\n-    }\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/StripNativeCommandsPlugin.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-public final class SystemModulesPlugin implements Plugin {\n+public final class SystemModulesPlugin extends DocumentedPlugin {\n@@ -116,0 +116,1 @@\n+        super(NAME);\n@@ -119,10 +120,0 @@\n-    @Override\n-    public String getName() {\n-        return NAME;\n-    }\n-\n-    @Override\n-    public String getDescription() {\n-        return DESCRIPTION;\n-    }\n-\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/SystemModulesPlugin.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-abstract class VersionPropsPlugin implements Plugin {\n+abstract class VersionPropsPlugin extends DocumentedPlugin {\n@@ -53,1 +53,0 @@\n-    private final String name;\n@@ -62,0 +61,1 @@\n+        super(option);\n@@ -63,1 +63,0 @@\n-        this.name = option;\n@@ -76,10 +75,0 @@\n-    @Override\n-    public String getName() {\n-        return name;\n-    }\n-\n-    @Override\n-    public String getDescription() {\n-        return PluginsResourceBundle.getDescription(name);\n-    }\n-\n@@ -103,1 +92,1 @@\n-       return PluginsResourceBundle.getArgument(name);\n+       return PluginsResourceBundle.getArgument(getName());\n@@ -108,1 +97,1 @@\n-        var v = config.get(name);\n+        var v = config.get(getName());\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/VersionPropsPlugin.java","additions":4,"deletions":15,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-public final class ZipPlugin implements Plugin {\n+public final class ZipPlugin extends DocumentedPlugin {\n@@ -51,0 +51,1 @@\n+        super(NAME);\n@@ -59,0 +60,1 @@\n+        super(NAME);\n@@ -62,5 +64,0 @@\n-    @Override\n-    public String getName() {\n-        return NAME;\n-    }\n-\n@@ -72,5 +69,0 @@\n-    @Override\n-    public String getDescription() {\n-        return PluginsResourceBundle.getDescription(NAME);\n-    }\n-\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/ZipPlugin.java","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -127,0 +127,8 @@\n+    \/**\n+     * The plugin usage for printing to console.\n+     * @return The usage.\n+     *\/\n+    public default String getUsage() {\n+        return \"\";\n+    }\n+\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/plugin\/Plugin.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -33,0 +33,5 @@\n+add-options.usage=\\\n+\\  --add-options <options>   Prepend the specified <options> string, which may\\n\\\n+\\                            include whitespace, before any other options when\\n\\\n+\\                            invoking the virtual machine in the resulting image.\n+\n@@ -41,0 +46,8 @@\n+release-info.usage=\\\n+\\  --release-info <file>|add:<key1>=<value1>:<key2>=<value2>:...|del:<key list>\\n\\\n+\\                            <file> option is to load release properties from\\n\\\n+\\                            the supplied file.\\n\\\n+\\                            add: is to add properties to the 'release' file.\\n\\\n+\\                            Any number of <key>=<value> pairs can be passed.\\n\\\n+\\                            del: is to delete the list of keys in release file.\n+\n@@ -46,0 +59,3 @@\n+class-for-name.usage=\\\n+\\  --class-for-name          Class optimization: convert Class.forName calls to constant loads.\n+\n@@ -56,0 +72,9 @@\n+compress.usage=\\\n+\\  --compress <0|1|2>[:filter=<pattern-list>]\\n\\\n+\\                            Compress all resources in the output image.\\n\\\n+\\                            Level 0: No compression\\n\\\n+\\                            Level 1: Constant string sharing\\n\\\n+\\                            Level 2: ZIP.\\n\\\n+\\                            An optional <pattern-list> filter can be\\n\\\n+\\                            specified to list the pattern of files to be included.\n+\n@@ -62,0 +87,7 @@\n+compact-cp.usage=\\\n+\\ --compact-cp <resource paths>\\n\\\n+\\                             Constant Pool strings sharing.\\n\\\n+\\                             By default, all resources are compressed.\\n\\\n+\\                             You can express the set of resources to\\n\\\n+\\                             compress or not compress (use ^ for negation).\n+\n@@ -69,0 +101,7 @@\n+dedup-legal-notices.usage=\\\n+\\  --dedup-legal-notices [error-if-not-same-content]\\n\\\n+\\                            De-duplicate all legal notices.\\n\\\n+\\                            If error-if-not-same-content is specified then\\n\\\n+\\                            it will be an error if two files of the same\\n\\\n+\\                            filename are different.\n+\n@@ -74,0 +113,5 @@\n+exclude-files.usage=\\\n+\\  --exclude-files <pattern-list>\\n\\\n+\\                            Specify files to exclude.\\n\\\n+\\                            e.g.: **.java,glob:\/java.base\/lib\/client\/**\n+\n@@ -79,0 +123,5 @@\n+exclude-resources.usage=\\\n+\\  --exclude-resources <pattern-list>\\n\\\n+\\                            Specify resources to exclude.\\n\\\n+\\                            e.g.: **.jcov,glob:**\/META-INF\/**\n+\n@@ -85,0 +134,5 @@\n+exclude-jmod-section.usage=\\\n+\\  --exclude-jmod-section <section-name>\\n\\\n+\\                            Specify a JMOD section to exclude.\\n\\\n+\\                            Where <section-name> is \\\"man\\\" or \\\"headers\\\".\n+\n@@ -94,0 +148,10 @@\n+generate-jli-classes.usage=\\\n+\\  --generate-jli-classes @filename\\n\\\n+\\                            Specify a file listing the java.lang.invoke classes\\n\\\n+\\                            to pre-generate. By default, this plugin may use a \\n\\\n+\\                            builtin list of classes to pre-generate. If this plugin\\n\\\n+\\                            runs on a different runtime version than the image being \\n\\\n+\\                            created then code generation will be disabled by \\n\\\n+\\                            default to guarantee correctness \\n\\\n+\\                            add ignore-version=true to override this.\n+\n@@ -98,0 +162,4 @@\n+system-modules.usage=\\\n+\\  --system-modules retainModuleTarget\\n\\\n+\\                            Fast loading of module descriptors (always enabled)\n+\n@@ -106,0 +174,5 @@\n+order-resources.usage=\\\n+\\  --order-resources <pattern-list>\\n\\\n+\\                            Order resources. \\n\\\n+\\                            e.g.: **\/module-info.class,@classlist,\/java.base\/java\/lang\/**\n+\n@@ -109,0 +182,3 @@\n+strip-debug.usage=\\\n+\\  --strip-debug             Strip debug information from the output image\n+\n@@ -112,0 +188,4 @@\n+strip-java-debug-attributes.usage=\\\n+\\  --strip-java-debug-attributes \\n\\\n+\\                            Strip Java debug attributes from classes in the output image\n+\n@@ -115,0 +195,3 @@\n+strip-native-commands.usage=\\\n+\\  --strip-native-commands   Exclude native commands (such as java\/java.exe) from the image\n+\n@@ -121,0 +204,6 @@\n+vendor-version.usage=\\\n+\\  --vendor-version <vendor-version>\\n\\\n+\\                            Override the vendor version string baked into the build,\\n\\\n+\\                            if any. The value of the system property\\n\\\n+\\                            \"java.vendor.version\" will be <vendor-version>.\n+\n@@ -127,0 +216,6 @@\n+vendor-bug-url.usage=\\\n+\\  --vendor-bug-url <vendor-bug-url>\\n\\\n+\\                            Override the vendor bug URL baked into the build.\\n\\\n+\\                            The value of the system property\\n\\\n+\\                            \"java.vendor.url.bug\" will be <vendor-url-bug>.\n+\n@@ -133,0 +228,5 @@\n+vendor-vm-bug-url.usage=\\\n+\\  --vendor-vm-bug-url <vendor-vm-bug-url>\\n\\\n+\\                            Override the vendor VM bug URL baked into the build.\\n\\\n+\\                            The URL displayed in VM error logs will be <vendor-vm-bug-url>.\n+\n@@ -138,0 +238,4 @@\n+vm.usage=\\\n+\\  --vm <client|server|minimal|all>\\n\\\n+\\                            Select the HotSpot VM in the output image.  Default is all\n+\n@@ -142,0 +246,4 @@\n+zip.usage=\\\n+\\  --zip [comma separated list of resource paths]\\n\\\n+\\                            ZIP Compression\n+\n@@ -149,0 +257,5 @@\n+include-locales.usage=\\\n+\\  --include-locales <langtag>[,<langtag>]*\\n\\\n+\\                            BCP 47 language tags separated by a comma, allowing\\n\\\n+\\                            locale matching defined in RFC 4647. e.g.: en,ja,*-IN\n+\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/resources\/plugins.properties","additions":113,"deletions":0,"binary":false,"changes":113,"status":"modified"},{"patch":"@@ -247,1 +247,1 @@\n-                    .filter((s) -> s.matches(\"Plugin Name:.*\"))\n+                    .filter((s) -> s.matches(\"  --.*\"))\n","filename":"test\/jdk\/tools\/jlink\/JLinkTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}